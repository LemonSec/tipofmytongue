1
00:00:00,000 --> 00:00:04,920
hello hello good afternoon welcome to

2
00:00:01,650 --> 00:00:07,709
warm charming harvestin malware lures

3
00:00:04,920 --> 00:00:12,059
for fun and profit with the drum army me

4
00:00:07,710 --> 00:00:13,740
from inquest dotnet now just a few brief

5
00:00:12,059 --> 00:00:15,889
notes before we begin please stop by the

6
00:00:13,740 --> 00:00:18,509
business hall located in Mandalay Bay

7
00:00:15,890 --> 00:00:20,880
Oceanside and shoreline ballrooms level

8
00:00:18,510 --> 00:00:22,859
2 during the day and the Welcome

9
00:00:20,880 --> 00:00:25,439
Reception is this evening at 5:30 p.m.

10
00:00:22,859 --> 00:00:28,410
the blackout Arsenal is in the business

11
00:00:25,439 --> 00:00:31,198
hall level 2 you can join us for the

12
00:00:28,410 --> 00:00:36,000
pony Awards that's going to be today at

13
00:00:31,199 --> 00:00:38,219
logon JKL 6:30 p.m. please put your

14
00:00:36,000 --> 00:00:40,050
phone in vibrate just silence your

15
00:00:38,219 --> 00:00:41,640
phones for everyone and please give a

16
00:00:40,050 --> 00:00:44,780
warm welcome to our speaker today

17
00:00:41,640 --> 00:00:47,250
again that's petrm Armenian thank you

18
00:00:44,780 --> 00:00:48,750
Thank You Angelo for the introduction

19
00:00:47,250 --> 00:00:51,120
good afternoon thank you guys for

20
00:00:48,750 --> 00:00:52,860
joining my name is Pedram and i'm here

21
00:00:51,120 --> 00:00:54,718
to talk about a subject that is

22
00:00:52,860 --> 00:00:57,360
something that i research pretty much

23
00:00:54,719 --> 00:00:58,770
daily I find fascinating and I wanted to

24
00:00:57,360 --> 00:01:00,739
share some notes that we've taken over

25
00:00:58,770 --> 00:01:02,969
time as well as towards the end

26
00:01:00,739 --> 00:01:04,289
announced a public data portal where you

27
00:01:02,969 --> 00:01:06,540
can essentially play with this kind of

28
00:01:04,290 --> 00:01:09,090
data and make some more discoveries on

29
00:01:06,540 --> 00:01:11,280
your own you know as a researcher having

30
00:01:09,090 --> 00:01:13,080
access to data is critical as time goes

31
00:01:11,280 --> 00:01:15,570
on it's becoming more more closed

32
00:01:13,080 --> 00:01:18,240
circles so this is one of my attempts at

33
00:01:15,570 --> 00:01:19,408
giving back and exposing data for folks

34
00:01:18,240 --> 00:01:21,780
who are trying to get their their feet

35
00:01:19,409 --> 00:01:24,180
wet in this world so some quick

36
00:01:21,780 --> 00:01:25,770
background on Who I am born or raised in

37
00:01:24,180 --> 00:01:28,979
New York City living out of Austin Texas

38
00:01:25,770 --> 00:01:30,570
now for the past 10 15 years you know

39
00:01:28,979 --> 00:01:32,520
started off my computer hacking in the

40
00:01:30,570 --> 00:01:35,100
1990s with phone phreaking with red

41
00:01:32,520 --> 00:01:36,960
boxes and reverse engineering software

42
00:01:35,100 --> 00:01:39,210
with soft ice you know I had gotten

43
00:01:36,960 --> 00:01:42,119
access to a laptop didn't have any money

44
00:01:39,210 --> 00:01:43,500
to afford software got soft ice and

45
00:01:42,119 --> 00:01:45,390
started cracking software just as a

46
00:01:43,500 --> 00:01:47,369
means of getting access to it and in

47
00:01:45,390 --> 00:01:49,439
that process kind of learned you know

48
00:01:47,369 --> 00:01:50,939
the tricks of the trade you know I

49
00:01:49,439 --> 00:01:52,320
started off my career with a company

50
00:01:50,939 --> 00:01:53,639
called AI defense we launched the

51
00:01:52,320 --> 00:01:56,130
vulnerability contributor program the

52
00:01:53,640 --> 00:01:57,509
first loan buying program was kind later

53
00:01:56,130 --> 00:01:58,860
I kind of perfected that model by

54
00:01:57,509 --> 00:02:01,380
creating the zero day initiative under

55
00:01:58,860 --> 00:02:03,390
tipping point I've done a bunch of open

56
00:02:01,380 --> 00:02:05,339
source projects like I'm a reverse

57
00:02:03,390 --> 00:02:07,439
engineering framework sully is a fuzzing

58
00:02:05,340 --> 00:02:09,270
framework I've written a book on

59
00:02:07,439 --> 00:02:11,670
fuzzing X I can see my co-author sitting

60
00:02:09,270 --> 00:02:13,530
here in the audience today

61
00:02:11,670 --> 00:02:15,540
you know beyond that I've done some

62
00:02:13,530 --> 00:02:17,160
startups where I work on an anti-virus

63
00:02:15,540 --> 00:02:19,950
remover product called jump shot that

64
00:02:17,160 --> 00:02:22,950
was sold to Avast we were an advanced

65
00:02:19,950 --> 00:02:24,899
malware removal tool and in recent

66
00:02:22,950 --> 00:02:26,160
history I've been working on inquest you

67
00:02:24,900 --> 00:02:28,260
know we deal with these kinds of

68
00:02:26,160 --> 00:02:30,570
problems in essence we're a file

69
00:02:28,260 --> 00:02:32,940
analytics platform designed to solve

70
00:02:30,570 --> 00:02:35,790
problems for sock analysts and stock

71
00:02:32,940 --> 00:02:37,859
communities so what we're talking about

72
00:02:35,790 --> 00:02:39,630
today subject wise

73
00:02:37,860 --> 00:02:42,840
I chose warm charming this is actually a

74
00:02:39,630 --> 00:02:44,609
real-world Texas sport I mentioned I'm

75
00:02:42,840 --> 00:02:47,190
from Texas and in East Texas they have

76
00:02:44,610 --> 00:02:49,860
this competitive sport where through

77
00:02:47,190 --> 00:02:51,690
some kind of vibration noise or thumping

78
00:02:49,860 --> 00:02:53,970
on the ground they're attempting to make

79
00:02:51,690 --> 00:02:55,320
these worms come to the surface and so I

80
00:02:53,970 --> 00:02:57,450
thought that was pertinent to what we're

81
00:02:55,320 --> 00:03:01,230
talking about today and I like that fun

82
00:02:57,450 --> 00:03:03,540
you know kind of side analogy and so in

83
00:03:01,230 --> 00:03:05,579
our context what worm farming is is

84
00:03:03,540 --> 00:03:07,500
we're looking for interesting malware

85
00:03:05,580 --> 00:03:09,810
lures you know we're going to harvest a

86
00:03:07,500 --> 00:03:11,730
giant corpus of malware from a variety

87
00:03:09,810 --> 00:03:13,560
different sources we'll be focusing on

88
00:03:11,730 --> 00:03:15,060
one particular one and then we're going

89
00:03:13,560 --> 00:03:16,440
to be dissecting through those to try

90
00:03:15,060 --> 00:03:17,730
and find the interesting samples you

91
00:03:16,440 --> 00:03:20,250
know there's a ton of malware samples

92
00:03:17,730 --> 00:03:20,820
created on a daily basis among those are

93
00:03:20,250 --> 00:03:22,500
some gems

94
00:03:20,820 --> 00:03:25,709
you know sometimes you'll even be able

95
00:03:22,500 --> 00:03:27,690
to find oday that is being experimented

96
00:03:25,710 --> 00:03:29,280
with before malware campaign actually

97
00:03:27,690 --> 00:03:31,770
launches and goes like full production

98
00:03:29,280 --> 00:03:33,390
so potentially as a defender you might

99
00:03:31,770 --> 00:03:35,640
be able to get these like early warning

100
00:03:33,390 --> 00:03:39,089
signs and then produce either prevention

101
00:03:35,640 --> 00:03:41,220
or detection mechanisms to you know stop

102
00:03:39,090 --> 00:03:41,700
that kind of attack this is not want to

103
00:03:41,220 --> 00:03:44,880
stay here

104
00:03:41,700 --> 00:03:46,859
so agenda wise you know what kind of

105
00:03:44,880 --> 00:03:48,810
lures we want to find where do we go

106
00:03:46,860 --> 00:03:50,550
find them you know how do we dissect

107
00:03:48,810 --> 00:03:51,990
them and then which ones of these are

108
00:03:50,550 --> 00:03:54,690
interesting and these pictures are not

109
00:03:51,990 --> 00:03:56,010
staged or fake or b-roll if this is a

110
00:03:54,690 --> 00:03:57,870
real competitive sport that's a dude

111
00:03:56,010 --> 00:04:02,820
with a tuba trying to get worms to come

112
00:03:57,870 --> 00:04:04,590
to the surface of that fields so what

113
00:04:02,820 --> 00:04:06,120
kind of lures are we interested in you

114
00:04:04,590 --> 00:04:08,070
know there's a lot of beautiful exploits

115
00:04:06,120 --> 00:04:10,320
out there it's very hard to write x

116
00:04:08,070 --> 00:04:12,450
points these days the the ramp-up time

117
00:04:10,320 --> 00:04:14,040
is like a whole team for a year you're

118
00:04:12,450 --> 00:04:16,709
chaining X boys together and you're

119
00:04:14,040 --> 00:04:18,269
jumping from one ship to another but

120
00:04:16,709 --> 00:04:20,548
unfortunately the reality of it is

121
00:04:18,269 --> 00:04:21,738
there's the two major types of breeches

122
00:04:20,548 --> 00:04:23,630
out there are

123
00:04:21,738 --> 00:04:25,460
either someone left their bucket open

124
00:04:23,630 --> 00:04:28,370
and you know all your credit card data

125
00:04:25,460 --> 00:04:30,859
has now been siphoned off by some person

126
00:04:28,370 --> 00:04:32,150
or they're attacking the endpoint

127
00:04:30,860 --> 00:04:35,240
they're attacking the end user

128
00:04:32,150 --> 00:04:37,159
you know either via some malicious

129
00:04:35,240 --> 00:04:38,960
attachment that's coming by email or

130
00:04:37,160 --> 00:04:41,539
drive-by download that maybe they're

131
00:04:38,960 --> 00:04:43,729
sending you a URL these are your your

132
00:04:41,539 --> 00:04:46,099
PDF documents your office documents your

133
00:04:43,729 --> 00:04:47,719
Java your flash you know flash is dead

134
00:04:46,099 --> 00:04:50,000
in the browser but that subsystem is

135
00:04:47,720 --> 00:04:53,870
still readily available and accessible

136
00:04:50,000 --> 00:04:55,729
via a document attachment so in 2018 for

137
00:04:53,870 --> 00:04:57,680
example we saw 2-0 days that targeted

138
00:04:55,729 --> 00:05:00,320
flash but they were delivered via email

139
00:04:57,680 --> 00:05:01,639
inside of an actual document that's what

140
00:05:00,320 --> 00:05:04,820
we have this example here this

141
00:05:01,639 --> 00:05:07,039
encapsulation or matura capable Luers

142
00:05:04,820 --> 00:05:08,990
you know I can layer them one layer

143
00:05:07,039 --> 00:05:11,240
inside of another it requires some user

144
00:05:08,990 --> 00:05:13,220
interaction to actually get to it but

145
00:05:11,240 --> 00:05:15,620
that ends up bypassing security defenses

146
00:05:13,220 --> 00:05:18,409
it's very hard to detect by a sandbox

147
00:05:15,620 --> 00:05:20,419
and detonation and there's a myriad of

148
00:05:18,409 --> 00:05:22,280
these kinds of samples right some of

149
00:05:20,419 --> 00:05:23,659
them are actual vulnerabilities they

150
00:05:22,280 --> 00:05:26,000
have CVS like the ones on the screen

151
00:05:23,659 --> 00:05:27,949
over here sometimes you've got your

152
00:05:26,000 --> 00:05:30,620
freebies you know Microsoft had this

153
00:05:27,949 --> 00:05:32,090
dynamic data exchange vulnerability that

154
00:05:30,620 --> 00:05:33,409
at first they denied it was a

155
00:05:32,090 --> 00:05:35,388
vulnerability then they ended up

156
00:05:33,409 --> 00:05:37,070
eventually fixing it it was essentially

157
00:05:35,389 --> 00:05:38,870
just a command execution like I would

158
00:05:37,070 --> 00:05:41,479
send you a document you open it and it's

159
00:05:38,870 --> 00:05:42,800
launching arbitrary commands I call that

160
00:05:41,479 --> 00:05:44,659
a free because it was ridiculously easy

161
00:05:42,800 --> 00:05:47,360
to exploit I could teach an audience how

162
00:05:44,659 --> 00:05:48,380
to do it in like three slides and then

163
00:05:47,360 --> 00:05:50,479
of course you've got you know what we

164
00:05:48,380 --> 00:05:53,210
called on you know uninformed consent

165
00:05:50,479 --> 00:05:55,669
folks who will enable a macro for

166
00:05:53,210 --> 00:05:57,799
example and just essentially launch a

167
00:05:55,669 --> 00:05:59,870
piece of malware through lack of

168
00:05:57,800 --> 00:06:01,190
knowledge there's you know plethora of

169
00:05:59,870 --> 00:06:03,199
examples and the screenshot we're

170
00:06:01,190 --> 00:06:05,270
showing one where it's a real world

171
00:06:03,199 --> 00:06:07,159
campaign they actually have an embedded

172
00:06:05,270 --> 00:06:08,990
binary inside the metadata and the macro

173
00:06:07,159 --> 00:06:11,930
pivots to it you can see it from this

174
00:06:08,990 --> 00:06:14,270
base 64 encoded TV if you look at basics

175
00:06:11,930 --> 00:06:16,219
if we're on coded content this will kind

176
00:06:14,270 --> 00:06:18,979
of stand out to you but a very common

177
00:06:16,219 --> 00:06:20,389
example so now the next question is you

178
00:06:18,979 --> 00:06:23,990
know where do we dig where do we get

179
00:06:20,389 --> 00:06:26,419
these things from there's open platforms

180
00:06:23,990 --> 00:06:27,710
like hybrid analysis and any run you

181
00:06:26,419 --> 00:06:29,930
know a lot of guys are doing harvesting

182
00:06:27,710 --> 00:06:31,580
on these platforms they'll go on to look

183
00:06:29,930 --> 00:06:33,050
at the daily uploads and they'll pull

184
00:06:31,580 --> 00:06:34,210
samples from there and dig around that

185
00:06:33,050 --> 00:06:37,360
so that's an option for me

186
00:06:34,210 --> 00:06:38,830
Searchers you know you can crawl IOC is

187
00:06:37,360 --> 00:06:40,479
that you're pulling off of either blogs

188
00:06:38,830 --> 00:06:42,758
that people are publishing or maybe you

189
00:06:40,479 --> 00:06:44,289
have keyword searches on Twitter and

190
00:06:42,759 --> 00:06:45,759
you're now getting iOS CS you can feed

191
00:06:44,289 --> 00:06:47,110
to a crawler that goes out and it starts

192
00:06:45,759 --> 00:06:50,080
grabbing things and pulling into your

193
00:06:47,110 --> 00:06:52,240
your corpus you can map attacker

194
00:06:50,080 --> 00:06:55,180
infrastructure right so perhaps I've

195
00:06:52,240 --> 00:06:56,530
gotten some key finger into attacker

196
00:06:55,180 --> 00:06:58,870
infrastructure I can map out other

197
00:06:56,530 --> 00:07:00,789
domains and IPS and start harvesting

198
00:06:58,870 --> 00:07:02,289
lures that way you know if you're

199
00:07:00,789 --> 00:07:03,370
working at a large company you can look

200
00:07:02,289 --> 00:07:05,050
at your own email school you know

201
00:07:03,370 --> 00:07:06,820
there's there to be a plethora of

202
00:07:05,050 --> 00:07:10,090
attacks that are coming in and any large

203
00:07:06,820 --> 00:07:12,909
scale enterprise and then finally you

204
00:07:10,090 --> 00:07:13,929
know we can focus on a virustotal you

205
00:07:12,910 --> 00:07:15,820
know it's a service if you're not

206
00:07:13,930 --> 00:07:18,099
familiar with it from Google that's

207
00:07:15,820 --> 00:07:20,050
essentially a V consensus you upload a

208
00:07:18,099 --> 00:07:21,639
file they'll run it across 60 different

209
00:07:20,050 --> 00:07:24,039
engines they give you the results from

210
00:07:21,639 --> 00:07:25,479
there and for researchers you can

211
00:07:24,039 --> 00:07:27,280
purchase an account and actually get

212
00:07:25,479 --> 00:07:29,560
data fed to you from there I don't think

213
00:07:27,280 --> 00:07:31,000
there's anybody that works in the AV

214
00:07:29,560 --> 00:07:33,430
industry does not have access to

215
00:07:31,000 --> 00:07:35,560
virustotal as intelligence feed it's

216
00:07:33,430 --> 00:07:37,180
very heavily used by folks for fuelling

217
00:07:35,560 --> 00:07:38,620
their machine learning algorithms you

218
00:07:37,180 --> 00:07:40,810
know that of course has its own biases

219
00:07:38,620 --> 00:07:44,229
associated with it but it's it's a very

220
00:07:40,810 --> 00:07:48,520
solid and useful platform I'm terrible

221
00:07:44,229 --> 00:07:52,990
at doing this thing lightly let me

222
00:07:48,520 --> 00:07:55,030
switch the keyboard so on the attacker

223
00:07:52,990 --> 00:07:56,680
infrastructure side you know if you're

224
00:07:55,030 --> 00:07:59,739
looking to self source IO sees from

225
00:07:56,680 --> 00:08:01,599
wherever it is Twitter blogs whatnot

226
00:07:59,740 --> 00:08:02,889
we've got some public open source tools

227
00:08:01,599 --> 00:08:05,139
for you to use where you can pull those

228
00:08:02,889 --> 00:08:06,909
things down the general idea here though

229
00:08:05,139 --> 00:08:08,740
is you're looking for anchors you know a

230
00:08:06,909 --> 00:08:10,599
domain name has to be registered by an

231
00:08:08,740 --> 00:08:12,370
email address of course that can be

232
00:08:10,599 --> 00:08:13,870
anonymized but if someone is registering

233
00:08:12,370 --> 00:08:15,310
multiple domains with the same email

234
00:08:13,870 --> 00:08:17,259
that becomes an anchor where if I find

235
00:08:15,310 --> 00:08:20,110
one domain I can now go a numerator ones

236
00:08:17,259 --> 00:08:21,669
you know domains resolve to an IP I can

237
00:08:20,110 --> 00:08:23,349
reverse DNS that to see what other

238
00:08:21,669 --> 00:08:25,210
domains are on that IP you know perhaps

239
00:08:23,349 --> 00:08:27,639
it's a shared server or a CloudFlare

240
00:08:25,210 --> 00:08:29,409
server or maybe there's multiple domains

241
00:08:27,639 --> 00:08:30,820
on that IP that are malicious and each

242
00:08:29,409 --> 00:08:33,189
one of these starts pivoting out to

243
00:08:30,820 --> 00:08:35,439
other ones attackers will typically

244
00:08:33,190 --> 00:08:37,329
either stand up infrastructure so you

245
00:08:35,440 --> 00:08:39,520
know get to get a server somewhere make

246
00:08:37,328 --> 00:08:41,289
an Amazon put something on a paste bin

247
00:08:39,520 --> 00:08:43,838
or they'll take over you know they'll

248
00:08:41,289 --> 00:08:45,040
find WordPress vulnerabilities scan the

249
00:08:43,839 --> 00:08:46,070
web for them and then just you know

250
00:08:45,040 --> 00:08:49,370
upload their files

251
00:08:46,070 --> 00:08:50,810
to ensure that these places where

252
00:08:49,370 --> 00:08:52,639
they're they're putting their next stage

253
00:08:50,810 --> 00:08:54,439
pivots on they don't get marked by

254
00:08:52,639 --> 00:08:56,389
reputation because their existing valid

255
00:08:54,440 --> 00:08:59,060
sites that have been around for some

256
00:08:56,389 --> 00:09:00,829
time you know other things you can pivot

257
00:08:59,060 --> 00:09:01,969
on is you know some less looked at

258
00:09:00,829 --> 00:09:03,410
things things like this is social

259
00:09:01,970 --> 00:09:06,050
certificates now maybe someone's using

260
00:09:03,410 --> 00:09:07,579
the same ssl certificate ID on two

261
00:09:06,050 --> 00:09:09,829
different sites and now you can tie them

262
00:09:07,579 --> 00:09:11,449
in that way or they're actually tracking

263
00:09:09,829 --> 00:09:12,829
their malware campaigns by using Google

264
00:09:11,449 --> 00:09:15,019
Analytics and they have the same Google

265
00:09:12,829 --> 00:09:17,870
Analytics ID embedded in their their

266
00:09:15,019 --> 00:09:19,970
services like census for example that

267
00:09:17,870 --> 00:09:22,130
allow you to just search at scale you

268
00:09:19,970 --> 00:09:23,930
know kind of like a Google of HTML

269
00:09:22,130 --> 00:09:25,819
source code and you can use that for

270
00:09:23,930 --> 00:09:27,469
pivoting and finding all these sources

271
00:09:25,819 --> 00:09:29,569
to pull it in so a variety of different

272
00:09:27,470 --> 00:09:31,370
things you can do here and once you do

273
00:09:29,569 --> 00:09:32,660
have some anchor you know there's a

274
00:09:31,370 --> 00:09:34,370
variety of open-source tools you can use

275
00:09:32,660 --> 00:09:37,189
for pivoting they're showed on there's

276
00:09:34,370 --> 00:09:40,420
gray noise domain tools and a lot of

277
00:09:37,190 --> 00:09:42,800
virustotal uh services are also free

278
00:09:40,420 --> 00:09:44,089
don't worry about all these slides will

279
00:09:42,800 --> 00:09:45,859
be made available and we'll publish them

280
00:09:44,089 --> 00:09:47,600
on our blog and whatnot but here are

281
00:09:45,860 --> 00:09:50,569
just some examples for how to pivot on

282
00:09:47,600 --> 00:09:54,500
an IP address or on a DNS just using you

283
00:09:50,569 --> 00:09:57,290
know open free api's you know we're

284
00:09:54,500 --> 00:10:00,889
gonna dive into worm charming over top

285
00:09:57,290 --> 00:10:02,029
of BTI virustotal intelligence so when

286
00:10:00,889 --> 00:10:03,260
we're talking about this we need to look

287
00:10:02,029 --> 00:10:05,149
at the scale all right what are we

288
00:10:03,260 --> 00:10:08,180
looking at in terms of numbers so this

289
00:10:05,149 --> 00:10:09,680
was just recently screenshotted you know

290
00:10:08,180 --> 00:10:11,569
and august 4th this is typically to kind

291
00:10:09,680 --> 00:10:14,420
of see it over time you know you've got

292
00:10:11,569 --> 00:10:16,399
something like 1.2 1.3 million samples

293
00:10:14,420 --> 00:10:18,769
are uploaded to virustotal a day of

294
00:10:16,399 --> 00:10:20,779
those a million of them are distinct you

295
00:10:18,769 --> 00:10:25,069
know for 1 mm there or have already been

296
00:10:20,779 --> 00:10:28,370
uploaded that same day of those 400,000

297
00:10:25,069 --> 00:10:29,510
are actually or nine thousand are new

298
00:10:28,370 --> 00:10:31,610
and distinct so they've never been seen

299
00:10:29,510 --> 00:10:34,399
before not just a sync that day and then

300
00:10:31,610 --> 00:10:36,170
of those about 400,000 are malicious so

301
00:10:34,399 --> 00:10:39,139
if you got 1.3 million samples to

302
00:10:36,170 --> 00:10:41,839
harvest from that little marker in the

303
00:10:39,139 --> 00:10:43,670
bottom corner there now if we look at

304
00:10:41,839 --> 00:10:45,529
the file distribution you know of those

305
00:10:43,670 --> 00:10:48,199
files four and a thousand break down to

306
00:10:45,529 --> 00:10:50,120
PDF than 40-thousand for office 15,000

307
00:10:48,199 --> 00:10:50,569
for java 12,000 for excel so on and so

308
00:10:50,120 --> 00:10:51,980
forth

309
00:10:50,569 --> 00:10:53,779
you know these are the kinds of malware

310
00:10:51,980 --> 00:10:54,860
lures that we're looking at add these

311
00:10:53,779 --> 00:10:57,649
all up and you've got about four hundred

312
00:10:54,860 --> 00:10:59,040
and seventy thousand samples you know

313
00:10:57,649 --> 00:11:01,199
per day that you'd have to

314
00:10:59,040 --> 00:11:02,490
consider so now we want to we want to

315
00:11:01,199 --> 00:11:04,319
cut through these you know to do that

316
00:11:02,490 --> 00:11:06,509
and these are all open source as well

317
00:11:04,320 --> 00:11:08,970
these are your rules that are designed

318
00:11:06,509 --> 00:11:09,990
for hunting on every sample that's

319
00:11:08,970 --> 00:11:12,329
upload to virustotal

320
00:11:09,990 --> 00:11:14,190
one of these rules will run and if it

321
00:11:12,329 --> 00:11:16,589
fires you know that sample comes down to

322
00:11:14,190 --> 00:11:18,720
us so we want to start siphoning off

323
00:11:16,589 --> 00:11:22,440
from that you know nearly 500k sample

324
00:11:18,720 --> 00:11:24,300
set this one is looking for any document

325
00:11:22,440 --> 00:11:25,920
that contains some macro whether it's

326
00:11:24,300 --> 00:11:27,810
benign and religious you know I want

327
00:11:25,920 --> 00:11:30,420
that file in our corpus and that's about

328
00:11:27,810 --> 00:11:32,189
a thousand a day on average you know

329
00:11:30,420 --> 00:11:33,719
this next one is finding office

330
00:11:32,190 --> 00:11:37,470
documents that contains some kind of

331
00:11:33,720 --> 00:11:39,630
ActiveX embedding or they have some kind

332
00:11:37,470 --> 00:11:41,040
of malicious behavior someone thought I

333
00:11:39,630 --> 00:11:42,389
had something wrong that at least one AV

334
00:11:41,040 --> 00:11:44,130
vendor that's that positive is greater

335
00:11:42,389 --> 00:11:45,899
than zero you know this produces about

336
00:11:44,130 --> 00:11:47,880
five hundred a day added up to the

337
00:11:45,899 --> 00:11:50,880
previous one that's one point five case

338
00:11:47,880 --> 00:11:52,620
samples a day you know this next rule is

339
00:11:50,880 --> 00:11:55,079
looking for Java files that over are of

340
00:11:52,620 --> 00:11:58,339
interests at another five hundred of the

341
00:11:55,079 --> 00:12:00,599
two thousand are TFS twenty to fifty

342
00:11:58,339 --> 00:12:02,519
PDFs that have some kind of JavaScript

343
00:12:00,600 --> 00:12:04,920
you know some active content in them you

344
00:12:02,519 --> 00:12:07,800
know now we're up to about twenty five

345
00:12:04,920 --> 00:12:09,240
hundred samples including with a flash

346
00:12:07,800 --> 00:12:10,589
as well so if there's flash embedded in

347
00:12:09,240 --> 00:12:12,660
the document you know let's get that

348
00:12:10,589 --> 00:12:14,160
thing down as well so we've already

349
00:12:12,660 --> 00:12:15,329
reduced the corporate drastically right

350
00:12:14,160 --> 00:12:17,600
we've gone from one point three million

351
00:12:15,329 --> 00:12:20,010
samples to twenty-five hundred a day

352
00:12:17,600 --> 00:12:21,690
still a bit much for from manual

353
00:12:20,010 --> 00:12:23,610
analysis but this is less than one

354
00:12:21,690 --> 00:12:24,959
percent of that total corpus it's is

355
00:12:23,610 --> 00:12:28,440
this a manageable problem for us to be

356
00:12:24,959 --> 00:12:30,209
dealing with so now that you've got

357
00:12:28,440 --> 00:12:32,010
these samples you know what are some you

358
00:12:30,209 --> 00:12:33,479
know good vibrations that we can use you

359
00:12:32,010 --> 00:12:35,279
know to use this whole worm charming

360
00:12:33,480 --> 00:12:37,589
analogy and this video by the way

361
00:12:35,279 --> 00:12:40,319
apparently birds do this to what he's

362
00:12:37,589 --> 00:12:42,360
doing here I'm assuming is it he they

363
00:12:40,319 --> 00:12:45,149
pat the ground to like replicate the

364
00:12:42,360 --> 00:12:46,920
like feeling of rain and that brings

365
00:12:45,149 --> 00:12:49,649
worms to the surface too so it's this

366
00:12:46,920 --> 00:12:50,790
whole you know vibrating thing so some

367
00:12:49,649 --> 00:12:52,709
things that you can some things that you

368
00:12:50,790 --> 00:12:55,259
would be not wise to do as a malware

369
00:12:52,709 --> 00:12:57,899
author but great for us on the defender

370
00:12:55,259 --> 00:12:59,850
side is we can look for things are not

371
00:12:57,899 --> 00:13:01,170
malicious but they're not they're

372
00:12:59,850 --> 00:13:03,930
indicative of something that has been

373
00:13:01,170 --> 00:13:06,060
generated by a malicious author or

374
00:13:03,930 --> 00:13:07,709
someone who has actually hand created a

375
00:13:06,060 --> 00:13:09,959
file format all right it's not coming

376
00:13:07,709 --> 00:13:11,099
out of PDF it's not coming out of Word

377
00:13:09,960 --> 00:13:12,839
you know they've done some some

378
00:13:11,100 --> 00:13:15,570
modifications to it to evade detection

379
00:13:12,839 --> 00:13:17,100
or to make it hard to analyze but the

380
00:13:15,570 --> 00:13:19,320
sheer fact that they've done that has

381
00:13:17,100 --> 00:13:20,850
now exposed the content to us you know

382
00:13:19,320 --> 00:13:22,890
if I'm ever going to try and launch a

383
00:13:20,850 --> 00:13:24,570
successful malware campaign I would want

384
00:13:22,890 --> 00:13:27,420
to hide in plain sight I would not want

385
00:13:24,570 --> 00:13:29,100
to use any kind of weird obfuscation

386
00:13:27,420 --> 00:13:31,529
it's gonna make my payload stand out

387
00:13:29,100 --> 00:13:33,900
especially if I'm bundling zero-day with

388
00:13:31,529 --> 00:13:37,589
it you know why am I going to burn a no

389
00:13:33,900 --> 00:13:39,150
day just using a efficient tactic that's

390
00:13:37,589 --> 00:13:42,630
gonna make this sample stand out you

391
00:13:39,150 --> 00:13:44,189
know thankfully people do do that and we

392
00:13:42,630 --> 00:13:47,279
can leverage that against them to find

393
00:13:44,190 --> 00:13:50,370
you know interesting signal in the noise

394
00:13:47,279 --> 00:13:53,070
you know one example is my evasions so

395
00:13:50,370 --> 00:13:57,510
for example an RTF file starts off with

396
00:13:53,070 --> 00:13:59,670
this curly brace backpack RTF one but

397
00:13:57,510 --> 00:14:03,020
that's not requisite as long as you have

398
00:13:59,670 --> 00:14:05,040
a curly brace backpack RT you know

399
00:14:03,020 --> 00:14:06,630
Microsoft Windows is perfectly happy

400
00:14:05,040 --> 00:14:08,819
about opening that file and rendering it

401
00:14:06,630 --> 00:14:10,920
so if someone's writing signatures that

402
00:14:08,820 --> 00:14:12,330
are looking for RTF files using the full

403
00:14:10,920 --> 00:14:13,349
header they're gonna completely miss

404
00:14:12,330 --> 00:14:16,529
these files because they're not gonna

405
00:14:13,350 --> 00:14:18,810
see it as an actual valid RTF file if

406
00:14:16,529 --> 00:14:20,700
you do mind based detection that's not

407
00:14:18,810 --> 00:14:23,880
going to show up as a mime type of rich

408
00:14:20,700 --> 00:14:25,800
text format but it will open by the the

409
00:14:23,880 --> 00:14:27,900
Microsoft parser in general the

410
00:14:25,800 --> 00:14:29,579
Microsoft parser is notoriously robust

411
00:14:27,900 --> 00:14:31,980
if you look at this project it's called

412
00:14:29,580 --> 00:14:33,990
via the tiny PE project one of the the

413
00:14:31,980 --> 00:14:35,520
hackers posed the challenge of how small

414
00:14:33,990 --> 00:14:37,800
can we make a portable executable file

415
00:14:35,520 --> 00:14:38,850
and it still executes and people played

416
00:14:37,800 --> 00:14:41,880
with this thing and they've got like

417
00:14:38,850 --> 00:14:42,930
these self-referencing header pointers

418
00:14:41,880 --> 00:14:44,700
and they've got it to be really really

419
00:14:42,930 --> 00:14:47,069
tiny it became a little game you know so

420
00:14:44,700 --> 00:14:48,770
Microsoft is super robust with their

421
00:14:47,070 --> 00:14:52,140
parsing which leaves a lot of room for

422
00:14:48,770 --> 00:14:54,600
occupation games you know another

423
00:14:52,140 --> 00:14:57,449
example of this is the PDF header you

424
00:14:54,600 --> 00:14:59,339
know this % PDF typically is that offset

425
00:14:57,450 --> 00:15:02,190
zero but actually it could be anywhere

426
00:14:59,339 --> 00:15:04,370
in the first 1,000 bytes and if you open

427
00:15:02,190 --> 00:15:06,480
that up in Windows it will be mapped to

428
00:15:04,370 --> 00:15:08,910
Adobe and it will parse it and open it

429
00:15:06,480 --> 00:15:10,470
just fine you know other ways that you

430
00:15:08,910 --> 00:15:12,750
might burn your zero day or how we might

431
00:15:10,470 --> 00:15:14,670
catch Google zero day is by looking at

432
00:15:12,750 --> 00:15:16,150
symbols you know if there's JavaScript

433
00:15:14,670 --> 00:15:19,150
embedded in

434
00:15:16,150 --> 00:15:22,209
a PDF and there's symbolic information

435
00:15:19,150 --> 00:15:24,699
like shellcode and heat spray and Rob

436
00:15:22,210 --> 00:15:26,050
gadget you know that's great for us and

437
00:15:24,700 --> 00:15:27,790
if they're gonna leave symbols in their

438
00:15:26,050 --> 00:15:29,949
JavaScript I'm very very happy to pull

439
00:15:27,790 --> 00:15:32,170
that out and use that as an anchor to

440
00:15:29,950 --> 00:15:34,420
see what is you know what that sample is

441
00:15:32,170 --> 00:15:38,529
all about you know another example is

442
00:15:34,420 --> 00:15:41,319
this utf-8 byte order mark this dates

443
00:15:38,529 --> 00:15:44,050
back to 2013 but is still valid today if

444
00:15:41,320 --> 00:15:47,890
you prefix any file with those you know

445
00:15:44,050 --> 00:15:50,170
the three bytes it will still open and

446
00:15:47,890 --> 00:15:52,060
be valid for example a zip file I can

447
00:15:50,170 --> 00:15:53,709
put that in front of it that might break

448
00:15:52,060 --> 00:15:56,800
in a bunch of mime types and be

449
00:15:53,710 --> 00:15:58,240
difficult to to analyze but again not

450
00:15:56,800 --> 00:15:59,829
the best thing to do from attackers

451
00:15:58,240 --> 00:16:02,050
perspective because you might be burning

452
00:15:59,830 --> 00:16:04,930
your your wares and finally there's

453
00:16:02,050 --> 00:16:07,089
there's chaff you know chaff in essence

454
00:16:04,930 --> 00:16:09,370
is just you know waste it's things that

455
00:16:07,089 --> 00:16:11,800
are superfluous so at the husk of corn

456
00:16:09,370 --> 00:16:15,130
this chaff and you know here's an

457
00:16:11,800 --> 00:16:16,900
example of chaff around a dde exploit so

458
00:16:15,130 --> 00:16:19,689
we can kind of see I've highlighted it

459
00:16:16,900 --> 00:16:21,699
here you can see that that D de Otto and

460
00:16:19,690 --> 00:16:23,290
it's broken down it's broken up among

461
00:16:21,700 --> 00:16:23,920
all this like garbage XML that's in

462
00:16:23,290 --> 00:16:25,540
between it

463
00:16:23,920 --> 00:16:27,579
I wrote that little red X there at the

464
00:16:25,540 --> 00:16:30,880
top which just highlights all the chaff

465
00:16:27,580 --> 00:16:33,130
alright so you can see that there is a

466
00:16:30,880 --> 00:16:34,390
DD auto and it's running commanded XC

467
00:16:33,130 --> 00:16:37,660
and it's pivoting from there to whatever

468
00:16:34,390 --> 00:16:39,819
the next stage payload is so this person

469
00:16:37,660 --> 00:16:41,980
has done this to try and mask their

470
00:16:39,820 --> 00:16:43,660
their payload but if we're looking for

471
00:16:41,980 --> 00:16:45,670
chaff generically we're gonna be able to

472
00:16:43,660 --> 00:16:47,829
find any arbitrary payload that's trying

473
00:16:45,670 --> 00:16:49,449
to be hidden for you don't forget about

474
00:16:47,830 --> 00:16:53,350
the actual DV auto behind it just

475
00:16:49,450 --> 00:16:55,920
identifying the chaff another example

476
00:16:53,350 --> 00:16:58,330
and this came out in a February 2018

477
00:16:55,920 --> 00:17:00,250
guys from kaspersky they were looking at

478
00:16:58,330 --> 00:17:02,260
the state machine for parsing rich text

479
00:17:00,250 --> 00:17:04,179
format and they found a way that they

480
00:17:02,260 --> 00:17:05,859
could put in a pattern where I called a

481
00:17:04,179 --> 00:17:07,839
byte nibble like you put in some

482
00:17:05,859 --> 00:17:10,030
superfluous bytes and then a junk byte

483
00:17:07,839 --> 00:17:11,559
and it would just eat it off so it was

484
00:17:10,030 --> 00:17:13,089
just again chaff in the middle of it you

485
00:17:11,559 --> 00:17:15,099
know we talked a little bit more about

486
00:17:13,089 --> 00:17:17,260
this later on but a few months later

487
00:17:15,099 --> 00:17:20,369
some zero-day in the wild an actual

488
00:17:17,260 --> 00:17:23,470
campaign utilized that published

489
00:17:20,369 --> 00:17:25,898
use that published a bite nibbling

490
00:17:23,470 --> 00:17:28,059
technique to try and mask its own

491
00:17:25,898 --> 00:17:30,850
payload you know here's an example of

492
00:17:28,059 --> 00:17:34,510
that we on the left-hand side you've got

493
00:17:30,850 --> 00:17:36,699
a RTF document that has this byte nibble

494
00:17:34,510 --> 00:17:38,169
chaff in it in the top I've thrown in a

495
00:17:36,700 --> 00:17:39,340
regular expression so that I can pull

496
00:17:38,169 --> 00:17:41,260
all that out and the right is a

497
00:17:39,340 --> 00:17:44,080
normalized document so what's on the

498
00:17:41,260 --> 00:17:46,210
left would be difficult to analyze on

499
00:17:44,080 --> 00:17:47,918
the right is a normal form but on the

500
00:17:46,210 --> 00:17:50,260
left regardless of what the payload is

501
00:17:47,919 --> 00:17:52,059
if I saw that I know that this person is

502
00:17:50,260 --> 00:17:54,279
trying to do something nefarious that in

503
00:17:52,059 --> 00:17:58,870
itself is gonna will lead me to want to

504
00:17:54,279 --> 00:18:00,159
see what's behind that obfuscation so

505
00:17:58,870 --> 00:18:02,620
here these are all kind of like surface

506
00:18:00,159 --> 00:18:04,630
level examinations and they'll get us a

507
00:18:02,620 --> 00:18:06,158
certain degree but we need to dig deeper

508
00:18:04,630 --> 00:18:08,649
if we want to find more interesting

509
00:18:06,159 --> 00:18:10,510
things so what can we do on that front

510
00:18:08,649 --> 00:18:12,639
you know we can do sandbox detonation

511
00:18:10,510 --> 00:18:15,010
you know put up a whole cluster of

512
00:18:12,640 --> 00:18:16,630
cuckoo Sam boxes and and start feeding

513
00:18:15,010 --> 00:18:18,580
all our samples put in a daily basis

514
00:18:16,630 --> 00:18:20,200
letting them detonate in a virtual

515
00:18:18,580 --> 00:18:23,770
environment and then we can look at it

516
00:18:20,200 --> 00:18:25,659
behaviorally we can do static analysis

517
00:18:23,770 --> 00:18:28,950
to do like IOC extraction right maybe

518
00:18:25,659 --> 00:18:31,419
I'm pulling out any URLs email addresses

519
00:18:28,950 --> 00:18:32,260
domain names from samples and then

520
00:18:31,419 --> 00:18:33,610
feeding that to a crawling

521
00:18:32,260 --> 00:18:35,710
infrastructure and you know harvesting

522
00:18:33,610 --> 00:18:36,820
more stuff that way this whole hunt

523
00:18:35,710 --> 00:18:38,830
pivot crawling that we're kind of

524
00:18:36,820 --> 00:18:40,899
touching on earlier you know we can also

525
00:18:38,830 --> 00:18:42,279
do static analysis by open source tools

526
00:18:40,899 --> 00:18:44,199
and that's what we're gonna dive into a

527
00:18:42,279 --> 00:18:46,210
little bit further this is something

528
00:18:44,200 --> 00:18:49,179
that anybody can replicate its you know

529
00:18:46,210 --> 00:18:51,130
it's openly freely available tools and

530
00:18:49,179 --> 00:18:53,080
also we take this a step further if you

531
00:18:51,130 --> 00:18:56,470
later on as you'll see we have exposed a

532
00:18:53,080 --> 00:18:58,000
ton of data for research so just some

533
00:18:56,470 --> 00:18:59,289
primitives some tools that we might want

534
00:18:58,000 --> 00:19:01,450
to use you know when it comes to

535
00:18:59,289 --> 00:19:03,309
analyzing Java applets you know we're

536
00:19:01,450 --> 00:19:07,750
gonna want to decompile these things so

537
00:19:03,309 --> 00:19:09,010
there's a JD core there's the CFR CFR is

538
00:19:07,750 --> 00:19:10,750
my favorite that's why it's got the

539
00:19:09,010 --> 00:19:13,390
champion symbol next to it JD core is

540
00:19:10,750 --> 00:19:15,070
the fastest jad Retro will normalize the

541
00:19:13,390 --> 00:19:17,740
version so that more java can be

542
00:19:15,070 --> 00:19:19,240
decompiled by these tools and again

543
00:19:17,740 --> 00:19:20,230
don't worry about snapshotting this

544
00:19:19,240 --> 00:19:21,610
thing because i'm gonna fly through the

545
00:19:20,230 --> 00:19:23,440
other ones they're all going to be

546
00:19:21,610 --> 00:19:24,580
available and we have tools for flash

547
00:19:23,440 --> 00:19:26,049
you know again we're trying to get

548
00:19:24,580 --> 00:19:27,580
ActionScript out of Flash we're trying

549
00:19:26,049 --> 00:19:30,309
to decompile by

550
00:19:27,580 --> 00:19:31,869
code with flash we've got PDF you know

551
00:19:30,309 --> 00:19:33,428
we need to decompress streams we need to

552
00:19:31,869 --> 00:19:36,428
grab other things out of it we need to

553
00:19:33,429 --> 00:19:38,799
pull JavaScript out of out of PDF didier

554
00:19:36,429 --> 00:19:42,999
Stevens has some great tools for both

555
00:19:38,799 --> 00:19:45,610
PDF and OLEDs you know dot dissecting

556
00:19:42,999 --> 00:19:48,249
these common malware formats and then of

557
00:19:45,610 --> 00:19:50,168
course Microsoft Office again you know

558
00:19:48,249 --> 00:19:51,809
pulling out semantic context with

559
00:19:50,169 --> 00:19:54,999
something like this these cat doc or

560
00:19:51,809 --> 00:19:57,039
xlsx - CV CSV this is pulling out the

561
00:19:54,999 --> 00:19:59,409
actual semantic layer so what was said

562
00:19:57,039 --> 00:20:01,690
in the pages of the document what's in

563
00:19:59,409 --> 00:20:03,249
the cells of the spreadsheet or

564
00:20:01,690 --> 00:20:05,169
something like oh le dump you know get

565
00:20:03,249 --> 00:20:07,179
the streams out of that thing take the

566
00:20:05,169 --> 00:20:08,619
macro out decompress it you know pulling

567
00:20:07,179 --> 00:20:11,129
these things out of that top level

568
00:20:08,619 --> 00:20:14,529
format so we can dive into them further

569
00:20:11,129 --> 00:20:15,639
so what we've done is we've taken those

570
00:20:14,529 --> 00:20:17,799
Yara rules that we went through earlier

571
00:20:15,639 --> 00:20:19,359
and we connected to a whole bunch of

572
00:20:17,799 --> 00:20:21,399
open source tools and so on a single

573
00:20:19,359 --> 00:20:23,678
daily basis every time a new sample is

574
00:20:21,399 --> 00:20:26,289
fired on with one of our your rules it

575
00:20:23,679 --> 00:20:27,940
comes in and we you know dissect these

576
00:20:26,289 --> 00:20:30,059
things at scale you know whether pulling

577
00:20:27,940 --> 00:20:32,440
it in from crawlers virustotal

578
00:20:30,059 --> 00:20:35,379
everything gets it comes into this

579
00:20:32,440 --> 00:20:37,059
ecosystem and a key aspect to it is on

580
00:20:35,379 --> 00:20:40,238
the right hand side you'll see this

581
00:20:37,059 --> 00:20:42,789
concept of a VT file scanner and file

582
00:20:40,239 --> 00:20:45,580
reporter so it takes time for the AV

583
00:20:42,789 --> 00:20:47,559
vendors to essentially reach a consensus

584
00:20:45,580 --> 00:20:50,139
you know if I see something today first

585
00:20:47,559 --> 00:20:52,928
time upload maybe it has one AV

586
00:20:50,139 --> 00:20:54,639
detection in two weeks might be ten you

587
00:20:52,929 --> 00:20:56,769
know in in six weeks

588
00:20:54,639 --> 00:20:58,119
everybody now suddenly has detection for

589
00:20:56,769 --> 00:20:58,509
this thing because there's an echo

590
00:20:58,119 --> 00:21:00,459
chamber

591
00:20:58,509 --> 00:21:02,769
same thing with false positives all

592
00:21:00,460 --> 00:21:05,440
right so I look at the age the dust and

593
00:21:02,769 --> 00:21:07,389
the maturity when it comes to a file

594
00:21:05,440 --> 00:21:08,950
that has been uploaded to virustotal you

595
00:21:07,389 --> 00:21:10,869
know how long ago was the first upload

596
00:21:08,950 --> 00:21:12,850
when was the last time what's the time

597
00:21:10,869 --> 00:21:14,769
in between how many times does ask and

598
00:21:12,850 --> 00:21:17,709
the more that you have the more mature

599
00:21:14,769 --> 00:21:19,470
the result is the better of a label that

600
00:21:17,710 --> 00:21:22,179
might be so if you're looking to build a

601
00:21:19,470 --> 00:21:25,659
if you're looking to use AV labels as

602
00:21:22,179 --> 00:21:27,580
machine learning to you know classify

603
00:21:25,659 --> 00:21:32,799
your data set into benign and malicious

604
00:21:27,580 --> 00:21:34,418
doing this kind of recent to the

605
00:21:32,799 --> 00:21:40,600
industry's own false positive and false

606
00:21:34,419 --> 00:21:41,980
negative biases so let's talk about some

607
00:21:40,600 --> 00:21:43,350
real-world samples right we did

608
00:21:41,980 --> 00:21:46,890
everything we've talked about somewhat

609
00:21:43,350 --> 00:21:49,270
theoretical these are all examples of

610
00:21:46,890 --> 00:21:50,500
real-world zero-day campaigns that were

611
00:21:49,270 --> 00:21:53,080
discovered in the wild everyone

612
00:21:50,500 --> 00:21:54,790
responded to them reactively so you've

613
00:21:53,080 --> 00:21:56,980
got the CVS up there you know these are

614
00:21:54,790 --> 00:21:59,350
all in the same exact areas that we're

615
00:21:56,980 --> 00:22:01,980
talking about so this dotnet and these

616
00:21:59,350 --> 00:22:05,889
IE vbscript these are actually also

617
00:22:01,980 --> 00:22:07,270
reachable from the file formats you

618
00:22:05,890 --> 00:22:09,190
don't have to you know hit it by the

619
00:22:07,270 --> 00:22:10,810
browser whatnot so then these are the

620
00:22:09,190 --> 00:22:13,750
same exact malware doors will carry

621
00:22:10,810 --> 00:22:15,190
exploits for these CVS so let's take a

622
00:22:13,750 --> 00:22:18,760
look at these you know how we might have

623
00:22:15,190 --> 00:22:21,550
found these worms in hindsight if you

624
00:22:18,760 --> 00:22:23,350
look at the first one Stevi 2018 8174

625
00:22:21,550 --> 00:22:24,040
you know this sample is initially upload

626
00:22:23,350 --> 00:22:26,590
to virustotal

627
00:22:24,040 --> 00:22:30,040
on April 18th to 2018 and it came from a

628
00:22:26,590 --> 00:22:31,689
us-based source the campaign the actual

629
00:22:30,040 --> 00:22:34,360
campaign when it launched wasn't until

630
00:22:31,690 --> 00:22:36,310
425 so despite the fact that malware

631
00:22:34,360 --> 00:22:38,229
authors know that when they upload a

632
00:22:36,310 --> 00:22:40,210
virus total it's going to an entire

633
00:22:38,230 --> 00:22:42,400
community of researchers still they're

634
00:22:40,210 --> 00:22:44,050
using the tool to test their payloads

635
00:22:42,400 --> 00:22:45,700
prior to actually launching these

636
00:22:44,050 --> 00:22:48,340
campaigns and that's a pretty decent

637
00:22:45,700 --> 00:22:51,370
chunk of time if we can figure out if

638
00:22:48,340 --> 00:22:53,080
this sample can stand out to us before

639
00:22:51,370 --> 00:22:54,790
the campaign starts we would have been

640
00:22:53,080 --> 00:22:56,350
able to find a zero-day we would have

641
00:22:54,790 --> 00:22:57,899
been able to burn their zero day before

642
00:22:56,350 --> 00:23:00,730
they had a chance to actually launch it

643
00:22:57,900 --> 00:23:03,610
in the public domain you know so the

644
00:23:00,730 --> 00:23:05,530
campaign launched on 425 the next upload

645
00:23:03,610 --> 00:23:07,899
to viral doesn't appear until five nine

646
00:23:05,530 --> 00:23:10,629
so it it had a while to spread before

647
00:23:07,900 --> 00:23:12,160
someone somewhere caught wind of it and

648
00:23:10,630 --> 00:23:13,990
started pulling and pushing it up to the

649
00:23:12,160 --> 00:23:16,390
service to see what it was you know came

650
00:23:13,990 --> 00:23:19,240
from India Italy Philippines Saudi

651
00:23:16,390 --> 00:23:21,090
Arabia more from the US on five ten that

652
00:23:19,240 --> 00:23:22,930
you can tell that it these are all

653
00:23:21,090 --> 00:23:24,459
indicative when you see it's not

654
00:23:22,930 --> 00:23:26,290
guaranteed that this is how the spread

655
00:23:24,460 --> 00:23:28,480
is going but generally statistically

656
00:23:26,290 --> 00:23:30,250
speaking as you see it where it's being

657
00:23:28,480 --> 00:23:31,930
uploaded from that's kind of where it's

658
00:23:30,250 --> 00:23:33,910
being targeted to as well so it's kind

659
00:23:31,930 --> 00:23:36,910
of spreading out so in five ten we see

660
00:23:33,910 --> 00:23:38,620
more coverage now the initial AV

661
00:23:36,910 --> 00:23:40,780
detection on this sample was actually

662
00:23:38,620 --> 00:23:42,250
quite good you know 16 out of 60 vendors

663
00:23:40,780 --> 00:23:44,139
were able to detect this thing it had

664
00:23:42,250 --> 00:23:46,510
zero-day in it but it had a bunch of

665
00:23:44,140 --> 00:23:49,900
other things about it that heuristic Lee

666
00:23:46,510 --> 00:23:52,930
looked you know unco sure and so it

667
00:23:49,900 --> 00:23:54,220
stood out from our perspective from the

668
00:23:52,930 --> 00:23:56,230
things that we've caught you

669
00:23:54,220 --> 00:23:58,390
worming wise this thing has got an

670
00:23:56,230 --> 00:24:00,370
object update inside the RTF so that

671
00:23:58,390 --> 00:24:01,870
stands out and this is the one where

672
00:24:00,370 --> 00:24:03,549
they're using the RTF byte nibble

673
00:24:01,870 --> 00:24:05,889
you know recall that just two months

674
00:24:03,549 --> 00:24:08,320
prior is when Kaspersky researchers

675
00:24:05,890 --> 00:24:10,299
published this obfuscation technique so

676
00:24:08,320 --> 00:24:12,158
just by looking for that you would have

677
00:24:10,299 --> 00:24:13,809
been able to find this zero day that

678
00:24:12,159 --> 00:24:16,299
came across the wire you know two months

679
00:24:13,809 --> 00:24:17,590
later you know some screenshots kind of

680
00:24:16,299 --> 00:24:20,289
showing detection evolution over time

681
00:24:17,590 --> 00:24:21,699
this is coming from from virustotal you

682
00:24:20,289 --> 00:24:23,470
know as I mentioned great detection

683
00:24:21,700 --> 00:24:25,120
upfront but then as they start sharing

684
00:24:23,470 --> 00:24:28,330
you'll see it starts approaching more of

685
00:24:25,120 --> 00:24:29,799
a consensus and these are just the

686
00:24:28,330 --> 00:24:31,418
results I think this is from the the

687
00:24:29,799 --> 00:24:33,760
first day scan yep the guys who caught

688
00:24:31,419 --> 00:24:37,330
it interestingly is a lot of overlap

689
00:24:33,760 --> 00:24:41,049
like suspiciously exact overlap in what

690
00:24:37,330 --> 00:24:43,360
seemingly is a you know not a common

691
00:24:41,049 --> 00:24:45,100
name and you might ask yourself why this

692
00:24:43,360 --> 00:24:46,449
is the case you know behind the scene

693
00:24:45,100 --> 00:24:48,250
just because a lot of guys om each

694
00:24:46,450 --> 00:24:50,169
other's products so when you're looking

695
00:24:48,250 --> 00:24:51,970
at AV consensus you can't just look at

696
00:24:50,169 --> 00:24:54,190
it as each vendor stand alone you know

697
00:24:51,970 --> 00:24:56,530
probably all of these guys are only

698
00:24:54,190 --> 00:24:58,419
aming the same exact solution so when we

699
00:24:56,530 --> 00:25:00,370
look at results we actually weigh all

700
00:24:58,419 --> 00:25:01,360
the different vendors you know frankly

701
00:25:00,370 --> 00:25:02,799
half of them are way down to a zero

702
00:25:01,360 --> 00:25:04,600
because we just don't care about what

703
00:25:02,799 --> 00:25:06,250
they think you know the other half have

704
00:25:04,600 --> 00:25:08,110
some variable weights associated with

705
00:25:06,250 --> 00:25:09,159
them so we can instead of looking at the

706
00:25:08,110 --> 00:25:10,840
positive count we're looking at the

707
00:25:09,159 --> 00:25:14,610
weight count to see what when something

708
00:25:10,840 --> 00:25:17,649
is interesting you know the next example

709
00:25:14,610 --> 00:25:20,979
uploaded on January 22nd came from South

710
00:25:17,650 --> 00:25:23,080
Korea and only two AV engines detected

711
00:25:20,980 --> 00:25:24,549
this one off the bat right and they

712
00:25:23,080 --> 00:25:26,590
heuristically were able to identify the

713
00:25:24,549 --> 00:25:31,179
sample as malicious but it came with an

714
00:25:26,590 --> 00:25:33,789
actual flash zero day later you know

715
00:25:31,179 --> 00:25:35,080
whatever that is nine days later someone

716
00:25:33,789 --> 00:25:36,700
discovers this thing and they tweet

717
00:25:35,080 --> 00:25:37,539
about it so here's another way you could

718
00:25:36,700 --> 00:25:40,120
have caught it alright if you're

719
00:25:37,539 --> 00:25:42,010
harvesting IOC s from Twitter again if

720
00:25:40,120 --> 00:25:43,149
it's an early warning on to one when

721
00:25:42,010 --> 00:25:44,770
this guy is talking about

722
00:25:43,150 --> 00:25:46,840
he puts the word zero day in there if

723
00:25:44,770 --> 00:25:49,360
you put a zero day search on Twitter and

724
00:25:46,840 --> 00:25:51,039
you look for IOC s and just shut them in

725
00:25:49,360 --> 00:25:53,889
you're gonna start getting what people

726
00:25:51,039 --> 00:25:56,470
are talking about so he talks about it

727
00:25:53,890 --> 00:25:57,970
on on to one now suddenly the AV

728
00:25:56,470 --> 00:26:00,880
detection jumps up to nine vendors

729
00:25:57,970 --> 00:26:02,350
because there's some public discussion

730
00:26:00,880 --> 00:26:04,330
about it and it becomes it shows up on

731
00:26:02,350 --> 00:26:06,760
their radars you start seeing some more

732
00:26:04,330 --> 00:26:08,059
uploads on to two by two five twenty

733
00:26:06,760 --> 00:26:11,030
vendors have proper detect

734
00:26:08,059 --> 00:26:13,139
and how could we have caught this guy

735
00:26:11,030 --> 00:26:15,450
using the toolset that we just talked

736
00:26:13,140 --> 00:26:18,000
about you know this is an RTF that has

737
00:26:15,450 --> 00:26:19,410
an SWF a flash file embedded in it you

738
00:26:18,000 --> 00:26:21,600
know again flash is dead in the browser

739
00:26:19,410 --> 00:26:22,920
but that's an alive and well sub system

740
00:26:21,600 --> 00:26:26,639
you know it's got a great install base

741
00:26:22,920 --> 00:26:27,210
still a good attack target for you know

742
00:26:26,640 --> 00:26:30,000
for attackers

743
00:26:27,210 --> 00:26:32,040
big attack surface you can do action

744
00:26:30,000 --> 00:26:34,200
scripts you can manipulate memory if you

745
00:26:32,040 --> 00:26:36,750
want to bypass all the built-in compiler

746
00:26:34,200 --> 00:26:39,000
and OS protections you need the ability

747
00:26:36,750 --> 00:26:41,610
to to manipulate memory some to improve

748
00:26:39,000 --> 00:26:43,919
your ability to actually exploit so it's

749
00:26:41,610 --> 00:26:45,928
it's a good rich target base from the

750
00:26:43,919 --> 00:26:47,580
attacker perspective so anytime we see a

751
00:26:45,929 --> 00:26:49,650
flash object embedded anywhere that's

752
00:26:47,580 --> 00:26:51,510
super interesting to us especially if it

753
00:26:49,650 --> 00:26:52,380
has very low AV detection you know it's

754
00:26:51,510 --> 00:26:54,150
not every day that someone's

755
00:26:52,380 --> 00:26:56,730
legitimately putting a flash applet in a

756
00:26:54,150 --> 00:26:59,640
document sending to someone while it may

757
00:26:56,730 --> 00:27:01,559
happen you know in particular if you run

758
00:26:59,640 --> 00:27:02,790
this flash applet through one of those

759
00:27:01,559 --> 00:27:04,918
decompiling tools and pull the

760
00:27:02,790 --> 00:27:06,960
ActionScript out it also tries to do

761
00:27:04,919 --> 00:27:08,700
debugger detection now again this is not

762
00:27:06,960 --> 00:27:10,260
a hundred percent guarantee that the

763
00:27:08,700 --> 00:27:12,240
thing is malicious the digital rights

764
00:27:10,260 --> 00:27:14,309
management reasons or you know just anti

765
00:27:12,240 --> 00:27:16,049
reversing reasons were why you might

766
00:27:14,309 --> 00:27:17,610
want to do debugger detection but that

767
00:27:16,049 --> 00:27:19,260
stands out you're just those two things

768
00:27:17,610 --> 00:27:20,370
alone the fact that it's embedded in a

769
00:27:19,260 --> 00:27:22,290
document and it's doing debugger

770
00:27:20,370 --> 00:27:25,399
detection is enough for me to really

771
00:27:22,290 --> 00:27:28,559
want to dive into it and and snag it

772
00:27:25,400 --> 00:27:30,360
here's the tweet that came out talking

773
00:27:28,559 --> 00:27:32,280
about the the lack of patch you know

774
00:27:30,360 --> 00:27:34,559
attribution wise it's always a crapshoot

775
00:27:32,280 --> 00:27:37,980
but the the thought process was that

776
00:27:34,559 --> 00:27:40,320
this was North Korea sourced attacking

777
00:27:37,980 --> 00:27:41,760
South Korea with this this O'Dea and

778
00:27:40,320 --> 00:27:44,520
actually was quite clever one thing I

779
00:27:41,760 --> 00:27:47,280
really liked about it is they had you

780
00:27:44,520 --> 00:27:48,660
know most malware is multistage a pivots

781
00:27:47,280 --> 00:27:49,860
from one stage to another stage and in

782
00:27:48,660 --> 00:27:52,049
this particular case they would they

783
00:27:49,860 --> 00:27:54,389
looked at some attributes of the system

784
00:27:52,049 --> 00:27:56,280
that was being infected before they sent

785
00:27:54,390 --> 00:27:58,200
their zero-day down so actually getting

786
00:27:56,280 --> 00:27:59,940
a hold of the zero-day portion of it was

787
00:27:58,200 --> 00:28:00,600
a little more difficult because you had

788
00:27:59,940 --> 00:28:02,160
to essentially

789
00:28:00,600 --> 00:28:03,629
replicate the environments that they

790
00:28:02,160 --> 00:28:05,700
were looking for in order for that

791
00:28:03,630 --> 00:28:06,690
second stage pivot to come down so in

792
00:28:05,700 --> 00:28:08,790
the one hand there were smart

793
00:28:06,690 --> 00:28:11,160
operational security wise to not burn

794
00:28:08,790 --> 00:28:12,379
their O'Dea by holding it back but on

795
00:28:11,160 --> 00:28:14,610
the other hand they burned it by

796
00:28:12,380 --> 00:28:18,179
embedding it in a way that was just it

797
00:28:14,610 --> 00:28:20,550
stands out a vida tection raid over time

798
00:28:18,179 --> 00:28:22,940
again starting off with the two and then

799
00:28:20,550 --> 00:28:26,370
settling once it became public knowledge

800
00:28:22,940 --> 00:28:28,710
this is what the actual on the top right

801
00:28:26,370 --> 00:28:31,080
pink you've got essentially that they

802
00:28:28,710 --> 00:28:32,880
extracted source code for checking for

803
00:28:31,080 --> 00:28:35,010
debugger detection and then here's just

804
00:28:32,880 --> 00:28:36,630
an open source your will you can use for

805
00:28:35,010 --> 00:28:39,780
finding these things and will run on the

806
00:28:36,630 --> 00:28:41,130
outputs of that ActionScript you know

807
00:28:39,780 --> 00:28:44,610
the last one is the most interesting one

808
00:28:41,130 --> 00:28:47,130
it it was uploaded originally on August

809
00:28:44,610 --> 00:28:49,949
24th and it had no AV detection at all

810
00:28:47,130 --> 00:28:51,960
nobody thought it was bad on eight

811
00:28:49,950 --> 00:28:53,640
twenty four and nine twelve more people

812
00:28:51,960 --> 00:28:54,720
uploaded it you know some folks got hit

813
00:28:53,640 --> 00:28:56,520
with this thing and they're like this is

814
00:28:54,720 --> 00:28:59,190
looks weird let me put a shit up to

815
00:28:56,520 --> 00:29:00,870
virustotal and see what the with the AV

816
00:28:59,190 --> 00:29:03,720
industry on a whole thinks about it and

817
00:29:00,870 --> 00:29:08,219
again this is 11 additional scans on

818
00:29:03,720 --> 00:29:10,830
this on this file no detection then on

819
00:29:08,220 --> 00:29:13,320
nine twelve the zero day campaign is

820
00:29:10,830 --> 00:29:14,639
discovered by fire I by the end of the

821
00:29:13,320 --> 00:29:16,080
day of nine twelve you've got two

822
00:29:14,640 --> 00:29:17,790
vendors that have detection by the next

823
00:29:16,080 --> 00:29:19,169
day 30 vendors have detection for this

824
00:29:17,790 --> 00:29:22,379
thing so you can see it's a very

825
00:29:19,170 --> 00:29:23,970
reactive process so now the question is

826
00:29:22,380 --> 00:29:26,970
you know how could we have found this

827
00:29:23,970 --> 00:29:28,380
one and again evasive magic so they

828
00:29:26,970 --> 00:29:31,020
didn't have the full RTF header at the

829
00:29:28,380 --> 00:29:32,550
top they use chaff in this case the

830
00:29:31,020 --> 00:29:35,610
chaff that they used was new lines all

831
00:29:32,550 --> 00:29:38,040
over the place so it's a RTF file with a

832
00:29:35,610 --> 00:29:40,320
truncated header embeds an oily object

833
00:29:38,040 --> 00:29:42,810
and they've broken up the text with all

834
00:29:40,320 --> 00:29:44,429
the superfluous new lines so the the

835
00:29:42,810 --> 00:29:46,950
zero day again stands out because the

836
00:29:44,430 --> 00:29:48,360
file format that is encapsulated in is

837
00:29:46,950 --> 00:29:51,210
just odd it would never have been

838
00:29:48,360 --> 00:29:52,760
generated by a real program you know

839
00:29:51,210 --> 00:29:55,560
screenshots showing the lack of

840
00:29:52,760 --> 00:29:57,780
detection and even over time you know

841
00:29:55,560 --> 00:30:00,000
from a twenty four to nine twelve you've

842
00:29:57,780 --> 00:30:01,290
got eleven unique uploads and every

843
00:30:00,000 --> 00:30:03,720
single time despite the fact that

844
00:30:01,290 --> 00:30:08,430
sharing going on at this stage nobody is

845
00:30:03,720 --> 00:30:10,500
detecting this thing quite yet so you

846
00:30:08,430 --> 00:30:12,440
know even after we've captured things

847
00:30:10,500 --> 00:30:14,370
you know and we're looking at

848
00:30:12,440 --> 00:30:15,750
essentially every step of the way were

849
00:30:14,370 --> 00:30:16,949
we're pushing things to the side all

850
00:30:15,750 --> 00:30:18,330
right we start off with 1.3 million

851
00:30:16,950 --> 00:30:20,430
samples we brought it down to

852
00:30:18,330 --> 00:30:21,689
twenty-five hundred a day we dissect

853
00:30:20,430 --> 00:30:23,130
them with all these different tools to

854
00:30:21,690 --> 00:30:24,840
expand out the types of data that's in

855
00:30:23,130 --> 00:30:26,820
there you know get another series of

856
00:30:24,840 --> 00:30:27,959
rules that run on top of that to start

857
00:30:26,820 --> 00:30:29,669
isolating the ones that might be

858
00:30:27,960 --> 00:30:32,380
interesting but there's other things we

859
00:30:29,670 --> 00:30:34,000
can do to cluster these samples together

860
00:30:32,380 --> 00:30:35,679
that allows us to then filter them all

861
00:30:34,000 --> 00:30:38,140
right if I've got you know this huge

862
00:30:35,679 --> 00:30:39,520
corpus of malware if I find one that I

863
00:30:38,140 --> 00:30:41,110
don't think is interesting and I can

864
00:30:39,520 --> 00:30:42,549
find other ones that around that that

865
00:30:41,110 --> 00:30:44,139
are similar then I can just push those

866
00:30:42,549 --> 00:30:46,690
off my radar and not worry about it

867
00:30:44,140 --> 00:30:48,700
so you know how can we do this kind of

868
00:30:46,690 --> 00:30:49,630
clustering this kind of filtering you

869
00:30:48,700 --> 00:30:52,600
know one way is with machine learning

870
00:30:49,630 --> 00:30:54,400
algorithms you don't need to use ML

871
00:30:52,600 --> 00:30:56,409
classifiers just to determine what is

872
00:30:54,400 --> 00:30:58,240
bad and what is good I can even further

873
00:30:56,410 --> 00:31:00,130
scrutinize and say hey this is this kind

874
00:30:58,240 --> 00:31:02,049
of bad like you know this macro was

875
00:31:00,130 --> 00:31:04,570
generated specifically by the a motet

876
00:31:02,049 --> 00:31:05,980
polymorphism engine and so if I'm not

877
00:31:04,570 --> 00:31:08,350
interested in that because it's it's

878
00:31:05,980 --> 00:31:09,940
prolific and I want to find the the

879
00:31:08,350 --> 00:31:12,668
needle in the haystack I write a

880
00:31:09,940 --> 00:31:14,890
classifier to identify a motet and I say

881
00:31:12,669 --> 00:31:16,600
okay push those off right this file

882
00:31:14,890 --> 00:31:18,820
specific anchors you know if we're

883
00:31:16,600 --> 00:31:21,010
exposing this this content the symbolic

884
00:31:18,820 --> 00:31:24,010
information you know perhaps there's a

885
00:31:21,010 --> 00:31:27,129
constant or a variable name that is

886
00:31:24,010 --> 00:31:29,950
either generated so it's unique or maybe

887
00:31:27,130 --> 00:31:31,179
there's a constant that's you leverage

888
00:31:29,950 --> 00:31:33,549
in some way some large number for

889
00:31:31,179 --> 00:31:35,110
example that again can be used as an

890
00:31:33,549 --> 00:31:36,520
anchor so now that I've got all this

891
00:31:35,110 --> 00:31:38,559
data I could say okay take this number

892
00:31:36,520 --> 00:31:40,090
and then see what other samples have

893
00:31:38,559 --> 00:31:43,178
that again you know push it off to the

894
00:31:40,090 --> 00:31:44,620
side you know a third option is anchors

895
00:31:43,179 --> 00:31:46,840
that are specific to virustotal

896
00:31:44,620 --> 00:31:50,168
intelligence when you upload a file to

897
00:31:46,840 --> 00:31:51,789
vti you are there's an anonymous

898
00:31:50,169 --> 00:31:54,220
uploader ID that goes with it

899
00:31:51,789 --> 00:31:56,650
and so if you're consuming the firehose

900
00:31:54,220 --> 00:31:58,299
you can keep track of these IDs and you

901
00:31:56,650 --> 00:32:00,730
can say okay well what else did that guy

902
00:31:58,299 --> 00:32:02,650
upload I don't know who it is but I do

903
00:32:00,730 --> 00:32:04,480
know that he uploaded or he or she

904
00:32:02,650 --> 00:32:06,730
uploaded these whatever ten million

905
00:32:04,480 --> 00:32:08,530
samples I mean so if I find one that

906
00:32:06,730 --> 00:32:09,909
might be interesting I might want to go

907
00:32:08,530 --> 00:32:11,530
see all the other ones that person

908
00:32:09,909 --> 00:32:13,690
uploaded so I can go harvest you know

909
00:32:11,530 --> 00:32:16,418
through that you know that's sub corpus

910
00:32:13,690 --> 00:32:17,380
you know some notes on clustering

911
00:32:16,419 --> 00:32:19,150
there's a couple of different ways that

912
00:32:17,380 --> 00:32:22,179
and this could be a talk all on its own

913
00:32:19,150 --> 00:32:23,710
if this kind of thing interests you we

914
00:32:22,179 --> 00:32:25,150
do have a blog coming on the not so

915
00:32:23,710 --> 00:32:26,890
distant future that will describe how we

916
00:32:25,150 --> 00:32:29,650
utilize actually specific to that

917
00:32:26,890 --> 00:32:31,450
example of identifying a motet through

918
00:32:29,650 --> 00:32:33,370
the usage of our machine learning

919
00:32:31,450 --> 00:32:34,780
algorithms you know there's some basic

920
00:32:33,370 --> 00:32:37,389
things though you know this bag of words

921
00:32:34,780 --> 00:32:39,428
or a term frequency inverse document

922
00:32:37,390 --> 00:32:41,080
frequency which is essentially saying

923
00:32:39,429 --> 00:32:43,750
you know for each word that I'm finding

924
00:32:41,080 --> 00:32:44,889
or each variable or any it does not be

925
00:32:43,750 --> 00:32:47,020
just in a semantic layer it could be

926
00:32:44,890 --> 00:32:49,090
in the code layer how unique is it to

927
00:32:47,020 --> 00:32:50,530
this sample if it's very unique then

928
00:32:49,090 --> 00:32:52,270
again find all the other ones that are

929
00:32:50,530 --> 00:32:54,910
like that clump them together push them

930
00:32:52,270 --> 00:32:58,480
away you can do k-means clustering

931
00:32:54,910 --> 00:33:00,580
instead of looking at semantic features

932
00:32:58,480 --> 00:33:02,410
here where we're picking words k-means

933
00:33:00,580 --> 00:33:05,050
is more about like you know vectorized

934
00:33:02,410 --> 00:33:07,810
features and so the the way I look at

935
00:33:05,050 --> 00:33:09,490
this is you know we have 50% of our

936
00:33:07,810 --> 00:33:11,530
features or semantics 50% of them or

937
00:33:09,490 --> 00:33:13,540
what I call visual or structural you

938
00:33:11,530 --> 00:33:15,129
know have you ever looked at a piece of

939
00:33:13,540 --> 00:33:16,810
source code and you just look at it for

940
00:33:15,130 --> 00:33:18,340
a second you know it's malicious it just

941
00:33:16,810 --> 00:33:20,440
has that look it's got gibberish

942
00:33:18,340 --> 00:33:22,689
variables the structure of it looks

943
00:33:20,440 --> 00:33:24,160
weird you know you can describe that and

944
00:33:22,690 --> 00:33:26,290
features you can capture it by looking

945
00:33:24,160 --> 00:33:28,090
at things like average comment length

946
00:33:26,290 --> 00:33:29,500
average variable length how many

947
00:33:28,090 --> 00:33:30,850
variables are there how many functions

948
00:33:29,500 --> 00:33:32,320
are there what's the cyclomatic

949
00:33:30,850 --> 00:33:35,889
complexity you know each one of these

950
00:33:32,320 --> 00:33:36,939
things is a numeric feature we've made a

951
00:33:35,890 --> 00:33:38,920
whole bunch of them it comes out to be

952
00:33:36,940 --> 00:33:42,430
about a hundred and so you can look at

953
00:33:38,920 --> 00:33:43,510
every single document the embedded lots

954
00:33:42,430 --> 00:33:45,640
that have come out of it you look at the

955
00:33:43,510 --> 00:33:48,220
the way that it looks by this feature

956
00:33:45,640 --> 00:33:50,560
set again you can compare and cluster

957
00:33:48,220 --> 00:33:53,320
them together that way you know more

958
00:33:50,560 --> 00:33:54,760
generic approach is local sensitivity

959
00:33:53,320 --> 00:33:57,040
hashing or mean hashing as it's called

960
00:33:54,760 --> 00:33:59,200
and again this becomes a very generic

961
00:33:57,040 --> 00:34:01,570
method for either taking a vectorized

962
00:33:59,200 --> 00:34:03,130
feature set and very quickly being able

963
00:34:01,570 --> 00:34:05,110
to compare them contrast them and

964
00:34:03,130 --> 00:34:06,970
cluster them we've got a blog on that if

965
00:34:05,110 --> 00:34:09,699
you want to read about it I do want to

966
00:34:06,970 --> 00:34:10,810
focus more however on you can use AVD

967
00:34:09,699 --> 00:34:13,750
section names if there's something

968
00:34:10,810 --> 00:34:15,190
specific to the that sample I can find

969
00:34:13,750 --> 00:34:17,168
other samples that were to take of that

970
00:34:15,190 --> 00:34:19,990
same name but I want to focus on one

971
00:34:17,168 --> 00:34:24,730
that we find a lot of valuing called XMP

972
00:34:19,989 --> 00:34:27,639
IDs this is a you have an IOC that we've

973
00:34:24,730 --> 00:34:29,530
been using for a long time and in

974
00:34:27,639 --> 00:34:32,080
talking to two folks about it it's

975
00:34:29,530 --> 00:34:35,500
fairly exciting so I want to talk about

976
00:34:32,080 --> 00:34:37,120
that and then show how it's done in

977
00:34:35,500 --> 00:34:39,760
general when we're talking about last

978
00:34:37,120 --> 00:34:41,139
note on the ml business is we have to

979
00:34:39,760 --> 00:34:43,120
have your data first your feature

980
00:34:41,139 --> 00:34:45,540
selection next and your algorithm last

981
00:34:43,120 --> 00:34:47,918
you know as far as I'm concerned I

982
00:34:45,540 --> 00:34:49,418
believe that the entire the entirety of

983
00:34:47,918 --> 00:34:51,429
the problems that really lives in the

984
00:34:49,418 --> 00:34:52,899
the feature selection now you can tune

985
00:34:51,429 --> 00:34:54,550
and even fuzz your algorithm so you

986
00:34:52,899 --> 00:34:56,409
throw enough compute power power at it

987
00:34:54,550 --> 00:34:57,480
to try every algorithm with every tuning

988
00:34:56,409 --> 00:34:58,800
mechanism you wanted to

989
00:34:57,480 --> 00:35:01,530
but really it comes down to which

990
00:34:58,800 --> 00:35:03,030
features you're selecting so that's why

991
00:35:01,530 --> 00:35:04,950
we're going to talk about this visual

992
00:35:03,030 --> 00:35:06,210
trying to capture what an analyst sees

993
00:35:04,950 --> 00:35:08,040
when we're looking at a sample and then

994
00:35:06,210 --> 00:35:11,359
semantic you know trying to capture what

995
00:35:08,040 --> 00:35:14,130
the intent is algorithm wise listed from

996
00:35:11,359 --> 00:35:15,720
least valuable as far as we found it for

997
00:35:14,130 --> 00:35:17,760
this specific problem set two most

998
00:35:15,720 --> 00:35:19,020
valuable you know great they're all good

999
00:35:17,760 --> 00:35:21,180
in their own ways and to some degree

1000
00:35:19,020 --> 00:35:23,970
maybe you want to consider weighting

1001
00:35:21,180 --> 00:35:24,990
above them like so for Excel files I'm

1002
00:35:23,970 --> 00:35:26,609
gonna put a hundred percent weight in

1003
00:35:24,990 --> 00:35:28,410
gradient boost maybe for Microsoft

1004
00:35:26,609 --> 00:35:30,119
Office documents it's going to be 5050

1005
00:35:28,410 --> 00:35:33,060
between support vector machine and

1006
00:35:30,119 --> 00:35:35,010
random forests gradient boost stand

1007
00:35:33,060 --> 00:35:37,380
alone has been the best bang for the

1008
00:35:35,010 --> 00:35:41,400
buck for us just in terms of speed and

1009
00:35:37,380 --> 00:35:45,540
efficacy but let's talk about exit PIDs

1010
00:35:41,400 --> 00:35:48,089
so this is an Adobe format it's Adobe

1011
00:35:45,540 --> 00:35:51,270
extensible metadata platform it was

1012
00:35:48,089 --> 00:35:54,570
defined you know back in like 2012 and

1013
00:35:51,270 --> 00:35:57,119
in essence it is a standard for mapping

1014
00:35:54,570 --> 00:35:59,940
assets you know parent to child

1015
00:35:57,119 --> 00:36:02,220
and revisions of that child and it's

1016
00:35:59,940 --> 00:36:05,550
implemented by original document ID oh

1017
00:36:02,220 --> 00:36:08,879
ID the document ID the D ID and then the

1018
00:36:05,550 --> 00:36:11,099
instance ID the I ID so if I have a and

1019
00:36:08,880 --> 00:36:13,050
I'll show this in a second actually so

1020
00:36:11,099 --> 00:36:14,730
we'll save it all for them but the key

1021
00:36:13,050 --> 00:36:16,770
thing here though is that it's an XML

1022
00:36:14,730 --> 00:36:19,470
format and it's actually updated every

1023
00:36:16,770 --> 00:36:21,000
time the user updates the asset and it's

1024
00:36:19,470 --> 00:36:22,439
embedded within the asset which is great

1025
00:36:21,000 --> 00:36:24,540
for us because that means just coming

1026
00:36:22,440 --> 00:36:27,690
with the malware lore so if we can grab

1027
00:36:24,540 --> 00:36:31,650
a unique XMP ID we can use that to pivot

1028
00:36:27,690 --> 00:36:33,000
to other samples with that same ID you

1029
00:36:31,650 --> 00:36:34,800
know to give you a visual example of how

1030
00:36:33,000 --> 00:36:36,900
this works you know we've got three

1031
00:36:34,800 --> 00:36:39,000
different documents here and where a

1032
00:36:36,900 --> 00:36:41,430
document is a graphical asset like PNG

1033
00:36:39,000 --> 00:36:42,780
JPEG whatever and you can see their

1034
00:36:41,430 --> 00:36:45,540
first ones got a no idea of dead beef

1035
00:36:42,780 --> 00:36:47,940
every time it saved the instanceid

1036
00:36:45,540 --> 00:36:49,650
changes and the document ID in this case

1037
00:36:47,940 --> 00:36:52,020
is the same as the original ID because

1038
00:36:49,650 --> 00:36:54,690
it's the original then we make a copy of

1039
00:36:52,020 --> 00:36:56,970
it so we've got the same OID new

1040
00:36:54,690 --> 00:36:59,190
document ID again every single save

1041
00:36:56,970 --> 00:37:01,259
instance is generating a new instance ID

1042
00:36:59,190 --> 00:37:04,290
so in terms of like granularity and

1043
00:37:01,260 --> 00:37:06,390
amount of fluctuation your instance ID

1044
00:37:04,290 --> 00:37:08,130
is gonna be moving the most and then we

1045
00:37:06,390 --> 00:37:10,109
have a third copy of it and so on and so

1046
00:37:08,130 --> 00:37:10,950
forth there's two formats that we've

1047
00:37:10,109 --> 00:37:13,920
seen for the act

1048
00:37:10,950 --> 00:37:17,279
value of this XM PID it's either an md5

1049
00:37:13,920 --> 00:37:20,640
hash so 32 bytes or it's a good format

1050
00:37:17,280 --> 00:37:22,170
so 36 bytes so you know why is this

1051
00:37:20,640 --> 00:37:24,900
useful you know why do we care about

1052
00:37:22,170 --> 00:37:26,609
this it's we care because graphical

1053
00:37:24,900 --> 00:37:28,859
assets are very commonly used among

1054
00:37:26,609 --> 00:37:31,950
malware doors you know for example

1055
00:37:28,859 --> 00:37:34,348
instead of writing inside the document

1056
00:37:31,950 --> 00:37:36,000
trying to convince the user to enable

1057
00:37:34,349 --> 00:37:37,680
active content by clicking on the yellow

1058
00:37:36,000 --> 00:37:40,260
ribbon since folks are looking for that

1059
00:37:37,680 --> 00:37:42,118
text down now attackers will take in an

1060
00:37:40,260 --> 00:37:44,099
image it's got a Microsoft logo on it

1061
00:37:42,119 --> 00:37:45,990
and it says you know please click enable

1062
00:37:44,099 --> 00:37:46,980
content so unless you're doing some of

1063
00:37:45,990 --> 00:37:48,959
that cops'll character recognition

1064
00:37:46,980 --> 00:37:51,000
you're not going to be able to pull that

1065
00:37:48,960 --> 00:37:52,500
that text out they've even gotten

1066
00:37:51,000 --> 00:37:54,240
smarter and in recent history and

1067
00:37:52,500 --> 00:37:56,339
they're making even difficult for OCR

1068
00:37:54,240 --> 00:37:58,680
engines to detect by putting like a blue

1069
00:37:56,339 --> 00:37:59,400
on blue background text or making it

1070
00:37:58,680 --> 00:38:01,890
like a little bit fuzzy

1071
00:37:59,400 --> 00:38:03,960
so it'll break the the optical character

1072
00:38:01,890 --> 00:38:05,190
recognition engine you know you're the

1073
00:38:03,960 --> 00:38:07,020
weakest link in this chain is going to

1074
00:38:05,190 --> 00:38:08,700
be your user you send them an email

1075
00:38:07,020 --> 00:38:10,560
that's password protected and everything

1076
00:38:08,700 --> 00:38:13,200
looks weird one of them will undo that

1077
00:38:10,560 --> 00:38:15,540
thing and you know launch that payload

1078
00:38:13,200 --> 00:38:18,029
you know the other reason why we want to

1079
00:38:15,540 --> 00:38:19,589
wire this is useful is because graphical

1080
00:38:18,030 --> 00:38:22,079
assets are commonly lifted from

1081
00:38:19,589 --> 00:38:24,869
legitimate sources and used in malware

1082
00:38:22,079 --> 00:38:26,910
campaigns so perhaps if I'm writing a

1083
00:38:24,869 --> 00:38:28,800
fish for some bank I might go to the

1084
00:38:26,910 --> 00:38:31,560
bank's actual website pulled their

1085
00:38:28,800 --> 00:38:32,640
legitimate logo and embed that into my

1086
00:38:31,560 --> 00:38:35,160
my document

1087
00:38:32,640 --> 00:38:36,720
maybe I resize it a little bit you know

1088
00:38:35,160 --> 00:38:38,879
maybe I make it black and white maybe I

1089
00:38:36,720 --> 00:38:40,500
like merge my layers down but I took

1090
00:38:38,880 --> 00:38:42,960
that original asset and I used it

1091
00:38:40,500 --> 00:38:45,060
somewhere in my malware lore so if we do

1092
00:38:42,960 --> 00:38:47,069
hashes of files that's not great because

1093
00:38:45,060 --> 00:38:48,960
this tiniest change of course the hash

1094
00:38:47,069 --> 00:38:50,609
is completely different we can do

1095
00:38:48,960 --> 00:38:51,030
optical character recognition that's

1096
00:38:50,609 --> 00:38:52,710
good

1097
00:38:51,030 --> 00:38:55,230
but there's ways of defeating it and

1098
00:38:52,710 --> 00:38:55,920
it's slow you can do perception hashing

1099
00:38:55,230 --> 00:38:57,750
that's better

1100
00:38:55,920 --> 00:39:00,750
but there's again ways to defeating it

1101
00:38:57,750 --> 00:39:02,280
and it's even slower but XMP IDs give us

1102
00:39:00,750 --> 00:39:03,750
the best of both worlds you know they

1103
00:39:02,280 --> 00:39:05,819
carry with the document they're

1104
00:39:03,750 --> 00:39:08,819
resilient to change and it's very very

1105
00:39:05,819 --> 00:39:10,410
quick to both extract and look at it so

1106
00:39:08,819 --> 00:39:12,569
today as an example you know we watch

1107
00:39:10,410 --> 00:39:14,578
about a thousand different XMP IDs and

1108
00:39:12,569 --> 00:39:16,650
this is providing a wealth of valuable

1109
00:39:14,579 --> 00:39:18,150
information for us where we'll see a

1110
00:39:16,650 --> 00:39:19,890
sample that comes up even our customer

1111
00:39:18,150 --> 00:39:22,360
network or comes from borrows total has

1112
00:39:19,890 --> 00:39:24,040
no detection but we know it's bad

1113
00:39:22,360 --> 00:39:25,920
we're tracking these XMP IDs that are

1114
00:39:24,040 --> 00:39:28,450
being reused from campaign a campaign

1115
00:39:25,920 --> 00:39:30,610
you know another example on this front

1116
00:39:28,450 --> 00:39:34,810
is I don't know why this woman got

1117
00:39:30,610 --> 00:39:36,850
chosen but she's a researcher in EU they

1118
00:39:34,810 --> 00:39:40,240
had made a resume for her they used her

1119
00:39:36,850 --> 00:39:42,190
profile to send malware lures out and so

1120
00:39:40,240 --> 00:39:43,060
once we pulled out that XMP ID we looked

1121
00:39:42,190 --> 00:39:44,410
at our corporate and there was like

1122
00:39:43,060 --> 00:39:45,430
hundreds of different unique malware

1123
00:39:44,410 --> 00:39:47,980
samples that were using this poor

1124
00:39:45,430 --> 00:39:49,210
woman's face in order to go you know

1125
00:39:47,980 --> 00:39:52,510
infiltrate whoever they were send their

1126
00:39:49,210 --> 00:39:55,750
resume to so you know we've covered a

1127
00:39:52,510 --> 00:39:57,400
lot of things and it'd be nice people to

1128
00:39:55,750 --> 00:39:59,770
play with it and I'm big proponent of

1129
00:39:57,400 --> 00:40:01,210
hands on and so towards that effect you

1130
00:39:59,770 --> 00:40:03,340
know we're announcing this labs I think

1131
00:40:01,210 --> 00:40:05,620
what's not net and so it's it's live now

1132
00:40:03,340 --> 00:40:07,030
and it gives you access to instead of

1133
00:40:05,620 --> 00:40:08,859
having to build all those things

1134
00:40:07,030 --> 00:40:10,930
yourself from the our rules so the

1135
00:40:08,860 --> 00:40:13,150
malware sample harvesting to the

1136
00:40:10,930 --> 00:40:15,730
extraction and the indexing it just

1137
00:40:13,150 --> 00:40:17,200
gives you an open API it both

1138
00:40:15,730 --> 00:40:19,420
interactive to the web interface and

1139
00:40:17,200 --> 00:40:20,980
just open API access to it now you can

1140
00:40:19,420 --> 00:40:23,770
pull all sorts of data do all sorts of

1141
00:40:20,980 --> 00:40:26,110
searches there's you know four really

1142
00:40:23,770 --> 00:40:28,270
main components to it one of them is a

1143
00:40:26,110 --> 00:40:29,650
document dissector so you can upload

1144
00:40:28,270 --> 00:40:30,910
files to it if you want and get them

1145
00:40:29,650 --> 00:40:33,040
dissected you can upload you know

1146
00:40:30,910 --> 00:40:34,960
hundreds of fostered if you'd like we've

1147
00:40:33,040 --> 00:40:37,180
seeded it with about a million samples

1148
00:40:34,960 --> 00:40:39,640
half of them are exposed right now we'll

1149
00:40:37,180 --> 00:40:42,100
expose the other half at a future date

1150
00:40:39,640 --> 00:40:43,839
so that's one one key component of it

1151
00:40:42,100 --> 00:40:45,970
you know give it some malware lure that

1152
00:40:43,840 --> 00:40:47,830
matura code all of encapsulation and

1153
00:40:45,970 --> 00:40:49,660
it'll dissect it and extract the

1154
00:40:47,830 --> 00:40:51,400
semantic layer it'll do optical

1155
00:40:49,660 --> 00:40:52,810
character recognition it'll pull out IOC

1156
00:40:51,400 --> 00:40:55,690
is it'll pull out the embedded logic

1157
00:40:52,810 --> 00:40:57,880
it'll do some some decoding it'll make

1158
00:40:55,690 --> 00:41:00,280
your your life as an analyst you know

1159
00:40:57,880 --> 00:41:02,830
just much easier for both upload and

1160
00:41:00,280 --> 00:41:04,960
querying it now we've also open-source a

1161
00:41:02,830 --> 00:41:07,240
bunch of your our generators and helpers

1162
00:41:04,960 --> 00:41:09,790
you know we use euro daily in a number

1163
00:41:07,240 --> 00:41:11,290
of different ways and so to help make

1164
00:41:09,790 --> 00:41:13,870
our lives easier there's some things

1165
00:41:11,290 --> 00:41:15,370
that are very manually tedious to do and

1166
00:41:13,870 --> 00:41:17,020
so we went through the extra manually

1167
00:41:15,370 --> 00:41:19,000
tedious process of automating it one

1168
00:41:17,020 --> 00:41:21,370
time and that allows you to just do it

1169
00:41:19,000 --> 00:41:24,940
so things like if I'm trying to write a

1170
00:41:21,370 --> 00:41:26,890
rule that is for hex encoded content but

1171
00:41:24,940 --> 00:41:28,750
I want to be a mixed case that's a pain

1172
00:41:26,890 --> 00:41:31,390
in the ass to write I can do it once and

1173
00:41:28,750 --> 00:41:34,660
this will generate it for me now I can

1174
00:41:31,390 --> 00:41:35,250
convert strings to UN conditions as a

1175
00:41:34,660 --> 00:41:36,839
performance

1176
00:41:35,250 --> 00:41:39,450
loosing thing I'll let you guys go read

1177
00:41:36,840 --> 00:41:41,190
about it on the actual site the most

1178
00:41:39,450 --> 00:41:43,379
impressive one I think is the base64

1179
00:41:41,190 --> 00:41:44,790
wreckage generator we were able to take

1180
00:41:43,380 --> 00:41:47,190
regular expressions that you write for

1181
00:41:44,790 --> 00:41:49,200
plaintext and we will spit out the basic

1182
00:41:47,190 --> 00:41:51,600
C 4 encoded version of that regular

1183
00:41:49,200 --> 00:41:53,160
expression as a real-world example of

1184
00:41:51,600 --> 00:41:55,350
how we use this today with with great

1185
00:41:53,160 --> 00:41:57,270
results we've taken a whole bunch of

1186
00:41:55,350 --> 00:41:59,940
powershell directives that we consider

1187
00:41:57,270 --> 00:42:01,440
to be malicious and we've generated a

1188
00:41:59,940 --> 00:42:03,840
bunch of red Xs for it fed it through

1189
00:42:01,440 --> 00:42:06,180
this system and now we've got a y RF

1190
00:42:03,840 --> 00:42:07,920
signature looking for farlis malware

1191
00:42:06,180 --> 00:42:10,200
that has weird PowerShell pivots in it

1192
00:42:07,920 --> 00:42:11,820
you can even do it twice so if you want

1193
00:42:10,200 --> 00:42:13,950
to do double basis scans for code it you

1194
00:42:11,820 --> 00:42:15,630
can't if you want to wide care basic

1195
00:42:13,950 --> 00:42:18,000
super encoded you can do that as well so

1196
00:42:15,630 --> 00:42:20,880
all that is available you know as an

1197
00:42:18,000 --> 00:42:23,640
example you know the end if you hit this

1198
00:42:20,880 --> 00:42:25,410
it would just work here's API driven

1199
00:42:23,640 --> 00:42:26,779
example where I'm giving it PowerShell

1200
00:42:25,410 --> 00:42:29,879
that's giving you back hex encoded

1201
00:42:26,780 --> 00:42:33,570
variable case here's one where it's

1202
00:42:29,880 --> 00:42:35,430
converting the RTF magic at zero instead

1203
00:42:33,570 --> 00:42:38,550
of having a string comparison which is

1204
00:42:35,430 --> 00:42:40,220
slow in your high throughput terms this

1205
00:42:38,550 --> 00:42:42,150
is converting it to an integer

1206
00:42:40,220 --> 00:42:44,430
dereference so it's instantaneous is

1207
00:42:42,150 --> 00:42:46,620
this value at that address as opposed to

1208
00:42:44,430 --> 00:42:47,970
scan the entire document for these

1209
00:42:46,620 --> 00:42:51,240
values and then show me where it's at

1210
00:42:47,970 --> 00:42:53,700
and then the base64 record generator and

1211
00:42:51,240 --> 00:42:54,930
you can see I mean if you can believe

1212
00:42:53,700 --> 00:42:56,759
this a tipping point we used to write

1213
00:42:54,930 --> 00:42:59,220
these things and it was a nightmare

1214
00:42:56,760 --> 00:43:01,230
to write and a nightmare to to compare

1215
00:42:59,220 --> 00:43:03,569
so we ended up at some point building a

1216
00:43:01,230 --> 00:43:06,360
tool that automated this process for us

1217
00:43:03,570 --> 00:43:07,710
so you can send a string up to the our

1218
00:43:06,360 --> 00:43:10,110
cloud service and we'll just send you

1219
00:43:07,710 --> 00:43:12,240
back the regular expression I will say

1220
00:43:10,110 --> 00:43:14,160
that this can get messy real fast you

1221
00:43:12,240 --> 00:43:15,720
know if you go too far with it

1222
00:43:14,160 --> 00:43:17,040
there's no reg X engine in the world

1223
00:43:15,720 --> 00:43:19,259
that's gonna run that thing at any kind

1224
00:43:17,040 --> 00:43:23,759
of reasonable speed so you know a caveat

1225
00:43:19,260 --> 00:43:25,890
emptor on that front you know I

1226
00:43:23,760 --> 00:43:27,960
mentioned everything else is is is API

1227
00:43:25,890 --> 00:43:29,129
accessible and there's two other tools

1228
00:43:27,960 --> 00:43:31,200
that we've exposed through it one of

1229
00:43:29,130 --> 00:43:33,330
them is a reputation aggregation so we

1230
00:43:31,200 --> 00:43:35,490
have aggregated like two dozen different

1231
00:43:33,330 --> 00:43:37,470
sources into a single searchable

1232
00:43:35,490 --> 00:43:40,229
interface so again you can use that as a

1233
00:43:37,470 --> 00:43:42,180
source of places to go pivot off of to

1234
00:43:40,230 --> 00:43:44,850
pull down more more malware samples and

1235
00:43:42,180 --> 00:43:46,169
whatnot from and finally IOC aggregation

1236
00:43:44,850 --> 00:43:48,060
from Twitter you know there's a lot of

1237
00:43:46,170 --> 00:43:48,900
people that we fall we think are do neat

1238
00:43:48,060 --> 00:43:50,519
work

1239
00:43:48,900 --> 00:43:52,319
generally when they put out some kind of

1240
00:43:50,519 --> 00:43:55,019
URL or hash like we'll go check it out

1241
00:43:52,319 --> 00:43:57,509
and so this is just an aggregation of

1242
00:43:55,019 --> 00:44:01,468
all that as well and again entirely API

1243
00:43:57,509 --> 00:44:04,229
accessible and with that you know if you

1244
00:44:01,469 --> 00:44:05,400
guys have any questions about the the

1245
00:44:04,229 --> 00:44:06,989
work or you want to work together on

1246
00:44:05,400 --> 00:44:08,339
aims for interesting samples you know

1247
00:44:06,989 --> 00:44:10,589
please don't hesitate to reach out get

1248
00:44:08,339 --> 00:44:11,849
in touch and just a quick thank you to

1249
00:44:10,589 --> 00:44:13,519
some of my colleagues for sending the

1250
00:44:11,849 --> 00:44:17,099
audience and help me out with all this

1251
00:44:13,519 --> 00:44:18,479
william macarthur amir neocon who some

1252
00:44:17,099 --> 00:44:21,239
of you guys may know as dissect malware

1253
00:44:18,479 --> 00:44:23,189
is pretty prolific on twitter and adam

1254
00:44:21,239 --> 00:44:24,630
luciano a big thanks to them for helping

1255
00:44:23,190 --> 00:44:26,700
me put all this together well thank you

1256
00:44:24,630 --> 00:44:32,339
guys very much I appreciate it and just

1257
00:44:26,700 --> 00:44:33,629
open up any questions you might have if

1258
00:44:32,339 --> 00:44:34,890
you do have questions there's mics in

1259
00:44:33,630 --> 00:44:36,029
the middle aisles otherwise I'll be

1260
00:44:34,890 --> 00:44:38,279
hanging around for a little while

1261
00:44:36,029 --> 00:44:40,349
Oh on another note if you enjoy my

1262
00:44:38,279 --> 00:44:42,239
Couture over here we do have a bunch of

1263
00:44:40,349 --> 00:45:04,979
t-shirts in the back Adam be happy to

1264
00:44:42,239 --> 00:45:07,019
hook you up with one any questions yeah

1265
00:45:04,979 --> 00:45:08,669
they're gonna post the slides and if you

1266
00:45:07,019 --> 00:45:11,249
just later on today when I get back to

1267
00:45:08,670 --> 00:45:13,799
the hotel just do a blog that inquests

1268
00:45:11,249 --> 00:45:15,049
not net and we'll have it up there all

1269
00:45:13,799 --> 00:45:18,299
right

1270
00:45:15,049 --> 00:45:19,829
hello so I think this should be an easy

1271
00:45:18,299 --> 00:45:23,069
question for you how have you been able

1272
00:45:19,829 --> 00:45:26,009
to tie back when you do find an exploit

1273
00:45:23,069 --> 00:45:29,729
within malware to the correct CDE what

1274
00:45:26,009 --> 00:45:31,739
are you doing a lot of Bend if analysis

1275
00:45:29,729 --> 00:45:32,910
when patches are being released and

1276
00:45:31,739 --> 00:45:35,999
that's kind of helping you with that

1277
00:45:32,910 --> 00:45:37,859
level of attribution for lack of a

1278
00:45:35,999 --> 00:45:39,689
better term so the question was how are

1279
00:45:37,859 --> 00:45:41,609
you mapping you know when you see an

1280
00:45:39,690 --> 00:45:44,700
exploit how do you then map that to the

1281
00:45:41,609 --> 00:45:47,940
CVE you know if it's already been

1282
00:45:44,700 --> 00:45:49,109
published chances are one of your tools

1283
00:45:47,940 --> 00:45:51,269
are gonna label it on their own

1284
00:45:49,109 --> 00:45:52,739
you know we're when you're looking for

1285
00:45:51,269 --> 00:45:55,169
like if we were to write a signature for

1286
00:45:52,739 --> 00:45:56,969
example to detect a specific CV you know

1287
00:45:55,170 --> 00:45:59,670
I'm writing it specific to it so when I

1288
00:45:56,969 --> 00:46:02,130
see it fire I see that that is what it

1289
00:45:59,670 --> 00:46:03,900
was if you find something that

1290
00:46:02,130 --> 00:46:05,700
is exporting your system and your fully

1291
00:46:03,900 --> 00:46:07,470
passionate and O'Dea you know you're

1292
00:46:05,700 --> 00:46:09,629
then gonna have a CV associated with it

1293
00:46:07,470 --> 00:46:10,499
you know moving forward so it's a you

1294
00:46:09,630 --> 00:46:12,630
know whether you're looking at it in

1295
00:46:10,499 --> 00:46:15,499
hindsight we're looking at it forward

1296
00:46:12,630 --> 00:46:18,839
that's the answer there that makes sense

1297
00:46:15,499 --> 00:46:21,089
would you say for you in practice it's

1298
00:46:18,839 --> 00:46:22,828
better to run a fully patched system

1299
00:46:21,089 --> 00:46:24,720
that you're executing your malware on or

1300
00:46:22,829 --> 00:46:27,390
do you run vulnerable system if we're

1301
00:46:24,720 --> 00:46:28,979
you know if we're looking for this kind

1302
00:46:27,390 --> 00:46:30,808
of thing where we're looking for a no

1303
00:46:28,979 --> 00:46:32,910
date you want a fully patch system you

1304
00:46:30,809 --> 00:46:35,160
know you want it to be a system where if

1305
00:46:32,910 --> 00:46:37,140
it did if something did get compromised

1306
00:46:35,160 --> 00:46:38,549
it it's interesting you know otherwise

1307
00:46:37,140 --> 00:46:39,450
if you're shooting for like Windows XP

1308
00:46:38,549 --> 00:46:41,369
or you know some of the low-hanging

1309
00:46:39,450 --> 00:46:42,979
fruit there's gonna be plenty of noise

1310
00:46:41,369 --> 00:46:44,729
there so I would go with a fully patched

1311
00:46:42,979 --> 00:46:48,239
system that you expect to see in

1312
00:46:44,729 --> 00:46:51,828
production thank you for being generous

1313
00:46:48,239 --> 00:46:51,829
with your knowledge thank you thanks

