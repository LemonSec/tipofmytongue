1
00:00:00,000 --> 00:00:06,000
good afternoon welcome to fantastic Red

2
00:00:04,049 --> 00:00:09,900
Team attacks and how to find them in

3
00:00:06,000 --> 00:00:13,379
South Seas a B e with Casey Smith and

4
00:00:09,900 --> 00:00:14,759
Ross wolf before we begin and as people

5
00:00:13,380 --> 00:00:16,920
are sitting down I'll give you a few

6
00:00:14,759 --> 00:00:19,320
brief announcements make sure you stop

7
00:00:16,920 --> 00:00:21,630
by the business hall in Mandalay Bay

8
00:00:19,320 --> 00:00:24,660
Oceanside and shoreline ballrooms on

9
00:00:21,630 --> 00:00:26,840
level two the blackhat arsenal is also

10
00:00:24,660 --> 00:00:29,580
in the business hall on level two

11
00:00:26,840 --> 00:00:31,410
don't forget the merchandise store on

12
00:00:29,580 --> 00:00:32,820
level two and the session recordings

13
00:00:31,410 --> 00:00:36,270
from source of knowledge they have a

14
00:00:32,820 --> 00:00:39,000
desk on every level please

15
00:00:36,270 --> 00:00:39,450
and thank you for putting your phone on

16
00:00:39,000 --> 00:00:41,820
vibrate

17
00:00:39,450 --> 00:00:43,410
it makes us easier for the rest of us to

18
00:00:41,820 --> 00:00:46,559
ignore the ringing while we wait for

19
00:00:43,410 --> 00:00:50,360
your voicemail to pick it up let's give

20
00:00:46,559 --> 00:00:53,500
it up for Ross and Casey

21
00:00:50,360 --> 00:00:53,500
[Applause]

22
00:00:55,880 --> 00:01:00,050
good afternoon thanks for coming out to

23
00:00:57,680 --> 00:01:02,510
our talk a couple of things that we want

24
00:01:00,050 --> 00:01:04,489
to talk about here is take a question

25
00:01:02,510 --> 00:01:06,530
based approach so some of the questions

26
00:01:04,489 --> 00:01:08,270
we want to address today are are the

27
00:01:06,530 --> 00:01:11,630
tools and methodology that you use today

28
00:01:08,270 --> 00:01:14,270
working how would you know and can you

29
00:01:11,630 --> 00:01:16,550
detect attacks that are known and also

30
00:01:14,270 --> 00:01:18,679
can you attack detect attacks that are

31
00:01:16,550 --> 00:01:20,210
unknown and so we're gonna be sharing

32
00:01:18,680 --> 00:01:22,220
some free and open source tools that you

33
00:01:20,210 --> 00:01:24,610
could use help answer the questions that

34
00:01:22,220 --> 00:01:27,350
you're interested in your environment so

35
00:01:24,610 --> 00:01:29,270
my name is Casey Smith I'm the director

36
00:01:27,350 --> 00:01:30,949
of Applied Research at red Canary you

37
00:01:29,270 --> 00:01:32,539
can connect with me on Twitter at subti

38
00:01:30,950 --> 00:01:34,100
I also worked on the atomic red team

39
00:01:32,540 --> 00:01:36,320
project we'll be talking about today and

40
00:01:34,100 --> 00:01:38,030
I'm Ross wolf I'm a researcher end-game

41
00:01:36,320 --> 00:01:39,800
I created our event query language we're

42
00:01:38,030 --> 00:01:40,940
going to talk about today as well have a

43
00:01:39,800 --> 00:01:43,910
lot of our detection x' and our

44
00:01:40,940 --> 00:01:44,090
detection system and i'm on twitter as

45
00:01:43,910 --> 00:01:47,660
well

46
00:01:44,090 --> 00:01:49,009
RW underscore access so real quick so

47
00:01:47,660 --> 00:01:50,570
you have an agenda we're gonna be

48
00:01:49,009 --> 00:01:51,770
talking about really four major themes

49
00:01:50,570 --> 00:01:53,300
during this talk we're gonna share a

50
00:01:51,770 --> 00:01:55,759
little bit about atomic red team what it

51
00:01:53,300 --> 00:01:57,289
is how we see defenders using atomic red

52
00:01:55,759 --> 00:01:59,180
team then we're going to take a deep

53
00:01:57,290 --> 00:02:00,920
dive into the event query language or

54
00:01:59,180 --> 00:02:02,360
equal and we're going to look at the

55
00:02:00,920 --> 00:02:04,250
syntax structure and how to build

56
00:02:02,360 --> 00:02:05,810
queries to search through in point data

57
00:02:04,250 --> 00:02:07,729
and then we're gonna go through an

58
00:02:05,810 --> 00:02:09,440
exercise which is red vs. blue that ross

59
00:02:07,729 --> 00:02:11,750
and i created in order to test some of

60
00:02:09,440 --> 00:02:15,019
these theories we had and we're gonna be

61
00:02:11,750 --> 00:02:16,760
we're showcasing a attack that based on

62
00:02:15,019 --> 00:02:18,680
our research hasn't been seen before but

63
00:02:16,760 --> 00:02:20,810
we were able to work through that data

64
00:02:18,680 --> 00:02:22,100
set and locate it so and then we'll come

65
00:02:20,810 --> 00:02:23,630
to some conclusions about what we

66
00:02:22,100 --> 00:02:25,519
learned along the way so we've put a

67
00:02:23,630 --> 00:02:28,730
couple of links for follow up after the

68
00:02:25,519 --> 00:02:30,769
talk so one of the reasons we're here is

69
00:02:28,730 --> 00:02:32,929
defenders want to know that their tools

70
00:02:30,769 --> 00:02:34,280
and their methodology is working and the

71
00:02:32,930 --> 00:02:36,500
question we have is well how do you know

72
00:02:34,280 --> 00:02:38,840
unless you actually test and observe

73
00:02:36,500 --> 00:02:42,200
outcomes so how are you actually testing

74
00:02:38,840 --> 00:02:44,269
your defenses and a lot of defenders

75
00:02:42,200 --> 00:02:46,518
don't know necessarily how to start

76
00:02:44,269 --> 00:02:48,380
testing or they may not be testing well

77
00:02:46,519 --> 00:02:49,610
so one of the things we're gonna dive in

78
00:02:48,380 --> 00:02:52,430
today is when we start looking at

79
00:02:49,610 --> 00:02:54,080
behavior based detection that takes a

80
00:02:52,430 --> 00:02:55,610
different different way to exercise or

81
00:02:54,080 --> 00:02:58,010
creates a lemon tree to make sure your

82
00:02:55,610 --> 00:02:59,780
detection czar working and so one of the

83
00:02:58,010 --> 00:03:02,329
reasons we created atomic Red Team was

84
00:02:59,780 --> 00:03:04,609
help teams have at least a tool that

85
00:03:02,330 --> 00:03:07,530
they could use to begin understanding or

86
00:03:04,609 --> 00:03:09,760
test some of their detections

87
00:03:07,530 --> 00:03:12,370
some of you may have heard of atomic red

88
00:03:09,760 --> 00:03:14,019
team for those of you haven't it is a

89
00:03:12,370 --> 00:03:16,150
free open-source project for testing

90
00:03:14,020 --> 00:03:19,030
security controls it's really primarily

91
00:03:16,150 --> 00:03:22,900
focused on the endpoint so we're able to

92
00:03:19,030 --> 00:03:25,360
exercise various tasks all of the tests

93
00:03:22,900 --> 00:03:27,010
that we've written are based in yamo we

94
00:03:25,360 --> 00:03:29,020
have source code in binaries that back

95
00:03:27,010 --> 00:03:31,750
that up all of its map to mitre attack

96
00:03:29,020 --> 00:03:33,880
so that if you want to look at a

97
00:03:31,750 --> 00:03:36,190
particular mitre attack ID you could go

98
00:03:33,880 --> 00:03:37,660
find the source code that backs up that

99
00:03:36,190 --> 00:03:39,250
particular test and as a shout-out to

100
00:03:37,660 --> 00:03:41,740
Chris Gates he helped us as team started

101
00:03:39,250 --> 00:03:45,070
using atomic in an automated way Yama

102
00:03:41,740 --> 00:03:47,410
was a good way to describe test many of

103
00:03:45,070 --> 00:03:50,049
the tests in atomic Red Team are single

104
00:03:47,410 --> 00:03:53,200
command line or minimal dependencies to

105
00:03:50,050 --> 00:03:55,420
set up a binary a command line a local

106
00:03:53,200 --> 00:03:57,880
or remote script and so that's very

107
00:03:55,420 --> 00:03:59,500
helpful for small security teams up to

108
00:03:57,880 --> 00:04:01,269
larger teams that may be consuming or

109
00:03:59,500 --> 00:04:04,150
taking a dependency on using atomic read

110
00:04:01,270 --> 00:04:06,730
team one of the reasons we created it

111
00:04:04,150 --> 00:04:08,800
was to demystify attacks so by providing

112
00:04:06,730 --> 00:04:11,170
code and example so if you read about a

113
00:04:08,800 --> 00:04:12,370
particular attack on mitre miters

114
00:04:11,170 --> 00:04:14,260
taxonomy which is a really great

115
00:04:12,370 --> 00:04:17,019
repository but you don't want to know

116
00:04:14,260 --> 00:04:18,579
that details like what API is calls are

117
00:04:17,019 --> 00:04:21,339
made or what files are written to disk

118
00:04:18,579 --> 00:04:22,900
or what file structure is reference this

119
00:04:21,339 --> 00:04:24,880
helps you as a defender draw your own

120
00:04:22,900 --> 00:04:27,609
conclusions about observation and

121
00:04:24,880 --> 00:04:28,930
detection and and and of course I just

122
00:04:27,610 --> 00:04:30,400
wanted mention this well we use the term

123
00:04:28,930 --> 00:04:32,410
atomic we're thinking in terms of

124
00:04:30,400 --> 00:04:34,900
discrete or small components we're not

125
00:04:32,410 --> 00:04:37,210
we're not replacing a human red team

126
00:04:34,900 --> 00:04:38,770
that can do adversary emulation and

127
00:04:37,210 --> 00:04:40,330
adaptation and so we still see

128
00:04:38,770 --> 00:04:41,979
tremendous value that will come out in

129
00:04:40,330 --> 00:04:44,320
this talk today we use that particular

130
00:04:41,980 --> 00:04:45,940
term just to say this is one way you can

131
00:04:44,320 --> 00:04:49,750
begin exercising some tests and

132
00:04:45,940 --> 00:04:51,969
generating telemetry what does an atomic

133
00:04:49,750 --> 00:04:54,160
test look like well this is an example

134
00:04:51,970 --> 00:04:57,130
of the ML structure and we can see here

135
00:04:54,160 --> 00:04:59,530
we're referencing miter a technique t11

136
00:04:57,130 --> 00:05:01,870
1/8 which is a whitelisting bypass

137
00:04:59,530 --> 00:05:03,729
called install util and we can see we

138
00:05:01,870 --> 00:05:05,410
have some data that surrounds that

139
00:05:03,730 --> 00:05:08,230
particular test that can describe with

140
00:05:05,410 --> 00:05:10,150
descriptions or references ultimately

141
00:05:08,230 --> 00:05:12,340
though we have what command do you need

142
00:05:10,150 --> 00:05:15,099
to execute to exercise this test so in

143
00:05:12,340 --> 00:05:17,679
this test install util we'll load a

144
00:05:15,100 --> 00:05:18,210
dotnet assembly it will find the help

145
00:05:17,680 --> 00:05:20,160
text

146
00:05:18,210 --> 00:05:21,750
method and execute that so a number of

147
00:05:20,160 --> 00:05:22,710
adversaries have used this we'll talk

148
00:05:21,750 --> 00:05:25,020
about in a moment

149
00:05:22,710 --> 00:05:26,520
and you could change some of the

150
00:05:25,020 --> 00:05:28,710
filename properties so here you see we

151
00:05:26,520 --> 00:05:31,500
have a file name and it is replaced in

152
00:05:28,710 --> 00:05:33,120
the command line so you can customize

153
00:05:31,500 --> 00:05:36,389
these as you need to those are arbitrary

154
00:05:33,120 --> 00:05:38,400
it's up to you to use one of the

155
00:05:36,389 --> 00:05:40,199
benefits of actually describing tasks

156
00:05:38,400 --> 00:05:41,340
and yeah Mille for automation is it

157
00:05:40,199 --> 00:05:43,139
actually helps you chain

158
00:05:41,340 --> 00:05:44,310
tests together or put sequences of tests

159
00:05:43,139 --> 00:05:47,400
together we like to call them chain

160
00:05:44,310 --> 00:05:49,860
reactions but essentially we can take a

161
00:05:47,400 --> 00:05:51,599
sequence of tests and we can then put

162
00:05:49,860 --> 00:05:53,280
them in an array and then call this is

163
00:05:51,599 --> 00:05:54,900
an example of our power shell function

164
00:05:53,280 --> 00:05:57,448
and we can call get it get the technique

165
00:05:54,900 --> 00:05:59,400
and then invoke the technique and so a

166
00:05:57,449 --> 00:06:01,699
majority of our tests are benign in

167
00:05:59,400 --> 00:06:04,049
terms of the they may just pop calc or

168
00:06:01,699 --> 00:06:06,479
write a file to disk but you can

169
00:06:04,050 --> 00:06:10,620
customize those to be as aggressive as

170
00:06:06,479 --> 00:06:11,849
you may need for your testing what are

171
00:06:10,620 --> 00:06:14,009
some of the observations that we've

172
00:06:11,849 --> 00:06:15,509
learned from teams that may be using

173
00:06:14,009 --> 00:06:18,449
atomic read to so one of the use cases

174
00:06:15,509 --> 00:06:20,250
for atomic is team is one of validate

175
00:06:18,449 --> 00:06:22,409
collection did collection of their

176
00:06:20,250 --> 00:06:24,030
telemetry and detection logic so we've

177
00:06:22,409 --> 00:06:25,680
seen for example teams identified miss

178
00:06:24,030 --> 00:06:28,258
configuration because they run a test

179
00:06:25,680 --> 00:06:30,150
and they were expecting their you know

180
00:06:28,259 --> 00:06:31,979
analysis engine to analyze the command

181
00:06:30,150 --> 00:06:33,659
line and it never got there there was a

182
00:06:31,979 --> 00:06:35,580
miss configuration on the network or on

183
00:06:33,659 --> 00:06:37,919
the endpoint so it can help drive or

184
00:06:35,580 --> 00:06:38,969
identify gaps in that respect it can

185
00:06:37,919 --> 00:06:40,830
also help you understand what data

186
00:06:38,969 --> 00:06:43,409
sources you have so if you're expecting

187
00:06:40,830 --> 00:06:44,699
to understand process relationships go

188
00:06:43,409 --> 00:06:46,860
ahead and let's test that if you're

189
00:06:44,699 --> 00:06:48,780
expecting an adversary to break process

190
00:06:46,860 --> 00:06:51,030
relationships a parent child you can

191
00:06:48,780 --> 00:06:53,130
also exercise that as well helps you

192
00:06:51,030 --> 00:06:54,119
understand your environment a lot of the

193
00:06:53,130 --> 00:06:55,680
tools that we'll talk about in a moment

194
00:06:54,120 --> 00:06:57,840
are built-in tools to the operating

195
00:06:55,680 --> 00:06:59,820
system and so helping you understand how

196
00:06:57,840 --> 00:07:02,039
our normal tool is used and how it could

197
00:06:59,820 --> 00:07:03,690
they be abused by an adversary and then

198
00:07:02,039 --> 00:07:05,520
lastly some people just want to know do

199
00:07:03,690 --> 00:07:09,810
I have coverage for this particular

200
00:07:05,520 --> 00:07:12,000
technique that I saw or read about so

201
00:07:09,810 --> 00:07:13,680
some of the frequently mess mitre attack

202
00:07:12,000 --> 00:07:15,539
techniques that we've observed are

203
00:07:13,680 --> 00:07:18,330
things that are related to native OS

204
00:07:15,539 --> 00:07:19,560
tools and so you have a few of them here

205
00:07:18,330 --> 00:07:20,969
I'm gonna call out we're gonna really

206
00:07:19,560 --> 00:07:22,340
focus in this talk on two of them but

207
00:07:20,969 --> 00:07:24,960
just to go through a few that we've seen

208
00:07:22,340 --> 00:07:27,029
teams that missed these so masquerading

209
00:07:24,960 --> 00:07:28,710
is a common one so you may not be

210
00:07:27,029 --> 00:07:31,080
familiar with that particular ID but a

211
00:07:28,710 --> 00:07:33,000
masquerading attack would be like

212
00:07:31,080 --> 00:07:35,460
just renaming a binary or copying it to

213
00:07:33,000 --> 00:07:37,500
a location that's writable by the

214
00:07:35,460 --> 00:07:40,109
attacker so that's that's a commonly

215
00:07:37,500 --> 00:07:41,909
missed test the windows management

216
00:07:40,110 --> 00:07:44,750
instrumentation there's another area

217
00:07:41,909 --> 00:07:47,340
that has about some gaps of visibility

218
00:07:44,750 --> 00:07:48,569
process injection these are really just

219
00:07:47,340 --> 00:07:49,859
things that we've observed talking to

220
00:07:48,569 --> 00:07:53,039
teams that are using the tool and

221
00:07:49,860 --> 00:07:54,300
providing us feedback one that we'll

222
00:07:53,039 --> 00:07:56,878
talk about today in depth a little bit

223
00:07:54,300 --> 00:07:58,469
more is install util and we'll also take

224
00:07:56,879 --> 00:08:00,289
a deep dive into some trusted developer

225
00:07:58,469 --> 00:08:02,159
tools because these are often signed by

226
00:08:00,289 --> 00:08:04,110
legitimate companies but they have

227
00:08:02,159 --> 00:08:08,550
really powerful capabilities built into

228
00:08:04,110 --> 00:08:10,830
them MSHDA script hosts and you know

229
00:08:08,550 --> 00:08:12,509
we're on arbitrary you know VB script a

230
00:08:10,830 --> 00:08:14,849
script still being missed by a lot of

231
00:08:12,509 --> 00:08:16,469
teams and then of course XSL script

232
00:08:14,849 --> 00:08:18,330
processing so if you haven't heard of

233
00:08:16,469 --> 00:08:21,000
this is would be using sort of

234
00:08:18,330 --> 00:08:23,729
non-standard things that can run style

235
00:08:21,000 --> 00:08:26,029
sheet scripting so things like women and

236
00:08:23,729 --> 00:08:29,400
format tables and things like that

237
00:08:26,029 --> 00:08:32,578
okay so why do we do these tests well

238
00:08:29,400 --> 00:08:34,728
primarily because these tests are then

239
00:08:32,578 --> 00:08:36,899
seen in actual incidents so I put two

240
00:08:34,729 --> 00:08:39,269
references here for you to look at and

241
00:08:36,899 --> 00:08:41,458
the first one is a reference of an

242
00:08:39,269 --> 00:08:43,198
adversary using install util and the

243
00:08:41,458 --> 00:08:45,930
second one is a reference to attackers

244
00:08:43,198 --> 00:08:47,790
using msbuild so both of those for

245
00:08:45,930 --> 00:08:49,769
example in the window space will ship by

246
00:08:47,790 --> 00:08:51,689
default the operating system adversaries

247
00:08:49,769 --> 00:08:53,370
can use those if you're operating in a

248
00:08:51,690 --> 00:08:54,870
constrained and whitelisting environment

249
00:08:53,370 --> 00:08:55,860
because they're already there they may

250
00:08:54,870 --> 00:08:56,940
already be trusted

251
00:08:55,860 --> 00:08:58,260
so that's why we'd like to run these

252
00:08:56,940 --> 00:09:02,430
tests so you can be prepared for the

253
00:08:58,260 --> 00:09:03,899
actual incidents so ultimately the

254
00:09:02,430 --> 00:09:05,489
atomic red team is could you know may

255
00:09:03,899 --> 00:09:07,680
help organizations prepare by running

256
00:09:05,490 --> 00:09:10,500
small benign examples and letting teams

257
00:09:07,680 --> 00:09:12,959
test practice iterate their response the

258
00:09:10,500 --> 00:09:14,279
coverage and hunting what the reality is

259
00:09:12,959 --> 00:09:16,500
all of these things that we've talked

260
00:09:14,279 --> 00:09:18,870
about so far they're really known so an

261
00:09:16,500 --> 00:09:20,610
attacker may decide to do something that

262
00:09:18,870 --> 00:09:22,980
is not in the miter attack matrix and

263
00:09:20,610 --> 00:09:24,360
they're not something that has been seen

264
00:09:22,980 --> 00:09:26,370
before so we wanted to explore the

265
00:09:24,360 --> 00:09:28,019
question of how would you want to see if

266
00:09:26,370 --> 00:09:32,490
you could find something unknown so I

267
00:09:28,019 --> 00:09:34,949
ended to Ross yeah so looking for those

268
00:09:32,490 --> 00:09:37,079
known known threats if you will like the

269
00:09:34,949 --> 00:09:39,029
own atomic tests that we have aren't as

270
00:09:37,079 --> 00:09:40,380
bad once you understand and once you can

271
00:09:39,029 --> 00:09:42,480
detonate and look at the data they

272
00:09:40,380 --> 00:09:44,269
generate but like if you want to find

273
00:09:42,480 --> 00:09:45,170
those known unknowns like

274
00:09:44,269 --> 00:09:48,319
if you know there's gonna be an

275
00:09:45,170 --> 00:09:49,729
adversary how can you still find it what

276
00:09:48,319 --> 00:09:53,899
do we still know in general and they're

277
00:09:49,730 --> 00:09:55,309
still like that mo right the there's

278
00:09:53,899 --> 00:09:56,720
going to be privilege escalation in a

279
00:09:55,309 --> 00:09:59,329
lot of our movement and we can focus on

280
00:09:56,720 --> 00:10:01,100
those higher-level behaviors select

281
00:09:59,329 --> 00:10:02,359
behaviors I mean like the things that

282
00:10:01,100 --> 00:10:06,910
they're doing to accomplish their goal

283
00:10:02,360 --> 00:10:09,949
they'd be in like adversary and the

284
00:10:06,910 --> 00:10:12,410
focus we can intake instead of on tools

285
00:10:09,949 --> 00:10:14,179
is we can focus on events right so

286
00:10:12,410 --> 00:10:16,368
events logging like state changes and

287
00:10:14,179 --> 00:10:17,689
things happening so if those behaviors

288
00:10:16,369 --> 00:10:19,699
are more complex and spend multiple

289
00:10:17,689 --> 00:10:21,439
events um what if we could change them

290
00:10:19,699 --> 00:10:22,819
together and see oh there's a state

291
00:10:21,439 --> 00:10:25,429
change something happened here that was

292
00:10:22,819 --> 00:10:27,469
new that's that might tip our hand to

293
00:10:25,429 --> 00:10:30,589
finding an adversary and I'm gonna go

294
00:10:27,470 --> 00:10:31,730
through some eql to answers and to ask

295
00:10:30,589 --> 00:10:34,610
and answer some of those behavioral

296
00:10:31,730 --> 00:10:37,699
questions so eql is a language we

297
00:10:34,610 --> 00:10:39,199
released it's free it's open source it's

298
00:10:37,699 --> 00:10:41,540
supposed to be really easy and intuitive

299
00:10:39,199 --> 00:10:45,920
and simple to use at least I'd like to

300
00:10:41,540 --> 00:10:47,769
think and but also complete enough to

301
00:10:45,920 --> 00:10:49,849
ask to answer those complex questions

302
00:10:47,769 --> 00:10:51,379
looking for things happening in a

303
00:10:49,850 --> 00:10:55,999
certain sequence or even tracking like

304
00:10:51,379 --> 00:10:57,559
process ancestry it natively supports

305
00:10:55,999 --> 00:10:59,509
like process lineage like I could ask

306
00:10:57,559 --> 00:11:00,980
like oh is this a descendant of that and

307
00:10:59,509 --> 00:11:02,299
that's supported like right out of the

308
00:11:00,980 --> 00:11:05,689
box you don't have to do multiple

309
00:11:02,299 --> 00:11:10,009
queries a row and also looking for

310
00:11:05,689 --> 00:11:11,449
sequences of events happening but but we

311
00:11:10,009 --> 00:11:12,829
often need to sort through a tremendous

312
00:11:11,449 --> 00:11:14,269
amount of data when you're talking

313
00:11:12,829 --> 00:11:16,059
millions and billions events and they're

314
00:11:14,269 --> 00:11:19,459
trying to get to like a couple hundred

315
00:11:16,059 --> 00:11:21,490
you need some way of looking for the

316
00:11:19,459 --> 00:11:23,839
outliers and so we have pipes for that

317
00:11:21,490 --> 00:11:25,369
and it's more than just like this

318
00:11:23,839 --> 00:11:28,369
language and spec if you want to start

319
00:11:25,369 --> 00:11:29,629
using it we'll get into later like how

320
00:11:28,369 --> 00:11:31,100
you can use it yourself but there is

321
00:11:29,629 --> 00:11:34,189
this dynamic shell you can load up your

322
00:11:31,100 --> 00:11:35,929
own data play around with it so it's

323
00:11:34,189 --> 00:11:37,040
also a tool not just the language um so

324
00:11:35,929 --> 00:11:38,839
what's it look like at the most basic

325
00:11:37,040 --> 00:11:40,759
level you can look for a single event

326
00:11:38,839 --> 00:11:42,740
and that's some event type where some

327
00:11:40,759 --> 00:11:43,850
condition is true that's simple it looks

328
00:11:42,740 --> 00:11:45,619
kind of like Python as far as those

329
00:11:43,850 --> 00:11:49,519
operators ago like the and or not lower

330
00:11:45,619 --> 00:11:51,379
case equal signs and you can compare

331
00:11:49,519 --> 00:11:54,019
strings you can use wildcards as well

332
00:11:51,379 --> 00:11:56,360
one query example might look like this

333
00:11:54,019 --> 00:11:58,300
so maybe I'm looking for a weird SVC

334
00:11:56,360 --> 00:12:00,160
host I know SVC house

335
00:11:58,300 --> 00:12:02,859
normally has a - cake and it comes from

336
00:12:00,160 --> 00:12:04,510
services and so I could express that in

337
00:12:02,860 --> 00:12:07,450
EQ all this way here's a process that

338
00:12:04,510 --> 00:12:10,689
looks like this and has these fields

339
00:12:07,450 --> 00:12:12,190
matching so I can take that simple

340
00:12:10,690 --> 00:12:13,480
component that event query I can

341
00:12:12,190 --> 00:12:14,680
actually stack them together into a

342
00:12:13,480 --> 00:12:16,210
sequence so I can look for multiple

343
00:12:14,680 --> 00:12:18,069
events in a row that look a certain way

344
00:12:16,210 --> 00:12:20,620
and so that kind of follows this

345
00:12:18,070 --> 00:12:22,870
template we've got a sequence over some

346
00:12:20,620 --> 00:12:24,160
time span if that's relevant and then

347
00:12:22,870 --> 00:12:26,710
between the brackets you've got that

348
00:12:24,160 --> 00:12:28,000
event query again so you have multiple

349
00:12:26,710 --> 00:12:29,230
events that look a certain way and you

350
00:12:28,000 --> 00:12:31,900
can even say that have share properties

351
00:12:29,230 --> 00:12:33,520
in common so maybe you're looking for

352
00:12:31,900 --> 00:12:35,380
like privilege escalation what about a

353
00:12:33,520 --> 00:12:37,960
file that was written by an on system

354
00:12:35,380 --> 00:12:39,820
user that ran a system later like that

355
00:12:37,960 --> 00:12:41,740
sounds like professed to me there's

356
00:12:39,820 --> 00:12:42,790
potentially it could be adversarial it

357
00:12:41,740 --> 00:12:45,520
could just be software it's being

358
00:12:42,790 --> 00:12:47,290
installed this is how you could express

359
00:12:45,520 --> 00:12:49,449
that in eql and you can note that the

360
00:12:47,290 --> 00:12:51,490
file path from the file event is matched

361
00:12:49,450 --> 00:12:53,200
against the process path processes so

362
00:12:51,490 --> 00:12:56,200
you can do like those kind of sequel

363
00:12:53,200 --> 00:12:57,820
like joins in a way and speaking of

364
00:12:56,200 --> 00:12:59,230
there's also joint so sometimes you

365
00:12:57,820 --> 00:13:00,370
don't always know the order things

366
00:12:59,230 --> 00:13:03,010
happen but you know that they're gonna

367
00:13:00,370 --> 00:13:05,320
exist and so you could say I'm just

368
00:13:03,010 --> 00:13:07,390
looking for a pair of things or maybe

369
00:13:05,320 --> 00:13:09,880
five events that look a certain weight

370
00:13:07,390 --> 00:13:11,110
have things in common so this is that

371
00:13:09,880 --> 00:13:13,630
career it looks similar to the sequence

372
00:13:11,110 --> 00:13:15,850
but a little simpler one example is

373
00:13:13,630 --> 00:13:17,590
looking for a file event that created

374
00:13:15,850 --> 00:13:19,660
like a task and then a registry event

375
00:13:17,590 --> 00:13:21,930
creating a run once key so this would

376
00:13:19,660 --> 00:13:24,160
match only if both of those are met

377
00:13:21,930 --> 00:13:25,329
another example of a join would be maybe

378
00:13:24,160 --> 00:13:27,670
looking for like lateral movement

379
00:13:25,330 --> 00:13:29,830
between two hosts right so the source IP

380
00:13:27,670 --> 00:13:32,319
and the desk type P matching and then

381
00:13:29,830 --> 00:13:33,940
seeing those ports for RDP RPC in SMB

382
00:13:32,320 --> 00:13:37,570
which are those common windows built-in

383
00:13:33,940 --> 00:13:39,910
protocols for lateral movement we can

384
00:13:37,570 --> 00:13:43,180
also do stateful and really complex

385
00:13:39,910 --> 00:13:46,060
questions really easily and we using

386
00:13:43,180 --> 00:13:48,130
process lineage so I could say maybe I

387
00:13:46,060 --> 00:13:51,459
wanna look for a spearfishing document

388
00:13:48,130 --> 00:13:53,260
that came from office came from word

389
00:13:51,460 --> 00:13:54,700
then it was a power stall that reached

390
00:13:53,260 --> 00:13:56,620
out and made an overt connection I could

391
00:13:54,700 --> 00:13:58,690
actually express that just like this so

392
00:13:56,620 --> 00:13:59,980
it's a network event coming from

393
00:13:58,690 --> 00:14:03,100
PowerShell and it's a descendant of

394
00:13:59,980 --> 00:14:04,690
office and one of the final things we

395
00:14:03,100 --> 00:14:06,340
can do is we can actually sort through

396
00:14:04,690 --> 00:14:08,260
the data to find outliers so there's a

397
00:14:06,340 --> 00:14:09,670
handful of pipes already there if you

398
00:14:08,260 --> 00:14:11,290
wanted to you could even like fork the

399
00:14:09,670 --> 00:14:11,740
repo and extend them yourself want to

400
00:14:11,290 --> 00:14:14,260
add new

401
00:14:11,740 --> 00:14:16,930
chen allottee here's one example of

402
00:14:14,260 --> 00:14:19,030
pipes one question i thought was what

403
00:14:16,930 --> 00:14:21,069
processes are unique for a specific user

404
00:14:19,030 --> 00:14:22,390
so my thought was well there's a lot

405
00:14:21,070 --> 00:14:25,990
that are unique to systems let's just

406
00:14:22,390 --> 00:14:27,400
ignore that but for a particular user we

407
00:14:25,990 --> 00:14:28,840
could remove the duplicates and then

408
00:14:27,400 --> 00:14:30,430
count how many are left and then you've

409
00:14:28,840 --> 00:14:32,110
got like a distinct account and you see

410
00:14:30,430 --> 00:14:34,810
how many are matched to exactly one user

411
00:14:32,110 --> 00:14:36,070
um so that's like a bit of some of the

412
00:14:34,810 --> 00:14:42,400
features so now I'm gonna like to switch

413
00:14:36,070 --> 00:14:43,630
over to to a demo so here yes all right

414
00:14:42,400 --> 00:14:45,699
so let's run equal so it's got this

415
00:14:43,630 --> 00:14:48,640
built-in shell and so this is gonna run

416
00:14:45,700 --> 00:14:50,590
I can type in help to see what's

417
00:14:48,640 --> 00:14:52,210
available the first thing I want to do

418
00:14:50,590 --> 00:14:53,710
that was load that data set the case he

419
00:14:52,210 --> 00:14:56,740
gave me and so he just gave me this

420
00:14:53,710 --> 00:14:58,240
fantastic a tax data set we'll talk

421
00:14:56,740 --> 00:15:00,400
about that in just a minute so right now

422
00:14:58,240 --> 00:15:01,570
it's loading that set looking at all the

423
00:15:00,400 --> 00:15:03,340
events in there to figure out what the

424
00:15:01,570 --> 00:15:05,650
schema is right like what are the event

425
00:15:03,340 --> 00:15:08,530
types worth the fields what types are

426
00:15:05,650 --> 00:15:10,510
the fields and so it loaded that up and

427
00:15:08,530 --> 00:15:12,459
now it knows oh I've got processed

428
00:15:10,510 --> 00:15:15,280
events and here the fields so as I start

429
00:15:12,460 --> 00:15:16,870
typing a query it's actually Auto

430
00:15:15,280 --> 00:15:18,250
completing my queries and I can even

431
00:15:16,870 --> 00:15:22,090
like tap complete and syntax

432
00:15:18,250 --> 00:15:23,710
highlighting so I mean I think it's fun

433
00:15:22,090 --> 00:15:26,320
so right now here's just like the hello

434
00:15:23,710 --> 00:15:28,750
world query right look for a Who am I so

435
00:15:26,320 --> 00:15:30,160
we've got JSON output that's not super

436
00:15:28,750 --> 00:15:33,160
friendly to read it's kind of actually

437
00:15:30,160 --> 00:15:35,110
hard so maybe I'd have better luck

438
00:15:33,160 --> 00:15:37,150
looking at a table of this so we could

439
00:15:35,110 --> 00:15:40,210
pick the fields and those are again also

440
00:15:37,150 --> 00:15:42,430
Auto calculated and so we can see that

441
00:15:40,210 --> 00:15:44,290
table okay that's a lot friendlier so

442
00:15:42,430 --> 00:15:46,020
now I can actually imagine how you'd

443
00:15:44,290 --> 00:15:48,160
have a workflow you're going through

444
00:15:46,020 --> 00:15:49,569
running multiple queries in a row and

445
00:15:48,160 --> 00:15:52,120
seeing those results without needing to

446
00:15:49,570 --> 00:15:54,310
have to worry about like a back-end

447
00:15:52,120 --> 00:15:56,530
maybe if you just have that JSON file

448
00:15:54,310 --> 00:15:58,449
you can go I can also just ask

449
00:15:56,530 --> 00:15:59,550
high-level questions of the data how

450
00:15:58,450 --> 00:16:02,440
many events are there and there's

451
00:15:59,550 --> 00:16:05,530
350,000 maybe once you break down by

452
00:16:02,440 --> 00:16:08,370
event type just to see where the high

453
00:16:05,530 --> 00:16:11,040
volume is so right here there's a lot of

454
00:16:08,370 --> 00:16:13,360
image load events and file events

455
00:16:11,040 --> 00:16:14,920
process events aren't even 2% of this

456
00:16:13,360 --> 00:16:17,200
data and I'm and that's actually

457
00:16:14,920 --> 00:16:19,719
something that I care about so we're

458
00:16:17,200 --> 00:16:23,290
already gonna be focusing on those so if

459
00:16:19,720 --> 00:16:25,390
I go back from from this demo quick

460
00:16:23,290 --> 00:16:26,949
I'm gonna pass this over to Casey and he

461
00:16:25,390 --> 00:16:28,630
can tell us more about what's in this

462
00:16:26,950 --> 00:16:30,370
data set how I built it yeah so what you

463
00:16:28,630 --> 00:16:33,370
saw Ross was profiling a data set called

464
00:16:30,370 --> 00:16:35,140
fantastic red team's JSON and so what we

465
00:16:33,370 --> 00:16:37,990
wanted to do was an exercise to test

466
00:16:35,140 --> 00:16:39,580
some of our theories like about giving

467
00:16:37,990 --> 00:16:41,740
give Ross a dataset that he had not seen

468
00:16:39,580 --> 00:16:44,050
before and see if he could use equal to

469
00:16:41,740 --> 00:16:46,660
uncover a novel threat that I introduced

470
00:16:44,050 --> 00:16:48,579
into that endpoint so what was going on

471
00:16:46,660 --> 00:16:50,170
on this workstation we kept it small in

472
00:16:48,580 --> 00:16:52,780
terms to really focus on the power of

473
00:16:50,170 --> 00:16:54,250
the language but essentially we have an

474
00:16:52,780 --> 00:16:56,650
endpoint with system on installed with

475
00:16:54,250 --> 00:16:58,240
Windows we feel like it's a very good

476
00:16:56,650 --> 00:17:00,430
way to start learning how to express

477
00:16:58,240 --> 00:17:02,950
endpoint telemetry relationships or

478
00:17:00,430 --> 00:17:04,480
processes and other data types we wanted

479
00:17:02,950 --> 00:17:06,490
to introduce real background noise I let

480
00:17:04,480 --> 00:17:08,800
this run for a while and installed

481
00:17:06,490 --> 00:17:10,839
several tools on it and so that Ross

482
00:17:08,800 --> 00:17:12,250
would have to decide what was real what

483
00:17:10,839 --> 00:17:13,629
was false positive

484
00:17:12,250 --> 00:17:16,569
so in this data said there are really

485
00:17:13,630 --> 00:17:20,550
four things there's normal user activity

486
00:17:16,569 --> 00:17:23,530
there were some specific atomic tests I

487
00:17:20,550 --> 00:17:27,010
executed a real adversary emulation test

488
00:17:23,530 --> 00:17:29,649
and then I executed a test that to mine

489
00:17:27,010 --> 00:17:31,360
are saying no one has seen before so the

490
00:17:29,650 --> 00:17:33,010
Red Team objective in this situation so

491
00:17:31,360 --> 00:17:35,139
the in point we're targeting was a

492
00:17:33,010 --> 00:17:36,400
developer in point because they have a

493
00:17:35,140 --> 00:17:37,690
lot of neat tools and a lot of things

494
00:17:36,400 --> 00:17:39,940
that may be interesting for us to look

495
00:17:37,690 --> 00:17:41,530
at and so we wanted to the mission so to

496
00:17:39,940 --> 00:17:43,480
speak for this Red Team exercise was to

497
00:17:41,530 --> 00:17:46,480
go find a way to attack that system in a

498
00:17:43,480 --> 00:17:48,690
unique and novel way and I wanted to

499
00:17:46,480 --> 00:17:51,160
figure out could I actually find Casey

500
00:17:48,690 --> 00:17:52,540
could I find the red team so like

501
00:17:51,160 --> 00:17:54,610
there's the unknown attack there's a

502
00:17:52,540 --> 00:17:56,500
known attack could I also find the false

503
00:17:54,610 --> 00:17:59,949
positives and while avoiding all of that

504
00:17:56,500 --> 00:18:01,270
normal noise so going into that like

505
00:17:59,950 --> 00:18:03,490
what was the process that I had in

506
00:18:01,270 --> 00:18:05,770
general and the first thing is I need to

507
00:18:03,490 --> 00:18:07,030
get something to look at right so we

508
00:18:05,770 --> 00:18:09,220
need to gather some initial set up

509
00:18:07,030 --> 00:18:11,680
suspicious activity if you have alerts

510
00:18:09,220 --> 00:18:13,330
you can go off of those but this was all

511
00:18:11,680 --> 00:18:15,340
unknown data I didn't have anything to

512
00:18:13,330 --> 00:18:17,919
go off of and so I just said okay I'm

513
00:18:15,340 --> 00:18:19,360
not gonna cheat use any alerts so I want

514
00:18:17,920 --> 00:18:21,160
to figure out how to hunt how can I use

515
00:18:19,360 --> 00:18:24,070
those behavioral questions to look for

516
00:18:21,160 --> 00:18:25,840
evidence of a compromise and while doing

517
00:18:24,070 --> 00:18:28,600
that I need to refine my queries and try

518
00:18:25,840 --> 00:18:30,040
to reduce the data set till it's like a

519
00:18:28,600 --> 00:18:31,270
reasonable size like I need to be

520
00:18:30,040 --> 00:18:34,330
looking at this in my eyes to make a

521
00:18:31,270 --> 00:18:36,310
decision so I can't do that for 350,000

522
00:18:34,330 --> 00:18:38,080
events so we need

523
00:18:36,310 --> 00:18:40,690
get that down to a reasonable size I

524
00:18:38,080 --> 00:18:42,790
also wanted triage as I see results this

525
00:18:40,690 --> 00:18:44,770
s are these good or bad and part of that

526
00:18:42,790 --> 00:18:46,659
process also involves scoping like in

527
00:18:44,770 --> 00:18:48,129
this is this in a process tree that

528
00:18:46,660 --> 00:18:50,590
traces back to somewhere weird what

529
00:18:48,130 --> 00:18:53,890
happened next did identify what all the

530
00:18:50,590 --> 00:18:55,449
adversaries or Casey did and so that

531
00:18:53,890 --> 00:18:58,300
first step like if i'm gathering that

532
00:18:55,450 --> 00:18:59,830
suspicious activity what what's my

533
00:18:58,300 --> 00:19:01,480
approach what am i gonna do is so the

534
00:18:59,830 --> 00:19:03,970
thought is like i'm thinking first like

535
00:19:01,480 --> 00:19:06,250
what does he adversary do and what can i

536
00:19:03,970 --> 00:19:08,140
do in response what can I look for so

537
00:19:06,250 --> 00:19:09,280
like the first thing is like an attacker

538
00:19:08,140 --> 00:19:12,670
is probably going to need to survive

539
00:19:09,280 --> 00:19:14,139
reboots so they're gonna need to make it

540
00:19:12,670 --> 00:19:16,720
persistence so I could look for new

541
00:19:14,140 --> 00:19:18,730
persistence locations but at the same

542
00:19:16,720 --> 00:19:19,840
time if I'm looking they're hiding right

543
00:19:18,730 --> 00:19:22,810
so they're gonna try to hide from my

544
00:19:19,840 --> 00:19:25,360
defenses so are there potentially like

545
00:19:22,810 --> 00:19:27,310
unusual parent-child relationships like

546
00:19:25,360 --> 00:19:30,550
they're using an SVC host to hide like

547
00:19:27,310 --> 00:19:33,310
that example earlier or were there other

548
00:19:30,550 --> 00:19:34,629
attempts to blend in because they want

549
00:19:33,310 --> 00:19:38,740
me to think that things are normal and

550
00:19:34,630 --> 00:19:40,690
operating right but eventually if

551
00:19:38,740 --> 00:19:42,760
there's any hands on keyboard is gonna

552
00:19:40,690 --> 00:19:44,830
need to be some call back at some point

553
00:19:42,760 --> 00:19:47,740
either whether that's DNS or network

554
00:19:44,830 --> 00:19:50,500
traffic or something else and so I can

555
00:19:47,740 --> 00:19:51,400
ask like what processes started making

556
00:19:50,500 --> 00:19:54,280
network connections maybe for the first

557
00:19:51,400 --> 00:19:55,750
time what's new or was there like

558
00:19:54,280 --> 00:19:56,860
outgoing lateral movement to a host and

559
00:19:55,750 --> 00:19:59,080
so like those are some of the questions

560
00:19:56,860 --> 00:20:00,879
I'm thinking of in my head as to guide

561
00:19:59,080 --> 00:20:03,639
my approach for this so I'm kind of

562
00:20:00,880 --> 00:20:05,380
using those adversary goals with things

563
00:20:03,640 --> 00:20:07,480
that are relevant to my environment and

564
00:20:05,380 --> 00:20:09,130
that's helped me avoid things that are

565
00:20:07,480 --> 00:20:11,950
universally evil we're already

566
00:20:09,130 --> 00:20:14,170
contextualized and it saves Sue's us a

567
00:20:11,950 --> 00:20:15,760
lot of effort so the first thing I

568
00:20:14,170 --> 00:20:18,370
thought was like okay

569
00:20:15,760 --> 00:20:20,379
knowing atomic read team a good bit like

570
00:20:18,370 --> 00:20:23,020
a lot of us using built-in windows tools

571
00:20:20,380 --> 00:20:25,210
maybe some were renamed maybe he thought

572
00:20:23,020 --> 00:20:26,800
my command lines weren't that great or I

573
00:20:25,210 --> 00:20:29,820
was a little too brittle to overfit it

574
00:20:26,800 --> 00:20:32,350
so maybe Casey renamed a tool so I used

575
00:20:29,820 --> 00:20:33,669
Nordic we're looking for the original

576
00:20:32,350 --> 00:20:38,110
file name inside that PE header

577
00:20:33,670 --> 00:20:39,370
mismatching what's on disk and just for

578
00:20:38,110 --> 00:20:42,669
a handful of known tools that have been

579
00:20:39,370 --> 00:20:43,929
renamed before and then just removed any

580
00:20:42,670 --> 00:20:45,910
duplicates because I don't need to see

581
00:20:43,930 --> 00:20:47,860
every single time it runs so I try that

582
00:20:45,910 --> 00:20:49,390
I didn't find any results so I had to

583
00:20:47,860 --> 00:20:49,830
like back up again it's like okay well

584
00:20:49,390 --> 00:20:51,450
nothing

585
00:20:49,830 --> 00:20:53,820
was renamed maybe something was actually

586
00:20:51,450 --> 00:20:55,500
used so maybe those no and binary it's

587
00:20:53,820 --> 00:20:58,200
like that it's all Utila MSHDA

588
00:20:55,500 --> 00:21:01,260
maybe they made callbacks so I look for

589
00:20:58,200 --> 00:21:04,110
a sequence in equal to say give me the

590
00:21:01,260 --> 00:21:06,480
process event for any of these known

591
00:21:04,110 --> 00:21:08,100
tools but also it had to make a network

592
00:21:06,480 --> 00:21:09,960
event and by converting this to a

593
00:21:08,100 --> 00:21:11,370
sequence I have the command line and the

594
00:21:09,960 --> 00:21:14,100
destination IP at the same time that's

595
00:21:11,370 --> 00:21:16,199
kind of nice for for triaging so I had

596
00:21:14,100 --> 00:21:18,090
actually had eight results and this is

597
00:21:16,200 --> 00:21:19,230
like the first page of results but

598
00:21:18,090 --> 00:21:21,418
before diving into that I'm going to

599
00:21:19,230 --> 00:21:23,789
back up again so that what's our process

600
00:21:21,419 --> 00:21:26,279
for triaging then however my determining

601
00:21:23,789 --> 00:21:28,080
what's good what's bad some of those

602
00:21:26,279 --> 00:21:31,019
questions they're like is the path

603
00:21:28,080 --> 00:21:33,750
formal is this looking like a Windows

604
00:21:31,019 --> 00:21:38,370
binary but maybe like but not quite like

605
00:21:33,750 --> 00:21:41,610
L SAS with 3 s's I guess before or like

606
00:21:38,370 --> 00:21:43,379
was it signed if something signed by not

607
00:21:41,610 --> 00:21:44,760
signed by Google up by Google but

608
00:21:43,380 --> 00:21:47,669
claiming to be Google update you should

609
00:21:44,760 --> 00:21:48,990
probably take a look or if it was a

610
00:21:47,669 --> 00:21:50,880
legitimate product that's probably gonna

611
00:21:48,990 --> 00:21:53,070
tear my hand more towards like this is a

612
00:21:50,880 --> 00:21:54,510
false positive and if something's been

613
00:21:53,070 --> 00:21:56,129
publicly reported you should always make

614
00:21:54,510 --> 00:21:57,570
that like that's an urgent it's kind of

615
00:21:56,130 --> 00:21:59,370
a no-brainer

616
00:21:57,570 --> 00:22:00,840
so coming back to those results I

617
00:21:59,370 --> 00:22:02,820
actually saw a lot of atomic red team in

618
00:22:00,840 --> 00:22:04,918
there and so I was like okay I can

619
00:22:02,820 --> 00:22:06,330
assess this I we know that we did an

620
00:22:04,919 --> 00:22:07,470
atomic test because in your environment

621
00:22:06,330 --> 00:22:09,299
you're probably knowing when you're

622
00:22:07,470 --> 00:22:11,909
doing your own testing so I can mark

623
00:22:09,299 --> 00:22:13,168
that that's good that's clean you know

624
00:22:11,909 --> 00:22:15,389
there's the Amazon assistant thing at

625
00:22:13,169 --> 00:22:17,789
the top and I did some research it

626
00:22:15,389 --> 00:22:19,408
actually does use MSHDA under the hood

627
00:22:17,789 --> 00:22:21,330
and make network connections so if you

628
00:22:19,409 --> 00:22:23,429
try to make a detection like this you're

629
00:22:21,330 --> 00:22:26,100
probably run to this F P as well so

630
00:22:23,429 --> 00:22:27,990
we're still one left but there's still

631
00:22:26,100 --> 00:22:29,730
more results to get to as well so you

632
00:22:27,990 --> 00:22:31,860
see more atomic Red Team at the top I

633
00:22:29,730 --> 00:22:34,130
was like okay we can whitelist that we

634
00:22:31,860 --> 00:22:37,019
kind of nobody Tom tested it matched up

635
00:22:34,130 --> 00:22:38,610
and then there's also some Microsoft's

636
00:22:37,019 --> 00:22:39,990
and legit windows reaching out to things

637
00:22:38,610 --> 00:22:41,879
that it normally reaches out to me so I

638
00:22:39,990 --> 00:22:43,230
ruled that out so now I have a few

639
00:22:41,880 --> 00:22:45,899
results left we've already reduced that

640
00:22:43,230 --> 00:22:47,070
said down to four things so now let's

641
00:22:45,899 --> 00:22:49,889
start pulling some threads I'm gonna

642
00:22:47,070 --> 00:22:51,600
pick that power show up first so for

643
00:22:49,889 --> 00:22:52,979
that power saw command I'm wondering

644
00:22:51,600 --> 00:22:55,350
amid a network connection but what else

645
00:22:52,980 --> 00:22:56,789
to do so like were there any other

646
00:22:55,350 --> 00:22:59,730
descendant processes from that

647
00:22:56,789 --> 00:23:01,379
PowerShell and so with equal I just said

648
00:22:59,730 --> 00:23:03,240
was there any descendant events any

649
00:23:01,380 --> 00:23:06,300
processes from that PowerShell

650
00:23:03,240 --> 00:23:09,600
me the network connection and I actually

651
00:23:06,300 --> 00:23:12,450
have 43 results like okay since it's

652
00:23:09,600 --> 00:23:14,370
gonna be fun so buckle up so here's some

653
00:23:12,450 --> 00:23:15,809
other results but thankfully their

654
00:23:14,370 --> 00:23:17,879
atomic red team as you can see I've

655
00:23:15,809 --> 00:23:19,889
bolded it in this event this validates

656
00:23:17,880 --> 00:23:21,540
backed like was this our actual testing

657
00:23:19,890 --> 00:23:21,929
yes and we can go through like the full

658
00:23:21,540 --> 00:23:24,899
page

659
00:23:21,929 --> 00:23:26,670
all of this was atomic testing so I'm at

660
00:23:24,900 --> 00:23:29,460
this point you can say like the power

661
00:23:26,670 --> 00:23:31,170
sub process is atomic so we can rule

662
00:23:29,460 --> 00:23:32,790
that out but there's still the next

663
00:23:31,170 --> 00:23:35,309
thing I left this invoke mimikatz maybe

664
00:23:32,790 --> 00:23:36,659
I probably should have started there so

665
00:23:35,309 --> 00:23:37,860
let's look at that and see what's going

666
00:23:36,660 --> 00:23:41,190
on here and it reads straight out to

667
00:23:37,860 --> 00:23:43,559
github IX it's like this looks totally

668
00:23:41,190 --> 00:23:45,570
fine so where'd this come from what

669
00:23:43,559 --> 00:23:48,240
loaded this powerful process who caused

670
00:23:45,570 --> 00:23:51,360
this to execute so I usually equal C

671
00:23:48,240 --> 00:23:53,309
sequence to say give me a process event

672
00:23:51,360 --> 00:23:55,830
take it spit and match that to the peep

673
00:23:53,309 --> 00:23:56,610
it of the Power Cell processor random

674
00:23:55,830 --> 00:23:58,649
ocarina cats

675
00:23:56,610 --> 00:24:00,330
so I ran that I got one result so that

676
00:23:58,650 --> 00:24:02,550
one results the pair right we have the

677
00:24:00,330 --> 00:24:05,340
parent plus a child and this is what it

678
00:24:02,550 --> 00:24:07,260
was the parent was of course atomic read

679
00:24:05,340 --> 00:24:10,260
TV it can be really loud if you have

680
00:24:07,260 --> 00:24:11,730
like good detection to place okay so

681
00:24:10,260 --> 00:24:12,629
that's good we can rule that out there's

682
00:24:11,730 --> 00:24:15,720
still one left

683
00:24:12,630 --> 00:24:18,270
this install util coming from Explorer

684
00:24:15,720 --> 00:24:20,220
which itself is kind of odd and then

685
00:24:18,270 --> 00:24:21,450
making a network connection like how do

686
00:24:20,220 --> 00:24:22,740
you get that command line coming from

687
00:24:21,450 --> 00:24:27,210
Explorer something that I'm also

688
00:24:22,740 --> 00:24:28,500
wondering so what is that but then Casey

689
00:24:27,210 --> 00:24:30,390
said earlier there was like some

690
00:24:28,500 --> 00:24:32,460
adversary emulation and this is a known

691
00:24:30,390 --> 00:24:33,690
technique so this is that adversary

692
00:24:32,460 --> 00:24:36,630
emulation so this is known Red Team

693
00:24:33,690 --> 00:24:37,679
behavior so moving on I was like okay

694
00:24:36,630 --> 00:24:39,270
fine a lot of PowerShell

695
00:24:37,679 --> 00:24:41,100
what other PowerShell commands were

696
00:24:39,270 --> 00:24:43,710
there so it's like what PowerShell

697
00:24:41,100 --> 00:24:45,090
commands were run with any arguments

698
00:24:43,710 --> 00:24:47,700
like at least one argument

699
00:24:45,090 --> 00:24:49,350
besides that PowerShell so I just did

700
00:24:47,700 --> 00:24:50,820
like star space star like there's a

701
00:24:49,350 --> 00:24:53,309
space somewhere in there so there's

702
00:24:50,820 --> 00:24:54,960
arguments and just like remove the

703
00:24:53,309 --> 00:24:56,129
duplicates and tell me how many see per

704
00:24:54,960 --> 00:25:00,300
command line so I actually found three

705
00:24:56,130 --> 00:25:02,400
unique results that way once again we

706
00:25:00,300 --> 00:25:03,840
look to see atomic Red Team all over so

707
00:25:02,400 --> 00:25:06,870
like okay cool this is great we have

708
00:25:03,840 --> 00:25:08,100
visibility into atomic Red Team but I

709
00:25:06,870 --> 00:25:10,139
didn't find anything so I'm still trying

710
00:25:08,100 --> 00:25:11,610
to figure out what's going on I was like

711
00:25:10,140 --> 00:25:14,130
okay maybe I can bring back that

712
00:25:11,610 --> 00:25:16,449
question earlier maybe Casey's new novel

713
00:25:14,130 --> 00:25:22,090
technique is pros escalation so maybe

714
00:25:16,450 --> 00:25:24,460
drop the file did some crazy not magic

715
00:25:22,090 --> 00:25:26,470
to get it to run a system so we can take

716
00:25:24,460 --> 00:25:28,630
that example earlier from our sequence

717
00:25:26,470 --> 00:25:31,720
and look for a file event created by non

718
00:25:28,630 --> 00:25:33,850
system user but then ran a system but

719
00:25:31,720 --> 00:25:35,860
that's not work either so there could be

720
00:25:33,850 --> 00:25:39,899
a pro best technique but this didn't

721
00:25:35,860 --> 00:25:43,270
find it maybe though maybe there's still

722
00:25:39,900 --> 00:25:44,890
some new type of situ so maybe some

723
00:25:43,270 --> 00:25:46,480
process reached out made a network

724
00:25:44,890 --> 00:25:48,610
connection for the first time oh that's

725
00:25:46,480 --> 00:25:50,530
a new processor old I don't know and so

726
00:25:48,610 --> 00:25:54,129
I was like just for every network

727
00:25:50,530 --> 00:25:57,190
connection tell me the 15 most recent

728
00:25:54,130 --> 00:26:00,370
ones to make their first network and of

729
00:25:57,190 --> 00:26:02,020
course that returned 15 results so

730
00:26:00,370 --> 00:26:04,149
there's a lot here but I'll save you the

731
00:26:02,020 --> 00:26:06,550
pain a lot of these from Microsoft and

732
00:26:04,150 --> 00:26:08,770
Visual Studio and all that checked out

733
00:26:06,550 --> 00:26:10,360
so there's still a few left I looked at

734
00:26:08,770 --> 00:26:12,850
another page of results the remaining

735
00:26:10,360 --> 00:26:15,340
seven or eight and that's more Visual

736
00:26:12,850 --> 00:26:18,010
Studio and its Visual Studio reaching

737
00:26:15,340 --> 00:26:19,659
out to Microsoft servers that have like

738
00:26:18,010 --> 00:26:21,340
Microsoft cert since like ok this is

739
00:26:19,660 --> 00:26:22,960
Microsoft doing Microsoft things it's

740
00:26:21,340 --> 00:26:24,699
like we could go down that rabbit hole

741
00:26:22,960 --> 00:26:26,800
but if there's something else here I'm

742
00:26:24,700 --> 00:26:30,190
just wasting my time stick ok this is

743
00:26:26,800 --> 00:26:31,899
Visual Studio so we still just a few

744
00:26:30,190 --> 00:26:33,490
results left but that install util we

745
00:26:31,900 --> 00:26:35,560
already saw earlier we said that was

746
00:26:33,490 --> 00:26:37,300
probably that adversary emulation Red

747
00:26:35,560 --> 00:26:40,600
Team so now I'm wondering what's this

748
00:26:37,300 --> 00:26:42,040
debug serve and you know notepad making

749
00:26:40,600 --> 00:26:43,959
a network connection I don't think

750
00:26:42,040 --> 00:26:46,210
that's normal functionality I think

751
00:26:43,960 --> 00:26:47,350
there's a something going on here so I'm

752
00:26:46,210 --> 00:26:49,990
trying to figure out where did this

753
00:26:47,350 --> 00:26:54,550
notepad come from and what the hell is

754
00:26:49,990 --> 00:26:55,870
going on so wise notepad making network

755
00:26:54,550 --> 00:26:58,480
connection so I wrote an equal query

756
00:26:55,870 --> 00:27:00,189
looking for notepad making a process

757
00:26:58,480 --> 00:27:01,330
event and then your network connection

758
00:27:00,190 --> 00:27:03,640
so now I've got the command line the

759
00:27:01,330 --> 00:27:06,520
parent plus the destination port this is

760
00:27:03,640 --> 00:27:07,870
like everything I think I need but

761
00:27:06,520 --> 00:27:09,310
actually found two results here so

762
00:27:07,870 --> 00:27:11,889
before it was unique to now we can see

763
00:27:09,310 --> 00:27:14,980
all of them and we see the parent

764
00:27:11,890 --> 00:27:18,040
process path this debug serve I think we

765
00:27:14,980 --> 00:27:20,860
saw that a second ago so what else did

766
00:27:18,040 --> 00:27:22,870
this debug serve do or dbg survey I

767
00:27:20,860 --> 00:27:25,959
don't know what some folks are yet

768
00:27:22,870 --> 00:27:27,280
what else did it do so I used an equal

769
00:27:25,960 --> 00:27:28,540
query we can actually search multiple

770
00:27:27,280 --> 00:27:30,310
that types at once

771
00:27:28,540 --> 00:27:31,810
so if use like any event type

772
00:27:30,310 --> 00:27:33,220
we'll search anything and then there's a

773
00:27:31,810 --> 00:27:34,810
field called a vet type so I can say

774
00:27:33,220 --> 00:27:37,270
anywhere event type is a process network

775
00:27:34,810 --> 00:27:39,250
bot registry and the process name was

776
00:27:37,270 --> 00:27:41,050
debug serve and then I don't really all

777
00:27:39,250 --> 00:27:43,620
just get the first one for each and so I

778
00:27:41,050 --> 00:27:45,700
unique them so there's seven results

779
00:27:43,620 --> 00:27:47,889
there's a handful of different pits here

780
00:27:45,700 --> 00:27:48,880
so this happened multiple times as I

781
00:27:47,890 --> 00:27:50,470
looked at the first one I see the

782
00:27:48,880 --> 00:27:53,040
command line actually matches with the

783
00:27:50,470 --> 00:27:55,330
network connection so okay there's

784
00:27:53,040 --> 00:27:57,850
network traffic and it lines up with

785
00:27:55,330 --> 00:27:59,860
that but it came from Explorer again how

786
00:27:57,850 --> 00:28:01,449
does how does Explorer have this full

787
00:27:59,860 --> 00:28:04,600
command line is that a shortcut is it

788
00:28:01,450 --> 00:28:06,640
Thomas is something else going on but

789
00:28:04,600 --> 00:28:11,350
then at the bottom we see this remote

790
00:28:06,640 --> 00:28:13,030
debug msdnaa comm happened twice no

791
00:28:11,350 --> 00:28:14,520
network but then eventually it did make

792
00:28:13,030 --> 00:28:17,410
a network connection back to the same IP

793
00:28:14,520 --> 00:28:19,510
so at this point I'm like what's going

794
00:28:17,410 --> 00:28:21,520
on why is this reaching out to port 22

795
00:28:19,510 --> 00:28:23,080
why is notepad a child process why is

796
00:28:21,520 --> 00:28:25,090
this making a network connection just

797
00:28:23,080 --> 00:28:26,409
what's going I think I found the new

798
00:28:25,090 --> 00:28:28,780
technique but I don't know what I'm

799
00:28:26,410 --> 00:28:31,360
looking at so KC can you tell us yeah

800
00:28:28,780 --> 00:28:33,250
yeah so that was like as we went as we

801
00:28:31,360 --> 00:28:34,899
worked through that data set that was an

802
00:28:33,250 --> 00:28:36,370
interesting thing so I want to talk a

803
00:28:34,900 --> 00:28:38,050
little bit about what debug serve is why

804
00:28:36,370 --> 00:28:39,189
it would be interesting and really the

805
00:28:38,050 --> 00:28:40,750
story though it's not necessarily about

806
00:28:39,190 --> 00:28:42,010
the novelty of a new attack it's really

807
00:28:40,750 --> 00:28:44,620
about how we were able to find that with

808
00:28:42,010 --> 00:28:46,180
equals so pretty interesting tool some

809
00:28:44,620 --> 00:28:47,530
of you may have heard of it before in my

810
00:28:46,180 --> 00:28:50,110
research though I haven't found anybody

811
00:28:47,530 --> 00:28:51,220
using this in a malicious way but it

812
00:28:50,110 --> 00:28:53,169
could certainly be used this way on

813
00:28:51,220 --> 00:28:54,880
constraint system so functionally it

814
00:28:53,170 --> 00:28:57,040
gives you the capability of a reverse

815
00:28:54,880 --> 00:28:59,290
TCP connection and then you're able to

816
00:28:57,040 --> 00:29:00,310
remotely debug a process and that's

817
00:28:59,290 --> 00:29:02,139
functionally equivalent to like

818
00:29:00,310 --> 00:29:04,570
whitelist evasion and process hollowing

819
00:29:02,140 --> 00:29:06,790
did talk with MS RFC about this and

820
00:29:04,570 --> 00:29:08,080
again this is a binary working as design

821
00:29:06,790 --> 00:29:10,300
it's not an exploit it's also not

822
00:29:08,080 --> 00:29:12,189
default but it's super interesting for

823
00:29:10,300 --> 00:29:13,629
potentially an attacker targeting a

824
00:29:12,190 --> 00:29:15,850
developer system because it may already

825
00:29:13,630 --> 00:29:18,760
be there so I was trying to find a

826
00:29:15,850 --> 00:29:20,199
debugger tool or some tool that was

827
00:29:18,760 --> 00:29:22,120
already installed on a developer system

828
00:29:20,200 --> 00:29:23,860
that he that it would be abused in a way

829
00:29:22,120 --> 00:29:25,570
that he hasn't seen so I started looking

830
00:29:23,860 --> 00:29:26,949
at tools that were installed when I set

831
00:29:25,570 --> 00:29:29,230
up the data set like visual studio

832
00:29:26,950 --> 00:29:30,520
debugger tools and then I was reading

833
00:29:29,230 --> 00:29:32,530
through MSD and really just went to the

834
00:29:30,520 --> 00:29:33,790
director had started asking myself what

835
00:29:32,530 --> 00:29:35,590
is each of these tools that's already on

836
00:29:33,790 --> 00:29:37,600
this dev system and how could I use it

837
00:29:35,590 --> 00:29:40,000
to execute code really was the question

838
00:29:37,600 --> 00:29:41,980
and so you see two commands you see the

839
00:29:40,000 --> 00:29:43,040
server side in this situation I just

840
00:29:41,980 --> 00:29:44,960
bought notepad

841
00:29:43,040 --> 00:29:46,909
testing the the theory here but you

842
00:29:44,960 --> 00:29:49,010
could also spawn you could attach to

843
00:29:46,910 --> 00:29:51,380
another process or you could attach to a

844
00:29:49,010 --> 00:29:52,580
kid and you can see on the client side

845
00:29:51,380 --> 00:29:55,280
we can see where there's a connection

846
00:29:52,580 --> 00:29:56,750
made network connection made back using

847
00:29:55,280 --> 00:29:59,120
the arbitrary port now you can use

848
00:29:56,750 --> 00:30:00,650
domain names etc so so how would an

849
00:29:59,120 --> 00:30:02,419
attacker actually abuse this so once

850
00:30:00,650 --> 00:30:05,390
they get debug served to execute on the

851
00:30:02,420 --> 00:30:07,790
target now you can use a debugger a

852
00:30:05,390 --> 00:30:09,260
couple of debugger commands and this can

853
00:30:07,790 --> 00:30:10,460
be automated I'll take you through it in

854
00:30:09,260 --> 00:30:12,500
a manual process but it's kind of

855
00:30:10,460 --> 00:30:14,120
interesting because once I get control

856
00:30:12,500 --> 00:30:16,910
for that system from a trusted signed

857
00:30:14,120 --> 00:30:19,669
binary I can simply allocate a region in

858
00:30:16,910 --> 00:30:21,320
memory DV Alec I can then load my

859
00:30:19,670 --> 00:30:23,030
shellcode to the address that I get back

860
00:30:21,320 --> 00:30:25,370
from DV Alec change the instruction

861
00:30:23,030 --> 00:30:27,830
pointer and execute the code so all

862
00:30:25,370 --> 00:30:29,419
within the constraints of a V trusted

863
00:30:27,830 --> 00:30:31,370
process or a process that I've attached

864
00:30:29,420 --> 00:30:35,540
to remotely so let's take a look at a

865
00:30:31,370 --> 00:30:36,919
demo of this again the the code here

866
00:30:35,540 --> 00:30:39,350
some of this is going to be manual copy

867
00:30:36,920 --> 00:30:41,510
and paste really just for demonstration

868
00:30:39,350 --> 00:30:44,030
so that it's clear what I'm doing

869
00:30:41,510 --> 00:30:46,160
since we're setting up a server to

870
00:30:44,030 --> 00:30:47,300
receive our shellcode callback so we'll

871
00:30:46,160 --> 00:30:48,980
go ahead and set up this box here

872
00:30:47,300 --> 00:30:51,290
there's really three systems in play the

873
00:30:48,980 --> 00:30:55,250
attacker Kali box and then we'll have

874
00:30:51,290 --> 00:30:56,450
two systems the newt's box or the target

875
00:30:55,250 --> 00:30:58,970
essentially so here we're gonna see

876
00:30:56,450 --> 00:31:01,310
we're gonna run debug serve here and

877
00:30:58,970 --> 00:31:03,560
we're going to then catch the callback

878
00:31:01,310 --> 00:31:05,929
you can see debug serve is not running

879
00:31:03,560 --> 00:31:07,280
neither is notepad currently and here we

880
00:31:05,930 --> 00:31:11,150
are we're gonna receive the connection

881
00:31:07,280 --> 00:31:12,410
from new to developer workstation so got

882
00:31:11,150 --> 00:31:14,240
our session running everything is

883
00:31:12,410 --> 00:31:15,680
confirmed now we're gonna go ahead and

884
00:31:14,240 --> 00:31:17,240
launch the attack so here I was trying

885
00:31:15,680 --> 00:31:18,950
to break I thought Ross might try and

886
00:31:17,240 --> 00:31:20,450
hunt for weird process relationship so I

887
00:31:18,950 --> 00:31:22,550
was trying to change that I was using

888
00:31:20,450 --> 00:31:24,950
com object so actually ran this with a

889
00:31:22,550 --> 00:31:26,780
script host and then I chained it up to

890
00:31:24,950 --> 00:31:29,150
Explorer instead of being chained up to

891
00:31:26,780 --> 00:31:30,440
see script or W script and that effect

892
00:31:29,150 --> 00:31:32,510
you still found it but essentially we

893
00:31:30,440 --> 00:31:35,450
see debug server is now running and we

894
00:31:32,510 --> 00:31:37,160
see notepad running in pit 4380 so if

895
00:31:35,450 --> 00:31:39,200
you've worked with debuggers before this

896
00:31:37,160 --> 00:31:41,360
is now on my attacker controlled system

897
00:31:39,200 --> 00:31:43,070
and i'm going to direct commands down

898
00:31:41,360 --> 00:31:44,570
into the target so pretty interesting

899
00:31:43,070 --> 00:31:46,730
capability first we'll go ahead and

900
00:31:44,570 --> 00:31:48,919
break point in the process notepad we're

901
00:31:46,730 --> 00:31:51,320
working on drop-in DV alec he gives us a

902
00:31:48,920 --> 00:31:52,790
read write execute region and then we'll

903
00:31:51,320 --> 00:31:54,620
go ahead and take the address we get

904
00:31:52,790 --> 00:31:56,190
back like I said all of this can be

905
00:31:54,620 --> 00:31:58,289
fully automated I just wanted to

906
00:31:56,190 --> 00:31:59,730
clear about what what the commands were

907
00:31:58,289 --> 00:32:02,039
doing so we're gonna load our shellcode

908
00:31:59,730 --> 00:32:03,840
remotely change the instruction pointer

909
00:32:02,039 --> 00:32:06,360
just like you would do in various

910
00:32:03,840 --> 00:32:08,580
debugging capacities and then execute or

911
00:32:06,360 --> 00:32:10,350
call back so at this point now we've

912
00:32:08,580 --> 00:32:12,960
piped our shellcode down into notepad a

913
00:32:10,350 --> 00:32:16,110
trusted process from deeper debug server

914
00:32:12,960 --> 00:32:18,059
also trusted there we see pid' 4380 just

915
00:32:16,110 --> 00:32:20,969
to go back and confirm that our callback

916
00:32:18,059 --> 00:32:22,350
came in from that particular host we'll

917
00:32:20,970 --> 00:32:24,120
just go and look at our sessions and

918
00:32:22,350 --> 00:32:26,699
confirm that the paid is where we

919
00:32:24,120 --> 00:32:27,840
thought we'd landed and from here you

920
00:32:26,700 --> 00:32:30,360
have a lot of options you could migrate

921
00:32:27,840 --> 00:32:32,428
you could do different things so that

922
00:32:30,360 --> 00:32:33,870
was really the story there was you know

923
00:32:32,429 --> 00:32:36,149
find something that no one has seen

924
00:32:33,870 --> 00:32:38,610
before and see if these detection

925
00:32:36,149 --> 00:32:41,219
methodologies and queries still lead you

926
00:32:38,610 --> 00:32:43,799
back to the trail so again really the

927
00:32:41,220 --> 00:32:46,110
story here is not necessarily the the

928
00:32:43,799 --> 00:32:48,090
power of debug SAR being needed novel

929
00:32:46,110 --> 00:32:49,769
it's how could you find that using these

930
00:32:48,090 --> 00:32:52,350
methodologies and query language that

931
00:32:49,769 --> 00:32:54,659
Ross just took us through so if you want

932
00:32:52,350 --> 00:32:56,158
a specific detection for debug serve you

933
00:32:54,659 --> 00:32:57,690
can see we've got a sequence here where

934
00:32:56,159 --> 00:32:59,580
we're looking for things like any

935
00:32:57,690 --> 00:33:01,230
process with a named debug serve or

936
00:32:59,580 --> 00:33:02,699
original file name attackers might

937
00:33:01,230 --> 00:33:05,070
choose to rename it

938
00:33:02,700 --> 00:33:06,870
outbound network connections and child

939
00:33:05,070 --> 00:33:11,250
processes or cross process communication

940
00:33:06,870 --> 00:33:14,158
so but what roster goes through was

941
00:33:11,250 --> 00:33:16,470
pretty manual so if we if we're going to

942
00:33:14,159 --> 00:33:19,049
do this at scale how would we actually

943
00:33:16,470 --> 00:33:21,000
find some of these things with larger

944
00:33:19,049 --> 00:33:22,080
data sets and a larger volume so I'll

945
00:33:21,000 --> 00:33:23,909
let Ross take a little bit take us

946
00:33:22,080 --> 00:33:26,699
through like how you might find these at

947
00:33:23,909 --> 00:33:29,159
scale with equal I think's Casey so

948
00:33:26,700 --> 00:33:30,750
we've got a lot of analytics just like

949
00:33:29,159 --> 00:33:31,590
that one that we've compiled together

950
00:33:30,750 --> 00:33:33,269
into a library

951
00:33:31,590 --> 00:33:37,080
so even library of analytics written in

952
00:33:33,269 --> 00:33:39,929
eql and like that schema we saw earlier

953
00:33:37,080 --> 00:33:42,059
it wasn't totally anything it wasn't sis

954
00:33:39,929 --> 00:33:44,309
mam so we've got our own schema there

955
00:33:42,059 --> 00:33:46,230
and you can normalize to it everything's

956
00:33:44,309 --> 00:33:47,759
mapped to attack as well so the cool

957
00:33:46,230 --> 00:33:48,960
thing about that is like if let's say

958
00:33:47,759 --> 00:33:51,299
you're not using system on and you're

959
00:33:48,960 --> 00:33:54,870
using something else you just tell it oh

960
00:33:51,299 --> 00:33:57,480
this field goes to there and it over in

961
00:33:54,870 --> 00:33:59,370
your career on their data set anyway and

962
00:33:57,480 --> 00:34:02,610
so one example of an analytic in this

963
00:33:59,370 --> 00:34:03,719
library like that debug serve one this

964
00:34:02,610 --> 00:34:06,469
is what that would look like this is a

965
00:34:03,720 --> 00:34:08,960
looking for debug serve remote debugger

966
00:34:06,470 --> 00:34:10,970
the technique here that's tagged within

967
00:34:08,960 --> 00:34:12,230
is that trusted developer utilities and

968
00:34:10,969 --> 00:34:13,609
then on the right we can see there's the

969
00:34:12,230 --> 00:34:15,050
sequence there's that query that we ran

970
00:34:13,609 --> 00:34:16,940
so we've got all the sequence tied to

971
00:34:15,050 --> 00:34:18,290
metadata and the cool thing about that

972
00:34:16,940 --> 00:34:20,240
is that we can actually take all of

973
00:34:18,290 --> 00:34:21,440
these and just run them at once like all

974
00:34:20,239 --> 00:34:23,658
those things I asked earlier it's like

975
00:34:21,440 --> 00:34:25,220
let's just Rich's run like those types

976
00:34:23,659 --> 00:34:27,139
of queries and so I just ran a ton of

977
00:34:25,219 --> 00:34:30,918
them on on a data set and this is the

978
00:34:27,139 --> 00:34:32,570
type of results you'll see but like

979
00:34:30,918 --> 00:34:34,580
earlier we'll still run into false

980
00:34:32,570 --> 00:34:36,440
positives right so these aren't always

981
00:34:34,580 --> 00:34:39,319
finely tuned and some of those you have

982
00:34:36,440 --> 00:34:40,609
to tailor to your environment so we have

983
00:34:39,320 --> 00:34:43,730
to get a good sense of how do you

984
00:34:40,609 --> 00:34:45,649
identify true and false positives so if

985
00:34:43,730 --> 00:34:47,119
you if you do want to take take any of

986
00:34:45,649 --> 00:34:49,819
these lessons and turn them into like

987
00:34:47,119 --> 00:34:51,440
those highly actionable your positives

988
00:34:49,820 --> 00:34:52,909
you're probably want a good baseline of

989
00:34:51,440 --> 00:34:54,859
your environment and you want to update

990
00:34:52,909 --> 00:34:56,990
that regularly like what sugar this

991
00:34:54,859 --> 00:34:58,339
detection before and how has that

992
00:34:56,989 --> 00:35:00,229
changed since the last time so you're

993
00:34:58,339 --> 00:35:02,980
looking at those deltas understanding

994
00:35:00,230 --> 00:35:05,810
change and then also paying attention to

995
00:35:02,980 --> 00:35:07,130
what shows up multiple times like we saw

996
00:35:05,810 --> 00:35:08,869
a debug server meaning network but also

997
00:35:07,130 --> 00:35:10,940
notepad like neither of them had ever

998
00:35:08,869 --> 00:35:13,339
made a network connection before the

999
00:35:10,940 --> 00:35:14,750
debug serve process never ran before so

1000
00:35:13,339 --> 00:35:17,270
if we had another one for the first time

1001
00:35:14,750 --> 00:35:18,680
it was run or dropped and executed then

1002
00:35:17,270 --> 00:35:20,060
network like there's several things you

1003
00:35:18,680 --> 00:35:22,279
could do to layer those detection

1004
00:35:20,060 --> 00:35:24,529
together to get like a more complete

1005
00:35:22,280 --> 00:35:27,440
story and and by that I mean like does

1006
00:35:24,530 --> 00:35:30,320
this does this feel like an adversary

1007
00:35:27,440 --> 00:35:33,530
does this look like oh it came from

1008
00:35:30,320 --> 00:35:35,450
Outlook its injecting it's moving it's

1009
00:35:33,530 --> 00:35:39,109
okay at some point you gain confidence

1010
00:35:35,450 --> 00:35:40,460
like this looks bad but there are some

1011
00:35:39,109 --> 00:35:42,920
things to avoid if you're trying to

1012
00:35:40,460 --> 00:35:47,560
write your own detection and scale all

1013
00:35:42,920 --> 00:35:47,560
this up is that like false positives are

1014
00:35:48,099 --> 00:35:52,940
everywhere like administrators

1015
00:35:50,900 --> 00:35:54,440
background software especially things

1016
00:35:52,940 --> 00:35:55,820
that are like in your gold image that's

1017
00:35:54,440 --> 00:35:56,660
gonna be on every machine so you

1018
00:35:55,820 --> 00:35:58,970
probably should have a good way to

1019
00:35:56,660 --> 00:36:02,440
unique them and to keep your ratio of

1020
00:35:58,970 --> 00:36:05,000
false positives to true positives low

1021
00:36:02,440 --> 00:36:07,010
and also as you're seeing things like

1022
00:36:05,000 --> 00:36:08,300
getting getting that context like what

1023
00:36:07,010 --> 00:36:09,650
was a processed tree when this happened

1024
00:36:08,300 --> 00:36:11,480
what was the user running who else was

1025
00:36:09,650 --> 00:36:13,690
on the box like having those questions

1026
00:36:11,480 --> 00:36:16,520
were ready to go and you see anything

1027
00:36:13,690 --> 00:36:18,500
but nother thing to to know is that like

1028
00:36:16,520 --> 00:36:20,390
we have those atomic tests we don't have

1029
00:36:18,500 --> 00:36:21,859
to wait for like a red team to test our

1030
00:36:20,390 --> 00:36:22,470
posture there are ways that we can and

1031
00:36:21,859 --> 00:36:25,080
so

1032
00:36:22,470 --> 00:36:26,430
talks as well unlike purple teaming and

1033
00:36:25,080 --> 00:36:30,109
so we can do that to kind of

1034
00:36:26,430 --> 00:36:32,490
short-circuit a bit of that process and

1035
00:36:30,109 --> 00:36:35,190
and then the final thing is avoiding

1036
00:36:32,490 --> 00:36:37,618
like over reactions to trending things

1037
00:36:35,190 --> 00:36:38,940
and that can be tricky it's like do we

1038
00:36:37,619 --> 00:36:40,080
detect this and sometimes that's the

1039
00:36:38,940 --> 00:36:43,920
thing you have to like have an answer

1040
00:36:40,080 --> 00:36:45,420
for but like so no one's gonna be asking

1041
00:36:43,920 --> 00:36:48,810
you tomorrow like do we detect a bug sir

1042
00:36:45,420 --> 00:36:50,760
I don't know if maybe but there's still

1043
00:36:48,810 --> 00:36:52,859
like do you detect credential jumping

1044
00:36:50,760 --> 00:36:55,080
from Alsace like that is still like a

1045
00:36:52,859 --> 00:36:57,569
large threat like make sure you have

1046
00:36:55,080 --> 00:36:59,340
like a good sense to prioritize someone

1047
00:36:57,570 --> 00:37:01,230
passes back to Casey to wrap this up

1048
00:36:59,340 --> 00:37:02,520
yeah so a couple of things there as far

1049
00:37:01,230 --> 00:37:04,740
as looking at you know we talked about

1050
00:37:02,520 --> 00:37:07,500
how to generate some atomic tests how do

1051
00:37:04,740 --> 00:37:08,729
we structure our queries and then we

1052
00:37:07,500 --> 00:37:10,410
wanted to leave you with a few things

1053
00:37:08,730 --> 00:37:12,510
about what can you can do to kind of put

1054
00:37:10,410 --> 00:37:14,730
some of this together to really drive

1055
00:37:12,510 --> 00:37:17,070
finding gaps or assessing coverage

1056
00:37:14,730 --> 00:37:18,510
before you're facing an actual test or

1057
00:37:17,070 --> 00:37:20,730
an adversary so a couple things that you

1058
00:37:18,510 --> 00:37:22,320
can do to kind of get started and again

1059
00:37:20,730 --> 00:37:24,180
this is not replacing the full blown

1060
00:37:22,320 --> 00:37:25,560
like red team scope we're just saying

1061
00:37:24,180 --> 00:37:26,910
like these are things that you can do

1062
00:37:25,560 --> 00:37:28,140
today to start testing because it's

1063
00:37:26,910 --> 00:37:30,720
really much better to find a miss

1064
00:37:28,140 --> 00:37:33,180
configuration or gap before something

1065
00:37:30,720 --> 00:37:34,439
actually happens and so installing if

1066
00:37:33,180 --> 00:37:35,279
you're running it wondering where do I

1067
00:37:34,440 --> 00:37:36,660
get started with some of these

1068
00:37:35,280 --> 00:37:38,820
techniques that we show today in the

1069
00:37:36,660 --> 00:37:40,770
Windows environment we've got setting up

1070
00:37:38,820 --> 00:37:42,060
system on there's there various

1071
00:37:40,770 --> 00:37:43,410
configurations we've referenced here

1072
00:37:42,060 --> 00:37:45,390
that'll be available after the talk

1073
00:37:43,410 --> 00:37:47,250
where you can go and configure that lots

1074
00:37:45,390 --> 00:37:48,900
of different event types looking at

1075
00:37:47,250 --> 00:37:51,030
atomic tests they're not just related to

1076
00:37:48,900 --> 00:37:52,790
Windows we do have atomic text for Mac

1077
00:37:51,030 --> 00:37:55,349
and Linux of your testing notes as well

1078
00:37:52,790 --> 00:37:57,000
then extracting those events putting

1079
00:37:55,349 --> 00:37:59,190
them into that JSON format so then you

1080
00:37:57,000 --> 00:38:01,890
can begin running equal so installing

1081
00:37:59,190 --> 00:38:03,330
equal is really just a couple of command

1082
00:38:01,890 --> 00:38:05,790
lines really the dependency there is

1083
00:38:03,330 --> 00:38:07,200
Python only and then using the shell we

1084
00:38:05,790 --> 00:38:08,820
would love to get feedback you know for

1085
00:38:07,200 --> 00:38:11,009
raw so I'm like using the shell getting

1086
00:38:08,820 --> 00:38:12,450
you know ways to improve or how you're

1087
00:38:11,010 --> 00:38:14,730
actually using it and then lastly just

1088
00:38:12,450 --> 00:38:16,319
start piping the data into equal and

1089
00:38:14,730 --> 00:38:17,940
begin practicing those queries or

1090
00:38:16,320 --> 00:38:21,480
building out your detection and testing

1091
00:38:17,940 --> 00:38:23,250
them against known datasets so what are

1092
00:38:21,480 --> 00:38:24,900
some of the things that we can kind of

1093
00:38:23,250 --> 00:38:27,839
wrap up or conclude as we're thinking

1094
00:38:24,900 --> 00:38:29,369
about like understanding what data

1095
00:38:27,839 --> 00:38:31,710
sources you have is very important and

1096
00:38:29,369 --> 00:38:33,480
there's a talk yesterday by Katie and

1097
00:38:31,710 --> 00:38:34,530
Ryan about you know mitre

1098
00:38:33,480 --> 00:38:35,369
attacking how to use it how to get

1099
00:38:34,530 --> 00:38:36,630
started there's some really good things

1100
00:38:35,369 --> 00:38:38,310
in there about understanding data

1101
00:38:36,630 --> 00:38:40,950
sources so I would definitely check out

1102
00:38:38,310 --> 00:38:42,299
that talk if you hadn't seen it focusing

1103
00:38:40,950 --> 00:38:44,368
on the commonly seen behaviors debug

1104
00:38:42,300 --> 00:38:45,570
serve is new it's novel to my

1105
00:38:44,369 --> 00:38:47,609
understanding no one's using it or

1106
00:38:45,570 --> 00:38:49,200
abusing it but this year the prevalence

1107
00:38:47,609 --> 00:38:50,460
of that being very low like if you went

1108
00:38:49,200 --> 00:38:53,430
back today and searched your environment

1109
00:38:50,460 --> 00:38:55,440
that is very likely zero instances of it

1110
00:38:53,430 --> 00:38:57,089
running but it's worth going to look and

1111
00:38:55,440 --> 00:38:58,490
see if anyone has a music is sometimes

1112
00:38:57,090 --> 00:39:01,590
you're not the first one to find a thing

1113
00:38:58,490 --> 00:39:03,180
and then practice on those known known

1114
00:39:01,590 --> 00:39:05,040
data sets and then scale up so really

1115
00:39:03,180 --> 00:39:07,020
practicing the detection coverage

1116
00:39:05,040 --> 00:39:08,490
against something that you instrument

1117
00:39:07,020 --> 00:39:10,710
with test data like you saw Ross

1118
00:39:08,490 --> 00:39:13,229
entering through the the queries and

1119
00:39:10,710 --> 00:39:14,850
while he was finding the atomic and it

1120
00:39:13,230 --> 00:39:17,280
was a lot of noise we are still able to

1121
00:39:14,850 --> 00:39:18,839
actually validate that the yes this is

1122
00:39:17,280 --> 00:39:21,420
what I would expect to see parent-child

1123
00:39:18,840 --> 00:39:23,820
processes testing early and often as

1124
00:39:21,420 --> 00:39:25,170
much as you can and then knowing with

1125
00:39:23,820 --> 00:39:28,350
resources both of these are free

1126
00:39:25,170 --> 00:39:29,609
resource projects on github so we would

1127
00:39:28,350 --> 00:39:33,089
love to get feedback and how you're

1128
00:39:29,609 --> 00:39:35,520
using it ways to improve etc so we put

1129
00:39:33,090 --> 00:39:36,840
together a few references for you so if

1130
00:39:35,520 --> 00:39:38,400
you're curious about some of the things

1131
00:39:36,840 --> 00:39:40,590
we've talked about in this talk we

1132
00:39:38,400 --> 00:39:42,630
talked about minor attack we've talked

1133
00:39:40,590 --> 00:39:44,010
about atomic read team

1134
00:39:42,630 --> 00:39:45,330
the event query language and all the

1135
00:39:44,010 --> 00:39:47,490
references we also put a lot of this

1136
00:39:45,330 --> 00:39:49,980
together on the blank there you see in

1137
00:39:47,490 --> 00:39:51,689
the lower left corner so we do have a

1138
00:39:49,980 --> 00:39:53,160
little bit of time for some questions I

1139
00:39:51,690 --> 00:39:55,080
think but maybe just one or two

1140
00:39:53,160 --> 00:39:57,810
questions and then we'll probably move

1141
00:39:55,080 --> 00:39:59,100
over to the the wrap-up room but just a

1142
00:39:57,810 --> 00:40:01,859
couple shout outs for people that helped

1143
00:39:59,100 --> 00:40:03,990
us as we prepared the talk paul devon

1144
00:40:01,859 --> 00:40:07,200
mike and adam work with us as we prepare

1145
00:40:03,990 --> 00:40:08,879
our content here so at this point i will

1146
00:40:07,200 --> 00:40:10,259
says we just have a couple minutes if

1147
00:40:08,880 --> 00:40:11,400
anybody does have a question i'll go

1148
00:40:10,260 --> 00:40:16,680
ahead and ask if anyone has a question

1149
00:40:11,400 --> 00:40:18,090
we could take it okay if you would like

1150
00:40:16,680 --> 00:40:20,100
to continue the conversation we'll

1151
00:40:18,090 --> 00:40:21,390
really heavy into the south CH room for

1152
00:40:20,100 --> 00:40:24,890
the wrap-up so thank you for your time

1153
00:40:21,390 --> 00:40:24,890
today and appreciate your attention

