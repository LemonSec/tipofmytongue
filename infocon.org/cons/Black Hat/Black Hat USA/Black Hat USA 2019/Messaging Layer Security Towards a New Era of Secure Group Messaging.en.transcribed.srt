1
00:00:00,030 --> 00:00:04,799
welcome to our messaging layer security

2
00:00:02,250 --> 00:00:07,410
towards a new era of secure messaging

3
00:00:04,799 --> 00:00:09,090
with Rafael Robert I just have a few

4
00:00:07,410 --> 00:00:11,790
housekeeping announcements before we

5
00:00:09,090 --> 00:00:13,799
begin so stop by the business hall

6
00:00:11,790 --> 00:00:16,378
located in Mandalay Bay Oceanside and

7
00:00:13,799 --> 00:00:19,140
shoreline level two that would be this

8
00:00:16,379 --> 00:00:23,250
level the Welcome Reception is tonight

9
00:00:19,140 --> 00:00:25,470
at 5:30 p.m. the blackhat Arsenal is in

10
00:00:23,250 --> 00:00:28,890
the business hall level two you can join

11
00:00:25,470 --> 00:00:34,320
us for the Pawnee awards lagoon JKL at

12
00:00:28,890 --> 00:00:37,829
6:30 p.m. as well please remind remember

13
00:00:34,320 --> 00:00:40,860
to put your phone in silence mode and if

14
00:00:37,829 --> 00:00:42,930
we run out of time we will take the

15
00:00:40,860 --> 00:00:45,090
speaker will take more questions the

16
00:00:42,930 --> 00:00:47,340
wrapped room which is located in level

17
00:00:45,090 --> 00:00:50,100
two so just just come up front at the

18
00:00:47,340 --> 00:00:51,660
end and we'll take you there yes so

19
00:00:50,100 --> 00:00:53,370
please everyone give a warm welcome to

20
00:00:51,660 --> 00:01:00,629
yours to the other speaker today to

21
00:00:53,370 --> 00:01:03,989
Rafael Robert thank you thank you for

22
00:01:00,629 --> 00:01:05,580
the introduction hello and welcome today

23
00:01:03,989 --> 00:01:13,408
this session we're going to be talking

24
00:01:05,580 --> 00:01:15,689
about MLS messaging layer security can

25
00:01:13,409 --> 00:01:20,400
we do a very quick show of hands who has

26
00:01:15,689 --> 00:01:22,798
heard of MLS before that's roughly 25

27
00:01:20,400 --> 00:01:26,100
percent and who has read the

28
00:01:22,799 --> 00:01:32,549
specification out of these people anyone

29
00:01:26,100 --> 00:01:35,070
no good then you're in the right talk so

30
00:01:32,549 --> 00:01:35,990
for those who haven't heard of it in a

31
00:01:35,070 --> 00:01:39,508
nutshell

32
00:01:35,990 --> 00:01:44,490
MLS is a new protocol for end-to-end

33
00:01:39,509 --> 00:01:47,850
encrypted messaging and it is also by

34
00:01:44,490 --> 00:01:50,970
now an ITF working group this is

35
00:01:47,850 --> 00:01:55,259
essentially the framework in which MLS

36
00:01:50,970 --> 00:01:57,600
is being developed and the question is

37
00:01:55,259 --> 00:01:59,700
why is this important now why why do we

38
00:01:57,600 --> 00:02:01,919
need a new encryption protocol we

39
00:01:59,700 --> 00:02:03,570
already have a few there and so what do

40
00:02:01,920 --> 00:02:05,130
we need to do a new one is there a new

41
00:02:03,570 --> 00:02:08,068
problem to solve or an old problem that

42
00:02:05,130 --> 00:02:09,508
hasn't been solved yet so in the first

43
00:02:08,068 --> 00:02:12,540
part of the talk we're gonna look into

44
00:02:09,508 --> 00:02:13,869
that what the the current status is in

45
00:02:12,540 --> 00:02:15,730
terms of secure message

46
00:02:13,870 --> 00:02:20,980
and then we're going to talk more about

47
00:02:15,730 --> 00:02:23,409
MLS and so I'm Rafa Robert I work for

48
00:02:20,980 --> 00:02:25,780
wire which is a secure messenger and

49
00:02:23,409 --> 00:02:30,099
collaboration platform and I've been

50
00:02:25,780 --> 00:02:33,909
quite involved in the MLS effort in the

51
00:02:30,099 --> 00:02:35,260
past months and years but I was supposed

52
00:02:33,909 --> 00:02:36,790
to speak with Benjamin today who

53
00:02:35,260 --> 00:02:40,420
unfortunately couldn't attend so it's

54
00:02:36,790 --> 00:02:43,540
just gonna be me today but it's it's

55
00:02:40,420 --> 00:02:45,190
really not just the two of us it's

56
00:02:43,540 --> 00:02:46,890
actually a bunch of companies that are

57
00:02:45,190 --> 00:02:52,930
involved in MLS

58
00:02:46,890 --> 00:02:54,129
so all these companies you see there to

59
00:02:52,930 --> 00:02:55,629
some extent they think there is a

60
00:02:54,129 --> 00:02:59,590
fundamental problem to solve when it

61
00:02:55,629 --> 00:03:03,340
comes to secure messaging and this is

62
00:02:59,590 --> 00:03:06,420
what motivated them to cooperate on this

63
00:03:03,340 --> 00:03:10,470
level and you can also see there is a

64
00:03:06,420 --> 00:03:14,920
number of institutions and universities

65
00:03:10,470 --> 00:03:17,230
on there so we have a lot of input very

66
00:03:14,920 --> 00:03:19,119
fundamental input from academia which is

67
00:03:17,230 --> 00:03:20,730
something that in 2019 you absolutely

68
00:03:19,120 --> 00:03:28,450
want to have on your design assess your

69
00:03:20,730 --> 00:03:30,849
protocol and since MLS is an ITF working

70
00:03:28,450 --> 00:03:35,798
group it is completely open so anyone

71
00:03:30,849 --> 00:03:38,619
can participate in the traditional way

72
00:03:35,799 --> 00:03:41,739
that ITF works there is a mailing list

73
00:03:38,620 --> 00:03:44,199
anyone can come to the meetings that are

74
00:03:41,739 --> 00:03:48,549
held three times a year and then the

75
00:03:44,199 --> 00:03:50,680
interim meetings in between so as I said

76
00:03:48,549 --> 00:03:52,419
we're gonna quickly look at what the

77
00:03:50,680 --> 00:03:55,799
current status is with with existing

78
00:03:52,419 --> 00:03:58,000
messaging what I've become an issues

79
00:03:55,799 --> 00:04:00,190
what problems have been solved so far

80
00:03:58,000 --> 00:04:05,019
and what problems remain and how to look

81
00:04:00,190 --> 00:04:08,019
a bit at the history so today we have a

82
00:04:05,019 --> 00:04:11,069
lot of secure messaging apps and some of

83
00:04:08,019 --> 00:04:16,030
them use the same or similar protocols

84
00:04:11,069 --> 00:04:17,889
some are quite different and but they

85
00:04:16,029 --> 00:04:20,260
all have the same challenge at the end

86
00:04:17,889 --> 00:04:24,909
of the day and that is how do you end to

87
00:04:20,260 --> 00:04:27,099
encrypt messages the level of analysis

88
00:04:24,909 --> 00:04:30,090
from academia is very different

89
00:04:27,099 --> 00:04:32,620
across the different maps some of them

90
00:04:30,090 --> 00:04:35,619
use a protocol that is very well studied

91
00:04:32,620 --> 00:04:40,240
and very well understood others have not

92
00:04:35,620 --> 00:04:46,240
really been audited that much and many

93
00:04:40,240 --> 00:04:47,620
of them have their own libraries and the

94
00:04:46,240 --> 00:04:51,099
question is how do these protocols

95
00:04:47,620 --> 00:04:52,240
compare in terms of level of analysis in

96
00:04:51,099 --> 00:04:54,340
terms of threat models that they're

97
00:04:52,240 --> 00:05:00,280
trying to address and in terms of

98
00:04:54,340 --> 00:05:02,109
features that they enable so if we start

99
00:05:00,280 --> 00:05:05,818
with security first the security

100
00:05:02,110 --> 00:05:10,030
properties we've had in past protocols

101
00:05:05,819 --> 00:05:12,699
so in the 90s we had PGP open PGP as

102
00:05:10,030 --> 00:05:15,849
mine which is fundamentally very similar

103
00:05:12,699 --> 00:05:19,060
to each other and that was really the

104
00:05:15,849 --> 00:05:22,449
the beginning event to an encryption in

105
00:05:19,060 --> 00:05:24,759
the consumer and business space and it

106
00:05:22,449 --> 00:05:28,259
came with two very fundamental security

107
00:05:24,759 --> 00:05:31,419
properties which is confidentiality and

108
00:05:28,259 --> 00:05:33,820
authenticity so confidentiality simply

109
00:05:31,419 --> 00:05:37,060
means things are encrypted it's

110
00:05:33,820 --> 00:05:37,690
confidential a third party cannot look

111
00:05:37,060 --> 00:05:40,240
into it

112
00:05:37,690 --> 00:05:43,449
authenticity means that you actually

113
00:05:40,240 --> 00:05:48,219
know who encrypted it so you can be sure

114
00:05:43,449 --> 00:05:51,820
who the author of the messages years

115
00:05:48,219 --> 00:05:53,320
later in the early 2000s the

116
00:05:51,820 --> 00:05:59,520
off-the-record protocols of the day of

117
00:05:53,320 --> 00:06:02,259
light and this was actually adapting to

118
00:05:59,520 --> 00:06:04,900
to a more modern environment and and

119
00:06:02,259 --> 00:06:10,389
trying to address a very specific threat

120
00:06:04,900 --> 00:06:12,940
model and it introduced two new security

121
00:06:10,389 --> 00:06:15,759
properties which are forward secrecy and

122
00:06:12,940 --> 00:06:17,740
deniability so the idea behind that

123
00:06:15,759 --> 00:06:20,139
protocol was that somebody should be

124
00:06:17,740 --> 00:06:24,099
able to have a confidential conversation

125
00:06:20,139 --> 00:06:25,900
with sorry journalists and and the

126
00:06:24,099 --> 00:06:27,580
properties of that conversation even

127
00:06:25,900 --> 00:06:32,520
though it was digital should mimic what

128
00:06:27,580 --> 00:06:32,520
happens in real life and

129
00:06:32,650 --> 00:06:39,010
of when two people meet and and there is

130
00:06:35,530 --> 00:06:40,500
no recording of the conversation so

131
00:06:39,010 --> 00:06:44,710
we're going to talk about these

132
00:06:40,500 --> 00:06:46,090
properties in more detail later and then

133
00:06:44,710 --> 00:06:48,250
after that came the double ratchet

134
00:06:46,090 --> 00:06:52,989
algorithm which is a very fundamental

135
00:06:48,250 --> 00:06:56,229
one and that has been the basis of the

136
00:06:52,990 --> 00:06:58,389
signal protocol for example and and what

137
00:06:56,229 --> 00:07:01,630
it did it really adapted the of the

138
00:06:58,389 --> 00:07:04,180
record protocol to a new environment

139
00:07:01,630 --> 00:07:06,280
which had to be asynchronous so all of a

140
00:07:04,180 --> 00:07:07,960
sudden there were smartphones and

141
00:07:06,280 --> 00:07:09,280
sometimes they're online sometimes

142
00:07:07,960 --> 00:07:11,159
they're offline and sometimes are in

143
00:07:09,280 --> 00:07:13,929
between you don't know what it is so

144
00:07:11,160 --> 00:07:18,039
while the of the record protocol was

145
00:07:13,930 --> 00:07:19,960
based on a session back then this was

146
00:07:18,039 --> 00:07:21,219
not good enough on smartphones anymore

147
00:07:19,960 --> 00:07:25,120
because there was no concept of a

148
00:07:21,220 --> 00:07:29,220
session and it also introduced a new

149
00:07:25,120 --> 00:07:34,979
notion of future's future secrecy and

150
00:07:29,220 --> 00:07:39,789
we'll look at that more detail later but

151
00:07:34,979 --> 00:07:43,510
what's common to all these protocols is

152
00:07:39,789 --> 00:07:46,450
that they're all designed for encryption

153
00:07:43,510 --> 00:07:48,789
between two ends and end-to-end

154
00:07:46,450 --> 00:07:50,710
encryption so we call them pairwise

155
00:07:48,789 --> 00:07:53,650
protocol because they're there to

156
00:07:50,710 --> 00:07:55,000
encrypt things between a and B and you

157
00:07:53,650 --> 00:07:57,870
can also see that these protocols

158
00:07:55,000 --> 00:08:00,910
influence influence each other over time

159
00:07:57,870 --> 00:08:04,150
so of course of the record is also

160
00:08:00,910 --> 00:08:06,250
confidential and authenticated and so as

161
00:08:04,150 --> 00:08:12,698
of a ratchet they just added two

162
00:08:06,250 --> 00:08:15,610
security properties so the question here

163
00:08:12,699 --> 00:08:19,210
is if all of these protocols are

164
00:08:15,610 --> 00:08:21,010
pairwise what do we do about groups what

165
00:08:19,210 --> 00:08:23,489
do we do when we have more than two ends

166
00:08:21,010 --> 00:08:25,810
and that's the case in a group of three

167
00:08:23,490 --> 00:08:28,120
naturally it's also the case if you have

168
00:08:25,810 --> 00:08:30,699
a multi device setup which is very

169
00:08:28,120 --> 00:08:34,959
common these days you have a tablet you

170
00:08:30,699 --> 00:08:36,610
have a PC you have a smartphone and so

171
00:08:34,958 --> 00:08:38,708
the fundamental problem is that these

172
00:08:36,610 --> 00:08:41,740
parallel protocol they cannot just be

173
00:08:38,708 --> 00:08:43,900
extended to workgroups you cannot just

174
00:08:41,740 --> 00:08:46,030
add ends to it because

175
00:08:43,900 --> 00:08:48,730
it's not how those protocols were

176
00:08:46,030 --> 00:08:51,910
designed initially and what typically

177
00:08:48,730 --> 00:08:55,120
happens is that you simulate a group by

178
00:08:51,910 --> 00:08:58,209
superposing these one-to-one connection

179
00:08:55,120 --> 00:08:59,830
so if alice is in a group and and once

180
00:08:58,210 --> 00:09:00,310
to talk to everybody wants to send a

181
00:08:59,830 --> 00:09:01,810
message

182
00:09:00,310 --> 00:09:05,199
she will individually encrypt the

183
00:09:01,810 --> 00:09:07,359
message to everybody in the group so

184
00:09:05,200 --> 00:09:09,010
this works of course and you get the

185
00:09:07,360 --> 00:09:11,380
same kind of security properties you

186
00:09:09,010 --> 00:09:13,840
haven't one-to-one the problem here is

187
00:09:11,380 --> 00:09:15,580
that it doesn't scare very well because

188
00:09:13,840 --> 00:09:19,990
if the group is big you have to do a lot

189
00:09:15,580 --> 00:09:21,580
of encryption operations and so there

190
00:09:19,990 --> 00:09:30,580
seems to be a trade-off between security

191
00:09:21,580 --> 00:09:32,710
properties and scalability and we're

192
00:09:30,580 --> 00:09:35,650
going to look at that in more detail in

193
00:09:32,710 --> 00:09:37,840
a bit so the the problem is also that

194
00:09:35,650 --> 00:09:40,030
when you create a group on top of these

195
00:09:37,840 --> 00:09:42,870
pairwise protocols so you use these

196
00:09:40,030 --> 00:09:45,670
pairwise protocols as a building brick

197
00:09:42,870 --> 00:09:47,950
then whatever you do on top is not part

198
00:09:45,670 --> 00:09:49,479
of this secure protocol so even if the

199
00:09:47,950 --> 00:09:51,490
protocol is very secure what you do on

200
00:09:49,480 --> 00:09:53,740
top is something else entirely so you

201
00:09:51,490 --> 00:09:55,480
add a layer of group management which

202
00:09:53,740 --> 00:09:58,030
typically is not standard at all so

203
00:09:55,480 --> 00:10:04,030
every app vendor comes up with their own

204
00:09:58,030 --> 00:10:06,939
idea on how to solve that and so the

205
00:10:04,030 --> 00:10:10,150
security properties you get there there

206
00:10:06,940 --> 00:10:12,670
might be different and so also the

207
00:10:10,150 --> 00:10:15,310
analysis of this group management layer

208
00:10:12,670 --> 00:10:16,860
is often not there at all or it's it's

209
00:10:15,310 --> 00:10:19,390
very thin

210
00:10:16,860 --> 00:10:24,370
so it would actually be great to combine

211
00:10:19,390 --> 00:10:26,319
the two and then to analyze the two so

212
00:10:24,370 --> 00:10:27,700
going back to this trade-off so if we

213
00:10:26,320 --> 00:10:30,250
have a very simple graph and the

214
00:10:27,700 --> 00:10:32,820
accesses we have how modern the security

215
00:10:30,250 --> 00:10:35,500
of the protocol is on the y-axis we have

216
00:10:32,820 --> 00:10:37,720
an indication of how well it scales in

217
00:10:35,500 --> 00:10:40,270
group so then in the lower left corner

218
00:10:37,720 --> 00:10:43,360
we we have encrypted email with as mine

219
00:10:40,270 --> 00:10:45,370
open PGP because the security is not

220
00:10:43,360 --> 00:10:47,050
really modern anymore and it doesn't

221
00:10:45,370 --> 00:10:50,080
scale well because if she sent an email

222
00:10:47,050 --> 00:10:54,520
to more than one recipient you typically

223
00:10:50,080 --> 00:10:55,640
encrypt it more than once so what is

224
00:10:54,520 --> 00:10:58,459
good in terms of

225
00:10:55,640 --> 00:11:02,959
our own security is what we call client

226
00:10:58,459 --> 00:11:05,319
fan-out so this is essentially all the

227
00:11:02,959 --> 00:11:08,029
applications that are going to encrypt

228
00:11:05,320 --> 00:11:10,820
the messages multiple times to all the

229
00:11:08,029 --> 00:11:13,910
recipients in a group with the the

230
00:11:10,820 --> 00:11:16,670
modern security properties and then we

231
00:11:13,910 --> 00:11:20,870
have this trade-off which is essentially

232
00:11:16,670 --> 00:11:22,849
a hack so doing client fan-out doesn't

233
00:11:20,870 --> 00:11:26,120
scale well enough in the real world for

234
00:11:22,850 --> 00:11:27,500
a number of companies obviously so the

235
00:11:26,120 --> 00:11:30,140
hack here is to use something called

236
00:11:27,500 --> 00:11:33,350
sender keys and this is being used by

237
00:11:30,140 --> 00:11:34,730
whatsapp Facebook and others simply

238
00:11:33,350 --> 00:11:38,060
because it's carries a little better but

239
00:11:34,730 --> 00:11:42,350
we have this security trade-off and so

240
00:11:38,060 --> 00:11:43,910
the question is what could we do in the

241
00:11:42,350 --> 00:11:48,200
upper right corner would be interesting

242
00:11:43,910 --> 00:11:50,449
to be there actually so if you think a

243
00:11:48,200 --> 00:11:53,540
bit of the objectives that we want for a

244
00:11:50,450 --> 00:11:58,070
new protocol if we could make a wish

245
00:11:53,540 --> 00:12:00,140
list what would it look like let's start

246
00:11:58,070 --> 00:12:02,600
with the security first and then modern

247
00:12:00,140 --> 00:12:04,130
security properties so we already talked

248
00:12:02,600 --> 00:12:08,449
about confidentiality and authenticity

249
00:12:04,130 --> 00:12:11,029
that should absolutely be there though

250
00:12:08,449 --> 00:12:13,399
there are still some products out there

251
00:12:11,029 --> 00:12:16,220
that are the don't really surface the

252
00:12:13,399 --> 00:12:19,060
authenticity part to the user so you

253
00:12:16,220 --> 00:12:21,670
sort of have to believe that it's there

254
00:12:19,060 --> 00:12:24,109
then forward secrecy

255
00:12:21,670 --> 00:12:25,729
essentially what port secrecy means is

256
00:12:24,110 --> 00:12:28,850
that if there is a compromise at some

257
00:12:25,730 --> 00:12:32,839
point of an endpoint and an attacker can

258
00:12:28,850 --> 00:12:36,140
get the keys at a certain point in time

259
00:12:32,839 --> 00:12:39,380
then for secrecy means that these keys

260
00:12:36,140 --> 00:12:41,660
are of a compromised endpoint is not

261
00:12:39,380 --> 00:12:43,610
gonna enable the attacker to go back in

262
00:12:41,660 --> 00:12:45,260
time and to decrypt all the history even

263
00:12:43,610 --> 00:12:49,089
if the attacker had been able to record

264
00:12:45,260 --> 00:12:51,529
it in encrypted form on the network and

265
00:12:49,089 --> 00:12:54,140
then we sort of have the opposite in

266
00:12:51,529 --> 00:12:55,640
terms of time we have with post

267
00:12:54,140 --> 00:12:57,949
compromised security so earlier I

268
00:12:55,640 --> 00:13:02,149
mentioned future secrecy this is a more

269
00:12:57,949 --> 00:13:04,370
academic definition of that it's also

270
00:13:02,149 --> 00:13:06,740
much more recent and forward secrecy and

271
00:13:04,370 --> 00:13:09,089
what this means is that there is a way

272
00:13:06,740 --> 00:13:13,079
to recover after a compromised

273
00:13:09,089 --> 00:13:15,299
and so these two properties are what

274
00:13:13,079 --> 00:13:19,529
constitutes modern protocols and we'll

275
00:13:15,299 --> 00:13:22,679
go to more detail even a bit further out

276
00:13:19,529 --> 00:13:24,059
so what you'd like is to have membership

277
00:13:22,679 --> 00:13:26,549
authentication you would like to know

278
00:13:24,059 --> 00:13:28,889
exactly with some cryptographic proof of

279
00:13:26,549 --> 00:13:30,839
who is in a group and this is not really

280
00:13:28,889 --> 00:13:32,429
what pairwise protocols can do because

281
00:13:30,839 --> 00:13:36,899
they don't have the notion of a group

282
00:13:32,429 --> 00:13:41,488
whatsoever and then deniability which

283
00:13:36,899 --> 00:13:43,769
was introduced with OTR which on a very

284
00:13:41,489 --> 00:13:46,859
high level means that if Alice sends a

285
00:13:43,769 --> 00:13:49,019
message to Bob for example then Bob

286
00:13:46,859 --> 00:13:52,229
cannot prove to a third party that alice

287
00:13:49,019 --> 00:13:54,869
is really the author of that message but

288
00:13:52,229 --> 00:13:56,969
Bob knows for himself that Alice sent it

289
00:13:54,869 --> 00:13:59,489
in fact there are different kinds of

290
00:13:56,969 --> 00:14:03,029
deniability we'll have a slide about

291
00:13:59,489 --> 00:14:04,829
that later so what else do we want aside

292
00:14:03,029 --> 00:14:07,079
from the security so security is good

293
00:14:04,829 --> 00:14:10,289
but it also needs to work so we need

294
00:14:07,079 --> 00:14:12,269
some features that make it work in the

295
00:14:10,289 --> 00:14:13,739
real world so it needs to be

296
00:14:12,269 --> 00:14:15,869
asynchronous I already mentioned

297
00:14:13,739 --> 00:14:20,039
smartphones are are ubiquitous these

298
00:14:15,869 --> 00:14:21,359
days and so you don't want to wait for

299
00:14:20,039 --> 00:14:24,629
the other party to come online to

300
00:14:21,359 --> 00:14:26,549
initiate a secure session you just want

301
00:14:24,629 --> 00:14:28,229
to send out a message and and forget

302
00:14:26,549 --> 00:14:30,299
about it and then you expect the other

303
00:14:28,229 --> 00:14:31,859
party is going to receive it at some

304
00:14:30,299 --> 00:14:37,669
pond and be able to decrypt it and read

305
00:14:31,859 --> 00:14:41,759
it and we want good security in groups

306
00:14:37,669 --> 00:14:44,728
while the scaling should be efficient we

307
00:14:41,759 --> 00:14:46,289
don't want this trade-off necessarily we

308
00:14:44,729 --> 00:14:48,179
also want multi device so multi device

309
00:14:46,289 --> 00:14:50,519
is another aspect of groups it's you

310
00:14:48,179 --> 00:14:55,728
just add more ends to the internal

311
00:14:50,519 --> 00:14:59,249
encryption another aspect is Federation

312
00:14:55,729 --> 00:15:02,009
so it would be great if you would not be

313
00:14:59,249 --> 00:15:05,209
limited to one server or one service

314
00:15:02,009 --> 00:15:08,699
when you do end-to-end encryption and

315
00:15:05,209 --> 00:15:12,899
very importantly the whole thing also

316
00:15:08,699 --> 00:15:17,389
needs to be usable so I need to focus on

317
00:15:12,899 --> 00:15:17,389
a new protocol to be really practical

318
00:15:18,730 --> 00:15:23,440
finally we'd like to be an open standard

319
00:15:21,220 --> 00:15:26,110
so anybody should be able to read the

320
00:15:23,440 --> 00:15:29,610
specification and and implement it

321
00:15:26,110 --> 00:15:32,110
understanding and comment on it and if

322
00:15:29,610 --> 00:15:33,670
if they are implementations already

323
00:15:32,110 --> 00:15:35,260
would be great if they can be reused and

324
00:15:33,670 --> 00:15:38,410
they're completely compatible to each

325
00:15:35,260 --> 00:15:41,319
other and lastly you want the security

326
00:15:38,410 --> 00:15:42,780
analysis from academia which is really

327
00:15:41,320 --> 00:15:46,450
very important

328
00:15:42,780 --> 00:15:48,579
when coming up with new protocols and

329
00:15:46,450 --> 00:15:51,400
we've had great examples of that so TLS

330
00:15:48,580 --> 00:15:54,130
1.3 for example it's such an protocol

331
00:15:51,400 --> 00:15:56,770
that has been developed with the help of

332
00:15:54,130 --> 00:16:03,760
different universities and so we tried

333
00:15:56,770 --> 00:16:06,939
to align MLS to that as well so now

334
00:16:03,760 --> 00:16:09,520
let's finally talk about MLS chat a

335
00:16:06,940 --> 00:16:12,640
little bit of history in 2015 there was

336
00:16:09,520 --> 00:16:14,230
a first cryptographic technical proposal

337
00:16:12,640 --> 00:16:16,600
from the University of Oxford called

338
00:16:14,230 --> 00:16:19,390
asynchronous ratcheting trees which

339
00:16:16,600 --> 00:16:22,690
kicked off a technical debate and in

340
00:16:19,390 --> 00:16:25,870
2016 there were more stakeholders who

341
00:16:22,690 --> 00:16:27,070
gathered and started discussing what

342
00:16:25,870 --> 00:16:29,350
could be done on the technical side

343
00:16:27,070 --> 00:16:31,300
whether it should be standardized which

344
00:16:29,350 --> 00:16:36,640
if there was a common problem in the

345
00:16:31,300 --> 00:16:39,670
industry and all of that led to birds of

346
00:16:36,640 --> 00:16:43,540
a feather in march lani a team at the

347
00:16:39,670 --> 00:16:46,709
ITF in London and then in May the

348
00:16:43,540 --> 00:16:50,319
working group was officially formed and

349
00:16:46,710 --> 00:16:53,800
ever since MLS has been developed in

350
00:16:50,320 --> 00:16:56,380
that working group and as I mentioned

351
00:16:53,800 --> 00:16:58,420
TLS has been a great inspiration so if

352
00:16:56,380 --> 00:17:00,070
we look at the scope what problem we're

353
00:16:58,420 --> 00:17:01,930
trying to solve and what the scope

354
00:17:00,070 --> 00:17:05,199
should be again we can look at the scope

355
00:17:01,930 --> 00:17:06,909
of TLS first so TLS of the security

356
00:17:05,199 --> 00:17:09,730
problem we have the transport layer

357
00:17:06,910 --> 00:17:11,940
which is TCP or UDP typically and on top

358
00:17:09,730 --> 00:17:15,250
of that we have protocols that build up

359
00:17:11,940 --> 00:17:22,930
on this transport layer HTTP SMTP etc

360
00:17:15,250 --> 00:17:24,640
and so TLS fits in here and and secures

361
00:17:22,930 --> 00:17:30,790
this transport layer as the name says

362
00:17:24,640 --> 00:17:32,360
and in terms of scope it goes along with

363
00:17:30,790 --> 00:17:36,200
a way to authenticate

364
00:17:32,360 --> 00:17:37,939
which is typically a PKI and it doesn't

365
00:17:36,200 --> 00:17:40,370
really define how that works that's out

366
00:17:37,940 --> 00:17:42,080
of the scope of TLS but it defines how

367
00:17:40,370 --> 00:17:43,989
the interface works so you all know that

368
00:17:42,080 --> 00:17:46,580
in browsers you have certificates and so

369
00:17:43,990 --> 00:17:48,110
TLS understands what its certificate is

370
00:17:46,580 --> 00:17:51,280
but it doesn't care about where it comes

371
00:17:48,110 --> 00:17:54,559
from and how it's being handled etcetera

372
00:17:51,280 --> 00:17:57,379
so MLS is supposed to be very similar we

373
00:17:54,559 --> 00:18:00,620
have transport encryption as a base

374
00:17:57,380 --> 00:18:02,480
layer and then we have an application

375
00:18:00,620 --> 00:18:04,189
layer on which messages are being

376
00:18:02,480 --> 00:18:08,780
exchanged and this is the reality for

377
00:18:04,190 --> 00:18:10,190
all messengers that don't really have

378
00:18:08,780 --> 00:18:12,500
any sort of end-to-end encryption

379
00:18:10,190 --> 00:18:14,240
there's transport encryption and there's

380
00:18:12,500 --> 00:18:14,870
the application there and clear text

381
00:18:14,240 --> 00:18:19,000
above that

382
00:18:14,870 --> 00:18:21,080
so this is where MLS should fit in

383
00:18:19,000 --> 00:18:23,090
similarly we have an authentication

384
00:18:21,080 --> 00:18:25,790
service which is also not completely

385
00:18:23,090 --> 00:18:27,860
specified we really only want to specify

386
00:18:25,790 --> 00:18:30,020
the interface because at the end of the

387
00:18:27,860 --> 00:18:33,500
day there might be really different

388
00:18:30,020 --> 00:18:37,639
systems of syndication PK's vendors have

389
00:18:33,500 --> 00:18:39,290
different ideas about that on a very

390
00:18:37,640 --> 00:18:41,809
high level on the architecture level we

391
00:18:39,290 --> 00:18:43,700
have this authentication service which

392
00:18:41,809 --> 00:18:46,639
we're going to leave alone for now and

393
00:18:43,700 --> 00:18:50,000
then we have a delivery service so this

394
00:18:46,640 --> 00:18:52,010
is on the server side simply as the name

395
00:18:50,000 --> 00:18:54,830
says it is a component that is going to

396
00:18:52,010 --> 00:18:56,960
deliver end-to-end encrypted messages

397
00:18:54,830 --> 00:18:59,570
mostly and so you have a bunch of

398
00:18:56,960 --> 00:19:02,929
clients there can be more than one

399
00:18:59,570 --> 00:19:04,309
client per user and all of them at the

400
00:19:02,929 --> 00:19:07,520
end of the day they're part of a group

401
00:19:04,309 --> 00:19:13,220
so MLS really cares about groups as a

402
00:19:07,520 --> 00:19:16,780
notion going back to TLS there are

403
00:19:13,220 --> 00:19:19,880
differences also beyond the similarities

404
00:19:16,780 --> 00:19:24,290
so in groups we could have a lot of

405
00:19:19,880 --> 00:19:25,820
people TLS is really point-to-point we

406
00:19:24,290 --> 00:19:27,500
can have very long-lived sessions in

407
00:19:25,820 --> 00:19:29,299
groups they could exist for months or

408
00:19:27,500 --> 00:19:32,510
years and TLS typically the seconds or

409
00:19:29,299 --> 00:19:34,730
minutes at best we have a lot of mobile

410
00:19:32,510 --> 00:19:37,340
devices involved so the a synchronicity

411
00:19:34,730 --> 00:19:41,630
problem comes up again which for TLS

412
00:19:37,340 --> 00:19:42,970
it's not that important also clearly MLS

413
00:19:41,630 --> 00:19:44,680
is designed for human to human

414
00:19:42,970 --> 00:19:46,750
communication

415
00:19:44,680 --> 00:19:50,700
DLS can be used between two servers for

416
00:19:46,750 --> 00:19:54,220
example and so with these long sessions

417
00:19:50,700 --> 00:19:56,410
there is a very significant probability

418
00:19:54,220 --> 00:20:00,010
that some of the entrants are going to

419
00:19:56,410 --> 00:20:01,900
get compromised I mean I think this is

420
00:20:00,010 --> 00:20:05,320
an audience that I need to explain to

421
00:20:01,900 --> 00:20:07,540
you that infants can get compromised so

422
00:20:05,320 --> 00:20:09,580
this is again where we go back to fourth

423
00:20:07,540 --> 00:20:13,450
secrecy and post compromised security

424
00:20:09,580 --> 00:20:15,070
and look a bit at how that works so we

425
00:20:13,450 --> 00:20:17,680
assume that's going to be compromised

426
00:20:15,070 --> 00:20:20,139
and we want the past messages to be

427
00:20:17,680 --> 00:20:21,820
secure if they've been deleted for

428
00:20:20,140 --> 00:20:23,800
example so an attacker who has collected

429
00:20:21,820 --> 00:20:25,450
all the encrypted messages on the

430
00:20:23,800 --> 00:20:29,280
network for example should not be able

431
00:20:25,450 --> 00:20:32,050
to now decrypt all of them and

432
00:20:29,280 --> 00:20:34,720
conversely when we look at the future

433
00:20:32,050 --> 00:20:36,399
we want to recover from such a situation

434
00:20:34,720 --> 00:20:39,460
we want for example if somebody in a

435
00:20:36,400 --> 00:20:42,220
group loses a phone which happens rather

436
00:20:39,460 --> 00:20:44,290
frequently we don't want the whole group

437
00:20:42,220 --> 00:20:48,580
to be compromised forever because that

438
00:20:44,290 --> 00:20:52,180
phone was lost so we want to actually be

439
00:20:48,580 --> 00:20:53,800
able to go forward with that and even if

440
00:20:52,180 --> 00:20:57,400
the phone was just you know briefly

441
00:20:53,800 --> 00:21:00,460
compromised but the attacker doesn't

442
00:20:57,400 --> 00:21:03,010
have any any persistent compromise then

443
00:21:00,460 --> 00:21:05,920
we can also recover from that of course

444
00:21:03,010 --> 00:21:07,780
if an attacker is forever compromising

445
00:21:05,920 --> 00:21:10,720
an endpoint then it's sort of game over

446
00:21:07,780 --> 00:21:13,149
but that is by design then we have a

447
00:21:10,720 --> 00:21:14,980
what we call a malicious insider so how

448
00:21:13,150 --> 00:21:18,070
do we how do we get for it secrecy and

449
00:21:14,980 --> 00:21:21,550
and post compromised security we do a

450
00:21:18,070 --> 00:21:23,530
lot of key rotations so whenever we have

451
00:21:21,550 --> 00:21:25,960
new keys then we can also forget about

452
00:21:23,530 --> 00:21:29,080
the old keys which means effectively

453
00:21:25,960 --> 00:21:30,670
they become irrelevant and if all of the

454
00:21:29,080 --> 00:21:34,389
endpoints have forgotten the old keys we

455
00:21:30,670 --> 00:21:36,610
have forward secrecy with nothing we

456
00:21:34,390 --> 00:21:37,510
have no key material to decipher old

457
00:21:36,610 --> 00:21:41,110
messages anymore

458
00:21:37,510 --> 00:21:42,940
and the same for post compromised

459
00:21:41,110 --> 00:21:46,060
security we need new keys so that when

460
00:21:42,940 --> 00:21:47,950
we evict an attacker the new key

461
00:21:46,060 --> 00:21:50,139
material is not known to the attacker so

462
00:21:47,950 --> 00:21:52,360
if we look at an example very quickly of

463
00:21:50,140 --> 00:21:55,690
how a group could go so Alice creates a

464
00:21:52,360 --> 00:21:57,030
group with Bob and timewise we call this

465
00:21:55,690 --> 00:22:00,540
segment we call

466
00:21:57,030 --> 00:22:05,399
EPOC one then mls we we work with epochs

467
00:22:00,540 --> 00:22:08,310
which are just time segments and so in

468
00:22:05,400 --> 00:22:11,100
this epoch one both Alice and Bob have

469
00:22:08,310 --> 00:22:14,790
key material they can use to securely

470
00:22:11,100 --> 00:22:16,290
exchange messages and then Alice adds

471
00:22:14,790 --> 00:22:18,120
Charlie for example to the group and

472
00:22:16,290 --> 00:22:20,310
then we are an epoch - so Charlie now

473
00:22:18,120 --> 00:22:24,300
does not have the key meteor from epoch

474
00:22:20,310 --> 00:22:26,899
one so Charlie couldn't possibly decrypt

475
00:22:24,300 --> 00:22:30,180
any messages that were sent an epoch won

476
00:22:26,900 --> 00:22:33,870
and now about does a key update for the

477
00:22:30,180 --> 00:22:36,270
whole group which is something that

478
00:22:33,870 --> 00:22:40,050
enables post compromise security so now

479
00:22:36,270 --> 00:22:44,400
we have a new key for the whole group

480
00:22:40,050 --> 00:22:46,680
and finally Alice removes Charlie for

481
00:22:44,400 --> 00:22:49,020
example we have a new epoch and at that

482
00:22:46,680 --> 00:22:53,250
point new key material is being

483
00:22:49,020 --> 00:22:55,470
generated and of course Charlie will not

484
00:22:53,250 --> 00:22:58,710
have access to any new key material that

485
00:22:55,470 --> 00:23:02,580
allison propagating to use so if you

486
00:22:58,710 --> 00:23:05,490
zoom in on epic one and and we look what

487
00:23:02,580 --> 00:23:08,730
happens when an epoch starts essentially

488
00:23:05,490 --> 00:23:12,750
both Alice and Bob are able to derive

489
00:23:08,730 --> 00:23:16,710
key material that has the property of

490
00:23:12,750 --> 00:23:18,930
being forward secure so for every

491
00:23:16,710 --> 00:23:20,910
effectively for every message Alice can

492
00:23:18,930 --> 00:23:24,360
use a new key and then forget about the

493
00:23:20,910 --> 00:23:26,370
key and and Bob this is same and they

494
00:23:24,360 --> 00:23:29,310
can also derive each other's keys so

495
00:23:26,370 --> 00:23:32,189
when Alice uses key one then Bob can

496
00:23:29,310 --> 00:23:40,350
also derive the same key and and decrypt

497
00:23:32,190 --> 00:23:43,290
alice's message so before we start going

498
00:23:40,350 --> 00:23:47,010
into more detail i'm very briefly

499
00:23:43,290 --> 00:23:50,700
there's a concept that we call init keys

500
00:23:47,010 --> 00:23:52,350
so every every member of a group is

501
00:23:50,700 --> 00:23:54,600
going to publish in it Keys ahead of

502
00:23:52,350 --> 00:23:56,550
time so whenever they start using a new

503
00:23:54,600 --> 00:23:59,939
device or sign up for some service and

504
00:23:56,550 --> 00:24:01,440
so the idea behind that is that these

505
00:23:59,940 --> 00:24:04,470
unique keys are handled by the delivery

506
00:24:01,440 --> 00:24:07,260
service on this part of the server

507
00:24:04,470 --> 00:24:09,120
infrastructure and so they contain

508
00:24:07,260 --> 00:24:09,600
phenomena to contain credentials and the

509
00:24:09,120 --> 00:24:12,350
public

510
00:24:09,600 --> 00:24:17,520
so with that you can immediately start

511
00:24:12,350 --> 00:24:19,770
doing end-to-end encryption with the the

512
00:24:17,520 --> 00:24:22,470
members of the group right away so it's

513
00:24:19,770 --> 00:24:26,160
like a bootstrapping mechanism you can

514
00:24:22,470 --> 00:24:27,390
think of it conceptually like PGP but

515
00:24:26,160 --> 00:24:30,240
it's only there to initiate a whole

516
00:24:27,390 --> 00:24:33,150
group and and of course going to be

517
00:24:30,240 --> 00:24:36,210
confidential and authenticated and I

518
00:24:33,150 --> 00:24:38,220
mentioned 2015 there was this

519
00:24:36,210 --> 00:24:40,799
asynchronous ratcheting trees concept

520
00:24:38,220 --> 00:24:43,140
which is great because it introduced the

521
00:24:40,799 --> 00:24:47,129
notion of doing things efficiently in

522
00:24:43,140 --> 00:24:52,110
groups by using binary trees and so this

523
00:24:47,130 --> 00:24:54,659
was later refined by the University in

524
00:24:52,110 --> 00:24:56,370
Ariha from Paris who came up with a

525
00:24:54,659 --> 00:25:00,950
similar concept that was a bit more

526
00:24:56,370 --> 00:25:02,908
flexible and which is called tree ten so

527
00:25:00,950 --> 00:25:07,169
from now on you're going to see a lot of

528
00:25:02,909 --> 00:25:13,200
binary trees in slides so the idea here

529
00:25:07,169 --> 00:25:16,380
is that we have a tree where we put all

530
00:25:13,200 --> 00:25:18,059
the participants at the leaf node so

531
00:25:16,380 --> 00:25:21,419
that the green nodes at the buttons they

532
00:25:18,059 --> 00:25:26,570
call leaves and so we have six

533
00:25:21,419 --> 00:25:29,130
participants here in a group and so

534
00:25:26,570 --> 00:25:30,870
there is one rule about these trees and

535
00:25:29,130 --> 00:25:35,970
that is that there is a secrecy

536
00:25:30,870 --> 00:25:40,530
invariant so every leaf has a secret

537
00:25:35,970 --> 00:25:44,909
which is only known to the member and

538
00:25:40,530 --> 00:25:47,580
the intermediate nodes like G H I J in

539
00:25:44,909 --> 00:25:49,520
between they also have secrets and

540
00:25:47,580 --> 00:25:53,309
finally K which we call the root node

541
00:25:49,520 --> 00:25:56,190
also has a secret now this the secrecy

542
00:25:53,309 --> 00:25:58,950
invariant is that every member in the

543
00:25:56,190 --> 00:26:01,500
group knows the secrets from the

544
00:25:58,950 --> 00:26:04,770
intermediate nodes above them all the

545
00:26:01,500 --> 00:26:08,250
way up to the root node K just a rule

546
00:26:04,770 --> 00:26:10,950
for now so as an example C has private

547
00:26:08,250 --> 00:26:12,720
keys for H J and K and so this this

548
00:26:10,950 --> 00:26:16,320
secret can be used to derive a

549
00:26:12,720 --> 00:26:18,830
public/private key pair and so all of a

550
00:26:16,320 --> 00:26:21,840
sudden we can do stuff with that we can

551
00:26:18,830 --> 00:26:25,710
for example

552
00:26:21,840 --> 00:26:30,658
I have subgroups so if we take the

553
00:26:25,710 --> 00:26:32,700
example of H so both C and D know the

554
00:26:30,659 --> 00:26:34,529
public and private key of the the

555
00:26:32,700 --> 00:26:37,259
intermediate node age so if we want to

556
00:26:34,529 --> 00:26:39,899
send a message to just C and D we might

557
00:26:37,259 --> 00:26:42,330
as well send it to only H because both C

558
00:26:39,899 --> 00:26:44,158
and E will be able to decrypt it and

559
00:26:42,330 --> 00:26:46,678
worsley we can do the same with J and

560
00:26:44,159 --> 00:26:49,409
then all of sudden we send a message to

561
00:26:46,679 --> 00:26:52,289
a B C and D and finally of course with K

562
00:26:49,409 --> 00:26:54,570
we can send a message to everybody so we

563
00:26:52,289 --> 00:26:58,109
have these subgroups that make things a

564
00:26:54,570 --> 00:27:00,869
lot more efficient and by definition the

565
00:26:58,109 --> 00:27:04,559
the root key K in this case is known to

566
00:27:00,869 --> 00:27:07,589
everybody in the group and these trees

567
00:27:04,559 --> 00:27:09,989
really are the the state of the protocol

568
00:27:07,589 --> 00:27:12,839
and they can be changed over time with

569
00:27:09,989 --> 00:27:14,429
four operations and one is create as the

570
00:27:12,839 --> 00:27:16,609
name says it's very straightforward it's

571
00:27:14,429 --> 00:27:19,559
when you create a group you can add

572
00:27:16,609 --> 00:27:22,109
members to a group you can remove people

573
00:27:19,559 --> 00:27:25,678
and you can do what we call an update

574
00:27:22,109 --> 00:27:30,539
which is essentially updating the key

575
00:27:25,679 --> 00:27:32,249
material so we're gonna briefly walk

576
00:27:30,539 --> 00:27:33,809
through one example I know it's a lot to

577
00:27:32,249 --> 00:27:36,809
take in when you see that the first time

578
00:27:33,809 --> 00:27:38,668
and this should give you a brief

579
00:27:36,809 --> 00:27:40,289
overview so how do we rotate the group

580
00:27:38,669 --> 00:27:42,059
key which is very important when we've

581
00:27:40,289 --> 00:27:44,129
just evicted a member of the group we

582
00:27:42,059 --> 00:27:47,729
want to have a new group key how do we

583
00:27:44,129 --> 00:27:51,178
do that let's say F wants to do such an

584
00:27:47,729 --> 00:27:53,309
update so F isn't read here what I was

585
00:27:51,179 --> 00:27:55,919
going to do it's going to generate a

586
00:27:53,309 --> 00:27:59,309
fresh leaf key so it's it will create

587
00:27:55,919 --> 00:28:01,830
generate a random secret and then it

588
00:27:59,309 --> 00:28:04,799
will take that secret and conceptually

589
00:28:01,830 --> 00:28:06,718
it will hash it up the path all the way

590
00:28:04,799 --> 00:28:09,629
to the root so this is what we call the

591
00:28:06,719 --> 00:28:11,580
direct path in orange here so it will

592
00:28:09,629 --> 00:28:14,939
take the the secret value in F it will

593
00:28:11,580 --> 00:28:17,489
hash it storage an I hash it again store

594
00:28:14,940 --> 00:28:20,909
it in K and now we have a new group

595
00:28:17,489 --> 00:28:21,570
secret except nobody except F knows

596
00:28:20,909 --> 00:28:23,669
about that

597
00:28:21,570 --> 00:28:26,519
so we need to communicate that to the

598
00:28:23,669 --> 00:28:29,339
rest of the group and since we have

599
00:28:26,519 --> 00:28:31,139
these efficient subgroups we don't need

600
00:28:29,339 --> 00:28:32,849
to tell everybody individually what the

601
00:28:31,139 --> 00:28:34,300
new group key is we can use the

602
00:28:32,849 --> 00:28:37,720
subgroups

603
00:28:34,300 --> 00:28:39,760
so we call them the copass because

604
00:28:37,720 --> 00:28:42,310
they're along this direct path our

605
00:28:39,760 --> 00:28:45,970
siblings of the direct path is a sibling

606
00:28:42,310 --> 00:28:51,220
of F J sibling of I and so it's good

607
00:28:45,970 --> 00:28:52,600
enough to just encrypt to E and J and

608
00:28:51,220 --> 00:28:54,010
then we've reached everybody in the

609
00:28:52,600 --> 00:28:57,399
group so this is a lot more efficient

610
00:28:54,010 --> 00:29:00,190
than doing five operations we only do

611
00:28:57,400 --> 00:29:05,620
two here so we're gonna take the value

612
00:29:00,190 --> 00:29:07,540
of I and encrypted to E and then I also

613
00:29:05,620 --> 00:29:09,939
knows what's in I and can just hash it

614
00:29:07,540 --> 00:29:14,970
up to K and then also knows K and

615
00:29:09,940 --> 00:29:17,140
conversely we do the same thing with J

616
00:29:14,970 --> 00:29:19,750
now you might wonder how you get such a

617
00:29:17,140 --> 00:29:23,290
tree in the first place and and that's

618
00:29:19,750 --> 00:29:26,110
rather straightforward you can start a

619
00:29:23,290 --> 00:29:28,060
group by fetching unit keys for every

620
00:29:26,110 --> 00:29:31,510
member and those are readily available

621
00:29:28,060 --> 00:29:37,230
on the delivery service and then you

622
00:29:31,510 --> 00:29:37,230
place these in it keys as the leaves and

623
00:29:37,980 --> 00:29:45,730
so new members occupy one one spot in on

624
00:29:42,220 --> 00:29:47,110
the leaf layer and that's it you can

625
00:29:45,730 --> 00:29:49,090
already communicate with the whole group

626
00:29:47,110 --> 00:29:51,699
except that it's not very efficient so

627
00:29:49,090 --> 00:29:53,649
as new members come online after they've

628
00:29:51,700 --> 00:29:56,520
been added they can each do an update

629
00:29:53,650 --> 00:29:58,990
operation during which they will

630
00:29:56,520 --> 00:30:02,139
generate a new secret hash it up all the

631
00:29:58,990 --> 00:30:04,480
way and communicate that to the rest of

632
00:30:02,140 --> 00:30:06,730
the group so after a little while this

633
00:30:04,480 --> 00:30:08,290
tree will become complete in terms of

634
00:30:06,730 --> 00:30:16,930
inner nodes right now they're completely

635
00:30:08,290 --> 00:30:19,120
empty so this is really only about

636
00:30:16,930 --> 00:30:22,390
efficiency there's no need to fill this

637
00:30:19,120 --> 00:30:24,760
tree other than to make it more

638
00:30:22,390 --> 00:30:27,040
efficient and now finally how do we

639
00:30:24,760 --> 00:30:29,980
remove someone so say a wants to remove

640
00:30:27,040 --> 00:30:32,889
D how do we do that

641
00:30:29,980 --> 00:30:35,170
a sends a message to a whole group which

642
00:30:32,890 --> 00:30:38,500
is confidential and authenticated saying

643
00:30:35,170 --> 00:30:40,750
D should be removed and so the rest of

644
00:30:38,500 --> 00:30:42,110
the group is going to do just that it's

645
00:30:40,750 --> 00:30:45,230
going to remove D

646
00:30:42,110 --> 00:30:48,260
on top of that it's also going to remove

647
00:30:45,230 --> 00:30:51,230
all the nodes on the direct path of D

648
00:30:48,260 --> 00:30:54,169
all the way to the root why do we do

649
00:30:51,230 --> 00:30:57,380
that this is because we have the secrecy

650
00:30:54,169 --> 00:30:59,809
invariant so D knew all the secrets in

651
00:30:57,380 --> 00:31:02,120
its direct path so if we want to remove

652
00:30:59,809 --> 00:31:05,779
it effectively from the group we need to

653
00:31:02,120 --> 00:31:09,260
delete everything that is a secret that

654
00:31:05,779 --> 00:31:13,250
is known to D so now we have a tree that

655
00:31:09,260 --> 00:31:16,960
looks a little bit broken but we still

656
00:31:13,250 --> 00:31:20,750
have some subgroups we have G and I so

657
00:31:16,960 --> 00:31:24,830
we can still encrypt to G and I and then

658
00:31:20,750 --> 00:31:27,169
to C separately if need be but what we

659
00:31:24,830 --> 00:31:30,710
can also do is we can do an update to

660
00:31:27,169 --> 00:31:35,419
restore some of the inner nodes and to

661
00:31:30,710 --> 00:31:38,210
heal the tree terms of efficiency but

662
00:31:35,419 --> 00:31:41,179
again this is really only about

663
00:31:38,210 --> 00:31:43,399
efficiency and there wouldn't be any

664
00:31:41,179 --> 00:31:45,019
problem to have these howls in there so

665
00:31:43,399 --> 00:31:46,699
what's interesting here is that their

666
00:31:45,019 --> 00:31:48,169
concept is very flexible because you can

667
00:31:46,700 --> 00:31:50,840
puncture this tree wherever you want you

668
00:31:48,169 --> 00:31:52,850
can take out nodes and it's your gonna

669
00:31:50,840 --> 00:31:57,590
work it's just not gonna be as good in

670
00:31:52,850 --> 00:31:59,209
terms of efficiency brief overview I

671
00:31:57,590 --> 00:32:00,799
already mentioned there are these four

672
00:31:59,210 --> 00:32:02,840
operations we call them handshake

673
00:32:00,799 --> 00:32:06,889
messages and they're exchanged among the

674
00:32:02,840 --> 00:32:08,689
members of the group on top of that we

675
00:32:06,889 --> 00:32:11,439
have application messages so typically

676
00:32:08,690 --> 00:32:17,179
those are going to be text messages that

677
00:32:11,440 --> 00:32:18,649
group members exchanged so we have

678
00:32:17,179 --> 00:32:21,980
different requirements for ordering

679
00:32:18,649 --> 00:32:23,479
right now control messages they have to

680
00:32:21,980 --> 00:32:26,750
be completely ordered so it's it's

681
00:32:23,480 --> 00:32:28,429
important to know who comes first so if

682
00:32:26,750 --> 00:32:30,080
somebody tries to remove someone from

683
00:32:28,429 --> 00:32:31,519
the group while somebody else is trying

684
00:32:30,080 --> 00:32:34,220
to add someone that needs to be in order

685
00:32:31,519 --> 00:32:37,130
to that and so this is solved on the

686
00:32:34,220 --> 00:32:39,139
server side right now application

687
00:32:37,130 --> 00:32:41,299
messages however there only need to be

688
00:32:39,139 --> 00:32:43,850
somewhat ordered presenter so it doesn't

689
00:32:41,299 --> 00:32:46,700
matter if Alice and Bob send messages at

690
00:32:43,850 --> 00:32:50,360
the same time since they have their own

691
00:32:46,700 --> 00:32:51,330
send chains this is not going to create

692
00:32:50,360 --> 00:32:56,939
any conflict

693
00:32:51,330 --> 00:32:59,070
between the two let's go back to the

694
00:32:56,940 --> 00:33:03,060
efficiency to look at it in a little

695
00:32:59,070 --> 00:33:04,800
more detail so this is an example of a

696
00:33:03,060 --> 00:33:07,679
pairwise protocol in a group of six

697
00:33:04,800 --> 00:33:09,800
members and so they're all interconnect

698
00:33:07,680 --> 00:33:14,190
we all have these sessions between them

699
00:33:09,800 --> 00:33:17,370
and so things simply don't scare very

700
00:33:14,190 --> 00:33:19,500
well because you have to encrypt five

701
00:33:17,370 --> 00:33:21,179
times when somebody sends a message and

702
00:33:19,500 --> 00:33:22,950
it could be expensive I mean could be

703
00:33:21,180 --> 00:33:25,680
symmetric encryption early but typically

704
00:33:22,950 --> 00:33:28,290
with say that over roger doger then it

705
00:33:25,680 --> 00:33:32,430
would also be a fireman on operations

706
00:33:28,290 --> 00:33:35,850
which are more expensive so pairwise

707
00:33:32,430 --> 00:33:37,230
sending it works in our van so for those

708
00:33:35,850 --> 00:33:39,179
who have never seen that notation means

709
00:33:37,230 --> 00:33:43,350
the order of magnitude is the size of

710
00:33:39,180 --> 00:33:46,620
the group if there are n members this

711
00:33:43,350 --> 00:33:48,810
hack I mentioned before which improves

712
00:33:46,620 --> 00:33:50,639
the efficiency sender keys so the way

713
00:33:48,810 --> 00:33:53,360
this works is that rather than

714
00:33:50,640 --> 00:33:56,580
encrypting every message individually

715
00:33:53,360 --> 00:33:58,320
what members can do is then they can fan

716
00:33:56,580 --> 00:34:00,810
out an encryption key to everybody else

717
00:33:58,320 --> 00:34:04,050
and then reuse that encryption key for

718
00:34:00,810 --> 00:34:05,730
new messages so then they encrypt them

719
00:34:04,050 --> 00:34:10,500
once for the whole group and the server

720
00:34:05,730 --> 00:34:12,510
takes care of Fanning it out so sending

721
00:34:10,500 --> 00:34:15,719
out this encryption key is still in awe

722
00:34:12,510 --> 00:34:18,000
of N which is not not too great but then

723
00:34:15,719 --> 00:34:19,649
sending every message afterwards is in O

724
00:34:18,000 --> 00:34:24,630
of 1 which is the best efficiency you

725
00:34:19,650 --> 00:34:26,820
can get the problem here is it's not so

726
00:34:24,630 --> 00:34:28,560
great in terms of security so you can

727
00:34:26,820 --> 00:34:30,420
have forward security because this

728
00:34:28,560 --> 00:34:32,130
encryption key could be hashed forward

729
00:34:30,420 --> 00:34:34,800
as long as everybody agrees on that

730
00:34:32,130 --> 00:34:37,500
problem is when you evict someone from a

731
00:34:34,800 --> 00:34:38,910
group everybody needs to send out a new

732
00:34:37,500 --> 00:34:40,260
encryption key because you don't want

733
00:34:38,909 --> 00:34:44,009
the old encryption key to be known to

734
00:34:40,260 --> 00:34:45,360
the member who just got evicted and so

735
00:34:44,010 --> 00:34:47,670
this is where you get a really bad

736
00:34:45,360 --> 00:34:50,130
efficiency so either you you don't care

737
00:34:47,670 --> 00:34:53,700
about that and you take that risk into

738
00:34:50,130 --> 00:34:55,710
account or you have a an order of

739
00:34:53,699 --> 00:34:58,669
magnitude of N squared which is really

740
00:34:55,710 --> 00:35:01,530
bad because everybody sends out that key

741
00:34:58,670 --> 00:35:03,830
so how does it look when we have these

742
00:35:01,530 --> 00:35:05,990
sub groups

743
00:35:03,830 --> 00:35:09,040
then if the tree is fully populated

744
00:35:05,990 --> 00:35:12,979
which typically happens fairly quickly

745
00:35:09,040 --> 00:35:15,290
as members come online then we can have

746
00:35:12,980 --> 00:35:17,900
an efficiency that is logarithmic that

747
00:35:15,290 --> 00:35:20,000
is not linear anymore and so for that

748
00:35:17,900 --> 00:35:22,700
group this really makes a difference you

749
00:35:20,000 --> 00:35:24,380
can look at an example so say we have a

750
00:35:22,700 --> 00:35:26,029
group of a hundred thousand members of

751
00:35:24,380 --> 00:35:27,620
course this is a super large number that

752
00:35:26,030 --> 00:35:29,960
is not very realistic

753
00:35:27,620 --> 00:35:32,810
typically for consumer messaging but in

754
00:35:29,960 --> 00:35:34,850
business messaging there can be large

755
00:35:32,810 --> 00:35:40,670
groups of hundreds thousands maybe ten

756
00:35:34,850 --> 00:35:42,740
thousands of people in it so and let's

757
00:35:40,670 --> 00:35:46,550
say that sending out a new key roughly

758
00:35:42,740 --> 00:35:47,839
takes one kilobyte of payload a key is

759
00:35:46,550 --> 00:35:51,830
relatively small but then there is a

760
00:35:47,840 --> 00:35:53,600
header that sparing et cetera so we

761
00:35:51,830 --> 00:35:55,940
would have a hundred thousand operations

762
00:35:53,600 --> 00:35:57,680
cryptographic operations to send it out

763
00:35:55,940 --> 00:35:59,150
with a pairwise protocol and we're

764
00:35:57,680 --> 00:36:02,960
looking at a payload of a hundred

765
00:35:59,150 --> 00:36:07,040
megabytes in such a large group if we do

766
00:36:02,960 --> 00:36:09,620
that with trees MLS we have 17

767
00:36:07,040 --> 00:36:12,740
operations and a payload of 17 people

768
00:36:09,620 --> 00:36:15,620
birds so it's an extreme example of

769
00:36:12,740 --> 00:36:18,020
course but it really illustrates on what

770
00:36:15,620 --> 00:36:19,250
we can do here and and this makes a real

771
00:36:18,020 --> 00:36:20,780
difference because at the end of the day

772
00:36:19,250 --> 00:36:23,000
it comes down to whether or not a user

773
00:36:20,780 --> 00:36:25,820
can use it if you're on an older Android

774
00:36:23,000 --> 00:36:27,500
phone on a 2g network it might be tricky

775
00:36:25,820 --> 00:36:31,430
to do hundred thousand operation and

776
00:36:27,500 --> 00:36:33,350
then send out 100 megabytes so we have a

777
00:36:31,430 --> 00:36:36,259
comparison chart here with the great

778
00:36:33,350 --> 00:36:38,299
line fan-out which is constant it's

779
00:36:36,260 --> 00:36:40,640
always n and then the sender keys which

780
00:36:38,300 --> 00:36:43,040
can be very expensive sometimes but

781
00:36:40,640 --> 00:36:46,609
great for sending out messages and then

782
00:36:43,040 --> 00:36:52,370
MLS which tries to be better in every

783
00:36:46,610 --> 00:36:55,130
operation in the rest so we've talked

784
00:36:52,370 --> 00:36:57,290
about n transcription what else do we

785
00:36:55,130 --> 00:37:00,740
need so there is also metadata this is

786
00:36:57,290 --> 00:37:03,529
one of the hardest subjects for secure

787
00:37:00,740 --> 00:37:08,750
messaging protocols what what do we need

788
00:37:03,530 --> 00:37:10,310
to protect their hope what's important

789
00:37:08,750 --> 00:37:13,220
and we can distinguish between two kinds

790
00:37:10,310 --> 00:37:15,950
of metadata there is observable metadata

791
00:37:13,220 --> 00:37:20,419
which is what you can see when when

792
00:37:15,950 --> 00:37:23,210
you look at network traffic packets this

793
00:37:20,420 --> 00:37:24,650
is not really in scope for MLS this can

794
00:37:23,210 --> 00:37:26,570
be solved with other techniques like

795
00:37:24,650 --> 00:37:28,910
Onion Routing ixnay et cetera

796
00:37:26,570 --> 00:37:30,410
for now we assume there is TLS which

797
00:37:28,910 --> 00:37:32,899
gives you some security and the

798
00:37:30,410 --> 00:37:38,210
transport layer between clients and

799
00:37:32,900 --> 00:37:39,920
server and just just be clear it's

800
00:37:38,210 --> 00:37:41,990
typically not in the scope of any

801
00:37:39,920 --> 00:37:45,320
end-to-end encrypted protocol and is

802
00:37:41,990 --> 00:37:47,450
observable metadata and as persistent

803
00:37:45,320 --> 00:37:52,070
metadata metadata that you need to keep

804
00:37:47,450 --> 00:37:55,430
for some time typically server-side so

805
00:37:52,070 --> 00:37:58,700
this is more interesting and we should

806
00:37:55,430 --> 00:38:01,759
look at that a little more closely so

807
00:37:58,700 --> 00:38:03,830
what happens on the server side servers

808
00:38:01,760 --> 00:38:07,040
they would keep messages in queues

809
00:38:03,830 --> 00:38:08,569
typically so if there is a device and in

810
00:38:07,040 --> 00:38:09,950
the real world that device will have a

811
00:38:08,570 --> 00:38:14,060
queue and the server with all the

812
00:38:09,950 --> 00:38:15,830
messages it hasn't fetched yet and and

813
00:38:14,060 --> 00:38:20,630
can eventually fetch when it comes back

814
00:38:15,830 --> 00:38:23,569
online so but but for now that's stored

815
00:38:20,630 --> 00:38:26,030
on the server and so what we can do here

816
00:38:23,570 --> 00:38:27,890
in order to minimize metadata is that we

817
00:38:26,030 --> 00:38:30,640
can encrypt the sender of the message

818
00:38:27,890 --> 00:38:33,140
because the server doesn't really care

819
00:38:30,640 --> 00:38:35,120
who the sender is long term it needs to

820
00:38:33,140 --> 00:38:37,430
know once perhaps but it really only

821
00:38:35,120 --> 00:38:43,250
cares to each queue it's supposed to put

822
00:38:37,430 --> 00:38:45,140
it then we can also have arbitrary

823
00:38:43,250 --> 00:38:47,540
padding of the messages so we can make

824
00:38:45,140 --> 00:38:49,190
them all look very BIG's of it and on

825
00:38:47,540 --> 00:38:52,130
the server the network side you cannot

826
00:38:49,190 --> 00:38:54,530
really distinguish on what's in the

827
00:38:52,130 --> 00:38:56,330
messages so we we have this

828
00:38:54,530 --> 00:38:59,420
multi-layered approach where we have two

829
00:38:56,330 --> 00:39:01,040
headers one is visible to the server the

830
00:38:59,420 --> 00:39:03,800
other one is encrypted under the group

831
00:39:01,040 --> 00:39:06,170
key and then finally the actual messages

832
00:39:03,800 --> 00:39:09,010
is encrypted under key that is sender

833
00:39:06,170 --> 00:39:11,090
specific including the padding and the

834
00:39:09,010 --> 00:39:14,630
padding of course also helps with

835
00:39:11,090 --> 00:39:18,530
observer of metadata there so very

836
00:39:14,630 --> 00:39:20,690
briefly about in liability this is a

837
00:39:18,530 --> 00:39:23,780
property that was introduced with OTR

838
00:39:20,690 --> 00:39:25,710
and it means that it can refute certain

839
00:39:23,780 --> 00:39:29,280
things

840
00:39:25,710 --> 00:39:32,340
so the problem with any protocol that

841
00:39:29,280 --> 00:39:35,610
uses exactly one key in a group is that

842
00:39:32,340 --> 00:39:37,320
that key is great and efficient because

843
00:39:35,610 --> 00:39:38,970
you only encrypt once but you don't know

844
00:39:37,320 --> 00:39:41,070
who encrypted it it could be anyone in

845
00:39:38,970 --> 00:39:42,750
the group so you in order to get

846
00:39:41,070 --> 00:39:45,000
authenticity you need to sign messages

847
00:39:42,750 --> 00:39:46,620
and as soon as you do that you have some

848
00:39:45,000 --> 00:39:49,190
cryptographic proof of who the author is

849
00:39:46,620 --> 00:39:53,880
so what can you do about that

850
00:39:49,190 --> 00:39:55,560
and one way here is simply that the the

851
00:39:53,880 --> 00:39:58,110
silent keys the public keys for the

852
00:39:55,560 --> 00:40:00,720
signatures they can be exchanged over a

853
00:39:58,110 --> 00:40:03,480
one-to-one dnieper channel so you sir

854
00:40:00,720 --> 00:40:04,890
know when you receive a message who sent

855
00:40:03,480 --> 00:40:07,130
it but you cannot really prove it to

856
00:40:04,890 --> 00:40:07,129
anyone

857
00:40:07,710 --> 00:40:13,290
so the authorship becomes deniable and

858
00:40:11,310 --> 00:40:14,820
also the participation in a group so

859
00:40:13,290 --> 00:40:21,690
this is another lever of deniability

860
00:40:14,820 --> 00:40:23,610
that also becomes enable and all of that

861
00:40:21,690 --> 00:40:33,240
is a peg to the server the motion

862
00:40:23,610 --> 00:40:35,670
previously very interesting subject is

863
00:40:33,240 --> 00:40:38,729
Federation so I mentioned earlier on the

864
00:40:35,670 --> 00:40:41,610
wish list can we achieve it are we

865
00:40:38,730 --> 00:40:43,890
limited to one delivery service and so

866
00:40:41,610 --> 00:40:45,960
order delivery service does is its

867
00:40:43,890 --> 00:40:47,819
routing messages and it is ordering

868
00:40:45,960 --> 00:40:49,410
handshake messages so we are still

869
00:40:47,820 --> 00:40:52,410
working on finding a way that this

870
00:40:49,410 --> 00:40:54,930
global ordering is not an issue but for

871
00:40:52,410 --> 00:40:57,000
now it is a limitation of the trick and

872
00:40:54,930 --> 00:41:00,620
algorithm so we have to work with that

873
00:40:57,000 --> 00:41:03,150
but if we could find a way to distribute

874
00:41:00,620 --> 00:41:05,609
this ordering problem among different

875
00:41:03,150 --> 00:41:06,960
delivery services and Federation would

876
00:41:05,610 --> 00:41:09,840
actually become possible so it could

877
00:41:06,960 --> 00:41:14,820
have multiple servers that inter

878
00:41:09,840 --> 00:41:17,610
communicate and so the strategy there is

879
00:41:14,820 --> 00:41:21,780
twofold so there is a simple one and

880
00:41:17,610 --> 00:41:23,370
that is without redundancy so if you

881
00:41:21,780 --> 00:41:24,750
have a group you can simply say that

882
00:41:23,370 --> 00:41:26,160
this group belongs to one of the

883
00:41:24,750 --> 00:41:28,680
delivery services and that's a

884
00:41:26,160 --> 00:41:30,720
completely reasonable assumption in a

885
00:41:28,680 --> 00:41:34,529
number of scenarios and then you have

886
00:41:30,720 --> 00:41:36,368
one delivery service that will be

887
00:41:34,530 --> 00:41:39,220
responsible for the ordering

888
00:41:36,369 --> 00:41:42,009
and and that's gonna work well until

889
00:41:39,220 --> 00:41:43,980
that server goes down and this is where

890
00:41:42,009 --> 00:41:46,839
you don't have any particular redundancy

891
00:41:43,980 --> 00:41:48,130
however if servers go down and generally

892
00:41:46,839 --> 00:41:52,808
you generally have a problem with

893
00:41:48,130 --> 00:41:54,940
messaging not only with ordering but if

894
00:41:52,809 --> 00:41:57,519
you wanted to tackle that problem

895
00:41:54,940 --> 00:42:02,230
there would be more fancy waving it and

896
00:41:57,519 --> 00:42:05,169
that is simply to have a consensus of

897
00:42:02,230 --> 00:42:06,640
which delivery service is actually

898
00:42:05,170 --> 00:42:13,150
responsible for ordering at a given

899
00:42:06,640 --> 00:42:14,348
point in time I want to say a few words

900
00:42:13,150 --> 00:42:15,730
about business messaging because

901
00:42:14,349 --> 00:42:19,470
typically when we talk about messaging

902
00:42:15,730 --> 00:42:23,710
we think about consumer messaging but

903
00:42:19,470 --> 00:42:25,328
there is a new trend really in business

904
00:42:23,710 --> 00:42:29,170
communication there is more and more

905
00:42:25,329 --> 00:42:31,420
people using smartphones and so that

906
00:42:29,170 --> 00:42:34,559
takes at work they expect the same news

907
00:42:31,420 --> 00:42:37,690
experience they they have at home so

908
00:42:34,559 --> 00:42:41,079
they want to send short informal

909
00:42:37,690 --> 00:42:42,609
messages in real time and so far

910
00:42:41,079 --> 00:42:49,539
typically what they had at work was just

911
00:42:42,609 --> 00:42:51,400
the email and so there is this trend to

912
00:42:49,539 --> 00:42:53,349
to move away from email and do more

913
00:42:51,400 --> 00:42:56,609
messaging and so this is closely related

914
00:42:53,349 --> 00:42:58,930
to MLS this is why I'm bringing it up

915
00:42:56,609 --> 00:43:00,970
some some companies moved away

916
00:42:58,930 --> 00:43:02,470
completely from email even only using

917
00:43:00,970 --> 00:43:04,328
messaging for internal communication

918
00:43:02,470 --> 00:43:06,910
because they found that to be a lot

919
00:43:04,329 --> 00:43:08,589
better that's of course for a company to

920
00:43:06,910 --> 00:43:12,399
decide but there are clear upsides and

921
00:43:08,589 --> 00:43:17,619
and there is this trend so but what's

922
00:43:12,400 --> 00:43:18,910
the the real challenge here when we come

923
00:43:17,619 --> 00:43:21,970
to that so there's the encryption

924
00:43:18,910 --> 00:43:24,098
challenge and and that is that the

925
00:43:21,970 --> 00:43:26,288
reality is that most business messaging

926
00:43:24,099 --> 00:43:28,180
today only uses TLS so only transport

927
00:43:26,289 --> 00:43:30,640
encryption it's not end-to-end encrypted

928
00:43:28,180 --> 00:43:33,160
so messages are in clear-text somewhere

929
00:43:30,640 --> 00:43:37,118
typically on the server somewhere in

930
00:43:33,160 --> 00:43:38,828
between and this has a lot to do with

931
00:43:37,119 --> 00:43:40,930
the fact that end-to-end encryption at

932
00:43:38,829 --> 00:43:43,509
scale in large groups which are very

933
00:43:40,930 --> 00:43:46,538
important for business messaging is

934
00:43:43,509 --> 00:43:47,900
complicated and expensive so this is

935
00:43:46,539 --> 00:43:51,200
really the buffer neck

936
00:43:47,900 --> 00:43:57,590
the other problem is that on the future

937
00:43:51,200 --> 00:43:59,660
side of things so most solutions only

938
00:43:57,590 --> 00:44:01,190
enable you know use of the same

939
00:43:59,660 --> 00:44:04,100
organization to talk to each other

940
00:44:01,190 --> 00:44:07,010
and email it's still popular because you

941
00:44:04,100 --> 00:44:09,740
can actually reach everyone and this is

942
00:44:07,010 --> 00:44:12,620
where MLS can potentially also help with

943
00:44:09,740 --> 00:44:17,149
Federation that you can talk across

944
00:44:12,620 --> 00:44:19,490
company borders right so to summer

945
00:44:17,150 --> 00:44:22,010
summarize very briefly we've been

946
00:44:19,490 --> 00:44:24,979
talking about so MLS seems to be a new

947
00:44:22,010 --> 00:44:27,650
standard for secure messaging especially

948
00:44:24,980 --> 00:44:32,090
in out groups with modern security

949
00:44:27,650 --> 00:44:34,880
properties and the idea is for it to be

950
00:44:32,090 --> 00:44:38,120
robust and have a usable open

951
00:44:34,880 --> 00:44:40,550
specification and and can actually be

952
00:44:38,120 --> 00:44:42,259
used as a drop-in replacement in for

953
00:44:40,550 --> 00:44:44,630
products that don't have an - an

954
00:44:42,260 --> 00:44:53,240
encryption yet or have a different kind

955
00:44:44,630 --> 00:44:55,940
that is not as good so we have a

956
00:44:53,240 --> 00:44:58,819
web-site messaging layer security that

957
00:44:55,940 --> 00:45:02,690
rocks which is going to point you at all

958
00:44:58,820 --> 00:45:05,660
the material that exists around MLS

959
00:45:02,690 --> 00:45:09,040
mailing list and there's a lot of it's

960
00:45:05,660 --> 00:45:13,310
in github the official draft documents

961
00:45:09,040 --> 00:45:16,070
so that concludes this talk I would like

962
00:45:13,310 --> 00:45:18,590
to thank everybody of course in the MLS

963
00:45:16,070 --> 00:45:21,680
group but specifically Benjamin and

964
00:45:18,590 --> 00:45:22,640
Cottrell happy with this talk that's it

965
00:45:21,680 --> 00:45:25,719
for now thank you

966
00:45:22,640 --> 00:45:25,719
[Music]

967
00:45:26,870 --> 00:45:34,969
[Applause]

968
00:45:31,800 --> 00:45:34,969
[Music]

969
00:45:36,759 --> 00:45:41,630
can you hear me um have you looked at

970
00:45:39,949 --> 00:45:43,640
Facebook's implementation of message

971
00:45:41,630 --> 00:45:47,119
franking and whether you would consider

972
00:45:43,640 --> 00:45:51,859
that being useful in MLS to report abuse

973
00:45:47,119 --> 00:45:54,170
- oh no a service provider yeah so this

974
00:45:51,859 --> 00:45:56,808
was never really included in the scope

975
00:45:54,170 --> 00:46:00,289
as such I mean the the mechanism is

976
00:45:56,809 --> 00:46:02,660
known so we've had some discussions

977
00:46:00,289 --> 00:46:05,150
about it and I think the conclusion was

978
00:46:02,660 --> 00:46:09,019
that it could be out done outside of MLS

979
00:46:05,150 --> 00:46:11,150
it's not fundamentally compatible but

980
00:46:09,019 --> 00:46:13,729
it's not necessarily mechanism that

981
00:46:11,150 --> 00:46:15,589
everybody would want to use so if we can

982
00:46:13,729 --> 00:46:22,118
solve it outside of MLS I mean I think

983
00:46:15,589 --> 00:46:26,689
that's good for a - okay thank you hi hi

984
00:46:22,119 --> 00:46:31,039
the MLS is mostly seems to be a black

985
00:46:26,689 --> 00:46:33,618
chain transactions they are also the

986
00:46:31,039 --> 00:46:37,880
same kind of the binary transaction

987
00:46:33,619 --> 00:46:41,599
hashing every single apply is anything

988
00:46:37,880 --> 00:46:47,509
which brought from Bitcoin transactions

989
00:46:41,599 --> 00:46:49,039
to form the MLS protocol no not directly

990
00:46:47,509 --> 00:46:51,049
I mean fundamentally there is no

991
00:46:49,039 --> 00:46:54,140
consensus in MLS as such there's no

992
00:46:51,049 --> 00:46:55,699
consensus needed so potentially on the

993
00:46:54,140 --> 00:47:00,319
Federation aspect that could be

994
00:46:55,699 --> 00:47:04,459
interesting but I think MLS in terms of

995
00:47:00,319 --> 00:47:09,288
mechanics was really inspired by TLS how

996
00:47:04,459 --> 00:47:12,769
about the backward compatibility like in

997
00:47:09,289 --> 00:47:16,999
the chain ABC the NB must initially

998
00:47:12,769 --> 00:47:19,218
there is a group C was added later point

999
00:47:16,999 --> 00:47:21,049
of time so so you want to see the

1000
00:47:19,219 --> 00:47:25,219
previous messages which here and we are

1001
00:47:21,049 --> 00:47:27,439
talking about is this possible so in

1002
00:47:25,219 --> 00:47:29,869
order for that to be possible you would

1003
00:47:27,439 --> 00:47:32,149
have to build something on top of MLS so

1004
00:47:29,869 --> 00:47:35,959
that these either the keys of previous

1005
00:47:32,150 --> 00:47:38,089
messages are being stored the problem is

1006
00:47:35,959 --> 00:47:39,370
you destroy the property of forward

1007
00:47:38,089 --> 00:47:41,830
secrecy if you do that

1008
00:47:39,370 --> 00:47:45,790
so this is a triumph of security and a

1009
00:47:41,830 --> 00:47:48,040
future it's possible to do that outside

1010
00:47:45,790 --> 00:47:50,410
of MLS it's and we thought it's always

1011
00:47:48,040 --> 00:47:52,810
easier to build a very secure protocol

1012
00:47:50,410 --> 00:47:57,009
and then if people want to weaken it

1013
00:47:52,810 --> 00:47:59,320
afterwards so be it but it's much harder

1014
00:47:57,010 --> 00:48:01,300
to you know build something that has all

1015
00:47:59,320 --> 00:48:05,560
these features and then put some

1016
00:48:01,300 --> 00:48:07,980
security on top of it okay thank you you

1017
00:48:05,560 --> 00:48:11,080
mentioned when you were talking about

1018
00:48:07,980 --> 00:48:14,230
diability the people could preserve

1019
00:48:11,080 --> 00:48:17,200
deniability by exchanging identity keys

1020
00:48:14,230 --> 00:48:19,930
1 to 1 over oh like a deniable 1 to 1

1021
00:48:17,200 --> 00:48:23,560
channel but then doesn't that introduce

1022
00:48:19,930 --> 00:48:26,379
the N squared problem of having to do

1023
00:48:23,560 --> 00:48:29,320
pairwise communications between everyone

1024
00:48:26,380 --> 00:48:30,400
in the group yes I mean at the time of

1025
00:48:29,320 --> 00:48:33,490
the creation of the group absolutely

1026
00:48:30,400 --> 00:48:35,050
this is linear clearly this is not

1027
00:48:33,490 --> 00:48:38,229
efficient but it gives you deniability

1028
00:48:35,050 --> 00:48:44,350
so unfortunately we haven't found a way

1029
00:48:38,230 --> 00:48:46,060
to do efficient deniability thank you so

1030
00:48:44,350 --> 00:48:47,500
you mentioned the inspiration is TLS and

1031
00:48:46,060 --> 00:48:49,390
one of the significant differences is a

1032
00:48:47,500 --> 00:48:51,220
TLS deals with sessions that last 4

1033
00:48:49,390 --> 00:48:53,109
seconds whereas this deals with sessions

1034
00:48:51,220 --> 00:48:55,180
that last 4 months one of the things

1035
00:48:53,110 --> 00:48:58,500
that systems like open whisper have to

1036
00:48:55,180 --> 00:49:00,609
deal with is devices getting out of sync

1037
00:48:58,500 --> 00:49:03,070
losing their state like open whisper

1038
00:49:00,610 --> 00:49:08,710
deals with device giving a bad or old

1039
00:49:03,070 --> 00:49:10,120
Android backup so does MLS tart does

1040
00:49:08,710 --> 00:49:12,460
emili´s address the question of

1041
00:49:10,120 --> 00:49:16,210
resyncing clients and retrying and like

1042
00:49:12,460 --> 00:49:19,270
I I was on a low and one of the really

1043
00:49:16,210 --> 00:49:24,090
hard parts is getting retry that is

1044
00:49:19,270 --> 00:49:26,440
secure yeah that's a very good question

1045
00:49:24,090 --> 00:49:29,410
so of course there is the assumption

1046
00:49:26,440 --> 00:49:31,780
that the client state is not gonna go

1047
00:49:29,410 --> 00:49:34,629
out of sync initially if it does however

1048
00:49:31,780 --> 00:49:36,100
and that's a you know real life scenario

1049
00:49:34,630 --> 00:49:38,260
it just happens the memory gets

1050
00:49:36,100 --> 00:49:39,790
corrupted

1051
00:49:38,260 --> 00:49:41,680
[Music]

1052
00:49:39,790 --> 00:49:44,110
approach right now is to remove the

1053
00:49:41,680 --> 00:49:47,399
client and add it as a new device or as

1054
00:49:44,110 --> 00:49:49,930
a new member we're looking into

1055
00:49:47,400 --> 00:49:55,180
exploring you know what other mechanisms

1056
00:49:49,930 --> 00:49:58,330
we could use there in so there is no

1057
00:49:55,180 --> 00:49:59,620
session you can reset anymore as such so

1058
00:49:58,330 --> 00:50:01,480
it really comes down to adding and

1059
00:49:59,620 --> 00:50:04,210
removing a client whether we make that

1060
00:50:01,480 --> 00:50:12,850
one atomic operation or something we

1061
00:50:04,210 --> 00:50:15,100
have to look into so the question was

1062
00:50:12,850 --> 00:50:19,870
what the time is

1063
00:50:15,100 --> 00:50:22,060
great question so the you know it is I

1064
00:50:19,870 --> 00:50:24,130
didn't mention it in the talk so right

1065
00:50:22,060 --> 00:50:28,060
now the the core protocol we're trying

1066
00:50:24,130 --> 00:50:30,010
to stabilize it because we want to enter

1067
00:50:28,060 --> 00:50:31,900
a phase where academia can really start

1068
00:50:30,010 --> 00:50:33,310
looking at it and come up you know with

1069
00:50:31,900 --> 00:50:35,830
pen and paper proofs and form a

1070
00:50:33,310 --> 00:50:37,270
verification and if you keep on

1071
00:50:35,830 --> 00:50:42,069
tendering a protocol all the time that's

1072
00:50:37,270 --> 00:50:45,100
not very motivating so that is what is

1073
00:50:42,070 --> 00:50:46,900
hopefully going to start soon and we

1074
00:50:45,100 --> 00:50:50,110
expect that to last a year maybe

1075
00:50:46,900 --> 00:50:53,530
so that sometime 2020 we are in a state

1076
00:50:50,110 --> 00:50:56,200
that is maybe not final in in ITF

1077
00:50:53,530 --> 00:50:58,180
terminology but very close to that so

1078
00:50:56,200 --> 00:50:59,980
that we can start you know implementing

1079
00:50:58,180 --> 00:51:06,089
it into some products and see how it

1080
00:50:59,980 --> 00:51:06,090
works if it works it will work

1081
00:51:07,560 --> 00:51:10,020
[Applause]

