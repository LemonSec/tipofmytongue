1
00:00:00,030 --> 00:00:02,820
welcome to controlled chaos the

2
00:00:01,530 --> 00:00:05,370
inevitable marriage of DevOps and

3
00:00:02,820 --> 00:00:07,770
security by dr. Nicole for Erin and

4
00:00:05,370 --> 00:00:10,200
Kelly Shortridge here in South Pacific

5
00:00:07,770 --> 00:00:11,610
before we begin a few brief notes please

6
00:00:10,200 --> 00:00:13,320
stop at the Business Hall located in

7
00:00:11,610 --> 00:00:15,059
Mandalay Bay Oceanside and shoreline

8
00:00:13,320 --> 00:00:18,330
ballrooms on level 2 during the day and

9
00:00:15,059 --> 00:00:19,890
for the reception at 5:30 tonight the

10
00:00:18,330 --> 00:00:21,810
blackhat arsenal is in the business hall

11
00:00:19,890 --> 00:00:24,090
in level 2 and please join us for the

12
00:00:21,810 --> 00:00:26,430
Pony Awards tonight in lagoon JKL at

13
00:00:24,090 --> 00:00:27,900
6:30 p.m. please put all your phones on

14
00:00:26,430 --> 00:00:29,369
vibrate which makes it easier for the

15
00:00:27,900 --> 00:00:30,570
rest of the audience to ignore the

16
00:00:29,369 --> 00:00:32,519
ringing while you wait for your voice be

17
00:00:30,570 --> 00:00:40,920
able to pick it up now dr. four is

18
00:00:32,520 --> 00:00:42,059
grading Kelly Shortridge thanks so much

19
00:00:40,920 --> 00:00:44,399
for having us here today

20
00:00:42,059 --> 00:00:46,379
and thank you all for being here again

21
00:00:44,399 --> 00:00:47,850
welcome to controlled chaos the

22
00:00:46,379 --> 00:00:49,649
inevitable marriage of DevOps and

23
00:00:47,850 --> 00:00:53,280
security will be in the rap room

24
00:00:49,649 --> 00:00:55,379
afterwards to take any questions first

25
00:00:53,280 --> 00:00:57,899
I'm Kelly Shortridge I'm VP of product

26
00:00:55,379 --> 00:00:59,640
strategy at capsule 8 a Linux production

27
00:00:57,899 --> 00:01:00,890
detection and Prevention start-up based

28
00:00:59,640 --> 00:01:05,159
in Brooklyn

29
00:01:00,890 --> 00:01:07,350
I'm Nicole for scrren I was founder and

30
00:01:05,159 --> 00:01:10,200
chief scientist at Dora and now I do

31
00:01:07,350 --> 00:01:13,710
research and strategy at Google cloud

32
00:01:10,200 --> 00:01:16,229
and I have been lead investigator of the

33
00:01:13,710 --> 00:01:19,289
largest DevOps studies to date so we

34
00:01:16,229 --> 00:01:20,960
paired up today are doing the info SEC

35
00:01:19,290 --> 00:01:23,189
and the DevOps

36
00:01:20,960 --> 00:01:24,960
to set the tone for the talk I'm gonna

37
00:01:23,189 --> 00:01:26,369
invoke peter baelish from Game of

38
00:01:24,960 --> 00:01:29,250
Thrones if you've seen it

39
00:01:26,369 --> 00:01:31,500
I said chaos isn't a pit chaos is a

40
00:01:29,250 --> 00:01:33,570
ladder what he meant by that is chaos

41
00:01:31,500 --> 00:01:35,729
can actually be empowering it can help

42
00:01:33,570 --> 00:01:40,649
us climb to levels exceeding our current

43
00:01:35,729 --> 00:01:44,210
ones so has anyone here heard the phrase

44
00:01:40,650 --> 00:01:46,439
software is eating the world right so

45
00:01:44,210 --> 00:01:50,579
the interesting thing about this phrase

46
00:01:46,439 --> 00:01:52,798
is that mark Andreasen said this back

47
00:01:50,579 --> 00:01:55,979
before most companies were really

48
00:01:52,799 --> 00:01:58,700
leveraging software to do very much but

49
00:01:55,979 --> 00:02:03,149
if we think about what's happening today

50
00:01:58,700 --> 00:02:05,520
most companies who are around and who

51
00:02:03,149 --> 00:02:08,068
are in the top 10 in terms of market cap

52
00:02:05,520 --> 00:02:09,750
really are leveraging software to

53
00:02:08,068 --> 00:02:13,700
deliver value to their customers and to

54
00:02:09,750 --> 00:02:16,770
their key stakeholders and DevOps

55
00:02:13,700 --> 00:02:19,589
and for whatever definition of DevOps we

56
00:02:16,770 --> 00:02:21,450
choose to use DevOps is that core

57
00:02:19,590 --> 00:02:24,500
methodology so that's changing the way

58
00:02:21,450 --> 00:02:29,100
that we develop and deliver software and

59
00:02:24,500 --> 00:02:31,280
it really is driving software's

60
00:02:29,100 --> 00:02:35,160
devouring of the world

61
00:02:31,280 --> 00:02:37,530
however most InfoSec people just

62
00:02:35,160 --> 00:02:39,750
completely turn off their brains

63
00:02:37,530 --> 00:02:43,010
whenever DevOps is mentioned they don't

64
00:02:39,750 --> 00:02:47,010
want to hear it they really don't care

65
00:02:43,010 --> 00:02:50,850
but if you do this it's like turning off

66
00:02:47,010 --> 00:02:52,709
your ears when you hear that you don't

67
00:02:50,850 --> 00:02:56,489
care about listening to health advice

68
00:02:52,709 --> 00:02:58,380
because you're not sick and I have the

69
00:02:56,490 --> 00:02:59,910
same reaction when I talk to people in

70
00:02:58,380 --> 00:03:04,440
financial services industry when they

71
00:02:59,910 --> 00:03:05,820
tell me I'm not a software company and I

72
00:03:04,440 --> 00:03:07,709
think they do this to their own

73
00:03:05,820 --> 00:03:09,209
detriment into their own doom really

74
00:03:07,709 --> 00:03:14,010
because if we think about what's

75
00:03:09,209 --> 00:03:16,560
happening financial services no longer

76
00:03:14,010 --> 00:03:21,500
deliver value by holding gold bars and

77
00:03:16,560 --> 00:03:27,660
safes what they do is they use software

78
00:03:21,500 --> 00:03:31,519
to help us switch bits so that we can

79
00:03:27,660 --> 00:03:36,600
transfer money safely securely quickly

80
00:03:31,519 --> 00:03:39,720
reliably we deliver a better more

81
00:03:36,600 --> 00:03:41,220
interesting customer experience I know

82
00:03:39,720 --> 00:03:42,660
people who have chosen their banks

83
00:03:41,220 --> 00:03:45,720
because they like the app on their phone

84
00:03:42,660 --> 00:03:48,750
or it allows us to do high-frequency

85
00:03:45,720 --> 00:03:51,209
trading or I mean the blockchain right

86
00:03:48,750 --> 00:03:53,310
blockchain blockchain watching that's

87
00:03:51,209 --> 00:03:55,340
really what software is doing for us

88
00:03:53,310 --> 00:03:57,570
today

89
00:03:55,340 --> 00:03:59,220
similarly information security is

90
00:03:57,570 --> 00:04:01,380
actually shifting I think you can think

91
00:03:59,220 --> 00:04:04,140
of it as the InfoSec industry being at a

92
00:04:01,380 --> 00:04:05,940
crossroads a role is still important but

93
00:04:04,140 --> 00:04:07,458
it's in peril if we ignore this shift

94
00:04:05,940 --> 00:04:09,810
that's happening right now

95
00:04:07,459 --> 00:04:12,510
basically we've come to warn you and

96
00:04:09,810 --> 00:04:14,250
guide you into the light either InfoSec

97
00:04:12,510 --> 00:04:16,560
can marry with DevOps and conquer the

98
00:04:14,250 --> 00:04:21,060
world hand-in-hand or it can be rendered

99
00:04:16,560 --> 00:04:22,770
impotent and irrelevant InfoSec I think

100
00:04:21,060 --> 00:04:25,169
because we're all clever were very adept

101
00:04:22,770 --> 00:04:27,120
at lying to ourselves and I hear comic

102
00:04:25,169 --> 00:04:28,590
like countless information

103
00:04:27,120 --> 00:04:30,180
security professionals telling

104
00:04:28,590 --> 00:04:32,369
themselves that DevOps isn't relevant to

105
00:04:30,180 --> 00:04:34,500
them that DevOps isn't actually the

106
00:04:32,370 --> 00:04:36,540
future or they believe that something

107
00:04:34,500 --> 00:04:39,690
like dev sec ops is going to save them

108
00:04:36,540 --> 00:04:41,820
but neither denial more dev SEC ops is

109
00:04:39,690 --> 00:04:44,340
actually going to save InfoSec in this

110
00:04:41,820 --> 00:04:46,260
future DevOps is going to carve its own

111
00:04:44,340 --> 00:04:48,030
path of security and that's more

112
00:04:46,260 --> 00:04:51,479
realistic and reasonable than you

113
00:04:48,030 --> 00:04:53,369
imagined in this talk we will guide you

114
00:04:51,479 --> 00:04:56,460
towards understanding how to control and

115
00:04:53,370 --> 00:04:58,350
harness chaos and importantly how to use

116
00:04:56,460 --> 00:05:01,859
that to make a marriage to DevOps long

117
00:04:58,350 --> 00:05:03,539
and fulfilling first we'll clear up what

118
00:05:01,860 --> 00:05:05,970
DevOps means because a lot of InfoSec

119
00:05:03,539 --> 00:05:08,520
people get it very wrong and what DevOps

120
00:05:05,970 --> 00:05:10,770
as priorities are next we'll discuss how

121
00:05:08,520 --> 00:05:13,469
InfoSec should evolve to line with

122
00:05:10,770 --> 00:05:16,049
DevOps third we'll go through the die

123
00:05:13,470 --> 00:05:18,860
triad very mysterious which is a modern

124
00:05:16,050 --> 00:05:21,360
improvement akan the classic CIA triad

125
00:05:18,860 --> 00:05:23,550
then we'll cover how to apply chaos to

126
00:05:21,360 --> 00:05:25,710
InfoSec from mindset testing to

127
00:05:23,550 --> 00:05:26,970
defensive strategies and finally we'll

128
00:05:25,710 --> 00:05:31,710
talk about how to make this marriage

129
00:05:26,970 --> 00:05:36,510
work so now we get to talk about what

130
00:05:31,710 --> 00:05:39,830
the DevOps is so who here has heard the

131
00:05:36,510 --> 00:05:39,830
DevOps and agile are the same thing

132
00:05:39,860 --> 00:05:50,070
lies damned lies so let's like take a

133
00:05:48,690 --> 00:05:51,750
little history lesson by the way I used

134
00:05:50,070 --> 00:05:57,020
to be a professor so I get to lecture

135
00:05:51,750 --> 00:06:01,860
again yay okay so agile capital a agile

136
00:05:57,020 --> 00:06:07,430
started as this effort to try to help us

137
00:06:01,860 --> 00:06:09,900
deliver features better but it was only

138
00:06:07,430 --> 00:06:15,539
this effort where we brought together

139
00:06:09,900 --> 00:06:18,179
development and business together it's

140
00:06:15,539 --> 00:06:19,650
also where we a way an effort where we

141
00:06:18,180 --> 00:06:21,780
take our meeting standing up instead of

142
00:06:19,650 --> 00:06:26,460
sitting down I don't know if we've heard

143
00:06:21,780 --> 00:06:29,849
this before so the challenge though is

144
00:06:26,460 --> 00:06:32,820
the only speeds up development and

145
00:06:29,849 --> 00:06:34,550
business but then what happens is we're

146
00:06:32,820 --> 00:06:36,930
creating all of these features in

147
00:06:34,550 --> 00:06:38,500
traditionally two-week sprints faster

148
00:06:36,930 --> 00:06:42,070
and faster and faster

149
00:06:38,500 --> 00:06:45,760
we've left these features or these

150
00:06:42,070 --> 00:06:49,469
deliverables know where to go and so

151
00:06:45,760 --> 00:06:54,400
what we do at the end of that is we have

152
00:06:49,470 --> 00:06:58,720
the traditional no crowd ops anybody

153
00:06:54,400 --> 00:07:01,210
else here InfoSec Co here refuses to

154
00:06:58,720 --> 00:07:04,120
raise their hand yeah I'd love you

155
00:07:01,210 --> 00:07:07,060
people alright so I was I was IT ops I

156
00:07:04,120 --> 00:07:10,330
was just admin for a long time so what

157
00:07:07,060 --> 00:07:13,660
we like to do is known as change

158
00:07:10,330 --> 00:07:16,169
approval which is a very formalized way

159
00:07:13,660 --> 00:07:18,700
to say no because what's happened is

160
00:07:16,170 --> 00:07:22,270
developers are now instead of throwing

161
00:07:18,700 --> 00:07:24,159
us a very formalized giant ball of

162
00:07:22,270 --> 00:07:25,599
software they're throwing us lots of

163
00:07:24,160 --> 00:07:28,300
balls of software every two weeks and

164
00:07:25,600 --> 00:07:28,840
they're lighting us on fire well that

165
00:07:28,300 --> 00:07:33,370
sucks

166
00:07:28,840 --> 00:07:36,130
and so what happens is DevOps

167
00:07:33,370 --> 00:07:38,770
has extended this wall it's not just

168
00:07:36,130 --> 00:07:40,690
agile it's extending it it's not I know

169
00:07:38,770 --> 00:07:42,099
everyone starts back there like Nicole

170
00:07:40,690 --> 00:07:45,180
but it's not just Devon ops

171
00:07:42,100 --> 00:07:48,250
thank you I wasn't born yesterday it's

172
00:07:45,180 --> 00:07:50,980
like we've summarized it it's dev all

173
00:07:48,250 --> 00:07:53,020
the way into ops which by the way has it

174
00:07:50,980 --> 00:07:54,340
leaked is formally intended to include

175
00:07:53,020 --> 00:07:57,400
InfoSec as well

176
00:07:54,340 --> 00:08:00,330
it's dev test ops QA info second it's

177
00:07:57,400 --> 00:08:04,239
everything and it's more than just

178
00:08:00,330 --> 00:08:06,820
automation it's changing cultural

179
00:08:04,240 --> 00:08:09,820
mindsets it's changing processes it's

180
00:08:06,820 --> 00:08:12,310
it's changing everything to include

181
00:08:09,820 --> 00:08:13,930
agile to include lean processes to

182
00:08:12,310 --> 00:08:16,270
include culture so that we can develop

183
00:08:13,930 --> 00:08:19,360
and deliver software in smaller pieces

184
00:08:16,270 --> 00:08:21,460
more stable more reliably now sometimes

185
00:08:19,360 --> 00:08:23,500
people in DevOps will say well DevOps

186
00:08:21,460 --> 00:08:25,989
has no single formal definition

187
00:08:23,500 --> 00:08:28,690
therefore I can't do it right well guess

188
00:08:25,990 --> 00:08:30,280
what agile has one single formal

189
00:08:28,690 --> 00:08:33,610
definition that was codified in the

190
00:08:30,280 --> 00:08:36,699
agile manifesto that didn't do anybody

191
00:08:33,610 --> 00:08:38,380
one lick of good either because every

192
00:08:36,700 --> 00:08:40,300
single executive made up their own

193
00:08:38,380 --> 00:08:41,890
definition when they wanted their gold

194
00:08:40,299 --> 00:08:44,290
star on their forehead and to collect

195
00:08:41,890 --> 00:08:46,930
their big fat bonus check so doesn't

196
00:08:44,290 --> 00:08:49,689
matter what matters is that we deliver

197
00:08:46,930 --> 00:08:51,069
good outcomes and it's InfoSec

198
00:08:49,690 --> 00:08:51,880
professionals we know what those

199
00:08:51,070 --> 00:08:53,740
outcomes are

200
00:08:51,880 --> 00:08:57,790
an information security standpoint right

201
00:08:53,740 --> 00:09:01,990
as software professionals we know what

202
00:08:57,790 --> 00:09:05,560
those outcomes are and what those

203
00:09:01,990 --> 00:09:09,040
outcomes are is developing and

204
00:09:05,560 --> 00:09:11,770
delivering software with responsibility

205
00:09:09,040 --> 00:09:15,430
with accountability with speed and

206
00:09:11,770 --> 00:09:17,829
stability securely and reliably so it's

207
00:09:15,430 --> 00:09:20,349
not just automation it's also about

208
00:09:17,830 --> 00:09:22,000
culture it's about pulling everyone

209
00:09:20,350 --> 00:09:25,900
together so that we can make things

210
00:09:22,000 --> 00:09:28,180
better and deliver value we don't do the

211
00:09:25,900 --> 00:09:30,160
DevOps because DevOps we don't do

212
00:09:28,180 --> 00:09:32,770
continuous delivery because continuous

213
00:09:30,160 --> 00:09:37,839
delivery we want to pull everyone

214
00:09:32,770 --> 00:09:41,890
together and make things better now

215
00:09:37,840 --> 00:09:44,080
it's interesting because here we talk

216
00:09:41,890 --> 00:09:47,970
about how DevOps is cross the chasm and

217
00:09:44,080 --> 00:09:51,850
I think it's important to note this in

218
00:09:47,970 --> 00:09:54,640
2009 there was a seminal talk at

219
00:09:51,850 --> 00:09:58,600
velocity by John all spa and Paul

220
00:09:54,640 --> 00:10:01,210
Hammond and they talked about how they

221
00:09:58,600 --> 00:10:04,960
were doing ten deploys per day at Flickr

222
00:10:01,210 --> 00:10:09,520
and it was interesting because the room

223
00:10:04,960 --> 00:10:12,040
was split the way we used to develop in

224
00:10:09,520 --> 00:10:14,890
deliver software was in this waterfall

225
00:10:12,040 --> 00:10:17,079
phase gate tradition where it was very

226
00:10:14,890 --> 00:10:19,449
structured it was very slow and at the

227
00:10:17,080 --> 00:10:21,160
end of this process we had a very very

228
00:10:19,450 --> 00:10:24,160
large piece of code that we would then

229
00:10:21,160 --> 00:10:26,410
deploy and it basically lit every one on

230
00:10:24,160 --> 00:10:28,420
fire I don't know if everyone everyone's

231
00:10:26,410 --> 00:10:29,439
been around for a few years I have we

232
00:10:28,420 --> 00:10:31,000
let everyone on fire

233
00:10:29,440 --> 00:10:32,740
I'll spawned him and talked about

234
00:10:31,000 --> 00:10:35,320
developing delivering 10 times a day

235
00:10:32,740 --> 00:10:36,430
half the room said this is amazing this

236
00:10:35,320 --> 00:10:38,020
is changing the world

237
00:10:36,430 --> 00:10:41,380
the other half the room said you're

238
00:10:38,020 --> 00:10:44,500
monsters how dare you like people on

239
00:10:41,380 --> 00:10:49,210
fire ten times a day we've now been

240
00:10:44,500 --> 00:10:52,390
doing this for a decade we see most of

241
00:10:49,210 --> 00:10:55,480
the industry doing this now why am I

242
00:10:52,390 --> 00:11:00,280
saying this is cross the chasm one the

243
00:10:55,480 --> 00:11:03,490
business benefits are striking too there

244
00:11:00,280 --> 00:11:05,220
is no turning the ship around too many

245
00:11:03,490 --> 00:11:07,529
people are seeing

246
00:11:05,220 --> 00:11:12,060
huge benefits from this too many

247
00:11:07,529 --> 00:11:14,100
organisations are doing this also if we

248
00:11:12,060 --> 00:11:17,099
need to develop and deliver software and

249
00:11:14,100 --> 00:11:20,129
see outcomes and see value and see

250
00:11:17,100 --> 00:11:25,829
benefits and make sure that we're doing

251
00:11:20,129 --> 00:11:29,730
this securely we either need your help

252
00:11:25,829 --> 00:11:32,399
or we don't we will either get expert

253
00:11:29,730 --> 00:11:36,209
input and guidance and I hope y'all on

254
00:11:32,399 --> 00:11:38,550
board or we will figure this out from

255
00:11:36,209 --> 00:11:43,888
first principles and we'll figure out

256
00:11:38,550 --> 00:11:47,670
how to do security ourselves I don't

257
00:11:43,889 --> 00:11:50,310
know about you but some people do not

258
00:11:47,670 --> 00:11:51,899
know how to do info like Intel security

259
00:11:50,310 --> 00:11:53,008
like you do who here knows how to do

260
00:11:51,899 --> 00:11:57,240
info sight better than some random

261
00:11:53,009 --> 00:12:00,560
software engineer if you didn't raise

262
00:11:57,240 --> 00:12:02,939
your hand like what are you doing here I

263
00:12:00,560 --> 00:12:05,489
don't know about you but like I work in

264
00:12:02,939 --> 00:12:07,079
Silicon Valley these random 22 year old

265
00:12:05,490 --> 00:12:08,639
Blake software engineers that think they

266
00:12:07,079 --> 00:12:11,459
can derive anything from first

267
00:12:08,639 --> 00:12:16,170
principles better than an expert drive

268
00:12:11,459 --> 00:12:17,758
me crazy but if InfoSec refuses to help

269
00:12:16,170 --> 00:12:20,910
us figure out how to build secure

270
00:12:17,759 --> 00:12:22,139
software we have to build secure

271
00:12:20,910 --> 00:12:27,120
software so we will figure it out

272
00:12:22,139 --> 00:12:29,879
ourselves I would much rather we would

273
00:12:27,120 --> 00:12:31,829
much rather have your expert help and

274
00:12:29,879 --> 00:12:34,949
guidance but if that expert helping

275
00:12:31,829 --> 00:12:40,199
guidance comes down to telling us no we

276
00:12:34,949 --> 00:12:42,689
don't do it so how do we do this by

277
00:12:40,199 --> 00:12:46,589
integrating once disparate roles Devon

278
00:12:42,689 --> 00:12:49,620
Ops used to just not be a thing ops used

279
00:12:46,589 --> 00:12:53,790
to only say no but we did this by

280
00:12:49,620 --> 00:12:55,470
shifting left by having ops talk to

281
00:12:53,790 --> 00:12:57,180
Deb's earlier and say by the way we're

282
00:12:55,470 --> 00:13:00,809
saying no because everything you build

283
00:12:57,180 --> 00:13:04,170
breaks it never scales it's never

284
00:13:00,809 --> 00:13:06,389
reliable if you build it this way things

285
00:13:04,170 --> 00:13:09,240
work better if you deploy more

286
00:13:06,389 --> 00:13:11,100
frequently it's not a giant thing that

287
00:13:09,240 --> 00:13:14,429
has a huge blast radius that breaks

288
00:13:11,100 --> 00:13:17,939
everything so what happens if we do the

289
00:13:14,429 --> 00:13:20,839
same thing with security what if you

290
00:13:17,939 --> 00:13:20,839
have input earlier

291
00:13:21,220 --> 00:13:29,900
James wicket has said the ratio from of

292
00:13:25,130 --> 00:13:31,640
InfoSec to ops to Deb's is one to ten to

293
00:13:29,900 --> 00:13:35,060
a hundred y'all don't scale we know this

294
00:13:31,640 --> 00:13:39,530
so if we integrate you earlier to have

295
00:13:35,060 --> 00:13:40,729
input this chef the ship left can be

296
00:13:39,530 --> 00:13:44,150
amazing it can build a more

297
00:13:40,730 --> 00:13:46,400
collaborative culture it can contribute

298
00:13:44,150 --> 00:13:49,730
to superior outcomes like stability and

299
00:13:46,400 --> 00:13:55,069
availability and resiliency but if

300
00:13:49,730 --> 00:13:56,570
InfoSec resists this we may just bypass

301
00:13:55,070 --> 00:13:58,970
you and it's not because we don't like

302
00:13:56,570 --> 00:14:04,360
you it's because we have to build secure

303
00:13:58,970 --> 00:14:04,360
systems and we will find ways to do this

304
00:14:05,770 --> 00:14:11,569
now we as I mentioned we know that this

305
00:14:09,470 --> 00:14:12,470
is super important and security is the

306
00:14:11,570 --> 00:14:13,960
next frontier

307
00:14:12,470 --> 00:14:17,750
[Music]

308
00:14:13,960 --> 00:14:21,230
so InfoSec can contribute to this with

309
00:14:17,750 --> 00:14:25,780
your hard-earned expertise and you can

310
00:14:21,230 --> 00:14:28,820
join DevOps or you can stand aside as

311
00:14:25,780 --> 00:14:37,060
DevOps figures this out and carves its

312
00:14:28,820 --> 00:14:40,130
own path I would love to see InfoSec

313
00:14:37,060 --> 00:14:43,280
contributing this expertise that we just

314
00:14:40,130 --> 00:14:45,610
don't have and so many companies are

315
00:14:43,280 --> 00:14:48,319
starting to do this and pitch in and

316
00:14:45,610 --> 00:14:50,540
what it will probably begin with is via

317
00:14:48,320 --> 00:14:53,360
simulant assimilating security concepts

318
00:14:50,540 --> 00:14:57,380
into things like chaos and resilience

319
00:14:53,360 --> 00:14:58,760
engineering who here has heard of chaos

320
00:14:57,380 --> 00:15:00,740
resilience engineering very familiar

321
00:14:58,760 --> 00:15:05,120
with some of this in here ok a few hands

322
00:15:00,740 --> 00:15:08,140
this stuff is super cool so chaos

323
00:15:05,120 --> 00:15:12,410
engineering is when you do things like

324
00:15:08,140 --> 00:15:15,500
randomly kill instances and randomly

325
00:15:12,410 --> 00:15:17,260
kill infrastructure and boxes to see

326
00:15:15,500 --> 00:15:22,370
what's gonna happen

327
00:15:17,260 --> 00:15:24,700
so Netflix pioneered this you kill boxes

328
00:15:22,370 --> 00:15:27,260
because then what you do is you learn

329
00:15:24,700 --> 00:15:30,830
from the behavior of the system and then

330
00:15:27,260 --> 00:15:32,750
you build that security back in you

331
00:15:30,830 --> 00:15:36,830
build those things back in because

332
00:15:32,750 --> 00:15:39,650
we don't know what will happen or we

333
00:15:36,830 --> 00:15:43,160
want to be able to respond to things

334
00:15:39,650 --> 00:15:46,010
that happen in the wild okay so what

335
00:15:43,160 --> 00:15:50,500
what people don't always say is do chaos

336
00:15:46,010 --> 00:15:54,560
in test before you do chaos in product

337
00:15:50,500 --> 00:15:58,700
but this is great right it helps you

338
00:15:54,560 --> 00:16:01,430
uncover systemic weaknesses it helps you

339
00:15:58,700 --> 00:16:04,940
make your design and your processes

340
00:16:01,430 --> 00:16:07,489
better it helps the organization gain

341
00:16:04,940 --> 00:16:09,350
more confidence in their prod systems it

342
00:16:07,490 --> 00:16:12,350
helps you uncover the needs of your

343
00:16:09,350 --> 00:16:13,670
customers and your end users I don't

344
00:16:12,350 --> 00:16:16,100
know if y'all remember this is gonna

345
00:16:13,670 --> 00:16:17,930
like show how old I am way back in the

346
00:16:16,100 --> 00:16:19,700
day when Amazon went down like Amazon

347
00:16:17,930 --> 00:16:22,729
had this big crash but Netflix stayed up

348
00:16:19,700 --> 00:16:24,770
and everyone was like oh this is because

349
00:16:22,730 --> 00:16:27,740
Netflix has some super secret account

350
00:16:24,770 --> 00:16:30,590
because they're all on like AWS servers

351
00:16:27,740 --> 00:16:33,830
no what actually happened was Netflix

352
00:16:30,590 --> 00:16:36,700
had been doing chaos engineering they

353
00:16:33,830 --> 00:16:38,930
had been doing they call it chaos monkey

354
00:16:36,700 --> 00:16:40,940
because it just like randomly goes and

355
00:16:38,930 --> 00:16:43,280
kills things and and they were able to

356
00:16:40,940 --> 00:16:46,250
stay up because they had built systems

357
00:16:43,280 --> 00:16:50,870
that auto failover into other machines

358
00:16:46,250 --> 00:16:54,650
or other regions and I love this example

359
00:16:50,870 --> 00:16:58,580
because so much of it is like what we

360
00:16:54,650 --> 00:17:00,470
what we see in InfoSec so any successful

361
00:16:58,580 --> 00:17:02,839
marriage if we talk about DevOps and

362
00:17:00,470 --> 00:17:05,720
InfoSec require shared goals and luckily

363
00:17:02,839 --> 00:17:09,110
as i mentioning DevOps and InfoSec share

364
00:17:05,720 --> 00:17:11,150
these same priorities so what does

365
00:17:09,109 --> 00:17:13,609
DevOps prioritize I've kind of talked

366
00:17:11,150 --> 00:17:15,530
about this before we want to optimize

367
00:17:13,609 --> 00:17:20,139
delivery performance so that we can

368
00:17:15,530 --> 00:17:23,359
deliver value the evidence shows that

369
00:17:20,140 --> 00:17:24,920
when we do this it differentiates

370
00:17:23,359 --> 00:17:26,329
between high performers and low

371
00:17:24,920 --> 00:17:30,380
performers and I'll talk about that just

372
00:17:26,329 --> 00:17:32,570
a second so one important finding that

373
00:17:30,380 --> 00:17:35,900
we found is that speed and stability

374
00:17:32,570 --> 00:17:38,419
aren't at odds if we go fast we're more

375
00:17:35,900 --> 00:17:40,670
stable and it's because when we deliver

376
00:17:38,420 --> 00:17:42,860
faster we're delivering and smaller and

377
00:17:40,670 --> 00:17:43,340
smaller bits so we have a smaller blast

378
00:17:42,860 --> 00:17:44,020
radius

379
00:17:43,340 --> 00:17:45,699
where

380
00:17:44,020 --> 00:17:47,260
less likely to have errors and when we

381
00:17:45,700 --> 00:17:50,890
do have errors they're easier to debug

382
00:17:47,260 --> 00:17:52,990
so the systems come up faster we also

383
00:17:50,890 --> 00:17:54,820
see that we have better security

384
00:17:52,990 --> 00:17:58,360
outcomes and security as part of

385
00:17:54,820 --> 00:18:00,310
resilience so security and speed are not

386
00:17:58,360 --> 00:18:02,949
at odds either and this is particularly

387
00:18:00,310 --> 00:18:05,139
the case when we shift left on security

388
00:18:02,950 --> 00:18:08,380
because we're building security and up

389
00:18:05,140 --> 00:18:09,030
front we see better security outcomes as

390
00:18:08,380 --> 00:18:12,850
well

391
00:18:09,030 --> 00:18:16,200
now CIN CD continuous integration

392
00:18:12,850 --> 00:18:18,699
continuous delivery we help with changes

393
00:18:16,200 --> 00:18:23,230
build changes into product rapidly

394
00:18:18,700 --> 00:18:25,450
sustainably and safely now CD involves a

395
00:18:23,230 --> 00:18:28,600
few priorities like I've mentioned

396
00:18:25,450 --> 00:18:31,090
building quality in fast feedback loops

397
00:18:28,600 --> 00:18:35,189
the faster that we can detect changes by

398
00:18:31,090 --> 00:18:38,889
having robust automated testing Suites

399
00:18:35,190 --> 00:18:41,650
ideally having info sex input into some

400
00:18:38,890 --> 00:18:45,130
of these testing Suites allows us to

401
00:18:41,650 --> 00:18:48,430
detect security problems it allow it

402
00:18:45,130 --> 00:18:51,700
also allows your input to scale which i

403
00:18:48,430 --> 00:18:55,240
think is super super important helps us

404
00:18:51,700 --> 00:18:58,540
improve all of these outcomes

405
00:18:55,240 --> 00:19:00,370
now what specific metrics help us

406
00:18:58,540 --> 00:19:02,320
identify elite performers from the rest

407
00:19:00,370 --> 00:19:04,300
now I keep saying like high performance

408
00:19:02,320 --> 00:19:05,889
and elite performance quickly I take

409
00:19:04,300 --> 00:19:08,770
these four metrics that I'm about to

410
00:19:05,890 --> 00:19:11,350
talk about I throw them into the hopper

411
00:19:08,770 --> 00:19:13,870
statistical term and I do a cluster

412
00:19:11,350 --> 00:19:16,659
analysis and what we see is that they

413
00:19:13,870 --> 00:19:19,540
fall into groups I have high performers

414
00:19:16,660 --> 00:19:20,890
medium performers low performers and a

415
00:19:19,540 --> 00:19:24,940
subset of those high performers have

416
00:19:20,890 --> 00:19:26,320
been elite performers spoiler alert the

417
00:19:24,940 --> 00:19:29,260
the new reports coming out in a couple

418
00:19:26,320 --> 00:19:30,760
of weeks for now six years in a row we

419
00:19:29,260 --> 00:19:33,040
see statistically significant

420
00:19:30,760 --> 00:19:35,260
differences where speed stability go

421
00:19:33,040 --> 00:19:37,899
together and there are differences and

422
00:19:35,260 --> 00:19:39,250
I'm a researcher so I'm real creative so

423
00:19:37,900 --> 00:19:41,740
I call them high performers and medium

424
00:19:39,250 --> 00:19:44,020
performers and low performers but they

425
00:19:41,740 --> 00:19:46,900
all go together we don't see differences

426
00:19:44,020 --> 00:19:49,450
now these are the measures lead time for

427
00:19:46,900 --> 00:19:51,280
changes how long it takes to go from

428
00:19:49,450 --> 00:19:53,350
code commit to code running in

429
00:19:51,280 --> 00:19:55,720
production how fast is your pipeline

430
00:19:53,350 --> 00:19:57,549
this is important because it's both

431
00:19:55,720 --> 00:20:00,129
about your normal change process

432
00:19:57,549 --> 00:20:02,139
and your emergency change process when

433
00:20:00,129 --> 00:20:05,738
everything it's the fan how hard is it

434
00:20:02,139 --> 00:20:07,449
to recover now it's also about keeping

435
00:20:05,739 --> 00:20:09,970
up with compliance and regulatory

436
00:20:07,450 --> 00:20:13,080
changes as security patches it's not

437
00:20:09,970 --> 00:20:16,360
just about features it's about security

438
00:20:13,080 --> 00:20:18,610
now release frequency how often are we

439
00:20:16,360 --> 00:20:21,309
pushing code this is very much related

440
00:20:18,610 --> 00:20:23,498
the more often we push code the better

441
00:20:21,309 --> 00:20:25,450
we do now these are our two speed

442
00:20:23,499 --> 00:20:26,950
measures I said there were four measures

443
00:20:25,450 --> 00:20:30,399
so I also have to stability measures

444
00:20:26,950 --> 00:20:33,460
time to restore service how long does it

445
00:20:30,399 --> 00:20:36,789
take us to restore when we go down how

446
00:20:33,460 --> 00:20:39,759
quickly can I come back up now change

447
00:20:36,789 --> 00:20:41,950
fail rate the percentage of changes to

448
00:20:39,759 --> 00:20:43,929
prod that degrade service and require

449
00:20:41,950 --> 00:20:47,619
remediation so it's not just coming all

450
00:20:43,929 --> 00:20:49,330
the way down what requires attention so

451
00:20:47,619 --> 00:20:52,959
there were two speed measures to

452
00:20:49,330 --> 00:20:55,389
stability measures they go together they

453
00:20:52,960 --> 00:21:01,090
don't require trade-offs among high

454
00:20:55,389 --> 00:21:03,939
performers among low performers now this

455
00:21:01,090 --> 00:21:06,730
is kind of an eye chart epaulet take

456
00:21:03,940 --> 00:21:09,519
pictures and then post the slides after

457
00:21:06,730 --> 00:21:11,440
as well like I've mentioned speed

458
00:21:09,519 --> 00:21:13,090
instability move in tandem for several

459
00:21:11,440 --> 00:21:16,989
years in a row we've seen elite

460
00:21:13,090 --> 00:21:23,738
performers optimising on all four low

461
00:21:16,989 --> 00:21:25,629
performers struggle on all now again we

462
00:21:23,739 --> 00:21:28,869
see evidence here that everything is

463
00:21:25,629 --> 00:21:30,248
possible we also see that elite

464
00:21:28,869 --> 00:21:33,699
performers are conducting security

465
00:21:30,249 --> 00:21:35,409
reviews and are able to implement what

466
00:21:33,700 --> 00:21:39,730
they see in days

467
00:21:35,409 --> 00:21:42,850
in contrast low performers it takes them

468
00:21:39,730 --> 00:21:45,039
weeks to conduct reviews and then weeks

469
00:21:42,850 --> 00:21:49,840
again to implement those changes that

470
00:21:45,039 --> 00:21:51,989
they find DevOps and InfoSec are not at

471
00:21:49,840 --> 00:21:51,988
odds

472
00:21:52,019 --> 00:21:59,399
this is absolutely potentially a

473
00:21:56,379 --> 00:22:02,980
marriage made in heaven

474
00:21:59,399 --> 00:22:05,739
no DevOps Pro wants to build insecure

475
00:22:02,980 --> 00:22:08,590
apps or insecure systems this is

476
00:22:05,740 --> 00:22:11,009
absolutely something that that goes hand

477
00:22:08,590 --> 00:22:11,009
in hand

478
00:22:11,010 --> 00:22:16,370
their priority however is to build

479
00:22:12,990 --> 00:22:20,820
software if we're told no because

480
00:22:16,370 --> 00:22:22,739
reasons we can't wait we have to do

481
00:22:20,820 --> 00:22:27,178
secure systems we have to build systems

482
00:22:22,740 --> 00:22:29,580
we have to push systems and if someone

483
00:22:27,179 --> 00:22:32,040
with an InfoSec hat on tells us no we

484
00:22:29,580 --> 00:22:35,309
will figure it out we aren't the experts

485
00:22:32,040 --> 00:22:39,090
though so please join us and tell us how

486
00:22:35,309 --> 00:22:41,190
to do this right now we are also

487
00:22:39,090 --> 00:22:44,220
continually proving value to business

488
00:22:41,190 --> 00:22:47,880
for several years across several streams

489
00:22:44,220 --> 00:22:51,419
of research now we're showing the devops

490
00:22:47,880 --> 00:22:53,400
delivers value and I think the next

491
00:22:51,419 --> 00:22:56,100
frontier is going to be that we do we

492
00:22:53,400 --> 00:22:59,400
deliver value and one of these core

493
00:22:56,100 --> 00:23:01,889
pieces of value is security security is

494
00:22:59,400 --> 00:23:06,169
becoming a public good as Kelly has been

495
00:23:01,890 --> 00:23:10,500
pointing out so what does the ship mean

496
00:23:06,169 --> 00:23:13,890
for security so now we enter what I call

497
00:23:10,500 --> 00:23:16,679
info sex metamorphosis so for any

498
00:23:13,890 --> 00:23:18,480
function conflict exists whether when

499
00:23:16,679 --> 00:23:21,059
there's accountability that's disparate

500
00:23:18,480 --> 00:23:23,100
from responsibility as Nicole said the

501
00:23:21,059 --> 00:23:24,480
fundamental idea behind DevOps was the

502
00:23:23,100 --> 00:23:26,610
unification of accountability and

503
00:23:24,480 --> 00:23:28,799
responsibility it was that developers no

504
00:23:26,610 --> 00:23:30,809
longer just through operations problems

505
00:23:28,799 --> 00:23:32,820
over the fence and told operations

506
00:23:30,809 --> 00:23:35,490
people to deal with it I think that's

507
00:23:32,820 --> 00:23:37,290
really good so through this lens it

508
00:23:35,490 --> 00:23:39,720
feels logical that this shift will

509
00:23:37,290 --> 00:23:41,760
become developers taking accountability

510
00:23:39,720 --> 00:23:44,010
for security problems too it'll no

511
00:23:41,760 --> 00:23:46,200
longer be something security wise is

512
00:23:44,010 --> 00:23:48,450
someone else's problem I think that

513
00:23:46,200 --> 00:23:50,640
would be the real devstack ops so it's

514
00:23:48,450 --> 00:23:52,830
not a great term what I just said is

515
00:23:50,640 --> 00:23:54,419
already covered by DevOps and I think

516
00:23:52,830 --> 00:23:56,129
all of y'all here will be familiar with

517
00:23:54,419 --> 00:23:58,260
the pain that you feel when you have to

518
00:23:56,130 --> 00:23:59,700
remediate vulnerabilities like right

519
00:23:58,260 --> 00:24:00,179
there telling you that it has to be

520
00:23:59,700 --> 00:24:01,679
released

521
00:24:00,179 --> 00:24:03,900
ASAP and you're like I didn't even write

522
00:24:01,679 --> 00:24:06,870
this so I think this paradigm would be

523
00:24:03,900 --> 00:24:09,210
really refreshing for our industry the

524
00:24:06,870 --> 00:24:11,850
resulting question is what should

525
00:24:09,210 --> 00:24:14,400
InfoSec school outcomes become in this

526
00:24:11,850 --> 00:24:16,168
metamorphosis but I also think an even

527
00:24:14,400 --> 00:24:18,270
better quiet question might be why

528
00:24:16,169 --> 00:24:20,940
should infra second ops goals actually

529
00:24:18,270 --> 00:24:23,100
diverge InfoSec should support customer

530
00:24:20,940 --> 00:24:23,879
adoption and satisfaction while meeting

531
00:24:23,100 --> 00:24:26,609
compliance

532
00:24:23,879 --> 00:24:28,529
taury demands satisfied customers aren't

533
00:24:26,609 --> 00:24:31,559
those whose data is leaked or experience

534
00:24:28,529 --> 00:24:33,599
abuse by tech certifies customers aren't

535
00:24:31,559 --> 00:24:35,249
those who experienced outages service

536
00:24:33,599 --> 00:24:37,678
outages or outages with their data

537
00:24:35,249 --> 00:24:39,149
anything else they're also not ones who

538
00:24:37,679 --> 00:24:42,569
are probably going to adopt you if you

539
00:24:39,149 --> 00:24:44,458
have compliance violations InfoSec

540
00:24:42,569 --> 00:24:46,289
should fundamentally support the ability

541
00:24:44,459 --> 00:24:48,179
of an organization to innovate in

542
00:24:46,289 --> 00:24:50,729
response to change they should not add

543
00:24:48,179 --> 00:24:53,099
friction to that process companies can't

544
00:24:50,729 --> 00:24:56,039
innovate if it if they oval-8 compliance

545
00:24:53,099 --> 00:24:57,359
leak data or facilitate abuse because

546
00:24:56,039 --> 00:24:59,809
those are counter to the goals of

547
00:24:57,359 --> 00:25:02,039
customer adoption and satisfaction I

548
00:24:59,809 --> 00:25:04,139
also think it's an industry we can't

549
00:25:02,039 --> 00:25:05,429
rest on the excuse that I hear all the

550
00:25:04,139 --> 00:25:08,218
time like this is how it's always been

551
00:25:05,429 --> 00:25:09,779
done my spicy take is that InfoSec in a

552
00:25:08,219 --> 00:25:10,919
certain way has actually failed as an

553
00:25:09,779 --> 00:25:12,269
industry over the past few decades

554
00:25:10,919 --> 00:25:14,069
because we're still getting owned with

555
00:25:12,269 --> 00:25:15,959
the same methods nothing really changes

556
00:25:14,069 --> 00:25:18,209
and we keep these traditional views and

557
00:25:15,959 --> 00:25:19,739
it's not getting any better I also think

558
00:25:18,209 --> 00:25:21,419
the greatest advances in security are

559
00:25:19,739 --> 00:25:23,339
rarely spawned by the InfoSec industry

560
00:25:21,419 --> 00:25:25,229
itself I'll be talking about ephemeral

561
00:25:23,339 --> 00:25:27,389
and immutable infrastructure in a bit

562
00:25:25,229 --> 00:25:29,669
that's an example where it's not InfoSec

563
00:25:27,389 --> 00:25:31,349
or you have different disparate kind of

564
00:25:29,669 --> 00:25:33,059
pockets of InfoSec professionals that

565
00:25:31,349 --> 00:25:34,948
are hardening browsers are hardening

566
00:25:33,059 --> 00:25:36,749
operating systems which have done way

567
00:25:34,949 --> 00:25:37,289
more from the industry than a lot of

568
00:25:36,749 --> 00:25:40,949
vendors

569
00:25:37,289 --> 00:25:42,599
I think the bristling by InfoSec in the

570
00:25:40,949 --> 00:25:44,009
face of DevOps can be explained by what

571
00:25:42,599 --> 00:25:46,109
I call it the InfoSec Copernican

572
00:25:44,009 --> 00:25:47,519
revolution the firewall was always at

573
00:25:46,109 --> 00:25:49,379
the center of the security universe

574
00:25:47,519 --> 00:25:51,239
knows the anchor of most security

575
00:25:49,379 --> 00:25:53,399
programs including defense and depths

576
00:25:51,239 --> 00:25:55,739
the problem is cloud and micro services

577
00:25:53,399 --> 00:25:57,029
make the firewall frankly irrelevant so

578
00:25:55,739 --> 00:25:58,440
I think it's like people in the Middle

579
00:25:57,029 --> 00:26:00,239
Ages learning that you know the earth

580
00:25:58,440 --> 00:26:02,459
isn't the center of the universe it's

581
00:26:00,239 --> 00:26:04,349
understandable why you'd be panicked if

582
00:26:02,459 --> 00:26:07,769
your mental model is being upheaved

583
00:26:04,349 --> 00:26:10,259
but it's still illogical as much as

584
00:26:07,769 --> 00:26:12,629
InfoSec fights these winds of change the

585
00:26:10,259 --> 00:26:14,609
data is obvious teams you meet essential

586
00:26:12,629 --> 00:26:16,918
cloud characteristics as defined by NIST

587
00:26:14,609 --> 00:26:19,529
are 23 times more likely to be in that

588
00:26:16,919 --> 00:26:21,089
elite group Nicole mentioned also teams

589
00:26:19,529 --> 00:26:24,119
who do most of their work on a platform

590
00:26:21,089 --> 00:26:26,158
as a service solution are 1.5 times more

591
00:26:24,119 --> 00:26:28,079
likely to be elite so InfoSec must

592
00:26:26,159 --> 00:26:33,449
accept this tech and recognize its

593
00:26:28,079 --> 00:26:35,090
potency so the security of chaos let's

594
00:26:33,449 --> 00:26:37,279
bring it all in

595
00:26:35,090 --> 00:26:38,990
the chaos philosophy of things will fail

596
00:26:37,279 --> 00:26:41,860
can be naturally extended to the

597
00:26:38,990 --> 00:26:43,940
philosophy of things will be pwned

598
00:26:41,860 --> 00:26:45,289
failure from the resilience engineering

599
00:26:43,940 --> 00:26:47,360
perspective is commonly thought of as

600
00:26:45,289 --> 00:26:49,490
outages when services don't operate as

601
00:26:47,360 --> 00:26:50,990
intended a security failure therefore

602
00:26:49,490 --> 00:26:53,059
can be thought of when security controls

603
00:26:50,990 --> 00:26:55,610
don't operate as intended when they fail

604
00:26:53,059 --> 00:26:57,168
just as detecting a failure early

605
00:26:55,610 --> 00:26:59,090
reduces the cost of a fix

606
00:26:57,169 --> 00:27:01,370
likewise detecting some sort of security

607
00:26:59,090 --> 00:27:04,158
failure early reduces the cost of a fix

608
00:27:01,370 --> 00:27:06,320
so what are the principles of this

609
00:27:04,159 --> 00:27:08,179
chaotic security engineering which if

610
00:27:06,320 --> 00:27:10,639
that's not the sexiest job title I don't

611
00:27:08,179 --> 00:27:13,730
know what is frankly so first

612
00:27:10,639 --> 00:27:16,850
expect years to can expect your security

613
00:27:13,730 --> 00:27:19,190
controls to fail and prepare accordingly

614
00:27:16,850 --> 00:27:20,899
system architecture must be designed

615
00:27:19,190 --> 00:27:23,179
assuming that security controls will

616
00:27:20,899 --> 00:27:25,309
fail your security architecture it must

617
00:27:23,179 --> 00:27:27,860
also be designed assuming users will

618
00:27:25,309 --> 00:27:29,658
fail where this sort of failure is not

619
00:27:27,860 --> 00:27:30,979
following the most secure path I think

620
00:27:29,659 --> 00:27:32,990
we can all agree that that's a pretty

621
00:27:30,980 --> 00:27:36,649
wise assumption at this point users very

622
00:27:32,990 --> 00:27:40,340
rarely fall follow the kind of ideal way

623
00:27:36,649 --> 00:27:42,830
of behavior second don't try to avoid

624
00:27:40,340 --> 00:27:44,990
incidents instead embrace your ability

625
00:27:42,830 --> 00:27:47,059
to respond to them incidents aren't

626
00:27:44,990 --> 00:27:48,200
fully preventable they never have and

627
00:27:47,059 --> 00:27:50,210
never will be

628
00:27:48,200 --> 00:27:51,799
the focus instead should be on ensuring

629
00:27:50,210 --> 00:27:54,350
your systems are resilient enough to

630
00:27:51,799 --> 00:27:55,970
handle incidents gracefully I think it's

631
00:27:54,350 --> 00:27:57,949
freeing to move away from the frankly

632
00:27:55,970 --> 00:28:00,259
impossible standard perfect prevention

633
00:27:57,950 --> 00:28:04,100
and instead pivot towards some very

634
00:28:00,259 --> 00:28:05,480
realistic resilience possibility what

635
00:28:04,100 --> 00:28:07,219
are some of the benefits of applying

636
00:28:05,480 --> 00:28:10,429
this chaos and resilience approach to

637
00:28:07,220 --> 00:28:12,200
InfoSec luckily there are many so first

638
00:28:10,429 --> 00:28:14,990
the repeated practice of recovering from

639
00:28:12,200 --> 00:28:17,269
unexpected incidents means you can lower

640
00:28:14,990 --> 00:28:18,830
your me remediation costs because teams

641
00:28:17,269 --> 00:28:21,080
are better prepared to handle these

642
00:28:18,830 --> 00:28:22,908
incidents it also reduces stress levels

643
00:28:21,080 --> 00:28:24,830
which means less burnout which is a huge

644
00:28:22,909 --> 00:28:26,779
problem in InfoSec because incidents

645
00:28:24,830 --> 00:28:28,820
become a problem with known processes

646
00:28:26,779 --> 00:28:31,460
rather than being dominated by fear and

647
00:28:28,820 --> 00:28:33,200
uncertainty another thing is that

648
00:28:31,460 --> 00:28:34,970
disruption to end users is actually

649
00:28:33,200 --> 00:28:36,919
minimized because feedback from testing

650
00:28:34,970 --> 00:28:39,529
informs how to create design that

651
00:28:36,919 --> 00:28:40,999
minimizes user impact you also gain more

652
00:28:39,529 --> 00:28:42,740
confidence in the security of your

653
00:28:40,999 --> 00:28:44,480
production systems because each scenario

654
00:28:42,740 --> 00:28:47,929
tested and proves the system's

655
00:28:44,480 --> 00:28:48,430
resilience and finally another benefit

656
00:28:47,929 --> 00:28:49,930
is that how

657
00:28:48,430 --> 00:28:52,360
so you understand risk at a systemic

658
00:28:49,930 --> 00:28:54,280
level a big problem in InfoSec as we

659
00:28:52,360 --> 00:28:56,620
seek to understand the risk and security

660
00:28:54,280 --> 00:28:59,440
of components rather than a systemic

661
00:28:56,620 --> 00:29:01,090
level the feedback today also happens

662
00:28:59,440 --> 00:29:03,190
really sporadically in the form of kind

663
00:29:01,090 --> 00:29:04,720
of like quarterly or even less frequent

664
00:29:03,190 --> 00:29:06,940
penetration tests or red teaming

665
00:29:04,720 --> 00:29:08,950
exercises but chaos engineering creates

666
00:29:06,940 --> 00:29:10,810
a continuous feedback loop to help us

667
00:29:08,950 --> 00:29:12,520
continuously refine our security

668
00:29:10,810 --> 00:29:14,260
strategy so you can almost think of

669
00:29:12,520 --> 00:29:16,470
chaos engineering and it's like all the

670
00:29:14,260 --> 00:29:19,270
time red teaming which is pretty cool

671
00:29:16,470 --> 00:29:20,740
the ability to automate away toil I

672
00:29:19,270 --> 00:29:22,750
think will also be very interesting to

673
00:29:20,740 --> 00:29:24,190
InfoSec because I here intersect

674
00:29:22,750 --> 00:29:27,250
professionals complain about toil all

675
00:29:24,190 --> 00:29:29,380
the time toil is a term popularized by

676
00:29:27,250 --> 00:29:30,850
Google and it's not just work you don't

677
00:29:29,380 --> 00:29:31,930
want to perform because I think we can

678
00:29:30,850 --> 00:29:33,820
all agree that would be most of

679
00:29:31,930 --> 00:29:36,250
enterprise InfoSec tasks other than

680
00:29:33,820 --> 00:29:38,439
research so we can't just get rid of all

681
00:29:36,250 --> 00:29:41,110
of that unfortunately but toil is the

682
00:29:38,440 --> 00:29:42,880
manual repetitive and tactical work that

683
00:29:41,110 --> 00:29:44,560
skills linearly with your growth but

684
00:29:42,880 --> 00:29:46,600
doesn't actually provide any enduring

685
00:29:44,560 --> 00:29:48,460
value think of scripts manually run

686
00:29:46,600 --> 00:29:50,230
other reactive tasks that interrupt

687
00:29:48,460 --> 00:29:53,440
workflow tasks that don't really require

688
00:29:50,230 --> 00:29:55,060
human judgment so examples of Toyland

689
00:29:53,440 --> 00:29:57,190
InfoSec are a manual patching and

690
00:29:55,060 --> 00:29:58,840
updating adding users to access control

691
00:29:57,190 --> 00:30:01,150
lists provisioning to a fade tokens

692
00:29:58,840 --> 00:30:02,949
firewall rule management deployment a

693
00:30:01,150 --> 00:30:05,440
blacklist deployment of services and

694
00:30:02,950 --> 00:30:08,550
systems generally so the super unsexy

695
00:30:05,440 --> 00:30:11,170
stuff that all of us mostly hate doing

696
00:30:08,550 --> 00:30:13,149
how else can InfoSec become more

697
00:30:11,170 --> 00:30:15,940
strategic rather than kind of manual in

698
00:30:13,150 --> 00:30:17,500
tactical let's now turn to exploiting

699
00:30:15,940 --> 00:30:20,400
the core characteristics that build

700
00:30:17,500 --> 00:30:23,560
security and modern infrastructure

701
00:30:20,400 --> 00:30:25,390
you're familiar with Bladerunner to

702
00:30:23,560 --> 00:30:28,929
avoid InfoSec becoming like tears and

703
00:30:25,390 --> 00:30:31,380
rain it's now a time to die first how

704
00:30:28,930 --> 00:30:33,430
many of you familiar with the CIA triad

705
00:30:31,380 --> 00:30:34,990
pretty much everyone right so I'm only

706
00:30:33,430 --> 00:30:36,130
going to go through really briefly if

707
00:30:34,990 --> 00:30:37,720
you weren't aware it stands for

708
00:30:36,130 --> 00:30:39,790
confidentiality integrity and

709
00:30:37,720 --> 00:30:42,660
availability it's commonly used as a

710
00:30:39,790 --> 00:30:44,500
model for balancing InfoSec priorities

711
00:30:42,660 --> 00:30:46,330
confidentiality is the ability withhold

712
00:30:44,500 --> 00:30:48,610
information from people unauthorized to

713
00:30:46,330 --> 00:30:50,409
view it integrity is the ability to

714
00:30:48,610 --> 00:30:51,909
ensure that data is an accurate and

715
00:30:50,410 --> 00:30:54,340
trustworthy representation of the

716
00:30:51,910 --> 00:30:55,390
original information the integrity is

717
00:30:54,340 --> 00:30:57,550
the ability to ensure that the

718
00:30:55,390 --> 00:30:58,680
organization's services are available to

719
00:30:57,550 --> 00:31:01,230
end

720
00:30:58,680 --> 00:31:03,510
the problem is the CI tread is actually

721
00:31:01,230 --> 00:31:05,670
a really narrow model it focuses less on

722
00:31:03,510 --> 00:31:07,800
security enabling characteristics and

723
00:31:05,670 --> 00:31:10,290
more unpreserved existing security

724
00:31:07,800 --> 00:31:12,030
values so what we need is a model

725
00:31:10,290 --> 00:31:13,860
promoting qualities that make systems

726
00:31:12,030 --> 00:31:17,670
more secure because that would help

727
00:31:13,860 --> 00:31:19,530
InfoSec aligned with devops enter the

728
00:31:17,670 --> 00:31:22,560
diee model this was popularized by

729
00:31:19,530 --> 00:31:24,120
suniye U at Bank of America and I call

730
00:31:22,560 --> 00:31:26,399
it the die model I keep referring it to

731
00:31:24,120 --> 00:31:29,280
that way so it stands for distributed

732
00:31:26,400 --> 00:31:31,170
immutable and ephemeral distributive

733
00:31:29,280 --> 00:31:33,030
means service outages are less impactful

734
00:31:31,170 --> 00:31:34,980
immutable means changes are easier to

735
00:31:33,030 --> 00:31:36,899
detect in Reverse an ephemeral means

736
00:31:34,980 --> 00:31:39,300
you're driving the value of persistence

737
00:31:36,900 --> 00:31:42,450
basically to zero so let's go through

738
00:31:39,300 --> 00:31:44,220
each of these individually so first D

739
00:31:42,450 --> 00:31:45,870
distributed infrastructure involves

740
00:31:44,220 --> 00:31:47,820
multiple systems that may be in

741
00:31:45,870 --> 00:31:51,780
different locations but work towards the

742
00:31:47,820 --> 00:31:53,070
same overarching goal CD ends content

743
00:31:51,780 --> 00:31:54,899
delivery networks are a form of

744
00:31:53,070 --> 00:31:56,939
distributed infrastructure that directly

745
00:31:54,900 --> 00:31:58,620
led to the diminishment of harm by diaas

746
00:31:56,940 --> 00:32:00,420
attacks this was pretty great

747
00:31:58,620 --> 00:32:02,340
they generally reduced the severity of

748
00:32:00,420 --> 00:32:04,230
service outages because they facilitate

749
00:32:02,340 --> 00:32:07,350
high availability redundancy and fault

750
00:32:04,230 --> 00:32:08,820
tolerance the mutable infrastructure

751
00:32:07,350 --> 00:32:10,980
doesn't actually change after it's

752
00:32:08,820 --> 00:32:13,230
deployed if modification or updating is

753
00:32:10,980 --> 00:32:14,880
necessary a standardized image with the

754
00:32:13,230 --> 00:32:16,920
appropriate changes is used to build a

755
00:32:14,880 --> 00:32:19,110
new server to replace the old one

756
00:32:16,920 --> 00:32:20,970
DevOps prefers a mutable infrastructure

757
00:32:19,110 --> 00:32:23,340
because it provides more consistency and

758
00:32:20,970 --> 00:32:26,940
reliability for a simpler standardized

759
00:32:23,340 --> 00:32:28,949
deployment process servers are no longer

760
00:32:26,940 --> 00:32:31,230
Church pets and instead they're very

761
00:32:28,950 --> 00:32:33,060
disposable cattle a base image is

762
00:32:31,230 --> 00:32:34,770
validated in version controlled so each

763
00:32:33,060 --> 00:32:37,110
server built from that image can be shot

764
00:32:34,770 --> 00:32:39,270
out back in the yard so to speak because

765
00:32:37,110 --> 00:32:41,159
images are version controlled it also

766
00:32:39,270 --> 00:32:43,620
means that you don't actually have to

767
00:32:41,160 --> 00:32:45,080
have these systems up all the time so

768
00:32:43,620 --> 00:32:47,459
again you have to worry less about

769
00:32:45,080 --> 00:32:49,290
manual rollbacks and the whole update

770
00:32:47,460 --> 00:32:51,930
process becomes much easier

771
00:32:49,290 --> 00:32:53,460
I think info sex overlooks a lot of the

772
00:32:51,930 --> 00:32:55,620
inherent benefits of amitabh all

773
00:32:53,460 --> 00:32:57,150
infrastructure quite a bit so because

774
00:32:55,620 --> 00:32:59,939
configuration changes are performed

775
00:32:57,150 --> 00:33:01,980
through this standardized process versus

776
00:32:59,940 --> 00:33:03,750
having engineers log into systems for a

777
00:33:01,980 --> 00:33:07,110
manual configuration means you can

778
00:33:03,750 --> 00:33:08,820
completely restrict access shell access

779
00:33:07,110 --> 00:33:11,280
to servers that's kind of a security

780
00:33:08,820 --> 00:33:12,040
miracle if shell access is disabled it's

781
00:33:11,280 --> 00:33:14,139
much hard

782
00:33:12,040 --> 00:33:17,980
for attackers to actually get to their

783
00:33:14,140 --> 00:33:19,690
goal but with this you have to resist

784
00:33:17,980 --> 00:33:21,850
the urge to continue treating your

785
00:33:19,690 --> 00:33:23,470
service as pets I see this with InfoSec

786
00:33:21,850 --> 00:33:24,969
professionals a lot they still want to

787
00:33:23,470 --> 00:33:27,640
cling to them and pet them like their

788
00:33:24,970 --> 00:33:29,470
precious little you know bunny ambiguity

789
00:33:27,640 --> 00:33:30,970
aversion which is a behavioral economics

790
00:33:29,470 --> 00:33:32,980
thing I won't get into it but basically

791
00:33:30,970 --> 00:33:34,750
it's okay because your lizard brain is

792
00:33:32,980 --> 00:33:37,480
telling you to panic and that you're

793
00:33:34,750 --> 00:33:39,460
scared about all of this uncertainty but

794
00:33:37,480 --> 00:33:41,040
think of it this way if I'm assuming

795
00:33:39,460 --> 00:33:42,790
quite a bit of you play video games

796
00:33:41,040 --> 00:33:44,830
immutability basically gives

797
00:33:42,790 --> 00:33:46,750
infrastructure unlimited lives rather

798
00:33:44,830 --> 00:33:49,000
than prior paradigm of like leave you

799
00:33:46,750 --> 00:33:51,960
playing a game and nightmare mode where

800
00:33:49,000 --> 00:33:53,890
if you die that's it game over a

801
00:33:51,960 --> 00:33:55,750
ephemeral infrastructure has a very

802
00:33:53,890 --> 00:33:57,700
short lifespan it lives only for the

803
00:33:55,750 --> 00:33:59,380
duration of a task before dying instead

804
00:33:57,700 --> 00:34:01,990
of a monolithic application that could

805
00:33:59,380 --> 00:34:03,760
live for thousands of days the notion of

806
00:34:01,990 --> 00:34:05,500
infrastructure behaving like a frenetic

807
00:34:03,760 --> 00:34:08,320
Phoenix can definitely be daunting but

808
00:34:05,500 --> 00:34:10,030
the ephemeral infrastructure allows for

809
00:34:08,320 --> 00:34:12,850
a surprising degree of control and

810
00:34:10,030 --> 00:34:14,409
security benefits infrastructure that

811
00:34:12,850 --> 00:34:16,600
could die at any moment is a nightmare

812
00:34:14,409 --> 00:34:18,550
for attackers it generates a formidable

813
00:34:16,600 --> 00:34:21,310
level of uncertainty for persistence

814
00:34:18,550 --> 00:34:22,720
which is good for us installing a

815
00:34:21,310 --> 00:34:24,699
rootkit on a resource that will die

816
00:34:22,719 --> 00:34:26,469
within minutes is a waste of effort

817
00:34:24,699 --> 00:34:28,899
it forces attackers to pivot work

818
00:34:26,469 --> 00:34:29,888
quickly to get to the coal and that

819
00:34:28,899 --> 00:34:31,659
would be something like in-memory

820
00:34:29,889 --> 00:34:33,250
attacks which are still 100% in the

821
00:34:31,659 --> 00:34:35,740
realm with more sophisticated attackers

822
00:34:33,250 --> 00:34:37,929
despite whatever vendor thud you heard

823
00:34:35,739 --> 00:34:40,719
out the floor this year so ephemerality

824
00:34:37,929 --> 00:34:44,470
actually raises the attacker bar by

825
00:34:40,719 --> 00:34:46,658
design optimizing for this die tread

826
00:34:44,469 --> 00:34:48,969
inherently reduces risk even when

827
00:34:46,659 --> 00:34:51,520
security isn't the stated goal which is

828
00:34:48,969 --> 00:34:53,109
great die is about the ability to be

829
00:34:51,520 --> 00:34:54,730
resilient and recover effectively

830
00:34:53,110 --> 00:34:56,830
whether in the face of threats to

831
00:34:54,730 --> 00:34:59,050
performance or threats to security and

832
00:34:56,830 --> 00:35:00,640
Bocek has repeatedly espoused since I've

833
00:34:59,050 --> 00:35:02,830
been in the industry of the goal of

834
00:35:00,640 --> 00:35:04,569
building insecurity by design and this

835
00:35:02,830 --> 00:35:10,049
is the most organizationally friendly

836
00:35:04,570 --> 00:35:15,910
way to do so so now how do we get there

837
00:35:10,050 --> 00:35:18,400
so phoenix rises so what type of metrics

838
00:35:15,910 --> 00:35:21,100
are worth tracking and thinking about

839
00:35:18,400 --> 00:35:23,890
when we're in this new chaos driven

840
00:35:21,100 --> 00:35:24,710
security engineering program Tiger store

841
00:35:23,890 --> 00:35:26,750
is

842
00:35:24,710 --> 00:35:28,280
absolutely relevant and equally

843
00:35:26,750 --> 00:35:30,560
important for InfoSec as it is for

844
00:35:28,280 --> 00:35:32,660
DevOps but InfoSec teams

845
00:35:30,560 --> 00:35:34,700
historically haven't thought about this

846
00:35:32,660 --> 00:35:36,710
right they gravitate toward metrics that

847
00:35:34,700 --> 00:35:38,810
measure failure for example tie between

848
00:35:36,710 --> 00:35:40,580
incidents bold frequency rates of

849
00:35:38,810 --> 00:35:42,619
colleagues clicking on phishing links

850
00:35:40,580 --> 00:35:45,140
but mean time between failure is a

851
00:35:42,619 --> 00:35:46,940
dangerous and unrealistic metric if its

852
00:35:45,140 --> 00:35:48,500
mean time between and you go a year but

853
00:35:46,940 --> 00:35:51,890
when you're down you're completely pwned

854
00:35:48,500 --> 00:35:54,109
that's not very interesting or important

855
00:35:51,890 --> 00:35:55,940
mean time between failure optimizes for

856
00:35:54,109 --> 00:35:58,400
an unrealistic world where failure never

857
00:35:55,940 --> 00:36:01,070
occurs the contradicts frequent

858
00:35:58,400 --> 00:36:03,440
interests a InfoSec mantra of breach was

859
00:36:01,070 --> 00:36:04,940
Beatriz breaches are inevitable we know

860
00:36:03,440 --> 00:36:07,580
you're gonna go down so what we need to

861
00:36:04,940 --> 00:36:08,810
do is minimize the impact of that it

862
00:36:07,580 --> 00:36:10,970
instead of Isis the wrong behavior

863
00:36:08,810 --> 00:36:15,529
ignores the goal of delivering services

864
00:36:10,970 --> 00:36:17,899
to our end users if a service fails many

865
00:36:15,530 --> 00:36:20,510
times a day but for a trivial amount of

866
00:36:17,900 --> 00:36:24,260
time and you can minimize that blast

867
00:36:20,510 --> 00:36:26,690
radius users may not even notice but if

868
00:36:24,260 --> 00:36:28,849
it fails like I said once a week once a

869
00:36:26,690 --> 00:36:33,230
year and it takes hours to restore weeks

870
00:36:28,849 --> 00:36:35,210
to restore months to restore its

871
00:36:33,230 --> 00:36:38,270
decidedly degraded if we think about the

872
00:36:35,210 --> 00:36:40,880
Sony hack and hack and hack and hack if

873
00:36:38,270 --> 00:36:44,270
it leaves your system in a weakened

874
00:36:40,880 --> 00:36:49,430
state and a vulnerable state that's much

875
00:36:44,270 --> 00:36:51,680
less desired so how do we prioritize

876
00:36:49,430 --> 00:36:55,220
this to meet the goal of minimal failure

877
00:36:51,680 --> 00:36:56,720
devs are incentivized or ops sorry

878
00:36:55,220 --> 00:36:58,879
officer instead of ice to avoid change

879
00:36:56,720 --> 00:37:01,299
as much as possible security teams

880
00:36:58,880 --> 00:37:04,400
should be prioritizing failure likewise

881
00:37:01,300 --> 00:37:06,920
to inhibit innovation by discouraging

882
00:37:04,400 --> 00:37:10,270
use of new tech release of software

883
00:37:06,920 --> 00:37:12,530
because like what if it has bugs and

884
00:37:10,270 --> 00:37:15,070
implementing strict internal security

885
00:37:12,530 --> 00:37:19,670
policies that add friction to workflows

886
00:37:15,070 --> 00:37:23,570
however if we embrace this new world of

887
00:37:19,670 --> 00:37:27,710
having ephemeral artifacts we can just

888
00:37:23,570 --> 00:37:30,020
blow them away so switching to MTTR is

889
00:37:27,710 --> 00:37:31,820
an essential first step chaos and

890
00:37:30,020 --> 00:37:34,580
resilience embraces the failures

891
00:37:31,820 --> 00:37:36,290
inevitable but instead failure can be

892
00:37:34,580 --> 00:37:38,598
harnessed as a tool to help us prepare

893
00:37:36,290 --> 00:37:40,279
for these incidents it also ensures

894
00:37:38,599 --> 00:37:44,960
that when the inevitable happens it

895
00:37:40,279 --> 00:37:46,999
isn't damaging to your organization TTR

896
00:37:44,960 --> 00:37:51,979
is even more important than time to

897
00:37:46,999 --> 00:37:54,879
detect why is this technically we

898
00:37:51,979 --> 00:37:58,460
actually can't measure time to detect

899
00:37:54,880 --> 00:38:01,519
because all we can do is capture the

900
00:37:58,460 --> 00:38:03,079
time that we first detected it we really

901
00:38:01,519 --> 00:38:04,430
technically don't even know the first

902
00:38:03,079 --> 00:38:08,089
time it actually happened

903
00:38:04,430 --> 00:38:11,419
now InfoSec people may bristle at this

904
00:38:08,089 --> 00:38:14,690
but detection is only the start of the

905
00:38:11,420 --> 00:38:19,700
recovery process it really isn't the end

906
00:38:14,690 --> 00:38:23,269
goal in and of itself because what we

907
00:38:19,700 --> 00:38:24,680
need to do is not just fix the incident

908
00:38:23,269 --> 00:38:26,720
but fix our system

909
00:38:24,680 --> 00:38:29,210
Akeley was talking about with all of the

910
00:38:26,720 --> 00:38:32,269
resilience engineering that we have in

911
00:38:29,210 --> 00:38:34,700
place and also who cares if you detect

912
00:38:32,269 --> 00:38:37,098
it quickly if you don't fix not just the

913
00:38:34,700 --> 00:38:42,529
problem but all of the conditions that

914
00:38:37,099 --> 00:38:44,930
led to the problem game days are like

915
00:38:42,529 --> 00:38:47,869
plant fire drills avoid complacency by

916
00:38:44,930 --> 00:38:50,690
using game days practice a potentially

917
00:38:47,869 --> 00:38:51,920
risky scenario in a safe environment I'm

918
00:38:50,690 --> 00:38:54,079
sure many of you are familiar with

919
00:38:51,920 --> 00:38:56,049
tabletop exercises but these aren't

920
00:38:54,079 --> 00:38:57,979
nearly formalized or discussed and

921
00:38:56,049 --> 00:38:59,719
daeron tabletop they aren't in

922
00:38:57,979 --> 00:39:02,169
production systems and production system

923
00:38:59,719 --> 00:39:06,829
how production systems have much more

924
00:39:02,170 --> 00:39:08,539
complexity involved we also need to be

925
00:39:06,829 --> 00:39:10,039
prioritizing game days based on each

926
00:39:08,539 --> 00:39:11,930
scenarios potential impact to the

927
00:39:10,039 --> 00:39:13,670
business so consider what's most

928
00:39:11,930 --> 00:39:16,038
important from your end user and your

929
00:39:13,670 --> 00:39:17,150
customers perspective this is probably

930
00:39:16,039 --> 00:39:19,369
going to be related to things like

931
00:39:17,150 --> 00:39:21,920
service disruption leakage obsessive

932
00:39:19,369 --> 00:39:24,739
data compliance violations even

933
00:39:21,920 --> 00:39:26,210
regulatory environments and game days in

934
00:39:24,739 --> 00:39:28,130
particular verify your monitoring

935
00:39:26,210 --> 00:39:30,440
alerting and response capabilities and

936
00:39:28,130 --> 00:39:32,900
also keep doing game days because more

937
00:39:30,440 --> 00:39:37,359
practice will uncover more problems and

938
00:39:32,900 --> 00:39:39,499
it will reduce your time to response

939
00:39:37,359 --> 00:39:41,119
decision trees in particular can be

940
00:39:39,499 --> 00:39:43,459
valuable guides for crafting and

941
00:39:41,119 --> 00:39:44,930
deciding on game day scenarios start

942
00:39:43,460 --> 00:39:47,269
with a business priority that's at risk

943
00:39:44,930 --> 00:39:49,519
for example an s3 bucket with sensitive

944
00:39:47,269 --> 00:39:51,709
customer data and then brainstorm how

945
00:39:49,519 --> 00:39:54,200
the attacker would most easily get

946
00:39:51,710 --> 00:39:58,730
to the goal of accesing and exfiltrating

947
00:39:54,200 --> 00:40:01,640
this data next it is tempting to dream

948
00:39:58,730 --> 00:40:03,349
up very very elaborate scenarios because

949
00:40:01,640 --> 00:40:07,160
really those are the super super fun

950
00:40:03,349 --> 00:40:09,020
ones but Mossad is not going to be

951
00:40:07,160 --> 00:40:11,118
picking up your data centers power

952
00:40:09,020 --> 00:40:13,490
supply to expert rate the data a bit by

953
00:40:11,119 --> 00:40:15,290
bit sneak about with option is going to

954
00:40:13,490 --> 00:40:17,180
be happening so determine the least cost

955
00:40:15,290 --> 00:40:20,210
path but attackers will take to get to

956
00:40:17,180 --> 00:40:21,589
their goal this least cost path is the

957
00:40:20,210 --> 00:40:25,190
most sensible place to be starting your

958
00:40:21,589 --> 00:40:26,569
testing now let's talk about that

959
00:40:25,190 --> 00:40:30,020
testing and how you can start

960
00:40:26,569 --> 00:40:31,520
architecting chaos so tooling and

961
00:40:30,020 --> 00:40:33,200
testing in a chaotic security world is

962
00:40:31,520 --> 00:40:34,849
ripe for innovation we're gonna propose

963
00:40:33,200 --> 00:40:36,770
some novel ways and I'm gonna go through

964
00:40:34,849 --> 00:40:38,030
them very quickly but we'd love to hear

965
00:40:36,770 --> 00:40:40,040
about what you all end up building

966
00:40:38,030 --> 00:40:41,990
actually and generally want to start

967
00:40:40,040 --> 00:40:43,819
with dumb testing before moving to fancy

968
00:40:41,990 --> 00:40:45,589
testing kind of like Nicole said start

969
00:40:43,819 --> 00:40:47,869
in tests before you start testing in

970
00:40:45,589 --> 00:40:49,640
prod develop tests that you know you can

971
00:40:47,869 --> 00:40:52,640
actually build effectively and involve

972
00:40:49,640 --> 00:40:56,150
realistic scenarios so let's start with

973
00:40:52,640 --> 00:40:57,500
controlling chaos for the CIA triad with

974
00:40:56,150 --> 00:40:58,790
availability if you start making

975
00:40:57,500 --> 00:41:00,380
security events and to availability

976
00:40:58,790 --> 00:41:01,339
events DevOps as ears will perk up

977
00:41:00,380 --> 00:41:04,130
because they care a lot about that

978
00:41:01,339 --> 00:41:06,890
uptime is normally bait baked into

979
00:41:04,130 --> 00:41:09,140
service level obligations and service

980
00:41:06,890 --> 00:41:11,660
level agreements SAS and SL O's it's

981
00:41:09,140 --> 00:41:13,400
very important to them because of these

982
00:41:11,660 --> 00:41:15,170
per customer requirements most of the

983
00:41:13,400 --> 00:41:17,690
existing body of Kaos tooling and

984
00:41:15,170 --> 00:41:19,220
testing is around availability so Nicole

985
00:41:17,690 --> 00:41:21,049
mentioned chaos monkey so I won't go

986
00:41:19,220 --> 00:41:22,609
into too much depth but there are other

987
00:41:21,049 --> 00:41:24,259
availability testing tools for cloud

988
00:41:22,609 --> 00:41:26,540
services like address native fault

989
00:41:24,260 --> 00:41:29,089
analysis service or chaos lambda for AWS

990
00:41:26,540 --> 00:41:30,710
for testing in Cooper Nettie's there's

991
00:41:29,089 --> 00:41:32,540
cube monkey Bloomberg powerful steel

992
00:41:30,710 --> 00:41:33,770
targets pod Reaper all these names are

993
00:41:32,540 --> 00:41:35,930
ridiculous

994
00:41:33,770 --> 00:41:37,849
tools for dr. include Pumbaa and

995
00:41:35,930 --> 00:41:41,169
blockade and network specific tools

996
00:41:37,849 --> 00:41:43,250
include Shopify's Toxie proxy or Luxy

997
00:41:41,170 --> 00:41:45,049
InfoSec teams can therefore adopt

998
00:41:43,250 --> 00:41:46,670
music's existing tools and all you have

999
00:41:45,049 --> 00:41:48,470
to do is modify your game days so that

1000
00:41:46,670 --> 00:41:51,680
the sources of availability failure are

1001
00:41:48,470 --> 00:41:53,450
coming from security events next is

1002
00:41:51,680 --> 00:41:56,540
confidentiality that can include

1003
00:41:53,450 --> 00:41:58,279
straightforward tests testing access and

1004
00:41:56,540 --> 00:42:00,400
controls including authentication for

1005
00:41:58,280 --> 00:42:02,450
api's micro services and cloud resources

1006
00:42:00,400 --> 00:42:03,870
so adopting a micro services

1007
00:42:02,450 --> 00:42:06,240
architecture can help preserve

1008
00:42:03,870 --> 00:42:10,470
confidentiality more than with on Prem

1009
00:42:06,240 --> 00:42:12,060
monolithic architectures a service mesh

1010
00:42:10,470 --> 00:42:14,100
if you how many are familiar with the

1011
00:42:12,060 --> 00:42:15,630
service mesh gonna cover it super

1012
00:42:14,100 --> 00:42:17,520
briefly it's an infrastructure layer

1013
00:42:15,630 --> 00:42:19,260
used in micro services to configure how

1014
00:42:17,520 --> 00:42:21,090
different services within an app shared

1015
00:42:19,260 --> 00:42:23,070
data with each other it essentially

1016
00:42:21,090 --> 00:42:25,260
operates like an on-demand VPN at the

1017
00:42:23,070 --> 00:42:27,690
application level it can implement

1018
00:42:25,260 --> 00:42:29,220
things like mutual authentication which

1019
00:42:27,690 --> 00:42:31,050
is primarily influent implemented

1020
00:42:29,220 --> 00:42:32,790
through M TLS which is where both the

1021
00:42:31,050 --> 00:42:34,890
client and server produce certificates

1022
00:42:32,790 --> 00:42:36,450
for each other to value validate so

1023
00:42:34,890 --> 00:42:38,609
service meshes end up being really

1024
00:42:36,450 --> 00:42:40,379
useful you don't have to do your own

1025
00:42:38,610 --> 00:42:41,540
crypto which I think we can all agree is

1026
00:42:40,380 --> 00:42:43,590
a bad idea

1027
00:42:41,540 --> 00:42:46,110
implementing a service mesh also

1028
00:42:43,590 --> 00:42:48,420
generates confidentiality benefits by

1029
00:42:46,110 --> 00:42:50,340
design attackers encountering a service

1030
00:42:48,420 --> 00:42:52,350
mesh are forced to privilege escalates

1031
00:42:50,340 --> 00:42:54,150
to the IP tables layer to modify their

1032
00:42:52,350 --> 00:42:55,740
access control of course privilege

1033
00:42:54,150 --> 00:42:57,600
escalation isn't impossible but you're

1034
00:42:55,740 --> 00:43:00,629
still raising that attacker cost which

1035
00:42:57,600 --> 00:43:02,549
is crucial injecting failure interest to

1036
00:43:00,630 --> 00:43:04,740
your service mesh there for becomes a

1037
00:43:02,550 --> 00:43:07,320
very worthwhile test in this chaos

1038
00:43:04,740 --> 00:43:09,029
paradigm design tests to ensure your

1039
00:43:07,320 --> 00:43:11,250
service missions authentication policies

1040
00:43:09,030 --> 00:43:13,530
are operating as intended and leaner

1041
00:43:11,250 --> 00:43:15,060
authentication policies also produce a

1042
00:43:13,530 --> 00:43:16,470
performance benefit because they're not

1043
00:43:15,060 --> 00:43:18,660
all trying to talk to each other at the

1044
00:43:16,470 --> 00:43:21,480
same time that means it's dual benefits

1045
00:43:18,660 --> 00:43:23,609
for both DevOps and security finally

1046
00:43:21,480 --> 00:43:25,080
integrity applying guest attesting to

1047
00:43:23,610 --> 00:43:26,700
integrity is less straightforward and I

1048
00:43:25,080 --> 00:43:28,920
think it's superseded by immutability

1049
00:43:26,700 --> 00:43:30,720
but we'll cover it super briefly so for

1050
00:43:28,920 --> 00:43:32,340
any system using signed data a generic

1051
00:43:30,720 --> 00:43:33,959
and relevant test and changing the

1052
00:43:32,340 --> 00:43:35,430
signature content of this data and then

1053
00:43:33,960 --> 00:43:39,450
monitoring to see whether the system

1054
00:43:35,430 --> 00:43:41,730
still processes it so for exempting zero

1055
00:43:39,450 --> 00:43:43,710
trust networks and both chaos testing by

1056
00:43:41,730 --> 00:43:45,540
swapping out certificates of zero trust

1057
00:43:43,710 --> 00:43:47,190
networks are configured correctly than

1058
00:43:45,540 --> 00:43:49,770
transactions between nodes should fail

1059
00:43:47,190 --> 00:43:51,180
entirely nothing should work at the very

1060
00:43:49,770 --> 00:43:53,370
least you should be receiving alerts

1061
00:43:51,180 --> 00:43:55,350
immediately and if you aren't that means

1062
00:43:53,370 --> 00:43:57,270
you're getting good feedback this test

1063
00:43:55,350 --> 00:43:58,950
also works for service message because

1064
00:43:57,270 --> 00:44:01,920
swapping out certificates will also call

1065
00:43:58,950 --> 00:44:04,140
us cause similar problems compliance

1066
00:44:01,920 --> 00:44:05,970
tends you're keen on controls for data

1067
00:44:04,140 --> 00:44:08,160
integrity that's why file integrity

1068
00:44:05,970 --> 00:44:10,649
monitoring is a required control under

1069
00:44:08,160 --> 00:44:12,180
HIPAA PCI and most of the others so if

1070
00:44:10,650 --> 00:44:14,130
Kaos tests for credit card data or

1071
00:44:12,180 --> 00:44:15,660
personal health information is to flip

1072
00:44:14,130 --> 00:44:17,809
bits in the data or otherwise modify

1073
00:44:15,660 --> 00:44:19,489
encrypted data you should receive a

1074
00:44:17,809 --> 00:44:22,630
right and this can help you verify that

1075
00:44:19,489 --> 00:44:25,160
your film is actually working correctly

1076
00:44:22,630 --> 00:44:26,900
retrograding off also offers a very cool

1077
00:44:25,160 --> 00:44:28,879
general testing strategy for integrity

1078
00:44:26,900 --> 00:44:29,779
so older versions of software obviously

1079
00:44:28,880 --> 00:44:31,519
are more likely to have known

1080
00:44:29,779 --> 00:44:33,170
vulnerabilities attackers will

1081
00:44:31,519 --> 00:44:34,968
definitely prefer for you to have older

1082
00:44:33,170 --> 00:44:36,619
versions of software in them so chaos

1083
00:44:34,969 --> 00:44:38,329
test is to inject older versions of

1084
00:44:36,619 --> 00:44:41,779
software into libraries containers and

1085
00:44:38,329 --> 00:44:43,009
other components this quote here we're

1086
00:44:41,779 --> 00:44:44,569
moving onto the dye model and how to

1087
00:44:43,009 --> 00:44:47,209
test this is for the two people in the

1088
00:44:44,569 --> 00:44:50,119
audience that have read Sylvia Plath so

1089
00:44:47,209 --> 00:44:51,769
let's start with distributed distributed

1090
00:44:50,119 --> 00:44:52,939
is closely aligned to availability so

1091
00:44:51,769 --> 00:44:54,910
all of the tools we mentioned before

1092
00:44:52,939 --> 00:44:56,989
will work for that as well

1093
00:44:54,910 --> 00:44:58,640
multi-region services offer a fun

1094
00:44:56,989 --> 00:45:00,619
opportunity to bamboozle attackers

1095
00:44:58,640 --> 00:45:03,140
because if you have load balancing you

1096
00:45:00,619 --> 00:45:05,180
can actually rapidly redeploy services

1097
00:45:03,140 --> 00:45:06,890
you can change the composition of how

1098
00:45:05,180 --> 00:45:09,259
your services look and where they're set

1099
00:45:06,890 --> 00:45:11,029
up so you can shuffle IP blocks and make

1100
00:45:09,259 --> 00:45:12,559
them different on a regular basis and

1101
00:45:11,029 --> 00:45:14,630
the net result is you're changing the

1102
00:45:12,559 --> 00:45:16,400
lateral movement game for attackers and

1103
00:45:14,630 --> 00:45:17,959
measuring reverse uptime can help with

1104
00:45:16,400 --> 00:45:21,739
the strategy which I'll mention in a

1105
00:45:17,959 --> 00:45:23,299
minute next is immutability mutable

1106
00:45:21,739 --> 00:45:25,519
systems create inherent security which

1107
00:45:23,299 --> 00:45:27,650
is often why they're left unguarded data

1108
00:45:25,519 --> 00:45:29,569
can't be stored on disk because it'll

1109
00:45:27,650 --> 00:45:32,630
disappear and come back like a phoenix

1110
00:45:29,569 --> 00:45:34,729
as martin fowler's said but the

1111
00:45:32,630 --> 00:45:36,229
continuous delivery required to support

1112
00:45:34,729 --> 00:45:37,669
deployment of immutable infrastructure

1113
00:45:36,229 --> 00:45:39,589
you also gain a sort of continuous

1114
00:45:37,670 --> 00:45:41,299
defense it creates a volatile

1115
00:45:39,589 --> 00:45:43,038
environment with continually moving

1116
00:45:41,299 --> 00:45:45,019
parts and that makes it difficult for

1117
00:45:43,039 --> 00:45:45,429
attackers to discern how to reach their

1118
00:45:45,019 --> 00:45:47,508
goal

1119
00:45:45,429 --> 00:45:49,160
immutable systems will restrict the

1120
00:45:47,509 --> 00:45:51,589
ability for users to write or modify the

1121
00:45:49,160 --> 00:45:53,209
system in any way because of this most

1122
00:45:51,589 --> 00:45:54,799
immutable systems will allow you to

1123
00:45:53,209 --> 00:45:55,848
create rules like if there's ever a

1124
00:45:54,799 --> 00:45:58,759
right to dress disk

1125
00:45:55,849 --> 00:46:00,890
crash the node entirely these sorts of

1126
00:45:58,759 --> 00:46:03,109
rules force attackers to stay in memory

1127
00:46:00,890 --> 00:46:04,819
which hopefully makes them cry despite

1128
00:46:03,109 --> 00:46:06,469
all the vendor Fudd this is still

1129
00:46:04,819 --> 00:46:08,989
restricted to well-resourced

1130
00:46:06,469 --> 00:46:10,489
attackers for example considering a case

1131
00:46:08,989 --> 00:46:12,199
where an organization creates this kind

1132
00:46:10,489 --> 00:46:14,269
of rule for the docker container now

1133
00:46:12,199 --> 00:46:16,249
you're an attacker with Metasploit

1134
00:46:14,269 --> 00:46:17,808
meterpreter in a web shell running when

1135
00:46:16,249 --> 00:46:19,279
you attempt to touch passwords text

1136
00:46:17,809 --> 00:46:21,519
because that's a juicy file the

1137
00:46:19,279 --> 00:46:23,719
container immediately explodes on you a

1138
00:46:21,519 --> 00:46:25,519
docker image can then be built with what

1139
00:46:23,719 --> 00:46:27,380
I call the bamboozle layer which won't

1140
00:46:25,519 --> 00:46:29,209
affect any of the other teams layers and

1141
00:46:27,380 --> 00:46:30,970
should only need simple ongoing

1142
00:46:29,209 --> 00:46:32,500
maintenance by the security team

1143
00:46:30,970 --> 00:46:35,649
bamboozled lair should contain a bunch

1144
00:46:32,500 --> 00:46:37,599
of like tire fire trash garbage so like

1145
00:46:35,650 --> 00:46:39,040
a home slash user slash passwords dot

1146
00:46:37,599 --> 00:46:41,950
text should be filled up so it looks

1147
00:46:39,040 --> 00:46:43,540
like a realistic file size these

1148
00:46:41,950 --> 00:46:45,460
enticing garbage files can be marked as

1149
00:46:43,540 --> 00:46:47,529
unreadable as paint because attackers

1150
00:46:45,460 --> 00:46:48,730
will want to mark them as writable which

1151
00:46:47,530 --> 00:46:50,740
then would trigger your automated

1152
00:46:48,730 --> 00:46:52,660
shutdown attackers will be forced to me

1153
00:46:50,740 --> 00:46:54,189
persist and DevOps would definitely be

1154
00:46:52,660 --> 00:46:57,879
notified of this because it would cause

1155
00:46:54,190 --> 00:46:59,800
a latency or error rate spike this kind

1156
00:46:57,880 --> 00:47:01,420
of bamboo ceiling will ruin attackers

1157
00:46:59,800 --> 00:47:04,119
days and I love ruining attackers days

1158
00:47:01,420 --> 00:47:06,369
it's a lot of fun the upfront cost to

1159
00:47:04,119 --> 00:47:08,020
make this in there is some but I think

1160
00:47:06,369 --> 00:47:10,420
the ROI is pretty high because you can

1161
00:47:08,020 --> 00:47:11,710
do this kind of into infinity the goal

1162
00:47:10,420 --> 00:47:13,359
for security then it's almost like

1163
00:47:11,710 --> 00:47:15,280
immutability Turtles all the way down

1164
00:47:13,359 --> 00:47:18,279
and that supports infrastructure with

1165
00:47:15,280 --> 00:47:19,569
integrity at all levels ensuring the

1166
00:47:18,280 --> 00:47:21,250
mutability involves testing for

1167
00:47:19,569 --> 00:47:23,170
unauthorized changes then ensuring

1168
00:47:21,250 --> 00:47:25,060
they're being detected in Reverse so in

1169
00:47:23,170 --> 00:47:27,520
example test is injecting attempts at

1170
00:47:25,060 --> 00:47:29,200
writing to disk changes to disk by an

1171
00:47:27,520 --> 00:47:30,970
adversary should be treated the same way

1172
00:47:29,200 --> 00:47:33,339
as a failing disk but as both will

1173
00:47:30,970 --> 00:47:35,410
impede the goal of maintaining a uniform

1174
00:47:33,339 --> 00:47:37,630
fleet and DevOps is probably already

1175
00:47:35,410 --> 00:47:38,640
doing outlier detection which should

1176
00:47:37,630 --> 00:47:41,500
help with this

1177
00:47:38,640 --> 00:47:43,270
finally ephemerality the goal here is to

1178
00:47:41,500 --> 00:47:45,280
drive the value of assets to zero

1179
00:47:43,270 --> 00:47:46,300
testing ephemerality is Larry actually

1180
00:47:45,280 --> 00:47:48,310
anchored around testing for

1181
00:47:46,300 --> 00:47:51,490
statelessness reverse uptime and

1182
00:47:48,310 --> 00:47:53,170
surprisingly throughput most security

1183
00:47:51,490 --> 00:47:55,270
bugs are state related so if you get rid

1184
00:47:53,170 --> 00:47:57,310
of the state you get rid of the bugs and

1185
00:47:55,270 --> 00:47:58,980
that reduces the ability of the

1186
00:47:57,310 --> 00:48:02,770
attackers to persist on systems

1187
00:47:58,980 --> 00:48:05,140
stateless apps then help drive the value

1188
00:48:02,770 --> 00:48:07,000
of data to zero just based on their

1189
00:48:05,140 --> 00:48:08,650
design because they don't rely on

1190
00:48:07,000 --> 00:48:10,060
persistent storage which makes the

1191
00:48:08,650 --> 00:48:13,329
window of opportunity for attackers

1192
00:48:10,060 --> 00:48:14,890
really small reverse uptime measures the

1193
00:48:13,329 --> 00:48:16,780
amount of time a host has been online

1194
00:48:14,890 --> 00:48:18,759
but through the lens more time adds more

1195
00:48:16,780 --> 00:48:20,560
security risk so minimizing the amount

1196
00:48:18,760 --> 00:48:23,920
of time or resource runs actually

1197
00:48:20,560 --> 00:48:25,299
supports ephemerality pass testing for

1198
00:48:23,920 --> 00:48:27,190
ephemerality conclude checks that

1199
00:48:25,300 --> 00:48:29,740
updated resources aren't still accepted

1200
00:48:27,190 --> 00:48:31,630
so API tokens can be changed and then

1201
00:48:29,740 --> 00:48:33,490
inject that old API token to see if it's

1202
00:48:31,630 --> 00:48:35,950
still being accepted if it is that's

1203
00:48:33,490 --> 00:48:38,290
obviously really bad performing in

1204
00:48:35,950 --> 00:48:40,720
versions of integrity testing can apply

1205
00:48:38,290 --> 00:48:42,640
cast ephemerality as well so hashes of

1206
00:48:40,720 --> 00:48:44,259
old instances or old data can be used to

1207
00:48:42,640 --> 00:48:47,529
ensure that resources aren't

1208
00:48:44,260 --> 00:48:49,270
visiting so you can also use things like

1209
00:48:47,530 --> 00:48:50,800
arcade tokens to make sure that they're

1210
00:48:49,270 --> 00:48:52,480
everything's being routed through one

1211
00:48:50,800 --> 00:48:54,550
channel like an s3 bucket and then you

1212
00:48:52,480 --> 00:48:56,860
can monitor that for throughput so as

1213
00:48:54,550 --> 00:48:58,690
some very smart people have said that

1214
00:48:56,860 --> 00:49:00,430
you can actually leverage lessons from

1215
00:48:58,690 --> 00:49:02,560
toll fraud so you can think of cloud

1216
00:49:00,430 --> 00:49:04,270
systems is a form of utility and you can

1217
00:49:02,560 --> 00:49:06,340
actually start looking at billing as a

1218
00:49:04,270 --> 00:49:08,290
security signal even though that's not

1219
00:49:06,340 --> 00:49:10,210
traditionally monitored by security but

1220
00:49:08,290 --> 00:49:11,950
if you maintain daily billing for cloud

1221
00:49:10,210 --> 00:49:14,530
resources you shouldn't see spikes and

1222
00:49:11,950 --> 00:49:16,419
costs so an attacker exfiltrating

1223
00:49:14,530 --> 00:49:18,130
terabytes out of an s3 bucket or running

1224
00:49:16,420 --> 00:49:19,600
a crypto minor is naturally going to

1225
00:49:18,130 --> 00:49:21,130
create some sort of billing spike

1226
00:49:19,600 --> 00:49:23,710
it's especially obvious if you're using

1227
00:49:21,130 --> 00:49:25,300
like hourly billing for example so test

1228
00:49:23,710 --> 00:49:27,430
this with your own crypto minor they'll

1229
00:49:25,300 --> 00:49:29,920
obviously give the Bitcoin back to pay

1230
00:49:27,430 --> 00:49:31,149
the cloud bills don't just keep it so

1231
00:49:29,920 --> 00:49:32,920
then how should InfoSec work together

1232
00:49:31,150 --> 00:49:36,510
with DevOps to implement all of this

1233
00:49:32,920 --> 00:49:36,510
defensive innovation we've discussed

1234
00:49:37,650 --> 00:49:42,640
marriage vows we love each other so

1235
00:49:40,300 --> 00:49:44,110
we're gonna keep this quick so as I

1236
00:49:42,640 --> 00:49:45,670
mentioned James Beckett said that we

1237
00:49:44,110 --> 00:49:47,980
have one InfoSec person to ten ops

1238
00:49:45,670 --> 00:49:51,450
people 200 devs so you all are super

1239
00:49:47,980 --> 00:49:53,950
important we got to scale this right now

1240
00:49:51,450 --> 00:49:55,740
it's just been one big wall of no so how

1241
00:49:53,950 --> 00:49:58,200
are we gonna make this scaleable love

1242
00:49:55,740 --> 00:50:01,470
what does this look like

1243
00:49:58,200 --> 00:50:04,210
first of all chiming and early on

1244
00:50:01,470 --> 00:50:07,029
decisions because historically we've

1245
00:50:04,210 --> 00:50:08,560
heard no late we do a pen test we get a

1246
00:50:07,030 --> 00:50:10,840
list of 127 things

1247
00:50:08,560 --> 00:50:12,990
two days before like we're gonna roll

1248
00:50:10,840 --> 00:50:16,960
out to the world we just don't have time

1249
00:50:12,990 --> 00:50:19,689
to like roll all of this out so instead

1250
00:50:16,960 --> 00:50:23,530
of just no and or so just no we can make

1251
00:50:19,690 --> 00:50:26,950
this a no and next having input on tests

1252
00:50:23,530 --> 00:50:28,900
early because then if you tell us how to

1253
00:50:26,950 --> 00:50:33,210
do all this testing it then becomes

1254
00:50:28,900 --> 00:50:36,640
scalable through all of devs test Suites

1255
00:50:33,210 --> 00:50:38,650
next if we're only the last no gate in

1256
00:50:36,640 --> 00:50:41,740
the delivery process there's no way we

1257
00:50:38,650 --> 00:50:44,350
can improve all of those features at the

1258
00:50:41,740 --> 00:50:46,029
last minute no one likes the pen tests

1259
00:50:44,350 --> 00:50:49,060
at the last minute it's a thanks I hate

1260
00:50:46,030 --> 00:50:52,630
it response so if we can get input super

1261
00:50:49,060 --> 00:50:54,759
early we can embed it InfoSec needs to

1262
00:50:52,630 --> 00:50:56,770
be focusing on outcomes not just outputs

1263
00:50:54,760 --> 00:50:57,710
if these can be aligned to business

1264
00:50:56,770 --> 00:51:00,770
goals No

1265
00:50:57,710 --> 00:51:03,470
matter how important they are it can

1266
00:51:00,770 --> 00:51:06,980
improve our outcomes if we can be

1267
00:51:03,470 --> 00:51:09,649
focusing on TTR time to respond or time

1268
00:51:06,980 --> 00:51:11,390
to restore also work on creating other

1269
00:51:09,650 --> 00:51:13,760
security metrics the line with things

1270
00:51:11,390 --> 00:51:16,640
like lead time release frequency and

1271
00:51:13,760 --> 00:51:18,380
change fail rate it can help communicate

1272
00:51:16,640 --> 00:51:21,379
the importance of everything else that

1273
00:51:18,380 --> 00:51:22,580
you're doing next up security game day

1274
00:51:21,380 --> 00:51:24,890
should be conducted along with

1275
00:51:22,580 --> 00:51:26,509
performance related to game days not

1276
00:51:24,890 --> 00:51:28,520
just treated as a completely separate

1277
00:51:26,510 --> 00:51:30,859
species that are conducted by DevOps and

1278
00:51:28,520 --> 00:51:32,720
security separately if in folks that can

1279
00:51:30,859 --> 00:51:35,180
craft game days that are based on

1280
00:51:32,720 --> 00:51:36,919
business impact priorities but overlap

1281
00:51:35,180 --> 00:51:38,299
between outages or SLA features and

1282
00:51:36,920 --> 00:51:42,380
security related incidents that can be

1283
00:51:38,300 --> 00:51:44,359
this what we found alongside with the

1284
00:51:42,380 --> 00:51:47,240
rest of the team it really helps get

1285
00:51:44,359 --> 00:51:49,369
buy-in info section team up with dev

1286
00:51:47,240 --> 00:51:51,500
obstacle to be buy-in for chaos and

1287
00:51:49,369 --> 00:51:53,480
resilience the reality today is that

1288
00:51:51,500 --> 00:51:55,280
only more advanced tech orgs adopt chaos

1289
00:51:53,480 --> 00:51:56,930
engine earing and practice but given the

1290
00:51:55,280 --> 00:51:58,490
dual performance and security benefits

1291
00:51:56,930 --> 00:52:00,140
DevOps and InfoSec should be working

1292
00:51:58,490 --> 00:52:02,000
together to foster consensus around

1293
00:52:00,140 --> 00:52:05,900
resilience approach and then implement

1294
00:52:02,000 --> 00:52:07,700
it InfoSec calls it visibility DevOps

1295
00:52:05,900 --> 00:52:09,320
calls it observability but really it's

1296
00:52:07,700 --> 00:52:10,910
just a shared capability into

1297
00:52:09,320 --> 00:52:12,680
understanding what our systems are doing

1298
00:52:10,910 --> 00:52:15,290
and what they look like it gives us an

1299
00:52:12,680 --> 00:52:16,759
ability to see error errors within an

1300
00:52:15,290 --> 00:52:20,830
app that can help with performance and

1301
00:52:16,760 --> 00:52:24,020
sniff out any type of malicious activity

1302
00:52:20,830 --> 00:52:25,640
before reinventing the wheel InfoSec

1303
00:52:24,020 --> 00:52:27,680
teams should check with their DevOps

1304
00:52:25,640 --> 00:52:30,700
colleagues DevOps is likely already

1305
00:52:27,680 --> 00:52:33,049
collecting many of the system level and

1306
00:52:30,700 --> 00:52:36,529
system level metrics that are needed and

1307
00:52:33,050 --> 00:52:37,880
performing some security analysis so if

1308
00:52:36,530 --> 00:52:39,230
you take aways changing cultures

1309
00:52:37,880 --> 00:52:40,940
essential the best way to challenge

1310
00:52:39,230 --> 00:52:42,320
culture is to change what people do and

1311
00:52:40,940 --> 00:52:43,780
attempting to change the way people

1312
00:52:42,320 --> 00:52:46,640
think

1313
00:52:43,780 --> 00:52:49,220
so in conclusion thank you all for

1314
00:52:46,640 --> 00:52:50,960
sticking with us DevOps is the new

1315
00:52:49,220 --> 00:52:53,480
engine of business we have to accept

1316
00:52:50,960 --> 00:52:54,740
that InfoSec has the chance to marry it

1317
00:52:53,480 --> 00:52:57,260
before it's too late

1318
00:52:54,740 --> 00:52:58,970
InfoSec won't secure a future for itself

1319
00:52:57,260 --> 00:53:01,280
by attempting to force itself within

1320
00:52:58,970 --> 00:53:03,919
DevOps or continuing to play the role of

1321
00:53:01,280 --> 00:53:05,720
this staunch gatekeeper council

1322
00:53:03,920 --> 00:53:07,640
resilience rep chaos and resilience

1323
00:53:05,720 --> 00:53:09,859
represent a natural home for InfoSec and

1324
00:53:07,640 --> 00:53:10,080
also a better future for InfoSec one

1325
00:53:09,859 --> 00:53:12,779
that

1326
00:53:10,080 --> 00:53:15,420
actually fun and innovative enterprise

1327
00:53:12,780 --> 00:53:17,310
security teams must unify responsibility

1328
00:53:15,420 --> 00:53:18,630
and accountability that's the only way

1329
00:53:17,310 --> 00:53:21,240
to truly marry DevOps

1330
00:53:18,630 --> 00:53:22,860
if it doesn't it's gonna be seated the

1331
00:53:21,240 --> 00:53:24,350
kids table in the business until it's

1332
00:53:22,860 --> 00:53:27,240
uninvited from the business all together

1333
00:53:24,350 --> 00:53:29,700
so the time for InfoSec to begin its

1334
00:53:27,240 --> 00:53:31,830
metamorphosis is now before a DevOps

1335
00:53:29,700 --> 00:53:34,620
starts carving its own path to secure

1336
00:53:31,830 --> 00:53:36,569
systems giving up control can definitely

1337
00:53:34,620 --> 00:53:38,640
feel scary but resilience offers a

1338
00:53:36,570 --> 00:53:40,290
beacon of hope for our industry that

1339
00:53:38,640 --> 00:53:43,500
InfoSec can finally be innovative and

1340
00:53:40,290 --> 00:53:45,210
also be an engine of the business so we

1341
00:53:43,500 --> 00:53:47,160
hope the recommendations imparted today

1342
00:53:45,210 --> 00:53:49,470
help you go forth and live a long happy

1343
00:53:47,160 --> 00:53:50,970
fulfilling marriage with DevOps to close

1344
00:53:49,470 --> 00:53:53,339
remember the philosopher Nietzsche's

1345
00:53:50,970 --> 00:53:55,529
words you must have chaos within you to

1346
00:53:53,340 --> 00:53:57,570
give birth to a dancing star so for

1347
00:53:55,530 --> 00:53:59,580
InfoSec to achieve greatness and must

1348
00:53:57,570 --> 00:54:01,740
control chaos and marry devops

1349
00:53:59,580 --> 00:54:07,549
with that thank you so much

1350
00:54:01,740 --> 00:54:07,549
[Applause]

