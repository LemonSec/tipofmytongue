1
00:00:00,030 --> 00:00:05,670
welcome to flying a false-flag advanced

2
00:00:02,939 --> 00:00:08,010
si to trust conflicts and domain

3
00:00:05,670 --> 00:00:10,920
takeover we're in the Jasmine room and

4
00:00:08,010 --> 00:00:13,500
the speaker is Nick Landers a couple of

5
00:00:10,920 --> 00:00:15,680
notes before we begin stop by the

6
00:00:13,500 --> 00:00:18,000
business hall located in Mandalay Bay

7
00:00:15,680 --> 00:00:19,740
Oceanside and shoreline ballrooms on

8
00:00:18,000 --> 00:00:22,800
level 2 during the day and for the

9
00:00:19,740 --> 00:00:24,599
Welcome Reception at 5:30 tonight the

10
00:00:22,800 --> 00:00:27,449
blackhat Arsenal who's in the business

11
00:00:24,600 --> 00:00:29,580
hall in level 2 also join us for the

12
00:00:27,449 --> 00:00:33,780
pony Awards in lagoon JKL

13
00:00:29,580 --> 00:00:36,570
at 6:30 p.m. please put your cell phones

14
00:00:33,780 --> 00:00:40,379
on silent make sure that you're not

15
00:00:36,570 --> 00:00:42,090
disturbing your neighbors and if you

16
00:00:40,379 --> 00:00:43,559
have questions at the end please make

17
00:00:42,090 --> 00:00:45,980
sure that you use the microphones that

18
00:00:43,559 --> 00:00:48,718
are located on either side here and here

19
00:00:45,980 --> 00:00:50,218
with that I want to go ahead and invite

20
00:00:48,719 --> 00:01:02,039
Nick up to the stage

21
00:00:50,219 --> 00:01:04,860
thank you thanks thank you guys that was

22
00:01:02,039 --> 00:01:06,390
really nice hahaha so it's my first

23
00:01:04,860 --> 00:01:09,150
black hat talk you'll have to forgive me

24
00:01:06,390 --> 00:01:11,909
for any nervousness but first I want to

25
00:01:09,150 --> 00:01:13,470
start by introducing myself so classic

26
00:01:11,909 --> 00:01:16,890
bio page some might recognize me from

27
00:01:13,470 --> 00:01:19,320
Twitter I have the scared looking out or

28
00:01:16,890 --> 00:01:21,090
whatever emotion it's showing I'm a

29
00:01:19,320 --> 00:01:22,798
technical lead at silent break security

30
00:01:21,090 --> 00:01:25,979
you can find us up at the front row in

31
00:01:22,799 --> 00:01:28,350
black I do primarily research and

32
00:01:25,979 --> 00:01:30,420
development offensive operations with

33
00:01:28,350 --> 00:01:32,009
the focus I do a lot of consulting as

34
00:01:30,420 --> 00:01:33,630
well so this presentation is really

35
00:01:32,009 --> 00:01:36,840
gonna be centered around you know the

36
00:01:33,630 --> 00:01:38,220
offensive applications of c2 and sort of

37
00:01:36,840 --> 00:01:38,869
taking that a little bit further than it

38
00:01:38,220 --> 00:01:41,100
has before

39
00:01:38,869 --> 00:01:42,509
some might recognize our dark side ops

40
00:01:41,100 --> 00:01:45,210
training which we give at blackhat every

41
00:01:42,509 --> 00:01:48,090
year or the shellcode RTI project or Red

42
00:01:45,210 --> 00:01:50,759
Team toolkit so I'll start with a quick

43
00:01:48,090 --> 00:01:53,159
agenda we'll begin with some c2

44
00:01:50,759 --> 00:01:54,299
methodology and channels concepts so

45
00:01:53,159 --> 00:01:56,250
we're just gonna kind of get everybody

46
00:01:54,299 --> 00:01:58,259
caught up to you know what do I mean

47
00:01:56,250 --> 00:01:59,000
when I say command and control and where

48
00:01:58,259 --> 00:02:01,320
are we at now

49
00:01:59,000 --> 00:02:03,600
following that we'll tackle some trust

50
00:02:01,320 --> 00:02:05,398
conflicts and discuss that and then

51
00:02:03,600 --> 00:02:07,530
cloud abuse and take over so the death

52
00:02:05,399 --> 00:02:08,910
of the IP sort of the transition that

53
00:02:07,530 --> 00:02:10,378
we're making into that realm and then

54
00:02:08,910 --> 00:02:11,730
we'll close up some final thoughts and

55
00:02:10,378 --> 00:02:13,590
hopefully some questions if I can talk

56
00:02:11,730 --> 00:02:17,399
fast enough so

57
00:02:13,590 --> 00:02:19,080
first command and control and at heart

58
00:02:17,400 --> 00:02:22,080
I'm actually a software developer

59
00:02:19,080 --> 00:02:23,849
I don't like fixing code or debugging it

60
00:02:22,080 --> 00:02:25,800
much so that's why I write malware

61
00:02:23,849 --> 00:02:27,599
instead of software but in a software

62
00:02:25,800 --> 00:02:30,299
model the concepts of command and

63
00:02:27,599 --> 00:02:32,220
control exists you know and have existed

64
00:02:30,299 --> 00:02:33,870
for a really long time you have a client

65
00:02:32,220 --> 00:02:35,609
and a server with some channel between

66
00:02:33,870 --> 00:02:37,519
them and usually a perimeter boundary

67
00:02:35,610 --> 00:02:39,690
that you're crossing so part of that

68
00:02:37,519 --> 00:02:41,849
includes channel selection the

69
00:02:39,690 --> 00:02:43,739
redundancy of the server endpoints they

70
00:02:41,849 --> 00:02:46,170
might worry about obfuscation to protect

71
00:02:43,739 --> 00:02:48,120
IP or serialization encryption and the

72
00:02:46,170 --> 00:02:49,798
trust of the server itself now what's

73
00:02:48,120 --> 00:02:51,750
interesting is we often times feel

74
00:02:49,799 --> 00:02:53,370
isolated in our realm but all of these

75
00:02:51,750 --> 00:02:54,720
problems are not unique to malware

76
00:02:53,370 --> 00:02:56,340
either we struggle with the same

77
00:02:54,720 --> 00:02:58,260
qualities we have to worry about

78
00:02:56,340 --> 00:03:00,090
serialization and encryption and Trust

79
00:02:58,260 --> 00:03:02,040
so you can effectively think of an

80
00:03:00,090 --> 00:03:03,599
implant or a military jargon as a

81
00:03:02,040 --> 00:03:06,480
listening post or LPS you'll hear me

82
00:03:03,599 --> 00:03:07,560
refer to it as as a client and server

83
00:03:06,480 --> 00:03:09,660
there's really really no difference

84
00:03:07,560 --> 00:03:11,910
between them and before I go any further

85
00:03:09,660 --> 00:03:14,099
I want to also define what I mean when I

86
00:03:11,910 --> 00:03:16,049
talk about c2 it's a broad concept and

87
00:03:14,099 --> 00:03:18,388
its fans everything - everything from

88
00:03:16,049 --> 00:03:20,430
you know the agent and the commands you

89
00:03:18,389 --> 00:03:22,739
execute the functionality it has and the

90
00:03:20,430 --> 00:03:24,569
transits that you use but generally when

91
00:03:22,739 --> 00:03:26,400
I talk about c2 I'm talking about three

92
00:03:24,569 --> 00:03:28,950
primary layers where you're taking some

93
00:03:26,400 --> 00:03:30,959
binary data transiting across a network

94
00:03:28,950 --> 00:03:33,599
boundary and then deserializing it on

95
00:03:30,959 --> 00:03:35,519
the far side and further I think we can

96
00:03:33,599 --> 00:03:38,638
break this down into two larger concepts

97
00:03:35,519 --> 00:03:40,709
one is c2 is a technique which is a

98
00:03:38,639 --> 00:03:42,630
strategy of execution so that's like any

99
00:03:40,709 --> 00:03:44,549
other strategy we have you know a

100
00:03:42,630 --> 00:03:46,560
particular methodology we apply to our

101
00:03:44,549 --> 00:03:47,819
c2 the second one is the channel so

102
00:03:46,560 --> 00:03:50,160
that's the medium that we work across

103
00:03:47,819 --> 00:03:51,179
that could be TCP or UDP we'll talk

104
00:03:50,160 --> 00:03:53,459
about a bunch of them throughout the

105
00:03:51,180 --> 00:03:55,889
slides and to start I want to begin with

106
00:03:53,459 --> 00:03:59,250
a technique so this is our strategy and

107
00:03:55,889 --> 00:04:01,049
this covers a lot of concepts I'm gonna

108
00:03:59,250 --> 00:04:05,069
diagram this out on sort of an implant a

109
00:04:01,049 --> 00:04:07,200
naught and LP relationship and first

110
00:04:05,069 --> 00:04:08,548
we'll talk about orientation so when we

111
00:04:07,200 --> 00:04:10,500
think about c2 we can think about a

112
00:04:08,549 --> 00:04:12,000
reverse shell or a bind shell as it's

113
00:04:10,500 --> 00:04:13,380
commonly referred to where the operator

114
00:04:12,000 --> 00:04:15,359
is connecting back into the implant

115
00:04:13,380 --> 00:04:18,238
those both have to do with the strategy

116
00:04:15,359 --> 00:04:20,418
of our c2 in practice this looks like

117
00:04:18,238 --> 00:04:22,650
port knocking web shells buying shells

118
00:04:20,418 --> 00:04:24,419
you know all of the classic I

119
00:04:22,650 --> 00:04:26,388
compromised a web server and I'm sending

120
00:04:24,419 --> 00:04:28,219
it a command in real time

121
00:04:26,389 --> 00:04:30,319
is extremely efficient and it has

122
00:04:28,219 --> 00:04:32,120
benefits with attribution because when

123
00:04:30,319 --> 00:04:34,069
we are a client we can obfuscate our

124
00:04:32,120 --> 00:04:35,599
true identity a little bit easier than

125
00:04:34,069 --> 00:04:37,460
we can with a server it's a bit

126
00:04:35,599 --> 00:04:39,289
conditional though you can't always use

127
00:04:37,460 --> 00:04:40,729
things like you know web shells on

128
00:04:39,289 --> 00:04:43,128
assessments where there's gnat or

129
00:04:40,729 --> 00:04:44,930
firewall rules enabled so usually we

130
00:04:43,129 --> 00:04:46,430
resort to the opposite where it's a

131
00:04:44,930 --> 00:04:48,169
reverse shell and we have to deal with

132
00:04:46,430 --> 00:04:50,150
things like intervals so you know the

133
00:04:48,169 --> 00:04:52,099
beaconing process that an agent might do

134
00:04:50,150 --> 00:04:54,590
or alternatively the classic you know

135
00:04:52,099 --> 00:04:56,509
shell in quotes term where we open up a

136
00:04:54,590 --> 00:04:59,508
socket and we transit data back and

137
00:04:56,509 --> 00:05:01,430
forth over the same socket beaconing is

138
00:04:59,509 --> 00:05:03,319
very traditional particularly in red

139
00:05:01,430 --> 00:05:04,939
teaming we have stuff like cobalt strike

140
00:05:03,319 --> 00:05:07,219
where you have an interval time that

141
00:05:04,939 --> 00:05:08,750
decides how quickly you can take actions

142
00:05:07,219 --> 00:05:12,080
so I like to call this concept action

143
00:05:08,750 --> 00:05:13,759
delay the nice part about beaconing is

144
00:05:12,080 --> 00:05:15,229
it's simple and consistent so it's

145
00:05:13,759 --> 00:05:16,729
really easy to code and we always have

146
00:05:15,229 --> 00:05:18,589
an expectation for when an agent is

147
00:05:16,729 --> 00:05:20,359
gonna call back to us we obviously have

148
00:05:18,589 --> 00:05:22,129
the disadvantage of it being inefficient

149
00:05:20,360 --> 00:05:23,629
and we get dry beacons that aren't doing

150
00:05:22,129 --> 00:05:25,249
anything so the agent is just checking

151
00:05:23,629 --> 00:05:26,990
in with us and we're always making this

152
00:05:25,249 --> 00:05:29,569
trade-off between setting a really short

153
00:05:26,990 --> 00:05:31,339
beginning time to reduce action delay or

154
00:05:29,569 --> 00:05:34,009
setting a really long beaconing time to

155
00:05:31,339 --> 00:05:35,029
improve stealth a slight alternative

156
00:05:34,009 --> 00:05:36,349
this would be something like long

157
00:05:35,029 --> 00:05:39,080
polling which you don't necessarily see

158
00:05:36,349 --> 00:05:40,310
all that often in Offensive malware this

159
00:05:39,080 --> 00:05:43,099
is where you sort of blend the

160
00:05:40,310 --> 00:05:45,560
responsiveness of classic beaconing

161
00:05:43,099 --> 00:05:47,870
system with the stealth of you know sort

162
00:05:45,560 --> 00:05:49,250
of long-term beaconing so a connection

163
00:05:47,870 --> 00:05:50,629
is made from a victim to a server and

164
00:05:49,250 --> 00:05:52,430
the server doesn't have to reply

165
00:05:50,629 --> 00:05:54,319
immediately this concept is applied to

166
00:05:52,430 --> 00:05:55,939
web all the time we simply hold the

167
00:05:54,319 --> 00:05:58,009
thread open for some period of time and

168
00:05:55,939 --> 00:05:59,360
serve tasks back down when the operator

169
00:05:58,009 --> 00:06:01,879
decides to actually type them in

170
00:05:59,360 --> 00:06:03,649
assuming we reached some you know 30

171
00:06:01,879 --> 00:06:05,180
second or 45 second interval

172
00:06:03,649 --> 00:06:07,069
we're probably gonna let the connection

173
00:06:05,180 --> 00:06:08,569
reset anyways this is also because

174
00:06:07,069 --> 00:06:10,399
gateways who might man in the middle of

175
00:06:08,569 --> 00:06:13,129
the connection would cause us issues in

176
00:06:10,399 --> 00:06:14,750
this situation distribution is another

177
00:06:13,129 --> 00:06:17,000
quality for anybody to set up Red Team

178
00:06:14,750 --> 00:06:18,529
infrastructure you're working with you

179
00:06:17,000 --> 00:06:20,750
know usually multiple servers with some

180
00:06:18,529 --> 00:06:22,189
sort of round-robin system and you

181
00:06:20,750 --> 00:06:23,629
usually have a failover system so if

182
00:06:22,189 --> 00:06:25,099
domains can't be accessed because of

183
00:06:23,629 --> 00:06:27,199
perimeter controls or they can't be

184
00:06:25,099 --> 00:06:29,089
accessed because of you buying a cheap

185
00:06:27,199 --> 00:06:29,560
VPS which we've had happen plenty of

186
00:06:29,089 --> 00:06:31,339
times

187
00:06:29,560 --> 00:06:33,229
hopefully you have at least one

188
00:06:31,339 --> 00:06:35,360
connection that's successful then the

189
00:06:33,229 --> 00:06:38,120
last concept is routing which introduces

190
00:06:35,360 --> 00:06:39,940
some really complex strategies one being

191
00:06:38,120 --> 00:06:42,220
you pushing traffic through if there

192
00:06:39,940 --> 00:06:44,110
and your orientation maintains that an

193
00:06:42,220 --> 00:06:46,060
implant is shoveling data to a listening

194
00:06:44,110 --> 00:06:47,860
post you can also blend this with

195
00:06:46,060 --> 00:06:49,600
distribution and this is the classic Red

196
00:06:47,860 --> 00:06:50,950
Team set up where we have Bastion hosts

197
00:06:49,600 --> 00:06:53,470
we're not interested in loading our

198
00:06:50,950 --> 00:06:54,789
tools onto lots of servers on the web we

199
00:06:53,470 --> 00:06:55,360
load them onto a single server and a

200
00:06:54,790 --> 00:06:57,310
back-end

201
00:06:55,360 --> 00:06:59,560
and we distribute bastions across the

202
00:06:57,310 --> 00:07:01,690
web to collect traffic you can invert

203
00:06:59,560 --> 00:07:04,330
this same strategy blending sort of that

204
00:07:01,690 --> 00:07:06,370
orientation and routing piece to get

205
00:07:04,330 --> 00:07:08,020
sort of what I like to call a dead drop

206
00:07:06,370 --> 00:07:10,570
system this is where you have some

207
00:07:08,020 --> 00:07:12,370
third-party application and there's a

208
00:07:10,570 --> 00:07:14,170
client agent checking for tasking

209
00:07:12,370 --> 00:07:16,780
against that third party and then

210
00:07:14,170 --> 00:07:18,670
attacker can plant callback data into

211
00:07:16,780 --> 00:07:21,669
that service and the agent can pull it

212
00:07:18,670 --> 00:07:23,560
back and push results so this improves

213
00:07:21,670 --> 00:07:25,210
our stealth wildly obviously the third

214
00:07:23,560 --> 00:07:26,950
party becomes the only thing that most

215
00:07:25,210 --> 00:07:29,080
defenders would see in terms of

216
00:07:26,950 --> 00:07:30,820
perimeter defenses but it also

217
00:07:29,080 --> 00:07:32,620
introduces a lot of complexity for our

218
00:07:30,820 --> 00:07:34,990
code and an action delay that's at least

219
00:07:32,620 --> 00:07:37,240
n times - in terms of you know what a

220
00:07:34,990 --> 00:07:38,680
traditional requests round trip would be

221
00:07:37,240 --> 00:07:40,390
to that third party cuz we have to place

222
00:07:38,680 --> 00:07:41,790
data there and then have another agent

223
00:07:40,390 --> 00:07:43,990
coming to retrieve data from there

224
00:07:41,790 --> 00:07:45,280
all right so abstract stuff out of the

225
00:07:43,990 --> 00:07:47,050
way let's get to sort of the second half

226
00:07:45,280 --> 00:07:48,539
of our formula and talk about some basic

227
00:07:47,050 --> 00:07:50,830
channels and some of the popular ones

228
00:07:48,540 --> 00:07:53,530
for anybody who's familiar with maybe

229
00:07:50,830 --> 00:07:55,570
modern malware samples sockets are still

230
00:07:53,530 --> 00:07:56,830
surprisingly popular which is funny

231
00:07:55,570 --> 00:07:58,900
because I don't think red teamers use

232
00:07:56,830 --> 00:08:00,099
them all that often they're responsive

233
00:07:58,900 --> 00:08:01,599
and simple which have huge advantages

234
00:08:00,100 --> 00:08:03,010
for us and you can imagine in this

235
00:08:01,600 --> 00:08:05,040
scenario you know an implant is just

236
00:08:03,010 --> 00:08:07,570
posting back some host data to a server

237
00:08:05,040 --> 00:08:09,490
we might add encryption to that help

238
00:08:07,570 --> 00:08:12,190
improve the stealth or the track ability

239
00:08:09,490 --> 00:08:13,840
we also might add ssl a bit

240
00:08:12,190 --> 00:08:16,060
unnecessarily considering we just added

241
00:08:13,840 --> 00:08:18,010
encryption but we might do this to blend

242
00:08:16,060 --> 00:08:19,870
in with other protocols that use SSL as

243
00:08:18,010 --> 00:08:21,610
well we could also add chunking to

244
00:08:19,870 --> 00:08:23,740
reduce the total volume of any single

245
00:08:21,610 --> 00:08:25,600
request at the end of the day though any

246
00:08:23,740 --> 00:08:27,640
observer will one probably look at the

247
00:08:25,600 --> 00:08:29,530
destination of the traffic and assess

248
00:08:27,640 --> 00:08:31,960
the fact that that destination either

249
00:08:29,530 --> 00:08:33,939
isn't trusted or is unknown - they could

250
00:08:31,960 --> 00:08:35,559
look at the protocol or other words lack

251
00:08:33,940 --> 00:08:37,810
thereof and say well this traffic is

252
00:08:35,559 --> 00:08:40,359
interested because it's unknown in terms

253
00:08:37,809 --> 00:08:42,909
of you know the style or the actual

254
00:08:40,360 --> 00:08:45,130
content two or three would be the volume

255
00:08:42,909 --> 00:08:47,290
so in total regardless of how many

256
00:08:45,130 --> 00:08:48,850
requests we send can this be detected

257
00:08:47,290 --> 00:08:50,920
this is common in like detecting DNS

258
00:08:48,850 --> 00:08:53,170
traffic DNS traffic is super stealthy

259
00:08:50,920 --> 00:08:55,420
until you need to get volume out of it

260
00:08:53,170 --> 00:08:57,670
it falls apart because DNS just isn't

261
00:08:55,420 --> 00:08:59,229
good at carrying large volume and the

262
00:08:57,670 --> 00:09:00,790
lastly would be parameter controls so

263
00:08:59,230 --> 00:09:02,500
you know our implants might not be able

264
00:09:00,790 --> 00:09:03,880
to communicate or a defender might set

265
00:09:02,500 --> 00:09:05,649
up a perimeter control that blocks a

266
00:09:03,880 --> 00:09:08,019
particular port or protocol and port

267
00:09:05,649 --> 00:09:10,269
combination from this we can start to

268
00:09:08,019 --> 00:09:12,190
extract attacker priorities when we when

269
00:09:10,269 --> 00:09:14,470
it comes to c2 so the first one is trust

270
00:09:12,190 --> 00:09:16,300
and we talked about this a lot usually

271
00:09:14,470 --> 00:09:17,980
we're referring to trust repositories

272
00:09:16,300 --> 00:09:19,870
where we look at categorization or black

273
00:09:17,980 --> 00:09:22,209
lists we want to avoid being blacklisted

274
00:09:19,870 --> 00:09:24,339
while being categorized as as good as we

275
00:09:22,209 --> 00:09:25,869
can there also takeover primitives and

276
00:09:24,339 --> 00:09:27,790
piggybacking that come and play here so

277
00:09:25,870 --> 00:09:29,860
if we can piggyback off of traffic or

278
00:09:27,790 --> 00:09:30,969
domains that are already trusted then we

279
00:09:29,860 --> 00:09:33,100
don't have to gain that trust ourselves

280
00:09:30,970 --> 00:09:34,690
which is pretty big to would be our

281
00:09:33,100 --> 00:09:36,639
content so we are interested in making

282
00:09:34,690 --> 00:09:38,470
our content match what's expected for a

283
00:09:36,639 --> 00:09:40,480
particular traffic signature this is

284
00:09:38,470 --> 00:09:42,550
like the character set the frequency the

285
00:09:40,480 --> 00:09:44,560
pure volume of that and lastly the

286
00:09:42,550 --> 00:09:46,540
vector so the protocol the port and

287
00:09:44,560 --> 00:09:48,459
there are these like abstraction details

288
00:09:46,540 --> 00:09:50,740
that start to occur on top of that you

289
00:09:48,459 --> 00:09:52,599
think of like DNS over HTTP that's

290
00:09:50,740 --> 00:09:54,339
technically HTTP traffic but now we have

291
00:09:52,600 --> 00:09:56,079
an entirely new protocol being

292
00:09:54,339 --> 00:09:58,209
implemented on top of it it's almost

293
00:09:56,079 --> 00:10:00,430
like an entirely new layer to our model

294
00:09:58,209 --> 00:10:02,829
we also have orientation structure and

295
00:10:00,430 --> 00:10:04,930
then just the limitations of you know

296
00:10:02,829 --> 00:10:06,459
what that particular method looks like

297
00:10:04,930 --> 00:10:08,349
so we might not be able to pack data

298
00:10:06,459 --> 00:10:11,109
past a certain size you might have to

299
00:10:08,350 --> 00:10:13,120
encode it in a specific way and it's

300
00:10:11,110 --> 00:10:14,980
with this that Comp Sci strikes back and

301
00:10:13,120 --> 00:10:16,300
we return to the OSI model which I've

302
00:10:14,980 --> 00:10:18,190
gone ahead and taken the bottom two

303
00:10:16,300 --> 00:10:19,870
layers off and we start to think about

304
00:10:18,190 --> 00:10:21,519
how defenses are implemented against

305
00:10:19,870 --> 00:10:23,410
this model whereby there's coverage

306
00:10:21,519 --> 00:10:25,180
against any particular you know

307
00:10:23,410 --> 00:10:27,069
horizontal set of this model so if you

308
00:10:25,180 --> 00:10:28,449
don't have a layer seven firewall you're

309
00:10:27,070 --> 00:10:30,820
not getting any insight and anything

310
00:10:28,449 --> 00:10:32,890
passed TCP traffic there's also a

311
00:10:30,820 --> 00:10:35,529
vertical piece to this as well where you

312
00:10:32,890 --> 00:10:38,350
can think of you having insight into TCP

313
00:10:35,529 --> 00:10:39,850
and UDP but you allowing ICMP completely

314
00:10:38,350 --> 00:10:41,620
those technically exist at the same

315
00:10:39,850 --> 00:10:42,940
layer but your layer seven firewall

316
00:10:41,620 --> 00:10:44,620
doesn't mean anything if it can't

317
00:10:42,940 --> 00:10:46,899
analyze a particular layer beneath it

318
00:10:44,620 --> 00:10:48,730
and then like I said I think there's

319
00:10:46,899 --> 00:10:50,709
becoming this higher layer like a layer

320
00:10:48,730 --> 00:10:52,959
eight I played with an in cloud layer

321
00:10:50,709 --> 00:10:54,518
but I'm sure that the hub review boards

322
00:10:52,959 --> 00:10:56,050
wouldn't go for that but it's these

323
00:10:54,519 --> 00:10:57,880
abstractions that are on top of

324
00:10:56,050 --> 00:11:00,550
protocols where like HTTP is being used

325
00:10:57,880 --> 00:11:01,870
to do all sorts of nonsense now so

326
00:11:00,550 --> 00:11:04,300
breaking this down kind of diving into

327
00:11:01,870 --> 00:11:06,430
each of them HTTP super common in

328
00:11:04,300 --> 00:11:06,969
malicious tooling we usually have some

329
00:11:06,430 --> 00:11:08,560
sort of

330
00:11:06,970 --> 00:11:10,449
Qwest where we're basics before encoding

331
00:11:08,560 --> 00:11:12,790
data it's extremely common at the

332
00:11:10,449 --> 00:11:14,439
perimeter which is great for us it's

333
00:11:12,790 --> 00:11:17,170
layered on TCP which means we get great

334
00:11:14,439 --> 00:11:18,730
reliability it has complex dialect and

335
00:11:17,170 --> 00:11:20,079
usage this is probably something most

336
00:11:18,730 --> 00:11:22,899
people don't think about the fact that

337
00:11:20,079 --> 00:11:24,489
encoded binary data or mass amounts of

338
00:11:22,899 --> 00:11:27,089
binary data that have been encoded is

339
00:11:24,490 --> 00:11:29,350
not rare in HTTP that's extremely common

340
00:11:27,089 --> 00:11:31,149
HTTP is used for all sorts of stuff so

341
00:11:29,350 --> 00:11:33,399
we can blend in easily even if we look

342
00:11:31,149 --> 00:11:34,990
really obscure it's also well supported

343
00:11:33,399 --> 00:11:36,430
in languages which as a developer is a

344
00:11:34,990 --> 00:11:38,470
huge piece for me one of the big reasons

345
00:11:36,430 --> 00:11:39,849
people don't build the crazy c2 systems

346
00:11:38,470 --> 00:11:41,560
that you can think of in your head is

347
00:11:39,850 --> 00:11:43,180
because nobody wants to figure out how

348
00:11:41,560 --> 00:11:46,079
to build an HTTP to library by

349
00:11:43,180 --> 00:11:49,209
themselves or a WebSockets integration

350
00:11:46,079 --> 00:11:50,589
so beefing this up we're trying to

351
00:11:49,209 --> 00:11:52,029
masquerade our content a little more

352
00:11:50,589 --> 00:11:53,230
we'll probably switch the request to

353
00:11:52,029 --> 00:11:54,730
maybe a post request there are

354
00:11:53,230 --> 00:11:56,769
trade-offs here but we're interested in

355
00:11:54,730 --> 00:11:59,079
maybe getting our callback data out of

356
00:11:56,769 --> 00:12:01,269
web blogs we might use sensitive domains

357
00:11:59,079 --> 00:12:02,500
like medical or banking domains to avoid

358
00:12:01,269 --> 00:12:03,759
the fact that the domain would get

359
00:12:02,500 --> 00:12:05,350
logged at all or the traffic would get

360
00:12:03,759 --> 00:12:06,790
logged at all and we might embed

361
00:12:05,350 --> 00:12:08,410
ourselves in special headers like the

362
00:12:06,790 --> 00:12:10,899
authenticate header which are explicitly

363
00:12:08,410 --> 00:12:12,639
denied analysis because of the sensitive

364
00:12:10,899 --> 00:12:15,519
data that they carry so there are all

365
00:12:12,639 --> 00:12:16,689
these nuances to the protocol and really

366
00:12:15,519 --> 00:12:18,309
what I'm getting at is when you think

367
00:12:16,689 --> 00:12:21,009
about a layer 7 firewall you think about

368
00:12:18,309 --> 00:12:24,040
oh it can detect HTTP traffic but what

369
00:12:21,009 --> 00:12:26,230
about HTTP traffic can it detect inside

370
00:12:24,040 --> 00:12:28,180
or or Canada extract from HTTP can it

371
00:12:26,230 --> 00:12:29,800
can it extract particular interesting

372
00:12:28,180 --> 00:12:32,019
headers or kind of know the difference

373
00:12:29,800 --> 00:12:34,569
between a fake masquerading domain or a

374
00:12:32,019 --> 00:12:37,089
real medical domain pushing this further

375
00:12:34,569 --> 00:12:38,559
the domain itself besides malware com

376
00:12:37,089 --> 00:12:40,569
probably want to get categorized we

377
00:12:38,559 --> 00:12:41,769
could purchase expired domains this is a

378
00:12:40,569 --> 00:12:43,479
common thing for anybody who's not

379
00:12:41,769 --> 00:12:45,519
familiar with it in fact there are some

380
00:12:43,480 --> 00:12:46,839
amazing tools that have been released

381
00:12:45,519 --> 00:12:49,139
that effectively look at a

382
00:12:46,839 --> 00:12:51,790
categorization of any given domain

383
00:12:49,139 --> 00:12:53,139
they're a bunch of providers and really

384
00:12:51,790 --> 00:12:55,809
the trust repository is somewhat

385
00:12:53,139 --> 00:12:57,490
combined I get questions a lot like well

386
00:12:55,809 --> 00:12:59,620
if I knew exactly what trust provide our

387
00:12:57,490 --> 00:13:01,689
client was using what I just submit the

388
00:12:59,620 --> 00:13:03,040
domain to that provider but the idea is

389
00:13:01,689 --> 00:13:04,779
we're collecting these domains for the

390
00:13:03,040 --> 00:13:06,459
long term so if we're using HTTP that

391
00:13:04,779 --> 00:13:07,720
domain name is sort of everything and

392
00:13:06,459 --> 00:13:09,758
the trust we have with it is everything

393
00:13:07,720 --> 00:13:11,410
so part of what we talked about is is

394
00:13:09,759 --> 00:13:12,790
keeping them and holding them and really

395
00:13:11,410 --> 00:13:15,040
building them up in the eyes of all of

396
00:13:12,790 --> 00:13:16,630
these trust repositories and once again

397
00:13:15,040 --> 00:13:18,219
I mentioned some some great automated

398
00:13:16,630 --> 00:13:20,310
tooling like domain check or chameleon

399
00:13:18,220 --> 00:13:21,630
for analyzing the

400
00:13:20,310 --> 00:13:23,880
status of a particular domain or

401
00:13:21,630 --> 00:13:25,470
tracking them long term also suspect

402
00:13:23,880 --> 00:13:26,910
drops guys just released a platform

403
00:13:25,470 --> 00:13:30,180
management tool that does some similar

404
00:13:26,910 --> 00:13:31,829
work pushing it even farther than that

405
00:13:30,180 --> 00:13:33,719
anybody's ever heard of HTTP pipelining

406
00:13:31,830 --> 00:13:35,880
it's this idea that we might shovel

407
00:13:33,720 --> 00:13:38,790
multiple HTTP requests down a single

408
00:13:35,880 --> 00:13:40,529
socket without waiting for a response so

409
00:13:38,790 --> 00:13:42,750
this has been looked at to effectively

410
00:13:40,529 --> 00:13:44,850
create or or push forward a benign

411
00:13:42,750 --> 00:13:46,230
request in front of your callback data

412
00:13:44,850 --> 00:13:48,420
it's an interesting blog that talks

413
00:13:46,230 --> 00:13:49,680
about this as an alternative to domain

414
00:13:48,420 --> 00:13:52,890
fronting and it's something I think

415
00:13:49,680 --> 00:13:54,630
worth thinking about past that

416
00:13:52,890 --> 00:13:57,360
WebSockets there are some great

417
00:13:54,630 --> 00:13:59,189
integrations for cobalt strike external

418
00:13:57,360 --> 00:14:01,890
situ and once again here we're aiming

419
00:13:59,190 --> 00:14:03,630
for less inspection in terms of trust so

420
00:14:01,890 --> 00:14:05,250
we gain trust by the fact that nobody's

421
00:14:03,630 --> 00:14:07,140
checking our traffic it's kind of an

422
00:14:05,250 --> 00:14:08,880
inverted approach and in terms of the

423
00:14:07,140 --> 00:14:10,680
vector we add speed and sort of these

424
00:14:08,880 --> 00:14:12,420
push-pull systems which really optimize

425
00:14:10,680 --> 00:14:14,279
our action delay remembers an operator

426
00:14:12,420 --> 00:14:16,770
I'm most interested in the tool matching

427
00:14:14,279 --> 00:14:18,570
my style of operating so the c2 just

428
00:14:16,770 --> 00:14:20,550
becomes this big complexity that I have

429
00:14:18,570 --> 00:14:22,500
to deal with if I had it my way I would

430
00:14:20,550 --> 00:14:23,969
have the tool be async and effect it

431
00:14:22,500 --> 00:14:25,470
would be connected to me all the time so

432
00:14:23,970 --> 00:14:28,170
I could run whatever I wanted on it and

433
00:14:25,470 --> 00:14:29,970
then in a similar vein of WebSockets

434
00:14:28,170 --> 00:14:31,979
HTTP 2 is coming out so if anybody is

435
00:14:29,970 --> 00:14:33,839
not thought of that in terms of malware

436
00:14:31,980 --> 00:14:36,450
or malicious use you definitely should

437
00:14:33,839 --> 00:14:38,370
once again less inspection here you

438
00:14:36,450 --> 00:14:40,770
transfer size reductions encoding is a

439
00:14:38,370 --> 00:14:42,720
big part of HTTP C 2 it's what makes it

440
00:14:40,770 --> 00:14:44,640
so complex so the fact that that

441
00:14:42,720 --> 00:14:46,380
protocol is moving to a binary standard

442
00:14:44,640 --> 00:14:48,630
really really adds a lot of benefit for

443
00:14:46,380 --> 00:14:50,040
us as attackers Merlyn is a cool c2

444
00:14:48,630 --> 00:14:53,130
framework that actually already uses and

445
00:14:50,040 --> 00:14:55,140
implements HTTP 2 and golang so if you

446
00:14:53,130 --> 00:14:56,670
want to look at that and it's with that

447
00:14:55,140 --> 00:14:58,380
that I transition to the second probably

448
00:14:56,670 --> 00:15:00,060
most popular layer 7 protocol which is

449
00:14:58,380 --> 00:15:01,230
DNS also you don't have to worry we're

450
00:15:00,060 --> 00:15:05,910
not gonna go through all these in case

451
00:15:01,230 --> 00:15:08,550
anybody was stressing out so DNS used

452
00:15:05,910 --> 00:15:11,400
most commonly to you know transfer data

453
00:15:08,550 --> 00:15:13,079
over links that you effectively don't

454
00:15:11,400 --> 00:15:15,240
have a direct access to so DNS has this

455
00:15:13,080 --> 00:15:16,650
amazing property of I can push data to

456
00:15:15,240 --> 00:15:18,270
somebody's server and that packet will

457
00:15:16,650 --> 00:15:19,709
just sort of find its way to where it

458
00:15:18,270 --> 00:15:22,020
needs to be this is a really neat

459
00:15:19,709 --> 00:15:24,300
property and I think what makes DNS so

460
00:15:22,020 --> 00:15:26,279
popular for abuse despite the fact that

461
00:15:24,300 --> 00:15:27,930
it's actually kind of a pain to use it's

462
00:15:26,279 --> 00:15:30,270
really difficult regardless of request

463
00:15:27,930 --> 00:15:31,620
type to get decent data out you can

464
00:15:30,270 --> 00:15:34,079
sometimes pull good data back but

465
00:15:31,620 --> 00:15:34,380
usually you're working like sub KB and

466
00:15:34,080 --> 00:15:36,900
that

467
00:15:34,380 --> 00:15:38,850
realm and even in that it's really easy

468
00:15:36,900 --> 00:15:40,470
to detect just based on volume name

469
00:15:38,850 --> 00:15:42,360
length or the fact that there's been

470
00:15:40,470 --> 00:15:44,850
some number of unique subdomains per

471
00:15:42,360 --> 00:15:46,770
particular top-level domain if we wanted

472
00:15:44,850 --> 00:15:48,840
to approach or improve this we prefer a

473
00:15:46,770 --> 00:15:51,840
blended situ approach so we like to mix

474
00:15:48,840 --> 00:15:53,550
things like DNS with HTTP so those

475
00:15:51,840 --> 00:15:56,430
beaconing systems that were those dead

476
00:15:53,550 --> 00:15:59,520
beacons that are wasted on HTTP are set

477
00:15:56,430 --> 00:16:01,020
and sort of well-groomed for DNS because

478
00:15:59,520 --> 00:16:01,350
we don't need them to transfer a lot of

479
00:16:01,020 --> 00:16:03,510
data

480
00:16:01,350 --> 00:16:05,400
there's also DNS over HTTP as I've

481
00:16:03,510 --> 00:16:08,100
mentioned before we look at implementing

482
00:16:05,400 --> 00:16:09,959
DNS SEC just to evade some stuff or we

483
00:16:08,100 --> 00:16:12,150
could trade thorough put for trusted net

484
00:16:09,960 --> 00:16:14,130
locks so you know the fact that DNS

485
00:16:12,150 --> 00:16:16,199
resolution might get blocked because the

486
00:16:14,130 --> 00:16:18,689
IP belongs to a particular country's IP

487
00:16:16,200 --> 00:16:20,040
space so we might effectively reduce the

488
00:16:18,690 --> 00:16:21,480
total of number of data we could

489
00:16:20,040 --> 00:16:24,300
transfer to just improve the reliability

490
00:16:21,480 --> 00:16:26,460
of it and the last segue I want to make

491
00:16:24,300 --> 00:16:27,990
before we move into the good stuff is

492
00:16:26,460 --> 00:16:30,840
ICMP this has actually been around

493
00:16:27,990 --> 00:16:32,310
forever a bit like DNS I think once

494
00:16:30,840 --> 00:16:34,110
again the complexities of implementing

495
00:16:32,310 --> 00:16:36,300
it maybe make people shy away but there

496
00:16:34,110 --> 00:16:38,490
are you know samples in the wild that

497
00:16:36,300 --> 00:16:40,020
use this one nice thing about like an

498
00:16:38,490 --> 00:16:41,610
echo request did you get arbitrary

499
00:16:40,020 --> 00:16:43,699
payload size which once again as a

500
00:16:41,610 --> 00:16:46,500
developer is an important thing for me

501
00:16:43,700 --> 00:16:48,000
we can effectively extract data and tack

502
00:16:46,500 --> 00:16:50,520
arbitrary data onto the packet without

503
00:16:48,000 --> 00:16:53,360
worrying about you know protocol syntax

504
00:16:50,520 --> 00:16:56,699
limitation limitations stuff like that

505
00:16:53,360 --> 00:16:58,380
in terms of improvements we could use

506
00:16:56,700 --> 00:17:00,210
alternate codes so a lot of people use

507
00:16:58,380 --> 00:17:02,340
an echo request and reply but that's not

508
00:17:00,210 --> 00:17:04,050
the only code that ICMP supports in fact

509
00:17:02,340 --> 00:17:05,910
time exceeded messages are almost as

510
00:17:04,050 --> 00:17:07,050
popular and not as well monitored

511
00:17:05,910 --> 00:17:09,390
although they can't transfer as much

512
00:17:07,050 --> 00:17:11,520
data but like in a time exceeded packet

513
00:17:09,390 --> 00:17:14,880
you can easily get you know to 32 bit

514
00:17:11,520 --> 00:17:16,349
blocks which is pretty decent smaller

515
00:17:14,880 --> 00:17:18,329
payloads with more volume as another

516
00:17:16,349 --> 00:17:20,129
strategy we employ both with DNS and

517
00:17:18,329 --> 00:17:22,680
ICMP so you'll have to make trade-offs

518
00:17:20,130 --> 00:17:24,120
there and usually you're aiming for you

519
00:17:22,680 --> 00:17:26,280
know maybe you might try a higher packet

520
00:17:24,119 --> 00:17:28,229
volume for just smaller packets in

521
00:17:26,280 --> 00:17:29,730
general also the fact that ICMP is

522
00:17:28,230 --> 00:17:31,320
connectionless means that you start

523
00:17:29,730 --> 00:17:33,570
pushing really large packets and you're

524
00:17:31,320 --> 00:17:37,169
just gonna run into deliverability

525
00:17:33,570 --> 00:17:39,629
issues and then lastly I want to do a

526
00:17:37,170 --> 00:17:41,280
shout out to Samy Kamkar is project pal

527
00:17:39,630 --> 00:17:43,650
net where he demonstrates a really neat

528
00:17:41,280 --> 00:17:46,500
way to discover IP addresses for a UDP

529
00:17:43,650 --> 00:17:47,780
NAT bypass or effectively you have an

530
00:17:46,500 --> 00:17:50,240
agent behind an app

531
00:17:47,780 --> 00:17:52,399
while making a type 8 echo request out

532
00:17:50,240 --> 00:17:54,740
to a known IP address and then at some

533
00:17:52,400 --> 00:17:56,870
point a server requests in and responds

534
00:17:54,740 --> 00:17:58,310
to that echo request saying hey whatever

535
00:17:56,870 --> 00:18:00,590
that packet was it never reached the

536
00:17:58,310 --> 00:18:02,030
server the TTL was exceeded the nice

537
00:18:00,590 --> 00:18:04,340
part is B these are connectionless

538
00:18:02,030 --> 00:18:06,440
packets but the NAT on the perimeter

539
00:18:04,340 --> 00:18:07,970
will let that packet in and back to the

540
00:18:06,440 --> 00:18:09,920
agent because it just assumes that it

541
00:18:07,970 --> 00:18:11,540
was a reply from a server trying to help

542
00:18:09,920 --> 00:18:13,730
out I really recommend you go and look

543
00:18:11,540 --> 00:18:15,500
at his tools then UDP NAT punch thing is

544
00:18:13,730 --> 00:18:18,590
an entirely different beast and really

545
00:18:15,500 --> 00:18:20,720
neat alright so with that then we

546
00:18:18,590 --> 00:18:22,250
transition to trust conflicts so we've

547
00:18:20,720 --> 00:18:24,230
covered a couple of you know basic

548
00:18:22,250 --> 00:18:26,870
protocols I think HTTP most people in

549
00:18:24,230 --> 00:18:28,700
here familiar with that DNS maybe if

550
00:18:26,870 --> 00:18:30,469
you've used some advanced tooling or

551
00:18:28,700 --> 00:18:33,200
more advanced tooling but now we're

552
00:18:30,470 --> 00:18:35,660
sorta gonna move into the realm of HTTP

553
00:18:33,200 --> 00:18:37,040
layered on top of trusted assets so

554
00:18:35,660 --> 00:18:38,690
there are a lot of different assets we

555
00:18:37,040 --> 00:18:40,250
might look at for this and I kind of

556
00:18:38,690 --> 00:18:41,480
loosely grouped them into categories

557
00:18:40,250 --> 00:18:43,550
although I'm sure these categories

558
00:18:41,480 --> 00:18:46,460
aren't entirely accurate we might look

559
00:18:43,550 --> 00:18:48,050
at email assets or chat assets these

560
00:18:46,460 --> 00:18:49,460
systems are generally dead drop so if

561
00:18:48,050 --> 00:18:51,320
you remember talking about that if we

562
00:18:49,460 --> 00:18:53,030
are going to abuse a trusted asset or

563
00:18:51,320 --> 00:18:55,280
use a third party we're usually having

564
00:18:53,030 --> 00:18:57,889
some system where we drop data and pull

565
00:18:55,280 --> 00:18:59,450
that data back out on the far side we

566
00:18:57,890 --> 00:19:01,160
get a lot of inherent stealth with this

567
00:18:59,450 --> 00:19:02,750
obviously parameter exclusions and

568
00:19:01,160 --> 00:19:04,850
whitelisting or just the fact that the

569
00:19:02,750 --> 00:19:06,710
domains familiar to a particular analyst

570
00:19:04,850 --> 00:19:07,879
these projects have been coming out for

571
00:19:06,710 --> 00:19:09,950
a long time and as you guys will see

572
00:19:07,880 --> 00:19:13,070
there's no shortage of examples of

573
00:19:09,950 --> 00:19:14,480
really cool third-party c-2 so in terms

574
00:19:13,070 --> 00:19:16,070
of abuse just in the social category

575
00:19:14,480 --> 00:19:17,540
there's been a couple examples of people

576
00:19:16,070 --> 00:19:19,340
abusing Twitter there's also been some

577
00:19:17,540 --> 00:19:21,080
nice multi-site the hammer toss agent

578
00:19:19,340 --> 00:19:23,540
does some crazy stuff with like three or

579
00:19:21,080 --> 00:19:25,520
four different providers and the social

580
00:19:23,540 --> 00:19:27,350
media c2 is a POC for a similar thing

581
00:19:25,520 --> 00:19:28,820
I've obviously included links in the

582
00:19:27,350 --> 00:19:30,500
bottom of these slides for anybody and

583
00:19:28,820 --> 00:19:33,830
they will be distributed so don't stress

584
00:19:30,500 --> 00:19:36,710
out too much about it beyond that chat

585
00:19:33,830 --> 00:19:38,120
slack super popular thing there's three

586
00:19:36,710 --> 00:19:39,470
projects out right now and I'm sure more

587
00:19:38,120 --> 00:19:41,629
that are in private hands that

588
00:19:39,470 --> 00:19:44,750
effectively perform c2 over slack agents

589
00:19:41,630 --> 00:19:46,460
once again there's no shortage of sites

590
00:19:44,750 --> 00:19:48,260
that we could use to perform abuse

591
00:19:46,460 --> 00:19:50,030
really what it comes down to is what

592
00:19:48,260 --> 00:19:51,560
does it take to implement that so you

593
00:19:50,030 --> 00:19:53,840
know we might trade the complexities of

594
00:19:51,560 --> 00:19:56,178
slack for just the sheer benefit that

595
00:19:53,840 --> 00:19:58,189
slack has high volumes of traffic people

596
00:19:56,179 --> 00:19:59,660
chatting all day long so just keep that

597
00:19:58,190 --> 00:20:01,120
in mind as you think about all of the

598
00:19:59,660 --> 00:20:03,940
opportunities for for

599
00:20:01,120 --> 00:20:06,010
using these providers in terms of email

600
00:20:03,940 --> 00:20:07,630
there's G cat and G dog which

601
00:20:06,010 --> 00:20:12,820
represented or which demonstrated that

602
00:20:07,630 --> 00:20:14,490
for Gmail if I say Gmail anyways email G

603
00:20:12,820 --> 00:20:17,050
cat G dog and then the light neuron

604
00:20:14,490 --> 00:20:19,450
compromise showed a lot of cool stuff

605
00:20:17,050 --> 00:20:21,730
for exchange servers so sort of poked

606
00:20:19,450 --> 00:20:23,650
the hole at using email for c2 they did

607
00:20:21,730 --> 00:20:25,120
some really neat and demography stuff I

608
00:20:23,650 --> 00:20:27,160
highly recommend reading about it if

609
00:20:25,120 --> 00:20:28,750
you're interested ants with this that we

610
00:20:27,160 --> 00:20:30,100
reached sort of the first PLC that I'm

611
00:20:28,750 --> 00:20:31,900
gonna release this is what is something

612
00:20:30,100 --> 00:20:34,719
I called post office it's effectively a

613
00:20:31,900 --> 00:20:36,550
mail see to proof of concept that runs

614
00:20:34,720 --> 00:20:38,080
over EWS so it doesn't count

615
00:20:36,550 --> 00:20:40,570
piggybacking I got thinking about this

616
00:20:38,080 --> 00:20:42,730
idea that you compromised an individual

617
00:20:40,570 --> 00:20:44,350
host that user is gonna have an outlook

618
00:20:42,730 --> 00:20:46,750
box open and they're effectively gonna

619
00:20:44,350 --> 00:20:48,490
be doing email all day long so if we

620
00:20:46,750 --> 00:20:50,110
were on the client side and we had code

621
00:20:48,490 --> 00:20:51,490
execution we could effectively steal

622
00:20:50,110 --> 00:20:52,959
their credentials because many people

623
00:20:51,490 --> 00:20:54,520
store their outlook credentials in the

624
00:20:52,960 --> 00:20:57,520
windows vault or we could simply reuse

625
00:20:54,520 --> 00:20:59,820
ntlm Athene when ina and then we could

626
00:20:57,520 --> 00:21:01,990
post messages to the EWS endpoint and

627
00:20:59,820 --> 00:21:04,000
effectively send messages through their

628
00:21:01,990 --> 00:21:05,230
mailbox out to our server the nice part

629
00:21:04,000 --> 00:21:07,390
about this is we're never actually

630
00:21:05,230 --> 00:21:08,710
contacting our own mail server and we

631
00:21:07,390 --> 00:21:10,809
can do some neat things like hide our

632
00:21:08,710 --> 00:21:12,460
situ data in X headers so that the

633
00:21:10,809 --> 00:21:14,440
message itself doesn't actually have any

634
00:21:12,460 --> 00:21:15,400
content in it that looks malicious so

635
00:21:14,440 --> 00:21:17,770
you might still have to deal with spam

636
00:21:15,400 --> 00:21:19,150
filters I'm implemented using SendGrid

637
00:21:17,770 --> 00:21:20,350
for this I'm sure you could do it a

638
00:21:19,150 --> 00:21:20,770
bunch of different ways if you wanted to

639
00:21:20,350 --> 00:21:22,659
do

640
00:21:20,770 --> 00:21:24,910
SMTP yourself I kind of preferred that

641
00:21:22,660 --> 00:21:27,250
just for the integration piece but first

642
00:21:24,910 --> 00:21:29,320
we land on a host we pull endpoint

643
00:21:27,250 --> 00:21:30,880
settings and the credentials and then we

644
00:21:29,320 --> 00:21:32,889
would configure an auto hide rule so

645
00:21:30,880 --> 00:21:34,840
this is just prepping for the ultimate

646
00:21:32,890 --> 00:21:36,730
reply that we're gonna get from the you

647
00:21:34,840 --> 00:21:38,709
know the attacker box we don't want that

648
00:21:36,730 --> 00:21:41,400
email to be loaded into the inbox and

649
00:21:38,710 --> 00:21:43,870
then afterwards we send an email and we

650
00:21:41,400 --> 00:21:46,840
really put our c2 data in an email

651
00:21:43,870 --> 00:21:48,340
header SendGrid parses it using an

652
00:21:46,840 --> 00:21:50,320
inbound web hook and forwards us the

653
00:21:48,340 --> 00:21:52,300
content this whole process effectively

654
00:21:50,320 --> 00:21:54,580
runs in Reverse we would post the email

655
00:21:52,300 --> 00:21:57,580
back and and have the agent use it in

656
00:21:54,580 --> 00:22:00,070
terms of configuration somewhat simple

657
00:21:57,580 --> 00:22:04,090
send grids rather nice you can set up a

658
00:22:00,070 --> 00:22:05,980
subdomain on a particular trusted domain

659
00:22:04,090 --> 00:22:07,840
that you have configured and tell it any

660
00:22:05,980 --> 00:22:10,840
email that you receive here should be

661
00:22:07,840 --> 00:22:13,120
sent to you know HTTP my public server

662
00:22:10,840 --> 00:22:14,649
comm and then the MX records are pretty

663
00:22:13,120 --> 00:22:17,439
simple as well we just say any may

664
00:22:14,650 --> 00:22:19,810
going to see to the dark side I Oh goes

665
00:22:17,440 --> 00:22:21,400
to the SendGrid servers so I'll try to

666
00:22:19,810 --> 00:22:23,860
show a video here if you guys can see it

667
00:22:21,400 --> 00:22:26,680
but effectively I have the visual studio

668
00:22:23,860 --> 00:22:28,840
project it's a C++ agent side and I have

669
00:22:26,680 --> 00:22:30,280
the server loaded up see agents

670
00:22:28,840 --> 00:22:32,080
effectively booting and it's gonna be

671
00:22:30,280 --> 00:22:34,690
combate to server and the server is

672
00:22:32,080 --> 00:22:36,129
gonna print out all the email data but

673
00:22:34,690 --> 00:22:37,870
if we scroll down effectively it just as

674
00:22:36,130 --> 00:22:40,330
we loaded a new agent so this is an

675
00:22:37,870 --> 00:22:42,489
agent like via email and we're just

676
00:22:40,330 --> 00:22:44,050
gonna tell it to exactly command so

677
00:22:42,490 --> 00:22:46,030
we're gonna tell it to run Who am i /

678
00:22:44,050 --> 00:22:48,159
all with like system and you can see in

679
00:22:46,030 --> 00:22:49,720
the new window this is it waiting and

680
00:22:48,160 --> 00:22:52,210
it's continually checking the Inbox

681
00:22:49,720 --> 00:22:54,400
and it's got the tasking from the server

682
00:22:52,210 --> 00:22:55,720
so it received the email parse the email

683
00:22:54,400 --> 00:22:57,550
and then effectively returned the

684
00:22:55,720 --> 00:22:59,020
tasking and you can see in our new shell

685
00:22:57,550 --> 00:23:08,200
we got the output for the Who am I

686
00:22:59,020 --> 00:23:09,730
command oh so I guess closed up here man

687
00:23:08,200 --> 00:23:12,550
even when you video your demos they

688
00:23:09,730 --> 00:23:16,890
still don't go well I really tried to

689
00:23:12,550 --> 00:23:16,889
prevent this yeah probably

690
00:23:17,880 --> 00:23:25,800
all right where we at that good cool so

691
00:23:22,780 --> 00:23:28,870
in terms of out our additional items

692
00:23:25,800 --> 00:23:30,520
operations we have like SAS services MWR

693
00:23:28,870 --> 00:23:33,610
Labs has done a blog post about using

694
00:23:30,520 --> 00:23:37,600
office 365 for C - there's the Ken

695
00:23:33,610 --> 00:23:39,729
Caniff Ruffus can this breakfast they I

696
00:23:37,600 --> 00:23:40,990
apologize for botching the name for

697
00:23:39,730 --> 00:23:42,880
performing github and there's Google

698
00:23:40,990 --> 00:23:44,740
Drive as well there's also a lot of

699
00:23:42,880 --> 00:23:46,060
internal situ concepts so Active

700
00:23:44,740 --> 00:23:48,610
Directory it's been proven that we can

701
00:23:46,060 --> 00:23:51,010
do c2 via that we can also do c2 via MS

702
00:23:48,610 --> 00:23:52,330
sequel the power-up sequel project

703
00:23:51,010 --> 00:23:53,980
demonstrates a lot of neat stuff there

704
00:23:52,330 --> 00:23:56,500
and the out plain guys have also looked

705
00:23:53,980 --> 00:23:58,120
at external cobalt strike c2 for file

706
00:23:56,500 --> 00:24:01,330
server or file shares and sort of an

707
00:23:58,120 --> 00:24:03,250
isolated sense and then some additional

708
00:24:01,330 --> 00:24:05,409
ones Wikipedia there's a project for

709
00:24:03,250 --> 00:24:08,550
that and paste bin the agha campaign

710
00:24:05,410 --> 00:24:10,900
abused paste bin for transferring data

711
00:24:08,550 --> 00:24:12,520
but what about trust repos this is

712
00:24:10,900 --> 00:24:13,870
something I haven't seen a lot of what

713
00:24:12,520 --> 00:24:15,760
if you wanted to get data in and out of

714
00:24:13,870 --> 00:24:18,489
a network using a repository that was

715
00:24:15,760 --> 00:24:19,960
dedicated to analyzing malware so what I

716
00:24:18,490 --> 00:24:21,790
came up with is a project I'm calling

717
00:24:19,960 --> 00:24:24,190
addendum which is effectively a virus

718
00:24:21,790 --> 00:24:26,379
total situ project where it stuffs data

719
00:24:24,190 --> 00:24:28,240
into document properties and then

720
00:24:26,380 --> 00:24:30,010
uploads that document as a sample

721
00:24:28,240 --> 00:24:31,660
virustotal is very kind about this

722
00:24:30,010 --> 00:24:33,220
because it wants samples and it will go

723
00:24:31,660 --> 00:24:35,350
ahead and parse that sample although the

724
00:24:33,220 --> 00:24:37,690
analysis can take a while and then when

725
00:24:35,350 --> 00:24:39,340
that sample is parsed the metadata will

726
00:24:37,690 --> 00:24:40,810
be extracted and available on the

727
00:24:39,340 --> 00:24:43,120
response of the page assuming you know

728
00:24:40,810 --> 00:24:45,159
the hash so we tracked sample uploads

729
00:24:43,120 --> 00:24:46,899
using comments and we handle large

730
00:24:45,160 --> 00:24:48,910
payloads or handles large payloads

731
00:24:46,900 --> 00:24:50,380
gracefully because of how much we can

732
00:24:48,910 --> 00:24:52,570
stuff in the particular properties I

733
00:24:50,380 --> 00:24:53,950
think it's ideal for static stages or

734
00:24:52,570 --> 00:24:55,929
downloads so if you were looking for

735
00:24:53,950 --> 00:24:57,790
something where you could preload a URL

736
00:24:55,930 --> 00:24:59,530
into an agent and if it checked or

737
00:24:57,790 --> 00:25:02,020
bypassed a sandbox check it could then

738
00:24:59,530 --> 00:25:04,300
go pull this item from virustotal I

739
00:25:02,020 --> 00:25:06,790
think full-blown dynamic situ is a

740
00:25:04,300 --> 00:25:08,830
little bit tricky not not just because

741
00:25:06,790 --> 00:25:10,510
the analysis time can take a while but

742
00:25:08,830 --> 00:25:12,129
the diagram for this is one we packed

743
00:25:10,510 --> 00:25:13,750
callback data into an office doc we

744
00:25:12,130 --> 00:25:15,580
upload it and we effectively wait for

745
00:25:13,750 --> 00:25:17,170
the sample analysis to finish once it's

746
00:25:15,580 --> 00:25:19,360
done we make a comment on that sample

747
00:25:17,170 --> 00:25:20,980
the nice part is is anybody who comes

748
00:25:19,360 --> 00:25:22,629
along and knows our user name can view

749
00:25:20,980 --> 00:25:24,400
our comment history that's public as

750
00:25:22,630 --> 00:25:25,900
well so they can see the list of the

751
00:25:24,400 --> 00:25:27,730
files that we made comments on and then

752
00:25:25,900 --> 00:25:38,130
pull out the hashes and go and browse to

753
00:25:27,730 --> 00:25:38,130
that so the let's see playing up there

754
00:25:44,640 --> 00:25:52,559
maybe man really I was hoping that the

755
00:25:47,460 --> 00:26:01,080
video demos would go well history going

756
00:25:52,559 --> 00:26:03,420
hell alright well we might have to skip

757
00:26:01,080 --> 00:26:05,879
this demo but effectively what the tool

758
00:26:03,420 --> 00:26:07,620
does is just like what we said packs a

759
00:26:05,880 --> 00:26:08,940
bunch of data in a sample uploads it

760
00:26:07,620 --> 00:26:10,889
waits for the analysis to finish which

761
00:26:08,940 --> 00:26:12,450
can take a while and then pulls back the

762
00:26:10,890 --> 00:26:14,090
data and validates that it matches I

763
00:26:12,450 --> 00:26:16,410
didn't go full-blown

764
00:26:14,090 --> 00:26:17,970
interactive shell like the EWS one

765
00:26:16,410 --> 00:26:20,100
primarily because I find this technique

766
00:26:17,970 --> 00:26:21,419
a bit more you know fun and games than

767
00:26:20,100 --> 00:26:22,469
it is legitimate but if you wanted to

768
00:26:21,419 --> 00:26:25,950
take an Internet of that you're

769
00:26:22,470 --> 00:26:28,410
obviously welcome alright and it's with

770
00:26:25,950 --> 00:26:30,600
that that we come into our cloud abuse

771
00:26:28,410 --> 00:26:35,370
and takeover realm so this is kind of

772
00:26:30,600 --> 00:26:37,290
the final leg of our entire c2 and first

773
00:26:35,370 --> 00:26:40,979
I'll establish in my mind what I mean

774
00:26:37,290 --> 00:26:42,690
when I say cloud so cloud very

775
00:26:40,980 --> 00:26:44,190
distributed obviously tons of providers

776
00:26:42,690 --> 00:26:45,780
but there's really pride through four

777
00:26:44,190 --> 00:26:47,730
primary ones that represent the largest

778
00:26:45,780 --> 00:26:50,428
market share specifically I'm gonna

779
00:26:47,730 --> 00:26:53,429
leave my items primarily focused on AWS

780
00:26:50,429 --> 00:26:54,929
Azure and a little bit of GCP together

781
00:26:53,429 --> 00:26:57,030
they you know represent with Alibaba

782
00:26:54,929 --> 00:26:58,679
eighty-four percent of of all the cloud

783
00:26:57,030 --> 00:27:00,030
provider markets so I think it's

784
00:26:58,679 --> 00:27:01,740
probably what attackers are gonna aim

785
00:27:00,030 --> 00:27:03,750
for anyways there's a ton of

786
00:27:01,740 --> 00:27:05,669
functionality in the cloud but I'm gonna

787
00:27:03,750 --> 00:27:07,380
keep this talk focused on C two

788
00:27:05,669 --> 00:27:09,809
primitives we're not gonna talk a lot

789
00:27:07,380 --> 00:27:11,460
about you know abusing AWS secret keys

790
00:27:09,809 --> 00:27:14,460
or anything like that although that's

791
00:27:11,460 --> 00:27:16,740
you know obviously related so I break

792
00:27:14,460 --> 00:27:19,799
down the cloud problem into two primary

793
00:27:16,740 --> 00:27:21,870
issues one is we have trust boundary

794
00:27:19,799 --> 00:27:23,520
problems the cloud represents sort of a

795
00:27:21,870 --> 00:27:25,949
break in our classic ideas of trust

796
00:27:23,520 --> 00:27:28,559
boundaries and to the assets that the

797
00:27:25,950 --> 00:27:31,980
cloud have are very dynamic and the

798
00:27:28,559 --> 00:27:34,770
traditional protocols and would you call

799
00:27:31,980 --> 00:27:36,590
it the systems that we have in place now

800
00:27:34,770 --> 00:27:38,850
aren't set up to handle them effectively

801
00:27:36,590 --> 00:27:40,409
so in terms of trust boundaries once

802
00:27:38,850 --> 00:27:42,120
again we have a client connecting to a

803
00:27:40,410 --> 00:27:43,440
server and if we install a perimeter

804
00:27:42,120 --> 00:27:45,389
there the perimeter can use some

805
00:27:43,440 --> 00:27:47,490
reference for trust repository to say

806
00:27:45,390 --> 00:27:50,490
well this traffic is or this particular

807
00:27:47,490 --> 00:27:52,380
endpoint is benign or it's malicious but

808
00:27:50,490 --> 00:27:53,790
once we install cloud in there it gets

809
00:27:52,380 --> 00:27:55,500
kind of complicated right now we have

810
00:27:53,790 --> 00:27:57,540
traffic leaving our perimeter towards

811
00:27:55,500 --> 00:28:00,770
some generalized cloud

812
00:27:57,540 --> 00:28:03,300
and we might be able to make some

813
00:28:00,770 --> 00:28:05,610
distinction of the traffic based on

814
00:28:03,300 --> 00:28:07,200
qualities of the domain or maybe the URL

815
00:28:05,610 --> 00:28:08,850
but at the end of the day these become

816
00:28:07,200 --> 00:28:10,380
really high complexity sitting on top of

817
00:28:08,850 --> 00:28:12,540
HTTP things that we're not really ready

818
00:28:10,380 --> 00:28:13,950
to deal with I'll give some examples if

819
00:28:12,540 --> 00:28:15,990
any of these domains look familiar like

820
00:28:13,950 --> 00:28:17,840
as your website's Amazon AWS com

821
00:28:15,990 --> 00:28:21,840
probably one of the more popular ones

822
00:28:17,840 --> 00:28:23,310
Akamai Dannette or you know the popular

823
00:28:21,840 --> 00:28:26,250
cloud front done out that was used for

824
00:28:23,310 --> 00:28:28,770
fronting and the second half of our

825
00:28:26,250 --> 00:28:30,270
issue is once again dynamic assets so we

826
00:28:28,770 --> 00:28:32,460
have trust problems but also we have

827
00:28:30,270 --> 00:28:33,900
this problem with you know how will TLS

828
00:28:32,460 --> 00:28:35,460
scale with the cloud and we've actually

829
00:28:33,900 --> 00:28:38,400
already ran into this before this is why

830
00:28:35,460 --> 00:28:39,930
S&I exists so you know before we just

831
00:28:38,400 --> 00:28:41,520
had a server and an IP and they were

832
00:28:39,930 --> 00:28:43,830
linked together like a domain name and

833
00:28:41,520 --> 00:28:45,389
everything was fine now we have front

834
00:28:43,830 --> 00:28:49,159
planes all over the world and we're like

835
00:28:45,390 --> 00:28:50,970
abusing DNS in a way to reduce

836
00:28:49,160 --> 00:28:52,620
effectively the transfer time of the

837
00:28:50,970 --> 00:28:54,360
round-trip time to any particular server

838
00:28:52,620 --> 00:28:56,399
but what that meant is that servers

839
00:28:54,360 --> 00:28:58,620
needed to break TLS or have some ability

840
00:28:56,400 --> 00:29:00,840
to look at TLS which we'll talk about in

841
00:28:58,620 --> 00:29:02,820
just a second the additional thing we're

842
00:29:00,840 --> 00:29:04,139
going to talk about is DNS so DNS is

843
00:29:02,820 --> 00:29:06,240
kind of a protocol that hasn't taken the

844
00:29:04,140 --> 00:29:07,920
hit yet but how does it deal with you

845
00:29:06,240 --> 00:29:10,220
know the reallocation of assets the

846
00:29:07,920 --> 00:29:12,960
redistribution of assets to a particular

847
00:29:10,220 --> 00:29:15,060
agent or person how can we represent

848
00:29:12,960 --> 00:29:16,530
ownership and how can we prevent Mis

849
00:29:15,060 --> 00:29:18,450
configuration especially when that Mis

850
00:29:16,530 --> 00:29:20,250
configuration is so isolated when it's

851
00:29:18,450 --> 00:29:21,930
so easy to miss configure cloud assets

852
00:29:20,250 --> 00:29:23,520
and then on top of that the cloud assets

853
00:29:21,930 --> 00:29:25,650
are so easy to look for because they're

854
00:29:23,520 --> 00:29:26,730
in just one spot on the internet we have

855
00:29:25,650 --> 00:29:29,280
a serious problem with making people

856
00:29:26,730 --> 00:29:31,860
sure keeping people responsible for the

857
00:29:29,280 --> 00:29:33,990
assets they have control over so this

858
00:29:31,860 --> 00:29:36,179
all came about in sort of the first

859
00:29:33,990 --> 00:29:38,010
round of cloud getting its punch in

860
00:29:36,180 --> 00:29:40,080
domain fronting if anybody's heard of

861
00:29:38,010 --> 00:29:42,120
that in a classic sense we make some

862
00:29:40,080 --> 00:29:44,040
HTTP requests to kittens calm which

863
00:29:42,120 --> 00:29:45,929
resolves to a quick IP effectively the

864
00:29:44,040 --> 00:29:48,450
closest server to us we'll call it 1 2 3

865
00:29:45,930 --> 00:29:49,710
4 s and I happens where we effectively

866
00:29:48,450 --> 00:29:51,660
tell the server hey we're looking for

867
00:29:49,710 --> 00:29:53,820
kittens calm by the way but the get

868
00:29:51,660 --> 00:29:56,360
request is made against that server with

869
00:29:53,820 --> 00:29:59,070
the host header set to Azure edge net

870
00:29:56,360 --> 00:30:00,330
then we might go to puppy's calm and the

871
00:29:59,070 --> 00:30:02,040
same process happens again and you'll

872
00:30:00,330 --> 00:30:03,570
note the bottom request is effectively

873
00:30:02,040 --> 00:30:05,040
the same we're making the same request

874
00:30:03,570 --> 00:30:06,929
to the same server and the only thing

875
00:30:05,040 --> 00:30:08,490
that changes is the host header so

876
00:30:06,930 --> 00:30:10,800
attackers obviously figured out how to

877
00:30:08,490 --> 00:30:11,400
abuse this by making a web request to

878
00:30:10,800 --> 00:30:13,860
one host

879
00:30:11,400 --> 00:30:15,720
kittens calm win that packet or when

880
00:30:13,860 --> 00:30:18,240
that request leaves the network it gets

881
00:30:15,720 --> 00:30:19,920
put in the web logs as kittens calm but

882
00:30:18,240 --> 00:30:22,559
we forged the host header - puppies to

883
00:30:19,920 --> 00:30:24,750
Azure dot net and the DNS resolution

884
00:30:22,559 --> 00:30:25,889
happens the same way ultimately the end

885
00:30:24,750 --> 00:30:27,570
of it we get to connect to a website

886
00:30:25,890 --> 00:30:29,280
that the perimeter never thought we were

887
00:30:27,570 --> 00:30:31,080
connecting to and once again this is

888
00:30:29,280 --> 00:30:32,490
these are the the intricacies of the

889
00:30:31,080 --> 00:30:34,050
protocol that I'm talking about

890
00:30:32,490 --> 00:30:35,400
we never assumed that a host header

891
00:30:34,050 --> 00:30:37,110
could make that much difference in terms

892
00:30:35,400 --> 00:30:39,540
of the website content that you load but

893
00:30:37,110 --> 00:30:41,070
it does now an IP means nothing it's

894
00:30:39,540 --> 00:30:45,780
just an IP on a cloud front plane

895
00:30:41,070 --> 00:30:47,428
somewhere so in terms of abuse beyond

896
00:30:45,780 --> 00:30:49,530
Des Moines domain fronting or sort of

897
00:30:47,429 --> 00:30:51,150
what's next file hosting we can host

898
00:30:49,530 --> 00:30:52,530
static payloads and containers that's

899
00:30:51,150 --> 00:30:54,870
been demonstrated before as well as

900
00:30:52,530 --> 00:30:57,178
shoveling dynamic data via those same

901
00:30:54,870 --> 00:31:00,059
containers so an AWS these look like s3

902
00:30:57,179 --> 00:31:01,980
buckets GCP has its cloud storage which

903
00:31:00,059 --> 00:31:05,160
sort of same the same terminology and

904
00:31:01,980 --> 00:31:06,960
Azure has blob storage it's kind of got

905
00:31:05,160 --> 00:31:08,940
a bunch of nuances to it but generally

906
00:31:06,960 --> 00:31:11,309
the links look like SAS links and

907
00:31:08,940 --> 00:31:13,140
they're a little bit larger but I will

908
00:31:11,309 --> 00:31:14,190
have you note that the bucket ID can

909
00:31:13,140 --> 00:31:16,470
actually go to different places

910
00:31:14,190 --> 00:31:18,270
depending on how you load it so you can

911
00:31:16,470 --> 00:31:20,850
have the bucket ID that is specific to

912
00:31:18,270 --> 00:31:21,990
you get put into the DNS name or you can

913
00:31:20,850 --> 00:31:23,969
have the bucket name get put into the

914
00:31:21,990 --> 00:31:26,010
URL and I think a lot of people maybe

915
00:31:23,970 --> 00:31:27,870
assume that well we could detect you

916
00:31:26,010 --> 00:31:29,129
using an s3 bucket because it identifies

917
00:31:27,870 --> 00:31:33,330
you it says my bucket

918
00:31:29,130 --> 00:31:34,380
mr. evil bucket s3 Amazon AWS but if

919
00:31:33,330 --> 00:31:36,059
your web gateways I'm prepared to

920
00:31:34,380 --> 00:31:38,130
extract the bucket name from the URL

921
00:31:36,059 --> 00:31:40,950
then how would you know the difference

922
00:31:38,130 --> 00:31:44,340
between any s3 to Amazon to AWS link and

923
00:31:40,950 --> 00:31:46,380
another we can also look at serverless

924
00:31:44,340 --> 00:31:48,090
code so you know pass through traffic

925
00:31:46,380 --> 00:31:49,970
redirection was a big part of domain

926
00:31:48,090 --> 00:31:52,439
fronting for the Google cloud platform

927
00:31:49,970 --> 00:31:54,690
specifically so this is where we have

928
00:31:52,440 --> 00:31:56,340
you know some code that gets loaded into

929
00:31:54,690 --> 00:31:58,250
an engine and when we receive a web

930
00:31:56,340 --> 00:32:01,439
request we just forward that request on

931
00:31:58,250 --> 00:32:03,450
App engines look like appspot URLs and

932
00:32:01,440 --> 00:32:06,690
lambda obviously has the unique IDs to

933
00:32:03,450 --> 00:32:08,220
execute api's I think you know just that

934
00:32:06,690 --> 00:32:09,840
once again an important thing to extract

935
00:32:08,220 --> 00:32:11,190
is how many people are looking for these

936
00:32:09,840 --> 00:32:13,709
how many people are even familiar with

937
00:32:11,190 --> 00:32:15,540
what these URLs look like you know if a

938
00:32:13,710 --> 00:32:17,429
sim analyst saw these URLs and a log

939
00:32:15,540 --> 00:32:20,040
would they know the difference between

940
00:32:17,429 --> 00:32:22,920
one particular Azure website's URL or an

941
00:32:20,040 --> 00:32:24,100
appspot URL or even an AMSA or AWS

942
00:32:22,920 --> 00:32:26,890
lambda endpoint

943
00:32:24,100 --> 00:32:28,959
and it's with that that I want to get

944
00:32:26,890 --> 00:32:32,530
into the takeover primitives so this is

945
00:32:28,960 --> 00:32:32,920
really my attack on DNS in a way once

946
00:32:32,530 --> 00:32:36,310
again

947
00:32:32,920 --> 00:32:37,720
TLS has had it's beating in terms of you

948
00:32:36,310 --> 00:32:39,460
know s and I and having to deal with

949
00:32:37,720 --> 00:32:42,340
dynamic cloud infrastructure and now

950
00:32:39,460 --> 00:32:43,840
we're looking at the way that DNS has

951
00:32:42,340 --> 00:32:45,429
sort of hanging records that get left

952
00:32:43,840 --> 00:32:47,649
out the orphaned records scene is

953
00:32:45,430 --> 00:32:49,120
becoming pretty intense at any given

954
00:32:47,650 --> 00:32:51,160
time and organization now has to maybe

955
00:32:49,120 --> 00:32:52,389
manage you know hundred domain names or

956
00:32:51,160 --> 00:32:54,550
hundreds of domain names or even

957
00:32:52,390 --> 00:32:55,810
thousands in a records file and those

958
00:32:54,550 --> 00:32:57,159
records are static they just get

959
00:32:55,810 --> 00:32:59,139
implemented and they point to a cloud

960
00:32:57,160 --> 00:33:01,270
asset that assets now very dynamic

961
00:32:59,140 --> 00:33:04,360
there's been a ton of research in this

962
00:33:01,270 --> 00:33:06,460
area patrick Hudak or haddock jr. I'm

963
00:33:04,360 --> 00:33:07,990
very sorry I'm ruined your name he

964
00:33:06,460 --> 00:33:10,930
actually did an entire thesis paper on

965
00:33:07,990 --> 00:33:12,700
the analysis of DNS in cyber security he

966
00:33:10,930 --> 00:33:14,620
also is the second link down the AWS

967
00:33:12,700 --> 00:33:17,050
route 3 or route 53 name server

968
00:33:14,620 --> 00:33:19,030
takeovers and you guys haven't read the

969
00:33:17,050 --> 00:33:20,470
stuff you definitely should these people

970
00:33:19,030 --> 00:33:21,940
have been screaming this for ages like

971
00:33:20,470 --> 00:33:23,860
these cloud providers are vulnerable to

972
00:33:21,940 --> 00:33:25,840
like thousands of domains being taken

973
00:33:23,860 --> 00:33:27,729
over and it really is the truth these

974
00:33:25,840 --> 00:33:31,510
these DNS records are not prepped to

975
00:33:27,730 --> 00:33:33,400
handle this sort of stuff generally when

976
00:33:31,510 --> 00:33:35,650
I started looking at the DNS takeover I

977
00:33:33,400 --> 00:33:37,660
started organizing it at a two primary

978
00:33:35,650 --> 00:33:40,480
schools of thought so one is you would

979
00:33:37,660 --> 00:33:42,400
go after a cname record cname records

980
00:33:40,480 --> 00:33:43,720
might commonly be used in bug bounty

981
00:33:42,400 --> 00:33:46,540
programs where you're trying to identify

982
00:33:43,720 --> 00:33:48,160
a URL that or at a domain that points to

983
00:33:46,540 --> 00:33:50,889
say github where they've since removed

984
00:33:48,160 --> 00:33:52,690
their github account is there a

985
00:33:50,890 --> 00:33:54,940
frequently called sub domain takeovers

986
00:33:52,690 --> 00:33:56,380
although I think what I'll show actually

987
00:33:54,940 --> 00:33:57,730
you know opens up the idea that

988
00:33:56,380 --> 00:33:59,740
subdomain takeover could mean something

989
00:33:57,730 --> 00:34:01,870
different the alternative is going after

990
00:33:59,740 --> 00:34:02,980
name server records so you know if you

991
00:34:01,870 --> 00:34:04,719
were interested in taking over an entire

992
00:34:02,980 --> 00:34:06,670
domain that's sort of where the route 53

993
00:34:04,720 --> 00:34:08,290
research comes in but what about others

994
00:34:06,670 --> 00:34:09,820
I started asking myself you know is

995
00:34:08,290 --> 00:34:11,679
there any way for us to target IP based

996
00:34:09,820 --> 00:34:13,420
records instead of domain name records

997
00:34:11,679 --> 00:34:15,339
that point to other domain names so I

998
00:34:13,420 --> 00:34:16,990
came up with two problems that we kinda

999
00:34:15,340 --> 00:34:19,240
have to solve before before we go into

1000
00:34:16,989 --> 00:34:21,909
this one is how quickly could we

1001
00:34:19,239 --> 00:34:23,040
actually collect new addresses it's kind

1002
00:34:21,909 --> 00:34:25,239
of a big problem right it's like

1003
00:34:23,040 --> 00:34:27,100
beforehand you would have to go to a VPS

1004
00:34:25,239 --> 00:34:28,449
provider and buy a server and maybe they

1005
00:34:27,100 --> 00:34:30,279
would give you one address and you had

1006
00:34:28,449 --> 00:34:32,049
to like claw at them to give you a

1007
00:34:30,280 --> 00:34:33,910
second address and maybe like pay more

1008
00:34:32,050 --> 00:34:35,770
money and now cloud providers are like

1009
00:34:33,909 --> 00:34:37,730
and there's an API endpoint for it

1010
00:34:35,770 --> 00:34:40,609
yes cycle that thing you know multi

1011
00:34:37,730 --> 00:34:41,540
ten threads a minute and the second

1012
00:34:40,609 --> 00:34:44,000
question is how would we accurately

1013
00:34:41,540 --> 00:34:45,259
check for any orphan record this is

1014
00:34:44,000 --> 00:34:46,909
actually the larger problem in the

1015
00:34:45,260 --> 00:34:48,740
scream of things DNS doesn't really work

1016
00:34:46,909 --> 00:34:51,230
the same way backwards so we're trying

1017
00:34:48,739 --> 00:34:52,819
to find hanging orphaned records from an

1018
00:34:51,230 --> 00:34:55,010
IP address and there's not a lot of

1019
00:34:52,819 --> 00:34:58,009
great repositories for this but here's

1020
00:34:55,010 --> 00:34:59,510
the concept so the concept is we would

1021
00:34:58,010 --> 00:35:01,880
communicate with some cloud provider and

1022
00:34:59,510 --> 00:35:03,650
we collect a random IP that IP is now

1023
00:35:01,880 --> 00:35:06,500
ours the cloud provider just gave it to

1024
00:35:03,650 --> 00:35:07,910
us we own it it belongs to us and now we

1025
00:35:06,500 --> 00:35:10,790
have to find out is that record

1026
00:35:07,910 --> 00:35:12,740
interesting if we go to a particular you

1027
00:35:10,790 --> 00:35:15,259
know records authority or or some sort

1028
00:35:12,740 --> 00:35:16,970
of DNS record repository and say you

1029
00:35:15,260 --> 00:35:19,190
know is a DNS name associated with this

1030
00:35:16,970 --> 00:35:21,319
IP and they say yes well then perfect we

1031
00:35:19,190 --> 00:35:24,260
can now sort of keep the IP and use that

1032
00:35:21,319 --> 00:35:25,369
DNS name the DNS will resolve you know

1033
00:35:24,260 --> 00:35:26,750
it goes through a zone file that we

1034
00:35:25,369 --> 00:35:28,730
don't even own and we just hope that

1035
00:35:26,750 --> 00:35:30,589
that record stays alive for you know as

1036
00:35:28,730 --> 00:35:32,270
long as possible and we'd probably just

1037
00:35:30,589 --> 00:35:33,920
repeat this process for as many records

1038
00:35:32,270 --> 00:35:36,530
as we wanted or to handle failure

1039
00:35:33,920 --> 00:35:38,780
conditions so about this record

1040
00:35:36,530 --> 00:35:40,549
repository we can't really use pointer

1041
00:35:38,780 --> 00:35:42,980
records that's kind of the idea of

1042
00:35:40,549 --> 00:35:44,059
reversing a DNS IP but there's a problem

1043
00:35:42,980 --> 00:35:45,980
with that in that they're not

1044
00:35:44,059 --> 00:35:48,079
necessarily accurate they probably point

1045
00:35:45,980 --> 00:35:49,400
to a domain record that belongs to like

1046
00:35:48,079 --> 00:35:50,660
the provider that hosts the

1047
00:35:49,400 --> 00:35:51,920
infrastructure it doesn't really point

1048
00:35:50,660 --> 00:35:54,290
to the true domain that we would be

1049
00:35:51,920 --> 00:35:56,780
interested in rapid7 has a great project

1050
00:35:54,290 --> 00:35:58,759
called open DNS as a bunch of you know

1051
00:35:56,780 --> 00:36:01,339
data repositories for a records and MX

1052
00:35:58,760 --> 00:36:03,290
records you can definitely use that the

1053
00:36:01,339 --> 00:36:04,910
de JSON files are massive so you'd have

1054
00:36:03,290 --> 00:36:06,140
to figure out a way to parse them but

1055
00:36:04,910 --> 00:36:08,270
it's probably the route one of the

1056
00:36:06,140 --> 00:36:10,098
routes I would go long term three would

1057
00:36:08,270 --> 00:36:11,390
be getting access to the top-level zone

1058
00:36:10,099 --> 00:36:13,700
file actually went through this process

1059
00:36:11,390 --> 00:36:15,680
that's not too hard Verisign is charged

1060
00:36:13,700 --> 00:36:17,808
with keeping the global top-level zone

1061
00:36:15,680 --> 00:36:19,430
file that that effectively shows all of

1062
00:36:17,809 --> 00:36:21,530
the domains that exist in the dot-com

1063
00:36:19,430 --> 00:36:23,480
namespace and the name servers that

1064
00:36:21,530 --> 00:36:25,220
handle those domains so this is more

1065
00:36:23,480 --> 00:36:26,780
relevant to the name server takeover but

1066
00:36:25,220 --> 00:36:28,879
if you are looking at that sort of

1067
00:36:26,780 --> 00:36:30,790
strategy and I think the blog before

1068
00:36:28,880 --> 00:36:33,200
about the hundred and twenty thousand

1069
00:36:30,790 --> 00:36:36,049
domain name takeovers used that that

1070
00:36:33,200 --> 00:36:38,149
top-level file there is a public

1071
00:36:36,049 --> 00:36:40,309
database who has XML while it's not

1072
00:36:38,150 --> 00:36:41,690
public it's private but it's paid and

1073
00:36:40,309 --> 00:36:42,920
you can find it on their website they

1074
00:36:41,690 --> 00:36:44,599
don't really post a price for that I

1075
00:36:42,920 --> 00:36:46,130
never inquired I don't really know what

1076
00:36:44,599 --> 00:36:47,530
they would charge to get access to that

1077
00:36:46,130 --> 00:36:50,599
database or if they provide an API

1078
00:36:47,530 --> 00:36:51,230
luckily though the folks at security

1079
00:36:50,599 --> 00:36:52,550
trails of sort of

1080
00:36:51,230 --> 00:36:54,470
helped us out here this is a new website

1081
00:36:52,550 --> 00:36:56,930
that is just what we need it's a

1082
00:36:54,470 --> 00:36:58,759
repository of DNS information and they

1083
00:36:56,930 --> 00:37:02,060
provide api's and we can query all sorts

1084
00:36:58,760 --> 00:37:03,680
of stuff from it so with that we have

1085
00:37:02,060 --> 00:37:05,480
the final piece to the puzzle and I'm

1086
00:37:03,680 --> 00:37:07,190
sort of releasing today a thing I'm

1087
00:37:05,480 --> 00:37:08,300
calling cloud racoon because it's

1088
00:37:07,190 --> 00:37:10,970
digging through the trash of the

1089
00:37:08,300 --> 00:37:13,310
Internet but it hunts for IP is linked

1090
00:37:10,970 --> 00:37:15,319
to orphaned DNS records and it uses

1091
00:37:13,310 --> 00:37:17,420
cloud IPs for the fast cycling bit now

1092
00:37:15,320 --> 00:37:20,480
this varies depending on provider I

1093
00:37:17,420 --> 00:37:21,950
found AWS to be clearly the best it's

1094
00:37:20,480 --> 00:37:23,240
superior not only in the speed at which

1095
00:37:21,950 --> 00:37:28,520
you can request IPs

1096
00:37:23,240 --> 00:37:31,549
but also the fact that the azured are

1097
00:37:28,520 --> 00:37:33,380
the AWS would you call it Network space

1098
00:37:31,550 --> 00:37:35,060
has been around a lot longer so there's

1099
00:37:33,380 --> 00:37:37,790
just more DNS records pointing to that

1100
00:37:35,060 --> 00:37:39,440
space as err is pretty good it's slow I

1101
00:37:37,790 --> 00:37:41,390
think you multi thread it out I'm not

1102
00:37:39,440 --> 00:37:43,220
sure if I tried that and GCP pulls

1103
00:37:41,390 --> 00:37:45,290
things from a pool it's a bit weird it's

1104
00:37:43,220 --> 00:37:47,000
like they carry a pool forward so if you

1105
00:37:45,290 --> 00:37:48,350
continually request IPS at some point

1106
00:37:47,000 --> 00:37:50,000
you'll start to get the same ip's back

1107
00:37:48,350 --> 00:37:51,859
so the script I wrote to do it

1108
00:37:50,000 --> 00:37:53,630
effectively tracks that and it'll it'll

1109
00:37:51,859 --> 00:37:55,369
target you know a particular percentage

1110
00:37:53,630 --> 00:37:56,869
of IPs at which it feels like it's seen

1111
00:37:55,369 --> 00:37:58,250
enough of them before it gives up and

1112
00:37:56,869 --> 00:38:01,220
then you just sort of wait a day and try

1113
00:37:58,250 --> 00:38:05,540
again but we'll hope that this video

1114
00:38:01,220 --> 00:38:07,040
plays excellent cool so I would say I

1115
00:38:05,540 --> 00:38:10,070
recorded this actually recorded this in

1116
00:38:07,040 --> 00:38:12,020
the lift right over here but this is it

1117
00:38:10,070 --> 00:38:14,990
hunting through AWS so it's pulling IPS

1118
00:38:12,020 --> 00:38:16,609
the first IP it saw was not good enough

1119
00:38:14,990 --> 00:38:18,259
so you can set up whitelist and all that

1120
00:38:16,609 --> 00:38:19,850
effectively letting you know that it saw

1121
00:38:18,260 --> 00:38:22,130
it but it gave it up and it's

1122
00:38:19,850 --> 00:38:24,109
continually searching eventually here it

1123
00:38:22,130 --> 00:38:29,750
should hit another record for I know

1124
00:38:24,109 --> 00:38:32,049
some some top-level server it's kind of

1125
00:38:29,750 --> 00:38:32,050
soothing

1126
00:38:36,900 --> 00:38:41,640
nice I could feel your guys's excitement

1127
00:38:38,999 --> 00:38:43,890
you wanted it happen so bad anyways now

1128
00:38:41,640 --> 00:38:45,960
we effectively have an IP with the

1129
00:38:43,890 --> 00:38:48,618
domain record that is a splint server or

1130
00:38:45,960 --> 00:38:52,440
at some point they had a Splunk instance

1131
00:38:48,619 --> 00:38:54,479
this is a proof-of-concept but this is

1132
00:38:52,440 --> 00:38:55,529
actually a bit unique in comparison to

1133
00:38:54,479 --> 00:38:57,058
the other two projects and that

1134
00:38:55,529 --> 00:38:59,099
operationally we've been using this for

1135
00:38:57,059 --> 00:39:00,779
about six to eight months all of our

1136
00:38:59,099 --> 00:39:03,180
production infrastructure uses this

1137
00:39:00,779 --> 00:39:05,309
strategy and we just cycle IPs we have

1138
00:39:03,180 --> 00:39:07,259
you know 20 of them at this point and we

1139
00:39:05,309 --> 00:39:08,940
use them for real-world operations so I

1140
00:39:07,259 --> 00:39:10,259
would be surprised that this isn't you

1141
00:39:08,940 --> 00:39:12,630
know being performed by real world

1142
00:39:10,259 --> 00:39:14,339
actors at this point but you can get

1143
00:39:12,630 --> 00:39:16,739
top-level domains for some crazy things

1144
00:39:14,339 --> 00:39:18,779
we found antivirus vendors we found

1145
00:39:16,739 --> 00:39:20,400
research institutes government agencies

1146
00:39:18,779 --> 00:39:22,259
obviously that you'll hear the same

1147
00:39:20,400 --> 00:39:24,359
thing echoed in the blogs I posted about

1148
00:39:22,259 --> 00:39:25,950
you know these takeover primitives but

1149
00:39:24,359 --> 00:39:27,660
this is extremely accessible like said

1150
00:39:25,950 --> 00:39:29,339
this is not contrived at all this is

1151
00:39:27,660 --> 00:39:31,828
literally the first run in the lift

1152
00:39:29,339 --> 00:39:33,089
right over here if we sat here and ran

1153
00:39:31,829 --> 00:39:36,900
them I bet you we would have ten or

1154
00:39:33,089 --> 00:39:40,529
fifteen in a five minute period so some

1155
00:39:36,900 --> 00:39:43,049
final thoughts I think the key points to

1156
00:39:40,529 --> 00:39:45,599
take away from this talk is c2 is a very

1157
00:39:43,049 --> 00:39:48,420
complex discipline the implementations

1158
00:39:45,599 --> 00:39:50,670
vary greatly and not always for you know

1159
00:39:48,420 --> 00:39:52,890
great reasons but usually the particular

1160
00:39:50,670 --> 00:39:54,930
design decisions are aren't random you

1161
00:39:52,890 --> 00:39:56,578
know these people are choosing HTTP for

1162
00:39:54,930 --> 00:39:58,379
reasons they're choosing ICMP for

1163
00:39:56,579 --> 00:40:00,119
reasons I think the more we can

1164
00:39:58,380 --> 00:40:02,039
understand that c2 is a discipline that

1165
00:40:00,119 --> 00:40:03,479
you know has been crafted over a long

1166
00:40:02,039 --> 00:40:05,460
time and people are sort of in these

1167
00:40:03,479 --> 00:40:06,868
molds now the better a but we're gonna

1168
00:40:05,460 --> 00:40:08,969
be able to handle the changes coming

1169
00:40:06,869 --> 00:40:10,499
soon there's a ton of public research

1170
00:40:08,969 --> 00:40:11,670
already available that's really one

1171
00:40:10,499 --> 00:40:13,229
thing I wanted to point out in this talk

1172
00:40:11,670 --> 00:40:14,849
is you know I didn't come here to show

1173
00:40:13,229 --> 00:40:16,439
off my proof of concepts and say that oh

1174
00:40:14,849 --> 00:40:18,779
they're so awesome you guys should only

1175
00:40:16,440 --> 00:40:20,039
use those but the reality situation is

1176
00:40:18,779 --> 00:40:20,999
people have been releasing these for

1177
00:40:20,039 --> 00:40:21,989
years and I don't really feel like

1178
00:40:20,999 --> 00:40:24,269
they're getting the credit they deserve

1179
00:40:21,989 --> 00:40:25,859
I think it's because people think it's

1180
00:40:24,269 --> 00:40:27,839
still theoretical or it's not really

1181
00:40:25,859 --> 00:40:29,430
easy to operationalize but I think we

1182
00:40:27,839 --> 00:40:31,349
need to start solving these new problems

1183
00:40:29,430 --> 00:40:33,690
you know I think domain fronting was

1184
00:40:31,349 --> 00:40:36,210
just the first crack in a long series of

1185
00:40:33,690 --> 00:40:38,430
cracks and this DNS takeover thing is

1186
00:40:36,210 --> 00:40:40,170
going to be the next third party boost

1187
00:40:38,430 --> 00:40:43,558
is growing and cloud is representing

1188
00:40:40,170 --> 00:40:45,119
some very unique challenges for us so

1189
00:40:43,559 --> 00:40:47,609
next I just want to cover what wasn't

1190
00:40:45,119 --> 00:40:49,739
covered I obviously I'm a guy who likes

1191
00:40:47,609 --> 00:40:50,640
to give information I didn't touch it

1192
00:40:49,739 --> 00:40:52,109
all about offensive

1193
00:40:50,640 --> 00:40:53,848
structure which is its own discipline

1194
00:40:52,109 --> 00:40:55,799
but related discipline this would

1195
00:40:53,849 --> 00:40:58,710
include like asset collection traffic

1196
00:40:55,799 --> 00:40:59,880
redirection stage segmentation you know

1197
00:40:58,710 --> 00:41:02,099
there are a bunch of great people who

1198
00:40:59,880 --> 00:41:04,200
all post links to that they give this

1199
00:41:02,099 --> 00:41:05,940
sort of stuff out for free and give you

1200
00:41:04,200 --> 00:41:07,288
all the resources you need for it but

1201
00:41:05,940 --> 00:41:09,089
really all of these individual

1202
00:41:07,289 --> 00:41:11,489
primitives can't work without that

1203
00:41:09,089 --> 00:41:12,839
knowledge either so you know that's

1204
00:41:11,489 --> 00:41:14,700
really where I think people lose the

1205
00:41:12,839 --> 00:41:16,739
connection as they can see okay I use

1206
00:41:14,700 --> 00:41:18,899
virustotal for c2 but how it actually

1207
00:41:16,739 --> 00:41:20,640
build it the second is the specific

1208
00:41:18,900 --> 00:41:23,279
architecture details so like language

1209
00:41:20,640 --> 00:41:24,450
choice the details surrounding encoding

1210
00:41:23,279 --> 00:41:26,099
or encryption sort of the deep

1211
00:41:24,450 --> 00:41:27,839
complexities obviously the source code

1212
00:41:26,099 --> 00:41:29,970
will you know be in your hand so if you

1213
00:41:27,839 --> 00:41:31,890
want to take a look at it but that also

1214
00:41:29,970 --> 00:41:34,288
the implementation costs as well you

1215
00:41:31,890 --> 00:41:36,720
know none of this stuff is free I'll

1216
00:41:34,289 --> 00:41:39,569
post some additional resources so you

1217
00:41:36,720 --> 00:41:41,430
nose area Labs has a good blog sort of

1218
00:41:39,569 --> 00:41:44,038
detailing a bunch of basic c2 mitre

1219
00:41:41,430 --> 00:41:46,379
attack framework they have a documented

1220
00:41:44,039 --> 00:41:48,749
or a documented wiki of a bunch of you

1221
00:41:46,380 --> 00:41:51,150
know different samples and all of the c2

1222
00:41:48,749 --> 00:41:52,439
styles that they used I I use that a lot

1223
00:41:51,150 --> 00:41:54,779
for referencing material in this

1224
00:41:52,440 --> 00:41:56,369
presentation blue screen of Jeff has an

1225
00:41:54,779 --> 00:41:58,259
amazing read to new infrastructure wiki

1226
00:41:56,369 --> 00:42:00,509
that actually has many of the links I've

1227
00:41:58,259 --> 00:42:02,249
put in the slideshow on there as well so

1228
00:42:00,509 --> 00:42:03,920
if you were to visit one link after this

1229
00:42:02,249 --> 00:42:06,328
presentation it should be that link

1230
00:42:03,920 --> 00:42:08,099
there's domain fronting lists and also a

1231
00:42:06,329 --> 00:42:10,079
bunch of tools for sub domain takeover

1232
00:42:08,099 --> 00:42:11,640
you know in the classic sense where

1233
00:42:10,079 --> 00:42:14,640
you're looking for cname records that

1234
00:42:11,640 --> 00:42:15,930
that are abusable and with that you know

1235
00:42:14,640 --> 00:42:17,910
I want to thank everyone for coming I

1236
00:42:15,930 --> 00:42:20,308
actually finished early which is pretty

1237
00:42:17,910 --> 00:42:22,348
good I have my Twitter handles up there

1238
00:42:20,309 --> 00:42:24,299
and honestly as you couldn't tell by me

1239
00:42:22,349 --> 00:42:26,339
recording demos in the car ID on the way

1240
00:42:24,299 --> 00:42:28,769
over here I will upload code soon

1241
00:42:26,339 --> 00:42:31,019
probably tonight but I couldn't if you

1242
00:42:28,769 --> 00:42:32,729
want to just monitor my github they'll

1243
00:42:31,019 --> 00:42:34,738
probably be under there as like you know

1244
00:42:32,730 --> 00:42:36,599
github.com slash addendum something like

1245
00:42:34,739 --> 00:42:38,309
that and i guess i want to open the

1246
00:42:36,599 --> 00:42:39,930
floor for any questions people have I'm

1247
00:42:38,309 --> 00:42:41,309
you know told to tell you there are

1248
00:42:39,930 --> 00:42:50,069
microphones if you guys want to line up

1249
00:42:41,309 --> 00:42:52,739
on the microphones or you were saying

1250
00:42:50,069 --> 00:42:56,369
that when you were polling the GCP

1251
00:42:52,739 --> 00:42:58,200
address spaces it caused it to retain

1252
00:42:56,369 --> 00:43:00,329
the pool and add you maybe use that as a

1253
00:42:58,200 --> 00:43:02,640
denial of service and basically force it

1254
00:43:00,329 --> 00:43:03,779
to never give up pools so yeah that's

1255
00:43:02,640 --> 00:43:04,180
kind of interesting I'm not really sure

1256
00:43:03,779 --> 00:43:06,309
what there

1257
00:43:04,180 --> 00:43:08,319
and looks like that might be a

1258
00:43:06,309 --> 00:43:10,180
possibility my assumption is that

1259
00:43:08,319 --> 00:43:12,308
they're effectively designing a floating

1260
00:43:10,180 --> 00:43:13,629
pool for almost a caching reason for

1261
00:43:12,309 --> 00:43:16,750
anybody who didn't hear his question was

1262
00:43:13,630 --> 00:43:18,670
effectively in GCP what is the pool mech

1263
00:43:16,750 --> 00:43:21,430
really mean and could it be used for a

1264
00:43:18,670 --> 00:43:22,839
denial of service I would assume that

1265
00:43:21,430 --> 00:43:24,220
they would just expand the pool as

1266
00:43:22,839 --> 00:43:26,440
necessary there's also a count

1267
00:43:24,220 --> 00:43:27,879
limitation so by default Google cloud

1268
00:43:26,440 --> 00:43:29,980
platform only lets you have a certain

1269
00:43:27,880 --> 00:43:32,109
number of right keys at a time the same

1270
00:43:29,980 --> 00:43:33,760
thing goes for AWS and Hatcher you can

1271
00:43:32,109 --> 00:43:37,230
boost those quotas but I'd be surprised

1272
00:43:33,760 --> 00:43:37,230
if the quotas ever exceeded the pool

1273
00:43:38,730 --> 00:43:44,829
yeah do you see any advantage to

1274
00:43:41,380 --> 00:43:47,740
adopting HTTP 3 which is based on UDP

1275
00:43:44,829 --> 00:43:49,990
instead of TCP oh you know honestly I'm

1276
00:43:47,740 --> 00:43:51,520
not that familiar with it I can't think

1277
00:43:49,990 --> 00:44:01,029
of any but I also don't want to say the

1278
00:43:51,520 --> 00:44:01,880
opposite either oh okay thank you much

1279
00:44:01,030 --> 00:44:06,079
thank you so much everyone

1280
00:44:01,880 --> 00:44:06,079
[Applause]

