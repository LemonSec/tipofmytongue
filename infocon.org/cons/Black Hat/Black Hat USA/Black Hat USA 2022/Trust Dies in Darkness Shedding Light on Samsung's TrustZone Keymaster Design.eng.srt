1
00:00:01,730 --> 00:00:03,720
[Music]

2
00:00:03,720 --> 00:00:06,720
foreign

3
00:00:10,139 --> 00:00:13,219
to Welcome to the stage along

4
00:00:13,219 --> 00:00:18,000
ski and for the QA session

5
00:00:18,000 --> 00:00:21,800
uh ayal Ronan

6
00:00:23,540 --> 00:00:31,019
[Applause]

7
00:00:31,019 --> 00:00:35,040
can you do cryptography in the dark

8
00:00:35,040 --> 00:00:37,980
is the traffic is the trusted Hardware

9
00:00:37,980 --> 00:00:43,099
that we use every day really trustworthy

10
00:00:43,320 --> 00:00:45,540
today we'll share the Journey of our

11
00:00:45,540 --> 00:00:47,940
research including the highs and the

12
00:00:47,940 --> 00:00:49,260
lows

13
00:00:49,260 --> 00:00:51,600
and we'll see

14
00:00:51,600 --> 00:00:54,539
what exactly Samsung failed to do

15
00:00:54,539 --> 00:00:58,980
but moreover will take a look at how the

16
00:00:58,980 --> 00:01:02,059
industry should change

17
00:01:02,760 --> 00:01:04,440
when you start the research you never

18
00:01:04,440 --> 00:01:06,000
know what you're gonna get

19
00:01:06,000 --> 00:01:08,340
and sometimes you ask what are the odds

20
00:01:08,340 --> 00:01:11,040
that we find something meaningful

21
00:01:11,040 --> 00:01:13,439
on the one hand we have the leading

22
00:01:13,439 --> 00:01:15,540
Android Vendo Samsung

23
00:01:15,540 --> 00:01:18,240
with Federal Security certifications and

24
00:01:18,240 --> 00:01:20,520
a lot of resources

25
00:01:20,520 --> 00:01:23,580
on the other end we have one part-time

26
00:01:23,580 --> 00:01:26,100
graduate student in a zoo meeting with

27
00:01:26,100 --> 00:01:28,500
two amazing advisors

28
00:01:28,500 --> 00:01:31,020
if University researchers could find

29
00:01:31,020 --> 00:01:33,240
something meaningful then well-funded

30
00:01:33,240 --> 00:01:35,579
organizations can do much more

31
00:01:35,579 --> 00:01:38,759
and if Samsung's failure then other

32
00:01:38,759 --> 00:01:41,640
vendors with less Securities with less

33
00:01:41,640 --> 00:01:45,979
security resources could do much worse

34
00:01:46,200 --> 00:01:49,920
we found two high severity CVS that

35
00:01:49,920 --> 00:01:52,439
affect a massive scale of over 100

36
00:01:52,439 --> 00:01:55,259
million devices and allowed to fully

37
00:01:55,259 --> 00:01:58,079
recover the cryptographic keys that were

38
00:01:58,079 --> 00:02:02,000
encrypted by trusted Hardware

39
00:02:03,420 --> 00:02:05,219
to help you understand our research

40
00:02:05,219 --> 00:02:07,380
we'll start with why you should care

41
00:02:07,380 --> 00:02:10,440
what we found and what are the main

42
00:02:10,440 --> 00:02:12,840
lessons

43
00:02:12,840 --> 00:02:15,120
this is your phone

44
00:02:15,120 --> 00:02:18,120
you use it you use it every day for a

45
00:02:18,120 --> 00:02:21,360
variety of security critical tasks

46
00:02:21,360 --> 00:02:23,760
you store sensitive information

47
00:02:23,760 --> 00:02:26,520
you pay with the service such as Google

48
00:02:26,520 --> 00:02:27,720
pay

49
00:02:27,720 --> 00:02:29,580
and you use it to manage most of your

50
00:02:29,580 --> 00:02:31,440
digital lives

51
00:02:31,440 --> 00:02:34,500
this makes it a major major Target for

52
00:02:34,500 --> 00:02:35,640
attackers

53
00:02:35,640 --> 00:02:38,040
and in recent years we saw many public

54
00:02:38,040 --> 00:02:40,440
attacks that completely compromise the

55
00:02:40,440 --> 00:02:43,500
operating systems for example City days

56
00:02:43,500 --> 00:02:45,540
blacker talk by the Google manual

57
00:02:45,540 --> 00:02:47,780
security team

58
00:02:47,780 --> 00:02:49,980
but we still need to protect the

59
00:02:49,980 --> 00:02:52,440
cryptographic keys of applications so

60
00:02:52,440 --> 00:02:54,120
that attackers will not be able to

61
00:02:54,120 --> 00:02:56,160
transfer money from your bank account or

62
00:02:56,160 --> 00:02:59,400
log into your PayPal or Twitter accounts

63
00:02:59,400 --> 00:03:02,160
for this reason model Android devices

64
00:03:02,160 --> 00:03:04,560
use the untrust Zone security extension

65
00:03:04,560 --> 00:03:07,379
to provide a trusted execution execution

66
00:03:07,379 --> 00:03:10,819
environment or TDE the transit separate

67
00:03:10,819 --> 00:03:15,440
isolated transform operating system

68
00:03:16,019 --> 00:03:18,480
there are many different trust and

69
00:03:18,480 --> 00:03:20,099
operated systems and trusted

70
00:03:20,099 --> 00:03:22,860
applications in fact Samsung devices use

71
00:03:22,860 --> 00:03:26,280
three different operating systems qse by

72
00:03:26,280 --> 00:03:29,640
Qualcomm Kennedy byte trastonic and

73
00:03:29,640 --> 00:03:32,400
degrees by Samsung themselves

74
00:03:32,400 --> 00:03:34,260
these vendors

75
00:03:34,260 --> 00:03:36,780
keep their black box design secret

76
00:03:36,780 --> 00:03:39,780
making it making it harder

77
00:03:39,780 --> 00:03:43,019
to verify its security

78
00:03:43,019 --> 00:03:46,379
in this research we chose Samsung as a

79
00:03:46,379 --> 00:03:47,879
test case

80
00:03:47,879 --> 00:03:50,519
we reverse engineered the cryptographic

81
00:03:50,519 --> 00:03:52,920
design of the key master

82
00:03:52,920 --> 00:03:54,959
and we're interested in the security of

83
00:03:54,959 --> 00:03:57,900
other protected cryptographic keys

84
00:03:57,900 --> 00:04:00,480
and the relationship with higher level

85
00:04:00,480 --> 00:04:04,819
protocols with a remote trusted party

86
00:04:04,920 --> 00:04:06,659
as we can see

87
00:04:06,659 --> 00:04:09,239
a trazon provides a logical separation

88
00:04:09,239 --> 00:04:11,879
into two worlds the normal mode

89
00:04:11,879 --> 00:04:14,280
which runs Android and the secure World

90
00:04:14,280 --> 00:04:17,220
which runs the trusted OS

91
00:04:17,220 --> 00:04:19,199
we follow the Android platform security

92
00:04:19,199 --> 00:04:21,418
model which states that the hardware

93
00:04:21,418 --> 00:04:23,759
protection of key of keys should

94
00:04:23,759 --> 00:04:25,500
withstand a completely compromised

95
00:04:25,500 --> 00:04:26,940
normal world

96
00:04:26,940 --> 00:04:28,860
but in fact for our attacks we only

97
00:04:28,860 --> 00:04:30,919
require a

98
00:04:30,919 --> 00:04:33,120
sufficiently strong context in the

99
00:04:33,120 --> 00:04:35,220
Android user mode to communicate with

100
00:04:35,220 --> 00:04:38,040
trust and drivers

101
00:04:38,040 --> 00:04:41,040
finally we have the Android Keystone

102
00:04:41,040 --> 00:04:42,720
designed by Google

103
00:04:42,720 --> 00:04:44,460
which provides cryptographic Key

104
00:04:44,460 --> 00:04:45,720
Management

105
00:04:45,720 --> 00:04:48,180
applications can request key generation

106
00:04:48,180 --> 00:04:50,040
and the key master processed application

107
00:04:50,040 --> 00:04:52,320
in the trust Zone will generate the key

108
00:04:52,320 --> 00:04:55,020
in Secure hardware and before returning

109
00:04:55,020 --> 00:04:57,419
it to the normal World it will encrypt

110
00:04:57,419 --> 00:05:00,840
it with a hardware derived key

111
00:05:00,840 --> 00:05:04,199
the keys can be stored on disk or useful

112
00:05:04,199 --> 00:05:06,000
key at the station to prove that the key

113
00:05:06,000 --> 00:05:09,900
was really generated in Secure Hardware

114
00:05:09,900 --> 00:05:11,940
they can also be used for cryptographic

115
00:05:11,940 --> 00:05:15,960
operations such as sign or encrypt

116
00:05:15,960 --> 00:05:18,780
the important point is that the

117
00:05:18,780 --> 00:05:21,240
plaintext material should only be

118
00:05:21,240 --> 00:05:23,580
accessible by the k-master and should

119
00:05:23,580 --> 00:05:26,280
never leave the trazon

120
00:05:26,280 --> 00:05:28,880
never

121
00:05:29,039 --> 00:05:31,620
okay so a quick wrap up

122
00:05:31,620 --> 00:05:33,660
the key master protects the key material

123
00:05:33,660 --> 00:05:36,360
and it should be the only entity

124
00:05:36,360 --> 00:05:39,060
with plaintiff's key access

125
00:05:39,060 --> 00:05:43,500
but is this assumption guaranteed

126
00:05:43,500 --> 00:05:46,020
after this brief introduction let's dive

127
00:05:46,020 --> 00:05:48,960
into our security analysis and before we

128
00:05:48,960 --> 00:05:51,479
begin note that most details are

129
00:05:51,479 --> 00:05:53,400
simplified and for more information

130
00:05:53,400 --> 00:05:56,900
please see the extended paper

131
00:05:57,000 --> 00:06:01,380
how do you even begin where do you start

132
00:06:01,380 --> 00:06:03,180
you can download the firmware and

133
00:06:03,180 --> 00:06:05,419
extract trusted applications

134
00:06:05,419 --> 00:06:07,800
bootloaders and the kernel of The

135
00:06:07,800 --> 00:06:09,840
Trusted OS

136
00:06:09,840 --> 00:06:12,900
you can read the little available public

137
00:06:12,900 --> 00:06:15,000
documentation and use security

138
00:06:15,000 --> 00:06:17,220
certifications and the open source

139
00:06:17,220 --> 00:06:19,020
archive

140
00:06:19,020 --> 00:06:21,180
but for most of our research

141
00:06:21,180 --> 00:06:23,400
we spent a lot of time reverse

142
00:06:23,400 --> 00:06:26,100
engineering with gidra for dozens of

143
00:06:26,100 --> 00:06:30,900
filmers and trusted operating systems

144
00:06:30,900 --> 00:06:33,180
and how do you even interact with the

145
00:06:33,180 --> 00:06:37,020
key master usually applications use a

146
00:06:37,020 --> 00:06:40,080
binder API to communicate with the

147
00:06:40,080 --> 00:06:41,340
crystal service

148
00:06:41,340 --> 00:06:43,979
which uses the key master API to

149
00:06:43,979 --> 00:06:46,620
communicate with transzone drivers that

150
00:06:46,620 --> 00:06:50,160
execute a SMC or secure monitor call to

151
00:06:50,160 --> 00:06:53,220
switch execution to the secure monitor

152
00:06:53,220 --> 00:06:55,620
the secure monitor forwards the request

153
00:06:55,620 --> 00:06:57,780
to The Trusted OS for example degrees

154
00:06:57,780 --> 00:07:02,220
and eventually to the key master

155
00:07:02,220 --> 00:07:04,800
we published an open source tool called

156
00:07:04,800 --> 00:07:06,120
keybuster

157
00:07:06,120 --> 00:07:08,940
that allows to directly communicate with

158
00:07:08,940 --> 00:07:10,319
the key master

159
00:07:10,319 --> 00:07:12,840
without any input filtering or

160
00:07:12,840 --> 00:07:16,020
validation by the key master API we used

161
00:07:16,020 --> 00:07:18,539
it to reproduce our proof of concept

162
00:07:18,539 --> 00:07:21,000
attacks

163
00:07:21,000 --> 00:07:22,919
now as you recall the key master

164
00:07:22,919 --> 00:07:24,660
protects the key material by encrypting

165
00:07:24,660 --> 00:07:26,759
it and after extensive reverse

166
00:07:26,759 --> 00:07:29,520
engineering we saw that Samsung chose to

167
00:07:29,520 --> 00:07:33,599
use asgcm with an encryption key that is

168
00:07:33,599 --> 00:07:36,120
derived from a Hardware Key the rek

169
00:07:36,120 --> 00:07:39,060
using a key derivation function

170
00:07:39,060 --> 00:07:41,400
this is a very fragile construction

171
00:07:41,400 --> 00:07:44,460
which is not misses resistant

172
00:07:44,460 --> 00:07:46,979
and this is extremely vulnerable to IV

173
00:07:46,979 --> 00:07:48,419
reuse

174
00:07:48,419 --> 00:07:50,639
two interesting questions are

175
00:07:50,639 --> 00:07:54,120
how are the encryption Keys derived

176
00:07:54,120 --> 00:07:57,780
and now is the IV chosen

177
00:07:57,780 --> 00:08:01,380
we saw that the salt parameter that is

178
00:08:01,380 --> 00:08:03,180
used in the key derivation is the

179
00:08:03,180 --> 00:08:05,280
shuttle digest of the following values

180
00:08:05,280 --> 00:08:07,500
with some variation

181
00:08:07,500 --> 00:08:09,539
in the first variation

182
00:08:09,539 --> 00:08:12,660
the salt is a constant string followed

183
00:08:12,660 --> 00:08:15,240
by a Target control application ID and

184
00:08:15,240 --> 00:08:17,099
application data

185
00:08:17,099 --> 00:08:20,400
in the second variation on Galaxy S9

186
00:08:20,400 --> 00:08:22,620
they also bind the boot of the state

187
00:08:22,620 --> 00:08:25,379
which is constant for our discussion

188
00:08:25,379 --> 00:08:27,660
and only in the last variation on Galaxy

189
00:08:27,660 --> 00:08:30,599
S10 and neural devices did Samsung get

190
00:08:30,599 --> 00:08:32,940
16 bytes of Randomness that changed the

191
00:08:32,940 --> 00:08:36,380
derived key every time

192
00:08:36,479 --> 00:08:39,659
side note a possible explanation as to

193
00:08:39,659 --> 00:08:41,339
why Samsung has three different

194
00:08:41,339 --> 00:08:45,180
variations is the mobile Federal

195
00:08:45,180 --> 00:08:47,100
Protection profile

196
00:08:47,100 --> 00:08:50,100
which requires both other state binding

197
00:08:50,100 --> 00:08:52,580
for example

198
00:08:52,980 --> 00:08:56,040
so we saw that the client

199
00:08:56,040 --> 00:08:58,860
can control the salt which means we can

200
00:08:58,860 --> 00:09:00,839
have key reuse

201
00:09:00,839 --> 00:09:02,700
to our surprise

202
00:09:02,700 --> 00:09:04,860
we found that the client can also set

203
00:09:04,860 --> 00:09:06,779
the encryption IV

204
00:09:06,779 --> 00:09:09,420
so we also have IV reuse

205
00:09:09,420 --> 00:09:11,420
now

206
00:09:11,420 --> 00:09:14,279
asgcm is a stream Cipher that uses

207
00:09:14,279 --> 00:09:17,160
counter mode internally to encrypt the

208
00:09:17,160 --> 00:09:19,920
IV and serve it with the plain text

209
00:09:19,920 --> 00:09:22,500
this leads to the following Ivory use

210
00:09:22,500 --> 00:09:23,820
attack

211
00:09:23,820 --> 00:09:26,399
given a key blob a that we wish to

212
00:09:26,399 --> 00:09:29,880
recover we can extract the IV and using

213
00:09:29,880 --> 00:09:33,360
the same the same IV and salt we can

214
00:09:33,360 --> 00:09:36,000
import a known key B with the Keystone

215
00:09:36,000 --> 00:09:37,440
API

216
00:09:37,440 --> 00:09:41,100
and we can we get an encrypted blob B

217
00:09:41,100 --> 00:09:44,760
now we simply solve the ciphertext of a

218
00:09:44,760 --> 00:09:47,640
with the ciphertext of B

219
00:09:47,640 --> 00:09:49,920
to get the Excel of the plain text and

220
00:09:49,920 --> 00:09:51,420
then we Excel with the known plain text

221
00:09:51,420 --> 00:09:52,440
of B

222
00:09:52,440 --> 00:09:56,220
and we fully recover the key material of

223
00:09:56,220 --> 00:10:00,320
a which is pretty exciting

224
00:10:01,440 --> 00:10:04,260
a trivial observation is that once we

225
00:10:04,260 --> 00:10:06,839
recover the key material we can bypass

226
00:10:06,839 --> 00:10:08,180
any key

227
00:10:08,180 --> 00:10:11,399
any key restriction such as protected

228
00:10:11,399 --> 00:10:13,980
confirmation or biometric points and we

229
00:10:13,980 --> 00:10:16,680
can simply transfer this amount to that

230
00:10:16,680 --> 00:10:19,440
account without the trusted UI taken

231
00:10:19,440 --> 00:10:23,180
over and without user consent

232
00:10:23,519 --> 00:10:25,860
but this only works on Galaxy S9 and

233
00:10:25,860 --> 00:10:28,040
similar devices and not on the latest

234
00:10:28,040 --> 00:10:31,740
S10 and neural devices because the salt

235
00:10:31,740 --> 00:10:34,860
changes the the right key changes every

236
00:10:34,860 --> 00:10:36,480
time

237
00:10:36,480 --> 00:10:40,680
it was surprised we also found that the

238
00:10:40,680 --> 00:10:42,600
client is allowed to set the encryption

239
00:10:42,600 --> 00:10:46,339
version using a hidden API

240
00:10:46,380 --> 00:10:48,839
therefore an attacker could downgrade

241
00:10:48,839 --> 00:10:50,640
all new key blobs to a vulnerable

242
00:10:50,640 --> 00:10:52,920
encryption version and then use the IV

243
00:10:52,920 --> 00:10:54,779
reuse attack we just saw to fully

244
00:10:54,779 --> 00:10:58,040
recover any key blob

245
00:10:59,399 --> 00:11:01,680
can this affect higher level protocols

246
00:11:01,680 --> 00:11:04,140
with a remote trusted party

247
00:11:04,140 --> 00:11:06,480
take for instance the Fido web

248
00:11:06,480 --> 00:11:08,760
authentication standard which is which

249
00:11:08,760 --> 00:11:10,320
uses public key cryptography to

250
00:11:10,320 --> 00:11:12,000
authenticate the websites instead of

251
00:11:12,000 --> 00:11:13,920
passwords

252
00:11:13,920 --> 00:11:16,680
web authentication uses an internal

253
00:11:16,680 --> 00:11:18,600
security element

254
00:11:18,600 --> 00:11:21,660
called the platform Authenticator

255
00:11:21,660 --> 00:11:24,779
to generate and use authentication keys

256
00:11:24,779 --> 00:11:27,959
usually this is a external security key

257
00:11:27,959 --> 00:11:29,579
such as ubikey

258
00:11:29,579 --> 00:11:32,820
but we already have secure Hardware in

259
00:11:32,820 --> 00:11:34,620
our pockets so we can just use the

260
00:11:34,620 --> 00:11:38,600
Android custom based Key Master

261
00:11:39,720 --> 00:11:42,120
the the important point is that an

262
00:11:42,120 --> 00:11:44,519
attacker should not be able to recover

263
00:11:44,519 --> 00:11:46,620
the authentication keys and should not

264
00:11:46,620 --> 00:11:47,760
be able to clone the platform

265
00:11:47,760 --> 00:11:50,459
authenticator so that your Netflix or

266
00:11:50,459 --> 00:11:52,920
VPN subscription

267
00:11:52,920 --> 00:11:56,519
will not be used on a different device

268
00:11:56,519 --> 00:12:00,180
web authentication has two main stages

269
00:12:00,180 --> 00:12:02,760
when the user wants to register

270
00:12:02,760 --> 00:12:06,060
the device generates a keeper using the

271
00:12:06,060 --> 00:12:08,519
keymaster trusted application in the

272
00:12:08,519 --> 00:12:11,220
transom and uses key attest station to

273
00:12:11,220 --> 00:12:13,260
prove that the key was really generated

274
00:12:13,260 --> 00:12:15,120
in secure

275
00:12:15,120 --> 00:12:18,660
if the certificate is valid the server

276
00:12:18,660 --> 00:12:21,660
registers the user with the public key

277
00:12:21,660 --> 00:12:23,700
then

278
00:12:23,700 --> 00:12:26,820
when the user wants to log in

279
00:12:26,820 --> 00:12:29,880
the server sends a unique Challenge and

280
00:12:29,880 --> 00:12:32,660
after getting user consent the device

281
00:12:32,660 --> 00:12:36,060
signs the challenge with the private key

282
00:12:36,060 --> 00:12:38,760
in the secure order

283
00:12:38,760 --> 00:12:40,860
if the signature is valid the user is

284
00:12:40,860 --> 00:12:42,480
signed in

285
00:12:42,480 --> 00:12:45,120
using gag attacks we can

286
00:12:45,120 --> 00:12:47,519
downgrade any key blob recover it with

287
00:12:47,519 --> 00:12:50,339
the ivarius attack and then we can clone

288
00:12:50,339 --> 00:12:52,560
the platform authenticator since we can

289
00:12:52,560 --> 00:12:54,540
sign any service server challenge with

290
00:12:54,540 --> 00:12:57,139
the private key

291
00:12:57,420 --> 00:13:01,380
in our demo on Galaxy S10 we use GDB to

292
00:13:01,380 --> 00:13:03,120
implement the downgrade attack and then

293
00:13:03,120 --> 00:13:05,459
key Buster to implement the ivarius

294
00:13:05,459 --> 00:13:06,720
attack

295
00:13:06,720 --> 00:13:09,200
and we used the Fido

296
00:13:09,200 --> 00:13:12,000
the strong key Fido server and sample

297
00:13:12,000 --> 00:13:15,480
application without any modifications

298
00:13:15,480 --> 00:13:18,000
after registration we recovered the

299
00:13:18,000 --> 00:13:20,339
privacy and verified against the

300
00:13:20,339 --> 00:13:23,160
attestation certificate and to complete

301
00:13:23,160 --> 00:13:25,500
our demo we use the different

302
00:13:25,500 --> 00:13:28,920
application that doesn't use trustion at

303
00:13:28,920 --> 00:13:31,320
all and simply uses the recovered key

304
00:13:31,320 --> 00:13:33,360
we managed to successfully authenticate

305
00:13:33,360 --> 00:13:35,880
against strong Keys remote server over

306
00:13:35,880 --> 00:13:38,360
the internet

307
00:13:39,240 --> 00:13:41,399
overall we saw that attackers could

308
00:13:41,399 --> 00:13:43,380
recover cryptographic keys and use them

309
00:13:43,380 --> 00:13:45,180
to steal your money or to steal your

310
00:13:45,180 --> 00:13:46,620
identity

311
00:13:46,620 --> 00:13:50,040
we reported our findings to Samsung in

312
00:13:50,040 --> 00:13:52,699
May last year

313
00:13:52,740 --> 00:13:55,380
the disclosure for the IV Rios attack

314
00:13:55,380 --> 00:13:58,260
was pretty straightforward

315
00:13:58,260 --> 00:14:01,920
in August they patched Galaxy S9 and

316
00:14:01,920 --> 00:14:04,079
similar devices

317
00:14:04,079 --> 00:14:06,899
assigned a high severity CV and remove

318
00:14:06,899 --> 00:14:11,639
the option to set the IV from the API

319
00:14:11,639 --> 00:14:14,519
which is great

320
00:14:14,519 --> 00:14:16,860
but life is not so simple

321
00:14:16,860 --> 00:14:19,980
and in June Samsung rejected the

322
00:14:19,980 --> 00:14:21,300
downgrade attack

323
00:14:21,300 --> 00:14:23,519
saying that it's impossible to create

324
00:14:23,519 --> 00:14:25,860
downgraded key blocks

325
00:14:25,860 --> 00:14:28,079
we discovered the same attack on Galaxy

326
00:14:28,079 --> 00:14:31,019
s20 and S21 and we reported the

327
00:14:31,019 --> 00:14:34,139
downgrade attack is a separate issue

328
00:14:34,139 --> 00:14:36,480
but then Samsung

329
00:14:36,480 --> 00:14:39,300
said that they think there's no security

330
00:14:39,300 --> 00:14:43,160
no practical security impact

331
00:14:43,500 --> 00:14:46,199
this make made us kind of sad

332
00:14:46,199 --> 00:14:48,660
and we almost gave up but in a final

333
00:14:48,660 --> 00:14:49,920
attempt

334
00:14:49,920 --> 00:14:53,660
we sent our people with

335
00:15:03,560 --> 00:15:07,100
which made us feel great

336
00:15:07,100 --> 00:15:10,139
uh they assign the ice ability CV

337
00:15:10,139 --> 00:15:13,019
patched all relevant devices

338
00:15:13,019 --> 00:15:15,480
and completely removed the Legacy key

339
00:15:15,480 --> 00:15:16,980
blob implementation

340
00:15:16,980 --> 00:15:19,019
maybe the moral of the story is to never

341
00:15:19,019 --> 00:15:21,500
give up

342
00:15:23,339 --> 00:15:25,260
it's important it's important to note

343
00:15:25,260 --> 00:15:27,480
that most of our research involved very

344
00:15:27,480 --> 00:15:30,060
time intensive reverse engineering and

345
00:15:30,060 --> 00:15:32,279
two weeks after our research was

346
00:15:32,279 --> 00:15:33,360
published

347
00:15:33,360 --> 00:15:36,660
the labsa soccer group leaked the entire

348
00:15:36,660 --> 00:15:39,680
Samsung source code

349
00:15:40,079 --> 00:15:43,500
we'd like to think that if those if this

350
00:15:43,500 --> 00:15:45,779
code was open source then those issues

351
00:15:45,779 --> 00:15:48,079
would have been found years ago

352
00:15:48,079 --> 00:15:50,760
hopefully before reaching production

353
00:15:50,760 --> 00:15:52,560
devices

354
00:15:52,560 --> 00:15:54,660
and if not it would still make a

355
00:15:54,660 --> 00:15:57,180
research much easier and much faster to

356
00:15:57,180 --> 00:15:59,160
complete

357
00:15:59,160 --> 00:16:03,180
also we saw similar iberius attacks

358
00:16:03,180 --> 00:16:05,820
against Real World Systems over 10 years

359
00:16:05,820 --> 00:16:07,440
ago

360
00:16:07,440 --> 00:16:09,720
maybe it's true that people just don't

361
00:16:09,720 --> 00:16:12,920
understand IVs

362
00:16:13,620 --> 00:16:16,139
finally let's see what can we learn for

363
00:16:16,139 --> 00:16:17,940
this

364
00:16:17,940 --> 00:16:20,639
the root cause of both issues is API

365
00:16:20,639 --> 00:16:23,399
misuse the client should not be able to

366
00:16:23,399 --> 00:16:25,680
set the encryption IV or the encryption

367
00:16:25,680 --> 00:16:26,760
version

368
00:16:26,760 --> 00:16:28,800
also the key master

369
00:16:28,800 --> 00:16:31,680
is a security critical application

370
00:16:31,680 --> 00:16:34,740
should have minimal attack surface and

371
00:16:34,740 --> 00:16:38,600
should not include any hidden code

372
00:16:38,639 --> 00:16:42,779
instead the ivys in GCM should be unique

373
00:16:42,779 --> 00:16:45,139
and you can use the Mrs resistant

374
00:16:45,139 --> 00:16:47,639
authenticated encryption such as AES

375
00:16:47,639 --> 00:16:50,820
gcmsav or use the message resistant

376
00:16:50,820 --> 00:16:55,220
cryptographic Library such as think

377
00:16:55,259 --> 00:16:58,040
you should also always use the latest

378
00:16:58,040 --> 00:17:02,360
encryption version if possible

379
00:17:02,759 --> 00:17:04,919
the bigger issue is in the composibility

380
00:17:04,919 --> 00:17:07,140
with higher level protocols

381
00:17:07,140 --> 00:17:10,859
in protocols like web authentication a

382
00:17:10,859 --> 00:17:13,079
remote trusted party uses key at a

383
00:17:13,079 --> 00:17:15,839
station to prove that the authentication

384
00:17:15,839 --> 00:17:18,059
keys will really generated insecure

385
00:17:18,059 --> 00:17:19,559
album

386
00:17:19,559 --> 00:17:23,099
but as we just saw for Samsung devices

387
00:17:23,099 --> 00:17:25,740
the secure Hardware can be flawed and

388
00:17:25,740 --> 00:17:29,040
cryptographic keys can be extracted

389
00:17:29,040 --> 00:17:30,840
but the fetal silver is no way of

390
00:17:30,840 --> 00:17:33,540
knowing that and no way to reach it it

391
00:17:33,540 --> 00:17:35,160
can't set the policy to reject

392
00:17:35,160 --> 00:17:37,620
certificates from such devices because

393
00:17:37,620 --> 00:17:39,240
the attestation certificate does not

394
00:17:39,240 --> 00:17:42,120
contain any information about the

395
00:17:42,120 --> 00:17:44,940
encryption method

396
00:17:44,940 --> 00:17:48,120
in fact as long as we have

397
00:17:48,120 --> 00:17:50,580
vendor-specific black book designs in

398
00:17:50,580 --> 00:17:52,860
the ecosystem it's impossible to prove

399
00:17:52,860 --> 00:17:55,440
the correctness of the composition we

400
00:17:55,440 --> 00:17:58,260
hope that our work will motivate the the

401
00:17:58,260 --> 00:18:00,840
use of an open stubborn open standard

402
00:18:00,840 --> 00:18:03,120
design by Google for the key master

403
00:18:03,120 --> 00:18:05,959
subsystem

404
00:18:06,240 --> 00:18:08,940
side note about a month after our

405
00:18:08,940 --> 00:18:11,760
research was published Google announced

406
00:18:11,760 --> 00:18:15,179
changes to their key at the station

407
00:18:15,179 --> 00:18:18,120
protocol making it a

408
00:18:18,120 --> 00:18:21,179
making it possible to

409
00:18:21,179 --> 00:18:22,460
to not

410
00:18:22,460 --> 00:18:25,080
provision certificates to known

411
00:18:25,080 --> 00:18:28,140
compromise devices this could be a step

412
00:18:28,140 --> 00:18:30,860
in the right direction

413
00:18:32,400 --> 00:18:35,419
in conclusion

414
00:18:35,580 --> 00:18:38,100
we saw the dangerous pitfalls that arise

415
00:18:38,100 --> 00:18:40,200
when the cryptographic design is kept

416
00:18:40,200 --> 00:18:42,320
secret

417
00:18:42,480 --> 00:18:45,059
we Advocate the use of an open standard

418
00:18:45,059 --> 00:18:48,059
design that would would prevent such

419
00:18:48,059 --> 00:18:50,100
issues

420
00:18:50,100 --> 00:18:53,220
and as we just saw we think that that

421
00:18:53,220 --> 00:18:57,059
there is no security by obscurity

422
00:18:57,059 --> 00:18:59,220
the cryptographic design should be

423
00:18:59,220 --> 00:19:01,620
reviewed by independent researchers and

424
00:19:01,620 --> 00:19:03,539
should not rely on the difficulty of

425
00:19:03,539 --> 00:19:08,000
reverse engineering proprietary systems

426
00:19:09,000 --> 00:19:12,059
finally the design Choice the design

427
00:19:12,059 --> 00:19:15,059
choice of the fragile asgcm for

428
00:19:15,059 --> 00:19:17,120
authenticated keyboard encryption

429
00:19:17,120 --> 00:19:20,160
deserves discussion after too many years

430
00:19:20,160 --> 00:19:24,440
of IB reuse in Real World Systems

431
00:19:24,840 --> 00:19:27,299
I want I want you to live today with two

432
00:19:27,299 --> 00:19:28,980
things in mind

433
00:19:28,980 --> 00:19:31,679
do cryptography in the open and make

434
00:19:31,679 --> 00:19:34,200
sure it's misses resistant otherwise you

435
00:19:34,200 --> 00:19:36,419
just might might get catastrophic

436
00:19:36,419 --> 00:19:38,640
failure

437
00:19:38,640 --> 00:19:41,100
thank you for your time feel free to ask

438
00:19:41,100 --> 00:19:44,940
me any questions and join ayal for also

439
00:19:44,940 --> 00:19:46,770
more questions thank you

440
00:19:46,770 --> 00:19:55,020
[Applause]

441
00:19:55,020 --> 00:19:57,120
thank you so much for that fantastic

442
00:19:57,120 --> 00:19:59,520
presentation uh we're going to jump into

443
00:19:59,520 --> 00:20:01,980
the question and answers here at the

444
00:20:01,980 --> 00:20:04,140
moment we don't have any questions in

445
00:20:04,140 --> 00:20:06,360
our virtual chat but please feel free to

446
00:20:06,360 --> 00:20:08,940
throw some in there if our audience has

447
00:20:08,940 --> 00:20:11,700
any questions feel free to please stand

448
00:20:11,700 --> 00:20:14,100
up and we will bring you a microphone to

449
00:20:14,100 --> 00:20:17,659
ask your questions to the presenters

450
00:20:29,160 --> 00:20:31,080
we see you over there we're going to get

451
00:20:31,080 --> 00:20:33,860
you a mic here

452
00:20:35,160 --> 00:20:37,940
foreign

453
00:20:44,940 --> 00:20:47,520
thank you uh I just wanted to ask you

454
00:20:47,520 --> 00:20:49,919
what was the procedure like can you talk

455
00:20:49,919 --> 00:20:51,660
about in details about how you reverse

456
00:20:51,660 --> 00:20:54,299
engineered to find this flow in the key

457
00:20:54,299 --> 00:20:55,799
master you mentioned a little bit of

458
00:20:55,799 --> 00:20:57,299
like you extract something from the

459
00:20:57,299 --> 00:21:00,000
public firmware that you found but uh

460
00:21:00,000 --> 00:21:02,640
can you shed more light on it

461
00:21:02,640 --> 00:21:06,480
yeah again they want me to explain how

462
00:21:06,480 --> 00:21:07,980
do you start the research and how do you

463
00:21:07,980 --> 00:21:09,299
explore the key master

464
00:21:09,299 --> 00:21:11,760
is that the quest just a high level

465
00:21:11,760 --> 00:21:13,799
detail of like what kind of analysis

466
00:21:13,799 --> 00:21:18,120
that required uh to find this flow it's

467
00:21:18,120 --> 00:21:20,880
a lot of manual reverse engineering

468
00:21:20,880 --> 00:21:27,020
and a lot of like Delta walk yeah

469
00:21:28,500 --> 00:21:31,640
no easy tricks

470
00:21:36,720 --> 00:21:38,640
great thank you so much do we have any

471
00:21:38,640 --> 00:21:42,260
other questions from the audience

472
00:21:47,820 --> 00:21:51,120
I am not seeing any so oh we do have a

473
00:21:51,120 --> 00:21:54,559
gentleman over in the corner there

474
00:21:57,240 --> 00:21:59,400
uh hello thanks for the great

475
00:21:59,400 --> 00:22:01,559
presentation uh why why you think that

476
00:22:01,559 --> 00:22:04,919
DAV uh the IV was uh

477
00:22:04,919 --> 00:22:07,740
um unlocked to be said uh by the AI

478
00:22:07,740 --> 00:22:11,400
maybe for debugging purposes

479
00:22:11,400 --> 00:22:14,760
we don't have a clear answer but maybe

480
00:22:14,760 --> 00:22:16,320
it's possible that they wanted the

481
00:22:16,320 --> 00:22:18,600
deterministic tests and they wanted like

482
00:22:18,600 --> 00:22:21,840
to be able to encrypt and get the same

483
00:22:21,840 --> 00:22:24,720
and ciphertext so they use the same IV

484
00:22:24,720 --> 00:22:27,539
but that's not the right way to go

485
00:22:27,539 --> 00:22:30,080
thank you

486
00:22:34,679 --> 00:22:36,600
it looks like we have one more question

487
00:22:36,600 --> 00:22:37,860
here

488
00:22:37,860 --> 00:22:40,919
hello excellent presentation

489
00:22:40,919 --> 00:22:42,919
um question on open sourcing

490
00:22:42,919 --> 00:22:45,840
cryptographic libraries functions new

491
00:22:45,840 --> 00:22:47,340
ways of doing things

492
00:22:47,340 --> 00:22:49,200
do you see this is more of like an

493
00:22:49,200 --> 00:22:51,240
academic exercise similar to what nist

494
00:22:51,240 --> 00:22:53,700
does when you have new cryptographic

495
00:22:53,700 --> 00:22:56,940
proposals or types or Solutions or are

496
00:22:56,940 --> 00:22:58,620
you thinking more like what we would do

497
00:22:58,620 --> 00:23:00,059
for open source software in general

498
00:23:00,059 --> 00:23:03,020
where it's open to the world

499
00:23:03,020 --> 00:23:06,360
do you want to take that yeah

500
00:23:06,360 --> 00:23:08,880
um I think that's

501
00:23:08,880 --> 00:23:11,280
um you want to have both if there's a

502
00:23:11,280 --> 00:23:13,500
new protocol that has been suggested

503
00:23:13,500 --> 00:23:17,780
like Google is suggesting now for uh

504
00:23:17,780 --> 00:23:20,340
provisioning keys for the station we

505
00:23:20,340 --> 00:23:22,740
feel this stuff should be described to

506
00:23:22,740 --> 00:23:24,659
the public and should be open to

507
00:23:24,659 --> 00:23:27,780
comments in incorporates other people

508
00:23:27,780 --> 00:23:29,640
from the security Community either from

509
00:23:29,640 --> 00:23:32,100
Academia or industry doing the process

510
00:23:32,100 --> 00:23:34,559
which it's like this is doing but not

511
00:23:34,559 --> 00:23:36,240
necessarily

512
00:23:36,240 --> 00:23:39,059
um need to be by government entity after

513
00:23:39,059 --> 00:23:41,360
this is done any

514
00:23:41,360 --> 00:23:43,740
cryptographic implementation I think

515
00:23:43,740 --> 00:23:45,840
should be open sourced as much as

516
00:23:45,840 --> 00:23:48,120
possible so everybody can look at the

517
00:23:48,120 --> 00:23:49,080
code and see that the actual

518
00:23:49,080 --> 00:23:51,539
implementation is also secure so we want

519
00:23:51,539 --> 00:23:56,120
to have both options basically

520
00:23:56,120 --> 00:23:59,280
yes so there was a bit of a echo so just

521
00:23:59,280 --> 00:24:02,460
like to follow his point there there

522
00:24:02,460 --> 00:24:04,140
should be like a collaboration between

523
00:24:04,140 --> 00:24:06,419
Academia and Industry like in the

524
00:24:06,419 --> 00:24:09,539
standard standardization of TLS and the

525
00:24:09,539 --> 00:24:12,539
any cryptographer if they saw the code

526
00:24:12,539 --> 00:24:14,100
they would immediately tell you that

527
00:24:14,100 --> 00:24:16,559
there's an issue and the

528
00:24:16,559 --> 00:24:18,539
yeah you should make cryptographic code

529
00:24:18,539 --> 00:24:22,080
AS open source as possible because the

530
00:24:22,080 --> 00:24:24,480
security should lie in the design and

531
00:24:24,480 --> 00:24:28,260
not in the uh in it's been hidden like

532
00:24:28,260 --> 00:24:30,780
the obscope the obscurity does not help

533
00:24:30,780 --> 00:24:33,620
in this case

534
00:24:34,080 --> 00:24:36,780
thank you

535
00:24:36,780 --> 00:24:38,760
do we have any other questions from the

536
00:24:38,760 --> 00:24:41,059
audience

537
00:24:43,980 --> 00:24:45,600
we see over there sir and we're getting

538
00:24:45,600 --> 00:24:48,379
you the microphone

539
00:24:51,539 --> 00:24:53,640
like to also compliment you on your

540
00:24:53,640 --> 00:24:55,500
great presentation

541
00:24:55,500 --> 00:24:58,260
um at the beginning you said that this

542
00:24:58,260 --> 00:25:01,440
was a fully certified design

543
00:25:01,440 --> 00:25:03,720
had searched from Phipps and I think

544
00:25:03,720 --> 00:25:07,860
also Europeans so what is your message

545
00:25:07,860 --> 00:25:11,700
to the certification authorities about

546
00:25:11,700 --> 00:25:14,400
you know how they go about certifying

547
00:25:14,400 --> 00:25:16,980
designs like this based on your

548
00:25:16,980 --> 00:25:18,980
experience

549
00:25:18,980 --> 00:25:22,740
yeah I think the message is uh to to

550
00:25:22,740 --> 00:25:25,559
involve also independent researchers or

551
00:25:25,559 --> 00:25:28,919
at least to to make sure like maybe

552
00:25:28,919 --> 00:25:31,620
those issues like the fragmentation of

553
00:25:31,620 --> 00:25:33,659
the different variations vocals because

554
00:25:33,659 --> 00:25:36,000
of the uh

555
00:25:36,000 --> 00:25:38,700
it's not fips but it's the mdfpp the

556
00:25:38,700 --> 00:25:40,620
Federal Protection profile and maybe

557
00:25:40,620 --> 00:25:42,659
like in trying to support that they met

558
00:25:42,659 --> 00:25:45,720
made some issues but it's important to

559
00:25:45,720 --> 00:25:48,960
know that there were professional

560
00:25:48,960 --> 00:25:53,039
security Labs that did I guess they had

561
00:25:53,039 --> 00:25:55,039
source code access and they did like

562
00:25:55,039 --> 00:25:58,320
very detailed security analysis and they

563
00:25:58,320 --> 00:25:59,659
also published some security

564
00:25:59,659 --> 00:26:01,919
certificates but it was still not enough

565
00:26:01,919 --> 00:26:06,539
to find a very trivial issue so maybe

566
00:26:06,539 --> 00:26:08,460
they need they need to reconsider and

567
00:26:08,460 --> 00:26:13,020
think what's next yeah if I can add to

568
00:26:13,020 --> 00:26:13,799
this

569
00:26:13,799 --> 00:26:17,220
then we have multiple examples if you

570
00:26:17,220 --> 00:26:20,400
take um open SSL code which have

571
00:26:20,400 --> 00:26:23,460
versions that are fips certified you're

572
00:26:23,460 --> 00:26:26,279
still finding bugs and vulnerabilities

573
00:26:26,279 --> 00:26:28,740
in this code time and time again but

574
00:26:28,740 --> 00:26:31,380
this is because open SSL is open source

575
00:26:31,380 --> 00:26:34,140
and any researcher in any person can

576
00:26:34,140 --> 00:26:35,580
download the code and never look at it

577
00:26:35,580 --> 00:26:39,179
so I feel that going to have a baseline

578
00:26:39,179 --> 00:26:41,880
of requirements for certification might

579
00:26:41,880 --> 00:26:44,760
be a good idea but this is not enough to

580
00:26:44,760 --> 00:26:47,520
make sure that software is secure and we

581
00:26:47,520 --> 00:26:49,860
need a lot of eyes looking at the this

582
00:26:49,860 --> 00:26:54,000
type of code and again that this is

583
00:26:54,000 --> 00:26:56,220
certification this might be good but

584
00:26:56,220 --> 00:26:58,380
it's not a substitute to the whole

585
00:26:58,380 --> 00:27:00,960
research community and trying to look at

586
00:27:00,960 --> 00:27:03,799
the solutions

587
00:27:06,960 --> 00:27:09,419
okay I just have a quick question so

588
00:27:09,419 --> 00:27:11,820
like it makes a lot of sense for big

589
00:27:11,820 --> 00:27:14,880
projects that have impact of millions

590
00:27:14,880 --> 00:27:17,220
and millions of users to have it open

591
00:27:17,220 --> 00:27:19,860
sourced and research what about smaller

592
00:27:19,860 --> 00:27:22,919
projects I just looked up the AES GCM

593
00:27:22,919 --> 00:27:24,000
website and it doesn't say anything

594
00:27:24,000 --> 00:27:26,279
about read a Wikipedia page it doesn't

595
00:27:26,279 --> 00:27:28,799
say anything about IV replay attacks and

596
00:27:28,799 --> 00:27:31,260
the weaknesses of IB so what resources

597
00:27:31,260 --> 00:27:34,320
would you recommend for people who just

598
00:27:34,320 --> 00:27:35,460
are not going to have researchers

599
00:27:35,460 --> 00:27:36,480
looking at their code because our

600
00:27:36,480 --> 00:27:38,159
project might be seen by a hundred

601
00:27:38,159 --> 00:27:40,380
business side type people we still need

602
00:27:40,380 --> 00:27:42,120
to make sure stuff is cryptographically

603
00:27:42,120 --> 00:27:43,200
secure

604
00:27:43,200 --> 00:27:45,120
what sort of resources would you

605
00:27:45,120 --> 00:27:46,559
recommend

606
00:27:46,559 --> 00:27:49,020
yeah I would recommend to use a

607
00:27:49,020 --> 00:27:51,360
something like a message resistant

608
00:27:51,360 --> 00:27:54,059
cryptography libraries like think by

609
00:27:54,059 --> 00:27:57,419
Google or other libraries that really

610
00:27:57,419 --> 00:27:58,799
help you

611
00:27:58,799 --> 00:28:00,480
like even if you don't have the

612
00:28:00,480 --> 00:28:03,000
necessary cryptographic background like

613
00:28:03,000 --> 00:28:05,700
still make it work and yeah it's an

614
00:28:05,700 --> 00:28:07,620
important point because the cryptography

615
00:28:07,620 --> 00:28:10,679
engineering requires very gentle and

616
00:28:10,679 --> 00:28:15,059
precise operations so yeah you should

617
00:28:15,059 --> 00:28:18,600
always at least know what are you using

618
00:28:18,600 --> 00:28:21,600
know the security assumptions because in

619
00:28:21,600 --> 00:28:24,120
GCM the security assumptions is that the

620
00:28:24,120 --> 00:28:28,500
IVs are unique and you should try to to

621
00:28:28,500 --> 00:28:31,820
avoid the misuse yeah

622
00:28:36,000 --> 00:28:39,960
great thank you that is time for us and

623
00:28:39,960 --> 00:28:43,080
I want to thank the presenters here

624
00:28:43,080 --> 00:28:44,520
um we've got some wonderful information

625
00:28:44,520 --> 00:28:47,220
from this and if you there are

626
00:28:47,220 --> 00:28:49,260
additional questions please feel free to

627
00:28:49,260 --> 00:28:52,320
speak to alone in the hallways thank you

628
00:28:52,320 --> 00:28:54,480
for coming to black hat and thank you to

629
00:28:54,480 --> 00:28:56,100
our presenters

630
00:28:56,100 --> 00:28:59,120
thank you

631
00:29:00,700 --> 00:29:03,809
[Music]

632
00:29:07,650 --> 00:29:10,759
[Music]

