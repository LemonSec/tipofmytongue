1
00:00:00,900 --> 00:00:01,420
something

2
00:00:01,420 --> 00:00:04,810
[Music]

3
00:00:07,680 --> 00:00:09,840
before we start let me quickly show you

4
00:00:09,840 --> 00:00:12,660
what this talk will be about so I was

5
00:00:12,660 --> 00:00:15,000
playing with chrome and now this weird

6
00:00:15,000 --> 00:00:18,240
thing is happening to my terminal where

7
00:00:18,240 --> 00:00:20,220
it prints this calculator every time I

8
00:00:20,220 --> 00:00:21,480
open it

9
00:00:21,480 --> 00:00:23,640
and

10
00:00:23,640 --> 00:00:25,740
you might guess from the title of this

11
00:00:25,740 --> 00:00:27,240
talk that this is somehow a chrome

12
00:00:27,240 --> 00:00:29,420
sandbox Escape in particular in Mojo

13
00:00:29,420 --> 00:00:32,159
which we will get to in a second

14
00:00:32,159 --> 00:00:34,920
particularly this is a logic bug there

15
00:00:34,920 --> 00:00:37,320
was no memory crafted in the whole of in

16
00:00:37,320 --> 00:00:38,880
the making of this presentation which

17
00:00:38,880 --> 00:00:40,620
means if you were hoping for some new

18
00:00:40,620 --> 00:00:42,899
elite team spraying techniques now is

19
00:00:42,899 --> 00:00:46,440
your last chance to to change the rooms

20
00:00:46,440 --> 00:00:47,879
um I actually have three bucks for you

21
00:00:47,879 --> 00:00:49,500
three logic bucks the first one will be

22
00:00:49,500 --> 00:00:50,940
like a nice introduction how module

23
00:00:50,940 --> 00:00:53,700
works and hopefully we'll explain the

24
00:00:53,700 --> 00:00:55,559
the inner workings and then we will get

25
00:00:55,559 --> 00:00:57,780
to a really painful bug that was just

26
00:00:57,780 --> 00:01:01,020
was really hard to exploit um

27
00:01:01,020 --> 00:01:04,199
but before we get to that I need to I

28
00:01:04,199 --> 00:01:05,159
need to go over a little bit of

29
00:01:05,159 --> 00:01:06,600
background I promise I will make it

30
00:01:06,600 --> 00:01:07,799
quick

31
00:01:07,799 --> 00:01:08,580
um

32
00:01:08,580 --> 00:01:10,680
so this is what Chrome looks like

33
00:01:10,680 --> 00:01:13,439
you have this browser process and you

34
00:01:13,439 --> 00:01:15,780
have a bunch of other processes most of

35
00:01:15,780 --> 00:01:19,020
them some red ones the renderers the

36
00:01:19,020 --> 00:01:21,900
renderers are the ones that touch all

37
00:01:21,900 --> 00:01:23,880
the untrusted data so whenever you touch

38
00:01:23,880 --> 00:01:25,740
some HTML or you run some JavaScript

39
00:01:25,740 --> 00:01:28,259
this will all happen inside of one of

40
00:01:28,259 --> 00:01:29,820
these renderer processes

41
00:01:29,820 --> 00:01:32,640
which also means that if you have a cool

42
00:01:32,640 --> 00:01:34,380
JavaScript engine bug and get native

43
00:01:34,380 --> 00:01:36,720
code execution this is where you will

44
00:01:36,720 --> 00:01:38,880
most likely end up and this is one of

45
00:01:38,880 --> 00:01:40,500
the prerequisites for this for this talk

46
00:01:40,500 --> 00:01:41,579
since we're talking about sandbox

47
00:01:41,579 --> 00:01:44,820
escapes just assume the tech already has

48
00:01:44,820 --> 00:01:46,259
native code execution in one of these

49
00:01:46,259 --> 00:01:47,880
renderers

50
00:01:47,880 --> 00:01:50,399
and well and then you're obviously in a

51
00:01:50,399 --> 00:01:51,960
sandbox otherwise we wouldn't have to

52
00:01:51,960 --> 00:01:53,759
break out of the sandbox right

53
00:01:53,759 --> 00:01:55,979
interesting is also that the renderers

54
00:01:55,979 --> 00:01:57,420
themselves are isolated from each other

55
00:01:57,420 --> 00:02:00,119
so even if you if you run your exploits

56
00:02:00,119 --> 00:02:02,340
on evil.com you serve your expert from

57
00:02:02,340 --> 00:02:04,740
evil.com you won't be able to just read

58
00:02:04,740 --> 00:02:07,140
the cookies from google.com or something

59
00:02:07,140 --> 00:02:08,818
um because the the process isolation

60
00:02:08,818 --> 00:02:11,580
will still guarantee some some web

61
00:02:11,580 --> 00:02:14,580
security physics

62
00:02:14,580 --> 00:02:16,800
since in the sandbox you can't talk to

63
00:02:16,800 --> 00:02:18,599
stuff like you can't do raw network

64
00:02:18,599 --> 00:02:20,819
connections but as a renderer you want

65
00:02:20,819 --> 00:02:23,940
to fetch some some URLs so for that

66
00:02:23,940 --> 00:02:25,560
there's other processes they're called

67
00:02:25,560 --> 00:02:27,300
utility processes for example you see

68
00:02:27,300 --> 00:02:29,819
here the network and the GPU process and

69
00:02:29,819 --> 00:02:32,099
the network process what does what you

70
00:02:32,099 --> 00:02:33,900
think it it's supposed to fetch stuff

71
00:02:33,900 --> 00:02:35,520
from the network so as a renderer you

72
00:02:35,520 --> 00:02:37,620
can ask the network process please fetch

73
00:02:37,620 --> 00:02:41,220
food.js as a sub resource or something

74
00:02:41,220 --> 00:02:45,360
so when I'm saying you're talking to

75
00:02:45,360 --> 00:02:46,860
another process

76
00:02:46,860 --> 00:02:48,720
you need some way to communicate right

77
00:02:48,720 --> 00:02:51,239
and this is called an IPC mechanism the

78
00:02:51,239 --> 00:02:53,040
IPC mechanism in Chrome is called Mojo

79
00:02:53,040 --> 00:02:54,720
and from the title of the soft this is

80
00:02:54,720 --> 00:02:56,400
what we will talk about and this is what

81
00:02:56,400 --> 00:02:58,920
we will try to exploit

82
00:02:58,920 --> 00:03:00,840
and you you won't just talk to another

83
00:03:00,840 --> 00:03:02,640
process in the end what you want to do

84
00:03:02,640 --> 00:03:04,319
is you talk to a certain service or

85
00:03:04,319 --> 00:03:07,500
interface on this process

86
00:03:07,500 --> 00:03:09,480
in the case or in the previous example

87
00:03:09,480 --> 00:03:12,239
we want to fetch some JavaScript we will

88
00:03:12,239 --> 00:03:14,760
talk we want to load the URL so there's

89
00:03:14,760 --> 00:03:16,560
some UL loader service that we can talk

90
00:03:16,560 --> 00:03:17,640
to

91
00:03:17,640 --> 00:03:19,620
on the left side you see like stuff like

92
00:03:19,620 --> 00:03:20,760
the renderer host is something the

93
00:03:20,760 --> 00:03:22,379
renderer is supposed to but you also see

94
00:03:22,379 --> 00:03:23,700
a few things that the render is not

95
00:03:23,700 --> 00:03:25,019
supposed to talk to

96
00:03:25,019 --> 00:03:26,760
and the GPU host is pretty pretty

97
00:03:26,760 --> 00:03:28,980
obviously only intended for the GPU to

98
00:03:28,980 --> 00:03:31,319
talk to there's

99
00:03:31,319 --> 00:03:32,940
uh it's not clear from the name not

100
00:03:32,940 --> 00:03:34,680
network service and network contacts are

101
00:03:34,680 --> 00:03:37,200
also highly privileged interfaces so

102
00:03:37,200 --> 00:03:38,760
there must be some way to prevent you

103
00:03:38,760 --> 00:03:40,680
from talk like allow you to talk to some

104
00:03:40,680 --> 00:03:43,700
of them but not all of them

105
00:03:43,739 --> 00:03:45,420
in Mojo

106
00:03:45,420 --> 00:03:47,340
these interfaces are backed by something

107
00:03:47,340 --> 00:03:48,540
called a port

108
00:03:48,540 --> 00:03:51,060
the Pod like a system data structure on

109
00:03:51,060 --> 00:03:51,959
the

110
00:03:51,959 --> 00:03:54,420
in the process the port has a name the

111
00:03:54,420 --> 00:03:57,360
name is this 128-bit secret value that

112
00:03:57,360 --> 00:03:59,519
is generated randomly

113
00:03:59,519 --> 00:04:00,540
um

114
00:04:00,540 --> 00:04:03,540
the two processes always connected with

115
00:04:03,540 --> 00:04:05,459
a single message pipe depending on the

116
00:04:05,459 --> 00:04:07,620
west on Linux for example this will be a

117
00:04:07,620 --> 00:04:09,180
socket pair

118
00:04:09,180 --> 00:04:11,580
and then when you want to talk to a

119
00:04:11,580 --> 00:04:13,860
specific port for example the import of

120
00:04:13,860 --> 00:04:15,360
the air loader you will send a message

121
00:04:15,360 --> 00:04:17,899
through this single socket pair saying

122
00:04:17,899 --> 00:04:20,699
where it says some somewhere inside oh I

123
00:04:20,699 --> 00:04:22,860
want to talk to X where X is the name of

124
00:04:22,860 --> 00:04:25,919
the Year loader the processes in in Mojo

125
00:04:25,919 --> 00:04:28,199
called nodes so I might use those words

126
00:04:28,199 --> 00:04:31,320
interchangeably from now on

127
00:04:31,320 --> 00:04:34,440
the wire format looks roughly like this

128
00:04:34,440 --> 00:04:37,440
where there's two layers of messages the

129
00:04:37,440 --> 00:04:38,520
outer layer is called the Channel

130
00:04:38,520 --> 00:04:40,740
messages and this this is the node to

131
00:04:40,740 --> 00:04:43,560
node communication so you it's it's like

132
00:04:43,560 --> 00:04:45,419
a network protocol pretty much where you

133
00:04:45,419 --> 00:04:47,639
have some metadata you can exchange for

134
00:04:47,639 --> 00:04:49,800
example you see broadcast event you can

135
00:04:49,800 --> 00:04:51,840
make it broadcaster

136
00:04:51,840 --> 00:04:56,699
and then the inner layer of messages is

137
00:04:56,699 --> 00:04:58,680
used for the port to port communication

138
00:04:58,680 --> 00:05:01,020
you see here the event messages with the

139
00:05:01,020 --> 00:05:02,699
payloads in blue

140
00:05:02,699 --> 00:05:05,340
and the user message for example is the

141
00:05:05,340 --> 00:05:07,620
ones that has the actual payload so when

142
00:05:07,620 --> 00:05:09,440
you actually ask for hey please

143
00:05:09,440 --> 00:05:12,180
fetchfood.js it will be in the K user

144
00:05:12,180 --> 00:05:13,259
message type

145
00:05:13,259 --> 00:05:15,060
and then there's some other metadata

146
00:05:15,060 --> 00:05:15,900
stuff

147
00:05:15,900 --> 00:05:17,699
and you can see here all of them have

148
00:05:17,699 --> 00:05:19,560
have a port name since it's port to port

149
00:05:19,560 --> 00:05:21,120
communication they need to always

150
00:05:21,120 --> 00:05:23,039
specify which Port they

151
00:05:23,039 --> 00:05:25,199
um they go to and you might want to know

152
00:05:25,199 --> 00:05:26,940
wait don't browsers sometimes have

153
00:05:26,940 --> 00:05:28,620
information League vulnerabilities and

154
00:05:28,620 --> 00:05:30,360
you can leak these Port names

155
00:05:30,360 --> 00:05:33,000
what happens if you can leak the port

156
00:05:33,000 --> 00:05:34,800
name of some privileged interface

157
00:05:34,800 --> 00:05:37,139
how bad can it be well

158
00:05:37,139 --> 00:05:39,180
I already did this like two years ago

159
00:05:39,180 --> 00:05:40,919
where some of these actually allow you

160
00:05:40,919 --> 00:05:43,919
to break out of the sandbox so maybe we

161
00:05:43,919 --> 00:05:46,500
can try to do something similar here

162
00:05:46,500 --> 00:05:49,320
so just to summarize this is the the

163
00:05:49,320 --> 00:05:50,820
background we need

164
00:05:50,820 --> 00:05:52,740
I think the most important part is if

165
00:05:52,740 --> 00:05:55,139
you leak these Port names that's bad and

166
00:05:55,139 --> 00:05:57,419
um try not to do this or try to do this

167
00:05:57,419 --> 00:06:00,000
depending on what you try to achieve

168
00:06:00,000 --> 00:06:02,580
so let's jump into the first the first

169
00:06:02,580 --> 00:06:04,860
vulnerability

170
00:06:04,860 --> 00:06:07,320
so here you have again three three nodes

171
00:06:07,320 --> 00:06:09,240
or three processes the render the

172
00:06:09,240 --> 00:06:11,000
browser and the network

173
00:06:11,000 --> 00:06:14,039
and the renderer now wants to fetch

174
00:06:14,039 --> 00:06:15,600
food.js

175
00:06:15,600 --> 00:06:17,580
but as you can see here they don't have

176
00:06:17,580 --> 00:06:18,960
a direct connection with each other yet

177
00:06:18,960 --> 00:06:20,340
they don't have a they don't have a

178
00:06:20,340 --> 00:06:22,979
socket pair yet that they share so for

179
00:06:22,979 --> 00:06:24,660
this they need there needs to be a

180
00:06:24,660 --> 00:06:26,400
mechanism for somehow set up new

181
00:06:26,400 --> 00:06:28,500
connections right and in Mojo there's

182
00:06:28,500 --> 00:06:30,479
always this one special note the first

183
00:06:30,479 --> 00:06:32,160
node in the network and this is called

184
00:06:32,160 --> 00:06:35,220
the broker node and in in Chrome in

185
00:06:35,220 --> 00:06:37,199
particular this broadcast the browser

186
00:06:37,199 --> 00:06:39,360
process so we can

187
00:06:39,360 --> 00:06:41,280
this broker has a direct connection to

188
00:06:41,280 --> 00:06:42,840
every other node in the network like

189
00:06:42,840 --> 00:06:44,220
this is a prerequisite for everything to

190
00:06:44,220 --> 00:06:47,340
work so we can now ask the broker or the

191
00:06:47,340 --> 00:06:50,160
browser here to introduce us to the

192
00:06:50,160 --> 00:06:51,960
network network node

193
00:06:51,960 --> 00:06:54,660
how does that work just as you expect we

194
00:06:54,660 --> 00:06:55,860
send one of these Channel messages

195
00:06:55,860 --> 00:06:58,560
asking for an introduction the broker

196
00:06:58,560 --> 00:07:01,620
creates a new socket pair and then it

197
00:07:01,620 --> 00:07:03,960
sends it takes one end each and sends it

198
00:07:03,960 --> 00:07:05,460
in both directions with a message called

199
00:07:05,460 --> 00:07:07,919
introduce so it introduces the renderer

200
00:07:07,919 --> 00:07:09,900
to the network node and it introduces

201
00:07:09,900 --> 00:07:11,880
the network to the renderer

202
00:07:11,880 --> 00:07:13,979
they accept these they have a dark

203
00:07:13,979 --> 00:07:16,259
connection and now now the renderer can

204
00:07:16,259 --> 00:07:19,139
fetch through.js

205
00:07:19,139 --> 00:07:20,699
and

206
00:07:20,699 --> 00:07:24,060
there was a bug in this so assuming we

207
00:07:24,060 --> 00:07:25,800
have a second renderer and the second

208
00:07:25,800 --> 00:07:27,660
renderer we have a JavaScript bug we

209
00:07:27,660 --> 00:07:29,759
have native code execution there and we

210
00:07:29,759 --> 00:07:31,500
somehow want to mess with this protocol

211
00:07:31,500 --> 00:07:33,060
right

212
00:07:33,060 --> 00:07:36,900
what can we do well the bug was that

213
00:07:36,900 --> 00:07:39,060
this introduced message when the broker

214
00:07:39,060 --> 00:07:41,340
introduces the notes to each other there

215
00:07:41,340 --> 00:07:43,199
was a check missing that the introduced

216
00:07:43,199 --> 00:07:44,940
message is only allowed to come from the

217
00:07:44,940 --> 00:07:47,220
broker because if you don't if you don't

218
00:07:47,220 --> 00:07:49,560
check this then the this our ghost here

219
00:07:49,560 --> 00:07:51,180
can do something like this where it

220
00:07:51,180 --> 00:07:52,860
creates its own socket pair

221
00:07:52,860 --> 00:07:55,979
it sends one one side to the to the

222
00:07:55,979 --> 00:07:57,780
renderer to the other renderer like it

223
00:07:57,780 --> 00:07:59,880
could be google.com renderer saying like

224
00:07:59,880 --> 00:08:01,259
here's the network process on the other

225
00:08:01,259 --> 00:08:04,139
side but then it keeps the other end of

226
00:08:04,139 --> 00:08:05,340
the connection

227
00:08:05,340 --> 00:08:08,699
we do this in both in both directions

228
00:08:08,699 --> 00:08:10,919
and suddenly where this ghost in the

229
00:08:10,919 --> 00:08:13,680
Middle where we can intercept all the

230
00:08:13,680 --> 00:08:15,419
traffic going between the render and the

231
00:08:15,419 --> 00:08:16,919
network process and you can imagine that

232
00:08:16,919 --> 00:08:19,080
that's not great because now if if the

233
00:08:19,080 --> 00:08:21,479
renderer wants to fetch food.js we can

234
00:08:21,479 --> 00:08:23,879
just put our own xss payload in there

235
00:08:23,879 --> 00:08:25,860
and get like JavaScript execution in the

236
00:08:25,860 --> 00:08:28,440
other renderer and I wrote an exploit

237
00:08:28,440 --> 00:08:30,539
for this and it's at least a uxs that's

238
00:08:30,539 --> 00:08:32,159
it's possible that they can do more with

239
00:08:32,159 --> 00:08:36,200
this but I thought this is this was fun

240
00:08:37,080 --> 00:08:39,899
but in the real world you will actually

241
00:08:39,899 --> 00:08:42,059
end up like this where if you get code

242
00:08:42,059 --> 00:08:43,200
execution in this renderer you

243
00:08:43,200 --> 00:08:44,700
compromise the renderer the other

244
00:08:44,700 --> 00:08:46,200
renderer probably already has a

245
00:08:46,200 --> 00:08:47,700
connection to the network node right

246
00:08:47,700 --> 00:08:50,160
because it probably has to use the

247
00:08:50,160 --> 00:08:51,959
network at some point

248
00:08:51,959 --> 00:08:54,300
so does that mean our attack will not

249
00:08:54,300 --> 00:08:55,800
work because when we now try to

250
00:08:55,800 --> 00:08:57,000
introduce the other renderer to the

251
00:08:57,000 --> 00:08:59,040
network it will it already has a

252
00:08:59,040 --> 00:09:01,019
connection so it will ignore the message

253
00:09:01,019 --> 00:09:03,660
but then Mark run from part 0 had this

254
00:09:03,660 --> 00:09:05,820
idea where he's like well can't you just

255
00:09:05,820 --> 00:09:07,860
crash the network process because the

256
00:09:07,860 --> 00:09:09,420
browser is so nice and it will just

257
00:09:09,420 --> 00:09:12,000
spawn the new network process if you if

258
00:09:12,000 --> 00:09:14,040
you crash the old one it will notice and

259
00:09:14,040 --> 00:09:16,680
then respond a new process and

260
00:09:16,680 --> 00:09:18,899
it actually took me like one hour or so

261
00:09:18,899 --> 00:09:20,880
to find a no pointy reference which is

262
00:09:20,880 --> 00:09:23,040
not memory corruption I'm just crashing

263
00:09:23,040 --> 00:09:24,779
it so um

264
00:09:24,779 --> 00:09:27,959
so you trigger null pointer reference in

265
00:09:27,959 --> 00:09:30,720
the network process it will go away the

266
00:09:30,720 --> 00:09:33,420
browser notices spawns a new one you get

267
00:09:33,420 --> 00:09:34,860
the connection to it quickly before the

268
00:09:34,860 --> 00:09:36,660
other one and then you're back in the

269
00:09:36,660 --> 00:09:37,860
previous situation where now you can

270
00:09:37,860 --> 00:09:39,899
introduce them to each other and get you

271
00:09:39,899 --> 00:09:42,140
exercise

272
00:09:42,420 --> 00:09:45,000
so this was fixed with this um with this

273
00:09:45,000 --> 00:09:47,459
patch so on introduce when this

274
00:09:47,459 --> 00:09:49,980
introduced message gets received we now

275
00:09:49,980 --> 00:09:51,899
check that from node needs to be the

276
00:09:51,899 --> 00:09:54,000
broker name or in this case if from node

277
00:09:54,000 --> 00:09:55,980
is not the broken name we drop the

278
00:09:55,980 --> 00:09:57,060
connection

279
00:09:57,060 --> 00:09:59,180
that's exactly what you want to do

280
00:09:59,180 --> 00:10:01,740
but it will be super useful later we

281
00:10:01,740 --> 00:10:02,940
will actually we will actually need this

282
00:10:02,940 --> 00:10:04,860
later so keep it in mind but I've also

283
00:10:04,860 --> 00:10:06,600
show it to you again

284
00:10:06,600 --> 00:10:07,680
but

285
00:10:07,680 --> 00:10:10,140
let's go right to the next block so this

286
00:10:10,140 --> 00:10:13,080
was bug number one back number two is so

287
00:10:13,080 --> 00:10:16,680
what happens if you're in Mojo you want

288
00:10:16,680 --> 00:10:19,200
to spawn a new process

289
00:10:19,200 --> 00:10:20,880
you're not the broker node you want to

290
00:10:20,880 --> 00:10:22,680
spawn a new process and this new process

291
00:10:22,680 --> 00:10:24,480
should also get introduced into the into

292
00:10:24,480 --> 00:10:25,620
the network

293
00:10:25,620 --> 00:10:27,660
the needs to as we've seen before the

294
00:10:27,660 --> 00:10:28,980
broker needs to have a direct connection

295
00:10:28,980 --> 00:10:30,899
to every other node on the network so

296
00:10:30,899 --> 00:10:33,060
there needs to be a way to tell the

297
00:10:33,060 --> 00:10:34,200
broker about

298
00:10:34,200 --> 00:10:36,480
about new notes

299
00:10:36,480 --> 00:10:37,860
and

300
00:10:37,860 --> 00:10:39,300
well

301
00:10:39,300 --> 00:10:41,160
this is pretty straightforward the

302
00:10:41,160 --> 00:10:42,600
protocol just works as you would expect

303
00:10:42,600 --> 00:10:45,240
it to which is we just tell the broker

304
00:10:45,240 --> 00:10:47,519
hey here's a new here's a new node it's

305
00:10:47,519 --> 00:10:49,260
called add broker client I think the

306
00:10:49,260 --> 00:10:50,399
message type

307
00:10:50,399 --> 00:10:52,620
the broker now needs to create a socket

308
00:10:52,620 --> 00:10:55,980
pair this time it will keep one end

309
00:10:55,980 --> 00:10:57,899
send the other one back to the renderer

310
00:10:57,899 --> 00:11:00,420
the renderer needs to forward it

311
00:11:00,420 --> 00:11:03,540
and then once it accepts this um so now

312
00:11:03,540 --> 00:11:06,199
they have a dark connection

313
00:11:06,240 --> 00:11:08,940
so

314
00:11:08,940 --> 00:11:11,040
where could be the bug in this exchange

315
00:11:11,040 --> 00:11:12,540
that sounds like very similar to the

316
00:11:12,540 --> 00:11:14,399
previous to the previous setup right so

317
00:11:14,399 --> 00:11:16,260
maybe like maybe we can find a variant

318
00:11:16,260 --> 00:11:18,480
of the previous bug in this

319
00:11:18,480 --> 00:11:21,839
um we're back in our compromise render

320
00:11:21,839 --> 00:11:23,940
and now the the black is actually very

321
00:11:23,940 --> 00:11:25,920
similar except it's the exact opposite

322
00:11:25,920 --> 00:11:28,200
you remember before there was a check

323
00:11:28,200 --> 00:11:30,839
missing that if a if a message comes in

324
00:11:30,839 --> 00:11:32,579
they're supposed to come from the broker

325
00:11:32,579 --> 00:11:34,200
node this check was missing that's

326
00:11:34,200 --> 00:11:35,880
actually from the broken node in this

327
00:11:35,880 --> 00:11:37,440
case the check is the missing check is

328
00:11:37,440 --> 00:11:39,600
the opposite which is this message that

329
00:11:39,600 --> 00:11:41,459
goes usually to the broken node we can

330
00:11:41,459 --> 00:11:43,440
send it to other nodes so the other node

331
00:11:43,440 --> 00:11:45,120
didn't check that they if they are the

332
00:11:45,120 --> 00:11:46,320
broker when they receive this message

333
00:11:46,320 --> 00:11:48,660
which is this add broker client that we

334
00:11:48,660 --> 00:11:51,720
just saw so what if we in this scenario

335
00:11:51,720 --> 00:11:54,480
we just tell the renderer hey we just

336
00:11:54,480 --> 00:11:56,760
added a new node to the network it's

337
00:11:56,760 --> 00:11:59,100
called it's the network node

338
00:11:59,100 --> 00:12:00,959
um the network the the render actually

339
00:12:00,959 --> 00:12:02,519
was processing this message created

340
00:12:02,519 --> 00:12:04,320
socket pair keeping one end sending one

341
00:12:04,320 --> 00:12:06,060
and back and I think this looks very

342
00:12:06,060 --> 00:12:08,519
familiar to you now where we put this in

343
00:12:08,519 --> 00:12:09,720
both directions

344
00:12:09,720 --> 00:12:11,940
we again the ghost in the middle

345
00:12:11,940 --> 00:12:14,519
and we have your accesses

346
00:12:14,519 --> 00:12:16,200
so

347
00:12:16,200 --> 00:12:18,959
so far so good right like I think this

348
00:12:18,959 --> 00:12:21,480
should give you a quick overview of the

349
00:12:21,480 --> 00:12:23,279
kind of things we can do with Mojo and

350
00:12:23,279 --> 00:12:25,079
how the protocol works

351
00:12:25,079 --> 00:12:28,140
but now there was a third bug and the

352
00:12:28,140 --> 00:12:29,940
third bug was not this easy to exploit

353
00:12:29,940 --> 00:12:31,980
the third book was I think the most

354
00:12:31,980 --> 00:12:34,079
difficult exploit I've written so far in

355
00:12:34,079 --> 00:12:34,920
my life

356
00:12:34,920 --> 00:12:37,560
and we will need to use everything we've

357
00:12:37,560 --> 00:12:39,600
learned so far and a little bit more

358
00:12:39,600 --> 00:12:41,940
um to actually exploit it so it started

359
00:12:41,940 --> 00:12:43,560
out with this thought experiment where

360
00:12:43,560 --> 00:12:46,200
it's like okay we can add new notes to

361
00:12:46,200 --> 00:12:47,820
the network

362
00:12:47,820 --> 00:12:49,740
so we can tell the broker there's a new

363
00:12:49,740 --> 00:12:51,300
node and we can use an existing note

364
00:12:51,300 --> 00:12:53,040
name for example we can tell the broker

365
00:12:53,040 --> 00:12:55,860
hey here's the network node the broker

366
00:12:55,860 --> 00:12:58,320
will notice in this case of course like

367
00:12:58,320 --> 00:12:59,760
I already have a connection to the

368
00:12:59,760 --> 00:13:01,860
network node so this message is invalid

369
00:13:01,860 --> 00:13:04,680
and we'll just ignore it but as we've

370
00:13:04,680 --> 00:13:06,000
seen before we can also crash the

371
00:13:06,000 --> 00:13:08,339
network process so we crash it it goes

372
00:13:08,339 --> 00:13:11,100
away we send this message telling the

373
00:13:11,100 --> 00:13:12,959
broker hey we have a new process it's

374
00:13:12,959 --> 00:13:14,519
called the network node

375
00:13:14,519 --> 00:13:16,440
and this time the broker will accept it

376
00:13:16,440 --> 00:13:19,200
or the browser process will accept it

377
00:13:19,200 --> 00:13:20,760
which

378
00:13:20,760 --> 00:13:24,300
seems not very useful at first except

379
00:13:24,300 --> 00:13:27,060
that it actually turned out to be to be

380
00:13:27,060 --> 00:13:29,760
a very cool thing to do so we can reuse

381
00:13:29,760 --> 00:13:32,399
the names of previously existing nodes

382
00:13:32,399 --> 00:13:35,339
after they went away

383
00:13:35,339 --> 00:13:37,200
um to see why this is useful let's take

384
00:13:37,200 --> 00:13:38,820
a quick look at what the browser process

385
00:13:38,820 --> 00:13:41,639
is actually doing so

386
00:13:41,639 --> 00:13:44,700
when the network process crashes the

387
00:13:44,700 --> 00:13:46,440
socket will get close the browser note

388
00:13:46,440 --> 00:13:49,560
sees this it will then look up in some

389
00:13:49,560 --> 00:13:52,260
hashmap like the peer node it will

390
00:13:52,260 --> 00:13:54,779
delete the peer node it will see oh in a

391
00:13:54,779 --> 00:13:56,519
different map it has like all the ports

392
00:13:56,519 --> 00:13:58,500
pointing this to the sphere it will

393
00:13:58,500 --> 00:14:00,600
delete all of these parts as well

394
00:14:00,600 --> 00:14:03,180
and then this is all happening on the

395
00:14:03,180 --> 00:14:05,339
Arrow thread of the browser process

396
00:14:05,339 --> 00:14:07,440
and then it will process our message

397
00:14:07,440 --> 00:14:09,000
which says oh we are the network process

398
00:14:09,000 --> 00:14:11,940
now and allows us to reuse the name but

399
00:14:11,940 --> 00:14:14,220
all the ports are gone so it seems kind

400
00:14:14,220 --> 00:14:17,279
of useless except that Chrome is not

401
00:14:17,279 --> 00:14:19,320
just a multi-process browser it's also

402
00:14:19,320 --> 00:14:21,420
heavily multi-threaded so what can

403
00:14:21,420 --> 00:14:23,579
happen at the same time is that the

404
00:14:23,579 --> 00:14:25,260
second thread tries to send the message

405
00:14:25,260 --> 00:14:27,540
to the poor one of the ports on the

406
00:14:27,540 --> 00:14:30,120
network network process

407
00:14:30,120 --> 00:14:33,000
and what happens there would be like it

408
00:14:33,000 --> 00:14:35,459
takes this port structure from this hash

409
00:14:35,459 --> 00:14:37,740
map it will lock it and then read out

410
00:14:37,740 --> 00:14:39,839
the node name and this can happen before

411
00:14:39,839 --> 00:14:42,540
we destroy the port right

412
00:14:42,540 --> 00:14:44,760
and then the browser process the the i o

413
00:14:44,760 --> 00:14:46,560
thread continues destroying the port

414
00:14:46,560 --> 00:14:48,899
allowing us to reuse the note name and

415
00:14:48,899 --> 00:14:51,360
if we now go back to thread 2 and thread

416
00:14:51,360 --> 00:14:52,920
2 now tries to send the message to the

417
00:14:52,920 --> 00:14:55,019
node name it just read it will go to the

418
00:14:55,019 --> 00:14:56,579
wrong node it will go to us instead of

419
00:14:56,579 --> 00:14:58,920
the of the now non-existing node anymore

420
00:14:58,920 --> 00:15:00,839
which means we can leak the message

421
00:15:00,839 --> 00:15:04,860
content of any nodes that that has any

422
00:15:04,860 --> 00:15:07,380
any messages that are sent this way

423
00:15:07,380 --> 00:15:10,139
which is kind of lame and

424
00:15:10,139 --> 00:15:12,839
um well the race looks very impossible

425
00:15:12,839 --> 00:15:16,260
to win so let's try better

426
00:15:16,260 --> 00:15:18,360
and now this is where this patch from

427
00:15:18,360 --> 00:15:20,519
from previously comes into play

428
00:15:20,519 --> 00:15:23,040
as you remember if this introduced

429
00:15:23,040 --> 00:15:24,540
message comes in and it's not from the

430
00:15:24,540 --> 00:15:26,880
broker we drop the connection

431
00:15:26,880 --> 00:15:28,980
so what can we do this so what happens

432
00:15:28,980 --> 00:15:31,320
if we as this compromise renderer we ask

433
00:15:31,320 --> 00:15:34,620
the network process to introduce us to

434
00:15:34,620 --> 00:15:35,820
the broker

435
00:15:35,820 --> 00:15:38,399
like this doesn't make sense but there's

436
00:15:38,399 --> 00:15:40,139
again there was a check missing that

437
00:15:40,139 --> 00:15:42,000
this message should only be handled on

438
00:15:42,000 --> 00:15:43,680
the broker node

439
00:15:43,680 --> 00:15:44,459
um

440
00:15:44,459 --> 00:15:46,500
so the network process will actually try

441
00:15:46,500 --> 00:15:48,240
to do this so it creates a socket pair

442
00:15:48,240 --> 00:15:50,459
and then sends out the introduction one

443
00:15:50,459 --> 00:15:52,680
into us one end to the to the browser

444
00:15:52,680 --> 00:15:53,639
process

445
00:15:53,639 --> 00:15:55,680
we have native code execution we can

446
00:15:55,680 --> 00:15:57,060
patch the code we can just ignore this

447
00:15:57,060 --> 00:15:58,740
patch from before so we just ignore the

448
00:15:58,740 --> 00:16:02,220
message but the browser process now

449
00:16:02,220 --> 00:16:04,440
will trigger this code that just the the

450
00:16:04,440 --> 00:16:06,300
code from this patch

451
00:16:06,300 --> 00:16:08,940
and drop the connection

452
00:16:08,940 --> 00:16:10,440
like it will not kill the process we'll

453
00:16:10,440 --> 00:16:12,839
just drop the connection

454
00:16:12,839 --> 00:16:15,480
and now we can reuse the the node name

455
00:16:15,480 --> 00:16:17,940
so what is different from before well

456
00:16:17,940 --> 00:16:19,199
the difference is the process still

457
00:16:19,199 --> 00:16:21,300
exists we can steal the name we can

458
00:16:21,300 --> 00:16:23,100
reuse the note name of a node of a

459
00:16:23,100 --> 00:16:25,320
process that still exists

460
00:16:25,320 --> 00:16:28,680
which means if we can find a way to leak

461
00:16:28,680 --> 00:16:31,139
a port name now a port name on the

462
00:16:31,139 --> 00:16:33,120
network process we can then start

463
00:16:33,120 --> 00:16:35,160
sending messages to it and sending

464
00:16:35,160 --> 00:16:36,779
messages to this port

465
00:16:36,779 --> 00:16:38,579
we just need to find a way to leak a

466
00:16:38,579 --> 00:16:39,600
port name

467
00:16:39,600 --> 00:16:41,220
and as we've seen before some more parts

468
00:16:41,220 --> 00:16:43,199
of our privilege so this this would be

469
00:16:43,199 --> 00:16:45,620
very cool if we can do this

470
00:16:45,620 --> 00:16:48,000
to see if this actually works we need to

471
00:16:48,000 --> 00:16:49,920
take a look again what happens under the

472
00:16:49,920 --> 00:16:50,639
hood

473
00:16:50,639 --> 00:16:53,220
so as before once the socket gets closed

474
00:16:53,220 --> 00:16:55,199
the browser process will well both

475
00:16:55,199 --> 00:16:56,820
processes actually will delete the peer

476
00:16:56,820 --> 00:16:58,620
node in the peer structure it will they

477
00:16:58,620 --> 00:17:01,199
will close all the ports

478
00:17:01,199 --> 00:17:02,940
um part of this means they will run on

479
00:17:02,940 --> 00:17:04,439
error handlers

480
00:17:04,439 --> 00:17:06,059
for the ports and they are custom

481
00:17:06,059 --> 00:17:08,040
depending on what kind of of interface

482
00:17:08,040 --> 00:17:09,000
is there

483
00:17:09,000 --> 00:17:10,740
one of these interfaces called the child

484
00:17:10,740 --> 00:17:12,660
process host so you see like the child

485
00:17:12,660 --> 00:17:14,220
processors there's a server side and a

486
00:17:14,220 --> 00:17:15,780
client side the server side on the

487
00:17:15,780 --> 00:17:17,520
browser process will kill the child when

488
00:17:17,520 --> 00:17:19,679
it runs which means it will it will kill

489
00:17:19,679 --> 00:17:21,480
the network process

490
00:17:21,480 --> 00:17:23,160
in a network process

491
00:17:23,160 --> 00:17:25,859
will exit If the child process host runs

492
00:17:25,859 --> 00:17:27,720
the owner Handler

493
00:17:27,720 --> 00:17:30,419
and then after this happens we can reuse

494
00:17:30,419 --> 00:17:33,000
the note name on the left side

495
00:17:33,000 --> 00:17:34,679
which means this is not great because

496
00:17:34,679 --> 00:17:36,840
once the network process is gone we're

497
00:17:36,840 --> 00:17:39,240
back to the previous case where we don't

498
00:17:39,240 --> 00:17:40,980
have a cool exploit anymore and we just

499
00:17:40,980 --> 00:17:43,260
get this lame primitive of maybe leaking

500
00:17:43,260 --> 00:17:45,240
some message content

501
00:17:45,240 --> 00:17:46,679
um

502
00:17:46,679 --> 00:17:48,539
around this time I was listening to this

503
00:17:48,539 --> 00:17:49,799
podcast with how the flake and this

504
00:17:49,799 --> 00:17:51,960
resonated with me which is I can't let

505
00:17:51,960 --> 00:17:54,059
go of box if I find a bug that I think

506
00:17:54,059 --> 00:17:55,620
might be exploitable I spend way too

507
00:17:55,620 --> 00:17:57,000
much time to actually making it work

508
00:17:57,000 --> 00:18:00,960
this is one of the examples and looking

509
00:18:00,960 --> 00:18:02,580
long enough at it I actually had an

510
00:18:02,580 --> 00:18:05,280
epiphany epiphany which was well these

511
00:18:05,280 --> 00:18:07,860
on error handlers they are not run at

512
00:18:07,860 --> 00:18:09,960
this point as I showed you it's a little

513
00:18:09,960 --> 00:18:11,700
bit misleading the slides these are

514
00:18:11,700 --> 00:18:14,220
actually tasks on the i o thread so they

515
00:18:14,220 --> 00:18:17,220
get enqueued as tasks which means they

516
00:18:17,220 --> 00:18:19,260
don't actually have to run here but they

517
00:18:19,260 --> 00:18:22,380
can run after we reuse the note name if

518
00:18:22,380 --> 00:18:24,539
we're fast enough we can we can send our

519
00:18:24,539 --> 00:18:25,980
own message to realize the node name

520
00:18:25,980 --> 00:18:28,200
quick enough before these on error

521
00:18:28,200 --> 00:18:30,179
handles run which means now we have a

522
00:18:30,179 --> 00:18:32,580
chance right we can raise the right side

523
00:18:32,580 --> 00:18:35,160
to to reuse the note name just before

524
00:18:35,160 --> 00:18:37,260
the on-air handle runs and on the left

525
00:18:37,260 --> 00:18:40,200
side we will also this node name reviews

526
00:18:40,200 --> 00:18:42,120
will happen before the on around end is

527
00:18:42,120 --> 00:18:44,700
running free fast enough

528
00:18:44,700 --> 00:18:47,100
but even better another thing that was

529
00:18:47,100 --> 00:18:49,679
really cool was that when these are on

530
00:18:49,679 --> 00:18:51,960
error handlers run one thing they do is

531
00:18:51,960 --> 00:18:54,299
they close the port and then they send

532
00:18:54,299 --> 00:18:57,179
out the port closed event

533
00:18:57,179 --> 00:18:59,520
and this port closed event now goes to

534
00:18:59,520 --> 00:19:01,380
us because we were able to reuse if

535
00:19:01,380 --> 00:19:02,700
we're fast enough and we can reuse the

536
00:19:02,700 --> 00:19:04,380
note name this port closed event goes to

537
00:19:04,380 --> 00:19:06,120
us and part of the port closed event

538
00:19:06,120 --> 00:19:08,039
needs of course is the port name that

539
00:19:08,039 --> 00:19:10,440
was closed which means this is our this

540
00:19:10,440 --> 00:19:12,720
old leak that we wanted so this can be

541
00:19:12,720 --> 00:19:14,880
some privileged port on the network on

542
00:19:14,880 --> 00:19:16,320
the network process and the browser

543
00:19:16,320 --> 00:19:18,120
process tells us about it hey we just I

544
00:19:18,120 --> 00:19:19,919
just closed this part it tells us by

545
00:19:19,919 --> 00:19:20,940
accident

546
00:19:20,940 --> 00:19:23,700
and then at some point the support the

547
00:19:23,700 --> 00:19:25,080
one error Handler from the child process

548
00:19:25,080 --> 00:19:27,780
house will kill the child so we have we

549
00:19:27,780 --> 00:19:29,520
actually have time we have we have time

550
00:19:29,520 --> 00:19:31,380
from this from the first podcast event

551
00:19:31,380 --> 00:19:34,380
which might be privileged for to K Port

552
00:19:34,380 --> 00:19:36,600
K which can which is the child process

553
00:19:36,600 --> 00:19:38,160
host and at that point it's game over so

554
00:19:38,160 --> 00:19:39,720
we have this very tight race window

555
00:19:39,720 --> 00:19:42,000
where we leak apart and can use it

556
00:19:42,000 --> 00:19:44,760
which is great except that the number of

557
00:19:44,760 --> 00:19:47,160
total ports is something like 20 which

558
00:19:47,160 --> 00:19:49,919
means we have like the time window of

559
00:19:49,919 --> 00:19:53,160
like 10 on error handlers roughly for

560
00:19:53,160 --> 00:19:55,260
this

561
00:19:55,260 --> 00:19:57,059
um but it seems possible at least but

562
00:19:57,059 --> 00:19:59,220
the these two these two big issues right

563
00:19:59,220 --> 00:20:00,960
like there's a tight race here and then

564
00:20:00,960 --> 00:20:02,220
there's also the tight race that the

565
00:20:02,220 --> 00:20:04,380
network process tries to exit we need to

566
00:20:04,380 --> 00:20:06,360
we need to win both in order to make

567
00:20:06,360 --> 00:20:07,380
this work

568
00:20:07,380 --> 00:20:09,600
and at this point I I nearly gave up

569
00:20:09,600 --> 00:20:11,220
because I was like okay this seems

570
00:20:11,220 --> 00:20:12,660
exploitable but I will probably never

571
00:20:12,660 --> 00:20:16,080
make it reliably exploit out of this so

572
00:20:16,080 --> 00:20:18,360
um maybe just report that it's

573
00:20:18,360 --> 00:20:20,640
exploitable and just imagine the rest

574
00:20:20,640 --> 00:20:23,039
right but then I took a break and I

575
00:20:23,039 --> 00:20:24,419
watched my favorite movie which is

576
00:20:24,419 --> 00:20:25,620
called hackers

577
00:20:25,620 --> 00:20:27,720
if you if you haven't watched hackers

578
00:20:27,720 --> 00:20:30,299
you should it's the best I will spoil

579
00:20:30,299 --> 00:20:32,580
you the story though so in hackers

580
00:20:32,580 --> 00:20:34,980
there's this evil guy who steals a bunch

581
00:20:34,980 --> 00:20:36,179
of money and then he writes on

582
00:20:36,179 --> 00:20:38,940
ransomware and that will sink an oil

583
00:20:38,940 --> 00:20:40,620
tanker and he also blames it on this

584
00:20:40,620 --> 00:20:43,500
group of hackers and this group of

585
00:20:43,500 --> 00:20:45,660
hackers then tries to to prove their

586
00:20:45,660 --> 00:20:47,400
innocence and they need to hack into

587
00:20:47,400 --> 00:20:49,559
this corporate Network because in one of

588
00:20:49,559 --> 00:20:51,299
these machines there's this file that

589
00:20:51,299 --> 00:20:53,580
has some evidence of what he was doing

590
00:20:53,580 --> 00:20:55,559
the problem now is that this corporate

591
00:20:55,559 --> 00:20:57,179
network has this super powerful machine

592
00:20:57,179 --> 00:20:59,039
called the Gibson and the Gibson is

593
00:20:59,039 --> 00:21:00,900
running like an IDs that will just kill

594
00:21:00,900 --> 00:21:02,580
all the reverse cells like they have all

595
00:21:02,580 --> 00:21:04,260
these zero days to get code execution on

596
00:21:04,260 --> 00:21:07,200
in the corporate network but this this

597
00:21:07,200 --> 00:21:08,880
um Gibson will just kill the reverse

598
00:21:08,880 --> 00:21:11,100
cells very quickly and this point I was

599
00:21:11,100 --> 00:21:13,200
like wait a second this is my problem

600
00:21:13,200 --> 00:21:16,020
this is this is my story like I'm also I

601
00:21:16,020 --> 00:21:18,720
have this leak and I could use it to get

602
00:21:18,720 --> 00:21:20,580
some code execution but like this this

603
00:21:20,580 --> 00:21:23,160
broker that will all kill the kill the

604
00:21:23,160 --> 00:21:24,780
process too quickly

605
00:21:24,780 --> 00:21:26,820
so let's take a look at how they solved

606
00:21:26,820 --> 00:21:28,140
it in the movie

607
00:21:28,140 --> 00:21:30,720
so there are these two media icons that

608
00:21:30,720 --> 00:21:32,340
have a like these hackers with a TV show

609
00:21:32,340 --> 00:21:34,380
called razor blade and the hackers they

610
00:21:34,380 --> 00:21:35,940
go to them and ask them hey can you help

611
00:21:35,940 --> 00:21:37,980
us they send out the stress signal to

612
00:21:37,980 --> 00:21:39,480
the world and ask all the hackers in the

613
00:21:39,480 --> 00:21:41,280
world to unite and help them like

614
00:21:41,280 --> 00:21:43,559
everyone throws their zero days at it

615
00:21:43,559 --> 00:21:45,179
gets called decision at the same time

616
00:21:45,179 --> 00:21:46,980
and the Gibson will be overloaded and

617
00:21:46,980 --> 00:21:48,840
can't quit can't kill all of them

618
00:21:48,840 --> 00:21:50,280
quickly enough it buys them enough time

619
00:21:50,280 --> 00:21:53,400
to like leak the file and save the world

620
00:21:53,400 --> 00:21:55,860
um I was like okay hey we can do this if

621
00:21:55,860 --> 00:21:59,100
you remember back number two like I I

622
00:21:59,100 --> 00:22:00,480
can't just ask all the hackers in the

623
00:22:00,480 --> 00:22:02,760
world to to help but

624
00:22:02,760 --> 00:22:05,280
um we can fake this as as you remember

625
00:22:05,280 --> 00:22:06,900
from Buck number two there's a mechanism

626
00:22:06,900 --> 00:22:09,360
to add new nodes to the network right we

627
00:22:09,360 --> 00:22:10,919
can add new processes to the motor

628
00:22:10,919 --> 00:22:11,880
Network

629
00:22:11,880 --> 00:22:13,559
which means these don't have to be real

630
00:22:13,559 --> 00:22:15,960
we can just create our own fake Army of

631
00:22:15,960 --> 00:22:17,340
hackers

632
00:22:17,340 --> 00:22:18,900
and just connect them to the network

633
00:22:18,900 --> 00:22:20,700
process

634
00:22:20,700 --> 00:22:22,919
and now well in the movie they they send

635
00:22:22,919 --> 00:22:25,860
viruses to buy time but the the virus in

636
00:22:25,860 --> 00:22:29,039
our case is called a broadcast request

637
00:22:29,039 --> 00:22:30,419
so if we now

638
00:22:30,419 --> 00:22:32,159
like just imagine what happens so so

639
00:22:32,159 --> 00:22:34,080
there's this other this process now has

640
00:22:34,080 --> 00:22:35,880
10 000 connections like I'm using like

641
00:22:35,880 --> 00:22:38,640
10 000 fake notes always a socket pair

642
00:22:38,640 --> 00:22:40,919
connecting them to us actually and now

643
00:22:40,919 --> 00:22:42,600
we send out a broadcast request so now

644
00:22:42,600 --> 00:22:45,059
the network process needs to make 10 000

645
00:22:45,059 --> 00:22:47,220
copies of this broadcast request and

646
00:22:47,220 --> 00:22:48,600
send it out on every single file

647
00:22:48,600 --> 00:22:51,120
descriptor that it has which takes much

648
00:22:51,120 --> 00:22:52,799
longer than us just sending this request

649
00:22:52,799 --> 00:22:53,880
right

650
00:22:53,880 --> 00:22:57,360
which is perfect this works it it solves

651
00:22:57,360 --> 00:22:58,980
a problem so now the network process

652
00:22:58,980 --> 00:23:00,480
will never exit like it's just

653
00:23:00,480 --> 00:23:02,039
completely blocked dial thread is

654
00:23:02,039 --> 00:23:04,260
completely blocked but we still have

655
00:23:04,260 --> 00:23:07,200
this tight race between the league and

656
00:23:07,200 --> 00:23:09,000
the kill so the Gibson we still have the

657
00:23:09,000 --> 00:23:10,380
problem of the Gibson the Gibson is

658
00:23:10,380 --> 00:23:12,840
still finding us too fast

659
00:23:12,840 --> 00:23:13,500
um

660
00:23:13,500 --> 00:23:17,039
which was this right so Port 1 to Port

661
00:23:17,039 --> 00:23:19,320
10 like we only have 10 on-air handles

662
00:23:19,320 --> 00:23:22,500
so but then though the solution is also

663
00:23:22,500 --> 00:23:24,299
pretty straightforward why don't we just

664
00:23:24,299 --> 00:23:26,460
make this number very big instead of

665
00:23:26,460 --> 00:23:28,500
having 10 on air analysts we make a

666
00:23:28,500 --> 00:23:31,380
million on a on air and this and we can

667
00:23:31,380 --> 00:23:34,620
do this we can we can just send ports

668
00:23:34,620 --> 00:23:36,960
over to them to the broker

669
00:23:36,960 --> 00:23:38,760
and tell them they point to the network

670
00:23:38,760 --> 00:23:40,260
process

671
00:23:40,260 --> 00:23:43,500
the the browser process will accept them

672
00:23:43,500 --> 00:23:45,120
um you need to do a small trick they

673
00:23:45,120 --> 00:23:46,559
don't have a process them but it doesn't

674
00:23:46,559 --> 00:23:47,940
really matter like you can you can send

675
00:23:47,940 --> 00:23:49,740
all these like I'm using a Million Parts

676
00:23:49,740 --> 00:23:52,020
or so send them over kill the connection

677
00:23:52,020 --> 00:23:54,120
and now it needs to go to this million

678
00:23:54,120 --> 00:23:57,120
on error handlers and it it gives us

679
00:23:57,120 --> 00:23:59,700
plenty of time to

680
00:23:59,700 --> 00:24:02,520
use our you know to to use the leaked

681
00:24:02,520 --> 00:24:05,460
font name and then send it against the

682
00:24:05,460 --> 00:24:07,440
network process

683
00:24:07,440 --> 00:24:09,840
all right which means we're done right

684
00:24:09,840 --> 00:24:12,780
we solved our problems we just need to

685
00:24:12,780 --> 00:24:14,700
find a nice privileged Port name now

686
00:24:14,700 --> 00:24:18,000
that we can send messages to accept that

687
00:24:18,000 --> 00:24:20,580
how do you send a message to to the i o

688
00:24:20,580 --> 00:24:22,080
thread of the network process if we're

689
00:24:22,080 --> 00:24:24,120
also dosing the network process right

690
00:24:24,120 --> 00:24:25,559
now

691
00:24:25,559 --> 00:24:26,820
um

692
00:24:26,820 --> 00:24:30,120
uh well can we turn the Dos off and on

693
00:24:30,120 --> 00:24:31,980
again maybe

694
00:24:31,980 --> 00:24:34,320
something like this where the Dos is

695
00:24:34,320 --> 00:24:37,260
running we stop it quickly when once we

696
00:24:37,260 --> 00:24:38,460
stop it

697
00:24:38,460 --> 00:24:40,620
it will notice the the socket got closed

698
00:24:40,620 --> 00:24:42,480
it will destroy all the ports it will

699
00:24:42,480 --> 00:24:44,280
enqueue all the on air and let's

700
00:24:44,280 --> 00:24:46,620
remember their tasks on dial thread we

701
00:24:46,620 --> 00:24:48,900
start the Dos again and these on error

702
00:24:48,900 --> 00:24:50,280
tasks at the bottom will never run

703
00:24:50,280 --> 00:24:52,980
because the Dos is running again which

704
00:24:52,980 --> 00:24:54,720
means at this point we actually have

705
00:24:54,720 --> 00:24:58,020
time to inject a smooth message

706
00:24:58,020 --> 00:24:59,760
except that

707
00:24:59,760 --> 00:25:02,580
processing a message is also a two-step

708
00:25:02,580 --> 00:25:04,980
process it first needs to read the

709
00:25:04,980 --> 00:25:07,140
message which then enqueues the tasks to

710
00:25:07,140 --> 00:25:09,600
actually process the message and this

711
00:25:09,600 --> 00:25:11,880
message that we want to send is probably

712
00:25:11,880 --> 00:25:15,059
on the earth red which means we need to

713
00:25:15,059 --> 00:25:17,100
make it read our spoof message somewhere

714
00:25:17,100 --> 00:25:20,280
here during the denial service

715
00:25:20,280 --> 00:25:22,799
which turns out is possible we just need

716
00:25:22,799 --> 00:25:26,600
to add another trick

717
00:25:26,640 --> 00:25:28,020
so

718
00:25:28,020 --> 00:25:29,279
okay

719
00:25:29,279 --> 00:25:30,720
on the bottom again you have the

720
00:25:30,720 --> 00:25:32,220
compromise renderer on the top you have

721
00:25:32,220 --> 00:25:34,860
the network process and all these lines

722
00:25:34,860 --> 00:25:36,600
between them are like the socket pairs

723
00:25:36,600 --> 00:25:38,760
because you remember we created like 10

724
00:25:38,760 --> 00:25:41,039
000 for 10 000 fake nodes so we have

725
00:25:41,039 --> 00:25:42,840
like 10 000 socket pairs connecting us

726
00:25:42,840 --> 00:25:45,419
to the network process

727
00:25:45,419 --> 00:25:48,240
so the original idea was just to put

728
00:25:48,240 --> 00:25:50,880
these broadcast requests in just a bunch

729
00:25:50,880 --> 00:25:52,980
of them the the i o thread will be busy

730
00:25:52,980 --> 00:25:54,600
forever but this doesn't work because

731
00:25:54,600 --> 00:25:56,520
then we can't send our message so we

732
00:25:56,520 --> 00:25:57,779
need to have a better strategy to

733
00:25:57,779 --> 00:25:59,820
actually dos dial thread

734
00:25:59,820 --> 00:26:02,159
and then I had an idea

735
00:26:02,159 --> 00:26:04,500
which was what if we do something like

736
00:26:04,500 --> 00:26:06,600
this we instead of sending these

737
00:26:06,600 --> 00:26:09,240
broadcast requests we enqueue lots of

738
00:26:09,240 --> 00:26:11,700
small messages that do whatever right

739
00:26:11,700 --> 00:26:14,220
like they don't do anything interesting

740
00:26:14,220 --> 00:26:16,980
um it doesn't matter what they do

741
00:26:16,980 --> 00:26:19,320
under the hood what happens now is that

742
00:26:19,320 --> 00:26:21,360
there's some selects is called all these

743
00:26:21,360 --> 00:26:22,919
file descriptors it will notice oh wait

744
00:26:22,919 --> 00:26:24,419
all these file descriptors are readable

745
00:26:24,419 --> 00:26:27,179
let me in cure tasks to read from them

746
00:26:27,179 --> 00:26:29,340
right so now there's like 10 000 tasks

747
00:26:29,340 --> 00:26:30,299
to actually read from these file

748
00:26:30,299 --> 00:26:31,440
descriptors

749
00:26:31,440 --> 00:26:34,740
now we before those get handled before

750
00:26:34,740 --> 00:26:36,419
those run we add the single broadcast

751
00:26:36,419 --> 00:26:38,039
request only on the first file

752
00:26:38,039 --> 00:26:39,419
descriptor

753
00:26:39,419 --> 00:26:41,159
so now when the task to read from the

754
00:26:41,159 --> 00:26:43,620
file scripter runs what it will do is it

755
00:26:43,620 --> 00:26:45,960
will read both messages at the same time

756
00:26:45,960 --> 00:26:47,700
and then it will process the small

757
00:26:47,700 --> 00:26:49,799
message first throw it away and now it

758
00:26:49,799 --> 00:26:51,960
comes to a broadcast request part of the

759
00:26:51,960 --> 00:26:53,460
broadcast request means it will actually

760
00:26:53,460 --> 00:26:55,860
send us back 10 000 messages so we can

761
00:26:55,860 --> 00:26:57,600
actually follow the process progress of

762
00:26:57,600 --> 00:27:00,059
this broadcast request and when it's

763
00:27:00,059 --> 00:27:01,980
somewhere in the middle we just add a

764
00:27:01,980 --> 00:27:03,600
second broadcast request on the set on

765
00:27:03,600 --> 00:27:04,919
the next file descriptor which is

766
00:27:04,919 --> 00:27:06,620
already marked for reading and already

767
00:27:06,620 --> 00:27:08,580
there's already a task that we'll read

768
00:27:08,580 --> 00:27:11,279
from it next so what happens now is it

769
00:27:11,279 --> 00:27:13,559
reads from the next file descriptor

770
00:27:13,559 --> 00:27:15,360
and again processes first the small

771
00:27:15,360 --> 00:27:17,039
message and reads also our broadcast

772
00:27:17,039 --> 00:27:20,159
request and so we can we can keep this

773
00:27:20,159 --> 00:27:22,200
broadcast request go this the now

774
00:27:22,200 --> 00:27:24,840
service going and going dynamically and

775
00:27:24,840 --> 00:27:28,020
just continue adding extra broadcast

776
00:27:28,020 --> 00:27:31,440
requests while they're being processed

777
00:27:31,440 --> 00:27:34,860
so after a while the browser process

778
00:27:34,860 --> 00:27:37,080
will now after like a second or so send

779
00:27:37,080 --> 00:27:40,380
us a this leaked as this port name that

780
00:27:40,380 --> 00:27:42,299
we're interested in so maybe right now

781
00:27:42,299 --> 00:27:44,520
we got this port name so now we can

782
00:27:44,520 --> 00:27:46,860
instead of enqueuing a broadcast request

783
00:27:46,860 --> 00:27:49,380
we just enqueue a spoof message and the

784
00:27:49,380 --> 00:27:50,640
same thing will happen where it will

785
00:27:50,640 --> 00:27:52,799
read both message together

786
00:27:52,799 --> 00:27:55,260
put our enqueue our

787
00:27:55,260 --> 00:27:58,260
our spoof message for processing

788
00:27:58,260 --> 00:28:00,900
using our leak port and now all we have

789
00:28:00,900 --> 00:28:02,880
to do is stop the denial service which

790
00:28:02,880 --> 00:28:04,080
means we just

791
00:28:04,080 --> 00:28:06,000
don't encue anything anymore wait until

792
00:28:06,000 --> 00:28:08,880
all the all the messages are gone it

793
00:28:08,880 --> 00:28:10,919
will now process our smooth message and

794
00:28:10,919 --> 00:28:12,179
now we start the general service again

795
00:28:12,179 --> 00:28:13,860
which is just put a bunch of broadcast

796
00:28:13,860 --> 00:28:15,419
requests back in

797
00:28:15,419 --> 00:28:17,400
the on-air handlers will never run but

798
00:28:17,400 --> 00:28:20,340
our message will get processed and

799
00:28:20,340 --> 00:28:23,220
we succeed right like like this it now

800
00:28:23,220 --> 00:28:25,320
we can we have a way to leak the port

801
00:28:25,320 --> 00:28:27,779
name send a spoof message it the only

802
00:28:27,779 --> 00:28:29,700
thing missing is now we need to have

803
00:28:29,700 --> 00:28:31,140
some way

804
00:28:31,140 --> 00:28:33,000
like what is a privileged part right

805
00:28:33,000 --> 00:28:34,559
like now we need to choose a port we

806
00:28:34,559 --> 00:28:36,059
have like 20 ports or so that we can

807
00:28:36,059 --> 00:28:38,220
choose from uh that we can send messages

808
00:28:38,220 --> 00:28:40,140
to we just need to to choose the right

809
00:28:40,140 --> 00:28:41,580
fault

810
00:28:41,580 --> 00:28:43,679
or like the right service that is behind

811
00:28:43,679 --> 00:28:46,440
the product and then I started looking

812
00:28:46,440 --> 00:28:48,360
and I I went through the parts I dumped

813
00:28:48,360 --> 00:28:50,580
all the what they are one of them is the

814
00:28:50,580 --> 00:28:52,260
child process the child process

815
00:28:52,260 --> 00:28:54,000
interface and this one looks very

816
00:28:54,000 --> 00:28:56,279
interesting because it allows you to

817
00:28:56,279 --> 00:28:58,679
spawn new services so you can actually

818
00:28:58,679 --> 00:29:01,500
ask it to to to spawn a new service

819
00:29:01,500 --> 00:29:03,059
inside the process inside the network

820
00:29:03,059 --> 00:29:04,799
process

821
00:29:04,799 --> 00:29:07,140
and a bunch that get that get created on

822
00:29:07,140 --> 00:29:09,000
the i o thread we don't want those

823
00:29:09,000 --> 00:29:10,860
because the i o thread is under denial

824
00:29:10,860 --> 00:29:12,299
of service so we can't actually use them

825
00:29:12,299 --> 00:29:13,740
but there's also a bunch of services

826
00:29:13,740 --> 00:29:15,779
that will get started on the main thread

827
00:29:15,779 --> 00:29:18,120
so we can use any of these we can start

828
00:29:18,120 --> 00:29:19,679
any of these and there were a few more

829
00:29:19,679 --> 00:29:22,140
so like there's a storage service video

830
00:29:22,140 --> 00:29:23,279
capture

831
00:29:23,279 --> 00:29:25,080
but the first one called my eye the

832
00:29:25,080 --> 00:29:26,700
first one is kind of cool the option

833
00:29:26,700 --> 00:29:28,799
worklet service

834
00:29:28,799 --> 00:29:31,020
it doesn't sound like it will give your

835
00:29:31,020 --> 00:29:33,480
sandbox Escape at first

836
00:29:33,480 --> 00:29:36,659
unless you you notice that what what

837
00:29:36,659 --> 00:29:38,520
this actually is which is it's a

838
00:29:38,520 --> 00:29:40,620
JavaScript engine this auction worker

839
00:29:40,620 --> 00:29:42,299
service means it will spawn another

840
00:29:42,299 --> 00:29:44,039
instance of V8 like the JavaScript

841
00:29:44,039 --> 00:29:46,679
engine inside the network process so it

842
00:29:46,679 --> 00:29:48,720
will run without the sandbox and as you

843
00:29:48,720 --> 00:29:50,880
remember our prerequisite is that we

844
00:29:50,880 --> 00:29:52,620
have a compromised renderer so our

845
00:29:52,620 --> 00:29:54,539
render compromise is probably a

846
00:29:54,539 --> 00:29:57,539
JavaScript bug already right so if we

847
00:29:57,539 --> 00:29:59,580
just use the JavaScript to get codex

848
00:29:59,580 --> 00:30:01,860
used in the first place we can then use

849
00:30:01,860 --> 00:30:03,720
this JavaScript bug again to now get

850
00:30:03,720 --> 00:30:05,100
code execution in the network process

851
00:30:05,100 --> 00:30:07,320
and we're done

852
00:30:07,320 --> 00:30:09,000
except that this doesn't work because

853
00:30:09,000 --> 00:30:11,880
this child process interface is always

854
00:30:11,880 --> 00:30:14,279
deleted after the child process host the

855
00:30:14,279 --> 00:30:15,600
child process host was the one that

856
00:30:15,600 --> 00:30:18,419
kills the network process so in 100 like

857
00:30:18,419 --> 00:30:19,860
it's impossible to leak the port name

858
00:30:19,860 --> 00:30:22,260
before the while the network process is

859
00:30:22,260 --> 00:30:24,480
still alive so this didn't work

860
00:30:24,480 --> 00:30:27,360
then Sergey glazanov and Mark run from

861
00:30:27,360 --> 00:30:30,059
first zero pointed me to this which is

862
00:30:30,059 --> 00:30:33,059
HTTP auth static params

863
00:30:33,059 --> 00:30:34,380
so

864
00:30:34,380 --> 00:30:36,600
there's this other very privileged

865
00:30:36,600 --> 00:30:40,020
interface called the network service in

866
00:30:40,020 --> 00:30:42,419
in the network process if you talk to

867
00:30:42,419 --> 00:30:44,100
the network service you can create a new

868
00:30:44,100 --> 00:30:45,720
network context and with the network

869
00:30:45,720 --> 00:30:47,880
context you can create your new URL

870
00:30:47,880 --> 00:30:49,860
loader Factory which allows you to let

871
00:30:49,860 --> 00:30:52,320
create URL loaders and then make HTTP

872
00:30:52,320 --> 00:30:53,340
requests

873
00:30:53,340 --> 00:30:56,100
part of the network context

874
00:30:56,100 --> 00:30:58,860
config options you can say you have

875
00:30:58,860 --> 00:31:01,260
these HP all static powers

876
00:31:01,260 --> 00:31:03,779
and there's this GSS API Library name

877
00:31:03,779 --> 00:31:05,039
and if you read the comments it has

878
00:31:05,039 --> 00:31:07,320
something about cameras so whenever you

879
00:31:07,320 --> 00:31:09,899
make an HTTP request and it tries to to

880
00:31:09,899 --> 00:31:12,779
initiate some cable stuff that gets this

881
00:31:12,779 --> 00:31:15,779
HP auth negotiate header or something it

882
00:31:15,779 --> 00:31:19,080
will load this library from disk and

883
00:31:19,080 --> 00:31:21,960
execute whatever's inside right so if we

884
00:31:21,960 --> 00:31:24,299
create our own network context pointing

885
00:31:24,299 --> 00:31:26,159
this to a file that we control on the

886
00:31:26,159 --> 00:31:27,600
disk of the user for example in the

887
00:31:27,600 --> 00:31:30,240
downloads folder and then make a HTTP

888
00:31:30,240 --> 00:31:33,360
request that replies with this HP alt

889
00:31:33,360 --> 00:31:34,620
header

890
00:31:34,620 --> 00:31:36,059
it will load this library and we get

891
00:31:36,059 --> 00:31:38,159
code execution

892
00:31:38,159 --> 00:31:39,960
except that this also didn't work like I

893
00:31:39,960 --> 00:31:41,880
wrote this exploit I can create this

894
00:31:41,880 --> 00:31:44,100
network context I can create an

895
00:31:44,100 --> 00:31:45,480
ulo directory I can create the URL

896
00:31:45,480 --> 00:31:48,179
loader I make it load send an HTTP

897
00:31:48,179 --> 00:31:50,399
request to my web server my web server

898
00:31:50,399 --> 00:31:51,480
replies

899
00:31:51,480 --> 00:31:53,700
but then the response is never processed

900
00:31:53,700 --> 00:31:56,039
they'll never get to this to this code

901
00:31:56,039 --> 00:31:57,419
um which I think is because something

902
00:31:57,419 --> 00:31:59,100
some of this part is happening on the i

903
00:31:59,100 --> 00:32:00,779
o thread since we're dossing narrow

904
00:32:00,779 --> 00:32:02,940
thread it's also game over there might

905
00:32:02,940 --> 00:32:04,740
be some trick in there but I couldn't

906
00:32:04,740 --> 00:32:07,140
figure it out so

907
00:32:07,140 --> 00:32:08,880
but there's another config option when

908
00:32:08,880 --> 00:32:10,919
you create a network context which is

909
00:32:10,919 --> 00:32:13,500
where to store cookies you can store

910
00:32:13,500 --> 00:32:16,080
cookies on on disk which is also just a

911
00:32:16,080 --> 00:32:18,480
file path saying like oh put the cookies

912
00:32:18,480 --> 00:32:20,399
in slash temp slash fool or something

913
00:32:20,399 --> 00:32:22,919
which will create the sqlite 3 database

914
00:32:22,919 --> 00:32:24,360
file on your disk

915
00:32:24,360 --> 00:32:27,299
if you then insert the cookie in there

916
00:32:27,299 --> 00:32:29,580
it will put like it will just add it to

917
00:32:29,580 --> 00:32:31,380
the sqlite3 database file which means

918
00:32:31,380 --> 00:32:33,360
this string that you insert will end up

919
00:32:33,360 --> 00:32:35,220
somewhere in the middle of the file

920
00:32:35,220 --> 00:32:39,860
so if we can find an interpreter that

921
00:32:39,960 --> 00:32:43,020
reads the file from disk ignores a bunch

922
00:32:43,020 --> 00:32:44,940
of garbage and executes something from

923
00:32:44,940 --> 00:32:47,700
the middle then we're good then this is

924
00:32:47,700 --> 00:32:49,559
enough because this is our primitive we

925
00:32:49,559 --> 00:32:51,419
can create an arbitrary file

926
00:32:51,419 --> 00:32:53,159
with content in the middle control

927
00:32:53,159 --> 00:32:54,779
content in the middle and we just need

928
00:32:54,779 --> 00:32:56,340
to find something that will execute it

929
00:32:56,340 --> 00:32:59,399
and there's something on at least on on

930
00:32:59,399 --> 00:33:02,220
Linux and on Windows that you can use in

931
00:33:02,220 --> 00:33:04,380
particular on

932
00:33:04,380 --> 00:33:09,539
on Linux you can use your shell RC for

933
00:33:09,539 --> 00:33:11,640
example in my case I'm using my visual C

934
00:33:11,640 --> 00:33:13,260
that you might remember this from the

935
00:33:13,260 --> 00:33:14,580
beginning of the talk

936
00:33:14,580 --> 00:33:16,860
so on the top I'm running this the

937
00:33:16,860 --> 00:33:19,260
exploit which needs to spray ports and

938
00:33:19,260 --> 00:33:20,880
make create these fake node names and on

939
00:33:20,880 --> 00:33:23,640
the bottom I'm watching my Z shell RC

940
00:33:23,640 --> 00:33:26,100
file which says it's ASCII text right

941
00:33:26,100 --> 00:33:29,279
now which which it should right but then

942
00:33:29,279 --> 00:33:30,899
once the expert is finished it just

943
00:33:30,899 --> 00:33:34,140
takes a few seconds you will see that it

944
00:33:34,140 --> 00:33:37,080
actually turns into sqlite3 database and

945
00:33:37,080 --> 00:33:40,019
then my Z shell

946
00:33:40,019 --> 00:33:43,140
if it sees this file it will execute

947
00:33:43,140 --> 00:33:44,399
something from the middle and you can

948
00:33:44,399 --> 00:33:45,840
actually see here in the beginning it

949
00:33:45,840 --> 00:33:47,820
will be like what is this command with

950
00:33:47,820 --> 00:33:49,380
all these null bytes it's way too long

951
00:33:49,380 --> 00:33:51,539
and it will just skip it and continue

952
00:33:51,539 --> 00:33:54,120
and then see the new line print the

953
00:33:54,120 --> 00:33:55,980
calculator and

954
00:33:55,980 --> 00:33:58,700
um yeah

955
00:34:00,659 --> 00:34:02,640
and

956
00:34:02,640 --> 00:34:04,260
that's the whole that's the whole

957
00:34:04,260 --> 00:34:07,440
exploit like my personal takeaway from

958
00:34:07,440 --> 00:34:09,060
from this journey because this took

959
00:34:09,060 --> 00:34:11,339
quite a while to do so I need to

960
00:34:11,339 --> 00:34:14,060
tell myself it was worth doing it

961
00:34:14,060 --> 00:34:16,800
is how important this target specific

962
00:34:16,800 --> 00:34:18,899
knowledge can be both for for defense

963
00:34:18,899 --> 00:34:21,060
and for offense right from a defensive

964
00:34:21,060 --> 00:34:23,639
point of view really understanding this

965
00:34:23,639 --> 00:34:25,139
how this protocol worked allowed me to

966
00:34:25,139 --> 00:34:27,000
find bugs that you you wouldn't find

967
00:34:27,000 --> 00:34:29,099
with the fuzzer right like you you can't

968
00:34:29,099 --> 00:34:31,260
encode this error condition in a fuzzer

969
00:34:31,260 --> 00:34:32,940
I mean you could but you wouldn't know

970
00:34:32,940 --> 00:34:34,560
that you have to do it

971
00:34:34,560 --> 00:34:36,899
um but on the other hand these from the

972
00:34:36,899 --> 00:34:38,580
offense side it's also super useful

973
00:34:38,580 --> 00:34:40,199
these Primitives

974
00:34:40,199 --> 00:34:42,300
that are very Target specific can be

975
00:34:42,300 --> 00:34:44,099
super useful right like like I would

976
00:34:44,099 --> 00:34:45,239
have it would have been possible to

977
00:34:45,239 --> 00:34:46,619
exploit this third Park I would have

978
00:34:46,619 --> 00:34:48,960
given up if I hadn't known already about

979
00:34:48,960 --> 00:34:51,480
our crane can create this fake node so I

980
00:34:51,480 --> 00:34:54,000
can send over ports and so on

981
00:34:54,000 --> 00:34:56,280
but I think the actual real takeaway is

982
00:34:56,280 --> 00:34:59,520
that if you ever get stuck

983
00:34:59,520 --> 00:35:02,040
if you ever get stuck

984
00:35:02,040 --> 00:35:03,359
uh

985
00:35:03,359 --> 00:35:06,000
just take a break watch hackers and well

986
00:35:06,000 --> 00:35:07,740
hackers hackers might just have the

987
00:35:07,740 --> 00:35:11,419
answers for you thank you

988
00:35:14,880 --> 00:35:17,880
we have a few minutes for questions left

989
00:35:17,880 --> 00:35:20,579
please go to the microphone if you if

990
00:35:20,579 --> 00:35:23,240
you have a question

991
00:35:26,339 --> 00:35:29,339
you can also reach me on Twitter or in

992
00:35:29,339 --> 00:35:32,599
the Overflow room afterwards

993
00:35:36,920 --> 00:35:38,510
thank you

994
00:35:38,510 --> 00:35:43,579
[Applause]

995
00:35:46,350 --> 00:35:49,440
[Music]

