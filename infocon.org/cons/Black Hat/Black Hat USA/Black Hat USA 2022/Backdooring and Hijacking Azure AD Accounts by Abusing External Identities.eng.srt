1
00:00:01,730 --> 00:00:03,720
[Music]

2
00:00:03,720 --> 00:00:06,720
foreign

3
00:00:07,880 --> 00:00:10,320
welcome to my session back dooring and

4
00:00:10,320 --> 00:00:12,179
hijacking Azure ID accounts by abusing

5
00:00:12,179 --> 00:00:14,580
external identities I'm dirky monama and

6
00:00:14,580 --> 00:00:16,320
I'm very happy to to be here and see all

7
00:00:16,320 --> 00:00:18,060
of you in person

8
00:00:18,060 --> 00:00:20,580
um very short bit about me I'm dirkian

9
00:00:20,580 --> 00:00:22,380
I'm from the Netherlands this year I

10
00:00:22,380 --> 00:00:24,420
started my own company focusing on Azure

11
00:00:24,420 --> 00:00:26,340
ad and active directory consultancy and

12
00:00:26,340 --> 00:00:29,460
research I also like to write blogs

13
00:00:29,460 --> 00:00:32,098
about this topic and tools and if you

14
00:00:32,098 --> 00:00:34,079
want you can follow me on on Twitter at

15
00:00:34,079 --> 00:00:36,059
underscore dear Keon

16
00:00:36,059 --> 00:00:38,520
now before we dive into the details uh

17
00:00:38,520 --> 00:00:40,559
let's start with some definitions some

18
00:00:40,559 --> 00:00:42,719
important Concepts so this talk is about

19
00:00:42,719 --> 00:00:45,360
Azure active directory not related to

20
00:00:45,360 --> 00:00:47,820
on-prem active directory and Azure ID is

21
00:00:47,820 --> 00:00:49,920
really the central identity platform for

22
00:00:49,920 --> 00:00:52,620
everything in Azure be it Microsoft 365

23
00:00:52,620 --> 00:00:54,780
as your resource manager or any

24
00:00:54,780 --> 00:00:56,760
third-party SAS servers you would like

25
00:00:56,760 --> 00:00:58,739
to connect to it and use it as your

26
00:00:58,739 --> 00:01:00,480
authentication so we're not talking

27
00:01:00,480 --> 00:01:03,359
about VMS or networks here we're really

28
00:01:03,359 --> 00:01:05,159
talking about the identity parts of

29
00:01:05,159 --> 00:01:06,119
azure

30
00:01:06,119 --> 00:01:08,580
and if you're looking at Azure

31
00:01:08,580 --> 00:01:11,400
um one of the important things to uh in

32
00:01:11,400 --> 00:01:13,500
security perspective is a tenant so a

33
00:01:13,500 --> 00:01:15,420
tenant is like a separate instance of

34
00:01:15,420 --> 00:01:18,240
azure ID for one organization

35
00:01:18,240 --> 00:01:19,920
um most organizations will have one

36
00:01:19,920 --> 00:01:21,840
primary tenant for example linked to

37
00:01:21,840 --> 00:01:24,360
their Microsoft 365 Services they may

38
00:01:24,360 --> 00:01:26,400
have multiple tenants but it's an

39
00:01:26,400 --> 00:01:28,799
important security boundary in Azure ad

40
00:01:28,799 --> 00:01:30,600
so you're not supposed to be able to

41
00:01:30,600 --> 00:01:32,100
access data in a different tenant

42
00:01:32,100 --> 00:01:35,159
because that doesn't belong to you now

43
00:01:35,159 --> 00:01:36,720
if we're talking about tenants we're

44
00:01:36,720 --> 00:01:39,000
also talking about collaboration here

45
00:01:39,000 --> 00:01:41,100
and in that sense there's also external

46
00:01:41,100 --> 00:01:43,560
identities so an external identity is

47
00:01:43,560 --> 00:01:45,960
really easy it's any identity that's not

48
00:01:45,960 --> 00:01:49,020
managed in your tenants so it can be an

49
00:01:49,020 --> 00:01:50,820
identity that's native to another tenant

50
00:01:50,820 --> 00:01:53,579
or even a different identity provider so

51
00:01:53,579 --> 00:01:55,740
it could be a personal Microsoft account

52
00:01:55,740 --> 00:01:58,500
a Google account or even just like a

53
00:01:58,500 --> 00:02:00,119
virtual account based on only an email

54
00:02:00,119 --> 00:02:02,340
address as we'll see later

55
00:02:02,340 --> 00:02:03,840
Chinese talk

56
00:02:03,840 --> 00:02:05,280
um we'll be talking about external

57
00:02:05,280 --> 00:02:07,079
collaboration so collaboration between

58
00:02:07,079 --> 00:02:08,340
two tenants

59
00:02:08,340 --> 00:02:10,860
and I've set up some well some blocks

60
00:02:10,860 --> 00:02:13,020
over here so usually we'll be talking

61
00:02:13,020 --> 00:02:15,599
about tenant a and tenant B and the

62
00:02:15,599 --> 00:02:18,480
Tenant on the left is the tenant a and

63
00:02:18,480 --> 00:02:20,819
that's kind of the the primary tenant

64
00:02:20,819 --> 00:02:22,500
that we're looking at so that's the

65
00:02:22,500 --> 00:02:24,360
tenant of the organization that we're

66
00:02:24,360 --> 00:02:26,760
either attacking or defending and tenant

67
00:02:26,760 --> 00:02:29,520
B may be an external party or a Tracker

68
00:02:29,520 --> 00:02:31,260
control tenant in the case that we're

69
00:02:31,260 --> 00:02:33,300
exploiting something

70
00:02:33,300 --> 00:02:35,700
so in terms of external collaboration

71
00:02:35,700 --> 00:02:39,120
there's a tenant there's the home tenant

72
00:02:39,120 --> 00:02:42,060
of the order organization and that

73
00:02:42,060 --> 00:02:44,220
account we want to give access to our

74
00:02:44,220 --> 00:02:47,040
tenant so in tenant a so to talk in

75
00:02:47,040 --> 00:02:49,920
terms of the other organization the user

76
00:02:49,920 --> 00:02:52,140
there is called the home tenants and the

77
00:02:52,140 --> 00:02:54,480
account is in the home tenants and for

78
00:02:54,480 --> 00:02:55,620
that the perspective from the

79
00:02:55,620 --> 00:02:57,540
perspective of 10 and B tenant a is

80
00:02:57,540 --> 00:02:59,099
called the resource tenants because it's

81
00:02:59,099 --> 00:03:02,099
an external tenant now if we have an

82
00:03:02,099 --> 00:03:04,680
external account a guest account is

83
00:03:04,680 --> 00:03:06,959
created in tenant a and that's somehow

84
00:03:06,959 --> 00:03:10,200
linked to the to the account in the home

85
00:03:10,200 --> 00:03:12,360
tenant so in tenant B so there's a link

86
00:03:12,360 --> 00:03:14,280
between those two and the accounts are

87
00:03:14,280 --> 00:03:16,860
are interconnected and we'll look at how

88
00:03:16,860 --> 00:03:18,959
that works a bit later on

89
00:03:18,959 --> 00:03:21,780
so in this setup I have two tenants the

90
00:03:21,780 --> 00:03:23,480
primary tenants the tenant a is the

91
00:03:23,480 --> 00:03:25,560
image.cloud which is where you usually

92
00:03:25,560 --> 00:03:27,840
do my research and for this I also set

93
00:03:27,840 --> 00:03:30,239
up a secondary tenant called cross

94
00:03:30,239 --> 00:03:33,239
tenant Dev and in this scenario we're

95
00:03:33,239 --> 00:03:35,280
all looking at default settings so

96
00:03:35,280 --> 00:03:37,920
there's no uh specific weakening of

97
00:03:37,920 --> 00:03:39,599
specific settings that would make

98
00:03:39,599 --> 00:03:41,700
certain attacks possible it is all

99
00:03:41,700 --> 00:03:43,860
possible by default and we're also not

100
00:03:43,860 --> 00:03:47,340
using any specific B2B trust that would

101
00:03:47,340 --> 00:03:49,260
Grant more privileges to a certain

102
00:03:49,260 --> 00:03:50,940
tenant

103
00:03:50,940 --> 00:03:53,580
so let's start having a look at how the

104
00:03:53,580 --> 00:03:55,980
invite flow looks from a GUI perspective

105
00:03:55,980 --> 00:03:59,159
so if we're in our tenant in the I'm in

106
00:03:59,159 --> 00:04:01,080
your Cloud tenant we can add a new user

107
00:04:01,080 --> 00:04:03,360
and say hey this is an external user and

108
00:04:03,360 --> 00:04:05,340
we want to invite them to our tenants so

109
00:04:05,340 --> 00:04:08,159
I send this invite to the invite me

110
00:04:08,159 --> 00:04:09,420
email address

111
00:04:09,420 --> 00:04:11,640
and that user will get an email so the

112
00:04:11,640 --> 00:04:13,980
email will contain an invite acceptance

113
00:04:13,980 --> 00:04:16,079
link and if they click on it they'll be

114
00:04:16,079 --> 00:04:18,238
prompted written with an acceptance

115
00:04:18,238 --> 00:04:21,060
screen and if they click accept then an

116
00:04:21,060 --> 00:04:23,040
account is created in the I'm in your

117
00:04:23,040 --> 00:04:25,440
Cloud tenant and they're signed in with

118
00:04:25,440 --> 00:04:27,720
their accounts but in a different tenant

119
00:04:27,720 --> 00:04:31,560
so at this point the invite me user it

120
00:04:31,560 --> 00:04:33,540
still exists in the cross tenant depth

121
00:04:33,540 --> 00:04:35,520
but it's accessing resources in the I'm

122
00:04:35,520 --> 00:04:37,800
in your Cloud tenant and if they look at

123
00:04:37,800 --> 00:04:39,540
the organization's view

124
00:04:39,540 --> 00:04:41,520
um you see that the account exists in

125
00:04:41,520 --> 00:04:43,020
two possible tenants and you can switch

126
00:04:43,020 --> 00:04:45,540
kind of switch between them

127
00:04:45,540 --> 00:04:47,340
so that's how it looks to an end user

128
00:04:47,340 --> 00:04:48,240
now

129
00:04:48,240 --> 00:04:49,800
um we want to start looking at how this

130
00:04:49,800 --> 00:04:51,419
looks under the hoods and we have

131
00:04:51,419 --> 00:04:53,040
several options for that

132
00:04:53,040 --> 00:04:55,740
so if we look at Azure ad kind of low

133
00:04:55,740 --> 00:04:57,780
level stuff or other information there's

134
00:04:57,780 --> 00:05:00,660
various options so the first one and the

135
00:05:00,660 --> 00:05:02,220
officially supported one is the

136
00:05:02,220 --> 00:05:04,800
Microsoft graph which is the official

137
00:05:04,800 --> 00:05:07,919
API for everything in Microsoft 365 and

138
00:05:07,919 --> 00:05:10,380
also including Azure ID there's a lot of

139
00:05:10,380 --> 00:05:12,060
things you can query from there but it

140
00:05:12,060 --> 00:05:13,560
doesn't always contain all the

141
00:05:13,560 --> 00:05:15,000
information

142
00:05:15,000 --> 00:05:17,400
um so there's also an API that's near

143
00:05:17,400 --> 00:05:20,759
more closer to the actual representation

144
00:05:20,759 --> 00:05:22,500
of azure ID and that's the Azure ID

145
00:05:22,500 --> 00:05:25,500
graph so it's kind of lower level it

146
00:05:25,500 --> 00:05:27,120
only covers Azure ad so no other

147
00:05:27,120 --> 00:05:29,340
services and it's sometimes also

148
00:05:29,340 --> 00:05:31,860
possible to use an official internal

149
00:05:31,860 --> 00:05:33,539
versions to gather a bit more

150
00:05:33,539 --> 00:05:36,120
information than is supported in

151
00:05:36,120 --> 00:05:38,400
production environments so this one is

152
00:05:38,400 --> 00:05:40,860
deprecated but it's as it's more

153
00:05:40,860 --> 00:05:43,259
interesting for us as researchers I

154
00:05:43,259 --> 00:05:45,240
usually prefer to use the Azure ID graph

155
00:05:45,240 --> 00:05:47,280
lastly there's of course also the portal

156
00:05:47,280 --> 00:05:49,740
in which we're also doing various demos

157
00:05:49,740 --> 00:05:51,960
and this may use the Microsoft graph or

158
00:05:51,960 --> 00:05:53,820
the Azure ad graph depending on which

159
00:05:53,820 --> 00:05:56,100
feature you're using

160
00:05:56,100 --> 00:05:58,440
and in the stock we'll use a mix of both

161
00:05:58,440 --> 00:05:59,940
the actual ID graph and the Microsoft

162
00:05:59,940 --> 00:06:02,699
graph and also use my tool rodrigon

163
00:06:02,699 --> 00:06:04,680
which is part of row tools and that's

164
00:06:04,680 --> 00:06:06,840
kind of a front end for the AED graph so

165
00:06:06,840 --> 00:06:08,340
it allows you to gather all the

166
00:06:08,340 --> 00:06:11,340
information offline and then view it

167
00:06:11,340 --> 00:06:13,680
from a GUI perspective

168
00:06:13,680 --> 00:06:15,840
so looking at some of the lower level

169
00:06:15,840 --> 00:06:18,300
things and I usually like to go to the

170
00:06:18,300 --> 00:06:21,539
audit log first because any action in

171
00:06:21,539 --> 00:06:23,280
Azure ad will create an audit log event

172
00:06:23,280 --> 00:06:25,380
and we can actually see what properties

173
00:06:25,380 --> 00:06:27,960
were changed so this this is the event

174
00:06:27,960 --> 00:06:30,960
for the invite Redemption so when the

175
00:06:30,960 --> 00:06:32,940
guest account the infight was redeemed

176
00:06:32,940 --> 00:06:34,740
and we see that some properties are

177
00:06:34,740 --> 00:06:35,819
updated

178
00:06:35,819 --> 00:06:38,160
and the most interesting one is probably

179
00:06:38,160 --> 00:06:41,340
the alternative security ID property so

180
00:06:41,340 --> 00:06:44,759
we see that some data was added here and

181
00:06:44,759 --> 00:06:46,740
if we look at the results from the Azure

182
00:06:46,740 --> 00:06:49,139
ID graph in row tools we also see that

183
00:06:49,139 --> 00:06:51,840
the alternative security IDs property is

184
00:06:51,840 --> 00:06:53,940
now populated and it says something

185
00:06:53,940 --> 00:06:58,020
about an identity provider a key and a

186
00:06:58,020 --> 00:07:00,539
type so there's probably here a link to

187
00:07:00,539 --> 00:07:02,520
the user account somewhere

188
00:07:02,520 --> 00:07:04,680
now I looked a bit at what that key

189
00:07:04,680 --> 00:07:07,139
could be because it's a64 encoded but

190
00:07:07,139 --> 00:07:08,100
you probably would have guessed from

191
00:07:08,100 --> 00:07:09,060
this

192
00:07:09,060 --> 00:07:12,300
um and actually if we decode that and we

193
00:07:12,300 --> 00:07:14,280
re-encode it into

194
00:07:14,280 --> 00:07:16,800
um into hex formats and we got kind of

195
00:07:16,800 --> 00:07:18,600
hexadecimal number

196
00:07:18,600 --> 00:07:21,000
and if we look at the tenants where the

197
00:07:21,000 --> 00:07:23,039
user resides that we invite it we see

198
00:07:23,039 --> 00:07:25,560
that this has the same ID so this

199
00:07:25,560 --> 00:07:28,080
property is called the netid and this is

200
00:07:28,080 --> 00:07:29,639
kind of what links the two accounts

201
00:07:29,639 --> 00:07:31,319
together so the guest account has a

202
00:07:31,319 --> 00:07:34,500
property in the alternative security IDs

203
00:07:34,500 --> 00:07:37,440
and that links back to the netid

204
00:07:37,440 --> 00:07:39,660
property of the account in the home

205
00:07:39,660 --> 00:07:41,280
tenant

206
00:07:41,280 --> 00:07:43,680
all right so this was how it looked in

207
00:07:43,680 --> 00:07:45,419
the in the GUI and what was the result

208
00:07:45,419 --> 00:07:48,120
so I wondered can we also invite people

209
00:07:48,120 --> 00:07:50,819
uh from a programmatic perspective I

210
00:07:50,819 --> 00:07:52,500
found some interesting

211
00:07:52,500 --> 00:07:54,419
um interesting documentation or

212
00:07:54,419 --> 00:07:56,639
characters on third-party projects uh

213
00:07:56,639 --> 00:07:58,199
which was from a long time ago and it

214
00:07:58,199 --> 00:08:00,120
basically says hey you can redeem

215
00:08:00,120 --> 00:08:02,520
invites uh using this tool and using

216
00:08:02,520 --> 00:08:05,639
some post requests and with Json payload

217
00:08:05,639 --> 00:08:07,319
I was like hey this sounds interesting

218
00:08:07,319 --> 00:08:10,319
especially because it's it it features

219
00:08:10,319 --> 00:08:14,039
the same same property so the outsec IDS

220
00:08:14,039 --> 00:08:15,479
which could be the alternative

221
00:08:15,479 --> 00:08:17,639
Securities property and some other

222
00:08:17,639 --> 00:08:20,639
properties such as a invite ticket which

223
00:08:20,639 --> 00:08:22,560
also seemed familiar to me

224
00:08:22,560 --> 00:08:24,360
so if we want to use this

225
00:08:24,360 --> 00:08:26,400
programmatically and we would use the

226
00:08:26,400 --> 00:08:29,759
net ID of the external user well that we

227
00:08:29,759 --> 00:08:31,979
can query so we can query that in the in

228
00:08:31,979 --> 00:08:34,020
the home tenant and we can query it

229
00:08:34,020 --> 00:08:36,779
using sad graph and we can also extract

230
00:08:36,779 --> 00:08:38,399
that from any access tokens that are

231
00:08:38,399 --> 00:08:40,020
issued to the user so if you have an

232
00:08:40,020 --> 00:08:42,479
access token for that user there will be

233
00:08:42,479 --> 00:08:45,240
a puid claim and that's to say netid

234
00:08:45,240 --> 00:08:47,339
that belongs to the account

235
00:08:47,339 --> 00:08:49,019
and we also need the infight tickets

236
00:08:49,019 --> 00:08:51,480
because that's like a kind of secret

237
00:08:51,480 --> 00:08:53,459
information that's linked to the invite

238
00:08:53,459 --> 00:08:56,760
that we can that we need but it turns

239
00:08:56,760 --> 00:08:58,320
out that we can actually just query

240
00:08:58,320 --> 00:09:01,140
these invites since it's a property of

241
00:09:01,140 --> 00:09:03,420
the user that is invited in the AED

242
00:09:03,420 --> 00:09:05,279
graph

243
00:09:05,279 --> 00:09:07,740
so then we end up with this simple post

244
00:09:07,740 --> 00:09:10,320
request we redeem the invite by the API

245
00:09:10,320 --> 00:09:13,800
and we can specify our own identity so

246
00:09:13,800 --> 00:09:16,860
the netid and also the email and using

247
00:09:16,860 --> 00:09:18,360
the invite tickets that we queried

248
00:09:18,360 --> 00:09:19,500
earlier

249
00:09:19,500 --> 00:09:22,140
now I started looking into this and I

250
00:09:22,140 --> 00:09:25,140
quickly ran into some issues so you

251
00:09:25,140 --> 00:09:27,540
would expect that you need some

252
00:09:27,540 --> 00:09:29,700
privileged role to modify accounts in

253
00:09:29,700 --> 00:09:31,740
this way but turns out that's not true

254
00:09:31,740 --> 00:09:34,560
so any user in the tenants could redeem

255
00:09:34,560 --> 00:09:37,260
an invite for any invited user which is

256
00:09:37,260 --> 00:09:39,060
a bit weird

257
00:09:39,060 --> 00:09:41,100
um also none of the information that is

258
00:09:41,100 --> 00:09:42,600
supplied in the post request is actually

259
00:09:42,600 --> 00:09:43,740
verified

260
00:09:43,740 --> 00:09:45,600
um so I could use any accepted as email

261
00:09:45,600 --> 00:09:48,420
I could pretend I'm someone working in a

262
00:09:48,420 --> 00:09:50,519
completely different organization and I

263
00:09:50,519 --> 00:09:52,260
also can link it to any external account

264
00:09:52,260 --> 00:09:54,720
in any directory because it's just based

265
00:09:54,720 --> 00:09:57,360
on that net ID parameter which is not

266
00:09:57,360 --> 00:09:59,100
checked

267
00:09:59,100 --> 00:10:01,500
and last but not least all the infight

268
00:10:01,500 --> 00:10:03,300
tickets so the secret kind of secret

269
00:10:03,300 --> 00:10:05,279
parts that's needed to redeem the invite

270
00:10:05,279 --> 00:10:07,620
can also be queried by any user in the

271
00:10:07,620 --> 00:10:09,000
tenant

272
00:10:09,000 --> 00:10:12,000
so if we have this nice request for the

273
00:10:12,000 --> 00:10:14,700
AED graph we apply a filter which says

274
00:10:14,700 --> 00:10:17,279
user State equals pending acceptance so

275
00:10:17,279 --> 00:10:18,839
those are all the users that have not

276
00:10:18,839 --> 00:10:21,240
read yet redeemed their invite and then

277
00:10:21,240 --> 00:10:23,640
we select the invite ticket from the AED

278
00:10:23,640 --> 00:10:26,880
graph so this nicely gives us the um the

279
00:10:26,880 --> 00:10:28,500
email address for the user and also the

280
00:10:28,500 --> 00:10:30,959
invite ticket that's needed to redeem

281
00:10:30,959 --> 00:10:32,519
this invite

282
00:10:32,519 --> 00:10:34,620
and we can of course also query the

283
00:10:34,620 --> 00:10:36,959
netid from the target account

284
00:10:36,959 --> 00:10:40,080
so in this case I'm querying it for the

285
00:10:40,080 --> 00:10:43,320
new low pref user in my other tenant and

286
00:10:43,320 --> 00:10:46,260
you see that the netid for that user is

287
00:10:46,260 --> 00:10:48,300
shown as output of the query

288
00:10:48,300 --> 00:10:50,459
of course we can convert this using a

289
00:10:50,459 --> 00:10:52,740
simple cyber Chef recipe back to the

290
00:10:52,740 --> 00:10:55,440
base64 representation and if we put it

291
00:10:55,440 --> 00:10:57,060
all in the post request you saw earlier

292
00:10:57,060 --> 00:10:59,160
using the invite ticket and the net ID

293
00:10:59,160 --> 00:11:02,760
we get a response and it says hey I this

294
00:11:02,760 --> 00:11:05,000
invite was accepted as guest at outside

295
00:11:05,000 --> 00:11:08,339
security.net which is not the email

296
00:11:08,339 --> 00:11:09,720
address of the legitimate account that

297
00:11:09,720 --> 00:11:11,459
we linked it to and we see the

298
00:11:11,459 --> 00:11:13,560
alternative security IDs back and it

299
00:11:13,560 --> 00:11:15,060
links to the net ID of the Rogue

300
00:11:15,060 --> 00:11:16,019
accounts

301
00:11:16,019 --> 00:11:19,140
and if you then switch to the tenant I

302
00:11:19,140 --> 00:11:21,060
hope this is a bit readable so on the

303
00:11:21,060 --> 00:11:22,800
right top you see this is the new low

304
00:11:22,800 --> 00:11:25,680
priv user Independence and on the bottom

305
00:11:25,680 --> 00:11:28,260
you say see that this is now linked to

306
00:11:28,260 --> 00:11:30,240
the guest at the outside security Delta

307
00:11:30,240 --> 00:11:33,000
now email from which we kind of stole

308
00:11:33,000 --> 00:11:34,740
the invite

309
00:11:34,740 --> 00:11:37,440
and also an interesting part is that

310
00:11:37,440 --> 00:11:39,899
there's no way to actually see this so

311
00:11:39,899 --> 00:11:41,820
if you're an Azure admin and someone

312
00:11:41,820 --> 00:11:43,860
hijacked your invites and linked it to

313
00:11:43,860 --> 00:11:46,200
some arbitrary accounts you could never

314
00:11:46,200 --> 00:11:49,019
find out because it's just been linked

315
00:11:49,019 --> 00:11:51,779
based on this binary property but you

316
00:11:51,779 --> 00:11:54,060
cannot see the net IDs in a different

317
00:11:54,060 --> 00:11:56,339
tenant and all it shows you here in the

318
00:11:56,339 --> 00:11:58,620
GUI is that that it's an external Azure

319
00:11:58,620 --> 00:11:59,579
ID

320
00:11:59,579 --> 00:12:02,160
um but not switch account is actually

321
00:12:02,160 --> 00:12:03,959
linked to

322
00:12:03,959 --> 00:12:06,480
start a short version basically every

323
00:12:06,480 --> 00:12:08,579
user in your tenants could query for

324
00:12:08,579 --> 00:12:11,640
inviting but not redeemed or just if you

325
00:12:11,640 --> 00:12:14,100
repeat that often enough just be quicker

326
00:12:14,100 --> 00:12:16,320
than the user is actually inside it and

327
00:12:16,320 --> 00:12:18,060
they could redeem the invite without any

328
00:12:18,060 --> 00:12:20,220
validation on the information that was

329
00:12:20,220 --> 00:12:23,279
provided and it was also no way for uh

330
00:12:23,279 --> 00:12:25,440
Azure ID administrators to actually find

331
00:12:25,440 --> 00:12:28,320
out which account it was linked to

332
00:12:28,320 --> 00:12:30,779
now some impact scenarios if you're not

333
00:12:30,779 --> 00:12:33,180
familiar with external accounts um

334
00:12:33,180 --> 00:12:35,700
they're they are often used for external

335
00:12:35,700 --> 00:12:37,680
suppliers for example which need some

336
00:12:37,680 --> 00:12:40,019
kind of access be it in Azure 80 itself

337
00:12:40,019 --> 00:12:42,300
or to manage Azure subscriptions or

338
00:12:42,300 --> 00:12:45,660
resources but it could also be that an

339
00:12:45,660 --> 00:12:47,160
account is invited and immediately

340
00:12:47,160 --> 00:12:49,320
granted a privileged role in Azure ID

341
00:12:49,320 --> 00:12:51,660
because there's a UI when you invite it

342
00:12:51,660 --> 00:12:53,519
it says hey which role Studios account

343
00:12:53,519 --> 00:12:55,560
get so if I invite someone from one

344
00:12:55,560 --> 00:12:57,500
supplier and I give their guest account

345
00:12:57,500 --> 00:12:59,820
Globe admin privileges for example

346
00:12:59,820 --> 00:13:01,980
someone could immediately hijack that

347
00:13:01,980 --> 00:13:04,920
invite and be Global admin in my tenant

348
00:13:04,920 --> 00:13:07,680
there's also bypasses the allow list of

349
00:13:07,680 --> 00:13:09,899
external collaboration domains because

350
00:13:09,899 --> 00:13:12,180
as we saw before the domain is not

351
00:13:12,180 --> 00:13:14,279
actually verified so you could send an

352
00:13:14,279 --> 00:13:15,720
invite to an allowed domain and then

353
00:13:15,720 --> 00:13:17,459
link it to an account in a completely

354
00:13:17,459 --> 00:13:19,320
different tenant

355
00:13:19,320 --> 00:13:22,139
and lastly of course because any user

356
00:13:22,139 --> 00:13:23,760
could do this if an account is

357
00:13:23,760 --> 00:13:26,220
compromised an attacker could hijack a

358
00:13:26,220 --> 00:13:28,800
different guest accounts and if their

359
00:13:28,800 --> 00:13:30,240
account is then discovered and

360
00:13:30,240 --> 00:13:31,680
remediated they still have access to

361
00:13:31,680 --> 00:13:33,480
their guest accounts and any resource

362
00:13:33,480 --> 00:13:36,420
that has been granted access to

363
00:13:36,420 --> 00:13:38,820
so how could you figure this out

364
00:13:38,820 --> 00:13:41,279
um so if you're an Azure admin and you

365
00:13:41,279 --> 00:13:43,500
want to know hey this has happened to me

366
00:13:43,500 --> 00:13:45,660
um there are some traces of this so if

367
00:13:45,660 --> 00:13:47,760
you look at the audit log on the left

368
00:13:47,760 --> 00:13:50,040
side we'll see the the regular invite

369
00:13:50,040 --> 00:13:52,560
flow and then the invite is Redeemed by

370
00:13:52,560 --> 00:13:55,139
an application it's called the Microsoft

371
00:13:55,139 --> 00:13:57,839
invitation acceptance portal and that's

372
00:13:57,839 --> 00:14:00,000
done as as an application using a

373
00:14:00,000 --> 00:14:01,139
certain ID

374
00:14:01,139 --> 00:14:03,360
on the right side we see the Rogue

375
00:14:03,360 --> 00:14:05,820
Redemption and in this case the invite

376
00:14:05,820 --> 00:14:08,579
is Redeemed by a user namely the user

377
00:14:08,579 --> 00:14:11,100
that authenticated and performs the the

378
00:14:11,100 --> 00:14:13,560
post request to redeem the invite file

379
00:14:13,560 --> 00:14:14,639
the API

380
00:14:14,639 --> 00:14:16,440
now you can of course try the query for

381
00:14:16,440 --> 00:14:19,320
this and I wrote a kql query that you

382
00:14:19,320 --> 00:14:21,240
can use to hunt for this in your tenants

383
00:14:21,240 --> 00:14:24,540
and if you find any results I hope you

384
00:14:24,540 --> 00:14:27,060
don't but if you find any you may have

385
00:14:27,060 --> 00:14:28,920
an invite that was stolen by someone

386
00:14:28,920 --> 00:14:30,839
else

387
00:14:30,839 --> 00:14:33,779
all right so so far we looked at the GUI

388
00:14:33,779 --> 00:14:36,540
flow and we also looked at how guest

389
00:14:36,540 --> 00:14:39,120
accounts are represented in the Azure ID

390
00:14:39,120 --> 00:14:40,139
graph

391
00:14:40,139 --> 00:14:42,560
now that leaves the Microsoft graph so

392
00:14:42,560 --> 00:14:44,940
external identities have an interesting

393
00:14:44,940 --> 00:14:47,399
property in a Microsoft graph which is

394
00:14:47,399 --> 00:14:50,160
called the identities property

395
00:14:50,160 --> 00:14:52,260
um it's a bit less there's a little bit

396
00:14:52,260 --> 00:14:53,760
less information in there so we don't

397
00:14:53,760 --> 00:14:56,279
see the binary good for example

398
00:14:56,279 --> 00:14:58,500
um but the interesting part about this

399
00:14:58,500 --> 00:15:00,300
versus the actual ad graph is that the

400
00:15:00,300 --> 00:15:02,040
Microsoft graph actually allows you to

401
00:15:02,040 --> 00:15:04,380
modify these identities property so in

402
00:15:04,380 --> 00:15:06,959
the Azure ID graph you can't modify the

403
00:15:06,959 --> 00:15:09,540
alt security identity IDs property not

404
00:15:09,540 --> 00:15:11,940
even as Global admin but in a Microsoft

405
00:15:11,940 --> 00:15:14,100
graph you can actually do this

406
00:15:14,100 --> 00:15:16,440
so I was wondering okay suppose we can

407
00:15:16,440 --> 00:15:19,079
modify a user's identities with the

408
00:15:19,079 --> 00:15:21,300
correct privileges now what could we do

409
00:15:21,300 --> 00:15:23,760
with it like what values could we input

410
00:15:23,760 --> 00:15:25,740
there that would would give us something

411
00:15:25,740 --> 00:15:26,820
interesting

412
00:15:26,820 --> 00:15:28,740
so I looked at what identity providers

413
00:15:28,740 --> 00:15:29,820
there are

414
00:15:29,820 --> 00:15:33,720
Now by default you have other Azure

415
00:15:33,720 --> 00:15:35,519
active directories which are a valid

416
00:15:35,519 --> 00:15:37,620
identity provider and you also have

417
00:15:37,620 --> 00:15:40,260
Microsoft accounts you could add like a

418
00:15:40,260 --> 00:15:42,420
Google or Facebook or another IDP here

419
00:15:42,420 --> 00:15:45,660
but that's not default but one that

420
00:15:45,660 --> 00:15:47,459
stood out for me is the email one-time

421
00:15:47,459 --> 00:15:49,680
passcode and that's kind of a new one

422
00:15:49,680 --> 00:15:52,079
and it's an interesting one because it

423
00:15:52,079 --> 00:15:54,660
allows you to send an invite to a user

424
00:15:54,660 --> 00:15:56,820
that doesn't have an Azure ID account or

425
00:15:56,820 --> 00:15:58,860
a Microsoft account and it allows to

426
00:15:58,860 --> 00:16:00,839
them to sign in solely based on their

427
00:16:00,839 --> 00:16:03,600
email address so there's no real account

428
00:16:03,600 --> 00:16:05,699
here it's kind of a weird virtual

429
00:16:05,699 --> 00:16:08,040
account that may or may not exist in

430
00:16:08,040 --> 00:16:10,160
some tenant that's managed by Microsoft

431
00:16:10,160 --> 00:16:13,380
but it's it's a very simple way of

432
00:16:13,380 --> 00:16:16,459
representing an identity

433
00:16:17,100 --> 00:16:19,260
um so here we look at the Microsoft

434
00:16:19,260 --> 00:16:22,079
graph for a user that I invited that

435
00:16:22,079 --> 00:16:25,019
doesn't have any accounts so it will

436
00:16:25,019 --> 00:16:26,880
sign in with the email we'll call the

437
00:16:26,880 --> 00:16:28,380
email OTP

438
00:16:28,380 --> 00:16:31,199
and we see that in this case the

439
00:16:31,199 --> 00:16:33,779
identity simply says sign-in type

440
00:16:33,779 --> 00:16:36,600
Federated the issuer is Mill which is

441
00:16:36,600 --> 00:16:39,180
the issuer type for email OTP and the

442
00:16:39,180 --> 00:16:41,279
issuer assigned ID is simply the email

443
00:16:41,279 --> 00:16:42,480
address

444
00:16:42,480 --> 00:16:44,880
if we look at the Azure ID graph we see

445
00:16:44,880 --> 00:16:47,160
something very similar identity provider

446
00:16:47,160 --> 00:16:49,440
is Mill and the key simply is the email

447
00:16:49,440 --> 00:16:52,560
address but then base64 encoded

448
00:16:52,560 --> 00:16:55,139
now I was looking at okay who can modify

449
00:16:55,139 --> 00:16:56,880
these identities attributes because if

450
00:16:56,880 --> 00:16:58,500
we can modify this we may be able to

451
00:16:58,500 --> 00:17:00,779
link accounts to some other external

452
00:17:00,779 --> 00:17:01,980
identity

453
00:17:01,980 --> 00:17:04,319
so it turns out of course Globe admins

454
00:17:04,319 --> 00:17:06,780
can do this user administrators can do

455
00:17:06,780 --> 00:17:08,640
this and apps with the correct

456
00:17:08,640 --> 00:17:10,740
privileges can do it and but the

457
00:17:10,740 --> 00:17:13,140
surprising one is that users can modify

458
00:17:13,140 --> 00:17:14,760
their own identities

459
00:17:14,760 --> 00:17:16,919
and I know what is needed I have a

460
00:17:16,919 --> 00:17:20,160
feeling it's for some b2c scenarios but

461
00:17:20,160 --> 00:17:21,660
I figured this out because I was looking

462
00:17:21,660 --> 00:17:23,599
at the Azure 80 user's role definition

463
00:17:23,599 --> 00:17:26,520
and if you look at this it has all the

464
00:17:26,520 --> 00:17:29,040
things that the user can do based on the

465
00:17:29,040 --> 00:17:31,860
condition that the resource itself and

466
00:17:31,860 --> 00:17:33,900
here it says well it can update the

467
00:17:33,900 --> 00:17:35,760
identities property but only for their

468
00:17:35,760 --> 00:17:37,140
own accounts

469
00:17:37,140 --> 00:17:38,640
so let's give some interesting attack

470
00:17:38,640 --> 00:17:42,539
scenarios so if we have temporary access

471
00:17:42,539 --> 00:17:45,120
to an account or we have a scope limited

472
00:17:45,120 --> 00:17:47,580
access token with the correct delegated

473
00:17:47,580 --> 00:17:49,500
permissions we could backdoor these

474
00:17:49,500 --> 00:17:51,000
accounts by modifying the identities

475
00:17:51,000 --> 00:17:52,799
parameter and just link it to some

476
00:17:52,799 --> 00:17:55,020
external accounts that we control on as

477
00:17:55,020 --> 00:17:56,520
an attacker

478
00:17:56,520 --> 00:17:59,280
some of these scenarios would be if you

479
00:17:59,280 --> 00:18:01,140
have temporary account access for

480
00:18:01,140 --> 00:18:03,179
example you have a malware attack and

481
00:18:03,179 --> 00:18:05,100
yours temporary in someone's laptop you

482
00:18:05,100 --> 00:18:06,360
could link the account to your own

483
00:18:06,360 --> 00:18:07,140
account

484
00:18:07,140 --> 00:18:09,900
another scenario is if you for example

485
00:18:09,900 --> 00:18:12,120
use device code fishing you'll get some

486
00:18:12,120 --> 00:18:14,940
refresh and access tokens but you can't

487
00:18:14,940 --> 00:18:16,799
just do anything with the accounts but

488
00:18:16,799 --> 00:18:19,200
you could convert that by updating the

489
00:18:19,200 --> 00:18:21,120
identity's property

490
00:18:21,120 --> 00:18:24,120
lastly if you somehow take over an

491
00:18:24,120 --> 00:18:25,799
application with the correct privileges

492
00:18:25,799 --> 00:18:28,080
a user signing into you could also

493
00:18:28,080 --> 00:18:30,240
obtain these access tokens that have

494
00:18:30,240 --> 00:18:32,160
enough privileges to modify these

495
00:18:32,160 --> 00:18:33,720
attributes

496
00:18:33,720 --> 00:18:35,460
so let's look at us how this attack

497
00:18:35,460 --> 00:18:36,539
works

498
00:18:36,539 --> 00:18:40,380
so first we look at the original ones so

499
00:18:40,380 --> 00:18:42,179
we're looking at the new low profuser

500
00:18:42,179 --> 00:18:45,240
and we see that the identities are only

501
00:18:45,240 --> 00:18:46,440
the

502
00:18:46,440 --> 00:18:48,840
um the normal one so it signs in with

503
00:18:48,840 --> 00:18:50,580
the user principal name

504
00:18:50,580 --> 00:18:53,700
um and that's just native in our tenants

505
00:18:53,700 --> 00:18:56,100
so let's create

506
00:18:56,100 --> 00:18:58,500
um let's backdoor these identities so

507
00:18:58,500 --> 00:19:01,200
I've invited an OTP account

508
00:19:01,200 --> 00:19:04,799
and this one is the mill OTP in outside

509
00:19:04,799 --> 00:19:07,320
the select.def and you see that this

510
00:19:07,320 --> 00:19:09,780
account is is signed into the cross

511
00:19:09,780 --> 00:19:12,539
tenant death tenant so I invited this

512
00:19:12,539 --> 00:19:15,600
account in my attacker tenant and I'm

513
00:19:15,600 --> 00:19:17,700
going to link it to the tenant of the

514
00:19:17,700 --> 00:19:19,799
organization that we're attacking

515
00:19:19,799 --> 00:19:22,860
so I patched this using the account

516
00:19:22,860 --> 00:19:25,919
access and I say hey now my sign-in type

517
00:19:25,919 --> 00:19:28,440
is Federated from this mail address and

518
00:19:28,440 --> 00:19:30,780
the email address Ismail OTP

519
00:19:30,780 --> 00:19:33,600
if we look at the same identity again we

520
00:19:33,600 --> 00:19:36,179
see that there's now two identities and

521
00:19:36,179 --> 00:19:38,280
so first is the user principal name but

522
00:19:38,280 --> 00:19:41,220
the second identity is that email OTP

523
00:19:41,220 --> 00:19:43,140
information that we just linked to

524
00:19:43,140 --> 00:19:46,320
now if I go to that email OTP account I

525
00:19:46,320 --> 00:19:48,539
can simply switch tenants so I can say

526
00:19:48,539 --> 00:19:50,640
I'm already signed in here I'm switching

527
00:19:50,640 --> 00:19:53,220
to I'm your Cloud tenant and it says hey

528
00:19:53,220 --> 00:19:54,900
I found an identity you can use here

529
00:19:54,900 --> 00:19:58,799
which is called the mill OTP user and if

530
00:19:58,799 --> 00:20:01,380
you click on that you notice that you

531
00:20:01,380 --> 00:20:04,679
sign in as the new low pref user using

532
00:20:04,679 --> 00:20:08,280
the email address that we control so we

533
00:20:08,280 --> 00:20:10,320
just re-linked this new low breath

534
00:20:10,320 --> 00:20:12,059
account to an email address on the

535
00:20:12,059 --> 00:20:13,740
control of the attacker and we're now

536
00:20:13,740 --> 00:20:15,539
signed in into the I'm in your Cloud

537
00:20:15,539 --> 00:20:16,980
tenant

538
00:20:16,980 --> 00:20:19,020
so this does require some pre-existing

539
00:20:19,020 --> 00:20:22,740
access but it's really easy to modify

540
00:20:22,740 --> 00:20:24,179
this and Link it to an external account

541
00:20:24,179 --> 00:20:26,580
and it's also very easy to switch it

542
00:20:26,580 --> 00:20:29,520
back so we can do the same post requests

543
00:20:29,520 --> 00:20:31,320
but with just with an empty parameter

544
00:20:31,320 --> 00:20:34,140
and that will switch back the account to

545
00:20:34,140 --> 00:20:37,440
only the normal sign-in name and we can

546
00:20:37,440 --> 00:20:39,720
even use this old access token and now

547
00:20:39,720 --> 00:20:43,200
the account is completely normal again

548
00:20:43,200 --> 00:20:45,240
all right so users can do this by

549
00:20:45,240 --> 00:20:47,280
themselves but there are some more

550
00:20:47,280 --> 00:20:49,260
interesting scenarios

551
00:20:49,260 --> 00:20:51,840
so as an extra bonus

552
00:20:51,840 --> 00:20:53,580
um we get this privilege escalation

553
00:20:53,580 --> 00:20:55,980
because user administrators by

554
00:20:55,980 --> 00:20:58,380
definition cannot reset password for

555
00:20:58,380 --> 00:21:00,240
example from higher privileged accounts

556
00:21:00,240 --> 00:21:03,299
so user administrator can't reset the

557
00:21:03,299 --> 00:21:04,559
password of a global administrator

558
00:21:04,559 --> 00:21:06,059
because that would be an elevation of

559
00:21:06,059 --> 00:21:08,580
privilege but they can modify the

560
00:21:08,580 --> 00:21:10,740
identity attributes of the global admin

561
00:21:10,740 --> 00:21:12,900
or basically any other user

562
00:21:12,900 --> 00:21:14,820
and this way they could take over the

563
00:21:14,820 --> 00:21:15,720
accounts

564
00:21:15,720 --> 00:21:17,400
of a higher privileged user in the

565
00:21:17,400 --> 00:21:18,600
tenants

566
00:21:18,600 --> 00:21:20,820
there's also even an easier way to do

567
00:21:20,820 --> 00:21:22,700
this so if you're a user administrator

568
00:21:22,700 --> 00:21:24,780
like I said you cannot reset the

569
00:21:24,780 --> 00:21:27,179
password but this is very nice button

570
00:21:27,179 --> 00:21:29,520
which says convert account to B2B

571
00:21:29,520 --> 00:21:32,640
account and that you can do so you can

572
00:21:32,640 --> 00:21:34,200
even do this from the GUI you can simply

573
00:21:34,200 --> 00:21:36,720
convert a global admin to a B2B account

574
00:21:36,720 --> 00:21:38,940
using a B2B email address that you

575
00:21:38,940 --> 00:21:41,280
control and then you're the global admin

576
00:21:41,280 --> 00:21:43,200
yourself

577
00:21:43,200 --> 00:21:45,720
so just how that works

578
00:21:45,720 --> 00:21:47,039
um like I said this is completely in the

579
00:21:47,039 --> 00:21:50,100
GUI so we have this Global admin account

580
00:21:50,100 --> 00:21:52,260
we modified the email address to point

581
00:21:52,260 --> 00:21:54,960
to the Rogue at crossten and Dev

582
00:21:54,960 --> 00:21:57,840
and then we invite them to B2B so we

583
00:21:57,840 --> 00:21:59,340
convert this account to an external

584
00:21:59,340 --> 00:22:00,419
account

585
00:22:00,419 --> 00:22:02,100
and then we sign in with the external

586
00:22:02,100 --> 00:22:04,080
accounts and we see that there's only a

587
00:22:04,080 --> 00:22:06,799
global administrator

588
00:22:06,900 --> 00:22:09,419
so the short version user administrator

589
00:22:09,419 --> 00:22:12,179
can convert any account to B2B accounts

590
00:22:12,179 --> 00:22:14,820
including higher privileged accounts

591
00:22:14,820 --> 00:22:16,980
you can do this via the query or with

592
00:22:16,980 --> 00:22:18,780
two simple post requests to the

593
00:22:18,780 --> 00:22:21,480
Microsoft graph and of course if we

594
00:22:21,480 --> 00:22:22,980
combine this with what we saw earlier

595
00:22:22,980 --> 00:22:25,200
you don't even need to redeem the invite

596
00:22:25,200 --> 00:22:27,419
with the real account you could just use

597
00:22:27,419 --> 00:22:30,000
those the um the API to redeem the

598
00:22:30,000 --> 00:22:32,039
invite and Link it to any external

599
00:22:32,039 --> 00:22:33,480
account and it will be completely

600
00:22:33,480 --> 00:22:34,679
invisible

601
00:22:34,679 --> 00:22:36,480
so there's a downside to this it doesn't

602
00:22:36,480 --> 00:22:38,400
work for accounts with the mailbox

603
00:22:38,400 --> 00:22:40,620
because then Azure ID refuses to update

604
00:22:40,620 --> 00:22:42,600
the email address but then you could

605
00:22:42,600 --> 00:22:44,400
switch back to modifying the identities

606
00:22:44,400 --> 00:22:46,679
attributes and you could still link an

607
00:22:46,679 --> 00:22:49,919
account to an email OTP user

608
00:22:49,919 --> 00:22:53,700
now there's a caveat with this so if you

609
00:22:53,700 --> 00:22:55,860
convert an account or you batch their

610
00:22:55,860 --> 00:22:57,780
identities you're only changing the

611
00:22:57,780 --> 00:23:00,000
primary authentication so you could sign

612
00:23:00,000 --> 00:23:01,740
in with an email address instead of with

613
00:23:01,740 --> 00:23:04,080
the password but if there's MFA

614
00:23:04,080 --> 00:23:05,820
configured and required for the accounts

615
00:23:05,820 --> 00:23:09,299
this would still kick in so NFA would

616
00:23:09,299 --> 00:23:11,640
save the day in this case or at least

617
00:23:11,640 --> 00:23:13,620
you'd think so

618
00:23:13,620 --> 00:23:14,460
um

619
00:23:14,460 --> 00:23:16,620
because I also had a look at how guest

620
00:23:16,620 --> 00:23:21,360
tenants and NFA work so if we have this

621
00:23:21,360 --> 00:23:23,700
um if we have to set up with the victim

622
00:23:23,700 --> 00:23:26,039
account which is MFA configured an

623
00:23:26,039 --> 00:23:27,900
attacker account which is MFA configured

624
00:23:27,900 --> 00:23:31,980
then if we link those so if we hijack

625
00:23:31,980 --> 00:23:33,659
the accounts by modifying the identities

626
00:23:33,659 --> 00:23:36,539
or we convert to B2B account if we sign

627
00:23:36,539 --> 00:23:39,000
in the NFA methods we'll still be the

628
00:23:39,000 --> 00:23:40,440
ones of the victim account so the

629
00:23:40,440 --> 00:23:42,900
original one so just signing in with our

630
00:23:42,900 --> 00:23:45,059
own MFA methods in our own tenants

631
00:23:45,059 --> 00:23:49,140
wouldn't give us fa access to the to the

632
00:23:49,140 --> 00:23:50,820
victim tenants

633
00:23:50,820 --> 00:23:53,460
let's there are some observations that I

634
00:23:53,460 --> 00:23:57,000
had with MFA so of course if you perform

635
00:23:57,000 --> 00:23:59,340
MFA in a sign-in session you don't have

636
00:23:59,340 --> 00:24:01,020
to do that like with every app you sign

637
00:24:01,020 --> 00:24:02,700
in because then you would be entering

638
00:24:02,700 --> 00:24:05,100
MFA information continuously

639
00:24:05,100 --> 00:24:07,740
so this is just there is some caching of

640
00:24:07,740 --> 00:24:11,039
when you did MFA in a login session and

641
00:24:11,039 --> 00:24:13,620
it also holds for activity in tenants

642
00:24:13,620 --> 00:24:15,419
where we're guests so if I have my

643
00:24:15,419 --> 00:24:17,340
primary accounts I've signed into

644
00:24:17,340 --> 00:24:19,620
another tenant and I have my own MFA

645
00:24:19,620 --> 00:24:21,840
methods there I don't need to redo this

646
00:24:21,840 --> 00:24:24,059
whole on facing all the time

647
00:24:24,059 --> 00:24:26,700
so this suggests that the MFA

648
00:24:26,700 --> 00:24:28,620
information is cached somewhere in the

649
00:24:28,620 --> 00:24:31,260
session and it keeps dragged of which

650
00:24:31,260 --> 00:24:35,179
tenants we actually did MFA in or not

651
00:24:35,340 --> 00:24:37,260
um So based on these assumptions I tried

652
00:24:37,260 --> 00:24:39,659
something new and I'm calling this

653
00:24:39,659 --> 00:24:43,140
account rebinding because it sounds cool

654
00:24:43,140 --> 00:24:44,820
um basically we have the attacker

655
00:24:44,820 --> 00:24:47,520
account which has the own MFA methods

656
00:24:47,520 --> 00:24:48,900
and you should you should always

657
00:24:48,900 --> 00:24:50,580
remember that if we're doing cross

658
00:24:50,580 --> 00:24:53,100
tenant things it's always the source

659
00:24:53,100 --> 00:24:54,960
identity that we're looking at so in

660
00:24:54,960 --> 00:24:57,659
this case this session is from the

661
00:24:57,659 --> 00:24:59,880
attacker and it doesn't really matter

662
00:24:59,880 --> 00:25:01,320
which account that's linked to because

663
00:25:01,320 --> 00:25:04,200
it's always the attacker account which

664
00:25:04,200 --> 00:25:05,700
may be performing authentication in

665
00:25:05,700 --> 00:25:07,620
understandings but That Remains the Same

666
00:25:07,620 --> 00:25:09,659
Source identity

667
00:25:09,659 --> 00:25:13,679
so what we could do what it did is I

668
00:25:13,679 --> 00:25:15,720
first invite the attacker to the tenant

669
00:25:15,720 --> 00:25:18,539
legitimately so the attacker now has a

670
00:25:18,539 --> 00:25:20,280
guest account and with that they can

671
00:25:20,280 --> 00:25:22,559
configure their own MFA methods

672
00:25:22,559 --> 00:25:25,080
now if we delete this account so the

673
00:25:25,080 --> 00:25:27,720
guest account is gone and the attacker

674
00:25:27,720 --> 00:25:29,340
accounts still exists but it doesn't

675
00:25:29,340 --> 00:25:30,900
have access in the victim tenant anymore

676
00:25:30,900 --> 00:25:33,480
but if you keep the same sign in session

677
00:25:33,480 --> 00:25:36,000
and you link the victim account to the

678
00:25:36,000 --> 00:25:38,580
attacker account guess what happens it

679
00:25:38,580 --> 00:25:42,179
caches the MFA information so if we link

680
00:25:42,179 --> 00:25:45,419
this account the Decker could still have

681
00:25:45,419 --> 00:25:47,279
the MFA information in the sign in

682
00:25:47,279 --> 00:25:49,760
session and you can actually

683
00:25:49,760 --> 00:25:52,200
authenticate SD victim accounts and

684
00:25:52,200 --> 00:25:53,700
Azure ID will think oh you already did

685
00:25:53,700 --> 00:25:55,559
MFA but it doesn't look at which account

686
00:25:55,559 --> 00:25:57,419
you did multi-factor authentication for

687
00:25:57,419 --> 00:26:00,419
so if you have a login session you could

688
00:26:00,419 --> 00:26:02,520
simply do MFA in a completely different

689
00:26:02,520 --> 00:26:04,320
tenant

690
00:26:04,320 --> 00:26:07,020
so there's quite some things we can do

691
00:26:07,020 --> 00:26:08,940
with this using all the techniques that

692
00:26:08,940 --> 00:26:09,840
we had

693
00:26:09,840 --> 00:26:12,779
but I created a nice little video and in

694
00:26:12,779 --> 00:26:15,299
this case I'm doing an attack using a

695
00:26:15,299 --> 00:26:17,700
user administrator and there's also the

696
00:26:17,700 --> 00:26:19,500
other scenarios that I talked about but

697
00:26:19,500 --> 00:26:22,440
the nice thing about this is that all

698
00:26:22,440 --> 00:26:24,299
this this whole attack can be done only

699
00:26:24,299 --> 00:26:25,980
by clicking in the GUI so you don't need

700
00:26:25,980 --> 00:26:29,220
any any graph calls or something

701
00:26:29,220 --> 00:26:32,700
so let's go from the start so we're

702
00:26:32,700 --> 00:26:35,460
first attacking the attacker accounts

703
00:26:35,460 --> 00:26:38,279
and that's one is basically it's on the

704
00:26:38,279 --> 00:26:39,000
right

705
00:26:39,000 --> 00:26:42,960
so we invite this Rogue account and we

706
00:26:42,960 --> 00:26:45,419
created a guest account for it

707
00:26:45,419 --> 00:26:47,640
and it will get an email saying hey

708
00:26:47,640 --> 00:26:49,679
you're invited to this tenant

709
00:26:49,679 --> 00:26:51,240
so now there's a guest account in the

710
00:26:51,240 --> 00:26:53,700
image cloud and we accept this

711
00:26:53,700 --> 00:26:55,799
invitation so we're linking that guest

712
00:26:55,799 --> 00:26:58,380
account to our identity in the attacker

713
00:26:58,380 --> 00:26:59,940
tenant

714
00:26:59,940 --> 00:27:01,740
so we have to approve it it takes a

715
00:27:01,740 --> 00:27:04,260
little while to convert the account

716
00:27:04,260 --> 00:27:07,679
and then we're we have a guest account

717
00:27:07,679 --> 00:27:10,320
because MFA is required it will ask us

718
00:27:10,320 --> 00:27:12,299
to register NFA information for our

719
00:27:12,299 --> 00:27:14,820
newly created guest accounts so in this

720
00:27:14,820 --> 00:27:16,740
case using the Microsoft authenticator

721
00:27:16,740 --> 00:27:17,760
app

722
00:27:17,760 --> 00:27:20,279
and using virtual one because I want to

723
00:27:20,279 --> 00:27:21,840
use my phone all the time but basically

724
00:27:21,840 --> 00:27:23,700
we're now registering MFA information

725
00:27:23,700 --> 00:27:25,679
for this account

726
00:27:25,679 --> 00:27:28,200
all right so that's done so now we're

727
00:27:28,200 --> 00:27:31,140
signed in using our attacker account as

728
00:27:31,140 --> 00:27:34,140
a guest in the victim tenant

729
00:27:34,140 --> 00:27:37,140
and we can actually see this and now

730
00:27:37,140 --> 00:27:39,900
what we do is we can actually leave the

731
00:27:39,900 --> 00:27:42,299
the guest tenant again and that will

732
00:27:42,299 --> 00:27:44,279
delete our guest accounts so you can do

733
00:27:44,279 --> 00:27:47,220
this as a guest yourself you could just

734
00:27:47,220 --> 00:27:49,080
say leave and the guest account will be

735
00:27:49,080 --> 00:27:49,980
deleted

736
00:27:49,980 --> 00:27:52,260
but we're still signed into it so what

737
00:27:52,260 --> 00:27:54,480
we do here is now we convert our victim

738
00:27:54,480 --> 00:27:57,720
accounts to B2B accounts we're basically

739
00:27:57,720 --> 00:28:00,059
linking it to the Rogue user so I'm

740
00:28:00,059 --> 00:28:02,039
updating the email address first

741
00:28:02,039 --> 00:28:04,860
and then using the convert to beat beat

742
00:28:04,860 --> 00:28:06,960
feature and this will convert the

743
00:28:06,960 --> 00:28:09,240
account and Link it to the email address

744
00:28:09,240 --> 00:28:12,299
of the attacker this might fail

745
00:28:12,299 --> 00:28:13,679
sometimes because it's still updating in

746
00:28:13,679 --> 00:28:16,080
the back end and now it's converted and

747
00:28:16,080 --> 00:28:18,659
we'll get an email

748
00:28:18,659 --> 00:28:22,260
so now we accept the invite for the

749
00:28:22,260 --> 00:28:23,520
converted account

750
00:28:23,520 --> 00:28:25,500
we click accept again

751
00:28:25,500 --> 00:28:27,720
and it will take a while to actually

752
00:28:27,720 --> 00:28:29,940
link our accounts

753
00:28:29,940 --> 00:28:33,000
and then it signs Us in so we didn't see

754
00:28:33,000 --> 00:28:34,799
any MFA prompt

755
00:28:34,799 --> 00:28:37,140
um but we're still signed in and we're

756
00:28:37,140 --> 00:28:39,720
now the the other user that we it was a

757
00:28:39,720 --> 00:28:40,919
victim user

758
00:28:40,919 --> 00:28:43,200
and we can see this in the Azure portal

759
00:28:43,200 --> 00:28:46,020
so in this case I'm still signed in in

760
00:28:46,020 --> 00:28:48,480
the attacker tenant but you can switch

761
00:28:48,480 --> 00:28:50,640
tenants and here it still only shows the

762
00:28:50,640 --> 00:28:53,220
attacker tenant but once we refresh it

763
00:28:53,220 --> 00:28:56,039
then we'll actually see that the victim

764
00:28:56,039 --> 00:28:57,720
tenant is now also possible and we can

765
00:28:57,720 --> 00:28:59,340
just switch to there

766
00:28:59,340 --> 00:29:01,260
so now we're signed in in the victim

767
00:29:01,260 --> 00:29:02,820
tenant

768
00:29:02,820 --> 00:29:05,820
and we can go to the our account in

769
00:29:05,820 --> 00:29:07,799
Azure active directory to see that it's

770
00:29:07,799 --> 00:29:10,140
actually the same user so on the left

771
00:29:10,140 --> 00:29:13,500
you see the user ID way to do it and on

772
00:29:13,500 --> 00:29:14,700
the right you see that we're signed into

773
00:29:14,700 --> 00:29:17,400
the exact same user so we now kind of

774
00:29:17,400 --> 00:29:18,919
took over the account

775
00:29:18,919 --> 00:29:22,440
without needing to do MFA and Azure ID

776
00:29:22,440 --> 00:29:24,179
still thinks we did in the Theo

777
00:29:24,179 --> 00:29:26,520
authentication so if we go to the sign

778
00:29:26,520 --> 00:29:27,620
in logs

779
00:29:27,620 --> 00:29:31,320
we see that we authenticate it

780
00:29:31,320 --> 00:29:33,299
and the account name changed of course

781
00:29:33,299 --> 00:29:35,039
because we accepted the invite

782
00:29:35,039 --> 00:29:36,840
but you see that the requirement here

783
00:29:36,840 --> 00:29:39,779
was multi-factor authentication but you

784
00:29:39,779 --> 00:29:42,299
also see that the NFA requirement was

785
00:29:42,299 --> 00:29:44,279
already satisfied because our token

786
00:29:44,279 --> 00:29:46,919
contained the MFA claim that Azure ad

787
00:29:46,919 --> 00:29:50,039
customers when we did the Authentication

788
00:29:50,039 --> 00:29:53,580
so this way you could bypass MFA as long

789
00:29:53,580 --> 00:29:55,679
as you change the account identities and

790
00:29:55,679 --> 00:29:57,899
you can do it all just by clicking in

791
00:29:57,899 --> 00:30:00,120
the GUI and having a sign in session

792
00:30:00,120 --> 00:30:01,140
open

793
00:30:01,140 --> 00:30:04,200
now of course after we took over this

794
00:30:04,200 --> 00:30:07,200
account we signed in with MFA so we can

795
00:30:07,200 --> 00:30:09,419
add our own MFA method to the account to

796
00:30:09,419 --> 00:30:12,360
make the bypass permanent and now if

797
00:30:12,360 --> 00:30:14,039
your user administrator you can change

798
00:30:14,039 --> 00:30:16,320
the password of the account and you have

799
00:30:16,320 --> 00:30:18,559
the MFA information needed that's

800
00:30:18,559 --> 00:30:21,960
required to sign in

801
00:30:21,960 --> 00:30:23,039
so

802
00:30:23,039 --> 00:30:25,620
short version of this whole attack

803
00:30:25,620 --> 00:30:28,260
so the MFA information seemed cached in

804
00:30:28,260 --> 00:30:30,480
the sign-in session based on your

805
00:30:30,480 --> 00:30:32,399
identity in your home tenant plus the

806
00:30:32,399 --> 00:30:35,940
combination of the target tenant there

807
00:30:35,940 --> 00:30:37,620
was no link to the actual account you

808
00:30:37,620 --> 00:30:40,320
did mfa4 it only looked at a tenant

809
00:30:40,320 --> 00:30:44,100
level so if you first created a new

810
00:30:44,100 --> 00:30:46,740
account you registered your own MFA

811
00:30:46,740 --> 00:30:48,899
information and you keep signing in into

812
00:30:48,899 --> 00:30:50,940
the same session

813
00:30:50,940 --> 00:30:52,799
um you could delete the guest account by

814
00:30:52,799 --> 00:30:55,260
leaving the organization but it still

815
00:30:55,260 --> 00:30:57,179
would cash in your session that you were

816
00:30:57,179 --> 00:31:00,120
signed in using MFA in that tenant so if

817
00:31:00,120 --> 00:31:01,860
you re-link the account and you can do

818
00:31:01,860 --> 00:31:04,140
that either by converting it to a B2B

819
00:31:04,140 --> 00:31:07,020
account as we saw in the in the video or

820
00:31:07,020 --> 00:31:09,600
you can do it via email OTP by

821
00:31:09,600 --> 00:31:12,000
converting the by patching the

822
00:31:12,000 --> 00:31:13,679
identities attribute

823
00:31:13,679 --> 00:31:15,840
you can just rebind those accounts and

824
00:31:15,840 --> 00:31:18,539
you can bypass MFA and Azure ID won't

825
00:31:18,539 --> 00:31:20,159
prompt you for it anymore because you

826
00:31:20,159 --> 00:31:21,480
already did it for your adjustment

827
00:31:21,480 --> 00:31:23,779
account

828
00:31:24,000 --> 00:31:26,520
um so some attack scenarios here if you

829
00:31:26,520 --> 00:31:28,620
had limited account access such as an

830
00:31:28,620 --> 00:31:30,659
access token with the right scope you

831
00:31:30,659 --> 00:31:32,520
could convert it into full persistent

832
00:31:32,520 --> 00:31:35,880
access including MFA where it was needed

833
00:31:35,880 --> 00:31:37,559
if you only had access to the account

834
00:31:37,559 --> 00:31:40,320
password you may also be able to bypass

835
00:31:40,320 --> 00:31:44,220
NFA and conditional access if it's not

836
00:31:44,220 --> 00:31:46,980
required for all applications so let's

837
00:31:46,980 --> 00:31:48,779
not put something I see very often is

838
00:31:48,779 --> 00:31:51,559
that people require MFA for example of

839
00:31:51,559 --> 00:31:54,720
365 but you could still sign into the

840
00:31:54,720 --> 00:31:57,779
Azure ID Powershell module using only a

841
00:31:57,779 --> 00:32:00,960
password and if you then have the token

842
00:32:00,960 --> 00:32:02,820
for that you could patch the identities

843
00:32:02,820 --> 00:32:06,000
attributes bypass the MFA register MFA

844
00:32:06,000 --> 00:32:07,740
information and you could sign into any

845
00:32:07,740 --> 00:32:10,140
other application you want

846
00:32:10,140 --> 00:32:12,120
and of course as a user administrator

847
00:32:12,120 --> 00:32:13,740
account you could elevate your

848
00:32:13,740 --> 00:32:16,140
privileges to Global admin including

849
00:32:16,140 --> 00:32:18,600
bypassing their MFA and you put bypass

850
00:32:18,600 --> 00:32:20,580
MFA for any other use in the tenant as

851
00:32:20,580 --> 00:32:21,659
well

852
00:32:21,659 --> 00:32:24,120
now I hear some of you thinking I'm not

853
00:32:24,120 --> 00:32:26,640
actually using external identities no

854
00:32:26,640 --> 00:32:30,000
one can invite guests so am I safe here

855
00:32:30,000 --> 00:32:31,559
well no

856
00:32:31,559 --> 00:32:33,960
um so there's some alternatives to this

857
00:32:33,960 --> 00:32:35,940
and instead of inviting a guest account

858
00:32:35,940 --> 00:32:38,640
you could also temporarily link your own

859
00:32:38,640 --> 00:32:42,360
account to some external account first

860
00:32:42,360 --> 00:32:45,120
so let's say you have your own account

861
00:32:45,120 --> 00:32:47,399
such as user administrator you link that

862
00:32:47,399 --> 00:32:49,500
to an email OTP account you create it in

863
00:32:49,500 --> 00:32:50,820
a different tenant

864
00:32:50,820 --> 00:32:52,799
and so that the user is already invited

865
00:32:52,799 --> 00:32:55,140
so you don't need to invite it yourself

866
00:32:55,140 --> 00:32:56,700
um that you register the MFA information

867
00:32:56,700 --> 00:32:59,820
then you unlink it then you link it to a

868
00:32:59,820 --> 00:33:01,940
different account and then you have

869
00:33:01,940 --> 00:33:04,740
bypass the MFA without needing the guest

870
00:33:04,740 --> 00:33:06,240
account user

871
00:33:06,240 --> 00:33:07,980
so this removes the requirement to

872
00:33:07,980 --> 00:33:10,320
actually invite an external user and

873
00:33:10,320 --> 00:33:12,419
this basically bypasses all these

874
00:33:12,419 --> 00:33:13,980
security controls that there are for

875
00:33:13,980 --> 00:33:16,740
external collaboration so I try to put

876
00:33:16,740 --> 00:33:18,779
everything to the most Quick Settings I

877
00:33:18,779 --> 00:33:20,700
like blocking users from sending invites

878
00:33:20,700 --> 00:33:23,220
even explicitly blocking external

879
00:33:23,220 --> 00:33:26,399
accounts disabling the email OTP methods

880
00:33:26,399 --> 00:33:28,380
didn't really matter the attack was

881
00:33:28,380 --> 00:33:30,539
still possible because we were already

882
00:33:30,539 --> 00:33:33,059
signed in with email OTP and at the

883
00:33:33,059 --> 00:33:34,740
point we did the accounts which actually

884
00:33:34,740 --> 00:33:36,960
ad didn't check anymore whether email

885
00:33:36,960 --> 00:33:40,519
OTP was even enabled in the tenants

886
00:33:40,799 --> 00:33:42,419
um so of course I reported these things

887
00:33:42,419 --> 00:33:45,179
to Microsoft and our report is this four

888
00:33:45,179 --> 00:33:47,940
separate issues in March this year so

889
00:33:47,940 --> 00:33:49,500
the guest invite Redemption without

890
00:33:49,500 --> 00:33:51,779
validation was tricked pretty fast

891
00:33:51,779 --> 00:33:53,519
within a few weeks

892
00:33:53,519 --> 00:33:56,460
the elevation from usual admin to Globe

893
00:33:56,460 --> 00:33:58,740
admin by converting their account to B2B

894
00:33:58,740 --> 00:34:00,539
was fixed in April

895
00:34:00,539 --> 00:34:03,980
and the MFA bypass via account rebinding

896
00:34:03,980 --> 00:34:08,099
was a fixed yesterday so quite last

897
00:34:08,099 --> 00:34:10,260
minute

898
00:34:10,260 --> 00:34:12,960
and the vectoring account identities is

899
00:34:12,960 --> 00:34:14,879
still something they're working on so I

900
00:34:14,879 --> 00:34:16,800
know they they're paying attention to

901
00:34:16,800 --> 00:34:19,139
this and they are working on on the fix

902
00:34:19,139 --> 00:34:22,139
but at least you can still so you can

903
00:34:22,139 --> 00:34:23,879
still modify these identities and Link

904
00:34:23,879 --> 00:34:26,339
it to an email OTP account but you can

905
00:34:26,339 --> 00:34:30,300
no longer bypass bypass MFA using using

906
00:34:30,300 --> 00:34:32,780
this technique

907
00:34:33,060 --> 00:34:35,639
um so some recommendations to ants

908
00:34:35,639 --> 00:34:38,219
um if you're a Defender just remove

909
00:34:38,219 --> 00:34:40,080
those accounts which haven't redeemed

910
00:34:40,080 --> 00:34:41,699
their invites they're kind of laying

911
00:34:41,699 --> 00:34:43,560
around there and if someone finds a

912
00:34:43,560 --> 00:34:45,060
bypass again

913
00:34:45,060 --> 00:34:47,339
um they could take over those accounts

914
00:34:47,339 --> 00:34:49,679
and most tenants I analyzed that did

915
00:34:49,679 --> 00:34:51,119
have some external users they were

916
00:34:51,119 --> 00:34:52,800
always users laying around for years

917
00:34:52,800 --> 00:34:55,440
that just didn't redeem their invites

918
00:34:55,440 --> 00:34:57,900
you can lock down guest invite rights

919
00:34:57,900 --> 00:35:00,540
and guest access settings in Azure ID so

920
00:35:00,540 --> 00:35:03,119
certainly don't give your guest users

921
00:35:03,119 --> 00:35:04,859
permissions that your normal users have

922
00:35:04,859 --> 00:35:07,260
because then they can well enumerate

923
00:35:07,260 --> 00:35:08,820
everything in the tenant and view all

924
00:35:08,820 --> 00:35:11,400
kind of information and you typically

925
00:35:11,400 --> 00:35:13,680
don't want your users to just invite

926
00:35:13,680 --> 00:35:15,119
whoever they want and give them access

927
00:35:15,119 --> 00:35:16,079
to

928
00:35:16,079 --> 00:35:18,240
to your ayur edit tenants because that

929
00:35:18,240 --> 00:35:21,240
enables a lot more scenarios

930
00:35:21,240 --> 00:35:23,339
of course if you're using this feature

931
00:35:23,339 --> 00:35:25,920
I'd recommend you lock down which

932
00:35:25,920 --> 00:35:27,720
tenants can actually be used in which

933
00:35:27,720 --> 00:35:30,119
domains invites can be sent to and there

934
00:35:30,119 --> 00:35:31,859
are some new features that can that

935
00:35:31,859 --> 00:35:34,380
allow you to restrict which apps guests

936
00:35:34,380 --> 00:35:37,260
can access and all that other things

937
00:35:37,260 --> 00:35:40,079
of course you might want to look in your

938
00:35:40,079 --> 00:35:43,380
audit logs if anyone did do this so you

939
00:35:43,380 --> 00:35:46,619
can use the query that I posted on my my

940
00:35:46,619 --> 00:35:49,020
gist on my GitHub that has a kql query

941
00:35:49,020 --> 00:35:52,500
for the invite hijack and of course you

942
00:35:52,500 --> 00:35:55,619
can also search for users modifying

943
00:35:55,619 --> 00:35:57,660
their own identities property because

944
00:35:57,660 --> 00:36:00,300
that's also logged in the audit logs

945
00:36:00,300 --> 00:36:03,839
and lastly enforce MFA across all apps

946
00:36:03,839 --> 00:36:05,880
instead of selectively because if

947
00:36:05,880 --> 00:36:07,440
there's this scenario that you could

948
00:36:07,440 --> 00:36:10,740
bypass MFA using some certain token that

949
00:36:10,740 --> 00:36:13,260
you can obtain without anything that

950
00:36:13,260 --> 00:36:16,200
would leave a hole in in your defenses

951
00:36:16,200 --> 00:36:19,859
so thank you for your attention if

952
00:36:19,859 --> 00:36:21,599
there's any questions be happy to take

953
00:36:21,599 --> 00:36:23,339
them and otherwise you can always send

954
00:36:23,339 --> 00:36:25,680
me a DM on Twitter or send me an email

955
00:36:25,680 --> 00:36:28,640
with your questions

956
00:36:30,320 --> 00:36:33,429
[Music]

957
00:36:37,280 --> 00:36:40,369
[Music]

