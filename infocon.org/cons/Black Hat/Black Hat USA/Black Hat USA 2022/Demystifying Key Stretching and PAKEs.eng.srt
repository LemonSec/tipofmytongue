1
00:00:01,730 --> 00:00:03,720
[Music]

2
00:00:03,720 --> 00:00:06,720
foreign

3
00:00:10,320 --> 00:00:13,760
I swear I am not a cat

4
00:00:14,360 --> 00:00:18,180
all right so uh I got into infosec uh

5
00:00:18,180 --> 00:00:20,820
password as a password cracker then uh

6
00:00:20,820 --> 00:00:23,340
you know I'm a cryptography Enthusiast

7
00:00:23,340 --> 00:00:26,699
and uh about a decade ago I was watching

8
00:00:26,699 --> 00:00:29,220
uh Tech YouTube channel and they kept on

9
00:00:29,220 --> 00:00:32,159
being uh sponsored by a password manager

10
00:00:32,159 --> 00:00:36,000
and I you know I was like ah maybe I

11
00:00:36,000 --> 00:00:39,899
should look at it and uh

12
00:00:39,899 --> 00:00:43,860
sorry I the it's all um I I can hear

13
00:00:43,860 --> 00:00:47,300
myself sorry uh

14
00:00:48,000 --> 00:00:50,760
so uh I started finding all these bugs

15
00:00:50,760 --> 00:00:52,440
uh it was the first time I actually Co

16
00:00:52,440 --> 00:00:56,579
audited anything and you know uh there

17
00:00:56,579 --> 00:00:59,120
was like a

18
00:01:01,399 --> 00:01:03,719
anyway uh so there's like downgrade

19
00:01:03,719 --> 00:01:05,220
attacks and stuff like that and then I

20
00:01:05,220 --> 00:01:06,420
looked at other ones and they had

21
00:01:06,420 --> 00:01:09,540
similar bugs and whatnot and I basically

22
00:01:09,540 --> 00:01:13,020
I decided uh how would I make one and

23
00:01:13,020 --> 00:01:16,320
then this is basically that Journey uh I

24
00:01:16,320 --> 00:01:18,720
was on the password competition panel

25
00:01:18,720 --> 00:01:21,900
and uh I broke uh I don't actually know

26
00:01:21,900 --> 00:01:24,659
how to say that I assume it's like uh

27
00:01:24,659 --> 00:01:28,979
Latin so it's like the Visa you and then

28
00:01:28,979 --> 00:01:31,619
um I broke delegation for the original

29
00:01:31,619 --> 00:01:35,520
version of uh Makwa uh but that was

30
00:01:35,520 --> 00:01:38,280
fixed so uh so here's the agenda for

31
00:01:38,280 --> 00:01:40,680
today uh key stretching you know and

32
00:01:40,680 --> 00:01:44,579
then pass through authentic exchanges

33
00:01:44,579 --> 00:01:46,619
uh so

34
00:01:46,619 --> 00:01:49,439
key stretching this is usually for you

35
00:01:49,439 --> 00:01:51,600
know passwords

36
00:01:51,600 --> 00:01:53,640
um so hashing that would be for

37
00:01:53,640 --> 00:01:55,259
authentication so when you log into a

38
00:01:55,259 --> 00:01:57,000
website you know if they hatch your

39
00:01:57,000 --> 00:01:58,860
password look it up in a database and

40
00:01:58,860 --> 00:02:00,060
then

41
00:02:00,060 --> 00:02:01,380
um

42
00:02:01,380 --> 00:02:05,040
see if it's right and then uh password

43
00:02:05,040 --> 00:02:07,759
kdf

44
00:02:09,020 --> 00:02:11,459
that's to generate a key usually for

45
00:02:11,459 --> 00:02:15,300
like encryption or algorithms like picks

46
00:02:15,300 --> 00:02:17,400
uh there's also another thing that you

47
00:02:17,400 --> 00:02:19,440
can do with key stretching which is uh

48
00:02:19,440 --> 00:02:22,319
fingerprints one example is signals

49
00:02:22,319 --> 00:02:26,220
safety numbers they generate it's a

50
00:02:26,220 --> 00:02:29,520
30-bit 30 decimal digit number which is

51
00:02:29,520 --> 00:02:31,620
basically 100 bits and they wanted to

52
00:02:31,620 --> 00:02:34,920
stretch it to 112.

53
00:02:34,920 --> 00:02:37,800
so why would you key stretch for

54
00:02:37,800 --> 00:02:39,360
passwords that's basically what I'm

55
00:02:39,360 --> 00:02:41,940
going to be talking about but uh

56
00:02:41,940 --> 00:02:45,660
so uh Ashley Madison there's a breach uh

57
00:02:45,660 --> 00:02:49,319
decrypt cost 12. those are really really

58
00:02:49,319 --> 00:02:52,319
good key stretch they're really slow

59
00:02:52,319 --> 00:02:55,280
it's you know 100 a little over 100

60
00:02:55,280 --> 00:02:57,480
hashes per second that you can do on a

61
00:02:57,480 --> 00:03:01,080
GPU so if you were to guess one password

62
00:03:01,080 --> 00:03:04,019
such as password against all the

63
00:03:04,019 --> 00:03:06,420
password hashes in the database it would

64
00:03:06,420 --> 00:03:11,640
take 90 GPU hours to guess one but

65
00:03:11,640 --> 00:03:14,340
um they also stored salted case

66
00:03:14,340 --> 00:03:17,220
insensitive md5 hashes next to them uh

67
00:03:17,220 --> 00:03:19,560
there were 15 million of those and then

68
00:03:19,560 --> 00:03:25,200
when it was discovered by uh Sino Prime

69
00:03:25,200 --> 00:03:28,800
cynosure Prime sorry uh

70
00:03:28,800 --> 00:03:30,900
11 million of those were cracked in 10

71
00:03:30,900 --> 00:03:33,900
days because uh

72
00:03:33,900 --> 00:03:37,680
you know md5 is very fast so then all

73
00:03:37,680 --> 00:03:39,780
they would have to do is uh

74
00:03:39,780 --> 00:03:43,500
run it you know uh figure out what case

75
00:03:43,500 --> 00:03:46,440
those passes were so in those 10 days uh

76
00:03:46,440 --> 00:03:47,940
73 of those

77
00:03:47,940 --> 00:03:50,340
were broken so

78
00:03:50,340 --> 00:03:53,879
uh there's different types of uh key

79
00:03:53,879 --> 00:03:56,040
stretching algorithms

80
00:03:56,040 --> 00:03:57,180
um

81
00:03:57,180 --> 00:03:59,879
computationally hard uh basically just

82
00:03:59,879 --> 00:04:02,400
how much work is done so number of

83
00:04:02,400 --> 00:04:05,159
blocks of hashing that you do there's

84
00:04:05,159 --> 00:04:07,340
parallel versus sequential

85
00:04:07,340 --> 00:04:10,500
as a attacker you only care about how

86
00:04:10,500 --> 00:04:13,080
much work was done and as a Defender you

87
00:04:13,080 --> 00:04:15,599
only care about how long it takes

88
00:04:15,599 --> 00:04:18,600
so if you have

89
00:04:18,600 --> 00:04:19,560
um

90
00:04:19,560 --> 00:04:22,560
a computer with multiple cores and

91
00:04:22,560 --> 00:04:25,020
specific

92
00:04:25,020 --> 00:04:27,900
CPU instructions called simd single

93
00:04:27,900 --> 00:04:29,820
instruction multiple data you can then

94
00:04:29,820 --> 00:04:31,880
run you know

95
00:04:31,880 --> 00:04:36,720
a hundred hashes in parallel first one

96
00:04:36,720 --> 00:04:38,580
that you would be able to so it'd be

97
00:04:38,580 --> 00:04:41,160
harder in a shorter amount of time

98
00:04:41,160 --> 00:04:45,479
memory hard the way that those are

99
00:04:45,479 --> 00:04:47,639
strong is the amount of memory that's

100
00:04:47,639 --> 00:04:50,940
being used limits how many threads on a

101
00:04:50,940 --> 00:04:54,300
GPU that you can be using so as you use

102
00:04:54,300 --> 00:04:57,419
more memory the GPU can't use as many

103
00:04:57,419 --> 00:04:59,820
threads

104
00:04:59,820 --> 00:05:03,360
uh and also like uh how much bandwidth

105
00:05:03,360 --> 00:05:06,120
is consumed because uh gpus have a lot

106
00:05:06,120 --> 00:05:09,900
of bandwidth for uh CPUs

107
00:05:09,900 --> 00:05:11,639
um Cash Card uh the way that these are

108
00:05:11,639 --> 00:05:14,520
strong is uh instead of bandwidth it's

109
00:05:14,520 --> 00:05:17,400
the number of transactions so on a GPU

110
00:05:17,400 --> 00:05:20,520
uh the bandwidth uh the bus size is

111
00:05:20,520 --> 00:05:24,060
rather large and with a cash art

112
00:05:24,060 --> 00:05:26,220
algorithm you're only using a fraction

113
00:05:26,220 --> 00:05:27,120
of that

114
00:05:27,120 --> 00:05:29,840
uh so you're reading like a 64-bit Ram

115
00:05:29,840 --> 00:05:32,660
randomly 64-bit integers and then

116
00:05:32,660 --> 00:05:35,580
combining all those with a very fast

117
00:05:35,580 --> 00:05:38,639
operation like add and xor

118
00:05:38,639 --> 00:05:42,840
so uh here's some algorithms

119
00:05:42,840 --> 00:05:45,360
parallel PB kdf I'll be talking about

120
00:05:45,360 --> 00:05:49,440
that later pbk beef two uh b-crypt uh

121
00:05:49,440 --> 00:05:52,259
bscrypt that's uh algorithm that I did a

122
00:05:52,259 --> 00:05:55,979
talk at besides uh yesterday

123
00:05:55,979 --> 00:05:56,880
um

124
00:05:56,880 --> 00:05:59,639
memory hard you know argon2 that was the

125
00:05:59,639 --> 00:06:01,620
algorithm that was picked from the

126
00:06:01,620 --> 00:06:05,000
passive hashing competition

127
00:06:06,240 --> 00:06:08,460
uh

128
00:06:08,460 --> 00:06:11,220
key stretching so uh basically if you're

129
00:06:11,220 --> 00:06:14,039
making a key stretching algorithm uh if

130
00:06:14,039 --> 00:06:16,080
you follow these three steps and there's

131
00:06:16,080 --> 00:06:18,139
the optional step for memory Hardware

132
00:06:18,139 --> 00:06:21,360
you're doing walk-ups that are

133
00:06:21,360 --> 00:06:23,220
independent of the password

134
00:06:23,220 --> 00:06:24,600
um

135
00:06:24,600 --> 00:06:27,660
so you hash all the inputs you know

136
00:06:27,660 --> 00:06:29,940
password salt whatnot

137
00:06:29,940 --> 00:06:32,940
um then you do work with that seed you

138
00:06:32,940 --> 00:06:36,000
generate work a value called work and

139
00:06:36,000 --> 00:06:38,639
then um you use a kdf to then stretch it

140
00:06:38,639 --> 00:06:41,600
to whatever size you want

141
00:06:42,180 --> 00:06:45,360
um so if you don't follow so these

142
00:06:45,360 --> 00:06:48,780
algorithms don't follow those three

143
00:06:48,780 --> 00:06:52,020
steps and there were CVS on them these

144
00:06:52,020 --> 00:06:54,060
were so when I came up with those three

145
00:06:54,060 --> 00:06:55,740
steps uh

146
00:06:55,740 --> 00:06:58,919
it that is very new in comparison to

147
00:06:58,919 --> 00:07:02,039
these algorithms these are older uh

148
00:07:02,039 --> 00:07:04,740
technically uh pbkdf2

149
00:07:04,740 --> 00:07:06,479
um

150
00:07:06,479 --> 00:07:09,120
that was uh that CV is because of a

151
00:07:09,120 --> 00:07:11,340
implementation bug

152
00:07:11,340 --> 00:07:16,020
so uh key stretching bugs uh

153
00:07:16,020 --> 00:07:19,440
decrypt silently truncates to 72 bytes

154
00:07:19,440 --> 00:07:22,919
and so this is code from the UK's

155
00:07:22,919 --> 00:07:25,740
government's police cyber alarm I don't

156
00:07:25,740 --> 00:07:28,020
actually know what that is but uh Paul

157
00:07:28,020 --> 00:07:30,240
Moore on Twitter uh tweeted about this

158
00:07:30,240 --> 00:07:32,819
so

159
00:07:32,819 --> 00:07:35,099
basically uh

160
00:07:35,099 --> 00:07:37,979
P hash that is

161
00:07:37,979 --> 00:07:40,620
um 64 bytes so it leaves only eight

162
00:07:40,620 --> 00:07:42,539
bytes for your password

163
00:07:42,539 --> 00:07:45,720
there's a simple fix if you uh actually

164
00:07:45,720 --> 00:07:47,520
hash all that along with the password

165
00:07:47,520 --> 00:07:51,240
then you know this is actually close to

166
00:07:51,240 --> 00:07:53,240
what you should be doing with decrypt

167
00:07:53,240 --> 00:07:57,479
you want to Hash the password with uh

168
00:07:57,479 --> 00:08:00,720
hmac so you can have a pepper as the key

169
00:08:00,720 --> 00:08:02,580
and then the message being the password

170
00:08:02,580 --> 00:08:05,160
and then put that in and then you want

171
00:08:05,160 --> 00:08:08,099
to have ASCII uh

172
00:08:08,099 --> 00:08:10,319
uh encoding of it

173
00:08:10,319 --> 00:08:13,259
so uh even if you do follow all the

174
00:08:13,259 --> 00:08:15,840
steps uh there still can be bugs that

175
00:08:15,840 --> 00:08:19,020
happen this was with bouncy hassle

176
00:08:19,020 --> 00:08:20,759
um it only checks the first occurrences

177
00:08:20,759 --> 00:08:23,460
of those characters and you know a few

178
00:08:23,460 --> 00:08:25,979
of them uh are at the beginning and

179
00:08:25,979 --> 00:08:27,539
there's a probability that you get an

180
00:08:27,539 --> 00:08:29,699
unlucky hash where the any password

181
00:08:29,699 --> 00:08:33,200
would match so I calculated those

182
00:08:33,200 --> 00:08:36,599
probabilities uh when the the bug came

183
00:08:36,599 --> 00:08:39,059
out I haven't actually double checked

184
00:08:39,059 --> 00:08:41,458
but I'm pretty sure they're right

185
00:08:41,458 --> 00:08:43,200
so

186
00:08:43,200 --> 00:08:46,380
um how to do key stretching so these are

187
00:08:46,380 --> 00:08:48,959
the the three steps I've removed the uh

188
00:08:48,959 --> 00:08:50,760
optional stuff and you might be looking

189
00:08:50,760 --> 00:08:53,100
at do work and thinking

190
00:08:53,100 --> 00:08:54,899
that's there's there's a lot missing

191
00:08:54,899 --> 00:08:58,560
there so uh how to draw an owl meme you

192
00:08:58,560 --> 00:09:00,360
know

193
00:09:00,360 --> 00:09:03,420
uh so this is pbkdf2

194
00:09:03,420 --> 00:09:06,000
um there's actually uh two issues with

195
00:09:06,000 --> 00:09:07,140
it

196
00:09:07,140 --> 00:09:08,040
um

197
00:09:08,040 --> 00:09:09,899
you know according to this the three

198
00:09:09,899 --> 00:09:13,500
steps so uh if you don't do hmac and net

199
00:09:13,500 --> 00:09:16,440
and hmac finish if you were to just do

200
00:09:16,440 --> 00:09:18,839
hmac where all the hmax finishes are

201
00:09:18,839 --> 00:09:21,180
you'd have you'd as a Defender you'd be

202
00:09:21,180 --> 00:09:23,880
doing twice as much work but also if

203
00:09:23,880 --> 00:09:25,800
someone enters a really really long

204
00:09:25,800 --> 00:09:27,480
password you have to Hash that every

205
00:09:27,480 --> 00:09:30,959
time and you can uh it'll be a Dos one

206
00:09:30,959 --> 00:09:35,519
of those uh CVS was basically that

207
00:09:35,519 --> 00:09:37,920
um also the red boxes those are

208
00:09:37,920 --> 00:09:40,200
independently generated so you're doing

209
00:09:40,200 --> 00:09:43,860
if you ask for more output from pbkdf2

210
00:09:43,860 --> 00:09:46,920
you're doing more and more work but you

211
00:09:46,920 --> 00:09:49,440
can use that as you can use that foot

212
00:09:49,440 --> 00:09:52,380
gun for an algorithm uh this is

213
00:09:52,380 --> 00:09:54,000
something I came up with uh parallel

214
00:09:54,000 --> 00:09:55,740
ppkdf2

215
00:09:55,740 --> 00:09:57,959
um basically you just ask for a large

216
00:09:57,959 --> 00:10:00,000
output and then you xor all those blocks

217
00:10:00,000 --> 00:10:00,800
together

218
00:10:00,800 --> 00:10:04,440
then you put that into PVP area of two

219
00:10:04,440 --> 00:10:05,700
to stretch it to whatever length you

220
00:10:05,700 --> 00:10:07,860
want nist should

221
00:10:07,860 --> 00:10:11,640
um like Fast Track some uh and you know

222
00:10:11,640 --> 00:10:15,360
pbk df3 uh that is something like that

223
00:10:15,360 --> 00:10:18,120
because

224
00:10:18,120 --> 00:10:21,600
um currently they suggest pvkdf2 or

225
00:10:21,600 --> 00:10:24,060
balloon hashing but balloon hashing

226
00:10:24,060 --> 00:10:27,720
doesn't actually have a a spec like

227
00:10:27,720 --> 00:10:32,480
uh it's just an idea sort of thing

228
00:10:32,519 --> 00:10:34,980
um so minimum password hashing settings

229
00:10:34,980 --> 00:10:37,980
so

230
00:10:38,040 --> 00:10:40,740
you want to make sure that an attacker

231
00:10:40,740 --> 00:10:43,920
gets less than 10 000 guesses per second

232
00:10:43,920 --> 00:10:48,019
per GPU Jeremy Gosney uh is the one that

233
00:10:48,019 --> 00:10:51,320
was quoted saying this that it was after

234
00:10:51,320 --> 00:10:55,320
uh you know a breach and the password

235
00:10:55,320 --> 00:10:58,079
hashes were such that they were less

236
00:10:58,079 --> 00:11:01,440
than ten thousand per the fastest GPU at

237
00:11:01,440 --> 00:11:02,940
the time and he said that that was

238
00:11:02,940 --> 00:11:05,700
proper slow I then used that and then

239
00:11:05,700 --> 00:11:08,399
changed the definition of GPU to mean

240
00:11:08,399 --> 00:11:11,880
the best for password tracking and so

241
00:11:11,880 --> 00:11:15,060
maximums uh these are very dependent on

242
00:11:15,060 --> 00:11:18,959
what your Hardware is so if you

243
00:11:18,959 --> 00:11:20,579
basically don't want to take too much

244
00:11:20,579 --> 00:11:23,700
time or too much memory and if you're

245
00:11:23,700 --> 00:11:25,320
doing server authentication you know

246
00:11:25,320 --> 00:11:26,700
hashing

247
00:11:26,700 --> 00:11:27,600
um

248
00:11:27,600 --> 00:11:28,800
you want to make sure that your

249
00:11:28,800 --> 00:11:32,040
throughput is uh what you want and since

250
00:11:32,040 --> 00:11:34,380
those are all like you know dependent on

251
00:11:34,380 --> 00:11:37,260
uh your Hardware uh I'm just going to

252
00:11:37,260 --> 00:11:40,500
talk about minimums because if well it's

253
00:11:40,500 --> 00:11:44,339
easier to you know give minimums so uh

254
00:11:44,339 --> 00:11:47,040
bscrypt as I said this was uh I did a

255
00:11:47,040 --> 00:11:48,180
talk at

256
00:11:48,180 --> 00:11:50,579
b-sides LV yesterday

257
00:11:50,579 --> 00:11:55,079
um so those are the minimums uh these

258
00:11:55,079 --> 00:11:57,360
are actually extremely fast you can go

259
00:11:57,360 --> 00:12:00,360
way higher uh these are like uh run

260
00:12:00,360 --> 00:12:03,360
times of milliseconds

261
00:12:03,360 --> 00:12:09,320
um so the 1.9 million in the uh

262
00:12:09,320 --> 00:12:12,420
uh I should highlighted

263
00:12:12,420 --> 00:12:15,060
um so basically in general you want to

264
00:12:15,060 --> 00:12:17,279
use the highest uh

265
00:12:17,279 --> 00:12:21,180
cash level per core

266
00:12:21,180 --> 00:12:24,980
and then for number of iterations T

267
00:12:24,980 --> 00:12:27,420
that's based on how many memory

268
00:12:27,420 --> 00:12:32,040
transactions uh a current GPU gets

269
00:12:32,040 --> 00:12:35,040
so uh bcrypt minimum settings are very

270
00:12:35,040 --> 00:12:39,000
simple uh cost nine uh technically well

271
00:12:39,000 --> 00:12:41,100
because uh the way bcrypt works with

272
00:12:41,100 --> 00:12:44,639
their costs it's exponential so um it's

273
00:12:44,639 --> 00:12:48,060
technically like 8.1 but uh you know you

274
00:12:48,060 --> 00:12:50,339
have to put in an integer

275
00:12:50,339 --> 00:12:52,560
um oh uh the link at the bottom of the

276
00:12:52,560 --> 00:12:56,100
screen uh that is my web page I will be

277
00:12:56,100 --> 00:12:58,800
updating that with uh you know current

278
00:12:58,800 --> 00:13:00,959
recommendations

279
00:13:00,959 --> 00:13:07,740
um so argon2 uh they had an RFC uh

280
00:13:07,740 --> 00:13:10,200
the people that made are going to put

281
00:13:10,200 --> 00:13:12,300
out on RFC

282
00:13:12,300 --> 00:13:14,359
um

283
00:13:14,459 --> 00:13:16,860
and so those are the settings that they

284
00:13:16,860 --> 00:13:20,120
gave you know

285
00:13:20,220 --> 00:13:23,100
uh basically you know two gigs one

286
00:13:23,100 --> 00:13:26,339
iteration 64 Meg three iteration you

287
00:13:26,339 --> 00:13:27,779
know very similar

288
00:13:27,779 --> 00:13:29,940
just kidding uh those are wildly

289
00:13:29,940 --> 00:13:31,019
different

290
00:13:31,019 --> 00:13:33,060
um the password manager that I use

291
00:13:33,060 --> 00:13:34,380
keepass

292
00:13:34,380 --> 00:13:35,940
um

293
00:13:35,940 --> 00:13:38,940
uh they don't even allow you to do uh

294
00:13:38,940 --> 00:13:40,519
two gigs

295
00:13:40,519 --> 00:13:44,760
but so these are my minimums

296
00:13:44,760 --> 00:13:47,220
um these are based on the memory

297
00:13:47,220 --> 00:13:50,760
bandwidth of current gpus

298
00:13:50,760 --> 00:13:51,959
uh

299
00:13:51,959 --> 00:13:54,480
basically there aren't any good

300
00:13:54,480 --> 00:13:57,000
benchmarks for it for password tracking

301
00:13:57,000 --> 00:14:00,540
uh the so if you look at the general

302
00:14:00,540 --> 00:14:05,100
formulas the alpha variable that is uh

303
00:14:05,100 --> 00:14:07,200
the percentage of memory bandwidth that

304
00:14:07,200 --> 00:14:09,180
you can actually consume and that

305
00:14:09,180 --> 00:14:12,000
depends on how much memory uh you know

306
00:14:12,000 --> 00:14:15,120
the memory setting uh it's you know

307
00:14:15,120 --> 00:14:18,240
assumed that uh

308
00:14:18,240 --> 00:14:20,700
around uh

309
00:14:20,700 --> 00:14:24,420
64 Megs ish then that will start

310
00:14:24,420 --> 00:14:28,860
dropping as you double uh

311
00:14:28,860 --> 00:14:33,060
memory the speed of a GPU will be cut in

312
00:14:33,060 --> 00:14:35,459
quarter because it's doing twice as much

313
00:14:35,459 --> 00:14:38,880
work with half as many threads

314
00:14:38,880 --> 00:14:40,980
so s grip minimums

315
00:14:40,980 --> 00:14:43,740
um same thing it was based off of uh

316
00:14:43,740 --> 00:14:45,779
memory bandwidth

317
00:14:45,779 --> 00:14:47,639
so uh

318
00:14:47,639 --> 00:14:49,500
you don't have to answer it just think

319
00:14:49,500 --> 00:14:53,760
so pbkdf2 pulse settings uh what do you

320
00:14:53,760 --> 00:14:55,440
think is like a high number you know

321
00:14:55,440 --> 00:14:57,839
like a good number and what you you

322
00:14:57,839 --> 00:15:01,040
think industry standards would be well

323
00:15:01,040 --> 00:15:05,279
here's my minimums they're so it depends

324
00:15:05,279 --> 00:15:06,839
on what algorithm you're actually

325
00:15:06,839 --> 00:15:10,740
hashing algorithm you're using so uh you

326
00:15:10,740 --> 00:15:13,860
know shell one is very fast on a GPU so

327
00:15:13,860 --> 00:15:15,959
that's higher

328
00:15:15,959 --> 00:15:20,699
um technically uh Blake 512 would be the

329
00:15:20,699 --> 00:15:23,399
best algorithm to use because uh

330
00:15:23,399 --> 00:15:25,980
there's internal parallelism so as a

331
00:15:25,980 --> 00:15:29,100
Defender you can use some D instructions

332
00:15:29,100 --> 00:15:31,680
single instruction multiple data

333
00:15:31,680 --> 00:15:32,579
um

334
00:15:32,579 --> 00:15:34,680
so it will be faster

335
00:15:34,680 --> 00:15:37,260
but faster as a Defender for the same

336
00:15:37,260 --> 00:15:42,540
strength as others so parallel pbkdf2 uh

337
00:15:42,540 --> 00:15:45,779
uh it's a simple thing you know cost

338
00:15:45,779 --> 00:15:49,199
three cost one each cost is equivalent

339
00:15:49,199 --> 00:15:51,839
to uh you know over a hundred thousand

340
00:15:51,839 --> 00:15:53,160
iterations

341
00:15:53,160 --> 00:15:55,560
uh so

342
00:15:55,560 --> 00:15:58,800
uh password authenticated key exchanges

343
00:15:58,800 --> 00:16:00,600
um

344
00:16:00,600 --> 00:16:04,800
yeah so uh you can use these for uh

345
00:16:04,800 --> 00:16:06,600
password authentication so when you're

346
00:16:06,600 --> 00:16:09,120
logging into a website

347
00:16:09,120 --> 00:16:10,320
um

348
00:16:10,320 --> 00:16:12,180
you know instead of giving your password

349
00:16:12,180 --> 00:16:15,779
over you do this key exchange then there

350
00:16:15,779 --> 00:16:18,540
were a bunch of uh

351
00:16:18,540 --> 00:16:21,320
a few years ago a bunch of

352
00:16:21,320 --> 00:16:23,220
companies found out that they were

353
00:16:23,220 --> 00:16:25,980
accidentally logging passwords so if

354
00:16:25,980 --> 00:16:30,120
they switch to a password kdf up

355
00:16:30,120 --> 00:16:32,959
uh Pig

356
00:16:33,240 --> 00:16:35,940
um then even if they did log all those

357
00:16:35,940 --> 00:16:38,220
messages uh you know there wouldn't be

358
00:16:38,220 --> 00:16:39,240
anything

359
00:16:39,240 --> 00:16:42,480
uh important in them uh so you can also

360
00:16:42,480 --> 00:16:45,839
use pakes to establish a encrypted

361
00:16:45,839 --> 00:16:48,540
tunnel uh you can use a magic Wormhole

362
00:16:48,540 --> 00:16:51,959
for sending files or fighting uh

363
00:16:51,959 --> 00:16:54,420
phone spoofing uh

364
00:16:54,420 --> 00:16:57,360
so you might be if you've heard of scram

365
00:16:57,360 --> 00:16:59,940
maybe not uh

366
00:16:59,940 --> 00:17:03,120
the problem with scram is you have to be

367
00:17:03,120 --> 00:17:06,359
on an encrypted Channel because anyone

368
00:17:06,359 --> 00:17:09,419
that sees those messages if they see a

369
00:17:09,419 --> 00:17:11,599
successful you know login

370
00:17:11,599 --> 00:17:14,160
those messages are equivalent to a

371
00:17:14,160 --> 00:17:17,099
password hash so in the case of logging

372
00:17:17,099 --> 00:17:19,980
you'd be logging password hashes

373
00:17:19,980 --> 00:17:23,339
uh so types of picks uh balance those

374
00:17:23,339 --> 00:17:25,619
are peer-to-peer so

375
00:17:25,619 --> 00:17:28,079
uh you know a person types in the

376
00:17:28,079 --> 00:17:29,400
password on one side someone else to

377
00:17:29,400 --> 00:17:31,200
pass it on the other then there's

378
00:17:31,200 --> 00:17:34,020
augmented uh apic

379
00:17:34,020 --> 00:17:36,720
uh those are client server uh do not

380
00:17:36,720 --> 00:17:39,780
call these uh symmetric asymmetric uh

381
00:17:39,780 --> 00:17:42,179
one reason is there's asymmetric and

382
00:17:42,179 --> 00:17:44,640
symmetric cryptography but also it

383
00:17:44,640 --> 00:17:46,500
implies that there's only two

384
00:17:46,500 --> 00:17:49,799
so uh two different types of picks uh

385
00:17:49,799 --> 00:17:52,320
doubly augmented This was

386
00:17:52,320 --> 00:17:54,299
um there's a long email from Mike

387
00:17:54,299 --> 00:17:58,440
Hamburg where at the end he uh

388
00:17:58,440 --> 00:18:01,140
uh you know off you know just like in a

389
00:18:01,140 --> 00:18:03,600
really short like sentence mentions that

390
00:18:03,600 --> 00:18:07,080
it could be dog uh doubly augmented and

391
00:18:07,080 --> 00:18:07,919
um

392
00:18:07,919 --> 00:18:09,900
you know a few years uh he said he

393
00:18:09,900 --> 00:18:12,600
didn't know like a good way uh you know

394
00:18:12,600 --> 00:18:15,380
what that could be used for a few years

395
00:18:15,380 --> 00:18:17,400
uh later

396
00:18:17,400 --> 00:18:20,520
um I figured out uh the perfect you know

397
00:18:20,520 --> 00:18:25,200
match for it which is Wi-Fi uh so

398
00:18:25,200 --> 00:18:26,760
basically

399
00:18:26,760 --> 00:18:29,700
um your doorbell and your access point

400
00:18:29,700 --> 00:18:33,000
your doorbell would be a device that has

401
00:18:33,000 --> 00:18:35,400
basically uh you don't want someone to

402
00:18:35,400 --> 00:18:37,200
break into your doorbell and then be

403
00:18:37,200 --> 00:18:40,140
able to uh use the information stored on

404
00:18:40,140 --> 00:18:42,600
it to spin up an AP and then attack your

405
00:18:42,600 --> 00:18:46,679
network with a doubly augmented pick uh

406
00:18:46,679 --> 00:18:48,360
the doorbell wouldn't have any

407
00:18:48,360 --> 00:18:50,520
information necessary to

408
00:18:50,520 --> 00:18:52,980
make a access point

409
00:18:52,980 --> 00:18:55,039
um

410
00:18:55,200 --> 00:18:56,640
then uh

411
00:18:56,640 --> 00:18:59,220
identity pick this is you know basically

412
00:18:59,220 --> 00:19:02,059
uh there's everyone has an identity

413
00:19:02,059 --> 00:19:05,460
roles and permissions and stuff and a

414
00:19:05,460 --> 00:19:08,760
good fit for that is iot

415
00:19:08,760 --> 00:19:10,260
so

416
00:19:10,260 --> 00:19:13,380
um the hierarchy of pigs basically if

417
00:19:13,380 --> 00:19:15,960
you need a balance pick you could

418
00:19:15,960 --> 00:19:19,200
technically use any of these

419
00:19:19,200 --> 00:19:22,919
um but you know uh they're more work but

420
00:19:22,919 --> 00:19:24,179
if you needed something that was a

421
00:19:24,179 --> 00:19:26,640
doubly augmented pick then you could

422
00:19:26,640 --> 00:19:29,520
either use that or an identity pick but

423
00:19:29,520 --> 00:19:30,720
nothing else

424
00:19:30,720 --> 00:19:32,220
so

425
00:19:32,220 --> 00:19:35,760
uh balancing an identity picks those are

426
00:19:35,760 --> 00:19:39,900
you know more uh you know peer-to-peer

427
00:19:39,900 --> 00:19:42,720
or could be like um in the case of like

428
00:19:42,720 --> 00:19:46,799
iot where like uh you know two devices

429
00:19:46,799 --> 00:19:48,780
are talking to each other then uh

430
00:19:48,780 --> 00:19:50,400
augment and doubly augmented those are

431
00:19:50,400 --> 00:19:54,059
more uh client server the uh

432
00:19:54,059 --> 00:19:57,020
top two are

433
00:19:57,020 --> 00:20:01,200
basically human isn't as involved and

434
00:20:01,200 --> 00:20:03,780
then the bottom two those are where uh

435
00:20:03,780 --> 00:20:05,580
two computers can be talking to each

436
00:20:05,580 --> 00:20:06,419
other

437
00:20:06,419 --> 00:20:11,220
or devices so how do takes work

438
00:20:11,220 --> 00:20:13,860
so this is standard diffie-hellman you

439
00:20:13,860 --> 00:20:15,720
have Alice and Bob talking to each other

440
00:20:15,720 --> 00:20:17,700
and so

441
00:20:17,700 --> 00:20:20,220
they both generate a random private key

442
00:20:20,220 --> 00:20:22,679
then do scalar Point multiplication to

443
00:20:22,679 --> 00:20:25,500
create a public key then they exchange

444
00:20:25,500 --> 00:20:28,500
them and then they apply their private

445
00:20:28,500 --> 00:20:31,500
key to the other's public key and then

446
00:20:31,500 --> 00:20:32,480
they get

447
00:20:32,480 --> 00:20:35,160
sasb those should be the same unless

448
00:20:35,160 --> 00:20:37,080
there was someone Milling this

449
00:20:37,080 --> 00:20:39,199
connection

450
00:20:39,240 --> 00:20:44,400
and so uh what you can do with picks um

451
00:20:44,400 --> 00:20:46,679
is you can hide the ephemeral keys that

452
00:20:46,679 --> 00:20:49,860
you're exchanging so one way to do that

453
00:20:49,860 --> 00:20:51,960
is you take the password you hash it

454
00:20:51,960 --> 00:20:53,940
then you put it through this function

455
00:20:53,940 --> 00:20:57,240
called hashed Curve what that does is

456
00:20:57,240 --> 00:20:58,919
it's different than scalar Point

457
00:20:58,919 --> 00:21:00,480
multiplication

458
00:21:00,480 --> 00:21:05,220
where when you give it the hash of the

459
00:21:05,220 --> 00:21:06,419
password

460
00:21:06,419 --> 00:21:09,299
um you don't know the private key

461
00:21:09,299 --> 00:21:14,400
basically so it generates this point uh

462
00:21:14,400 --> 00:21:17,280
the password point I'll call it and so

463
00:21:17,280 --> 00:21:19,200
when you generate your ephemeral key you

464
00:21:19,200 --> 00:21:20,340
just add it

465
00:21:20,340 --> 00:21:23,039
add that point to your ephemeral key and

466
00:21:23,039 --> 00:21:24,120
then

467
00:21:24,120 --> 00:21:27,840
exchange that then you remove it by

468
00:21:27,840 --> 00:21:30,419
subtraction and then apply your private

469
00:21:30,419 --> 00:21:32,760
key and then essay and SB should be the

470
00:21:32,760 --> 00:21:35,039
same assuming you know the password is

471
00:21:35,039 --> 00:21:36,059
correct

472
00:21:36,059 --> 00:21:39,500
another method is hiding the generator

473
00:21:39,500 --> 00:21:43,020
so you do the same thing with the hashed

474
00:21:43,020 --> 00:21:45,840
Curve thing but instead of using the

475
00:21:45,840 --> 00:21:47,400
standard generator if you use the

476
00:21:47,400 --> 00:21:50,760
password Point as the generator

477
00:21:50,760 --> 00:21:55,320
um so the patent expired in 2017 so we

478
00:21:55,320 --> 00:21:57,360
can now actually use this which is good

479
00:21:57,360 --> 00:21:59,940
because this is the easiest method

480
00:21:59,940 --> 00:22:03,179
because it's just diffie-hellman and you

481
00:22:03,179 --> 00:22:05,760
don't need to rely on password addition

482
00:22:05,760 --> 00:22:08,280
and subtraction

483
00:22:08,280 --> 00:22:14,480
uh so this is recent uh more recent uh

484
00:22:15,900 --> 00:22:19,140
so hiding salt with an oprf oblivious

485
00:22:19,140 --> 00:22:22,679
super round function

486
00:22:22,679 --> 00:22:24,539
uh so

487
00:22:24,539 --> 00:22:26,340
basically you do the same thing where

488
00:22:26,340 --> 00:22:28,320
you do hash curve with your password and

489
00:22:28,320 --> 00:22:30,000
stuff

490
00:22:30,000 --> 00:22:33,480
then you blind it with a random value

491
00:22:33,480 --> 00:22:36,059
then you send that over to the server

492
00:22:36,059 --> 00:22:38,600
they apply the salt like private key

493
00:22:38,600 --> 00:22:41,880
then they send that back to you and then

494
00:22:41,880 --> 00:22:46,500
you unblind it by a scalar point there

495
00:22:46,500 --> 00:22:48,360
scalar invert and then scalar Point

496
00:22:48,360 --> 00:22:49,559
multiplication

497
00:22:49,559 --> 00:22:52,860
and basically the blind salt is what I

498
00:22:52,860 --> 00:22:56,640
call it uh equals the salt times the

499
00:22:56,640 --> 00:22:58,740
password point

500
00:22:58,740 --> 00:23:00,740
and

501
00:23:00,740 --> 00:23:03,780
the server doesn't learn what that point

502
00:23:03,780 --> 00:23:07,320
is and you don't learn what the salt is

503
00:23:07,320 --> 00:23:09,799
so

504
00:23:11,280 --> 00:23:15,000
um so how do these picks work uh

505
00:23:15,000 --> 00:23:16,200
basically

506
00:23:16,200 --> 00:23:17,400
um

507
00:23:17,400 --> 00:23:20,120
noise

508
00:23:21,659 --> 00:23:24,539
it's basically like a different types of

509
00:23:24,539 --> 00:23:30,120
key exchanges N means no static key K is

510
00:23:30,120 --> 00:23:32,520
the other party knows what what the

511
00:23:32,520 --> 00:23:33,900
static key is

512
00:23:33,900 --> 00:23:36,539
uh what your static key is the first

513
00:23:36,539 --> 00:23:39,299
letter is um the initiator and the

514
00:23:39,299 --> 00:23:42,720
second is the receiver so balanced yeah

515
00:23:42,720 --> 00:23:45,480
so

516
00:23:45,480 --> 00:23:48,539
balanced uh so all the arrows that will

517
00:23:48,539 --> 00:23:51,179
be on these slides are uh Diffie Allman

518
00:23:51,179 --> 00:23:54,600
so ephemeral key to the thermal key for

519
00:23:54,600 --> 00:23:57,960
balanced uh static key ephemeral to

520
00:23:57,960 --> 00:24:00,659
ephemeral to ephemeral

521
00:24:00,659 --> 00:24:06,659
uh noise can uh doubly augmented uh

522
00:24:06,659 --> 00:24:11,340
oh anyway so 3dh you know

523
00:24:11,340 --> 00:24:15,000
so uh these are uh

524
00:24:15,000 --> 00:24:19,559
pick algorithms uh so uh the way that

525
00:24:19,559 --> 00:24:21,299
they're colored is

526
00:24:21,299 --> 00:24:24,299
um by what they're hiding uh so the ones

527
00:24:24,299 --> 00:24:26,640
with red stars next to them those also

528
00:24:26,640 --> 00:24:27,780
hide the salt

529
00:24:27,780 --> 00:24:31,158
like uh opic does

530
00:24:33,240 --> 00:24:37,559
um yeah so uh the identity takes those

531
00:24:37,559 --> 00:24:39,059
uh

532
00:24:39,059 --> 00:24:42,059
they're not colored because uh those

533
00:24:42,059 --> 00:24:44,760
actually just use a balance pick so

534
00:24:44,760 --> 00:24:46,679
their color would come from or you know

535
00:24:46,679 --> 00:24:51,000
like what they hide comes from what uh

536
00:24:51,000 --> 00:24:54,000
balance pick that you use uh so there

537
00:24:54,000 --> 00:24:58,740
was a paper that made uh chip and crisp

538
00:24:58,740 --> 00:24:59,760
um

539
00:24:59,760 --> 00:25:03,059
where they said that crisp uh

540
00:25:03,059 --> 00:25:06,360
protected the salt basically

541
00:25:06,360 --> 00:25:08,418
um

542
00:25:09,780 --> 00:25:12,678
so uh

543
00:25:17,880 --> 00:25:21,659
um yeah so basically uh instead of uh

544
00:25:21,659 --> 00:25:24,179
protecting it before you run the

545
00:25:24,179 --> 00:25:27,960
password kdf uh it was that uh

546
00:25:27,960 --> 00:25:29,580
after that

547
00:25:29,580 --> 00:25:32,580
where you had to run the it was a more

548
00:25:32,580 --> 00:25:34,200
expensive key exchange that you had to

549
00:25:34,200 --> 00:25:35,760
run each time

550
00:25:35,760 --> 00:25:39,539
um so I I came up with fry because Chris

551
00:25:39,539 --> 00:25:43,200
chip crisp fry basically it's just uh

552
00:25:43,200 --> 00:25:47,039
chip but you know has an oprf and it

553
00:25:47,039 --> 00:25:48,840
does mess with the way that their setup

554
00:25:48,840 --> 00:25:50,000
works

555
00:25:50,000 --> 00:25:53,039
it's kind of a joke

556
00:25:53,039 --> 00:25:56,100
but uh so pick properties

557
00:25:56,100 --> 00:25:57,840
um

558
00:25:57,840 --> 00:26:00,000
uh forward secrecy that's basically

559
00:26:00,000 --> 00:26:02,820
every single fake has that uh prevent

560
00:26:02,820 --> 00:26:05,580
pre- pre-computation that's the

561
00:26:05,580 --> 00:26:07,500
protecting the salt

562
00:26:07,500 --> 00:26:09,179
um

563
00:26:09,179 --> 00:26:11,700
can you turn the music down

564
00:26:11,700 --> 00:26:14,159
uh

565
00:26:14,159 --> 00:26:17,539
thank you uh

566
00:26:18,900 --> 00:26:22,080
uh so pre-computation

567
00:26:22,080 --> 00:26:22,860
um

568
00:26:22,860 --> 00:26:25,919
basically what uh that does is

569
00:26:25,919 --> 00:26:29,279
uh it protects the salt so that

570
00:26:29,279 --> 00:26:32,039
um when your uh

571
00:26:32,039 --> 00:26:34,200
so it prevents this attack where you run

572
00:26:34,200 --> 00:26:36,480
through the passer kdf a bunch of times

573
00:26:36,480 --> 00:26:37,980
with different passwords before you

574
00:26:37,980 --> 00:26:40,200
break into the server then when you

575
00:26:40,200 --> 00:26:42,779
actually uh break into the server you

576
00:26:42,779 --> 00:26:44,820
can then check all those passwords near

577
00:26:44,820 --> 00:26:48,799
instantly or instantly so crisp

578
00:26:48,799 --> 00:26:52,919
slightly protects it the key exchange is

579
00:26:52,919 --> 00:26:55,440
fairly expensive at being you know about

580
00:26:55,440 --> 00:26:58,980
like four milliseconds which isn't

581
00:26:58,980 --> 00:27:01,140
actually a good property because your

582
00:27:01,140 --> 00:27:03,179
you know iot devices would have to run

583
00:27:03,179 --> 00:27:06,240
that out of the room every time

584
00:27:06,240 --> 00:27:08,580
but uh

585
00:27:08,580 --> 00:27:11,100
secure registration basically when you

586
00:27:11,100 --> 00:27:12,600
register

587
00:27:12,600 --> 00:27:14,400
um

588
00:27:14,400 --> 00:27:17,100
uh if you're being man-middled since

589
00:27:17,100 --> 00:27:18,779
there's no like pre-shared key between

590
00:27:18,779 --> 00:27:21,360
you and the server

591
00:27:21,360 --> 00:27:22,919
um you know someone can just come in and

592
00:27:22,919 --> 00:27:25,620
then you know man in the middle grab

593
00:27:25,620 --> 00:27:28,919
that uh all the information and then

594
00:27:28,919 --> 00:27:31,140
um later when you try and go to the

595
00:27:31,140 --> 00:27:34,140
actual server uh you would notice that

596
00:27:34,140 --> 00:27:36,600
it doesn't work

597
00:27:36,600 --> 00:27:37,980
um

598
00:27:37,980 --> 00:27:40,260
uh Quantum annoying this is a term that

599
00:27:40,260 --> 00:27:41,940
I came up with

600
00:27:41,940 --> 00:27:45,059
um there was a paper that uh tried to

601
00:27:45,059 --> 00:27:47,159
formally Define it and they did a talk

602
00:27:47,159 --> 00:27:51,179
at uh PQ crypto so Quantum annoying what

603
00:27:51,179 --> 00:27:53,700
this is is uh

604
00:27:53,700 --> 00:27:55,620
you have to

605
00:27:55,620 --> 00:27:58,919
break a you have to solve a DLP for

606
00:27:58,919 --> 00:28:00,539
every password guess

607
00:28:00,539 --> 00:28:04,080
so you you uh

608
00:28:04,080 --> 00:28:09,020
so when you see a successful exchange

609
00:28:09,020 --> 00:28:11,700
you then capture all the packets if you

610
00:28:11,700 --> 00:28:13,320
had a quantum computer you'd have to

611
00:28:13,320 --> 00:28:15,900
solve one DLP for every passer guess

612
00:28:15,900 --> 00:28:21,240
basically fragile uh what that is is uh

613
00:28:21,240 --> 00:28:23,640
the all the security of the algorithm

614
00:28:23,640 --> 00:28:28,740
depends on static diphelman a static

615
00:28:28,740 --> 00:28:31,320
diffie-hellman Oracle

616
00:28:31,320 --> 00:28:34,140
and number of trips three verse four

617
00:28:34,140 --> 00:28:38,159
obviously three is better but so

618
00:28:38,159 --> 00:28:39,960
um when I coined the term I didn't

619
00:28:39,960 --> 00:28:42,179
actually know that anyone knew about

620
00:28:42,179 --> 00:28:44,340
this property uh

621
00:28:44,340 --> 00:28:47,100
so speak when I was reading the speak

622
00:28:47,100 --> 00:28:50,039
paper I noticed this quote you know I'm

623
00:28:50,039 --> 00:28:52,200
not gonna read it but uh then they

624
00:28:52,200 --> 00:28:55,020
referenced uh the eke paper that

625
00:28:55,020 --> 00:28:58,200
basically said the same thing

626
00:28:58,200 --> 00:28:59,340
sorry

627
00:28:59,340 --> 00:29:04,580
so pick properties uh by algorithm

628
00:29:09,120 --> 00:29:11,419
so

629
00:29:11,419 --> 00:29:14,880
uh Quantum annoying uh that is a very

630
00:29:14,880 --> 00:29:17,400
good property to have you know for

631
00:29:17,400 --> 00:29:21,360
future of uh you know fakes assuming you

632
00:29:21,360 --> 00:29:23,220
know if a quantum computer ever does

633
00:29:23,220 --> 00:29:25,740
come out these would uh a Quantum

634
00:29:25,740 --> 00:29:28,260
annoying take would be basically a stop

635
00:29:28,260 --> 00:29:29,700
Gap

636
00:29:29,700 --> 00:29:33,000
uh between when quantum computers come

637
00:29:33,000 --> 00:29:35,700
out and when you have to uh change

638
00:29:35,700 --> 00:29:38,399
algorithms to a post Quantum pick

639
00:29:38,399 --> 00:29:40,320
and

640
00:29:40,320 --> 00:29:43,500
uh for the case of opaque if uh because

641
00:29:43,500 --> 00:29:45,059
it's fragile

642
00:29:45,059 --> 00:29:47,820
um as soon as uh quantum computers come

643
00:29:47,820 --> 00:29:48,960
out

644
00:29:48,960 --> 00:29:51,740
um every single password

645
00:29:51,740 --> 00:29:54,020
can be

646
00:29:54,020 --> 00:29:56,000
cracked on

647
00:29:56,000 --> 00:29:59,760
classical computers with gpus and stuff

648
00:29:59,760 --> 00:30:03,360
uh C Pace being a balance pick uh you

649
00:30:03,360 --> 00:30:05,700
don't have pre-computation or secure

650
00:30:05,700 --> 00:30:08,820
registration because there isn't any

651
00:30:08,820 --> 00:30:12,899
uh so the costs of

652
00:30:12,899 --> 00:30:17,220
um BS speak versus opaque 3dh uh

653
00:30:17,220 --> 00:30:20,039
basically oh hey you can see green all

654
00:30:20,039 --> 00:30:22,080
right so uh

655
00:30:22,080 --> 00:30:25,140
so green those are just the extra

656
00:30:25,140 --> 00:30:28,500
operations so they're fairly similar in

657
00:30:28,500 --> 00:30:30,480
speeds

658
00:30:30,480 --> 00:30:33,000
um basically every time you do a uh

659
00:30:33,000 --> 00:30:35,279
scalar Point multiplication

660
00:30:35,279 --> 00:30:38,580
um you then have to do a field invert

661
00:30:38,580 --> 00:30:42,899
which is uh a little expensive

662
00:30:42,899 --> 00:30:45,539
but not as much as you know a scalar

663
00:30:45,539 --> 00:30:47,760
Point multiplication but the nice thing

664
00:30:47,760 --> 00:30:49,679
is you can actually combine multiple of

665
00:30:49,679 --> 00:30:54,120
these field inverts into one that's uh

666
00:30:54,120 --> 00:30:56,580
so if you're wondering why there were

667
00:30:56,580 --> 00:31:00,000
less eyes than scalar from

668
00:31:00,000 --> 00:31:01,500
multiplication

669
00:31:01,500 --> 00:31:06,360
oh and I separated them from uh oprf

670
00:31:06,360 --> 00:31:11,520
and and the uh key exchange uh

671
00:31:11,520 --> 00:31:14,220
anyway so um if you are going to

672
00:31:14,220 --> 00:31:16,860
implement any take uh you should use an

673
00:31:16,860 --> 00:31:19,440
API like this where you initialize all

674
00:31:19,440 --> 00:31:22,260
the information get the secret and

675
00:31:22,260 --> 00:31:24,840
whatnot and then

676
00:31:24,840 --> 00:31:27,960
um return a message or maybe uh you're

677
00:31:27,960 --> 00:31:29,640
supposed to be the one receiving the

678
00:31:29,640 --> 00:31:31,080
first message so there wouldn't be a

679
00:31:31,080 --> 00:31:33,299
message and then when you receive a

680
00:31:33,299 --> 00:31:35,820
message you send it into a function that

681
00:31:35,820 --> 00:31:39,299
then Returns the next message if there

682
00:31:39,299 --> 00:31:41,760
is a next message and a status the

683
00:31:41,760 --> 00:31:45,059
reason for this is I've seen a lot of

684
00:31:45,059 --> 00:31:48,720
implementations of SRP 6A where they

685
00:31:48,720 --> 00:31:51,779
just say calculate a and calculate M1

686
00:31:51,779 --> 00:31:55,080
and they just they're like oh the

687
00:31:55,080 --> 00:31:57,620
developer will know what that means so

688
00:31:57,620 --> 00:32:02,940
this way it's very hard to um misuse the

689
00:32:02,940 --> 00:32:06,179
API and then you would want to be able

690
00:32:06,179 --> 00:32:08,880
to get you know this secret stored uh

691
00:32:08,880 --> 00:32:11,700
the server stored Secret

692
00:32:11,700 --> 00:32:15,000
for uh you know augmented picks and then

693
00:32:15,000 --> 00:32:17,640
also if you're going to do

694
00:32:17,640 --> 00:32:19,039
um

695
00:32:19,039 --> 00:32:21,659
authentication and encryption with a

696
00:32:21,659 --> 00:32:22,340
password

697
00:32:22,340 --> 00:32:25,559
you would want a API function that

698
00:32:25,559 --> 00:32:29,039
returns a key based on the password this

699
00:32:29,039 --> 00:32:32,520
is so that you only run the password uh

700
00:32:32,520 --> 00:32:35,640
the password kdf wants and generate a

701
00:32:35,640 --> 00:32:38,700
key for the pink and a key for uh

702
00:32:38,700 --> 00:32:41,059
encryption

703
00:32:41,059 --> 00:32:43,399
so cheat sheet

704
00:32:43,399 --> 00:32:45,679
these are all the

705
00:32:45,679 --> 00:32:48,960
correct answers according to me

706
00:32:48,960 --> 00:32:51,500
um so

707
00:32:51,659 --> 00:32:55,440
uh so BS speak Double Bs speak those are

708
00:32:55,440 --> 00:32:58,679
actually algorithms that I came up with

709
00:32:58,679 --> 00:33:00,720
um

710
00:33:00,720 --> 00:33:03,240
basically you know it's just hide the

711
00:33:03,240 --> 00:33:07,020
generator with uh hiding the salt and

712
00:33:07,020 --> 00:33:11,940
you know noise KN and then noise uh KK

713
00:33:11,940 --> 00:33:14,519
well 3dh

714
00:33:14,519 --> 00:33:17,399
and then uh use chip if you need the

715
00:33:17,399 --> 00:33:20,239
identity pick

716
00:33:20,539 --> 00:33:23,460
so balance picks uh don't need key

717
00:33:23,460 --> 00:33:24,960
stretching

718
00:33:24,960 --> 00:33:28,679
um and then yes Crypt minimums uh are

719
00:33:28,679 --> 00:33:30,179
there

720
00:33:30,179 --> 00:33:32,880
um I just remembered that I forgot to

721
00:33:32,880 --> 00:33:37,700
mention uh balanced picks and Wi-Fi so

722
00:33:37,700 --> 00:33:41,399
the Wi-Fi Alliance they picked a pick

723
00:33:41,399 --> 00:33:43,320
that was actually known to be broken at

724
00:33:43,320 --> 00:33:47,760
the time uh they that Peg is a balance

725
00:33:47,760 --> 00:33:50,279
take and then they actually store the

726
00:33:50,279 --> 00:33:54,059
password on the access point and device

727
00:33:54,059 --> 00:33:58,519
instead of using a doubly augmented pick

728
00:33:59,519 --> 00:34:01,260
um

729
00:34:01,260 --> 00:34:03,000
so uh

730
00:34:03,000 --> 00:34:05,279
agenda

731
00:34:05,279 --> 00:34:07,740
I'm good okay so

732
00:34:07,740 --> 00:34:10,520
questions

733
00:34:10,560 --> 00:34:13,800
I do have bonus slides oh and references

734
00:34:13,800 --> 00:34:17,940
uh but uh if there's if anyone has

735
00:34:17,940 --> 00:34:20,240
questions

736
00:34:33,300 --> 00:34:36,239
so you want bonus slides

737
00:34:36,239 --> 00:34:38,719
okay

738
00:34:38,879 --> 00:34:40,440
all right so

739
00:34:40,440 --> 00:34:42,440
um

740
00:34:44,099 --> 00:34:47,520
so the secure registration for BS speak

741
00:34:47,520 --> 00:34:51,000
uh the algorithm I created so uh

742
00:34:51,000 --> 00:34:52,918
basically uh

743
00:34:52,918 --> 00:34:55,980
the server checks uh verifies that the

744
00:34:55,980 --> 00:34:59,400
so the entire top half of the algorithm

745
00:34:59,400 --> 00:35:02,820
is yeah uh I have a gist for this on

746
00:35:02,820 --> 00:35:04,680
GitHub

747
00:35:04,680 --> 00:35:07,859
but uh basically you know run through

748
00:35:07,859 --> 00:35:10,980
the the Pake and then this is uh at the

749
00:35:10,980 --> 00:35:14,220
point where the server checks the client

750
00:35:14,220 --> 00:35:16,079
verifier it generates you know another

751
00:35:16,079 --> 00:35:18,619
verifier a session key that session key

752
00:35:18,619 --> 00:35:23,460
encrypts reg and reg Max so reg is the

753
00:35:23,460 --> 00:35:25,619
ephemeral private key that was used

754
00:35:25,619 --> 00:35:30,300
during registration and then reg Max is

755
00:35:30,300 --> 00:35:35,820
um a Mac did I say Max Mac uh

756
00:35:35,820 --> 00:35:40,800
a Mac of the public key reg so the

757
00:35:40,800 --> 00:35:42,300
server encrypts that with the session

758
00:35:42,300 --> 00:35:45,060
sends that over then the client checks

759
00:35:45,060 --> 00:35:47,160
to see the service verifier is correct

760
00:35:47,160 --> 00:35:49,380
you know then it creates the session key

761
00:35:49,380 --> 00:35:52,740
then it decrypts uh the private key

762
00:35:52,740 --> 00:35:55,020
during the farmworld private key during

763
00:35:55,020 --> 00:35:58,140
registration and the Mac

764
00:35:58,140 --> 00:35:59,280
the

765
00:35:59,280 --> 00:36:01,440
Mac key oh

766
00:36:01,440 --> 00:36:03,900
all right so the Mac Keys generated from

767
00:36:03,900 --> 00:36:04,880
the password

768
00:36:04,880 --> 00:36:07,740
so when you run the password kdf you

769
00:36:07,740 --> 00:36:10,440
output a bunch of stuff and one of those

770
00:36:10,440 --> 00:36:14,160
things is the Mac key so the Mac key is

771
00:36:14,160 --> 00:36:18,000
then used to assign the public key or

772
00:36:18,000 --> 00:36:21,960
not sign hash the public key uh you know

773
00:36:21,960 --> 00:36:25,980
that so if that fails then that means

774
00:36:25,980 --> 00:36:27,180
that

775
00:36:27,180 --> 00:36:29,220
um your man in the middle during

776
00:36:29,220 --> 00:36:32,460
registration and no longer

777
00:36:32,460 --> 00:36:34,740
man being man in the middle so you can

778
00:36:34,740 --> 00:36:35,579
detect

779
00:36:35,579 --> 00:36:39,540
when that happened so uh bscrypt uh so

780
00:36:39,540 --> 00:36:42,540
these are all the fun slides for my talk

781
00:36:42,540 --> 00:36:47,400
uh but first one info slide so um

782
00:36:47,400 --> 00:36:50,760
uh so the way that it worked was uh so

783
00:36:50,760 --> 00:36:53,460
cash hard algorithms they use uh they

784
00:36:53,460 --> 00:36:56,339
get their cash hardness from uh small

785
00:36:56,339 --> 00:37:01,320
random uh lookups and memory or Cache uh

786
00:37:01,320 --> 00:37:02,520
so

787
00:37:02,520 --> 00:37:05,700
and then you do every other operation is

788
00:37:05,700 --> 00:37:09,900
ADD X or add xor so uh and I went with

789
00:37:09,900 --> 00:37:12,060
two s boxes like that

790
00:37:12,060 --> 00:37:13,859
um so the interesting thing that I did

791
00:37:13,859 --> 00:37:16,440
with that is these s boxes are

792
00:37:16,440 --> 00:37:20,700
overlapping so uh other algorithms that

793
00:37:20,700 --> 00:37:24,180
are cash hard uh the S boxes need to be

794
00:37:24,180 --> 00:37:27,359
a nice binary number so do these but

795
00:37:27,359 --> 00:37:29,640
since they're overlapping you can get

796
00:37:29,640 --> 00:37:32,700
whatever sizes you know you can get

797
00:37:32,700 --> 00:37:35,820
exotic sizes from

798
00:37:35,820 --> 00:37:39,780
these s boxes so um this is uh this was

799
00:37:39,780 --> 00:37:41,640
a benchmark that I did on on my laptop

800
00:37:41,640 --> 00:37:46,320
uh these settings are uh

801
00:37:46,320 --> 00:37:50,400
such that uh they're all the same uh for

802
00:37:50,400 --> 00:37:54,300
uh a GPU attacker since b-crypt is the

803
00:37:54,300 --> 00:37:56,640
one where you don't have much leeway

804
00:37:56,640 --> 00:37:59,180
because it's uh you know

805
00:37:59,180 --> 00:38:02,520
this was for cost nine you know and the

806
00:38:02,520 --> 00:38:04,920
next one is like twice as hard or

807
00:38:04,920 --> 00:38:06,240
so

808
00:38:06,240 --> 00:38:10,740
um so as a an attacker uh all these

809
00:38:10,740 --> 00:38:13,740
algorithms with the settings uh those

810
00:38:13,740 --> 00:38:15,599
are all considered the same to them they

811
00:38:15,599 --> 00:38:16,800
wouldn't care

812
00:38:16,800 --> 00:38:19,619
but as a Defender you know you can spend

813
00:38:19,619 --> 00:38:22,920
four milliseconds on bscrypt or almost

814
00:38:22,920 --> 00:38:26,160
800 milliseconds on pbkdf2 shot 250

815
00:38:26,160 --> 00:38:28,520
sucks

816
00:38:29,220 --> 00:38:35,040
um so this is the speeds at uh this is a

817
00:38:35,040 --> 00:38:37,579
desktop computer

818
00:38:38,099 --> 00:38:41,040
that I wrote In The Benchmark on with

819
00:38:41,040 --> 00:38:43,800
different number of threads

820
00:38:43,800 --> 00:38:49,040
um so this is for minimum settings

821
00:38:49,619 --> 00:38:52,020
and it basically took one to two

822
00:38:52,020 --> 00:38:54,960
milliseconds which is really really fast

823
00:38:54,960 --> 00:38:58,560
oh uh so

824
00:38:58,560 --> 00:39:00,660
um these are uh

825
00:39:00,660 --> 00:39:04,560
equivalent speeds for cost 15.

826
00:39:04,560 --> 00:39:05,160
um

827
00:39:05,160 --> 00:39:07,500
and you can get these in under 100

828
00:39:07,500 --> 00:39:09,180
milliseconds if you're familiar with

829
00:39:09,180 --> 00:39:13,740
bcrypt cost 15 is ridiculously high and

830
00:39:13,740 --> 00:39:16,020
takes a very long time uh clamp scalar

831
00:39:16,020 --> 00:39:18,359
invert uh so you know you do some stuff

832
00:39:18,359 --> 00:39:24,140
and then but uh yep

833
00:39:24,900 --> 00:39:28,680
oh okay it said 30 seconds

834
00:39:28,680 --> 00:39:30,380
all right thanks

835
00:39:30,380 --> 00:39:33,630
[Applause]

836
00:39:33,630 --> 00:39:36,929
[Music]

837
00:39:40,770 --> 00:39:43,849
[Music]

