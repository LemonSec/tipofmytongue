1
00:00:01,730 --> 00:00:03,720
[Music]

2
00:00:03,720 --> 00:00:06,720
foreign

3
00:00:09,780 --> 00:00:12,420
welcome to my presentation

4
00:00:12,420 --> 00:00:15,299
um today my topic is related to Apple's

5
00:00:15,299 --> 00:00:18,960
Wi-Fi subsystem buzzing and kernel

6
00:00:18,960 --> 00:00:22,080
vulnerability research the title is dive

7
00:00:22,080 --> 00:00:27,560
into Apple IO 80 to 11 family volume 2.

8
00:00:27,560 --> 00:00:31,679
my name is from somal Tech and

9
00:00:31,679 --> 00:00:34,860
Enterprise data security company I can

10
00:00:34,860 --> 00:00:36,500
be reached through this email address

11
00:00:36,500 --> 00:00:40,200
today's penetration can be regarded as

12
00:00:40,200 --> 00:00:42,719
the second part of my black hat USA

13
00:00:42,719 --> 00:00:48,059
Topic in 2020 which can be found here

14
00:00:48,059 --> 00:00:50,520
um if you haven't heard of this topic

15
00:00:50,520 --> 00:00:53,280
before don't worry uh I will first

16
00:00:53,280 --> 00:00:56,160
introduce the subsystem and quickly go

17
00:00:56,160 --> 00:00:58,320
through the previous work

18
00:00:58,320 --> 00:01:01,440
so um the Wi-Fi subsystem

19
00:01:01,440 --> 00:01:05,400
first let's go back to two years ago one

20
00:01:05,400 --> 00:01:07,560
day in January I found an interesting

21
00:01:07,560 --> 00:01:11,400
thing a driver called airport broken Nic

22
00:01:11,400 --> 00:01:13,860
disappeared from the system

23
00:01:13,860 --> 00:01:16,619
but with the deepening of research I

24
00:01:16,619 --> 00:01:19,740
found that starting from IOS 13 and Mac

25
00:01:19,740 --> 00:01:23,220
OS 10.15 Catalina Apple refactored the

26
00:01:23,220 --> 00:01:27,240
the architecture of the 80211 Wi-Fi

27
00:01:27,240 --> 00:01:29,640
clients extensions and the renamed the

28
00:01:29,640 --> 00:01:33,240
new generation to family version 2.

29
00:01:33,240 --> 00:01:35,460
um behind the network architecture

30
00:01:35,460 --> 00:01:38,460
reflecting I think it is a change of

31
00:01:38,460 --> 00:01:41,820
concept one of the goals is to upgrade

32
00:01:41,820 --> 00:01:44,400
from basic network communication

33
00:01:44,400 --> 00:01:47,460
capabilities to support trusted privacy

34
00:01:47,460 --> 00:01:52,020
sharing among all types of Apple devices

35
00:01:52,020 --> 00:01:54,560
here is a brief architecture diagram

36
00:01:54,560 --> 00:01:59,360
from email user mode framework to family

37
00:01:59,360 --> 00:02:01,920
extensions plugging and low-level

38
00:02:01,920 --> 00:02:04,140
extensions we can see the changes

39
00:02:04,140 --> 00:02:06,119
between version 1 and version 2 for

40
00:02:06,119 --> 00:02:07,160
example here

41
00:02:07,160 --> 00:02:10,739
there's no more airports broadcom

42
00:02:10,739 --> 00:02:14,360
serious extensions

43
00:02:14,640 --> 00:02:17,160
and we are security researchers so two

44
00:02:17,160 --> 00:02:21,239
years ago my work also included in early

45
00:02:21,239 --> 00:02:24,660
Asian of fighting framework

46
00:02:24,660 --> 00:02:26,640
um a single code coverage analysis tour

47
00:02:26,640 --> 00:02:29,400
and came up with the kernel address and

48
00:02:29,400 --> 00:02:30,840
advisor solution

49
00:02:30,840 --> 00:02:33,300
as a result of the work kernel

50
00:02:33,300 --> 00:02:36,900
vulnerabilities I I I found can be

51
00:02:36,900 --> 00:02:39,959
classified into several types like

52
00:02:39,959 --> 00:02:42,800
vulnerability affecting all in way one

53
00:02:42,800 --> 00:02:45,660
and holding weights you and both way one

54
00:02:45,660 --> 00:02:47,700
and with you

55
00:02:47,700 --> 00:02:50,160
in specific cases there are some

56
00:02:50,160 --> 00:02:52,560
vulnerabilities I have announced this in

57
00:02:52,560 --> 00:02:55,800
detail but others that I cannot disclose

58
00:02:55,800 --> 00:02:57,840
because they are haven't been fixed

59
00:02:57,840 --> 00:03:00,959
before blackhead USA 2030

60
00:03:00,959 --> 00:03:02,760
um this vulnerabilities are found in

61
00:03:02,760 --> 00:03:05,400
various components among a mentioned

62
00:03:05,400 --> 00:03:11,580
above for example uh 2020 98 32 is in

63
00:03:11,580 --> 00:03:15,840
the family extension while 9833 is in

64
00:03:15,840 --> 00:03:19,459
the underlying driver

65
00:03:19,739 --> 00:03:22,500
and two years have passed let's return

66
00:03:22,500 --> 00:03:25,159
to 2022

67
00:03:25,159 --> 00:03:28,379
all the previous vulnerability have been

68
00:03:28,379 --> 00:03:31,860
fixed and the or security of the

69
00:03:31,860 --> 00:03:34,680
operating system has been grouped Mac OS

70
00:03:34,680 --> 00:03:37,800
speaker Monterey Ventura has been

71
00:03:37,800 --> 00:03:40,200
released and the era of Apple silicon

72
00:03:40,200 --> 00:03:42,299
has arrived but I still have a lot of

73
00:03:42,299 --> 00:03:46,440
questions such as family version 2 has

74
00:03:46,440 --> 00:03:49,620
been reflected again and the name has

75
00:03:49,620 --> 00:03:53,760
been changed back to io8 0 to 11 family

76
00:03:53,760 --> 00:03:56,519
so what happened behind this and how to

77
00:03:56,519 --> 00:03:59,220
identify the new attack surfaces what

78
00:03:59,220 --> 00:04:00,720
else can be improved in security

79
00:04:00,720 --> 00:04:04,440
engineering and most importantly can we

80
00:04:04,440 --> 00:04:07,379
still find a new high quality kernel

81
00:04:07,379 --> 00:04:09,900
vulnerabilities

82
00:04:09,900 --> 00:04:13,140
um yeah please allow me throughout quick

83
00:04:13,140 --> 00:04:15,360
answers to these questions

84
00:04:15,360 --> 00:04:18,899
change is the only consistent and domain

85
00:04:18,899 --> 00:04:21,540
knowledge is very important for security

86
00:04:21,540 --> 00:04:24,479
engineering to be honest too many areas

87
00:04:24,479 --> 00:04:27,419
can be improved and for vulnerability

88
00:04:27,419 --> 00:04:30,900
hunting I have to say uh yes definitely

89
00:04:30,900 --> 00:04:34,099
so here we go

90
00:04:35,820 --> 00:04:38,400
the improvements of the new generation

91
00:04:38,400 --> 00:04:41,639
fighting framework begins with attack

92
00:04:41,639 --> 00:04:45,419
surfaces identification my first demand

93
00:04:45,419 --> 00:04:48,660
is actually very simple I'd like to

94
00:04:48,660 --> 00:04:52,020
change various settings of the network

95
00:04:52,020 --> 00:04:55,860
while sending and receiving data uh then

96
00:04:55,860 --> 00:04:58,740
uh such interface should at least

97
00:04:58,740 --> 00:05:00,720
include

98
00:05:00,720 --> 00:05:03,900
to me at least include traditional bsdio

99
00:05:03,900 --> 00:05:07,440
control iocates connect the core methods

100
00:05:07,440 --> 00:05:10,699
serious and the sales control interface

101
00:05:10,699 --> 00:05:13,919
package sending and receiving and and

102
00:05:13,919 --> 00:05:17,699
network settings faces as for network

103
00:05:17,699 --> 00:05:20,400
interfaces itself we will refer to them

104
00:05:20,400 --> 00:05:22,080
in the following slides

105
00:05:22,080 --> 00:05:25,500
but by the way an interesting topic is

106
00:05:25,500 --> 00:05:28,919
that we should try to fast uh the high

107
00:05:28,919 --> 00:05:31,020
level and the low level interface at the

108
00:05:31,020 --> 00:05:33,180
same time I have a good case two years

109
00:05:33,180 --> 00:05:37,979
ago for for this Mac OS Bluetooth HCI I

110
00:05:37,979 --> 00:05:41,100
can call the the interface provided by

111
00:05:41,100 --> 00:05:43,740
the Bluetooth framework but talking

112
00:05:43,740 --> 00:05:46,139
directly with the kernel means that I

113
00:05:46,139 --> 00:05:48,360
can bypass the checks and the

114
00:05:48,360 --> 00:05:50,539
restrictions from user mode

115
00:05:50,539 --> 00:05:54,240
I mean sending raw data to Firmware

116
00:05:54,240 --> 00:05:56,900
directory

117
00:05:58,979 --> 00:06:01,979
um here I listed some latest cases the

118
00:06:01,979 --> 00:06:06,000
xnu 80 20 branch is not on Apple's

119
00:06:06,000 --> 00:06:09,660
official GitHub but it is important in

120
00:06:09,660 --> 00:06:12,600
the branch we can see the new for

121
00:06:12,600 --> 00:06:15,139
example Nexus i o control interface

122
00:06:15,139 --> 00:06:19,259
Apple also has a a module called Nexus

123
00:06:19,259 --> 00:06:23,580
in addition the the 2080 Branch contains

124
00:06:23,580 --> 00:06:26,039
a lot of Skywalk subsystem source code

125
00:06:26,039 --> 00:06:29,639
such as here

126
00:06:29,639 --> 00:06:30,259
um

127
00:06:30,259 --> 00:06:33,539
Pest Control registration

128
00:06:33,539 --> 00:06:36,000
um so we can extend our fighting

129
00:06:36,000 --> 00:06:40,259
framework based on this domain knowledge

130
00:06:40,259 --> 00:06:42,419
the demand too is about interface

131
00:06:42,419 --> 00:06:46,139
integration I'd like to switch the

132
00:06:46,139 --> 00:06:48,539
status or working mode of the kernel

133
00:06:48,539 --> 00:06:51,240
State machine randomly for different

134
00:06:51,240 --> 00:06:54,720
network interfaces reverse engineering

135
00:06:54,720 --> 00:06:59,100
shows that a larger of number a large

136
00:06:59,100 --> 00:07:01,620
number of interface support different

137
00:07:01,620 --> 00:07:04,860
subsystem or States at the same time

138
00:07:04,860 --> 00:07:08,639
this also leads to the next demand I

139
00:07:08,639 --> 00:07:11,280
need to figure out and track which

140
00:07:11,280 --> 00:07:13,560
interfaces are triggered and not

141
00:07:13,560 --> 00:07:16,080
announces the code coverage rate

142
00:07:16,080 --> 00:07:19,440
uh but I I actually don't want to slow

143
00:07:19,440 --> 00:07:21,900
down the kernel so kernel in life book

144
00:07:21,900 --> 00:07:23,759
based the solution is acceptable

145
00:07:23,759 --> 00:07:27,800
acceptable to me at this stage

146
00:07:28,080 --> 00:07:32,340
and um there are some default interfaces

147
00:07:32,340 --> 00:07:34,020
in the system

148
00:07:34,020 --> 00:07:36,780
um have you uh starting program talked

149
00:07:36,780 --> 00:07:40,500
to them before if the answer is no I

150
00:07:40,500 --> 00:07:43,860
think it is a time to operate the fuzzle

151
00:07:43,860 --> 00:07:44,580
um

152
00:07:44,580 --> 00:07:47,639
for example it ethernet zero is the most

153
00:07:47,639 --> 00:07:51,300
common one AP one AP shot for access

154
00:07:51,300 --> 00:07:55,020
point and awdr is short for ad for

155
00:07:55,020 --> 00:07:58,099
wireless direct link so

156
00:07:58,099 --> 00:08:02,599
there are all our targets

157
00:08:02,819 --> 00:08:06,419
the next part is about xnu tested cases

158
00:08:06,419 --> 00:08:10,580
which can be shown here

159
00:08:11,160 --> 00:08:14,340
I listed some of them like net agents

160
00:08:14,340 --> 00:08:17,819
netbridge if you haven't read these test

161
00:08:17,819 --> 00:08:21,300
cases before I highly uh recommend you

162
00:08:21,300 --> 00:08:24,660
to do so as they contain potential

163
00:08:24,660 --> 00:08:27,500
attack service

164
00:08:27,960 --> 00:08:31,820
so far the the new generation of Apple

165
00:08:31,820 --> 00:08:35,700
80211 fighting framework integrates more

166
00:08:35,700 --> 00:08:38,880
than 40 network interfaces and attack

167
00:08:38,880 --> 00:08:42,539
surfaces one thing I want to mention is

168
00:08:42,539 --> 00:08:45,959
that is the more attack surfaces covered

169
00:08:45,959 --> 00:08:49,320
during each each test is better

170
00:08:49,320 --> 00:08:51,920
um I found that this is not the case

171
00:08:51,920 --> 00:08:56,519
when they are mending random parameters

172
00:08:56,519 --> 00:09:00,060
the result is not as good as expected

173
00:09:00,060 --> 00:09:04,620
so so summary number one uh for for a

174
00:09:04,620 --> 00:09:06,899
tap surface and domain knowledge uh we

175
00:09:06,899 --> 00:09:10,019
need to uh accumulate as much domain

176
00:09:10,019 --> 00:09:11,339
knowledge as possible by learning

177
00:09:11,339 --> 00:09:13,620
external source code documents and test

178
00:09:13,620 --> 00:09:16,500
cases but after we we build the further

179
00:09:16,500 --> 00:09:19,380
uh for each round I think we should

180
00:09:19,380 --> 00:09:22,500
randomly select a two or three interface

181
00:09:22,500 --> 00:09:28,140
units and test them as fully as possible

182
00:09:28,140 --> 00:09:30,420
the next part is related to Kernel

183
00:09:30,420 --> 00:09:33,480
debugging sometimes we have to rely on

184
00:09:33,480 --> 00:09:36,660
the the power of remote kernel debugger

185
00:09:36,660 --> 00:09:40,200
because the information provided in the

186
00:09:40,200 --> 00:09:42,839
Panic log is often not helpful in

187
00:09:42,839 --> 00:09:46,200
finding the root cause variable values

188
00:09:46,200 --> 00:09:50,100
sometimes require Dynamic analysis

189
00:09:50,100 --> 00:09:52,680
um yeah this is a a vulnerability I

190
00:09:52,680 --> 00:09:56,120
discovered last week on Apple silicon M2

191
00:09:56,120 --> 00:10:02,180
Mac OS Ventura uh build number is uh 22

192
00:10:02,180 --> 00:10:07,500
A5 311 F it's a Memory corruption uh

193
00:10:07,500 --> 00:10:08,640
issue

194
00:10:08,640 --> 00:10:11,519
um I have a more detailed picture but

195
00:10:11,519 --> 00:10:13,860
the the armor instruction but never mind

196
00:10:13,860 --> 00:10:17,880
uh the the arm instruction and the core

197
00:10:17,880 --> 00:10:21,660
stack here are actually have no valuable

198
00:10:21,660 --> 00:10:23,820
information without

199
00:10:23,820 --> 00:10:27,240
the help of lldb debugger there's

200
00:10:27,240 --> 00:10:30,080
probably no answer

201
00:10:30,839 --> 00:10:33,899
on Apple silicon platform we lack

202
00:10:33,899 --> 00:10:36,959
official support the KDK document says

203
00:10:36,959 --> 00:10:40,080
Apple silicon does not support active

204
00:10:40,080 --> 00:10:43,019
kernel debugging we cannot set

205
00:10:43,019 --> 00:10:45,600
breakpoints continue code execution

206
00:10:45,600 --> 00:10:49,140
stabbing step over code this means that

207
00:10:49,140 --> 00:10:51,420
we need the help of third-party

208
00:10:51,420 --> 00:10:56,100
debugging Solutions like Asahi Linux

209
00:10:56,100 --> 00:10:59,880
so here's the summary of part two

210
00:10:59,880 --> 00:11:02,519
um yeah we need the help of of

211
00:11:02,519 --> 00:11:05,160
third-party solutions for Apple second

212
00:11:05,160 --> 00:11:07,019
platform

213
00:11:07,019 --> 00:11:10,740
and the the previous Panic picture is a

214
00:11:10,740 --> 00:11:13,560
there's a typical case of corruption so

215
00:11:13,560 --> 00:11:16,079
we need we also need kernel aggression

216
00:11:16,079 --> 00:11:19,640
titles help uh we even need to implement

217
00:11:19,640 --> 00:11:23,040
uh carson-like solution to dynamically

218
00:11:23,040 --> 00:11:26,459
monitor uh special features of

219
00:11:26,459 --> 00:11:28,380
third-party closed-source kernel

220
00:11:28,380 --> 00:11:30,240
extensions

221
00:11:30,240 --> 00:11:31,920
um another thing I would like to discuss

222
00:11:31,920 --> 00:11:35,760
is that uh we have to make some fixes

223
00:11:35,760 --> 00:11:38,399
because sometimes the building tours are

224
00:11:38,399 --> 00:11:42,240
or kernel kdks don't work very well

225
00:11:42,240 --> 00:11:45,680
this is a uh one of the problem I have

226
00:11:45,680 --> 00:11:49,820
encountered things xnu

227
00:11:49,820 --> 00:11:54,120
71.95 a function called console IO alert

228
00:11:54,120 --> 00:11:57,920
has been introduced into the kernel

229
00:11:57,920 --> 00:12:02,940
this is uh this hardcore function will

230
00:12:02,940 --> 00:12:05,100
check whether the system issue console i

231
00:12:05,100 --> 00:12:07,680
o in case of uh interrupt disabled

232
00:12:07,680 --> 00:12:08,519
context

233
00:12:08,519 --> 00:12:10,920
on Windows platform such blue screen of

234
00:12:10,920 --> 00:12:14,220
death can be classified as IO ioqir

235
00:12:14,220 --> 00:12:16,560
errors because we cannot access the

236
00:12:16,560 --> 00:12:20,399
pageable data at dispatch level

237
00:12:20,399 --> 00:12:23,640
however the building cars and kernel

238
00:12:23,640 --> 00:12:27,120
will always issue such i o requests so

239
00:12:27,120 --> 00:12:30,500
that we cannot use the kernel debugger

240
00:12:30,500 --> 00:12:34,440
and uh yeah and and no one complines

241
00:12:34,440 --> 00:12:37,200
about such problems on the internet uh

242
00:12:37,200 --> 00:12:39,000
me either

243
00:12:39,000 --> 00:12:42,000
so so it seems that we all fixed this

244
00:12:42,000 --> 00:12:45,620
kind of boxes silently

245
00:12:45,959 --> 00:12:49,740
and uh four years ago I open sourced a

246
00:12:49,740 --> 00:12:52,800
Mac OS Project named the chemo I used

247
00:12:52,800 --> 00:12:54,899
the kerneling light hook engine to

248
00:12:54,899 --> 00:12:58,620
implement a single uh Carson and code

249
00:12:58,620 --> 00:13:02,279
coverage analysis solution this time I

250
00:13:02,279 --> 00:13:05,700
have already came on and the kernel and

251
00:13:05,700 --> 00:13:08,700
Colonial engine to Apple cell phone

252
00:13:08,700 --> 00:13:11,760
platforms with schema's help I I believe

253
00:13:11,760 --> 00:13:14,540
we can do more

254
00:13:14,639 --> 00:13:17,220
so here's the summary of the part number

255
00:13:17,220 --> 00:13:19,079
three

256
00:13:19,079 --> 00:13:22,500
um yeah sometimes we have to do fix this

257
00:13:22,500 --> 00:13:25,740
because the building uh kernels or tours

258
00:13:25,740 --> 00:13:27,620
don't work very well

259
00:13:27,620 --> 00:13:33,300
the last part I want to mention is uh

260
00:13:33,300 --> 00:13:34,860
uh

261
00:13:34,860 --> 00:13:38,639
in this section is about the Apple SDK

262
00:13:38,639 --> 00:13:41,820
building and the third party tours Apple

263
00:13:41,820 --> 00:13:45,899
SDK contain many useful information such

264
00:13:45,899 --> 00:13:50,700
as Wi-Fi related head files and and data

265
00:13:50,700 --> 00:13:51,740
structures

266
00:13:51,740 --> 00:13:54,180
which will save a lot of time for

267
00:13:54,180 --> 00:13:57,180
reverse engineering in addition

268
00:13:57,180 --> 00:14:00,000
uh many interesting command line Force

269
00:14:00,000 --> 00:14:02,700
are are built in the Mac OS operating

270
00:14:02,700 --> 00:14:07,079
system such as airport and the Skywalk

271
00:14:07,079 --> 00:14:10,440
control you know there are potential

272
00:14:10,440 --> 00:14:13,040
targets

273
00:14:13,740 --> 00:14:16,560
by the way uh the the Wi-Fi developer

274
00:14:16,560 --> 00:14:19,200
Community has been maintaining the

275
00:14:19,200 --> 00:14:22,620
interface and the feature list and I

276
00:14:22,620 --> 00:14:25,079
think we should contribute to the latest

277
00:14:25,079 --> 00:14:27,839
kind of change to the community when we

278
00:14:27,839 --> 00:14:31,800
have time last time I I reversed the

279
00:14:31,800 --> 00:14:36,240
interface like uh this one sky Skywalker

280
00:14:36,240 --> 00:14:41,160
link State and this time for example the

281
00:14:41,160 --> 00:14:42,320
the

282
00:14:42,320 --> 00:14:47,639
Au 1a4 remote camera set is the latest

283
00:14:47,639 --> 00:14:50,180
change

284
00:14:51,240 --> 00:14:54,240
yeah so far we have discussed four

285
00:14:54,240 --> 00:14:57,860
accepts about network interface and

286
00:14:57,860 --> 00:15:01,920
attack surfaces about static analysis uh

287
00:15:01,920 --> 00:15:03,899
static and dynamic analysis methods

288
00:15:03,899 --> 00:15:07,620
creaking tours and and the rest if we

289
00:15:07,620 --> 00:15:11,639
put everything together uh we will get a

290
00:15:11,639 --> 00:15:15,000
roadmap for building a new generation of

291
00:15:15,000 --> 00:15:17,880
Wi-Fi password

292
00:15:17,880 --> 00:15:23,100
so this is a overall architecture of the

293
00:15:23,100 --> 00:15:26,459
system from user mode to Kernel mode

294
00:15:26,459 --> 00:15:30,779
from high level interface to to low

295
00:15:30,779 --> 00:15:33,899
level interface and attack surfaces from

296
00:15:33,899 --> 00:15:37,139
Target to host the machine

297
00:15:37,139 --> 00:15:42,120
it's a it's a it's a big picture

298
00:15:42,120 --> 00:15:47,100
yeah and I have a short video I will

299
00:15:47,100 --> 00:15:50,480
show you how it works

300
00:15:50,480 --> 00:15:50,760
[Music]

301
00:15:50,760 --> 00:15:51,660
um

302
00:15:51,660 --> 00:15:54,120
yeah this is what we do

303
00:15:54,120 --> 00:15:56,760
um on the left is the is a target

304
00:15:56,760 --> 00:15:59,880
machine and the on the right side is the

305
00:15:59,880 --> 00:16:02,339
host machine they are connected by uh

306
00:16:02,339 --> 00:16:08,459
some part 3 to ethernet adapter the

307
00:16:12,839 --> 00:16:15,540
under uh

308
00:16:15,540 --> 00:16:18,480
the the operating systems version is a

309
00:16:18,480 --> 00:16:25,199
Mac OS Ventura build number is uh 22A 5

310
00:16:25,199 --> 00:16:28,980
3 11 F the latest one when I made in

311
00:16:28,980 --> 00:16:31,139
this video

312
00:16:31,139 --> 00:16:34,139
um and then let me

313
00:16:34,139 --> 00:16:37,079
run the from my father

314
00:16:37,079 --> 00:16:40,079
here

315
00:16:40,440 --> 00:16:42,899
and

316
00:16:42,899 --> 00:16:46,800
the kernel crash and the immediately and

317
00:16:46,800 --> 00:16:49,860
the interrupts to the debugger

318
00:16:49,860 --> 00:16:52,680
yeah and the CPU was created

319
00:16:52,680 --> 00:16:55,440
um yeah this is a one of my their day

320
00:16:55,440 --> 00:16:57,360
vulnerability but the information here

321
00:16:57,360 --> 00:17:02,060
is useless don't be worried

322
00:17:04,140 --> 00:17:08,600
okay let's back to the slides

323
00:17:09,540 --> 00:17:13,679
um in the next reception now let's say

324
00:17:13,679 --> 00:17:16,459
um what's the price we have this time

325
00:17:16,459 --> 00:17:20,220
we apologize for the interruption uh

326
00:17:20,220 --> 00:17:23,059
please bear with us

327
00:17:28,079 --> 00:17:31,280
uh can you see my screen

328
00:17:34,679 --> 00:17:37,400
uh

329
00:17:39,120 --> 00:17:43,799
okay uh so let me continue

330
00:17:43,799 --> 00:17:45,179
okay

331
00:17:45,179 --> 00:17:47,940
um this is some of the kernel vulnerable

332
00:17:47,940 --> 00:17:51,120
here I have reported and the some of

333
00:17:51,120 --> 00:17:55,559
which have been uh assigned CV IDs like

334
00:17:55,559 --> 00:17:58,980
uh this one uh 32 837 we will say it

335
00:17:58,980 --> 00:18:02,160
later uh

336
00:18:02,160 --> 00:18:07,320
vulnerabilities uh cve 2020 98 99 and

337
00:18:07,320 --> 00:18:09,840
the 2020 113.

338
00:18:09,840 --> 00:18:12,480
haven't we fixed before blackhead USA

339
00:18:12,480 --> 00:18:16,020
2020s so so I cannot share their details

340
00:18:16,020 --> 00:18:18,960
two years ago since these two kernel

341
00:18:18,960 --> 00:18:21,260
vulnerabilities are very interesting so

342
00:18:21,260 --> 00:18:24,660
uh the the case study part will start

343
00:18:24,660 --> 00:18:25,740
with them

344
00:18:25,740 --> 00:18:28,679
and similarly there are uh also some

345
00:18:28,679 --> 00:18:31,620
vulnerabilities that haven't been fixed

346
00:18:31,620 --> 00:18:34,500
in time this year so I hope we can

347
00:18:34,500 --> 00:18:37,260
continue the topic uh maybe next year or

348
00:18:37,260 --> 00:18:39,740
next time

349
00:18:40,620 --> 00:18:42,539
the first category we are going to

350
00:18:42,539 --> 00:18:46,080
discuss is the kernel stack based debuff

351
00:18:46,080 --> 00:18:48,240
or floor one rability

352
00:18:48,240 --> 00:18:53,580
um 2020 98 99 set Rome profile the patch

353
00:18:53,580 --> 00:18:55,560
information is here

354
00:18:55,560 --> 00:18:56,039
[Music]

355
00:18:56,039 --> 00:18:57,660
um

356
00:18:57,660 --> 00:19:00,960
and the reverse engineering shows that

357
00:19:00,960 --> 00:19:03,799
uh the vulnerability is related to

358
00:19:03,799 --> 00:19:08,640
broadcom's OS independent layer OSL here

359
00:19:08,640 --> 00:19:11,880
we can see a function named the OSL

360
00:19:11,880 --> 00:19:15,020
arrow and the input parameter is the

361
00:19:15,020 --> 00:19:17,340
broadcom arrow

362
00:19:17,340 --> 00:19:21,500
and as we can see here

363
00:19:21,500 --> 00:19:24,559
this Legacy code

364
00:19:24,559 --> 00:19:28,200
uses by to byte assignment assignment

365
00:19:28,200 --> 00:19:31,260
instead of string save string copy

366
00:19:31,260 --> 00:19:32,460
functions

367
00:19:32,460 --> 00:19:35,100
I I think because it's a

368
00:19:35,100 --> 00:19:37,820
Legacy code I think a

369
00:19:37,820 --> 00:19:41,100
compilation of this Legacy code with

370
00:19:41,100 --> 00:19:45,600
iocates must be a challenge and and the

371
00:19:45,600 --> 00:19:48,299
root cause may be related to the the the

372
00:19:48,299 --> 00:19:52,559
the compiler or something

373
00:19:52,559 --> 00:19:55,440
um and then the the most important thing

374
00:19:55,440 --> 00:19:58,020
is uh the wonderful function mistakenly

375
00:19:58,020 --> 00:20:01,260
trusted the input parameter and treat it

376
00:20:01,260 --> 00:20:04,679
as the active condition of the

377
00:20:04,679 --> 00:20:07,320
assignment Loop here

378
00:20:07,320 --> 00:20:10,919
so here's the information where the

379
00:20:10,919 --> 00:20:14,580
kernel crash uh the current instruction

380
00:20:14,580 --> 00:20:21,419
is returned and the RBP uh at this point

381
00:20:21,419 --> 00:20:24,500
is uh is pointed to

382
00:20:24,500 --> 00:20:29,520
8p8 yeah here 8p8 and this one should be

383
00:20:29,520 --> 00:20:31,919
written address and this one should be

384
00:20:31,919 --> 00:20:37,260
uh RS the RBP so we can that means we

385
00:20:37,260 --> 00:20:41,160
can control our AP and and the uh our

386
00:20:41,160 --> 00:20:45,240
RBP so yeah you can see here uh I

387
00:20:45,240 --> 00:20:48,960
already overwrite the RBP register

388
00:20:48,960 --> 00:20:53,880
um and here there's no uh kernel uh

389
00:20:53,880 --> 00:20:57,179
connect uh Canary protection in the

390
00:20:57,179 --> 00:21:01,919
stack so I think it's a related to the

391
00:21:01,919 --> 00:21:04,880
Legacy code

392
00:21:05,400 --> 00:21:08,220
um a frequency ask the question is does

393
00:21:08,220 --> 00:21:10,320
stack based debuffle for vulnerabilities

394
00:21:10,320 --> 00:21:13,260
do make sense today a good example comes

395
00:21:13,260 --> 00:21:17,520
from the penguin team uh CV turning 20

396
00:21:17,520 --> 00:21:19,220
19

397
00:21:19,220 --> 00:21:24,360
8648 in that case air LVN insert Canary

398
00:21:24,360 --> 00:21:27,660
in a wrong position another case worth

399
00:21:27,660 --> 00:21:31,460
measuring is uh this one

400
00:21:31,460 --> 00:21:34,500
uh exportation of Kernel step-based

401
00:21:34,500 --> 00:21:37,500
buffer floor in the real world is not as

402
00:21:37,500 --> 00:21:39,299
straightforward as in the books

403
00:21:39,299 --> 00:21:41,460
especially when you don't have a kind of

404
00:21:41,460 --> 00:21:42,960
debugger

405
00:21:42,960 --> 00:21:44,460
so

406
00:21:44,460 --> 00:21:46,320
um set-based debuffle for wonderability

407
00:21:46,320 --> 00:21:49,080
can still be seen today especially in

408
00:21:49,080 --> 00:21:52,740
the physical and for 1999 the warnable

409
00:21:52,740 --> 00:21:55,159
function has no step cookie production

410
00:21:55,159 --> 00:21:59,280
we can control local variable RBP and

411
00:21:59,280 --> 00:22:02,299
even iip register

412
00:22:02,460 --> 00:22:06,140
two years have passed uh you might ask

413
00:22:06,140 --> 00:22:10,500
are there still such high quality kernel

414
00:22:10,500 --> 00:22:13,080
stack based overall right

415
00:22:13,080 --> 00:22:15,240
vulnerabilities

416
00:22:15,240 --> 00:22:20,659
definitely this time we have the CV 2032

417
00:22:20,659 --> 00:22:22,940
uh

418
00:22:22,940 --> 00:22:28,320
32847 the vulnerability affects iOS 15.6

419
00:22:28,320 --> 00:22:34,158
Mac OS modeling and other platforms

420
00:22:35,340 --> 00:22:40,799
uh 32847 is related to a Bluetooth

421
00:22:40,799 --> 00:22:44,900
profile and configure features in short

422
00:22:44,900 --> 00:22:48,240
a stack based variable are parsed

423
00:22:48,240 --> 00:22:50,520
between functions but the warnable

424
00:22:50,520 --> 00:22:53,039
function mistakenly treats them as

425
00:22:53,039 --> 00:22:56,640
normal and The Trusted inputs

426
00:22:56,640 --> 00:23:00,179
Computing based on this trust can lead

427
00:23:00,179 --> 00:23:02,820
to serious problem

428
00:23:02,820 --> 00:23:03,419
um

429
00:23:03,419 --> 00:23:07,559
yeah I have a panic information here's

430
00:23:07,559 --> 00:23:10,220
the information about the

431
00:23:10,220 --> 00:23:15,720
chronographs you can say RBX here is

432
00:23:15,720 --> 00:23:20,159
um actually a stack based variable and

433
00:23:20,159 --> 00:23:22,280
the processing of

434
00:23:22,280 --> 00:23:24,960
parsing can be controlled for example

435
00:23:24,960 --> 00:23:30,559
the rcx we can control that value so

436
00:23:30,559 --> 00:23:34,039
it's a it's a stack based

437
00:23:34,039 --> 00:23:36,620
calculation and

438
00:23:36,620 --> 00:23:39,480
finally to

439
00:23:39,480 --> 00:23:44,720
uh kernel stack over rate and overwrite

440
00:23:44,940 --> 00:23:48,600
so for for this case I would say

441
00:23:48,600 --> 00:23:51,900
um kernel stack or kernel stack override

442
00:23:51,900 --> 00:23:55,559
vulnerability represented by uh 32 847

443
00:23:55,559 --> 00:23:58,799
can often be found the root cause is

444
00:23:58,799 --> 00:24:01,679
related to stack-based variables being

445
00:24:01,679 --> 00:24:05,280
passed and used for for calculation or

446
00:24:05,280 --> 00:24:09,860
policy but the data in the uh

447
00:24:09,860 --> 00:24:14,039
in the local variable as controlled by

448
00:24:14,039 --> 00:24:18,360
user mode or malicious input so

449
00:24:18,360 --> 00:24:21,000
um yeah this this is a root cause and

450
00:24:21,000 --> 00:24:24,140
the uh the stack

451
00:24:24,140 --> 00:24:27,059
canneries solution Canary solution

452
00:24:27,059 --> 00:24:30,980
cannot solve all the problems

453
00:24:31,140 --> 00:24:34,500
the next category is arbitrary memory

454
00:24:34,500 --> 00:24:37,620
rights vulnerability and the first case

455
00:24:37,620 --> 00:24:43,799
is uh cve 2020 113.

456
00:24:45,120 --> 00:24:48,720
um yeah here's the patch information uh

457
00:24:48,720 --> 00:24:54,260
for example iOS 14 and the Mac oscarina

458
00:24:55,080 --> 00:24:56,700
ink shots

459
00:24:56,700 --> 00:25:00,240
um the the wheels kernel space boundary

460
00:25:00,240 --> 00:25:03,539
condition caused this vulnerability

461
00:25:03,539 --> 00:25:07,799
reverse engineering shows that there are

462
00:25:07,799 --> 00:25:13,919
two branches uh one is one is uh here if

463
00:25:13,919 --> 00:25:18,179
the input parameter is from user mode uh

464
00:25:18,179 --> 00:25:22,140
it needs to enter enter here the copy

465
00:25:22,140 --> 00:25:25,380
out branch and if the input parameter is

466
00:25:25,380 --> 00:25:28,020
from kernel mode is I need to enter the

467
00:25:28,020 --> 00:25:31,559
memory move Branch so

468
00:25:31,559 --> 00:25:34,500
here search boundary condition is

469
00:25:34,500 --> 00:25:38,760
critical in my opinion this is not time

470
00:25:38,760 --> 00:25:43,559
not the time to do a freestyle

471
00:25:43,559 --> 00:25:44,760
um

472
00:25:44,760 --> 00:25:49,260
as you can see here the RDI register the

473
00:25:49,260 --> 00:25:52,980
value in the RDI register can bypass

474
00:25:52,980 --> 00:25:56,700
that weld check a check so

475
00:25:56,700 --> 00:26:00,840
um so so don't let the defensive ends

476
00:26:00,840 --> 00:26:04,799
Showtime uh turning to a show stopper

477
00:26:04,799 --> 00:26:08,520
and and the cost deck is like this

478
00:26:08,520 --> 00:26:12,659
um we yeah that makes very very uh go to

479
00:26:12,659 --> 00:26:15,179
the memory move range

480
00:26:15,179 --> 00:26:19,020
and uh but this parameter can be

481
00:26:19,020 --> 00:26:22,220
controlled from user mode

482
00:26:23,640 --> 00:26:25,260
next

483
00:26:25,260 --> 00:26:26,640
um combined with kernel information

484
00:26:26,640 --> 00:26:29,580
disclosure vulnerability a complete

485
00:26:29,580 --> 00:26:32,700
local EOP chain can be formed a good

486
00:26:32,700 --> 00:26:35,640
information disclosure example I I can

487
00:26:35,640 --> 00:26:38,539
share is the 2020

488
00:26:38,539 --> 00:26:42,120
98-33 uh here is a link if you are

489
00:26:42,120 --> 00:26:44,539
interested

490
00:26:46,260 --> 00:26:52,559
so for uh CBE 2020 uh 130 I would say

491
00:26:52,559 --> 00:26:53,600
um

492
00:26:53,600 --> 00:26:56,760
this is a arbitrary memory right wonder

493
00:26:56,760 --> 00:26:58,919
if it is caused by a boundary checking

494
00:26:58,919 --> 00:27:03,120
error and the the value to be writing is

495
00:27:03,120 --> 00:27:06,240
controllable or predictable uh combined

496
00:27:06,240 --> 00:27:07,679
with kernel information disclosure

497
00:27:07,679 --> 00:27:10,559
vulnerability a complete local EOP chain

498
00:27:10,559 --> 00:27:14,279
export chain can be firmed and the right

499
00:27:14,279 --> 00:27:16,860
primitive is stable and does not require

500
00:27:16,860 --> 00:27:19,220
heat potential manipulation

501
00:27:19,220 --> 00:27:23,520
the the and the the last one is the

502
00:27:23,520 --> 00:27:26,460
interesting part this vulnerability of

503
00:27:26,460 --> 00:27:28,640
facts hand resolve

504
00:27:28,640 --> 00:27:31,220
Apple

505
00:27:31,220 --> 00:27:32,840
bcmwmw

506
00:27:32,840 --> 00:27:36,840
wln Core debugger handlers

507
00:27:36,840 --> 00:27:41,460
actually it's about 200 handlers

508
00:27:41,460 --> 00:27:46,320
and uh yeah two years have passed are

509
00:27:46,320 --> 00:27:48,960
they still such high quality arbitrary

510
00:27:48,960 --> 00:27:51,620
kernel memory rights vulnerabilities

511
00:27:51,620 --> 00:27:56,419
definitely this time we have the cve

512
00:27:56,419 --> 00:27:58,580
2022 to

513
00:27:58,580 --> 00:28:00,140
6762

514
00:28:00,140 --> 00:28:03,080
get RX rate

515
00:28:03,080 --> 00:28:07,880
also uh effective affecting iOS

516
00:28:07,880 --> 00:28:13,039
15.5 and the Mac OS monetary

517
00:28:13,260 --> 00:28:16,919
um yeah for this case uh one sentence is

518
00:28:16,919 --> 00:28:19,799
enough to explain the root cause

519
00:28:19,799 --> 00:28:22,320
the vulnerable function for goes to

520
00:28:22,320 --> 00:28:26,059
sanitize user mode pointer or address

521
00:28:26,059 --> 00:28:30,440
and I also listed several uh

522
00:28:30,440 --> 00:28:33,500
function should be should be called

523
00:28:33,500 --> 00:28:38,039
on when on Mac osrs and FreeBSD platform

524
00:28:38,039 --> 00:28:41,279
which we use copying and copy out Linux

525
00:28:41,279 --> 00:28:44,460
kernel if you use a copy from user and

526
00:28:44,460 --> 00:28:47,640
copy to user and on Windows kernel

527
00:28:47,640 --> 00:28:51,240
um may we should uh

528
00:28:51,240 --> 00:28:54,559
use the proper read and proper right

529
00:28:54,559 --> 00:28:58,679
yeah here is the the cost act

530
00:28:58,679 --> 00:29:01,919
um in other words the kernel will write

531
00:29:01,919 --> 00:29:05,820
data to Banning address you provide

532
00:29:05,820 --> 00:29:09,779
the the RBX is a target address and the

533
00:29:09,779 --> 00:29:13,510
Rex is a it's a fixed value

534
00:29:13,510 --> 00:29:15,380
[Music]

535
00:29:15,380 --> 00:29:19,460
but it just happened

536
00:29:20,820 --> 00:29:23,820
so summary of case number two

537
00:29:23,820 --> 00:29:27,980
um compared with 113 the root cause of

538
00:29:27,980 --> 00:29:30,720
26762 is simpler but the wonderful

539
00:29:30,720 --> 00:29:33,840
functions progress to sanitize usable

540
00:29:33,840 --> 00:29:35,700
pointer

541
00:29:35,700 --> 00:29:36,720
um the

542
00:29:36,720 --> 00:29:39,720
but this simple simple and the stable

543
00:29:39,720 --> 00:29:42,179
kernel vulnerability are powerful they

544
00:29:42,179 --> 00:29:44,520
are perfect for part one

545
00:29:44,520 --> 00:29:46,860
um and for this case the the value to be

546
00:29:46,860 --> 00:29:48,960
writing is fixed

547
00:29:48,960 --> 00:29:52,140
um so because I am also a kind of

548
00:29:52,140 --> 00:29:54,659
developer so uh kernel vulnerability

549
00:29:54,659 --> 00:29:57,539
caused by copying copy out to copy from

550
00:29:57,539 --> 00:30:00,240
user to user corporate copyright are

551
00:30:00,240 --> 00:30:01,620
very common

552
00:30:01,620 --> 00:30:04,100
um kernel developers should

553
00:30:04,100 --> 00:30:07,980
carefully check all the input parameters

554
00:30:07,980 --> 00:30:12,360
yeah all all the input are potentially

555
00:30:12,360 --> 00:30:15,320
harmful

556
00:30:15,360 --> 00:30:20,220
the next category is the most common

557
00:30:20,220 --> 00:30:22,500
um kernel Heap Auto bonds read and write

558
00:30:22,500 --> 00:30:25,860
vulnerability and I can share with you

559
00:30:25,860 --> 00:30:28,620
two cases

560
00:30:28,620 --> 00:30:36,000
um 2022 30 to 837 and and it's 60. uh

561
00:30:36,000 --> 00:30:40,140
yeah iOS and Mac OS Monterey

562
00:30:40,140 --> 00:30:42,740
foreign

563
00:30:47,000 --> 00:30:51,179
I can set the lens to any data for

564
00:30:51,179 --> 00:30:53,100
example if you CDF

565
00:30:53,100 --> 00:30:55,860
um and this is a the test on the Intel

566
00:30:55,860 --> 00:30:59,100
based platform and the cost app is uh is

567
00:30:59,100 --> 00:31:02,820
related to memory copy and yeah this

568
00:31:02,820 --> 00:31:07,080
this is a stack on Apple silicon

569
00:31:07,080 --> 00:31:10,320
um yeah setting the lens to for example

570
00:31:10,320 --> 00:31:13,679
that beef uh means the paranoid is

571
00:31:13,679 --> 00:31:16,620
definitely going to die

572
00:31:16,620 --> 00:31:20,299
um yeah but this kind of uh

573
00:31:20,299 --> 00:31:23,820
vulnerability is very easy to be to be

574
00:31:23,820 --> 00:31:26,159
captured by a kernel debugger but for

575
00:31:26,159 --> 00:31:29,899
this one for the for the second one

576
00:31:30,000 --> 00:31:30,799
um

577
00:31:30,799 --> 00:31:35,279
2020 32 860.

578
00:31:35,279 --> 00:31:37,020
um for this case the total number of

579
00:31:37,020 --> 00:31:39,840
autobahns is not enough to to cause a

580
00:31:39,840 --> 00:31:43,100
kernel panic uh it's just a read uh

581
00:31:43,100 --> 00:31:47,100
several bytes over the uh

582
00:31:47,100 --> 00:31:50,580
keep objects uh or write to that HIPAA

583
00:31:50,580 --> 00:31:53,279
object so in this case we need the help

584
00:31:53,279 --> 00:31:55,860
of Kernel address standard python but

585
00:31:55,860 --> 00:31:59,940
before that we need to fix the the Panic

586
00:31:59,940 --> 00:32:04,080
problems in kernel cars and kernel as

587
00:32:04,080 --> 00:32:07,580
mentioned in the second section

588
00:32:07,860 --> 00:32:11,700
okay Samurai um I would say this type of

589
00:32:11,700 --> 00:32:14,520
vulnerability can be easily captured by

590
00:32:14,520 --> 00:32:18,480
uh kernel address sanitizer and the the

591
00:32:18,480 --> 00:32:21,299
the exploitation of the vulnerabilities

592
00:32:21,299 --> 00:32:24,840
usually requires skills uh such as hip

593
00:32:24,840 --> 00:32:28,140
friendship and I have a good kernel hip

594
00:32:28,140 --> 00:32:33,659
friendship example uh ID is cve 2015

595
00:32:33,659 --> 00:32:37,620
0057 here is the link and the root cause

596
00:32:37,620 --> 00:32:40,620
of this vulnerability are related to a

597
00:32:40,620 --> 00:32:44,240
lot of reasons for example the lack of

598
00:32:44,240 --> 00:32:47,520
effective input verification logical

599
00:32:47,520 --> 00:32:51,120
errors uh integral workflow yeah and so

600
00:32:51,120 --> 00:32:53,059
on

601
00:32:53,059 --> 00:32:56,880
the last case is a type confusion

602
00:32:56,880 --> 00:32:58,550
vulnerability yeah

603
00:32:58,550 --> 00:33:00,980
[Music]

604
00:33:00,980 --> 00:33:03,860
monetary and pixel

605
00:33:03,860 --> 00:33:07,640
packet and the function is related to

606
00:33:07,640 --> 00:33:11,899
update broadcaster MI

607
00:33:11,940 --> 00:33:16,559
so um yeah eshops the first parameter of

608
00:33:16,559 --> 00:33:17,960
the function

609
00:33:17,960 --> 00:33:22,679
update broadcaster Mi is defined defined

610
00:33:22,679 --> 00:33:24,480
as the

611
00:33:24,480 --> 00:33:25,559
um

612
00:33:25,559 --> 00:33:29,279
a Skywalker interface and this object

613
00:33:29,279 --> 00:33:32,399
the size of this object is very big is

614
00:33:32,399 --> 00:33:35,659
greater than uh

615
00:33:35,659 --> 00:33:39,000
6800 bytes in HEX

616
00:33:39,000 --> 00:33:42,960
um and I I dumped that object

617
00:33:42,960 --> 00:33:46,500
uh however things get completed uh when

618
00:33:46,500 --> 00:33:48,620
a function tries to support different

619
00:33:48,620 --> 00:33:51,679
subsystems or interface

620
00:33:51,679 --> 00:33:55,799
please note that the following object is

621
00:33:55,799 --> 00:33:56,960
much

622
00:33:56,960 --> 00:34:01,380
smaller than 6 30. so we can say

623
00:34:01,380 --> 00:34:03,659
um yeah here there are two different

624
00:34:03,659 --> 00:34:07,679
objects and the the value here is

625
00:34:07,679 --> 00:34:10,440
different indicated it's a different

626
00:34:10,440 --> 00:34:13,440
type

627
00:34:13,679 --> 00:34:17,339
so five minutes Mr Wang five minutes

628
00:34:17,339 --> 00:34:18,599
okay

629
00:34:18,599 --> 00:34:21,179
um and therefore High confusion means

630
00:34:21,179 --> 00:34:23,159
this kind of computer means Autobarn

631
00:34:23,159 --> 00:34:24,540
access so

632
00:34:24,540 --> 00:34:26,399
um yeah because this one is a smaller

633
00:34:26,399 --> 00:34:29,699
object and uh it doesn't have uh

634
00:34:29,699 --> 00:34:33,119
six thousand bytes so it's a uh Auto

635
00:34:33,119 --> 00:34:35,460
bomb access and a Autobahn read and

636
00:34:35,460 --> 00:34:38,540
write issue

637
00:34:39,719 --> 00:34:43,500
um after reviewing the patch of this one

638
00:34:43,500 --> 00:34:47,399
two six seven six one I found there is

639
00:34:47,399 --> 00:34:49,800
still a non-point reference bug in the

640
00:34:49,800 --> 00:34:51,418
one book function

641
00:34:51,418 --> 00:34:52,800
um by the way I found a lot of

642
00:34:52,800 --> 00:34:55,379
non-plying the reference box uh

643
00:34:55,379 --> 00:34:57,720
sometimes I have to report them because

644
00:34:57,720 --> 00:35:00,540
they significantly slow down my fighting

645
00:35:00,540 --> 00:35:02,700
effort

646
00:35:02,700 --> 00:35:04,740
um yeah here's a it's a summary for this

647
00:35:04,740 --> 00:35:07,380
case uh callback functions especially

648
00:35:07,380 --> 00:35:09,240
those that's four different

649
00:35:09,240 --> 00:35:13,099
architectures interface or working modes

650
00:35:13,099 --> 00:35:16,500
and state machine and the exception

651
00:35:16,500 --> 00:35:20,160
handling need to be carefully designed

652
00:35:20,160 --> 00:35:23,820
um and the corner case matter Spirit

653
00:35:23,820 --> 00:35:26,880
Patrick is worth auditing

654
00:35:26,880 --> 00:35:28,500
one more things

655
00:35:28,500 --> 00:35:34,200
um uh follow-up ID uh 0706 is related to

656
00:35:34,200 --> 00:35:36,720
Kernel Heap autobahn's right and the

657
00:35:36,720 --> 00:35:38,000
follow-up ID

658
00:35:38,000 --> 00:35:41,160
30 17 is related to arbitrary memory

659
00:35:41,160 --> 00:35:44,880
access I reported them recently

660
00:35:44,880 --> 00:35:50,040
um and four uh 3017 as far as I know

661
00:35:50,040 --> 00:35:53,760
this is the second time in two years or

662
00:35:53,760 --> 00:35:55,920
maybe three years that's the same

663
00:35:55,920 --> 00:35:59,579
function has been found to be vulnerable

664
00:35:59,579 --> 00:36:02,440
um and here are other good examples

665
00:36:02,440 --> 00:36:03,900
[Music]

666
00:36:03,900 --> 00:36:08,880
this one 98-34 uh yeah it's also Wi-Fi

667
00:36:08,880 --> 00:36:11,760
subsystem uh as far as I know second

668
00:36:11,760 --> 00:36:14,220
time to be found vulnerable and this

669
00:36:14,220 --> 00:36:18,300
one's 39 12

670
00:36:18,300 --> 00:36:21,660
um it's about uh a Bluetooth HCI

671
00:36:21,660 --> 00:36:24,720
interface it's a third time in history

672
00:36:24,720 --> 00:36:26,700
the same function has been found to be

673
00:36:26,700 --> 00:36:31,260
vulnerable so yeah so I think

674
00:36:31,260 --> 00:36:33,320
um

675
00:36:35,839 --> 00:36:40,200
some handlers with complex logical will

676
00:36:40,200 --> 00:36:43,020
be introduced with new vulnerability

677
00:36:43,020 --> 00:36:46,140
every once in a while uh even if the old

678
00:36:46,140 --> 00:36:51,180
ones have just been fixed so yeah

679
00:36:51,180 --> 00:36:55,859
yeah last part takeaways and the end

680
00:36:55,859 --> 00:36:58,380
um from the perspective of Kernel

681
00:36:58,380 --> 00:36:59,880
development

682
00:36:59,880 --> 00:37:02,160
um I would say apple has made a lot of

683
00:37:02,160 --> 00:37:03,480
efforts

684
00:37:03,480 --> 00:37:06,180
um and the security of Mac OS and iOS

685
00:37:06,180 --> 00:37:10,920
has been significantly improved and all

686
00:37:10,920 --> 00:37:14,180
includes are potentially harmful

687
00:37:14,180 --> 00:37:18,420
as kernel developers we should carefully

688
00:37:18,420 --> 00:37:21,800
check all the input parameters and the

689
00:37:21,800 --> 00:37:24,180
newer features always means new attack

690
00:37:24,180 --> 00:37:25,920
service

691
00:37:25,920 --> 00:37:28,440
um yeah callback exception handle

692
00:37:28,440 --> 00:37:29,760
instant machine need to be carefully

693
00:37:29,760 --> 00:37:31,020
designed

694
00:37:31,020 --> 00:37:35,579
and form a perspective of vulnerability

695
00:37:35,579 --> 00:37:41,780
research I have listed six points

696
00:37:41,820 --> 00:37:43,560
um and they have basically been

697
00:37:43,560 --> 00:37:48,780
mentioned earlier uh the last one is uh

698
00:37:48,780 --> 00:37:50,640
yeah From perspective of security

699
00:37:50,640 --> 00:37:53,180
engineering and vulnerability accounting

700
00:37:53,180 --> 00:37:58,200
uh yeah I would say if you have done a

701
00:37:58,200 --> 00:38:01,440
point from point one to point four for

702
00:38:01,440 --> 00:38:03,359
example uh integrate interface and

703
00:38:03,359 --> 00:38:06,480
attack surfaces include kernel address

704
00:38:06,480 --> 00:38:09,900
Enticer called coverage analysis for and

705
00:38:09,900 --> 00:38:12,660
the part useful tools to to Apple

706
00:38:12,660 --> 00:38:15,000
silicon platform

707
00:38:15,000 --> 00:38:16,460
um yeah

708
00:38:16,460 --> 00:38:19,619
combined all all available means such as

709
00:38:19,619 --> 00:38:21,859
reverse engineering kernel debugging

710
00:38:21,859 --> 00:38:25,500
access new resources SDK KDK third party

711
00:38:25,500 --> 00:38:26,760
tours

712
00:38:26,760 --> 00:38:29,099
um if you have done this or just studied

713
00:38:29,099 --> 00:38:30,900
you will find

714
00:38:30,900 --> 00:38:33,359
um Apple did a lot of work but the

715
00:38:33,359 --> 00:38:37,920
results seem to be similar to 2030.

716
00:38:37,920 --> 00:38:41,520
um but you know we have seen we all have

717
00:38:41,520 --> 00:38:44,280
seen apples and apple silicon's progress

718
00:38:44,280 --> 00:38:47,400
so yeah let's keep going

719
00:38:47,400 --> 00:38:49,920
yeah thank you that's my presentation

720
00:38:49,920 --> 00:38:52,740
thank you for your time

721
00:38:52,740 --> 00:38:56,040
[Music]

722
00:38:59,890 --> 00:39:02,980
[Music]

