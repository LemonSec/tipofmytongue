1
00:00:01,700 --> 00:00:04,810
[Music]

2
00:00:07,639 --> 00:00:10,980
so welcome to Stellaris rpga downgrade

3
00:00:10,980 --> 00:00:13,920
attack I'm Philippe eitner and basically

4
00:00:13,920 --> 00:00:16,020
this is a is a paper and we also have

5
00:00:16,020 --> 00:00:17,699
co-authors

6
00:00:17,699 --> 00:00:20,100
um Thomas doninker Haya and Mikhail who

7
00:00:20,100 --> 00:00:21,600
aren't here and so I'm the only

8
00:00:21,600 --> 00:00:24,359
presenter but they should be mentioned

9
00:00:24,359 --> 00:00:26,820
because I I didn't do this a lot

10
00:00:26,820 --> 00:00:28,439
right

11
00:00:28,439 --> 00:00:31,320
um so I want to shortly present our team

12
00:00:31,320 --> 00:00:34,739
I said we are a team of five people I

13
00:00:34,739 --> 00:00:36,920
personally and Philip yidner has that

14
00:00:36,920 --> 00:00:39,600
network security researcher I just

15
00:00:39,600 --> 00:00:43,920
finished my PhD at uh and yeah I'm I'm

16
00:00:43,920 --> 00:00:46,260
working on and I also did my PhD at the

17
00:00:46,260 --> 00:00:49,079
Athena National Research Center which

18
00:00:49,079 --> 00:00:51,120
cooperates with the throne over

19
00:00:51,120 --> 00:00:53,460
site Institute

20
00:00:53,460 --> 00:00:55,920
and we are the cyber security and

21
00:00:55,920 --> 00:00:58,620
analytics and defenses Department we

22
00:00:58,620 --> 00:01:00,660
mostly do network security and we focus

23
00:01:00,660 --> 00:01:04,080
on routing and DNS security and so this

24
00:01:04,080 --> 00:01:06,420
talk is about routing security obviously

25
00:01:06,420 --> 00:01:09,600
and so let's start with it

26
00:01:09,600 --> 00:01:12,479
um first we want to look at the outlines

27
00:01:12,479 --> 00:01:15,360
so what I want to present we will look

28
00:01:15,360 --> 00:01:18,659
at bgp and bgp security then I will

29
00:01:18,659 --> 00:01:20,820
present you the resource public key

30
00:01:20,820 --> 00:01:23,520
infrastructure short rpgi because I

31
00:01:23,520 --> 00:01:25,200
think not everyone knows how it works

32
00:01:25,200 --> 00:01:26,340
and what it is

33
00:01:26,340 --> 00:01:28,439
and then I want to present you our

34
00:01:28,439 --> 00:01:30,360
downgrade attack against it obviously

35
00:01:30,360 --> 00:01:33,479
that's the title and finally we look at

36
00:01:33,479 --> 00:01:35,759
the feasibility of this attack and also

37
00:01:35,759 --> 00:01:37,619
some mitigations what can you do against

38
00:01:37,619 --> 00:01:39,540
it right

39
00:01:39,540 --> 00:01:43,680
um so first let's look at bgp bgp is the

40
00:01:43,680 --> 00:01:46,560
Border Gateway protocol and it basically

41
00:01:46,560 --> 00:01:49,140
forms the routing system of the internet

42
00:01:49,140 --> 00:01:51,780
and really basically you have networks

43
00:01:51,780 --> 00:01:53,280
which are called autonomous systems

44
00:01:53,280 --> 00:01:55,740
because our EGP looks at them from nodes

45
00:01:55,740 --> 00:01:57,299
and so everything which happens inside

46
00:01:57,299 --> 00:02:00,659
the network bgp doesn't care for

47
00:02:00,659 --> 00:02:02,520
um but those networks announced the IP

48
00:02:02,520 --> 00:02:04,380
prefixes they have they contain their

49
00:02:04,380 --> 00:02:07,020
own to the neighbors and then the

50
00:02:07,020 --> 00:02:08,580
neighbors essentially forward these

51
00:02:08,580 --> 00:02:11,220
announcements to to other networks and

52
00:02:11,220 --> 00:02:13,200
finally everyone should know how to send

53
00:02:13,200 --> 00:02:15,300
traffic so essentially like energy

54
00:02:15,300 --> 00:02:17,760
example you have some networks one

55
00:02:17,760 --> 00:02:19,560
network sends an announcement to another

56
00:02:19,560 --> 00:02:21,660
Network and that Network forwards it and

57
00:02:21,660 --> 00:02:23,700
puts itself into the path so everyone

58
00:02:23,700 --> 00:02:25,560
knows if I send traffic to that Network

59
00:02:25,560 --> 00:02:27,540
the network will send it to somewhere

60
00:02:27,540 --> 00:02:29,099
else and then it should reach its Target

61
00:02:29,099 --> 00:02:31,760
at some point

62
00:02:32,040 --> 00:02:34,800
um right so the problem with pgp

63
00:02:34,800 --> 00:02:36,480
essentially is it's an old internet

64
00:02:36,480 --> 00:02:39,780
system as any old internet system it

65
00:02:39,780 --> 00:02:41,459
doesn't really contain any security

66
00:02:41,459 --> 00:02:43,560
features because back then you didn't

67
00:02:43,560 --> 00:02:47,760
really need security but essentially

68
00:02:47,760 --> 00:02:50,220
from like just the bgp perspective what

69
00:02:50,220 --> 00:02:51,780
you can do is you can announce a prefix

70
00:02:51,780 --> 00:02:54,480
you do not own basically get into a man

71
00:02:54,480 --> 00:02:56,640
in the middle position and profit from

72
00:02:56,640 --> 00:02:57,599
that

73
00:02:57,599 --> 00:03:00,180
the most known hijack was probably the

74
00:03:00,180 --> 00:03:02,580
my other wallet hijack where there were

75
00:03:02,580 --> 00:03:04,200
attackers which hijacked the Amazon

76
00:03:04,200 --> 00:03:07,739
Route 53 service which hosted the DNS

77
00:03:07,739 --> 00:03:09,720
servers for the my other wallet.com the

78
00:03:09,720 --> 00:03:11,819
domain and what the attackers did they

79
00:03:11,819 --> 00:03:13,379
hijacked the domain and put the phishing

80
00:03:13,379 --> 00:03:15,420
side on this page and basically got

81
00:03:15,420 --> 00:03:18,060
account access to all those

82
00:03:18,060 --> 00:03:19,800
um cryptocurrency wallets and stole a

83
00:03:19,800 --> 00:03:22,140
lot of cryptocurrency

84
00:03:22,140 --> 00:03:24,720
um so right

85
00:03:24,720 --> 00:03:28,560
um to fix that the bgp security problem

86
00:03:28,560 --> 00:03:31,200
um the ietf introduced rpki which is the

87
00:03:31,200 --> 00:03:33,900
resource public key infrastructure as

88
00:03:33,900 --> 00:03:35,459
the name suggests it's a public key

89
00:03:35,459 --> 00:03:37,700
infrastructure for internet resources

90
00:03:37,700 --> 00:03:40,680
and it's a systematic approach to bgp

91
00:03:40,680 --> 00:03:43,980
security where a bit like TLS you have

92
00:03:43,980 --> 00:03:46,319
certificates and those certificates map

93
00:03:46,319 --> 00:03:48,780
address blocks to asm's autonomous

94
00:03:48,780 --> 00:03:50,879
system numbers and those certificates

95
00:03:50,879 --> 00:03:52,640
are called root origin authorizations

96
00:03:52,640 --> 00:03:55,920
and then Roa is essentially contains the

97
00:03:55,920 --> 00:03:58,019
data displayed on the right it's not

98
00:03:58,019 --> 00:04:00,599
Json it's actually a NYX 509 certificate

99
00:04:00,599 --> 00:04:03,360
but it contains essentially the data on

100
00:04:03,360 --> 00:04:05,580
the right so you have an as you have a

101
00:04:05,580 --> 00:04:07,500
prefix and essentially the certificate

102
00:04:07,500 --> 00:04:09,659
says that only this as is allowed to

103
00:04:09,659 --> 00:04:11,519
announce this prefix

104
00:04:11,519 --> 00:04:14,580
and the rule of thrust for these this

105
00:04:14,580 --> 00:04:16,738
public key infrastructure are the rarers

106
00:04:16,738 --> 00:04:18,600
the resource

107
00:04:18,600 --> 00:04:20,540
um Regional internet registries

108
00:04:20,540 --> 00:04:23,040
and basically that makes sense because

109
00:04:23,040 --> 00:04:25,620
the rars allocate address blocks so

110
00:04:25,620 --> 00:04:28,740
basically if you if the RL says you own

111
00:04:28,740 --> 00:04:30,180
an address block then you own an address

112
00:04:30,180 --> 00:04:32,639
block and if you think about it from a

113
00:04:32,639 --> 00:04:34,380
tiles perspective because you are not

114
00:04:34,380 --> 00:04:37,020
even not that into in the routing or bgp

115
00:04:37,020 --> 00:04:38,639
you could think of it like getting your

116
00:04:38,639 --> 00:04:40,560
TLS certificate from the registry so

117
00:04:40,560 --> 00:04:42,900
instead of going to a CA and asking them

118
00:04:42,900 --> 00:04:45,060
okay I want a certificate it's like when

119
00:04:45,060 --> 00:04:47,400
you register the domain you just get the

120
00:04:47,400 --> 00:04:49,139
certificate with it that's kind of how

121
00:04:49,139 --> 00:04:51,180
it works

122
00:04:51,180 --> 00:04:52,380
um right

123
00:04:52,380 --> 00:04:55,440
and so now we assume that everyone has

124
00:04:55,440 --> 00:04:57,479
our race for their networks and their

125
00:04:57,479 --> 00:04:59,280
prefixes which obviously it's not the

126
00:04:59,280 --> 00:05:01,320
case because it's a new system and only

127
00:05:01,320 --> 00:05:03,060
a third of the internet actually uses it

128
00:05:03,060 --> 00:05:06,479
but we assume everyone has it and right

129
00:05:06,479 --> 00:05:08,160
um then we have certificates but

130
00:05:08,160 --> 00:05:09,900
certificates are only worth anything if

131
00:05:09,900 --> 00:05:12,060
you actually validate them right

132
00:05:12,060 --> 00:05:14,580
and if you want to think about how to

133
00:05:14,580 --> 00:05:16,320
validate a certificate

134
00:05:16,320 --> 00:05:18,780
um there's like a naive way or an

135
00:05:18,780 --> 00:05:21,120
obvious way which would mean that

136
00:05:21,120 --> 00:05:22,860
basically you put the certificate right

137
00:05:22,860 --> 00:05:24,960
to the information which is authorized

138
00:05:24,960 --> 00:05:27,479
by the certificate that's like TLS does

139
00:05:27,479 --> 00:05:28,680
it

140
00:05:28,680 --> 00:05:30,419
um however in bgp that's a bit

141
00:05:30,419 --> 00:05:33,000
complicated because you can't really do

142
00:05:33,000 --> 00:05:34,680
it it would mean that all the routers

143
00:05:34,680 --> 00:05:35,880
would need to verify all the

144
00:05:35,880 --> 00:05:37,919
certificates which typically they don't

145
00:05:37,919 --> 00:05:40,020
have the processing resources for

146
00:05:40,020 --> 00:05:42,419
and also it would basically blow up the

147
00:05:42,419 --> 00:05:44,039
size of pgp announcements because

148
00:05:44,039 --> 00:05:45,240
currently an announcement is pretty

149
00:05:45,240 --> 00:05:48,419
small but if you put like 1500 bytes of

150
00:05:48,419 --> 00:05:50,100
certificate next to it it gets a lot

151
00:05:50,100 --> 00:05:51,539
larger and so

152
00:05:51,539 --> 00:05:54,240
it really inflates the traffic

153
00:05:54,240 --> 00:05:56,639
um so what the ietf standardized instead

154
00:05:56,639 --> 00:05:59,160
is the rpgi system which is a

155
00:05:59,160 --> 00:06:02,039
third-party system to bgp and it

156
00:06:02,039 --> 00:06:04,440
basically works with two basic

157
00:06:04,440 --> 00:06:06,380
components there are

158
00:06:06,380 --> 00:06:07,860
repositories which are called

159
00:06:07,860 --> 00:06:10,320
application points and you can think of

160
00:06:10,320 --> 00:06:13,440
them as essentially like an FTP so we're

161
00:06:13,440 --> 00:06:15,660
full of certificates and then there are

162
00:06:15,660 --> 00:06:17,880
relaying parties and those relaying

163
00:06:17,880 --> 00:06:20,160
parties are basically download all the

164
00:06:20,160 --> 00:06:21,900
certificates from the publication points

165
00:06:21,900 --> 00:06:23,759
and then they validate all the

166
00:06:23,759 --> 00:06:26,160
certificates and generate a list of

167
00:06:26,160 --> 00:06:29,460
valid arrays and then they just generate

168
00:06:29,460 --> 00:06:31,380
a list and push that list to the routers

169
00:06:31,380 --> 00:06:33,419
and the routers doesn't have to do any

170
00:06:33,419 --> 00:06:36,120
crypto cryptography just take the list

171
00:06:36,120 --> 00:06:38,759
and have a filter list essentially

172
00:06:38,759 --> 00:06:43,620
so that's rpki and it actually works so

173
00:06:43,620 --> 00:06:45,539
this year there actually wasn't hijacked

174
00:06:45,539 --> 00:06:48,419
by Russian Telecom where they seemingly

175
00:06:48,419 --> 00:06:50,100
hijacked the Twitter prefix probably

176
00:06:50,100 --> 00:06:51,660
because of censorship

177
00:06:51,660 --> 00:06:54,319
and this hijack was actually

178
00:06:54,319 --> 00:06:57,840
prevented by rpki Arrow validation which

179
00:06:57,840 --> 00:07:00,000
means that the hijack basically didn't

180
00:07:00,000 --> 00:07:02,100
really affect other networks

181
00:07:02,100 --> 00:07:05,639
yeah except Russian Telecom obviously

182
00:07:05,639 --> 00:07:07,080
um right

183
00:07:07,080 --> 00:07:08,360
so

184
00:07:08,360 --> 00:07:12,240
assuming lpki works now we as an

185
00:07:12,240 --> 00:07:14,160
attacker are like a security researcher

186
00:07:14,160 --> 00:07:16,560
we want to attack it right and if you

187
00:07:16,560 --> 00:07:18,900
think about how to attack our PTI

188
00:07:18,900 --> 00:07:20,639
you essentially have different options

189
00:07:20,639 --> 00:07:23,160
the most obvious one is to attack the

190
00:07:23,160 --> 00:07:25,800
Integrity of the system so the most

191
00:07:25,800 --> 00:07:27,479
obvious attack would be to create a

192
00:07:27,479 --> 00:07:30,120
malicious ra for that you have to break

193
00:07:30,120 --> 00:07:31,860
the crypto and breaking crypto is hard

194
00:07:31,860 --> 00:07:34,139
so we don't want to do that

195
00:07:34,139 --> 00:07:35,759
um the second way would be to try to

196
00:07:35,759 --> 00:07:37,740
fool a CA that's kind of how you attack

197
00:07:37,740 --> 00:07:40,560
TLS you can try to fool this a into

198
00:07:40,560 --> 00:07:43,020
giving your certificate by for example

199
00:07:43,020 --> 00:07:45,599
attacking domain validation and that's

200
00:07:45,599 --> 00:07:48,419
the problem because in rpki the ca is

201
00:07:48,419 --> 00:07:50,759
the RAR and the IR has first-hand

202
00:07:50,759 --> 00:07:52,740
knowledge about who owns a network block

203
00:07:52,740 --> 00:07:55,319
not like in TLS where the ca doesn't

204
00:07:55,319 --> 00:07:57,120
really know if you own a domain they can

205
00:07:57,120 --> 00:07:59,220
just see if if you have control over it

206
00:07:59,220 --> 00:08:02,460
in rpgi the certificate is generated by

207
00:08:02,460 --> 00:08:03,240
the

208
00:08:03,240 --> 00:08:05,880
a person who basically gives you the

209
00:08:05,880 --> 00:08:07,919
resource so it's hard to fool them

210
00:08:07,919 --> 00:08:10,560
because they have firsthand knowledge

211
00:08:10,560 --> 00:08:13,020
um and finally obviously because rpki is

212
00:08:13,020 --> 00:08:14,699
a third hand system

213
00:08:14,699 --> 00:08:17,880
we cannot take its availability and so

214
00:08:17,880 --> 00:08:19,979
essentially the idea is that

215
00:08:19,979 --> 00:08:22,740
you have bgp which the routers talk to

216
00:08:22,740 --> 00:08:25,259
each other and you have rpgi and if you

217
00:08:25,259 --> 00:08:27,599
attack rpki and it stops working then

218
00:08:27,599 --> 00:08:29,400
you still have the bgp routers and the

219
00:08:29,400 --> 00:08:31,319
bgps routers still have to do decisions

220
00:08:31,319 --> 00:08:32,820
but they don't have security information

221
00:08:32,820 --> 00:08:36,179
to base it on and so that's how this

222
00:08:36,179 --> 00:08:37,860
attack starts

223
00:08:37,860 --> 00:08:40,020
and

224
00:08:40,020 --> 00:08:43,440
some basic also to start with

225
00:08:43,440 --> 00:08:45,480
um basically you have to know that rpgi

226
00:08:45,480 --> 00:08:47,399
is built for In-Place deployment as any

227
00:08:47,399 --> 00:08:50,580
internet system so you have to re hand

228
00:08:50,580 --> 00:08:52,860
have to handle cases where basically the

229
00:08:52,860 --> 00:08:56,220
as which you get an announcement for it

230
00:08:56,220 --> 00:08:59,220
doesn't use RPG is how it's like this

231
00:08:59,220 --> 00:09:02,040
for like 60 of the internet so this is

232
00:09:02,040 --> 00:09:04,320
very important

233
00:09:04,320 --> 00:09:06,060
um in practice what happens is that

234
00:09:06,060 --> 00:09:08,339
essentially if there are no arrays you

235
00:09:08,339 --> 00:09:10,440
assume that the network hasn't deployed

236
00:09:10,440 --> 00:09:13,140
rpgi yet and so essentially there is no

237
00:09:13,140 --> 00:09:14,880
validation happening which means you

238
00:09:14,880 --> 00:09:16,980
accept any bgp announcement at least

239
00:09:16,980 --> 00:09:18,540
from the applic side of things there

240
00:09:18,540 --> 00:09:20,100
might be other bgp filters but we don't

241
00:09:20,100 --> 00:09:22,620
consider that

242
00:09:22,620 --> 00:09:23,940
um right

243
00:09:23,940 --> 00:09:26,160
and so now the problem is that relaying

244
00:09:26,160 --> 00:09:27,779
parties cannot really differentiate

245
00:09:27,779 --> 00:09:30,000
between erroneous failures by

246
00:09:30,000 --> 00:09:31,980
downloading all these certificates and

247
00:09:31,980 --> 00:09:34,200
attacks which attack the connection and

248
00:09:34,200 --> 00:09:36,060
so that's because that's the reason why

249
00:09:36,060 --> 00:09:38,279
you can't download the certificate

250
00:09:38,279 --> 00:09:41,100
and what race what happens if they can't

251
00:09:41,100 --> 00:09:42,720
download the certificates is essentially

252
00:09:42,720 --> 00:09:45,720
they will use our data unless it's valid

253
00:09:45,720 --> 00:09:48,300
and after it expires it's assumed that

254
00:09:48,300 --> 00:09:50,279
there are no arrays more and disabled

255
00:09:50,279 --> 00:09:52,459
rpki protection

256
00:09:52,459 --> 00:09:56,339
and so this forms our attack plan so

257
00:09:56,339 --> 00:09:58,140
what we want to do is we want to break

258
00:09:58,140 --> 00:10:00,120
communication between the relaying party

259
00:10:00,120 --> 00:10:02,100
and the publication point then the

260
00:10:02,100 --> 00:10:03,360
relaying party can't fetch information

261
00:10:03,360 --> 00:10:06,240
it basically turns off rpgi and then we

262
00:10:06,240 --> 00:10:09,620
can start our bgp hijack

263
00:10:09,779 --> 00:10:10,860
um right

264
00:10:10,860 --> 00:10:13,740
so that's the basic plan now to make it

265
00:10:13,740 --> 00:10:15,480
work we have to figure out some details

266
00:10:15,480 --> 00:10:17,700
and the first detail is how does

267
00:10:17,700 --> 00:10:19,680
three-laying parties work and what

268
00:10:19,680 --> 00:10:23,220
happens if they can't update things so

269
00:10:23,220 --> 00:10:25,560
um the first thing to know is that I

270
00:10:25,560 --> 00:10:28,019
said RPG or our relaying part is casual

271
00:10:28,019 --> 00:10:31,440
data until it expires however our A's

272
00:10:31,440 --> 00:10:33,600
our certificates and they expire pretty

273
00:10:33,600 --> 00:10:35,820
slowly we measure that we basically

274
00:10:35,820 --> 00:10:37,620
fetched all the arrays

275
00:10:37,620 --> 00:10:39,720
and we found that most of them have a

276
00:10:39,720 --> 00:10:42,600
validity of one year so we can't really

277
00:10:42,600 --> 00:10:44,459
block communication for one year that's

278
00:10:44,459 --> 00:10:46,579
not a practical attack

279
00:10:46,579 --> 00:10:48,600
however there's something called a

280
00:10:48,600 --> 00:10:51,600
manifest file and manifest files you can

281
00:10:51,600 --> 00:10:53,279
essentially think of as a signed index

282
00:10:53,279 --> 00:10:54,959
of valid arrays

283
00:10:54,959 --> 00:10:56,779
so

284
00:10:56,779 --> 00:10:59,880
basically manifest files are designed to

285
00:10:59,880 --> 00:11:02,160
prevent replay attacks so assume you

286
00:11:02,160 --> 00:11:03,779
have an array which is valid for one

287
00:11:03,779 --> 00:11:06,660
year but now you sell the prefix to

288
00:11:06,660 --> 00:11:09,240
someone else then the array is still

289
00:11:09,240 --> 00:11:11,519
valid you could revoke it but there's

290
00:11:11,519 --> 00:11:13,079
not really a good system for a location

291
00:11:13,079 --> 00:11:15,480
either so what happens is that

292
00:11:15,480 --> 00:11:18,060
essentially you remove it from the

293
00:11:18,060 --> 00:11:19,980
Manifest and by that it essentially

294
00:11:19,980 --> 00:11:21,300
becomes invalid because it's not

295
00:11:21,300 --> 00:11:22,980
reference anymore

296
00:11:22,980 --> 00:11:24,660
and this prevents the replay attack

297
00:11:24,660 --> 00:11:26,399
because then now you can't really use

298
00:11:26,399 --> 00:11:28,670
the array anymore

299
00:11:28,670 --> 00:11:28,860
[Music]

300
00:11:28,860 --> 00:11:30,600
um

301
00:11:30,600 --> 00:11:32,640
that's a valid mechanism however it

302
00:11:32,640 --> 00:11:34,620
means that because these manifest files

303
00:11:34,620 --> 00:11:36,540
have a short expiry time we can

304
00:11:36,540 --> 00:11:40,440
essentially use them to basically expire

305
00:11:40,440 --> 00:11:42,480
an RA because of the Manifest file which

306
00:11:42,480 --> 00:11:44,760
references the array times out the

307
00:11:44,760 --> 00:11:47,160
reference our way will also time out

308
00:11:47,160 --> 00:11:49,680
and manifest files have a short expiry

309
00:11:49,680 --> 00:11:53,399
time typically one day and so you only

310
00:11:53,399 --> 00:11:55,380
have to make the blocking communication

311
00:11:55,380 --> 00:11:57,300
attack one day

312
00:11:57,300 --> 00:12:00,959
and effectively actually because of how

313
00:12:00,959 --> 00:12:03,000
those manifest files are generated you

314
00:12:03,000 --> 00:12:05,040
only have to do it for six hours because

315
00:12:05,040 --> 00:12:07,620
what so the publication Point software

316
00:12:07,620 --> 00:12:10,200
which everyone uses it's called kill

317
00:12:10,200 --> 00:12:12,180
and what the software does is

318
00:12:12,180 --> 00:12:13,800
essentially it only regenerates a

319
00:12:13,800 --> 00:12:16,380
manifest file if it has six hours or

320
00:12:16,380 --> 00:12:18,540
less of validity left and so what you

321
00:12:18,540 --> 00:12:20,160
can do as an attacker you can wait for

322
00:12:20,160 --> 00:12:22,320
this six hours to start essentially and

323
00:12:22,320 --> 00:12:24,360
start your attack just right before so

324
00:12:24,360 --> 00:12:25,680
you only have to do it for six hours

325
00:12:25,680 --> 00:12:28,620
instead of one day

326
00:12:28,620 --> 00:12:30,540
right so

327
00:12:30,540 --> 00:12:32,339
we now know that we essentially have to

328
00:12:32,339 --> 00:12:34,019
break communication for six hours

329
00:12:34,019 --> 00:12:36,180
between a relaying party and the

330
00:12:36,180 --> 00:12:38,100
publication point and now we have to

331
00:12:38,100 --> 00:12:40,440
figure out how how we do it right you

332
00:12:40,440 --> 00:12:42,120
obviously could do a denial service

333
00:12:42,120 --> 00:12:43,920
attack but denial of service is pretty

334
00:12:43,920 --> 00:12:46,500
noisy and there's a chance that it would

335
00:12:46,500 --> 00:12:49,019
get noticed during the six hours and if

336
00:12:49,019 --> 00:12:51,420
they block your denial of service attack

337
00:12:51,420 --> 00:12:53,639
then essentially you you don't achieve

338
00:12:53,639 --> 00:12:55,560
anything because you have to actually

339
00:12:55,560 --> 00:12:57,300
block it for straight six hours

340
00:12:57,300 --> 00:12:59,760
otherwise the relaying party updates and

341
00:12:59,760 --> 00:13:00,959
nothing's gained

342
00:13:00,959 --> 00:13:02,760
so what we do instead is a low rate

343
00:13:02,760 --> 00:13:03,720
attack

344
00:13:03,720 --> 00:13:06,060
especially we explored rate limiting on

345
00:13:06,060 --> 00:13:08,040
the publication point or the name server

346
00:13:08,040 --> 00:13:11,220
which serves the domain and so rate

347
00:13:11,220 --> 00:13:12,779
limiting is a mechanism which is

348
00:13:12,779 --> 00:13:14,220
designed to prevent denial of service

349
00:13:14,220 --> 00:13:16,440
the basic idea is you have a rate limit

350
00:13:16,440 --> 00:13:18,480
which is for example a thousand packets

351
00:13:18,480 --> 00:13:20,760
per second per IP address of her IP

352
00:13:20,760 --> 00:13:22,139
address subnet

353
00:13:22,139 --> 00:13:24,180
and anything which is above that number

354
00:13:24,180 --> 00:13:25,920
will just get thrown into the trash bin

355
00:13:25,920 --> 00:13:27,540
essentially so if there's a rate limit

356
00:13:27,540 --> 00:13:30,600
of thousand packets and you get 2 000

357
00:13:30,600 --> 00:13:32,399
requests for example you just serve the

358
00:13:32,399 --> 00:13:34,380
first thousand and then you wait until

359
00:13:34,380 --> 00:13:36,180
the bucket is refreshed and then you do

360
00:13:36,180 --> 00:13:38,279
the same again

361
00:13:38,279 --> 00:13:40,200
and what you can do as an attacker you

362
00:13:40,200 --> 00:13:41,760
can essentially exploit this mechanism

363
00:13:41,760 --> 00:13:44,040
to block communication from a known

364
00:13:44,040 --> 00:13:46,200
source because what you can do is you

365
00:13:46,200 --> 00:13:49,200
send basically spoofed requests either

366
00:13:49,200 --> 00:13:51,660
spoof DNS requests that's easy because

367
00:13:51,660 --> 00:13:55,019
it's UDP or you can also spoof TCP Sun

368
00:13:55,019 --> 00:13:57,360
packets some firewalls to also read

369
00:13:57,360 --> 00:13:59,339
limiting rate limiting for TCP certain

370
00:13:59,339 --> 00:14:00,300
packets

371
00:14:00,300 --> 00:14:02,399
and what this will do is it essentially

372
00:14:02,399 --> 00:14:04,200
blocks the victim because you as an

373
00:14:04,200 --> 00:14:06,480
attacker reach the rate limit and then

374
00:14:06,480 --> 00:14:08,700
the victim won't get an answer anymore

375
00:14:08,700 --> 00:14:11,399
and after six hours the idea is that

376
00:14:11,399 --> 00:14:13,019
because the victim can't communicate

377
00:14:13,019 --> 00:14:15,540
with the publication point the Manifest

378
00:14:15,540 --> 00:14:17,220
times out

379
00:14:17,220 --> 00:14:18,899
so

380
00:14:18,899 --> 00:14:21,300
how often is rate limiting used in rpgi

381
00:14:21,300 --> 00:14:22,860
right because if you want to exploit it

382
00:14:22,860 --> 00:14:24,660
it has to be present

383
00:14:24,660 --> 00:14:28,019
and we measured this essentially in the

384
00:14:28,019 --> 00:14:30,240
real publication points currently there

385
00:14:30,240 --> 00:14:31,680
aren't that many they're like the big

386
00:14:31,680 --> 00:14:33,480
publication funds which are operated by

387
00:14:33,480 --> 00:14:36,600
all the IRS and you can also own your

388
00:14:36,600 --> 00:14:38,639
um or operate your own publication point

389
00:14:38,639 --> 00:14:41,040
we will get to that later

390
00:14:41,040 --> 00:14:43,620
um but anyway we basically measured if

391
00:14:43,620 --> 00:14:46,199
they do DC TNS request rate limiting or

392
00:14:46,199 --> 00:14:48,300
if they do TCP soon request rate

393
00:14:48,300 --> 00:14:51,120
limiting and our results are that

394
00:14:51,120 --> 00:14:52,500
roughly half of the publication

395
00:14:52,500 --> 00:14:54,660
publication points do that with a limit

396
00:14:54,660 --> 00:14:57,720
lower than 10 000 packets per second

397
00:14:57,720 --> 00:14:59,760
and we didn't test it higher because we

398
00:14:59,760 --> 00:15:02,040
didn't really affect the service

399
00:15:02,040 --> 00:15:05,880
and they host roughly 60 of the rpke

400
00:15:05,880 --> 00:15:08,880
protected ipv4 space so basically the

401
00:15:08,880 --> 00:15:12,260
publication points which do rate

402
00:15:23,339 --> 00:15:26,100
and very low we Define under 60 packets

403
00:15:26,100 --> 00:15:28,560
per second not because 60 packets is a

404
00:15:28,560 --> 00:15:30,600
important number because that's the

405
00:15:30,600 --> 00:15:33,420
biggest number we would consider low so

406
00:15:33,420 --> 00:15:34,920
I think the next biggest one would be

407
00:15:34,920 --> 00:15:36,720
like 800.

408
00:15:36,720 --> 00:15:38,760
um which we measured

409
00:15:38,760 --> 00:15:43,139
and so now to basically think about

410
00:15:43,139 --> 00:15:48,060
feasibility we would say okay so 60 of

411
00:15:48,060 --> 00:15:51,779
the rpki protected a piece four space is

412
00:15:51,779 --> 00:15:54,180
does rate limiting or the publication

413
00:15:54,180 --> 00:15:56,519
points do rate limiting so it is

414
00:15:56,519 --> 00:16:00,000
vulnerable to the attack in a sense

415
00:16:00,000 --> 00:16:01,980
um this is kind of true however you have

416
00:16:01,980 --> 00:16:04,139
to think about an example

417
00:16:04,139 --> 00:16:06,839
so consider an example where you have a

418
00:16:06,839 --> 00:16:08,579
rate limit of 1000 packets per second

419
00:16:08,579 --> 00:16:10,920
and you have an attacker which sends

420
00:16:10,920 --> 00:16:13,019
both packets with a rate of 10 000

421
00:16:13,019 --> 00:16:15,660
packets per second and statistically

422
00:16:15,660 --> 00:16:17,579
that means that there's a connection

423
00:16:17,579 --> 00:16:20,399
success for the valid user which is

424
00:16:20,399 --> 00:16:24,240
roughly 10 because essentially at the

425
00:16:24,240 --> 00:16:26,699
publication point you will have 10 000

426
00:16:26,699 --> 00:16:28,920
queries in a second and you will also

427
00:16:28,920 --> 00:16:30,980
have one query coming from the

428
00:16:30,980 --> 00:16:33,720
legitimate user and you would have

429
00:16:33,720 --> 00:16:35,519
thousands queries out of them which will

430
00:16:35,519 --> 00:16:37,920
get served and because we don't know

431
00:16:37,920 --> 00:16:39,540
when the bucket is refilled which

432
00:16:39,540 --> 00:16:43,079
controls when you answer the query or

433
00:16:43,079 --> 00:16:44,759
when you don't

434
00:16:44,759 --> 00:16:46,620
um you can essentially statistically say

435
00:16:46,620 --> 00:16:49,019
okay the success chance for a connection

436
00:16:49,019 --> 00:16:51,959
is roughly 10 and then the inverse of

437
00:16:51,959 --> 00:16:54,360
that which is the attack success chance

438
00:16:54,360 --> 00:16:56,579
is essentially 90 percent

439
00:16:56,579 --> 00:17:00,060
which is a good success chance right

440
00:17:00,060 --> 00:17:01,800
um the problem is that relaying parties

441
00:17:01,800 --> 00:17:03,660
will retry so they don't only do one

442
00:17:03,660 --> 00:17:05,520
query they do like if it doesn't work

443
00:17:05,520 --> 00:17:06,900
they will do another query and another

444
00:17:06,900 --> 00:17:08,760
query and another query and at some

445
00:17:08,760 --> 00:17:10,559
point it will time out

446
00:17:10,559 --> 00:17:13,199
so if you really want to think if it's

447
00:17:13,199 --> 00:17:15,179
feasible we have to think about all

448
00:17:15,179 --> 00:17:16,740
these retries and we have to think about

449
00:17:16,740 --> 00:17:18,839
the six hour period and thing

450
00:17:18,839 --> 00:17:21,240
essentially measure how many retrys will

451
00:17:21,240 --> 00:17:24,299
be done during six hours

452
00:17:24,299 --> 00:17:27,720
and so this is what we've done using a

453
00:17:27,720 --> 00:17:29,820
simulation so basically we looked at

454
00:17:29,820 --> 00:17:31,440
different implementations of relaying

455
00:17:31,440 --> 00:17:33,419
parties and we looked at different

456
00:17:33,419 --> 00:17:35,220
operating system and resolver

457
00:17:35,220 --> 00:17:37,140
implementations essentially like DNS

458
00:17:37,140 --> 00:17:39,000
resolvers

459
00:17:39,000 --> 00:17:40,320
um do different

460
00:17:40,320 --> 00:17:42,660
numbers of retries if they don't get an

461
00:17:42,660 --> 00:17:45,120
answer for example Unbound does maybe

462
00:17:45,120 --> 00:17:47,940
only one but nine does maybe more

463
00:17:47,940 --> 00:17:48,600
um

464
00:17:48,600 --> 00:17:50,580
Etc and you also have to consider the

465
00:17:50,580 --> 00:17:52,500
real world rate limits which are in

466
00:17:52,500 --> 00:17:53,700
place

467
00:17:53,700 --> 00:17:56,539
and so what our simulation essentially

468
00:17:56,539 --> 00:17:59,039
shows is that this attack is very

469
00:17:59,039 --> 00:18:01,380
feasible for low rate limits like under

470
00:18:01,380 --> 00:18:04,500
60 packets per second and in this case

471
00:18:04,500 --> 00:18:08,100
is the attackers need to like send the a

472
00:18:08,100 --> 00:18:10,020
rate of spoof packets like in the range

473
00:18:10,020 --> 00:18:12,419
of 1000 packets per second and then it's

474
00:18:12,419 --> 00:18:15,000
basically leads to the situation where

475
00:18:15,000 --> 00:18:16,740
the

476
00:18:16,740 --> 00:18:18,660
um relaying party won't get an answer

477
00:18:18,660 --> 00:18:20,700
during six hours and so the Manifest

478
00:18:20,700 --> 00:18:22,200
file will time out

479
00:18:22,200 --> 00:18:24,660
however if you have a higher rate limit

480
00:18:24,660 --> 00:18:27,360
say a thousand packets per second the

481
00:18:27,360 --> 00:18:28,980
attack gets a lot more challenging

482
00:18:28,980 --> 00:18:32,220
because basically it's the number or the

483
00:18:32,220 --> 00:18:33,539
rate of

484
00:18:33,539 --> 00:18:35,700
packets the attacker needs to send like

485
00:18:35,700 --> 00:18:37,679
gets into the range of 10 000 packets

486
00:18:37,679 --> 00:18:39,240
and then you get into the range of a

487
00:18:39,240 --> 00:18:41,580
real denier of service attack it's not a

488
00:18:41,580 --> 00:18:43,320
low rate attack anymore so you could

489
00:18:43,320 --> 00:18:45,299
argue that it's probably getting noticed

490
00:18:45,299 --> 00:18:47,580
and also maybe the attacker isn't

491
00:18:47,580 --> 00:18:49,320
actually be able to send that many

492
00:18:49,320 --> 00:18:51,539
packets because internet connection

493
00:18:51,539 --> 00:18:53,820
whatever connection to the Target system

494
00:18:53,820 --> 00:18:55,460
Etc

495
00:18:55,460 --> 00:18:59,340
so the attack works but it only works in

496
00:18:59,340 --> 00:19:01,740
some cases so obviously we we want to

497
00:19:01,740 --> 00:19:03,059
try harder right

498
00:19:03,059 --> 00:19:06,240
and so additionally to the low rates

499
00:19:06,240 --> 00:19:08,760
attack what we can exploit is that rpgi

500
00:19:08,760 --> 00:19:10,140
levels delegation

501
00:19:10,140 --> 00:19:12,539
as I previously said you can run your

502
00:19:12,539 --> 00:19:14,460
own publication point this is because

503
00:19:14,460 --> 00:19:18,419
it's like a federative system right

504
00:19:18,419 --> 00:19:20,820
um they don't want to basically if if

505
00:19:20,820 --> 00:19:22,740
you don't use delegation then the

506
00:19:22,740 --> 00:19:24,840
publication point is run by the IR so

507
00:19:24,840 --> 00:19:27,240
you enter your information into the ier

508
00:19:27,240 --> 00:19:29,039
portal and you have to say okay I own

509
00:19:29,039 --> 00:19:31,080
this prefixes which is certified by the

510
00:19:31,080 --> 00:19:34,020
IR and then the IR generates a CA for

511
00:19:34,020 --> 00:19:36,360
you and puts all the certificates onto

512
00:19:36,360 --> 00:19:38,460
the IRS publication point

513
00:19:38,460 --> 00:19:40,320
some networks don't want to use that

514
00:19:40,320 --> 00:19:41,820
they want to control their own

515
00:19:41,820 --> 00:19:44,400
infrastructure which makes sense

516
00:19:44,400 --> 00:19:46,440
but what this means is that essentially

517
00:19:46,440 --> 00:19:49,860
because any internet Network can own

518
00:19:49,860 --> 00:19:51,840
their own publication Point attackers

519
00:19:51,840 --> 00:19:53,460
can also run their own publication find

520
00:19:53,460 --> 00:19:56,220
they just have to purchase an IP prefix

521
00:19:56,220 --> 00:19:58,380
and then what this means is that the

522
00:19:58,380 --> 00:20:00,120
relaying parties have to contact the

523
00:20:00,120 --> 00:20:02,520
attacker publication point to fetch the

524
00:20:02,520 --> 00:20:04,100
information about the attacker Network

525
00:20:04,100 --> 00:20:08,400
and so what is basically provides us as

526
00:20:08,400 --> 00:20:10,620
an attacker is a direct connection to

527
00:20:10,620 --> 00:20:12,240
the relaying party which we want to

528
00:20:12,240 --> 00:20:14,820
attack which is an upgrade to the

529
00:20:14,820 --> 00:20:16,559
previous situation where we just we're

530
00:20:16,559 --> 00:20:18,600
an off path advisory but we don't really

531
00:20:18,600 --> 00:20:21,000
have any connection we can connect to

532
00:20:21,000 --> 00:20:23,160
the relaying party and we can connect to

533
00:20:23,160 --> 00:20:24,419
the publication point but it doesn't

534
00:20:24,419 --> 00:20:26,039
really allow you to allow us to do

535
00:20:26,039 --> 00:20:27,299
anything

536
00:20:27,299 --> 00:20:29,880
so the question is can we exploit this

537
00:20:29,880 --> 00:20:31,860
to break the relaying party and

538
00:20:31,860 --> 00:20:33,720
obviously because I asked this question

539
00:20:33,720 --> 00:20:36,539
the answer is yes and so this is what we

540
00:20:36,539 --> 00:20:38,640
call this the Loris attack

541
00:20:38,640 --> 00:20:40,559
um name comes from slow lowers which is

542
00:20:40,559 --> 00:20:43,140
an attack against HTTP where you send

543
00:20:43,140 --> 00:20:45,120
requests really slowly

544
00:20:45,120 --> 00:20:46,640
and then it's the lowest attack

545
00:20:46,640 --> 00:20:49,020
basically what you do is that the

546
00:20:49,020 --> 00:20:50,880
attacker becomes a malicious publication

547
00:20:50,880 --> 00:20:53,460
Point by owning a prefix going to the IR

548
00:20:53,460 --> 00:20:56,039
portal and entering an URL there

549
00:20:56,039 --> 00:20:59,039
and then if a public if a relaying party

550
00:20:59,039 --> 00:21:01,860
wants to fetch the RAS for the attackers

551
00:21:01,860 --> 00:21:04,380
Network he will connect to the

552
00:21:04,380 --> 00:21:06,299
publication point and the publication

553
00:21:06,299 --> 00:21:08,400
point will basically sense the response

554
00:21:08,400 --> 00:21:11,580
as slow as possible but as fast as

555
00:21:11,580 --> 00:21:14,340
possible so the

556
00:21:14,340 --> 00:21:15,840
um the relaying party doesn't time out

557
00:21:15,840 --> 00:21:18,380
right there are some limits but

558
00:21:18,380 --> 00:21:20,400
basically like you you have to send

559
00:21:20,400 --> 00:21:22,320
traffic like it's faster than 10

560
00:21:22,320 --> 00:21:24,720
kilobytes per second or whatever and you

561
00:21:24,720 --> 00:21:26,760
can then also inflate the file size so

562
00:21:26,760 --> 00:21:28,440
the connection goes on and on and on and

563
00:21:28,440 --> 00:21:30,059
on and you're basically downloading

564
00:21:30,059 --> 00:21:31,980
random data

565
00:21:31,980 --> 00:21:34,740
um and the idea is basically that this

566
00:21:34,740 --> 00:21:36,840
hinders the relaying party from doing

567
00:21:36,840 --> 00:21:39,299
many retrys so because it's still

568
00:21:39,299 --> 00:21:41,520
updating our malicious data which is

569
00:21:41,520 --> 00:21:44,580
just useless and it can't update the

570
00:21:44,580 --> 00:21:46,320
data it actually wants to have which is

571
00:21:46,320 --> 00:21:48,240
about the other networks we want to do

572
00:21:48,240 --> 00:21:50,460
our bgp hijack against

573
00:21:50,460 --> 00:21:53,580
and what this helps us with or what this

574
00:21:53,580 --> 00:21:56,280
this basically gains us as an attacker

575
00:21:56,280 --> 00:21:59,520
is that it reduces the number of retries

576
00:21:59,520 --> 00:22:01,559
the relaying party can do against the

577
00:22:01,559 --> 00:22:03,299
publication point which we do the low

578
00:22:03,299 --> 00:22:05,640
rate attack against and our simulation

579
00:22:05,640 --> 00:22:08,700
shows that essentially this helps with

580
00:22:08,700 --> 00:22:12,299
the return because it reduces the amount

581
00:22:12,299 --> 00:22:14,100
of spoof packets you need to send in the

582
00:22:14,100 --> 00:22:16,440
previous attack a lot so it becomes

583
00:22:16,440 --> 00:22:18,299
feasible again

584
00:22:18,299 --> 00:22:20,100
right

585
00:22:20,100 --> 00:22:24,240
so basically to wrap it up to provide

586
00:22:24,240 --> 00:22:28,200
like a summary we showed that the design

587
00:22:28,200 --> 00:22:30,840
of rpgi is a third-party system allows

588
00:22:30,840 --> 00:22:32,760
attacks on its availability just because

589
00:22:32,760 --> 00:22:34,320
it's a third-party system you can

590
00:22:34,320 --> 00:22:36,840
basically attack it independently of bgp

591
00:22:36,840 --> 00:22:39,299
and that presents a problem because it

592
00:22:39,299 --> 00:22:40,860
basically you have a decent

593
00:22:40,860 --> 00:22:43,020
pronunciation

594
00:22:43,020 --> 00:22:44,520
um I showed you that the rate limiting

595
00:22:44,520 --> 00:22:47,159
mechanism can be exploited to block

596
00:22:47,159 --> 00:22:49,919
legitimate requests from off path

597
00:22:49,919 --> 00:22:52,260
now you have to know the IP address of

598
00:22:52,260 --> 00:22:53,640
the relaying party and we haven't talked

599
00:22:53,640 --> 00:22:56,400
about that but it's possible because the

600
00:22:56,400 --> 00:22:58,440
same reason because of the Solaris

601
00:22:58,440 --> 00:23:00,840
attack you can run a publication Point

602
00:23:00,840 --> 00:23:02,520
yourself and that means you see all the

603
00:23:02,520 --> 00:23:04,620
relaying parties in the world and you

604
00:23:04,620 --> 00:23:07,559
can also reference them to the networks

605
00:23:07,559 --> 00:23:10,919
which they protect by guessing but also

606
00:23:10,919 --> 00:23:12,960
by running an algorithm like you can

607
00:23:12,960 --> 00:23:15,360
essentially present one Roa to One

608
00:23:15,360 --> 00:23:17,760
Network one ra to another Network and

609
00:23:17,760 --> 00:23:20,220
see which networks are affected by your

610
00:23:20,220 --> 00:23:23,000
different Ras

611
00:23:23,460 --> 00:23:25,799
um we have also shown that the short

612
00:23:25,799 --> 00:23:27,840
validate as short manifest validity

613
00:23:27,840 --> 00:23:29,400
makes the attack feasible because

614
00:23:29,400 --> 00:23:31,080
without the Manifest files you would

615
00:23:31,080 --> 00:23:33,000
have to block communication for one year

616
00:23:33,000 --> 00:23:35,940
which isn't just isn't practical right

617
00:23:35,940 --> 00:23:38,100
and finally if the rate limit is too

618
00:23:38,100 --> 00:23:40,080
high you can also become a publication

619
00:23:40,080 --> 00:23:41,940
Point yourself and you can prevent the

620
00:23:41,940 --> 00:23:44,159
relaying party under attack you can also

621
00:23:44,159 --> 00:23:46,140
do it selectively so it affects less

622
00:23:46,140 --> 00:23:49,140
delivery Lane parties from doing its

623
00:23:49,140 --> 00:23:52,080
work so it's essentially busy with your

624
00:23:52,080 --> 00:23:53,640
malicious data

625
00:23:53,640 --> 00:23:56,460
and can't update that often

626
00:23:56,460 --> 00:24:00,000
and so coming from that summary we also

627
00:24:00,000 --> 00:24:01,919
have some recommendations obviously what

628
00:24:01,919 --> 00:24:04,320
you can do against the attack and with

629
00:24:04,320 --> 00:24:07,020
basically two groups so if you operate a

630
00:24:07,020 --> 00:24:08,460
publication point

631
00:24:08,460 --> 00:24:11,340
you first should avoid really low rate

632
00:24:11,340 --> 00:24:13,620
limits so

633
00:24:13,620 --> 00:24:15,600
for example if you have a rate limit of

634
00:24:15,600 --> 00:24:18,539
the the Dimension 60 packets per second

635
00:24:18,539 --> 00:24:21,720
per Epi it's probably enough for real

636
00:24:21,720 --> 00:24:24,600
operation but from an attacker point of

637
00:24:24,600 --> 00:24:27,840
view it's very easy to spoof and nobody

638
00:24:27,840 --> 00:24:29,760
notices like 60 packets per second

639
00:24:29,760 --> 00:24:31,620
there's nothing I mean if you have like

640
00:24:31,620 --> 00:24:33,720
a firewall or an IDs it might show up

641
00:24:33,720 --> 00:24:35,580
there but it's not like it doesn't

642
00:24:35,580 --> 00:24:37,980
affect anything

643
00:24:37,980 --> 00:24:39,000
um

644
00:24:39,000 --> 00:24:41,340
right so going from 60 packets per

645
00:24:41,340 --> 00:24:42,780
second maybe to a thousand packets per

646
00:24:42,780 --> 00:24:44,820
second is probably enough to defend

647
00:24:44,820 --> 00:24:46,380
against scenario service but it

648
00:24:46,380 --> 00:24:48,840
basically makes the attack which I

649
00:24:48,840 --> 00:24:51,120
presented a lot harder

650
00:24:51,120 --> 00:24:53,520
um then if we consider manifest files we

651
00:24:53,520 --> 00:24:55,500
suggest that you should increase the

652
00:24:55,500 --> 00:24:58,020
value the validity of a manifest file

653
00:24:58,020 --> 00:25:01,260
maybe go from like a day to a week

654
00:25:01,260 --> 00:25:03,360
and also what should happen is to

655
00:25:03,360 --> 00:25:04,919
randomize when the Manifest is

656
00:25:04,919 --> 00:25:07,020
regenerated so the attacker doesn't know

657
00:25:07,020 --> 00:25:09,539
that six hours before it times out I

658
00:25:09,539 --> 00:25:11,220
need to start the attack you should

659
00:25:11,220 --> 00:25:12,900
randomize it so the attacker has to

660
00:25:12,900 --> 00:25:14,700
basically do it for the whole period of

661
00:25:14,700 --> 00:25:16,380
one week and he doesn't know when it

662
00:25:16,380 --> 00:25:18,299
happens

663
00:25:18,299 --> 00:25:20,940
um and finally we suggest that at least

664
00:25:20,940 --> 00:25:22,799
some publication points should take a

665
00:25:22,799 --> 00:25:24,779
more robust deployment policy basically

666
00:25:24,779 --> 00:25:26,340
like some publication points everything

667
00:25:26,340 --> 00:25:28,440
is one is in one network and also the

668
00:25:28,440 --> 00:25:31,020
name servers on the same network and so

669
00:25:31,020 --> 00:25:32,940
basically cutting off this network from

670
00:25:32,940 --> 00:25:36,799
the internet also cuts off our PPI

671
00:25:36,799 --> 00:25:39,919
and if you're operating a relaying party

672
00:25:39,919 --> 00:25:42,600
we suggest that first you can monitor

673
00:25:42,600 --> 00:25:45,480
connection failures because they can

674
00:25:45,480 --> 00:25:47,940
indicate an attack however there are

675
00:25:47,940 --> 00:25:49,620
also a lot of random connection failures

676
00:25:49,620 --> 00:25:51,900
because someone didn't restart their

677
00:25:51,900 --> 00:25:53,640
publication point or some reason so that

678
00:25:53,640 --> 00:25:55,559
there are a lot of Errors I mean it's a

679
00:25:55,559 --> 00:25:57,840
new system so people aren't that used to

680
00:25:57,840 --> 00:25:58,880
it maybe

681
00:25:58,880 --> 00:26:01,980
but anyway a connection failure can

682
00:26:01,980 --> 00:26:03,659
indicate such an attack

683
00:26:03,659 --> 00:26:06,480
and what the implementers of relaying

684
00:26:06,480 --> 00:26:08,400
parties can do when they also already

685
00:26:08,400 --> 00:26:10,860
did that in some ways is that they

686
00:26:10,860 --> 00:26:12,840
should consider limiting the processing

687
00:26:12,840 --> 00:26:14,640
time which they spend on one publication

688
00:26:14,640 --> 00:26:16,740
point or like on one the malicious

689
00:26:16,740 --> 00:26:19,320
attacker repository so an attacker

690
00:26:19,320 --> 00:26:21,900
repository can just basically

691
00:26:21,900 --> 00:26:23,820
and use up all the resources of the

692
00:26:23,820 --> 00:26:26,039
relaying party and make it not do its

693
00:26:26,039 --> 00:26:29,279
work for the other repositories

694
00:26:29,279 --> 00:26:31,080
right

695
00:26:31,080 --> 00:26:33,419
um that's the presentation now I would

696
00:26:33,419 --> 00:26:35,770
take questions and otherwise thank you

697
00:26:35,770 --> 00:26:41,299
[Music]

698
00:26:45,140 --> 00:26:48,249
[Music]

