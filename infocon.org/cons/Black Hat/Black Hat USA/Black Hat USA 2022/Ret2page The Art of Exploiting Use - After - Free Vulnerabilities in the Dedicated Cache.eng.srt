1
00:00:01,700 --> 00:00:04,810
[Music]

2
00:00:07,280 --> 00:00:09,720
and without further Ado I'd like to

3
00:00:09,720 --> 00:00:13,320
welcome today's presenter Yang Wang

4
00:00:13,320 --> 00:00:16,980
okay good morning and evening welcome to

5
00:00:16,980 --> 00:00:18,420
my talk

6
00:00:18,420 --> 00:00:21,359
my name is Wang Yong I focus on Android

7
00:00:21,359 --> 00:00:23,580
and the brother vulnerability research

8
00:00:23,580 --> 00:00:26,760
you can follow me on Twitter my DM is

9
00:00:26,760 --> 00:00:30,060
open by the way one of my friends wants

10
00:00:30,060 --> 00:00:32,399
to know if there are some jobs in Canada

11
00:00:32,399 --> 00:00:35,040
for foreigners he is also a

12
00:00:35,040 --> 00:00:37,980
vulnerability researcher in Singapore I

13
00:00:37,980 --> 00:00:40,379
really appreciate your sharing of the

14
00:00:40,379 --> 00:00:42,680
job information

15
00:00:42,680 --> 00:00:46,140
Harry's agenda I will briefly review the

16
00:00:46,140 --> 00:00:48,680
conventional ideas and steps of

17
00:00:48,680 --> 00:00:52,020
exploiting a uaf vulnerability in the

18
00:00:52,020 --> 00:00:54,840
general cache and the details why the

19
00:00:54,840 --> 00:00:57,899
technique of cross-cash attack has to be

20
00:00:57,899 --> 00:01:01,379
a planned when exploiting a uaf bug in

21
00:01:01,379 --> 00:01:04,140
the dedicated cache then I will

22
00:01:04,140 --> 00:01:06,960
introduce a return to page a new and

23
00:01:06,960 --> 00:01:09,560
generic exploitation technique

24
00:01:09,560 --> 00:01:12,600
specifically I will review the critical

25
00:01:12,600 --> 00:01:15,299
parts of both slab and the body

26
00:01:15,299 --> 00:01:17,880
allocator and I will detail the

27
00:01:17,880 --> 00:01:20,400
well-known cross-catch attack techniques

28
00:01:20,400 --> 00:01:23,280
and discuss why those techniques are

29
00:01:23,280 --> 00:01:25,280
time consuming and the less

30
00:01:25,280 --> 00:01:28,619
deterministic and I will also detail the

31
00:01:28,619 --> 00:01:31,500
king idea and the cons conceptual module

32
00:01:31,500 --> 00:01:35,100
behind the new exploitation technique

33
00:01:35,100 --> 00:01:38,820
to clearly understand the technique I

34
00:01:38,820 --> 00:01:41,040
will discuss the two typical uaf

35
00:01:41,040 --> 00:01:44,400
vulnerability fixed the last year detail

36
00:01:44,400 --> 00:01:47,360
how to exploit those two vulnerabilities

37
00:01:47,360 --> 00:01:50,820
respectively the last part just to

38
00:01:50,820 --> 00:01:52,979
summarize the talk

39
00:01:52,979 --> 00:01:55,500
he needs Carlo there are two main

40
00:01:55,500 --> 00:01:58,380
categories have cash in general and

41
00:01:58,380 --> 00:02:01,799
dedicated cash for General cash just the

42
00:02:01,799 --> 00:02:05,340
invoke King memory and K3 API to

43
00:02:05,340 --> 00:02:09,179
allocate and free a help object for

44
00:02:09,179 --> 00:02:12,780
dedicated cash the cash is created for a

45
00:02:12,780 --> 00:02:16,140
specific type the cache must be provided

46
00:02:16,140 --> 00:02:18,900
when allocating and freely

47
00:02:18,900 --> 00:02:21,660
as a mailing attack surfaces have been

48
00:02:21,660 --> 00:02:25,319
reduced in recent years fuel bugs can be

49
00:02:25,319 --> 00:02:28,860
exploited from the untrusted app context

50
00:02:28,860 --> 00:02:32,099
in Android color the second part in the

51
00:02:32,099 --> 00:02:35,040
e-post subsystem and the fourth stack in

52
00:02:35,040 --> 00:02:38,340
the TTY driver fixed last year caused a

53
00:02:38,340 --> 00:02:41,040
little attention even if the second one

54
00:02:41,040 --> 00:02:44,099
was exploited in the wild last year

55
00:02:44,099 --> 00:02:47,819
there are no public exploits against the

56
00:02:47,819 --> 00:02:50,760
Andrew Carlo like the 30 people

57
00:02:50,760 --> 00:02:54,480
before discussing how to exploit a uaf

58
00:02:54,480 --> 00:02:57,900
vulnerability in the dedicated cache let

59
00:02:57,900 --> 00:03:00,379
me briefly review two typical Android

60
00:03:00,379 --> 00:03:04,019
exploits about how to exploit a uaf

61
00:03:04,019 --> 00:03:07,160
vulnerability in the general cache

62
00:03:07,160 --> 00:03:11,220
the first UF vulnerability is 7 year

63
00:03:11,220 --> 00:03:12,780
2020

64
00:03:12,780 --> 00:03:14,400
00141

65
00:03:14,400 --> 00:03:17,700
they'll relate the bundle load object is

66
00:03:17,700 --> 00:03:20,120
allocated the incremental

67
00:03:20,120 --> 00:03:24,599
128 cash in order to leak color pointers

68
00:03:24,599 --> 00:03:28,879
to fix a bundle load object the public

69
00:03:28,879 --> 00:03:32,400
exploits brings the e-port item objects

70
00:03:32,400 --> 00:03:36,540
to refuse the freedom load object after

71
00:03:36,540 --> 00:03:39,180
leaking the color address of the bundle

72
00:03:39,180 --> 00:03:42,480
load the exploit use send messages

73
00:03:42,480 --> 00:03:45,239
spring technique to obtain the right

74
00:03:45,239 --> 00:03:48,720
primitive then corrupts some fields of

75
00:03:48,720 --> 00:03:52,260
the leaked pointers to obtain aarw

76
00:03:52,260 --> 00:03:54,780
Primitives

77
00:03:54,780 --> 00:03:57,920
the second one is also a bundled bag

78
00:03:57,920 --> 00:04:00,959
they exploit the Sprint's sequential

79
00:04:00,959 --> 00:04:05,459
field objects to obtain color slide

80
00:04:05,459 --> 00:04:08,099
and it also use the import

81
00:04:08,099 --> 00:04:14,000
item objects to obtain aarw Primitives

82
00:04:14,459 --> 00:04:17,279
it's easy to find out that the

83
00:04:17,279 --> 00:04:19,680
sequential field objects is indeed

84
00:04:19,680 --> 00:04:22,860
allocated in the general cache however

85
00:04:22,860 --> 00:04:26,520
the EP item object seems to be allocated

86
00:04:26,520 --> 00:04:29,759
in the dedicated cache to remove the

87
00:04:29,759 --> 00:04:34,639
doubt let's dive into the source code

88
00:04:35,520 --> 00:04:39,300
when creating a new slab cache it will

89
00:04:39,300 --> 00:04:43,800
first try try to find an alias cache it

90
00:04:43,800 --> 00:04:48,500
aims to reduce the memory fragmentation

91
00:04:48,780 --> 00:04:51,540
the slab emerge config is usually

92
00:04:51,540 --> 00:04:55,560
enabled is the main switch if the new

93
00:04:55,560 --> 00:04:58,740
cache has a Constructor it can't be

94
00:04:58,740 --> 00:05:02,220
merged into another cache without any

95
00:05:02,220 --> 00:05:05,220
special flag the new cache will be

96
00:05:05,220 --> 00:05:07,680
merged into a ladder cache which

97
00:05:07,680 --> 00:05:10,080
basically has the same config

98
00:05:10,080 --> 00:05:14,160
so that's why the EP item objects are

99
00:05:14,160 --> 00:05:16,680
eventually allocated in the general

100
00:05:16,680 --> 00:05:18,960
cache

101
00:05:18,960 --> 00:05:21,740
since change the front Android Carlo

102
00:05:21,740 --> 00:05:25,620
4.19 the sequential field has its own

103
00:05:25,620 --> 00:05:29,520
cache and the slab account is said that

104
00:05:29,520 --> 00:05:32,759
means both of the two caches will not be

105
00:05:32,759 --> 00:05:36,120
merged into the general cache

106
00:05:36,120 --> 00:05:39,780
for our Android 10 to Android 11 both

107
00:05:39,780 --> 00:05:42,300
free list the random and the free list

108
00:05:42,300 --> 00:05:46,560
adding are enabled in my view is a kind

109
00:05:46,560 --> 00:05:50,880
of oob mitigation and the Alias switch

110
00:05:50,880 --> 00:05:53,520
is still on

111
00:05:53,520 --> 00:05:56,360
from Android Carlo

112
00:05:56,360 --> 00:06:02,360
5.4 the aliens switch is off by default

113
00:06:02,699 --> 00:06:05,580
that means the dedicated cache will

114
00:06:05,580 --> 00:06:08,100
never be merged into the general cache

115
00:06:08,100 --> 00:06:11,820
the cost is increasing the memory

116
00:06:11,820 --> 00:06:13,759
fragmentation

117
00:06:13,759 --> 00:06:16,919
upperversity different types of objects

118
00:06:16,919 --> 00:06:20,580
are located from Key malloc still share

119
00:06:20,580 --> 00:06:22,020
the same cache

120
00:06:22,020 --> 00:06:25,860
so to exploit a bug in the dedicated

121
00:06:25,860 --> 00:06:29,520
cache cross-cash attack techniques have

122
00:06:29,520 --> 00:06:32,539
to be planned to make different types of

123
00:06:32,539 --> 00:06:36,600
objects share the same memory

124
00:06:36,600 --> 00:06:39,319
a second part

125
00:06:39,319 --> 00:06:42,720
here is the typical example of how to

126
00:06:42,720 --> 00:06:46,259
exploit a uaf bug the key point is that

127
00:06:46,259 --> 00:06:48,780
one of these is overlapped with the

128
00:06:48,780 --> 00:06:52,919
freed of GPA so how to refuse the freed

129
00:06:52,919 --> 00:06:56,100
object a reliably to answer this

130
00:06:56,100 --> 00:06:58,680
question let's dive into the slab

131
00:06:58,680 --> 00:07:00,180
allocator

132
00:07:00,180 --> 00:07:03,600
here I list some important fields of the

133
00:07:03,600 --> 00:07:07,620
key memory cache now just focus on the

134
00:07:07,620 --> 00:07:11,280
CPU slab and the load fields the CPU

135
00:07:11,280 --> 00:07:16,080
cache CPU sorry the key memory is cache

136
00:07:16,080 --> 00:07:19,440
CPU is allocated the perceptual call

137
00:07:19,440 --> 00:07:22,319
first we can pick a process to a

138
00:07:22,319 --> 00:07:25,139
specific CPU code by setting the

139
00:07:25,139 --> 00:07:27,660
Affinity where you can simply record

140
00:07:27,660 --> 00:07:31,620
like that there is only one CPU core for

141
00:07:31,620 --> 00:07:34,560
Android devices the long uniform memory

142
00:07:34,560 --> 00:07:39,180
architecture does not be enabled enabled

143
00:07:39,180 --> 00:07:44,039
so there is only one CPU cash load

144
00:07:44,039 --> 00:07:47,160
when allocating an object is the first

145
00:07:47,160 --> 00:07:50,759
tries to allocate from the free list the

146
00:07:50,759 --> 00:07:54,419
free list points to a physical page here

147
00:07:54,419 --> 00:07:58,460
the page frame number is the 11th result

148
00:07:58,460 --> 00:08:03,120
is the so-called first path

149
00:08:03,120 --> 00:08:07,620
when page 1100 is full page 2020 the

150
00:08:07,620 --> 00:08:12,259
result will be moved into the free list

151
00:08:12,259 --> 00:08:15,840
now the partial list of K member cache

152
00:08:15,840 --> 00:08:20,220
is empty Pages 33000 in the past you

153
00:08:20,220 --> 00:08:23,220
list of key memory cash load will be

154
00:08:23,220 --> 00:08:26,759
moved into the free list

155
00:08:26,759 --> 00:08:29,400
after all the pages in the partial list

156
00:08:29,400 --> 00:08:31,860
our K memory cash load are full of

157
00:08:31,860 --> 00:08:36,299
objects a new page 1338 will be

158
00:08:36,299 --> 00:08:40,520
allocated from the body allocator

159
00:08:40,740 --> 00:08:45,860
when freeing an object of page 35

160
00:08:49,339 --> 00:08:53,220
respectively the two pages will be added

161
00:08:53,220 --> 00:08:56,459
to the partial list of key memory cache

162
00:08:56,459 --> 00:09:01,380
CPU the pages are you are in a so-called

163
00:09:01,380 --> 00:09:03,500
freeze state

164
00:09:03,500 --> 00:09:06,600
when the number of free the objects in a

165
00:09:06,600 --> 00:09:09,839
partial list our K memory cache CPU is a

166
00:09:09,839 --> 00:09:12,180
larger than CPU passion

167
00:09:12,180 --> 00:09:16,980
page 2200 under page 11 the result will

168
00:09:16,980 --> 00:09:20,040
be added to their partial list of camera

169
00:09:20,040 --> 00:09:26,420
K member cash load not this game memory

170
00:09:26,580 --> 00:09:31,740
sorry not the herlo cash CPU

171
00:09:31,740 --> 00:09:34,500
with the number of pages in a partial

172
00:09:34,500 --> 00:09:37,740
list of key memory cash load is the

173
00:09:37,740 --> 00:09:41,220
larger than million cap passion the MPT

174
00:09:41,220 --> 00:09:46,019
page 1100 will be freed and reclaimed by

175
00:09:46,019 --> 00:09:49,160
the body allocator

176
00:09:49,620 --> 00:09:53,399
suppose a user handle is associated with

177
00:09:53,399 --> 00:09:57,660
the freed object a it's possible that a

178
00:09:57,660 --> 00:10:01,339
is allocated from page 2020

179
00:10:01,339 --> 00:10:05,820
22.00 it doesn't matter

180
00:10:05,820 --> 00:10:09,660
when screening object B is probably that

181
00:10:09,660 --> 00:10:13,680
the freed object a is reviewed the first

182
00:10:13,680 --> 00:10:17,599
path makes it reliable

183
00:10:17,660 --> 00:10:21,360
so this become complicated with the

184
00:10:21,360 --> 00:10:24,060
freed object is allocated from the

185
00:10:24,060 --> 00:10:27,839
dedicated cache here both A and B have

186
00:10:27,839 --> 00:10:30,320
their own cache

187
00:10:30,320 --> 00:10:34,380
so three orbital B cannot reveal the

188
00:10:34,380 --> 00:10:37,339
fluid object a

189
00:10:37,620 --> 00:10:40,740
although the freed object a cannot

190
00:10:40,740 --> 00:10:44,459
directly be reviewed with other types of

191
00:10:44,459 --> 00:10:47,700
objects it's possible to freeze the

192
00:10:47,700 --> 00:10:51,000
related physical page and the page can

193
00:10:51,000 --> 00:10:54,240
be allocated to other caches so the

194
00:10:54,240 --> 00:10:57,300
freed object a can be reviewed by this

195
00:10:57,300 --> 00:10:59,040
indirect way

196
00:10:59,040 --> 00:11:01,680
but how to reuse the freedom physical

197
00:11:01,680 --> 00:11:05,000
page reliably to answer this question

198
00:11:05,000 --> 00:11:07,800
let's dive into the physical page

199
00:11:07,800 --> 00:11:10,380
allocator

200
00:11:10,380 --> 00:11:13,320
this is the classical body allocator I

201
00:11:13,320 --> 00:11:15,779
take from the book The allocator

202
00:11:15,779 --> 00:11:19,079
maintains blocks of three pages where

203
00:11:19,079 --> 00:11:22,260
each block is a part of two number of

204
00:11:22,260 --> 00:11:24,680
pages

205
00:11:24,839 --> 00:11:26,579
you can clearly understand the

206
00:11:26,579 --> 00:11:29,459
three-page management I put the two

207
00:11:29,459 --> 00:11:32,700
allocators together here the author of

208
00:11:32,700 --> 00:11:37,320
the cache u3 it means that the slab slab

209
00:11:37,320 --> 00:11:40,800
page contains eight physical pages and

210
00:11:40,800 --> 00:11:44,220
the partial list of both can memory

211
00:11:44,220 --> 00:11:46,980
cache CPU and the key memory cash load

212
00:11:46,980 --> 00:11:50,579
are empty and the the order of compound

213
00:11:50,579 --> 00:11:51,620
Pages

214
00:11:51,620 --> 00:11:56,040
1338 and 533803

215
00:11:56,779 --> 00:11:58,640
so

216
00:11:58,640 --> 00:12:01,860
page1338 will be allocated when

217
00:12:01,860 --> 00:12:05,660
allocating a new object

218
00:12:05,880 --> 00:12:11,640
when page 1338 in full page 5338 will be

219
00:12:11,640 --> 00:12:15,120
allocated now there is no third order

220
00:12:15,120 --> 00:12:18,140
compound page

221
00:12:18,360 --> 00:12:19,940
when page

222
00:12:19,940 --> 00:12:23,640
5338 is full the fourth order compound

223
00:12:23,640 --> 00:12:26,880
page eight one the result will be

224
00:12:26,880 --> 00:12:30,500
spilled into bodies

225
00:12:31,100 --> 00:12:34,740
now we began to begin to free the

226
00:12:34,740 --> 00:12:39,500
objects specifically except the page

227
00:12:39,500 --> 00:12:43,740
8108 make all other Pages partial were

228
00:12:43,740 --> 00:12:44,940
empty

229
00:12:44,940 --> 00:12:48,060
and the most important sense that the

230
00:12:48,060 --> 00:12:51,420
number of pages in the partial list of K

231
00:12:51,420 --> 00:12:54,180
member cash load is larger than merely

232
00:12:54,180 --> 00:12:57,200
cap millilitation

233
00:12:57,200 --> 00:12:59,540
when page

234
00:12:59,540 --> 00:13:05,180
8108 is empty it will be reclaimed

235
00:13:05,180 --> 00:13:10,860
as the party page 8 8 1 0 0 is still

236
00:13:10,860 --> 00:13:14,399
free the two-thirds of other compound

237
00:13:14,399 --> 00:13:18,420
page will be merged in merged to form a

238
00:13:18,420 --> 00:13:22,260
fourth order compound page

239
00:13:22,260 --> 00:13:26,040
so that's basically how a slab page is

240
00:13:26,040 --> 00:13:30,560
handled by those two allocators

241
00:13:31,139 --> 00:13:34,980
in fact there are several zones based on

242
00:13:34,980 --> 00:13:38,279
the miggregation type

243
00:13:38,279 --> 00:13:42,420
here is the basic idea about cross-cash

244
00:13:42,420 --> 00:13:45,839
attack in the limbs Carlo the first step

245
00:13:45,839 --> 00:13:49,380
is bringing the objects not only the

246
00:13:49,380 --> 00:13:52,740
current slab page exhaust data but also

247
00:13:52,740 --> 00:13:55,620
all the pages in a partial list must be

248
00:13:55,620 --> 00:13:56,880
occupied

249
00:13:56,880 --> 00:14:00,320
the red block represents the vulnerable

250
00:14:00,320 --> 00:14:03,959
objective after triggering the uaf bug

251
00:14:03,959 --> 00:14:07,380
other objects in the current slab page

252
00:14:07,380 --> 00:14:10,560
are freed make the current slab page

253
00:14:10,560 --> 00:14:15,000
empty next the slab page is reclaimed by

254
00:14:15,000 --> 00:14:18,899
the body allocator when spring object B

255
00:14:18,899 --> 00:14:22,019
is the word first exhaust the partial

256
00:14:22,019 --> 00:14:25,680
list of both can memory cache CPU and

257
00:14:25,680 --> 00:14:28,019
keep memory cash load

258
00:14:28,019 --> 00:14:31,160
then the cashew will require more pages

259
00:14:31,160 --> 00:14:34,519
if the free the page is successfully

260
00:14:34,519 --> 00:14:37,079
allocated for the cache

261
00:14:37,079 --> 00:14:41,040
object B can be over overlapped with the

262
00:14:41,040 --> 00:14:43,980
vulnerable object a

263
00:14:43,980 --> 00:14:47,579
to cross the slab cache the related

264
00:14:47,579 --> 00:14:51,540
Pages must be in the free state so the

265
00:14:51,540 --> 00:14:54,540
step one two three is required and to

266
00:14:54,540 --> 00:14:57,899
allocate a new slab page is required to

267
00:14:57,899 --> 00:15:01,699
exhaust the water free slab page first

268
00:15:01,699 --> 00:15:05,519
this is the reason why cross-cash attack

269
00:15:05,519 --> 00:15:08,820
is a memory and the time consuming and

270
00:15:08,820 --> 00:15:12,139
the less deterministic

271
00:15:12,500 --> 00:15:15,420
in 2015

272
00:15:15,420 --> 00:15:19,139
when she published a paper from my own

273
00:15:19,139 --> 00:15:22,860
opinion I recognized it as a cross-cash

274
00:15:22,860 --> 00:15:25,459
technique

275
00:15:26,339 --> 00:15:29,279
the key point is that all the physical

276
00:15:29,279 --> 00:15:33,180
Pages which can be allocated for slab

277
00:15:33,180 --> 00:15:35,820
allocator are nearly mapped

278
00:15:35,820 --> 00:15:38,940
so we can repeatedly call the M map

279
00:15:38,940 --> 00:15:42,720
Cisco to Sprint the pages until the

280
00:15:42,720 --> 00:15:45,779
specific page is mapped into the user

281
00:15:45,779 --> 00:15:47,660
space

282
00:15:47,660 --> 00:15:51,060
as the physical pages are nearly mapped

283
00:15:51,060 --> 00:15:54,060
the current address of the dangling

284
00:15:54,060 --> 00:15:58,319
pointer is always validated

285
00:15:59,279 --> 00:16:03,000
several years ago I used this idea to

286
00:16:03,000 --> 00:16:06,180
exploit a type comforting bug you can

287
00:16:06,180 --> 00:16:10,160
find this slide on my GitHub

288
00:16:10,260 --> 00:16:13,980
here is the steps to fill the uaf

289
00:16:13,980 --> 00:16:15,839
sockets

290
00:16:15,839 --> 00:16:19,380
the expoid repeatedly called the M map

291
00:16:19,380 --> 00:16:22,500
Cisco until the free the circuit returns

292
00:16:22,500 --> 00:16:25,760
a fixed fixed time step

293
00:16:25,760 --> 00:16:29,339
obviously is time and memory consuming

294
00:16:29,339 --> 00:16:31,079
but why

295
00:16:31,079 --> 00:16:34,079
sorry

296
00:16:34,079 --> 00:16:37,320
there are lots of flags to be said when

297
00:16:37,320 --> 00:16:39,300
allocating a page

298
00:16:39,300 --> 00:16:42,600
here you just focus on the migration

299
00:16:42,600 --> 00:16:46,740
type and the page order first lab page

300
00:16:46,740 --> 00:16:50,000
is unmovable

301
00:16:50,100 --> 00:16:52,800
when allocating a page for a user

302
00:16:52,800 --> 00:16:58,399
address the aggregation type is movable

303
00:16:58,459 --> 00:17:01,680
I take the figure from Yahoo slide

304
00:17:01,680 --> 00:17:04,799
roughly the different aggregation types

305
00:17:04,799 --> 00:17:07,500
of pages are stored in the different

306
00:17:07,500 --> 00:17:09,540
page free list

307
00:17:09,540 --> 00:17:12,599
it looks like the cross cache so it's

308
00:17:12,599 --> 00:17:16,199
time and memory consuming

309
00:17:16,199 --> 00:17:19,079
now we know the answer to this question

310
00:17:19,079 --> 00:17:22,799
the page order is different as mentioned

311
00:17:22,799 --> 00:17:25,799
before the high order Pages can be

312
00:17:25,799 --> 00:17:27,720
spilled into now

313
00:17:27,720 --> 00:17:31,919
or now other pages so it's required to

314
00:17:31,919 --> 00:17:35,660
exhaust the no other Pages first

315
00:17:35,660 --> 00:17:38,820
meanwhile the miggregation type is

316
00:17:38,820 --> 00:17:41,160
different

317
00:17:41,160 --> 00:17:43,919
and now when freeing a single page the

318
00:17:43,919 --> 00:17:47,340
page did not reclaimed directly instead

319
00:17:47,340 --> 00:17:50,640
it will be added to a cash list based on

320
00:17:50,640 --> 00:17:54,059
the aggregation type so the page can be

321
00:17:54,059 --> 00:17:57,299
reallocated very soon and it's

322
00:17:57,299 --> 00:17:59,820
impossible to reduce the Page by m map

323
00:17:59,820 --> 00:18:00,900
Cisco

324
00:18:00,900 --> 00:18:03,900
more generally the loan cross cache

325
00:18:03,900 --> 00:18:07,200
technique is useless with the order of a

326
00:18:07,200 --> 00:18:10,260
slant page is reservo now let me

327
00:18:10,260 --> 00:18:13,320
introduce the cross-catch tag technique

328
00:18:13,320 --> 00:18:17,299
return to page

329
00:18:23,940 --> 00:18:27,780
the cork concept is allocating the same

330
00:18:27,780 --> 00:18:31,679
order and aggregation type Pages which

331
00:18:31,679 --> 00:18:35,100
can be read and write and directly or

332
00:18:35,100 --> 00:18:39,240
indirectly instead of object X to review

333
00:18:39,240 --> 00:18:41,460
the free object

334
00:18:41,460 --> 00:18:44,280
the same order and the migration type

335
00:18:44,280 --> 00:18:47,700
can significantly increase their

336
00:18:47,700 --> 00:18:50,220
possibility I will be using the target

337
00:18:50,220 --> 00:18:53,640
slab page under the content of the freed

338
00:18:53,640 --> 00:18:57,059
object can be leaked and Modified by

339
00:18:57,059 --> 00:19:00,678
reading and writing the pages

340
00:19:00,780 --> 00:19:04,080
it's next time and the memory consuming

341
00:19:04,080 --> 00:19:09,660
and the more deterministic but is but is

342
00:19:09,660 --> 00:19:12,679
but the limitation is obvious

343
00:19:12,679 --> 00:19:15,780
generally since the content of the pages

344
00:19:15,780 --> 00:19:20,160
can't remain intact you cannot directly

345
00:19:20,160 --> 00:19:22,500
link the color or dress without

346
00:19:22,500 --> 00:19:27,080
triggering the operation on the object

347
00:19:27,080 --> 00:19:31,280
the step one two three cannot be avoided

348
00:19:31,280 --> 00:19:35,100
I talk about the previous at the same

349
00:19:35,100 --> 00:19:37,820
four some tricks

350
00:19:37,820 --> 00:19:41,280
can be used to shape the help feng shui

351
00:19:41,280 --> 00:19:44,600
and make the reallocation more

352
00:19:44,600 --> 00:19:49,699
deterministic here at least some

353
00:19:49,919 --> 00:19:54,120
the old friend the pipel subsystem gives

354
00:19:54,120 --> 00:19:58,080
us the one page allocation both the user

355
00:19:58,080 --> 00:20:00,720
space and the color space can read or

356
00:20:00,720 --> 00:20:03,200
write it

357
00:20:03,660 --> 00:20:07,160
the pages order is under the control

358
00:20:07,160 --> 00:20:12,000
although the usual space cannot write

359
00:20:12,000 --> 00:20:16,500
the page directly it can we can net the

360
00:20:16,500 --> 00:20:20,059
color to the dirty job

361
00:20:21,299 --> 00:20:25,380
uh the io and drivers can give us some

362
00:20:25,380 --> 00:20:27,980
totally controlled pages

363
00:20:27,980 --> 00:20:33,120
but even maybe you know might might be

364
00:20:33,120 --> 00:20:36,059
different uh due to their vendors

365
00:20:36,059 --> 00:20:40,020
specific implementation

366
00:20:41,700 --> 00:20:45,179
the GPU drivers can also give us some

367
00:20:45,179 --> 00:20:48,020
totally controlled pages

368
00:20:48,020 --> 00:20:53,000
but it's not Universal uh I this code

369
00:20:53,000 --> 00:20:56,820
this code is lifted I take from Arduino

370
00:20:56,820 --> 00:20:59,659
GPU driver

371
00:21:00,679 --> 00:21:05,400
the io uterus statistical can give us

372
00:21:05,400 --> 00:21:08,520
some totally control the pages and

373
00:21:08,520 --> 00:21:11,840
however it is blocked Under The

374
00:21:11,840 --> 00:21:15,660
untrusted Apple domain uh you can use it

375
00:21:15,660 --> 00:21:20,419
under the show the shared domain

376
00:21:20,760 --> 00:21:23,780
the third part

377
00:21:23,940 --> 00:21:27,500
to clearly understand the return to page

378
00:21:27,500 --> 00:21:31,380
exploitation technique I will deter how

379
00:21:31,380 --> 00:21:34,020
to exploit those two highlighted

380
00:21:34,020 --> 00:21:38,539
vulnerabilities fifths the last year

381
00:21:38,720 --> 00:21:43,080
uh you can fed the briefly root of

382
00:21:43,080 --> 00:21:46,020
course lenses on Google project through

383
00:21:46,020 --> 00:21:49,260
those blog

384
00:21:50,220 --> 00:21:55,280
so we inserting uh you profile

385
00:21:55,280 --> 00:21:58,380
descriptor inside another Evo field

386
00:21:58,380 --> 00:22:02,280
descriptor uh it will first perform the

387
00:22:02,280 --> 00:22:04,879
loop check

388
00:22:05,840 --> 00:22:09,840
specifically a user will Traverse was a

389
00:22:09,840 --> 00:22:14,760
a items recursively if the related field

390
00:22:14,760 --> 00:22:18,720
is not the Evo field and it has not been

391
00:22:18,720 --> 00:22:22,679
added to alien linked list the reference

392
00:22:22,679 --> 00:22:25,559
counter will be increased increase the

393
00:22:25,559 --> 00:22:28,280
unconditionally

394
00:22:28,280 --> 00:22:31,559
to the regular regular field will be put

395
00:22:31,559 --> 00:22:35,280
at the end of the evil control Cisco

396
00:22:35,280 --> 00:22:38,520
although the whole process is protected

397
00:22:38,520 --> 00:22:43,020
by hippo mutex the regular field can be

398
00:22:43,020 --> 00:22:48,200
closed via the FD handle

399
00:22:48,480 --> 00:22:51,960
specifically task a creates an evil

400
00:22:51,960 --> 00:22:55,320
field and adds a bunker field to it then

401
00:22:55,320 --> 00:22:59,220
task a starts to add the euper field

402
00:22:59,220 --> 00:23:01,320
descriptor to another evil field

403
00:23:01,320 --> 00:23:04,799
descriptor a during the loop check if

404
00:23:04,799 --> 00:23:07,620
the bundle field is submitted to 3

405
00:23:07,620 --> 00:23:09,980
before increasing the reference count

406
00:23:09,980 --> 00:23:13,620
the boundary field can be submitted to

407
00:23:13,620 --> 00:23:15,000
free again

408
00:23:15,000 --> 00:23:18,240
uh if you are interested in how to

409
00:23:18,240 --> 00:23:21,600
control the threat interleaving and just

410
00:23:21,600 --> 00:23:24,000
check out this slide

411
00:23:24,000 --> 00:23:27,059
before triggering the bug we should ship

412
00:23:27,059 --> 00:23:30,240
their cash and make sure that the number

413
00:23:30,240 --> 00:23:33,360
of the freed objects is larger than

414
00:23:33,360 --> 00:23:36,720
cpule partial and the number of pages in

415
00:23:36,720 --> 00:23:39,360
the partial list of key memory cache

416
00:23:39,360 --> 00:23:43,980
node is the larger than me mini partial

417
00:23:43,980 --> 00:23:46,980
then trigger the bug and refuse the

418
00:23:46,980 --> 00:23:50,059
freedom fields

419
00:23:50,059 --> 00:23:54,120
the Target Field will be freed when

420
00:23:54,120 --> 00:23:59,299
clearing the target of field link list

421
00:23:59,299 --> 00:24:02,340
we can close all the other field

422
00:24:02,340 --> 00:24:05,580
descriptors to make the slab page back

423
00:24:05,580 --> 00:24:08,700
to body allocator

424
00:24:08,700 --> 00:24:12,179
now there is a handle related to the

425
00:24:12,179 --> 00:24:15,299
freedom field but we don't know which

426
00:24:15,299 --> 00:24:17,840
one is

427
00:24:18,059 --> 00:24:21,179
since the page is shaded between user

428
00:24:21,179 --> 00:24:23,360
space and color space

429
00:24:23,360 --> 00:24:26,820
smav4 Pam mitigation is naturally

430
00:24:26,820 --> 00:24:30,900
bypassed as discussed previously the

431
00:24:30,900 --> 00:24:33,679
content of the page is usually reset

432
00:24:33,679 --> 00:24:37,679
Nokia pointers can be leaked directly

433
00:24:37,679 --> 00:24:44,059
so how to bypass the k-a-slr mitigation

434
00:24:44,880 --> 00:24:48,000
because that the pending fields are

435
00:24:48,000 --> 00:24:52,320
opened with right only mode so we can

436
00:24:52,320 --> 00:24:55,860
set the free the fields mode as read

437
00:24:55,860 --> 00:25:00,480
only then repeatedly causes split splice

438
00:25:00,480 --> 00:25:04,620
Cisco to check whether the fde is a

439
00:25:04,620 --> 00:25:07,679
target descriptor

440
00:25:07,679 --> 00:25:10,679
even though it just Returns the band

441
00:25:10,679 --> 00:25:13,620
descriptor Arrow

442
00:25:13,620 --> 00:25:17,760
since since both in and out fields are

443
00:25:17,760 --> 00:25:20,940
not hyper fuels they do splice function

444
00:25:20,940 --> 00:25:25,140
just Returns the embedded value error

445
00:25:25,140 --> 00:25:28,020
So based on the different error codes

446
00:25:28,020 --> 00:25:32,640
the target handle can be figured out

447
00:25:32,640 --> 00:25:36,000
since no color pointers can be leaked

448
00:25:36,000 --> 00:25:39,480
directly we have to find a way to bypass

449
00:25:39,480 --> 00:25:42,840
the kasr mitigation for Android devices

450
00:25:42,840 --> 00:25:45,299
the color slide into two megabyte

451
00:25:45,299 --> 00:25:48,000
aligned and cannot extend across one

452
00:25:48,000 --> 00:25:50,760
gigabyte alignment boundary the

453
00:25:50,760 --> 00:25:53,760
limitation is derived the front armor V8

454
00:25:53,760 --> 00:25:57,360
mmu hardware and the most important

455
00:25:57,360 --> 00:26:00,900
thing that there are only 16 for bits

456
00:26:00,900 --> 00:26:03,080
for randomization so

457
00:26:03,080 --> 00:26:06,299
it's possible to Guess the Color slide

458
00:26:06,299 --> 00:26:09,480
in a short time but how to guess without

459
00:26:09,480 --> 00:26:12,720
color crash since the fuel has no value

460
00:26:12,720 --> 00:26:15,419
the field operation it's easy to panic

461
00:26:15,419 --> 00:26:18,240
the color due to a non-pointer the

462
00:26:18,240 --> 00:26:21,480
reference or inventing the color address

463
00:26:21,480 --> 00:26:24,120
it's similar to finding the user handle

464
00:26:24,120 --> 00:26:27,539
is just requires setting the parameters

465
00:26:27,539 --> 00:26:31,620
carefully here the fde must be larger

466
00:26:31,620 --> 00:26:34,380
the value when the color slide is wrong

467
00:26:34,380 --> 00:26:39,000
the fde will not be recognized as a type

468
00:26:39,000 --> 00:26:42,720
of field so it Returns the invalid value

469
00:26:42,720 --> 00:26:46,140
Arrow when the color slide is right it

470
00:26:46,140 --> 00:26:49,440
will return a piper Arrow because the of

471
00:26:49,440 --> 00:26:51,799
e is not zero

472
00:26:51,799 --> 00:26:55,919
now we can fake any type of view and the

473
00:26:55,919 --> 00:26:59,340
page is under is under our control uh

474
00:26:59,340 --> 00:27:01,460
it's easy to obtain

475
00:27:01,460 --> 00:27:04,740
aarw Primitives I will talk about it

476
00:27:04,740 --> 00:27:06,120
later

477
00:27:06,120 --> 00:27:09,720
the bug was this bag was first disclosed

478
00:27:09,720 --> 00:27:12,360
to this color by Young home but also

479
00:27:12,360 --> 00:27:15,000
found by me before it was fixed the

480
00:27:15,000 --> 00:27:17,100
vulnerability was finally leaked under

481
00:27:17,100 --> 00:27:21,419
Android security in May last year

482
00:27:21,419 --> 00:27:24,360
although Zhong details how to exploit

483
00:27:24,360 --> 00:27:28,140
against the dbm kernel the exploit code

484
00:27:28,140 --> 00:27:31,220
cannot work on adding Android devices

485
00:27:31,220 --> 00:27:34,260
directly due to the different color

486
00:27:34,260 --> 00:27:36,299
config

487
00:27:36,299 --> 00:27:40,200
I successfully rooted the pixel 2 to 5

488
00:27:40,200 --> 00:27:43,620
and other Android 11 Flagship Flagship

489
00:27:43,620 --> 00:27:46,500
devices at that time

490
00:27:46,500 --> 00:27:49,440
from your host poster the object is

491
00:27:49,440 --> 00:27:53,039
allocated in the general cache

492
00:27:53,039 --> 00:27:55,559
but it's not such a simple Android color

493
00:27:55,559 --> 00:28:00,900
branches for Carlo 4.4 indeed the PID

494
00:28:00,900 --> 00:28:04,980
object is allocated in a general cache

495
00:28:04,980 --> 00:28:08,820
however for color four point lighting is

496
00:28:08,820 --> 00:28:09,600
not

497
00:28:09,600 --> 00:28:12,779
I'll discussed previously a cash with

498
00:28:12,779 --> 00:28:15,480
slab account cannot be merged into the

499
00:28:15,480 --> 00:28:18,659
general cache so basically for the old

500
00:28:18,659 --> 00:28:21,960
color like 4.4 the object is allocated

501
00:28:21,960 --> 00:28:24,840
in the general cache and then for the

502
00:28:24,840 --> 00:28:28,140
Upstream Color Branch the object is

503
00:28:28,140 --> 00:28:31,679
allocated in the dedicated cache here I

504
00:28:31,679 --> 00:28:34,080
just focused on the Upstream Color

505
00:28:34,080 --> 00:28:35,940
branch

506
00:28:35,940 --> 00:28:39,779
when I reviewed the this is I'll control

507
00:28:39,779 --> 00:28:43,500
Handler I found the code is likely body

508
00:28:43,500 --> 00:28:46,919
look at the red circle the code release

509
00:28:46,919 --> 00:28:52,080
the older PID object of real Pi real TTY

510
00:28:52,080 --> 00:28:55,140
object and the assign a new one to it

511
00:28:55,140 --> 00:28:59,220
however you use the spring node of TTY

512
00:28:59,220 --> 00:29:02,520
objects like this window of a real TTY

513
00:29:02,520 --> 00:29:03,600
object

514
00:29:03,600 --> 00:29:06,179
when sending a command to the master

515
00:29:06,179 --> 00:29:09,179
driver the gtu object represents the

516
00:29:09,179 --> 00:29:12,620
master endpoint and the relative object

517
00:29:12,620 --> 00:29:15,539
represents the Sleep endpoint

518
00:29:15,539 --> 00:29:18,299
uh but when sending a command to the

519
00:29:18,299 --> 00:29:20,820
sleeve driver both of the objects

520
00:29:20,820 --> 00:29:23,399
represent the slip and point

521
00:29:23,399 --> 00:29:25,140
so we're sending commands to the

522
00:29:25,140 --> 00:29:26,419
different driver

523
00:29:26,419 --> 00:29:30,179
drivers drivers can currently one thread

524
00:29:30,179 --> 00:29:33,539
put a pida and then the context switch

525
00:29:33,539 --> 00:29:36,419
happens another state can also put a

526
00:29:36,419 --> 00:29:39,840
pida its reference count is decreased

527
00:29:39,840 --> 00:29:42,600
twice if Ace reference count becomes

528
00:29:42,600 --> 00:29:47,520
becomes 0 though a will be destroyed

529
00:29:47,520 --> 00:29:50,220
so there are three different types of

530
00:29:50,220 --> 00:29:54,000
hash list in PID object

531
00:29:54,000 --> 00:29:57,299
the pi link array of the test struct

532
00:29:57,299 --> 00:30:01,620
object is used to attach to the PID

533
00:30:01,620 --> 00:30:04,219
object

534
00:30:04,320 --> 00:30:08,520
a PID object is allocated when creating

535
00:30:08,520 --> 00:30:10,039
a thread or

536
00:30:10,039 --> 00:30:13,860
process for a new process all the types

537
00:30:13,860 --> 00:30:17,880
of PID objects are attached for new

538
00:30:17,880 --> 00:30:23,580
thread only the PID type PID is attached

539
00:30:23,580 --> 00:30:26,159
a lot of things should be pay attention

540
00:30:26,159 --> 00:30:31,440
too is that the Page's order is zero

541
00:30:31,440 --> 00:30:34,980
the hype function is very similar to the

542
00:30:34,980 --> 00:30:38,220
previous exploit

543
00:30:39,179 --> 00:30:42,600
as a single page will be reallocated

544
00:30:42,600 --> 00:30:46,860
soon using the pipe page feng shui can

545
00:30:46,860 --> 00:30:50,039
significantly improve the successful

546
00:30:50,039 --> 00:30:52,340
read

547
00:30:52,799 --> 00:30:56,220
now we have the same question and the

548
00:30:56,220 --> 00:30:59,960
answer is almost the same

549
00:31:00,419 --> 00:31:04,559
as the pages under our control we can

550
00:31:04,559 --> 00:31:08,100
set the pointer of page H leads the head

551
00:31:08,100 --> 00:31:11,418
to zero

552
00:31:12,720 --> 00:31:16,100
and we can focus a new process and

553
00:31:16,100 --> 00:31:20,460
attach it to the trade object the test

554
00:31:20,460 --> 00:31:23,279
struct address can be leaked by reading

555
00:31:23,279 --> 00:31:25,760
the page

556
00:31:26,279 --> 00:31:30,360
look at the red circle if the limb space

557
00:31:30,360 --> 00:31:32,360
is equal

558
00:31:32,360 --> 00:31:36,500
the NR value will be returned

559
00:31:36,500 --> 00:31:39,840
uh otherwise you should just Returns the

560
00:31:39,840 --> 00:31:40,679
result

561
00:31:40,679 --> 00:31:44,399
and the PID lamp space is a lot enabled

562
00:31:44,399 --> 00:31:46,919
on Android color branch

563
00:31:46,919 --> 00:31:50,880
the lamp space is always you need a PID

564
00:31:50,880 --> 00:31:56,539
lamp space is a Carlo data pointer

565
00:31:56,940 --> 00:32:01,080
as the page is under our control we can

566
00:32:01,080 --> 00:32:07,100
set the first pointer to address X

567
00:32:07,260 --> 00:32:11,220
the fork a due process and attach the

568
00:32:11,220 --> 00:32:14,640
test structure to the freed object free

569
00:32:14,640 --> 00:32:15,779
the PID

570
00:32:15,779 --> 00:32:21,179
now it points to the test struct

571
00:32:21,179 --> 00:32:26,399
let's change change the pi PG ID of the

572
00:32:26,399 --> 00:32:30,120
newly spawned process it will point back

573
00:32:30,120 --> 00:32:31,679
to the page

574
00:32:31,679 --> 00:32:35,880
that means we can overwrite under

575
00:32:35,880 --> 00:32:39,360
redirect our pointer of adding objects

576
00:32:39,360 --> 00:32:43,158
to the control page

577
00:32:43,260 --> 00:32:45,899
under the test structure of a one-page

578
00:32:45,899 --> 00:32:49,640
leaked we can't redirect some pointers

579
00:32:49,640 --> 00:32:53,580
here I choose the fields structure

580
00:32:53,580 --> 00:32:59,059
because the FD table is storing it

581
00:32:59,100 --> 00:33:03,240
under the mask fds can be read from the

582
00:33:03,240 --> 00:33:06,260
process status

583
00:33:07,440 --> 00:33:11,460
after redirecting the field structure

584
00:33:11,460 --> 00:33:16,140
pointer to the page the FD the FD table

585
00:33:16,140 --> 00:33:19,740
pointer is controlled

586
00:33:19,740 --> 00:33:23,039
so we can use it to point to anywhere

587
00:33:23,039 --> 00:33:26,220
and read the four bytes each time by

588
00:33:26,220 --> 00:33:28,019
reading the status

589
00:33:28,019 --> 00:33:33,440
uh basically it's the AAR ability

590
00:33:34,080 --> 00:33:39,299
now we we can also fake any fields we

591
00:33:39,299 --> 00:33:44,480
can craft a few metadata in the page

592
00:33:45,360 --> 00:33:49,460
here I think a paper field

593
00:33:49,460 --> 00:33:53,779
by controlling the page of a pipe buffer

594
00:33:53,779 --> 00:34:01,399
basically the aarw Primitive is obtained

595
00:34:01,500 --> 00:34:05,120
so here's the demo

596
00:34:06,179 --> 00:34:10,639
five minutes Mr Wong five minutes

597
00:34:32,219 --> 00:34:36,719
so takeaways uh the the interval of both

598
00:34:36,719 --> 00:34:39,599
the slab and body allocators have been

599
00:34:39,599 --> 00:34:40,980
analysis

600
00:34:40,980 --> 00:34:44,359
return to page a new and the general

601
00:34:44,359 --> 00:34:47,359
exploitation technique has been detailed

602
00:34:47,359 --> 00:34:50,040
those two vulnerabilities have been

603
00:34:50,040 --> 00:34:53,040
discussed and the exploits have been

604
00:34:53,040 --> 00:34:55,440
fully detailed

605
00:34:55,440 --> 00:34:59,220
here are the reference

606
00:34:59,220 --> 00:35:02,820
okay that's all thanks uh by the way

607
00:35:02,820 --> 00:35:06,060
since this slide has changed uh you can

608
00:35:06,060 --> 00:35:09,000
find the current version on my GitHub

609
00:35:09,000 --> 00:35:11,359
later

610
00:35:11,579 --> 00:35:14,240
foreign

611
00:35:18,290 --> 00:35:21,400
[Music]

