1
00:00:01,700 --> 00:00:04,810
[Music]

2
00:00:07,460 --> 00:00:10,440
hi I'm Siobhan I'm a new assistant

3
00:00:10,440 --> 00:00:13,740
professor at UT Austin and today I'll be

4
00:00:13,740 --> 00:00:15,360
telling you how to secure your

5
00:00:15,360 --> 00:00:17,039
applications from bugs in its

6
00:00:17,039 --> 00:00:18,359
dependencies

7
00:00:18,359 --> 00:00:21,960
and so this is actually the result of a

8
00:00:21,960 --> 00:00:23,580
multi-year collaboration between a bunch

9
00:00:23,580 --> 00:00:26,640
of people at UC San Diego UT Austin and

10
00:00:26,640 --> 00:00:27,779
Mozilla

11
00:00:27,779 --> 00:00:30,420
and today's talk in a nutshell is going

12
00:00:30,420 --> 00:00:32,940
to be about in-process sandboxing which

13
00:00:32,940 --> 00:00:34,500
is this technique to secure your

14
00:00:34,500 --> 00:00:36,360
application from dependencies in the

15
00:00:36,360 --> 00:00:37,980
form of native code

16
00:00:37,980 --> 00:00:40,620
and this idea of in-process sandboxing

17
00:00:40,620 --> 00:00:43,200
has actually been around in the academic

18
00:00:43,200 --> 00:00:45,300
security Community for a while almost 30

19
00:00:45,300 --> 00:00:47,280
years at this point and this is the

20
00:00:47,280 --> 00:00:48,480
first time it's making its way to

21
00:00:48,480 --> 00:00:49,800
production code

22
00:00:49,800 --> 00:00:52,140
and it and this is because of a couple

23
00:00:52,140 --> 00:00:54,180
of reasons the first is webassembly

24
00:00:54,180 --> 00:00:56,280
which is this widely available tool

25
00:00:56,280 --> 00:00:58,379
chain for compiler-based isolation that

26
00:00:58,379 --> 00:01:01,140
is now available uh for all of us and

27
00:01:01,140 --> 00:01:03,780
the second part is this framework we had

28
00:01:03,780 --> 00:01:06,420
to build called RL box which simplifies

29
00:01:06,420 --> 00:01:09,240
adoption of in-process sandboxing and

30
00:01:09,240 --> 00:01:10,860
lets you sandbox native code with

31
00:01:10,860 --> 00:01:12,360
webassembly

32
00:01:12,360 --> 00:01:14,640
and Firefox has been the Firefox web

33
00:01:14,640 --> 00:01:17,220
browser has been using Autobox for over

34
00:01:17,220 --> 00:01:19,500
over two years at this point and this is

35
00:01:19,500 --> 00:01:20,880
something we believe other applications

36
00:01:20,880 --> 00:01:22,560
can do as well

37
00:01:22,560 --> 00:01:24,600
so in this talk I'll start with some

38
00:01:24,600 --> 00:01:26,400
high level bits like why we want

39
00:01:26,400 --> 00:01:28,080
something like in process sandboxing in

40
00:01:28,080 --> 00:01:29,220
the first place

41
00:01:29,220 --> 00:01:30,780
next I'll talk a little bit about the

42
00:01:30,780 --> 00:01:32,100
pain points what the pain points of

43
00:01:32,100 --> 00:01:33,840
in-process sandboxing are and why we

44
00:01:33,840 --> 00:01:36,420
need a framework to help us adopt it

45
00:01:36,420 --> 00:01:38,700
we'll talk about robox which is our the

46
00:01:38,700 --> 00:01:40,500
framework we built to actually simplify

47
00:01:40,500 --> 00:01:43,259
in-process sandboxing and finally we'll

48
00:01:43,259 --> 00:01:44,640
talk about our experiences actually

49
00:01:44,640 --> 00:01:47,100
deploying in-process sandboxing with RL

50
00:01:47,100 --> 00:01:49,020
box

51
00:01:49,020 --> 00:01:52,799
so let's Jump Right In the reason we

52
00:01:52,799 --> 00:01:55,439
care about any of this is that every

53
00:01:55,439 --> 00:01:57,780
application we use today in some way

54
00:01:57,780 --> 00:01:59,880
relies on Native code

55
00:01:59,880 --> 00:02:02,820
and as we probably well know native code

56
00:02:02,820 --> 00:02:06,060
tends to have memory safety bugs and if

57
00:02:06,060 --> 00:02:07,380
you've been to black hat before you've

58
00:02:07,380 --> 00:02:09,300
probably seen a slide like this this is

59
00:02:09,300 --> 00:02:11,700
basically an analysis of bugs in Google

60
00:02:11,700 --> 00:02:14,640
Chrome and Microsoft Windows and what

61
00:02:14,640 --> 00:02:18,060
was found was uh 70 of all the bugs we

62
00:02:18,060 --> 00:02:21,060
see are just memory safety bugs so use

63
00:02:21,060 --> 00:02:23,099
after freeze buffer overflows all of

64
00:02:23,099 --> 00:02:24,420
these things

65
00:02:24,420 --> 00:02:26,400
and at this point you might you might

66
00:02:26,400 --> 00:02:28,260
say something like well let's stop

67
00:02:28,260 --> 00:02:29,819
writing stuff in C plus plus I'll write

68
00:02:29,819 --> 00:02:31,319
everything in rust or something like

69
00:02:31,319 --> 00:02:32,340
that

70
00:02:32,340 --> 00:02:34,440
and there's a problem there which is

71
00:02:34,440 --> 00:02:36,840
these safe languages are also built on

72
00:02:36,840 --> 00:02:40,440
the same unsafe libraries so if you look

73
00:02:40,440 --> 00:02:43,260
up the CC crate on rust or the add-on

74
00:02:43,260 --> 00:02:45,360
API node.js you'll see this and it's

75
00:02:45,360 --> 00:02:47,160
just one other example something like

76
00:02:47,160 --> 00:02:51,900
openssl uh half a million lines of C

77
00:02:51,900 --> 00:02:53,940
it's a common dependency even in Rust

78
00:02:53,940 --> 00:02:57,140
applications for examples

79
00:02:57,900 --> 00:03:00,360
and the problem we have with all of this

80
00:03:00,360 --> 00:03:02,220
native code is

81
00:03:02,220 --> 00:03:05,280
when these libraries have bugs they are

82
00:03:05,280 --> 00:03:07,500
used in real attacks and we've seen this

83
00:03:07,500 --> 00:03:09,060
in a while time again time and again

84
00:03:09,060 --> 00:03:11,459
where these sort of bugs are exploited

85
00:03:11,459 --> 00:03:14,360
to compromised systems like web browsers

86
00:03:14,360 --> 00:03:16,680
iMessage you name a system it's probably

87
00:03:16,680 --> 00:03:20,060
been compromised by something like this

88
00:03:21,659 --> 00:03:23,700
and the the challenge we're running up

89
00:03:23,700 --> 00:03:25,560
against is all of the techniques we have

90
00:03:25,560 --> 00:03:27,060
the mitigations the application

91
00:03:27,060 --> 00:03:30,180
hardening like aslr stack canaries

92
00:03:30,180 --> 00:03:32,819
control flow Integrity end up being just

93
00:03:32,819 --> 00:03:34,440
a little speed bump for in the wild

94
00:03:34,440 --> 00:03:35,940
attacks something they have to get past

95
00:03:35,940 --> 00:03:38,340
but eventually they do and suddenly we

96
00:03:38,340 --> 00:03:40,500
see attacks in the wild

97
00:03:40,500 --> 00:03:42,480
and we could we could try to say

98
00:03:42,480 --> 00:03:43,799
something like well let's rewrite

99
00:03:43,799 --> 00:03:45,180
everything in Rust

100
00:03:45,180 --> 00:03:47,580
unfortunately this is not very practical

101
00:03:47,580 --> 00:03:49,980
this is actually quite unrealistic there

102
00:03:49,980 --> 00:03:52,200
are billions of lines of existing C and

103
00:03:52,200 --> 00:03:54,000
C plus plus code that aren't going away

104
00:03:54,000 --> 00:03:57,060
and rewriting it is not just changing

105
00:03:57,060 --> 00:03:58,379
the syntax or something you have to

106
00:03:58,379 --> 00:04:00,239
retest you actually have to make sure

107
00:04:00,239 --> 00:04:02,040
it's portable get this it gets the same

108
00:04:02,040 --> 00:04:05,099
performance it is quite a process and to

109
00:04:05,099 --> 00:04:06,659
a point that even Mozilla who developed

110
00:04:06,659 --> 00:04:08,459
rust is not really trying to rewrite all

111
00:04:08,459 --> 00:04:10,260
of Firefox and all of its dependencies

112
00:04:10,260 --> 00:04:11,760
in Rust

113
00:04:11,760 --> 00:04:13,920
so instead we have to look for something

114
00:04:13,920 --> 00:04:16,738
else to tackle these sort of problems

115
00:04:16,738 --> 00:04:19,680
so one thing we can do is take all of

116
00:04:19,680 --> 00:04:21,720
this buggy native code and stick it into

117
00:04:21,720 --> 00:04:23,460
a separate process where it can't affect

118
00:04:23,460 --> 00:04:25,440
the rest of the application this is the

119
00:04:25,440 --> 00:04:27,000
idea of process sandboxing and it's been

120
00:04:27,000 --> 00:04:28,680
around for a while it's convenient

121
00:04:28,680 --> 00:04:30,540
because all of our existing code works

122
00:04:30,540 --> 00:04:32,040
that's great

123
00:04:32,040 --> 00:04:34,919
but what we see is this technique is

124
00:04:34,919 --> 00:04:37,080
rarely used in practice barring like a

125
00:04:37,080 --> 00:04:39,360
couple of exceptions I think opensh web

126
00:04:39,360 --> 00:04:41,400
browsers but other than that it hasn't

127
00:04:41,400 --> 00:04:43,440
really seen widespread adoption

128
00:04:43,440 --> 00:04:44,880
and there's a pretty good reason for

129
00:04:44,880 --> 00:04:46,080
this

130
00:04:46,080 --> 00:04:47,940
and that is performance

131
00:04:47,940 --> 00:04:49,919
when you have processes you have

132
00:04:49,919 --> 00:04:51,840
inter-process communication when you

133
00:04:51,840 --> 00:04:53,580
have inter-process communication you

134
00:04:53,580 --> 00:04:55,680
have slowdowns in your application there

135
00:04:55,680 --> 00:04:58,259
is a lot of overheads cpu-wise memory

136
00:04:58,259 --> 00:05:00,120
wise scheduler-wise and there are

137
00:05:00,120 --> 00:05:02,100
challenges with scaling too

138
00:05:02,100 --> 00:05:04,020
and even if you can get past some of

139
00:05:04,020 --> 00:05:06,419
these what eventually happens when you

140
00:05:06,419 --> 00:05:07,919
use process sandboxing in your

141
00:05:07,919 --> 00:05:09,479
application is you are going to

142
00:05:09,479 --> 00:05:11,040
re-architect it you're going to change

143
00:05:11,040 --> 00:05:13,199
the way it's written it is hard to

144
00:05:13,199 --> 00:05:15,240
retrofit process sandboxing onto your

145
00:05:15,240 --> 00:05:17,940
existing application as is now I could

146
00:05:17,940 --> 00:05:20,040
talk to you about this at Great length

147
00:05:20,040 --> 00:05:22,080
but instead let me just point you to a

148
00:05:22,080 --> 00:05:24,360
great talk by Chris Palmer who went from

149
00:05:24,360 --> 00:05:26,100
Google Chrome security who went through

150
00:05:26,100 --> 00:05:27,780
all of this in great detail

151
00:05:27,780 --> 00:05:30,060
and instead let me talk about a

152
00:05:30,060 --> 00:05:31,620
Technique we tried that did end up

153
00:05:31,620 --> 00:05:34,680
working for us and this is this idea of

154
00:05:34,680 --> 00:05:37,500
in process sandboxing

155
00:05:37,500 --> 00:05:39,780
so in process sandboxing it's a pretty

156
00:05:39,780 --> 00:05:42,240
simple idea again which is we take these

157
00:05:42,240 --> 00:05:44,639
libraries that we don't trust we compile

158
00:05:44,639 --> 00:05:46,020
them with the web assembly with

159
00:05:46,020 --> 00:05:48,000
webassembly to sandbox them

160
00:05:48,000 --> 00:05:50,520
and then we run them in the same process

161
00:05:50,520 --> 00:05:52,919
and for the purpose of this talk it's

162
00:05:52,919 --> 00:05:55,080
sufficient to think of webassembly as

163
00:05:55,080 --> 00:05:57,360
this compiler that can isolate code

164
00:05:57,360 --> 00:06:00,240
using runtime checks

165
00:06:00,240 --> 00:06:03,000
and what we're trying to get when we do

166
00:06:03,000 --> 00:06:05,340
all of this is to make your application

167
00:06:05,340 --> 00:06:07,500
look something like that

168
00:06:07,500 --> 00:06:10,680
not this big monolith blob of code that

169
00:06:10,680 --> 00:06:12,479
can access any part of the address space

170
00:06:12,479 --> 00:06:14,280
but something with clear components

171
00:06:14,280 --> 00:06:16,380
which are sandboxed and the sandbox

172
00:06:16,380 --> 00:06:18,419
components can only access a portion of

173
00:06:18,419 --> 00:06:21,000
the address space so for example there

174
00:06:21,000 --> 00:06:24,000
lib jpeg can only access addresses

175
00:06:24,000 --> 00:06:28,560
between Ox 4100 and Ox 4200

176
00:06:28,560 --> 00:06:30,539
and the end result of doing something

177
00:06:30,539 --> 00:06:32,639
like this is when you have a user after

178
00:06:32,639 --> 00:06:34,139
free a buffer overflow or something

179
00:06:34,139 --> 00:06:36,060
similar in lib jpeg

180
00:06:36,060 --> 00:06:38,580
it does not touch any of the memory of

181
00:06:38,580 --> 00:06:40,979
the main Firefox process or any other

182
00:06:40,979 --> 00:06:43,460
component

183
00:06:43,680 --> 00:06:46,319
this is really nice because we now get

184
00:06:46,319 --> 00:06:48,479
code reuse and we also get performance

185
00:06:48,479 --> 00:06:50,819
there is no processes hence there is no

186
00:06:50,819 --> 00:06:54,300
IPC CP overheads are great

187
00:06:54,300 --> 00:06:56,100
but we still have this open challenge

188
00:06:56,100 --> 00:06:57,960
now which is the engineering effort

189
00:06:57,960 --> 00:07:00,720
involved we still have to take this idea

190
00:07:00,720 --> 00:07:03,240
of in-process sandboxing and put it into

191
00:07:03,240 --> 00:07:06,000
our existing million light code base and

192
00:07:06,000 --> 00:07:07,919
so on

193
00:07:07,919 --> 00:07:09,600
and it turns out this is a really hard

194
00:07:09,600 --> 00:07:10,620
problem

195
00:07:10,620 --> 00:07:13,199
at least to do by hand there is some you

196
00:07:13,199 --> 00:07:15,240
do need some help so let's let's talk

197
00:07:15,240 --> 00:07:17,639
about that let's talk about this uh what

198
00:07:17,639 --> 00:07:19,680
the pain points of in-process sandboxing

199
00:07:19,680 --> 00:07:22,560
are and why we need a framework to help

200
00:07:22,560 --> 00:07:25,440
us adopt this in the first place

201
00:07:25,440 --> 00:07:27,780
and the best way to kind of get a sense

202
00:07:27,780 --> 00:07:30,180
of what's Happening Here is with an

203
00:07:30,180 --> 00:07:32,400
example so we're going to use this as

204
00:07:32,400 --> 00:07:34,500
our running case study we're going to

205
00:07:34,500 --> 00:07:37,080
try to sandbox lib jpeg in the Firefox

206
00:07:37,080 --> 00:07:38,340
web browser

207
00:07:38,340 --> 00:07:41,699
again the goal is isolate lib jpeg any

208
00:07:41,699 --> 00:07:43,680
memory safety errors in lib jpeg do not

209
00:07:43,680 --> 00:07:46,319
affect the rest of Firefox

210
00:07:46,319 --> 00:07:49,740
so step one here really simple take lib

211
00:07:49,740 --> 00:07:51,000
jpeg sources

212
00:07:51,000 --> 00:07:52,500
run it through the Watson compiler

213
00:07:52,500 --> 00:07:55,740
produced a sandboxed lib jpeg binary

214
00:07:55,740 --> 00:07:58,259
and under the covers webassembly is

215
00:07:58,259 --> 00:08:00,539
adding range checks so the way it

216
00:08:00,539 --> 00:08:02,160
actually ensures sandboxing is with

217
00:08:02,160 --> 00:08:04,740
range checks like this where any memory

218
00:08:04,740 --> 00:08:06,780
read you have in your application is

219
00:08:06,780 --> 00:08:08,300
just transformed to a range check

220
00:08:08,300 --> 00:08:11,819
followed by the same memory read

221
00:08:11,819 --> 00:08:14,160
and it's a pretty simple idea and I

222
00:08:14,160 --> 00:08:16,259
should point out that in practice there

223
00:08:16,259 --> 00:08:18,000
are a bunch of Tricks involved to make

224
00:08:18,000 --> 00:08:19,740
these sort of range stats like to

225
00:08:19,740 --> 00:08:21,479
optimize away these range checks for

226
00:08:21,479 --> 00:08:23,520
performance but this should give you the

227
00:08:23,520 --> 00:08:25,560
intuition

228
00:08:25,560 --> 00:08:28,020
and broadly we know how to do this this

229
00:08:28,020 --> 00:08:30,240
is in some sense the simple bit the

230
00:08:30,240 --> 00:08:32,159
really difficult bit is we now need to

231
00:08:32,159 --> 00:08:34,620
modify Firefox to incorporate this

232
00:08:34,620 --> 00:08:37,140
sandbox lip JPEG and this is the bit I

233
00:08:37,140 --> 00:08:40,200
want to focus on for now

234
00:08:40,200 --> 00:08:42,659
and let me actually walk you through the

235
00:08:42,659 --> 00:08:44,760
various steps now that are needed to

236
00:08:44,760 --> 00:08:47,100
incorporate this modified lip jpeg

237
00:08:47,100 --> 00:08:49,320
and the first thing we would do if we

238
00:08:49,320 --> 00:08:51,360
wanted to do this is decouple the

239
00:08:51,360 --> 00:08:53,580
library and this is not just a matter of

240
00:08:53,580 --> 00:08:55,380
like grabbing the code and putting it in

241
00:08:55,380 --> 00:08:57,180
a separate folder now we need to grab

242
00:08:57,180 --> 00:08:58,980
all of the shared data structures we

243
00:08:58,980 --> 00:09:01,080
need to figure out how con descent how

244
00:09:01,080 --> 00:09:03,300
to disentangle the shared control flow

245
00:09:03,300 --> 00:09:05,220
all of these things have to be carefully

246
00:09:05,220 --> 00:09:06,899
separated so that we can actually

247
00:09:06,899 --> 00:09:09,360
sandbox lip jpeg correctly

248
00:09:09,360 --> 00:09:12,120
and once we do this we need to now go

249
00:09:12,120 --> 00:09:14,040
back and think about all of the data

250
00:09:14,040 --> 00:09:15,779
sharing that needs to happen because

251
00:09:15,779 --> 00:09:17,760
components now have their own separate

252
00:09:17,760 --> 00:09:20,160
memory so we need to Marshall data back

253
00:09:20,160 --> 00:09:22,200
and forth between different components

254
00:09:22,200 --> 00:09:24,240
and this is actually made challenging by

255
00:09:24,240 --> 00:09:26,519
a couple of different factors the first

256
00:09:26,519 --> 00:09:28,500
one is webassembly is a different

257
00:09:28,500 --> 00:09:30,720
compiler it has a different API it has

258
00:09:30,720 --> 00:09:32,880
different calling conventions some of

259
00:09:32,880 --> 00:09:34,440
these are chosen for performance reasons

260
00:09:34,440 --> 00:09:36,060
but they are different from the rest of

261
00:09:36,060 --> 00:09:38,700
Firefox so we now need to deal with this

262
00:09:38,700 --> 00:09:40,980
we have to have a patchwork of code that

263
00:09:40,980 --> 00:09:42,480
fixes all of these things before and

264
00:09:42,480 --> 00:09:45,300
after every time we Marshal data

265
00:09:45,300 --> 00:09:47,399
and the second bit is we can't just

266
00:09:47,399 --> 00:09:49,080
stick this marshalling code wherever we

267
00:09:49,080 --> 00:09:51,240
want we need to do this very carefully

268
00:09:51,240 --> 00:09:53,399
we need to do this lazily so that we

269
00:09:53,399 --> 00:09:55,019
limit the amount of marshalling and

270
00:09:55,019 --> 00:09:57,300
limit the overhead of marshalling data

271
00:09:57,300 --> 00:09:58,740
back and forth

272
00:09:58,740 --> 00:10:01,980
and once we complete all of this

273
00:10:01,980 --> 00:10:03,360
we still have to think more about

274
00:10:03,360 --> 00:10:04,560
security

275
00:10:04,560 --> 00:10:07,740
because when we started lib jpeg was a

276
00:10:07,740 --> 00:10:10,080
trusted Library Firefox trusted lib JPEG

277
00:10:10,080 --> 00:10:12,959
and a trusted lib jpegs outputs what

278
00:10:12,959 --> 00:10:14,640
we've said now is lib jpack is sandbox

279
00:10:14,640 --> 00:10:17,040
we don't trust it we shouldn't trust its

280
00:10:17,040 --> 00:10:19,560
outputs meaning we now have to go back

281
00:10:19,560 --> 00:10:21,240
to the Firefox code

282
00:10:21,240 --> 00:10:23,700
find all the places lib jpeg's output

283
00:10:23,700 --> 00:10:25,860
has been used and add some sort of

284
00:10:25,860 --> 00:10:29,519
Sanity check or data sanitization there

285
00:10:29,519 --> 00:10:31,980
and making all these checkout changes

286
00:10:31,980 --> 00:10:34,140
gets really difficult and nice way to

287
00:10:34,140 --> 00:10:36,480
see this is probably with an example so

288
00:10:36,480 --> 00:10:39,800
let's look at some code

289
00:10:40,260 --> 00:10:43,080
so that's a very simple 10 line example

290
00:10:43,080 --> 00:10:45,120
of an application that renders images

291
00:10:45,120 --> 00:10:47,880
with lip jpeg you don't have to read all

292
00:10:47,880 --> 00:10:49,500
of that in great detail I think the

293
00:10:49,500 --> 00:10:51,120
broad thing to keep in mind there is

294
00:10:51,120 --> 00:10:52,620
there's an application that renders

295
00:10:52,620 --> 00:10:54,240
images there are a couple of calls to

296
00:10:54,240 --> 00:10:57,779
lib JPEG apis and we want to modify this

297
00:10:57,779 --> 00:10:59,640
application to do all of the things we

298
00:10:59,640 --> 00:11:02,100
just talked about marshalling API fixing

299
00:11:02,100 --> 00:11:04,500
Security checks

300
00:11:04,500 --> 00:11:07,260
so if we actually went ahead and did all

301
00:11:07,260 --> 00:11:09,540
of those changes the resulting code is

302
00:11:09,540 --> 00:11:12,740
going to look something like this

303
00:11:13,019 --> 00:11:15,600
nearly every line of that code of code

304
00:11:15,600 --> 00:11:16,740
has changed

305
00:11:16,740 --> 00:11:19,980
and it is and if you if you actually uh

306
00:11:19,980 --> 00:11:21,540
read what's there which I do not

307
00:11:21,540 --> 00:11:23,220
recommend you're going to see that it's

308
00:11:23,220 --> 00:11:25,260
almost impossible to understand

309
00:11:25,260 --> 00:11:28,140
and here's the best best bit if you get

310
00:11:28,140 --> 00:11:30,300
any of that wrong your security is

311
00:11:30,300 --> 00:11:32,940
completely compromised like all of that

312
00:11:32,940 --> 00:11:34,980
sandboxing counts for another

313
00:11:34,980 --> 00:11:38,040
so this is where we found the Practical

314
00:11:38,040 --> 00:11:39,839
challenges line and we really had a hard

315
00:11:39,839 --> 00:11:42,000
time doing this by hand

316
00:11:42,000 --> 00:11:43,860
and we basically came to the conclusion

317
00:11:43,860 --> 00:11:45,660
that if we have to write code like this

318
00:11:45,660 --> 00:11:48,300
it really Falls flat in practice

319
00:11:48,300 --> 00:11:50,459
so even that 10 line example was

320
00:11:50,459 --> 00:11:52,260
difficult to look at imagine doing that

321
00:11:52,260 --> 00:11:54,060
for a real code base with tens of

322
00:11:54,060 --> 00:11:55,680
thousands of lines of code for an image

323
00:11:55,680 --> 00:11:57,360
renderer the diffs are going to be

324
00:11:57,360 --> 00:11:58,380
insane

325
00:11:58,380 --> 00:12:02,880
and and kind of the core problem here is

326
00:12:02,880 --> 00:12:05,339
code like that exposes details of the

327
00:12:05,339 --> 00:12:07,800
sandboxing in your feature code and what

328
00:12:07,800 --> 00:12:10,019
we've done is we've mixed up security

329
00:12:10,019 --> 00:12:11,459
and Feature work

330
00:12:11,459 --> 00:12:13,560
and it really becomes unclear who even

331
00:12:13,560 --> 00:12:15,000
should maintain this code at this point

332
00:12:15,000 --> 00:12:16,320
is it the security team is it the

333
00:12:16,320 --> 00:12:18,180
feature team what happens if you want to

334
00:12:18,180 --> 00:12:20,700
update something who has to view it and

335
00:12:20,700 --> 00:12:22,980
if if you want to add more features to

336
00:12:22,980 --> 00:12:25,079
that code testing debugging

337
00:12:25,079 --> 00:12:26,519
good luck

338
00:12:26,519 --> 00:12:29,100
and even better we've ported that for

339
00:12:29,100 --> 00:12:31,380
one API presumably we want to support

340
00:12:31,380 --> 00:12:33,360
Windows Linux couple of platforms at

341
00:12:33,360 --> 00:12:36,000
least repeat that one more time two more

342
00:12:36,000 --> 00:12:37,920
times three more times and if you

343
00:12:37,920 --> 00:12:40,079
somehow miraculously do all of this

344
00:12:40,079 --> 00:12:42,060
repeat that for each Library you now

345
00:12:42,060 --> 00:12:45,180
want to isolate and sandbox in this way

346
00:12:45,180 --> 00:12:47,700
and we basically so we came to the

347
00:12:47,700 --> 00:12:49,380
conclusion we can't do this by hand and

348
00:12:49,380 --> 00:12:51,899
we weren't even alone in this so people

349
00:12:51,899 --> 00:12:54,360
at Google also tried this and came to

350
00:12:54,360 --> 00:12:55,800
pretty much the same conclusion as we

351
00:12:55,800 --> 00:12:59,040
did this is really hard to do by hand

352
00:12:59,040 --> 00:13:02,579
so to address this problem we built the

353
00:13:02,579 --> 00:13:05,399
robox sandboxing framework

354
00:13:05,399 --> 00:13:08,040
so IRL box is this Library framework

355
00:13:08,040 --> 00:13:10,860
that's meant to simplify adoption of

356
00:13:10,860 --> 00:13:13,920
sandboxing into your existing large code

357
00:13:13,920 --> 00:13:14,760
base

358
00:13:14,760 --> 00:13:18,420
and the core idea here is to use types

359
00:13:18,420 --> 00:13:20,279
we use types to hide all the low level

360
00:13:20,279 --> 00:13:23,279
details so ABI data marshalling all of

361
00:13:23,279 --> 00:13:25,560
this stuff is automatically handled

362
00:13:25,560 --> 00:13:28,200
we use types to track untrusted data and

363
00:13:28,200 --> 00:13:29,820
control flow so if you're missing

364
00:13:29,820 --> 00:13:31,500
Security checks you will get a compile

365
00:13:31,500 --> 00:13:33,540
error which is really nice

366
00:13:33,540 --> 00:13:35,579
and we use types to even let you

367
00:13:35,579 --> 00:13:37,560
identify and make changes to code

368
00:13:37,560 --> 00:13:39,240
incrementally

369
00:13:39,240 --> 00:13:41,279
line by line and you can even pause and

370
00:13:41,279 --> 00:13:43,019
test their application

371
00:13:43,019 --> 00:13:44,820
and the really cool bit of all this is

372
00:13:44,820 --> 00:13:47,399
robox is a PRC plus Library so you can

373
00:13:47,399 --> 00:13:48,839
drop it into your application without

374
00:13:48,839 --> 00:13:50,880
changing your compiler build systems any

375
00:13:50,880 --> 00:13:53,519
of that stuff it should just work

376
00:13:53,519 --> 00:13:55,680
and at a high level all box is pretty

377
00:13:55,680 --> 00:13:57,720
simple there are just three principles

378
00:13:57,720 --> 00:13:59,940
the first is control flow should be

379
00:13:59,940 --> 00:14:01,740
explicit so if you make a function call

380
00:14:01,740 --> 00:14:04,740
to a API to a library like lip jpeg

381
00:14:04,740 --> 00:14:06,839
which you want to sandbox you have to go

382
00:14:06,839 --> 00:14:10,740
through this API called sandbox.inbook

383
00:14:10,800 --> 00:14:15,240
and is RL box is uh forces any data

384
00:14:15,240 --> 00:14:17,339
coming out of the sandbox to be marked

385
00:14:17,339 --> 00:14:20,279
distincted so if you access the size of

386
00:14:20,279 --> 00:14:22,800
the jpeg image which is output by

387
00:14:22,800 --> 00:14:25,019
lib.jpg you're not going to get a u32

388
00:14:25,019 --> 00:14:26,700
you're going to you're going to get a

389
00:14:26,700 --> 00:14:28,200
tainted u32

390
00:14:28,200 --> 00:14:30,720
oh and I should point out if you mess up

391
00:14:30,720 --> 00:14:32,880
in making any of these changes RL box

392
00:14:32,880 --> 00:14:34,860
will force a compile error so you have

393
00:14:34,860 --> 00:14:36,120
to get this right there's no way to get

394
00:14:36,120 --> 00:14:37,440
this wrong

395
00:14:37,440 --> 00:14:40,139
and finally once you've done this

396
00:14:40,139 --> 00:14:42,240
the third principle is you need to make

397
00:14:42,240 --> 00:14:44,279
sure all tainted data is checked before

398
00:14:44,279 --> 00:14:46,800
use so if we now take this previous size

399
00:14:46,800 --> 00:14:48,660
which is Tainted and stick it into a mem

400
00:14:48,660 --> 00:14:50,040
copy operation you're going to get a

401
00:14:50,040 --> 00:14:52,800
compile error the way to fix that is to

402
00:14:52,800 --> 00:14:55,800
call this API called copy and verify and

403
00:14:55,800 --> 00:14:57,720
what what that gives you a chance to do

404
00:14:57,720 --> 00:14:59,639
is sanitize this data and once you do

405
00:14:59,639 --> 00:15:01,380
that the tainting is removed and that

406
00:15:01,380 --> 00:15:03,180
will compile

407
00:15:03,180 --> 00:15:05,579
and again let's go back to that same

408
00:15:05,579 --> 00:15:07,980
example and apply these three principles

409
00:15:07,980 --> 00:15:10,019
our goal is to migrate the code in the

410
00:15:10,019 --> 00:15:11,820
same way that we did before except this

411
00:15:11,820 --> 00:15:13,320
time with robox and these three

412
00:15:13,320 --> 00:15:15,480
principles and I'm going to start with

413
00:15:15,480 --> 00:15:17,339
just the first two there

414
00:15:17,339 --> 00:15:19,440
if I were to make the changes for those

415
00:15:19,440 --> 00:15:20,720
first two principles which is

416
00:15:20,720 --> 00:15:23,399
sandbox.invoke and tainted data

417
00:15:23,399 --> 00:15:25,740
the code is going to look like this

418
00:15:25,740 --> 00:15:27,420
and with even without reading it

419
00:15:27,420 --> 00:15:28,800
hopefully you can see right away that

420
00:15:28,800 --> 00:15:30,120
it's a little bit cleaner it's a little

421
00:15:30,120 --> 00:15:31,980
bit easier to read

422
00:15:31,980 --> 00:15:34,860
and all of this is because robox is

423
00:15:34,860 --> 00:15:36,600
automating a lot of things behind the

424
00:15:36,600 --> 00:15:38,880
scenes all of that API craft all of the

425
00:15:38,880 --> 00:15:40,920
data marshalling that goes away

426
00:15:40,920 --> 00:15:43,139
it's even able to automate some of the

427
00:15:43,139 --> 00:15:44,760
required bounce checks that you need to

428
00:15:44,760 --> 00:15:48,300
have so uh in that example there you

429
00:15:48,300 --> 00:15:49,860
actually need a bounce check because you

430
00:15:49,860 --> 00:15:51,959
are dereferencing a pointer that lib

431
00:15:51,959 --> 00:15:53,639
jpeg has given you so this is Security

432
00:15:53,639 --> 00:15:55,019
check involved usually when you have to

433
00:15:55,019 --> 00:15:56,399
do that

434
00:15:56,399 --> 00:15:59,699
um and so now that we've done we're done

435
00:15:59,699 --> 00:16:01,139
with these first two principles let's

436
00:16:01,139 --> 00:16:03,240
focus in on the third bit which is

437
00:16:03,240 --> 00:16:05,880
Tainted data must be checked

438
00:16:05,880 --> 00:16:08,279
so if we look at that principle we'll

439
00:16:08,279 --> 00:16:11,040
see that this variable size at the

440
00:16:11,040 --> 00:16:13,440
bottom is Tainted

441
00:16:13,440 --> 00:16:15,360
and the reason it's tainted is it's

442
00:16:15,360 --> 00:16:17,880
Computing the number of pixels the image

443
00:16:17,880 --> 00:16:20,279
would have based on jpeg image metadata

444
00:16:20,279 --> 00:16:22,260
which itself comes from lib jpeg so it

445
00:16:22,260 --> 00:16:24,000
makes sense it should be tainted

446
00:16:24,000 --> 00:16:25,860
and size is being used again in a mem

447
00:16:25,860 --> 00:16:29,399
copy later on so we need to validate it

448
00:16:29,399 --> 00:16:32,100
and to get all of this to compile

449
00:16:32,100 --> 00:16:34,199
we should validate this and remove the

450
00:16:34,199 --> 00:16:36,480
tainting and we can in this case if we

451
00:16:36,480 --> 00:16:38,639
stare at this code a little bit we can

452
00:16:38,639 --> 00:16:40,320
identify what sort of security check we

453
00:16:40,320 --> 00:16:41,040
want

454
00:16:41,040 --> 00:16:42,899
the main thing we want to make sure is

455
00:16:42,899 --> 00:16:46,560
that when we copy data out we don't go

456
00:16:46,560 --> 00:16:48,360
past the end of the output buffer so

457
00:16:48,360 --> 00:16:50,519
let's add that security check

458
00:16:50,519 --> 00:16:53,220
we call Copy and verify make sure that

459
00:16:53,220 --> 00:16:55,380
the value of size is less than the

460
00:16:55,380 --> 00:16:56,940
output buffer size

461
00:16:56,940 --> 00:16:58,920
and then we use this checked value in

462
00:16:58,920 --> 00:17:01,079
the mem copy operation and at this point

463
00:17:01,079 --> 00:17:03,899
everything should compile

464
00:17:03,899 --> 00:17:05,640
and this is really what our box brings

465
00:17:05,640 --> 00:17:07,679
to the table it brings some sort of

466
00:17:07,679 --> 00:17:09,599
closure to this process of modifying

467
00:17:09,599 --> 00:17:12,720
code because if you compile this code

468
00:17:12,720 --> 00:17:14,520
and your six or other if you're

469
00:17:14,520 --> 00:17:16,199
successfully able to compile this code

470
00:17:16,199 --> 00:17:18,839
this is robox's way of telling you

471
00:17:18,839 --> 00:17:21,179
you're done with sandboxing you're yeah

472
00:17:21,179 --> 00:17:23,099
this should work

473
00:17:23,099 --> 00:17:26,280
and in effect the takeaway here is when

474
00:17:26,280 --> 00:17:28,439
we use webassembly and arrow box we get

475
00:17:28,439 --> 00:17:30,360
the two things we are looking for

476
00:17:30,360 --> 00:17:33,480
which is fast sandboxing and low

477
00:17:33,480 --> 00:17:35,160
engineering effort

478
00:17:35,160 --> 00:17:37,679
and to really give you a sense of what

479
00:17:37,679 --> 00:17:39,780
this looks like in practice I'm just

480
00:17:39,780 --> 00:17:41,160
going to very very briefly tell you

481
00:17:41,160 --> 00:17:43,860
about our experiences deploying

482
00:17:43,860 --> 00:17:47,460
in-process sandboxing using robox

483
00:17:47,460 --> 00:17:49,860
so the first thing we did and first

484
00:17:49,860 --> 00:17:50,820
thing we should always do When

485
00:17:50,820 --> 00:17:52,620
developing a new framework is try it out

486
00:17:52,620 --> 00:17:54,600
so we tested a whole bunch of

487
00:17:54,600 --> 00:17:56,880
applications to sandbox several

488
00:17:56,880 --> 00:17:58,799
libraries so applications like Firefox

489
00:17:58,799 --> 00:18:01,559
node.js Apache and so on and we

490
00:18:01,559 --> 00:18:03,539
sandboxed several different classes of

491
00:18:03,539 --> 00:18:06,120
libraries image and font rendering audio

492
00:18:06,120 --> 00:18:08,280
video playback XML parsing there's a

493
00:18:08,280 --> 00:18:09,660
whole list

494
00:18:09,660 --> 00:18:13,380
and broadly what we saw is that IRL box

495
00:18:13,380 --> 00:18:16,140
is able to automate away hundreds of

496
00:18:16,140 --> 00:18:18,299
lines of glue code to do with all of the

497
00:18:18,299 --> 00:18:20,400
same ABI marshalling and even Security

498
00:18:20,400 --> 00:18:22,860
checks and what's left for us is pretty

499
00:18:22,860 --> 00:18:25,200
much like what you saw a few pieces of

500
00:18:25,200 --> 00:18:26,760
Tainted data that we need to validate

501
00:18:26,760 --> 00:18:29,039
typically at most two to four lines of

502
00:18:29,039 --> 00:18:30,900
code for this validation

503
00:18:30,900 --> 00:18:34,380
and what this lets us do is sandbox a

504
00:18:34,380 --> 00:18:35,820
library in any one of these applications

505
00:18:35,820 --> 00:18:38,220
in just a matter of a few days

506
00:18:38,220 --> 00:18:40,140
with a confidence that we've actually

507
00:18:40,140 --> 00:18:42,299
gotten it right

508
00:18:42,299 --> 00:18:44,760
and at this point we actually turn

509
00:18:44,760 --> 00:18:46,380
towards deployment we wanted to make

510
00:18:46,380 --> 00:18:49,080
this production and deployment ready

511
00:18:49,080 --> 00:18:52,440
so we worked uh worked for a while and

512
00:18:52,440 --> 00:18:54,840
in February 2020 we actually did this we

513
00:18:54,840 --> 00:18:57,360
actually managed to ship RL box in the

514
00:18:57,360 --> 00:18:59,940
Firefox web browser and we started very

515
00:18:59,940 --> 00:19:02,760
small sandboxing just one library on

516
00:19:02,760 --> 00:19:04,559
just a couple of platforms just Mac and

517
00:19:04,559 --> 00:19:05,820
just Linux

518
00:19:05,820 --> 00:19:08,520
and over the course of like two years

519
00:19:08,520 --> 00:19:10,020
since then we've been working on

520
00:19:10,020 --> 00:19:12,059
improving performance portability

521
00:19:12,059 --> 00:19:14,880
debugging a whole bunch of things and as

522
00:19:14,880 --> 00:19:17,520
of this year we've actually sandboxed a

523
00:19:17,520 --> 00:19:19,559
handful of libraries across all

524
00:19:19,559 --> 00:19:22,320
platforms that Firefox supports and this

525
00:19:22,320 --> 00:19:25,580
includes Android as well

526
00:19:25,799 --> 00:19:28,460
and as far

527
00:19:29,460 --> 00:19:31,320
uh make sure that our sandboxing didn't

528
00:19:31,320 --> 00:19:33,780
introduce very large overheads so we

529
00:19:33,780 --> 00:19:35,520
measured a couple of the high value use

530
00:19:35,520 --> 00:19:38,280
cases in Firefox so we measured XML

531
00:19:38,280 --> 00:19:40,919
passing sandboxing XML parsing and font

532
00:19:40,919 --> 00:19:43,679
decompression and broadly we see that

533
00:19:43,679 --> 00:19:45,840
that's around 10 percent

534
00:19:45,840 --> 00:19:48,000
and this allows us to make a security

535
00:19:48,000 --> 00:19:49,799
versus performance trade-off that's

536
00:19:49,799 --> 00:19:51,960
sensible for our application for a

537
00:19:51,960 --> 00:19:54,299
browser these two are just one of the

538
00:19:54,299 --> 00:19:56,760
billion things that a browser does so 10

539
00:19:56,760 --> 00:19:59,100
on one of the billion things is not

540
00:19:59,100 --> 00:20:00,660
something that's perceivable by the end

541
00:20:00,660 --> 00:20:02,400
user so we are actually okay with this

542
00:20:02,400 --> 00:20:04,679
so this works really really well and we

543
00:20:04,679 --> 00:20:07,940
actually did deploy all of this

544
00:20:08,280 --> 00:20:11,160
and we aren't done we are working on a

545
00:20:11,160 --> 00:20:13,380
whole bunch of things uh improving uh

546
00:20:13,380 --> 00:20:15,660
several things on the performance side

547
00:20:15,660 --> 00:20:18,840
we are uh still waiting on things like

548
00:20:18,840 --> 00:20:20,880
uh threading to be fully standardized on

549
00:20:20,880 --> 00:20:22,860
webassembly and we're trying to keep on

550
00:20:22,860 --> 00:20:24,720
top of adopting these things into the

551
00:20:24,720 --> 00:20:26,880
library sandboxing world as well so that

552
00:20:26,880 --> 00:20:28,679
when we sandbox libraries that need

553
00:20:28,679 --> 00:20:32,039
these features they work as expected

554
00:20:32,039 --> 00:20:33,679
we've also done a ton of work

555
00:20:33,679 --> 00:20:35,880
contributing back to sandboxing Tool

556
00:20:35,880 --> 00:20:37,559
chains to make sure they work well on

557
00:20:37,559 --> 00:20:40,380
low resource environments so 32-bit

558
00:20:40,380 --> 00:20:42,900
architectures like Intel 32 arm32 and so

559
00:20:42,900 --> 00:20:44,520
on and

560
00:20:44,520 --> 00:20:46,860
one of the challenges there which we've

561
00:20:46,860 --> 00:20:48,360
made some progress on and but we're

562
00:20:48,360 --> 00:20:50,640
still addressing is it's not just the

563
00:20:50,640 --> 00:20:52,860
memory footprint it is the virtual

564
00:20:52,860 --> 00:20:54,600
memory footprint virtual memory is also

565
00:20:54,600 --> 00:20:56,760
a premium in platforms with 32-bit

566
00:20:56,760 --> 00:20:58,860
pointers so we are doing some work

567
00:20:58,860 --> 00:21:01,500
trying to improve all of that as well

568
00:21:01,500 --> 00:21:04,080
um and finally on the usability space

569
00:21:04,080 --> 00:21:07,080
we're also revamping the robox API we're

570
00:21:07,080 --> 00:21:08,820
trying to make it confirm with all of

571
00:21:08,820 --> 00:21:11,039
the modern C plus idioms as they evolve

572
00:21:11,039 --> 00:21:12,660
and there's a bunch of work we're doing

573
00:21:12,660 --> 00:21:14,160
on the space to make it easier to use as

574
00:21:14,160 --> 00:21:16,340
well

575
00:21:16,620 --> 00:21:18,539
and so if all of that looks interesting

576
00:21:18,539 --> 00:21:19,740
to you

577
00:21:19,740 --> 00:21:22,919
try it out help us get this right use it

578
00:21:22,919 --> 00:21:25,260
in your application and let us know what

579
00:21:25,260 --> 00:21:27,200
worked what didn't

580
00:21:27,200 --> 00:21:29,580
and if you're more on the attack side of

581
00:21:29,580 --> 00:21:32,460
things let me point out that robox is

582
00:21:32,460 --> 00:21:33,900
actually covered

583
00:21:33,900 --> 00:21:36,240
under firefox's bug Bounty and it's

584
00:21:36,240 --> 00:21:38,520
covered as like a sandboxing bug Bounty

585
00:21:38,520 --> 00:21:40,559
which means you get to start by adding a

586
00:21:40,559 --> 00:21:42,539
memory corruption into your favorite

587
00:21:42,539 --> 00:21:44,820
Library that's sandboxed and if you can

588
00:21:44,820 --> 00:21:47,100
escape the sandbox you get the bug

589
00:21:47,100 --> 00:21:49,620
bounty

590
00:21:49,620 --> 00:21:54,840
so uh let me briefly conclude uh by

591
00:21:54,840 --> 00:21:57,480
saying in process sandboxing is this

592
00:21:57,480 --> 00:21:59,159
technique it's a practical technique to

593
00:21:59,159 --> 00:22:01,140
secure the native code in your in your

594
00:22:01,140 --> 00:22:02,280
application

595
00:22:02,280 --> 00:22:03,900
it is an idea that's been around for 30

596
00:22:03,900 --> 00:22:05,520
years and it's seeing production for the

597
00:22:05,520 --> 00:22:07,260
first time because we now have the tools

598
00:22:07,260 --> 00:22:10,500
to deploy this and use this RL box is

599
00:22:10,500 --> 00:22:11,880
the framework we built to actually use

600
00:22:11,880 --> 00:22:14,039
in process sandboxing and simplify the

601
00:22:14,039 --> 00:22:16,500
adoption of in-process sandboxing into

602
00:22:16,500 --> 00:22:17,820
your application

603
00:22:17,820 --> 00:22:20,039
and robox is a production ready tool

604
00:22:20,039 --> 00:22:22,020
it's being used by Firefox it's been

605
00:22:22,020 --> 00:22:23,880
used for the last two years and this is

606
00:22:23,880 --> 00:22:25,500
hopefully something you can use in your

607
00:22:25,500 --> 00:22:27,179
applications as well

608
00:22:27,179 --> 00:22:29,760
so thanks thank you everyone for for

609
00:22:29,760 --> 00:22:31,310
your attention

610
00:22:31,310 --> 00:22:34,419
[Music]

611
00:22:38,260 --> 00:22:41,369
[Music]

