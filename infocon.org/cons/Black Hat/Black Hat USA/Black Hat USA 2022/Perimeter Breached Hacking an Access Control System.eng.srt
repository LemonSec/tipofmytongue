1
00:00:01,730 --> 00:00:03,720
[Music]

2
00:00:03,720 --> 00:00:06,720
foreign

3
00:00:07,880 --> 00:00:10,380
everyone I can't believe how many people

4
00:00:10,380 --> 00:00:12,360
actually made out of bed by 10 a.m at

5
00:00:12,360 --> 00:00:14,639
black hat watch Us open a door you could

6
00:00:14,639 --> 00:00:16,560
do that yourselves thanks for coming

7
00:00:16,560 --> 00:00:18,779
today and our talk is called perimeter

8
00:00:18,779 --> 00:00:20,760
breached hacking access control system

9
00:00:20,760 --> 00:00:23,520
it represents uh a lot more months than

10
00:00:23,520 --> 00:00:25,680
we'd like to admit of research on on

11
00:00:25,680 --> 00:00:28,080
this Target and we're happy to be able

12
00:00:28,080 --> 00:00:29,699
to share with you today

13
00:00:29,699 --> 00:00:31,800
before we get started quick who am I my

14
00:00:31,800 --> 00:00:33,600
name is Steve pavolney I'm head of

15
00:00:33,600 --> 00:00:35,100
advanced vet research and principal

16
00:00:35,100 --> 00:00:37,500
engineer at trellix and my Twitter

17
00:00:37,500 --> 00:00:38,760
handle is there if you want to connect

18
00:00:38,760 --> 00:00:41,399
afterwards or have questions now as a

19
00:00:41,399 --> 00:00:42,899
manager on the team everybody thinks all

20
00:00:42,899 --> 00:00:44,520
I do is Excel spreadsheets which is

21
00:00:44,520 --> 00:00:46,379
generally true but I do have some core

22
00:00:46,379 --> 00:00:48,539
technical interests as well and some of

23
00:00:48,539 --> 00:00:49,920
those are vulnerability root cause

24
00:00:49,920 --> 00:00:53,399
analysis reversing exploitation and with

25
00:00:53,399 --> 00:00:55,140
Sam this is my first chance to do some

26
00:00:55,140 --> 00:00:57,000
Hardware hacking so fun fun chance to

27
00:00:57,000 --> 00:00:58,920
learn yeah and my name is Sam Quinn I'm

28
00:00:58,920 --> 00:01:00,780
a senior security researcher at trellix

29
00:01:00,780 --> 00:01:03,539
and I could have summed up all of my

30
00:01:03,539 --> 00:01:05,459
interests in just hacking in general but

31
00:01:05,459 --> 00:01:07,680
I really do like exploitation Hardware

32
00:01:07,680 --> 00:01:08,900
hacking

33
00:01:08,900 --> 00:01:11,580
embedded systems like iot devices and of

34
00:01:11,580 --> 00:01:14,159
course OS fundamentals and Sam and I

35
00:01:14,159 --> 00:01:15,659
have interests outside of the lab so

36
00:01:15,659 --> 00:01:17,640
when we're not finding uh crashes in the

37
00:01:17,640 --> 00:01:19,619
lab uh we're out mountain biking and

38
00:01:19,619 --> 00:01:21,240
crashes are finding us so that's

39
00:01:21,240 --> 00:01:23,700
legitimate photos that are Gifts of both

40
00:01:23,700 --> 00:01:24,900
of us

41
00:01:24,900 --> 00:01:26,759
um yeah we're obviously experts at that

42
00:01:26,759 --> 00:01:29,159
as well all right I'll levity aside

43
00:01:29,159 --> 00:01:31,860
let's get right into the target here and

44
00:01:31,860 --> 00:01:33,600
we're talking today about the hid

45
00:01:33,600 --> 00:01:36,540
Mercury axis control panel specifically

46
00:01:36,540 --> 00:01:38,939
this is the Lanell 4420 which is an oem

47
00:01:38,939 --> 00:01:41,520
vendor of the hid mercurus Mercury

48
00:01:41,520 --> 00:01:43,740
Access Controller I'm going to talk a

49
00:01:43,740 --> 00:01:45,900
little bit about the who the what the

50
00:01:45,900 --> 00:01:48,840
why the how of this project and before I

51
00:01:48,840 --> 00:01:50,520
do that I want to set the stage a little

52
00:01:50,520 --> 00:01:52,200
bit for how this device is typically

53
00:01:52,200 --> 00:01:53,159
used

54
00:01:53,159 --> 00:01:55,619
so this red panel or controller is

55
00:01:55,619 --> 00:01:57,899
actually what you see in the on the door

56
00:01:57,899 --> 00:01:59,939
behind the door in the typical setup

57
00:01:59,939 --> 00:02:01,619
that's going to usually be in a in a

58
00:02:01,619 --> 00:02:03,840
server Closet in this case though it's

59
00:02:03,840 --> 00:02:05,700
often deployed on a local network very

60
00:02:05,700 --> 00:02:07,259
rarely would we see this at the

61
00:02:07,259 --> 00:02:09,720
perimeter uh not behind a firewall or

62
00:02:09,720 --> 00:02:11,879
Internet exposed certainly possible but

63
00:02:11,879 --> 00:02:13,739
much more likely on a local network here

64
00:02:13,739 --> 00:02:16,140
and this controller is used to manage up

65
00:02:16,140 --> 00:02:19,319
to 64 doors or badges that can be Daisy

66
00:02:19,319 --> 00:02:21,120
chained as well to support essentially

67
00:02:21,120 --> 00:02:23,340
an infinite number now for lennell

68
00:02:23,340 --> 00:02:25,020
there's a management server or local

69
00:02:25,020 --> 00:02:27,180
server called the on guard which is

70
00:02:27,180 --> 00:02:29,220
responsible for doing all of the badge

71
00:02:29,220 --> 00:02:31,920
provisioning access control all of the

72
00:02:31,920 --> 00:02:33,720
door related functions and the

73
00:02:33,720 --> 00:02:35,459
controller itself is kind of just a dumb

74
00:02:35,459 --> 00:02:37,500
device that processes those commands and

75
00:02:37,500 --> 00:02:39,540
opens and closes relays

76
00:02:39,540 --> 00:02:41,580
now why are we looking at Access Control

77
00:02:41,580 --> 00:02:43,500
well we got interested in this of course

78
00:02:43,500 --> 00:02:45,900
because critical infrastructure and

79
00:02:45,900 --> 00:02:47,940
Industrial Control Systems have been

80
00:02:47,940 --> 00:02:49,920
widely targeted especially over the last

81
00:02:49,920 --> 00:02:53,099
five to ten years increasingly so more

82
00:02:53,099 --> 00:02:55,200
so I would say the access control area

83
00:02:55,200 --> 00:02:56,700
is one of those that's been heavily

84
00:02:56,700 --> 00:02:58,800
under audited by the research community

85
00:02:58,800 --> 00:03:01,379
and so it really caught our attention

86
00:03:01,379 --> 00:03:02,879
one of the other things that really

87
00:03:02,879 --> 00:03:04,140
caught our attention when we first

88
00:03:04,140 --> 00:03:06,840
started looking at this device was some

89
00:03:06,840 --> 00:03:08,760
marketing by Lanell that said that this

90
00:03:08,760 --> 00:03:10,379
was certified for use in government

91
00:03:10,379 --> 00:03:12,780
facilities now we found out throughout

92
00:03:12,780 --> 00:03:15,060
the process of talking with carrier and

93
00:03:15,060 --> 00:03:17,099
Lanell that this is actually intended to

94
00:03:17,099 --> 00:03:19,620
be a physical security certification but

95
00:03:19,620 --> 00:03:21,720
regardless it inspired us to do the

96
00:03:21,720 --> 00:03:24,659
research because it says it was approved

97
00:03:24,659 --> 00:03:25,739
following rigorous security

98
00:03:25,739 --> 00:03:27,420
vulnerability and interoperability

99
00:03:27,420 --> 00:03:29,879
testing okay so we had a little finger

100
00:03:29,879 --> 00:03:31,440
licking moment there and that's what

101
00:03:31,440 --> 00:03:33,000
inspired all of this

102
00:03:33,000 --> 00:03:35,280
so that's kind of the why though what

103
00:03:35,280 --> 00:03:36,959
and this is the spoiler alert we've

104
00:03:36,959 --> 00:03:38,340
already disclosed these and these are

105
00:03:38,340 --> 00:03:39,959
all fully patched so comfortable to

106
00:03:39,959 --> 00:03:41,640
share these we have eight

107
00:03:41,640 --> 00:03:43,560
vulnerabilities that we submitted for

108
00:03:43,560 --> 00:03:46,260
disclosure four of which are true zero

109
00:03:46,260 --> 00:03:48,540
day vulnerabilities and unauthenticated

110
00:03:48,540 --> 00:03:50,700
remote code execution we're going to

111
00:03:50,700 --> 00:03:52,680
focus on just three of them today given

112
00:03:52,680 --> 00:03:54,120
the time constraints we have at Black

113
00:03:54,120 --> 00:03:55,560
Cat and we'll have a little bit more

114
00:03:55,560 --> 00:03:57,420
detail in our Defcon talk as well if you

115
00:03:57,420 --> 00:03:59,459
want to join us

116
00:03:59,459 --> 00:04:01,440
all right so that brings us to the who

117
00:04:01,440 --> 00:04:03,840
who's affected by these well when we did

118
00:04:03,840 --> 00:04:05,879
this project originally on the Lanell

119
00:04:05,879 --> 00:04:08,640
4420 board we kind of had thought that

120
00:04:08,640 --> 00:04:11,220
that was the extent of impacted panels

121
00:04:11,220 --> 00:04:13,140
well we found out later through talking

122
00:04:13,140 --> 00:04:16,139
to Carrie or Lanell and Mercury was that

123
00:04:16,139 --> 00:04:17,699
there was eight additional panels that

124
00:04:17,699 --> 00:04:19,019
were also vulnerable to these same

125
00:04:19,019 --> 00:04:20,760
issues bringing us to a total of nine

126
00:04:20,760 --> 00:04:24,360
effective panels and more so over 20 OEM

127
00:04:24,360 --> 00:04:26,460
vendors which put a sticker on the hid

128
00:04:26,460 --> 00:04:28,680
Mercury boards were affected by all

129
00:04:28,680 --> 00:04:30,600
vulnerabilities so this represents

130
00:04:30,600 --> 00:04:33,300
millions of controllers at tens of

131
00:04:33,300 --> 00:04:35,400
thousands of sites worldwide and really

132
00:04:35,400 --> 00:04:37,080
the vast majority of Fortune 100

133
00:04:37,080 --> 00:04:39,180
companies so the install base is pretty

134
00:04:39,180 --> 00:04:42,120
significant here and finally these are

135
00:04:42,120 --> 00:04:44,460
now added to the or the 4420 was added

136
00:04:44,460 --> 00:04:46,740
to the government's APL or approved

137
00:04:46,740 --> 00:04:48,180
product list meaning there's no

138
00:04:48,180 --> 00:04:50,460
additional security certifications that

139
00:04:50,460 --> 00:04:52,020
they need to put these in a sensitive or

140
00:04:52,020 --> 00:04:54,060
protected facility

141
00:04:54,060 --> 00:04:56,520
the way that we approach this project is

142
00:04:56,520 --> 00:04:57,900
we didn't want to just get up here and

143
00:04:57,900 --> 00:04:59,639
dump CDs on you guys that's that's kind

144
00:04:59,639 --> 00:05:01,199
of an old story we're going to do that

145
00:05:01,199 --> 00:05:03,240
but not just that we're also going to

146
00:05:03,240 --> 00:05:04,800
talk about the kind of a choose your

147
00:05:04,800 --> 00:05:06,540
opponent Venture style where we say you

148
00:05:06,540 --> 00:05:08,400
know at various decision points in this

149
00:05:08,400 --> 00:05:10,380
process what did we decide to do and

150
00:05:10,380 --> 00:05:12,120
what was the logic or rationale behind

151
00:05:12,120 --> 00:05:15,120
it now uh we actually presented part of

152
00:05:15,120 --> 00:05:17,160
this research at Hardware Hardware i o a

153
00:05:17,160 --> 00:05:18,780
couple months ago but we spent a lot

154
00:05:18,780 --> 00:05:20,520
more of our Focus there talking on the

155
00:05:20,520 --> 00:05:22,680
hardware analysis Hardware hacking to

156
00:05:22,680 --> 00:05:24,180
get us to the point where we had a root

157
00:05:24,180 --> 00:05:26,039
shell on the device so for today's

158
00:05:26,039 --> 00:05:28,500
purposes both black hat and Defcon will

159
00:05:28,500 --> 00:05:30,539
be starting with a root shell and

160
00:05:30,539 --> 00:05:31,919
there's no vulnerabilities to get to

161
00:05:31,919 --> 00:05:33,600
this point there was a lot of work and

162
00:05:33,600 --> 00:05:35,400
Hardware analysis to get a root shell

163
00:05:35,400 --> 00:05:37,080
but the vulnerabilities really were only

164
00:05:37,080 --> 00:05:38,759
possible to find from this point of

165
00:05:38,759 --> 00:05:40,380
analysis on

166
00:05:40,380 --> 00:05:42,000
let's start by looking at some of the

167
00:05:42,000 --> 00:05:43,500
standard operations on this control

168
00:05:43,500 --> 00:05:46,320
panel as you might imagine one of the

169
00:05:46,320 --> 00:05:47,820
first things we do is scan the open

170
00:05:47,820 --> 00:05:49,919
network ports and we found just three

171
00:05:49,919 --> 00:05:51,960
open ports here the web server which

172
00:05:51,960 --> 00:05:55,919
runs 80 and SSL 443 and also Port 3001

173
00:05:55,919 --> 00:05:58,380
which is used as the on guard Management

174
00:05:58,380 --> 00:06:00,479
Port so that's that LSM the local

175
00:06:00,479 --> 00:06:02,820
security manager that manages the device

176
00:06:02,820 --> 00:06:04,979
now we didn't have that set at set up at

177
00:06:04,979 --> 00:06:06,120
the time because we bought our first

178
00:06:06,120 --> 00:06:08,160
board off of eBay and so we really

179
00:06:08,160 --> 00:06:09,300
didn't have anything to do with that

180
00:06:09,300 --> 00:06:10,620
port at the time

181
00:06:10,620 --> 00:06:12,300
when the web server spins up you're

182
00:06:12,300 --> 00:06:14,220
greeted with a typical admin you know

183
00:06:14,220 --> 00:06:16,259
password login this is where typical

184
00:06:16,259 --> 00:06:18,180
session management is done and done

185
00:06:18,180 --> 00:06:21,419
properly for in many places hint hint

186
00:06:21,419 --> 00:06:23,160
um but this is where we we track section

187
00:06:23,160 --> 00:06:25,259
cookies and and you know we we are able

188
00:06:25,259 --> 00:06:27,000
to authenticate to the device

189
00:06:27,000 --> 00:06:29,100
when you log in you're greeted with some

190
00:06:29,100 --> 00:06:31,080
of these Diagnostics and configuration

191
00:06:31,080 --> 00:06:33,180
tabs what you might notice from the web

192
00:06:33,180 --> 00:06:34,979
server is very little to none of this

193
00:06:34,979 --> 00:06:37,139
has anything to do with access control

194
00:06:37,139 --> 00:06:39,780
or doors or badges this is all device

195
00:06:39,780 --> 00:06:42,419
configuration contents nonetheless it

196
00:06:42,419 --> 00:06:43,560
became one of the most interesting

197
00:06:43,560 --> 00:06:45,840
places for us to look especially at the

198
00:06:45,840 --> 00:06:47,520
network setting tabs and we'll we'll go

199
00:06:47,520 --> 00:06:49,620
into a lot more detail on why we chose

200
00:06:49,620 --> 00:06:52,080
that in just a moment here

201
00:06:52,080 --> 00:06:53,819
so that brings us to our first choose

202
00:06:53,819 --> 00:06:55,620
your opponent Adventure which was our

203
00:06:55,620 --> 00:06:57,060
objective at this point was pretty

204
00:06:57,060 --> 00:06:59,280
clear-cut we wanted to find a zero day

205
00:06:59,280 --> 00:07:02,220
rce vulnerability and ideally have it be

206
00:07:02,220 --> 00:07:03,720
unauthenticated so that we could do

207
00:07:03,720 --> 00:07:05,699
network-based attacks without having to

208
00:07:05,699 --> 00:07:06,539
log in

209
00:07:06,539 --> 00:07:07,860
three different areas we could have

210
00:07:07,860 --> 00:07:10,199
investigated NOS vulnerability where

211
00:07:10,199 --> 00:07:12,539
we're looking for proprietary code or

212
00:07:12,539 --> 00:07:14,460
applications libraries and files from

213
00:07:14,460 --> 00:07:17,100
the vendors Keys credentials crypto all

214
00:07:17,100 --> 00:07:19,259
that kind of stuff we kind of opted to

215
00:07:19,259 --> 00:07:21,060
go for more of a web-based and

216
00:07:21,060 --> 00:07:22,680
network-based approach where we're

217
00:07:22,680 --> 00:07:23,940
looking for things like a command

218
00:07:23,940 --> 00:07:25,620
injection because we have access to the

219
00:07:25,620 --> 00:07:27,660
web server of course and that can be a

220
00:07:27,660 --> 00:07:30,479
really great place to start analysis on

221
00:07:30,479 --> 00:07:32,220
the network phone side we'd be typically

222
00:07:32,220 --> 00:07:33,840
looking at the network stack itself

223
00:07:33,840 --> 00:07:36,360
probably for an end day in some of the

224
00:07:36,360 --> 00:07:38,759
third party libraries or the stack but

225
00:07:38,759 --> 00:07:40,199
we ended up going with the web-based

226
00:07:40,199 --> 00:07:41,880
vulnerability

227
00:07:41,880 --> 00:07:44,639
one of the key areas for uh for

228
00:07:44,639 --> 00:07:46,440
web-based attacks includes command

229
00:07:46,440 --> 00:07:48,300
injections and this was our ideal

230
00:07:48,300 --> 00:07:50,639
candidate because if you look at one of

231
00:07:50,639 --> 00:07:52,319
the startup processes on the on the

232
00:07:52,319 --> 00:07:54,660
controller itself there's a DHCP

233
00:07:54,660 --> 00:07:57,060
scriptlet that's run as root here which

234
00:07:57,060 --> 00:08:00,060
processes the hostname with a dash H

235
00:08:00,060 --> 00:08:02,039
switch for the controller itself in this

236
00:08:02,039 --> 00:08:03,960
case it's called controller one and we

237
00:08:03,960 --> 00:08:05,819
can see that that controller is actually

238
00:08:05,819 --> 00:08:07,560
taken from the hostname file on the

239
00:08:07,560 --> 00:08:09,660
device so if we can command inject into

240
00:08:09,660 --> 00:08:11,520
the hostname which of course we're going

241
00:08:11,520 --> 00:08:13,380
to show you the ability to do we might

242
00:08:13,380 --> 00:08:16,440
be able to actually execute code here

243
00:08:16,440 --> 00:08:17,880
so let's talk about some of the

244
00:08:17,880 --> 00:08:19,319
character restrictions on the network

245
00:08:19,319 --> 00:08:20,639
page and that's what we're on the

246
00:08:20,639 --> 00:08:22,319
network settings page if you look at

247
00:08:22,319 --> 00:08:24,599
where the controller is uh the host name

248
00:08:24,599 --> 00:08:26,039
is set which in this case is called

249
00:08:26,039 --> 00:08:28,020
controller one we have some character

250
00:08:28,020 --> 00:08:30,000
restrictions on the client side which

251
00:08:30,000 --> 00:08:32,099
are alphanumeric characters and period

252
00:08:32,099 --> 00:08:34,380
and hyphen when we look at the actual

253
00:08:34,380 --> 00:08:36,000
JavaScript that's responsible for

254
00:08:36,000 --> 00:08:37,979
processing that the string match does

255
00:08:37,979 --> 00:08:39,719
absolutely match up to that we see

256
00:08:39,719 --> 00:08:42,299
alphanumeric and dash and Dot characters

257
00:08:42,299 --> 00:08:45,000
as being the only ones allowed well as

258
00:08:45,000 --> 00:08:46,680
we all know client-side is not typically

259
00:08:46,680 --> 00:08:47,880
the only thing that's being checked

260
00:08:47,880 --> 00:08:50,160
there's also server side checks here and

261
00:08:50,160 --> 00:08:52,200
we see this function called xss string

262
00:08:52,200 --> 00:08:54,000
test or the cross-site scripting string

263
00:08:54,000 --> 00:08:56,040
test now they do look for a number of

264
00:08:56,040 --> 00:08:57,899
cross-site scripting characters in here

265
00:08:57,899 --> 00:08:59,399
and this is an additional character

266
00:08:59,399 --> 00:09:01,980
filter list but not just for xss there's

267
00:09:01,980 --> 00:09:03,540
also some interesting command injection

268
00:09:03,540 --> 00:09:05,519
restrictions here we'd like to be able

269
00:09:05,519 --> 00:09:07,200
to use the forward slash character for

270
00:09:07,200 --> 00:09:08,940
paths we'd like to be able to use the

271
00:09:08,940 --> 00:09:11,220
semicolon for uh for command injection

272
00:09:11,220 --> 00:09:13,200
but what you might notice in here is

273
00:09:13,200 --> 00:09:14,399
that they aren't checking for things

274
00:09:14,399 --> 00:09:16,380
like the sigil the dollar sign or

275
00:09:16,380 --> 00:09:18,779
parentheses and I'll come back to that

276
00:09:18,779 --> 00:09:21,000
in just a moment here the final thing

277
00:09:21,000 --> 00:09:22,500
that is being parsed here is a function

278
00:09:22,500 --> 00:09:24,779
called parse forms data where there's a

279
00:09:24,779 --> 00:09:26,220
string tokenizer function that's

280
00:09:26,220 --> 00:09:28,200
actually splitting the hostname string

281
00:09:28,200 --> 00:09:30,420
anytime it sees an equals or white space

282
00:09:30,420 --> 00:09:32,399
single white space character now white

283
00:09:32,399 --> 00:09:34,019
space characters are super useful when

284
00:09:34,019 --> 00:09:36,180
you're using command injection so to get

285
00:09:36,180 --> 00:09:38,459
around that we use that dollar sign and

286
00:09:38,459 --> 00:09:40,320
parentheses to do command injection

287
00:09:40,320 --> 00:09:42,480
instead of a semicolon and we replace

288
00:09:42,480 --> 00:09:44,279
the single white spaces with tab

289
00:09:44,279 --> 00:09:46,620
characters or backslash T here and that

290
00:09:46,620 --> 00:09:48,360
worked perfectly well because Linux will

291
00:09:48,360 --> 00:09:50,880
interpret any white space any white

292
00:09:50,880 --> 00:09:54,600
space characters as well as the others

293
00:09:54,600 --> 00:09:56,220
before we go into the command injection

294
00:09:56,220 --> 00:09:57,600
and kind of show you that part of it

295
00:09:57,600 --> 00:09:58,920
live and we're going to break up the

296
00:09:58,920 --> 00:10:00,600
attack into kind of live sections on

297
00:10:00,600 --> 00:10:02,160
stage here because that makes it easier

298
00:10:02,160 --> 00:10:04,500
to get massive epic failures uh let's

299
00:10:04,500 --> 00:10:06,480
talk about the way that authentication

300
00:10:06,480 --> 00:10:08,459
is handled for gits and posts to the web

301
00:10:08,459 --> 00:10:10,620
server get requests are handled pretty

302
00:10:10,620 --> 00:10:12,839
typically here you get a session ID by

303
00:10:12,839 --> 00:10:15,240
calling get session ID function and then

304
00:10:15,240 --> 00:10:17,040
you compare that session ID to the

305
00:10:17,040 --> 00:10:18,600
session ID that's taken from the cookie

306
00:10:18,600 --> 00:10:20,820
value that all makes sense and if that

307
00:10:20,820 --> 00:10:23,760
check validates you're good to go now

308
00:10:23,760 --> 00:10:25,260
what's a little bit strange is the way

309
00:10:25,260 --> 00:10:27,120
that post requests are being handled and

310
00:10:27,120 --> 00:10:28,560
the way that posts are done starts out

311
00:10:28,560 --> 00:10:30,720
the same way get session ID from a

312
00:10:30,720 --> 00:10:32,880
cookie but as you might see that's never

313
00:10:32,880 --> 00:10:34,320
compared to anything so it's just

314
00:10:34,320 --> 00:10:36,120
checking that any session idea exists

315
00:10:36,120 --> 00:10:37,740
and you'll see in our Command injection

316
00:10:37,740 --> 00:10:41,640
we use 1337 1337 as our session ID you

317
00:10:41,640 --> 00:10:43,140
can use anything you want here and any

318
00:10:43,140 --> 00:10:44,640
post request data will succeed

319
00:10:44,640 --> 00:10:46,800
unauthenticated

320
00:10:46,800 --> 00:10:48,600
all right so Sam's going to start us off

321
00:10:48,600 --> 00:10:51,000
by loading up a live demo here where we

322
00:10:51,000 --> 00:10:52,680
show you a little bit more of the

323
00:10:52,680 --> 00:10:54,540
command injection how that works the

324
00:10:54,540 --> 00:10:56,459
auth bypass and we're going to hack this

325
00:10:56,459 --> 00:10:59,279
incrementally as we show you here

326
00:10:59,279 --> 00:11:01,140
way too small

327
00:11:01,140 --> 00:11:04,140
oh there we go so I'll first of all

328
00:11:04,140 --> 00:11:05,940
start off with our Command and control

329
00:11:05,940 --> 00:11:08,760
server this is to bypass not having to

330
00:11:08,760 --> 00:11:10,860
type our whole every script that we want

331
00:11:10,860 --> 00:11:13,019
to run into that hostname so this will

332
00:11:13,019 --> 00:11:15,000
eventually give out some more commands

333
00:11:15,000 --> 00:11:17,220
for us to run we'll come back to this in

334
00:11:17,220 --> 00:11:19,380
just a little bit though

335
00:11:19,380 --> 00:11:21,360
um so then next we'll start off by

336
00:11:21,360 --> 00:11:23,880
actually doing the command ejection so I

337
00:11:23,880 --> 00:11:26,459
will first go ahead and Cat that out for

338
00:11:26,459 --> 00:11:27,600
you

339
00:11:27,600 --> 00:11:29,880
um it's a simple bash script and since

340
00:11:29,880 --> 00:11:31,740
we're using Curl we're not using any of

341
00:11:31,740 --> 00:11:33,420
the JavaScript that Steve showed to do

342
00:11:33,420 --> 00:11:35,459
any of the character restrictions and it

343
00:11:35,459 --> 00:11:36,899
looks kind of confusing we'll dive into

344
00:11:36,899 --> 00:11:39,120
it a little bit more in a bit but the

345
00:11:39,120 --> 00:11:40,260
most important thing that I want to

346
00:11:40,260 --> 00:11:43,079
point out here is that the session ID is

347
00:11:43,079 --> 00:11:44,820
a Boga session ID so this is

348
00:11:44,820 --> 00:11:46,500
unauthenticated here

349
00:11:46,500 --> 00:11:49,820
and we'll go ahead and run that

350
00:11:52,320 --> 00:11:55,019
all right and so that has Ran So now if

351
00:11:55,019 --> 00:11:58,320
we go ahead and pull up the web server

352
00:11:58,320 --> 00:12:01,640
and log in

353
00:12:03,959 --> 00:12:06,500
use the password manager but I can't

354
00:12:06,500 --> 00:12:10,860
here we go log in and go to that Network

355
00:12:10,860 --> 00:12:14,600
page where the host name is shown

356
00:12:14,700 --> 00:12:17,459
it did indeed get all of those you know

357
00:12:17,459 --> 00:12:20,100
restricted characters applied and our

358
00:12:20,100 --> 00:12:22,560
host name is now a valid command

359
00:12:22,560 --> 00:12:25,140
ejection however as Steve mentioned it

360
00:12:25,140 --> 00:12:27,000
does only run at boot so we'll kind of

361
00:12:27,000 --> 00:12:28,800
go back into our slides here and kind of

362
00:12:28,800 --> 00:12:31,740
cover how we kind of use this still to

363
00:12:31,740 --> 00:12:34,980
put it uh you know exploit the system

364
00:12:34,980 --> 00:12:37,860
so the first thing as Steve mentioned

365
00:12:37,860 --> 00:12:39,899
that what's highlighted in red here is

366
00:12:39,899 --> 00:12:41,640
not a space it's indeed a tab which

367
00:12:41,640 --> 00:12:43,680
works perfectly fine for the Linux

368
00:12:43,680 --> 00:12:46,440
interpreter and as he also mentioned we

369
00:12:46,440 --> 00:12:48,540
are running this at boot up through the

370
00:12:48,540 --> 00:12:51,000
DHCP call this is how the Linux

371
00:12:51,000 --> 00:12:52,740
controller of the device gets an IP

372
00:12:52,740 --> 00:12:54,959
address for the first time and most

373
00:12:54,959 --> 00:12:57,120
importantly we want it's happening

374
00:12:57,120 --> 00:12:59,100
through the hostname as you mentioned

375
00:12:59,100 --> 00:13:01,139
but this is the command we actually want

376
00:13:01,139 --> 00:13:03,779
to run this reaches out to that python

377
00:13:03,779 --> 00:13:06,180
listener that we set up our C2 servers

378
00:13:06,180 --> 00:13:08,339
where we can run arbitrary commands

379
00:13:08,339 --> 00:13:09,839
through that and not have to worry about

380
00:13:09,839 --> 00:13:13,680
the restricted characters however this

381
00:13:13,680 --> 00:13:15,660
this command injection is a blocking

382
00:13:15,660 --> 00:13:18,000
call so of course we don't have an IP

383
00:13:18,000 --> 00:13:19,680
address at this point to actually call

384
00:13:19,680 --> 00:13:22,860
this so we actually Nest another DHCP

385
00:13:22,860 --> 00:13:24,959
call inside of the original where we're

386
00:13:24,959 --> 00:13:27,060
actually injecting into so this way we

387
00:13:27,060 --> 00:13:28,860
actually have networking setup and that

388
00:13:28,860 --> 00:13:31,440
W get can actually take place

389
00:13:31,440 --> 00:13:33,480
and this was our first CV that we filed

390
00:13:33,480 --> 00:13:35,519
and it is an unauthenticated command

391
00:13:35,519 --> 00:13:37,800
ejection the only thing dropping it from

392
00:13:37,800 --> 00:13:40,860
a 10.0 CVSs is that it needs to actually

393
00:13:40,860 --> 00:13:43,920
have that reboot to actually trigger so

394
00:13:43,920 --> 00:13:46,320
it doesn't trigger on uh command like we

395
00:13:46,320 --> 00:13:49,320
would hoped but that is still a great

396
00:13:49,320 --> 00:13:52,139
cve and we continued our research where

397
00:13:52,139 --> 00:13:54,000
we now wanted to actually we really

398
00:13:54,000 --> 00:13:56,100
wanted to find a reboot primitive to

399
00:13:56,100 --> 00:13:57,480
actually have that command injection

400
00:13:57,480 --> 00:14:00,360
take place so the first thing we looked

401
00:14:00,360 --> 00:14:02,160
at was trying to find an unauthenticated

402
00:14:02,160 --> 00:14:04,680
reboot through the web server however

403
00:14:04,680 --> 00:14:07,800
there was a reboot like when you click

404
00:14:07,800 --> 00:14:10,260
apply settings it did indeed reboot the

405
00:14:10,260 --> 00:14:12,300
device however that was checking the

406
00:14:12,300 --> 00:14:15,120
cookies correctly so that wasn't a valid

407
00:14:15,120 --> 00:14:18,360
way to reboot the device we did kind of

408
00:14:18,360 --> 00:14:20,940
look into dossing the system there is a

409
00:14:20,940 --> 00:14:23,279
watchdog timer that if any process hangs

410
00:14:23,279 --> 00:14:25,139
for too long it will reboot the device

411
00:14:25,139 --> 00:14:27,779
this did work about after an hour of

412
00:14:27,779 --> 00:14:29,820
sending thousands and thousands of uh

413
00:14:29,820 --> 00:14:31,620
get requests to the device however

414
00:14:31,620 --> 00:14:34,260
pretty noisy and slow and kind of not as

415
00:14:34,260 --> 00:14:37,200
cool as we hoped so we continued to look

416
00:14:37,200 --> 00:14:39,540
for a way to actually crash the device

417
00:14:39,540 --> 00:14:41,699
and if we can cause a segmentation fault

418
00:14:41,699 --> 00:14:44,339
on the on the controller it would

419
00:14:44,339 --> 00:14:47,160
actually reboot the device itself so our

420
00:14:47,160 --> 00:14:48,779
next goal was to actually try to find

421
00:14:48,779 --> 00:14:51,180
memory corruption vulnerabilities

422
00:14:51,180 --> 00:14:53,639
and to do that we wanted to actually

423
00:14:53,639 --> 00:14:55,920
identify you know if it does seg Fault

424
00:14:55,920 --> 00:14:59,100
to make sure that it does reboot and the

425
00:14:59,100 --> 00:15:01,560
controller itself has a custom core dump

426
00:15:01,560 --> 00:15:04,079
Handler every time any application that

427
00:15:04,079 --> 00:15:06,480
dumps its core will run this the script

428
00:15:06,480 --> 00:15:09,959
and it looks pretty standard from this

429
00:15:09,959 --> 00:15:12,240
view but if we actually look into that

430
00:15:12,240 --> 00:15:14,220
script it does a bunch of stuff for

431
00:15:14,220 --> 00:15:16,380
debugging but the last line of it I

432
00:15:16,380 --> 00:15:17,579
don't know if you can see it it says

433
00:15:17,579 --> 00:15:19,139
reboot so this is exactly what we're

434
00:15:19,139 --> 00:15:22,199
looking for and all of the web pages are

435
00:15:22,199 --> 00:15:24,600
CGI bin files which are compiled and if

436
00:15:24,600 --> 00:15:26,639
you can cause any of those to crash we

437
00:15:26,639 --> 00:15:29,519
do indeed dump core run this script and

438
00:15:29,519 --> 00:15:31,920
get that reboot that we're looking for

439
00:15:31,920 --> 00:15:34,019
so to improve our odds of trying to find

440
00:15:34,019 --> 00:15:36,240
memory corruption vulnerabilities and

441
00:15:36,240 --> 00:15:38,220
because all of the web servers are our

442
00:15:38,220 --> 00:15:41,220
websites are running CGI bin files we

443
00:15:41,220 --> 00:15:43,079
started to actually create little

444
00:15:43,079 --> 00:15:45,240
automation scripts to actually improve

445
00:15:45,240 --> 00:15:47,279
our odds of finding these kind of

446
00:15:47,279 --> 00:15:50,639
dangerous functions that are typical for

447
00:15:50,639 --> 00:15:52,500
uh memory corruption vulnerabilities we

448
00:15:52,500 --> 00:15:54,779
wrote an Ida python script to search for

449
00:15:54,779 --> 00:15:57,240
these but most importantly before any

450
00:15:57,240 --> 00:15:59,699
cookie check took place this way that we

451
00:15:59,699 --> 00:16:02,279
could um you know improve our odds of

452
00:16:02,279 --> 00:16:04,440
actually hitting one of these dangerous

453
00:16:04,440 --> 00:16:06,420
functions before any cookie check took

454
00:16:06,420 --> 00:16:09,240
place and it would be unauthenticated

455
00:16:09,240 --> 00:16:11,399
so you can see that a few of these did

456
00:16:11,399 --> 00:16:12,959
indeed have some of these dangerous

457
00:16:12,959 --> 00:16:15,180
functions but looking at them statically

458
00:16:15,180 --> 00:16:17,100
all of them did have you know static

459
00:16:17,100 --> 00:16:19,500
size Fields were programmed correctly

460
00:16:19,500 --> 00:16:21,000
um nothing we could do really there

461
00:16:21,000 --> 00:16:23,519
except for on the next page here we

462
00:16:23,519 --> 00:16:26,220
actually did find one in the advanced uh

463
00:16:26,220 --> 00:16:29,459
Network CGI bin file where there were a

464
00:16:29,459 --> 00:16:31,680
couple calls to stir copy where we

465
00:16:31,680 --> 00:16:34,199
controlled both inputs and outputs and

466
00:16:34,199 --> 00:16:35,880
that's always a good sign for memory

467
00:16:35,880 --> 00:16:37,800
corruption so we did look at that

468
00:16:37,800 --> 00:16:39,600
statically and kind of identified that

469
00:16:39,600 --> 00:16:42,480
from this script here but we wanted to

470
00:16:42,480 --> 00:16:46,980
test it out and it's never good to use

471
00:16:46,980 --> 00:16:49,139
your only board that you have and try

472
00:16:49,139 --> 00:16:51,420
things live because you could corrupt

473
00:16:51,420 --> 00:16:53,699
the machine and you know so we actually

474
00:16:53,699 --> 00:16:58,920
set up a arm cumu VM full system VM and

475
00:16:58,920 --> 00:17:01,259
took the actual Flash images of the

476
00:17:01,259 --> 00:17:03,720
device in ch rooted into them and kind

477
00:17:03,720 --> 00:17:07,079
of created a poor man's uh emulator and

478
00:17:07,079 --> 00:17:09,000
then eventually we used it for fuzzing

479
00:17:09,000 --> 00:17:12,059
but before we get dive into that now

480
00:17:12,059 --> 00:17:14,339
that the system has that CH root

481
00:17:14,339 --> 00:17:16,140
environment and all of the library files

482
00:17:16,140 --> 00:17:17,939
and whatnot are in the right place we

483
00:17:17,939 --> 00:17:19,500
can actually just run these CGI bin

484
00:17:19,500 --> 00:17:21,419
files as normal and you can see here

485
00:17:21,419 --> 00:17:24,059
highlighted this is a joke we're sending

486
00:17:24,059 --> 00:17:26,520
the post data of hack yourself into this

487
00:17:26,520 --> 00:17:28,740
Advanced Network cgibin file and of

488
00:17:28,740 --> 00:17:30,720
course it actually does respond with

489
00:17:30,720 --> 00:17:33,540
valid HTML and this is how the CGI bin

490
00:17:33,540 --> 00:17:36,480
files take post parameters but to

491
00:17:36,480 --> 00:17:38,280
actually fuzz it and try to figure out a

492
00:17:38,280 --> 00:17:40,380
way to you know see if we missed

493
00:17:40,380 --> 00:17:42,299
anything through our python automation

494
00:17:42,299 --> 00:17:44,820
we wanted to actually use a mutator and

495
00:17:44,820 --> 00:17:46,860
to do this we use the simplest mutator I

496
00:17:46,860 --> 00:17:48,539
know of it's redanza it's pretty great

497
00:17:48,539 --> 00:17:51,660
you send in data into the radamza

498
00:17:51,660 --> 00:17:53,760
through standard in and it mutates the

499
00:17:53,760 --> 00:17:56,580
data and comes out differently and

500
00:17:56,580 --> 00:17:59,820
that's great for trying to fuzz this

501
00:17:59,820 --> 00:18:02,700
exact target what we did is we took the

502
00:18:02,700 --> 00:18:04,620
valid post parameters for advanced

503
00:18:04,620 --> 00:18:07,200
Network CGI passed it into radamza and

504
00:18:07,200 --> 00:18:09,660
as you can see all it did is change the

505
00:18:09,660 --> 00:18:12,480
last octet of a DNS server or DNS server

506
00:18:12,480 --> 00:18:15,299
to negative one so it it does it

507
00:18:15,299 --> 00:18:16,919
different things every single time and

508
00:18:16,919 --> 00:18:18,120
this one was a pretty good test in my

509
00:18:18,120 --> 00:18:18,960
opinion

510
00:18:18,960 --> 00:18:21,600
but running this manually that's not

511
00:18:21,600 --> 00:18:23,520
very it wouldn't be very efficient

512
00:18:23,520 --> 00:18:26,640
that's for sure so this is the coolest

513
00:18:26,640 --> 00:18:28,919
fuzzer that I've written so far it's uh

514
00:18:28,919 --> 00:18:31,380
like 15 lines of code and it's just a

515
00:18:31,380 --> 00:18:34,740
bash script where it takes that post

516
00:18:34,740 --> 00:18:37,380
parameters passes it into rodamza to be

517
00:18:37,380 --> 00:18:41,100
mutated and then just sends the mutated

518
00:18:41,100 --> 00:18:43,080
data directly into the CGI bin files

519
00:18:43,080 --> 00:18:45,299
that we're we're trying to look at and

520
00:18:45,299 --> 00:18:48,179
if it the CGI bin files always return a

521
00:18:48,179 --> 00:18:50,400
zero if it ran successfully so if

522
00:18:50,400 --> 00:18:52,320
anything isn't successful return value

523
00:18:52,320 --> 00:18:55,500
we actually spin it up in GDB and then

524
00:18:55,500 --> 00:18:57,600
run a back trace on it with the same

525
00:18:57,600 --> 00:19:00,179
test case so as you can see in this

526
00:19:00,179 --> 00:19:04,140
example here this was indeed a crash in

527
00:19:04,140 --> 00:19:06,900
a countster radamza decided to make it

528
00:19:06,900 --> 00:19:09,059
much longer and added a bunch of random

529
00:19:09,059 --> 00:19:11,280
characters and you can see in the bottom

530
00:19:11,280 --> 00:19:13,679
since we rerun it in GDB you can see

531
00:19:13,679 --> 00:19:16,140
that it crashed in stir copy and it gave

532
00:19:16,140 --> 00:19:17,760
you a full back trace of the system so

533
00:19:17,760 --> 00:19:20,160
pretty simple simple to set up and

534
00:19:20,160 --> 00:19:22,980
honestly a pretty fun fuzzer and however

535
00:19:22,980 --> 00:19:25,440
all of that automation work didn't find

536
00:19:25,440 --> 00:19:26,820
any more vulnerabilities than we found

537
00:19:26,820 --> 00:19:29,220
statically but uh it was still a good

538
00:19:29,220 --> 00:19:30,740
sidebar

539
00:19:30,740 --> 00:19:34,559
this was a second cve that we filed for

540
00:19:34,559 --> 00:19:36,299
this talk and it was an unauthenticated

541
00:19:36,299 --> 00:19:38,760
denial of service because we it was only

542
00:19:38,760 --> 00:19:40,260
an out of bounds read for that

543
00:19:40,260 --> 00:19:42,240
segmentation fault we couldn't use it to

544
00:19:42,240 --> 00:19:44,220
exploit the device however we were able

545
00:19:44,220 --> 00:19:46,200
to use this to cause the segmentation

546
00:19:46,200 --> 00:19:48,360
fault to reboot it so a denial of

547
00:19:48,360 --> 00:19:49,860
service there

548
00:19:49,860 --> 00:19:52,260
and then now that we have kind of the

549
00:19:52,260 --> 00:19:53,880
chain of these two vulnerabilities

550
00:19:53,880 --> 00:19:56,880
together we can indeed actually kind of

551
00:19:56,880 --> 00:19:58,559
exploit the device and I'll have Steve

552
00:19:58,559 --> 00:20:00,660
kind of walk us through the next steps

553
00:20:00,660 --> 00:20:03,120
so now we're at a point where we have a

554
00:20:03,120 --> 00:20:04,620
fully working exploit chain we have a

555
00:20:04,620 --> 00:20:06,240
command injection that runs at reboot

556
00:20:06,240 --> 00:20:07,559
and we have a way to force reboot

557
00:20:07,559 --> 00:20:09,120
through that segmentation fault core

558
00:20:09,120 --> 00:20:11,100
dump Handler so this was a great point

559
00:20:11,100 --> 00:20:12,600
for us to actually update to the latest

560
00:20:12,600 --> 00:20:14,460
firmware because we bought our first

561
00:20:14,460 --> 00:20:16,980
device off of eBay we didn't really have

562
00:20:16,980 --> 00:20:19,500
the ability to do this so we put heavy

563
00:20:19,500 --> 00:20:21,240
quotes around social engineering here

564
00:20:21,240 --> 00:20:22,799
really what we did is we called up a

565
00:20:22,799 --> 00:20:24,360
third-party installer in our Portland

566
00:20:24,360 --> 00:20:27,179
area called convergent and they do a lot

567
00:20:27,179 --> 00:20:29,760
of installs for uh for Lanell and you

568
00:20:29,760 --> 00:20:31,500
know we we may have done a little Cloak

569
00:20:31,500 --> 00:20:32,700
and Dagger in terms of what our

570
00:20:32,700 --> 00:20:34,799
intentions were at this point but they

571
00:20:34,799 --> 00:20:36,120
came out and built us a couple

572
00:20:36,120 --> 00:20:38,340
iterations of this this Behemoth you see

573
00:20:38,340 --> 00:20:40,260
on stage here so that gave us the

574
00:20:40,260 --> 00:20:41,760
ability to integrate the on guard

575
00:20:41,760 --> 00:20:43,919
management server for the first time we

576
00:20:43,919 --> 00:20:45,600
built out a fully functional demo unit

577
00:20:45,600 --> 00:20:47,700
with the controller and card reader this

578
00:20:47,700 --> 00:20:49,620
is wired exactly as it would be in any

579
00:20:49,620 --> 00:20:51,299
facility with the exception that

580
00:20:51,299 --> 00:20:52,620
typically the controller is going to be

581
00:20:52,620 --> 00:20:55,679
in a supply closet or a server closet

582
00:20:55,679 --> 00:20:57,480
more importantly they gave us some

583
00:20:57,480 --> 00:20:58,620
Advanced Training on the normal

584
00:20:58,620 --> 00:21:00,600
operations of this device and how to use

585
00:21:00,600 --> 00:21:03,120
the management server provision Badges

586
00:21:03,120 --> 00:21:06,299
and access control and the most

587
00:21:06,299 --> 00:21:07,799
important thing is we finally had the

588
00:21:07,799 --> 00:21:09,539
ability to update the latest version of

589
00:21:09,539 --> 00:21:11,880
firmware not only that but because we

590
00:21:11,880 --> 00:21:13,559
had a separate Standalone server for

591
00:21:13,559 --> 00:21:15,660
onguard we had a copy of the firmware on

592
00:21:15,660 --> 00:21:17,220
the local file system the legitimate

593
00:21:17,220 --> 00:21:20,400
firmware that we could use to play with

594
00:21:20,400 --> 00:21:22,320
all right so this brought to a success

595
00:21:22,320 --> 00:21:25,200
and failure Road here on the one hand we

596
00:21:25,200 --> 00:21:26,160
had you know we'll start with our

597
00:21:26,160 --> 00:21:27,660
failure we had our seg fault handling

598
00:21:27,660 --> 00:21:29,340
that rebooted on any system binary

599
00:21:29,340 --> 00:21:32,159
before that gave us our stir copy forced

600
00:21:32,159 --> 00:21:34,559
reboot well afterward after this update

601
00:21:34,559 --> 00:21:37,559
Sig fault was only Sig field only caused

602
00:21:37,559 --> 00:21:39,600
a reboot of the device with the two main

603
00:21:39,600 --> 00:21:41,400
system binaries and so we lost that

604
00:21:41,400 --> 00:21:43,620
unauthenticated dos on the latest

605
00:21:43,620 --> 00:21:45,840
version of firmware at the time and

606
00:21:45,840 --> 00:21:47,280
these are the two system binaries that

607
00:21:47,280 --> 00:21:49,380
actually do still reboot however the

608
00:21:49,380 --> 00:21:50,940
more important thing is that our Command

609
00:21:50,940 --> 00:21:52,500
injection vulnerabilities survived this

610
00:21:52,500 --> 00:21:54,120
update it was not patched out or

611
00:21:54,120 --> 00:21:56,159
discovered and we knew that we for sure

612
00:21:56,159 --> 00:21:58,020
could find a way to cause this device to

613
00:21:58,020 --> 00:21:59,340
to reboot

614
00:21:59,340 --> 00:22:00,840
that brought us to choose opponent

615
00:22:00,840 --> 00:22:02,820
Venture number three where now that our

616
00:22:02,820 --> 00:22:05,340
dos was dead we had to either we had to

617
00:22:05,340 --> 00:22:06,659
find a new method of achieving that

618
00:22:06,659 --> 00:22:08,640
unauthenticated rce there's a few

619
00:22:08,640 --> 00:22:10,559
different options here one would be to

620
00:22:10,559 --> 00:22:12,360
find a new Standalone vulnerability kind

621
00:22:12,360 --> 00:22:15,299
of a a zero or one click uh you know to

622
00:22:15,299 --> 00:22:17,400
rule them all we could find a reboot

623
00:22:17,400 --> 00:22:19,260
primitive or a new reboot primitive or

624
00:22:19,260 --> 00:22:22,260
or crash that we could actually chain to

625
00:22:22,260 --> 00:22:24,659
replace our our broken chain here or we

626
00:22:24,659 --> 00:22:25,980
could have moved forward and prepared

627
00:22:25,980 --> 00:22:27,600
our quote-unquote malware or door

628
00:22:27,600 --> 00:22:29,400
exploit because we know at some point

629
00:22:29,400 --> 00:22:30,840
the door is going to go down or be

630
00:22:30,840 --> 00:22:32,640
rebooted and our Command injection will

631
00:22:32,640 --> 00:22:35,460
get triggered obviously we're we're uh

632
00:22:35,460 --> 00:22:36,900
we're way too lazy for that we're not

633
00:22:36,900 --> 00:22:38,340
not going to wait for it to reboot by

634
00:22:38,340 --> 00:22:40,679
itself we had some new toys to play with

635
00:22:40,679 --> 00:22:42,840
with this firmware update and one of the

636
00:22:42,840 --> 00:22:44,640
things that was added in the update was

637
00:22:44,640 --> 00:22:46,620
this Diagnostics menu in the web server

638
00:22:46,620 --> 00:22:49,559
which had a firmware upload option that

639
00:22:49,559 --> 00:22:51,179
firmware upload option clearly states

640
00:22:51,179 --> 00:22:52,620
that it'll reboot the board if you

641
00:22:52,620 --> 00:22:54,659
upload the firmware so now we at least

642
00:22:54,659 --> 00:22:56,700
have an authenticated way to reboot the

643
00:22:56,700 --> 00:22:59,100
device but that's not good enough

644
00:22:59,100 --> 00:23:00,360
all right so I'm going to give another

645
00:23:00,360 --> 00:23:02,520
little live demo here and we're going to

646
00:23:02,520 --> 00:23:03,960
show you guys

647
00:23:03,960 --> 00:23:07,580
um how we actually get around this

648
00:23:07,980 --> 00:23:10,740
it's already up down there okay

649
00:23:10,740 --> 00:23:12,299
all right

650
00:23:12,299 --> 00:23:14,640
so we're back to the uh the panel here

651
00:23:14,640 --> 00:23:16,799
and what I'm going to do is you can see

652
00:23:16,799 --> 00:23:18,900
the developer settings on the right side

653
00:23:18,900 --> 00:23:21,299
and I'm going to actually log out real

654
00:23:21,299 --> 00:23:23,539
quickly

655
00:23:26,340 --> 00:23:28,200
I'm going to log back in to show you how

656
00:23:28,200 --> 00:23:31,640
the session cookies are handled here

657
00:23:36,000 --> 00:23:37,320
all right so if you look on the right

658
00:23:37,320 --> 00:23:39,000
you'll see the network requests going

659
00:23:39,000 --> 00:23:41,400
through and we'll see the session ID is

660
00:23:41,400 --> 00:23:43,140
appended on to the end of the banner and

661
00:23:43,140 --> 00:23:45,840
menu and welcome page the new page that

662
00:23:45,840 --> 00:23:48,360
was added was this Diagnostics menu and

663
00:23:48,360 --> 00:23:50,159
when I clicked on that what you'll see

664
00:23:50,159 --> 00:23:52,200
is the diagnostic CGI with the session

665
00:23:52,200 --> 00:23:54,720
ID is added to it and that is done

666
00:23:54,720 --> 00:23:56,159
appropriately and we're going to talk

667
00:23:56,159 --> 00:23:57,120
we're going to we're going to right

668
00:23:57,120 --> 00:23:59,520
click on this and we're going to copy it

669
00:23:59,520 --> 00:24:01,200
and just make sure that that is working

670
00:24:01,200 --> 00:24:03,960
as intended from logged out but before

671
00:24:03,960 --> 00:24:05,520
we do that I want to just show one thing

672
00:24:05,520 --> 00:24:07,740
as I clicked on that Diagnostics menu

673
00:24:07,740 --> 00:24:10,760
there was another CGI file loaded view

674
00:24:10,760 --> 00:24:12,780
firmwareupdate.cgi and if you have sharp

675
00:24:12,780 --> 00:24:14,100
eyes you probably realize that there's

676
00:24:14,100 --> 00:24:16,500
no session ID on that okay so let's go

677
00:24:16,500 --> 00:24:18,900
ahead and log out

678
00:24:18,900 --> 00:24:21,559
and we'll go ahead and paste into here

679
00:24:21,559 --> 00:24:24,720
the full request that we had for the

680
00:24:24,720 --> 00:24:26,700
Diagnostics menu and obviously the

681
00:24:26,700 --> 00:24:28,799
session cookie is invalid so it gives us

682
00:24:28,799 --> 00:24:30,780
this timeout and it no longer works

683
00:24:30,780 --> 00:24:33,179
however if we remember that CGI page

684
00:24:33,179 --> 00:24:34,860
that we had just gone to

685
00:24:34,860 --> 00:24:36,900
and we go to it directly from a logged

686
00:24:36,900 --> 00:24:38,640
out session because there's no session

687
00:24:38,640 --> 00:24:40,860
ID checking whatsoever we can go to this

688
00:24:40,860 --> 00:24:42,299
page completely unauthenticated

689
00:24:42,299 --> 00:24:44,820
bypassing all logins no session cookie

690
00:24:44,820 --> 00:24:46,679
whatsoever and now we can upload files

691
00:24:46,679 --> 00:24:48,840
directly so this is obviously a major

692
00:24:48,840 --> 00:24:51,299
flaw and it is part of the vulnerability

693
00:24:51,299 --> 00:24:53,159
reported here what I'm going to do is

694
00:24:53,159 --> 00:24:56,640
I'm going to actually choose a file here

695
00:24:56,640 --> 00:24:58,799
and I'm going to start it up uploading

696
00:24:58,799 --> 00:25:00,120
and what you're going to hear is this is

697
00:25:00,120 --> 00:25:01,559
going to cause a crash I'm going to

698
00:25:01,559 --> 00:25:03,179
explain to you as it loads here what's

699
00:25:03,179 --> 00:25:05,039
happening if you have sharp ears you

700
00:25:05,039 --> 00:25:06,720
probably hear the device the door beep

701
00:25:06,720 --> 00:25:08,220
and reboot because that's what we're

702
00:25:08,220 --> 00:25:09,360
trying to get it to do so I'll go ahead

703
00:25:09,360 --> 00:25:10,500
and load the file and then we'll go back

704
00:25:10,500 --> 00:25:12,539
to slides and uh and resume talking

705
00:25:12,539 --> 00:25:15,379
about what we just did

706
00:25:19,440 --> 00:25:20,460
okay

707
00:25:20,460 --> 00:25:23,400
all right so we now have the ability to

708
00:25:23,400 --> 00:25:25,500
control file on input unauthenticated

709
00:25:25,500 --> 00:25:27,779
and some of the areas that we might be

710
00:25:27,779 --> 00:25:29,400
interested in looking at there the door

711
00:25:29,400 --> 00:25:31,220
just rebooted probably heard it up front

712
00:25:31,220 --> 00:25:33,240
some of the areas that we're looking at

713
00:25:33,240 --> 00:25:35,220
are our user controlled input here we

714
00:25:35,220 --> 00:25:36,900
could look at the file contents itself

715
00:25:36,900 --> 00:25:38,640
we could look at things like the parsing

716
00:25:38,640 --> 00:25:40,500
of the file name or even some of the

717
00:25:40,500 --> 00:25:42,240
sizes these are typical user controlled

718
00:25:42,240 --> 00:25:44,460
input Fields now when we look back at

719
00:25:44,460 --> 00:25:46,740
that Diagnostics or firmware update page

720
00:25:46,740 --> 00:25:48,539
one of the first things that Sam and I

721
00:25:48,539 --> 00:25:50,580
tried was just creating an empty file in

722
00:25:50,580 --> 00:25:52,740
this case we call it fubar.txt it has

723
00:25:52,740 --> 00:25:54,419
nothing in it we go ahead and try to

724
00:25:54,419 --> 00:25:56,159
install it and sure enough it takes it

725
00:25:56,159 --> 00:25:58,020
tries to install it and it ends up

726
00:25:58,020 --> 00:25:59,880
erroring out one of the things that it

727
00:25:59,880 --> 00:26:01,500
says in the error message is this

728
00:26:01,500 --> 00:26:03,960
invalid signature size now that clued us

729
00:26:03,960 --> 00:26:05,340
into that there was probably some

730
00:26:05,340 --> 00:26:07,559
signature being checked for the file and

731
00:26:07,559 --> 00:26:09,000
we decided to look at the legitimate

732
00:26:09,000 --> 00:26:10,860
firmware file to see what was happening

733
00:26:10,860 --> 00:26:13,500
now it's an encrypted file we pulled it

734
00:26:13,500 --> 00:26:15,600
directly off that on guard server and so

735
00:26:15,600 --> 00:26:16,559
for the most part it's pretty

736
00:26:16,559 --> 00:26:18,600
uninteresting until you get to the last

737
00:26:18,600 --> 00:26:21,419
hex 158 bytes which probably looks

738
00:26:21,419 --> 00:26:23,700
familiar to many of you this is a base64

739
00:26:23,700 --> 00:26:25,799
encoded blob that represents the file

740
00:26:25,799 --> 00:26:28,020
signature but more importantly the last

741
00:26:28,020 --> 00:26:30,240
three bytes are an ASCII representation

742
00:26:30,240 --> 00:26:33,240
of that signature size 158 so we knew

743
00:26:33,240 --> 00:26:35,220
that it was parsing this not dynamically

744
00:26:35,220 --> 00:26:36,960
bite by bite but taking a user

745
00:26:36,960 --> 00:26:39,059
controlled value that's a great place to

746
00:26:39,059 --> 00:26:40,559
look further at the code and see if it's

747
00:26:40,559 --> 00:26:42,480
being handled correctly

748
00:26:42,480 --> 00:26:43,980
first thing I'll draw your attention to

749
00:26:43,980 --> 00:26:46,380
in that firmware size check here is a is

750
00:26:46,380 --> 00:26:48,840
a Malik of a hex 190 byte so a static

751
00:26:48,840 --> 00:26:51,659
sized Malik here and of course then the

752
00:26:51,659 --> 00:26:53,520
file is open for reading the firmware

753
00:26:53,520 --> 00:26:56,460
file so far so good the next thing that

754
00:26:56,460 --> 00:26:58,740
happens is a file seek or an f-seq where

755
00:26:58,740 --> 00:27:00,360
it'll go to the end of the file minus

756
00:27:00,360 --> 00:27:02,520
three bytes and as you imagine it's

757
00:27:02,520 --> 00:27:04,620
taking those three bytes as the ASCII

758
00:27:04,620 --> 00:27:06,960
size value of the signature size and

759
00:27:06,960 --> 00:27:08,580
it'll read those three bytes in using

760
00:27:08,580 --> 00:27:10,500
the F read function

761
00:27:10,500 --> 00:27:12,840
then it does a stir to L or string to

762
00:27:12,840 --> 00:27:15,240
Long conversion to take that 158 or

763
00:27:15,240 --> 00:27:16,860
whatever is specified and convert it to

764
00:27:16,860 --> 00:27:19,260
a long and as you guessed it that's used

765
00:27:19,260 --> 00:27:21,900
as one of the arguments to the F read

766
00:27:21,900 --> 00:27:23,340
function here so this is where the

767
00:27:23,340 --> 00:27:25,440
actual Heap overflow will happen this is

768
00:27:25,440 --> 00:27:27,179
uh this is where we can overflow that

769
00:27:27,179 --> 00:27:30,059
static sized malloc buffer and just a

770
00:27:30,059 --> 00:27:31,799
few instructions later in the file close

771
00:27:31,799 --> 00:27:33,720
function is where we'll actually see the

772
00:27:33,720 --> 00:27:35,700
crash happen

773
00:27:35,700 --> 00:27:38,279
so we spent a lot of time doing like Rob

774
00:27:38,279 --> 00:27:40,679
Gadgets in the emulator we got a full

775
00:27:40,679 --> 00:27:42,960
single wrap Gadget working to be able to

776
00:27:42,960 --> 00:27:44,760
get full code execution in our emulator

777
00:27:44,760 --> 00:27:46,559
but when we transferred it back to

778
00:27:46,559 --> 00:27:48,360
Hardware we just ran out of time to get

779
00:27:48,360 --> 00:27:50,220
it working we had we had process

780
00:27:50,220 --> 00:27:53,039
threading issues we had a heat

781
00:27:53,039 --> 00:27:54,960
manipulation problems so we got this

782
00:27:54,960 --> 00:27:56,700
working in the emulator we never ended

783
00:27:56,700 --> 00:27:57,720
up getting working on the device

784
00:27:57,720 --> 00:28:00,360
Hardware but we're hackers we're lazy we

785
00:28:00,360 --> 00:28:01,919
just used it for the seg fault reboot

786
00:28:01,919 --> 00:28:03,419
and chained it with a command injection

787
00:28:03,419 --> 00:28:04,559
either way

788
00:28:04,559 --> 00:28:06,120
we are going to talk about that wrap

789
00:28:06,120 --> 00:28:07,860
stuff at Defcon if you want to come

790
00:28:07,860 --> 00:28:09,059
that'll be really the only thing that's

791
00:28:09,059 --> 00:28:10,320
different for that talk but we're going

792
00:28:10,320 --> 00:28:11,460
to explore that in the extra five

793
00:28:11,460 --> 00:28:12,720
minutes we have

794
00:28:12,720 --> 00:28:14,520
so to understand this Heap overflow

795
00:28:14,520 --> 00:28:16,020
essentially we've made a fake copy of

796
00:28:16,020 --> 00:28:18,299
the firmware just a random empty file

797
00:28:18,299 --> 00:28:20,100
and we filled it with a unique and

798
00:28:20,100 --> 00:28:21,600
predictable pattern if you think of your

799
00:28:21,600 --> 00:28:23,640
metasploid pattern create or pattern

800
00:28:23,640 --> 00:28:25,320
generate that's what we're doing here to

801
00:28:25,320 --> 00:28:26,940
find the the different offsets that we

802
00:28:26,940 --> 00:28:29,039
can control now this is an encrypted

803
00:28:29,039 --> 00:28:31,320
file so it does require The Salted

804
00:28:31,320 --> 00:28:33,240
underscore underscore encryption header

805
00:28:33,240 --> 00:28:35,400
it does check that and of course we

806
00:28:35,400 --> 00:28:37,740
changed the file signature size from 158

807
00:28:37,740 --> 00:28:40,620
to anything over 190 we chose 999 here

808
00:28:40,620 --> 00:28:43,260
as an arbitrarily large value

809
00:28:43,260 --> 00:28:45,360
then we've set a break point before what

810
00:28:45,360 --> 00:28:46,740
we perceived would be the controlled

811
00:28:46,740 --> 00:28:49,320
execution in that F close function and

812
00:28:49,320 --> 00:28:51,059
what I want to draw your attention to is

813
00:28:51,059 --> 00:28:53,340
this Branch instruction so BLX is an

814
00:28:53,340 --> 00:28:55,260
unconditional branch in arm which will

815
00:28:55,260 --> 00:28:57,299
Branch to the R3 register why is that

816
00:28:57,299 --> 00:28:59,340
important well as you can see from the

817
00:28:59,340 --> 00:29:01,320
registers printed out here we control

818
00:29:01,320 --> 00:29:05,279
with our pattern data registers r0 R1 R3

819
00:29:05,279 --> 00:29:09,960
and R6 and R4 we control the pointer to

820
00:29:09,960 --> 00:29:11,640
our pattern data and that'll be really

821
00:29:11,640 --> 00:29:13,200
important when we talk about Rob later

822
00:29:13,200 --> 00:29:14,760
again we're not going to waste the time

823
00:29:14,760 --> 00:29:16,140
on that right now but just a little bit

824
00:29:16,140 --> 00:29:18,059
of understanding we ended up using this

825
00:29:18,059 --> 00:29:20,220
just for the segmentation fault and the

826
00:29:20,220 --> 00:29:21,840
forced reboot and that's what you heard

827
00:29:21,840 --> 00:29:24,059
when the door rebooted this ultimately

828
00:29:24,059 --> 00:29:26,760
was filed as our highest CVSs score of a

829
00:29:26,760 --> 00:29:29,100
10.0 it is an unauthenticated full

830
00:29:29,100 --> 00:29:32,340
remote code execution on the device

831
00:29:32,340 --> 00:29:34,080
all right so Sam's going to take us home

832
00:29:34,080 --> 00:29:36,120
just by talking about the exploitation

833
00:29:36,120 --> 00:29:37,860
of this device how we turn these three

834
00:29:37,860 --> 00:29:39,779
vulnerabilities into something that

835
00:29:39,779 --> 00:29:41,159
actually impacts the physical hardware

836
00:29:41,159 --> 00:29:44,159
and again air quotes on malware right we

837
00:29:44,159 --> 00:29:45,960
don't write and release malware this is

838
00:29:45,960 --> 00:29:48,120
a proof of concept malware's a kind of

839
00:29:48,120 --> 00:29:50,039
an aggressive term there but this is

840
00:29:50,039 --> 00:29:51,360
just to demonstrate that we can actually

841
00:29:51,360 --> 00:29:53,279
control the doors functions and yeah and

842
00:29:53,279 --> 00:29:54,840
this was our last you know choose your

843
00:29:54,840 --> 00:29:56,340
opponent Venture where we could have

844
00:29:56,340 --> 00:29:58,980
gone around about this malware in two

845
00:29:58,980 --> 00:30:02,399
different ways probably most people that

846
00:30:02,399 --> 00:30:03,779
were actually trying to extract money

847
00:30:03,779 --> 00:30:06,960
would go the ransomware way you know

848
00:30:06,960 --> 00:30:09,480
demand money or Bitcoin to have access

849
00:30:09,480 --> 00:30:11,340
to your doors again that's pretty lame

850
00:30:11,340 --> 00:30:13,320
we ended up going with the Ghost in the

851
00:30:13,320 --> 00:30:15,539
Shell James Bond approach to gain you

852
00:30:15,539 --> 00:30:17,340
know secret hidden access to a facility

853
00:30:17,340 --> 00:30:20,220
and that's ended up what we and we did

854
00:30:20,220 --> 00:30:22,799
on this device but to do that we still

855
00:30:22,799 --> 00:30:24,539
had to actually control the physical

856
00:30:24,539 --> 00:30:26,820
locks and we'll have to dive into how

857
00:30:26,820 --> 00:30:29,279
the locks on these doors are actually

858
00:30:29,279 --> 00:30:30,659
handled and they're through the use of

859
00:30:30,659 --> 00:30:33,480
relays as you see here highlighted in

860
00:30:33,480 --> 00:30:35,640
red these are actually the relays which

861
00:30:35,640 --> 00:30:37,140
are just electrical switches when

862
00:30:37,140 --> 00:30:39,659
voltage is applied it either unlocks the

863
00:30:39,659 --> 00:30:41,460
switch or locks it and those are

864
00:30:41,460 --> 00:30:42,960
directly connected to the locks

865
00:30:42,960 --> 00:30:45,059
themselves through these output pins

866
00:30:45,059 --> 00:30:47,159
to actually find how the software

867
00:30:47,159 --> 00:30:49,140
controls these relays it was as simple

868
00:30:49,140 --> 00:30:51,120
as actually searching through the main

869
00:30:51,120 --> 00:30:52,980
system binary for relay

870
00:30:52,980 --> 00:30:54,419
and you can see that there is a

871
00:30:54,419 --> 00:30:57,059
individual function for on and off for

872
00:30:57,059 --> 00:30:59,700
each of these relays so to look at how

873
00:30:59,700 --> 00:31:02,580
they actually handle the unlocking of

874
00:31:02,580 --> 00:31:04,620
those relays you can look into them and

875
00:31:04,620 --> 00:31:06,240
it's even more simple where it's

876
00:31:06,240 --> 00:31:08,640
actually just an eye optical call with a

877
00:31:08,640 --> 00:31:11,159
file descriptor to the gpio pins that

878
00:31:11,159 --> 00:31:12,740
handle these relays

879
00:31:12,740 --> 00:31:15,120
parameter to either unlock or close and

880
00:31:15,120 --> 00:31:18,480
a zero indexed rate of which which relay

881
00:31:18,480 --> 00:31:21,240
to actually control so to create our

882
00:31:21,240 --> 00:31:24,059
malware we just took that exact code

883
00:31:24,059 --> 00:31:27,120
that pseudocode added it to a C file and

884
00:31:27,120 --> 00:31:29,940
then cross-compiled it for arm and we

885
00:31:29,940 --> 00:31:32,520
ran it on the device however you can see

886
00:31:32,520 --> 00:31:34,380
that there's a while loop here this is

887
00:31:34,380 --> 00:31:36,299
our brute force hackie method to

888
00:31:36,299 --> 00:31:38,940
actually keep the door unlocked when we

889
00:31:38,940 --> 00:31:41,279
first tried this ioctal call it would

890
00:31:41,279 --> 00:31:44,460
just instantly instantly re-lock and

891
00:31:44,460 --> 00:31:45,480
that was probably because there's some

892
00:31:45,480 --> 00:31:47,520
monitoring going on on the system where

893
00:31:47,520 --> 00:31:49,500
uh you know it wants to keep the door

894
00:31:49,500 --> 00:31:51,179
locked and we want to keep it open so

895
00:31:51,179 --> 00:31:52,919
calling it every millisecond actually

896
00:31:52,919 --> 00:31:55,320
seem to work pretty good to take

897
00:31:55,320 --> 00:31:57,000
precedence over any other monitoring

898
00:31:57,000 --> 00:31:58,320
processes

899
00:31:58,320 --> 00:32:00,059
so to kind of summarize what we've been

900
00:32:00,059 --> 00:32:02,940
doing up here on stage live hacking this

901
00:32:02,940 --> 00:32:05,100
device and then kind of show you a sneak

902
00:32:05,100 --> 00:32:07,080
preview of what we're going to do we

903
00:32:07,080 --> 00:32:09,419
first started off by having that command

904
00:32:09,419 --> 00:32:11,880
ejection in the host name however if you

905
00:32:11,880 --> 00:32:14,159
remember it only Triggers on reboot so

906
00:32:14,159 --> 00:32:17,640
we had to upload that fake firmware

907
00:32:17,640 --> 00:32:19,500
update file to cause a segmentation

908
00:32:19,500 --> 00:32:21,899
fault and cause a reboot

909
00:32:21,899 --> 00:32:25,140
then the command injection does indeed

910
00:32:25,140 --> 00:32:27,899
run on Startup and will connect to our

911
00:32:27,899 --> 00:32:29,940
C2 server which is our laptop for this

912
00:32:29,940 --> 00:32:31,620
case it could have been any machine and

913
00:32:31,620 --> 00:32:34,140
download more scripts that we'll use for

914
00:32:34,140 --> 00:32:35,820
further exploitation

915
00:32:35,820 --> 00:32:39,059
then it does indeed open a listener on

916
00:32:39,059 --> 00:32:41,340
the device which now will connect to to

917
00:32:41,340 --> 00:32:43,620
the reverse shell and then of course

918
00:32:43,620 --> 00:32:47,820
open the entire the door and uh

919
00:32:47,820 --> 00:32:49,500
this is what we hope to look like after

920
00:32:49,500 --> 00:32:51,299
you know before you do it real quick

921
00:32:51,299 --> 00:32:53,460
before you do it yeah so before we

922
00:32:53,460 --> 00:32:56,460
attempt to demo Gods with our final demo

923
00:32:56,460 --> 00:32:58,559
um we are going to put up a QR code at

924
00:32:58,559 --> 00:33:00,840
the end here for Q a we have a quick

925
00:33:00,840 --> 00:33:02,159
filming we have to do afterwards so if

926
00:33:02,159 --> 00:33:03,299
you have questions we won't be doing

927
00:33:03,299 --> 00:33:04,919
them live but you can come find us after

928
00:33:04,919 --> 00:33:07,320
or you can scan the QR code here if you

929
00:33:07,320 --> 00:33:09,179
want to ask any questions directly go

930
00:33:09,179 --> 00:33:10,500
ahead and take your chance now to do

931
00:33:10,500 --> 00:33:12,179
that while you're doing that I want to

932
00:33:12,179 --> 00:33:13,919
give a quick thanks before we show our

933
00:33:13,919 --> 00:33:16,260
final demo here to carrier to John and

934
00:33:16,260 --> 00:33:19,019
Josh Cario did an awesome job uh

935
00:33:19,019 --> 00:33:21,059
facilitating the disclosure with us to

936
00:33:21,059 --> 00:33:22,679
Mercury and making sure that these are

937
00:33:22,679 --> 00:33:24,299
all patched timely so thank you guys

938
00:33:24,299 --> 00:33:26,159
really appreciate the the hard work

939
00:33:26,159 --> 00:33:28,620
there and the vendor responsibility all

940
00:33:28,620 --> 00:33:30,299
right so let's go ahead and see if we

941
00:33:30,299 --> 00:33:32,220
can epically fail on stage Sam all right

942
00:33:32,220 --> 00:33:33,720
okay

943
00:33:33,720 --> 00:33:35,640
QR code's gone

944
00:33:35,640 --> 00:33:38,940
um here we go so we'll first of all go

945
00:33:38,940 --> 00:33:40,919
ahead and connect to that reverse shell

946
00:33:40,919 --> 00:33:43,260
on the device we're using socat here

947
00:33:43,260 --> 00:33:44,700
because it's a little nicer than netcat

948
00:33:44,700 --> 00:33:47,039
and as you can see we do actually now

949
00:33:47,039 --> 00:33:52,700
have a root shell and if I type

950
00:33:53,460 --> 00:33:56,700
who am I you can see we do have a root

951
00:33:56,700 --> 00:33:58,740
access to the device and obviously Steve

952
00:33:58,740 --> 00:34:01,860
can't get in so we'll run our super

953
00:34:01,860 --> 00:34:03,919
Elite Open Door hack

954
00:34:03,919 --> 00:34:06,419
and as you can hear the relay is

955
00:34:06,419 --> 00:34:08,879
triggered and we can now successfully

956
00:34:08,879 --> 00:34:09,980
walk through the door

957
00:34:09,980 --> 00:34:17,960
[Applause]

958
00:34:17,960 --> 00:34:20,820
like I said 40 minutes to watch Us open

959
00:34:20,820 --> 00:34:22,560
a door so yeah thank you everyone for

960
00:34:22,560 --> 00:34:24,418
coming uh please connect with us on

961
00:34:24,418 --> 00:34:26,520
social media LinkedIn Twitter afterwards

962
00:34:26,520 --> 00:34:28,139
if you have questions stick around we'll

963
00:34:28,139 --> 00:34:30,179
be around out in the hallway because

964
00:34:30,179 --> 00:34:31,859
there's another session coming up and

965
00:34:31,859 --> 00:34:33,119
thank you everyone so much for your time

966
00:34:33,119 --> 00:34:34,199
thank you

967
00:34:34,199 --> 00:34:35,940
[Applause]

968
00:34:35,940 --> 00:34:37,379
[Music]

969
00:34:37,379 --> 00:34:40,379
foreign

970
00:34:42,889 --> 00:34:45,999
[Music]

