1
00:00:01,700 --> 00:00:04,810
[Music]

2
00:00:07,580 --> 00:00:10,559
hello everyone and welcome to my talk do

3
00:00:10,559 --> 00:00:13,080
not trust the ASA Trojans

4
00:00:13,080 --> 00:00:15,480
now you might immediately be asking what

5
00:00:15,480 --> 00:00:18,720
is an ASA and these are ASA these are

6
00:00:18,720 --> 00:00:21,600
Cisco adaptive security appliances at

7
00:00:21,600 --> 00:00:23,460
the top there you see the original ASA

8
00:00:23,460 --> 00:00:26,340
released some 15 years ago that was

9
00:00:26,340 --> 00:00:27,900
followed by the release of the asax

10
00:00:27,900 --> 00:00:30,539
which was followed more recently by the

11
00:00:30,539 --> 00:00:34,739
release of the asax Firepower services

12
00:00:34,739 --> 00:00:36,899
now the ASA comes in a few other form

13
00:00:36,899 --> 00:00:39,000
factors as well including a virtual

14
00:00:39,000 --> 00:00:42,059
Appliance known as asav

15
00:00:42,059 --> 00:00:44,520
and all of these are sort of Asa as well

16
00:00:44,520 --> 00:00:46,620
despite their names because they can run

17
00:00:46,620 --> 00:00:49,140
the operating system known as ASA

18
00:00:49,140 --> 00:00:51,899
software that is of course the same

19
00:00:51,899 --> 00:00:54,000
operating system used by the previously

20
00:00:54,000 --> 00:00:56,640
mentioned Asa

21
00:00:56,640 --> 00:00:58,440
now an ASA typically sits at the edge of

22
00:00:58,440 --> 00:01:00,059
your corporate Network where it can be a

23
00:01:00,059 --> 00:01:04,619
firewall a VPN an IPS and or a router

24
00:01:04,619 --> 00:01:06,659
possibly all wrapped into one

25
00:01:06,659 --> 00:01:09,240
now the esa is a critical asset because

26
00:01:09,240 --> 00:01:11,100
it acts as the Gateway between the

27
00:01:11,100 --> 00:01:12,960
internet and your corporate Network and

28
00:01:12,960 --> 00:01:14,880
it also implements a variety of access

29
00:01:14,880 --> 00:01:18,299
controls and protections

30
00:01:18,299 --> 00:01:20,880
this talk is called do not trust the ASA

31
00:01:20,880 --> 00:01:22,560
because we're going to use a variety of

32
00:01:22,560 --> 00:01:24,600
features and vulnerabilities affecting

33
00:01:24,600 --> 00:01:27,420
the ASA in order to get root shells on

34
00:01:27,420 --> 00:01:29,220
the ASA itself as well as the

35
00:01:29,220 --> 00:01:31,200
administrative systems that connects to

36
00:01:31,200 --> 00:01:33,060
it

37
00:01:33,060 --> 00:01:34,200
now

38
00:01:34,200 --> 00:01:36,600
all the esa models we discussed earlier

39
00:01:36,600 --> 00:01:39,659
can be managed by by this thick client

40
00:01:39,659 --> 00:01:41,340
known as adaptive security device

41
00:01:41,340 --> 00:01:45,180
manager or asdm ASTM is installed on an

42
00:01:45,180 --> 00:01:47,040
administrator's Windows system so that

43
00:01:47,040 --> 00:01:48,780
they can remotely connect to their ASA

44
00:01:48,780 --> 00:01:50,460
or ASAS

45
00:01:50,460 --> 00:01:52,500
and perform administrative tasks like

46
00:01:52,500 --> 00:01:55,439
updating firewall rules adding VPN users

47
00:01:55,439 --> 00:01:57,600
or simply monitoring the router's

48
00:01:57,600 --> 00:01:59,880
behavior

49
00:01:59,880 --> 00:02:02,700
for about the next 20 slides or so it's

50
00:02:02,700 --> 00:02:04,619
important to understand how the asdm

51
00:02:04,619 --> 00:02:07,079
client and the ASA communicate

52
00:02:07,079 --> 00:02:09,119
one of the first things that happens is

53
00:02:09,119 --> 00:02:11,700
that the asdm client makes an HTTP

54
00:02:11,700 --> 00:02:16,200
request for a pdm.sgz file this file is

55
00:02:16,200 --> 00:02:19,140
hosted on The Cisco asa's web server and

56
00:02:19,140 --> 00:02:22,739
the pdm.asg sgz is downloaded by the

57
00:02:22,739 --> 00:02:25,680
client and then unpacked the sgz format

58
00:02:25,680 --> 00:02:29,700
is a non-standard one but regardless the

59
00:02:29,700 --> 00:02:31,620
client finds inside is a whole bunch of

60
00:02:31,620 --> 00:02:33,239
java classes

61
00:02:33,239 --> 00:02:35,280
the client will load those classes into

62
00:02:35,280 --> 00:02:38,280
memory execute them and that establishes

63
00:02:38,280 --> 00:02:40,620
the full administrative session with the

64
00:02:40,620 --> 00:02:43,260
ASA now the fact that the sgz file

65
00:02:43,260 --> 00:02:44,640
contains much of the client's

66
00:02:44,640 --> 00:02:46,980
functionality will be important uh in a

67
00:02:46,980 --> 00:02:48,840
bit

68
00:02:48,840 --> 00:02:51,480
now what's interesting about this is

69
00:02:51,480 --> 00:02:54,060
while that communication occurs over SSL

70
00:02:54,060 --> 00:02:57,120
the ASM client never verifies the asa's

71
00:02:57,120 --> 00:02:58,920
server certificate

72
00:02:58,920 --> 00:03:00,959
which means that a man in the middle

73
00:03:00,959 --> 00:03:04,019
like hacker cat here can monitor or even

74
00:03:04,019 --> 00:03:05,940
modify the communication between the

75
00:03:05,940 --> 00:03:09,239
asdm client and the ASA itself

76
00:03:09,239 --> 00:03:11,400
essentially this should allow hackercat

77
00:03:11,400 --> 00:03:13,680
to take full control over the ASA as

78
00:03:13,680 --> 00:03:15,360
long as they're able to establish this

79
00:03:15,360 --> 00:03:17,760
man in the middle position

80
00:03:17,760 --> 00:03:19,920
now that's not theoretical in nature

81
00:03:19,920 --> 00:03:22,200
pictured here is a screenshot of me

82
00:03:22,200 --> 00:03:24,060
using the popular Tool Man in the middle

83
00:03:24,060 --> 00:03:27,360
proxy on the asdm client I use the

84
00:03:27,360 --> 00:03:28,739
default man in the middle proxy

85
00:03:28,739 --> 00:03:31,080
certificate and the asdm client gave no

86
00:03:31,080 --> 00:03:33,599
indication that it was under attack now

87
00:03:33,599 --> 00:03:35,819
like I said this should give me the

88
00:03:35,819 --> 00:03:38,580
attacker full control over the Asa

89
00:03:38,580 --> 00:03:40,500
but I might be able to gain control over

90
00:03:40,500 --> 00:03:43,140
the administrator system as well recall

91
00:03:43,140 --> 00:03:46,620
that this pdm.sgz file is full of java

92
00:03:46,620 --> 00:03:47,879
classes

93
00:03:47,879 --> 00:03:49,860
if the man in the middle can introduce

94
00:03:49,860 --> 00:03:53,220
malicious Java classes to the sgz maybe

95
00:03:53,220 --> 00:03:55,260
the asdm client will execute that

96
00:03:55,260 --> 00:03:57,980
malicious code

97
00:03:58,920 --> 00:04:01,379
to explore that I wrote this tool called

98
00:04:01,379 --> 00:04:04,440
get you it's an sgz file parser

99
00:04:04,440 --> 00:04:07,019
it tracks all the files from an sgz file

100
00:04:07,019 --> 00:04:09,480
and drops them to disk on the right here

101
00:04:09,480 --> 00:04:11,519
you can see a recent release of of an

102
00:04:11,519 --> 00:04:14,760
sgz file contained more than 13 000 Java

103
00:04:14,760 --> 00:04:17,639
class files among some other files most

104
00:04:17,639 --> 00:04:20,579
importantly it contains a signature file

105
00:04:20,579 --> 00:04:23,460
this file contains valid cryptographic

106
00:04:23,460 --> 00:04:26,639
signatures for all of the files in the

107
00:04:26,639 --> 00:04:30,120
sgz and if the asdm client verifies the

108
00:04:30,120 --> 00:04:32,340
files it downloads against this

109
00:04:32,340 --> 00:04:34,440
signature file and the attacker

110
00:04:34,440 --> 00:04:36,720
shouldn't be able to introduce malicious

111
00:04:36,720 --> 00:04:38,780
code

112
00:04:38,780 --> 00:04:41,220
unfortunately the client doesn't do that

113
00:04:41,220 --> 00:04:44,280
last summer Cisco issued this advisory

114
00:04:44,280 --> 00:04:47,880
and assigned cve 2021-1585

115
00:04:47,880 --> 00:04:50,280
essentially this advisory says a man in

116
00:04:50,280 --> 00:04:52,139
the middle can inject arbitrary Java

117
00:04:52,139 --> 00:04:54,660
classes into an sgz file and gain

118
00:04:54,660 --> 00:04:56,699
execution on an administrative system

119
00:04:56,699 --> 00:04:58,740
via SDM

120
00:04:58,740 --> 00:05:01,259
now Cisco didn't release a patch for

121
00:05:01,259 --> 00:05:03,840
with this advisory in fact they didn't

122
00:05:03,840 --> 00:05:06,960
try to patch it until June 2022 and

123
00:05:06,960 --> 00:05:08,340
unfortunately that patch wasn't

124
00:05:08,340 --> 00:05:09,419
effective

125
00:05:09,419 --> 00:05:11,940
and I'm told Cisco released a new patch

126
00:05:11,940 --> 00:05:13,560
business vulnerability uh this very

127
00:05:13,560 --> 00:05:15,540
morning so this issue might be cleaned

128
00:05:15,540 --> 00:05:18,000
up as of right now but that took more of

129
00:05:18,000 --> 00:05:19,620
a year more than a year after the

130
00:05:19,620 --> 00:05:22,940
initial public disclosure

131
00:05:24,000 --> 00:05:25,979
the man in the middle is a difficult

132
00:05:25,979 --> 00:05:28,080
position to achieve for most attackers

133
00:05:28,080 --> 00:05:31,740
so it's also useful to note that 1585 is

134
00:05:31,740 --> 00:05:34,560
actually uh is actually exploitable via

135
00:05:34,560 --> 00:05:35,940
evil endpoint

136
00:05:35,940 --> 00:05:38,639
what I mean by evil endpoint is that if

137
00:05:38,639 --> 00:05:41,340
hacker cat can trick an administrator to

138
00:05:41,340 --> 00:05:43,560
connect their asdm client to an endpoint

139
00:05:43,560 --> 00:05:46,259
in hacker hackercast control

140
00:05:46,259 --> 00:05:48,060
then hacker cat can provide the client

141
00:05:48,060 --> 00:05:51,120
with a malicious sgz file resulting in

142
00:05:51,120 --> 00:05:52,979
code execution on the administrator

143
00:05:52,979 --> 00:05:56,400
system as pictured here

144
00:05:56,400 --> 00:05:58,440
again that's not theoretical either I've

145
00:05:58,440 --> 00:06:00,000
actually written a couple of exploits

146
00:06:00,000 --> 00:06:02,340
for this one of which is a Metasploit

147
00:06:02,340 --> 00:06:05,340
module and this talk really emphasizes

148
00:06:05,340 --> 00:06:08,039
the use of real exploits particularly

149
00:06:08,039 --> 00:06:09,720
Metasploit modules

150
00:06:09,720 --> 00:06:12,539
to really Hammer home that these are

151
00:06:12,539 --> 00:06:14,639
viable attacks that could be pulled off

152
00:06:14,639 --> 00:06:17,100
by low-skilled attackers and therefore

153
00:06:17,100 --> 00:06:20,780
should be taken quite seriously

154
00:06:20,880 --> 00:06:22,620
now obviously the man in the middle

155
00:06:22,620 --> 00:06:24,539
aspect of this attack is much more

156
00:06:24,539 --> 00:06:26,400
difficult when the administrator doesn't

157
00:06:26,400 --> 00:06:28,280
connect to the ASA over the Internet

158
00:06:28,280 --> 00:06:30,419
hacker cat's going to have a hard time

159
00:06:30,419 --> 00:06:32,479
establishing any type of access

160
00:06:32,479 --> 00:06:35,220
incorpnet so the administrator is

161
00:06:35,220 --> 00:06:38,400
probably safe in this configuration

162
00:06:38,400 --> 00:06:40,560
but as a researcher I wanted to find a

163
00:06:40,560 --> 00:06:42,120
way to attack the administrator on

164
00:06:42,120 --> 00:06:44,880
corpnet as well and I figured I'd try to

165
00:06:44,880 --> 00:06:47,819
modify the sgz file on the ASA itself

166
00:06:47,819 --> 00:06:50,819
remember the sgz is hosted on the

167
00:06:50,819 --> 00:06:53,639
router's web server so I figured I might

168
00:06:53,639 --> 00:06:55,620
have some type of right access there to

169
00:06:55,620 --> 00:06:58,220
modify it

170
00:06:58,380 --> 00:07:01,440
but I first needed to find how the sgz

171
00:07:01,440 --> 00:07:03,300
file got on the ASA in the first place

172
00:07:03,300 --> 00:07:05,520
and the answer is that it gets added to

173
00:07:05,520 --> 00:07:08,460
the ASA when the asdm binary package is

174
00:07:08,460 --> 00:07:11,039
loaded on the system now the package is

175
00:07:11,039 --> 00:07:13,620
available on Cisco's web website as

176
00:07:13,620 --> 00:07:15,900
pictured here but it's also loaded by

177
00:07:15,900 --> 00:07:19,220
default on some ASA for example the asav

178
00:07:19,220 --> 00:07:22,580
and the test ASA that we purchased the

179
00:07:22,580 --> 00:07:26,099
5506x also came with it pre-loaded but

180
00:07:26,099 --> 00:07:29,520
regardless this sgz file is first

181
00:07:29,520 --> 00:07:31,860
introduced the asa's web server when

182
00:07:31,860 --> 00:07:34,560
this asdm binary blob is loaded onto the

183
00:07:34,560 --> 00:07:36,840
Asa

184
00:07:36,840 --> 00:07:39,360
and so I went hunting for the sgz file

185
00:07:39,360 --> 00:07:42,599
in the asdm binary package again this is

186
00:07:42,599 --> 00:07:45,060
a non-standard format so I had to do a

187
00:07:45,060 --> 00:07:46,800
little work but it turned out to be

188
00:07:46,800 --> 00:07:48,060
simple enough

189
00:07:48,060 --> 00:07:49,860
the binary package breaks down into

190
00:07:49,860 --> 00:07:52,620
three major parts a general header a

191
00:07:52,620 --> 00:07:55,199
manifest area and then all the files are

192
00:07:55,199 --> 00:07:57,840
catted together at the end

193
00:07:57,840 --> 00:07:59,639
and I was also looking for security

194
00:07:59,639 --> 00:08:02,160
features in this binary package

195
00:08:02,160 --> 00:08:04,080
basically evidence that Cisco was

196
00:08:04,080 --> 00:08:06,539
signing the package I did find this hash

197
00:08:06,539 --> 00:08:08,699
field in the header so my question was

198
00:08:08,699 --> 00:08:11,819
is this Hash a security feature or is it

199
00:08:11,819 --> 00:08:13,560
just a checksum that ensures the

200
00:08:13,560 --> 00:08:16,080
Integrity of the file

201
00:08:16,080 --> 00:08:18,240
uh and it turned out it's just to check

202
00:08:18,240 --> 00:08:19,080
some

203
00:08:19,080 --> 00:08:21,120
which might not sound like a big deal to

204
00:08:21,120 --> 00:08:23,280
a lay person but it really is because

205
00:08:23,280 --> 00:08:25,740
there is no Cisco signature on the

206
00:08:25,740 --> 00:08:28,379
binary package anyone is able to craft

207
00:08:28,379 --> 00:08:31,740
their own arbitrary asdm package which

208
00:08:31,740 --> 00:08:33,899
is a big deal because it means we as

209
00:08:33,899 --> 00:08:36,958
attackers can upload arbitrary sgz files

210
00:08:36,958 --> 00:08:38,458
to the Asa

211
00:08:38,458 --> 00:08:40,679
among other things which in theory

212
00:08:40,679 --> 00:08:42,659
should allow us to attack that

213
00:08:42,659 --> 00:08:46,380
administrator deep down in corpnet

214
00:08:46,380 --> 00:08:48,959
now we did report at this issue to Cisco

215
00:08:48,959 --> 00:08:51,300
back in February of this year and Cisco

216
00:08:51,300 --> 00:08:54,660
released this advisory in June again

217
00:08:54,660 --> 00:08:58,019
without a patch uh I believe a patch for

218
00:08:58,019 --> 00:09:00,540
this was also released today but I

219
00:09:00,540 --> 00:09:02,100
haven't had a chance to look at it or

220
00:09:02,100 --> 00:09:04,980
verify it in any way so I don't have too

221
00:09:04,980 --> 00:09:07,380
much to say about that but this advisory

222
00:09:07,380 --> 00:09:09,060
is exactly what we just discussed

223
00:09:09,060 --> 00:09:11,640
attackers can upload malicious asdm

224
00:09:11,640 --> 00:09:14,640
packages to the ASA which can result in

225
00:09:14,640 --> 00:09:16,800
code execution on hosts connecting to

226
00:09:16,800 --> 00:09:19,080
the router

227
00:09:19,080 --> 00:09:20,880
so we're able to achieve what we set out

228
00:09:20,880 --> 00:09:23,459
to do hackercat has a malicious asdm

229
00:09:23,459 --> 00:09:25,620
package hosted on the esa the only

230
00:09:25,620 --> 00:09:27,660
question that remains is how exactly

231
00:09:27,660 --> 00:09:30,120
does hacker cat craft this malicious

232
00:09:30,120 --> 00:09:32,580
package

233
00:09:32,580 --> 00:09:34,320
now there are actually a bunch of files

234
00:09:34,320 --> 00:09:36,060
in this binary package and there are a

235
00:09:36,060 --> 00:09:38,220
variety of attack vectors hacker cat can

236
00:09:38,220 --> 00:09:40,800
pursue with these files that will result

237
00:09:40,800 --> 00:09:42,600
in code execution

238
00:09:42,600 --> 00:09:44,820
but as we've already talked about the

239
00:09:44,820 --> 00:09:46,440
SGC file and we know what the good

240
00:09:46,440 --> 00:09:47,779
attack vector

241
00:09:47,779 --> 00:09:50,519
and we know that it's contained in this

242
00:09:50,519 --> 00:09:53,580
SGC file we'll just focus on that so

243
00:09:53,580 --> 00:09:55,560
let's discuss a tool that will help

244
00:09:55,560 --> 00:09:58,080
hackercad build malicious asdm binary

245
00:09:58,080 --> 00:10:00,560
packages

246
00:10:00,600 --> 00:10:02,880
so this is a tool I wrote called the way

247
00:10:02,880 --> 00:10:06,060
and the way has three major functions it

248
00:10:06,060 --> 00:10:09,420
can extract I can parse and extract asdm

249
00:10:09,420 --> 00:10:12,180
packages to disk which is useful for

250
00:10:12,180 --> 00:10:14,459
examining the contents of the package

251
00:10:14,459 --> 00:10:17,880
and modifying the content of a package

252
00:10:17,880 --> 00:10:21,000
and it can also rebuild extracted asdm

253
00:10:21,000 --> 00:10:23,700
packages so for example in this slide I

254
00:10:23,700 --> 00:10:27,260
modify the asdm's web portals index.html

255
00:10:27,260 --> 00:10:30,779
and I modify it to say hello black hat

256
00:10:30,779 --> 00:10:33,180
then I use the way to rebuild a valid

257
00:10:33,180 --> 00:10:35,760
asdm package when the new package is

258
00:10:35,760 --> 00:10:38,459
loaded onto the ASA and we browse to the

259
00:10:38,459 --> 00:10:41,220
asdm web portal on the router and we'll

260
00:10:41,220 --> 00:10:43,740
see hello black hat now appears on the

261
00:10:43,740 --> 00:10:45,899
landing page

262
00:10:45,899 --> 00:10:48,360
and finally the way can just generate

263
00:10:48,360 --> 00:10:51,300
straight up malicious asdm packages and

264
00:10:51,300 --> 00:10:53,940
now these packages contain an sgz file

265
00:10:53,940 --> 00:10:56,220
that will generate a reverse shell to an

266
00:10:56,220 --> 00:10:58,560
IP and poorer of the attacker's choosing

267
00:10:58,560 --> 00:11:01,140
whenever an asdm client connects to the

268
00:11:01,140 --> 00:11:02,279
Asa

269
00:11:02,279 --> 00:11:04,079
pictured here is a client that connected

270
00:11:04,079 --> 00:11:06,540
to a malicious asdm sending a reverse

271
00:11:06,540 --> 00:11:09,920
shell to my Ubuntu box

272
00:11:10,680 --> 00:11:12,839
so by crafting a malicious ASTM package

273
00:11:12,839 --> 00:11:15,300
we can exploit ASTM clients not only

274
00:11:15,300 --> 00:11:17,519
connecting from the internet but from

275
00:11:17,519 --> 00:11:20,040
corpnet as well

276
00:11:20,040 --> 00:11:22,860
the only challenge is installing our our

277
00:11:22,860 --> 00:11:25,019
malicious asdm package in the first

278
00:11:25,019 --> 00:11:27,180
place it does require elevated

279
00:11:27,180 --> 00:11:29,519
privileges to install packages on the

280
00:11:29,519 --> 00:11:32,100
ASA so that is certainly a limiting

281
00:11:32,100 --> 00:11:33,180
factor

282
00:11:33,180 --> 00:11:35,399
but of course attackers can find ways to

283
00:11:35,399 --> 00:11:37,680
get the required credentials or they can

284
00:11:37,680 --> 00:11:39,720
use an inside attacker or tricking

285
00:11:39,720 --> 00:11:41,040
administrator into installing a

286
00:11:41,040 --> 00:11:43,079
malicious package those are all very

287
00:11:43,079 --> 00:11:45,720
plausible attack vectors

288
00:11:45,720 --> 00:11:47,579
my favorite Vector is a supply chain

289
00:11:47,579 --> 00:11:52,079
attack when I bought our test ASA 5506x

290
00:11:52,079 --> 00:11:54,060
with Firepower services

291
00:11:54,060 --> 00:11:56,279
it arrived with an asdm package already

292
00:11:56,279 --> 00:11:58,680
loaded I had no way of knowing if it was

293
00:11:58,680 --> 00:12:01,079
a valid Cisco ASTM package or not the

294
00:12:01,079 --> 00:12:02,640
reseller could have planted a malicious

295
00:12:02,640 --> 00:12:04,380
package on my device

296
00:12:04,380 --> 00:12:06,180
and they could have had code execution

297
00:12:06,180 --> 00:12:08,100
within my home network when I started

298
00:12:08,100 --> 00:12:12,000
using and researching the ascm interface

299
00:12:12,000 --> 00:12:13,800
now as we've seen this isn't a

300
00:12:13,800 --> 00:12:15,600
theoretical threat it is actually a

301
00:12:15,600 --> 00:12:18,120
viable and demonstratable attack that if

302
00:12:18,120 --> 00:12:20,040
done correctly would leave the victim

303
00:12:20,040 --> 00:12:23,000
none the wiser

304
00:12:23,640 --> 00:12:25,740
so that's all we're going to focus on

305
00:12:25,740 --> 00:12:27,959
for asdm hackery the rest of this talk

306
00:12:27,959 --> 00:12:30,720
will focus on a particular model of Asa

307
00:12:30,720 --> 00:12:32,880
called the asax with Firepower services

308
00:12:32,880 --> 00:12:35,220
and then in this first section we're

309
00:12:35,220 --> 00:12:36,839
going to get a root shell on the system

310
00:12:36,839 --> 00:12:39,959
over http

311
00:12:39,959 --> 00:12:43,019
as a reminder these are the asax and

312
00:12:43,019 --> 00:12:45,120
Firepower Services they're the latest

313
00:12:45,120 --> 00:12:48,120
Hardware model to use the ASA name and

314
00:12:48,120 --> 00:12:50,040
they are admittedly getting a bit long

315
00:12:50,040 --> 00:12:52,440
in the tooth but still in support and

316
00:12:52,440 --> 00:12:55,019
use globally

317
00:12:55,019 --> 00:12:57,240
now the name Firepower Services actually

318
00:12:57,240 --> 00:12:59,160
just describe the special feature of

319
00:12:59,160 --> 00:13:02,040
this ASA in particular it describes this

320
00:13:02,040 --> 00:13:05,120
old uh this oval at the bottom labeled

321
00:13:05,120 --> 00:13:08,279
ASA Firepower module deep packet

322
00:13:08,279 --> 00:13:10,320
inspection

323
00:13:10,320 --> 00:13:12,360
and what that Firepower module actually

324
00:13:12,360 --> 00:13:15,000
is is a virtual machine running snort

325
00:13:15,000 --> 00:13:18,120
essentially Firepower Services is an IPS

326
00:13:18,120 --> 00:13:20,279
that's installed directly on the ASA

327
00:13:20,279 --> 00:13:22,980
itself it's a pretty nifty feature and

328
00:13:22,980 --> 00:13:25,139
from this diagram we can see incoming

329
00:13:25,139 --> 00:13:28,260
traffic is diverted through the virtual

330
00:13:28,260 --> 00:13:31,639
machine for analysis

331
00:13:32,279 --> 00:13:34,260
now you can access the Firepower virtual

332
00:13:34,260 --> 00:13:37,339
machine via the Cisco CLI the command

333
00:13:37,339 --> 00:13:40,260
session sfr console will drop you into a

334
00:13:40,260 --> 00:13:42,120
telnet session which prompts for

335
00:13:42,120 --> 00:13:44,040
credentials and once authenticated

336
00:13:44,040 --> 00:13:46,200
you'll be able to access this is

337
00:13:46,200 --> 00:13:48,660
apparently limited Firepower module

338
00:13:48,660 --> 00:13:49,740
shell

339
00:13:49,740 --> 00:13:51,899
except it isn't all that limited At All

340
00:13:51,899 --> 00:13:54,660
by executing the expert command you'll

341
00:13:54,660 --> 00:13:57,000
drop down into a bash shell on the VM

342
00:13:57,000 --> 00:13:58,740
and from there you can actually pseudo

343
00:13:58,740 --> 00:14:01,019
to root using the previously used telnet

344
00:14:01,019 --> 00:14:03,000
credentials

345
00:14:03,000 --> 00:14:05,459
and this root shell as a feature isn't

346
00:14:05,459 --> 00:14:07,320
limited to terminal connections you can

347
00:14:07,320 --> 00:14:10,260
use it via SSH so anyone with SSH access

348
00:14:10,260 --> 00:14:12,959
to the ASA can grab a root shell on this

349
00:14:12,959 --> 00:14:15,060
virtual machine

350
00:14:15,060 --> 00:14:17,220
now that is actually noteworthy because

351
00:14:17,220 --> 00:14:19,680
this virtual machine when configured has

352
00:14:19,680 --> 00:14:22,139
network access meaning it can

353
00:14:22,139 --> 00:14:24,240
communicate with the inside Network

354
00:14:24,240 --> 00:14:26,940
uh and it can communicate with the

355
00:14:26,940 --> 00:14:29,700
outside Network uh in that way when you

356
00:14:29,700 --> 00:14:32,100
have access to this virtual machine you

357
00:14:32,100 --> 00:14:34,740
can reach the network that this the ASA

358
00:14:34,740 --> 00:14:36,540
is trying to protect and you can reach

359
00:14:36,540 --> 00:14:37,740
outwards

360
00:14:37,740 --> 00:14:39,600
an attacker that grabs a root shell on

361
00:14:39,600 --> 00:14:42,120
this VM can install arbitrary software

362
00:14:42,120 --> 00:14:45,060
uh persist through reboots in upgrades

363
00:14:45,060 --> 00:14:48,060
pivot attacks inwards exfiltrate data

364
00:14:48,060 --> 00:14:50,399
out and perhaps most interestingly to me

365
00:14:50,399 --> 00:14:52,500
just chill out and sniff the traffic

366
00:14:52,500 --> 00:14:55,139
flowing through the VM and it's unlikely

367
00:14:55,139 --> 00:14:57,060
that anyone is actually monitoring this

368
00:14:57,060 --> 00:14:59,240
virtual machine for malicious behavior

369
00:14:59,240 --> 00:15:02,220
it's rather it's a rather attractive

370
00:15:02,220 --> 00:15:05,040
Target for an attacker to sit in this

371
00:15:05,040 --> 00:15:06,600
type of root shell is actually something

372
00:15:06,600 --> 00:15:08,940
most router vendors attempt to prevent

373
00:15:08,940 --> 00:15:13,620
but on this ASA is just a feature

374
00:15:13,620 --> 00:15:15,660
now Cisco obviously knows this is

375
00:15:15,660 --> 00:15:17,279
dangerous because they have this

376
00:15:17,279 --> 00:15:19,560
lockdown sensor command that can disable

377
00:15:19,560 --> 00:15:22,260
the expert command and thus access to

378
00:15:22,260 --> 00:15:24,060
the root shell permanently

379
00:15:24,060 --> 00:15:26,160
but I'm not entirely sure how often this

380
00:15:26,160 --> 00:15:28,440
command is used and our next exploit

381
00:15:28,440 --> 00:15:32,240
will bypass the lockdown anyways

382
00:15:32,339 --> 00:15:34,320
so I was investigating how I could land

383
00:15:34,320 --> 00:15:37,260
in this root shell via HTTP and it turns

384
00:15:37,260 --> 00:15:39,180
out ASTM can talk to the Firepower

385
00:15:39,180 --> 00:15:41,040
module and generate these very pretty

386
00:15:41,040 --> 00:15:42,720
graphs

387
00:15:42,720 --> 00:15:45,959
but asdm can't access the root shell if

388
00:15:45,959 --> 00:15:48,540
I use asdm to issue the session sfr

389
00:15:48,540 --> 00:15:50,699
console command then the ASA basically

390
00:15:50,699 --> 00:15:53,040
replies you can't do interactive shells

391
00:15:53,040 --> 00:15:56,279
over https so get out of here

392
00:15:56,279 --> 00:15:57,959
so I started messing around with some

393
00:15:57,959 --> 00:16:00,540
command injection vectors and here's one

394
00:16:00,540 --> 00:16:02,820
that was actually successful I issued

395
00:16:02,820 --> 00:16:06,120
the command session sfr do backtick ID

396
00:16:06,120 --> 00:16:08,880
backtick where ID is a Linux command I

397
00:16:08,880 --> 00:16:11,940
wanted to execute if ID is executed it

398
00:16:11,940 --> 00:16:13,860
will let us know which user the command

399
00:16:13,860 --> 00:16:15,720
executed as so

400
00:16:15,720 --> 00:16:18,300
we can see that the ASA actually

401
00:16:18,300 --> 00:16:21,360
responded to my request with invalid do

402
00:16:21,360 --> 00:16:24,360
command U would equal zero root meaning

403
00:16:24,360 --> 00:16:26,459
we successfully executed the command

404
00:16:26,459 --> 00:16:29,880
Azure within the virtual machine

405
00:16:29,880 --> 00:16:32,339
which results in this scenario an

406
00:16:32,339 --> 00:16:34,680
attacker over the internet can achieve a

407
00:16:34,680 --> 00:16:37,019
root shell on the fire Firepower module

408
00:16:37,019 --> 00:16:39,480
Virtual Machine by sending a rather

409
00:16:39,480 --> 00:16:43,139
simple command injection exploit

410
00:16:43,139 --> 00:16:45,899
and the exploit is really simple so

411
00:16:45,899 --> 00:16:47,820
simple it could fit in a tweet so

412
00:16:47,820 --> 00:16:49,440
pictured here you can see a tweetable

413
00:16:49,440 --> 00:16:51,060
version of the exploit

414
00:16:51,060 --> 00:16:53,699
you can see I use the curl utility bash

415
00:16:53,699 --> 00:16:56,459
Dev TCP and neck hat to throw the

416
00:16:56,459 --> 00:16:58,560
exploit and catch a reverse shell

417
00:16:58,560 --> 00:17:02,040
originating from the Asa

418
00:17:02,040 --> 00:17:04,260
and again this is great for an attacker

419
00:17:04,260 --> 00:17:06,959
they now have they now have their own

420
00:17:06,959 --> 00:17:09,299
malicious virtual machine on the ASA

421
00:17:09,299 --> 00:17:11,939
that they can use to Pivot inwards and

422
00:17:11,939 --> 00:17:14,339
exfiltrate from

423
00:17:14,339 --> 00:17:16,919
now Cisco did release an advisory for

424
00:17:16,919 --> 00:17:19,559
this but only after they realized that

425
00:17:19,559 --> 00:17:21,720
it was a bypass for the lockdown sensor

426
00:17:21,720 --> 00:17:22,859
command

427
00:17:22,859 --> 00:17:25,079
Cisco has released patches for most but

428
00:17:25,079 --> 00:17:27,500
not all ASA x with Firepower services

429
00:17:27,500 --> 00:17:30,360
and their advisory kind of makes a big

430
00:17:30,360 --> 00:17:33,480
deal that the attack requires asdm

431
00:17:33,480 --> 00:17:36,299
credentials which is quite true but

432
00:17:36,299 --> 00:17:38,340
those credentials might be easier to

433
00:17:38,340 --> 00:17:40,860
come by than you'd kind of imagine so

434
00:17:40,860 --> 00:17:42,240
I'm going to list a few ways you might

435
00:17:42,240 --> 00:17:45,660
come along asdm credentials

436
00:17:45,660 --> 00:17:47,940
first recall that the asdm client is

437
00:17:47,940 --> 00:17:49,820
vulnerable to man in the middle attacks

438
00:17:49,820 --> 00:17:52,919
additionally by default asdm client

439
00:17:52,919 --> 00:17:55,380
authenticates to the ASA using HTTP

440
00:17:55,380 --> 00:17:58,860
basic authentication which means a man

441
00:17:58,860 --> 00:18:00,660
in the middle can trivially extract

442
00:18:00,660 --> 00:18:03,480
valid asdm credentials from any HTTP

443
00:18:03,480 --> 00:18:05,700
request originally originating from the

444
00:18:05,700 --> 00:18:07,799
asdm client

445
00:18:07,799 --> 00:18:10,879
oops so there's one way

446
00:18:11,039 --> 00:18:12,660
it's also worth noting that the default

447
00:18:12,660 --> 00:18:14,940
credentials for the asdm interface are

448
00:18:14,940 --> 00:18:17,220
blank blank and you don't have to take

449
00:18:17,220 --> 00:18:19,380
my word for it this slide is taken

450
00:18:19,380 --> 00:18:23,520
directly from Cisco's asdm book one and

451
00:18:23,520 --> 00:18:26,039
of course we confirm this is true on our

452
00:18:26,039 --> 00:18:29,160
own 5506x

453
00:18:29,400 --> 00:18:31,559
it also turns out the asdm client was

454
00:18:31,559 --> 00:18:33,539
logging credentials to the client log

455
00:18:33,539 --> 00:18:36,240
file for a time so I wrote a Metasploit

456
00:18:36,240 --> 00:18:38,280
module that will scan through the asdm

457
00:18:38,280 --> 00:18:40,919
log files and pull out valid credentials

458
00:18:40,919 --> 00:18:43,340
so that's yet another way

459
00:18:43,340 --> 00:18:46,440
and finally the asdm web interface

460
00:18:46,440 --> 00:18:47,940
doesn't have Brute Force protection

461
00:18:47,940 --> 00:18:50,640
enabled by default you have to go in and

462
00:18:50,640 --> 00:18:54,000
enable this account lockout feature

463
00:18:54,000 --> 00:18:56,160
so the only thing that protects that

464
00:18:56,160 --> 00:18:58,080
interface by default

465
00:18:58,080 --> 00:19:02,580
is an ASTM specific user agent one

466
00:19:02,580 --> 00:19:03,960
version of which is pictured here

467
00:19:03,960 --> 00:19:07,260
without this user agent the ASA ignores

468
00:19:07,260 --> 00:19:09,360
the inbound asdm requests

469
00:19:09,360 --> 00:19:11,880
so that's at least some type of

470
00:19:11,880 --> 00:19:13,320
protection

471
00:19:13,320 --> 00:19:15,660
um either way I ended up writing a

472
00:19:15,660 --> 00:19:18,120
Metasploit module that Brute Force Brute

473
00:19:18,120 --> 00:19:20,820
Forces credentials on the asdm interface

474
00:19:20,820 --> 00:19:23,039
now I think a lot of people believe that

475
00:19:23,039 --> 00:19:24,780
Brute Force attacks aren't very cool

476
00:19:24,780 --> 00:19:26,880
because they're not especially elegant

477
00:19:26,880 --> 00:19:29,940
but we have seen apt like Gru use brute

478
00:19:29,940 --> 00:19:32,520
force attacks at scale with significant

479
00:19:32,520 --> 00:19:34,620
success I'd suggest if it's good enough

480
00:19:34,620 --> 00:19:36,780
for Gru it's probably good enough for me

481
00:19:36,780 --> 00:19:39,059
and you

482
00:19:39,059 --> 00:19:41,280
so with credentials in hand I also wrote

483
00:19:41,280 --> 00:19:43,020
I'm a display module for the command

484
00:19:43,020 --> 00:19:45,299
injection over http

485
00:19:45,299 --> 00:19:48,059
here you can see I provide IPS and

486
00:19:48,059 --> 00:19:50,640
credentials throw the exploit and catch

487
00:19:50,640 --> 00:19:53,900
a reverse shell yet again

488
00:19:55,020 --> 00:19:58,440
so uh we're going to switch our Focus to

489
00:19:58,440 --> 00:20:00,360
abusing the installation of the

490
00:20:00,360 --> 00:20:03,120
Firepower module so nothing in the

491
00:20:03,120 --> 00:20:04,500
remainder of this talk is actually

492
00:20:04,500 --> 00:20:07,679
considered a vulnerability by Cisco but

493
00:20:07,679 --> 00:20:09,480
I'll let you be your own judge on that

494
00:20:09,480 --> 00:20:11,660
matter

495
00:20:12,059 --> 00:20:15,059
so interestingly the Firepower module is

496
00:20:15,059 --> 00:20:17,700
an add-on package kind of like the asdm

497
00:20:17,700 --> 00:20:21,000
package it has to be installed the asax

498
00:20:21,000 --> 00:20:23,700
works totally fine without it and if the

499
00:20:23,700 --> 00:20:26,400
user doesn't use the IPS feature like

500
00:20:26,400 --> 00:20:28,140
this will not want to install in the

501
00:20:28,140 --> 00:20:29,880
first place so a scenario where

502
00:20:29,880 --> 00:20:32,280
hackercat has SSH access from the

503
00:20:32,280 --> 00:20:34,620
internet but the Firepower module isn't

504
00:20:34,620 --> 00:20:37,380
installed isn't that far-fetched but

505
00:20:37,380 --> 00:20:39,059
without the Firepower module installed

506
00:20:39,059 --> 00:20:41,640
hacker cat can't access that special

507
00:20:41,640 --> 00:20:43,799
root shell

508
00:20:43,799 --> 00:20:47,039
or Kenny so let's see how hacker cat can

509
00:20:47,039 --> 00:20:48,660
get the Shell by using the Firepower

510
00:20:48,660 --> 00:20:50,220
boot image

511
00:20:50,220 --> 00:20:52,140
now the Firepower module installation

512
00:20:52,140 --> 00:20:55,320
process is a bit involved it happens in

513
00:20:55,320 --> 00:20:57,900
three phases first the installation of a

514
00:20:57,900 --> 00:21:00,720
boot image then the installation of an

515
00:21:00,720 --> 00:21:03,299
install package and finally an upgrade

516
00:21:03,299 --> 00:21:05,580
package is applied so we're going to

517
00:21:05,580 --> 00:21:07,980
talk about this file labeled number one

518
00:21:07,980 --> 00:21:11,280
here and that's the boot image that's

519
00:21:11,280 --> 00:21:14,340
installed in phase one

520
00:21:14,340 --> 00:21:16,020
the boot image needs to be downloaded

521
00:21:16,020 --> 00:21:19,080
from Cisco and copied to the ASA or an

522
00:21:19,080 --> 00:21:20,700
image might already be present on your

523
00:21:20,700 --> 00:21:23,160
system as was the case when we purchased

524
00:21:23,160 --> 00:21:25,320
our test device but either way

525
00:21:25,320 --> 00:21:27,900
once the image is on the ASA you issue

526
00:21:27,900 --> 00:21:30,120
two commands to boot it the First

527
00:21:30,120 --> 00:21:32,340
Command lets the ASA know this is the

528
00:21:32,340 --> 00:21:34,200
boot image you want to use the second

529
00:21:34,200 --> 00:21:37,620
command actually boots it up

530
00:21:37,620 --> 00:21:40,260
you then issue the session sfr console

531
00:21:40,260 --> 00:21:41,940
command to open a telnet connection to

532
00:21:41,940 --> 00:21:43,200
the boot image

533
00:21:43,200 --> 00:21:45,240
you'll be prompted for credentials so

534
00:21:45,240 --> 00:21:47,039
pictured here's the default credentials

535
00:21:47,039 --> 00:21:49,919
for various versions of the boot image

536
00:21:49,919 --> 00:21:52,440
but note the default user is always

537
00:21:52,440 --> 00:21:54,419
admin

538
00:21:54,419 --> 00:21:56,340
so once you're authenticated you'll drop

539
00:21:56,340 --> 00:21:58,080
down into the shell in the boot image

540
00:21:58,080 --> 00:22:00,299
and this is actually extremely limited

541
00:22:00,299 --> 00:22:02,460
it's really only useful for installing

542
00:22:02,460 --> 00:22:04,919
stage two the install package

543
00:22:04,919 --> 00:22:07,500
it doesn't have anything like the export

544
00:22:07,500 --> 00:22:10,500
command that we saw previously so let's

545
00:22:10,500 --> 00:22:12,600
take a step back

546
00:22:12,600 --> 00:22:15,480
and instead log in as this undocumented

547
00:22:15,480 --> 00:22:19,860
user root with the password cisco123 and

548
00:22:19,860 --> 00:22:23,159
Bam you got a root shell

549
00:22:23,159 --> 00:22:25,140
and what's great about that is the boot

550
00:22:25,140 --> 00:22:27,600
images networks too so using hard-coded

551
00:22:27,600 --> 00:22:29,580
creds on the boot image gives hacker cat

552
00:22:29,580 --> 00:22:31,559
the special root shell again

553
00:22:31,559 --> 00:22:33,480
now Cisco said that this is not a

554
00:22:33,480 --> 00:22:34,980
vulnerability because there are no

555
00:22:34,980 --> 00:22:36,659
security expectations during the

556
00:22:36,659 --> 00:22:39,539
Firepower install process they had the

557
00:22:39,539 --> 00:22:41,400
same responses when we reported a

558
00:22:41,400 --> 00:22:42,840
command injection issue in the boot

559
00:22:42,840 --> 00:22:44,179
image as well

560
00:22:44,179 --> 00:22:46,200
I'm not going to talk about that one

561
00:22:46,200 --> 00:22:47,820
because it's easier to talk about the

562
00:22:47,820 --> 00:22:50,039
hard-coded creds but I just want to

563
00:22:50,039 --> 00:22:51,299
emphasize

564
00:22:51,299 --> 00:22:55,639
boot image contains no vulnerabilities

565
00:22:55,980 --> 00:22:58,500
but vulnerability or not the hard-coded

566
00:22:58,500 --> 00:23:01,200
creds are dead useful now I wrote a

567
00:23:01,200 --> 00:23:02,940
couple of exploits that automate the

568
00:23:02,940 --> 00:23:05,039
uploading and configuration needed to

569
00:23:05,039 --> 00:23:07,559
take advantage of this non-vulnerability

570
00:23:07,559 --> 00:23:09,299
here once again you see that we have a

571
00:23:09,299 --> 00:23:11,280
root shell via Metasploit

572
00:23:11,280 --> 00:23:14,940
uh and now Cisco Cisco did remove this

573
00:23:14,940 --> 00:23:17,159
hard-coded credential from a more recent

574
00:23:17,159 --> 00:23:18,900
version of the boot image

575
00:23:18,900 --> 00:23:20,400
but since the ASA doesn't actually

576
00:23:20,400 --> 00:23:22,679
prevent you from using older boot images

577
00:23:22,679 --> 00:23:25,140
I can't say that's a particularly useful

578
00:23:25,140 --> 00:23:27,840
mitigation and in my mind because you

579
00:23:27,840 --> 00:23:29,700
can always use these boot images no

580
00:23:29,700 --> 00:23:31,919
matter their age this is sort of a

581
00:23:31,919 --> 00:23:34,460
forever day

582
00:23:35,159 --> 00:23:36,600
now the problem with the previous

583
00:23:36,600 --> 00:23:39,900
attacks the assumed SSH access which is

584
00:23:39,900 --> 00:23:43,080
obviously not going to typically be

585
00:23:43,080 --> 00:23:44,820
available for an attacker

586
00:23:44,820 --> 00:23:46,620
so I wanted to figure out some attacks

587
00:23:46,620 --> 00:23:48,360
that assumes no access to the device

588
00:23:48,360 --> 00:23:51,000
whatsoever I want to modify the

589
00:23:51,000 --> 00:23:52,919
Firepower install packages to install

590
00:23:52,919 --> 00:23:54,960
malicious code and then get on winning

591
00:23:54,960 --> 00:23:56,820
victims to install the malicious

592
00:23:56,820 --> 00:23:58,080
packages

593
00:23:58,080 --> 00:24:02,100
again let's talk about the boot image

594
00:24:02,100 --> 00:24:04,320
so this is the scenario hackercat is

595
00:24:04,320 --> 00:24:06,900
totally on the outside no access to the

596
00:24:06,900 --> 00:24:09,960
esa just sitting out there in the cold

597
00:24:09,960 --> 00:24:12,539
so I want to help hacker cat out help

598
00:24:12,539 --> 00:24:15,240
hacker cat out so I started looking at

599
00:24:15,240 --> 00:24:18,120
the format of the boot image it turns

600
00:24:18,120 --> 00:24:20,039
out it's just a totally generic bootable

601
00:24:20,039 --> 00:24:23,700
Linux ISO like it's just a live CD you

602
00:24:23,700 --> 00:24:25,440
can even execute it in VMware Fusion

603
00:24:25,440 --> 00:24:28,380
without any type of issues there's

604
00:24:28,380 --> 00:24:30,419
really nothing Cisco specific about the

605
00:24:30,419 --> 00:24:32,460
Boo images format

606
00:24:32,460 --> 00:24:35,159
so I figured well why don't I just

607
00:24:35,159 --> 00:24:37,679
create my own Live CD my own bootable

608
00:24:37,679 --> 00:24:40,860
ISO give that to an administrator get

609
00:24:40,860 --> 00:24:43,559
them to install it then the ASA should

610
00:24:43,559 --> 00:24:46,260
boot the malicious ISO I created because

611
00:24:46,260 --> 00:24:48,360
my operating theory was that the Cisco

612
00:24:48,360 --> 00:24:50,880
provided Firepower boo image which is a

613
00:24:50,880 --> 00:24:54,260
totally normal Live CD or whatever

614
00:24:54,720 --> 00:24:57,480
and usually stories like this have a lot

615
00:24:57,480 --> 00:25:01,020
more to them which you tried what failed

616
00:25:01,020 --> 00:25:03,059
uh funny thing is this just simply works

617
00:25:03,059 --> 00:25:05,580
I grabbed an existing script for

618
00:25:05,580 --> 00:25:08,880
creating tiny core Linux bootable isos I

619
00:25:08,880 --> 00:25:11,820
added in a few features the ability to

620
00:25:11,820 --> 00:25:14,760
play Doom a reverse shell you know the

621
00:25:14,760 --> 00:25:17,780
essentials and this script which I

622
00:25:17,780 --> 00:25:20,880
rebranded as Pinch Me generates a

623
00:25:20,880 --> 00:25:23,159
malicious ISO that the ASA will happily

624
00:25:23,159 --> 00:25:26,340
Boot and assign IP addresses to there

625
00:25:26,340 --> 00:25:28,200
was no trial and error because the ASA

626
00:25:28,200 --> 00:25:31,020
doesn't attempt to block this at all uh

627
00:25:31,020 --> 00:25:33,539
it appears to just be a feature of the

628
00:25:33,539 --> 00:25:36,539
asax that it will boot arbitrary virtual

629
00:25:36,539 --> 00:25:39,360
machines but again this isn't a

630
00:25:39,360 --> 00:25:42,120
vulnerability so remember there are no

631
00:25:42,120 --> 00:25:45,600
security case security expectations for

632
00:25:45,600 --> 00:25:48,299
the boot image

633
00:25:48,299 --> 00:25:50,760
so we can craft our own boot images uh

634
00:25:50,760 --> 00:25:53,039
distribute them as we'd like and once

635
00:25:53,039 --> 00:25:55,260
installed have our special root shell

636
00:25:55,260 --> 00:25:56,340
again

637
00:25:56,340 --> 00:25:58,440
but the problem with the boot image is

638
00:25:58,440 --> 00:26:01,440
it doesn't persist through reboots so I

639
00:26:01,440 --> 00:26:03,240
started looking at the install package

640
00:26:03,240 --> 00:26:06,059
for a more sustained attack

641
00:26:06,059 --> 00:26:08,279
now remember the install package is part

642
00:26:08,279 --> 00:26:10,500
two of the Firepower module installation

643
00:26:10,500 --> 00:26:13,260
the install package is installed by and

644
00:26:13,260 --> 00:26:16,380
overwrites the boot image

645
00:26:16,380 --> 00:26:18,179
so I was trying to figure out the format

646
00:26:18,179 --> 00:26:19,919
the boot image expects the install

647
00:26:19,919 --> 00:26:21,779
package to be in

648
00:26:21,779 --> 00:26:24,299
pictured here's python taken directly

649
00:26:24,299 --> 00:26:26,460
from the boot image and you can see it

650
00:26:26,460 --> 00:26:29,220
expects the install package to be in the

651
00:26:29,220 --> 00:26:31,679
form of encrypted content signed

652
00:26:31,679 --> 00:26:34,080
checksum package wrapper format which is

653
00:26:34,080 --> 00:26:35,400
a mouthful

654
00:26:35,400 --> 00:26:37,679
I'm pretty sure it's actually a really

655
00:26:37,679 --> 00:26:40,799
secure format as far as I can tell and

656
00:26:40,799 --> 00:26:42,840
again as far as I can tell is the only

657
00:26:42,840 --> 00:26:45,000
format Cisco has ever published the

658
00:26:45,000 --> 00:26:47,960
install package in

659
00:26:48,000 --> 00:26:50,340
and this is what it looks like this

660
00:26:50,340 --> 00:26:52,260
isn't super important to know just note

661
00:26:52,260 --> 00:26:55,140
that it starts with this keyword key uh

662
00:26:55,140 --> 00:26:57,840
very early on

663
00:26:57,840 --> 00:26:59,640
it also turns out that the boot image

664
00:26:59,640 --> 00:27:01,679
has this if clause for the Firepower

665
00:27:01,679 --> 00:27:03,720
module that allows a second install

666
00:27:03,720 --> 00:27:06,600
package format and this format is check

667
00:27:06,600 --> 00:27:09,779
some package wrapper an utterly insecure

668
00:27:09,779 --> 00:27:13,080
format no six no Cisco signatures on

669
00:27:13,080 --> 00:27:16,380
this one it only has checksums like we

670
00:27:16,380 --> 00:27:18,840
saw with the asdm package

671
00:27:18,840 --> 00:27:21,600
which means in theory we should be able

672
00:27:21,600 --> 00:27:23,340
to craft one of these check some install

673
00:27:23,340 --> 00:27:26,279
packages and uh give it to an

674
00:27:26,279 --> 00:27:28,140
administrator and get them to install it

675
00:27:28,140 --> 00:27:30,600
resulting in boot shell access once

676
00:27:30,600 --> 00:27:32,159
again

677
00:27:32,159 --> 00:27:34,620
and after some really tedious reverse

678
00:27:34,620 --> 00:27:36,539
engineering I did figure out that in

679
00:27:36,539 --> 00:27:39,299
Secure format again it's not important

680
00:27:39,299 --> 00:27:41,880
just note that the file no longer starts

681
00:27:41,880 --> 00:27:44,279
with a key keyword it goes right in the

682
00:27:44,279 --> 00:27:46,320
data

683
00:27:46,320 --> 00:27:48,419
now the problem is that we actually need

684
00:27:48,419 --> 00:27:51,480
the install package to do its job namely

685
00:27:51,480 --> 00:27:53,640
install a whole bunch of Cisco stuff and

686
00:27:53,640 --> 00:27:55,980
overwrite the boot image otherwise the

687
00:27:55,980 --> 00:27:58,799
installation process will fail so it

688
00:27:58,799 --> 00:28:01,440
isn't enough to know the insecure format

689
00:28:01,440 --> 00:28:04,200
we need the insecure checksum package to

690
00:28:04,200 --> 00:28:07,380
also contain all the Cisco stuff as well

691
00:28:07,380 --> 00:28:09,900
uh otherwise the installation will not

692
00:28:09,900 --> 00:28:11,640
succeed

693
00:28:11,640 --> 00:28:14,039
so I wrote a tool that does that this

694
00:28:14,039 --> 00:28:15,539
tool is called WhatsApp

695
00:28:15,539 --> 00:28:17,640
it takes a valid and signed installation

696
00:28:17,640 --> 00:28:20,700
package unpackages it inserts malicious

697
00:28:20,700 --> 00:28:23,940
code repackages it into the insecure

698
00:28:23,940 --> 00:28:26,460
format and then it's ready to be

699
00:28:26,460 --> 00:28:29,100
installed by an unwitting victim

700
00:28:29,100 --> 00:28:31,380
the malicious code is just an init

701
00:28:31,380 --> 00:28:33,179
script basically it tries to connect to

702
00:28:33,179 --> 00:28:35,520
an ipm4 of the attacker's choosing every

703
00:28:35,520 --> 00:28:38,340
five minutes or so and this init script

704
00:28:38,340 --> 00:28:40,620
Will Survive reboot reboots and even

705
00:28:40,620 --> 00:28:43,260
upgrades so it's a pretty useful little

706
00:28:43,260 --> 00:28:45,720
attack all you need is to get someone to

707
00:28:45,720 --> 00:28:47,400
install it for you

708
00:28:47,400 --> 00:28:52,020
but remember this isn't a vulnerability

709
00:28:52,020 --> 00:28:54,659
but the result again if installed is

710
00:28:54,659 --> 00:28:56,460
hacker cat is back in the root shell

711
00:28:56,460 --> 00:28:59,520
this time with persistence again with

712
00:28:59,520 --> 00:29:01,740
access to the protected Network

713
00:29:01,740 --> 00:29:04,980
access to the internet and access to the

714
00:29:04,980 --> 00:29:07,679
traffic flowing through the VM

715
00:29:07,679 --> 00:29:09,360
now actually describe I actually

716
00:29:09,360 --> 00:29:12,000
attempted to describe this to Cisco as a

717
00:29:12,000 --> 00:29:13,740
supply chain attack

718
00:29:13,740 --> 00:29:16,440
uh however they disagreed they pointed

719
00:29:16,440 --> 00:29:18,659
out that the Firepower module has a root

720
00:29:18,659 --> 00:29:20,520
shell as a feature

721
00:29:20,520 --> 00:29:22,980
and a vendor could simply insert

722
00:29:22,980 --> 00:29:24,960
arbitrary code into the virtual machine

723
00:29:24,960 --> 00:29:28,980
using that root shell so no malicious

724
00:29:28,980 --> 00:29:31,980
installation package is really required

725
00:29:31,980 --> 00:29:33,960
I agreed with their original sentiment

726
00:29:33,960 --> 00:29:36,299
but to me that's a separate and also

727
00:29:36,299 --> 00:29:38,640
concerning supply chain attack but I

728
00:29:38,640 --> 00:29:40,200
wasn't really able to win them over to

729
00:29:40,200 --> 00:29:42,799
my point of view

730
00:29:43,080 --> 00:29:45,539
so that's the the hacks I have for you

731
00:29:45,539 --> 00:29:47,940
in this talk we talked about man in the

732
00:29:47,940 --> 00:29:49,860
middle problems credential leaks code

733
00:29:49,860 --> 00:29:52,200
signing issues package signing issues

734
00:29:52,200 --> 00:29:54,539
root shells a feature hard-coded

735
00:29:54,539 --> 00:29:56,760
credentials for a root shell command

736
00:29:56,760 --> 00:29:59,580
injection for root access and executing

737
00:29:59,580 --> 00:30:02,279
arbitrary bootable ISO many of these

738
00:30:02,279 --> 00:30:04,500
make the ASA a perfect little Trojan

739
00:30:04,500 --> 00:30:06,240
Horse

740
00:30:06,240 --> 00:30:08,700
now having said that let's look at some

741
00:30:08,700 --> 00:30:10,740
indicators and possible mitigations real

742
00:30:10,740 --> 00:30:12,779
quick

743
00:30:12,779 --> 00:30:14,880
the number one thing I was taken away

744
00:30:14,880 --> 00:30:17,640
from this talk is that this pictured

745
00:30:17,640 --> 00:30:20,039
here can never be done never can you use

746
00:30:20,039 --> 00:30:21,539
asdm over the internet without

747
00:30:21,539 --> 00:30:24,600
potentially risking your ASA the man in

748
00:30:24,600 --> 00:30:26,220
the middle issue to my knowledge is not

749
00:30:26,220 --> 00:30:28,260
slated to be fixed I would actually

750
00:30:28,260 --> 00:30:29,940
encourage you to stop using ASM

751
00:30:29,940 --> 00:30:32,399
altogether and to disable the asdm

752
00:30:32,399 --> 00:30:34,860
feature on your Asa

753
00:30:34,860 --> 00:30:36,960
I've written a few Yara rules to help

754
00:30:36,960 --> 00:30:39,179
identify some of the attacks we've we've

755
00:30:39,179 --> 00:30:41,399
talked about here one rule detects

756
00:30:41,399 --> 00:30:43,980
malicious asdm packages another gitex

757
00:30:43,980 --> 00:30:46,620
unsigned install packages and then there

758
00:30:46,620 --> 00:30:48,419
are two that will look through the asdm

759
00:30:48,419 --> 00:30:51,000
log files for one for credentials and

760
00:30:51,000 --> 00:30:53,220
the other one will detect usage of

761
00:30:53,220 --> 00:30:56,580
malicious sgz files

762
00:30:56,580 --> 00:30:59,100
uh and ideally I'd love to be able to

763
00:30:59,100 --> 00:31:01,140
stand up here and give you guidance on

764
00:31:01,140 --> 00:31:04,140
patching however there's slew of issues

765
00:31:04,140 --> 00:31:05,940
in this talk that are not considered

766
00:31:05,940 --> 00:31:08,399
vulnerabilities or are unpashed or their

767
00:31:08,399 --> 00:31:11,580
patch status isn't clear as of today so

768
00:31:11,580 --> 00:31:13,860
uh when patching isn't an option we

769
00:31:13,860 --> 00:31:16,880
usually apply mitigating controls

770
00:31:16,880 --> 00:31:20,159
isolate and limit access and that's not

771
00:31:20,159 --> 00:31:22,140
that easy because the ASA is a critical

772
00:31:22,140 --> 00:31:24,720
system in your network at the very least

773
00:31:24,720 --> 00:31:27,899
like I said I disable asdm ensure that

774
00:31:27,899 --> 00:31:30,000
we're auditing who is logging into the

775
00:31:30,000 --> 00:31:32,220
system we saw a number of password

776
00:31:32,220 --> 00:31:33,899
issues in this talk so rotating

777
00:31:33,899 --> 00:31:36,659
passwords might be smart and finally

778
00:31:36,659 --> 00:31:38,880
when it comes to the asax with Firepower

779
00:31:38,880 --> 00:31:41,100
Services I actually think that root

780
00:31:41,100 --> 00:31:43,740
shell feature is far too dangerous even

781
00:31:43,740 --> 00:31:45,899
without all the additional packaging

782
00:31:45,899 --> 00:31:48,659
issues that we discussed I'd personally

783
00:31:48,659 --> 00:31:50,580
retire and replace those as soon as

784
00:31:50,580 --> 00:31:53,460
possible and be sure you have some idea

785
00:31:53,460 --> 00:31:55,200
what's going on in that root shell until

786
00:31:55,200 --> 00:31:57,899
you're able to replace them

787
00:31:57,899 --> 00:32:01,679
uh so that's actually it that's uh all

788
00:32:01,679 --> 00:32:03,120
the code I've talked about is up on

789
00:32:03,120 --> 00:32:06,179
GitHub uh a lot more code actually uh if

790
00:32:06,179 --> 00:32:08,399
you like this talk you can find me on

791
00:32:08,399 --> 00:32:10,080
the normal social media sites if you

792
00:32:10,080 --> 00:32:13,830
don't like the talk don't find me there

793
00:32:13,830 --> 00:32:16,939
[Music]

794
00:32:20,780 --> 00:32:23,889
[Music]

