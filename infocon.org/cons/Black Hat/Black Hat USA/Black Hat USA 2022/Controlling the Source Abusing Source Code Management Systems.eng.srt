1
00:00:01,730 --> 00:00:03,720
[Music]

2
00:00:03,720 --> 00:00:06,720
foreign

3
00:00:07,700 --> 00:00:11,099
thank you very much so uh welcome to my

4
00:00:11,099 --> 00:00:12,900
my black cap briefing controlling the

5
00:00:12,900 --> 00:00:14,340
source of using source code Management

6
00:00:14,340 --> 00:00:16,260
Systems I'm Brett Hawkins I'm with the

7
00:00:16,260 --> 00:00:18,180
adversary simulation team at IBM X-Force

8
00:00:18,180 --> 00:00:19,260
red

9
00:00:19,260 --> 00:00:21,060
so agenda for today I'm going to go over

10
00:00:21,060 --> 00:00:22,740
an introduction just as some kind of key

11
00:00:22,740 --> 00:00:24,660
motivators around this research then I'm

12
00:00:24,660 --> 00:00:26,100
going to get into a background on source

13
00:00:26,100 --> 00:00:27,779
code Management Systems where I'll then

14
00:00:27,779 --> 00:00:29,640
I'll go into diving deep into attacking

15
00:00:29,640 --> 00:00:31,019
three popular source code Management

16
00:00:31,019 --> 00:00:32,600
Systems including GitHub enterprise

17
00:00:32,600 --> 00:00:35,820
gitlab Enterprise and bitbucket then I'm

18
00:00:35,820 --> 00:00:36,960
going to go over a tool that I wrote

19
00:00:36,960 --> 00:00:38,880
called sem kit to help facilitate these

20
00:00:38,880 --> 00:00:40,680
attacks I have three demos put together

21
00:00:40,680 --> 00:00:41,940
we are going to see a software supply

22
00:00:41,940 --> 00:00:43,500
chain attack you're also going to see

23
00:00:43,500 --> 00:00:44,940
lateral movement from source code

24
00:00:44,940 --> 00:00:46,379
Management Systems to other devops

25
00:00:46,379 --> 00:00:48,600
systems and I'll wrap things up with a

26
00:00:48,600 --> 00:00:50,160
defensive considerations and a

27
00:00:50,160 --> 00:00:52,559
conclusion

28
00:00:52,559 --> 00:00:54,360
so just a little bit about me so I'm

29
00:00:54,360 --> 00:00:56,100
Brett I'm on the adversary simulation

30
00:00:56,100 --> 00:00:57,780
team next Force Red where we do two to

31
00:00:57,780 --> 00:00:59,699
three month engagements uh kind of going

32
00:00:59,699 --> 00:01:01,320
after an organization's crown jewels

33
00:01:01,320 --> 00:01:02,699
testing their detection response

34
00:01:02,699 --> 00:01:04,619
capabilities uh prior to my time at

35
00:01:04,619 --> 00:01:06,600
X-Force red I wore a number of different

36
00:01:06,600 --> 00:01:08,400
hats both on the offensive and defensive

37
00:01:08,400 --> 00:01:11,100
side at mandian JP Morgan Chase and the

38
00:01:11,100 --> 00:01:13,320
James smucker company I've spoken at a

39
00:01:13,320 --> 00:01:14,700
number of conferences including Derby

40
00:01:14,700 --> 00:01:17,460
con Wild West hackens Fest b-sides and

41
00:01:17,460 --> 00:01:19,320
hackers teaching hackers I'm also an

42
00:01:19,320 --> 00:01:20,939
open source tool author so I'm the

43
00:01:20,939 --> 00:01:22,740
author of sharp assist and visibility

44
00:01:22,740 --> 00:01:24,900
cloak and now SCM kit and I was a

45
00:01:24,900 --> 00:01:27,180
contributor to the due diligence project

46
00:01:27,180 --> 00:01:28,799
so first off how did this research come

47
00:01:28,799 --> 00:01:30,720
about uh firstly just real world

48
00:01:30,720 --> 00:01:32,700
experience attacking these systems more

49
00:01:32,700 --> 00:01:34,140
and more our clients are asking us to go

50
00:01:34,140 --> 00:01:36,119
after these systems just because of the

51
00:01:36,119 --> 00:01:37,320
role that they play if you think about

52
00:01:37,320 --> 00:01:39,240
in today's world software's running on

53
00:01:39,240 --> 00:01:41,220
everything it's running on our cars it's

54
00:01:41,220 --> 00:01:42,960
running our Traffic Control Systems our

55
00:01:42,960 --> 00:01:45,060
medical devices and much more okay and

56
00:01:45,060 --> 00:01:46,799
that software running is source code

57
00:01:46,799 --> 00:01:48,479
that source code is developed and

58
00:01:48,479 --> 00:01:49,500
maintained Within These source code

59
00:01:49,500 --> 00:01:51,119
Management Systems which makes them a

60
00:01:51,119 --> 00:01:52,320
very juicy Target from an attacker

61
00:01:52,320 --> 00:01:53,939
perspective and we're starting to see

62
00:01:53,939 --> 00:01:55,740
that too so if you look at the lapsis

63
00:01:55,740 --> 00:01:58,020
group in the last year has claimed doing

64
00:01:58,020 --> 00:01:59,220
source code theft to some large

65
00:01:59,220 --> 00:02:01,320
organizations there with Microsoft with

66
00:02:01,320 --> 00:02:03,479
their Azure devops instance T-Mobile via

67
00:02:03,479 --> 00:02:04,979
their bitbucket instance and then

68
00:02:04,979 --> 00:02:06,420
Samsung and globin with their GitHub

69
00:02:06,420 --> 00:02:08,098
Enterprise instance and obviously in the

70
00:02:08,098 --> 00:02:09,419
last two years software supply chain

71
00:02:09,419 --> 00:02:10,919
attacks have there have really become

72
00:02:10,919 --> 00:02:12,360
more popular if you look at the

73
00:02:12,360 --> 00:02:14,099
solarwinds breach for example that

74
00:02:14,099 --> 00:02:15,420
really enabled the compromise of

75
00:02:15,420 --> 00:02:16,920
multiple organizations in both the

76
00:02:16,920 --> 00:02:20,359
private and the public sector

77
00:02:20,819 --> 00:02:22,379
I have two main goals with this research

78
00:02:22,379 --> 00:02:24,239
so the first one was to bring more

79
00:02:24,239 --> 00:02:26,040
attention to securing these systems and

80
00:02:26,040 --> 00:02:27,540
black hat is the perfect platform to do

81
00:02:27,540 --> 00:02:29,700
that secondly there's not much research

82
00:02:29,700 --> 00:02:31,140
out there right now on attacking and

83
00:02:31,140 --> 00:02:32,160
defending these source code Management

84
00:02:32,160 --> 00:02:33,840
Systems so it's my goal that this is

85
00:02:33,840 --> 00:02:35,580
going to inspire future research on

86
00:02:35,580 --> 00:02:38,160
defending these critical systems

87
00:02:38,160 --> 00:02:39,480
whether you're on offense or defense

88
00:02:39,480 --> 00:02:40,379
you're going to get something out of

89
00:02:40,379 --> 00:02:41,819
this talk you're going to learn some

90
00:02:41,819 --> 00:02:42,720
different attacks and errors against

91
00:02:42,720 --> 00:02:44,220
source code Management Systems you're

92
00:02:44,220 --> 00:02:45,300
going to learn how to defend these

93
00:02:45,300 --> 00:02:47,099
systems and lastly from an offensive

94
00:02:47,099 --> 00:02:48,420
perspective you're going to learn how to

95
00:02:48,420 --> 00:02:49,860
abuse these systems from both a

96
00:02:49,860 --> 00:02:52,500
privileged and a non-privileged context

97
00:02:52,500 --> 00:02:54,480
and just before I get started you know

98
00:02:54,480 --> 00:02:55,560
my perspective on this you know I'm

99
00:02:55,560 --> 00:02:56,700
currently a red team operator I've been

100
00:02:56,700 --> 00:02:58,500
doing it for a long time prior to that I

101
00:02:58,500 --> 00:02:59,760
was a blue teamer so that's the

102
00:02:59,760 --> 00:03:00,840
perspective that I bring with this

103
00:03:00,840 --> 00:03:02,340
research you know I'm not a devops

104
00:03:02,340 --> 00:03:04,080
engineer I'm not a software developer

105
00:03:04,080 --> 00:03:06,480
and I'm not a system administrator

106
00:03:06,480 --> 00:03:07,500
so now we're gonna get into background

107
00:03:07,500 --> 00:03:09,300
some source code Management Systems so

108
00:03:09,300 --> 00:03:10,440
first off what is the source code

109
00:03:10,440 --> 00:03:12,300
management system to put it very simply

110
00:03:12,300 --> 00:03:14,580
it manages source code repositories it

111
00:03:14,580 --> 00:03:16,080
allows multiple developers to work on

112
00:03:16,080 --> 00:03:18,480
code at the same time track issues you

113
00:03:18,480 --> 00:03:19,620
know and it integrates with other

114
00:03:19,620 --> 00:03:21,420
systems within the devops pipeline right

115
00:03:21,420 --> 00:03:23,700
so other CI CD systems

116
00:03:23,700 --> 00:03:24,959
um and if you look at kind of three

117
00:03:24,959 --> 00:03:26,340
popular systems that I included for This

118
00:03:26,340 --> 00:03:28,140
research now these are three most

119
00:03:28,140 --> 00:03:29,819
popular that we see on our engagements

120
00:03:29,819 --> 00:03:31,080
so that's kind of why I chose these for

121
00:03:31,080 --> 00:03:33,239
research so GitHub Enterprise GitHub

122
00:03:33,239 --> 00:03:35,340
Enterprise and then bitbucket server we

123
00:03:35,340 --> 00:03:36,900
see bitbucket Server more than bitbucket

124
00:03:36,900 --> 00:03:38,280
Cloud on engagements so that's where I

125
00:03:38,280 --> 00:03:40,440
focus on the bit bucket side all of

126
00:03:40,440 --> 00:03:41,580
these though they support different

127
00:03:41,580 --> 00:03:42,959
hosting options whether you host them on

128
00:03:42,959 --> 00:03:45,000
premise or in the cloud and they also

129
00:03:45,000 --> 00:03:46,739
support Integrations into the devops

130
00:03:46,739 --> 00:03:47,760
pipeline

131
00:03:47,760 --> 00:03:49,080
and when you talk about the devops

132
00:03:49,080 --> 00:03:51,299
pipeline these systems lie within the

133
00:03:51,299 --> 00:03:53,640
build phase so you kind of have your

134
00:03:53,640 --> 00:03:55,739
your Source codes developed and then you

135
00:03:55,739 --> 00:03:58,080
know it's built tested deployed and then

136
00:03:58,080 --> 00:04:00,000
ran in production and as you can see

137
00:04:00,000 --> 00:04:02,280
here all other phases in the devops

138
00:04:02,280 --> 00:04:05,159
pipeline rely on the Integrity of the

139
00:04:05,159 --> 00:04:06,239
source code that is developed and

140
00:04:06,239 --> 00:04:08,519
maintained Within These systems

141
00:04:08,519 --> 00:04:09,900
and when you talk about source code

142
00:04:09,900 --> 00:04:11,640
Integrity let's talk about software

143
00:04:11,640 --> 00:04:13,319
supply chain attacks so for a software

144
00:04:13,319 --> 00:04:15,060
supply chain attack an attacker is

145
00:04:15,060 --> 00:04:16,680
simply injecting themselves into the

146
00:04:16,680 --> 00:04:18,540
development process at some point to

147
00:04:18,540 --> 00:04:20,339
deploy malicious code there's two angles

148
00:04:20,339 --> 00:04:21,478
to this you can either go after the

149
00:04:21,478 --> 00:04:23,100
build Integrity like the solarwinds

150
00:04:23,100 --> 00:04:25,020
attackers did or you can go after the

151
00:04:25,020 --> 00:04:26,759
source Integrity so my research

152
00:04:26,759 --> 00:04:28,919
specifically focuses on scenarios B and

153
00:04:28,919 --> 00:04:30,600
C in that diagram around going after

154
00:04:30,600 --> 00:04:32,460
these source code Management systems and

155
00:04:32,460 --> 00:04:34,139
you're going to see a demo of doing a

156
00:04:34,139 --> 00:04:35,699
software supply chain attack in this

157
00:04:35,699 --> 00:04:37,979
presentation

158
00:04:37,979 --> 00:04:40,199
you're also another useful scenario from

159
00:04:40,199 --> 00:04:42,000
a source code Management System point is

160
00:04:42,000 --> 00:04:43,860
these can be initial access points to

161
00:04:43,860 --> 00:04:46,080
other systems in the devops pipeline so

162
00:04:46,080 --> 00:04:47,940
because they have integration set up if

163
00:04:47,940 --> 00:04:49,020
you're able to compromise one of these

164
00:04:49,020 --> 00:04:50,820
systems you could for example pivot to a

165
00:04:50,820 --> 00:04:52,800
CI CD platform pivot to a distribution

166
00:04:52,800 --> 00:04:54,600
platform and you're also going to see

167
00:04:54,600 --> 00:04:58,340
this in the demos as well

168
00:05:00,960 --> 00:05:01,979
okay

169
00:05:01,979 --> 00:05:03,120
all right so now we're going to cover

170
00:05:03,120 --> 00:05:04,800
attacking and defending GitHub

171
00:05:04,800 --> 00:05:07,040
Enterprise

172
00:05:07,919 --> 00:05:09,900
so the term Enterprise with GitHub

173
00:05:09,900 --> 00:05:11,220
Enterprise is going to refer to the

174
00:05:11,220 --> 00:05:14,340
entire GitHub Enterprise instance an

175
00:05:14,340 --> 00:05:16,199
organization within GitHub Enterprise so

176
00:05:16,199 --> 00:05:18,120
an Enterprise can have one-to-many

177
00:05:18,120 --> 00:05:20,580
organizations underneath it and you have

178
00:05:20,580 --> 00:05:22,500
different Enterprise roles and also

179
00:05:22,500 --> 00:05:23,940
organization roles within GitHub

180
00:05:23,940 --> 00:05:24,960
Enterprise

181
00:05:24,960 --> 00:05:26,940
you also have different roles for

182
00:05:26,940 --> 00:05:29,880
repositories so whether you can oh you

183
00:05:29,880 --> 00:05:31,560
can you just read a repository do you

184
00:05:31,560 --> 00:05:34,380
have right access admin access Etc and

185
00:05:34,380 --> 00:05:36,419
then you have access token scope so in

186
00:05:36,419 --> 00:05:38,639
order to access the rest API you can

187
00:05:38,639 --> 00:05:40,320
authenticate with an access token or an

188
00:05:40,320 --> 00:05:41,820
API token

189
00:05:41,820 --> 00:05:43,199
and you have different Scopes applied to

190
00:05:43,199 --> 00:05:44,520
this and that basically tells you what

191
00:05:44,520 --> 00:05:46,380
you're authorized to do with that access

192
00:05:46,380 --> 00:05:49,740
token to the rest API

193
00:05:49,740 --> 00:05:51,419
and you're going to see kind of the

194
00:05:51,419 --> 00:05:53,039
abuse of the rest API in this

195
00:05:53,039 --> 00:05:54,960
presentation so

196
00:05:54,960 --> 00:05:56,160
um you know going to be abusing that and

197
00:05:56,160 --> 00:05:57,360
all these you know all these systems

198
00:05:57,360 --> 00:05:59,220
today so each of them have a rest API

199
00:05:59,220 --> 00:06:00,720
that is basically a programmatic

200
00:06:00,720 --> 00:06:01,800
interface that you can interact with

201
00:06:01,800 --> 00:06:05,060
them to do different functionality

202
00:06:06,419 --> 00:06:07,740
so now we're going to go through the

203
00:06:07,740 --> 00:06:08,699
different attacks and areas against

204
00:06:08,699 --> 00:06:10,500
GitHub Enterprise now this isn't an

205
00:06:10,500 --> 00:06:12,720
exhaustive list these are just ones that

206
00:06:12,720 --> 00:06:14,820
I've researched and also that our team

207
00:06:14,820 --> 00:06:16,440
has used during engagements for full

208
00:06:16,440 --> 00:06:18,300
details on all these scenarios make sure

209
00:06:18,300 --> 00:06:20,039
you check out my white paper which I'll

210
00:06:20,039 --> 00:06:21,780
have a link at the end of the

211
00:06:21,780 --> 00:06:24,000
presentation it'll also be shared on the

212
00:06:24,000 --> 00:06:26,660
black hat site

213
00:06:27,240 --> 00:06:29,220
so let's talk about reconnaissance so in

214
00:06:29,220 --> 00:06:30,419
terms of reconnaissance on GitHub

215
00:06:30,419 --> 00:06:33,000
Enterprise really focusing on three

216
00:06:33,000 --> 00:06:34,680
primary aspects so focusing on

217
00:06:34,680 --> 00:06:37,800
repositories files and code because

218
00:06:37,800 --> 00:06:39,000
those are going to be the most value to

219
00:06:39,000 --> 00:06:40,199
an attacker from a reconnaissance

220
00:06:40,199 --> 00:06:41,460
standpoint now you can do this

221
00:06:41,460 --> 00:06:42,720
reconnaissance either via the web

222
00:06:42,720 --> 00:06:45,479
interface the rest API or you can also

223
00:06:45,479 --> 00:06:47,220
do that with my sem kit tool that I'll

224
00:06:47,220 --> 00:06:49,020
be showing later

225
00:06:49,020 --> 00:06:50,460
in terms of logging for this

226
00:06:50,460 --> 00:06:52,319
reconnaissance this activity is going to

227
00:06:52,319 --> 00:06:54,660
log in the ha proxy log and I've got a

228
00:06:54,660 --> 00:06:56,400
search criteria there with a screenshot

229
00:06:56,400 --> 00:06:57,360
of me filtering for some of my

230
00:06:57,360 --> 00:06:59,100
reconnaissance activity so you can see

231
00:06:59,100 --> 00:07:00,720
me there kind of searching for things

232
00:07:00,720 --> 00:07:04,199
like password or Jenkins file

233
00:07:04,199 --> 00:07:05,520
another attack you can do in GitHub

234
00:07:05,520 --> 00:07:08,460
Enterprise is a repository takeover so

235
00:07:08,460 --> 00:07:10,139
the site admin role in GitHub Enterprise

236
00:07:10,139 --> 00:07:12,060
is like the admin role within GitHub

237
00:07:12,060 --> 00:07:14,520
Enterprise if you are a site admin you

238
00:07:14,520 --> 00:07:16,440
can unlock any repository for modify

239
00:07:16,440 --> 00:07:18,300
access and that includes private

240
00:07:18,300 --> 00:07:19,500
repositories

241
00:07:19,500 --> 00:07:21,000
so you can see in the screenshot on the

242
00:07:21,000 --> 00:07:23,160
left there's a private repository and

243
00:07:23,160 --> 00:07:24,720
then on the screenshot on the right I'm

244
00:07:24,720 --> 00:07:26,639
using my site admin access to unlock

245
00:07:26,639 --> 00:07:28,740
that repository where I have full access

246
00:07:28,740 --> 00:07:31,259
to all of its uh all of its settings and

247
00:07:31,259 --> 00:07:34,440
you know any code in that repo

248
00:07:34,440 --> 00:07:36,599
in terms of logging for this attack this

249
00:07:36,599 --> 00:07:38,099
is going to be logged in the audit log

250
00:07:38,099 --> 00:07:39,960
on the GitHub Enterprise server and the

251
00:07:39,960 --> 00:07:42,060
search criteria there for finding this

252
00:07:42,060 --> 00:07:44,280
activity is action repo.staff underscore

253
00:07:44,280 --> 00:07:46,259
unlock now all the search criteria and

254
00:07:46,259 --> 00:07:47,819
logs you're going to see through here I

255
00:07:47,819 --> 00:07:49,199
have them all included in the blog post

256
00:07:49,199 --> 00:07:50,699
and the white paper so you can take a

257
00:07:50,699 --> 00:07:52,680
look at those afterwards

258
00:07:52,680 --> 00:07:54,060
another attack you can do in GitHub

259
00:07:54,060 --> 00:07:56,220
Enterprise as a site admin is you can do

260
00:07:56,220 --> 00:07:57,900
user impersonation so you have two

261
00:07:57,900 --> 00:07:59,819
options for this you can either do an

262
00:07:59,819 --> 00:08:01,560
impersonate user login and you can do

263
00:08:01,560 --> 00:08:02,880
that via the web interface as you can

264
00:08:02,880 --> 00:08:04,620
see in that screenshot or a stealthier

265
00:08:04,620 --> 00:08:06,479
option is you can use an impersonation

266
00:08:06,479 --> 00:08:08,039
token now you can create an

267
00:08:08,039 --> 00:08:09,960
impersonation token either via the web

268
00:08:09,960 --> 00:08:12,720
interface or the rest API and when you

269
00:08:12,720 --> 00:08:14,580
create an impersonation token for a user

270
00:08:14,580 --> 00:08:16,919
that user cannot see that impersonation

271
00:08:16,919 --> 00:08:20,099
token only other site admins can see

272
00:08:20,099 --> 00:08:23,479
that that user is being impersonated

273
00:08:24,120 --> 00:08:25,800
this activity is going to also be logged

274
00:08:25,800 --> 00:08:27,240
and the audit log and get the GitHub

275
00:08:27,240 --> 00:08:28,860
Enterprise server and I've got a few

276
00:08:28,860 --> 00:08:30,479
different search criterias there listed

277
00:08:30,479 --> 00:08:31,979
as far as how you can detect this

278
00:08:31,979 --> 00:08:33,779
activity again all these the search

279
00:08:33,779 --> 00:08:35,219
Criterion the logs will be included

280
00:08:35,219 --> 00:08:36,899
they're included in the blog post in the

281
00:08:36,899 --> 00:08:38,458
white paper

282
00:08:38,458 --> 00:08:39,958
another attack you can do is you can

283
00:08:39,958 --> 00:08:42,179
promote a user to site admin so if

284
00:08:42,179 --> 00:08:43,860
you're a site admin you can promote any

285
00:08:43,860 --> 00:08:46,080
other user site admin or demote end user

286
00:08:46,080 --> 00:08:47,700
from site admin where could this be

287
00:08:47,700 --> 00:08:49,320
useful let's say you've compromised the

288
00:08:49,320 --> 00:08:51,600
site admin account and you're worried uh

289
00:08:51,600 --> 00:08:52,860
you know you're worried about them you

290
00:08:52,860 --> 00:08:53,880
know basically you're worried about the

291
00:08:53,880 --> 00:08:55,680
blue team being your tail right and so

292
00:08:55,680 --> 00:08:57,060
you kind of want to switch to another

293
00:08:57,060 --> 00:08:59,220
user but keep that site admin access so

294
00:08:59,220 --> 00:09:00,720
you can promote another user to site

295
00:09:00,720 --> 00:09:03,839
admin switch to that other user

296
00:09:03,839 --> 00:09:05,459
and this activity is also be logged in

297
00:09:05,459 --> 00:09:06,839
the audit log I've got a couple

298
00:09:06,839 --> 00:09:08,220
different search criteria listed there

299
00:09:08,220 --> 00:09:10,620
and what's nice about the the uh the

300
00:09:10,620 --> 00:09:11,940
audit log is that it'll tell you whether

301
00:09:11,940 --> 00:09:13,860
something was done via the API or not so

302
00:09:13,860 --> 00:09:15,360
it'll tell you whether something was

303
00:09:15,360 --> 00:09:17,100
abused via the API so you can see in

304
00:09:17,100 --> 00:09:18,779
that screenshot there it says this was

305
00:09:18,779 --> 00:09:21,120
promoted via the API by the a Dumbledore

306
00:09:21,120 --> 00:09:23,100
user

307
00:09:23,100 --> 00:09:24,720
three options for persistence in GitHub

308
00:09:24,720 --> 00:09:26,220
Enterprise so it's you know obviously

309
00:09:26,220 --> 00:09:27,660
from Attack perspective you want to

310
00:09:27,660 --> 00:09:30,060
maintain persistent access to you know

311
00:09:30,060 --> 00:09:32,100
those systems so you can do that with

312
00:09:32,100 --> 00:09:33,480
personal access tokens and you can

313
00:09:33,480 --> 00:09:35,100
create those as a normal user via the

314
00:09:35,100 --> 00:09:36,899
web interface Yelp Enterprise doesn't

315
00:09:36,899 --> 00:09:38,880
give you the ability to use the rest API

316
00:09:38,880 --> 00:09:41,580
to create personal access tokens

317
00:09:41,580 --> 00:09:43,200
you can also use impersonation tokens

318
00:09:43,200 --> 00:09:45,240
like I mentioned previously and then the

319
00:09:45,240 --> 00:09:47,459
last option is you can also use SSH keys

320
00:09:47,459 --> 00:09:49,260
for persistence and you can do this as a

321
00:09:49,260 --> 00:09:51,000
normal user either via the web interface

322
00:09:51,000 --> 00:09:53,940
rest API or you could use sem kit for

323
00:09:53,940 --> 00:09:55,620
that

324
00:09:55,620 --> 00:09:57,600
the persistence activity is also going

325
00:09:57,600 --> 00:09:59,040
to be logged within the GitHub

326
00:09:59,040 --> 00:10:00,959
Enterprise audit log as you can see kind

327
00:10:00,959 --> 00:10:02,519
of the screenshot there me filtering for

328
00:10:02,519 --> 00:10:04,920
some of my activity

329
00:10:04,920 --> 00:10:06,120
the last thing I want to mention for

330
00:10:06,120 --> 00:10:07,740
GitHub Enterprise is the Management

331
00:10:07,740 --> 00:10:09,959
console so the management there's a

332
00:10:09,959 --> 00:10:10,980
couple main consoles in GitHub

333
00:10:10,980 --> 00:10:11,880
Enterprise so you have the Management

334
00:10:11,880 --> 00:10:13,800
console and then you have the site admin

335
00:10:13,800 --> 00:10:15,600
console the Management console is where

336
00:10:15,600 --> 00:10:16,740
you can configure the entire Enterprise

337
00:10:16,740 --> 00:10:19,500
instance and you access this via a

338
00:10:19,500 --> 00:10:21,060
single shared password

339
00:10:21,060 --> 00:10:23,279
the site admin console is specifically

340
00:10:23,279 --> 00:10:24,779
for managing different facets of an

341
00:10:24,779 --> 00:10:26,580
organization so think like you know

342
00:10:26,580 --> 00:10:29,100
role-based access for users and such but

343
00:10:29,100 --> 00:10:30,360
some different things you can do in the

344
00:10:30,360 --> 00:10:31,860
Management console is you can for

345
00:10:31,860 --> 00:10:35,160
example add your public SSH key to the

346
00:10:35,160 --> 00:10:36,839
GitHub Enterprise instance so that you

347
00:10:36,839 --> 00:10:39,360
can SSH to the server itself

348
00:10:39,360 --> 00:10:41,160
once on the server

349
00:10:41,160 --> 00:10:42,180
um there's a few different interesting

350
00:10:42,180 --> 00:10:44,160
things that you can do the default SSH

351
00:10:44,160 --> 00:10:46,800
Port is 122 and you'll SSH with the

352
00:10:46,800 --> 00:10:48,959
admin user account one thing you can do

353
00:10:48,959 --> 00:10:49,860
is list the GitHub Enterprise

354
00:10:49,860 --> 00:10:52,320
configuration via the ghe config command

355
00:10:52,320 --> 00:10:53,700
this could contain active directory

356
00:10:53,700 --> 00:10:55,620
credentials depending on what the server

357
00:10:55,620 --> 00:10:57,540
is integrated with another file of

358
00:10:57,540 --> 00:10:58,980
interest on the server

359
00:10:58,980 --> 00:11:01,320
is the secrets configuration file the

360
00:11:01,320 --> 00:11:03,000
secrets configuration file could contain

361
00:11:03,000 --> 00:11:06,060
API keys or SSH Keys depending on what

362
00:11:06,060 --> 00:11:07,740
GitHub Enterprise is integrated with in

363
00:11:07,740 --> 00:11:09,660
that environment

364
00:11:09,660 --> 00:11:12,240
in terms of logging so for example

365
00:11:12,240 --> 00:11:14,399
adding stuff you know like adding public

366
00:11:14,399 --> 00:11:16,019
SSH keys in the Management console

367
00:11:16,019 --> 00:11:17,160
that's going to be logged in the

368
00:11:17,160 --> 00:11:18,839
management log so you can see I have a

369
00:11:18,839 --> 00:11:20,820
screenshot there where I'm filtering for

370
00:11:20,820 --> 00:11:22,980
some of my activity adding the SSH keys

371
00:11:22,980 --> 00:11:25,380
in that Management console

372
00:11:25,380 --> 00:11:26,700
now we're going to get into attacking

373
00:11:26,700 --> 00:11:29,279
gitlab Enterprise

374
00:11:29,279 --> 00:11:31,380
so gilab Enterprise is going to hear the

375
00:11:31,380 --> 00:11:33,779
term project and you can use project or

376
00:11:33,779 --> 00:11:35,519
repository interchangeably they mean the

377
00:11:35,519 --> 00:11:37,320
same thing you know project and host

378
00:11:37,320 --> 00:11:40,019
code track issues and contain CI CD

379
00:11:40,019 --> 00:11:41,100
Pipelines

380
00:11:41,100 --> 00:11:42,839
and there's five you know five

381
00:11:42,839 --> 00:11:44,820
permissions for a project or repository

382
00:11:44,820 --> 00:11:46,380
you can see there from an attacker

383
00:11:46,380 --> 00:11:47,700
perspective you're going to want to

384
00:11:47,700 --> 00:11:49,260
compromise a user that has developer or

385
00:11:49,260 --> 00:11:51,300
higher permissions and just like with

386
00:11:51,300 --> 00:11:52,860
GitHub Enterprise if you want to use an

387
00:11:52,860 --> 00:11:54,720
access token or an API key there's

388
00:11:54,720 --> 00:11:55,980
different Scopes that are applied to

389
00:11:55,980 --> 00:11:57,480
that that authorize you for what you're

390
00:11:57,480 --> 00:12:00,720
allowed to do within the rest API

391
00:12:00,720 --> 00:12:02,339
and just like you know GitHub Enterprise

392
00:12:02,339 --> 00:12:03,480
there's a bunch of different things you

393
00:12:03,480 --> 00:12:04,980
can do with the rest API and you're

394
00:12:04,980 --> 00:12:07,860
going to see that in the demos

395
00:12:07,860 --> 00:12:10,019
these are the tax scenarios that I'll be

396
00:12:10,019 --> 00:12:11,459
covering again not an exhaustive list

397
00:12:11,459 --> 00:12:13,019
you know just ones that I've researched

398
00:12:13,019 --> 00:12:15,480
and full details on these attacks um

399
00:12:15,480 --> 00:12:17,640
will be are in the white paper uh

400
00:12:17,640 --> 00:12:19,019
additionally a number of these you can

401
00:12:19,019 --> 00:12:21,480
perform with the sem kit tool

402
00:12:21,480 --> 00:12:23,459
so just like GitHub Enterprise you know

403
00:12:23,459 --> 00:12:24,899
reconnaissance is important in Gate lab

404
00:12:24,899 --> 00:12:26,519
Enterprise focusing on repositories

405
00:12:26,519 --> 00:12:28,920
files and code you can do this with the

406
00:12:28,920 --> 00:12:32,519
web interface rest API or sem kit

407
00:12:32,519 --> 00:12:34,079
now in terms of logging something that I

408
00:12:34,079 --> 00:12:35,940
thought was interesting so this activity

409
00:12:35,940 --> 00:12:37,500
is logged on the production log and API

410
00:12:37,500 --> 00:12:39,120
log but if you see the screenshot on the

411
00:12:39,120 --> 00:12:41,579
top right the the activity as far as

412
00:12:41,579 --> 00:12:42,959
what I was performing with constants for

413
00:12:42,959 --> 00:12:45,060
was actually being filtered so an

414
00:12:45,060 --> 00:12:47,220
alternative approach I ended up using

415
00:12:47,220 --> 00:12:49,740
the access log and the screenshot below

416
00:12:49,740 --> 00:12:51,360
you can see when I use the access log

417
00:12:51,360 --> 00:12:53,459
filtering for reconnaissance activity I

418
00:12:53,459 --> 00:12:56,599
could actually see that activity

419
00:12:57,420 --> 00:12:59,040
just like with GitHub Enterprise you can

420
00:12:59,040 --> 00:13:00,540
also impersonate other users so if you

421
00:13:00,540 --> 00:13:02,579
are an admin role within gitlab

422
00:13:02,579 --> 00:13:04,079
Enterprise you can either do an

423
00:13:04,079 --> 00:13:05,459
impersonate user login via the web

424
00:13:05,459 --> 00:13:06,839
interface as you can see in that

425
00:13:06,839 --> 00:13:08,880
screenshot or the stealthier option

426
00:13:08,880 --> 00:13:10,680
again is creating impersonation token

427
00:13:10,680 --> 00:13:11,940
and you can do that via the web

428
00:13:11,940 --> 00:13:13,079
interface

429
00:13:13,079 --> 00:13:15,839
or the rest API and again only other

430
00:13:15,839 --> 00:13:17,279
admin users can see that an

431
00:13:17,279 --> 00:13:19,200
impersonation token was created for that

432
00:13:19,200 --> 00:13:21,600
user that user has no clue that they are

433
00:13:21,600 --> 00:13:24,060
being impersonated

434
00:13:24,060 --> 00:13:25,440
and this is going to be logged in both

435
00:13:25,440 --> 00:13:27,480
the production log and the API log on

436
00:13:27,480 --> 00:13:29,220
the gitlab Enterprise server I've got

437
00:13:29,220 --> 00:13:31,200
some search criteria there again all the

438
00:13:31,200 --> 00:13:32,519
search criteria and all the important

439
00:13:32,519 --> 00:13:34,680
logs are all included in the blog post

440
00:13:34,680 --> 00:13:36,540
and also the white paper so I've just

441
00:13:36,540 --> 00:13:37,980
got a screenshot there for me filtering

442
00:13:37,980 --> 00:13:41,779
for some impersonation token activity

443
00:13:42,420 --> 00:13:43,800
another thing you can do just like the

444
00:13:43,800 --> 00:13:45,060
other system you can promote a user to

445
00:13:45,060 --> 00:13:46,920
admin so if you're an admin and gitlab

446
00:13:46,920 --> 00:13:48,600
Enterprise you can promote a use any

447
00:13:48,600 --> 00:13:50,279
user to admin or demote any user from

448
00:13:50,279 --> 00:13:52,320
admin you can do this via the web

449
00:13:52,320 --> 00:13:56,220
interface rest API or SCM kit

450
00:13:56,220 --> 00:13:57,540
and this activity is also going to be

451
00:13:57,540 --> 00:13:59,399
logged in the production log and API log

452
00:13:59,399 --> 00:14:01,079
so you can see a screenshot there for

453
00:14:01,079 --> 00:14:02,700
example I'll be filtering for that user

454
00:14:02,700 --> 00:14:04,980
promotion activity

455
00:14:04,980 --> 00:14:06,420
same three persistence options with

456
00:14:06,420 --> 00:14:08,279
gitlab Enterprise with a couple caveats

457
00:14:08,279 --> 00:14:10,380
so you can create personal access tokens

458
00:14:10,380 --> 00:14:13,440
as a normal user in the web interface or

459
00:14:13,440 --> 00:14:15,360
gitlab Enterprise gives you the ability

460
00:14:15,360 --> 00:14:17,519
to do this via the rest API as well but

461
00:14:17,519 --> 00:14:18,959
you have to be an administrative user

462
00:14:18,959 --> 00:14:20,880
you also have impersonation tokens but

463
00:14:20,880 --> 00:14:22,560
that requires administrative permissions

464
00:14:22,560 --> 00:14:25,320
and then the last option is SSH Keys

465
00:14:25,320 --> 00:14:26,760
which you can create those as a normal

466
00:14:26,760 --> 00:14:28,860
user either via the web interface rest

467
00:14:28,860 --> 00:14:32,040
API or sem kit

468
00:14:32,040 --> 00:14:34,019
again the production log and API log is

469
00:14:34,019 --> 00:14:34,980
where this activity is going to be

470
00:14:34,980 --> 00:14:36,540
logged so the screenshot in the top

471
00:14:36,540 --> 00:14:37,680
shows me filtering for some personal

472
00:14:37,680 --> 00:14:39,899
access token activity and the screenshot

473
00:14:39,899 --> 00:14:41,579
on the bottom shows me filtering from

474
00:14:41,579 --> 00:14:44,579
for some SSH key activity

475
00:14:44,579 --> 00:14:47,040
so another attack here is around you can

476
00:14:47,040 --> 00:14:49,199
modify a continuous integration or

477
00:14:49,199 --> 00:14:50,880
continuous delivery Pipeline with

478
00:14:50,880 --> 00:14:53,100
thinkit lab Enterprise so in gitlab

479
00:14:53,100 --> 00:14:54,480
Enterprise there's a concept of these

480
00:14:54,480 --> 00:14:56,579
gitlab Runners gitlab Runners will

481
00:14:56,579 --> 00:14:58,800
execute instructions from a gitlab CI

482
00:14:58,800 --> 00:15:00,420
configuration file

483
00:15:00,420 --> 00:15:02,339
from that configuration file it's going

484
00:15:02,339 --> 00:15:04,160
to be

485
00:15:04,160 --> 00:15:06,000
named.gitlab.ci.yml and it's going to be

486
00:15:06,000 --> 00:15:08,100
in the root of the repository so you're

487
00:15:08,100 --> 00:15:10,079
going to need developer maintainer or

488
00:15:10,079 --> 00:15:11,940
owner role for that project to modify

489
00:15:11,940 --> 00:15:13,980
that file once you do though that's

490
00:15:13,980 --> 00:15:15,420
going to trigger the pipeline to run for

491
00:15:15,420 --> 00:15:17,579
that project in terms of reconnaissance

492
00:15:17,579 --> 00:15:19,560
to find you know repositories that have

493
00:15:19,560 --> 00:15:20,820
gitlab Runners available to your

494
00:15:20,820 --> 00:15:22,560
compromised user there are some

495
00:15:22,560 --> 00:15:24,360
reconnaissance modules with an sem kit

496
00:15:24,360 --> 00:15:26,880
that you can do that

497
00:15:26,880 --> 00:15:28,440
so in terms of updating this

498
00:15:28,440 --> 00:15:29,880
configuration file via the web interface

499
00:15:29,880 --> 00:15:30,959
it's going to be logged in the

500
00:15:30,959 --> 00:15:32,639
production log but obviously you can

501
00:15:32,639 --> 00:15:33,899
just update this file via the git

502
00:15:33,899 --> 00:15:36,180
command line tool so really any updates

503
00:15:36,180 --> 00:15:38,399
to the gitlab CI configuration file

504
00:15:38,399 --> 00:15:39,779
should be heavily scrutinized and

505
00:15:39,779 --> 00:15:43,320
require an approver before being pushed

506
00:15:43,320 --> 00:15:45,300
so the last mention here for gitlab

507
00:15:45,300 --> 00:15:47,639
Enterprise is around SSH access

508
00:15:47,639 --> 00:15:49,320
so a few different interesting things

509
00:15:49,320 --> 00:15:51,779
from an attacker perspective a gitlab

510
00:15:51,779 --> 00:15:54,060
configuration file on the server so that

511
00:15:54,060 --> 00:15:55,500
can contain credentials like active

512
00:15:55,500 --> 00:15:57,120
directory credentials depending on what

513
00:15:57,120 --> 00:15:58,680
the system's integrated with there's

514
00:15:58,680 --> 00:16:00,720
also a gitlab Secrets file and that

515
00:16:00,720 --> 00:16:02,639
could contain API Keys as well again

516
00:16:02,639 --> 00:16:04,620
depending on what Integrations are in

517
00:16:04,620 --> 00:16:05,459
place

518
00:16:05,459 --> 00:16:07,560
and lastly there's a postgres SQL

519
00:16:07,560 --> 00:16:10,079
database on gitlab Enterprise there's

520
00:16:10,079 --> 00:16:11,339
some interesting things in there so you

521
00:16:11,339 --> 00:16:13,260
can see in that screenshot I'm filtering

522
00:16:13,260 --> 00:16:15,360
like a user's table for usernames

523
00:16:15,360 --> 00:16:17,399
encrypted passwords and one-time

524
00:16:17,399 --> 00:16:19,380
password backup code so those are three

525
00:16:19,380 --> 00:16:20,639
interesting things from an attacker

526
00:16:20,639 --> 00:16:22,680
perspective if you have access SSH

527
00:16:22,680 --> 00:16:26,279
access to the gitlab Enterprise server

528
00:16:26,279 --> 00:16:27,540
so the last system I'm going to cover

529
00:16:27,540 --> 00:16:29,100
attacking is bitbucket and then we're

530
00:16:29,100 --> 00:16:32,160
going to get into some demos and SCM kit

531
00:16:32,160 --> 00:16:34,440
so in bitbucket there's also the concept

532
00:16:34,440 --> 00:16:36,480
of project and this is specifically

533
00:16:36,480 --> 00:16:38,639
bitbucket servers what I focused on and

534
00:16:38,639 --> 00:16:40,380
a project can contain one-to-many

535
00:16:40,380 --> 00:16:42,120
repositories it's kind of like a

536
00:16:42,120 --> 00:16:44,160
container for one of my repositories

537
00:16:44,160 --> 00:16:45,600
there's four main permission levels in

538
00:16:45,600 --> 00:16:47,100
bitbucket server you have Global

539
00:16:47,100 --> 00:16:48,240
permissions that's going to tell you

540
00:16:48,240 --> 00:16:49,980
what type of user you are and then you

541
00:16:49,980 --> 00:16:51,480
also have permissions in projects and

542
00:16:51,480 --> 00:16:53,579
repos so whether you are an admin to

543
00:16:53,579 --> 00:16:56,820
them write access read access Etc and

544
00:16:56,820 --> 00:16:58,199
then lastly just like the other two

545
00:16:58,199 --> 00:16:59,759
systems there's different Scopes that

546
00:16:59,759 --> 00:17:01,440
can apply to access tokens they're

547
00:17:01,440 --> 00:17:03,660
called HTTP access tokens in bitbucket

548
00:17:03,660 --> 00:17:05,459
server and something that's different

549
00:17:05,459 --> 00:17:07,439
though with bitbucket server is those

550
00:17:07,439 --> 00:17:09,059
access tokens are only scoped to be able

551
00:17:09,059 --> 00:17:10,919
to interact with repositories or

552
00:17:10,919 --> 00:17:12,359
projects

553
00:17:12,359 --> 00:17:14,339
having said that though there's a number

554
00:17:14,339 --> 00:17:15,599
of other different things you can do

555
00:17:15,599 --> 00:17:17,579
with the rest API in bitbucket server

556
00:17:17,579 --> 00:17:19,140
you would just have to authenticate with

557
00:17:19,140 --> 00:17:20,760
like a stolen cookie or a username

558
00:17:20,760 --> 00:17:22,619
password

559
00:17:22,619 --> 00:17:23,939
and these are attacks I'll go through

560
00:17:23,939 --> 00:17:25,799
for bitbucket Server again not an

561
00:17:25,799 --> 00:17:28,140
exhaustive list uh full details on these

562
00:17:28,140 --> 00:17:30,360
attacks are in the white paper and you

563
00:17:30,360 --> 00:17:32,040
can perform a number of these with sem

564
00:17:32,040 --> 00:17:33,120
kit

565
00:17:33,120 --> 00:17:34,559
so just like the others you can do

566
00:17:34,559 --> 00:17:36,299
reconnaissance via the web interface

567
00:17:36,299 --> 00:17:40,559
rest API or sem kit however one thing

568
00:17:40,559 --> 00:17:42,720
that I found was interesting when I was

569
00:17:42,720 --> 00:17:44,400
uh you know testing doing this research

570
00:17:44,400 --> 00:17:46,260
is that this activity is logged in the

571
00:17:46,260 --> 00:17:48,600
bitbucket log however I had to increase

572
00:17:48,600 --> 00:17:50,100
the logging level in order for my

573
00:17:50,100 --> 00:17:52,320
reconnaissance activity to show up so

574
00:17:52,320 --> 00:17:53,880
once I did increase the logging level

575
00:17:53,880 --> 00:17:55,860
you can see there that my queries for

576
00:17:55,860 --> 00:17:57,660
searching for like API Keys whatever I

577
00:17:57,660 --> 00:17:59,280
was performing reconnaissance for was

578
00:17:59,280 --> 00:18:01,440
actually showing up

579
00:18:01,440 --> 00:18:03,419
just like the other two systems if

580
00:18:03,419 --> 00:18:05,280
you're an admin you can promote any user

581
00:18:05,280 --> 00:18:07,260
to admin or demote end user from admin

582
00:18:07,260 --> 00:18:08,640
and you can do this via the web

583
00:18:08,640 --> 00:18:12,419
interface rest API or sem kit

584
00:18:12,419 --> 00:18:13,799
this activity is going to be logged in

585
00:18:13,799 --> 00:18:16,260
both the access log and in the audit log

586
00:18:16,260 --> 00:18:18,660
so you can see there I have a screenshot

587
00:18:18,660 --> 00:18:20,760
kind of showing my user promotion

588
00:18:20,760 --> 00:18:24,500
activity within the access log

589
00:18:24,900 --> 00:18:26,340
so two options for persistence with

590
00:18:26,340 --> 00:18:27,600
bitbucket server you'll notice that

591
00:18:27,600 --> 00:18:29,340
impersonation tokens are missing and

592
00:18:29,340 --> 00:18:30,960
that's because there's not a concept of

593
00:18:30,960 --> 00:18:33,120
impersonation tokens within bitbucket

594
00:18:33,120 --> 00:18:34,559
server you can either create personal

595
00:18:34,559 --> 00:18:36,660
access tokens or SSH Keys as a normal

596
00:18:36,660 --> 00:18:37,980
user and you can do this via the web

597
00:18:37,980 --> 00:18:42,000
interface rest API or SCM kit

598
00:18:42,000 --> 00:18:43,679
and that activity will also be logged in

599
00:18:43,679 --> 00:18:46,080
the access log and audit log I've got a

600
00:18:46,080 --> 00:18:47,700
screenshot there for some of my SSH key

601
00:18:47,700 --> 00:18:49,620
Edition activity just another reminder

602
00:18:49,620 --> 00:18:52,440
all the logs uh for for this activity

603
00:18:52,440 --> 00:18:54,240
and search criteria is all included in

604
00:18:54,240 --> 00:18:55,679
the blog post and the white paper which

605
00:18:55,679 --> 00:18:57,000
I'll have links to at the end of the

606
00:18:57,000 --> 00:18:59,360
presentation

607
00:18:59,520 --> 00:19:01,260
so the last attack for bitbucket server

608
00:19:01,260 --> 00:19:03,660
is around modifying cic pipelines so

609
00:19:03,660 --> 00:19:05,640
similar to gitlab Enterprise but a

610
00:19:05,640 --> 00:19:07,860
little bit different so bitbucket is an

611
00:19:07,860 --> 00:19:10,200
atlassian product uh they all at lasting

612
00:19:10,200 --> 00:19:12,360
also has a product called bamboo and

613
00:19:12,360 --> 00:19:14,880
bamboo can be used as a CI CD pipeline

614
00:19:14,880 --> 00:19:18,539
so if a bit bucket repo is using bamboo

615
00:19:18,539 --> 00:19:20,640
as a CI CD pipeline it's going to have a

616
00:19:20,640 --> 00:19:22,440
bamboo Dash specs directory within the

617
00:19:22,440 --> 00:19:24,240
root of the repository and it's going to

618
00:19:24,240 --> 00:19:25,860
have a configuration file within that

619
00:19:25,860 --> 00:19:27,419
folder so it's either going to have a

620
00:19:27,419 --> 00:19:29,220
yaml file which is bamboo.yaml as you

621
00:19:29,220 --> 00:19:31,020
can see in that screenshot or it's going

622
00:19:31,020 --> 00:19:32,960
to be a Java spec file and it'll be

623
00:19:32,960 --> 00:19:35,220
pom.xml and you're going to need write

624
00:19:35,220 --> 00:19:37,740
or admin access to the repo to modify

625
00:19:37,740 --> 00:19:39,900
that configuration file but once you do

626
00:19:39,900 --> 00:19:41,580
that's going to trigger that pipeline to

627
00:19:41,580 --> 00:19:43,500
run automatically so you can see in the

628
00:19:43,500 --> 00:19:45,120
screenshot there I'm adding some lines

629
00:19:45,120 --> 00:19:46,919
to the bamboo configuration file to

630
00:19:46,919 --> 00:19:48,780
trigger the pipeline

631
00:19:48,780 --> 00:19:50,640
this activity is going to be logged in

632
00:19:50,640 --> 00:19:52,860
the bamboo log on the bamboo server so

633
00:19:52,860 --> 00:19:54,539
you can see a screenshot there of some

634
00:19:54,539 --> 00:19:57,360
of my activity uh updating this file so

635
00:19:57,360 --> 00:19:59,160
again just like gitlab Enterprise any

636
00:19:59,160 --> 00:20:01,679
commits to these CI CD configuration

637
00:20:01,679 --> 00:20:04,380
files should be heavily scrutinized

638
00:20:04,380 --> 00:20:06,600
so as you saw with these three systems

639
00:20:06,600 --> 00:20:08,100
there's a bunch of different things you

640
00:20:08,100 --> 00:20:10,440
can do with the rest API and so I wanted

641
00:20:10,440 --> 00:20:11,880
to create a tool that would help

642
00:20:11,880 --> 00:20:13,440
automate that because I didn't want to

643
00:20:13,440 --> 00:20:14,580
have to keep looking up the API

644
00:20:14,580 --> 00:20:16,320
documentation and doing curl requests

645
00:20:16,320 --> 00:20:18,000
during engagement so that's where sem

646
00:20:18,000 --> 00:20:19,320
kit came about

647
00:20:19,320 --> 00:20:21,059
so sem kit is a source code management

648
00:20:21,059 --> 00:20:23,520
attack toolkit I wrote it in c-sharp so

649
00:20:23,520 --> 00:20:25,320
it can be ran in memory with command

650
00:20:25,320 --> 00:20:27,539
control Frameworks like Cobalt strike I

651
00:20:27,539 --> 00:20:29,580
have the URL there to the tool I just

652
00:20:29,580 --> 00:20:31,620
pushed it this week I also did a full

653
00:20:31,620 --> 00:20:33,539
presentation on the tool at black hat

654
00:20:33,539 --> 00:20:35,640
Arsenal this week as well it supports

655
00:20:35,640 --> 00:20:37,500
attacking GitHub enterprise gitlab

656
00:20:37,500 --> 00:20:39,600
Enterprise and bitbucket server and has

657
00:20:39,600 --> 00:20:41,039
multiple modules for doing things like

658
00:20:41,039 --> 00:20:43,320
reconnaissance privilege escalation and

659
00:20:43,320 --> 00:20:45,240
persistence

660
00:20:45,240 --> 00:20:47,100
so here's an example screenshot of

661
00:20:47,100 --> 00:20:48,900
running sem kit memory you're going to

662
00:20:48,900 --> 00:20:50,700
see these in the demos but this just

663
00:20:50,700 --> 00:20:52,860
shows me using a utility called inline

664
00:20:52,860 --> 00:20:54,720
execute assembly which is developed by a

665
00:20:54,720 --> 00:20:56,520
member of X-Force red as well Sean Jones

666
00:20:56,520 --> 00:20:59,160
to be able to run SCM kit in memory so

667
00:20:59,160 --> 00:21:01,260
here I'm doing a the code search module

668
00:21:01,260 --> 00:21:04,320
searching for API secrets

669
00:21:04,320 --> 00:21:06,480
here's an example of using sem kit to do

670
00:21:06,480 --> 00:21:08,220
privilege escalation on GitHub

671
00:21:08,220 --> 00:21:10,140
Enterprise by at promoting a user to

672
00:21:10,140 --> 00:21:12,299
site admin

673
00:21:12,299 --> 00:21:13,919
and here's an example of doing

674
00:21:13,919 --> 00:21:16,200
persistence in gitlab Enterprise via a

675
00:21:16,200 --> 00:21:18,419
personal access token

676
00:21:18,419 --> 00:21:20,280
so now we're going to do the demos so

677
00:21:20,280 --> 00:21:21,960
first demo I have put together I'm going

678
00:21:21,960 --> 00:21:23,880
to do a software supply chain attack on

679
00:21:23,880 --> 00:21:25,919
GitHub Enterprise second demo I'm going

680
00:21:25,919 --> 00:21:27,240
to do lateral movement from gitlab

681
00:21:27,240 --> 00:21:28,860
Enterprise to artifactory which is a

682
00:21:28,860 --> 00:21:30,720
package repository system and then the

683
00:21:30,720 --> 00:21:31,620
third demo I'm going to show doing

684
00:21:31,620 --> 00:21:33,480
lateral movement from bitbucket server

685
00:21:33,480 --> 00:21:36,020
to Jenkins

686
00:21:49,020 --> 00:21:50,400
okay

687
00:21:50,400 --> 00:21:52,860
so just to set the stage here we have

688
00:21:52,860 --> 00:21:54,539
access to GitHub Enterprise right now as

689
00:21:54,539 --> 00:21:57,360
a compromised user hpotter and we are

690
00:21:57,360 --> 00:21:59,640
interested in gaining uh at modify

691
00:21:59,640 --> 00:22:03,419
access to the wandos repository Wando s

692
00:22:03,419 --> 00:22:05,460
is a fictitious piece of software that

693
00:22:05,460 --> 00:22:06,960
runs on all wands within the Wizarding

694
00:22:06,960 --> 00:22:08,400
World so we want to be able to gain

695
00:22:08,400 --> 00:22:10,919
modify access to this repository so that

696
00:22:10,919 --> 00:22:12,240
we can perform a software supply chain

697
00:22:12,240 --> 00:22:13,679
attack so the first thing we're going to

698
00:22:13,679 --> 00:22:15,480
do with sem kit as our compromised

699
00:22:15,480 --> 00:22:17,460
hpotter user who's just a normal user is

700
00:22:17,460 --> 00:22:19,260
we're going to do the search repo module

701
00:22:19,260 --> 00:22:22,200
with an sem kit searching for wandos

702
00:22:22,200 --> 00:22:23,340
so we're going to go ahead and run this

703
00:22:23,340 --> 00:22:26,600
command within Cobalt strike

704
00:22:26,700 --> 00:22:27,840
I'm going to go ahead and paste this in

705
00:22:27,840 --> 00:22:29,959
here

706
00:22:31,620 --> 00:22:32,520
all right so we're going to run this

707
00:22:32,520 --> 00:22:33,659
command and what you're going to see is

708
00:22:33,659 --> 00:22:35,340
that RH Potter user cannot see the

709
00:22:35,340 --> 00:22:37,380
wandos repository all right so it must

710
00:22:37,380 --> 00:22:38,760
be some sort of like private repository

711
00:22:38,760 --> 00:22:40,080
that we can't see

712
00:22:40,080 --> 00:22:42,299
however as part of this operation we

713
00:22:42,299 --> 00:22:45,179
found an API key on a file share now

714
00:22:45,179 --> 00:22:46,559
during our engagements we commonly find

715
00:22:46,559 --> 00:22:49,140
API keys on user workstations file

716
00:22:49,140 --> 00:22:50,880
shares internal wikis and stuff like

717
00:22:50,880 --> 00:22:53,100
that so we found this API key and we

718
00:22:53,100 --> 00:22:54,600
want to validate this API key and see

719
00:22:54,600 --> 00:22:56,400
what privileges it has so to do that

720
00:22:56,400 --> 00:22:58,200
we're going to use sem kit with the

721
00:22:58,200 --> 00:23:00,120
prism module authenticating with that

722
00:23:00,120 --> 00:23:01,559
API key

723
00:23:01,559 --> 00:23:02,820
so we're going to go ahead and run this

724
00:23:02,820 --> 00:23:04,799
command here and see if this API key is

725
00:23:04,799 --> 00:23:06,299
valid that we found on a file share and

726
00:23:06,299 --> 00:23:08,580
what privileges it has

727
00:23:08,580 --> 00:23:10,320
and what you're going to see here this

728
00:23:10,320 --> 00:23:12,059
API key that we found and this is a

729
00:23:12,059 --> 00:23:13,500
scenario that you know we do during

730
00:23:13,500 --> 00:23:14,880
engagements our adversary simulation

731
00:23:14,880 --> 00:23:16,020
engagements we have actually conducted

732
00:23:16,020 --> 00:23:18,120
this scenario so this has site admin

733
00:23:18,120 --> 00:23:20,340
access so we had the site admin API key

734
00:23:20,340 --> 00:23:22,140
and we have a regular compromise user

735
00:23:22,140 --> 00:23:24,179
hpotter so what we're going to do is

736
00:23:24,179 --> 00:23:26,220
we're going to use sem kit with the add

737
00:23:26,220 --> 00:23:28,440
admin module and that API key and we're

738
00:23:28,440 --> 00:23:30,419
going to promote our compromised hpotter

739
00:23:30,419 --> 00:23:33,299
user to site admin so we're going to run

740
00:23:33,299 --> 00:23:35,900
this command here

741
00:23:39,659 --> 00:23:41,760
and we're going to see is H Potter will

742
00:23:41,760 --> 00:23:43,799
be added to the site admin role

743
00:23:43,799 --> 00:23:45,240
so now if we go back to the GitHub

744
00:23:45,240 --> 00:23:48,659
Enterprise web interface and refresh

745
00:23:48,659 --> 00:23:49,860
what you're going to see is there going

746
00:23:49,860 --> 00:23:50,820
to be there's going to be a rocket ship

747
00:23:50,820 --> 00:23:52,919
show up on the top right and that is the

748
00:23:52,919 --> 00:23:54,360
site admin console within GitHub

749
00:23:54,360 --> 00:23:55,380
Enterprise

750
00:23:55,380 --> 00:23:57,600
so now we have site admin access within

751
00:23:57,600 --> 00:23:59,220
GitHub Enterprise we're going to take a

752
00:23:59,220 --> 00:24:00,659
look at the users and see if there's any

753
00:24:00,659 --> 00:24:02,340
interesting users

754
00:24:02,340 --> 00:24:03,720
this devops user looks pretty

755
00:24:03,720 --> 00:24:05,100
interesting you know we're interested to

756
00:24:05,100 --> 00:24:06,480
see if maybe this user has some private

757
00:24:06,480 --> 00:24:07,980
repositories

758
00:24:07,980 --> 00:24:09,659
so we're going to drill into here this

759
00:24:09,659 --> 00:24:11,700
user has two private repositories so

760
00:24:11,700 --> 00:24:13,679
we're going to check those out

761
00:24:13,679 --> 00:24:15,419
and what you're going to see is that

762
00:24:15,419 --> 00:24:17,159
user devops user actually owns the

763
00:24:17,159 --> 00:24:19,140
wandos repository which is private and

764
00:24:19,140 --> 00:24:20,760
that's why we couldn't see that as our

765
00:24:20,760 --> 00:24:23,760
normal hpotter user so there's two

766
00:24:23,760 --> 00:24:24,900
options here

767
00:24:24,900 --> 00:24:27,120
you can either do a user impersonation

768
00:24:27,120 --> 00:24:29,460
attack to impersonate that user devops

769
00:24:29,460 --> 00:24:31,320
user or what we're going to do is we're

770
00:24:31,320 --> 00:24:33,240
going to do a repository takeover by

771
00:24:33,240 --> 00:24:35,280
unlocking this Repository

772
00:24:35,280 --> 00:24:37,380
so we're going to go ahead unlock this

773
00:24:37,380 --> 00:24:39,360
by default and GitHub Enterprise this

774
00:24:39,360 --> 00:24:41,100
repository is going to be unlocked for

775
00:24:41,100 --> 00:24:42,179
two hours

776
00:24:42,179 --> 00:24:44,159
so you have to provide a reason here and

777
00:24:44,159 --> 00:24:45,600
this is all logged on the GitHub

778
00:24:45,600 --> 00:24:47,100
Enterprise server

779
00:24:47,100 --> 00:24:49,140
so now this this repository the One OS

780
00:24:49,140 --> 00:24:51,360
repository is locked for hpotter so now

781
00:24:51,360 --> 00:24:53,400
we should have full access to the repo

782
00:24:53,400 --> 00:24:56,100
and its code and all of its settings

783
00:24:56,100 --> 00:24:57,720
so now we're going to go back

784
00:24:57,720 --> 00:24:59,760
and you're going to see here that now we

785
00:24:59,760 --> 00:25:03,179
will have access to the Repository

786
00:25:03,179 --> 00:25:04,740
and just to kind of further prove this

787
00:25:04,740 --> 00:25:05,940
we're going to show kind of just with

788
00:25:05,940 --> 00:25:07,799
the get command line tool we can also

789
00:25:07,799 --> 00:25:09,840
clone the repository down as well with

790
00:25:09,840 --> 00:25:12,240
the hpod or user now so kind of this

791
00:25:12,240 --> 00:25:14,460
attack path we were you know a normal

792
00:25:14,460 --> 00:25:16,799
user we found a site admin API key on a

793
00:25:16,799 --> 00:25:18,960
file share we use that API key to

794
00:25:18,960 --> 00:25:20,820
promote our compromised user to site

795
00:25:20,820 --> 00:25:22,919
admin where we performed a repository

796
00:25:22,919 --> 00:25:25,380
takeover on the wand OS repository and

797
00:25:25,380 --> 00:25:26,940
now we can you know modify that software

798
00:25:26,940 --> 00:25:28,860
as part of a software supply chain

799
00:25:28,860 --> 00:25:30,960
attack

800
00:25:30,960 --> 00:25:33,059
the second demo I'm going to show doing

801
00:25:33,059 --> 00:25:34,740
a lateral movement from gitlab

802
00:25:34,740 --> 00:25:36,600
Enterprise to artifactory which is a

803
00:25:36,600 --> 00:25:38,400
package repository system

804
00:25:38,400 --> 00:25:40,260
so as I mentioned in gitlab Enterprise

805
00:25:40,260 --> 00:25:42,480
there's these concepts of gitlab Runners

806
00:25:42,480 --> 00:25:45,000
and they will execute uh instructions in

807
00:25:45,000 --> 00:25:47,159
a gitlab CI configuration file so we're

808
00:25:47,159 --> 00:25:48,360
going to perform reconnaissance with our

809
00:25:48,360 --> 00:25:50,460
compromised user and see if our user has

810
00:25:50,460 --> 00:25:52,919
access to any gitlab runners

811
00:25:52,919 --> 00:25:54,360
so we're first going to do this list

812
00:25:54,360 --> 00:25:57,120
Runner module with SCM kit

813
00:25:57,120 --> 00:25:58,020
so we're going to go ahead and

814
00:25:58,020 --> 00:25:59,940
authenticate here and see if our user

815
00:25:59,940 --> 00:26:01,679
has access to any gitlab runners and

816
00:26:01,679 --> 00:26:03,120
what repositories those Runners are

817
00:26:03,120 --> 00:26:04,500
assigned to

818
00:26:04,500 --> 00:26:05,520
and you're going to see we're going to

819
00:26:05,520 --> 00:26:07,500
get a few a few hits here

820
00:26:07,500 --> 00:26:08,880
um the secret spells directory is the

821
00:26:08,880 --> 00:26:11,279
one we're gonna end up focusing on so we

822
00:26:11,279 --> 00:26:13,200
we have access to some Runners now like

823
00:26:13,200 --> 00:26:14,100
let's go ahead and do some

824
00:26:14,100 --> 00:26:15,600
reconnaissance for that gitlab CI

825
00:26:15,600 --> 00:26:17,220
configuration file and we're going to

826
00:26:17,220 --> 00:26:18,960
cross reference Runners that we have

827
00:26:18,960 --> 00:26:21,659
access to with gitlab CI configuration

828
00:26:21,659 --> 00:26:24,000
files basically repos that have both

829
00:26:24,000 --> 00:26:25,320
and so we're going to do the search File

830
00:26:25,320 --> 00:26:29,520
module search for gitlab.ci with sem kit

831
00:26:29,520 --> 00:26:30,840
and there's going to be a couple hits to

832
00:26:30,840 --> 00:26:32,340
come up but again we're going to focus

833
00:26:32,340 --> 00:26:35,880
on this secret spells directory here

834
00:26:35,880 --> 00:26:37,500
so you can see here the secret spells

835
00:26:37,500 --> 00:26:39,299
directory has the CI configuration file

836
00:26:39,299 --> 00:26:41,760
and it also has a gitlab runner that we

837
00:26:41,760 --> 00:26:43,740
have access to so we're going to go

838
00:26:43,740 --> 00:26:45,480
ahead and go to this repo and try to

839
00:26:45,480 --> 00:26:48,059
modify this configuration file now I'm

840
00:26:48,059 --> 00:26:49,260
doing this via the web interface just

841
00:26:49,260 --> 00:26:50,880
for demo purposes but obviously you can

842
00:26:50,880 --> 00:26:52,320
do this via the git command line tool

843
00:26:52,320 --> 00:26:54,480
and in this environment specifically

844
00:26:54,480 --> 00:26:55,919
what you're going to see is there's some

845
00:26:55,919 --> 00:26:58,440
integration between gitlab and

846
00:26:58,440 --> 00:27:00,419
artifactory so it's basically pushing a

847
00:27:00,419 --> 00:27:02,400
file to artifactory which is a package

848
00:27:02,400 --> 00:27:03,960
repository system

849
00:27:03,960 --> 00:27:05,460
and you can see

850
00:27:05,460 --> 00:27:07,080
what it's doing is it's authenticating

851
00:27:07,080 --> 00:27:08,460
with a username and password for

852
00:27:08,460 --> 00:27:10,980
artifactory to push this file so what we

853
00:27:10,980 --> 00:27:12,480
want is we want to get these credentials

854
00:27:12,480 --> 00:27:14,940
so we're going to modify this

855
00:27:14,940 --> 00:27:17,039
configuration file to print out the

856
00:27:17,039 --> 00:27:18,600
artifactory username and password that

857
00:27:18,600 --> 00:27:20,340
it is being used

858
00:27:20,340 --> 00:27:21,539
so we're going to go ahead and update

859
00:27:21,539 --> 00:27:22,679
this file

860
00:27:22,679 --> 00:27:24,600
and again once you update this CI

861
00:27:24,600 --> 00:27:25,980
configuration file that's going to

862
00:27:25,980 --> 00:27:26,940
trigger the pipeline to run

863
00:27:26,940 --> 00:27:28,260
automatically

864
00:27:28,260 --> 00:27:29,279
so we're going to go ahead and commit

865
00:27:29,279 --> 00:27:31,760
our changes

866
00:27:33,900 --> 00:27:35,220
all right so you're going to see that

867
00:27:35,220 --> 00:27:36,960
it's going to validate that it's that

868
00:27:36,960 --> 00:27:38,580
it's a good configuration file and then

869
00:27:38,580 --> 00:27:40,140
what we're going to do is we're going to

870
00:27:40,140 --> 00:27:42,240
go look at the pipeline

871
00:27:42,240 --> 00:27:44,460
and take a look at our job and make sure

872
00:27:44,460 --> 00:27:46,080
that it ran

873
00:27:46,080 --> 00:27:48,480
and what we should see in our the job

874
00:27:48,480 --> 00:27:50,640
output for our newly modified job with

875
00:27:50,640 --> 00:27:51,900
that configuration file is the

876
00:27:51,900 --> 00:27:54,120
artifactory credentials now why could

877
00:27:54,120 --> 00:27:55,140
this be useful from an attacker

878
00:27:55,140 --> 00:27:56,760
perspective if you have access to

879
00:27:56,760 --> 00:27:58,260
artifactory you know you could upload

880
00:27:58,260 --> 00:27:59,700
malicious packages right that are used

881
00:27:59,700 --> 00:28:02,100
in other projects or that are deployed

882
00:28:02,100 --> 00:28:03,960
so we're going to go ahead you can see

883
00:28:03,960 --> 00:28:06,539
our pipeline ran take a look at our job

884
00:28:06,539 --> 00:28:08,940
and we're going to view the job output

885
00:28:08,940 --> 00:28:10,080
and what you're going to see in the

886
00:28:10,080 --> 00:28:12,000
bottom there is it did print out the

887
00:28:12,000 --> 00:28:13,140
credentials that was being that were

888
00:28:13,140 --> 00:28:14,820
being used so the artifactor username

889
00:28:14,820 --> 00:28:16,320
and the password

890
00:28:16,320 --> 00:28:17,640
so we're going to go ahead and validate

891
00:28:17,640 --> 00:28:18,720
these credentials by logging into

892
00:28:18,720 --> 00:28:20,880
artifactory let's go log in here with

893
00:28:20,880 --> 00:28:23,279
the admin username

894
00:28:23,279 --> 00:28:25,620
also if you haven't noticed uh my lab

895
00:28:25,620 --> 00:28:27,480
I'm a big Harry Potter nerd so that's

896
00:28:27,480 --> 00:28:29,220
why I've got uh all this you know

897
00:28:29,220 --> 00:28:31,380
Hogwarts Hogwarts stuff set up so I'm a

898
00:28:31,380 --> 00:28:33,360
huge Harry Potter nerd

899
00:28:33,360 --> 00:28:34,799
so you can see here we have access to

900
00:28:34,799 --> 00:28:36,360
artifactory where again now we have

901
00:28:36,360 --> 00:28:38,100
access we can upload malicious packages

902
00:28:38,100 --> 00:28:39,840
uh you know we kind of completed that

903
00:28:39,840 --> 00:28:41,100
lateral movement from gitlab Enterprise

904
00:28:41,100 --> 00:28:44,240
to artifactory

905
00:28:44,340 --> 00:28:46,200
last demo I'm going to show is doing

906
00:28:46,200 --> 00:28:47,700
lateral movement from bitbucket server

907
00:28:47,700 --> 00:28:49,200
to Jenkins

908
00:28:49,200 --> 00:28:53,299
so Jenkins is a build system cicd system

909
00:28:53,299 --> 00:28:56,279
and Jenkins can be used obviously to

910
00:28:56,279 --> 00:28:57,960
build applications so if there's an

911
00:28:57,960 --> 00:29:00,120
integration set up between a source code

912
00:29:00,120 --> 00:29:01,980
management system and Jenkins it will

913
00:29:01,980 --> 00:29:02,880
run what's called a Jenkins

914
00:29:02,880 --> 00:29:04,919
configuration file right in a source

915
00:29:04,919 --> 00:29:06,840
code management repository and that name

916
00:29:06,840 --> 00:29:08,100
of that configuration file is going to

917
00:29:08,100 --> 00:29:10,260
be Jenkins file so what we're doing with

918
00:29:10,260 --> 00:29:12,179
our compromised user is we're using SCM

919
00:29:12,179 --> 00:29:14,100
kit and we're searching for any Jenkins

920
00:29:14,100 --> 00:29:16,200
CI configurations file with the search

921
00:29:16,200 --> 00:29:19,020
File module searching for Jenkins file

922
00:29:19,020 --> 00:29:20,159
so we're gonna go ahead and run this

923
00:29:20,159 --> 00:29:22,520
search here

924
00:29:25,860 --> 00:29:26,880
and you're going to see a couple

925
00:29:26,880 --> 00:29:28,919
instances pop up we're going to focus on

926
00:29:28,919 --> 00:29:30,779
this Marauders map app directory so

927
00:29:30,779 --> 00:29:32,460
we're going to go to this Marauders map

928
00:29:32,460 --> 00:29:35,039
app repo and try to modify this Jenkins

929
00:29:35,039 --> 00:29:36,899
CI configuration file

930
00:29:36,899 --> 00:29:39,659
now our goal here with this file so when

931
00:29:39,659 --> 00:29:42,120
Jenkins runs the cic CI CD configuration

932
00:29:42,120 --> 00:29:44,220
file it runs on the Jenkins server

933
00:29:44,220 --> 00:29:46,559
itself so what we're interested in is we

934
00:29:46,559 --> 00:29:47,640
want to perform lateral movement to

935
00:29:47,640 --> 00:29:49,559
Jenkins so what we're going to do in

936
00:29:49,559 --> 00:29:51,539
this configuration file and again I'm

937
00:29:51,539 --> 00:29:52,740
doing this in the web interface you

938
00:29:52,740 --> 00:29:54,000
could do it via the git command line

939
00:29:54,000 --> 00:29:55,799
tool as well what we're going to do is

940
00:29:55,799 --> 00:29:57,480
we're going to have it execute some

941
00:29:57,480 --> 00:30:00,179
commands to add our public SSH key to

942
00:30:00,179 --> 00:30:01,919
the authorized Keys file for the Jenkins

943
00:30:01,919 --> 00:30:05,159
user account that way we can SSH to the

944
00:30:05,159 --> 00:30:07,140
Jenkins server as a Jenkins user account

945
00:30:07,140 --> 00:30:09,539
now this can be prevented on the Jenkins

946
00:30:09,539 --> 00:30:10,980
side if you have like sandboxing in

947
00:30:10,980 --> 00:30:12,899
place for groovy scripting

948
00:30:12,899 --> 00:30:14,580
so I'm going to go ahead and update this

949
00:30:14,580 --> 00:30:16,980
Jenkins file and you know typically like

950
00:30:16,980 --> 00:30:18,480
in a real world environment like during

951
00:30:18,480 --> 00:30:20,279
engagements you just you know kind of

952
00:30:20,279 --> 00:30:21,600
let you know Jenkins run on whatever

953
00:30:21,600 --> 00:30:23,220
schedule it's running on to pull the

954
00:30:23,220 --> 00:30:25,080
updated configuration file especially if

955
00:30:25,080 --> 00:30:26,220
you haven't compromised the Jenkins

956
00:30:26,220 --> 00:30:27,240
server

957
00:30:27,240 --> 00:30:28,919
um for this case in this demo I'm just

958
00:30:28,919 --> 00:30:30,960
going to run this Jenkins job manually

959
00:30:30,960 --> 00:30:32,880
um so that we can see the results

960
00:30:32,880 --> 00:30:34,140
so we're going to go ahead and run this

961
00:30:34,140 --> 00:30:35,940
Jenkins job and again it's going to pull

962
00:30:35,940 --> 00:30:38,039
that updated Jenkins CI configuration

963
00:30:38,039 --> 00:30:41,100
file from that repository and run it and

964
00:30:41,100 --> 00:30:42,360
it's going to run the actions that we

965
00:30:42,360 --> 00:30:43,559
just put in there so it's going to run

966
00:30:43,559 --> 00:30:45,720
who am I the host name and then add our

967
00:30:45,720 --> 00:30:48,059
public SSH key from our our private

968
00:30:48,059 --> 00:30:49,799
public SSH key pair

969
00:30:49,799 --> 00:30:52,320
to the authorized Keys file so you can

970
00:30:52,320 --> 00:30:54,240
see there that that ran

971
00:30:54,240 --> 00:30:56,760
so now we should be able to SSH to the

972
00:30:56,760 --> 00:30:58,620
Jenkins server as the Jenkins user

973
00:30:58,620 --> 00:31:00,179
account

974
00:31:00,179 --> 00:31:01,440
so we're gonna go ahead and SSH here

975
00:31:01,440 --> 00:31:03,960
with our our Associated private SSH key

976
00:31:03,960 --> 00:31:06,299
with the public SSH key we added and you

977
00:31:06,299 --> 00:31:08,640
can see there we've successfully pivoted

978
00:31:08,640 --> 00:31:11,340
from uh from over to Jenkins from

979
00:31:11,340 --> 00:31:13,620
bitbucket so this kind of shows an

980
00:31:13,620 --> 00:31:15,419
example of being able to take take

981
00:31:15,419 --> 00:31:16,860
advantage of those Integrations with

982
00:31:16,860 --> 00:31:18,659
source code Management Systems to Pivot

983
00:31:18,659 --> 00:31:21,500
to build systems

984
00:31:27,539 --> 00:31:30,659
so defensive considerations for the sem

985
00:31:30,659 --> 00:31:32,880
kit tool itself I have a yarrow file

986
00:31:32,880 --> 00:31:35,039
within the repository with status static

987
00:31:35,039 --> 00:31:36,299
signatures that you can apply for

988
00:31:36,299 --> 00:31:37,980
attackers if they were to use this Tool

989
00:31:37,980 --> 00:31:40,260
uh in its default State I also have a

990
00:31:40,260 --> 00:31:41,640
static user agent string within the tool

991
00:31:41,640 --> 00:31:44,340
so that you have I have listed there now

992
00:31:44,340 --> 00:31:45,960
the reason for this is again to detect

993
00:31:45,960 --> 00:31:48,120
activity with this tool so I have a

994
00:31:48,120 --> 00:31:49,620
snort rule that's including the sem kit

995
00:31:49,620 --> 00:31:51,299
repo for this additionally in your web

996
00:31:51,299 --> 00:31:53,940
proxies you can add rules for this user

997
00:31:53,940 --> 00:31:55,080
agent string

998
00:31:55,080 --> 00:31:58,080
lastly any access tokens or SSH keys

999
00:31:58,080 --> 00:32:01,500
that are created with sem kit the names

1000
00:32:01,500 --> 00:32:03,360
are going to be prepended with SCM kit

1001
00:32:03,360 --> 00:32:05,159
Dash so you can put rules in your source

1002
00:32:05,159 --> 00:32:07,260
code Management Systems to detect any

1003
00:32:07,260 --> 00:32:09,539
access tokens or SSH keys that are

1004
00:32:09,539 --> 00:32:10,740
created with this in the beginning of

1005
00:32:10,740 --> 00:32:12,980
the name

1006
00:32:13,080 --> 00:32:14,580
I'm not going to get into these logs and

1007
00:32:14,580 --> 00:32:16,080
the log filters and details just because

1008
00:32:16,080 --> 00:32:18,419
again they're included within the blog

1009
00:32:18,419 --> 00:32:21,179
post and in the white paper but for

1010
00:32:21,179 --> 00:32:22,980
GitHub Enterprise make sure you get

1011
00:32:22,980 --> 00:32:26,700
these three logs forwarded to your sim

1012
00:32:26,700 --> 00:32:28,140
and then I've got some rules that you

1013
00:32:28,140 --> 00:32:30,179
can apply to detect the activity that I

1014
00:32:30,179 --> 00:32:33,299
showed today within GitHub Enterprise

1015
00:32:33,299 --> 00:32:35,399
for gitlab Enterprise make sure you get

1016
00:32:35,399 --> 00:32:37,919
your application log production log API

1017
00:32:37,919 --> 00:32:41,419
log and web log forward to your sim

1018
00:32:43,740 --> 00:32:45,299
and then make sure you get these rules

1019
00:32:45,299 --> 00:32:46,980
applied for the activity I showed all

1020
00:32:46,980 --> 00:32:48,600
the way you know reconnaissance user

1021
00:32:48,600 --> 00:32:49,620
impersonation all those different

1022
00:32:49,620 --> 00:32:51,899
attacks that I showed

1023
00:32:51,899 --> 00:32:54,299
lastly with bitbucket server make sure

1024
00:32:54,299 --> 00:32:56,399
you get the access log audit log and

1025
00:32:56,399 --> 00:32:58,860
bitbucket log forward to your sim and

1026
00:32:58,860 --> 00:33:00,240
then on the bamboo server make sure you

1027
00:33:00,240 --> 00:33:01,620
have your bamboo log for it to your sim

1028
00:33:01,620 --> 00:33:03,299
as well

1029
00:33:03,299 --> 00:33:05,460
again all these rules for all of these

1030
00:33:05,460 --> 00:33:07,260
and all the logs you need to forward to

1031
00:33:07,260 --> 00:33:09,480
your to your sim they're all included in

1032
00:33:09,480 --> 00:33:12,240
the blog post and the white paper

1033
00:33:12,240 --> 00:33:13,919
in terms of configuration guidance

1034
00:33:13,919 --> 00:33:15,539
across the board for source code

1035
00:33:15,539 --> 00:33:17,399
Management Systems in terms of personal

1036
00:33:17,399 --> 00:33:19,679
access tokens and SSH Keys make sure

1037
00:33:19,679 --> 00:33:21,179
that you set an automatic expiration

1038
00:33:21,179 --> 00:33:22,919
date and don't allow users to create

1039
00:33:22,919 --> 00:33:25,740
these with no expiration date think of

1040
00:33:25,740 --> 00:33:27,059
these like passwords like we have

1041
00:33:27,059 --> 00:33:29,039
expiration dates for passwords so we

1042
00:33:29,039 --> 00:33:30,480
should do the same thing for Access

1043
00:33:30,480 --> 00:33:33,000
tokens and SSH keys in terms of access

1044
00:33:33,000 --> 00:33:34,980
and authorization limit the number of

1045
00:33:34,980 --> 00:33:36,179
administrator accounts Within These

1046
00:33:36,179 --> 00:33:38,580
systems you know at maximum or at

1047
00:33:38,580 --> 00:33:39,779
minimum there needs to be two you need

1048
00:33:39,779 --> 00:33:41,760
to have a primary admin and a backup but

1049
00:33:41,760 --> 00:33:42,779
there shouldn't be more unless

1050
00:33:42,779 --> 00:33:44,760
absolutely necessary you know the more

1051
00:33:44,760 --> 00:33:46,799
admin users the more attack surface for

1052
00:33:46,799 --> 00:33:47,880
an attacker

1053
00:33:47,880 --> 00:33:49,799
make sure you enable multi-factor

1054
00:33:49,799 --> 00:33:52,500
authentication and lastly disable user

1055
00:33:52,500 --> 00:33:53,940
impersonation as you saw I took

1056
00:33:53,940 --> 00:33:55,860
advantage of that that feature within

1057
00:33:55,860 --> 00:33:59,100
GitHub Enterprise and gitlab Enterprise

1058
00:33:59,100 --> 00:34:01,019
in terms of repository access and code

1059
00:34:01,019 --> 00:34:02,159
commits

1060
00:34:02,159 --> 00:34:03,899
operate on a policy of least privilege

1061
00:34:03,899 --> 00:34:05,580
so don't just give everybody access to

1062
00:34:05,580 --> 00:34:07,799
all repositories additionally make sure

1063
00:34:07,799 --> 00:34:09,839
that you delete code branches in a

1064
00:34:09,839 --> 00:34:11,399
sufficient time so I've seen time and

1065
00:34:11,399 --> 00:34:13,500
time again where a developer will create

1066
00:34:13,500 --> 00:34:15,239
some sort of like testing code Branch

1067
00:34:15,239 --> 00:34:17,339
they'll commit credentials to it and

1068
00:34:17,339 --> 00:34:19,080
kind of leave it left over for our red

1069
00:34:19,080 --> 00:34:20,699
team to find

1070
00:34:20,699 --> 00:34:23,099
like additionally whenever users are

1071
00:34:23,099 --> 00:34:25,260
making code commits require at least one

1072
00:34:25,260 --> 00:34:26,699
approver for that commit so they can

1073
00:34:26,699 --> 00:34:27,899
actually review to make sure there was

1074
00:34:27,899 --> 00:34:29,760
nothing malicious in that commit and

1075
00:34:29,760 --> 00:34:32,280
require sign commits either via gpg keys

1076
00:34:32,280 --> 00:34:34,139
or certificates

1077
00:34:34,139 --> 00:34:36,780
in terms of logging so you saw I showed

1078
00:34:36,780 --> 00:34:37,918
a bunch of different logs that you can

1079
00:34:37,918 --> 00:34:39,418
use and some different detection rules

1080
00:34:39,418 --> 00:34:41,219
so make sure that you get those logs

1081
00:34:41,219 --> 00:34:43,800
that I have forwarded to your sim and

1082
00:34:43,800 --> 00:34:45,119
additionally as you saw with you know

1083
00:34:45,119 --> 00:34:46,679
systems like bitbucket server I had to

1084
00:34:46,679 --> 00:34:48,239
increase the logging level to detect

1085
00:34:48,239 --> 00:34:50,040
that reconnaissance activity so increase

1086
00:34:50,040 --> 00:34:53,719
the logging level when needed as well

1087
00:34:53,879 --> 00:34:57,180
so in conclusion you know these systems

1088
00:34:57,180 --> 00:34:58,800
they contain some of the most you know

1089
00:34:58,800 --> 00:35:00,420
sensitive information organizations and

1090
00:35:00,420 --> 00:35:02,280
they're really a critical critical piece

1091
00:35:02,280 --> 00:35:04,200
to organizations and a key component in

1092
00:35:04,200 --> 00:35:06,420
the devops like life cycle where

1093
00:35:06,420 --> 00:35:08,099
attackers are really focusing on these

1094
00:35:08,099 --> 00:35:10,079
more and more because again software

1095
00:35:10,079 --> 00:35:11,339
runs on practically everything today

1096
00:35:11,339 --> 00:35:13,440
between our cars Traffic Control Systems

1097
00:35:13,440 --> 00:35:15,420
Right medical devices right so these

1098
00:35:15,420 --> 00:35:16,980
systems are very important

1099
00:35:16,980 --> 00:35:18,540
depending on the organization right

1100
00:35:18,540 --> 00:35:20,280
compromise of a source code management

1101
00:35:20,280 --> 00:35:22,440
system in one organization could lead to

1102
00:35:22,440 --> 00:35:25,260
compromise within another organization

1103
00:35:25,260 --> 00:35:27,720
and then lastly you know these systems

1104
00:35:27,720 --> 00:35:29,520
they really do need more visibility and

1105
00:35:29,520 --> 00:35:30,660
they need more research from the

1106
00:35:30,660 --> 00:35:32,820
community so kind of a call to action to

1107
00:35:32,820 --> 00:35:34,920
you all is to you know I really hope to

1108
00:35:34,920 --> 00:35:36,960
see future research and somebody take

1109
00:35:36,960 --> 00:35:38,640
this research to the next level to

1110
00:35:38,640 --> 00:35:41,520
further defend these systems

1111
00:35:41,520 --> 00:35:43,500
before I wrap up here I just have some

1112
00:35:43,500 --> 00:35:45,720
acknowledgments uh without these people

1113
00:35:45,720 --> 00:35:47,579
they supported me through this entire

1114
00:35:47,579 --> 00:35:50,099
research project and gave me tons of

1115
00:35:50,099 --> 00:35:52,020
really great feedback uh without them I

1116
00:35:52,020 --> 00:35:53,940
would not be standing here today so I

1117
00:35:53,940 --> 00:35:55,560
want to thank Chris Thompson Daniel

1118
00:35:55,560 --> 00:35:58,500
Crowley Dimitri Patrick Fussell and

1119
00:35:58,500 --> 00:36:01,280
Reuben boonen

1120
00:36:01,500 --> 00:36:04,260
so as I mentioned the blog post and the

1121
00:36:04,260 --> 00:36:06,300
white paper URL I'll leave this up here

1122
00:36:06,300 --> 00:36:07,980
that's got the white paper's gonna have

1123
00:36:07,980 --> 00:36:09,240
full details on what I talked about

1124
00:36:09,240 --> 00:36:11,880
today if you have any questions feel

1125
00:36:11,880 --> 00:36:14,220
free to hit me up on Twitter or Discord

1126
00:36:14,220 --> 00:36:16,079
or come talk to me after on the hallway

1127
00:36:16,079 --> 00:36:19,320
I'm happy to answer anybody's questions

1128
00:36:19,320 --> 00:36:21,180
uh with that that's it and I thank you

1129
00:36:21,180 --> 00:36:22,260
very much

1130
00:36:22,260 --> 00:36:24,180
[Applause]

1131
00:36:24,180 --> 00:36:27,290
[Music]

1132
00:36:31,130 --> 00:36:34,239
[Music]

