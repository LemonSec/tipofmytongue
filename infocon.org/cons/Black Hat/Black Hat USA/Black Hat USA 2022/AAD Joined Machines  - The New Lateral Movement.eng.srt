1
00:00:01,730 --> 00:00:03,720
[Music]

2
00:00:03,720 --> 00:00:06,720
foreign

3
00:00:10,019 --> 00:00:13,620
thank you okay so welcome to my session

4
00:00:13,620 --> 00:00:15,960
as already mentioned my name is Mo Rubin

5
00:00:15,960 --> 00:00:17,520
and I am a senior security associate

6
00:00:17,520 --> 00:00:20,039
Microsoft I'm mostly interested in

7
00:00:20,039 --> 00:00:21,720
finding new attack vectors in the

8
00:00:21,720 --> 00:00:23,820
on-prem cloud and which are mostly

9
00:00:23,820 --> 00:00:27,240
related to networking so we

10
00:00:27,240 --> 00:00:29,640
and in this session we are going to show

11
00:00:29,640 --> 00:00:32,058
a new way to perform lateral movement

12
00:00:32,058 --> 00:00:34,920
which involves a bit of on-prem a bit of

13
00:00:34,920 --> 00:00:37,920
cloud and mostly networking so the

14
00:00:37,920 --> 00:00:39,780
agenda for today we will first go over

15
00:00:39,780 --> 00:00:42,780
the introduction to the key terms we'll

16
00:00:42,780 --> 00:00:44,760
go over some things that you might

17
00:00:44,760 --> 00:00:46,559
already know just to make sure we are

18
00:00:46,559 --> 00:00:49,140
all on the same page later on this

19
00:00:49,140 --> 00:00:51,000
information will help us understand a

20
00:00:51,000 --> 00:00:53,520
bit more about the main topic for today

21
00:00:53,520 --> 00:00:55,680
which is negox which is the new

22
00:00:55,680 --> 00:00:58,559
Authentication Protocol for Azure ID

23
00:00:58,559 --> 00:01:01,320
joint devices later on we will see a

24
00:01:01,320 --> 00:01:03,120
couple of attacks that allow us to

25
00:01:03,120 --> 00:01:05,060
perform lateral movement to another

26
00:01:05,060 --> 00:01:08,040
devices then we will demo one of the

27
00:01:08,040 --> 00:01:10,799
attacks and see how we can hand follow

28
00:01:10,799 --> 00:01:13,560
them and finish with takeaways from this

29
00:01:13,560 --> 00:01:14,520
session

30
00:01:14,520 --> 00:01:16,140
so let's start with the technical

31
00:01:16,140 --> 00:01:17,220
background

32
00:01:17,220 --> 00:01:19,799
our first topic will be Azure ID joint

33
00:01:19,799 --> 00:01:22,200
device as you may already know Azure

34
00:01:22,200 --> 00:01:24,060
Edition device is a device which is

35
00:01:24,060 --> 00:01:26,460
connected directly to Azure ID and it's

36
00:01:26,460 --> 00:01:29,280
managed by Azure ID in the case of azure

37
00:01:29,280 --> 00:01:30,720
ID join device

38
00:01:30,720 --> 00:01:33,600
only Azure ID accounts can log into this

39
00:01:33,600 --> 00:01:34,860
device

40
00:01:34,860 --> 00:01:38,820
and there are no local users by default

41
00:01:38,820 --> 00:01:41,159
you can obviously add them but by

42
00:01:41,159 --> 00:01:42,780
default they does not exist on the

43
00:01:42,780 --> 00:01:45,060
account on the computer so only Azure

44
00:01:45,060 --> 00:01:47,579
the accounts can log in

45
00:01:47,579 --> 00:01:50,880
and the main two differences between the

46
00:01:50,880 --> 00:01:54,000
on-prem Azure active directory joined

47
00:01:54,000 --> 00:01:57,299
and to Azure active directory join first

48
00:01:57,299 --> 00:02:01,200
the how you query the organization and

49
00:02:01,200 --> 00:02:03,600
active directory you mostly use ldap to

50
00:02:03,600 --> 00:02:05,460
query the domain controller to get

51
00:02:05,460 --> 00:02:07,860
information about the entities and

52
00:02:07,860 --> 00:02:10,440
groups and so on in the in the active

53
00:02:10,440 --> 00:02:12,420
directory while in Azure active

54
00:02:12,420 --> 00:02:15,120
directory you'll mostly use graph API or

55
00:02:15,120 --> 00:02:18,480
rest API calls to query Azure for

56
00:02:18,480 --> 00:02:20,879
information about your organization the

57
00:02:20,879 --> 00:02:22,080
second main difference is the

58
00:02:22,080 --> 00:02:24,780
authentication protocols while in active

59
00:02:24,780 --> 00:02:26,700
director with authentication Protocols

60
00:02:26,700 --> 00:02:29,840
are known ntlm and Kerberos in Android

61
00:02:29,840 --> 00:02:32,700
Authentication Protocol saml or what

62
00:02:32,700 --> 00:02:35,459
open ID and networks which will be your

63
00:02:35,459 --> 00:02:37,500
main topic for today

64
00:02:37,500 --> 00:02:40,500
a side note I am going to I'm not going

65
00:02:40,500 --> 00:02:44,040
to talk about hybrid devices are

66
00:02:44,040 --> 00:02:46,500
connected to both Azure ID and to the

67
00:02:46,500 --> 00:02:48,540
on-prem everything I'm going to show is

68
00:02:48,540 --> 00:02:51,300
applicable to iBall devices too but

69
00:02:51,300 --> 00:02:54,239
since it's the same and you already know

70
00:02:54,239 --> 00:02:56,160
how to perform lateral movement in a

71
00:02:56,160 --> 00:02:58,019
domain environment then I will not talk

72
00:02:58,019 --> 00:03:00,480
directly about hybrid but only to Azure

73
00:03:00,480 --> 00:03:02,640
ID join devices

74
00:03:02,640 --> 00:03:05,099
so when talking about Azure ID join

75
00:03:05,099 --> 00:03:06,720
device it's important to understand the

76
00:03:06,720 --> 00:03:08,580
authenticated connections

77
00:03:08,580 --> 00:03:10,739
we have two main scenarios the first

78
00:03:10,739 --> 00:03:12,420
scenario is when you want to

79
00:03:12,420 --> 00:03:14,879
authenticate to SAS application in this

80
00:03:14,879 --> 00:03:16,800
case we will use something called a PLT

81
00:03:16,800 --> 00:03:18,540
so for example when we want to

82
00:03:18,540 --> 00:03:21,840
authenticate to SharePoint online we

83
00:03:21,840 --> 00:03:24,239
will use the PLT to exchange for an

84
00:03:24,239 --> 00:03:26,159
access token and get access to the

85
00:03:26,159 --> 00:03:28,260
specific application and the second

86
00:03:28,260 --> 00:03:30,659
scenario is where we are sitting on an

87
00:03:30,659 --> 00:03:32,459
Azure ID join device and we want to

88
00:03:32,459 --> 00:03:34,739
authenticate to another Azure ID join

89
00:03:34,739 --> 00:03:36,540
device in this case we will use

90
00:03:36,540 --> 00:03:38,400
something new which called P2P

91
00:03:38,400 --> 00:03:40,680
certificate or peer-to-peer certificate

92
00:03:40,680 --> 00:03:44,099
this certificate is issued by using the

93
00:03:44,099 --> 00:03:45,299
PLT

94
00:03:45,299 --> 00:03:48,299
and we will show a bit later how we can

95
00:03:48,299 --> 00:03:49,860
get this one

96
00:03:49,860 --> 00:03:52,140
so first let's understand what the

97
00:03:52,140 --> 00:03:54,420
probability is reality as I mentioned is

98
00:03:54,420 --> 00:03:57,959
a primary refresh token and this is a

99
00:03:57,959 --> 00:04:00,360
Json web token which contains claim on

100
00:04:00,360 --> 00:04:02,099
both the device and the user it was

101
00:04:02,099 --> 00:04:04,620
issued for it means that if a user is

102
00:04:04,620 --> 00:04:07,019
connected to two devices then every

103
00:04:07,019 --> 00:04:10,620
device for this same session of the user

104
00:04:10,620 --> 00:04:12,720
every device will have a different PLT

105
00:04:12,720 --> 00:04:15,299
and same four devices if two device two

106
00:04:15,299 --> 00:04:16,858
users are connected to the same device

107
00:04:16,858 --> 00:04:19,738
same will be a here and we will have two

108
00:04:19,738 --> 00:04:21,899
different plts even though it's the same

109
00:04:21,899 --> 00:04:23,340
device

110
00:04:23,340 --> 00:04:27,000
and this PRT can be compared to TGT the

111
00:04:27,000 --> 00:04:29,699
cadient ticket in the on them

112
00:04:29,699 --> 00:04:32,040
well if you have the PLT and the session

113
00:04:32,040 --> 00:04:34,680
key bound to the specific PRT it means

114
00:04:34,680 --> 00:04:36,540
that you are authenticated and this

115
00:04:36,540 --> 00:04:38,699
session key which is bound to the

116
00:04:38,699 --> 00:04:40,740
Penalty proves that you have the

117
00:04:40,740 --> 00:04:42,240
authentication material and you don't

118
00:04:42,240 --> 00:04:44,880
need to authenticate again so

119
00:04:44,880 --> 00:04:48,180
it's the same as digital way that TGT is

120
00:04:48,180 --> 00:04:50,400
being used to exchange for ticket for

121
00:04:50,400 --> 00:04:52,620
the results in TGs

122
00:04:52,620 --> 00:04:54,600
and the penalties can be exchanged for

123
00:04:54,600 --> 00:04:56,580
an access token to access the specific

124
00:04:56,580 --> 00:04:59,220
application or in our case it will be

125
00:04:59,220 --> 00:05:02,639
used to get a P2P certificate which will

126
00:05:02,639 --> 00:05:05,340
be used to access another Azure Edition

127
00:05:05,340 --> 00:05:06,479
device

128
00:05:06,479 --> 00:05:07,800
so

129
00:05:07,800 --> 00:05:10,020
I already mentioned a couple of times so

130
00:05:10,020 --> 00:05:12,240
P2P actually this certificate is a

131
00:05:12,240 --> 00:05:14,639
special certificate which is issued by

132
00:05:14,639 --> 00:05:17,639
Azure as you can see

133
00:05:17,639 --> 00:05:22,100
the the issuer is azure ID

134
00:05:22,100 --> 00:05:25,199
it's Ms organization P2P access so it

135
00:05:25,199 --> 00:05:28,440
means that it's only Azure ID the one

136
00:05:28,440 --> 00:05:30,360
who can issue the issue those

137
00:05:30,360 --> 00:05:32,880
certificates and it's issued for a

138
00:05:32,880 --> 00:05:35,699
specific user and the user is the one

139
00:05:35,699 --> 00:05:39,660
who the PRT is related to so I cannot

140
00:05:39,660 --> 00:05:42,600
use PLT to get a certificate for another

141
00:05:42,600 --> 00:05:45,360
user but only to the user which is bound

142
00:05:45,360 --> 00:05:48,000
to the specific parity and this parity

143
00:05:48,000 --> 00:05:50,759
is valid for one hour only and is used

144
00:05:50,759 --> 00:05:53,960
to access any Azure ID device

145
00:05:53,960 --> 00:05:56,340
in case only if you have permission

146
00:05:56,340 --> 00:05:57,900
obviously

147
00:05:57,900 --> 00:06:00,720
and you once your device is joined to

148
00:06:00,720 --> 00:06:02,520
Azure ID by default it will be

149
00:06:02,520 --> 00:06:04,560
configured to request a new certificate

150
00:06:04,560 --> 00:06:06,900
every time it's needed so you don't

151
00:06:06,900 --> 00:06:08,639
really have to do anything every time

152
00:06:08,639 --> 00:06:10,800
you want to access another Azure ID

153
00:06:10,800 --> 00:06:13,380
device a new P2P certificate will be

154
00:06:13,380 --> 00:06:14,639
issued for you

155
00:06:14,639 --> 00:06:16,440
so now that we have a good understanding

156
00:06:16,440 --> 00:06:18,180
of the authentication materials let's

157
00:06:18,180 --> 00:06:20,340
dive into the authentication protocols

158
00:06:20,340 --> 00:06:23,100
that will help us and be used later in

159
00:06:23,100 --> 00:06:25,560
Network's protocol so our first protocol

160
00:06:25,560 --> 00:06:28,139
is cable speaking so a couple of words

161
00:06:28,139 --> 00:06:30,060
about cables as you may already know

162
00:06:30,060 --> 00:06:32,160
cables is an Authentication Protocol in

163
00:06:32,160 --> 00:06:34,560
the on-prem which uses tickets for

164
00:06:34,560 --> 00:06:37,199
authentication and it have six steps the

165
00:06:37,199 --> 00:06:39,600
first step is the as request in this

166
00:06:39,600 --> 00:06:41,580
step the client you send something

167
00:06:41,580 --> 00:06:44,220
called pre-authentication data which is

168
00:06:44,220 --> 00:06:46,440
a timestamp lobe encrypted

169
00:06:46,440 --> 00:06:49,319
by the hash password of the user

170
00:06:49,319 --> 00:06:52,560
this this data is later checked by the

171
00:06:52,560 --> 00:06:55,080
DC and by the KDC with the key

172
00:06:55,080 --> 00:06:58,259
distribution center which verifies the

173
00:06:58,259 --> 00:07:00,600
timestamp log it decrypts it using the

174
00:07:00,600 --> 00:07:03,000
hash password which stores and in its

175
00:07:03,000 --> 00:07:05,759
database and if it's accurate then the

176
00:07:05,759 --> 00:07:08,819
KDC will provide a TGT the academic

177
00:07:08,819 --> 00:07:11,460
ticket and the session key

178
00:07:11,460 --> 00:07:14,639
and later on those TGT and session key

179
00:07:14,639 --> 00:07:16,860
will be used in a tgsa quest together

180
00:07:16,860 --> 00:07:18,780
with the resource you want to access to

181
00:07:18,780 --> 00:07:21,360
and the KDC will validate them again and

182
00:07:21,360 --> 00:07:23,220
will issue a TGs which is a ticket

183
00:07:23,220 --> 00:07:25,380
granting server service with a new

184
00:07:25,380 --> 00:07:27,599
session key which allows you to now

185
00:07:27,599 --> 00:07:29,819
access to your specific resource that

186
00:07:29,819 --> 00:07:32,160
you wanted to access using a cables AP

187
00:07:32,160 --> 00:07:33,440
request

188
00:07:33,440 --> 00:07:36,360
and later on the client the resource you

189
00:07:36,360 --> 00:07:38,340
access to will responds with the cables

190
00:07:38,340 --> 00:07:41,460
AP response with an arrow or successful

191
00:07:41,460 --> 00:07:42,960
Authentication

192
00:07:42,960 --> 00:07:45,180
and in cable speaker unit the main

193
00:07:45,180 --> 00:07:48,000
difference is in the two first messages

194
00:07:48,000 --> 00:07:50,300
in the cable sales request and there is

195
00:07:50,300 --> 00:07:54,419
response the this this extension allows

196
00:07:54,419 --> 00:07:56,880
you to use certificates to authenticate

197
00:07:56,880 --> 00:07:59,940
to another to your domain instead of

198
00:07:59,940 --> 00:08:01,919
using the old hashed password so in this

199
00:08:01,919 --> 00:08:04,380
case the pre-authentication data in the

200
00:08:04,380 --> 00:08:06,660
S request will be changed in a way that

201
00:08:06,660 --> 00:08:09,360
instead of using your hash password to

202
00:08:09,360 --> 00:08:13,259
to encrypt the the timestamp instead you

203
00:08:13,259 --> 00:08:16,380
will use your certificate your private

204
00:08:16,380 --> 00:08:18,900
key to sign a specific blob which called

205
00:08:18,900 --> 00:08:21,240
the PK authenticator and you will send

206
00:08:21,240 --> 00:08:23,879
it to the DC the DC will validate the

207
00:08:23,879 --> 00:08:26,759
certificate Authority and

208
00:08:26,759 --> 00:08:28,500
everything about the certificate

209
00:08:28,500 --> 00:08:31,440
including that it's still valid and

210
00:08:31,440 --> 00:08:34,559
we'll try to verify the signed data if

211
00:08:34,559 --> 00:08:37,260
it's a if it's verified using the public

212
00:08:37,260 --> 00:08:39,719
key then the KDC will now return a

213
00:08:39,719 --> 00:08:42,299
ticket and the news in a session key and

214
00:08:42,299 --> 00:08:44,339
now the session key different from the

215
00:08:44,339 --> 00:08:47,220
normal cables can be all a session key

216
00:08:47,220 --> 00:08:50,339
generated by the KDC and encrypted using

217
00:08:50,339 --> 00:08:53,399
the by the public key or it could be

218
00:08:53,399 --> 00:08:55,320
derived by the defailment parameters

219
00:08:55,320 --> 00:08:58,080
which will send by the a in the AC Quest

220
00:08:58,080 --> 00:09:01,440
and I'll send back in the as response to

221
00:09:01,440 --> 00:09:03,899
so we have two options for the session

222
00:09:03,899 --> 00:09:06,000
key and this is the main difference

223
00:09:06,000 --> 00:09:09,000
between cables and cable speaking and

224
00:09:09,000 --> 00:09:11,220
the next Authentication Protocol is PKU

225
00:09:11,220 --> 00:09:14,700
to you which is public key user to user

226
00:09:14,700 --> 00:09:16,800
and this protocol allows us to use

227
00:09:16,800 --> 00:09:18,779
cables messages

228
00:09:18,779 --> 00:09:22,140
for a authentication without the KDC so

229
00:09:22,140 --> 00:09:24,839
it means that we can now access a

230
00:09:24,839 --> 00:09:26,459
performer peer-to-peer authentication

231
00:09:26,459 --> 00:09:28,860
without the KDC so instead of going to

232
00:09:28,860 --> 00:09:31,019
the KDC and requesting tickets every

233
00:09:31,019 --> 00:09:33,540
time we want to authenticate how to

234
00:09:33,540 --> 00:09:35,519
access the specific results we will now

235
00:09:35,519 --> 00:09:38,519
go directly to the resource itself and

236
00:09:38,519 --> 00:09:41,399
ask for a ticket from him

237
00:09:41,399 --> 00:09:44,580
so it's put out the KDC from the

238
00:09:44,580 --> 00:09:46,980
equation and let you go walk directly

239
00:09:46,980 --> 00:09:49,200
against your whistles and work with

240
00:09:49,200 --> 00:09:51,540
cables tickets without doing any change

241
00:09:51,540 --> 00:09:53,760
and in this case it will instead of

242
00:09:53,760 --> 00:09:56,040
using the hash password you will be able

243
00:09:56,040 --> 00:09:58,620
to use cables because APK in it which

244
00:09:58,620 --> 00:10:01,680
allows you to use the certificate

245
00:10:01,680 --> 00:10:03,959
and our last Authentication Protocol

246
00:10:03,959 --> 00:10:07,440
it's already familiar GSS API or sspi

247
00:10:07,440 --> 00:10:09,360
which is a security support provider

248
00:10:09,360 --> 00:10:11,279
interface which allows you to add an

249
00:10:11,279 --> 00:10:14,820
authenticity layer for your protocol so

250
00:10:14,820 --> 00:10:17,459
for example over LPC or SMB you will be

251
00:10:17,459 --> 00:10:19,140
able to add cables or ntlm

252
00:10:19,140 --> 00:10:21,480
authentication and it will allow you to

253
00:10:21,480 --> 00:10:23,580
perform this authentication on top of

254
00:10:23,580 --> 00:10:25,680
your protocol

255
00:10:25,680 --> 00:10:28,620
so how it all mixed out together in Lego

256
00:10:28,620 --> 00:10:31,920
X so networks as I mentioned is the

257
00:10:31,920 --> 00:10:34,380
Authentication Protocol on for

258
00:10:34,380 --> 00:10:36,600
authenticating to Azure Edition devices

259
00:10:36,600 --> 00:10:39,240
and

260
00:10:39,240 --> 00:10:43,320
so and it and it works with the GSS API

261
00:10:43,320 --> 00:10:46,320
and cables npku to you messages

262
00:10:46,320 --> 00:10:49,500
so how it works and it's that when you

263
00:10:49,500 --> 00:10:51,240
want to authenticate over assembly for

264
00:10:51,240 --> 00:10:54,720
example you will use GSS API to provide

265
00:10:54,720 --> 00:10:58,079
an interface for negox and over networks

266
00:10:58,079 --> 00:11:00,360
you will send PKU to your messages to

267
00:11:00,360 --> 00:11:03,300
authenticate to the client

268
00:11:03,300 --> 00:11:04,380
so

269
00:11:04,380 --> 00:11:06,660
negroex is an Authentication Protocol as

270
00:11:06,660 --> 00:11:08,579
I mentioned in which is enabled by

271
00:11:08,579 --> 00:11:10,980
default on every Azure ID join device

272
00:11:10,980 --> 00:11:15,660
from I think a very previous version of

273
00:11:15,660 --> 00:11:18,000
Windows 10 and by default on every

274
00:11:18,000 --> 00:11:19,380
Windows 11

275
00:11:19,380 --> 00:11:22,320
and once you're when you're once your

276
00:11:22,320 --> 00:11:24,600
machine is onboarded to is joined to

277
00:11:24,600 --> 00:11:27,060
Azure ID then only two Protocols are

278
00:11:27,060 --> 00:11:29,760
provided for authentication and ntlm and

279
00:11:29,760 --> 00:11:32,820
networks as I mentioned before ntlm will

280
00:11:32,820 --> 00:11:35,940
not work since you by default will not

281
00:11:35,940 --> 00:11:39,120
have local accounts so only negro X left

282
00:11:39,120 --> 00:11:41,640
to perform any authentication to another

283
00:11:41,640 --> 00:11:43,860
Azure ID joint device

284
00:11:43,860 --> 00:11:46,860
and this protocol have three

285
00:11:46,860 --> 00:11:51,060
three main stages the first stage is the

286
00:11:51,060 --> 00:11:54,240
initiating messages later on the next

287
00:11:54,240 --> 00:11:56,399
stage is the authentication messages and

288
00:11:56,399 --> 00:11:57,959
the last step is the verification

289
00:11:57,959 --> 00:12:00,420
messages let's dive quickly over the

290
00:12:00,420 --> 00:12:02,820
messages see how they work and how this

291
00:12:02,820 --> 00:12:04,140
protocol work

292
00:12:04,140 --> 00:12:06,600
so the first message is sent from the

293
00:12:06,600 --> 00:12:08,760
client to the server and this message

294
00:12:08,760 --> 00:12:12,120
called initiator nego in case of negox

295
00:12:12,120 --> 00:12:13,860
the terms have been changed a bit and

296
00:12:13,860 --> 00:12:16,399
client is now called the initiator or

297
00:12:16,399 --> 00:12:19,680
but I will call it as a client because

298
00:12:19,680 --> 00:12:22,019
it's easier for us and the server is

299
00:12:22,019 --> 00:12:24,720
called accepto it's the same it just a

300
00:12:24,720 --> 00:12:26,399
change in the world

301
00:12:26,399 --> 00:12:28,980
so the initial tone nego have only one

302
00:12:28,980 --> 00:12:31,980
purpose and it's to contain random this

303
00:12:31,980 --> 00:12:33,660
random will identify this specific

304
00:12:33,660 --> 00:12:36,720
session and it will be used later for

305
00:12:36,720 --> 00:12:38,459
checksum in the verify in the

306
00:12:38,459 --> 00:12:40,980
verification part which is the last part

307
00:12:40,980 --> 00:12:43,500
of the authentication in Lego X

308
00:12:43,500 --> 00:12:45,899
the second message which is also sent

309
00:12:45,899 --> 00:12:47,940
from the client to the server is the

310
00:12:47,940 --> 00:12:49,800
initiator metadata which contains

311
00:12:49,800 --> 00:12:52,500
metadata on the authentication materials

312
00:12:52,500 --> 00:12:54,300
that are going to be used so in this

313
00:12:54,300 --> 00:12:56,399
case you can see that in the extent we

314
00:12:56,399 --> 00:12:58,320
have token signing public key it means

315
00:12:58,320 --> 00:13:00,060
that we are going to use a certificate

316
00:13:00,060 --> 00:13:03,240
and Ms organization P2P access this is

317
00:13:03,240 --> 00:13:05,160
the certificate Authority which we are

318
00:13:05,160 --> 00:13:09,000
going to be used and this is azure dptp

319
00:13:09,000 --> 00:13:11,220
certificate this is the certificate that

320
00:13:11,220 --> 00:13:13,740
is being used in language

321
00:13:13,740 --> 00:13:16,200
and then once the server receives those

322
00:13:16,200 --> 00:13:18,720
two messages it will respond with the

323
00:13:18,720 --> 00:13:20,880
same two messages but now they will be

324
00:13:20,880 --> 00:13:24,120
called acceptonego and accept Omega data

325
00:13:24,120 --> 00:13:26,519
and they will be the same messages they

326
00:13:26,519 --> 00:13:28,740
accept all negro will contain a

327
00:13:28,740 --> 00:13:30,660
different random from the initiative one

328
00:13:30,660 --> 00:13:33,180
and the acceptable metadata will contain

329
00:13:33,180 --> 00:13:35,639
the same metadata information which is

330
00:13:35,639 --> 00:13:38,880
generated from jss Square metadata

331
00:13:38,880 --> 00:13:41,339
and this is the initiating part of

332
00:13:41,339 --> 00:13:43,740
Network's protocol it doesn't really do

333
00:13:43,740 --> 00:13:46,200
anything you can just send anything you

334
00:13:46,200 --> 00:13:48,779
want as long as it's value

335
00:13:48,779 --> 00:13:50,220
and the second part is the

336
00:13:50,220 --> 00:13:52,800
authentication part this file the the

337
00:13:52,800 --> 00:13:54,540
first message which is being sent from

338
00:13:54,540 --> 00:13:56,639
the client to the server is the API

339
00:13:56,639 --> 00:13:58,560
request it's not a cable or say it's a

340
00:13:58,560 --> 00:14:01,800
request but the nego X AP request it's a

341
00:14:01,800 --> 00:14:03,839
new message type

342
00:14:03,839 --> 00:14:06,000
and this message type contains the

343
00:14:06,000 --> 00:14:09,120
exchange data which contains inside of

344
00:14:09,120 --> 00:14:13,019
it a pkutu part and pkutu part in the

345
00:14:13,019 --> 00:14:15,480
First AP request in the in this first

346
00:14:15,480 --> 00:14:18,060
message will contain cable was PK unit

347
00:14:18,060 --> 00:14:19,560
as a quest

348
00:14:19,560 --> 00:14:21,420
and this request as I mentioned before

349
00:14:21,420 --> 00:14:24,899
will be cable speaker in it with the

350
00:14:24,899 --> 00:14:27,660
certificate of the client

351
00:14:27,660 --> 00:14:30,600
of the Azure ID P2P certificate

352
00:14:30,600 --> 00:14:33,000
and in this case the session key will be

353
00:14:33,000 --> 00:14:36,060
generated by the filament parameters so

354
00:14:36,060 --> 00:14:38,820
it's important to us to know later on

355
00:14:38,820 --> 00:14:41,579
because we will use it in one vertex the

356
00:14:41,579 --> 00:14:44,399
fact that we cannot add the session key

357
00:14:44,399 --> 00:14:47,399
and the next message is being sent back

358
00:14:47,399 --> 00:14:49,560
from the server to the client after the

359
00:14:49,560 --> 00:14:52,079
AP request was sent and this is called

360
00:14:52,079 --> 00:14:54,060
The Challenge message

361
00:14:54,060 --> 00:14:57,420
this message again contains a pkutu part

362
00:14:57,420 --> 00:14:59,699
but in this case the PKU to your part is

363
00:14:59,699 --> 00:15:03,540
PK init cable speaker unit is response

364
00:15:03,540 --> 00:15:06,720
and in this case you can see that the

365
00:15:06,720 --> 00:15:09,300
server responds with ticket and this

366
00:15:09,300 --> 00:15:11,639
ticket contains a realm which is which

367
00:15:11,639 --> 00:15:14,279
is well known PKU to you it's not the

368
00:15:14,279 --> 00:15:16,079
same as the domain but it's a default

369
00:15:16,079 --> 00:15:18,600
one for every every server and every

370
00:15:18,600 --> 00:15:21,120
resource you will contact

371
00:15:21,120 --> 00:15:23,519
and again as I mentioned it will contain

372
00:15:23,519 --> 00:15:25,740
the default the filament parameters

373
00:15:25,740 --> 00:15:28,199
which will be extracted by the client

374
00:15:28,199 --> 00:15:30,480
and will be used later to generate the

375
00:15:30,480 --> 00:15:32,339
shared session key

376
00:15:32,339 --> 00:15:34,800
and once this message is being sent to

377
00:15:34,800 --> 00:15:37,800
the client the client Forge another IP

378
00:15:37,800 --> 00:15:40,260
request with the ticket with the ticket

379
00:15:40,260 --> 00:15:42,000
received from the server but in this

380
00:15:42,000 --> 00:15:44,699
case the AP request it's the same name

381
00:15:44,699 --> 00:15:47,339
but the PK YouTube product is different

382
00:15:47,339 --> 00:15:50,160
it will now contain an AP request a

383
00:15:50,160 --> 00:15:52,980
normal cable CP request with the message

384
00:15:52,980 --> 00:15:55,680
with the ticket and you will be

385
00:15:55,680 --> 00:15:57,420
performing the authentication in this

386
00:15:57,420 --> 00:16:00,000
part and then the server will respond

387
00:16:00,000 --> 00:16:02,040
with another challenge message which is

388
00:16:02,040 --> 00:16:04,980
now the PQ to report of cables AP

389
00:16:04,980 --> 00:16:06,839
response again

390
00:16:06,839 --> 00:16:09,720
and in this step if everything works

391
00:16:09,720 --> 00:16:13,139
then the authentication in the in this

392
00:16:13,139 --> 00:16:17,459
part is successful or fail but even if

393
00:16:17,459 --> 00:16:20,100
it's successful it doesn't mean that the

394
00:16:20,100 --> 00:16:23,160
successful authentication of negox is

395
00:16:23,160 --> 00:16:26,120
established but it only means that the

396
00:16:26,120 --> 00:16:29,820
this part is established so we have

397
00:16:29,820 --> 00:16:31,980
another part and the part is called a

398
00:16:31,980 --> 00:16:34,500
verify it's the way this is the last

399
00:16:34,500 --> 00:16:36,420
part of the authentication in networks

400
00:16:36,420 --> 00:16:38,699
and this is the verify message

401
00:16:38,699 --> 00:16:40,860
and the verify message contains check

402
00:16:40,860 --> 00:16:43,680
checksum over the previous set of

403
00:16:43,680 --> 00:16:45,959
messages in this case you can see that

404
00:16:45,959 --> 00:16:48,120
the sequence number of this message is 7

405
00:16:48,120 --> 00:16:50,940
and since we started form 0 then it

406
00:16:50,940 --> 00:16:52,500
means that we are going to perform a

407
00:16:52,500 --> 00:16:54,120
checksum here over the last seven

408
00:16:54,120 --> 00:16:56,579
messages the messages are the initiate

409
00:16:56,579 --> 00:16:58,880
Omega initiative

410
00:16:58,880 --> 00:17:01,440
metadata AP request Challenge and

411
00:17:01,440 --> 00:17:03,899
another IP request there all will be

412
00:17:03,899 --> 00:17:05,939
checksum and the checksum will be

413
00:17:05,939 --> 00:17:09,059
provided in the verify message and in

414
00:17:09,059 --> 00:17:11,520
this step this is a verify message which

415
00:17:11,520 --> 00:17:13,199
is sent from the client to the server

416
00:17:13,199 --> 00:17:16,559
and the server will verify the checksum

417
00:17:16,559 --> 00:17:19,619
and if it's if it's accurate then it

418
00:17:19,619 --> 00:17:22,260
will respond to another checksum and

419
00:17:22,260 --> 00:17:24,000
with another verified message which

420
00:17:24,000 --> 00:17:26,280
contains a checksum but in this case the

421
00:17:26,280 --> 00:17:28,199
checksum will be different because it

422
00:17:28,199 --> 00:17:30,960
will perform a checksum over a different

423
00:17:30,960 --> 00:17:35,160
set of messages so not only those seven

424
00:17:35,160 --> 00:17:37,860
and the check something key is a bit

425
00:17:37,860 --> 00:17:39,780
special special you cannot understand

426
00:17:39,780 --> 00:17:42,720
what how these checks and key generated

427
00:17:42,720 --> 00:17:45,780
by using the documentation

428
00:17:45,780 --> 00:17:48,960
and in this step you need to what I did

429
00:17:48,960 --> 00:17:50,940
to find out what to check some key is to

430
00:17:50,940 --> 00:17:54,000
debug the Elsas while using networks and

431
00:17:54,000 --> 00:17:56,400
performing an authentication and then I

432
00:17:56,400 --> 00:17:58,980
figure out that the checksum key is sent

433
00:17:58,980 --> 00:18:01,559
by the client or by the server depends

434
00:18:01,559 --> 00:18:04,500
on who is sending the verify message and

435
00:18:04,500 --> 00:18:06,720
the checksum case gen is sent in the

436
00:18:06,720 --> 00:18:10,140
cables AP request or Asus AP response

437
00:18:10,140 --> 00:18:12,720
and it's being used for the check the

438
00:18:12,720 --> 00:18:15,360
checksum so if you cannot open the

439
00:18:15,360 --> 00:18:17,340
cables messages you cannot get the

440
00:18:17,340 --> 00:18:19,320
checksum key

441
00:18:19,320 --> 00:18:22,740
so this was the negox protocol

442
00:18:22,740 --> 00:18:24,240
and now that we have a good

443
00:18:24,240 --> 00:18:26,220
understanding of networks protocol let's

444
00:18:26,220 --> 00:18:28,440
see what we can do with it to perform

445
00:18:28,440 --> 00:18:30,600
some attacks that will allow you us to

446
00:18:30,600 --> 00:18:32,460
perform lateral movement to another

447
00:18:32,460 --> 00:18:34,799
Azure ID join device

448
00:18:34,799 --> 00:18:37,440
so first take it's probably sound very

449
00:18:37,440 --> 00:18:39,900
similar because it is very similar it's

450
00:18:39,900 --> 00:18:41,760
called negro X and it's similar to

451
00:18:41,760 --> 00:18:44,340
obviously ntlm relay

452
00:18:44,340 --> 00:18:47,220
and this attack relies on the fact that

453
00:18:47,220 --> 00:18:49,799
again the server and the client does not

454
00:18:49,799 --> 00:18:51,780
verify each other so you can just say

455
00:18:51,780 --> 00:18:55,020
I'm the server or I'm the client if you

456
00:18:55,020 --> 00:18:58,380
made a if you enabled and spoof or

457
00:18:58,380 --> 00:19:01,679
anything else and then since you can

458
00:19:01,679 --> 00:19:04,200
perform any relay that you want there

459
00:19:04,200 --> 00:19:07,140
relay will be the same as in ntlm well

460
00:19:07,140 --> 00:19:09,240
you will just relay the messages from

461
00:19:09,240 --> 00:19:11,220
one side to another

462
00:19:11,220 --> 00:19:15,539
but again it's not the same protocol as

463
00:19:15,539 --> 00:19:18,120
ntlm so let's see how it works and what

464
00:19:18,120 --> 00:19:20,280
we can do differently or what we should

465
00:19:20,280 --> 00:19:21,480
do differently

466
00:19:21,480 --> 00:19:24,000
so as I mentioned before the two and the

467
00:19:24,000 --> 00:19:26,100
first part is the initiating messages so

468
00:19:26,100 --> 00:19:28,919
those messages are just being sent I

469
00:19:28,919 --> 00:19:31,740
will not go over them because they have

470
00:19:31,740 --> 00:19:33,539
no real meaning we don't really need

471
00:19:33,539 --> 00:19:35,760
them in this attack

472
00:19:35,760 --> 00:19:38,000
so just relate them as is and continue

473
00:19:38,000 --> 00:19:41,400
and in this case we are starting the

474
00:19:41,400 --> 00:19:44,340
authentication path and we have two two

475
00:19:44,340 --> 00:19:47,220
scenarios the first scenario is where we

476
00:19:47,220 --> 00:19:50,100
receive the AP request from the client

477
00:19:50,100 --> 00:19:53,100
and we choose the way light as is if we

478
00:19:53,100 --> 00:19:55,620
choose to relate as is as you can see in

479
00:19:55,620 --> 00:19:57,720
the cables request body there is a

480
00:19:57,720 --> 00:19:59,940
special field called the address which

481
00:19:59,940 --> 00:20:01,860
contains the client name

482
00:20:01,860 --> 00:20:05,100
and by default this field will be

483
00:20:05,100 --> 00:20:07,440
will contain the client name of the

484
00:20:07,440 --> 00:20:09,900
machine initiated the and generated this

485
00:20:09,900 --> 00:20:11,700
IP request

486
00:20:11,700 --> 00:20:13,620
so if you will choose to realize this

487
00:20:13,620 --> 00:20:16,080
it's okay it will work we will just

488
00:20:16,080 --> 00:20:18,360
relay to the server and the server will

489
00:20:18,360 --> 00:20:20,880
validate a question response with the

490
00:20:20,880 --> 00:20:22,799
challenge message

491
00:20:22,799 --> 00:20:25,860
the challenge message which will be

492
00:20:25,860 --> 00:20:28,380
again relate to the client because we

493
00:20:28,380 --> 00:20:30,120
cannot open it because we don't have the

494
00:20:30,120 --> 00:20:32,039
session key since as I mentioned it

495
00:20:32,039 --> 00:20:34,559
generated by develman and we cannot

496
00:20:34,559 --> 00:20:37,679
generate or find the key so we'll just

497
00:20:37,679 --> 00:20:39,660
relate to the client

498
00:20:39,660 --> 00:20:42,240
and in the second scenario we want to be

499
00:20:42,240 --> 00:20:44,340
a bit more sophisticated and we want to

500
00:20:44,340 --> 00:20:45,960
change the client name to avoid some

501
00:20:45,960 --> 00:20:48,360
detections assuming that someone is

502
00:20:48,360 --> 00:20:49,679
detecting it

503
00:20:49,679 --> 00:20:51,840
and what we'll do is to change the

504
00:20:51,840 --> 00:20:54,120
client name because if someone sees the

505
00:20:54,120 --> 00:20:56,280
original client name and the attacker IP

506
00:20:56,280 --> 00:20:59,520
it can easily understand that this is

507
00:20:59,520 --> 00:21:04,140
not a matching and we will be seen

508
00:21:04,140 --> 00:21:06,419
so in this case we can modify the AP

509
00:21:06,419 --> 00:21:09,059
request and relate as is add to the

510
00:21:09,059 --> 00:21:10,559
server and the same process will happen

511
00:21:10,559 --> 00:21:12,660
we will get the challenge and relay to

512
00:21:12,660 --> 00:21:14,940
the client and the next step is the AP

513
00:21:14,940 --> 00:21:17,400
request and the verify message which are

514
00:21:17,400 --> 00:21:20,220
being sent from the client to the server

515
00:21:20,220 --> 00:21:22,980
and in this case we don't need to modify

516
00:21:22,980 --> 00:21:25,260
the API request in the first scenario we

517
00:21:25,260 --> 00:21:27,000
did not modified anything so we again

518
00:21:27,000 --> 00:21:30,059
regulate as this the server verifies the

519
00:21:30,059 --> 00:21:32,400
verify message and the AP request and if

520
00:21:32,400 --> 00:21:34,020
it's okay

521
00:21:34,020 --> 00:21:36,179
then server will respond with the

522
00:21:36,179 --> 00:21:38,460
challenge message and a verify message

523
00:21:38,460 --> 00:21:40,740
and in this case if it's okay the

524
00:21:40,740 --> 00:21:42,299
session will be already established

525
00:21:42,299 --> 00:21:44,280
between the attacker and the server and

526
00:21:44,280 --> 00:21:46,380
since we are attackers and we don't need

527
00:21:46,380 --> 00:21:48,960
those two messages we can just drop them

528
00:21:48,960 --> 00:21:51,419
close the session with the client and we

529
00:21:51,419 --> 00:21:52,980
have an established connection with the

530
00:21:52,980 --> 00:21:53,940
server

531
00:21:53,940 --> 00:21:56,220
and in the second case

532
00:21:56,220 --> 00:21:58,500
in the second scenario we chose to

533
00:21:58,500 --> 00:22:00,120
change the client name in the previous

534
00:22:00,120 --> 00:22:03,840
message so now we will have the verify

535
00:22:03,840 --> 00:22:06,179
message which contains the checksum but

536
00:22:06,179 --> 00:22:07,860
now the checksum will not be accurate

537
00:22:07,860 --> 00:22:10,980
since we changed one of the messages

538
00:22:10,980 --> 00:22:12,900
so in this case if we will send it to

539
00:22:12,900 --> 00:22:14,820
the server we will get an invalid

540
00:22:14,820 --> 00:22:17,280
parameter error and negox invalue

541
00:22:17,280 --> 00:22:19,080
parameter also we will not be able to

542
00:22:19,080 --> 00:22:22,380
use it and the session will be closed so

543
00:22:22,380 --> 00:22:24,780
in this case what we are going to use to

544
00:22:24,780 --> 00:22:26,940
do is to force the clan to authenticate

545
00:22:26,940 --> 00:22:28,320
to us again

546
00:22:28,320 --> 00:22:30,480
and if the client will authenticate to

547
00:22:30,480 --> 00:22:31,640
us again

548
00:22:31,640 --> 00:22:34,799
to the initiating messages will be sent

549
00:22:34,799 --> 00:22:36,960
to a to the server

550
00:22:36,960 --> 00:22:39,600
and we will relay them as is and then

551
00:22:39,600 --> 00:22:42,600
since we since the client already have a

552
00:22:42,600 --> 00:22:45,659
ticket for us and as you know in Cabos

553
00:22:45,659 --> 00:22:48,299
client tickets are stored on the client

554
00:22:48,299 --> 00:22:50,640
and if the client remember that you have

555
00:22:50,640 --> 00:22:54,000
a ticket for the server then you will

556
00:22:54,000 --> 00:22:56,220
not request a new one so we will use

557
00:22:56,220 --> 00:22:59,100
that and since we initiate another a

558
00:22:59,100 --> 00:23:01,980
session and the client already have a

559
00:23:01,980 --> 00:23:04,260
ticket to the attacker then the client

560
00:23:04,260 --> 00:23:06,360
will directly use it instead of asking a

561
00:23:06,360 --> 00:23:07,679
new ticket

562
00:23:07,679 --> 00:23:10,320
so in this case the client will go

563
00:23:10,320 --> 00:23:12,360
directly to the second set of messages

564
00:23:12,360 --> 00:23:14,700
the AP request and the verify in this

565
00:23:14,700 --> 00:23:17,520
case the AP request is the cableos AP

566
00:23:17,520 --> 00:23:19,620
request in the PK YouTube part and the

567
00:23:19,620 --> 00:23:22,380
verify message will contain a checksum

568
00:23:22,380 --> 00:23:24,600
which is made over those four messages

569
00:23:24,600 --> 00:23:28,140
and this AP request and as you saw we

570
00:23:28,140 --> 00:23:30,900
did not made any modification so the

571
00:23:30,900 --> 00:23:33,600
verify message is now our QA and the AP

572
00:23:33,600 --> 00:23:35,520
request is also accurate because it's

573
00:23:35,520 --> 00:23:37,799
generated by the ticket using the

574
00:23:37,799 --> 00:23:41,220
session key which is known to the client

575
00:23:41,220 --> 00:23:43,860
so if we will relay them to the server

576
00:23:43,860 --> 00:23:45,900
then the server will validate everything

577
00:23:45,900 --> 00:23:47,760
and we will establish a connection

578
00:23:47,760 --> 00:23:50,760
because all the messages are accurate so

579
00:23:50,760 --> 00:23:53,100
in this case we managed to bypass the

580
00:23:53,100 --> 00:23:54,960
validation part of networks without

581
00:23:54,960 --> 00:23:56,700
knowing any session key or without

582
00:23:56,700 --> 00:23:58,919
knowing any Secret

583
00:23:58,919 --> 00:24:01,260
so let's demo this

584
00:24:01,260 --> 00:24:03,600
this one real quick

585
00:24:03,600 --> 00:24:06,860
let's hope it will work

586
00:24:17,340 --> 00:24:20,159
so it takes a couple of seconds due to

587
00:24:20,159 --> 00:24:22,580
Wi-Fi

588
00:24:36,240 --> 00:24:38,580
it's connecting remote into Israel so it

589
00:24:38,580 --> 00:24:40,440
takes time

590
00:24:40,440 --> 00:24:43,320
in the meantime I will just say if it

591
00:24:43,320 --> 00:24:46,200
will not work I will show a demo which I

592
00:24:46,200 --> 00:24:48,780
already prepared in events but I will

593
00:24:48,780 --> 00:24:51,059
say that for now that I have I'm going

594
00:24:51,059 --> 00:24:52,980
to show and I will have three machines

595
00:24:52,980 --> 00:24:55,799
one of them will be my taco machine and

596
00:24:55,799 --> 00:24:57,720
the oh it works

597
00:24:57,720 --> 00:25:00,539
so here it is I have a client 6 which is

598
00:25:00,539 --> 00:25:02,520
my attacker machine and which is going

599
00:25:02,520 --> 00:25:04,919
to want the relay server client 7 is

600
00:25:04,919 --> 00:25:07,980
azure ID join device and it's going to

601
00:25:07,980 --> 00:25:10,919
be my Victim machine and client 8 is

602
00:25:10,919 --> 00:25:12,720
going to be my target my target machine

603
00:25:12,720 --> 00:25:15,299
so it means that client 7 is going to

604
00:25:15,299 --> 00:25:19,140
authenticate to client 6 and client 6 is

605
00:25:19,140 --> 00:25:20,580
the attacker machine and it's going to

606
00:25:20,580 --> 00:25:23,580
authenticate to client 8.

607
00:25:23,580 --> 00:25:25,260
so

608
00:25:25,260 --> 00:25:27,720
from client 6 I will start my relay

609
00:25:27,720 --> 00:25:30,059
server and I will choose to modify the

610
00:25:30,059 --> 00:25:33,000
name as I just showed I will just choose

611
00:25:33,000 --> 00:25:36,020
a random name

612
00:25:36,960 --> 00:25:41,279
okay so choosing a random name

613
00:25:41,279 --> 00:25:45,240
and I will start the server

614
00:25:45,240 --> 00:25:48,240
and then I will also start a whale shark

615
00:25:48,240 --> 00:25:49,980
this is a special version of wireless

616
00:25:49,980 --> 00:25:53,039
shelf which I made a modification to to

617
00:25:53,039 --> 00:25:55,500
pass the PKU to your messages this is

618
00:25:55,500 --> 00:25:57,720
why I'm using a negro XS filter right

619
00:25:57,720 --> 00:26:00,840
now I think it will not work in a

620
00:26:00,840 --> 00:26:02,700
regular Wireshark if you're tying it

621
00:26:02,700 --> 00:26:04,140
yourself

622
00:26:04,140 --> 00:26:06,059
and then instead of spoofing I will

623
00:26:06,059 --> 00:26:07,460
directly

624
00:26:07,460 --> 00:26:10,080
authenticate to my attacking machine

625
00:26:10,080 --> 00:26:13,200
from the from the Victor machine

626
00:26:13,200 --> 00:26:15,419
and let's take a look

627
00:26:15,419 --> 00:26:21,360
on a on the server so as you can see we

628
00:26:21,360 --> 00:26:24,539
managed to dump some ashes and in this

629
00:26:24,539 --> 00:26:27,900
case the hash is will not give me

630
00:26:27,900 --> 00:26:31,500
anything because as I mentioned it's a

631
00:26:31,500 --> 00:26:34,559
device without local accounts but it

632
00:26:34,559 --> 00:26:35,820
just proved that we have an

633
00:26:35,820 --> 00:26:38,100
authenticated connection and since we're

634
00:26:38,100 --> 00:26:40,320
having sufficient privilege to the

635
00:26:40,320 --> 00:26:42,720
victim machine we managed to dump those

636
00:26:42,720 --> 00:26:45,179
ashes similar to anti-lam relay and

637
00:26:45,179 --> 00:26:47,279
let's take a look real quick on the

638
00:26:47,279 --> 00:26:49,400
traffic

639
00:26:49,980 --> 00:26:53,640
so if we will open the traffic and we

640
00:26:53,640 --> 00:26:56,039
will see the AP request which contains

641
00:26:56,039 --> 00:26:59,820
the cable ospk unit as request

642
00:26:59,820 --> 00:27:01,020
and

643
00:27:01,020 --> 00:27:03,900
we'll open everything

644
00:27:03,900 --> 00:27:07,020
and we will go directly to the request

645
00:27:07,020 --> 00:27:09,900
body and to the others field now we can

646
00:27:09,900 --> 00:27:11,640
see that this is client seven this is

647
00:27:11,640 --> 00:27:13,620
what we have received from the original

648
00:27:13,620 --> 00:27:15,179
a client

649
00:27:15,179 --> 00:27:18,480
and then what we relate is the new name

650
00:27:18,480 --> 00:27:20,940
that I just wrote

651
00:27:20,940 --> 00:27:23,880
and if I will follow this a stream of

652
00:27:23,880 --> 00:27:26,880
packets we will say that I've relayed it

653
00:27:26,880 --> 00:27:27,960
as is

654
00:27:27,960 --> 00:27:30,600
without modifying the verify message and

655
00:27:30,600 --> 00:27:32,760
I've received an l

656
00:27:32,760 --> 00:27:34,559
so what I did next

657
00:27:34,559 --> 00:27:36,659
is to force the client to authenticate

658
00:27:36,659 --> 00:27:41,120
again to me as a tackle and this gave me

659
00:27:41,120 --> 00:27:45,860
as I showed you let's follow this

660
00:27:46,860 --> 00:27:49,500
and now we can see that in the new

661
00:27:49,500 --> 00:27:51,240
session we have received the two

662
00:27:51,240 --> 00:27:54,960
initiating messages we this is the only

663
00:27:54,960 --> 00:27:57,120
part of the regular I'm not showing a

664
00:27:57,120 --> 00:27:59,100
the client side but only to the server

665
00:27:59,100 --> 00:28:01,260
side and we see that we just went

666
00:28:01,260 --> 00:28:03,360
directly into the AP request and the

667
00:28:03,360 --> 00:28:06,240
verify and then the session is

668
00:28:06,240 --> 00:28:07,679
established and we managed to

669
00:28:07,679 --> 00:28:09,840
authenticate

670
00:28:09,840 --> 00:28:12,299
so we managed to very fast the

671
00:28:12,299 --> 00:28:14,220
validation part and let's see how it

672
00:28:14,220 --> 00:28:19,100
looks on a the target device

673
00:28:19,559 --> 00:28:21,779
so we can see in the Target device that

674
00:28:21,779 --> 00:28:24,779
we have a Windows 4624 of successful

675
00:28:24,779 --> 00:28:26,520
authentication and we have the account

676
00:28:26,520 --> 00:28:28,980
name with the domain of azure ID and you

677
00:28:28,980 --> 00:28:31,559
can see the full European of my account

678
00:28:31,559 --> 00:28:33,900
and if we will go to the authentication

679
00:28:33,900 --> 00:28:36,299
package we can see that the it was being

680
00:28:36,299 --> 00:28:39,539
used in with nego extender and now we

681
00:28:39,539 --> 00:28:41,580
can see that the workstation name is

682
00:28:41,580 --> 00:28:44,159
what I just thought and the IP is my

683
00:28:44,159 --> 00:28:46,679
tackle machine IP and not the client so

684
00:28:46,679 --> 00:28:48,779
we managed to perform a successful

685
00:28:48,779 --> 00:28:50,880
authentication to the machine even

686
00:28:50,880 --> 00:28:53,520
though we made modification to the

687
00:28:53,520 --> 00:28:56,159
cables messages which are being

688
00:28:56,159 --> 00:28:58,580
protected by the networks verify message

689
00:28:58,580 --> 00:29:02,340
so we still managed to very fast them

690
00:29:02,340 --> 00:29:05,039
we pass the verification file so

691
00:29:05,039 --> 00:29:06,779
nice for us

692
00:29:06,779 --> 00:29:10,400
and let's go back to the next attack

693
00:29:11,100 --> 00:29:13,559
okay so the next stack it's not really a

694
00:29:13,559 --> 00:29:15,299
tech yet it's the preparation for the

695
00:29:15,299 --> 00:29:17,100
attack in this case we will use the

696
00:29:17,100 --> 00:29:19,380
primary refresh token the PLT to get a

697
00:29:19,380 --> 00:29:22,679
P2P Azure ID certificate so how it will

698
00:29:22,679 --> 00:29:25,559
do it we will first generate a CSR which

699
00:29:25,559 --> 00:29:27,360
is a certificate signing request for

700
00:29:27,360 --> 00:29:29,399
this specific user

701
00:29:29,399 --> 00:29:32,279
which the PRT is bound to and then we

702
00:29:32,279 --> 00:29:34,980
will attach both the CSR and the primary

703
00:29:34,980 --> 00:29:38,039
refresh token to a JWT a Json web token

704
00:29:38,039 --> 00:29:40,740
and we will assign this Json web token

705
00:29:40,740 --> 00:29:42,600
with the session key bound to the

706
00:29:42,600 --> 00:29:45,899
specific priority once we have it

707
00:29:45,899 --> 00:29:49,799
once we signed it we can send this JWT

708
00:29:49,799 --> 00:29:53,600
to Azure ID and then we will receive

709
00:29:53,600 --> 00:29:57,960
the certificate in the x5c section and

710
00:29:57,960 --> 00:29:59,760
we will received an Azure ID P2P

711
00:29:59,760 --> 00:30:01,860
certificate which is going to be valid

712
00:30:01,860 --> 00:30:05,039
for the next one hour and since we have

713
00:30:05,039 --> 00:30:07,860
a valid P2P certificate what we will do

714
00:30:07,860 --> 00:30:10,080
we will just simulate everything and

715
00:30:10,080 --> 00:30:11,820
pass this certificate to another machine

716
00:30:11,820 --> 00:30:14,279
and as long as we will have permissions

717
00:30:14,279 --> 00:30:16,980
we will be able to simulate the SMB

718
00:30:16,980 --> 00:30:19,559
messages and perform the Network's

719
00:30:19,559 --> 00:30:21,059
authentication and authenticate to

720
00:30:21,059 --> 00:30:22,500
another machine

721
00:30:22,500 --> 00:30:25,440
this will allow us to jump to another

722
00:30:25,440 --> 00:30:28,980
machine get certificates and we can dump

723
00:30:28,980 --> 00:30:30,299
those certificates from the local

724
00:30:30,299 --> 00:30:32,340
machines though because they are by

725
00:30:32,340 --> 00:30:34,980
default stored in the machine store or

726
00:30:34,980 --> 00:30:37,080
we can dump the plts or we can do

727
00:30:37,080 --> 00:30:39,720
anything else we can also add Rogue

728
00:30:39,720 --> 00:30:41,820
Azure ID join devices

729
00:30:41,820 --> 00:30:44,100
and which will allow us to get

730
00:30:44,100 --> 00:30:47,760
constantly ability and get the new Azure

731
00:30:47,760 --> 00:30:49,799
ID certificates

732
00:30:49,799 --> 00:30:51,960
and it will allow us to move to another

733
00:30:51,960 --> 00:30:54,419
machines every time we want and harvest

734
00:30:54,419 --> 00:30:57,000
some more and more prts and certificates

735
00:30:57,000 --> 00:31:01,020
and move to another machine every time

736
00:31:01,020 --> 00:31:04,500
so now we saw a couple of attacks that

737
00:31:04,500 --> 00:31:05,820
allow us to move laterally between

738
00:31:05,820 --> 00:31:07,799
devices let's see how we can unfold

739
00:31:07,799 --> 00:31:10,500
those attacks our first option is to use

740
00:31:10,500 --> 00:31:12,240
Windows Event we can use Windows event

741
00:31:12,240 --> 00:31:15,240
for six to four or four six two five and

742
00:31:15,240 --> 00:31:18,179
to hunt for a successful or failed

743
00:31:18,179 --> 00:31:20,399
authentication for 64 successful

744
00:31:20,399 --> 00:31:22,559
authentication while four six to five is

745
00:31:22,559 --> 00:31:24,960
for failed authentications and as I

746
00:31:24,960 --> 00:31:27,120
showed in the demo we will have the

747
00:31:27,120 --> 00:31:29,940
Azure ID account in the domain and the

748
00:31:29,940 --> 00:31:31,500
full UPN

749
00:31:31,500 --> 00:31:33,600
and authentication package is Network

750
00:31:33,600 --> 00:31:36,120
standard it's important to know and then

751
00:31:36,120 --> 00:31:37,860
we will have the workstation name and

752
00:31:37,860 --> 00:31:41,279
the IP as I mentioned and in this case I

753
00:31:41,279 --> 00:31:44,520
have attached a screenshot from a real

754
00:31:44,520 --> 00:31:47,399
machine so in this case the attacker did

755
00:31:47,399 --> 00:31:50,279
not modify the name so if you see and

756
00:31:50,279 --> 00:31:52,520
have a mapping between the workstation

757
00:31:52,520 --> 00:31:55,620
workstation names and doing IPS you can

758
00:31:55,620 --> 00:31:57,240
easily understand that this is a

759
00:31:57,240 --> 00:31:59,279
malicious connection because the IP does

760
00:31:59,279 --> 00:32:00,840
not match to the name

761
00:32:00,840 --> 00:32:04,740
so it's easy to a hand for suspicious

762
00:32:04,740 --> 00:32:08,520
logins with or also you can find a world

763
00:32:08,520 --> 00:32:11,640
authentication from another devices with

764
00:32:11,640 --> 00:32:13,559
users that are not supposed to be

765
00:32:13,559 --> 00:32:15,539
connected to those devices the second

766
00:32:15,539 --> 00:32:18,240
option is to use the traffic analysis

767
00:32:18,240 --> 00:32:20,399
and there are plenty of Open Source

768
00:32:20,399 --> 00:32:23,220
traffic analysis or anything else and

769
00:32:23,220 --> 00:32:24,960
you can use them to pass the PK YouTube

770
00:32:24,960 --> 00:32:25,980
part

771
00:32:25,980 --> 00:32:28,380
and if you plug the PK YouTube part you

772
00:32:28,380 --> 00:32:30,059
can extract the serial number and the

773
00:32:30,059 --> 00:32:32,100
subject this will allow you to find

774
00:32:32,100 --> 00:32:34,080
cases where the same serial number have

775
00:32:34,080 --> 00:32:36,840
been used from two devices and in the

776
00:32:36,840 --> 00:32:39,720
case of the real attack or in case of

777
00:32:39,720 --> 00:32:43,080
someone stealing the the P2P certificate

778
00:32:43,080 --> 00:32:45,360
from the machine you will be able to see

779
00:32:45,360 --> 00:32:47,460
that this serial number was being used

780
00:32:47,460 --> 00:32:51,059
from two different devices and not even

781
00:32:51,059 --> 00:32:53,940
in the same time it could be in frame of

782
00:32:53,940 --> 00:32:55,860
one hour because this is the time the

783
00:32:55,860 --> 00:32:58,080
certificate is valid and it will help

784
00:32:58,080 --> 00:33:01,380
you find some more suspicious attempts

785
00:33:01,380 --> 00:33:03,840
and the mitigation parts

786
00:33:03,840 --> 00:33:06,240
as you may know you cannot mitigate

787
00:33:06,240 --> 00:33:09,840
someone stealing your credentials PRT

788
00:33:09,840 --> 00:33:12,840
and Azure ID P2P certificates are the

789
00:33:12,840 --> 00:33:15,960
same as your password so if someone

790
00:33:15,960 --> 00:33:18,840
still your password I cannot really do

791
00:33:18,840 --> 00:33:20,580
anything and you cannot really protect

792
00:33:20,580 --> 00:33:23,100
your device you can obviously patch the

793
00:33:23,100 --> 00:33:25,019
device it will be other for tools like

794
00:33:25,019 --> 00:33:29,100
mimikats to harvest the PRT but there is

795
00:33:29,100 --> 00:33:31,679
no other way and the second option to

796
00:33:31,679 --> 00:33:34,019
mitigate the networks relay when it's

797
00:33:34,019 --> 00:33:37,320
done over SMB you can you can enable the

798
00:33:37,320 --> 00:33:39,960
SMB signing this will force the attacker

799
00:33:39,960 --> 00:33:43,080
to use to sign the SMB messages and

800
00:33:43,080 --> 00:33:44,760
since the attacker does not have the

801
00:33:44,760 --> 00:33:47,100
session key and it cannot get the

802
00:33:47,100 --> 00:33:49,140
session key because the first session

803
00:33:49,140 --> 00:33:51,899
key is generated from the filament then

804
00:33:51,899 --> 00:33:54,000
the attacker will not be able to sign

805
00:33:54,000 --> 00:33:57,240
the messages and the relay will still

806
00:33:57,240 --> 00:33:59,820
work the attacker will still be able to

807
00:33:59,820 --> 00:34:01,559
authenticate to the device but the

808
00:34:01,559 --> 00:34:04,380
attacker will not be able to do anything

809
00:34:04,380 --> 00:34:07,980
on the device itself so it will force

810
00:34:07,980 --> 00:34:10,560
him to close the connection

811
00:34:10,560 --> 00:34:12,540
so the tools have been used are the

812
00:34:12,540 --> 00:34:15,300
networks relay which I just demoed and

813
00:34:15,300 --> 00:34:17,399
second tool is the Azure ID Certificate

814
00:34:17,399 --> 00:34:19,560
request tool which is the Purity to

815
00:34:19,560 --> 00:34:22,139
certificate the third tool the last tool

816
00:34:22,139 --> 00:34:24,119
is the pass the certificate

817
00:34:24,119 --> 00:34:25,859
authentication tool with Azure ID

818
00:34:25,859 --> 00:34:28,679
certificate and for research I've used

819
00:34:28,679 --> 00:34:31,980
wild shark I modified Wireshark to edit

820
00:34:31,980 --> 00:34:34,139
the sector for the PKU to report over

821
00:34:34,139 --> 00:34:37,379
negro X and allow you to find Network's

822
00:34:37,379 --> 00:34:39,659
messages easier

823
00:34:39,659 --> 00:34:43,440
and then I also modified Zeke to pass

824
00:34:43,440 --> 00:34:46,679
jss API networks over the jss API to

825
00:34:46,679 --> 00:34:49,500
extract the PKU to your messages the

826
00:34:49,500 --> 00:34:51,899
serial numbers and everything from the

827
00:34:51,899 --> 00:34:54,179
certificate itself it's all available in

828
00:34:54,179 --> 00:34:57,720
GitHub and so you can download it and

829
00:34:57,720 --> 00:35:01,380
use it to find an research on your own

830
00:35:01,380 --> 00:35:04,099
and the last takeaways from this session

831
00:35:04,099 --> 00:35:06,119
as I mentioned

832
00:35:06,119 --> 00:35:09,000
since the some part is dealing your

833
00:35:09,000 --> 00:35:11,760
certificates or anything else then

834
00:35:11,760 --> 00:35:13,800
patching is not really enough it will

835
00:35:13,800 --> 00:35:17,160
not protect you from everything but

836
00:35:17,160 --> 00:35:20,460
it still May mandatory to use the SMB

837
00:35:20,460 --> 00:35:22,380
signing since this is the thing that

838
00:35:22,380 --> 00:35:25,880
will protect you against the relay

839
00:35:25,980 --> 00:35:28,560
as I mentioned it's something new I did

840
00:35:28,560 --> 00:35:31,020
not I don't know if someone is using it

841
00:35:31,020 --> 00:35:33,839
right now but it's a new way to perform

842
00:35:33,839 --> 00:35:36,540
lateral movement and since we all know

843
00:35:36,540 --> 00:35:38,640
that domain lateral movement is being

844
00:35:38,640 --> 00:35:42,480
used for yields then I assume that it

845
00:35:42,480 --> 00:35:45,660
will also be used we already know that

846
00:35:45,660 --> 00:35:48,240
attackers are joining new device to

847
00:35:48,240 --> 00:35:50,760
Azure ID so since they are already

848
00:35:50,760 --> 00:35:52,920
joining new device it means that they

849
00:35:52,920 --> 00:35:55,920
can get a P2P certificate so there are

850
00:35:55,920 --> 00:35:58,680
one step from authenticating to your

851
00:35:58,680 --> 00:35:59,760
device

852
00:35:59,760 --> 00:36:03,000
and the last thing is hunting is I said

853
00:36:03,000 --> 00:36:05,700
it's it's a new tax office and so it's

854
00:36:05,700 --> 00:36:08,820
very important to drag and search if

855
00:36:08,820 --> 00:36:10,380
there are successful authentication

856
00:36:10,380 --> 00:36:12,780
since there are no and not enough

857
00:36:12,780 --> 00:36:15,660
research in this area so it's extremely

858
00:36:15,660 --> 00:36:16,980
important

859
00:36:16,980 --> 00:36:20,300
and that's it thank you

860
00:36:20,340 --> 00:36:23,449
[Music]

861
00:36:27,290 --> 00:36:30,380
[Music]

