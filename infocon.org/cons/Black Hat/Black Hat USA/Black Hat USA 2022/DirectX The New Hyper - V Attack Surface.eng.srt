1
00:00:01,700 --> 00:00:04,810
[Music]

2
00:00:08,000 --> 00:00:12,840
now it is my pleasure to welcome online

3
00:00:12,840 --> 00:00:16,759
Zen how Hong

4
00:00:19,920 --> 00:00:21,900
okay

5
00:00:21,900 --> 00:00:23,880
hello everyone thank you for coming

6
00:00:23,880 --> 00:00:27,359
today my name is I have been working on

7
00:00:27,359 --> 00:00:30,000
virtualization security Windows kernel

8
00:00:30,000 --> 00:00:32,340
and Hyper Security research for many

9
00:00:32,340 --> 00:00:35,239
years I was awarded the

10
00:00:35,239 --> 00:00:39,059
2019-2020 msrc most valuable security

11
00:00:39,059 --> 00:00:42,480
researchers and I was also a blackhead

12
00:00:42,480 --> 00:00:45,180
USA 2021 speaker

13
00:00:45,180 --> 00:00:47,399
I also want to introduce my partner

14
00:00:47,399 --> 00:00:49,920
Jimmy John he has been working on

15
00:00:49,920 --> 00:00:52,200
virtualization and Kernel Security for

16
00:00:52,200 --> 00:00:54,840
many years he was the windows project

17
00:00:54,840 --> 00:00:58,079
winner in 2021 cancel car

18
00:00:58,079 --> 00:01:01,980
and he was awarded the Q2 and Q4 at

19
00:01:01,980 --> 00:01:03,899
Microsoft's most valuable security

20
00:01:03,899 --> 00:01:07,080
researchers in this section

21
00:01:07,080 --> 00:01:09,619
The Limited in terrible contribution

22
00:01:09,619 --> 00:01:12,180
refers to discover this new attack

23
00:01:12,180 --> 00:01:15,000
surface and we've been working on this

24
00:01:15,000 --> 00:01:17,880
protect service here I would like to

25
00:01:17,880 --> 00:01:21,860
express my thanks again to him

26
00:01:22,140 --> 00:01:26,820
this section is divided into six parts

27
00:01:26,820 --> 00:01:30,000
first of all let's introduce the happily

28
00:01:30,000 --> 00:01:34,259
direct as component architecture

29
00:01:34,259 --> 00:01:37,799
in 2020 everywhere introduced a new

30
00:01:37,799 --> 00:01:40,340
feature of GPU power virtualization

31
00:01:40,340 --> 00:01:43,439
which is based on GPU virtualization

32
00:01:43,439 --> 00:01:45,000
technology

33
00:01:45,000 --> 00:01:47,700
this technology is integrated into

34
00:01:47,700 --> 00:01:50,759
windows display driver model and all

35
00:01:50,759 --> 00:01:55,020
wddm drivers above version 2.5 support

36
00:01:55,020 --> 00:01:59,159
GPU virtualization natively however new

37
00:01:59,159 --> 00:02:02,840
features mean new attack services

38
00:02:02,880 --> 00:02:05,880
this picture is a wddm architecture

39
00:02:05,880 --> 00:02:09,660
diagram applications such as 3D games

40
00:02:09,660 --> 00:02:12,180
communicate with the DirectX graphic

41
00:02:12,180 --> 00:02:14,940
kernel subsystem by invoking the direct

42
00:02:14,940 --> 00:02:18,239
3D runtime component in user mode

43
00:02:18,239 --> 00:02:20,760
the user mode display driver in the

44
00:02:20,760 --> 00:02:23,340
diagram is the private driver data of

45
00:02:23,340 --> 00:02:25,800
the GPU manufacturer

46
00:02:25,800 --> 00:02:28,739
which will be used in the GPU kernel

47
00:02:28,739 --> 00:02:31,280
model driver

48
00:02:32,280 --> 00:02:35,580
the diagram is the hypery DLS component

49
00:02:35,580 --> 00:02:38,340
architecture the right side of the

50
00:02:38,340 --> 00:02:42,239
diagram is the simplified wddm the left

51
00:02:42,239 --> 00:02:44,580
side represents the child partition

52
00:02:44,580 --> 00:02:48,840
where the gas virtual machine is located

53
00:02:48,840 --> 00:02:52,260
the DSG kernel Linux kernel module in

54
00:02:52,260 --> 00:02:54,900
the Linux virtual machine transmits data

55
00:02:54,900 --> 00:02:57,599
with the DirectX graphic kernel

56
00:02:57,599 --> 00:02:59,040
subsystem

57
00:02:59,040 --> 00:03:01,440
in the host machine through the VM bus

58
00:03:01,440 --> 00:03:04,040
component

59
00:03:05,760 --> 00:03:09,120
the data flow of the wddm is shown in

60
00:03:09,120 --> 00:03:11,580
the diagram the application is the

61
00:03:11,580 --> 00:03:12,900
starting point

62
00:03:12,900 --> 00:03:16,440
the application will invoke the apis is

63
00:03:16,440 --> 00:03:18,659
exported in the

64
00:03:18,659 --> 00:03:20,580
runtime component

65
00:03:20,580 --> 00:03:22,920
the runtime component may use the

66
00:03:22,920 --> 00:03:25,920
private data in the user mode driver and

67
00:03:25,920 --> 00:03:29,159
then it reaches to direct as graphic

68
00:03:29,159 --> 00:03:31,800
kernel subsystem and the direct S

69
00:03:31,800 --> 00:03:35,519
graphic MMS and finally the data will

70
00:03:35,519 --> 00:03:38,780
reach the GPU driver

71
00:03:39,720 --> 00:03:42,900
the data flow of hypery components also

72
00:03:42,900 --> 00:03:45,720
starts from the application

73
00:03:45,720 --> 00:03:48,780
the application sends data to the Linux

74
00:03:48,780 --> 00:03:51,599
kernel module DSG kernel through a set

75
00:03:51,599 --> 00:03:56,879
of ioctrs exposed from the dev dx3

76
00:03:56,879 --> 00:03:58,560
device file

77
00:03:58,560 --> 00:04:01,739
the linear is current the Linux density

78
00:04:01,739 --> 00:04:04,500
kernel driver module communicates with

79
00:04:04,500 --> 00:04:08,220
the DirectX graphic kernel subsystem in

80
00:04:08,220 --> 00:04:10,260
the host machine through the VM bus

81
00:04:10,260 --> 00:04:13,260
component and the subsequent process is

82
00:04:13,260 --> 00:04:16,560
the same as wddm

83
00:04:16,560 --> 00:04:17,880
so

84
00:04:17,880 --> 00:04:20,579
how to enable data as component in

85
00:04:20,579 --> 00:04:21,899
helper rear virtual machine

86
00:04:21,899 --> 00:04:24,240
configuration

87
00:04:24,240 --> 00:04:29,100
you can use the VM GPU partition adapter

88
00:04:29,100 --> 00:04:32,580
Powershell command to add a virtual GPU

89
00:04:32,580 --> 00:04:35,340
to a specific virtual machine

90
00:04:35,340 --> 00:04:38,820
and then use the get VR GPU partition

91
00:04:38,820 --> 00:04:41,220
adapter command if you check the virtual

92
00:04:41,220 --> 00:04:44,060
GPU information

93
00:04:44,300 --> 00:04:47,400
after we complete the virtual machine

94
00:04:47,400 --> 00:04:50,160
configuration we can determine whether

95
00:04:50,160 --> 00:04:53,160
this component is enabled by checking

96
00:04:53,160 --> 00:04:55,199
the chronolog in the Linux virtual

97
00:04:55,199 --> 00:04:55,979
machine

98
00:04:55,979 --> 00:04:57,360
for example

99
00:04:57,360 --> 00:05:02,580
my Linux VM kernel version is 4.15 in

100
00:05:02,580 --> 00:05:05,220
the chronolog there are two and new Geo

101
00:05:05,220 --> 00:05:08,820
ideas there are virtual GPU DSG cage

102
00:05:08,820 --> 00:05:11,220
handle jio ID and the global dsgk

103
00:05:11,220 --> 00:05:13,740
Channel guid

104
00:05:13,740 --> 00:05:16,860
if the virtual machine is a Linux 3M

105
00:05:16,860 --> 00:05:20,639
only the wsl2 Linux kernel source code 3

106
00:05:20,639 --> 00:05:24,020
can natively support DirectX device

107
00:05:24,020 --> 00:05:25,979
virtual device

108
00:05:25,979 --> 00:05:29,100
but the good news is the SG kernel

109
00:05:29,100 --> 00:05:31,440
driver for Linux is easier to compare on

110
00:05:31,440 --> 00:05:33,600
the customization

111
00:05:33,600 --> 00:05:36,600
the Linux driver for direct s exposes

112
00:05:36,600 --> 00:05:40,380
the DSG device file to user mode Linux

113
00:05:40,380 --> 00:05:43,860
the DSG device file is posted a set of

114
00:05:43,860 --> 00:05:48,960
ioctl that closely mimic the native wddm

115
00:05:48,960 --> 00:05:53,299
kernels device layer on Windows

116
00:05:54,240 --> 00:05:57,180
now let's introduce the attack surface

117
00:05:57,180 --> 00:06:00,479
of hyper redirects component

118
00:06:00,479 --> 00:06:03,660
first of all let's introduce how the

119
00:06:03,660 --> 00:06:06,840
DirectX component is initialized in the

120
00:06:06,840 --> 00:06:09,120
Linux virtual machine

121
00:06:09,120 --> 00:06:12,000
the DSG vnp Channel init function

122
00:06:12,000 --> 00:06:15,660
invokes the VM bus open function

123
00:06:15,660 --> 00:06:19,620
to initialize a DSG cage Channel there

124
00:06:19,620 --> 00:06:22,259
are two functions here we will that will

125
00:06:22,259 --> 00:06:25,319
invoke the DSG VM bus Channel init

126
00:06:25,319 --> 00:06:28,860
function there are DSG global initi

127
00:06:28,860 --> 00:06:32,039
global Channel and the DSG adapters set

128
00:06:32,039 --> 00:06:35,400
members these two functions initialize a

129
00:06:35,400 --> 00:06:38,699
global dsgk Channel and the virtual GPU

130
00:06:38,699 --> 00:06:42,620
dsgk Channel respectively

131
00:06:42,620 --> 00:06:46,800
the DSG kernel Linux kernel module uses

132
00:06:46,800 --> 00:06:51,060
GSG vmb send sync message and the DSG

133
00:06:51,060 --> 00:06:53,580
will be sent a sync message

134
00:06:53,580 --> 00:06:56,759
to send DSG kernel commands to the host

135
00:06:56,759 --> 00:06:58,139
machine

136
00:06:58,139 --> 00:07:01,259
and the DSG VM bus Channel receive

137
00:07:01,259 --> 00:07:04,259
function is used to receive messages and

138
00:07:04,259 --> 00:07:08,060
commands from the host machine

139
00:07:08,280 --> 00:07:12,419
by reading the wsl2 Linux kernel source

140
00:07:12,419 --> 00:07:13,199
code

141
00:07:13,199 --> 00:07:15,240
you can see that there are mining

142
00:07:15,240 --> 00:07:18,440
commands available here

143
00:07:18,539 --> 00:07:21,960
a command message memory layout is as

144
00:07:21,960 --> 00:07:25,919
follows or command messages consist of a

145
00:07:25,919 --> 00:07:30,180
header of sets 0x18 and the message body

146
00:07:30,180 --> 00:07:33,419
the header consists of four members the

147
00:07:33,419 --> 00:07:36,479
Channel tape determines whether it is a

148
00:07:36,479 --> 00:07:40,500
virtual GPU Channel or Global Channel

149
00:07:40,500 --> 00:07:44,039
and the command tab determines which

150
00:07:44,039 --> 00:07:46,740
command to sign

151
00:07:46,740 --> 00:07:48,419
for example

152
00:07:48,419 --> 00:07:52,199
DSG ranb send the log 2 function says

153
00:07:52,199 --> 00:07:55,560
dsgk when we command log 2 command to

154
00:07:55,560 --> 00:07:57,300
The Host

155
00:07:57,300 --> 00:08:00,840
in the command V GPU to host in nick2

156
00:08:00,840 --> 00:08:04,319
function you can see the dsgk vmb

157
00:08:04,319 --> 00:08:07,500
command log 2 command is a virtual GPU

158
00:08:07,500 --> 00:08:09,660
Channel command

159
00:08:09,660 --> 00:08:13,020
and the dsgk when we command log to

160
00:08:13,020 --> 00:08:16,740
structure defines the format of the dsgk

161
00:08:16,740 --> 00:08:21,199
vmb command log to command message

162
00:08:22,039 --> 00:08:26,340
about data receiving in-house if gesture

163
00:08:26,340 --> 00:08:30,599
says psgk won't be command data host the

164
00:08:30,599 --> 00:08:34,799
rambus component will invoke DSG holds

165
00:08:34,799 --> 00:08:38,458
the virtual GPU when bus when bus

166
00:08:38,458 --> 00:08:42,419
Channel process packet or the DSG hosts

167
00:08:42,419 --> 00:08:45,959
Global VM bus VM bus Channel process

168
00:08:45,959 --> 00:08:48,600
private function according to the

169
00:08:48,600 --> 00:08:50,040
specific Channel

170
00:08:50,040 --> 00:08:52,860
and then reimburse process package

171
00:08:52,860 --> 00:08:55,260
function determines whether to find the

172
00:08:55,260 --> 00:08:57,480
Handler function corresponding to

173
00:08:57,480 --> 00:09:01,860
command tab in the DSG host Global VM

174
00:09:01,860 --> 00:09:05,160
bus VM bus command table VM to host the

175
00:09:05,160 --> 00:09:09,060
table or the DSG host virtual GPU VM bus

176
00:09:09,060 --> 00:09:12,060
when bus command table will GPU to host

177
00:09:12,060 --> 00:09:15,600
the table according to the channel tab

178
00:09:15,600 --> 00:09:19,920
finally enter the specific Handler

179
00:09:19,920 --> 00:09:24,000
function and continue the flow

180
00:09:24,000 --> 00:09:27,180
the cost to VM bus combined function is

181
00:09:27,180 --> 00:09:30,060
used to retrieve data from guests for

182
00:09:30,060 --> 00:09:32,700
example the value of the word at either

183
00:09:32,700 --> 00:09:36,360
offset 0x90 in the picture we process

184
00:09:36,360 --> 00:09:39,480
the list of the guest data

185
00:09:39,480 --> 00:09:43,620
and the keyword at A1 Option 0x88 will

186
00:09:43,620 --> 00:09:47,220
process the pointer of the dsgk command

187
00:09:47,220 --> 00:09:50,120
message data

188
00:09:50,580 --> 00:09:53,519
the VM bus complete function is used to

189
00:09:53,519 --> 00:09:57,120
send data to guests the second parameter

190
00:09:57,120 --> 00:10:00,180
of this function is did buffer the third

191
00:10:00,180 --> 00:10:03,060
parameter is the date buffer loans in

192
00:10:03,060 --> 00:10:06,480
this picture we emboss complete package

193
00:10:06,480 --> 00:10:11,240
will send in this stage value to the gas

194
00:10:13,980 --> 00:10:16,680
regarding the attack surface the attack

195
00:10:16,680 --> 00:10:19,200
surface is located in the three driver

196
00:10:19,200 --> 00:10:23,760
phase the S3 kernel the SG ms1 mms1 and

197
00:10:23,760 --> 00:10:27,240
the DSG I'm almost to

198
00:10:27,240 --> 00:10:30,480
there are a total of 87 handle functions

199
00:10:30,480 --> 00:10:33,180
corresponding to commands and each

200
00:10:33,180 --> 00:10:36,060
command also has a corresponding message

201
00:10:36,060 --> 00:10:41,180
structure it is a huge attack surface

202
00:10:41,880 --> 00:10:45,000
now I will further explain the attack

203
00:10:45,000 --> 00:10:47,760
surface about of the above mentioned

204
00:10:47,760 --> 00:10:51,240
hyper redirect as component using the

205
00:10:51,240 --> 00:10:53,279
four vulnerabilities of the hyper

206
00:10:53,279 --> 00:10:57,600
redirects components as examples

207
00:10:57,600 --> 00:11:01,940
the first one is the cve 2022

208
00:11:01,940 --> 00:11:05,640
21918 it is a non-pointer reference

209
00:11:05,640 --> 00:11:07,079
vulnerability

210
00:11:07,079 --> 00:11:09,420
the problem is with the vulnerability

211
00:11:09,420 --> 00:11:12,779
occurs in the dsgk when we command

212
00:11:12,779 --> 00:11:17,000
signal sync object command

213
00:11:17,040 --> 00:11:20,160
the root cause of this vulnerability is

214
00:11:20,160 --> 00:11:22,860
that's the fifth parameter of the width

215
00:11:22,860 --> 00:11:26,940
Shi signal sync object from CPU function

216
00:11:26,940 --> 00:11:30,120
references or non-pointer this picture

217
00:11:30,120 --> 00:11:32,279
is the stock battery is one is volume

218
00:11:32,279 --> 00:11:35,660
ability is triggered

219
00:11:36,360 --> 00:11:39,899
the read I say child signal sync objects

220
00:11:39,899 --> 00:11:42,000
from CPU function is shown in the

221
00:11:42,000 --> 00:11:42,839
picture

222
00:11:42,839 --> 00:11:45,540
the fifth parameter assigns the

223
00:11:45,540 --> 00:11:48,959
value to V12 and then the V12 the

224
00:11:48,959 --> 00:11:52,320
reference calls non-pointer reference

225
00:11:52,320 --> 00:11:56,339
a fifth parameter of the V8 with Shi

226
00:11:56,339 --> 00:11:59,399
signal sync objects from CPU function is

227
00:11:59,399 --> 00:12:02,459
assigned by the force parameter of the

228
00:12:02,459 --> 00:12:06,540
width sh signal sync objects from CPU

229
00:12:06,540 --> 00:12:08,399
function

230
00:12:08,399 --> 00:12:11,399
the read message single sync objects

231
00:12:11,399 --> 00:12:14,279
from CPU function will be invoked by the

232
00:12:14,279 --> 00:12:17,339
signal synchronization object from CPU

233
00:12:17,339 --> 00:12:20,040
function the fourth parameter of the

234
00:12:20,040 --> 00:12:23,579
read SCH single sync objects from CPU

235
00:12:23,579 --> 00:12:26,579
function is the value of preface values

236
00:12:26,579 --> 00:12:29,719
number of V5

237
00:12:30,540 --> 00:12:33,540
in the signal synchronization of object

238
00:12:33,540 --> 00:12:35,459
from CPU function

239
00:12:35,459 --> 00:12:40,740
V5 is assigned by A1 A1 points to a c3d

240
00:12:40,740 --> 00:12:44,579
kmt signal synchronization object from

241
00:12:44,579 --> 00:12:47,880
CPU structure the memory layout of this

242
00:12:47,880 --> 00:12:51,320
structure is shown in the picture

243
00:12:52,800 --> 00:12:56,339
in the DSG it holds the virtual GPU rear

244
00:12:56,339 --> 00:12:59,579
bus when bus signal sync object function

245
00:12:59,579 --> 00:13:02,579
the preface values number in the first

246
00:13:02,579 --> 00:13:05,040
parameter of the signal synchronization

247
00:13:05,040 --> 00:13:08,279
object from CPU function is assigned to

248
00:13:08,279 --> 00:13:10,620
the value v24

249
00:13:10,620 --> 00:13:15,000
as you can see v24 will be 0 if B22 is

250
00:13:15,000 --> 00:13:18,500
less than 3 17.

251
00:13:19,380 --> 00:13:22,440
now we need to understand the memory

252
00:13:22,440 --> 00:13:26,220
layout of the dsgk ramb command signal

253
00:13:26,220 --> 00:13:29,399
sync object command message as shown in

254
00:13:29,399 --> 00:13:32,040
the picture there are two members in the

255
00:13:32,040 --> 00:13:35,160
guest data members single sync object

256
00:13:35,160 --> 00:13:36,540
structure

257
00:13:36,540 --> 00:13:39,380
the command member is a header of Sex

258
00:13:39,380 --> 00:13:43,260
0x18 and the sync object member is the

259
00:13:43,260 --> 00:13:46,920
message body of the dsgk vmb command

260
00:13:46,920 --> 00:13:51,620
signal sync object structure tab

261
00:13:51,839 --> 00:13:54,060
in this diagram

262
00:13:54,060 --> 00:13:57,060
uh object handle array context array and

263
00:13:57,060 --> 00:13:59,700
the monitor defense value are variable

264
00:13:59,700 --> 00:14:03,120
learns a risk whose thus and offset are

265
00:14:03,120 --> 00:14:04,860
controlled by

266
00:14:04,860 --> 00:14:09,019
object count and context card

267
00:14:09,420 --> 00:14:10,560
so

268
00:14:10,560 --> 00:14:14,220
if we tell object count is one context

269
00:14:14,220 --> 00:14:18,500
count is zero and the V16 buffers is

270
00:14:18,500 --> 00:14:23,519
0x3c the v17 those of the monitor the

271
00:14:23,519 --> 00:14:26,639
first value array will be 8. creating

272
00:14:26,639 --> 00:14:29,940
offset of monitor the first value array

273
00:14:29,940 --> 00:14:33,480
will be 0x C 3C

274
00:14:33,480 --> 00:14:36,980
either line one five one in the picture

275
00:14:36,980 --> 00:14:42,779
v22 is equal to 316 Subtract with 18. so

276
00:14:42,779 --> 00:14:47,940
we 22 is equal to 0 and the v17 is equal

277
00:14:47,940 --> 00:14:51,899
to 8 which means the condition that

278
00:14:51,899 --> 00:14:58,860
we 22 is less than 3 17. so v24 will be

279
00:14:58,860 --> 00:15:01,399
ascended zero it will cause a number

280
00:15:01,399 --> 00:15:05,459
reference in the following process

281
00:15:05,459 --> 00:15:08,660
the POC code is divided into two parts

282
00:15:08,660 --> 00:15:12,300
the first part is used to create a sync

283
00:15:12,300 --> 00:15:15,360
handle and the second part is to use the

284
00:15:15,360 --> 00:15:19,380
to send the dsgk VMP command signal sync

285
00:15:19,380 --> 00:15:22,440
object command settings the numbers in

286
00:15:22,440 --> 00:15:26,160
the signal single sync object structure

287
00:15:26,160 --> 00:15:28,139
as shown in the picture will trigger

288
00:15:28,139 --> 00:15:31,160
this rolling ability

289
00:15:32,519 --> 00:15:34,880
the next one is series

290
00:15:34,880 --> 00:15:36,620
2021

291
00:15:36,620 --> 00:15:40,560
43219 it's also a non-pointer reference

292
00:15:40,560 --> 00:15:42,180
vulnerability

293
00:15:42,180 --> 00:15:44,820
the problem with this vulnerability

294
00:15:44,820 --> 00:15:48,899
occurs in the dsgk vmb command submit

295
00:15:48,899 --> 00:15:50,699
command command

296
00:15:50,699 --> 00:15:52,920
this picture is the stock factories

297
00:15:52,920 --> 00:15:56,839
where this vulnerability is triggered

298
00:15:57,959 --> 00:16:01,260
in the dsgk submit command internal

299
00:16:01,260 --> 00:16:04,920
function the second parameter of the DSG

300
00:16:04,920 --> 00:16:09,600
contest handle Western BLTs 2B function

301
00:16:09,600 --> 00:16:14,279
is we 37 history token

302
00:16:14,279 --> 00:16:18,420
and the value of v37 History token can

303
00:16:18,420 --> 00:16:22,099
be controlled by the guest machine

304
00:16:24,720 --> 00:16:28,620
in the DSG context Handle With The BLT

305
00:16:28,620 --> 00:16:32,820
SUV function if A2 percent history token

306
00:16:32,820 --> 00:16:35,279
is less than zero the code flow will

307
00:16:35,279 --> 00:16:38,639
enter this branch and invoke series 2K

308
00:16:38,639 --> 00:16:41,820
logs log function the first parameter of

309
00:16:41,820 --> 00:16:45,240
the cb3 2K logs log function is a series

310
00:16:45,240 --> 00:16:48,420
2K logs structure pointer

311
00:16:48,420 --> 00:16:51,720
Oneness vulnerability is triggered some

312
00:16:51,720 --> 00:16:55,139
members of the cb32k log structure are

313
00:16:55,139 --> 00:17:00,019
illegal now finally cause the psud

314
00:17:00,800 --> 00:17:04,380
the picture shows the POC code the first

315
00:17:04,380 --> 00:17:07,919
part is the grid contest handle the

316
00:17:07,919 --> 00:17:10,140
second part says to submit the command

317
00:17:10,140 --> 00:17:11,220
message

318
00:17:11,220 --> 00:17:14,880
settings the numbers in the submit CMD

319
00:17:14,880 --> 00:17:16,859
structure as shown in a picture will

320
00:17:16,859 --> 00:17:18,839
trigger this vulnerability

321
00:17:18,839 --> 00:17:21,839
in the POC code the present history

322
00:17:21,839 --> 00:17:24,720
token is less than zero

323
00:17:24,720 --> 00:17:27,179
the following is the debugging process

324
00:17:27,179 --> 00:17:30,480
first to set a breakpoint at the dsgk

325
00:17:30,480 --> 00:17:36,000
submit command internal offset 0x a a69

326
00:17:36,000 --> 00:17:38,280
h90

327
00:17:38,280 --> 00:17:40,740
Monte budget excluses the breakpoint

328
00:17:40,740 --> 00:17:43,260
check the second parameter percent

329
00:17:43,260 --> 00:17:47,039
history token it is less than zero value

330
00:17:47,039 --> 00:17:51,000
single step tracing into cv32k log stock

331
00:17:51,000 --> 00:17:54,299
is invoked and display the memory

332
00:17:54,299 --> 00:17:57,480
pointed to by the first parameter you

333
00:17:57,480 --> 00:18:00,480
can see that many members in the cbc2k

334
00:18:00,480 --> 00:18:03,120
logs structure are not initialized

335
00:18:03,120 --> 00:18:06,059
so this and initialize the values are

336
00:18:06,059 --> 00:18:09,299
referenced in the series 2K logs log

337
00:18:09,299 --> 00:18:13,160
function and the cost of crash

338
00:18:13,559 --> 00:18:20,220
the next one is the cve 2022 21912

339
00:18:20,400 --> 00:18:22,740
it is the arbitrary address read

340
00:18:22,740 --> 00:18:24,120
vulnerability

341
00:18:24,120 --> 00:18:26,400
the problem with this worrying ability

342
00:18:26,400 --> 00:18:31,799
occurs in the DSG vmb command with four

343
00:18:31,799 --> 00:18:34,860
sync object from GPU command this

344
00:18:34,860 --> 00:18:38,418
picture is the stock factories

345
00:18:38,760 --> 00:18:42,480
the memory layout of the dsgk ramb

346
00:18:42,480 --> 00:18:45,360
command with four sync object from GPU

347
00:18:45,360 --> 00:18:47,710
command message is shown in the diagram

348
00:18:47,710 --> 00:18:50,819
[Music]

349
00:18:51,960 --> 00:18:55,380
in the DSG host virtual GPU rambus we

350
00:18:55,380 --> 00:18:58,140
unbox with four sync object from GPU

351
00:18:58,140 --> 00:19:02,179
function if like scene first object is 1

352
00:19:02,179 --> 00:19:05,700
sync GPU first value will be assigned to

353
00:19:05,700 --> 00:19:08,400
DST pfans value

354
00:19:08,400 --> 00:19:14,539
and we 23 will be assigned to zero

355
00:19:14,700 --> 00:19:18,240
the fourth parameter of the dsgk made

356
00:19:18,240 --> 00:19:20,700
for synchronization object from GPU

357
00:19:20,700 --> 00:19:23,160
internal function is zero now

358
00:19:23,160 --> 00:19:26,160
at the red mark the Cosby file is equal

359
00:19:26,160 --> 00:19:29,160
to zero Source defense value will be

360
00:19:29,160 --> 00:19:33,179
ascended to V5 and the source PPS value

361
00:19:33,179 --> 00:19:36,299
can be controlled by gas to machine

362
00:19:36,299 --> 00:19:39,660
in the following code flow V5 will be

363
00:19:39,660 --> 00:19:42,900
used as the third parameter of the wait

364
00:19:42,900 --> 00:19:45,840
for synchronization object from GPU

365
00:19:45,840 --> 00:19:47,460
function

366
00:19:47,460 --> 00:19:50,760
in the wait for synchronization object

367
00:19:50,760 --> 00:19:54,720
from GPU function return is equal to A3

368
00:19:54,720 --> 00:19:57,600
at the red mark we can actually

369
00:19:57,600 --> 00:19:59,940
reference the directory and the cost

370
00:19:59,940 --> 00:20:03,320
arbitrary address rate

371
00:20:03,960 --> 00:20:07,140
the POC code is divided into three parts

372
00:20:07,140 --> 00:20:10,620
the first part is to create a context

373
00:20:10,620 --> 00:20:13,440
handle the second part is to create a

374
00:20:13,440 --> 00:20:16,500
sync handle the third part says the with

375
00:20:16,500 --> 00:20:19,200
fault sync object from GPU command

376
00:20:19,200 --> 00:20:20,340
message

377
00:20:20,340 --> 00:20:22,860
such is the members I show in the

378
00:20:22,860 --> 00:20:25,440
picture to trigger this vulnerability

379
00:20:25,440 --> 00:20:30,480
and the read data from address 0x41414

380
00:20:30,960 --> 00:20:33,120
the following is the debugging process

381
00:20:33,120 --> 00:20:35,700
let's set up report and read for

382
00:20:35,700 --> 00:20:40,100
synchronization objects from GPU offset

383
00:20:40,100 --> 00:20:44,220
0x1945 one dimashi excuses the Greek

384
00:20:44,220 --> 00:20:47,640
Point check the eyes are register and

385
00:20:47,640 --> 00:20:51,419
the value of isi is 414141 we can

386
00:20:51,419 --> 00:20:53,340
control this register from a guest

387
00:20:53,340 --> 00:20:54,720
machine

388
00:20:54,720 --> 00:20:58,080
the last one vulnerability is the cve

389
00:20:58,080 --> 00:21:00,320
2022

390
00:21:00,320 --> 00:21:03,780
1898 it is arbitrary address right

391
00:21:03,780 --> 00:21:05,400
vulnerability

392
00:21:05,400 --> 00:21:07,200
the problem with this vulnerability

393
00:21:07,200 --> 00:21:10,679
occurs in the dsgk VMP command Summit

394
00:21:10,679 --> 00:21:13,559
will present history token command

395
00:21:13,559 --> 00:21:17,700
this picture is the stock factories

396
00:21:17,700 --> 00:21:21,240
the memory layout of the dsgk ramb

397
00:21:21,240 --> 00:21:23,520
command submit will present history

398
00:21:23,520 --> 00:21:25,919
token command message showing in the

399
00:21:25,919 --> 00:21:26,940
diagram

400
00:21:26,940 --> 00:21:30,299
in the DSG host the virtual GPU VM bus

401
00:21:30,299 --> 00:21:33,059
when bus submit will present history

402
00:21:33,059 --> 00:21:36,900
token function percent unknown 4 is used

403
00:21:36,900 --> 00:21:40,080
as the service parameter of the DSG

404
00:21:40,080 --> 00:21:43,080
adapter submit percent history token

405
00:21:43,080 --> 00:21:45,840
from VM function

406
00:21:45,840 --> 00:21:49,200
in the DSG adapter submit present

407
00:21:49,200 --> 00:21:53,159
history token from VM function itself is

408
00:21:53,159 --> 00:21:57,240
related to the address of read 29 offset

409
00:21:57,240 --> 00:21:59,640
0x300

410
00:21:59,640 --> 00:22:04,380
and then read Shi sh submit command

411
00:22:04,380 --> 00:22:06,799
contest to this function will be invoked

412
00:22:06,799 --> 00:22:09,780
v29 is the first parameter of this

413
00:22:09,780 --> 00:22:11,640
function

414
00:22:11,640 --> 00:22:13,740
as shown in a picture the second

415
00:22:13,740 --> 00:22:17,220
parameter of the read SC time redirected

416
00:22:17,220 --> 00:22:20,220
flat with all sync object function is

417
00:22:20,220 --> 00:22:22,620
the first parameter of the bead SCH

418
00:22:22,620 --> 00:22:26,039
submit contest command command context

419
00:22:26,039 --> 00:22:28,760
disfunction

420
00:22:29,280 --> 00:22:32,700
in this picture the second parameter of

421
00:22:32,700 --> 00:22:35,580
bid SC chart acquire private data

422
00:22:35,580 --> 00:22:37,320
reference function is the first

423
00:22:37,320 --> 00:22:40,340
parameter of read SC check

424
00:22:40,340 --> 00:22:43,620
redirected with our sync object function

425
00:22:43,620 --> 00:22:47,100
at 0x238

426
00:22:48,360 --> 00:22:50,940
indeed I say child acquire private

427
00:22:50,940 --> 00:22:55,559
reference function when we two is zero

428
00:22:55,559 --> 00:22:58,919
the keyword value at the address of A2

429
00:22:58,919 --> 00:23:03,299
of Z 0 xc8 will be written to V4

430
00:23:03,299 --> 00:23:08,220
the value of V2 is V6 in the I'm sorry

431
00:23:08,220 --> 00:23:13,080
the value of H2O is V6 in the read I say

432
00:23:13,080 --> 00:23:15,480
chart redirected flat with our sync

433
00:23:15,480 --> 00:23:17,240
object function at

434
00:23:17,240 --> 00:23:19,280
0x238

435
00:23:19,280 --> 00:23:25,740
0x238 at 0x C8 is equal to zero X300 so

436
00:23:25,740 --> 00:23:28,380
the keyword value at address of A2

437
00:23:28,380 --> 00:23:33,179
offset 0x C8 is the A7 and no4 in the

438
00:23:33,179 --> 00:23:36,780
DSG adapter submit percent history token

439
00:23:36,780 --> 00:23:38,880
from VM function

440
00:23:38,880 --> 00:23:41,400
the following is the code flow adding

441
00:23:41,400 --> 00:23:45,539
one should address of a V4 of set 0xc

442
00:23:45,539 --> 00:23:48,600
cause arbitrary address right since V4

443
00:23:48,600 --> 00:23:51,960
is equal to unknown 4.

444
00:23:51,960 --> 00:23:54,600
the first part of POC code is a Creator

445
00:23:54,600 --> 00:23:57,780
sync handle the second part says the

446
00:23:57,780 --> 00:24:00,900
dsgk vnb command submit will present

447
00:24:00,900 --> 00:24:03,299
history token command message

448
00:24:03,299 --> 00:24:05,340
setting the members as shown in the

449
00:24:05,340 --> 00:24:09,059
picture will trigger this vulnerability

450
00:24:09,059 --> 00:24:11,460
the following is the debugging process

451
00:24:11,460 --> 00:24:13,860
as shown in the picture when this

452
00:24:13,860 --> 00:24:15,960
vulnerability is triggered it will

453
00:24:15,960 --> 00:24:20,360
finally cause arbitrary address right

454
00:24:20,460 --> 00:24:23,039
let's talk about fast why fast is

455
00:24:23,039 --> 00:24:25,380
necessary

456
00:24:25,380 --> 00:24:26,760
first

457
00:24:26,760 --> 00:24:29,520
hyper redirect as components has a large

458
00:24:29,520 --> 00:24:33,000
quantity of codes second there are 87

459
00:24:33,000 --> 00:24:35,039
commands under their corresponding

460
00:24:35,039 --> 00:24:38,280
structures reality members in a specific

461
00:24:38,280 --> 00:24:41,700
structure can be very effective

462
00:24:41,700 --> 00:24:44,820
and many commands depend on contexts

463
00:24:44,820 --> 00:24:47,940
such as some commands depend on Direct

464
00:24:47,940 --> 00:24:51,539
handle allocation handle meanwhile the

465
00:24:51,539 --> 00:24:53,880
properties of the handle such as the

466
00:24:53,880 --> 00:24:56,520
properties of the allocation handle will

467
00:24:56,520 --> 00:24:59,340
also affect the commands that refer to

468
00:24:59,340 --> 00:25:02,400
it below in this case it is more

469
00:25:02,400 --> 00:25:04,799
efficient to use fast and about

470
00:25:04,799 --> 00:25:07,380
vulnerabilities were all discovered by

471
00:25:07,380 --> 00:25:09,419
fast

472
00:25:09,419 --> 00:25:13,140
a simple bus a texture as shown in the

473
00:25:13,140 --> 00:25:16,020
picture the password is deployed in the

474
00:25:16,020 --> 00:25:17,220
guest machine

475
00:25:17,220 --> 00:25:20,280
the major function of the driver part of

476
00:25:20,280 --> 00:25:23,520
the faster is the agent layer

477
00:25:23,520 --> 00:25:26,480
which is used to send the DSG kernel

478
00:25:26,480 --> 00:25:29,580
command data obtained from the user

479
00:25:29,580 --> 00:25:32,220
model program to the host direct s

480
00:25:32,220 --> 00:25:33,960
component

481
00:25:33,960 --> 00:25:37,380
and the received data from hosted direct

482
00:25:37,380 --> 00:25:40,500
s component and the return data to user

483
00:25:40,500 --> 00:25:41,880
mode program

484
00:25:41,880 --> 00:25:44,220
the major functions of the New Zealand

485
00:25:44,220 --> 00:25:47,400
part of the faster are some mutated DSG

486
00:25:47,400 --> 00:25:49,740
kernel command data and the received

487
00:25:49,740 --> 00:25:51,840
data returned from the kernel module

488
00:25:51,840 --> 00:25:54,360
such as the return data of create

489
00:25:54,360 --> 00:25:57,179
allocation command

490
00:25:57,179 --> 00:25:59,880
the user then faster contains two core

491
00:25:59,880 --> 00:26:01,679
modules

492
00:26:01,679 --> 00:26:04,200
the data center and the received module

493
00:26:04,200 --> 00:26:06,480
is used to communicate with the driver

494
00:26:06,480 --> 00:26:10,020
and hardness mode module is used to

495
00:26:10,020 --> 00:26:12,960
hardness generate

496
00:26:12,960 --> 00:26:15,779
for example by mutating the members of

497
00:26:15,779 --> 00:26:18,840
the dsgk VMV command signal sync object

498
00:26:18,840 --> 00:26:22,080
structure in the dsgk vmb command signal

499
00:26:22,080 --> 00:26:24,539
sync object command message the above

500
00:26:24,539 --> 00:26:26,340
mentioned non-pointer reference

501
00:26:26,340 --> 00:26:30,320
variability was discovered

502
00:26:30,720 --> 00:26:33,779
now let's conclusion

503
00:26:33,779 --> 00:26:36,659
there are some of my opinions are hyper

504
00:26:36,659 --> 00:26:40,500
rated as a attack surface

505
00:26:40,500 --> 00:26:44,220
security research this attack surface is

506
00:26:44,220 --> 00:26:46,860
still worth researching because the

507
00:26:46,860 --> 00:26:50,640
hyper redirects components has a large

508
00:26:50,640 --> 00:26:53,220
attack surface under still being update

509
00:26:53,220 --> 00:26:56,940
so far about application scenarios happy

510
00:26:56,940 --> 00:27:00,240
returns component application scenarios

511
00:27:00,240 --> 00:27:03,840
include wtag Windows sandbox and

512
00:27:03,840 --> 00:27:07,620
homeowners to emulate since virtual

513
00:27:07,620 --> 00:27:09,779
machines connectively support DirectX

514
00:27:09,779 --> 00:27:12,720
online 3D gaming may become possible in

515
00:27:12,720 --> 00:27:14,700
the future I guess about body

516
00:27:14,700 --> 00:27:17,600
unfortunately

517
00:27:22,460 --> 00:27:25,679
but also thanks have msrc for the

518
00:27:25,679 --> 00:27:28,440
patient communication

519
00:27:28,440 --> 00:27:31,020
those three takeaways included in my

520
00:27:31,020 --> 00:27:33,419
presentation are explosed first I

521
00:27:33,419 --> 00:27:35,940
introduced the hyper redirects component

522
00:27:35,940 --> 00:27:39,419
architecture overview and how to enable

523
00:27:39,419 --> 00:27:42,120
hyper radio as component in Happily

524
00:27:42,120 --> 00:27:45,000
virtual machine configuration so

525
00:27:45,000 --> 00:27:47,520
introduce the attack surface of hyper

526
00:27:47,520 --> 00:27:50,400
redirectx component and how to find the

527
00:27:50,400 --> 00:27:52,740
vulnerabilities in this attack surface

528
00:27:52,740 --> 00:27:55,700
through fasting third

529
00:27:55,700 --> 00:28:00,240
this close the internal details of the

530
00:28:00,240 --> 00:28:02,400
four hypery DLS components

531
00:28:02,400 --> 00:28:05,580
vulnerabilities providing reference for

532
00:28:05,580 --> 00:28:07,620
vending vulnerabilities in this new

533
00:28:07,620 --> 00:28:10,140
attack surface

534
00:28:10,140 --> 00:28:13,120
thank you for listening

535
00:28:13,120 --> 00:28:16,229
[Music]

536
00:28:20,070 --> 00:28:23,179
[Music]

