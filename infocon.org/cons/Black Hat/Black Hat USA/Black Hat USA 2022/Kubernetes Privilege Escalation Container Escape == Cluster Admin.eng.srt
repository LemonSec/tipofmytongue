1
00:00:01,700 --> 00:00:04,810
[Music]

2
00:00:07,820 --> 00:00:11,219
hey can everyone hear me in the back

3
00:00:11,219 --> 00:00:13,139
yeah that's awesome so thank you for

4
00:00:13,139 --> 00:00:14,420
joining

5
00:00:14,420 --> 00:00:16,980
and this is Joel Ben high and today

6
00:00:16,980 --> 00:00:18,359
we're going to try to answer a simple

7
00:00:18,359 --> 00:00:20,580
question does a single container Escape

8
00:00:20,580 --> 00:00:23,400
allow an attacker to take over an entire

9
00:00:23,400 --> 00:00:25,439
kubernetes cluster and we hope that by

10
00:00:25,439 --> 00:00:27,240
answering it we can share some insight

11
00:00:27,240 --> 00:00:28,980
that we learned into kubernetes

12
00:00:28,980 --> 00:00:31,080
privilege escalation so a bit about

13
00:00:31,080 --> 00:00:33,180
ourselves we are Cloud together

14
00:00:33,180 --> 00:00:35,040
researchers from Palo Alto networks so

15
00:00:35,040 --> 00:00:36,840
we do vulnerability research and Freight

16
00:00:36,840 --> 00:00:38,940
hunting in the cloud so searching for

17
00:00:38,940 --> 00:00:41,399
vulnerabilities in infrastructure

18
00:00:41,399 --> 00:00:43,020
components of the cloud and also in

19
00:00:43,020 --> 00:00:45,239
cloud service providers and we also look

20
00:00:45,239 --> 00:00:47,760
for a threat groups that Target Cloud

21
00:00:47,760 --> 00:00:49,860
environments specifically

22
00:00:49,860 --> 00:00:51,840
so that's enough about yourself our

23
00:00:51,840 --> 00:00:53,579
agenda for today we're going to start

24
00:00:53,579 --> 00:00:55,739
off by talking about container escape

25
00:00:55,739 --> 00:00:58,020
this thread that we keep hearing about

26
00:00:58,020 --> 00:01:00,600
and try to really understand what's the

27
00:01:00,600 --> 00:01:02,219
actual blast radius

28
00:01:02,219 --> 00:01:04,739
we'll then do a quick kubernetes 101

29
00:01:04,739 --> 00:01:07,320
just to get everyone on the same page

30
00:01:07,320 --> 00:01:08,760
we'll continue to talk about what

31
00:01:08,760 --> 00:01:10,680
happens after a container Escape what

32
00:01:10,680 --> 00:01:12,780
resources does an attacker have to

33
00:01:12,780 --> 00:01:14,820
spread in the cluster and will see

34
00:01:14,820 --> 00:01:16,740
several attack classes that attackers

35
00:01:16,740 --> 00:01:18,540
can abuse in order to escalate

36
00:01:18,540 --> 00:01:19,799
privileges

37
00:01:19,799 --> 00:01:22,740
will then have enough resources in order

38
00:01:22,740 --> 00:01:24,780
to answer our question does the

39
00:01:24,780 --> 00:01:27,180
container Escape equal full cluster

40
00:01:27,180 --> 00:01:28,860
compromise and we'll answer it both

41
00:01:28,860 --> 00:01:31,380
generally but also specifically in the

42
00:01:31,380 --> 00:01:33,600
most popular kubernetes platforms today

43
00:01:33,600 --> 00:01:35,520
we'll wrap it up with by talking about

44
00:01:35,520 --> 00:01:37,140
some of the fixes that the affected

45
00:01:37,140 --> 00:01:40,680
platforms put out and we'll also uh talk

46
00:01:40,680 --> 00:01:42,119
about some takeaways that you can take

47
00:01:42,119 --> 00:01:43,860
from this presentation

48
00:01:43,860 --> 00:01:46,079
so with that I'll place the mic to show

49
00:01:46,079 --> 00:01:49,560
to talk about container escapes

50
00:01:49,560 --> 00:01:52,560
thank you Val hello everyone let's start

51
00:01:52,560 --> 00:01:55,259
to talk about the container Escape

52
00:01:55,259 --> 00:01:58,020
so ever ever since container came into

53
00:01:58,020 --> 00:01:59,640
our life we've been hearing more and

54
00:01:59,640 --> 00:02:01,380
more about container Escape in a sense

55
00:02:01,380 --> 00:02:04,579
of vulnerability kernel vulnerability

56
00:02:04,579 --> 00:02:07,680
misconfiguration uh vulnerability in

57
00:02:07,680 --> 00:02:09,720
Docker and kubernetes and here we're

58
00:02:09,720 --> 00:02:11,280
here in Black a few years ago there was

59
00:02:11,280 --> 00:02:14,879
a great talk about container Escape

60
00:02:14,879 --> 00:02:18,420
so the obvious question is do container

61
00:02:18,420 --> 00:02:21,180
actually contain

62
00:02:21,180 --> 00:02:23,580
there is no doubt that containers are

63
00:02:23,580 --> 00:02:25,080
great for packaging and deploying

64
00:02:25,080 --> 00:02:26,879
software this is the reason why we all

65
00:02:26,879 --> 00:02:28,200
use them

66
00:02:28,200 --> 00:02:30,900
but their work security boundary mostly

67
00:02:30,900 --> 00:02:32,879
because of the shared kernel in a

68
00:02:32,879 --> 00:02:34,739
nutshell the same Linux kernel

69
00:02:34,739 --> 00:02:37,319
vulnerability that allow unprivileged

70
00:02:37,319 --> 00:02:39,840
user to become a root can often use to

71
00:02:39,840 --> 00:02:42,000
escape from container and take over the

72
00:02:42,000 --> 00:02:43,560
underlying host

73
00:02:43,560 --> 00:02:45,959
that's because the Linux kernel attack

74
00:02:45,959 --> 00:02:48,420
surface is simply too big and we

75
00:02:48,420 --> 00:02:49,860
probably continue to see more and more

76
00:02:49,860 --> 00:02:53,180
variant of container Escape

77
00:02:53,180 --> 00:02:55,860
only in 2022 we introduced at least a

78
00:02:55,860 --> 00:02:58,440
dozen vulnerability of container Escape

79
00:02:58,440 --> 00:03:00,840
but escaping from a container can also

80
00:03:00,840 --> 00:03:03,120
happen because of misconfiguration the

81
00:03:03,120 --> 00:03:04,980
most known wire is privileged container

82
00:03:04,980 --> 00:03:07,019
with access to the host

83
00:03:07,019 --> 00:03:09,360
we also introduce a trade actors that

84
00:03:09,360 --> 00:03:12,420
exploiting container escape to spread in

85
00:03:12,420 --> 00:03:14,459
the Victor environment for crypto mining

86
00:03:14,459 --> 00:03:16,800
for example

87
00:03:16,800 --> 00:03:19,860
so we understand that container Escape

88
00:03:19,860 --> 00:03:21,959
will probably continue to happen and

89
00:03:21,959 --> 00:03:23,220
it's here to stay

90
00:03:23,220 --> 00:03:28,200
so we must understand what is the impact

91
00:03:28,200 --> 00:03:30,720
the obvious impact in kubernetes at

92
00:03:30,720 --> 00:03:33,420
least is a compromise node an attacker

93
00:03:33,420 --> 00:03:35,159
will previously compromise one container

94
00:03:35,159 --> 00:03:38,280
or one pods and now has a control over

95
00:03:38,280 --> 00:03:40,560
the entire node probably for more

96
00:03:40,560 --> 00:03:42,599
business logic or more Computer

97
00:03:42,599 --> 00:03:46,620
Resources for crypto mining for example

98
00:03:46,620 --> 00:03:50,280
but just imagine that our attacker is an

99
00:03:50,280 --> 00:03:52,319
ambitious one and it might be not

100
00:03:52,319 --> 00:03:54,480
satisfied with only single compromise

101
00:03:54,480 --> 00:03:57,540
node it'd be maybe might want to take

102
00:03:57,540 --> 00:04:00,659
over the entire the entire cluster

103
00:04:00,659 --> 00:04:03,120
and this is the question we will try to

104
00:04:03,120 --> 00:04:05,819
answer today if a scenario of a single

105
00:04:05,819 --> 00:04:08,459
container Escape could be escalated to

106
00:04:08,459 --> 00:04:10,739
full cluster admin access

107
00:04:10,739 --> 00:04:12,780
and if you are asking yourself what is

108
00:04:12,780 --> 00:04:13,980
the motivation

109
00:04:13,980 --> 00:04:16,260
you may want to take over other services

110
00:04:16,260 --> 00:04:19,260
or databases or even get some credential

111
00:04:19,260 --> 00:04:22,199
secrets to try to spread out outside our

112
00:04:22,199 --> 00:04:24,180
cluster to add other interesting

113
00:04:24,180 --> 00:04:26,900
environments

114
00:04:27,120 --> 00:04:30,180
just a quick terminology we're going to

115
00:04:30,180 --> 00:04:32,759
use today two terms admin and admin

116
00:04:32,759 --> 00:04:35,400
equivalent when we'll say admin one

117
00:04:35,400 --> 00:04:37,080
meaning that you can do any kind of

118
00:04:37,080 --> 00:04:40,680
operation all all the namespaces

119
00:04:40,680 --> 00:04:42,960
and admin equivalent is mean that you

120
00:04:42,960 --> 00:04:45,960
have enough permission that in one or

121
00:04:45,960 --> 00:04:48,419
two trivial steps you can become

122
00:04:48,419 --> 00:04:50,280
an admin

123
00:04:50,280 --> 00:04:51,720
but

124
00:04:51,720 --> 00:04:54,300
just before we continue we will do some

125
00:04:54,300 --> 00:04:57,180
quick kubernetes 101 just to make sure

126
00:04:57,180 --> 00:05:01,259
that we are all on the on the same page

127
00:05:01,259 --> 00:05:03,419
so in a one sentence kubernetes

128
00:05:03,419 --> 00:05:06,419
orchestrated POD containers on an old on

129
00:05:06,419 --> 00:05:07,919
virtual machine

130
00:05:07,919 --> 00:05:10,280
and basically today it's everywhere

131
00:05:10,280 --> 00:05:12,840
mostly heavily using Linux workload

132
00:05:12,840 --> 00:05:15,120
mostly on cloud on-prem and it's very

133
00:05:15,120 --> 00:05:17,699
interesting environment for an attacker

134
00:05:17,699 --> 00:05:20,699
we have the API server which is the

135
00:05:20,699 --> 00:05:23,820
cluster Gateway or brain and user can

136
00:05:23,820 --> 00:05:25,919
communicate with API server using

137
00:05:25,919 --> 00:05:27,320
kubernetes

138
00:05:27,320 --> 00:05:30,240
using Cube cattle the kubernetes CLI

139
00:05:30,240 --> 00:05:33,000
tool then the API will schedule a pod

140
00:05:33,000 --> 00:05:37,800
under on the underlying node

141
00:05:37,800 --> 00:05:41,639
and we'll operate this kind of operation

142
00:05:41,639 --> 00:05:43,919
a little bit about authentication you

143
00:05:43,919 --> 00:05:45,419
can either authenticate using

144
00:05:45,419 --> 00:05:48,060
certificate this is how user and nodes

145
00:05:48,060 --> 00:05:50,100
are authenticated or you can use service

146
00:05:50,100 --> 00:05:52,259
account token this is how pods

147
00:05:52,259 --> 00:05:54,060
authenticate

148
00:05:54,060 --> 00:05:56,479
and a little bit about authorization

149
00:05:56,479 --> 00:05:59,039
permission expressed in kubernetes as a

150
00:05:59,039 --> 00:06:01,800
verbs and resources likely secret create

151
00:06:01,800 --> 00:06:04,979
a pod update node delete services and so

152
00:06:04,979 --> 00:06:07,740
on and those permission group into a

153
00:06:07,740 --> 00:06:10,380
wall and when you want to Grant a

154
00:06:10,380 --> 00:06:13,080
permission to some identity you use a

155
00:06:13,080 --> 00:06:16,340
roll biting to do this

156
00:06:16,740 --> 00:06:19,919
and if it was a little bit complicated

157
00:06:19,919 --> 00:06:22,139
let's do a quick example

158
00:06:22,139 --> 00:06:24,780
here we have our wall who can list

159
00:06:24,780 --> 00:06:27,360
services and list spot and we want to

160
00:06:27,360 --> 00:06:29,340
Grant this permission to our identity to

161
00:06:29,340 --> 00:06:31,979
our pod so we will bind

162
00:06:31,979 --> 00:06:34,139
this role to the service account and

163
00:06:34,139 --> 00:06:36,479
when the Pod will running it will use

164
00:06:36,479 --> 00:06:39,960
this this token in in our case you can

165
00:06:39,960 --> 00:06:42,479
list services and list spots

166
00:06:42,479 --> 00:06:45,000
so that's enough for the kubernetes one

167
00:06:45,000 --> 00:06:47,300
on one

168
00:06:51,360 --> 00:06:53,940
back to our research

169
00:06:53,940 --> 00:06:56,039
let's try to understand now

170
00:06:56,039 --> 00:06:57,840
what will happen

171
00:06:57,840 --> 00:07:00,660
once an attacker can escape from Escape

172
00:07:00,660 --> 00:07:02,280
from container

173
00:07:02,280 --> 00:07:05,759
so before uh in order to do that to do

174
00:07:05,759 --> 00:07:06,479
so

175
00:07:06,479 --> 00:07:08,160
we need to understand which kind of

176
00:07:08,160 --> 00:07:11,039
credentials we have in our node

177
00:07:11,039 --> 00:07:12,720
so the first is the cubelet permission

178
00:07:12,720 --> 00:07:15,840
the cubelete is the node agent who can

179
00:07:15,840 --> 00:07:18,720
manage and facilitate all the

180
00:07:18,720 --> 00:07:20,940
facilitate the node so obviously as a

181
00:07:20,940 --> 00:07:22,560
set of formation that allow you to do

182
00:07:22,560 --> 00:07:24,060
this

183
00:07:24,060 --> 00:07:26,880
but fortunately kubernetes restricted

184
00:07:26,880 --> 00:07:30,000
the cubelet permission and if you if we

185
00:07:30,000 --> 00:07:32,340
are talking about meaningful attack

186
00:07:32,340 --> 00:07:35,160
so the cubelet is not the address it's

187
00:07:35,160 --> 00:07:38,340
true an attacker can manage to perform

188
00:07:38,340 --> 00:07:40,680
some limited attack like denial of

189
00:07:40,680 --> 00:07:43,680
service or maybe to get some primitive

190
00:07:43,680 --> 00:07:46,560
read or something like this but if we

191
00:07:46,560 --> 00:07:47,940
are talking about meaningful attack like

192
00:07:47,940 --> 00:07:49,740
full cluster admin

193
00:07:49,740 --> 00:07:52,380
so the cubelet is not the address

194
00:07:52,380 --> 00:07:54,840
but there are also another set of

195
00:07:54,840 --> 00:07:57,240
credentials on the Node which is the

196
00:07:57,240 --> 00:08:01,199
service account of the neighbor pods

197
00:08:01,199 --> 00:08:04,259
and the permission of value because it's

198
00:08:04,259 --> 00:08:05,759
depend on which application running on

199
00:08:05,759 --> 00:08:08,460
your ports it depends on your nodes and

200
00:08:08,460 --> 00:08:10,440
depending on which platform you are

201
00:08:10,440 --> 00:08:12,419
running your own cluster

202
00:08:12,419 --> 00:08:16,199
so an attacker might be it might be not

203
00:08:16,199 --> 00:08:20,940
has a way to to succeed a powerful

204
00:08:20,940 --> 00:08:24,620
permission but at least he has a chance

205
00:08:24,620 --> 00:08:27,960
because the cubelet permission will be

206
00:08:27,960 --> 00:08:30,180
the same restricted permission on every

207
00:08:30,180 --> 00:08:32,840
single node

208
00:08:35,099 --> 00:08:37,740
and today we're going to talk about this

209
00:08:37,740 --> 00:08:40,380
scenario exactly where we have extremely

210
00:08:40,380 --> 00:08:43,440
powerful pod and we name it trampoline

211
00:08:43,440 --> 00:08:44,760
pod

212
00:08:44,760 --> 00:08:47,519
that can have enough permission that can

213
00:08:47,519 --> 00:08:51,180
bounce you to around the cluster to jump

214
00:08:51,180 --> 00:08:53,100
to other node to get some high privilege

215
00:08:53,100 --> 00:08:55,320
and basically let the attacker have some

216
00:08:55,320 --> 00:08:58,100
fun in your cluster

217
00:08:58,580 --> 00:09:04,260
so where those trampoline pods can be

218
00:09:04,260 --> 00:09:06,779
let's see which kind of part are running

219
00:09:06,779 --> 00:09:09,600
in our typical average node

220
00:09:09,600 --> 00:09:13,800
first the application like redis engines

221
00:09:13,800 --> 00:09:17,519
mongodb or our python or golang

222
00:09:17,519 --> 00:09:19,920
application

223
00:09:19,920 --> 00:09:21,899
then commonly kubernetes we have the

224
00:09:21,899 --> 00:09:25,140
add-ons like Ezio for service smash or

225
00:09:25,140 --> 00:09:27,959
parameters for login or upper gatekeeper

226
00:09:27,959 --> 00:09:30,959
or convert for policy enforcement

227
00:09:30,959 --> 00:09:33,540
and finally finally there is the system

228
00:09:33,540 --> 00:09:36,899
pod the infrastructure Port like Q proxy

229
00:09:36,899 --> 00:09:38,580
and core DNS

230
00:09:38,580 --> 00:09:41,880
and those spots was already there

231
00:09:41,880 --> 00:09:44,940
when we are setting up our cluster and

232
00:09:44,940 --> 00:09:46,920
it basically depends on which platform

233
00:09:46,920 --> 00:09:49,620
we are running your cluster

234
00:09:49,620 --> 00:09:52,680
so as you already know this the system

235
00:09:52,680 --> 00:09:55,860
pod and in some scenario also the add-on

236
00:09:55,860 --> 00:09:58,740
pods are quite a blind spot because we

237
00:09:58,740 --> 00:10:01,560
didn't manage them configuration

238
00:10:01,560 --> 00:10:02,880
laughs

239
00:10:02,880 --> 00:10:06,180
add-on spots we just installed add-on

240
00:10:06,180 --> 00:10:08,040
spots using a package manager like

241
00:10:08,040 --> 00:10:10,560
helpful example and the author of The

242
00:10:10,560 --> 00:10:13,500
add-ons configure them permission

243
00:10:13,500 --> 00:10:15,600
and for system pods

244
00:10:15,600 --> 00:10:17,640
there was already there when the cluster

245
00:10:17,640 --> 00:10:21,180
was created so of course we didn't

246
00:10:21,180 --> 00:10:25,200
control or made it them permission

247
00:10:25,200 --> 00:10:28,920
and another interesting thing about

248
00:10:28,920 --> 00:10:31,740
system pods and in some scenario also

249
00:10:31,740 --> 00:10:34,019
the add-on spots that the deploy and

250
00:10:34,019 --> 00:10:36,420
install as a demon set which means they

251
00:10:36,420 --> 00:10:38,820
are running on every single node in our

252
00:10:38,820 --> 00:10:41,360
cluster

253
00:10:44,579 --> 00:10:47,040
foreign

254
00:10:47,040 --> 00:10:51,540
so if a trampoline pods not installed as

255
00:10:51,540 --> 00:10:53,160
a demon said

256
00:10:53,160 --> 00:10:56,399
is running only on one node in our

257
00:10:56,399 --> 00:10:57,480
cluster

258
00:10:57,480 --> 00:10:59,579
so if an attacker has escaped from a

259
00:10:59,579 --> 00:11:00,660
certain node

260
00:11:00,660 --> 00:11:04,140
it may be maybe and maybe not

261
00:11:04,140 --> 00:11:07,019
will be on the Node that hosts this

262
00:11:07,019 --> 00:11:08,820
trampoline pods

263
00:11:08,820 --> 00:11:10,920
and it's 50 50 percent

264
00:11:10,920 --> 00:11:12,959
and maybe less because it's depends on

265
00:11:12,959 --> 00:11:14,700
the number of PODS that's running on

266
00:11:14,700 --> 00:11:16,200
your cluster

267
00:11:16,200 --> 00:11:18,959
but if a trample Imports deploy and

268
00:11:18,959 --> 00:11:21,240
install as a demon set an attacker

269
00:11:21,240 --> 00:11:24,480
guarantee to hit a jackpot because every

270
00:11:24,480 --> 00:11:27,180
single node in our cluster will run this

271
00:11:27,180 --> 00:11:30,079
trampoline pods

272
00:11:32,100 --> 00:11:34,500
so

273
00:11:34,500 --> 00:11:36,899
the answer the answer for our main

274
00:11:36,899 --> 00:11:38,700
question today if a single container

275
00:11:38,700 --> 00:11:40,860
Escape could be escalated to full

276
00:11:40,860 --> 00:11:43,680
cluster admins there the answer found in

277
00:11:43,680 --> 00:11:46,079
those trampoline pods that running on

278
00:11:46,079 --> 00:11:48,600
every single node in our cluster

279
00:11:48,600 --> 00:11:52,519
so I'll switch it back to your valve

280
00:11:52,800 --> 00:11:55,620
is my MacBook oh awesome so actually

281
00:11:55,620 --> 00:11:57,480
said

282
00:11:57,480 --> 00:11:59,220
after the container escaped our golden

283
00:11:59,220 --> 00:12:02,100
ticket to escalate privileges it relies

284
00:12:02,100 --> 00:12:04,620
on trampoline demon sets so we went out

285
00:12:04,620 --> 00:12:05,940
and tried to find where those

286
00:12:05,940 --> 00:12:08,100
trampolines may be so this is how it

287
00:12:08,100 --> 00:12:09,600
looks like we looked into the most

288
00:12:09,600 --> 00:12:11,640
popular kubernetes platforms and looked

289
00:12:11,640 --> 00:12:13,980
into their infrastructure pods and this

290
00:12:13,980 --> 00:12:16,019
is an actual example we saw a pause that

291
00:12:16,019 --> 00:12:18,540
can list secrets and delete pods create

292
00:12:18,540 --> 00:12:20,820
config maps and update the status of

293
00:12:20,820 --> 00:12:23,040
nodes and we looked at those permissions

294
00:12:23,040 --> 00:12:25,800
and we tried to ask ourselves is this

295
00:12:25,800 --> 00:12:27,360
spot powerful are we looking at the

296
00:12:27,360 --> 00:12:29,700
trampoline and we quickly realized that

297
00:12:29,700 --> 00:12:31,680
we don't we don't know we don't have the

298
00:12:31,680 --> 00:12:34,380
resources we looked into the kubernetes

299
00:12:34,380 --> 00:12:36,180
documentations we tried Googling it we

300
00:12:36,180 --> 00:12:38,160
looked into previous security talks

301
00:12:38,160 --> 00:12:40,560
about kubernetes and we quickly realized

302
00:12:40,560 --> 00:12:42,899
that there is actually no public list of

303
00:12:42,899 --> 00:12:45,660
powerful permissions in kubernetes

304
00:12:45,660 --> 00:12:48,839
now that is actually quite scary because

305
00:12:48,839 --> 00:12:50,399
without knowing which permissions are

306
00:12:50,399 --> 00:12:52,500
powerful you can't really answer basic

307
00:12:52,500 --> 00:12:54,240
questions about privilege escalation

308
00:12:54,240 --> 00:12:57,000
right if I'm a Defender I can't really

309
00:12:57,000 --> 00:12:59,160
know if my publicly exposed pod can

310
00:12:59,160 --> 00:13:00,839
actually escalate privileges if I don't

311
00:13:00,839 --> 00:13:03,120
know if its permissions are powerful and

312
00:13:03,120 --> 00:13:05,839
as an attacker once I get a set of

313
00:13:05,839 --> 00:13:08,579
compromise credentials I can't tell if

314
00:13:08,579 --> 00:13:10,200
they're valuable or not if I don't know

315
00:13:10,200 --> 00:13:12,660
which permissions are powerful right

316
00:13:12,660 --> 00:13:14,279
so we started walking and trying to

317
00:13:14,279 --> 00:13:15,959
figure out which permissions are

318
00:13:15,959 --> 00:13:17,579
actually powerful in kubernetes and we

319
00:13:17,579 --> 00:13:18,959
quickly realized that a lot of

320
00:13:18,959 --> 00:13:20,700
permissions that we thought are quite

321
00:13:20,700 --> 00:13:22,740
benign were actually quite interesting

322
00:13:22,740 --> 00:13:24,720
if you use them in a creative way

323
00:13:24,720 --> 00:13:27,000
so the other approach to go about this

324
00:13:27,000 --> 00:13:29,160
is that we first defined what our

325
00:13:29,160 --> 00:13:31,079
interest in attack classes in kubernetes

326
00:13:31,079 --> 00:13:32,940
in our view that can allow you to get

327
00:13:32,940 --> 00:13:35,279
meaningful previous escalation

328
00:13:35,279 --> 00:13:37,800
and then we classify we looked over all

329
00:13:37,800 --> 00:13:39,300
of the permissions in kubernetes and

330
00:13:39,300 --> 00:13:41,100
classified them based on the attack

331
00:13:41,100 --> 00:13:43,260
classes that they can enable

332
00:13:43,260 --> 00:13:46,380
and this is the mapping that we came up

333
00:13:46,380 --> 00:13:47,579
with

334
00:13:47,579 --> 00:13:49,260
we came up with four attack classes

335
00:13:49,260 --> 00:13:51,720
about 20 something permissions mapped

336
00:13:51,720 --> 00:13:55,019
into each one now we won't go into every

337
00:13:55,019 --> 00:13:57,180
permission how it enables the attack we

338
00:13:57,180 --> 00:13:59,220
have an actual a report that is

339
00:13:59,220 --> 00:14:00,899
published alongside the stock where you

340
00:14:00,899 --> 00:14:03,060
can see how each permissions enable the

341
00:14:03,060 --> 00:14:04,980
attack but those are the permissions

342
00:14:04,980 --> 00:14:07,079
that we identified and we look at an

343
00:14:07,079 --> 00:14:09,120
example for each attack class in order

344
00:14:09,120 --> 00:14:12,480
to make them mobile so let's start off

345
00:14:12,480 --> 00:14:13,860
with permissions that allow you to

346
00:14:13,860 --> 00:14:15,839
manipulate authentication or

347
00:14:15,839 --> 00:14:17,700
laterization those are extremely

348
00:14:17,700 --> 00:14:19,320
powerful permission that actually allows

349
00:14:19,320 --> 00:14:22,500
you to either impersonate other user or

350
00:14:22,500 --> 00:14:24,300
to change your permission so freely

351
00:14:24,300 --> 00:14:25,980
manipulate the authorization of the

352
00:14:25,980 --> 00:14:28,920
cluster a one example for that would be

353
00:14:28,920 --> 00:14:31,079
the permission to escalate roles that

354
00:14:31,079 --> 00:14:32,820
permission allow you to add new

355
00:14:32,820 --> 00:14:35,339
permissions to existing roles so if I'm

356
00:14:35,339 --> 00:14:37,440
an attacker and I have a token which can

357
00:14:37,440 --> 00:14:39,899
escalate roles I can simply go to the

358
00:14:39,899 --> 00:14:42,420
role of my service account and edit all

359
00:14:42,420 --> 00:14:44,100
the permissions in the cluster which are

360
00:14:44,100 --> 00:14:46,860
denoted by this wildcard notation and

361
00:14:46,860 --> 00:14:49,079
then immediately after I'm doing that my

362
00:14:49,079 --> 00:14:52,019
token gets all of the permissions which

363
00:14:52,019 --> 00:14:54,480
is the beautifully illustrated by the

364
00:14:54,480 --> 00:14:57,120
token getting larger

365
00:14:57,120 --> 00:14:59,399
the next attack class that we're going

366
00:14:59,399 --> 00:15:01,019
to talk about is permissions that allow

367
00:15:01,019 --> 00:15:03,540
you to acquire service account tokens so

368
00:15:03,540 --> 00:15:05,699
either retrieve existing or issue new

369
00:15:05,699 --> 00:15:08,639
service account tokens now what's the

370
00:15:08,639 --> 00:15:10,860
impact here well it depends which

371
00:15:10,860 --> 00:15:12,839
service account you can issue tokens for

372
00:15:12,839 --> 00:15:14,760
right if you can issue tokens for

373
00:15:14,760 --> 00:15:16,740
powerful service accounts then you got

374
00:15:16,740 --> 00:15:18,180
yourself a meaningful privilege

375
00:15:18,180 --> 00:15:20,459
escalation if you can only let's say

376
00:15:20,459 --> 00:15:22,680
retrieve tokens of weak service account

377
00:15:22,680 --> 00:15:24,899
that's not very interesting

378
00:15:24,899 --> 00:15:26,160
now

379
00:15:26,160 --> 00:15:28,560
a very notorious permission in

380
00:15:28,560 --> 00:15:30,660
kubernetes that allows you to in this

381
00:15:30,660 --> 00:15:32,220
case the three of existing service

382
00:15:32,220 --> 00:15:33,899
account is the permission to list

383
00:15:33,899 --> 00:15:36,600
Secrets a service account in kubernetes

384
00:15:36,600 --> 00:15:38,480
up until now

385
00:15:38,480 --> 00:15:41,220
we're stored as service account tokens

386
00:15:41,220 --> 00:15:44,160
it was stored as secrets in the API

387
00:15:44,160 --> 00:15:45,600
server so if you can actually list

388
00:15:45,600 --> 00:15:48,300
secrets you can simply retrieve service

389
00:15:48,300 --> 00:15:50,160
account tokens and then use them to

390
00:15:50,160 --> 00:15:52,860
authenticate to the API server and as

391
00:15:52,860 --> 00:15:54,660
I've said if you get yourself a token

392
00:15:54,660 --> 00:15:56,639
for a powerful service account you just

393
00:15:56,639 --> 00:15:58,560
escalated privileges

394
00:15:58,560 --> 00:16:00,360
the next attack class you're probably

395
00:16:00,360 --> 00:16:03,420
familiar with it from other system is

396
00:16:03,420 --> 00:16:05,100
obviously permissions that allow you to

397
00:16:05,100 --> 00:16:07,860
execute code either on pods on all nodes

398
00:16:07,860 --> 00:16:09,959
in this case you're not necessarily

399
00:16:09,959 --> 00:16:11,639
escalating your privileges right it

400
00:16:11,639 --> 00:16:13,860
really depends on the permissions of the

401
00:16:13,860 --> 00:16:16,680
Pod that you are taking over but you

402
00:16:16,680 --> 00:16:18,180
probably get yourself more compute

403
00:16:18,180 --> 00:16:20,519
resources right uh maybe more business

404
00:16:20,519 --> 00:16:22,620
logic and as I've said possibly

405
00:16:22,620 --> 00:16:24,899
escalating your privileges let's look at

406
00:16:24,899 --> 00:16:26,760
an interesting example for such a

407
00:16:26,760 --> 00:16:27,839
permission

408
00:16:27,839 --> 00:16:30,060
it has a pretty confusing name it

409
00:16:30,060 --> 00:16:33,240
creates the proxy sub-resource of nodes

410
00:16:33,240 --> 00:16:35,579
doesn't really tell us much but it

411
00:16:35,579 --> 00:16:36,839
basically means that we can control

412
00:16:36,839 --> 00:16:39,420
cubelets we can simply tell them what to

413
00:16:39,420 --> 00:16:41,880
do and tell them hey please execute code

414
00:16:41,880 --> 00:16:44,759
on your pod one interesting thing about

415
00:16:44,759 --> 00:16:46,620
this permission that is you actually

416
00:16:46,620 --> 00:16:49,079
don't go through the API server which

417
00:16:49,079 --> 00:16:50,639
normally has all of the login and

418
00:16:50,639 --> 00:16:53,579
auditing mechanism in the cluster so you

419
00:16:53,579 --> 00:16:56,160
may be able to bypass some detections

420
00:16:56,160 --> 00:16:57,959
now the final attack class that we're

421
00:16:57,959 --> 00:17:00,180
going to talk about today and it's my

422
00:17:00,180 --> 00:17:01,380
personal favorite

423
00:17:01,380 --> 00:17:03,180
permissions that allow you to steal pods

424
00:17:03,180 --> 00:17:06,240
basically move existing pods from one

425
00:17:06,240 --> 00:17:08,579
node in the cluster to another and why

426
00:17:08,579 --> 00:17:10,559
would that be interesting if we assume

427
00:17:10,559 --> 00:17:12,240
that we already compromise the node in

428
00:17:12,240 --> 00:17:14,459
the cluster we may we might want to

429
00:17:14,459 --> 00:17:17,640
bring other parts to our node maybe

430
00:17:17,640 --> 00:17:19,439
because they host interesting business

431
00:17:19,439 --> 00:17:21,419
logic that we want to take control of

432
00:17:21,419 --> 00:17:24,839
them but in the case of this talk it's

433
00:17:24,839 --> 00:17:26,400
probably because those pods have

434
00:17:26,400 --> 00:17:28,319
powerful service account and if we bring

435
00:17:28,319 --> 00:17:30,720
them over to our node where they are

436
00:17:30,720 --> 00:17:31,860
going to come with their powerful

437
00:17:31,860 --> 00:17:33,780
service account token which we can then

438
00:17:33,780 --> 00:17:36,120
abuse to escalate preferences

439
00:17:36,120 --> 00:17:38,700
so we started with this by oh let's see

440
00:17:38,700 --> 00:17:40,860
an example yeah

441
00:17:40,860 --> 00:17:43,080
um this is a slightly more complex

442
00:17:43,080 --> 00:17:45,360
example it takes two permission to carry

443
00:17:45,360 --> 00:17:46,980
out the attack the first permission is

444
00:17:46,980 --> 00:17:49,320
the update node status permission and

445
00:17:49,320 --> 00:17:50,340
the second permission is the delete

446
00:17:50,340 --> 00:17:52,020
pause permission

447
00:17:52,020 --> 00:17:54,120
now this is actually a great example of

448
00:17:54,120 --> 00:17:56,460
how permissions it might look not very

449
00:17:56,460 --> 00:17:58,860
powerful can actually be abused when you

450
00:17:58,860 --> 00:18:00,720
first look at those permissions you

451
00:18:00,720 --> 00:18:01,919
might think that you'll be able to get

452
00:18:01,919 --> 00:18:04,020
some maybe denial of service by deleting

453
00:18:04,020 --> 00:18:06,299
pods but they can actually be used to

454
00:18:06,299 --> 00:18:08,760
steal pods and let's see how

455
00:18:08,760 --> 00:18:10,740
in this case we assume that we already

456
00:18:10,740 --> 00:18:12,419
escaped a container and compromise the

457
00:18:12,419 --> 00:18:14,460
node and we have a very powerful pod and

458
00:18:14,460 --> 00:18:16,679
operator on another node in the cluster

459
00:18:16,679 --> 00:18:18,660
which we want to bring over

460
00:18:18,660 --> 00:18:20,820
what we'll do is we'll first use the

461
00:18:20,820 --> 00:18:23,220
permission to update the status of nodes

462
00:18:23,220 --> 00:18:25,320
to set the Pod capacity of all the other

463
00:18:25,320 --> 00:18:27,900
nodes in the cluster to zero which we

464
00:18:27,900 --> 00:18:30,240
are basically making them unschedulable

465
00:18:30,240 --> 00:18:32,520
the next step is going to be to delete

466
00:18:32,520 --> 00:18:34,919
the operator pod and now when kubernetes

467
00:18:34,919 --> 00:18:38,100
has to recreate that operator pod it

468
00:18:38,100 --> 00:18:40,679
will conveniently have to create it on

469
00:18:40,679 --> 00:18:42,780
our node because it's the only scheduled

470
00:18:42,780 --> 00:18:45,179
node in the cluster and we successfully

471
00:18:45,179 --> 00:18:47,400
brought the operator pod over with its

472
00:18:47,400 --> 00:18:49,559
powerful service account token

473
00:18:49,559 --> 00:18:52,140
so that's how you still pause

474
00:18:52,140 --> 00:18:54,720
and if you remember we started talking

475
00:18:54,720 --> 00:18:56,220
about kubernetes attack classes to

476
00:18:56,220 --> 00:18:57,720
Define what trample and what powerful

477
00:18:57,720 --> 00:18:58,980
pods are

478
00:18:58,980 --> 00:19:01,140
so trampolines are powerful pods with

479
00:19:01,140 --> 00:19:03,120
permission to either manipulate

480
00:19:03,120 --> 00:19:05,340
authentication or authorization acquire

481
00:19:05,340 --> 00:19:07,740
powerful service account tokens

482
00:19:07,740 --> 00:19:10,980
execute code on pods over nodes

483
00:19:10,980 --> 00:19:13,320
and steal other pods in the cluster

484
00:19:13,320 --> 00:19:15,299
because those sets of permission

485
00:19:15,299 --> 00:19:17,460
actually get you a real shot of getting

486
00:19:17,460 --> 00:19:20,179
clustered admin

487
00:19:20,179 --> 00:19:23,580
myself talk about a few subjects let's

488
00:19:23,580 --> 00:19:25,559
try to do a quick recap

489
00:19:25,559 --> 00:19:26,940
we started off by talking about

490
00:19:26,940 --> 00:19:30,240
container escapes and understanding they

491
00:19:30,240 --> 00:19:32,400
are likely going to continue to happen

492
00:19:32,400 --> 00:19:34,620
we then talked about how their impact

493
00:19:34,620 --> 00:19:37,500
largely is dictated by the presence of

494
00:19:37,500 --> 00:19:39,539
powerful PODS of trampoline on the

495
00:19:39,539 --> 00:19:41,700
compromise node right and we Define what

496
00:19:41,700 --> 00:19:43,799
are powerful pods

497
00:19:43,799 --> 00:19:45,480
we also talked about how trampoline

498
00:19:45,480 --> 00:19:46,919
demon sets

499
00:19:46,919 --> 00:19:49,500
install those trampolines onto every

500
00:19:49,500 --> 00:19:51,660
single node in your cluster

501
00:19:51,660 --> 00:19:53,940
so if you want to really answer whether

502
00:19:53,940 --> 00:19:55,980
a single container Escape actually

503
00:19:55,980 --> 00:19:58,320
equals cluster admin what we're really

504
00:19:58,320 --> 00:20:00,299
asking is are there trampoline demon

505
00:20:00,299 --> 00:20:02,760
sets in the cluster who installed them

506
00:20:02,760 --> 00:20:05,280
out of the common and so on

507
00:20:05,280 --> 00:20:07,200
and that's really what we try to do in

508
00:20:07,200 --> 00:20:08,880
this research we looked into the most

509
00:20:08,880 --> 00:20:11,100
popular kubernetes platforms some of you

510
00:20:11,100 --> 00:20:13,080
are probably going to probably users of

511
00:20:13,080 --> 00:20:14,520
those platforms and we looked for

512
00:20:14,520 --> 00:20:16,260
trampoline demon sets

513
00:20:16,260 --> 00:20:18,299
the platforms we looked into are mostly

514
00:20:18,299 --> 00:20:20,820
the infrastructure layer so manage

515
00:20:20,820 --> 00:20:24,120
kubernetes services like AKs gke eks

516
00:20:24,120 --> 00:20:27,299
openshift and we also looked into a

517
00:20:27,299 --> 00:20:28,980
container network interfaces basically

518
00:20:28,980 --> 00:20:30,960
the network infrastructure

519
00:20:30,960 --> 00:20:32,880
of the cluster and we looked into

520
00:20:32,880 --> 00:20:35,660
popular projects like Calico Andrea

521
00:20:35,660 --> 00:20:37,860
psyllium and webnet

522
00:20:37,860 --> 00:20:39,600
and what we found when we looked at this

523
00:20:39,600 --> 00:20:42,059
pro at those projects back in February

524
00:20:42,059 --> 00:20:43,140
of this year

525
00:20:43,140 --> 00:20:45,120
is that most of them actually install

526
00:20:45,120 --> 00:20:47,940
trampoline demon sets by default another

527
00:20:47,940 --> 00:20:50,039
12 installed them given a popular

528
00:20:50,039 --> 00:20:52,860
feature was enabled those are actually

529
00:20:52,860 --> 00:20:54,919
this is actually a breakdown of the

530
00:20:54,919 --> 00:20:57,780
trample in Demon sets back in February

531
00:20:57,780 --> 00:21:00,840
in each of those platforms and

532
00:21:00,840 --> 00:21:02,460
so you can see which platform had

533
00:21:02,460 --> 00:21:04,559
powerful demon sets which were those

534
00:21:04,559 --> 00:21:06,720
demon sets and what were the powerful

535
00:21:06,720 --> 00:21:07,740
permissions

536
00:21:07,740 --> 00:21:10,320
again we have a report with all of the

537
00:21:10,320 --> 00:21:11,580
details so you don't need to take

538
00:21:11,580 --> 00:21:13,740
pictures right now unless you really

539
00:21:13,740 --> 00:21:15,840
want to

540
00:21:15,840 --> 00:21:18,660
um so we looked at those demon sets and

541
00:21:18,660 --> 00:21:20,460
tried to understand how powerful are

542
00:21:20,460 --> 00:21:22,440
they could they really allow you to get

543
00:21:22,440 --> 00:21:25,080
a full cluster admin by default

544
00:21:25,080 --> 00:21:27,000
and in half the platforms that was

545
00:21:27,000 --> 00:21:28,559
actually the case in half the platforms

546
00:21:28,559 --> 00:21:30,419
that we looked into the answer to our

547
00:21:30,419 --> 00:21:32,700
main question was yes a single container

548
00:21:32,700 --> 00:21:34,620
Escape allows you to take over the

549
00:21:34,620 --> 00:21:37,559
entire cluster in another 25 there were

550
00:21:37,559 --> 00:21:41,280
some prerequisites and for example some

551
00:21:41,280 --> 00:21:43,980
feature being enabled so

552
00:21:43,980 --> 00:21:48,600
we got a mostly definitive end cells for

553
00:21:48,600 --> 00:21:50,940
those platforms now I do want to say if

554
00:21:50,940 --> 00:21:52,440
any one of you is running those

555
00:21:52,440 --> 00:21:54,720
platforms you don't need to panic or

556
00:21:54,720 --> 00:21:56,460
something like that this isn't an

557
00:21:56,460 --> 00:21:58,860
annotated RC right there is a large

558
00:21:58,860 --> 00:22:00,720
prerequisites of a container Escape

559
00:22:00,720 --> 00:22:02,159
happening

560
00:22:02,159 --> 00:22:05,640
um but it's also something to note to

561
00:22:05,640 --> 00:22:07,799
get your cluster security to the next

562
00:22:07,799 --> 00:22:08,700
level

563
00:22:08,700 --> 00:22:11,580
so let's see how an actual attack on one

564
00:22:11,580 --> 00:22:14,220
of those popular platform looks like

565
00:22:14,220 --> 00:22:16,559
so we couldn't obviously demo all of the

566
00:22:16,559 --> 00:22:18,299
attacks the ones we're going to see is

567
00:22:18,299 --> 00:22:21,120
oncillium which is a very popular

568
00:22:21,120 --> 00:22:23,280
container network interface it is what's

569
00:22:23,280 --> 00:22:25,860
power in the new data plane in a Google

570
00:22:25,860 --> 00:22:28,440
kubernetes engine the reason why we

571
00:22:28,440 --> 00:22:29,760
chose syllium is that because it

572
00:22:29,760 --> 00:22:32,039
showcases a number of attack classes and

573
00:22:32,039 --> 00:22:34,080
also Silo maintenance did a great job of

574
00:22:34,080 --> 00:22:35,760
fixing every one of the things that

575
00:22:35,760 --> 00:22:37,380
we're going to show here today

576
00:22:37,380 --> 00:22:40,400
so what is the scenario in psyllium

577
00:22:40,400 --> 00:22:42,539
installs two interesting components to

578
00:22:42,539 --> 00:22:44,280
the cluster one is the psyllium demon

579
00:22:44,280 --> 00:22:46,980
set a trampoline demon sets that can

580
00:22:46,980 --> 00:22:48,720
actually delete pods and update the

581
00:22:48,720 --> 00:22:50,940
status of nodes and those permissions if

582
00:22:50,940 --> 00:22:53,340
you remember allow you to steal pods

583
00:22:53,340 --> 00:22:55,320
the second thing that the film installed

584
00:22:55,320 --> 00:22:57,299
is the psyllium operator pod which can

585
00:22:57,299 --> 00:22:58,860
actually list Secrets which as we

586
00:22:58,860 --> 00:23:00,720
mentioned earlier allows you to acquire

587
00:23:00,720 --> 00:23:01,679
tokens

588
00:23:01,679 --> 00:23:04,320
now I want a toxic level here is that we

589
00:23:04,320 --> 00:23:06,960
managed to compromise a pod and breakout

590
00:23:06,960 --> 00:23:09,480
so we have a node under our control and

591
00:23:09,480 --> 00:23:12,299
our goal is to get cluster admin so get

592
00:23:12,299 --> 00:23:13,860
control over all of the nodes in the

593
00:23:13,860 --> 00:23:15,419
cluster

594
00:23:15,419 --> 00:23:17,460
now we are going to assume that we are

595
00:23:17,460 --> 00:23:19,620
on the weakest note so the one not

596
00:23:19,620 --> 00:23:21,780
hosting the Salem operator because

597
00:23:21,780 --> 00:23:23,520
that's simply the more likely case right

598
00:23:23,520 --> 00:23:25,380
if you have 10 nodes in your cluster and

599
00:23:25,380 --> 00:23:28,679
only one runs the psyllium operator most

600
00:23:28,679 --> 00:23:29,940
of the nodes aren't going to have the

601
00:23:29,940 --> 00:23:31,140
helium operator

602
00:23:31,140 --> 00:23:33,539
our approach to get cluster admin is to

603
00:23:33,539 --> 00:23:34,980
first use the psyllium Daemon set

604
00:23:34,980 --> 00:23:36,539
permissions to steal the psyllium

605
00:23:36,539 --> 00:23:38,520
operator and do then use the psyllium

606
00:23:38,520 --> 00:23:40,440
operator permissions to get cluster

607
00:23:40,440 --> 00:23:42,659
admin so let's see how the attack plays

608
00:23:42,659 --> 00:23:44,220
out we're first going to use the

609
00:23:44,220 --> 00:23:46,020
psyllium demonstrate permissions in

610
00:23:46,020 --> 00:23:47,820
order to make other nodes in this

611
00:23:47,820 --> 00:23:49,620
cluster unscratchable using the same

612
00:23:49,620 --> 00:23:51,000
technique that we described earlier

613
00:23:51,000 --> 00:23:53,520
setting their port capacity to zero we

614
00:23:53,520 --> 00:23:55,200
are again going to delete the celium

615
00:23:55,200 --> 00:23:58,080
operator part forcing kubernetes to be

616
00:23:58,080 --> 00:24:00,480
created on our nodes now we have the

617
00:24:00,480 --> 00:24:02,640
psyllium operator service account in our

618
00:24:02,640 --> 00:24:04,500
disposal and we can use it to list

619
00:24:04,500 --> 00:24:06,179
secrets and retrieve service account

620
00:24:06,179 --> 00:24:08,700
tokens in the cluster now the service

621
00:24:08,700 --> 00:24:10,620
account that we are going to Target is

622
00:24:10,620 --> 00:24:13,140
called crack which is showed for a

623
00:24:13,140 --> 00:24:15,720
clusterable aggregation controller the

624
00:24:15,720 --> 00:24:17,340
reason why we are targeting this service

625
00:24:17,340 --> 00:24:19,020
account is because it can manipulate

626
00:24:19,020 --> 00:24:20,760
authorization it can escalate roles

627
00:24:20,760 --> 00:24:22,320
another permission that we discussed

628
00:24:22,320 --> 00:24:24,600
earlier the final step in the attack is

629
00:24:24,600 --> 00:24:26,700
going to use crack service account token

630
00:24:26,700 --> 00:24:28,380
in order to Simply add all the

631
00:24:28,380 --> 00:24:30,720
permissions in the cluster to the role

632
00:24:30,720 --> 00:24:32,640
that is binded to crack service account

633
00:24:32,640 --> 00:24:35,220
token so it's only three steps but when

634
00:24:35,220 --> 00:24:37,080
you translate them to a cube cuddle

635
00:24:37,080 --> 00:24:39,720
commands it gets much more so we're

636
00:24:39,720 --> 00:24:41,760
going to go over this demo now it's

637
00:24:41,760 --> 00:24:43,620
going to run quite quickly if you can't

638
00:24:43,620 --> 00:24:45,299
follow each com every command that's

639
00:24:45,299 --> 00:24:46,799
that's not completely fine we're going

640
00:24:46,799 --> 00:24:48,659
to help have a

641
00:24:48,659 --> 00:24:52,100
a workflow afterwards

642
00:24:53,580 --> 00:24:57,139
and you cannot see the demo

643
00:24:58,740 --> 00:25:02,539
so can anyone help me with that

644
00:25:02,940 --> 00:25:06,600
maybe something like this let's try

645
00:25:06,600 --> 00:25:09,379
foreign

646
00:25:19,020 --> 00:25:21,179
yes okay

647
00:25:21,179 --> 00:25:23,820
so as I've said the

648
00:25:23,820 --> 00:25:26,159
scenario is that we are in a cluster

649
00:25:26,159 --> 00:25:27,840
that installed psyllium

650
00:25:27,840 --> 00:25:29,940
and we are trying to get cluster admin

651
00:25:29,940 --> 00:25:32,539
now

652
00:25:33,179 --> 00:25:35,460
we're going to start by emulating a

653
00:25:35,460 --> 00:25:37,020
container Escape taking over the node

654
00:25:37,020 --> 00:25:38,880
because that's the starting position in

655
00:25:38,880 --> 00:25:40,380
our attack and we're also going to

656
00:25:40,380 --> 00:25:42,600
define a script which basically what it

657
00:25:42,600 --> 00:25:44,640
does is Harvest service account tokens

658
00:25:44,640 --> 00:25:46,980
from the node file system and configures

659
00:25:46,980 --> 00:25:49,500
our CLI that talks to the API server to

660
00:25:49,500 --> 00:25:51,600
use them what you're going to do is

661
00:25:51,600 --> 00:25:53,400
check check out where the operator Port

662
00:25:53,400 --> 00:25:55,080
is and we can see that it's on another

663
00:25:55,080 --> 00:25:57,720
node in the cluster so our first step is

664
00:25:57,720 --> 00:25:59,460
going to try to steal the psyllium

665
00:25:59,460 --> 00:26:01,860
operator onto our node we are going to

666
00:26:01,860 --> 00:26:03,960
define a dash function which is called

667
00:26:03,960 --> 00:26:07,440
patch node what it does is simply a

668
00:26:07,440 --> 00:26:11,700
touches the allocated pod of of the node

669
00:26:11,700 --> 00:26:15,480
to be zero using a Json patch

670
00:26:15,480 --> 00:26:17,100
so you can see that the operation that

671
00:26:17,100 --> 00:26:19,640
we are defining is replacing the status

672
00:26:19,640 --> 00:26:23,159
allocatable slash pod value to be zero

673
00:26:23,159 --> 00:26:24,779
and then we are going to use that bash

674
00:26:24,779 --> 00:26:25,919
function

675
00:26:25,919 --> 00:26:28,080
that is powered by the permissions of

676
00:26:28,080 --> 00:26:30,120
the psyllium demon set in order to

677
00:26:30,120 --> 00:26:31,620
repeatedly

678
00:26:31,620 --> 00:26:35,120
set the

679
00:26:35,220 --> 00:26:37,559
pod capacity of other nodes in the

680
00:26:37,559 --> 00:26:40,200
cluster to zero now we're doing it in a

681
00:26:40,200 --> 00:26:42,779
loop because the the API server actually

682
00:26:42,779 --> 00:26:45,179
corrects this value now when we delete

683
00:26:45,179 --> 00:26:48,059
the psyllium operator if all goes well

684
00:26:48,059 --> 00:26:50,820
it must be recreated on our node and we

685
00:26:50,820 --> 00:26:52,679
can see that it does the node name is

686
00:26:52,679 --> 00:26:54,480
highlighted in red and you can see it by

687
00:26:54,480 --> 00:26:57,240
The Bash terminal line and

688
00:26:57,240 --> 00:27:00,240
that our node the host name is actually

689
00:27:00,240 --> 00:27:02,700
this name so now the psyllium operator

690
00:27:02,700 --> 00:27:05,100
is on our node and we can continue to

691
00:27:05,100 --> 00:27:07,080
the second stage of the attack which is

692
00:27:07,080 --> 00:27:09,419
to use the cilium operator service

693
00:27:09,419 --> 00:27:12,299
account in order to get cracks token

694
00:27:12,299 --> 00:27:14,580
right we are first configuring our CLI

695
00:27:14,580 --> 00:27:17,039
to use the psyllium operators so okay

696
00:27:17,039 --> 00:27:19,140
and then we can see that we can actually

697
00:27:19,140 --> 00:27:22,080
list secrets in the cluster so we are

698
00:27:22,080 --> 00:27:23,880
going to Target the service account

699
00:27:23,880 --> 00:27:25,740
token of the cluster wall aggregation

700
00:27:25,740 --> 00:27:28,260
controller or cracking shot here I'm

701
00:27:28,260 --> 00:27:31,020
going to make a typo that doesn't work

702
00:27:31,020 --> 00:27:33,659
but now it does and we get we got cracks

703
00:27:33,659 --> 00:27:36,240
token we can configure our CLI to use

704
00:27:36,240 --> 00:27:38,220
cracks token so now we are finally

705
00:27:38,220 --> 00:27:40,740
authenticated as crack we got its token

706
00:27:40,740 --> 00:27:42,480
and you can see that when we ask the API

707
00:27:42,480 --> 00:27:45,000
server hey can I escalate walls the

708
00:27:45,000 --> 00:27:46,200
answer is yes

709
00:27:46,200 --> 00:27:48,120
we are still not cluster admin though as

710
00:27:48,120 --> 00:27:50,520
you can now see the final step in the

711
00:27:50,520 --> 00:27:53,460
attack is to edit the role that is

712
00:27:53,460 --> 00:27:55,799
binded to cracks token

713
00:27:55,799 --> 00:27:57,720
to have all the permissions in the

714
00:27:57,720 --> 00:27:59,039
cluster and that's what we're going to

715
00:27:59,039 --> 00:28:02,419
do now we are editing

716
00:28:02,460 --> 00:28:04,020
the cluster role and you can see that

717
00:28:04,020 --> 00:28:05,460
the cluster role will now have the

718
00:28:05,460 --> 00:28:07,200
permission to modify and escalate

719
00:28:07,200 --> 00:28:08,880
cluster one we're going to just delete

720
00:28:08,880 --> 00:28:11,580
everything and only put wild cards there

721
00:28:11,580 --> 00:28:14,400
now the second we do that our token

722
00:28:14,400 --> 00:28:16,380
immediately should get admin privileges

723
00:28:16,380 --> 00:28:18,360
and when we check our permission it

724
00:28:18,360 --> 00:28:21,918
should it should say that we are admin

725
00:28:21,960 --> 00:28:24,480
and we did it we got admin

726
00:28:24,480 --> 00:28:28,159
and took over the entire cluster

727
00:28:30,110 --> 00:28:34,570
[Applause]

728
00:28:36,659 --> 00:28:39,179
and we're back so what attack classes

729
00:28:39,179 --> 00:28:40,860
did we say in this demo we started off

730
00:28:40,860 --> 00:28:42,539
by stealing a pod right still in the

731
00:28:42,539 --> 00:28:44,640
psyllium operated pod we then use this

732
00:28:44,640 --> 00:28:46,320
permission to acquire a powerful service

733
00:28:46,320 --> 00:28:48,480
account token and finally using that

734
00:28:48,480 --> 00:28:50,039
service account we were able to

735
00:28:50,039 --> 00:28:52,140
manipulate permissions in the cluster so

736
00:28:52,140 --> 00:28:53,520
I think it's cool to see how the attack

737
00:28:53,520 --> 00:28:55,260
classes that we talked about earlier

738
00:28:55,260 --> 00:28:58,320
actually map to an actual attack

739
00:28:58,320 --> 00:29:00,179
it's important to understand that we

740
00:29:00,179 --> 00:29:03,240
showed psyllium but other platforms had

741
00:29:03,240 --> 00:29:04,919
very similar issues some are less

742
00:29:04,919 --> 00:29:07,020
complex some more complex

743
00:29:07,020 --> 00:29:09,779
we just needed to demo one of those

744
00:29:09,779 --> 00:29:12,059
so let's talk about what platforms did

745
00:29:12,059 --> 00:29:13,980
when we talked to them about those

746
00:29:13,980 --> 00:29:15,600
issues

747
00:29:15,600 --> 00:29:16,980
we actually reached out to every

748
00:29:16,980 --> 00:29:18,720
platform that we found trampolines in

749
00:29:18,720 --> 00:29:21,539
and it was really actually a great

750
00:29:21,539 --> 00:29:23,760
disclosure experience most of them were

751
00:29:23,760 --> 00:29:25,559
eager to fix the issues and you can see

752
00:29:25,559 --> 00:29:27,840
that most of them actually did

753
00:29:27,840 --> 00:29:29,700
um Google actually awarded us a boundary

754
00:29:29,700 --> 00:29:31,860
for this funding which was quite nice

755
00:29:31,860 --> 00:29:34,679
so most platforms were really great

756
00:29:34,679 --> 00:29:37,500
about this trying to and were able to

757
00:29:37,500 --> 00:29:39,960
de-privilege their trampoline demon sets

758
00:29:39,960 --> 00:29:42,059
so they are no longer trampolines so

759
00:29:42,059 --> 00:29:47,399
from 50 uh back in February now only 12

760
00:29:47,399 --> 00:29:48,840
and a half percent

761
00:29:48,840 --> 00:29:53,539
a single Escape equals cluster admin

762
00:30:00,000 --> 00:30:02,100
while this is really great

763
00:30:02,100 --> 00:30:04,980
you should also not get the wrong idea

764
00:30:04,980 --> 00:30:06,960
about you know trampoline not being

765
00:30:06,960 --> 00:30:09,120
relevant or something like that because

766
00:30:09,120 --> 00:30:10,559
we only looked at the infrastructure

767
00:30:10,559 --> 00:30:12,779
level and most clusters also have a

768
00:30:12,779 --> 00:30:14,460
bunch of add-ons installed also

769
00:30:14,460 --> 00:30:17,159
application pods those can can also

770
00:30:17,159 --> 00:30:19,919
install trampolines into a cluster

771
00:30:19,919 --> 00:30:22,440
Marvel didn't look into every kubernetes

772
00:30:22,440 --> 00:30:23,940
distribution we looked into eight

773
00:30:23,940 --> 00:30:26,399
Platforms in total

774
00:30:26,399 --> 00:30:28,380
and the funny thing I want to say and

775
00:30:28,380 --> 00:30:30,679
this graph doesn't represent

776
00:30:30,679 --> 00:30:32,760
platform-specific attacks right if a

777
00:30:32,760 --> 00:30:34,559
certain platform has a specific attack

778
00:30:34,559 --> 00:30:36,960
to it which is not kubernetes native we

779
00:30:36,960 --> 00:30:39,779
didn't look into that but overall the

780
00:30:39,779 --> 00:30:41,159
platforms were really responsible about

781
00:30:41,159 --> 00:30:43,140
fixing those issues

782
00:30:43,140 --> 00:30:44,940
now if you run kubernetes you might

783
00:30:44,940 --> 00:30:47,399
might be wondering how you can identify

784
00:30:47,399 --> 00:30:49,200
trampolines in your cluster and what

785
00:30:49,200 --> 00:30:50,940
what you should do about them so I'll

786
00:30:50,940 --> 00:30:53,000
pass the mic back to show to talk about

787
00:30:53,000 --> 00:30:56,120
identifying those

788
00:30:57,840 --> 00:31:00,678
amazing demo and

789
00:31:01,620 --> 00:31:03,000
Grace so

790
00:31:03,000 --> 00:31:06,480
when we start our research we quickly

791
00:31:06,480 --> 00:31:10,200
understand that we we need automatically

792
00:31:10,200 --> 00:31:12,240
automatically way to identify those

793
00:31:12,240 --> 00:31:15,059
whiskey permission and those trampoline

794
00:31:15,059 --> 00:31:18,779
pods so we wrote a tool that can use

795
00:31:18,779 --> 00:31:20,700
both for an attacker and both for

796
00:31:20,700 --> 00:31:23,760
Defenders to identify and find those

797
00:31:23,760 --> 00:31:26,039
risky permission

798
00:31:26,039 --> 00:31:29,279
the tool called police

799
00:31:29,279 --> 00:31:33,179
it's a CLI an open open source tool that

800
00:31:33,179 --> 00:31:36,539
retrieved the Albert permission of pod

801
00:31:36,539 --> 00:31:38,460
service account and nodes in the cluster

802
00:31:38,460 --> 00:31:41,159
and evaluate them through policies

803
00:31:41,159 --> 00:31:43,200
written in Regal

804
00:31:43,200 --> 00:31:46,919
we have now about 20 policy out of the

805
00:31:46,919 --> 00:31:47,580
box

806
00:31:47,580 --> 00:31:50,159
each targeting different kind of

807
00:31:50,159 --> 00:31:52,440
privileged escalation technique

808
00:31:52,440 --> 00:31:55,620
and it's a customizable you can search

809
00:31:55,620 --> 00:31:57,480
for any patterns in compare in

810
00:31:57,480 --> 00:32:00,539
kubernetes are back and write a new

811
00:32:00,539 --> 00:32:03,539
policy perhaps for platform specific or

812
00:32:03,539 --> 00:32:05,820
privileged escalation attack that we

813
00:32:05,820 --> 00:32:08,240
didn't cover

814
00:32:08,279 --> 00:32:11,340
I really I really recommended all of you

815
00:32:11,340 --> 00:32:14,220
to take a couple of seconds and run and

816
00:32:14,220 --> 00:32:17,159
Flash the trampolines and the powerful

817
00:32:17,159 --> 00:32:19,620
permission in your cluster

818
00:32:19,620 --> 00:32:22,020
and this is the output how the output

819
00:32:22,020 --> 00:32:23,580
looks like

820
00:32:23,580 --> 00:32:27,120
at the top you have the policy and the

821
00:32:27,120 --> 00:32:30,559
severity in this example

822
00:32:30,600 --> 00:32:33,659
um policy that search for identity that

823
00:32:33,659 --> 00:32:36,320
could launch privilege escalation attack

824
00:32:36,320 --> 00:32:40,020
modify by modifying pods

825
00:32:40,020 --> 00:32:42,059
and at the bottom

826
00:32:42,059 --> 00:32:45,240
you can see the violated identity that

827
00:32:45,240 --> 00:32:47,580
have the problematic permission that

828
00:32:47,580 --> 00:32:50,100
enables the attack and the product

829
00:32:50,100 --> 00:32:52,919
actually has this service account

830
00:32:52,919 --> 00:32:54,659
so

831
00:32:54,659 --> 00:32:58,460
you can run arbuck police

832
00:32:58,460 --> 00:33:01,500
also today to quickly identify those

833
00:33:01,500 --> 00:33:04,260
trampoline pods and this risky

834
00:33:04,260 --> 00:33:07,440
permission in your cluster so I press it

835
00:33:07,440 --> 00:33:10,799
back to your valve for the takeaways

836
00:33:10,799 --> 00:33:13,340
so

837
00:33:13,380 --> 00:33:15,539
some takeaways that we think you should

838
00:33:15,539 --> 00:33:17,340
be able to we hope that you can take

839
00:33:17,340 --> 00:33:19,620
from our research so as we saw today

840
00:33:19,620 --> 00:33:21,659
trampoline pods powerful pods introduce

841
00:33:21,659 --> 00:33:23,700
new previous escalation Avenues into

842
00:33:23,700 --> 00:33:26,039
kubernetes cluster up to a point where a

843
00:33:26,039 --> 00:33:27,539
single container Escape allows you to

844
00:33:27,539 --> 00:33:29,760
take over an entire cluster and we

845
00:33:29,760 --> 00:33:31,380
actually saw that in a lot of platforms

846
00:33:31,380 --> 00:33:34,440
that's actually the common case right

847
00:33:34,440 --> 00:33:36,659
those attacks were powered by powerful

848
00:33:36,659 --> 00:33:38,159
permissions and we hope that the

849
00:33:38,159 --> 00:33:40,080
framework that we introduced of

850
00:33:40,080 --> 00:33:41,940
classifying powerful permissions into

851
00:33:41,940 --> 00:33:43,559
the different interesting attack classes

852
00:33:43,559 --> 00:33:45,919
can help both Defenders and attackers

853
00:33:45,919 --> 00:33:49,019
pen testers understand which are

854
00:33:49,019 --> 00:33:51,179
powerful permissions and which are risky

855
00:33:51,179 --> 00:33:52,919
pods now it's important to understand

856
00:33:52,919 --> 00:33:54,480
that those powerful permissions while we

857
00:33:54,480 --> 00:33:55,980
looked at them from the lenses of a

858
00:33:55,980 --> 00:33:58,080
container Escape they are relevant

859
00:33:58,080 --> 00:33:59,940
whenever you have a compromised set of

860
00:33:59,940 --> 00:34:01,679
kubernetes credentials in order to

861
00:34:01,679 --> 00:34:03,779
understand whether those credentials are

862
00:34:03,779 --> 00:34:06,059
actually powerful now we think that the

863
00:34:06,059 --> 00:34:07,500
root cause for the issues that we talked

864
00:34:07,500 --> 00:34:09,540
about today is that it's simply tricky

865
00:34:09,540 --> 00:34:11,580
to configure Outback permissions in

866
00:34:11,580 --> 00:34:13,980
kubernetes one side of it is that a lot

867
00:34:13,980 --> 00:34:15,480
of permissions that look benign are

868
00:34:15,480 --> 00:34:17,399
actually powerful and we hope that the

869
00:34:17,399 --> 00:34:19,560
the list of powerful permissions that we

870
00:34:19,560 --> 00:34:22,800
released today helps cover that part

871
00:34:22,800 --> 00:34:24,719
another thing about our back is it it

872
00:34:24,719 --> 00:34:26,760
does it isn't included in all of the

873
00:34:26,760 --> 00:34:29,580
compliance and a security check marks

874
00:34:29,580 --> 00:34:33,179
and benchmarks benchmarks and checklists

875
00:34:33,179 --> 00:34:36,119
for kubernetes meaning that

876
00:34:36,119 --> 00:34:38,820
it isn't one of those things that you

877
00:34:38,820 --> 00:34:41,460
check for would have to check for in

878
00:34:41,460 --> 00:34:43,199
order to get some compliance standards

879
00:34:43,199 --> 00:34:45,480
so in a lot of clusters our back isn't

880
00:34:45,480 --> 00:34:48,119
really looked into too much

881
00:34:48,119 --> 00:34:51,659
what does that causes it brings a bit of

882
00:34:51,659 --> 00:34:54,300
false confidence we believe because you

883
00:34:54,300 --> 00:34:57,000
might have a cluster that passes all of

884
00:34:57,000 --> 00:34:58,920
the security checklist all of the

885
00:34:58,920 --> 00:35:00,780
compliance benchmarks everything shows

886
00:35:00,780 --> 00:35:02,580
green but you still don't realize that

887
00:35:02,580 --> 00:35:04,500
you're a single container escape from

888
00:35:04,500 --> 00:35:07,440
getting your whole cluster compromise so

889
00:35:07,440 --> 00:35:10,020
our recommendation for Defenders who

890
00:35:10,020 --> 00:35:12,660
want to tackle this issue is first of

891
00:35:12,660 --> 00:35:14,520
all monitoring you are back you should

892
00:35:14,520 --> 00:35:15,960
be able to tell which of the powerful

893
00:35:15,960 --> 00:35:18,900
permissions in your cluster and then you

894
00:35:18,900 --> 00:35:21,240
should be able to say and you should be

895
00:35:21,240 --> 00:35:22,680
able to say whether those are actually

896
00:35:22,680 --> 00:35:25,500
needed and in the good scenario you can

897
00:35:25,500 --> 00:35:27,960
actually maybe drop some permissions we

898
00:35:27,960 --> 00:35:29,940
hope that you can use Albert Police to

899
00:35:29,940 --> 00:35:32,099
do that now once you know which of the

900
00:35:32,099 --> 00:35:34,140
powerful permissions in your cluster we

901
00:35:34,140 --> 00:35:37,560
recommend separating powerful pods from

902
00:35:37,560 --> 00:35:41,160
a untrusted or publicly exposed pods

903
00:35:41,160 --> 00:35:42,960
um not all powerful permissions can be

904
00:35:42,960 --> 00:35:45,119
dropped some of them are necessary so

905
00:35:45,119 --> 00:35:47,160
you should be able to use this technique

906
00:35:47,160 --> 00:35:49,260
in order to limit the impact of

907
00:35:49,260 --> 00:35:52,260
container Escape untrusted Ford and a

908
00:35:52,260 --> 00:35:53,700
powerful pod running together on the

909
00:35:53,700 --> 00:35:55,980
same node is a pretty toxic combination

910
00:35:55,980 --> 00:35:58,380
now one thing that we didn't get to talk

911
00:35:58,380 --> 00:36:01,260
about in this session is audit and

912
00:36:01,260 --> 00:36:03,180
admission policies we have those in our

913
00:36:03,180 --> 00:36:04,800
report those can actually be used to

914
00:36:04,800 --> 00:36:07,619
detect and prevent some attacks so for

915
00:36:07,619 --> 00:36:09,300
those of you interested this is a link

916
00:36:09,300 --> 00:36:11,400
to our report it is a link to Albert

917
00:36:11,400 --> 00:36:12,660
Police and we'll be happy to take any

918
00:36:12,660 --> 00:36:14,640
questions that you might have

919
00:36:14,640 --> 00:36:15,980
thank you

920
00:36:15,980 --> 00:36:19,810
[Applause]

921
00:36:19,810 --> 00:36:22,920
[Music]

922
00:36:26,760 --> 00:36:29,859
[Music]

