1
00:00:01,550 --> 00:00:04,810
[Music]

2
00:00:08,119 --> 00:00:11,880
hey everybody welcome to this talk

3
00:00:11,880 --> 00:00:13,980
elf section docking that's a very long

4
00:00:13,980 --> 00:00:16,020
title we'll talk about elves hopefully

5
00:00:16,020 --> 00:00:17,400
those elves are not going to be very

6
00:00:17,400 --> 00:00:19,199
evil to us

7
00:00:19,199 --> 00:00:24,119
but um to set this stage um Dimitri I am

8
00:00:24,119 --> 00:00:27,960
with IBM X-Force where I do research for

9
00:00:27,960 --> 00:00:30,420
a phantom defense and previously I did

10
00:00:30,420 --> 00:00:33,600
the red team operations and some malware

11
00:00:33,600 --> 00:00:37,200
work and setting or absec

12
00:00:37,200 --> 00:00:40,379
so one of the things that we're going to

13
00:00:40,379 --> 00:00:42,300
talk about is um

14
00:00:42,300 --> 00:00:44,280
we're going to talk about it from the

15
00:00:44,280 --> 00:00:46,140
offensive standpoint

16
00:00:46,140 --> 00:00:49,260
um one of the probably good things that

17
00:00:49,260 --> 00:00:51,960
happens to uh red team operators when

18
00:00:51,960 --> 00:00:55,140
the red team operator fails right and

19
00:00:55,140 --> 00:00:56,699
then

20
00:00:56,699 --> 00:01:00,420
the idea start flow and we start fixing

21
00:01:00,420 --> 00:01:02,280
things that we did not know about before

22
00:01:02,280 --> 00:01:05,760
situations we were not in before or

23
00:01:05,760 --> 00:01:08,100
environments we were not uh in before

24
00:01:08,100 --> 00:01:12,479
right and so from that perspective we

25
00:01:12,479 --> 00:01:15,299
can learn a lot of things of the fail

26
00:01:15,299 --> 00:01:16,500
them

27
00:01:16,500 --> 00:01:18,600
as part of our talk we're gonna look at

28
00:01:18,600 --> 00:01:20,759
evolution of viability of static pay

29
00:01:20,759 --> 00:01:22,860
loads in Linux we're gonna see how

30
00:01:22,860 --> 00:01:25,080
that's done now and how we can do better

31
00:01:25,080 --> 00:01:28,080
and ultimately how we fixed our failures

32
00:01:28,080 --> 00:01:30,600
and we're gonna start working our way

33
00:01:30,600 --> 00:01:32,520
down to the common denominator which is

34
00:01:32,520 --> 00:01:35,159
the elf section and use it as a unit of

35
00:01:35,159 --> 00:01:36,659
a payload

36
00:01:36,659 --> 00:01:38,880
so static delivery Dynamic delivery all

37
00:01:38,880 --> 00:01:40,979
of that we're going to discuss

38
00:01:40,979 --> 00:01:44,100
and uh we'll move on to L section

39
00:01:44,100 --> 00:01:46,799
docking the actual concept that helped

40
00:01:46,799 --> 00:01:51,000
us solve our issue and finish up the

41
00:01:51,000 --> 00:01:52,860
engagement properly

42
00:01:52,860 --> 00:01:55,320
and last but not least we're gonna have

43
00:01:55,320 --> 00:01:58,680
a demo of things that uh we pretty much

44
00:01:58,680 --> 00:02:00,840
came up through uh through the time that

45
00:02:00,840 --> 00:02:03,000
we were fixing our issues and we're

46
00:02:03,000 --> 00:02:06,420
going to give some guidance to how this

47
00:02:06,420 --> 00:02:09,360
sort of concept of l dot can be detected

48
00:02:09,360 --> 00:02:10,739
and

49
00:02:10,739 --> 00:02:11,700
um

50
00:02:11,700 --> 00:02:15,239
uh you know mitigated by by companies

51
00:02:15,239 --> 00:02:17,340
so they say crowdstrike and Trend Micro

52
00:02:17,340 --> 00:02:20,700
in the report that 90 of cloud workloads

53
00:02:20,700 --> 00:02:22,920
is run in Linux I would agree with that

54
00:02:22,920 --> 00:02:25,680
we see Linux all the time in clouds

55
00:02:25,680 --> 00:02:27,959
but also what's interesting is that in

56
00:02:27,959 --> 00:02:31,640
2021 and I would imagine 2020 2022

57
00:02:31,640 --> 00:02:35,340
there's a 35 year-over-year increase in

58
00:02:35,340 --> 00:02:36,660
Linux malware

59
00:02:36,660 --> 00:02:40,860
Linux is just interesting it runs uh it

60
00:02:40,860 --> 00:02:43,379
runs workloads so it must have some

61
00:02:43,379 --> 00:02:45,780
interesting data or access

62
00:02:45,780 --> 00:02:48,239
but the interesting things that this

63
00:02:48,239 --> 00:02:51,180
report reported on uh was the shift from

64
00:02:51,180 --> 00:02:53,760
ransomware which we've seen before it

65
00:02:53,760 --> 00:02:55,560
just kind of set it forget it get the

66
00:02:55,560 --> 00:02:58,319
quick win get Roi in this stage

67
00:02:58,319 --> 00:03:01,440
into stealthy things like whiners a

68
00:03:01,440 --> 00:03:03,900
Resurgence of warm capabilities on Linux

69
00:03:03,900 --> 00:03:05,580
believe it or not

70
00:03:05,580 --> 00:03:07,980
and uh preference for long-term

71
00:03:07,980 --> 00:03:10,739
operations as opposed to coming and do

72
00:03:10,739 --> 00:03:12,599
the thing and get out

73
00:03:12,599 --> 00:03:14,819
and obviously preference for file less

74
00:03:14,819 --> 00:03:16,620
execution because of the detection

75
00:03:16,620 --> 00:03:19,500
capabilities that have been growing over

76
00:03:19,500 --> 00:03:21,000
the past years

77
00:03:21,000 --> 00:03:22,920
but there is a caveat to the files of

78
00:03:22,920 --> 00:03:25,200
file less execution in memory execution

79
00:03:25,200 --> 00:03:28,260
we're going to look at that as well

80
00:03:28,260 --> 00:03:30,300
so when we are

81
00:03:30,300 --> 00:03:32,940
um looking at it from the operation from

82
00:03:32,940 --> 00:03:34,560
offensive operation

83
00:03:34,560 --> 00:03:36,900
we have roughly a couple of choices to

84
00:03:36,900 --> 00:03:38,940
deliver payload first is the dynamic

85
00:03:38,940 --> 00:03:41,099
side which which probably empirically

86
00:03:41,099 --> 00:03:44,159
counts up to the 70 now

87
00:03:44,159 --> 00:03:47,099
um where you essentially deploy the

88
00:03:47,099 --> 00:03:48,360
Stager

89
00:03:48,360 --> 00:03:49,980
um then you fetch the payload from the

90
00:03:49,980 --> 00:03:52,680
outside maybe you do some reconnaissance

91
00:03:52,680 --> 00:03:54,959
of where you're at situational awareness

92
00:03:54,959 --> 00:03:57,299
or whatnot then you load and execute

93
00:03:57,299 --> 00:04:00,000
that payload Dynamic side right

94
00:04:00,000 --> 00:04:02,400
the static side is basically bundling

95
00:04:02,400 --> 00:04:04,799
everything that you need for a One-Shot

96
00:04:04,799 --> 00:04:06,480
deployment

97
00:04:06,480 --> 00:04:11,159
and you may think that okay well there

98
00:04:11,159 --> 00:04:13,140
are trade-offs right it's it's a dial

99
00:04:13,140 --> 00:04:14,580
sometimes you need one sometimes you

100
00:04:14,580 --> 00:04:16,858
need the the other but the interesting

101
00:04:16,858 --> 00:04:20,100
part is that the dynamic part the 70 of

102
00:04:20,100 --> 00:04:22,260
it is there for a reason because of the

103
00:04:22,260 --> 00:04:24,060
flexibility

104
00:04:24,060 --> 00:04:26,460
detonation dependencies can be accounted

105
00:04:26,460 --> 00:04:29,280
for you know where you deploy and you

106
00:04:29,280 --> 00:04:30,840
can assess the environment and things

107
00:04:30,840 --> 00:04:31,860
like this

108
00:04:31,860 --> 00:04:35,460
but also you lose a lot of things you

109
00:04:35,460 --> 00:04:36,780
probably lose a lot of time and release

110
00:04:36,780 --> 00:04:39,900
capabilities dormancy maybe an issue if

111
00:04:39,900 --> 00:04:42,780
you're generating a lot of traffic maybe

112
00:04:42,780 --> 00:04:45,540
you're trying to figure out where you

113
00:04:45,540 --> 00:04:48,840
are in the system and also the static

114
00:04:48,840 --> 00:04:50,699
side has issues because you have

115
00:04:50,699 --> 00:04:52,680
coupling variants right you need to

116
00:04:52,680 --> 00:04:54,419
figure out the the bundle that you're

117
00:04:54,419 --> 00:04:56,100
going to deploy and that's going to be

118
00:04:56,100 --> 00:04:57,720
it

119
00:04:57,720 --> 00:05:00,780
so there are designed desired Dynamic

120
00:05:00,780 --> 00:05:03,660
traits for the dynamic

121
00:05:03,660 --> 00:05:06,180
um execution

122
00:05:06,180 --> 00:05:07,860
arguably less chance of detection

123
00:05:07,860 --> 00:05:09,720
because you're you're working in in

124
00:05:09,720 --> 00:05:12,120
stages maybe right there's more

125
00:05:12,120 --> 00:05:13,560
flexibility

126
00:05:13,560 --> 00:05:15,600
but there's also

127
00:05:15,600 --> 00:05:18,360
um undesired State on the static side uh

128
00:05:18,360 --> 00:05:20,400
which is you're much heavier because you

129
00:05:20,400 --> 00:05:22,259
need to bundle the entire payload with

130
00:05:22,259 --> 00:05:23,520
the loader

131
00:05:23,520 --> 00:05:25,860
and uh you probably have a lot more

132
00:05:25,860 --> 00:05:27,780
chances of detection if you're not doing

133
00:05:27,780 --> 00:05:30,780
it properly uh because we're going to

134
00:05:30,780 --> 00:05:33,180
look at how things are done now and

135
00:05:33,180 --> 00:05:35,220
you're going to see that it may not be

136
00:05:35,220 --> 00:05:37,380
ideal for what you're trying to do less

137
00:05:37,380 --> 00:05:40,020
flexibility we've talked about that

138
00:05:40,020 --> 00:05:42,720
but I still have this this this thing in

139
00:05:42,720 --> 00:05:45,780
my mind that static is 30 and dynamic is

140
00:05:45,780 --> 00:05:46,860
70.

141
00:05:46,860 --> 00:05:48,960
yes the market is probably right that

142
00:05:48,960 --> 00:05:50,400
they're moving to Dynamic but there's

143
00:05:50,400 --> 00:05:52,500
probably something left in aesthetic and

144
00:05:52,500 --> 00:05:54,840
so we need to look at um at what what's

145
00:05:54,840 --> 00:05:58,440
still available in the static to kind of

146
00:05:58,440 --> 00:06:01,139
counter what defense can be mounted on

147
00:06:01,139 --> 00:06:04,320
the dynamic side right so here we're

148
00:06:04,320 --> 00:06:06,539
trying to improve static delivery as

149
00:06:06,539 --> 00:06:08,400
opposed to Dynamic delivery which is a

150
00:06:08,400 --> 00:06:10,740
lot more understood

151
00:06:10,740 --> 00:06:13,740
before we sort of look at the solutions

152
00:06:13,740 --> 00:06:16,199
or some of the ideas we kind of need to

153
00:06:16,199 --> 00:06:17,699
take a history

154
00:06:17,699 --> 00:06:21,060
trip into how we actually embed payloads

155
00:06:21,060 --> 00:06:22,440
right now

156
00:06:22,440 --> 00:06:25,680
it's um it's kind of been there for a

157
00:06:25,680 --> 00:06:27,900
while and there are only a few ways that

158
00:06:27,900 --> 00:06:30,000
you can do it on Linux one of the ways

159
00:06:30,000 --> 00:06:32,819
is your standard turn the binary into

160
00:06:32,819 --> 00:06:34,740
hex to our new payload or a shell code

161
00:06:34,740 --> 00:06:37,380
into a hex and stick it into a variable

162
00:06:37,380 --> 00:06:40,259
right which is going to be into Data

163
00:06:40,259 --> 00:06:42,600
section placed in the data section it

164
00:06:42,600 --> 00:06:44,940
will be it'll be there for you to

165
00:06:44,940 --> 00:06:46,740
retrieve and you can do it with a couple

166
00:06:46,740 --> 00:06:48,000
of tools

167
00:06:48,000 --> 00:06:52,020
that's very rudimentary and you can be

168
00:06:52,020 --> 00:06:54,120
sure that we're on time or statically

169
00:06:54,120 --> 00:06:57,120
somebody is going to catch you

170
00:06:57,120 --> 00:06:59,220
then you can use the compilation and

171
00:06:59,220 --> 00:07:03,080
linking and say okay well if I want to

172
00:07:03,080 --> 00:07:06,240
data be in a section why don't I specify

173
00:07:06,240 --> 00:07:07,860
which section I'm going to place that

174
00:07:07,860 --> 00:07:09,840
data in and you can actually do it

175
00:07:09,840 --> 00:07:11,900
through a compiler

176
00:07:11,900 --> 00:07:15,000
setup you can you can educate the

177
00:07:15,000 --> 00:07:16,680
compiler where you want to place your

178
00:07:16,680 --> 00:07:18,780
data you can do it in GCC with

179
00:07:18,780 --> 00:07:21,180
attributes you essentially specify a

180
00:07:21,180 --> 00:07:23,160
section and say hey my payload is going

181
00:07:23,160 --> 00:07:24,419
to be in that section and then the

182
00:07:24,419 --> 00:07:26,520
binary is going to be a separate section

183
00:07:26,520 --> 00:07:29,280
where it gets loaded it's also possible

184
00:07:29,280 --> 00:07:33,060
to be traced because the reason uh the

185
00:07:33,060 --> 00:07:36,180
way you invoke or find that payload is

186
00:07:36,180 --> 00:07:39,240
when the memory is the the section is

187
00:07:39,240 --> 00:07:40,860
loaded into the memory you can look into

188
00:07:40,860 --> 00:07:43,560
that and say hey I found my payload give

189
00:07:43,560 --> 00:07:48,300
it to me I'm gonna bootstrap and and run

190
00:07:48,300 --> 00:07:51,419
if you do not like to use GCC you can go

191
00:07:51,419 --> 00:07:53,099
directly to assembly and you can

192
00:07:53,099 --> 00:07:54,539
actually do

193
00:07:54,539 --> 00:07:57,720
um in bin directive or whatever your

194
00:07:57,720 --> 00:08:00,539
compiler allows you to do and you know

195
00:08:00,539 --> 00:08:03,660
you basic list of a elf executable into

196
00:08:03,660 --> 00:08:07,440
your binary and uh is going to be a

197
00:08:07,440 --> 00:08:09,360
similar linking you are going to find an

198
00:08:09,360 --> 00:08:11,759
external variable from your loader in

199
00:08:11,759 --> 00:08:13,620
the memory it's still going to be loaded

200
00:08:13,620 --> 00:08:16,319
and you go from there similar to GCC but

201
00:08:16,319 --> 00:08:19,220
without the overhang

202
00:08:19,379 --> 00:08:20,639
you can

203
00:08:20,639 --> 00:08:23,280
um pretty much replicate what assembly

204
00:08:23,280 --> 00:08:25,560
does on on the side if you want to do it

205
00:08:25,560 --> 00:08:27,479
in the C language you can do inline

206
00:08:27,479 --> 00:08:29,039
assembly

207
00:08:29,039 --> 00:08:31,860
um there are tools that exist

208
00:08:31,860 --> 00:08:34,140
that do it a little bit better

209
00:08:34,140 --> 00:08:36,659
a little bit more ergonomic if you will

210
00:08:36,659 --> 00:08:38,580
but the thing of it is it doesn't change

211
00:08:38,580 --> 00:08:41,159
the way you actually interact with that

212
00:08:41,159 --> 00:08:42,659
payload

213
00:08:42,659 --> 00:08:44,880
because the one thing that you always

214
00:08:44,880 --> 00:08:47,100
need to do is you need to educate the

215
00:08:47,100 --> 00:08:49,580
elf you need to construct the elf binary

216
00:08:49,580 --> 00:08:51,720
and the way you would do it you would

217
00:08:51,720 --> 00:08:53,760
say okay that's a data section via

218
00:08:53,760 --> 00:08:56,220
products prog bits directive right and

219
00:08:56,220 --> 00:08:58,560
that's very important so however which

220
00:08:58,560 --> 00:09:00,420
way you're taking which road you're

221
00:09:00,420 --> 00:09:03,000
taking to create your uh or embed your

222
00:09:03,000 --> 00:09:05,459
payload into the binary is still going

223
00:09:05,459 --> 00:09:08,399
to be possible to introspect that and

224
00:09:08,399 --> 00:09:10,320
find it

225
00:09:10,320 --> 00:09:12,360
and so before we move on I think it

226
00:09:12,360 --> 00:09:14,880
makes sense to kind of look deeper into

227
00:09:14,880 --> 00:09:16,440
what those sections are I've talked

228
00:09:16,440 --> 00:09:18,360
about prog bits I've talked about memory

229
00:09:18,360 --> 00:09:22,560
loading but in reality Alpha elf uh

230
00:09:22,560 --> 00:09:24,899
standard specifies that your binary

231
00:09:24,899 --> 00:09:26,760
consists of sections in every section

232
00:09:26,760 --> 00:09:30,600
has flags and based on those flags or

233
00:09:30,600 --> 00:09:31,800
attributes

234
00:09:31,800 --> 00:09:34,260
your uh your system loader is going to

235
00:09:34,260 --> 00:09:36,899
be behaving and most of the time the

236
00:09:36,899 --> 00:09:39,360
data is marked as loadable into the

237
00:09:39,360 --> 00:09:41,519
memory well that makes sense right

238
00:09:41,519 --> 00:09:43,860
because how do you find things in memory

239
00:09:43,860 --> 00:09:46,019
you need to be able to to Traverse that

240
00:09:46,019 --> 00:09:47,820
memory and access it something needs to

241
00:09:47,820 --> 00:09:49,740
be there so something needs to be loaded

242
00:09:49,740 --> 00:09:51,720
from the disk into the memory

243
00:09:51,720 --> 00:09:53,100
so

244
00:09:53,100 --> 00:09:54,540
but

245
00:09:54,540 --> 00:09:57,360
not all the section not not all sections

246
00:09:57,360 --> 00:09:59,760
not all types of section in elf standard

247
00:09:59,760 --> 00:10:02,519
uh do that by default carry that

248
00:10:02,519 --> 00:10:05,339
attribute of uh assuming the load into

249
00:10:05,339 --> 00:10:07,620
the memory by default and so we can take

250
00:10:07,620 --> 00:10:12,480
advantage of that uh little thing here

251
00:10:12,480 --> 00:10:13,940
so

252
00:10:13,940 --> 00:10:17,100
the real issue when you're trying to

253
00:10:17,100 --> 00:10:19,380
embed the payload into into static

254
00:10:19,380 --> 00:10:22,440
binary is that your compiler betrays you

255
00:10:22,440 --> 00:10:24,600
and you link and betrays you because

256
00:10:24,600 --> 00:10:28,680
they want to be a good good helpers

257
00:10:28,680 --> 00:10:30,779
right good good servants and they

258
00:10:30,779 --> 00:10:33,959
actually want to try and Link everything

259
00:10:33,959 --> 00:10:35,880
so when you're loading things into the

260
00:10:35,880 --> 00:10:38,399
memory when you're executing the

261
00:10:38,399 --> 00:10:41,700
um the loader then you are actually able

262
00:10:41,700 --> 00:10:43,800
to find what you put in there

263
00:10:43,800 --> 00:10:45,680
so

264
00:10:45,680 --> 00:10:48,839
there are challenges with breaking that

265
00:10:48,839 --> 00:10:51,839
linkage right what can you do

266
00:10:51,839 --> 00:10:53,579
there's not much you can do you have to

267
00:10:53,579 --> 00:10:57,420
have a very uh a sort of valid elf to

268
00:10:57,420 --> 00:10:58,440
work with

269
00:10:58,440 --> 00:11:00,959
so data carrying sections that carry

270
00:11:00,959 --> 00:11:03,660
product builds flags are PT loaded

271
00:11:03,660 --> 00:11:06,839
basically it's a it's a term for hey

272
00:11:06,839 --> 00:11:08,760
take that session load load it into the

273
00:11:08,760 --> 00:11:11,640
memory so static linking equals

274
00:11:11,640 --> 00:11:14,060
detection

275
00:11:14,640 --> 00:11:18,660
so how do we embed in a better way

276
00:11:18,660 --> 00:11:21,300
if you start thinking about it then you

277
00:11:21,300 --> 00:11:23,339
have a couple of choices you can avoid

278
00:11:23,339 --> 00:11:27,180
OS loader basically something that is

279
00:11:27,180 --> 00:11:30,360
going to execute your your Elf right and

280
00:11:30,360 --> 00:11:33,480
how do you how do you do that

281
00:11:33,480 --> 00:11:35,820
um by not so so you can actually educate

282
00:11:35,820 --> 00:11:37,320
the loader not to look at the section

283
00:11:37,320 --> 00:11:39,720
not to load it but it's very very messy

284
00:11:39,720 --> 00:11:42,360
and remember you're executing this on

285
00:11:42,360 --> 00:11:45,120
the adversarial system there may not be

286
00:11:45,120 --> 00:11:46,920
compilers there they may not be tools

287
00:11:46,920 --> 00:11:50,339
there and every single move kills you

288
00:11:50,339 --> 00:11:53,220
so we started looking at this uh Curious

289
00:11:53,220 --> 00:11:55,800
property that not all elf sections are

290
00:11:55,800 --> 00:11:57,540
actually loadable into the memory by

291
00:11:57,540 --> 00:11:58,680
default

292
00:11:58,680 --> 00:12:01,680
and uh what happens if we just avoid

293
00:12:01,680 --> 00:12:03,720
setting Flex on sections right it's

294
00:12:03,720 --> 00:12:06,899
there it's data but it's not loadable

295
00:12:06,899 --> 00:12:10,800
or and or look at something that is

296
00:12:10,800 --> 00:12:14,760
inherently known by the loader ld.so on

297
00:12:14,760 --> 00:12:17,160
Linux that is not going to be loaded

298
00:12:17,160 --> 00:12:18,959
into the memory and one such thing as

299
00:12:18,959 --> 00:12:21,540
shd node type of Elf section

300
00:12:21,540 --> 00:12:23,820
it's very widespread actually every

301
00:12:23,820 --> 00:12:25,860
executable or almost every executable

302
00:12:25,860 --> 00:12:28,560
that comes by default on Linux has that

303
00:12:28,560 --> 00:12:31,800
right is the section then that compiler

304
00:12:31,800 --> 00:12:34,200
uses just to to put like API version

305
00:12:34,200 --> 00:12:37,320
version or perhaps developers can convey

306
00:12:37,320 --> 00:12:39,660
some licensing information in it it's

307
00:12:39,660 --> 00:12:41,640
just the data it's a record structured

308
00:12:41,640 --> 00:12:43,560
data in your Elf

309
00:12:43,560 --> 00:12:46,500
the structure of it is very simple it's

310
00:12:46,500 --> 00:12:48,959
a record with a prepended size of the

311
00:12:48,959 --> 00:12:51,959
record of the data in it and maybe a

312
00:12:51,959 --> 00:12:54,240
little bit of a header metadata how many

313
00:12:54,240 --> 00:12:56,040
records you would have

314
00:12:56,040 --> 00:12:58,860
and if you do read elf on sections on

315
00:12:58,860 --> 00:13:01,740
every system uh executable that comes by

316
00:13:01,740 --> 00:13:05,940
default you will see that uh sht node is

317
00:13:05,940 --> 00:13:07,740
available

318
00:13:07,740 --> 00:13:10,920
so that's nice

319
00:13:10,920 --> 00:13:12,779
um let's move on further

320
00:13:12,779 --> 00:13:16,200
so so far we think that the idea is to

321
00:13:16,200 --> 00:13:18,300
create a dormant section in elf that

322
00:13:18,300 --> 00:13:20,579
doesn't get loaded by default by the

323
00:13:20,579 --> 00:13:23,279
loader into the memory

324
00:13:23,279 --> 00:13:26,399
but if we were to do it in the same

325
00:13:26,399 --> 00:13:28,680
single executable we have challenges

326
00:13:28,680 --> 00:13:32,040
because again section is a section and

327
00:13:32,040 --> 00:13:33,959
the structure of a section it has to be

328
00:13:33,959 --> 00:13:35,760
somehow tied to the loader it needs to

329
00:13:35,760 --> 00:13:37,380
find its

330
00:13:37,380 --> 00:13:39,839
um its um its relationship to the

331
00:13:39,839 --> 00:13:42,240
variable where that section

332
00:13:42,240 --> 00:13:43,980
um kind of linked into

333
00:13:43,980 --> 00:13:46,740
so graphically it's uh it's kind of like

334
00:13:46,740 --> 00:13:48,600
okay well you can take a section you can

335
00:13:48,600 --> 00:13:50,940
create it you can put it into the binary

336
00:13:50,940 --> 00:13:53,820
and then say it's not loadable right

337
00:13:53,820 --> 00:13:56,279
our job is to decouple that payload

338
00:13:56,279 --> 00:13:57,540
completely

339
00:13:57,540 --> 00:14:00,300
from compiler and Link in Linker so

340
00:14:00,300 --> 00:14:01,860
compiler linkers should not know about

341
00:14:01,860 --> 00:14:04,019
them

342
00:14:04,019 --> 00:14:07,320
so if compiler and linkers are are our

343
00:14:07,320 --> 00:14:09,300
enemies in this case

344
00:14:09,300 --> 00:14:11,160
what do we want

345
00:14:11,160 --> 00:14:13,860
we want to create an else section

346
00:14:13,860 --> 00:14:16,920
outside of your loader completely

347
00:14:16,920 --> 00:14:18,440
standalone

348
00:14:18,440 --> 00:14:22,560
maybe create a loader that will somehow

349
00:14:22,560 --> 00:14:25,320
know about that binary know about that

350
00:14:25,320 --> 00:14:29,040
section but but do it in such a way that

351
00:14:29,040 --> 00:14:31,920
is not inherently compiled or linked

352
00:14:31,920 --> 00:14:33,779
with it

353
00:14:33,779 --> 00:14:39,420
okay so so far the idea is to break the

354
00:14:39,420 --> 00:14:42,360
offset relationship from the loader to

355
00:14:42,360 --> 00:14:44,339
the payload to a complete separation

356
00:14:44,339 --> 00:14:46,260
between sections where the payloaders

357
00:14:46,260 --> 00:14:48,360
exist and sections that belong to the

358
00:14:48,360 --> 00:14:49,800
loader itself

359
00:14:49,800 --> 00:14:53,160
so you can think of it as a payload is

360
00:14:53,160 --> 00:14:55,620
going to be a completely foreign section

361
00:14:55,620 --> 00:14:59,399
to The Entity that elf is for the loader

362
00:14:59,399 --> 00:15:01,500
and that's essentially the docking part

363
00:15:01,500 --> 00:15:04,920
right you dock section to the executable

364
00:15:04,920 --> 00:15:07,139
that is the loader

365
00:15:07,139 --> 00:15:08,579
so

366
00:15:08,579 --> 00:15:10,620
if compiler is the problem and we're

367
00:15:10,620 --> 00:15:13,380
trying to decouple the payload and we're

368
00:15:13,380 --> 00:15:15,839
avoiding operating system loader right

369
00:15:15,839 --> 00:15:18,120
how do we do this

370
00:15:18,120 --> 00:15:21,000
well if before we were able to compile a

371
00:15:21,000 --> 00:15:22,800
section into the

372
00:15:22,800 --> 00:15:24,959
um into into that binary

373
00:15:24,959 --> 00:15:29,040
now we take a binary and dock it to the

374
00:15:29,040 --> 00:15:31,220
executable that is the loader

375
00:15:31,220 --> 00:15:34,139
maintaining the ABI compatibility the

376
00:15:34,139 --> 00:15:36,720
binary compatibility of sections within

377
00:15:36,720 --> 00:15:39,600
the elf as opposed to API compatibility

378
00:15:39,600 --> 00:15:41,279
by code

379
00:15:41,279 --> 00:15:44,160
and essentially what that looks like is

380
00:15:44,160 --> 00:15:46,740
it's a it's a framework where you can

381
00:15:46,740 --> 00:15:49,440
split it between what you do on a safe

382
00:15:49,440 --> 00:15:51,959
side your red side and on your blue side

383
00:15:51,959 --> 00:15:53,880
which is the you know in in your

384
00:15:53,880 --> 00:15:55,800
environments over there right where you

385
00:15:55,800 --> 00:15:58,199
deploy the malware

386
00:15:58,199 --> 00:16:00,899
you would have three components you

387
00:16:00,899 --> 00:16:04,260
would have a packer or a injector you

388
00:16:04,260 --> 00:16:06,060
would have a loader that is completely

389
00:16:06,060 --> 00:16:08,639
unaware what is being loaded into it and

390
00:16:08,639 --> 00:16:10,079
you will have you would have a payload

391
00:16:10,079 --> 00:16:12,899
that is in the form of a section right

392
00:16:12,899 --> 00:16:14,699
and so the

393
00:16:14,699 --> 00:16:17,940
um the injector or a packer would marry

394
00:16:17,940 --> 00:16:20,160
the two together like Legos they're

395
00:16:20,160 --> 00:16:24,420
completely uh segmented by any kind of

396
00:16:24,420 --> 00:16:26,820
memory reference but they would live in

397
00:16:26,820 --> 00:16:28,500
the same binary

398
00:16:28,500 --> 00:16:32,880
so binary is good because that's a

399
00:16:32,880 --> 00:16:34,620
standalone thing that we can work with

400
00:16:34,620 --> 00:16:37,380
and the loader Standalone loader is also

401
00:16:37,380 --> 00:16:39,060
good because it's generic it just needs

402
00:16:39,060 --> 00:16:43,079
to know how to load not what it loads

403
00:16:43,079 --> 00:16:46,019
so the

404
00:16:46,019 --> 00:16:49,019
uh what are the the help section docking

405
00:16:49,019 --> 00:16:50,820
trades that we're trying to kind of

406
00:16:50,820 --> 00:16:53,100
figure out with that idea of completely

407
00:16:53,100 --> 00:16:55,199
minor separation

408
00:16:55,199 --> 00:16:58,380
well the elf is the Standalone loader is

409
00:16:58,380 --> 00:17:00,060
completely devoid of a payload that's a

410
00:17:00,060 --> 00:17:01,680
given you can

411
00:17:01,680 --> 00:17:04,380
give it to to the victim it's going to

412
00:17:04,380 --> 00:17:07,260
stay there it doesn't need to carry any

413
00:17:07,260 --> 00:17:08,760
kind of payload

414
00:17:08,760 --> 00:17:10,980
have generic mechanisms

415
00:17:10,980 --> 00:17:13,500
to find its own section

416
00:17:13,500 --> 00:17:15,419
that it doesn't know about but we can

417
00:17:15,419 --> 00:17:18,000
instruct it to do so right find the

418
00:17:18,000 --> 00:17:20,160
offset in its own binary

419
00:17:20,160 --> 00:17:23,099
load it up and go from there so we

420
00:17:23,099 --> 00:17:25,079
create a separation

421
00:17:25,079 --> 00:17:27,179
the payload itself is also created

422
00:17:27,179 --> 00:17:29,400
separately it's not directly entangled

423
00:17:29,400 --> 00:17:31,620
or coupled with the loader that is going

424
00:17:31,620 --> 00:17:35,840
to go into no more putting data into the

425
00:17:35,840 --> 00:17:40,020
variable right no more close coupling of

426
00:17:40,020 --> 00:17:41,700
that

427
00:17:41,700 --> 00:17:44,340
you leave you'll also gain on dormancy

428
00:17:44,340 --> 00:17:47,400
so for example loader can sit there for

429
00:17:47,400 --> 00:17:50,160
months right without doing anything and

430
00:17:50,160 --> 00:17:52,500
then it can find magically its own

431
00:17:52,500 --> 00:17:54,900
payload somewhere in its own binary

432
00:17:54,900 --> 00:17:58,440
so very dormancy controls better packing

433
00:17:58,440 --> 00:18:01,380
one of the challenges with packing is uh

434
00:18:01,380 --> 00:18:03,240
they first need the temporary file

435
00:18:03,240 --> 00:18:05,820
system a lot of times to unpack and

436
00:18:05,820 --> 00:18:09,480
that's a detectable event second

437
00:18:09,480 --> 00:18:12,539
um they are fairly well

438
00:18:12,539 --> 00:18:16,140
um kind of you know traced and their

439
00:18:16,140 --> 00:18:18,600
behavior is the the entropy for the

440
00:18:18,600 --> 00:18:21,480
Packer is very uh is very is very um

441
00:18:21,480 --> 00:18:24,780
obvious right and then last but not

442
00:18:24,780 --> 00:18:25,919
least

443
00:18:25,919 --> 00:18:28,080
um has anybody tried to actually look

444
00:18:28,080 --> 00:18:30,600
back in packet or something that is

445
00:18:30,600 --> 00:18:33,059
frozen uh python executable for example

446
00:18:33,059 --> 00:18:35,340
if you're taking your entire toolkit

447
00:18:35,340 --> 00:18:37,919
with you it's very very hard because

448
00:18:37,919 --> 00:18:39,780
it's not a regular elf when you're

449
00:18:39,780 --> 00:18:42,120
freezing let's say python executables so

450
00:18:42,120 --> 00:18:45,000
in our case we need to get over that as

451
00:18:45,000 --> 00:18:48,000
well but that also creates a possibility

452
00:18:48,000 --> 00:18:50,640
for you to create fat binaries you can

453
00:18:50,640 --> 00:18:52,980
have multiple sections and a table of

454
00:18:52,980 --> 00:18:55,440
contacts where your tools reside in that

455
00:18:55,440 --> 00:18:57,299
binary and you basically call one by one

456
00:18:57,299 --> 00:18:59,520
or whichever you want right so there are

457
00:18:59,520 --> 00:19:01,740
possibilities from the red team

458
00:19:01,740 --> 00:19:04,980
operating perspective to kind of avoid a

459
00:19:04,980 --> 00:19:06,900
lot of different things that kind of

460
00:19:06,900 --> 00:19:08,940
hinder your progress

461
00:19:08,940 --> 00:19:11,880
and also injector the thing that

462
00:19:11,880 --> 00:19:14,059
basically marries the two Legos

463
00:19:14,059 --> 00:19:16,320
Lego pieces

464
00:19:16,320 --> 00:19:18,720
can also be shipped to the to the

465
00:19:18,720 --> 00:19:21,419
victim's side if you want to what you

466
00:19:21,419 --> 00:19:23,400
can do you can actually create dormant

467
00:19:23,400 --> 00:19:25,919
stages in different executables and load

468
00:19:25,919 --> 00:19:27,900
executable load those stages from one

469
00:19:27,900 --> 00:19:29,580
executable to another

470
00:19:29,580 --> 00:19:31,740
right because there is no more linear

471
00:19:31,740 --> 00:19:33,720
tracing you can work with your own

472
00:19:33,720 --> 00:19:36,000
sections or you can work and find other

473
00:19:36,000 --> 00:19:39,780
executable sections and load them up

474
00:19:39,780 --> 00:19:43,080
so that is the elf back Factory right

475
00:19:43,080 --> 00:19:45,419
it's it's sort of the the concept with

476
00:19:45,419 --> 00:19:48,240
the proof of concept if you will where

477
00:19:48,240 --> 00:19:51,299
you implement that sort of idea that

478
00:19:51,299 --> 00:19:53,220
sort of Separation

479
00:19:53,220 --> 00:19:54,720
um I've marked

480
00:19:54,720 --> 00:19:57,960
um the pieces here with uh red and blue

481
00:19:57,960 --> 00:20:02,100
just to signify where in a evolution of

482
00:20:02,100 --> 00:20:04,919
your malware deployment or location or

483
00:20:04,919 --> 00:20:07,799
disposition and malware uh your pieces

484
00:20:07,799 --> 00:20:10,620
fall right for example elf injector may

485
00:20:10,620 --> 00:20:12,660
be usually

486
00:20:12,660 --> 00:20:14,760
um for one time shot you're storing it

487
00:20:14,760 --> 00:20:16,320
in the safe side and you deliver the

488
00:20:16,320 --> 00:20:18,000
bundle which is

489
00:20:18,000 --> 00:20:19,860
you know what we're trying to do in the

490
00:20:19,860 --> 00:20:22,320
static side or you know if your

491
00:20:22,320 --> 00:20:23,820
environment allows you if you're not

492
00:20:23,820 --> 00:20:27,360
detected you can place a injector on a

493
00:20:27,360 --> 00:20:30,299
victim side to create those pipelines

494
00:20:30,299 --> 00:20:32,520
with different executables and Achieve

495
00:20:32,520 --> 00:20:35,039
different dormancy variables and kind of

496
00:20:35,039 --> 00:20:37,080
maybe even do it across

497
00:20:37,080 --> 00:20:40,260
um you know various binaries if you will

498
00:20:40,260 --> 00:20:43,080
but um so payload attachment and

499
00:20:43,080 --> 00:20:45,780
reattachment in field can be achieved

500
00:20:45,780 --> 00:20:48,480
the um the other curious thing we've

501
00:20:48,480 --> 00:20:50,700
talked about the we we said that

502
00:20:50,700 --> 00:20:53,520
fileless malware is preferable but the

503
00:20:53,520 --> 00:20:55,200
reason why it's preferable is because

504
00:20:55,200 --> 00:20:58,200
detections are less instrumented on a

505
00:20:58,200 --> 00:21:01,140
memory right than it is on disk

506
00:21:01,140 --> 00:21:02,760
however

507
00:21:02,760 --> 00:21:05,760
it's a statement that is not always true

508
00:21:05,760 --> 00:21:08,880
and you have to see uh in a specific

509
00:21:08,880 --> 00:21:10,980
environment what kills you and what

510
00:21:10,980 --> 00:21:12,780
makes you live a little bit longer right

511
00:21:12,780 --> 00:21:17,760
and so for example if you if you uh if

512
00:21:17,760 --> 00:21:19,559
you blend into the noise and that noise

513
00:21:19,559 --> 00:21:22,679
is disk so be it right you you adapt and

514
00:21:22,679 --> 00:21:25,080
overcome right in the disc land if if

515
00:21:25,080 --> 00:21:26,640
you are very

516
00:21:26,640 --> 00:21:28,799
um in in very kind of quiet environment

517
00:21:28,799 --> 00:21:31,200
that is instrumented by defense then you

518
00:21:31,200 --> 00:21:32,940
may try different things and file less

519
00:21:32,940 --> 00:21:36,299
malware may work for you but to show how

520
00:21:36,299 --> 00:21:38,700
we can actually load section in a

521
00:21:38,700 --> 00:21:41,520
fileless manner we

522
00:21:41,520 --> 00:21:43,799
um we we have some things in the elf

523
00:21:43,799 --> 00:21:45,600
pack that allows you to do that we're

524
00:21:45,600 --> 00:21:47,880
going to go through that as well but um

525
00:21:47,880 --> 00:21:49,620
the main thing

526
00:21:49,620 --> 00:21:53,640
with with sections and uh loading into

527
00:21:53,640 --> 00:21:55,799
the memory is that you don't need to do

528
00:21:55,799 --> 00:21:58,799
and protect and protect is when you have

529
00:21:58,799 --> 00:22:00,539
a piece of shell codes somewhere in your

530
00:22:00,539 --> 00:22:02,700
binary you load it up and say okay we'll

531
00:22:02,700 --> 00:22:05,520
make that make that segment executable

532
00:22:05,520 --> 00:22:08,100
and the moment you do that

533
00:22:08,100 --> 00:22:09,780
um

534
00:22:09,780 --> 00:22:11,220
nobody knows what's going to happen

535
00:22:11,220 --> 00:22:14,700
right so mprotect kind of kills you

536
00:22:14,700 --> 00:22:17,820
um and uh payloading section is that you

537
00:22:17,820 --> 00:22:19,799
can have two loaders nothing prevents

538
00:22:19,799 --> 00:22:21,419
you from dropping two binaries that are

539
00:22:21,419 --> 00:22:23,460
completely different to loaders that may

540
00:22:23,460 --> 00:22:25,620
load uh each other's payloads off of

541
00:22:25,620 --> 00:22:28,260
each other sections right so a lot of

542
00:22:28,260 --> 00:22:30,840
giving you a little bit more flexibility

543
00:22:30,840 --> 00:22:33,780
into what you can do with static things

544
00:22:33,780 --> 00:22:36,299
so the file is execution

545
00:22:36,299 --> 00:22:37,679
um there are two options that we've

546
00:22:37,679 --> 00:22:39,000
implemented

547
00:22:39,000 --> 00:22:41,240
um that are known so far at least to me

548
00:22:41,240 --> 00:22:44,340
option A is the user exec

549
00:22:44,340 --> 00:22:47,880
um essentially it's the we take a metal

550
00:22:47,880 --> 00:22:51,120
payload for for this demonstration it's

551
00:22:51,120 --> 00:22:54,840
which is really just a generation of

552
00:22:54,840 --> 00:22:58,740
implant from Metasploit and we use

553
00:22:58,740 --> 00:23:01,919
uh user exact to basically overlay the

554
00:23:01,919 --> 00:23:04,020
section that gets loaded into onto the

555
00:23:04,020 --> 00:23:05,760
memory of the loader itself wiping it

556
00:23:05,760 --> 00:23:08,940
clean and therefore there is no exact uh

557
00:23:08,940 --> 00:23:10,799
system call right and we're going to see

558
00:23:10,799 --> 00:23:14,520
later how we detect that and we can kind

559
00:23:14,520 --> 00:23:18,600
of move past the detection there so user

560
00:23:18,600 --> 00:23:21,059
exact uh knows the center knows this

561
00:23:21,059 --> 00:23:23,700
exit which is useful but the downside is

562
00:23:23,700 --> 00:23:25,500
that you will never use that loader

563
00:23:25,500 --> 00:23:27,900
again because the memory is overlaid you

564
00:23:27,900 --> 00:23:29,220
can't really perpetually do anything

565
00:23:29,220 --> 00:23:32,460
with that loader anymore in memory right

566
00:23:32,460 --> 00:23:35,220
and the other beauty of shipping

567
00:23:35,220 --> 00:23:36,539
sections

568
00:23:36,539 --> 00:23:39,600
in the in the payload in Standalone

569
00:23:39,600 --> 00:23:41,820
section is that you can have uh real

570
00:23:41,820 --> 00:23:44,880
binaries you don't need to do any kind

571
00:23:44,880 --> 00:23:46,260
of uh

572
00:23:46,260 --> 00:23:48,360
you know things that you would with the

573
00:23:48,360 --> 00:23:50,760
Shell Code if you can turn your your

574
00:23:50,760 --> 00:23:54,000
malware into an elf and dock it dock it

575
00:23:54,000 --> 00:23:55,919
into the loader that's all you're going

576
00:23:55,919 --> 00:23:59,179
to have the second option b is a

577
00:23:59,179 --> 00:24:02,460
memfdcreate which is you know kind of

578
00:24:02,460 --> 00:24:05,400
known to a lot of Defenders

579
00:24:05,400 --> 00:24:08,100
um it creates Anonymous file in the proc

580
00:24:08,100 --> 00:24:12,720
file system and it executes a Cisco 34

581
00:24:12,720 --> 00:24:14,760
319 I believe

582
00:24:14,760 --> 00:24:17,419
um to do that right but it's it's also

583
00:24:17,419 --> 00:24:21,260
detectable it has the exact the e in it

584
00:24:21,260 --> 00:24:23,880
but the plus is that you can do it

585
00:24:23,880 --> 00:24:26,760
perpetually more than once

586
00:24:26,760 --> 00:24:30,179
so as far as detection

587
00:24:30,179 --> 00:24:31,280
um

588
00:24:31,280 --> 00:24:33,900
if you take about so we're talking about

589
00:24:33,900 --> 00:24:36,299
static things so we have to work towards

590
00:24:36,299 --> 00:24:38,400
the static detection as well if you take

591
00:24:38,400 --> 00:24:40,620
bin walk and if you take metal which is

592
00:24:40,620 --> 00:24:42,780
msf payload which we're working with

593
00:24:42,780 --> 00:24:45,179
here just for demonstration purposes and

594
00:24:45,179 --> 00:24:46,919
you run a build block on it it's going

595
00:24:46,919 --> 00:24:49,020
to light up like a like a Christmas tree

596
00:24:49,020 --> 00:24:52,440
right it's gonna be very very even if

597
00:24:52,440 --> 00:24:53,460
you

598
00:24:53,460 --> 00:24:55,799
um obfuscated then it will still figure

599
00:24:55,799 --> 00:24:58,679
out different heuristics to latch onto

600
00:24:58,679 --> 00:25:02,700
the way uh metal works right but if

601
00:25:02,700 --> 00:25:05,419
you're running a bin walk on sectioned

602
00:25:05,419 --> 00:25:08,159
loader that has a section to it attached

603
00:25:08,159 --> 00:25:11,460
to it then you see very few things and

604
00:25:11,460 --> 00:25:13,679
those things are even less because what

605
00:25:13,679 --> 00:25:15,840
you see in the slide there is just me

606
00:25:15,840 --> 00:25:18,900
turning on debug in my uh executable

607
00:25:18,900 --> 00:25:21,240
um to to be able to show where um you

608
00:25:21,240 --> 00:25:22,380
know the difference usually you would

609
00:25:22,380 --> 00:25:23,580
not see anything

610
00:25:23,580 --> 00:25:24,840
okay

611
00:25:24,840 --> 00:25:26,279
now

612
00:25:26,279 --> 00:25:29,039
bin walk is is good because if you are

613
00:25:29,039 --> 00:25:30,020
Defender

614
00:25:30,020 --> 00:25:33,480
you can actually uh look at the entropy

615
00:25:33,480 --> 00:25:37,020
of executable and see how much how well

616
00:25:37,020 --> 00:25:39,799
it matches with uh with what you expect

617
00:25:39,799 --> 00:25:42,779
and so from that perspective uh section

618
00:25:42,779 --> 00:25:45,059
docking actually moves the needle out a

619
00:25:45,059 --> 00:25:46,620
little bit right because it's no longer

620
00:25:46,620 --> 00:25:49,320
your metal that you're deploying it is

621
00:25:49,320 --> 00:25:52,020
your your bundled but it's done such a

622
00:25:52,020 --> 00:25:54,299
way that it changes the entropy so but

623
00:25:54,299 --> 00:25:57,240
but for for for for people who will be

624
00:25:57,240 --> 00:25:59,220
working with this concept and who needs

625
00:25:59,220 --> 00:26:00,419
to detect that

626
00:26:00,419 --> 00:26:03,360
um you know use it use the entropy uh to

627
00:26:03,360 --> 00:26:04,919
detect that

628
00:26:04,919 --> 00:26:07,679
and also the dynamic side I know we're

629
00:26:07,679 --> 00:26:09,179
working with the static side but the

630
00:26:09,179 --> 00:26:11,700
dynamic detection is also an anime of

631
00:26:11,700 --> 00:26:13,200
ours

632
00:26:13,200 --> 00:26:15,000
um so there are a couple a couple of

633
00:26:15,000 --> 00:26:18,299
couple of things to take care of so BPF

634
00:26:18,299 --> 00:26:20,580
in Linux world has come up to be a very

635
00:26:20,580 --> 00:26:22,260
useful tool for Defenders to look at

636
00:26:22,260 --> 00:26:23,220
things

637
00:26:23,220 --> 00:26:26,580
and uh essentially it's a kernel uh

638
00:26:26,580 --> 00:26:29,039
instrumentation that can be modified at

639
00:26:29,039 --> 00:26:31,140
the user land and basically say hey

640
00:26:31,140 --> 00:26:33,659
here's the trace point that I would like

641
00:26:33,659 --> 00:26:36,779
uh Colonel to look at and report it back

642
00:26:36,779 --> 00:26:39,360
to me if you know something happens some

643
00:26:39,360 --> 00:26:41,039
event happens or a system called called

644
00:26:41,039 --> 00:26:44,480
right so for example CIS enter MFD open

645
00:26:44,480 --> 00:26:48,840
MFG exit or remember the yeah exit MMD

646
00:26:48,840 --> 00:26:53,640
open or uh Center exact so BPF

647
00:26:53,640 --> 00:26:55,380
um can do that for you that's why we

648
00:26:55,380 --> 00:26:58,260
wanted to use the user exec or MFD to be

649
00:26:58,260 --> 00:26:59,760
able to play with it a little bit right

650
00:26:59,760 --> 00:27:02,820
it depends which environment you're in

651
00:27:02,820 --> 00:27:05,100
um you should be able to uh to do that

652
00:27:05,100 --> 00:27:08,279
and the other thing is Yara right

653
00:27:08,279 --> 00:27:10,980
um Yara the way it works right now from

654
00:27:10,980 --> 00:27:12,539
command line it doesn't detect section

655
00:27:12,539 --> 00:27:14,520
loading but you can actually instrument

656
00:27:14,520 --> 00:27:17,820
it from if you drop into uh we'll see

657
00:27:17,820 --> 00:27:18,740
that later

658
00:27:18,740 --> 00:27:21,299
there's a Code out there that can parse

659
00:27:21,299 --> 00:27:24,120
the elf and basically look for SSG node

660
00:27:24,120 --> 00:27:25,980
sections or maybe you can do it by by

661
00:27:25,980 --> 00:27:27,659
size whatever the case may be however

662
00:27:27,659 --> 00:27:29,940
well you know your environment and what

663
00:27:29,940 --> 00:27:32,279
you're expecting it to be

664
00:27:32,279 --> 00:27:35,279
so now the demo I'm gonna narrate

665
00:27:35,279 --> 00:27:36,900
through the demo uh there are a lot of

666
00:27:36,900 --> 00:27:39,539
moving Parts we're gonna see execution

667
00:27:39,539 --> 00:27:42,240
of through user exec

668
00:27:42,240 --> 00:27:44,940
uh we're gonna see docking obviously and

669
00:27:44,940 --> 00:27:46,380
then we're gonna go through some of the

670
00:27:46,380 --> 00:27:48,419
detection capabilities and and see how

671
00:27:48,419 --> 00:27:51,559
that they manifest

672
00:27:54,840 --> 00:27:57,539
all right so we're starting up with the

673
00:27:57,539 --> 00:27:59,880
setup simulated environment

674
00:27:59,880 --> 00:28:02,580
um different tabs the victim tab where

675
00:28:02,580 --> 00:28:06,360
you obviously deploy your malware

676
00:28:06,360 --> 00:28:09,440
um and then you we use

677
00:28:09,440 --> 00:28:12,299
metasploits uh callback to basically

678
00:28:12,299 --> 00:28:16,140
catch HTTP as reverse payload just for

679
00:28:16,140 --> 00:28:18,419
the for the sake of it right you can use

680
00:28:18,419 --> 00:28:20,640
anything you want to to catch that but

681
00:28:20,640 --> 00:28:22,020
essentially that's what it is we don't

682
00:28:22,020 --> 00:28:24,539
have any any section sessions right now

683
00:28:24,539 --> 00:28:28,559
so let's just try to dock the

684
00:28:28,559 --> 00:28:31,740
uh the section with our payload into

685
00:28:31,740 --> 00:28:34,140
into the loader marry them up together

686
00:28:34,140 --> 00:28:37,200
right like Legos so the loader or the

687
00:28:37,200 --> 00:28:39,779
Packer takes the loader and takes the uh

688
00:28:39,779 --> 00:28:42,240
the metal elf which is the payload and

689
00:28:42,240 --> 00:28:44,220
says okay well here's my cradle I'm

690
00:28:44,220 --> 00:28:47,100
gonna give you a cradle which is you

691
00:28:47,100 --> 00:28:49,200
know the usable part of it

692
00:28:49,200 --> 00:28:51,539
um that you're gonna ship to um to the

693
00:28:51,539 --> 00:28:52,740
victim side

694
00:28:52,740 --> 00:28:56,940
and um I'm going to specify the name of

695
00:28:56,940 --> 00:28:58,620
that section where the loader is going

696
00:28:58,620 --> 00:28:59,580
to look

697
00:28:59,580 --> 00:29:01,740
uh for

698
00:29:01,740 --> 00:29:03,840
um for it's for the section it needs to

699
00:29:03,840 --> 00:29:07,320
get the payload out or whatnot and then

700
00:29:07,320 --> 00:29:09,419
some of the other features of that of

701
00:29:09,419 --> 00:29:13,320
that loader is that it has a way to mine

702
00:29:13,320 --> 00:29:15,600
the keys out of the section to decrypt

703
00:29:15,600 --> 00:29:18,480
the payload itself and so one of the uh

704
00:29:18,480 --> 00:29:19,980
things that we've done here is we're

705
00:29:19,980 --> 00:29:23,159
saying okay well go ahead and uh use a

706
00:29:23,159 --> 00:29:25,500
another section really the key the keys

707
00:29:25,500 --> 00:29:27,779
uh had a block is going to be and then

708
00:29:27,779 --> 00:29:30,840
I'll give you a key for it right so we

709
00:29:30,840 --> 00:29:33,899
can play with uh metal on top above your

710
00:29:33,899 --> 00:29:36,000
station on top of mining your own keys

711
00:29:36,000 --> 00:29:38,700
out of the block right so just uh just

712
00:29:38,700 --> 00:29:40,500
an example what we had to do for for

713
00:29:40,500 --> 00:29:42,600
that engagement to be able to do that

714
00:29:42,600 --> 00:29:46,260
once this is done uh we can we can

715
00:29:46,260 --> 00:29:48,899
actually launch oh yeah so we're seeing

716
00:29:48,899 --> 00:29:50,880
that the there are different options

717
00:29:50,880 --> 00:29:53,039
there's memfd or if you want to do user

718
00:29:53,039 --> 00:29:55,500
exact if you want to background the

719
00:29:55,500 --> 00:29:57,299
execution or if you want to change the

720
00:29:57,299 --> 00:30:00,179
name in the process table or uh whatever

721
00:30:00,179 --> 00:30:01,860
the case may be you you should be able

722
00:30:01,860 --> 00:30:03,240
to do that

723
00:30:03,240 --> 00:30:05,580
um and also last but not least is to you

724
00:30:05,580 --> 00:30:08,039
you can pass arguments to your payload

725
00:30:08,039 --> 00:30:09,960
so for example payload may have some

726
00:30:09,960 --> 00:30:11,880
variables that it needs to have and the

727
00:30:11,880 --> 00:30:13,799
loader should be able to uh to kind of

728
00:30:13,799 --> 00:30:15,559
do that for um

729
00:30:15,559 --> 00:30:17,760
for it

730
00:30:17,760 --> 00:30:20,399
so let's see how we can actually execute

731
00:30:20,399 --> 00:30:22,639
that

732
00:30:26,340 --> 00:30:28,559
right so we're specifying the key that

733
00:30:28,559 --> 00:30:30,720
the loader is going to look at a bunch

734
00:30:30,720 --> 00:30:32,100
of debugging information don't pay

735
00:30:32,100 --> 00:30:35,279
attention but essentially that's what

736
00:30:35,279 --> 00:30:38,820
happens user exec loads the the elf

737
00:30:38,820 --> 00:30:40,559
section that is being found

738
00:30:40,559 --> 00:30:44,340
right and then we go back to our our

739
00:30:44,340 --> 00:30:46,260
callback and we're seeing the session

740
00:30:46,260 --> 00:30:48,659
session here it is a full-fledged

741
00:30:48,659 --> 00:30:50,760
session right we can do anything we want

742
00:30:50,760 --> 00:30:53,899
in it uh the payload came from from

743
00:30:53,899 --> 00:30:56,039
completely unknown binary that gets

744
00:30:56,039 --> 00:30:58,559
docked to the loader and just to kind of

745
00:30:58,559 --> 00:31:01,559
show that it doesn't only get created

746
00:31:01,559 --> 00:31:03,059
but you can actually run commands

747
00:31:03,059 --> 00:31:04,500
through it right

748
00:31:04,500 --> 00:31:07,260
but the Curious part about it after this

749
00:31:07,260 --> 00:31:09,539
is done right is we're going to repeat

750
00:31:09,539 --> 00:31:12,059
the exercise but this time the exercise

751
00:31:12,059 --> 00:31:15,600
is going to be geared towards how you

752
00:31:15,600 --> 00:31:17,340
detect and what you see on the back end

753
00:31:17,340 --> 00:31:19,620
so clean it all up

754
00:31:19,620 --> 00:31:21,179
um start it back up

755
00:31:21,179 --> 00:31:22,799
and let's let's just look at the

756
00:31:22,799 --> 00:31:24,120
detection

757
00:31:24,120 --> 00:31:26,220
so the detection part

758
00:31:26,220 --> 00:31:28,080
um first of all let's look at BPF Trace

759
00:31:28,080 --> 00:31:31,080
in here we have a configuration file

760
00:31:31,080 --> 00:31:33,600
where we say rudimentary things like

761
00:31:33,600 --> 00:31:36,360
Center exact center

762
00:31:36,360 --> 00:31:37,020
um

763
00:31:37,020 --> 00:31:39,720
uh exit an MFD and whatever the case may

764
00:31:39,720 --> 00:31:42,659
be and just basically say hey give me a

765
00:31:42,659 --> 00:31:45,899
flag where I detect something on a

766
00:31:45,899 --> 00:31:47,700
system when that happens

767
00:31:47,700 --> 00:31:51,600
so BPF Trace is is I I think is a

768
00:31:51,600 --> 00:31:53,600
breakthrough I think it's very useful

769
00:31:53,600 --> 00:31:56,460
but we obviously need to work around

770
00:31:56,460 --> 00:31:57,419
that

771
00:31:57,419 --> 00:31:59,700
to deploy BPF Trace it's a it's a super

772
00:31:59,700 --> 00:32:03,000
user capability you would have to have

773
00:32:03,000 --> 00:32:05,460
um on on the system you would do it

774
00:32:05,460 --> 00:32:07,500
obviously as a

775
00:32:07,500 --> 00:32:09,539
um as an admin or as a security

776
00:32:09,539 --> 00:32:11,340
personnel

777
00:32:11,340 --> 00:32:12,960
um and we'll repeat the same exercise

778
00:32:12,960 --> 00:32:16,320
only this time we're going back to how

779
00:32:16,320 --> 00:32:19,260
detection happens

780
00:32:19,260 --> 00:32:22,440
so my tmac session is a little bit in

781
00:32:22,440 --> 00:32:23,580
the mix here

782
00:32:23,580 --> 00:32:27,480
um here we uh do the bundling again

783
00:32:27,480 --> 00:32:30,539
um to be able to to see how obviously

784
00:32:30,539 --> 00:32:32,220
the assist exact happens because we are

785
00:32:32,220 --> 00:32:34,500
executing the shell command and then

786
00:32:34,500 --> 00:32:36,960
we're launching the the

787
00:32:36,960 --> 00:32:39,960
the loader uh or the Cradle which is a

788
00:32:39,960 --> 00:32:43,140
loader with with Doc section and uh the

789
00:32:43,140 --> 00:32:45,480
only thing that we see after that is uh

790
00:32:45,480 --> 00:32:47,580
as far as CIS enter like a system call

791
00:32:47,580 --> 00:32:49,080
which is supposed to execute something

792
00:32:49,080 --> 00:32:51,779
some payload we don't know what it is it

793
00:32:51,779 --> 00:32:53,399
doesn't have HTTP callback it doesn't

794
00:32:53,399 --> 00:32:54,960
have any network traffic all it does it

795
00:32:54,960 --> 00:32:57,480
has hostname and that's unfortunately is

796
00:32:57,480 --> 00:32:59,880
a courtesy of metal itself there's not

797
00:32:59,880 --> 00:33:01,320
much you can do unless you can clean up

798
00:33:01,320 --> 00:33:04,620
metal itself and and uh get rid of that

799
00:33:04,620 --> 00:33:06,899
but I believe it's done so you can

800
00:33:06,899 --> 00:33:08,399
actually connect to something

801
00:33:08,399 --> 00:33:11,039
and you have again you have a session

802
00:33:11,039 --> 00:33:13,140
um only now BPF tradition doesn't see

803
00:33:13,140 --> 00:33:16,100
the HTTP callbacks or anything like that

804
00:33:16,100 --> 00:33:20,220
innocuous uh host name call right

805
00:33:20,220 --> 00:33:25,019
Yara uh similar uh tracing only now you

806
00:33:25,019 --> 00:33:27,179
have a code that should be able to do it

807
00:33:27,179 --> 00:33:29,000
at the static site

808
00:33:29,000 --> 00:33:31,980
uh and you say okay well let me go

809
00:33:31,980 --> 00:33:33,720
through all my executables on the entire

810
00:33:33,720 --> 00:33:37,679
system dump SSG nodes for example or

811
00:33:37,679 --> 00:33:40,980
maybe dump some other sections and see

812
00:33:40,980 --> 00:33:42,779
what what I can get from there right

813
00:33:42,779 --> 00:33:45,179
because now as a Defender you should be

814
00:33:45,179 --> 00:33:48,059
able to worry about the sizes of your

815
00:33:48,059 --> 00:33:50,539
sections what type of thing is in there

816
00:33:50,539 --> 00:33:54,120
and whether it's sht node or not and why

817
00:33:54,120 --> 00:33:56,760
SSG node is in this executable and why

818
00:33:56,760 --> 00:33:59,700
is it why there are more than one right

819
00:33:59,700 --> 00:34:01,559
so you really need to kind of go through

820
00:34:01,559 --> 00:34:04,799
and uh and see that so not obviously not

821
00:34:04,799 --> 00:34:06,659
a lot of uh environments are

822
00:34:06,659 --> 00:34:08,040
instrumented against that at the moment

823
00:34:08,040 --> 00:34:11,219
so we can Live Another Day right if you

824
00:34:11,219 --> 00:34:15,000
will but as you can see SSG node is uh

825
00:34:15,000 --> 00:34:17,760
is is really a large where the payload

826
00:34:17,760 --> 00:34:22,500
is it's um it's not very good Yara you

827
00:34:22,500 --> 00:34:25,619
know has API interface and um Defenders

828
00:34:25,619 --> 00:34:29,419
can go through and uh detect it

829
00:34:29,520 --> 00:34:30,239
um

830
00:34:30,239 --> 00:34:32,699
through their tools

831
00:34:32,699 --> 00:34:35,040
so

832
00:34:35,040 --> 00:34:38,639
that's basically what lpac elf back uh

833
00:34:38,639 --> 00:34:40,940
does

834
00:34:42,060 --> 00:34:46,260
so the takeaways the takeaways are help

835
00:34:46,260 --> 00:34:49,320
suction docking lives in a gray area

836
00:34:49,320 --> 00:34:51,239
between

837
00:34:51,239 --> 00:34:53,280
fully static compilation of your

838
00:34:53,280 --> 00:34:56,820
payloads into your loaders right and

839
00:34:56,820 --> 00:34:59,760
allows you as an operator malware writer

840
00:34:59,760 --> 00:35:01,560
to be able to

841
00:35:01,560 --> 00:35:04,680
kind of stretch your lifespan depending

842
00:35:04,680 --> 00:35:06,300
which environment you're you're in

843
00:35:06,300 --> 00:35:08,700
because it gives you more flexibility if

844
00:35:08,700 --> 00:35:10,500
you have more flexibility on the dynamic

845
00:35:10,500 --> 00:35:13,260
side you now get more flexibility on the

846
00:35:13,260 --> 00:35:16,859
static side yet you may achieve dormancy

847
00:35:16,859 --> 00:35:19,020
you may work in air-gapped environments

848
00:35:19,020 --> 00:35:21,119
if you want right with some variable

849
00:35:21,119 --> 00:35:23,520
because you can have multiple payloads

850
00:35:23,520 --> 00:35:25,440
stage in different sections and you can

851
00:35:25,440 --> 00:35:28,380
kind of call whichever you want

852
00:35:28,380 --> 00:35:31,200
elf Duncan achieves ABI not API

853
00:35:31,200 --> 00:35:34,260
compatibility because elf is the common

854
00:35:34,260 --> 00:35:36,720
denominator what we're working with

855
00:35:36,720 --> 00:35:40,320
uh so no API changes happens unless elf

856
00:35:40,320 --> 00:35:41,640
changes which

857
00:35:41,640 --> 00:35:44,160
you know it's been on version one for 30

858
00:35:44,160 --> 00:35:46,260
plus years

859
00:35:46,260 --> 00:35:49,260
um and um you know elf docking overcomes

860
00:35:49,260 --> 00:35:53,040
uh uh Packers in memory so you can bring

861
00:35:53,040 --> 00:35:57,240
your impact you can bring your Frozen uh

862
00:35:57,240 --> 00:36:00,300
interpreters if you will right like Ruby

863
00:36:00,300 --> 00:36:03,000
or whatever the case may be and uh you

864
00:36:03,000 --> 00:36:04,800
do not have to uncompress you do not

865
00:36:04,800 --> 00:36:07,500
have to have any kind of header and you

866
00:36:07,500 --> 00:36:09,660
don't have to have tmpfs to be able to

867
00:36:09,660 --> 00:36:11,099
do that

868
00:36:11,099 --> 00:36:13,440
from the defensive perspective

869
00:36:13,440 --> 00:36:16,619
we've shown what uh what defense can do

870
00:36:16,619 --> 00:36:18,859
how they can do both an aesthetic side

871
00:36:18,859 --> 00:36:22,760
Dynamic side and uh you know

872
00:36:22,760 --> 00:36:26,280
kind of say that that's a new way of of

873
00:36:26,280 --> 00:36:28,680
bringing them malware into into the

874
00:36:28,680 --> 00:36:30,119
environment and create tools against

875
00:36:30,119 --> 00:36:31,020
that

876
00:36:31,020 --> 00:36:33,359
but the offense obviously can work

877
00:36:33,359 --> 00:36:35,940
further to do deeper packing do

878
00:36:35,940 --> 00:36:39,000
encryption as we've done here and uh we

879
00:36:39,000 --> 00:36:41,280
can use the concept of factories to

880
00:36:41,280 --> 00:36:43,079
basically borrow cradles borrow

881
00:36:43,079 --> 00:36:44,940
different segments of different

882
00:36:44,940 --> 00:36:48,480
executables to continue living in the um

883
00:36:48,480 --> 00:36:51,359
in in the victim's land

884
00:36:51,359 --> 00:36:54,780
so we've got three minutes left uh I can

885
00:36:54,780 --> 00:36:56,820
take some questions and here's the code

886
00:36:56,820 --> 00:36:59,040
for the proof of concept

887
00:36:59,040 --> 00:37:01,200
um you guys can you know it's it's MIT

888
00:37:01,200 --> 00:37:04,579
you can uh extend it play with it

889
00:37:04,579 --> 00:37:08,839
submit bugs right

890
00:37:09,060 --> 00:37:13,279
and I'll take questions if any

891
00:37:13,940 --> 00:37:17,150
[Music]

892
00:37:19,320 --> 00:37:21,240
cool thank you very much I'll be

893
00:37:21,240 --> 00:37:24,240
available outside or you know if anybody

894
00:37:24,240 --> 00:37:26,040
has questions offline I'll be able to

895
00:37:26,040 --> 00:37:27,390
answer thank you very much for coming

896
00:37:27,390 --> 00:37:27,870
[Applause]

897
00:37:27,870 --> 00:37:31,740
[Music]

898
00:37:31,740 --> 00:37:33,919
foreign

899
00:37:36,500 --> 00:37:39,599
[Music]

