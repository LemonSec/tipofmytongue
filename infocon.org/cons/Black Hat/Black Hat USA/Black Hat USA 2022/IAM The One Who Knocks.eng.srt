1
00:00:01,700 --> 00:00:03,720
[Music]

2
00:00:03,720 --> 00:00:06,720
foreign

3
00:00:09,380 --> 00:00:11,940
thank you for joining us today

4
00:00:11,940 --> 00:00:14,099
this talk is called I am the one who

5
00:00:14,099 --> 00:00:15,299
knocks

6
00:00:15,299 --> 00:00:17,100
so my name is the head of security

7
00:00:17,100 --> 00:00:18,660
research for an Israel based out of

8
00:00:18,660 --> 00:00:21,779
aromatic we focus on cloud security with

9
00:00:21,779 --> 00:00:23,939
a special focus on cloud infrastructure

10
00:00:23,939 --> 00:00:27,779
security so two cents about myself I've

11
00:00:27,779 --> 00:00:29,279
been doing security research for a very

12
00:00:29,279 --> 00:00:30,779
long time basically my background is

13
00:00:30,779 --> 00:00:32,940
Windows exploitation active directory

14
00:00:32,940 --> 00:00:35,820
and thread intelligence hello everyone

15
00:00:35,820 --> 00:00:37,980
to contributing on this I spent most of

16
00:00:37,980 --> 00:00:39,719
my time researching the many cloud

17
00:00:39,719 --> 00:00:42,300
services out there I also work during

18
00:00:42,300 --> 00:00:43,559
the years of several large organizations

19
00:00:43,559 --> 00:00:45,960
such as Microsoft and checkpoint and

20
00:00:45,960 --> 00:00:47,640
spend few years in smaller security

21
00:00:47,640 --> 00:00:50,399
startups in Israel so this is my second

22
00:00:50,399 --> 00:00:52,020
time speaking blackhead and I'm super

23
00:00:52,020 --> 00:00:54,719
excited to speak in front of you and I

24
00:00:54,719 --> 00:00:56,640
let no one present himself

25
00:00:56,640 --> 00:00:59,399
hi hi everyone I'm Nam I'm A Cloud

26
00:00:59,399 --> 00:01:01,199
security researcher and my background is

27
00:01:01,199 --> 00:01:04,559
in embed devices and offensive security

28
00:01:04,559 --> 00:01:07,140
okay so actually this talk started based

29
00:01:07,140 --> 00:01:08,760
on the brainstorming session Norman I

30
00:01:08,760 --> 00:01:11,159
had around one of the core Services the

31
00:01:11,159 --> 00:01:13,979
mighty IM service and how it defer in

32
00:01:13,979 --> 00:01:16,860
function from One Cloud vendor to

33
00:01:16,860 --> 00:01:18,780
another now before we start just a

34
00:01:18,780 --> 00:01:20,820
little bit of context about why we think

35
00:01:20,820 --> 00:01:22,380
this is an important topic to speak

36
00:01:22,380 --> 00:01:24,600
about we know that organization deployed

37
00:01:24,600 --> 00:01:26,159
their infrastructure on a multi-cloud

38
00:01:26,159 --> 00:01:28,200
platform more and more these days and

39
00:01:28,200 --> 00:01:29,580
the reason is there are times you want

40
00:01:29,580 --> 00:01:30,720
to lift and shift on-premises

41
00:01:30,720 --> 00:01:32,640
infrastructure for example to get

42
00:01:32,640 --> 00:01:34,619
redundancy so you distribute it across

43
00:01:34,619 --> 00:01:36,540
different vendors sometimes you just

44
00:01:36,540 --> 00:01:39,180
want to reduce cost or choose the best

45
00:01:39,180 --> 00:01:40,860
operate service so you may run your

46
00:01:40,860 --> 00:01:43,200
workloads on AWS but for some reason the

47
00:01:43,200 --> 00:01:44,400
development team has a special

48
00:01:44,400 --> 00:01:46,799
requirements to use a specific database

49
00:01:46,799 --> 00:01:49,680
that only exists in gcp now once you do

50
00:01:49,680 --> 00:01:52,979
that you are now managing two separately

51
00:01:52,979 --> 00:01:55,320
Cloud infrastructures especially IEM

52
00:01:55,320 --> 00:01:57,479
infrastructures now on the surfaces seen

53
00:01:57,479 --> 00:01:59,280
that all vendors give a similar set of

54
00:01:59,280 --> 00:02:00,960
management tools and core services that

55
00:02:00,960 --> 00:02:03,780
help us actually support us managing

56
00:02:03,780 --> 00:02:05,640
those sources in the cloud but how

57
00:02:05,640 --> 00:02:07,799
actually does it behave under the hood

58
00:02:07,799 --> 00:02:10,199
are all vendors actually following the

59
00:02:10,199 --> 00:02:12,959
same rules the same best practices and

60
00:02:12,959 --> 00:02:14,520
are all vendors following the share

61
00:02:14,520 --> 00:02:16,440
responsibility model in exactly the same

62
00:02:16,440 --> 00:02:17,520
way

63
00:02:17,520 --> 00:02:19,620
now what about us the security

64
00:02:19,620 --> 00:02:21,599
professional that need to manage the

65
00:02:21,599 --> 00:02:23,580
cloud do we really understand how each

66
00:02:23,580 --> 00:02:25,860
provider Implement its own access model

67
00:02:25,860 --> 00:02:28,860
and what are the do and don'ts of each

68
00:02:28,860 --> 00:02:30,959
platform and it's hard enough to be

69
00:02:30,959 --> 00:02:34,260
expert on one Cloud platform but often

70
00:02:34,260 --> 00:02:36,300
we copy features and routines from one

71
00:02:36,300 --> 00:02:38,879
platform to another and those may work

72
00:02:38,879 --> 00:02:40,640
differently from what we expect

73
00:02:40,640 --> 00:02:42,540
at the beginning

74
00:02:42,540 --> 00:02:44,459
and we know that vendor spends Millions

75
00:02:44,459 --> 00:02:46,319
sometimes billions of dollars on

76
00:02:46,319 --> 00:02:48,900
securing their infrastructure each year

77
00:02:48,900 --> 00:02:51,480
but how does it actually translate into

78
00:02:51,480 --> 00:02:54,720
better security posture on our end the

79
00:02:54,720 --> 00:02:58,220
consumer side if you think about it IIM

80
00:02:58,220 --> 00:03:01,560
and all around I am actually not those

81
00:03:01,560 --> 00:03:04,200
mistakes or weak spot that surround I am

82
00:03:04,200 --> 00:03:05,760
are actually the cloud provider

83
00:03:05,760 --> 00:03:08,220
responsibility right it's basically all

84
00:03:08,220 --> 00:03:10,980
on us we are as Cloud consumers the one

85
00:03:10,980 --> 00:03:14,340
that accountable for that security so if

86
00:03:14,340 --> 00:03:16,140
you're a Fortune 100 company that's

87
00:03:16,140 --> 00:03:17,459
great you probably have a dedicated

88
00:03:17,459 --> 00:03:20,760
security team for each Cloud vendor and

89
00:03:20,760 --> 00:03:23,099
even then sometimes things can get a bit

90
00:03:23,099 --> 00:03:25,260
complex so think about how user access

91
00:03:25,260 --> 00:03:26,580
different resources in the cloud

92
00:03:26,580 --> 00:03:28,440
motherboard authentication and

93
00:03:28,440 --> 00:03:30,659
authorization logic evaluation policies

94
00:03:30,659 --> 00:03:32,220
what about internal service

95
00:03:32,220 --> 00:03:33,900
communication so those non-human

96
00:03:33,900 --> 00:03:36,300
identities non-human services that need

97
00:03:36,300 --> 00:03:37,980
to speak one with each other do we

98
00:03:37,980 --> 00:03:39,599
really understand how each vendor

99
00:03:39,599 --> 00:03:41,940
operates internally under the hood and

100
00:03:41,940 --> 00:03:43,860
what are those involved in managing

101
00:03:43,860 --> 00:03:45,780
those manage identities and what about

102
00:03:45,780 --> 00:03:47,340
encryption and encryption keys do we

103
00:03:47,340 --> 00:03:49,019
have full visibility into our

104
00:03:49,019 --> 00:03:51,659
multi-cloud platform encryption keys and

105
00:03:51,659 --> 00:03:54,060
last but not least what about login do

106
00:03:54,060 --> 00:03:56,879
we log everything how can we use logs to

107
00:03:56,879 --> 00:03:59,940
our advantage now

108
00:03:59,940 --> 00:04:01,560
today we're going to focus basically on

109
00:04:01,560 --> 00:04:03,239
the hidden risk of managing and

110
00:04:03,239 --> 00:04:05,459
multi-cloud IM environmental Google

111
00:04:05,459 --> 00:04:07,379
through main differences between each

112
00:04:07,379 --> 00:04:10,019
Cloud infrastructure and talk about the

113
00:04:10,019 --> 00:04:12,540
weak security spots of those platforms

114
00:04:12,540 --> 00:04:15,420
and when I say we execute spots I refer

115
00:04:15,420 --> 00:04:18,238
to infrastructure features that are

116
00:04:18,238 --> 00:04:20,220
shared among all vendors such as

117
00:04:20,220 --> 00:04:23,580
permissions non-human identities default

118
00:04:23,580 --> 00:04:27,360
policies Etc now we talk about several

119
00:04:27,360 --> 00:04:28,919
use cases and see how inconsistent

120
00:04:28,919 --> 00:04:30,419
entitlement actually can lead to

121
00:04:30,419 --> 00:04:32,880
unintended access and what are the steps

122
00:04:32,880 --> 00:04:34,380
the defender can take in order to

123
00:04:34,380 --> 00:04:36,960
improve their overall security posture

124
00:04:36,960 --> 00:04:39,000
now don't get me wrong here I'm not

125
00:04:39,000 --> 00:04:41,400
saying other security flows are not used

126
00:04:41,400 --> 00:04:42,960
by attackers or less important to

127
00:04:42,960 --> 00:04:44,940
protect against but if there is one

128
00:04:44,940 --> 00:04:46,259
thing we would like you to take from

129
00:04:46,259 --> 00:04:48,840
this specific session is that I am is

130
00:04:48,840 --> 00:04:50,280
the Belmont service it is the core

131
00:04:50,280 --> 00:04:52,199
service it is the Gateway that control

132
00:04:52,199 --> 00:04:55,380
every access to your Cloud resources and

133
00:04:55,380 --> 00:04:57,360
it must be protected

134
00:04:57,360 --> 00:04:59,880
so let's let's begin

135
00:04:59,880 --> 00:05:02,580
so let's spend two minutes on iron so at

136
00:05:02,580 --> 00:05:04,199
the high level view I am composed of

137
00:05:04,199 --> 00:05:06,240
identities which is basically anything

138
00:05:06,240 --> 00:05:08,759
that can authenticate against the IM

139
00:05:08,759 --> 00:05:10,979
service and in addition it provides us

140
00:05:10,979 --> 00:05:13,500
permission documents that Define who can

141
00:05:13,500 --> 00:05:15,600
access what and under which condition

142
00:05:15,600 --> 00:05:18,060
and each provider has its own unique

143
00:05:18,060 --> 00:05:19,979
identities and share some of those

144
00:05:19,979 --> 00:05:21,900
between the vendors so you have users

145
00:05:21,900 --> 00:05:23,220
and groups which are shared between all

146
00:05:23,220 --> 00:05:25,199
vendors but also you have some special

147
00:05:25,199 --> 00:05:27,000
type of identities such as predefined

148
00:05:27,000 --> 00:05:29,220
groups in gcp that those represent all

149
00:05:29,220 --> 00:05:31,440
authenticated users or project owners so

150
00:05:31,440 --> 00:05:32,880
you need to be very well familiar with

151
00:05:32,880 --> 00:05:35,880
the infrastructure you know to make a

152
00:05:35,880 --> 00:05:37,919
good security policies

153
00:05:37,919 --> 00:05:40,020
now if we look at identities we can

154
00:05:40,020 --> 00:05:42,060
break those two two main categories

155
00:05:42,060 --> 00:05:44,280
human identities and non-human

156
00:05:44,280 --> 00:05:46,199
identities now non-human identities

157
00:05:46,199 --> 00:05:49,080
today are very important to security uh

158
00:05:49,080 --> 00:05:50,639
actually each vendor has its own

159
00:05:50,639 --> 00:05:53,039
implementation for another season we'll

160
00:05:53,039 --> 00:05:56,400
mentioned those during the session

161
00:05:56,400 --> 00:05:58,500
now if we put the major three providers

162
00:05:58,500 --> 00:06:01,320
one again another this is how the

163
00:06:01,320 --> 00:06:03,060
comparison looks like on the left side

164
00:06:03,060 --> 00:06:05,520
of the chart we have many different

165
00:06:05,520 --> 00:06:07,740
types of identities and on the right we

166
00:06:07,740 --> 00:06:09,419
have the explanation documents now each

167
00:06:09,419 --> 00:06:11,039
provider uses some kind of permission

168
00:06:11,039 --> 00:06:13,800
documents usually in the form of Json

169
00:06:13,800 --> 00:06:16,080
and those documents are linked to the

170
00:06:16,080 --> 00:06:18,479
identities we see on the left now the

171
00:06:18,479 --> 00:06:19,860
linkage operation sometimes it's called

172
00:06:19,860 --> 00:06:21,419
assigned or buying or attachment but it

173
00:06:21,419 --> 00:06:22,979
doesn't matter it's basically the same

174
00:06:22,979 --> 00:06:24,360
the same purpose you have the same

175
00:06:24,360 --> 00:06:26,400
purpose now the major difference the

176
00:06:26,400 --> 00:06:27,600
first major difference between those

177
00:06:27,600 --> 00:06:31,139
vendors is that Azure in and gcp follow

178
00:06:31,139 --> 00:06:32,940
what I call the classical role best

179
00:06:32,940 --> 00:06:34,979
access model so they allow you to limit

180
00:06:34,979 --> 00:06:36,840
the effect of each document permission

181
00:06:36,840 --> 00:06:39,840
to a specific scope and this is a very

182
00:06:39,840 --> 00:06:42,000
important security enhancement so for

183
00:06:42,000 --> 00:06:42,840
example you can give someone

184
00:06:42,840 --> 00:06:45,300
administrative permissions but limit the

185
00:06:45,300 --> 00:06:47,160
effect of those permission on a certain

186
00:06:47,160 --> 00:06:48,960
scope so in Azure for example you can

187
00:06:48,960 --> 00:06:51,360
limit those to Resource Group or in gcp

188
00:06:51,360 --> 00:06:54,419
you can limit those to a projects now in

189
00:06:54,419 --> 00:06:57,960
AWS the scope is is actually part of the

190
00:06:57,960 --> 00:06:59,940
policy itself and it is much more

191
00:06:59,940 --> 00:07:02,160
limited and harder to manage and usually

192
00:07:02,160 --> 00:07:04,080
based on some kind of string

193
00:07:04,080 --> 00:07:06,240
manipulation now I'm not saying Azure

194
00:07:06,240 --> 00:07:08,120
DCP have better policy capabilities

195
00:07:08,120 --> 00:07:11,280
because they are not I'm saying that the

196
00:07:11,280 --> 00:07:14,039
way security is defined by AWS is way

197
00:07:14,039 --> 00:07:16,380
way different from other vendors and we

198
00:07:16,380 --> 00:07:18,600
need again to be familiar with those now

199
00:07:18,600 --> 00:07:20,699
the second major difference is that AWS

200
00:07:20,699 --> 00:07:23,099
access model is heavily based on

201
00:07:23,099 --> 00:07:25,740
identity policies whether gcp is kind of

202
00:07:25,740 --> 00:07:27,840
resource-based German and Azure is a

203
00:07:27,840 --> 00:07:30,539
mixture of books and the third major

204
00:07:30,539 --> 00:07:32,220
difference is that Azure and gcp are

205
00:07:32,220 --> 00:07:34,979
full-blown identity providers with full

206
00:07:34,979 --> 00:07:37,259
management capabilities and AWS is

207
00:07:37,259 --> 00:07:40,319
something they call single sign-on which

208
00:07:40,319 --> 00:07:42,539
is a bit of Muslim nickname because is

209
00:07:42,539 --> 00:07:44,039
not actually the main feature of that

210
00:07:44,039 --> 00:07:46,139
service basically seeing the salon is

211
00:07:46,139 --> 00:07:49,500
kind of mini directory within AWS and if

212
00:07:49,500 --> 00:07:51,960
you are not using it yet we strongly

213
00:07:51,960 --> 00:07:53,699
recommend you start using it because it

214
00:07:53,699 --> 00:07:55,380
lets you actually manage access to

215
00:07:55,380 --> 00:07:57,919
multiple AWS accounting much more

216
00:07:57,919 --> 00:08:00,139
convenient way

217
00:08:00,139 --> 00:08:01,979
all right

218
00:08:01,979 --> 00:08:04,080
so on this slide we see how a typical

219
00:08:04,080 --> 00:08:06,300
organizational structure looks like

220
00:08:06,300 --> 00:08:08,639
among the three providers and all

221
00:08:08,639 --> 00:08:11,220
vendors allow us to get the resources in

222
00:08:11,220 --> 00:08:12,900
the same way usually in some sort of

223
00:08:12,900 --> 00:08:15,479
container container for resources so in

224
00:08:15,479 --> 00:08:17,639
AWS the main container for resources is

225
00:08:17,639 --> 00:08:19,560
called an enabler's account and this is

226
00:08:19,560 --> 00:08:21,000
the small unit that can contain

227
00:08:21,000 --> 00:08:23,460
different resources and you set up AWS

228
00:08:23,460 --> 00:08:25,139
account and then of course you can

229
00:08:25,139 --> 00:08:27,660
provision resources and policies now in

230
00:08:27,660 --> 00:08:30,300
gcp the way this works you have a main

231
00:08:30,300 --> 00:08:31,740
basic content which called the project

232
00:08:31,740 --> 00:08:33,719
and you can roll up server project into

233
00:08:33,719 --> 00:08:35,760
folders and folders have a nastic

234
00:08:35,760 --> 00:08:38,399
structure up way to the organizational

235
00:08:38,399 --> 00:08:41,820
resource now Azure uses basic resource

236
00:08:41,820 --> 00:08:43,200
content and it's called Resource Group

237
00:08:43,200 --> 00:08:45,540
and every resource must belong at least

238
00:08:45,540 --> 00:08:47,580
one Resource Group and if not Azure will

239
00:08:47,580 --> 00:08:49,980
make you create a new resource

240
00:08:49,980 --> 00:08:52,080
now if you have again a bunch of

241
00:08:52,080 --> 00:08:53,519
resources that serve the same

242
00:08:53,519 --> 00:08:55,260
application logic you usually Store and

243
00:08:55,260 --> 00:08:57,839
put those in the same Resource Group

244
00:08:57,839 --> 00:09:01,260
now as I mentioned Azure gcp working a

245
00:09:01,260 --> 00:09:02,339
bit differently and the main reason

246
00:09:02,339 --> 00:09:05,459
again they use Scopes and that restrict

247
00:09:05,459 --> 00:09:07,440
access to container in the

248
00:09:07,440 --> 00:09:09,060
organizational structure so you can

249
00:09:09,060 --> 00:09:10,980
choose different scope for example in

250
00:09:10,980 --> 00:09:12,660
Azure you can use subscription or

251
00:09:12,660 --> 00:09:15,899
management group but in AWS there are no

252
00:09:15,899 --> 00:09:17,399
scopes so Scopes are actually defined

253
00:09:17,399 --> 00:09:18,899
inside the policies and now we're going

254
00:09:18,899 --> 00:09:22,680
to talk about those during the session

255
00:09:22,680 --> 00:09:24,920
foreign

256
00:09:27,680 --> 00:09:30,779
let's zoom out for a second and think

257
00:09:30,779 --> 00:09:32,820
about the cloud infrastructure attack

258
00:09:32,820 --> 00:09:35,519
surface and why actually I am permission

259
00:09:35,519 --> 00:09:38,940
are so important and most likely many of

260
00:09:38,940 --> 00:09:41,820
you heard about the AWS sole permission

261
00:09:41,820 --> 00:09:44,279
and of course how it can be abused by

262
00:09:44,279 --> 00:09:46,080
attackers and actually we had some

263
00:09:46,080 --> 00:09:48,240
breaches during the years that abuse

264
00:09:48,240 --> 00:09:49,800
that specific permission in order to

265
00:09:49,800 --> 00:09:51,660
gain high privilege access to different

266
00:09:51,660 --> 00:09:54,480
assets in the cloud but actually how

267
00:09:54,480 --> 00:09:55,980
many of you can tell me what is the

268
00:09:55,980 --> 00:09:58,980
equivalent of pastoral and gcp if you

269
00:09:58,980 --> 00:10:02,519
are not expert on on gcp now it actually

270
00:10:02,519 --> 00:10:04,260
called the service account act as

271
00:10:04,260 --> 00:10:06,180
permission and it is very very similar

272
00:10:06,180 --> 00:10:08,640
to pastoral and can be abused in similar

273
00:10:08,640 --> 00:10:10,740
ways and this brings me to my next point

274
00:10:10,740 --> 00:10:12,779
so actually I have infrastructure uses

275
00:10:12,779 --> 00:10:15,540
thousands sometimes tens of thousands of

276
00:10:15,540 --> 00:10:17,160
different permissions but actually

277
00:10:17,160 --> 00:10:19,380
attackers don't really care about most

278
00:10:19,380 --> 00:10:21,120
of these permissions usually they focus

279
00:10:21,120 --> 00:10:24,240
on management permissions at don't

280
00:10:24,240 --> 00:10:25,860
really care about implementation details

281
00:10:25,860 --> 00:10:28,200
so how I am defer between Cloud vendors

282
00:10:28,200 --> 00:10:30,360
all they need is access to the IM

283
00:10:30,360 --> 00:10:32,459
service which of course publicly open to

284
00:10:32,459 --> 00:10:34,019
the internet they need the security

285
00:10:34,019 --> 00:10:36,600
context such as compromise credential or

286
00:10:36,600 --> 00:10:38,519
some kind of token and they need the

287
00:10:38,519 --> 00:10:39,779
security context to have enough

288
00:10:39,779 --> 00:10:41,760
permission so to be attached with the

289
00:10:41,760 --> 00:10:43,860
relevant permission documents and then

290
00:10:43,860 --> 00:10:45,839
they can act on their objective now if

291
00:10:45,839 --> 00:10:47,279
they don't have those permissions they

292
00:10:47,279 --> 00:10:49,140
will try to privilege escalate but

293
00:10:49,140 --> 00:10:52,140
usually looking for specific types of

294
00:10:52,140 --> 00:10:55,380
permissions now when attackers or

295
00:10:55,380 --> 00:10:57,720
security researchers hunt for new bugs

296
00:10:57,720 --> 00:10:59,880
they usually use specific exploitation

297
00:10:59,880 --> 00:11:02,399
techniques or chain of those techniques

298
00:11:02,399 --> 00:11:04,260
and usually those techniques are very

299
00:11:04,260 --> 00:11:05,579
well documented into different

300
00:11:05,579 --> 00:11:07,260
categories now if you think about

301
00:11:07,260 --> 00:11:08,820
permission they can actually think about

302
00:11:08,820 --> 00:11:10,800
permissions and permission Management in

303
00:11:10,800 --> 00:11:13,980
the same way right because actually I am

304
00:11:13,980 --> 00:11:15,839
permission Alpha there are some specific

305
00:11:15,839 --> 00:11:17,339
iron permissions that are particularly

306
00:11:17,339 --> 00:11:19,260
interesting for attackers and we can

307
00:11:19,260 --> 00:11:21,600
break down those to two to several

308
00:11:21,600 --> 00:11:24,060
subgroups and the first group is segment

309
00:11:24,060 --> 00:11:26,279
operation so any assignment operation is

310
00:11:26,279 --> 00:11:27,720
potentially very dangerous and can be

311
00:11:27,720 --> 00:11:29,579
abused by attackers the second one is

312
00:11:29,579 --> 00:11:31,320
called execution rights and also we have

313
00:11:31,320 --> 00:11:33,720
delegation permissions and grants which

314
00:11:33,720 --> 00:11:36,540
are specific to AWS and creation of new

315
00:11:36,540 --> 00:11:38,220
credentials and some routine surround

316
00:11:38,220 --> 00:11:39,600
encryption

317
00:11:39,600 --> 00:11:41,279
and on the screen you see several

318
00:11:41,279 --> 00:11:42,779
examples of those and of course this is

319
00:11:42,779 --> 00:11:45,120
not a complete list just just to make a

320
00:11:45,120 --> 00:11:46,980
point so assignment operation can be

321
00:11:46,980 --> 00:11:48,959
something really really simple we can

322
00:11:48,959 --> 00:11:51,060
assign if you have assignment operation

323
00:11:51,060 --> 00:11:52,800
that allow us to assign ourselves to a

324
00:11:52,800 --> 00:11:54,720
new group then we can really just create

325
00:11:54,720 --> 00:11:56,579
an address off to a high privilege Loop

326
00:11:56,579 --> 00:11:58,620
but each cloud provider actually have

327
00:11:58,620 --> 00:12:00,779
specific and very interesting assignment

328
00:12:00,779 --> 00:12:02,100
operations that are unique for each

329
00:12:02,100 --> 00:12:04,380
vendor so for example in Azure you have

330
00:12:04,380 --> 00:12:06,240
something the some permission that allow

331
00:12:06,240 --> 00:12:08,399
you to assign a managed identity to a

332
00:12:08,399 --> 00:12:11,160
workload now if that work of this

333
00:12:11,160 --> 00:12:13,920
compromise attackers can assign new

334
00:12:13,920 --> 00:12:16,019
identity new manage identity with

335
00:12:16,019 --> 00:12:18,360
potential high privilege permission and

336
00:12:18,360 --> 00:12:20,399
without giving any secret they can get

337
00:12:20,399 --> 00:12:23,760
the tokens that represent that that

338
00:12:23,760 --> 00:12:25,200
manage identity

339
00:12:25,200 --> 00:12:27,240
the second category is called execution

340
00:12:27,240 --> 00:12:29,399
rights and there are different type of

341
00:12:29,399 --> 00:12:31,560
code execution routines some are simple

342
00:12:31,560 --> 00:12:33,360
so direct code execution for example

343
00:12:33,360 --> 00:12:36,959
editing or modifying uh or creating a

344
00:12:36,959 --> 00:12:39,240
new servers function and run those in

345
00:12:39,240 --> 00:12:40,860
some way and in that way you can again

346
00:12:40,860 --> 00:12:43,260
try and flow just escalate some not so

347
00:12:43,260 --> 00:12:45,240
obvious code execution routines is where

348
00:12:45,240 --> 00:12:47,279
you provide some kind of configuration

349
00:12:47,279 --> 00:12:49,260
file to the cloud provider so

350
00:12:49,260 --> 00:12:51,120
infrastructure is code and the cloud

351
00:12:51,120 --> 00:12:53,040
provider run those configuration files

352
00:12:53,040 --> 00:12:55,139
those templates for you and basically

353
00:12:55,139 --> 00:12:57,060
execute for the code behind the scene

354
00:12:57,060 --> 00:12:59,700
and the lesson my favorite of course is

355
00:12:59,700 --> 00:13:01,320
creation of new productions and you

356
00:13:01,320 --> 00:13:02,880
probably say well it's the oldest

357
00:13:02,880 --> 00:13:04,800
technique in the book right why we even

358
00:13:04,800 --> 00:13:07,200
put that in its own category but

359
00:13:07,200 --> 00:13:09,000
actually it used constantly by

360
00:13:09,000 --> 00:13:11,220
adversaries and each cloud provider has

361
00:13:11,220 --> 00:13:13,399
a lot of different credential

362
00:13:13,399 --> 00:13:16,800
permissions that allow you either edit

363
00:13:16,800 --> 00:13:19,019
new credentials or edit credentials and

364
00:13:19,019 --> 00:13:20,399
if you look at the solarwind hacks that

365
00:13:20,399 --> 00:13:22,260
happened to two years ago

366
00:13:22,260 --> 00:13:24,360
one of the main TPS they use were

367
00:13:24,360 --> 00:13:25,920
actually adding new secrets to

368
00:13:25,920 --> 00:13:27,899
application but nobody monitor that or

369
00:13:27,899 --> 00:13:29,700
noticed that actually the attack was

370
00:13:29,700 --> 00:13:33,060
discovered from a different angle

371
00:13:33,060 --> 00:13:35,339
all right so let's let's shift jiren

372
00:13:35,339 --> 00:13:37,320
talk about uh something very really

373
00:13:37,320 --> 00:13:39,120
important which is non-human identities

374
00:13:39,120 --> 00:13:41,339
which is a big topic by itself and we

375
00:13:41,339 --> 00:13:42,300
don't have a lot of time to cover

376
00:13:42,300 --> 00:13:46,320
everything but but I'll do my best so no

377
00:13:46,320 --> 00:13:47,940
limit identities are actually crucial

378
00:13:47,940 --> 00:13:50,639
part of every well-designed cloud

379
00:13:50,639 --> 00:13:52,320
infrastructure and we see more and more

380
00:13:52,320 --> 00:13:54,360
cloud services that start actually

381
00:13:54,360 --> 00:13:56,820
adding support for those non-human

382
00:13:56,820 --> 00:13:58,980
identities and vendors are pushing their

383
00:13:58,980 --> 00:14:00,959
uh their users actually to use those

384
00:14:00,959 --> 00:14:02,459
nationalities and for a good reason

385
00:14:02,459 --> 00:14:04,920
because it basically provide the cloud

386
00:14:04,920 --> 00:14:07,320
workload you're running the ability to

387
00:14:07,320 --> 00:14:09,180
authenticate again the IM without

388
00:14:09,180 --> 00:14:11,940
storing any secret within the

389
00:14:11,940 --> 00:14:14,399
application logic or on the local detail

390
00:14:14,399 --> 00:14:16,320
so actually it's a security enhancement

391
00:14:16,320 --> 00:14:18,360
now each Cloud vendor has its own

392
00:14:18,360 --> 00:14:20,700
implementation for those non-human

393
00:14:20,700 --> 00:14:22,079
identities and some of the cloud

394
00:14:22,079 --> 00:14:23,519
providers is a very special

395
00:14:23,519 --> 00:14:26,160
implementation of those identities but

396
00:14:26,160 --> 00:14:28,500
they all share again the main Concepts

397
00:14:28,500 --> 00:14:30,720
there so basically you can send an HTTP

398
00:14:30,720 --> 00:14:33,480
request from the workload and get a okay

399
00:14:33,480 --> 00:14:35,339
back to you and again the only

400
00:14:35,339 --> 00:14:37,560
restriction is that you must run within

401
00:14:37,560 --> 00:14:39,300
that workload whether it's virtual

402
00:14:39,300 --> 00:14:41,220
machine container or service function it

403
00:14:41,220 --> 00:14:42,959
doesn't matter you need to be on the

404
00:14:42,959 --> 00:14:45,420
workload itself now so how does it work

405
00:14:45,420 --> 00:14:47,519
actually it's like working like in a

406
00:14:47,519 --> 00:14:49,560
magical way right

407
00:14:49,560 --> 00:14:52,740
so actually if you think about it Cloud

408
00:14:52,740 --> 00:14:54,360
providers need to store some kind of

409
00:14:54,360 --> 00:14:57,000
Secret for those non-human identities I

410
00:14:57,000 --> 00:14:58,380
love to call those manager that is the

411
00:14:58,380 --> 00:15:00,420
way a Microsoft folders so those

412
00:15:00,420 --> 00:15:01,740
financial analysis need to have some

413
00:15:01,740 --> 00:15:03,360
kind of Secrets but the secrets are not

414
00:15:03,360 --> 00:15:05,339
stored on the workload they usually

415
00:15:05,339 --> 00:15:08,399
stored in the infrastructure itself

416
00:15:08,399 --> 00:15:11,040
now if you are not careful enough

417
00:15:11,040 --> 00:15:13,500
non-numan identities can expose our

418
00:15:13,500 --> 00:15:15,779
infrastructure to new risks such as

419
00:15:15,779 --> 00:15:17,339
previous collection technique and

420
00:15:17,339 --> 00:15:18,779
management are tightly related to iron

421
00:15:18,779 --> 00:15:20,820
permission because marriage identity are

422
00:15:20,820 --> 00:15:22,380
actually authenticating indirectly

423
00:15:22,380 --> 00:15:26,339
against the IIM service and they have

424
00:15:26,339 --> 00:15:29,820
some kind of long-term tokens but those

425
00:15:29,820 --> 00:15:32,940
tokens are not located on the local

426
00:15:32,940 --> 00:15:35,639
machines and here's a simple project

427
00:15:35,639 --> 00:15:38,220
collection technique so basically if you

428
00:15:38,220 --> 00:15:40,260
have enough permission we can initiate a

429
00:15:40,260 --> 00:15:42,560
new instance and if we have assignment

430
00:15:42,560 --> 00:15:44,880
permission that we can assign new roles

431
00:15:44,880 --> 00:15:46,980
attach neural so that is to instance we

432
00:15:46,980 --> 00:15:49,860
can pretty easily a privilege escalate

433
00:15:49,860 --> 00:15:52,860
and get any administrative role we want

434
00:15:52,860 --> 00:15:54,600
and access different apis in that

435
00:15:54,600 --> 00:15:56,639
specific AWS account

436
00:15:56,639 --> 00:15:58,680
now

437
00:15:58,680 --> 00:16:02,519
let's think about a hybrid manage

438
00:16:02,519 --> 00:16:04,980
identities so this is a new thing that

439
00:16:04,980 --> 00:16:07,019
actually the cloud providers adopting it

440
00:16:07,019 --> 00:16:09,480
more and more so hybrid and manager

441
00:16:09,480 --> 00:16:11,040
identities or non-neumatics are very

442
00:16:11,040 --> 00:16:14,040
special because as I mentioned there is

443
00:16:14,040 --> 00:16:15,480
a long-term circuit that need to be

444
00:16:15,480 --> 00:16:17,519
stored somewhere but when we are using

445
00:16:17,519 --> 00:16:20,579
hybrid instance metadata when we are

446
00:16:20,579 --> 00:16:22,500
accessing and we are running agent that

447
00:16:22,500 --> 00:16:25,260
represent those hybrid connections

448
00:16:25,260 --> 00:16:27,660
actually the secrets the long-term

449
00:16:27,660 --> 00:16:29,639
secrets are stored on the machine

450
00:16:29,639 --> 00:16:31,800
themselves on your data center because

451
00:16:31,800 --> 00:16:34,079
they are running those button machines

452
00:16:34,079 --> 00:16:36,000
are running on your data center so

453
00:16:36,000 --> 00:16:37,620
actually when you are attaching manage

454
00:16:37,620 --> 00:16:40,980
identities from your Cloud UI you are

455
00:16:40,980 --> 00:16:44,699
touching those to your hybrid instance a

456
00:16:44,699 --> 00:16:46,560
hybrid machine in your environment

457
00:16:46,560 --> 00:16:48,660
actually the secrets whatever it's

458
00:16:48,660 --> 00:16:51,180
certificate or something else are stored

459
00:16:51,180 --> 00:16:53,100
on your workload and if those are

460
00:16:53,100 --> 00:16:55,139
compromised of course it can lead to

461
00:16:55,139 --> 00:16:58,680
potential risks and with that

462
00:16:58,680 --> 00:17:03,199
we have known continued the lecture

463
00:17:04,980 --> 00:17:06,240
there you go

464
00:17:06,240 --> 00:17:08,220
so the next thing we want to talk about

465
00:17:08,220 --> 00:17:10,740
are default and I titled this defaults

466
00:17:10,740 --> 00:17:12,900
are an attacker's best friend which is a

467
00:17:12,900 --> 00:17:14,760
little bit of a provocative title maybe

468
00:17:14,760 --> 00:17:16,980
some defaults are an attacker's best

469
00:17:16,980 --> 00:17:19,319
friend but some certainly are before we

470
00:17:19,319 --> 00:17:21,299
understand that we need to talk about

471
00:17:21,299 --> 00:17:24,720
why defaults exist and different csps

472
00:17:24,720 --> 00:17:26,400
have a different approach to that

473
00:17:26,400 --> 00:17:29,220
particular question the Azure gcp

474
00:17:29,220 --> 00:17:32,100
approach to default is this is a prefab

475
00:17:32,100 --> 00:17:34,440
construct that you should absolutely use

476
00:17:34,440 --> 00:17:36,539
you should select the right one attach

477
00:17:36,539 --> 00:17:38,520
it to your Scopes use it with your

478
00:17:38,520 --> 00:17:41,160
identities and go forward and be

479
00:17:41,160 --> 00:17:44,400
successful AWS approaches defaults at

480
00:17:44,400 --> 00:17:46,740
least in the I am space as a sort of

481
00:17:46,740 --> 00:17:48,720
starting point on a least privileged

482
00:17:48,720 --> 00:17:50,340
Journey they're a point that you start

483
00:17:50,340 --> 00:17:53,039
from and then taper down into a more

484
00:17:53,039 --> 00:17:56,280
least privileged situation whether you

485
00:17:56,280 --> 00:17:58,020
take the first approach or the second

486
00:17:58,020 --> 00:18:00,299
approach when defaults are vulnerable

487
00:18:00,299 --> 00:18:02,760
then their inherent property of being

488
00:18:02,760 --> 00:18:05,520
very very common makes for a dangerous

489
00:18:05,520 --> 00:18:07,620
cocktail what we're going to see in this

490
00:18:07,620 --> 00:18:10,200
section is a selection of I am focused

491
00:18:10,200 --> 00:18:12,059
default risks that's not to say that

492
00:18:12,059 --> 00:18:14,280
there aren't a ton of non-im folks

493
00:18:14,280 --> 00:18:16,200
default risks but these are the I am

494
00:18:16,200 --> 00:18:18,780
focused ones or a few of them so let's

495
00:18:18,780 --> 00:18:20,700
start with AWS

496
00:18:20,700 --> 00:18:23,520
AWS manage policies if you are not

497
00:18:23,520 --> 00:18:26,340
familiar with AWS managed policies AWS

498
00:18:26,340 --> 00:18:27,960
managed policies are essentially Json

499
00:18:27,960 --> 00:18:30,780
policy documents owned and managed by

500
00:18:30,780 --> 00:18:33,840
AWS which you can simply attach into

501
00:18:33,840 --> 00:18:37,159
your identities

502
00:18:37,380 --> 00:18:39,780
the issue with that is that if we

503
00:18:39,780 --> 00:18:42,000
understand how Json policy documents

504
00:18:42,000 --> 00:18:43,799
work then we understand that they have

505
00:18:43,799 --> 00:18:46,260
to be broad by definition because they

506
00:18:46,260 --> 00:18:48,539
have a resource field and the value of

507
00:18:48,539 --> 00:18:50,940
that resource field can only be a wild

508
00:18:50,940 --> 00:18:53,340
card whether that's a full star or a

509
00:18:53,340 --> 00:18:55,140
path with some starts this is because

510
00:18:55,140 --> 00:18:57,900
AWS owns the documents and they cannot

511
00:18:57,900 --> 00:19:00,480
possibly know the names of your

512
00:19:00,480 --> 00:19:02,640
resources in your account

513
00:19:02,640 --> 00:19:05,340
Translating that into a few famously

514
00:19:05,340 --> 00:19:07,740
common managed policies that sometimes

515
00:19:07,740 --> 00:19:10,020
create vulnerabilities which are quite

516
00:19:10,020 --> 00:19:12,419
common we have read-only access sounds

517
00:19:12,419 --> 00:19:14,280
pretty innocent right you should be

518
00:19:14,280 --> 00:19:16,440
using view only access and not read only

519
00:19:16,440 --> 00:19:19,140
access as read-only access gives data

520
00:19:19,140 --> 00:19:21,600
Access Data access to S3 buckets that

521
00:19:21,600 --> 00:19:24,539
access to some storage services so a

522
00:19:24,539 --> 00:19:26,520
common permission used by some

523
00:19:26,520 --> 00:19:27,900
third-party vendors which is quite

524
00:19:27,900 --> 00:19:29,820
dangerous cloudtrail read-only access

525
00:19:29,820 --> 00:19:31,799
again you might be deploying this not

526
00:19:31,799 --> 00:19:34,440
really experts on AWS and using this

527
00:19:34,440 --> 00:19:36,539
manage policy but again once we

528
00:19:36,539 --> 00:19:38,580
understand the internal mechanizations

529
00:19:38,580 --> 00:19:41,220
of a managed policy we understand why

530
00:19:41,220 --> 00:19:43,860
this can't work AWS doesn't know the

531
00:19:43,860 --> 00:19:46,320
name of my cloudtrail bucket so they can

532
00:19:46,320 --> 00:19:48,360
only possibly put a wild-carded

533
00:19:48,360 --> 00:19:50,880
expression in there which means that it

534
00:19:50,880 --> 00:19:53,700
grants S3 get object on every resource

535
00:19:53,700 --> 00:19:55,440
in the account you can get every object

536
00:19:55,440 --> 00:19:57,539
in the account as long as you know the

537
00:19:57,539 --> 00:19:59,880
path so again understanding the

538
00:19:59,880 --> 00:20:01,679
underlying construction stops us from

539
00:20:01,679 --> 00:20:03,840
getting lost in translation and exposes

540
00:20:03,840 --> 00:20:06,360
these default risks same goes for pass

541
00:20:06,360 --> 00:20:08,340
role assigning to other roles or managed

542
00:20:08,340 --> 00:20:10,559
identities permission modifiers or

543
00:20:10,559 --> 00:20:12,539
assume roles all of which can lead into

544
00:20:12,539 --> 00:20:14,700
direct privilege escalations because

545
00:20:14,700 --> 00:20:17,940
they're not least privileged scoped down

546
00:20:17,940 --> 00:20:20,039
moving on to Azure so the first thing

547
00:20:20,039 --> 00:20:21,720
about Azure is I think Azure really

548
00:20:21,720 --> 00:20:23,760
believes in the sort of default role

549
00:20:23,760 --> 00:20:25,919
approach it can sometimes be difficult

550
00:20:25,919 --> 00:20:28,140
to select the right one but we see this

551
00:20:28,140 --> 00:20:30,059
in the custom role limitation right

552
00:20:30,059 --> 00:20:32,940
Azure has a custom role mechanism you

553
00:20:32,940 --> 00:20:35,039
can use it but you're limited to 5000

554
00:20:35,039 --> 00:20:37,559
per directory so as a fully fledged

555
00:20:37,559 --> 00:20:39,720
Enterprise strategy it's quite it can be

556
00:20:39,720 --> 00:20:42,960
quite difficult to support and attackers

557
00:20:42,960 --> 00:20:44,880
in Azure can leverage read permissions

558
00:20:44,880 --> 00:20:46,380
and the assignment permissions that

559
00:20:46,380 --> 00:20:48,900
eagle talked about in order to use these

560
00:20:48,900 --> 00:20:51,240
default permissions when they're not

561
00:20:51,240 --> 00:20:53,640
properly scoped the actual trade data

562
00:20:53,640 --> 00:20:55,559
and escalate privileges the next thing

563
00:20:55,559 --> 00:20:57,120
we're going to talk about from an Azure

564
00:20:57,120 --> 00:21:00,179
standpoint is access Keys which are an

565
00:21:00,179 --> 00:21:02,700
IM bypass that is essentially created by

566
00:21:02,700 --> 00:21:04,980
default by many storage Services let's

567
00:21:04,980 --> 00:21:08,100
take a deeper dive in to that so I

568
00:21:08,100 --> 00:21:10,740
created this storage account uh and

569
00:21:10,740 --> 00:21:12,840
immediately without me doing anything it

570
00:21:12,840 --> 00:21:15,120
created these two access Keys what are

571
00:21:15,120 --> 00:21:17,280
access keys well they do basically what

572
00:21:17,280 --> 00:21:19,200
it says on the 10 right they're a pair

573
00:21:19,200 --> 00:21:20,940
of permanent credentials that you're

574
00:21:20,940 --> 00:21:23,460
supposed to rotate with which you can

575
00:21:23,460 --> 00:21:26,760
not only access read like do have read

576
00:21:26,760 --> 00:21:29,520
access the data with a bypass that the

577
00:21:29,520 --> 00:21:31,620
entire IM system like just directly

578
00:21:31,620 --> 00:21:33,299
using these credentials you can also

579
00:21:33,299 --> 00:21:35,280
have management and right access to data

580
00:21:35,280 --> 00:21:38,100
so this gives quite a quite a large

581
00:21:38,100 --> 00:21:40,620
control of storage accounts and the same

582
00:21:40,620 --> 00:21:43,500
goes for chaos for uh sorry for Cosmos

583
00:21:43,500 --> 00:21:46,620
DB same goes for uh for red the same

584
00:21:46,620 --> 00:21:49,140
goes for a bunch of other sort storage

585
00:21:49,140 --> 00:21:51,840
Services now if you look at the image at

586
00:21:51,840 --> 00:21:53,820
the bottom they do give you this like

587
00:21:53,820 --> 00:21:56,280
checkbox to take it off to disable it

588
00:21:56,280 --> 00:21:58,740
and they say well disable at your own

589
00:21:58,740 --> 00:22:00,120
risk right because you might be breaking

590
00:22:00,120 --> 00:22:01,679
your system and disabling all your

591
00:22:01,679 --> 00:22:03,840
access and then if you go into the Azure

592
00:22:03,840 --> 00:22:06,240
docs they give you a handy idea for how

593
00:22:06,240 --> 00:22:08,700
to fix this which is we have this metric

594
00:22:08,700 --> 00:22:11,240
for transactions under specific

595
00:22:11,240 --> 00:22:13,679
authentication here I put SAS and act

596
00:22:13,679 --> 00:22:16,500
and access keys and you can see how many

597
00:22:16,500 --> 00:22:18,659
access Keys how many many times access

598
00:22:18,659 --> 00:22:20,940
keys were used sounds perfect turn on

599
00:22:20,940 --> 00:22:23,580
the metric look for a flat like make a

600
00:22:23,580 --> 00:22:25,620
make everybody stop using access keys

601
00:22:25,620 --> 00:22:28,020
look for a flat line turn on the toggle

602
00:22:28,020 --> 00:22:32,280
when when the problem with that is that

603
00:22:32,280 --> 00:22:35,340
I just created this bucket

604
00:22:35,340 --> 00:22:38,820
and I never use the access keys I just

605
00:22:38,820 --> 00:22:40,559
clicked click clicked I never even

606
00:22:40,559 --> 00:22:42,299
clicked Chill on the access keys I don't

607
00:22:42,299 --> 00:22:44,820
have the access keys and yet we have

608
00:22:44,820 --> 00:22:47,520
access to this the reason this is

609
00:22:47,520 --> 00:22:49,740
happening is probably to our best

610
00:22:49,740 --> 00:22:51,780
estimation because Azure is using these

611
00:22:51,780 --> 00:22:54,720
access Keys internally to access your

612
00:22:54,720 --> 00:22:57,600
data like for portal display for example

613
00:22:57,600 --> 00:22:59,400
and other mechanisms like the portal

614
00:22:59,400 --> 00:23:01,500
does break a little if you disable them

615
00:23:01,500 --> 00:23:04,020
and so and by the way when I show this

616
00:23:04,020 --> 00:23:05,340
to Eagle he said maybe it's just the

617
00:23:05,340 --> 00:23:06,900
creation right it's just like the bump

618
00:23:06,900 --> 00:23:09,419
for creation no it lasts all the way uh

619
00:23:09,419 --> 00:23:10,679
uh throughout

620
00:23:10,679 --> 00:23:13,320
and the issue with that is that they

621
00:23:13,320 --> 00:23:15,539
they're an ion bypass that's very hard

622
00:23:15,539 --> 00:23:18,419
for Defenders to notice and it's quite

623
00:23:18,419 --> 00:23:20,220
hard to disable you can do a deeper dive

624
00:23:20,220 --> 00:23:22,860
into the access into into the logs and

625
00:23:22,860 --> 00:23:24,539
look for all the activity and sort of

626
00:23:24,539 --> 00:23:27,179
like find whether your users are doing

627
00:23:27,179 --> 00:23:28,740
the activity but it's much more complex

628
00:23:28,740 --> 00:23:31,860
than an easy fix

629
00:23:31,860 --> 00:23:35,400
now on to gcp so gcp has a sort of

630
00:23:35,400 --> 00:23:37,200
Legacy concept from the olden days

631
00:23:37,200 --> 00:23:39,600
called basic roles which is still quite

632
00:23:39,600 --> 00:23:42,020
prolific

633
00:23:42,299 --> 00:23:45,539
basic roles viewer editor and owner we

634
00:23:45,539 --> 00:23:48,240
focused on the on the first two uh

635
00:23:48,240 --> 00:23:50,220
have strong and Broad permissions how

636
00:23:50,220 --> 00:23:51,840
broad like you see the fancy numbers

637
00:23:51,840 --> 00:23:53,640
here on the right right but they're

638
00:23:53,640 --> 00:23:55,520
basically for all of the cloud platform

639
00:23:55,520 --> 00:23:59,220
viewer is uh sounds again innocent

640
00:23:59,220 --> 00:24:00,900
sounds like view only sounds like

641
00:24:00,900 --> 00:24:03,059
metadata no viewer lets you query

642
00:24:03,059 --> 00:24:05,280
bigquery like for example viewer gives

643
00:24:05,280 --> 00:24:06,179
you

644
00:24:06,179 --> 00:24:09,059
very uh significant data access uh

645
00:24:09,059 --> 00:24:10,919
editor basically is like a power user

646
00:24:10,919 --> 00:24:13,559
permission that that you can escalate uh

647
00:24:13,559 --> 00:24:16,020
to admin if you're crafty and want to

648
00:24:16,020 --> 00:24:19,440
enough uh and the way they scope it down

649
00:24:19,440 --> 00:24:22,559
in in the compute engine in GCE is

650
00:24:22,559 --> 00:24:25,320
another older mechanism called access

651
00:24:25,320 --> 00:24:27,480
Scopes which is the name is a little

652
00:24:27,480 --> 00:24:29,460
maybe like to me the name was a little

653
00:24:29,460 --> 00:24:31,020
confusing because it's not about scoping

654
00:24:31,020 --> 00:24:32,820
down to resources it's about scoping

655
00:24:32,820 --> 00:24:35,640
down the apis it's about scoping down to

656
00:24:35,640 --> 00:24:39,240
services so you take these uh access

657
00:24:39,240 --> 00:24:41,159
Scopes you just select out of the list

658
00:24:41,159 --> 00:24:42,900
that Google has you take these access

659
00:24:42,900 --> 00:24:44,820
Scopes you attach them to the basic role

660
00:24:44,820 --> 00:24:46,860
and the sort of intersection of those

661
00:24:46,860 --> 00:24:49,799
permissions creates a permission map the

662
00:24:49,799 --> 00:24:51,240
third thing that's important to know is

663
00:24:51,240 --> 00:24:53,280
default service accounts whenever you

664
00:24:53,280 --> 00:24:56,220
turn on a service in gcp uh unless

665
00:24:56,220 --> 00:24:58,740
you've disabled this Behavior a default

666
00:24:58,740 --> 00:25:00,900
service account is created and the thing

667
00:25:00,900 --> 00:25:03,059
is for many services the permissions

668
00:25:03,059 --> 00:25:05,220
that that default service has an account

669
00:25:05,220 --> 00:25:08,880
has is those same basic roles viewer

670
00:25:08,880 --> 00:25:11,760
editor usually editor uh or at least for

671
00:25:11,760 --> 00:25:14,340
compute engine it's editor are those

672
00:25:14,340 --> 00:25:17,760
basic roles so the totality of this

673
00:25:17,760 --> 00:25:19,980
brings us to another kind of dangerous

674
00:25:19,980 --> 00:25:22,860
dangerous combination which is if I

675
00:25:22,860 --> 00:25:25,380
started a compute engine machine I got

676
00:25:25,380 --> 00:25:26,940
the default service account because I

677
00:25:26,940 --> 00:25:29,700
just clicked through uh that meant I got

678
00:25:29,700 --> 00:25:31,740
the default editor role because no one

679
00:25:31,740 --> 00:25:33,840
edited the permissions for the default

680
00:25:33,840 --> 00:25:35,580
service account which by the way you can

681
00:25:35,580 --> 00:25:37,500
and should do

682
00:25:37,500 --> 00:25:40,080
and someone gave it the cloud platform

683
00:25:40,080 --> 00:25:42,120
access scope this is like a mistake that

684
00:25:42,120 --> 00:25:43,799
someone needs to make right the default

685
00:25:43,799 --> 00:25:45,900
access scope is cool it only lets you

686
00:25:45,900 --> 00:25:47,640
like write some logs and do some view

687
00:25:47,640 --> 00:25:50,700
onlys and it's it's all right but if you

688
00:25:50,700 --> 00:25:52,140
want the machine to actually do

689
00:25:52,140 --> 00:25:54,299
something then the sort of Doc's way of

690
00:25:54,299 --> 00:25:55,919
getting you through that process without

691
00:25:55,919 --> 00:25:58,440
giving you an entire IM course is they

692
00:25:58,440 --> 00:26:00,179
tell you put the cloud platform scope

693
00:26:00,179 --> 00:26:02,640
Cloud platform scope is virtually

694
00:26:02,640 --> 00:26:04,799
everything it's very very Broad and so

695
00:26:04,799 --> 00:26:06,480
if you have the cloud platform scale

696
00:26:06,480 --> 00:26:09,360
that's a prevask to project admin and

697
00:26:09,360 --> 00:26:11,159
it's quite dangerous

698
00:26:11,159 --> 00:26:13,320
not even to mention like if this machine

699
00:26:13,320 --> 00:26:15,419
happens to be public or happens to have

700
00:26:15,419 --> 00:26:17,400
leaked keys or happens to be vulnerable

701
00:26:17,400 --> 00:26:18,900
or there happens to be a way of running

702
00:26:18,900 --> 00:26:21,120
code in this machine in which case it's

703
00:26:21,120 --> 00:26:23,640
like a full account takeover vector and

704
00:26:23,640 --> 00:26:26,460
not just a PE risk in the environment

705
00:26:26,460 --> 00:26:28,740
next thing we're going to talk about is

706
00:26:28,740 --> 00:26:30,600
logs and specifically that logs have

707
00:26:30,600 --> 00:26:32,880
limits now logs are awesome logs are

708
00:26:32,880 --> 00:26:35,700
incredible and they are probably better

709
00:26:35,700 --> 00:26:37,620
than they ever were in the cloud this is

710
00:26:37,620 --> 00:26:40,440
not like to take like to throw dirt at

711
00:26:40,440 --> 00:26:43,500
Cloud logging which is quite good but

712
00:26:43,500 --> 00:26:45,900
especially because it's good and we

713
00:26:45,900 --> 00:26:47,940
learn to rely on it we need to

714
00:26:47,940 --> 00:26:49,860
understand its limits and be able to

715
00:26:49,860 --> 00:26:52,380
contextualize them correctly why is that

716
00:26:52,380 --> 00:26:54,779
because we use logging both obviously to

717
00:26:54,779 --> 00:26:57,059
know what's going on do detection do

718
00:26:57,059 --> 00:26:59,220
incident response and that's not so much

719
00:26:59,220 --> 00:27:00,539
the topic of this talk but it's

720
00:27:00,539 --> 00:27:02,159
incredibly important and you all like

721
00:27:02,159 --> 00:27:03,960
live this and know this the second

722
00:27:03,960 --> 00:27:05,640
reason we use logging is actually to

723
00:27:05,640 --> 00:27:07,740
build better permissions because in

724
00:27:07,740 --> 00:27:09,480
order to know whether I can take

725
00:27:09,480 --> 00:27:11,640
permissions away from someone whether

726
00:27:11,640 --> 00:27:14,159
you would usually do is try to examine

727
00:27:14,159 --> 00:27:15,720
the logs and see what they're actually

728
00:27:15,720 --> 00:27:17,940
using right to sort of use it or lose it

729
00:27:17,940 --> 00:27:21,539
philosophy and if logs have limits then

730
00:27:21,539 --> 00:27:24,179
I can't be sure enough that I can freely

731
00:27:24,179 --> 00:27:26,400
remove and that leads to permissions for

732
00:27:26,400 --> 00:27:29,279
all uh broadly also attackers can hide

733
00:27:29,279 --> 00:27:32,100
behind unlocked apis opaque apis log

734
00:27:32,100 --> 00:27:34,320
manipulation distributed logging we're

735
00:27:34,320 --> 00:27:37,140
gonna dive into that from uh vendor from

736
00:27:37,140 --> 00:27:39,059
a cloud service provider specific

737
00:27:39,059 --> 00:27:42,480
perspective last piece of like advice is

738
00:27:42,480 --> 00:27:44,700
log whatever you can but then there's

739
00:27:44,700 --> 00:27:46,620
the parentheses right log whatever you

740
00:27:46,620 --> 00:27:49,679
can afford to because some some logging

741
00:27:49,679 --> 00:27:51,539
for like that actions or data plane

742
00:27:51,539 --> 00:27:54,840
actions uh some some users or some

743
00:27:54,840 --> 00:27:57,240
organizations find profitably expensive

744
00:27:57,240 --> 00:27:58,919
and that's perfectly understandable and

745
00:27:58,919 --> 00:28:01,440
at the end it's a risk cost calculation

746
00:28:01,440 --> 00:28:06,000
that we're all forced to make AWS so a

747
00:28:06,000 --> 00:28:08,400
few like logs have limits points in AWS

748
00:28:08,400 --> 00:28:10,980
there has been a long known uh passive

749
00:28:10,980 --> 00:28:13,080
reconnaissance technique for AWS for

750
00:28:13,080 --> 00:28:15,360
role enumeration if you're not familiar

751
00:28:15,360 --> 00:28:18,419
uh with it uh then absolutely uh look it

752
00:28:18,419 --> 00:28:20,039
up but basically you can save I am

753
00:28:20,039 --> 00:28:21,900
policies with a role and they don't

754
00:28:21,900 --> 00:28:24,480
agree to save if the role isn't real so

755
00:28:24,480 --> 00:28:25,740
you can sort of do a Brute Force

756
00:28:25,740 --> 00:28:27,840
enumeration on roles and targets account

757
00:28:27,840 --> 00:28:30,360
and this has been known for a while uh

758
00:28:30,360 --> 00:28:32,100
that actions again because that action

759
00:28:32,100 --> 00:28:34,380
logging is quite expensive uh sometimes

760
00:28:34,380 --> 00:28:36,480
it's not turned on and then that can be

761
00:28:36,480 --> 00:28:38,520
leveraged to retrieve data uh Cloud

762
00:28:38,520 --> 00:28:40,980
Journal manipulation so AWS has a really

763
00:28:40,980 --> 00:28:42,840
cool thing which is the cloudtrail

764
00:28:42,840 --> 00:28:44,880
digest right it does like a hash

765
00:28:44,880 --> 00:28:48,240
checksum digest on the cloud tray logs

766
00:28:48,240 --> 00:28:50,880
to show that nobody has manipulated them

767
00:28:50,880 --> 00:28:52,559
but let's go back to the shared

768
00:28:52,559 --> 00:28:54,480
responsibility model whose

769
00:28:54,480 --> 00:28:56,580
responsibility is it to check the digest

770
00:28:56,580 --> 00:28:59,520
that's right me you us

771
00:28:59,520 --> 00:29:02,460
who actually to checks the digest the

772
00:29:02,460 --> 00:29:04,980
question is not a lot of people check

773
00:29:04,980 --> 00:29:06,840
the digest so an attacker can often go

774
00:29:06,840 --> 00:29:09,240
manipulate the digest remove events they

775
00:29:09,240 --> 00:29:11,100
don't like by overriding if they've

776
00:29:11,100 --> 00:29:12,539
already like done a PE that's strong

777
00:29:12,539 --> 00:29:14,940
enough right you have to do it and uh

778
00:29:14,940 --> 00:29:16,740
and manipulate cloudtrail in some

779
00:29:16,740 --> 00:29:18,779
scenarios last thing I heard after we

780
00:29:18,779 --> 00:29:20,399
constructed this presentation at a

781
00:29:20,399 --> 00:29:22,500
conference two weeks ago uh research by

782
00:29:22,500 --> 00:29:24,960
Kat Traxler from Vectra I have the link

783
00:29:24,960 --> 00:29:26,640
here definitely look it up you can use

784
00:29:26,640 --> 00:29:29,220
S3 replication to do a cross account

785
00:29:29,220 --> 00:29:31,860
data exfiltration which isn't logged at

786
00:29:31,860 --> 00:29:33,299
the source account so you can just leak

787
00:29:33,299 --> 00:29:35,399
out S3 data under certain conditions

788
00:29:35,399 --> 00:29:37,620
like there there have to already bs3

789
00:29:37,620 --> 00:29:39,419
replications about the number of Destiny

790
00:29:39,419 --> 00:29:42,600
destinations won't go deep into that but

791
00:29:42,600 --> 00:29:44,940
again these vectors for unlock data or

792
00:29:44,940 --> 00:29:47,460
application are quite or unlock that

793
00:29:47,460 --> 00:29:51,120
exfiltration are important in AWS in

794
00:29:51,120 --> 00:29:53,940
Azure so if you are familiar with the

795
00:29:53,940 --> 00:29:55,559
sort of azure approach to logging

796
00:29:55,559 --> 00:29:57,840
there's a central activity log which

797
00:29:57,840 --> 00:30:01,080
mostly only contains manage policies the

798
00:30:01,080 --> 00:30:02,820
other logs are distributed they're

799
00:30:02,820 --> 00:30:04,799
managed by each service you sort of have

800
00:30:04,799 --> 00:30:06,600
to control which storage accounts they

801
00:30:06,600 --> 00:30:08,580
go to and gather it from them there are

802
00:30:08,580 --> 00:30:10,620
Azure internal ways to like make this

803
00:30:10,620 --> 00:30:13,559
entire Orchestra play together but it's

804
00:30:13,559 --> 00:30:16,320
not out of the box in a way that like uh

805
00:30:16,320 --> 00:30:22,080
gcp and and AWS are and read actions are

806
00:30:22,080 --> 00:30:24,059
not logged to that Central activity log

807
00:30:24,059 --> 00:30:26,159
which means they're very very often

808
00:30:26,159 --> 00:30:28,860
missed secondly that issue of

809
00:30:28,860 --> 00:30:30,899
distributed logging again makes logs

810
00:30:30,899 --> 00:30:32,580
have limits and makes logging more

811
00:30:32,580 --> 00:30:36,360
difficult in that particular context

812
00:30:36,360 --> 00:30:38,539
foreign

813
00:30:42,000 --> 00:30:44,100
the multi-cloud conclusion for this

814
00:30:44,100 --> 00:30:46,020
whether you're already multi-cloud or

815
00:30:46,020 --> 00:30:48,419
considering multi-cloud or this deciding

816
00:30:48,419 --> 00:30:49,740
to go multi-cloud or managing

817
00:30:49,740 --> 00:30:52,440
multi-cloud is that multiple clouds

818
00:30:52,440 --> 00:30:55,140
multiply both log dispersal and the

819
00:30:55,140 --> 00:30:57,720
amount of languages that you have to

820
00:30:57,720 --> 00:30:59,640
process logs in because all of this has

821
00:30:59,640 --> 00:31:01,500
different different schemas all of this

822
00:31:01,500 --> 00:31:03,539
has different abstractions all this has

823
00:31:03,539 --> 00:31:05,279
different meanings and there's no

824
00:31:05,279 --> 00:31:07,620
one-to-one translation unfortunately

825
00:31:07,620 --> 00:31:10,020
there's no magic solution I can offer on

826
00:31:10,020 --> 00:31:12,000
this stage to make everything magically

827
00:31:12,000 --> 00:31:14,640
better but this is an important thing to

828
00:31:14,640 --> 00:31:16,799
be aware of both when managing an

829
00:31:16,799 --> 00:31:18,779
environment and when making decisions

830
00:31:18,779 --> 00:31:21,720
and considerations strategically

831
00:31:21,720 --> 00:31:24,659
so this has been this up until now has

832
00:31:24,659 --> 00:31:27,659
been the well I I I think a lot a lot of

833
00:31:27,659 --> 00:31:30,059
uh some of it has been like the classic

834
00:31:30,059 --> 00:31:33,419
blackout of oh things are scary be

835
00:31:33,419 --> 00:31:36,419
afraid uh but then what can we actually

836
00:31:36,419 --> 00:31:39,179
do what can we do practically to make

837
00:31:39,179 --> 00:31:41,760
things uh better uh for our

838
00:31:41,760 --> 00:31:43,559
organizations and for our Defenders

839
00:31:43,559 --> 00:31:44,940
we're going to bring up two points here

840
00:31:44,940 --> 00:31:47,220
one is pretty practical and the other is

841
00:31:47,220 --> 00:31:48,960
a little more philosophical but bear

842
00:31:48,960 --> 00:31:51,179
with me the first thing is try to limit

843
00:31:51,179 --> 00:31:54,059
the effect of mistakes because I am

844
00:31:54,059 --> 00:31:56,220
systems and all three of the vendors we

845
00:31:56,220 --> 00:31:58,740
discussed today are complex and they're

846
00:31:58,740 --> 00:32:00,000
complex in different ways they're

847
00:32:00,000 --> 00:32:01,320
complex they're different degrees but

848
00:32:01,320 --> 00:32:03,179
all of them are complex and we find that

849
00:32:03,179 --> 00:32:06,779
organizations will make mistakes and so

850
00:32:06,779 --> 00:32:08,399
one of the most important things is

851
00:32:08,399 --> 00:32:10,740
limiting the effect that a mistake can

852
00:32:10,740 --> 00:32:13,140
have one of the things that can that

853
00:32:13,140 --> 00:32:16,679
that can do that is sticking to one AWS

854
00:32:16,679 --> 00:32:19,140
account or gcp project or Azure Resource

855
00:32:19,140 --> 00:32:22,020
Group per workload but again don't don't

856
00:32:22,020 --> 00:32:24,419
get lost in translation why an AWS

857
00:32:24,419 --> 00:32:26,279
account is a strong security boundary

858
00:32:26,279 --> 00:32:27,899
relatively speaking you can only do

859
00:32:27,899 --> 00:32:29,820
cross-account actions under specific

860
00:32:29,820 --> 00:32:31,799
precondition you have to have bilateral

861
00:32:31,799 --> 00:32:32,820
permission

862
00:32:32,820 --> 00:32:35,700
etc etc etc and Azure Resource Group is

863
00:32:35,700 --> 00:32:37,919
only as strong as a security boundary as

864
00:32:37,919 --> 00:32:40,260
you make it if you went to the higher

865
00:32:40,260 --> 00:32:41,940
organizational units we saw in the

866
00:32:41,940 --> 00:32:43,799
resource map earlier like the

867
00:32:43,799 --> 00:32:46,140
subscription or the or the organization

868
00:32:46,140 --> 00:32:48,480
and you gain permissions then your

869
00:32:48,480 --> 00:32:49,740
resource Group is not a security

870
00:32:49,740 --> 00:32:53,159
boundary so understand when the when

871
00:32:53,159 --> 00:32:54,659
that's a security boundary and when not

872
00:32:54,659 --> 00:32:56,039
and try to apply it in a way which

873
00:32:56,039 --> 00:32:58,020
actually limits mistakes deploy

874
00:32:58,020 --> 00:32:59,760
organizational policies to limit

875
00:32:59,760 --> 00:33:01,500
mistakes so these are different in every

876
00:33:01,500 --> 00:33:03,000
cloud and Azure you can do something

877
00:33:03,000 --> 00:33:05,880
like organization-wide policies or deny

878
00:33:05,880 --> 00:33:07,799
assignments on the all principles

879
00:33:07,799 --> 00:33:09,960
principle in gcp you can use

880
00:33:09,960 --> 00:33:13,019
organizational policies in AWS the

881
00:33:13,019 --> 00:33:15,000
classic ways service control policies or

882
00:33:15,000 --> 00:33:16,980
scps a few examples of things that

883
00:33:16,980 --> 00:33:18,960
people like to do which we think are

884
00:33:18,960 --> 00:33:22,380
good practice in AWS than I access to

885
00:33:22,380 --> 00:33:24,360
the root account deny cloudtrail delete

886
00:33:24,360 --> 00:33:26,640
Trail which is like the first step of

887
00:33:26,640 --> 00:33:29,580
evasion no more logging now we can do uh

888
00:33:29,580 --> 00:33:32,279
whatever or an A or in gcp we just

889
00:33:32,279 --> 00:33:34,380
talked earlier about the default service

890
00:33:34,380 --> 00:33:36,299
account plus basic role issue you can

891
00:33:36,299 --> 00:33:38,179
actually disable

892
00:33:38,179 --> 00:33:40,559
im.automatic IM grants for default

893
00:33:40,559 --> 00:33:43,019
service accounts which disables that

894
00:33:43,019 --> 00:33:46,620
exact uh Behavior so you can protect

895
00:33:46,620 --> 00:33:48,600
yourself organizationally of course

896
00:33:48,600 --> 00:33:51,360
avoid permanent credentials and secure

897
00:33:51,360 --> 00:33:53,640
human identities in as much as you can

898
00:33:53,640 --> 00:33:56,340
because those are of the primary entry

899
00:33:56,340 --> 00:33:59,640
vectors into any environment second

900
00:33:59,640 --> 00:34:01,080
point which said before more

901
00:34:01,080 --> 00:34:02,940
philosophical is about how do we build

902
00:34:02,940 --> 00:34:04,980
permissions and building permissions is

903
00:34:04,980 --> 00:34:06,659
like sculpting you can do it like clay

904
00:34:06,659 --> 00:34:08,639
or you can do it like Marvel you can do

905
00:34:08,639 --> 00:34:10,560
it constructively building block on the

906
00:34:10,560 --> 00:34:12,239
Block on the Block onto block until you

907
00:34:12,239 --> 00:34:14,099
have something functional that does what

908
00:34:14,099 --> 00:34:15,899
you need or you can do it like marble

909
00:34:15,899 --> 00:34:17,399
you can take a big hunk of permissions

910
00:34:17,399 --> 00:34:19,560
and kind of chisel away at it until you

911
00:34:19,560 --> 00:34:21,780
have a form vaguely resembling least

912
00:34:21,780 --> 00:34:24,839
privilege and Clay building is something

913
00:34:24,839 --> 00:34:27,119
that I think security teams like and

914
00:34:27,119 --> 00:34:29,460
developers hate right because I don't

915
00:34:29,460 --> 00:34:31,619
know yet what permissions I need and I'm

916
00:34:31,619 --> 00:34:33,599
not the I am expert so I can tell you

917
00:34:33,599 --> 00:34:35,699
exactly which permissions I need and so

918
00:34:35,699 --> 00:34:37,199
the challenge of that is knowing exactly

919
00:34:37,199 --> 00:34:39,179
what you need and the risk is this

920
00:34:39,179 --> 00:34:41,159
functionality lack of flexibility

921
00:34:41,159 --> 00:34:43,918
reduced velocity so all these are the

922
00:34:43,918 --> 00:34:46,260
reasons to not do that marble the

923
00:34:46,260 --> 00:34:47,879
challenge is to prove a negative just

924
00:34:47,879 --> 00:34:49,080
like we talked before when we were

925
00:34:49,080 --> 00:34:50,760
talking about the limitations of logs

926
00:34:50,760 --> 00:34:52,800
you need to be absolutely sure that

927
00:34:52,800 --> 00:34:54,659
someone doesn't need a permission before

928
00:34:54,659 --> 00:34:56,639
you remove it otherwise you will make a

929
00:34:56,639 --> 00:34:59,580
lot of people very upset but the risk of

930
00:34:59,580 --> 00:35:02,339
is that you end up being over permissive

931
00:35:02,339 --> 00:35:04,020
and in fact the sort of thing we find

932
00:35:04,020 --> 00:35:06,540
most common in actual practice is people

933
00:35:06,540 --> 00:35:09,060
take the big hunk of marble kind of

934
00:35:09,060 --> 00:35:11,160
Promise themselves to Chisel away at it

935
00:35:11,160 --> 00:35:14,640
someday and then never actually do or at

936
00:35:14,640 --> 00:35:16,680
least don't in the really painful and

937
00:35:16,680 --> 00:35:18,599
substantial areas like the Pastoral the

938
00:35:18,599 --> 00:35:20,460
act as the assignment permissions you

939
00:35:20,460 --> 00:35:21,960
know the places where privilege

940
00:35:21,960 --> 00:35:24,420
escalation or or all these permissions

941
00:35:24,420 --> 00:35:25,920
that Eagles showed before that actually

942
00:35:25,920 --> 00:35:28,920
hurt you our recommendation is kind of

943
00:35:28,920 --> 00:35:31,380
boring here which is a hybrid approach

944
00:35:31,380 --> 00:35:33,359
try to not Place hunks of marble that

945
00:35:33,359 --> 00:35:36,240
are too large like don't start from the

946
00:35:36,240 --> 00:35:37,859
biggest power user permission you can

947
00:35:37,859 --> 00:35:39,300
get from that service try to play

948
00:35:39,300 --> 00:35:41,280
smaller blocks and then chisel away at

949
00:35:41,280 --> 00:35:43,980
them because then if you didn't get the

950
00:35:43,980 --> 00:35:46,920
Chisel at least you don't have a a

951
00:35:46,920 --> 00:35:49,740
larger danger looming over you and also

952
00:35:49,740 --> 00:35:53,160
you are controlled uh for uh for

953
00:35:53,160 --> 00:35:55,800
mistakes and you are

954
00:35:55,800 --> 00:35:57,420
yeah

955
00:35:57,420 --> 00:36:00,780
uh and and and sort of in line with that

956
00:36:00,780 --> 00:36:02,700
and to make the sort of clay sculpting

957
00:36:02,700 --> 00:36:04,800
or hybrid sculpting process easier we

958
00:36:04,800 --> 00:36:07,200
built a tool called access undenight on

959
00:36:07,200 --> 00:36:09,720
AWS it's an AWS tool as the name implies

960
00:36:09,720 --> 00:36:13,079
and it came from the issue that some

961
00:36:13,079 --> 00:36:15,359
deny messages are not detailed actually

962
00:36:15,359 --> 00:36:18,000
AWS has gotten much better with it uh to

963
00:36:18,000 --> 00:36:19,859
begin with a year ago none of them were

964
00:36:19,859 --> 00:36:21,119
detailed now some of them are

965
00:36:21,119 --> 00:36:22,800
significantly more detailed but still

966
00:36:22,800 --> 00:36:24,839
none are fully detailed for security

967
00:36:24,839 --> 00:36:27,900
reasons uh and so if you don't know why

968
00:36:27,900 --> 00:36:29,940
you're getting a deny then a you're very

969
00:36:29,940 --> 00:36:32,460
frustrated but B you don't necessarily

970
00:36:32,460 --> 00:36:35,339
know what permission to add and what

971
00:36:35,339 --> 00:36:37,200
that leads to is permission sprawl

972
00:36:37,200 --> 00:36:39,119
because under the pressure of usability

973
00:36:39,119 --> 00:36:41,940
again you add a big hunk of marble it

974
00:36:41,940 --> 00:36:44,160
works and now not only does it work

975
00:36:44,160 --> 00:36:46,800
you're you're kind of afraid to touch it

976
00:36:46,800 --> 00:36:48,720
right because it didn't work before and

977
00:36:48,720 --> 00:36:50,760
now you did the thing and now it works

978
00:36:50,760 --> 00:36:53,880
and so and so and so that's exactly how

979
00:36:53,880 --> 00:36:55,740
permissions for all happens you do

980
00:36:55,740 --> 00:36:57,960
something then it becomes the thing that

981
00:36:57,960 --> 00:36:59,339
works and then you don't touch it

982
00:36:59,339 --> 00:37:00,960
anymore so what access on the Knight

983
00:37:00,960 --> 00:37:02,579
does is it scans the whole permission

984
00:37:02,579 --> 00:37:04,500
landscape it scans the scps the

985
00:37:04,500 --> 00:37:06,060
permission boundaries the identity

986
00:37:06,060 --> 00:37:07,680
policies the resource policies and then

987
00:37:07,680 --> 00:37:09,720
it runs a permission simulation to tell

988
00:37:09,720 --> 00:37:11,220
you whether it should work or not and

989
00:37:11,220 --> 00:37:12,839
scans the policies to tell you what sort

990
00:37:12,839 --> 00:37:15,180
of statement is the one causing the deny

991
00:37:15,180 --> 00:37:18,119
or what statement do you need to have an

992
00:37:18,119 --> 00:37:20,940
allow and we're going to have have uh

993
00:37:20,940 --> 00:37:23,339
have a demo uh before that the demo

994
00:37:23,339 --> 00:37:25,619
starts from already having the cloud

995
00:37:25,619 --> 00:37:28,079
trail event there are reasons why we did

996
00:37:28,079 --> 00:37:31,020
it uh uh This Way namely that when

997
00:37:31,020 --> 00:37:32,280
things are happening from service

998
00:37:32,280 --> 00:37:34,440
sources or not from your particular

999
00:37:34,440 --> 00:37:36,660
machine then cloudtrail is the only

1000
00:37:36,660 --> 00:37:38,700
centralized location where you can see

1001
00:37:38,700 --> 00:37:42,359
all right not all but the most of the

1002
00:37:42,359 --> 00:37:44,700
things that have happened so imagine

1003
00:37:44,700 --> 00:37:47,460
that we already ran S3 list bucket we

1004
00:37:47,460 --> 00:37:49,500
tried to list the objects in a bucket we

1005
00:37:49,500 --> 00:37:51,839
got this access denied message and now

1006
00:37:51,839 --> 00:37:55,320
we are going to run the tool so

1007
00:37:55,320 --> 00:37:57,420
apologize for the text size but I will

1008
00:37:57,420 --> 00:37:59,720
do my best you know football commentator

1009
00:37:59,720 --> 00:38:03,540
narration uh effort so we start with the

1010
00:38:03,540 --> 00:38:05,339
cloud trail event that we saved into a

1011
00:38:05,339 --> 00:38:07,020
Json file it's called access denied

1012
00:38:07,020 --> 00:38:09,420
cloudtrail event so let's look at that

1013
00:38:09,420 --> 00:38:12,359
file uh see what there is in it if you

1014
00:38:12,359 --> 00:38:15,020
are not like versed in the sort of

1015
00:38:15,020 --> 00:38:17,700
arcane-ness of of cloudtrail events it

1016
00:38:17,700 --> 00:38:19,619
says access denied and not much else it

1017
00:38:19,619 --> 00:38:21,839
says the source account the action but

1018
00:38:21,839 --> 00:38:24,599
not y-axis was denied so now let's look

1019
00:38:24,599 --> 00:38:27,180
at running the tool before that let's

1020
00:38:27,180 --> 00:38:28,740
look at the sort of commands that are

1021
00:38:28,740 --> 00:38:30,900
available we have two commands one is

1022
00:38:30,900 --> 00:38:33,180
called analyze it does the works it

1023
00:38:33,180 --> 00:38:35,760
analyzes the cloudtrail event tells you

1024
00:38:35,760 --> 00:38:37,740
why access was denied another one that's

1025
00:38:37,740 --> 00:38:39,900
really helpful is get scps it just

1026
00:38:39,900 --> 00:38:42,000
downloads the service control policies

1027
00:38:42,000 --> 00:38:43,800
so that it doesn't have to do it every

1028
00:38:43,800 --> 00:38:45,540
time again and again and again because

1029
00:38:45,540 --> 00:38:47,760
it's quite a heavy burden in terms of

1030
00:38:47,760 --> 00:38:50,400
apis so now we ran an analysis here to

1031
00:38:50,400 --> 00:38:52,260
make it quick for the demo I ran it

1032
00:38:52,260 --> 00:38:54,480
without service control policy so you're

1033
00:38:54,480 --> 00:38:55,619
going to see a little warning there it

1034
00:38:55,619 --> 00:38:59,460
is and we have the response so basically

1035
00:38:59,460 --> 00:39:02,280
under assessment result we have it's a

1036
00:39:02,280 --> 00:39:04,079
missing allowing an identity-based

1037
00:39:04,079 --> 00:39:05,640
policies so we don't have a deny we're

1038
00:39:05,640 --> 00:39:07,980
just missing an allow and then we have

1039
00:39:07,980 --> 00:39:09,960
where we need to attach a new policy

1040
00:39:09,960 --> 00:39:14,400
that's rnaws IM account ID and see I I

1041
00:39:14,400 --> 00:39:16,140
got the account ID scrubbed because I

1042
00:39:16,140 --> 00:39:17,579
know some of y'all are

1043
00:39:17,579 --> 00:39:21,780
have plans uh uh and uh and then the

1044
00:39:21,780 --> 00:39:23,339
policy that we need to add which is

1045
00:39:23,339 --> 00:39:27,300
allow S3 list bucket and uh do it for

1046
00:39:27,300 --> 00:39:29,220
this particular bucket so now you can

1047
00:39:29,220 --> 00:39:31,500
add the least privilege policy and avoid

1048
00:39:31,500 --> 00:39:33,180
the kind of sprawl that happens this was

1049
00:39:33,180 --> 00:39:35,640
a very simple example but it also works

1050
00:39:35,640 --> 00:39:38,960
in complicated cases right

1051
00:39:39,000 --> 00:39:41,400
uh that's just one tool I think there's

1052
00:39:41,400 --> 00:39:44,280
an incredible world world of tooling uh

1053
00:39:44,280 --> 00:39:45,960
uh these are mostly the IM Tools around

1054
00:39:45,960 --> 00:39:49,560
AWS the reason they're AWS Centric is

1055
00:39:49,560 --> 00:39:50,700
because

1056
00:39:50,700 --> 00:39:53,940
both the power and complexity of AWS I

1057
00:39:53,940 --> 00:39:56,460
am I think invited this concentrated

1058
00:39:56,460 --> 00:39:59,339
Community effort to make an open source

1059
00:39:59,339 --> 00:40:02,220
uh stab at this issue I think spaces

1060
00:40:02,220 --> 00:40:04,200
like Azure have incredible tools for

1061
00:40:04,200 --> 00:40:07,460
like pen testing or red teaming or or or

1062
00:40:07,460 --> 00:40:10,380
active directory uh but not particularly

1063
00:40:10,380 --> 00:40:13,680
Tools in this space so uh policy Sentry

1064
00:40:13,680 --> 00:40:15,000
lets you sculpt out of play by

1065
00:40:15,000 --> 00:40:17,400
specifying your policies and crud I am

1066
00:40:17,400 --> 00:40:20,339
live monitors what apis are running on

1067
00:40:20,339 --> 00:40:22,800
your machine and does a similar thing

1068
00:40:22,800 --> 00:40:24,660
which is tell you the least privileged

1069
00:40:24,660 --> 00:40:26,460
policies you need to add and there's a

1070
00:40:26,460 --> 00:40:28,440
bunch of tools that scan your cloud

1071
00:40:28,440 --> 00:40:30,240
trail in your environment and tell you

1072
00:40:30,240 --> 00:40:32,160
which policies are safe to remove

1073
00:40:32,160 --> 00:40:33,839
because they haven't been used like

1074
00:40:33,839 --> 00:40:36,119
Cloud track or repo kit and a bunch of

1075
00:40:36,119 --> 00:40:38,160
privilege escalation tools which are the

1076
00:40:38,160 --> 00:40:40,020
rest of the ones in there and without

1077
00:40:40,020 --> 00:40:42,599
any further Ado uh we're happy to take

1078
00:40:42,599 --> 00:40:44,220
questions thank you so much for

1079
00:40:44,220 --> 00:40:45,000
listening

1080
00:40:45,000 --> 00:40:47,240
foreign

1081
00:40:48,840 --> 00:40:51,949
[Music]

1082
00:40:55,800 --> 00:40:58,879
[Music]

