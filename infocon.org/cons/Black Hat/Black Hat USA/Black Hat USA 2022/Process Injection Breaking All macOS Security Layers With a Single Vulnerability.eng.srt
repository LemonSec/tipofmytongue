1
00:00:01,700 --> 00:00:04,810
[Music]

2
00:00:07,400 --> 00:00:09,960
thank you and welcome to process

3
00:00:09,960 --> 00:00:12,059
injection breaking all macro security

4
00:00:12,059 --> 00:00:15,480
layers with a single vulnerability

5
00:00:15,480 --> 00:00:18,539
if you are a Mac OS developer and you

6
00:00:18,539 --> 00:00:21,240
use xcode you may have noticed that if

7
00:00:21,240 --> 00:00:22,859
you create a new project with the latest

8
00:00:22,859 --> 00:00:25,740
xcode version there's a new method in

9
00:00:25,740 --> 00:00:28,380
the template for applications for your

10
00:00:28,380 --> 00:00:30,359
application delegate application

11
00:00:30,359 --> 00:00:33,120
supports secure restorable state

12
00:00:33,120 --> 00:00:35,280
now in this talk I'm going to describe

13
00:00:35,280 --> 00:00:37,380
the vulnerability that the necessitated

14
00:00:37,380 --> 00:00:39,600
this change and how we could exploit

15
00:00:39,600 --> 00:00:42,239
this for sandbox Escape previous

16
00:00:42,239 --> 00:00:44,700
escalation and then finally bypassing

17
00:00:44,700 --> 00:00:46,320
sip

18
00:00:46,320 --> 00:00:48,360
first a bit about me I'm Tasha okamada

19
00:00:48,360 --> 00:00:51,360
I'm a security researcher at computest

20
00:00:51,360 --> 00:00:53,340
computers is a security company in the

21
00:00:53,340 --> 00:00:55,140
Netherlands providing services like pen

22
00:00:55,140 --> 00:00:57,480
testing instrument response and security

23
00:00:57,480 --> 00:00:59,640
operations center

24
00:00:59,640 --> 00:01:01,739
together with my colleague Dan Cooper we

25
00:01:01,739 --> 00:01:04,019
are the research Department which means

26
00:01:04,019 --> 00:01:06,180
that we don't work for customers but

27
00:01:06,180 --> 00:01:08,520
instead we look for vulnerabilities and

28
00:01:08,520 --> 00:01:11,820
systems that are used often or suddenly

29
00:01:11,820 --> 00:01:13,460
you more popular

30
00:01:13,460 --> 00:01:16,799
to make the world a little bit safer so

31
00:01:16,799 --> 00:01:18,540
all the work that you may have seen from

32
00:01:18,540 --> 00:01:21,720
us is a zero click remote code execution

33
00:01:21,720 --> 00:01:24,540
field Mobility we showed at Ubuntu owned

34
00:01:24,540 --> 00:01:26,820
last year and when it comes on Miami

35
00:01:26,820 --> 00:01:31,820
this year with five ICS vulnerabilities

36
00:01:31,979 --> 00:01:33,840
and there's some write-ups for these on

37
00:01:33,840 --> 00:01:35,100
our website if you want to know more

38
00:01:35,100 --> 00:01:36,299
about them

39
00:01:36,299 --> 00:01:37,979
what I'm going to be talking about today

40
00:01:37,979 --> 00:01:40,799
is macro security which is a bit of a

41
00:01:40,799 --> 00:01:42,659
specialty for me

42
00:01:42,659 --> 00:01:45,000
um been a Mac User all my life so it's

43
00:01:45,000 --> 00:01:48,180
it's a system I know most so

44
00:01:48,180 --> 00:01:50,340
um that's also where this

45
00:01:50,340 --> 00:01:53,520
familiarability originated

46
00:01:53,520 --> 00:01:56,220
and this presentation will be consists

47
00:01:56,220 --> 00:01:58,920
of two three parts first I'll describe a

48
00:01:58,920 --> 00:02:00,420
little bit to make a security model

49
00:02:00,420 --> 00:02:02,280
because many people don't really

50
00:02:02,280 --> 00:02:04,320
understand

51
00:02:04,320 --> 00:02:06,360
um the current security model

52
00:02:06,360 --> 00:02:08,940
and then the second part will be

53
00:02:08,940 --> 00:02:11,819
introducing the filmability that I found

54
00:02:11,819 --> 00:02:13,860
and then the third part will be to

55
00:02:13,860 --> 00:02:15,780
demonstrate how the film ability could

56
00:02:15,780 --> 00:02:19,020
be applied in three different ways to as

57
00:02:19,020 --> 00:02:21,420
I said escape the sandbox Elevate

58
00:02:21,420 --> 00:02:23,819
Privileges and then finally bypassing

59
00:02:23,819 --> 00:02:26,119
ship

60
00:02:26,640 --> 00:02:28,980
so to make a security model as of the

61
00:02:28,980 --> 00:02:32,040
current latest release Macos Monterey

62
00:02:32,040 --> 00:02:34,860
to describe that I'll first talk a

63
00:02:34,860 --> 00:02:37,140
little bit about the unixie Linux

64
00:02:37,140 --> 00:02:39,900
security model as it used to be on Mac

65
00:02:39,900 --> 00:02:42,060
OS as well

66
00:02:42,060 --> 00:02:44,040
um and the basic idea behind it is that

67
00:02:44,040 --> 00:02:46,800
users are security boundaries with

68
00:02:46,800 --> 00:02:48,540
processes are not

69
00:02:48,540 --> 00:02:51,959
so you can see this for files any file

70
00:02:51,959 --> 00:02:54,300
has an owner as a group and there are

71
00:02:54,300 --> 00:02:55,860
these nine Flags to determine whether

72
00:02:55,860 --> 00:02:57,780
the owner or group or everybody is

73
00:02:57,780 --> 00:02:59,940
allowed to retry to execute

74
00:02:59,940 --> 00:03:01,440
and also if you want to attach a

75
00:03:01,440 --> 00:03:03,959
debugger to another process and then

76
00:03:03,959 --> 00:03:05,879
those processes need to be in general

77
00:03:05,879 --> 00:03:09,180
they need to be running as the same user

78
00:03:09,180 --> 00:03:12,000
and root users an exception to this the

79
00:03:12,000 --> 00:03:14,280
road user can read or modify all files

80
00:03:14,280 --> 00:03:16,739
and you can access basically any data in

81
00:03:16,739 --> 00:03:19,140
memory or even in a kernel in other

82
00:03:19,140 --> 00:03:22,560
processes any data is available for the

83
00:03:22,560 --> 00:03:24,000
root user

84
00:03:24,000 --> 00:03:26,400
and this was the security model for Mac

85
00:03:26,400 --> 00:03:29,280
OS but it no longer is the case

86
00:03:29,280 --> 00:03:31,080
ever since the introduction of system

87
00:03:31,080 --> 00:03:33,120
Integrity protection

88
00:03:33,120 --> 00:03:36,000
this was introduced in 2015 with the El

89
00:03:36,000 --> 00:03:37,940
Capitan release and this was from the

90
00:03:37,940 --> 00:03:40,920
WWDC presentation where they announced

91
00:03:40,920 --> 00:03:42,780
it

92
00:03:42,780 --> 00:03:45,480
and the basic idea of sip originally was

93
00:03:45,480 --> 00:03:48,000
to do two things

94
00:03:48,000 --> 00:03:50,640
first of all introduce a security layer

95
00:03:50,640 --> 00:03:53,459
between the root user and the kernel

96
00:03:53,459 --> 00:03:55,860
and secondly to protect the system from

97
00:03:55,860 --> 00:03:59,760
being modified even by the road user

98
00:03:59,760 --> 00:04:02,700
so having just root access is no longer

99
00:04:02,700 --> 00:04:04,379
enough to completely compromise the

100
00:04:04,379 --> 00:04:05,340
system

101
00:04:05,340 --> 00:04:07,019
and the reason Apple wanted to do this

102
00:04:07,019 --> 00:04:09,720
is that getting root access on a Mac is

103
00:04:09,720 --> 00:04:12,060
pretty simple in general if you're more

104
00:04:12,060 --> 00:04:15,000
aware because most of the users are an

105
00:04:15,000 --> 00:04:17,160
admin user so if you just prompt the

106
00:04:17,160 --> 00:04:19,260
user for their password to do something

107
00:04:19,260 --> 00:04:21,358
update the system or something like that

108
00:04:21,358 --> 00:04:23,880
and it's very easy to get the user to

109
00:04:23,880 --> 00:04:25,440
enter their password and then you have

110
00:04:25,440 --> 00:04:28,320
root privileges

111
00:04:28,320 --> 00:04:31,800
so that's why Apple introduced sip and

112
00:04:31,800 --> 00:04:33,479
one of the other names is known as is

113
00:04:33,479 --> 00:04:34,560
rootless

114
00:04:34,560 --> 00:04:36,720
many people thought well Apple's going

115
00:04:36,720 --> 00:04:38,220
to take the root user away from people

116
00:04:38,220 --> 00:04:39,960
like they do on the iPhone but that's

117
00:04:39,960 --> 00:04:43,500
not really what this me what this name

118
00:04:43,500 --> 00:04:44,520
means

119
00:04:44,520 --> 00:04:46,740
it means that root is less powerful

120
00:04:46,740 --> 00:04:50,840
that's the idea behind it

121
00:04:50,880 --> 00:04:53,400
so the way that works is that

122
00:04:53,400 --> 00:04:55,259
you now need an entitlement to perform

123
00:04:55,259 --> 00:04:57,000
dangerous operations

124
00:04:57,000 --> 00:04:59,580
so an entitlement is some metadata

125
00:04:59,580 --> 00:05:01,320
that's included when the code signature

126
00:05:01,320 --> 00:05:03,479
is generated for an application

127
00:05:03,479 --> 00:05:06,120
so for many dangerous operations that

128
00:05:06,120 --> 00:05:08,220
would compromise the system or the

129
00:05:08,220 --> 00:05:10,259
kernel you now need a specific

130
00:05:10,259 --> 00:05:12,720
entitlement to do that so loading a

131
00:05:12,720 --> 00:05:15,000
kernel extension or modifying the

132
00:05:15,000 --> 00:05:17,340
operating system or debugging a system

133
00:05:17,340 --> 00:05:19,440
process

134
00:05:19,440 --> 00:05:21,240
so Apple can still make certain

135
00:05:21,240 --> 00:05:23,280
executables able to update the system

136
00:05:23,280 --> 00:05:24,960
because yeah you still need to install

137
00:05:24,960 --> 00:05:27,419
updates but it's no longer just possible

138
00:05:27,419 --> 00:05:29,759
for any route you for the root user to

139
00:05:29,759 --> 00:05:32,759
modify those files

140
00:05:32,759 --> 00:05:35,520
and over the years in the releases since

141
00:05:35,520 --> 00:05:38,100
Apple has extended the protections of

142
00:05:38,100 --> 00:05:40,139
ship to other parts of the system as

143
00:05:40,139 --> 00:05:40,860
well

144
00:05:40,860 --> 00:05:43,259
so even debugging any application is now

145
00:05:43,259 --> 00:05:45,300
restricted and you cannot just attach a

146
00:05:45,300 --> 00:05:47,759
debugger to anything unless they

147
00:05:47,759 --> 00:05:49,560
specifically allow that

148
00:05:49,560 --> 00:05:51,600
and also an interesting feature is data

149
00:05:51,600 --> 00:05:52,680
faults

150
00:05:52,680 --> 00:05:55,560
with restrict as file access

151
00:05:55,560 --> 00:05:57,360
I have an example here

152
00:05:57,360 --> 00:05:59,520
so Apple considers your email database

153
00:05:59,520 --> 00:06:01,560
to be very sensitive because it contains

154
00:06:01,560 --> 00:06:04,740
a lot of personal information also your

155
00:06:04,740 --> 00:06:06,600
messages database or your Safari history

156
00:06:06,600 --> 00:06:08,960
is protected in the same way

157
00:06:08,960 --> 00:06:11,940
and what this means is that you cannot

158
00:06:11,940 --> 00:06:15,360
just see what files are there even the

159
00:06:15,360 --> 00:06:17,340
root user cannot do that

160
00:06:17,340 --> 00:06:20,100
uh so even if the malware is on your Mac

161
00:06:20,100 --> 00:06:21,780
and has roots use your privileges it

162
00:06:21,780 --> 00:06:24,600
cannot just read your email

163
00:06:24,600 --> 00:06:26,880
but of course mail itself needs to be

164
00:06:26,880 --> 00:06:28,680
able to access those files otherwise it

165
00:06:28,680 --> 00:06:29,759
would be useless

166
00:06:29,759 --> 00:06:32,699
so mail has a specific entitlement that

167
00:06:32,699 --> 00:06:35,039
allows you to access those files

168
00:06:35,039 --> 00:06:37,080
and this is the Commonwealth Apple dot

169
00:06:37,080 --> 00:06:39,479
rootless dot storage of mail which means

170
00:06:39,479 --> 00:06:41,400
it can access just the mail data fault

171
00:06:41,400 --> 00:06:44,179
but nothing else

172
00:06:44,220 --> 00:06:45,600
so

173
00:06:45,600 --> 00:06:48,419
in this way now certainly processes have

174
00:06:48,419 --> 00:06:50,699
become security boundaries

175
00:06:50,699 --> 00:06:52,259
and that also means that there's new

176
00:06:52,259 --> 00:06:54,120
types of vulnerabilities that we need to

177
00:06:54,120 --> 00:06:55,259
think about

178
00:06:55,259 --> 00:06:57,120
and one important one is process

179
00:06:57,120 --> 00:06:58,440
injection

180
00:06:58,440 --> 00:07:00,240
which is basically the ability for one

181
00:07:00,240 --> 00:07:02,460
process to execute code as another

182
00:07:02,460 --> 00:07:05,220
process so the systems thinks it's

183
00:07:05,220 --> 00:07:07,080
process B with the code is actually

184
00:07:07,080 --> 00:07:09,240
specified for process a

185
00:07:09,240 --> 00:07:11,699
and on Windows you have these techniques

186
00:07:11,699 --> 00:07:15,120
like dll hijacking that do similar stuff

187
00:07:15,120 --> 00:07:17,759
um a little Mac OS yeah this cannot

188
00:07:17,759 --> 00:07:20,160
really be a severe security issue if

189
00:07:20,160 --> 00:07:24,300
you're able to go to a different process

190
00:07:24,300 --> 00:07:27,000
and when Apple introduced sip as you can

191
00:07:27,000 --> 00:07:29,340
see on the right of the slide many

192
00:07:29,340 --> 00:07:30,840
techniques that could lead to process

193
00:07:30,840 --> 00:07:33,840
injection were disabled for those

194
00:07:33,840 --> 00:07:36,599
protected programs so Apple thought a

195
00:07:36,599 --> 00:07:37,680
lot about how they can make this

196
00:07:37,680 --> 00:07:40,620
security boundary actually work

197
00:07:40,620 --> 00:07:42,240
and also for third-party applications

198
00:07:42,240 --> 00:07:43,919
Apple introduced what's known as the

199
00:07:43,919 --> 00:07:46,259
hardened runtime to prevent certain

200
00:07:46,259 --> 00:07:49,020
techniques that used to be possible for

201
00:07:49,020 --> 00:07:52,199
injecting codes like Dynamic Linker

202
00:07:52,199 --> 00:07:53,940
environment variables and also Library

203
00:07:53,940 --> 00:07:56,340
validation which basically prevents the

204
00:07:56,340 --> 00:07:58,620
similar technique like dll hijacking but

205
00:07:58,620 --> 00:08:01,740
for Mac OS

206
00:08:01,740 --> 00:08:04,199
but micros is quite all large and

207
00:08:04,199 --> 00:08:06,539
established so there's a lot of parts of

208
00:08:06,539 --> 00:08:09,599
the system that were written before the

209
00:08:09,599 --> 00:08:12,840
security model had changed and yeah it's

210
00:08:12,840 --> 00:08:14,639
not possible to really reconsider the

211
00:08:14,639 --> 00:08:16,259
entire system into this new security

212
00:08:16,259 --> 00:08:18,300
model so there may still be

213
00:08:18,300 --> 00:08:20,580
vulnerabilities that can be used to

214
00:08:20,580 --> 00:08:24,740
inject code to other applications

215
00:08:26,240 --> 00:08:28,620
third-party applications can often have

216
00:08:28,620 --> 00:08:31,979
those process injection vulnerabilities

217
00:08:31,979 --> 00:08:34,020
um for example to abuse what's known as

218
00:08:34,020 --> 00:08:36,839
TCC basically the permission from to get

219
00:08:36,839 --> 00:08:38,279
if an application wants to use your

220
00:08:38,279 --> 00:08:40,020
webcam for the first time

221
00:08:40,020 --> 00:08:42,479
and many third-party developers are not

222
00:08:42,479 --> 00:08:44,700
aware of the security model so anytime

223
00:08:44,700 --> 00:08:46,380
you find the availability like this you

224
00:08:46,380 --> 00:08:48,120
have to completely explain the security

225
00:08:48,120 --> 00:08:49,740
model

226
00:08:49,740 --> 00:08:52,200
um and that's yeah it might be possible

227
00:08:52,200 --> 00:08:54,180
to use their application to steal the

228
00:08:54,180 --> 00:08:56,640
webcam data

229
00:08:56,640 --> 00:08:58,740
you can also often do effects like

230
00:08:58,740 --> 00:09:00,540
downgrading an application to an older

231
00:09:00,540 --> 00:09:02,040
version and then still use the

232
00:09:02,040 --> 00:09:05,399
permissions that the application has

233
00:09:05,399 --> 00:09:07,140
but those are incidents those are

234
00:09:07,140 --> 00:09:09,480
incidental vulnerabilities

235
00:09:09,480 --> 00:09:11,220
of course it's much nicer to have a

236
00:09:11,220 --> 00:09:12,899
processary injection filter you can just

237
00:09:12,899 --> 00:09:14,880
apply everywhere

238
00:09:14,880 --> 00:09:17,580
and that's exactly what I find

239
00:09:17,580 --> 00:09:20,480
so the CFE 2021

240
00:09:20,480 --> 00:09:23,040
3873 is a process injection

241
00:09:23,040 --> 00:09:24,959
vulnerability in app kit which basically

242
00:09:24,959 --> 00:09:26,399
means that any applicant based

243
00:09:26,399 --> 00:09:29,399
application was fill in the role

244
00:09:29,399 --> 00:09:32,580
and where this vulnerability was in is

245
00:09:32,580 --> 00:09:35,459
in the safe State feature so when you

246
00:09:35,459 --> 00:09:36,920
shoot down your computer

247
00:09:36,920 --> 00:09:39,360
there's this checkbox if you want to

248
00:09:39,360 --> 00:09:41,459
reopen the app the windows that you have

249
00:09:41,459 --> 00:09:43,800
open the next time you log in

250
00:09:43,800 --> 00:09:45,839
and this is known as safe state or

251
00:09:45,839 --> 00:09:48,779
persistent UI internally

252
00:09:48,779 --> 00:09:51,120
and there's also do does stuff like if

253
00:09:51,120 --> 00:09:52,920
you have an in-safe document you never

254
00:09:52,920 --> 00:09:54,540
didn't save it yet but you shared that

255
00:09:54,540 --> 00:09:55,860
in mac and then you start it up again

256
00:09:55,860 --> 00:09:58,140
and it can recover the content of that

257
00:09:58,140 --> 00:10:01,380
in safe document

258
00:10:01,380 --> 00:10:04,380
and this largely Works automatically so

259
00:10:04,380 --> 00:10:06,420
application developers do not need to

260
00:10:06,420 --> 00:10:08,459
opt in but appkit will automatically see

261
00:10:08,459 --> 00:10:10,980
oh there's this safe state I'm going to

262
00:10:10,980 --> 00:10:13,800
restore it and reopen these windows

263
00:10:13,800 --> 00:10:16,260
but third-party developers can extend it

264
00:10:16,260 --> 00:10:17,760
for example if they have their own

265
00:10:17,760 --> 00:10:19,620
document format then they may have their

266
00:10:19,620 --> 00:10:21,300
own objects that they want to store in

267
00:10:21,300 --> 00:10:23,959
that safe state

268
00:10:24,720 --> 00:10:26,820
and the state is stored in your library

269
00:10:26,820 --> 00:10:29,279
in the application State folder and

270
00:10:29,279 --> 00:10:31,920
there are basically two files that are

271
00:10:31,920 --> 00:10:33,360
important here

272
00:10:33,360 --> 00:10:35,700
first of all windows.plist this is

273
00:10:35,700 --> 00:10:37,320
basically a list of all of the windows

274
00:10:37,320 --> 00:10:39,720
that were open in the application

275
00:10:39,720 --> 00:10:42,120
and for each of them there's an

276
00:10:42,120 --> 00:10:43,560
encryption key

277
00:10:43,560 --> 00:10:46,320
and then there's the data.data file

278
00:10:46,320 --> 00:10:48,420
which as far as I can tell this is a

279
00:10:48,420 --> 00:10:51,240
unique format not used anywhere else

280
00:10:51,240 --> 00:10:53,640
let's contains a list of records and

281
00:10:53,640 --> 00:10:56,339
each of those records is corresponds to

282
00:10:56,339 --> 00:10:59,279
window and it contains a serialized

283
00:10:59,279 --> 00:11:01,980
object encrypted using that key from the

284
00:11:01,980 --> 00:11:04,440
windows to PLS file

285
00:11:04,440 --> 00:11:07,260
now I have no idea why this is encrypted

286
00:11:07,260 --> 00:11:09,060
because the files are right next to each

287
00:11:09,060 --> 00:11:10,740
other there's no permission differences

288
00:11:10,740 --> 00:11:12,000
between them

289
00:11:12,000 --> 00:11:15,180
there's also no Integrity check on the

290
00:11:15,180 --> 00:11:17,940
ciphertext so I have no idea why it's

291
00:11:17,940 --> 00:11:21,420
encrypted but it apparently it is

292
00:11:21,420 --> 00:11:23,880
an availability that I found is that

293
00:11:23,880 --> 00:11:26,519
this object that's encrypted here is

294
00:11:26,519 --> 00:11:29,839
serialized using a non-secure

295
00:11:29,839 --> 00:11:34,220
serializer so non-secure coding

296
00:11:34,380 --> 00:11:36,240
now serialization field mobilities are

297
00:11:36,240 --> 00:11:39,120
very common in C sharp and Java very

298
00:11:39,120 --> 00:11:41,519
well known but also Python and Ruby it's

299
00:11:41,519 --> 00:11:43,260
also very easy to exploit it to gain

300
00:11:43,260 --> 00:11:44,640
code execution

301
00:11:44,640 --> 00:11:47,399
with apple serialization format hasn't

302
00:11:47,399 --> 00:11:48,480
really been

303
00:11:48,480 --> 00:11:50,279
discussed for these types of

304
00:11:50,279 --> 00:11:53,480
vulnerabilities as far as I could find

305
00:11:53,480 --> 00:11:56,760
so Apple's format is called nscoding

306
00:11:56,760 --> 00:11:58,980
with apple added a secure version and a

307
00:11:58,980 --> 00:12:01,680
secure Accounting in 10.8 which is 10

308
00:12:01,680 --> 00:12:03,959
years ago

309
00:12:03,959 --> 00:12:06,660
and the secure coding already solved the

310
00:12:06,660 --> 00:12:08,640
issue that many serialization

311
00:12:08,640 --> 00:12:10,800
vulnerabilities

312
00:12:10,800 --> 00:12:12,500
yeah

313
00:12:12,500 --> 00:12:14,760
it causes many of the serialization

314
00:12:14,760 --> 00:12:17,700
vulnerabilities so instead of creating

315
00:12:17,700 --> 00:12:19,860
an object first and then checking if it

316
00:12:19,860 --> 00:12:21,720
is the correct type which is which is

317
00:12:21,720 --> 00:12:22,920
what leads to these vulnerabilities

318
00:12:22,920 --> 00:12:24,660
because by then the object already

319
00:12:24,660 --> 00:12:26,760
exists and maybe doing something is

320
00:12:26,760 --> 00:12:29,399
Constructor or Destructor you create the

321
00:12:29,399 --> 00:12:32,339
object while checking its type

322
00:12:32,339 --> 00:12:33,980
so the example of the difference

323
00:12:33,980 --> 00:12:36,360
insecure version you first create the

324
00:12:36,360 --> 00:12:38,579
object and then you check its type

325
00:12:38,579 --> 00:12:40,800
this is dangerous because by the time

326
00:12:40,800 --> 00:12:42,600
you check its type the object already

327
00:12:42,600 --> 00:12:45,420
exists and may have done something

328
00:12:45,420 --> 00:12:48,000
and then secure version you decode the

329
00:12:48,000 --> 00:12:49,920
object but only if it is of this class

330
00:12:49,920 --> 00:12:54,120
or this couple of classes

331
00:12:54,120 --> 00:12:55,380
and

332
00:12:55,380 --> 00:12:57,959
secure coding is very common within Mac

333
00:12:57,959 --> 00:13:00,060
OS it's also very often used between

334
00:13:00,060 --> 00:13:02,100
different security layers so an

335
00:13:02,100 --> 00:13:03,779
application may be communicating with

336
00:13:03,779 --> 00:13:06,600
some service that's privileged and then

337
00:13:06,600 --> 00:13:08,880
sending these serialized objects over

338
00:13:08,880 --> 00:13:11,760
it's even used within iMessage so if you

339
00:13:11,760 --> 00:13:14,220
send a message to another user that is a

340
00:13:14,220 --> 00:13:17,420
secure serialized object

341
00:13:18,060 --> 00:13:21,060
um so there's been a lot of researching

342
00:13:21,060 --> 00:13:23,399
the secure serialization format the

343
00:13:23,399 --> 00:13:25,560
insecure version is not used very often

344
00:13:25,560 --> 00:13:27,480
in this kind of context so Apple has

345
00:13:27,480 --> 00:13:29,760
been very good at making sure it's not

346
00:13:29,760 --> 00:13:31,680
used in a way that could lead to

347
00:13:31,680 --> 00:13:33,420
vulnerabilities

348
00:13:33,420 --> 00:13:37,079
but in this case yeah it was possible

349
00:13:37,079 --> 00:13:39,899
so what is the attack that this allows

350
00:13:39,899 --> 00:13:41,279
so

351
00:13:41,279 --> 00:13:44,040
what you can do is you can create a new

352
00:13:44,040 --> 00:13:46,920
safe state for an application with a

353
00:13:46,920 --> 00:13:49,440
malicious serialized object

354
00:13:49,440 --> 00:13:52,440
you can write it to that directory for

355
00:13:52,440 --> 00:13:53,940
the other application

356
00:13:53,940 --> 00:13:55,980
and then you can ask the system to

357
00:13:55,980 --> 00:13:57,899
launch your other application

358
00:13:57,899 --> 00:14:00,300
and then when the application runs it

359
00:14:00,300 --> 00:14:02,100
will automatically deserialize that

360
00:14:02,100 --> 00:14:03,060
object

361
00:14:03,060 --> 00:14:05,880
and then yeah we could be executing

362
00:14:05,880 --> 00:14:07,500
codes within an app within another

363
00:14:07,500 --> 00:14:09,720
application which also means that we

364
00:14:09,720 --> 00:14:13,079
have access we can use the entitlements

365
00:14:13,079 --> 00:14:16,699
or permissions of that other application

366
00:14:17,339 --> 00:14:20,459
so I found this and then it was just

367
00:14:20,459 --> 00:14:22,680
well what object do I write

368
00:14:22,680 --> 00:14:24,779
can I find anything somebody else has

369
00:14:24,779 --> 00:14:26,160
done

370
00:14:26,160 --> 00:14:28,740
so there's this famous projects uh White

371
00:14:28,740 --> 00:14:30,720
sociario for Java CU civilization

372
00:14:30,720 --> 00:14:32,459
vulnerabilities and also why so

373
00:14:32,459 --> 00:14:34,680
serial.net for c-sharp

374
00:14:34,680 --> 00:14:37,320
but yeah no similar project exists for

375
00:14:37,320 --> 00:14:38,880
objective c

376
00:14:38,880 --> 00:14:40,380
I also checked a couple of Google

377
00:14:40,380 --> 00:14:42,860
projects here white tips ready exploited

378
00:14:42,860 --> 00:14:45,420
serialization within all of those cases

379
00:14:45,420 --> 00:14:48,120
it will secure serialization using a

380
00:14:48,120 --> 00:14:50,639
very specific vulnerability

381
00:14:50,639 --> 00:14:52,560
and those were now fixed so I could no

382
00:14:52,560 --> 00:14:54,360
longer apply those techniques

383
00:14:54,360 --> 00:14:57,060
so I had to really find out yeah

384
00:14:57,060 --> 00:14:59,639
construct these objects to change from

385
00:14:59,639 --> 00:15:03,199
scratch to exploit this issue

386
00:15:04,740 --> 00:15:06,899
so

387
00:15:06,899 --> 00:15:10,440
how did I do that so I decompiled or

388
00:15:10,440 --> 00:15:13,079
loaded into my decompiler or app kit and

389
00:15:13,079 --> 00:15:14,399
then I looked through all of the indices

390
00:15:14,399 --> 00:15:15,959
coder functions to look for something

391
00:15:15,959 --> 00:15:17,519
useful

392
00:15:17,519 --> 00:15:19,620
and to my surprise many of those classes

393
00:15:19,620 --> 00:15:23,579
that are deserializable do not Implement

394
00:15:23,579 --> 00:15:25,199
secure quality

395
00:15:25,199 --> 00:15:27,120
but they are also often not that

396
00:15:27,120 --> 00:15:29,279
interesting because the only thing they

397
00:15:29,279 --> 00:15:32,519
do is just recursively decode their own

398
00:15:32,519 --> 00:15:34,920
interest variables and then there's

399
00:15:34,920 --> 00:15:37,380
really no no other functionality that

400
00:15:37,380 --> 00:15:40,220
you might be able to access

401
00:15:40,440 --> 00:15:42,019
so the first step

402
00:15:42,019 --> 00:15:44,760
that I found that I could use was the NS

403
00:15:44,760 --> 00:15:47,480
rule editor

404
00:15:50,459 --> 00:15:53,220
I hope it's readable and so what this

405
00:15:53,220 --> 00:15:55,680
does is it obtains an object from the

406
00:15:55,680 --> 00:15:56,940
archive

407
00:15:56,940 --> 00:15:58,920
and the place a key path from the

408
00:15:58,920 --> 00:16:00,000
archive

409
00:16:00,000 --> 00:16:02,220
and then it creates a binding

410
00:16:02,220 --> 00:16:05,040
to that object using that key path so

411
00:16:05,040 --> 00:16:07,920
bindings are something like a reactive

412
00:16:07,920 --> 00:16:11,100
programming technique in Macos

413
00:16:11,100 --> 00:16:13,800
this means that you can sort of

414
00:16:13,800 --> 00:16:16,199
yeah you can directly connect your View

415
00:16:16,199 --> 00:16:17,940
to a model without having to use a

416
00:16:17,940 --> 00:16:20,160
controller

417
00:16:20,160 --> 00:16:24,000
and then and one thing that you need to

418
00:16:24,000 --> 00:16:26,339
specify is that key path and it

419
00:16:26,339 --> 00:16:28,440
determines a property that you want to

420
00:16:28,440 --> 00:16:30,480
bind to so for example if you have a

421
00:16:30,480 --> 00:16:32,279
person you might bind to their name to

422
00:16:32,279 --> 00:16:33,899
make a field that's automatically

423
00:16:33,899 --> 00:16:36,180
contains your name

424
00:16:36,180 --> 00:16:37,500
but

425
00:16:37,500 --> 00:16:39,720
that key path can basically be any

426
00:16:39,720 --> 00:16:42,779
methods even if it's not a property so

427
00:16:42,779 --> 00:16:44,579
you can bind to any method as long as

428
00:16:44,579 --> 00:16:46,920
this has no arguments

429
00:16:46,920 --> 00:16:51,240
so you can just bind to yeah any zero

430
00:16:51,240 --> 00:16:53,519
argument method on an object

431
00:16:53,519 --> 00:16:55,620
so with this class I could Now call

432
00:16:55,620 --> 00:16:56,940
methods

433
00:16:56,940 --> 00:17:01,079
um without any arguments

434
00:17:01,079 --> 00:17:03,540
and then the next step was NS Custom

435
00:17:03,540 --> 00:17:05,339
Image wrap

436
00:17:05,339 --> 00:17:08,760
this obtains a object from the archive

437
00:17:08,760 --> 00:17:10,980
and then a selector and the selector is

438
00:17:10,980 --> 00:17:13,140
basically like a function pointer for a

439
00:17:13,140 --> 00:17:15,299
Objective C method

440
00:17:15,299 --> 00:17:17,459
but it doesn't use them yet it just

441
00:17:17,459 --> 00:17:19,260
stores them

442
00:17:19,260 --> 00:17:21,959
but then when you call draw on it

443
00:17:21,959 --> 00:17:25,260
um object it will call the selector on

444
00:17:25,260 --> 00:17:27,299
the object that it's obtains

445
00:17:27,299 --> 00:17:29,040
so if we combine this with the previous

446
00:17:29,040 --> 00:17:31,320
step or you can call zero argument

447
00:17:31,320 --> 00:17:33,960
methods we can now call the draw method

448
00:17:33,960 --> 00:17:36,419
on a an S Custom Image wrap

449
00:17:36,419 --> 00:17:39,120
to perform any method

450
00:17:39,120 --> 00:17:41,160
although we don't have any control yet

451
00:17:41,160 --> 00:17:43,260
over the arguments it bosses itself as

452
00:17:43,260 --> 00:17:45,240
its first argument and any other

453
00:17:45,240 --> 00:17:47,640
arguments will be random data that

454
00:17:47,640 --> 00:17:51,080
happens to be in those registers

455
00:17:52,020 --> 00:17:54,059
but this is a very powerful primitive

456
00:17:54,059 --> 00:17:55,799
already because you can call a lot of

457
00:17:55,799 --> 00:17:58,580
different functions

458
00:17:58,679 --> 00:18:01,740
now I have to skip a few steps for time

459
00:18:01,740 --> 00:18:04,520
reasons and also disclosure reasons

460
00:18:04,520 --> 00:18:07,200
but uh

461
00:18:07,200 --> 00:18:09,600
I'll summarize the steps a little bit

462
00:18:09,600 --> 00:18:11,820
here so we can first call those serial

463
00:18:11,820 --> 00:18:13,679
argument methods and then we can call

464
00:18:13,679 --> 00:18:15,000
any method

465
00:18:15,000 --> 00:18:17,220
let me use a trick to create other

466
00:18:17,220 --> 00:18:20,039
objects that were not implementing at NS

467
00:18:20,039 --> 00:18:24,120
code or usually not serializable

468
00:18:24,120 --> 00:18:26,039
I'm going to use the same trick to call

469
00:18:26,039 --> 00:18:29,760
zero argument methods on those objects

470
00:18:29,760 --> 00:18:32,520
and then and I'll take the arbitrary

471
00:18:32,520 --> 00:18:34,620
methods on those objects

472
00:18:34,620 --> 00:18:36,660
and that's basically enough to evaluate

473
00:18:36,660 --> 00:18:39,419
applescript within that process

474
00:18:39,419 --> 00:18:41,940
and evaluating applescript is already

475
00:18:41,940 --> 00:18:45,120
very powerful because if we for example

476
00:18:45,120 --> 00:18:47,880
would attack mail then we can now access

477
00:18:47,880 --> 00:18:50,280
the files within the mail data fold copy

478
00:18:50,280 --> 00:18:53,660
them out or could spawn a reverse shell

479
00:18:53,660 --> 00:18:57,059
and do stuff like that

480
00:18:57,059 --> 00:19:00,000
so this was a nice success to have

481
00:19:00,000 --> 00:19:01,860
already

482
00:19:01,860 --> 00:19:03,660
but in one of the instances of the

483
00:19:03,660 --> 00:19:05,280
exploit that we wanted to use this was

484
00:19:05,280 --> 00:19:06,480
not enough

485
00:19:06,480 --> 00:19:09,000
we really wanted to have basically

486
00:19:09,000 --> 00:19:11,280
equivalent to native code execution in

487
00:19:11,280 --> 00:19:14,059
that other process

488
00:19:14,160 --> 00:19:16,200
but this was quite tricky

489
00:19:16,200 --> 00:19:18,419
because as I mentioned there's not

490
00:19:18,419 --> 00:19:20,940
really hard on drain time

491
00:19:20,940 --> 00:19:22,919
and the art engine time is is meant to

492
00:19:22,919 --> 00:19:26,720
make these kinds of attacks harder

493
00:19:28,020 --> 00:19:29,160
so

494
00:19:29,160 --> 00:19:31,559
it prevents us from creating memory

495
00:19:31,559 --> 00:19:33,539
pages that are

496
00:19:33,539 --> 00:19:36,780
yeah read a writable and executables or

497
00:19:36,780 --> 00:19:39,600
no uh just in time compilers are allowed

498
00:19:39,600 --> 00:19:41,760
they see Library validation so we cannot

499
00:19:41,760 --> 00:19:44,179
just load the dll or the dynamic Library

500
00:19:44,179 --> 00:19:46,440
this is the environment variables which

501
00:19:46,440 --> 00:19:48,000
would not be useful here but also

502
00:19:48,000 --> 00:19:50,299
blocked

503
00:19:52,740 --> 00:19:55,400
so how

504
00:19:55,679 --> 00:19:59,100
how in the solution I found was I could

505
00:19:59,100 --> 00:20:00,840
load the python framework which was

506
00:20:00,840 --> 00:20:02,400
signed by Apple

507
00:20:02,400 --> 00:20:04,260
and at the time it was still included in

508
00:20:04,260 --> 00:20:06,600
Mac OS and then I could import the C

509
00:20:06,600 --> 00:20:09,840
types module and then using that I could

510
00:20:09,840 --> 00:20:12,240
basically evaluate code that was

511
00:20:12,240 --> 00:20:15,419
equivalent to native code just called C

512
00:20:15,419 --> 00:20:19,880
functions create structs stuff like that

513
00:20:19,980 --> 00:20:21,419
but now I was only able to create

514
00:20:21,419 --> 00:20:24,120
Objective C objects but I wanted to call

515
00:20:24,120 --> 00:20:25,980
into Python and the python framework

516
00:20:25,980 --> 00:20:27,960
doesn't have any objective-c interfaces

517
00:20:27,960 --> 00:20:29,580
you can use

518
00:20:29,580 --> 00:20:31,440
sorry I had to find some intermediate

519
00:20:31,440 --> 00:20:34,160
steps for this

520
00:20:34,740 --> 00:20:36,660
and what I use for that is called The

521
00:20:36,660 --> 00:20:39,600
applescript Objective C Bridge

522
00:20:39,600 --> 00:20:41,700
it's basically similar to applescript

523
00:20:41,700 --> 00:20:44,460
but it has the objective-c runtime

524
00:20:44,460 --> 00:20:47,900
breached into applescript

525
00:20:49,020 --> 00:20:51,600
and what I noticed about that is that

526
00:20:51,600 --> 00:20:53,400
the art engine time doesn't allow you to

527
00:20:53,400 --> 00:20:54,299
load

528
00:20:54,299 --> 00:20:57,480
libraries that are not signed by Apple

529
00:20:57,480 --> 00:21:00,240
but you by using applescript of the xfc

530
00:21:00,240 --> 00:21:02,580
you can load scripts from another bundle

531
00:21:02,580 --> 00:21:05,100
the scripts don't need to be signed so

532
00:21:05,100 --> 00:21:08,100
you can use this to learn applescript

533
00:21:08,100 --> 00:21:11,719
into another process

534
00:21:13,740 --> 00:21:15,620
and this allowed me to create

535
00:21:15,620 --> 00:21:18,600
objective-c objects called Methods

536
00:21:18,600 --> 00:21:20,880
called C functions which was very useful

537
00:21:20,880 --> 00:21:23,460
because this was not possible before

538
00:21:23,460 --> 00:21:25,860
but there was still one downside

539
00:21:25,860 --> 00:21:28,020
I could not create any

540
00:21:28,020 --> 00:21:29,580
pointers to things that were not

541
00:21:29,580 --> 00:21:31,559
objective-c objects I could not create

542
00:21:31,559 --> 00:21:34,200
any structs or work with C strings

543
00:21:34,200 --> 00:21:35,880
because the event time doesn't The

544
00:21:35,880 --> 00:21:38,039
applescript Objective C Bridge doesn't

545
00:21:38,039 --> 00:21:40,440
allow that

546
00:21:40,440 --> 00:21:43,140
but I could call C functions

547
00:21:43,140 --> 00:21:45,539
so I went through all of the functions

548
00:21:45,539 --> 00:21:48,179
exported by the python framework

549
00:21:48,179 --> 00:21:50,580
but all of those really require requires

550
00:21:50,580 --> 00:21:52,080
a Char pointer

551
00:21:52,080 --> 00:21:54,900
because she needed to pass either path

552
00:21:54,900 --> 00:21:56,520
or the actual python code that you want

553
00:21:56,520 --> 00:21:58,860
to evaluate and I had no way of

554
00:21:58,860 --> 00:22:01,200
generating those character pointers

555
00:22:01,200 --> 00:22:04,799
using applescript Objective C

556
00:22:04,799 --> 00:22:07,799
but then I found a very neat but ugly

557
00:22:07,799 --> 00:22:09,179
trick to do that

558
00:22:09,179 --> 00:22:12,900
I could call Pai main with zero and null

559
00:22:12,900 --> 00:22:15,240
and nose because it's zero it's

560
00:22:15,240 --> 00:22:16,799
equivalent to nil

561
00:22:16,799 --> 00:22:19,440
this was allowed and what this means is

562
00:22:19,440 --> 00:22:22,020
that the process now acts as if it is

563
00:22:22,020 --> 00:22:23,580
python as if you would launch it

564
00:22:23,580 --> 00:22:25,799
normally in a shell

565
00:22:25,799 --> 00:22:27,720
which means that it starts his Rebel

566
00:22:27,720 --> 00:22:31,320
within another process so in on standard

567
00:22:31,320 --> 00:22:32,880
input I could just pass all of the

568
00:22:32,880 --> 00:22:34,260
Python codes that would then be

569
00:22:34,260 --> 00:22:37,320
evaluated in that process

570
00:22:37,320 --> 00:22:39,720
now if you're

571
00:22:39,720 --> 00:22:43,260
a fan of how for Boost applescript or

572
00:22:43,260 --> 00:22:45,000
objective c is then you really should

573
00:22:45,000 --> 00:22:47,220
look at the Apple script Objective C

574
00:22:47,220 --> 00:22:48,720
Bridge because it's

575
00:22:48,720 --> 00:22:50,159
basically

576
00:22:50,159 --> 00:22:52,740
even for Boost and both of those and

577
00:22:52,740 --> 00:22:54,600
this is how you call functions

578
00:22:54,600 --> 00:22:57,179
um yeah you need to drop everything in

579
00:22:57,179 --> 00:22:59,460
there and tell current application and

580
00:22:59,460 --> 00:23:01,020
then

581
00:23:01,020 --> 00:23:04,159
all of these apostrophes to access

582
00:23:04,159 --> 00:23:08,400
Objective C goals

583
00:23:08,520 --> 00:23:10,919
and using this with a reference that

584
00:23:10,919 --> 00:23:14,400
basically pass nil into it I could load

585
00:23:14,400 --> 00:23:17,240
a python grapple

586
00:23:18,780 --> 00:23:20,039
so

587
00:23:20,039 --> 00:23:21,919
to summarize that

588
00:23:21,919 --> 00:23:24,419
I could evaluate applescripts with the

589
00:23:24,419 --> 00:23:26,700
Apple script Objective C Bridge

590
00:23:26,700 --> 00:23:29,100
and a good fra python

591
00:23:29,100 --> 00:23:31,260
because import C types

592
00:23:31,260 --> 00:23:32,880
and now I could execute code that's

593
00:23:32,880 --> 00:23:34,620
basically equivalent to native code

594
00:23:34,620 --> 00:23:36,539
within the application I can just create

595
00:23:36,539 --> 00:23:40,080
structs I could create Char pointers I

596
00:23:40,080 --> 00:23:42,780
could call C functions

597
00:23:42,780 --> 00:23:45,240
and yeah I've just bypassed the the

598
00:23:45,240 --> 00:23:47,100
hardened runtime restrictions and can

599
00:23:47,100 --> 00:23:50,100
now execute any code in the process

600
00:23:50,100 --> 00:23:52,440
and also the neat thing about C types is

601
00:23:52,440 --> 00:23:54,360
that this just works even with all of

602
00:23:54,360 --> 00:23:55,740
those restrictions

603
00:23:55,740 --> 00:23:57,179
if you look at for example the other

604
00:23:57,179 --> 00:24:00,659
Frameworks included like Ruby or Pearl

605
00:24:00,659 --> 00:24:03,419
and you can create bindings to see but

606
00:24:03,419 --> 00:24:06,179
then you often need to compile some

607
00:24:06,179 --> 00:24:08,520
intermediate codes to create those

608
00:24:08,520 --> 00:24:11,340
bindings and then the library validation

609
00:24:11,340 --> 00:24:14,299
would not allow that

610
00:24:18,539 --> 00:24:21,720
so now for exploitation for the three

611
00:24:21,720 --> 00:24:23,039
different ways that this vulnerability

612
00:24:23,039 --> 00:24:24,840
could be applied

613
00:24:24,840 --> 00:24:28,919
first of all escaping your sandbox

614
00:24:28,919 --> 00:24:32,159
to do that I need to explain how this

615
00:24:32,159 --> 00:24:35,220
works so this is an open Panel it looks

616
00:24:35,220 --> 00:24:36,960
really boring

617
00:24:36,960 --> 00:24:40,200
you see a lot if you use Mac OS but it's

618
00:24:40,200 --> 00:24:42,780
actually technically quite complicated

619
00:24:42,780 --> 00:24:44,280
because if you have a sandboxed

620
00:24:44,280 --> 00:24:46,260
application and the application cannot

621
00:24:46,260 --> 00:24:49,380
list all of the files you have on disk

622
00:24:49,380 --> 00:24:51,720
but if you want to open a file it would

623
00:24:51,720 --> 00:24:53,460
be very inconvenient if the application

624
00:24:53,460 --> 00:24:55,980
called know what files you have before

625
00:24:55,980 --> 00:24:57,600
you open something

626
00:24:57,600 --> 00:25:00,360
so the way Apple implemented this is

627
00:25:00,360 --> 00:25:02,700
that the window is now part of the

628
00:25:02,700 --> 00:25:04,980
application but the contents are being

629
00:25:04,980 --> 00:25:07,140
drawn by a different process

630
00:25:07,140 --> 00:25:08,820
if you're a web developer you may be

631
00:25:08,820 --> 00:25:10,620
familiar with iPhones this is kind of

632
00:25:10,620 --> 00:25:12,360
like the same idea

633
00:25:12,360 --> 00:25:14,580
so there's this open and panel open a

634
00:25:14,580 --> 00:25:16,320
safe panel service

635
00:25:16,320 --> 00:25:19,140
which draws the contents and then when

636
00:25:19,140 --> 00:25:21,059
the user selects a file and clicks open

637
00:25:21,059 --> 00:25:23,880
that panel will give temporary access to

638
00:25:23,880 --> 00:25:25,620
that file back to the application so

639
00:25:25,620 --> 00:25:27,179
then the application can read or write

640
00:25:27,179 --> 00:25:29,659
that file

641
00:25:29,940 --> 00:25:31,919
and as it turned out

642
00:25:31,919 --> 00:25:34,919
that open or safe panel was loaning its

643
00:25:34,919 --> 00:25:36,179
saved state

644
00:25:36,179 --> 00:25:38,340
from the same files as the application

645
00:25:38,340 --> 00:25:39,840
itself

646
00:25:39,840 --> 00:25:41,400
it's

647
00:25:41,400 --> 00:25:44,279
I'm guessing that this is because you

648
00:25:44,279 --> 00:25:46,980
might want to resize the panel and then

649
00:25:46,980 --> 00:25:48,360
you might shut down your computer while

650
00:25:48,360 --> 00:25:50,039
the panel was open so it needs to

651
00:25:50,039 --> 00:25:53,360
remember both states of the different

652
00:25:53,360 --> 00:25:56,340
combination of this panel with the

653
00:25:56,340 --> 00:25:57,419
application

654
00:25:57,419 --> 00:26:00,419
but I'm not completely sure of that

655
00:26:00,419 --> 00:26:03,539
so how we could attack this was quite

656
00:26:03,539 --> 00:26:05,100
simple we just write the saved State

657
00:26:05,100 --> 00:26:07,740
into our own applications directory we

658
00:26:07,740 --> 00:26:10,440
trigger the open Panel and then we were

659
00:26:10,440 --> 00:26:12,120
executing code in a known sandbox

660
00:26:12,120 --> 00:26:14,460
process so essentially we have already

661
00:26:14,460 --> 00:26:17,100
escaped the sign box

662
00:26:17,100 --> 00:26:19,380
and this part of the vulnerability was

663
00:26:19,380 --> 00:26:21,000
already fixed earlier than the rest so

664
00:26:21,000 --> 00:26:23,220
this was fixed in 11.3

665
00:26:23,220 --> 00:26:25,799
it was no longer sharing this directory

666
00:26:25,799 --> 00:26:27,840
with the open Panel so it was no longer

667
00:26:27,840 --> 00:26:31,158
possible to do the same thing

668
00:26:31,919 --> 00:26:34,140
in The Next Step was elevating

669
00:26:34,140 --> 00:26:36,720
privileges to root

670
00:26:36,720 --> 00:26:38,880
and for this I applied a trick founded

671
00:26:38,880 --> 00:26:42,840
by somebody else so this was a in the in

672
00:26:42,840 --> 00:26:44,460
all of the logic books for the we

673
00:26:44,460 --> 00:26:47,700
invited by Elias morat

674
00:26:47,700 --> 00:26:49,380
um

675
00:26:49,380 --> 00:26:52,500
there are there's specific entitlements

676
00:26:52,500 --> 00:26:53,600
and

677
00:26:53,600 --> 00:26:55,940
com.apple.private.authorization services

678
00:26:55,940 --> 00:26:58,380
which may contain something like system

679
00:26:58,380 --> 00:27:00,659
install Apple software and what this

680
00:27:00,659 --> 00:27:02,460
entitlement means is that this

681
00:27:02,460 --> 00:27:04,700
application is allowed to install

682
00:27:04,700 --> 00:27:08,220
packages signed by Apple without any

683
00:27:08,220 --> 00:27:10,799
authorization or even any notification

684
00:27:10,799 --> 00:27:13,260
to the user so you can silently install

685
00:27:13,260 --> 00:27:16,440
a new Apple sign package

686
00:27:16,440 --> 00:27:19,080
and then this could be combined with a

687
00:27:19,080 --> 00:27:21,179
specific package and the Mecca's public

688
00:27:21,179 --> 00:27:22,520
data access utility

689
00:27:22,520 --> 00:27:24,179
[Music]

690
00:27:24,179 --> 00:27:26,760
and when this package is installed it

691
00:27:26,760 --> 00:27:28,860
has a post install script so script that

692
00:27:28,860 --> 00:27:30,659
runs after the installation

693
00:27:30,659 --> 00:27:33,059
that tries to run a command from the

694
00:27:33,059 --> 00:27:35,340
disk you install it to

695
00:27:35,340 --> 00:27:37,260
so normally you would install this to

696
00:27:37,260 --> 00:27:38,480
your Mac OS

697
00:27:38,480 --> 00:27:40,620
disk and then it would just run a

698
00:27:40,620 --> 00:27:41,940
command from there

699
00:27:41,940 --> 00:27:44,940
but you can just install it to any disk

700
00:27:44,940 --> 00:27:47,400
currently connected to your Mac so you

701
00:27:47,400 --> 00:27:49,559
can create a new Ram disk or disk image

702
00:27:49,559 --> 00:27:52,020
write the script that you want to run to

703
00:27:52,020 --> 00:27:53,340
that disk

704
00:27:53,340 --> 00:27:55,500
and then when you install this package

705
00:27:55,500 --> 00:27:57,779
to the disk it will run that script

706
00:27:57,779 --> 00:28:00,240
because there was no check that this was

707
00:28:00,240 --> 00:28:02,520
actually a Mac OS install disk you can

708
00:28:02,520 --> 00:28:05,580
just install it to an empty disk image

709
00:28:05,580 --> 00:28:07,380
and also mounting one there so this

710
00:28:07,380 --> 00:28:09,480
images does not require root privileges

711
00:28:09,480 --> 00:28:13,080
so we could Mount the disk ask this USB

712
00:28:13,080 --> 00:28:14,520
service to install this package because

713
00:28:14,520 --> 00:28:17,100
it's signed by Apple this is allowed and

714
00:28:17,100 --> 00:28:19,020
then this post install script runs which

715
00:28:19,020 --> 00:28:21,120
runs with root privileges which means

716
00:28:21,120 --> 00:28:23,640
that we have now elevated privileges to

717
00:28:23,640 --> 00:28:25,940
root

718
00:28:26,340 --> 00:28:29,100
and I finally bypassing the zip file

719
00:28:29,100 --> 00:28:31,879
system restrictions

720
00:28:32,159 --> 00:28:34,380
to do this

721
00:28:34,380 --> 00:28:36,480
I basically wanted to make sure that we

722
00:28:36,480 --> 00:28:37,980
had the full impact of this

723
00:28:37,980 --> 00:28:40,020
vulnerability mapped out

724
00:28:40,020 --> 00:28:41,640
so I looked to all of the applications

725
00:28:41,640 --> 00:28:43,440
that were available that were installed

726
00:28:43,440 --> 00:28:45,539
on Mac OS and that might have an

727
00:28:45,539 --> 00:28:47,520
entitlement that I could use

728
00:28:47,520 --> 00:28:49,260
where they even looked through like the

729
00:28:49,260 --> 00:28:51,480
macros Big Sur beta installation disk

730
00:28:51,480 --> 00:28:52,559
image

731
00:28:52,559 --> 00:28:55,080
and there I noticed this Macos update

732
00:28:55,080 --> 00:28:56,820
assistant application

733
00:28:56,820 --> 00:28:59,640
this is a very powerful entitlement

734
00:28:59,640 --> 00:29:02,640
common.apple.rooter.install.heritable

735
00:29:04,020 --> 00:29:06,659
and this basically means that it can

736
00:29:06,659 --> 00:29:09,620
access any zip protected files

737
00:29:09,620 --> 00:29:13,320
and read or write to them of course the

738
00:29:13,320 --> 00:29:15,059
post-explanation still apply so you

739
00:29:15,059 --> 00:29:17,640
cannot just write to anything but uh

740
00:29:17,640 --> 00:29:20,940
we also elevated a privileges to root

741
00:29:20,940 --> 00:29:22,799
it's also heritable which is a nice

742
00:29:22,799 --> 00:29:24,840
bonus because we can just spawn a

743
00:29:24,840 --> 00:29:26,520
reverse shell we don't need to moderate

744
00:29:26,520 --> 00:29:29,580
python within the process

745
00:29:29,580 --> 00:29:32,399
now what we can do with this

746
00:29:32,399 --> 00:29:34,919
for example we can read the email or the

747
00:29:34,919 --> 00:29:36,779
messages database or the Safari history

748
00:29:36,779 --> 00:29:39,740
of all users

749
00:29:39,840 --> 00:29:42,240
we can grant ourselves permission to use

750
00:29:42,240 --> 00:29:44,580
the webcam or the microphone of the user

751
00:29:44,580 --> 00:29:46,140
without the user have to having to

752
00:29:46,140 --> 00:29:48,299
approve that

753
00:29:48,299 --> 00:29:50,760
you can also persist very well on the

754
00:29:50,760 --> 00:29:52,380
system because we can could write

755
00:29:52,380 --> 00:29:54,000
ourselves to a set protected location

756
00:29:54,000 --> 00:29:56,340
because for example of providing mobile

757
00:29:56,340 --> 00:29:59,100
removal tool and then we we would be

758
00:29:59,100 --> 00:30:01,020
launched when the applications already

759
00:30:01,020 --> 00:30:04,260
next starts and it would be

760
00:30:04,260 --> 00:30:06,059
quite difficult for Apple to remove us

761
00:30:06,059 --> 00:30:08,340
or basically Apple could remove us with

762
00:30:08,340 --> 00:30:11,039
any fire scanners or something like that

763
00:30:11,039 --> 00:30:14,399
would not be able to remove us

764
00:30:14,399 --> 00:30:16,559
and then finally we could also learn the

765
00:30:16,559 --> 00:30:18,600
kernel extension without approval by the

766
00:30:18,600 --> 00:30:21,659
user so normally when you install a new

767
00:30:21,659 --> 00:30:23,460
kernel extension you get this prompt and

768
00:30:23,460 --> 00:30:25,440
it usually really needs to click a

769
00:30:25,440 --> 00:30:27,120
couple of times to approve a new kernel

770
00:30:27,120 --> 00:30:28,260
extension

771
00:30:28,260 --> 00:30:30,360
that we can just ride to the database of

772
00:30:30,360 --> 00:30:33,539
approved kernel extensions and then we

773
00:30:33,539 --> 00:30:35,820
would automatically be loaded

774
00:30:35,820 --> 00:30:38,159
now we still need to have a relatively

775
00:30:38,159 --> 00:30:41,279
signed kernel extension and kernel

776
00:30:41,279 --> 00:30:43,799
extension signing certificates

777
00:30:43,799 --> 00:30:47,460
are pretty hard to get Apple's

778
00:30:47,460 --> 00:30:49,799
deprecating it so it's not very easy to

779
00:30:49,799 --> 00:30:51,960
get one but you might be able to find

780
00:30:51,960 --> 00:30:53,520
the film and welcome or extension in

781
00:30:53,520 --> 00:30:55,140
just any kernel extension at all with

782
00:30:55,140 --> 00:30:57,240
the vulnerability and we could load that

783
00:30:57,240 --> 00:30:58,740
and Export it and then we would have

784
00:30:58,740 --> 00:31:00,539
full kernel Cloud execution

785
00:31:00,539 --> 00:31:03,059
but even without that we would already

786
00:31:03,059 --> 00:31:05,520
have access to all set protected files

787
00:31:05,520 --> 00:31:08,880
so even this up to this point would

788
00:31:08,880 --> 00:31:10,980
already basically have fully copyright

789
00:31:10,980 --> 00:31:13,620
all of the sensitive information on the

790
00:31:13,620 --> 00:31:15,799
system

791
00:31:16,080 --> 00:31:17,820
now I have this video to demonstrate

792
00:31:17,820 --> 00:31:19,500
this attack

793
00:31:19,500 --> 00:31:22,080
and this is on Mac OS 12.3 I think so

794
00:31:22,080 --> 00:31:24,720
sandbox Escape still works and first you

795
00:31:24,720 --> 00:31:27,179
demonstrate that uh application really

796
00:31:27,179 --> 00:31:29,100
is sandboxed

797
00:31:29,100 --> 00:31:30,480
so it goes through the three different

798
00:31:30,480 --> 00:31:32,039
steps here

799
00:31:32,039 --> 00:31:34,380
this one was quite fast privilege

800
00:31:34,380 --> 00:31:35,820
escalation is a little bit slower

801
00:31:35,820 --> 00:31:37,679
because it needs to mount the disk image

802
00:31:37,679 --> 00:31:41,039
and then perform the installation

803
00:31:41,039 --> 00:31:43,140
three to five you see it on the desktop

804
00:31:43,140 --> 00:31:44,880
there might be able to make it a little

805
00:31:44,880 --> 00:31:47,039
bit more subtle but it didn't bother

806
00:31:47,039 --> 00:31:48,299
with that

807
00:31:48,299 --> 00:31:50,880
and then I would sit bypass

808
00:31:50,880 --> 00:31:53,340
should now spawn a shell

809
00:31:53,340 --> 00:31:55,620
as you can see it's a root shell but

810
00:31:55,620 --> 00:31:57,360
also to demonstrate that we have also

811
00:31:57,360 --> 00:31:58,740
bypassed the zip file system

812
00:31:58,740 --> 00:32:00,179
restrictions

813
00:32:00,179 --> 00:32:01,799
and go to the system policy

814
00:32:01,799 --> 00:32:03,899
configuration directory which is where

815
00:32:03,899 --> 00:32:05,460
the approved kernel extensions are

816
00:32:05,460 --> 00:32:08,820
stored so very sensitive directory and

817
00:32:08,820 --> 00:32:10,559
as you can see we can create a new file

818
00:32:10,559 --> 00:32:12,860
here

819
00:32:13,330 --> 00:32:14,640
[Applause]

820
00:32:14,640 --> 00:32:16,790
[Music]

821
00:32:16,790 --> 00:32:21,899
[Applause]

822
00:32:21,899 --> 00:32:26,178
so how was this fixed um

823
00:32:26,220 --> 00:32:28,980
so with that new method I showed that

824
00:32:28,980 --> 00:32:31,380
start Apple

825
00:32:31,380 --> 00:32:33,419
third-party developers can indicate that

826
00:32:33,419 --> 00:32:35,640
their application only supports secure

827
00:32:35,640 --> 00:32:37,640
objects a secure

828
00:32:37,640 --> 00:32:40,860
deserialization for their safe state

829
00:32:40,860 --> 00:32:43,440
Apple has already enabled this for all

830
00:32:43,440 --> 00:32:45,240
of their own applications

831
00:32:45,240 --> 00:32:47,820
at existing applications might want to

832
00:32:47,820 --> 00:32:50,700
store custom objects in their state so

833
00:32:50,700 --> 00:32:52,320
that's why this delicate method was

834
00:32:52,320 --> 00:32:55,679
needed because then that object would

835
00:32:55,679 --> 00:32:57,720
break if Apple enables this for all

836
00:32:57,720 --> 00:33:00,260
applications

837
00:33:00,659 --> 00:33:02,279
um I'm not completely clear if it's

838
00:33:02,279 --> 00:33:04,679
still exploitable if the application

839
00:33:04,679 --> 00:33:07,200
doesn't try to use that feature and I

840
00:33:07,200 --> 00:33:08,480
haven't completely

841
00:33:08,480 --> 00:33:12,360
tested that with the release

842
00:33:12,360 --> 00:33:15,059
this was reported to Apple on December

843
00:33:15,059 --> 00:33:18,000
4th in 2020. and then we fix the sandbox

844
00:33:18,000 --> 00:33:22,440
Escape quite early in 11.3 in April

845
00:33:22,440 --> 00:33:23,820
and then they introduced The Fix

846
00:33:23,820 --> 00:33:25,500
together with the release of macro

847
00:33:25,500 --> 00:33:26,760
Monterey

848
00:33:26,760 --> 00:33:29,760
oh our thoughts up to a week ago that

849
00:33:29,760 --> 00:33:32,340
they didn't export is fixed to Big Sur

850
00:33:32,340 --> 00:33:34,320
and Catalina because it was not

851
00:33:34,320 --> 00:33:36,779
originally in the release notes or in

852
00:33:36,779 --> 00:33:39,240
the security advisories of Apple

853
00:33:39,240 --> 00:33:41,760
but then last week I was composing my

854
00:33:41,760 --> 00:33:44,039
slides I noticed that they added it to

855
00:33:44,039 --> 00:33:47,820
the Catalina release notes in May

856
00:33:47,820 --> 00:33:50,100
so the Catalina release from octo where

857
00:33:50,100 --> 00:33:52,019
they updated it in May to include this

858
00:33:52,019 --> 00:33:53,640
I'll miss that

859
00:33:53,640 --> 00:33:56,460
but in the Big Sur release notes have

860
00:33:56,460 --> 00:33:58,260
not been updated so it's not listed

861
00:33:58,260 --> 00:33:59,760
there

862
00:33:59,760 --> 00:34:02,519
but last week I got a spontaneous email

863
00:34:02,519 --> 00:34:05,340
from Apple that congratulations on your

864
00:34:05,340 --> 00:34:07,799
black hat talk

865
00:34:07,799 --> 00:34:09,659
which would you like to tell us what

866
00:34:09,659 --> 00:34:10,980
you're going to talk about we might be

867
00:34:10,980 --> 00:34:13,020
able to provide feedback so I asked well

868
00:34:13,020 --> 00:34:14,879
did you fix it in these other releases

869
00:34:14,879 --> 00:34:17,339
and then just uh two hours ago or

870
00:34:17,339 --> 00:34:19,139
something like that they

871
00:34:19,139 --> 00:34:21,179
told me that it should be fixed in Big

872
00:34:21,179 --> 00:34:22,199
Sur

873
00:34:22,199 --> 00:34:24,060
that was not enough time for me to

874
00:34:24,060 --> 00:34:27,119
verify this so I don't know

875
00:34:27,119 --> 00:34:30,480
supposedly it is fixed in both older

876
00:34:30,480 --> 00:34:32,839
versions

877
00:34:33,418 --> 00:34:35,399
so to conclude

878
00:34:35,399 --> 00:34:37,500
um Macos has security boundaries between

879
00:34:37,500 --> 00:34:39,540
processes and these are very important

880
00:34:39,540 --> 00:34:41,280
for the security of the system

881
00:34:41,280 --> 00:34:42,780
and each process injection

882
00:34:42,780 --> 00:34:44,940
vulnerabilities can now be used to break

883
00:34:44,940 --> 00:34:47,060
those boundaries

884
00:34:47,060 --> 00:34:50,060
the CFE 2021

885
00:34:50,060 --> 00:34:52,020
3873 was a process injection

886
00:34:52,020 --> 00:34:54,239
filamentability affecting basically all

887
00:34:54,239 --> 00:34:56,699
applications using App kits

888
00:34:56,699 --> 00:34:58,680
and we use this vulnerability to escape

889
00:34:58,680 --> 00:35:01,619
the sandbox Elevate privileges to root

890
00:35:01,619 --> 00:35:03,780
and then bypassing the zip file system

891
00:35:03,780 --> 00:35:06,720
restrictions and it's fixed in October

892
00:35:06,720 --> 00:35:09,480
2021

893
00:35:09,480 --> 00:35:11,940
now some key takeaways here and the

894
00:35:11,940 --> 00:35:13,859
macro security keeps adding more and

895
00:35:13,859 --> 00:35:16,079
more security layers

896
00:35:16,079 --> 00:35:18,619
more and more to defend against attacks

897
00:35:18,619 --> 00:35:20,760
by malware

898
00:35:20,760 --> 00:35:22,740
but adding those new layers to an

899
00:35:22,740 --> 00:35:24,599
established system is quite hard because

900
00:35:24,599 --> 00:35:26,400
there's all of these parts that have

901
00:35:26,400 --> 00:35:28,440
been written before these new security

902
00:35:28,440 --> 00:35:30,000
requirements

903
00:35:30,000 --> 00:35:33,180
and it's really hard to investigate the

904
00:35:33,180 --> 00:35:35,160
entire system anytime anytime you make a

905
00:35:35,160 --> 00:35:36,300
change like this

906
00:35:36,300 --> 00:35:38,339
so this code that was written before

907
00:35:38,339 --> 00:35:40,079
there was any attack service here it's

908
00:35:40,079 --> 00:35:41,700
not certainly a tech service because you

909
00:35:41,700 --> 00:35:44,220
can attack other applications

910
00:35:44,220 --> 00:35:45,960
and also an important point there I

911
00:35:45,960 --> 00:35:47,880
think is that the effort of attackers

912
00:35:47,880 --> 00:35:49,920
may not increase if you add more layers

913
00:35:49,920 --> 00:35:52,560
if you can just use the same bug to

914
00:35:52,560 --> 00:35:54,839
bypass all of those layers or you might

915
00:35:54,839 --> 00:35:56,579
be able to find a trick to skip certain

916
00:35:56,579 --> 00:35:59,060
layers

917
00:35:59,579 --> 00:36:02,160
finally have some references for yeah

918
00:36:02,160 --> 00:36:05,760
other stuff that I used for this talk

919
00:36:05,760 --> 00:36:08,460
um Apple's documentation and divide up

920
00:36:08,460 --> 00:36:10,200
from

921
00:36:10,200 --> 00:36:12,780
Elias morat for example

922
00:36:12,780 --> 00:36:15,180
now if you want to read more about this

923
00:36:15,180 --> 00:36:17,040
we will publish a write-up of this

924
00:36:17,040 --> 00:36:18,660
vulnerability with a lot more technical

925
00:36:18,660 --> 00:36:20,339
details sometime in the next couple

926
00:36:20,339 --> 00:36:22,020
couple of days

927
00:36:22,020 --> 00:36:24,079
but if you have any questions now then

928
00:36:24,079 --> 00:36:26,950
please let me know

929
00:36:26,950 --> 00:36:30,060
[Music]

930
00:36:33,900 --> 00:36:37,010
[Music]

