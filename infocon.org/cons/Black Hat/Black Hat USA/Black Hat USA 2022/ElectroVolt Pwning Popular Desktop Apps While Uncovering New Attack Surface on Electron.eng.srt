1
00:00:01,730 --> 00:00:03,720
[Music]

2
00:00:03,720 --> 00:00:06,720
foreign

3
00:00:11,000 --> 00:00:14,660
and Max Garrett

4
00:00:20,039 --> 00:00:21,740
good morning everyone

5
00:00:21,740 --> 00:00:23,939
and thank you for coming to our

6
00:00:23,939 --> 00:00:25,439
presentation

7
00:00:25,439 --> 00:00:27,960
let me ask you this have you ever

8
00:00:27,960 --> 00:00:31,019
wondered how secure it is to open a

9
00:00:31,019 --> 00:00:33,899
message within the desktop app you use

10
00:00:33,899 --> 00:00:36,719
to chat with your colleagues at work

11
00:00:36,719 --> 00:00:39,480
have you ever thought how secure it is

12
00:00:39,480 --> 00:00:42,120
to open a source code which you just

13
00:00:42,120 --> 00:00:44,640
downloaded from the internet within your

14
00:00:44,640 --> 00:00:46,620
favorite source code editor

15
00:00:46,620 --> 00:00:49,200
what do this electron based desktop

16
00:00:49,200 --> 00:00:51,899
applications have in common and how

17
00:00:51,899 --> 00:00:54,300
fundamentally secure are they

18
00:00:54,300 --> 00:00:57,300
before the year we set out to find an

19
00:00:57,300 --> 00:01:00,120
exact answer to discover what alerts

20
00:01:00,120 --> 00:01:02,579
beneath electron applications and

21
00:01:02,579 --> 00:01:04,680
throughout the course of one year of our

22
00:01:04,680 --> 00:01:07,439
research we were able to compromise

23
00:01:07,439 --> 00:01:10,500
multiple iconic applications used by

24
00:01:10,500 --> 00:01:13,080
millions of people and were able to find

25
00:01:13,080 --> 00:01:15,299
and hidden attack surface within

26
00:01:15,299 --> 00:01:18,720
electron hereby I welcome everyone today

27
00:01:18,720 --> 00:01:21,420
to Electro volt where we will take you

28
00:01:21,420 --> 00:01:24,000
on a journey to pawn popular desktop

29
00:01:24,000 --> 00:01:26,460
applications while uncovering new attack

30
00:01:26,460 --> 00:01:28,259
surface on electron

31
00:01:28,259 --> 00:01:30,780
so the agenda for our talk today is I

32
00:01:30,780 --> 00:01:32,520
will go through the basics of electron

33
00:01:32,520 --> 00:01:35,220
and its security settings then we will

34
00:01:35,220 --> 00:01:37,259
hack some real world commonly used

35
00:01:37,259 --> 00:01:40,020
desktop applications starting from the

36
00:01:40,020 --> 00:01:41,520
least restrictive to the most

37
00:01:41,520 --> 00:01:44,759
restrictive security settings and then I

38
00:01:44,759 --> 00:01:46,740
will present the novel attack Vector we

39
00:01:46,740 --> 00:01:48,720
discovered within electron JS framework

40
00:01:48,720 --> 00:01:51,180
and at the end we will talk about the

41
00:01:51,180 --> 00:01:53,759
mitigations so let's get started

42
00:01:53,759 --> 00:01:55,560
so who are we

43
00:01:55,560 --> 00:01:59,159
um I'm Aditya purani AKA knapstack I'm a

44
00:01:59,159 --> 00:02:01,140
senior security engineer at a leading

45
00:02:01,140 --> 00:02:02,700
automotive company

46
00:02:02,700 --> 00:02:06,060
my main area of expertise are appsec and

47
00:02:06,060 --> 00:02:08,699
blockchain and on the weekends I play

48
00:02:08,699 --> 00:02:11,879
ctfs with perfect blue joining me today

49
00:02:11,879 --> 00:02:15,480
is my colleague Max who is a security

50
00:02:15,480 --> 00:02:18,900
researcher at asset node Max area of

51
00:02:18,900 --> 00:02:22,020
expertise are app second blockchain and

52
00:02:22,020 --> 00:02:25,379
he plays ctfs with water Peddler

53
00:02:25,379 --> 00:02:27,480
so what is electron

54
00:02:27,480 --> 00:02:30,239
if you can build a website then you can

55
00:02:30,239 --> 00:02:32,879
build a desktop application that's the

56
00:02:32,879 --> 00:02:36,239
main concept behind electron so electron

57
00:02:36,239 --> 00:02:39,239
is a popular open source framework which

58
00:02:39,239 --> 00:02:42,660
is used by many commonly used apps such

59
00:02:42,660 --> 00:02:46,140
as Microsoft teams Discord slack and

60
00:02:46,140 --> 00:02:47,060
other

61
00:02:47,060 --> 00:02:50,099
fundamentally electron is built on top

62
00:02:50,099 --> 00:02:53,760
of chromium and node.js which means that

63
00:02:53,760 --> 00:02:57,120
by just using JavaScript HTML and CSS

64
00:02:57,120 --> 00:03:00,660
you can ship an entirely cross-platform

65
00:03:00,660 --> 00:03:03,180
native desktop application

66
00:03:03,180 --> 00:03:05,459
before diving into the bugs it is

67
00:03:05,459 --> 00:03:07,800
important to understand the architecture

68
00:03:07,800 --> 00:03:09,000
of electron

69
00:03:09,000 --> 00:03:11,400
within electron there are two types of

70
00:03:11,400 --> 00:03:14,099
process the first one is the main

71
00:03:14,099 --> 00:03:16,920
process and the second one is a renderer

72
00:03:16,920 --> 00:03:17,940
process

73
00:03:17,940 --> 00:03:21,000
main process is the starting point of

74
00:03:21,000 --> 00:03:22,980
all the electron applications

75
00:03:22,980 --> 00:03:25,560
main process can create multiple

76
00:03:25,560 --> 00:03:28,260
renderer process using a class called

77
00:03:28,260 --> 00:03:29,760
browser window

78
00:03:29,760 --> 00:03:33,420
it also has access to Native GUI apis to

79
00:03:33,420 --> 00:03:36,780
create objects like menu and tray

80
00:03:36,780 --> 00:03:39,180
and it is important to note that there

81
00:03:39,180 --> 00:03:41,580
can be only one main process

82
00:03:41,580 --> 00:03:43,799
on the other hand we can have multiple

83
00:03:43,799 --> 00:03:46,560
renderer process and the main function

84
00:03:46,560 --> 00:03:49,680
of a renderer process is to render a web

85
00:03:49,680 --> 00:03:52,379
page using chromium

86
00:03:52,379 --> 00:03:55,860
so uh as chromium is used a lot of

87
00:03:55,860 --> 00:03:58,379
chromium related features are used such

88
00:03:58,379 --> 00:04:01,260
as Chrome site isolation multiple

89
00:04:01,260 --> 00:04:02,640
process

90
00:04:02,640 --> 00:04:03,480
Etc

91
00:04:03,480 --> 00:04:05,519
the way the main process and rendered

92
00:04:05,519 --> 00:04:08,340
process talks with each other is through

93
00:04:08,340 --> 00:04:10,980
something known as IPC or inter-process

94
00:04:10,980 --> 00:04:13,319
communication module

95
00:04:13,319 --> 00:04:16,560
and you can also apply a lot of security

96
00:04:16,560 --> 00:04:18,298
settings within the browser window

97
00:04:18,298 --> 00:04:21,418
configuration within a flag known as web

98
00:04:21,418 --> 00:04:22,500
reference

99
00:04:22,500 --> 00:04:25,560
so that way you can control what type of

100
00:04:25,560 --> 00:04:28,020
rendered process you want the least

101
00:04:28,020 --> 00:04:30,240
restrictive you are the more vulnerable

102
00:04:30,240 --> 00:04:31,500
you are

103
00:04:31,500 --> 00:04:33,360
so let's see how it looks in the code to

104
00:04:33,360 --> 00:04:35,220
get a bit idea about that

105
00:04:35,220 --> 00:04:38,120
so here we have a file known as main.js

106
00:04:38,120 --> 00:04:41,759
it sets up a browser window and within

107
00:04:41,759 --> 00:04:43,919
the web preferences it lists down couple

108
00:04:43,919 --> 00:04:46,380
of security settings which it sets true

109
00:04:46,380 --> 00:04:49,680
or false then it loads a URL which is

110
00:04:49,680 --> 00:04:51,240
the web page you want to load which is

111
00:04:51,240 --> 00:04:53,639
google.com in this case and then it

112
00:04:53,639 --> 00:04:56,040
defines an IPC main which is like an

113
00:04:56,040 --> 00:04:59,160
event listener to listen for IPC call in

114
00:04:59,160 --> 00:05:01,199
this case it's open URL

115
00:05:01,199 --> 00:05:02,940
on the other side on the rendered

116
00:05:02,940 --> 00:05:05,759
process it is divided into two parts the

117
00:05:05,759 --> 00:05:08,880
first one is preload.js and preload

118
00:05:08,880 --> 00:05:11,400
script contains code that is loaded

119
00:05:11,400 --> 00:05:13,380
prior to the web page

120
00:05:13,380 --> 00:05:15,720
so preload script run within the

121
00:05:15,720 --> 00:05:18,840
renderer context but are granted more

122
00:05:18,840 --> 00:05:22,259
privileges by having access to electron

123
00:05:22,259 --> 00:05:24,780
or node.js API

124
00:05:24,780 --> 00:05:27,300
context Bridge which you see in the

125
00:05:27,300 --> 00:05:30,300
slide is a way to safely expose an API

126
00:05:30,300 --> 00:05:32,220
to the web page which could be later

127
00:05:32,220 --> 00:05:34,500
invoked using a window object

128
00:05:34,500 --> 00:05:36,600
so here we have a web page which is

129
00:05:36,600 --> 00:05:39,919
hello world and the web page uses the

130
00:05:39,919 --> 00:05:41,900
window.electron.openurl and Supply

131
00:05:41,900 --> 00:05:44,820
argument to pass it to the IPC

132
00:05:44,820 --> 00:05:47,520
main.eventlistener

133
00:05:47,520 --> 00:05:51,300
so as we can see here uh you can put

134
00:05:51,300 --> 00:05:53,580
whatever security features you want to

135
00:05:53,580 --> 00:05:55,560
get whatever render whatever process you

136
00:05:55,560 --> 00:05:58,759
want So at the least secure you are

137
00:05:58,759 --> 00:06:00,900
whenever you use like something like

138
00:06:00,900 --> 00:06:03,300
sandbox is equal to false context

139
00:06:03,300 --> 00:06:05,460
isolation is equal to false and node

140
00:06:05,460 --> 00:06:08,039
integration is true because in this case

141
00:06:08,039 --> 00:06:10,440
the web page has directly accessed to

142
00:06:10,440 --> 00:06:13,979
the node Primitives and in this case xss

143
00:06:13,979 --> 00:06:17,160
is equals to RC because someone can just

144
00:06:17,160 --> 00:06:20,460
do a required child process and exact uh

145
00:06:20,460 --> 00:06:22,620
whatever shell commands they want to do

146
00:06:22,620 --> 00:06:24,539
electron developers also thought about

147
00:06:24,539 --> 00:06:26,460
this and they came up with something

148
00:06:26,460 --> 00:06:29,699
known as context isolation so as you can

149
00:06:29,699 --> 00:06:31,800
see in this slide in the renderer

150
00:06:31,800 --> 00:06:33,900
process uh now we have two separate

151
00:06:33,900 --> 00:06:36,060
contexts the first one is the

152
00:06:36,060 --> 00:06:38,100
application context where the

153
00:06:38,100 --> 00:06:40,560
application JavaScript runs and the

154
00:06:40,560 --> 00:06:43,199
second one is an isolated context and

155
00:06:43,199 --> 00:06:45,479
within this isolated context the

156
00:06:45,479 --> 00:06:48,120
preload.js which we saw earlier and

157
00:06:48,120 --> 00:06:50,759
electrons internal code would run so it

158
00:06:50,759 --> 00:06:52,919
is completely isolated and the web page

159
00:06:52,919 --> 00:06:55,860
now doesn't have direct access to node

160
00:06:55,860 --> 00:06:58,020
Primitives so this is the same concept

161
00:06:58,020 --> 00:07:00,600
we use in Chrome as well in Chrome it is

162
00:07:00,600 --> 00:07:02,520
called isolated world where the

163
00:07:02,520 --> 00:07:05,880
extensions content script JavaScript is

164
00:07:05,880 --> 00:07:08,100
different from a web page JavaScript so

165
00:07:08,100 --> 00:07:10,440
there is a isolation here

166
00:07:10,440 --> 00:07:13,139
so throughout our talk the attack

167
00:07:13,139 --> 00:07:16,319
surface is the renderer process so we

168
00:07:16,319 --> 00:07:18,300
will be starting by abusing the least

169
00:07:18,300 --> 00:07:21,180
restrictive electron configuration and

170
00:07:21,180 --> 00:07:24,419
then move on to the complex exploits

171
00:07:24,419 --> 00:07:27,300
so to keep the slides clean let's keep

172
00:07:27,300 --> 00:07:30,360
in mind the following terminology so we

173
00:07:30,360 --> 00:07:32,460
have node integration context isolation

174
00:07:32,460 --> 00:07:35,280
and sandbox and don't worry about the

175
00:07:35,280 --> 00:07:37,139
node integration in workers or node

176
00:07:37,139 --> 00:07:39,419
integration in subframes yet because I

177
00:07:39,419 --> 00:07:40,919
haven't talked about it but we'll talk

178
00:07:40,919 --> 00:07:42,660
in the coming slides

179
00:07:42,660 --> 00:07:45,060
so the first situation

180
00:07:45,060 --> 00:07:47,280
um node integration is true context

181
00:07:47,280 --> 00:07:50,099
isolation is false and sandbox is false

182
00:07:50,099 --> 00:07:53,819
this is s insecure it can get so it is

183
00:07:53,819 --> 00:07:56,160
really easy to get a shell as node is

184
00:07:56,160 --> 00:07:58,440
directly exposed to the renderer

185
00:07:58,440 --> 00:08:00,300
the only thing you need to do as an

186
00:08:00,300 --> 00:08:03,599
attacker is to find a way to embed a job

187
00:08:03,599 --> 00:08:06,120
a job within the webview

188
00:08:06,120 --> 00:08:09,060
So within the diagram the circle marked

189
00:08:09,060 --> 00:08:11,639
as red is where we are targeting

190
00:08:11,639 --> 00:08:13,139
currently

191
00:08:13,139 --> 00:08:14,940
so I am going to present one of the case

192
00:08:14,940 --> 00:08:16,979
study which we found in a real world

193
00:08:16,979 --> 00:08:19,800
commonly used application known as a vs

194
00:08:19,800 --> 00:08:20,520
code

195
00:08:20,520 --> 00:08:23,699
so vs code is a source code editor where

196
00:08:23,699 --> 00:08:25,440
you can open a project and you can

197
00:08:25,440 --> 00:08:27,360
navigate and browse through the source

198
00:08:27,360 --> 00:08:30,780
code so we escort had a feature where it

199
00:08:30,780 --> 00:08:33,320
asks before the opening source code that

200
00:08:33,320 --> 00:08:36,240
do you want to open it in a restricted

201
00:08:36,240 --> 00:08:38,940
mode or do you want to not open it in a

202
00:08:38,940 --> 00:08:42,059
restricted mode so as a part of our this

203
00:08:42,059 --> 00:08:44,399
use case we found a way to perform a

204
00:08:44,399 --> 00:08:47,040
remote code execution in vs code in the

205
00:08:47,040 --> 00:08:50,040
restricted mode and so as a part of our

206
00:08:50,040 --> 00:08:53,399
attack Vector we had a limited xss and

207
00:08:53,399 --> 00:08:55,080
we turned into a remote code execution

208
00:08:55,080 --> 00:08:58,080
chain let's see how it works so this is

209
00:08:58,080 --> 00:09:00,720
like a pretty uh large schematic of how

210
00:09:00,720 --> 00:09:03,360
the exploit looks like so we have three

211
00:09:03,360 --> 00:09:05,459
frames here which are marked by the

212
00:09:05,459 --> 00:09:08,940
square symbols so the one which is in

213
00:09:08,940 --> 00:09:11,880
green is running with the most strict

214
00:09:11,880 --> 00:09:14,339
electron setting whereas the one in the

215
00:09:14,339 --> 00:09:16,920
red is the one which we just talk about

216
00:09:16,920 --> 00:09:19,620
where node integration is true so as an

217
00:09:19,620 --> 00:09:22,500
attacker you have an exercise on the

218
00:09:22,500 --> 00:09:25,320
markdown previewer which is running in a

219
00:09:25,320 --> 00:09:28,019
very restricted context and the goal is

220
00:09:28,019 --> 00:09:30,360
to move from that green to Red somehow

221
00:09:30,360 --> 00:09:33,060
and let's look at how we can do that so

222
00:09:33,060 --> 00:09:35,160
first of all let's say if you open a

223
00:09:35,160 --> 00:09:38,519
markdown like phone dot MD s this is

224
00:09:38,519 --> 00:09:41,880
subject to a strict CSP policy what you

225
00:09:41,880 --> 00:09:43,620
would do is you would perform a meta

226
00:09:43,620 --> 00:09:46,920
redirect to an external website and once

227
00:09:46,920 --> 00:09:48,600
you are on the external website you can

228
00:09:48,600 --> 00:09:51,240
run any JavaScript you want so once we

229
00:09:51,240 --> 00:09:53,160
had this exercise on step number one

230
00:09:53,160 --> 00:09:56,820
what we do is we leak the extension ID

231
00:09:56,820 --> 00:09:59,279
of vs code as you know you can install

232
00:09:59,279 --> 00:10:02,399
extension in vs code and those IDs are a

233
00:10:02,399 --> 00:10:03,839
pretty long string which you cannot

234
00:10:03,839 --> 00:10:04,620
guess

235
00:10:04,620 --> 00:10:07,500
so once we leaked that extension ID we

236
00:10:07,500 --> 00:10:10,920
found an xss on one of the other window

237
00:10:10,920 --> 00:10:13,920
which is vs code webview and what we did

238
00:10:13,920 --> 00:10:16,560
is we found a way to perform a post

239
00:10:16,560 --> 00:10:19,800
message call to that particular frame so

240
00:10:19,800 --> 00:10:23,040
in this case we deploy our xss using a

241
00:10:23,040 --> 00:10:26,459
post message on vs code webview and then

242
00:10:26,459 --> 00:10:29,700
we deploy another another xss on the

243
00:10:29,700 --> 00:10:33,120
same webview to perform a channeled do

244
00:10:33,120 --> 00:10:35,580
read which will leak a current directory

245
00:10:35,580 --> 00:10:38,580
where the project is downloaded on the

246
00:10:38,580 --> 00:10:41,760
victims machine through vs code file so

247
00:10:41,760 --> 00:10:44,820
vscore file is a file is similar to a

248
00:10:44,820 --> 00:10:47,399
file protocol but the catch here is you

249
00:10:47,399 --> 00:10:50,100
can invoke it uh on from a different

250
00:10:50,100 --> 00:10:53,279
origin not from the same origin so once

251
00:10:53,279 --> 00:10:55,620
we leak the directory what we do is we

252
00:10:55,620 --> 00:10:58,019
perform a part reversal on the vs code

253
00:10:58,019 --> 00:11:00,000
file by doing dot dot slash dot dot

254
00:11:00,000 --> 00:11:02,640
slash the path to an HTML file within

255
00:11:02,640 --> 00:11:05,760
our project and this HTML file what you

256
00:11:05,760 --> 00:11:08,279
can do is you can record you can do top

257
00:11:08,279 --> 00:11:10,200
dot require to get access to node

258
00:11:10,200 --> 00:11:13,320
Primitives and pop a shell so let's see

259
00:11:13,320 --> 00:11:15,720
how this looks in the demo so our victim

260
00:11:15,720 --> 00:11:17,399
has opened a project in a restricted

261
00:11:17,399 --> 00:11:21,980
mode and they will navigate a file

262
00:11:24,300 --> 00:11:26,519
and as you can see we have popped the

263
00:11:26,519 --> 00:11:30,660
calc in vs vs code which is the remote

264
00:11:30,660 --> 00:11:33,740
code execution part

265
00:11:34,800 --> 00:11:37,500
so we received 6000 dollar Bounty for

266
00:11:37,500 --> 00:11:40,019
this remote code execution bug in vs

267
00:11:40,019 --> 00:11:41,399
code

268
00:11:41,399 --> 00:11:44,040
we had a really a prompt and Swift

269
00:11:44,040 --> 00:11:46,200
response from the Microsoft team for

270
00:11:46,200 --> 00:11:47,579
this

271
00:11:47,579 --> 00:11:49,560
let's move on to the second case study

272
00:11:49,560 --> 00:11:52,320
in this case let's increase the level of

273
00:11:52,320 --> 00:11:55,560
restrictiveness a bit so we turn on the

274
00:11:55,560 --> 00:11:57,060
feature which is called context

275
00:11:57,060 --> 00:11:59,700
isolation to True which was false in the

276
00:11:59,700 --> 00:12:02,040
previous scenario and if context

277
00:12:02,040 --> 00:12:04,800
isolation is enabled the node is not

278
00:12:04,800 --> 00:12:06,839
directly available to the renderer so

279
00:12:06,839 --> 00:12:08,519
you just cannot do required child

280
00:12:08,519 --> 00:12:10,800
process and phone a shell

281
00:12:10,800 --> 00:12:13,380
so there are two ways to exploit this

282
00:12:13,380 --> 00:12:15,839
um first one is you can use a chrome V8

283
00:12:15,839 --> 00:12:18,360
renderer exploit because sandbox is

284
00:12:18,360 --> 00:12:21,720
disabled so you can go to like a CR bug

285
00:12:21,720 --> 00:12:24,540
and look for a crash POC and get your

286
00:12:24,540 --> 00:12:27,959
own end or you can try to find a way to

287
00:12:27,959 --> 00:12:29,940
disable the context isolation somehow

288
00:12:29,940 --> 00:12:31,620
which we'll be talking in the coming

289
00:12:31,620 --> 00:12:32,700
slides

290
00:12:32,700 --> 00:12:35,579
so in the schematic let's go again so we

291
00:12:35,579 --> 00:12:38,160
have an xss on the application layer and

292
00:12:38,160 --> 00:12:40,620
this time there is an isolation between

293
00:12:40,620 --> 00:12:43,320
where the node and electron API decides

294
00:12:43,320 --> 00:12:46,200
so the previous attack won't work here

295
00:12:46,200 --> 00:12:48,839
so the second case study we have is a

296
00:12:48,839 --> 00:12:50,940
remote code execution on Discord

297
00:12:50,940 --> 00:12:53,820
which is a commonly used application we

298
00:12:53,820 --> 00:12:55,800
found that Discord was using an older

299
00:12:55,800 --> 00:12:59,519
version of electron which was 12.14.1

300
00:12:59,519 --> 00:13:02,459
and this means that it is also using

301
00:13:02,459 --> 00:13:04,980
an older version of Chrome indirectly

302
00:13:04,980 --> 00:13:06,839
which is 83.

303
00:13:06,839 --> 00:13:08,399
so when we were looking for attack

304
00:13:08,399 --> 00:13:10,740
surface in Discord the most interesting

305
00:13:10,740 --> 00:13:13,680
one was a video embed so let's say if

306
00:13:13,680 --> 00:13:16,200
you send a message to a vid team on

307
00:13:16,200 --> 00:13:18,240
Discord with a YouTube link you will see

308
00:13:18,240 --> 00:13:20,940
that the video will get expanded and or

309
00:13:20,940 --> 00:13:23,700
someone can click on it so we found an

310
00:13:23,700 --> 00:13:26,579
exercise on one of the third party embed

311
00:13:26,579 --> 00:13:30,480
which is Vimeo and we use that to get

312
00:13:30,480 --> 00:13:32,820
our initial JavaScript execution on

313
00:13:32,820 --> 00:13:33,720
Discord

314
00:13:33,720 --> 00:13:36,420
but the catch here is whenever

315
00:13:36,420 --> 00:13:39,300
um there is an iframe in electron based

316
00:13:39,300 --> 00:13:42,360
application it is sandbox by default so

317
00:13:42,360 --> 00:13:44,459
we cannot just simply run like a render

318
00:13:44,459 --> 00:13:48,120
or exploit of chrome 83 and get an RC so

319
00:13:48,120 --> 00:13:50,279
we dig down deep in the Discord and what

320
00:13:50,279 --> 00:13:52,320
we found that we found a

321
00:13:52,320 --> 00:13:55,200
misconfiguration in a new window file

322
00:13:55,200 --> 00:13:57,600
Handler which can be used to open a new

323
00:13:57,600 --> 00:14:00,839
window using window.open and this new

324
00:14:00,839 --> 00:14:03,959
window had a Sandbox disabled so what

325
00:14:03,959 --> 00:14:06,060
you can do is you can open a window with

326
00:14:06,060 --> 00:14:07,800
a location of an external website

327
00:14:07,800 --> 00:14:10,260
controlled by you and then you can run

328
00:14:10,260 --> 00:14:12,420
your Chrome V8 renderer exploit to get

329
00:14:12,420 --> 00:14:16,519
RC let's see the demo

330
00:14:17,519 --> 00:14:21,060
so attacker is sending a video link to

331
00:14:21,060 --> 00:14:22,260
the victim

332
00:14:22,260 --> 00:14:25,980
victim will go and press on it

333
00:14:25,980 --> 00:14:27,899
and as you can see this is the new

334
00:14:27,899 --> 00:14:29,220
window which I talked which is without

335
00:14:29,220 --> 00:14:31,560
sandbox and you can pop a calc on

336
00:14:31,560 --> 00:14:32,820
Discord

337
00:14:32,820 --> 00:14:36,120
and this can be done improvised by just

338
00:14:36,120 --> 00:14:37,740
putting stylesheet to make it more

339
00:14:37,740 --> 00:14:40,019
lucrative and conduct social engineering

340
00:14:40,019 --> 00:14:42,300
attacks

341
00:14:42,300 --> 00:14:44,100
so we received five thousand dollar

342
00:14:44,100 --> 00:14:47,220
Bounty from Discord and Discord fixed it

343
00:14:47,220 --> 00:14:49,139
by upgrading to the latest electron

344
00:14:49,139 --> 00:14:51,740
version and fix this new window

345
00:14:51,740 --> 00:14:55,260
misconfiguration by limiting uh to not

346
00:14:55,260 --> 00:14:58,260
have redirection to external website and

347
00:14:58,260 --> 00:15:00,000
most of you already know about this

348
00:15:00,000 --> 00:15:02,220
attack it's common knowledge to use a V8

349
00:15:02,220 --> 00:15:04,260
exploit when sandbox is visible in

350
00:15:04,260 --> 00:15:06,540
electron app but what I'm showing you is

351
00:15:06,540 --> 00:15:08,339
it is really common in real world

352
00:15:08,339 --> 00:15:10,440
applications to have this sort of

353
00:15:10,440 --> 00:15:12,360
misconfigurations

354
00:15:12,360 --> 00:15:15,180
let's go one step further in this case

355
00:15:15,180 --> 00:15:17,820
we turn sandbox to true but now we have

356
00:15:17,820 --> 00:15:19,920
context isolation to false which was

357
00:15:19,920 --> 00:15:21,180
true earlier

358
00:15:21,180 --> 00:15:24,120
so s sandbox is enabled on renderer we

359
00:15:24,120 --> 00:15:26,459
cannot directly run like a chrome and

360
00:15:26,459 --> 00:15:29,760
exploit to get RC because this time SEC

361
00:15:29,760 --> 00:15:33,120
comp or win32k lockdown will stop us by

362
00:15:33,120 --> 00:15:35,339
blocking bad sys calls

363
00:15:35,339 --> 00:15:38,459
as node integration is false no node

364
00:15:38,459 --> 00:15:40,380
modules are exposed to the renderer so

365
00:15:40,380 --> 00:15:41,940
you cannot do the trick in the first

366
00:15:41,940 --> 00:15:44,339
slide which I mentioned but now the

367
00:15:44,339 --> 00:15:46,560
catch here is there is no ISO between

368
00:15:46,560 --> 00:15:49,019
the website you load and electrons

369
00:15:49,019 --> 00:15:51,600
internal code or preload code

370
00:15:51,600 --> 00:15:53,940
in the diagram now you can see we had

371
00:15:53,940 --> 00:15:56,279
two isolated contexts before but now

372
00:15:56,279 --> 00:15:58,079
there's this one block which runs

373
00:15:58,079 --> 00:16:00,660
electrons internal code your application

374
00:16:00,660 --> 00:16:04,260
and the preload so electrons internal

375
00:16:04,260 --> 00:16:07,199
code is written in JavaScript as well so

376
00:16:07,199 --> 00:16:09,720
what can you do with an exercise can you

377
00:16:09,720 --> 00:16:11,399
do something like prototype pollution to

378
00:16:11,399 --> 00:16:13,920
overwrite electrons internal code let's

379
00:16:13,920 --> 00:16:17,519
see so how to get special so if the

380
00:16:17,519 --> 00:16:19,980
version of electron app is less than 10

381
00:16:19,980 --> 00:16:22,139
then you can use prototype pollution

382
00:16:22,139 --> 00:16:25,740
Gadget to leak a remote module or IPC

383
00:16:25,740 --> 00:16:28,260
module so remote module according to

384
00:16:28,260 --> 00:16:30,899
electron documentation is a module which

385
00:16:30,899 --> 00:16:33,420
is used to bridge JavaScript objects

386
00:16:33,420 --> 00:16:35,880
from the main process to the renderer

387
00:16:35,880 --> 00:16:38,279
process so once you have access to

388
00:16:38,279 --> 00:16:41,040
remote module even in a sandbox window

389
00:16:41,040 --> 00:16:43,920
it is Trivial to get access to node

390
00:16:43,920 --> 00:16:45,959
Primitives using it

391
00:16:45,959 --> 00:16:48,779
for electron version 10 to 14 electron

392
00:16:48,779 --> 00:16:50,940
developers thought about this and they

393
00:16:50,940 --> 00:16:53,459
disabled remote by default so they

394
00:16:53,459 --> 00:16:56,519
toggled the true to false so you can

395
00:16:56,519 --> 00:16:58,139
still try to leak the remote if

396
00:16:58,139 --> 00:17:00,560
application developer has enabled it

397
00:17:00,560 --> 00:17:03,360
explicitly or you can find an IPC

398
00:17:03,360 --> 00:17:05,099
misconfiguration

399
00:17:05,099 --> 00:17:07,199
for electron version greater than 14

400
00:17:07,199 --> 00:17:09,000
which are like the newer electron

401
00:17:09,000 --> 00:17:11,520
version remote is completely deprecated

402
00:17:11,520 --> 00:17:13,980
due to this security concern of how it

403
00:17:13,980 --> 00:17:15,780
can allow you to give node Primitives on

404
00:17:15,780 --> 00:17:17,459
a Sandbox window

405
00:17:17,459 --> 00:17:19,439
so you can still use a prototype

406
00:17:19,439 --> 00:17:22,799
pollution Gadget to leak IPC module but

407
00:17:22,799 --> 00:17:24,959
in this case what you can do is after

408
00:17:24,959 --> 00:17:27,299
leaking this IPC module you need to find

409
00:17:27,299 --> 00:17:30,840
misconfigured IPC within the web app or

410
00:17:30,840 --> 00:17:33,419
within electrons internal code

411
00:17:33,419 --> 00:17:36,360
so what I'm showing you here is a novel

412
00:17:36,360 --> 00:17:39,000
prototype pollution Gadget we discovered

413
00:17:39,000 --> 00:17:40,860
on a late test electron version

414
00:17:40,860 --> 00:17:43,020
and this concept of prototype pollution

415
00:17:43,020 --> 00:17:45,900
is not unknown it was first presented in

416
00:17:45,900 --> 00:17:48,660
2018 by masato kinugaba on an older

417
00:17:48,660 --> 00:17:50,880
electron version but this is something

418
00:17:50,880 --> 00:17:52,740
which which works even on the latest

419
00:17:52,740 --> 00:17:55,440
version so as you can see we overwrite

420
00:17:55,440 --> 00:17:57,419
certain inbuilt JavaScript function

421
00:17:57,419 --> 00:18:00,780
which is call and ends with and then we

422
00:18:00,780 --> 00:18:03,059
on the number three we get access to

423
00:18:03,059 --> 00:18:06,600
webpack require which contains all these

424
00:18:06,600 --> 00:18:09,059
modules which we want to use to get RC

425
00:18:09,059 --> 00:18:10,860
on your favorite apps

426
00:18:10,860 --> 00:18:13,559
so for the situation like this where

427
00:18:13,559 --> 00:18:16,020
sandbox is false you may be wondering

428
00:18:16,020 --> 00:18:18,660
you can just run a renderer exploit but

429
00:18:18,660 --> 00:18:21,720
you can leak this webpack requires using

430
00:18:21,720 --> 00:18:23,760
prototype pollution and also get access

431
00:18:23,760 --> 00:18:26,580
to like node Primitives or electron

432
00:18:26,580 --> 00:18:30,480
common API to pop your kelp and you may

433
00:18:30,480 --> 00:18:32,280
be wondering why to use this and not a

434
00:18:32,280 --> 00:18:35,160
V8 exploit and the reason is this is

435
00:18:35,160 --> 00:18:37,140
much more reliable compared to a V8

436
00:18:37,140 --> 00:18:39,720
exploit for example a second reason is

437
00:18:39,720 --> 00:18:41,580
that you don't require binary

438
00:18:41,580 --> 00:18:43,320
exploitation knowledge in order to

439
00:18:43,320 --> 00:18:45,360
perform this attack it's a complete web

440
00:18:45,360 --> 00:18:48,360
attack and the third reason is what if

441
00:18:48,360 --> 00:18:49,679
the application you are targeting

442
00:18:49,679 --> 00:18:52,020
doesn't have a chrome end in the first

443
00:18:52,020 --> 00:18:54,780
place then you need to be creative and

444
00:18:54,780 --> 00:18:57,000
use something else

445
00:18:57,000 --> 00:18:59,760
so for an example where sandbox is true

446
00:18:59,760 --> 00:19:01,799
you cannot get access to the node

447
00:19:01,799 --> 00:19:02,940
Primitives

448
00:19:02,940 --> 00:19:05,600
but what you can do is you can leak

449
00:19:05,600 --> 00:19:08,940
electrons IPC binding so you can leak

450
00:19:08,940 --> 00:19:11,520
two ipcs which is IPC rendered internal

451
00:19:11,520 --> 00:19:15,419
and IPC uh just for electrons internal

452
00:19:15,419 --> 00:19:17,940
IPC and then you can invoke multiple

453
00:19:17,940 --> 00:19:20,820
developer defined IPC channels like open

454
00:19:20,820 --> 00:19:23,340
URL which I showed you earlier or you

455
00:19:23,340 --> 00:19:25,500
can invoke electrons internal Channel

456
00:19:25,500 --> 00:19:29,100
like electron star or guest star

457
00:19:29,100 --> 00:19:31,440
so let's take a case study uh for

458
00:19:31,440 --> 00:19:33,960
Microsoft teams where we will where we

459
00:19:33,960 --> 00:19:36,240
were able to achieve local file read and

460
00:19:36,240 --> 00:19:37,919
were able to perform an account takeover

461
00:19:37,919 --> 00:19:39,840
on Microsoft teams user

462
00:19:39,840 --> 00:19:41,640
so Microsoft teams

463
00:19:41,640 --> 00:19:44,400
was using electron less than 15.

464
00:19:44,400 --> 00:19:47,820
we found an xss uh in the renderer where

465
00:19:47,820 --> 00:19:50,220
you send a message to someone using a

466
00:19:50,220 --> 00:19:53,400
zero day in CK editor so we perform a

467
00:19:53,400 --> 00:19:55,679
mutation exercise in C cadited which was

468
00:19:55,679 --> 00:19:58,140
a zero day finding which we did

469
00:19:58,140 --> 00:20:00,059
this is something which is used as a

470
00:20:00,059 --> 00:20:02,760
rich text formatting for markdown in

471
00:20:02,760 --> 00:20:04,320
Microsoft teams

472
00:20:04,320 --> 00:20:07,679
so once you had this exercise what we

473
00:20:07,679 --> 00:20:09,919
noticed that when you open a new window

474
00:20:09,919 --> 00:20:13,440
context isolation is disabled but

475
00:20:13,440 --> 00:20:16,380
sandbox is enabled so we can use that

476
00:20:16,380 --> 00:20:18,000
same attack Vector which I showed

477
00:20:18,000 --> 00:20:19,919
earlier so we use prototype pollution

478
00:20:19,919 --> 00:20:24,360
Gadget to leak IPC using our xss and

479
00:20:24,360 --> 00:20:27,660
once we leak IPC we leak the electrons

480
00:20:27,660 --> 00:20:30,480
internal IPC which is IPC attender

481
00:20:30,480 --> 00:20:33,600
internal to make an IPC call to a

482
00:20:33,600 --> 00:20:36,480
browser process which reads a file given

483
00:20:36,480 --> 00:20:39,120
a path so think of it as like a filed

484
00:20:39,120 --> 00:20:41,580
read or local file inclusion attack and

485
00:20:41,580 --> 00:20:43,080
this was a misconfiguration within

486
00:20:43,080 --> 00:20:46,080
electron which was fixed in the electron

487
00:20:46,080 --> 00:20:49,080
version 15. and as you can see you can

488
00:20:49,080 --> 00:20:51,960
perform an IPC invoke with this

489
00:20:51,960 --> 00:20:54,539
electrons internal API and Supply a path

490
00:20:54,539 --> 00:20:55,559
name

491
00:20:55,559 --> 00:20:57,780
so let's look at the demo how this is

492
00:20:57,780 --> 00:21:00,260
going to work

493
00:21:05,520 --> 00:21:07,799
so this is where we have our xss

494
00:21:07,799 --> 00:21:10,679
and on the attacker's website we can see

495
00:21:10,679 --> 00:21:13,039
that we leak the file which is

496
00:21:13,039 --> 00:21:15,780
desktopconfig.json and within this file

497
00:21:15,780 --> 00:21:19,200
that is a JWT or jot token which you can

498
00:21:19,200 --> 00:21:21,960
use to get access to any user account

499
00:21:21,960 --> 00:21:25,320
which you want to Target so that is uh

500
00:21:25,320 --> 00:21:27,840
the impact of our Microsoft teams

501
00:21:27,840 --> 00:21:29,220
exploit

502
00:21:29,220 --> 00:21:30,840
so we received three thousand dollar

503
00:21:30,840 --> 00:21:33,840
Bounty for our Microsoft teams exploit

504
00:21:33,840 --> 00:21:36,539
which is pretty nice but let's take one

505
00:21:36,539 --> 00:21:39,299
step even further what if everything is

506
00:21:39,299 --> 00:21:41,520
green like what if an app is running

507
00:21:41,520 --> 00:21:45,179
with all proper security settings so

508
00:21:45,179 --> 00:21:46,980
this settings is used by most of the

509
00:21:46,980 --> 00:21:49,440
application node Primitives are not

510
00:21:49,440 --> 00:21:51,480
exposed to the renderer context

511
00:21:51,480 --> 00:21:53,400
isolation is enabled so we have a

512
00:21:53,400 --> 00:21:56,580
separate context and sandbox is true

513
00:21:56,580 --> 00:21:59,580
so to hack this configuration is the

514
00:21:59,580 --> 00:22:02,880
main part of our research so here in the

515
00:22:02,880 --> 00:22:05,460
block diagram we are mostly targeting

516
00:22:05,460 --> 00:22:08,520
this sandbox renderer portion

517
00:22:08,520 --> 00:22:09,900
so at this point you might have a

518
00:22:09,900 --> 00:22:11,880
question that is this just like having

519
00:22:11,880 --> 00:22:14,220
an xss in a browser because everything

520
00:22:14,220 --> 00:22:17,460
is enabled all security settings and the

521
00:22:17,460 --> 00:22:20,880
answer to that is no the reason for that

522
00:22:20,880 --> 00:22:23,940
is that electron is not the same as your

523
00:22:23,940 --> 00:22:26,340
commonly used day-to-day Chromium

524
00:22:26,340 --> 00:22:30,000
browser for example so electron code is

525
00:22:30,000 --> 00:22:31,620
something which is a combination of

526
00:22:31,620 --> 00:22:34,980
chrome and electron specific code so

527
00:22:34,980 --> 00:22:39,120
what if we find a way to abuse this

528
00:22:39,120 --> 00:22:41,940
intersection between electrons code and

529
00:22:41,940 --> 00:22:45,780
chromium code and somehow subvert all

530
00:22:45,780 --> 00:22:48,659
the defenses which electron had let's

531
00:22:48,659 --> 00:22:49,440
see

532
00:22:49,440 --> 00:22:52,200
so first I'm going to present a CV which

533
00:22:52,200 --> 00:22:54,179
we discovered in electron which is

534
00:22:54,179 --> 00:22:56,400
enabling node integration in subframes

535
00:22:56,400 --> 00:22:58,740
from a compromise renderer

536
00:22:58,740 --> 00:23:00,539
so what is the node integration in

537
00:23:00,539 --> 00:23:02,820
subframes so let's say you have a

538
00:23:02,820 --> 00:23:06,120
website for example.com and you create

539
00:23:06,120 --> 00:23:08,460
an iframe within that website which is

540
00:23:08,460 --> 00:23:10,380
to load another web page

541
00:23:10,380 --> 00:23:12,480
now let's say if you want to provide

542
00:23:12,480 --> 00:23:15,299
access to node Primitives or preload

543
00:23:15,299 --> 00:23:18,179
scripts within this iframe you need to

544
00:23:18,179 --> 00:23:20,580
enable a feature flag known as node

545
00:23:20,580 --> 00:23:22,799
integration in subframes because by

546
00:23:22,799 --> 00:23:26,039
default it is false so this is a way to

547
00:23:26,039 --> 00:23:29,520
provide access to preloads or node

548
00:23:29,520 --> 00:23:32,220
Primitives to your iframe so for every

549
00:23:32,220 --> 00:23:34,500
subframes like iframe or child Windows

550
00:23:34,500 --> 00:23:37,440
if node integration is enabled and

551
00:23:37,440 --> 00:23:39,360
sandbox is disabled on your parent

552
00:23:39,360 --> 00:23:41,760
window which is your example.com then

553
00:23:41,760 --> 00:23:43,679
node.js will Primitives will be

554
00:23:43,679 --> 00:23:45,600
available in subframes if node

555
00:23:45,600 --> 00:23:47,940
integration is disabled and sandbox

556
00:23:47,940 --> 00:23:50,220
doesn't matter even if it's enable or

557
00:23:50,220 --> 00:23:53,159
disable then all your preloads will load

558
00:23:53,159 --> 00:23:56,220
within this specific iframe so let's see

559
00:23:56,220 --> 00:23:58,080
in the code to understand a bit further

560
00:23:58,080 --> 00:24:01,140
so here we have a main process where we

561
00:24:01,140 --> 00:24:03,000
create browser window preference and

562
00:24:03,000 --> 00:24:06,659
node integration subframes is false we

563
00:24:06,659 --> 00:24:09,059
do the same thing a loader URL

564
00:24:09,059 --> 00:24:12,419
google.com and Define an IPC channel on

565
00:24:12,419 --> 00:24:14,159
the render process again the same story

566
00:24:14,159 --> 00:24:16,440
We expose open URL

567
00:24:16,440 --> 00:24:18,659
and on the website google.com I create

568
00:24:18,659 --> 00:24:23,720
an iframe to pawn.af and I use that

569
00:24:23,720 --> 00:24:25,860
window.electron.openurl to pass an

570
00:24:25,860 --> 00:24:28,020
argument this works fine

571
00:24:28,020 --> 00:24:30,539
but from the iframe when I try to do the

572
00:24:30,539 --> 00:24:33,299
same thing by invoking that open URL it

573
00:24:33,299 --> 00:24:35,220
doesn't work it's because node

574
00:24:35,220 --> 00:24:37,260
integration in subframes is false

575
00:24:37,260 --> 00:24:40,740
let's turn it to true and in this case

576
00:24:40,740 --> 00:24:44,159
no Adder is thrown and you can do you

577
00:24:44,159 --> 00:24:46,919
can pop a calc from your iframe

578
00:24:46,919 --> 00:24:49,320
so most of the time when we get exercise

579
00:24:49,320 --> 00:24:52,320
in a lot of these applications it is

580
00:24:52,320 --> 00:24:55,020
within iframe or subframes which you

581
00:24:55,020 --> 00:24:57,659
notice in the Discord earlier and in

582
00:24:57,659 --> 00:24:59,700
this case node integration in subframes

583
00:24:59,700 --> 00:25:02,700
is disabled mostly because developers do

584
00:25:02,700 --> 00:25:05,280
not go against uh the design pattern and

585
00:25:05,280 --> 00:25:08,280
enable it unless it's needed so in this

586
00:25:08,280 --> 00:25:10,440
case even if we have xss we don't have

587
00:25:10,440 --> 00:25:13,260
access to context Bridge exposed API on

588
00:25:13,260 --> 00:25:16,679
embed which is a bit sad but can we

589
00:25:16,679 --> 00:25:19,080
still hack it can we still find a way to

590
00:25:19,080 --> 00:25:21,659
somehow get access to those preload and

591
00:25:21,659 --> 00:25:24,360
node Primitives through this let's see

592
00:25:24,360 --> 00:25:27,120
so to see this we take a deep dive into

593
00:25:27,120 --> 00:25:29,580
the electron source code let's look at

594
00:25:29,580 --> 00:25:31,799
the let's look what how electron

595
00:25:31,799 --> 00:25:34,559
implements this security features So

596
00:25:34,559 --> 00:25:37,080
What electron does it it patches blink

597
00:25:37,080 --> 00:25:39,779
web preferences and adds this node

598
00:25:39,779 --> 00:25:41,940
integration in subframes context site

599
00:25:41,940 --> 00:25:45,419
isolation everything within this so in

600
00:25:45,419 --> 00:25:49,320
the red nisf is implemented there

601
00:25:49,320 --> 00:25:51,480
so when we take a more deep dive into

602
00:25:51,480 --> 00:25:54,120
how the code for this works like on

603
00:25:54,120 --> 00:25:57,179
based on what you need to enable nisf we

604
00:25:57,179 --> 00:25:59,760
can go to a file which is in the folder

605
00:25:59,760 --> 00:26:03,240
which is shell renderer and within this

606
00:26:03,240 --> 00:26:06,059
file uh what it happens in the box

607
00:26:06,059 --> 00:26:09,539
marked as red is the rendered frame gets

608
00:26:09,539 --> 00:26:12,360
access to Blink web preferences and then

609
00:26:12,360 --> 00:26:14,279
it accesses node integration in

610
00:26:14,279 --> 00:26:17,279
subframes variable and if this is set to

611
00:26:17,279 --> 00:26:19,919
true or false based on that it will make

612
00:26:19,919 --> 00:26:22,260
a decision on whether to enable that

613
00:26:22,260 --> 00:26:23,820
feature or not

614
00:26:23,820 --> 00:26:25,559
now if you have been paying close

615
00:26:25,559 --> 00:26:27,659
attention you would notice that the

616
00:26:27,659 --> 00:26:30,360
check here for this feature is on the

617
00:26:30,360 --> 00:26:34,500
renderer process so what we can do is if

618
00:26:34,500 --> 00:26:37,380
we can run a renderer V8 exploit and

619
00:26:37,380 --> 00:26:39,659
find a way to somehow set that variable

620
00:26:39,659 --> 00:26:42,179
which we just saw previously to one then

621
00:26:42,179 --> 00:26:45,059
we might be able to enable nisf

622
00:26:45,059 --> 00:26:47,900
so here is an annotated version of our

623
00:26:47,900 --> 00:26:51,659
binary exploit so first of all we leak

624
00:26:51,659 --> 00:26:55,080
address to window in the memory we added

625
00:26:55,080 --> 00:26:58,679
to get access to a web preferences we

626
00:26:58,679 --> 00:27:00,779
add an offset to node integration in

627
00:27:00,779 --> 00:27:05,100
subframe and then we flip it to 1 from 0

628
00:27:05,100 --> 00:27:08,039
to enable it so this is how the changes

629
00:27:08,039 --> 00:27:10,380
which you would make to your V8 expert

630
00:27:10,380 --> 00:27:12,419
in order to perform this attack

631
00:27:12,419 --> 00:27:14,520
so let's look at the real world case

632
00:27:14,520 --> 00:27:16,799
which we found in element app and

633
00:27:16,799 --> 00:27:19,620
element is a really famous application

634
00:27:19,620 --> 00:27:21,900
so it is using Chrome 91 and electron

635
00:27:21,900 --> 00:27:25,440
13. there is an xss on embed through a

636
00:27:25,440 --> 00:27:27,659
deep link misconfiguration and no

637
00:27:27,659 --> 00:27:31,320
context which API on embed is exposed by

638
00:27:31,320 --> 00:27:32,279
default

639
00:27:32,279 --> 00:27:34,860
so what you can do is same story you run

640
00:27:34,860 --> 00:27:37,740
Chrome V8 exploit Xpose context Bridge

641
00:27:37,740 --> 00:27:40,980
API and then perform your exploit

642
00:27:40,980 --> 00:27:43,440
So within the main process element app

643
00:27:43,440 --> 00:27:45,900
defines a IPC known as user download

644
00:27:45,900 --> 00:27:49,020
open this is used to open a path using

645
00:27:49,020 --> 00:27:51,720
shell dot open path which is a dangerous

646
00:27:51,720 --> 00:27:54,900
sync in node.js

647
00:27:54,900 --> 00:27:57,539
and on the renderer process it exposes

648
00:27:57,539 --> 00:28:00,960
electron dot send as a way to proxy

649
00:28:00,960 --> 00:28:03,360
messages to main process

650
00:28:03,360 --> 00:28:05,640
so as we can see in our exploit what we

651
00:28:05,640 --> 00:28:08,940
do is we create an iframe SRC dock to

652
00:28:08,940 --> 00:28:11,640
create your own iframe and once this

653
00:28:11,640 --> 00:28:14,039
rendered exploit runs it will create and

654
00:28:14,039 --> 00:28:16,020
this iframe with node integration in

655
00:28:16,020 --> 00:28:18,960
subframes enabled So within this new

656
00:28:18,960 --> 00:28:21,779
iframe you will be able to access like

657
00:28:21,779 --> 00:28:24,120
electron dot send method which was

658
00:28:24,120 --> 00:28:26,820
exposed earlier and can pass your own

659
00:28:26,820 --> 00:28:29,640
argument to pop a shell so iframe will

660
00:28:29,640 --> 00:28:33,120
pop up and then you can pop up shell

661
00:28:33,120 --> 00:28:35,880
because nisf is enabled let's see how

662
00:28:35,880 --> 00:28:39,140
this looks in the demo

663
00:28:39,600 --> 00:28:41,940
so victim opens a

664
00:28:41,940 --> 00:28:44,659
the app

665
00:28:45,000 --> 00:28:47,220
it's a video conferencing victim will

666
00:28:47,220 --> 00:28:49,679
try to join this video conference

667
00:28:49,679 --> 00:28:51,480
and as you can see in the background I

668
00:28:51,480 --> 00:28:53,220
want to show you how this exploit would

669
00:28:53,220 --> 00:28:55,740
run this is where this calculation of

670
00:28:55,740 --> 00:28:59,220
the offset is gonna take place so we are

671
00:28:59,220 --> 00:29:01,500
doing a step-by-step calculation and

672
00:29:01,500 --> 00:29:03,000
once this happens

673
00:29:03,000 --> 00:29:05,580
the shell will be popped as now you have

674
00:29:05,580 --> 00:29:08,899
access to those preloads

675
00:29:11,720 --> 00:29:15,720
so now let's try to do it a bit more so

676
00:29:15,720 --> 00:29:17,039
we received a three thousand dollar

677
00:29:17,039 --> 00:29:18,960
Bounty from internet bug Bounty program

678
00:29:18,960 --> 00:29:22,320
as we reported this bug to electron Js

679
00:29:22,320 --> 00:29:24,899
so now we will try to disable context

680
00:29:24,899 --> 00:29:28,080
isolation using a compromise renderer

681
00:29:28,080 --> 00:29:31,200
so in this case it's the same story you

682
00:29:31,200 --> 00:29:33,000
know that electron patches blink web

683
00:29:33,000 --> 00:29:35,640
preferences adds context isolation there

684
00:29:35,640 --> 00:29:38,159
and when we look into the electron code

685
00:29:38,159 --> 00:29:40,740
what we figure is it does the same thing

686
00:29:40,740 --> 00:29:43,020
it gets access to the web preferences

687
00:29:43,020 --> 00:29:45,840
and access context underscore isolation

688
00:29:45,840 --> 00:29:49,260
variable in the step number one in Step

689
00:29:49,260 --> 00:29:51,840
number two it has a Boolean value which

690
00:29:51,840 --> 00:29:53,940
is like should create context isolation

691
00:29:53,940 --> 00:29:55,919
which is based on the value from the

692
00:29:55,919 --> 00:29:58,140
step number one and under step number

693
00:29:58,140 --> 00:30:00,600
three there is a if statement which is

694
00:30:00,600 --> 00:30:03,360
like if should uh enable context

695
00:30:03,360 --> 00:30:06,419
isolation is true then enable it else

696
00:30:06,419 --> 00:30:09,480
disable so our goal is to disable the

697
00:30:09,480 --> 00:30:12,659
context isolation so same story you can

698
00:30:12,659 --> 00:30:15,120
use V8 render dot exploit because this

699
00:30:15,120 --> 00:30:17,340
this particular feature was enabled on

700
00:30:17,340 --> 00:30:19,140
the renderer side and not on the sandbox

701
00:30:19,140 --> 00:30:21,179
side which was a design flaw within

702
00:30:21,179 --> 00:30:23,220
electron.js framework and then you can

703
00:30:23,220 --> 00:30:26,340
set it from one to zero so this is an

704
00:30:26,340 --> 00:30:28,440
annotated version of our binary exploit

705
00:30:28,440 --> 00:30:33,059
we get offset to a CIS or in the memory

706
00:30:33,059 --> 00:30:36,179
and then we overwrite its value from one

707
00:30:36,179 --> 00:30:38,340
to zero to disable it

708
00:30:38,340 --> 00:30:40,200
so let's take a look at our final case

709
00:30:40,200 --> 00:30:43,500
study which is RC in an undisclosed app

710
00:30:43,500 --> 00:30:46,260
so we found a feature to embed untrusted

711
00:30:46,260 --> 00:30:49,260
content in an iframe in this application

712
00:30:49,260 --> 00:30:51,899
so in the main process again you can see

713
00:30:51,899 --> 00:30:53,580
open underscore external is a channel

714
00:30:53,580 --> 00:30:57,240
which is dangerous sync and on the

715
00:30:57,240 --> 00:30:59,760
preload we have something known as is

716
00:30:59,760 --> 00:31:02,700
allowed URL which is a function to

717
00:31:02,700 --> 00:31:05,279
perform like allow list and it will only

718
00:31:05,279 --> 00:31:07,980
allow if the URLs has a protocol which

719
00:31:07,980 --> 00:31:09,480
is https

720
00:31:09,480 --> 00:31:11,640
so unlike previous exploit you cannot

721
00:31:11,640 --> 00:31:14,100
pass something like file path to calc

722
00:31:14,100 --> 00:31:16,140
dot app because then it will have a file

723
00:31:16,140 --> 00:31:18,720
protocol which will not be the https

724
00:31:18,720 --> 00:31:22,559
so let's try to find a way to bypass

725
00:31:22,559 --> 00:31:25,320
this and make a direct IPC call to the

726
00:31:25,320 --> 00:31:27,480
main process from the web page

727
00:31:27,480 --> 00:31:30,659
so here is our exploit first of all we

728
00:31:30,659 --> 00:31:33,600
disable context isolation using our V8

729
00:31:33,600 --> 00:31:36,659
exploit then we perform a redirection to

730
00:31:36,659 --> 00:31:39,240
an another web page which is leak.html

731
00:31:39,240 --> 00:31:42,539
and once this page is reloaded this will

732
00:31:42,539 --> 00:31:44,100
be reloaded with context isolation

733
00:31:44,100 --> 00:31:46,679
disabled so what we can do is we can

734
00:31:46,679 --> 00:31:48,539
perform prototype pollution which I

735
00:31:48,539 --> 00:31:50,580
showed earlier in the previous slide and

736
00:31:50,580 --> 00:31:53,399
get access to the IPC directly so in

737
00:31:53,399 --> 00:31:55,799
this way you can make a call even with

738
00:31:55,799 --> 00:31:58,440
five protocol by bypassing that preload

739
00:31:58,440 --> 00:32:01,020
which was the middleman performing that

740
00:32:01,020 --> 00:32:03,120
allow list to check

741
00:32:03,120 --> 00:32:05,100
so let's see how the demo would look

742
00:32:05,100 --> 00:32:07,219
like

743
00:32:10,020 --> 00:32:12,299
so here are the calculation for the Heap

744
00:32:12,299 --> 00:32:14,520
offset offset for the V8 exploit which I

745
00:32:14,520 --> 00:32:17,120
mentioned earlier

746
00:32:17,520 --> 00:32:19,679
and as you can see uh in the background

747
00:32:19,679 --> 00:32:21,659
this is what it happens it gets the

748
00:32:21,659 --> 00:32:25,020
offset it gets ciso and it sets to zero

749
00:32:25,020 --> 00:32:27,899
now this is leak.html when we click on

750
00:32:27,899 --> 00:32:30,360
it we pop a shell because that was with

751
00:32:30,360 --> 00:32:32,880
CIS or disabled window

752
00:32:32,880 --> 00:32:34,740
so we received five thousand dollar

753
00:32:34,740 --> 00:32:38,039
Bounty for from this undisclosed Bounty

754
00:32:38,039 --> 00:32:39,779
program which is a very commonly used

755
00:32:39,779 --> 00:32:41,340
app as well

756
00:32:41,340 --> 00:32:44,039
now let's let's shift our gears to talk

757
00:32:44,039 --> 00:32:46,860
about same site origin spoofing

758
00:32:46,860 --> 00:32:49,140
So within electron app let's say if you

759
00:32:49,140 --> 00:32:51,260
want to load a website known as

760
00:32:51,260 --> 00:32:54,840
main.example.com then chromium will

761
00:32:54,840 --> 00:32:57,120
internally create a process for example

762
00:32:57,120 --> 00:33:00,020
a process one for this now within this

763
00:33:00,020 --> 00:33:02,700
main.example.com if you wanna in

764
00:33:02,700 --> 00:33:04,799
Implement like iframes for example

765
00:33:04,799 --> 00:33:08,399
youtube.com and sandbox.example.com then

766
00:33:08,399 --> 00:33:10,200
let's see how many process it creates

767
00:33:10,200 --> 00:33:12,960
for this two iframes

768
00:33:12,960 --> 00:33:15,480
so it only creates a separate process

769
00:33:15,480 --> 00:33:17,700
for youtube.com but it doesn't create

770
00:33:17,700 --> 00:33:20,000
the separate process for

771
00:33:20,000 --> 00:33:23,340
sandbox.example.com the reason is that a

772
00:33:23,340 --> 00:33:26,580
chrome uses the same process if your top

773
00:33:26,580 --> 00:33:29,159
level domain is the same so in this case

774
00:33:29,159 --> 00:33:31,799
example.com is the common between both

775
00:33:31,799 --> 00:33:34,500
of your sub domains and site isolation

776
00:33:34,500 --> 00:33:37,919
won't apply here so Chrome uses the same

777
00:33:37,919 --> 00:33:40,620
process for both the pages so let's say

778
00:33:40,620 --> 00:33:42,440
if you have an exercise on

779
00:33:42,440 --> 00:33:45,120
sandbox.example.com and you want to

780
00:33:45,120 --> 00:33:48,179
access like those preload apis and node

781
00:33:48,179 --> 00:33:49,700
Primitives which are running on

782
00:33:49,700 --> 00:33:52,140
main.example.com then how would you do

783
00:33:52,140 --> 00:33:52,860
it

784
00:33:52,860 --> 00:33:55,380
the way you can do is is you can run

785
00:33:55,380 --> 00:33:58,260
like a chrome render or V8 exploit and

786
00:33:58,260 --> 00:34:01,039
you can set document.url to

787
00:34:01,039 --> 00:34:04,200
main.example.com and security context

788
00:34:04,200 --> 00:34:07,860
origin port to 443 this way you can

789
00:34:07,860 --> 00:34:10,859
masculate as your parent page and will

790
00:34:10,859 --> 00:34:14,099
be able to access all these preloads and

791
00:34:14,099 --> 00:34:16,440
node Primitives which are provided to

792
00:34:16,440 --> 00:34:19,139
the main.example.com

793
00:34:19,139 --> 00:34:22,500
so as we notice we used a lot of V8

794
00:34:22,500 --> 00:34:25,080
expert to perform this attacks and there

795
00:34:25,080 --> 00:34:27,239
is a noticeable patch Gap within

796
00:34:27,239 --> 00:34:31,139
electron electron apps and chrome which

797
00:34:31,139 --> 00:34:33,839
makes a lot of that this app susceptible

798
00:34:33,839 --> 00:34:36,540
to this attacks and if you want to go

799
00:34:36,540 --> 00:34:38,699
one step further you can also use like

800
00:34:38,699 --> 00:34:40,980
sandbox escape from chromium which are

801
00:34:40,980 --> 00:34:43,560
pretty rare but it can also bypass this

802
00:34:43,560 --> 00:34:46,320
sandbox to a configuration

803
00:34:46,320 --> 00:34:48,659
so as a part of the mitigations

804
00:34:48,659 --> 00:34:51,239
um what uh are the suggested mitigations

805
00:34:51,239 --> 00:34:53,520
for this is the findings which we did

806
00:34:53,520 --> 00:34:56,040
earlier were all fixed by electron and

807
00:34:56,040 --> 00:34:58,800
we were assigned CV for those finding so

808
00:34:58,800 --> 00:35:01,200
electron made a code level fix to not do

809
00:35:01,200 --> 00:35:03,420
this check on the rendered process so

810
00:35:03,420 --> 00:35:05,400
you cannot just directly invoke those

811
00:35:05,400 --> 00:35:08,460
leaked IPC uh on the newer version but

812
00:35:08,460 --> 00:35:10,619
as a developer what you can do is you

813
00:35:10,619 --> 00:35:13,020
can still enable all the security Flags

814
00:35:13,020 --> 00:35:15,780
because that's the recommended part you

815
00:35:15,780 --> 00:35:18,540
shouldn't use a untrusted third-party

816
00:35:18,540 --> 00:35:20,700
embed which doesn't have a good security

817
00:35:20,700 --> 00:35:23,640
track record for example we saw with

818
00:35:23,640 --> 00:35:25,800
Discord like you can embed a Vimeo which

819
00:35:25,800 --> 00:35:28,020
had xss and that was the failure point

820
00:35:28,020 --> 00:35:29,160
for the app

821
00:35:29,160 --> 00:35:32,099
so make sure your attach Gap isn't large

822
00:35:32,099 --> 00:35:34,859
with chromium and your electron app so

823
00:35:34,859 --> 00:35:37,200
if you have an organization and have a

824
00:35:37,200 --> 00:35:39,839
capability you can Fork electron and you

825
00:35:39,839 --> 00:35:42,599
can cherry pick commits which are V8

826
00:35:42,599 --> 00:35:46,500
um uh bugs and can fix it by yourself

827
00:35:46,500 --> 00:35:49,560
so that is one way to do it and another

828
00:35:49,560 --> 00:35:52,160
issue is you shouldn't Implement

829
00:35:52,160 --> 00:35:55,320
sensitive ipcs like what we saw earlier

830
00:35:55,320 --> 00:35:58,619
those dangerous JavaScript syncs in your

831
00:35:58,619 --> 00:36:00,599
main process because attacker will find

832
00:36:00,599 --> 00:36:03,119
a way to get access to those ipcs even

833
00:36:03,119 --> 00:36:06,060
if they are restricted and mitigate uh

834
00:36:06,060 --> 00:36:09,000
security issues across all your asset so

835
00:36:09,000 --> 00:36:10,980
your main domain your sub domain

836
00:36:10,980 --> 00:36:13,079
whatever you are using in the app make

837
00:36:13,079 --> 00:36:15,359
sure it is restricted because as you saw

838
00:36:15,359 --> 00:36:18,060
with same site origin spoofing a Sandbox

839
00:36:18,060 --> 00:36:21,119
domain can also get access to those uh

840
00:36:21,119 --> 00:36:24,119
privilege a context Bridge exposed API

841
00:36:24,119 --> 00:36:26,820
so as a part of epilogue we were able to

842
00:36:26,820 --> 00:36:29,640
compromise more than 20 commonly used

843
00:36:29,640 --> 00:36:32,099
electron applications uh this was

844
00:36:32,099 --> 00:36:34,500
running at the latest version and we

845
00:36:34,500 --> 00:36:36,300
were also able to compromise Jupiter lab

846
00:36:36,300 --> 00:36:40,740
matter most notion based camp and the

847
00:36:40,740 --> 00:36:42,960
apps which I showed in this demo which

848
00:36:42,960 --> 00:36:44,640
are few of them

849
00:36:44,640 --> 00:36:47,520
so as a part of our blackhead sound bite

850
00:36:47,520 --> 00:36:49,920
I want to talk and emphasize on three

851
00:36:49,920 --> 00:36:52,800
key takeaways for this so the first one

852
00:36:52,800 --> 00:36:55,079
is for bug bounty hunters and security

853
00:36:55,079 --> 00:36:57,960
researcher which is to dig deeper into

854
00:36:57,960 --> 00:37:00,599
the framework you are auditing and to

855
00:37:00,599 --> 00:37:02,339
not limit yourself only to the

856
00:37:02,339 --> 00:37:04,680
application layer so what we see with

857
00:37:04,680 --> 00:37:08,099
electron is there is a design flaw where

858
00:37:08,099 --> 00:37:09,839
these features were enabled on the

859
00:37:09,839 --> 00:37:12,119
renderer for example and that

860
00:37:12,119 --> 00:37:14,820
intersection was not done perfectly so

861
00:37:14,820 --> 00:37:17,460
design labor layer floss can enable you

862
00:37:17,460 --> 00:37:20,339
to bypass a lot of security settings if

863
00:37:20,339 --> 00:37:23,579
you have a primitive to a tweak those

864
00:37:23,579 --> 00:37:27,240
second is for Ray team operators that

865
00:37:27,240 --> 00:37:29,820
electron apps are an ideal adversarial

866
00:37:29,820 --> 00:37:32,880
Target because users will click anywhere

867
00:37:32,880 --> 00:37:35,339
or open any link users are gonna join

868
00:37:35,339 --> 00:37:37,560
video conferences they are gonna opening

869
00:37:37,560 --> 00:37:39,480
the messages so if you are in a

870
00:37:39,480 --> 00:37:41,400
detection team make sure that you also

871
00:37:41,400 --> 00:37:43,800
consider electron applications used

872
00:37:43,800 --> 00:37:45,599
within your organization as a part of

873
00:37:45,599 --> 00:37:46,800
the threat model

874
00:37:46,800 --> 00:37:48,780
the third one is to minimize attack

875
00:37:48,780 --> 00:37:50,940
surface on your application as much as

876
00:37:50,940 --> 00:37:54,359
possible so in security what we consider

877
00:37:54,359 --> 00:37:57,000
open URL redirection it's a very P5

878
00:37:57,000 --> 00:38:00,540
issue but in electron JS someone can

879
00:38:00,540 --> 00:38:03,060
still use an open URL redirect to

880
00:38:03,060 --> 00:38:05,220
redirect to their own external website

881
00:38:05,220 --> 00:38:07,680
and get access to the main webview and

882
00:38:07,680 --> 00:38:10,440
perform this attack so treat all the

883
00:38:10,440 --> 00:38:14,400
security issues with a higher scrutiny

884
00:38:14,400 --> 00:38:16,440
if possible and when you are doing

885
00:38:16,440 --> 00:38:17,940
threat modeling of your electron

886
00:38:17,940 --> 00:38:20,579
applications consider all the windows

887
00:38:20,579 --> 00:38:23,160
and apply all the security settings on

888
00:38:23,160 --> 00:38:25,800
every window because as we saw with vs

889
00:38:25,800 --> 00:38:27,720
code we were able to jump from the most

890
00:38:27,720 --> 00:38:30,060
restrictive to the least one and was

891
00:38:30,060 --> 00:38:31,740
able to get RC

892
00:38:31,740 --> 00:38:33,660
so that's pretty much it for the

893
00:38:33,660 --> 00:38:34,619
presentation

894
00:38:34,619 --> 00:38:36,540
um first of all I would like to thank

895
00:38:36,540 --> 00:38:38,579
everyone coming by and stopping by and

896
00:38:38,579 --> 00:38:41,220
hearing about talk uh and if you want to

897
00:38:41,220 --> 00:38:43,500
understand all these use cases which I

898
00:38:43,500 --> 00:38:45,359
mentioned here the application part of

899
00:38:45,359 --> 00:38:48,060
it how we achieved in details and if you

900
00:38:48,060 --> 00:38:49,200
want to secure your electron

901
00:38:49,200 --> 00:38:51,740
applications please visit uh

902
00:38:51,740 --> 00:38:54,000
electrovold.io and then you can find

903
00:38:54,000 --> 00:38:56,839
like our blog website which is

904
00:38:56,839 --> 00:38:58,800
blog.electrovold.io and we have already

905
00:38:58,800 --> 00:39:01,980
published a use cases for vs code and

906
00:39:01,980 --> 00:39:04,380
Discord RC there where you can look this

907
00:39:04,380 --> 00:39:06,359
entire chain in detail and understand

908
00:39:06,359 --> 00:39:07,619
further

909
00:39:07,619 --> 00:39:09,540
so with that

910
00:39:09,540 --> 00:39:11,760
um I'm concluding the talk and uh

911
00:39:11,760 --> 00:39:13,980
opening up for any questions which you

912
00:39:13,980 --> 00:39:16,280
may have

913
00:39:17,670 --> 00:39:20,769
[Music]

914
00:39:24,630 --> 00:39:27,719
[Music]

