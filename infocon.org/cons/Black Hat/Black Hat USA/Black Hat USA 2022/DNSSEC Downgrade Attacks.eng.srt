1
00:00:01,700 --> 00:00:04,810
[Music]

2
00:00:06,859 --> 00:00:09,859
thank you

3
00:00:10,200 --> 00:00:13,200
thank you uh well hello everyone welcome

4
00:00:13,200 --> 00:00:15,780
to DNS Tech downgrade attacks my name is

5
00:00:15,780 --> 00:00:18,300
as introduced Elias heftish and I'm an

6
00:00:18,300 --> 00:00:21,240
I.T security researcher from uh

7
00:00:21,240 --> 00:00:24,480
at prano visit damshot Germany

8
00:00:24,480 --> 00:00:26,820
so the topic of my talk is dynastic

9
00:00:26,820 --> 00:00:28,980
downgrade attacks but why investigate

10
00:00:28,980 --> 00:00:30,300
them in the first place

11
00:00:30,300 --> 00:00:32,880
well um DNS is involved in virtually all

12
00:00:32,880 --> 00:00:34,500
transactions on the internet and many

13
00:00:34,500 --> 00:00:37,440
mechanisms rely on security for instance

14
00:00:37,440 --> 00:00:39,480
when determining which IP addresses to

15
00:00:39,480 --> 00:00:41,700
send packets to or password recovery

16
00:00:41,700 --> 00:00:44,579
mechanisms also the main validation and

17
00:00:44,579 --> 00:00:47,040
yeah many others

18
00:00:47,040 --> 00:00:49,800
so in Essex is the Gopher solution to

19
00:00:49,800 --> 00:00:52,260
shifting as record security and while

20
00:00:52,260 --> 00:00:53,700
probably everybody here has already

21
00:00:53,700 --> 00:00:55,440
heard of downgrade attacks on TLS

22
00:00:55,440 --> 00:00:57,480
downgrad attacks only an aspect have not

23
00:00:57,480 --> 00:00:59,699
seen much much attention

24
00:00:59,699 --> 00:01:02,280
up until now

25
00:01:02,280 --> 00:01:04,680
so my talk is structured as follows um

26
00:01:04,680 --> 00:01:06,360
first I'll give a refresher on DNS and

27
00:01:06,360 --> 00:01:07,380
in Essex

28
00:01:07,380 --> 00:01:09,180
then I will explain the Genesect

29
00:01:09,180 --> 00:01:10,860
downgrade attacks I'm bringing you two

30
00:01:10,860 --> 00:01:13,020
classes of them so first this attacks to

31
00:01:13,020 --> 00:01:14,880
weakened security and the other is

32
00:01:14,880 --> 00:01:16,560
effects to break security

33
00:01:16,560 --> 00:01:18,180
and then I'll conclude my talk with

34
00:01:18,180 --> 00:01:20,780
recommendations

35
00:01:21,299 --> 00:01:24,540
so first the Refresher

36
00:01:24,540 --> 00:01:26,520
okay so this is DNS resolution and

37
00:01:26,520 --> 00:01:29,040
account setup we have an application and

38
00:01:29,040 --> 00:01:30,720
a user wants to browse the website so

39
00:01:30,720 --> 00:01:33,720
the application does a library call

40
00:01:33,720 --> 00:01:34,380
um

41
00:01:34,380 --> 00:01:37,619
it was a stop resolver to have the host

42
00:01:37,619 --> 00:01:39,600
name resolved to an IP address

43
00:01:39,600 --> 00:01:41,159
the stop resolver will then translate

44
00:01:41,159 --> 00:01:43,439
that into the S request via the network

45
00:01:43,439 --> 00:01:46,020
to forwarder here before water well

46
00:01:46,020 --> 00:01:48,000
forwards it to recursive resolver and

47
00:01:48,000 --> 00:01:49,500
the recursive resolver will then do the

48
00:01:49,500 --> 00:01:51,119
heavy lifting

49
00:01:51,119 --> 00:01:53,220
assuming nothing nothing is in its cache

50
00:01:53,220 --> 00:01:55,259
it will first very um the authoritative

51
00:01:55,259 --> 00:01:57,659
server of the root zone for the records

52
00:01:57,659 --> 00:01:59,820
in question which will usually not have

53
00:01:59,820 --> 00:02:01,380
the answer for that so it will send a

54
00:02:01,380 --> 00:02:03,119
referral response saying hey I don't

55
00:02:03,119 --> 00:02:05,520
know but ask this one that server is

56
00:02:05,520 --> 00:02:06,840
closer to the name and will probably

57
00:02:06,840 --> 00:02:08,580
have an answer for you

58
00:02:08,580 --> 00:02:11,580
and the scenario that second server also

59
00:02:11,580 --> 00:02:13,620
does not have the answer to the records

60
00:02:13,620 --> 00:02:14,940
in questions so we'll send again a

61
00:02:14,940 --> 00:02:17,280
referral response until the recursive

62
00:02:17,280 --> 00:02:19,260
resolver is referred to the actual

63
00:02:19,260 --> 00:02:21,480
server which has the records in question

64
00:02:21,480 --> 00:02:25,260
locally and start in its database

65
00:02:25,260 --> 00:02:27,959
so that server will then send the actual

66
00:02:27,959 --> 00:02:30,060
answer to the question

67
00:02:30,060 --> 00:02:32,400
carrying the records in question which

68
00:02:32,400 --> 00:02:34,260
the recursive resolver will then cache

69
00:02:34,260 --> 00:02:36,959
and reply to the forwarder which will

70
00:02:36,959 --> 00:02:39,180
send then then send a reply to the

71
00:02:39,180 --> 00:02:41,940
software solver and the software solver

72
00:02:41,940 --> 00:02:45,200
will hand it over to the application

73
00:02:45,720 --> 00:02:48,000
arguably the biggest threat in DNS is

74
00:02:48,000 --> 00:02:50,580
DNS poisoning which is an attack on DNS

75
00:02:50,580 --> 00:02:53,040
record authenticity here it happens

76
00:02:53,040 --> 00:02:55,140
between the recursive resolver and the

77
00:02:55,140 --> 00:02:57,900
authoritative name server and notice

78
00:02:57,900 --> 00:03:00,420
that every Downstream DNS server has

79
00:03:00,420 --> 00:03:03,300
also its caches poison now

80
00:03:03,300 --> 00:03:04,980
but it also can happen at other places

81
00:03:04,980 --> 00:03:06,300
of course so for instance here between

82
00:03:06,300 --> 00:03:08,040
the four water and the recursive

83
00:03:08,040 --> 00:03:10,459
resolver

84
00:03:10,920 --> 00:03:13,080
housing is secured in practice if it's

85
00:03:13,080 --> 00:03:14,640
secured in the first place

86
00:03:14,640 --> 00:03:17,040
um so we have the communication between

87
00:03:17,040 --> 00:03:18,599
the Stop resolver and the forwarder

88
00:03:18,599 --> 00:03:21,599
there's usually genus of https or DNS of

89
00:03:21,599 --> 00:03:23,280
a deal as used because we only have one

90
00:03:23,280 --> 00:03:25,560
connection to manage but connection

91
00:03:25,560 --> 00:03:27,900
management is prohibitively expensive

92
00:03:27,900 --> 00:03:29,819
for the communication between the

93
00:03:29,819 --> 00:03:31,379
recursive resolver and the authoritative

94
00:03:31,379 --> 00:03:33,659
name service which is why they are

95
00:03:33,659 --> 00:03:35,879
typically a DNS of a UDP in accordance

96
00:03:35,879 --> 00:03:40,879
with an addition with the nestic is used

97
00:03:41,340 --> 00:03:43,620
how does that work so um first of all

98
00:03:43,620 --> 00:03:45,239
the insect provides data origin

99
00:03:45,239 --> 00:03:47,040
authenticity and also established

100
00:03:47,040 --> 00:03:49,019
Integrity of data what it does not

101
00:03:49,019 --> 00:03:51,480
provide for is confidentiality just by

102
00:03:51,480 --> 00:03:52,319
Design

103
00:03:52,319 --> 00:03:55,200
and it does so by protecting the DNS

104
00:03:55,200 --> 00:03:58,140
data using cryptographic signatures

105
00:03:58,140 --> 00:04:00,239
the trust which is put into the public

106
00:04:00,239 --> 00:04:01,519
Keys

107
00:04:01,519 --> 00:04:04,319
which are used to validate these

108
00:04:04,319 --> 00:04:06,060
signatures is delegated via public

109
00:04:06,060 --> 00:04:08,700
infrastructure and that infrastructure

110
00:04:08,700 --> 00:04:10,620
is built into and aligned with the DNS

111
00:04:10,620 --> 00:04:11,700
hierarchy

112
00:04:11,700 --> 00:04:14,700
let's have a look how that looks like

113
00:04:14,700 --> 00:04:17,579
so chain of trust but um first let's see

114
00:04:17,579 --> 00:04:18,959
what records are being used we have

115
00:04:18,959 --> 00:04:21,779
signature records signatures are created

116
00:04:21,779 --> 00:04:24,540
over record sets which are defined as

117
00:04:24,540 --> 00:04:26,759
having the same name type and class

118
00:04:26,759 --> 00:04:29,220
is virtually always the internet so I

119
00:04:29,220 --> 00:04:31,740
will just skip it here

120
00:04:31,740 --> 00:04:33,660
and there's uh dineski Records which

121
00:04:33,660 --> 00:04:35,340
carry a public key material for

122
00:04:35,340 --> 00:04:36,600
verification

123
00:04:36,600 --> 00:04:39,120
and DS records delegation signer records

124
00:04:39,120 --> 00:04:41,400
which carry a digest of individual child

125
00:04:41,400 --> 00:04:44,220
zoning sqs so these very roughly conform

126
00:04:44,220 --> 00:04:45,600
to certificates and other public

127
00:04:45,600 --> 00:04:48,380
infrastructures

128
00:04:48,660 --> 00:04:51,060
all of these records specify signature

129
00:04:51,060 --> 00:04:53,580
algorithms and additionally the DS

130
00:04:53,580 --> 00:04:55,380
record specifies the digest type number

131
00:04:55,380 --> 00:04:59,040
I will come back to them in a minute

132
00:04:59,040 --> 00:05:01,680
so here we see the chain of trust first

133
00:05:01,680 --> 00:05:03,120
three zones which are in a fair and

134
00:05:03,120 --> 00:05:04,560
child relationship

135
00:05:04,560 --> 00:05:06,680
um here the the root Zone uh art Zone

136
00:05:06,680 --> 00:05:09,300
example.oxone and we have our trust

137
00:05:09,300 --> 00:05:11,639
anchor in uh that in ASCII set in the

138
00:05:11,639 --> 00:05:14,220
root zone so this is one dineski record

139
00:05:14,220 --> 00:05:16,740
which we need to beat it have some

140
00:05:16,740 --> 00:05:18,780
direct notion of trust into so out of

141
00:05:18,780 --> 00:05:22,638
bands not built into this Peak High

142
00:05:23,220 --> 00:05:25,440
um yes the dinespi records can then be

143
00:05:25,440 --> 00:05:27,060
used to authenticate the holding ski

144
00:05:27,060 --> 00:05:30,680
record sets which is um signatures are

145
00:05:30,680 --> 00:05:33,419
represented in this figure by these End

146
00:05:33,419 --> 00:05:34,919
Zone arrows

147
00:05:34,919 --> 00:05:36,900
and um

148
00:05:36,900 --> 00:05:38,580
these are also used to authenticate the

149
00:05:38,580 --> 00:05:40,919
DS records here's one of digest Tab 2

150
00:05:40,919 --> 00:05:42,900
pointing to one dnscue with algorithm

151
00:05:42,900 --> 00:05:46,080
number 13. which is located in the child

152
00:05:46,080 --> 00:05:47,100
Zone

153
00:05:47,100 --> 00:05:49,680
so this is essentially the same as

154
00:05:49,680 --> 00:05:51,660
before but now we don't have the trust

155
00:05:51,660 --> 00:05:53,400
anchor but the DS record of arching for

156
00:05:53,400 --> 00:05:55,979
the authenticity

157
00:05:55,979 --> 00:05:57,720
um yeah essentially we have seen this

158
00:05:57,720 --> 00:06:00,240
also so here's the 2DS records of

159
00:06:00,240 --> 00:06:02,780
different types pointing to the same

160
00:06:02,780 --> 00:06:05,280
dineski record in the child Zone

161
00:06:05,280 --> 00:06:07,440
and that one can then be used to

162
00:06:07,440 --> 00:06:10,080
validate the signatures over the target

163
00:06:10,080 --> 00:06:13,400
records from that zone so uh

164
00:06:13,400 --> 00:06:16,259
www.example.org address records in this

165
00:06:16,259 --> 00:06:18,620
example

166
00:06:20,160 --> 00:06:22,919
so why can't just strip off signatures

167
00:06:22,919 --> 00:06:25,800
or um strip of records and pretend they

168
00:06:25,800 --> 00:06:27,960
don't exist well there's a mechanism

169
00:06:27,960 --> 00:06:31,380
built into DNS rather than Asic which is

170
00:06:31,380 --> 00:06:33,780
authenticated in analytic systems and

171
00:06:33,780 --> 00:06:36,060
that uses a specific record type to Mark

172
00:06:36,060 --> 00:06:40,020
empty intervals in the namespace so um

173
00:06:40,020 --> 00:06:42,539
that also specifies the record types

174
00:06:42,539 --> 00:06:44,880
present at the interval boundaries and

175
00:06:44,880 --> 00:06:46,919
um yeah but it does not cover record

176
00:06:46,919 --> 00:06:48,300
Presence at the level of signature

177
00:06:48,300 --> 00:06:50,160
algorithms so just this okay there's a

178
00:06:50,160 --> 00:06:51,900
Genus key record or there's no DNS key

179
00:06:51,900 --> 00:06:54,060
record rather but it does not say there

180
00:06:54,060 --> 00:06:56,100
is one of algorithm 8.

181
00:06:56,100 --> 00:06:58,860
to protect algorithm presence uh there's

182
00:06:58,860 --> 00:07:01,020
a requirement built into a DNS Tech into

183
00:07:01,020 --> 00:07:02,819
the specification which says as soon as

184
00:07:02,819 --> 00:07:05,100
there's a DS record of algorithm a they

185
00:07:05,100 --> 00:07:06,960
also must be at least one in sphere of

186
00:07:06,960 --> 00:07:09,180
algorithm a and as soon as there's such

187
00:07:09,180 --> 00:07:10,800
an ASCII record there also must be

188
00:07:10,800 --> 00:07:13,199
signatures of that algorithm on all data

189
00:07:13,199 --> 00:07:15,680
in the zone

190
00:07:16,080 --> 00:07:18,479
what algorithm do exists so there are

191
00:07:18,479 --> 00:07:21,000
many of them quite a few here those

192
00:07:21,000 --> 00:07:22,319
which are standardized no need to

193
00:07:22,319 --> 00:07:25,319
remember them all so we just quickly go

194
00:07:25,319 --> 00:07:29,099
over them they are for RS ABS ones

195
00:07:29,099 --> 00:07:32,340
four which are using um ellipticals

196
00:07:32,340 --> 00:07:34,800
to private algorithm numbers which are

197
00:07:34,800 --> 00:07:36,180
essentially used for development

198
00:07:36,180 --> 00:07:37,259
purposes

199
00:07:37,259 --> 00:07:40,740
and also two Shar one based ones

200
00:07:40,740 --> 00:07:42,960
these two are being phased off at the

201
00:07:42,960 --> 00:07:44,699
moment which we can see that they are

202
00:07:44,699 --> 00:07:46,620
not recommended to sign zones with a

203
00:07:46,620 --> 00:07:50,699
longer and reserves to support them

204
00:07:50,699 --> 00:07:52,500
there are others which are being faced

205
00:07:52,500 --> 00:07:54,120
in which is essentially the way around

206
00:07:54,120 --> 00:07:56,759
first resolvers adopt them and then they

207
00:07:56,759 --> 00:07:59,819
will be used for running zones

208
00:07:59,819 --> 00:08:02,880
as a very rough rule of thumb we can say

209
00:08:02,880 --> 00:08:04,380
um just to keep it in the back of our

210
00:08:04,380 --> 00:08:06,360
heads very rough rule of thumb uh the

211
00:08:06,360 --> 00:08:07,620
higher the algorithm number the more

212
00:08:07,620 --> 00:08:10,220
secure it is

213
00:08:11,639 --> 00:08:13,440
therefore digest types which have been

214
00:08:13,440 --> 00:08:15,840
standardized and in effect three of them

215
00:08:15,840 --> 00:08:18,799
are in active use

216
00:08:19,560 --> 00:08:20,699
okay

217
00:08:20,699 --> 00:08:21,960
um so when we conducted our

218
00:08:21,960 --> 00:08:23,819
investigations we investigated several

219
00:08:23,819 --> 00:08:25,919
domain sets so um there's top level

220
00:08:25,919 --> 00:08:27,780
domains which we investigated from which

221
00:08:27,780 --> 00:08:32,039
more than 90 are secure signed and we

222
00:08:32,039 --> 00:08:34,860
also investigated the top 500 000 Tranco

223
00:08:34,860 --> 00:08:38,458
domains and uh found yeah essentially

224
00:08:38,458 --> 00:08:40,919
the other way around less than

225
00:08:40,919 --> 00:08:42,839
um 10 of them even less than five

226
00:08:42,839 --> 00:08:44,520
percent of them are secured using the

227
00:08:44,520 --> 00:08:46,800
NSA

228
00:08:46,800 --> 00:08:48,959
uh and on the resolver side of things we

229
00:08:48,959 --> 00:08:51,000
had nine resolvers in our lab which we

230
00:08:51,000 --> 00:08:52,680
investigated which are very popular

231
00:08:52,680 --> 00:08:55,740
binds underground others and also eight

232
00:08:55,740 --> 00:08:57,600
popular open resolver services so I

233
00:08:57,600 --> 00:09:00,000
think Google and cloudflare

234
00:09:00,000 --> 00:09:02,700
we also looked at 15 000 openly

235
00:09:02,700 --> 00:09:04,560
accessible resolvers from a pod scan on

236
00:09:04,560 --> 00:09:07,440
the ipv4 address space and found three

237
00:09:07,440 --> 00:09:09,060
thousand validating resolvers among them

238
00:09:09,060 --> 00:09:12,000
conforming to roughly 20 here

239
00:09:12,000 --> 00:09:14,580
uh yes which will be basis of the

240
00:09:14,580 --> 00:09:17,779
numbers we will see in the following

241
00:09:18,300 --> 00:09:20,220
Okay so

242
00:09:20,220 --> 00:09:22,800
let's move to the attacks

243
00:09:22,800 --> 00:09:24,240
um our Checker model is an unfath

244
00:09:24,240 --> 00:09:27,000
attacker which is essentially covered by

245
00:09:27,000 --> 00:09:28,800
the thread model which Dean essay uses

246
00:09:28,800 --> 00:09:31,019
so the attackers positioned between the

247
00:09:31,019 --> 00:09:33,060
resolver and the authoritative server

248
00:09:33,060 --> 00:09:35,399
and the attacker can send reads modify

249
00:09:35,399 --> 00:09:37,680
duplicate delay suppress messages

250
00:09:37,680 --> 00:09:40,380
whatever but it does not know the

251
00:09:40,380 --> 00:09:42,240
cryptographic secrets to break the

252
00:09:42,240 --> 00:09:44,040
cryptography

253
00:09:44,040 --> 00:09:46,620
and to give explanation simple we

254
00:09:46,620 --> 00:09:48,180
further assume here that the attacker

255
00:09:48,180 --> 00:09:49,800
can trigger resolution by the resolver

256
00:09:49,800 --> 00:09:52,980
for instance by just sending a query and

257
00:09:52,980 --> 00:09:56,240
we also assume empty caches

258
00:10:07,080 --> 00:10:08,160
let's have a look at the attack

259
00:10:08,160 --> 00:10:11,220
procedure so first the objective of the

260
00:10:11,220 --> 00:10:12,480
attacker and the specific attack

261
00:10:12,480 --> 00:10:13,560
scenario

262
00:10:13,560 --> 00:10:15,839
as to impersonate the authoritative name

263
00:10:15,839 --> 00:10:19,019
server of the victim domain and um it

264
00:10:19,019 --> 00:10:21,000
does so because uh Mana middle position

265
00:10:21,000 --> 00:10:23,580
is typically expensive to achieve and um

266
00:10:23,580 --> 00:10:26,160
also to sustain so

267
00:10:26,160 --> 00:10:28,140
um the attacker proceeds by

268
00:10:28,140 --> 00:10:30,480
first sending a request for the name

269
00:10:30,480 --> 00:10:32,040
server for the interest records of the

270
00:10:32,040 --> 00:10:34,140
name server to the recursive resolver

271
00:10:34,140 --> 00:10:35,880
the recursor for Server will then do the

272
00:10:35,880 --> 00:10:37,260
resolution thing which we saw in an

273
00:10:37,260 --> 00:10:39,120
earlier slide and eventually we referred

274
00:10:39,120 --> 00:10:41,160
to the authoritative name server

275
00:10:41,160 --> 00:10:43,380
so I would at that point in time it

276
00:10:43,380 --> 00:10:45,060
already knows the address of the name

277
00:10:45,060 --> 00:10:47,519
server but because these records have

278
00:10:47,519 --> 00:10:49,140
been obtained on a referral response

279
00:10:49,140 --> 00:10:50,760
they are not too trusted and it says

280
00:10:50,760 --> 00:10:52,680
okay I really want to know it exactly

281
00:10:52,680 --> 00:10:55,380
and I will ask the authoritative name so

282
00:10:55,380 --> 00:10:58,399
for confirming that

283
00:10:58,680 --> 00:11:00,899
so it sends the query for those records

284
00:11:00,899 --> 00:11:02,940
and the authoritative name server

285
00:11:02,940 --> 00:11:05,279
responds with the authentic values which

286
00:11:05,279 --> 00:11:06,839
I covered also by signature in the

287
00:11:06,839 --> 00:11:07,800
response

288
00:11:07,800 --> 00:11:10,079
the attacker will intercept it and

289
00:11:10,079 --> 00:11:12,420
replace the records the data of the

290
00:11:12,420 --> 00:11:15,120
records according to the specific detect

291
00:11:15,120 --> 00:11:19,579
semantics so here to obtain the

292
00:11:19,579 --> 00:11:22,500
impersonation the address records and

293
00:11:22,500 --> 00:11:24,240
also the attacker will fiddle with the

294
00:11:24,240 --> 00:11:25,980
signatures according to specific

295
00:11:25,980 --> 00:11:27,779
downgrade mechanics which we will have a

296
00:11:27,779 --> 00:11:30,420
look at in a minute

297
00:11:30,420 --> 00:11:33,180
So eventually possibly before usually

298
00:11:33,180 --> 00:11:35,220
after that the recursor free solver

299
00:11:35,220 --> 00:11:36,720
would query for the dineski record set

300
00:11:36,720 --> 00:11:38,519
of the victim Zone

301
00:11:38,519 --> 00:11:40,260
which the authoritative server will

302
00:11:40,260 --> 00:11:41,700
again respond to with the authentic

303
00:11:41,700 --> 00:11:44,399
values and our attacker again

304
00:11:44,399 --> 00:11:46,680
um intercept those and manipulates those

305
00:11:46,680 --> 00:11:48,060
in transit

306
00:11:48,060 --> 00:11:51,600
again according to specific mechanics

307
00:11:51,600 --> 00:11:53,880
so the recursive resolver will then do

308
00:11:53,880 --> 00:11:55,560
the validation of the validation chain

309
00:11:55,560 --> 00:11:58,800
and assuming that worked we'll store the

310
00:11:58,800 --> 00:12:02,459
values and have them in its cache

311
00:12:02,459 --> 00:12:04,940
so now the attacker can stop the

312
00:12:04,940 --> 00:12:07,440
mechanism which it used to obtain them

313
00:12:07,440 --> 00:12:09,600
in a middle position and will have a

314
00:12:09,600 --> 00:12:11,399
successful impersonation of the

315
00:12:11,399 --> 00:12:13,800
authoritative name server

316
00:12:13,800 --> 00:12:16,800
if now another client comes and sends a

317
00:12:16,800 --> 00:12:18,180
query for the victim domain to the

318
00:12:18,180 --> 00:12:19,980
course of your server

319
00:12:19,980 --> 00:12:21,839
that February will be directed to the

320
00:12:21,839 --> 00:12:24,300
attacker which will then respond to

321
00:12:24,300 --> 00:12:26,940
whatever evil records there's a chance

322
00:12:26,940 --> 00:12:29,660
to put there

323
00:12:31,500 --> 00:12:34,019
okay so um first class of attacks is a

324
00:12:34,019 --> 00:12:36,480
text to weaken security

325
00:12:36,480 --> 00:12:37,920
um here the goal of the attackers to

326
00:12:37,920 --> 00:12:39,240
make the resolver use the weakest

327
00:12:39,240 --> 00:12:41,459
possible validation path and then attack

328
00:12:41,459 --> 00:12:43,139
the weakest chain and Link of trust

329
00:12:43,139 --> 00:12:45,360
which very roughly conforms to the

330
00:12:45,360 --> 00:12:47,940
downgrade to export in the SSL downgrade

331
00:12:47,940 --> 00:12:50,279
attacks we know

332
00:12:50,279 --> 00:12:52,200
um I've brought you two specific

333
00:12:52,200 --> 00:12:54,360
mechanics here which is downgrading to

334
00:12:54,360 --> 00:12:56,820
weaker DS digest and downgrading to

335
00:12:56,820 --> 00:12:58,320
weaker signatures

336
00:12:58,320 --> 00:13:00,600
so both essentially have been mentioned

337
00:13:00,600 --> 00:13:03,540
in specific variations in an RCS already

338
00:13:03,540 --> 00:13:06,180
but yeah we essentially generalized them

339
00:13:06,180 --> 00:13:10,459
and so why not investigate them

340
00:13:10,860 --> 00:13:13,560
for note on Sharon and in essec um so

341
00:13:13,560 --> 00:13:15,600
xiaone is broken in terms of crypto

342
00:13:15,600 --> 00:13:18,180
analysis but um

343
00:13:18,180 --> 00:13:19,980
yeah attacks from Indian essay cases

344
00:13:19,980 --> 00:13:21,839
have been demonstrated for instance back

345
00:13:21,839 --> 00:13:24,480
in 2019 but practical attacks on the

346
00:13:24,480 --> 00:13:26,820
aspect itself have not yet been

347
00:13:26,820 --> 00:13:29,220
published but I expected to be published

348
00:13:29,220 --> 00:13:30,720
in the near future

349
00:13:30,720 --> 00:13:32,220
or at least to

350
00:13:32,220 --> 00:13:34,440
happen

351
00:13:34,440 --> 00:13:36,959
so in consequence Shawan is being phased

352
00:13:36,959 --> 00:13:38,880
out since about 2019 but it's still

353
00:13:38,880 --> 00:13:41,459
widely used so in its forms of the

354
00:13:41,459 --> 00:13:43,620
signature algorithms 5 and 7 which are

355
00:13:43,620 --> 00:13:46,320
not recommended and digest type 1 which

356
00:13:46,320 --> 00:13:48,839
is even prohibited but as we can see in

357
00:13:48,839 --> 00:13:51,019
this table here even top level domains

358
00:13:51,019 --> 00:13:54,300
exist which make exclusive use of Xiao

359
00:13:54,300 --> 00:13:57,899
one to be protected

360
00:13:57,899 --> 00:14:00,839
yes uh results still must support it and

361
00:14:00,839 --> 00:14:03,899
virtually all of them do

362
00:14:03,899 --> 00:14:07,200
and yes so I'll check on our aims at

363
00:14:07,200 --> 00:14:09,180
exporting this

364
00:14:09,180 --> 00:14:10,800
first mechanism for downgrade is

365
00:14:10,800 --> 00:14:13,560
downgrading to weaker DS Digest

366
00:14:13,560 --> 00:14:15,180
um here we have 2DS records in the

367
00:14:15,180 --> 00:14:16,320
parent Zone

368
00:14:16,320 --> 00:14:19,200
one week I digest and one stronger and

369
00:14:19,200 --> 00:14:22,620
both are supported by the resolver

370
00:14:22,620 --> 00:14:24,420
there's one Dynasty in the victim Zone

371
00:14:24,420 --> 00:14:28,079
which matches both digests and we assume

372
00:14:28,079 --> 00:14:29,459
that the attacker can break the weaker

373
00:14:29,459 --> 00:14:32,779
one so imagine show on

374
00:14:33,779 --> 00:14:36,540
the technology dineski for the weaker

375
00:14:36,540 --> 00:14:38,100
algorithm and replaces the authentic

376
00:14:38,100 --> 00:14:39,839
Dynasty and Ollie's signatures in the

377
00:14:39,839 --> 00:14:42,600
responses which it intercepts and spoofs

378
00:14:42,600 --> 00:14:44,160
the target's own data of course

379
00:14:44,160 --> 00:14:46,920
and as we see in this figure now the

380
00:14:46,920 --> 00:14:48,720
stronger digest that does not match

381
00:14:48,720 --> 00:14:52,019
anything anymore and the path via the

382
00:14:52,019 --> 00:14:54,480
stronger digest by that becomes invalid

383
00:14:54,480 --> 00:14:56,760
the question now is will the resolver

384
00:14:56,760 --> 00:14:58,380
fall back to the validation path why

385
00:14:58,380 --> 00:15:01,339
otherwise record

386
00:15:01,440 --> 00:15:03,240
turns out there are actually many

387
00:15:03,240 --> 00:15:06,240
vulnerable servers against that so in

388
00:15:06,240 --> 00:15:08,279
the open resolvers which we obtained

389
00:15:08,279 --> 00:15:10,560
from pod scans are more than 90 of them

390
00:15:10,560 --> 00:15:12,660
were willing to reduce the queue to at

391
00:15:12,660 --> 00:15:15,899
least two weaker DS edges and about if

392
00:15:15,899 --> 00:15:17,579
one of them will do even if the week I

393
00:15:17,579 --> 00:15:19,500
want to start one

394
00:15:19,500 --> 00:15:21,779
in our lab only powered in US enforce

395
00:15:21,779 --> 00:15:23,760
the strongest possibility as digest um

396
00:15:23,760 --> 00:15:26,060
by 9 and the novel solver

397
00:15:26,060 --> 00:15:28,199
at least enforce the stronger than

398
00:15:28,199 --> 00:15:30,680
xiaomi estudges

399
00:15:30,680 --> 00:15:33,959
our popular open resolvers that we found

400
00:15:33,959 --> 00:15:35,820
only Google and Suzette Nick to enforce

401
00:15:35,820 --> 00:15:38,279
stronger than shawandia stages and

402
00:15:38,279 --> 00:15:40,380
essentially all the others accepted that

403
00:15:40,380 --> 00:15:44,060
we could digest even if it was shown

404
00:15:45,000 --> 00:15:47,040
okay so the next mechanism is

405
00:15:47,040 --> 00:15:49,620
downgrading to weaker signatures

406
00:15:49,620 --> 00:15:51,300
uh here the Zone assigned with two

407
00:15:51,300 --> 00:15:54,360
algorithms one weaker and one stronger

408
00:15:54,360 --> 00:15:56,880
both are supported by the resolver

409
00:15:56,880 --> 00:15:58,860
and that would be typical for his own

410
00:15:58,860 --> 00:16:00,300
which is in transit from one algorithm

411
00:16:00,300 --> 00:16:02,339
to the other so the Zone can either be

412
00:16:02,339 --> 00:16:04,740
completely insecure in transit which is

413
00:16:04,740 --> 00:16:07,800
obviously not a good thing or it is uh

414
00:16:07,800 --> 00:16:10,079
otherwise signed with two algorithms for

415
00:16:10,079 --> 00:16:11,760
some point in time

416
00:16:11,760 --> 00:16:13,860
our assumption again is that the

417
00:16:13,860 --> 00:16:16,019
attacker can forge Zone data for the

418
00:16:16,019 --> 00:16:18,500
weaker one

419
00:16:18,779 --> 00:16:20,760
so here the procedure is pretty

420
00:16:20,760 --> 00:16:22,560
straightforward so the attacker just

421
00:16:22,560 --> 00:16:24,540
places the spoofed data in the DNS

422
00:16:24,540 --> 00:16:26,699
response and by that the signatures of

423
00:16:26,699 --> 00:16:29,040
the stronger key become invalid

424
00:16:29,040 --> 00:16:32,940
so this is kind of civil obvious

425
00:16:32,940 --> 00:16:35,279
um optional clever cover-up strategy for

426
00:16:35,279 --> 00:16:37,019
the attacker would be to just strip the

427
00:16:37,019 --> 00:16:38,040
records off

428
00:16:38,040 --> 00:16:39,660
and the question now again is will the

429
00:16:39,660 --> 00:16:41,100
resolver accept the weaker signatures

430
00:16:41,100 --> 00:16:43,380
even if stronger ones should be present

431
00:16:43,380 --> 00:16:45,920
and valid

432
00:16:46,079 --> 00:16:48,600
let's see what the RC says with that

433
00:16:48,600 --> 00:16:51,120
um well this one for example since since

434
00:16:51,120 --> 00:16:52,800
each record must be signed with each

435
00:16:52,800 --> 00:16:54,600
algorithm present a malicious party

436
00:16:54,600 --> 00:16:56,639
cannot filter off the stronger ones and

437
00:16:56,639 --> 00:16:58,380
force the validator to use the weaker

438
00:16:58,380 --> 00:17:01,259
signatures if both are present so we

439
00:17:01,259 --> 00:17:03,540
should be secure right

440
00:17:03,540 --> 00:17:05,579
turns out we're not

441
00:17:05,579 --> 00:17:07,199
um all of the resolvers which we

442
00:17:07,199 --> 00:17:08,579
investigated actually fall back to

443
00:17:08,579 --> 00:17:10,619
weaker signatures even if the weaker

444
00:17:10,619 --> 00:17:13,559
signatures are one based and the reason

445
00:17:13,559 --> 00:17:16,679
for this is this update RFC here

446
00:17:16,679 --> 00:17:18,119
which essentially just says that

447
00:17:18,119 --> 00:17:20,459
validators should accept any single path

448
00:17:20,459 --> 00:17:23,099
they are presented with when it comes to

449
00:17:23,099 --> 00:17:25,020
Signature algorithms

450
00:17:25,020 --> 00:17:27,660
this RC aims at facilitating algorithm

451
00:17:27,660 --> 00:17:30,000
updates for very large zones but while

452
00:17:30,000 --> 00:17:32,040
we're getting rid of one really bites us

453
00:17:32,040 --> 00:17:36,020
back some way so bad luck

454
00:17:37,440 --> 00:17:39,780
okay so sum it up our text to weakenly

455
00:17:39,780 --> 00:17:42,240
in a sec um as a countermeasure against

456
00:17:42,240 --> 00:17:45,120
long rating to weaker desk digest

457
00:17:45,120 --> 00:17:46,860
um a suggestion is to require the

458
00:17:46,860 --> 00:17:48,360
strongest present yes digits to be used

459
00:17:48,360 --> 00:17:49,740
for the construction of the validation

460
00:17:49,740 --> 00:17:51,960
path especially if the weaker one is

461
00:17:51,960 --> 00:17:52,980
show one

462
00:17:52,980 --> 00:17:54,840
and when it comes to countermeasures

463
00:17:54,840 --> 00:17:57,360
against downgrading to weaker signature

464
00:17:57,360 --> 00:17:59,460
well we can essentially just hope that

465
00:17:59,460 --> 00:18:02,160
zones migrate away from Travon fast

466
00:18:02,160 --> 00:18:03,960
enough so because

467
00:18:03,960 --> 00:18:06,419
insisting on signatures of the strongest

468
00:18:06,419 --> 00:18:08,700
algorithm would risk disconnecting SQL

469
00:18:08,700 --> 00:18:11,419
domains in the end

470
00:18:13,080 --> 00:18:14,700
okay so

471
00:18:14,700 --> 00:18:16,260
um the next class is a text to Greek

472
00:18:16,260 --> 00:18:18,419
security to break security

473
00:18:18,419 --> 00:18:21,720
why that well um breaking even a weaker

474
00:18:21,720 --> 00:18:23,160
algorithm is still quite about to jump

475
00:18:23,160 --> 00:18:25,559
honestly and also for sure one we're not

476
00:18:25,559 --> 00:18:27,059
yeah not there yet

477
00:18:27,059 --> 00:18:30,240
uh so we as a research team found ways

478
00:18:30,240 --> 00:18:32,220
around that didn't affect dong where to

479
00:18:32,220 --> 00:18:33,780
text to break security

480
00:18:33,780 --> 00:18:35,580
these are in effect roughly comparable

481
00:18:35,580 --> 00:18:38,280
to downgrade attacks to know or SSL

482
00:18:38,280 --> 00:18:40,919
stripping from our SSL analogy which we

483
00:18:40,919 --> 00:18:42,840
had before

484
00:18:42,840 --> 00:18:44,160
um on these attacks exploit the

485
00:18:44,160 --> 00:18:45,660
validation logic that assigns the

486
00:18:45,660 --> 00:18:48,720
security State student s data

487
00:18:48,720 --> 00:18:50,640
which security States

488
00:18:50,640 --> 00:18:53,760
um therefore them first is secure

489
00:18:53,760 --> 00:18:55,440
which says that the full chain of trust

490
00:18:55,440 --> 00:18:57,179
has proved to be authentic

491
00:18:57,179 --> 00:18:58,679
and then a response to the client

492
00:18:58,679 --> 00:19:00,419
carries the records a question along

493
00:19:00,419 --> 00:19:02,760
with the signatures covering them and

494
00:19:02,760 --> 00:19:05,700
the response also has the authenticated

495
00:19:05,700 --> 00:19:08,340
data message like that but the slack is

496
00:19:08,340 --> 00:19:09,900
effectively ignored by most clients in

497
00:19:09,900 --> 00:19:12,860
virtually all use cases

498
00:19:12,900 --> 00:19:15,840
the opposite of this this is bogus which

499
00:19:15,840 --> 00:19:18,000
says uh no valid chain of trust could be

500
00:19:18,000 --> 00:19:19,679
constructed that couldn't happen either

501
00:19:19,679 --> 00:19:22,200
because signatures fail to validate or

502
00:19:22,200 --> 00:19:25,140
if the because in essay records were

503
00:19:25,140 --> 00:19:26,220
missing

504
00:19:26,220 --> 00:19:28,440
the effect is that a software error

505
00:19:28,440 --> 00:19:30,000
responses sent to a clients which does

506
00:19:30,000 --> 00:19:33,059
not carry any Zone data

507
00:19:33,059 --> 00:19:34,980
there's also indeterminate which is not

508
00:19:34,980 --> 00:19:36,240
too relevant here

509
00:19:36,240 --> 00:19:39,120
um yeah for instance in cases of weird

510
00:19:39,120 --> 00:19:41,820
pkis where we don't have a trust anchor

511
00:19:41,820 --> 00:19:43,020
in the root

512
00:19:43,020 --> 00:19:45,360
what's more important is insecure

513
00:19:45,360 --> 00:19:47,640
which means the records are provably not

514
00:19:47,640 --> 00:19:49,080
secured in a way that the resolver can

515
00:19:49,080 --> 00:19:50,039
validate

516
00:19:50,039 --> 00:19:51,419
this can happen for instance because

517
00:19:51,419 --> 00:19:53,100
there's an authenticator proof that now

518
00:19:53,100 --> 00:19:54,960
the S record exists at some point in the

519
00:19:54,960 --> 00:19:58,020
nest hierarchy I think insect records

520
00:19:58,020 --> 00:19:59,400
which I mentioned before authenticated

521
00:19:59,400 --> 00:20:01,980
denial of existence

522
00:20:01,980 --> 00:20:04,320
um and when doing that

523
00:20:04,320 --> 00:20:06,240
um authenticated the S records with

524
00:20:06,240 --> 00:20:08,100
unsupported digest types unsupported

525
00:20:08,100 --> 00:20:11,039
algorithms do not exist

526
00:20:11,039 --> 00:20:12,660
um if a record has been found to be

527
00:20:12,660 --> 00:20:14,760
insecure the response to the client then

528
00:20:14,760 --> 00:20:17,039
carries the record in question uh

529
00:20:17,039 --> 00:20:19,320
without the authoritative authenticated

530
00:20:19,320 --> 00:20:21,539
data flag

531
00:20:21,539 --> 00:20:23,280
or next to text trick the resolver into

532
00:20:23,280 --> 00:20:26,400
marking the records in secure

533
00:20:26,400 --> 00:20:29,580
first mechanism downgrading signature

534
00:20:29,580 --> 00:20:31,740
algorithm numbers on the signature

535
00:20:31,740 --> 00:20:32,760
records

536
00:20:32,760 --> 00:20:34,860
here we have just any properly protected

537
00:20:34,860 --> 00:20:37,380
genetic Zone and we specifically tested

538
00:20:37,380 --> 00:20:39,480
for a single algorithm zones so here for

539
00:20:39,480 --> 00:20:41,400
instance one which is secured using

540
00:20:41,400 --> 00:20:43,740
algorithm 13.

541
00:20:43,740 --> 00:20:45,780
and in the attack

542
00:20:45,780 --> 00:20:47,580
the attacker rewrites the signature

543
00:20:47,580 --> 00:20:49,860
algorithm numbers to one that the

544
00:20:49,860 --> 00:20:51,539
resolver does not support

545
00:20:51,539 --> 00:20:53,640
thereby the chain of trust is broken at

546
00:20:53,640 --> 00:20:56,640
the last link so the signature level

547
00:20:56,640 --> 00:20:59,160
we investigated this and we found Google

548
00:20:59,160 --> 00:21:01,140
public DNS to be vulnerable to this type

549
00:21:01,140 --> 00:21:03,120
of attack and since so many zones and

550
00:21:03,120 --> 00:21:05,400
users were affected it has been reported

551
00:21:05,400 --> 00:21:09,200
very fast and also been fixed

552
00:21:10,140 --> 00:21:15,960
okay our next type of attacks now is um

553
00:21:15,960 --> 00:21:18,780
yeah essentially it observes what can go

554
00:21:18,780 --> 00:21:21,059
on when one when things get experimental

555
00:21:21,059 --> 00:21:23,160
so we have a more complex chain of trust

556
00:21:23,160 --> 00:21:25,440
imagine a Zone operator adds a freshly

557
00:21:25,440 --> 00:21:27,179
standardized algorithm to the Zone which

558
00:21:27,179 --> 00:21:28,799
is not supported by memory servers yet

559
00:21:28,799 --> 00:21:31,320
or uses a private algorithm addition to

560
00:21:31,320 --> 00:21:34,080
a non-private one but as the letter one

561
00:21:34,080 --> 00:21:38,600
is very very let's go for the first one

562
00:21:39,360 --> 00:21:42,299
our mechanism one now is stripping off

563
00:21:42,299 --> 00:21:45,179
supported signature records here the

564
00:21:45,179 --> 00:21:46,140
zonus signed with two different

565
00:21:46,140 --> 00:21:48,659
algorithms one is supported by the

566
00:21:48,659 --> 00:21:51,840
resolver and one is not supported and

567
00:21:51,840 --> 00:21:53,820
the S records of the parent at least for

568
00:21:53,820 --> 00:21:55,919
the supported one

569
00:21:55,919 --> 00:21:58,200
note that here at inesquees of both

570
00:21:58,200 --> 00:21:59,820
algorithms as well as the signature

571
00:21:59,820 --> 00:22:02,039
records are present so 8 and 5 15 are

572
00:22:02,039 --> 00:22:04,820
all represented here

573
00:22:05,460 --> 00:22:08,100
the attacker goes on um dropping off the

574
00:22:08,100 --> 00:22:09,600
support and signatures records from the

575
00:22:09,600 --> 00:22:12,360
DNS messages to the resolver and thereby

576
00:22:12,360 --> 00:22:14,340
only leaves unsupported algorithms with

577
00:22:14,340 --> 00:22:16,380
respect to signatures records

578
00:22:16,380 --> 00:22:18,179
so here the signature record of

579
00:22:18,179 --> 00:22:20,159
algorithm H should be present but it is

580
00:22:20,159 --> 00:22:22,679
not and thereby the validation path is

581
00:22:22,679 --> 00:22:26,480
enforced via the unsupported algorithm

582
00:22:26,940 --> 00:22:29,700
we investigated this vulnerability and

583
00:22:29,700 --> 00:22:30,960
found

584
00:22:30,960 --> 00:22:32,760
good to know no resolvers in the lab

585
00:22:32,760 --> 00:22:35,640
available good luck but actually two

586
00:22:35,640 --> 00:22:37,380
popular open resolver Services namely

587
00:22:37,380 --> 00:22:39,059
Cloud Google web vulnerable to this type

588
00:22:39,059 --> 00:22:39,960
of attack

589
00:22:39,960 --> 00:22:42,120
and speaking of attack surface

590
00:22:42,120 --> 00:22:42,780
um

591
00:22:42,780 --> 00:22:45,000
yeah roughly seven to eight percent of

592
00:22:45,000 --> 00:22:47,460
the uh resolvers from our data set were

593
00:22:47,460 --> 00:22:50,780
vulnerable in this type of attack

594
00:22:51,840 --> 00:22:53,340
next mechanism

595
00:22:53,340 --> 00:22:54,179
um

596
00:22:54,179 --> 00:22:56,039
last but not least stripping of the

597
00:22:56,039 --> 00:22:59,240
unsupported dineski records

598
00:22:59,240 --> 00:23:01,860
two different algorithms one is

599
00:23:01,860 --> 00:23:03,299
supported by the resolver the other one

600
00:23:03,299 --> 00:23:04,260
is not

601
00:23:04,260 --> 00:23:07,620
and we have 1D and sq4 Edge for each of

602
00:23:07,620 --> 00:23:08,760
them

603
00:23:08,760 --> 00:23:12,419
and the S records for both at the parent

604
00:23:12,419 --> 00:23:14,460
yes as noted uh DNS keys for both

605
00:23:14,460 --> 00:23:16,799
records of our present as well as

606
00:23:16,799 --> 00:23:18,780
signatures

607
00:23:18,780 --> 00:23:21,299
so the attacker then goes on and drops

608
00:23:21,299 --> 00:23:22,980
the supported in ski records and all the

609
00:23:22,980 --> 00:23:25,200
searching all its signatures

610
00:23:25,200 --> 00:23:27,720
from any DNS messages to the resolver

611
00:23:27,720 --> 00:23:30,059
and again leaves only unsupported

612
00:23:30,059 --> 00:23:32,340
algorithms with respect to DNS key and

613
00:23:32,340 --> 00:23:34,080
signature records

614
00:23:34,080 --> 00:23:36,900
note here the NSP of algorithm H will be

615
00:23:36,900 --> 00:23:39,000
present as well as the signature records

616
00:23:39,000 --> 00:23:41,640
of algorithm 8. again the validation

617
00:23:41,640 --> 00:23:44,159
path is enforced to be routed via the

618
00:23:44,159 --> 00:23:47,120
unsupported algorithm

619
00:23:48,539 --> 00:23:52,140
yes so um we had one implementation

620
00:23:52,140 --> 00:23:54,120
um in our lab which was vulnerable to

621
00:23:54,120 --> 00:23:55,919
this attack which was a Windows server

622
00:23:55,919 --> 00:23:57,600
and the recursive DNS role and all

623
00:23:57,600 --> 00:23:59,340
tested Windows Server versions

624
00:23:59,340 --> 00:24:01,320
and also one popular

625
00:24:01,320 --> 00:24:03,539
um resolver was vulnerable against this

626
00:24:03,539 --> 00:24:06,419
type of attack which was of DNS

627
00:24:06,419 --> 00:24:08,280
in terms of attack surface on the open

628
00:24:08,280 --> 00:24:09,299
internet

629
00:24:09,299 --> 00:24:11,280
um five to six percent of resolvers were

630
00:24:11,280 --> 00:24:13,580
vulnerable

631
00:24:14,820 --> 00:24:16,080
okay

632
00:24:16,080 --> 00:24:16,860
um

633
00:24:16,860 --> 00:24:19,020
how could these attacks be prevented

634
00:24:19,020 --> 00:24:21,780
well um suggested countermeasure is when

635
00:24:21,780 --> 00:24:23,340
considering algorithms the resolver

636
00:24:23,340 --> 00:24:25,740
should decide insecure solely based on

637
00:24:25,740 --> 00:24:28,320
the DS records so as soon as there's one

638
00:24:28,320 --> 00:24:30,240
supported the S record they should

639
00:24:30,240 --> 00:24:32,460
really insist on at least one supported

640
00:24:32,460 --> 00:24:34,620
Gene ski record and as soon as there's

641
00:24:34,620 --> 00:24:36,900
such a supported dineski record the

642
00:24:36,900 --> 00:24:38,880
resolvers should insist on a supported

643
00:24:38,880 --> 00:24:42,679
signature records on all Zone meter

644
00:24:44,220 --> 00:24:46,200
okay

645
00:24:46,200 --> 00:24:48,480
let's sum it up so our recommendations

646
00:24:48,480 --> 00:24:51,000
to resolver operators and developers are

647
00:24:51,000 --> 00:24:52,980
essentially derived from the

648
00:24:52,980 --> 00:24:54,900
countermeasures so require the strongest

649
00:24:54,900 --> 00:24:56,640
present DS digest to work for validation

650
00:24:56,640 --> 00:24:58,919
so that the attacker cannot downgrade to

651
00:24:58,919 --> 00:25:00,360
weaker yesterday just

652
00:25:00,360 --> 00:25:04,080
and as we saw right now they should only

653
00:25:04,080 --> 00:25:06,059
consider the S records for deciding to

654
00:25:06,059 --> 00:25:07,860
Mark data insecure because of

655
00:25:07,860 --> 00:25:09,720
unsupported algorithms because otherwise

656
00:25:09,720 --> 00:25:13,020
the attacker could go on and strip off

657
00:25:13,020 --> 00:25:15,480
um unsupported algorithms and yeah

658
00:25:15,480 --> 00:25:18,240
through its evil Deeds

659
00:25:18,240 --> 00:25:20,640
our recommendations for Zone operators

660
00:25:20,640 --> 00:25:22,380
um so first of all please move away from

661
00:25:22,380 --> 00:25:24,299
travel as soon as possible

662
00:25:24,299 --> 00:25:26,580
and a second keep in mind that adding

663
00:25:26,580 --> 00:25:27,840
additional signatures of stronger

664
00:25:27,840 --> 00:25:29,159
algorithms does not increase security

665
00:25:29,159 --> 00:25:31,679
and as we saw it can even level security

666
00:25:31,679 --> 00:25:34,080
if these signature algorithms are not

667
00:25:34,080 --> 00:25:37,820
supported by vulnerable solvers

668
00:25:38,640 --> 00:25:41,830
that was it thank you for your attention

669
00:25:41,830 --> 00:25:44,949
[Music]

670
00:25:48,790 --> 00:25:51,889
[Music]

