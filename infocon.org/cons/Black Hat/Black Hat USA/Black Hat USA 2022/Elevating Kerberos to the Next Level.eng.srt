1
00:00:01,730 --> 00:00:03,720
[Music]

2
00:00:03,720 --> 00:00:06,720
foreign

3
00:00:08,360 --> 00:00:10,980
black hat it's been a long time since

4
00:00:10,980 --> 00:00:12,360
I've been here and it's even longer

5
00:00:12,360 --> 00:00:13,799
since I was actually presenting at black

6
00:00:13,799 --> 00:00:15,900
hat so it's good to be back so yeah

7
00:00:15,900 --> 00:00:17,520
we're going to be talking about Kerberos

8
00:00:17,520 --> 00:00:19,920
the clues in the title

9
00:00:19,920 --> 00:00:21,779
um just a very quick overview of who we

10
00:00:21,779 --> 00:00:23,880
are if you don't know I'm James I work

11
00:00:23,880 --> 00:00:26,100
in Google in Project zero specialized

12
00:00:26,100 --> 00:00:27,599
again finding interesting bugs in

13
00:00:27,599 --> 00:00:28,740
Windows

14
00:00:28,740 --> 00:00:30,720
yeah my name is Nick and I work an

15
00:00:30,720 --> 00:00:33,180
adversarial r d at netspy I also love

16
00:00:33,180 --> 00:00:36,680
fighting bugs in Windows so

17
00:00:36,920 --> 00:00:39,719
so of course this is only a 40 minute

18
00:00:39,719 --> 00:00:42,180
presentation it's quite short in in the

19
00:00:42,180 --> 00:00:43,920
grand scheme of things so we have to

20
00:00:43,920 --> 00:00:47,520
make some assumptions about UV audience

21
00:00:47,520 --> 00:00:50,399
first that you have a reasonable grasp

22
00:00:50,399 --> 00:00:52,260
of how Kerberos works or what Kerberos

23
00:00:52,260 --> 00:00:54,000
is because unfortunately we just don't

24
00:00:54,000 --> 00:00:55,920
have the time to actually go through

25
00:00:55,920 --> 00:00:58,320
that and tell you all the nitty-gritty

26
00:00:58,320 --> 00:01:00,180
details

27
00:01:00,180 --> 00:01:01,860
we're also going to be doing some stuff

28
00:01:01,860 --> 00:01:03,600
which sort of is related to existing

29
00:01:03,600 --> 00:01:06,840
remote attacks in Kerberos so having

30
00:01:06,840 --> 00:01:09,060
familiarity with those sort of parts of

31
00:01:09,060 --> 00:01:11,760
Kerberos is quite useful as well and

32
00:01:11,760 --> 00:01:14,100
this is not a talk about attacking

33
00:01:14,100 --> 00:01:15,840
Kerberos remotely this is all about

34
00:01:15,840 --> 00:01:17,460
privilege escalation on the local

35
00:01:17,460 --> 00:01:19,740
machine so if that's not really your

36
00:01:19,740 --> 00:01:21,900
thing then unfortunately it may not be

37
00:01:21,900 --> 00:01:24,560
the talk for you

38
00:01:24,720 --> 00:01:27,060
so let's actually start with a bit of a

39
00:01:27,060 --> 00:01:28,860
background on where we're going to go

40
00:01:28,860 --> 00:01:31,700
with this presentation

41
00:01:34,740 --> 00:01:37,200
remote clients to remote servers

42
00:01:37,200 --> 00:01:39,600
however in Windows at least there's

43
00:01:39,600 --> 00:01:41,700
nothing actually stopping you using

44
00:01:41,700 --> 00:01:43,439
Kerberos to authenticate to the same

45
00:01:43,439 --> 00:01:44,759
machine

46
00:01:44,759 --> 00:01:47,939
so when you log on to your Windows

47
00:01:47,939 --> 00:01:49,680
machine joint domain join Windows

48
00:01:49,680 --> 00:01:52,259
machine you make a request out to the

49
00:01:52,259 --> 00:01:55,560
the key distribution center with your

50
00:01:55,560 --> 00:01:57,899
with knowledge of your password and that

51
00:01:57,899 --> 00:01:58,740
generates something called a ticket

52
00:01:58,740 --> 00:02:01,439
granting ticket and this is then used to

53
00:02:01,439 --> 00:02:03,540
make authentication requests to other

54
00:02:03,540 --> 00:02:05,219
services

55
00:02:05,219 --> 00:02:08,160
inside that ticket granting ticket is

56
00:02:08,160 --> 00:02:09,720
something called a privileged attribute

57
00:02:09,720 --> 00:02:11,940
certificate or pack and this contains

58
00:02:11,940 --> 00:02:13,980
basically your user identity it contains

59
00:02:13,980 --> 00:02:16,020
who you are what groups you're a member

60
00:02:16,020 --> 00:02:18,180
member of

61
00:02:18,180 --> 00:02:20,099
so when we want to actually do Kerberos

62
00:02:20,099 --> 00:02:21,780
authentication we wouldn't actually just

63
00:02:21,780 --> 00:02:24,599
physically go out and use TCP sockets to

64
00:02:24,599 --> 00:02:26,640
talk to the KDC instead we'd use

65
00:02:26,640 --> 00:02:28,500
something called the sspi interface

66
00:02:28,500 --> 00:02:31,140
which is a way of communicating between

67
00:02:31,140 --> 00:02:34,080
user mode and lsas which will be LSA

68
00:02:34,080 --> 00:02:35,580
which is our local security Authority

69
00:02:35,580 --> 00:02:37,620
which is where basically authentication

70
00:02:37,620 --> 00:02:39,599
happens on Windows

71
00:02:39,599 --> 00:02:42,120
so what we usually usually do is call

72
00:02:42,120 --> 00:02:44,640
which an initialized security context

73
00:02:44,640 --> 00:02:46,739
and this would make a request to to the

74
00:02:46,739 --> 00:02:50,519
LSA and call into the Kerberos dll which

75
00:02:50,519 --> 00:02:52,620
is running inside the LSA process

76
00:02:52,620 --> 00:02:56,040
it takes your TGT and you say Okay I

77
00:02:56,040 --> 00:02:57,420
want to make a service authentication

78
00:02:57,420 --> 00:03:00,959
request to a local service please so for

79
00:03:00,959 --> 00:03:02,099
that you need something called a service

80
00:03:02,099 --> 00:03:04,140
principal name and this is like a

81
00:03:04,140 --> 00:03:06,660
descriptor of which service you want to

82
00:03:06,660 --> 00:03:08,040
talk to so in this case we're going to

83
00:03:08,040 --> 00:03:11,340
host slash ABC which is a service

84
00:03:11,340 --> 00:03:13,500
principal name which is owned by the

85
00:03:13,500 --> 00:03:15,420
current system

86
00:03:15,420 --> 00:03:18,060
and Kerberos packages up this request

87
00:03:18,060 --> 00:03:20,159
into a ticket granting server request

88
00:03:20,159 --> 00:03:23,760
packet sends it to the KDC KDC takes

89
00:03:23,760 --> 00:03:25,800
that service principal name and uses it

90
00:03:25,800 --> 00:03:28,620
to look up a long-term key and this key

91
00:03:28,620 --> 00:03:31,920
is actually a derivation of the computer

92
00:03:31,920 --> 00:03:34,140
account password for your local system

93
00:03:34,140 --> 00:03:36,599
so every every domain join system has a

94
00:03:36,599 --> 00:03:38,099
computer account which has a password

95
00:03:38,099 --> 00:03:41,640
and from that a key is derived now this

96
00:03:41,640 --> 00:03:44,700
key is then used to encrypt your service

97
00:03:44,700 --> 00:03:47,940
ticket and what the KDC also does is it

98
00:03:47,940 --> 00:03:49,680
can verify that that pack that it

99
00:03:49,680 --> 00:03:52,739
receives it can decrypt its tdt and it

100
00:03:52,739 --> 00:03:55,260
copies that pack that group information

101
00:03:55,260 --> 00:03:58,200
out of there into your service ticket

102
00:03:58,200 --> 00:04:01,500
so when you send it to the service with

103
00:04:01,500 --> 00:04:03,299
a different type of Kerberos packet the

104
00:04:03,299 --> 00:04:04,920
AP request

105
00:04:04,920 --> 00:04:08,580
the server can call another LSA function

106
00:04:08,580 --> 00:04:11,760
accept security context which will take

107
00:04:11,760 --> 00:04:13,560
the computer key it knows about because

108
00:04:13,560 --> 00:04:15,659
this is the local system decrypt the

109
00:04:15,659 --> 00:04:17,639
ticket extract the pack

110
00:04:17,639 --> 00:04:19,918
and then use that pack to generate a

111
00:04:19,918 --> 00:04:22,139
Windows access token and this can then

112
00:04:22,139 --> 00:04:24,419
be used to impersonate the user on the

113
00:04:24,419 --> 00:04:26,100
local system and perform operations on

114
00:04:26,100 --> 00:04:27,240
their behalf

115
00:04:27,240 --> 00:04:29,759
however the problem here is we've not

116
00:04:29,759 --> 00:04:31,979
gained anything like that pack which we

117
00:04:31,979 --> 00:04:34,740
authenticated with is just our pack so

118
00:04:34,740 --> 00:04:36,660
it has only the groups that we were

119
00:04:36,660 --> 00:04:39,000
granted by the KDC in the first place

120
00:04:39,000 --> 00:04:41,520
we've gained no privileges by doing this

121
00:04:41,520 --> 00:04:44,040
however there is an existing attack

122
00:04:44,040 --> 00:04:46,620
uh remote attack which allows you to

123
00:04:46,620 --> 00:04:48,720
basically specify an arbitrary pack and

124
00:04:48,720 --> 00:04:49,919
that's called the silver ticket attack

125
00:04:49,919 --> 00:04:51,660
so let's see how that would apply

126
00:04:51,660 --> 00:04:52,800
locally

127
00:04:52,800 --> 00:04:54,540
well first we need a key of some kind

128
00:04:54,540 --> 00:04:56,340
but we don't know the computer accounts

129
00:04:56,340 --> 00:04:59,340
key but it turns out we do know a key we

130
00:04:59,340 --> 00:05:02,220
know our user's key because every user

131
00:05:02,220 --> 00:05:04,440
in Kerberos has its own key derived from

132
00:05:04,440 --> 00:05:06,300
their password so we take our password

133
00:05:06,300 --> 00:05:09,419
we authenticate to LSA

134
00:05:09,419 --> 00:05:11,699
we can then in our own process

135
00:05:11,699 --> 00:05:14,160
generate that same key it requires

136
00:05:14,160 --> 00:05:16,380
nothing other than the password

137
00:05:16,380 --> 00:05:18,419
and we can just completely build a fake

138
00:05:18,419 --> 00:05:21,240
ticket for an arbitrary service

139
00:05:21,240 --> 00:05:23,820
and this has a pack which can contain

140
00:05:23,820 --> 00:05:25,440
anything we like

141
00:05:25,440 --> 00:05:28,080
and then we put we ourselves call accept

142
00:05:28,080 --> 00:05:30,000
security context

143
00:05:30,000 --> 00:05:32,220
and we get

144
00:05:32,220 --> 00:05:33,900
privilege escalation because we can say

145
00:05:33,900 --> 00:05:36,000
we're we're an admin so please give this

146
00:05:36,000 --> 00:05:37,560
admin on the on the machine we

147
00:05:37,560 --> 00:05:39,840
impersonate that token and that's it job

148
00:05:39,840 --> 00:05:41,820
done simple

149
00:05:41,820 --> 00:05:45,500
so let's see that actually in action

150
00:05:46,680 --> 00:05:48,800
so I've got a Windows 10 machine here

151
00:05:48,800 --> 00:05:52,560
and I've written a lot of

152
00:05:52,560 --> 00:05:55,800
dot net code I'll give you a link to

153
00:05:55,800 --> 00:05:57,539
where a lot of this code lives later on

154
00:05:57,539 --> 00:05:59,160
but we're just using Powershell here to

155
00:05:59,160 --> 00:06:01,680
interact with that and it's very it's

156
00:06:01,680 --> 00:06:04,800
relatively simple we build some basic

157
00:06:04,800 --> 00:06:07,199
configuration we then derive the key

158
00:06:07,199 --> 00:06:10,320
based on the password we've passed in

159
00:06:10,320 --> 00:06:11,759
and then I've written a function new

160
00:06:11,759 --> 00:06:14,400
Kerberos silver ticket which will take

161
00:06:14,400 --> 00:06:16,320
that key take what groups you want to be

162
00:06:16,320 --> 00:06:18,360
what user said you want to be and just

163
00:06:18,360 --> 00:06:20,160
build one of these fake tickets so we'll

164
00:06:20,160 --> 00:06:23,340
never talk to the KDC at all

165
00:06:23,340 --> 00:06:26,479
um next we then build an AP request

166
00:06:26,479 --> 00:06:30,060
which will allow us to Bend Court accept

167
00:06:30,060 --> 00:06:32,280
security context and then there's just

168
00:06:32,280 --> 00:06:34,259
some code here which passes that AP

169
00:06:34,259 --> 00:06:37,940
request with the silver ticket uh to LSA

170
00:06:37,940 --> 00:06:41,460
and hopefully we get back from here we

171
00:06:41,460 --> 00:06:44,100
can just ask the server context for hey

172
00:06:44,100 --> 00:06:46,080
can you give me that access token back

173
00:06:46,080 --> 00:06:48,000
please

174
00:06:48,000 --> 00:06:51,479
so we can just run that we do need to

175
00:06:51,479 --> 00:06:53,940
know the user's password but in this

176
00:06:53,940 --> 00:06:55,199
particular case we know the user's

177
00:06:55,199 --> 00:06:57,600
password is password to we can we

178
00:06:57,600 --> 00:07:00,120
actually uh are unclear on that we can

179
00:07:00,120 --> 00:07:03,660
do get NT token

180
00:07:03,660 --> 00:07:07,340
so I'm the Bob user

181
00:07:08,160 --> 00:07:10,440
and his password two oops

182
00:07:10,440 --> 00:07:12,360
oops gotta make sure it's uh the Correct

183
00:07:12,360 --> 00:07:13,979
capitalization

184
00:07:13,979 --> 00:07:15,660
so that that has worked and we can

185
00:07:15,660 --> 00:07:17,520
actually uh I've got a nice little GUI

186
00:07:17,520 --> 00:07:20,160
you can just bring up uh the token

187
00:07:20,160 --> 00:07:22,380
information and this is Bob and his

188
00:07:22,380 --> 00:07:25,560
groups so if you run silver ticket

189
00:07:25,560 --> 00:07:28,740
our silver ticket script

190
00:07:28,740 --> 00:07:30,539
uh we put in the password of password

191
00:07:30,539 --> 00:07:32,099
too

192
00:07:32,099 --> 00:07:33,120
and

193
00:07:33,120 --> 00:07:35,160
it doesn't work

194
00:07:35,160 --> 00:07:37,860
uh but that's that's not a good start to

195
00:07:37,860 --> 00:07:40,440
the presentation fortunately this is

196
00:07:40,440 --> 00:07:43,139
expected so I will pass you now on to

197
00:07:43,139 --> 00:07:45,060
Nick who's actually going to explain why

198
00:07:45,060 --> 00:07:47,880
it's expected yeah so if we look at the

199
00:07:47,880 --> 00:07:49,259
error message it's pretty generic

200
00:07:49,259 --> 00:07:51,240
obviously we could make some guesses

201
00:07:51,240 --> 00:07:53,220
about maybe our code being incorrect or

202
00:07:53,220 --> 00:07:54,419
the ticket we're ultimately building

203
00:07:54,419 --> 00:07:56,819
being invalid in some way but actually

204
00:07:56,819 --> 00:07:59,280
where we have to go is into the

205
00:07:59,280 --> 00:08:00,900
internals of LSA specifically this

206
00:08:00,900 --> 00:08:02,400
Kerberos Security package to understand

207
00:08:02,400 --> 00:08:05,160
where it's failing and we'll give you a

208
00:08:05,160 --> 00:08:07,380
head start on this one the issue stems

209
00:08:07,380 --> 00:08:08,699
from a thing called Pac signature

210
00:08:08,699 --> 00:08:11,699
validation obviously James uh discussed

211
00:08:11,699 --> 00:08:13,440
what a pack is and it effectively

212
00:08:13,440 --> 00:08:14,880
contains user information like

213
00:08:14,880 --> 00:08:16,860
privileged groups well that information

214
00:08:16,860 --> 00:08:20,520
is pretty sensitive so tickets secure

215
00:08:20,520 --> 00:08:22,919
this in an additional Way by signing the

216
00:08:22,919 --> 00:08:25,199
pack with technically it includes three

217
00:08:25,199 --> 00:08:26,699
signatures we're only going to focus on

218
00:08:26,699 --> 00:08:28,979
Two And when a machine wants to validate

219
00:08:28,979 --> 00:08:30,960
a pack it can take the same key that was

220
00:08:30,960 --> 00:08:33,080
used to issue the service ticket

221
00:08:33,080 --> 00:08:35,520
calculate a local checksum value and to

222
00:08:35,520 --> 00:08:37,020
Simply do a comparison against the

223
00:08:37,020 --> 00:08:39,000
server signature now we have control

224
00:08:39,000 --> 00:08:41,039
over that key because the key is derived

225
00:08:41,039 --> 00:08:42,360
from the user's password so that's not

226
00:08:42,360 --> 00:08:44,339
where it's failing where it's failing is

227
00:08:44,339 --> 00:08:46,080
in this curb verify pack request where

228
00:08:46,080 --> 00:08:47,700
effectively the KDC signature and The

229
00:08:47,700 --> 00:08:49,380
Logical checksum value get shipped off

230
00:08:49,380 --> 00:08:52,620
via net logon over to the KDC where it

231
00:08:52,620 --> 00:08:55,440
can use its curb TGT key to validate

232
00:08:55,440 --> 00:08:57,420
that the KDC signature which is actually

233
00:08:57,420 --> 00:09:00,180
a checksum of a checksum is valid and it

234
00:09:00,180 --> 00:09:01,860
can return that result back to the

235
00:09:01,860 --> 00:09:03,720
machine so this leaves you with an

236
00:09:03,720 --> 00:09:05,640
interesting question which is why do

237
00:09:05,640 --> 00:09:07,680
silver tickets ever work what are the

238
00:09:07,680 --> 00:09:09,000
requirements for getting silver tickets

239
00:09:09,000 --> 00:09:10,620
to work because we're always forging

240
00:09:10,620 --> 00:09:13,380
packs in those the answer is pack

241
00:09:13,380 --> 00:09:15,660
validation isn't always enabled and

242
00:09:15,660 --> 00:09:17,339
we've categorized three rough buckets

243
00:09:17,339 --> 00:09:18,839
where this pack validation does get

244
00:09:18,839 --> 00:09:20,940
disabled the first one derives from your

245
00:09:20,940 --> 00:09:23,040
logon session so if you're in a quilt

246
00:09:23,040 --> 00:09:24,839
system equivalent logged on session you

247
00:09:24,839 --> 00:09:26,339
have TCB privileges you're running as

248
00:09:26,339 --> 00:09:29,220
local or network service there's one

249
00:09:29,220 --> 00:09:30,720
that stems from your credential handle

250
00:09:30,720 --> 00:09:32,640
specifically a flag on the credentials

251
00:09:32,640 --> 00:09:35,100
handle this cred attribute pack bypass

252
00:09:35,100 --> 00:09:37,860
glass flag it can be applied manually to

253
00:09:37,860 --> 00:09:39,779
a credentials handle if you have TCB

254
00:09:39,779 --> 00:09:41,339
Privileges and it's also applied

255
00:09:41,339 --> 00:09:43,200
automatically in some specific instances

256
00:09:43,200 --> 00:09:45,420
that has to do with the service Sid so

257
00:09:45,420 --> 00:09:46,560
you know we're talking again about

258
00:09:46,560 --> 00:09:48,480
service accounts is Apple users things

259
00:09:48,480 --> 00:09:50,399
like that and there's a strange bucket

260
00:09:50,399 --> 00:09:51,959
at the very bottom that stems from a

261
00:09:51,959 --> 00:09:54,899
flag on the context that says ASC ret

262
00:09:54,899 --> 00:09:56,279
use session key

263
00:09:56,279 --> 00:09:58,800
now if you go into msdn you get a really

264
00:09:58,800 --> 00:10:00,060
generic answer for what this flag

265
00:10:00,060 --> 00:10:01,920
ultimately does and it has something to

266
00:10:01,920 --> 00:10:04,560
do with keys derived from keys but we

267
00:10:04,560 --> 00:10:05,580
certainly want to start digging into

268
00:10:05,580 --> 00:10:06,720
this because it seems like something we

269
00:10:06,720 --> 00:10:09,000
might be able to control luckily if we

270
00:10:09,000 --> 00:10:12,420
jump over into 4120 the Kerberos RFC we

271
00:10:12,420 --> 00:10:14,399
can find references to a flag use

272
00:10:14,399 --> 00:10:16,320
session key that's applied in AP Rec

273
00:10:16,320 --> 00:10:18,180
messages and it effectively says that

274
00:10:18,180 --> 00:10:19,920
when this flag is in use the ticket is

275
00:10:19,920 --> 00:10:22,320
encrypted with session key from the

276
00:10:22,320 --> 00:10:24,120
service TGT rather than the server

277
00:10:24,120 --> 00:10:26,519
secret key or its long-term key they

278
00:10:26,519 --> 00:10:27,959
refer to this as user to user

279
00:10:27,959 --> 00:10:29,459
authentication so for the remainder of

280
00:10:29,459 --> 00:10:30,839
the presentation you'll hear us say user

281
00:10:30,839 --> 00:10:33,540
to user or Udu it effectively refers to

282
00:10:33,540 --> 00:10:36,360
this process where you have the curb TGT

283
00:10:36,360 --> 00:10:38,100
key which is used to issue a ticket

284
00:10:38,100 --> 00:10:41,160
granting ticket with a pack and instead

285
00:10:41,160 --> 00:10:43,019
of another service ticket or the the

286
00:10:43,019 --> 00:10:44,700
service ticket that gets issued on

287
00:10:44,700 --> 00:10:46,740
behalf of that TGT being signed with the

288
00:10:46,740 --> 00:10:48,720
server's long-term key the session key

289
00:10:48,720 --> 00:10:50,220
is instead extracted from the ticket

290
00:10:50,220 --> 00:10:52,079
granting ticket and used instead now

291
00:10:52,079 --> 00:10:54,600
both of these are information that you

292
00:10:54,600 --> 00:10:56,100
know are pretty lined up like if you

293
00:10:56,100 --> 00:10:58,200
have the session key for a TGT you would

294
00:10:58,200 --> 00:10:59,459
generally expect to have the user's

295
00:10:59,459 --> 00:11:01,640
password but

296
00:11:01,640 --> 00:11:04,500
we want to get the session T and it's

297
00:11:04,500 --> 00:11:06,300
not necessarily as easy as we might hope

298
00:11:06,300 --> 00:11:07,740
so we're doing all of this because we

299
00:11:07,740 --> 00:11:09,360
want to disable pack validation but if

300
00:11:09,360 --> 00:11:10,680
we're logged in as a user and we

301
00:11:10,680 --> 00:11:12,959
actually go and ask LSA to give us a TGT

302
00:11:12,959 --> 00:11:15,120
with a session key we'll unfortunately

303
00:11:15,120 --> 00:11:16,740
be left with a bunch of null bytes and

304
00:11:16,740 --> 00:11:18,360
this is a security protection that LSA

305
00:11:18,360 --> 00:11:20,100
puts in place because a TGT is

306
00:11:20,100 --> 00:11:21,480
functionally like a password right like

307
00:11:21,480 --> 00:11:23,339
having to take a granting ticket lets

308
00:11:23,339 --> 00:11:24,899
you authenticate to services on behalf

309
00:11:24,899 --> 00:11:26,880
of a user so it would be like querying

310
00:11:26,880 --> 00:11:29,700
LSA for a short-term password or the

311
00:11:29,700 --> 00:11:32,100
user's long-term key lucky for us this

312
00:11:32,100 --> 00:11:33,779
problem has already been solved in some

313
00:11:33,779 --> 00:11:37,320
form by a trick called TGT delegate or

314
00:11:37,320 --> 00:11:39,660
unconstrained delegation TGT extraction

315
00:11:39,660 --> 00:11:42,360
and we won't belabor this particular

316
00:11:42,360 --> 00:11:44,700
layout too much or exactly what's going

317
00:11:44,700 --> 00:11:46,440
on here but functionally what we're

318
00:11:46,440 --> 00:11:48,480
abusing is the fact that LSA protects

319
00:11:48,480 --> 00:11:50,820
the ticket granting ticket very well but

320
00:11:50,820 --> 00:11:52,500
it doesn't protect service tickets quite

321
00:11:52,500 --> 00:11:54,120
as well and there are particular

322
00:11:54,120 --> 00:11:56,399
instances where a service ticket is

323
00:11:56,399 --> 00:11:59,160
marked for effectively a delegatable

324
00:11:59,160 --> 00:12:02,339
ticket and it will embed the entire TGT

325
00:12:02,339 --> 00:12:04,079
and session key of the target user into

326
00:12:04,079 --> 00:12:06,240
that ticket so we can effectively ask

327
00:12:06,240 --> 00:12:08,040
initialized security context to build us

328
00:12:08,040 --> 00:12:10,680
a service ticket for any service on the

329
00:12:10,680 --> 00:12:13,079
KDC that host is marked with

330
00:12:13,079 --> 00:12:16,200
unconstrained delegation the outgoing

331
00:12:16,200 --> 00:12:18,480
service ticket will effectively have the

332
00:12:18,480 --> 00:12:20,579
TGs as well as an authenticator value

333
00:12:20,579 --> 00:12:22,500
that's encrypted with the session key

334
00:12:22,500 --> 00:12:25,200
from the ticket itself and we can get

335
00:12:25,200 --> 00:12:26,579
that session key fine because it's a

336
00:12:26,579 --> 00:12:27,839
service ticket and inside of that

337
00:12:27,839 --> 00:12:29,700
authenticator is a checksum value which

338
00:12:29,700 --> 00:12:31,440
is actually not a checksum it's a GSS

339
00:12:31,440 --> 00:12:33,600
checksum structure which contains a curb

340
00:12:33,600 --> 00:12:35,880
cred structure so this is great we now

341
00:12:35,880 --> 00:12:38,880
have a way to get an active TGT and its

342
00:12:38,880 --> 00:12:42,660
session key from LSA and we also believe

343
00:12:42,660 --> 00:12:44,579
that the use of this session key when

344
00:12:44,579 --> 00:12:46,139
we're signing our silver ticket should

345
00:12:46,139 --> 00:12:48,480
result in arbitrary pack data bypassing

346
00:12:48,480 --> 00:12:50,399
validation so the last question we have

347
00:12:50,399 --> 00:12:51,540
to ask is what are we actually going to

348
00:12:51,540 --> 00:12:53,399
do to the pack to get admin we know the

349
00:12:53,399 --> 00:12:54,779
pack is critical we know it contains

350
00:12:54,779 --> 00:12:57,000
critical information the substructure

351
00:12:57,000 --> 00:12:58,560
we're going to focus on is this logon

352
00:12:58,560 --> 00:13:00,720
infrastructure it effectively contains

353
00:13:00,720 --> 00:13:03,600
all of the information For What rids and

354
00:13:03,600 --> 00:13:06,120
the domain said effectively all the IDS

355
00:13:06,120 --> 00:13:08,639
that locate or identify user privileges

356
00:13:08,639 --> 00:13:10,320
so the ones up top are pretty

357
00:13:10,320 --> 00:13:11,880
self-explanatory you also have extra

358
00:13:11,880 --> 00:13:14,040
SIDS and resource domain SIDS Sid

359
00:13:14,040 --> 00:13:15,120
filtering if you've heard of that before

360
00:13:15,120 --> 00:13:16,740
applies to all of this and there's a lot

361
00:13:16,740 --> 00:13:18,899
of nuances there which James has a

362
00:13:18,899 --> 00:13:21,240
beautifully documented out there but for

363
00:13:21,240 --> 00:13:22,320
the most part we're actually just going

364
00:13:22,320 --> 00:13:24,420
to focus on adding arbitrary group rids

365
00:13:24,420 --> 00:13:26,700
so we can add things like the 500 and

366
00:13:26,700 --> 00:13:29,100
512 rid which apply to the domain said

367
00:13:29,100 --> 00:13:31,260
that the user is in and functionally

368
00:13:31,260 --> 00:13:33,600
becoming domain administrator on most

369
00:13:33,600 --> 00:13:35,220
local machines would also make you

370
00:13:35,220 --> 00:13:37,440
regular admin so I'll pass things back

371
00:13:37,440 --> 00:13:38,760
over to James and he's going to see if

372
00:13:38,760 --> 00:13:40,260
we can get pack validation disabled

373
00:13:40,260 --> 00:13:43,040
properly this time

374
00:13:43,079 --> 00:13:46,260
so yes we can um

375
00:13:46,260 --> 00:13:48,540
go to another demo

376
00:13:48,540 --> 00:13:51,240
so in this particular case it's uses the

377
00:13:51,240 --> 00:13:52,620
user

378
00:13:52,620 --> 00:13:55,860
okay so it's pretty much exactly the

379
00:13:55,860 --> 00:13:58,079
same code as we we've just seen

380
00:13:58,079 --> 00:14:01,740
the main crucial difference is we call a

381
00:14:01,740 --> 00:14:04,079
function I wrote get user TGT and that

382
00:14:04,079 --> 00:14:06,480
performs basically that exact attack

383
00:14:06,480 --> 00:14:08,519
that Nick has just described where you

384
00:14:08,519 --> 00:14:11,959
get a delegation AP request

385
00:14:11,959 --> 00:14:15,540
decrypt it and return the TGT with its

386
00:14:15,540 --> 00:14:18,300
own session key we can then extract the

387
00:14:18,300 --> 00:14:20,100
session key from that and this will of

388
00:14:20,100 --> 00:14:22,320
course be now non-zero

389
00:14:22,320 --> 00:14:24,839
and then instead of our long-term key so

390
00:14:24,839 --> 00:14:26,220
of course at this point we no longer

391
00:14:26,220 --> 00:14:27,480
need a password so that's kind of a

392
00:14:27,480 --> 00:14:29,160
useful benefit as well of doing this

393
00:14:29,160 --> 00:14:31,320
that you no longer need that user's

394
00:14:31,320 --> 00:14:33,440
password to perform this attack

395
00:14:33,440 --> 00:14:36,600
you can call the new Cobra silver ticket

396
00:14:36,600 --> 00:14:39,420
function with the session key instead of

397
00:14:39,420 --> 00:14:41,820
the TGT instead of the password key

398
00:14:41,820 --> 00:14:43,199
derived key

399
00:14:43,199 --> 00:14:44,639
and then basically almost everything

400
00:14:44,639 --> 00:14:47,160
else is exactly the same we make sure

401
00:14:47,160 --> 00:14:49,980
that the local Kerberos ticket cache has

402
00:14:49,980 --> 00:14:51,540
our TGT just to make sure that it's

403
00:14:51,540 --> 00:14:53,820
definitely going to use our TGT rather

404
00:14:53,820 --> 00:14:56,639
than one of the other tgts the user has

405
00:14:56,639 --> 00:14:59,760
and then we just call accept security

406
00:14:59,760 --> 00:15:01,560
context with our silver ticket and

407
00:15:01,560 --> 00:15:05,660
hopefully it all just works magically

408
00:15:05,699 --> 00:15:10,260
so we come back to here and as I say we

409
00:15:10,260 --> 00:15:13,139
don't need to pass a password the script

410
00:15:13,139 --> 00:15:16,800
itself will always set by default we

411
00:15:16,800 --> 00:15:19,199
want to add domain admin groups the main

412
00:15:19,199 --> 00:15:21,300
number groups is useful because we can't

413
00:15:21,300 --> 00:15:23,399
admin due to Sid filtering we can't add

414
00:15:23,399 --> 00:15:25,920
the local admin group but if we add the

415
00:15:25,920 --> 00:15:28,440
domain admin group then by default all

416
00:15:28,440 --> 00:15:30,839
domain join machines have local

417
00:15:30,839 --> 00:15:32,579
administrator the local administrative

418
00:15:32,579 --> 00:15:34,620
group contains the domain admin group so

419
00:15:34,620 --> 00:15:36,120
that will give us domain admin we also

420
00:15:36,120 --> 00:15:37,620
make sure that we set the integral level

421
00:15:37,620 --> 00:15:40,100
to medium

422
00:15:40,380 --> 00:15:44,160
um close that down and we run that and

423
00:15:44,160 --> 00:15:45,720
no errors

424
00:15:45,720 --> 00:15:49,019
Hallelujah right I think we're done

425
00:15:49,019 --> 00:15:50,339
um

426
00:15:50,339 --> 00:15:52,019
so yeah I think that's the end of our

427
00:15:52,019 --> 00:15:53,339
presentation thank you very much for

428
00:15:53,339 --> 00:15:57,779
coming so uh we can see possibly in here

429
00:15:57,779 --> 00:15:59,699
um or I can just show it here I can do

430
00:15:59,699 --> 00:16:02,579
and get NT token groups

431
00:16:02,579 --> 00:16:05,820
and from token and we can see that we

432
00:16:05,820 --> 00:16:07,920
are now built-in administrators

433
00:16:07,920 --> 00:16:09,300
so

434
00:16:09,300 --> 00:16:11,880
what's not to like

435
00:16:11,880 --> 00:16:12,600
um

436
00:16:12,600 --> 00:16:16,079
so my tooling has an invoke NT token

437
00:16:16,079 --> 00:16:17,779
function

438
00:16:17,779 --> 00:16:21,779
which takes an access token and will

439
00:16:21,779 --> 00:16:23,760
impersonate it for you and run a

440
00:16:23,760 --> 00:16:25,380
Powershell script while impersonating

441
00:16:25,380 --> 00:16:28,860
that that script so we can go

442
00:16:28,860 --> 00:16:31,139
and try and write to save the windows

443
00:16:31,139 --> 00:16:33,959
folder is that content

444
00:16:33,959 --> 00:16:36,360
windows

445
00:16:36,360 --> 00:16:38,279
test.txt

446
00:16:38,279 --> 00:16:40,139
and so this should have now given us

447
00:16:40,139 --> 00:16:43,380
privilege escalation however we've now

448
00:16:43,380 --> 00:16:45,300
got another error and again

449
00:16:45,300 --> 00:16:48,240
unfortunately this is this is not

450
00:16:48,240 --> 00:16:50,040
intended but is unfortunately a

451
00:16:50,040 --> 00:16:51,660
byproduct of what we've done and it's

452
00:16:51,660 --> 00:16:53,100
all talking about impersonation levels

453
00:16:53,100 --> 00:16:54,420
and that's that's not usually a good

454
00:16:54,420 --> 00:16:56,459
sign so let's pass it back to Nick

455
00:16:56,459 --> 00:16:59,160
Ferreira to continue the discussion all

456
00:16:59,160 --> 00:17:00,839
right we're getting closer here

457
00:17:00,839 --> 00:17:02,339
um and I'm actually going to pull out an

458
00:17:02,339 --> 00:17:03,959
old diagram it's one of my favorites of

459
00:17:03,959 --> 00:17:07,140
James where uh he's meticulously laid

460
00:17:07,140 --> 00:17:10,319
out all of the flows for checking

461
00:17:10,319 --> 00:17:12,480
whether or not one particular entity can

462
00:17:12,480 --> 00:17:14,099
impersonate a token

463
00:17:14,099 --> 00:17:16,380
um now this is a long list and they sort

464
00:17:16,380 --> 00:17:17,579
of feed into each other but we can

465
00:17:17,579 --> 00:17:18,720
certainly start going through it and

466
00:17:18,720 --> 00:17:19,919
thinking about where we might start

467
00:17:19,919 --> 00:17:21,540
running into issues with this token that

468
00:17:21,540 --> 00:17:24,660
we've built well up first the token

469
00:17:24,660 --> 00:17:26,220
level being under impersonate doesn't

470
00:17:26,220 --> 00:17:27,660
imply here we also don't have SC

471
00:17:27,660 --> 00:17:29,040
impersonate privileges so we wouldn't

472
00:17:29,040 --> 00:17:31,919
get the immediate bypass the token IL

473
00:17:31,919 --> 00:17:33,660
and the token user can both be

474
00:17:33,660 --> 00:17:35,100
controlled by the pack and when James

475
00:17:35,100 --> 00:17:36,720
was looking at it everything looked fine

476
00:17:36,720 --> 00:17:39,059
like it said we were domain Bob the

477
00:17:39,059 --> 00:17:40,919
token Integrity level was medium we just

478
00:17:40,919 --> 00:17:42,900
had domain admin groups on it the

479
00:17:42,900 --> 00:17:45,360
elevation check beyond that is a Nord if

480
00:17:45,360 --> 00:17:47,220
the user is not a UAC admin which we're

481
00:17:47,220 --> 00:17:49,260
not and there's this last interesting

482
00:17:49,260 --> 00:17:51,179
check which we can also all thank James

483
00:17:51,179 --> 00:17:53,039
for and it's one final check on the

484
00:17:53,039 --> 00:17:55,320
token that looks to see if the target

485
00:17:55,320 --> 00:17:57,059
token attempting to be impersonated

486
00:17:57,059 --> 00:18:00,000
exists in session zero and the users

487
00:18:00,000 --> 00:18:01,740
session who's attempting to impersonate

488
00:18:01,740 --> 00:18:04,020
the token is not session zero this is

489
00:18:04,020 --> 00:18:06,419
actually a really common thing using

490
00:18:06,419 --> 00:18:08,880
loopback authentication to manipulate

491
00:18:08,880 --> 00:18:11,160
tokens on Windows is a known attack and

492
00:18:11,160 --> 00:18:13,080
in response Microsoft has blocked

493
00:18:13,080 --> 00:18:14,400
session zero tokens from being

494
00:18:14,400 --> 00:18:16,260
impersonated anywhere else and if you

495
00:18:16,260 --> 00:18:17,400
didn't know Network authentication

496
00:18:17,400 --> 00:18:19,919
tokens go into session Zero by default

497
00:18:19,919 --> 00:18:22,860
so we have an issue and we're persistent

498
00:18:22,860 --> 00:18:24,660
now we're looking for instances where a

499
00:18:24,660 --> 00:18:26,280
token would be moved from one session to

500
00:18:26,280 --> 00:18:28,440
another there are probably a lot of

501
00:18:28,440 --> 00:18:29,460
places we could look for this

502
00:18:29,460 --> 00:18:31,320
information we're going to start just in

503
00:18:31,320 --> 00:18:33,120
the lsas server and we're going to look

504
00:18:33,120 --> 00:18:34,740
for instances where it calls NT set

505
00:18:34,740 --> 00:18:36,539
information token or the token session

506
00:18:36,539 --> 00:18:38,280
ID info class it's probably a good first

507
00:18:38,280 --> 00:18:40,140
start now granted there could be a

508
00:18:40,140 --> 00:18:41,760
million security packages or weird

509
00:18:41,760 --> 00:18:43,500
dynamically loaded code that does this

510
00:18:43,500 --> 00:18:45,059
but we end up with a nice little flow

511
00:18:45,059 --> 00:18:46,260
chart we can start going through it and

512
00:18:46,260 --> 00:18:48,000
investigating well the bottom function

513
00:18:48,000 --> 00:18:50,640
that looks super juicy the update user

514
00:18:50,640 --> 00:18:52,740
token session ID is unfortunately locked

515
00:18:52,740 --> 00:18:55,320
behind TCB as you would imagine the lsap

516
00:18:55,320 --> 00:18:57,419
session token isn't particularly useful

517
00:18:57,419 --> 00:18:58,980
here it doesn't really migrate tokens

518
00:18:58,980 --> 00:19:00,419
between sessions it's just for

519
00:19:00,419 --> 00:19:02,400
duplicating a token and applying it to a

520
00:19:02,400 --> 00:19:04,919
logon session the LSAT build and create

521
00:19:04,919 --> 00:19:06,539
token and filter elevated token full

522
00:19:06,539 --> 00:19:09,000
both tend to deal with elevated and

523
00:19:09,000 --> 00:19:10,919
linked tokens so things that would be

524
00:19:10,919 --> 00:19:13,620
related to UAC split tokens we could

525
00:19:13,620 --> 00:19:15,059
maybe get something useful going on here

526
00:19:15,059 --> 00:19:16,860
but we'd really like to ignore UAC it's

527
00:19:16,860 --> 00:19:18,720
just a pain for this whole thing so

528
00:19:18,720 --> 00:19:19,860
we're left with this really interesting

529
00:19:19,860 --> 00:19:22,980
flow from lsap create token ex into a

530
00:19:22,980 --> 00:19:24,480
really unique function called lsap

531
00:19:24,480 --> 00:19:27,419
applied loopback session ID now what's

532
00:19:27,419 --> 00:19:29,400
particularly unique about this flow is

533
00:19:29,400 --> 00:19:31,500
the lsap create token ex is exactly

534
00:19:31,500 --> 00:19:33,840
where our call Flow already goes that's

535
00:19:33,840 --> 00:19:36,000
what accepts security context and the

536
00:19:36,000 --> 00:19:37,740
Kerberos package calls underneath when

537
00:19:37,740 --> 00:19:39,299
the token is finally ready to get built

538
00:19:39,299 --> 00:19:41,280
so James and I started wondering what is

539
00:19:41,280 --> 00:19:43,140
this function and what does it do well

540
00:19:43,140 --> 00:19:45,179
lucky for you we've effectively reversed

541
00:19:45,179 --> 00:19:47,340
it and understood its implementation to

542
00:19:47,340 --> 00:19:49,559
some regard essentially the tracking

543
00:19:49,559 --> 00:19:51,480
mechanism to identify instances just

544
00:19:51,480 --> 00:19:53,400
like ours it's to identify instances

545
00:19:53,400 --> 00:19:55,500
where a client and a server are talking

546
00:19:55,500 --> 00:19:58,080
to each other on the same machine and

547
00:19:58,080 --> 00:19:59,640
for some reason the protocol hasn't

548
00:19:59,640 --> 00:20:01,080
identified that it's what we would call

549
00:20:01,080 --> 00:20:03,660
loopback authentication and this is

550
00:20:03,660 --> 00:20:05,760
probably in response to maybe some sort

551
00:20:05,760 --> 00:20:07,940
of token session ID

552
00:20:07,940 --> 00:20:10,620
refactoring code but regardless it's

553
00:20:10,620 --> 00:20:12,900
really unique when a user calls into

554
00:20:12,900 --> 00:20:14,760
initialize Security Contracts a begin

555
00:20:14,760 --> 00:20:16,200
tracking function gets called and

556
00:20:16,200 --> 00:20:18,179
effectively a entry gets added to this

557
00:20:18,179 --> 00:20:19,980
table with the session ID of the user

558
00:20:19,980 --> 00:20:22,440
and when the buffer is being returned

559
00:20:22,440 --> 00:20:24,299
back out of initialized security context

560
00:20:24,299 --> 00:20:26,400
and remember the buffer we know is an AP

561
00:20:26,400 --> 00:20:28,260
rack but depending on the protocol this

562
00:20:28,260 --> 00:20:29,940
could be any you know Network protocol

563
00:20:29,940 --> 00:20:32,160
buffer that buffer also gets fed into

564
00:20:32,160 --> 00:20:34,140
update tracking and a hash value gets

565
00:20:34,140 --> 00:20:36,539
rolling and this is a pretty solid

566
00:20:36,539 --> 00:20:38,220
hashing it uses like random goods

567
00:20:38,220 --> 00:20:39,900
directionally and it's built on AES

568
00:20:39,900 --> 00:20:41,580
C-Max so we're probably not going to

569
00:20:41,580 --> 00:20:43,799
attack the hashing function itself and

570
00:20:43,799 --> 00:20:45,539
when the except security context

571
00:20:45,539 --> 00:20:47,640
function gets called that AP rack that

572
00:20:47,640 --> 00:20:50,039
was passed out of lsas is passed back in

573
00:20:50,039 --> 00:20:52,260
begin tracking gets executed and then

574
00:20:52,260 --> 00:20:54,600
when a token is being built the code

575
00:20:54,600 --> 00:20:56,460
will effectively reference this table to

576
00:20:56,460 --> 00:20:57,960
find instances where the hashes match

577
00:20:57,960 --> 00:20:59,640
and in that case it is identified an

578
00:20:59,640 --> 00:21:01,140
instance where buffers were passed out

579
00:21:01,140 --> 00:21:03,480
of lsas to a client and then passed

580
00:21:03,480 --> 00:21:05,700
immediately back into lsas from a server

581
00:21:05,700 --> 00:21:07,980
somewhere on the host so this is looking

582
00:21:07,980 --> 00:21:10,320
really promising to us we now have a

583
00:21:10,320 --> 00:21:11,820
primitive where we can get a token moved

584
00:21:11,820 --> 00:21:13,200
between sessions and it applies to our

585
00:21:13,200 --> 00:21:16,140
situation nicely but we have a few

586
00:21:16,140 --> 00:21:17,880
caveats one is we need to start calling

587
00:21:17,880 --> 00:21:19,679
initialized security context which James

588
00:21:19,679 --> 00:21:21,419
has pointed out we don't do thus far

589
00:21:21,419 --> 00:21:23,220
we've just been building the AP Rex

590
00:21:23,220 --> 00:21:25,860
manually in Powershell and submitting

591
00:21:25,860 --> 00:21:27,660
them via accept security context but we

592
00:21:27,660 --> 00:21:29,400
need to get that hash value rolling so

593
00:21:29,400 --> 00:21:30,960
that the function can actually line them

594
00:21:30,960 --> 00:21:33,059
up later on and we're kind of left with

595
00:21:33,059 --> 00:21:34,679
a conundrum where we need to modify the

596
00:21:34,679 --> 00:21:36,840
pack inside of the AP rack which would

597
00:21:36,840 --> 00:21:38,400
imply that we're modifying the buffers

598
00:21:38,400 --> 00:21:40,080
but if we touch the buffers the hash

599
00:21:40,080 --> 00:21:41,580
lookup will break and our token will be

600
00:21:41,580 --> 00:21:43,500
locked away from us so we kind of have

601
00:21:43,500 --> 00:21:45,900
this no-fly zone around our code and the

602
00:21:45,900 --> 00:21:48,780
security context functions well we had

603
00:21:48,780 --> 00:21:51,000
Curiosities about how exactly this

604
00:21:51,000 --> 00:21:52,500
tracking mechanism worked and if you dig

605
00:21:52,500 --> 00:21:54,600
into it you find that for every security

606
00:21:54,600 --> 00:21:56,700
buffer descriptor transiting in and out

607
00:21:56,700 --> 00:21:59,220
of lsas the hashing code will only be

608
00:21:59,220 --> 00:22:00,720
interested in buffers where the buffer

609
00:22:00,720 --> 00:22:03,120
type matches exactly SEC buffer token in

610
00:22:03,120 --> 00:22:04,620
other words it's a token type and that's

611
00:22:04,620 --> 00:22:06,000
for those who aren't familiar with those

612
00:22:06,000 --> 00:22:08,400
apis what would hold your AP Rack or

613
00:22:08,400 --> 00:22:11,039
your ntlm challenge response

614
00:22:11,039 --> 00:22:13,140
luckily for us there's actually a high

615
00:22:13,140 --> 00:22:15,900
attribute bite in this SEC buffer type

616
00:22:15,900 --> 00:22:17,760
and it can hold things like whether or

617
00:22:17,760 --> 00:22:19,200
not the buffer is read only or read only

618
00:22:19,200 --> 00:22:21,360
with a checksum so we have the token

619
00:22:21,360 --> 00:22:24,780
value yes but we can also bitwise or it

620
00:22:24,780 --> 00:22:27,059
with say a sec buffer read-only flag and

621
00:22:27,059 --> 00:22:28,740
maybe break some assumptions about

622
00:22:28,740 --> 00:22:29,880
whether or not the hashing code would

623
00:22:29,880 --> 00:22:32,100
use our buffer and we've done exactly

624
00:22:32,100 --> 00:22:33,780
that's effectively type confusion and

625
00:22:33,780 --> 00:22:35,340
accept security context where you have a

626
00:22:35,340 --> 00:22:36,960
buffer descriptor that contains two

627
00:22:36,960 --> 00:22:39,539
buffers in it both are marked with token

628
00:22:39,539 --> 00:22:42,600
but the former buffer is bitwise or with

629
00:22:42,600 --> 00:22:44,820
this read-only flag so we can put our

630
00:22:44,820 --> 00:22:46,860
modified AP rack data in there our

631
00:22:46,860 --> 00:22:49,500
malicious data and the benign data that

632
00:22:49,500 --> 00:22:52,320
we got out of lsas in the second a

633
00:22:52,320 --> 00:22:54,000
buffer and the loopback library will

634
00:22:54,000 --> 00:22:55,260
refer to the second buffer when it's

635
00:22:55,260 --> 00:22:56,880
doing the hash lookup and hashing code

636
00:22:56,880 --> 00:22:58,980
and Kerberos will actually use the first

637
00:22:58,980 --> 00:23:00,900
buffer because it masks away the upper

638
00:23:00,900 --> 00:23:02,340
attribute byte when trying to find a

639
00:23:02,340 --> 00:23:04,980
token so third time's the charm we have

640
00:23:04,980 --> 00:23:06,480
a primitive for getting the tokens moved

641
00:23:06,480 --> 00:23:08,159
I'll pass it to James to see if we can

642
00:23:08,159 --> 00:23:10,679
finally get this working

643
00:23:10,679 --> 00:23:12,539
Okay so

644
00:23:12,539 --> 00:23:14,820
we can now see

645
00:23:14,820 --> 00:23:15,659
um

646
00:23:15,659 --> 00:23:17,760
there's a fake buffer script

647
00:23:17,760 --> 00:23:22,020
and again we get the two users TGT but

648
00:23:22,020 --> 00:23:24,299
uh The crucial thing here is instead of

649
00:23:24,299 --> 00:23:26,039
using

650
00:23:26,039 --> 00:23:27,720
um we're not going to use our modified

651
00:23:27,720 --> 00:23:30,179
AP request directly so we create this

652
00:23:30,179 --> 00:23:33,179
fake client for our AP request and then

653
00:23:33,179 --> 00:23:35,280
we actually have to call as Nick said

654
00:23:35,280 --> 00:23:37,080
initialize security context so we both

655
00:23:37,080 --> 00:23:38,580
set up a client and a server

656
00:23:38,580 --> 00:23:41,760
authentication context to talk to lsas

657
00:23:41,760 --> 00:23:43,679
but the crucial thing is we have to do a

658
00:23:43,679 --> 00:23:45,179
few updates because users to user

659
00:23:45,179 --> 00:23:47,039
actually has like a few ancillary tokens

660
00:23:47,039 --> 00:23:48,600
that we need to make sure are negotiated

661
00:23:48,600 --> 00:23:50,940
but once that's over and done with

662
00:23:50,940 --> 00:23:53,520
uh we can actually then build two

663
00:23:53,520 --> 00:23:55,620
security buffers the first one which we

664
00:23:55,620 --> 00:23:58,679
want Kerberos to see is type token but

665
00:23:58,679 --> 00:24:00,600
it's read only and contains our fake AP

666
00:24:00,600 --> 00:24:02,640
request with our silver ticket

667
00:24:02,640 --> 00:24:04,980
and then we build an LSA buffer which we

668
00:24:04,980 --> 00:24:07,080
want the LSA hashing algorithm to what

669
00:24:07,080 --> 00:24:09,840
uh to see and because the LSA code

670
00:24:09,840 --> 00:24:12,000
doesn't know anything really about the

671
00:24:12,000 --> 00:24:14,100
package it's talking to it just goes oh

672
00:24:14,100 --> 00:24:16,140
okay I'll just I'll just hash that one

673
00:24:16,140 --> 00:24:18,600
it gets mistaken and only hashes the one

674
00:24:18,600 --> 00:24:21,000
we give it and so hopefully this should

675
00:24:21,000 --> 00:24:24,539
then actually allow us to get a token in

676
00:24:24,539 --> 00:24:27,240
our own session ID

677
00:24:27,240 --> 00:24:30,960
so we do token

678
00:24:30,960 --> 00:24:33,240
a fake buffer and again we don't need to

679
00:24:33,240 --> 00:24:34,679
pass a password

680
00:24:34,679 --> 00:24:37,980
we got no errors no errors are good uh

681
00:24:37,980 --> 00:24:39,900
if we actually look at the session ID

682
00:24:39,900 --> 00:24:43,080
it's now the previous one was zero and

683
00:24:43,080 --> 00:24:45,240
now it's two and it doesn't have to be

684
00:24:45,240 --> 00:24:47,039
strictly speaking our own session ID

685
00:24:47,039 --> 00:24:48,900
just has to be non-zero that's all

686
00:24:48,900 --> 00:24:51,240
that's the only criteria

687
00:24:51,240 --> 00:24:53,900
so if we scroll back and go back to that

688
00:24:53,900 --> 00:24:56,760
uh fingers crossed

689
00:24:56,760 --> 00:24:58,559
it should not work

690
00:24:58,559 --> 00:25:01,500
hey we got no errors and we can then

691
00:25:01,500 --> 00:25:03,240
just read that back just to make sure

692
00:25:03,240 --> 00:25:05,700
that we actually wrote something

693
00:25:05,700 --> 00:25:10,940
test.text hello world and there we go

694
00:25:11,820 --> 00:25:15,320
[Applause]

695
00:25:15,320 --> 00:25:17,760
all right this is well and good but

696
00:25:17,760 --> 00:25:21,179
James and I aren't ones for uh uh

697
00:25:21,179 --> 00:25:23,760
leaving it there when we discovered in

698
00:25:23,760 --> 00:25:26,700
Windows 11 that in the loopback hashing

699
00:25:26,700 --> 00:25:28,620
code they actually mask out that upper

700
00:25:28,620 --> 00:25:30,059
attribute byte so they're doing things

701
00:25:30,059 --> 00:25:33,059
properly uh we're not entirely sure why

702
00:25:33,059 --> 00:25:34,740
we have our suspicions this was due to

703
00:25:34,740 --> 00:25:36,659
some refactoring code we actually think

704
00:25:36,659 --> 00:25:38,159
that it was maybe fixed in Windows 11 as

705
00:25:38,159 --> 00:25:39,840
a response to other refactoring and not

706
00:25:39,840 --> 00:25:41,520
actually a security fix which is why it

707
00:25:41,520 --> 00:25:43,320
hasn't been backboarded but either way

708
00:25:43,320 --> 00:25:44,820
our double buffer trick is not going to

709
00:25:44,820 --> 00:25:47,340
work in Windows 11. and you know James

710
00:25:47,340 --> 00:25:49,140
and I James in particular is a huge fan

711
00:25:49,140 --> 00:25:50,760
of Windows 11 he wants to make sure all

712
00:25:50,760 --> 00:25:52,340
of his tools work there

713
00:25:52,340 --> 00:25:55,320
and we return to this diagram where we

714
00:25:55,320 --> 00:25:57,179
have this sort of no-fly zone we have to

715
00:25:57,179 --> 00:25:58,500
sit here and think well all right if

716
00:25:58,500 --> 00:26:00,120
we're not allowed to modify the buffers

717
00:26:00,120 --> 00:26:02,100
when they transit in and out of lsas

718
00:26:02,100 --> 00:26:04,500
maybe we can modify some something about

719
00:26:04,500 --> 00:26:06,179
the ticket or the token as it transits

720
00:26:06,179 --> 00:26:08,760
to the KDC in fact we have all the key

721
00:26:08,760 --> 00:26:10,559
material necessary to do a man in the

722
00:26:10,559 --> 00:26:11,820
middle attack here right like we're the

723
00:26:11,820 --> 00:26:13,140
ones who have the session key to the

724
00:26:13,140 --> 00:26:14,940
user to user ticket we could decrypt it

725
00:26:14,940 --> 00:26:16,980
in transit so we could have a KDC

726
00:26:16,980 --> 00:26:18,960
shipping back a valid pack inside of a

727
00:26:18,960 --> 00:26:20,640
TGs rep if we could get in the middle

728
00:26:20,640 --> 00:26:23,039
somehow we could use our session key

729
00:26:23,039 --> 00:26:25,320
unlock the pack modify the the group

730
00:26:25,320 --> 00:26:27,000
rids and then package it all back up and

731
00:26:27,000 --> 00:26:28,440
ship it off to the machine the machine

732
00:26:28,440 --> 00:26:30,480
would then cache that ticket and when it

733
00:26:30,480 --> 00:26:32,100
was used for the AP rack and we could

734
00:26:32,100 --> 00:26:34,140
just self-negotiate we're not actually

735
00:26:34,140 --> 00:26:35,520
needing to modify the ticket at that

736
00:26:35,520 --> 00:26:37,799
point because as it stands in LSA as

737
00:26:37,799 --> 00:26:40,260
it's stored in LSA it's malicious but

738
00:26:40,260 --> 00:26:41,520
we're left with another problem here

739
00:26:41,520 --> 00:26:42,720
especially when we think about Windows

740
00:26:42,720 --> 00:26:44,640
11 which is that credential guard is on

741
00:26:44,640 --> 00:26:46,620
by default and also we like thinking

742
00:26:46,620 --> 00:26:48,600
about how to break a credential guard

743
00:26:48,600 --> 00:26:51,779
and related things so this affects our

744
00:26:51,779 --> 00:26:53,880
kill chain thus far because it prevents

745
00:26:53,880 --> 00:26:55,559
unconstrained delegation in Kerberos

746
00:26:55,559 --> 00:26:57,059
which was the trick we were using to get

747
00:26:57,059 --> 00:26:59,400
the session key with our TGT so now

748
00:26:59,400 --> 00:27:00,840
we're kind of back to square one a

749
00:27:00,840 --> 00:27:02,820
little bit we need the key material for

750
00:27:02,820 --> 00:27:04,200
the user to user ticket but we can't

751
00:27:04,200 --> 00:27:07,080
access the session key for the TGT and

752
00:27:07,080 --> 00:27:09,179
James had the great idea of maybe just

753
00:27:09,179 --> 00:27:12,000
bringing your entire own KDC it's worth

754
00:27:12,000 --> 00:27:13,799
questioning whether or not we even need

755
00:27:13,799 --> 00:27:17,039
to talk to a real KDC there certainly

756
00:27:17,039 --> 00:27:18,600
seems to be a lot of flexibility in the

757
00:27:18,600 --> 00:27:21,720
way packs are processed and if we want

758
00:27:21,720 --> 00:27:23,700
to make this work extra nicely rather

759
00:27:23,700 --> 00:27:25,860
than using it on an external host or

760
00:27:25,860 --> 00:27:28,380
resolving Kerberos via DNS to an

761
00:27:28,380 --> 00:27:30,480
external host we can instead use a nice

762
00:27:30,480 --> 00:27:32,100
feature called KDC pinning which is

763
00:27:32,100 --> 00:27:33,539
effectively a request that we send into

764
00:27:33,539 --> 00:27:36,539
lsas and we can Bond a particular realm

765
00:27:36,539 --> 00:27:39,720
and bind it to a hostname in this case

766
00:27:39,720 --> 00:27:41,159
case we're probably interested in doing

767
00:27:41,159 --> 00:27:42,840
localhost because we want to run a KDC

768
00:27:42,840 --> 00:27:45,000
locally now if you were crazy enough to

769
00:27:45,000 --> 00:27:47,760
write an entire KDC in.net and then

770
00:27:47,760 --> 00:27:50,900
expose that KDC in Powershell

771
00:27:50,900 --> 00:27:53,580
you could have an attack where the

772
00:27:53,580 --> 00:27:55,679
entire ticket key material from start to

773
00:27:55,679 --> 00:27:58,320
finish is controlled by you and when we

774
00:27:58,320 --> 00:28:01,500
call into LSA we can pin this KDC or

775
00:28:01,500 --> 00:28:04,320
this fake realm to localhost and then

776
00:28:04,320 --> 00:28:05,640
when we Supply credentials and start

777
00:28:05,640 --> 00:28:07,620
issuing tickets when Kerberos goes to

778
00:28:07,620 --> 00:28:09,120
make a socket call it will instead talk

779
00:28:09,120 --> 00:28:11,100
back to the local machine on Port 88 and

780
00:28:11,100 --> 00:28:12,480
because we're binding on localhost the

781
00:28:12,480 --> 00:28:14,279
firewall is not an issue typically here

782
00:28:14,279 --> 00:28:16,860
and we now own all of the key material

783
00:28:16,860 --> 00:28:18,600
from the curb TGT to the user password

784
00:28:18,600 --> 00:28:20,340
long-term keys to the session keys and

785
00:28:20,340 --> 00:28:23,340
the tgts and we can start issuing packs

786
00:28:23,340 --> 00:28:24,960
with arbitrary data and what's even more

787
00:28:24,960 --> 00:28:26,580
interesting is those packs or the

788
00:28:26,580 --> 00:28:28,440
information in it don't even have to

789
00:28:28,440 --> 00:28:30,480
match or doesn't even have to match the

790
00:28:30,480 --> 00:28:32,100
service ticket the domain was actually

791
00:28:32,100 --> 00:28:34,559
issued for so let's see if we can take

792
00:28:34,559 --> 00:28:37,740
this attack one step further

793
00:28:37,740 --> 00:28:42,600
so yeah so now we're on Windows 11.

794
00:28:42,600 --> 00:28:44,760
um so

795
00:28:44,760 --> 00:28:46,860
the script is somewhat different now

796
00:28:46,860 --> 00:28:48,539
because of course we're no longer just

797
00:28:48,539 --> 00:28:51,480
building a silver ticket in in user

798
00:28:51,480 --> 00:28:53,880
space we are actually like constructing

799
00:28:53,880 --> 00:28:56,520
an entire KDC but I have tried to write

800
00:28:56,520 --> 00:28:59,460
uh the the net classes in the Powershell

801
00:28:59,460 --> 00:29:02,100
module in a relatively easy to use way

802
00:29:02,100 --> 00:29:05,700
as the relative as a KDC can be because

803
00:29:05,700 --> 00:29:07,679
I did initially look at things like uh

804
00:29:07,679 --> 00:29:09,740
using sambas

805
00:29:09,740 --> 00:29:12,779
KDC but it doesn't really support users

806
00:29:12,779 --> 00:29:14,880
to use it properly so that would that

807
00:29:14,880 --> 00:29:16,080
was I wasn't going to start writing

808
00:29:16,080 --> 00:29:19,320
Samba code so I'm sorry about that

809
00:29:19,320 --> 00:29:22,740
um so all we do here we specify our fake

810
00:29:22,740 --> 00:29:26,039
realm uh we have a password of password

811
00:29:26,039 --> 00:29:27,840
because it can be anything that we don't

812
00:29:27,840 --> 00:29:29,600
need to honor the current password

813
00:29:29,600 --> 00:29:31,799
complexity requirements for it for your

814
00:29:31,799 --> 00:29:34,740
domain this is a useful feature

815
00:29:34,740 --> 00:29:37,440
um and just be we build a user

816
00:29:37,440 --> 00:29:40,200
and then literally with that user he's

817
00:29:40,200 --> 00:29:42,539
called new Kerberos KDC server and give

818
00:29:42,539 --> 00:29:45,360
it the realm give it the domain said and

819
00:29:45,360 --> 00:29:46,679
your list of users

820
00:29:46,679 --> 00:29:48,419
and you just start it and it just sits

821
00:29:48,419 --> 00:29:50,419
there running on localhost

822
00:29:50,419 --> 00:29:53,640
we can then add the PIN

823
00:29:53,640 --> 00:29:56,100
so we pin that realm so any request by

824
00:29:56,100 --> 00:29:58,740
LSA in our current from our current

825
00:29:58,740 --> 00:30:02,220
thread and process for that realm we'll

826
00:30:02,220 --> 00:30:04,919
go to actually localhost so we'll go to

827
00:30:04,919 --> 00:30:06,600
our local KDC

828
00:30:06,600 --> 00:30:09,600
and then we pretty much just do a

829
00:30:09,600 --> 00:30:12,140
standard loopback authentication request

830
00:30:12,140 --> 00:30:15,960
we have to pass our fake credentials to

831
00:30:15,960 --> 00:30:19,080
LSA but it will quite happily like

832
00:30:19,080 --> 00:30:22,200
use those and go oh the pin I can just

833
00:30:22,200 --> 00:30:24,539
talk to the KDC on localhost no problems

834
00:30:24,539 --> 00:30:27,000
and then we get the access token at the

835
00:30:27,000 --> 00:30:29,399
end and hopefully everything's good

836
00:30:29,399 --> 00:30:30,960
so

837
00:30:30,960 --> 00:30:34,020
just to prove that I'm not cheating

838
00:30:34,020 --> 00:30:36,960
um we call get computer info and one of

839
00:30:36,960 --> 00:30:40,279
the properties and that is device guard

840
00:30:40,279 --> 00:30:43,200
uh where is it so security service is

841
00:30:43,200 --> 00:30:44,039
running

842
00:30:44,039 --> 00:30:46,020
so we're running credential guard and if

843
00:30:46,020 --> 00:30:48,360
we actually run our previous one

844
00:30:48,360 --> 00:30:49,500
um

845
00:30:49,500 --> 00:30:52,200
so because we got that we can't actually

846
00:30:52,200 --> 00:30:56,100
uh get the users TGT so there is a a

847
00:30:56,100 --> 00:30:58,679
simple get user TGT script I've written

848
00:30:58,679 --> 00:31:01,260
just to do that attack and we can't get

849
00:31:01,260 --> 00:31:05,159
the delegation TGT okay so our current

850
00:31:05,159 --> 00:31:10,020
attack Vector is is at is a problem so

851
00:31:10,020 --> 00:31:12,899
instead we run our KDC attack

852
00:31:12,899 --> 00:31:14,340
we run that

853
00:31:14,340 --> 00:31:18,840
no errors always a good sign uh

854
00:31:18,840 --> 00:31:22,080
we have such an idea of two we can see

855
00:31:22,080 --> 00:31:23,940
our groups

856
00:31:23,940 --> 00:31:26,340
we are a main member of the built-in

857
00:31:26,340 --> 00:31:27,840
administrators

858
00:31:27,840 --> 00:31:29,399
awesome

859
00:31:29,399 --> 00:31:34,140
and so we can obviously impersonate this

860
00:31:34,140 --> 00:31:36,539
to verify that we've actually got

861
00:31:36,539 --> 00:31:41,720
privilege escalation bye bye credit card

862
00:31:42,620 --> 00:31:44,240
content

863
00:31:44,240 --> 00:31:49,140
Windows cred dot text

864
00:31:49,140 --> 00:31:51,600
and no errors

865
00:31:51,600 --> 00:31:53,039
so

866
00:31:53,039 --> 00:31:55,740
just to check that again I'm not

867
00:31:55,740 --> 00:31:57,720
no sleight of hand bye bye Craig guard

868
00:31:57,720 --> 00:31:59,640
and we've basically done it even with

869
00:31:59,640 --> 00:32:01,500
Craig got enabled without ever knowing

870
00:32:01,500 --> 00:32:04,340
the user's password

871
00:32:05,400 --> 00:32:08,469
[Applause]

872
00:32:11,039 --> 00:32:14,279
so let me just wrap this up

873
00:32:14,279 --> 00:32:16,140
unfortunately if you go and try this

874
00:32:16,140 --> 00:32:18,419
today it won't work and that's because

875
00:32:18,419 --> 00:32:20,399
Microsoft actually fixed the issue

876
00:32:20,399 --> 00:32:21,419
yesterday

877
00:32:21,419 --> 00:32:24,200
basically

878
00:32:24,720 --> 00:32:25,919
yes I may have been slightly cheating

879
00:32:25,919 --> 00:32:28,980
with the VMS they weren't up to date

880
00:32:28,980 --> 00:32:30,000
um

881
00:32:30,000 --> 00:32:31,860
so they basically what they've done is

882
00:32:31,860 --> 00:32:34,740
they've effectively removed that use the

883
00:32:34,740 --> 00:32:37,260
user flag check and it's not even in

884
00:32:37,260 --> 00:32:39,000
clear why this even existed in the first

885
00:32:39,000 --> 00:32:41,520
place but it's one of those things that

886
00:32:41,520 --> 00:32:44,460
it's been there because some customer at

887
00:32:44,460 --> 00:32:47,340
some point needed this feature it can be

888
00:32:47,340 --> 00:32:49,440
re-enabled by changing one of the

889
00:32:49,440 --> 00:32:52,559
configuration knobs in Kerberos

890
00:32:52,559 --> 00:32:54,419
um you can just go into the Kerberos dll

891
00:32:54,419 --> 00:32:56,039
and find out what the name of that is as

892
00:32:56,039 --> 00:32:57,659
far as I know it's undocumented at the

893
00:32:57,659 --> 00:32:59,399
moment uh because it's probably one of

894
00:32:59,399 --> 00:33:00,840
these things that Microsoft will only

895
00:33:00,840 --> 00:33:02,340
tell you about if you have this

896
00:33:02,340 --> 00:33:03,960
particular problem in a in an Enterprise

897
00:33:03,960 --> 00:33:05,640
environment

898
00:33:05,640 --> 00:33:07,799
um so effectively are

899
00:33:07,799 --> 00:33:09,840
um attack has gone which is a bit of a

900
00:33:09,840 --> 00:33:11,580
shame but this is the whole point of

901
00:33:11,580 --> 00:33:15,980
security research is to get things fixed

902
00:33:16,080 --> 00:33:18,299
but of course there's possibilities that

903
00:33:18,299 --> 00:33:19,919
these types of bugs will happen again

904
00:33:19,919 --> 00:33:21,600
and

905
00:33:21,600 --> 00:33:23,760
we sort of thought about okay what sort

906
00:33:23,760 --> 00:33:25,620
of mitigations can we kind of think of

907
00:33:25,620 --> 00:33:27,899
here and none of them are perfect but

908
00:33:27,899 --> 00:33:29,640
you can you can apply some of them in an

909
00:33:29,640 --> 00:33:31,620
Enterprise environment so the first one

910
00:33:31,620 --> 00:33:33,600
is there's a there's a flag if you look

911
00:33:33,600 --> 00:33:36,539
back at that previous slide you can if

912
00:33:36,539 --> 00:33:38,880
you're a a non-system service so you're

913
00:33:38,880 --> 00:33:42,059
like a sort of an IIs pool user or

914
00:33:42,059 --> 00:33:44,700
you're a virtual service account you can

915
00:33:44,700 --> 00:33:46,980
still bypass pack validation by having

916
00:33:46,980 --> 00:33:50,580
the service Sid as one of your groups

917
00:33:50,580 --> 00:33:52,260
um but you can actually disable that

918
00:33:52,260 --> 00:33:54,059
feature so there is a configuration knob

919
00:33:54,059 --> 00:33:56,760
for Kerberos which says actually no turn

920
00:33:56,760 --> 00:34:00,299
this off because it's it's bad for me

921
00:34:00,299 --> 00:34:02,220
however it really doesn't prevent local

922
00:34:02,220 --> 00:34:03,960
service and network service or system

923
00:34:03,960 --> 00:34:07,080
from accepting packs with modify uh for

924
00:34:07,080 --> 00:34:09,239
accepting tickets from modified packs so

925
00:34:09,239 --> 00:34:11,339
it's not a perfect solution necessarily

926
00:34:11,339 --> 00:34:13,199
certainly won't prevent uh silver ticket

927
00:34:13,199 --> 00:34:15,980
attacks generally

928
00:34:16,440 --> 00:34:18,480
um you can also turn on you've got to

929
00:34:18,480 --> 00:34:20,159
force Kerberos armoring or sometimes

930
00:34:20,159 --> 00:34:22,679
called fast uh this would make it harder

931
00:34:22,679 --> 00:34:24,239
to tamper with network traffic between

932
00:34:24,239 --> 00:34:25,980
the clients and the KDC because it's

933
00:34:25,980 --> 00:34:27,780
sort of signed by the computer account's

934
00:34:27,780 --> 00:34:28,699
password

935
00:34:28,699 --> 00:34:32,040
so obviously we didn't really need it in

936
00:34:32,040 --> 00:34:33,659
this they wouldn't have really affected

937
00:34:33,659 --> 00:34:36,000
us directly but if you force it on a

938
00:34:36,000 --> 00:34:38,099
client so that it can't talk to a KDC

939
00:34:38,099 --> 00:34:39,780
which doesn't have Kerberos armoring

940
00:34:39,780 --> 00:34:42,659
enabled then our KDC attack would fail

941
00:34:42,659 --> 00:34:44,760
because it just can't it would just

942
00:34:44,760 --> 00:34:48,619
reject our KDC as being invalid

943
00:34:49,139 --> 00:34:51,659
um now we obviously demonstrated a way

944
00:34:51,659 --> 00:34:54,480
of around credential guard but I we

945
00:34:54,480 --> 00:34:56,940
still think it has value like there's

946
00:34:56,940 --> 00:34:58,200
plenty of things that you can do with

947
00:34:58,200 --> 00:35:00,420
that TGT session key that are probably

948
00:35:00,420 --> 00:35:02,339
perhaps not even realized at the moment

949
00:35:02,339 --> 00:35:05,339
and there's already some attacks so just

950
00:35:05,339 --> 00:35:07,140
turning that on has obviously a benefit

951
00:35:07,140 --> 00:35:08,940
that it makes it harder to extract key

952
00:35:08,940 --> 00:35:11,400
material generally and also blocking

953
00:35:11,400 --> 00:35:13,200
this unconstrained delegation attack is

954
00:35:13,200 --> 00:35:14,520
also quite useful

955
00:35:14,520 --> 00:35:17,579
uh and then finally like uh even if they

956
00:35:17,579 --> 00:35:19,500
remove say the pinning attack uh the

957
00:35:19,500 --> 00:35:21,660
pinning trick uh you can still use like

958
00:35:21,660 --> 00:35:24,900
DNS records to configure your your fake

959
00:35:24,900 --> 00:35:26,460
KDC somewhere out on the internet

960
00:35:26,460 --> 00:35:29,160
internet so having like Enterprise file

961
00:35:29,160 --> 00:35:31,560
rules which say only allow this client

962
00:35:31,560 --> 00:35:34,020
to talk to known kdc's is probably a

963
00:35:34,020 --> 00:35:36,440
good idea

964
00:35:36,540 --> 00:35:38,220
so under the tech side of things that

965
00:35:38,220 --> 00:35:40,140
was mitigation so how can you detect

966
00:35:40,140 --> 00:35:43,619
these attacks uh occurring and there's

967
00:35:43,619 --> 00:35:45,720
not great options like probably the best

968
00:35:45,720 --> 00:35:48,000
we found is in the security log there's

969
00:35:48,000 --> 00:35:51,300
this event 4672 which basically says

970
00:35:51,300 --> 00:35:53,700
this user has been effectively granted

971
00:35:53,700 --> 00:35:56,220
administrators style privileges

972
00:35:56,220 --> 00:35:59,880
and of course if a domain user who isn't

973
00:35:59,880 --> 00:36:01,859
a local admin on that machine suddenly

974
00:36:01,859 --> 00:36:04,740
is getting local admin groups or local

975
00:36:04,740 --> 00:36:06,900
admin privileges there's probably a

976
00:36:06,900 --> 00:36:09,480
problem that you might want to look at

977
00:36:09,480 --> 00:36:12,480
so I'm sure probably if you if you go

978
00:36:12,480 --> 00:36:13,920
looking there's probably something else

979
00:36:13,920 --> 00:36:15,660
interesting you can find but that's the

980
00:36:15,660 --> 00:36:17,339
best we could come up with and of course

981
00:36:17,339 --> 00:36:19,020
this is only a 40 minute presentation we

982
00:36:19,020 --> 00:36:21,060
had lots of uh things we we couldn't

983
00:36:21,060 --> 00:36:22,380
talk about

984
00:36:22,380 --> 00:36:24,660
um there's a link to my my tooling but

985
00:36:24,660 --> 00:36:26,460
also various links to things like UAC

986
00:36:26,460 --> 00:36:28,680
bypasses using Kerberos ticket

987
00:36:28,680 --> 00:36:31,020
manipulation remote credential guard

988
00:36:31,020 --> 00:36:32,520
code execution like arbitrary code

989
00:36:32,520 --> 00:36:35,460
execution and lsas because why not

990
00:36:35,460 --> 00:36:39,420
um actina escapes Etc so obviously the

991
00:36:39,420 --> 00:36:40,740
slides will be out and you can you can

992
00:36:40,740 --> 00:36:43,520
find those links directly

993
00:36:43,520 --> 00:36:45,420
acknowledgments there's plenty of people

994
00:36:45,420 --> 00:36:47,220
who work in the Kerberos space and has

995
00:36:47,220 --> 00:36:49,500
found many of the things that we build

996
00:36:49,500 --> 00:36:52,920
up our our own work upon so these are of

997
00:36:52,920 --> 00:36:54,660
course people we are we are grateful for

998
00:36:54,660 --> 00:36:56,099
and I'm sure there's plenty of people we

999
00:36:56,099 --> 00:36:59,099
forgot on this slide

1000
00:36:59,099 --> 00:37:01,619
but it would be rude of me to leave

1001
00:37:01,619 --> 00:37:04,740
without showing one more thing

1002
00:37:04,740 --> 00:37:07,500
um as is tradition

1003
00:37:07,500 --> 00:37:12,320
um so let me just go back to Windows 11.

1004
00:37:12,599 --> 00:37:14,940
um I do have

1005
00:37:14,940 --> 00:37:16,920
a snapshot

1006
00:37:16,920 --> 00:37:20,119
updated to yesterday

1007
00:37:20,579 --> 00:37:22,859
and hypervis

1008
00:37:22,859 --> 00:37:25,619
thinking about it

1009
00:37:25,619 --> 00:37:27,680
um

1010
00:37:27,839 --> 00:37:30,720
so it's kind of like okay

1011
00:37:30,720 --> 00:37:32,820
they've blocked our way of bypassing

1012
00:37:32,820 --> 00:37:34,619
pack validation right

1013
00:37:34,619 --> 00:37:36,720
well is there any other interesting way

1014
00:37:36,720 --> 00:37:40,040
we can we can get around this

1015
00:37:40,440 --> 00:37:42,599
so

1016
00:37:42,599 --> 00:37:45,800
let's connect to here

1017
00:37:47,820 --> 00:37:50,960
let's go on hyper-v

1018
00:37:51,180 --> 00:37:54,200
oh there we go

1019
00:37:54,300 --> 00:37:55,680
um

1020
00:37:55,680 --> 00:37:57,900
so obviously we log in as Bob because

1021
00:37:57,900 --> 00:38:00,720
Bob is our non-admin user because again

1022
00:38:00,720 --> 00:38:02,520
we can't have them as USC admin because

1023
00:38:02,520 --> 00:38:04,859
that ironically we can't impersonate an

1024
00:38:04,859 --> 00:38:06,780
admin token if we're in a UAC user

1025
00:38:06,780 --> 00:38:09,480
because you can bypass UIC or out of it

1026
00:38:09,480 --> 00:38:12,140
very strange

1027
00:38:12,660 --> 00:38:15,078
right

1028
00:38:16,200 --> 00:38:19,759
okie dokie so

1029
00:38:20,700 --> 00:38:24,119
we go to oops

1030
00:38:24,119 --> 00:38:27,240
we go to our Parks directory and as I

1031
00:38:27,240 --> 00:38:28,920
say this is updating so if we run our

1032
00:38:28,920 --> 00:38:31,619
KDC attack

1033
00:38:31,619 --> 00:38:34,079
um it fails as you'd expect so it's

1034
00:38:34,079 --> 00:38:36,359
removed our silver ticket attack

1035
00:38:36,359 --> 00:38:38,280
however

1036
00:38:38,280 --> 00:38:43,200
if we do uh one last thing and it's kind

1037
00:38:43,200 --> 00:38:45,119
of giving giving away that this is still

1038
00:38:45,119 --> 00:38:47,160
a silver ticket attack of sorts

1039
00:38:47,160 --> 00:38:48,240
because we still need to use this

1040
00:38:48,240 --> 00:38:50,400
password

1041
00:38:50,400 --> 00:38:51,000
um

1042
00:38:51,000 --> 00:38:53,940
huh interesting

1043
00:38:53,940 --> 00:38:56,339
so we have a look at the session ID we

1044
00:38:56,339 --> 00:38:59,720
get his token groups

1045
00:39:00,300 --> 00:39:03,130
oh he's an administrator that's a shame

1046
00:39:03,130 --> 00:39:06,300
[Applause]

1047
00:39:08,460 --> 00:39:11,760
and just to prove a point

1048
00:39:11,760 --> 00:39:13,880
um

1049
00:39:16,339 --> 00:39:19,200
third content

1050
00:39:19,200 --> 00:39:22,640
windows test.text

1051
00:39:25,020 --> 00:39:28,160
and there we go

1052
00:39:28,750 --> 00:39:34,949
[Applause]

1053
00:39:35,579 --> 00:39:37,380
so before anyone asked I did report out

1054
00:39:37,380 --> 00:39:39,240
to Microsoft yesterday

1055
00:39:39,240 --> 00:39:40,320
um unfortunately it's one of those

1056
00:39:40,320 --> 00:39:41,640
things that I couldn't really report it

1057
00:39:41,640 --> 00:39:42,599
because I didn't know whether it was a

1058
00:39:42,599 --> 00:39:44,280
bug until they fixed the bug that we

1059
00:39:44,280 --> 00:39:47,160
were bypassing to fix anyway needless to

1060
00:39:47,160 --> 00:39:48,300
say

1061
00:39:48,300 --> 00:39:50,520
um it was a bit of a last run thing

1062
00:39:50,520 --> 00:39:51,900
um so that is the end of our

1063
00:39:51,900 --> 00:39:53,700
presentation thanks very much for uh for

1064
00:39:53,700 --> 00:39:56,099
attending I really appreciate and I sure

1065
00:39:56,099 --> 00:39:57,540
Nick appreciate it yeah thanks everyone

1066
00:39:57,540 --> 00:39:59,040
I really really appreciate everyone

1067
00:39:59,040 --> 00:40:00,540
coming and we had a lot of fun with us

1068
00:40:00,540 --> 00:40:01,619
and definitely check out all the

1069
00:40:01,619 --> 00:40:03,839
material we skipped out on so we had so

1070
00:40:03,839 --> 00:40:04,740
much we wanted to put in this

1071
00:40:04,740 --> 00:40:06,300
presentation and we couldn't get to it

1072
00:40:06,300 --> 00:40:09,420
yeah and I'll try and uh put up the uh

1073
00:40:09,420 --> 00:40:12,240
the example scripts sometime later next

1074
00:40:12,240 --> 00:40:14,940
week so thank you very much and have a

1075
00:40:14,940 --> 00:40:16,110
good rest of your day

1076
00:40:16,110 --> 00:40:18,870
[Applause]

1077
00:40:18,870 --> 00:40:21,980
[Music]

1078
00:40:25,820 --> 00:40:28,919
[Music]

