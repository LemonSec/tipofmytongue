1
00:00:01,700 --> 00:00:04,810
[Music]

2
00:00:10,040 --> 00:00:12,540
all right everyone uh thanks for joining

3
00:00:12,540 --> 00:00:14,820
uh by the attendance I can see there are

4
00:00:14,820 --> 00:00:16,139
a lot of circuit designers in the room

5
00:00:16,139 --> 00:00:18,480
uh but

6
00:00:18,480 --> 00:00:20,279
um anyway so let's get caught let's get

7
00:00:20,279 --> 00:00:21,960
uh moving forward and talk about fault

8
00:00:21,960 --> 00:00:24,420
injection detection so we're going to

9
00:00:24,420 --> 00:00:25,800
talk about some fault injection

10
00:00:25,800 --> 00:00:28,199
detection Basics we're going to dive

11
00:00:28,199 --> 00:00:30,660
into the tunable replica circuit itself

12
00:00:30,660 --> 00:00:32,820
we're going to talk about how Intel

13
00:00:32,820 --> 00:00:35,219
integrated the TRC a little bit about

14
00:00:35,219 --> 00:00:37,020
calibration and validation and some

15
00:00:37,020 --> 00:00:39,300
conclusions a little bit a little bit

16
00:00:39,300 --> 00:00:42,180
about myself I've been with Intel for a

17
00:00:42,180 --> 00:00:45,059
long long time working on such products

18
00:00:45,059 --> 00:00:46,980
as a manageability engine and the

19
00:00:46,980 --> 00:00:48,600
convert security manageability engine

20
00:00:48,600 --> 00:00:51,780
since their inceptions Carlos tokunaga

21
00:00:51,780 --> 00:00:54,840
is on the phone he's been a circuit

22
00:00:54,840 --> 00:00:57,120
designer and architect in Intel labs for

23
00:00:57,120 --> 00:00:59,820
also a very long time so let's get

24
00:00:59,820 --> 00:01:02,460
started I 10 and ask questions to the

25
00:01:02,460 --> 00:01:05,519
audience so pay attention and I'm hoping

26
00:01:05,519 --> 00:01:06,479
you guys are going to learn something

27
00:01:06,479 --> 00:01:09,000
here the focus is to explain to you all

28
00:01:09,000 --> 00:01:11,220
what Intel is doing for fall injection

29
00:01:11,220 --> 00:01:13,680
detection and a little bit about the

30
00:01:13,680 --> 00:01:16,560
technology itself okay so some of the

31
00:01:16,560 --> 00:01:19,619
basics so focusing on non-invasive fault

32
00:01:19,619 --> 00:01:23,640
injection attacks where modification of

33
00:01:23,640 --> 00:01:25,439
the package is out of scope is really

34
00:01:25,439 --> 00:01:29,700
the um the gist of the presentation so

35
00:01:29,700 --> 00:01:32,360
um some of the attacks when we refer to

36
00:01:32,360 --> 00:01:34,320
non-invasive fall injection what we're

37
00:01:34,320 --> 00:01:37,320
saying is you can attack anything around

38
00:01:37,320 --> 00:01:40,079
the package the motherboard the bumps

39
00:01:40,079 --> 00:01:42,360
the pins Etc but once you start cracking

40
00:01:42,360 --> 00:01:44,640
the package open that's out of scope for

41
00:01:44,640 --> 00:01:46,680
these types of these types of attacks

42
00:01:46,680 --> 00:01:49,259
and so when we talk about non-invasive

43
00:01:49,259 --> 00:01:50,939
fall injection we're talking about

44
00:01:50,939 --> 00:01:52,619
voltage attacks

45
00:01:52,619 --> 00:01:56,040
we're talking about clock attacks uh

46
00:01:56,040 --> 00:01:57,780
we're talking about electromagnetic

47
00:01:57,780 --> 00:01:59,820
radiation attacks otherwise known as

48
00:01:59,820 --> 00:02:03,000
emfi and then finally we're talking

49
00:02:03,000 --> 00:02:05,520
about thermal attacks and so all these

50
00:02:05,520 --> 00:02:08,399
attacks are unique in that you can you

51
00:02:08,399 --> 00:02:10,560
can mount them on Silicon without

52
00:02:10,560 --> 00:02:12,900
touching anything inside the package

53
00:02:12,900 --> 00:02:15,239
itself so once you crack the package

54
00:02:15,239 --> 00:02:18,480
open it's a different type of attack and

55
00:02:18,480 --> 00:02:21,480
but once again really again for

56
00:02:21,480 --> 00:02:22,860
non-invasive fault injection we're

57
00:02:22,860 --> 00:02:24,840
talking about pin modification for the

58
00:02:24,840 --> 00:02:27,000
most part and the primary pins that

59
00:02:27,000 --> 00:02:28,739
we're talking about here are both

60
00:02:28,739 --> 00:02:31,680
digital and analog voltage rails as well

61
00:02:31,680 --> 00:02:34,500
as on our parts we have two inputs from

62
00:02:34,500 --> 00:02:38,580
crystals our 32.7 kilohertz Crystal and

63
00:02:38,580 --> 00:02:41,580
our 38.4 megahertz Crystal so these are

64
00:02:41,580 --> 00:02:43,980
really the primary attack surfaces for

65
00:02:43,980 --> 00:02:46,019
non-invasive fault injection and the

66
00:02:46,019 --> 00:02:49,080
primary focus of this talk when we get

67
00:02:49,080 --> 00:02:51,120
to semi-invasive really the primary

68
00:02:51,120 --> 00:02:53,959
attack Vector is laser others

69
00:02:53,959 --> 00:02:57,360
because for the most part they require a

70
00:02:57,360 --> 00:02:59,580
package de-lib right now there has been

71
00:02:59,580 --> 00:03:01,739
some research done where you could avoid

72
00:03:01,739 --> 00:03:03,900
a package delayed and shoot a laser from

73
00:03:03,900 --> 00:03:06,720
the side but that research is is pretty

74
00:03:06,720 --> 00:03:10,440
new so for the majority of falling of

75
00:03:10,440 --> 00:03:12,540
laser-based attacks you know you do

76
00:03:12,540 --> 00:03:14,300
require a d-lib

77
00:03:14,300 --> 00:03:17,819
so now to complete the circle so again

78
00:03:17,819 --> 00:03:19,760
laser attacks are also out of scope

79
00:03:19,760 --> 00:03:22,260
because the tunable replica circuit

80
00:03:22,260 --> 00:03:24,239
isn't we're not we're not making any

81
00:03:24,239 --> 00:03:25,980
promises that it will detect a laser

82
00:03:25,980 --> 00:03:26,940
attack

83
00:03:26,940 --> 00:03:30,300
uh so completing the circle is we have

84
00:03:30,300 --> 00:03:32,040
um we have highly invasive fault

85
00:03:32,040 --> 00:03:35,159
injection attacks and these attacks are

86
00:03:35,159 --> 00:03:37,080
completely out of scope now I'll give

87
00:03:37,080 --> 00:03:39,659
you guys three guesses at what slide I

88
00:03:39,659 --> 00:03:41,640
had to spend the most time with the

89
00:03:41,640 --> 00:03:44,760
lawyers on right yeah exactly this one

90
00:03:44,760 --> 00:03:46,200
okay

91
00:03:46,200 --> 00:03:49,920
um so what is uh an attacker trying to

92
00:03:49,920 --> 00:03:52,560
accomplish with fault injection and

93
00:03:52,560 --> 00:03:54,840
really what they're trying to do is to

94
00:03:54,840 --> 00:03:56,940
get circuit timing to fail without

95
00:03:56,940 --> 00:03:58,920
causing the whole platform to crash

96
00:03:58,920 --> 00:04:01,500
because if they do a fall injection

97
00:04:01,500 --> 00:04:05,159
attack using voltage or clock emfi or or

98
00:04:05,159 --> 00:04:07,799
heat and the platform just crashes then

99
00:04:07,799 --> 00:04:09,780
there's no point right so they really

100
00:04:09,780 --> 00:04:11,700
want to get to the point where they can

101
00:04:11,700 --> 00:04:13,500
cause circuit timing to fail but the

102
00:04:13,500 --> 00:04:16,199
platform maintains or the the target of

103
00:04:16,199 --> 00:04:18,899
evaluation uh The Entity under attack

104
00:04:18,899 --> 00:04:22,639
doesn't completely crash right and so

105
00:04:22,639 --> 00:04:25,860
why is circuit timing interesting well

106
00:04:25,860 --> 00:04:27,540
circuit timing is interesting because

107
00:04:27,540 --> 00:04:30,479
when circuit timing fails you can get

108
00:04:30,479 --> 00:04:33,060
data to be latched either too early or

109
00:04:33,060 --> 00:04:35,340
too late now in this presentation we're

110
00:04:35,340 --> 00:04:37,259
going to focus on latching data too

111
00:04:37,259 --> 00:04:40,199
early because that is a that is in the

112
00:04:40,199 --> 00:04:42,840
scope of under voltage attacks we could

113
00:04:42,840 --> 00:04:45,419
talk about latching data too it would

114
00:04:45,419 --> 00:04:47,160
just take too much time but the same

115
00:04:47,160 --> 00:04:50,580
principles apply so now when you if you

116
00:04:50,580 --> 00:04:53,280
latch data too early in many platforms

117
00:04:53,280 --> 00:04:55,680
or microcontrollers what's happening is

118
00:04:55,680 --> 00:04:58,860
you're latching zeros okay and so first

119
00:04:58,860 --> 00:05:01,139
question for the audience is what

120
00:05:01,139 --> 00:05:03,120
instruction is mostly associated with

121
00:05:03,120 --> 00:05:05,699
the value of zero anybody know

122
00:05:05,699 --> 00:05:09,479
yeah no op exactly right and so the kind

123
00:05:09,479 --> 00:05:11,759
of Holy Grail of a fault injection

124
00:05:11,759 --> 00:05:16,139
attack is if you can convert a jump to a

125
00:05:16,139 --> 00:05:18,720
no op when authenticating trusted

126
00:05:18,720 --> 00:05:22,320
firmware in a secure engine right so

127
00:05:22,320 --> 00:05:25,919
um so at just the right time after an

128
00:05:25,919 --> 00:05:28,680
attacker slaps their malicious firmware

129
00:05:28,680 --> 00:05:30,479
inside a flash device or some other

130
00:05:30,479 --> 00:05:33,300
device or loads it into the memory of a

131
00:05:33,300 --> 00:05:35,039
controller it's going to fail

132
00:05:35,039 --> 00:05:38,220
authentication but the jump to error if

133
00:05:38,220 --> 00:05:39,900
they can cause that jump to error to be

134
00:05:39,900 --> 00:05:42,600
a no-off it'll fall through and execute

135
00:05:42,600 --> 00:05:45,000
the main image of their malicious

136
00:05:45,000 --> 00:05:46,680
firmware so that's kind of the Holy

137
00:05:46,680 --> 00:05:49,979
Grail here so converting a jump to a no

138
00:05:49,979 --> 00:05:53,220
op is really what at a simple level an

139
00:05:53,220 --> 00:05:54,960
attacker is trying to do with a fault

140
00:05:54,960 --> 00:05:57,539
injection attack okay and so how does

141
00:05:57,539 --> 00:06:00,120
this apply to timing well in a standard

142
00:06:00,120 --> 00:06:01,979
timing diagram you might have something

143
00:06:01,979 --> 00:06:04,620
again this is very simplified but I I'm

144
00:06:04,620 --> 00:06:07,080
trying to hone in on some key points

145
00:06:07,080 --> 00:06:10,380
here so as you can see uh on the second

146
00:06:10,380 --> 00:06:13,320
Rising edge of this clock when you have

147
00:06:13,320 --> 00:06:16,020
data running at nominal voltage the jump

148
00:06:16,020 --> 00:06:18,240
is latched right

149
00:06:18,240 --> 00:06:22,160
and so but as as as some of you may know

150
00:06:22,160 --> 00:06:25,020
once you drop the voltage of the data

151
00:06:25,020 --> 00:06:30,120
lines the data moves faster or slower

152
00:06:30,120 --> 00:06:33,180
slower good okay so if you can get the

153
00:06:33,180 --> 00:06:35,220
data to move slower you push those data

154
00:06:35,220 --> 00:06:37,500
lines out to the right and the clock

155
00:06:37,500 --> 00:06:40,800
isn't changing presumably on this simple

156
00:06:40,800 --> 00:06:44,220
attack and so you're latching a jump and

157
00:06:44,220 --> 00:06:46,199
Sr you'll actually know up instead of a

158
00:06:46,199 --> 00:06:48,900
jump and you've succeeded in executing

159
00:06:48,900 --> 00:06:50,280
malicious code

160
00:06:50,280 --> 00:06:52,259
okay this is kind of important so this

161
00:06:52,259 --> 00:06:53,819
is really what the attacker is trying to

162
00:06:53,819 --> 00:06:54,479
do

163
00:06:54,479 --> 00:06:56,880
now if we take clock glitching it's very

164
00:06:56,880 --> 00:06:59,220
similar so you have the same good clock

165
00:06:59,220 --> 00:07:01,919
and data executing

166
00:07:01,919 --> 00:07:05,639
um and data actually data uh being

167
00:07:05,639 --> 00:07:08,520
driven at nominal voltage so what would

168
00:07:08,520 --> 00:07:12,120
the clock look like if they glitched it

169
00:07:12,120 --> 00:07:16,080
to a faster clock anybody know

170
00:07:16,080 --> 00:07:18,919
it'd be a little louder

171
00:07:19,560 --> 00:07:22,440
uh well so okay so the clock would shift

172
00:07:22,440 --> 00:07:24,840
over and the clock cycle itself would be

173
00:07:24,840 --> 00:07:28,620
much smaller right right there and so in

174
00:07:28,620 --> 00:07:31,139
effect the clock is latch the clock's

175
00:07:31,139 --> 00:07:32,880
Rising Edge is the second Rising edge of

176
00:07:32,880 --> 00:07:35,880
the caucus much earlier again latching

177
00:07:35,880 --> 00:07:37,919
and Noah because you sped up that clock

178
00:07:37,919 --> 00:07:40,319
now how fast do you want to speed up the

179
00:07:40,319 --> 00:07:43,560
clock and how and how fast you want to

180
00:07:43,560 --> 00:07:46,560
drive the voltage so you you don't want

181
00:07:46,560 --> 00:07:48,599
to drive that voltage low for a second

182
00:07:48,599 --> 00:07:50,580
because if you drop it low for a second

183
00:07:50,580 --> 00:07:52,800
at that low of a voltage it's going to

184
00:07:52,800 --> 00:07:54,539
crash the whole platform and so what

185
00:07:54,539 --> 00:07:57,300
attacker is trying to do ideally is

186
00:07:57,300 --> 00:08:00,360
Drive the voltage to a very low value

187
00:08:00,360 --> 00:08:02,940
for roughly a clock cycle so in 100

188
00:08:02,940 --> 00:08:04,919
megahertz processor they're trying to

189
00:08:04,919 --> 00:08:07,500
drive that voltage to a very low voltage

190
00:08:07,500 --> 00:08:10,199
for roughly 10 nanoseconds and they're

191
00:08:10,199 --> 00:08:12,660
trying to convert a 10 Nan ore and a

192
00:08:12,660 --> 00:08:14,400
clock attack they're trying to in one

193
00:08:14,400 --> 00:08:17,099
clock cycle change the clock cycle from

194
00:08:17,099 --> 00:08:19,020
a 10 to let's say a five nanosecond

195
00:08:19,020 --> 00:08:21,060
clock cycle if they can do that

196
00:08:21,060 --> 00:08:22,919
precisely they've got a very good system

197
00:08:22,919 --> 00:08:24,960
for mounting an attack

198
00:08:24,960 --> 00:08:28,139
okay so what do we do to solve this

199
00:08:28,139 --> 00:08:29,580
problem well as you may have gathered

200
00:08:29,580 --> 00:08:32,640
we're focused a little bit more on

201
00:08:32,640 --> 00:08:35,399
circuit timing than we are on actual

202
00:08:35,399 --> 00:08:37,740
voltage or clock frequencies and so

203
00:08:37,740 --> 00:08:39,958
that's kind of what's unique and special

204
00:08:39,958 --> 00:08:43,740
here okay so the tunable replica circuit

205
00:08:43,740 --> 00:08:45,600
which Carlos on the phone and his team

206
00:08:45,600 --> 00:08:47,339
actually invented

207
00:08:47,339 --> 00:08:49,980
way back when to mitigate they invented

208
00:08:49,980 --> 00:08:52,080
it to mitigate aging and silicon because

209
00:08:52,080 --> 00:08:54,600
when silicon ages its timing starts to

210
00:08:54,600 --> 00:08:56,459
fail as they all get older we start

211
00:08:56,459 --> 00:08:59,339
slowing down right and circuits are no

212
00:08:59,339 --> 00:09:01,380
different and so by detecting when

213
00:09:01,380 --> 00:09:02,899
circuit timing started to slow down

214
00:09:02,899 --> 00:09:05,820
Carlos and the team could actually

215
00:09:05,820 --> 00:09:09,120
uh reduce guard banding and and and add

216
00:09:09,120 --> 00:09:10,980
more and essentially yield more dye for

217
00:09:10,980 --> 00:09:13,620
Intel and so that technology was named

218
00:09:13,620 --> 00:09:15,720
the tunable replica circuit now since as

219
00:09:15,720 --> 00:09:17,160
we've just discussed fault injection

220
00:09:17,160 --> 00:09:19,800
behaves the same way through through bad

221
00:09:19,800 --> 00:09:22,380
timing if the TRC can detect when timing

222
00:09:22,380 --> 00:09:24,839
fails in a circuit it can detect voltage

223
00:09:24,839 --> 00:09:27,839
and clock in emfi and thermal attacks

224
00:09:27,839 --> 00:09:30,839
and so what the TRC is is it's a very

225
00:09:30,839 --> 00:09:33,420
simple circuit again this is the most

226
00:09:33,420 --> 00:09:35,339
complicated circuit diagram and it might

227
00:09:35,339 --> 00:09:36,959
be an eye chart but I'm going to get a

228
00:09:36,959 --> 00:09:38,100
little bit simpler and we're going to

229
00:09:38,100 --> 00:09:40,500
dive into it with a simpler more concise

230
00:09:40,500 --> 00:09:43,140
diagram but what it consists of is a

231
00:09:43,140 --> 00:09:44,339
launch flop

232
00:09:44,339 --> 00:09:47,880
a tunable delay chain and a capture flop

233
00:09:47,880 --> 00:09:50,339
now this capture flop here is really

234
00:09:50,339 --> 00:09:53,760
determining if a data line that's being

235
00:09:53,760 --> 00:09:58,019
driven along the delay line is coming in

236
00:09:58,019 --> 00:10:01,140
too slow versus what we call a reference

237
00:10:01,140 --> 00:10:03,120
signal and you'll see this in a in the

238
00:10:03,120 --> 00:10:05,160
next diagram so don't worry this isn't

239
00:10:05,160 --> 00:10:06,360
the only diagram we're going to see

240
00:10:06,360 --> 00:10:07,800
we're going to dive in

241
00:10:07,800 --> 00:10:10,440
and the key element is the delay line

242
00:10:10,440 --> 00:10:13,200
and it's the delay line that's tuned to

243
00:10:13,200 --> 00:10:17,459
match worst case nominal timings in our

244
00:10:17,459 --> 00:10:19,980
product right so it's supposed so that

245
00:10:19,980 --> 00:10:22,320
delay line should match what the worst

246
00:10:22,320 --> 00:10:26,279
case delays are and still work right and

247
00:10:26,279 --> 00:10:28,620
once you fall below that our our product

248
00:10:28,620 --> 00:10:31,560
won't functionally work in me timing and

249
00:10:31,560 --> 00:10:34,019
that point uh it can only be an attack

250
00:10:34,019 --> 00:10:36,420
we've determined so we're going to jump

251
00:10:36,420 --> 00:10:38,279
ahead and dive a little bit deeper and

252
00:10:38,279 --> 00:10:40,260
make things a little bit simpler

253
00:10:40,260 --> 00:10:44,220
so a slightly more a simplified diagram

254
00:10:44,220 --> 00:10:46,920
here so you've got some key signals one

255
00:10:46,920 --> 00:10:50,160
is the clock one is a reference line and

256
00:10:50,160 --> 00:10:52,800
one is in data actual line that is

257
00:10:52,800 --> 00:10:55,740
calibrated uh to match the timing of the

258
00:10:55,740 --> 00:10:57,839
circuit at a worst case level and then

259
00:10:57,839 --> 00:10:59,279
you've got the launch in the capture

260
00:10:59,279 --> 00:11:03,060
flop so the input clock that's coming in

261
00:11:03,060 --> 00:11:06,060
will actually on the rising edge launch

262
00:11:06,060 --> 00:11:08,220
the signal along the data reference line

263
00:11:08,220 --> 00:11:11,100
and the data actual line and the second

264
00:11:11,100 --> 00:11:13,740
Rising Edge it will capture whether

265
00:11:13,740 --> 00:11:15,600
those two lines are the same or

266
00:11:15,600 --> 00:11:18,480
different and there's an as you can see

267
00:11:18,480 --> 00:11:21,600
you have the xor gate that is that is

268
00:11:21,600 --> 00:11:23,579
inputting those two data lines and as we

269
00:11:23,579 --> 00:11:26,399
know with an xor if if two signals are

270
00:11:26,399 --> 00:11:28,500
the same you get a zero if the signals

271
00:11:28,500 --> 00:11:30,660
are different you get a one and so on

272
00:11:30,660 --> 00:11:34,019
the second Rising edge of the clock if

273
00:11:34,019 --> 00:11:36,180
the if the data reference line in the

274
00:11:36,180 --> 00:11:38,640
data actual line are not the same you

275
00:11:38,640 --> 00:11:40,920
will generate you'll latch a y line and

276
00:11:40,920 --> 00:11:42,899
output an error in other words you've

277
00:11:42,899 --> 00:11:45,060
determined that timing has failed

278
00:11:45,060 --> 00:11:48,839
okay so how does this work looking at

279
00:11:48,839 --> 00:11:51,120
these two lines now the data reference

280
00:11:51,120 --> 00:11:54,120
line you can see it's slightly coming

281
00:11:54,120 --> 00:11:57,360
Rising uh after the input clock because

282
00:11:57,360 --> 00:12:00,600
the launch flop has a slightly smaller

283
00:12:00,600 --> 00:12:02,459
proper it has a slight propagation delay

284
00:12:02,459 --> 00:12:05,640
over nothing right now what is really

285
00:12:05,640 --> 00:12:08,279
pushed out to the right is the data

286
00:12:08,279 --> 00:12:10,440
actual line due to that delay so all

287
00:12:10,440 --> 00:12:13,560
those uh all those inverters in uh and

288
00:12:13,560 --> 00:12:14,760
nor Gates

289
00:12:14,760 --> 00:12:17,519
are causing that data line to move

290
00:12:17,519 --> 00:12:20,820
slower okay now at that point in time

291
00:12:20,820 --> 00:12:23,700
going through now again this this data

292
00:12:23,700 --> 00:12:26,760
actual line is not under attack it's a

293
00:12:26,760 --> 00:12:29,399
nominal line that we've calibrated to

294
00:12:29,399 --> 00:12:32,100
come up uh at this very time so this is

295
00:12:32,100 --> 00:12:34,260
these are a couple easy questions so in

296
00:12:34,260 --> 00:12:37,140
nominal cases what is going to be the

297
00:12:37,140 --> 00:12:40,079
value of the xor and Slash the error on

298
00:12:40,079 --> 00:12:41,519
this line

299
00:12:41,519 --> 00:12:44,399
zero good I know this is just to make

300
00:12:44,399 --> 00:12:45,899
sure you guys are paying attention right

301
00:12:45,899 --> 00:12:48,779
so let's say we have an attack and that

302
00:12:48,779 --> 00:12:51,120
date and that data line that data actual

303
00:12:51,120 --> 00:12:53,459
line is moved over even to the right a

304
00:12:53,459 --> 00:12:55,980
little bit this is right at which point

305
00:12:55,980 --> 00:12:58,380
now that's because again Lower voltage

306
00:12:58,380 --> 00:13:01,079
equals a slower data line okay so which

307
00:13:01,079 --> 00:13:03,000
point what again now is the actual

308
00:13:03,000 --> 00:13:04,320
result

309
00:13:04,320 --> 00:13:07,440
one excellent good so

310
00:13:07,440 --> 00:13:10,380
it now is detecting that data has moved

311
00:13:10,380 --> 00:13:13,019
too far to the right and as an error

312
00:13:13,019 --> 00:13:15,060
it's failing timing and it's been

313
00:13:15,060 --> 00:13:17,220
calibrated at this point that the only

314
00:13:17,220 --> 00:13:21,060
way it's moved as far is an attack

315
00:13:21,060 --> 00:13:22,200
sorry

316
00:13:22,200 --> 00:13:24,600
that's kind of an important concept

317
00:13:24,600 --> 00:13:26,700
okay

318
00:13:26,700 --> 00:13:31,620
all right so I'm moving right along okay

319
00:13:31,620 --> 00:13:33,360
um so I'm not sure we'll take questions

320
00:13:33,360 --> 00:13:35,160
at the end if that was a question I was

321
00:13:35,160 --> 00:13:38,639
I wasn't sure so okay so why and how uh

322
00:13:38,639 --> 00:13:42,420
did Intel integrate the TRC so

323
00:13:42,420 --> 00:13:45,060
um so we integrated the TRC into csme

324
00:13:45,060 --> 00:13:47,760
which is an embedded an embedded

325
00:13:47,760 --> 00:13:50,160
subsystem in the PCH or the platform

326
00:13:50,160 --> 00:13:53,459
component Hub of our client platform it

327
00:13:53,459 --> 00:13:54,980
stands for converge security

328
00:13:54,980 --> 00:13:58,320
manageability engine it's a standalone

329
00:13:58,320 --> 00:14:01,560
subsystem running inside what most

330
00:14:01,560 --> 00:14:04,019
people refer to as the South Bridge and

331
00:14:04,019 --> 00:14:06,180
it has quite a few secure high security

332
00:14:06,180 --> 00:14:08,339
applications in it and you may have

333
00:14:08,339 --> 00:14:09,899
heard of uh this morning there was a

334
00:14:09,899 --> 00:14:12,720
talk on boot guard on biosguard it's the

335
00:14:12,720 --> 00:14:15,120
route of trust for boot guard it's the

336
00:14:15,120 --> 00:14:18,000
root of trust for many applications like

337
00:14:18,000 --> 00:14:20,339
our integrated TPM it's the root of

338
00:14:20,339 --> 00:14:22,680
trust for our manageability solution so

339
00:14:22,680 --> 00:14:25,980
if an attacker was able to run and it

340
00:14:25,980 --> 00:14:28,500
normally executes it executes Intel

341
00:14:28,500 --> 00:14:32,519
signed firmware so if an attacker

342
00:14:32,519 --> 00:14:36,180
was able to uh if an attacker was able

343
00:14:36,180 --> 00:14:38,040
to load their own firmware they could

344
00:14:38,040 --> 00:14:40,260
essentially root the platform and bad

345
00:14:40,260 --> 00:14:41,699
things can happen and there have been

346
00:14:41,699 --> 00:14:44,160
presentations at black hat where we have

347
00:14:44,160 --> 00:14:46,620
been attacked successfully through uh

348
00:14:46,620 --> 00:14:49,920
software means physical means uh non-fit

349
00:14:49,920 --> 00:14:52,079
physical means such as reflashing the

350
00:14:52,079 --> 00:14:55,440
part uh Etc and and so that's a very so

351
00:14:55,440 --> 00:14:59,880
having malware execute on csme is pretty

352
00:14:59,880 --> 00:15:02,940
much a worst case scenario for Intel and

353
00:15:02,940 --> 00:15:04,860
so we we are doing everything possible

354
00:15:04,860 --> 00:15:07,199
to mitigate that and now we're

355
00:15:07,199 --> 00:15:09,660
mitigating it through uh fault injection

356
00:15:09,660 --> 00:15:11,100
detection as well

357
00:15:11,100 --> 00:15:15,240
okay so where and how did we integrate

358
00:15:15,240 --> 00:15:19,260
this tunable replica circuit into csme

359
00:15:19,260 --> 00:15:21,420
so csme is made up of three partitions

360
00:15:21,420 --> 00:15:24,480
as you can see here there's a x86 uh

361
00:15:24,480 --> 00:15:26,279
sometimes called the minute IE

362
00:15:26,279 --> 00:15:28,680
microcontroller there's a system agent

363
00:15:28,680 --> 00:15:32,339
and there's our i o devices a gasket and

364
00:15:32,339 --> 00:15:35,040
so we integrated the TRC into the system

365
00:15:35,040 --> 00:15:39,180
agent and into the TRC we fed the same

366
00:15:39,180 --> 00:15:42,120
power line and the same clock line that

367
00:15:42,120 --> 00:15:44,639
are coming into csme now as you can see

368
00:15:44,639 --> 00:15:47,820
from this diagram there's no direct way

369
00:15:47,820 --> 00:15:51,779
for using a non-invasive means to glitch

370
00:15:51,779 --> 00:15:53,880
the csme clock because it's coming out

371
00:15:53,880 --> 00:15:57,540
of a PLL so for a attacker to glitch the

372
00:15:57,540 --> 00:16:00,540
csme clock they they can essentially

373
00:16:00,540 --> 00:16:01,680
they have to use some pretty

374
00:16:01,680 --> 00:16:03,899
sophisticated mechanisms by glitching

375
00:16:03,899 --> 00:16:07,199
the crystal itself however the voltage

376
00:16:07,199 --> 00:16:09,300
rail directly coming into the package

377
00:16:09,300 --> 00:16:11,100
and powering the majority of the

378
00:16:11,100 --> 00:16:13,019
circuitry inside the PCH is also

379
00:16:13,019 --> 00:16:17,399
powering csme and so by placing a TRC on

380
00:16:17,399 --> 00:16:21,060
vnn inside csme it essentially can

381
00:16:21,060 --> 00:16:23,100
attack it will detect an attack on any

382
00:16:23,100 --> 00:16:25,560
of the csme partitions and even more

383
00:16:25,560 --> 00:16:27,360
than that theoretically although we're

384
00:16:27,360 --> 00:16:29,100
not making any promises about this it

385
00:16:29,100 --> 00:16:30,959
would detect it would the same attack

386
00:16:30,959 --> 00:16:33,600
would apply to any of the other devices

387
00:16:33,600 --> 00:16:36,959
or IPS inside the PCH now we don't make

388
00:16:36,959 --> 00:16:39,060
claims about that because csme is often

389
00:16:39,060 --> 00:16:42,000
power gated and if csme is powergated so

390
00:16:42,000 --> 00:16:44,699
is the TRC so we don't really make any

391
00:16:44,699 --> 00:16:47,820
claims about for example the CSM the the

392
00:16:47,820 --> 00:16:50,399
TRC protecting the USB controller or

393
00:16:50,399 --> 00:16:53,459
some other controller however it is we

394
00:16:53,459 --> 00:16:55,259
do make a claim that the TRC will

395
00:16:55,259 --> 00:16:57,779
protect csme against all voltage and

396
00:16:57,779 --> 00:17:00,660
clock attacks as well as as thermal and

397
00:17:00,660 --> 00:17:03,300
emfi

398
00:17:03,300 --> 00:17:06,540
um okay so there's no specific reason we

399
00:17:06,540 --> 00:17:08,339
placed it in the system agent it was

400
00:17:08,339 --> 00:17:09,780
well the reason replacing the system

401
00:17:09,780 --> 00:17:11,819
agent is because it was easiest to

402
00:17:11,819 --> 00:17:14,099
invoke our countermeasures so once the

403
00:17:14,099 --> 00:17:16,380
TRC detects an error it outputs a signal

404
00:17:16,380 --> 00:17:19,980
and from that point we isolate csme and

405
00:17:19,980 --> 00:17:21,839
take it through reset right so the

406
00:17:21,839 --> 00:17:24,240
result of a um of a glitch attack your

407
00:17:24,240 --> 00:17:27,240
CSM goes into reset uh the platform does

408
00:17:27,240 --> 00:17:29,640
not reset we got specific marching

409
00:17:29,640 --> 00:17:31,080
orders from our client team we didn't

410
00:17:31,080 --> 00:17:33,120
want to just reset the end user's

411
00:17:33,120 --> 00:17:36,539
platform at least initially and so if

412
00:17:36,539 --> 00:17:40,260
you're attacking csme and CSM goes to

413
00:17:40,260 --> 00:17:42,600
reset essentially all the csme services

414
00:17:42,600 --> 00:17:45,780
will fail safe right that's um that's

415
00:17:45,780 --> 00:17:47,940
really what what the trc's goal is

416
00:17:47,940 --> 00:17:50,400
initially now initially in addition to

417
00:17:50,400 --> 00:17:52,620
that we have calibration logic we have

418
00:17:52,620 --> 00:17:54,840
fuses that we have to pull and we'll get

419
00:17:54,840 --> 00:17:58,020
into that details in just a second

420
00:17:58,020 --> 00:18:00,539
okay so why do we choose to integrate

421
00:18:00,539 --> 00:18:02,100
the TRC

422
00:18:02,100 --> 00:18:04,080
um physical attacks are getting cheaper

423
00:18:04,080 --> 00:18:05,820
to mount these voltage and clock

424
00:18:05,820 --> 00:18:08,520
glitches you can just buy right directly

425
00:18:08,520 --> 00:18:11,039
from various companies

426
00:18:11,039 --> 00:18:14,160
um or you can rent them uh Intel view

427
00:18:14,160 --> 00:18:16,799
security as an evolutionary concept and

428
00:18:16,799 --> 00:18:19,559
every year we're seeking to add more one

429
00:18:19,559 --> 00:18:22,260
or two significant features to improve

430
00:18:22,260 --> 00:18:25,919
the security of csme and the TRC is just

431
00:18:25,919 --> 00:18:28,799
a good example of those roadmap of this

432
00:18:28,799 --> 00:18:30,539
roadmap

433
00:18:30,539 --> 00:18:32,760
um like I mentioned before csme has

434
00:18:32,760 --> 00:18:36,000
integrated a TCG compliant TPM 2.0

435
00:18:36,000 --> 00:18:39,120
device I kind of that's near and dear to

436
00:18:39,120 --> 00:18:40,080
my heart because I was actually

437
00:18:40,080 --> 00:18:43,080
responsible for that for some years

438
00:18:43,080 --> 00:18:45,600
and as some of you may know TPMS

439
00:18:45,600 --> 00:18:47,880
especially discrete TPMS

440
00:18:47,880 --> 00:18:50,280
have requirements to protect against

441
00:18:50,280 --> 00:18:52,919
physical attacks so it's one of our

442
00:18:52,919 --> 00:18:55,140
goals to make the integrated TPM for

443
00:18:55,140 --> 00:18:57,600
csme as close to discrete TPM and

444
00:18:57,600 --> 00:18:59,220
robustness as possible

445
00:18:59,220 --> 00:19:02,940
and and we believe that with the TRC we

446
00:19:02,940 --> 00:19:05,900
have without question a best-in-class

447
00:19:05,900 --> 00:19:09,720
TPM inside the PCH

448
00:19:09,720 --> 00:19:13,440
um so I I just mentioned that okay

449
00:19:13,440 --> 00:19:16,860
so getting to uh validation and

450
00:19:16,860 --> 00:19:19,860
calibration okay so what are some of the

451
00:19:19,860 --> 00:19:21,660
key principles of calibrating this and

452
00:19:21,660 --> 00:19:22,919
we're going to go back to the stuff we

453
00:19:22,919 --> 00:19:24,059
talked about

454
00:19:24,059 --> 00:19:28,380
so if you incorrectly calibrate the TRC

455
00:19:28,380 --> 00:19:33,059
you can have false positives and or you

456
00:19:33,059 --> 00:19:35,100
can misdetect and attacks typically both

457
00:19:35,100 --> 00:19:38,220
won't happen it's it's a very very bad

458
00:19:38,220 --> 00:19:40,980
thing if we had a false positive

459
00:19:40,980 --> 00:19:43,919
um under knowing that that by by far is

460
00:19:43,919 --> 00:19:46,799
is critical so if if a false positive

461
00:19:46,799 --> 00:19:48,900
occurred really really bad things such

462
00:19:48,900 --> 00:19:51,059
as product Replacements Etc might happen

463
00:19:51,059 --> 00:19:54,660
so without question we we do not we we

464
00:19:54,660 --> 00:19:56,160
are very very concerned with false

465
00:19:56,160 --> 00:19:57,960
pauses and obviously we want to avoid

466
00:19:57,960 --> 00:20:00,840
any chance of missing an attack as well

467
00:20:00,840 --> 00:20:02,400
and if you calibrate this thing

468
00:20:02,400 --> 00:20:05,760
incorrectly one of the two will happen

469
00:20:05,760 --> 00:20:09,539
um so how does calibration work well it

470
00:20:09,539 --> 00:20:11,760
starts from the concept that given a

471
00:20:11,760 --> 00:20:14,460
circuit at a fixed frequency we know

472
00:20:14,460 --> 00:20:17,280
when the circuit timing will fail right

473
00:20:17,280 --> 00:20:19,320
we just know that inherently as circuit

474
00:20:19,320 --> 00:20:20,760
designer so I'm not a circuit designer

475
00:20:20,760 --> 00:20:24,600
but Carlos is and so we have called that

476
00:20:24,600 --> 00:20:26,520
point where circuit where the circuit

477
00:20:26,520 --> 00:20:29,520
timing will fail be glitch and that's at

478
00:20:29,520 --> 00:20:31,980
a point that only could be a result of

479
00:20:31,980 --> 00:20:34,799
an attack there are normal voltage

480
00:20:34,799 --> 00:20:37,260
droops that you see uh when you're

481
00:20:37,260 --> 00:20:39,480
running High workloads let's say you're

482
00:20:39,480 --> 00:20:41,700
you know let's say you're copying uh

483
00:20:41,700 --> 00:20:44,039
you're ripping a DVD and and sending it

484
00:20:44,039 --> 00:20:45,600
out on the network or something from a

485
00:20:45,600 --> 00:20:47,340
Serial ATA drive on your network so

486
00:20:47,340 --> 00:20:49,620
you're going to see voltage droops due

487
00:20:49,620 --> 00:20:52,620
to those high workloads and so there are

488
00:20:52,620 --> 00:20:54,900
normal League what we'll call legal or

489
00:20:54,900 --> 00:20:57,000
kosher droops that occur in the wilds

490
00:20:57,000 --> 00:20:59,340
and we don't want a false positive to

491
00:20:59,340 --> 00:21:02,039
occur as a result of those groups we

492
00:21:02,039 --> 00:21:05,400
want a an attack to be detected only as

493
00:21:05,400 --> 00:21:07,740
a result of a glitch that we know could

494
00:21:07,740 --> 00:21:09,600
only be caused as a result of an

495
00:21:09,600 --> 00:21:12,179
attacker okay now this value so

496
00:21:12,179 --> 00:21:14,220
hypothetically let's say and I'm not

497
00:21:14,220 --> 00:21:15,539
going to give you real numbers because

498
00:21:15,539 --> 00:21:18,000
I'll tell you everything I can but but

499
00:21:18,000 --> 00:21:20,580
very process specific stuff I'm not

500
00:21:20,580 --> 00:21:22,260
going to tell you so let's say

501
00:21:22,260 --> 00:21:24,179
hypothetically nominal voltage is one

502
00:21:24,179 --> 00:21:27,059
volt you might see a V glitch of let's

503
00:21:27,059 --> 00:21:30,780
say 750 millivolts right and so the only

504
00:21:30,780 --> 00:21:33,419
way to get from one to one volt to 750

505
00:21:33,419 --> 00:21:36,299
millivolts is through an attack and we

506
00:21:36,299 --> 00:21:37,919
and when and when we're measuring the

507
00:21:37,919 --> 00:21:40,020
750 millivolts we're measuring it at

508
00:21:40,020 --> 00:21:42,480
csme we're not measuring it at the pin

509
00:21:42,480 --> 00:21:45,179
right because between what you see at

510
00:21:45,179 --> 00:21:46,740
the pin and what you see at csme is

511
00:21:46,740 --> 00:21:48,240
totally different or any other

512
00:21:48,240 --> 00:21:50,280
integrated and any other highly

513
00:21:50,280 --> 00:21:52,679
integrated device because of various

514
00:21:52,679 --> 00:21:54,780
levels of circuits and buffers and

515
00:21:54,780 --> 00:21:57,900
isolation Etc so so you have to drive a

516
00:21:57,900 --> 00:22:00,299
very very low voltage value typically in

517
00:22:00,299 --> 00:22:02,760
the negative voltage on the PIN to see a

518
00:22:02,760 --> 00:22:05,940
droop to let's say from a 250 millivolt

519
00:22:05,940 --> 00:22:08,760
droop at the device itself and this

520
00:22:08,760 --> 00:22:11,580
v-glitch again is global so all the

521
00:22:11,580 --> 00:22:13,740
hundreds of millions of parts that we

522
00:22:13,740 --> 00:22:16,500
ship in a for a given product be glitch

523
00:22:16,500 --> 00:22:18,720
will be the same for all those parts

524
00:22:18,720 --> 00:22:20,220
so there's and I'm mentioning this

525
00:22:20,220 --> 00:22:22,080
because there are various part specific

526
00:22:22,080 --> 00:22:24,360
pieces to calibration and then there's

527
00:22:24,360 --> 00:22:27,360
Global pieces of calibration

528
00:22:27,360 --> 00:22:30,720
so calibrating each TRC is done

529
00:22:30,720 --> 00:22:32,700
independently so each one is uniquely

530
00:22:32,700 --> 00:22:36,000
calibrated on our manufacturing line now

531
00:22:36,000 --> 00:22:37,500
I don't they're not uniquely because

532
00:22:37,500 --> 00:22:39,419
everyone doesn't have a unique value but

533
00:22:39,419 --> 00:22:41,640
they're independently calibrated and

534
00:22:41,640 --> 00:22:43,620
they're done and what calibration really

535
00:22:43,620 --> 00:22:46,500
is is taking that big witch value which

536
00:22:46,500 --> 00:22:48,299
is a droop let's say I just mentioned of

537
00:22:48,299 --> 00:22:51,000
hypothetically 250 millivolts and

538
00:22:51,000 --> 00:22:53,520
converting it to delays right so what's

539
00:22:53,520 --> 00:22:56,760
the what is the data path speed at one

540
00:22:56,760 --> 00:22:58,980
volt versus the data pass speed at 750

541
00:22:58,980 --> 00:23:01,200
millivolts for that's each specific part

542
00:23:01,200 --> 00:23:03,659
and it's different for every part

543
00:23:03,659 --> 00:23:06,000
okay so that and then we fuse that delay

544
00:23:06,000 --> 00:23:08,640
value into silicon and that fusing blows

545
00:23:08,640 --> 00:23:11,520
in that the right number of of inverters

546
00:23:11,520 --> 00:23:14,460
and nor gates in the TRC itself

547
00:23:14,460 --> 00:23:16,919
okay so we're going to jump back to the

548
00:23:16,919 --> 00:23:20,880
TRC uh schematic in waveforms and talk a

549
00:23:20,880 --> 00:23:22,559
little bit more about this

550
00:23:22,559 --> 00:23:25,380
so here we go to our favorite diagram in

551
00:23:25,380 --> 00:23:27,480
this picture again we have a TRC

552
00:23:27,480 --> 00:23:30,240
calibrated running a nominal voltage not

553
00:23:30,240 --> 00:23:34,080
generating an error okay so on this

554
00:23:34,080 --> 00:23:36,299
timing diagram

555
00:23:36,299 --> 00:23:38,659
what is the delay

556
00:23:38,659 --> 00:23:40,919
corresponding to V glitch and I'll give

557
00:23:40,919 --> 00:23:43,919
you a hint it's the distance between two

558
00:23:43,919 --> 00:23:47,780
Rising edges so and anybody whether

559
00:23:47,780 --> 00:23:50,460
anybody want to guess which two Rising

560
00:23:50,460 --> 00:23:52,679
edges is corresponding to the delay of

561
00:23:52,679 --> 00:23:54,480
v-glitch

562
00:23:54,480 --> 00:23:56,100
let's see

563
00:23:56,100 --> 00:23:59,400
exactly good if I had if I had I forgot

564
00:23:59,400 --> 00:24:01,320
my candy and if I had it I would give

565
00:24:01,320 --> 00:24:04,440
any candy yeah so that point there is a

566
00:24:04,440 --> 00:24:08,159
value in picoseconds right that we need

567
00:24:08,159 --> 00:24:11,220
to fuse into each into every part okay

568
00:24:11,220 --> 00:24:14,100
so here's something very important

569
00:24:14,100 --> 00:24:16,679
what happens if we increase that delay

570
00:24:16,679 --> 00:24:19,620
right what happens is uh well so let's

571
00:24:19,620 --> 00:24:21,360
say let's let's change that if that if

572
00:24:21,360 --> 00:24:23,460
the delay value was Zero if we didn't

573
00:24:23,460 --> 00:24:25,080
fuse any Gates

574
00:24:25,080 --> 00:24:27,780
that TRC did actually would be the exact

575
00:24:27,780 --> 00:24:29,880
same as TRC data ref

576
00:24:29,880 --> 00:24:31,980
and it would be and and it would be

577
00:24:31,980 --> 00:24:34,020
impossible to detect an attack at that

578
00:24:34,020 --> 00:24:36,480
point because no matter how much they

579
00:24:36,480 --> 00:24:38,100
glitched that no matter how much they

580
00:24:38,100 --> 00:24:41,580
slowed down the TR the data actual it

581
00:24:41,580 --> 00:24:43,980
would never get far enough to detect an

582
00:24:43,980 --> 00:24:44,960
attack

583
00:24:44,960 --> 00:24:48,480
conversely if we blew in too many of

584
00:24:48,480 --> 00:24:49,740
those Gates

585
00:24:49,740 --> 00:24:53,220
at nominal volt that that uh that rising

586
00:24:53,220 --> 00:24:54,840
and lowering edge of action would move

587
00:24:54,840 --> 00:24:56,700
over so far to the right at nominal

588
00:24:56,700 --> 00:24:59,039
voltage when you flipped on the machine

589
00:24:59,039 --> 00:25:01,799
it would detect an attack as and that's

590
00:25:01,799 --> 00:25:04,440
obviously a false positive so the danger

591
00:25:04,440 --> 00:25:07,020
in in calibrating it with too long of a

592
00:25:07,020 --> 00:25:09,240
delay is that you get a false positive

593
00:25:09,240 --> 00:25:11,700
due to either nominal voltage

594
00:25:11,700 --> 00:25:13,799
that's not so bad we detect that right

595
00:25:13,799 --> 00:25:17,580
away right but worse is a rare droop

596
00:25:17,580 --> 00:25:19,440
that occurs because somebody is running

597
00:25:19,440 --> 00:25:21,059
some workload that we didn't think of

598
00:25:21,059 --> 00:25:22,620
okay

599
00:25:22,620 --> 00:25:25,020
so that delay making it just the right

600
00:25:25,020 --> 00:25:29,580
length is done on each part and is the

601
00:25:29,580 --> 00:25:31,500
Mainstay of calibration

602
00:25:31,500 --> 00:25:32,940
okay

603
00:25:32,940 --> 00:25:37,380
so how do we find the per part glitch so

604
00:25:37,380 --> 00:25:40,740
we use high school math right to

605
00:25:40,740 --> 00:25:44,520
essentially generate a slope that mimics

606
00:25:44,520 --> 00:25:46,620
that is that is actually that that will

607
00:25:46,620 --> 00:25:49,080
allow us to that that shows us the

608
00:25:49,080 --> 00:25:51,960
voltage delay curve again this is

609
00:25:51,960 --> 00:25:54,000
important that's common to all parts

610
00:25:54,000 --> 00:25:57,720
okay so all parts have uh we we

611
00:25:57,720 --> 00:26:00,059
calculate a slope where on the y-axis

612
00:26:00,059 --> 00:26:02,100
you have delay on the x-axis you have

613
00:26:02,100 --> 00:26:05,520
voltage so for any given part you would

614
00:26:05,520 --> 00:26:07,740
just go and find a voltage and get that

615
00:26:07,740 --> 00:26:10,559
right delay for that part okay and what

616
00:26:10,559 --> 00:26:12,779
the TRS so in menu so we calculate this

617
00:26:12,779 --> 00:26:14,520
using a whole bunch of data what this

618
00:26:14,520 --> 00:26:15,779
slope is

619
00:26:15,779 --> 00:26:18,720
right y equals MX plus b right pretty

620
00:26:18,720 --> 00:26:20,220
big if you guys remember high school

621
00:26:20,220 --> 00:26:23,640
math so now what the TRC does in

622
00:26:23,640 --> 00:26:26,400
manufacturing is it's running at in

623
00:26:26,400 --> 00:26:28,679
manufacturing at nominal voltage and a

624
00:26:28,679 --> 00:26:30,659
nominal voltage of TRC will spit out

625
00:26:30,659 --> 00:26:34,740
what delay is causing is what the delay

626
00:26:34,740 --> 00:26:37,919
is at nominal voltage it is report that

627
00:26:37,919 --> 00:26:41,400
to us okay and just through uh we have

628
00:26:41,400 --> 00:26:43,679
an internal finite State machine that

629
00:26:43,679 --> 00:26:45,299
just calculates what the delay is a

630
00:26:45,299 --> 00:26:47,039
nominal voltage

631
00:26:47,039 --> 00:26:49,320
um and so with that information right

632
00:26:49,320 --> 00:26:51,600
what we can using the slope again y

633
00:26:51,600 --> 00:26:54,360
equals MX plus b we can go and find the

634
00:26:54,360 --> 00:26:56,400
point in time

635
00:26:56,400 --> 00:26:58,860
we can reduce it down to V glitch so if

636
00:26:58,860 --> 00:27:00,539
you know the slope

637
00:27:00,539 --> 00:27:02,580
you know Venom

638
00:27:02,580 --> 00:27:04,740
right and you know V and therefore you

639
00:27:04,740 --> 00:27:07,620
get no Vietnam delay it's and then you

640
00:27:07,620 --> 00:27:10,320
know V glitch because it's Global using

641
00:27:10,320 --> 00:27:13,200
two points on a on a line that you on a

642
00:27:13,200 --> 00:27:15,059
line equation that you already know it's

643
00:27:15,059 --> 00:27:18,179
very easy to calculate what the delay at

644
00:27:18,179 --> 00:27:20,520
V glitches and we do this for every

645
00:27:20,520 --> 00:27:21,779
single part

646
00:27:21,779 --> 00:27:26,159
so again what's uh what is global is the

647
00:27:26,159 --> 00:27:29,700
slope the slope equation

648
00:27:29,700 --> 00:27:32,640
um v-glitch is global what is unique per

649
00:27:32,640 --> 00:27:35,039
Venom is known right we know that isn't

650
00:27:35,039 --> 00:27:36,480
it's a vault

651
00:27:36,480 --> 00:27:39,000
um and the part what is unique to the

652
00:27:39,000 --> 00:27:41,340
part it's spitting out the delay of V

653
00:27:41,340 --> 00:27:43,200
non which it spits out to us and the

654
00:27:43,200 --> 00:27:47,460
delay at V glitch now you may ask why

655
00:27:47,460 --> 00:27:48,900
can't the part just spit out why do you

656
00:27:48,900 --> 00:27:50,880
need this slope thing why can't you just

657
00:27:50,880 --> 00:27:53,039
run the part at V glitch and have it

658
00:27:53,039 --> 00:27:54,960
spit out the delay

659
00:27:54,960 --> 00:27:57,600
well you you can't you can't run at

660
00:27:57,600 --> 00:27:59,340
vigorous for more than a few nanoseconds

661
00:27:59,340 --> 00:28:01,860
so the whole machine dies right so and

662
00:28:01,860 --> 00:28:04,140
our testers can't generate values that

663
00:28:04,140 --> 00:28:06,299
low so you actually it would be great it

664
00:28:06,299 --> 00:28:07,679
would be really easy to calibrate these

665
00:28:07,679 --> 00:28:09,179
parts if they would run a v-glitch but

666
00:28:09,179 --> 00:28:12,000
the whole purpose of of it is they don't

667
00:28:12,000 --> 00:28:14,220
run a V glitch right so that's why we

668
00:28:14,220 --> 00:28:17,220
have to use this uh slope-based

669
00:28:17,220 --> 00:28:21,000
calculation uh to um to calculate B

670
00:28:21,000 --> 00:28:24,059
glitch per part a vegan's delay per part

671
00:28:24,059 --> 00:28:26,100
okay

672
00:28:26,100 --> 00:28:28,799
um okay so then we do some testing right

673
00:28:28,799 --> 00:28:30,539
so how do we make sure this is the right

674
00:28:30,539 --> 00:28:32,880
what we call recipe well we run

675
00:28:32,880 --> 00:28:35,039
initially false positive testing we put

676
00:28:35,039 --> 00:28:37,020
the part under high workloads to make

677
00:28:37,020 --> 00:28:38,700
sure it's not generating any false

678
00:28:38,700 --> 00:28:41,460
positives but then we start glitching it

679
00:28:41,460 --> 00:28:43,740
right and so we essentially drive mult

680
00:28:43,740 --> 00:28:46,799
we drive different voltages uh a matrix

681
00:28:46,799 --> 00:28:49,320
of voltages and and pulse widths

682
00:28:49,320 --> 00:28:52,140
something like this so we generate you

683
00:28:52,140 --> 00:28:54,960
know at at a given glitch length of you

684
00:28:54,960 --> 00:28:59,100
know of of 10 20 30 40 mil seconds we

685
00:28:59,100 --> 00:29:01,440
drive a hundred different voltages and

686
00:29:01,440 --> 00:29:03,059
we do that for all various glitch

687
00:29:03,059 --> 00:29:05,880
lengths and various voltages now what's

688
00:29:05,880 --> 00:29:08,880
really and what we see is we all we see

689
00:29:08,880 --> 00:29:12,120
areas in green where nothing fails just

690
00:29:12,120 --> 00:29:13,020
fine

691
00:29:13,020 --> 00:29:15,840
then we get areas in kind of that beige

692
00:29:15,840 --> 00:29:18,360
or yellow where the pla the whole

693
00:29:18,360 --> 00:29:20,580
platform crashed right so it was either

694
00:29:20,580 --> 00:29:23,159
running at a voltage for too long

695
00:29:23,159 --> 00:29:25,200
um or too low of a voltage and the

696
00:29:25,200 --> 00:29:26,640
platform just completely crashed and

697
00:29:26,640 --> 00:29:29,220
died what is really critical is this red

698
00:29:29,220 --> 00:29:32,520
band of lines and that is where the TRC

699
00:29:32,520 --> 00:29:34,799
detects an error right but the platform

700
00:29:34,799 --> 00:29:36,720
right before the platform crashes or if

701
00:29:36,720 --> 00:29:38,700
the platform might not crash

702
00:29:38,700 --> 00:29:41,880
and so it's Uber critical for us at

703
00:29:41,880 --> 00:29:45,840
every horizontal line right for us to

704
00:29:45,840 --> 00:29:47,159
detect

705
00:29:47,159 --> 00:29:47,820
um

706
00:29:47,820 --> 00:29:50,640
a for the TRC to detect an attack

707
00:29:50,640 --> 00:29:53,279
because if it doesn't as you can see in

708
00:29:53,279 --> 00:29:55,320
one the third horizontal Row from the

709
00:29:55,320 --> 00:29:57,899
bottom then we essentially have a hole

710
00:29:57,899 --> 00:30:00,899
in the TRC where somebody could

711
00:30:00,899 --> 00:30:02,820
um could successfully glitch us and we

712
00:30:02,820 --> 00:30:05,100
wouldn't detect it okay that's what this

713
00:30:05,100 --> 00:30:07,260
means I'll see you

714
00:30:07,260 --> 00:30:09,799
I think I already said all this stuff

715
00:30:09,799 --> 00:30:13,080
so in our first pass of testing on this

716
00:30:13,080 --> 00:30:16,140
product which is the Intel 12th

717
00:30:16,140 --> 00:30:19,320
generation CPU core CPU otherwise known

718
00:30:19,320 --> 00:30:22,020
as Alder Lake we saw this that we had

719
00:30:22,020 --> 00:30:26,880
missed the TRC calibration okay

720
00:30:26,880 --> 00:30:28,440
um and so

721
00:30:28,440 --> 00:30:30,179
um yeah I'm running a little faster than

722
00:30:30,179 --> 00:30:31,620
I thought but that's okay more time for

723
00:30:31,620 --> 00:30:35,340
questions so what happened so with the

724
00:30:35,340 --> 00:30:38,279
initial batch of TRC so what we do is we

725
00:30:38,279 --> 00:30:40,799
fuse roughly 100 parts we run them

726
00:30:40,799 --> 00:30:42,600
through what we call false positive

727
00:30:42,600 --> 00:30:45,480
testing and glitch detection and if any

728
00:30:45,480 --> 00:30:48,000
of them fail like they did we just we

729
00:30:48,000 --> 00:30:49,980
determine why and what we determined was

730
00:30:49,980 --> 00:30:51,720
that we actually had set V glitch too

731
00:30:51,720 --> 00:30:55,500
low so instead of 750 millivolts it

732
00:30:55,500 --> 00:30:57,799
really should have been let's say 780

733
00:30:57,799 --> 00:31:03,059
775 millivolts right and we and with

734
00:31:03,059 --> 00:31:05,760
that information we modify the value of

735
00:31:05,760 --> 00:31:07,140
V glitch to what we determined should be

736
00:31:07,140 --> 00:31:09,260
the right value

737
00:31:09,260 --> 00:31:12,179
and we then we fuse another 100 Parts

738
00:31:12,179 --> 00:31:14,340
take them through false positive testing

739
00:31:14,340 --> 00:31:16,200
take them through fall injection testing

740
00:31:16,200 --> 00:31:18,539
and make sure they all pass and once

741
00:31:18,539 --> 00:31:21,720
they do and they did and at this point

742
00:31:21,720 --> 00:31:24,299
we didn't record any failures

743
00:31:24,299 --> 00:31:26,340
and we also didn't record any false

744
00:31:26,340 --> 00:31:29,100
positives and based on this data we

745
00:31:29,100 --> 00:31:31,679
locked in the recipe for this 12th

746
00:31:31,679 --> 00:31:33,480
generation Alder Lake CPU and it's

747
00:31:33,480 --> 00:31:35,940
shipping in desktop and mobile

748
00:31:35,940 --> 00:31:38,580
configuration right now

749
00:31:38,580 --> 00:31:39,779
um so

750
00:31:39,779 --> 00:31:42,240
um so some some more so some more points

751
00:31:42,240 --> 00:31:44,940
about the TRC I want to make is that

752
00:31:44,940 --> 00:31:48,419
because I've got some time is that

753
00:31:48,419 --> 00:31:51,140
um why did we choose the TRC right so

754
00:31:51,140 --> 00:31:54,419
TPMS smart cars have been shipping with

755
00:31:54,419 --> 00:31:57,179
analog clock and voltage level detectors

756
00:31:57,179 --> 00:32:00,179
for almost 20 years now so why didn't we

757
00:32:00,179 --> 00:32:01,679
just follow that model

758
00:32:01,679 --> 00:32:03,419
uh so there's a couple things we like

759
00:32:03,419 --> 00:32:05,580
about the trc-1 is that with one circuit

760
00:32:05,580 --> 00:32:08,159
we can detect all four attacks that's

761
00:32:08,159 --> 00:32:11,159
one number two is that the TRC is a

762
00:32:11,159 --> 00:32:13,020
purely digital circuit using standard

763
00:32:13,020 --> 00:32:15,659
cells which means it's very easy to Port

764
00:32:15,659 --> 00:32:18,720
right so we have so it's not a soft IP

765
00:32:18,720 --> 00:32:22,799
it's a hard IP but it can but it takes a

766
00:32:22,799 --> 00:32:24,659
very very short amount of effort to Port

767
00:32:24,659 --> 00:32:26,279
it to a new process

768
00:32:26,279 --> 00:32:29,520
and we typically change processes well

769
00:32:29,520 --> 00:32:31,980
less often than we'd like but we change

770
00:32:31,980 --> 00:32:34,440
them as often as we can and we want to

771
00:32:34,440 --> 00:32:36,600
make that that effort we want to make it

772
00:32:36,600 --> 00:32:38,580
very easy for us to switch processes

773
00:32:38,580 --> 00:32:42,240
because the csme IP is on a various

774
00:32:42,240 --> 00:32:44,100
number of products all on different

775
00:32:44,100 --> 00:32:46,200
processes and we and we want to make

776
00:32:46,200 --> 00:32:47,880
sure it's as cheap as possible for us to

777
00:32:47,880 --> 00:32:50,399
go to different processes another reason

778
00:32:50,399 --> 00:32:54,120
is that the CSS is that the TRC hip as a

779
00:32:54,120 --> 00:32:57,120
as a digital device is very small far

780
00:32:57,120 --> 00:33:01,320
smaller than Analog Devices and so while

781
00:33:01,320 --> 00:33:04,380
TPMS don't often change their design and

782
00:33:04,380 --> 00:33:06,240
don't often change their processes and

783
00:33:06,240 --> 00:33:09,120
are on very much older processes we tend

784
00:33:09,120 --> 00:33:11,159
to be changing our process often as

785
00:33:11,159 --> 00:33:13,200
possible and obviously Intel is trying

786
00:33:13,200 --> 00:33:14,640
to be on the state of the art for our

787
00:33:14,640 --> 00:33:16,860
CPUs and our chipsets and our Graphics

788
00:33:16,860 --> 00:33:19,080
devices so these are some of the reasons

789
00:33:19,080 --> 00:33:23,519
why we've chosen the TRC over more of a

790
00:33:23,519 --> 00:33:26,399
legacy analog device

791
00:33:26,399 --> 00:33:29,640
now the challenge though is that

792
00:33:29,640 --> 00:33:31,200
um we build a lot of parts right

793
00:33:31,200 --> 00:33:33,600
hundreds of millions a year and for a

794
00:33:33,600 --> 00:33:36,299
massively deployed products on scale we

795
00:33:36,299 --> 00:33:38,039
need to make sure that we've calibrated

796
00:33:38,039 --> 00:33:39,720
this thing correctly and we we believe

797
00:33:39,720 --> 00:33:40,980
we have

798
00:33:40,980 --> 00:33:44,880
now to prove that we asked riskier uh

799
00:33:44,880 --> 00:33:46,080
who is if you're not familiar with the

800
00:33:46,080 --> 00:33:48,419
skier they're a third party they're

801
00:33:48,419 --> 00:33:51,299
third-party security firm that does that

802
00:33:51,299 --> 00:33:52,980
does fall injection detection testing

803
00:33:52,980 --> 00:33:55,320
for products and we ask them to take the

804
00:33:55,320 --> 00:33:58,080
TRC through uh through fault injection

805
00:33:58,080 --> 00:34:00,419
and for many many months they went and

806
00:34:00,419 --> 00:34:03,840
did that uh and and they evaluated the

807
00:34:03,840 --> 00:34:08,639
TRC for using clock voltage and emfi and

808
00:34:08,639 --> 00:34:10,619
as a result and the result of that was

809
00:34:10,619 --> 00:34:11,460
that

810
00:34:11,460 --> 00:34:14,099
to happen we were happy to say that they

811
00:34:14,099 --> 00:34:16,379
were not able to uh to successfully

812
00:34:16,379 --> 00:34:18,839
glitch csme and they said that in all

813
00:34:18,839 --> 00:34:21,659
cases the in all cases the glitches were

814
00:34:21,659 --> 00:34:23,219
detected by the implemented

815
00:34:23,219 --> 00:34:27,000
countermeasures inside of the TRC so so

816
00:34:27,000 --> 00:34:30,060
we got a little bit of um so once we did

817
00:34:30,060 --> 00:34:31,379
that we said oh maybe we should take

818
00:34:31,379 --> 00:34:33,719
this to Black Cat because not until we

819
00:34:33,719 --> 00:34:35,520
were 100 sure we didn't want to go and

820
00:34:35,520 --> 00:34:38,040
you know inform everybody exactly what

821
00:34:38,040 --> 00:34:39,119
we had done

822
00:34:39,119 --> 00:34:42,480
uh so anyway I'm right at the five

823
00:34:42,480 --> 00:34:44,040
minute Mark

824
00:34:44,040 --> 00:34:45,418
um and so I just want to thank there a

825
00:34:45,418 --> 00:34:47,159
lot of people who worked on this uh

826
00:34:47,159 --> 00:34:49,139
Carlos and I started working on this in

827
00:34:49,139 --> 00:34:51,540
2014 I think

828
00:34:51,540 --> 00:34:53,639
um and it finally got implemented last

829
00:34:53,639 --> 00:34:56,399
year uh and again like I said there's a

830
00:34:56,399 --> 00:34:58,140
lot of people it's not just us there's a

831
00:34:58,140 --> 00:35:01,040
whole team of people in circuit design

832
00:35:01,040 --> 00:35:03,839
uh in uh in high volume manufacturing

833
00:35:03,839 --> 00:35:07,440
testing Etc and so um now's a good time

834
00:35:07,440 --> 00:35:09,660
for questions can you uh please bring

835
00:35:09,660 --> 00:35:11,160
Carlos Carlos you're going to get

836
00:35:11,160 --> 00:35:13,020
brought up now so if you guys have any

837
00:35:13,020 --> 00:35:15,000
questions it's a it's a great time to

838
00:35:15,000 --> 00:35:17,180
ask

839
00:35:17,520 --> 00:35:19,700
foreign

840
00:35:24,210 --> 00:35:27,300
[Music]

