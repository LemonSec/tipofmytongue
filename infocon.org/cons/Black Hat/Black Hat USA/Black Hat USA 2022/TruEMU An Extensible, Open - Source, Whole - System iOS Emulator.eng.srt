1
00:00:01,700 --> 00:00:04,810
[Music]

2
00:00:07,639 --> 00:00:10,980
hello so very welcome to my talk I'm

3
00:00:10,980 --> 00:00:13,980
Chung or we are also three team members

4
00:00:13,980 --> 00:00:16,279
who will not be presenting here

5
00:00:16,279 --> 00:00:21,060
who is Antonio Kim and Dave

6
00:00:21,060 --> 00:00:22,260
so

7
00:00:22,260 --> 00:00:25,560
a little bit about myself or material

8
00:00:25,560 --> 00:00:27,900
handle is on the screen or I'm currently

9
00:00:27,900 --> 00:00:30,000
a undergraduate computer science student

10
00:00:30,000 --> 00:00:33,120
at Purdue University in the U.S

11
00:00:33,120 --> 00:00:36,239
or um I'm from Vietnam currently I'm

12
00:00:36,239 --> 00:00:40,680
focusing on Mac OS and iOS research or I

13
00:00:40,680 --> 00:00:42,899
used to blog about CTF write-ups or

14
00:00:42,899 --> 00:00:45,480
challenge or what I have seized doing

15
00:00:45,480 --> 00:00:47,520
from doing some of them since then along

16
00:00:47,520 --> 00:00:49,860
uh since quite a long

17
00:00:49,860 --> 00:00:52,680
so today agenda first uh we'll discuss

18
00:00:52,680 --> 00:00:55,379
the current state of iOS research then

19
00:00:55,379 --> 00:00:58,079
we can look at

20
00:00:58,079 --> 00:01:00,660
our design goal in building an emulator

21
00:01:00,660 --> 00:01:03,120
then we'll talk about how how we

22
00:01:03,120 --> 00:01:06,600
implemented it and also the ways that we

23
00:01:06,600 --> 00:01:08,760
can use to remove for research then

24
00:01:08,760 --> 00:01:11,040
we'll talk about its future and Route

25
00:01:11,040 --> 00:01:12,420
Maps

26
00:01:12,420 --> 00:01:16,159
so let's Dive Right In

27
00:01:17,280 --> 00:01:19,619
so we need to talk about the current way

28
00:01:19,619 --> 00:01:22,979
we are doing iOS research uh the most

29
00:01:22,979 --> 00:01:26,340
common way is to using to use real

30
00:01:26,340 --> 00:01:27,299
device

31
00:01:27,299 --> 00:01:29,159
and you also have a few options for that

32
00:01:29,159 --> 00:01:32,280
or first you can use a something called

33
00:01:32,280 --> 00:01:36,479
security research device by Apple or

34
00:01:36,479 --> 00:01:38,460
there is a real device however the main

35
00:01:38,460 --> 00:01:40,380
problem with this is that you are you

36
00:01:40,380 --> 00:01:45,119
have to cite ndis and or your obligated

37
00:01:45,119 --> 00:01:49,340
to report all your findings to Apple

38
00:01:49,759 --> 00:01:53,220
uh other options is to use internal

39
00:01:53,220 --> 00:01:55,880
device so this device are mostly stolen

40
00:01:55,880 --> 00:01:59,640
or and because it's only limited

41
00:01:59,640 --> 00:02:02,220
internal use only so you have some legal

42
00:02:02,220 --> 00:02:03,960
issues there so

43
00:02:03,960 --> 00:02:05,939
it might be not be preferable for most

44
00:02:05,939 --> 00:02:07,740
of researchers

45
00:02:07,740 --> 00:02:10,080
and also these devices are really rare

46
00:02:10,080 --> 00:02:12,599
because they have to be leaked

47
00:02:12,599 --> 00:02:15,420
on the left is some of this device that

48
00:02:15,420 --> 00:02:17,580
on the rise is the cables that will

49
00:02:17,580 --> 00:02:20,040
you'll be using when to debug this

50
00:02:20,040 --> 00:02:22,220
device

51
00:02:22,319 --> 00:02:24,540
next you can use of the show to your

52
00:02:24,540 --> 00:02:26,760
broken device so these are device you

53
00:02:26,760 --> 00:02:29,340
can get from the store but you have to

54
00:02:29,340 --> 00:02:32,160
hack it first to in order to or to

55
00:02:32,160 --> 00:02:35,280
research it so it's pretty high it's

56
00:02:35,280 --> 00:02:37,800
already a high barrier to or to deal

57
00:02:37,800 --> 00:02:39,860
with

58
00:02:39,860 --> 00:02:43,080
however there are some reason Recent

59
00:02:43,080 --> 00:02:44,879
research with the Checkmate exploit

60
00:02:44,879 --> 00:02:47,280
which allows you to do debugging

61
00:02:47,280 --> 00:02:49,140
provided that you can build yourself a

62
00:02:49,140 --> 00:02:52,200
cables on like on the right on the light

63
00:02:52,200 --> 00:02:54,959
the pictures on the right this is this

64
00:02:54,959 --> 00:02:58,879
and set up by another researcher

65
00:03:02,060 --> 00:03:03,720
oh

66
00:03:03,720 --> 00:03:06,300
another option is for non-joboken device

67
00:03:06,300 --> 00:03:10,140
this device are a highly sandbox and

68
00:03:10,140 --> 00:03:14,280
pre-secure so it is really hard to and

69
00:03:14,280 --> 00:03:16,080
it's really hard to to work with it

70
00:03:16,080 --> 00:03:18,840
because you're only limited to the panic

71
00:03:18,840 --> 00:03:21,420
lock which is not interactive at all if

72
00:03:21,420 --> 00:03:23,400
you want to do kernel debugging and

73
00:03:23,400 --> 00:03:25,920
hacking or something like that

74
00:03:25,920 --> 00:03:28,200
you cannot you have can also use all

75
00:03:28,200 --> 00:03:29,420
maps

76
00:03:29,420 --> 00:03:32,640
and with all of these problems posed by

77
00:03:32,640 --> 00:03:36,300
real device or we try to solve some of

78
00:03:36,300 --> 00:03:39,959
them using emulation so some options for

79
00:03:39,959 --> 00:03:42,900
animations well you have the third party

80
00:03:42,900 --> 00:03:45,540
commercial LS emulator these are pretty

81
00:03:45,540 --> 00:03:49,080
popular or pretty state-of-the-art or

82
00:03:49,080 --> 00:03:51,720
really cool but however they are pretty

83
00:03:51,720 --> 00:03:53,519
expensive so

84
00:03:53,519 --> 00:03:58,140
I never I never try it personally or

85
00:03:58,140 --> 00:04:00,720
and if you want to dive into a smaller

86
00:04:00,720 --> 00:04:04,319
loadable stuff such as iboot or sap or

87
00:04:04,319 --> 00:04:06,180
is also limited to

88
00:04:06,180 --> 00:04:09,120
on premises only so unless you are a big

89
00:04:09,120 --> 00:04:12,780
company or a government agency you

90
00:04:12,780 --> 00:04:16,159
probably cannot get access to it

91
00:04:20,459 --> 00:04:22,919
or you can use also use VM Apple which

92
00:04:22,919 --> 00:04:27,000
is a Mac VM provided by Apple or this is

93
00:04:27,000 --> 00:04:28,800
also Limited in customization but

94
00:04:28,800 --> 00:04:31,860
somehow some people have managed to do

95
00:04:31,860 --> 00:04:35,060
some really cool work with it

96
00:04:36,240 --> 00:04:40,020
and you can also use other security or

97
00:04:40,020 --> 00:04:42,960
 report so this is presented a

98
00:04:42,960 --> 00:04:47,100
Blackheart Europe like in 2019 but

99
00:04:47,100 --> 00:04:49,979
however the problem is that they are

100
00:04:49,979 --> 00:04:51,900
they only support like two iOS version

101
00:04:51,900 --> 00:04:55,199
only so if that's pretty limited or they

102
00:04:55,199 --> 00:04:56,639
also have very limited Hardware support

103
00:04:56,639 --> 00:05:00,180
and it also have uh it's also really

104
00:05:00,180 --> 00:05:02,820
hard to maintain because of the code

105
00:05:02,820 --> 00:05:08,240
quality uh and it's also abundant by now

106
00:05:08,240 --> 00:05:10,020
so

107
00:05:10,020 --> 00:05:13,860
so we try to build an emulator that can

108
00:05:13,860 --> 00:05:16,979
solve as much of the problems that posed

109
00:05:16,979 --> 00:05:20,400
by these methods are possible

110
00:05:20,400 --> 00:05:23,039
so let's now let's talk about is design

111
00:05:23,039 --> 00:05:26,100
goal so we want to we want the free to

112
00:05:26,100 --> 00:05:31,680
use our research or emulator so is US

113
00:05:31,680 --> 00:05:35,100
research fairly as possible and by that

114
00:05:35,100 --> 00:05:37,440
we mean we want to have a wide range of

115
00:05:37,440 --> 00:05:39,900
iOS version support and we want also

116
00:05:39,900 --> 00:05:42,780
want to debug the kernel easily and we

117
00:05:42,780 --> 00:05:45,240
also want to use it for fuzzing

118
00:05:45,240 --> 00:05:47,300
so

119
00:05:47,300 --> 00:05:51,539
with these disciples we have come up

120
00:05:51,539 --> 00:05:53,699
with some very notable features

121
00:05:53,699 --> 00:05:56,100
first uh the amateur model actual

122
00:05:56,100 --> 00:06:00,120
Hardware so it's it it tries to we have

123
00:06:00,120 --> 00:06:02,820
as close as to the real Hardware as

124
00:06:02,820 --> 00:06:03,720
possible

125
00:06:03,720 --> 00:06:05,940
or it supports a right range of iOS

126
00:06:05,940 --> 00:06:09,000
version ranging from IOS 14 to iOS 16

127
00:06:09,000 --> 00:06:11,160
which is currently still in beta

128
00:06:11,160 --> 00:06:14,220
or we also support circularm and I would

129
00:06:14,220 --> 00:06:16,380
stop but that is pretty experimental

130
00:06:16,380 --> 00:06:19,919
brand new or you can also debug the

131
00:06:19,919 --> 00:06:22,800
kernel with it or very easily

132
00:06:22,800 --> 00:06:26,520
or it also helps USB support so you can

133
00:06:26,520 --> 00:06:27,660
install

134
00:06:27,660 --> 00:06:31,759
real iOS or it also supports some custom

135
00:06:31,759 --> 00:06:35,100
CPU features by Apple and the best part

136
00:06:35,100 --> 00:06:38,100
is that we are open source so you can uh

137
00:06:38,100 --> 00:06:40,139
you can check out our repo which is in

138
00:06:40,139 --> 00:06:43,280
the QR on the side

139
00:06:45,180 --> 00:06:48,180
so how did we do that well there are a

140
00:06:48,180 --> 00:06:50,340
lot of challenges and we will walk into

141
00:06:50,340 --> 00:06:54,419
what walks you to the general ideas

142
00:06:54,419 --> 00:06:56,419
so how does the new device get model

143
00:06:56,419 --> 00:07:00,000
well first we will look at for the

144
00:07:00,000 --> 00:07:01,860
information in the device tree then

145
00:07:01,860 --> 00:07:03,720
we'll build a stop model so the model

146
00:07:03,720 --> 00:07:05,940
that does nothing but basically locks

147
00:07:05,940 --> 00:07:08,520
every access by the like every injection

148
00:07:08,520 --> 00:07:12,660
from the CPU and we and with these tools

149
00:07:12,660 --> 00:07:15,180
we can do Dynamic and static reverse

150
00:07:15,180 --> 00:07:17,160
engineering to see how does the hardware

151
00:07:17,160 --> 00:07:20,639
behave how does it works and then we can

152
00:07:20,639 --> 00:07:23,060
once we know the protocol we can write

153
00:07:23,060 --> 00:07:25,919
emulation code to emulate the need

154
00:07:25,919 --> 00:07:28,319
response and then we'll have a device

155
00:07:28,319 --> 00:07:31,400
that is emulated

156
00:07:31,819 --> 00:07:34,800
so let's walk through some steps first

157
00:07:34,800 --> 00:07:37,199
the device tree the revised three can be

158
00:07:37,199 --> 00:07:39,900
found in our stream firmware which you

159
00:07:39,900 --> 00:07:41,479
can download from Apple

160
00:07:41,479 --> 00:07:44,099
or the best thing about it is that it

161
00:07:44,099 --> 00:07:45,960
contains a rich amount of peripherals

162
00:07:45,960 --> 00:07:47,039
information

163
00:07:47,039 --> 00:07:50,759
or and is used heavily by the iOS kernel

164
00:07:50,759 --> 00:07:52,319
to merge drivers

165
00:07:52,319 --> 00:07:54,120
so let's have a look at the example

166
00:07:54,120 --> 00:07:55,080
entry

167
00:07:55,080 --> 00:07:58,919
so on the screen is on the device

168
00:07:58,919 --> 00:08:03,180
re-entry of the gpio controller so on

169
00:08:03,180 --> 00:08:05,039
the left is the property name and on the

170
00:08:05,039 --> 00:08:07,800
right is values let's have a look at

171
00:08:07,800 --> 00:08:09,900
some interesting ones

172
00:08:09,900 --> 00:08:12,419
so the arrows is currently pointing to

173
00:08:12,419 --> 00:08:15,900
the comparable or property so this the

174
00:08:15,900 --> 00:08:17,520
compiler probably is used to match

175
00:08:17,520 --> 00:08:19,860
drivers so it will look at the strings

176
00:08:19,860 --> 00:08:22,319
in the comparable property and then find

177
00:08:22,319 --> 00:08:24,539
the appropriate drivers to for the

178
00:08:24,539 --> 00:08:26,639
correct device

179
00:08:26,639 --> 00:08:29,220
and it will uh another interesting one

180
00:08:29,220 --> 00:08:32,880
is interrupt so this is basically an

181
00:08:32,880 --> 00:08:34,799
a list of interrupts that the device

182
00:08:34,799 --> 00:08:37,979
will use so in this case the G5 will use

183
00:08:37,979 --> 00:08:44,399
a hex or 83 to hex 89 interrupts

184
00:08:44,399 --> 00:08:47,640
or you also have the rack entry which is

185
00:08:47,640 --> 00:08:50,519
basically where the device is in the

186
00:08:50,519 --> 00:08:54,240
memory so basically it's mmio address

187
00:08:54,240 --> 00:08:57,060
and you also have the number the hash

188
00:08:57,060 --> 00:08:59,640
GPI opens which is shorted for a number

189
00:08:59,640 --> 00:09:03,740
of UPL pins this device have

190
00:09:04,860 --> 00:09:07,620
so with this information we can build a

191
00:09:07,620 --> 00:09:10,380
stop model so we map and dummy memory

192
00:09:10,380 --> 00:09:13,019
region into the memo address in the

193
00:09:13,019 --> 00:09:17,040
device tree then on each rise or each

194
00:09:17,040 --> 00:09:20,459
assessed by the CPU will lock them and

195
00:09:20,459 --> 00:09:22,920
then print the back choice or and with

196
00:09:22,920 --> 00:09:24,720
the battery is we can travel or travel

197
00:09:24,720 --> 00:09:27,779
through related code to see what what is

198
00:09:27,779 --> 00:09:29,519
the logic of the software what it is

199
00:09:29,519 --> 00:09:32,220
trying to do or something like that and

200
00:09:32,220 --> 00:09:33,959
we can also even try to drive the

201
00:09:33,959 --> 00:09:36,000
interrupt lines to see how those

202
00:09:36,000 --> 00:09:38,339
interrupts are processed

203
00:09:38,339 --> 00:09:42,300
so here is an example log from or for

204
00:09:42,300 --> 00:09:45,360
the display controller so I don't know

205
00:09:45,360 --> 00:09:48,000
you can you can see it but oh but we

206
00:09:48,000 --> 00:09:49,080
have a

207
00:09:49,080 --> 00:09:51,420
we have to offset the seafood is trying

208
00:09:51,420 --> 00:09:54,240
to the value and also the vector is PC

209
00:09:54,240 --> 00:09:57,360
so we can easily navigate to the iOS

210
00:09:57,360 --> 00:09:59,959
kernel code

211
00:10:02,880 --> 00:10:05,220
next is a really interesting CPU

212
00:10:05,220 --> 00:10:09,720
features or custom a very custom one by

213
00:10:09,720 --> 00:10:11,100
Apple

214
00:10:11,100 --> 00:10:15,480
so it's called SPO gxf or this is using

215
00:10:15,480 --> 00:10:18,480
both iOS kernel and also in user

216
00:10:18,480 --> 00:10:21,360
userline browser it's basically a custom

217
00:10:21,360 --> 00:10:23,779
privilege level created by Apple

218
00:10:23,779 --> 00:10:27,899
or so how how does this privilege level

219
00:10:27,899 --> 00:10:30,899
fits into the normal one you may ask

220
00:10:30,899 --> 00:10:33,540
well let's have a look at the normal

221
00:10:33,540 --> 00:10:37,260
previous level model so we have el3 to

222
00:10:37,260 --> 00:10:40,800
er0 the the higher or the higher number

223
00:10:40,800 --> 00:10:44,399
the more privilege it is so el0 is you

224
00:10:44,399 --> 00:10:47,579
the user display and er3 is the

225
00:10:47,579 --> 00:10:50,100
supervisor

226
00:10:50,100 --> 00:10:52,220
thank you

227
00:10:52,579 --> 00:10:57,120
so for gxm it basically creates a GL2

228
00:10:57,120 --> 00:10:59,459
and gl3 is

229
00:10:59,459 --> 00:11:04,740
largely from the normal one so or GL2 is

230
00:11:04,740 --> 00:11:07,740
guarded mode for el2 so it is more

231
00:11:07,740 --> 00:11:12,060
privileged compared to normal el3 el2 or

232
00:11:12,060 --> 00:11:15,000
so gxl is shorted for garden execution

233
00:11:15,000 --> 00:11:16,440
feature

234
00:11:16,440 --> 00:11:20,279
so you have a garden execution level to

235
00:11:20,279 --> 00:11:23,100
enter it you use the G enter instruction

236
00:11:23,100 --> 00:11:26,399
which is a non-style one or

237
00:11:26,399 --> 00:11:29,339
and you can use exit to exit from the

238
00:11:29,339 --> 00:11:32,579
god mode to normal mode

239
00:11:32,579 --> 00:11:34,440
so the difference between Goddard and

240
00:11:34,440 --> 00:11:36,720
normal mode is that God mode can have

241
00:11:36,720 --> 00:11:39,720
different permission so you can create

242
00:11:39,720 --> 00:11:42,360
pages that can only be written by God

243
00:11:42,360 --> 00:11:44,279
mode but cannot be modified by normal

244
00:11:44,279 --> 00:11:46,579
mode

245
00:11:48,720 --> 00:11:52,440
so here we how it's worked so on this on

246
00:11:52,440 --> 00:11:54,959
on screen is the normal page descriptor

247
00:11:54,959 --> 00:11:59,040
so this uh so this describes how a page

248
00:11:59,040 --> 00:12:01,320
this describes the permission of the

249
00:12:01,320 --> 00:12:04,560
page so is it is readable writable or

250
00:12:04,560 --> 00:12:08,339
executable so yeah so so the color bits

251
00:12:08,339 --> 00:12:10,800
are the ones that used to determine the

252
00:12:10,800 --> 00:12:12,180
permission

253
00:12:12,180 --> 00:12:14,399
however I could change the definition of

254
00:12:14,399 --> 00:12:18,180
this bit or and they change they convert

255
00:12:18,180 --> 00:12:21,420
into index so they match it into an

256
00:12:21,420 --> 00:12:23,339
index instead of passing it a permission

257
00:12:23,339 --> 00:12:24,360
itself

258
00:12:24,360 --> 00:12:26,940
and the index is used to look up on the

259
00:12:26,940 --> 00:12:28,140
permission

260
00:12:28,140 --> 00:12:31,320
resistor which is 64-bit and and you can

261
00:12:31,320 --> 00:12:34,260
have 16 permission index

262
00:12:34,260 --> 00:12:36,240
and each permission will have four bits

263
00:12:36,240 --> 00:12:39,660
which will describe the permission each

264
00:12:39,660 --> 00:12:42,060
page half so two bits for guarded mode

265
00:12:42,060 --> 00:12:45,779
and two bits for normal mode

266
00:12:45,779 --> 00:12:48,060
so permission bids on page level now

267
00:12:48,060 --> 00:12:52,200
becomes indexed for a system resistor

268
00:12:52,200 --> 00:12:56,100
so how it is used in iOS kernel well or

269
00:12:56,100 --> 00:12:58,440
apple has a thing called prosection

270
00:12:58,440 --> 00:13:01,560
layer or which is normally shorted for

271
00:13:01,560 --> 00:13:02,760
PPL

272
00:13:02,760 --> 00:13:05,579
or this contains seriously sensitive

273
00:13:05,579 --> 00:13:06,600
code

274
00:13:06,600 --> 00:13:08,399
or

275
00:13:08,399 --> 00:13:11,700
so you can have when you compare the

276
00:13:11,700 --> 00:13:14,040
size of God code and normal code you can

277
00:13:14,040 --> 00:13:18,120
see a large difference so for my

278
00:13:18,120 --> 00:13:20,519
comparison so show that there are more

279
00:13:20,519 --> 00:13:23,480
than 300 times smaller for garden code

280
00:13:23,480 --> 00:13:27,899
so which means that a series sensitive

281
00:13:27,899 --> 00:13:30,540
code has less attack surface or if you

282
00:13:30,540 --> 00:13:32,820
attack if you hacker when you hack it

283
00:13:32,820 --> 00:13:35,399
the normal mode you also need to hike

284
00:13:35,399 --> 00:13:38,420
PPL to in order to do more fancy

285
00:13:38,420 --> 00:13:42,420
exploration Primitives

286
00:13:43,139 --> 00:13:46,019
so you can jump from garden mode to

287
00:13:46,019 --> 00:13:49,820
normal mode but not the other way around

288
00:13:49,980 --> 00:13:53,639
the other way is being used is for jit

289
00:13:53,639 --> 00:13:57,660
so browsers tends to use jit to or speed

290
00:13:57,660 --> 00:14:00,540
up the execution process of JavaScript

291
00:14:00,540 --> 00:14:03,899
so what it does is compile JavaScript to

292
00:14:03,899 --> 00:14:07,139
native code so to do that it has it

293
00:14:07,139 --> 00:14:09,300
create pages that are both writable and

294
00:14:09,300 --> 00:14:11,959
executable

295
00:14:12,839 --> 00:14:16,800
however these are some problems or 4G

296
00:14:16,800 --> 00:14:19,019
page you constantly need to switch

297
00:14:19,019 --> 00:14:21,180
between this mode or for when you're

298
00:14:21,180 --> 00:14:22,980
compiling you need to switch to right

299
00:14:22,980 --> 00:14:24,899
mode and when you're executing you need

300
00:14:24,899 --> 00:14:28,620
to have it in execute mode so changing

301
00:14:28,620 --> 00:14:31,440
the permission generate takes a lot of

302
00:14:31,440 --> 00:14:34,980
or it's pretty slow or it takes a lot of

303
00:14:34,980 --> 00:14:37,680
work from the CPU so perform performance

304
00:14:37,680 --> 00:14:39,920
is integrated

305
00:14:39,920 --> 00:14:43,820
or so output design

306
00:14:43,820 --> 00:14:47,940
Expo to fix this problem to improve the

307
00:14:47,940 --> 00:14:50,940
speed of the jit compiler

308
00:14:50,940 --> 00:14:53,820
so let's have a look of the process of

309
00:14:53,820 --> 00:14:55,199
changing

310
00:14:55,199 --> 00:14:58,079
so this is an excerpt from the method

311
00:14:58,079 --> 00:15:00,240
that changed the right protection mode

312
00:15:00,240 --> 00:15:02,760
so this is a method that changed between

313
00:15:02,760 --> 00:15:06,480
read execute to write or read write and

314
00:15:06,480 --> 00:15:08,699
vice versa so on the left is the part

315
00:15:08,699 --> 00:15:11,820
for isoq mode and on the right

316
00:15:11,820 --> 00:15:14,100
is for the right mode so the difference

317
00:15:14,100 --> 00:15:17,220
between too fast is shown by the top

318
00:15:17,220 --> 00:15:20,220
arrows which are the values it are

319
00:15:20,220 --> 00:15:22,320
rendered from the different location so

320
00:15:22,320 --> 00:15:24,540
the first location will contain the

321
00:15:24,540 --> 00:15:26,639
values that will that will configure the

322
00:15:26,639 --> 00:15:31,500
page to execute mode and all right mode

323
00:15:31,500 --> 00:15:35,519
so the MSO here is the trick or if you

324
00:15:35,519 --> 00:15:39,180
when the CPU file the MSR instruction it

325
00:15:39,180 --> 00:15:41,639
will change the permission of the page

326
00:15:41,639 --> 00:15:45,420
that is splr configured

327
00:15:45,420 --> 00:15:47,699
so you can see there is no Cisco

328
00:15:47,699 --> 00:15:50,459
involved no shopping involved so it runs

329
00:15:50,459 --> 00:15:52,880
really fast

330
00:15:56,220 --> 00:16:01,019
so with this completed logic or we have

331
00:16:01,019 --> 00:16:04,079
to implement it in kumu to you know to

332
00:16:04,079 --> 00:16:06,680
ask support for it so how do we do that

333
00:16:06,680 --> 00:16:09,600
so first first thing first or you need

334
00:16:09,600 --> 00:16:10,560
to have

335
00:16:10,560 --> 00:16:12,540
to you need to decode more instructions

336
00:16:12,540 --> 00:16:15,660
which is the G enter and gxit or there's

337
00:16:15,660 --> 00:16:18,360
a custom instruction or you also have to

338
00:16:18,360 --> 00:16:22,079
rework the page table logic because the

339
00:16:22,079 --> 00:16:24,300
save will no longer understand the page

340
00:16:24,300 --> 00:16:27,240
permission the same way however we still

341
00:16:27,240 --> 00:16:29,040
have uh we still haven't figured

342
00:16:29,040 --> 00:16:31,459
everything out yet so

343
00:16:31,459 --> 00:16:34,740
and the Q moves tlb have some

344
00:16:34,740 --> 00:16:37,199
limitations so we still require a

345
00:16:37,199 --> 00:16:39,600
flushes until we flushes or which may

346
00:16:39,600 --> 00:16:41,579
serve without the fourth performance or

347
00:16:41,579 --> 00:16:45,839
when the permission are being changed

348
00:16:45,839 --> 00:16:49,199
or next let's talk about usb so why do

349
00:16:49,199 --> 00:16:51,420
you want why do you really want USB

350
00:16:51,420 --> 00:16:53,940
emulation you might ask well we can use

351
00:16:53,940 --> 00:16:56,459
it for restoring so restoring is a fancy

352
00:16:56,459 --> 00:16:58,560
way of like installing an operating

353
00:16:58,560 --> 00:17:02,940
system or for iOS device so when we

354
00:17:02,940 --> 00:17:05,579
restore an iOS device it's recording

355
00:17:05,579 --> 00:17:08,699
installing an iOS on the device

356
00:17:08,699 --> 00:17:12,000
or just say it's also really useful you

357
00:17:12,000 --> 00:17:14,220
can use it for networking for example

358
00:17:14,220 --> 00:17:15,720
like SSH

359
00:17:15,720 --> 00:17:19,140
and you can and you can also connect the

360
00:17:19,140 --> 00:17:22,740
device to xcode using USB

361
00:17:22,740 --> 00:17:24,900
however to implement USB there are some

362
00:17:24,900 --> 00:17:27,780
challenge where we Face the first

363
00:17:27,780 --> 00:17:30,900
problem is that our salary has USB

364
00:17:30,900 --> 00:17:34,320
drivers for synopsis controllers or if

365
00:17:34,320 --> 00:17:37,320
you never heard of them or they build

366
00:17:37,320 --> 00:17:40,500
Hardware IP or basically

367
00:17:40,500 --> 00:17:43,679
the controller however the data sheets

368
00:17:43,679 --> 00:17:47,220
are tends to be payable so you need to

369
00:17:47,220 --> 00:17:49,380
have a deal with the synopsis to you

370
00:17:49,380 --> 00:17:52,559
know in order to get uh

371
00:17:52,559 --> 00:17:55,200
a documentation on how the device works

372
00:17:55,200 --> 00:17:57,840
however there is the other way to around

373
00:17:57,840 --> 00:17:59,460
that

374
00:17:59,460 --> 00:18:01,799
or

375
00:18:01,799 --> 00:18:03,960
here on the screen is an excerpt from

376
00:18:03,960 --> 00:18:08,039
qmo code or so in the comments they are

377
00:18:08,039 --> 00:18:11,520
really interesting lives so they link a

378
00:18:11,520 --> 00:18:12,840
documentation

379
00:18:12,840 --> 00:18:15,000
or for the device

380
00:18:15,000 --> 00:18:18,059
which interestingly enough is of is

381
00:18:18,059 --> 00:18:19,919
freely available to the public

382
00:18:19,919 --> 00:18:23,039
or so when synopsis don't give it to you

383
00:18:23,039 --> 00:18:25,440
let the other Hardware manufacturer give

384
00:18:25,440 --> 00:18:29,039
it to you because or hardware for

385
00:18:29,039 --> 00:18:31,799
example or even Intel when they make

386
00:18:31,799 --> 00:18:34,740
some boards which is a Highway IP they

387
00:18:34,740 --> 00:18:37,320
release documentation for it which the

388
00:18:37,320 --> 00:18:40,380
US the USB section for it or is

389
00:18:40,380 --> 00:18:44,179
basically a copy from the synopsis one

390
00:18:52,440 --> 00:18:55,020
okay so the second problem is the actual

391
00:18:55,020 --> 00:18:59,360
iPhone use newer stenosis controller so

392
00:18:59,360 --> 00:19:02,940
or documentation for this for the new

393
00:19:02,940 --> 00:19:05,640
controller tend to be Sparrow sponsor so

394
00:19:05,640 --> 00:19:07,980
you have less of them or a few of them

395
00:19:07,980 --> 00:19:10,380
so it's not as much as available

396
00:19:10,380 --> 00:19:12,840
compared to all controller we used to

397
00:19:12,840 --> 00:19:15,780
walk around this by forcing iOS to load

398
00:19:15,780 --> 00:19:18,120
drivers for the old controller however

399
00:19:18,120 --> 00:19:21,660
luckily we are able to implement the new

400
00:19:21,660 --> 00:19:24,679
controller by now

401
00:19:26,760 --> 00:19:30,059
so that's for the controller or the USB

402
00:19:30,059 --> 00:19:32,700
also have the the USB bus that we need

403
00:19:32,700 --> 00:19:35,039
to implement it so if you don't know you

404
00:19:35,039 --> 00:19:37,140
still have two sides or one is the whole

405
00:19:37,140 --> 00:19:39,780
side which is essentially your PC

406
00:19:39,780 --> 00:19:43,200
and the other side is the draw the the

407
00:19:43,200 --> 00:19:45,120
thing you connect to your PC which can

408
00:19:45,120 --> 00:19:48,240
be your flash drive or your iPhone

409
00:19:48,240 --> 00:19:51,539
or kumu does not support device mode or

410
00:19:51,539 --> 00:19:54,960
because it's used it is built to Emirate

411
00:19:54,960 --> 00:19:57,900
emulate a PC so we have to enter the

412
00:19:57,900 --> 00:19:59,100
support for that

413
00:19:59,100 --> 00:20:03,780
oh so how do we do that

414
00:20:03,780 --> 00:20:08,220
well we connect the iOS VM to a USB host

415
00:20:08,220 --> 00:20:12,840
to Unix pipe or on the screen is uh the

416
00:20:12,840 --> 00:20:16,200
simple diagram of how it works so on the

417
00:20:16,200 --> 00:20:18,000
top level you have the software running

418
00:20:18,000 --> 00:20:20,460
the software will talk to the controller

419
00:20:20,460 --> 00:20:22,880
which can be the synopsis Drive

420
00:20:22,880 --> 00:20:27,020
synthesis USB or the esci which is the

421
00:20:27,020 --> 00:20:30,600
USD 2.0 controller and this controller

422
00:20:30,600 --> 00:20:33,360
can talk or this controller are emulated

423
00:20:33,360 --> 00:20:37,860
in kumu so and this controller will talk

424
00:20:37,860 --> 00:20:40,860
to a physical layer which will

425
00:20:40,860 --> 00:20:43,080
implemented it through some proxy device

426
00:20:43,080 --> 00:20:45,360
and this device will talk to each other

427
00:20:45,360 --> 00:20:46,799
through sockets

428
00:20:46,799 --> 00:20:49,919
or units of pets

429
00:20:49,919 --> 00:20:51,539
so

430
00:20:51,539 --> 00:20:54,299
how can we use it for research so well

431
00:20:54,299 --> 00:20:57,020
let me show you

432
00:21:00,660 --> 00:21:02,100
so

433
00:21:02,100 --> 00:21:04,820
okay

434
00:21:05,700 --> 00:21:08,940
so in the first demo or we will

435
00:21:08,940 --> 00:21:13,080
try to restore iOS so let me so here we

436
00:21:13,080 --> 00:21:17,940
are starting on on iOS VM on the left is

437
00:21:17,940 --> 00:21:20,760
the iOS and on the right is the Linux VM

438
00:21:20,760 --> 00:21:23,640
which acts as a host which runs I device

439
00:21:23,640 --> 00:21:26,220
restore on there and the restore has

440
00:21:26,220 --> 00:21:28,320
started you can see the protocol is

441
00:21:28,320 --> 00:21:29,520
creeping up

442
00:21:29,520 --> 00:21:31,740
uh with speeding up the process here

443
00:21:31,740 --> 00:21:33,960
because restore tends to take a few more

444
00:21:33,960 --> 00:21:36,559
few more minutes

445
00:22:00,299 --> 00:22:03,539
there we go or

446
00:22:03,539 --> 00:22:07,140
the restore complete successfully or you

447
00:22:07,140 --> 00:22:11,039
can see the it says or restore finish

448
00:22:11,039 --> 00:22:14,460
and all the device will restart or we

449
00:22:14,460 --> 00:22:16,200
override the restart Behavior to make a

450
00:22:16,200 --> 00:22:18,600
stop so it makes it easier for recording

451
00:22:18,600 --> 00:22:23,120
so the process took 11 minutes

452
00:22:31,740 --> 00:22:35,760
okay next I will I will run it or I will

453
00:22:35,760 --> 00:22:38,960
do a lively mode just

454
00:22:40,140 --> 00:22:44,100
so here we will start an iOS VM or we

455
00:22:44,100 --> 00:22:46,320
are I am running in snapshot mode so it

456
00:22:46,320 --> 00:22:49,520
does not persist any change

457
00:22:52,080 --> 00:22:55,100
where's my mouse

458
00:23:04,980 --> 00:23:08,780
give a moment for to put up

459
00:23:17,580 --> 00:23:20,100
oh wait what's wrong with this it didn't

460
00:23:20,100 --> 00:23:22,520
show anything

461
00:23:27,600 --> 00:23:32,120
give a moment for the USB to initialize

462
00:23:36,780 --> 00:23:39,600
there we go so

463
00:23:39,600 --> 00:23:43,440
um I'm also on the so the lock screen is

464
00:23:43,440 --> 00:23:47,520
the Linux VM so you can use OS USB it

465
00:23:47,520 --> 00:23:50,880
shows the iOS device it's on USB bus or

466
00:23:50,880 --> 00:23:54,299
now we will use ifoxy or so this the

467
00:23:54,299 --> 00:23:57,900
tool where so to so this tool will

468
00:23:57,900 --> 00:23:59,820
forward basically forward the traffic

469
00:23:59,820 --> 00:24:04,080
from our local port or 222 and full

470
00:24:04,080 --> 00:24:07,260
forward is 2.44 on the iOS device over

471
00:24:07,260 --> 00:24:08,940
USB

472
00:24:08,940 --> 00:24:12,679
so let's do an SSH here

473
00:24:17,700 --> 00:24:20,220
and the first and the first word is

474
00:24:20,220 --> 00:24:23,520
Alpine everyone knows that

475
00:24:23,520 --> 00:24:26,340
will we are a root shell inside the iOS

476
00:24:26,340 --> 00:24:29,400
VM I can show it to you using your name

477
00:24:29,400 --> 00:24:33,179
you can see it is running I send you and

478
00:24:33,179 --> 00:24:35,400
the model is currently emitting is the

479
00:24:35,400 --> 00:24:39,720
iPhone 12 or iPhone 11. oh

480
00:24:39,720 --> 00:24:42,240
you can also run software verse to see

481
00:24:42,240 --> 00:24:44,159
the version is currently running

482
00:24:44,159 --> 00:24:46,740
and we can also run other commands to

483
00:24:46,740 --> 00:24:49,140
explore the iOS device let's start with

484
00:24:49,140 --> 00:24:53,159
simple or I will try OS on the root you

485
00:24:53,159 --> 00:24:55,980
can see there are some uh files there

486
00:24:55,980 --> 00:24:58,320
you can use hashtalk to list all the

487
00:24:58,320 --> 00:25:01,500
process planning so there are these are

488
00:25:01,500 --> 00:25:04,380
real service that runs on real device

489
00:25:04,380 --> 00:25:05,580
so

490
00:25:05,580 --> 00:25:07,980
you have running board you have

491
00:25:07,980 --> 00:25:09,900
installed you have chronotas you have

492
00:25:09,900 --> 00:25:11,760
launch D basically like your actual

493
00:25:11,760 --> 00:25:13,940
device

494
00:25:14,820 --> 00:25:17,000
foreign

495
00:25:26,720 --> 00:25:29,760
so in the previous demo we explore the

496
00:25:29,760 --> 00:25:32,520
we look at the restore process of iOS or

497
00:25:32,520 --> 00:25:34,880
we even got the best shell on an

498
00:25:34,880 --> 00:25:39,659
installer iOS or device and we also even

499
00:25:39,659 --> 00:25:44,900
Associated to the VM using over USB

500
00:25:45,500 --> 00:25:48,720
next thing uh

501
00:25:48,720 --> 00:25:52,140
we do have iBook support or so if you

502
00:25:52,140 --> 00:25:55,100
don't know or I would install iPhone

503
00:25:55,100 --> 00:25:59,400
Bluetooth is used for Recovery or and or

504
00:25:59,400 --> 00:26:01,559
to load the kernel

505
00:26:01,559 --> 00:26:04,500
so why do you want to emulate iboot

506
00:26:04,500 --> 00:26:06,840
because I would is in the circle route

507
00:26:06,840 --> 00:26:10,140
chain so if you can hike I would or

508
00:26:10,140 --> 00:26:13,620
somehow or it will get uh it will give

509
00:26:13,620 --> 00:26:15,600
you a lot of power over the kernel the

510
00:26:15,600 --> 00:26:17,520
software the device is running so

511
00:26:17,520 --> 00:26:20,400
because it is a part of the circle boot

512
00:26:20,400 --> 00:26:21,120
chain

513
00:26:21,120 --> 00:26:25,140
and one more reason is uh we use iBook

514
00:26:25,140 --> 00:26:28,440
to verify our model because I would tend

515
00:26:28,440 --> 00:26:31,320
to Hardware in a really peculiar way so

516
00:26:31,320 --> 00:26:34,320
we will wait so

517
00:26:34,320 --> 00:26:37,320
if you can run I would then we have more

518
00:26:37,320 --> 00:26:39,480
chance that our model is emulate the

519
00:26:39,480 --> 00:26:41,580
hardware correctly

520
00:26:41,580 --> 00:26:43,740
and our support is pretty experimental

521
00:26:43,740 --> 00:26:46,279
so it's not really ready for production

522
00:26:46,279 --> 00:26:49,500
and it doesn't or hasn't been published

523
00:26:49,500 --> 00:26:54,020
yet but I will give you a demo right now

524
00:27:02,400 --> 00:27:05,279
so here we go or we start off iboot or

525
00:27:05,279 --> 00:27:07,500
you can see the boot Banner on the top

526
00:27:07,500 --> 00:27:10,080
left on the right is the recovery screen

527
00:27:10,080 --> 00:27:13,140
that you will generally see

528
00:27:13,140 --> 00:27:16,799
or open up the Linux VM we can use all

529
00:27:16,799 --> 00:27:19,140
the eye recovery to query information

530
00:27:19,140 --> 00:27:20,880
about the device

531
00:27:20,880 --> 00:27:23,880
and you can also get a shower or by

532
00:27:23,880 --> 00:27:25,520
using S

533
00:27:25,520 --> 00:27:29,279
and that's it or unfortunately it does

534
00:27:29,279 --> 00:27:32,640
or you can also attach a debugger to all

535
00:27:32,640 --> 00:27:35,039
these demos or

536
00:27:35,039 --> 00:27:38,960
however for iBook or this or

537
00:27:38,960 --> 00:27:42,720
we are still pretty new to it so that's

538
00:27:42,720 --> 00:27:46,220
that's all we got for today

539
00:27:53,640 --> 00:27:57,539
so in the to recap or output was loaded

540
00:27:57,539 --> 00:28:01,679
in the demo and we use a recovery in the

541
00:28:01,679 --> 00:28:03,960
Linux VM to interact with the recovery

542
00:28:03,960 --> 00:28:07,140
mode which can get some query some

543
00:28:07,140 --> 00:28:09,600
device information and get a recovery

544
00:28:09,600 --> 00:28:11,820
show however the recovery show for

545
00:28:11,820 --> 00:28:14,000
release builds tends to be

546
00:28:14,000 --> 00:28:17,279
registered so in or there's not much to

547
00:28:17,279 --> 00:28:19,760
do with it

548
00:28:21,000 --> 00:28:23,220
next uh

549
00:28:23,220 --> 00:28:26,520
we also both removed for rainbow

550
00:28:26,520 --> 00:28:30,120
focusing first thing so to support rate

551
00:28:30,120 --> 00:28:33,539
of fasting we we implemented a snapshot

552
00:28:33,539 --> 00:28:36,600
feature so the problem we are trying to

553
00:28:36,600 --> 00:28:39,480
solve is that because iOS boot time

554
00:28:39,480 --> 00:28:42,240
is not fast enough for fuzzing so for

555
00:28:42,240 --> 00:28:44,700
first thing you want it to run something

556
00:28:44,700 --> 00:28:46,940
repeatedly as fast as possible

557
00:28:46,940 --> 00:28:50,520
or so we started using snapshot so

558
00:28:50,520 --> 00:28:53,100
because snapshot is faster than normal

559
00:28:53,100 --> 00:28:56,400
booting so it reduced the cycle or the

560
00:28:56,400 --> 00:29:00,860
cycle Time by 10 times

561
00:29:01,620 --> 00:29:04,140
we also out could coverage support to

562
00:29:04,140 --> 00:29:07,140
Kimu or because I value code coverage

563
00:29:07,140 --> 00:29:12,059
for today today is Magic because we're

564
00:29:12,059 --> 00:29:15,840
running TCG so it's very easy for us

565
00:29:15,840 --> 00:29:18,860
to report coverage

566
00:29:21,000 --> 00:29:24,240
so we try to fast the USB stack here is

567
00:29:24,240 --> 00:29:27,000
the simple diagram so you have FL

568
00:29:27,000 --> 00:29:28,799
running in persistent mode it will fall

569
00:29:28,799 --> 00:29:31,679
then for a kumu process and the Kumo

570
00:29:31,679 --> 00:29:33,380
will start by

571
00:29:33,380 --> 00:29:35,460
restoring a snapshot

572
00:29:35,460 --> 00:29:38,340
oh the snapshot will be a fuzzable state

573
00:29:38,340 --> 00:29:40,559
so you can start sending commands or

574
00:29:40,559 --> 00:29:44,340
inputs to it immediately then we have uh

575
00:29:44,340 --> 00:29:48,419
dummy USB host which will read or input

576
00:29:48,419 --> 00:29:52,080
from AFL and send it to the iOS

577
00:29:52,080 --> 00:29:55,440
VM for processing so if I was standing

578
00:29:55,440 --> 00:29:59,220
red or it will be reported to FL and if

579
00:29:59,220 --> 00:30:00,620
not or

580
00:30:00,620 --> 00:30:04,440
no it will be also reported to AFL for

581
00:30:04,440 --> 00:30:08,419
or for startups

582
00:30:08,419 --> 00:30:15,620
and here's the FL running or USB fasting

583
00:30:19,620 --> 00:30:23,760
we also look into Cisco fuzzing so

584
00:30:23,760 --> 00:30:26,640
the diagram is pretty similar or we also

585
00:30:26,640 --> 00:30:30,179
have persistent mode FFL or A4 kumu and

586
00:30:30,179 --> 00:30:32,940
then kumu does the snapshot restore then

587
00:30:32,940 --> 00:30:34,100
inside

588
00:30:34,100 --> 00:30:37,620
the iOS VM we will have a program the

589
00:30:37,620 --> 00:30:41,000
USB program that receive input from AFL

590
00:30:41,000 --> 00:30:44,760
using custom instructions oh and we'll

591
00:30:44,760 --> 00:30:48,000
do a Cisco based on the input you get if

592
00:30:48,000 --> 00:30:50,399
I was panicked then it will be reported

593
00:30:50,399 --> 00:30:53,820
to AFL otherwise or

594
00:30:53,820 --> 00:30:56,760
it will end the current cycle and do a

595
00:30:56,760 --> 00:30:59,720
snapshot restore again

596
00:31:00,059 --> 00:31:03,179
here's a screenshot of AFL running Cisco

597
00:31:03,179 --> 00:31:06,779
first thing or we tend to uh leave a

598
00:31:06,779 --> 00:31:08,940
better speed or with Cisco fuzzing

599
00:31:08,940 --> 00:31:11,700
compared to USB

600
00:31:11,700 --> 00:31:14,159
however uh there's still a lot of

601
00:31:14,159 --> 00:31:17,520
challenges for fuzzing oh the first is

602
00:31:17,520 --> 00:31:21,120
summer interrupts so this interrupts can

603
00:31:21,120 --> 00:31:23,159
Will interfere with the coverage result

604
00:31:23,159 --> 00:31:25,380
making it pretty random so it is not

605
00:31:25,380 --> 00:31:28,080
consistent at all or

606
00:31:28,080 --> 00:31:30,000
our current solution for that is to mask

607
00:31:30,000 --> 00:31:32,580
every instructor possible however

608
00:31:32,580 --> 00:31:34,860
without interrupts our thread is

609
00:31:34,860 --> 00:31:37,740
currently the only one running so the so

610
00:31:37,740 --> 00:31:41,039
iOS will never know if the if the some

611
00:31:41,039 --> 00:31:43,080
stock for this thread has ended or not

612
00:31:43,080 --> 00:31:45,480
so it will never switch to other threat

613
00:31:45,480 --> 00:31:48,899
which prevents or which reduce our

614
00:31:48,899 --> 00:31:51,240
opposing harness and the second problem

615
00:31:51,240 --> 00:31:53,340
is that apple does not provide sanitizer

616
00:31:53,340 --> 00:31:57,600
bills for iOS so maybe we're thinking

617
00:31:57,600 --> 00:31:59,520
about hooking allocator functions so

618
00:31:59,520 --> 00:32:01,860
hooking my locks freeze and try to watch

619
00:32:01,860 --> 00:32:06,539
watch what I was doing but oh this is

620
00:32:06,539 --> 00:32:10,580
still very far from perfect

621
00:32:12,299 --> 00:32:15,000
so let's talk about the future well

622
00:32:15,000 --> 00:32:17,039
there are there are a lot of features

623
00:32:17,039 --> 00:32:20,100
we're still implementing and we want to

624
00:32:20,100 --> 00:32:22,740
have it done in the future we want a

625
00:32:22,740 --> 00:32:25,620
proper working frame buffer or for the

626
00:32:25,620 --> 00:32:28,559
Jui and also we want the touchscreen to

627
00:32:28,559 --> 00:32:30,720
work so you can interact with it like a

628
00:32:30,720 --> 00:32:32,179
real device

629
00:32:32,179 --> 00:32:36,320
or we also want to emulate step because

630
00:32:36,320 --> 00:32:39,539
step is an essential part to ours and

631
00:32:39,539 --> 00:32:42,419
it's hard and as the name suggests which

632
00:32:42,419 --> 00:32:45,419
is circle and processor it contains a

633
00:32:45,419 --> 00:32:47,580
lot of security related function so it

634
00:32:47,580 --> 00:32:49,620
might be so it is an interesting Target

635
00:32:49,620 --> 00:32:53,159
to Emirates or apparently we also need

636
00:32:53,159 --> 00:32:57,480
to emit the GPU because our iOS GUI use

637
00:32:57,480 --> 00:33:01,080
a lot of GPU and a friendly it refused

638
00:33:01,080 --> 00:33:03,840
to work without the GPU implemented

639
00:33:03,840 --> 00:33:06,000
and we also want to improve our fuzzles

640
00:33:06,000 --> 00:33:08,700
to get some bucks

641
00:33:08,700 --> 00:33:12,419
so through that we need your help

642
00:33:12,419 --> 00:33:15,480
our code is currently open source or on

643
00:33:15,480 --> 00:33:17,279
the link on the screen

644
00:33:17,279 --> 00:33:19,559
or you can add add our reverse

645
00:33:19,559 --> 00:33:22,440
engineering process to a lot of ways or

646
00:33:22,440 --> 00:33:24,240
you can either contribute directly to a

647
00:33:24,240 --> 00:33:28,019
repo or support the Linux on all marks

648
00:33:28,019 --> 00:33:31,080
efforts because uh these are marks

649
00:33:31,080 --> 00:33:33,899
shares a lot of peripherals with iOS so

650
00:33:33,899 --> 00:33:37,820
is transferable knowledge

651
00:33:39,179 --> 00:33:41,220
or during this there was there were a

652
00:33:41,220 --> 00:33:42,840
lot of projects that were very helpful

653
00:33:42,840 --> 00:33:47,820
to us especially as asylums or team or

654
00:33:47,820 --> 00:33:52,140
also we or and also others useful

655
00:33:52,140 --> 00:33:55,340
projects are mentioned on the screen

656
00:33:59,580 --> 00:34:03,120
two ways so you can see our emotion is

657
00:34:03,120 --> 00:34:06,120
totally possible even so it's not not a

658
00:34:06,120 --> 00:34:09,659
trivial task or you also we can also

659
00:34:09,659 --> 00:34:13,320
explore a lot about iOS device our

660
00:34:13,320 --> 00:34:15,359
Hardware so

661
00:34:15,359 --> 00:34:18,899
Hawaii Hardware or through emulation

662
00:34:18,899 --> 00:34:22,800
or we can also we also see that how to

663
00:34:22,800 --> 00:34:24,839
remove enables multiple secret

664
00:34:24,839 --> 00:34:28,619
applications such as fasting or and we

665
00:34:28,619 --> 00:34:30,719
hope that our effort will lower the

666
00:34:30,719 --> 00:34:35,159
entry barrier to iOS research so or when

667
00:34:35,159 --> 00:34:37,500
a lot of when more people look at iOS it

668
00:34:37,500 --> 00:34:39,359
will become more secure for all of us

669
00:34:39,359 --> 00:34:41,710
thank you

670
00:34:41,710 --> 00:34:44,820
[Music]

671
00:34:48,659 --> 00:34:51,769
[Music]

