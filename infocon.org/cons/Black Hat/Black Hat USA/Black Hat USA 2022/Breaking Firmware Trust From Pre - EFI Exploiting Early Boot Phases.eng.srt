1
00:00:01,730 --> 00:00:03,720
[Music]

2
00:00:03,720 --> 00:00:06,720
foreign

3
00:00:08,540 --> 00:00:14,040
to the stage Alex martisov

4
00:00:14,040 --> 00:00:18,740
hi what's up yeah thank you very much

5
00:00:19,740 --> 00:00:21,660
thank you very much for coming this

6
00:00:21,660 --> 00:00:24,660
session I'm Alex matrosov and it's been

7
00:00:24,660 --> 00:00:27,000
a very interesting research which has

8
00:00:27,000 --> 00:00:30,119
been done by binary team and Jager

9
00:00:30,119 --> 00:00:32,220
vaselenka Alex hermolov and Sam Thomas

10
00:00:32,220 --> 00:00:34,559
make a great contribution to this

11
00:00:34,559 --> 00:00:36,719
research and first of all I wanted to

12
00:00:36,719 --> 00:00:39,239
say it's a big difference from the

13
00:00:39,239 --> 00:00:40,920
previous year I've been presenting the

14
00:00:40,920 --> 00:00:43,379
last year in Vegas for black hat and I

15
00:00:43,379 --> 00:00:44,879
see a couple of more people coming

16
00:00:44,879 --> 00:00:47,040
actually to the session it's great to

17
00:00:47,040 --> 00:00:50,399
see you guys here in Vegas all right

18
00:00:50,399 --> 00:00:53,940
this is a binary team and Kudos goal to

19
00:00:53,940 --> 00:00:55,980
the whole team for hard work on this

20
00:00:55,980 --> 00:00:57,660
research and we have a lot of stuff to

21
00:00:57,660 --> 00:01:00,500
discuss today so first of all like

22
00:01:00,500 --> 00:01:02,180
previously

23
00:01:02,180 --> 00:01:04,500
vulnerabilities it's been constantly

24
00:01:04,500 --> 00:01:06,900
overlooked and actually it connects the

25
00:01:06,900 --> 00:01:11,640
whole uh interesting and very dangerous

26
00:01:11,640 --> 00:01:14,400
and impactful space for the researchers

27
00:01:14,400 --> 00:01:17,640
and the attackers as well and some of

28
00:01:17,640 --> 00:01:21,000
them actually bypassing a lot of

29
00:01:21,000 --> 00:01:24,299
mitigation just by Design and like STM

30
00:01:24,299 --> 00:01:27,119
ppam and other fancy mitigations which

31
00:01:27,119 --> 00:01:29,520
is Intel developed unfortunately it can

32
00:01:29,520 --> 00:01:32,400
be bypassed from the pre-e5 phases early

33
00:01:32,400 --> 00:01:33,780
boot phases

34
00:01:33,780 --> 00:01:37,860
but let's actually talk about how this

35
00:01:37,860 --> 00:01:40,740
research started and some pre-story so

36
00:01:40,740 --> 00:01:43,320
in 2017 we already been talking about

37
00:01:43,320 --> 00:01:46,460
Intel boot guard and how actually

38
00:01:46,460 --> 00:01:49,200
modifying some of the data which is

39
00:01:49,200 --> 00:01:51,479
controlled the boot process it's

40
00:01:51,479 --> 00:01:53,759
actually reflect on the bypass the whole

41
00:01:53,759 --> 00:01:57,899
security features right and in 2019 with

42
00:01:57,899 --> 00:02:00,060
Alexandra Gazette we've been talking

43
00:02:00,060 --> 00:02:03,000
about how security boundaries are

44
00:02:03,000 --> 00:02:05,040
important to consider as a threat model

45
00:02:05,040 --> 00:02:07,439
because different security boundaries

46
00:02:07,439 --> 00:02:09,239
when they are crossing have a different

47
00:02:09,239 --> 00:02:11,220
impact on some of the mitigations or

48
00:02:11,220 --> 00:02:14,099
security features and we've done that

49
00:02:14,099 --> 00:02:17,459
before and of course the last year when

50
00:02:17,459 --> 00:02:20,400
we first time with Alex Taylor rushkin

51
00:02:20,400 --> 00:02:22,680
and Adams zabroski kind of like a go

52
00:02:22,680 --> 00:02:24,720
deep dive with some of the

53
00:02:24,720 --> 00:02:27,180
vulnerabilities in pre-5 phase and of

54
00:02:27,180 --> 00:02:30,239
course like Intel bssa DFT it's been

55
00:02:30,239 --> 00:02:32,640
kind of like a an eye opening for

56
00:02:32,640 --> 00:02:33,720
previous

57
00:02:33,720 --> 00:02:36,900
raises for the exploitation and by the

58
00:02:36,900 --> 00:02:39,300
way this one is eliminated for most

59
00:02:39,300 --> 00:02:41,760
underhyped Pony Awards we'll see maybe

60
00:02:41,760 --> 00:02:44,340
we can get this one for this sweet

61
00:02:44,340 --> 00:02:46,319
vulnerability and unfortunately actually

62
00:02:46,319 --> 00:02:48,660
it's still available in the Wild

63
00:02:48,660 --> 00:02:51,239
unpatched on many systems make sure you

64
00:02:51,239 --> 00:02:52,440
are not the one

65
00:02:52,440 --> 00:02:55,739
and um an offensive Con in February we

66
00:02:55,739 --> 00:02:58,680
actually drop about 22 new fresh baked

67
00:02:58,680 --> 00:03:01,500
cities related mostly for system

68
00:03:01,500 --> 00:03:04,920
management mode and we can see literally

69
00:03:04,920 --> 00:03:07,080
like it is a repeatable failure is

70
00:03:07,080 --> 00:03:09,120
happening in the industry with such

71
00:03:09,120 --> 00:03:12,239
vulnerabilities and the space with

72
00:03:12,239 --> 00:03:14,220
vulnerability research in the firmware

73
00:03:14,220 --> 00:03:15,780
has been overlooked and system

74
00:03:15,780 --> 00:03:17,819
management memory corruption to be

75
00:03:17,819 --> 00:03:19,980
honest it's not a new vectors it is

76
00:03:19,980 --> 00:03:22,560
actually like known from the early 2000s

77
00:03:22,560 --> 00:03:23,959
but still

78
00:03:23,959 --> 00:03:26,940
it is available and of course when you

79
00:03:26,940 --> 00:03:28,860
write your firmers on the C language

80
00:03:28,860 --> 00:03:31,940
it's great some interesting rooms for

81
00:03:31,940 --> 00:03:34,019
memory corruption

82
00:03:34,019 --> 00:03:36,959
all right uh what is a p Prime and

83
00:03:36,959 --> 00:03:38,519
actually in our offensive research talk

84
00:03:38,519 --> 00:03:40,799
we say we are working on ppam and

85
00:03:40,799 --> 00:03:42,420
actually it's platform Cooperative

86
00:03:42,420 --> 00:03:44,340
assessment module which is responsible

87
00:03:44,340 --> 00:03:47,040
for armoring system management mode it's

88
00:03:47,040 --> 00:03:48,560
one of the more

89
00:03:48,560 --> 00:03:52,860
powerful uh modes on the XS x86 systems

90
00:03:52,860 --> 00:03:56,220
and basically like we say we will be

91
00:03:56,220 --> 00:03:57,840
finding some bypasses for sure because

92
00:03:57,840 --> 00:04:00,120
the complexity of such feature is

93
00:04:00,120 --> 00:04:03,420
actually incredible and we did

94
00:04:03,420 --> 00:04:06,900
right but before we dig into

95
00:04:06,900 --> 00:04:10,140
previous five phases with a pi drivers

96
00:04:10,140 --> 00:04:13,260
let's talk about ACM and intelicia ACM

97
00:04:13,260 --> 00:04:16,079
it is a authenticated code modules think

98
00:04:16,079 --> 00:04:18,720
about it is just a binary blob which is

99
00:04:18,720 --> 00:04:21,060
executed uh separately from your

100
00:04:21,060 --> 00:04:25,440
firmware and actually it is loading to

101
00:04:25,440 --> 00:04:28,620
um cache directly on CPU this cache is

102
00:04:28,620 --> 00:04:31,080
locked it's called like a cache as RAM

103
00:04:31,080 --> 00:04:34,440
on the CPU feature and it's providing

104
00:04:34,440 --> 00:04:36,120
some additional capabilities for

105
00:04:36,120 --> 00:04:39,360
attestation or basically for txt and a

106
00:04:39,360 --> 00:04:41,940
lot of other things but what's the

107
00:04:41,940 --> 00:04:44,759
interesting about the ACM their

108
00:04:44,759 --> 00:04:48,360
complexity is also growing and basically

109
00:04:48,360 --> 00:04:51,180
we already showed it before uh with

110
00:04:51,180 --> 00:04:53,940
binary research team uh into wood guard

111
00:04:53,940 --> 00:04:56,300
in the bias guard by passes and actually

112
00:04:56,300 --> 00:04:58,800
vulnerabilities and Intel txt is not

113
00:04:58,800 --> 00:05:01,280
rare and

114
00:05:01,280 --> 00:05:04,740
also as example the changes in uscms

115
00:05:04,740 --> 00:05:07,320
first of all it's increased the security

116
00:05:07,320 --> 00:05:10,320
over like the hashes new Flash functions

117
00:05:10,320 --> 00:05:13,199
used and rsas but it's not about that

118
00:05:13,199 --> 00:05:15,360
the size of the module it's actually

119
00:05:15,360 --> 00:05:18,120
grows like more than five times right

120
00:05:18,120 --> 00:05:21,180
it's been a 32 kilobytes now it's 256

121
00:05:21,180 --> 00:05:23,699
kilobytes right what happened when the

122
00:05:23,699 --> 00:05:25,620
code base is growing attack surface is

123
00:05:25,620 --> 00:05:27,720
growing as well and

124
00:05:27,720 --> 00:05:32,100
uh ACM are responsible also for

125
00:05:32,100 --> 00:05:36,660
attestation of ppam policies and this

126
00:05:36,660 --> 00:05:38,639
very important to remember because we

127
00:05:38,639 --> 00:05:40,380
very we have a very interesting

128
00:05:40,380 --> 00:05:42,660
Discovery later on

129
00:05:42,660 --> 00:05:44,940
um uh in our presentation

130
00:05:44,940 --> 00:05:49,680
and uh also as example uh talking from

131
00:05:49,680 --> 00:05:52,139
the attack surface perspective Intel

132
00:05:52,139 --> 00:05:55,860
patched like about 10 vulnerabilities in

133
00:05:55,860 --> 00:05:59,699
acms for this year and that's mean this

134
00:05:59,699 --> 00:06:01,860
attack surface it's actually pretty

135
00:06:01,860 --> 00:06:03,479
legit

136
00:06:03,479 --> 00:06:05,759
right let's dive to preview fire attack

137
00:06:05,759 --> 00:06:09,539
surface and just a reminder about what

138
00:06:09,539 --> 00:06:11,400
the attacker model and potential impact

139
00:06:11,400 --> 00:06:13,860
I don't want to go uh that deep but

140
00:06:13,860 --> 00:06:15,240
basically all these vulnerabilities

141
00:06:15,240 --> 00:06:17,759
we're talking today it can be used for

142
00:06:17,759 --> 00:06:20,580
the persistent implant delivery and by

143
00:06:20,580 --> 00:06:23,340
passing all the security boundaries on

144
00:06:23,340 --> 00:06:25,740
uh firmware space

145
00:06:25,740 --> 00:06:28,259
also vulnerabilities which is related to

146
00:06:28,259 --> 00:06:32,039
enviram it's actually not protected if

147
00:06:32,039 --> 00:06:33,600
we're talking about the persistent

148
00:06:33,600 --> 00:06:35,759
storage on the Spy flash it's usually

149
00:06:35,759 --> 00:06:38,460
not protected by woodgard interestingly

150
00:06:38,460 --> 00:06:42,900
if you have enviram payload basically it

151
00:06:42,900 --> 00:06:45,780
can be a constant re-exploitation during

152
00:06:45,780 --> 00:06:48,240
the boot and actually can gain for the

153
00:06:48,240 --> 00:06:50,580
attacker the persistence it's why I

154
00:06:50,580 --> 00:06:52,620
would say these vulnerabilities is very

155
00:06:52,620 --> 00:06:55,919
dangerous because technically from just

156
00:06:55,919 --> 00:06:58,319
SM you can be protected but from

157
00:06:58,319 --> 00:07:00,300
environment persistent storage sometimes

158
00:07:00,300 --> 00:07:02,940
it's not considered by System Architects

159
00:07:02,940 --> 00:07:06,840
or device vendors as potential space for

160
00:07:06,840 --> 00:07:10,620
the persistence but it is

161
00:07:10,620 --> 00:07:15,259
so and you can see uh actual

162
00:07:15,259 --> 00:07:17,880
complexity of communicating constantly

163
00:07:17,880 --> 00:07:20,039
during the boot process with environment

164
00:07:20,039 --> 00:07:21,900
storage right

165
00:07:21,900 --> 00:07:24,539
but let's talk more about the pre-fire

166
00:07:24,539 --> 00:07:26,880
attack vectors and we have so many of

167
00:07:26,880 --> 00:07:29,759
them to be honest so basically it's

168
00:07:29,759 --> 00:07:32,220
why is it preview fight so dangerous as

169
00:07:32,220 --> 00:07:34,440
you can see on this picture it started

170
00:07:34,440 --> 00:07:37,860
earlier than actually Dixie phase and

171
00:07:37,860 --> 00:07:40,520
smm get initialized

172
00:07:40,520 --> 00:07:43,319
also during the previous five boot

173
00:07:43,319 --> 00:07:46,880
phases it is actually called like a

174
00:07:46,880 --> 00:07:49,740
platform initialization phase right it's

175
00:07:49,740 --> 00:07:51,440
a lot of security features to get

176
00:07:51,440 --> 00:07:53,400
initialized it's a lot of things

177
00:07:53,400 --> 00:07:55,680
happening like a memory training and

178
00:07:55,680 --> 00:07:59,580
other things but also previous is

179
00:07:59,580 --> 00:08:01,319
actually sometimes accessible for the

180
00:08:01,319 --> 00:08:03,660
code execution

181
00:08:03,660 --> 00:08:06,000
from the operating system but of course

182
00:08:06,000 --> 00:08:09,780
it's give more limited capabilities for

183
00:08:09,780 --> 00:08:12,840
the attacker compared to during when the

184
00:08:12,840 --> 00:08:15,360
early boot just started because a lot of

185
00:08:15,360 --> 00:08:17,699
memory regions are already locked but

186
00:08:17,699 --> 00:08:20,160
still it can be used for bypassing a lot

187
00:08:20,160 --> 00:08:23,039
of security features

188
00:08:23,039 --> 00:08:28,860
so and as example during Pi phase we can

189
00:08:28,860 --> 00:08:30,479
of course bypass all the security

190
00:08:30,479 --> 00:08:32,458
protection and spy because it's just not

191
00:08:32,458 --> 00:08:34,559
enabled and it's just not happened yet

192
00:08:34,559 --> 00:08:35,580
before

193
00:08:35,580 --> 00:08:38,520
so all the historical mitigations like a

194
00:08:38,520 --> 00:08:41,399
bioslog enable and smm buys right

195
00:08:41,399 --> 00:08:43,380
protections it's going to be bypassed

196
00:08:43,380 --> 00:08:47,420
because it's basically a natural design

197
00:08:47,420 --> 00:08:51,720
of the firmware for ufi standard and

198
00:08:51,720 --> 00:08:55,380
basically I wanted to say uh

199
00:08:55,380 --> 00:08:58,080
sometimes it's very important from the

200
00:08:58,080 --> 00:09:00,480
perspective of the specification or the

201
00:09:00,480 --> 00:09:03,240
standard if it is exist from early 2000s

202
00:09:03,240 --> 00:09:06,540
to review and reconsider how different

203
00:09:06,540 --> 00:09:09,120
wood phases can actually reflect on new

204
00:09:09,120 --> 00:09:11,100
security features right and of course

205
00:09:11,100 --> 00:09:13,560
like a complexity it's always anime of

206
00:09:13,560 --> 00:09:16,560
security and you can see that about how

207
00:09:16,560 --> 00:09:19,980
many vulnerabilities we managed to found

208
00:09:19,980 --> 00:09:24,060
so basically this white is a summary of

209
00:09:24,060 --> 00:09:27,000
the 12 CVS which is disclosed right now

210
00:09:27,000 --> 00:09:29,880
and all the advisories are uploaded on

211
00:09:29,880 --> 00:09:33,120
binary website so you can go and learn

212
00:09:33,120 --> 00:09:35,160
more details about them and some of the

213
00:09:35,160 --> 00:09:38,899
pocs also available public

214
00:09:38,940 --> 00:09:42,779
and interesting reminder also about some

215
00:09:42,779 --> 00:09:44,580
of the issues which is related to

216
00:09:44,580 --> 00:09:47,040
Independent bios developers it's

217
00:09:47,040 --> 00:09:50,399
actually not only connected to single

218
00:09:50,399 --> 00:09:52,380
device vendor it's impact the whole

219
00:09:52,380 --> 00:09:55,380
ecosystem which actually uses similar

220
00:09:55,380 --> 00:09:57,300
code across the different devices and

221
00:09:57,300 --> 00:09:59,459
product lines

222
00:09:59,459 --> 00:10:01,800
but also on this slide I wanted to thank

223
00:10:01,800 --> 00:10:03,899
you all the PCR teams and their hard

224
00:10:03,899 --> 00:10:06,600
work to helping us get on time discussed

225
00:10:06,600 --> 00:10:09,120
all these vulnerabilities

226
00:10:09,120 --> 00:10:11,519
let's talk about the exploitation and

227
00:10:11,519 --> 00:10:15,660
actually as she resumed to Pi it's very

228
00:10:15,660 --> 00:10:17,519
interesting vulnerability because it

229
00:10:17,519 --> 00:10:20,339
actually shows the supply chain problem

230
00:10:20,339 --> 00:10:21,600
as well

231
00:10:21,600 --> 00:10:24,540
first of all this card is actually exist

232
00:10:24,540 --> 00:10:26,160
on Ed K2

233
00:10:26,160 --> 00:10:29,880
but unfortunately it's got modified with

234
00:10:29,880 --> 00:10:33,120
some of the code by independent bios

235
00:10:33,120 --> 00:10:35,580
developer and basically what happened

236
00:10:35,580 --> 00:10:38,279
with this modification it's actually

237
00:10:38,279 --> 00:10:40,019
introduced vulnerability

238
00:10:40,019 --> 00:10:42,420
and of course this vulnerability will be

239
00:10:42,420 --> 00:10:44,820
exist on many other systems which is

240
00:10:44,820 --> 00:10:46,860
uses code from independent bias

241
00:10:46,860 --> 00:10:48,480
developer which is actually connected to

242
00:10:48,480 --> 00:10:51,360
this vulnerability and

243
00:10:51,360 --> 00:10:54,600
problem is also when someone is forking

244
00:10:54,600 --> 00:10:57,360
uh public reference code it is actually

245
00:10:57,360 --> 00:11:00,120
support this Fork keep it up to date and

246
00:11:00,120 --> 00:11:02,640
a lot of other things are coming to

247
00:11:02,640 --> 00:11:04,920
supply chain security I think actually

248
00:11:04,920 --> 00:11:09,120
it's better to keep consistent uh this

249
00:11:09,120 --> 00:11:12,079
code and actually the same as original

250
00:11:12,079 --> 00:11:14,760
reference code because it's basically

251
00:11:14,760 --> 00:11:17,640
will be give much easier and transparent

252
00:11:17,640 --> 00:11:20,820
supply chain from that perspective

253
00:11:20,820 --> 00:11:23,339
what the vulnerability is so basically

254
00:11:23,339 --> 00:11:26,579
we have a get variable value fpdt

255
00:11:26,579 --> 00:11:27,540
variable

256
00:11:27,540 --> 00:11:30,720
which is actually contain St performance

257
00:11:30,720 --> 00:11:35,100
table pointer and we can get access to

258
00:11:35,100 --> 00:11:37,740
acpi St performance Andreas actually

259
00:11:37,740 --> 00:11:40,320
from the operating system memory and we

260
00:11:40,320 --> 00:11:42,540
can change this at 3D performance table

261
00:11:42,540 --> 00:11:45,540
pointer and basically it will because

262
00:11:45,540 --> 00:11:47,779
arbitrary right to control both address

263
00:11:47,779 --> 00:11:49,500
interesting thing about this

264
00:11:49,500 --> 00:11:52,140
vulnerability we don't have an access to

265
00:11:52,140 --> 00:11:54,120
environment variable itself because it's

266
00:11:54,120 --> 00:11:56,820
not accessible in runtime but we have an

267
00:11:56,820 --> 00:11:59,220
access to the pointer in memory and

268
00:11:59,220 --> 00:12:01,500
basically it been very interesting

269
00:12:01,500 --> 00:12:03,420
discussions with the developers because

270
00:12:03,420 --> 00:12:05,820
they say oh how you can exploit that it

271
00:12:05,820 --> 00:12:08,700
is not available in runtime but we

272
00:12:08,700 --> 00:12:11,100
control the pointer no no it's not

273
00:12:11,100 --> 00:12:14,279
possible but actually after developing

274
00:12:14,279 --> 00:12:16,860
the PLC on that it's been more

275
00:12:16,860 --> 00:12:18,420
convincible

276
00:12:18,420 --> 00:12:22,140
so yeah let's take a look on the demo so

277
00:12:22,140 --> 00:12:24,779
basically we have

278
00:12:24,779 --> 00:12:26,579
uh

279
00:12:26,579 --> 00:12:28,980
as you can see on this demo basically it

280
00:12:28,980 --> 00:12:31,860
works very fast what we need to do we

281
00:12:31,860 --> 00:12:34,380
need to modify the pointer and actually

282
00:12:34,380 --> 00:12:38,220
trigger S3 sleep mode and then it's

283
00:12:38,220 --> 00:12:40,440
actually goes to the sleep mode and boom

284
00:12:40,440 --> 00:12:43,139
we have the code execution

285
00:12:43,139 --> 00:12:46,800
and this uh arbitrary right it's

286
00:12:46,800 --> 00:12:49,920
actually give you just a bit more than a

287
00:12:49,920 --> 00:12:54,240
two bytes of controllable value what we

288
00:12:54,240 --> 00:12:56,700
can do with the two bytes and we can see

289
00:12:56,700 --> 00:12:58,980
more about that because two bytes

290
00:12:58,980 --> 00:13:00,959
sometimes can bypass all the mitigations

291
00:13:00,959 --> 00:13:02,820
but it's just one vulnerability we

292
00:13:02,820 --> 00:13:04,800
discussing today

293
00:13:04,800 --> 00:13:08,279
um another one it's a platform we need

294
00:13:08,279 --> 00:13:10,680
Advanced premium which is also pretty

295
00:13:10,680 --> 00:13:12,660
interesting because actually it can

296
00:13:12,660 --> 00:13:15,240
bypass all authenticated variables from

297
00:13:15,240 --> 00:13:17,459
the system management model which is

298
00:13:17,459 --> 00:13:19,980
protected right so but basically if you

299
00:13:19,980 --> 00:13:22,440
have this code execution in system

300
00:13:22,440 --> 00:13:25,019
management mode basically all the

301
00:13:25,019 --> 00:13:28,260
variables are read only if they are

302
00:13:28,260 --> 00:13:31,200
authenticated and basically if you gain

303
00:13:31,200 --> 00:13:33,120
the Privileges to system management mode

304
00:13:33,120 --> 00:13:35,959
you can do that

305
00:13:37,019 --> 00:13:40,440
so also these such variables it is a

306
00:13:40,440 --> 00:13:42,899
physical attack Vector always available

307
00:13:42,899 --> 00:13:45,240
when you can just reprogram and these

308
00:13:45,240 --> 00:13:47,220
variables in persistent storage you can

309
00:13:47,220 --> 00:13:48,260
basically

310
00:13:48,260 --> 00:13:51,660
make Gain the persistent over constant

311
00:13:51,660 --> 00:13:54,839
code execution which I mentioned before

312
00:13:54,839 --> 00:14:00,060
again demo time most recent knock tiger

313
00:14:00,060 --> 00:14:01,019
Lake

314
00:14:01,019 --> 00:14:03,000
released in this year

315
00:14:03,000 --> 00:14:06,200
so boom

316
00:14:08,040 --> 00:14:10,800
yep

317
00:14:10,800 --> 00:14:13,320
but we have 12 of them we will go in in

318
00:14:13,320 --> 00:14:15,180
the more details and more details on

319
00:14:15,180 --> 00:14:18,500
that so this vulnerability SM

320
00:14:18,500 --> 00:14:22,380
bios elog this is actually also very

321
00:14:22,380 --> 00:14:24,720
interesting because this exactly

322
00:14:24,720 --> 00:14:28,139
functionality have been developed for

323
00:14:28,139 --> 00:14:30,060
providing additional Telemetry and

324
00:14:30,060 --> 00:14:33,120
exchange the information from smm to

325
00:14:33,120 --> 00:14:35,100
provide actually some debug data bring

326
00:14:35,100 --> 00:14:37,139
up data or whatever has been considered

327
00:14:37,139 --> 00:14:40,260
for developing for so but

328
00:14:40,260 --> 00:14:43,019
sometimes it's my handlers which is

329
00:14:43,019 --> 00:14:44,820
actually just for reminder it's callback

330
00:14:44,820 --> 00:14:46,800
functions from the firmware to operating

331
00:14:46,800 --> 00:14:48,779
system layer to hook some of the

332
00:14:48,779 --> 00:14:51,600
functionality from uh from the firmware

333
00:14:51,600 --> 00:14:54,779
to operating system and this callback

334
00:14:54,779 --> 00:14:57,600
functions sometimes have a very complex

335
00:14:57,600 --> 00:15:01,139
uh inherited pointers so and as we can

336
00:15:01,139 --> 00:15:04,620
see here with this case when basically

337
00:15:04,620 --> 00:15:08,100
we can have like a API func one and many

338
00:15:08,100 --> 00:15:11,820
others but this function API func one as

339
00:15:11,820 --> 00:15:15,060
you can see on this file is actually can

340
00:15:15,060 --> 00:15:16,880
be triggered some additional

341
00:15:16,880 --> 00:15:19,740
functionality over overflow when the

342
00:15:19,740 --> 00:15:21,240
attacker can actually just cause the

343
00:15:21,240 --> 00:15:23,220
classical memory corruption as we can

344
00:15:23,220 --> 00:15:25,920
see it's lead to the copingworm and with

345
00:15:25,920 --> 00:15:28,320
the controllable buffer and size it's

346
00:15:28,320 --> 00:15:30,180
actually given attacker opportunity to

347
00:15:30,180 --> 00:15:35,120
exploit it the link to POC is there

348
00:15:35,399 --> 00:15:39,899
but basically reference code issues it's

349
00:15:39,899 --> 00:15:41,279
uh

350
00:15:41,279 --> 00:15:44,639
it's it's happening and basically uh

351
00:15:44,639 --> 00:15:48,240
another reminder about a pretty similar

352
00:15:48,240 --> 00:15:49,980
vulnerability which we've discovered

353
00:15:49,980 --> 00:15:52,740
last year it's been in uh into reference

354
00:15:52,740 --> 00:15:56,339
code so if AP error log so basically

355
00:15:56,339 --> 00:15:59,160
it's pretty interesting one because also

356
00:15:59,160 --> 00:16:01,339
providing some of the

357
00:16:01,339 --> 00:16:03,720
additional functionality to collecting

358
00:16:03,720 --> 00:16:07,560
the data and providing this data in

359
00:16:07,560 --> 00:16:10,079
and we're unbearable and basically

360
00:16:10,079 --> 00:16:12,620
unfortunately it's been

361
00:16:12,620 --> 00:16:16,139
exploitable attack vector right demo

362
00:16:16,139 --> 00:16:18,660
time about the cement bios work all the

363
00:16:18,660 --> 00:16:20,579
smaller abilities as you can see it's

364
00:16:20,579 --> 00:16:24,899
pretty stable is working very reliable

365
00:16:24,899 --> 00:16:27,779
and it's actually very dangerous it's

366
00:16:27,779 --> 00:16:29,820
why it's very very important to fix them

367
00:16:29,820 --> 00:16:31,560
because it's often a lot of

368
00:16:31,560 --> 00:16:33,720
opportunities for the attacker to gain a

369
00:16:33,720 --> 00:16:37,139
lot of Privileges and persistence on a

370
00:16:37,139 --> 00:16:40,759
very privileged firmware modes

371
00:16:41,399 --> 00:16:44,459
another one overclock SMI Handler story

372
00:16:44,459 --> 00:16:48,420
and this one it's interesting because

373
00:16:48,420 --> 00:16:51,420
it's actually have a clear supply chain

374
00:16:51,420 --> 00:16:54,600
problem this overclock SMI Handler it

375
00:16:54,600 --> 00:16:56,279
connects with the module which is

376
00:16:56,279 --> 00:16:58,199
actually kind of like a legacy

377
00:16:58,199 --> 00:17:01,620
functionality for overclocking uh

378
00:17:01,620 --> 00:17:04,859
on the game CPUs but this on the gamer

379
00:17:04,859 --> 00:17:06,480
machines and basically this

380
00:17:06,480 --> 00:17:08,400
functionality

381
00:17:08,400 --> 00:17:09,359
um

382
00:17:09,359 --> 00:17:11,880
is actually been removed for a long time

383
00:17:11,880 --> 00:17:14,280
I think a few years ago from many of the

384
00:17:14,280 --> 00:17:16,140
platforms but unfortunately it's been

385
00:17:16,140 --> 00:17:19,679
appears on internet again and we noticed

386
00:17:19,679 --> 00:17:22,079
that on one of our client platform and

387
00:17:22,079 --> 00:17:24,720
like why it's actually freshly updated

388
00:17:24,720 --> 00:17:27,000
bias it's new platform why this

389
00:17:27,000 --> 00:17:29,100
functionality is available here and

390
00:17:29,100 --> 00:17:30,480
actually provides a vulnerable

391
00:17:30,480 --> 00:17:33,480
vulnerabilities someone just forget to

392
00:17:33,480 --> 00:17:35,940
change build script and actually older

393
00:17:35,940 --> 00:17:39,360
module unpaged and get to the newer

394
00:17:39,360 --> 00:17:42,120
firmware and it's clearly say shows the

395
00:17:42,120 --> 00:17:44,039
supply chain problem sometimes it can

396
00:17:44,039 --> 00:17:46,620
happen and it's also remind me American

397
00:17:46,620 --> 00:17:49,200
megatrans usbr key issue when the

398
00:17:49,200 --> 00:17:51,179
vulnerability is actually some of them

399
00:17:51,179 --> 00:17:53,640
being patched or the model been module

400
00:17:53,640 --> 00:17:55,919
been outdated but it's been constantly

401
00:17:55,919 --> 00:17:58,140
given new and new attack vectors as

402
00:17:58,140 --> 00:18:00,419
example we presented two new

403
00:18:00,419 --> 00:18:02,700
vulnerabilities at offensive con which

404
00:18:02,700 --> 00:18:05,280
has been found on usbrt with a pretty

405
00:18:05,280 --> 00:18:10,160
new hardware includes the servers

406
00:18:10,200 --> 00:18:11,580
so

407
00:18:11,580 --> 00:18:15,139
also actually

408
00:18:15,299 --> 00:18:18,059
interesting reminder when we have such

409
00:18:18,059 --> 00:18:23,460
vulnerability like overclocking it is

410
00:18:23,460 --> 00:18:26,100
good to see how we can actually create

411
00:18:26,100 --> 00:18:29,400
the list of deprecated modules which

412
00:18:29,400 --> 00:18:31,140
will be never available anymore in the

413
00:18:31,140 --> 00:18:33,240
runtime and the industry can actually

414
00:18:33,240 --> 00:18:36,780
just clean up this supply chain

415
00:18:36,780 --> 00:18:39,179
naturally I think that will be a good

416
00:18:39,179 --> 00:18:41,880
idea to have one if someone can actually

417
00:18:41,880 --> 00:18:43,740
from the device vendor's perspective to

418
00:18:43,740 --> 00:18:46,559
influence on that all right let's look

419
00:18:46,559 --> 00:18:49,440
on another one it's uh actually goes

420
00:18:49,440 --> 00:18:53,340
through smm get variable OC setup

421
00:18:53,340 --> 00:18:56,160
and as we can see here we have a

422
00:18:56,160 --> 00:19:00,000
signature to DBS uh on the top right so

423
00:19:00,000 --> 00:19:02,640
basically this bug for make it

424
00:19:02,640 --> 00:19:04,140
exploitable we need to keep the

425
00:19:04,140 --> 00:19:06,179
signature to actually bypass all the

426
00:19:06,179 --> 00:19:08,940
security checks and then

427
00:19:08,940 --> 00:19:11,100
basically we have a controllable pointer

428
00:19:11,100 --> 00:19:13,559
in RBX and uh

429
00:19:13,559 --> 00:19:16,260
we go to actually exploit it over the

430
00:19:16,260 --> 00:19:18,860
PCD value

431
00:19:20,220 --> 00:19:23,460
yep so let's do the demo

432
00:19:23,460 --> 00:19:25,260
and basically

433
00:19:25,260 --> 00:19:28,440
this vulnerability is actually changing

434
00:19:28,440 --> 00:19:31,500
the my CSP Global in the sptr variable

435
00:19:31,500 --> 00:19:33,419
so basically through the vulnerability

436
00:19:33,419 --> 00:19:35,340
in smm and

437
00:19:35,340 --> 00:19:36,720
this is

438
00:19:36,720 --> 00:19:38,640
pretty cool one because it's also can

439
00:19:38,640 --> 00:19:42,179
buy plus authenticated variables

440
00:19:42,179 --> 00:19:43,080
um

441
00:19:43,080 --> 00:19:44,700
one of the previous vulnerabilities

442
00:19:44,700 --> 00:19:46,140
which we've been talking about

443
00:19:46,140 --> 00:19:49,860
triggering this vulnerability over uh S3

444
00:19:49,860 --> 00:19:52,380
sleep mode it's been a constant

445
00:19:52,380 --> 00:19:55,440
discussion because some of some of the

446
00:19:55,440 --> 00:19:57,059
vendors been saying like this

447
00:19:57,059 --> 00:19:58,799
vulnerability is only exploitable on the

448
00:19:58,799 --> 00:20:01,080
client systems because the sleep mode is

449
00:20:01,080 --> 00:20:02,160
not available

450
00:20:02,160 --> 00:20:04,980
on the server machines but unfortunately

451
00:20:04,980 --> 00:20:07,919
it's not true because sleep mode can be

452
00:20:07,919 --> 00:20:10,980
uh it's completely implemented in

453
00:20:10,980 --> 00:20:13,020
software and separating systems you can

454
00:20:13,020 --> 00:20:15,480
use on Linux rtcp wake and some other

455
00:20:15,480 --> 00:20:18,840
functionality to actually uh do that on

456
00:20:18,840 --> 00:20:21,059
Windows and

457
00:20:21,059 --> 00:20:23,940
servers are impacted but it's actually

458
00:20:23,940 --> 00:20:26,520
needs some additional effort from that I

459
00:20:26,520 --> 00:20:28,679
care to call such functions to go to the

460
00:20:28,679 --> 00:20:30,000
sleep mode

461
00:20:30,000 --> 00:20:32,880
so yeah it's exactly what I told you so

462
00:20:32,880 --> 00:20:36,360
basically Linux and windows are just to

463
00:20:36,360 --> 00:20:39,120
configure in S3 functionality we can

464
00:20:39,120 --> 00:20:42,720
make it this exploitation successful on

465
00:20:42,720 --> 00:20:45,620
servers

466
00:20:45,840 --> 00:20:48,780
and basically

467
00:20:48,780 --> 00:20:51,000
saying this it's not exploitable for

468
00:20:51,000 --> 00:20:52,980
short wears it's actually the lazy

469
00:20:52,980 --> 00:20:55,740
disclosure for almost a month for the

470
00:20:55,740 --> 00:20:57,900
server machines from one of the vendors

471
00:20:57,900 --> 00:21:00,000
and I think basically collaborating

472
00:21:00,000 --> 00:21:01,980
better collaboration between the vendor

473
00:21:01,980 --> 00:21:03,840
and researcher and going more

474
00:21:03,840 --> 00:21:06,539
transparent way about like yes it is

475
00:21:06,539 --> 00:21:08,820
impactful it actually will be first of

476
00:21:08,820 --> 00:21:12,720
all protect better than ecosystem

477
00:21:12,720 --> 00:21:15,120
another vulnerability we are talking

478
00:21:15,120 --> 00:21:20,340
about uh uh binary we entered 22nd 15.

479
00:21:20,340 --> 00:21:23,760
so basically this one is actually

480
00:21:23,760 --> 00:21:27,360
arbitrary code execution in DXE and what

481
00:21:27,360 --> 00:21:30,299
interesting so basically this driver

482
00:21:30,299 --> 00:21:32,580
it's not privileged it's not smm system

483
00:21:32,580 --> 00:21:34,919
management mod driver and of course like

484
00:21:34,919 --> 00:21:37,440
it's given a high care opportunity to

485
00:21:37,440 --> 00:21:39,840
bypass manager earlier uh

486
00:21:39,840 --> 00:21:43,320
the secure boot but basically also it's

487
00:21:43,320 --> 00:21:46,140
open in other attack surface what if if

488
00:21:46,140 --> 00:21:48,000
we exploit in the vulnerability not

489
00:21:48,000 --> 00:21:50,220
directly from operating system what if

490
00:21:50,220 --> 00:21:52,440
we gain the code execution on Dixie

491
00:21:52,440 --> 00:21:55,080
phase and then exploit something from

492
00:21:55,080 --> 00:21:58,340
there and actually most of

493
00:21:58,340 --> 00:22:01,520
most of

494
00:22:02,940 --> 00:22:05,460
most of the security features been

495
00:22:05,460 --> 00:22:07,740
designed and not considering this as an

496
00:22:07,740 --> 00:22:09,900
attack surface and this example Intel

497
00:22:09,900 --> 00:22:12,000
biosguard I don't know guys if you

498
00:22:12,000 --> 00:22:14,039
everyone knows what the bias guard is

499
00:22:14,039 --> 00:22:17,039
but it's actually protecting the spyware

500
00:22:17,039 --> 00:22:19,500
storage from the changes

501
00:22:19,500 --> 00:22:21,780
so basically it's very important

502
00:22:21,780 --> 00:22:25,380
security feature against firmware

503
00:22:25,380 --> 00:22:28,260
implants but it can be easily disabled

504
00:22:28,260 --> 00:22:32,100
by one data buffer

505
00:22:32,100 --> 00:22:35,100
so also a reminder all vulnerabilities

506
00:22:35,100 --> 00:22:38,220
we presented it is actually will be not

507
00:22:38,220 --> 00:22:40,559
protecting from secure cores it will be

508
00:22:40,559 --> 00:22:42,960
not protected with drtm's srtms and

509
00:22:42,960 --> 00:22:45,900
other stuff because TPMS are not

510
00:22:45,900 --> 00:22:49,020
extending their PCR in runtime where all

511
00:22:49,020 --> 00:22:51,120
these measurement is start right and

512
00:22:51,120 --> 00:22:52,740
remote code of gestation for these

513
00:22:52,740 --> 00:22:54,480
devices will be completely blind for

514
00:22:54,480 --> 00:22:57,179
such exploitation

515
00:22:57,179 --> 00:23:00,000
but let's talk about the Automation and

516
00:23:00,000 --> 00:23:02,760
this is very important piece why it is

517
00:23:02,760 --> 00:23:05,760
repeatable failures because it's a lot

518
00:23:05,760 --> 00:23:07,500
of vulnerabilities existing the space

519
00:23:07,500 --> 00:23:09,480
and I think it's need to be fixed of

520
00:23:09,480 --> 00:23:11,039
course like we already committed to like

521
00:23:11,039 --> 00:23:13,620
a system and presented the E5 Explorer

522
00:23:13,620 --> 00:23:16,140
uh plugin a few years ago on black hat

523
00:23:16,140 --> 00:23:18,960
Europe and also

524
00:23:18,960 --> 00:23:20,940
we developed the whole approach with

525
00:23:20,940 --> 00:23:23,340
white wet static analysis and under

526
00:23:23,340 --> 00:23:25,020
constraint symbolic execution to find

527
00:23:25,020 --> 00:23:30,059
such problems so just an example if

528
00:23:30,059 --> 00:23:33,299
go with static analysis without some

529
00:23:33,299 --> 00:23:36,059
partial emulation or actual symbolic

530
00:23:36,059 --> 00:23:38,880
execution for Discovery it actually can

531
00:23:38,880 --> 00:23:40,740
cause some of the false positives in

532
00:23:40,740 --> 00:23:43,260
some cases and if I explorer actually

533
00:23:43,260 --> 00:23:45,120
contain automatic Discovery for

534
00:23:45,120 --> 00:23:46,919
vulnerabilities with the git variables

535
00:23:46,919 --> 00:23:50,280
just use it on your firmware for finding

536
00:23:50,280 --> 00:23:52,860
it before releasing to the customers

537
00:23:52,860 --> 00:23:56,220
but how we can actually can improve it

538
00:23:56,220 --> 00:23:58,919
and what the limitations are about the

539
00:23:58,919 --> 00:24:02,000
current approaches it is first of all

540
00:24:02,000 --> 00:24:04,919
numbers of false positives it's

541
00:24:04,919 --> 00:24:06,260
basically

542
00:24:06,260 --> 00:24:08,580
most of them based on very

543
00:24:08,580 --> 00:24:11,880
straightforward pattern matching and we

544
00:24:11,880 --> 00:24:14,100
just create a lot of limitations and our

545
00:24:14,100 --> 00:24:15,960
approach is actually leveraged in my

546
00:24:15,960 --> 00:24:18,659
semantic properties and lightweight

547
00:24:18,659 --> 00:24:20,940
content code patterns for actually

548
00:24:20,940 --> 00:24:23,760
develop the Shakers to detect it so it's

549
00:24:23,760 --> 00:24:25,919
just like literally a pipeline for the

550
00:24:25,919 --> 00:24:28,159
analysis don't want to spend much time

551
00:24:28,159 --> 00:24:30,720
interesting point it is intermediate

552
00:24:30,720 --> 00:24:32,280
representation which is actually used

553
00:24:32,280 --> 00:24:34,380
for symbolic execution and semantic

554
00:24:34,380 --> 00:24:36,840
annotations there

555
00:24:36,840 --> 00:24:40,080
so it's how the lifting uh for uh

556
00:24:40,080 --> 00:24:43,559
customers I say form it looks like

557
00:24:43,559 --> 00:24:47,159
and here's a sneak peek about semantic

558
00:24:47,159 --> 00:24:49,140
annotations actually it's exactly what

559
00:24:49,140 --> 00:24:51,840
the firmware hand does for detections

560
00:24:51,840 --> 00:24:54,780
it's open source uh technology uh just

561
00:24:54,780 --> 00:24:56,820
look on our GitHub

562
00:24:56,820 --> 00:25:00,480
but it goes on top of some intermediate

563
00:25:00,480 --> 00:25:03,360
representation to actually power this

564
00:25:03,360 --> 00:25:06,918
Visa semantic annotations

565
00:25:07,140 --> 00:25:10,020
and static Checkers it's actually pretty

566
00:25:10,020 --> 00:25:12,179
straightforward we just actually add in

567
00:25:12,179 --> 00:25:14,159
some additional Rule and runtime for

568
00:25:14,159 --> 00:25:16,460
kind of like a detecting such problems

569
00:25:16,460 --> 00:25:20,580
and it's augmented with a code flow and

570
00:25:20,580 --> 00:25:22,799
code flow properties and data flow

571
00:25:22,799 --> 00:25:25,260
dependencies and properties as well and

572
00:25:25,260 --> 00:25:29,960
we have intercall properties there

573
00:25:31,380 --> 00:25:34,380
so basically we are instrumenting this

574
00:25:34,380 --> 00:25:36,240
intermediate representation to simulate

575
00:25:36,240 --> 00:25:38,880
execution from there right so and I

576
00:25:38,880 --> 00:25:40,919
think actually about the symbolic

577
00:25:40,919 --> 00:25:42,360
execution for finding some

578
00:25:42,360 --> 00:25:45,179
vulnerabilities it's being covered also

579
00:25:45,179 --> 00:25:48,779
in my talk in 2016 actually when I've

580
00:25:48,779 --> 00:25:50,760
been working for Intel Corporation we

581
00:25:50,760 --> 00:25:53,400
developed on cmex the whole framework

582
00:25:53,400 --> 00:25:55,860
for finding such vulnerabilities but

583
00:25:55,860 --> 00:25:58,799
looks like it's been not used much after

584
00:25:58,799 --> 00:26:01,220
I left

585
00:26:02,220 --> 00:26:03,720
all right

586
00:26:03,720 --> 00:26:06,620
another pay phase vulnerability it's

587
00:26:06,620 --> 00:26:12,360
2016 14 uh to 20 22nd 014 uh get

588
00:26:12,360 --> 00:26:13,919
variable leading to arbitrary code

589
00:26:13,919 --> 00:26:16,380
execution and

590
00:26:16,380 --> 00:26:19,320
this one is very important to remember

591
00:26:19,320 --> 00:26:21,900
because this one we used for actual

592
00:26:21,900 --> 00:26:25,400
Intel ppam bypass

593
00:26:26,279 --> 00:26:29,340
and also it's been fun as you can see

594
00:26:29,340 --> 00:26:33,659
here it's actually been found uh over

595
00:26:33,659 --> 00:26:36,299
our framework right with a symbolic

596
00:26:36,299 --> 00:26:40,320
execution another demo it's a get

597
00:26:40,320 --> 00:26:42,360
variable another one but in the system

598
00:26:42,360 --> 00:26:45,840
management mode so basically it's detect

599
00:26:45,840 --> 00:26:50,539
uh detected yep

600
00:26:51,900 --> 00:26:54,720
and buffer overflow classical with a

601
00:26:54,720 --> 00:26:58,200
comb buffer constrained so lead to the

602
00:26:58,200 --> 00:27:00,480
copy ma'am so symbolic execution is

603
00:27:00,480 --> 00:27:03,059
pretty effective as you can see here

604
00:27:03,059 --> 00:27:07,020
anyway so first of all I wanted to thank

605
00:27:07,020 --> 00:27:09,000
you the p-shirt from American Mega

606
00:27:09,000 --> 00:27:12,360
Trends to actually doing a hard job to

607
00:27:12,360 --> 00:27:13,799
patching all the vulnerabilities we

608
00:27:13,799 --> 00:27:17,340
discovered and actually uh related to

609
00:27:17,340 --> 00:27:19,940
American megatrans and

610
00:27:19,940 --> 00:27:23,760
help protect the ecosystem

611
00:27:23,760 --> 00:27:27,000
so another cool business goals to the HP

612
00:27:27,000 --> 00:27:28,440
preserved which has been constantly

613
00:27:28,440 --> 00:27:30,600
working with the binary team on the

614
00:27:30,600 --> 00:27:33,240
different disclosures and it's been a

615
00:27:33,240 --> 00:27:35,539
hard work from the team to actually

616
00:27:35,539 --> 00:27:38,580
make all these products are secure and

617
00:27:38,580 --> 00:27:41,580
all the advisors are public now

618
00:27:41,580 --> 00:27:44,460
right but let's focus on Intel ppam and

619
00:27:44,460 --> 00:27:46,740
NCM internals so

620
00:27:46,740 --> 00:27:50,700
um istem and pfam it's actually the most

621
00:27:50,700 --> 00:27:52,740
fancy mitigations and system management

622
00:27:52,740 --> 00:27:55,380
mode it's get applied for most streets

623
00:27:55,380 --> 00:27:57,299
and times right so basically what's

624
00:27:57,299 --> 00:28:00,799
happening on P1 it's

625
00:28:00,799 --> 00:28:05,220
provide isolation for every SMI Handler

626
00:28:05,220 --> 00:28:07,440
from each other previously when you

627
00:28:07,440 --> 00:28:09,779
exploit one SMI Handler you get access

628
00:28:09,779 --> 00:28:12,000
to the flat memory space and you can

629
00:28:12,000 --> 00:28:15,179
actually influence on any others after

630
00:28:15,179 --> 00:28:17,700
the PPM get introduced it's actually

631
00:28:17,700 --> 00:28:21,299
pretty close with on arm trusted

632
00:28:21,299 --> 00:28:24,240
execution environment does it's

633
00:28:24,240 --> 00:28:26,760
isolating different easy Ebbs it's the

634
00:28:26,760 --> 00:28:28,679
same thing with the semi handlers should

635
00:28:28,679 --> 00:28:31,140
happen right

636
00:28:31,140 --> 00:28:33,120
how the people work it's actually can

637
00:28:33,120 --> 00:28:35,220
break on three different phases first

638
00:28:35,220 --> 00:28:37,380
phase is of course like kind of like

639
00:28:37,380 --> 00:28:40,740
understand if people will be enabled and

640
00:28:40,740 --> 00:28:43,080
the right platform properties are

641
00:28:43,080 --> 00:28:45,179
available second it's kind of like

642
00:28:45,179 --> 00:28:47,640
initializing the Monitor and then get

643
00:28:47,640 --> 00:28:50,159
modules loaded and policies

644
00:28:50,159 --> 00:28:53,580
so it's uh how actually

645
00:28:53,580 --> 00:28:58,200
uh the polishes are get checked and

646
00:28:58,200 --> 00:29:00,659
loaded

647
00:29:00,659 --> 00:29:05,220
up policies are here about

648
00:29:05,220 --> 00:29:07,260
this one is actually important you can

649
00:29:07,260 --> 00:29:10,620
see here it's checking the ppam image

650
00:29:10,620 --> 00:29:13,140
before loading to parse all the policies

651
00:29:13,140 --> 00:29:16,140
and all these features are undocumented

652
00:29:16,140 --> 00:29:18,600
it's actually been reverse engineered by

653
00:29:18,600 --> 00:29:20,940
binary team and provide all this

654
00:29:20,940 --> 00:29:22,980
information available to research

655
00:29:22,980 --> 00:29:26,580
community so basically what's happening

656
00:29:26,580 --> 00:29:30,600
check ppam image it's actually just

657
00:29:30,600 --> 00:29:35,039
about like msec smram Hub will be break

658
00:29:35,039 --> 00:29:37,740
Department civilization right so if we

659
00:29:37,740 --> 00:29:41,100
have able to single byte right to the

660
00:29:41,100 --> 00:29:44,220
memory space from msec smram we can

661
00:29:44,220 --> 00:29:46,440
change some data storage which is

662
00:29:46,440 --> 00:29:47,899
actually will be break

663
00:29:47,899 --> 00:29:50,159
initialization and the feature will be

664
00:29:50,159 --> 00:29:52,559
disabled I remember the slide at the

665
00:29:52,559 --> 00:29:54,419
beginning with the boot guard that's

666
00:29:54,419 --> 00:29:56,580
exactly the same type of vulnerabilities

667
00:29:56,580 --> 00:29:59,039
can be used for bypassing such security

668
00:29:59,039 --> 00:30:00,299
features

669
00:30:00,299 --> 00:30:02,159
and

670
00:30:02,159 --> 00:30:05,700
ppam manifest saved in the configuration

671
00:30:05,700 --> 00:30:08,640
table and basically it can be received

672
00:30:08,640 --> 00:30:10,260
by operating system component and

673
00:30:10,260 --> 00:30:12,179
runtime easily

674
00:30:12,179 --> 00:30:15,360
so another one installation and

675
00:30:15,360 --> 00:30:17,460
configuration for the policies on access

676
00:30:17,460 --> 00:30:20,520
basically every SMI Handler have a

677
00:30:20,520 --> 00:30:22,799
configuration for initialization of

678
00:30:22,799 --> 00:30:25,559
access to input output ports MSR

679
00:30:25,559 --> 00:30:27,679
registers and some other policies

680
00:30:27,679 --> 00:30:29,880
actually it's pretty interesting

681
00:30:29,880 --> 00:30:32,460
technology and I think actually it is a

682
00:30:32,460 --> 00:30:34,500
game changer in general but it need to

683
00:30:34,500 --> 00:30:37,919
be more securely designed because on the

684
00:30:37,919 --> 00:30:39,899
specifications looks better than actual

685
00:30:39,899 --> 00:30:41,760
implementations

686
00:30:41,760 --> 00:30:44,760
let's talk about the attack surface and

687
00:30:44,760 --> 00:30:47,039
we use as a target one of the most

688
00:30:47,039 --> 00:30:50,940
recent HP platforms and basically

689
00:30:50,940 --> 00:30:54,299
this white book I think it's based on

690
00:30:54,299 --> 00:30:56,700
the tiger Lake CPU which is very new

691
00:30:56,700 --> 00:30:59,100
it's 11 generation

692
00:30:59,100 --> 00:31:02,659
and it's how actually this picture

693
00:31:02,659 --> 00:31:05,279
summarized a whole block of the

694
00:31:05,279 --> 00:31:07,220
information we've been talking before

695
00:31:07,220 --> 00:31:10,679
and how this connects to the ppam bypass

696
00:31:10,679 --> 00:31:14,100
so we have a pre-e5 vulnerabilities

697
00:31:14,100 --> 00:31:16,919
which is can influence to some data

698
00:31:16,919 --> 00:31:19,799
storage which is here actually showed as

699
00:31:19,799 --> 00:31:24,059
a hopes data and then bypass the who

700
00:31:24,059 --> 00:31:25,580
configuration

701
00:31:25,580 --> 00:31:28,919
loading for the people boom

702
00:31:28,919 --> 00:31:33,360
we have a CPU smm variable which is

703
00:31:33,360 --> 00:31:35,220
actually contains some configurational

704
00:31:35,220 --> 00:31:37,140
data and as we can see

705
00:31:37,140 --> 00:31:39,240
into reference implementation which is

706
00:31:39,240 --> 00:31:42,960
available on GitHub like POC so it is

707
00:31:42,960 --> 00:31:46,820
kind of like it looks different

708
00:31:47,220 --> 00:31:49,200
so and

709
00:31:49,200 --> 00:31:52,980
also this Hub data it's accessible from

710
00:31:52,980 --> 00:31:55,440
the operating system layer but basically

711
00:31:55,440 --> 00:31:58,080
we can go through the pi to kind of like

712
00:31:58,080 --> 00:32:00,720
a bypasses

713
00:32:00,720 --> 00:32:04,740
so I will be move a bit faster just to

714
00:32:04,740 --> 00:32:06,659
able to cover very important information

715
00:32:06,659 --> 00:32:10,260
on the next slide so

716
00:32:10,260 --> 00:32:12,960
people manifest

717
00:32:12,960 --> 00:32:15,480
it's actually all the data about the

718
00:32:15,480 --> 00:32:18,299
policies contained there and of course

719
00:32:18,299 --> 00:32:20,820
it should be signed it and attestation

720
00:32:20,820 --> 00:32:22,520
should work for this manifest

721
00:32:22,520 --> 00:32:25,620
unfortunately what we discover all the

722
00:32:25,620 --> 00:32:28,380
certificates across multiple vendors and

723
00:32:28,380 --> 00:32:31,260
platforms they've been outdated and it's

724
00:32:31,260 --> 00:32:33,360
just a bit more details on the

725
00:32:33,360 --> 00:32:34,860
certificate actually the reverse

726
00:32:34,860 --> 00:32:37,200
Engineers is and all the parses will be

727
00:32:37,200 --> 00:32:39,480
available a bit later

728
00:32:39,480 --> 00:32:42,360
under embargo now

729
00:32:42,360 --> 00:32:45,000
and people manifest actually outdated

730
00:32:45,000 --> 00:32:46,860
not on a single platform as I mentioned

731
00:32:46,860 --> 00:32:49,380
we checked a lot of different platforms

732
00:32:49,380 --> 00:32:51,779
probably like 2020 it's been one of the

733
00:32:51,779 --> 00:32:54,440
first BPM configurations and uh

734
00:32:54,440 --> 00:32:57,480
implementations and basically it's why

735
00:32:57,480 --> 00:32:59,279
it's not been much available in the wild

736
00:32:59,279 --> 00:33:01,799
but we check it around like a 200

737
00:33:01,799 --> 00:33:03,200
systems

738
00:33:03,200 --> 00:33:06,179
and all of them actually outdated with

739
00:33:06,179 --> 00:33:08,100
the previous year certificate what's

740
00:33:08,100 --> 00:33:11,820
that mean attestation for this feature

741
00:33:11,820 --> 00:33:13,940
it just doesn't work or never been used

742
00:33:13,940 --> 00:33:19,039
so uh I think this certificate is being

743
00:33:19,039 --> 00:33:22,019
kind of embedded to the reference

744
00:33:22,019 --> 00:33:24,720
implementation from Silicon vendor and

745
00:33:24,720 --> 00:33:26,580
then shipped to the device manufacturers

746
00:33:26,580 --> 00:33:28,019
and they just use this reference

747
00:33:28,019 --> 00:33:30,539
implementation in place and never get

748
00:33:30,539 --> 00:33:33,299
updated this root certificate for

749
00:33:33,299 --> 00:33:33,960
um

750
00:33:33,960 --> 00:33:40,080
for uh attestation and I think is this

751
00:33:40,080 --> 00:33:42,059
certificate is actually issued by Intel

752
00:33:42,059 --> 00:33:46,559
Corporation and I think it also shows a

753
00:33:46,559 --> 00:33:48,179
very important supply chain problem

754
00:33:48,179 --> 00:33:51,000
which is not don't need any offense

755
00:33:51,000 --> 00:33:54,600
exploitation so basically uh this kind

756
00:33:54,600 --> 00:33:57,120
of like a problem with certificate

757
00:33:57,120 --> 00:33:59,880
validity valid after right all the

758
00:33:59,880 --> 00:34:02,039
verification will be failed but the code

759
00:34:02,039 --> 00:34:05,159
are assigned if we will be in bad such

760
00:34:05,159 --> 00:34:08,940
thing or component to newer firmware

761
00:34:08,940 --> 00:34:11,040
basically it will be failed to load

762
00:34:11,040 --> 00:34:14,280
right and also the ppam features right

763
00:34:14,280 --> 00:34:17,460
now it's available only the most uh

764
00:34:17,460 --> 00:34:22,320
expensive uh Intel CPUs with vipro so

765
00:34:22,320 --> 00:34:23,699
basically

766
00:34:23,699 --> 00:34:26,580
that's interesting way which is goals to

767
00:34:26,580 --> 00:34:28,560
bypass the PPM from the different

768
00:34:28,560 --> 00:34:30,719
perspective without exploitation we show

769
00:34:30,719 --> 00:34:33,839
you some with an exploitation and here

770
00:34:33,839 --> 00:34:36,179
is without without supply chain failure

771
00:34:36,179 --> 00:34:37,859
from the vendor

772
00:34:37,859 --> 00:34:40,560
but also thank you for Intel PCR we've

773
00:34:40,560 --> 00:34:43,260
been a few months very hard working with

774
00:34:43,260 --> 00:34:45,359
them closely to actually make all the

775
00:34:45,359 --> 00:34:48,000
fixes available and

776
00:34:48,000 --> 00:34:50,639
as a conclusion I think it's important

777
00:34:50,639 --> 00:34:53,699
to remember so this feature should be

778
00:34:53,699 --> 00:34:56,460
properly configured by the vendors and

779
00:34:56,460 --> 00:34:59,099
consistent with an ecosystem

780
00:34:59,099 --> 00:35:01,700
again static storage it's actually

781
00:35:01,700 --> 00:35:04,980
contain a lot of important data which it

782
00:35:04,980 --> 00:35:07,200
should be considered as a potential

783
00:35:07,200 --> 00:35:09,420
attack surface and actually open the

784
00:35:09,420 --> 00:35:12,240
attacker for possibilities for an easy

785
00:35:12,240 --> 00:35:15,420
bypasses and also

786
00:35:15,420 --> 00:35:17,820
it's going to be modified something in

787
00:35:17,820 --> 00:35:20,099
memory and Lead arbitrary code execution

788
00:35:20,099 --> 00:35:23,280
gaining during the early boot right and

789
00:35:23,280 --> 00:35:26,400
this actually arose attacker to gain

790
00:35:26,400 --> 00:35:27,900
much more interesting security

791
00:35:27,900 --> 00:35:30,900
boundaries and attack the platforms

792
00:35:30,900 --> 00:35:33,780
and just one more reminder to the

793
00:35:33,780 --> 00:35:36,480
industry complexity it is an enemy of

794
00:35:36,480 --> 00:35:38,780
security

795
00:35:39,660 --> 00:35:42,180
so all

796
00:35:42,180 --> 00:35:45,300
actually firmware controls for detection

797
00:35:45,300 --> 00:35:47,160
such vulnerabilities at scale the

798
00:35:47,160 --> 00:35:48,839
scanner everything is open sourced

799
00:35:48,839 --> 00:35:50,820
available on the GitHub and all the

800
00:35:50,820 --> 00:35:53,400
advice advisories are public so please

801
00:35:53,400 --> 00:35:55,920
enjoy looking on it and fixing these

802
00:35:55,920 --> 00:35:57,420
problems at scale

803
00:35:57,420 --> 00:35:58,480
thank you very much

804
00:35:58,480 --> 00:36:06,860
[Applause]

805
00:36:06,860 --> 00:36:09,969
[Music]

806
00:36:12,079 --> 00:36:13,810
thank you

807
00:36:13,810 --> 00:36:16,900
[Music]

