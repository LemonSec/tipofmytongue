1
00:00:01,730 --> 00:00:03,720
[Music]

2
00:00:03,720 --> 00:00:06,720
foreign

3
00:00:11,760 --> 00:00:14,099
thanks for the introduction

4
00:00:14,099 --> 00:00:17,940
let's dive in immediately so I think

5
00:00:17,940 --> 00:00:19,020
everyone knows this talk is about

6
00:00:19,020 --> 00:00:20,340
starlink

7
00:00:20,340 --> 00:00:22,740
I think most of you know how starlink

8
00:00:22,740 --> 00:00:24,480
works and what it does but it's a

9
00:00:24,480 --> 00:00:27,060
satellite internet system so as with any

10
00:00:27,060 --> 00:00:28,859
satellite-based system you have a space

11
00:00:28,859 --> 00:00:31,019
segment and an earth segment

12
00:00:31,019 --> 00:00:33,239
in the space segment we have satellites

13
00:00:33,239 --> 00:00:35,160
in this case the satellites might

14
00:00:35,160 --> 00:00:37,200
communicate with each other over laser

15
00:00:37,200 --> 00:00:38,280
links

16
00:00:38,280 --> 00:00:41,040
and basically the idea is that the user

17
00:00:41,040 --> 00:00:43,079
terminal will send its data up to a

18
00:00:43,079 --> 00:00:44,100
satellite

19
00:00:44,100 --> 00:00:45,660
and then the satellite sends it back

20
00:00:45,660 --> 00:00:48,960
down to an earth-based Gateway and then

21
00:00:48,960 --> 00:00:50,640
in that way you can connect to the

22
00:00:50,640 --> 00:00:52,200
internet

23
00:00:52,200 --> 00:00:54,840
now for some reason SpaceX wouldn't give

24
00:00:54,840 --> 00:00:56,460
me a satellite

25
00:00:56,460 --> 00:00:59,219
so we had to buy a user terminal

26
00:00:59,219 --> 00:01:01,020
and that's what this stock is about the

27
00:01:01,020 --> 00:01:03,000
stock is about the user terminal and the

28
00:01:03,000 --> 00:01:04,739
idea here is if you can attack the user

29
00:01:04,739 --> 00:01:07,439
terminal you can access more of the

30
00:01:07,439 --> 00:01:09,060
network infrastructure that you cannot

31
00:01:09,060 --> 00:01:11,400
access without first attacking the user

32
00:01:11,400 --> 00:01:12,840
terminal

33
00:01:12,840 --> 00:01:15,000
so we bought one we put it up on the

34
00:01:15,000 --> 00:01:17,520
roof of our University building I did a

35
00:01:17,520 --> 00:01:18,780
speed test

36
00:01:18,780 --> 00:01:20,580
but that's about it because at that

37
00:01:20,580 --> 00:01:21,659
point we have another internet

38
00:01:21,659 --> 00:01:24,420
connection and we already had a good one

39
00:01:24,420 --> 00:01:26,040
so I started looking around at what

40
00:01:26,040 --> 00:01:27,960
other people had done

41
00:01:27,960 --> 00:01:29,759
and there had been a few tear Downs like

42
00:01:29,759 --> 00:01:31,920
Mike on space at the tear down cancers

43
00:01:31,920 --> 00:01:35,159
down the signal pad did a more in-depth

44
00:01:35,159 --> 00:01:38,220
analysis of the RF Hardware

45
00:01:38,220 --> 00:01:39,960
and then that's basically the point

46
00:01:39,960 --> 00:01:42,180
where I started working on my dish and

47
00:01:42,180 --> 00:01:43,920
while I was working on that a few other

48
00:01:43,920 --> 00:01:46,680
videos came out going offline did a tear

49
00:01:46,680 --> 00:01:49,380
down and he went uh really quite ham at

50
00:01:49,380 --> 00:01:51,180
the dish he used the blow torch to open

51
00:01:51,180 --> 00:01:52,439
it up

52
00:01:52,439 --> 00:01:56,040
oh like gotkov did a tear down of his

53
00:01:56,040 --> 00:01:58,200
Wi-Fi routers and did a basic analysis

54
00:01:58,200 --> 00:01:59,939
of it this is all documented in a nice

55
00:01:59,939 --> 00:02:01,079
blog post

56
00:02:01,079 --> 00:02:03,840
and I recently um then married a theorem

57
00:02:03,840 --> 00:02:05,399
of his second generation struggling

58
00:02:05,399 --> 00:02:08,160
terminal and he also made a 3D printable

59
00:02:08,160 --> 00:02:11,599
case to replace the Pokemon

60
00:02:12,540 --> 00:02:14,400
but basically what was lacking for me

61
00:02:14,400 --> 00:02:16,020
and all of these things is that they

62
00:02:16,020 --> 00:02:17,400
none of them really went into the

63
00:02:17,400 --> 00:02:18,840
security of the device and that's the

64
00:02:18,840 --> 00:02:21,599
part that I was obviously interested in

65
00:02:21,599 --> 00:02:23,220
I already mentioned that there have been

66
00:02:23,220 --> 00:02:25,379
multiple Hardware revisions of this user

67
00:02:25,379 --> 00:02:27,120
terminal but I think very few people

68
00:02:27,120 --> 00:02:29,220
realize how many they actually have been

69
00:02:29,220 --> 00:02:30,480
in the past

70
00:02:30,480 --> 00:02:32,700
so the circular user terminal the one we

71
00:02:32,700 --> 00:02:34,739
have here on stage as well is about 60

72
00:02:34,739 --> 00:02:37,260
centimeters in diameter it's meant for

73
00:02:37,260 --> 00:02:39,300
residential use but as you can see there

74
00:02:39,300 --> 00:02:41,160
have been a lot of Hardware visions of

75
00:02:41,160 --> 00:02:43,080
this specific dish

76
00:02:43,080 --> 00:02:45,000
you can also see that there has been an

77
00:02:45,000 --> 00:02:48,360
SOC code 3 and SOC code for meaning that

78
00:02:48,360 --> 00:02:50,160
there have been at least two silicon

79
00:02:50,160 --> 00:02:52,140
revisions of the main system on ship in

80
00:02:52,140 --> 00:02:53,700
this dish

81
00:02:53,700 --> 00:02:55,379
then we had the square usage terminal

82
00:02:55,379 --> 00:02:57,360
which is slightly smaller and square

83
00:02:57,360 --> 00:02:59,340
that again there have been at least

84
00:02:59,340 --> 00:03:01,560
three revisions of the hardware

85
00:03:01,560 --> 00:03:03,239
finally we have the high performance

86
00:03:03,239 --> 00:03:05,700
units meant for more business and other

87
00:03:05,700 --> 00:03:08,220
uses again they have already been two

88
00:03:08,220 --> 00:03:10,019
collector Innovations of those

89
00:03:10,019 --> 00:03:12,420
finally the transceivers there's not

90
00:03:12,420 --> 00:03:15,180
that much publicly known about these so

91
00:03:15,180 --> 00:03:16,560
I know from the code that has at least

92
00:03:16,560 --> 00:03:18,900
two revisions and the idea will be that

93
00:03:18,900 --> 00:03:20,340
you have a transceiver unit with an

94
00:03:20,340 --> 00:03:22,620
external antenna

95
00:03:22,620 --> 00:03:24,480
for this talk we will focus on the

96
00:03:24,480 --> 00:03:26,760
circular user terminal I specifically

97
00:03:26,760 --> 00:03:29,099
worked on I have two Proto 2 and F2 Port

98
00:03:29,099 --> 00:03:31,800
of 4. which means that I did the attack

99
00:03:31,800 --> 00:03:35,819
on the system on ship code 3 anchored 4.

100
00:03:35,819 --> 00:03:38,099
all of the other externals use a cut for

101
00:03:38,099 --> 00:03:40,140
SOC so the attack that I present today

102
00:03:40,140 --> 00:03:43,220
works on all of these

103
00:03:43,440 --> 00:03:44,640
um so of course we started with the

104
00:03:44,640 --> 00:03:46,680
theorem ourselves we moved the plastic

105
00:03:46,680 --> 00:03:48,480
shell of the user terminal and then you

106
00:03:48,480 --> 00:03:51,360
are gate it with this enormous metal

107
00:03:51,360 --> 00:03:54,180
shield there's a small cutout that shows

108
00:03:54,180 --> 00:03:56,159
you three connectors the first one is

109
00:03:56,159 --> 00:03:57,900
the power of ethernet connector then

110
00:03:57,900 --> 00:04:00,060
there's a connector for the motors so

111
00:04:00,060 --> 00:04:02,220
normally this dish is on a stand that

112
00:04:02,220 --> 00:04:04,080
allows it to orient itself towards the

113
00:04:04,080 --> 00:04:05,340
satellite

114
00:04:05,340 --> 00:04:07,739
then the final connector is unpopulated

115
00:04:07,739 --> 00:04:10,439
and it contains a uart interface

116
00:04:10,439 --> 00:04:12,360
now those of you that have done heart

117
00:04:12,360 --> 00:04:13,680
attack stuff before knowing that if you

118
00:04:13,680 --> 00:04:14,939
see it you are connected it's always

119
00:04:14,939 --> 00:04:16,858
exciting

120
00:04:16,858 --> 00:04:18,600
because oftentimes you find an easier

121
00:04:18,600 --> 00:04:20,399
route shell on the device

122
00:04:20,399 --> 00:04:23,100
now that wasn't the case for this SpaceX

123
00:04:23,100 --> 00:04:24,060
terminal

124
00:04:24,060 --> 00:04:26,580
so we can see that it does use u-boot

125
00:04:26,580 --> 00:04:29,040
but the input is set to null def meaning

126
00:04:29,040 --> 00:04:30,660
that whatever input you provide over the

127
00:04:30,660 --> 00:04:31,979
CL connector

128
00:04:31,979 --> 00:04:34,680
it won't accept any inputs so you cannot

129
00:04:34,680 --> 00:04:36,060
just get to the u-boot command line

130
00:04:36,060 --> 00:04:37,919
interface and change kernel command line

131
00:04:37,919 --> 00:04:40,520
arguments

132
00:04:40,680 --> 00:04:42,479
when you allow the dish to completely

133
00:04:42,479 --> 00:04:44,520
boot you are greeted with a login prompt

134
00:04:44,520 --> 00:04:46,380
and as you can see it prints development

135
00:04:46,380 --> 00:04:49,259
login enabled no because obviously the

136
00:04:49,259 --> 00:04:50,759
hardware you buy is not the development

137
00:04:50,759 --> 00:04:51,600
Hardware

138
00:04:51,600 --> 00:04:53,280
this also means that whatever you will

139
00:04:53,280 --> 00:04:56,100
enter in this user using login forms you

140
00:04:56,100 --> 00:04:58,680
won't be able to log in

141
00:04:58,680 --> 00:05:00,360
so this meant basically that we had to

142
00:05:00,360 --> 00:05:01,919
go deeper we had to remove the metal

143
00:05:01,919 --> 00:05:04,020
shield from the board to see what's on

144
00:05:04,020 --> 00:05:04,979
the inside

145
00:05:04,979 --> 00:05:06,720
as I said it's it's really quite big

146
00:05:06,720 --> 00:05:09,360
it's 60 centimeters diameter which is

147
00:05:09,360 --> 00:05:10,860
definitely the largest board I had

148
00:05:10,860 --> 00:05:12,780
worked on

149
00:05:12,780 --> 00:05:14,639
so some areas that you can identify on

150
00:05:14,639 --> 00:05:17,280
this board as a GPS receiver chip

151
00:05:17,280 --> 00:05:19,680
there's an area related to power of the

152
00:05:19,680 --> 00:05:20,820
ethernet

153
00:05:20,820 --> 00:05:23,520
there's a part of the circuit that

154
00:05:23,520 --> 00:05:25,740
generates clocks for both SOC and other

155
00:05:25,740 --> 00:05:27,539
RF Hardware

156
00:05:27,539 --> 00:05:29,280
and then we have the area that contains

157
00:05:29,280 --> 00:05:32,100
the soc and dram and emmc that's the

158
00:05:32,100 --> 00:05:33,600
part we're most interested in for this

159
00:05:33,600 --> 00:05:34,380
talk

160
00:05:34,380 --> 00:05:36,060
and then of course there's one area of

161
00:05:36,060 --> 00:05:37,740
this dish that I haven't marked and

162
00:05:37,740 --> 00:05:39,720
that's all the other stuff

163
00:05:39,720 --> 00:05:41,220
and all the other stuff looks like this

164
00:05:41,220 --> 00:05:43,919
so in the middle we have a digital beam

165
00:05:43,919 --> 00:05:46,919
former I see which is made by SDM and

166
00:05:46,919 --> 00:05:48,900
it's code name Shiraz

167
00:05:48,900 --> 00:05:51,600
each of these beam formats has 16

168
00:05:51,600 --> 00:05:54,060
front-end modules connected to it which

169
00:05:54,060 --> 00:05:56,460
are called named pulsar

170
00:05:56,460 --> 00:05:58,639
now while I was working on one of these

171
00:05:58,639 --> 00:06:02,160
dishes I got a bit too excited I broke

172
00:06:02,160 --> 00:06:06,120
one SpaceX was nice enough to replace it

173
00:06:06,120 --> 00:06:08,160
but I didn't want to just throw it away

174
00:06:08,160 --> 00:06:10,500
so I desolded a few of these beam

175
00:06:10,500 --> 00:06:12,660
formats and from that modules and I sent

176
00:06:12,660 --> 00:06:14,460
them off to John McMaster

177
00:06:14,460 --> 00:06:16,500
it's almost nice enough to decapsulate

178
00:06:16,500 --> 00:06:18,419
these chips for me and image them

179
00:06:18,419 --> 00:06:20,520
and starting today I think you can all

180
00:06:20,520 --> 00:06:22,440
view these chips online and really zoom

181
00:06:22,440 --> 00:06:24,360
in them zoom into them in like higher

182
00:06:24,360 --> 00:06:25,440
resolution

183
00:06:25,440 --> 00:06:27,840
another thing you can see like some

184
00:06:27,840 --> 00:06:29,160
basic things you can see here like on

185
00:06:29,160 --> 00:06:31,020
the left we have the the beam former I

186
00:06:31,020 --> 00:06:32,940
see and you can see that there's 16

187
00:06:32,940 --> 00:06:34,979
parts that we beat and these are

188
00:06:34,979 --> 00:06:36,479
basically the 16 channels of the

189
00:06:36,479 --> 00:06:39,060
beamformer the poster chip or the

190
00:06:39,060 --> 00:06:40,680
front-end module on the right we can see

191
00:06:40,680 --> 00:06:43,080
that it's basically symmetrical meaning

192
00:06:43,080 --> 00:06:45,539
that there's a receive and transmit pad

193
00:06:45,539 --> 00:06:48,139
for this chip

194
00:06:51,240 --> 00:06:52,800
then the area that you're most

195
00:06:52,800 --> 00:06:55,380
interested in so the biggest chip here

196
00:06:55,380 --> 00:06:56,940
is the system on chip

197
00:06:56,940 --> 00:07:00,660
it's a custom quad-core arm cortex a53

198
00:07:00,660 --> 00:07:02,639
made by SDM

199
00:07:02,639 --> 00:07:03,900
as I said there have been multiple

200
00:07:03,900 --> 00:07:06,000
silicon revisions of this chip and this

201
00:07:06,000 --> 00:07:08,280
one is code named Gatson

202
00:07:08,280 --> 00:07:09,780
we can also see that there's a secure

203
00:07:09,780 --> 00:07:10,580
element

204
00:07:10,580 --> 00:07:12,840
at the end of the talk I will give more

205
00:07:12,840 --> 00:07:14,280
explanation what the secure element is

206
00:07:14,280 --> 00:07:15,419
used for

207
00:07:15,419 --> 00:07:19,620
then finally or C in green is a four

208
00:07:19,620 --> 00:07:22,680
gigabyte emmc chip this is basically a

209
00:07:22,680 --> 00:07:25,080
fancy SD card you could say

210
00:07:25,080 --> 00:07:27,599
and then there's eight gigabits of DDR3

211
00:07:27,599 --> 00:07:29,039
memory

212
00:07:29,039 --> 00:07:31,139
one thing you can see here is that the

213
00:07:31,139 --> 00:07:34,199
main system on ship is in a flip chip

214
00:07:34,199 --> 00:07:36,060
styled package with an integrated heat

215
00:07:36,060 --> 00:07:38,940
spreader so a metal can on top if you

216
00:07:38,940 --> 00:07:41,280
remove this metal can you give it to the

217
00:07:41,280 --> 00:07:43,500
back side of the chip die and from the

218
00:07:43,500 --> 00:07:44,699
back side of the die you can also make

219
00:07:44,699 --> 00:07:46,440
an image of the chip so this is an image

220
00:07:46,440 --> 00:07:48,660
we made in our lab and so it's a two

221
00:07:48,660 --> 00:07:51,419
substrate image it's at 50x

222
00:07:51,419 --> 00:07:54,180
magnification and this is an interesting

223
00:07:54,180 --> 00:07:55,919
picture for this as a physical attacker

224
00:07:55,919 --> 00:07:57,720
because it allows us to narrow down

225
00:07:57,720 --> 00:07:59,759
certain indexing regions

226
00:07:59,759 --> 00:08:01,620
so for certain physical attacks you want

227
00:08:01,620 --> 00:08:04,620
to precisely Target a specific area of a

228
00:08:04,620 --> 00:08:07,319
chip and here for example it's very

229
00:08:07,319 --> 00:08:09,720
obvious where the force CPU cores are in

230
00:08:09,720 --> 00:08:12,360
this in this picture

231
00:08:12,360 --> 00:08:13,919
um the full resolution picture will also

232
00:08:13,919 --> 00:08:16,639
be available online

233
00:08:17,400 --> 00:08:19,259
so the next step for me was to extract

234
00:08:19,259 --> 00:08:21,060
the firmware from this dish to look at

235
00:08:21,060 --> 00:08:22,800
the software and maybe find an easy

236
00:08:22,800 --> 00:08:24,960
vulnerability to get into the into the

237
00:08:24,960 --> 00:08:27,479
dish and to do that I had to extract the

238
00:08:27,479 --> 00:08:29,819
emmc memory there's several ways of

239
00:08:29,819 --> 00:08:32,399
doing this normally I would extract the

240
00:08:32,399 --> 00:08:34,260
chip from the board and then dump it

241
00:08:34,260 --> 00:08:35,279
that way

242
00:08:35,279 --> 00:08:36,779
I didn't want to do that in this case

243
00:08:36,779 --> 00:08:38,159
because I was afraid of breaking the

244
00:08:38,159 --> 00:08:40,500
board so I solved basically wires to all

245
00:08:40,500 --> 00:08:42,659
of these small test points hooked up a

246
00:08:42,659 --> 00:08:44,820
logic analyzer and he started the dish

247
00:08:44,820 --> 00:08:47,160
and I'm from this logic analyzer phase

248
00:08:47,160 --> 00:08:50,339
it's very easy to spot which test points

249
00:08:50,339 --> 00:08:52,500
you need so to read an emmc chip you

250
00:08:52,500 --> 00:08:56,760
only need a clock command and d0 line so

251
00:08:56,760 --> 00:08:58,380
if you want to do this at home you now

252
00:08:58,380 --> 00:09:01,019
know which test points to use

253
00:09:01,019 --> 00:09:02,880
as I said this is basically an SD card

254
00:09:02,880 --> 00:09:04,980
meaning that you can also use an SD card

255
00:09:04,980 --> 00:09:07,380
reader to read out this chip in this

256
00:09:07,380 --> 00:09:09,779
case I had to attach a level shifter

257
00:09:09,779 --> 00:09:13,800
because the EMC is working at 1.8 volts

258
00:09:13,800 --> 00:09:14,940
um

259
00:09:14,940 --> 00:09:16,440
what I would recommend you do if you

260
00:09:16,440 --> 00:09:17,640
want to hit create this at home is that

261
00:09:17,640 --> 00:09:19,920
you order a low voltage EMC adapter by

262
00:09:19,920 --> 00:09:22,380
the exploit TX it's only 12 and it's

263
00:09:22,380 --> 00:09:24,120
very convenient to have that's what I

264
00:09:24,120 --> 00:09:26,519
use today but I was still impatient and

265
00:09:26,519 --> 00:09:28,860
that's why I made the other setup

266
00:09:28,860 --> 00:09:30,899
so once we have a binary dump of the EMC

267
00:09:30,899 --> 00:09:33,420
we can start pulling it apart into the

268
00:09:33,420 --> 00:09:34,740
different pieces

269
00:09:34,740 --> 00:09:36,779
the GPL code that's available on GitHub

270
00:09:36,779 --> 00:09:38,399
is nice for this because it contains all

271
00:09:38,399 --> 00:09:40,320
of the offsets and sizes

272
00:09:40,320 --> 00:09:41,760
so you can see that there are trusted

273
00:09:41,760 --> 00:09:44,279
firmware back boot stages these are

274
00:09:44,279 --> 00:09:46,019
firmware image packages that you can

275
00:09:46,019 --> 00:09:48,180
extract to the flip tool there's a

276
00:09:48,180 --> 00:09:49,980
flattened UI mh3

277
00:09:49,980 --> 00:09:52,380
you can extract a dump image then there

278
00:09:52,380 --> 00:09:55,500
are a few extra partitions around time a

279
00:09:55,500 --> 00:09:58,140
calibration that is unique for each dish

280
00:09:58,140 --> 00:10:01,200
an EDR quick station and Dish config and

281
00:10:01,200 --> 00:10:02,760
as you can see all of these partitions

282
00:10:02,760 --> 00:10:05,580
are protected cryptographically so they

283
00:10:05,580 --> 00:10:07,560
have either varieties signed on looks

284
00:10:07,560 --> 00:10:10,140
encrypted and of course the toaster

285
00:10:10,140 --> 00:10:11,880
firmware boot stages also Implement

286
00:10:11,880 --> 00:10:13,620
secure boot

287
00:10:13,620 --> 00:10:15,360
so this means that we cannot easily

288
00:10:15,360 --> 00:10:17,339
override our own firmware to the emmc

289
00:10:17,339 --> 00:10:19,500
chip and get a root shell that would

290
00:10:19,500 --> 00:10:21,300
have been too easy if you want more

291
00:10:21,300 --> 00:10:22,680
information how you can extract this

292
00:10:22,680 --> 00:10:24,660
firmware there's a Blog Post online that

293
00:10:24,660 --> 00:10:27,420
explains it in more detail

294
00:10:27,420 --> 00:10:29,720
I often get questions about the firmware

295
00:10:29,720 --> 00:10:32,220
and how certain things of the system

296
00:10:32,220 --> 00:10:33,120
work

297
00:10:33,120 --> 00:10:34,860
so one thing people have asked in the

298
00:10:34,860 --> 00:10:37,019
past is how does the thermal management

299
00:10:37,019 --> 00:10:39,120
work like how hot can it get before it

300
00:10:39,120 --> 00:10:41,040
shuts off if you've done the firmware

301
00:10:41,040 --> 00:10:42,779
there's a very nice file with a lot of

302
00:10:42,779 --> 00:10:44,880
comments that nicely explains how the

303
00:10:44,880 --> 00:10:47,339
thermal management is implemented you

304
00:10:47,339 --> 00:10:49,860
can also find all of the RF channels

305
00:10:49,860 --> 00:10:52,500
that are being used the frequencies they

306
00:10:52,500 --> 00:10:54,779
use and the up and downlink channels and

307
00:10:54,779 --> 00:10:56,820
how they are prepared you can also find

308
00:10:56,820 --> 00:10:59,459
the frequencies of the lasers that they

309
00:10:59,459 --> 00:11:01,140
are using for the satellites because

310
00:11:01,140 --> 00:11:03,180
part of the code base between the user's

311
00:11:03,180 --> 00:11:06,360
terminal and the satellite is shift

312
00:11:06,360 --> 00:11:08,760
another thing we can see from the code

313
00:11:08,760 --> 00:11:10,980
is that they collect a lot of telemetry

314
00:11:10,980 --> 00:11:12,779
about what you're doing with your user

315
00:11:12,779 --> 00:11:13,800
terminal

316
00:11:13,800 --> 00:11:15,600
I know that some people have mounted a

317
00:11:15,600 --> 00:11:17,820
user terminal on top of a car I've even

318
00:11:17,820 --> 00:11:19,440
heard of someone mounting it in the

319
00:11:19,440 --> 00:11:22,200
plane you can be sure that SpaceX knows

320
00:11:22,200 --> 00:11:23,940
if you did this

321
00:11:23,940 --> 00:11:26,579
another thing that SpaceX does is they

322
00:11:26,579 --> 00:11:28,019
keep track of their development Hardware

323
00:11:28,019 --> 00:11:29,519
because of course they don't want to

324
00:11:29,519 --> 00:11:30,660
development works we have to get in

325
00:11:30,660 --> 00:11:32,100
their own hands

326
00:11:32,100 --> 00:11:33,720
and the idea here is that if a dish

327
00:11:33,720 --> 00:11:36,540
boots up and it will report when it's

328
00:11:36,540 --> 00:11:39,540
locate basically if it's within a

329
00:11:39,540 --> 00:11:41,519
development geofence everything is fine

330
00:11:41,519 --> 00:11:43,260
if it's outside of one of these

331
00:11:43,260 --> 00:11:46,800
geofences SpaceX likely gets an alert

332
00:11:46,800 --> 00:11:48,660
most of these geofences make a lot of

333
00:11:48,660 --> 00:11:50,640
sense like a parking lot next to this

334
00:11:50,640 --> 00:11:53,160
Basics building some of them don't make

335
00:11:53,160 --> 00:11:54,899
a lot of sense like the picture on the

336
00:11:54,899 --> 00:11:56,459
right is the connections Museum in

337
00:11:56,459 --> 00:11:58,920
Seattle which for some reason

338
00:11:58,920 --> 00:12:01,740
is allowed to have development Hardware

339
00:12:01,740 --> 00:12:03,779
there's also some real implications in

340
00:12:03,779 --> 00:12:06,600
the code like there's a villa and

341
00:12:06,600 --> 00:12:08,399
somewhere in the middle of nowhere I

342
00:12:08,399 --> 00:12:09,779
don't know who it belongs to so I'm not

343
00:12:09,779 --> 00:12:11,820
going to share the location

344
00:12:11,820 --> 00:12:13,860
if you zoom in far enough on Google Maps

345
00:12:13,860 --> 00:12:15,300
you can actually see that they are

346
00:12:15,300 --> 00:12:16,920
likely some music terminals on top of

347
00:12:16,920 --> 00:12:18,779
that parking lot so if someone really

348
00:12:18,779 --> 00:12:21,240
wants development archway that might be

349
00:12:21,240 --> 00:12:23,640
the place to go

350
00:12:23,640 --> 00:12:25,320
now that we have the firmware we can

351
00:12:25,320 --> 00:12:26,339
also start looking at how the login

352
00:12:26,339 --> 00:12:28,560
prompt works and it's clear that

353
00:12:28,560 --> 00:12:30,300
basically the dish will print

354
00:12:30,300 --> 00:12:32,640
development login enabled then it does a

355
00:12:32,640 --> 00:12:33,360
check

356
00:12:33,360 --> 00:12:35,160
if it's development doctor it will print

357
00:12:35,160 --> 00:12:37,140
yes and set a root password

358
00:12:37,140 --> 00:12:39,420
if it's not then no password is set and

359
00:12:39,420 --> 00:12:41,399
you're unable to log in

360
00:12:41,399 --> 00:12:43,260
now if we go down a bit more to the

361
00:12:43,260 --> 00:12:45,480
physical level this is a logic analyzer

362
00:12:45,480 --> 00:12:47,760
capture of the uart output you can see

363
00:12:47,760 --> 00:12:49,860
it prints development login enabled and

364
00:12:49,860 --> 00:12:51,779
it's a two millisecond Gap and then it

365
00:12:51,779 --> 00:12:53,579
says no

366
00:12:53,579 --> 00:12:55,200
now it will be very interesting for us

367
00:12:55,200 --> 00:12:56,880
of course if we can have this dish

368
00:12:56,880 --> 00:12:59,279
believe it is development Hardware

369
00:12:59,279 --> 00:13:00,779
and the way we're going to try and do

370
00:13:00,779 --> 00:13:02,820
that is using fault injection

371
00:13:02,820 --> 00:13:04,800
so we're going to inject a fault

372
00:13:04,800 --> 00:13:07,139
somewhere in between the first print and

373
00:13:07,139 --> 00:13:08,760
the second print and hope that we get

374
00:13:08,760 --> 00:13:10,620
looking

375
00:13:10,620 --> 00:13:12,420
and if we're talking about fault

376
00:13:12,420 --> 00:13:14,339
injection with the flip chip package

377
00:13:14,339 --> 00:13:16,139
that exposes the die back site we

378
00:13:16,139 --> 00:13:18,120
usually start thinking about quite fancy

379
00:13:18,120 --> 00:13:19,680
techniques like laser fault injection

380
00:13:19,680 --> 00:13:22,200
body bias injection or electromagnetic

381
00:13:22,200 --> 00:13:23,700
fault injection

382
00:13:23,700 --> 00:13:26,399
but this board is very big so this is

383
00:13:26,399 --> 00:13:28,380
the equipment we have in our lab with

384
00:13:28,380 --> 00:13:30,839
the dish next to it the first picture is

385
00:13:30,839 --> 00:13:31,740
a

386
00:13:31,740 --> 00:13:34,139
micro positioning table that we would

387
00:13:34,139 --> 00:13:35,880
use for emfi

388
00:13:35,880 --> 00:13:37,560
but as you can see the box is way too

389
00:13:37,560 --> 00:13:39,480
big to have a mount on this thing

390
00:13:39,480 --> 00:13:41,820
on the right we have a box where a laser

391
00:13:41,820 --> 00:13:43,440
fault injection setup is in and as you

392
00:13:43,440 --> 00:13:45,000
can see the the dish wouldn't even fit

393
00:13:45,000 --> 00:13:46,380
in that box

394
00:13:46,380 --> 00:13:48,300
and of course if you would want to do

395
00:13:48,300 --> 00:13:49,620
this attack in a real world scenario

396
00:13:49,620 --> 00:13:51,480
where the dish is mounted on a roof um

397
00:13:51,480 --> 00:13:53,579
yeah getting a laser setup on a roof

398
00:13:53,579 --> 00:13:55,019
with an oscilloscope and so on it's not

399
00:13:55,019 --> 00:13:57,000
very very practical

400
00:13:57,000 --> 00:13:58,860
another issue we faced is that there are

401
00:13:58,860 --> 00:14:00,839
no open development kits so we had to do

402
00:14:00,839 --> 00:14:03,540
the attack Black Box we didn't have data

403
00:14:03,540 --> 00:14:05,880
sheets we didn't have open samples we

404
00:14:05,880 --> 00:14:08,100
didn't even have a similar product from

405
00:14:08,100 --> 00:14:11,880
SD to try and do this attack on first

406
00:14:11,880 --> 00:14:13,560
so there's a few more attacks we could

407
00:14:13,560 --> 00:14:15,600
try we could try messing with the clock

408
00:14:15,600 --> 00:14:17,519
but with a system on chip there's likely

409
00:14:17,519 --> 00:14:21,560
to be plls that inhibit clock glitches

410
00:14:21,560 --> 00:14:24,420
line but what I ended up choosing is

411
00:14:24,420 --> 00:14:26,940
voltage fault injection

412
00:14:26,940 --> 00:14:28,620
so initially we started with a

413
00:14:28,620 --> 00:14:30,420
relatively simple setup we connected the

414
00:14:30,420 --> 00:14:32,700
cheapest player light to the correct

415
00:14:32,700 --> 00:14:35,519
voltage supply of the SOC I left all of

416
00:14:35,519 --> 00:14:36,839
the decoupling capacitors on the board

417
00:14:36,839 --> 00:14:40,019
because when an SOC is completely booted

418
00:14:40,019 --> 00:14:42,240
up it is quite vulnerable to voltage

419
00:14:42,240 --> 00:14:43,860
glitches because it is already being

420
00:14:43,860 --> 00:14:46,380
pushed to its limits basically

421
00:14:46,380 --> 00:14:48,060
chip Espress can of course be controlled

422
00:14:48,060 --> 00:14:50,880
from python where we can set an offset

423
00:14:50,880 --> 00:14:52,800
and a glitch with and we have an

424
00:14:52,800 --> 00:14:54,240
external oscilloscope that's not shown

425
00:14:54,240 --> 00:14:56,399
on the slide that triggers on the uart

426
00:14:56,399 --> 00:14:58,199
outputs

427
00:14:58,199 --> 00:15:00,240
so this is a one result that you can get

428
00:15:00,240 --> 00:15:02,639
so dish pins development login enabled

429
00:15:02,639 --> 00:15:05,579
and yes but at the same time because the

430
00:15:05,579 --> 00:15:07,260
no point to the reference in the kernel

431
00:15:07,260 --> 00:15:09,180
and the entire system becomes caching

432
00:15:09,180 --> 00:15:10,440
down

433
00:15:10,440 --> 00:15:12,000
now occasionally you get really lucky

434
00:15:12,000 --> 00:15:13,860
and at pins development log enabled yes

435
00:15:13,860 --> 00:15:15,839
you can log in with the username root

436
00:15:15,839 --> 00:15:17,579
and a password falcon

437
00:15:17,579 --> 00:15:19,079
and then your route and you can play

438
00:15:19,079 --> 00:15:21,240
around with the system

439
00:15:21,240 --> 00:15:22,980
so this was nice because it showed that

440
00:15:22,980 --> 00:15:24,839
the soc is susceptible to voltage

441
00:15:24,839 --> 00:15:26,880
glitching the attack was easily

442
00:15:26,880 --> 00:15:29,699
reproducible by SpaceX even

443
00:15:29,699 --> 00:15:33,360
and it's quite easy to inject some fault

444
00:15:33,360 --> 00:15:35,699
but most of them are undesirable and

445
00:15:35,699 --> 00:15:37,560
this also meant that the attack is quite

446
00:15:37,560 --> 00:15:40,079
unreliable we only get one attempt every

447
00:15:40,079 --> 00:15:42,120
12 seconds because we have to reboot the

448
00:15:42,120 --> 00:15:45,600
dash to try one attempt and it was hello

449
00:15:45,600 --> 00:15:47,220
success rate so it would take many many

450
00:15:47,220 --> 00:15:50,160
hours before you get lucky

451
00:15:50,160 --> 00:15:52,019
so I decided to move up into the boot

452
00:15:52,019 --> 00:15:54,540
chain and go to the earlier boot stages

453
00:15:54,540 --> 00:15:57,959
so this SOC implements argument

454
00:15:57,959 --> 00:16:00,360
meaning that it has a home bootloader as

455
00:16:00,360 --> 00:16:02,160
well as some e-fuse memory

456
00:16:02,160 --> 00:16:05,220
this if you start among other things the

457
00:16:05,220 --> 00:16:07,199
root of trust public key and the home

458
00:16:07,199 --> 00:16:09,240
bootloader will use that hood of thrust

459
00:16:09,240 --> 00:16:11,579
public key to verify the next stages

460
00:16:11,579 --> 00:16:14,040
that are stored on the emmc

461
00:16:14,040 --> 00:16:15,899
so in more detail the wrong bootloader

462
00:16:15,899 --> 00:16:19,380
or bl1 will load BL2 or the certificate

463
00:16:19,380 --> 00:16:22,260
of BL2 from the emmc the certificate in

464
00:16:22,260 --> 00:16:24,959
this case was a custom format made by SD

465
00:16:24,959 --> 00:16:27,720
it contains a hash digest and a

466
00:16:27,720 --> 00:16:30,740
signature over that Digest

467
00:16:30,740 --> 00:16:33,300
will verify the certificate so it will

468
00:16:33,300 --> 00:16:35,820
verify that the signature is valid

469
00:16:35,820 --> 00:16:38,399
then it loads the next stage firmware

470
00:16:38,399 --> 00:16:40,079
the firmware itself

471
00:16:40,079 --> 00:16:42,120
and computes the hash and compares the

472
00:16:42,120 --> 00:16:45,060
hash it computes matches the one stored

473
00:16:45,060 --> 00:16:46,560
in the certificate

474
00:16:46,560 --> 00:16:48,000
now if you've done something like this

475
00:16:48,000 --> 00:16:49,740
before I guess you see that there's two

476
00:16:49,740 --> 00:16:52,199
very obvious moments in time where you

477
00:16:52,199 --> 00:16:55,320
would try to glitch the soc so one is

478
00:16:55,320 --> 00:16:56,940
the signature verification the second

479
00:16:56,940 --> 00:17:00,360
one is the hash comparison

480
00:17:00,360 --> 00:17:01,920
now because this is a completely Black

481
00:17:01,920 --> 00:17:03,720
Box scenario you have really no clue

482
00:17:03,720 --> 00:17:05,280
where in time you have to insert the

483
00:17:05,280 --> 00:17:07,199
glitch and which of these two positions

484
00:17:07,199 --> 00:17:09,839
might work best for you so it boils down

485
00:17:09,839 --> 00:17:11,819
to a lot of different attempts basically

486
00:17:11,819 --> 00:17:13,799
until you get lucky

487
00:17:13,799 --> 00:17:16,020
this is the setup we made to experiment

488
00:17:16,020 --> 00:17:17,579
with these things

489
00:17:17,579 --> 00:17:19,260
a few things you can do in a black box

490
00:17:19,260 --> 00:17:21,179
scenario of course I'm trying to boot a

491
00:17:21,179 --> 00:17:22,679
dish with an invalid signature an

492
00:17:22,679 --> 00:17:24,599
invalid hash or an invalid firmware

493
00:17:24,599 --> 00:17:27,900
image you can also try to glitch a valid

494
00:17:27,900 --> 00:17:29,880
certificate into resulting in a

495
00:17:29,880 --> 00:17:32,100
signature verification failure and all

496
00:17:32,100 --> 00:17:33,660
of these things combined help you to

497
00:17:33,660 --> 00:17:35,940
narrow down the right location in time

498
00:17:35,940 --> 00:17:38,340
and the other glitch parameters

499
00:17:38,340 --> 00:17:40,140
in the top right of this slide you can

500
00:17:40,140 --> 00:17:42,299
see an em Probe on top of the die this

501
00:17:42,299 --> 00:17:44,039
is the same corner where the first CPU

502
00:17:44,039 --> 00:17:46,500
cores are located and this gives us some

503
00:17:46,500 --> 00:17:48,240
side Channel information

504
00:17:48,240 --> 00:17:50,160
I also removed most of the coupling

505
00:17:50,160 --> 00:17:52,500
capacitors in this case because the when

506
00:17:52,500 --> 00:17:54,179
the home bootload is executing only a

507
00:17:54,179 --> 00:17:55,620
single chorus running and it's running

508
00:17:55,620 --> 00:17:57,360
at a lower clock frequency and this

509
00:17:57,360 --> 00:17:59,039
makes it less susceptible to voltage

510
00:17:59,039 --> 00:18:00,960
glitches

511
00:18:00,960 --> 00:18:02,880
this is a side Channel case with the

512
00:18:02,880 --> 00:18:04,860
serial output in black and the side

513
00:18:04,860 --> 00:18:07,200
channel in blue

514
00:18:07,200 --> 00:18:09,780
um at this stage and time basically the

515
00:18:09,780 --> 00:18:12,360
dish is printing I have loaded the

516
00:18:12,360 --> 00:18:13,919
certificate and I'm going to start

517
00:18:13,919 --> 00:18:15,720
checking the signatures

518
00:18:15,720 --> 00:18:18,299
and you can see that once the last byte

519
00:18:18,299 --> 00:18:20,580
of UF data is loaded into the buffer it

520
00:18:20,580 --> 00:18:23,160
will already start the signature

521
00:18:23,160 --> 00:18:25,620
verification and this is very useful

522
00:18:25,620 --> 00:18:27,059
side Channel information versus the

523
00:18:27,059 --> 00:18:28,799
attacker because occasionally when you

524
00:18:28,799 --> 00:18:30,240
want to skip

525
00:18:30,240 --> 00:18:32,280
a certain function it's easier to glitch

526
00:18:32,280 --> 00:18:34,620
at the start of the function and using

527
00:18:34,620 --> 00:18:35,940
the site Channel information we know

528
00:18:35,940 --> 00:18:37,200
that this computation is already

529
00:18:37,200 --> 00:18:39,600
starting when I saw serial data coming

530
00:18:39,600 --> 00:18:41,039
out

531
00:18:41,039 --> 00:18:43,020
so what we found is if we glitch at the

532
00:18:43,020 --> 00:18:44,700
exact start of the signature

533
00:18:44,700 --> 00:18:46,980
verification that we can skip it and

534
00:18:46,980 --> 00:18:48,480
dial

535
00:18:48,480 --> 00:18:49,799
so

536
00:18:49,799 --> 00:18:51,780
basically the dish prints I loaded the

537
00:18:51,780 --> 00:18:53,700
certificate I'm going to check the

538
00:18:53,700 --> 00:18:56,059
signature and immediately after it says

539
00:18:56,059 --> 00:18:58,260
signature is valid I'm going to continue

540
00:18:58,260 --> 00:19:00,780
booting and you can also obviously see

541
00:19:00,780 --> 00:19:02,820
from this side Channel taste that the

542
00:19:02,820 --> 00:19:06,240
entire operation is being skipped

543
00:19:06,240 --> 00:19:08,280
this was nice because like this means

544
00:19:08,280 --> 00:19:10,080
that we can execute our own second stage

545
00:19:10,080 --> 00:19:11,880
bootloader and we can start reading

546
00:19:11,880 --> 00:19:13,980
memory regions and this way I figured

547
00:19:13,980 --> 00:19:16,440
out that um the home bootloader is

548
00:19:16,440 --> 00:19:18,240
mapped at the address shown on the slide

549
00:19:18,240 --> 00:19:20,700
and it is readable from the second stage

550
00:19:20,700 --> 00:19:22,980
so this means we can dump the wrong

551
00:19:22,980 --> 00:19:26,039
bootload and start analyzing it

552
00:19:26,039 --> 00:19:28,020
I emulated the wrong bootloader in

553
00:19:28,020 --> 00:19:30,120
unicorn engine and tried fussing it with

554
00:19:30,120 --> 00:19:31,500
AFL plus plus

555
00:19:31,500 --> 00:19:33,240
but in this way I didn't find any

556
00:19:33,240 --> 00:19:35,160
software vulnerability and of course the

557
00:19:35,160 --> 00:19:36,419
software vulnerability would have been

558
00:19:36,419 --> 00:19:38,880
nice to make the attack more scalable

559
00:19:38,880 --> 00:19:40,860
I also tried simulating my fault attack

560
00:19:40,860 --> 00:19:43,500
in unicorn engine and I did this by

561
00:19:43,500 --> 00:19:44,640
simulating

562
00:19:44,640 --> 00:19:47,100
a basic fault model that assumes a

563
00:19:47,100 --> 00:19:48,660
single instruction skip

564
00:19:48,660 --> 00:19:50,460
it turns out that a single instruction

565
00:19:50,460 --> 00:19:53,220
skip wouldn't actually result in a

566
00:19:53,220 --> 00:19:55,080
successful glitch and this is because

567
00:19:55,080 --> 00:19:56,400
there are counter measures in

568
00:19:56,400 --> 00:19:58,080
implemented in the home bootloaded to

569
00:19:58,080 --> 00:20:00,419
prevent this type of attack

570
00:20:00,419 --> 00:20:02,340
so obviously the

571
00:20:02,340 --> 00:20:04,559
counter measures are implemented or not

572
00:20:04,559 --> 00:20:06,059
using the correct model for this

573
00:20:06,059 --> 00:20:07,620
specific Hardware

574
00:20:07,620 --> 00:20:10,559
so here's an example of when your glitch

575
00:20:10,559 --> 00:20:12,840
would be detected by

576
00:20:12,840 --> 00:20:14,940
a fault injection counting measures

577
00:20:14,940 --> 00:20:17,100
so the first stage of the first part of

578
00:20:17,100 --> 00:20:20,100
this output is basically this thing it

579
00:20:20,100 --> 00:20:21,840
has loaded the certificate and that it

580
00:20:21,840 --> 00:20:24,240
is starting a signature verification and

581
00:20:24,240 --> 00:20:25,740
in this case a certificate that we

582
00:20:25,740 --> 00:20:28,260
loaded onto the emmc memory contains an

583
00:20:28,260 --> 00:20:30,059
invalid signature so the signature

584
00:20:30,059 --> 00:20:31,919
should fail

585
00:20:31,919 --> 00:20:34,440
once we glitch the dish it continues

586
00:20:34,440 --> 00:20:36,299
booting it loads a second stage it

587
00:20:36,299 --> 00:20:38,820
verifies the hash but then at the final

588
00:20:38,820 --> 00:20:41,820
end it says authentication error

589
00:20:41,820 --> 00:20:43,260
and this is because I have certain

590
00:20:43,260 --> 00:20:45,059
control flow checks implemented in the

591
00:20:45,059 --> 00:20:48,780
codes that basically um cut our glitch

592
00:20:48,780 --> 00:20:50,640
there's some more information on the

593
00:20:50,640 --> 00:20:52,080
slide about how this is implemented

594
00:20:52,080 --> 00:20:54,240
exactly but I don't have a lot of time

595
00:20:54,240 --> 00:20:57,200
to go into this today

596
00:20:57,419 --> 00:20:59,340
an issue we face now is that we didn't

597
00:20:59,340 --> 00:21:01,320
find a software vulnerability in our own

598
00:21:01,320 --> 00:21:03,059
bootloader meaning that we would have to

599
00:21:03,059 --> 00:21:04,620
glitch the one booth order every single

600
00:21:04,620 --> 00:21:07,080
time we reboot the dish

601
00:21:07,080 --> 00:21:08,580
and the Annoying product here is that we

602
00:21:08,580 --> 00:21:10,260
have to remove the decoupling capacitors

603
00:21:10,260 --> 00:21:12,419
to get the glitch to work on the wrong

604
00:21:12,419 --> 00:21:14,460
bootload but if you remove too many

605
00:21:14,460 --> 00:21:16,679
decoupling capacitors you can no longer

606
00:21:16,679 --> 00:21:18,480
boot Linux because the system is way too

607
00:21:18,480 --> 00:21:19,559
unstable

608
00:21:19,559 --> 00:21:21,660
so I basically have to figure out a way

609
00:21:21,660 --> 00:21:24,179
to switch on and off the coupling

610
00:21:24,179 --> 00:21:26,640
capacitors at will this took a lot of

611
00:21:26,640 --> 00:21:28,320
manual experiments with different

612
00:21:28,320 --> 00:21:29,780
mosfets

613
00:21:29,780 --> 00:21:32,220
different yeah high side or low side

614
00:21:32,220 --> 00:21:33,840
switching different gate voltages most

615
00:21:33,840 --> 00:21:36,240
of the drivers capacity sizes

616
00:21:36,240 --> 00:21:38,460
the way I was timing the glitch and so

617
00:21:38,460 --> 00:21:40,919
on so the first picture on the left is a

618
00:21:40,919 --> 00:21:42,539
hand soldered attempt that didn't work

619
00:21:42,539 --> 00:21:44,580
the second picture is the first attempt

620
00:21:44,580 --> 00:21:45,960
that did actually work

621
00:21:45,960 --> 00:21:47,460
so this meant that we could glitch the

622
00:21:47,460 --> 00:21:49,980
wrong bootloader and end up in a root

623
00:21:49,980 --> 00:21:52,860
shell on Linux

624
00:21:52,860 --> 00:21:54,840
this is nice because we demonstrated

625
00:21:54,840 --> 00:21:56,760
that the full attack works but it's

626
00:21:56,760 --> 00:21:58,440
currently still in a lab scenario right

627
00:21:58,440 --> 00:22:00,539
we have an oscilloscope we have power

628
00:22:00,539 --> 00:22:02,460
supplies signal generators and so on so

629
00:22:02,460 --> 00:22:04,559
it's not really a portable setup so

630
00:22:04,559 --> 00:22:05,820
doing this on a roof would be very

631
00:22:05,820 --> 00:22:08,220
inconvenient

632
00:22:08,220 --> 00:22:10,440
at this point I contacted SpaceX I told

633
00:22:10,440 --> 00:22:12,000
them I had the entire attack working

634
00:22:12,000 --> 00:22:13,860
they were nice enough to offer me a

635
00:22:13,860 --> 00:22:16,080
ubiki that would allow me to SSH into

636
00:22:16,080 --> 00:22:17,460
the user terminal

637
00:22:17,460 --> 00:22:19,620
but I decided that I was way too far

638
00:22:19,620 --> 00:22:21,659
down the rabbit hole and I didn't accept

639
00:22:21,659 --> 00:22:23,700
an offer

640
00:22:23,700 --> 00:22:26,400
so I wanted to make a mobile setup I

641
00:22:26,400 --> 00:22:27,840
wanted to remove the oscilloscope and

642
00:22:27,840 --> 00:22:29,820
all of the other lab equipment I'm out

643
00:22:29,820 --> 00:22:32,280
of a setup and make a mobile setup this

644
00:22:32,280 --> 00:22:34,799
is the first prototype you could say

645
00:22:34,799 --> 00:22:37,080
using a raspberry fly pickle to trigger

646
00:22:37,080 --> 00:22:40,140
and to inject the glitch this worked but

647
00:22:40,140 --> 00:22:42,419
it's of course still messy so I wanted

648
00:22:42,419 --> 00:22:44,700
to make a mod chip

649
00:22:44,700 --> 00:22:46,799
to make the matchup I put the dish on

650
00:22:46,799 --> 00:22:49,919
the flatbed scanner and this gives you a

651
00:22:49,919 --> 00:22:52,280
nice one-to-one

652
00:22:52,280 --> 00:22:54,780
resolution image of the picture that you

653
00:22:54,780 --> 00:22:56,820
can load in inkscape you can then draw

654
00:22:56,820 --> 00:22:59,400
the board layout export that to guycat

655
00:22:59,400 --> 00:23:02,100
and then you can start making your PCB

656
00:23:02,100 --> 00:23:04,260
this is the finished product so we have

657
00:23:04,260 --> 00:23:06,080
a Raspberry Pi microcontroller

658
00:23:06,080 --> 00:23:09,539
overclocked to 250 megahertz to the

659
00:23:09,539 --> 00:23:12,120
triggering and glitching

660
00:23:12,120 --> 00:23:14,520
this microcontroller basically controls

661
00:23:14,520 --> 00:23:16,559
the mosfet driver and that mosfet driver

662
00:23:16,559 --> 00:23:19,080
will switch on and off the decoupling

663
00:23:19,080 --> 00:23:21,780
mosfets and also insert the glitch using

664
00:23:21,780 --> 00:23:23,460
the gold bar mosfont

665
00:23:23,460 --> 00:23:25,380
the board is about six centimeters tall

666
00:23:25,380 --> 00:23:27,600
and I use the 0.8 millimeter thick

667
00:23:27,600 --> 00:23:29,280
boards

668
00:23:29,280 --> 00:23:31,020
one of the goals of this talk is that

669
00:23:31,020 --> 00:23:33,419
other people can start playing with the

670
00:23:33,419 --> 00:23:35,100
startling system and also the

671
00:23:35,100 --> 00:23:37,080
infrastructure and that means that also

672
00:23:37,080 --> 00:23:39,240
the mod chip design is available on

673
00:23:39,240 --> 00:23:41,760
GitHub the repository is still private

674
00:23:41,760 --> 00:23:44,820
but I will make it publicly later today

675
00:23:44,820 --> 00:23:46,320
this is a picture of the mud chip

676
00:23:46,320 --> 00:23:47,880
installed so there's a few wires that

677
00:23:47,880 --> 00:23:49,320
you also have to connect so I'm

678
00:23:49,320 --> 00:23:51,240
connecting to a wire that allows me to

679
00:23:51,240 --> 00:23:52,919
enable and disable the voltage regulator

680
00:23:52,919 --> 00:23:55,260
so that I can basically power cycle the

681
00:23:55,260 --> 00:23:56,340
SOC

682
00:23:56,340 --> 00:23:58,620
I'm leaching 12 volts from the user

683
00:23:58,620 --> 00:24:01,620
terminal to drive the mosfets at 1.8

684
00:24:01,620 --> 00:24:04,679
Volts for level shifter

685
00:24:04,679 --> 00:24:06,780
this is the setup that someone at our

686
00:24:06,780 --> 00:24:08,700
University made so that we could simply

687
00:24:08,700 --> 00:24:10,380
hang the dish outside of a window from

688
00:24:10,380 --> 00:24:12,240
the lab so we wouldn't always have to go

689
00:24:12,240 --> 00:24:15,240
up to the roof if something broke

690
00:24:15,240 --> 00:24:17,400
so at this point everything worked I had

691
00:24:17,400 --> 00:24:18,780
to put on the user terminal I could

692
00:24:18,780 --> 00:24:20,340
connect to the network I had internet

693
00:24:20,340 --> 00:24:22,740
access and I was ready to start playing

694
00:24:22,740 --> 00:24:24,840
with the network infrastructure

695
00:24:24,840 --> 00:24:26,640
and then I had some Reddit posts saying

696
00:24:26,640 --> 00:24:28,500
the new firmware is a lot better and

697
00:24:28,500 --> 00:24:30,419
it's way more stable and of course

698
00:24:30,419 --> 00:24:32,340
because I have the dish mounted flat and

699
00:24:32,340 --> 00:24:33,600
right up to the sky the internet

700
00:24:33,600 --> 00:24:35,640
connection wasn't very stable

701
00:24:35,640 --> 00:24:37,500
so I made a big mistake of doing a

702
00:24:37,500 --> 00:24:39,600
firmware update um

703
00:24:39,600 --> 00:24:41,460
I had assumed I can glitch the one

704
00:24:41,460 --> 00:24:43,320
bootloader there is no way that SpaceX

705
00:24:43,320 --> 00:24:45,120
can stop me at this point

706
00:24:45,120 --> 00:24:47,280
it turned out that they had an e-fuse

707
00:24:47,280 --> 00:24:49,860
they could blow that would stop the dish

708
00:24:49,860 --> 00:24:52,440
from outputting any information overly

709
00:24:52,440 --> 00:24:54,900
worked so if you take a dish today and

710
00:24:54,900 --> 00:24:56,159
you try to connect to the uart product

711
00:24:56,159 --> 00:24:58,260
it will not output anything

712
00:24:58,260 --> 00:25:00,360
and my mod chip was of course using UF

713
00:25:00,360 --> 00:25:03,379
to take action language

714
00:25:03,419 --> 00:25:04,860
this means that we have to improvise

715
00:25:04,860 --> 00:25:07,740
adapt and overcome

716
00:25:07,740 --> 00:25:09,360
I was lucky enough that I started

717
00:25:09,360 --> 00:25:11,159
working on this quite early so I had a

718
00:25:11,159 --> 00:25:13,380
lot of data from the previous

719
00:25:13,380 --> 00:25:15,900
experiments so I could compare logic

720
00:25:15,900 --> 00:25:17,640
analyzer captures from before they blew

721
00:25:17,640 --> 00:25:19,020
the fuse and after they had bought the

722
00:25:19,020 --> 00:25:21,299
fuse and of course I had this very nice

723
00:25:21,299 --> 00:25:23,880
side Channel case and as a result if you

724
00:25:23,880 --> 00:25:25,799
have the side Channel case and you take

725
00:25:25,799 --> 00:25:27,779
a side Channel Taste of the

726
00:25:27,779 --> 00:25:30,419
dish with a blown fuse you can visually

727
00:25:30,419 --> 00:25:32,400
spot this pattern and figure out where

728
00:25:32,400 --> 00:25:34,380
you have to insert the glitch

729
00:25:34,380 --> 00:25:37,140
so then I I'm basically now trading on

730
00:25:37,140 --> 00:25:40,140
the EMC data zero line instead of uart

731
00:25:40,140 --> 00:25:42,659
and I could luckily adapt my mod ship to

732
00:25:42,659 --> 00:25:44,640
still work with this it's a bit ugly

733
00:25:44,640 --> 00:25:47,400
because I have to add a watch wire

734
00:25:47,400 --> 00:25:49,620
basically to make it work but it does

735
00:25:49,620 --> 00:25:51,600
work the alternative would have been to

736
00:25:51,600 --> 00:25:53,580
make a new PCB design but I didn't get

737
00:25:53,580 --> 00:25:56,340
around to doing that

738
00:25:56,340 --> 00:25:58,320
so at that point we can start looking of

739
00:25:58,320 --> 00:26:00,419
course at the network

740
00:26:00,419 --> 00:26:01,559
and

741
00:26:01,559 --> 00:26:03,299
if things don't really get easier

742
00:26:03,299 --> 00:26:05,700
because the SD safe secure element is

743
00:26:05,700 --> 00:26:08,039
being used to implement mutually

744
00:26:08,039 --> 00:26:10,260
authenticated TLS with every back-end

745
00:26:10,260 --> 00:26:12,120
service meaning that you can't easily

746
00:26:12,120 --> 00:26:14,159
intercept the data and modify it and so

747
00:26:14,159 --> 00:26:15,480
on

748
00:26:15,480 --> 00:26:17,279
this meant that I started adding SD safe

749
00:26:17,279 --> 00:26:20,340
support to TLS libraries I chose TLS

750
00:26:20,340 --> 00:26:21,840
Lite NG which is a few python

751
00:26:21,840 --> 00:26:23,159
implementation because that made things

752
00:26:23,159 --> 00:26:25,860
easier for me then go to Python scripts

753
00:26:25,860 --> 00:26:27,900
that allowed me to

754
00:26:27,900 --> 00:26:29,940
download the latest firmware updates

755
00:26:29,940 --> 00:26:32,940
before SpaceX assigns them to this this

756
00:26:32,940 --> 00:26:35,400
specific user terminal so whenever

757
00:26:35,400 --> 00:26:37,320
someone posts on Reddit saying I have a

758
00:26:37,320 --> 00:26:39,179
new update and this is the update

759
00:26:39,179 --> 00:26:41,100
version I can immediately go and fetch

760
00:26:41,100 --> 00:26:43,260
it so I also started collecting all of

761
00:26:43,260 --> 00:26:44,880
these firmware updates and I have my own

762
00:26:44,880 --> 00:26:47,159
archive now and this is convenient to

763
00:26:47,159 --> 00:26:49,020
see what they changed over time in the

764
00:26:49,020 --> 00:26:51,620
firmware

765
00:26:51,720 --> 00:26:53,640
most of the communication with the back

766
00:26:53,640 --> 00:26:55,860
end is over IPv6 meaning you can't

767
00:26:55,860 --> 00:26:58,200
easily scan all of the hosts the main

768
00:26:58,200 --> 00:27:01,020
host does have quite a few ports open

769
00:27:01,020 --> 00:27:02,940
but here basically I'm hoping that other

770
00:27:02,940 --> 00:27:04,200
people will start glitching everyone

771
00:27:04,200 --> 00:27:06,360
using thermal I will start looking at

772
00:27:06,360 --> 00:27:09,379
the network infrastructure

773
00:27:10,260 --> 00:27:11,880
so what else can you do if you build

774
00:27:11,880 --> 00:27:13,620
your own modship and start working on a

775
00:27:13,620 --> 00:27:15,600
user terminal as I said you can start

776
00:27:15,600 --> 00:27:18,059
exploring the network infrastructure but

777
00:27:18,059 --> 00:27:20,220
you can also start playing with the beam

778
00:27:20,220 --> 00:27:22,559
formers so it's clear that the user

779
00:27:22,559 --> 00:27:24,840
thermal is able to overwrite firmware on

780
00:27:24,840 --> 00:27:27,960
the binformer ICS themselves so I think

781
00:27:27,960 --> 00:27:29,220
some people are interested in playing

782
00:27:29,220 --> 00:27:31,320
with this firmware and seeing what else

783
00:27:31,320 --> 00:27:33,480
they can do with the beamformers you

784
00:27:33,480 --> 00:27:35,279
could also try to repurpose if terminal

785
00:27:35,279 --> 00:27:36,960
so maybe you could use two user

786
00:27:36,960 --> 00:27:38,640
terminals to implement a point-to-point

787
00:27:38,640 --> 00:27:41,400
link or something like that

788
00:27:41,400 --> 00:27:42,720
um the picture in the slide shows

789
00:27:42,720 --> 00:27:44,520
basically some binaries that are in the

790
00:27:44,520 --> 00:27:45,900
firmware that allow you to do some

791
00:27:45,900 --> 00:27:49,740
Diagnostics of the beamformers

792
00:27:49,740 --> 00:27:51,299
so with that I want to conclude the

793
00:27:51,299 --> 00:27:52,580
stock

794
00:27:52,580 --> 00:27:55,320
so it turns out that we can bypass

795
00:27:55,320 --> 00:27:56,880
secure boot using voltage fault

796
00:27:56,880 --> 00:27:59,820
injection in the ROM bootloader we did

797
00:27:59,820 --> 00:28:02,400
this on a custom quad-core Aquatics a53

798
00:28:02,400 --> 00:28:04,559
in a completely Black Box scenario

799
00:28:04,559 --> 00:28:06,659
meaning we had no documentation and we

800
00:28:06,659 --> 00:28:08,340
had no open development samples our

801
00:28:08,340 --> 00:28:10,020
development kits

802
00:28:10,020 --> 00:28:12,360
we came up with a way to enable and

803
00:28:12,360 --> 00:28:14,640
disable the coupling capacitors

804
00:28:14,640 --> 00:28:16,980
voltage of course default injection

805
00:28:16,980 --> 00:28:18,659
counting measures are only as good as

806
00:28:18,659 --> 00:28:20,220
the fault model that was used to develop

807
00:28:20,220 --> 00:28:22,260
them and in this case the fault model

808
00:28:22,260 --> 00:28:23,940
used to develop the full injection

809
00:28:23,940 --> 00:28:28,039
countermeasure wasn't a realistic model

810
00:28:28,860 --> 00:28:30,659
so from a security standpoint I think

811
00:28:30,659 --> 00:28:33,179
this is a well-designed product there

812
00:28:33,179 --> 00:28:34,919
was no obvious at least to me low

813
00:28:34,919 --> 00:28:36,240
hanging fruits

814
00:28:36,240 --> 00:28:37,919
and Encompass to many other embedded

815
00:28:37,919 --> 00:28:39,539
devices I've looked at in the past even

816
00:28:39,539 --> 00:28:41,400
if you get a root shell it is still

817
00:28:41,400 --> 00:28:43,080
quite challenging to find an attack that

818
00:28:43,080 --> 00:28:44,100
scales

819
00:28:44,100 --> 00:28:45,360
I think there's a lot of device

820
00:28:45,360 --> 00:28:47,760
manufacturers that should take a look at

821
00:28:47,760 --> 00:28:51,059
this device and learn a thing after

822
00:28:51,059 --> 00:28:53,039
the SpaceX product security incidence

823
00:28:53,039 --> 00:28:54,720
response team was very responsive and

824
00:28:54,720 --> 00:28:56,940
helpful when I broke the dish they were

825
00:28:56,940 --> 00:29:00,440
happy to replace it and so on

826
00:29:01,140 --> 00:29:03,720
so before I really end this presentation

827
00:29:03,720 --> 00:29:06,900
I'm going to attempt to do a live demo

828
00:29:06,900 --> 00:29:09,419
it is a live glitching demo a glitch is

829
00:29:09,419 --> 00:29:10,580
never

830
00:29:10,580 --> 00:29:12,960
deterministic so it can take one minute

831
00:29:12,960 --> 00:29:15,659
it can take five minutes five minutes is

832
00:29:15,659 --> 00:29:18,120
the longest it's ever taken so let's see

833
00:29:18,120 --> 00:29:20,279
if we get lucky today

834
00:29:20,279 --> 00:29:22,500
you can find the GitHub link here on the

835
00:29:22,500 --> 00:29:24,480
slide if you have more questions you can

836
00:29:24,480 --> 00:29:26,580
you can find me later or send me an

837
00:29:26,580 --> 00:29:28,699
email

838
00:29:33,720 --> 00:29:35,580
so on the left we have a python script

839
00:29:35,580 --> 00:29:37,080
that is basically communicating with the

840
00:29:37,080 --> 00:29:40,080
modship it can set glitch parameters and

841
00:29:40,080 --> 00:29:42,539
it can orchestrate the attack

842
00:29:42,539 --> 00:29:44,640
if you were to make a new PCB revision

843
00:29:44,640 --> 00:29:47,159
and you can also read the UF data on the

844
00:29:47,159 --> 00:29:49,559
Raspberry Pi microcontroller then you

845
00:29:49,559 --> 00:29:50,760
could of course also make this

846
00:29:50,760 --> 00:29:52,380
Standalone so you wouldn't have to have

847
00:29:52,380 --> 00:29:55,260
a computer attached to the dish

848
00:29:55,260 --> 00:29:57,899
so by pressing enter we are trying to

849
00:29:57,899 --> 00:29:59,940
glitch the dish at this point on the

850
00:29:59,940 --> 00:30:02,460
right we have a serial terminal

851
00:30:02,460 --> 00:30:04,020
and as you can see it's not outputting

852
00:30:04,020 --> 00:30:05,940
anything because that serial fuse is

853
00:30:05,940 --> 00:30:08,399
blown on this dish so in the past when I

854
00:30:08,399 --> 00:30:09,600
initially started doing this research

855
00:30:09,600 --> 00:30:12,539
this would constantly reboot and say

856
00:30:12,539 --> 00:30:14,340
invalid signature and you would see it

857
00:30:14,340 --> 00:30:16,620
really doing something now we will only

858
00:30:16,620 --> 00:30:18,899
see do something when the glitch is

859
00:30:18,899 --> 00:30:21,439
successful

860
00:30:21,960 --> 00:30:25,700
and this is the point where we wait

861
00:30:25,919 --> 00:30:27,899
so maybe if someone already has a

862
00:30:27,899 --> 00:30:29,760
question like I can try to answer a

863
00:30:29,760 --> 00:30:32,539
question in the meantime

864
00:30:38,340 --> 00:30:40,860
at this time we don't have any virtual

865
00:30:40,860 --> 00:30:43,620
questions but in audience please feel

866
00:30:43,620 --> 00:30:47,120
free to use the microphones

867
00:30:47,399 --> 00:30:50,520
I was your level of effort a hundred a

868
00:30:50,520 --> 00:30:52,260
thousand ten thousand hours to do this

869
00:30:52,260 --> 00:30:53,880
like what kind of scale are we talking

870
00:30:53,880 --> 00:30:55,799
yeah that's that's a common and very

871
00:30:55,799 --> 00:30:57,539
difficult question to answer

872
00:30:57,539 --> 00:31:00,059
um so I I work at the University where I

873
00:31:00,059 --> 00:31:02,340
do research and we we never really work

874
00:31:02,340 --> 00:31:04,919
full-time on a single project so all of

875
00:31:04,919 --> 00:31:06,899
the research was done over the time span

876
00:31:06,899 --> 00:31:09,000
of one year so from getting the user

877
00:31:09,000 --> 00:31:11,820
terminal to having everything working

878
00:31:11,820 --> 00:31:13,380
um but it's difficult for me to say how

879
00:31:13,380 --> 00:31:15,720
many hours I really spent on this

880
00:31:15,720 --> 00:31:17,340
on this but you can imagine that it took

881
00:31:17,340 --> 00:31:21,080
quite a significant amount of time

882
00:31:32,399 --> 00:31:36,020
there we go which is successful

883
00:31:37,919 --> 00:31:40,880
foreign

884
00:31:41,820 --> 00:31:43,799
so to get this to work I also have to

885
00:31:43,799 --> 00:31:45,600
patch every single boot stage to remove

886
00:31:45,600 --> 00:31:47,520
the signature verification

887
00:31:47,520 --> 00:31:49,620
you can also see that I modified u-boot

888
00:31:49,620 --> 00:31:51,659
so you add more time to type Falcon and

889
00:31:51,659 --> 00:31:54,299
get into the command line interface

890
00:31:54,299 --> 00:31:55,919
so finally when the dish completes

891
00:31:55,919 --> 00:31:58,919
booting we can log in using the username

892
00:31:58,919 --> 00:32:00,299
root

893
00:32:00,299 --> 00:32:02,220
have I got it correct

894
00:32:02,220 --> 00:32:04,679
and the password falcon

895
00:32:04,679 --> 00:32:06,899
and we are root

896
00:32:06,899 --> 00:32:10,020
now we can for example do a

897
00:32:10,020 --> 00:32:12,600
this

898
00:32:12,600 --> 00:32:14,279
and this shows us all the logging

899
00:32:14,279 --> 00:32:16,620
messages that I've implemented and it

900
00:32:16,620 --> 00:32:17,760
gives a lot of interesting information

901
00:32:17,760 --> 00:32:20,100
while the dish is booting but also while

902
00:32:20,100 --> 00:32:21,539
the dish is running

903
00:32:21,539 --> 00:32:23,460
so for example what you can see when the

904
00:32:23,460 --> 00:32:24,840
dish is already connected to the

905
00:32:24,840 --> 00:32:26,340
satellite network is it will put into

906
00:32:26,340 --> 00:32:29,340
which satellite is connected to when it

907
00:32:29,340 --> 00:32:31,200
thinks it's going to lose connection and

908
00:32:31,200 --> 00:32:32,580
then the new satellite is going to

909
00:32:32,580 --> 00:32:34,980
connect to and you have live satellite

910
00:32:34,980 --> 00:32:36,600
tackers online and you can really see

911
00:32:36,600 --> 00:32:38,220
the dish connecting to the satellite

912
00:32:38,220 --> 00:32:40,980
that's flying over and so on

913
00:32:40,980 --> 00:32:43,500
so with that I want to end the talk

914
00:32:43,500 --> 00:32:45,400
thank you all for being here

915
00:32:45,400 --> 00:32:50,360
[Applause]

916
00:32:50,360 --> 00:32:53,469
[Music]

917
00:32:57,320 --> 00:33:00,419
[Music]

