1
00:00:01,730 --> 00:00:03,720
[Music]

2
00:00:03,720 --> 00:00:06,720
foreign

3
00:00:14,179 --> 00:00:17,039
wanted to transmit the file from his

4
00:00:17,039 --> 00:00:19,320
laptop to from his smartphone to his

5
00:00:19,320 --> 00:00:21,300
laptop for this he started in an HTTP

6
00:00:21,300 --> 00:00:24,180
server he went to with server fully

7
00:00:24,180 --> 00:00:26,760
smartphone and browse it uploaded Wi-Fi

8
00:00:26,760 --> 00:00:29,220
and this didn't work the laptop that

9
00:00:29,220 --> 00:00:32,960
destinated from the Wi-Fi network

10
00:00:33,500 --> 00:00:36,000
and he saw that there was a hardware

11
00:00:36,000 --> 00:00:38,820
restart of his Wi-Fi chip it was a

12
00:00:38,820 --> 00:00:41,640
awesome Advanced disaster thing we

13
00:00:41,640 --> 00:00:44,100
sounded interesting you were able to

14
00:00:44,100 --> 00:00:47,399
like make someone listening from a Wi-Fi

15
00:00:47,399 --> 00:00:50,700
network by something HTTP requests

16
00:00:50,700 --> 00:00:54,660
so we went further and we uh within

17
00:00:54,660 --> 00:00:56,820
rooster server subject for two years and

18
00:00:56,820 --> 00:00:59,399
so why is this interesting research

19
00:00:59,399 --> 00:01:00,300
first

20
00:01:00,300 --> 00:01:03,480
there are much complex features which

21
00:01:03,480 --> 00:01:06,659
are implemented in the Wi-Fi chips so

22
00:01:06,659 --> 00:01:08,820
excited to have something ability third

23
00:01:08,820 --> 00:01:11,420
there's no public research at all about

24
00:01:11,420 --> 00:01:14,220
Intel Wi-Fi chips we are doing some

25
00:01:14,220 --> 00:01:16,020
presentation about broad term Wi-Fi

26
00:01:16,020 --> 00:01:19,560
cards over about Intel network interface

27
00:01:19,560 --> 00:01:21,720
charge with Fiona cables that known

28
00:01:21,720 --> 00:01:23,820
about Wi-Fi so far

29
00:01:23,820 --> 00:01:26,159
so it's something frame because nowadays

30
00:01:26,159 --> 00:01:27,659
if you have a laptop with Intel

31
00:01:27,659 --> 00:01:29,820
processor it's very relative that you

32
00:01:29,820 --> 00:01:33,559
also are using the Intel Wi-Fi chip

33
00:01:36,920 --> 00:01:41,220
so if you achieve to the situation on

34
00:01:41,220 --> 00:01:43,439
the Wi-Fi chip it's very relative that

35
00:01:43,439 --> 00:01:45,479
you can win on white memory of a manual

36
00:01:45,479 --> 00:01:49,159
passing system so it's very interesting

37
00:01:49,820 --> 00:01:53,340
was using the chip on the left which is

38
00:01:53,340 --> 00:01:56,340
quite an old Wi-Fi card on my laptop I'm

39
00:01:56,340 --> 00:01:58,439
using the chip on the right

40
00:01:58,439 --> 00:02:00,420
um so there are the two chips which we

41
00:02:00,420 --> 00:02:03,960
have studied in so in this research

42
00:02:03,960 --> 00:02:06,600
in this organization I will first go

43
00:02:06,600 --> 00:02:09,000
through the firmware which is running on

44
00:02:09,000 --> 00:02:12,120
these chips on on some ways to talk to a

45
00:02:12,120 --> 00:02:14,160
chip then I will present some

46
00:02:14,160 --> 00:02:16,140
vulnerabilities that we found in this

47
00:02:16,140 --> 00:02:18,480
research which enabled performing some

48
00:02:18,480 --> 00:02:22,379
Dynamic analysis experiments and then I

49
00:02:22,379 --> 00:02:25,200
will perform an experiment to better

50
00:02:25,200 --> 00:02:27,260
understand whether

51
00:02:27,260 --> 00:02:29,940
whether it is possible to perform dma

52
00:02:29,940 --> 00:02:33,500
attached from the Wi-Fi chips

53
00:02:33,500 --> 00:02:36,420
first the firmware

54
00:02:36,420 --> 00:02:40,739
when you are interested in Wi-Fi on

55
00:02:40,739 --> 00:02:42,840
minutes there are a bunch of user space

56
00:02:42,840 --> 00:02:44,700
programs at the Bluetooth field

57
00:02:44,700 --> 00:02:46,920
concerned to configure the wireless

58
00:02:46,920 --> 00:02:49,200
this program starts to channel modules

59
00:02:49,200 --> 00:02:51,720
or Linux the bunch of Channel models

60
00:02:51,720 --> 00:02:54,959
which are close to the chip which is

61
00:02:54,959 --> 00:02:57,540
seen as a PCI Express device which is

62
00:02:57,540 --> 00:02:59,280
running some firmware

63
00:02:59,280 --> 00:03:02,040
an interesting things with Intel Wi-Fi

64
00:03:02,040 --> 00:03:03,239
is that the firmware is actually

65
00:03:03,239 --> 00:03:05,700
transmitted by the channel when the chip

66
00:03:05,700 --> 00:03:07,140
is reset

67
00:03:07,140 --> 00:03:09,599
it's quite common the channel is located

68
00:03:09,599 --> 00:03:12,260
in the ship firmware and we can

69
00:03:12,260 --> 00:03:15,540
performance module loads the firmware on

70
00:03:15,540 --> 00:03:16,560
the chip

71
00:03:16,560 --> 00:03:18,959
so we can read the style it's a bunch of

72
00:03:18,959 --> 00:03:21,360
binary data with some header and then

73
00:03:21,360 --> 00:03:24,060
type that they use entries for example

74
00:03:24,060 --> 00:03:27,239
the first one is a type 16 as a decimal

75
00:03:27,239 --> 00:03:30,000
followed by length OC which is 12 in

76
00:03:30,000 --> 00:03:32,040
decimal and then switch by height and so

77
00:03:32,040 --> 00:03:33,540
on

78
00:03:33,540 --> 00:03:36,360
this binary data is located by the

79
00:03:36,360 --> 00:03:38,519
channel module our Linux is open source

80
00:03:38,519 --> 00:03:41,879
so we can just go through some header

81
00:03:41,879 --> 00:03:44,040
files and we have some NM which defines

82
00:03:44,040 --> 00:03:46,860
the types so we can totally write a

83
00:03:46,860 --> 00:03:48,959
Titan slate to decode the firmware and

84
00:03:48,959 --> 00:03:51,060
we see a bunch of metadata about the

85
00:03:51,060 --> 00:03:53,280
firmware so the first one was about the

86
00:03:53,280 --> 00:03:55,319
dev calib with the Phantom flag versus a

87
00:03:55,319 --> 00:03:57,360
strong magnified version of the firmware

88
00:03:57,360 --> 00:03:58,159
version

89
00:03:58,159 --> 00:04:01,319
field which is number of CPU which is

90
00:04:01,319 --> 00:04:02,940
two

91
00:04:02,940 --> 00:04:06,840
indeed there are two processors on a

92
00:04:06,840 --> 00:04:09,720
Wi-Fi chip this is widely documented so

93
00:04:09,720 --> 00:04:12,420
I will go through it briefly there is a

94
00:04:12,420 --> 00:04:15,180
new match CPU a return on your message

95
00:04:15,180 --> 00:04:16,918
controller which is responsible of

96
00:04:16,918 --> 00:04:18,478
implementing the high level aspects of

97
00:04:18,478 --> 00:04:21,358
the Wi-Fi prototors on Verizon the lower

98
00:04:21,358 --> 00:04:24,120
media message from processor which

99
00:04:24,120 --> 00:04:26,520
basically drives the physical interfaces

100
00:04:26,520 --> 00:04:27,960
containers

101
00:04:27,960 --> 00:04:32,040
both processors use the same on-chip

102
00:04:32,040 --> 00:04:37,100
memory where Linux loads the firmware

103
00:04:42,680 --> 00:04:46,259
which is loaded on the firmware in MCS

104
00:04:46,259 --> 00:04:49,740
which are set RC section one time so

105
00:04:49,740 --> 00:04:51,840
there are countries in Orange for the

106
00:04:51,840 --> 00:04:53,880
animal processor entries in proper for

107
00:04:53,880 --> 00:04:57,360
the umat processor uh this entry is Maps

108
00:04:57,360 --> 00:05:01,259
into different memory area and once

109
00:05:01,259 --> 00:05:03,120
you're nervous and you'll have to do

110
00:05:03,120 --> 00:05:05,220
some progress and remaining things you

111
00:05:05,220 --> 00:05:08,280
need to guess what is the insertion set

112
00:05:08,280 --> 00:05:09,540
actually to

113
00:05:09,540 --> 00:05:11,100
for this there are some tools for

114
00:05:11,100 --> 00:05:12,960
example there is a tools called CPU

115
00:05:12,960 --> 00:05:14,960
range which says that

116
00:05:14,960 --> 00:05:18,360
these memory areas contain Arch compat

117
00:05:18,360 --> 00:05:19,979
code

118
00:05:19,979 --> 00:05:22,380
so from this we can just load it into

119
00:05:22,380 --> 00:05:25,139
Ida proof or well because in either at

120
00:05:25,139 --> 00:05:26,940
the time it was only a disaster I

121
00:05:26,940 --> 00:05:29,160
watched the compiler module for that and

122
00:05:29,160 --> 00:05:31,259
I believe a cool request my new audio so

123
00:05:31,259 --> 00:05:33,419
if you are using the request 3006 you

124
00:05:33,419 --> 00:05:35,280
can actually decompile our contact code

125
00:05:35,280 --> 00:05:38,280
and from this it's uh very easy to start

126
00:05:38,280 --> 00:05:40,259
understand better what the firmware

127
00:05:40,259 --> 00:05:43,160
actually does

128
00:05:45,180 --> 00:05:48,120
if I modify your firmware well it

129
00:05:48,120 --> 00:05:50,039
doesn't work there is a mirror in the

130
00:05:50,039 --> 00:05:52,020
buildings Channel load a search boot

131
00:05:52,020 --> 00:05:55,560
error so the firmware is signed by Intel

132
00:05:55,560 --> 00:05:57,900
and you cannot directly modify your FMI

133
00:05:57,900 --> 00:06:00,620
it doesn't work

134
00:06:00,900 --> 00:06:04,139
before going into some vulnerabilities I

135
00:06:04,139 --> 00:06:07,560
would like to present how does Vineyards

136
00:06:07,560 --> 00:06:09,780
third to the chip

137
00:06:09,780 --> 00:06:12,660
right first it's a Wi-Fi chip so you can

138
00:06:12,660 --> 00:06:15,360
just send Network touches that's a

139
00:06:15,360 --> 00:06:17,880
common answer

140
00:06:17,880 --> 00:06:20,759
there's an interface in the table file

141
00:06:20,759 --> 00:06:23,000
system

142
00:06:23,000 --> 00:06:26,120
however many files

143
00:06:26,120 --> 00:06:28,560
so this is a with a cheap improvolution

144
00:06:28,560 --> 00:06:29,759
mode and in the double file system

145
00:06:29,759 --> 00:06:31,199
onions there are many first among these

146
00:06:31,199 --> 00:06:34,020
types there is a mem file

147
00:06:34,020 --> 00:06:37,380
what does mean means it means memory on

148
00:06:37,380 --> 00:06:39,240
which is five you can directly read the

149
00:06:39,240 --> 00:06:42,060
memory of the unshifting of the onshift

150
00:06:42,060 --> 00:06:44,880
memory of a Wi-Fi chip you cannot write

151
00:06:44,880 --> 00:06:46,919
to it but you can't read it which is

152
00:06:46,919 --> 00:06:48,240
quite helpful

153
00:06:48,240 --> 00:06:50,000
yeah

154
00:06:50,000 --> 00:06:53,039
which is very interesting it is prph

155
00:06:53,039 --> 00:06:56,419
unusual Rider peripheral register

156
00:06:56,419 --> 00:07:00,300
can read some peripheral registers and

157
00:07:00,300 --> 00:07:02,340
in the linkage software there are some

158
00:07:02,340 --> 00:07:04,380
macros which Define for example U match

159
00:07:04,380 --> 00:07:08,280
free on PC and Mac one from PC on7 read

160
00:07:08,280 --> 00:07:10,758
foreign

161
00:07:34,220 --> 00:07:38,039
which code is being executed when some

162
00:07:38,039 --> 00:07:40,919
function is being used and some features

163
00:07:40,919 --> 00:07:42,419
are being used

164
00:07:42,419 --> 00:07:46,080
well when I service it I was like how

165
00:07:46,080 --> 00:07:48,599
was it possible GPS is in position mode

166
00:07:48,599 --> 00:07:50,520
there shouldn't be any label interface

167
00:07:50,520 --> 00:07:54,120
and yet we can read all its memory and

168
00:07:54,120 --> 00:07:57,360
we can read the PC registers of the two

169
00:07:57,360 --> 00:08:00,620
processors on the chip

170
00:08:00,620 --> 00:08:04,139
there is some interface which is exposed

171
00:08:04,139 --> 00:08:06,240
through Pizza Express and nio I won't go

172
00:08:06,240 --> 00:08:07,919
into much details there are more details

173
00:08:07,919 --> 00:08:10,380
in the white paper but this is mainly

174
00:08:10,380 --> 00:08:11,819
documentation in the limbs financial

175
00:08:11,819 --> 00:08:14,819
stores so here are Intel digital web job

176
00:08:14,819 --> 00:08:17,639
at documentary teams and so this is a

177
00:08:17,639 --> 00:08:20,720
very interesting

178
00:08:20,879 --> 00:08:23,879
Germans

179
00:08:27,660 --> 00:08:29,120
it's like

180
00:08:29,120 --> 00:08:33,299
yeah customers are used to define to

181
00:08:33,299 --> 00:08:35,099
which at this point for example the

182
00:08:35,099 --> 00:08:37,140
Wi-Fi chart is generated or to Define

183
00:08:37,140 --> 00:08:40,039
some unchips and things

184
00:08:42,559 --> 00:08:44,700
which are not documented in the English

185
00:08:44,700 --> 00:08:47,399
try to stop us which are implemented in

186
00:08:47,399 --> 00:08:50,339
real life record on this Germans are

187
00:08:50,339 --> 00:08:52,200
interesting

188
00:08:52,200 --> 00:08:55,800
now how can we get obituary flow

189
00:08:55,800 --> 00:08:58,380
Distribution on such ships

190
00:08:58,380 --> 00:09:02,100
well just open for example in either the

191
00:09:02,100 --> 00:09:05,880
owner of some so when you are sending an

192
00:09:05,880 --> 00:09:08,100
austriament the only Earth can just read

193
00:09:08,100 --> 00:09:11,339
the payload of some commands also here

194
00:09:11,339 --> 00:09:13,080
you see two charts of this function

195
00:09:13,080 --> 00:09:14,700
which was named here you met before we

196
00:09:14,700 --> 00:09:17,279
died the first one with two 32-bit

197
00:09:17,279 --> 00:09:20,700
integer the first one is being used as a

198
00:09:20,700 --> 00:09:22,800
count parameter of the control which is

199
00:09:22,800 --> 00:09:25,800
reading so the incoming data into a stat

200
00:09:25,800 --> 00:09:27,440
buffer we see here

201
00:09:27,440 --> 00:09:30,720
here are the US based something it's

202
00:09:30,720 --> 00:09:33,680
loading into others

203
00:09:34,320 --> 00:09:36,959
so what do we have here we have a very

204
00:09:36,959 --> 00:09:39,839
basic stat buffer overflow and there is

205
00:09:39,839 --> 00:09:43,440
no statutory there is no organization so

206
00:09:43,440 --> 00:09:46,519
well I won't go into much detail there

207
00:09:46,519 --> 00:09:50,399
so it's like very easy to get a bit so

208
00:09:50,399 --> 00:09:52,080
it was a situation and third Wi-Fi chips

209
00:09:52,080 --> 00:09:54,680
using this

210
00:09:55,740 --> 00:09:58,680
um to to explore it in practice

211
00:09:58,680 --> 00:10:01,800
um we we use the Linux F5 framework to

212
00:10:01,800 --> 00:10:04,019
patch a function for in the channel

213
00:10:04,019 --> 00:10:07,980
module this way we

214
00:10:07,980 --> 00:10:12,120
we are not required to modify and to

215
00:10:12,120 --> 00:10:13,860
patch return module itself we can adjust

216
00:10:13,860 --> 00:10:15,839
the energy like this which is much more

217
00:10:15,839 --> 00:10:18,720
stable to expose this and then we can

218
00:10:18,720 --> 00:10:21,540
just use some read white executable

219
00:10:21,540 --> 00:10:23,700
version in memory to write some data

220
00:10:23,700 --> 00:10:25,019
whereas on the bathroom which enables

221
00:10:25,019 --> 00:10:27,120
writing diary some data in this area

222
00:10:27,120 --> 00:10:29,519
which is very helpful because when we

223
00:10:29,519 --> 00:10:32,519
just need to put some addresses in with

224
00:10:32,519 --> 00:10:34,440
using the style buffer overflow to get

225
00:10:34,440 --> 00:10:37,080
execution of this road and that's it we

226
00:10:37,080 --> 00:10:39,420
get through this equation

227
00:10:39,420 --> 00:10:43,320
now there is no shell in the Wi-Fi chart

228
00:10:43,320 --> 00:10:46,140
so what can we do well we can for

229
00:10:46,140 --> 00:10:48,360
example enable debit mode

230
00:10:48,360 --> 00:10:51,480
so here are some clips um on GitHub we

231
00:10:51,480 --> 00:10:53,220
published these trips which are

232
00:10:53,220 --> 00:10:55,560
basically workers around the developer

233
00:10:55,560 --> 00:10:57,660
system interface so the first terminal

234
00:10:57,660 --> 00:11:00,300
reads some content and then we come to

235
00:11:00,300 --> 00:11:03,600
write some data into this area and it

236
00:11:03,600 --> 00:11:04,920
doesn't work because the chip is in

237
00:11:04,920 --> 00:11:08,820
pollution mode then we run the exploit

238
00:11:08,820 --> 00:11:10,620
for business variability so we change

239
00:11:10,620 --> 00:11:13,440
the content that this allows to the edge

240
00:11:13,440 --> 00:11:17,279
400 this enables the debug mode on in

241
00:11:17,279 --> 00:11:19,560
debit mode from unit to generally right

242
00:11:19,560 --> 00:11:21,859
memory

243
00:11:21,920 --> 00:11:26,480
so now we have a full distribution

244
00:11:26,480 --> 00:11:28,920
access so it's very helpful to better

245
00:11:28,920 --> 00:11:32,660
understand the features of a chip

246
00:11:32,760 --> 00:11:35,579
everything is this was actually past

247
00:11:35,579 --> 00:11:37,380
some years ago

248
00:11:37,380 --> 00:11:40,019
so this technology existed in some

249
00:11:40,019 --> 00:11:42,540
awesome way of a fair ship but not on my

250
00:11:42,540 --> 00:11:45,000
chip so actually I was very frustrated

251
00:11:45,000 --> 00:11:47,339
because my trade was able to run code on

252
00:11:47,339 --> 00:11:50,820
each on his Wi-Fi ship but not online

253
00:11:50,820 --> 00:11:53,820
so I wanted to run close also on my ship

254
00:11:53,820 --> 00:11:57,180
so I wanted to go deeper

255
00:11:57,180 --> 00:12:00,420
let's so you know how the firmware is

256
00:12:00,420 --> 00:12:02,940
actually loaded on the chip

257
00:12:02,940 --> 00:12:05,640
are presented earlier but somewhere when

258
00:12:05,640 --> 00:12:07,680
the chip was ready it was transmitted by

259
00:12:07,680 --> 00:12:09,959
minutes

260
00:12:09,959 --> 00:12:13,260
so Linus was writing to memory and also

261
00:12:13,260 --> 00:12:15,360
from here we can read the program

262
00:12:15,360 --> 00:12:18,060
printer of the processor and we see that

263
00:12:18,060 --> 00:12:20,880
why we are transmissive contains some

264
00:12:20,880 --> 00:12:22,560
interesting addresses and we can also

265
00:12:22,560 --> 00:12:24,540
read the content of these addresses and

266
00:12:24,540 --> 00:12:26,940
so we discover some code some are

267
00:12:26,940 --> 00:12:28,140
compact code

268
00:12:28,140 --> 00:12:30,060
I don't know whether it's a boot form or

269
00:12:30,060 --> 00:12:33,600
synonym so I will just say this is a

270
00:12:33,600 --> 00:12:35,940
loader which actually verified using a

271
00:12:35,940 --> 00:12:37,399
show of the firmware

272
00:12:37,399 --> 00:12:40,440
uses some Global variables in the data

273
00:12:40,440 --> 00:12:42,360
region and there is a touch which is

274
00:12:42,360 --> 00:12:45,720
always necessary there in the matchup

275
00:12:45,720 --> 00:12:48,300
and uh so the loader implements the

276
00:12:48,300 --> 00:12:50,279
logic of very very interesting is true

277
00:12:50,279 --> 00:12:53,779
of the firmware

278
00:12:53,940 --> 00:12:56,220
Channel use

279
00:12:56,220 --> 00:12:58,320
trying to perform a time of chat to time

280
00:12:58,320 --> 00:13:00,420
of fuse attack when we load the

281
00:13:00,420 --> 00:13:02,579
legitimate firmware wait for the loader

282
00:13:02,579 --> 00:13:04,380
to check its signature then load

283
00:13:04,380 --> 00:13:06,660
modified firmware and just let the

284
00:13:06,660 --> 00:13:07,980
loader added to this modified version

285
00:13:07,980 --> 00:13:09,740
well no it doesn't work

286
00:13:09,740 --> 00:13:13,620
the the loader actually makes the memory

287
00:13:13,620 --> 00:13:15,839
areas read only before we find the

288
00:13:15,839 --> 00:13:17,579
signature so this is secure

289
00:13:17,579 --> 00:13:19,700
but when we take release

290
00:13:19,700 --> 00:13:21,660
there's something

291
00:13:21,660 --> 00:13:25,320
that we can find is can we write some

292
00:13:25,320 --> 00:13:29,060
data into the data on the starch of the

293
00:13:29,060 --> 00:13:33,300
used by the loader on well on Thursdays

294
00:13:33,300 --> 00:13:35,339
so from this venability is actually

295
00:13:35,339 --> 00:13:37,440
quite simple you can just load the

296
00:13:37,440 --> 00:13:39,240
modified firmware transversion address

297
00:13:39,240 --> 00:13:41,760
by writing some data on weight or

298
00:13:41,760 --> 00:13:44,760
somewhere to to be loaded this was

299
00:13:44,760 --> 00:13:46,680
reported in September which was patched

300
00:13:46,680 --> 00:13:47,820
two days ago

301
00:13:47,820 --> 00:13:50,700
and with this we get short situation on

302
00:13:50,700 --> 00:13:52,920
the third shift but I did not get 20

303
00:13:52,920 --> 00:13:56,579
degrees on my chip didn't work at first

304
00:13:56,579 --> 00:13:59,160
but didn't know but in a strong way I

305
00:13:59,160 --> 00:14:01,139
was able to modify the data to read back

306
00:14:01,139 --> 00:14:03,959
with data I modified but it was as is

307
00:14:03,959 --> 00:14:08,040
the chip was ignoring this data it was

308
00:14:08,040 --> 00:14:11,399
at this webship was using some cash to

309
00:14:11,399 --> 00:14:15,899
reduce its stuff if it's stuck and this

310
00:14:15,899 --> 00:14:19,980
cage was not updated when I wrote

311
00:14:19,980 --> 00:14:23,700
um another address to the starch

312
00:14:23,700 --> 00:14:27,480
so I found a way to make the loader

313
00:14:27,480 --> 00:14:30,420
off-road to meet each stage to flush it

314
00:14:30,420 --> 00:14:33,360
staged to to read batch the data from

315
00:14:33,360 --> 00:14:36,660
the unified return address on this way I

316
00:14:36,660 --> 00:14:37,980
got successful throughout the

317
00:14:37,980 --> 00:14:40,620
description I imagine

318
00:14:40,620 --> 00:14:42,600
so this way even on more with some chips

319
00:14:42,600 --> 00:14:45,720
so you can run a better code for this

320
00:14:45,720 --> 00:14:48,720
you will need a force to be already

321
00:14:48,720 --> 00:14:51,240
to others already have high privileges

322
00:14:51,240 --> 00:14:54,180
on lineage you need to be able to run

323
00:14:54,180 --> 00:14:56,940
code in Channel but it's like a rutual

324
00:14:56,940 --> 00:14:58,920
through the situation when you change

325
00:14:58,920 --> 00:15:01,740
running code on a Wi-Fi chip

326
00:15:01,740 --> 00:15:04,920
from there we perform some Dynamic

327
00:15:04,920 --> 00:15:06,899
analysis experiments what can we do we

328
00:15:06,899 --> 00:15:08,519
can for example Implement some tracing

329
00:15:08,519 --> 00:15:12,959
to better understand what the code what

330
00:15:12,959 --> 00:15:15,300
road is being executed when we use some

331
00:15:15,300 --> 00:15:18,060
features for this we replace every first

332
00:15:18,060 --> 00:15:21,779
instructions of the functions with a

333
00:15:21,779 --> 00:15:23,420
type instruction or even instruction

334
00:15:23,420 --> 00:15:26,699
there were some Pitfall there and we

335
00:15:26,699 --> 00:15:28,320
modify the assertion of the third in

336
00:15:28,320 --> 00:15:30,720
order to record the addresses of the

337
00:15:30,720 --> 00:15:32,100
functions which are being executed in

338
00:15:32,100 --> 00:15:34,440
Adobe buffer that we've then proved on

339
00:15:34,440 --> 00:15:37,260
with this we have a basic tracer

340
00:15:37,260 --> 00:15:39,540
which anniversifies in on a social

341
00:15:39,540 --> 00:15:41,699
variety if we want to perform some

342
00:15:41,699 --> 00:15:44,279
phasing through Wireless for example

343
00:15:44,279 --> 00:15:47,339
also implemented alternative when we

344
00:15:47,339 --> 00:15:49,920
added some code in the firmware to

345
00:15:49,920 --> 00:15:53,220
perform some some assets such as Reading

346
00:15:53,220 --> 00:15:55,860
Writing some Hardware registers and

347
00:15:55,860 --> 00:15:57,839
doing some compact compression which

348
00:15:57,839 --> 00:16:00,899
limited through a table of clients which

349
00:16:00,899 --> 00:16:03,480
enables us to better understand what was

350
00:16:03,480 --> 00:16:07,380
going on chip

351
00:16:08,779 --> 00:16:11,940
uh one thing to note here is that we

352
00:16:11,940 --> 00:16:13,500
cannot use the standard way of

353
00:16:13,500 --> 00:16:15,120
communicating with the chip but they are

354
00:16:15,120 --> 00:16:16,740
because while the developer sub is

355
00:16:16,740 --> 00:16:18,540
running the farmer is not running so it

356
00:16:18,540 --> 00:16:20,220
cannot actually communicate with the

357
00:16:20,220 --> 00:16:23,579
host but we found some unused peripheral

358
00:16:23,579 --> 00:16:27,800
register which which were available

359
00:16:27,800 --> 00:16:31,800
diverse using the VR ps2l5 and with this

360
00:16:31,800 --> 00:16:35,100
we were able to read or write some data

361
00:16:35,100 --> 00:16:36,779
for to make your transition system

362
00:16:36,779 --> 00:16:38,880
Channel without actually using post

363
00:16:38,880 --> 00:16:41,600
commands

364
00:16:42,860 --> 00:16:47,579
foreign what can we do further

365
00:16:47,579 --> 00:16:49,019
we can

366
00:16:49,019 --> 00:16:52,440
also we use an idea from more than 10

367
00:16:52,440 --> 00:16:54,360
years ago which his name was in between

368
00:16:54,360 --> 00:16:55,579
the body

369
00:16:55,579 --> 00:16:59,940
the idea is to emulate the firmware in

370
00:16:59,940 --> 00:17:02,519
some virtual machine onto radiate the

371
00:17:02,519 --> 00:17:06,599
hardware accesses to the actual Hardware

372
00:17:06,599 --> 00:17:09,720
so for this eventually on GitHub you can

373
00:17:09,720 --> 00:17:13,319
find a qmu version for art Compact and

374
00:17:13,319 --> 00:17:16,260
we can modify it by using a TCG plugin

375
00:17:16,260 --> 00:17:19,140
for three new to redirect the memory

376
00:17:19,140 --> 00:17:22,559
assesses to the real Hardware by using

377
00:17:22,559 --> 00:17:26,059
our debit adjuster so it should address

378
00:17:29,179 --> 00:17:32,940
close to the actual firmware to actual

379
00:17:32,940 --> 00:17:34,460
ship

380
00:17:34,460 --> 00:17:36,120
uh

381
00:17:36,120 --> 00:17:38,640
um in practice this word for simple

382
00:17:38,640 --> 00:17:42,000
functions but it didn't work well for

383
00:17:42,000 --> 00:17:44,700
some other functions because there are

384
00:17:44,700 --> 00:17:47,400
many timers in the chip many Watchdogs

385
00:17:47,400 --> 00:17:49,740
and it's a variety that when you are

386
00:17:49,740 --> 00:17:51,419
using this to

387
00:17:51,419 --> 00:17:53,520
um to test some complex features there

388
00:17:53,520 --> 00:17:55,500
will be some timers which will expire

389
00:17:55,500 --> 00:17:58,200
which will make within fail and quite

390
00:17:58,200 --> 00:18:00,419
unstable but for simple feature it's

391
00:18:00,419 --> 00:18:01,740
very helpful because there are many

392
00:18:01,740 --> 00:18:06,320
other registers in the Wi-Fi chip

393
00:18:07,380 --> 00:18:10,160
so from

394
00:18:10,160 --> 00:18:13,860
the first thing where my grade wanted to

395
00:18:13,860 --> 00:18:16,559
transfer to five with a D4 firmware and

396
00:18:16,559 --> 00:18:18,960
so on then we found some realities we

397
00:18:18,960 --> 00:18:21,900
implemented the dynamic and is it from

398
00:18:21,900 --> 00:18:24,059
large now we can perform some

399
00:18:24,059 --> 00:18:26,220
experiments to answer some questions

400
00:18:26,220 --> 00:18:28,980
where is it possible to perform some dma

401
00:18:28,980 --> 00:18:32,960
attacks from the chip

402
00:18:33,299 --> 00:18:36,660
well if you know about how Network ships

403
00:18:36,660 --> 00:18:39,960
Works yes because well when you

404
00:18:39,960 --> 00:18:42,000
transmitted for patches you use dma in

405
00:18:42,000 --> 00:18:44,520
practice with Intel welfare chip this

406
00:18:44,520 --> 00:18:46,799
logic of dma itself for nasal patches is

407
00:18:46,799 --> 00:18:48,900
abstract by some other components so the

408
00:18:48,900 --> 00:18:51,480
chip does not have access to the actual

409
00:18:51,480 --> 00:18:54,360
address which is using the main memory

410
00:18:54,360 --> 00:18:57,120
uh which makes things more secure so we

411
00:18:57,120 --> 00:18:59,039
need to find another way to perform dma

412
00:18:59,039 --> 00:19:01,919
we cannot choose the same way as the one

413
00:19:01,919 --> 00:19:04,500
which is used on metal budgets

414
00:19:04,500 --> 00:19:07,440
um yeah there's a feature on the Wi-Fi

415
00:19:07,440 --> 00:19:09,539
ship that we've tried a little bit which

416
00:19:09,539 --> 00:19:12,620
is a paging memory

417
00:19:13,520 --> 00:19:17,760
verse section one time and trees so

418
00:19:17,760 --> 00:19:19,559
there are sessions of n multiprocessor

419
00:19:19,559 --> 00:19:21,780
session for the umat processor interval

420
00:19:21,780 --> 00:19:24,000
which are not dead initiative and in

421
00:19:24,000 --> 00:19:27,240
fact entries

422
00:19:28,860 --> 00:19:30,840
the first one is there's a separator

423
00:19:30,840 --> 00:19:32,640
which says that hey there over entries

424
00:19:32,640 --> 00:19:34,919
resonant one is a RSA signature which

425
00:19:34,919 --> 00:19:37,020
actually signed the third one which

426
00:19:37,020 --> 00:19:39,179
contains code on data

427
00:19:39,179 --> 00:19:42,600
this third entries is not loaded on the

428
00:19:42,600 --> 00:19:45,480
chip but it still contains road which is

429
00:19:45,480 --> 00:19:47,360
quite weird

430
00:19:47,360 --> 00:19:51,360
so what is going on

431
00:19:51,360 --> 00:19:54,419
in the umat processor there is a memory

432
00:19:54,419 --> 00:19:56,700
management unit when you read the data

433
00:19:56,700 --> 00:19:58,260
sheet about the art compactor memory

434
00:19:58,260 --> 00:19:59,940
management you need you see that the

435
00:19:59,940 --> 00:20:02,520
memory is split in several regions the

436
00:20:02,520 --> 00:20:05,520
top of the memory is mapped directly to

437
00:20:05,520 --> 00:20:06,840
a physical memory there is another

438
00:20:06,840 --> 00:20:08,820
version which is also map directly to

439
00:20:08,820 --> 00:20:12,539
ACL memory and the low memory version is

440
00:20:12,539 --> 00:20:16,020
mapped to the memory through the mnu

441
00:20:16,020 --> 00:20:18,780
at first mmu does not contain any

442
00:20:18,780 --> 00:20:19,919
entries

443
00:20:19,919 --> 00:20:22,080
when the remote processor strives to

444
00:20:22,080 --> 00:20:24,419
edit record or read or write data for

445
00:20:24,419 --> 00:20:26,299
example in oh wow

446
00:20:26,299 --> 00:20:28,559
o1002 address

447
00:20:28,559 --> 00:20:31,980
it will just perform a dma read access

448
00:20:31,980 --> 00:20:35,100
to read the content of this memory from

449
00:20:35,100 --> 00:20:38,160
the main memory

450
00:20:38,160 --> 00:20:42,419
it will read it into some space in a in

451
00:20:42,419 --> 00:20:45,600
his on-chip memory we can see the

452
00:20:45,600 --> 00:20:48,660
numbers here the the space is less than

453
00:20:48,660 --> 00:20:51,480
a flu number of pages so it's like to

454
00:20:51,480 --> 00:20:55,620
swap it's a well to have a firmware

455
00:20:55,620 --> 00:20:58,380
which is bigger than the on-ship the

456
00:20:58,380 --> 00:21:00,299
size of the engine memory

457
00:21:00,299 --> 00:21:03,900
so once the data is to appeared you can

458
00:21:03,900 --> 00:21:06,000
update your configure something new on

459
00:21:06,000 --> 00:21:07,860
the read on white execute code which is

460
00:21:07,860 --> 00:21:10,380
located in this area

461
00:21:10,380 --> 00:21:13,320
now the question is well we are bringing

462
00:21:13,320 --> 00:21:16,320
code which was red from Linux

463
00:21:16,320 --> 00:21:19,440
is it possible to modify this code if we

464
00:21:19,440 --> 00:21:21,900
can modify this road we can also achieve

465
00:21:21,900 --> 00:21:24,299
a few Distribution on the chip

466
00:21:24,299 --> 00:21:26,100
is no

467
00:21:26,100 --> 00:21:28,919
uh we saw uh previously that we start

468
00:21:28,919 --> 00:21:31,320
was signed the raise the signature uh

469
00:21:31,320 --> 00:21:33,000
right before

470
00:21:33,000 --> 00:21:34,280
um

471
00:21:34,280 --> 00:21:37,679
verified but it is verified by loading

472
00:21:37,679 --> 00:21:41,000
all webpages

473
00:21:42,360 --> 00:21:46,140
there is another mechanism which uses a

474
00:21:46,140 --> 00:21:47,940
universal measure functional code with

475
00:21:47,940 --> 00:21:52,140
32-bit sums which the Integrity of pages

476
00:21:52,140 --> 00:21:56,039
which forbids modifying these Pages only

477
00:21:56,039 --> 00:21:58,679
notes and due to this mechanism it is

478
00:21:58,679 --> 00:22:00,480
not possible to directly modify the

479
00:22:00,480 --> 00:22:02,520
control of the pages on the main memory

480
00:22:02,520 --> 00:22:04,260
and then when code

481
00:22:04,260 --> 00:22:08,179
in fact the there are monitors will

482
00:22:08,179 --> 00:22:11,880
not speak so much about them there are

483
00:22:11,880 --> 00:22:13,559
more details in the white paper and

484
00:22:13,559 --> 00:22:15,659
basically the system are located in this

485
00:22:15,659 --> 00:22:18,480
oh yeah if you have to read returns at

486
00:22:18,480 --> 00:22:20,580
this address you can achieve the

487
00:22:20,580 --> 00:22:23,240
execution but by default you cannot read

488
00:22:23,240 --> 00:22:25,559
in pollution mode you cannot read the

489
00:22:25,559 --> 00:22:29,299
contents at this address

490
00:22:29,460 --> 00:22:32,059
foreign

491
00:22:43,280 --> 00:22:45,780
modified Pages because actually white

492
00:22:45,780 --> 00:22:47,340
table data in there

493
00:22:47,340 --> 00:22:49,200
what happens if we modify the

494
00:22:49,200 --> 00:22:51,480
configuration of the immuno to load

495
00:22:51,480 --> 00:22:55,380
Things From Another other space so there

496
00:22:55,380 --> 00:22:56,640
are actually function that can be used

497
00:22:56,640 --> 00:22:59,640
to perform dma attacks to read and write

498
00:22:59,640 --> 00:23:03,059
anywhere in the main physical memory

499
00:23:03,059 --> 00:23:05,400
where did they move office which are

500
00:23:05,400 --> 00:23:07,559
recorded

501
00:23:07,559 --> 00:23:10,620
so on the left we see the configuration

502
00:23:10,620 --> 00:23:13,020
of mmu it's a python shift that is

503
00:23:13,020 --> 00:23:14,820
published on GitHub which is directly

504
00:23:14,820 --> 00:23:17,340
read the new configuration from a ship

505
00:23:17,340 --> 00:23:18,780
using with the value of our system

506
00:23:18,780 --> 00:23:20,280
interface

507
00:23:20,280 --> 00:23:22,919
we see that the 0104 something is mapped

508
00:23:22,919 --> 00:23:23,659
to

509
00:23:23,659 --> 00:23:26,640
256 something we can on the right read

510
00:23:26,640 --> 00:23:29,880
on the initial content of this memory of

511
00:23:29,880 --> 00:23:33,179
his physical address and for now it's

512
00:23:33,179 --> 00:23:36,120
all zeros on units there are some pages

513
00:23:36,120 --> 00:23:39,120
which contain visible data so for

514
00:23:39,120 --> 00:23:40,740
demonstration it's Finance if the

515
00:23:40,740 --> 00:23:43,200
channel we don't need data so yeah I

516
00:23:43,200 --> 00:23:44,700
just saw some strings which are in my

517
00:23:44,700 --> 00:23:48,000
channel if the channel read only area

518
00:23:48,000 --> 00:23:51,480
I can modify the multiplication to try

519
00:23:51,480 --> 00:23:53,220
to read the content of the channel we

520
00:23:53,220 --> 00:23:55,640
don't need that for this I first Flash

521
00:23:55,640 --> 00:23:59,340
the pages which are loaded then I modify

522
00:23:59,340 --> 00:24:02,159
basically I want to modify this to 50

523
00:24:02,159 --> 00:24:05,460
seats ba by values of everything data

524
00:24:05,460 --> 00:24:07,860
for this in fact these two cccpi is

525
00:24:07,860 --> 00:24:10,200
there so I just need to write four bytes

526
00:24:10,200 --> 00:24:13,620
using the empty here I used before

527
00:24:13,620 --> 00:24:16,559
and once this work is done we can read

528
00:24:16,559 --> 00:24:18,780
data and we see even now on the chip

529
00:24:18,780 --> 00:24:21,900
when we read the u104 something we can

530
00:24:21,900 --> 00:24:25,020
read when we data when we can write

531
00:24:25,020 --> 00:24:27,780
something on first things to make the

532
00:24:27,780 --> 00:24:32,159
actual DMI white operation and now on

533
00:24:32,159 --> 00:24:35,340
units when we read the content of a read

534
00:24:35,340 --> 00:24:37,460
domain that uh the same ones we see that

535
00:24:37,460 --> 00:24:41,720
there has been some modifications

536
00:24:43,690 --> 00:24:51,179
[Applause]

537
00:24:51,179 --> 00:24:55,159
so back to the side

538
00:24:56,400 --> 00:25:00,240
um so uh now the question is well uh

539
00:25:00,240 --> 00:25:02,760
this should not be possible due to the

540
00:25:02,760 --> 00:25:05,880
IUN menu is a way to protect against dma

541
00:25:05,880 --> 00:25:07,020
attacks

542
00:25:07,020 --> 00:25:09,240
uh well the thing is by default on

543
00:25:09,240 --> 00:25:12,799
Ubuntu is not available

544
00:25:21,600 --> 00:25:25,080
so here is some Channel loads that I had

545
00:25:25,080 --> 00:25:28,500
when I added this channel

546
00:25:28,500 --> 00:25:29,720
sorry

547
00:25:29,720 --> 00:25:32,580
when when I tried the same new session

548
00:25:32,580 --> 00:25:37,559
now the the dma was the

549
00:25:37,559 --> 00:25:40,140
Ayumi mu a lot that there was an attempt

550
00:25:40,140 --> 00:25:42,240
to ruin memory around there was not the

551
00:25:42,240 --> 00:25:45,179
beat which allowed this Memorial with to

552
00:25:45,179 --> 00:25:46,919
business at all so the attempt was

553
00:25:46,919 --> 00:25:48,179
blocked

554
00:25:48,179 --> 00:25:50,240
so we cannot switch

555
00:25:50,240 --> 00:25:53,220
against the access of

556
00:25:53,220 --> 00:25:57,179
Wi-Fi chips dmas

557
00:25:58,559 --> 00:26:01,200
so at first

558
00:26:01,200 --> 00:26:03,419
my grade wanted to transmit the file and

559
00:26:03,419 --> 00:26:06,240
the firmware was it

560
00:26:06,240 --> 00:26:09,480
why did this happen no we have some

561
00:26:09,480 --> 00:26:11,039
tools to better understand what was

562
00:26:11,039 --> 00:26:12,720
going on and the answer is because

563
00:26:12,720 --> 00:26:16,500
tunnel directing setup 200 generate the

564
00:26:16,500 --> 00:26:18,720
engine setup is a way when you have two

565
00:26:18,720 --> 00:26:20,700
plugins related to a Wi-Fi adjustment to

566
00:26:20,700 --> 00:26:22,919
directly establish documentation between

567
00:26:22,919 --> 00:26:25,740
these two clients the issue there was

568
00:26:25,740 --> 00:26:28,799
was that the smartphone on intel was

569
00:26:28,799 --> 00:26:31,320
using incompatible implementation of

570
00:26:31,320 --> 00:26:33,779
tdls and with treated and assertion

571
00:26:33,779 --> 00:26:35,520
error in

572
00:26:35,520 --> 00:26:39,539
I have a in a Wi-Fi in Intel firmware

573
00:26:39,539 --> 00:26:41,940
which dot reset and this was actually

574
00:26:41,940 --> 00:26:45,779
fixed uh some years ago so if you update

575
00:26:45,779 --> 00:26:50,279
your firmware this actually the Wi-Fi

576
00:26:50,279 --> 00:26:53,400
chip you know advertise that it supports

577
00:26:53,400 --> 00:26:56,059
tdls

578
00:26:57,600 --> 00:27:00,840
all the tools uh available on on this

579
00:27:00,840 --> 00:27:04,200
GitHub repository uh yeah we I presented

580
00:27:04,200 --> 00:27:06,059
some vulnerabilities to achieve your

581
00:27:06,059 --> 00:27:07,980
execution on the chip which we have

582
00:27:07,980 --> 00:27:09,900
passed fetched by Intel two days ago

583
00:27:09,900 --> 00:27:12,600
this enables verifying some security

584
00:27:12,600 --> 00:27:14,760
protection on the chip for now we don't

585
00:27:14,760 --> 00:27:16,679
have remote for the solution from Wi-Fi

586
00:27:16,679 --> 00:27:20,039
it will be something for the future but

587
00:27:20,039 --> 00:27:22,799
for sure the Wi-Fi chip impairments very

588
00:27:22,799 --> 00:27:26,520
complex features Wi-Fi fasting there's

589
00:27:26,520 --> 00:27:29,279
also Bluetooth nearby which was on the

590
00:27:29,279 --> 00:27:30,539
same shift where you have Bluetooth on

591
00:27:30,539 --> 00:27:33,539
the Wi-Fi and there's also wait on where

592
00:27:33,539 --> 00:27:35,159
you always learn which is very

593
00:27:35,159 --> 00:27:37,500
interesting because basically your Wi-Fi

594
00:27:37,500 --> 00:27:39,659
chip is implemented from prototradors to

595
00:27:39,659 --> 00:27:41,520
just keep it connected when you work

596
00:27:41,520 --> 00:27:44,159
through on your computer I suspended so

597
00:27:44,159 --> 00:27:47,279
there is much download for over security

598
00:27:47,279 --> 00:27:50,000
researchers

599
00:27:50,640 --> 00:27:54,779
um now I see that I was very faster than

600
00:27:54,779 --> 00:27:57,000
intended so I have much time for

601
00:27:57,000 --> 00:27:58,620
question or some time for more

602
00:27:58,620 --> 00:28:00,900
demonstration which was right next to it

603
00:28:00,900 --> 00:28:02,900
I have some concern where I can actually

604
00:28:02,900 --> 00:28:05,460
do some demonstration with the tools

605
00:28:05,460 --> 00:28:07,080
which actually based on detail so I

606
00:28:07,080 --> 00:28:09,480
don't know what you want to do and uh

607
00:28:09,480 --> 00:28:11,220
I'm available for questions

608
00:28:11,220 --> 00:28:13,120
thanks for your attention

609
00:28:13,120 --> 00:28:15,890
[Applause]

610
00:28:15,890 --> 00:28:18,999
[Music]

611
00:28:22,860 --> 00:28:25,949
[Music]

