1
00:00:01,700 --> 00:00:04,810
[Music]

2
00:00:07,700 --> 00:00:11,040
all right Aloha and welcome to a talk on

3
00:00:11,040 --> 00:00:13,259
uncovering Stolen algorithms in

4
00:00:13,259 --> 00:00:16,020
commercial products I'm Patrick Wardle

5
00:00:16,020 --> 00:00:17,820
the founder of The Objective C

6
00:00:17,820 --> 00:00:20,220
foundation and today I'm stoked to be

7
00:00:20,220 --> 00:00:22,439
co-presenting with my good colleague and

8
00:00:22,439 --> 00:00:24,660
friend Tom McGuire who's also an

9
00:00:24,660 --> 00:00:27,779
instructor at Johns Hopkins

10
00:00:27,779 --> 00:00:31,019
so today we want to talk to you about an

11
00:00:31,019 --> 00:00:33,480
issue we believe is a systemic issue

12
00:00:33,480 --> 00:00:35,280
affecting our community which is the

13
00:00:35,280 --> 00:00:37,860
widespread use of stolen algorithms in

14
00:00:37,860 --> 00:00:39,660
commercial products figured if it

15
00:00:39,660 --> 00:00:41,399
happened to us it's happening to others

16
00:00:41,399 --> 00:00:43,920
might be happening to you as well

17
00:00:43,920 --> 00:00:46,920
so here we'll first introduce the victim

18
00:00:46,920 --> 00:00:49,620
application we'll then talk about how we

19
00:00:49,620 --> 00:00:52,079
were able to find and prove that

20
00:00:52,079 --> 00:00:54,780
commercial products were using its

21
00:00:54,780 --> 00:00:56,879
closed Source algorithms and then show

22
00:00:56,879 --> 00:00:58,680
how we were ultimately able to resolve

23
00:00:58,680 --> 00:01:01,920
this in a fairly win-win manner

24
00:01:01,920 --> 00:01:04,379
so first let's talk about oversight the

25
00:01:04,379 --> 00:01:06,659
victim whose closed Source algorithms

26
00:01:06,659 --> 00:01:08,659
were stolen by at least three separate

27
00:01:08,659 --> 00:01:11,820
unrelated commercial entities in this

28
00:01:11,820 --> 00:01:13,740
part of the talk we will discuss

29
00:01:13,740 --> 00:01:16,740
oversight and describe to the specifics

30
00:01:16,740 --> 00:01:19,920
of its algorithms its internals this is

31
00:01:19,920 --> 00:01:22,200
relevant to prove that its code was

32
00:01:22,200 --> 00:01:24,180
stolen and implemented in commercial

33
00:01:24,180 --> 00:01:25,560
products

34
00:01:25,560 --> 00:01:28,020
so oversight is a pretty simple pretty

35
00:01:28,020 --> 00:01:30,600
straightforward utility written by Yours

36
00:01:30,600 --> 00:01:33,900
Truly it's released in 2016 as a free

37
00:01:33,900 --> 00:01:37,140
but closed sourced application it goes

38
00:01:37,140 --> 00:01:39,299
pretty simple pretty straightforward to

39
00:01:39,299 --> 00:01:41,640
alert you anytime anything accesses

40
00:01:41,640 --> 00:01:44,100
either the mic or the webcam and

41
00:01:44,100 --> 00:01:46,799
identify exactly what process is

42
00:01:46,799 --> 00:01:49,740
responsible for such access this ability

43
00:01:49,740 --> 00:01:52,439
to be able to identify the active

44
00:01:52,439 --> 00:01:54,840
process that's accessing or the mic the

45
00:01:54,840 --> 00:01:57,060
mic or the webcam was oversight's most

46
00:01:57,060 --> 00:01:59,280
unique feature no other tool had this

47
00:01:59,280 --> 00:02:01,619
capability at the time

48
00:02:01,619 --> 00:02:04,200
now oversight was predominantly designed

49
00:02:04,200 --> 00:02:06,899
to detect stealthy malware that might

50
00:02:06,899 --> 00:02:09,060
slip onto your system with zero day

51
00:02:09,060 --> 00:02:10,440
vulnerability

52
00:02:10,440 --> 00:02:12,060
if such malware though attempted to

53
00:02:12,060 --> 00:02:14,520
access the mic or the webcam either to

54
00:02:14,520 --> 00:02:16,379
spy on you or perhaps you know turn on

55
00:02:16,379 --> 00:02:18,360
the mic to turn your system into a room

56
00:02:18,360 --> 00:02:20,760
audio capture device oversight would

57
00:02:20,760 --> 00:02:23,340
alert on this Behavior this action even

58
00:02:23,340 --> 00:02:25,920
if it had no a prior a priori knowledge

59
00:02:25,920 --> 00:02:28,200
of the malware

60
00:02:28,200 --> 00:02:30,120
turns out oversight is pretty good at

61
00:02:30,120 --> 00:02:31,680
detecting zero day vulnerabilities as

62
00:02:31,680 --> 00:02:33,720
well especially those targeting mic and

63
00:02:33,720 --> 00:02:36,720
webcam access for example remote bugs in

64
00:02:36,720 --> 00:02:39,239
Zoom or even zero days exploited by an

65
00:02:39,239 --> 00:02:40,920
hour on the slides we can see some

66
00:02:40,920 --> 00:02:42,840
examples of oversight and action

67
00:02:42,840 --> 00:02:45,780
detecting such exploits

68
00:02:45,780 --> 00:02:48,420
finally oversight rather unintentionally

69
00:02:48,420 --> 00:02:51,000
played a pivotal role in covering good

70
00:02:51,000 --> 00:02:53,940
apps behaving badly for example it

71
00:02:53,940 --> 00:02:56,459
uncovered the fact that Shazam on Mac OS

72
00:02:56,459 --> 00:02:59,459
used to always listen even when turned

73
00:02:59,459 --> 00:03:02,580
off not ideal

74
00:03:02,580 --> 00:03:04,920
now back to oversight's killer feature

75
00:03:04,920 --> 00:03:06,959
this is the ability to identify as I

76
00:03:06,959 --> 00:03:08,879
mentioned what process is accessing the

77
00:03:08,879 --> 00:03:11,580
mic or the webcam obviously this is an

78
00:03:11,580 --> 00:03:14,159
essential feature right if it's Zoom

79
00:03:14,159 --> 00:03:16,560
Skype FaceTime this should be allowed

80
00:03:16,560 --> 00:03:18,360
right we might not even want to alert

81
00:03:18,360 --> 00:03:19,980
the user in this scenario but if it's

82
00:03:19,980 --> 00:03:21,480
some nation-state malware that has

83
00:03:21,480 --> 00:03:23,459
surreptitiously got onto your device and

84
00:03:23,459 --> 00:03:25,019
is trying to spy on you via the micro

85
00:03:25,019 --> 00:03:27,239
webcam obviously this is something that

86
00:03:27,239 --> 00:03:29,940
oversight should alert on as I mentioned

87
00:03:29,940 --> 00:03:31,440
at the time no other tool had this

88
00:03:31,440 --> 00:03:34,739
capability question is why not well as

89
00:03:34,739 --> 00:03:36,780
we can see on the slide though it's

90
00:03:36,780 --> 00:03:39,060
really easy in about 10 lines of code to

91
00:03:39,060 --> 00:03:40,860
get a notification from the operating

92
00:03:40,860 --> 00:03:43,560
system from Mac OS that the mic or the

93
00:03:43,560 --> 00:03:45,900
webcam has been activated this

94
00:03:45,900 --> 00:03:47,580
notification contains no information

95
00:03:47,580 --> 00:03:50,640
about who done it

96
00:03:50,640 --> 00:03:52,799
so now let's look exactly at how

97
00:03:52,799 --> 00:03:55,200
oversight was able to identify the

98
00:03:55,200 --> 00:03:56,879
responsible process the process that

99
00:03:56,879 --> 00:03:58,260
again was trying to access either the

100
00:03:58,260 --> 00:04:00,180
mic or the webcam now it's a bit

101
00:04:00,180 --> 00:04:02,280
involved and leverages various

102
00:04:02,280 --> 00:04:05,340
undocumented features of Mac OS now

103
00:04:05,340 --> 00:04:07,080
understanding this approach though is

104
00:04:07,080 --> 00:04:09,480
necessary for finding it both in

105
00:04:09,480 --> 00:04:11,280
commercial products and then also you

106
00:04:11,280 --> 00:04:12,659
know with an understanding of exactly

107
00:04:12,659 --> 00:04:15,659
how it works allows us to prove its uh

108
00:04:15,659 --> 00:04:17,339
stolen use

109
00:04:17,339 --> 00:04:19,139
so there's three steps that oversight

110
00:04:19,139 --> 00:04:20,519
uses and I'll go through each of those

111
00:04:20,519 --> 00:04:21,600
now

112
00:04:21,600 --> 00:04:25,020
first it enumerates mock messages so

113
00:04:25,020 --> 00:04:26,820
when a process wants to access either

114
00:04:26,820 --> 00:04:29,940
the mic or the webcam under the hood the

115
00:04:29,940 --> 00:04:32,160
system apis or Frameworks that are

116
00:04:32,160 --> 00:04:34,440
talking to either the mic or the webcam

117
00:04:34,440 --> 00:04:36,120
will send what is known as a mock

118
00:04:36,120 --> 00:04:38,160
message to either the mic or the camera

119
00:04:38,160 --> 00:04:40,620
Daemon the system process responsible

120
00:04:40,620 --> 00:04:42,660
for responsible for directly interacting

121
00:04:42,660 --> 00:04:44,400
with the micro the webcam

122
00:04:44,400 --> 00:04:47,220
so oversight says cool let me enumerate

123
00:04:47,220 --> 00:04:49,139
these mock messages so I can get an idea

124
00:04:49,139 --> 00:04:51,660
of the processes who have recently or

125
00:04:51,660 --> 00:04:53,820
are currently accessing the mic in the

126
00:04:53,820 --> 00:04:55,080
webcam again with the goal of

127
00:04:55,080 --> 00:04:57,000
identifying which one is the the main

128
00:04:57,000 --> 00:04:58,500
one the active one

129
00:04:58,500 --> 00:05:00,660
now unfortunately Apple doesn't allow

130
00:05:00,660 --> 00:05:02,820
you to enumerate mock messages from

131
00:05:02,820 --> 00:05:05,460
other processes so oversight can't do

132
00:05:05,460 --> 00:05:07,500
that directly turns out though that Mac

133
00:05:07,500 --> 00:05:10,560
OS ships with a utility called lsmp list

134
00:05:10,560 --> 00:05:13,080
mock ports and this has the necessary

135
00:05:13,080 --> 00:05:16,380
entitlements to do this enumeration

136
00:05:16,380 --> 00:05:18,600
so what oversight does pretty basic in

137
00:05:18,600 --> 00:05:21,180
code is it just executes lsmp we can see

138
00:05:21,180 --> 00:05:23,400
this on the slide executing lsnp is

139
00:05:23,400 --> 00:05:24,720
super straightforward it's command line

140
00:05:24,720 --> 00:05:27,539
utility built into mock OS now it's a

141
00:05:27,539 --> 00:05:29,100
little harder a little more work though

142
00:05:29,100 --> 00:05:31,740
to parse its output as lsmp wasn't

143
00:05:31,740 --> 00:05:34,080
designed to be consumed programmatically

144
00:05:34,080 --> 00:05:35,639
the output from it so we have some

145
00:05:35,639 --> 00:05:36,960
snippets on the slide we can see

146
00:05:36,960 --> 00:05:38,820
basically how about how I go about

147
00:05:38,820 --> 00:05:41,220
parsing that output to pull out the

148
00:05:41,220 --> 00:05:42,960
processes that have sent the mic or the

149
00:05:42,960 --> 00:05:46,979
web camera demon unlock messages

150
00:05:46,979 --> 00:05:49,259
now as I mentioned the output from lsnp

151
00:05:49,259 --> 00:05:51,300
might include several processes and

152
00:05:51,300 --> 00:05:52,320
we're really interested in the one

153
00:05:52,320 --> 00:05:54,000
that's actively accessing the mic or the

154
00:05:54,000 --> 00:05:55,440
webcam oversight needed another

155
00:05:55,440 --> 00:05:57,300
mechanism as well

156
00:05:57,300 --> 00:05:58,800
so I did some more reverse engineering

157
00:05:58,800 --> 00:06:00,840
and I found out that in the i o kit

158
00:06:00,840 --> 00:06:02,940
registry which is kind of similar to the

159
00:06:02,940 --> 00:06:04,860
registry on Windows there are various

160
00:06:04,860 --> 00:06:07,139
undocumented key value pairs that have a

161
00:06:07,139 --> 00:06:08,940
list again of processes that have

162
00:06:08,940 --> 00:06:10,740
recently accessed the mic or the webcam

163
00:06:10,740 --> 00:06:13,080
or are currently doing so

164
00:06:13,080 --> 00:06:15,840
again those these don't have time stamps

165
00:06:15,840 --> 00:06:17,460
so we don't know exactly which one it is

166
00:06:17,460 --> 00:06:18,360
yet

167
00:06:18,360 --> 00:06:20,039
so again here's the code from oversight

168
00:06:20,039 --> 00:06:22,199
it's internal algorithms and we can see

169
00:06:22,199 --> 00:06:23,880
we're directly accessing the i o

170
00:06:23,880 --> 00:06:25,259
registry to get a list of these

171
00:06:25,259 --> 00:06:26,880
candidate processes

172
00:06:26,880 --> 00:06:28,560
luckily in this case we can directly

173
00:06:28,560 --> 00:06:30,479
access the i o registry we don't have to

174
00:06:30,479 --> 00:06:32,460
execute any other external command line

175
00:06:32,460 --> 00:06:34,680
utilities and as we can see on the slide

176
00:06:34,680 --> 00:06:36,180
what we're doing is we're looking for

177
00:06:36,180 --> 00:06:39,000
processes under the i o user Creator key

178
00:06:39,000 --> 00:06:42,120
under the iopm root domain

179
00:06:42,120 --> 00:06:43,319
again though once we get this

180
00:06:43,319 --> 00:06:45,180
information we kind of have to parse it

181
00:06:45,180 --> 00:06:46,860
out because again it's not designed to

182
00:06:46,860 --> 00:06:49,500
be ingested programmatically

183
00:06:49,500 --> 00:06:51,900
finally the last thing oversight does is

184
00:06:51,900 --> 00:06:54,300
generate a sample of candidate processes

185
00:06:54,300 --> 00:06:56,880
to get a stack or back Trace from them

186
00:06:56,880 --> 00:06:59,220
we need this final step because the list

187
00:06:59,220 --> 00:07:02,160
of processes from both lsmp and the i o

188
00:07:02,160 --> 00:07:04,500
kit registry might not just have a

189
00:07:04,500 --> 00:07:05,880
single process

190
00:07:05,880 --> 00:07:07,620
and we're looking again for the exact

191
00:07:07,620 --> 00:07:09,780
one that's accessing the mic webcam and

192
00:07:09,780 --> 00:07:12,479
also we want to avoid false positives

193
00:07:12,479 --> 00:07:14,039
similar to enumerating mock messages

194
00:07:14,039 --> 00:07:16,380
apple does not allow you to sample or

195
00:07:16,380 --> 00:07:18,120
read the remote memory of other

196
00:07:18,120 --> 00:07:20,280
processes so yet again we have to

197
00:07:20,280 --> 00:07:22,560
leverage a built-in command line utility

198
00:07:22,560 --> 00:07:24,419
in Mac OS that has the correct

199
00:07:24,419 --> 00:07:26,759
entitlements specifically the sample

200
00:07:26,759 --> 00:07:28,139
utility

201
00:07:28,139 --> 00:07:29,580
so on the slide we can see we just

202
00:07:29,580 --> 00:07:31,800
execute the sample utility grab its

203
00:07:31,800 --> 00:07:33,780
output and then parse it specifically

204
00:07:33,780 --> 00:07:36,060
we're looking for the string CM

205
00:07:36,060 --> 00:07:39,419
underscore i o graph do work this is a

206
00:07:39,419 --> 00:07:42,300
method name an API that will be called

207
00:07:42,300 --> 00:07:44,819
by a process that is actively accessing

208
00:07:44,819 --> 00:07:46,380
the micro the webcam and again since

209
00:07:46,380 --> 00:07:48,060
we've just sampled the process we can

210
00:07:48,060 --> 00:07:50,280
see if the stack or thread Trace has

211
00:07:50,280 --> 00:07:52,020
this key

212
00:07:52,020 --> 00:07:53,460
if you have these three steps oversight

213
00:07:53,460 --> 00:07:55,680
was able to accurately and consistently

214
00:07:55,680 --> 00:07:57,840
identify the process responsible for

215
00:07:57,840 --> 00:07:59,699
accessing the micro webcam and coupled

216
00:07:59,699 --> 00:08:02,280
with the fact that it was free made it

217
00:08:02,280 --> 00:08:05,160
fairly popular wildly popular

218
00:08:05,160 --> 00:08:06,840
unfortunately though this popularity

219
00:08:06,840 --> 00:08:08,460
came at a cost

220
00:08:08,460 --> 00:08:10,080
so now we're going to talk about how

221
00:08:10,080 --> 00:08:13,020
oversight was torn apart and its Secrets

222
00:08:13,020 --> 00:08:16,199
shamelessly stolen for commercial gain

223
00:08:16,199 --> 00:08:18,300
first though how is this even possible

224
00:08:18,300 --> 00:08:19,860
Right did someone hack into my computer

225
00:08:19,860 --> 00:08:22,020
steal the source code no it's actually

226
00:08:22,020 --> 00:08:24,360
far simpler like that than that really

227
00:08:24,360 --> 00:08:26,580
anybody armed with disassembler and

228
00:08:26,580 --> 00:08:27,780
basic reverse engineering knowledge

229
00:08:27,780 --> 00:08:29,460
could simply reverse engineer the

230
00:08:29,460 --> 00:08:31,560
oversight application technically I'm

231
00:08:31,560 --> 00:08:34,080
sure you'll do ethically legally not so

232
00:08:34,080 --> 00:08:35,880
much especially considering this was

233
00:08:35,880 --> 00:08:38,339
stealing a free tool from a non-profit

234
00:08:38,339 --> 00:08:39,899
for commercial game to me this is a

235
00:08:39,899 --> 00:08:42,120
clear line that was crossed

236
00:08:42,120 --> 00:08:44,640
also it's worth noting that oversight's

237
00:08:44,640 --> 00:08:47,040
algorithm is first and foremost very

238
00:08:47,040 --> 00:08:48,480
unique right it's based on a lot of

239
00:08:48,480 --> 00:08:49,560
reverse engineering a lot of

240
00:08:49,560 --> 00:08:51,180
undocumented features of the operating

241
00:08:51,180 --> 00:08:53,519
system and in fact if you Google the

242
00:08:53,519 --> 00:08:55,920
core components of the algorithm there's

243
00:08:55,920 --> 00:08:57,540
no hits on Google because again it's

244
00:08:57,540 --> 00:08:59,040
undocumented

245
00:08:59,040 --> 00:09:00,540
also and I'm a little embarrassed to

246
00:09:00,540 --> 00:09:02,040
admit this the algorithm is a little

247
00:09:02,040 --> 00:09:04,380
janky I mean first and foremost I'm a

248
00:09:04,380 --> 00:09:06,300
security researcher not a software

249
00:09:06,300 --> 00:09:07,380
engineer

250
00:09:07,380 --> 00:09:09,779
and you know to give Credence to this

251
00:09:09,779 --> 00:09:11,700
claim that oversights you know maybe a

252
00:09:11,700 --> 00:09:13,380
little brittle we'll see that when Apple

253
00:09:13,380 --> 00:09:15,959
pushed out recent security updates to

254
00:09:15,959 --> 00:09:18,720
Mac OS oversight broke horribly

255
00:09:18,720 --> 00:09:21,000
Silver Lining to this though is if

256
00:09:21,000 --> 00:09:22,980
corporations copied oversight's code

257
00:09:22,980 --> 00:09:25,680
verbatim this means that their code

258
00:09:25,680 --> 00:09:27,779
might also have these undocumented

259
00:09:27,779 --> 00:09:30,360
strings and maybe even the same bugs the

260
00:09:30,360 --> 00:09:32,279
analogy I like to give is we think about

261
00:09:32,279 --> 00:09:34,620
plagiarism right if someone copied what

262
00:09:34,620 --> 00:09:36,620
you wrote including made up words

263
00:09:36,620 --> 00:09:39,480
undocumented features or your spelling

264
00:09:39,480 --> 00:09:41,820
and grammar mistakes bugs if you caught

265
00:09:41,820 --> 00:09:43,320
them doing this it would be pretty

266
00:09:43,320 --> 00:09:45,660
trivial to prove

267
00:09:45,660 --> 00:09:47,700
so how did this all begin well you know

268
00:09:47,700 --> 00:09:49,680
I never thought that oversight would be

269
00:09:49,680 --> 00:09:51,420
stolen so I wasn't actually even looking

270
00:09:51,420 --> 00:09:53,580
for this but a few years back I was

271
00:09:53,580 --> 00:09:56,580
analyzing a binary that had been flagged

272
00:09:56,580 --> 00:09:59,040
as malicious for a client

273
00:09:59,040 --> 00:10:00,779
as soon as I began looking at it I

274
00:10:00,779 --> 00:10:02,700
realized it wasn't really malware it was

275
00:10:02,700 --> 00:10:04,980
more a potentially unwanted program or

276
00:10:04,980 --> 00:10:07,140
potentially unwanted application what

277
00:10:07,140 --> 00:10:09,000
are those Security Programs that a lot

278
00:10:09,000 --> 00:10:10,680
of times will tell users their systems

279
00:10:10,680 --> 00:10:12,180
are infected even though they're not and

280
00:10:12,180 --> 00:10:13,260
then try to get credit card information

281
00:10:13,260 --> 00:10:16,260
and I was about to ignore it and move on

282
00:10:16,260 --> 00:10:17,580
but then I noticed something very

283
00:10:17,580 --> 00:10:19,980
strange it was executing the lsnp

284
00:10:19,980 --> 00:10:22,640
utility now this again is kind of a

285
00:10:22,640 --> 00:10:25,620
undocumented feature component of Mac OS

286
00:10:25,620 --> 00:10:27,120
and I was kind of like that's

287
00:10:27,120 --> 00:10:29,459
interesting also I consulted the the

288
00:10:29,459 --> 00:10:31,019
marketing materials for this utility and

289
00:10:31,019 --> 00:10:33,000
I shot I saw that they claimed to

290
00:10:33,000 --> 00:10:35,640
provide protection of the mic in the

291
00:10:35,640 --> 00:10:37,800
webcam for privacy reasons so I dug into

292
00:10:37,800 --> 00:10:39,000
this more and more and the more I did I

293
00:10:39,000 --> 00:10:40,980
was like I've seen this code before this

294
00:10:40,980 --> 00:10:43,200
looks like oversight

295
00:10:43,200 --> 00:10:45,420
now around this time Apple also pushed

296
00:10:45,420 --> 00:10:47,279
an update which broke oversight

297
00:10:47,279 --> 00:10:49,560
mentioned that before yes kind of

298
00:10:49,560 --> 00:10:51,720
brittle so the top of the slide we have

299
00:10:51,720 --> 00:10:54,000
some bug reports that were submitted by

300
00:10:54,000 --> 00:10:56,399
users of oversight we can see it had

301
00:10:56,399 --> 00:10:59,220
massive memory leaks incorrect reporting

302
00:10:59,220 --> 00:11:01,019
although that was really something that

303
00:11:01,019 --> 00:11:03,180
Apple broke on M1 systems but regardless

304
00:11:03,180 --> 00:11:05,100
oversight head bugs

305
00:11:05,100 --> 00:11:07,079
so I did what every

306
00:11:07,079 --> 00:11:08,640
software developer does and you know hop

307
00:11:08,640 --> 00:11:10,440
on Google to like find out what the

308
00:11:10,440 --> 00:11:13,140
fixes are and I found users complaining

309
00:11:13,140 --> 00:11:15,600
about similar issues my memory is being

310
00:11:15,600 --> 00:11:17,519
used the the camera is always on when

311
00:11:17,519 --> 00:11:19,380
it's not supposed to and I first thought

312
00:11:19,380 --> 00:11:22,079
wow sorry y'all like I know Mike this

313
00:11:22,079 --> 00:11:24,180
this is a popular utility but I feel

314
00:11:24,180 --> 00:11:25,500
really bad for you know crushing all

315
00:11:25,500 --> 00:11:27,720
your computers well it turns out there

316
00:11:27,720 --> 00:11:29,279
are complaints about these same exact

317
00:11:29,279 --> 00:11:30,779
bugs that were in oversight were

318
00:11:30,779 --> 00:11:32,640
actually attributed to other processes

319
00:11:32,640 --> 00:11:36,180
other programs other software and I was

320
00:11:36,180 --> 00:11:38,519
like wait did other companies copy my

321
00:11:38,519 --> 00:11:40,440
code again so verbatim that they cover

322
00:11:40,440 --> 00:11:42,420
copied bugs and all and as we'll see

323
00:11:42,420 --> 00:11:44,339
that was the case

324
00:11:44,339 --> 00:11:45,899
so at this point I decided to do a

325
00:11:45,899 --> 00:11:48,420
little more proactive hunting and maybe

326
00:11:48,420 --> 00:11:50,279
looking for other perpetrators so I put

327
00:11:50,279 --> 00:11:52,019
together a simple Yara rule that was

328
00:11:52,019 --> 00:11:54,600
based on oversight's algorithm now many

329
00:11:54,600 --> 00:11:56,339
of you are probably familiar with using

330
00:11:56,339 --> 00:11:58,860
Yara detections for malware signatures

331
00:11:58,860 --> 00:12:00,959
but of course you can use it to detect

332
00:12:00,959 --> 00:12:03,360
any binaries so for example the one on

333
00:12:03,360 --> 00:12:05,220
the slide just looking for the lsmp

334
00:12:05,220 --> 00:12:08,700
string wrote a Yar roll ran this a bunch

335
00:12:08,700 --> 00:12:10,260
you know across the internet on large

336
00:12:10,260 --> 00:12:13,040
corpuses of binaries and again found

337
00:12:13,040 --> 00:12:15,180
several binaries several commercial

338
00:12:15,180 --> 00:12:17,279
products that based on initial triage

339
00:12:17,279 --> 00:12:21,060
looked suspiciously similar to oversight

340
00:12:21,060 --> 00:12:23,459
so at this point I had a handful of

341
00:12:23,459 --> 00:12:25,740
commercial products that at first glance

342
00:12:25,740 --> 00:12:27,600
appeared to be very similar to my

343
00:12:27,600 --> 00:12:28,560
utility

344
00:12:28,560 --> 00:12:30,660
of course though we had to dig deeper to

345
00:12:30,660 --> 00:12:32,100
prove without a doubt that the code in

346
00:12:32,100 --> 00:12:34,200
these commercial products came directly

347
00:12:34,200 --> 00:12:36,720
from oversight so now Tom is going to

348
00:12:36,720 --> 00:12:38,459
talk about how we were able to prove

349
00:12:38,459 --> 00:12:41,040
equivalency between oversight and these

350
00:12:41,040 --> 00:12:42,540
commercial products

351
00:12:42,540 --> 00:12:44,459
all right thanks Patrick so as Patrick

352
00:12:44,459 --> 00:12:47,820
noted uh we have three different samples

353
00:12:47,820 --> 00:12:49,560
effectively from the search of what we

354
00:12:49,560 --> 00:12:51,660
can look through and so what we tried to

355
00:12:51,660 --> 00:12:54,300
do was really find out where the

356
00:12:54,300 --> 00:12:56,579
similarities were with respect to the

357
00:12:56,579 --> 00:12:57,959
code from oversight and the code from

358
00:12:57,959 --> 00:13:00,300
these products that had shown up either

359
00:13:00,300 --> 00:13:02,040
from the malware analysis from bug

360
00:13:02,040 --> 00:13:04,860
reports or from the r rules and for this

361
00:13:04,860 --> 00:13:06,060
section if you look at the left hand

362
00:13:06,060 --> 00:13:09,600
side this is all oversights code and on

363
00:13:09,600 --> 00:13:11,399
the right hand side is the product and

364
00:13:11,399 --> 00:13:12,300
we'll go through three different

365
00:13:12,300 --> 00:13:15,440
products here at this point the

366
00:13:15,440 --> 00:13:17,760
oversight's still closed source and as

367
00:13:17,760 --> 00:13:19,380
Patrick mentioned the algorithm itself

368
00:13:19,380 --> 00:13:21,540
is sort of the uniqueness about the way

369
00:13:21,540 --> 00:13:23,399
we can figure out and tie these back

370
00:13:23,399 --> 00:13:25,740
together to oversight's initial

371
00:13:25,740 --> 00:13:28,440
algorithm and as Patrick noted the

372
00:13:28,440 --> 00:13:30,420
algorithm is pretty brittle and

373
00:13:30,420 --> 00:13:32,160
especially when we start looking here on

374
00:13:32,160 --> 00:13:34,860
this slide we see the usage of lsnp

375
00:13:34,860 --> 00:13:37,260
executing it and then parsing it sort of

376
00:13:37,260 --> 00:13:39,300
in an inefficient way I'll say on

377
00:13:39,300 --> 00:13:41,820
Patrick's behalf right there could be a

378
00:13:41,820 --> 00:13:43,079
lot of different ways that you could do

379
00:13:43,079 --> 00:13:44,639
this right your regex would be a better

380
00:13:44,639 --> 00:13:46,740
way to do it but if you look on the

381
00:13:46,740 --> 00:13:48,300
right hand side you don't really see

382
00:13:48,300 --> 00:13:49,860
that you don't see any optimizations

383
00:13:49,860 --> 00:13:51,899
that are done on this so This sort of

384
00:13:51,899 --> 00:13:55,019
gives us a little bit of assurances that

385
00:13:55,019 --> 00:13:57,420
this particular application is starting

386
00:13:57,420 --> 00:14:00,180
to look for the camera and microphone in

387
00:14:00,180 --> 00:14:01,860
a similar way that oversight was doing

388
00:14:01,860 --> 00:14:05,040
it right executing lsnp splitting on the

389
00:14:05,040 --> 00:14:06,540
parentheses looking for the pit inside

390
00:14:06,540 --> 00:14:08,760
right all the way down to those details

391
00:14:08,760 --> 00:14:11,160
if you even look we have mentioned of

392
00:14:11,160 --> 00:14:13,139
the the method names those are very

393
00:14:13,139 --> 00:14:15,660
similar but when you're reversing things

394
00:14:15,660 --> 00:14:17,639
right this isn't necessarily conclusive

395
00:14:17,639 --> 00:14:19,680
this could be another method for looking

396
00:14:19,680 --> 00:14:22,800
at other components as well

397
00:14:22,800 --> 00:14:24,420
but when we start digging a little bit

398
00:14:24,420 --> 00:14:26,040
further and we think about what Patrick

399
00:14:26,040 --> 00:14:27,899
talked about about sort of the three

400
00:14:27,899 --> 00:14:30,000
unique components of the oversights

401
00:14:30,000 --> 00:14:32,820
algorithm we now see the second part of

402
00:14:32,820 --> 00:14:35,399
this following the first part and in

403
00:14:35,399 --> 00:14:37,260
this case it's also again the IR

404
00:14:37,260 --> 00:14:40,019
registry queries for the very same

405
00:14:40,019 --> 00:14:42,720
values key value pairs that oversight

406
00:14:42,720 --> 00:14:44,459
was using and again these are

407
00:14:44,459 --> 00:14:46,920
undocumented apis and undocumented

408
00:14:46,920 --> 00:14:50,160
components so it is a little unique in

409
00:14:50,160 --> 00:14:52,500
the way that it's going about executing

410
00:14:52,500 --> 00:14:54,600
this right going through looking for

411
00:14:54,600 --> 00:14:56,220
those splitting again we could do

412
00:14:56,220 --> 00:14:57,480
something a little bit more efficient

413
00:14:57,480 --> 00:15:00,480
but in this particular case we see the

414
00:15:00,480 --> 00:15:04,040
same methodology going through

415
00:15:04,139 --> 00:15:07,199
the third component to this sort of more

416
00:15:07,199 --> 00:15:09,360
is in my view is the unique one with

417
00:15:09,360 --> 00:15:12,240
respect to everything Apple provides the

418
00:15:12,240 --> 00:15:14,639
sample utility that allows you with you

419
00:15:14,639 --> 00:15:17,040
know appropriate privileges uh to sample

420
00:15:17,040 --> 00:15:19,500
processes to get stack trace and back

421
00:15:19,500 --> 00:15:22,199
traces so you can look for uh what it's

422
00:15:22,199 --> 00:15:25,079
executing in our particular case here

423
00:15:25,079 --> 00:15:27,360
uh one thing about this is it's pretty

424
00:15:27,360 --> 00:15:29,820
invasive right it stops the process has

425
00:15:29,820 --> 00:15:31,740
to go through and Sample it so you know

426
00:15:31,740 --> 00:15:34,380
it's not a passive component that is

427
00:15:34,380 --> 00:15:37,800
being utilized here so as as Pat noted

428
00:15:37,800 --> 00:15:39,720
the oversight algorithm takes the first

429
00:15:39,720 --> 00:15:42,360
two components intersects them and tries

430
00:15:42,360 --> 00:15:45,240
to see if there's a unique PID and if

431
00:15:45,240 --> 00:15:46,620
there isn't it goes on to this third

432
00:15:46,620 --> 00:15:50,459
step to try to find that unique PID that

433
00:15:50,459 --> 00:15:52,079
currently has access to the camera or

434
00:15:52,079 --> 00:15:54,959
microphone and if you look at this for

435
00:15:54,959 --> 00:15:57,180
the two products we have the oversight

436
00:15:57,180 --> 00:15:58,920
again on the left and on the right the

437
00:15:58,920 --> 00:16:00,660
unique nature here is the sample is

438
00:16:00,660 --> 00:16:03,300
executed but also what's being looked

439
00:16:03,300 --> 00:16:06,360
for is very unique right the cmio graph

440
00:16:06,360 --> 00:16:09,180
do work is the worker thread that when

441
00:16:09,180 --> 00:16:11,519
an application has access to the camera

442
00:16:11,519 --> 00:16:14,820
or the microphone this is the thread

443
00:16:14,820 --> 00:16:16,380
that will get kicked off and actually do

444
00:16:16,380 --> 00:16:18,899
prior to the processing so if it does

445
00:16:18,899 --> 00:16:20,579
currently have access to it it'll show

446
00:16:20,579 --> 00:16:22,320
up in the back Trace right so when we do

447
00:16:22,320 --> 00:16:24,360
the sampling we'll see that in there so

448
00:16:24,360 --> 00:16:26,040
that's why you're seeing seeing this be

449
00:16:26,040 --> 00:16:28,100
done in that way and again

450
00:16:28,100 --> 00:16:30,600
prior to the talk there wasn't very many

451
00:16:30,600 --> 00:16:32,880
cmio graph do work you'll see them

452
00:16:32,880 --> 00:16:36,019
related to some process crashes some

453
00:16:36,019 --> 00:16:38,160
resource usages but there aren't any

454
00:16:38,160 --> 00:16:41,339
related to this specific case so it is

455
00:16:41,339 --> 00:16:44,339
very unique so putting all three of

456
00:16:44,339 --> 00:16:45,720
these together kind of gives a really

457
00:16:45,720 --> 00:16:48,060
good picture of the algorithm that was

458
00:16:48,060 --> 00:16:51,540
in oversight is now in another product

459
00:16:51,540 --> 00:16:54,660
and so we kind of took this and to the

460
00:16:54,660 --> 00:16:57,199
next product as well and for this one

461
00:16:57,199 --> 00:16:59,699
that was just one product but now we

462
00:16:59,699 --> 00:17:01,199
look at this one and this is written in

463
00:17:01,199 --> 00:17:03,000
a different language right so this one's

464
00:17:03,000 --> 00:17:04,679
written in Swift so you can see that

465
00:17:04,679 --> 00:17:07,079
there was some level of effort to switch

466
00:17:07,079 --> 00:17:09,240
over to another programming language

467
00:17:09,240 --> 00:17:10,799
probably to fit into the framework and

468
00:17:10,799 --> 00:17:13,980
whatever the product is but if you look

469
00:17:13,980 --> 00:17:15,900
at it from the disassembly standpoint

470
00:17:15,900 --> 00:17:18,599
right it still matches up with the logic

471
00:17:18,599 --> 00:17:21,179
that oversight utilizes for the lsnp

472
00:17:21,179 --> 00:17:24,959
right executes split online split on the

473
00:17:24,959 --> 00:17:26,640
parentheses all right again there could

474
00:17:26,640 --> 00:17:28,380
have been a regex and everything going

475
00:17:28,380 --> 00:17:31,860
on here but this is showing that we

476
00:17:31,860 --> 00:17:34,200
still have in this product the first

477
00:17:34,200 --> 00:17:36,000
part of the algorithm as well

478
00:17:36,000 --> 00:17:37,860
uh and digging a little bit further we

479
00:17:37,860 --> 00:17:39,780
get the second part of the algorithm in

480
00:17:39,780 --> 00:17:41,280
this product

481
00:17:41,280 --> 00:17:43,740
looking at the i o registry the key

482
00:17:43,740 --> 00:17:46,620
value pair looking exactly for the same

483
00:17:46,620 --> 00:17:49,080
unique value that it is so that it can

484
00:17:49,080 --> 00:17:51,900
go identify the particular PID that has

485
00:17:51,900 --> 00:17:53,960
that camera microphone for the mock port

486
00:17:53,960 --> 00:17:56,520
in this particular case

487
00:17:56,520 --> 00:17:58,860
um it's pretty identical from those

488
00:17:58,860 --> 00:18:00,960
first two so this is a good indicator

489
00:18:00,960 --> 00:18:03,720
that this particular algorithm went over

490
00:18:03,720 --> 00:18:05,760
to this product as well

491
00:18:05,760 --> 00:18:08,400
when we look at the third product in

492
00:18:08,400 --> 00:18:09,240
this case

493
00:18:09,240 --> 00:18:11,520
we'll see that the three different

494
00:18:11,520 --> 00:18:13,380
components are very similar but there

495
00:18:13,380 --> 00:18:15,480
were some slight changes uh mainly

496
00:18:15,480 --> 00:18:17,640
trying to I guess enhance the parsing

497
00:18:17,640 --> 00:18:20,400
utilities so in this case the regex so

498
00:18:20,400 --> 00:18:22,380
there's a little bit of improvements

499
00:18:22,380 --> 00:18:24,900
upon those but nonetheless the the core

500
00:18:24,900 --> 00:18:27,320
logic exists and is still the same

501
00:18:27,320 --> 00:18:29,580
across those so here you're seeing at

502
00:18:29,580 --> 00:18:32,460
exec lsmp a split on the lines and it's

503
00:18:32,460 --> 00:18:34,559
going to be through regex looking for

504
00:18:34,559 --> 00:18:36,299
the pit again

505
00:18:36,299 --> 00:18:40,140
uh and nearly identical uh in the i o

506
00:18:40,140 --> 00:18:42,419
registry querying again you can see the

507
00:18:42,419 --> 00:18:43,520
particular

508
00:18:43,520 --> 00:18:46,200
value key value pairs that we see this

509
00:18:46,200 --> 00:18:48,780
is identical to the way that oversight

510
00:18:48,780 --> 00:18:49,980
does it

511
00:18:49,980 --> 00:18:52,799
and finally in this case we also see the

512
00:18:52,799 --> 00:18:55,380
execing of the sample utility and

513
00:18:55,380 --> 00:18:58,620
bringing in the cmio graph do work which

514
00:18:58,620 --> 00:19:00,200
is part of the camera microphone

515
00:19:00,200 --> 00:19:03,900
framework to do the analysis to

516
00:19:03,900 --> 00:19:07,020
determine if this particular process has

517
00:19:07,020 --> 00:19:09,059
the camera or microphone processing

518
00:19:09,059 --> 00:19:11,880
currently active inside of it right so

519
00:19:11,880 --> 00:19:15,080
again here we have three different

520
00:19:15,080 --> 00:19:17,520
products that now have these components

521
00:19:17,520 --> 00:19:19,200
the core components of the oversight

522
00:19:19,200 --> 00:19:20,660
algorithm

523
00:19:20,660 --> 00:19:23,039
embedded into them right and it's pretty

524
00:19:23,039 --> 00:19:25,140
conclusive that they've taken the

525
00:19:25,140 --> 00:19:27,240
algorithm from oversight and brought

526
00:19:27,240 --> 00:19:30,059
them over to their products okay

527
00:19:30,059 --> 00:19:32,640
so I'm going to get over to Pat let him

528
00:19:32,640 --> 00:19:34,860
finish up on some of the good news about

529
00:19:34,860 --> 00:19:35,760
this

530
00:19:35,760 --> 00:19:38,220
thanks Tom so at this point you know we

531
00:19:38,220 --> 00:19:40,500
clearly have indisputable proof that

532
00:19:40,500 --> 00:19:42,179
these products copied directly from

533
00:19:42,179 --> 00:19:44,460
oversight by reverse engineering and

534
00:19:44,460 --> 00:19:45,960
essentially stealing its its algorithm

535
00:19:45,960 --> 00:19:48,600
so you know I want to briefly End by

536
00:19:48,600 --> 00:19:50,160
talking about how we can resolve this

537
00:19:50,160 --> 00:19:54,260
and turn this into a happy-ish ending

538
00:19:54,600 --> 00:19:55,620
hopefully I was going to reach out to

539
00:19:55,620 --> 00:19:57,539
the perpetrators but I learned quickly

540
00:19:57,539 --> 00:19:59,820
there was somewhat of a winning approach

541
00:19:59,820 --> 00:20:01,500
which is first you really need to

542
00:20:01,500 --> 00:20:04,260
understand what your goals are do you

543
00:20:04,260 --> 00:20:07,799
want money do you want to you know talk

544
00:20:07,799 --> 00:20:09,059
about them publicly and burn them to the

545
00:20:09,059 --> 00:20:10,980
ground do you want them to remove the

546
00:20:10,980 --> 00:20:12,480
code really know what you want because

547
00:20:12,480 --> 00:20:14,220
when you approach them they're going to

548
00:20:14,220 --> 00:20:15,960
usually come back and say all right what

549
00:20:15,960 --> 00:20:17,400
do you want

550
00:20:17,400 --> 00:20:19,919
to figure that out first then also

551
00:20:19,919 --> 00:20:22,380
create proof right I think as Tom showed

552
00:20:22,380 --> 00:20:25,320
we had pretty irrefutable proof but you

553
00:20:25,320 --> 00:20:26,460
have to consider the fact that you're

554
00:20:26,460 --> 00:20:28,140
likely going to be talking to the legal

555
00:20:28,140 --> 00:20:29,820
team or the intellectual property team

556
00:20:29,820 --> 00:20:31,440
at these commercial or corporate

557
00:20:31,440 --> 00:20:33,240
entities and they might might not

558
00:20:33,240 --> 00:20:36,299
understand register values etc etc so

559
00:20:36,299 --> 00:20:38,280
yes provide that proof but then also try

560
00:20:38,280 --> 00:20:39,900
to explain it in a manner that's maybe a

561
00:20:39,900 --> 00:20:41,820
little more high level digestible with

562
00:20:41,820 --> 00:20:44,220
someone who might not have quite as low

563
00:20:44,220 --> 00:20:46,200
level of technical skills

564
00:20:46,200 --> 00:20:48,360
speaking of lawyers uh it's actually a

565
00:20:48,360 --> 00:20:49,799
really good idea to get your own lawyer

566
00:20:49,799 --> 00:20:51,780
as well this is optional but highly

567
00:20:51,780 --> 00:20:54,000
recommended I have nothing else to tell

568
00:20:54,000 --> 00:20:56,400
the companies that you have one I

569
00:20:56,400 --> 00:20:57,780
noticed in a few scenarios the companies

570
00:20:57,780 --> 00:20:58,919
didn't really take me that seriously

571
00:20:58,919 --> 00:21:00,600
when I mentioned I had a lawyer they

572
00:21:00,600 --> 00:21:03,120
really started chatting with me more uh

573
00:21:03,120 --> 00:21:05,520
I want to thank eff I worked directly

574
00:21:05,520 --> 00:21:06,780
with them if you're not familiar with

575
00:21:06,780 --> 00:21:09,059
eff they provide free legal services to

576
00:21:09,059 --> 00:21:10,380
Independent security researchers

577
00:21:10,380 --> 00:21:12,900
developers and non-profits so they were

578
00:21:12,900 --> 00:21:14,280
incredibly helpful so I really want to

579
00:21:14,280 --> 00:21:15,539
take a minute to acknowledge and thank

580
00:21:15,539 --> 00:21:18,120
them and then finally once you have you

581
00:21:18,120 --> 00:21:20,940
know your goals defined your in your

582
00:21:20,940 --> 00:21:23,520
proof and your legal team behind you you

583
00:21:23,520 --> 00:21:25,559
know Reach Out professionally don't just

584
00:21:25,559 --> 00:21:27,900
start flaming on Twitter unless their

585
00:21:27,900 --> 00:21:31,679
ultimate goal is just to cause chaos

586
00:21:31,679 --> 00:21:34,679
now what do these corporations want well

587
00:21:34,679 --> 00:21:36,000
it's good to know that the majority of

588
00:21:36,000 --> 00:21:38,640
them want an amicable resolution this is

589
00:21:38,640 --> 00:21:40,320
something I learned that when I started

590
00:21:40,320 --> 00:21:42,840
this I wasn't really aware of and that

591
00:21:42,840 --> 00:21:45,179
was the majority of the cases of

592
00:21:45,179 --> 00:21:47,820
infringement were really the result of a

593
00:21:47,820 --> 00:21:50,039
single arguably very naive developer

594
00:21:50,039 --> 00:21:52,919
versus the malice of entire Corporation

595
00:21:52,919 --> 00:21:54,539
so when I began I found these

596
00:21:54,539 --> 00:21:56,580
perpetrators I was kind of like man

597
00:21:56,580 --> 00:21:58,860
these evil corporations trying to like

598
00:21:58,860 --> 00:22:00,960
steal from you know

599
00:22:00,960 --> 00:22:03,360
small guys and blah blah blah oh it

600
00:22:03,360 --> 00:22:04,200
really turned out was a little more

601
00:22:04,200 --> 00:22:06,240
nuanced on that

602
00:22:06,240 --> 00:22:07,559
so what do corporations want well

603
00:22:07,559 --> 00:22:09,000
generally two things they want to make

604
00:22:09,000 --> 00:22:10,980
sure that legally that everything's okay

605
00:22:10,980 --> 00:22:12,720
once you approach them and and you know

606
00:22:12,720 --> 00:22:14,520
they realize what has happened so first

607
00:22:14,520 --> 00:22:15,900
and foremost they generally want a

608
00:22:15,900 --> 00:22:17,820
licensed agreement often applied

609
00:22:17,820 --> 00:22:20,820
retroactively that basically says

610
00:22:20,820 --> 00:22:23,220
legally they're off the hook

611
00:22:23,220 --> 00:22:24,720
generally they often don't want to be

612
00:22:24,720 --> 00:22:26,720
disparaged as well which is again

613
00:22:26,720 --> 00:22:28,620
understandable especially in the case

614
00:22:28,620 --> 00:22:31,080
when it was a single developer who again

615
00:22:31,080 --> 00:22:34,440
naively was to blame and yes these

616
00:22:34,440 --> 00:22:36,360
corporations are willing to pay

617
00:22:36,360 --> 00:22:38,580
so let's look at some win-win

618
00:22:38,580 --> 00:22:40,020
resolutions that came out of it again

619
00:22:40,020 --> 00:22:41,460
these are Direct Communications from

620
00:22:41,460 --> 00:22:43,020
some of the companies who were

621
00:22:43,020 --> 00:22:44,280
responsible for stealing code from

622
00:22:44,280 --> 00:22:45,720
oversight

623
00:22:45,720 --> 00:22:48,059
noting that also all three companies did

624
00:22:48,059 --> 00:22:49,980
acknowledge fault a yes oversight had

625
00:22:49,980 --> 00:22:51,840
been reverse engineered and used in an

626
00:22:51,840 --> 00:22:54,360
unauthorized manner for commercial gain

627
00:22:54,360 --> 00:22:56,340
so here we can see the company has done

628
00:22:56,340 --> 00:22:57,600
three things first and foremost

629
00:22:57,600 --> 00:23:00,240
acknowledged the issue putting an email

630
00:23:00,240 --> 00:23:03,299
yeah our bad secondly they said okay

631
00:23:03,299 --> 00:23:05,460
we're going to take proactive steps to

632
00:23:05,460 --> 00:23:07,799
remove the unauthored code from our

633
00:23:07,799 --> 00:23:09,659
product which is great and then third

634
00:23:09,659 --> 00:23:10,919
and most importantly they said you know

635
00:23:10,919 --> 00:23:12,960
hey can we get a retroactive license and

636
00:23:12,960 --> 00:23:14,580
we would like to financially compensate

637
00:23:14,580 --> 00:23:16,740
you reparations for the licensing

638
00:23:16,740 --> 00:23:18,659
everything so again this is kind of a

639
00:23:18,659 --> 00:23:20,100
win-win

640
00:23:20,100 --> 00:23:22,860
another win-win response again somewhat

641
00:23:22,860 --> 00:23:24,539
similarly the company clearly

642
00:23:24,539 --> 00:23:26,460
acknowledged the inappropriate use

643
00:23:26,460 --> 00:23:28,620
remove the code and then made a very

644
00:23:28,620 --> 00:23:30,600
large generous donation to the

645
00:23:30,600 --> 00:23:32,520
objective-c foundation so again kind of

646
00:23:32,520 --> 00:23:34,320
win-win

647
00:23:34,320 --> 00:23:36,360
so let's wrap this up with some

648
00:23:36,360 --> 00:23:37,799
takeaways

649
00:23:37,799 --> 00:23:39,780
first and foremost if you are a

650
00:23:39,780 --> 00:23:42,360
developer don't be naive like me and

651
00:23:42,360 --> 00:23:44,460
assume your code won't be stolen even if

652
00:23:44,460 --> 00:23:46,020
it's closed source

653
00:23:46,020 --> 00:23:48,240
so unfortunately this means you have to

654
00:23:48,240 --> 00:23:51,240
be proactive and yes this is extra work

655
00:23:51,240 --> 00:23:53,520
but perhaps use the methods we talked

656
00:23:53,520 --> 00:23:55,919
about in this presentation

657
00:23:55,919 --> 00:23:57,840
uh to see if companies are stealing your

658
00:23:57,840 --> 00:24:00,059
work uh and if so you can also take the

659
00:24:00,059 --> 00:24:02,400
steps we describe to reach out and

660
00:24:02,400 --> 00:24:04,020
hopefully resolve the manner that's

661
00:24:04,020 --> 00:24:05,460
mutually beneficial or at least

662
00:24:05,460 --> 00:24:07,679
beneficial to you

663
00:24:07,679 --> 00:24:09,840
now if you're a corporation it's

664
00:24:09,840 --> 00:24:12,000
incredibly important to educate your

665
00:24:12,000 --> 00:24:14,100
employers on your employees on this

666
00:24:14,100 --> 00:24:16,620
topic even just to reiterate that

667
00:24:16,620 --> 00:24:18,659
stealing code is not okay like I thought

668
00:24:18,659 --> 00:24:20,640
that would be obvious but apparently

669
00:24:20,640 --> 00:24:22,740
this is not the case from the

670
00:24:22,740 --> 00:24:24,240
corporation's point of view this is a

671
00:24:24,240 --> 00:24:26,520
no-brainer because this will avoid legal

672
00:24:26,520 --> 00:24:28,620
and optic issues right it's really the

673
00:24:28,620 --> 00:24:30,240
smart thing to do

674
00:24:30,240 --> 00:24:32,820
so some good ideas might be implementing

675
00:24:32,820 --> 00:24:35,039
internal procedures to detect this maybe

676
00:24:35,039 --> 00:24:37,500
scan your source code or really just ask

677
00:24:37,500 --> 00:24:38,760
your developers when they're

678
00:24:38,760 --> 00:24:40,620
implementing new features where did you

679
00:24:40,620 --> 00:24:42,780
get this from I've worked at a variety

680
00:24:42,780 --> 00:24:44,039
of large companies in my career and

681
00:24:44,039 --> 00:24:45,539
never once when I implemented a new

682
00:24:45,539 --> 00:24:48,120
feature did anyone ask me Patrick did

683
00:24:48,120 --> 00:24:49,380
you steal this where did you get this

684
00:24:49,380 --> 00:24:51,240
from I mean for me ethically that was a

685
00:24:51,240 --> 00:24:53,580
line I was not willing to to cross but

686
00:24:53,580 --> 00:24:55,380
again still no one ever checked in with

687
00:24:55,380 --> 00:24:56,940
me and asked that

688
00:24:56,940 --> 00:24:59,280
and finally it's really important if

689
00:24:59,280 --> 00:25:00,720
you're a corporation if someone

690
00:25:00,720 --> 00:25:03,000
approaches you especially with you know

691
00:25:03,000 --> 00:25:04,980
proof and tries to be very professional

692
00:25:04,980 --> 00:25:07,559
be like emotionally mature and amicable

693
00:25:07,559 --> 00:25:09,240
you know there's a few scenarios where

694
00:25:09,240 --> 00:25:11,760
the companies originally

695
00:25:11,760 --> 00:25:14,460
denied everything and it just it was

696
00:25:14,460 --> 00:25:15,780
shocking but you know we all we all got

697
00:25:15,780 --> 00:25:17,460
to a few places so I think there's a lot

698
00:25:17,460 --> 00:25:19,559
of opportunities to kind of squash this

699
00:25:19,559 --> 00:25:21,840
before it becomes even an issue I think

700
00:25:21,840 --> 00:25:23,640
you know most corporations realize that

701
00:25:23,640 --> 00:25:24,840
once it gets to this point it's

702
00:25:24,840 --> 00:25:26,760
problematic for everyone so again if

703
00:25:26,760 --> 00:25:28,799
they just take these steps to educate

704
00:25:28,799 --> 00:25:30,360
their developers

705
00:25:30,360 --> 00:25:32,220
um perhaps you know in the scenario if

706
00:25:32,220 --> 00:25:34,080
you know Patrick's tool has a great

707
00:25:34,080 --> 00:25:36,299
feature that another company wants and

708
00:25:36,299 --> 00:25:37,980
there's maybe one way to do it we'll

709
00:25:37,980 --> 00:25:39,539
reach out and talk about a licensing

710
00:25:39,539 --> 00:25:41,039
agreement right this is pretty standard

711
00:25:41,039 --> 00:25:43,020
procedure versus you know stealing and

712
00:25:43,020 --> 00:25:46,320
then ending up in slides of plaque

713
00:25:46,320 --> 00:25:48,960
so that's a wrap uh before we hop into q

714
00:25:48,960 --> 00:25:50,460
a I just want to briefly thank the

715
00:25:50,460 --> 00:25:51,960
amazing companies who support The

716
00:25:51,960 --> 00:25:53,580
Objective C foundation and all the

717
00:25:53,580 --> 00:25:55,260
community focused work we're doing I

718
00:25:55,260 --> 00:25:57,059
also want to thank the black hat

719
00:25:57,059 --> 00:25:59,159
conference for allowing us to speak on

720
00:25:59,159 --> 00:26:01,140
this somewhat controversial topic and

721
00:26:01,140 --> 00:26:03,419
then finally all of you for attending so

722
00:26:03,419 --> 00:26:05,160
thank you again

723
00:26:05,160 --> 00:26:08,269
[Music]

724
00:26:12,110 --> 00:26:15,219
[Music]

