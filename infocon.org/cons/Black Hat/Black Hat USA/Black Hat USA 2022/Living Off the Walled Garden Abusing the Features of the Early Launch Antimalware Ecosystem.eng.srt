1
00:00:01,700 --> 00:00:04,810
[Music]

2
00:00:07,519 --> 00:00:09,420
today I'm going to be talking about the

3
00:00:09,420 --> 00:00:11,880
early launch anti-mower system also

4
00:00:11,880 --> 00:00:15,859
known as Elam this is Microsoft's

5
00:00:15,859 --> 00:00:18,840
anti-tampering mechanism that they offer

6
00:00:18,840 --> 00:00:21,300
to well not only themselves like in

7
00:00:21,300 --> 00:00:24,000
Defender for endpoints uh Defender AV

8
00:00:24,000 --> 00:00:27,140
but also like any third party

9
00:00:27,140 --> 00:00:30,060
endpoint vendors can opt into this

10
00:00:30,060 --> 00:00:32,399
security feature

11
00:00:32,399 --> 00:00:35,100
all right so a brief introduction into

12
00:00:35,100 --> 00:00:37,920
Elam and PPL protected process light

13
00:00:37,920 --> 00:00:40,440
processes

14
00:00:40,440 --> 00:00:42,480
but before I get started I just want to

15
00:00:42,480 --> 00:00:44,820
give credit where credit is due

16
00:00:44,820 --> 00:00:47,940
um even like any work that is novel it's

17
00:00:47,940 --> 00:00:50,940
derivative in some way and so this is no

18
00:00:50,940 --> 00:00:52,620
exception so I just want to give a shout

19
00:00:52,620 --> 00:00:55,440
out to James Forshaw and Alex aionesku

20
00:00:55,440 --> 00:00:57,480
this work wouldn't have been possible

21
00:00:57,480 --> 00:01:00,300
without all of the previous work that

22
00:01:00,300 --> 00:01:01,980
they did especially this talk that they

23
00:01:01,980 --> 00:01:04,979
gave at Recon in 2018 so recommend you

24
00:01:04,979 --> 00:01:07,200
check it out and if you ever run into

25
00:01:07,200 --> 00:01:09,240
them thank them for all their awesome

26
00:01:09,240 --> 00:01:11,780
research

27
00:01:11,820 --> 00:01:14,540
so protect the processes

28
00:01:14,540 --> 00:01:17,100
I could have a dedicated talk just to

29
00:01:17,100 --> 00:01:20,700
this Alex and James have done talks on

30
00:01:20,700 --> 00:01:22,439
this as well so I'm not going to get

31
00:01:22,439 --> 00:01:25,439
super into the weeds here so I just like

32
00:01:25,439 --> 00:01:28,380
to offer a very high level description

33
00:01:28,380 --> 00:01:31,500
of the protective process mechanisms and

34
00:01:31,500 --> 00:01:36,479
how they apply to the Elam ecosystem so

35
00:01:36,479 --> 00:01:39,360
a PPL process the protections that they

36
00:01:39,360 --> 00:01:41,820
afford is it's designed to prevent

37
00:01:41,820 --> 00:01:44,340
tampering in user mode so emphasis on

38
00:01:44,340 --> 00:01:47,159
that all of this work is scoped to

39
00:01:47,159 --> 00:01:50,280
attacking everything in user mode

40
00:01:50,280 --> 00:01:53,220
all of these anti-tampering mechanisms

41
00:01:53,220 --> 00:01:56,119
like if you could abuse a signed driver

42
00:01:56,119 --> 00:01:58,500
you can bypass all these things anyway

43
00:01:58,500 --> 00:02:00,299
but we're just going to keep things

44
00:02:00,299 --> 00:02:03,119
scoped again to to use a mode and it's

45
00:02:03,119 --> 00:02:05,820
designed to prevent uh admin tampering

46
00:02:05,820 --> 00:02:09,000
as well even things running as system

47
00:02:09,000 --> 00:02:11,520
so you can't start or stop a protected

48
00:02:11,520 --> 00:02:14,160
process like more specifically it's

49
00:02:14,160 --> 00:02:16,080
harder to stop than it is to start a

50
00:02:16,080 --> 00:02:18,360
protective process you can't get a

51
00:02:18,360 --> 00:02:20,099
handle to a protected process you can't

52
00:02:20,099 --> 00:02:22,980
attach a debugger they're really hard to

53
00:02:22,980 --> 00:02:25,379
actually troubleshoot if you don't have

54
00:02:25,379 --> 00:02:28,520
all the right signers in place to

55
00:02:28,520 --> 00:02:30,840
troubleshoot and debug these things in a

56
00:02:30,840 --> 00:02:33,060
legitimate scenario

57
00:02:33,060 --> 00:02:35,700
um and in order to run protected at the

58
00:02:35,700 --> 00:02:38,040
anti-mower light level which is what

59
00:02:38,040 --> 00:02:39,180
we're going to be talking about here

60
00:02:39,180 --> 00:02:42,000
today the executable must meet very

61
00:02:42,000 --> 00:02:44,340
specific signing requirements and we'll

62
00:02:44,340 --> 00:02:46,019
get into a very explicit detail about

63
00:02:46,019 --> 00:02:48,239
what those signing requirements are and

64
00:02:48,239 --> 00:02:50,879
how we can possibly take advantage of

65
00:02:50,879 --> 00:02:52,739
them

66
00:02:52,739 --> 00:02:56,900
so in order to opt in to running as a

67
00:02:56,900 --> 00:03:00,420
PPL anti-malware light process again

68
00:03:00,420 --> 00:03:03,180
this is what all third party vendors but

69
00:03:03,180 --> 00:03:05,819
also first party Microsoft products get

70
00:03:05,819 --> 00:03:09,599
to opt into you need an Elon driver

71
00:03:09,599 --> 00:03:12,300
so in this driver you don't actually

72
00:03:12,300 --> 00:03:16,019
have to implement any code now there are

73
00:03:16,019 --> 00:03:18,780
like early launch hooks that you could

74
00:03:18,780 --> 00:03:21,000
Implement in that driver if you wanted

75
00:03:21,000 --> 00:03:23,760
to do some like signature checking uh

76
00:03:23,760 --> 00:03:26,400
very early in the boot process but the

77
00:03:26,400 --> 00:03:28,200
only thing that you really need in this

78
00:03:28,200 --> 00:03:31,200
driver is a binary resource that

79
00:03:31,200 --> 00:03:34,500
specifies which signers are allowed to

80
00:03:34,500 --> 00:03:39,140
run as anti-mower light services

81
00:03:40,500 --> 00:03:43,260
and in order to be approved to

82
00:03:43,260 --> 00:03:45,780
um to be co-signed by Microsoft as an

83
00:03:45,780 --> 00:03:48,840
elom driver you have to submit your

84
00:03:48,840 --> 00:03:51,120
driver to Microsoft and also be a member

85
00:03:51,120 --> 00:03:53,580
of the rather exclusive Microsoft virus

86
00:03:53,580 --> 00:03:56,420
Initiative Program

87
00:03:56,700 --> 00:03:59,760
so I'll talk a little bit about how I

88
00:03:59,760 --> 00:04:01,739
went about doing initial Recon and just

89
00:04:01,739 --> 00:04:04,379
discovering like what was available so

90
00:04:04,379 --> 00:04:06,540
that I could better understand

91
00:04:06,540 --> 00:04:09,540
um how Elam drivers are structured what

92
00:04:09,540 --> 00:04:12,000
the rules in them actually mean when it

93
00:04:12,000 --> 00:04:14,220
comes to the designers that are allowed

94
00:04:14,220 --> 00:04:17,040
to run as a protected service so what

95
00:04:17,040 --> 00:04:19,260
you're seeing here is this is the

96
00:04:19,260 --> 00:04:21,478
traditional way that an Elon driver is

97
00:04:21,478 --> 00:04:23,580
supposed to be registered we're looking

98
00:04:23,580 --> 00:04:26,400
at WD boots this is the the Microsoft

99
00:04:26,400 --> 00:04:29,460
Defender AV Elon driver this will be

100
00:04:29,460 --> 00:04:31,620
installed by default on any Windows

101
00:04:31,620 --> 00:04:34,440
system they're supposed to be installed

102
00:04:34,440 --> 00:04:38,160
as a service in the early launch Service

103
00:04:38,160 --> 00:04:42,419
Group so this wmi query would just list

104
00:04:42,419 --> 00:04:45,000
all of those out now I said this is the

105
00:04:45,000 --> 00:04:47,880
default way of installing it as we'll

106
00:04:47,880 --> 00:04:50,100
see later on you don't actually have to

107
00:04:50,100 --> 00:04:51,960
install the Elon driver in this way you

108
00:04:51,960 --> 00:04:54,300
can just call an API to get it

109
00:04:54,300 --> 00:04:56,220
registered

110
00:04:56,220 --> 00:04:59,220
so in the rule sets in the Elon driver

111
00:04:59,220 --> 00:05:02,520
and that binary resource there is a list

112
00:05:02,520 --> 00:05:05,880
of signer hashes and those signer hashes

113
00:05:05,880 --> 00:05:08,820
correspond to the certificates that are

114
00:05:08,820 --> 00:05:12,120
allowed to start a service protected at

115
00:05:12,120 --> 00:05:14,880
the anti-malware light level now these

116
00:05:14,880 --> 00:05:17,759
aren't the typical certificate hashes

117
00:05:17,759 --> 00:05:19,440
that you may be accustomed to

118
00:05:19,440 --> 00:05:22,199
specifically thumb prints which is the

119
00:05:22,199 --> 00:05:25,259
Shawan hash of the certificate rather

120
00:05:25,259 --> 00:05:29,520
these are TPS or 2B side hashes those of

121
00:05:29,520 --> 00:05:31,139
you who may be familiar with Windows

122
00:05:31,139 --> 00:05:32,100
Defender

123
00:05:32,100 --> 00:05:35,580
um application control you may have seen

124
00:05:35,580 --> 00:05:38,039
these quite a bit it's just a slightly

125
00:05:38,039 --> 00:05:39,919
different hashing algorithm

126
00:05:39,919 --> 00:05:42,900
I don't know the mechanics behind it but

127
00:05:42,900 --> 00:05:45,240
it's based on the hashing algorithm

128
00:05:45,240 --> 00:05:47,160
that's specified in the certificate so

129
00:05:47,160 --> 00:05:48,360
it's just a slightly different

130
00:05:48,360 --> 00:05:51,199
representation of the hash

131
00:05:51,199 --> 00:05:54,360
now unfortunately what made some of this

132
00:05:54,360 --> 00:05:56,039
research a little bit more challenging

133
00:05:56,039 --> 00:05:59,060
is that virustotal doesn't understand

134
00:05:59,060 --> 00:06:02,280
TBS hashes it understands thumb prints

135
00:06:02,280 --> 00:06:05,400
so you can search for binaries

136
00:06:05,400 --> 00:06:08,880
uh based on on thumbprint which is great

137
00:06:08,880 --> 00:06:11,880
um so but if you're auditing these

138
00:06:11,880 --> 00:06:13,500
drivers and pulling out all the rules

139
00:06:13,500 --> 00:06:16,259
you may not necessarily be able to go

140
00:06:16,259 --> 00:06:18,740
easily identify what the corresponding

141
00:06:18,740 --> 00:06:21,000
executables would be that could run

142
00:06:21,000 --> 00:06:22,880
protected

143
00:06:22,880 --> 00:06:25,500
there are two utilities I'm aware of

144
00:06:25,500 --> 00:06:29,400
that will calculate and present to you

145
00:06:29,400 --> 00:06:32,160
these tbs hashes in the windows SDK

146
00:06:32,160 --> 00:06:33,960
there's cert manager so it was supplied

147
00:06:33,960 --> 00:06:36,360
by Microsoft I also wrote a Powershell

148
00:06:36,360 --> 00:06:39,360
script that's publicly available called

149
00:06:39,360 --> 00:06:42,000
get TBS hash

150
00:06:42,000 --> 00:06:46,080
so this is the structure that the signer

151
00:06:46,080 --> 00:06:48,620
rules are expected to be

152
00:06:48,620 --> 00:06:51,780
represented as in that binary resource

153
00:06:51,780 --> 00:06:53,240
in the Elam driver

154
00:06:53,240 --> 00:06:56,220
so it's the certificate hash and then

155
00:06:56,220 --> 00:07:00,600
the hash algorithm which is specific to

156
00:07:00,600 --> 00:07:02,940
TBS hash as I mentioned you have to have

157
00:07:02,940 --> 00:07:05,520
the corresponding certificate hashing

158
00:07:05,520 --> 00:07:08,100
algorithm for the actual hash and then

159
00:07:08,100 --> 00:07:11,340
optionally any ekus these are enhanced

160
00:07:11,340 --> 00:07:13,800
key usage attributes so these are just

161
00:07:13,800 --> 00:07:15,539
special attributes that you can apply to

162
00:07:15,539 --> 00:07:18,539
the certificate to specify that a

163
00:07:18,539 --> 00:07:20,160
certificate is used for a very

164
00:07:20,160 --> 00:07:23,160
particular purpose so let's look at an

165
00:07:23,160 --> 00:07:24,840
example of what these rules would look

166
00:07:24,840 --> 00:07:26,580
like in the wild

167
00:07:26,580 --> 00:07:29,699
so after parsing out the rule set in WD

168
00:07:29,699 --> 00:07:31,560
boots this is Microsoft's Defender

169
00:07:31,560 --> 00:07:35,520
driver there are two rules in it so you

170
00:07:35,520 --> 00:07:37,680
see there are two tbs hashes in there

171
00:07:37,680 --> 00:07:40,440
try to remember that f6f1 will be

172
00:07:40,440 --> 00:07:42,240
referencing that later

173
00:07:42,240 --> 00:07:44,639
it uses the sha-256 hashing algorithm

174
00:07:44,639 --> 00:07:48,720
and it also specifies two ekus so the

175
00:07:48,720 --> 00:07:52,199
way that you would interpret this is

176
00:07:52,199 --> 00:07:55,560
any code like any executable like an exe

177
00:07:55,560 --> 00:07:57,120
or a dll

178
00:07:57,120 --> 00:08:00,240
could be loaded as a protected service

179
00:08:00,240 --> 00:08:03,300
at the anti-mower light level

180
00:08:03,300 --> 00:08:06,840
if it has any of those certificate

181
00:08:06,840 --> 00:08:09,960
hashes anywhere in the chain so a

182
00:08:09,960 --> 00:08:11,880
typical certificate chain will be

183
00:08:11,880 --> 00:08:13,919
comprised of three certificates as a

184
00:08:13,919 --> 00:08:15,599
root certificate an intermediate

185
00:08:15,599 --> 00:08:17,580
certificate and a lease certificate the

186
00:08:17,580 --> 00:08:20,220
lease certificate is what signs the the

187
00:08:20,220 --> 00:08:23,879
code but this says if any of those are

188
00:08:23,879 --> 00:08:26,819
anywhere in the certificate chain then

189
00:08:26,819 --> 00:08:30,180
it's allowed to run with one caveat the

190
00:08:30,180 --> 00:08:32,640
leaf certificate in this case must have

191
00:08:32,640 --> 00:08:36,899
both of those ekus present in the binary

192
00:08:36,899 --> 00:08:38,339
when it's signed

193
00:08:38,339 --> 00:08:41,580
so let's look at one such binary that is

194
00:08:41,580 --> 00:08:43,440
signed and meets all of those

195
00:08:43,440 --> 00:08:45,120
prerequisites

196
00:08:45,120 --> 00:08:48,779
so we are looking at let me skip ahead

197
00:08:48,779 --> 00:08:50,480
one this is MP

198
00:08:50,480 --> 00:08:53,760
eng.exe this is the main Defender AV

199
00:08:53,760 --> 00:08:56,760
malware engine executable

200
00:08:56,760 --> 00:08:58,980
so I'm using the built-in get system

201
00:08:58,980 --> 00:09:01,980
driver commandlet which I can use to

202
00:09:01,980 --> 00:09:04,019
extract the thumbprint you can do this

203
00:09:04,019 --> 00:09:06,120
through the GUI as well I'm a Powershell

204
00:09:06,120 --> 00:09:08,040
Fanboy so just do everything through

205
00:09:08,040 --> 00:09:08,899
there

206
00:09:08,899 --> 00:09:12,480
and so just note the thumb print value

207
00:09:12,480 --> 00:09:16,140
the f25 this is the sha-1 hash of the

208
00:09:16,140 --> 00:09:18,060
certificate

209
00:09:18,060 --> 00:09:21,839
and the corresponding TVs hash so I said

210
00:09:21,839 --> 00:09:25,019
remember that f6f TBS hash so I'm

211
00:09:25,019 --> 00:09:27,480
showing you here like this executable

212
00:09:27,480 --> 00:09:31,820
msnp eng.exe has that certificate hash

213
00:09:31,820 --> 00:09:35,880
somewhere in its chain and just note its

214
00:09:35,880 --> 00:09:38,459
corresponding thumbprint it's the same

215
00:09:38,459 --> 00:09:40,380
hash just different hashing algorithms

216
00:09:40,380 --> 00:09:43,260
okay it's it's there are two different

217
00:09:43,260 --> 00:09:47,360
hashes for the same certificate I mean

218
00:09:47,580 --> 00:09:49,260
and this is what it looks like in the

219
00:09:49,260 --> 00:09:51,240
GUI but what I wanted to highlight here

220
00:09:51,240 --> 00:09:54,120
was for msnp Eng when we look at the

221
00:09:54,120 --> 00:09:57,120
signer attributes I've pulled up the EKU

222
00:09:57,120 --> 00:10:00,060
the enhanced key usages and you'll see

223
00:10:00,060 --> 00:10:03,660
it's the first two ones listed uh the

224
00:10:03,660 --> 00:10:08,040
ones that end in 76 11 1 and 76 8 1.

225
00:10:08,040 --> 00:10:13,800
that match those two specified ekus so

226
00:10:13,800 --> 00:10:16,019
we have the certificate hash that's

227
00:10:16,019 --> 00:10:17,880
somewhere in the chain

228
00:10:17,880 --> 00:10:20,519
and we have those ekus applied and it's

229
00:10:20,519 --> 00:10:22,680
a valid certificate so that means that

230
00:10:22,680 --> 00:10:27,240
msnp eng.exe is allowed to run as a

231
00:10:27,240 --> 00:10:30,000
protected anti-mower light service

232
00:10:30,000 --> 00:10:32,360
okay

233
00:10:32,399 --> 00:10:34,380
so let's do some further validation

234
00:10:34,380 --> 00:10:37,260
let's actually confirm that this process

235
00:10:37,260 --> 00:10:39,959
is running at the anti-malware protected

236
00:10:39,959 --> 00:10:43,140
light level so this was a tool I wrote

237
00:10:43,140 --> 00:10:45,959
Johnny Johnson here also on on our team

238
00:10:45,959 --> 00:10:49,500
wrote a similar tool parsing this out so

239
00:10:49,500 --> 00:10:52,079
you can get this information via nte

240
00:10:52,079 --> 00:10:55,440
query information process I think so

241
00:10:55,440 --> 00:10:57,720
this is just useful for troubleshooting

242
00:10:57,720 --> 00:10:59,640
so you can indeed see that it's running

243
00:10:59,640 --> 00:11:03,300
protected and then I'm using wmi to

244
00:11:03,300 --> 00:11:06,480
identify the corresponding service for

245
00:11:06,480 --> 00:11:08,760
that running process the wind defense

246
00:11:08,760 --> 00:11:11,040
service because remember I mentioned you

247
00:11:11,040 --> 00:11:13,140
have to install this as a service in

248
00:11:13,140 --> 00:11:14,820
order to get it to run at the protected

249
00:11:14,820 --> 00:11:16,200
level

250
00:11:16,200 --> 00:11:18,000
and here's the corresponding Service

251
00:11:18,000 --> 00:11:22,079
registration for wind defend and what is

252
00:11:22,079 --> 00:11:24,600
noteworthy is the launch protected value

253
00:11:24,600 --> 00:11:27,959
is set to three which corresponds to the

254
00:11:27,959 --> 00:11:31,800
PS protected signer anti-malware level

255
00:11:31,800 --> 00:11:36,060
so Windows when the service manager goes

256
00:11:36,060 --> 00:11:39,000
to start this service it sees that

257
00:11:39,000 --> 00:11:42,060
launch protected value it says okay I

258
00:11:42,060 --> 00:11:44,940
need to start this up as a Nancy Maurer

259
00:11:44,940 --> 00:11:47,579
light service

260
00:11:47,579 --> 00:11:51,360
so it goes back and it validates all the

261
00:11:51,360 --> 00:11:54,120
signatures the certificate hashes if it

262
00:11:54,120 --> 00:11:56,220
checks all those boxes then it will

263
00:11:56,220 --> 00:11:59,100
indeed run at the anti-mower light level

264
00:11:59,100 --> 00:12:00,660
and be afforded all of the

265
00:12:00,660 --> 00:12:03,959
anti-tampering protections given to you

266
00:12:03,959 --> 00:12:06,899
by Elam and PPL

267
00:12:06,899 --> 00:12:08,579
mm-hmm

268
00:12:08,579 --> 00:12:10,140
Okay so

269
00:12:10,140 --> 00:12:12,540
as I was researching this the question

270
00:12:12,540 --> 00:12:15,600
that naturally arose for me was given

271
00:12:15,600 --> 00:12:18,540
that Elam is like an allow list for

272
00:12:18,540 --> 00:12:22,079
anti-malware PPL process execution does

273
00:12:22,079 --> 00:12:25,740
there exist an Elon driver that might be

274
00:12:25,740 --> 00:12:28,740
overly permissive and maybe allowing

275
00:12:28,740 --> 00:12:31,320
more than it should

276
00:12:31,320 --> 00:12:34,820
so let's investigate that

277
00:12:34,920 --> 00:12:38,420
so this was my initial research process

278
00:12:38,420 --> 00:12:41,040
I've got a virustotal intelligence

279
00:12:41,040 --> 00:12:42,779
account so which is really nice because

280
00:12:42,779 --> 00:12:45,779
I can do a query like this so

281
00:12:45,779 --> 00:12:48,240
this query specifies

282
00:12:48,240 --> 00:12:52,139
um this is the signer subject name for

283
00:12:52,139 --> 00:12:54,060
Elon certificates so when you submit

284
00:12:54,060 --> 00:12:55,920
your driver to Microsoft they return it

285
00:12:55,920 --> 00:12:57,540
back to you approve it and co-sign it

286
00:12:57,540 --> 00:12:59,940
with their certificates that is the

287
00:12:59,940 --> 00:13:03,019
subject name of that of that driver

288
00:13:03,019 --> 00:13:06,060
tag native searches just for device

289
00:13:06,060 --> 00:13:08,459
drivers I'm looking for things that are

290
00:13:08,459 --> 00:13:11,940
signed and that are executables or just

291
00:13:11,940 --> 00:13:14,279
like PE files and then filter out

292
00:13:14,279 --> 00:13:16,139
anything that has an invalid signature

293
00:13:16,139 --> 00:13:20,839
and this yielded 886 unique results

294
00:13:21,060 --> 00:13:23,519
um I did some additional validation just

295
00:13:23,519 --> 00:13:25,380
to whittle things down to make sure that

296
00:13:25,380 --> 00:13:27,660
I was working with Elam drivers that

297
00:13:27,660 --> 00:13:29,940
would that actually had that binary

298
00:13:29,940 --> 00:13:32,339
resource it's called the MS Elam cert

299
00:13:32,339 --> 00:13:36,360
info ID resource made sure I could parse

300
00:13:36,360 --> 00:13:38,040
those out and just double check to make

301
00:13:38,040 --> 00:13:39,600
sure that every Elam driver that I

302
00:13:39,600 --> 00:13:41,519
pulled down in bulk had a valid

303
00:13:41,519 --> 00:13:42,839
certificate

304
00:13:42,839 --> 00:13:46,740
and then just on mass I parsed out every

305
00:13:46,740 --> 00:13:51,440
single rule for every for all 766

306
00:13:51,440 --> 00:13:54,060
drivers that I identified and pulled

307
00:13:54,060 --> 00:13:56,599
down in bulk

308
00:13:56,700 --> 00:13:58,560
um apologies if you can't see this

309
00:13:58,560 --> 00:14:00,540
clearly in the back this is just kind of

310
00:14:00,540 --> 00:14:03,240
a reference and to give you a sense of

311
00:14:03,240 --> 00:14:06,959
the scope of how many vendors have Elam

312
00:14:06,959 --> 00:14:09,660
drivers out there so they're the typical

313
00:14:09,660 --> 00:14:13,139
players which you'd probably see most of

314
00:14:13,139 --> 00:14:15,300
these vendors over in the the vendor

315
00:14:15,300 --> 00:14:17,100
Hall some of them definitely stood out

316
00:14:17,100 --> 00:14:18,839
to me so like there's that one blank

317
00:14:18,839 --> 00:14:21,540
bullet that wasn't a typo there were

318
00:14:21,540 --> 00:14:23,519
some Elam drivers that didn't have a

319
00:14:23,519 --> 00:14:25,740
vendor assigned to it's kind of

320
00:14:25,740 --> 00:14:28,200
interesting also in the center column

321
00:14:28,200 --> 00:14:30,060
kind of like in the center up a little

322
00:14:30,060 --> 00:14:32,279
bit there's a vendor name of to do

323
00:14:32,279 --> 00:14:34,160
company name

324
00:14:34,160 --> 00:14:37,200
Windows win 7 ddk just some kind of like

325
00:14:37,200 --> 00:14:39,720
Oddball vendors that's

326
00:14:39,720 --> 00:14:43,279
um I don't know just uh just seemed odd

327
00:14:43,279 --> 00:14:46,260
but I all I could really go off was just

328
00:14:46,260 --> 00:14:48,899
kind of a gut feel but this was kind of

329
00:14:48,899 --> 00:14:52,019
like potential further validation that

330
00:14:52,019 --> 00:14:55,199
maybe maybe there exists at least one

331
00:14:55,199 --> 00:14:56,760
rule set

332
00:14:56,760 --> 00:14:58,500
um that might be overly permissive

333
00:14:58,500 --> 00:15:02,279
whether that was intentional or not

334
00:15:02,279 --> 00:15:04,560
all right so the Elam auditing strategy

335
00:15:04,560 --> 00:15:08,120
once I pulled down unmasked those 766

336
00:15:08,120 --> 00:15:10,279
Elam drivers

337
00:15:10,279 --> 00:15:14,940
is to go about the difficult process of

338
00:15:14,940 --> 00:15:17,760
taking the TBS hashes which I parsed out

339
00:15:17,760 --> 00:15:20,040
from the Elon drivers and identifying

340
00:15:20,040 --> 00:15:22,920
the corresponding TBS or sorry the

341
00:15:22,920 --> 00:15:25,579
corresponding thumbprint value

342
00:15:25,579 --> 00:15:27,899
this was pretty challenging I couldn't

343
00:15:27,899 --> 00:15:30,480
always do that I had to resort to

344
00:15:30,480 --> 00:15:32,040
Googling for some of these but most of

345
00:15:32,040 --> 00:15:33,720
these hashes just aren't on the internet

346
00:15:33,720 --> 00:15:36,660
so I had to resort to more creative

347
00:15:36,660 --> 00:15:39,480
strategies for identifying the

348
00:15:39,480 --> 00:15:40,800
thumbprint values so that I could

349
00:15:40,800 --> 00:15:43,019
actually search for some candidate

350
00:15:43,019 --> 00:15:47,420
abusable binaries in virustotal

351
00:15:47,639 --> 00:15:50,220
um and the idea was like if there was a

352
00:15:50,220 --> 00:15:53,639
hypothetical overly permissive rule sets

353
00:15:53,639 --> 00:15:55,860
are there any

354
00:15:55,860 --> 00:15:57,720
um like potential law bins that would

355
00:15:57,720 --> 00:16:00,560
permit arbitrary unsigned code execution

356
00:16:00,560 --> 00:16:03,720
that uh matched all of that matched one

357
00:16:03,720 --> 00:16:06,480
of those overly permissive rules

358
00:16:06,480 --> 00:16:08,279
which would then allow me to install it

359
00:16:08,279 --> 00:16:10,620
as a protected service and potentially

360
00:16:10,620 --> 00:16:13,139
get arbitrary code execution in the

361
00:16:13,139 --> 00:16:16,199
context of a protected process

362
00:16:16,199 --> 00:16:19,139
so remember I said remember that f6f

363
00:16:19,139 --> 00:16:22,380
hash that was the Microsoft intermediate

364
00:16:22,380 --> 00:16:25,680
hash so here I'm just going through some

365
00:16:25,680 --> 00:16:28,680
more of the the Recon process so I was

366
00:16:28,680 --> 00:16:29,940
literally going through the like

367
00:16:29,940 --> 00:16:32,940
hundreds of hashes that I parsed out and

368
00:16:32,940 --> 00:16:34,980
just Googling all of them to see if I

369
00:16:34,980 --> 00:16:38,820
could find any uh any hope of finding a

370
00:16:38,820 --> 00:16:40,980
corresponding thumbprint value I got

371
00:16:40,980 --> 00:16:43,920
lucky in this case should be no surprise

372
00:16:43,920 --> 00:16:45,899
like it's it's a Microsoft intermediate

373
00:16:45,899 --> 00:16:47,040
cert

374
00:16:47,040 --> 00:16:47,820
um

375
00:16:47,820 --> 00:16:50,040
fairly common so I got a few hits

376
00:16:50,040 --> 00:16:53,339
fortunately for this there was one great

377
00:16:53,339 --> 00:16:55,620
website it's almost like trying to

378
00:16:55,620 --> 00:16:59,100
troubleshoot some signer issues and uh

379
00:16:59,100 --> 00:17:00,899
right like there in the website is like

380
00:17:00,899 --> 00:17:03,240
the TBS hash right next to the

381
00:17:03,240 --> 00:17:05,280
thumbprint so great like I had something

382
00:17:05,280 --> 00:17:07,380
that I could easily search for again

383
00:17:07,380 --> 00:17:09,179
that thumbprint hash

384
00:17:09,179 --> 00:17:11,699
so I'll take that Thumper and hash and

385
00:17:11,699 --> 00:17:13,919
then search for that in fires total

386
00:17:13,919 --> 00:17:17,959
using the signature tag

387
00:17:18,059 --> 00:17:23,099
um and I got something like this so 171

388
00:17:23,099 --> 00:17:26,040
000 results no big surprise because that

389
00:17:26,040 --> 00:17:27,900
was a Microsoft intermediate certificate

390
00:17:27,900 --> 00:17:30,000
you would expect like there's a lot of

391
00:17:30,000 --> 00:17:31,799
Microsoft signed code that uses that

392
00:17:31,799 --> 00:17:33,740
intermediate certificate out there

393
00:17:33,740 --> 00:17:36,660
and there's no way in virustotal to

394
00:17:36,660 --> 00:17:39,660
search for binaries without maybe doing

395
00:17:39,660 --> 00:17:42,960
some like fancy Yara hunting that have

396
00:17:42,960 --> 00:17:46,020
those EKU values so that was a challenge

397
00:17:46,020 --> 00:17:49,260
right there but I didn't really want to

398
00:17:49,260 --> 00:17:52,919
focus my research per se on those

399
00:17:52,919 --> 00:17:55,559
restrictive ekus because I just kind of

400
00:17:55,559 --> 00:17:57,240
had a sense that there weren't going to

401
00:17:57,240 --> 00:18:01,200
be many abusable binaries that match

402
00:18:01,200 --> 00:18:03,240
these rules that have the Microsoft

403
00:18:03,240 --> 00:18:06,000
Publisher and anti-mower ekus applied to

404
00:18:06,000 --> 00:18:07,919
them I'm not saying that they don't

405
00:18:07,919 --> 00:18:10,860
exist I just think it's probably

406
00:18:10,860 --> 00:18:13,140
unlikely that they do there's probably

407
00:18:13,140 --> 00:18:15,000
like there's bigger fish to fry out

408
00:18:15,000 --> 00:18:16,500
there that's just going to be easier to

409
00:18:16,500 --> 00:18:17,880
find

410
00:18:17,880 --> 00:18:20,700
uh and so here's the results of the

411
00:18:20,700 --> 00:18:21,840
quick

412
00:18:21,840 --> 00:18:24,780
um research that I did this slide is

413
00:18:24,780 --> 00:18:26,340
really important pay attention to it so

414
00:18:26,340 --> 00:18:28,080
I'll walk you through how to interpret

415
00:18:28,080 --> 00:18:29,340
this

416
00:18:29,340 --> 00:18:32,820
of all the 766 Elon drivers that I

417
00:18:32,820 --> 00:18:35,340
identified and parsed out all the TBS

418
00:18:35,340 --> 00:18:38,179
hashes for all the rule sets and found

419
00:18:38,179 --> 00:18:41,700
corresponding thumb prints

420
00:18:41,700 --> 00:18:44,880
these are ones that uh these are rules

421
00:18:44,880 --> 00:18:49,140
that were present in those binaries so

422
00:18:49,140 --> 00:18:53,640
that first Microsoft corporation uh hash

423
00:18:53,640 --> 00:18:54,660
value

424
00:18:54,660 --> 00:18:57,140
mind you it didn't have an EKU

425
00:18:57,140 --> 00:19:01,140
restriction on it so this means that if

426
00:19:01,140 --> 00:19:03,720
you have any Microsoft signed executable

427
00:19:03,720 --> 00:19:06,720
that has that certificate anywhere in

428
00:19:06,720 --> 00:19:07,860
the chain

429
00:19:07,860 --> 00:19:10,080
then it can run protected

430
00:19:10,080 --> 00:19:12,980
same for the second and then

431
00:19:12,980 --> 00:19:16,140
what was even worse was the intermediate

432
00:19:16,140 --> 00:19:17,580
the third party intermediate

433
00:19:17,580 --> 00:19:19,260
certificates

434
00:19:19,260 --> 00:19:23,039
so if you have any certificate that was

435
00:19:23,039 --> 00:19:27,679
issued by any of those three

436
00:19:27,679 --> 00:19:31,380
certificate authorities then you can run

437
00:19:31,380 --> 00:19:34,679
your code your malware or whatever as uh

438
00:19:34,679 --> 00:19:37,440
at the anti-mower light protected level

439
00:19:37,440 --> 00:19:42,480
so the one we'll focus on is 495 let me

440
00:19:42,480 --> 00:19:44,660
go back one okay that's the verisign

441
00:19:44,660 --> 00:19:48,960
intermediate certificate Okay so I had

442
00:19:48,960 --> 00:19:51,539
the we had the corresponding thumbprint

443
00:19:51,539 --> 00:19:52,980
for the verisign intermediate

444
00:19:52,980 --> 00:19:55,860
certificate I wanted to know what code

445
00:19:55,860 --> 00:19:57,620
is signed

446
00:19:57,620 --> 00:20:00,780
any code signed by that so like so this

447
00:20:00,780 --> 00:20:01,620
is going to be the intermediate

448
00:20:01,620 --> 00:20:03,299
certificate so the leaf certificate will

449
00:20:03,299 --> 00:20:04,980
be different but that's okay it's going

450
00:20:04,980 --> 00:20:07,260
to be allowed to run and show me any

451
00:20:07,260 --> 00:20:09,900
executables that have 40 or more

452
00:20:09,900 --> 00:20:12,360
positive AV hits so in other words like

453
00:20:12,360 --> 00:20:15,120
confirmed malware that would be allowed

454
00:20:15,120 --> 00:20:17,700
to run at the anti-mower light level so

455
00:20:17,700 --> 00:20:19,679
we have 177

456
00:20:19,679 --> 00:20:23,100
000 unique samples of malware that can

457
00:20:23,100 --> 00:20:27,140
be afforded all of the protections of uh

458
00:20:27,140 --> 00:20:29,160
anti-malware PPL

459
00:20:29,160 --> 00:20:31,140
so kind of hard to kill those things

460
00:20:31,140 --> 00:20:34,640
once I get started at that level

461
00:20:35,100 --> 00:20:38,220
now this relies on

462
00:20:38,220 --> 00:20:41,820
my ability your ability to identify what

463
00:20:41,820 --> 00:20:44,340
those Elam drivers are so if you have

464
00:20:44,340 --> 00:20:46,320
vti access then maybe this is something

465
00:20:46,320 --> 00:20:48,660
that you could investigate a little bit

466
00:20:48,660 --> 00:20:50,280
further I'm not going to be calling out

467
00:20:50,280 --> 00:20:52,100
any vendor names here

468
00:20:52,100 --> 00:20:53,940
so the

469
00:20:53,940 --> 00:20:57,600
could be an exercise for for later

470
00:20:57,600 --> 00:20:59,520
okay so how would you actually weaponize

471
00:20:59,520 --> 00:21:01,760
this

472
00:21:02,039 --> 00:21:04,559
so you'll want to identify a candidate

473
00:21:04,559 --> 00:21:07,860
abusable executable note the thumbprint

474
00:21:07,860 --> 00:21:11,220
value here that's 620 that corresponds

475
00:21:11,220 --> 00:21:13,100
to

476
00:21:13,100 --> 00:21:18,299
the second Microsoft certificate there

477
00:21:18,299 --> 00:21:20,660
okay

478
00:21:22,220 --> 00:21:25,080
and the first law bin that came to mind

479
00:21:25,080 --> 00:21:27,780
for me was Ms build should be easy

480
00:21:27,780 --> 00:21:29,340
enough to abuse it's like one of the

481
00:21:29,340 --> 00:21:32,159
most classic low bins that can get you

482
00:21:32,159 --> 00:21:34,320
arbitrary unsigned code execution thank

483
00:21:34,320 --> 00:21:37,679
you Casey Smith for that and so I found

484
00:21:37,679 --> 00:21:40,260
16 unique hits for that that were signed

485
00:21:40,260 --> 00:21:45,960
with that very specific uh Elum rule set

486
00:21:45,960 --> 00:21:47,880
okay so what do you do with that once

487
00:21:47,880 --> 00:21:50,460
you identify that candidate Ms build I

488
00:21:50,460 --> 00:21:52,380
would like to get arbitrary unsigned

489
00:21:52,380 --> 00:21:54,720
code execution from that what you do is

490
00:21:54,720 --> 00:21:57,000
you take the Elam driver that you

491
00:21:57,000 --> 00:22:00,059
identified was overly permissive and had

492
00:22:00,059 --> 00:22:02,400
that Microsoft rule in it

493
00:22:02,400 --> 00:22:05,640
and you drop it to the host it's signed

494
00:22:05,640 --> 00:22:08,940
like it's legitimate it's fine and you

495
00:22:08,940 --> 00:22:10,799
um you call the install Elon certificate

496
00:22:10,799 --> 00:22:13,440
info API you have to do this as admin

497
00:22:13,440 --> 00:22:16,020
you would have to be elevated anyway to

498
00:22:16,020 --> 00:22:19,260
install the the service

499
00:22:19,260 --> 00:22:21,900
so and then you would drop your

500
00:22:21,900 --> 00:22:23,640
candidate binary that you want to abuse

501
00:22:23,640 --> 00:22:26,520
in this case Ms build and then calling

502
00:22:26,520 --> 00:22:29,760
change service config to W or you can

503
00:22:29,760 --> 00:22:32,220
just do this directly in the registry

504
00:22:32,220 --> 00:22:33,840
you're going to specify that the service

505
00:22:33,840 --> 00:22:36,000
needs to run at the anti-mower light

506
00:22:36,000 --> 00:22:37,260
level

507
00:22:37,260 --> 00:22:40,580
start the service and then profit maybe

508
00:22:40,580 --> 00:22:43,140
now there's still additional steps like

509
00:22:43,140 --> 00:22:45,000
in order to get arbitrary and sign code

510
00:22:45,000 --> 00:22:48,299
execution from them from Ms build you

511
00:22:48,299 --> 00:22:50,159
have to give it an XML file which

512
00:22:50,159 --> 00:22:52,919
consists of like c-sharp code and hope

513
00:22:52,919 --> 00:22:55,100
that you can actually get that to run

514
00:22:55,100 --> 00:22:57,000
turns out there are some constraints

515
00:22:57,000 --> 00:22:58,080
though

516
00:22:58,080 --> 00:23:02,640
what are those so most probably all law

517
00:23:02,640 --> 00:23:05,340
bins out there were not designed for the

518
00:23:05,340 --> 00:23:07,559
express purpose of running in the

519
00:23:07,559 --> 00:23:11,700
context of a protected process and uh by

520
00:23:11,700 --> 00:23:13,799
the nature of the anti-malware lights

521
00:23:13,799 --> 00:23:16,020
protection level being pretty robust and

522
00:23:16,020 --> 00:23:18,780
not allowing a lot of dangerous things

523
00:23:18,780 --> 00:23:21,480
to occur one thing that can't happen by

524
00:23:21,480 --> 00:23:23,940
default is a malware running at the

525
00:23:23,940 --> 00:23:25,860
protected level cannot spawn a child

526
00:23:25,860 --> 00:23:27,539
process by default so like if you just

527
00:23:27,539 --> 00:23:30,360
call the create process API

528
00:23:30,360 --> 00:23:32,340
from the context of the protective

529
00:23:32,340 --> 00:23:34,340
process it's going to fail

530
00:23:34,340 --> 00:23:37,500
you have to supply like a specific flag

531
00:23:37,500 --> 00:23:39,780
to um to create process to actually

532
00:23:39,780 --> 00:23:41,760
allow that but these law bins like

533
00:23:41,760 --> 00:23:43,440
they're not going to be supplying that

534
00:23:43,440 --> 00:23:47,280
flag and when you execute code and like

535
00:23:47,280 --> 00:23:50,880
abuse Ms build part of the artifacts of

536
00:23:50,880 --> 00:23:53,400
that is there's a child process it calls

537
00:23:53,400 --> 00:23:55,799
like the c-sharp compiler assuming

538
00:23:55,799 --> 00:23:58,260
you're supplying C sharp code to execute

539
00:23:58,260 --> 00:24:00,720
so it spawns that process so that that

540
00:24:00,720 --> 00:24:03,059
wasn't allowed so this broke for me when

541
00:24:03,059 --> 00:24:04,620
I was trying to weaponize it like I

542
00:24:04,620 --> 00:24:07,559
confirmed that it started the service

543
00:24:07,559 --> 00:24:09,720
started protected but I couldn't get it

544
00:24:09,720 --> 00:24:12,659
to execute code so I had to get a little

545
00:24:12,659 --> 00:24:14,760
creative and again thank you Casey Smith

546
00:24:14,760 --> 00:24:16,980
for blogging way back when about

547
00:24:16,980 --> 00:24:19,740
property functions and Ms build so this

548
00:24:19,740 --> 00:24:22,320
was kind of a neat little hack that I

549
00:24:22,320 --> 00:24:25,020
was able to use to get around not having

550
00:24:25,020 --> 00:24:28,440
Ms Bill not spawn a child process so

551
00:24:28,440 --> 00:24:30,780
this is what the weaponized payload from

552
00:24:30,780 --> 00:24:33,240
as build actually looks like

553
00:24:33,240 --> 00:24:35,880
it's a super weird syntax it's kind of

554
00:24:35,880 --> 00:24:37,940
like Powershell

555
00:24:37,940 --> 00:24:41,700
and it has to be in a one-liner so I had

556
00:24:41,700 --> 00:24:43,380
to get kind of creative like how to

557
00:24:43,380 --> 00:24:45,659
weaponize this so what I ultimately

558
00:24:45,659 --> 00:24:48,120
wanted to do to demonstrate arbitrary

559
00:24:48,120 --> 00:24:52,520
unsigned code execution was get this to

560
00:24:52,520 --> 00:24:56,039
load in memory and execute a.net

561
00:24:56,039 --> 00:24:57,240
assembly

562
00:24:57,240 --> 00:24:59,520
so that's what the highlighted code does

563
00:24:59,520 --> 00:25:02,000
here you would just take your

564
00:25:02,000 --> 00:25:04,740
malicious.net assembly

565
00:25:04,740 --> 00:25:08,460
excuse me and you would implement the

566
00:25:08,460 --> 00:25:11,340
logic that you want to execute in the

567
00:25:11,340 --> 00:25:14,700
test Constructor and then in that and

568
00:25:14,700 --> 00:25:18,179
then you take that whole binary base64

569
00:25:18,179 --> 00:25:20,039
encode it and then you just drop the

570
00:25:20,039 --> 00:25:23,760
base64 code string in there and then NS

571
00:25:23,760 --> 00:25:25,860
build will run your payload without the

572
00:25:25,860 --> 00:25:28,919
issue so thanks again Casey

573
00:25:28,919 --> 00:25:32,360
okay so quick demo

574
00:25:32,880 --> 00:25:34,500
okay what we're going to be seeing here

575
00:25:34,500 --> 00:25:37,080
is first we're going to list out all the

576
00:25:37,080 --> 00:25:40,100
protected processes

577
00:25:40,740 --> 00:25:43,380
and note the ones that are running at

578
00:25:43,380 --> 00:25:46,080
the anti-malware lights level so we have

579
00:25:46,080 --> 00:25:49,140
two here msnp Eng that's the defender AV

580
00:25:49,140 --> 00:25:53,700
engine and Nas SRV

581
00:25:53,700 --> 00:25:55,679
now I'm going to run my code that runs

582
00:25:55,679 --> 00:26:00,980
arbitrary Powershell uh using Ms build

583
00:26:01,200 --> 00:26:03,600
and you can see that Ms build is indeed

584
00:26:03,600 --> 00:26:07,580
running at the anti-mower light level

585
00:26:07,580 --> 00:26:10,080
this code is out there it's publicly

586
00:26:10,080 --> 00:26:13,260
available I'll link to it at the end

587
00:26:13,260 --> 00:26:15,840
okay so this is just the rather benign

588
00:26:15,840 --> 00:26:17,640
payload I was just having it like run

589
00:26:17,640 --> 00:26:20,880
asleep command just to show and prove

590
00:26:20,880 --> 00:26:23,220
that Ms build was indeed running at that

591
00:26:23,220 --> 00:26:25,500
protected level

592
00:26:25,500 --> 00:26:28,679
so another payload that we could do so

593
00:26:28,679 --> 00:26:30,900
once you're running at the protected

594
00:26:30,900 --> 00:26:34,080
level not only is your own malware

595
00:26:34,080 --> 00:26:36,419
protected by processes that aren't

596
00:26:36,419 --> 00:26:40,260
protected but you can now go kill other

597
00:26:40,260 --> 00:26:42,120
protected processes so let's see what

598
00:26:42,120 --> 00:26:44,000
that looks like

599
00:26:44,000 --> 00:26:46,500
again we'll list out the protected

600
00:26:46,500 --> 00:26:49,320
processes we're going to pick on msnp

601
00:26:49,320 --> 00:26:53,580
Eng note the process ID 3168

602
00:26:53,580 --> 00:26:55,440
and I'm running elevated here and I'm

603
00:26:55,440 --> 00:26:57,779
just going to try to stop it using stop

604
00:26:57,779 --> 00:27:00,240
process doesn't allow it

605
00:27:00,240 --> 00:27:02,220
no surprise there

606
00:27:02,220 --> 00:27:03,960
but using invoke anti-malware light

607
00:27:03,960 --> 00:27:06,360
command by abusing that overly

608
00:27:06,360 --> 00:27:08,760
permissive driver we're going to kill

609
00:27:08,760 --> 00:27:10,580
the process

610
00:27:10,580 --> 00:27:15,678
through Ms build running protected

611
00:27:19,860 --> 00:27:23,880
and now note that msnp Eng has a new

612
00:27:23,880 --> 00:27:26,820
process ID so what happened there was

613
00:27:26,820 --> 00:27:30,299
the old one was killed and Defender AV

614
00:27:30,299 --> 00:27:34,158
it restarts itself

615
00:27:34,799 --> 00:27:36,779
then gets a new one and then we'll just

616
00:27:36,779 --> 00:27:39,360
try it again for giggles and see what

617
00:27:39,360 --> 00:27:41,539
happens

618
00:27:42,539 --> 00:27:45,059
so now it just failed to restart again

619
00:27:45,059 --> 00:27:47,760
and then you can hopefully see on the

620
00:27:47,760 --> 00:27:51,240
bottom right the defender little icon

621
00:27:51,240 --> 00:27:53,580
went from green to Red indicating that

622
00:27:53,580 --> 00:27:54,900
something happened

623
00:27:54,900 --> 00:27:57,480
so we've effectively killed

624
00:27:57,480 --> 00:28:00,240
um the defender AV engine through Ms

625
00:28:00,240 --> 00:28:02,460
build running at the protected level

626
00:28:02,460 --> 00:28:06,200
because we abused an Elon driver that

627
00:28:06,200 --> 00:28:10,080
has an overly permissive rule set in

628
00:28:10,080 --> 00:28:11,700
this case

629
00:28:11,700 --> 00:28:15,059
um it's overly permissive Elam dot sis I

630
00:28:15,059 --> 00:28:17,400
had to rename it to protect innocent

631
00:28:17,400 --> 00:28:19,520
vendors

632
00:28:19,520 --> 00:28:21,120
so

633
00:28:21,120 --> 00:28:23,159
yeah that's that's what's necessary to

634
00:28:23,159 --> 00:28:24,539
abuse that

635
00:28:24,539 --> 00:28:27,720
so how might we go about mitigating and

636
00:28:27,720 --> 00:28:30,539
trying to detect this stuff

637
00:28:30,539 --> 00:28:33,600
so fortunately wdac for the few people

638
00:28:33,600 --> 00:28:35,760
out there who might employ this so again

639
00:28:35,760 --> 00:28:38,039
this is Windows Defender application

640
00:28:38,039 --> 00:28:41,159
control it can block these from loading

641
00:28:41,159 --> 00:28:43,799
so if you want to be very specific about

642
00:28:43,799 --> 00:28:46,559
the Elon drivers that you want to allow

643
00:28:46,559 --> 00:28:48,960
in your environment it's generally a

644
00:28:48,960 --> 00:28:50,640
good thing to do not sure how well that

645
00:28:50,640 --> 00:28:52,860
would scale but the technology does

646
00:28:52,860 --> 00:28:57,120
allow you to block Elam drivers that

647
00:28:57,120 --> 00:29:00,500
shouldn't be allowed in your environment

648
00:29:00,500 --> 00:29:02,700
and then hopefully we might be able to

649
00:29:02,700 --> 00:29:05,340
get uh more robust fix from Microsoft in

650
00:29:05,340 --> 00:29:06,480
the future

651
00:29:06,480 --> 00:29:08,580
um but as you can maybe understand like

652
00:29:08,580 --> 00:29:12,000
this is abusing the features of the Elam

653
00:29:12,000 --> 00:29:15,659
uh allows like allow rule Set uh rather

654
00:29:15,659 --> 00:29:17,340
than abusing any any sort of

655
00:29:17,340 --> 00:29:20,760
vulnerability uh in abusing the uh

656
00:29:20,760 --> 00:29:23,580
submission process to Microsoft that

657
00:29:23,580 --> 00:29:25,679
Microsoft even allowed these overly

658
00:29:25,679 --> 00:29:28,200
permissive rules to be put in place in

659
00:29:28,200 --> 00:29:29,580
the first place

660
00:29:29,580 --> 00:29:30,899
now

661
00:29:30,899 --> 00:29:34,860
I can't even begin to speculate why any

662
00:29:34,860 --> 00:29:37,140
of those like third-party intermediate

663
00:29:37,140 --> 00:29:40,080
certificates would ever be allowed

664
00:29:40,080 --> 00:29:42,000
um so you know shame on Microsoft for

665
00:29:42,000 --> 00:29:43,020
that

666
00:29:43,020 --> 00:29:45,120
um the Microsoft rule sets my only

667
00:29:45,120 --> 00:29:47,520
speculation as to why those might be in

668
00:29:47,520 --> 00:29:51,360
there is because imagine if an endpoint

669
00:29:51,360 --> 00:29:53,760
security vendor took a dependency on

670
00:29:53,760 --> 00:29:55,860
like the the visual C runtime Library

671
00:29:55,860 --> 00:29:58,200
like that's signed by Microsoft and

672
00:29:58,200 --> 00:29:59,760
they're like well we take a dependency

673
00:29:59,760 --> 00:30:02,460
on this so we need to be able to get our

674
00:30:02,460 --> 00:30:05,279
dll to load into our protected service

675
00:30:05,279 --> 00:30:08,100
and so Microsoft like please allow this

676
00:30:08,100 --> 00:30:10,260
and sure sure enough they they allowed

677
00:30:10,260 --> 00:30:12,840
that that's still speculation but I

678
00:30:12,840 --> 00:30:15,380
think that's a reasonable

679
00:30:15,380 --> 00:30:18,179
explanation for why some of those

680
00:30:18,179 --> 00:30:20,279
vendors had those Microsoft certificates

681
00:30:20,279 --> 00:30:22,760
in there

682
00:30:23,460 --> 00:30:25,980
um and we also audited like a bunch of

683
00:30:25,980 --> 00:30:27,600
other vendors and one thing that we

684
00:30:27,600 --> 00:30:30,360
wanted to try to do was for the rule

685
00:30:30,360 --> 00:30:32,580
sets that were particular to a vendor

686
00:30:32,580 --> 00:30:34,860
I'm not picking on like VMware here it's

687
00:30:34,860 --> 00:30:36,299
just the first vendor that comes to mind

688
00:30:36,299 --> 00:30:38,520
like they have their own Elam driver and

689
00:30:38,520 --> 00:30:40,620
so you can parse their rule set and then

690
00:30:40,620 --> 00:30:43,100
identify any of their corresponding

691
00:30:43,100 --> 00:30:46,620
VMware assigned executables that could

692
00:30:46,620 --> 00:30:50,399
in theory run protected and then this

693
00:30:50,399 --> 00:30:52,559
whole auditing process would apply

694
00:30:52,559 --> 00:30:55,080
equally like to VMware where we would

695
00:30:55,080 --> 00:30:58,559
try to identify like VMware signs low

696
00:30:58,559 --> 00:31:00,799
bins that would protect or that would

697
00:31:00,799 --> 00:31:03,480
permit arbitrary unsigned code execution

698
00:31:03,480 --> 00:31:06,000
in the case of VMware I wasn't able to

699
00:31:06,000 --> 00:31:08,940
find any obvious ones same goes for lots

700
00:31:08,940 --> 00:31:10,919
of other vendors so again I was just

701
00:31:10,919 --> 00:31:13,380
going for like the

702
00:31:13,380 --> 00:31:15,059
um the path of least resistance here

703
00:31:15,059 --> 00:31:17,419
like anything that allows Microsoft

704
00:31:17,419 --> 00:31:21,659
because as you saw I was able to find an

705
00:31:21,659 --> 00:31:24,240
abusable MS this build so that got the

706
00:31:24,240 --> 00:31:26,100
job done

707
00:31:26,100 --> 00:31:29,360
so some detection recommendations

708
00:31:29,360 --> 00:31:33,380
my advice would be to focus on the

709
00:31:33,380 --> 00:31:37,080
registering of any protected services of

710
00:31:37,080 --> 00:31:38,340
course you're going to have false

711
00:31:38,340 --> 00:31:41,580
positives but in theory like if you can

712
00:31:41,580 --> 00:31:43,980
suppress some of those this should be

713
00:31:43,980 --> 00:31:46,500
relatively rare that you would have any

714
00:31:46,500 --> 00:31:48,600
new Services be created that you don't

715
00:31:48,600 --> 00:31:51,200
expect in your environment

716
00:31:51,200 --> 00:31:54,480
I would probably shy away from like

717
00:31:54,480 --> 00:31:57,539
anti-malware light process creation I

718
00:31:57,539 --> 00:31:58,880
think that would probably be much more

719
00:31:58,880 --> 00:32:02,340
false positive prone so yeah I just

720
00:32:02,340 --> 00:32:04,140
encourage you to focus on service

721
00:32:04,140 --> 00:32:07,140
creation or modification

722
00:32:07,140 --> 00:32:09,480
uh as for vendors

723
00:32:09,480 --> 00:32:11,100
um again I'm not going to shame any

724
00:32:11,100 --> 00:32:13,559
vendors here I don't even blame the

725
00:32:13,559 --> 00:32:15,600
vendors who have the overly permissive

726
00:32:15,600 --> 00:32:17,940
rule sets entirely

727
00:32:17,940 --> 00:32:20,159
um because Microsoft allowed them to

728
00:32:20,159 --> 00:32:22,440
submit and approve those overly

729
00:32:22,440 --> 00:32:25,260
permissive rules but I would encourage

730
00:32:25,260 --> 00:32:29,039
any vendor who does publish and have a

731
00:32:29,039 --> 00:32:31,980
signed elom driver just to go back and

732
00:32:31,980 --> 00:32:33,899
audit your rule set and make sure you're

733
00:32:33,899 --> 00:32:36,779
not allowing anything that shouldn't be

734
00:32:36,779 --> 00:32:39,000
in there because you wouldn't want to be

735
00:32:39,000 --> 00:32:42,299
the vendor that ruins the entire

736
00:32:42,299 --> 00:32:46,440
anti-mower light ecosystem for everyone

737
00:32:46,440 --> 00:32:47,880
yeah

738
00:32:47,880 --> 00:32:51,779
so in conclusion why is this so bad

739
00:32:51,779 --> 00:32:54,899
one overly permissive Elam driver from a

740
00:32:54,899 --> 00:32:58,440
single vendor poisons the well for all

741
00:32:58,440 --> 00:33:00,000
other vendors

742
00:33:00,000 --> 00:33:02,159
again so the way that we weaponize this

743
00:33:02,159 --> 00:33:03,419
is

744
00:33:03,419 --> 00:33:05,640
we identify that overly permissive

745
00:33:05,640 --> 00:33:07,919
driver we drop it onto the system we

746
00:33:07,919 --> 00:33:10,320
register it with that API

747
00:33:10,320 --> 00:33:13,140
and then we take our corresponding

748
00:33:13,140 --> 00:33:16,200
service executable that is signed so I

749
00:33:16,200 --> 00:33:19,260
must build and run that protected and so

750
00:33:19,260 --> 00:33:21,000
even if

751
00:33:21,000 --> 00:33:23,760
what's installed on our Target system is

752
00:33:23,760 --> 00:33:26,640
like uh again like VMware carbon black

753
00:33:26,640 --> 00:33:28,200
cloud right

754
00:33:28,200 --> 00:33:30,720
um if the overly permissive Elon driver

755
00:33:30,720 --> 00:33:33,179
is from another vendor there's nothing

756
00:33:33,179 --> 00:33:35,220
preventing me the attacker from just

757
00:33:35,220 --> 00:33:37,980
dropping that side by side with VMware

758
00:33:37,980 --> 00:33:40,679
in this case registering that and then

759
00:33:40,679 --> 00:33:43,919
getting Ms build to run my malicious

760
00:33:43,919 --> 00:33:48,179
payload and be protected or to go

761
00:33:48,179 --> 00:33:51,000
stop the VMware on black cloud endpoint

762
00:33:51,000 --> 00:33:54,120
Service as well

763
00:33:54,120 --> 00:33:56,100
um so again the Microsoft's vetting

764
00:33:56,100 --> 00:33:57,720
process for these things is far from

765
00:33:57,720 --> 00:34:00,720
robust and hopefully in the future they

766
00:34:00,720 --> 00:34:03,000
may gradually Implement some stronger

767
00:34:03,000 --> 00:34:05,340
checks and start to lock this down but

768
00:34:05,340 --> 00:34:07,799
there is no easy fix right now

769
00:34:07,799 --> 00:34:10,199
so I reported this to Microsoft back in

770
00:34:10,199 --> 00:34:12,980
December uh of 2021

771
00:34:12,980 --> 00:34:15,899
they acknowledge the issue no surprise

772
00:34:15,899 --> 00:34:18,540
like I'm not bashing on MSR msrc this is

773
00:34:18,540 --> 00:34:21,239
not a security boundary but I pass it on

774
00:34:21,239 --> 00:34:23,460
to the defender research team and they

775
00:34:23,460 --> 00:34:25,560
own this like so I just want to thank

776
00:34:25,560 --> 00:34:28,859
David Kaplan gilbasso Phil Zuckerman on

777
00:34:28,859 --> 00:34:31,619
the defender research team they've just

778
00:34:31,619 --> 00:34:34,139
been wonderful to work with they've

779
00:34:34,139 --> 00:34:36,179
taken it very seriously and they have

780
00:34:36,179 --> 00:34:38,940
proactively communicated with their

781
00:34:38,940 --> 00:34:41,760
Microsoft virus initiative Partners so

782
00:34:41,760 --> 00:34:44,480
anyone who does have an Elon certificate

783
00:34:44,480 --> 00:34:46,859
or Elam driver

784
00:34:46,859 --> 00:34:49,139
through the mvi program you would have

785
00:34:49,139 --> 00:34:50,339
already been reached out to and

786
00:34:50,339 --> 00:34:53,760
proactively communicated with so again

787
00:34:53,760 --> 00:34:55,139
shout out to them they've just been

788
00:34:55,139 --> 00:34:57,119
awesome

789
00:34:57,119 --> 00:34:58,440
um like soft gave me an official

790
00:34:58,440 --> 00:34:59,760
response

791
00:34:59,760 --> 00:35:01,800
um saying we've got a tight partnership

792
00:35:01,800 --> 00:35:04,800
here uh and indeed they did communicate

793
00:35:04,800 --> 00:35:07,380
with their mvi Partners so they've been

794
00:35:07,380 --> 00:35:08,400
great

795
00:35:08,400 --> 00:35:10,560
okay so some resources if you want to

796
00:35:10,560 --> 00:35:12,780
learn more about Elam protective

797
00:35:12,780 --> 00:35:14,060
processes

798
00:35:14,060 --> 00:35:17,579
these slides will be available soon so

799
00:35:17,579 --> 00:35:19,140
recommend you check these out if you

800
00:35:19,140 --> 00:35:20,760
want to learn more

801
00:35:20,760 --> 00:35:23,099
and then the code that you saw me use

802
00:35:23,099 --> 00:35:26,280
all this is available on my GitHub so

803
00:35:26,280 --> 00:35:28,800
get Elon cert info will you just point

804
00:35:28,800 --> 00:35:31,260
it to an Elon driver and it will parse

805
00:35:31,260 --> 00:35:34,500
out those rules for you get TBS hash

806
00:35:34,500 --> 00:35:37,079
again that's the one that will take a

807
00:35:37,079 --> 00:35:39,420
certificate and calculate the TBS hash

808
00:35:39,420 --> 00:35:40,859
so that you can start to go through that

809
00:35:40,859 --> 00:35:43,680
research process and then finally the

810
00:35:43,680 --> 00:35:46,980
The partially weaponized script it's a

811
00:35:46,980 --> 00:35:48,359
Powershell module called anti-malware

812
00:35:48,359 --> 00:35:49,940
blight

813
00:35:49,940 --> 00:35:52,980
I intentionally wanted it to be defanged

814
00:35:52,980 --> 00:35:56,820
so it is fully weaponized if you bring

815
00:35:56,820 --> 00:35:59,359
your own abusable

816
00:35:59,359 --> 00:36:03,359
Elum driver and abusable Ms build that

817
00:36:03,359 --> 00:36:06,900
you can go find on on virus total okay

818
00:36:06,900 --> 00:36:09,200
so thank you

819
00:36:09,200 --> 00:36:12,310
[Music]

820
00:36:16,150 --> 00:36:19,260
[Music]

