1
00:00:01,700 --> 00:00:04,810
[Music]

2
00:00:08,000 --> 00:00:11,940
now it's my pleasure to welcome online

3
00:00:11,940 --> 00:00:15,200
Quan Jin

4
00:00:16,440 --> 00:00:20,160
hi everyone it's a great honor to speak

5
00:00:20,160 --> 00:00:24,359
at black Tech USA 2022 today I will

6
00:00:24,359 --> 00:00:27,480
share some experience and insights

7
00:00:27,480 --> 00:00:29,880
um in the wild Windows LP the rebate

8
00:00:29,880 --> 00:00:30,900
hunting

9
00:00:30,900 --> 00:00:34,260
let me introduce myself first

10
00:00:34,260 --> 00:00:37,440
my name is changing you can also call me

11
00:00:37,440 --> 00:00:41,399
Lucas I'm currently employed in ebatp

12
00:00:41,399 --> 00:00:44,579
security my interests are vulnerability

13
00:00:44,579 --> 00:00:46,860
research and in the wild everyday

14
00:00:46,860 --> 00:00:50,460
hunting previously I had presented at

15
00:00:50,460 --> 00:00:55,140
Blue's head Shanghai 2019 and hitb 2021

16
00:00:55,140 --> 00:00:58,820
understand okay let's get to the point

17
00:00:58,820 --> 00:01:03,539
this is a gender of my talk

18
00:01:03,539 --> 00:01:06,900
let me first explain why we decided to

19
00:01:06,900 --> 00:01:10,680
hang on in the wild Windows LP 0-day and

20
00:01:10,680 --> 00:01:14,780
why we think this is possible

21
00:01:14,939 --> 00:01:18,900
as you can see in the picture from 2017

22
00:01:18,900 --> 00:01:22,380
to 2021 Microsoft is closed a total of

23
00:01:22,380 --> 00:01:26,759
28 in the wild Windows LP 0 days most of

24
00:01:26,759 --> 00:01:29,060
them are windows kernel renewabilities

25
00:01:29,060 --> 00:01:32,400
these vulnerabilities are often used by

26
00:01:32,400 --> 00:01:35,100
top level groups and could cause great

27
00:01:35,100 --> 00:01:38,340
harm for security vendors is very

28
00:01:38,340 --> 00:01:41,159
challenging to catch such a zero day

29
00:01:41,159 --> 00:01:44,820
starting in 2020 we began to think about

30
00:01:44,820 --> 00:01:47,520
the possibility of catching an in the

31
00:01:47,520 --> 00:01:50,460
wild when those LP very day

32
00:01:50,460 --> 00:01:53,700
so is it possible to catch an in the

33
00:01:53,700 --> 00:01:57,479
wild Windows LP 0-day in order to answer

34
00:01:57,479 --> 00:02:00,000
this question we should think about

35
00:02:00,000 --> 00:02:01,740
other two questions

36
00:02:01,740 --> 00:02:04,740
number one how to obtain valuable data

37
00:02:04,740 --> 00:02:07,680
stats that potentially helps their Base

38
00:02:07,680 --> 00:02:11,280
number two how to develop an effective

39
00:02:11,280 --> 00:02:13,319
detection method

40
00:02:13,319 --> 00:02:16,140
for the first question we have some

41
00:02:16,140 --> 00:02:18,319
private data sets yeah addition

42
00:02:18,319 --> 00:02:21,300
historical cases shows that public

43
00:02:21,300 --> 00:02:24,239
platform such as virus total may have

44
00:02:24,239 --> 00:02:27,239
their days therefore by using private

45
00:02:27,239 --> 00:02:30,360
and public data sets we can solve the

46
00:02:30,360 --> 00:02:31,739
first question

47
00:02:31,739 --> 00:02:34,379
for the second question there are two

48
00:02:34,379 --> 00:02:36,900
methods of catching a zero day from

49
00:02:36,900 --> 00:02:40,680
millions of samples Dynamic detection of

50
00:02:40,680 --> 00:02:43,260
static detection Dynamic detection

51
00:02:43,260 --> 00:02:47,340
refers to execution in a stand box or in

52
00:02:47,340 --> 00:02:49,920
a real environment and picking up a

53
00:02:49,920 --> 00:02:52,860
sample through abnormal behaviors such

54
00:02:52,860 --> 00:02:55,560
as antivirus and sandbox

55
00:02:55,560 --> 00:02:58,620
static detection refers to match samples

56
00:02:58,620 --> 00:03:02,459
whose basic signatures such as Yara

57
00:03:02,459 --> 00:03:05,640
and first answers have advantages and

58
00:03:05,640 --> 00:03:08,400
disadvantages we have tried first

59
00:03:08,400 --> 00:03:11,819
answers within our capabilities based on

60
00:03:11,819 --> 00:03:14,640
the result we think the static detection

61
00:03:14,640 --> 00:03:18,180
is most suitable for us we will detail

62
00:03:18,180 --> 00:03:19,860
the process later

63
00:03:19,860 --> 00:03:23,640
next I'll explain why we spend a lot of

64
00:03:23,640 --> 00:03:26,340
time studying historical in the wild

65
00:03:26,340 --> 00:03:30,080
Windows lp0 days

66
00:03:30,720 --> 00:03:33,659
so why should we learn from history

67
00:03:33,659 --> 00:03:36,959
there are three reasons number one some

68
00:03:36,959 --> 00:03:40,799
explode tactics are consistent over time

69
00:03:40,799 --> 00:03:43,739
number two sync from the attacker's

70
00:03:43,739 --> 00:03:46,920
wheel allows us for better defense

71
00:03:46,920 --> 00:03:50,159
and number three historical cases have

72
00:03:50,159 --> 00:03:54,560
been carefully studied by the community

73
00:03:54,599 --> 00:03:57,299
in order to learn from history we

74
00:03:57,299 --> 00:04:00,959
studied over 50 cves almost all in the

75
00:04:00,959 --> 00:04:03,840
wild Windows lpu 0 days and some long

76
00:04:03,840 --> 00:04:08,159
days that's from 2014 to 2021 be

77
00:04:08,159 --> 00:04:10,500
carefully counted the discovered vendor

78
00:04:10,500 --> 00:04:14,400
using organization patch cycle initial

79
00:04:14,400 --> 00:04:17,399
disclosure outcome usage scenario

80
00:04:17,399 --> 00:04:20,519
targeted system versions vulnerability

81
00:04:20,519 --> 00:04:23,340
model vulnerability type explore

82
00:04:23,340 --> 00:04:26,940
techniques public analyze blogs public

83
00:04:26,940 --> 00:04:31,199
explodes the original sample is have and

84
00:04:31,199 --> 00:04:33,000
some other information

85
00:04:33,000 --> 00:04:35,880
here I would like to focus on a few key

86
00:04:35,880 --> 00:04:37,080
points

87
00:04:37,080 --> 00:04:40,680
the first point is usage scenario

88
00:04:40,680 --> 00:04:43,800
whether the center was used as a

89
00:04:43,800 --> 00:04:46,860
standalone component or as part of a

90
00:04:46,860 --> 00:04:47,699
chair

91
00:04:47,699 --> 00:04:51,060
and whether the explode was used in a

92
00:04:51,060 --> 00:04:54,240
fireless form or was just contained in a

93
00:04:54,240 --> 00:04:55,320
job file

94
00:04:55,320 --> 00:04:58,139
this information will directly affect

95
00:04:58,139 --> 00:05:00,479
our selection of different detection

96
00:05:00,479 --> 00:05:03,180
methods

97
00:05:03,180 --> 00:05:05,220
the next point is targeted system

98
00:05:05,220 --> 00:05:08,639
versions many windows LP sample will

99
00:05:08,639 --> 00:05:10,860
check OS version before they are used

100
00:05:10,860 --> 00:05:14,400
you can only Trigger or explode in some

101
00:05:14,400 --> 00:05:16,139
specific versions

102
00:05:16,139 --> 00:05:19,620
this information is useful when making a

103
00:05:19,620 --> 00:05:23,400
Sandbox or a reproduction environment

104
00:05:23,400 --> 00:05:26,400
and next is vulnerability model by

105
00:05:26,400 --> 00:05:28,680
counting the vulnerability models of

106
00:05:28,680 --> 00:05:32,400
historical samples we can conclude which

107
00:05:32,400 --> 00:05:35,460
component is most targeted and which

108
00:05:35,460 --> 00:05:38,280
attack surface is most favored by

109
00:05:38,280 --> 00:05:43,199
crackers during a specific of time

110
00:05:43,199 --> 00:05:46,500
and this information is useful when we

111
00:05:46,500 --> 00:05:50,460
predicting the most likely vulnerability

112
00:05:50,460 --> 00:05:53,520
let's say maneuability type by counting

113
00:05:53,520 --> 00:05:56,460
the type of historical vulnerability we

114
00:05:56,460 --> 00:05:59,460
can infer which type of vulnerability is

115
00:05:59,460 --> 00:06:02,039
the attacker's most favor this

116
00:06:02,039 --> 00:06:04,259
information can help us configure

117
00:06:04,259 --> 00:06:06,780
reproduction environment for example

118
00:06:06,780 --> 00:06:10,440
whether need to configure driver verify

119
00:06:10,440 --> 00:06:13,620
and this information can also show the

120
00:06:13,620 --> 00:06:16,020
popularity of different vulnerability

121
00:06:16,020 --> 00:06:17,940
types

122
00:06:17,940 --> 00:06:20,880
next point is Expo techniques

123
00:06:20,880 --> 00:06:23,520
I think this is the most important

124
00:06:23,520 --> 00:06:26,759
information we can't explore techniques

125
00:06:26,759 --> 00:06:30,060
almost in the wild Windows LP 0 days

126
00:06:30,060 --> 00:06:33,000
from 2014 to 2021

127
00:06:33,000 --> 00:06:36,060
based on the statistic we have obtained

128
00:06:36,060 --> 00:06:38,100
some valuable conclusions

129
00:06:38,100 --> 00:06:40,979
for example B server side window plug

130
00:06:40,979 --> 00:06:46,020
manager is popular from 2015 to 2016 and

131
00:06:46,020 --> 00:06:49,199
the method of using previous mode to

132
00:06:49,199 --> 00:06:51,360
achieve actually addressed read and

133
00:06:51,360 --> 00:06:53,580
write has become more and more popular

134
00:06:53,580 --> 00:06:58,080
since 2018. and we also found that a

135
00:06:58,080 --> 00:07:00,900
method of using Edge and validate hander

136
00:07:00,900 --> 00:07:04,080
to lead kernel information is popular in

137
00:07:04,080 --> 00:07:06,180
the past five years

138
00:07:06,180 --> 00:07:09,360
next point is public analyze blogs and

139
00:07:09,360 --> 00:07:12,419
explodes the public blocks and explodes

140
00:07:12,419 --> 00:07:15,000
can turn the research results of the

141
00:07:15,000 --> 00:07:16,280
whole Community

142
00:07:16,280 --> 00:07:18,780
observing this existing knowledge rate

143
00:07:18,780 --> 00:07:21,360
is just like standing on the shoulders

144
00:07:21,360 --> 00:07:26,039
of jazz which is very helpful for us

145
00:07:26,039 --> 00:07:29,160
and finally the original sample is high

146
00:07:29,160 --> 00:07:32,039
we also pay great attention to

147
00:07:32,039 --> 00:07:34,800
collecting the original samples of each

148
00:07:34,800 --> 00:07:38,819
historical Windows LP zero day the files

149
00:07:38,819 --> 00:07:41,280
hashed and explodes of these original

150
00:07:41,280 --> 00:07:44,360
samples are the first hand information

151
00:07:44,360 --> 00:07:47,819
if we can detect result we can also

152
00:07:47,819 --> 00:07:51,419
catch similar samples in the future

153
00:07:51,419 --> 00:07:55,139
in addition to learn from history we

154
00:07:55,139 --> 00:07:56,580
should also learn from the latest

155
00:07:56,580 --> 00:08:00,060
vulnerabilities and explore techniques

156
00:08:00,060 --> 00:08:04,080
the reason as follows number one a new

157
00:08:04,080 --> 00:08:07,500
disclosed vulnerability may have balance

158
00:08:07,500 --> 00:08:10,979
number two a new Target Model will be

159
00:08:10,979 --> 00:08:14,520
fast and older by the whole community

160
00:08:14,520 --> 00:08:17,759
number three the attacker may have some

161
00:08:17,759 --> 00:08:20,819
similar renewability in use or which to

162
00:08:20,819 --> 00:08:21,720
use

163
00:08:21,720 --> 00:08:24,419
number four a new explode techniques

164
00:08:24,419 --> 00:08:28,319
tends to be used by attackers

165
00:08:28,319 --> 00:08:31,319
next I will describe how we compare

166
00:08:31,319 --> 00:08:33,899
different detection lenses and choose

167
00:08:33,899 --> 00:08:37,080
one from zero

168
00:08:37,080 --> 00:08:39,240
as far as we know there are three

169
00:08:39,240 --> 00:08:42,299
optional methods which to catch and in

170
00:08:42,299 --> 00:08:44,540
the wild Windows LP

171
00:08:44,540 --> 00:08:48,360
antivirus or something like it stand box

172
00:08:48,360 --> 00:08:51,779
or something like it Yara or something

173
00:08:51,779 --> 00:08:53,300
like it

174
00:08:53,300 --> 00:08:56,279
antivirus is the most powerful tool

175
00:08:56,279 --> 00:08:58,980
exposed Sky have constant in the wild

176
00:08:58,980 --> 00:09:02,940
Windows LP 0 days with the antivirus in

177
00:09:02,940 --> 00:09:04,740
the past few years

178
00:09:04,740 --> 00:09:08,279
the advantages of antivirus in that was

179
00:09:08,279 --> 00:09:10,560
deployed in large-scale real-world

180
00:09:10,560 --> 00:09:13,380
environments it can also detect strips

181
00:09:13,380 --> 00:09:16,500
in real time and have chance to extract

182
00:09:16,500 --> 00:09:18,779
encryptive privileged explanation

183
00:09:18,779 --> 00:09:21,959
component however not every vendors

184
00:09:21,959 --> 00:09:25,800
antivirus can be as good as the sky also

185
00:09:25,800 --> 00:09:29,100
antivirus is likely to be bypassed or

186
00:09:29,100 --> 00:09:32,160
Detective this increased the difficulty

187
00:09:32,160 --> 00:09:35,040
of developing an antiviral-based hunting

188
00:09:35,040 --> 00:09:36,959
method

189
00:09:36,959 --> 00:09:40,019
sandbox is another tool to hunt in the

190
00:09:40,019 --> 00:09:42,600
world's third day I had some successful

191
00:09:42,600 --> 00:09:45,540
experience in the wild office during the

192
00:09:45,540 --> 00:09:48,620
day hunting with the help of sandbox

193
00:09:48,620 --> 00:09:51,360
interested audience can refer to my

194
00:09:51,360 --> 00:09:53,760
previous speech on brewhead Shanghai

195
00:09:53,760 --> 00:09:55,440
2019.

196
00:09:55,440 --> 00:09:58,680
unlike antivirus the sandbox environment

197
00:09:58,680 --> 00:10:01,680
is highly controllable and can be freely

198
00:10:01,680 --> 00:10:04,640
configured in addition the sandbox

199
00:10:04,640 --> 00:10:06,959
behavior-based detection makes it

200
00:10:06,959 --> 00:10:10,860
accuracy either I think sandbox is

201
00:10:10,860 --> 00:10:13,140
somehow not suitable for hunting with

202
00:10:13,140 --> 00:10:17,339
those LP 0 days unlike all face many LP

203
00:10:17,339 --> 00:10:20,459
explodes have OS version check to avoid

204
00:10:20,459 --> 00:10:23,220
unexpected bsod

205
00:10:23,220 --> 00:10:26,519
which makes them more Hider to sandbox

206
00:10:26,519 --> 00:10:29,580
you may think that we can solve this

207
00:10:29,580 --> 00:10:32,040
problem by making a few more environment

208
00:10:32,040 --> 00:10:35,399
but the number of new PE samples every

209
00:10:35,399 --> 00:10:39,480
day is huge each samples is delivered to

210
00:10:39,480 --> 00:10:42,660
a new environment means a huge resource

211
00:10:42,660 --> 00:10:45,899
over set overhead not every vendor has

212
00:10:45,899 --> 00:10:48,660
enough funding to affords this

213
00:10:48,660 --> 00:10:51,180
in addition stand dog based detection

214
00:10:51,180 --> 00:10:54,240
methods and other disadvantages but

215
00:10:54,240 --> 00:10:56,279
Windows LP samples

216
00:10:56,279 --> 00:11:00,360
number one some samples require payments

217
00:11:00,360 --> 00:11:03,240
but the sandbox cannot provide valid

218
00:11:03,240 --> 00:11:06,600
impairments by default number two some

219
00:11:06,600 --> 00:11:09,660
samples only lead to bsod without

220
00:11:09,660 --> 00:11:12,779
subsequent behaviors which is difficult

221
00:11:12,779 --> 00:11:14,339
to detect it

222
00:11:14,339 --> 00:11:16,920
number three there is a cycle between

223
00:11:16,920 --> 00:11:20,519
sandbox development and deployment which

224
00:11:20,519 --> 00:11:22,680
will lead to missing the best detection

225
00:11:22,680 --> 00:11:26,399
cycle for some latest experts

226
00:11:26,399 --> 00:11:29,519
Yara is another Master to hunt in the

227
00:11:29,519 --> 00:11:33,000
wild Windows LP rotate it is widely used

228
00:11:33,000 --> 00:11:35,339
for malware hanky

229
00:11:35,339 --> 00:11:39,180
Yara almost has no technique barriers no

230
00:11:39,180 --> 00:11:41,640
fears of various checks and if it's

231
00:11:41,640 --> 00:11:44,180
flexible in development and deployment

232
00:11:44,180 --> 00:11:48,060
while a new explore technique appears we

233
00:11:48,060 --> 00:11:51,060
can quickly convert it into words and

234
00:11:51,060 --> 00:11:54,120
fit it into the detection system finally

235
00:11:54,120 --> 00:11:57,540
it is lower cost than antivirus and

236
00:11:57,540 --> 00:12:00,899
sandbox but it also have some

237
00:12:00,899 --> 00:12:04,140
shortcomings such as it can easily the

238
00:12:04,140 --> 00:12:06,860
two-fourth positives and false negatives

239
00:12:06,860 --> 00:12:10,500
therefore if we use Yara to hunt in the

240
00:12:10,500 --> 00:12:13,680
wild Windows LP zero day we need to be

241
00:12:13,680 --> 00:12:17,640
very familiar with historical cases and

242
00:12:17,640 --> 00:12:20,600
we have done this before

243
00:12:20,600 --> 00:12:23,880
we have compared three hunting measures

244
00:12:23,880 --> 00:12:27,060
we finally choose Yara as our main

245
00:12:27,060 --> 00:12:30,120
hunting dancer because it is more easy

246
00:12:30,120 --> 00:12:33,240
more flexible and less expensive when

247
00:12:33,240 --> 00:12:36,000
you put Windows LP zero day hunting

248
00:12:36,000 --> 00:12:38,760
another reason we choose Yara is that

249
00:12:38,760 --> 00:12:42,360
after after writing some yellow words we

250
00:12:42,360 --> 00:12:45,180
back tested some historical Windows LP

251
00:12:45,180 --> 00:12:48,779
samples so I was surprised Yara from the

252
00:12:48,779 --> 00:12:50,760
better than expected

253
00:12:50,760 --> 00:12:54,120
next I will describe how to transfer

254
00:12:54,120 --> 00:12:57,660
learning experience into other words

255
00:12:57,660 --> 00:13:01,440
basically we have three principles the

256
00:13:01,440 --> 00:13:04,200
first principle is write reverse

257
00:13:04,200 --> 00:13:06,660
according to the signatures of each

258
00:13:06,660 --> 00:13:09,120
stage of exploitation

259
00:13:09,120 --> 00:13:13,260
normally a Windows kernel LP explode has

260
00:13:13,260 --> 00:13:15,120
the following stages

261
00:13:15,120 --> 00:13:18,800
vulnerability triggering hip functioning

262
00:13:18,800 --> 00:13:21,959
kernel information link arbitrary

263
00:13:21,959 --> 00:13:25,019
address read and write control flow

264
00:13:25,019 --> 00:13:26,399
hijacking

265
00:13:26,399 --> 00:13:30,300
privilege installation our task is to

266
00:13:30,300 --> 00:13:32,459
write reverse based on the common

267
00:13:32,459 --> 00:13:36,000
features of each stage here are two

268
00:13:36,000 --> 00:13:37,560
examples

269
00:13:37,560 --> 00:13:40,740
for kernel information leap the idea is

270
00:13:40,740 --> 00:13:43,019
to match against common Windows kernel

271
00:13:43,019 --> 00:13:45,660
information link techniques including

272
00:13:45,660 --> 00:13:49,500
but not limited to this

273
00:13:49,500 --> 00:13:52,320
and for arbitrary address read and write

274
00:13:52,320 --> 00:13:55,200
primitive the idea is to match against

275
00:13:55,200 --> 00:13:57,959
the following points

276
00:13:57,959 --> 00:14:01,920
and it should be noted that above idea

277
00:14:01,920 --> 00:14:04,380
at the top are just some possible ideas

278
00:14:04,380 --> 00:14:07,800
not all ideas are suitable for your own

279
00:14:07,800 --> 00:14:11,160
words and some ideas will lead to lots

280
00:14:11,160 --> 00:14:13,980
of false positive

281
00:14:13,980 --> 00:14:17,459
the second principle right to reverse or

282
00:14:17,459 --> 00:14:20,639
latest explode techniques here I give

283
00:14:20,639 --> 00:14:22,620
two examples

284
00:14:22,620 --> 00:14:26,339
in July 2020 our federal and coins paid

285
00:14:26,339 --> 00:14:28,860
offers the negative presented a new

286
00:14:28,860 --> 00:14:31,139
windows keep overflow exploit technique

287
00:14:31,139 --> 00:14:35,339
as the SST IC 2020 conference of

288
00:14:35,339 --> 00:14:38,459
studying their paper we realize that a

289
00:14:38,459 --> 00:14:41,279
method of actually addressed with help

290
00:14:41,279 --> 00:14:43,620
on private tribute in page Pro is

291
00:14:43,620 --> 00:14:46,579
universal and may be used in the future

292
00:14:46,579 --> 00:14:49,380
so we spend some time writing some

293
00:14:49,380 --> 00:14:52,380
yellow words for this technique it later

294
00:14:52,380 --> 00:14:55,380
turned out that this verse cause some

295
00:14:55,380 --> 00:14:57,180
high value samples

296
00:14:57,180 --> 00:15:02,040
and on 328 2021 his first guy wrote A

297
00:15:02,040 --> 00:15:05,100
Blog which disclosed in the wild Windows

298
00:15:05,100 --> 00:15:07,980
LP the rotate as mentioned in the

299
00:15:07,980 --> 00:15:10,079
article the sample achieved actually

300
00:15:10,079 --> 00:15:13,019
address read and write with the help of

301
00:15:13,019 --> 00:15:17,760
Windows notification facility AK AWS in

302
00:15:17,760 --> 00:15:21,300
try and August 2021 Alex plus gate of

303
00:15:21,300 --> 00:15:24,959
NCC group published two blocks detailing

304
00:15:24,959 --> 00:15:29,300
the explore techniques of CBE 2021

305
00:15:29,300 --> 00:15:32,940
31956 and explaining the method of using

306
00:15:32,940 --> 00:15:36,180
wnf to construct arbitrary address read

307
00:15:36,180 --> 00:15:37,860
and write creatives

308
00:15:37,860 --> 00:15:41,160
at the same time yes the song also would

309
00:15:41,160 --> 00:15:44,940
apply discussing an answer of exploit of

310
00:15:44,940 --> 00:15:47,880
exploding vulnerability with the help of

311
00:15:47,880 --> 00:15:49,199
wnf

312
00:15:49,199 --> 00:15:52,440
after studying these blogs we realized

313
00:15:52,440 --> 00:15:55,920
that the method is universal we again

314
00:15:55,920 --> 00:15:58,500
spend some time writing some Yara words

315
00:15:58,500 --> 00:16:02,459
on this technique as expected we did

316
00:16:02,459 --> 00:16:06,240
catch some high value samples

317
00:16:06,240 --> 00:16:10,199
the third principle is write words for

318
00:16:10,199 --> 00:16:12,720
the most likely vulnerability

319
00:16:12,720 --> 00:16:15,839
I also give an example here

320
00:16:15,839 --> 00:16:19,740
April 13 2021 his first guy was a Blog

321
00:16:19,740 --> 00:16:24,860
and disclosed CV disclosed TV 2021

322
00:16:24,860 --> 00:16:28,740
28310 which is an in the wild zero day

323
00:16:28,740 --> 00:16:32,220
in desktop Window Manager lest the

324
00:16:32,220 --> 00:16:35,519
amounts later vdi published another blog

325
00:16:35,519 --> 00:16:40,160
is closing another renewability CPA 2021

326
00:16:40,160 --> 00:16:44,100
26900 which is also a vulnerability in

327
00:16:44,100 --> 00:16:46,320
desktop Windows Manager

328
00:16:46,320 --> 00:16:49,980
this made us realize that this type of

329
00:16:49,980 --> 00:16:52,500
vulnerability may appear again in the

330
00:16:52,500 --> 00:16:55,560
future so we wrote some words for

331
00:16:55,560 --> 00:16:57,120
desktop Windows Manager

332
00:16:57,120 --> 00:17:00,120
maneuverabilities in ours a few weeks

333
00:17:00,120 --> 00:17:05,579
later we called cve 2021 33739

334
00:17:06,240 --> 00:17:09,959
built direct word is the first step in

335
00:17:09,959 --> 00:17:12,059
order to catch an in the white Windows

336
00:17:12,059 --> 00:17:15,119
LP zero day we need to build a whole

337
00:17:15,119 --> 00:17:18,540
system but here are some questions the

338
00:17:18,540 --> 00:17:21,419
first question is when an explode is

339
00:17:21,419 --> 00:17:24,900
matched by a verb how to notify Us in

340
00:17:24,900 --> 00:17:25,679
time

341
00:17:25,679 --> 00:17:28,559
it's our young address running on virus

342
00:17:28,559 --> 00:17:30,960
total we can use the notification

343
00:17:30,960 --> 00:17:34,740
mechanism a virus total hunting page we

344
00:17:34,740 --> 00:17:37,440
can configure the notify by email item

345
00:17:37,440 --> 00:17:40,500
when a new sample is matched our email

346
00:17:40,500 --> 00:17:43,860
will receive an application at once

347
00:17:43,860 --> 00:17:47,100
for us running on our own products we

348
00:17:47,100 --> 00:17:49,500
built a similar notification interface

349
00:17:49,500 --> 00:17:51,120
like PT

350
00:17:51,120 --> 00:17:54,240
and the second question is when we get

351
00:17:54,240 --> 00:17:58,260
explode how to quickly reproduce it and

352
00:17:58,260 --> 00:17:59,940
classify it

353
00:17:59,940 --> 00:18:02,820
we have counted the targeted OS version

354
00:18:02,820 --> 00:18:05,640
for each historical standpoint I

355
00:18:05,640 --> 00:18:08,160
studying historical cases this

356
00:18:08,160 --> 00:18:11,539
information can be used here in addition

357
00:18:11,539 --> 00:18:15,120
considering that what we count maybe one

358
00:18:15,120 --> 00:18:18,419
day one day or zero day we need to make

359
00:18:18,419 --> 00:18:21,480
all three types of environments and we

360
00:18:21,480 --> 00:18:23,640
need to update these environments over

361
00:18:23,640 --> 00:18:26,640
time in order to minimize the

362
00:18:26,640 --> 00:18:29,460
reproduction time we have made use type

363
00:18:29,460 --> 00:18:31,980
version of Windows

364
00:18:31,980 --> 00:18:35,280
the third question is what skills should

365
00:18:35,280 --> 00:18:38,520
we Master to debug different Windows LP

366
00:18:38,520 --> 00:18:42,360
explodes Let me Give an example here for

367
00:18:42,360 --> 00:18:44,700
those who have analyzed the windows

368
00:18:44,700 --> 00:18:47,880
kernel hip overflow valuability Windows

369
00:18:47,880 --> 00:18:50,280
kernel debugging and Driver verify are

370
00:18:50,280 --> 00:18:53,640
two basic skills besides those who have

371
00:18:53,640 --> 00:18:57,179
analyzed ew and covaluability it is

372
00:18:57,179 --> 00:18:59,580
necessary to using Windows remote

373
00:18:59,580 --> 00:19:03,000
debugging because directly attaching the

374
00:19:03,000 --> 00:19:06,480
dwm process will call system UI to

375
00:19:06,480 --> 00:19:08,160
become unresponsive

376
00:19:08,160 --> 00:19:11,039
the more experience we have the better

377
00:19:11,039 --> 00:19:14,460
we will answer this question

378
00:19:14,460 --> 00:19:17,880
no answer is perfect to make our system

379
00:19:17,880 --> 00:19:20,880
more accurate we have made the following

380
00:19:20,880 --> 00:19:24,539
tests and improvements number one use

381
00:19:24,539 --> 00:19:27,480
the collected history Windows lp-0 days

382
00:19:27,480 --> 00:19:29,880
templates to test the words

383
00:19:29,880 --> 00:19:33,000
number two use public parks and expose

384
00:19:33,000 --> 00:19:36,840
to test the growth number three for some

385
00:19:36,840 --> 00:19:39,299
cases with public parks and exploits

386
00:19:39,299 --> 00:19:42,120
cannot be collected try to write the

387
00:19:42,120 --> 00:19:45,059
parts and explodes and test the number

388
00:19:45,059 --> 00:19:47,640
four apply the rules to a large number

389
00:19:47,640 --> 00:19:50,520
of samples for stress testing

390
00:19:50,520 --> 00:19:53,520
and number five continue to convert

391
00:19:53,520 --> 00:19:56,760
latest explode techniques into words and

392
00:19:56,760 --> 00:19:58,860
test the jewels

393
00:19:58,860 --> 00:20:01,679
one year after the system was deployed

394
00:20:01,679 --> 00:20:04,559
we had caught lots of Windows LP

395
00:20:04,559 --> 00:20:06,059
vulnerabilities

396
00:20:06,059 --> 00:20:09,780
in next part we will share some we will

397
00:20:09,780 --> 00:20:12,419
share three cases which hung by our

398
00:20:12,419 --> 00:20:13,980
system

399
00:20:13,980 --> 00:20:16,919
and in the wild LP zero day in Windows

400
00:20:16,919 --> 00:20:20,340
were 32 kernel substitution and in the

401
00:20:20,340 --> 00:20:24,360
wild in in the world lp0 day in Windows

402
00:20:24,360 --> 00:20:27,480
desktop window manager and in the wild

403
00:20:27,480 --> 00:20:30,720
LP one day Windows common log file

404
00:20:30,720 --> 00:20:31,620
system

405
00:20:31,620 --> 00:20:34,679
let's look let's take a look at the

406
00:20:34,679 --> 00:20:36,299
first vulnerability

407
00:20:36,299 --> 00:20:39,539
in December 20 times in December 10 2020

408
00:20:39,539 --> 00:20:42,419
we caught the first in the wild Windows

409
00:20:42,419 --> 00:20:47,480
kernel lp03 Microsoft science CV

410
00:20:47,480 --> 00:20:50,460
2021-1732 to this supernovation

411
00:20:50,460 --> 00:20:53,039
the inner bar sample was from our

412
00:20:53,039 --> 00:20:56,580
private data set we noticed it because

413
00:20:56,580 --> 00:20:59,760
it used Edge and validate hander to lead

414
00:20:59,760 --> 00:21:03,120
kernel information which is a strong

415
00:21:03,120 --> 00:21:06,780
signature of Windows kernel LP explode

416
00:21:06,780 --> 00:21:10,080
answer analyzes shows that the sample

417
00:21:10,080 --> 00:21:13,440
exploited a type confusion zero day in

418
00:21:13,440 --> 00:21:15,480
with 32 kernel model

419
00:21:15,480 --> 00:21:18,600
it is worth mentioning that in the white

420
00:21:18,600 --> 00:21:21,419
sample was used as an independent

421
00:21:21,419 --> 00:21:25,380
component when using the sample you need

422
00:21:25,380 --> 00:21:28,620
to provide a pib at the parameter the

423
00:21:28,620 --> 00:21:31,559
PID indicates the process which needs to

424
00:21:31,559 --> 00:21:34,919
be activated the targeted process will

425
00:21:34,919 --> 00:21:38,159
be terminated first then restarted with

426
00:21:38,159 --> 00:21:41,580
system privileges if you run this sample

427
00:21:41,580 --> 00:21:45,000
directly it will also escalate each cell

428
00:21:45,000 --> 00:21:48,480
into system privilege but it will exist

429
00:21:48,480 --> 00:21:52,500
without any visible Behavior

430
00:21:52,500 --> 00:21:55,380
here are some highlights of this in the

431
00:21:55,380 --> 00:21:58,860
white sample number one it targeted the

432
00:21:58,860 --> 00:22:01,380
latest version of Windows 10 operating

433
00:22:01,380 --> 00:22:03,960
system in at that time

434
00:22:03,960 --> 00:22:07,679
number two it's used at manual bar info

435
00:22:07,679 --> 00:22:10,620
to build arbitrary address with printing

436
00:22:10,620 --> 00:22:14,460
which is novel at that time number three

437
00:22:14,460 --> 00:22:17,640
before explode the in the web sample

438
00:22:17,640 --> 00:22:20,820
detected specific antivirus and perform

439
00:22:20,820 --> 00:22:23,820
certain version check

440
00:22:23,820 --> 00:22:26,520
the rest of the details about this third

441
00:22:26,520 --> 00:22:29,400
day can refer to our blog or many other

442
00:22:29,400 --> 00:22:32,400
blocks written by the whole community

443
00:22:32,400 --> 00:22:34,860
now let's switch to the second

444
00:22:34,860 --> 00:22:37,320
renewability

445
00:22:37,320 --> 00:22:41,460
in May 22 2021 we cut the second in the

446
00:22:41,460 --> 00:22:47,240
wild Windows LP 0-day Microsoft style CV

447
00:22:47,299 --> 00:22:50,400
2021-33739 to this vulnerability

448
00:22:50,400 --> 00:22:53,039
as I mentioned in the build the right

449
00:22:53,039 --> 00:22:56,280
reward part we will regularly predict

450
00:22:56,280 --> 00:22:58,980
the most likely vulnerability and the

451
00:22:58,980 --> 00:23:02,400
right words around May 2020 we wrote

452
00:23:02,400 --> 00:23:05,400
some rules for DW and renewability

453
00:23:05,400 --> 00:23:08,940
and catching some pwm and days we kept

454
00:23:08,940 --> 00:23:12,240
we caught an unfamiliar dwm Stamper on

455
00:23:12,240 --> 00:23:16,260
May 22. 1000 analyze showed that there

456
00:23:16,260 --> 00:23:19,080
were a one-day explode at another zero

457
00:23:19,080 --> 00:23:21,120
day in this Temple

458
00:23:21,120 --> 00:23:23,880
when we first met this Temple we didn't

459
00:23:23,880 --> 00:23:26,700
know it was compiled based a published

460
00:23:26,700 --> 00:23:31,200
SQL code as usual we reproduced it in a

461
00:23:31,200 --> 00:23:33,840
full patched environment the reproduced

462
00:23:33,840 --> 00:23:36,600
results clearly showed that there is a

463
00:23:36,600 --> 00:23:39,480
zero day in this Temple which is a uaf

464
00:23:39,480 --> 00:23:42,179
in ewn call

465
00:23:42,179 --> 00:23:44,820
then we tracked with relative source

466
00:23:44,820 --> 00:23:47,700
code on GitHub which is an explode of

467
00:23:47,700 --> 00:23:52,140
cve 2021 26868 the in the White Center

468
00:23:52,140 --> 00:23:55,980
just replaced the circled part at that

469
00:23:55,980 --> 00:23:59,340
time we are a little confused how can a

470
00:23:59,340 --> 00:24:02,640
one-day sample contains a zero day

471
00:24:02,640 --> 00:24:05,039
after carefully confirmation we

472
00:24:05,039 --> 00:24:07,620
concludes that the Ulster accidentally

473
00:24:07,620 --> 00:24:10,380
introduced a new bug when writing the

474
00:24:10,380 --> 00:24:13,340
xcode for CBE 2021

475
00:24:13,340 --> 00:24:17,159
26868 and is also music

476
00:24:17,159 --> 00:24:20,100
if so this third day cannot be

477
00:24:20,100 --> 00:24:23,460
classified to in the wild zero day

478
00:24:23,460 --> 00:24:27,059
so we try to tell msrc that this is not

479
00:24:27,059 --> 00:24:31,460
strictly in the what Verity

480
00:24:31,500 --> 00:24:34,740
and this is the explore status finally

481
00:24:34,740 --> 00:24:37,220
published by msrc

482
00:24:37,220 --> 00:24:41,760
so it's really an interesting case

483
00:24:41,760 --> 00:24:44,039
let me talk about this vulnerability

484
00:24:44,039 --> 00:24:45,059
mode

485
00:24:45,059 --> 00:24:47,760
this vulnerability is caused by

486
00:24:47,760 --> 00:24:49,980
unbalanced reverse count on C

487
00:24:49,980 --> 00:24:51,960
interaction tracker binding manager

488
00:24:51,960 --> 00:24:55,500
object in dwm code

489
00:24:55,500 --> 00:24:57,900
the steps to trigger this vulnerability

490
00:24:57,900 --> 00:25:00,059
are number one create our state

491
00:25:00,059 --> 00:25:02,280
interaction tracker bindings manager

492
00:25:02,280 --> 00:25:05,280
module results number two create a state

493
00:25:05,280 --> 00:25:07,620
interaction tracker module resource

494
00:25:07,620 --> 00:25:08,940
number three

495
00:25:08,940 --> 00:25:11,580
finds the results created by step one

496
00:25:11,580 --> 00:25:15,179
twice to resource created by step two as

497
00:25:15,179 --> 00:25:18,000
you can see in the picture

498
00:25:18,000 --> 00:25:21,539
and do not release this result manually

499
00:25:21,539 --> 00:25:23,700
under normal condition the state

500
00:25:23,700 --> 00:25:25,580
interaction trying company management

501
00:25:25,580 --> 00:25:28,500
planning manager will co-process the

502
00:25:28,500 --> 00:25:31,320
tracker binding mode twice to add risk

503
00:25:31,320 --> 00:25:35,279
to add reference count by two then the

504
00:25:35,279 --> 00:25:37,500
code will call remove tracker balance

505
00:25:37,500 --> 00:25:41,039
twice to stop reference count by two and

506
00:25:41,039 --> 00:25:43,679
release the interaction tracker planning

507
00:25:43,679 --> 00:25:46,080
manager no modeling when the reference

508
00:25:46,080 --> 00:25:49,080
count is reduced to zero

509
00:25:49,080 --> 00:25:51,179
you have vulnerability research a

510
00:25:51,179 --> 00:25:54,539
scenario the reference count of C inter

511
00:25:54,539 --> 00:25:57,179
the interaction tracker binding manager

512
00:25:57,179 --> 00:25:59,460
will change differently from normal

513
00:25:59,460 --> 00:26:02,340
condition it will core process that

514
00:26:02,340 --> 00:26:05,159
tried her binding mode only once to add

515
00:26:05,159 --> 00:26:07,080
the reverse count by two

516
00:26:07,080 --> 00:26:10,080
however the code will still call remove

517
00:26:10,080 --> 00:26:12,900
tricer bindings twice to stop reverse

518
00:26:12,900 --> 00:26:15,900
count by two in the first remove tracker

519
00:26:15,900 --> 00:26:18,360
bindings call the reference count over

520
00:26:18,360 --> 00:26:20,220
State interaction trying turbining

521
00:26:20,220 --> 00:26:24,059
manager will be reduced to zero then say

522
00:26:24,059 --> 00:26:26,520
inter say interaction tracker binding

523
00:26:26,520 --> 00:26:27,600
manager

524
00:26:27,600 --> 00:26:30,240
will be free in internal release

525
00:26:30,240 --> 00:26:33,120
function in the second remove tracker

526
00:26:33,120 --> 00:26:35,940
bindings code when it tries to get some

527
00:26:35,940 --> 00:26:39,419
data from the fluid object to your code

528
00:26:39,419 --> 00:26:40,919
uaf

529
00:26:40,919 --> 00:26:45,600
next let's see the third vulnerability

530
00:26:45,600 --> 00:26:49,260
in October 2021 we got a new in the

531
00:26:49,260 --> 00:26:52,020
white Windows common log file system one

532
00:26:52,020 --> 00:26:55,980
day the sample was from virus total

533
00:26:55,980 --> 00:26:58,740
as I mentioned in the build the right

534
00:26:58,740 --> 00:27:01,980
word part we will regularly write words

535
00:27:01,980 --> 00:27:05,460
for latest explode techniques on October

536
00:27:05,460 --> 00:27:09,539
15 2021 the role we wrote for pipe

537
00:27:09,539 --> 00:27:12,299
attribute it sample

538
00:27:12,299 --> 00:27:15,000
the Stamper was used as a standalone

539
00:27:15,000 --> 00:27:18,000
component by the testing revealed that

540
00:27:18,000 --> 00:27:20,760
this sample exploded a vulnerability

541
00:27:20,760 --> 00:27:23,340
which affects all project Windows

542
00:27:23,340 --> 00:27:27,299
version before September 2021

543
00:27:27,299 --> 00:27:29,520
this is a type confusion vulnerability

544
00:27:29,520 --> 00:27:32,580
in common log file system model

545
00:27:32,580 --> 00:27:35,520
due to lack of some information we are

546
00:27:35,520 --> 00:27:37,860
unable to determine the CV number of

547
00:27:37,860 --> 00:27:40,919
this vulnerability it may be one option

548
00:27:40,919 --> 00:27:43,080
of none of them

549
00:27:43,080 --> 00:27:46,080
the root cause of this one day is the

550
00:27:46,080 --> 00:27:49,440
clfs motor lets some checks on the

551
00:27:49,440 --> 00:27:52,440
client context over that the attacker

552
00:27:52,440 --> 00:27:55,620
can take advantage of this provide an

553
00:27:55,620 --> 00:27:59,400
invalid lines and text office

554
00:27:59,400 --> 00:28:02,880
so in the web sample leverage this to

555
00:28:02,880 --> 00:28:06,360
make the first client context of reset

556
00:28:06,360 --> 00:28:09,480
point to the second container context of

557
00:28:09,480 --> 00:28:12,840
reset in a blf file

558
00:28:12,840 --> 00:28:16,020
to then use a one bit flip in Flash

559
00:28:16,020 --> 00:28:18,179
mental data to change the second

560
00:28:18,179 --> 00:28:22,799
container and text officer from 1380 to

561
00:28:22,799 --> 00:28:24,600
1B a0

562
00:28:24,600 --> 00:28:28,500
Flip 3 to B makes the container context

563
00:28:28,500 --> 00:28:31,919
of a set point to a fixed clfs container

564
00:28:31,919 --> 00:28:34,500
object

565
00:28:34,500 --> 00:28:38,880
with the help of the fixed CLS and clfs

566
00:28:38,880 --> 00:28:41,820
container object the explode hijacked

567
00:28:41,820 --> 00:28:44,940
virtual method State lfs container

568
00:28:44,940 --> 00:28:49,020
release and CLS antenna remove and built

569
00:28:49,020 --> 00:28:51,960
actually address flat screen team based

570
00:28:51,960 --> 00:28:53,220
on that

571
00:28:53,220 --> 00:28:55,740
the normal virtual function table of

572
00:28:55,740 --> 00:28:59,340
clfs container is as far as you can see

573
00:28:59,340 --> 00:29:01,740
the release and remove function

574
00:29:01,740 --> 00:29:04,260
and the hijacked virtual function table

575
00:29:04,260 --> 00:29:07,580
is as far as

576
00:29:08,100 --> 00:29:11,100
apart from this the in the watch sample

577
00:29:11,100 --> 00:29:13,980
built an archery address with prime team

578
00:29:13,980 --> 00:29:16,320
using the pipe attribute method

579
00:29:16,320 --> 00:29:21,000
described in the scoop Windows 10 Pro

580
00:29:21,000 --> 00:29:23,340
in order to get the address of a pipe

581
00:29:23,340 --> 00:29:25,679
attribute the explode using another

582
00:29:25,679 --> 00:29:28,679
public method its queries system big

583
00:29:28,679 --> 00:29:30,960
info with credit system Bitcoin

584
00:29:30,960 --> 00:29:33,299
information to list the address of a

585
00:29:33,299 --> 00:29:35,340
pack attribute object

586
00:29:35,340 --> 00:29:38,460
with kernel arbitrary address grid and

587
00:29:38,460 --> 00:29:40,559
right Primitives that explodes

588
00:29:40,559 --> 00:29:43,200
successfully swap the token of current

589
00:29:43,200 --> 00:29:46,740
process with the system token and spend

590
00:29:46,740 --> 00:29:49,500
a share with system privilege

591
00:29:49,500 --> 00:29:53,279
now let's take a look at how Microsoft

592
00:29:53,279 --> 00:29:56,220
fixed this valuability

593
00:29:56,220 --> 00:29:59,039
they only checked the value of client

594
00:29:59,039 --> 00:30:02,580
context of reset to make sure that it

595
00:30:02,580 --> 00:30:05,880
couldn't be less than one three six

596
00:30:05,880 --> 00:30:08,120
eight

597
00:30:08,299 --> 00:30:13,080
what if we construct a client context of

598
00:30:13,080 --> 00:30:15,720
a set that is greater than this value

599
00:30:15,720 --> 00:30:18,899
and make the client's context of exact

600
00:30:18,899 --> 00:30:23,640
point directly to a CLS clfs container

601
00:30:23,640 --> 00:30:26,700
object in memory

602
00:30:26,700 --> 00:30:29,940
we got a new bsod

603
00:30:29,940 --> 00:30:33,600
this is a direct of this patched one day

604
00:30:33,600 --> 00:30:37,320
and we report this variant to msrc at

605
00:30:37,320 --> 00:30:40,919
December 2021 Microsoft fixed this case

606
00:30:40,919 --> 00:30:45,559
in April 2022 and assigned cve

607
00:30:45,559 --> 00:30:50,220
2022-24480 to the to it okay that's the

608
00:30:50,220 --> 00:30:53,520
manipulative case still sharing part in

609
00:30:53,520 --> 00:30:56,159
next section we will combine our

610
00:30:56,159 --> 00:30:58,520
practice to share some detection

611
00:30:58,520 --> 00:31:00,960
suggestions on Windows LP

612
00:31:00,960 --> 00:31:04,140
vulnerabilities and give some insights

613
00:31:04,140 --> 00:31:06,960
into the future trend of in the wild

614
00:31:06,960 --> 00:31:10,580
Windows LP 0-day

615
00:31:10,580 --> 00:31:13,980
here are some detection suggestions our

616
00:31:13,980 --> 00:31:16,440
Windows LP vulnerabilities

617
00:31:16,440 --> 00:31:19,740
number one choose the most suitable

618
00:31:19,740 --> 00:31:23,039
method within your compatibility

619
00:31:23,039 --> 00:31:26,399
number two carefully study historical

620
00:31:26,399 --> 00:31:29,880
cases it's always a good thing number

621
00:31:29,880 --> 00:31:33,480
three keep an eye out for new virus a

622
00:31:33,480 --> 00:31:36,960
new in the wild maneuverability

623
00:31:36,960 --> 00:31:39,659
and finally some insights into the

624
00:31:39,659 --> 00:31:42,600
future trends of in the wild Windows LP

625
00:31:42,600 --> 00:31:44,940
zero day by us

626
00:31:44,940 --> 00:31:48,000
number one more vulnerability in common

627
00:31:48,000 --> 00:31:51,419
log far system may appear in the future

628
00:31:51,419 --> 00:31:54,779
number two pipe attribute method will be

629
00:31:54,779 --> 00:31:56,760
using again in the future

630
00:31:56,760 --> 00:32:00,120
number three in the wild explodes which

631
00:32:00,120 --> 00:32:03,059
use the following techniques may appear

632
00:32:03,059 --> 00:32:05,700
in the future

633
00:32:05,700 --> 00:32:08,700
and finally thanks to the skies I have

634
00:32:08,700 --> 00:32:11,520
learned a lot from them and thank you

635
00:32:11,520 --> 00:32:14,390
for attending my station

636
00:32:14,390 --> 00:32:17,509
[Music]

637
00:32:21,350 --> 00:32:24,459
[Music]

