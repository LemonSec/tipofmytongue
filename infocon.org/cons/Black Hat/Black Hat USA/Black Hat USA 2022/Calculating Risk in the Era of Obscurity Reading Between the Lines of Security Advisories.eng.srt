1
00:00:01,700 --> 00:00:04,810
[Music]

2
00:00:06,859 --> 00:00:09,360
hello everyone thanks for coming to our

3
00:00:09,360 --> 00:00:11,099
talk this morning this is calculating

4
00:00:11,099 --> 00:00:13,019
risk in the era of obscurity reading

5
00:00:13,019 --> 00:00:14,759
between the lines of security advisories

6
00:00:14,759 --> 00:00:16,560
like I said my name is Brian goris I'm

7
00:00:16,560 --> 00:00:17,940
the senior director of vulnerability

8
00:00:17,940 --> 00:00:20,400
research at Trend Micro I also run the

9
00:00:20,400 --> 00:00:22,560
zero day initiative which represents the

10
00:00:22,560 --> 00:00:24,480
world's largest vendor agnostic bug

11
00:00:24,480 --> 00:00:26,939
Bounty program and we also organize and

12
00:00:26,939 --> 00:00:28,439
adjudicate the pone to own hacking

13
00:00:28,439 --> 00:00:31,080
contest with me today is Dustin Childs

14
00:00:31,080 --> 00:00:33,000
our senior community Communications

15
00:00:33,000 --> 00:00:35,579
manager with zdi and he's also our chief

16
00:00:35,579 --> 00:00:38,100
patch Wrangler we're here today to talk

17
00:00:38,100 --> 00:00:40,500
about the security of patches themselves

18
00:00:40,500 --> 00:00:42,420
and how current vendor practices

19
00:00:42,420 --> 00:00:44,579
inevitably are creating risk for

20
00:00:44,579 --> 00:00:46,620
Enterprises rather than lowering risks

21
00:00:46,620 --> 00:00:48,420
through software updates I'm going to

22
00:00:48,420 --> 00:00:51,800
hand it over to Dustin and he'll begin

23
00:00:52,200 --> 00:00:54,840
hello everyone my name is Dustin and I

24
00:00:54,840 --> 00:00:57,480
care far too much about security patches

25
00:00:57,480 --> 00:00:59,699
it's actually kind of a sickness with me

26
00:00:59,699 --> 00:01:01,260
you've probably heard of Patch Tuesday

27
00:01:01,260 --> 00:01:04,260
since January of 2008 I have worked

28
00:01:04,260 --> 00:01:06,240
every single Patch Tuesday except for

29
00:01:06,240 --> 00:01:08,760
two one was for federal jury duty the

30
00:01:08,760 --> 00:01:11,100
other was my sister's wedding weirdly

31
00:01:11,100 --> 00:01:12,479
enough neither one would move the date

32
00:01:12,479 --> 00:01:14,159
for me

33
00:01:14,159 --> 00:01:15,659
um

34
00:01:15,659 --> 00:01:17,520
so why do I care so much it's because

35
00:01:17,520 --> 00:01:19,380
study after study after study has shown

36
00:01:19,380 --> 00:01:20,939
that applying patches is one of the best

37
00:01:20,939 --> 00:01:23,040
things you can do to help protect your

38
00:01:23,040 --> 00:01:24,720
Enterprise and reduce the risk of

39
00:01:24,720 --> 00:01:27,299
incidence and breaches and in a former

40
00:01:27,299 --> 00:01:29,100
life I worked at Microsoft and in the

41
00:01:29,100 --> 00:01:30,600
msrc and helped produce the patches

42
00:01:30,600 --> 00:01:32,820
which means I rebooted your computer at

43
00:01:32,820 --> 00:01:34,439
some point my bad I just want to

44
00:01:34,439 --> 00:01:37,020
apologize right now to your face uh and

45
00:01:37,020 --> 00:01:38,640
today I write a monthly patch blog

46
00:01:38,640 --> 00:01:40,500
talking about the latest updates from

47
00:01:40,500 --> 00:01:42,780
Adobe and Microsoft

48
00:01:42,780 --> 00:01:44,939
and here at the zdi we have a unique

49
00:01:44,939 --> 00:01:47,040
view in how different vendors across

50
00:01:47,040 --> 00:01:48,780
various sectors of it develop and

51
00:01:48,780 --> 00:01:50,159
produce patches

52
00:01:50,159 --> 00:01:52,439
since 2005 we have disclosed more than

53
00:01:52,439 --> 00:01:54,360
10 000 vulnerabilities to vendors across

54
00:01:54,360 --> 00:01:56,220
the industry so we speak from vast

55
00:01:56,220 --> 00:01:57,479
experience when it comes to bug

56
00:01:57,479 --> 00:01:59,520
disclosure and over the last few years

57
00:01:59,520 --> 00:02:02,040
we've noticed a disturbing Trend which

58
00:02:02,040 --> 00:02:03,899
is a decrease in patch quality and a

59
00:02:03,899 --> 00:02:05,880
reduction of communications surrounding

60
00:02:05,880 --> 00:02:08,038
security updates

61
00:02:08,038 --> 00:02:09,660
now if you're in this room you probably

62
00:02:09,660 --> 00:02:11,700
already know why patching is important

63
00:02:11,700 --> 00:02:13,080
and I'm not going to insult you by

64
00:02:13,080 --> 00:02:15,480
saying just patch it we know that's not

65
00:02:15,480 --> 00:02:16,620
always feasible

66
00:02:16,620 --> 00:02:18,780
I also know that estimating risk is one

67
00:02:18,780 --> 00:02:20,940
of the primary roles of csos csos and

68
00:02:20,940 --> 00:02:23,580
I.T leadership the real problem arises

69
00:02:23,580 --> 00:02:26,220
when vendors release faulty patches and

70
00:02:26,220 --> 00:02:27,660
as we'll demonstrate in this talk

71
00:02:27,660 --> 00:02:29,480
inaccurate or incomplete information

72
00:02:29,480 --> 00:02:31,560
about those patches can cause

73
00:02:31,560 --> 00:02:34,020
Enterprises to miscalculate risk

74
00:02:34,020 --> 00:02:35,940
faulty patches can also be a booned to

75
00:02:35,940 --> 00:02:38,700
exploit writers as end days are much

76
00:02:38,700 --> 00:02:41,459
easier to use than zero days but bugs

77
00:02:41,459 --> 00:02:42,959
are hard to find

78
00:02:42,959 --> 00:02:44,519
unless it's the second Tuesday of the

79
00:02:44,519 --> 00:02:46,260
month then Microsoft says here's 120 and

80
00:02:46,260 --> 00:02:48,239
Adobe says here's 50 you know that's

81
00:02:48,239 --> 00:02:49,019
good

82
00:02:49,019 --> 00:02:50,819
it's to the point where Enterprises have

83
00:02:50,819 --> 00:02:52,920
begun on relying on third parties or

84
00:02:52,920 --> 00:02:54,480
developing their own patching priorities

85
00:02:54,480 --> 00:02:56,400
rather than relying on vendor

86
00:02:56,400 --> 00:02:57,720
recommendations or other industry

87
00:02:57,720 --> 00:03:00,060
standards look folks I know it we are

88
00:03:00,060 --> 00:03:01,800
all the three unders we're understaffed

89
00:03:01,800 --> 00:03:03,120
we're underfunded and Under Pressure

90
00:03:03,120 --> 00:03:06,480
right so a misallocation of resources

91
00:03:06,480 --> 00:03:08,580
could result in increased risk and an

92
00:03:08,580 --> 00:03:11,220
increased chance of compromise

93
00:03:11,220 --> 00:03:13,019
so let's begin by talking about how

94
00:03:13,019 --> 00:03:15,379
Enterprise is calculate risk and some

95
00:03:15,379 --> 00:03:18,300
issues with security patches have that

96
00:03:18,300 --> 00:03:20,580
can lead to miscalculations

97
00:03:20,580 --> 00:03:22,680
now this is not going to be a talk of

98
00:03:22,680 --> 00:03:24,959
whether CVSs is or is not a great tool

99
00:03:24,959 --> 00:03:27,720
that's a different talk however too

100
00:03:27,720 --> 00:03:29,400
often Enterprises look no further than

101
00:03:29,400 --> 00:03:31,019
the CVSs base score to determine

102
00:03:31,019 --> 00:03:33,239
patching priority this can lead to

103
00:03:33,239 --> 00:03:34,680
resources being spent on bugs that are

104
00:03:34,680 --> 00:03:37,319
unlikely to ever be exploited to begin

105
00:03:37,319 --> 00:03:40,080
with CVSs is calculated by humans who

106
00:03:40,080 --> 00:03:42,120
are known to have biases and they take

107
00:03:42,120 --> 00:03:44,280
those biases with them wherever they go

108
00:03:44,280 --> 00:03:45,959
so this leads to differences of how

109
00:03:45,959 --> 00:03:48,420
vendors perceive risk versus the actual

110
00:03:48,420 --> 00:03:49,980
attack surface of a product when it's

111
00:03:49,980 --> 00:03:51,780
really deployed and that could adjust

112
00:03:51,780 --> 00:03:55,379
the CVSs score up or down uh for example

113
00:03:55,379 --> 00:03:58,080
an Amazon Linux bug was rated at a 9.8

114
00:03:58,080 --> 00:04:00,780
so it could expose sensitive data in an

115
00:04:00,780 --> 00:04:03,900
HTTP header uh to unintended host

116
00:04:03,900 --> 00:04:06,060
however based on real world factors

117
00:04:06,060 --> 00:04:09,000
tenable rated it at 5.9

118
00:04:09,000 --> 00:04:12,239
so who's correct which one do you act on

119
00:04:12,239 --> 00:04:14,580
I don't actually know that one another

120
00:04:14,580 --> 00:04:16,260
problem is that CVSs doesn't really look

121
00:04:16,260 --> 00:04:18,000
at exploitability or whether a

122
00:04:18,000 --> 00:04:19,260
vulnerability is likely to be used in

123
00:04:19,260 --> 00:04:21,298
the wild and research conducted by the

124
00:04:21,298 --> 00:04:22,979
century Institute the Rand Institute of

125
00:04:22,979 --> 00:04:24,840
Virginia Tech has shown that only five

126
00:04:24,840 --> 00:04:26,280
and a half percent of disclosed

127
00:04:26,280 --> 00:04:27,780
vulnerabilities are ever actually

128
00:04:27,780 --> 00:04:30,120
detected in the wild the QR code leads

129
00:04:30,120 --> 00:04:33,540
to that study the CVSs doesn't tell you

130
00:04:33,540 --> 00:04:36,120
if the uh if the bug exists in 15

131
00:04:36,120 --> 00:04:39,300
systems or in 15 million systems and it

132
00:04:39,300 --> 00:04:40,800
doesn't say whether or not it's in a

133
00:04:40,800 --> 00:04:43,020
public publicly accessible server and

134
00:04:43,020 --> 00:04:44,699
most importantly to this crowd it

135
00:04:44,699 --> 00:04:46,139
doesn't say whether or not the bug is

136
00:04:46,139 --> 00:04:48,419
present in a system that's critical to

137
00:04:48,419 --> 00:04:50,940
your Enterprise

138
00:04:50,940 --> 00:04:53,220
and finally every cvss-10 is not a

139
00:04:53,220 --> 00:04:54,560
cvss-10

140
00:04:54,560 --> 00:04:57,120
a remote unauthenticated code execution

141
00:04:57,120 --> 00:04:59,699
bug and an email server like XM or

142
00:04:59,699 --> 00:05:01,680
exchange is going to generate a lot of

143
00:05:01,680 --> 00:05:03,840
interest especially from exploit Riders

144
00:05:03,840 --> 00:05:06,000
however a remote unauthenticated code

145
00:05:06,000 --> 00:05:08,160
execution bug and an email server like

146
00:05:08,160 --> 00:05:10,020
squirrel mail is probably not going to

147
00:05:10,020 --> 00:05:12,360
generate as much attention please note

148
00:05:12,360 --> 00:05:13,740
that this is not an endorsement of

149
00:05:13,740 --> 00:05:14,940
squirrel mail the security through

150
00:05:14,940 --> 00:05:17,780
obscurity is still bad

151
00:05:18,000 --> 00:05:20,340
at the zdi we see another problem and

152
00:05:20,340 --> 00:05:21,720
that's vendors combining multiple bug

153
00:05:21,720 --> 00:05:24,539
reports into a single cve however the

154
00:05:24,539 --> 00:05:26,580
common perception is that cve represents

155
00:05:26,580 --> 00:05:29,580
a single unique vulnerability now that

156
00:05:29,580 --> 00:05:31,560
may not be the way cve rules are written

157
00:05:31,560 --> 00:05:34,560
but that perception exists and really

158
00:05:34,560 --> 00:05:35,880
what's the problem

159
00:05:35,880 --> 00:05:39,660
if you've got 10 ubrights or uas or you

160
00:05:39,660 --> 00:05:41,580
know deserialization bugs why shouldn't

161
00:05:41,580 --> 00:05:42,780
you combine them into a single bug

162
00:05:42,780 --> 00:05:45,720
report to a single cve well again it

163
00:05:45,720 --> 00:05:47,340
comes down to perception which leads to

164
00:05:47,340 --> 00:05:49,020
possibly skewing your risk calculation

165
00:05:49,020 --> 00:05:51,300
so if you look at a product and you see

166
00:05:51,300 --> 00:05:53,699
10 cves that are patched in a certain

167
00:05:53,699 --> 00:05:55,800
amount of time you may come up with one

168
00:05:55,800 --> 00:05:57,960
conclusion of the risk calculation from

169
00:05:57,960 --> 00:05:59,160
this new product

170
00:05:59,160 --> 00:06:01,380
however if you knew those 10 cves were

171
00:06:01,380 --> 00:06:03,660
based on 100 plus bug reports

172
00:06:03,660 --> 00:06:06,000
you might come to a different conclusion

173
00:06:06,000 --> 00:06:08,360
and really it boils down to Enterprises

174
00:06:08,360 --> 00:06:10,860
miscalculating severity of a cve because

175
00:06:10,860 --> 00:06:12,199
they don't have the tools to understand

176
00:06:12,199 --> 00:06:15,479
the density of the code problem

177
00:06:15,479 --> 00:06:17,759
so here's an example earlier this year

178
00:06:17,759 --> 00:06:21,300
we bought four out of many sap bugs uh

179
00:06:21,300 --> 00:06:23,460
one uberead and three Uber rights and

180
00:06:23,460 --> 00:06:24,960
reported it to them

181
00:06:24,960 --> 00:06:28,139
when sap patched them

182
00:06:28,139 --> 00:06:30,539
they assigned this one single CBE so if

183
00:06:30,539 --> 00:06:32,460
you look at your their website if you

184
00:06:32,460 --> 00:06:33,600
could find it it's a little hard to

185
00:06:33,600 --> 00:06:35,580
navigate their website you'll find this

186
00:06:35,580 --> 00:06:37,740
single cve for these reports but if you

187
00:06:37,740 --> 00:06:40,080
look at our website you'll see these

188
00:06:40,080 --> 00:06:43,080
four bug reports for that single cve

189
00:06:43,080 --> 00:06:45,600
and your risk calculation may be change

190
00:06:45,600 --> 00:06:47,880
based on this knowledge at the very

191
00:06:47,880 --> 00:06:49,500
least it's another data point for you to

192
00:06:49,500 --> 00:06:50,580
consider

193
00:06:50,580 --> 00:06:52,080
and in the interest of time I'm just

194
00:06:52,080 --> 00:06:55,020
going to mention ICS certs as the ICS

195
00:06:55,020 --> 00:06:56,400
and scada Community is the worst

196
00:06:56,400 --> 00:06:58,979
offender I mean best examples of this

197
00:06:58,979 --> 00:07:01,199
practice

198
00:07:01,199 --> 00:07:02,639
it's incredibly common for us to report

199
00:07:02,639 --> 00:07:04,800
dozens of bugs that end up being

200
00:07:04,800 --> 00:07:06,900
combined in a recent disclosure we

201
00:07:06,900 --> 00:07:08,940
disclosed more than 50 bugs to advantec

202
00:07:08,940 --> 00:07:11,340
mostly SQL injections they patched them

203
00:07:11,340 --> 00:07:13,560
in batches which makes sense but those

204
00:07:13,560 --> 00:07:15,780
50 plus reports ended up as three unique

205
00:07:15,780 --> 00:07:18,138
cves

206
00:07:19,319 --> 00:07:21,180
and then there's obscuring or flat out

207
00:07:21,180 --> 00:07:23,340
removing information from security

208
00:07:23,340 --> 00:07:26,220
advisories in late 2020 Microsoft made

209
00:07:26,220 --> 00:07:27,720
the decision to remove the executive

210
00:07:27,720 --> 00:07:29,580
summary from a security update guide

211
00:07:29,580 --> 00:07:31,740
informing users that CVSs would be

212
00:07:31,740 --> 00:07:32,699
sufficient

213
00:07:32,699 --> 00:07:34,740
now in ignoring all the problems we've

214
00:07:34,740 --> 00:07:36,479
already talked about in CVS already the

215
00:07:36,479 --> 00:07:38,639
change removes context from Bugs that's

216
00:07:38,639 --> 00:07:40,800
needed to determine risk for example

217
00:07:40,800 --> 00:07:42,960
does an information disclosure bug dump

218
00:07:42,960 --> 00:07:46,380
random memory or pii CVSs doesn't note

219
00:07:46,380 --> 00:07:49,080
that for a security feature bypass what

220
00:07:49,080 --> 00:07:50,280
is being bypassed and what's the

221
00:07:50,280 --> 00:07:53,160
likelihood CVSs doesn't note that

222
00:07:53,160 --> 00:07:54,840
there's also an interesting situation

223
00:07:54,840 --> 00:07:57,240
where the CVSs score doesn't often and

224
00:07:57,240 --> 00:07:59,280
doesn't align completely with the

225
00:07:59,280 --> 00:08:00,660
Microsoft rating system of critical

226
00:08:00,660 --> 00:08:02,880
important severity so our example last

227
00:08:02,880 --> 00:08:04,500
Tuesday they had an important severity

228
00:08:04,500 --> 00:08:07,259
bug with the CVSs of 9.8 which miter

229
00:08:07,259 --> 00:08:08,880
says is critical

230
00:08:08,880 --> 00:08:10,380
now if you're only deploying critical

231
00:08:10,380 --> 00:08:12,780
bugs first which one do you pay

232
00:08:12,780 --> 00:08:14,220
attention to they're both from Microsoft

233
00:08:14,220 --> 00:08:16,460
so they both should be authoritative

234
00:08:16,460 --> 00:08:19,080
now some information has begun to return

235
00:08:19,080 --> 00:08:20,879
to these write-ups but it's inconsistent

236
00:08:20,879 --> 00:08:23,099
and a varying quality despite mere

237
00:08:23,099 --> 00:08:24,780
Universal criticism of the change and

238
00:08:24,780 --> 00:08:26,699
here's an example this is an executive

239
00:08:26,699 --> 00:08:29,340
summary from a DNS bug back in 2020

240
00:08:29,340 --> 00:08:31,440
uh and I cut it off intentionally

241
00:08:31,440 --> 00:08:32,820
because we really don't need to examine

242
00:08:32,820 --> 00:08:35,279
what the bug is but here's a DNS bug

243
00:08:35,279 --> 00:08:37,740
from 2022.

244
00:08:37,740 --> 00:08:39,779
that's it

245
00:08:39,779 --> 00:08:41,279
um but really this change comes after

246
00:08:41,279 --> 00:08:43,200
years of Microsoft either removing or

247
00:08:43,200 --> 00:08:44,640
obscuring information about their

248
00:08:44,640 --> 00:08:46,440
updates they used to produce clear

249
00:08:46,440 --> 00:08:48,360
guidance telling admins how many bugs

250
00:08:48,360 --> 00:08:50,399
were patched each month now you have to

251
00:08:50,399 --> 00:08:51,839
count yourself that's actually one of

252
00:08:51,839 --> 00:08:53,100
the hardest things I do for my blog is

253
00:08:53,100 --> 00:08:55,320
just count how many cves you'd be

254
00:08:55,320 --> 00:08:56,640
surprised how many times I get it wrong

255
00:08:56,640 --> 00:08:58,740
I even take off my socks to count on my

256
00:08:58,740 --> 00:09:00,839
toes too uh

257
00:09:00,839 --> 00:09:02,640
they used to tell you very clearly how

258
00:09:02,640 --> 00:09:04,440
many bugs were under active attack or

259
00:09:04,440 --> 00:09:05,640
publicly known that's one of the first

260
00:09:05,640 --> 00:09:07,620
things Enterprises look for information

261
00:09:07,620 --> 00:09:09,959
is still available yes but it's buried

262
00:09:09,959 --> 00:09:12,480
deep in the bulletins now and with 121

263
00:09:12,480 --> 00:09:14,700
cves being patched this month it's kind

264
00:09:14,700 --> 00:09:16,260
of hard to dig through all of them to

265
00:09:16,260 --> 00:09:17,700
look for which ones are under active

266
00:09:17,700 --> 00:09:20,100
attack instead people now rely on other

267
00:09:20,100 --> 00:09:23,160
sorts of information my blog other blogs

268
00:09:23,160 --> 00:09:25,380
and press articles rather than what

269
00:09:25,380 --> 00:09:27,000
should be authoritative information from

270
00:09:27,000 --> 00:09:28,920
the vendor to help determine risk

271
00:09:28,920 --> 00:09:31,080
and look Microsoft is hardly alone in

272
00:09:31,080 --> 00:09:33,360
this I'm not here just to bash them many

273
00:09:33,360 --> 00:09:35,279
vendors don't even provide cves when

274
00:09:35,279 --> 00:09:37,860
they release an update they just say fix

275
00:09:37,860 --> 00:09:39,720
this several security issues

276
00:09:39,720 --> 00:09:42,360
how how many what's the severity what's

277
00:09:42,360 --> 00:09:44,399
the exploitability without they'd

278
00:09:44,399 --> 00:09:46,680
provide no context at all we even had a

279
00:09:46,680 --> 00:09:48,540
vendor recently state to us specifically

280
00:09:48,540 --> 00:09:50,940
we do not publish public advisories on

281
00:09:50,940 --> 00:09:52,620
security issues

282
00:09:52,620 --> 00:09:54,360
that's a bold move cotton we'll see how

283
00:09:54,360 --> 00:09:55,920
that works out for him

284
00:09:55,920 --> 00:09:56,820
um

285
00:09:56,820 --> 00:09:58,620
some vendors put advisories behind pay

286
00:09:58,620 --> 00:10:00,899
balls or support contracts further

287
00:10:00,899 --> 00:10:02,580
obscuring their risk from potential

288
00:10:02,580 --> 00:10:04,800
customers and rarely does any vendor

289
00:10:04,800 --> 00:10:06,120
actually provide any guidance on

290
00:10:06,120 --> 00:10:08,220
exploitability and in one sense this is

291
00:10:08,220 --> 00:10:09,720
understandable because defining

292
00:10:09,720 --> 00:10:12,000
exploitability is really hard however

293
00:10:12,000 --> 00:10:13,920
understanding exploitability is a key

294
00:10:13,920 --> 00:10:16,440
component to estimating risk from a bug

295
00:10:16,440 --> 00:10:18,540
what are the chances the severe sounding

296
00:10:18,540 --> 00:10:20,220
bug actually gets exploited in the wild

297
00:10:20,220 --> 00:10:23,580
high low do I need to engage emergency

298
00:10:23,580 --> 00:10:25,560
resources to deploy this patch or will

299
00:10:25,560 --> 00:10:28,019
my normal procedures suffice

300
00:10:28,019 --> 00:10:29,820
see the push towards patch automation

301
00:10:29,820 --> 00:10:31,080
has removed the ability of many

302
00:10:31,080 --> 00:10:32,880
Enterprises to judge the risk to their

303
00:10:32,880 --> 00:10:35,160
systems consequently Enterprises now

304
00:10:35,160 --> 00:10:36,660
must invest in third-party tools not

305
00:10:36,660 --> 00:10:38,880
just for patch management but for patch

306
00:10:38,880 --> 00:10:40,200
prioritization

307
00:10:40,200 --> 00:10:41,940
the push for API driven vulnerability

308
00:10:41,940 --> 00:10:43,740
reporting has resulted in all bugs

309
00:10:43,740 --> 00:10:45,899
looking nearly identical on paper

310
00:10:45,899 --> 00:10:48,300
but all bugs are not created equal

311
00:10:48,300 --> 00:10:50,820
uh to misquote syndrome if all bugs are

312
00:10:50,820 --> 00:10:53,220
special then no bugs are special

313
00:10:53,220 --> 00:10:55,440
so we as an industry must take a close

314
00:10:55,440 --> 00:10:57,240
look at the results of the API driven

315
00:10:57,240 --> 00:10:59,459
vulnerability reporting model and ask

316
00:10:59,459 --> 00:11:01,860
ourselves if it's serving its purpose or

317
00:11:01,860 --> 00:11:03,779
has the Quest for automation left us in

318
00:11:03,779 --> 00:11:06,980
a worse State than we were before

319
00:11:07,320 --> 00:11:08,880
but beyond just the way the patches are

320
00:11:08,880 --> 00:11:10,140
communicated let's talk about some

321
00:11:10,140 --> 00:11:13,320
problems with the patches themselves

322
00:11:13,320 --> 00:11:14,880
the worst case scenario is what we call

323
00:11:14,880 --> 00:11:17,220
a placebo patch that's when a patch is

324
00:11:17,220 --> 00:11:18,480
released from a vendor that either makes

325
00:11:18,480 --> 00:11:20,640
no code changes at all or makes no

326
00:11:20,640 --> 00:11:22,200
effective code changes and the bug is

327
00:11:22,200 --> 00:11:25,140
still reachable either way that bug is

328
00:11:25,140 --> 00:11:26,880
still there and exploitable to threat

329
00:11:26,880 --> 00:11:28,560
actors except now they've been informed

330
00:11:28,560 --> 00:11:30,240
of it and if you think we're joking

331
00:11:30,240 --> 00:11:31,980
about patches that make no changes at

332
00:11:31,980 --> 00:11:33,959
all sadly we're not and it's not just

333
00:11:33,959 --> 00:11:36,180
one vendor there are many reasons why it

334
00:11:36,180 --> 00:11:38,579
could happen but it happens

335
00:11:38,579 --> 00:11:40,200
and this is hardly new we've been

336
00:11:40,200 --> 00:11:41,820
actually talking about this at this EDI

337
00:11:41,820 --> 00:11:43,620
for years as in bugs so nice we patched

338
00:11:43,620 --> 00:11:45,240
them twice

339
00:11:45,240 --> 00:11:47,459
um that's a different talk as well you

340
00:11:47,459 --> 00:11:49,079
can hit that QR code you see the YouTube

341
00:11:49,079 --> 00:11:51,480
video of it but here's a recent example

342
00:11:51,480 --> 00:11:53,940
uh in advantec web access which is a

343
00:11:53,940 --> 00:11:55,980
popular scada product according to their

344
00:11:55,980 --> 00:11:57,540
website it provides users with a

345
00:11:57,540 --> 00:11:59,640
cross-platform cross browser data access

346
00:11:59,640 --> 00:12:01,620
experience and a user interface based on

347
00:12:01,620 --> 00:12:03,839
HTML5 technology

348
00:12:03,839 --> 00:12:05,160
meet

349
00:12:05,160 --> 00:12:06,959
so we purchased a directory traversal

350
00:12:06,959 --> 00:12:08,880
bug that could lead to code execution

351
00:12:08,880 --> 00:12:11,640
the root cause was the implementation of

352
00:12:11,640 --> 00:12:13,560
the 2711 ioctal in the web services

353
00:12:13,560 --> 00:12:14,820
process

354
00:12:14,820 --> 00:12:16,740
after it was patched

355
00:12:16,740 --> 00:12:19,640
the researcher submitted another bug

356
00:12:19,640 --> 00:12:23,279
bypassing that and it was a directory

357
00:12:23,279 --> 00:12:24,959
traversal bug that could lead to code

358
00:12:24,959 --> 00:12:27,480
execution and the problem was due to the

359
00:12:27,480 --> 00:12:29,880
implementation of the 2711 ioctal and

360
00:12:29,880 --> 00:12:31,980
the web services process

361
00:12:31,980 --> 00:12:33,959
after that patch was released

362
00:12:33,959 --> 00:12:36,120
a zdi analyst found no code changes in

363
00:12:36,120 --> 00:12:38,279
the patch at all so again we reported a

364
00:12:38,279 --> 00:12:39,959
directory traversal bug that could lead

365
00:12:39,959 --> 00:12:41,220
to code execution due to the

366
00:12:41,220 --> 00:12:43,079
implementation of the 2711i article in

367
00:12:43,079 --> 00:12:44,940
the web services process at least we

368
00:12:44,940 --> 00:12:46,260
didn't have to buy the third bug it was

369
00:12:46,260 --> 00:12:48,660
one of our analysts who found it

370
00:12:48,660 --> 00:12:50,339
and while this is embarrassing for the

371
00:12:50,339 --> 00:12:51,839
vendor Enterprises are suffering real

372
00:12:51,839 --> 00:12:54,000
consequences from this so for one we

373
00:12:54,000 --> 00:12:55,380
know that patches are reversed and

374
00:12:55,380 --> 00:12:57,720
become exploits so a placebo patch

375
00:12:57,720 --> 00:12:59,220
notifies the threat actors of the bug

376
00:12:59,220 --> 00:13:01,260
while Enterprises are left in a state

377
00:13:01,260 --> 00:13:02,760
more vulnerable than they were before

378
00:13:02,760 --> 00:13:05,160
because before the patch didn't exist

379
00:13:05,160 --> 00:13:06,720
because they don't have defenses to

380
00:13:06,720 --> 00:13:08,700
adequately defend themselves

381
00:13:08,700 --> 00:13:11,279
Enterprises must also spend resources to

382
00:13:11,279 --> 00:13:13,560
deploy patches and whatever calculus you

383
00:13:13,560 --> 00:13:15,839
use that says the cost of adult flowing

384
00:13:15,839 --> 00:13:16,920
a patch

385
00:13:16,920 --> 00:13:18,779
if it takes three times to do it that's

386
00:13:18,779 --> 00:13:21,240
three times the cost I'm not a genius in

387
00:13:21,240 --> 00:13:22,800
math but three is greater than one I I

388
00:13:22,800 --> 00:13:25,019
learned that somewhere so their bad

389
00:13:25,019 --> 00:13:27,839
patches are costing you real money

390
00:13:27,839 --> 00:13:30,000
even if you're if even if it never gets

391
00:13:30,000 --> 00:13:32,220
exploited

392
00:13:32,220 --> 00:13:33,839
then there's often patches that will

393
00:13:33,839 --> 00:13:36,120
break just a point fix or proof of

394
00:13:36,120 --> 00:13:37,920
concept code this is an example from

395
00:13:37,920 --> 00:13:40,500
Adobe Acrobat and we don't need to delve

396
00:13:40,500 --> 00:13:42,120
too much into the super technical here

397
00:13:42,120 --> 00:13:44,279
just know that the value we set for an

398
00:13:44,279 --> 00:13:46,200
array is extremely large and ends up

399
00:13:46,200 --> 00:13:48,120
resulting in an integer overflow leading

400
00:13:48,120 --> 00:13:50,940
to another sized Heap allocation which

401
00:13:50,940 --> 00:13:52,800
results in a buffer overflow when data

402
00:13:52,800 --> 00:13:55,320
is written there in other words open PDF

403
00:13:55,320 --> 00:13:56,339
get owned

404
00:13:56,339 --> 00:13:59,279
we expected Adobe to make the fix by

405
00:13:59,279 --> 00:14:00,779
setting any value over a certain point

406
00:14:00,779 --> 00:14:02,820
to be bad but that's not what we saw

407
00:14:02,820 --> 00:14:04,560
this is the proof of concept that the

408
00:14:04,560 --> 00:14:06,600
researchers submitted to us

409
00:14:06,600 --> 00:14:08,820
it was pretty good so good in fact that

410
00:14:08,820 --> 00:14:10,380
adobe just pretty much took it and

411
00:14:10,380 --> 00:14:12,420
dropped it into its patch looking for

412
00:14:12,420 --> 00:14:14,459
that specific value

413
00:14:14,459 --> 00:14:16,920
now the researcher also noticed this and

414
00:14:16,920 --> 00:14:18,839
within an hour of the patch being made

415
00:14:18,839 --> 00:14:19,800
public

416
00:14:19,800 --> 00:14:23,220
yes within 60 minutes they said hey we

417
00:14:23,220 --> 00:14:26,100
bypassed the patch here's our new POC so

418
00:14:26,100 --> 00:14:27,779
we bought this bug can you spot the

419
00:14:27,779 --> 00:14:29,899
difference

420
00:14:30,360 --> 00:14:32,820
Can you spot it now

421
00:14:32,820 --> 00:14:34,440
yep they just changed the value of the

422
00:14:34,440 --> 00:14:35,760
specified array and re-triggered the

423
00:14:35,760 --> 00:14:37,380
Overflow resulting in code execution

424
00:14:37,380 --> 00:14:38,639
again

425
00:14:38,639 --> 00:14:41,040
the final patch introduced math to

426
00:14:41,040 --> 00:14:42,540
calculate whether the specified array

427
00:14:42,540 --> 00:14:44,639
length was actually a valid value

428
00:14:44,639 --> 00:14:46,380
that one worked

429
00:14:46,380 --> 00:14:48,240
but reruns aren't just for TV shows they

430
00:14:48,240 --> 00:14:50,160
happen in security patches as well case

431
00:14:50,160 --> 00:14:52,440
in point Microsoft SharePoint these

432
00:14:52,440 --> 00:14:53,760
always start with a vendor shipping a

433
00:14:53,760 --> 00:14:55,680
bug and I want to thank them for that I

434
00:14:55,680 --> 00:14:57,120
think gainfully employed my adult life

435
00:14:57,120 --> 00:14:58,860
due to vendor shipping bugs I appreciate

436
00:14:58,860 --> 00:15:01,019
that in this case the researcher

437
00:15:01,019 --> 00:15:02,519
discovered a bug in a remote code

438
00:15:02,519 --> 00:15:04,019
execution bug in all supported versions

439
00:15:04,019 --> 00:15:07,079
of SharePoint and sold that bug to us we

440
00:15:07,079 --> 00:15:09,720
reported it to Microsoft the next day we

441
00:15:09,720 --> 00:15:11,940
have a 120-day disclosure timeline and

442
00:15:11,940 --> 00:15:13,560
they took nearly all of that to produce

443
00:15:13,560 --> 00:15:15,899
their first version of this fix on

444
00:15:15,899 --> 00:15:18,720
February 12th now I blog a lot and I

445
00:15:18,720 --> 00:15:20,579
blog a lot about really cool bugs and

446
00:15:20,579 --> 00:15:22,740
this was a really cool bug so I'd worked

447
00:15:22,740 --> 00:15:24,240
with the anonymous researcher to produce

448
00:15:24,240 --> 00:15:27,839
a Blog on this on Patch Tuesday and my

449
00:15:27,839 --> 00:15:29,760
mouse was literally moving over to the

450
00:15:29,760 --> 00:15:32,040
button to hit publish when I received a

451
00:15:32,040 --> 00:15:33,300
panicked email from the researcher

452
00:15:33,300 --> 00:15:35,820
saying don't publish the blog the the

453
00:15:35,820 --> 00:15:38,639
patch can be easily circumvented so we

454
00:15:38,639 --> 00:15:41,339
purchased the bug again uh and reported

455
00:15:41,339 --> 00:15:43,100
the patch circumvention to Microsoft

456
00:15:43,100 --> 00:15:45,540
they released their version two of the

457
00:15:45,540 --> 00:15:48,540
patch 28 Days Later we took 24 hours to

458
00:15:48,540 --> 00:15:50,100
actually look at the patch this time so

459
00:15:50,100 --> 00:15:51,480
I didn't publish something too bad

460
00:15:51,480 --> 00:15:53,940
pushed our blog out now again like I

461
00:15:53,940 --> 00:15:55,860
said this is a really cool bug so we

462
00:15:55,860 --> 00:15:58,680
knew in all likelihood active attacks

463
00:15:58,680 --> 00:16:00,480
were coming and we detected them 42 days

464
00:16:00,480 --> 00:16:03,300
after that now the problem here is if

465
00:16:03,300 --> 00:16:05,760
you only had revision 1.0 of this update

466
00:16:05,760 --> 00:16:07,740
you are not fully protected from the

467
00:16:07,740 --> 00:16:09,600
from that active attack

468
00:16:09,600 --> 00:16:11,279
uh by the way this was the active attack

469
00:16:11,279 --> 00:16:12,779
that was used against the United Nations

470
00:16:12,779 --> 00:16:15,300
as well and interestingly enough

471
00:16:15,300 --> 00:16:17,100
uh after the active attacks were

472
00:16:17,100 --> 00:16:21,019
discovered revision 3.0 went out

473
00:16:21,300 --> 00:16:22,920
now lest you think we're just here to

474
00:16:22,920 --> 00:16:24,240
talk about about other people let's talk

475
00:16:24,240 --> 00:16:27,060
about a bug and tread micro Apex one and

476
00:16:27,060 --> 00:16:28,920
yes that is a Trend Micro logo on my

477
00:16:28,920 --> 00:16:31,079
sleeve karate impsim as it were

478
00:16:31,079 --> 00:16:32,820
physician heal thyself

479
00:16:32,820 --> 00:16:34,860
uh so we bought a privilege escalation

480
00:16:34,860 --> 00:16:37,199
bug in our Apex one endpoint security

481
00:16:37,199 --> 00:16:39,720
product due to incorrect permissions and

482
00:16:39,720 --> 00:16:42,000
it was resolved by this cve

483
00:16:42,000 --> 00:16:43,680
after that patch was released the

484
00:16:43,680 --> 00:16:46,139
researcher reported a privilege

485
00:16:46,139 --> 00:16:47,639
escalation bug that was due to incorrect

486
00:16:47,639 --> 00:16:49,620
permissions he bypassed the patch pretty

487
00:16:49,620 --> 00:16:52,860
easily and it was addressed by this cve

488
00:16:52,860 --> 00:16:54,240
now if you've been paying attention and

489
00:16:54,240 --> 00:16:55,800
noticed the empty space on the slide you

490
00:16:55,800 --> 00:16:58,980
can probably predict what's coming next

491
00:16:58,980 --> 00:17:02,160
that's right he sold us a third uh

492
00:17:02,160 --> 00:17:04,439
privilege escalation bug that bypassed

493
00:17:04,439 --> 00:17:06,540
the cve due to a permissions issue

494
00:17:06,540 --> 00:17:08,760
and we patched it with the cve now for

495
00:17:08,760 --> 00:17:10,919
us this wasn't the worst case scenario

496
00:17:10,919 --> 00:17:12,480
because we took this as a case study to

497
00:17:12,480 --> 00:17:14,400
our developers and said look here's how

498
00:17:14,400 --> 00:17:15,900
we can work together to develop more

499
00:17:15,900 --> 00:17:18,480
comprehensive patches so hopefully we

500
00:17:18,480 --> 00:17:20,459
see less of this in the future

501
00:17:20,459 --> 00:17:22,740
any other examples Dustin why yes I have

502
00:17:22,740 --> 00:17:25,199
receipts uh there are quite a few other

503
00:17:25,199 --> 00:17:26,939
examples and unfortunately it's only a

504
00:17:26,939 --> 00:17:28,740
40-minute talk

505
00:17:28,740 --> 00:17:30,900
um but this is just a small sampling of

506
00:17:30,900 --> 00:17:32,700
other cves that were incomplete or

507
00:17:32,700 --> 00:17:34,080
otherwise faulty and each one of these

508
00:17:34,080 --> 00:17:36,240
represents so many more in fact right

509
00:17:36,240 --> 00:17:38,880
now in our program 10 to 20 percent of

510
00:17:38,880 --> 00:17:40,740
the bugs we are purchasing are the

511
00:17:40,740 --> 00:17:42,120
direct result from a faultier and

512
00:17:42,120 --> 00:17:44,700
complete patch and if that Microsoft cve

513
00:17:44,700 --> 00:17:47,100
looks familiar to you that is the one

514
00:17:47,100 --> 00:17:49,080
that was patched in July that according

515
00:17:49,080 --> 00:17:51,059
to Microsoft was being used by Austrian

516
00:17:51,059 --> 00:17:54,320
threat actors to spread Subzero malware

517
00:17:54,320 --> 00:17:56,640
within a day or two of the patch being

518
00:17:56,640 --> 00:17:58,200
released one of our researchers Simon

519
00:17:58,200 --> 00:18:00,900
zuckerbron was able to bypass that patch

520
00:18:00,900 --> 00:18:04,500
and continue exploitation in fact you

521
00:18:04,500 --> 00:18:06,600
bypassed about 10 of the last patch yeah

522
00:18:06,600 --> 00:18:08,700
correct yeah Simon's an awesome guy

523
00:18:08,700 --> 00:18:12,000
frightening awesome

524
00:18:12,000 --> 00:18:14,280
so we have reported that to Microsoft in

525
00:18:14,280 --> 00:18:16,020
our awaiting things

526
00:18:16,020 --> 00:18:17,940
so with that I'm going to hand off to

527
00:18:17,940 --> 00:18:19,080
Brian who's going to talk about the

528
00:18:19,080 --> 00:18:21,480
industry of patching yes now luckily for

529
00:18:21,480 --> 00:18:23,580
us patches patching creates jobs right

530
00:18:23,580 --> 00:18:25,260
we've all had jobs in this industry now

531
00:18:25,260 --> 00:18:26,820
for a long time because patches are

532
00:18:26,820 --> 00:18:28,380
happening vulnerabilities are being

533
00:18:28,380 --> 00:18:30,660
discovered but unknown to most there's

534
00:18:30,660 --> 00:18:32,820
actually a cottage industry around

535
00:18:32,820 --> 00:18:34,799
actually analyzing and reversing and

536
00:18:34,799 --> 00:18:36,840
weaponizing patches and part of the

537
00:18:36,840 --> 00:18:38,520
reason this industry actually exists and

538
00:18:38,520 --> 00:18:40,679
is able to function is in is due to the

539
00:18:40,679 --> 00:18:42,600
intermittent quality of the actual

540
00:18:42,600 --> 00:18:44,520
security updates themselves so let's

541
00:18:44,520 --> 00:18:46,380
take a peek at this industry and show

542
00:18:46,380 --> 00:18:48,539
you how how it can actually impact the

543
00:18:48,539 --> 00:18:50,820
risk to the Enterprise itself

544
00:18:50,820 --> 00:18:52,500
now like we said there are several

545
00:18:52,500 --> 00:18:54,360
different areas where where people are

546
00:18:54,360 --> 00:18:55,679
looking at patches and the first one we

547
00:18:55,679 --> 00:18:57,240
want to talk about is obviously the

548
00:18:57,240 --> 00:18:59,160
third party patch management groups out

549
00:18:59,160 --> 00:19:00,660
there companies like manage engine

550
00:19:00,660 --> 00:19:03,419
Avanti Quest case and many others

551
00:19:03,419 --> 00:19:05,179
provide tools that actually help

552
00:19:05,179 --> 00:19:07,200
Enterprises manage their patch

553
00:19:07,200 --> 00:19:09,179
deployments they're looking at the patch

554
00:19:09,179 --> 00:19:10,500
releases trying to make sure that

555
00:19:10,500 --> 00:19:11,760
they're you're able to deploy those

556
00:19:11,760 --> 00:19:13,500
patches out into the Enterprise but

557
00:19:13,500 --> 00:19:14,820
they're not going very deep into the

558
00:19:14,820 --> 00:19:16,799
actual patch itself

559
00:19:16,799 --> 00:19:18,299
then there's groups out there that

560
00:19:18,299 --> 00:19:21,720
produce end-day analysis of patches

561
00:19:21,720 --> 00:19:23,760
meaning they reverse engineer the

562
00:19:23,760 --> 00:19:26,220
updates for the for the development of

563
00:19:26,220 --> 00:19:28,620
threat intelligence as a service we do

564
00:19:28,620 --> 00:19:30,539
that at Trend Micro we reverse engineer

565
00:19:30,539 --> 00:19:31,980
a lot of the patches that come out in

566
00:19:31,980 --> 00:19:33,840
fact we have an entire team that does

567
00:19:33,840 --> 00:19:36,419
just that companies like Exodus and

568
00:19:36,419 --> 00:19:38,760
flexera formerly secured to some extent

569
00:19:38,760 --> 00:19:41,520
do that type of work as well

570
00:19:41,520 --> 00:19:43,320
of course there's the pen test and Red

571
00:19:43,320 --> 00:19:44,940
Team communities that are looking at the

572
00:19:44,940 --> 00:19:46,799
patches so that they can actually

573
00:19:46,799 --> 00:19:48,960
develop proof of Concepts and exploits

574
00:19:48,960 --> 00:19:50,220
that they can integrate into their

575
00:19:50,220 --> 00:19:52,500
tooling so Enterprises can actually test

576
00:19:52,500 --> 00:19:54,539
the actual patches themselves once

577
00:19:54,539 --> 00:19:56,160
they're deployed so when you're talking

578
00:19:56,160 --> 00:19:57,720
about building Metasploit modules

579
00:19:57,720 --> 00:19:59,940
updating canvas and likewise these

580
00:19:59,940 --> 00:20:01,559
companies are trying to integrate the

581
00:20:01,559 --> 00:20:03,539
latest bugs into their tools and

582
00:20:03,539 --> 00:20:06,059
rightfully so because these folks are

583
00:20:06,059 --> 00:20:07,919
doing it as well the criminal element

584
00:20:07,919 --> 00:20:10,080
they're working to add the bugs into

585
00:20:10,080 --> 00:20:12,120
their BEC tool chains their ransomware

586
00:20:12,120 --> 00:20:13,620
their exploit kits and though it is

587
00:20:13,620 --> 00:20:16,140
uncommon that ransomware uses zero day

588
00:20:16,140 --> 00:20:17,520
vulnerabilities for the most part

589
00:20:17,520 --> 00:20:18,960
they're using end-day vulnerabilities

590
00:20:18,960 --> 00:20:21,240
that have public patches available and

591
00:20:21,240 --> 00:20:22,740
we actually saw this in the offensive

592
00:20:22,740 --> 00:20:24,720
Community back when the hacking team

593
00:20:24,720 --> 00:20:26,220
breaches occurred several years ago

594
00:20:26,220 --> 00:20:27,900
there was several email chains in there

595
00:20:27,900 --> 00:20:30,059
talking about which patches were coming

596
00:20:30,059 --> 00:20:31,980
out which vendors were not good at

597
00:20:31,980 --> 00:20:33,600
actually patching so that they could

598
00:20:33,600 --> 00:20:35,039
monitor what's going to happen and

599
00:20:35,039 --> 00:20:36,840
redevelop tooling to actually release

600
00:20:36,840 --> 00:20:39,240
their exploit kit

601
00:20:39,240 --> 00:20:41,880
now when we discuss timelines it's most

602
00:20:41,880 --> 00:20:43,740
often people most often talk about the

603
00:20:43,740 --> 00:20:45,000
time to fix

604
00:20:45,000 --> 00:20:47,220
they are looking for when the bug was

605
00:20:47,220 --> 00:20:49,080
reported to the vendor and how long it

606
00:20:49,080 --> 00:20:50,580
took them to actually fix that and

607
00:20:50,580 --> 00:20:52,799
resolve the issue and of course this

608
00:20:52,799 --> 00:20:54,960
absolutely matters but this is not the

609
00:20:54,960 --> 00:20:57,120
only timeline to consider

610
00:20:57,120 --> 00:20:59,160
the first other timeline to consider is

611
00:20:59,160 --> 00:21:01,140
the time to patch how long does it take

612
00:21:01,140 --> 00:21:02,880
you to actually roll out the patches in

613
00:21:02,880 --> 00:21:04,200
your Enterprise and are you sure that

614
00:21:04,200 --> 00:21:05,640
you're actually able to roll them out to

615
00:21:05,640 --> 00:21:07,679
your entire Enterprise can you do it

616
00:21:07,679 --> 00:21:09,179
faster than the reverse Engineers out

617
00:21:09,179 --> 00:21:10,620
there who are working to analyze that

618
00:21:10,620 --> 00:21:12,780
patch and develop an exploit and are you

619
00:21:12,780 --> 00:21:14,640
sure that you can actually beat them in

620
00:21:14,640 --> 00:21:17,280
this process from time to uh from the

621
00:21:17,280 --> 00:21:19,080
time from patch to when it I can

622
00:21:19,080 --> 00:21:21,179
actually turn into an exploit it can be

623
00:21:21,179 --> 00:21:22,980
as little as 48 hours and we'll actually

624
00:21:22,980 --> 00:21:24,539
talk about a case study here in a second

625
00:21:24,539 --> 00:21:26,580
about that however when analyzing

626
00:21:26,580 --> 00:21:29,039
patches little effort is given to the

627
00:21:29,039 --> 00:21:31,919
actual estimate of time to exploit

628
00:21:31,919 --> 00:21:34,380
as it's always going to be an estimate

629
00:21:34,380 --> 00:21:35,940
but since we know that we're all

630
00:21:35,940 --> 00:21:38,039
resource constrained

631
00:21:38,039 --> 00:21:40,380
how important would it be for us to

632
00:21:40,380 --> 00:21:42,419
understand if that bug was actually

633
00:21:42,419 --> 00:21:44,700
going to be weaponized now most vendors

634
00:21:44,700 --> 00:21:46,400
do not provide information

635
00:21:46,400 --> 00:21:49,080
regarding exploitability Microsoft

636
00:21:49,080 --> 00:21:50,520
actually attempted to solve this problem

637
00:21:50,520 --> 00:21:52,799
with their exploit index but this is no

638
00:21:52,799 --> 00:21:54,539
longer really useful thanks to

639
00:21:54,539 --> 00:21:57,480
cumulative updates originally XI was

640
00:21:57,480 --> 00:21:59,100
intended to help system administrators

641
00:21:59,100 --> 00:22:01,919
prioritize which patches to test and

642
00:22:01,919 --> 00:22:04,679
deploy first the thought was that you

643
00:22:04,679 --> 00:22:06,840
would prioritize an important class bug

644
00:22:06,840 --> 00:22:09,480
that was likely to be exploited over a

645
00:22:09,480 --> 00:22:11,340
critical class bug that was less likely

646
00:22:11,340 --> 00:22:13,080
to be exploited

647
00:22:13,080 --> 00:22:15,600
but since that time security patches are

648
00:22:15,600 --> 00:22:17,700
actually become cumulative and today

649
00:22:17,700 --> 00:22:18,840
you're it's rare that you're going to

650
00:22:18,840 --> 00:22:21,299
apply one patch to one component you're

651
00:22:21,299 --> 00:22:22,919
going to apply a monthly roll-up of

652
00:22:22,919 --> 00:22:25,799
fixes for many cves therefore when you

653
00:22:25,799 --> 00:22:27,840
you have to treat all bugs in an update

654
00:22:27,840 --> 00:22:29,580
as though they're the highest XI rating

655
00:22:29,580 --> 00:22:31,559
bug for any single bug in that update

656
00:22:31,559 --> 00:22:33,600
therefore it doesn't make sense to call

657
00:22:33,600 --> 00:22:36,360
out xi1 when the whole update should be

658
00:22:36,360 --> 00:22:37,919
treated as xi1 if there's only one in

659
00:22:37,919 --> 00:22:39,419
there

660
00:22:39,419 --> 00:22:41,880
the reality is risk assessments are

661
00:22:41,880 --> 00:22:43,860
going to change Post Release

662
00:22:43,860 --> 00:22:46,440
a bug that was not priority can become

663
00:22:46,440 --> 00:22:48,059
high priority quickly when integrated

664
00:22:48,059 --> 00:22:50,340
into an exploit kit or ransomware or

665
00:22:50,340 --> 00:22:51,740
when an exploit is released online

666
00:22:51,740 --> 00:22:54,000
Enterprises should be looking at patches

667
00:22:54,000 --> 00:22:56,220
Beyond Patch Tuesday as I've seen in the

668
00:22:56,220 --> 00:22:57,539
previous slide

669
00:22:57,539 --> 00:22:59,880
to ensure that resources are still

670
00:22:59,880 --> 00:23:02,640
properly aligned for the prevalent risk

671
00:23:02,640 --> 00:23:04,200
when changes occur to the threat

672
00:23:04,200 --> 00:23:05,880
landscape Enterprises should be shifting

673
00:23:05,880 --> 00:23:07,919
their resources to meet the meet the

674
00:23:07,919 --> 00:23:09,780
need and combat the latest risks not

675
00:23:09,780 --> 00:23:11,460
just the latest publicized and name

676
00:23:11,460 --> 00:23:13,559
vulnerability as again patch management

677
00:23:13,559 --> 00:23:15,720
and risk calculation should be an ooda

678
00:23:15,720 --> 00:23:16,919
Loop where you're actually observing

679
00:23:16,919 --> 00:23:18,000
what's going on in the threat

680
00:23:18,000 --> 00:23:20,400
Landscaping landscape orienting your

681
00:23:20,400 --> 00:23:22,020
resources and deciding and acting on

682
00:23:22,020 --> 00:23:24,179
when to deploy that now like we talked

683
00:23:24,179 --> 00:23:27,000
about the time to exploit is actually

684
00:23:27,000 --> 00:23:29,820
decreasing a lot and here's a case study

685
00:23:29,820 --> 00:23:31,559
of that from our recent pone to own

686
00:23:31,559 --> 00:23:32,940
contest if you don't know what pone to

687
00:23:32,940 --> 00:23:35,520
own is it's a hacking competition that

688
00:23:35,520 --> 00:23:37,440
we run three times a year and in the

689
00:23:37,440 --> 00:23:39,240
spring event we typically hold it in

690
00:23:39,240 --> 00:23:41,700
Vancouver it focuses on Enterprise tools

691
00:23:41,700 --> 00:23:44,039
and applications including web browsers

692
00:23:44,039 --> 00:23:46,980
in pone to own 2021 there was a special

693
00:23:46,980 --> 00:23:48,480
bonus for an attack that could take

694
00:23:48,480 --> 00:23:51,539
advantage of both both Chrome and Edge

695
00:23:51,539 --> 00:23:54,179
at the edge browsers in a single exploit

696
00:23:54,179 --> 00:23:55,799
we do that because both of those

697
00:23:55,799 --> 00:23:57,179
browsers are actually based off of the

698
00:23:57,179 --> 00:23:58,740
chromium source code and we just thought

699
00:23:58,740 --> 00:24:00,720
it would be cool to see an exploit that

700
00:24:00,720 --> 00:24:02,220
would work on both yeah and so that's

701
00:24:02,220 --> 00:24:03,419
why we did it

702
00:24:03,419 --> 00:24:05,159
and actually one team was able to

703
00:24:05,159 --> 00:24:06,780
achieve that but an interesting

704
00:24:06,780 --> 00:24:08,640
situation occurred after this bug was

705
00:24:08,640 --> 00:24:10,140
reported to the vendor in this case

706
00:24:10,140 --> 00:24:11,159
Google

707
00:24:11,159 --> 00:24:13,380
so of course with everything in this

708
00:24:13,380 --> 00:24:15,419
world it all starts with bugs and

709
00:24:15,419 --> 00:24:16,860
vendors shipping a bug so thank you very

710
00:24:16,860 --> 00:24:19,500
much thanks for getting us employed

711
00:24:19,500 --> 00:24:22,080
during pone to own a team of Bruno Keith

712
00:24:22,080 --> 00:24:23,640
and Nicholas bombstart from dataflow

713
00:24:23,640 --> 00:24:26,580
security used a typer mismatch bug to

714
00:24:26,580 --> 00:24:28,080
actually exploit the Chrome renderer

715
00:24:28,080 --> 00:24:30,240
process and Microsoft Edge at the same

716
00:24:30,240 --> 00:24:32,340
time using the same exploit very cool

717
00:24:32,340 --> 00:24:33,360
stuff

718
00:24:33,360 --> 00:24:36,240
worked right out of the box

719
00:24:36,240 --> 00:24:37,919
their successful demonstration earned

720
00:24:37,919 --> 00:24:39,179
them a hundred thousand dollars at the

721
00:24:39,179 --> 00:24:42,360
contest and since it's pone to own we

722
00:24:42,360 --> 00:24:44,340
give the bug and the information to

723
00:24:44,340 --> 00:24:45,960
Google The Google team immediately so

724
00:24:45,960 --> 00:24:47,460
that they can actually start working on

725
00:24:47,460 --> 00:24:48,780
the fix

726
00:24:48,780 --> 00:24:50,940
now the fix was checked into the open

727
00:24:50,940 --> 00:24:53,340
source V8 JavaScript engine source code

728
00:24:53,340 --> 00:24:55,140
repository but it had not been

729
00:24:55,140 --> 00:24:57,539
integrated into the official Downstream

730
00:24:57,539 --> 00:25:00,120
chromium-based browsers at that point

731
00:25:00,120 --> 00:25:02,640
that was planned for a couple days later

732
00:25:02,640 --> 00:25:04,500
and before that integration could occur

733
00:25:04,500 --> 00:25:07,020
a security researcher was able to

734
00:25:07,020 --> 00:25:09,059
reverse engineer the code fix that the

735
00:25:09,059 --> 00:25:11,280
chromium team had pushed in that open

736
00:25:11,280 --> 00:25:13,080
source component and he used that

737
00:25:13,080 --> 00:25:14,580
information to actually build and

738
00:25:14,580 --> 00:25:16,500
publish and exploit and release it on

739
00:25:16,500 --> 00:25:19,080
GitHub effectively odang that bug before

740
00:25:19,080 --> 00:25:20,520
the integration could actually happen

741
00:25:20,520 --> 00:25:22,980
very quickly it was awesome actually to

742
00:25:22,980 --> 00:25:25,280
be honest

743
00:25:25,500 --> 00:25:27,179
the Google team then released their

744
00:25:27,179 --> 00:25:29,820
patch uh on April 13th and Microsoft

745
00:25:29,820 --> 00:25:32,760
released theirs they consumed that fix a

746
00:25:32,760 --> 00:25:34,260
couple days later but other

747
00:25:34,260 --> 00:25:36,059
chromium-based web applications are

748
00:25:36,059 --> 00:25:37,260
still vulnerable if they haven't

749
00:25:37,260 --> 00:25:39,840
consumed that Upstream fix and I will

750
00:25:39,840 --> 00:25:41,880
say now on this stage at the patch Gap

751
00:25:41,880 --> 00:25:44,100
problem for integrated chromium

752
00:25:44,100 --> 00:25:47,820
applications is significant from from

753
00:25:47,820 --> 00:25:50,700
even from Fox at PDF reader to every

754
00:25:50,700 --> 00:25:52,980
single Smart Television out there to web

755
00:25:52,980 --> 00:25:55,200
enabled speakers to home automation

756
00:25:55,200 --> 00:25:57,779
devices to even to automate automobiles

757
00:25:57,779 --> 00:25:59,820
the list goes on and on and on but

758
00:25:59,820 --> 00:26:01,320
that's a different Talk and of course

759
00:26:01,320 --> 00:26:03,059
because we know about this we've

760
00:26:03,059 --> 00:26:05,100
actually had to remove smart televisions

761
00:26:05,100 --> 00:26:07,140
from phone to own because we were

762
00:26:07,140 --> 00:26:09,000
getting a ton of submissions just using

763
00:26:09,000 --> 00:26:12,120
n Chrome and end a chromium bug exploit

764
00:26:12,120 --> 00:26:14,479
chains

765
00:26:14,880 --> 00:26:16,440
now different verticals are going to

766
00:26:16,440 --> 00:26:18,000
take different approaches on how they

767
00:26:18,000 --> 00:26:20,520
actually handle patches themselves and

768
00:26:20,520 --> 00:26:22,320
these differences do matter to the end

769
00:26:22,320 --> 00:26:24,120
user there are those who are out there

770
00:26:24,120 --> 00:26:26,100
who follow the traditional patch patch

771
00:26:26,100 --> 00:26:27,779
Tuesday style releases even if they

772
00:26:27,779 --> 00:26:29,700
don't occur on Patch Tuesday companies

773
00:26:29,700 --> 00:26:32,940
like Microsoft Adobe Oracle Cisco and to

774
00:26:32,940 --> 00:26:34,740
some extent Apple this predictive

775
00:26:34,740 --> 00:26:36,539
disclosure allows people to plan around

776
00:26:36,539 --> 00:26:39,840
the patch releases themselves

777
00:26:39,840 --> 00:26:41,400
and then there are those who take a more

778
00:26:41,400 --> 00:26:43,260
agile approach in these cases they're

779
00:26:43,260 --> 00:26:45,659
focusing on rapid releases as needed

780
00:26:45,659 --> 00:26:47,279
they have minimal documentation and

781
00:26:47,279 --> 00:26:48,779
release notes very little integration

782
00:26:48,779 --> 00:26:50,940
testing things like Cloud technology

783
00:26:50,940 --> 00:26:52,799
some Google Technologies fall into this

784
00:26:52,799 --> 00:26:54,059
category

785
00:26:54,059 --> 00:26:56,039
this allows companies to obviously react

786
00:26:56,039 --> 00:26:58,080
faster to the dynamic risk of their

787
00:26:58,080 --> 00:26:59,880
environment but it's unpredictable for

788
00:26:59,880 --> 00:27:01,620
users when that update is actually going

789
00:27:01,620 --> 00:27:03,179
to come you've seen it sometimes in

790
00:27:03,179 --> 00:27:04,799
stages on stages like here at black at

791
00:27:04,799 --> 00:27:06,600
where an update will pop up during the

792
00:27:06,600 --> 00:27:08,820
middle of the talk

793
00:27:08,820 --> 00:27:10,200
then there are those who roll out their

794
00:27:10,200 --> 00:27:12,299
patches over the air where vendors are

795
00:27:12,299 --> 00:27:13,980
shipping the patches to like to mobile

796
00:27:13,980 --> 00:27:17,159
phones or cars that these are the types

797
00:27:17,159 --> 00:27:19,140
of devices that come to mind often they

798
00:27:19,140 --> 00:27:21,539
roll out on a per region basis so you

799
00:27:21,539 --> 00:27:23,039
might not receive your actual update

800
00:27:23,039 --> 00:27:24,779
depending on your geographical location

801
00:27:24,779 --> 00:27:27,179
and you can end up being vulnerable to

802
00:27:27,179 --> 00:27:29,220
publicly disclosed bugs even though you

803
00:27:29,220 --> 00:27:31,559
think you're updated this is often hard

804
00:27:31,559 --> 00:27:33,840
to tell since they do even less

805
00:27:33,840 --> 00:27:35,760
documentation and essentially remove the

806
00:27:35,760 --> 00:27:38,640
user user control from the equation in

807
00:27:38,640 --> 00:27:40,200
fact this happens to us every time we do

808
00:27:40,200 --> 00:27:41,880
our fall pone to own event because we're

809
00:27:41,880 --> 00:27:44,279
purchasing iot this the event focuses on

810
00:27:44,279 --> 00:27:46,320
iot and mobile devices and we buy

811
00:27:46,320 --> 00:27:48,120
devices from all over the world and

812
00:27:48,120 --> 00:27:49,860
depending on which region we buy them

813
00:27:49,860 --> 00:27:51,480
they have different updates and it

814
00:27:51,480 --> 00:27:52,679
actually is very challenging to get

815
00:27:52,679 --> 00:27:54,779
those devices up to the latest patch

816
00:27:54,779 --> 00:27:56,279
levels

817
00:27:56,279 --> 00:27:58,380
then there's the ICS Community for these

818
00:27:58,380 --> 00:27:59,940
vendors they often focus on customer

819
00:27:59,940 --> 00:28:01,500
deployment first and do public

820
00:28:01,500 --> 00:28:03,600
disclosure later and if they even if

821
00:28:03,600 --> 00:28:05,279
they disclose at all much of the

822
00:28:05,279 --> 00:28:06,539
documentation is actually behind

823
00:28:06,539 --> 00:28:08,460
paywalls after all this is an industry

824
00:28:08,460 --> 00:28:10,500
that considers a license agreement a

825
00:28:10,500 --> 00:28:12,539
defensive depth measure and that's not a

826
00:28:12,539 --> 00:28:13,860
joke

827
00:28:13,860 --> 00:28:15,779
while this method may work for vendors

828
00:28:15,779 --> 00:28:17,880
it removes the value of the cve from the

829
00:28:17,880 --> 00:28:19,380
equation because there's no actual

830
00:28:19,380 --> 00:28:22,200
public coordination going on

831
00:28:22,200 --> 00:28:23,940
and then we get to one of the most

832
00:28:23,940 --> 00:28:25,860
difficult disclosure situations that we

833
00:28:25,860 --> 00:28:27,120
have to deal with

834
00:28:27,120 --> 00:28:29,700
the dreaded multi-vendor vulnerability

835
00:28:29,700 --> 00:28:32,760
disclosure last fall apone Austin a bug

836
00:28:32,760 --> 00:28:34,260
was demonstrated in a western digital

837
00:28:34,260 --> 00:28:36,740
Mass device when we received the report

838
00:28:36,740 --> 00:28:39,600
from them it was determined that the

839
00:28:39,600 --> 00:28:41,340
cause of the bug itself was in an open

840
00:28:41,340 --> 00:28:44,159
source product called netatoc netatoc

841
00:28:44,159 --> 00:28:45,900
Library which is a core component that

842
00:28:45,900 --> 00:28:47,940
is used in lots of Nas devices and lots

843
00:28:47,940 --> 00:28:50,279
of other devices to provide Apple file

844
00:28:50,279 --> 00:28:51,480
sharing

845
00:28:51,480 --> 00:28:53,100
now when we disclose this bug to Western

846
00:28:53,100 --> 00:28:55,620
Digital they engaged certcc rightfully

847
00:28:55,620 --> 00:28:57,360
so it's helped with the notification and

848
00:28:57,360 --> 00:28:59,340
response process once the library

849
00:28:59,340 --> 00:29:00,960
maintainer actually released the fix

850
00:29:00,960 --> 00:29:03,240
which took some time because we that

851
00:29:03,240 --> 00:29:04,880
library is actually no longer maintained

852
00:29:04,880 --> 00:29:07,799
they published the update and it but

853
00:29:07,799 --> 00:29:10,740
then it has to be consumed with all the

854
00:29:10,740 --> 00:29:12,299
different vendors who actually used FX

855
00:29:12,299 --> 00:29:14,100
and in this in this case there was

856
00:29:14,100 --> 00:29:15,900
actually 200 different vendors on that

857
00:29:15,900 --> 00:29:17,820
disclosure thread trying to make sure

858
00:29:17,820 --> 00:29:20,039
that they were going to integrate their

859
00:29:20,039 --> 00:29:23,520
net attack library and their product

860
00:29:23,520 --> 00:29:25,320
so should all the vendors actually have

861
00:29:25,320 --> 00:29:26,940
to wait for disclosure what when

862
00:29:26,940 --> 00:29:29,039
everybody is fixed because that would

863
00:29:29,039 --> 00:29:30,659
effectively make a situation where one

864
00:29:30,659 --> 00:29:32,340
vendor could uh hold up the other

865
00:29:32,340 --> 00:29:34,500
vendors from releasing their fixes in

866
00:29:34,500 --> 00:29:35,700
their products

867
00:29:35,700 --> 00:29:37,980
instead vendors are often rushed are

868
00:29:37,980 --> 00:29:40,140
left rushing to integrate the fix some

869
00:29:40,140 --> 00:29:41,940
are late and you end up in the situation

870
00:29:41,940 --> 00:29:43,860
where the fix is available but maybe

871
00:29:43,860 --> 00:29:45,480
your vendor hasn't integrated the fix

872
00:29:45,480 --> 00:29:47,399
into their product creating a

873
00:29:47,399 --> 00:29:49,320
significant patch Gap

874
00:29:49,320 --> 00:29:51,059
misunderstanding of the supply chain

875
00:29:51,059 --> 00:29:53,279
risk to some system integrators leads to

876
00:29:53,279 --> 00:29:55,620
slow patch integration as new affected

877
00:29:55,620 --> 00:29:57,419
systems are identified and if the

878
00:29:57,419 --> 00:29:59,039
maintainer isn't aware of their software

879
00:29:59,039 --> 00:30:01,080
bill of materials the fix may not come

880
00:30:01,080 --> 00:30:03,360
at all in this specific instance Western

881
00:30:03,360 --> 00:30:05,159
Digital simply removed the library from

882
00:30:05,159 --> 00:30:07,080
their products however other vendors

883
00:30:07,080 --> 00:30:09,899
like Synology and qnap ended up exposed

884
00:30:09,899 --> 00:30:12,020
to multiple network-based code execution

885
00:30:12,020 --> 00:30:14,159
vulnerabilities with known public

886
00:30:14,159 --> 00:30:15,899
exploits

887
00:30:15,899 --> 00:30:17,700
now when patches are released it shines

888
00:30:17,700 --> 00:30:20,039
a spotlight on a component it's like

889
00:30:20,039 --> 00:30:21,720
ringing the dinner bell saying hey

890
00:30:21,720 --> 00:30:23,220
everyone there's a bug over here in this

891
00:30:23,220 --> 00:30:24,539
attack surface that you may have never

892
00:30:24,539 --> 00:30:26,580
thought of or there's a new exploit

893
00:30:26,580 --> 00:30:27,840
technique that can be used in other

894
00:30:27,840 --> 00:30:29,700
products or there's an existing

895
00:30:29,700 --> 00:30:32,100
existence of buggy code that is shared

896
00:30:32,100 --> 00:30:34,740
across an entire product line but that's

897
00:30:34,740 --> 00:30:36,360
a different talk

898
00:30:36,360 --> 00:30:38,520
we tend to think risks go down when the

899
00:30:38,520 --> 00:30:40,080
patch is actually released but in many

900
00:30:40,080 --> 00:30:42,299
cases the risk actually increases when

901
00:30:42,299 --> 00:30:44,399
the patch is released it's the it lets

902
00:30:44,399 --> 00:30:45,779
the attacker know that there's problems

903
00:30:45,779 --> 00:30:48,299
in this area that can be exploited as

904
00:30:48,299 --> 00:30:49,980
soon as we've seen before there are

905
00:30:49,980 --> 00:30:51,419
studies out there from the NSA and

906
00:30:51,419 --> 00:30:53,760
others that attacks do start within 48

907
00:30:53,760 --> 00:30:55,620
Hours of the patch release

908
00:30:55,620 --> 00:30:57,360
and that's assumed that the patch

909
00:30:57,360 --> 00:30:58,980
actually is complete to begin with

910
00:30:58,980 --> 00:31:01,080
Enterprises can end up with a false

911
00:31:01,080 --> 00:31:02,820
sense of security if they believe that

912
00:31:02,820 --> 00:31:04,440
they've mitigated the risk by applying

913
00:31:04,440 --> 00:31:06,179
the patch but instead the patch is

914
00:31:06,179 --> 00:31:08,159
incomplete and you're still at risk or

915
00:31:08,159 --> 00:31:10,140
it's shared between multiple vendors and

916
00:31:10,140 --> 00:31:13,320
the patch is only available for some

917
00:31:13,320 --> 00:31:15,600
and of course log for J was an excellent

918
00:31:15,600 --> 00:31:18,360
example of this this bug existence is

919
00:31:18,360 --> 00:31:20,700
2013 and it wasn't disclosed until

920
00:31:20,700 --> 00:31:23,760
December 2021 and here we are eight

921
00:31:23,760 --> 00:31:25,799
months later still finding vulnerable

922
00:31:25,799 --> 00:31:28,559
log for J instances out there still

923
00:31:28,559 --> 00:31:30,360
finding bugs with unpatched log for J

924
00:31:30,360 --> 00:31:32,460
components and yes that is the real log

925
00:31:32,460 --> 00:31:34,620
for Shell like logo which is fantastic

926
00:31:34,620 --> 00:31:35,840
it looks great

927
00:31:35,840 --> 00:31:38,039
with that I'm going to hand it over to

928
00:31:38,039 --> 00:31:39,720
Dustin who will talk about determining

929
00:31:39,720 --> 00:31:42,659
risk and demanding improvements

930
00:31:42,659 --> 00:31:45,120
so uh once we get to this we understand

931
00:31:45,120 --> 00:31:46,980
this first the first question we usually

932
00:31:46,980 --> 00:31:48,539
get asked is why is this happening there

933
00:31:48,539 --> 00:31:50,580
are many reasons but really it boils

934
00:31:50,580 --> 00:31:52,020
down to a few specific points that we've

935
00:31:52,020 --> 00:31:54,059
identified and for many it's a focused

936
00:31:54,059 --> 00:31:55,799
away from sustained engineering towards

937
00:31:55,799 --> 00:31:57,779
product development vendors are rushing

938
00:31:57,779 --> 00:32:00,419
to ship uh and close bug reports or fail

939
00:32:00,419 --> 00:32:01,919
to properly test them prior to release

940
00:32:01,919 --> 00:32:03,840
in a lot of cases they just aren't

941
00:32:03,840 --> 00:32:05,460
resourced appropriately to create

942
00:32:05,460 --> 00:32:07,140
comprehensive fixes for their reported

943
00:32:07,140 --> 00:32:09,299
vulnerabilities there is simple human

944
00:32:09,299 --> 00:32:11,100
error people do make mistakes and those

945
00:32:11,100 --> 00:32:13,799
mistakes do end up in patches however

946
00:32:13,799 --> 00:32:15,659
there's also a skill Gap in testing in

947
00:32:15,659 --> 00:32:18,120
QA partially because the industry has

948
00:32:18,120 --> 00:32:19,620
really disinvested in maintaining

949
00:32:19,620 --> 00:32:22,080
testers one of the first things Sasha

950
00:32:22,080 --> 00:32:24,179
nadala did is Microsoft CEO was to

951
00:32:24,179 --> 00:32:26,640
eliminate many QA positions stating it

952
00:32:26,640 --> 00:32:28,140
often makes sense to have the developers

953
00:32:28,140 --> 00:32:30,360
test and fix bugs instead of a separate

954
00:32:30,360 --> 00:32:31,559
team of testress

955
00:32:31,559 --> 00:32:33,299
and many others have followed his lead

956
00:32:33,299 --> 00:32:35,159
in either reduced QA or pass the burden

957
00:32:35,159 --> 00:32:37,320
on to developers as a result the

958
00:32:37,320 --> 00:32:39,059
security expertise that existed in

959
00:32:39,059 --> 00:32:40,919
organizations has moved on to other

960
00:32:40,919 --> 00:32:43,140
areas helping widen that skills Gap

961
00:32:43,140 --> 00:32:45,120
rather than shrink it

962
00:32:45,120 --> 00:32:47,580
and finally vendors see no benefit from

963
00:32:47,580 --> 00:32:48,899
being transparent when it comes to their

964
00:32:48,899 --> 00:32:51,600
Communications and is about the security

965
00:32:51,600 --> 00:32:53,220
of their product and whether it be no

966
00:32:53,220 --> 00:32:55,020
communication or misleading or

967
00:32:55,020 --> 00:32:56,460
incomplete communication they simply

968
00:32:56,460 --> 00:32:58,440
don't see the return on investment

969
00:32:58,440 --> 00:33:01,500
they want us to just trust them just

970
00:33:01,500 --> 00:33:03,299
trust us it's hard to do when they're

971
00:33:03,299 --> 00:33:04,980
not being very trustworthy

972
00:33:04,980 --> 00:33:07,559
so what as you uh as Enterprises should

973
00:33:07,559 --> 00:33:08,880
take away from this is first understand

974
00:33:08,880 --> 00:33:10,520
that due to flawed vendor practices

975
00:33:10,520 --> 00:33:12,600
Enterprises no longer have a clear view

976
00:33:12,600 --> 00:33:14,100
of the true risk to their networks

977
00:33:14,100 --> 00:33:16,559
whether it's issues and CVSs ratings or

978
00:33:16,559 --> 00:33:19,380
manipulating cve to disguise risk or a

979
00:33:19,380 --> 00:33:20,580
lack of clear vendor guidance

980
00:33:20,580 --> 00:33:22,860
Enterprises really no longer have an

981
00:33:22,860 --> 00:33:24,600
easy method to quantify the risk to

982
00:33:24,600 --> 00:33:26,519
their systems

983
00:33:26,519 --> 00:33:28,440
patches that are faulty or otherwise

984
00:33:28,440 --> 00:33:30,659
incomplete are costing you real money

985
00:33:30,659 --> 00:33:32,580
and it's not just with the new patches

986
00:33:32,580 --> 00:33:34,140
that are getting rolled out Enterprises

987
00:33:34,140 --> 00:33:36,120
need to spend they're already limited

988
00:33:36,120 --> 00:33:38,580
resources redeploying patches they have

989
00:33:38,580 --> 00:33:40,980
already installed and Enterprises ended

990
00:33:40,980 --> 00:33:42,720
up spending money instead on third party

991
00:33:42,720 --> 00:33:44,100
and other tools just to handle the

992
00:33:44,100 --> 00:33:46,679
occasional nightmare that is patch

993
00:33:46,679 --> 00:33:48,720
management and most notably there are

994
00:33:48,720 --> 00:33:50,460
many times when a patch increases rather

995
00:33:50,460 --> 00:33:52,980
than decreases risk the time to exploit

996
00:33:52,980 --> 00:33:55,860
counter is often far less than time to

997
00:33:55,860 --> 00:33:58,320
deploy even if you're a very mature and

998
00:33:58,320 --> 00:34:00,240
well-disciplined Enterprise and an

999
00:34:00,240 --> 00:34:01,500
incomplete patch just tells the

1000
00:34:01,500 --> 00:34:03,240
attackers where the bug is without

1001
00:34:03,240 --> 00:34:04,980
giving the defender the tools they need

1002
00:34:04,980 --> 00:34:07,260
to prevent their exploitation

1003
00:34:07,260 --> 00:34:09,179
so what can we do what can you do to

1004
00:34:09,179 --> 00:34:11,219
help uh from this is a first of all

1005
00:34:11,219 --> 00:34:12,719
understand what you have to defend and I

1006
00:34:12,719 --> 00:34:15,359
I truly mean this is be ruthless in your

1007
00:34:15,359 --> 00:34:17,639
asset Discovery when it comes to passive

1008
00:34:17,639 --> 00:34:19,619
fingerprinting and network detection you

1009
00:34:19,619 --> 00:34:21,000
have to know what you have to protect

1010
00:34:21,000 --> 00:34:22,918
and you have to know how to segregate it

1011
00:34:22,918 --> 00:34:24,899
and if you're developing a product make

1012
00:34:24,899 --> 00:34:26,280
sure you understand your software bill

1013
00:34:26,280 --> 00:34:28,199
of materials and ensure updates are

1014
00:34:28,199 --> 00:34:29,820
integrated

1015
00:34:29,820 --> 00:34:31,080
second of all you might not feel like

1016
00:34:31,080 --> 00:34:32,520
you have a loud voice in your discussion

1017
00:34:32,520 --> 00:34:34,199
but your wallet speaks loudly on your

1018
00:34:34,199 --> 00:34:35,219
behalf

1019
00:34:35,219 --> 00:34:37,199
now I do not expect people with E5

1020
00:34:37,199 --> 00:34:39,000
licenses to just ditch Microsoft for

1021
00:34:39,000 --> 00:34:41,639
Linux because of a bad patch uh however

1022
00:34:41,639 --> 00:34:43,320
it does give you an Avenue for feedback

1023
00:34:43,320 --> 00:34:45,179
to your vendors and especially when

1024
00:34:45,179 --> 00:34:47,040
deciding on new vendors include on in

1025
00:34:47,040 --> 00:34:49,379
your rfps what is your patching policy

1026
00:34:49,379 --> 00:34:50,879
what are your security advisories look

1027
00:34:50,879 --> 00:34:52,500
like that sort of thing you'd be

1028
00:34:52,500 --> 00:34:54,119
surprised the answers you do and do not

1029
00:34:54,119 --> 00:34:55,260
get

1030
00:34:55,260 --> 00:34:57,119
and finally understand that your risk

1031
00:34:57,119 --> 00:34:59,040
management from security patches has to

1032
00:34:59,040 --> 00:35:00,540
go beyond the second Tuesday of each

1033
00:35:00,540 --> 00:35:02,160
month and this means watching for

1034
00:35:02,160 --> 00:35:03,839
revisions and monitoring for threat

1035
00:35:03,839 --> 00:35:05,640
landscape for proof of Concepts and

1036
00:35:05,640 --> 00:35:07,200
exploit releases as these can greatly

1037
00:35:07,200 --> 00:35:09,780
change the risk now we at zdi wanted to

1038
00:35:09,780 --> 00:35:12,180
do some things to incentivize uh vendors

1039
00:35:12,180 --> 00:35:13,380
to do a little bit better and we

1040
00:35:13,380 --> 00:35:15,420
considered many options some of them

1041
00:35:15,420 --> 00:35:17,520
more serious than others we considered

1042
00:35:17,520 --> 00:35:19,500
just zero daying all the the bugs that

1043
00:35:19,500 --> 00:35:21,720
came in as failed patches we thought

1044
00:35:21,720 --> 00:35:23,400
about somehow a Wall of Shame or some

1045
00:35:23,400 --> 00:35:25,140
magic quadrant we could push vendors

1046
00:35:25,140 --> 00:35:27,599
into uh we thought about blockchains and

1047
00:35:27,599 --> 00:35:30,599
nft not really but somebody probably did

1048
00:35:30,599 --> 00:35:33,660
in marketing but what it came down to uh

1049
00:35:33,660 --> 00:35:34,980
in the end the most reasonable and

1050
00:35:34,980 --> 00:35:36,359
practical way we could incentivize

1051
00:35:36,359 --> 00:35:38,820
vendors is to reduce our disclosure

1052
00:35:38,820 --> 00:35:40,920
timeline for bugs that result from

1053
00:35:40,920 --> 00:35:43,380
incomplete or faulty patches and this is

1054
00:35:43,380 --> 00:35:45,119
one of the few areas where we as a

1055
00:35:45,119 --> 00:35:47,640
vendor as a disclosure wholesaler can

1056
00:35:47,640 --> 00:35:49,500
control we've seen the reduction in

1057
00:35:49,500 --> 00:35:51,599
timelines work in the past so we want to

1058
00:35:51,599 --> 00:35:53,460
use this tactic here as well Brian will

1059
00:35:53,460 --> 00:35:55,800
tell you the exact details of that

1060
00:35:55,800 --> 00:35:58,260
thank you Dustin

1061
00:35:58,260 --> 00:36:00,060
so what we decided to do is reduce our

1062
00:36:00,060 --> 00:36:01,920
disclosure timelines for bugs that we

1063
00:36:01,920 --> 00:36:03,960
believe to be results from incomplete or

1064
00:36:03,960 --> 00:36:06,300
faulty patches and as a reminder our

1065
00:36:06,300 --> 00:36:08,099
current disclosure timeline in zdi is

1066
00:36:08,099 --> 00:36:10,440
120 days and what we wanted to do was

1067
00:36:10,440 --> 00:36:12,240
actually take a tiered approach on this

1068
00:36:12,240 --> 00:36:14,040
depending on the severity of the bug

1069
00:36:14,040 --> 00:36:16,440
itself that and how the failed patch

1070
00:36:16,440 --> 00:36:19,020
actually worked so the first tier will

1071
00:36:19,020 --> 00:36:21,060
be a 30-day timeline this will be for

1072
00:36:21,060 --> 00:36:22,619
critical class bugs that are easily

1073
00:36:22,619 --> 00:36:25,619
circumvented when the patch is released

1074
00:36:25,619 --> 00:36:27,420
and in these cases you can basically

1075
00:36:27,420 --> 00:36:29,339
consider the patch itself under active

1076
00:36:29,339 --> 00:36:31,980
attack since the vendor hasn't disclosed

1077
00:36:31,980 --> 00:36:33,960
exactly where the bug-in bug is and the

1078
00:36:33,960 --> 00:36:35,220
edin price and they have not given

1079
00:36:35,220 --> 00:36:37,260
Enterprises the necessary tools to

1080
00:36:37,260 --> 00:36:40,859
prevent the exploitation itself

1081
00:36:40,859 --> 00:36:43,619
the second tier would be 60 days this

1082
00:36:43,619 --> 00:36:45,300
will be for high and critical severity

1083
00:36:45,300 --> 00:36:47,460
bugs where patches provide at least some

1084
00:36:47,460 --> 00:36:49,800
level of protection in these cases we

1085
00:36:49,800 --> 00:36:51,660
actually don't detect or expect active

1086
00:36:51,660 --> 00:36:53,820
exploitation but again the risk

1087
00:36:53,820 --> 00:36:55,560
calculations has changed when this bug

1088
00:36:55,560 --> 00:36:58,740
is disclosed and the final tier will be

1089
00:36:58,740 --> 00:37:00,900
90 days

1090
00:37:00,900 --> 00:37:03,839
now these numbers aren't set in stone I

1091
00:37:03,839 --> 00:37:05,160
know that some people will say that are

1092
00:37:05,160 --> 00:37:07,380
literalized seven days or maybe 90 days

1093
00:37:07,380 --> 00:37:09,180
for everything else but this is our

1094
00:37:09,180 --> 00:37:12,060
starting point for failed patches we are

1095
00:37:12,060 --> 00:37:13,920
actively tracking failed patches in the

1096
00:37:13,920 --> 00:37:15,599
zero day Initiative Program and these

1097
00:37:15,599 --> 00:37:17,460
timelines can be updated in a Time based

1098
00:37:17,460 --> 00:37:18,960
off of what we're seeing happen across

1099
00:37:18,960 --> 00:37:21,180
the industry and we've seen other groups

1100
00:37:21,180 --> 00:37:23,160
talking about this as well most notably

1101
00:37:23,160 --> 00:37:25,800
project zero reports similar findings of

1102
00:37:25,800 --> 00:37:27,599
incomplete and variant bugs being used

1103
00:37:27,599 --> 00:37:29,220
in the wild and we encourage all

1104
00:37:29,220 --> 00:37:30,720
organizations who are reporting

1105
00:37:30,720 --> 00:37:32,160
vulnerabilities to adopt similar

1106
00:37:32,160 --> 00:37:34,740
timelines for failed patches we're on

1107
00:37:34,740 --> 00:37:36,300
track to disclose over 1700

1108
00:37:36,300 --> 00:37:38,220
vulnerabilities this year so we're going

1109
00:37:38,220 --> 00:37:40,320
to have plenty of opportunity to gather

1110
00:37:40,320 --> 00:37:42,599
metrics about this problem and hopefully

1111
00:37:42,599 --> 00:37:45,000
see Improvement as time goes on but of

1112
00:37:45,000 --> 00:37:46,980
course that is a different talk now a

1113
00:37:46,980 --> 00:37:49,280
case study for this would be cve

1114
00:37:49,280 --> 00:37:51,300
2022-22047 which was that local

1115
00:37:51,300 --> 00:37:52,980
privilege escalation

1116
00:37:52,980 --> 00:37:55,320
if we were to receive that bug today we

1117
00:37:55,320 --> 00:37:56,579
would actually reduce the disclosure

1118
00:37:56,579 --> 00:37:58,320
timeline because of its actual failed

1119
00:37:58,320 --> 00:37:59,280
patch

1120
00:37:59,280 --> 00:38:01,680
now some final thoughts just to wrap

1121
00:38:01,680 --> 00:38:03,720
things up incomplete and faulty patches

1122
00:38:03,720 --> 00:38:05,280
are absolutely being used in the

1123
00:38:05,280 --> 00:38:07,260
wildlife threat actors this is not an

1124
00:38:07,260 --> 00:38:09,240
opinion this is based off of data and

1125
00:38:09,240 --> 00:38:10,260
things that we're seeing from our

1126
00:38:10,260 --> 00:38:11,760
competitors whether you realize it or

1127
00:38:11,760 --> 00:38:13,500
not bad patches are actively being used

1128
00:38:13,500 --> 00:38:16,140
in the wild or exploiting in the wild it

1129
00:38:16,140 --> 00:38:17,880
does impact your Enterprise

1130
00:38:17,880 --> 00:38:19,680
We Believe policy adjustments should be

1131
00:38:19,680 --> 00:38:21,300
based off of real data and this is how

1132
00:38:21,300 --> 00:38:23,280
we Define our disclosure timelines and

1133
00:38:23,280 --> 00:38:25,440
we will edit our timelines based off of

1134
00:38:25,440 --> 00:38:26,940
this in the future

1135
00:38:26,940 --> 00:38:28,740
and you also need to base your risk

1136
00:38:28,740 --> 00:38:31,020
calculations on that and finally yes I

1137
00:38:31,020 --> 00:38:32,579
know I'm repeating myself but I think

1138
00:38:32,579 --> 00:38:34,859
it's important your risk assessment must

1139
00:38:34,859 --> 00:38:36,960
go beyond the second Patch Tuesday and

1140
00:38:36,960 --> 00:38:38,400
look at the current threat landscape

1141
00:38:38,400 --> 00:38:41,160
looking for bugs that are or revisions

1142
00:38:41,160 --> 00:38:43,320
to Patches waiting for proof of Concepts

1143
00:38:43,320 --> 00:38:44,880
to release and understand that you have

1144
00:38:44,880 --> 00:38:46,740
to change your approach once those

1145
00:38:46,740 --> 00:38:48,599
things happen even after the Patch is

1146
00:38:48,599 --> 00:38:51,060
released and with that you can find us

1147
00:38:51,060 --> 00:38:53,460
online Dustin please find Us online we

1148
00:38:53,460 --> 00:38:55,920
go to Twitter at the zdi bugs it's a new

1149
00:38:55,920 --> 00:38:57,420
Twitter handle for us that's tweeting

1150
00:38:57,420 --> 00:38:59,940
out just advisories that are high CVSs

1151
00:38:59,940 --> 00:39:02,160
pound to own or zero days we're on the

1152
00:39:02,160 --> 00:39:04,260
gram now my children are thrilled with

1153
00:39:04,260 --> 00:39:06,420
that welcome to 2017. if you find us

1154
00:39:06,420 --> 00:39:09,480
there also I'll start a patch webcast in

1155
00:39:09,480 --> 00:39:10,980
September you can find it on our YouTube

1156
00:39:10,980 --> 00:39:12,780
that'll be patch Wednesday where I just

1157
00:39:12,780 --> 00:39:15,660
review stuff real quickly uh and uh hey

1158
00:39:15,660 --> 00:39:17,099
we're looking for bugs if you've got

1159
00:39:17,099 --> 00:39:19,079
bugs to sell we got we've got money to

1160
00:39:19,079 --> 00:39:21,720
buy them so uh just here's our pgp Cree

1161
00:39:21,720 --> 00:39:24,300
don't send them clear text email we

1162
00:39:24,300 --> 00:39:26,280
can't buy them then

1163
00:39:26,280 --> 00:39:27,900
um and as you know now those those

1164
00:39:27,900 --> 00:39:29,520
patches are faulty sometimes so

1165
00:39:29,520 --> 00:39:30,720
definitely reverse engineer those

1166
00:39:30,720 --> 00:39:32,400
patches and look at what's happening and

1167
00:39:32,400 --> 00:39:34,160
maybe there's some cash to find there

1168
00:39:34,160 --> 00:39:36,060
but hey look we're going to go to the

1169
00:39:36,060 --> 00:39:37,859
wrap-up room we're right at time so I

1170
00:39:37,859 --> 00:39:38,940
want to thank you for your time and

1171
00:39:38,940 --> 00:39:40,320
attention if you have any questions

1172
00:39:40,320 --> 00:39:44,040
please join us in South Pacific South

1173
00:39:44,040 --> 00:39:46,020
Sea south of something just follow us

1174
00:39:46,020 --> 00:39:48,980
there thank you very much

1175
00:39:49,260 --> 00:39:52,260
foreign

1176
00:39:55,270 --> 00:39:58,369
[Music]

