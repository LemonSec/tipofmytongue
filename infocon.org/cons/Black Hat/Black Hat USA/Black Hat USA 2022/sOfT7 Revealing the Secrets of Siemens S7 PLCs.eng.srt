1
00:00:04,200 --> 00:00:06,799
foreign

2
00:00:07,740 --> 00:00:10,920
the title of a talk is soft7

3
00:00:10,920 --> 00:00:13,799
revealing the secrets of the Siemens S7

4
00:00:13,799 --> 00:00:15,660
plcs

5
00:00:15,660 --> 00:00:18,119
this is Joint work with Professor Eric

6
00:00:18,119 --> 00:00:21,140
BM and three of her students

7
00:00:21,140 --> 00:00:25,140
maximbarsky idanraz and Alon dankner who

8
00:00:25,140 --> 00:00:26,939
is here with me

9
00:00:26,939 --> 00:00:28,980
we are all from the faculty of computer

10
00:00:28,980 --> 00:00:31,679
science in the technion Israel Institute

11
00:00:31,679 --> 00:00:34,399
of Technology

12
00:00:35,840 --> 00:00:39,360
my name is Sarah bachan I'm the founder

13
00:00:39,360 --> 00:00:42,899
of c and CEO of cyclog that provides

14
00:00:42,899 --> 00:00:46,320
secure system design and audit services

15
00:00:46,320 --> 00:00:49,140
I'm also a senior researcher at the

16
00:00:49,140 --> 00:00:51,539
technion hiruchi fujiara cyber security

17
00:00:51,539 --> 00:00:53,760
Research Center

18
00:00:53,760 --> 00:00:56,520
my name is Alan dagner I'm a security

19
00:00:56,520 --> 00:01:00,559
researcher and the decline graduate

20
00:01:02,579 --> 00:01:06,420
Simmons S7 pocs are certainly the most

21
00:01:06,420 --> 00:01:08,820
researched and attacked ones

22
00:01:08,820 --> 00:01:11,760
the reason is twofold ubiquitous

23
00:01:11,760 --> 00:01:14,520
deployment in critical facilities

24
00:01:14,520 --> 00:01:17,580
and the vendor Siemens set a high

25
00:01:17,580 --> 00:01:21,659
security standard in fact it was the

26
00:01:21,659 --> 00:01:23,580
first ICS vendor to integrate

27
00:01:23,580 --> 00:01:27,420
cryptographic protections on its plcs

28
00:01:27,420 --> 00:01:30,000
so here's a quick history of malicious

29
00:01:30,000 --> 00:01:34,200
Squad execution on Siemens S7 pocs

30
00:01:34,200 --> 00:01:36,900
the first to do it was the infamous

31
00:01:36,900 --> 00:01:40,979
stuxnet worm discovered in 2010

32
00:01:40,979 --> 00:01:43,439
it exploited the vulnerability in

33
00:01:43,439 --> 00:01:46,740
Siemens Windows software to inject raw

34
00:01:46,740 --> 00:01:49,140
control program to the plc

35
00:01:49,140 --> 00:01:52,860
and tamper with the HMI outputs

36
00:01:52,860 --> 00:01:54,899
this was before Siemens security

37
00:01:54,899 --> 00:01:57,960
enhancement and was actually triggered

38
00:01:57,960 --> 00:01:59,399
to it

39
00:01:59,399 --> 00:02:03,360
in rock 7 the work we presented here in

40
00:02:03,360 --> 00:02:06,600
2019 we came up with the Rogue

41
00:02:06,600 --> 00:02:09,899
engineering station python script it's

42
00:02:09,899 --> 00:02:12,180
exploited vulnerabilities in the S7

43
00:02:12,180 --> 00:02:15,900
protocol to perform stress injection of

44
00:02:15,900 --> 00:02:18,900
an unauthorized control program to an S7

45
00:02:18,900 --> 00:02:20,640
1500

46
00:02:20,640 --> 00:02:24,060
we also find out that all the PLC from

47
00:02:24,060 --> 00:02:26,879
the same model and firmware version use

48
00:02:26,879 --> 00:02:29,160
the same key pair

49
00:02:29,160 --> 00:02:31,940
in the same year at Blackhawk London

50
00:02:31,940 --> 00:02:34,620
Abasi and his team exploited the

51
00:02:34,620 --> 00:02:38,099
vulnerability in the S7 1200 bootloader

52
00:02:38,099 --> 00:02:40,860
and demonstrated arbitrary toward

53
00:02:40,860 --> 00:02:42,180
execution

54
00:02:42,180 --> 00:02:45,120
they were also the first to find out

55
00:02:45,120 --> 00:02:48,360
that the S7 plcs are using the Adonis

56
00:02:48,360 --> 00:02:49,739
killer

57
00:02:49,739 --> 00:02:53,599
in 2021 Cal current from Clarity

58
00:02:53,599 --> 00:02:56,280
exploited vulnerability in Siemens

59
00:02:56,280 --> 00:02:58,920
memory management to escape the control

60
00:02:58,920 --> 00:03:02,160
program sandbox and go to remote code

61
00:03:02,160 --> 00:03:04,920
arbitrary code execution in the Adonis

62
00:03:04,920 --> 00:03:06,540
kernel

63
00:03:06,540 --> 00:03:10,080
our current work takes the capability to

64
00:03:10,080 --> 00:03:13,080
run native code on the PLC and create a

65
00:03:13,080 --> 00:03:17,220
rogue PLC a few steps forward

66
00:03:17,220 --> 00:03:20,459
remember the Purdue model with the PLC

67
00:03:20,459 --> 00:03:23,819
communication is restricted only to the

68
00:03:23,819 --> 00:03:28,140
planet local HMI and Engineering station

69
00:03:28,140 --> 00:03:31,819
well you can start forgetting it

70
00:03:31,819 --> 00:03:34,200
Industries 4-0

71
00:03:34,200 --> 00:03:36,659
and the digital transformation

72
00:03:36,659 --> 00:03:40,080
of changing the ICS architecture model

73
00:03:40,080 --> 00:03:43,319
new architectures are emerging with the

74
00:03:43,319 --> 00:03:46,200
PLC communicates through a service bus

75
00:03:46,200 --> 00:03:49,560
that might reside in the internet with

76
00:03:49,560 --> 00:03:52,799
other ICS components part of which must

77
00:03:52,799 --> 00:03:57,080
might also be scattered in the internet

78
00:03:58,019 --> 00:04:01,500
so smart manufacturing brings forward

79
00:04:01,500 --> 00:04:05,519
new PLC requirements they are required

80
00:04:05,519 --> 00:04:07,379
to run integrated development

81
00:04:07,379 --> 00:04:09,840
environment they're required to support

82
00:04:09,840 --> 00:04:12,299
new communication protocol and even

83
00:04:12,299 --> 00:04:15,799
perform extensive Cloud communication

84
00:04:15,799 --> 00:04:19,320
hence the vendor must be agile and

85
00:04:19,320 --> 00:04:20,459
flexible

86
00:04:20,459 --> 00:04:24,000
yet they must preserve existing ipn

87
00:04:24,000 --> 00:04:27,720
technology and cannot start from scratch

88
00:04:27,720 --> 00:04:30,840
so the solution the vendors came up with

89
00:04:30,840 --> 00:04:33,780
are the software plc

90
00:04:33,780 --> 00:04:38,520
this is a POC that contains a VM it runs

91
00:04:38,520 --> 00:04:41,040
a general purpose OS

92
00:04:41,040 --> 00:04:43,560
mostly we've seen windows but some are

93
00:04:43,560 --> 00:04:45,000
running Linux

94
00:04:45,000 --> 00:04:47,460
now the fact that the standard OS is

95
00:04:47,460 --> 00:04:50,340
running on the PLC CPU leads to the

96
00:04:50,340 --> 00:04:53,060
usage of the standard CPU

97
00:04:53,060 --> 00:04:57,419
another VM runs the PLC code which

98
00:04:57,419 --> 00:05:00,380
usually runs on the vendors proprietary

99
00:05:00,380 --> 00:05:03,000
operating system

100
00:05:03,000 --> 00:05:05,100
as we have two

101
00:05:05,100 --> 00:05:08,160
operating system running on the same CPU

102
00:05:08,160 --> 00:05:11,520
the general purpose and the proprietary

103
00:05:11,520 --> 00:05:14,600
and they are running a virtualized

104
00:05:14,600 --> 00:05:17,940
sandboxes and the virtualization is

105
00:05:17,940 --> 00:05:22,020
implemented by hypervisor or vmm in

106
00:05:22,020 --> 00:05:26,100
Simmons case the CPU the PLC is using is

107
00:05:26,100 --> 00:05:30,300
an internal a multi-core where a Windows

108
00:05:30,300 --> 00:05:33,620
embedded OS is using three of the cores

109
00:05:33,620 --> 00:05:37,199
and the fourth score is used by Siemens

110
00:05:37,199 --> 00:05:40,380
proprietary operating system which runs

111
00:05:40,380 --> 00:05:43,100
the plc

112
00:05:44,160 --> 00:05:45,320
thank you

113
00:05:45,320 --> 00:05:50,699
Simmons 82 200 SP open controller it

114
00:05:50,699 --> 00:05:53,220
seems version of the software puc

115
00:05:53,220 --> 00:05:57,660
it is a software version of the S7 1500

116
00:05:57,660 --> 00:06:02,400
it was introduced to the market at 2015.

117
00:06:02,400 --> 00:06:05,820
now virtualization brings with its

118
00:06:05,820 --> 00:06:09,600
significant operational advantages for

119
00:06:09,600 --> 00:06:13,020
example you can update the windows and

120
00:06:13,020 --> 00:06:16,620
when it is restarted or even when

121
00:06:16,620 --> 00:06:19,080
Windows receive a blue screen of death

122
00:06:19,080 --> 00:06:22,020
the PLC continues to run without

123
00:06:22,020 --> 00:06:25,139
interruption since it runs it runs in a

124
00:06:25,139 --> 00:06:27,139
separate VM

125
00:06:27,139 --> 00:06:30,780
Siemens have also used virtualization to

126
00:06:30,780 --> 00:06:33,720
prefer separation of communication and

127
00:06:33,720 --> 00:06:35,759
to decrease the attack surface of the

128
00:06:35,759 --> 00:06:37,080
PSC code

129
00:06:37,080 --> 00:06:39,900
in the new architecture the PLC

130
00:06:39,900 --> 00:06:42,560
communicates only with the field devices

131
00:06:42,560 --> 00:06:45,600
all the communication with the upper

132
00:06:45,600 --> 00:06:47,819
layers of the Purdue model that contains

133
00:06:47,819 --> 00:06:51,780
the AG mind engineering as a station and

134
00:06:51,780 --> 00:06:54,360
might also reside in the cloud is

135
00:06:54,360 --> 00:06:57,440
performed by the windows VM

136
00:06:57,440 --> 00:07:01,560
the device that we've tested is CPU 1515

137
00:07:01,560 --> 00:07:04,100
SP

138
00:07:06,060 --> 00:07:09,720
now let me take you backwards to about

139
00:07:09,720 --> 00:07:13,139
six years ago before we started our

140
00:07:13,139 --> 00:07:15,300
Rogue 7 research

141
00:07:15,300 --> 00:07:18,500
our first intention Regional intention

142
00:07:18,500 --> 00:07:22,560
was to attempt a vulnerability search on

143
00:07:22,560 --> 00:07:25,380
the S7 1500 firmware

144
00:07:25,380 --> 00:07:28,259
at that stage we found out that it was

145
00:07:28,259 --> 00:07:29,759
encrypted

146
00:07:29,759 --> 00:07:32,940
and we couldn't construct the plain text

147
00:07:32,940 --> 00:07:37,139
firmware from the plc so we fell back to

148
00:07:37,139 --> 00:07:39,120
protocol reverse engineering and the

149
00:07:39,120 --> 00:07:42,120
result was our Rogue 7 research

150
00:07:42,120 --> 00:07:44,639
when we learned about the new software

151
00:07:44,639 --> 00:07:47,220
PLC and the new architecture we thought

152
00:07:47,220 --> 00:07:50,759
okay let's give it another shot

153
00:07:50,759 --> 00:07:53,460
and as we started our Quest towards the

154
00:07:53,460 --> 00:07:57,360
Siemens PLC plain text firmware

155
00:07:57,360 --> 00:08:00,419
now when the PLC boots

156
00:08:00,419 --> 00:08:04,740
it immediately enters the windows VM a

157
00:08:04,740 --> 00:08:07,080
jailed environment and all we can see is

158
00:08:07,080 --> 00:08:08,880
the Windows screen

159
00:08:08,880 --> 00:08:12,120
so our first attempt was to run a

160
00:08:12,120 --> 00:08:15,060
different operating system on the POC

161
00:08:15,060 --> 00:08:16,020
Hardware

162
00:08:16,020 --> 00:08:19,199
so we brought our own discounted

163
00:08:19,199 --> 00:08:22,080
container Ubuntu and we tried to run it

164
00:08:22,080 --> 00:08:24,120
on the plc

165
00:08:24,120 --> 00:08:28,139
and surprise we successfully run Ubuntu

166
00:08:28,139 --> 00:08:31,580
on the PLC Hardware

167
00:08:32,120 --> 00:08:35,479
Ubuntu we found that there are five

168
00:08:35,479 --> 00:08:39,539
partitions in the PLC internal memory

169
00:08:39,539 --> 00:08:43,320
we found that sdo1 contains the Windows

170
00:08:43,320 --> 00:08:46,800
File system and also the grab files and

171
00:08:46,800 --> 00:08:49,560
the hypervisor binaries and there are

172
00:08:49,560 --> 00:08:51,600
other four partitions in the internal

173
00:08:51,600 --> 00:08:53,580
memory for example that contains some

174
00:08:53,580 --> 00:08:57,060
other stuff for example SDA 5 contains

175
00:08:57,060 --> 00:09:00,560
the cement project file

176
00:09:01,800 --> 00:09:05,580
by analyzing the grab files we found

177
00:09:05,580 --> 00:09:08,100
that the hypervisor is running in two

178
00:09:08,100 --> 00:09:11,519
stages at the first stage the hypervisor

179
00:09:11,519 --> 00:09:14,100
configured the PLC Hardware at the

180
00:09:14,100 --> 00:09:15,600
second stage

181
00:09:15,600 --> 00:09:19,620
it loads two virtual machine the first

182
00:09:19,620 --> 00:09:23,160
virtual machine contains when those

183
00:09:23,160 --> 00:09:26,519
and the second virtual machine is loaded

184
00:09:26,519 --> 00:09:28,760
from a

185
00:09:28,760 --> 00:09:32,160
cpu.alpha that contains the mysterious

186
00:09:32,160 --> 00:09:34,080
software CPU

187
00:09:34,080 --> 00:09:36,720
in an encrypted phone

188
00:09:36,720 --> 00:09:38,700
hence

189
00:09:38,700 --> 00:09:42,000
We Gather the tests PLC software

190
00:09:42,000 --> 00:09:45,839
architecture is a vmm and hypervisors

191
00:09:45,839 --> 00:09:48,540
that runs on top of the hardware and it

192
00:09:48,540 --> 00:09:51,120
runs 2vm one VM runs the windows

193
00:09:51,120 --> 00:09:53,519
embedded operating system and the second

194
00:09:53,519 --> 00:09:57,680
VM runs this Mysterio software CPU

195
00:09:57,680 --> 00:10:00,240
from our analysis of the grab

196
00:10:00,240 --> 00:10:02,640
configuration fund we also figured out

197
00:10:02,640 --> 00:10:06,480
the CPU load sequence the excuse me the

198
00:10:06,480 --> 00:10:09,959
open controller boot sequence so after

199
00:10:09,959 --> 00:10:12,720
the BIOS is running the a grab

200
00:10:12,720 --> 00:10:16,140
bootloader is running the transde first

201
00:10:16,140 --> 00:10:18,300
stage of the hypervisor configures the

202
00:10:18,300 --> 00:10:20,459
hardware the second stage it will

203
00:10:20,459 --> 00:10:23,459
hypervisor the clothes the 2vm the

204
00:10:23,459 --> 00:10:26,279
embedded windows that communicates with

205
00:10:26,279 --> 00:10:29,220
the HDMI engineering station and

206
00:10:29,220 --> 00:10:32,399
optionally with Cloud platform and the

207
00:10:32,399 --> 00:10:35,940
software CPU that communicates with the

208
00:10:35,940 --> 00:10:38,779
field devices

209
00:10:39,620 --> 00:10:42,420
surprisingly at this stage we found out

210
00:10:42,420 --> 00:10:45,720
that the vml binaries the grab

211
00:10:45,720 --> 00:10:49,500
configuration and the cpu.l size are

212
00:10:49,500 --> 00:10:52,500
also accessible from Windows the

213
00:10:52,500 --> 00:10:55,920
implication is that an administrator

214
00:10:55,920 --> 00:10:59,100
that has read write privileges of course

215
00:10:59,100 --> 00:11:02,820
on all the file system can read those

216
00:11:02,820 --> 00:11:07,680
five and can even write and uh his own

217
00:11:07,680 --> 00:11:12,060
software the software PLC files or a

218
00:11:12,060 --> 00:11:15,540
Crypts of the PSC files or change the

219
00:11:15,540 --> 00:11:20,160
grub and the hypervisor binaries

220
00:11:20,160 --> 00:11:22,640
now that we had access to the

221
00:11:22,640 --> 00:11:25,620
hypervisor's boundaries we searched for

222
00:11:25,620 --> 00:11:29,339
the part in the hypervisor the clothes

223
00:11:29,339 --> 00:11:32,040
the plain text

224
00:11:32,040 --> 00:11:36,480
binary of the poc2 memory

225
00:11:36,480 --> 00:11:40,200
so we did it by reverse engineering the

226
00:11:40,200 --> 00:11:42,899
hypervisor binary specifically the

227
00:11:42,899 --> 00:11:46,160
second stage of the hypervisor

228
00:11:46,160 --> 00:11:49,680
now looking at the binaries we found out

229
00:11:49,680 --> 00:11:52,560
that hypervisor is looking for a

230
00:11:52,560 --> 00:11:55,560
specific magic at the beginning of the

231
00:11:55,560 --> 00:12:00,000
uh encrypted the software CPU file which

232
00:12:00,000 --> 00:12:01,980
is the S3 Magic

233
00:12:01,980 --> 00:12:05,459
now we tampered with this magic and got

234
00:12:05,459 --> 00:12:08,700
an error message that said that the POC

235
00:12:08,700 --> 00:12:12,420
failed to load the its firmware

236
00:12:12,420 --> 00:12:15,600
looking at the binaries we found this

237
00:12:15,600 --> 00:12:20,040
error message and before it we found the

238
00:12:20,040 --> 00:12:23,339
call to the decryption function so we

239
00:12:23,339 --> 00:12:25,680
now have the part in the code that calls

240
00:12:25,680 --> 00:12:28,920
the the equipment function the decrypts

241
00:12:28,920 --> 00:12:33,319
the PLC firmware in memory

242
00:12:33,660 --> 00:12:36,899
now once we go to the decryption

243
00:12:36,899 --> 00:12:39,959
function we started to try and reverse

244
00:12:39,959 --> 00:12:42,060
engineering and understand what the

245
00:12:42,060 --> 00:12:44,639
decryption function is performing but we

246
00:12:44,639 --> 00:12:46,079
found that the code is very

247
00:12:46,079 --> 00:12:49,139
sophisticated and we understood that

248
00:12:49,139 --> 00:12:52,260
static code analysis is not enough to uh

249
00:12:52,260 --> 00:12:55,019
reverse the decryption we needed a

250
00:12:55,019 --> 00:12:57,480
dynamic code analysis namely we needed a

251
00:12:57,480 --> 00:13:00,480
debugger now consider that the PLC is

252
00:13:00,480 --> 00:13:02,880
running in a hardened restricted

253
00:13:02,880 --> 00:13:05,220
environment Siemens removed some of the

254
00:13:05,220 --> 00:13:08,519
functionality from the hypervisor

255
00:13:08,519 --> 00:13:10,920
so we could not install our own debugger

256
00:13:10,920 --> 00:13:14,220
in the PLC hardened environment

257
00:13:14,220 --> 00:13:18,360
so we came up with our own primitive yet

258
00:13:18,360 --> 00:13:21,779
very effective debugger we simply we

259
00:13:21,779 --> 00:13:24,420
found out that in3 is connected to the

260
00:13:24,420 --> 00:13:27,060
CPU debug interrupt Handler

261
00:13:27,060 --> 00:13:29,399
and this Handler creates a dump of all

262
00:13:29,399 --> 00:13:32,100
the registers and the memory so we

263
00:13:32,100 --> 00:13:35,339
simply inserted in three to places in

264
00:13:35,339 --> 00:13:37,740
the code we wanted to break and examine

265
00:13:37,740 --> 00:13:39,660
the content of the registers and the

266
00:13:39,660 --> 00:13:41,279
memory

267
00:13:41,279 --> 00:13:44,639
using our N3 debugger we found the

268
00:13:44,639 --> 00:13:46,680
runtime call to the decryption function

269
00:13:46,680 --> 00:13:49,500
its argument in the local variability

270
00:13:49,500 --> 00:13:52,139
allocates on stack

271
00:13:52,139 --> 00:13:54,540
the arguments in the local variable

272
00:13:54,540 --> 00:13:58,200
includes pointer to the ciphertext and

273
00:13:58,200 --> 00:14:01,079
the clear text of the CPU elf and we

274
00:14:01,079 --> 00:14:05,279
could see the contents of the the memory

275
00:14:05,279 --> 00:14:09,420
pointed by the spontaneous in memory

276
00:14:09,420 --> 00:14:13,260
so this was a very frustrating stage in

277
00:14:13,260 --> 00:14:16,200
the research for us we had the

278
00:14:16,200 --> 00:14:18,600
plaintiffs of the firmware in memory but

279
00:14:18,600 --> 00:14:21,420
we could not export it from the POC to

280
00:14:21,420 --> 00:14:24,480
analyze it it's like we found ourselves

281
00:14:24,480 --> 00:14:27,300
in front of a locked wall in a secure

282
00:14:27,300 --> 00:14:30,420
room with cctvs and motion detectors all

283
00:14:30,420 --> 00:14:33,540
over the place and all we had is a tiny

284
00:14:33,540 --> 00:14:38,040
screwdriver namely our N3 debugger

285
00:14:38,040 --> 00:14:41,220
we knew that with enough effort in time

286
00:14:41,220 --> 00:14:44,519
we could lock the standard the the vault

287
00:14:44,519 --> 00:14:46,560
in the standard common way

288
00:14:46,560 --> 00:14:49,260
but we decided to think out of the box

289
00:14:49,260 --> 00:14:51,899
go completely nuts and who knows we

290
00:14:51,899 --> 00:14:54,120
might get lucky and it will simply work

291
00:14:54,120 --> 00:14:58,199
over or even turn out to be much easier

292
00:14:58,199 --> 00:15:02,399
so here's what we've done

293
00:15:02,399 --> 00:15:04,320
excuse me for a moment

294
00:15:04,320 --> 00:15:07,040
okay

295
00:15:13,139 --> 00:15:17,699
okay taking a frustration to innovation

296
00:15:17,699 --> 00:15:20,240
you ready

297
00:15:21,120 --> 00:15:23,779
I'm ready

298
00:15:46,880 --> 00:15:50,220
hey can we successfully moved the ball

299
00:15:50,220 --> 00:15:53,639
from the TLC restricted environment to

300
00:15:53,639 --> 00:15:55,800
our own powerful attack environment

301
00:15:55,800 --> 00:15:59,519
which is based on Linux but the vault is

302
00:15:59,519 --> 00:16:02,880
still up so I give you a loan I have to

303
00:16:02,880 --> 00:16:04,560
rock

304
00:16:04,560 --> 00:16:07,459
thank you sir

305
00:16:16,740 --> 00:16:22,199
so our idea was to run the vmm

306
00:16:22,199 --> 00:16:25,500
or parts of it in an environment that is

307
00:16:25,500 --> 00:16:28,560
easier to debug that allows us to

308
00:16:28,560 --> 00:16:32,279
produce output and mainly that allows us

309
00:16:32,279 --> 00:16:35,339
to export the plain text binary from the

310
00:16:35,339 --> 00:16:36,480
vmm

311
00:16:36,480 --> 00:16:39,060
we just couldn't do it directly on the

312
00:16:39,060 --> 00:16:41,339
PLC itself

313
00:16:41,339 --> 00:16:45,959
now the vmm is an x86 binary so it may

314
00:16:45,959 --> 00:16:48,540
seem straightforward to run it but there

315
00:16:48,540 --> 00:16:50,519
are several challenges that must be

316
00:16:50,519 --> 00:16:52,079
addressed

317
00:16:52,079 --> 00:16:55,560
first the vmm runs in hypervisor mode

318
00:16:55,560 --> 00:16:59,279
and we wanted to run it in user mode

319
00:16:59,279 --> 00:17:02,820
second the vmm has its own kernel and

320
00:17:02,820 --> 00:17:05,520
libraries while a standard Linux has

321
00:17:05,520 --> 00:17:07,260
libsy

322
00:17:07,260 --> 00:17:09,780
to address these challenges

323
00:17:09,780 --> 00:17:13,260
we use Dynamic binary instrumentation

324
00:17:13,260 --> 00:17:16,439
we used it to start the execution of the

325
00:17:16,439 --> 00:17:19,439
vmm from a specific location

326
00:17:19,439 --> 00:17:23,099
to add our code wherever we wanted and

327
00:17:23,099 --> 00:17:26,160
replace vmm functions with our own

328
00:17:26,160 --> 00:17:28,500
function

329
00:17:28,500 --> 00:17:31,400
we chose Intel pin as our binary

330
00:17:31,400 --> 00:17:34,020
instrumentation tool it is typically

331
00:17:34,020 --> 00:17:36,120
used for performance analysis and

332
00:17:36,120 --> 00:17:39,000
Architectural studies but we used it for

333
00:17:39,000 --> 00:17:44,120
our purposes that is to unlock the vault

334
00:17:45,120 --> 00:17:47,299
foreign

335
00:17:47,299 --> 00:17:49,200
starts to run

336
00:17:49,200 --> 00:17:52,500
it loads the binary of the vmm to the

337
00:17:52,500 --> 00:17:53,400
memory

338
00:17:53,400 --> 00:17:56,520
and replaces the vmm functions with

339
00:17:56,520 --> 00:18:00,059
libsy functions using hooking

340
00:18:00,059 --> 00:18:02,880
we placed another Rook inside where we

341
00:18:02,880 --> 00:18:05,700
identified as the decryption Loop

342
00:18:05,700 --> 00:18:07,679
the decryption Loop takes a block of

343
00:18:07,679 --> 00:18:10,620
ciphertext the crypts and the compresses

344
00:18:10,620 --> 00:18:13,440
it and we added a curve for a function

345
00:18:13,440 --> 00:18:18,320
that exports the plain text to a file

346
00:18:18,840 --> 00:18:22,140
Intel pin starts running the vmm from

347
00:18:22,140 --> 00:18:25,020
the vmm entry point but we don't want to

348
00:18:25,020 --> 00:18:27,360
run the initialization or the first

349
00:18:27,360 --> 00:18:30,539
stages of the vmm we want to go directly

350
00:18:30,539 --> 00:18:32,820
to the decryption

351
00:18:32,820 --> 00:18:36,600
therefore on the first instruction

352
00:18:36,600 --> 00:18:40,080
we use a hook to hijack the control from

353
00:18:40,080 --> 00:18:45,059
the vmm and transfer it to our decrypter

354
00:18:45,059 --> 00:18:47,640
but before we jump to the decryption

355
00:18:47,640 --> 00:18:49,980
entry point we need to prepare the

356
00:18:49,980 --> 00:18:52,080
environment

357
00:18:52,080 --> 00:18:53,880
to work correctly

358
00:18:53,880 --> 00:18:56,700
the function must receive the correct

359
00:18:56,700 --> 00:18:59,280
set of arguments

360
00:18:59,280 --> 00:19:03,360
the second argument RSI is a pointer to

361
00:19:03,360 --> 00:19:06,059
the encrypted software CPU

362
00:19:06,059 --> 00:19:09,120
our seeks points to a buffer that is

363
00:19:09,120 --> 00:19:11,640
used for the plain text

364
00:19:11,640 --> 00:19:15,360
now we also Point RSP to the beginning

365
00:19:15,360 --> 00:19:18,179
of a large buffer we created

366
00:19:18,179 --> 00:19:21,059
and this is interesting because the vmm

367
00:19:21,059 --> 00:19:26,480
actually uses this buffer as a stack

368
00:19:27,900 --> 00:19:30,500
after we prepare the environment

369
00:19:30,500 --> 00:19:34,140
we redirect the control straight to the

370
00:19:34,140 --> 00:19:37,280
decryption entry point

371
00:19:37,620 --> 00:19:40,380
at some point of the execution we may

372
00:19:40,380 --> 00:19:42,900
encounter a call for a vmm function like

373
00:19:42,900 --> 00:19:45,419
vmm Arlo

374
00:19:45,419 --> 00:19:47,220
instead of jumping to the original

375
00:19:47,220 --> 00:19:50,039
function we use the hook we placed

376
00:19:50,039 --> 00:19:53,940
earlier to jump to malloc

377
00:19:53,940 --> 00:19:55,980
eventually

378
00:19:55,980 --> 00:19:59,160
the vmm reaches the decryption Loop that

379
00:19:59,160 --> 00:20:01,799
the crypts and decompresses the software

380
00:20:01,799 --> 00:20:04,740
CPU block by block

381
00:20:04,740 --> 00:20:06,480
for each block

382
00:20:06,480 --> 00:20:10,559
we call the rightf function that writes

383
00:20:10,559 --> 00:20:12,480
the buffer that contains the plain text

384
00:20:12,480 --> 00:20:15,799
to a new file

385
00:20:17,880 --> 00:20:21,360
so with an iteration of the decryption

386
00:20:21,360 --> 00:20:24,299
Loop we write another plain text block

387
00:20:24,299 --> 00:20:28,500
to the file and this is how we build the

388
00:20:28,500 --> 00:20:31,260
decrypted software CPU

389
00:20:31,260 --> 00:20:34,320
at the end of the decryption Loop we

390
00:20:34,320 --> 00:20:37,500
actually get a legal L file and you can

391
00:20:37,500 --> 00:20:39,600
see some of the elf segments in the

392
00:20:39,600 --> 00:20:41,899
slide

393
00:20:44,100 --> 00:20:49,280
now let's see a demo of our decrypter

394
00:20:49,559 --> 00:20:52,440
the vmm directory contains the binary of

395
00:20:52,440 --> 00:20:55,140
the vmm and the encrypted software CPU

396
00:20:55,140 --> 00:20:57,900
we show here the md5 hash of the

397
00:20:57,900 --> 00:21:00,660
software CPU which is equal to the one

398
00:21:00,660 --> 00:21:04,020
on the plc as you can see the software

399
00:21:04,020 --> 00:21:07,200
CPU is encrypted and it begins with the

400
00:21:07,200 --> 00:21:08,700
S3 Magic

401
00:21:08,700 --> 00:21:12,419
run stars decryptor that runs the vmm

402
00:21:12,419 --> 00:21:15,299
with our modifications and the output

403
00:21:15,299 --> 00:21:17,880
comes from the decryption Loop so

404
00:21:17,880 --> 00:21:20,640
at the end we get a segmentation form

405
00:21:20,640 --> 00:21:23,700
but we just don't care because we ran

406
00:21:23,700 --> 00:21:25,679
the vmm long enough to get the plain

407
00:21:25,679 --> 00:21:26,880
text

408
00:21:26,880 --> 00:21:29,820
the decrypted software CPU is delivered

409
00:21:29,820 --> 00:21:32,880
in output.bin as you can see it begins

410
00:21:32,880 --> 00:21:36,120
with the Elf Magic and riddle shows that

411
00:21:36,120 --> 00:21:39,179
we actually managed to parse it

412
00:21:39,179 --> 00:21:43,740
now check this out we've just run a PLC

413
00:21:43,740 --> 00:21:46,740
binary on an Ubuntu machine which

414
00:21:46,740 --> 00:21:49,080
doesn't even sound possible

415
00:21:49,080 --> 00:21:51,419
and still we got the decrypted software

416
00:21:51,419 --> 00:21:53,100
CPU

417
00:21:53,100 --> 00:21:56,039
therefore it is crystal clear that the

418
00:21:56,039 --> 00:22:00,000
decryption key is hard coded

419
00:22:00,000 --> 00:22:02,520
now back to you server for the rest of

420
00:22:02,520 --> 00:22:04,820
the talk

421
00:22:09,539 --> 00:22:11,900
thank you

422
00:22:11,900 --> 00:22:17,100
so our Quest ended the key was to film a

423
00:22:17,100 --> 00:22:19,860
last line of defense and since it was

424
00:22:19,860 --> 00:22:22,140
literally glued to the Vault when we

425
00:22:22,140 --> 00:22:26,039
open it uh when we took it we opened it

426
00:22:26,039 --> 00:22:29,419
and exposed the firmware

427
00:22:33,299 --> 00:22:37,639
that's we got the plain text firmware

428
00:22:37,679 --> 00:22:40,860
initial analysis of the software showed

429
00:22:40,860 --> 00:22:44,159
that it contained much more from what is

430
00:22:44,159 --> 00:22:46,919
required to operate the software CPU in

431
00:22:46,919 --> 00:22:50,700
80 2000 test 200 SP

432
00:22:50,700 --> 00:22:54,059
in addition to the peers software to PLC

433
00:22:54,059 --> 00:22:56,940
software it contained full Libs

434
00:22:56,940 --> 00:23:00,179
implementation openssl library and even

435
00:23:00,179 --> 00:23:04,080
binary encoded in maps Isa

436
00:23:04,080 --> 00:23:07,440
moreover it contains strings that we

437
00:23:07,440 --> 00:23:09,179
were familiar with from previous

438
00:23:09,179 --> 00:23:12,960
research from unrelated parts of other

439
00:23:12,960 --> 00:23:18,799
software of other Hardware based S7 plc

440
00:23:19,340 --> 00:23:23,460
so the the good intention of reducing

441
00:23:23,460 --> 00:23:27,419
the PLC attacks survey failed because we

442
00:23:27,419 --> 00:23:30,720
found out that a huge code base is

443
00:23:30,720 --> 00:23:34,159
carried from previous models of the S7

444
00:23:34,159 --> 00:23:39,120
plcs into this software PLC hence the

445
00:23:39,120 --> 00:23:42,299
the attack surface is indeed increased

446
00:23:42,299 --> 00:23:45,600
and not decreased now note although it's

447
00:23:45,600 --> 00:23:48,780
a different model it's a software plc

448
00:23:48,780 --> 00:23:53,520
99 of the et200s Picard is shared with

449
00:23:53,520 --> 00:23:57,840
the rest of the S7 1500 plcs including

450
00:23:57,840 --> 00:24:01,639
the hardware-based plc

451
00:24:01,919 --> 00:24:05,580
now what could Siemens have done to

452
00:24:05,580 --> 00:24:08,400
prevent us from successfully decrypting

453
00:24:08,400 --> 00:24:10,440
the the firmware

454
00:24:10,440 --> 00:24:13,080
if they would have separated the key

455
00:24:13,080 --> 00:24:15,659
from the vmn binaries

456
00:24:15,659 --> 00:24:18,720
we could we would not have been able to

457
00:24:18,720 --> 00:24:21,120
use Intel pin to decrypt the software

458
00:24:21,120 --> 00:24:22,860
CPU

459
00:24:22,860 --> 00:24:25,919
if they would have used secure boot

460
00:24:25,919 --> 00:24:28,679
we would not have been able to implement

461
00:24:28,679 --> 00:24:30,659
her in 3D bugger

462
00:24:30,659 --> 00:24:32,640
if they would have encrypted the

463
00:24:32,640 --> 00:24:35,460
hypervisor binaries we would not have

464
00:24:35,460 --> 00:24:40,380
been able to reverse engineering them

465
00:24:40,380 --> 00:24:42,059
and again

466
00:24:42,059 --> 00:24:44,700
if they would have implemented secure

467
00:24:44,700 --> 00:24:47,760
boot we would not have been able to run

468
00:24:47,760 --> 00:24:51,240
another operating system namely Ubuntu

469
00:24:51,240 --> 00:24:54,740
under PLC Hardware

470
00:24:56,520 --> 00:25:00,020
but Siemens

471
00:25:01,020 --> 00:25:04,140
didn't deploy any of these preventive

472
00:25:04,140 --> 00:25:08,400
measures in the ET 200 SP secure boot is

473
00:25:08,400 --> 00:25:11,640
not implemented the Intel atom TPM is

474
00:25:11,640 --> 00:25:14,760
not used and the vmm binaries are not

475
00:25:14,760 --> 00:25:17,100
encrypted

476
00:25:17,100 --> 00:25:19,440
to summarize these are the basic

477
00:25:19,440 --> 00:25:21,780
mitigation that we would like to see in

478
00:25:21,780 --> 00:25:25,440
a secure POC the key must be separated

479
00:25:25,440 --> 00:25:28,799
from the code preferably stored in a

480
00:25:28,799 --> 00:25:31,440
hardware model for example CPM

481
00:25:31,440 --> 00:25:34,020
secure boot must be implemented to

482
00:25:34,020 --> 00:25:36,840
prevent system manipulation the file

483
00:25:36,840 --> 00:25:39,000
system must be encrypted to prevent

484
00:25:39,000 --> 00:25:42,240
static code analysis but as I said none

485
00:25:42,240 --> 00:25:45,059
of these mitigation were implemented in

486
00:25:45,059 --> 00:25:46,740
a

487
00:25:46,740 --> 00:25:49,880
et200 SP

488
00:25:49,880 --> 00:25:53,520
Simmons confirmed graph finding

489
00:25:53,520 --> 00:25:56,520
and they were interested in possible

490
00:25:56,520 --> 00:25:57,500
customer

491
00:25:57,500 --> 00:26:01,620
impact the truth is the customer impact

492
00:26:01,620 --> 00:26:04,919
of this attack is severe the PLC

493
00:26:04,919 --> 00:26:07,799
firmware leakage exposes the full

494
00:26:07,799 --> 00:26:10,440
somatic S7 product line since we found

495
00:26:10,440 --> 00:26:14,159
out that the code base is shared so via

496
00:26:14,159 --> 00:26:17,039
exploitation of non-vulnerabilities the

497
00:26:17,039 --> 00:26:20,340
house is based PLC can be attacked and

498
00:26:20,340 --> 00:26:22,679
the horses may have already left the

499
00:26:22,679 --> 00:26:23,940
stable

500
00:26:23,940 --> 00:26:26,580
a recent finding which is not part of

501
00:26:26,580 --> 00:26:28,860
this research and it's part of a

502
00:26:28,860 --> 00:26:32,039
different publication we found out that

503
00:26:32,039 --> 00:26:34,260
an attacker who gains admin rights on

504
00:26:34,260 --> 00:26:37,679
the Windows VM can replace the PLC

505
00:26:37,679 --> 00:26:40,919
firmware with its own crafted Rogue POC

506
00:26:40,919 --> 00:26:42,960
firmware

507
00:26:42,960 --> 00:26:45,840
and this means that an attacker that

508
00:26:45,840 --> 00:26:48,900
gains control over the windows VM which

509
00:26:48,900 --> 00:26:51,600
has a huge attack surface since it's

510
00:26:51,600 --> 00:26:54,000
communicate with the upper layers and

511
00:26:54,000 --> 00:26:55,860
maybe with the cloud

512
00:26:55,860 --> 00:27:00,360
can run his own probe PLC firmware

513
00:27:00,360 --> 00:27:03,059
we shared the full details with Siemens

514
00:27:03,059 --> 00:27:07,039
before the talk

515
00:27:08,460 --> 00:27:13,740
now to summarize as of 2019 semen had a

516
00:27:13,740 --> 00:27:18,360
31 of the PLC market share those plcs

517
00:27:18,360 --> 00:27:21,000
are deployed in critical places like

518
00:27:21,000 --> 00:27:23,760
power plants water facilities from

519
00:27:23,760 --> 00:27:28,080
spaces system and even nuclear reactors

520
00:27:28,080 --> 00:27:31,980
the female leakage exposes the full

521
00:27:31,980 --> 00:27:35,520
S7 somatic product line to known

522
00:27:35,520 --> 00:27:37,559
unpatched vulnerability

523
00:27:37,559 --> 00:27:40,380
and this is a design flow there's no

524
00:27:40,380 --> 00:27:42,840
easy solution it's not like you your

525
00:27:42,840 --> 00:27:44,880
distributed Siemens will distribute the

526
00:27:44,880 --> 00:27:47,279
patch and it is immediately fixed the

527
00:27:47,279 --> 00:27:50,240
the solution is operationally much more

528
00:27:50,240 --> 00:27:53,159
uh sophisticated

529
00:27:53,159 --> 00:27:55,740
I would like to use this opportunity on

530
00:27:55,740 --> 00:27:59,279
this stage to send two messages

531
00:27:59,279 --> 00:28:02,460
the first message this is the to the

532
00:28:02,460 --> 00:28:03,600
community

533
00:28:03,600 --> 00:28:06,659
we suspect that Simmons is not the only

534
00:28:06,659 --> 00:28:09,900
ICS vendors that has problems securing

535
00:28:09,900 --> 00:28:12,900
this new POC architecture we didn't

536
00:28:12,900 --> 00:28:15,840
check other uh vendors

537
00:28:15,840 --> 00:28:19,020
but the reason to our suspicion is that

538
00:28:19,020 --> 00:28:21,240
secure binding to hardware and

539
00:28:21,240 --> 00:28:23,640
large-scale Key Management are tough

540
00:28:23,640 --> 00:28:25,799
operational problems

541
00:28:25,799 --> 00:28:29,100
so I challenge you all Academy standard

542
00:28:29,100 --> 00:28:32,460
bodies security and ICS vendors to look

543
00:28:32,460 --> 00:28:35,340
for a solution to this problem this is

544
00:28:35,340 --> 00:28:38,460
especially important now since ICS

545
00:28:38,460 --> 00:28:40,740
architecture are currently shifting from

546
00:28:40,740 --> 00:28:44,159
wall Garden to open Cloud oriented

547
00:28:44,159 --> 00:28:47,159
environments

548
00:28:47,880 --> 00:28:50,820
another message I want to stand to send

549
00:28:50,820 --> 00:28:54,960
from this stage is to the ICS customs of

550
00:28:54,960 --> 00:28:58,380
all ICS vendors I'm addressing you

551
00:28:58,380 --> 00:29:01,620
you're the asset owners you will suffer

552
00:29:01,620 --> 00:29:04,679
from the impact as long as you will not

553
00:29:04,679 --> 00:29:07,980
clear make clear specific specific

554
00:29:07,980 --> 00:29:10,860
requirements you will continue to get

555
00:29:10,860 --> 00:29:12,840
security mechanism that the vendor

556
00:29:12,840 --> 00:29:14,880
chooses to implement which is not

557
00:29:14,880 --> 00:29:18,779
necessarily the ones that you need

558
00:29:18,779 --> 00:29:21,480
and thank you all for your time and your

559
00:29:21,480 --> 00:29:23,779
attention

