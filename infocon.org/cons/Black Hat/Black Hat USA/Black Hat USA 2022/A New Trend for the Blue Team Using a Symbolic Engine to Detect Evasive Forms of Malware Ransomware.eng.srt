1
00:00:01,920 --> 00:00:04,920
foreign

2
00:00:10,340 --> 00:00:13,259
everyone I'm Morris from Texas one

3
00:00:13,259 --> 00:00:15,780
networks and welcome to Lake section in

4
00:00:15,780 --> 00:00:17,460
this session we will talk about how we

5
00:00:17,460 --> 00:00:19,260
have come up with a new practical

6
00:00:19,260 --> 00:00:21,720
approach to a price and balancing to

7
00:00:21,720 --> 00:00:23,820
effectively deter the various malicious

8
00:00:23,820 --> 00:00:26,939
behavior and ransomware the engine we

9
00:00:26,939 --> 00:00:28,980
provide later can overcome some of the

10
00:00:28,980 --> 00:00:31,199
current bottlenecks of static and

11
00:00:31,199 --> 00:00:34,500
dynamic analyzes and this is also what

12
00:00:34,500 --> 00:00:37,620
we think this is a new channel for

13
00:00:37,620 --> 00:00:39,960
future routine

14
00:00:39,960 --> 00:00:43,440
and I'm Mars I'm currently the manager

15
00:00:43,440 --> 00:00:46,140
of ts1 products Computing I'm sorry

16
00:00:46,140 --> 00:00:48,719
research in the past I often give speech

17
00:00:48,719 --> 00:00:51,059
at a major service conferences including

18
00:00:51,059 --> 00:00:53,460
Brad had your Defcon or circumference

19
00:00:53,460 --> 00:00:57,180
but this is the first time with our team

20
00:00:57,180 --> 00:01:00,000
have shared on the high USA stage we are

21
00:01:00,000 --> 00:01:02,460
very honored and my colleagues and how

22
00:01:02,460 --> 00:01:05,220
is a researcher of tx1 networks in the

23
00:01:05,220 --> 00:01:07,439
prison here and also offering people

24
00:01:07,439 --> 00:01:09,119
could make many cyber security

25
00:01:09,119 --> 00:01:10,979
conference including Bradley also

26
00:01:10,979 --> 00:01:13,560
know.com he com he also focused on

27
00:01:13,560 --> 00:01:15,479
Windows attack techniques and research

28
00:01:15,479 --> 00:01:18,840
so is the author of the best-selling

29
00:01:18,840 --> 00:01:21,119
book Windows ipt Warfare in Taiwan

30
00:01:21,119 --> 00:01:23,280
unless one is hanged he's also

31
00:01:23,280 --> 00:01:25,020
Australian researcher and it takes one

32
00:01:25,020 --> 00:01:27,600
networks is a CTF player and they're

33
00:01:27,600 --> 00:01:30,060
both focus on lamel way

34
00:01:30,060 --> 00:01:33,060
um research and Windows security

35
00:01:33,060 --> 00:01:35,880
and in today's online we will start the

36
00:01:35,880 --> 00:01:38,220
newly sustainless Gap and discuss the

37
00:01:38,220 --> 00:01:41,060
current limitation of static and dynamic

38
00:01:41,060 --> 00:01:44,100
deductions next we will sure why we use

39
00:01:44,100 --> 00:01:45,960
symbolic execution

40
00:01:45,960 --> 00:01:48,900
where our idea comes from and where what

41
00:01:48,900 --> 00:01:51,479
functions our engine provides and

42
00:01:51,479 --> 00:01:54,060
finally verify so real world mail wave

43
00:01:54,060 --> 00:01:56,340
samples and we will use techniques

44
00:01:56,340 --> 00:01:58,439
commonly used by the ransomware as the

45
00:01:58,439 --> 00:02:02,159
sample such as crc32 dot they are ready

46
00:02:02,159 --> 00:02:04,560
loader and process hollowing and tax

47
00:02:04,560 --> 00:02:07,500
refers thousands of ransomware as a base

48
00:02:07,500 --> 00:02:10,139
and finally raise our tool to allow The

49
00:02:10,139 --> 00:02:12,239
Blue Team to operate in a more Community

50
00:02:12,239 --> 00:02:13,800
Way

51
00:02:13,800 --> 00:02:18,300
I'm pretty review we know there are many

52
00:02:18,300 --> 00:02:21,239
type of male weight and different

53
00:02:21,239 --> 00:02:24,060
malware have different behaviors but

54
00:02:24,060 --> 00:02:25,920
they all have different effects on sale

55
00:02:25,920 --> 00:02:28,140
assistance but recently let's see here

56
00:02:28,140 --> 00:02:31,140
we have noticed that aneurysmware has a

57
00:02:31,140 --> 00:02:34,500
huge impact on virus verticals so we

58
00:02:34,500 --> 00:02:36,540
want to help our defense priority all

59
00:02:36,540 --> 00:02:38,819
protein strongly fast against the

60
00:02:38,819 --> 00:02:40,319
ransomware

61
00:02:40,319 --> 00:02:43,019
we also have noticed and it had a lot of

62
00:02:43,019 --> 00:02:46,440
many emerging children's wears verbs are

63
00:02:46,440 --> 00:02:49,680
taking off such the rugby County and the

64
00:02:49,680 --> 00:02:52,500
population of attacks are at different

65
00:02:52,500 --> 00:02:54,900
time points has gradually increased it

66
00:02:54,900 --> 00:02:57,900
of course what a cry is still the

67
00:02:57,900 --> 00:02:59,819
highest in our observation for the

68
00:02:59,819 --> 00:03:02,459
population has gradually decreased they

69
00:03:02,459 --> 00:03:04,019
did

70
00:03:04,019 --> 00:03:06,840
and also for a lot of the Congress and

71
00:03:06,840 --> 00:03:10,340
where we prepare we prepare our

72
00:03:10,340 --> 00:03:12,959
compassion for those different reasons

73
00:03:12,959 --> 00:03:15,120
where we would like to know what kinds

74
00:03:15,120 --> 00:03:17,220
of behavior and difference of where

75
00:03:17,220 --> 00:03:19,620
Source you can see different ways of

76
00:03:19,620 --> 00:03:21,840
where I may encrypt uh have a language

77
00:03:21,840 --> 00:03:25,140
track to your process persistence

78
00:03:25,140 --> 00:03:28,739
privilege escalation anti recovery and

79
00:03:28,739 --> 00:03:32,519
other behaviors and also let's access us

80
00:03:32,519 --> 00:03:35,640
reveal or like me 2.0 they are very

81
00:03:35,640 --> 00:03:37,920
communicative and encrypt but over

82
00:03:37,920 --> 00:03:39,480
almost over

83
00:03:39,480 --> 00:03:42,480
techniques in learning somewhere but we

84
00:03:42,480 --> 00:03:46,260
know the foreign Behavior

85
00:03:52,920 --> 00:03:55,140
and sitting the previous ransomware is

86
00:03:55,140 --> 00:03:58,560
so complicated and how is it detecting

87
00:03:58,560 --> 00:04:01,379
practice traditional signature basis to

88
00:04:01,379 --> 00:04:03,420
buy sequence list of the year of

89
00:04:03,420 --> 00:04:06,299
assembly extraction and behavior breaks

90
00:04:06,299 --> 00:04:08,400
of heuristic basis through the API Code

91
00:04:08,400 --> 00:04:10,920
system code control photograph or the

92
00:04:10,920 --> 00:04:13,260
most discussed learning base for API

93
00:04:13,260 --> 00:04:16,019
call there are many ways of behaviors

94
00:04:16,019 --> 00:04:18,238
such as the behavior sequence of season

95
00:04:18,238 --> 00:04:20,100
code but they are all face different

96
00:04:20,100 --> 00:04:21,839
problems

97
00:04:21,839 --> 00:04:25,080
and hard limitation or progress will be

98
00:04:25,080 --> 00:04:27,840
incandated for example signature base

99
00:04:27,840 --> 00:04:30,900
will require a very large signature

100
00:04:30,900 --> 00:04:33,780
database and it is difficult

101
00:04:33,780 --> 00:04:36,720
to defeat observocative samples well on

102
00:04:36,720 --> 00:04:38,940
Behavior based often high risk of

103
00:04:38,940 --> 00:04:42,000
dynamic exclusion being bypassed and

104
00:04:42,000 --> 00:04:45,600
it's also takes a lot of times to scan

105
00:04:45,600 --> 00:04:47,880
and the code base also needed to connect

106
00:04:47,880 --> 00:04:50,960
the internet in real time even

107
00:04:50,960 --> 00:04:53,940
recently popular learning base well

108
00:04:53,940 --> 00:04:55,800
encounter the problem of unable to

109
00:04:55,800 --> 00:04:58,500
determine variance the veterans and due

110
00:04:58,500 --> 00:05:01,020
to the limitation of learning samples so

111
00:05:01,020 --> 00:05:02,360
there are different

112
00:05:02,360 --> 00:05:04,680
problems for difficult problems for

113
00:05:04,680 --> 00:05:07,080
malware and Detachment so to show up

114
00:05:07,080 --> 00:05:09,240
whether it's that it is static or

115
00:05:09,240 --> 00:05:12,120
dynamic energy analysis Dynamic time

116
00:05:12,120 --> 00:05:14,940
consuming scanning the need to update

117
00:05:14,940 --> 00:05:17,639
signature in availability to identify

118
00:05:17,639 --> 00:05:20,820
variants and observocated samples and

119
00:05:20,820 --> 00:05:23,880
other incredible problems are the point

120
00:05:23,880 --> 00:05:27,180
we want to solve as a one kind and we

121
00:05:27,180 --> 00:05:29,280
also try to not only judge us at least

122
00:05:29,280 --> 00:05:33,360
as malicious more inside in the binder

123
00:05:33,360 --> 00:05:35,699
we want to detect it

124
00:05:35,699 --> 00:05:38,759
so let us trade our math hat and view

125
00:05:38,759 --> 00:05:41,100
our detached engines to the concept of

126
00:05:41,100 --> 00:05:44,280
symbolic solution first in our approach

127
00:05:44,280 --> 00:05:47,400
there are three previous study left in

128
00:05:47,400 --> 00:05:49,199
spiders many things for later

129
00:05:49,199 --> 00:05:51,960
contributionally provides many ideas to

130
00:05:51,960 --> 00:05:56,280
view our and complete our research

131
00:05:56,280 --> 00:05:59,580
so first in 2005 it's a lightweight to

132
00:05:59,580 --> 00:06:01,380
lower the template Based on data

133
00:06:01,380 --> 00:06:04,199
reference relationship was promoted and

134
00:06:04,199 --> 00:06:06,240
which was very uh was very normal

135
00:06:06,240 --> 00:06:08,820
concept and late time but unfortunately

136
00:06:08,820 --> 00:06:12,180
the research did not release any QR that

137
00:06:12,180 --> 00:06:14,220
can be used for routine

138
00:06:14,220 --> 00:06:17,100
and the concept proposed that like China

139
00:06:17,100 --> 00:06:19,440
cannot be used to solve the problem of

140
00:06:19,440 --> 00:06:23,280
observating the sample in my way

141
00:06:23,280 --> 00:06:26,880
at the large the start in 2018 the

142
00:06:26,880 --> 00:06:28,800
researcher used a hidden Markov model to

143
00:06:28,800 --> 00:06:30,960
identify the problem of observocation

144
00:06:30,960 --> 00:06:35,460
posts but it is a layered out to field

145
00:06:35,460 --> 00:06:38,639
parameters it cannot be an analysis

146
00:06:38,639 --> 00:06:42,780
analysis and not our API parameter have

147
00:06:42,780 --> 00:06:45,780
Management number use as feature so

148
00:06:45,780 --> 00:06:47,940
layer sounds let's do some limitations

149
00:06:47,940 --> 00:06:50,100
for laser research

150
00:06:50,100 --> 00:06:53,819
and back and and the last one is in 2019

151
00:06:53,819 --> 00:06:57,000
is sm2 vac is a learning instruction

152
00:06:57,000 --> 00:06:59,280
label semantics through the neutral

153
00:06:59,280 --> 00:07:01,560
Network approach which can detect a

154
00:07:01,560 --> 00:07:03,960
variant variant to send posts at a

155
00:07:03,960 --> 00:07:06,419
semantic level but unfortunately at

156
00:07:06,419 --> 00:07:06,979
least

157
00:07:06,979 --> 00:07:10,319
the ability to expand why it is

158
00:07:10,319 --> 00:07:12,840
recognized as a variant and more sort of

159
00:07:12,840 --> 00:07:14,100
at least research more suitable for

160
00:07:14,100 --> 00:07:16,080
local classification

161
00:07:16,080 --> 00:07:18,720
based on those wisdom and lots research

162
00:07:18,720 --> 00:07:22,080
we are also summarized our method based

163
00:07:22,080 --> 00:07:24,720
on mobile analysis engine of symbol

164
00:07:24,720 --> 00:07:27,720
execution it's mathematic bags and solar

165
00:07:27,720 --> 00:07:29,340
reconnection of instruction labels

166
00:07:29,340 --> 00:07:33,000
cemented and the combination of various

167
00:07:33,000 --> 00:07:35,580
various module we can effectively

168
00:07:35,580 --> 00:07:38,340
identify the technique content in Norway

169
00:07:38,340 --> 00:07:39,780
binary

170
00:07:39,780 --> 00:07:42,960
so why we what is symbolic solution why

171
00:07:42,960 --> 00:07:45,599
we choose these as in my exclusion it's

172
00:07:45,599 --> 00:07:48,000
a programming analysis technology in the

173
00:07:48,000 --> 00:07:50,639
field of computer computer science by

174
00:07:50,639 --> 00:07:52,380
using up straight samples instead of

175
00:07:52,380 --> 00:07:55,500
exact values as a program info variable

176
00:07:55,500 --> 00:07:58,560
and the abstract output result of each

177
00:07:58,560 --> 00:08:01,560
path are obtained and the program you

178
00:08:01,560 --> 00:08:03,840
can see the big executed through the

179
00:08:03,840 --> 00:08:08,460
symbols so here we can see the H larger

180
00:08:08,460 --> 00:08:12,300
gauge path is interrogated and set to

181
00:08:12,300 --> 00:08:14,520
the constraint for the analysis through

182
00:08:14,520 --> 00:08:16,020
the symbols

183
00:08:16,020 --> 00:08:18,840
and but we know a simple execution is

184
00:08:18,840 --> 00:08:22,440
very powerful but but for a more wage

185
00:08:22,440 --> 00:08:24,960
the basically malicious behavior is

186
00:08:24,960 --> 00:08:29,220
mostly abuse the API so we only we want

187
00:08:29,220 --> 00:08:31,080
we just focus on the process of get

188
00:08:31,080 --> 00:08:33,479
higher refers from main function to

189
00:08:33,479 --> 00:08:36,659
bring SQ function and its parameters so

190
00:08:36,659 --> 00:08:38,940
the relationship between apis and

191
00:08:38,940 --> 00:08:41,039
parameters we can use the instruction

192
00:08:41,039 --> 00:08:44,940
label based semantic hierarchic and help

193
00:08:44,940 --> 00:08:48,420
us evaluate various behaviors it's very

194
00:08:48,420 --> 00:08:51,300
useful and we will into this later

195
00:08:51,300 --> 00:08:54,180
and when we use symbol execution we

196
00:08:54,180 --> 00:08:56,580
focus on use lightweight and lightweight

197
00:08:56,580 --> 00:08:59,760
path diffuse relationship and that is a

198
00:08:59,760 --> 00:09:01,980
resolution of association between

199
00:09:01,980 --> 00:09:04,800
perimeter functions and which is enough

200
00:09:04,800 --> 00:09:08,279
to solve the problem of mobile analysis

201
00:09:08,279 --> 00:09:11,880
and the risk of rural static analysis is

202
00:09:11,880 --> 00:09:15,120
low and there are there is no risk of

203
00:09:15,120 --> 00:09:18,000
being bypassed by molability

204
00:09:18,000 --> 00:09:20,880
and based on the cement take analysis

205
00:09:20,880 --> 00:09:22,160
first

206
00:09:22,160 --> 00:09:25,860
positive are very very low so a little

207
00:09:25,860 --> 00:09:28,700
over offline

208
00:09:28,700 --> 00:09:31,200
feasible they are very feasible we can

209
00:09:31,200 --> 00:09:33,959
use and lay one less why we choose some

210
00:09:33,959 --> 00:09:36,480
execution

211
00:09:36,480 --> 00:09:38,940
and for our engine for our particle

212
00:09:38,940 --> 00:09:41,399
symbolic engines there are five modules

213
00:09:41,399 --> 00:09:43,200
and I connect you in series to provide

214
00:09:43,200 --> 00:09:45,779
function like for control Focus function

215
00:09:45,779 --> 00:09:48,300
control Focus module is responsible for

216
00:09:48,300 --> 00:09:50,820
processing the parsing out each control

217
00:09:50,820 --> 00:09:53,880
for uh code block the 10 and the

218
00:09:53,880 --> 00:09:55,800
analysis margin is responsible for

219
00:09:55,800 --> 00:09:58,740
connecting the relationship of each

220
00:09:58,740 --> 00:10:01,680
perimeter and functions an observocated

221
00:10:01,680 --> 00:10:04,740
API identified is responsible for what

222
00:10:04,740 --> 00:10:08,220
it is the function of identify a

223
00:10:08,220 --> 00:10:10,920
vacation per functions and a lot of

224
00:10:10,920 --> 00:10:13,920
modules is responsible for um simulation

225
00:10:13,920 --> 00:10:17,459
and the compiler they can decompiles the

226
00:10:17,459 --> 00:10:20,700
base through such loads engine we can we

227
00:10:20,700 --> 00:10:23,100
will write each character uh let's try

228
00:10:23,100 --> 00:10:25,800
the symbolic uh semantic signature as a

229
00:10:25,800 --> 00:10:28,680
rule and input it into the engine

230
00:10:28,680 --> 00:10:32,100
together with the target to be scanned

231
00:10:32,100 --> 00:10:35,220
the result can be obtained in the very

232
00:10:35,220 --> 00:10:37,680
strong tank and not only to determine

233
00:10:37,680 --> 00:10:40,320
whether it is malicious but also we can

234
00:10:40,320 --> 00:10:43,140
describe describe what kinds of

235
00:10:43,140 --> 00:10:46,140
malicious behavior in a binary English

236
00:10:46,140 --> 00:10:48,779
binary scan England is scanning the

237
00:10:48,779 --> 00:10:51,360
binary based on the rules and we can

238
00:10:51,360 --> 00:10:53,880
have a few seconds from a few seconds to

239
00:10:53,880 --> 00:10:56,760
1. minutes and we can get a result it's

240
00:10:56,760 --> 00:11:00,120
very quickly and static and stable

241
00:11:00,120 --> 00:11:03,540
and the more in detail information about

242
00:11:03,540 --> 00:11:07,140
each module and our our experiment I

243
00:11:07,140 --> 00:11:09,660
will head over to my colleague send how

244
00:11:09,660 --> 00:11:12,060
in person will present it

245
00:11:12,060 --> 00:11:14,279
in all symbolic engine we have a design

246
00:11:14,279 --> 00:11:16,760
control flow graph analyze engine tank

247
00:11:16,760 --> 00:11:19,860
can be used to pass a given function

248
00:11:19,860 --> 00:11:23,220
into code blocks and analyze each simple

249
00:11:23,220 --> 00:11:27,060
instruction one by one in or in call

250
00:11:27,060 --> 00:11:28,260
blocks

251
00:11:28,260 --> 00:11:30,420
and also another 10 design is

252
00:11:30,420 --> 00:11:33,720
tenderizing and tender analyzing each

253
00:11:33,720 --> 00:11:37,560
actually our our engine is designed to

254
00:11:37,560 --> 00:11:41,399
fully simulate statically to analyze the

255
00:11:41,399 --> 00:11:44,579
PE module so each function code will not

256
00:11:44,579 --> 00:11:46,560
be implemented instead will give a

257
00:11:46,560 --> 00:11:49,200
unique value as a return value of each

258
00:11:49,200 --> 00:11:50,279
function

259
00:11:50,279 --> 00:11:53,279
and although uh tender analyzing is very

260
00:11:53,279 --> 00:11:56,279
powerful but actually a lot of while

261
00:11:56,279 --> 00:12:01,019
simple are actually uh is fully fully

262
00:12:01,019 --> 00:12:03,420
strip the symbol and do not have any API

263
00:12:03,420 --> 00:12:06,300
name inside the binary so we need to

264
00:12:06,300 --> 00:12:08,940
conquer the problem that binary do not

265
00:12:08,940 --> 00:12:11,459
have any API and function then inside

266
00:12:11,459 --> 00:12:14,459
the binary so we would like to deal with

267
00:12:14,459 --> 00:12:17,459
this kind of problems with with the

268
00:12:17,459 --> 00:12:19,740
success of entities paper it's possible

269
00:12:19,740 --> 00:12:24,240
to infer the original API name and so if

270
00:12:24,240 --> 00:12:29,760
if we we we meet a an API here and we

271
00:12:29,760 --> 00:12:31,620
can dump in our engine we will dump the

272
00:12:31,620 --> 00:12:34,440
land API and which can be used to

273
00:12:34,440 --> 00:12:37,500
recognize the original API names

274
00:12:37,500 --> 00:12:40,980
and here at first we we created a simple

275
00:12:40,980 --> 00:12:43,680
prototype used to statically analyze the

276
00:12:43,680 --> 00:12:45,959
Prototype uh statically analyze the

277
00:12:45,959 --> 00:12:48,360
program file and check each parameter of

278
00:12:48,360 --> 00:12:51,839
each function and uh we can do a lot of

279
00:12:51,839 --> 00:12:54,959
interesting experiments for example if

280
00:12:54,959 --> 00:12:57,300
we check out the first parameter look

281
00:12:57,300 --> 00:12:59,940
style generically generally write and

282
00:12:59,940 --> 00:13:02,339
the third parameter looks like create Os

283
00:13:02,339 --> 00:13:04,920
or open is it and we can say the syntax

284
00:13:04,920 --> 00:13:06,959
measure form of the Creator file right

285
00:13:06,959 --> 00:13:10,019
so we can say oh it's probably is the

286
00:13:10,019 --> 00:13:13,019
latest instruction is maybe a Creator

287
00:13:13,019 --> 00:13:15,360
file here

288
00:13:15,360 --> 00:13:16,740
and

289
00:13:16,740 --> 00:13:20,760
here so we we use this prototype to scan

290
00:13:20,760 --> 00:13:22,440
all the Flash's sample on a ransomware

291
00:13:22,440 --> 00:13:26,100
where resistance on advice total and we

292
00:13:26,100 --> 00:13:28,320
we see a lot of interesting cash and we

293
00:13:28,320 --> 00:13:30,959
took one of these is revel revel is a

294
00:13:30,959 --> 00:13:33,720
very famous very popular reason well and

295
00:13:33,720 --> 00:13:36,180
uh fully upscured and do not have any

296
00:13:36,180 --> 00:13:38,220
API name inside the binary

297
00:13:38,220 --> 00:13:41,519
and here as we know uh reveal actually

298
00:13:41,519 --> 00:13:43,980
have a function table to record all the

299
00:13:43,980 --> 00:13:46,980
API in it inside the binary only after

300
00:13:46,980 --> 00:13:49,320
dynamically running you will see uh

301
00:13:49,320 --> 00:13:52,139
which Windows API is inside that pointer

302
00:13:52,139 --> 00:13:54,959
and here here's a example here you can

303
00:13:54,959 --> 00:13:58,980
see the pointer is at the 41 27 14. the

304
00:13:58,980 --> 00:14:01,920
point we really don't know which API is

305
00:14:01,920 --> 00:14:05,040
inside the pointer right but here our

306
00:14:05,040 --> 00:14:07,680
engine without running a wrong in the

307
00:14:07,680 --> 00:14:09,899
sample it can detect oh this simple is

308
00:14:09,899 --> 00:14:12,000
just a creative file API here because

309
00:14:12,000 --> 00:14:14,820
the because based on the parameter on

310
00:14:14,820 --> 00:14:16,079
the stake

311
00:14:16,079 --> 00:14:18,779
and we also use the idler Pro to double

312
00:14:18,779 --> 00:14:21,600
check the same point is the same

313
00:14:21,600 --> 00:14:23,940
function Point uh the same function

314
00:14:23,940 --> 00:14:26,639
pointer is left create a file or not so

315
00:14:26,639 --> 00:14:28,320
here you can see on the result either

316
00:14:28,320 --> 00:14:30,600
Pro result you can say oh this pointer

317
00:14:30,600 --> 00:14:33,600
is the return value of this point is got

318
00:14:33,600 --> 00:14:35,820
used on the closed handle so we can say

319
00:14:35,820 --> 00:14:38,639
oh this API just just create a file

320
00:14:38,639 --> 00:14:39,839
right

321
00:14:39,839 --> 00:14:43,139
so uh in in on the result layer we

322
00:14:43,139 --> 00:14:44,880
released on a picture and you can see

323
00:14:44,880 --> 00:14:47,760
our our prototype our prototype can

324
00:14:47,760 --> 00:14:49,920
recognize all the functions that looks

325
00:14:49,920 --> 00:14:51,959
like uh create a file inside a binary

326
00:14:51,959 --> 00:14:55,920
and with the success of experiment we

327
00:14:55,920 --> 00:14:58,500
would like to mix this cool idea into a

328
00:14:58,500 --> 00:15:01,139
powerful analyze engine to help

329
00:15:01,139 --> 00:15:03,600
researchers to deal with this kind of

330
00:15:03,600 --> 00:15:06,360
how to solve application malware to in

331
00:15:06,360 --> 00:15:10,079
the world and our engine T saw tx1 code

332
00:15:10,079 --> 00:15:13,019
semantec analyzer which building a VB

333
00:15:13,019 --> 00:15:16,500
set as a decompiler engine and and any

334
00:15:16,500 --> 00:15:19,260
researcher can fit can give our engine a

335
00:15:19,260 --> 00:15:22,139
program file and the engine will pass

336
00:15:22,139 --> 00:15:26,519
the pass each function of this binary in

337
00:15:26,519 --> 00:15:29,100
a binary and analyze each assembly

338
00:15:29,100 --> 00:15:31,399
instruction one by one of each function

339
00:15:31,399 --> 00:15:34,320
and at the same time you will rule the

340
00:15:34,320 --> 00:15:36,480
corporate function of Euro will receive

341
00:15:36,480 --> 00:15:39,420
an event content the memory stat and

342
00:15:39,420 --> 00:15:41,599
address

343
00:15:43,639 --> 00:15:47,040
so actually your rule can read you can

344
00:15:47,040 --> 00:15:49,560
now tell lots of suspicious API or

345
00:15:49,560 --> 00:15:53,100
memory stats or uh stake or any

346
00:15:53,100 --> 00:15:56,519
suspicious Behavior just in your role to

347
00:15:56,519 --> 00:15:58,680
the following tracing so here's an easy

348
00:15:58,680 --> 00:16:01,199
example here uh here you can see uh we

349
00:16:01,199 --> 00:16:03,540
write a very very simple copy function

350
00:16:03,540 --> 00:16:06,060
here only print out the assembly

351
00:16:06,060 --> 00:16:09,060
instructions during passing and also if

352
00:16:09,060 --> 00:16:11,820
the instructions have API that is a

353
00:16:11,820 --> 00:16:14,040
function code here and this instruction

354
00:16:14,040 --> 00:16:16,800
have the function name and we can print

355
00:16:16,800 --> 00:16:19,680
out the function and also here so so on

356
00:16:19,680 --> 00:16:21,480
the result you can see here we can say

357
00:16:21,480 --> 00:16:23,880
oh this program file try to use the wing

358
00:16:23,880 --> 00:16:27,120
API we execute we can execute the API to

359
00:16:27,120 --> 00:16:30,000
run some kind of exe file or another

360
00:16:30,000 --> 00:16:33,360
besides that we can say uh the rule can

361
00:16:33,360 --> 00:16:35,940
also get the parameter data of each

362
00:16:35,940 --> 00:16:38,519
function code so there's a sample here

363
00:16:38,519 --> 00:16:40,079
you can say oh this program if I try to

364
00:16:40,079 --> 00:16:43,079
use the creative process this API to run

365
00:16:43,079 --> 00:16:45,920
some kind of applicable file like CND

366
00:16:45,920 --> 00:16:48,720
this program try to use Creator file and

367
00:16:48,720 --> 00:16:51,420
create a new CMD file here but before

368
00:16:51,420 --> 00:16:53,579
this Behavior you can see this program

369
00:16:53,579 --> 00:16:56,399
file tried to use the wsa connect to the

370
00:16:56,399 --> 00:16:59,100
remote So based on a little cold

371
00:16:59,100 --> 00:17:00,779
relationship we can say oh this program

372
00:17:00,779 --> 00:17:03,000
file have the ability to do the

373
00:17:03,000 --> 00:17:05,760
reversing reverse reversal

374
00:17:05,760 --> 00:17:10,459
so uh here but still actually

375
00:17:10,459 --> 00:17:13,919
allows our engine is pure statically but

376
00:17:13,919 --> 00:17:16,799
still a lot of API is necessary to be

377
00:17:16,799 --> 00:17:19,439
implemented or the program will not be

378
00:17:19,439 --> 00:17:21,780
run as a process properly for example

379
00:17:21,780 --> 00:17:24,240
like uh as we know like long Library a

380
00:17:24,240 --> 00:17:26,699
get process address and get a full path

381
00:17:26,699 --> 00:17:29,880
then lost API is necessary to to run as

382
00:17:29,880 --> 00:17:33,120
a process right so we we end up t-soft

383
00:17:33,120 --> 00:17:36,600
environment we do the necessary impact

384
00:17:36,600 --> 00:17:39,059
implementing the necessary API inside

385
00:17:39,059 --> 00:17:41,460
our environment

386
00:17:41,460 --> 00:17:44,220
and here so everyone everybody here can

387
00:17:44,220 --> 00:17:46,799
can write our desired Rule and each

388
00:17:46,799 --> 00:17:48,960
teacher row have at least uh three copy

389
00:17:48,960 --> 00:17:50,760
functions is Colbert in your eyes and

390
00:17:50,760 --> 00:17:53,940
clean up and in uh your rule can do the

391
00:17:53,940 --> 00:17:55,679
necessary prepare in the in your eyes

392
00:17:55,679 --> 00:18:00,179
and uh also your rule can receive an

393
00:18:00,179 --> 00:18:03,299
event about uh read assembly instruction

394
00:18:03,299 --> 00:18:06,840
one by one of each function also so so

395
00:18:06,840 --> 00:18:09,539
your role actually can notice those

396
00:18:09,539 --> 00:18:11,940
suspicious behavior all the possible

397
00:18:11,940 --> 00:18:14,340
behavior of each function in the

398
00:18:14,340 --> 00:18:17,520
instruction level and after Tsar engine

399
00:18:17,520 --> 00:18:21,960
analyze all the function and uh the Kobe

400
00:18:21,960 --> 00:18:23,820
function the clean R function of your

401
00:18:23,820 --> 00:18:26,160
rule will receive an event and

402
00:18:26,160 --> 00:18:28,679
Adolescent type the engine will send a

403
00:18:28,679 --> 00:18:31,260
message about Yara Rule and the Kappa

404
00:18:31,260 --> 00:18:34,679
rule second result so your rule can your

405
00:18:34,679 --> 00:18:37,020
draw can make a final decision about

406
00:18:37,020 --> 00:18:38,460
this program

407
00:18:38,460 --> 00:18:42,120
so here we would like to show a lot of

408
00:18:42,120 --> 00:18:44,880
demo here just notable demo about CRC

409
00:18:44,880 --> 00:18:47,460
hashing the reality loader and process

410
00:18:47,460 --> 00:18:50,100
hollowing and resonance encrypted and

411
00:18:50,100 --> 00:18:52,919
lost attack is very widely used very

412
00:18:52,919 --> 00:18:54,900
popular one and very widely used

413
00:18:54,900 --> 00:18:57,059
Wireless ready actor so we would like to

414
00:18:57,059 --> 00:18:59,640
especially we would like to explain how

415
00:18:59,640 --> 00:19:03,240
to use our Tsar engine to detect land so

416
00:19:03,240 --> 00:19:05,460
he started from a very basic example

417
00:19:05,460 --> 00:19:08,460
here like CRC hashing and as we know if

418
00:19:08,460 --> 00:19:11,760
you give a rate of data to a CRC hashing

419
00:19:11,760 --> 00:19:14,460
CRC hash function and you will receive

420
00:19:14,460 --> 00:19:18,360
actually the CRC hash function will uh

421
00:19:18,360 --> 00:19:20,940
will read will take out the data from

422
00:19:20,940 --> 00:19:23,760
the from the array one by one and the

423
00:19:23,760 --> 00:19:26,160
Dual xor Behavior with the magic number

424
00:19:26,160 --> 00:19:30,600
EBD so for to do the magical number 2xo

425
00:19:30,600 --> 00:19:33,660
for eight times so if our rule can see

426
00:19:33,660 --> 00:19:35,760
oh there's the instruction in the binary

427
00:19:35,760 --> 00:19:38,520
try to use the match number EBD to do X

428
00:19:38,520 --> 00:19:41,220
over for some kind of data for a time so

429
00:19:41,220 --> 00:19:43,500
we can make sure oh listen definitely is

430
00:19:43,500 --> 00:19:46,440
a CRC hash and behavior right there so

431
00:19:46,440 --> 00:19:48,240
here's a simple here on the result you

432
00:19:48,240 --> 00:19:50,600
can see oh the teaser engine details

433
00:19:50,600 --> 00:19:54,900
CRTs Behavior just right at LS

434
00:19:54,900 --> 00:19:59,280
the function at 43 CBD and the result of

435
00:19:59,280 --> 00:20:01,620
either Pro you can see here is a really

436
00:20:01,620 --> 00:20:05,340
a CRC calculation here but just we know

437
00:20:05,340 --> 00:20:07,440
that CRC hash is quite very simple right

438
00:20:07,440 --> 00:20:10,620
it's very very simple and obvious to the

439
00:20:10,620 --> 00:20:12,480
test so we would like to introduce

440
00:20:12,480 --> 00:20:14,039
another one is more complex is

441
00:20:14,039 --> 00:20:16,799
referrality loader and uh attacker

442
00:20:16,799 --> 00:20:19,440
usually use reflect loader to do inject

443
00:20:19,440 --> 00:20:22,260
dll as a circle into a remote process

444
00:20:22,260 --> 00:20:27,120
and let's trick to high process so to

445
00:20:27,120 --> 00:20:30,360
highlight malware itself so uh also

446
00:20:30,360 --> 00:20:32,820
reflector loader is highly mutated and

447
00:20:32,820 --> 00:20:34,740
very tricky for the typical patterns

448
00:20:34,740 --> 00:20:37,260
again and here is the three steps design

449
00:20:37,260 --> 00:20:40,200
of the referral loader first is it will

450
00:20:40,200 --> 00:20:43,740
try to try to pass the size of image of

451
00:20:43,740 --> 00:20:46,380
its option optional header in its memory

452
00:20:46,380 --> 00:20:49,140
to make sure how many spares need to be

453
00:20:49,140 --> 00:20:52,440
allocated to to skip to to store the

454
00:20:52,440 --> 00:20:54,840
whole malware Banner into the memory all

455
00:20:54,840 --> 00:20:58,919
also the second step is to uh to pass

456
00:20:58,919 --> 00:21:00,980
the data dictionary of its optional

457
00:21:00,980 --> 00:21:04,140
optional header to make sure uh to fix

458
00:21:04,140 --> 00:21:07,559
up the pointer table for the malway to

459
00:21:07,559 --> 00:21:10,020
cancel a function pointer address and

460
00:21:10,020 --> 00:21:12,539
the final step is to pass the address of

461
00:21:12,539 --> 00:21:15,780
entry point of each optional header to

462
00:21:15,780 --> 00:21:18,840
locate the address the entry function of

463
00:21:18,840 --> 00:21:21,720
the malware to waking up the Mali binary

464
00:21:21,720 --> 00:21:24,840
so one stronger let's design and let's

465
00:21:24,840 --> 00:21:26,820
refresh the loader here just three-step

466
00:21:26,820 --> 00:21:27,720
design

467
00:21:27,720 --> 00:21:30,179
and here once we know the design of the

468
00:21:30,179 --> 00:21:32,520
reference loader so we can write a Tsar

469
00:21:32,520 --> 00:21:35,580
engine rule Pizza rule to detect layers

470
00:21:35,580 --> 00:21:38,100
the reflected loader behavior in in this

471
00:21:38,100 --> 00:21:41,039
kind of been in a binary or not so for

472
00:21:41,039 --> 00:21:43,679
example here we can we can say oh if we

473
00:21:43,679 --> 00:21:46,260
detect some kind of instruction let us

474
00:21:46,260 --> 00:21:49,020
instruction layer just trying to compare

475
00:21:49,020 --> 00:21:51,299
uh some kind of data with the magical

476
00:21:51,299 --> 00:21:54,419
number PE or and Z we can say oh let's

477
00:21:54,419 --> 00:21:57,000
definitely try to look at the emerging

478
00:21:57,000 --> 00:22:00,900
NTS header structure inside its uh its

479
00:22:00,900 --> 00:22:03,120
memory so we can put this is a special

480
00:22:03,120 --> 00:22:06,900
structure into a watch list and if

481
00:22:06,900 --> 00:22:09,900
in the following code if any any call

482
00:22:09,900 --> 00:22:13,340
following code try to use uh use the

483
00:22:13,340 --> 00:22:15,080
suspended

484
00:22:15,080 --> 00:22:18,120
loads of special code uh in the watch

485
00:22:18,120 --> 00:22:20,820
list like using such as using virtual

486
00:22:20,820 --> 00:22:24,240
locate with the size of image in the

487
00:22:24,240 --> 00:22:25,919
watch list and we can say oh it tried to

488
00:22:25,919 --> 00:22:28,260
mount some kind of modeling binary into

489
00:22:28,260 --> 00:22:31,260
the memory or you try to pass the

490
00:22:31,260 --> 00:22:34,440
imported dictionary of in the watch list

491
00:22:34,440 --> 00:22:37,980
and we can say it tried to fix up its uh

492
00:22:37,980 --> 00:22:41,460
males important adjustable or you try to

493
00:22:41,460 --> 00:22:44,640
pass the address of entry point we can

494
00:22:44,640 --> 00:22:47,640
say oh it tried to waking up to locate

495
00:22:47,640 --> 00:22:50,640
the entry function to waking up by more

496
00:22:50,640 --> 00:22:54,419
binary so once we our reward detect all

497
00:22:54,419 --> 00:22:56,460
the three Behavior at the center in a

498
00:22:56,460 --> 00:22:58,620
function and we can say oh it's surely

499
00:22:58,620 --> 00:23:01,559
it's just a referred loader here

500
00:23:01,559 --> 00:23:04,740
and here we choose a fresh sample on the

501
00:23:04,740 --> 00:23:08,220
uh just on the July and it's on the

502
00:23:08,220 --> 00:23:11,059
vastly sample here at the moment only

503
00:23:11,059 --> 00:23:14,220
Adventure consider rate is a more simple

504
00:23:14,220 --> 00:23:17,340
here but our engine at that moment can

505
00:23:17,340 --> 00:23:19,980
detect oh this is a very exact exactly

506
00:23:19,980 --> 00:23:22,440
which function have the ability to do

507
00:23:22,440 --> 00:23:25,260
the reflex loader So based on the T Cell

508
00:23:25,260 --> 00:23:27,679
based on the T-shirt Road you we can

509
00:23:27,679 --> 00:23:30,900
effectively to solve this type of

510
00:23:30,900 --> 00:23:34,039
problem those highly mutated malware

511
00:23:34,039 --> 00:23:37,260
that is difficult to solve by the

512
00:23:37,260 --> 00:23:39,120
patterns again and we are going to

513
00:23:39,120 --> 00:23:40,740
introduce another one it's more complex

514
00:23:40,740 --> 00:23:43,080
is process holding

515
00:23:43,080 --> 00:23:46,200
and another typical technique you allow

516
00:23:46,200 --> 00:23:47,760
my way to high itself is process

517
00:23:47,760 --> 00:23:49,020
following

518
00:23:49,020 --> 00:23:51,059
um let's attack its practical technique

519
00:23:51,059 --> 00:23:54,120
is widely used by US rather actor so uh

520
00:23:54,120 --> 00:23:58,380
level has collected with number t1055

521
00:23:58,380 --> 00:24:01,679
and also attacker usually use this kind

522
00:24:01,679 --> 00:24:04,860
of attack holding a tag to wrong wrong

523
00:24:04,860 --> 00:24:08,640
and multi-binary inside a B9 process so

524
00:24:08,640 --> 00:24:11,880
uh later it's very difficult for victim

525
00:24:11,880 --> 00:24:13,919
to notice uh they are really under

526
00:24:13,919 --> 00:24:17,280
attack control and usually this whole

527
00:24:17,280 --> 00:24:21,740
example are widely a fully updated and

528
00:24:21,740 --> 00:24:26,159
fully shipped symbols so we will go one

529
00:24:26,159 --> 00:24:29,100
step further to explain how we use Tsar

530
00:24:29,100 --> 00:24:32,640
engine to detect this kind of problem of

531
00:24:32,640 --> 00:24:35,280
obsercation my way

532
00:24:35,280 --> 00:24:38,580
so here's a simple step of the process

533
00:24:38,580 --> 00:24:41,700
holding the first step is attacker will

534
00:24:41,700 --> 00:24:44,580
use create a process to run a process in

535
00:24:44,580 --> 00:24:47,340
the suspended mode and using the get

536
00:24:47,340 --> 00:24:49,559
thread contacts to locate the PB

537
00:24:49,559 --> 00:24:52,320
structure of the new process then once

538
00:24:52,320 --> 00:24:55,620
attacker get control get just get the PB

539
00:24:55,620 --> 00:24:57,740
structure address then attacker can

540
00:24:57,740 --> 00:25:01,679
modify the emerging path of the PV

541
00:25:01,679 --> 00:25:04,799
structure to sweep sweep to switching

542
00:25:04,799 --> 00:25:08,280
the Eman exe module to control exe

543
00:25:08,280 --> 00:25:12,720
module so here evidently

544
00:25:12,720 --> 00:25:16,140
uh how it designer after the download

545
00:25:16,140 --> 00:25:18,780
Behavior an attacker can control the

546
00:25:18,780 --> 00:25:21,360
main exe so here once the binary

547
00:25:21,360 --> 00:25:23,220
processor is waking up and he will

548
00:25:23,220 --> 00:25:25,860
actually he will run a malware binary

549
00:25:25,860 --> 00:25:28,980
instead of the original program file

550
00:25:28,980 --> 00:25:31,559
so once we know how how the process

551
00:25:31,559 --> 00:25:34,799
holder in design as we mentioned uh the

552
00:25:34,799 --> 00:25:37,020
first step of the process following is

553
00:25:37,020 --> 00:25:40,200
using Create a process to create a new

554
00:25:40,200 --> 00:25:42,840
suspended process right so our rule can

555
00:25:42,840 --> 00:25:46,020
have a have a watch list of all the all

556
00:25:46,020 --> 00:25:47,880
the API called look that I create a

557
00:25:47,880 --> 00:25:52,080
process then after Tsar engine analyze

558
00:25:52,080 --> 00:25:55,080
all the function and actually we can

559
00:25:55,080 --> 00:25:58,200
check those suspicious API since like

560
00:25:58,200 --> 00:26:01,320
looks like creative process and here

561
00:26:01,320 --> 00:26:03,419
these are these are reward all these are

562
00:26:03,419 --> 00:26:05,400
engine provides an API tiny simulator

563
00:26:05,400 --> 00:26:10,200
simulation function this API can is able

564
00:26:10,200 --> 00:26:13,620
to let us create a new tiny stimulator

565
00:26:13,620 --> 00:26:16,500
to run from a specific address and fully

566
00:26:16,500 --> 00:26:19,500
simulated the rest of the code and also

567
00:26:19,500 --> 00:26:21,480
provide another API is a look at color

568
00:26:21,480 --> 00:26:25,380
to uh to local entry function of Love of

569
00:26:25,380 --> 00:26:27,539
any function based on a control flow

570
00:26:27,539 --> 00:26:28,679
graph

571
00:26:28,679 --> 00:26:32,640
and here uh once when when those those

572
00:26:32,640 --> 00:26:35,279
simulators are running and actually they

573
00:26:35,279 --> 00:26:37,919
will they will execute the copy function

574
00:26:37,919 --> 00:26:41,039
we assign to land so we can detect uh

575
00:26:41,039 --> 00:26:43,500
layers and less than any kind of

576
00:26:43,500 --> 00:26:45,659
sensitive behavior in the rest of the

577
00:26:45,659 --> 00:26:48,419
code just in the copy function so here

578
00:26:48,419 --> 00:26:51,779
we can do tend to analyze the thread and

579
00:26:51,779 --> 00:26:54,960
the process process hand value with the

580
00:26:54,960 --> 00:26:57,539
dead and the beef metric number and

581
00:26:57,539 --> 00:27:00,539
during the simulation we can check if

582
00:27:00,539 --> 00:27:02,640
there's any code in in the following

583
00:27:02,640 --> 00:27:07,020
code is is any culture to use uh like uh

584
00:27:07,020 --> 00:27:08,940
get us red contacts or red spots in

585
00:27:08,940 --> 00:27:13,260
memory to sway to switching the to to

586
00:27:13,260 --> 00:27:15,539
modify the image base of the PV

587
00:27:15,539 --> 00:27:17,400
structure so we can make sure that is

588
00:27:17,400 --> 00:27:19,740
different definitely is try to do

589
00:27:19,740 --> 00:27:22,260
process holding because he is Con he

590
00:27:22,260 --> 00:27:26,940
tried to control the the main exe module

591
00:27:26,940 --> 00:27:30,720
so here in our experiment we collect uh

592
00:27:30,720 --> 00:27:33,360
we we collect all the sample fresh

593
00:27:33,360 --> 00:27:35,640
sample in this year and they are totally

594
00:27:35,640 --> 00:27:38,880
labeled uh the injection behavior and we

595
00:27:38,880 --> 00:27:40,919
we are really curious about how many of

596
00:27:40,919 --> 00:27:44,039
land are actually uh really typical

597
00:27:44,039 --> 00:27:46,679
process holding Behavior so in totally

598
00:27:46,679 --> 00:27:50,640
we collect uh 233 sample here and up to

599
00:27:50,640 --> 00:27:53,039
61 percent of land are actually a

600
00:27:53,039 --> 00:27:55,980
typical process Hollow in Behavior and

601
00:27:55,980 --> 00:27:58,740
the rest of them after we do the

602
00:27:58,740 --> 00:28:01,320
reversing engineering we found out that

603
00:28:01,320 --> 00:28:04,799
is actually a hack tool or reversing

604
00:28:04,799 --> 00:28:07,520
engineer tool or installation package

605
00:28:07,520 --> 00:28:11,100
and now my colleague Hank will go to the

606
00:28:11,100 --> 00:28:13,620
next point is more complex one is to how

607
00:28:13,620 --> 00:28:15,600
to use teaser engine to detect

608
00:28:15,600 --> 00:28:18,659
ransomware included and

609
00:28:18,659 --> 00:28:20,880
yeah okay

610
00:28:20,880 --> 00:28:22,380
um thanks for listening how much

611
00:28:22,380 --> 00:28:25,140
presentation and hello everyone I'm Hank

612
00:28:25,140 --> 00:28:27,299
I'm going to talk about how our Toyota

613
00:28:27,299 --> 00:28:29,520
detect ransomware in order to

614
00:28:29,520 --> 00:28:31,799
successfully determine somewhere we set

615
00:28:31,799 --> 00:28:34,799
up a criteria for resume detection and

616
00:28:34,799 --> 00:28:36,539
we must understand the three common

617
00:28:36,539 --> 00:28:38,940
characteristics of ransomware and

618
00:28:38,940 --> 00:28:41,039
because our criteria is based on this

619
00:28:41,039 --> 00:28:43,320
three common characteristics there are

620
00:28:43,320 --> 00:28:45,840
file in moderation file operation and

621
00:28:45,840 --> 00:28:48,200
file encryption first

622
00:28:48,200 --> 00:28:51,240
these three things happen in sequence so

623
00:28:51,240 --> 00:28:53,400
first ransomware in numerous multiple

624
00:28:53,400 --> 00:28:56,159
files on disk and then file operation is

625
00:28:56,159 --> 00:28:57,980
triggered which means

626
00:28:57,980 --> 00:29:01,140
file handle is created for each files

627
00:29:01,140 --> 00:29:02,460
and

628
00:29:02,460 --> 00:29:05,220
file content for each file is also read

629
00:29:05,220 --> 00:29:07,140
and written

630
00:29:07,140 --> 00:29:09,600
and finally

631
00:29:09,600 --> 00:29:12,980
each file content is encrypted by

632
00:29:12,980 --> 00:29:16,559
resinware and to ensure our detection

633
00:29:16,559 --> 00:29:19,919
log detection is accurately detected

634
00:29:19,919 --> 00:29:21,960
ration somewhere so we also implement

635
00:29:21,960 --> 00:29:25,260
the function chain to help us to filter

636
00:29:25,260 --> 00:29:27,299
out the detected characteristic not

637
00:29:27,299 --> 00:29:29,700
belowing to the ransomware and there are

638
00:29:29,700 --> 00:29:32,940
two function chain we try to detect the

639
00:29:32,940 --> 00:29:35,100
first one is file enumeration to file

640
00:29:35,100 --> 00:29:37,140
encryption and the next one is file

641
00:29:37,140 --> 00:29:39,600
enumeration along with file operation to

642
00:29:39,600 --> 00:29:41,820
file encryption so now you understand

643
00:29:41,820 --> 00:29:44,580
how our criteria and I would like to

644
00:29:44,580 --> 00:29:46,799
show you the implementation of the rule

645
00:29:46,799 --> 00:29:50,520
of these three common characteristics

646
00:29:50,520 --> 00:29:52,559
so here is the first one file

647
00:29:52,559 --> 00:29:55,140
enumeration in file enumeration we try

648
00:29:55,140 --> 00:29:57,840
to identify the strip fireface file and

649
00:29:57,840 --> 00:30:00,419
find next file and then we compare the

650
00:30:00,419 --> 00:30:02,700
return value from the fivers file and

651
00:30:02,700 --> 00:30:05,100
and the first argument of the findings

652
00:30:05,100 --> 00:30:08,100
file and then we can analyze the file

653
00:30:08,100 --> 00:30:10,559
name usage so we can easily record the

654
00:30:10,559 --> 00:30:13,279
file name usage in our detection log so

655
00:30:13,279 --> 00:30:17,159
when some maybe you can see the log to

656
00:30:17,159 --> 00:30:20,640
to um to analyze the how the result will

657
00:30:20,640 --> 00:30:22,740
work and

658
00:30:22,740 --> 00:30:26,539
so uh after we understand the first

659
00:30:26,539 --> 00:30:29,100
characteristic of our tool I would like

660
00:30:29,100 --> 00:30:31,799
to show you the next next one is file

661
00:30:31,799 --> 00:30:34,620
operation and for the file operation we

662
00:30:34,620 --> 00:30:37,080
try to identify the strip create files

663
00:30:37,080 --> 00:30:39,179
and other API related to the file

664
00:30:39,179 --> 00:30:42,120
operations and then analyze the file

665
00:30:42,120 --> 00:30:44,880
handle returned by a query file to help

666
00:30:44,880 --> 00:30:47,100
you understanding the how the rule works

667
00:30:47,100 --> 00:30:48,659
I would like to show you the detection

668
00:30:48,659 --> 00:30:51,740
process in more detail

669
00:30:51,740 --> 00:30:54,899
for example our Tour 10 analyze the file

670
00:30:54,899 --> 00:30:57,240
operation which store the file handle in

671
00:30:57,240 --> 00:30:58,919
the local variable and which is a

672
00:30:58,919 --> 00:31:01,500
mistake and then it is expected that

673
00:31:01,500 --> 00:31:03,899
each file operation load the file handle

674
00:31:03,899 --> 00:31:06,000
from local variable the instruction

675
00:31:06,000 --> 00:31:08,340
highlight with very Bus shows that we

676
00:31:08,340 --> 00:31:09,840
can successfully detect the

677
00:31:09,840 --> 00:31:11,700
characteristic of file operation in

678
00:31:11,700 --> 00:31:13,860
public ransomware and for the third

679
00:31:13,860 --> 00:31:17,159
characteristic file encryption we adopt

680
00:31:17,159 --> 00:31:19,340
the high priest strategy consisting of

681
00:31:19,340 --> 00:31:22,320
obvious casing identification Rule and

682
00:31:22,320 --> 00:31:24,000
the patent-based rule and for the

683
00:31:24,000 --> 00:31:26,580
obfuscating identification rule which is

684
00:31:26,580 --> 00:31:28,580
for identify the strip

685
00:31:28,580 --> 00:31:31,679
critical function of Windows API and the

686
00:31:31,679 --> 00:31:34,200
patent-based rule is for identify the

687
00:31:34,200 --> 00:31:37,200
multiple complex inclusion algorithm so

688
00:31:37,200 --> 00:31:38,399
this is a

689
00:31:38,399 --> 00:31:39,960
the rule for the three common

690
00:31:39,960 --> 00:31:43,320
characteristics in our tool and I'd like

691
00:31:43,320 --> 00:31:46,260
to show you how our detection log is and

692
00:31:46,260 --> 00:31:49,380
to verify our our tool is work we can

693
00:31:49,380 --> 00:31:51,720
review this detection log and we bring

694
00:31:51,720 --> 00:31:54,059
three different ransomware and verify

695
00:31:54,059 --> 00:31:55,679
their log

696
00:31:55,679 --> 00:31:57,840
um and you will see the three common

697
00:31:57,840 --> 00:32:00,480
characteristics in the this in each

698
00:32:00,480 --> 00:32:02,399
detection log and the first one is

699
00:32:02,399 --> 00:32:04,320
Purple Rain somewhere you can see the

700
00:32:04,320 --> 00:32:07,140
file enumeration is detected and we can

701
00:32:07,140 --> 00:32:09,779
compare it with the extension from the

702
00:32:09,779 --> 00:32:12,659
Ida Pro and layers also have made

703
00:32:12,659 --> 00:32:14,360
multiple potential

704
00:32:14,360 --> 00:32:18,179
enumerator files usage in our detection

705
00:32:18,179 --> 00:32:19,020
block

706
00:32:19,020 --> 00:32:21,419
and then it's a file operation we also

707
00:32:21,419 --> 00:32:24,600
record some file handle usage from our

708
00:32:24,600 --> 00:32:27,779
tool and you can also review the this

709
00:32:27,779 --> 00:32:29,760
log to verify

710
00:32:29,760 --> 00:32:33,240
um where is the real file operation

711
00:32:33,240 --> 00:32:34,860
and then the file encryption you can

712
00:32:34,860 --> 00:32:38,039
also do the same things and this is a

713
00:32:38,039 --> 00:32:41,580
whole whole process and we can you can

714
00:32:41,580 --> 00:32:45,000
follow this step to review we can

715
00:32:45,000 --> 00:32:47,520
actually detect the recent word

716
00:32:47,520 --> 00:32:51,179
and so and the following we have another

717
00:32:51,179 --> 00:32:53,279
somewhere is called dark side and

718
00:32:53,279 --> 00:32:55,380
because they are in the same process so

719
00:32:55,380 --> 00:32:58,020
I will go through this very quickly and

720
00:32:58,020 --> 00:33:00,539
in dark side we can easily detect the

721
00:33:00,539 --> 00:33:02,820
file enumeration and file operation and

722
00:33:02,820 --> 00:33:06,059
file encryption and then as for log B we

723
00:33:06,059 --> 00:33:08,159
can do the same things because we didn't

724
00:33:08,159 --> 00:33:11,220
have much time to share this about okay

725
00:33:11,220 --> 00:33:14,460
so enough people can also detect the

726
00:33:14,460 --> 00:33:17,159
file information file operation and file

727
00:33:17,159 --> 00:33:18,600
encryption

728
00:33:18,600 --> 00:33:22,019
and and I would like to show you uh how

729
00:33:22,019 --> 00:33:24,019
we improve our detection rate because

730
00:33:24,019 --> 00:33:27,419
there's lots of encryption algorithms in

731
00:33:27,419 --> 00:33:29,940
the in the um in the real world and

732
00:33:29,940 --> 00:33:32,700
which is not easy to implement this base

733
00:33:32,700 --> 00:33:35,399
and base Rule and for dark side and it

734
00:33:35,399 --> 00:33:37,559
utilize the customized sales at 20 which

735
00:33:37,559 --> 00:33:40,860
has a customized Matrix and we can

736
00:33:40,860 --> 00:33:43,620
detect it because it is not in our

737
00:33:43,620 --> 00:33:46,380
detection existing detection block rule

738
00:33:46,380 --> 00:33:49,140
so we capture the feature from the dark

739
00:33:49,140 --> 00:33:51,960
side and we implement the patent-based

740
00:33:51,960 --> 00:33:53,760
rule to detect it

741
00:33:53,760 --> 00:33:55,980
and another example is about seven

742
00:33:55,980 --> 00:33:57,899
reasons there's two things about

743
00:33:57,899 --> 00:34:00,899
seminarism work and first one is r5a

744
00:34:00,899 --> 00:34:03,899
encryption and this equation is also not

745
00:34:03,899 --> 00:34:06,299
in our existing rule so we just

746
00:34:06,299 --> 00:34:07,799
implement the patent-based rule to

747
00:34:07,799 --> 00:34:11,040
detect it and another one is FS open

748
00:34:11,040 --> 00:34:14,339
because just as I mentioned earlier we

749
00:34:14,339 --> 00:34:17,760
focus on the create files but uh several

750
00:34:17,760 --> 00:34:20,820
reasons will use FS open instead of

751
00:34:20,820 --> 00:34:23,520
query file so we just Implement a

752
00:34:23,520 --> 00:34:26,580
patent-based rule to identify the buy

753
00:34:26,580 --> 00:34:28,800
sequence of FS open so we can detect

754
00:34:28,800 --> 00:34:30,540
this one

755
00:34:30,540 --> 00:34:33,560
and we also did a large-scale

756
00:34:33,560 --> 00:34:36,540
experiments and for the whole year we

757
00:34:36,540 --> 00:34:39,480
collected resource samples which label

758
00:34:39,480 --> 00:34:42,000
was ransomware by three different uh

759
00:34:42,000 --> 00:34:44,460
popular antivirus vendors for Enterprise

760
00:34:44,460 --> 00:34:46,739
total and there's one thing you need to

761
00:34:46,739 --> 00:34:50,879
know in device total the sample labels

762
00:34:50,879 --> 00:34:53,699
as a result means it will encrypt files

763
00:34:53,699 --> 00:34:55,399
this is a

764
00:34:55,399 --> 00:34:59,640
very surprising and so we also use the

765
00:34:59,640 --> 00:35:02,640
commercial sandbox to filter out some

766
00:35:02,640 --> 00:35:05,220
some samples and it was really

767
00:35:05,220 --> 00:35:08,640
encrypting files so we can collect them

768
00:35:08,640 --> 00:35:12,540
to for our final simple set and finally

769
00:35:12,540 --> 00:35:15,000
we have a impressive detection rate

770
00:35:15,000 --> 00:35:16,859
around 96 percent

771
00:35:16,859 --> 00:35:18,839
and

772
00:35:18,839 --> 00:35:21,900
so here's the table about the rinsing

773
00:35:21,900 --> 00:35:24,900
wheel family we can detect is 64 is in

774
00:35:24,900 --> 00:35:27,420
my family we can detect and we also can

775
00:35:27,420 --> 00:35:31,380
detect its variants in these families

776
00:35:31,380 --> 00:35:34,800
and however some there is some still

777
00:35:34,800 --> 00:35:39,060
some detect samples in our experiments

778
00:35:39,060 --> 00:35:41,160
for example Palm darker it used

779
00:35:41,160 --> 00:35:43,380
encryption algorithm which is not

780
00:35:43,380 --> 00:35:46,320
identified before and so

781
00:35:46,320 --> 00:35:49,079
and just like before we did for the dark

782
00:35:49,079 --> 00:35:50,520
side we can just Implement a

783
00:35:50,520 --> 00:35:52,560
patent-based rule to capture some

784
00:35:52,560 --> 00:35:55,020
feature in this inclusion algorithm to

785
00:35:55,020 --> 00:35:57,180
implement the patent-based rule to

786
00:35:57,180 --> 00:35:59,700
identify this one

787
00:35:59,700 --> 00:36:02,220
and we also want the

788
00:36:02,220 --> 00:36:04,800
uh that's all that's our tool mistaken

789
00:36:04,800 --> 00:36:07,920
however as a ransomware so we did a

790
00:36:07,920 --> 00:36:11,460
false positive experiments and find out

791
00:36:11,460 --> 00:36:14,460
finally we have a fossil around zero

792
00:36:14,460 --> 00:36:16,800
percent and which shows that our tool

793
00:36:16,800 --> 00:36:18,960
can really accurately detect ransomware

794
00:36:18,960 --> 00:36:20,579
and

795
00:36:20,579 --> 00:36:23,220
so now I would like to

796
00:36:23,220 --> 00:36:25,800
send home my will summarize our

797
00:36:25,800 --> 00:36:27,420
presentations

798
00:36:27,420 --> 00:36:28,640
okay

799
00:36:28,640 --> 00:36:30,300
[Music]

800
00:36:30,300 --> 00:36:33,420
and the final part is future work and

801
00:36:33,420 --> 00:36:36,000
the takeoff point and here's a full

802
00:36:36,000 --> 00:36:39,000
takeout Point first we realize in this

803
00:36:39,000 --> 00:36:42,060
session that existing existing detection

804
00:36:42,060 --> 00:36:44,160
technique have layers change and the

805
00:36:44,160 --> 00:36:46,920
limitation is difficult to perfectly

806
00:36:46,920 --> 00:36:50,040
solve the highly mutated Reservoir in

807
00:36:50,040 --> 00:36:52,680
the world and second point we use

808
00:36:52,680 --> 00:36:54,900
symbolic execution to detect those

809
00:36:54,900 --> 00:36:57,839
multiple malicious attack and show the

810
00:36:57,839 --> 00:36:59,940
good result which is difficult to

811
00:36:59,940 --> 00:37:02,540
achieve with the patterns to get better

812
00:37:02,540 --> 00:37:05,940
more detection the third point is our

813
00:37:05,940 --> 00:37:08,040
experiments shows such as the

814
00:37:08,040 --> 00:37:10,380
lightweight symbolic solution can solve

815
00:37:10,380 --> 00:37:12,780
real world simple and it's robust

816
00:37:12,780 --> 00:37:15,839
against obscation the last one is we

817
00:37:15,839 --> 00:37:18,119
hope this engine can help the blue team

818
00:37:18,119 --> 00:37:20,880
in the world so we release it on the

819
00:37:20,880 --> 00:37:23,339
GitHub and hope the community can join

820
00:37:23,339 --> 00:37:25,680
us to write these are rule to enhance

821
00:37:25,680 --> 00:37:28,079
the diversity of the detection

822
00:37:28,079 --> 00:37:30,660
capability

823
00:37:30,660 --> 00:37:33,960
so as we mentioned uh here is a QR code

824
00:37:33,960 --> 00:37:36,720
to our Tsar engine on GitHub we hope

825
00:37:36,720 --> 00:37:38,460
there are more and more researchers to

826
00:37:38,460 --> 00:37:41,640
join us uh to working on this engine

827
00:37:41,640 --> 00:37:44,940
so thank you for listening we are tx1 if

828
00:37:44,940 --> 00:37:46,920
you have any question please feel free

829
00:37:46,920 --> 00:37:49,980
to answer your question or contact us by

830
00:37:49,980 --> 00:37:52,020
the Twitter or linking and thank you

831
00:37:52,020 --> 00:37:54,200
everyone

832
00:37:54,430 --> 00:37:57,549
[Music]

833
00:38:01,390 --> 00:38:04,489
[Music]

