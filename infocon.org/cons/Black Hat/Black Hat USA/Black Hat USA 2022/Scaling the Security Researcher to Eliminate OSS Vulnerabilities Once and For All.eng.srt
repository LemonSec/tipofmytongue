1
00:00:01,730 --> 00:00:03,720
[Music]

2
00:00:03,720 --> 00:00:06,720
foreign

3
00:00:09,019 --> 00:00:11,760
that Katie did in her last talk and I'm

4
00:00:11,760 --> 00:00:13,740
going to invite everybody in the why far

5
00:00:13,740 --> 00:00:16,079
back to come forward this is the first

6
00:00:16,079 --> 00:00:19,199
talk that we've given in a long time and

7
00:00:19,199 --> 00:00:21,660
uh especially since covid so we invite

8
00:00:21,660 --> 00:00:23,160
you to come forward we don't bite we

9
00:00:23,160 --> 00:00:24,600
promise

10
00:00:24,600 --> 00:00:26,220
um

11
00:00:26,220 --> 00:00:28,698
okay

12
00:00:29,340 --> 00:00:30,539
so

13
00:00:30,539 --> 00:00:32,820
um uh this is welcome to scaling

14
00:00:32,820 --> 00:00:34,380
security researcher to eliminate open

15
00:00:34,380 --> 00:00:36,180
source security vulnerabilities once and

16
00:00:36,180 --> 00:00:39,960
for all my name is Jonathan lichu I am a

17
00:00:39,960 --> 00:00:41,579
software security engineer a software

18
00:00:41,579 --> 00:00:44,700
security researcher I am the first ever

19
00:00:44,700 --> 00:00:47,820
Dan Kaminsky fellow at human security uh

20
00:00:47,820 --> 00:00:49,559
I am a get up star and get up security

21
00:00:49,559 --> 00:00:51,000
Ambassador

22
00:00:51,000 --> 00:00:52,500
um and you can reach me on Twitter at

23
00:00:52,500 --> 00:00:54,840
Jay lichu and you can find me on GitHub

24
00:00:54,840 --> 00:00:57,660
at J light shoe as well and I'm going to

25
00:00:57,660 --> 00:00:59,879
hand it over to my co-speaker Patrick

26
00:00:59,879 --> 00:01:02,760
yeah my name is Patrick way I'm uh work

27
00:01:02,760 --> 00:01:04,739
for modern I'm on the open rewrite team

28
00:01:04,739 --> 00:01:06,479
I've been doing software for over 20

29
00:01:06,479 --> 00:01:08,520
years and yeah excited to be working

30
00:01:08,520 --> 00:01:10,799
with you guys today

31
00:01:10,799 --> 00:01:12,659
um so brief disclaimer

32
00:01:12,659 --> 00:01:14,460
um I'm sponsored by GitHub and also we

33
00:01:14,460 --> 00:01:16,200
are discussing a SAS offering that is

34
00:01:16,200 --> 00:01:18,119
available for sale um but all the tools

35
00:01:18,119 --> 00:01:21,600
and and Technologies and and the process

36
00:01:21,600 --> 00:01:23,100
we discussed are available for free for

37
00:01:23,100 --> 00:01:24,479
open source

38
00:01:24,479 --> 00:01:28,080
um to to use as security researchers

39
00:01:28,080 --> 00:01:30,420
um and this work is supported by the new

40
00:01:30,420 --> 00:01:32,340
Dan Kaminsky Fellowship

41
00:01:32,340 --> 00:01:34,920
um for those who um

42
00:01:34,920 --> 00:01:37,740
uh for those who did not know Dan Dan

43
00:01:37,740 --> 00:01:39,420
was best known

44
00:01:39,420 --> 00:01:41,520
um for a vulnerability and DNS that he

45
00:01:41,520 --> 00:01:43,079
discovered in 2008 and then silently

46
00:01:43,079 --> 00:01:45,360
worked across the industry to fix

47
00:01:45,360 --> 00:01:47,220
um I sadly never got the opportunity to

48
00:01:47,220 --> 00:01:49,320
meet Dan he passed away uh tragically

49
00:01:49,320 --> 00:01:50,820
last year

50
00:01:50,820 --> 00:01:52,320
um and the Dan Kaminsky Fellowship was

51
00:01:52,320 --> 00:01:54,180
created to celebrate Dan's memory and

52
00:01:54,180 --> 00:01:56,460
Legacy by funding open source work that

53
00:01:56,460 --> 00:01:58,020
helps make the world a better and more

54
00:01:58,020 --> 00:02:00,299
secure place and if you are interested

55
00:02:00,299 --> 00:02:02,640
in a project that satisfies those

56
00:02:02,640 --> 00:02:04,799
constraints or is you know is is trying

57
00:02:04,799 --> 00:02:06,899
to do something in that area um human is

58
00:02:06,899 --> 00:02:08,520
currently accepting applications for the

59
00:02:08,520 --> 00:02:14,160
2022 uh Dan Kaminsky fellow or 2023

60
00:02:14,160 --> 00:02:16,739
um so this story started with a simple

61
00:02:16,739 --> 00:02:18,180
vulnerability

62
00:02:18,180 --> 00:02:21,720
is this it's the use of HTTP in a Gradle

63
00:02:21,720 --> 00:02:23,220
build file

64
00:02:23,220 --> 00:02:26,879
um and uh this is uh this vulnerability

65
00:02:26,879 --> 00:02:29,220
is important because if you're using

66
00:02:29,220 --> 00:02:32,099
HTTP to resolve your dependencies in

67
00:02:32,099 --> 00:02:34,680
your Gradle or Maven build files you

68
00:02:34,680 --> 00:02:36,060
leave your build open to a man in the

69
00:02:36,060 --> 00:02:38,180
middle attack and getting your artifacts

70
00:02:38,180 --> 00:02:41,160
Modified by a malicious attacker

71
00:02:41,160 --> 00:02:41,879
um

72
00:02:41,879 --> 00:02:44,519
and there's you in the Java ecosystem at

73
00:02:44,519 --> 00:02:45,420
least there's no additional

74
00:02:45,420 --> 00:02:46,800
authentication or verification of

75
00:02:46,800 --> 00:02:48,480
artifacts getting downloaded

76
00:02:48,480 --> 00:02:50,220
and this vulnerability didn't just exist

77
00:02:50,220 --> 00:02:52,440
in Maven or sorry in Gradle it also

78
00:02:52,440 --> 00:02:54,599
existed in Maven build files this is an

79
00:02:54,599 --> 00:02:56,640
example of downloading dependencies uh

80
00:02:56,640 --> 00:02:58,140
to be used in your compiler and test

81
00:02:58,140 --> 00:02:59,580
dependencies which means that the code's

82
00:02:59,580 --> 00:03:01,080
going to get executed in your CI CD

83
00:03:01,080 --> 00:03:02,099
pipeline

84
00:03:02,099 --> 00:03:03,840
and this is an example of it being used

85
00:03:03,840 --> 00:03:06,420
to upload artifacts from your build

86
00:03:06,420 --> 00:03:07,920
um and that usually concludes

87
00:03:07,920 --> 00:03:09,780
credentials which are getting exposed

88
00:03:09,780 --> 00:03:11,760
over the network as well

89
00:03:11,760 --> 00:03:14,220
and this vulnerability was everywhere I

90
00:03:14,220 --> 00:03:15,540
started looking across open source

91
00:03:15,540 --> 00:03:17,340
projects it was in the projects of

92
00:03:17,340 --> 00:03:21,180
spring Apache Red Hat kotlin jetbrains

93
00:03:21,180 --> 00:03:24,780
Jenkins Gradle groovy elastic eclipse

94
00:03:24,780 --> 00:03:26,340
and more

95
00:03:26,340 --> 00:03:29,640
um Oracle the NSA LinkedIn stripe all of

96
00:03:29,640 --> 00:03:31,500
these open source projects all the open

97
00:03:31,500 --> 00:03:33,000
source projects maintained by these Pro

98
00:03:33,000 --> 00:03:36,120
these um organizations we're vulnerable

99
00:03:36,120 --> 00:03:37,620
to this

100
00:03:37,620 --> 00:03:40,379
and I reached out to Maven sonotype

101
00:03:40,379 --> 00:03:43,860
Maven sonotype is the uh artifact server

102
00:03:43,860 --> 00:03:47,040
for the job system they are the uh pip

103
00:03:47,040 --> 00:03:49,019
to the python ecosystem the npm to the

104
00:03:49,019 --> 00:03:52,080
Java ecosystem and they told me that in

105
00:03:52,080 --> 00:03:55,500
January or June of 2019 uh 25 of their

106
00:03:55,500 --> 00:03:57,000
traffic was still using HTTP instead of

107
00:03:57,000 --> 00:03:59,040
https to resolve dependencies

108
00:03:59,040 --> 00:04:01,319
so how do we fix this how do we how do

109
00:04:01,319 --> 00:04:02,879
you deal with this widespread common

110
00:04:02,879 --> 00:04:04,319
security vulnerability impacting an

111
00:04:04,319 --> 00:04:05,819
entire ecosystem

112
00:04:05,819 --> 00:04:07,680
I push forward an initiative that on

113
00:04:07,680 --> 00:04:10,200
January 15 2020 all the major artifact

114
00:04:10,200 --> 00:04:11,819
servers in the Java ecosystem would

115
00:04:11,819 --> 00:04:13,680
decommissioned support for HTTP in favor

116
00:04:13,680 --> 00:04:16,320
of supporting https only

117
00:04:16,320 --> 00:04:18,540
and I reached out to Maven Central again

118
00:04:18,540 --> 00:04:21,779
and they said that after us our

119
00:04:21,779 --> 00:04:25,199
disclosure a lot of blog posts 20 were

120
00:04:25,199 --> 00:04:27,120
still using HTTP even after all the

121
00:04:27,120 --> 00:04:29,820
communication we put out

122
00:04:29,820 --> 00:04:32,880
and so you can imagine

123
00:04:32,880 --> 00:04:35,040
what might have happened

124
00:04:35,040 --> 00:04:39,680
on January on January 15 2020

125
00:04:40,259 --> 00:04:42,660
broken software broken software

126
00:04:42,660 --> 00:04:44,460
everywhere

127
00:04:44,460 --> 00:04:47,580
um but we stopped the bleeding uh but

128
00:04:47,580 --> 00:04:49,860
what about the other repositories

129
00:04:49,860 --> 00:04:51,900
these are only the most commonly used

130
00:04:51,900 --> 00:04:54,240
repositories in the Java ecosystem other

131
00:04:54,240 --> 00:04:57,600
companies host jar artifacts on their

132
00:04:57,600 --> 00:04:59,699
own servers and those are not in this

133
00:04:59,699 --> 00:05:00,840
list

134
00:05:00,840 --> 00:05:02,220
um

135
00:05:02,220 --> 00:05:04,080
so how do we fix the rest of the open

136
00:05:04,080 --> 00:05:05,400
source projects that are vulnerable to

137
00:05:05,400 --> 00:05:06,540
this

138
00:05:06,540 --> 00:05:10,380
I said let's just try to fix it let's do

139
00:05:10,380 --> 00:05:12,479
both polar Quest generation

140
00:05:12,479 --> 00:05:14,699
and so how

141
00:05:14,699 --> 00:05:16,919
well first off you need to identify what

142
00:05:16,919 --> 00:05:19,139
projects are vulnerable and so the way I

143
00:05:19,139 --> 00:05:20,699
did this was by writing a code to our

144
00:05:20,699 --> 00:05:22,320
query to give me a list of vulnerable

145
00:05:22,320 --> 00:05:24,180
projects and this is the query here it's

146
00:05:24,180 --> 00:05:25,860
very simple

147
00:05:25,860 --> 00:05:28,860
um codeql is github's code query

148
00:05:28,860 --> 00:05:31,380
language and as your bill it every

149
00:05:31,380 --> 00:05:32,759
single time there's a commit to an open

150
00:05:32,759 --> 00:05:35,100
source project codeql attempts to build

151
00:05:35,100 --> 00:05:37,500
that project and build a database and as

152
00:05:37,500 --> 00:05:39,539
open as security researchers we can run

153
00:05:39,539 --> 00:05:43,020
queries against code 2L at scale and

154
00:05:43,020 --> 00:05:44,639
there are 100 000 open source projects

155
00:05:44,639 --> 00:05:47,639
that coach UL builds databases for

156
00:05:47,639 --> 00:05:50,699
currently and for this query the GitHub

157
00:05:50,699 --> 00:05:53,100
security lab bountied me a 2 300 Bounty

158
00:05:53,100 --> 00:05:54,780
for this

159
00:05:54,780 --> 00:05:56,520
and then on top of this I took the list

160
00:05:56,520 --> 00:05:59,340
of queries or the list of results that

161
00:05:59,340 --> 00:06:01,500
GitHub provided me and I said let's go

162
00:06:01,500 --> 00:06:02,880
generate pull request so I wrote a bot

163
00:06:02,880 --> 00:06:05,280
using python it was a wrapper over the

164
00:06:05,280 --> 00:06:07,680
GitHub Hub CLI it had one nasty regular

165
00:06:07,680 --> 00:06:09,120
expression and a lot of logic for

166
00:06:09,120 --> 00:06:11,699
bouncing off of github's rate limiter

167
00:06:11,699 --> 00:06:13,560
and this is the logic

168
00:06:13,560 --> 00:06:15,419
um It's actually an engine under this

169
00:06:15,419 --> 00:06:17,520
but this is at a high level the logic

170
00:06:17,520 --> 00:06:19,860
that we use to generate pull requests

171
00:06:19,860 --> 00:06:21,660
and this is the nasty regular expression

172
00:06:21,660 --> 00:06:23,280
and the reason that we had to use a

173
00:06:23,280 --> 00:06:27,479
regular expression is because if you use

174
00:06:27,479 --> 00:06:30,000
um if you use an XML parser to fix XML

175
00:06:30,000 --> 00:06:33,300
files when you parse the XML in

176
00:06:33,300 --> 00:06:35,580
and then you dump it back out after

177
00:06:35,580 --> 00:06:37,620
making a modification it comes out in

178
00:06:37,620 --> 00:06:39,720
the format that the XML parser dumps out

179
00:06:39,720 --> 00:06:41,819
not in the format that came in and so

180
00:06:41,819 --> 00:06:43,199
you end up generating these massive

181
00:06:43,199 --> 00:06:46,139
diffs that you that most maintainers are

182
00:06:46,139 --> 00:06:47,639
not willing to accept because sure it

183
00:06:47,639 --> 00:06:49,740
fixes a security vulnerability

184
00:06:49,740 --> 00:06:51,479
but it doesn't look like the code that

185
00:06:51,479 --> 00:06:53,759
they had originally and so they're not

186
00:06:53,759 --> 00:06:55,560
willing to accept it but the problem

187
00:06:55,560 --> 00:06:57,960
with regular expression is that if you

188
00:06:57,960 --> 00:06:59,220
use regular oppressions to solve a

189
00:06:59,220 --> 00:07:01,620
problem now you have two problems

190
00:07:01,620 --> 00:07:03,479
um

191
00:07:03,479 --> 00:07:05,580
but it worked

192
00:07:05,580 --> 00:07:07,979
um this is my pull request feed for this

193
00:07:07,979 --> 00:07:09,539
vulnerability and this is an example of

194
00:07:09,539 --> 00:07:11,160
the diff you can see the replacement of

195
00:07:11,160 --> 00:07:14,039
HTTP with https across you know tons of

196
00:07:14,039 --> 00:07:16,020
different places in a file

197
00:07:16,020 --> 00:07:18,080
and for this project I generated

198
00:07:18,080 --> 00:07:22,979
1596 pull requests and as of 2022 it's

199
00:07:22,979 --> 00:07:24,900
been about a 40 merge rate

200
00:07:24,900 --> 00:07:28,080
which is you know pretty pretty solid

201
00:07:28,080 --> 00:07:30,180
and for this the GitHub security lab

202
00:07:30,180 --> 00:07:32,039
bountied me an additional four thousand

203
00:07:32,039 --> 00:07:33,479
dollars for trying for fixing this

204
00:07:33,479 --> 00:07:36,180
vulnerability at scale

205
00:07:36,180 --> 00:07:37,680
and I got hooked on this idea of bulk

206
00:07:37,680 --> 00:07:39,960
pull request generation

207
00:07:39,960 --> 00:07:41,580
um this is my GitHub contribution graph

208
00:07:41,580 --> 00:07:44,520
for uh 2020. uh these are the two peaks

209
00:07:44,520 --> 00:07:46,199
of my massive numbers of polar press

210
00:07:46,199 --> 00:07:47,880
that I generated

211
00:07:47,880 --> 00:07:49,860
um it was you know it's just it's you

212
00:07:49,860 --> 00:07:51,900
know very cool to see the impact you can

213
00:07:51,900 --> 00:07:53,340
have

214
00:07:53,340 --> 00:07:55,560
so I have a problem

215
00:07:55,560 --> 00:07:56,819
and

216
00:07:56,819 --> 00:07:58,500
ivr HD

217
00:07:58,500 --> 00:08:00,960
that's not the problem the problem is

218
00:08:00,960 --> 00:08:04,199
that I chase squirrels I love looking

219
00:08:04,199 --> 00:08:06,000
and reading vulnerability disclosures

220
00:08:06,000 --> 00:08:07,620
and when I read a vulnerability

221
00:08:07,620 --> 00:08:09,660
disclosure I can take the knowledge that

222
00:08:09,660 --> 00:08:11,039
I find in that vulnerability closure and

223
00:08:11,039 --> 00:08:13,080
I can go say I wonder where else that it

224
00:08:13,080 --> 00:08:15,180
this is and I can find those

225
00:08:15,180 --> 00:08:17,460
vulnerabilities I can find lots of them

226
00:08:17,460 --> 00:08:18,960
and it's there's too many

227
00:08:18,960 --> 00:08:21,900
vulnerabilities I'm I'm finding when I

228
00:08:21,900 --> 00:08:23,460
do this too many open source security

229
00:08:23,460 --> 00:08:24,840
vulnerabilities this is not to say open

230
00:08:24,840 --> 00:08:27,060
source is more insecure than in closed

231
00:08:27,060 --> 00:08:28,259
Source it's just that it's easier for me

232
00:08:28,259 --> 00:08:29,280
to find

233
00:08:29,280 --> 00:08:31,560
this is an example of a vulnerability

234
00:08:31,560 --> 00:08:33,958
called zip slip and I can pay I this is

235
00:08:33,958 --> 00:08:36,299
the results of a co2l query and I can

236
00:08:36,299 --> 00:08:37,679
page through results I can scroll

237
00:08:37,679 --> 00:08:39,299
through pages and pages and pages of

238
00:08:39,299 --> 00:08:41,580
results like this that identify and

239
00:08:41,580 --> 00:08:43,500
point to the exact locations in source

240
00:08:43,500 --> 00:08:44,760
code where there are zip slip

241
00:08:44,760 --> 00:08:47,339
vulnerabilities and open source software

242
00:08:47,339 --> 00:08:48,899
and so

243
00:08:48,899 --> 00:08:51,959
I need a solution to this problem

244
00:08:51,959 --> 00:08:53,880
I need automation

245
00:08:53,880 --> 00:08:56,100
and so at this point I want to pass it

246
00:08:56,100 --> 00:08:59,220
off to Jonathan or sorry to Patrick to

247
00:08:59,220 --> 00:09:00,839
discuss automated accurate

248
00:09:00,839 --> 00:09:03,120
Transformations at massive scale thanks

249
00:09:03,120 --> 00:09:05,339
Jonathan

250
00:09:05,339 --> 00:09:06,620
yeah

251
00:09:06,620 --> 00:09:09,180
Jonathan has a challenge he definitely

252
00:09:09,180 --> 00:09:11,040
finds a lot of vulnerabilities and he

253
00:09:11,040 --> 00:09:13,320
wants to fix the world but

254
00:09:13,320 --> 00:09:16,380
his 2020 he he tried to use an XML

255
00:09:16,380 --> 00:09:19,200
parser and he got a ginormous diff or a

256
00:09:19,200 --> 00:09:21,180
simple change

257
00:09:21,180 --> 00:09:23,640
and uh you know it kind of makes me

258
00:09:23,640 --> 00:09:25,019
think of software Engineers we're

259
00:09:25,019 --> 00:09:27,180
professional automators I mean that's

260
00:09:27,180 --> 00:09:29,459
what we do we automate tasks some of us

261
00:09:29,459 --> 00:09:31,860
been doing it for a long long time

262
00:09:31,860 --> 00:09:35,220
but it's 20 20 and we're still not able

263
00:09:35,220 --> 00:09:37,380
to automate our own tasks that

264
00:09:37,380 --> 00:09:40,200
dependency upgrade with a breaking

265
00:09:40,200 --> 00:09:42,839
change or a framework up trade we're

266
00:09:42,839 --> 00:09:44,820
still slogging through the painful

267
00:09:44,820 --> 00:09:48,540
process of of doing that update

268
00:09:48,540 --> 00:09:52,260
but luckily it is 2022 and we do have a

269
00:09:52,260 --> 00:09:54,180
solution

270
00:09:54,180 --> 00:09:55,560
I'm lucky I get to work with the open

271
00:09:55,560 --> 00:09:57,000
rewrite project

272
00:09:57,000 --> 00:10:00,120
and uh essentially in a nutshell open

273
00:10:00,120 --> 00:10:03,540
rewrite is a framework and an API for

274
00:10:03,540 --> 00:10:06,480
interrogating and transforming a

275
00:10:06,480 --> 00:10:08,880
compiler's syntactical representation of

276
00:10:08,880 --> 00:10:11,360
source code

277
00:10:12,120 --> 00:10:14,220
so what is that syntactical

278
00:10:14,220 --> 00:10:16,500
representation so compilers make this

279
00:10:16,500 --> 00:10:18,959
thing called an abstract syntax tree

280
00:10:18,959 --> 00:10:20,760
and if you look at it you can kind of

281
00:10:20,760 --> 00:10:22,080
see like hey

282
00:10:22,080 --> 00:10:23,880
I could do something with that tree

283
00:10:23,880 --> 00:10:26,519
right I'm a software engineer I bet I

284
00:10:26,519 --> 00:10:29,160
can automate the fix that I need to make

285
00:10:29,160 --> 00:10:31,320
there's a problem though and Jonathan's

286
00:10:31,320 --> 00:10:33,959
experienced this with his XML parser and

287
00:10:33,959 --> 00:10:36,600
that is a compiler's abstract index 3 is

288
00:10:36,600 --> 00:10:40,200
bare minimum there's there's no uh tabs

289
00:10:40,200 --> 00:10:42,959
or spaces there's no comments it's only

290
00:10:42,959 --> 00:10:44,899
got a single level of type information

291
00:10:44,899 --> 00:10:47,399
it it's going to take some work in order

292
00:10:47,399 --> 00:10:49,079
to be able to use this for a

293
00:10:49,079 --> 00:10:50,880
transformation that's going to pass code

294
00:10:50,880 --> 00:10:52,200
review

295
00:10:52,200 --> 00:10:55,260
this is one of the first

296
00:10:55,260 --> 00:10:57,000
the first challenges that open rewrite

297
00:10:57,000 --> 00:10:58,560
solved and that was to create a format

298
00:10:58,560 --> 00:11:01,740
preserving ASD so while the open rewrite

299
00:11:01,740 --> 00:11:04,800
parser is is interrogating and build

300
00:11:04,800 --> 00:11:06,660
using the compiler to build an abstract

301
00:11:06,660 --> 00:11:08,399
syntax tree it's synchronizing that

302
00:11:08,399 --> 00:11:11,160
process with the source file so every

303
00:11:11,160 --> 00:11:14,579
node of that tree has its prefix it

304
00:11:14,579 --> 00:11:17,700
sucks fix it's white space it's comments

305
00:11:17,700 --> 00:11:20,279
and the cool thing about that is that it

306
00:11:20,279 --> 00:11:22,140
is it's able to like detect the style

307
00:11:22,140 --> 00:11:25,260
for an entire Source set and it allows

308
00:11:25,260 --> 00:11:27,779
somebody like Jonathan to write a recipe

309
00:11:27,779 --> 00:11:30,480
and do a transformation and have that be

310
00:11:30,480 --> 00:11:33,300
correct for the source file it'll have

311
00:11:33,300 --> 00:11:36,120
tabs or spaces it'll have the braces on

312
00:11:36,120 --> 00:11:38,339
a new line Jonathan doesn't have to go

313
00:11:38,339 --> 00:11:42,360
in and update every single div with the

314
00:11:42,360 --> 00:11:43,920
correct formatting the open rewrite

315
00:11:43,920 --> 00:11:45,300
framework is able to take care of that

316
00:11:45,300 --> 00:11:46,800
forum

317
00:11:46,800 --> 00:11:49,079
there's another problem though

318
00:11:49,079 --> 00:11:51,480
you need full type information as I

319
00:11:51,480 --> 00:11:53,880
mentioned the compiler Source tree it's

320
00:11:53,880 --> 00:11:55,800
bare minimum it's got single level type

321
00:11:55,800 --> 00:11:58,019
information but you really need to know

322
00:11:58,019 --> 00:12:00,779
the full depth of the types for every

323
00:12:00,779 --> 00:12:03,060
node right so you have a log.info

324
00:12:03,060 --> 00:12:05,459
statement is that log for J is it slf or

325
00:12:05,459 --> 00:12:07,500
J is it log back

326
00:12:07,500 --> 00:12:10,140
in order to really use this framework

327
00:12:10,140 --> 00:12:12,180
and to do accurate Transformations which

328
00:12:12,180 --> 00:12:14,339
is critical because you you just cannot

329
00:12:14,339 --> 00:12:17,220
do harm you need to have full type

330
00:12:17,220 --> 00:12:19,700
attribution so

331
00:12:19,700 --> 00:12:23,720
the next challenge of the

332
00:12:23,880 --> 00:12:26,700
so open rewrite solve that problem too

333
00:12:26,700 --> 00:12:29,700
the open rewrite abstract syntax tree is

334
00:12:29,700 --> 00:12:31,620
both syntactically and semantically

335
00:12:31,620 --> 00:12:34,019
aware here's a is a fantastic picture

336
00:12:34,019 --> 00:12:36,120
that shows on on one side you have the

337
00:12:36,120 --> 00:12:38,760
compiler's syntactical tree and on the

338
00:12:38,760 --> 00:12:41,459
other side you have the open rewrite AST

339
00:12:41,459 --> 00:12:44,339
and that is without another 6 000 nodes

340
00:12:44,339 --> 00:12:45,899
that we had to take off just to make it

341
00:12:45,899 --> 00:12:47,100
to where it looked like something

342
00:12:47,100 --> 00:12:49,440
besides a ball of string

343
00:12:49,440 --> 00:12:51,360
so if you look at that all right

344
00:12:51,360 --> 00:12:54,180
Jonathan has got he's got his formatting

345
00:12:54,180 --> 00:12:56,339
he's got his type but now he needs to

346
00:12:56,339 --> 00:12:58,560
modify that

347
00:12:58,560 --> 00:13:03,480
well yeah even even a simple even a

348
00:13:03,480 --> 00:13:06,540
simple piece of code is surprisingly

349
00:13:06,540 --> 00:13:08,459
complex ASD if we're going to make

350
00:13:08,459 --> 00:13:11,040
Jonathan be successful and be efficient

351
00:13:11,040 --> 00:13:13,440
we needed a templating engine he's a

352
00:13:13,440 --> 00:13:18,779
coder he's not an aster right so in in a

353
00:13:18,779 --> 00:13:20,579
demonstration he's going to talk here in

354
00:13:20,579 --> 00:13:22,260
just a second about a vulnerability he's

355
00:13:22,260 --> 00:13:25,019
fixing zip slip and he needs to end uh

356
00:13:25,019 --> 00:13:27,600
insert this simple conditional statement

357
00:13:27,600 --> 00:13:30,660
into code all over the place

358
00:13:30,660 --> 00:13:34,440
so the open rewrite team we we put our

359
00:13:34,440 --> 00:13:36,360
heads down and we solved that we have

360
00:13:36,360 --> 00:13:38,339
this templating engine that allows

361
00:13:38,339 --> 00:13:40,380
coders to build trees in their native

362
00:13:40,380 --> 00:13:43,500
language it's got type substitutions so

363
00:13:43,500 --> 00:13:45,600
you can substitute parameters and if you

364
00:13:45,600 --> 00:13:47,639
notice in there there's there's very

365
00:13:47,639 --> 00:13:50,100
little formatting the open rewrite

366
00:13:50,100 --> 00:13:52,139
framework will handle all the formatting

367
00:13:52,139 --> 00:13:54,300
for you so if you stick it into a file

368
00:13:54,300 --> 00:13:57,660
with tabs it'll be tab spaced

369
00:13:57,660 --> 00:14:01,339
the next thing is a coordinate system

370
00:14:02,880 --> 00:14:04,860
so

371
00:14:04,860 --> 00:14:06,839
you need to be able to enter it at the

372
00:14:06,839 --> 00:14:07,860
correct place

373
00:14:07,860 --> 00:14:10,260
so here you can Define your template and

374
00:14:10,260 --> 00:14:11,760
you can say hey insert it after this

375
00:14:11,760 --> 00:14:13,019
statement

376
00:14:13,019 --> 00:14:14,639
and here's the parameters I want to

377
00:14:14,639 --> 00:14:17,279
substitute into it so with two simple

378
00:14:17,279 --> 00:14:20,459
statements Jonathan is able to detect a

379
00:14:20,459 --> 00:14:23,459
vulnerability Define the fix and

380
00:14:23,459 --> 00:14:25,560
perfectly insert into the space where it

381
00:14:25,560 --> 00:14:26,940
belongs

382
00:14:26,940 --> 00:14:29,579
and here's just a quick example of what

383
00:14:29,579 --> 00:14:31,320
he's able to do at scale

384
00:14:31,320 --> 00:14:33,360
and with that I'll pass it back to

385
00:14:33,360 --> 00:14:34,680
Jonathan

386
00:14:34,680 --> 00:14:36,839
thank you Patrick

387
00:14:36,839 --> 00:14:39,500
so

388
00:14:42,120 --> 00:14:45,720
what with the unlock that openrete

389
00:14:45,720 --> 00:14:47,940
provides what other vulnerabilities can

390
00:14:47,940 --> 00:14:49,980
we fix with this

391
00:14:49,980 --> 00:14:50,940
I'm going to talk to you about three

392
00:14:50,940 --> 00:14:52,800
different security vulnerabilities temp

393
00:14:52,800 --> 00:14:54,540
directory hijacking partial path

394
00:14:54,540 --> 00:14:56,760
reversal and zip slip and how open

395
00:14:56,760 --> 00:14:58,560
rearrate allowed us to fix these

396
00:14:58,560 --> 00:15:00,839
vulnerabilities at scale

397
00:15:00,839 --> 00:15:02,699
so vulnerability number one is a

398
00:15:02,699 --> 00:15:04,880
vulnerability called temperature

399
00:15:04,880 --> 00:15:07,980
temporary directory hijacking and it

400
00:15:07,980 --> 00:15:10,019
exists because the system temp directory

401
00:15:10,019 --> 00:15:12,060
on unix-like systems is shared between

402
00:15:12,060 --> 00:15:14,579
all users

403
00:15:14,579 --> 00:15:16,199
and

404
00:15:16,199 --> 00:15:18,360
this is the vulnerability the

405
00:15:18,360 --> 00:15:20,639
vulnerability exists because it is the

406
00:15:20,639 --> 00:15:22,920
creation of a temporary directory in

407
00:15:22,920 --> 00:15:24,360
Java

408
00:15:24,360 --> 00:15:27,120
um by creating a temporary file calling

409
00:15:27,120 --> 00:15:29,100
delete and then calling maker

410
00:15:29,100 --> 00:15:31,199
and the reason that people do this is

411
00:15:31,199 --> 00:15:33,480
because prior to Java 1.7

412
00:15:33,480 --> 00:15:35,760
there did not exist an API to create

413
00:15:35,760 --> 00:15:38,220
temporary directories in Java so a lot

414
00:15:38,220 --> 00:15:41,339
of old code uses this pattern and also

415
00:15:41,339 --> 00:15:42,899
if you looked up on job on stack

416
00:15:42,899 --> 00:15:44,519
Overflow how to create a temperature a

417
00:15:44,519 --> 00:15:45,959
temporary directory

418
00:15:45,959 --> 00:15:47,579
you'd unintentionally get this

419
00:15:47,579 --> 00:15:50,060
vulnerability

420
00:15:51,000 --> 00:15:53,339
um so this vulnerability the reason this

421
00:15:53,339 --> 00:15:54,540
code is vulnerable is because there's a

422
00:15:54,540 --> 00:15:55,800
race condition

423
00:15:55,800 --> 00:15:57,420
the race condition exists between the

424
00:15:57,420 --> 00:15:59,579
delete and the maker because when you

425
00:15:59,579 --> 00:16:01,079
create the temp file you call delete

426
00:16:01,079 --> 00:16:03,660
another user on the local file system

427
00:16:03,660 --> 00:16:06,180
can see that deletion and then race the

428
00:16:06,180 --> 00:16:08,100
Java process to create the dev directory

429
00:16:08,100 --> 00:16:11,100
and if they beat the Java process maker

430
00:16:11,100 --> 00:16:13,920
does not fail it returns false

431
00:16:13,920 --> 00:16:16,320
so the fix is to throw it well in

432
00:16:16,320 --> 00:16:18,360
imperfect fix that you'll see is to

433
00:16:18,360 --> 00:16:20,639
throw the maker into the in if and if

434
00:16:20,639 --> 00:16:24,240
check however this is not it's not fully

435
00:16:24,240 --> 00:16:26,519
uh it's not the best solution because

436
00:16:26,519 --> 00:16:29,459
when you use maketer it uses the default

437
00:16:29,459 --> 00:16:32,519
you name and the U name will create a

438
00:16:32,519 --> 00:16:35,040
directory that is exposed and visible to

439
00:16:35,040 --> 00:16:36,660
all other local users so you're still

440
00:16:36,660 --> 00:16:38,399
vulnerable to Temporary directory

441
00:16:38,399 --> 00:16:40,019
information disclosure

442
00:16:40,019 --> 00:16:41,940
so the correct fix for this is to

443
00:16:41,940 --> 00:16:43,860
replace it with create temp directory

444
00:16:43,860 --> 00:16:45,240
which is an API that was introduced in

445
00:16:45,240 --> 00:16:48,360
Java 1.7 Java 1.7 is very old it's been

446
00:16:48,360 --> 00:16:50,339
around for a long time it's a safe API

447
00:16:50,339 --> 00:16:51,240
to use

448
00:16:51,240 --> 00:16:53,040
and for this vulnerability I have quite

449
00:16:53,040 --> 00:16:54,360
a few CVS

450
00:16:54,360 --> 00:16:56,399
um I did report it a bunch of places but

451
00:16:56,399 --> 00:16:58,199
I said okay there's more than I can

452
00:16:58,199 --> 00:16:59,040
report

453
00:16:59,040 --> 00:17:01,199
let's try to do pull request generation

454
00:17:01,199 --> 00:17:04,439
so for this vulnerability I generated 64

455
00:17:04,439 --> 00:17:06,240
pull requests across open source to fix

456
00:17:06,240 --> 00:17:07,859
this vulnerability

457
00:17:07,859 --> 00:17:10,439
and this is an example of the diff you

458
00:17:10,439 --> 00:17:11,880
can see the removal of the delete the

459
00:17:11,880 --> 00:17:13,859
removal of the makers and we replace it

460
00:17:13,859 --> 00:17:15,720
with this one line that is no longer

461
00:17:15,720 --> 00:17:16,679
vulnerable

462
00:17:16,679 --> 00:17:18,419
and the Transformations can be more

463
00:17:18,419 --> 00:17:20,160
complicated you see we delete these if

464
00:17:20,160 --> 00:17:22,020
blocks that are no longer needed as well

465
00:17:22,020 --> 00:17:24,059
and leave behind just this one line and

466
00:17:24,059 --> 00:17:26,640
this is all using open rewrite and uh in

467
00:17:26,640 --> 00:17:28,319
automated

468
00:17:28,319 --> 00:17:29,880
vulnerability number two I want to talk

469
00:17:29,880 --> 00:17:31,260
to you about is a vulnerability called

470
00:17:31,260 --> 00:17:33,419
partial path traversal

471
00:17:33,419 --> 00:17:34,919
um let's assume that you have two users

472
00:17:34,919 --> 00:17:36,419
on a local file system and you want to

473
00:17:36,419 --> 00:17:39,600
you want to write logic that prevents a

474
00:17:39,600 --> 00:17:41,340
user from accessing something outside of

475
00:17:41,340 --> 00:17:45,439
user Sam but you also have

476
00:17:46,020 --> 00:17:47,640
you also have a user on the system

477
00:17:47,640 --> 00:17:49,380
called user Samantha

478
00:17:49,380 --> 00:17:51,480
so partial past reversal allows an

479
00:17:51,480 --> 00:17:53,160
attacker to access a sibling directory

480
00:17:53,160 --> 00:17:55,020
with the same prefix so in this used

481
00:17:55,020 --> 00:17:57,419
example user Sam and user Samantha they

482
00:17:57,419 --> 00:18:00,260
share the same prefix

483
00:18:00,299 --> 00:18:02,220
and this is a vulnerable code

484
00:18:02,220 --> 00:18:05,220
and it's vulnerable because when you

485
00:18:05,220 --> 00:18:07,679
have new file in Java

486
00:18:07,679 --> 00:18:10,200
and you call get canonical path on it

487
00:18:10,200 --> 00:18:11,820
you'll notice that the string that's

488
00:18:11,820 --> 00:18:14,460
returned is missing the trailing slash

489
00:18:14,460 --> 00:18:16,740
that you originally had in the file

490
00:18:16,740 --> 00:18:19,140
and so when you look at this Logic the

491
00:18:19,140 --> 00:18:21,179
vulnerability let's assume that you have

492
00:18:21,179 --> 00:18:22,559
a user Sam

493
00:18:22,559 --> 00:18:25,559
and you have a user supplied malicious

494
00:18:25,559 --> 00:18:27,440
value come in

495
00:18:27,440 --> 00:18:29,880
user.s Samantha when you call get

496
00:18:29,880 --> 00:18:32,340
canonical path on it it normalizes the

497
00:18:32,340 --> 00:18:33,240
path

498
00:18:33,240 --> 00:18:36,660
and it becomes user Samantha slash baz

499
00:18:36,660 --> 00:18:40,260
which does start with user Sam and so

500
00:18:40,260 --> 00:18:43,020
our guard is bypassed

501
00:18:43,020 --> 00:18:45,720
and so the fix for this vulnerability is

502
00:18:45,720 --> 00:18:48,179
taking this example of original example

503
00:18:48,179 --> 00:18:50,580
you one option is to re-add the path

504
00:18:50,580 --> 00:18:52,320
separator back in but you're still

505
00:18:52,320 --> 00:18:54,360
comparing the strings this is a better

506
00:18:54,360 --> 00:18:56,700
solution and the better solution is to

507
00:18:56,700 --> 00:19:00,480
use Java's two-pack or path object and

508
00:19:00,480 --> 00:19:01,919
what this starts with is not comparing

509
00:19:01,919 --> 00:19:04,740
strings but comparing these path objects

510
00:19:04,740 --> 00:19:07,260
so how do we find this vulnerability

511
00:19:07,260 --> 00:19:09,360
well first off we look for it we look

512
00:19:09,360 --> 00:19:12,360
for Java string starts with calls and

513
00:19:12,360 --> 00:19:14,100
then we look before and afterwards for

514
00:19:14,100 --> 00:19:16,200
this get canonical path call

515
00:19:16,200 --> 00:19:18,179
but we also want to find when we're

516
00:19:18,179 --> 00:19:20,460
finding this vulnerability locations

517
00:19:20,460 --> 00:19:22,860
where file path separator is not present

518
00:19:22,860 --> 00:19:24,600
because we don't want to fix places in

519
00:19:24,600 --> 00:19:27,240
the code that are not vulnerable

520
00:19:27,240 --> 00:19:29,400
can't be that easy right

521
00:19:29,400 --> 00:19:31,980
well developers are going to write code

522
00:19:31,980 --> 00:19:34,620
in a lot of different ways and what if a

523
00:19:34,620 --> 00:19:37,500
developer writes code like this where

524
00:19:37,500 --> 00:19:39,960
they extract that to a variable or they

525
00:19:39,960 --> 00:19:42,780
extract the argument to a variable or

526
00:19:42,780 --> 00:19:45,539
you they fix the vulnerability but in an

527
00:19:45,539 --> 00:19:47,100
extracted variable how do you detect

528
00:19:47,100 --> 00:19:49,620
this with automation right with with

529
00:19:49,620 --> 00:19:52,679
with you looking at the AST how do you

530
00:19:52,679 --> 00:19:54,900
know that this is vulnerable or not

531
00:19:54,900 --> 00:19:58,020
we need data flow analysis

532
00:19:58,020 --> 00:20:01,260
data flow analysis allows us to

533
00:20:01,260 --> 00:20:03,840
determine what a variable might be at

534
00:20:03,840 --> 00:20:06,900
runtime so for example we can look back

535
00:20:06,900 --> 00:20:08,820
and see that this get canonical path

536
00:20:08,820 --> 00:20:10,860
gets assigned to this variable and flows

537
00:20:10,860 --> 00:20:14,760
to that use and also for the other

538
00:20:14,760 --> 00:20:16,440
argument it also happens and data flow

539
00:20:16,440 --> 00:20:18,419
is not just you know single step it can

540
00:20:18,419 --> 00:20:20,400
operate through multiple steps and more

541
00:20:20,400 --> 00:20:23,120
complicated chains of calls

542
00:20:23,120 --> 00:20:25,679
dataflow allows us to uncover hard to

543
00:20:25,679 --> 00:20:28,679
find vulnerabilities and prevents false

544
00:20:28,679 --> 00:20:31,100
positives

545
00:20:31,380 --> 00:20:33,960
and this is the dataflow API if you've

546
00:20:33,960 --> 00:20:35,760
written any code ql which I know that

547
00:20:35,760 --> 00:20:37,260
most of you probably have not but if

548
00:20:37,260 --> 00:20:38,760
you've written any code ql the dataflow

549
00:20:38,760 --> 00:20:41,400
API that we that I created for this

550
00:20:41,400 --> 00:20:44,160
um is very similar to coqls so if you

551
00:20:44,160 --> 00:20:46,320
learn codeql or you learn open rewrite

552
00:20:46,320 --> 00:20:47,760
you can translate your knowledge back

553
00:20:47,760 --> 00:20:50,700
and forth between these two very easily

554
00:20:50,700 --> 00:20:53,100
and this is an example of the fix you

555
00:20:53,100 --> 00:20:56,640
can see that the file get parent file we

556
00:20:56,640 --> 00:20:58,799
pulled that back out into the new line

557
00:20:58,799 --> 00:21:00,360
that we're fixing and fix this

558
00:21:00,360 --> 00:21:02,340
vulnerability

559
00:21:02,340 --> 00:21:05,640
and the third vulnerability that I want

560
00:21:05,640 --> 00:21:08,220
to talk to you guys about you all about

561
00:21:08,220 --> 00:21:10,440
um is zip slip zip slip is an old

562
00:21:10,440 --> 00:21:12,720
vulnerability it was

563
00:21:12,720 --> 00:21:14,880
um originally discussed I think years

564
00:21:14,880 --> 00:21:17,340
and years ago in Frac magazine

565
00:21:17,340 --> 00:21:19,620
um but sniff did some research about

566
00:21:19,620 --> 00:21:22,380
this vulnerability uh more recently they

567
00:21:22,380 --> 00:21:24,240
did some research in 2018 and found a

568
00:21:24,240 --> 00:21:25,799
bunch of projects that were vulnerable

569
00:21:25,799 --> 00:21:27,299
to zip slip still and reported this

570
00:21:27,299 --> 00:21:29,220
vulnerability unfortunately some of the

571
00:21:29,220 --> 00:21:31,980
fixes that they found and they reported

572
00:21:31,980 --> 00:21:34,740
the fixes were somewhat incomplete

573
00:21:34,740 --> 00:21:36,059
um as I discovered in some of the work

574
00:21:36,059 --> 00:21:37,740
that I did

575
00:21:37,740 --> 00:21:39,480
um zip slip fundamentally is a path

576
00:21:39,480 --> 00:21:41,220
traversal vulnerability while unpacking

577
00:21:41,220 --> 00:21:43,140
zip files because zip files are entry

578
00:21:43,140 --> 00:21:45,840
names to zip contents

579
00:21:45,840 --> 00:21:49,140
and this is zip slip in Java the

580
00:21:49,140 --> 00:21:52,740
vulnerability exists because of

581
00:21:52,740 --> 00:21:54,120
um this little bit of logic where you're

582
00:21:54,120 --> 00:21:57,179
getting the name from a zip entry and

583
00:21:57,179 --> 00:21:58,860
that value which could be a path

584
00:21:58,860 --> 00:22:01,260
reversal payload is Flowing to the

585
00:22:01,260 --> 00:22:03,000
creation of a new directory

586
00:22:03,000 --> 00:22:05,039
and so this can lead to remote code

587
00:22:05,039 --> 00:22:07,740
execution because you can unpack the

588
00:22:07,740 --> 00:22:11,820
contents of a zip file entry over an

589
00:22:11,820 --> 00:22:14,280
executable file and that like bin bash

590
00:22:14,280 --> 00:22:16,620
right and that can lead to remote code

591
00:22:16,620 --> 00:22:17,640
execution

592
00:22:17,640 --> 00:22:19,559
and zip slip is complicated and it's

593
00:22:19,559 --> 00:22:21,179
complicated to fix

594
00:22:21,179 --> 00:22:23,340
and the reason that it's complicated is

595
00:22:23,340 --> 00:22:26,039
because you need to add this guard to

596
00:22:26,039 --> 00:22:28,620
prevent this vulnerability

597
00:22:28,620 --> 00:22:31,679
so the problem with this is that

598
00:22:31,679 --> 00:22:34,140
not only is this a valid fix

599
00:22:34,140 --> 00:22:37,200
but this is also this is also a valid

600
00:22:37,200 --> 00:22:37,980
fix

601
00:22:37,980 --> 00:22:40,200
how do you determine and again we don't

602
00:22:40,200 --> 00:22:41,580
want to fix vulnerabilities that are not

603
00:22:41,580 --> 00:22:43,320
present so you need to detect the

604
00:22:43,320 --> 00:22:45,120
vulnerabilities presence or if it's not

605
00:22:45,120 --> 00:22:47,460
present and not fix vulnerabilities that

606
00:22:47,460 --> 00:22:49,140
are not present

607
00:22:49,140 --> 00:22:51,600
so how do we determine whether or not

608
00:22:51,600 --> 00:22:54,780
this is protected against adequately

609
00:22:54,780 --> 00:22:56,880
and the answer is we need control flow

610
00:22:56,880 --> 00:22:59,100
analysis and this also didn't exist in

611
00:22:59,100 --> 00:23:00,780
open rewrite

612
00:23:00,780 --> 00:23:03,600
um so we added it

613
00:23:03,600 --> 00:23:06,059
um and it lets us determine

614
00:23:06,059 --> 00:23:08,880
if this logic this guard is present or

615
00:23:08,880 --> 00:23:10,919
not and helps us determine whether or

616
00:23:10,919 --> 00:23:12,960
not to fix the vulnerability

617
00:23:12,960 --> 00:23:15,419
and this is control flow analysis

618
00:23:15,419 --> 00:23:17,580
um this graphic was created by my uh

619
00:23:17,580 --> 00:23:19,260
wonderful intern sham

620
00:23:19,260 --> 00:23:21,360
um to display and it lets it creates a

621
00:23:21,360 --> 00:23:23,940
graph that displays

622
00:23:23,940 --> 00:23:27,659
um uh the the control flow through an

623
00:23:27,659 --> 00:23:30,240
app through a chunk of code where their

624
00:23:30,240 --> 00:23:31,919
basic blocks which are made up of the

625
00:23:31,919 --> 00:23:33,360
sequence of operations that are going to

626
00:23:33,360 --> 00:23:36,360
occur occur concurrently and then there

627
00:23:36,360 --> 00:23:39,620
are condition nodes where there are

628
00:23:39,620 --> 00:23:43,500
points where the logic will jump

629
00:23:43,500 --> 00:23:46,740
and for zip slip in this case if we

630
00:23:46,740 --> 00:23:48,179
build the Zips if we build the control

631
00:23:48,179 --> 00:23:49,740
flow analysis graph

632
00:23:49,740 --> 00:23:52,020
we can see that this is properly guarded

633
00:23:52,020 --> 00:23:54,299
against by traversing the control flow

634
00:23:54,299 --> 00:23:56,220
graph and seeing that there's a guard in

635
00:23:56,220 --> 00:23:58,799
place for this starts with call that

636
00:23:58,799 --> 00:24:01,260
when it's false or when it yeah when

637
00:24:01,260 --> 00:24:03,299
it's false that logic will not that

638
00:24:03,299 --> 00:24:05,940
vulnerable logic will not be reached and

639
00:24:05,940 --> 00:24:07,679
this lets us know that the vulnerability

640
00:24:07,679 --> 00:24:09,299
is not present and we don't need to fix

641
00:24:09,299 --> 00:24:11,000
it

642
00:24:11,000 --> 00:24:13,320
and so when we put this all together all

643
00:24:13,320 --> 00:24:14,520
these bits of Technology data flow

644
00:24:14,520 --> 00:24:16,260
analysis control flow analysis we're

645
00:24:16,260 --> 00:24:19,679
able to fix zip slip across open source

646
00:24:19,679 --> 00:24:21,299
and this is an example of the fix that

647
00:24:21,299 --> 00:24:22,679
we generated for one of the one of the

648
00:24:22,679 --> 00:24:24,720
projects here's another one where we

649
00:24:24,720 --> 00:24:26,880
also clean up the file Constructor while

650
00:24:26,880 --> 00:24:28,440
we're working on it just to you know be

651
00:24:28,440 --> 00:24:30,539
good developers

652
00:24:30,539 --> 00:24:34,020
um and then yeah so at this point I want

653
00:24:34,020 --> 00:24:35,460
to talk to you about the complicated

654
00:24:35,460 --> 00:24:37,500
nature of polar price generation

655
00:24:37,500 --> 00:24:38,220
um but if you've got security

656
00:24:38,220 --> 00:24:39,480
vulnerabilities

657
00:24:39,480 --> 00:24:42,539
we'll give you a pull request

658
00:24:42,539 --> 00:24:43,740
this is a problem with Polar Express

659
00:24:43,740 --> 00:24:45,539
generation

660
00:24:45,539 --> 00:24:47,220
um one of the problems we have is how

661
00:24:47,220 --> 00:24:50,640
fast can we generate pull requests

662
00:24:50,640 --> 00:24:52,020
if you want to generate a pull request

663
00:24:52,020 --> 00:24:53,220
you have to do three different things

664
00:24:53,220 --> 00:24:55,200
there's file i o git operations and

665
00:24:55,200 --> 00:24:58,080
GitHub API calls file IO is free

666
00:24:58,080 --> 00:24:59,760
basically it's on your machine git

667
00:24:59,760 --> 00:25:02,400
operations are free on GitHub and GitHub

668
00:25:02,400 --> 00:25:04,679
API calls are rate limited so you have

669
00:25:04,679 --> 00:25:05,940
to consider how many of those you're

670
00:25:05,940 --> 00:25:07,020
making

671
00:25:07,020 --> 00:25:08,460
so the first thing you do check out this

672
00:25:08,460 --> 00:25:10,020
source code

673
00:25:10,020 --> 00:25:11,760
branch and apply the diff

674
00:25:11,760 --> 00:25:13,580
Fork the repository which is the first

675
00:25:13,580 --> 00:25:16,500
API called a GitHub

676
00:25:16,500 --> 00:25:18,120
we're bringing the repository on GitHub

677
00:25:18,120 --> 00:25:19,440
and this is important because if you're

678
00:25:19,440 --> 00:25:21,860
forking tens hundreds thousands of

679
00:25:21,860 --> 00:25:23,940
projects you're gonna end up with name

680
00:25:23,940 --> 00:25:25,620
conflicts you need to rename it to a

681
00:25:25,620 --> 00:25:28,580
non-conflicting name

682
00:25:29,039 --> 00:25:31,740
clickers being a little fidgety uh you

683
00:25:31,740 --> 00:25:33,299
push the change and then you create a

684
00:25:33,299 --> 00:25:35,100
pull request on GitHub

685
00:25:35,100 --> 00:25:37,860
so for this we have three API calls to

686
00:25:37,860 --> 00:25:40,620
GitHub and uh for each one of them they

687
00:25:40,620 --> 00:25:42,059
expect you to wait at least one second

688
00:25:42,059 --> 00:25:46,320
per per API call per user

689
00:25:46,320 --> 00:25:48,779
um and on top of that uh there's

690
00:25:48,779 --> 00:25:51,179
additional rate limits that exist on top

691
00:25:51,179 --> 00:25:54,600
of these that they somewhat document and

692
00:25:54,600 --> 00:25:56,940
uh you have to deal with

693
00:25:56,940 --> 00:25:58,679
um so if there's anybody in the audience

694
00:25:58,679 --> 00:26:00,360
from GitHub

695
00:26:00,360 --> 00:26:02,039
um

696
00:26:02,039 --> 00:26:03,900
make my life a lot easier as a security

697
00:26:03,900 --> 00:26:05,700
researcher

698
00:26:05,700 --> 00:26:07,679
um but we made it this far we've

699
00:26:07,679 --> 00:26:09,360
detected the vulnerability we've

700
00:26:09,360 --> 00:26:12,720
detected the style we've fixed the code

701
00:26:12,720 --> 00:26:14,820
um and fixed it in the code fix the code

702
00:26:14,820 --> 00:26:16,620
in the way that the matches the style of

703
00:26:16,620 --> 00:26:17,760
the Developers

704
00:26:17,760 --> 00:26:21,000
and we've bypassed the rate limit

705
00:26:21,000 --> 00:26:22,260
how do we do this for all the

706
00:26:22,260 --> 00:26:23,520
repositories

707
00:26:23,520 --> 00:26:25,140
and for this I'm going to pass it back

708
00:26:25,140 --> 00:26:26,940
to Patrick

709
00:26:26,940 --> 00:26:28,440
thanks

710
00:26:28,440 --> 00:26:30,059
well

711
00:26:30,059 --> 00:26:32,100
you'd never know from the duck he's a

712
00:26:32,100 --> 00:26:33,539
very humble guy

713
00:26:33,539 --> 00:26:34,380
um

714
00:26:34,380 --> 00:26:36,419
but what do you fail to mention is that

715
00:26:36,419 --> 00:26:38,279
control flow and data flow did not exist

716
00:26:38,279 --> 00:26:41,580
in open rewrite prior to uh Jonathan and

717
00:26:41,580 --> 00:26:42,480
Sean

718
00:26:42,480 --> 00:26:45,240
uh these guys they put their heads down

719
00:26:45,240 --> 00:26:47,880
they they had a need for for data flow

720
00:26:47,880 --> 00:26:49,440
and control flow and

721
00:26:49,440 --> 00:26:52,140
it's not easy but they they pulled it

722
00:26:52,140 --> 00:26:53,520
off they put their heads down they

723
00:26:53,520 --> 00:26:55,679
worked hard and on behalf of the

724
00:26:55,679 --> 00:26:57,120
community we definitely want to thank

725
00:26:57,120 --> 00:26:59,100
them for their efforts so

726
00:26:59,100 --> 00:27:01,200
so the next step right he's got his he's

727
00:27:01,200 --> 00:27:03,179
got his pull request he's able to like

728
00:27:03,179 --> 00:27:05,039
find these vulnerabilities across

729
00:27:05,039 --> 00:27:07,380
thousands of thousands and thousands of

730
00:27:07,380 --> 00:27:08,820
projects

731
00:27:08,820 --> 00:27:11,360
well

732
00:27:11,940 --> 00:27:14,100
modern provides a free service for open

733
00:27:14,100 --> 00:27:15,840
source projects

734
00:27:15,840 --> 00:27:18,480
so far it's got like 7 000 projects

735
00:27:18,480 --> 00:27:20,400
ingested into it

736
00:27:20,400 --> 00:27:22,740
um you can run any of its 800 plus

737
00:27:22,740 --> 00:27:25,500
recipes to transform or interrogate

738
00:27:25,500 --> 00:27:28,200
software at scale and generate and

739
00:27:28,200 --> 00:27:30,299
update your pull requests

740
00:27:30,299 --> 00:27:31,980
so

741
00:27:31,980 --> 00:27:34,020
you know

742
00:27:34,020 --> 00:27:35,460
for I'm going to mention framework

743
00:27:35,460 --> 00:27:37,559
migrations in the contents of security

744
00:27:37,559 --> 00:27:39,600
context here

745
00:27:39,600 --> 00:27:41,820
um one of the great things about being

746
00:27:41,820 --> 00:27:44,640
able to automate uh code Transformations

747
00:27:44,640 --> 00:27:48,539
let's take for example uh junit the four

748
00:27:48,539 --> 00:27:50,940
to five migration and spring boot one to

749
00:27:50,940 --> 00:27:53,340
two in order to be secure you need to

750
00:27:53,340 --> 00:27:54,960
get your app from Spring boot one to

751
00:27:54,960 --> 00:27:56,940
Spring boot two in order to get from

752
00:27:56,940 --> 00:27:58,440
swimming boot one to Spring boot two

753
00:27:58,440 --> 00:28:00,419
you've got to go from Jane at four to

754
00:28:00,419 --> 00:28:02,340
five I don't know if you've been through

755
00:28:02,340 --> 00:28:05,340
that process but it's tedious there's an

756
00:28:05,340 --> 00:28:07,140
enormous number of break-in changes so

757
00:28:07,140 --> 00:28:08,820
leveraging the open rewrite framework

758
00:28:08,820 --> 00:28:10,679
we're able to build complete framework

759
00:28:10,679 --> 00:28:13,020
migrations so that

760
00:28:13,020 --> 00:28:17,039
you can have your project be security

761
00:28:17,039 --> 00:28:19,500
aware and current

762
00:28:19,500 --> 00:28:22,260
so anyways back to Modern

763
00:28:22,260 --> 00:28:24,779
will provide the service for open source

764
00:28:24,779 --> 00:28:26,279
projects and Jonathan has been able to

765
00:28:26,279 --> 00:28:29,760
leverage it to build pull requests at

766
00:28:29,760 --> 00:28:33,120
scale so he's able to use his zip slip

767
00:28:33,120 --> 00:28:35,580
recipe his create Tim file directory

768
00:28:35,580 --> 00:28:38,100
recipe and it'll go through it'll detect

769
00:28:38,100 --> 00:28:40,200
changes and actually build these

770
00:28:40,200 --> 00:28:42,299
well-formatted pull requests that are

771
00:28:42,299 --> 00:28:44,520
signed so to give you kind of an example

772
00:28:44,520 --> 00:28:47,039
of how this goes here Jonathan's run his

773
00:28:47,039 --> 00:28:48,900
recipe and he's going to say okay I've

774
00:28:48,900 --> 00:28:50,159
got all these changes I'm going to build

775
00:28:50,159 --> 00:28:51,720
my pull request he's going to go through

776
00:28:51,720 --> 00:28:53,640
and he's going to build a wall formatted

777
00:28:53,640 --> 00:28:56,400
messages he's going to sign his pull

778
00:28:56,400 --> 00:28:59,580
request give it a gpg key and say hey go

779
00:28:59,580 --> 00:29:02,039
off to the races and build pull requests

780
00:29:02,039 --> 00:29:03,659
and send these to all the maintainers

781
00:29:03,659 --> 00:29:06,179
and so this is what Jonathan was able to

782
00:29:06,179 --> 00:29:08,700
leverage it was the last step in the

783
00:29:08,700 --> 00:29:10,200
work that they've put together with

784
00:29:10,200 --> 00:29:13,080
their security recipes and control flow

785
00:29:13,080 --> 00:29:14,820
and dataflow and with that I'll hand it

786
00:29:14,820 --> 00:29:18,080
back to Jonathan

787
00:29:19,100 --> 00:29:21,480
but there's more than seven thousand

788
00:29:21,480 --> 00:29:23,640
repositories in the world right

789
00:29:23,640 --> 00:29:26,580
um it's great that opener indexes those

790
00:29:26,580 --> 00:29:27,840
projects but there are more

791
00:29:27,840 --> 00:29:29,880
vulnerabilities than just that so how do

792
00:29:29,880 --> 00:29:31,440
we identify the other vulnerable

793
00:29:31,440 --> 00:29:34,260
projects so bring it back to uh what we

794
00:29:34,260 --> 00:29:35,640
talked about before I want to talk about

795
00:29:35,640 --> 00:29:37,320
code ql again

796
00:29:37,320 --> 00:29:39,899
um you can write a code query that gives

797
00:29:39,899 --> 00:29:41,279
you a list of projects that are

798
00:29:41,279 --> 00:29:43,799
vulnerable code ql

799
00:29:43,799 --> 00:29:47,159
um indexes over 10 100 000 open source

800
00:29:47,159 --> 00:29:49,080
projects and 35

801
00:29:49,080 --> 00:29:51,720
000 Java projects and so you can write a

802
00:29:51,720 --> 00:29:53,580
query and run it against all these

803
00:29:53,580 --> 00:29:54,899
projects and find the vulnerable

804
00:29:54,899 --> 00:29:56,580
projects and that'll give you a list of

805
00:29:56,580 --> 00:29:58,200
projects that you might want that are

806
00:29:58,200 --> 00:29:59,940
good candidates to fix

807
00:29:59,940 --> 00:30:02,760
and then contribute that list to this

808
00:30:02,760 --> 00:30:04,980
repository and this will make open

809
00:30:04,980 --> 00:30:07,500
rewrite and modern aware of this these

810
00:30:07,500 --> 00:30:09,480
those projects so you can use you can

811
00:30:09,480 --> 00:30:11,580
write recipes to fix against those to

812
00:30:11,580 --> 00:30:12,840
fix those vulnerabilities in those

813
00:30:12,840 --> 00:30:15,320
projects

814
00:30:15,840 --> 00:30:17,279
so finally

815
00:30:17,279 --> 00:30:19,140
with all of these parts let's go

816
00:30:19,140 --> 00:30:21,720
generate some polar price

817
00:30:21,720 --> 00:30:23,760
and this is what I did

818
00:30:23,760 --> 00:30:24,720
um

819
00:30:24,720 --> 00:30:27,480
across all of these different projects

820
00:30:27,480 --> 00:30:28,620
um I have generated quite a few pull

821
00:30:28,620 --> 00:30:30,240
requests the last three are what we've

822
00:30:30,240 --> 00:30:32,820
discussed this in and were made possible

823
00:30:32,820 --> 00:30:35,159
by the work this year

824
00:30:35,159 --> 00:30:37,260
um and uh

825
00:30:37,260 --> 00:30:39,419
as of for the new pull request that I've

826
00:30:39,419 --> 00:30:41,340
generated in 2022

827
00:30:41,340 --> 00:30:44,159
um there have been over five 590. one of

828
00:30:44,159 --> 00:30:46,500
these projects on this list uh the cve

829
00:30:46,500 --> 00:30:50,700
uh 2020 uh array host name uh vulner or

830
00:30:50,700 --> 00:30:52,440
sorry our host name array or flow that

831
00:30:52,440 --> 00:30:53,460
one was actually done by the GitHub

832
00:30:53,460 --> 00:30:55,440
security lab team using the python bot

833
00:30:55,440 --> 00:30:56,820
that I wrote

834
00:30:56,820 --> 00:30:58,020
um but the rest of them were generated

835
00:30:58,020 --> 00:30:59,640
by me and for all of these other

836
00:30:59,640 --> 00:31:02,700
projects uh in total I've generated over

837
00:31:02,700 --> 00:31:06,240
5200 requests it's my name

838
00:31:06,240 --> 00:31:09,179
and one project was the unhappy

839
00:31:09,179 --> 00:31:11,340
recipient of three of the pull requests

840
00:31:11,340 --> 00:31:12,720
that I did this year

841
00:31:12,720 --> 00:31:15,779
um this was a perforce project actually

842
00:31:15,779 --> 00:31:18,659
um so uh we're probably seeing some CVS

843
00:31:18,659 --> 00:31:21,120
out of cves out of this

844
00:31:21,120 --> 00:31:22,980
and this is my contribution graph my

845
00:31:22,980 --> 00:31:25,140
GitHub contribution graph

846
00:31:25,140 --> 00:31:27,299
um for 2022.

847
00:31:27,299 --> 00:31:29,399
um and you can see the contribution you

848
00:31:29,399 --> 00:31:30,360
know the number of contributions

849
00:31:30,360 --> 00:31:31,740
compared to the rest of the year just

850
00:31:31,740 --> 00:31:33,299
you know

851
00:31:33,299 --> 00:31:35,399
so I want to talk about some of the best

852
00:31:35,399 --> 00:31:37,080
practices for about chlorofresh

853
00:31:37,080 --> 00:31:38,399
generation

854
00:31:38,399 --> 00:31:40,320
messaging

855
00:31:40,320 --> 00:31:42,120
you're interacting with maintainers

856
00:31:42,120 --> 00:31:44,399
you're dealing in the process of doing

857
00:31:44,399 --> 00:31:46,039
this you're interacting with real people

858
00:31:46,039 --> 00:31:49,320
and uh developers are pretty normalized

859
00:31:49,320 --> 00:31:52,140
having bugs reported to them but not

860
00:31:52,140 --> 00:31:54,360
necessarily security vulnerabilities

861
00:31:54,360 --> 00:31:54,960
um

862
00:31:54,960 --> 00:31:57,600
the uh security vulnerability like

863
00:31:57,600 --> 00:31:58,919
security vulnerabilities are like you're

864
00:31:58,919 --> 00:32:00,059
telling the maintainer not only have you

865
00:32:00,059 --> 00:32:01,440
written the wrong code but you've also

866
00:32:01,440 --> 00:32:03,059
potentially exposed your end users to

867
00:32:03,059 --> 00:32:05,279
risk and that's a little bit more

868
00:32:05,279 --> 00:32:07,080
sensitive to these people see to to the

869
00:32:07,080 --> 00:32:08,640
maintainers you need to be conscious of

870
00:32:08,640 --> 00:32:11,580
that this is a great saying

871
00:32:11,580 --> 00:32:13,080
all software problems are people

872
00:32:13,080 --> 00:32:15,120
problems in Disguise and this is very

873
00:32:15,120 --> 00:32:16,919
true in this case you need to think

874
00:32:16,919 --> 00:32:18,440
about the people you're interacting with

875
00:32:18,440 --> 00:32:20,580
what you're reporting the vulnerability

876
00:32:20,580 --> 00:32:22,140
you're disclosing

877
00:32:22,140 --> 00:32:23,880
and so I'm going to jump through a

878
00:32:23,880 --> 00:32:25,620
couple lessons as well on top of that uh

879
00:32:25,620 --> 00:32:28,679
lesson one sign off on all your commits

880
00:32:28,679 --> 00:32:29,640
um

881
00:32:29,640 --> 00:32:31,320
this is an example of signed off commit

882
00:32:31,320 --> 00:32:35,580
uh the reason you want to do this is uh

883
00:32:35,580 --> 00:32:37,320
uh there was a bunch of lawsuits against

884
00:32:37,320 --> 00:32:39,299
open source maintainers yada yada yada

885
00:32:39,299 --> 00:32:43,220
tldr lawyers

886
00:32:43,440 --> 00:32:45,720
um if you don't you'll get your pull

887
00:32:45,720 --> 00:32:47,039
request rejected by evil dragon

888
00:32:47,039 --> 00:32:48,779
bureaucrats

889
00:32:48,779 --> 00:32:52,080
lesson number two be a good committee

890
00:32:52,080 --> 00:32:54,000
um gpg sign your commits

891
00:32:54,000 --> 00:32:56,880
this is what it looks like uh and if you

892
00:32:56,880 --> 00:32:58,679
don't you might get impersonated like

893
00:32:58,679 --> 00:33:00,480
liners torvald has been on GitHub a

894
00:33:00,480 --> 00:33:02,640
couple of times

895
00:33:02,640 --> 00:33:05,520
um ccom is a standardized format for

896
00:33:05,520 --> 00:33:07,380
commit messages that are security

897
00:33:07,380 --> 00:33:10,260
related this is what it looks like kind

898
00:33:10,260 --> 00:33:12,059
of I reckon there's not enough time to

899
00:33:12,059 --> 00:33:13,559
discuss it here I recommend looking it

900
00:33:13,559 --> 00:33:16,260
up it's a good structured way of saying

901
00:33:16,260 --> 00:33:17,880
what the vulnerability was in the commit

902
00:33:17,880 --> 00:33:20,100
in the commit history

903
00:33:20,100 --> 00:33:22,559
lesson number four there are risks to

904
00:33:22,559 --> 00:33:24,299
using your personal GitHub account to do

905
00:33:24,299 --> 00:33:25,380
this

906
00:33:25,380 --> 00:33:27,960
um is anybody here familiar uh with

907
00:33:27,960 --> 00:33:31,039
github's angry unicorn

908
00:33:32,460 --> 00:33:36,120
this was my profile for most of 2020.

909
00:33:36,120 --> 00:33:38,880
I broke my GitHub profile doing this

910
00:33:38,880 --> 00:33:40,799
um apparently something generating this

911
00:33:40,799 --> 00:33:42,000
many polar requests can break your

912
00:33:42,000 --> 00:33:43,919
account

913
00:33:43,919 --> 00:33:45,899
um and then uh lesson number five

914
00:33:45,899 --> 00:33:47,880
coordinate with GitHub

915
00:33:47,880 --> 00:33:51,720
uh reach out before uh generating pull

916
00:33:51,720 --> 00:33:54,059
requests and

917
00:33:54,059 --> 00:33:56,700
um uh let them know that you're gonna do

918
00:33:56,700 --> 00:33:59,220
this so you don't get banned basically

919
00:33:59,220 --> 00:33:59,880
um

920
00:33:59,880 --> 00:34:03,600
and then uh I'm a lesson uh consider the

921
00:34:03,600 --> 00:34:05,640
implications

922
00:34:05,640 --> 00:34:09,599
I received this issue shortly after I

923
00:34:09,599 --> 00:34:11,219
reported I started generating pull

924
00:34:11,219 --> 00:34:12,599
requests

925
00:34:12,599 --> 00:34:13,859
and I use the term coordinated

926
00:34:13,859 --> 00:34:18,359
disclosure because uh you know we move

927
00:34:18,359 --> 00:34:19,980
forward it's not about responsible

928
00:34:19,980 --> 00:34:20,820
school it's about according to

929
00:34:20,820 --> 00:34:22,800
disclosure but regardless of what term

930
00:34:22,800 --> 00:34:25,139
you use the answer is no this is full

931
00:34:25,139 --> 00:34:27,239
disclosure of a security vulnerability

932
00:34:27,239 --> 00:34:29,339
so you need to be conscious of that is

933
00:34:29,339 --> 00:34:31,020
it important you need you need to be

934
00:34:31,020 --> 00:34:32,159
clear about the messaging so the

935
00:34:32,159 --> 00:34:33,480
maintainer can do make something

936
00:34:33,480 --> 00:34:36,179
actionable but you need to be aware that

937
00:34:36,179 --> 00:34:38,099
you're potentially dropping an O Day on

938
00:34:38,099 --> 00:34:41,040
an organization a team a group of people

939
00:34:41,040 --> 00:34:43,739
but I argue

940
00:34:43,739 --> 00:34:46,199
that at the scale at which you're able

941
00:34:46,199 --> 00:34:47,639
to fix security vulnerabilities with

942
00:34:47,639 --> 00:34:49,679
this technique if the alternative is not

943
00:34:49,679 --> 00:34:51,418
fixing them at all because there's too

944
00:34:51,418 --> 00:34:52,440
many of them

945
00:34:52,440 --> 00:34:55,020
the trade-offs are worth the downsides

946
00:34:55,020 --> 00:34:57,300
of dropping o days potentially across a

947
00:34:57,300 --> 00:34:59,820
spread of Open Source projects to try to

948
00:34:59,820 --> 00:35:03,560
get those vulnerabilities actually fixed

949
00:35:03,900 --> 00:35:05,760
and so I want to leave you with this

950
00:35:05,760 --> 00:35:07,619
final conclusion

951
00:35:07,619 --> 00:35:10,079
as security researchers

952
00:35:10,079 --> 00:35:11,760
we know that these vulnerable we have

953
00:35:11,760 --> 00:35:15,000
sorry we have an obligation to society

954
00:35:15,000 --> 00:35:16,680
we know these vulnerabilities are out

955
00:35:16,680 --> 00:35:18,359
there we've seen them in pen test

956
00:35:18,359 --> 00:35:20,339
reports we've written them ourselves

957
00:35:20,339 --> 00:35:22,200
we've found them in open source projects

958
00:35:22,200 --> 00:35:23,940
we see them again and again and again

959
00:35:23,940 --> 00:35:27,900
these vulnerabilities are old and they

960
00:35:27,900 --> 00:35:29,280
shouldn't we shouldn't be dealing with

961
00:35:29,280 --> 00:35:30,780
the same old vulnerabilities again and

962
00:35:30,780 --> 00:35:32,640
again and again every single year we

963
00:35:32,640 --> 00:35:34,380
should be looking for new things we're

964
00:35:34,380 --> 00:35:37,260
wasting our time and our energy and our

965
00:35:37,260 --> 00:35:40,700
employers money doing this

966
00:35:40,980 --> 00:35:42,839
there's a state there's a quote from

967
00:35:42,839 --> 00:35:45,119
GitHub for every 500 developers you have

968
00:35:45,119 --> 00:35:47,099
one security researcher

969
00:35:47,099 --> 00:35:49,980
the the statistics the odds are stacked

970
00:35:49,980 --> 00:35:51,599
against us the the number of vulner the

971
00:35:51,599 --> 00:35:53,040
number of vulnerabilities being

972
00:35:53,040 --> 00:35:55,079
developed and written by Developers

973
00:35:55,079 --> 00:35:57,359
there's not enough of us to get these

974
00:35:57,359 --> 00:35:59,339
things fixed to identify them to report

975
00:35:59,339 --> 00:36:02,940
them it just doesn't scale well

976
00:36:02,940 --> 00:36:05,160
and so I argue

977
00:36:05,160 --> 00:36:06,900
that this technique of multiple request

978
00:36:06,900 --> 00:36:08,579
generation is the best way to describe

979
00:36:08,579 --> 00:36:11,280
to scale our knowledge of math science

980
00:36:11,280 --> 00:36:13,980
technology and security vulnerabilities

981
00:36:13,980 --> 00:36:16,079
to have the highest positive impact that

982
00:36:16,079 --> 00:36:18,599
we can in the open source world and the

983
00:36:18,599 --> 00:36:21,599
security of our organizations

984
00:36:21,599 --> 00:36:23,520
and so for this

985
00:36:23,520 --> 00:36:25,380
I want to leave you with one final Dan

986
00:36:25,380 --> 00:36:27,180
Kaminsky quote it's from his Twitter

987
00:36:27,180 --> 00:36:30,740
profile it's there to this day

988
00:36:30,960 --> 00:36:33,300
we can fix it

989
00:36:33,300 --> 00:36:36,420
we have the technology okay we need to

990
00:36:36,420 --> 00:36:38,700
create this technology all right the

991
00:36:38,700 --> 00:36:39,839
policy guys are marking with the

992
00:36:39,839 --> 00:36:40,920
technology

993
00:36:40,920 --> 00:36:44,839
relax We're on it

994
00:36:48,300 --> 00:36:50,520
and so I want to leave you with some

995
00:36:50,520 --> 00:36:53,040
sound bites learn code 2L

996
00:36:53,040 --> 00:36:54,800
um it's an incredibly powerful language

997
00:36:54,800 --> 00:36:56,760
and you can do some really cool things

998
00:36:56,760 --> 00:36:58,680
with it uh contribute to open rewrite

999
00:36:58,680 --> 00:37:01,740
and the deploy your fixes at scale

1000
00:37:01,740 --> 00:37:03,720
and uh

1001
00:37:03,720 --> 00:37:05,880
join the GitHub security lab and open

1002
00:37:05,880 --> 00:37:08,099
red slack channels you can discuss the

1003
00:37:08,099 --> 00:37:10,500
vulnerabilities you want to fix and have

1004
00:37:10,500 --> 00:37:12,300
a really positive impact in the world

1005
00:37:12,300 --> 00:37:14,220
and on top of that I'm not listed on

1006
00:37:14,220 --> 00:37:15,540
there but if you want to get engaged in

1007
00:37:15,540 --> 00:37:16,920
open source security in general and

1008
00:37:16,920 --> 00:37:19,079
discuss these problems

1009
00:37:19,079 --> 00:37:21,900
um consider joining the GitHub security

1010
00:37:21,900 --> 00:37:24,300
sorry consider joining um the Linux

1011
00:37:24,300 --> 00:37:25,260
Foundation open source security

1012
00:37:25,260 --> 00:37:26,760
Foundation where there are active

1013
00:37:26,760 --> 00:37:28,440
conversations going on about open source

1014
00:37:28,440 --> 00:37:32,820
security on a date weekly basis

1015
00:37:32,820 --> 00:37:34,800
um and with that I want to thank human

1016
00:37:34,800 --> 00:37:37,320
my employer uh modern for making this

1017
00:37:37,320 --> 00:37:39,480
possible this technology all of this and

1018
00:37:39,480 --> 00:37:41,339
Lydia Giuliano the speaker black hat

1019
00:37:41,339 --> 00:37:43,500
speaker coach who helped turn this

1020
00:37:43,500 --> 00:37:45,180
presentation into what it was and Sean

1021
00:37:45,180 --> 00:37:47,160
my intern uh for the spectacular

1022
00:37:47,160 --> 00:37:48,900
graphics and the work that we put in

1023
00:37:48,900 --> 00:37:50,820
putting together to make control of what

1024
00:37:50,820 --> 00:37:52,760
happen so

1025
00:37:52,760 --> 00:37:55,879
[Music]

1026
00:37:59,720 --> 00:38:02,819
[Music]

