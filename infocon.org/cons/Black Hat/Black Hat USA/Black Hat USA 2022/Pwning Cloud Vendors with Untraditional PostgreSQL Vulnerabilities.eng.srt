1
00:00:01,700 --> 00:00:03,720
[Music]

2
00:00:03,720 --> 00:00:06,720
foreign

3
00:00:09,019 --> 00:00:11,820
Welcome to our session

4
00:00:11,820 --> 00:00:14,400
today we will talk about unique

5
00:00:14,400 --> 00:00:16,619
vulnerabilities we discovered in the

6
00:00:16,619 --> 00:00:19,440
implementation of possess SQL as a

7
00:00:19,440 --> 00:00:21,359
managed service across multiple Cloud

8
00:00:21,359 --> 00:00:23,340
providers

9
00:00:23,340 --> 00:00:25,619
during the session we will go into the

10
00:00:25,619 --> 00:00:26,939
technical details of the vulnerabilities

11
00:00:26,939 --> 00:00:29,699
how we were able to exploit certain

12
00:00:29,699 --> 00:00:32,220
modifications in the process SQL in

13
00:00:32,220 --> 00:00:34,260
order to get a previous escalation and

14
00:00:34,260 --> 00:00:36,780
also costanant access to other databases

15
00:00:36,780 --> 00:00:39,600
of other customers

16
00:00:39,600 --> 00:00:42,360
um I hope that after this session you

17
00:00:42,360 --> 00:00:44,399
will have much better understanding of

18
00:00:44,399 --> 00:00:47,460
how many services work in general in the

19
00:00:47,460 --> 00:00:48,239
cloud

20
00:00:48,239 --> 00:00:51,719
also about how open source project that

21
00:00:51,719 --> 00:00:54,239
was written 25 years ago was integrated

22
00:00:54,239 --> 00:00:56,699
into a managed service and offered to a

23
00:00:56,699 --> 00:00:58,920
lot of customers some postcode SQL

24
00:00:58,920 --> 00:01:01,020
internals because it's always fun to go

25
00:01:01,020 --> 00:01:04,619
into the internals and how we as The Wiz

26
00:01:04,619 --> 00:01:08,220
research team conduct our research

27
00:01:08,220 --> 00:01:11,040
and just a fun fact all the elephants

28
00:01:11,040 --> 00:01:13,080
you see on the screen are actually AI

29
00:01:13,080 --> 00:01:15,780
generated which is a pretty cool you

30
00:01:15,780 --> 00:01:18,360
will see there was another session

31
00:01:18,360 --> 00:01:21,420
so let's start with a bit about us my

32
00:01:21,420 --> 00:01:23,540
name is

33
00:01:23,900 --> 00:01:26,460
and both of us from the wheel research

34
00:01:26,460 --> 00:01:29,460
team we try to bring groundbreaking new

35
00:01:29,460 --> 00:01:32,040
Research into the cloud industry we

36
00:01:32,040 --> 00:01:35,100
would like to uncover and find new risks

37
00:01:35,100 --> 00:01:37,979
both for protecting our customers but

38
00:01:37,979 --> 00:01:39,900
also to share with the community and

39
00:01:39,900 --> 00:01:42,659
present it here on that stage

40
00:01:42,659 --> 00:01:43,439
um

41
00:01:43,439 --> 00:01:46,799
we add some notable research like oh my

42
00:01:46,799 --> 00:01:49,619
God chaosdb also extra replica which we

43
00:01:49,619 --> 00:01:52,200
are going to talk about today and um

44
00:01:52,200 --> 00:01:55,079
yeah so near would you like to tell us

45
00:01:55,079 --> 00:01:57,000
what is the agenda for today

46
00:01:57,000 --> 00:01:58,200
thank you Shield

47
00:01:58,200 --> 00:02:01,140
so in today's agenda we'll first off

48
00:02:01,140 --> 00:02:03,479
begin with some motivation what actually

49
00:02:03,479 --> 00:02:06,180
led us to research the implementation of

50
00:02:06,180 --> 00:02:08,220
possess SQL across multiple Cloud

51
00:02:08,220 --> 00:02:09,300
vendors

52
00:02:09,300 --> 00:02:11,580
we'll then dive into two implementation

53
00:02:11,580 --> 00:02:13,560
vulnerabilities that was that were

54
00:02:13,560 --> 00:02:15,780
caused by the modifications that cloud

55
00:02:15,780 --> 00:02:17,879
vendors introduced to the possess a SQL

56
00:02:17,879 --> 00:02:18,840
engine

57
00:02:18,840 --> 00:02:21,360
and we also show how we managed to

58
00:02:21,360 --> 00:02:23,400
leverage this kind of vulnerabilities to

59
00:02:23,400 --> 00:02:25,260
gain an unauthorized access to the

60
00:02:25,260 --> 00:02:27,300
databases of other customers using the

61
00:02:27,300 --> 00:02:28,319
service

62
00:02:28,319 --> 00:02:30,660
and we'll finish things off with some

63
00:02:30,660 --> 00:02:32,819
takeaways

64
00:02:32,819 --> 00:02:35,819
so our Story begins in last year's

65
00:02:35,819 --> 00:02:38,580
blackout Europe well my colleagues are

66
00:02:38,580 --> 00:02:43,080
gay and I presented on stage ksdb

67
00:02:43,080 --> 00:02:46,800
we showed that how almost by accident by

68
00:02:46,800 --> 00:02:48,959
left by it's exploiting a chain of

69
00:02:48,959 --> 00:02:51,000
vulnerabilities we were able to gain an

70
00:02:51,000 --> 00:02:52,860
unauthorized access to the database

71
00:02:52,860 --> 00:02:55,440
instances of other customers using one

72
00:02:55,440 --> 00:02:57,599
of azure's Flagship database Solutions

73
00:02:57,599 --> 00:03:00,679
Cosmos DB

74
00:03:03,720 --> 00:03:05,099
thinking

75
00:03:05,099 --> 00:03:08,040
could it be that chaosdb is not an

76
00:03:08,040 --> 00:03:10,500
isolated case and that there are more

77
00:03:10,500 --> 00:03:12,840
cloud services that may be vulnerable to

78
00:03:12,840 --> 00:03:14,459
the similar kind of attacks

79
00:03:14,459 --> 00:03:16,980
so essentially the same developed like a

80
00:03:16,980 --> 00:03:18,840
talk we are already looking for next

81
00:03:18,840 --> 00:03:20,099
Target

82
00:03:20,099 --> 00:03:23,400
so Cosmos DB was a minute service that

83
00:03:23,400 --> 00:03:26,159
that gave us the ability to execute code

84
00:03:26,159 --> 00:03:28,980
on a short environment so we wanted to

85
00:03:28,980 --> 00:03:32,340
find a similar service a managed service

86
00:03:32,340 --> 00:03:34,379
that actually lets us to execute code in

87
00:03:34,379 --> 00:03:36,120
a shared environment a shared

88
00:03:36,120 --> 00:03:38,459
environment is an environment matched by

89
00:03:38,459 --> 00:03:41,340
the cloud vendor that actually hosts the

90
00:03:41,340 --> 00:03:43,500
instances of multiple customers

91
00:03:43,500 --> 00:03:45,840
during the research we found that this

92
00:03:45,840 --> 00:03:47,879
is where Cloud vendors struggle the most

93
00:03:47,879 --> 00:03:49,799
in keeping the customers instances

94
00:03:49,799 --> 00:03:53,040
completely isolated for one another

95
00:03:53,040 --> 00:03:55,319
and we wanted to build database as a

96
00:03:55,319 --> 00:03:56,519
service

97
00:03:56,519 --> 00:03:58,860
databases are one of the most integral

98
00:03:58,860 --> 00:04:01,379
Parts in any organization

99
00:04:01,379 --> 00:04:04,799
making them the attack is Holy Grail

100
00:04:04,799 --> 00:04:06,959
in the end of the day almost every

101
00:04:06,959 --> 00:04:09,000
network operations goal is to get to the

102
00:04:09,000 --> 00:04:09,900
database

103
00:04:09,900 --> 00:04:12,420
so with that that if we manage to find

104
00:04:12,420 --> 00:04:14,519
another vulnerability in database of the

105
00:04:14,519 --> 00:04:16,560
service it sure would have a lot of

106
00:04:16,560 --> 00:04:18,298
impact

107
00:04:18,298 --> 00:04:20,279
so we are looking for a database as a

108
00:04:20,279 --> 00:04:22,860
service that has the ability to execute

109
00:04:22,860 --> 00:04:25,259
code in the form of a feature

110
00:04:25,259 --> 00:04:27,419
and after a good few hours of scouting

111
00:04:27,419 --> 00:04:30,000
or this kind of a service we are pretty

112
00:04:30,000 --> 00:04:31,800
much left empty-handed

113
00:04:31,800 --> 00:04:34,620
apparently Cosmos DB was kind of a

114
00:04:34,620 --> 00:04:36,660
special snowflake in the its direct

115
00:04:36,660 --> 00:04:38,400
ability to actually execute code in a

116
00:04:38,400 --> 00:04:40,500
shared environment

117
00:04:40,500 --> 00:04:42,720
but then we thought that

118
00:04:42,720 --> 00:04:45,240
all of these databases services are

119
00:04:45,240 --> 00:04:47,639
actually based on open source database

120
00:04:47,639 --> 00:04:48,720
Solutions

121
00:04:48,720 --> 00:04:51,000
and one of these database Solutions must

122
00:04:51,000 --> 00:04:52,680
have a feature that will actually let us

123
00:04:52,680 --> 00:04:54,479
to execute code in a kind of

124
00:04:54,479 --> 00:04:56,160
straightforward way

125
00:04:56,160 --> 00:04:57,600
and apparently

126
00:04:57,600 --> 00:05:00,479
poses SQL one of the internet's most

127
00:05:00,479 --> 00:05:02,880
popular database engines a database

128
00:05:02,880 --> 00:05:04,740
agent that is being used across all

129
00:05:04,740 --> 00:05:06,300
major Cloud providers

130
00:05:06,300 --> 00:05:08,400
actually has a very straightforward way

131
00:05:08,400 --> 00:05:11,940
of executing code via SQL

132
00:05:11,940 --> 00:05:14,100
you can execute the following SQL query

133
00:05:14,100 --> 00:05:16,320
which starts with

134
00:05:16,320 --> 00:05:18,120
creating a table that stores the

135
00:05:18,120 --> 00:05:19,500
command's output

136
00:05:19,500 --> 00:05:21,720
executing the command via the copy

137
00:05:21,720 --> 00:05:23,880
statement in this case we are executing

138
00:05:23,880 --> 00:05:25,560
the ID command that shows the Privileges

139
00:05:25,560 --> 00:05:27,720
of the currently running user and then

140
00:05:27,720 --> 00:05:30,000
we'll query the commands result

141
00:05:30,000 --> 00:05:32,820
and executing this command should this

142
00:05:32,820 --> 00:05:34,740
query should give us something that

143
00:05:34,740 --> 00:05:37,639
looks like this

144
00:05:37,860 --> 00:05:40,380
so the last thing we did is to take this

145
00:05:40,380 --> 00:05:42,720
exact SQL query and execute it against

146
00:05:42,720 --> 00:05:45,360
every manage process SQL available on

147
00:05:45,360 --> 00:05:46,380
the market

148
00:05:46,380 --> 00:05:48,900
hoping that at least one of them forgot

149
00:05:48,900 --> 00:05:50,580
about this little trick

150
00:05:50,580 --> 00:05:53,639
but unfortunately without any exception

151
00:05:53,639 --> 00:05:57,419
they all gave us the same error message

152
00:05:57,419 --> 00:05:59,940
stating that we are simply lacking the

153
00:05:59,940 --> 00:06:02,220
Privileges to use the copy statement

154
00:06:02,220 --> 00:06:03,780
and that in order to use the copy

155
00:06:03,780 --> 00:06:07,139
statement we need to be a super user

156
00:06:07,139 --> 00:06:09,240
but I mean the process is secure

157
00:06:09,240 --> 00:06:11,340
privilege model shouldn't be the thing

158
00:06:11,340 --> 00:06:13,500
that stops us from executing code

159
00:06:13,500 --> 00:06:14,940
I mean this is not a real security

160
00:06:14,940 --> 00:06:16,500
burial

161
00:06:16,500 --> 00:06:19,259
how hard could it be to actually manage

162
00:06:19,259 --> 00:06:21,300
to find a vulnerability that will allow

163
00:06:21,300 --> 00:06:23,160
us to elevate our privileges to a super

164
00:06:23,160 --> 00:06:25,560
users and thus gain the ability to

165
00:06:25,560 --> 00:06:28,139
execute commands and then get an inside

166
00:06:28,139 --> 00:06:31,440
look to the service internal workings

167
00:06:31,440 --> 00:06:34,080
and to answer this very question I would

168
00:06:34,080 --> 00:06:36,060
like to invite Shield back to Stage to

169
00:06:36,060 --> 00:06:37,560
walk you through some very cool

170
00:06:37,560 --> 00:06:39,060
vulnerabilities

171
00:06:39,060 --> 00:06:40,560
thanks

172
00:06:40,560 --> 00:06:43,199
okay so we had we took this snippet we

173
00:06:43,199 --> 00:06:45,240
run it across a lot of cloud providers a

174
00:06:45,240 --> 00:06:48,240
lot of managed processor services and

175
00:06:48,240 --> 00:06:51,720
one of them was gcp the Google Cloud

176
00:06:51,720 --> 00:06:54,660
compute and specifically the cloud SQL

177
00:06:54,660 --> 00:06:56,759
service the cloud SQL provide customers

178
00:06:56,759 --> 00:06:59,639
with multiple open sources databases

179
00:06:59,639 --> 00:07:03,180
offerings and and we created in postgres

180
00:07:03,180 --> 00:07:05,520
SQL instance we connected and we tried

181
00:07:05,520 --> 00:07:08,580
to execute code with no success

182
00:07:08,580 --> 00:07:10,440
so the first thing we did is we try to

183
00:07:10,440 --> 00:07:11,460
understand

184
00:07:11,460 --> 00:07:13,800
who are we what permissions do we have

185
00:07:13,800 --> 00:07:15,240
over the database

186
00:07:15,240 --> 00:07:16,979
so we can see that we are running as the

187
00:07:16,979 --> 00:07:18,539
user postgres

188
00:07:18,539 --> 00:07:20,940
and the user postgres is a member of the

189
00:07:20,940 --> 00:07:23,759
cloud SQL super usable and it doesn't

190
00:07:23,759 --> 00:07:25,199
seems like we have special permissions

191
00:07:25,199 --> 00:07:27,479
we are definitely low privileged user

192
00:07:27,479 --> 00:07:29,280
with no permissions

193
00:07:29,280 --> 00:07:31,800
and another user we have in the database

194
00:07:31,800 --> 00:07:34,500
is the cloud SQL admin this is actually

195
00:07:34,500 --> 00:07:36,780
an administrator a super user within a

196
00:07:36,780 --> 00:07:39,419
database and used by Google to manage

197
00:07:39,419 --> 00:07:41,699
this instance and we don't have any

198
00:07:41,699 --> 00:07:43,500
access to it

199
00:07:43,500 --> 00:07:45,539
so we don't have permissions to execute

200
00:07:45,539 --> 00:07:48,599
code and we are not real super users

201
00:07:48,599 --> 00:07:50,759
but apparently

202
00:07:50,759 --> 00:07:53,759
we can create event ringers

203
00:07:53,759 --> 00:07:56,460
now eventually gas is not necessarily

204
00:07:56,460 --> 00:07:58,860
um a dangerous operation in postgres you

205
00:07:58,860 --> 00:08:01,740
just create an event trigger the thing

206
00:08:01,740 --> 00:08:04,620
about event triggers is that only super

207
00:08:04,620 --> 00:08:07,020
users can create event triggers this is

208
00:08:07,020 --> 00:08:08,220
from this screenshot is from the

209
00:08:08,220 --> 00:08:10,620
official process SQL documentation

210
00:08:10,620 --> 00:08:12,300
now this is weird because we don't have

211
00:08:12,300 --> 00:08:14,340
permissions in the database we are not

212
00:08:14,340 --> 00:08:16,259
super users but yet we can create

213
00:08:16,259 --> 00:08:17,639
different triggers

214
00:08:17,639 --> 00:08:20,099
what's going on here and it's not just

215
00:08:20,099 --> 00:08:22,259
the ventricles it's also loading

216
00:08:22,259 --> 00:08:25,139
extensions in process SQL you must be a

217
00:08:25,139 --> 00:08:27,180
super user in order to load most

218
00:08:27,180 --> 00:08:30,060
extensions and here we have a case where

219
00:08:30,060 --> 00:08:32,339
we can actually load extensions this is

220
00:08:32,339 --> 00:08:35,039
also weird something else we noticed is

221
00:08:35,039 --> 00:08:37,620
that we can create a table and change

222
00:08:37,620 --> 00:08:40,380
the owner of the table to another user

223
00:08:40,380 --> 00:08:42,059
to just give it to another user in the

224
00:08:42,059 --> 00:08:44,640
database even users which are not

225
00:08:44,640 --> 00:08:46,380
associated with alcohol

226
00:08:46,380 --> 00:08:48,839
and this is also very not default

227
00:08:48,839 --> 00:08:51,000
Behavior I mean if you have a screenshot

228
00:08:51,000 --> 00:08:52,980
we can create a table let's call it test

229
00:08:52,980 --> 00:08:55,620
table owned by the user postgres we can

230
00:08:55,620 --> 00:08:57,420
actually change the owner to the cloud

231
00:08:57,420 --> 00:08:59,100
SQL admin which we are not associated

232
00:08:59,100 --> 00:08:59,880
with

233
00:08:59,880 --> 00:09:02,519
and this is not the default Behavior

234
00:09:02,519 --> 00:09:05,399
so this made us believe that the process

235
00:09:05,399 --> 00:09:07,500
SQL engine was modified

236
00:09:07,500 --> 00:09:10,399
later we actually discovered that Google

237
00:09:10,399 --> 00:09:13,019
publicly announced this they share this

238
00:09:13,019 --> 00:09:15,420
in their documentation they say that you

239
00:09:15,420 --> 00:09:17,640
cannot create database users that have

240
00:09:17,640 --> 00:09:20,160
super user privileges however you can

241
00:09:20,160 --> 00:09:22,320
create database users with the cloud SQL

242
00:09:22,320 --> 00:09:24,839
super user role which has some super

243
00:09:24,839 --> 00:09:27,000
user privileges including creating

244
00:09:27,000 --> 00:09:28,680
extensions creating event triggers

245
00:09:28,680 --> 00:09:31,019
creating application users

246
00:09:31,019 --> 00:09:33,060
so now we know that the possible engine

247
00:09:33,060 --> 00:09:34,980
was modified

248
00:09:34,980 --> 00:09:38,100
um and we are not really a super user

249
00:09:38,100 --> 00:09:40,860
but also we are not regular user because

250
00:09:40,860 --> 00:09:44,640
we have some super user capabilities

251
00:09:44,640 --> 00:09:47,339
that brought us to raise a very

252
00:09:47,339 --> 00:09:50,040
interesting resource question

253
00:09:50,040 --> 00:09:52,980
can we use those capabilities those

254
00:09:52,980 --> 00:09:54,600
unique capabilities that Google offered

255
00:09:54,600 --> 00:09:57,300
us in order to break the process SQL

256
00:09:57,300 --> 00:10:00,000
security model and use those into to

257
00:10:00,000 --> 00:10:02,279
elevate our privileges

258
00:10:02,279 --> 00:10:04,140
so we were exploring those

259
00:10:04,140 --> 00:10:06,120
functionalities and the ones that caught

260
00:10:06,120 --> 00:10:09,000
our eyes was the option to alter a table

261
00:10:09,000 --> 00:10:11,580
and change the owner of the table to

262
00:10:11,580 --> 00:10:13,440
another user

263
00:10:13,440 --> 00:10:15,540
basically in postgres if we create a

264
00:10:15,540 --> 00:10:17,279
table and we try to change the owner to

265
00:10:17,279 --> 00:10:19,320
a user we are not associated with we

266
00:10:19,320 --> 00:10:20,580
should receive the following error

267
00:10:20,580 --> 00:10:23,160
message that we must be a member of the

268
00:10:23,160 --> 00:10:25,560
world Cloud SQL admin in this case

269
00:10:25,560 --> 00:10:28,380
but in Google it actually worked we

270
00:10:28,380 --> 00:10:30,180
managed to create a table and to change

271
00:10:30,180 --> 00:10:33,120
the owner to the cloud SQL admin

272
00:10:33,120 --> 00:10:35,100
now in order to understand like how

273
00:10:35,100 --> 00:10:36,240
impactful

274
00:10:36,240 --> 00:10:39,839
this capability could be we will do a

275
00:10:39,839 --> 00:10:42,540
very short recap of two very basic

276
00:10:42,540 --> 00:10:44,640
things in postgres

277
00:10:44,640 --> 00:10:47,220
tables and indexes

278
00:10:47,220 --> 00:10:50,279
imagine we have a table called employees

279
00:10:50,279 --> 00:10:52,560
table we have the three records Shear

280
00:10:52,560 --> 00:10:55,860
near and Bill and the table is indexed

281
00:10:55,860 --> 00:10:58,079
by the ID column

282
00:10:58,079 --> 00:11:00,000
whenever we installed a new whenever a

283
00:11:00,000 --> 00:11:02,220
user insert new item to the table the

284
00:11:02,220 --> 00:11:04,380
table has a new item

285
00:11:04,380 --> 00:11:07,860
now postgres supports indexes like any

286
00:11:07,860 --> 00:11:10,140
relational database but also it supports

287
00:11:10,140 --> 00:11:12,899
index functions which mean we can create

288
00:11:12,899 --> 00:11:16,320
an index on a certain column and that

289
00:11:16,320 --> 00:11:17,880
whenever we insert something to the

290
00:11:17,880 --> 00:11:20,459
table it will be indexed based on the

291
00:11:20,459 --> 00:11:23,339
output of a certain function

292
00:11:23,339 --> 00:11:25,200
so every time a user inserts something

293
00:11:25,200 --> 00:11:27,420
to the table the index function behind

294
00:11:27,420 --> 00:11:29,519
the scene the one we declared will be

295
00:11:29,519 --> 00:11:33,180
executed and the new row in data in the

296
00:11:33,180 --> 00:11:34,620
table will be indexed based on the

297
00:11:34,620 --> 00:11:37,079
output of that function

298
00:11:37,079 --> 00:11:40,980
so what is the potential risk here

299
00:11:40,980 --> 00:11:42,899
we have to use a user who perform

300
00:11:42,899 --> 00:11:45,360
inserts or updates and it's not just

301
00:11:45,360 --> 00:11:46,860
insult and updates there is a lot of

302
00:11:46,860 --> 00:11:49,500
commands that actually execute index

303
00:11:49,500 --> 00:11:52,800
functions like analyze and vacuum

304
00:11:52,800 --> 00:11:55,079
if a user performs this operation on a

305
00:11:55,079 --> 00:11:57,779
table behind the scenes an index

306
00:11:57,779 --> 00:11:59,459
function is going to be invoked

307
00:11:59,459 --> 00:12:01,380
and it's not just allow yourself if Bill

308
00:12:01,380 --> 00:12:03,480
will perform an operation on a table

309
00:12:03,480 --> 00:12:06,000
owned by Me by the use of postgres they

310
00:12:06,000 --> 00:12:08,040
will also invoke the index function and

311
00:12:08,040 --> 00:12:09,720
the same goes for super users who

312
00:12:09,720 --> 00:12:11,760
perform operation on our table

313
00:12:11,760 --> 00:12:14,040
now postgres wanted to face this

314
00:12:14,040 --> 00:12:16,320
potential security risk and they wanted

315
00:12:16,320 --> 00:12:18,120
to avoid the situation where users

316
00:12:18,120 --> 00:12:20,760
accidentally invoke functions they don't

317
00:12:20,760 --> 00:12:23,700
know about so they added a mitigation

318
00:12:23,700 --> 00:12:26,940
for these exactly issues 13 years ago

319
00:12:26,940 --> 00:12:29,160
they decided that whenever a user

320
00:12:29,160 --> 00:12:31,560
perform an operation on a table

321
00:12:31,560 --> 00:12:33,839
the index function behind the scene will

322
00:12:33,839 --> 00:12:36,600
be executed with the permissions of the

323
00:12:36,600 --> 00:12:38,339
table owner

324
00:12:38,339 --> 00:12:41,700
so if a super user is performing insert

325
00:12:41,700 --> 00:12:43,620
on the table the index function will

326
00:12:43,620 --> 00:12:45,120
still be called with the permissions of

327
00:12:45,120 --> 00:12:47,040
the user postgres because the user

328
00:12:47,040 --> 00:12:50,160
podcasts are the one on the table

329
00:12:50,160 --> 00:12:52,260
now here maybe some of you already have

330
00:12:52,260 --> 00:12:54,839
an idea of how this behavior is going to

331
00:12:54,839 --> 00:12:58,500
be exploited what would happen if we we

332
00:12:58,500 --> 00:13:00,720
create a table and then change the owner

333
00:13:00,720 --> 00:13:03,720
of the table to Cloud SQL admin we will

334
00:13:03,720 --> 00:13:05,880
create a table with an index function

335
00:13:05,880 --> 00:13:07,440
and then we will change the owner

336
00:13:07,440 --> 00:13:10,200
because Google allow us to do so

337
00:13:10,200 --> 00:13:13,620
in that case if the table will be owned

338
00:13:13,620 --> 00:13:16,500
by the cloud SQL admin the super user

339
00:13:16,500 --> 00:13:19,079
every time someone will perform an

340
00:13:19,079 --> 00:13:21,000
operation on the table like insert or

341
00:13:21,000 --> 00:13:23,279
update the index function which we

342
00:13:23,279 --> 00:13:26,279
declared will be executed with the cloud

343
00:13:26,279 --> 00:13:28,139
SQL admin permissions

344
00:13:28,139 --> 00:13:30,480
all we have to do now is just to replace

345
00:13:30,480 --> 00:13:33,660
the index function with an evil function

346
00:13:33,660 --> 00:13:36,120
and let's say we will craft an evil

347
00:13:36,120 --> 00:13:38,220
function with the following code that

348
00:13:38,220 --> 00:13:40,320
execute the ID command

349
00:13:40,320 --> 00:13:42,060
after performing an operation on the

350
00:13:42,060 --> 00:13:45,000
table it could be insert update analyze

351
00:13:45,000 --> 00:13:46,079
vacuum

352
00:13:46,079 --> 00:13:47,940
we will get the follow results

353
00:13:47,940 --> 00:13:51,060
we will actually able to execute code on

354
00:13:51,060 --> 00:13:52,920
the possible SQL instance of Google this

355
00:13:52,920 --> 00:13:56,120
is the output of the ID command

356
00:13:56,120 --> 00:14:01,019
we were able to gain a code execution on

357
00:14:01,019 --> 00:14:03,180
a managed instance on the on managed by

358
00:14:03,180 --> 00:14:05,339
Google and we were very excited to

359
00:14:05,339 --> 00:14:07,320
explore the internal environment of the

360
00:14:07,320 --> 00:14:08,639
minute service

361
00:14:08,639 --> 00:14:10,860
we know that we are currently probably

362
00:14:10,860 --> 00:14:13,500
running inside an internal Network and

363
00:14:13,500 --> 00:14:16,740
like a shared environment and we execute

364
00:14:16,740 --> 00:14:19,320
code with the permission of the modified

365
00:14:19,320 --> 00:14:20,940
process SQL instance

366
00:14:20,940 --> 00:14:23,100
so we started doing some Recon

367
00:14:23,100 --> 00:14:24,600
and we discovered that we are running

368
00:14:24,600 --> 00:14:26,279
inside a Docker container

369
00:14:26,279 --> 00:14:27,959
and the document container is probably

370
00:14:27,959 --> 00:14:30,060
running inside the virtual machine

371
00:14:30,060 --> 00:14:32,579
we also noticed that we have an network

372
00:14:32,579 --> 00:14:36,600
interface shared with the host it was a

373
00:14:36,600 --> 00:14:41,579
shared namespace with the 10.128 subnet

374
00:14:41,579 --> 00:14:43,500
we were able to find private escalation

375
00:14:43,500 --> 00:14:45,540
vulnerability in order to gain wood

376
00:14:45,540 --> 00:14:47,760
access within the docker container then

377
00:14:47,760 --> 00:14:49,680
we used the good access in order to

378
00:14:49,680 --> 00:14:51,600
escape the container and get a good

379
00:14:51,600 --> 00:14:53,820
access to the virtual machine

380
00:14:53,820 --> 00:14:55,139
from there we were able to see the

381
00:14:55,139 --> 00:14:57,120
control plane the components that manage

382
00:14:57,120 --> 00:15:00,600
our service and also other processor

383
00:15:00,600 --> 00:15:02,399
scale instances that were accessible

384
00:15:02,399 --> 00:15:04,500
through the local network

385
00:15:04,500 --> 00:15:06,240
later we discovered that those are

386
00:15:06,240 --> 00:15:08,279
actually our own instances because we

387
00:15:08,279 --> 00:15:10,260
choose the high availability feature in

388
00:15:10,260 --> 00:15:12,779
a postgres we got some replications and

389
00:15:12,779 --> 00:15:14,880
this is actually a replica the

390
00:15:14,880 --> 00:15:17,639
applications of our own database

391
00:15:17,639 --> 00:15:19,980
in that moment of the research we

392
00:15:19,980 --> 00:15:21,779
received a very surprising email from

393
00:15:21,779 --> 00:15:23,959
Google

394
00:15:24,540 --> 00:15:27,180
they sent us an email on a very old

395
00:15:27,180 --> 00:15:28,800
disclosure thread we had with them

396
00:15:28,800 --> 00:15:31,019
regarding another vulnerability and they

397
00:15:31,019 --> 00:15:33,480
said like hey Dell wanted to ask in case

398
00:15:33,480 --> 00:15:35,579
it was your one of your colleagues every

399
00:15:35,579 --> 00:15:38,339
Fox every folks doing research on cloud

400
00:15:38,339 --> 00:15:40,260
SQL would you mind sharing your podcast

401
00:15:40,260 --> 00:15:41,820
if so

402
00:15:41,820 --> 00:15:43,860
now that was the first time I mean we do

403
00:15:43,860 --> 00:15:45,120
a lot of cloud research that was the

404
00:15:45,120 --> 00:15:47,399
first time you got caught

405
00:15:47,399 --> 00:15:49,980
um so we wrapped everything up we wrote

406
00:15:49,980 --> 00:15:51,959
very detailed reports and we shared it

407
00:15:51,959 --> 00:15:54,060
with a friends at Google

408
00:15:54,060 --> 00:15:55,860
and at that point we were very excited

409
00:15:55,860 --> 00:15:57,779
about our finding and we know that Bobby

410
00:15:57,779 --> 00:15:59,639
there is a lot of other vendors we can

411
00:15:59,639 --> 00:16:02,279
go and check if they did similar

412
00:16:02,279 --> 00:16:04,199
modifications maybe we can find similar

413
00:16:04,199 --> 00:16:05,519
vulnerabilities

414
00:16:05,519 --> 00:16:08,519
so that brings us for the next example

415
00:16:08,519 --> 00:16:12,240
the Azure process SQL flexible server

416
00:16:12,240 --> 00:16:14,100
because also Azure will provide manage

417
00:16:14,100 --> 00:16:16,860
progress and maybe they do they did the

418
00:16:16,860 --> 00:16:18,120
same things

419
00:16:18,120 --> 00:16:21,240
so first thing we felt lucky we were

420
00:16:21,240 --> 00:16:23,339
just log into the Azure process SQL

421
00:16:23,339 --> 00:16:25,079
instance and trying to execute code to

422
00:16:25,079 --> 00:16:26,399
straightforward way

423
00:16:26,399 --> 00:16:28,980
and same as we had with Google we had

424
00:16:28,980 --> 00:16:31,260
here we must be a super user or a member

425
00:16:31,260 --> 00:16:32,940
of the PGA execute server program in

426
00:16:32,940 --> 00:16:34,740
order to execute code

427
00:16:34,740 --> 00:16:37,139
so same as we did with Google same as we

428
00:16:37,139 --> 00:16:39,540
do here we check which permissions do we

429
00:16:39,540 --> 00:16:40,500
have

430
00:16:40,500 --> 00:16:42,480
so we're running as the user postgres

431
00:16:42,480 --> 00:16:44,940
and we are a member of the Azure PG

432
00:16:44,940 --> 00:16:48,959
admin which is azure unicrow which it

433
00:16:48,959 --> 00:16:50,040
doesn't seems like we have a lot of

434
00:16:50,040 --> 00:16:51,480
permissions we do have some walls but

435
00:16:51,480 --> 00:16:53,519
they're not that interesting and we

436
00:16:53,519 --> 00:16:55,800
don't have permissions to execute code

437
00:16:55,800 --> 00:16:57,540
but

438
00:16:57,540 --> 00:16:59,880
we do have some privileged capabilities

439
00:16:59,880 --> 00:17:02,579
like creating event triggers

440
00:17:02,579 --> 00:17:04,439
and

441
00:17:04,439 --> 00:17:06,599
in addition we also have the option to

442
00:17:06,599 --> 00:17:08,339
create a checkpoints

443
00:17:08,339 --> 00:17:10,859
not risky operation but recording the

444
00:17:10,859 --> 00:17:13,079
documentation you need to be super user

445
00:17:13,079 --> 00:17:14,699
in order to create checkpoints

446
00:17:14,699 --> 00:17:17,280
and same with Google we can also load

447
00:17:17,280 --> 00:17:19,380
extensions

448
00:17:19,380 --> 00:17:22,500
so publicly modify the process SQL just

449
00:17:22,500 --> 00:17:24,480
the same as Google did and it's actually

450
00:17:24,480 --> 00:17:26,220
it's pretty astonishing

451
00:17:26,220 --> 00:17:29,880
two vendors two different code bases all

452
00:17:29,880 --> 00:17:31,260
wanted to introduce the same

453
00:17:31,260 --> 00:17:33,419
capabilities

454
00:17:33,419 --> 00:17:36,720
but in Azure something else got all eyes

455
00:17:36,720 --> 00:17:40,640
they provide us the creatable permission

456
00:17:41,340 --> 00:17:43,080
now create for permission is actually

457
00:17:43,080 --> 00:17:46,080
pretty popular among a cloud managed

458
00:17:46,080 --> 00:17:49,260
services and they tend to provide this

459
00:17:49,260 --> 00:17:53,039
this capability over this permission but

460
00:17:53,039 --> 00:17:55,140
all everyone every time you do that you

461
00:17:55,140 --> 00:17:57,179
must restrict it

462
00:17:57,179 --> 00:17:58,679
because this is a very powerful

463
00:17:58,679 --> 00:17:59,760
permission

464
00:17:59,760 --> 00:18:01,380
according to the process SQL

465
00:18:01,380 --> 00:18:02,700
documentation

466
00:18:02,700 --> 00:18:04,500
you must be careful with the create

467
00:18:04,500 --> 00:18:05,760
World privilege

468
00:18:05,760 --> 00:18:07,980
it's a goal if a role does not have a

469
00:18:07,980 --> 00:18:10,080
certain privilege but is allowed to

470
00:18:10,080 --> 00:18:12,179
create other walls it can easily create

471
00:18:12,179 --> 00:18:14,100
another role with different privileges

472
00:18:14,100 --> 00:18:15,419
than its own

473
00:18:15,419 --> 00:18:18,059
and therefore the guard walls that have

474
00:18:18,059 --> 00:18:20,460
great wall privilege as almost super

475
00:18:20,460 --> 00:18:23,940
users almost super usables

476
00:18:23,940 --> 00:18:25,320
so

477
00:18:25,320 --> 00:18:27,299
we know that we can create I mean we

478
00:18:27,299 --> 00:18:28,740
don't know yet but we believe that we

479
00:18:28,740 --> 00:18:31,799
can create new users and specify unique

480
00:18:31,799 --> 00:18:34,260
roles which roles can we provide a new

481
00:18:34,260 --> 00:18:36,419
user in postgres so here is the list of

482
00:18:36,419 --> 00:18:37,980
the most powerful walls we can provide

483
00:18:37,980 --> 00:18:39,059
it

484
00:18:39,059 --> 00:18:41,940
we can provide it with PG readable files

485
00:18:41,940 --> 00:18:44,039
which will allow us to read files from

486
00:18:44,039 --> 00:18:45,240
the file system

487
00:18:45,240 --> 00:18:47,340
beautiful pretty powerful

488
00:18:47,340 --> 00:18:49,860
also we can specify the PG right server

489
00:18:49,860 --> 00:18:51,720
files which will allow us to write files

490
00:18:51,720 --> 00:18:53,460
to the file system

491
00:18:53,460 --> 00:18:55,980
but last the most powerful permission or

492
00:18:55,980 --> 00:18:58,260
the most powerful wall PG execute server

493
00:18:58,260 --> 00:18:59,820
program which will allow us to execute

494
00:18:59,820 --> 00:19:02,580
code if we will have this permission

495
00:19:02,580 --> 00:19:04,919
so next thing we did we created the new

496
00:19:04,919 --> 00:19:08,400
user we called it James and we specify

497
00:19:08,400 --> 00:19:11,820
all those three privileges little files

498
00:19:11,820 --> 00:19:14,160
lots of files and executes server

499
00:19:14,160 --> 00:19:15,360
program

500
00:19:15,360 --> 00:19:17,880
and it worked we actually were able to

501
00:19:17,880 --> 00:19:20,700
create a new user and now we have a user

502
00:19:20,700 --> 00:19:22,980
called James with those very powerful

503
00:19:22,980 --> 00:19:24,600
permissions

504
00:19:24,600 --> 00:19:27,720
so next thing we did we logged in as the

505
00:19:27,720 --> 00:19:29,400
user James

506
00:19:29,400 --> 00:19:33,059
and we execute the following SQL query

507
00:19:33,059 --> 00:19:35,400
now here we did not want to I mean we

508
00:19:35,400 --> 00:19:37,039
didn't even execute the ID command

509
00:19:37,039 --> 00:19:41,059
straightforward follows shell

510
00:19:41,160 --> 00:19:45,120
and it worked

511
00:19:45,120 --> 00:19:49,580
we're actually getting yeah we can

512
00:19:53,580 --> 00:19:56,520
we were able to get a reversal to Azure

513
00:19:56,520 --> 00:19:58,799
managed instance and same as well with

514
00:19:58,799 --> 00:20:00,780
Google we were very excited we have a

515
00:20:00,780 --> 00:20:03,179
new environment to Recon to resellers to

516
00:20:03,179 --> 00:20:05,280
understand where are we what can we do

517
00:20:05,280 --> 00:20:07,640
from there and what is the possibilities

518
00:20:07,640 --> 00:20:09,840
and we can actually achieve this

519
00:20:09,840 --> 00:20:10,980
vulnerability

520
00:20:10,980 --> 00:20:13,320
and this is the time to invite Neil to

521
00:20:13,320 --> 00:20:16,559
Stage to go over the extra replica

522
00:20:16,559 --> 00:20:18,660
vulnerability and now we gain constant

523
00:20:18,660 --> 00:20:20,520
access to the databases of other

524
00:20:20,520 --> 00:20:22,440
customers

525
00:20:22,440 --> 00:20:23,880
thank you

526
00:20:23,880 --> 00:20:26,039
so as you mentioned I'm going to show

527
00:20:26,039 --> 00:20:27,960
you how you're able to leverage this

528
00:20:27,960 --> 00:20:29,760
kind of vulnerabilities to gain an

529
00:20:29,760 --> 00:20:31,980
unauthorized access to the databases of

530
00:20:31,980 --> 00:20:34,559
other customers using the service

531
00:20:34,559 --> 00:20:37,320
so this is what will be gone we know

532
00:20:37,320 --> 00:20:39,299
that we are running inside inside of

533
00:20:39,299 --> 00:20:40,980
some sort of an Azure modified version

534
00:20:40,980 --> 00:20:42,900
or possess SQL

535
00:20:42,900 --> 00:20:45,480
and after doing some basic icon we

536
00:20:45,480 --> 00:20:46,679
realized that we are actually running

537
00:20:46,679 --> 00:20:49,140
inside of a dedicated Docker container

538
00:20:49,140 --> 00:20:52,260
and that this dedicated token container

539
00:20:52,260 --> 00:20:54,480
actually runs on top of a dedicated

540
00:20:54,480 --> 00:20:56,280
virtual machine

541
00:20:56,280 --> 00:20:58,919
next we executed the if config command

542
00:20:58,919 --> 00:21:01,260
to see which network interfaces do we

543
00:21:01,260 --> 00:21:01,980
have

544
00:21:01,980 --> 00:21:03,780
this is where we learned that our

545
00:21:03,780 --> 00:21:05,460
virtual machine is actually a part of

546
00:21:05,460 --> 00:21:07,140
two subnets

547
00:21:07,140 --> 00:21:09,539
and this made us assume that we are

548
00:21:09,539 --> 00:21:11,280
actually a part of some sort of an Azure

549
00:21:11,280 --> 00:21:12,660
internal Network

550
00:21:12,660 --> 00:21:15,000
but we still don't know what are these

551
00:21:15,000 --> 00:21:16,980
Network subnets

552
00:21:16,980 --> 00:21:19,860
so to try to answer this question we

553
00:21:19,860 --> 00:21:22,260
actually use the nmap port scanning tool

554
00:21:22,260 --> 00:21:24,360
to try to map the host within the Azure

555
00:21:24,360 --> 00:21:26,880
internal Network and this command

556
00:21:26,880 --> 00:21:28,440
essentially checks if there are other

557
00:21:28,440 --> 00:21:31,200
poses SQL instances within that Network

558
00:21:31,200 --> 00:21:34,200
and as it turns out within the Azure

559
00:21:34,200 --> 00:21:37,140
internal Network there were other 212

560
00:21:37,140 --> 00:21:38,760
database instances

561
00:21:38,760 --> 00:21:41,159
meaning host that we can connect to so

562
00:21:41,159 --> 00:21:45,299
what deposit csql default Port 5432

563
00:21:45,299 --> 00:21:47,940
now at this point we wondered

564
00:21:47,940 --> 00:21:50,340
are these our instances the same way it

565
00:21:50,340 --> 00:21:51,780
was the gcp

566
00:21:51,780 --> 00:21:54,720
so we really hope not first of all we

567
00:21:54,720 --> 00:21:57,600
wanted to prove cost any taxes and we

568
00:21:57,600 --> 00:21:58,740
were really hoping that we are not

569
00:21:58,740 --> 00:22:01,320
paying for 212 plus this instances

570
00:22:01,320 --> 00:22:04,559
because in the cloud you can never know

571
00:22:04,559 --> 00:22:07,740
so we have a direct connection to other

572
00:22:07,740 --> 00:22:10,980
customer databases but we like to the

573
00:22:10,980 --> 00:22:12,900
appropriate credentials to actually do

574
00:22:12,900 --> 00:22:15,240
any meaningful actions

575
00:22:15,240 --> 00:22:17,580
so the next thing we did is something

576
00:22:17,580 --> 00:22:19,980
that we're doing almost every almost

577
00:22:19,980 --> 00:22:21,900
almost every cost Talent research and is

578
00:22:21,900 --> 00:22:23,520
to examine the default configuration

579
00:22:23,520 --> 00:22:26,760
coming with the virtual machine image

580
00:22:26,760 --> 00:22:29,640
being a managed service this means that

581
00:22:29,640 --> 00:22:31,860
all of the instances are running the

582
00:22:31,860 --> 00:22:34,320
same image with the same configuration

583
00:22:34,320 --> 00:22:36,299
this means that if we'll be able to find

584
00:22:36,299 --> 00:22:38,880
an exploitable misconfiguration it is

585
00:22:38,880 --> 00:22:41,700
applicable to other customer instances

586
00:22:41,700 --> 00:22:44,400
so we examine the for this SQL

587
00:22:44,400 --> 00:22:47,039
authentication configuration files we

588
00:22:47,039 --> 00:22:49,500
first examined the pghbi conf which is

589
00:22:49,500 --> 00:22:51,419
the process SQL authentication

590
00:22:51,419 --> 00:22:53,700
configuration file this file dictates

591
00:22:53,700 --> 00:22:57,059
who can connect to which database

592
00:22:57,059 --> 00:22:59,880
and we also examined the PG ident file

593
00:22:59,880 --> 00:23:02,220
the page ident file is essentially an

594
00:23:02,220 --> 00:23:05,100
extension to the pg HBA file detailing

595
00:23:05,100 --> 00:23:07,320
further configuration for more advanced

596
00:23:07,320 --> 00:23:09,539
authentication mechanisms authentication

597
00:23:09,539 --> 00:23:11,220
mechanisms that are a bit more advanced

598
00:23:11,220 --> 00:23:12,419
than the usual user password

599
00:23:12,419 --> 00:23:14,700
authentication

600
00:23:14,700 --> 00:23:17,640
so here's the short snippet of the PG

601
00:23:17,640 --> 00:23:20,520
HBA file we found on our machine and we

602
00:23:20,520 --> 00:23:22,860
noticed that this file is

603
00:23:22,860 --> 00:23:24,659
very different from the different one

604
00:23:24,659 --> 00:23:27,419
coming before this pause this and what

605
00:23:27,419 --> 00:23:30,059
actually photo eyes are the three less

606
00:23:30,059 --> 00:23:31,320
lines

607
00:23:31,320 --> 00:23:33,720
so to understand why let's pass it

608
00:23:33,720 --> 00:23:34,620
together

609
00:23:34,620 --> 00:23:37,380
so essentially these three lines say

610
00:23:37,380 --> 00:23:39,179
that in order to authenticate to the

611
00:23:39,179 --> 00:23:40,919
replication database

612
00:23:40,919 --> 00:23:43,140
we need to authenticate as the

613
00:23:43,140 --> 00:23:46,080
replication user and we can only do that

614
00:23:46,080 --> 00:23:48,659
through a set of internal subnets one of

615
00:23:48,659 --> 00:23:50,640
them is the 10.0.0 subnet we've seen

616
00:23:50,640 --> 00:23:51,659
before

617
00:23:51,659 --> 00:23:53,820
and the authentication mechanism for

618
00:23:53,820 --> 00:23:55,919
that user is client certificate

619
00:23:55,919 --> 00:23:58,580
Authentication

620
00:23:59,400 --> 00:24:01,080
this means that if you want to

621
00:24:01,080 --> 00:24:03,480
authenticate to the application database

622
00:24:03,480 --> 00:24:06,240
for another possess SQL instance within

623
00:24:06,240 --> 00:24:08,460
the Azure internal Network we need to

624
00:24:08,460 --> 00:24:11,220
supply some sort of a valid certificate

625
00:24:11,220 --> 00:24:13,559
but how does a valid certificate even

626
00:24:13,559 --> 00:24:15,539
looks like

627
00:24:15,539 --> 00:24:17,880
this is exactly where the PG identifier

628
00:24:17,880 --> 00:24:19,140
comes into play

629
00:24:19,140 --> 00:24:21,360
the PG ident file has two regular

630
00:24:21,360 --> 00:24:23,640
Expressions that are being used in order

631
00:24:23,640 --> 00:24:27,000
to validate the certificate subject name

632
00:24:27,000 --> 00:24:28,980
you may notice that both of the legal

633
00:24:28,980 --> 00:24:31,200
expression actually contains some sort

634
00:24:31,200 --> 00:24:33,539
of some sort of unique identifier

635
00:24:33,539 --> 00:24:35,460
this is actually the hostname of the

636
00:24:35,460 --> 00:24:37,380
virtual machine hosting the positive SQL

637
00:24:37,380 --> 00:24:39,900
instance and this this is unique

638
00:24:39,900 --> 00:24:42,000
identifier for each instance

639
00:24:42,000 --> 00:24:44,159
meaning the regular expression actually

640
00:24:44,159 --> 00:24:46,080
varies from the from instance to

641
00:24:46,080 --> 00:24:48,299
instance and there isn't just one

642
00:24:48,299 --> 00:24:49,799
certificate that can be used to

643
00:24:49,799 --> 00:24:52,740
authenticate to all instances rather a

644
00:24:52,740 --> 00:24:54,960
new certificate needs to be issued for

645
00:24:54,960 --> 00:24:56,400
every new instance

646
00:24:56,400 --> 00:24:58,380
okay so we'll begin with the second

647
00:24:58,380 --> 00:25:00,720
regular expression because it's a bit

648
00:25:00,720 --> 00:25:02,400
more easier

649
00:25:02,400 --> 00:25:04,559
so essentially it will supply

650
00:25:04,559 --> 00:25:07,620
certificate that begins with RL which I

651
00:25:07,620 --> 00:25:09,299
can only assume it stands for

652
00:25:09,299 --> 00:25:10,320
application

653
00:25:10,320 --> 00:25:12,299
the unique identifier of the database

654
00:25:12,299 --> 00:25:14,419
code osdb

655
00:25:14,419 --> 00:25:17,280
acline.ms we can authenticate to the

656
00:25:17,280 --> 00:25:18,840
replication user

657
00:25:18,840 --> 00:25:22,080
now because only Microsoft is the owner

658
00:25:22,080 --> 00:25:24,600
of the azclan.ms domain they're the only

659
00:25:24,600 --> 00:25:27,179
ones who can issue this certificate

660
00:25:27,179 --> 00:25:29,640
okay so it's pretty straightforward

661
00:25:29,640 --> 00:25:32,400
but things get a bit more complicated

662
00:25:32,400 --> 00:25:34,260
when it comes to the first angular

663
00:25:34,260 --> 00:25:35,760
expression

664
00:25:35,760 --> 00:25:38,220
because it actually utilizes regular

665
00:25:38,220 --> 00:25:40,620
expression matching groups this means

666
00:25:40,620 --> 00:25:42,360
that the identity of the user will

667
00:25:42,360 --> 00:25:45,240
authenticating to is determined by the

668
00:25:45,240 --> 00:25:48,059
prefix of the subject name

669
00:25:48,059 --> 00:25:51,000
this means that if we Supply certificate

670
00:25:51,000 --> 00:25:53,760
that has the prefix of application we

671
00:25:53,760 --> 00:25:56,880
can authenticate to the replication user

672
00:25:56,880 --> 00:25:59,580
same goes with if we Supply the prefix

673
00:25:59,580 --> 00:26:02,840
nil we can authenticate to the username

674
00:26:02,840 --> 00:26:06,840
so on and so forth

675
00:26:06,840 --> 00:26:08,220
but now

676
00:26:08,220 --> 00:26:11,279
maybe some Eagles are spectators in the

677
00:26:11,279 --> 00:26:13,679
audience May notice that this cellular

678
00:26:13,679 --> 00:26:15,419
expression is

679
00:26:15,419 --> 00:26:19,220
a bit of a permissive

680
00:26:20,460 --> 00:26:21,840
because it actually ends with a wild

681
00:26:21,840 --> 00:26:23,340
cloud

682
00:26:23,340 --> 00:26:25,440
this is quite an easy misconfiguration

683
00:26:25,440 --> 00:26:27,480
that we can exploit

684
00:26:27,480 --> 00:26:29,880
this means that while we are not the

685
00:26:29,880 --> 00:26:32,159
owner of the azure.com domain and thus

686
00:26:32,159 --> 00:26:34,860
we cannot issue this certificate

687
00:26:34,860 --> 00:26:37,320
we can actually take the inside entire

688
00:26:37,320 --> 00:26:39,179
subject name of the domain we want to

689
00:26:39,179 --> 00:26:41,940
authenticate to and register it under a

690
00:26:41,940 --> 00:26:44,880
domain of our control in this case

691
00:26:44,880 --> 00:26:47,700
with research.com

692
00:26:47,700 --> 00:26:49,919
this subject name will be also validated

693
00:26:49,919 --> 00:26:51,960
by the cellular expression and will

694
00:26:51,960 --> 00:26:53,700
actually let us to authenticate to the

695
00:26:53,700 --> 00:26:56,120
database

696
00:26:56,520 --> 00:26:59,159
so if we examine the pghbi file one more

697
00:26:59,159 --> 00:27:01,080
time in order to authenticate to the

698
00:27:01,080 --> 00:27:03,659
application user we need to have an IP

699
00:27:03,659 --> 00:27:07,140
address in the 10. subnet which we have

700
00:27:07,140 --> 00:27:09,299
and we need to supply a valid

701
00:27:09,299 --> 00:27:11,640
certificate which we can

702
00:27:11,640 --> 00:27:14,100
so the next one we did is to actually

703
00:27:14,100 --> 00:27:16,740
try to authenticate to that database

704
00:27:16,740 --> 00:27:20,039
and to our surprise we got the following

705
00:27:20,039 --> 00:27:21,480
error message

706
00:27:21,480 --> 00:27:23,279
stating that the replication database

707
00:27:23,279 --> 00:27:26,820
simply does not exist

708
00:27:26,820 --> 00:27:29,159
but it does not make any sense

709
00:27:29,159 --> 00:27:31,380
why would the Azure have a specific

710
00:27:31,380 --> 00:27:33,659
configuration for a database that is not

711
00:27:33,659 --> 00:27:34,980
Dell

712
00:27:34,980 --> 00:27:37,919
so apparently the replication database

713
00:27:37,919 --> 00:27:40,799
is not a real database it's a pseudo

714
00:27:40,799 --> 00:27:42,419
database

715
00:27:42,419 --> 00:27:45,419
and connecting to this database actually

716
00:27:45,419 --> 00:27:47,460
lets you to replicate the entire

717
00:27:47,460 --> 00:27:49,740
postgres SQL instance and not just a

718
00:27:49,740 --> 00:27:51,360
specific database

719
00:27:51,360 --> 00:27:53,279
and we can do that by using one of the

720
00:27:53,279 --> 00:27:55,559
built-in postgres SQL utilities called

721
00:27:55,559 --> 00:27:57,960
PG based backup

722
00:27:57,960 --> 00:28:00,600
so we have everything that we need in

723
00:28:00,600 --> 00:28:04,340
order to start replicating databases

724
00:28:04,380 --> 00:28:07,740
now in every other presentation this is

725
00:28:07,740 --> 00:28:09,480
the point I will show you a live demo of

726
00:28:09,480 --> 00:28:11,640
the vulnerability but being a cloud

727
00:28:11,640 --> 00:28:13,440
vulnerability this vulnerability is now

728
00:28:13,440 --> 00:28:15,960
pitched so I cannot show you a live demo

729
00:28:15,960 --> 00:28:17,940
but I'll try to do my best in

730
00:28:17,940 --> 00:28:19,980
illustrating the entire attack flow

731
00:28:19,980 --> 00:28:21,779
using the magic of illustration and

732
00:28:21,779 --> 00:28:24,000
animation

733
00:28:24,000 --> 00:28:27,419
so we are on our left of a researcher a

734
00:28:27,419 --> 00:28:29,700
research machine and on the right we

735
00:28:29,700 --> 00:28:31,980
have our victim which is uh and we want

736
00:28:31,980 --> 00:28:34,799
to get its confidential information

737
00:28:34,799 --> 00:28:36,720
the victim has the falling house Earth

738
00:28:36,720 --> 00:28:39,240
name begins with ba

739
00:28:39,240 --> 00:28:42,059
so the next thing what we'll do is issue

740
00:28:42,059 --> 00:28:43,919
a certificate that will actually alert

741
00:28:43,919 --> 00:28:45,779
us to authenticate to the replication

742
00:28:45,779 --> 00:28:48,840
user on that database

743
00:28:48,840 --> 00:28:50,700
as you can see we have a subject name

744
00:28:50,700 --> 00:28:52,740
that begins with replication followed by

745
00:28:52,740 --> 00:28:55,260
the unique identifier of the database

746
00:28:55,260 --> 00:28:57,179
and it all sits under the with

747
00:28:57,179 --> 00:28:59,820
research.com domain

748
00:28:59,820 --> 00:29:02,460
next we'll use the PG based backup

749
00:29:02,460 --> 00:29:03,600
utility

750
00:29:03,600 --> 00:29:05,220
uh

751
00:29:05,220 --> 00:29:06,840
feeding it with our newly issued

752
00:29:06,840 --> 00:29:08,940
certificate and connect to the

753
00:29:08,940 --> 00:29:11,279
application user

754
00:29:11,279 --> 00:29:14,520
after doing that the hours machine will

755
00:29:14,520 --> 00:29:17,279
actually send the SSL certificate and

756
00:29:17,279 --> 00:29:19,200
authenticate to the database

757
00:29:19,200 --> 00:29:22,799
and we'll get a full application of the

758
00:29:22,799 --> 00:29:25,260
database with its entire confidential

759
00:29:25,260 --> 00:29:27,740
information

760
00:29:28,050 --> 00:29:35,640
[Applause]

761
00:29:35,640 --> 00:29:38,580
so we send our report at Microsoft and

762
00:29:38,580 --> 00:29:41,220
they address the issues amazingly fast

763
00:29:41,220 --> 00:29:44,179
only 48 hours after the initial report

764
00:29:44,179 --> 00:29:46,559
the vulnerability was no longer

765
00:29:46,559 --> 00:29:48,299
exploitable

766
00:29:48,299 --> 00:29:50,700
the first address the issues by fixing

767
00:29:50,700 --> 00:29:52,320
the over permissive regular expression

768
00:29:52,320 --> 00:29:55,080
but a few days after that they also

769
00:29:55,080 --> 00:29:57,299
disabled the cost and network access

770
00:29:57,299 --> 00:29:59,940
meaning that both of our expert

771
00:29:59,940 --> 00:30:03,059
Primitives were basically basically gone

772
00:30:03,059 --> 00:30:05,700
and they were so appreciative of our

773
00:30:05,700 --> 00:30:08,039
work that they actually awarded us with

774
00:30:08,039 --> 00:30:11,960
a forty thousand dollars of bounty

775
00:30:16,200 --> 00:30:18,480
with that I want to invite you back to

776
00:30:18,480 --> 00:30:20,460
Stage to walk you through some very

777
00:30:20,460 --> 00:30:23,600
interesting takeaways

778
00:30:26,460 --> 00:30:28,620
so we discovered those vulnerabilities

779
00:30:28,620 --> 00:30:31,140
and we start reporting those uh to

780
00:30:31,140 --> 00:30:32,880
Microsoft and Google

781
00:30:32,880 --> 00:30:34,679
and we try to understand what was the

782
00:30:34,679 --> 00:30:37,980
root cause of those issues

783
00:30:37,980 --> 00:30:40,799
we learned that possess SQL was not

784
00:30:40,799 --> 00:30:42,960
built to be a multi-tenant managed

785
00:30:42,960 --> 00:30:45,179
service it was built like I think it was

786
00:30:45,179 --> 00:30:47,940
around 25 years ago and it has a very

787
00:30:47,940 --> 00:30:49,500
simple permission model

788
00:30:49,500 --> 00:30:52,799
you can be a super user where you can do

789
00:30:52,799 --> 00:30:56,520
everything you can delete files write

790
00:30:56,520 --> 00:30:59,399
files loading shared libraries execute

791
00:30:59,399 --> 00:31:01,559
code a lot of operations that are

792
00:31:01,559 --> 00:31:03,899
dangerous and could risk the underlying

793
00:31:03,899 --> 00:31:06,419
compute oh you can be a low privileged

794
00:31:06,419 --> 00:31:09,960
user and this is a very simple

795
00:31:09,960 --> 00:31:12,179
um permission model but it does not fit

796
00:31:12,179 --> 00:31:13,740
the cloud need

797
00:31:13,740 --> 00:31:15,659
Cloud providers cannot provide their

798
00:31:15,659 --> 00:31:18,600
customers the ability to

799
00:31:18,600 --> 00:31:20,700
feel like their administrators in their

800
00:31:20,700 --> 00:31:23,940
own database but at the same time to not

801
00:31:23,940 --> 00:31:27,120
risking the underlying compute

802
00:31:27,120 --> 00:31:30,860
and this is why all csps we worked with

803
00:31:30,860 --> 00:31:33,779
modified the process SQL and they

804
00:31:33,779 --> 00:31:35,580
already did the same they wanted to

805
00:31:35,580 --> 00:31:38,760
provide users admin capabilities but on

806
00:31:38,760 --> 00:31:40,679
the same time to do a lot of hardenings

807
00:31:40,679 --> 00:31:42,600
in order to protect the processes for

808
00:31:42,600 --> 00:31:44,100
instance and not allowing customers to

809
00:31:44,100 --> 00:31:46,440
execute code or to risk the instance

810
00:31:46,440 --> 00:31:48,539
they did it using extensions sometimes

811
00:31:48,539 --> 00:31:50,279
with configurations and sometimes with

812
00:31:50,279 --> 00:31:52,440
code changes so they actually maintain

813
00:31:52,440 --> 00:31:54,779
their own Fork of postgres

814
00:31:54,779 --> 00:31:57,779
and the thing about that is that when

815
00:31:57,779 --> 00:31:59,820
they do this modification when they

816
00:31:59,820 --> 00:32:02,159
introduce new capabilities it's very

817
00:32:02,159 --> 00:32:04,559
easy to introduce vulnerabilities

818
00:32:04,559 --> 00:32:06,720
open source projects basically I mean

819
00:32:06,720 --> 00:32:08,880
mostly postgres

820
00:32:08,880 --> 00:32:10,080
you need to have a very good

821
00:32:10,080 --> 00:32:11,460
understanding of the part of the project

822
00:32:11,460 --> 00:32:14,820
before you change it and postgres is a

823
00:32:14,820 --> 00:32:17,220
very big and very complex project

824
00:32:17,220 --> 00:32:18,360
so

825
00:32:18,360 --> 00:32:20,820
at that moment we understood that the

826
00:32:20,820 --> 00:32:22,799
vulnerabilities we discovered might work

827
00:32:22,799 --> 00:32:26,159
on other vendors and it was a very

828
00:32:26,159 --> 00:32:27,840
problem it was problematic for us

829
00:32:27,840 --> 00:32:30,120
because we really wanted to talk about

830
00:32:30,120 --> 00:32:32,220
these issues we wanted to write a blog

831
00:32:32,220 --> 00:32:34,380
post about it we wanted to come here to

832
00:32:34,380 --> 00:32:36,480
Black it and present it to you but how

833
00:32:36,480 --> 00:32:38,940
can we discuss those issues

834
00:32:38,940 --> 00:32:41,760
after they were fixed in Google and

835
00:32:41,760 --> 00:32:43,380
um in Microsoft

836
00:32:43,380 --> 00:32:45,600
with the knowing that those issues could

837
00:32:45,600 --> 00:32:47,580
actually affect other vendors other

838
00:32:47,580 --> 00:32:50,700
managed process SQL vendors

839
00:32:50,700 --> 00:32:52,679
so that was us to the question how do we

840
00:32:52,679 --> 00:32:54,960
inform all those vendors

841
00:32:54,960 --> 00:32:56,520
um so first we initially report the

842
00:32:56,520 --> 00:32:57,840
vulnerabilities to Google and Microsoft

843
00:32:57,840 --> 00:32:59,700
but then we crafted the report and we

844
00:32:59,700 --> 00:33:02,399
sent it to dozens of vendors that could

845
00:33:02,399 --> 00:33:04,679
potentially be vulnerable

846
00:33:04,679 --> 00:33:07,380
it was also worked with a lot of them on

847
00:33:07,380 --> 00:33:09,000
understanding the vulnerabilities the

848
00:33:09,000 --> 00:33:11,760
mitigations we also initiated a private

849
00:33:11,760 --> 00:33:14,340
group with all major csps to collaborate

850
00:33:14,340 --> 00:33:16,200
on those issues and to understand like

851
00:33:16,200 --> 00:33:18,659
how can we solve this issue once for all

852
00:33:18,659 --> 00:33:23,720
and not not just like keeping it more

853
00:33:23,720 --> 00:33:26,880
just keeping the problem bigger because

854
00:33:26,880 --> 00:33:29,340
the absolute thought is that most

855
00:33:29,340 --> 00:33:30,539
vendors in order to fix the

856
00:33:30,539 --> 00:33:32,340
vulnerabilities we disclosed They just

857
00:33:32,340 --> 00:33:34,919
added more hardening small code changes

858
00:33:34,919 --> 00:33:36,360
more modification to the postgres

859
00:33:36,360 --> 00:33:38,340
project and this is not good for

860
00:33:38,340 --> 00:33:39,899
security this is the opposite of what we

861
00:33:39,899 --> 00:33:42,720
wanted to do it's actually they are just

862
00:33:42,720 --> 00:33:44,820
adding more potential attack surface for

863
00:33:44,820 --> 00:33:47,340
new vulnerabilities

864
00:33:47,340 --> 00:33:50,700
um and we think and the solution

865
00:33:50,700 --> 00:33:51,960
actually this is something that we

866
00:33:51,960 --> 00:33:53,039
talked about the group it's the Google

867
00:33:53,039 --> 00:33:55,620
initiative to suggest Google suggested

868
00:33:55,620 --> 00:33:58,500
to contribute their hardening their um

869
00:33:58,500 --> 00:34:00,419
their own audience to the process SQL

870
00:34:00,419 --> 00:34:02,700
product the official one so the official

871
00:34:02,700 --> 00:34:04,799
project will maintain

872
00:34:04,799 --> 00:34:06,419
um these other links and new

873
00:34:06,419 --> 00:34:08,699
capabilities for cloud provider so

874
00:34:08,699 --> 00:34:11,399
whoever wanted to offer customers a bit

875
00:34:11,399 --> 00:34:13,859
more privileges

876
00:34:13,859 --> 00:34:15,899
um than just a regular user but still

877
00:34:15,899 --> 00:34:18,540
not a super user

878
00:34:18,540 --> 00:34:21,418
um so they actually wrote it on the

879
00:34:21,418 --> 00:34:23,820
mailing list they offered the hardening

880
00:34:23,820 --> 00:34:26,280
a deposit skill Community really debates

881
00:34:26,280 --> 00:34:28,379
on that right now it doesn't look that

882
00:34:28,379 --> 00:34:30,719
good and it looks like the process SQL

883
00:34:30,719 --> 00:34:33,599
official project will not Embrace this

884
00:34:33,599 --> 00:34:34,199
um

885
00:34:34,199 --> 00:34:35,699
if you would like to follow it you can

886
00:34:35,699 --> 00:34:38,879
do it with the you can check the mailing

887
00:34:38,879 --> 00:34:41,879
list it's a bitly link but trust me it's

888
00:34:41,879 --> 00:34:43,800
the mailing list

889
00:34:43,800 --> 00:34:44,520
um

890
00:34:44,520 --> 00:34:47,280
a nice very good project also bought by

891
00:34:47,280 --> 00:34:49,440
Ivan Ivan is a managed Day Management

892
00:34:49,440 --> 00:34:53,399
database vendor and they offered they

893
00:34:53,399 --> 00:34:55,139
actually open sourced their own possible

894
00:34:55,139 --> 00:34:57,180
SQL hardenings and this is actually a

895
00:34:57,180 --> 00:35:00,540
very good approach because because right

896
00:35:00,540 --> 00:35:01,320
now

897
00:35:01,320 --> 00:35:02,700
um if someone will find a new

898
00:35:02,700 --> 00:35:04,800
vulnerability like the ones we found in

899
00:35:04,800 --> 00:35:06,839
those hardenings it is all will be in

900
00:35:06,839 --> 00:35:09,420
one central place and it will get a cve

901
00:35:09,420 --> 00:35:12,180
people could fix it in one place for all

902
00:35:12,180 --> 00:35:14,760
and we think it's a very good approach

903
00:35:14,760 --> 00:35:17,700
and for last I would like to talk about

904
00:35:17,700 --> 00:35:21,060
a different topic which is isolation

905
00:35:21,060 --> 00:35:23,760
and why installation is so important

906
00:35:23,760 --> 00:35:27,680
in the cloud isolation is King isolation

907
00:35:27,680 --> 00:35:32,460
is the best way to actually stop hackers

908
00:35:32,460 --> 00:35:35,220
and after they were able to get a

909
00:35:35,220 --> 00:35:38,160
foothold within the internal environment

910
00:35:38,160 --> 00:35:38,820
um

911
00:35:38,820 --> 00:35:40,920
we stayed we started with the examples

912
00:35:40,920 --> 00:35:43,500
we showed today that where we had

913
00:35:43,500 --> 00:35:45,300
network access to other customers

914
00:35:45,300 --> 00:35:47,700
instances and isolation was not perfect

915
00:35:47,700 --> 00:35:51,180
we actually had the opportunity the

916
00:35:51,180 --> 00:35:52,800
attack surface to find a second

917
00:35:52,800 --> 00:35:54,060
vulnerability

918
00:35:54,060 --> 00:35:55,980
and where the isolation is really really

919
00:35:55,980 --> 00:35:59,099
good you can find yourself empty-handed

920
00:35:59,099 --> 00:36:01,079
now the thing about isolation is that

921
00:36:01,079 --> 00:36:03,240
cloud providers have a lot of minute

922
00:36:03,240 --> 00:36:05,579
Services every service is designed

923
00:36:05,579 --> 00:36:06,839
differently it has different

924
00:36:06,839 --> 00:36:09,060
architecture and a different isolation

925
00:36:09,060 --> 00:36:13,020
mechanisms and we as customers it's a

926
00:36:13,020 --> 00:36:14,400
bit frustrating for us as Cloud

927
00:36:14,400 --> 00:36:16,980
customers that we have no idea how our

928
00:36:16,980 --> 00:36:20,339
data is isolated in each of each service

929
00:36:20,339 --> 00:36:23,099
now Cloud providers does share some

930
00:36:23,099 --> 00:36:25,079
information regarding the isolation you

931
00:36:25,079 --> 00:36:26,220
can check it in the documentation

932
00:36:26,220 --> 00:36:28,619
usually it will be for the main compute

933
00:36:28,619 --> 00:36:30,720
service and sometimes those serverless

934
00:36:30,720 --> 00:36:32,880
functions and the shared compute

935
00:36:32,880 --> 00:36:35,460
container services place as well they

936
00:36:35,460 --> 00:36:37,260
tell you like straightforward you are

937
00:36:37,260 --> 00:36:39,599
going to execute your code or the

938
00:36:39,599 --> 00:36:41,280
service is going to use just compute

939
00:36:41,280 --> 00:36:43,260
this is the places where usually

940
00:36:43,260 --> 00:36:44,640
customers are more concerned and they

941
00:36:44,640 --> 00:36:46,800
show information but they must share

942
00:36:46,800 --> 00:36:48,000
much more information they don't share

943
00:36:48,000 --> 00:36:49,200
enough

944
00:36:49,200 --> 00:36:52,380
now doing a research when we disclose

945
00:36:52,380 --> 00:36:54,060
cause standard vulnerabilities to Cloud

946
00:36:54,060 --> 00:36:56,000
providers we ask them a lot of questions

947
00:36:56,000 --> 00:36:59,579
and we would like to encourage you or

948
00:36:59,579 --> 00:37:01,740
Cloud customers who are a bit worried or

949
00:37:01,740 --> 00:37:03,599
they want to understand how the data is

950
00:37:03,599 --> 00:37:05,760
isolated in the cloud to take a poor

951
00:37:05,760 --> 00:37:08,400
active approach and ask your provider

952
00:37:08,400 --> 00:37:10,440
so this is usually the questions we ask

953
00:37:10,440 --> 00:37:13,020
when we do responsible disclosure with

954
00:37:13,020 --> 00:37:15,540
vendors for example you can ask your

955
00:37:15,540 --> 00:37:18,180
cloud provider if they use Shield

956
00:37:18,180 --> 00:37:21,119
compute in a specific service you use or

957
00:37:21,119 --> 00:37:23,220
I mean shared compute is very risky

958
00:37:23,220 --> 00:37:25,619
because they are actually using the same

959
00:37:25,619 --> 00:37:28,560
operating system and to run jobs and

960
00:37:28,560 --> 00:37:31,200
works workers of separate or different

961
00:37:31,200 --> 00:37:33,900
customers and so if someone will find

962
00:37:33,900 --> 00:37:35,460
the vulnerability in that service it

963
00:37:35,460 --> 00:37:36,720
will be very straightforward to access

964
00:37:36,720 --> 00:37:38,880
the data of other customers

965
00:37:38,880 --> 00:37:41,040
also very good questions is to ask the

966
00:37:41,040 --> 00:37:43,800
cloud provider if they use containers as

967
00:37:43,800 --> 00:37:45,780
a security burial for Cellcom Services

968
00:37:45,780 --> 00:37:48,060
because containers usually could be

969
00:37:48,060 --> 00:37:51,000
Escape sometimes pretty easily with

970
00:37:51,000 --> 00:37:53,880
configuration issues but also even if

971
00:37:53,880 --> 00:37:56,700
the container was very well configured a

972
00:37:56,700 --> 00:37:58,920
Linux kernel vulnerability usually break

973
00:37:58,920 --> 00:38:00,960
out of it so you don't want the Linux

974
00:38:00,960 --> 00:38:02,520
camera vulnerability to be the security

975
00:38:02,520 --> 00:38:04,500
barrier between One customer to another

976
00:38:04,500 --> 00:38:06,000
customer

977
00:38:06,000 --> 00:38:08,940
a third question would be do you do they

978
00:38:08,940 --> 00:38:11,220
use do the customers get the same

979
00:38:11,220 --> 00:38:13,500
compute instance within a shared network

980
00:38:13,500 --> 00:38:16,579
and if so do they have network access

981
00:38:16,579 --> 00:38:19,320
because imagine if you would ask this

982
00:38:19,320 --> 00:38:22,500
question a Microsoft long ago

983
00:38:22,500 --> 00:38:24,300
um about the Azure processor flexible

984
00:38:24,300 --> 00:38:25,800
server

985
00:38:25,800 --> 00:38:28,020
those questions will it's not just to

986
00:38:28,020 --> 00:38:29,760
satisfy the customers they also need in

987
00:38:29,760 --> 00:38:31,260
order to answer you so we need to do

988
00:38:31,260 --> 00:38:33,000
their homework so we need to go and

989
00:38:33,000 --> 00:38:34,800
check and verify the service and

990
00:38:34,800 --> 00:38:36,839
understand if like how does it work

991
00:38:36,839 --> 00:38:38,640
there and if you will ask this question

992
00:38:38,640 --> 00:38:41,099
could it could be that they will fix it

993
00:38:41,099 --> 00:38:43,800
they will go check see that there is

994
00:38:43,800 --> 00:38:45,119
network access they will think to

995
00:38:45,119 --> 00:38:48,180
themselves that bad they will fix it and

996
00:38:48,180 --> 00:38:49,560
then we will not be here today

997
00:38:49,560 --> 00:38:52,619
presenting costs and vulnerabilities

998
00:38:52,619 --> 00:38:55,260
so um thank you very much

999
00:38:55,260 --> 00:38:58,380
it was the chicken near from with

1000
00:38:58,380 --> 00:39:01,200
[Applause]

1001
00:39:01,200 --> 00:39:04,310
[Music]

1002
00:39:08,160 --> 00:39:11,239
[Music]

