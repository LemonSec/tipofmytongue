1
00:00:01,700 --> 00:00:04,810
[Music]

2
00:00:07,880 --> 00:00:10,920
so who is excited about this amazing

3
00:00:10,920 --> 00:00:14,540
technology called XML

4
00:00:15,000 --> 00:00:16,859
some people are okay okay let's try

5
00:00:16,859 --> 00:00:18,840
something different uh who's excited

6
00:00:18,840 --> 00:00:22,640
about zero click attacks on Messengers

7
00:00:23,160 --> 00:00:25,140
or maybe some more people okay well

8
00:00:25,140 --> 00:00:26,699
that's that that's a shame because it's

9
00:00:26,699 --> 00:00:28,080
more about the first topic than about

10
00:00:28,080 --> 00:00:30,799
the second one

11
00:00:32,098 --> 00:00:33,960
um I can understand the lack of

12
00:00:33,960 --> 00:00:37,020
excitement uh in some of you about XML

13
00:00:37,020 --> 00:00:39,120
though because you see uh

14
00:00:39,120 --> 00:00:42,180
when XML was young I was a young

15
00:00:42,180 --> 00:00:44,520
computer science student and I wasn't

16
00:00:44,520 --> 00:00:47,040
excited about it back then either

17
00:00:47,040 --> 00:00:47,879
um

18
00:00:47,879 --> 00:00:50,219
some people were though so you know I I

19
00:00:50,219 --> 00:00:52,140
remember this one guy who was like

20
00:00:52,140 --> 00:00:55,320
excited about it and and and talking

21
00:00:55,320 --> 00:00:57,780
about how this how is this amazing new

22
00:00:57,780 --> 00:00:59,219
technology

23
00:00:59,219 --> 00:01:01,500
and I'm just you know I'm standing there

24
00:01:01,500 --> 00:01:04,319
I'm politely nodding my head but inside

25
00:01:04,319 --> 00:01:06,960
I'm thinking GI must have chosen the

26
00:01:06,960 --> 00:01:08,880
wrong profession

27
00:01:08,880 --> 00:01:09,900
um

28
00:01:09,900 --> 00:01:13,860
so fast forward two decades later I'm

29
00:01:13,860 --> 00:01:16,740
finally excited about XML uh for all the

30
00:01:16,740 --> 00:01:18,180
wrong reasons

31
00:01:18,180 --> 00:01:20,759
um so yeah XML you can do stuff with it

32
00:01:20,759 --> 00:01:23,880
if you're a security researcher

33
00:01:23,880 --> 00:01:27,060
um anyway welcome folks to xmpp stanza

34
00:01:27,060 --> 00:01:30,180
smuggling or how I hacked Zoom I'm Ivan

35
00:01:30,180 --> 00:01:33,780
fratrich I'm with Google project zero

36
00:01:33,780 --> 00:01:35,939
I've been doing this security research

37
00:01:35,939 --> 00:01:38,579
for a long time now I stopped counting

38
00:01:38,579 --> 00:01:40,860
after after 10 years because

39
00:01:40,860 --> 00:01:43,140
counting after that just made me feel

40
00:01:43,140 --> 00:01:44,130
old

41
00:01:44,130 --> 00:01:45,920
[Music]

42
00:01:45,920 --> 00:01:49,259
wrote some security tools to help others

43
00:01:49,259 --> 00:01:51,780
with security research and we might even

44
00:01:51,780 --> 00:01:56,220
see some of them in action in this talk

45
00:01:56,220 --> 00:01:59,960
right so let's talk about xmpp

46
00:01:59,960 --> 00:02:04,079
xmpp stands for extensible messaging and

47
00:02:04,079 --> 00:02:07,099
presence protocol and it's essentially

48
00:02:07,099 --> 00:02:10,380
uh instant messaging protocol based on

49
00:02:10,380 --> 00:02:14,040
XML and when something is built on top

50
00:02:14,040 --> 00:02:16,319
of a technology that's over two decades

51
00:02:16,319 --> 00:02:19,500
old you know uh it's a good Target for

52
00:02:19,500 --> 00:02:21,780
security research

53
00:02:21,780 --> 00:02:25,680
so xmpp is a protocol that's used in

54
00:02:25,680 --> 00:02:27,959
various applications EU applications

55
00:02:27,959 --> 00:02:30,900
it's it's used in uh in some Messengers

56
00:02:30,900 --> 00:02:34,920
it's used in some applications that have

57
00:02:34,920 --> 00:02:37,860
a messaging feature like Zoom for

58
00:02:37,860 --> 00:02:40,319
example uh but also in in other

59
00:02:40,319 --> 00:02:42,720
applications for example it's these days

60
00:02:42,720 --> 00:02:47,040
quite popular in online games and also I

61
00:02:47,040 --> 00:02:50,780
hear in industrial applications

62
00:02:50,879 --> 00:02:53,940
um so even though this talk has zoom in

63
00:02:53,940 --> 00:02:57,360
the name it's not really only about Zoom

64
00:02:57,360 --> 00:02:59,519
most of the stuff you hear today is

65
00:02:59,519 --> 00:03:01,620
going to be applicable to other targets

66
00:03:01,620 --> 00:03:05,640
however since Zoom is the most high

67
00:03:05,640 --> 00:03:08,940
impact Target that I know that uses xmpp

68
00:03:08,940 --> 00:03:12,599
protocol uh Zoom is going to be used as

69
00:03:12,599 --> 00:03:14,340
an example throughout this presentation

70
00:03:14,340 --> 00:03:16,379
and there is also going to be an

71
00:03:16,379 --> 00:03:18,959
exploitation case study later in the

72
00:03:18,959 --> 00:03:21,000
talk

73
00:03:21,000 --> 00:03:22,640
um so as I said

74
00:03:22,640 --> 00:03:26,180
xmpp is a message protocol based on XML

75
00:03:26,180 --> 00:03:30,239
and the way it works is you have

76
00:03:30,239 --> 00:03:35,099
XML sent over stream connection so

77
00:03:35,099 --> 00:03:38,239
here you can see an example

78
00:03:38,239 --> 00:03:43,620
of how an xmpb stream simplified might

79
00:03:43,620 --> 00:03:46,500
look like so at the start it starts by

80
00:03:46,500 --> 00:03:48,840
opening a stream tag which would be at

81
00:03:48,840 --> 00:03:53,220
like the root level of the xml3 and then

82
00:03:53,220 --> 00:03:56,099
at level one of the tree you have some

83
00:03:56,099 --> 00:03:58,920
Snippets of XML that are called stanzas

84
00:03:58,920 --> 00:04:02,760
and the stanza is a basic unit of

85
00:04:02,760 --> 00:04:06,000
transfer in this xmpp protocol so here

86
00:04:06,000 --> 00:04:07,799
in the slide you can see examples of two

87
00:04:07,799 --> 00:04:11,220
stanzas one is a message stanza

88
00:04:11,220 --> 00:04:13,260
and this is an example of something

89
00:04:13,260 --> 00:04:15,780
that's meant to be sent from one client

90
00:04:15,780 --> 00:04:17,820
to another in this case it's an actual

91
00:04:17,820 --> 00:04:19,620
instant message

92
00:04:19,620 --> 00:04:22,800
the second one is the IQ stanza and

93
00:04:22,800 --> 00:04:25,620
unlike the first one IQ stands that

94
00:04:25,620 --> 00:04:28,380
typically isn't sent from one client to

95
00:04:28,380 --> 00:04:30,540
another it's me it's more meant to be

96
00:04:30,540 --> 00:04:32,580
exchanged between the client and the

97
00:04:32,580 --> 00:04:34,139
server so these are kind of control

98
00:04:34,139 --> 00:04:35,820
messages

99
00:04:35,820 --> 00:04:37,919
and when you see this in security when

100
00:04:37,919 --> 00:04:40,440
you see control messages being sent over

101
00:04:40,440 --> 00:04:44,639
the same text-based connection as user

102
00:04:44,639 --> 00:04:46,860
control data then you might be thinking

103
00:04:46,860 --> 00:04:49,860
about injection attacks and lack of

104
00:04:49,860 --> 00:04:52,500
escaping and this might work depending

105
00:04:52,500 --> 00:04:54,900
on how the tar how the service is

106
00:04:54,900 --> 00:04:57,600
implemented however it's not exactly

107
00:04:57,600 --> 00:05:00,620
what we will be talking about today

108
00:05:00,620 --> 00:05:03,240
instead let's examine some other

109
00:05:03,240 --> 00:05:06,120
features of this xmpp protocol

110
00:05:06,120 --> 00:05:09,960
so what you can see here is uh is an

111
00:05:09,960 --> 00:05:12,180
example of a message stanza from the

112
00:05:12,180 --> 00:05:14,280
perspective of the sender and the

113
00:05:14,280 --> 00:05:16,380
perspective of the receiver so on the

114
00:05:16,380 --> 00:05:18,479
top you can see what the sender sends on

115
00:05:18,479 --> 00:05:19,860
the bottom you can see what the receiver

116
00:05:19,860 --> 00:05:22,199
receives and you can see it's more or

117
00:05:22,199 --> 00:05:24,240
less the same you can see the message

118
00:05:24,240 --> 00:05:26,400
highlighted but you can also see a bunch

119
00:05:26,400 --> 00:05:30,000
of XML tags inside this stanza so one

120
00:05:30,000 --> 00:05:32,039
thing I was wondering is what would

121
00:05:32,039 --> 00:05:35,460
happen if I put some other XML tags

122
00:05:35,460 --> 00:05:39,060
inside this stanza and a surprising

123
00:05:39,060 --> 00:05:42,180
result at least to me was that this

124
00:05:42,180 --> 00:05:45,060
custom XML made it all the way through

125
00:05:45,060 --> 00:05:47,880
and I'm I'm not sure how you folks feel

126
00:05:47,880 --> 00:05:50,039
about this but when I saw this I was

127
00:05:50,039 --> 00:05:53,820
like mindful uh because I thought you

128
00:05:53,820 --> 00:05:56,400
know I can do stuff with this and and it

129
00:05:56,400 --> 00:05:59,340
turns out you really can

130
00:05:59,340 --> 00:06:03,000
um one note here though is that any

131
00:06:03,000 --> 00:06:04,680
custom XML

132
00:06:04,680 --> 00:06:07,979
you put in this way needs to be valid

133
00:06:07,979 --> 00:06:09,600
from the perspective of the server

134
00:06:09,600 --> 00:06:12,419
because the server is going to parse

135
00:06:12,419 --> 00:06:15,479
this XML and if the server encounters a

136
00:06:15,479 --> 00:06:17,100
parsing error then it's just going to

137
00:06:17,100 --> 00:06:18,780
terminate the connection and not process

138
00:06:18,780 --> 00:06:21,120
the stanza further

139
00:06:21,120 --> 00:06:23,639
So speaking about this server let's take

140
00:06:23,639 --> 00:06:26,160
a look at how a typical xmpp

141
00:06:26,160 --> 00:06:28,319
infrastructure looks like

142
00:06:28,319 --> 00:06:29,100
um

143
00:06:29,100 --> 00:06:33,120
so uh we are just going to focus on

144
00:06:33,120 --> 00:06:35,699
parts that touch XML directly obviously

145
00:06:35,699 --> 00:06:39,180
it's way more complicated than this uh

146
00:06:39,180 --> 00:06:42,840
but how it works is that a client sends

147
00:06:42,840 --> 00:06:45,780
a stanza to the server which is in XML

148
00:06:45,780 --> 00:06:49,039
format the server needs to parse it

149
00:06:49,039 --> 00:06:51,900
and then the server would do whatever

150
00:06:51,900 --> 00:06:54,600
processing it needs to do based on the

151
00:06:54,600 --> 00:06:57,360
stanza type and then if the server

152
00:06:57,360 --> 00:06:59,039
decides that this is a stance that that

153
00:06:59,039 --> 00:07:01,440
it needs to forward to another client

154
00:07:01,440 --> 00:07:04,139
it's going to serialize it it's going to

155
00:07:04,139 --> 00:07:06,419
convert it from object representation

156
00:07:06,419 --> 00:07:09,900
back into a text representation it's

157
00:07:09,900 --> 00:07:12,900
going to parse it it's going to uh it's

158
00:07:12,900 --> 00:07:14,520
going to uh

159
00:07:14,520 --> 00:07:17,520
send it over that string connection to

160
00:07:17,520 --> 00:07:19,259
the client and then the client needs to

161
00:07:19,259 --> 00:07:21,120
parse it again

162
00:07:21,120 --> 00:07:23,580
so at this point

163
00:07:23,580 --> 00:07:25,620
let's try to answer the question what

164
00:07:25,620 --> 00:07:28,259
can go wrong here and the first part of

165
00:07:28,259 --> 00:07:31,080
the answer you already saw which is that

166
00:07:31,080 --> 00:07:33,660
you can send custom XML all the way

167
00:07:33,660 --> 00:07:35,759
through this pipeline

168
00:07:35,759 --> 00:07:39,240
but by its own this doesn't give you

169
00:07:39,240 --> 00:07:42,300
anything however let's combine it with

170
00:07:42,300 --> 00:07:45,000
the fact that XML is complicated and XML

171
00:07:45,000 --> 00:07:47,400
parsers have quirks

172
00:07:47,400 --> 00:07:49,259
and if you don't know what I mean by

173
00:07:49,259 --> 00:07:51,660
quirks then here's a challenge for you

174
00:07:51,660 --> 00:07:54,900
find me two XML parsers two different

175
00:07:54,900 --> 00:07:58,319
XML parsers that always for every input

176
00:07:58,319 --> 00:08:00,900
will result in the same output

177
00:08:00,900 --> 00:08:03,240
um and I'm I'm willing to bet that you

178
00:08:03,240 --> 00:08:05,160
are going to have a very hard time with

179
00:08:05,160 --> 00:08:07,080
that

180
00:08:07,080 --> 00:08:11,639
so at this point let me introduce what I

181
00:08:11,639 --> 00:08:14,460
call xmpp stanza smuggling attacks

182
00:08:14,460 --> 00:08:16,259
in theory

183
00:08:16,259 --> 00:08:19,620
it's an attack where a client sends a

184
00:08:19,620 --> 00:08:23,160
stanza with some custom XML embedded the

185
00:08:23,160 --> 00:08:25,860
server parses this stanza sees a single

186
00:08:25,860 --> 00:08:27,240
stanza

187
00:08:27,240 --> 00:08:30,479
nothing unusual sends it to the client

188
00:08:30,479 --> 00:08:32,580
and then the client parses this again

189
00:08:32,580 --> 00:08:35,339
but instead of seeing a single stanza it

190
00:08:35,339 --> 00:08:37,140
is multiple stances

191
00:08:37,140 --> 00:08:40,140
so in a way we are smuggling stanzas

192
00:08:40,140 --> 00:08:42,958
from one client to another through the

193
00:08:42,958 --> 00:08:45,180
server hence

194
00:08:45,180 --> 00:08:48,319
the name of the attack

195
00:08:48,600 --> 00:08:50,880
and this is not a single vulnerability

196
00:08:50,880 --> 00:08:53,040
in fact there can be different

197
00:08:53,040 --> 00:08:55,200
vulnerability types that enable this

198
00:08:55,200 --> 00:08:57,240
kind of attack so for example the first

199
00:08:57,240 --> 00:09:02,100
type that I saw was due to differences

200
00:09:02,100 --> 00:09:04,200
between XML parsers on the client and

201
00:09:04,200 --> 00:09:06,959
the server however you can also have

202
00:09:06,959 --> 00:09:09,180
bugs that enable this attack data server

203
00:09:09,180 --> 00:09:11,399
only typically due to interaction

204
00:09:11,399 --> 00:09:13,380
between the parser and the serializer

205
00:09:13,380 --> 00:09:16,620
and finally you can also have bugs with

206
00:09:16,620 --> 00:09:18,320
a client only

207
00:09:18,320 --> 00:09:21,000
and once again this talk is not only

208
00:09:21,000 --> 00:09:24,120
about Zoom so here you can see bugs that

209
00:09:24,120 --> 00:09:26,820
affected Zoom but also uh you can see

210
00:09:26,820 --> 00:09:29,220
bugs that affected other targets some of

211
00:09:29,220 --> 00:09:32,100
these bugs affected multiple targets

212
00:09:32,100 --> 00:09:34,740
um and I can also neither confirm nor

213
00:09:34,740 --> 00:09:36,660
deny that there are other bugs not

214
00:09:36,660 --> 00:09:40,040
listed in this slide

215
00:09:40,860 --> 00:09:42,959
but as I said Zoom is going to be used

216
00:09:42,959 --> 00:09:45,959
as an example so it's useful to see how

217
00:09:45,959 --> 00:09:49,100
this xmpp infrastructure looks like

218
00:09:49,100 --> 00:09:53,399
in Zoom case so on the client Zoom uses

219
00:09:53,399 --> 00:09:56,580
a library called glux which is uh an

220
00:09:56,580 --> 00:10:00,240
xmpp client Library open source

221
00:10:00,240 --> 00:10:03,600
it has its own XML parser and on the

222
00:10:03,600 --> 00:10:04,500
server

223
00:10:04,500 --> 00:10:07,500
uh Zoom is based on xmpp server called

224
00:10:07,500 --> 00:10:10,560
ejab Rd which is written in erlang if

225
00:10:10,560 --> 00:10:13,320
you can believe that erlang uh sorry

226
00:10:13,320 --> 00:10:16,140
ajabi has

227
00:10:16,140 --> 00:10:18,839
a library called fastx ml for handling

228
00:10:18,839 --> 00:10:21,000
all of the XML related stuff

229
00:10:21,000 --> 00:10:24,060
and fast XML uses another Library which

230
00:10:24,060 --> 00:10:26,160
is more popular which is called expat

231
00:10:26,160 --> 00:10:28,800
for XML parsing

232
00:10:28,800 --> 00:10:32,580
at this point you might be wondering how

233
00:10:32,580 --> 00:10:34,440
the hell does he know what Zoom runs on

234
00:10:34,440 --> 00:10:36,480
their servers well

235
00:10:36,480 --> 00:10:39,300
whenever I want to know what someone

236
00:10:39,300 --> 00:10:41,940
runs on their servers one thing I like

237
00:10:41,940 --> 00:10:45,899
to look at are the job ads and here you

238
00:10:45,899 --> 00:10:48,959
can see conveniently a job ad for a

239
00:10:48,959 --> 00:10:51,660
senior xmpp engineer at zoom and there

240
00:10:51,660 --> 00:10:54,060
is a word that stood out here and that

241
00:10:54,060 --> 00:10:56,399
word is erlang and erlang in combination

242
00:10:56,399 --> 00:11:00,720
with xmpp can only mean e Jeopardy

243
00:11:00,720 --> 00:11:03,360
so at this point let's take a look at a

244
00:11:03,360 --> 00:11:06,839
few bug examples that enable this

245
00:11:06,839 --> 00:11:08,760
stanza smuggling attack the first

246
00:11:08,760 --> 00:11:10,800
example we are going to look at is going

247
00:11:10,800 --> 00:11:13,980
to be due to differences between parsers

248
00:11:13,980 --> 00:11:17,459
on the client and the server and

249
00:11:17,459 --> 00:11:20,820
this one has to do with UDF AIDS and you

250
00:11:20,820 --> 00:11:23,279
are probably like oh no now he's going

251
00:11:23,279 --> 00:11:25,500
to talk about utf-8 wasn't was it XML

252
00:11:25,500 --> 00:11:28,380
enough uh well really yes I am but only

253
00:11:28,380 --> 00:11:31,019
briefly sorry so basically the only

254
00:11:31,019 --> 00:11:33,240
thing you need to know for the about

255
00:11:33,240 --> 00:11:36,300
utf-8 is captured in this table taken

256
00:11:36,300 --> 00:11:38,339
from Wikipedia and the only thing you

257
00:11:38,339 --> 00:11:39,779
need to know for the purpose of this

258
00:11:39,779 --> 00:11:42,959
talk is that in utf-8

259
00:11:42,959 --> 00:11:44,820
you can encode characters using

260
00:11:44,820 --> 00:11:47,220
different number of bytes so some

261
00:11:47,220 --> 00:11:49,019
characters you can encode using a single

262
00:11:49,019 --> 00:11:51,060
byte so I'm using two bytes I'm using

263
00:11:51,060 --> 00:11:53,760
three bytes so I'm using four bytes so

264
00:11:53,760 --> 00:11:55,079
for example

265
00:11:55,079 --> 00:11:57,959
if you have a byte EB hex

266
00:11:57,959 --> 00:12:01,140
then it could be a start of a three byte

267
00:12:01,140 --> 00:12:04,200
sequence and I'm saying could be

268
00:12:04,200 --> 00:12:05,519
because

269
00:12:05,519 --> 00:12:07,860
if you have a sequence like this then

270
00:12:07,860 --> 00:12:10,500
it's actually an invalid sequence

271
00:12:10,500 --> 00:12:15,000
because while the first byte is a valid

272
00:12:15,000 --> 00:12:17,100
start of a three byte sequence the

273
00:12:17,100 --> 00:12:19,440
remaining two bytes would need to have

274
00:12:19,440 --> 00:12:22,500
their highest bit set in order for the

275
00:12:22,500 --> 00:12:24,600
sequence to be valid

276
00:12:24,600 --> 00:12:26,940
but let's now take a look at how

277
00:12:26,940 --> 00:12:29,220
different XML parsers handle this

278
00:12:29,220 --> 00:12:31,860
invalid Duty f8 sequence

279
00:12:31,860 --> 00:12:33,839
export parser is going to claim that

280
00:12:33,839 --> 00:12:36,240
this is a valid three byte character

281
00:12:36,240 --> 00:12:38,399
and the glux parser is going to claim

282
00:12:38,399 --> 00:12:39,540
that these are three different

283
00:12:39,540 --> 00:12:40,940
characters

284
00:12:40,940 --> 00:12:44,459
and the funny thing besides the fact

285
00:12:44,459 --> 00:12:47,339
that these two parsers can't agree is

286
00:12:47,339 --> 00:12:49,139
that both of these are wrong this is an

287
00:12:49,139 --> 00:12:51,240
invalid sequence it should result in a

288
00:12:51,240 --> 00:12:54,060
parsing error

289
00:12:54,060 --> 00:12:57,779
so if we take this basic principle

290
00:12:57,779 --> 00:13:00,300
and take it one step further then you

291
00:13:00,300 --> 00:13:02,040
can do some fun stuff with it you can

292
00:13:02,040 --> 00:13:05,040
for example construct a string that if

293
00:13:05,040 --> 00:13:07,440
parsed with expat expat is going to see

294
00:13:07,440 --> 00:13:10,680
a single XML tag however if the same

295
00:13:10,680 --> 00:13:11,820
string

296
00:13:11,820 --> 00:13:14,880
is parsed with Googs looks is going to

297
00:13:14,880 --> 00:13:18,600
see two tags and then if you if you take

298
00:13:18,600 --> 00:13:22,860
this and take it further then it

299
00:13:22,860 --> 00:13:23,940
shouldn't be

300
00:13:23,940 --> 00:13:26,339
difficult to see intuitively that this

301
00:13:26,339 --> 00:13:29,279
can be used to smuggle stanzas

302
00:13:29,279 --> 00:13:32,160
here you see the payload that I actually

303
00:13:32,160 --> 00:13:34,860
used in my zoom exploit we're not going

304
00:13:34,860 --> 00:13:37,680
to analyze in detail how this works due

305
00:13:37,680 --> 00:13:39,300
to uh

306
00:13:39,300 --> 00:13:42,120
um in in the interest of time

307
00:13:42,120 --> 00:13:43,980
I think it's more important to

308
00:13:43,980 --> 00:13:45,839
understand the basic principle from from

309
00:13:45,839 --> 00:13:48,240
the last slide

310
00:13:48,240 --> 00:13:50,240
however one thing that I'm going to say

311
00:13:50,240 --> 00:13:53,220
is that again talk is not only about

312
00:13:53,220 --> 00:13:55,560
Zoom so this exact same vulnerability

313
00:13:55,560 --> 00:13:58,500
besides Zoom also affected Cisco Jabber

314
00:13:58,500 --> 00:14:02,579
because Cisco Jabber in combination with

315
00:14:02,579 --> 00:14:06,000
Cisco Ironman presence uses the exact

316
00:14:06,000 --> 00:14:09,660
same parser pair as Zoom

317
00:14:09,660 --> 00:14:12,540
so this this was an example of a

318
00:14:12,540 --> 00:14:14,639
vulnerability due to differences between

319
00:14:14,639 --> 00:14:16,920
parsers on the client and the server now

320
00:14:16,920 --> 00:14:18,360
let's take a look

321
00:14:18,360 --> 00:14:21,060
at an example of a different

322
00:14:21,060 --> 00:14:23,459
vulnerability a server-only

323
00:14:23,459 --> 00:14:24,959
vulnerability

324
00:14:24,959 --> 00:14:28,139
and this one is quite specific to expat

325
00:14:28,139 --> 00:14:30,360
and to see how it works we need to take

326
00:14:30,360 --> 00:14:33,839
a look at how expat parser is used

327
00:14:33,839 --> 00:14:37,860
inside ejabi and so here in the slide

328
00:14:37,860 --> 00:14:40,139
you can see the relevant initialization

329
00:14:40,139 --> 00:14:41,100
code

330
00:14:41,100 --> 00:14:44,100
and the most relevant part here

331
00:14:44,100 --> 00:14:46,260
is this last parameter here with the

332
00:14:46,260 --> 00:14:48,240
value of backslash Channel

333
00:14:48,240 --> 00:14:50,220
now what this is

334
00:14:50,220 --> 00:14:55,160
a separator that is used when expat

335
00:14:55,160 --> 00:14:59,519
returns tag names to the library user uh

336
00:14:59,519 --> 00:15:02,940
ejability or fast XML in this case

337
00:15:02,940 --> 00:15:05,100
to understand how it works let's take a

338
00:15:05,100 --> 00:15:08,399
look at a couple of examples so for

339
00:15:08,399 --> 00:15:10,260
example if you have a tag with a

340
00:15:10,260 --> 00:15:13,019
namespace attribute then

341
00:15:13,019 --> 00:15:16,199
what you receive from expat is a

342
00:15:16,199 --> 00:15:18,779
namespace and the tag pair concatenated

343
00:15:18,779 --> 00:15:21,180
using this separator

344
00:15:21,180 --> 00:15:24,779
and it's it gets more complicated if the

345
00:15:24,779 --> 00:15:27,600
tag also gets a if if a tag also has a

346
00:15:27,600 --> 00:15:28,800
prefix

347
00:15:28,800 --> 00:15:32,100
because in this case instead of the

348
00:15:32,100 --> 00:15:34,800
namespace tag pair the user receives

349
00:15:34,800 --> 00:15:37,380
namespace tag prefix triplet again

350
00:15:37,380 --> 00:15:40,620
called concatenated using this separator

351
00:15:40,620 --> 00:15:43,019
now as you're probably well aware in

352
00:15:43,019 --> 00:15:45,839
security whenever you are concatenating

353
00:15:45,839 --> 00:15:48,600
strings using a separator you need to

354
00:15:48,600 --> 00:15:52,139
pay special attention that the component

355
00:15:52,139 --> 00:15:54,000
strings you are concatenating can't

356
00:15:54,000 --> 00:15:56,459
contain this separator so let's see if

357
00:15:56,459 --> 00:15:59,639
that's actually the case here

358
00:15:59,639 --> 00:16:02,579
um so if you just tried to put a new

359
00:16:02,579 --> 00:16:04,860
line character in namespace attribute it

360
00:16:04,860 --> 00:16:07,620
wouldn't work however if you numerically

361
00:16:07,620 --> 00:16:09,060
encode it

362
00:16:09,060 --> 00:16:14,360
it will work and what the user receives

363
00:16:14,360 --> 00:16:17,940
looks like to the user as namespace tag

364
00:16:17,940 --> 00:16:19,980
prefix triplet

365
00:16:19,980 --> 00:16:23,100
however what the user thinks is a tag

366
00:16:23,100 --> 00:16:25,620
name is actually going to be a part of

367
00:16:25,620 --> 00:16:27,420
the namespace attribute

368
00:16:27,420 --> 00:16:29,699
and this gets very bad very quickly

369
00:16:29,699 --> 00:16:32,880
because there are other characters you

370
00:16:32,880 --> 00:16:35,220
can put in the namespace attribute that

371
00:16:35,220 --> 00:16:37,680
aren't valid inside the tag name so for

372
00:16:37,680 --> 00:16:39,720
example you can even construct tag name

373
00:16:39,720 --> 00:16:43,199
which contains other tags and then

374
00:16:43,199 --> 00:16:47,579
when this gets serialized

375
00:16:47,579 --> 00:16:51,660
then all all characters you put inside

376
00:16:51,660 --> 00:16:54,540
the tag name get output at this output

377
00:16:54,540 --> 00:16:57,860
as is and again it should be

378
00:16:57,860 --> 00:17:01,440
intuitively uh obvious that it's this

379
00:17:01,440 --> 00:17:05,939
can be used uh to smuggle stanzas

380
00:17:05,939 --> 00:17:09,059
this bug might even be more dangerous

381
00:17:09,059 --> 00:17:10,919
than the previous one

382
00:17:10,919 --> 00:17:13,619
because while the previous one required

383
00:17:13,619 --> 00:17:17,640
a specific pair of XML parsers

384
00:17:17,640 --> 00:17:21,359
this one affected everyone that uses

385
00:17:21,359 --> 00:17:24,720
that used uh ejabody server which is a

386
00:17:24,720 --> 00:17:29,760
quite popular xmpp server implementation

387
00:17:30,179 --> 00:17:32,880
all right so now that we've seen some

388
00:17:32,880 --> 00:17:35,160
bug examples let's

389
00:17:35,160 --> 00:17:38,280
talk a bit about how you can find such

390
00:17:38,280 --> 00:17:40,440
bugs yourselves

391
00:17:40,440 --> 00:17:43,260
in two obvious ways are Black Box

392
00:17:43,260 --> 00:17:46,140
testing and code review and you might be

393
00:17:46,140 --> 00:17:49,380
thinking well it makes sense the utf-8

394
00:17:49,380 --> 00:17:51,360
issue could have been found by just

395
00:17:51,360 --> 00:17:53,340
black box testing

396
00:17:53,340 --> 00:17:55,740
and the separator issue would have been

397
00:17:55,740 --> 00:17:59,160
easily spotted by code review however if

398
00:17:59,160 --> 00:18:00,600
you think that's how I actually found

399
00:18:00,600 --> 00:18:03,120
these issues then a heavy fooled because

400
00:18:03,120 --> 00:18:06,059
both of these issues were found using

401
00:18:06,059 --> 00:18:07,440
fuzzing

402
00:18:07,440 --> 00:18:09,360
and since fuzzing is something that's

403
00:18:09,360 --> 00:18:11,580
more commonly used

404
00:18:11,580 --> 00:18:14,280
to find memory corruption issues

405
00:18:14,280 --> 00:18:16,919
let's see how it can be used to find

406
00:18:16,919 --> 00:18:20,580
logic logic bugs like this

407
00:18:20,580 --> 00:18:24,360
so once again we return to our XML

408
00:18:24,360 --> 00:18:26,820
pipeline slide because this is the thing

409
00:18:26,820 --> 00:18:28,980
that we need to fuzz

410
00:18:28,980 --> 00:18:31,860
however don't think for a second we are

411
00:18:31,860 --> 00:18:34,559
going to do any kind of network fuzzing

412
00:18:34,559 --> 00:18:36,660
this would be a very silly and a very

413
00:18:36,660 --> 00:18:39,179
wasteful thing to do please don't do

414
00:18:39,179 --> 00:18:41,039
Network fuzzing unless you absolutely

415
00:18:41,039 --> 00:18:42,960
have to

416
00:18:42,960 --> 00:18:45,780
instead we're just going to

417
00:18:45,780 --> 00:18:48,720
take out the libraries that play a role

418
00:18:48,720 --> 00:18:52,620
here and put them in a single binary

419
00:18:52,620 --> 00:18:56,580
and then whenever you uh fast for logic

420
00:18:56,580 --> 00:18:57,780
bugs

421
00:18:57,780 --> 00:19:01,500
one thing you need to Define is what

422
00:19:01,500 --> 00:19:04,799
constitutes a bug and for us what we are

423
00:19:04,799 --> 00:19:08,220
going to consider a bug is going to be a

424
00:19:08,220 --> 00:19:11,160
parsing error at the very last stage of

425
00:19:11,160 --> 00:19:13,679
this pipeline in XML parser on the

426
00:19:13,679 --> 00:19:15,419
client

427
00:19:15,419 --> 00:19:17,820
so here you can see an example taken

428
00:19:17,820 --> 00:19:20,700
from the fuzzing harness that I actually

429
00:19:20,700 --> 00:19:22,919
used to fast this

430
00:19:22,919 --> 00:19:25,919
so what it does is it takes

431
00:19:25,919 --> 00:19:29,640
a sample wraps it into some XML tags and

432
00:19:29,640 --> 00:19:32,460
then feeds it to the par to the server

433
00:19:32,460 --> 00:19:35,340
parser and serializer and if this part

434
00:19:35,340 --> 00:19:38,039
errors out that would mean that the

435
00:19:38,039 --> 00:19:41,160
server caught an error so we just return

436
00:19:41,160 --> 00:19:44,400
we don't consider this a bug no crash

437
00:19:44,400 --> 00:19:47,580
however if this part succeeded then we

438
00:19:47,580 --> 00:19:50,520
take the output of the server serializer

439
00:19:50,520 --> 00:19:55,020
and feed it into the client parser and

440
00:19:55,020 --> 00:19:57,059
if this part errors out

441
00:19:57,059 --> 00:20:00,600
then that means that there was something

442
00:20:00,600 --> 00:20:02,640
on the client that the client wasn't

443
00:20:02,640 --> 00:20:05,280
supposed to see that made its way all

444
00:20:05,280 --> 00:20:07,500
the way through the server

445
00:20:07,500 --> 00:20:10,080
and so if we get this we actually cause

446
00:20:10,080 --> 00:20:13,260
a crash and here I just cause a crash by

447
00:20:13,260 --> 00:20:16,380
forcing a null pointer dereference

448
00:20:16,380 --> 00:20:19,200
if you find a bug like this it doesn't

449
00:20:19,200 --> 00:20:21,539
necessarily mean it's exploitable for

450
00:20:21,539 --> 00:20:23,160
stanza smuggling

451
00:20:23,160 --> 00:20:26,039
however at least in my case all of the

452
00:20:26,039 --> 00:20:28,559
bugs that I found this way did turn out

453
00:20:28,559 --> 00:20:30,960
to be exploitable

454
00:20:30,960 --> 00:20:34,460
for fuzzing this I used jackalope fuzzer

455
00:20:34,460 --> 00:20:37,260
it's not necessary to use this fuzzer

456
00:20:37,260 --> 00:20:40,140
you can use whatever fuzzer you like

457
00:20:40,140 --> 00:20:42,179
however Jackalope is the fuzzer that I

458
00:20:42,179 --> 00:20:45,179
wrote and that I actually use whenever I

459
00:20:45,179 --> 00:20:47,760
do any kind of general purpose fuzzing

460
00:20:47,760 --> 00:20:50,039
I think it's pretty good though I might

461
00:20:50,039 --> 00:20:52,620
be slightly biased

462
00:20:52,620 --> 00:20:55,679
however one thing that is important with

463
00:20:55,679 --> 00:20:59,280
regards to selecting a fuzzer is that

464
00:20:59,280 --> 00:21:01,380
your father has coverage feedback and to

465
00:21:01,380 --> 00:21:03,720
see why that's important consider that

466
00:21:03,720 --> 00:21:06,000
when I pass this

467
00:21:06,000 --> 00:21:09,840
my input Corpus was pretty bad and it

468
00:21:09,840 --> 00:21:12,179
contained neither numerically encoded

469
00:21:12,179 --> 00:21:15,600
character sequences nor special XML

470
00:21:15,600 --> 00:21:18,000
attributes like XML and S all of this

471
00:21:18,000 --> 00:21:21,059
was found by the buzzer on its own using

472
00:21:21,059 --> 00:21:24,260
just coverage feedback Magic

473
00:21:24,960 --> 00:21:29,280
so at this point you saw some bugs you

474
00:21:29,280 --> 00:21:31,620
know how to find them but it might not

475
00:21:31,620 --> 00:21:34,559
be obvious what you can do with them and

476
00:21:34,559 --> 00:21:37,140
it was not obvious to me either when I

477
00:21:37,140 --> 00:21:39,659
started this research I had some bugs

478
00:21:39,659 --> 00:21:41,280
but

479
00:21:41,280 --> 00:21:43,380
for a while I felt a bit like an

480
00:21:43,380 --> 00:21:45,600
underpants no you know I I have

481
00:21:45,600 --> 00:21:48,179
something I want to do something with it

482
00:21:48,179 --> 00:21:51,960
but the step in between is kind of vague

483
00:21:51,960 --> 00:21:53,520
um so let's see what you can actually do

484
00:21:53,520 --> 00:21:55,679
with stanza smuggling

485
00:21:55,679 --> 00:21:57,720
the first thing you can do is message

486
00:21:57,720 --> 00:21:59,280
spoofing

487
00:21:59,280 --> 00:22:00,539
meaning

488
00:22:00,539 --> 00:22:03,419
you can send a message

489
00:22:03,419 --> 00:22:05,220
to another client

490
00:22:05,220 --> 00:22:07,260
and

491
00:22:07,260 --> 00:22:09,840
the other client is going to think that

492
00:22:09,840 --> 00:22:12,059
this message is from someone who didn't

493
00:22:12,059 --> 00:22:14,400
actually send it

494
00:22:14,400 --> 00:22:15,480
um

495
00:22:15,480 --> 00:22:16,880
this

496
00:22:16,880 --> 00:22:19,980
this follows from the fact that if you

497
00:22:19,980 --> 00:22:22,620
smuggle a message stanza

498
00:22:22,620 --> 00:22:25,200
then all of its attributes including the

499
00:22:25,200 --> 00:22:26,760
sender attribute would be completely

500
00:22:26,760 --> 00:22:29,460
under your control

501
00:22:29,460 --> 00:22:31,200
this is something that you you can

502
00:22:31,200 --> 00:22:33,120
always do with this stanza smuggling

503
00:22:33,120 --> 00:22:35,760
attack however it's probably the least

504
00:22:35,760 --> 00:22:38,960
interesting thing you can do

505
00:22:40,500 --> 00:22:42,419
the more interesting thing you can try

506
00:22:42,419 --> 00:22:46,620
to do is redirect the xmpp connection to

507
00:22:46,620 --> 00:22:49,260
another server and the capability that

508
00:22:49,260 --> 00:22:51,419
would give you is to be able to

509
00:22:51,419 --> 00:22:53,159
intercept all of the victim's

510
00:22:53,159 --> 00:22:54,960
communication

511
00:22:54,960 --> 00:22:58,440
good news at least for the attackers is

512
00:22:58,440 --> 00:23:01,980
that xmpp spec already provides a way to

513
00:23:01,980 --> 00:23:02,940
do this

514
00:23:02,940 --> 00:23:07,340
through see other host error stanza

515
00:23:07,340 --> 00:23:11,460
unfortunately though most of the xmpp

516
00:23:11,460 --> 00:23:13,200
implementations that I saw don't

517
00:23:13,200 --> 00:23:16,020
implement this part of the spec

518
00:23:16,020 --> 00:23:18,539
the good news though is even though they

519
00:23:18,539 --> 00:23:21,059
don't implement it as prescribed by the

520
00:23:21,059 --> 00:23:23,280
spec they still implement it but they

521
00:23:23,280 --> 00:23:24,600
implement it

522
00:23:24,600 --> 00:23:26,940
in custom ways not

523
00:23:26,940 --> 00:23:30,020
not always but sometimes

524
00:23:30,020 --> 00:23:32,159
why they do it

525
00:23:32,159 --> 00:23:34,919
this way instead of just following the

526
00:23:34,919 --> 00:23:38,460
spec I have no idea but it's obvious

527
00:23:38,460 --> 00:23:41,039
that they still

528
00:23:41,039 --> 00:23:42,840
um that that xmpp installations

529
00:23:42,840 --> 00:23:46,080
especially larger Ones Still find this

530
00:23:46,080 --> 00:23:48,659
functionality useful

531
00:23:48,659 --> 00:23:50,820
another thing you can try

532
00:23:50,820 --> 00:23:55,020
is looking at custom xmpp extensions

533
00:23:55,020 --> 00:23:58,320
for example Zoom client defines over 50

534
00:23:58,320 --> 00:24:01,500
custom Zoom specific extensions to the

535
00:24:01,500 --> 00:24:04,020
xmpp protocol and then

536
00:24:04,020 --> 00:24:06,600
if you find any configuration data that

537
00:24:06,600 --> 00:24:08,520
travels over these extensions that then

538
00:24:08,520 --> 00:24:10,440
it would of course be completely under

539
00:24:10,440 --> 00:24:12,600
your control

540
00:24:12,600 --> 00:24:15,780
and one other thing you can try to look

541
00:24:15,780 --> 00:24:18,539
for are memory corruption box that you

542
00:24:18,539 --> 00:24:20,100
otherwise wouldn't be able to reach

543
00:24:20,100 --> 00:24:22,919
because they require stands as that one

544
00:24:22,919 --> 00:24:26,039
client can send to another client

545
00:24:26,039 --> 00:24:28,440
so here for example you have a quote

546
00:24:28,440 --> 00:24:31,320
from point to own write-up

547
00:24:31,320 --> 00:24:32,720
from last year

548
00:24:32,720 --> 00:24:38,220
and in their exploit a feature was used

549
00:24:38,220 --> 00:24:41,580
in the stanza that normally one client

550
00:24:41,580 --> 00:24:43,380
shouldn't be able to send to another now

551
00:24:43,380 --> 00:24:45,299
in this case it was possible to do due

552
00:24:45,299 --> 00:24:46,980
to an issue unrelated to stanza

553
00:24:46,980 --> 00:24:49,620
smuggling however when you have a stanza

554
00:24:49,620 --> 00:24:53,280
smuggling uh primitive then you don't

555
00:24:53,280 --> 00:24:56,280
need to worry about what one client can

556
00:24:56,280 --> 00:24:58,620
send to another you can send everything

557
00:24:58,620 --> 00:25:01,158
you like

558
00:25:03,179 --> 00:25:04,919
so

559
00:25:04,919 --> 00:25:08,580
let's now try to put all of that

560
00:25:08,580 --> 00:25:12,539
together and use it to hack Zoom

561
00:25:12,539 --> 00:25:16,320
when I started this research

562
00:25:16,320 --> 00:25:19,679
I attempted various approaches for

563
00:25:19,679 --> 00:25:23,760
exploiting zoom and mostly I was looking

564
00:25:23,760 --> 00:25:28,020
at custom X and PP extensions I found

565
00:25:28,020 --> 00:25:30,059
some interesting stuff but nothing that

566
00:25:30,059 --> 00:25:33,840
would really give me a zero day RC

567
00:25:33,840 --> 00:25:36,559
the Breakthrough however came

568
00:25:36,559 --> 00:25:40,860
when I noticed that Zoom made custom

569
00:25:40,860 --> 00:25:42,600
changes

570
00:25:42,600 --> 00:25:45,779
to the glux library specifically

571
00:25:45,779 --> 00:25:48,360
to the handling of the error stanza

572
00:25:48,360 --> 00:25:50,840
inside the glux Library

573
00:25:50,840 --> 00:25:54,539
specifically Zoom edit support for a tag

574
00:25:54,539 --> 00:25:57,000
called revoke token inside the error

575
00:25:57,000 --> 00:25:59,340
stanza and this revoked token tag

576
00:25:59,340 --> 00:26:03,120
supported an attribute called web domain

577
00:26:03,120 --> 00:26:04,620
so

578
00:26:04,620 --> 00:26:06,960
naturally I wondered what would happen

579
00:26:06,960 --> 00:26:09,900
if I put my own domain inside this web

580
00:26:09,900 --> 00:26:11,820
domain attribute

581
00:26:11,820 --> 00:26:14,460
and what would happen

582
00:26:14,460 --> 00:26:18,020
is that I would get an HTTP post request

583
00:26:18,020 --> 00:26:21,659
for an endpoint called cluster switch

584
00:26:21,659 --> 00:26:24,059
so at this point

585
00:26:24,059 --> 00:26:26,159
um the question becomes what does this

586
00:26:26,159 --> 00:26:28,679
cluster switch endpoint do and for the

587
00:26:28,679 --> 00:26:31,260
purpose of finding that out I set up

588
00:26:31,260 --> 00:26:33,419
many in the middle proxy in Reverse

589
00:26:33,419 --> 00:26:36,320
proxy mode meaning that it proxied

590
00:26:36,320 --> 00:26:40,080
requests to the actual Zoom servers and

591
00:26:40,080 --> 00:26:43,919
then when you do this you are able to to

592
00:26:43,919 --> 00:26:47,279
observe the response from the server and

593
00:26:47,279 --> 00:26:49,980
what the server responds

594
00:26:49,980 --> 00:26:53,279
for this endpoint was it was a really

595
00:26:53,279 --> 00:26:55,860
large configuration protobuf but the

596
00:26:55,860 --> 00:26:57,659
part of that protobot that I found the

597
00:26:57,659 --> 00:27:00,480
most interesting was a pretty large list

598
00:27:00,480 --> 00:27:03,360
of domain names and these are domain

599
00:27:03,360 --> 00:27:04,740
names

600
00:27:04,740 --> 00:27:09,120
that Zoom client uses when connecting to

601
00:27:09,120 --> 00:27:12,659
various services on Zoom servers so for

602
00:27:12,659 --> 00:27:14,159
example there is a domain for web

603
00:27:14,159 --> 00:27:18,480
there's a domain for xmpp ETC and if you

604
00:27:18,480 --> 00:27:20,460
replace all of this then you would be

605
00:27:20,460 --> 00:27:23,039
able to intercept all communication

606
00:27:23,039 --> 00:27:25,020
between the zoom client

607
00:27:25,020 --> 00:27:27,299
in the zoom service which is already

608
00:27:27,299 --> 00:27:28,980
quite nice

609
00:27:28,980 --> 00:27:30,840
however what I really wanted was

610
00:27:30,840 --> 00:27:34,440
zeroclick rce as I mentioned and I had

611
00:27:34,440 --> 00:27:36,960
an idea about how to do that and that

612
00:27:36,960 --> 00:27:40,440
was to hijack the auto update mechanism

613
00:27:40,440 --> 00:27:42,900
in order to do that what I replaced was

614
00:27:42,900 --> 00:27:46,080
the domain that Zoom client uses to

615
00:27:46,080 --> 00:27:48,840
connect to the zooms web server

616
00:27:48,840 --> 00:27:50,220
so

617
00:27:50,220 --> 00:27:52,740
let's recap how the attack looks like so

618
00:27:52,740 --> 00:27:54,059
far

619
00:27:54,059 --> 00:27:57,179
he starts by attacker exploiting a

620
00:27:57,179 --> 00:28:00,179
stanza smuggling issue and sending a

621
00:28:00,179 --> 00:28:03,000
payload with an error stanza with revoke

622
00:28:03,000 --> 00:28:04,140
token tag

623
00:28:04,140 --> 00:28:08,520
and when the victim client receives this

624
00:28:08,520 --> 00:28:10,799
it immediately requests the cluster

625
00:28:10,799 --> 00:28:12,600
switch endpoint which the attacker can

626
00:28:12,600 --> 00:28:14,640
proxy

627
00:28:14,640 --> 00:28:19,260
but replace the domain used for um

628
00:28:19,260 --> 00:28:21,799
useful used for web for web

629
00:28:21,799 --> 00:28:25,440
and then eventually the client is going

630
00:28:25,440 --> 00:28:27,960
to request auto update information using

631
00:28:27,960 --> 00:28:30,900
the release notes endpoint

632
00:28:30,900 --> 00:28:34,380
and we can again proxy this but

633
00:28:34,380 --> 00:28:39,659
replace the URLs used to download update

634
00:28:39,659 --> 00:28:42,320
components

635
00:28:42,659 --> 00:28:45,600
the way Zoom or update works is that

636
00:28:45,600 --> 00:28:48,120
Zoom downloads two files

637
00:28:48,120 --> 00:28:50,299
one is called

638
00:28:50,299 --> 00:28:52,559
installer.exe and the other one is

639
00:28:52,559 --> 00:28:55,799
called zoom.msi

640
00:28:55,799 --> 00:28:57,720
and even though this one is called that

641
00:28:57,720 --> 00:29:00,000
MSI it's actually just a 7-Zip archive

642
00:29:00,000 --> 00:29:05,179
that contains the actual update files

643
00:29:06,600 --> 00:29:11,100
we can replace both of these files you

644
00:29:11,100 --> 00:29:13,679
might be thinking that it's game over

645
00:29:13,679 --> 00:29:16,440
unfortunately not quite because of

646
00:29:16,440 --> 00:29:18,059
Integrity checking

647
00:29:18,059 --> 00:29:20,700
specifically Zoom client checks the

648
00:29:20,700 --> 00:29:22,559
signature of installer.exe before

649
00:29:22,559 --> 00:29:23,640
running it

650
00:29:23,640 --> 00:29:27,860
and installer.exe checks the hash of

651
00:29:27,860 --> 00:29:30,899
zoom.msi before unpacking it

652
00:29:30,899 --> 00:29:32,940
and on the first glance this looks

653
00:29:32,940 --> 00:29:34,320
pretty solid right

654
00:29:34,320 --> 00:29:38,279
but one thing you can do is a downgrade

655
00:29:38,279 --> 00:29:42,200
attack specifically I found that version

656
00:29:42,200 --> 00:29:45,840
4.4 of Zoom installer is on one hand

657
00:29:45,840 --> 00:29:49,559
still properly signed by Zoom but on the

658
00:29:49,559 --> 00:29:52,260
other hand it skips the Integrity check

659
00:29:52,260 --> 00:29:57,659
on zoom.msi it it just unpacks it

660
00:29:57,659 --> 00:29:58,799
so

661
00:29:58,799 --> 00:30:02,820
it actually looks like it's game over at

662
00:30:02,820 --> 00:30:04,320
this point

663
00:30:04,320 --> 00:30:07,200
so let's take a look at all of this in

664
00:30:07,200 --> 00:30:09,500
action

665
00:30:11,340 --> 00:30:13,879
together

666
00:30:13,919 --> 00:30:17,520
sorry let me just restart this is a

667
00:30:17,520 --> 00:30:19,380
video demo it needs to be a video demo

668
00:30:19,380 --> 00:30:21,299
because uh

669
00:30:21,299 --> 00:30:24,659
the bugs are patched on the zoom servers

670
00:30:24,659 --> 00:30:28,020
so even if even if I had

671
00:30:28,020 --> 00:30:31,200
um old clients it wouldn't work

672
00:30:31,200 --> 00:30:33,720
I'm sorry that there is a lot of things

673
00:30:33,720 --> 00:30:38,240
going on around here

674
00:30:38,240 --> 00:30:41,760
and the text might be a bit difficult to

675
00:30:41,760 --> 00:30:43,620
see but you don't need to see it I'll

676
00:30:43,620 --> 00:30:46,260
explain everything that's going on but

677
00:30:46,260 --> 00:30:47,820
also if you just want to see better then

678
00:30:47,820 --> 00:30:50,760
feel free to to just uh come closer to

679
00:30:50,760 --> 00:30:52,919
the screens in the room

680
00:30:52,919 --> 00:30:56,179
so what we have here

681
00:30:56,179 --> 00:31:00,620
is attackers VM on the bottom left

682
00:31:00,620 --> 00:31:03,600
attackers proxy on the top left

683
00:31:03,600 --> 00:31:06,059
and the victim VM on the right side of

684
00:31:06,059 --> 00:31:10,200
the screen which is just a clean windows

685
00:31:10,200 --> 00:31:12,659
VM with the most recent version of Zoom

686
00:31:12,659 --> 00:31:15,740
at the time installed

687
00:31:16,020 --> 00:31:18,539
the attack starts by the attacker

688
00:31:18,539 --> 00:31:20,100
running Zoom client under

689
00:31:20,100 --> 00:31:21,899
instrumentation

690
00:31:21,899 --> 00:31:24,779
and this instrumentation allows the

691
00:31:24,779 --> 00:31:27,179
attacker to intercept

692
00:31:27,179 --> 00:31:30,600
and modify raw xmpp traffic so here you

693
00:31:30,600 --> 00:31:31,559
can see

694
00:31:31,559 --> 00:31:33,360
some of that traffic

695
00:31:33,360 --> 00:31:35,940
what happens next is that the attacker

696
00:31:35,940 --> 00:31:39,299
sends a very special message

697
00:31:39,299 --> 00:31:42,179
and the instrumentation running in the

698
00:31:42,179 --> 00:31:44,399
background replaces this message with

699
00:31:44,399 --> 00:31:47,880
the stanza smuggling payload when

700
00:31:47,880 --> 00:31:50,039
the victim client receives this message

701
00:31:50,039 --> 00:31:52,200
it immediately requests the cluster

702
00:31:52,200 --> 00:31:53,640
switch endpoint

703
00:31:53,640 --> 00:31:57,120
which we proxy and then

704
00:31:57,120 --> 00:31:59,820
from that point on the victim client

705
00:31:59,820 --> 00:32:02,760
continues to use our server instead of

706
00:32:02,760 --> 00:32:05,340
the zooms web server

707
00:32:05,340 --> 00:32:07,860
uh what's going to happen next is I'm

708
00:32:07,860 --> 00:32:09,320
going to restart

709
00:32:09,320 --> 00:32:13,620
the client on on the victim machine the

710
00:32:13,620 --> 00:32:16,919
reason for this is that Zoom checks for

711
00:32:16,919 --> 00:32:18,720
auto updates

712
00:32:18,720 --> 00:32:21,539
about one minute after it starts it

713
00:32:21,539 --> 00:32:23,159
might happen at other intervals as well

714
00:32:23,159 --> 00:32:25,440
I didn't check uh

715
00:32:25,440 --> 00:32:29,580
but even if the attack requires

716
00:32:29,580 --> 00:32:32,220
restarting of the victim client I still

717
00:32:32,220 --> 00:32:34,740
consider it zero click because everybody

718
00:32:34,740 --> 00:32:37,320
is going to restart their computer

719
00:32:37,320 --> 00:32:38,880
sometimes

720
00:32:38,880 --> 00:32:43,799
uh at least to install OS updates and if

721
00:32:43,799 --> 00:32:45,299
you don't do that well then you have

722
00:32:45,299 --> 00:32:48,419
worse problems than Zoom exploit

723
00:32:48,419 --> 00:32:49,620
um

724
00:32:49,620 --> 00:32:51,179
so

725
00:32:51,179 --> 00:32:54,600
right now we

726
00:32:54,600 --> 00:32:58,080
are just waiting for

727
00:32:58,080 --> 00:32:59,220
um

728
00:32:59,220 --> 00:33:01,679
we're just waiting for the weekend

729
00:33:01,679 --> 00:33:04,740
client to check for uh updates I'm just

730
00:33:04,740 --> 00:33:07,559
going to skip ahead until the point that

731
00:33:07,559 --> 00:33:08,820
happens

732
00:33:08,820 --> 00:33:10,860
or actually I don't need it it's going

733
00:33:10,860 --> 00:33:13,200
to happen any second now you should see

734
00:33:13,200 --> 00:33:16,019
a request for release notes endpoint

735
00:33:16,019 --> 00:33:19,200
there it goes and then after that there

736
00:33:19,200 --> 00:33:21,299
is the downloading of those two files

737
00:33:21,299 --> 00:33:23,159
that that you saw a couple of slides

738
00:33:23,159 --> 00:33:26,039
back so first is the update archive it's

739
00:33:26,039 --> 00:33:27,899
a bit larger so it

740
00:33:27,899 --> 00:33:30,120
take some time and the second file is

741
00:33:30,120 --> 00:33:33,000
smaller so it should be done quickly

742
00:33:33,000 --> 00:33:35,460
and then

743
00:33:35,460 --> 00:33:38,340
if you restart the victim client one

744
00:33:38,340 --> 00:33:39,840
more time it should start the auto

745
00:33:39,840 --> 00:33:41,700
update process

746
00:33:41,700 --> 00:33:43,860
however when the auto update finishes

747
00:33:43,860 --> 00:33:46,320
instead of launching the updated version

748
00:33:46,320 --> 00:33:50,658
of Zoom you get something else

749
00:33:56,820 --> 00:33:59,039
thanks

750
00:33:59,039 --> 00:34:00,120
um

751
00:34:00,120 --> 00:34:03,299
I should note that calculator is just

752
00:34:03,299 --> 00:34:05,460
the means to show that I have RC at this

753
00:34:05,460 --> 00:34:08,159
point in a more realistic scenario you

754
00:34:08,159 --> 00:34:10,379
would actually launch a normal Zoom

755
00:34:10,379 --> 00:34:13,139
executable but you would also launch

756
00:34:13,139 --> 00:34:15,839
um whatever payload you want in the

757
00:34:15,839 --> 00:34:18,000
background

758
00:34:18,000 --> 00:34:21,179
okay let's now go back

759
00:34:21,179 --> 00:34:24,980
to my slide deck now

760
00:34:25,139 --> 00:34:27,780
we already saw

761
00:34:27,780 --> 00:34:30,000
okay so

762
00:34:30,000 --> 00:34:30,599
um

763
00:34:30,599 --> 00:34:32,339
to wrap it up

764
00:34:32,339 --> 00:34:36,659
I think that these stanza smuggling

765
00:34:36,659 --> 00:34:40,020
attacks are pretty underexplored attack

766
00:34:40,020 --> 00:34:43,440
surface I was able to find many

767
00:34:43,440 --> 00:34:46,139
different bugs in in different targets

768
00:34:46,139 --> 00:34:49,379
and unfortunately uh

769
00:34:49,379 --> 00:34:53,760
the way xmpp protocol is designed kind

770
00:34:53,760 --> 00:34:57,359
of makes it easy to to introduce and

771
00:34:57,359 --> 00:35:00,359
also to find bugs like this and the bugs

772
00:35:00,359 --> 00:35:03,180
themselves can be pretty dangerous so

773
00:35:03,180 --> 00:35:05,420
the impact can range all the way through

774
00:35:05,420 --> 00:35:08,040
relatively benign message moving all the

775
00:35:08,040 --> 00:35:10,380
way through uh intercepting private

776
00:35:10,380 --> 00:35:13,619
communication to as it was it as was

777
00:35:13,619 --> 00:35:17,640
just demonstrated zero click rce

778
00:35:17,640 --> 00:35:19,320
and finally

779
00:35:19,320 --> 00:35:22,260
please don't estimate fuzzing for

780
00:35:22,260 --> 00:35:25,260
finding logic bugs

781
00:35:25,260 --> 00:35:29,240
finally finally I'd like to just think

782
00:35:29,240 --> 00:35:32,460
uh some folks thanks to who this story

783
00:35:32,460 --> 00:35:35,520
has a happy end I believe

784
00:35:35,520 --> 00:35:36,720
so

785
00:35:36,720 --> 00:35:39,540
specifically Sebastian peeping of expat

786
00:35:39,540 --> 00:35:42,060
who was really helpful with with uh

787
00:35:42,060 --> 00:35:45,480
getting the expert issues fixed Zoom

788
00:35:45,480 --> 00:35:47,880
security team who took

789
00:35:47,880 --> 00:35:50,040
all of these issues

790
00:35:50,040 --> 00:35:52,619
very seriously and made really

791
00:35:52,619 --> 00:35:54,540
comprehensive patches

792
00:35:54,540 --> 00:35:59,579
and and finally my team members uh

793
00:35:59,579 --> 00:36:02,160
and they thank them for their annoyingly

794
00:36:02,160 --> 00:36:05,820
useful comments during uh the course of

795
00:36:05,820 --> 00:36:07,260
This research

796
00:36:07,260 --> 00:36:09,430
thank you

797
00:36:09,430 --> 00:36:12,540
[Music]

798
00:36:16,380 --> 00:36:19,489
[Music]

