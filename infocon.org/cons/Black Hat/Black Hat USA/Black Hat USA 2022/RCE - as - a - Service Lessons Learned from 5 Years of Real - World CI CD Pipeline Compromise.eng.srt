1
00:00:01,730 --> 00:00:03,720
[Music]

2
00:00:03,720 --> 00:00:06,720
foreign

3
00:00:08,700 --> 00:00:10,740
good afternoon everyone I can tell from

4
00:00:10,740 --> 00:00:12,360
the weird Echo that my microphone is at

5
00:00:12,360 --> 00:00:14,700
least working so that's a good start I'm

6
00:00:14,700 --> 00:00:16,440
hoping that you are all here to hear

7
00:00:16,440 --> 00:00:19,020
about some experiences in breaking out

8
00:00:19,020 --> 00:00:21,660
of cicd pipelines I'm going to start off

9
00:00:21,660 --> 00:00:24,420
with the mandatory who here has used

10
00:00:24,420 --> 00:00:27,119
some form of CI before let's get some

11
00:00:27,119 --> 00:00:28,560
audience participation there's some hand

12
00:00:28,560 --> 00:00:30,599
I can't really see that many because my

13
00:00:30,599 --> 00:00:31,980
glasses are filthy and these lights are

14
00:00:31,980 --> 00:00:33,780
really bright

15
00:00:33,780 --> 00:00:35,300
um

16
00:00:35,300 --> 00:00:37,739
who has broken out of CI pipelines

17
00:00:37,739 --> 00:00:39,840
anyone done that sort of thing

18
00:00:39,840 --> 00:00:41,579
we're getting some yeses that'll do good

19
00:00:41,579 --> 00:00:44,040
enough for me

20
00:00:44,040 --> 00:00:46,559
quick introduction I'm Ian I am the

21
00:00:46,559 --> 00:00:48,480
containerization practice lead at NCC

22
00:00:48,480 --> 00:00:50,640
group I've been with the company for

23
00:00:50,640 --> 00:00:52,379
about six years and I've spent most of

24
00:00:52,379 --> 00:00:55,140
that time breaking out of containers or

25
00:00:55,140 --> 00:00:57,000
cloudy environments and most recently

26
00:00:57,000 --> 00:00:59,640
pipelines hi everyone my name is Victor

27
00:00:59,640 --> 00:01:02,760
and I'm a Jenkins security MVP and also

28
00:01:02,760 --> 00:01:05,280
a cloud research group leader and I have

29
00:01:05,280 --> 00:01:09,020
seven years of experience

30
00:01:09,900 --> 00:01:11,939
so just to make sure we're all on the

31
00:01:11,939 --> 00:01:13,020
same page here we'll throw some

32
00:01:13,020 --> 00:01:15,180
terminology around first of all

33
00:01:15,180 --> 00:01:18,600
um we're talking about CI and CD CI is

34
00:01:18,600 --> 00:01:21,900
continuous integration so when your devs

35
00:01:21,900 --> 00:01:23,880
are running some code writing some code

36
00:01:23,880 --> 00:01:25,740
make some commits goes into something

37
00:01:25,740 --> 00:01:27,659
like GitHub or gitlab or whatever your

38
00:01:27,659 --> 00:01:29,520
version control of choice is

39
00:01:29,520 --> 00:01:31,799
and continuous integration generally for

40
00:01:31,799 --> 00:01:33,840
our purposes is running things like unit

41
00:01:33,840 --> 00:01:36,119
testing or security static analysis

42
00:01:36,119 --> 00:01:39,479
against the code and then CD depending

43
00:01:39,479 --> 00:01:40,920
on which acronym book you've swallowed

44
00:01:40,920 --> 00:01:42,540
lately is continuous deployment

45
00:01:42,540 --> 00:01:45,360
continuous development and this is the

46
00:01:45,360 --> 00:01:47,820
part where a service automatically picks

47
00:01:47,820 --> 00:01:49,560
up the code that you've written or the

48
00:01:49,560 --> 00:01:52,200
the compiled version and then fires that

49
00:01:52,200 --> 00:01:53,880
off into your production environment to

50
00:01:53,880 --> 00:01:56,399
actually run where users can hit it

51
00:01:56,399 --> 00:01:59,700
a pipeline basically is a bunch of tasks

52
00:01:59,700 --> 00:02:01,619
sequentially programmed to run one after

53
00:02:01,619 --> 00:02:03,360
another

54
00:02:03,360 --> 00:02:04,619
um a secret we're going to talk about

55
00:02:04,619 --> 00:02:07,140
Secrets quite a lot this is basically

56
00:02:07,140 --> 00:02:09,660
anything you don't want to be public so

57
00:02:09,660 --> 00:02:11,819
API Keys passwords

58
00:02:11,819 --> 00:02:13,739
um I don't know

59
00:02:13,739 --> 00:02:15,420
SSH Keys something along those lines

60
00:02:15,420 --> 00:02:17,640
anything you wouldn't want the wider

61
00:02:17,640 --> 00:02:19,379
internet to have access to

62
00:02:19,379 --> 00:02:22,379
an rce remote code execution basically

63
00:02:22,379 --> 00:02:25,319
can I get some codes to run on your

64
00:02:25,319 --> 00:02:27,360
machine

65
00:02:27,360 --> 00:02:29,640
so now that we know the words let's have

66
00:02:29,640 --> 00:02:31,620
a graph

67
00:02:31,620 --> 00:02:33,060
would generally look something like this

68
00:02:33,060 --> 00:02:34,980
so you've got your developer and

69
00:02:34,980 --> 00:02:37,319
developers are happily writing code the

70
00:02:37,319 --> 00:02:39,660
theory behind CI CD as it accelerates

71
00:02:39,660 --> 00:02:41,280
your developers so everyone's working on

72
00:02:41,280 --> 00:02:43,140
a central code base the code's being

73
00:02:43,140 --> 00:02:45,480
committed in and then whenever something

74
00:02:45,480 --> 00:02:48,239
happens on code or on a schedule

75
00:02:48,239 --> 00:02:50,220
uh something is triggered now that

76
00:02:50,220 --> 00:02:51,780
something could be a commit it could be

77
00:02:51,780 --> 00:02:53,879
a merge request basically anything that

78
00:02:53,879 --> 00:02:55,739
makes a change to the the environment

79
00:02:55,739 --> 00:02:57,480
could also just be a schedule like

80
00:02:57,480 --> 00:02:59,580
rebuild this once a month

81
00:02:59,580 --> 00:03:01,440
and at that point you'll generally see

82
00:03:01,440 --> 00:03:03,180
some testing happen some deployment

83
00:03:03,180 --> 00:03:05,040
happen you might create some artifacts

84
00:03:05,040 --> 00:03:08,700
like a static analysis report to be

85
00:03:08,700 --> 00:03:10,379
ingested into some form of ticketing

86
00:03:10,379 --> 00:03:13,440
system you might have some compiled

87
00:03:13,440 --> 00:03:15,060
binaries being spat out some Docker

88
00:03:15,060 --> 00:03:16,800
containers being built

89
00:03:16,800 --> 00:03:19,019
and then the next steps in some

90
00:03:19,019 --> 00:03:20,519
environment most of the time will pick

91
00:03:20,519 --> 00:03:22,739
up those artifacts and then launch them

92
00:03:22,739 --> 00:03:25,019
off to run somewhere that somewhere

93
00:03:25,019 --> 00:03:27,720
could be either on-prem or in the cloud

94
00:03:27,720 --> 00:03:29,700
could be something serverless basically

95
00:03:29,700 --> 00:03:31,800
this is where the code ultimately ends

96
00:03:31,800 --> 00:03:34,220
up running

97
00:03:34,340 --> 00:03:37,200
and this pipeline can be very complex

98
00:03:37,200 --> 00:03:39,720
and you can include a lot of tools so

99
00:03:39,720 --> 00:03:41,819
even like hundreds of tools and people

100
00:03:41,819 --> 00:03:44,280
created a periodic representation of

101
00:03:44,280 --> 00:03:45,780
these tools that you can see in the

102
00:03:45,780 --> 00:03:48,080
slides

103
00:03:48,120 --> 00:03:51,720
thank you so what will the attacker see

104
00:03:51,720 --> 00:03:54,900
when when they look at your cicd

105
00:03:54,900 --> 00:03:58,080
pipeline so they will see some code goes

106
00:03:58,080 --> 00:04:00,659
in and then apps come out or even an

107
00:04:00,659 --> 00:04:03,060
application got deployed in a production

108
00:04:03,060 --> 00:04:05,340
environment or a test environment

109
00:04:05,340 --> 00:04:07,560
uh so they don't really have to do too

110
00:04:07,560 --> 00:04:09,120
much because they just had some quotes

111
00:04:09,120 --> 00:04:12,180
and then they will have access to a

112
00:04:12,180 --> 00:04:14,700
different environment or or network or

113
00:04:14,700 --> 00:04:16,978
something else so these pipelines have

114
00:04:16,978 --> 00:04:21,600
access to multiple networks and multiple

115
00:04:21,600 --> 00:04:24,960
environments as well so starting from a

116
00:04:24,960 --> 00:04:26,759
test environment a pre-production

117
00:04:26,759 --> 00:04:29,340
environment production environment but

118
00:04:29,340 --> 00:04:31,979
also it can be on-prem work Cloud as

119
00:04:31,979 --> 00:04:33,020
well

120
00:04:33,020 --> 00:04:36,320
also these pipelines and the supporting

121
00:04:36,320 --> 00:04:40,080
infrastructure stores credentials that

122
00:04:40,080 --> 00:04:43,979
are used throughout the steps but also

123
00:04:43,979 --> 00:04:46,380
they pulled a third party or internal

124
00:04:46,380 --> 00:04:48,540
dependencies as well like local images

125
00:04:48,540 --> 00:04:52,380
or JavaScript package

126
00:04:52,380 --> 00:04:56,220
but they also push and upload the final

127
00:04:56,220 --> 00:04:59,520
artifact or Define a program or if

128
00:04:59,520 --> 00:05:01,320
you're just deploying in a cloud

129
00:05:01,320 --> 00:05:04,139
environment web application but they

130
00:05:04,139 --> 00:05:06,120
also can use it and see it as a free

131
00:05:06,120 --> 00:05:08,580
resource so if they want to use it as a

132
00:05:08,580 --> 00:05:12,300
crypto mining application and mine some

133
00:05:12,300 --> 00:05:15,840
crypto then they can do it as well

134
00:05:15,840 --> 00:05:18,300
so there's a bit of background of what

135
00:05:18,300 --> 00:05:21,479
CI and CD is and does generally we're

136
00:05:21,479 --> 00:05:22,919
seeing it being adopted to speed up

137
00:05:22,919 --> 00:05:24,720
developers make them run a bit faster

138
00:05:24,720 --> 00:05:27,240
because devs like to go fast

139
00:05:27,240 --> 00:05:29,940
over the last few years we've uh had a

140
00:05:29,940 --> 00:05:31,500
few engagements we've had more and more

141
00:05:31,500 --> 00:05:32,880
customers asking us to have a look at

142
00:05:32,880 --> 00:05:35,160
some CI deployments and we've started to

143
00:05:35,160 --> 00:05:36,900
see some fairly interesting breakouts

144
00:05:36,900 --> 00:05:38,820
and we're not going to be dropping any

145
00:05:38,820 --> 00:05:40,199
old days at the moment but what we are

146
00:05:40,199 --> 00:05:42,180
going to do is show some fairly high

147
00:05:42,180 --> 00:05:45,240
impact times where the security

148
00:05:45,240 --> 00:05:46,979
principles were not applied as well as

149
00:05:46,979 --> 00:05:48,479
it could have been to some fairly

150
00:05:48,479 --> 00:05:50,759
interesting effects

151
00:05:50,759 --> 00:05:52,860
so the first engagement that we want to

152
00:05:52,860 --> 00:05:54,720
talk about was a customer who approached

153
00:05:54,720 --> 00:05:56,220
us and said hey we've got a fairly

154
00:05:56,220 --> 00:05:57,840
locked down pipeline we're quite happy

155
00:05:57,840 --> 00:05:59,100
with this

156
00:05:59,100 --> 00:06:00,240
um

157
00:06:00,240 --> 00:06:02,160
can you come in we'll give you developer

158
00:06:02,160 --> 00:06:04,080
access we'll just give your credentials

159
00:06:04,080 --> 00:06:05,520
let's see what you can do as a normal

160
00:06:05,520 --> 00:06:07,139
developer not an admin user or anything

161
00:06:07,139 --> 00:06:08,100
like that

162
00:06:08,100 --> 00:06:10,320
so we come in we've got access to a

163
00:06:10,320 --> 00:06:12,360
single bitbucket repo and it was hosting

164
00:06:12,360 --> 00:06:14,220
an Apache Maven project so we had some

165
00:06:14,220 --> 00:06:15,600
Java

166
00:06:15,600 --> 00:06:17,580
um one of the things that we were able

167
00:06:17,580 --> 00:06:20,400
to modify with this access was the

168
00:06:20,400 --> 00:06:22,080
dependencies that were required for the

169
00:06:22,080 --> 00:06:24,840
application to build successfully we uh

170
00:06:24,840 --> 00:06:27,000
did something extremely clever which was

171
00:06:27,000 --> 00:06:28,680
hey let's just specify one of our own

172
00:06:28,680 --> 00:06:30,120
dependencies instead of the internal

173
00:06:30,120 --> 00:06:32,160
ones that are meant to be used

174
00:06:32,160 --> 00:06:35,460
so we hosted our malicious dependency on

175
00:06:35,460 --> 00:06:38,520
attacker.com told the uh build pipeline

176
00:06:38,520 --> 00:06:40,080
hey when you build this code go and

177
00:06:40,080 --> 00:06:41,400
retrieve all the dependencies from your

178
00:06:41,400 --> 00:06:42,600
dependency file

179
00:06:42,600 --> 00:06:44,639
quite happily it reached out to us and

180
00:06:44,639 --> 00:06:46,680
grabbed our payload which was a

181
00:06:46,680 --> 00:06:49,139
meterpreter reverse shell no fancy AV

182
00:06:49,139 --> 00:06:51,060
bypasses or anything here we literally

183
00:06:51,060 --> 00:06:52,680
went Metasploit give me a payload

184
00:06:52,680 --> 00:06:55,199
reverse shell Happy Days

185
00:06:55,199 --> 00:06:56,400
so

186
00:06:56,400 --> 00:06:58,500
as soon as the pipeline started running

187
00:06:58,500 --> 00:07:00,479
it reached out to our server grabbed our

188
00:07:00,479 --> 00:07:03,060
dependency loaded that in and then went

189
00:07:03,060 --> 00:07:04,740
hey as part of this program I need to

190
00:07:04,740 --> 00:07:06,360
reach out and just get a shell back on

191
00:07:06,360 --> 00:07:09,720
this this um Target I've been told about

192
00:07:09,720 --> 00:07:11,880
we were given access effectively through

193
00:07:11,880 --> 00:07:15,120
this to a Jenkins Runner we didn't know

194
00:07:15,120 --> 00:07:17,039
what the start that this was Jenkins we

195
00:07:17,039 --> 00:07:19,560
find out fairly quickly and this uh

196
00:07:19,560 --> 00:07:21,419
runner had a fairly limited environment

197
00:07:21,419 --> 00:07:24,240
so there wasn't too much in the the

198
00:07:24,240 --> 00:07:26,039
runner's file system which was good for

199
00:07:26,039 --> 00:07:27,660
us because it made our Recon really easy

200
00:07:27,660 --> 00:07:31,560
basically we ran LS lar got a dump of

201
00:07:31,560 --> 00:07:32,580
absolutely everything looked for

202
00:07:32,580 --> 00:07:34,860
anything juicy and one thing was one of

203
00:07:34,860 --> 00:07:36,240
the things we found in the kind of

204
00:07:36,240 --> 00:07:39,720
bowels of the file system was an SSH

205
00:07:39,720 --> 00:07:41,880
private key we had no idea why that was

206
00:07:41,880 --> 00:07:44,099
there turns out later on customer didn't

207
00:07:44,099 --> 00:07:46,500
really know why that was there either

208
00:07:46,500 --> 00:07:48,360
so we've got a private key and we've got

209
00:07:48,360 --> 00:07:50,039
network access and did a little bit of

210
00:07:50,039 --> 00:07:52,319
nmap found Port 22 listening everywhere

211
00:07:52,319 --> 00:07:54,840
so we've now got keys we've got SSH

212
00:07:54,840 --> 00:07:56,819
access as a wise snowman what's once

213
00:07:56,819 --> 00:07:58,380
said put them together it just makes

214
00:07:58,380 --> 00:08:01,380
sense we had SSH access into some other

215
00:08:01,380 --> 00:08:03,599
servers and again at the time we didn't

216
00:08:03,599 --> 00:08:05,220
really know what the other servers were

217
00:08:05,220 --> 00:08:06,840
we were just scanning around and trying

218
00:08:06,840 --> 00:08:08,639
keys

219
00:08:08,639 --> 00:08:10,020
turns out those were the Jenkins control

220
00:08:10,020 --> 00:08:12,539
nodes so Jenkins has a hierarchy of

221
00:08:12,539 --> 00:08:14,099
working nodes and control nodes control

222
00:08:14,099 --> 00:08:15,780
nodes tend to hold the more juicy

223
00:08:15,780 --> 00:08:18,539
secrets and what we were able to get in

224
00:08:18,539 --> 00:08:20,879
this case was all of the secrets for all

225
00:08:20,879 --> 00:08:22,560
of the projects that were running in

226
00:08:22,560 --> 00:08:25,860
Jenkins including a cubeconfig file for

227
00:08:25,860 --> 00:08:26,759
those of you not familiar with

228
00:08:26,759 --> 00:08:27,960
kubernetes that's basically an

229
00:08:27,960 --> 00:08:29,400
authentication file

230
00:08:29,400 --> 00:08:31,199
and in this case it turns out that we

231
00:08:31,199 --> 00:08:34,380
had full access to deploy anything we

232
00:08:34,380 --> 00:08:35,820
liked into the customer's production

233
00:08:35,820 --> 00:08:37,799
workload now this was meant to be there

234
00:08:37,799 --> 00:08:40,860
because the pipeline had to deploy uh

235
00:08:40,860 --> 00:08:42,240
workloads that was what it was written

236
00:08:42,240 --> 00:08:44,580
for but as a developer I wasn't meant to

237
00:08:44,580 --> 00:08:47,220
be able to get direct access

238
00:08:47,220 --> 00:08:49,080
we could we could deploy any workloads

239
00:08:49,080 --> 00:08:50,339
we wanted and because there was no

240
00:08:50,339 --> 00:08:51,720
admission control or anything at this

241
00:08:51,720 --> 00:08:53,279
point we were able to basically

242
00:08:53,279 --> 00:08:56,640
compromise the entire production cluster

243
00:08:56,640 --> 00:08:58,800
now in the interests of Defending

244
00:08:58,800 --> 00:09:00,420
against this we've got some lessons

245
00:09:00,420 --> 00:09:02,760
learned hopefully these are relatively

246
00:09:02,760 --> 00:09:04,140
apparent the first one being building

247
00:09:04,140 --> 00:09:06,480
credential hygiene as I say we didn't

248
00:09:06,480 --> 00:09:07,800
know and the customer didn't know why

249
00:09:07,800 --> 00:09:09,720
that SSH key was there there was no

250
00:09:09,720 --> 00:09:11,820
legitimate reason for it to be there so

251
00:09:11,820 --> 00:09:13,380
it probably shouldn't have been without

252
00:09:13,380 --> 00:09:14,940
that we'd have had a really hard time

253
00:09:14,940 --> 00:09:16,260
getting around the environment getting

254
00:09:16,260 --> 00:09:17,580
around the estate

255
00:09:17,580 --> 00:09:20,160
similarly Network filtering and their

256
00:09:20,160 --> 00:09:21,720
build environment was able to reach out

257
00:09:21,720 --> 00:09:23,220
to the internet to grab our malicious

258
00:09:23,220 --> 00:09:25,380
dependency and it was able to reach out

259
00:09:25,380 --> 00:09:27,720
to the Jenkins the other nodes to SSH

260
00:09:27,720 --> 00:09:30,060
around a little bit of firewall ruling

261
00:09:30,060 --> 00:09:31,920
would have probably stopped this attack

262
00:09:31,920 --> 00:09:33,720
quite quickly

263
00:09:33,720 --> 00:09:35,880
and again dependency validation had the

264
00:09:35,880 --> 00:09:37,500
customer only allowed pulling from

265
00:09:37,500 --> 00:09:40,620
internal repositories then we probably

266
00:09:40,620 --> 00:09:42,420
wouldn't have been able to fill down our

267
00:09:42,420 --> 00:09:45,860
external malicious dependency

268
00:09:46,019 --> 00:09:49,500
I had also a similar assessment that

269
00:09:49,500 --> 00:09:52,680
GitHub was used but it was used as an

270
00:09:52,680 --> 00:09:54,480
identity provider

271
00:09:54,480 --> 00:09:58,200
so in this case in Jenkins they use the

272
00:09:58,200 --> 00:10:01,440
dedicated plugin the name is GitHub

273
00:10:01,440 --> 00:10:04,800
authentication plugin and I will show a

274
00:10:04,800 --> 00:10:07,579
demo video

275
00:10:11,339 --> 00:10:13,080
we're not brave enough to drive a Live

276
00:10:13,080 --> 00:10:15,120
Trial live demo don't worry

277
00:10:15,120 --> 00:10:16,680
been burned by that one too many times

278
00:10:16,680 --> 00:10:17,940
before

279
00:10:17,940 --> 00:10:22,019
so I call this the confusing uh wording

280
00:10:22,019 --> 00:10:24,839
word plugin because this plugin as you

281
00:10:24,839 --> 00:10:27,899
can see here at the moment I use a Vega

282
00:10:27,899 --> 00:10:30,600
sub user who is in the ncnc pen test

283
00:10:30,600 --> 00:10:33,540
demo organization and when you use this

284
00:10:33,540 --> 00:10:35,100
plugin

285
00:10:35,100 --> 00:10:38,880
and you use the option that the grant

286
00:10:38,880 --> 00:10:40,740
read permission to all authenticated

287
00:10:40,740 --> 00:10:44,160
users you can see it's checked it

288
00:10:44,160 --> 00:10:46,500
doesn't see is it related to Jenkins or

289
00:10:46,500 --> 00:10:48,300
is it related to GitHub

290
00:10:48,300 --> 00:10:50,399
so long as you see or read the

291
00:10:50,399 --> 00:10:52,680
description and then test then you will

292
00:10:52,680 --> 00:10:55,579
find out so here you can see my user

293
00:10:55,579 --> 00:10:58,260
called Vegas log

294
00:10:58,260 --> 00:11:01,680
I will show that it's in the NCC pen

295
00:11:01,680 --> 00:11:05,519
test organization and that's the only

296
00:11:05,519 --> 00:11:08,240
member

297
00:11:08,279 --> 00:11:10,980
now because this option was enabled and

298
00:11:10,980 --> 00:11:14,399
the option says

299
00:11:14,399 --> 00:11:16,920
it's related to GitHub all I had to do

300
00:11:16,920 --> 00:11:20,820
was create a GitHub account and then I

301
00:11:20,820 --> 00:11:22,740
could log into the Jenkins instance and

302
00:11:22,740 --> 00:11:24,839
I could see the build history console

303
00:11:24,839 --> 00:11:26,399
output and so on

304
00:11:26,399 --> 00:11:29,700
so here you will see that

305
00:11:29,700 --> 00:11:32,160
I opened the Jenkins and it redirected

306
00:11:32,160 --> 00:11:35,399
me to the GitHub login page so I will

307
00:11:35,399 --> 00:11:37,680
use a separate account

308
00:11:37,680 --> 00:11:40,620
the name is root speed a different email

309
00:11:40,620 --> 00:11:42,360
address

310
00:11:42,360 --> 00:11:44,220
and

311
00:11:44,220 --> 00:11:46,140
here you can see that's only two User

312
00:11:46,140 --> 00:11:49,019
it's not good speed is not there

313
00:11:49,019 --> 00:11:54,560
I will use my MFE code and I can

314
00:11:56,579 --> 00:11:59,160
and then I will just enable that it can

315
00:11:59,160 --> 00:12:02,160
access my profile and so on so once I

316
00:12:02,160 --> 00:12:04,140
enable it and logged in with my

317
00:12:04,140 --> 00:12:07,740
arbitrary account I logged in to Jenkins

318
00:12:07,740 --> 00:12:09,180
as well

319
00:12:09,180 --> 00:12:12,180
and here you can see that root speed is

320
00:12:12,180 --> 00:12:14,519
not in the same organization but

321
00:12:14,519 --> 00:12:19,220
register others GitHub account

322
00:12:34,200 --> 00:12:36,120
so what we recommend is read the

323
00:12:36,120 --> 00:12:38,459
description of the plugins or whatever

324
00:12:38,459 --> 00:12:41,519
custom code you use and test it so

325
00:12:41,519 --> 00:12:45,240
validate it really does what it suggests

326
00:12:45,240 --> 00:12:48,600
also use lease privilege principle with

327
00:12:48,600 --> 00:12:50,700
the lobby success control and the

328
00:12:50,700 --> 00:12:53,839
circulation of duties

329
00:12:59,700 --> 00:13:01,639
so the next

330
00:13:01,639 --> 00:13:04,380
example is called the build output

331
00:13:04,380 --> 00:13:06,959
because sometimes even the CI CD

332
00:13:06,959 --> 00:13:10,279
pipelines helps us so it will help us to

333
00:13:10,279 --> 00:13:14,160
do something and reach something or let

334
00:13:14,160 --> 00:13:17,240
us do easier things

335
00:13:17,519 --> 00:13:20,579
it's not because the company gave all

336
00:13:20,579 --> 00:13:22,800
the developers administrator accounts I

337
00:13:22,800 --> 00:13:25,860
didn't choose because of this it's bad

338
00:13:25,860 --> 00:13:28,680
but what I why I choose is because they

339
00:13:28,680 --> 00:13:31,019
used infrastructure as a code and they

340
00:13:31,019 --> 00:13:33,600
used terraform the tool itself and they

341
00:13:33,600 --> 00:13:36,300
didn't use a dedicated plugin

342
00:13:36,300 --> 00:13:38,880
[Music]

343
00:13:38,880 --> 00:13:41,040
this is important because if you use

344
00:13:41,040 --> 00:13:45,120
styroform it will you can use variables

345
00:13:45,120 --> 00:13:47,579
and you can print out what has been

346
00:13:47,579 --> 00:13:50,700
created and in this case they also

347
00:13:50,700 --> 00:13:54,240
printed out an AWS API key as well and

348
00:13:54,240 --> 00:13:55,920
because it's in the pipeline and

349
00:13:55,920 --> 00:13:57,740
directly used

350
00:13:57,740 --> 00:14:00,420
in the console output and the build

351
00:14:00,420 --> 00:14:03,180
output everything will be recorded so

352
00:14:03,180 --> 00:14:05,639
you will see all the variables that has

353
00:14:05,639 --> 00:14:08,339
been have been created and in this case

354
00:14:08,339 --> 00:14:13,519
also the either API key as well

355
00:14:15,120 --> 00:14:17,279
so again

356
00:14:17,279 --> 00:14:19,860
you will see some patterns so we also

357
00:14:19,860 --> 00:14:21,240
recommend it here again the least

358
00:14:21,240 --> 00:14:23,100
privileged principle with Robbie's

359
00:14:23,100 --> 00:14:26,100
Access Control separation of Duties but

360
00:14:26,100 --> 00:14:28,620
also we recommend using dedicated

361
00:14:28,620 --> 00:14:30,779
plugins because the plugin developers

362
00:14:30,779 --> 00:14:33,420
know what are the sensitive data and the

363
00:14:33,420 --> 00:14:36,120
information so they will know how to

364
00:14:36,120 --> 00:14:38,459
mask it and when to mask it

365
00:14:38,459 --> 00:14:41,540
and most of the time we also see that

366
00:14:41,540 --> 00:14:44,699
there was no monitoring or adapting

367
00:14:44,699 --> 00:14:46,440
enabled

368
00:14:46,440 --> 00:14:49,500
so if someone changed the configuration

369
00:14:49,500 --> 00:14:52,800
system configuration or everyone has

370
00:14:52,800 --> 00:14:55,740
been changed there was no alert or any

371
00:14:55,740 --> 00:14:59,240
record of it

372
00:15:00,779 --> 00:15:02,639
so these engagements don't always start

373
00:15:02,639 --> 00:15:04,740
off with quite as easy as hey we've got

374
00:15:04,740 --> 00:15:06,720
a new Dev access please carry on and

375
00:15:06,720 --> 00:15:09,540
just uh start from from a privileged

376
00:15:09,540 --> 00:15:12,180
position and this this next example was

377
00:15:12,180 --> 00:15:13,620
part of a red team engagement that we

378
00:15:13,620 --> 00:15:15,600
performed a while back where we were up

379
00:15:15,600 --> 00:15:16,980
against a relatively Hard Target

380
00:15:16,980 --> 00:15:18,779
couldn't get in through our usual paths

381
00:15:18,779 --> 00:15:20,760
but what we were able to do was fish a

382
00:15:20,760 --> 00:15:23,100
developer and get their credentials and

383
00:15:23,100 --> 00:15:25,820
then we were able to log into their

384
00:15:25,820 --> 00:15:28,079
cloud-based CI

385
00:15:28,079 --> 00:15:30,300
so kind of similar to my previous story

386
00:15:30,300 --> 00:15:32,100
we had developer access even though in

387
00:15:32,100 --> 00:15:33,360
this case we weren't really meant to

388
00:15:33,360 --> 00:15:35,579
have it but we did Happy Days

389
00:15:35,579 --> 00:15:37,560
um so we had developer access we had

390
00:15:37,560 --> 00:15:38,880
access to a fairly wide range of

391
00:15:38,880 --> 00:15:40,199
repositories not all of these were

392
00:15:40,199 --> 00:15:42,420
hooked up to an automatic Pipeline and

393
00:15:42,420 --> 00:15:43,800
an important thing to note here is that

394
00:15:43,800 --> 00:15:45,000
the customer

395
00:15:45,000 --> 00:15:47,220
um was doing some things fairly well so

396
00:15:47,220 --> 00:15:48,899
we didn't have access as admin to

397
00:15:48,899 --> 00:15:50,639
absolutely everything we had relatively

398
00:15:50,639 --> 00:15:51,779
restricted permissions on the

399
00:15:51,779 --> 00:15:53,220
repositories that we had access to

400
00:15:53,220 --> 00:15:54,899
however

401
00:15:54,899 --> 00:15:57,060
we were able to modify some of the

402
00:15:57,060 --> 00:15:58,380
Pipelines

403
00:15:58,380 --> 00:16:00,240
and one of the things this customer was

404
00:16:00,240 --> 00:16:02,699
not doing was separating Secrets out per

405
00:16:02,699 --> 00:16:05,220
uh per branches or anything like that so

406
00:16:05,220 --> 00:16:06,660
as Victor just mentioned it's possible

407
00:16:06,660 --> 00:16:09,839
to protect our secret so whenever we try

408
00:16:09,839 --> 00:16:11,639
to get Secrets out of the pipeline we

409
00:16:11,639 --> 00:16:13,079
just got the word redacted or the word

410
00:16:13,079 --> 00:16:15,180
masked or similar which is not great

411
00:16:15,180 --> 00:16:16,560
because we can't really use that as a

412
00:16:16,560 --> 00:16:18,480
password however

413
00:16:18,480 --> 00:16:19,980
one of the things you could do and I say

414
00:16:19,980 --> 00:16:22,260
bypass here I use that term loosely was

415
00:16:22,260 --> 00:16:24,300
run print in and then just pipe that to

416
00:16:24,300 --> 00:16:27,060
base64 at which point the regex for is

417
00:16:27,060 --> 00:16:29,519
this an API key failed because it's just

418
00:16:29,519 --> 00:16:31,920
base64 so we then grab that data from

419
00:16:31,920 --> 00:16:33,300
the logs

420
00:16:33,300 --> 00:16:34,040
um

421
00:16:34,040 --> 00:16:36,660
v64 decoded it on our end

422
00:16:36,660 --> 00:16:38,399
anecdotally one of the things I really

423
00:16:38,399 --> 00:16:40,139
like doing in these jobs when we don't

424
00:16:40,139 --> 00:16:43,079
really have direct access to logs is to

425
00:16:43,079 --> 00:16:44,339
use something like slack web hooks

426
00:16:44,339 --> 00:16:45,959
because organizations love to use git

427
00:16:45,959 --> 00:16:47,459
Ops and they'll have to have their

428
00:16:47,459 --> 00:16:49,199
pipeline ping developers on slack

429
00:16:49,199 --> 00:16:51,660
whenever the um whenever a build fails

430
00:16:51,660 --> 00:16:52,920
but that means they've generally

431
00:16:52,920 --> 00:16:55,560
whitelisted api.slack.com at which point

432
00:16:55,560 --> 00:16:57,540
you can just run print n for base64 that

433
00:16:57,540 --> 00:16:59,519
and pipe it to webhook and then like my

434
00:16:59,519 --> 00:17:01,079
slack pings and says hey here's all the

435
00:17:01,079 --> 00:17:03,180
keys which is quite fun

436
00:17:03,180 --> 00:17:06,599
even more fun if the customer has um

437
00:17:06,599 --> 00:17:08,819
has a big screen on the side of the

438
00:17:08,819 --> 00:17:10,439
monitoring sensor that shows all of

439
00:17:10,439 --> 00:17:11,579
these alerts and then you can just start

440
00:17:11,579 --> 00:17:13,260
sending gifts to their slack web hooks

441
00:17:13,260 --> 00:17:15,419
that's far too fun it confuses them a

442
00:17:15,419 --> 00:17:17,600
lot

443
00:17:19,079 --> 00:17:21,419
I get there were some weird people were

444
00:17:21,419 --> 00:17:22,740
very confused when that started

445
00:17:22,740 --> 00:17:24,839
happening

446
00:17:24,839 --> 00:17:26,400
um but yeah basically this pipeline had

447
00:17:26,400 --> 00:17:28,079
domain admin access because obviously it

448
00:17:28,079 --> 00:17:29,880
did why would it not so fairly hard

449
00:17:29,880 --> 00:17:32,340
target apart from the one pipeline that

450
00:17:32,340 --> 00:17:34,080
ran everything is Da so we found the

451
00:17:34,080 --> 00:17:36,260
limited Windows estate and we had admin

452
00:17:36,260 --> 00:17:38,580
interestingly with this job the customer

453
00:17:38,580 --> 00:17:40,020
reached out to us and said hey by the

454
00:17:40,020 --> 00:17:41,280
way just so you know we've got a load of

455
00:17:41,280 --> 00:17:42,780
alerts we know you've got access to this

456
00:17:42,780 --> 00:17:45,660
pipeline uh that's really uh not good

457
00:17:45,660 --> 00:17:47,039
because you've crashed our Pipeline and

458
00:17:47,039 --> 00:17:48,539
it's not running anymore

459
00:17:48,539 --> 00:17:50,280
they didn't realize what the credentials

460
00:17:50,280 --> 00:17:51,900
were so we thought we'd been burned and

461
00:17:51,900 --> 00:17:53,460
they'd rotate their credentials nope

462
00:17:53,460 --> 00:17:55,440
they just left them there until the

463
00:17:55,440 --> 00:17:58,500
debrief at the end of the job

464
00:17:58,500 --> 00:17:59,700
so again

465
00:17:59,700 --> 00:18:01,260
um I'm going to say the second Point

466
00:18:01,260 --> 00:18:03,000
here first this shouldn't need to be

467
00:18:03,000 --> 00:18:05,220
said in 2022 don't run everything as

468
00:18:05,220 --> 00:18:07,500
domain admin please it's just not a good

469
00:18:07,500 --> 00:18:08,760
idea

470
00:18:08,760 --> 00:18:11,220
um and also restricting secrets to

471
00:18:11,220 --> 00:18:12,780
certain branches is probably a good idea

472
00:18:12,780 --> 00:18:14,460
so as I say this customer had protected

473
00:18:14,460 --> 00:18:16,740
branches not every developer could talk

474
00:18:16,740 --> 00:18:19,500
to the main branch and make changes

475
00:18:19,500 --> 00:18:21,600
um because the uh

476
00:18:21,600 --> 00:18:23,520
it had the secrets being restricted to

477
00:18:23,520 --> 00:18:24,840
that Branch we wouldn't have been able

478
00:18:24,840 --> 00:18:26,460
to get access without compromising more

479
00:18:26,460 --> 00:18:28,080
accounts and doing more approval of

480
00:18:28,080 --> 00:18:30,500
requests

481
00:18:31,260 --> 00:18:33,360
and again in the spirit of doing weird

482
00:18:33,360 --> 00:18:35,220
attack chains and jobs that don't

483
00:18:35,220 --> 00:18:37,679
necessarily start out as CI

484
00:18:37,679 --> 00:18:39,000
we were performing an internal

485
00:18:39,000 --> 00:18:40,559
infrastructure review and we found a web

486
00:18:40,559 --> 00:18:42,539
app that lit up like a Christmas tree it

487
00:18:42,539 --> 00:18:45,059
was vulnerable to absolutely everything

488
00:18:45,059 --> 00:18:46,559
across the estate

489
00:18:46,559 --> 00:18:49,679
so um mainly server side request forgery

490
00:18:49,679 --> 00:18:51,900
and local file inclusion vulnerabilities

491
00:18:51,900 --> 00:18:53,520
we didn't really know what this app was

492
00:18:53,520 --> 00:18:55,620
but we knew it looked interesting

493
00:18:55,620 --> 00:18:58,020
and it turned out later that this was an

494
00:18:58,020 --> 00:19:00,179
app that had been was being tested and

495
00:19:00,179 --> 00:19:01,679
they knew it was vulnerable but it was

496
00:19:01,679 --> 00:19:03,419
running in the middle of the pipeline so

497
00:19:03,419 --> 00:19:05,400
we didn't have access to the code we

498
00:19:05,400 --> 00:19:06,480
didn't have access to the production

499
00:19:06,480 --> 00:19:07,860
running environment but we did have

500
00:19:07,860 --> 00:19:10,799
access to and was an instance of the

501
00:19:10,799 --> 00:19:12,419
application running in the customer's

502
00:19:12,419 --> 00:19:14,100
development environment

503
00:19:14,100 --> 00:19:15,900
and we knew nothing more about it at the

504
00:19:15,900 --> 00:19:17,460
time but we started prodding around and

505
00:19:17,460 --> 00:19:20,880
doing some Recon and what we found was

506
00:19:20,880 --> 00:19:22,320
that the application was running in

507
00:19:22,320 --> 00:19:24,059
kubernetes the customer was using that

508
00:19:24,059 --> 00:19:25,500
to power the build pipeline which is

509
00:19:25,500 --> 00:19:27,179
fairly common

510
00:19:27,179 --> 00:19:28,919
um nice little tip if you ever want to

511
00:19:28,919 --> 00:19:30,240
find out if something's running in

512
00:19:30,240 --> 00:19:31,919
kubernetes and you've got access to

513
00:19:31,919 --> 00:19:35,160
files catting Etc hosts generally if

514
00:19:35,160 --> 00:19:36,840
it's in kubernetes it has a nice line at

515
00:19:36,840 --> 00:19:37,919
the top that says this is managed by

516
00:19:37,919 --> 00:19:40,500
kubernetes Happy Days

517
00:19:40,500 --> 00:19:41,760
um so yeah we managed to get a service

518
00:19:41,760 --> 00:19:44,100
account token as well

519
00:19:44,100 --> 00:19:46,200
and that service account token could be

520
00:19:46,200 --> 00:19:49,320
used to authenticate the kubernetes API

521
00:19:49,320 --> 00:19:51,299
we started some further Recon we found

522
00:19:51,299 --> 00:19:53,640
out that we had various permissions and

523
00:19:53,640 --> 00:19:55,140
where this gets a little bit more

524
00:19:55,140 --> 00:19:57,780
bizarre and took some research was the

525
00:19:57,780 --> 00:19:59,220
customer was using

526
00:19:59,220 --> 00:20:01,860
um an AWS managed cluster and I should

527
00:20:01,860 --> 00:20:03,960
emphasize this is in no way a like

528
00:20:03,960 --> 00:20:05,460
massive vulnerability or anything

529
00:20:05,460 --> 00:20:07,080
they've just given permissions to a

530
00:20:07,080 --> 00:20:08,220
service account they maybe shouldn't

531
00:20:08,220 --> 00:20:10,140
have done because we were able to edit

532
00:20:10,140 --> 00:20:12,660
configuration Maps basically what we

533
00:20:12,660 --> 00:20:14,640
were able to do was add a new mapping to

534
00:20:14,640 --> 00:20:16,980
see this AWS account ID has these

535
00:20:16,980 --> 00:20:18,960
permissions inside the cluster

536
00:20:18,960 --> 00:20:23,340
so we gave my AWS account cluster admin

537
00:20:23,340 --> 00:20:25,740
and the API server was available over

538
00:20:25,740 --> 00:20:26,940
the Internet so at this point I've got

539
00:20:26,940 --> 00:20:29,820
an AWS account I've got a server

540
00:20:29,820 --> 00:20:31,260
um we were able to basically do whatever

541
00:20:31,260 --> 00:20:33,660
we wanted on the cluster

542
00:20:33,660 --> 00:20:35,220
which sounds really bad apart from this

543
00:20:35,220 --> 00:20:36,900
was only the dev cluster this wasn't

544
00:20:36,900 --> 00:20:38,700
actually the production workloads and

545
00:20:38,700 --> 00:20:40,380
obviously our end game was can we get

546
00:20:40,380 --> 00:20:42,120
production data

547
00:20:42,120 --> 00:20:44,700
so a little bit more research let's see

548
00:20:44,700 --> 00:20:45,960
what else is happening with cluster

549
00:20:45,960 --> 00:20:47,400
admin we could view all of the jobs

550
00:20:47,400 --> 00:20:49,860
across the whole cluster that lets us

551
00:20:49,860 --> 00:20:51,240
get all the secrets for all of the jobs

552
00:20:51,240 --> 00:20:53,700
that weren't being managed through a

553
00:20:53,700 --> 00:20:55,620
dedicated Secrets management solution

554
00:20:55,620 --> 00:20:58,140
and that included further API keys to

555
00:20:58,140 --> 00:21:00,059
push images to ECR

556
00:21:00,059 --> 00:21:02,520
and basically one of the jobs was take

557
00:21:02,520 --> 00:21:04,080
this code built into a Docker image

558
00:21:04,080 --> 00:21:06,120
publish that image we couldn't find

559
00:21:06,120 --> 00:21:08,460
anything that said

560
00:21:08,460 --> 00:21:11,280
I want to load that image into this

561
00:21:11,280 --> 00:21:12,840
cluster and actually run so we weren't

562
00:21:12,840 --> 00:21:14,880
really sure what was happening so we did

563
00:21:14,880 --> 00:21:16,200
a little bit more digging found some

564
00:21:16,200 --> 00:21:17,400
documentation

565
00:21:17,400 --> 00:21:19,500
and it turned out that this customer was

566
00:21:19,500 --> 00:21:22,799
using a full based CI in their final

567
00:21:22,799 --> 00:21:24,720
cluster in their production workload so

568
00:21:24,720 --> 00:21:26,280
instead of a service running outside the

569
00:21:26,280 --> 00:21:28,860
cluster with credentials saying right I

570
00:21:28,860 --> 00:21:30,840
want to push this into the cluster to

571
00:21:30,840 --> 00:21:32,700
run there was something in the cluster

572
00:21:32,700 --> 00:21:34,919
waiting for changes to be made

573
00:21:34,919 --> 00:21:37,260
the cluster eventually realized that we

574
00:21:37,260 --> 00:21:39,480
published a new ECR image went oh that

575
00:21:39,480 --> 00:21:41,340
looks shiny I'll have that please and

576
00:21:41,340 --> 00:21:42,539
then

577
00:21:42,539 --> 00:21:45,120
loaded up and and the logs was a nice

578
00:21:45,120 --> 00:21:46,679
little NCC was here because we didn't

579
00:21:46,679 --> 00:21:49,380
want to do anything more disruptive

580
00:21:49,380 --> 00:21:51,539
so

581
00:21:51,539 --> 00:21:53,520
we didn't directly have the ability to

582
00:21:53,520 --> 00:21:54,840
push something in but what we did have

583
00:21:54,840 --> 00:21:56,340
the ability to do was modify something

584
00:21:56,340 --> 00:21:58,799
that would automatically get pulled in

585
00:21:58,799 --> 00:22:00,539
which had the same effect in the end we

586
00:22:00,539 --> 00:22:04,100
had cold running in production

587
00:22:04,440 --> 00:22:06,120
and again Lessons Learned let's keep

588
00:22:06,120 --> 00:22:07,679
these themes going hopefully you're

589
00:22:07,679 --> 00:22:09,720
seeing the common patterns here by now

590
00:22:09,720 --> 00:22:11,520
um least privilege are back and network

591
00:22:11,520 --> 00:22:13,380
segmentation really we're just going

592
00:22:13,380 --> 00:22:15,419
back to the basics

593
00:22:15,419 --> 00:22:17,340
the application that was being tested

594
00:22:17,340 --> 00:22:19,440
mid pipeline didn't really need to be

595
00:22:19,440 --> 00:22:20,940
able to talk to kubernetes or the cloud

596
00:22:20,940 --> 00:22:22,500
metadata layer

597
00:22:22,500 --> 00:22:24,299
so some Network filtering would have

598
00:22:24,299 --> 00:22:25,559
helped there either through kubernetes

599
00:22:25,559 --> 00:22:27,179
Network policy or through AWS security

600
00:22:27,179 --> 00:22:29,880
groups or both and again least privilege

601
00:22:29,880 --> 00:22:32,460
on a whole bunch of steps here

602
00:22:32,460 --> 00:22:34,320
um mainly the fact that we had the

603
00:22:34,320 --> 00:22:35,940
ability to edit the configuration Maps

604
00:22:35,940 --> 00:22:37,919
that's what really lets us get admin

605
00:22:37,919 --> 00:22:39,419
over the whole cluster without having to

606
00:22:39,419 --> 00:22:41,280
do anything clever like break out of a

607
00:22:41,280 --> 00:22:44,280
pod to an underlying node

608
00:22:44,280 --> 00:22:46,260
the one thing that our back would not be

609
00:22:46,260 --> 00:22:48,900
able to stop is the fact that we could

610
00:22:48,900 --> 00:22:51,360
modify the production image and the

611
00:22:51,360 --> 00:22:52,500
reason for that is the pipeline was just

612
00:22:52,500 --> 00:22:54,299
doing what it had to do right so the

613
00:22:54,299 --> 00:22:56,100
pipeline's been built to modify an ECR

614
00:22:56,100 --> 00:22:58,679
image so obviously it has to modify an

615
00:22:58,679 --> 00:23:02,340
ECR image and so

616
00:23:02,340 --> 00:23:04,260
in this case it was actually not as bad

617
00:23:04,260 --> 00:23:05,820
as it could have been the credentials

618
00:23:05,820 --> 00:23:07,260
that we compromise did only have access

619
00:23:07,260 --> 00:23:10,020
to one image that's good and it's just a

620
00:23:10,020 --> 00:23:11,220
shame that we managed to get hold of it

621
00:23:11,220 --> 00:23:13,799
and then do our nasty things

622
00:23:13,799 --> 00:23:15,480
and Victor has also been playing with

623
00:23:15,480 --> 00:23:18,480
web apps yeah I had also similar please

624
00:23:18,480 --> 00:23:20,159
when I started off with the web

625
00:23:20,159 --> 00:23:23,039
application so it was a WordPress

626
00:23:23,039 --> 00:23:25,320
application with some custom web pages

627
00:23:25,320 --> 00:23:28,260
but I didn't really find too much things

628
00:23:28,260 --> 00:23:31,340
there but I will show you a video

629
00:23:31,340 --> 00:23:34,939
what I have done

630
00:23:40,380 --> 00:23:42,919
oh

631
00:23:46,260 --> 00:23:49,980
so here in the video we are just

632
00:23:49,980 --> 00:23:52,919
simulating the web application so I was

633
00:23:52,919 --> 00:23:54,840
looking around I didn't really find

634
00:23:54,840 --> 00:23:58,320
anything but I was checking the sitemap

635
00:23:58,320 --> 00:24:01,679
file and especially maybe there is

636
00:24:01,679 --> 00:24:04,440
something in the folder as well

637
00:24:04,440 --> 00:24:07,520
and what I found out that there is more

638
00:24:07,520 --> 00:24:11,280
in the site map where the Sci-Fi was

639
00:24:11,280 --> 00:24:14,700
because it was an S3 bucket with

640
00:24:14,700 --> 00:24:17,039
directory listing an email so if it's

641
00:24:17,039 --> 00:24:19,140
not a DNS problem then it's an S3 bucket

642
00:24:19,140 --> 00:24:21,299
problem so in this case we we had that

643
00:24:21,299 --> 00:24:25,039
and I found this file called good

644
00:24:25,039 --> 00:24:29,520
dot sh which was responsible to push

645
00:24:29,520 --> 00:24:31,200
code to GitHub

646
00:24:31,200 --> 00:24:34,280
but we will see here in a second that

647
00:24:34,280 --> 00:24:36,500
this transcript

648
00:24:36,500 --> 00:24:41,179
contained a hard-coded credential

649
00:24:41,179 --> 00:24:45,419
and there was one another big problem

650
00:24:45,419 --> 00:24:48,539
with this that the company also used

651
00:24:48,539 --> 00:24:50,580
this account as a shared account

652
00:24:50,580 --> 00:24:53,100
so you could log into GitHub but you

653
00:24:53,100 --> 00:24:55,080
could also use it for logging into

654
00:24:55,080 --> 00:24:56,700
Jenkins

655
00:24:56,700 --> 00:24:59,940
and basically later I found out that

656
00:24:59,940 --> 00:25:01,799
this account was a service used as a

657
00:25:01,799 --> 00:25:04,500
service account so I logged into GitHub

658
00:25:04,500 --> 00:25:07,740
get read and write access or permissions

659
00:25:07,740 --> 00:25:10,740
to multiple repositories but also I I

660
00:25:10,740 --> 00:25:13,559
could just you know log into Jenkins and

661
00:25:13,559 --> 00:25:15,200
I had

662
00:25:15,200 --> 00:25:18,419
administrator access

663
00:25:18,419 --> 00:25:23,240
and once I found my mouse

664
00:25:25,080 --> 00:25:27,980
so this account gave me access

665
00:25:27,980 --> 00:25:31,500
to 14 clusters and more than 200 weird

666
00:25:31,500 --> 00:25:35,360
servers for agents

667
00:25:35,400 --> 00:25:38,279
and also more than 200 credentials so

668
00:25:38,279 --> 00:25:41,940
starting from certificates to ec2 SSH

669
00:25:41,940 --> 00:25:46,130
case to AWS or other Cloud environments

670
00:25:46,130 --> 00:25:47,340
[Music]

671
00:25:47,340 --> 00:25:51,918
also security scanners and so on

672
00:25:52,919 --> 00:25:55,500
so again no shared credentials no

673
00:25:55,500 --> 00:25:58,320
hard-coded credentials and use least

674
00:25:58,320 --> 00:26:00,600
privileged principle with Robbies access

675
00:26:00,600 --> 00:26:04,380
control and it's very important to have

676
00:26:04,380 --> 00:26:06,539
auditing with monitoring and other

677
00:26:06,539 --> 00:26:09,559
things enabled

678
00:26:10,140 --> 00:26:11,400
and

679
00:26:11,400 --> 00:26:14,460
it's so this one might actually be my

680
00:26:14,460 --> 00:26:15,720
favorite story that we're going to talk

681
00:26:15,720 --> 00:26:17,279
about today because it had a customer

682
00:26:17,279 --> 00:26:18,900
using the wonderful line you can't do

683
00:26:18,900 --> 00:26:20,940
that it doesn't work which any pen

684
00:26:20,940 --> 00:26:22,080
testers in the room will know it's

685
00:26:22,080 --> 00:26:23,760
brilliant to hear because generally we

686
00:26:23,760 --> 00:26:25,080
don't say we can do something unless

687
00:26:25,080 --> 00:26:28,500
we're fairly sure we actually can so

688
00:26:28,500 --> 00:26:30,419
we had a customer who had some fairly

689
00:26:30,419 --> 00:26:31,740
strict rules about who's allowed to

690
00:26:31,740 --> 00:26:33,419
access production in day if anyone can

691
00:26:33,419 --> 00:26:34,980
do what they like log in as all the

692
00:26:34,980 --> 00:26:36,659
servers as we don't care but in

693
00:26:36,659 --> 00:26:38,700
production no access

694
00:26:38,700 --> 00:26:40,740
developers were not allowed any access

695
00:26:40,740 --> 00:26:42,240
there were a couple of admin break glass

696
00:26:42,240 --> 00:26:43,860
accounts in a safe somewhere they were

697
00:26:43,860 --> 00:26:45,860
not meant to be used

698
00:26:45,860 --> 00:26:48,419
and the customer was doing a fair few

699
00:26:48,419 --> 00:26:51,000
things fairly well so for example only

700
00:26:51,000 --> 00:26:53,100
the main branch would deploy to prod the

701
00:26:53,100 --> 00:26:55,380
the architecture here was that the

702
00:26:55,380 --> 00:26:56,700
repositories were all terraform

703
00:26:56,700 --> 00:26:59,880
configuring Cloud accounts

704
00:26:59,880 --> 00:27:02,100
and uh yeah only the main brand could

705
00:27:02,100 --> 00:27:04,620
talk to prod which was good you had to

706
00:27:04,620 --> 00:27:07,320
have merge approval from a relatively um

707
00:27:07,320 --> 00:27:09,960
limited number of users to actually make

708
00:27:09,960 --> 00:27:11,520
any changes to the main brand she had to

709
00:27:11,520 --> 00:27:13,860
have multiple users approved so all on

710
00:27:13,860 --> 00:27:15,539
the whole this looks fairly good to

711
00:27:15,539 --> 00:27:17,159
start with

712
00:27:17,159 --> 00:27:19,080
however

713
00:27:19,080 --> 00:27:21,720
customers using Circle CI and uh

714
00:27:21,720 --> 00:27:24,240
defining all of their tasks with

715
00:27:24,240 --> 00:27:26,640
um yaml files and I should say at this

716
00:27:26,640 --> 00:27:28,500
point and this was just a coincidence of

717
00:27:28,500 --> 00:27:30,000
a circle CI these attacks work against

718
00:27:30,000 --> 00:27:31,919
all the platforms all the time we're not

719
00:27:31,919 --> 00:27:34,020
picking on anyone we we attack them all

720
00:27:34,020 --> 00:27:35,700
equally

721
00:27:35,700 --> 00:27:38,220
um configuration files were stored to

722
00:27:38,220 --> 00:27:39,840
save what every Branch does what every

723
00:27:39,840 --> 00:27:41,820
task does but they were stored alongside

724
00:27:41,820 --> 00:27:43,380
the application code

725
00:27:43,380 --> 00:27:46,320
which we had access to modify

726
00:27:46,320 --> 00:27:48,659
um the customer said oh yeah it's fine

727
00:27:48,659 --> 00:27:50,400
we're using various secrets on various

728
00:27:50,400 --> 00:27:52,559
branches so for example if you're doing

729
00:27:52,559 --> 00:27:54,120
Dev things you're diving away quite

730
00:27:54,120 --> 00:27:57,779
happily then you use the dev API keys to

731
00:27:57,779 --> 00:27:59,940
talk to the cloud and that was on any

732
00:27:59,940 --> 00:28:03,960
branch that has feature slash Dev star

733
00:28:03,960 --> 00:28:05,400
but if you want to prove something to

734
00:28:05,400 --> 00:28:06,840
prod and you want to get through the

735
00:28:06,840 --> 00:28:09,480
approval process then you do prod things

736
00:28:09,480 --> 00:28:12,179
and you use the prod API keys I'm really

737
00:28:12,179 --> 00:28:13,380
hoping you can see where this is going

738
00:28:13,380 --> 00:28:15,539
because it's exactly where you think it

739
00:28:15,539 --> 00:28:18,480
is uh we did hacky things so we modified

740
00:28:18,480 --> 00:28:21,240
the ammo file and we said for any branch

741
00:28:21,240 --> 00:28:23,400
just run print M and use the prod API

742
00:28:23,400 --> 00:28:25,020
keys because there was no protection

743
00:28:25,020 --> 00:28:26,460
stopping us doing that nothing had been

744
00:28:26,460 --> 00:28:27,720
configured

745
00:28:27,720 --> 00:28:29,580
so this is when I I said to the customer

746
00:28:29,580 --> 00:28:31,440
hello I think I can get your production

747
00:28:31,440 --> 00:28:33,960
API keys to modify your cloud and they

748
00:28:33,960 --> 00:28:35,820
went no you can't it doesn't work

749
00:28:35,820 --> 00:28:37,380
how confident are you in that very

750
00:28:37,380 --> 00:28:38,700
confident do you mind if I try it yeah

751
00:28:38,700 --> 00:28:40,380
go ahead

752
00:28:40,380 --> 00:28:42,480
two redacted screenshots later

753
00:28:42,480 --> 00:28:44,760
we were on an incident response call

754
00:28:44,760 --> 00:28:47,039
because this was the same for all of the

755
00:28:47,039 --> 00:28:48,659
dev teams across the entire organization

756
00:28:48,659 --> 00:28:50,640
and had been for about two years

757
00:28:50,640 --> 00:28:53,220
they had no auditing on the credentials

758
00:28:53,220 --> 00:28:55,679
they ran terraform as admin because why

759
00:28:55,679 --> 00:28:57,900
wouldn't you so basically anyone who was

760
00:28:57,900 --> 00:29:00,659
a Dev despite being locked down could

761
00:29:00,659 --> 00:29:02,279
get full production access to any of

762
00:29:02,279 --> 00:29:04,320
their Cloud accounts you can imagine the

763
00:29:04,320 --> 00:29:05,880
phone calls for that one were fairly

764
00:29:05,880 --> 00:29:07,760
exciting

765
00:29:07,760 --> 00:29:11,100
so once again Lessons Learned here

766
00:29:11,100 --> 00:29:13,020
um they're the same as they've been for

767
00:29:13,020 --> 00:29:15,120
quite a while now validate your secrets

768
00:29:15,120 --> 00:29:16,380
management and protection this customer

769
00:29:16,380 --> 00:29:18,000
was really sure they were doing things

770
00:29:18,000 --> 00:29:18,779
right

771
00:29:18,779 --> 00:29:20,580
clearly they hadn't actually sat down

772
00:29:20,580 --> 00:29:21,720
and said right should we just try and

773
00:29:21,720 --> 00:29:23,159
validate that what happens if you try to

774
00:29:23,159 --> 00:29:25,260
use the product keys

775
00:29:25,260 --> 00:29:26,520
um

776
00:29:26,520 --> 00:29:28,740
assume to a certain extent that every

777
00:29:28,740 --> 00:29:30,179
developer is malicious and or

778
00:29:30,179 --> 00:29:32,640
compromised or trust your debts but make

779
00:29:32,640 --> 00:29:33,779
sure you can log what they've been doing

780
00:29:33,779 --> 00:29:36,480
especially in production accounts so I

781
00:29:36,480 --> 00:29:37,740
think we all agree that at some point

782
00:29:37,740 --> 00:29:38,940
we're all going to get popped by

783
00:29:38,940 --> 00:29:40,860
something probably a good idea to have

784
00:29:40,860 --> 00:29:42,539
some logs that tell you how and when you

785
00:29:42,539 --> 00:29:44,580
got popped and especially with Cloud

786
00:29:44,580 --> 00:29:46,440
Keys like if you've got Cloud keys that

787
00:29:46,440 --> 00:29:47,279
are only meant to be used by your

788
00:29:47,279 --> 00:29:48,720
pipeline and suddenly they're being used

789
00:29:48,720 --> 00:29:50,399
by some random IP out there on the

790
00:29:50,399 --> 00:29:52,380
internet that should probably set off

791
00:29:52,380 --> 00:29:54,299
some alarm Bells

792
00:29:54,299 --> 00:29:56,100
and once again least privilege are back

793
00:29:56,100 --> 00:29:57,539
I know that running infrastructure is

794
00:29:57,539 --> 00:29:59,940
called tooling as non-admin is tricky if

795
00:29:59,940 --> 00:30:01,260
anyone knows a nice way of making

796
00:30:01,260 --> 00:30:02,820
terraforms spit out the exact

797
00:30:02,820 --> 00:30:04,320
permissions it needs so you can craft

798
00:30:04,320 --> 00:30:06,419
policies please find me at the bar later

799
00:30:06,419 --> 00:30:07,919
because I'd really like to know what

800
00:30:07,919 --> 00:30:09,419
you're using

801
00:30:09,419 --> 00:30:11,580
but yeah effectively at least privilege

802
00:30:11,580 --> 00:30:14,640
our back log your credentials and have a

803
00:30:14,640 --> 00:30:16,260
capability to rotate your credentials

804
00:30:16,260 --> 00:30:17,460
because this was the other part of the

805
00:30:17,460 --> 00:30:19,200
instant response was so which

806
00:30:19,200 --> 00:30:20,580
credentials have been compromised don't

807
00:30:20,580 --> 00:30:23,399
know uh how do we take that check your

808
00:30:23,399 --> 00:30:24,779
logs we don't have any well go and

809
00:30:24,779 --> 00:30:25,980
rotate them all

810
00:30:25,980 --> 00:30:28,320
uh yeah someone got some overtime at

811
00:30:28,320 --> 00:30:30,480
that one I think

812
00:30:30,480 --> 00:30:33,000
yeah I had a similar case where the

813
00:30:33,000 --> 00:30:36,480
environment was locked down and the uh

814
00:30:36,480 --> 00:30:38,940
only allowed three rules there was a one

815
00:30:38,940 --> 00:30:40,799
redraw one wheel draw and then

816
00:30:40,799 --> 00:30:43,260
administrator so they were locked down

817
00:30:43,260 --> 00:30:46,620
very well documented and separated but

818
00:30:46,620 --> 00:30:48,840
there was only a slight problem they

819
00:30:48,840 --> 00:30:50,940
overlooked the permission and they

820
00:30:50,940 --> 00:30:54,740
forgot to remove uh one liter permission

821
00:30:54,740 --> 00:30:57,899
and I will

822
00:30:57,899 --> 00:31:01,520
show you what was the problem

823
00:31:10,580 --> 00:31:14,460
so in this case the problem was related

824
00:31:14,460 --> 00:31:18,720
to the build run because this rule had

825
00:31:18,720 --> 00:31:23,480
enabled the build reply permission

826
00:31:29,279 --> 00:31:32,159
yes so the the build role has or the

827
00:31:32,159 --> 00:31:33,740
user had been

828
00:31:33,740 --> 00:31:36,419
the building Prime information and this

829
00:31:36,419 --> 00:31:39,559
really reply permission will allow

830
00:31:39,559 --> 00:31:42,080
once you already

831
00:31:42,080 --> 00:31:45,419
built some pipelines and jobs they will

832
00:31:45,419 --> 00:31:48,600
allow to reply it but with a small

833
00:31:48,600 --> 00:31:50,940
tricks that you can add your own groovy

834
00:31:50,940 --> 00:31:51,840
code

835
00:31:51,840 --> 00:31:54,539
so basically you can just add your own

836
00:31:54,539 --> 00:31:56,760
groovy code that in this example you

837
00:31:56,760 --> 00:31:59,039
will see I will get the content of the

838
00:31:59,039 --> 00:32:03,260
password file on a Linux machine

839
00:32:03,600 --> 00:32:05,940
so even though they they lock down there

840
00:32:05,940 --> 00:32:08,399
was this model overlooked that allowed

841
00:32:08,399 --> 00:32:11,340
me a code execution so here you can see

842
00:32:11,340 --> 00:32:15,000
the reply button and I will just copy

843
00:32:15,000 --> 00:32:17,700
and paste here a little movie called

844
00:32:17,700 --> 00:32:18,960
and

845
00:32:18,960 --> 00:32:22,740
we will see in the console output

846
00:32:22,740 --> 00:32:26,539
the content of the password file

847
00:32:30,480 --> 00:32:33,140
here we go

848
00:32:42,899 --> 00:32:44,580
so

849
00:32:44,580 --> 00:32:46,679
I mean we could say like useless

850
00:32:46,679 --> 00:32:48,659
privilege with Rob Base access control

851
00:32:48,659 --> 00:32:51,299
but the company did so what we can say

852
00:32:51,299 --> 00:32:54,419
is validate what you have because even a

853
00:32:54,419 --> 00:32:56,700
small Overlook can have a very big

854
00:32:56,700 --> 00:32:59,120
impact

855
00:33:07,020 --> 00:33:11,039
so you have seen that these examples

856
00:33:11,039 --> 00:33:13,559
didn't use any zero day vulnerabilities

857
00:33:13,559 --> 00:33:18,360
but they share other common things teams

858
00:33:18,360 --> 00:33:21,120
and we will talk about these common

859
00:33:21,120 --> 00:33:23,240
teams and protections

860
00:33:23,240 --> 00:33:25,679
Ian would you like to talk about the

861
00:33:25,679 --> 00:33:26,940
secret management

862
00:33:26,940 --> 00:33:28,860
yeah so we've seen some problems

863
00:33:28,860 --> 00:33:30,779
throughout pipelines where passwords are

864
00:33:30,779 --> 00:33:32,460
either shared across branches or

865
00:33:32,460 --> 00:33:34,919
hard-coded and generally we recommend

866
00:33:34,919 --> 00:33:37,200
some form of Secrets management it's

867
00:33:37,200 --> 00:33:38,760
fair to say that if an attacker has

868
00:33:38,760 --> 00:33:40,679
compromised your CI and you're using a

869
00:33:40,679 --> 00:33:43,380
programmatic um Secrets manager they can

870
00:33:43,380 --> 00:33:45,480
probably interact anyway but at the very

871
00:33:45,480 --> 00:33:46,980
least it means passwords shouldn't be

872
00:33:46,980 --> 00:33:48,179
showing up in logs shouldn't be

873
00:33:48,179 --> 00:33:50,220
hard-coded and shared too widely around

874
00:33:50,220 --> 00:33:52,559
the estate and also generally you should

875
00:33:52,559 --> 00:33:54,419
have some slightly better way of

876
00:33:54,419 --> 00:33:56,340
rotating your credentials and plus

877
00:33:56,340 --> 00:33:58,200
you've got logging to see where and when

878
00:33:58,200 --> 00:34:00,600
they've been used

879
00:34:00,600 --> 00:34:03,179
as you have seen even though there was

880
00:34:03,179 --> 00:34:06,059
some kind of segmentation but it didn't

881
00:34:06,059 --> 00:34:08,760
really work because we could access from

882
00:34:08,760 --> 00:34:10,379
a Dev environment a production

883
00:34:10,379 --> 00:34:13,560
environment as well so they didn't

884
00:34:13,560 --> 00:34:15,480
really use any network segmentation or

885
00:34:15,480 --> 00:34:19,619
isolation and it's very important to as

886
00:34:19,619 --> 00:34:21,780
you mentioned with the secrets to limit

887
00:34:21,780 --> 00:34:24,418
the scope and the same with the network

888
00:34:24,418 --> 00:34:27,719
and other builds as well

889
00:34:27,719 --> 00:34:29,760
monitoring and alerting as well first of

890
00:34:29,760 --> 00:34:31,139
all where your credentials being used

891
00:34:31,139 --> 00:34:33,780
secondly a lot of organizations seem to

892
00:34:33,780 --> 00:34:35,280
think well these are all

893
00:34:35,280 --> 00:34:36,719
these attacks are all through get

894
00:34:36,719 --> 00:34:38,399
commits so I can just check them in the

895
00:34:38,399 --> 00:34:40,379
git logs but if you see that oh someone

896
00:34:40,379 --> 00:34:42,480
did a git commit that caused a runner to

897
00:34:42,480 --> 00:34:44,099
spawn a shell you still don't know what

898
00:34:44,099 --> 00:34:45,899
actually happened inside that shell and

899
00:34:45,899 --> 00:34:47,820
quite often these environments are

900
00:34:47,820 --> 00:34:50,879
immutable or not immutable ephemeral and

901
00:34:50,879 --> 00:34:52,679
the the logs are gone once the

902
00:34:52,679 --> 00:34:54,780
environment's finished so either a job

903
00:34:54,780 --> 00:34:56,699
can be deleted or the logs might just

904
00:34:56,699 --> 00:34:59,099
never be stored at all and having some

905
00:34:59,099 --> 00:35:00,599
form of monitoring and alerting to know

906
00:35:00,599 --> 00:35:02,280
what your pipeline's doing it's probably

907
00:35:02,280 --> 00:35:04,140
a good idea for your your blue team or

908
00:35:04,140 --> 00:35:06,359
your Defenders to have access to

909
00:35:06,359 --> 00:35:08,520
even though in the examples we didn't

910
00:35:08,520 --> 00:35:12,660
talk about the patch management or if

911
00:35:12,660 --> 00:35:14,820
any companies or or the environments

912
00:35:14,820 --> 00:35:18,900
were behind versions but for example in

913
00:35:18,900 --> 00:35:21,619
my cases where I assess Jenkins

914
00:35:21,619 --> 00:35:24,599
environments most of the time they were

915
00:35:24,599 --> 00:35:26,760
behind one or two versions or they use

916
00:35:26,760 --> 00:35:29,880
plugins that were vulnerable to some

917
00:35:29,880 --> 00:35:31,440
issues

918
00:35:31,440 --> 00:35:35,760
so it's very important to have a regular

919
00:35:35,760 --> 00:35:39,180
patch management and all these install

920
00:35:39,180 --> 00:35:42,240
the latest updates and use some

921
00:35:42,240 --> 00:35:44,640
hardening on the services

922
00:35:44,640 --> 00:35:46,200
and I'm going to roll the last two into

923
00:35:46,200 --> 00:35:47,940
one here because I think a lot of the

924
00:35:47,940 --> 00:35:49,980
problems we see come from people writing

925
00:35:49,980 --> 00:35:51,720
up SEI pipelines because they want

926
00:35:51,720 --> 00:35:53,640
things to go fast and then not thinking

927
00:35:53,640 --> 00:35:55,980
about them anymore so threat modeling in

928
00:35:55,980 --> 00:35:57,839
our back kind of fall into the same camp

929
00:35:57,839 --> 00:36:00,060
if you're implementing CI pipelines if

930
00:36:00,060 --> 00:36:01,260
you have them in your organizations at

931
00:36:01,260 --> 00:36:02,700
the moment

932
00:36:02,700 --> 00:36:04,140
and if you've not thought about this

933
00:36:04,140 --> 00:36:05,099
before

934
00:36:05,099 --> 00:36:06,599
have a sat down and do a tabletop

935
00:36:06,599 --> 00:36:07,920
exercise and say right what would happen

936
00:36:07,920 --> 00:36:10,800
if we had a rogue developer or if we've

937
00:36:10,800 --> 00:36:13,380
got open source projects that we use or

938
00:36:13,380 --> 00:36:16,020
we maintain and they run some form of

939
00:36:16,020 --> 00:36:18,240
Open Source and anyone on the internet

940
00:36:18,240 --> 00:36:21,180
can make a commit sort of pipeline just

941
00:36:21,180 --> 00:36:22,740
sitting down and thinking what would the

942
00:36:22,740 --> 00:36:24,960
impact be what's the blast radius

943
00:36:24,960 --> 00:36:26,700
probably will at the very least let you

944
00:36:26,700 --> 00:36:28,200
understand the risk you're facing and

945
00:36:28,200 --> 00:36:29,400
then start to think about how you're

946
00:36:29,400 --> 00:36:32,099
going to either stop them or detect if

947
00:36:32,099 --> 00:36:35,660
an attacker is doing something dodgy

948
00:36:36,420 --> 00:36:38,880
so to summarize what we have talked

949
00:36:38,880 --> 00:36:41,280
about cicd is beneficial for the

950
00:36:41,280 --> 00:36:43,260
companies and for the developers because

951
00:36:43,260 --> 00:36:46,800
they have their jobs to automate it but

952
00:36:46,800 --> 00:36:49,380
they can be also very complex and even a

953
00:36:49,380 --> 00:36:52,200
small oversight or Overlook can have a

954
00:36:52,200 --> 00:36:54,619
very big impact as we have seen

955
00:36:54,619 --> 00:36:57,780
none of these problems are new or used

956
00:36:57,780 --> 00:37:00,599
we didn't use any zero days

957
00:37:00,599 --> 00:37:03,780
and also as Ian mentioned in the

958
00:37:03,780 --> 00:37:06,260
previous slides these environments

959
00:37:06,260 --> 00:37:09,720
doesn't really have a strat model that

960
00:37:09,720 --> 00:37:13,579
could show any problems and they also

961
00:37:13,579 --> 00:37:16,740
unfortunately have the companies give

962
00:37:16,740 --> 00:37:18,839
very little focus on the pipeline and

963
00:37:18,839 --> 00:37:22,260
the supporting infrastructure

964
00:37:22,260 --> 00:37:24,359
and and the kind of little Focus thing

965
00:37:24,359 --> 00:37:26,220
is maybe less true now than it was when

966
00:37:26,220 --> 00:37:27,480
we started writing these slides

967
00:37:27,480 --> 00:37:29,280
obviously over the last few years there

968
00:37:29,280 --> 00:37:30,900
have been a quite a lot of high profile

969
00:37:30,900 --> 00:37:32,960
CI compromises things like code cough

970
00:37:32,960 --> 00:37:35,700
and also in the last few months this has

971
00:37:35,700 --> 00:37:38,220
got more and more of a hot topic one of

972
00:37:38,220 --> 00:37:39,420
the things I wanted to give an honorable

973
00:37:39,420 --> 00:37:40,859
mention to that couldn't work out how to

974
00:37:40,859 --> 00:37:42,720
fit it into the stories was

975
00:37:42,720 --> 00:37:45,420
um dependency signing or artifact

976
00:37:45,420 --> 00:37:46,920
signing a lot of people seem to think

977
00:37:46,920 --> 00:37:48,359
well I sign everything at the end of my

978
00:37:48,359 --> 00:37:50,520
pipeline so I'm secure right and they're

979
00:37:50,520 --> 00:37:52,020
they're kind of correcting that if you

980
00:37:52,020 --> 00:37:53,760
run a signing task at the end of your

981
00:37:53,760 --> 00:37:55,320
pipeline

982
00:37:55,320 --> 00:37:57,720
and then I run your your artifacts if

983
00:37:57,720 --> 00:37:59,460
you give me an XC or a DOT jar or

984
00:37:59,460 --> 00:38:01,619
whatever and it's signed I know that

985
00:38:01,619 --> 00:38:03,480
it's definitely the one you've built but

986
00:38:03,480 --> 00:38:04,740
if an attacker's compromise your

987
00:38:04,740 --> 00:38:05,820
pipeline before that stage

988
00:38:05,820 --> 00:38:07,440
congratulations you've programmatically

989
00:38:07,440 --> 00:38:08,940
signed my malware

990
00:38:08,940 --> 00:38:10,200
and now everyone's going to trust it

991
00:38:10,200 --> 00:38:12,180
even more again

992
00:38:12,180 --> 00:38:14,099
don't get me wrong signing is solving a

993
00:38:14,099 --> 00:38:16,020
huge problem but it's absolutely not a

994
00:38:16,020 --> 00:38:19,020
silver bullet for security

995
00:38:19,020 --> 00:38:21,180
we have used up all of our time so I

996
00:38:21,180 --> 00:38:22,440
suspect we're going to get kicked out of

997
00:38:22,440 --> 00:38:24,480
here in about 54 seconds according to

998
00:38:24,480 --> 00:38:26,640
the big ticking clock there uh we have a

999
00:38:26,640 --> 00:38:28,079
room for another half hour if you want

1000
00:38:28,079 --> 00:38:30,060
to if you've got any questions

1001
00:38:30,060 --> 00:38:32,099
um either feel free to reach out we are

1002
00:38:32,099 --> 00:38:35,099
uh Spartacus and wakapi how do you

1003
00:38:35,099 --> 00:38:36,320
pronounce it

1004
00:38:36,320 --> 00:38:38,400
on Twitter

1005
00:38:38,400 --> 00:38:40,020
um we're also first At Last At NCC

1006
00:38:40,020 --> 00:38:42,599
group.com or find us around here at some

1007
00:38:42,599 --> 00:38:45,300
point thank you very much everyone thank

1008
00:38:45,300 --> 00:38:46,820
you

1009
00:38:46,820 --> 00:38:48,240
[Music]

1010
00:38:48,240 --> 00:38:51,240
foreign

1011
00:38:53,780 --> 00:38:56,879
[Music]

