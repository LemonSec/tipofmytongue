1
00:00:00,030 --> 00:00:04,980
good morning<font color="#E5E5E5"> thanks for</font><font color="#CCCCCC"> joining that's</font>

2
00:00:02,850 --> 00:00:08,099
<font color="#E5E5E5">Joe standing next to me and</font><font color="#CCCCCC"> I'm Nico and</font>

3
00:00:04,980 --> 00:00:10,800
we work<font color="#E5E5E5"> for Microsoft at the Security</font>

4
00:00:08,099 --> 00:00:13,530
Response Team<font color="#CCCCCC"> VM SRC and we're here</font>

5
00:00:10,800 --> 00:00:15,690
today<font color="#E5E5E5"> to talk about hyper-v and some of</font>

6
00:00:13,530 --> 00:00:18,210
the outstanding vulnerabilities we've

7
00:00:15,690 --> 00:00:22,320
seen<font color="#E5E5E5"> so you guys you might be wondering</font>

8
00:00:18,210 --> 00:00:24,300
<font color="#E5E5E5">why we</font><font color="#CCCCCC"> are doing</font><font color="#E5E5E5"> that why we are talking</font>

9
00:00:22,320 --> 00:00:27,269
about vulnerabilities in your own

10
00:00:24,300 --> 00:00:30,449
product<font color="#CCCCCC"> um there are</font><font color="#E5E5E5"> various reasons for</font>

11
00:00:27,269 --> 00:00:33,540
<font color="#CCCCCC">that</font><font color="#E5E5E5"> one of the reasons is that we've</font>

12
00:00:30,449 --> 00:00:36,630
got an outstanding<font color="#E5E5E5"> bug bounty so you</font>

13
00:00:33,540 --> 00:00:39,750
know before joining Microsoft<font color="#E5E5E5"> I used to</font>

14
00:00:36,630 --> 00:00:41,910
be<font color="#CCCCCC"> bounty hunter and in my own opinion</font>

15
00:00:39,750 --> 00:00:44,789
<font color="#E5E5E5">right now this is one</font><font color="#CCCCCC"> of the best that</font>

16
00:00:41,910 --> 00:00:48,360
we<font color="#CCCCCC"> have look at death there's these</font>

17
00:00:44,789 --> 00:00:51,809
<font color="#E5E5E5">figures for energy in a</font><font color="#CCCCCC"> colonel we will</font>

18
00:00:48,360 --> 00:00:54,600
give you<font color="#CCCCCC"> $200,000 and if you manage to</font>

19
00:00:51,809 --> 00:00:59,809
exploit<font color="#E5E5E5"> that that will be another 50,000</font>

20
00:00:54,600 --> 00:01:02,850
more so why why this payout well because

21
00:00:59,809 --> 00:01:05,580
exploiting finding bugs in hyper-v is

22
00:01:02,850 --> 00:01:09,119
<font color="#E5E5E5">not failure it's hard it's complicated</font>

23
00:01:05,580 --> 00:01:11,820
it's it<font color="#CCCCCC"> takes a lot of time to ramp</font><font color="#E5E5E5"> up</font>

24
00:01:09,119 --> 00:01:14,549
and besides<font color="#E5E5E5"> they are not that many blog</font>

25
00:01:11,820 --> 00:01:17,008
<font color="#CCCCCC">posts available</font><font color="#E5E5E5"> there around there not</font>

26
00:01:14,549 --> 00:01:19,259
many vulnerabilities<font color="#CCCCCC"> publicly described</font>

27
00:01:17,009 --> 00:01:21,360
and for all<font color="#E5E5E5"> of this</font><font color="#CCCCCC"> we thought that it</font>

28
00:01:19,259 --> 00:01:24,000
would<font color="#CCCCCC"> be great</font><font color="#E5E5E5"> for us</font><font color="#CCCCCC"> to stand here</font>

29
00:01:21,360 --> 00:01:26,970
<font color="#E5E5E5">before you today and talk</font><font color="#CCCCCC"> about the</font>

30
00:01:24,000 --> 00:01:30,060
internals<font color="#E5E5E5"> of hyper-v which is what Joe</font>

31
00:01:26,970 --> 00:01:32,850
<font color="#CCCCCC">is</font><font color="#E5E5E5"> going to do in a second and I come</font>

32
00:01:30,060 --> 00:01:35,780
<font color="#E5E5E5">back</font><font color="#CCCCCC"> later</font><font color="#E5E5E5"> and I</font><font color="#CCCCCC"> will show</font><font color="#E5E5E5"> you some</font>

33
00:01:32,850 --> 00:01:39,149
<font color="#E5E5E5">great bugs that we've seen in Highbury</font>

34
00:01:35,780 --> 00:01:41,490
<font color="#CCCCCC">alright Joe</font><font color="#E5E5E5"> thanks</font><font color="#CCCCCC"> so one thing I'd like</font>

35
00:01:39,150 --> 00:01:43,110
<font color="#CCCCCC">to note is we</font><font color="#E5E5E5"> get questions sometimes</font>

36
00:01:41,490 --> 00:01:45,030
<font color="#E5E5E5">from people</font><font color="#CCCCCC"> who look at our bounties and</font>

37
00:01:43,110 --> 00:01:46,970
<font color="#CCCCCC">they say hey your bounty says that</font>

38
00:01:45,030 --> 00:01:49,049
you'll pay up to<font color="#CCCCCC"> 200,000 or up to</font>

39
00:01:46,970 --> 00:01:51,420
<font color="#E5E5E5">250,000 but how much am I really gonna</font>

40
00:01:49,049 --> 00:01:53,610
get and just<font color="#CCCCCC"> to provide some clarity</font><font color="#E5E5E5"> for</font>

41
00:01:51,420 --> 00:01:56,159
you guys unless<font color="#CCCCCC"> we have a</font><font color="#E5E5E5"> really good</font>

42
00:01:53,610 --> 00:01:58,950
reason<font color="#CCCCCC"> not to offer that maximum bounty</font>

43
00:01:56,159 --> 00:02:00,840
payout<font color="#E5E5E5"> we pay the maximum if you find a</font>

44
00:01:58,950 --> 00:02:02,100
<font color="#E5E5E5">good bug and you exploit it</font><font color="#CCCCCC"> in hyper-v</font>

45
00:02:00,840 --> 00:02:03,750
that's in the the kernel of<font color="#E5E5E5"> the</font>

46
00:02:02,100 --> 00:02:07,770
<font color="#E5E5E5">hypervisor</font><font color="#CCCCCC"> you're</font><font color="#E5E5E5"> probably gonna get two</font>

47
00:02:03,750 --> 00:02:09,119
<font color="#CCCCCC">hundred</font><font color="#E5E5E5"> and fifty thousand dollars</font><font color="#CCCCCC"> so</font>

48
00:02:07,770 --> 00:02:10,530
the first thing we'd like<font color="#E5E5E5"> to do is Nico</font>

49
00:02:09,119 --> 00:02:12,270
mentioned is we would<font color="#CCCCCC"> like to</font><font color="#E5E5E5"> give you a</font>

50
00:02:10,530 --> 00:02:13,230
little bit<font color="#CCCCCC"> of an overview of hyper-v</font>

51
00:02:12,270 --> 00:02:15,270
architecture

52
00:02:13,230 --> 00:02:17,250
from the perspective<font color="#CCCCCC"> of a security</font>

53
00:02:15,270 --> 00:02:19,080
researcher<font color="#E5E5E5"> that is just interested in</font>

54
00:02:17,250 --> 00:02:23,340
<font color="#E5E5E5">going and trying to find guests to host</font>

55
00:02:19,080 --> 00:02:25,319
escape bugs so if we look at<font color="#E5E5E5"> hyper-v</font>

56
00:02:23,340 --> 00:02:27,030
from a really high level<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> see</font>

57
00:02:25,319 --> 00:02:29,220
<font color="#CCCCCC">that at the</font><font color="#E5E5E5"> top here we</font><font color="#CCCCCC"> have the</font>

58
00:02:27,030 --> 00:02:31,310
<font color="#E5E5E5">hypervisor and down below</font><font color="#CCCCCC"> we have a</font>

59
00:02:29,220 --> 00:02:34,470
number<font color="#E5E5E5"> of</font><font color="#CCCCCC"> what we call partitions in</font>

60
00:02:31,310 --> 00:02:37,440
hyper-v a partition is how we<font color="#E5E5E5"> describe</font>

61
00:02:34,470 --> 00:02:39,090
the logical unit of isolation<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we</font>

62
00:02:37,440 --> 00:02:40,349
use to isolate different<font color="#E5E5E5"> virtual</font>

63
00:02:39,090 --> 00:02:43,019
machines<font color="#E5E5E5"> from each other</font>

64
00:02:40,349 --> 00:02:43,379
now partitions get<font color="#CCCCCC"> isolated in a few</font>

65
00:02:43,019 --> 00:02:45,569
ways

66
00:02:43,379 --> 00:02:47,970
the<font color="#E5E5E5"> first way</font><font color="#CCCCCC"> if they're isolated is the</font>

67
00:02:45,569 --> 00:02:50,190
hypervisor uses the extended page tables

68
00:02:47,970 --> 00:02:52,700
<font color="#E5E5E5">to control what physical memory each</font>

69
00:02:50,190 --> 00:02:55,049
partition<font color="#E5E5E5"> actually has access to and</font>

70
00:02:52,700 --> 00:02:57,420
another way that<font color="#CCCCCC"> isolation is provided</font>

71
00:02:55,049 --> 00:03:00,450
is<font color="#CCCCCC"> the hypervisor is able to receive</font>

72
00:02:57,420 --> 00:03:03,420
intercepts<font color="#E5E5E5"> or traps whenever certain</font>

73
00:03:00,450 --> 00:03:05,640
<font color="#E5E5E5">instructions are executed by a partition</font>

74
00:03:03,420 --> 00:03:08,700
<font color="#E5E5E5">so for example the hypervisor can</font>

75
00:03:05,640 --> 00:03:10,980
intercept any attempt by<font color="#CCCCCC"> a</font><font color="#E5E5E5"> partition to</font>

76
00:03:08,700 --> 00:03:14,339
execute in or out instructions<font color="#CCCCCC"> which are</font>

77
00:03:10,980 --> 00:03:15,929
used to<font color="#E5E5E5"> communicate</font><font color="#CCCCCC"> with i/o ports</font><font color="#E5E5E5"> so by</font>

78
00:03:14,340 --> 00:03:17,880
<font color="#CCCCCC">doing this the</font><font color="#E5E5E5"> hypervisor can really</font>

79
00:03:15,930 --> 00:03:20,040
effectively prevent a partition from

80
00:03:17,880 --> 00:03:22,530
having any access<font color="#CCCCCC"> to Hardware whatsoever</font>

81
00:03:20,040 --> 00:03:24,989
<font color="#E5E5E5">and also from having any access</font><font color="#CCCCCC"> to other</font>

82
00:03:22,530 --> 00:03:26,700
partitions<font color="#E5E5E5"> on the system so you</font><font color="#CCCCCC"> can see</font>

83
00:03:24,989 --> 00:03:28,500
we have<font color="#E5E5E5"> these dotted purple lines on</font>

84
00:03:26,700 --> 00:03:30,328
<font color="#E5E5E5">this slide and this is</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of to</font>

85
00:03:28,500 --> 00:03:31,980
illustrate<font color="#CCCCCC"> that none of these partitions</font>

86
00:03:30,329 --> 00:03:34,319
have access to each other's physical

87
00:03:31,980 --> 00:03:35,700
<font color="#E5E5E5">memory</font><font color="#CCCCCC"> and they also don't</font><font color="#E5E5E5"> have access</font>

88
00:03:34,319 --> 00:03:37,858
<font color="#E5E5E5">to</font><font color="#CCCCCC"> the physical memory of the hypervisor</font>

89
00:03:35,700 --> 00:03:39,899
<font color="#E5E5E5">itself and that brings me</font><font color="#CCCCCC"> to my next</font>

90
00:03:37,859 --> 00:03:42,209
<font color="#E5E5E5">point</font><font color="#CCCCCC"> some of</font><font color="#E5E5E5"> y'all might be familiar</font>

91
00:03:39,900 --> 00:03:44,730
<font color="#CCCCCC">with other virtualization</font><font color="#E5E5E5"> stacks like</font>

92
00:03:42,209 --> 00:03:47,160
<font color="#CCCCCC">KBM</font><font color="#E5E5E5"> for example and in some other</font>

93
00:03:44,730 --> 00:03:50,369
<font color="#E5E5E5">virtualization stacks the hypervisor is</font>

94
00:03:47,160 --> 00:03:52,440
<font color="#E5E5E5">a component that it lives inside</font><font color="#CCCCCC"> of the</font>

95
00:03:50,370 --> 00:03:55,200
kernel of<font color="#CCCCCC"> the host operating</font><font color="#E5E5E5"> system</font><font color="#CCCCCC"> and</font>

96
00:03:52,440 --> 00:03:58,349
<font color="#E5E5E5">that is not how hyper-v is designed in</font>

97
00:03:55,200 --> 00:04:00,599
hyper-v the hypervisor<font color="#E5E5E5"> is a standalone</font>

98
00:03:58,349 --> 00:04:02,940
binary that lives in its own<font color="#E5E5E5"> physical</font>

99
00:04:00,599 --> 00:04:04,530
and<font color="#E5E5E5"> virtual address space so</font><font color="#CCCCCC"> none of the</font>

100
00:04:02,940 --> 00:04:07,380
partitions have the ability to mess with

101
00:04:04,530 --> 00:04:09,599
its memory the<font color="#E5E5E5"> hypervisor and hyper-v is</font>

102
00:04:07,380 --> 00:04:12,060
not really<font color="#E5E5E5"> responsible</font><font color="#CCCCCC"> for a lot of</font>

103
00:04:09,599 --> 00:04:14,668
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> functionality</font><font color="#E5E5E5"> from a guest</font>

104
00:04:12,060 --> 00:04:16,680
to<font color="#CCCCCC"> hosts attack surface perspective it's</font>

105
00:04:14,669 --> 00:04:18,570
responsible for<font color="#CCCCCC"> configuring the extended</font>

106
00:04:16,680 --> 00:04:20,190
page tables<font color="#E5E5E5"> it's responsible for some</font>

107
00:04:18,570 --> 00:04:22,140
other<font color="#CCCCCC"> hardware specific or</font>

108
00:04:20,190 --> 00:04:23,610
virtualization specific hardware

109
00:04:22,140 --> 00:04:25,909
configuration

110
00:04:23,610 --> 00:04:28,439
and it will end up handling things like

111
00:04:25,909 --> 00:04:30,120
<font color="#E5E5E5">intercepts or traps or things like a</font>

112
00:04:28,439 --> 00:04:32,460
hyper call<font color="#E5E5E5"> being</font><font color="#CCCCCC"> made which is</font><font color="#E5E5E5"> the</font>

113
00:04:30,120 --> 00:04:34,979
system call of the hypervisor world<font color="#E5E5E5"> or</font>

114
00:04:32,460 --> 00:04:37,020
it will handle<font color="#E5E5E5"> traps</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> certain</font>

115
00:04:34,979 --> 00:04:38,938
privileged instructions are attempted to

116
00:04:37,020 --> 00:04:41,099
be executed but<font color="#E5E5E5"> most of the really</font>

117
00:04:38,939 --> 00:04:42,750
<font color="#CCCCCC">interesting attack surface isn't in the</font>

118
00:04:41,099 --> 00:04:44,870
hypervisor<font color="#CCCCCC"> so I wouldn't recommend that</font>

119
00:04:42,750 --> 00:04:48,389
you spend<font color="#E5E5E5"> a whole lot of time there</font>

120
00:04:44,870 --> 00:04:50,669
let's move on to<font color="#E5E5E5"> the root partition now</font>

121
00:04:48,389 --> 00:04:54,330
<font color="#CCCCCC">I mentioned previously</font><font color="#E5E5E5"> that all of the</font>

122
00:04:50,669 --> 00:04:55,979
partitions are isolated<font color="#CCCCCC"> from each</font><font color="#E5E5E5"> other</font>

123
00:04:54,330 --> 00:04:57,960
the physical<font color="#CCCCCC"> address space</font><font color="#E5E5E5"> is isolated</font>

124
00:04:55,979 --> 00:05:00,029
<font color="#E5E5E5">from each other</font><font color="#CCCCCC"> and that's actually not</font>

125
00:04:57,960 --> 00:05:01,830
quite<font color="#E5E5E5"> completely true there's one</font>

126
00:05:00,029 --> 00:05:03,659
special partition in hyper-v which we

127
00:05:01,830 --> 00:05:06,210
call the root partition<font color="#E5E5E5"> and this is</font>

128
00:05:03,659 --> 00:05:08,009
where the host<font color="#E5E5E5"> operating system</font><font color="#CCCCCC"> runs the</font>

129
00:05:06,210 --> 00:05:09,479
root<font color="#E5E5E5"> partition has access to the</font>

130
00:05:08,009 --> 00:05:11,789
<font color="#CCCCCC">physical memory of all of the other</font>

131
00:05:09,479 --> 00:05:13,500
partitions on the system and that's

132
00:05:11,789 --> 00:05:15,628
because the root<font color="#E5E5E5"> partition is ultimately</font>

133
00:05:13,500 --> 00:05:17,219
<font color="#E5E5E5">responsible for managing all</font><font color="#CCCCCC"> of the</font>

134
00:05:15,629 --> 00:05:19,650
virtual<font color="#E5E5E5"> machines that run on the system</font>

135
00:05:17,219 --> 00:05:21,629
<font color="#E5E5E5">it also has</font><font color="#CCCCCC"> access to all of the</font>

136
00:05:19,650 --> 00:05:24,210
<font color="#E5E5E5">hardware so it</font><font color="#CCCCCC"> can talk</font><font color="#E5E5E5"> to the</font><font color="#CCCCCC"> network</font>

137
00:05:21,629 --> 00:05:26,430
card the video card<font color="#CCCCCC"> etc</font><font color="#E5E5E5"> and because it</font>

138
00:05:24,210 --> 00:05:28,378
has this<font color="#CCCCCC"> special access</font><font color="#E5E5E5"> it's ultimately</font>

139
00:05:26,430 --> 00:05:30,629
responsible<font color="#E5E5E5"> for</font><font color="#CCCCCC"> providing a</font><font color="#E5E5E5"> number of</font>

140
00:05:28,379 --> 00:05:32,729
services to all of the other partitions

141
00:05:30,629 --> 00:05:36,240
<font color="#E5E5E5">or virtual machines that run on the</font>

142
00:05:32,729 --> 00:05:38,550
<font color="#CCCCCC">system</font><font color="#E5E5E5"> most of the interesting guests to</font>

143
00:05:36,240 --> 00:05:40,889
<font color="#E5E5E5">host attack surface in hyper-v lives</font>

144
00:05:38,550 --> 00:05:42,479
inside of<font color="#E5E5E5"> the root partition so that's</font>

145
00:05:40,889 --> 00:05:44,520
where you should<font color="#E5E5E5"> really spend your time</font>

146
00:05:42,479 --> 00:05:48,360
if you<font color="#E5E5E5"> want to try to find these kind of</font>

147
00:05:44,520 --> 00:05:49,919
bugs<font color="#CCCCCC"> and</font><font color="#E5E5E5"> last we'll just</font><font color="#CCCCCC"> mention the</font>

148
00:05:48,360 --> 00:05:51,960
guest partitions which is<font color="#CCCCCC"> a knee</font>

149
00:05:49,919 --> 00:05:53,938
partition that is<font color="#E5E5E5"> not the root these</font>

150
00:05:51,960 --> 00:05:55,500
partitions really do not<font color="#CCCCCC"> have access</font><font color="#E5E5E5"> to</font>

151
00:05:53,939 --> 00:05:57,270
the<font color="#E5E5E5"> physical memory of any other</font>

152
00:05:55,500 --> 00:05:59,669
partition they only can access their own

153
00:05:57,270 --> 00:06:02,430
<font color="#CCCCCC">physical memory</font><font color="#E5E5E5"> they have no access</font><font color="#CCCCCC"> to</font>

154
00:05:59,669 --> 00:06:04,469
<font color="#E5E5E5">any</font><font color="#CCCCCC"> of the hardware on the system they</font>

155
00:06:02,430 --> 00:06:06,509
<font color="#CCCCCC">can interact directly</font><font color="#E5E5E5"> with the</font>

156
00:06:04,469 --> 00:06:07,949
<font color="#E5E5E5">hypervisor by making hyper calls but</font>

157
00:06:06,509 --> 00:06:10,979
there's a very<font color="#E5E5E5"> limited set of hyper</font>

158
00:06:07,949 --> 00:06:13,229
calls that guests can<font color="#E5E5E5"> make and they have</font>

159
00:06:10,979 --> 00:06:16,139
no<font color="#CCCCCC"> ability to communicate</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> any other</font>

160
00:06:13,229 --> 00:06:19,438
partition except for the root partition

161
00:06:16,139 --> 00:06:22,589
<font color="#CCCCCC">so in hyper-v there really is no direct</font>

162
00:06:19,439 --> 00:06:24,479
guest to guest<font color="#E5E5E5"> attack surface all of</font><font color="#CCCCCC"> the</font>

163
00:06:22,589 --> 00:06:30,870
attack<font color="#CCCCCC"> surface is</font><font color="#E5E5E5"> either guest -</font>

164
00:06:24,479 --> 00:06:32,758
hypervisor or guest<font color="#CCCCCC"> -</font><font color="#E5E5E5"> host</font><font color="#CCCCCC"> alright so</font>

165
00:06:30,870 --> 00:06:34,680
<font color="#E5E5E5">before we move on I want</font><font color="#CCCCCC"> to give</font><font color="#E5E5E5"> you</font>

166
00:06:32,759 --> 00:06:36,449
guys<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit of terminology</font><font color="#CCCCCC"> when</font>

167
00:06:34,680 --> 00:06:38,969
we're talking about<font color="#E5E5E5"> physical memory</font>

168
00:06:36,449 --> 00:06:41,309
in virtualization<font color="#CCCCCC"> it can always</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> a</font>

169
00:06:38,969 --> 00:06:45,748
<font color="#CCCCCC">little</font><font color="#E5E5E5"> bit tricky because the hypervisor</font>

170
00:06:41,309 --> 00:06:48,029
<font color="#CCCCCC">uses</font><font color="#E5E5E5"> the extended page tables to control</font>

171
00:06:45,749 --> 00:06:49,289
what physical memory<font color="#CCCCCC"> all of the guest</font>

172
00:06:48,029 --> 00:06:52,319
partitions can<font color="#E5E5E5"> see</font>

173
00:06:49,289 --> 00:06:54,930
so in hyper-v we use the term system

174
00:06:52,319 --> 00:06:57,809
physical address<font color="#E5E5E5"> to refer to the real</font>

175
00:06:54,930 --> 00:07:00,300
physical<font color="#E5E5E5"> address of memory and we use</font>

176
00:06:57,809 --> 00:07:02,939
guest physical address<font color="#E5E5E5"> to refer to the</font>

177
00:07:00,300 --> 00:07:05,520
physical<font color="#E5E5E5"> addresses that the guests are</font>

178
00:07:02,939 --> 00:07:07,289
seeing and the<font color="#E5E5E5"> hypervisor uses the</font>

179
00:07:05,520 --> 00:07:09,900
extended page tables<font color="#E5E5E5"> to map guest</font>

180
00:07:07,289 --> 00:07:12,810
physical addresses to system physical

181
00:07:09,900 --> 00:07:15,779
addresses we also have a concept in

182
00:07:12,810 --> 00:07:19,379
hyper-v<font color="#E5E5E5"> called a guest physical address</font>

183
00:07:15,779 --> 00:07:21,240
descriptor list<font color="#E5E5E5"> or</font><font color="#CCCCCC"> GPA DL if any of you</font>

184
00:07:19,379 --> 00:07:23,370
are<font color="#CCCCCC"> familiar</font><font color="#E5E5E5"> with Windows kernel</font>

185
00:07:21,240 --> 00:07:25,830
programming<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is conceptually</font>

186
00:07:23,370 --> 00:07:29,339
identical to an MDL or a memory

187
00:07:25,830 --> 00:07:30,990
descriptor list all that<font color="#CCCCCC"> a GPA dl is is</font>

188
00:07:29,339 --> 00:07:34,830
it's a small header<font color="#E5E5E5"> and then it's</font>

189
00:07:30,990 --> 00:07:39,240
followed<font color="#CCCCCC"> by a list</font><font color="#E5E5E5"> of guest physical</font>

190
00:07:34,830 --> 00:07:41,969
addresses and guests<font color="#CCCCCC"> can use a GPA dl to</font>

191
00:07:39,240 --> 00:07:44,099
describe a<font color="#E5E5E5"> range of physical</font><font color="#CCCCCC"> memory that</font>

192
00:07:41,969 --> 00:07:50,460
<font color="#CCCCCC">they want the host</font><font color="#E5E5E5"> to do you know</font>

193
00:07:44,099 --> 00:07:52,438
certain operations on and when we're

194
00:07:50,460 --> 00:07:54,599
<font color="#E5E5E5">looking at hyper-v and</font><font color="#CCCCCC"> we're trying to</font>

195
00:07:52,439 --> 00:07:56,669
look<font color="#E5E5E5"> at</font><font color="#CCCCCC"> different components that</font><font color="#E5E5E5"> the</font>

196
00:07:54,599 --> 00:07:59,039
guests can<font color="#E5E5E5"> attack those components</font>

197
00:07:56,669 --> 00:08:01,589
primarily<font color="#E5E5E5"> fall into three categories</font><font color="#CCCCCC"> the</font>

198
00:07:59,039 --> 00:08:05,159
<font color="#CCCCCC">first is a virtual device</font><font color="#E5E5E5"> or what we</font>

199
00:08:01,589 --> 00:08:07,649
call AV dev this is either an emulated

200
00:08:05,159 --> 00:08:10,438
device or a para virtualized device and

201
00:08:07,649 --> 00:08:13,169
it lives<font color="#E5E5E5"> inside of user mode in the host</font>

202
00:08:10,439 --> 00:08:16,339
<font color="#E5E5E5">operating system next we have a</font>

203
00:08:13,169 --> 00:08:19,589
virtualization service provider or VSP

204
00:08:16,339 --> 00:08:21,689
<font color="#CCCCCC">DSPs</font><font color="#E5E5E5"> our para virtualized devices that</font>

205
00:08:19,589 --> 00:08:24,689
live inside<font color="#CCCCCC"> of the kernel of the host</font>

206
00:08:21,689 --> 00:08:26,969
operating<font color="#E5E5E5"> system</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> finally we have</font>

207
00:08:24,689 --> 00:08:28,289
integration components<font color="#E5E5E5"> and from the</font>

208
00:08:26,969 --> 00:08:29,580
<font color="#E5E5E5">perspective of someone who's</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> trying</font>

209
00:08:28,289 --> 00:08:32,010
<font color="#CCCCCC">to find guest to host bugs</font><font color="#E5E5E5"> an</font>

210
00:08:29,580 --> 00:08:34,439
integration component is basically

211
00:08:32,010 --> 00:08:36,659
<font color="#CCCCCC">identical to a</font><font color="#E5E5E5"> vida</font><font color="#CCCCCC"> it is a component</font>

212
00:08:34,440 --> 00:08:39,779
that<font color="#CCCCCC"> is hosted in user mode on the root</font>

213
00:08:36,659 --> 00:08:42,208
<font color="#E5E5E5">partition and the</font><font color="#CCCCCC"> the guests can</font>

214
00:08:39,779 --> 00:08:44,068
communicate with<font color="#CCCCCC"> it over specific</font>

215
00:08:42,208 --> 00:08:45,569
<font color="#E5E5E5">communication channels so there's really</font>

216
00:08:44,068 --> 00:08:49,979
not any difference<font color="#E5E5E5"> between these and</font><font color="#CCCCCC"> B</font>

217
00:08:45,569 --> 00:08:51,959
<font color="#CCCCCC">dos now I had</font><font color="#E5E5E5"> mentioned</font><font color="#CCCCCC"> before</font>

218
00:08:49,980 --> 00:08:54,150
the root partition<font color="#E5E5E5"> is responsible for</font>

219
00:08:51,960 --> 00:08:55,920
<font color="#E5E5E5">providing</font><font color="#CCCCCC"> a number of services to</font><font color="#E5E5E5"> the</font>

220
00:08:54,150 --> 00:08:57,930
<font color="#CCCCCC">guests partitions</font><font color="#E5E5E5"> and as you can</font>

221
00:08:55,920 --> 00:08:59,640
<font color="#E5E5E5">probably</font><font color="#CCCCCC"> imagine this</font><font color="#E5E5E5"> is necessary</font>

222
00:08:57,930 --> 00:09:02,550
because<font color="#E5E5E5"> the guest partitions have zero</font>

223
00:08:59,640 --> 00:09:04,530
access to<font color="#CCCCCC"> Hardware</font><font color="#E5E5E5"> so unless someone</font>

224
00:09:02,550 --> 00:09:06,900
provides them with storage and

225
00:09:04,530 --> 00:09:08,760
networking and other stuff<font color="#CCCCCC"> like that a</font>

226
00:09:06,900 --> 00:09:12,060
<font color="#CCCCCC">guest partition wouldn't even be able to</font>

227
00:09:08,760 --> 00:09:14,010
boot the different types of we have a

228
00:09:12,060 --> 00:09:17,280
few different<font color="#CCCCCC"> types of</font><font color="#E5E5E5"> devices</font><font color="#CCCCCC"> that end</font>

229
00:09:14,010 --> 00:09:20,790
up being exposed to<font color="#E5E5E5"> guest partitions</font>

230
00:09:17,280 --> 00:09:23,250
<font color="#E5E5E5">first we have emulated devices so we</font>

231
00:09:20,790 --> 00:09:25,290
have an emulated<font color="#E5E5E5"> network card video card</font>

232
00:09:23,250 --> 00:09:27,480
<font color="#CCCCCC">motherboards serial port</font><font color="#E5E5E5"> etc there's a</font>

233
00:09:25,290 --> 00:09:30,420
whole list of these<font color="#CCCCCC"> things and the</font>

234
00:09:27,480 --> 00:09:32,040
emulated devices literally emulate<font color="#E5E5E5"> super</font>

235
00:09:30,420 --> 00:09:34,319
<font color="#E5E5E5">old hardware that basically every</font>

236
00:09:32,040 --> 00:09:36,810
operating<font color="#E5E5E5"> system</font><font color="#CCCCCC"> in existence knows how</font>

237
00:09:34,320 --> 00:09:38,790
to<font color="#E5E5E5"> use so the network card is like a 25</font>

238
00:09:36,810 --> 00:09:43,680
year old<font color="#CCCCCC"> network card that operates</font>

239
00:09:38,790 --> 00:09:46,199
using<font color="#E5E5E5"> i/o ports as you can</font><font color="#CCCCCC"> imagine</font><font color="#E5E5E5"> doing</font>

240
00:09:43,680 --> 00:09:48,689
<font color="#CCCCCC">Hardware emulation</font><font color="#E5E5E5"> is really slow</font><font color="#CCCCCC"> and</font>

241
00:09:46,200 --> 00:09:51,000
for<font color="#E5E5E5"> certain things like networking or</font>

242
00:09:48,690 --> 00:09:52,950
storage you need super super good

243
00:09:51,000 --> 00:09:54,510
performance<font color="#CCCCCC"> and so that's where the</font>

244
00:09:52,950 --> 00:09:57,540
<font color="#CCCCCC">paravirtualized</font><font color="#E5E5E5"> device has come into</font>

245
00:09:54,510 --> 00:10:00,900
play we have a pair virtualized<font color="#E5E5E5"> network</font>

246
00:09:57,540 --> 00:10:05,040
stack storage stack<font color="#E5E5E5"> video stack and para</font>

247
00:10:00,900 --> 00:10:06,540
virtualized PCI device and finally we

248
00:10:05,040 --> 00:10:10,530
have sort of a<font color="#CCCCCC"> grab-bag of other</font>

249
00:10:06,540 --> 00:10:12,660
functionality<font color="#E5E5E5"> that the hypervisor</font><font color="#CCCCCC"> root</font>

250
00:10:10,530 --> 00:10:14,819
partition<font color="#CCCCCC"> needs</font><font color="#E5E5E5"> to provide to guests</font>

251
00:10:12,660 --> 00:10:16,530
<font color="#E5E5E5">this is things like you need to provide</font>

252
00:10:14,820 --> 00:10:18,540
the BIOS firmware<font color="#E5E5E5"> that the VM is going</font>

253
00:10:16,530 --> 00:10:20,550
to boot off<font color="#E5E5E5"> of you need to provide live</font>

254
00:10:18,540 --> 00:10:23,849
migration support<font color="#E5E5E5"> you need to provide</font>

255
00:10:20,550 --> 00:10:25,890
the ability<font color="#CCCCCC"> to commit</font><font color="#E5E5E5"> and D commit</font>

256
00:10:23,850 --> 00:10:27,420
physical memory from<font color="#E5E5E5"> the virtual machine</font>

257
00:10:25,890 --> 00:10:29,850
while it's running<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> want to have</font>

258
00:10:27,420 --> 00:10:31,890
dynamic<font color="#E5E5E5"> memory</font><font color="#CCCCCC"> we have a number</font><font color="#E5E5E5"> of</font>

259
00:10:29,850 --> 00:10:35,730
<font color="#E5E5E5">integration components these typically</font>

260
00:10:31,890 --> 00:10:38,069
do things such as provide<font color="#E5E5E5"> the hosts time</font>

261
00:10:35,730 --> 00:10:39,750
<font color="#E5E5E5">to the guest</font><font color="#CCCCCC"> so that the guest knows</font>

262
00:10:38,070 --> 00:10:41,580
what time it<font color="#CCCCCC"> is or there's an</font>

263
00:10:39,750 --> 00:10:44,070
integration component that allows<font color="#E5E5E5"> you</font><font color="#CCCCCC"> to</font>

264
00:10:41,580 --> 00:10:46,560
gracefully<font color="#CCCCCC"> shutdown the virtual</font><font color="#E5E5E5"> machine</font>

265
00:10:44,070 --> 00:10:49,110
from<font color="#E5E5E5"> the hyper-v interface without</font>

266
00:10:46,560 --> 00:10:51,599
having to go<font color="#CCCCCC"> and actually log into the</font>

267
00:10:49,110 --> 00:10:54,180
virtual<font color="#CCCCCC"> machine</font><font color="#E5E5E5"> and do a shutdown from</font>

268
00:10:51,600 --> 00:10:55,800
the virtual machine<font color="#CCCCCC"> itself</font><font color="#E5E5E5"> and then we</font>

269
00:10:54,180 --> 00:10:57,089
have hyper-v containers which we're<font color="#E5E5E5"> not</font>

270
00:10:55,800 --> 00:10:59,160
<font color="#CCCCCC">going to talk</font><font color="#E5E5E5"> about much in this talk</font>

271
00:10:57,090 --> 00:11:00,900
but<font color="#E5E5E5"> it's worth noting that there's also</font>

272
00:10:59,160 --> 00:11:02,230
<font color="#E5E5E5">some specific functionality that's</font>

273
00:11:00,900 --> 00:11:04,030
provided if you're running a contain

274
00:11:02,230 --> 00:11:06,970
so if you're<font color="#E5E5E5"> running a Windows container</font>

275
00:11:04,030 --> 00:11:09,339
<font color="#E5E5E5">we have an SMB server that ends up being</font>

276
00:11:06,970 --> 00:11:10,810
exposed<font color="#E5E5E5"> to that hyper-v container or for</font>

277
00:11:09,340 --> 00:11:13,660
a Linux container we have a plan<font color="#CCCCCC"> nine</font>

278
00:11:10,810 --> 00:11:16,270
file server<font color="#E5E5E5"> that's exposed it's also</font>

279
00:11:13,660 --> 00:11:18,550
worth noting that hyper-v has two

280
00:11:16,270 --> 00:11:20,590
generations of virtual machines<font color="#E5E5E5"> and you</font>

281
00:11:18,550 --> 00:11:22,810
select<font color="#E5E5E5"> what generation you want when you</font>

282
00:11:20,590 --> 00:11:25,600
create the<font color="#CCCCCC"> virtual machine generation</font>

283
00:11:22,810 --> 00:11:28,089
one<font color="#E5E5E5"> VMs have a significant amount of</font>

284
00:11:25,600 --> 00:11:30,280
emulated devices exposed to them whereas

285
00:11:28,090 --> 00:11:32,140
generation two VMs<font color="#CCCCCC"> have almost no</font>

286
00:11:30,280 --> 00:11:33,970
emulated devices exposed to them and

287
00:11:32,140 --> 00:11:36,760
pretty<font color="#E5E5E5"> much exclusively use para</font>

288
00:11:33,970 --> 00:11:39,370
<font color="#E5E5E5">virtualized devices some of these</font>

289
00:11:36,760 --> 00:11:41,890
<font color="#E5E5E5">services</font><font color="#CCCCCC"> are also not mandatory</font><font color="#E5E5E5"> under</font>

290
00:11:39,370 --> 00:11:43,930
<font color="#E5E5E5">any hyper-v configuration so live</font>

291
00:11:41,890 --> 00:11:46,689
migration<font color="#CCCCCC"> is an example of a service</font>

292
00:11:43,930 --> 00:11:48,219
that<font color="#E5E5E5"> hyper-v can provide to a guest but</font>

293
00:11:46,690 --> 00:11:49,720
doesn't<font color="#CCCCCC"> necessarily mean to if you're</font>

294
00:11:48,220 --> 00:11:56,650
never gonna live migrate the<font color="#E5E5E5"> guest then</font>

295
00:11:49,720 --> 00:11:58,360
that is<font color="#CCCCCC"> just not attack surface so</font>

296
00:11:56,650 --> 00:12:00,939
hyper-v really is<font color="#E5E5E5"> designed with the</font>

297
00:11:58,360 --> 00:12:03,010
<font color="#E5E5E5">principle of least privilege in mind as</font>

298
00:12:00,940 --> 00:12:04,630
I noted<font color="#CCCCCC"> before the hypervisor itself</font>

299
00:12:03,010 --> 00:12:06,610
doesn't<font color="#CCCCCC"> really have a</font><font color="#E5E5E5"> whole</font><font color="#CCCCCC"> lot of</font>

300
00:12:04,630 --> 00:12:09,160
<font color="#E5E5E5">functionality</font><font color="#CCCCCC"> in it especially</font><font color="#E5E5E5"> from the</font>

301
00:12:06,610 --> 00:12:11,050
guest to host perspective we put all of

302
00:12:09,160 --> 00:12:13,180
<font color="#E5E5E5">that</font><font color="#CCCCCC"> functionality into the root</font>

303
00:12:11,050 --> 00:12:14,530
<font color="#E5E5E5">partition where possible and when we're</font>

304
00:12:13,180 --> 00:12:17,109
looking<font color="#E5E5E5"> at where we put it in the root</font>

305
00:12:14,530 --> 00:12:19,480
<font color="#E5E5E5">partition we prefer</font><font color="#CCCCCC"> to put functionality</font>

306
00:12:17,110 --> 00:12:21,220
in user mode<font color="#CCCCCC"> unless we can't for either</font>

307
00:12:19,480 --> 00:12:23,680
performance or just<font color="#E5E5E5"> architectural</font>

308
00:12:21,220 --> 00:12:27,000
reasons<font color="#E5E5E5"> but as a guiding principle we</font>

309
00:12:23,680 --> 00:12:29,290
always try to put code<font color="#CCCCCC"> in user mode</font><font color="#E5E5E5"> I</font>

310
00:12:27,000 --> 00:12:31,900
thought it would be useful to<font color="#E5E5E5"> give you a</font>

311
00:12:29,290 --> 00:12:34,079
more componentized view of where some of

312
00:12:31,900 --> 00:12:36,819
this<font color="#E5E5E5"> attack surface lives in hyper-v</font>

313
00:12:34,080 --> 00:12:38,410
hyper-v is split but on the<font color="#CCCCCC"> the root</font>

314
00:12:36,820 --> 00:12:40,990
partition<font color="#E5E5E5"> is split between kernel mode</font>

315
00:12:38,410 --> 00:12:42,969
and user mode components in the kernel

316
00:12:40,990 --> 00:12:44,980
we have the VM switch which provides

317
00:12:42,970 --> 00:12:47,440
<font color="#E5E5E5">paravirtualized</font><font color="#CCCCCC"> high speed networking</font>

318
00:12:44,980 --> 00:12:48,880
<font color="#CCCCCC">and we have the store of ESP and</font><font color="#E5E5E5"> there's</font>

319
00:12:47,440 --> 00:12:51,280
a couple other drivers but<font color="#CCCCCC"> they all</font>

320
00:12:48,880 --> 00:12:52,720
chained<font color="#CCCCCC"> up to store</font><font color="#E5E5E5"> VSP that end up</font>

321
00:12:51,280 --> 00:12:56,140
<font color="#E5E5E5">providing para virtualized</font>

322
00:12:52,720 --> 00:12:57,940
<font color="#CCCCCC">high speed</font><font color="#E5E5E5"> storage we also have our para</font>

323
00:12:56,140 --> 00:12:59,860
virtualized<font color="#E5E5E5"> PCI stack in the kernel</font>

324
00:12:57,940 --> 00:13:02,950
which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> there mainly</font><font color="#CCCCCC"> for architectural</font>

325
00:12:59,860 --> 00:13:05,920
<font color="#CCCCCC">reasons the pci stack is actually not</font>

326
00:13:02,950 --> 00:13:07,990
usually used<font color="#CCCCCC"> for virtual machines it's</font>

327
00:13:05,920 --> 00:13:10,420
it's mainly<font color="#E5E5E5"> there</font><font color="#CCCCCC"> to support scenarios</font>

328
00:13:07,990 --> 00:13:12,259
such as<font color="#CCCCCC"> SR IO V where you might have a</font>

329
00:13:10,420 --> 00:13:15,079
piece<font color="#CCCCCC"> of</font><font color="#E5E5E5"> hardware</font>

330
00:13:12,259 --> 00:13:17,209
<font color="#E5E5E5">is virtualization aware and you want to</font>

331
00:13:15,079 --> 00:13:19,899
<font color="#E5E5E5">attach a virtual function from that</font>

332
00:13:17,209 --> 00:13:23,118
<font color="#CCCCCC">hardware directly into a virtual machine</font>

333
00:13:19,899 --> 00:13:26,839
<font color="#E5E5E5">that's the kind of</font><font color="#CCCCCC"> functionality that VP</font>

334
00:13:23,119 --> 00:13:28,459
<font color="#CCCCCC">CI supports then we have the VM bus</font><font color="#E5E5E5"> and</font>

335
00:13:26,839 --> 00:13:30,889
we're going to talk more<font color="#CCCCCC"> about the VMS a</font>

336
00:13:28,459 --> 00:13:32,449
little bit later but VMs<font color="#E5E5E5"> is the high</font>

337
00:13:30,889 --> 00:13:34,429
speed communication<font color="#CCCCCC"> channel that</font>

338
00:13:32,449 --> 00:13:36,139
paravirtualized devices use to

339
00:13:34,429 --> 00:13:40,249
communicate<font color="#CCCCCC"> between the guests</font><font color="#E5E5E5"> and the</font>

340
00:13:36,139 --> 00:13:43,399
hosts we have<font color="#CCCCCC"> Wynn</font><font color="#E5E5E5"> HD r dot sis which is</font>

341
00:13:40,249 --> 00:13:45,709
the kernel hypervisor interface and this

342
00:13:43,399 --> 00:13:47,929
is effectively<font color="#CCCCCC"> the</font><font color="#E5E5E5"> kernel 32 of the</font>

343
00:13:45,709 --> 00:13:50,268
hypervisor world<font color="#E5E5E5"> it just</font><font color="#CCCCCC"> contains</font>

344
00:13:47,929 --> 00:13:52,789
<font color="#E5E5E5">functions that wrap hyper calls so that</font>

345
00:13:50,269 --> 00:13:55,249
it's more<font color="#CCCCCC"> convenient to do hyper calls</font>

346
00:13:52,789 --> 00:13:57,679
and last but certainly not least<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have</font>

347
00:13:55,249 --> 00:14:00,979
<font color="#E5E5E5">the virtualization infrastructure driver</font>

348
00:13:57,679 --> 00:14:02,749
or the<font color="#E5E5E5"> vid the vid is a pretty important</font>

349
00:14:00,979 --> 00:14:04,699
component for<font color="#E5E5E5"> hyper-v but it doesn't</font>

350
00:14:02,749 --> 00:14:07,789
actually contain an incredible amount<font color="#E5E5E5"> of</font>

351
00:14:04,699 --> 00:14:09,709
direct attack surface the vid is the

352
00:14:07,789 --> 00:14:12,109
primary driver<font color="#CCCCCC"> in hyper-v that</font>

353
00:14:09,709 --> 00:14:14,660
communicates with the hypervisor itself

354
00:14:12,109 --> 00:14:17,029
so if you need to<font color="#CCCCCC"> create a</font><font color="#E5E5E5"> new virtual</font>

355
00:14:14,660 --> 00:14:18,980
machine<font color="#CCCCCC"> it's ultimately going to be</font><font color="#E5E5E5"> the</font>

356
00:14:17,029 --> 00:14:20,869
vid<font color="#E5E5E5"> that makes the hyper calls to the</font>

357
00:14:18,980 --> 00:14:22,850
hypervisor<font color="#CCCCCC"> to tell it</font><font color="#E5E5E5"> to make that</font>

358
00:14:20,869 --> 00:14:24,889
virtualmin<font color="#E5E5E5"> that that new</font><font color="#CCCCCC"> virtual machine</font>

359
00:14:22,850 --> 00:14:27,799
the vid will be responsible for

360
00:14:24,889 --> 00:14:29,329
depositing physical memory into those

361
00:14:27,799 --> 00:14:30,970
partitions<font color="#CCCCCC"> so that the virtual machines</font>

362
00:14:29,329 --> 00:14:33,919
have physical memory they can<font color="#E5E5E5"> use to</font><font color="#CCCCCC"> run</font>

363
00:14:30,970 --> 00:14:35,600
<font color="#CCCCCC">the vid is also responsible for doing</font>

364
00:14:33,919 --> 00:14:37,879
<font color="#E5E5E5">things like registering with the</font>

365
00:14:35,600 --> 00:14:40,249
<font color="#CCCCCC">hypervisor</font><font color="#E5E5E5"> that some user mode component</font>

366
00:14:37,879 --> 00:14:43,100
wants to receive notifications<font color="#CCCCCC"> when a</font>

367
00:14:40,249 --> 00:14:45,410
particular<font color="#E5E5E5"> i/o port is accessed so all</font>

368
00:14:43,100 --> 00:14:47,899
of<font color="#E5E5E5"> this state keeping is really done in</font>

369
00:14:45,410 --> 00:14:50,868
the vid<font color="#E5E5E5"> even though the vid isn't really</font>

370
00:14:47,899 --> 00:14:53,209
direct attack surface now on the user

371
00:14:50,869 --> 00:14:55,699
mode side of things hyper-v has a number

372
00:14:53,209 --> 00:14:57,349
<font color="#E5E5E5">of processes</font><font color="#CCCCCC"> that run</font><font color="#E5E5E5"> but from the guest</font>

373
00:14:55,699 --> 00:14:59,959
a<font color="#E5E5E5"> host attack surface perspective</font>

374
00:14:57,350 --> 00:15:02,059
<font color="#E5E5E5">there's only one process that's super</font>

375
00:14:59,959 --> 00:15:06,518
<font color="#E5E5E5">super important and that is the</font><font color="#CCCCCC"> VM</font>

376
00:15:02,059 --> 00:15:08,719
worker process or VM wp1 really cool

377
00:15:06,519 --> 00:15:11,929
<font color="#CCCCCC">characteristic of the</font><font color="#E5E5E5"> VM worker process</font>

378
00:15:08,720 --> 00:15:13,909
is that<font color="#E5E5E5"> there is</font><font color="#CCCCCC"> one worker process per</font>

379
00:15:11,929 --> 00:15:16,459
virtual<font color="#E5E5E5"> machine running on the system</font>

380
00:15:13,909 --> 00:15:18,739
and what this means<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that if you</font>

381
00:15:16,459 --> 00:15:21,560
<font color="#E5E5E5">manage</font><font color="#CCCCCC"> to find</font><font color="#E5E5E5"> a denial of service bug</font>

382
00:15:18,739 --> 00:15:23,480
<font color="#CCCCCC">in code that's in the</font><font color="#E5E5E5"> VM worker process</font>

383
00:15:21,560 --> 00:15:26,869
you'll be able to crash the<font color="#E5E5E5"> VM worker</font>

384
00:15:23,480 --> 00:15:30,110
process but you won't be<font color="#E5E5E5"> able to crash</font>

385
00:15:26,870 --> 00:15:31,670
the entire<font color="#E5E5E5"> host operating</font><font color="#CCCCCC"> system which</font>

386
00:15:30,110 --> 00:15:34,970
means that that<font color="#CCCCCC"> denial-of-service bug</font>

387
00:15:31,670 --> 00:15:36,829
will<font color="#E5E5E5"> only denial-of-service your</font><font color="#CCCCCC"> VM</font><font color="#E5E5E5"> it's</font>

388
00:15:34,970 --> 00:15:38,360
effectively<font color="#E5E5E5"> a self boss it doesn't</font>

389
00:15:36,830 --> 00:15:40,160
affect anyone<font color="#E5E5E5"> else running on the system</font>

390
00:15:38,360 --> 00:15:41,870
so<font color="#E5E5E5"> that's one great reason that we</font>

391
00:15:40,160 --> 00:15:43,520
really like<font color="#CCCCCC"> to put code</font><font color="#E5E5E5"> in the VM worker</font>

392
00:15:41,870 --> 00:15:46,550
process<font color="#CCCCCC"> it makes the</font><font color="#E5E5E5"> whole system more</font>

393
00:15:43,520 --> 00:15:49,100
<font color="#E5E5E5">robust now inside of the VM worker</font>

394
00:15:46,550 --> 00:15:51,439
process is where<font color="#CCCCCC"> basically everything</font>

395
00:15:49,100 --> 00:15:53,360
lives that hasn't been explicitly called

396
00:15:51,440 --> 00:15:55,700
out as either being<font color="#CCCCCC"> a hypervisor</font><font color="#E5E5E5"> or</font>

397
00:15:53,360 --> 00:15:58,460
kernel mode<font color="#CCCCCC"> component</font><font color="#E5E5E5"> this is where all</font>

398
00:15:55,700 --> 00:16:00,050
<font color="#CCCCCC">of the virtual devices live</font><font color="#E5E5E5"> this is</font>

399
00:15:58,460 --> 00:16:02,150
where<font color="#CCCCCC"> all of</font><font color="#E5E5E5"> the integration components</font>

400
00:16:00,050 --> 00:16:03,890
live<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> where if you're running</font>

401
00:16:02,150 --> 00:16:05,660
<font color="#E5E5E5">from container this is</font><font color="#CCCCCC"> where the SMB</font>

402
00:16:03,890 --> 00:16:07,850
server or plan<font color="#CCCCCC"> nine file server lives</font>

403
00:16:05,660 --> 00:16:10,010
<font color="#E5E5E5">and then there's also a bunch</font><font color="#CCCCCC"> of what I</font>

404
00:16:07,850 --> 00:16:12,440
would just characterize as general

405
00:16:10,010 --> 00:16:15,740
machinery<font color="#E5E5E5"> that runs inside of the worker</font>

406
00:16:12,440 --> 00:16:19,040
process<font color="#CCCCCC"> this is stuff that</font><font color="#E5E5E5"> maybe makes a</font>

407
00:16:15,740 --> 00:16:21,440
<font color="#CCCCCC">V devs life easier for example if a</font>

408
00:16:19,040 --> 00:16:23,750
virtual<font color="#E5E5E5"> device wants to</font><font color="#CCCCCC"> register for</font>

409
00:16:21,440 --> 00:16:26,089
notifications when a particular<font color="#CCCCCC"> IO port</font>

410
00:16:23,750 --> 00:16:28,820
is hit<font color="#E5E5E5"> that virtual device will call</font>

411
00:16:26,089 --> 00:16:32,390
<font color="#CCCCCC">into this sub component in the worker</font>

412
00:16:28,820 --> 00:16:34,520
process called<font color="#E5E5E5"> the</font><font color="#CCCCCC"> VND and the</font><font color="#E5E5E5"> VM D will</font>

413
00:16:32,390 --> 00:16:36,860
ultimately communicate with the vid in

414
00:16:34,520 --> 00:16:38,390
the draw in the kernel<font color="#E5E5E5"> and tell the vid</font>

415
00:16:36,860 --> 00:16:43,339
that it wants<font color="#E5E5E5"> to have this notification</font>

416
00:16:38,390 --> 00:16:45,560
made so by doing this<font color="#E5E5E5"> the virtual</font>

417
00:16:43,339 --> 00:16:47,540
devices<font color="#E5E5E5"> don't need to all individually</font>

418
00:16:45,560 --> 00:16:49,579
talk directly to kernel components

419
00:16:47,540 --> 00:16:50,959
directly to the vid<font color="#E5E5E5"> they can just talk</font>

420
00:16:49,580 --> 00:16:52,780
<font color="#CCCCCC">to the central component in the worker</font>

421
00:16:50,960 --> 00:16:55,700
process and it will<font color="#E5E5E5"> do things for them</font>

422
00:16:52,780 --> 00:16:57,890
now some of you might<font color="#CCCCCC"> be</font><font color="#E5E5E5"> wondering this</font>

423
00:16:55,700 --> 00:16:59,660
<font color="#E5E5E5">is all great</font><font color="#CCCCCC"> but how do I actually talk</font>

424
00:16:57,890 --> 00:17:02,360
to<font color="#E5E5E5"> these various</font><font color="#CCCCCC"> components</font><font color="#E5E5E5"> how do I</font>

425
00:16:59,660 --> 00:17:04,490
talk<font color="#CCCCCC"> to the VM switch</font><font color="#E5E5E5"> how do I know how</font>

426
00:17:02,360 --> 00:17:07,610
<font color="#E5E5E5">to speak the VM bus protocol and I've</font>

427
00:17:04,490 --> 00:17:09,530
got awesome news for<font color="#CCCCCC"> you since Linux</font><font color="#E5E5E5"> the</font>

428
00:17:07,609 --> 00:17:13,969
Linux operating system<font color="#CCCCCC"> can run as an</font>

429
00:17:09,530 --> 00:17:15,290
<font color="#E5E5E5">enlightened hyper-v guest all of the</font>

430
00:17:13,970 --> 00:17:17,660
source<font color="#E5E5E5"> code for this stuff the</font>

431
00:17:15,290 --> 00:17:18,889
client-side source code is checked<font color="#E5E5E5"> into</font>

432
00:17:17,660 --> 00:17:20,900
<font color="#CCCCCC">the Linux source tree</font>

433
00:17:18,890 --> 00:17:22,160
so if you want to<font color="#E5E5E5"> know what a VM bus</font>

434
00:17:20,900 --> 00:17:24,770
client looks like and you<font color="#E5E5E5"> want to know</font>

435
00:17:22,160 --> 00:17:26,060
how<font color="#CCCCCC"> that protocol works</font><font color="#E5E5E5"> you can just go</font>

436
00:17:24,770 --> 00:17:27,740
<font color="#E5E5E5">and</font><font color="#CCCCCC"> look in</font><font color="#E5E5E5"> the Linux source tree and</font>

437
00:17:26,060 --> 00:17:29,629
the VM bus protocol is implemented<font color="#E5E5E5"> there</font>

438
00:17:27,740 --> 00:17:31,490
if you want to know how to talk<font color="#CCCCCC"> to the</font>

439
00:17:29,630 --> 00:17:33,590
VM switch you can<font color="#E5E5E5"> just</font><font color="#CCCCCC"> go and look</font><font color="#E5E5E5"> in</font>

440
00:17:31,490 --> 00:17:34,850
the<font color="#E5E5E5"> Linux source tree and we have a VM</font>

441
00:17:33,590 --> 00:17:36,889
switch client that's

442
00:17:34,850 --> 00:17:42,379
into<font color="#E5E5E5"> Linux so it's all there waiting</font><font color="#CCCCCC"> for</font>

443
00:17:36,889 --> 00:17:44,330
<font color="#E5E5E5">you all right now as much</font><font color="#CCCCCC"> as I would</font>

444
00:17:42,380 --> 00:17:46,039
<font color="#E5E5E5">love to just describe every single</font>

445
00:17:44,330 --> 00:17:47,990
<font color="#E5E5E5">different component that hyper-v has</font>

446
00:17:46,039 --> 00:17:49,730
that the<font color="#CCCCCC"> tax surface</font><font color="#E5E5E5"> we don't have time</font>

447
00:17:47,990 --> 00:17:51,620
<font color="#E5E5E5">to do that and so I thought it would be</font>

448
00:17:49,730 --> 00:17:53,870
more useful<font color="#CCCCCC"> to walk everyone through</font>

449
00:17:51,620 --> 00:17:55,879
what some of<font color="#E5E5E5"> these communication</font>

450
00:17:53,870 --> 00:17:57,709
<font color="#CCCCCC">channels look like</font><font color="#E5E5E5"> between the guest and</font>

451
00:17:55,880 --> 00:18:00,320
the<font color="#CCCCCC"> host</font><font color="#E5E5E5"> so that you can use this</font>

452
00:17:57,710 --> 00:18:01,820
<font color="#E5E5E5">information to go and find all of the</font>

453
00:18:00,320 --> 00:18:03,889
<font color="#E5E5E5">different pieces of attack surface in</font>

454
00:18:01,820 --> 00:18:05,240
hyper-v<font color="#E5E5E5"> so we'll start with</font><font color="#CCCCCC"> the</font>

455
00:18:03,889 --> 00:18:06,769
hypervisor but we're not<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> spend</font>

456
00:18:05,240 --> 00:18:08,600
too much time<font color="#E5E5E5"> here because as I've</font><font color="#CCCCCC"> said</font>

457
00:18:06,769 --> 00:18:11,330
before<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> not where most of the</font>

458
00:18:08,600 --> 00:18:14,000
interesting<font color="#E5E5E5"> attack surfaces the</font>

459
00:18:11,330 --> 00:18:15,949
hypervisors most direct communication

460
00:18:14,000 --> 00:18:18,679
method with the guests<font color="#E5E5E5"> are hyper calls</font>

461
00:18:15,950 --> 00:18:21,080
<font color="#E5E5E5">there are two ways really that hyper</font>

462
00:18:18,679 --> 00:18:22,669
calls can have parameters<font color="#CCCCCC"> pass to them</font>

463
00:18:21,080 --> 00:18:25,549
you can<font color="#E5E5E5"> either put the</font><font color="#CCCCCC"> parameters</font>

464
00:18:22,669 --> 00:18:29,480
directly<font color="#E5E5E5"> in registers or you can pass a</font>

465
00:18:25,549 --> 00:18:31,820
address<font color="#CCCCCC"> a guest physical address</font><font color="#E5E5E5"> to some</font>

466
00:18:29,480 --> 00:18:33,950
fifth<font color="#E5E5E5"> guess physical memory and the</font>

467
00:18:31,820 --> 00:18:37,399
hypervisor will go and do<font color="#E5E5E5"> processing on</font>

468
00:18:33,950 --> 00:18:39,019
<font color="#CCCCCC">that physical</font><font color="#E5E5E5"> memory</font><font color="#CCCCCC"> there's a very</font>

469
00:18:37,399 --> 00:18:41,449
limited<font color="#E5E5E5"> set of hyper calls that are</font>

470
00:18:39,019 --> 00:18:45,789
exposed<font color="#E5E5E5"> to guests it's mainly to</font><font color="#CCCCCC"> do</font>

471
00:18:41,450 --> 00:18:48,259
things like<font color="#E5E5E5"> faster enlightened TLB flush</font>

472
00:18:45,789 --> 00:18:51,620
<font color="#E5E5E5">but there's no hyper calls that would do</font>

473
00:18:48,259 --> 00:18:53,000
like device<font color="#E5E5E5"> emulation for example you</font>

474
00:18:51,620 --> 00:18:56,149
can<font color="#E5E5E5"> also</font><font color="#CCCCCC"> communicate with</font><font color="#E5E5E5"> the hypervisor</font>

475
00:18:53,000 --> 00:18:57,830
somewhat indirectly through faults<font color="#E5E5E5"> so if</font>

476
00:18:56,149 --> 00:19:00,018
your virtual machine has<font color="#E5E5E5"> a triple fault</font>

477
00:18:57,830 --> 00:19:02,899
<font color="#E5E5E5">that will end up being handled</font><font color="#CCCCCC"> by the</font>

478
00:19:00,019 --> 00:19:04,850
<font color="#E5E5E5">hypervisor</font><font color="#CCCCCC"> if there is an</font><font color="#E5E5E5"> extended page</font>

479
00:19:02,899 --> 00:19:07,309
table fault<font color="#CCCCCC"> you try to access some</font>

480
00:19:04,850 --> 00:19:09,918
physical memory<font color="#E5E5E5"> that is not mapped in</font>

481
00:19:07,309 --> 00:19:12,320
the EPT<font color="#E5E5E5"> that will trigger an</font><font color="#CCCCCC"> apt fault</font>

482
00:19:09,919 --> 00:19:14,090
<font color="#CCCCCC">and this is actually how mm</font><font color="#E5E5E5"> IO can be</font>

483
00:19:12,320 --> 00:19:15,168
<font color="#CCCCCC">implemented</font><font color="#E5E5E5"> in the hypervisor</font><font color="#CCCCCC"> the</font>

484
00:19:14,090 --> 00:19:16,820
<font color="#E5E5E5">hypervisor can see that you're</font>

485
00:19:15,169 --> 00:19:19,820
attempting<font color="#CCCCCC"> to access some physical</font>

486
00:19:16,820 --> 00:19:22,639
memory page that is marked as<font color="#CCCCCC"> being an</font>

487
00:19:19,820 --> 00:19:24,110
<font color="#E5E5E5">MMA</font><font color="#CCCCCC"> o emulated range and so when it</font>

488
00:19:22,639 --> 00:19:25,699
handles that fault it knows oh I

489
00:19:24,110 --> 00:19:28,639
actually just<font color="#CCCCCC"> need to pass this</font><font color="#E5E5E5"> on to</font>

490
00:19:25,700 --> 00:19:30,080
the vid to do processing you can<font color="#E5E5E5"> also</font>

491
00:19:28,639 --> 00:19:32,389
indirectly<font color="#E5E5E5"> communicate with the</font>

492
00:19:30,080 --> 00:19:35,210
hypervisor<font color="#E5E5E5"> by trying to execute certain</font>

493
00:19:32,389 --> 00:19:37,189
instructions<font color="#E5E5E5"> like CPU ID or as mentioned</font>

494
00:19:35,210 --> 00:19:39,320
before<font color="#E5E5E5"> the in out instruction for doing</font>

495
00:19:37,190 --> 00:19:41,149
<font color="#CCCCCC">io port reads and writes</font><font color="#E5E5E5"> the hypervisor</font>

496
00:19:39,320 --> 00:19:43,129
will intercept attempts to execute those

497
00:19:41,149 --> 00:19:44,629
instructions<font color="#CCCCCC"> and</font><font color="#E5E5E5"> will end up emulating</font>

498
00:19:43,129 --> 00:19:45,949
<font color="#E5E5E5">them either directly in the hypervisor</font>

499
00:19:44,629 --> 00:19:49,340
<font color="#E5E5E5">or it will pass it</font>

500
00:19:45,950 --> 00:19:51,080
<font color="#E5E5E5">to the</font><font color="#CCCCCC"> hosts do emulation</font><font color="#E5E5E5"> similarly you</font>

501
00:19:49,340 --> 00:19:53,929
<font color="#E5E5E5">can do the same thing for certain</font>

502
00:19:51,080 --> 00:19:55,939
<font color="#CCCCCC">privilege register accesses so</font><font color="#E5E5E5"> you can</font>

503
00:19:53,930 --> 00:19:58,370
intercept<font color="#CCCCCC"> guest attempts to write to the</font>

504
00:19:55,940 --> 00:20:00,800
<font color="#CCCCCC">cr4</font><font color="#E5E5E5"> register for example or to MSRs</font>

505
00:19:58,370 --> 00:20:02,510
<font color="#E5E5E5">and the last one I'm going to</font><font color="#CCCCCC"> mention</font>

506
00:20:00,800 --> 00:20:03,919
<font color="#E5E5E5">just</font><font color="#CCCCCC"> because you might run into</font><font color="#E5E5E5"> this and</font>

507
00:20:02,510 --> 00:20:07,070
end up wondering what the heck<font color="#E5E5E5"> you're</font>

508
00:20:03,920 --> 00:20:09,380
looking at our overlay pages<font color="#E5E5E5"> an overlay</font>

509
00:20:07,070 --> 00:20:12,439
page is not really guest a<font color="#E5E5E5"> host attack</font>

510
00:20:09,380 --> 00:20:14,960
surface<font color="#E5E5E5"> it's just a way that the the</font>

511
00:20:12,440 --> 00:20:17,150
host or<font color="#CCCCCC"> the hypervisor</font><font color="#E5E5E5"> can forcibly map</font>

512
00:20:14,960 --> 00:20:20,780
some page of<font color="#E5E5E5"> memory into</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> host or in</font>

513
00:20:17,150 --> 00:20:22,790
to the guests<font color="#CCCCCC"> physical address space one</font>

514
00:20:20,780 --> 00:20:25,910
reason that hyper-v does<font color="#E5E5E5"> this is it will</font>

515
00:20:22,790 --> 00:20:29,210
map in a page into all of<font color="#E5E5E5"> the guests</font>

516
00:20:25,910 --> 00:20:32,860
which<font color="#E5E5E5"> contains the instructions</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font>

517
00:20:29,210 --> 00:20:32,860
<font color="#CCCCCC">need to execute to make a hyper call</font>

518
00:20:33,580 --> 00:20:39,590
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> let's move on and talk about</font>

519
00:20:35,930 --> 00:20:41,300
<font color="#CCCCCC">kernel-mode</font><font color="#E5E5E5"> communication channels by</font>

520
00:20:39,590 --> 00:20:43,669
far the most important communication

521
00:20:41,300 --> 00:20:45,950
channel for<font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> mode is the VM bus</font>

522
00:20:43,670 --> 00:20:47,660
and once<font color="#CCCCCC"> again we're</font><font color="#E5E5E5"> going to talk</font><font color="#CCCCCC"> about</font>

523
00:20:45,950 --> 00:20:50,180
this in just<font color="#E5E5E5"> a couple of slides in more</font>

524
00:20:47,660 --> 00:20:52,070
detail<font color="#E5E5E5"> but suffice</font><font color="#CCCCCC"> to say this is a</font>

525
00:20:50,180 --> 00:20:53,960
<font color="#CCCCCC">high-speed communication channel and</font>

526
00:20:52,070 --> 00:20:56,090
this<font color="#E5E5E5"> is used by all of</font><font color="#CCCCCC"> the</font>

527
00:20:53,960 --> 00:20:57,490
virtualization service providers<font color="#E5E5E5"> that</font>

528
00:20:56,090 --> 00:21:00,470
live in the kernel

529
00:20:57,490 --> 00:21:02,990
there are also<font color="#E5E5E5"> extended hyper calls</font><font color="#CCCCCC"> an</font>

530
00:21:00,470 --> 00:21:05,210
extended hyper call<font color="#CCCCCC"> is simply a hyper</font>

531
00:21:02,990 --> 00:21:07,220
call that the hypervisor forwards

532
00:21:05,210 --> 00:21:09,680
directly down to<font color="#CCCCCC"> the vid to handle</font>

533
00:21:07,220 --> 00:21:11,660
there's very few<font color="#CCCCCC"> of</font><font color="#E5E5E5"> these and they don't</font>

534
00:21:09,680 --> 00:21:12,950
do things<font color="#E5E5E5"> that are super interesting but</font>

535
00:21:11,660 --> 00:21:14,530
you might run into<font color="#CCCCCC"> these you</font><font color="#E5E5E5"> might want</font>

536
00:21:12,950 --> 00:21:17,540
to look at<font color="#E5E5E5"> them</font><font color="#CCCCCC"> so I'm noting them here</font>

537
00:21:14,530 --> 00:21:19,340
we also have apertures<font color="#E5E5E5"> and these are</font>

538
00:21:17,540 --> 00:21:20,450
used primarily by user<font color="#E5E5E5"> modes so I'm</font>

539
00:21:19,340 --> 00:21:22,100
<font color="#E5E5E5">going to talk</font><font color="#CCCCCC"> about them more</font><font color="#E5E5E5"> on the</font>

540
00:21:20,450 --> 00:21:25,760
<font color="#CCCCCC">next slide</font><font color="#E5E5E5"> but it's also possible to</font><font color="#CCCCCC"> use</font>

541
00:21:22,100 --> 00:21:28,219
them in the kernel<font color="#E5E5E5"> and the kernel can</font>

542
00:21:25,760 --> 00:21:30,710
also be communicated<font color="#CCCCCC"> with somewhat</font>

543
00:21:28,220 --> 00:21:32,870
indirectly<font color="#E5E5E5"> once again through intercept</font>

544
00:21:30,710 --> 00:21:34,850
handling so if the hypervisor<font color="#E5E5E5"> receives</font>

545
00:21:32,870 --> 00:21:36,649
an intercept for some instruction that

546
00:21:34,850 --> 00:21:39,290
it needs<font color="#E5E5E5"> to emulate for example like an</font>

547
00:21:36,650 --> 00:21:42,590
<font color="#E5E5E5">i/o port right it will forward that on</font>

548
00:21:39,290 --> 00:21:44,659
<font color="#E5E5E5">down to the vid in the kernel and the</font>

549
00:21:42,590 --> 00:21:46,340
vid will look at that and decide where

550
00:21:44,660 --> 00:21:48,800
it needs<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be forwarded to or if it</font>

551
00:21:46,340 --> 00:21:50,990
just just be rejected<font color="#E5E5E5"> it's a decision</font>

552
00:21:48,800 --> 00:21:52,820
<font color="#CCCCCC">maker so it's not really direct attack</font>

553
00:21:50,990 --> 00:21:54,380
surface but<font color="#E5E5E5"> you will end up triggering</font>

554
00:21:52,820 --> 00:21:56,629
code paths in the

555
00:21:54,380 --> 00:22:01,520
and so it ends up<font color="#E5E5E5"> being somewhat of a</font>

556
00:21:56,630 --> 00:22:03,980
communication channel<font color="#E5E5E5"> and lastly we have</font>

557
00:22:01,520 --> 00:22:05,990
user mode now user mode is where all of

558
00:22:03,980 --> 00:22:07,460
<font color="#CCCCCC">the</font><font color="#E5E5E5"> device simulation happens so we end</font>

559
00:22:05,990 --> 00:22:09,590
up<font color="#E5E5E5"> having a lot more direct</font>

560
00:22:07,460 --> 00:22:12,590
communication channels in user<font color="#E5E5E5"> mode</font>

561
00:22:09,590 --> 00:22:15,889
components the<font color="#E5E5E5"> first one is IO</font><font color="#CCCCCC"> quartz</font>

562
00:22:12,590 --> 00:22:17,809
<font color="#E5E5E5">user mode components can</font><font color="#CCCCCC"> register that</font>

563
00:22:15,890 --> 00:22:20,539
<font color="#E5E5E5">they want to receive</font><font color="#CCCCCC"> notifications when</font>

564
00:22:17,809 --> 00:22:23,389
particular<font color="#CCCCCC"> IO ports are read or</font><font color="#E5E5E5"> written</font>

565
00:22:20,539 --> 00:22:26,260
and they can then<font color="#CCCCCC"> use that to do</font>

566
00:22:23,390 --> 00:22:28,580
<font color="#CCCCCC">Hardware emulation</font><font color="#E5E5E5"> and similarly</font>

567
00:22:26,260 --> 00:22:30,710
components<font color="#E5E5E5"> can register for</font>

568
00:22:28,580 --> 00:22:32,780
notifications when particular<font color="#E5E5E5"> physical</font>

569
00:22:30,710 --> 00:22:35,539
addresses<font color="#E5E5E5"> guest physical addresses are</font>

570
00:22:32,780 --> 00:22:39,860
read or written<font color="#CCCCCC"> to</font><font color="#E5E5E5"> and they can use that</font>

571
00:22:35,539 --> 00:22:42,860
<font color="#CCCCCC">to emulate mm IO access then we have the</font>

572
00:22:39,860 --> 00:22:45,049
<font color="#E5E5E5">VM bus the VM bus is also</font><font color="#CCCCCC"> used by user</font>

573
00:22:42,860 --> 00:22:47,658
mode components although it<font color="#E5E5E5"> had the</font>

574
00:22:45,049 --> 00:22:49,280
access happens to either<font color="#E5E5E5"> VM bus pipes or</font>

575
00:22:47,659 --> 00:22:52,700
<font color="#E5E5E5">VM bus sockets which we'll talk about in</font>

576
00:22:49,280 --> 00:22:56,289
<font color="#CCCCCC">a second then</font><font color="#E5E5E5"> we have apertures</font><font color="#CCCCCC"> in user</font>

577
00:22:52,700 --> 00:23:00,110
mode<font color="#E5E5E5"> now an aperture is how we describe</font>

578
00:22:56,289 --> 00:23:03,020
mapping<font color="#E5E5E5"> a guest physical address into</font>

579
00:23:00,110 --> 00:23:05,120
<font color="#CCCCCC">the virtual</font><font color="#E5E5E5"> address space of the</font><font color="#CCCCCC"> host so</font>

580
00:23:03,020 --> 00:23:07,220
in the case of<font color="#CCCCCC"> user mode</font><font color="#E5E5E5"> you map some</font>

581
00:23:05,120 --> 00:23:09,260
guest<font color="#E5E5E5"> physical address into the VM</font>

582
00:23:07,220 --> 00:23:11,690
worker processes virtual address space

583
00:23:09,260 --> 00:23:14,570
and this allows you<font color="#E5E5E5"> to read and write</font>

584
00:23:11,690 --> 00:23:17,480
that guest data<font color="#E5E5E5"> now you need to be super</font>

585
00:23:14,570 --> 00:23:19,789
<font color="#CCCCCC">careful when</font><font color="#E5E5E5"> you do this because the</font>

586
00:23:17,480 --> 00:23:21,530
memory<font color="#E5E5E5"> is still</font><font color="#CCCCCC"> mapped inside of the</font>

587
00:23:19,789 --> 00:23:23,539
guest<font color="#E5E5E5"> which means that while you're</font>

588
00:23:21,530 --> 00:23:25,580
doing<font color="#CCCCCC"> processing on that</font><font color="#E5E5E5"> memory</font><font color="#CCCCCC"> in the</font>

589
00:23:23,539 --> 00:23:27,049
host the guest can be going<font color="#CCCCCC"> and</font>

590
00:23:25,580 --> 00:23:29,210
modifying<font color="#CCCCCC"> that memory</font><font color="#E5E5E5"> from underneath</font>

591
00:23:27,049 --> 00:23:30,400
you so this<font color="#E5E5E5"> is an area where if you're</font>

592
00:23:29,210 --> 00:23:32,809
not<font color="#CCCCCC"> careful</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> end up with</font>

593
00:23:30,400 --> 00:23:35,600
dangerous double<font color="#E5E5E5"> fetch conditions and</font>

594
00:23:32,809 --> 00:23:38,960
the last one we have<font color="#CCCCCC"> here are read and</font>

595
00:23:35,600 --> 00:23:40,789
write notifications<font color="#CCCCCC"> now when I first</font><font color="#E5E5E5"> saw</font>

596
00:23:38,960 --> 00:23:42,500
these<font color="#E5E5E5"> I was fairly confused as to what</font>

597
00:23:40,789 --> 00:23:46,000
the difference was<font color="#CCCCCC"> between a read</font><font color="#E5E5E5"> and</font>

598
00:23:42,500 --> 00:23:48,799
write notification and just doing MMI oh

599
00:23:46,000 --> 00:23:50,120
there's one key difference<font color="#E5E5E5"> here</font><font color="#CCCCCC"> and that</font>

600
00:23:48,799 --> 00:23:51,918
is<font color="#E5E5E5"> that while read and write</font>

601
00:23:50,120 --> 00:23:53,689
notifications<font color="#E5E5E5"> do allow you to get</font>

602
00:23:51,919 --> 00:23:57,200
notified when memory is read or written

603
00:23:53,690 --> 00:23:59,480
<font color="#CCCCCC">to just like</font><font color="#E5E5E5"> MMI oh it does not advance</font>

604
00:23:57,200 --> 00:24:02,030
<font color="#E5E5E5">the instruction pointer which means that</font>

605
00:23:59,480 --> 00:24:04,669
you cannot do emulation you cannot

606
00:24:02,030 --> 00:24:06,260
provide the<font color="#CCCCCC"> guest with some value that</font>

607
00:24:04,669 --> 00:24:07,940
they are<font color="#E5E5E5"> trying to read you</font>

608
00:24:06,260 --> 00:24:09,830
just simply notified that the guest is

609
00:24:07,940 --> 00:24:12,140
indeed reading from this page of memory

610
00:24:09,830 --> 00:24:13,820
<font color="#CCCCCC">and one reason</font><font color="#E5E5E5"> why you might want</font><font color="#CCCCCC"> to use</font>

611
00:24:12,140 --> 00:24:16,370
functionality<font color="#E5E5E5"> like this is if you're</font>

612
00:24:13,820 --> 00:24:18,110
<font color="#CCCCCC">doing live migration you're copying all</font>

613
00:24:16,370 --> 00:24:20,689
of<font color="#CCCCCC"> the guests physical memory</font><font color="#E5E5E5"> over the</font>

614
00:24:18,110 --> 00:24:22,550
wire<font color="#CCCCCC"> to another server and at some point</font>

615
00:24:20,690 --> 00:24:24,950
you just<font color="#E5E5E5"> fully treat you just transfer</font>

616
00:24:22,550 --> 00:24:26,720
execution over<font color="#E5E5E5"> to that host but the</font>

617
00:24:24,950 --> 00:24:29,120
virtual machine is<font color="#CCCCCC"> running while</font><font color="#E5E5E5"> you're</font>

618
00:24:26,720 --> 00:24:31,820
copying<font color="#E5E5E5"> this memory over and so hyper-v</font>

619
00:24:29,120 --> 00:24:34,370
needs to be aware if some page of memory

620
00:24:31,820 --> 00:24:37,280
<font color="#E5E5E5">changes in between that copy operation</font>

621
00:24:34,370 --> 00:24:39,739
<font color="#E5E5E5">and execution being transferred over to</font>

622
00:24:37,280 --> 00:24:41,750
the new host<font color="#E5E5E5"> and so hyper-v can place a</font>

623
00:24:39,740 --> 00:24:44,660
write notification on a block<font color="#E5E5E5"> of memory</font>

624
00:24:41,750 --> 00:24:47,600
<font color="#E5E5E5">after</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> been copied and then hyper-v</font>

625
00:24:44,660 --> 00:24:49,370
can mark that<font color="#E5E5E5"> memory as dirty</font><font color="#CCCCCC"> if it gets</font>

626
00:24:47,600 --> 00:24:51,230
written to<font color="#E5E5E5"> and then hyper-v knows oh</font>

627
00:24:49,370 --> 00:24:53,780
before<font color="#CCCCCC"> I transfer execution over</font>

628
00:24:51,230 --> 00:24:55,940
I need to recopy these<font color="#E5E5E5"> pages of memory</font>

629
00:24:53,780 --> 00:24:59,870
<font color="#E5E5E5">so that's why we have read and</font><font color="#CCCCCC"> write</font>

630
00:24:55,940 --> 00:25:01,400
notifications<font color="#E5E5E5"> all right now I promised</font>

631
00:24:59,870 --> 00:25:03,739
that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> would talk</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> VM bus and</font>

632
00:25:01,400 --> 00:25:06,080
<font color="#E5E5E5">that's what we're gonna do now VM bus is</font>

633
00:25:03,740 --> 00:25:09,050
a communication channel<font color="#CCCCCC"> that is built</font>

634
00:25:06,080 --> 00:25:11,840
around shared memory it all starts with

635
00:25:09,050 --> 00:25:14,240
the<font color="#E5E5E5"> host making a channel offer to the</font>

636
00:25:11,840 --> 00:25:16,610
<font color="#E5E5E5">guest when the guest accepts that</font>

637
00:25:14,240 --> 00:25:18,980
channel offer<font color="#CCCCCC"> the guest will indicate to</font>

638
00:25:16,610 --> 00:25:21,379
<font color="#E5E5E5">the host a set of guest physical</font>

639
00:25:18,980 --> 00:25:24,920
addresses that the<font color="#E5E5E5"> guest would like to</font>

640
00:25:21,380 --> 00:25:26,420
use to<font color="#CCCCCC"> establish that</font><font color="#E5E5E5"> VM bus</font><font color="#CCCCCC"> channel the</font>

641
00:25:24,920 --> 00:25:29,090
<font color="#E5E5E5">host will take those guest physical</font>

642
00:25:26,420 --> 00:25:31,640
addresses and map them into<font color="#E5E5E5"> its virtual</font>

643
00:25:29,090 --> 00:25:33,590
address space and so now the<font color="#CCCCCC"> situation</font>

644
00:25:31,640 --> 00:25:37,160
you're in<font color="#CCCCCC"> is one where both</font><font color="#E5E5E5"> the guest</font>

645
00:25:33,590 --> 00:25:40,159
and<font color="#CCCCCC"> the host have a virtual address</font>

646
00:25:37,160 --> 00:25:42,620
range that<font color="#CCCCCC"> map's the</font><font color="#E5E5E5"> exact same physical</font>

647
00:25:40,160 --> 00:25:44,900
memory<font color="#E5E5E5"> so the guest can write some data</font>

648
00:25:42,620 --> 00:25:46,520
into<font color="#E5E5E5"> this memory</font><font color="#CCCCCC"> and then signal</font><font color="#E5E5E5"> to the</font>

649
00:25:44,900 --> 00:25:48,860
<font color="#E5E5E5">host that there's a packet waiting and</font>

650
00:25:46,520 --> 00:25:52,220
the host can<font color="#E5E5E5"> go and</font><font color="#CCCCCC"> directly access</font><font color="#E5E5E5"> that</font>

651
00:25:48,860 --> 00:25:54,649
packet once<font color="#E5E5E5"> again the Linux integration</font>

652
00:25:52,220 --> 00:25:56,150
drivers fully implement<font color="#E5E5E5"> the VM bus so if</font>

653
00:25:54,650 --> 00:25:57,830
you want the nitty-gritty details of how

654
00:25:56,150 --> 00:26:00,080
the protocol<font color="#CCCCCC"> works you can go check it</font>

655
00:25:57,830 --> 00:26:01,970
out there however<font color="#E5E5E5"> you</font><font color="#CCCCCC"> don't actually</font>

656
00:26:00,080 --> 00:26:04,340
need to<font color="#CCCCCC"> know how the protocol works to</font>

657
00:26:01,970 --> 00:26:07,190
attack components that use<font color="#E5E5E5"> VM bus</font>

658
00:26:04,340 --> 00:26:09,919
because you can<font color="#E5E5E5"> just go and modify the</font>

659
00:26:07,190 --> 00:26:12,650
client implementation for the components

660
00:26:09,920 --> 00:26:15,110
<font color="#E5E5E5">like for virtual storage you can modify</font>

661
00:26:12,650 --> 00:26:16,460
the virtual storage client and the

662
00:26:15,110 --> 00:26:18,050
virtual storage client<font color="#CCCCCC"> in Linux will</font>

663
00:26:16,460 --> 00:26:19,789
just use VM bus automatically for you

664
00:26:18,050 --> 00:26:23,720
you can<font color="#E5E5E5"> just</font><font color="#CCCCCC"> ignore the implementation</font>

665
00:26:19,789 --> 00:26:25,908
details of<font color="#E5E5E5"> it now no components in</font>

666
00:26:23,720 --> 00:26:28,009
hyper-v actually<font color="#E5E5E5"> directly</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> VM bus</font>

667
00:26:25,909 --> 00:26:30,169
<font color="#CCCCCC">they all go through</font><font color="#E5E5E5"> abstraction layers</font>

668
00:26:28,009 --> 00:26:31,970
in the case of the kernel<font color="#E5E5E5"> they go</font>

669
00:26:30,169 --> 00:26:34,669
<font color="#E5E5E5">through the kernel</font><font color="#CCCCCC"> mode client library</font>

670
00:26:31,970 --> 00:26:36,889
or<font color="#E5E5E5"> km CL and in the case of user mode</font>

671
00:26:34,669 --> 00:26:43,100
they go through either<font color="#E5E5E5"> the embassy</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> p--</font>

672
00:26:36,889 --> 00:26:45,139
<font color="#CCCCCC">Saur</font><font color="#E5E5E5"> vm bus sockets km CL which is what</font>

673
00:26:43,100 --> 00:26:47,689
all<font color="#CCCCCC"> of the virtualization service</font>

674
00:26:45,139 --> 00:26:50,269
providers use is really<font color="#E5E5E5"> built</font><font color="#CCCCCC"> around</font>

675
00:26:47,690 --> 00:26:52,729
callbacks<font color="#E5E5E5"> when you establish</font><font color="#CCCCCC"> a PM bus</font>

676
00:26:50,269 --> 00:26:54,710
<font color="#E5E5E5">channel you provide it with a number of</font>

677
00:26:52,729 --> 00:26:57,229
function<font color="#CCCCCC"> pointers to call</font><font color="#E5E5E5"> when certain</font>

678
00:26:54,710 --> 00:26:59,149
<font color="#CCCCCC">events happen and predictably</font><font color="#E5E5E5"> one of</font>

679
00:26:57,229 --> 00:27:00,559
those events<font color="#CCCCCC"> that</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> happen is you've</font>

680
00:26:59,149 --> 00:27:02,178
<font color="#CCCCCC">just received</font><font color="#E5E5E5"> a message from the</font><font color="#CCCCCC"> other</font>

681
00:27:00,559 --> 00:27:06,229
<font color="#E5E5E5">end of the KMC l p--</font>

682
00:27:02,179 --> 00:27:08,570
pipe now when that message is received

683
00:27:06,229 --> 00:27:10,940
<font color="#CCCCCC">even though the message</font><font color="#E5E5E5"> came</font><font color="#CCCCCC"> in over the</font>

684
00:27:08,570 --> 00:27:13,639
vm bus inside<font color="#E5E5E5"> of this shared memory</font>

685
00:27:10,940 --> 00:27:15,889
region we actually copy that data

686
00:27:13,639 --> 00:27:18,349
<font color="#CCCCCC">outside of the shared memory region and</font>

687
00:27:15,889 --> 00:27:21,228
into the kernel pool before<font color="#E5E5E5"> delivering</font>

688
00:27:18,349 --> 00:27:23,539
it to<font color="#E5E5E5"> the KMC</font><font color="#CCCCCC"> l client the reason we do</font>

689
00:27:21,229 --> 00:27:25,940
<font color="#E5E5E5">this is because we want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> avoid double</font>

690
00:27:23,539 --> 00:27:27,609
fetch conditions<font color="#E5E5E5"> so we make a safe copy</font>

691
00:27:25,940 --> 00:27:30,349
of the data before<font color="#E5E5E5"> passing it along</font>

692
00:27:27,609 --> 00:27:32,478
however there is one<font color="#E5E5E5"> way</font><font color="#CCCCCC"> that this can</font>

693
00:27:30,349 --> 00:27:37,399
be done<font color="#E5E5E5"> unsafely and that is with the</font>

694
00:27:32,479 --> 00:27:39,979
<font color="#E5E5E5">external data mechanism guests when they</font>

695
00:27:37,399 --> 00:27:42,830
send a<font color="#CCCCCC"> vm bus packet</font><font color="#E5E5E5"> over</font><font color="#CCCCCC"> the wire can</font>

696
00:27:39,979 --> 00:27:45,649
attach a<font color="#E5E5E5"> GPA</font><font color="#CCCCCC"> dl which is that</font><font color="#E5E5E5"> guest</font>

697
00:27:42,830 --> 00:27:47,720
<font color="#E5E5E5">physical address descriptor list to the</font>

698
00:27:45,649 --> 00:27:49,849
packet<font color="#E5E5E5"> that they're sending this is just</font>

699
00:27:47,720 --> 00:27:51,409
it contains a list of<font color="#CCCCCC"> additional</font><font color="#E5E5E5"> guest</font>

700
00:27:49,849 --> 00:27:54,320
physical addresses that contain

701
00:27:51,409 --> 00:27:57,830
<font color="#CCCCCC">additional data for processing</font><font color="#E5E5E5"> the host</font>

702
00:27:54,320 --> 00:28:00,019
<font color="#E5E5E5">has to map this GPA</font><font color="#CCCCCC"> L explicitly but</font>

703
00:27:57,830 --> 00:28:02,178
once it<font color="#E5E5E5"> Maps it and starts accessing it</font>

704
00:28:00,019 --> 00:28:04,429
<font color="#E5E5E5">the host needs to be very careful</font><font color="#CCCCCC"> to</font>

705
00:28:02,179 --> 00:28:06,649
<font color="#CCCCCC">avoid double fetch situations because</font>

706
00:28:04,429 --> 00:28:12,559
that memory is mapped in both the guest

707
00:28:06,649 --> 00:28:14,238
and the<font color="#CCCCCC"> host at the same time now at the</font>

708
00:28:12,559 --> 00:28:16,580
<font color="#E5E5E5">end of this slide deck in the appendix</font>

709
00:28:14,239 --> 00:28:18,649
and<font color="#E5E5E5"> I'm going to publish the slides we</font>

710
00:28:16,580 --> 00:28:20,570
have gone and documented<font color="#E5E5E5"> a whole bunch</font>

711
00:28:18,649 --> 00:28:22,939
of the<font color="#E5E5E5"> different interfaces that hyper-v</font>

712
00:28:20,570 --> 00:28:24,830
components use to do things like<font color="#CCCCCC"> make</font>

713
00:28:22,940 --> 00:28:27,649
channel offers<font color="#E5E5E5"> do i/o port reads and</font>

714
00:28:24,830 --> 00:28:29,509
writes etc so<font color="#E5E5E5"> that you know what sort of</font>

715
00:28:27,649 --> 00:28:31,580
symbols to<font color="#E5E5E5"> go and look</font><font color="#CCCCCC"> for if you want</font>

716
00:28:29,509 --> 00:28:33,440
to<font color="#CCCCCC"> find this attack surface this right</font>

717
00:28:31,580 --> 00:28:37,399
here is one example

718
00:28:33,440 --> 00:28:39,890
of how can CL is established<font color="#E5E5E5"> this</font>

719
00:28:37,400 --> 00:28:42,950
function highlighted in yellow is<font color="#E5E5E5"> the</font>

720
00:28:39,890 --> 00:28:45,860
function signature<font color="#E5E5E5"> for a km CL message</font>

721
00:28:42,950 --> 00:28:47,570
received<font color="#CCCCCC"> callback and there's two really</font>

722
00:28:45,860 --> 00:28:49,399
<font color="#E5E5E5">important parameters here there is the</font>

723
00:28:47,570 --> 00:28:52,240
buffer<font color="#E5E5E5"> and the buffer length</font><font color="#CCCCCC"> and</font>

724
00:28:49,400 --> 00:28:55,160
predictably<font color="#E5E5E5"> the buffer is a pointer to</font>

725
00:28:52,240 --> 00:28:57,410
<font color="#CCCCCC">guests supplied data</font><font color="#E5E5E5"> so this is fully</font>

726
00:28:55,160 --> 00:29:05,240
attacker control<font color="#E5E5E5"> and buffer length is</font>

727
00:28:57,410 --> 00:29:06,050
the<font color="#CCCCCC"> length of</font><font color="#E5E5E5"> that data all right so the</font>

728
00:29:05,240 --> 00:29:09,410
<font color="#CCCCCC">next channel we're going to talk about</font>

729
00:29:06,050 --> 00:29:13,760
<font color="#CCCCCC">are VM bus pipes this</font><font color="#E5E5E5"> is the primary way</font>

730
00:29:09,410 --> 00:29:15,800
that<font color="#E5E5E5"> user mode components use VM bus</font><font color="#CCCCCC"> VMs</font>

731
00:29:13,760 --> 00:29:18,379
pipes<font color="#E5E5E5"> once again start with the channel</font>

732
00:29:15,800 --> 00:29:21,139
offer there<font color="#E5E5E5"> are two functions which I've</font>

733
00:29:18,380 --> 00:29:23,060
documented here<font color="#E5E5E5"> that are used to make</font>

734
00:29:21,140 --> 00:29:26,900
that<font color="#E5E5E5"> channel offer and they return a</font>

735
00:29:23,060 --> 00:29:28,580
handle to a named<font color="#E5E5E5"> to a VM bus pipe the</font>

736
00:29:26,900 --> 00:29:31,340
way you interact<font color="#E5E5E5"> with the mbus pipes is</font>

737
00:29:28,580 --> 00:29:33,530
<font color="#CCCCCC">exactly the same as with normal named</font>

738
00:29:31,340 --> 00:29:35,449
pipes on<font color="#CCCCCC"> Windows you call a read file</font>

739
00:29:33,530 --> 00:29:36,680
and write file<font color="#E5E5E5"> or you can use IO</font>

740
00:29:35,450 --> 00:29:39,410
completion if you want to do

741
00:29:36,680 --> 00:29:41,330
asynchronous<font color="#E5E5E5"> operations and that when</font>

742
00:29:39,410 --> 00:29:43,160
you're<font color="#E5E5E5"> doing the asynchronous operations</font>

743
00:29:41,330 --> 00:29:44,689
hyper-v has some helper classes that

744
00:29:43,160 --> 00:29:46,220
they tend to use<font color="#E5E5E5"> which</font><font color="#CCCCCC"> I've noted here</font>

745
00:29:44,690 --> 00:29:48,260
so you'll<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to check that</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> if</font>

746
00:29:46,220 --> 00:29:52,090
<font color="#CCCCCC">you're trying to look</font><font color="#E5E5E5"> for components</font>

747
00:29:48,260 --> 00:29:55,879
that are using asynchronous<font color="#E5E5E5"> VM bus pipes</font>

748
00:29:52,090 --> 00:30:01,040
and finally I'm<font color="#CCCCCC"> going to talk briefly</font>

749
00:29:55,880 --> 00:30:03,620
<font color="#E5E5E5">about IO</font><font color="#CCCCCC"> quartz mm mm IO entry points IO</font>

750
00:30:01,040 --> 00:30:06,560
ports and mm IO ports<font color="#E5E5E5"> once again start</font>

751
00:30:03,620 --> 00:30:08,270
<font color="#E5E5E5">with a registration event so the</font>

752
00:30:06,560 --> 00:30:10,580
component will either say I want<font color="#E5E5E5"> to</font>

753
00:30:08,270 --> 00:30:13,340
receive a port notifications for<font color="#E5E5E5"> these</font>

754
00:30:10,580 --> 00:30:15,080
particular<font color="#E5E5E5"> IO ports</font><font color="#CCCCCC"> or I want</font><font color="#E5E5E5"> to receive</font>

755
00:30:13,340 --> 00:30:16,909
<font color="#CCCCCC">mmm</font><font color="#E5E5E5"> IO notifications for these</font>

756
00:30:15,080 --> 00:30:19,970
particular<font color="#CCCCCC"> guest physical address ranges</font>

757
00:30:16,910 --> 00:30:22,130
<font color="#E5E5E5">in the case of i/o ports whenever that</font>

758
00:30:19,970 --> 00:30:23,900
<font color="#E5E5E5">IO port is read or written</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> one of</font>

759
00:30:22,130 --> 00:30:25,730
these two functions noted here will be

760
00:30:23,900 --> 00:30:28,850
called it contains the<font color="#CCCCCC"> IO port address</font>

761
00:30:25,730 --> 00:30:30,170
<font color="#E5E5E5">the size of the access and a buffer</font>

762
00:30:28,850 --> 00:30:32,120
either containing the data being written

763
00:30:30,170 --> 00:30:34,090
or a buffer<font color="#CCCCCC"> that you need to populate</font>

764
00:30:32,120 --> 00:30:37,000
<font color="#E5E5E5">with</font><font color="#CCCCCC"> the data being read</font>

765
00:30:34,090 --> 00:30:39,550
and accordingly for<font color="#CCCCCC"> MMI oh there's</font>

766
00:30:37,000 --> 00:30:42,100
notify functions<font color="#E5E5E5"> there notify MMI</font><font color="#CCCCCC"> Oh</font>

767
00:30:39,550 --> 00:30:45,760
read notify<font color="#E5E5E5"> MMR right which do similar</font>

768
00:30:42,100 --> 00:30:48,189
things<font color="#E5E5E5"> now every V dev that uses IO</font>

769
00:30:45,760 --> 00:30:50,290
<font color="#CCCCCC">courts or</font><font color="#E5E5E5"> mm IO ends up implementing</font>

770
00:30:48,190 --> 00:30:52,330
these functions<font color="#E5E5E5"> so if you want to find</font>

771
00:30:50,290 --> 00:30:53,980
these entry points you can<font color="#E5E5E5"> just</font><font color="#CCCCCC"> open up</font>

772
00:30:52,330 --> 00:30:56,620
<font color="#CCCCCC">your debugger</font><font color="#E5E5E5"> attach it to VM worker</font>

773
00:30:53,980 --> 00:30:59,680
process and do a simple<font color="#CCCCCC"> search for any</font>

774
00:30:56,620 --> 00:31:02,889
component<font color="#E5E5E5"> that has notify</font><font color="#CCCCCC"> IO port</font><font color="#E5E5E5"> read</font>

775
00:30:59,680 --> 00:31:04,990
in you know in its symbols and you'll be

776
00:31:02,890 --> 00:31:08,350
able to find<font color="#CCCCCC"> all of the</font><font color="#E5E5E5"> V devs that</font>

777
00:31:04,990 --> 00:31:12,130
implement<font color="#CCCCCC"> io port</font><font color="#E5E5E5"> read emulation as an</font>

778
00:31:08,350 --> 00:31:14,080
example<font color="#CCCCCC"> alright so this wraps up my</font>

779
00:31:12,130 --> 00:31:15,940
portion<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> talk what I'm hoping</font><font color="#CCCCCC"> that</font>

780
00:31:14,080 --> 00:31:17,470
<font color="#CCCCCC">you got</font><font color="#E5E5E5"> from this is that hyper-v has a</font>

781
00:31:15,940 --> 00:31:20,860
number<font color="#CCCCCC"> of</font><font color="#E5E5E5"> services that it needs to</font>

782
00:31:17,470 --> 00:31:23,710
<font color="#CCCCCC">provide to the guest VMs</font><font color="#E5E5E5"> and there's a</font>

783
00:31:20,860 --> 00:31:26,139
number<font color="#CCCCCC"> of</font><font color="#E5E5E5"> entry</font><font color="#CCCCCC"> points which a guest VM</font>

784
00:31:23,710 --> 00:31:29,230
can use to trigger code different code

785
00:31:26,140 --> 00:31:30,940
paths in the hyper-v<font color="#E5E5E5"> hosts now</font><font color="#CCCCCC"> Nico</font><font color="#E5E5E5"> is</font>

786
00:31:29,230 --> 00:31:34,000
going to show us how<font color="#CCCCCC"> to apply this</font>

787
00:31:30,940 --> 00:31:36,390
knowledge<font color="#E5E5E5"> to</font><font color="#CCCCCC"> some real hyper-v bugs that</font>

788
00:31:34,000 --> 00:31:38,560
both we<font color="#CCCCCC"> and external people</font><font color="#E5E5E5"> have found</font>

789
00:31:36,390 --> 00:31:42,040
<font color="#E5E5E5">just to give you examples of how</font><font color="#CCCCCC"> to</font>

790
00:31:38,560 --> 00:31:44,429
actually<font color="#E5E5E5"> use this information yeah</font><font color="#CCCCCC"> thank</font>

791
00:31:42,040 --> 00:31:47,860
<font color="#CCCCCC">you Joe that was just super interesting</font>

792
00:31:44,430 --> 00:31:49,000
<font color="#CCCCCC">sorry</font><font color="#E5E5E5"> let's see if we can be a bit more</font>

793
00:31:47,860 --> 00:31:51,639
practical<font color="#CCCCCC"> No</font>

794
00:31:49,000 --> 00:31:53,620
so you know before<font color="#CCCCCC"> even</font><font color="#E5E5E5"> we thought about</font>

795
00:31:51,640 --> 00:31:56,980
<font color="#CCCCCC">doing that oh we were asking around</font><font color="#E5E5E5"> us</font>

796
00:31:53,620 --> 00:31:59,709
<font color="#CCCCCC">why it was so hard to find bugs in</font>

797
00:31:56,980 --> 00:32:03,460
hyper-v<font color="#E5E5E5"> and one of the most common</font>

798
00:31:59,710 --> 00:32:05,320
replies that<font color="#CCCCCC"> we have was</font><font color="#E5E5E5"> Nico you don't</font>

799
00:32:03,460 --> 00:32:07,270
<font color="#E5E5E5">realize you've got access</font><font color="#CCCCCC"> to your bug</font>

800
00:32:05,320 --> 00:32:09,010
database you've got access<font color="#E5E5E5"> to</font><font color="#CCCCCC"> our source</font>

801
00:32:07,270 --> 00:32:11,590
<font color="#E5E5E5">code we</font><font color="#CCCCCC"> don't even</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> access to</font>

802
00:32:09,010 --> 00:32:13,480
symbols and that's a<font color="#CCCCCC"> very</font><font color="#E5E5E5"> good point so</font>

803
00:32:11,590 --> 00:32:16,870
I<font color="#CCCCCC"> can't tell you</font><font color="#E5E5E5"> today that this</font><font color="#CCCCCC"> is</font>

804
00:32:13,480 --> 00:32:19,360
sorted since<font color="#CCCCCC"> April this year there</font><font color="#E5E5E5"> are</font>

805
00:32:16,870 --> 00:32:23,889
<font color="#E5E5E5">around 40 pdbs available for several</font>

806
00:32:19,360 --> 00:32:26,320
2016<font color="#E5E5E5"> and Windows</font><font color="#CCCCCC"> 10</font><font color="#E5E5E5"> they don't cover the</font>

807
00:32:23,890 --> 00:32:28,150
entire<font color="#E5E5E5"> set of components but there's</font>

808
00:32:26,320 --> 00:32:31,659
<font color="#CCCCCC">definitely enough for you to start</font>

809
00:32:28,150 --> 00:32:33,280
<font color="#CCCCCC">reverse engineering so yes</font><font color="#E5E5E5"> let's do</font><font color="#CCCCCC"> that</font>

810
00:32:31,660 --> 00:32:35,500
let's<font color="#E5E5E5"> start reverse engineering and</font>

811
00:32:33,280 --> 00:32:38,680
let's find bugs so we've selected

812
00:32:35,500 --> 00:32:42,220
there's<font color="#E5E5E5"> five vulnerabilities</font>

813
00:32:38,680 --> 00:32:44,890
why does in<font color="#CCCCCC"> part care well first of all</font>

814
00:32:42,220 --> 00:32:46,240
<font color="#CCCCCC">there are</font><font color="#E5E5E5"> fixed</font><font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> no I absolutely</font>

815
00:32:44,890 --> 00:32:48,010
<font color="#CCCCCC">know</font>

816
00:32:46,240 --> 00:32:51,610
talk about<font color="#E5E5E5"> something that is unfixed</font>

817
00:32:48,010 --> 00:32:54,010
here second as I just talked about<font color="#E5E5E5"> the</font>

818
00:32:51,610 --> 00:32:59,678
symbols or<font color="#CCCCCC"> the</font><font color="#E5E5E5"> affected components here</font>

819
00:32:54,010 --> 00:33:02,200
are<font color="#E5E5E5"> a</font><font color="#CCCCCC"> piddly so you can actually</font><font color="#E5E5E5"> reverse</font>

820
00:32:59,679 --> 00:33:05,980
engineer that that component and<font color="#E5E5E5"> figure</font>

821
00:33:02,200 --> 00:33:08,860
out<font color="#E5E5E5"> what was</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> initial</font><font color="#CCCCCC"> run ret third</font>

822
00:33:05,980 --> 00:33:11,110
<font color="#CCCCCC">some of these bugs have been externally</font>

823
00:33:08,860 --> 00:33:13,178
reported and this is great<font color="#CCCCCC"> because we</font>

824
00:33:11,110 --> 00:33:16,149
<font color="#E5E5E5">can explain you what was the metallurgy</font>

825
00:33:13,179 --> 00:33:18,160
of<font color="#E5E5E5"> the finder how he managed to find</font>

826
00:33:16,150 --> 00:33:20,950
<font color="#E5E5E5">that</font><font color="#CCCCCC"> buggy so you can actually</font><font color="#E5E5E5"> do the</font>

827
00:33:18,160 --> 00:33:24,100
same<font color="#CCCCCC"> and try to find over issues on last</font>

828
00:33:20,950 --> 00:33:26,410
point<font color="#CCCCCC"> cursory death bugs are easy to</font>

829
00:33:24,100 --> 00:33:30,669
explain<font color="#E5E5E5"> we've seen incredibly</font>

830
00:33:26,410 --> 00:33:32,230
complicated bugs bed bugs we can't just

831
00:33:30,670 --> 00:33:34,150
talk<font color="#CCCCCC"> about them here</font>

832
00:33:32,230 --> 00:33:37,320
we<font color="#E5E5E5"> are too complicated</font><font color="#CCCCCC"> but still if</font><font color="#E5E5E5"> you</font>

833
00:33:34,150 --> 00:33:41,679
found<font color="#E5E5E5"> them send them to Joe he loved</font><font color="#CCCCCC"> em</font>

834
00:33:37,320 --> 00:33:44,050
<font color="#CCCCCC">so just to talk</font><font color="#E5E5E5"> about just to take back</font>

835
00:33:41,679 --> 00:33:46,120
<font color="#E5E5E5">Joe slides so this is what I'm going</font><font color="#CCCCCC"> to</font>

836
00:33:44,050 --> 00:33:49,540
talk<font color="#CCCCCC"> about here so two issues in the car</font>

837
00:33:46,120 --> 00:33:53,530
and a<font color="#E5E5E5"> couple of other issues in in the</font>

838
00:33:49,540 --> 00:33:55,510
video the first issues I'm going<font color="#CCCCCC"> to</font>

839
00:33:53,530 --> 00:33:57,460
present<font color="#E5E5E5"> affect a</font><font color="#CCCCCC"> VM switch</font><font color="#E5E5E5"> so Joe</font>

840
00:33:55,510 --> 00:34:00,730
quickly<font color="#CCCCCC"> managed quickly talked about the</font>

841
00:33:57,460 --> 00:34:03,160
<font color="#E5E5E5">VM switch before so what is this well it</font>

842
00:34:00,730 --> 00:34:05,110
does a lot<font color="#E5E5E5"> of thing but in a very few</font>

843
00:34:03,160 --> 00:34:07,510
<font color="#E5E5E5">words</font><font color="#CCCCCC"> this is</font><font color="#E5E5E5"> what provide network</font>

844
00:34:05,110 --> 00:34:11,949
connectivity to the<font color="#E5E5E5"> guest this first</font>

845
00:34:07,510 --> 00:34:15,760
issue was found by<font color="#E5E5E5"> Peter lavake from</font>

846
00:34:11,949 --> 00:34:19,239
<font color="#CCCCCC">Tencent and it's unfortunate for us</font>

847
00:34:15,760 --> 00:34:23,379
amazingly simple<font color="#CCCCCC"> there is a function in</font>

848
00:34:19,239 --> 00:34:25,839
a<font color="#E5E5E5"> VM switch that takes string taken from</font>

849
00:34:23,379 --> 00:34:28,359
a packet sent by August and this

850
00:34:25,840 --> 00:34:31,320
function<font color="#E5E5E5"> just assumes that the strings</font>

851
00:34:28,359 --> 00:34:35,109
is null terminated so what happens if

852
00:34:31,320 --> 00:34:38,649
you just sent a<font color="#CCCCCC"> special</font><font color="#E5E5E5"> packet with a</font>

853
00:34:35,109 --> 00:34:41,560
string<font color="#CCCCCC"> without any</font><font color="#E5E5E5"> inner character</font><font color="#CCCCCC"> well</font>

854
00:34:38,649 --> 00:34:44,980
if you put the special<font color="#E5E5E5"> flags on</font><font color="#CCCCCC"> VM</font>

855
00:34:41,560 --> 00:34:47,320
switch<font color="#E5E5E5"> then as a function we just run</font>

856
00:34:44,980 --> 00:34:49,570
<font color="#E5E5E5">out of bounds while</font><font color="#CCCCCC"> processing that</font>

857
00:34:47,320 --> 00:34:52,330
string and<font color="#E5E5E5"> it will just crash the Turner</font>

858
00:34:49,570 --> 00:34:55,389
<font color="#CCCCCC">that's a great</font><font color="#E5E5E5"> bird and for that like</font>

859
00:34:52,330 --> 00:34:58,569
this we would pay right<font color="#E5E5E5"> now $15,000</font>

860
00:34:55,389 --> 00:34:59,390
<font color="#E5E5E5">however we would pay this</font><font color="#CCCCCC"> if you can</font>

861
00:34:58,570 --> 00:35:02,840
give<font color="#E5E5E5"> us</font>

862
00:34:59,390 --> 00:35:05,690
<font color="#E5E5E5">proof of concept so what did Peter do at</font>

863
00:35:02,840 --> 00:35:10,400
that<font color="#E5E5E5"> moment where he as</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> mentioned he</font>

864
00:35:05,690 --> 00:35:13,100
used<font color="#E5E5E5"> limit line of drivers so he first</font>

865
00:35:10,400 --> 00:35:15,860
figure<font color="#E5E5E5"> out how things worked there and</font>

866
00:35:13,100 --> 00:35:19,580
then he quickly put together a<font color="#CCCCCC"> phasor</font>

867
00:35:15,860 --> 00:35:21,680
<font color="#E5E5E5">and since as I just told</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> this issue</font>

868
00:35:19,580 --> 00:35:25,009
was so simple he after a few iterations

869
00:35:21,680 --> 00:35:27,470
he managed<font color="#CCCCCC"> to hit the</font><font color="#E5E5E5"> code and quickly</font>

870
00:35:25,010 --> 00:35:30,560
figure out<font color="#E5E5E5"> what was going</font><font color="#CCCCCC"> on so what he</font>

871
00:35:27,470 --> 00:35:34,100
provided us was a function that<font color="#E5E5E5"> we could</font>

872
00:35:30,560 --> 00:35:37,490
just put inside<font color="#CCCCCC"> VMs which code</font>

873
00:35:34,100 --> 00:35:39,950
sorry the Linux drivers and just run<font color="#E5E5E5"> if</font>

874
00:35:37,490 --> 00:35:43,310
config from<font color="#E5E5E5"> a Linux VM and that would</font>

875
00:35:39,950 --> 00:35:44,240
send a malicious packet and<font color="#CCCCCC"> crash</font><font color="#E5E5E5"> that</font>

876
00:35:43,310 --> 00:35:46,520
was a<font color="#E5E5E5"> bread box</font>

877
00:35:44,240 --> 00:35:50,149
so thanks Peter for submitting that to

878
00:35:46,520 --> 00:35:56,120
<font color="#E5E5E5">us if you try to reverse engineer</font><font color="#CCCCCC"> that</font>

879
00:35:50,150 --> 00:35:57,920
<font color="#E5E5E5">bug and</font><font color="#CCCCCC"> for example extra nab function</font>

880
00:35:56,120 --> 00:36:00,680
<font color="#E5E5E5">you won't see a direct relationship with</font>

881
00:35:57,920 --> 00:36:03,860
<font color="#E5E5E5">the</font><font color="#CCCCCC"> VM bus</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> because the packet is</font>

882
00:36:00,680 --> 00:36:06,350
process is processed<font color="#E5E5E5"> a synchronously so</font>

883
00:36:03,860 --> 00:36:08,960
VMs which takes that<font color="#E5E5E5"> are on this packet</font>

884
00:36:06,350 --> 00:36:11,839
<font color="#E5E5E5">it put it</font><font color="#CCCCCC"> into a tooth and then only</font>

885
00:36:08,960 --> 00:36:14,720
when it<font color="#CCCCCC"> have times it will process it</font><font color="#E5E5E5"> so</font>

886
00:36:11,840 --> 00:36:16,790
look at the stack trace<font color="#E5E5E5"> and if you want</font>

887
00:36:14,720 --> 00:36:19,490
to<font color="#E5E5E5"> debug it</font><font color="#CCCCCC"> put the breakpoints there</font>

888
00:36:16,790 --> 00:36:22,279
and<font color="#CCCCCC"> you will see</font><font color="#E5E5E5"> what's going on</font><font color="#CCCCCC"> just to</font>

889
00:36:19,490 --> 00:36:24,859
<font color="#E5E5E5">conclude on</font><font color="#CCCCCC"> VM switch there were three</font>

890
00:36:22,280 --> 00:36:26,630
of our bugs from<font color="#CCCCCC"> by costia coaching ski</font>

891
00:36:24,860 --> 00:36:29,810
from<font color="#CCCCCC"> Google</font><font color="#E5E5E5"> two years and a half ago</font>

892
00:36:26,630 --> 00:36:33,200
<font color="#E5E5E5">they are described</font><font color="#CCCCCC"> the source</font><font color="#E5E5E5"> code</font><font color="#CCCCCC"> so</font>

893
00:36:29,810 --> 00:36:35,900
<font color="#CCCCCC">proof-of-concept</font><font color="#E5E5E5"> sorry is there it's</font>

894
00:36:33,200 --> 00:36:39,080
available<font color="#E5E5E5"> on the internet and also go</font>

895
00:36:35,900 --> 00:36:43,730
check<font color="#CCCCCC"> out Jordans talk tomorrow it's on</font>

896
00:36:39,080 --> 00:36:46,759
<font color="#CCCCCC">VN switch and it's great let's move on</font>

897
00:36:43,730 --> 00:36:48,770
<font color="#E5E5E5">to another kernel component V PCI</font>

898
00:36:46,760 --> 00:36:51,380
what's that thing<font color="#CCCCCC"> Joe quickly talked</font>

899
00:36:48,770 --> 00:36:53,210
about it<font color="#CCCCCC"> so basically</font><font color="#E5E5E5"> you've got your</font>

900
00:36:51,380 --> 00:36:55,670
<font color="#E5E5E5">guest and you want the guests to talk</font>

901
00:36:53,210 --> 00:36:57,980
and to serve the PCI components<font color="#E5E5E5"> it's</font>

902
00:36:55,670 --> 00:36:59,990
going to use<font color="#E5E5E5"> that component so for</font>

903
00:36:57,980 --> 00:37:03,220
example you want the guests to use the

904
00:36:59,990 --> 00:37:06,020
earth<font color="#CCCCCC"> there's your very latest</font>

905
00:37:03,220 --> 00:37:08,899
<font color="#E5E5E5">graphic card this is</font><font color="#CCCCCC"> a component that</font><font color="#E5E5E5"> is</font>

906
00:37:06,020 --> 00:37:11,090
<font color="#E5E5E5">going to be used so the rabbit child I'm</font>

907
00:37:08,900 --> 00:37:12,060
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> talk</font><font color="#E5E5E5"> about now</font><font color="#CCCCCC"> was</font><font color="#E5E5E5"> founded by</font>

908
00:37:11,090 --> 00:37:15,810
or

909
00:37:12,060 --> 00:37:19,200
the virtualization<font color="#E5E5E5"> security team it's an</font>

910
00:37:15,810 --> 00:37:25,500
internal team at Microsoft<font color="#CCCCCC"> so we are</font>

911
00:37:19,200 --> 00:37:28,710
hackers<font color="#E5E5E5"> so the V</font><font color="#CCCCCC"> PCI</font><font color="#E5E5E5"> the PCI thing is</font>

912
00:37:25,500 --> 00:37:30,810
handled<font color="#CCCCCC"> by</font><font color="#E5E5E5"> the PCI via speed Otzi's but</font>

913
00:37:28,710 --> 00:37:33,060
we are interested by<font color="#CCCCCC"> on</font><font color="#E5E5E5"> three points</font>

914
00:37:30,810 --> 00:37:35,790
<font color="#CCCCCC">we're interested to know how</font><font color="#E5E5E5"> the guest</font>

915
00:37:33,060 --> 00:37:38,880
and the<font color="#CCCCCC"> host communicates in this case</font>

916
00:37:35,790 --> 00:37:42,740
we<font color="#CCCCCC"> are using a function</font><font color="#E5E5E5"> called</font><font color="#CCCCCC"> channel</font>

917
00:37:38,880 --> 00:37:46,740
process packet which is<font color="#E5E5E5"> a big switch so</font>

918
00:37:42,740 --> 00:37:49,109
suggest send a packet<font color="#CCCCCC"> to host the</font><font color="#E5E5E5"> packet</font>

919
00:37:46,740 --> 00:37:51,689
<font color="#E5E5E5">is processed and</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> response is returned</font>

920
00:37:49,110 --> 00:37:54,630
<font color="#E5E5E5">to the guest for sarin packets and</font>

921
00:37:51,690 --> 00:37:57,240
especially here the interrupt message

922
00:37:54,630 --> 00:37:59,790
packet you could enter<font color="#E5E5E5"> a certain code</font>

923
00:37:57,240 --> 00:38:03,209
path where the guest was supposed to

924
00:37:59,790 --> 00:38:05,910
return<font color="#CCCCCC"> to the host</font><font color="#E5E5E5"> was suppose return an</font>

925
00:38:03,210 --> 00:38:08,730
object<font color="#E5E5E5"> back to the guest if you look at</font>

926
00:38:05,910 --> 00:38:11,850
that code<font color="#E5E5E5"> the first thing that you might</font>

927
00:38:08,730 --> 00:38:13,410
notice is that the<font color="#CCCCCC"> return packets</font><font color="#E5E5E5"> the</font>

928
00:38:11,850 --> 00:38:17,460
<font color="#CCCCCC">return buffer seems to be correctly</font>

929
00:38:13,410 --> 00:38:21,379
initialized<font color="#E5E5E5"> however what is not what is</font>

930
00:38:17,460 --> 00:38:24,330
<font color="#E5E5E5">not done here is this translate this</font>

931
00:38:21,380 --> 00:38:27,030
translated message<font color="#E5E5E5"> object which is a</font>

932
00:38:24,330 --> 00:38:29,430
stack buffer<font color="#E5E5E5"> this one is not correctly</font>

933
00:38:27,030 --> 00:38:31,650
initialized<font color="#E5E5E5"> as you can see if you</font>

934
00:38:29,430 --> 00:38:33,870
<font color="#E5E5E5">quickly reverse engineer the function</font>

935
00:38:31,650 --> 00:38:36,060
<font color="#CCCCCC">that</font><font color="#E5E5E5"> is supposed to</font><font color="#CCCCCC"> engine to initialize</font>

936
00:38:33,870 --> 00:38:40,830
it<font color="#E5E5E5"> you will see that</font><font color="#CCCCCC"> this function only</font>

937
00:38:36,060 --> 00:38:44,009
initialize it if no errors<font color="#E5E5E5"> upon so here</font>

938
00:38:40,830 --> 00:38:46,770
the<font color="#CCCCCC"> idea is</font><font color="#E5E5E5"> to cause an error to during</font>

939
00:38:44,010 --> 00:38:49,560
that function which we return status<font color="#E5E5E5"> and</font>

940
00:38:46,770 --> 00:38:52,530
the function won't initialize this

941
00:38:49,560 --> 00:38:56,610
buffer so in<font color="#E5E5E5"> VL this results in making</font>

942
00:38:52,530 --> 00:39:00,030
<font color="#CCCCCC">10 bytes 16 bytes in decimal of stack</font>

943
00:38:56,610 --> 00:39:04,110
data from the kernel to the guest for a

944
00:39:00,030 --> 00:39:05,820
<font color="#E5E5E5">bug like this we would pay $25,000 but</font>

945
00:39:04,110 --> 00:39:09,720
you need to provide us<font color="#CCCCCC"> with a proof of</font>

946
00:39:05,820 --> 00:39:12,990
concept this<font color="#E5E5E5"> is very important so here</font>

947
00:39:09,720 --> 00:39:14,939
what<font color="#CCCCCC"> I suggest you you can you can</font>

948
00:39:12,990 --> 00:39:17,549
always use<font color="#CCCCCC"> a rhino's drivers</font><font color="#E5E5E5"> this is</font><font color="#CCCCCC"> a</font>

949
00:39:14,940 --> 00:39:20,210
this is perfectly documented<font color="#CCCCCC"> you can</font>

950
00:39:17,550 --> 00:39:22,190
click if<font color="#E5E5E5"> you're out how they work and</font>

951
00:39:20,210 --> 00:39:25,400
and yeah<font color="#E5E5E5"> and try to</font><font color="#CCCCCC"> repair your own</font>

952
00:39:22,190 --> 00:39:27,680
packet however what I<font color="#CCCCCC"> adjust you</font><font color="#E5E5E5"> here is</font>

953
00:39:25,400 --> 00:39:31,820
<font color="#E5E5E5">just to put some breakpoint in</font><font color="#CCCCCC"> fgo</font>

954
00:39:27,680 --> 00:39:34,430
communicate protocol<font color="#CCCCCC"> in a in the inner</font>

955
00:39:31,820 --> 00:39:37,880
guest VM this is where the handshake

956
00:39:34,430 --> 00:39:41,210
happen with<font color="#CCCCCC"> V PCI so what you can do is</font>

957
00:39:37,880 --> 00:39:43,280
just look at this function<font color="#E5E5E5"> and</font><font color="#CCCCCC"> see how</font>

958
00:39:41,210 --> 00:39:46,430
the packet is exchanged<font color="#E5E5E5"> and then you can</font>

959
00:39:43,280 --> 00:39:51,290
just put your phaser and Anya<font color="#E5E5E5"> and try to</font>

960
00:39:46,430 --> 00:39:54,080
get some<font color="#CCCCCC"> bugs oh this is this was a</font><font color="#E5E5E5"> good</font>

961
00:39:51,290 --> 00:39:57,020
bug<font color="#CCCCCC"> so thanks</font><font color="#E5E5E5"> for that team for finding</font>

962
00:39:54,080 --> 00:39:58,910
it<font color="#E5E5E5"> we stay with VM</font><font color="#CCCCCC"> bus but this time</font>

963
00:39:57,020 --> 00:40:01,460
we've moved to<font color="#E5E5E5"> the worker process it's</font>

964
00:39:58,910 --> 00:40:05,149
important to notice<font color="#CCCCCC"> that the VM bus</font>

965
00:40:01,460 --> 00:40:08,060
doesn't<font color="#E5E5E5"> only give data to the kernel it</font>

966
00:40:05,150 --> 00:40:10,970
also provide data<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> worker process</font>

967
00:40:08,060 --> 00:40:14,869
so this bug<font color="#CCCCCC"> I'm going to talk about was</font>

968
00:40:10,970 --> 00:40:17,990
found in the synthetic video driver<font color="#E5E5E5"> so</font>

969
00:40:14,869 --> 00:40:20,330
the synthetic video component sorry<font color="#CCCCCC"> so</font>

970
00:40:17,990 --> 00:40:22,810
what is<font color="#CCCCCC"> that thing about</font><font color="#E5E5E5"> it's basically</font>

971
00:40:20,330 --> 00:40:27,799
what is<font color="#E5E5E5"> handling the screen resolutions</font>

972
00:40:22,810 --> 00:40:29,839
<font color="#E5E5E5">to to to the guest in so this component</font>

973
00:40:27,800 --> 00:40:34,400
<font color="#E5E5E5">this particular component</font><font color="#CCCCCC"> is under envy</font>

974
00:40:29,839 --> 00:40:36,320
<font color="#CCCCCC">VM UI devices that BLM</font><font color="#E5E5E5"> as well as</font><font color="#CCCCCC"> other</font>

975
00:40:34,400 --> 00:40:38,839
<font color="#CCCCCC">components so good check this out</font>

976
00:40:36,320 --> 00:40:41,210
symbols<font color="#E5E5E5"> are there and again we are</font>

977
00:40:38,839 --> 00:40:43,369
<font color="#E5E5E5">hacker were interested by communication</font>

978
00:40:41,210 --> 00:40:45,020
<font color="#E5E5E5">so here it's very easy</font><font color="#CCCCCC"> to add it it</font>

979
00:40:43,369 --> 00:40:47,510
really<font color="#E5E5E5"> varies a function which is</font><font color="#CCCCCC"> called</font>

980
00:40:45,020 --> 00:40:49,790
<font color="#E5E5E5">on mrs. received</font><font color="#CCCCCC"> it's as its name</font>

981
00:40:47,510 --> 00:40:53,270
indicates it received a message from<font color="#CCCCCC"> the</font>

982
00:40:49,790 --> 00:40:58,400
<font color="#CCCCCC">guest</font><font color="#E5E5E5"> processing it and then return a</font>

983
00:40:53,270 --> 00:41:02,420
response to to the guest<font color="#E5E5E5"> the</font><font color="#CCCCCC"> bug here</font>

984
00:40:58,400 --> 00:41:04,940
was happening under<font color="#E5E5E5"> certain condition it</font>

985
00:41:02,420 --> 00:41:07,640
was<font color="#E5E5E5"> possible</font><font color="#CCCCCC"> to reach a certain code</font>

986
00:41:04,940 --> 00:41:10,550
path with specific<font color="#CCCCCC"> Borean sent to files</font>

987
00:41:07,640 --> 00:41:13,640
<font color="#E5E5E5">where an object will be initialized on</font>

988
00:41:10,550 --> 00:41:16,400
the hip<font color="#E5E5E5"> but only part of its field would</font>

989
00:41:13,640 --> 00:41:19,430
<font color="#CCCCCC">be would be initialized</font><font color="#E5E5E5"> so in the end as</font>

990
00:41:16,400 --> 00:41:23,190
<font color="#E5E5E5">you can see here you</font><font color="#CCCCCC"> locate almost 90</font>

991
00:41:19,430 --> 00:41:25,740
bytes in<font color="#E5E5E5"> X on on the heap and only</font>

992
00:41:23,190 --> 00:41:28,920
<font color="#CCCCCC">initialize</font><font color="#E5E5E5"> nine of them which would lead</font>

993
00:41:25,740 --> 00:41:29,910
to<font color="#E5E5E5"> a massive memory leak for</font><font color="#CCCCCC"> Berg like</font>

994
00:41:28,920 --> 00:41:33,390
<font color="#E5E5E5">this but like this</font>

995
00:41:29,910 --> 00:41:37,589
if you can find<font color="#E5E5E5"> repro we would give you</font>

996
00:41:33,390 --> 00:41:39,720
15,000 USD<font color="#CCCCCC"> and if you retry to</font>

997
00:41:37,590 --> 00:41:42,420
<font color="#CCCCCC">reverse-engineer a</font><font color="#E5E5E5"> patch you'll see that</font>

998
00:41:39,720 --> 00:41:45,390
<font color="#E5E5E5">there was another variant from that</font>

999
00:41:42,420 --> 00:41:48,030
variability in another<font color="#E5E5E5"> function and so</font>

1000
00:41:45,390 --> 00:41:50,060
if you had done this<font color="#E5E5E5"> River at this this</font>

1001
00:41:48,030 --> 00:41:54,330
<font color="#E5E5E5">research you could have easily knitted</font>

1002
00:41:50,060 --> 00:41:57,690
<font color="#CCCCCC">30,000 how to to write a part for</font><font color="#E5E5E5"> that</font>

1003
00:41:54,330 --> 00:42:00,240
<font color="#E5E5E5">again it's easy also communication is</font>

1004
00:41:57,690 --> 00:42:02,490
<font color="#E5E5E5">done in</font><font color="#CCCCCC"> hyper-v do lattice so the</font><font color="#E5E5E5"> best</font>

1005
00:42:00,240 --> 00:42:05,450
way<font color="#E5E5E5"> for you would be just put a break</font>

1006
00:42:02,490 --> 00:42:08,910
point where the handshake happens and

1007
00:42:05,450 --> 00:42:10,710
just try to replay<font color="#CCCCCC"> your own packets one</font>

1008
00:42:08,910 --> 00:42:14,160
thing I haven't<font color="#E5E5E5"> said is that we don't</font>

1009
00:42:10,710 --> 00:42:17,900
<font color="#E5E5E5">only need we don't</font><font color="#CCCCCC"> necessary need a</font>

1010
00:42:14,160 --> 00:42:20,940
driver<font color="#E5E5E5"> you could you can always send us</font>

1011
00:42:17,900 --> 00:42:22,920
<font color="#E5E5E5">windy</font><font color="#CCCCCC"> bugs</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> example for example this</font>

1012
00:42:20,940 --> 00:42:25,590
variability was<font color="#E5E5E5"> very simple to trigger</font>

1013
00:42:22,920 --> 00:42:27,720
so<font color="#E5E5E5"> you could for example provide us with</font>

1014
00:42:25,590 --> 00:42:29,610
a script that<font color="#E5E5E5"> would just alter some</font>

1015
00:42:27,720 --> 00:42:31,200
fields in memory and that would be

1016
00:42:29,610 --> 00:42:34,470
enough for<font color="#CCCCCC"> us</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> need something</font>

1017
00:42:31,200 --> 00:42:36,839
<font color="#CCCCCC">that is</font><font color="#E5E5E5"> easy to reproduce</font><font color="#CCCCCC"> as long as it</font>

1018
00:42:34,470 --> 00:42:42,120
works<font color="#CCCCCC"> as</font><font color="#E5E5E5"> long as it can save time you'll</font>

1019
00:42:36,840 --> 00:42:45,810
<font color="#E5E5E5">get the bounty so now let's move to</font><font color="#CCCCCC"> the</font>

1020
00:42:42,120 --> 00:42:47,160
intercepted IO<font color="#CCCCCC"> run our abilities</font><font color="#E5E5E5"> Joe I</font>

1021
00:42:45,810 --> 00:42:49,410
believe you want<font color="#E5E5E5"> to talk about this one</font>

1022
00:42:47,160 --> 00:42:51,990
<font color="#CCCCCC">that's raw baby</font><font color="#E5E5E5"> yeah so this was an</font>

1023
00:42:49,410 --> 00:42:54,629
interesting<font color="#E5E5E5"> vulnerability in handling mm</font>

1024
00:42:51,990 --> 00:42:57,770
IO amulet emulation<font color="#E5E5E5"> now as we talked</font>

1025
00:42:54,630 --> 00:43:01,050
<font color="#E5E5E5">about before</font><font color="#CCCCCC"> when a</font><font color="#E5E5E5"> function receives a</font>

1026
00:42:57,770 --> 00:43:04,110
<font color="#E5E5E5">anime</font><font color="#CCCCCC"> o</font><font color="#E5E5E5"> read request that virtual device</font>

1027
00:43:01,050 --> 00:43:06,180
is responsible<font color="#CCCCCC"> for</font><font color="#E5E5E5"> providing data back</font>

1028
00:43:04,110 --> 00:43:09,270
to<font color="#E5E5E5"> the guest in response to that read</font>

1029
00:43:06,180 --> 00:43:11,370
request<font color="#E5E5E5"> and while this function if</font><font color="#CCCCCC"> you</font>

1030
00:43:09,270 --> 00:43:13,590
look at the definition of prep<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I</font>

1031
00:43:11,370 --> 00:43:15,660
provided earlier<font color="#E5E5E5"> has a return code</font>

1032
00:43:13,590 --> 00:43:18,030
indicating if it succeeded or failed<font color="#CCCCCC"> it</font>

1033
00:43:15,660 --> 00:43:21,779
turns out that that return code is

1034
00:43:18,030 --> 00:43:24,330
<font color="#CCCCCC">ignored you always must populate the</font>

1035
00:43:21,780 --> 00:43:26,490
read buffer because no<font color="#E5E5E5"> matter what the</font>

1036
00:43:24,330 --> 00:43:29,220
contents of that<font color="#E5E5E5"> read buffer get copied</font>

1037
00:43:26,490 --> 00:43:31,259
back to the virtual machine<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so this</font>

1038
00:43:29,220 --> 00:43:33,480
vulnerability actually manifested itself

1039
00:43:31,260 --> 00:43:36,030
in a<font color="#CCCCCC"> couple of</font><font color="#E5E5E5"> different virtual devices</font>

1040
00:43:33,480 --> 00:43:37,320
where they would have air conditions

1041
00:43:36,030 --> 00:43:39,330
this<font color="#CCCCCC"> air-conditioned here which is</font>

1042
00:43:37,320 --> 00:43:41,580
<font color="#E5E5E5">difficult to read but effectively</font><font color="#CCCCCC"> what</font>

1043
00:43:39,330 --> 00:43:44,850
happens<font color="#E5E5E5"> is the virtual device says if</font>

1044
00:43:41,580 --> 00:43:48,299
the number<font color="#CCCCCC"> of bytes</font><font color="#E5E5E5"> being read is not</font>

1045
00:43:44,850 --> 00:43:51,060
<font color="#CCCCCC">four bytes</font><font color="#E5E5E5"> then return and it doesn't</font>

1046
00:43:48,300 --> 00:43:54,090
populate<font color="#CCCCCC"> that buffer</font><font color="#E5E5E5"> so if you issued an</font>

1047
00:43:51,060 --> 00:43:56,370
8 byte<font color="#E5E5E5"> mm</font><font color="#CCCCCC"> IO read request to this</font>

1048
00:43:54,090 --> 00:43:58,470
virtual<font color="#E5E5E5"> device then you would get</font><font color="#CCCCCC"> 8</font>

1049
00:43:56,370 --> 00:44:00,270
uninitialized bytes of stack<font color="#E5E5E5"> memory</font>

1050
00:43:58,470 --> 00:44:02,160
returned to you and it was<font color="#E5E5E5"> actually kind</font>

1051
00:44:00,270 --> 00:44:03,870
<font color="#CCCCCC">of nice it turned out that</font><font color="#E5E5E5"> in this case</font>

1052
00:44:02,160 --> 00:44:06,359
the memory<font color="#E5E5E5"> that would be returned was</font>

1053
00:44:03,870 --> 00:44:08,609
very consistently<font color="#E5E5E5"> a pointer to an object</font>

1054
00:44:06,360 --> 00:44:11,550
on<font color="#CCCCCC"> the heap</font><font color="#E5E5E5"> so that'd be</font><font color="#CCCCCC"> pretty useful</font>

1055
00:44:08,610 --> 00:44:14,880
<font color="#E5E5E5">if you were trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use this to</font><font color="#CCCCCC"> break</font>

1056
00:44:11,550 --> 00:44:17,370
<font color="#E5E5E5">a SLR and once</font><font color="#CCCCCC"> again a bug like this if</font>

1057
00:44:14,880 --> 00:44:21,600
you find<font color="#CCCCCC"> it and report</font><font color="#E5E5E5"> it to</font><font color="#CCCCCC"> us will net</font>

1058
00:44:17,370 --> 00:44:23,370
you $15,000 yeah<font color="#CCCCCC"> great bug</font>

1059
00:44:21,600 --> 00:44:25,170
<font color="#CCCCCC">so let's book</font><font color="#E5E5E5"> we're going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk about</font>

1060
00:44:23,370 --> 00:44:27,359
is<font color="#CCCCCC"> actually your favorite</font><font color="#E5E5E5"> so this one</font>

1061
00:44:25,170 --> 00:44:29,220
happened in the storage component the

1062
00:44:27,360 --> 00:44:34,170
storage component is used by<font color="#E5E5E5"> for</font>

1063
00:44:29,220 --> 00:44:38,549
<font color="#E5E5E5">examples of floppy or any ID any ID</font>

1064
00:44:34,170 --> 00:44:43,050
device<font color="#CCCCCC"> so this component</font><font color="#E5E5E5"> specific</font>

1065
00:44:38,550 --> 00:44:46,110
reasons<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> reports</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> 0 to 1</font><font color="#CCCCCC"> F 7</font>

1066
00:44:43,050 --> 00:44:48,090
and frame 0 2 and 2/3<font color="#CCCCCC"> of 0</font><font color="#E5E5E5"> F 7</font><font color="#CCCCCC"> I'm</font>

1067
00:44:46,110 --> 00:44:54,440
staying I stick<font color="#CCCCCC"> with</font><font color="#E5E5E5"> the first ranch</font>

1068
00:44:48,090 --> 00:44:57,870
here<font color="#CCCCCC"> so supports 1</font><font color="#E5E5E5"> F</font><font color="#CCCCCC"> 1 to 1</font><font color="#E5E5E5"> F 7 are</font>

1069
00:44:54,440 --> 00:44:59,850
explicitly used to to<font color="#E5E5E5"> change the</font>

1070
00:44:57,870 --> 00:45:02,580
internal<font color="#E5E5E5"> states of a component but</font>

1071
00:44:59,850 --> 00:45:04,470
support<font color="#CCCCCC"> 1 F 0 is</font><font color="#E5E5E5"> doing something</font>

1072
00:45:02,580 --> 00:45:07,590
<font color="#CCCCCC">completely different it's actually</font>

1073
00:45:04,470 --> 00:45:12,149
writing<font color="#E5E5E5"> data to</font><font color="#CCCCCC"> a buffer</font><font color="#E5E5E5"> under but here</font>

1074
00:45:07,590 --> 00:45:14,340
was in<font color="#E5E5E5"> this this this data function it</font>

1075
00:45:12,150 --> 00:45:18,180
was possible<font color="#CCCCCC"> to manipulate</font><font color="#E5E5E5"> the internal</font>

1076
00:45:14,340 --> 00:45:21,000
state to use an internal<font color="#CCCCCC"> offset</font><font color="#E5E5E5"> that</font>

1077
00:45:18,180 --> 00:45:22,620
could be arbitrary control<font color="#E5E5E5"> until in VN</font>

1078
00:45:21,000 --> 00:45:24,690
that would give you almost an

1079
00:45:22,620 --> 00:45:28,080
<font color="#CCCCCC">arbitrarily</font><font color="#E5E5E5"> read and write primitive on</font>

1080
00:45:24,690 --> 00:45:30,810
the hip<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is this is a critical bug</font>

1081
00:45:28,080 --> 00:45:34,080
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is actually one of the best books</font>

1082
00:45:30,810 --> 00:45:37,650
we've seen this bug<font color="#CCCCCC"> has been anonymously</font>

1083
00:45:34,080 --> 00:45:39,810
submitted to us<font color="#E5E5E5"> and I've got a</font><font color="#CCCCCC"> pleasure</font>

1084
00:45:37,650 --> 00:45:44,180
<font color="#CCCCCC">to tell</font><font color="#E5E5E5"> you that so far</font><font color="#CCCCCC"> this is the book</font>

1085
00:45:39,810 --> 00:45:46,060
that<font color="#CCCCCC"> has netted the most actually 1,050</font>

1086
00:45:44,180 --> 00:45:50,690
$150,000

1087
00:45:46,060 --> 00:45:51,650
the puck<font color="#E5E5E5"> is a finder originally</font><font color="#CCCCCC"> find</font><font color="#E5E5E5"> it</font>

1088
00:45:50,690 --> 00:45:54,080
found it

1089
00:45:51,650 --> 00:45:57,800
just by<font color="#E5E5E5"> fuzzing but it turned out that</font>

1090
00:45:54,080 --> 00:45:58,880
<font color="#E5E5E5">once you've reduced as he is a</font>

1091
00:45:57,800 --> 00:46:01,100
<font color="#CCCCCC">proof-of-concept</font>

1092
00:45:58,880 --> 00:46:05,600
<font color="#E5E5E5">it's just a series</font><font color="#CCCCCC"> of out instructions</font>

1093
00:46:01,100 --> 00:46:07,940
<font color="#E5E5E5">sent to to this part it's simple it's</font>

1094
00:46:05,600 --> 00:46:11,560
efficient<font color="#E5E5E5"> and we want Bob like this</font>

1095
00:46:07,940 --> 00:46:15,080
<font color="#E5E5E5">books like this</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> please send us more</font>

1096
00:46:11,560 --> 00:46:17,779
<font color="#CCCCCC">Jo</font><font color="#E5E5E5"> any closing thoughts</font><font color="#CCCCCC"> all right thanks</font>

1097
00:46:15,080 --> 00:46:19,520
for<font color="#E5E5E5"> that</font><font color="#CCCCCC"> Nico</font><font color="#E5E5E5"> so we don't have many</font>

1098
00:46:17,780 --> 00:46:21,080
closing thoughts for you here<font color="#CCCCCC"> we hope</font>

1099
00:46:19,520 --> 00:46:23,270
<font color="#E5E5E5">that this has</font><font color="#CCCCCC"> been a super informative</font>

1100
00:46:21,080 --> 00:46:25,040
presentation for you<font color="#CCCCCC"> we hope that</font><font color="#E5E5E5"> you</font>

1101
00:46:23,270 --> 00:46:27,590
guys<font color="#E5E5E5"> can</font><font color="#CCCCCC"> take this information and</font><font color="#E5E5E5"> use</font>

1102
00:46:25,040 --> 00:46:29,540
<font color="#CCCCCC">it</font><font color="#E5E5E5"> to find bugs and hyper-v and of</font>

1103
00:46:27,590 --> 00:46:32,060
course we<font color="#CCCCCC"> really hope that</font><font color="#E5E5E5"> you send us</font>

1104
00:46:29,540 --> 00:46:33,529
those hyper-v bugs that<font color="#E5E5E5"> you find because</font>

1105
00:46:32,060 --> 00:46:36,620
we'll pay you a bunch of money<font color="#E5E5E5"> for them</font>

1106
00:46:33,530 --> 00:46:39,260
and<font color="#E5E5E5"> get them fixed as we noted</font><font color="#CCCCCC"> earlier</font>

1107
00:46:36,620 --> 00:46:42,020
Jordan<font color="#E5E5E5"> from Microsoft is giving a talk</font>

1108
00:46:39,260 --> 00:46:44,150
tomorrow on hyper-v exploitation<font color="#CCCCCC"> so if</font>

1109
00:46:42,020 --> 00:46:45,860
you are<font color="#E5E5E5"> interested in hyper-v</font><font color="#CCCCCC"> and want</font>

1110
00:46:44,150 --> 00:46:47,450
<font color="#E5E5E5">to get more information about</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> you</font>

1111
00:46:45,860 --> 00:46:51,040
should<font color="#E5E5E5"> definitely go and check his talk</font>

1112
00:46:47,450 --> 00:46:54,230
out tomorrow it's at<font color="#E5E5E5"> 350 in Lagoon</font><font color="#CCCCCC"> GHI</font>

1113
00:46:51,040 --> 00:46:56,390
so that's all we<font color="#E5E5E5"> got for you and let us</font>

1114
00:46:54,230 --> 00:46:57,710
know if you<font color="#E5E5E5"> have any questions we</font><font color="#CCCCCC"> can</font>

1115
00:46:56,390 --> 00:46:59,690
answer<font color="#E5E5E5"> questions here and you can also</font>

1116
00:46:57,710 --> 00:47:02,870
just shoot us emails or talk to<font color="#CCCCCC"> us</font><font color="#E5E5E5"> on</font>

1117
00:46:59,690 --> 00:47:07,330
<font color="#E5E5E5">Twitter if you have questions after</font><font color="#CCCCCC"> the</font>

1118
00:47:02,870 --> 00:47:07,330
presentation<font color="#CCCCCC"> so thanks for your</font><font color="#E5E5E5"> time</font>

