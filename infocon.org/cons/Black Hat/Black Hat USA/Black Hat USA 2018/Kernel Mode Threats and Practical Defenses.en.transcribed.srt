1
00:00:00,030 --> 00:00:03,149
thank you<font color="#CCCCCC"> welcome to</font><font color="#E5E5E5"> our talk titled</font>

2
00:00:01,709 --> 00:00:05,790
kernel-mode threats and practical

3
00:00:03,149 --> 00:00:08,010
defenses<font color="#E5E5E5"> so first a</font><font color="#CCCCCC"> little bit</font><font color="#E5E5E5"> about us</font>

4
00:00:05,790 --> 00:00:09,809
<font color="#CCCCCC">I'm Joe Desmond I'm a senior researcher</font>

5
00:00:08,010 --> 00:00:11,790
at<font color="#E5E5E5"> endgame I have an interest in</font>

6
00:00:09,809 --> 00:00:13,440
<font color="#E5E5E5">offensive security research but my day</font>

7
00:00:11,790 --> 00:00:16,049
job<font color="#E5E5E5"> is development of endpoint</font>

8
00:00:13,440 --> 00:00:18,020
protections<font color="#E5E5E5"> hi I'm Gabe Landau I'm a</font>

9
00:00:16,049 --> 00:00:20,460
principal software engineer<font color="#E5E5E5"> at endgame</font><font color="#CCCCCC"> I</font>

10
00:00:18,020 --> 00:00:23,580
<font color="#E5E5E5">take apart malware</font><font color="#CCCCCC"> figure</font><font color="#E5E5E5"> out how it</font>

11
00:00:20,460 --> 00:00:25,769
works<font color="#E5E5E5"> and figure</font><font color="#CCCCCC"> out ways to</font><font color="#E5E5E5"> stop it so</font>

12
00:00:23,580 --> 00:00:27,389
here's our agenda<font color="#CCCCCC"> today and our talk is</font>

13
00:00:25,769 --> 00:00:28,470
going to focus on<font color="#E5E5E5"> kernel-mode threats as</font>

14
00:00:27,390 --> 00:00:30,510
they<font color="#E5E5E5"> apply to the Windows operating</font>

15
00:00:28,470 --> 00:00:32,519
system<font color="#CCCCCC"> and</font><font color="#E5E5E5"> it's split into three parts</font>

16
00:00:30,510 --> 00:00:34,770
<font color="#CCCCCC">so in part one</font><font color="#E5E5E5"> we're going to explore</font>

17
00:00:32,520 --> 00:00:36,300
sort of the last decade of the

18
00:00:34,770 --> 00:00:38,579
<font color="#CCCCCC">cat-and-mouse game between kernel-mode</font>

19
00:00:36,300 --> 00:00:39,839
<font color="#E5E5E5">malware authors and also the OS</font>

20
00:00:38,579 --> 00:00:41,850
protections<font color="#E5E5E5"> that are designed to</font>

21
00:00:39,840 --> 00:00:43,110
mitigate<font color="#E5E5E5"> them next we move into part</font><font color="#CCCCCC"> 2</font>

22
00:00:41,850 --> 00:00:45,600
where we're going to dive into<font color="#CCCCCC"> our own</font>

23
00:00:43,110 --> 00:00:47,940
offensive research or identify gaps in

24
00:00:45,600 --> 00:00:50,030
the OS protections<font color="#E5E5E5"> and basically</font>

25
00:00:47,940 --> 00:00:52,890
<font color="#E5E5E5">discover that they're</font><font color="#CCCCCC"> not adequate and</font>

26
00:00:50,030 --> 00:00:54,809
<font color="#CCCCCC">finally in part</font><font color="#E5E5E5"> 3 we're</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> explore</font>

27
00:00:52,890 --> 00:00:56,489
<font color="#E5E5E5">ways to augment these OS defenses and</font>

28
00:00:54,809 --> 00:00:59,309
<font color="#E5E5E5">this is going to be both by leveraging</font>

29
00:00:56,489 --> 00:01:01,349
<font color="#E5E5E5">existing publicly available tools along</font>

30
00:00:59,309 --> 00:01:05,099
with innovative approaches<font color="#E5E5E5"> to closing</font>

31
00:01:01,350 --> 00:01:07,170
gaps so quickly why this<font color="#E5E5E5"> talk</font>

32
00:01:05,099 --> 00:01:09,210
why<font color="#E5E5E5"> kernel-mode research well</font>

33
00:01:07,170 --> 00:01:10,619
<font color="#CCCCCC">kernel-mode</font><font color="#E5E5E5"> threats</font><font color="#CCCCCC"> they're significant</font>

34
00:01:09,210 --> 00:01:12,689
because<font color="#E5E5E5"> they generally have total</font>

35
00:01:10,619 --> 00:01:14,549
control<font color="#E5E5E5"> over the affected machine they</font>

36
00:01:12,689 --> 00:01:16,619
can<font color="#CCCCCC"> essentially rewrite the rules of the</font>

37
00:01:14,549 --> 00:01:18,119
operating system and easily tamper with

38
00:01:16,619 --> 00:01:20,970
security<font color="#CCCCCC"> software because they run</font><font color="#E5E5E5"> at</font>

39
00:01:18,119 --> 00:01:22,200
the same privilege level apt groups have

40
00:01:20,970 --> 00:01:24,298
realized these benefits<font color="#E5E5E5"> and are</font>

41
00:01:22,200 --> 00:01:26,640
basically<font color="#CCCCCC"> actively exploiting them to</font>

42
00:01:24,299 --> 00:01:28,320
stay ahead of defenders<font color="#E5E5E5"> so we hope this</font>

43
00:01:26,640 --> 00:01:31,079
talk increases the community's exposure

44
00:01:28,320 --> 00:01:34,669
and ultimately improve the industry's

45
00:01:31,079 --> 00:01:34,669
defensive posture against these<font color="#E5E5E5"> threats</font>

46
00:01:34,970 --> 00:01:39,929
<font color="#E5E5E5">so basically the first generation kernel</font>

47
00:01:37,950 --> 00:01:41,460
malware<font color="#E5E5E5"> you know roughly about</font><font color="#CCCCCC"> 10</font><font color="#E5E5E5"> years</font>

48
00:01:39,930 --> 00:01:43,530
<font color="#E5E5E5">ago is really when there was true</font>

49
00:01:41,460 --> 00:01:46,020
widespread kernel threats came<font color="#E5E5E5"> onto the</font>

50
00:01:43,530 --> 00:01:48,390
scene at the time<font color="#E5E5E5"> there was basically no</font>

51
00:01:46,020 --> 00:01:50,729
defenses baked<font color="#E5E5E5"> into Windows to counter</font>

52
00:01:48,390 --> 00:01:53,009
these threats<font color="#E5E5E5"> so they flourished</font><font color="#CCCCCC"> you</font>

53
00:01:50,729 --> 00:01:55,259
know<font color="#E5E5E5"> Russ</font><font color="#CCCCCC"> stock T</font><font color="#E5E5E5"> DSS your access were a</font>

54
00:01:53,009 --> 00:01:57,810
few big ones where they had botnets<font color="#CCCCCC"> and</font>

55
00:01:55,259 --> 00:01:59,700
<font color="#CCCCCC">numbered in the millions</font><font color="#E5E5E5"> they all shared</font>

56
00:01:57,810 --> 00:02:01,860
a<font color="#CCCCCC"> similar technique for gaining ring</font>

57
00:01:59,700 --> 00:02:05,159
<font color="#E5E5E5">zero code execution which was basically</font>

58
00:02:01,860 --> 00:02:06,750
<font color="#E5E5E5">to infect drivers on disk and when those</font>

59
00:02:05,159 --> 00:02:09,509
drivers<font color="#E5E5E5"> would would load they would get</font>

60
00:02:06,750 --> 00:02:11,970
their kernel<font color="#CCCCCC"> code execution</font><font color="#E5E5E5"> they</font><font color="#CCCCCC"> also</font>

61
00:02:09,508 --> 00:02:13,500
commonly deployed<font color="#E5E5E5"> rootkit style</font>

62
00:02:11,970 --> 00:02:14,940
technologies so

63
00:02:13,500 --> 00:02:17,130
you know hiding files network

64
00:02:14,940 --> 00:02:21,030
connections<font color="#E5E5E5"> registry</font><font color="#CCCCCC"> keys</font><font color="#E5E5E5"> that sort of</font>

65
00:02:17,130 --> 00:02:23,220
thing<font color="#CCCCCC"> so in</font><font color="#E5E5E5"> response to</font><font color="#CCCCCC"> this widespread</font>

66
00:02:21,030 --> 00:02:24,959
malware<font color="#E5E5E5"> Microsoft released two</font>

67
00:02:23,220 --> 00:02:27,150
protections<font color="#E5E5E5"> the first was patched guard</font>

68
00:02:24,959 --> 00:02:28,500
<font color="#E5E5E5">to directly go after the</font><font color="#CCCCCC"> rootkit</font>

69
00:02:27,150 --> 00:02:29,610
techniques that they were using

70
00:02:28,500 --> 00:02:31,380
so basically patch guard will

71
00:02:29,610 --> 00:02:33,630
continually scan the<font color="#CCCCCC"> system and look for</font>

72
00:02:31,380 --> 00:02:35,700
hooks<font color="#E5E5E5"> or modifications</font><font color="#CCCCCC"> to kernel data</font>

73
00:02:33,630 --> 00:02:37,859
<font color="#E5E5E5">structures and if anything is detected</font>

74
00:02:35,700 --> 00:02:39,720
it will crash the<font color="#CCCCCC"> Box patch guard itself</font>

75
00:02:37,860 --> 00:02:41,940
<font color="#E5E5E5">is not perfect</font><font color="#CCCCCC"> it can</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> bypassed</font>

76
00:02:39,720 --> 00:02:43,620
<font color="#E5E5E5">defeated a number of ways but it's</font>

77
00:02:41,940 --> 00:02:45,630
continually evolving so that makes it a

78
00:02:43,620 --> 00:02:47,519
moving target<font color="#CCCCCC"> for adversaries</font><font color="#E5E5E5"> so you</font>

79
00:02:45,630 --> 00:02:49,590
<font color="#E5E5E5">know what they</font><font color="#CCCCCC"> write today might be</font>

80
00:02:47,519 --> 00:02:51,209
caught by patch guard tomorrow and<font color="#E5E5E5"> the</font>

81
00:02:49,590 --> 00:02:55,530
next protection is<font color="#CCCCCC"> drivers signature</font>

82
00:02:51,209 --> 00:02:57,420
enforcement so<font color="#E5E5E5"> also known as DSC and DSC</font>

83
00:02:55,530 --> 00:02:59,370
requires that<font color="#E5E5E5"> all drivers have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

84
00:02:57,420 --> 00:03:01,140
signed<font color="#E5E5E5"> by a valid signature before</font>

85
00:02:59,370 --> 00:03:02,430
<font color="#CCCCCC">they're allowed to</font><font color="#E5E5E5"> load on the</font><font color="#CCCCCC"> system</font>

86
00:03:01,140 --> 00:03:04,890
and<font color="#E5E5E5"> this was originally on Windows</font><font color="#CCCCCC"> Vista</font>

87
00:03:02,430 --> 00:03:06,810
<font color="#CCCCCC">and basically it blocks malware</font><font color="#E5E5E5"> that's</font>

88
00:03:04,890 --> 00:03:09,268
trying to infect<font color="#E5E5E5"> drivers on</font><font color="#CCCCCC"> disks it's</font>

89
00:03:06,810 --> 00:03:11,489
breaking<font color="#CCCCCC"> the digital signature</font><font color="#E5E5E5"> also</font>

90
00:03:09,269 --> 00:03:13,890
<font color="#E5E5E5">prevents just unsigned malware drivers</font>

91
00:03:11,489 --> 00:03:15,600
from being loaded<font color="#E5E5E5"> both of these defenses</font>

92
00:03:13,890 --> 00:03:17,458
<font color="#E5E5E5">were originally for 64-bit systems and</font>

93
00:03:15,600 --> 00:03:20,459
when they first<font color="#E5E5E5"> came</font><font color="#CCCCCC"> out at the</font><font color="#E5E5E5"> scene it</font>

94
00:03:17,459 --> 00:03:21,810
just<font color="#E5E5E5"> it wasn't a 64-bit operating system</font>

95
00:03:20,459 --> 00:03:24,090
market<font color="#CCCCCC"> share</font><font color="#E5E5E5"> was very low and became a</font>

96
00:03:21,810 --> 00:03:27,859
lot more important as people<font color="#E5E5E5"> started</font>

97
00:03:24,090 --> 00:03:30,900
<font color="#E5E5E5">shifting over to 64-bit Windows versions</font>

98
00:03:27,859 --> 00:03:32,579
so in order to evade<font color="#E5E5E5"> these tech both</font>

99
00:03:30,900 --> 00:03:34,410
<font color="#E5E5E5">driver signature enforcement in some</font>

100
00:03:32,579 --> 00:03:37,709
cases patch guard<font color="#E5E5E5"> malware authors began</font>

101
00:03:34,410 --> 00:03:40,530
moving<font color="#E5E5E5"> to boot kits so basically boot</font>

102
00:03:37,709 --> 00:03:43,590
kits<font color="#E5E5E5"> tamper really early</font><font color="#CCCCCC"> offering system</font>

103
00:03:40,530 --> 00:03:45,150
boot<font color="#E5E5E5"> code such as by modifying the MBR</font>

104
00:03:43,590 --> 00:03:48,690
or<font color="#CCCCCC"> VBR or any other OS specific</font>

105
00:03:45,150 --> 00:03:51,209
<font color="#E5E5E5">bootloader code and basically you know</font>

106
00:03:48,690 --> 00:03:53,880
<font color="#E5E5E5">get code execution</font><font color="#CCCCCC"> before</font><font color="#E5E5E5"> the OS even</font>

107
00:03:51,209 --> 00:03:55,829
starts up and there's a number<font color="#CCCCCC"> of</font>

108
00:03:53,880 --> 00:03:58,319
<font color="#CCCCCC">different boot kits over the years one</font>

109
00:03:55,829 --> 00:04:00,480
<font color="#CCCCCC">of them X Page was notable it actually</font>

110
00:03:58,319 --> 00:04:01,798
hooked the system so early on that when

111
00:04:00,480 --> 00:04:04,140
patch guard would first initialize

112
00:04:01,799 --> 00:04:05,430
itself it would scan through the changes

113
00:04:04,140 --> 00:04:07,440
that have made and basically<font color="#E5E5E5"> trust those</font>

114
00:04:05,430 --> 00:04:09,299
changes<font color="#E5E5E5"> and then if you tried to unhook</font>

115
00:04:07,440 --> 00:04:10,680
<font color="#E5E5E5">it or tamper with the the rootkit then</font>

116
00:04:09,299 --> 00:04:12,299
it would crash<font color="#CCCCCC"> the box</font><font color="#E5E5E5"> so is this</font>

117
00:04:10,680 --> 00:04:15,510
effectively protected by patch guard I

118
00:04:12,299 --> 00:04:18,150
thought that was interesting<font color="#E5E5E5"> so to</font>

119
00:04:15,510 --> 00:04:19,978
counter boot kit basically<font color="#E5E5E5"> the</font><font color="#CCCCCC"> solution</font>

120
00:04:18,149 --> 00:04:22,048
was secure boot and with this technology

121
00:04:19,978 --> 00:04:24,090
<font color="#CCCCCC">the system firmware itself</font><font color="#E5E5E5"> actually</font>

122
00:04:22,048 --> 00:04:25,260
<font color="#E5E5E5">validates the digital signature of the</font>

123
00:04:24,090 --> 00:04:28,560
boot loading code

124
00:04:25,260 --> 00:04:30,000
<font color="#E5E5E5">or transferring control and recent</font>

125
00:04:28,560 --> 00:04:31,800
advancements have actually<font color="#E5E5E5"> moved this</font>

126
00:04:30,000 --> 00:04:35,250
this<font color="#CCCCCC"> verification check</font><font color="#E5E5E5"> even earlier</font>

127
00:04:31,800 --> 00:04:37,680
such as<font color="#E5E5E5"> Intel boot guard</font><font color="#CCCCCC"> there's been a</font>

128
00:04:35,250 --> 00:04:39,390
lot of research recently<font color="#CCCCCC"> in</font><font color="#E5E5E5"> basically</font>

129
00:04:37,680 --> 00:04:42,960
planting malware in the firmware itself

130
00:04:39,390 --> 00:04:44,070
<font color="#E5E5E5">so it's basically you want the the chain</font>

131
00:04:42,960 --> 00:04:46,140
of trust<font color="#E5E5E5"> and start as</font><font color="#CCCCCC"> early as possible</font>

132
00:04:44,070 --> 00:04:47,280
<font color="#CCCCCC">where now you can even have that that</font>

133
00:04:46,140 --> 00:04:49,020
chain<font color="#E5E5E5"> of trust go all the way back</font><font color="#CCCCCC"> to</font>

134
00:04:47,280 --> 00:04:50,340
the<font color="#E5E5E5"> hardware itself and the CPU will</font>

135
00:04:49,020 --> 00:04:55,890
validate<font color="#E5E5E5"> the firmware before</font>

136
00:04:50,340 --> 00:04:58,169
<font color="#E5E5E5">transferring control so</font><font color="#CCCCCC"> driver signature</font>

137
00:04:55,890 --> 00:05:00,060
enforcement secure boot in patch guard

138
00:04:58,170 --> 00:05:02,340
have definitely dramatically reduced the

139
00:05:00,060 --> 00:05:03,390
<font color="#CCCCCC">overall volume</font><font color="#E5E5E5"> of the the commodity</font>

140
00:05:02,340 --> 00:05:04,859
kernel-mode threats you know<font color="#E5E5E5"> we don't</font>

141
00:05:03,390 --> 00:05:06,270
<font color="#E5E5E5">really see botnets numbering the</font>

142
00:05:04,860 --> 00:05:09,720
millions of using<font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> of malware</font>

143
00:05:06,270 --> 00:05:13,260
anymore it<font color="#E5E5E5"> really has not stopped the</font>

144
00:05:09,720 --> 00:05:15,960
continuous backdrop of<font color="#E5E5E5"> apt level threats</font>

145
00:05:13,260 --> 00:05:17,490
that were using<font color="#E5E5E5"> Kermode techniques and</font>

146
00:05:15,960 --> 00:05:19,650
one of the really<font color="#CCCCCC"> common themes among</font>

147
00:05:17,490 --> 00:05:22,260
<font color="#E5E5E5">apt level kernel malware has been to</font>

148
00:05:19,650 --> 00:05:24,090
actually install a legitimate sign but

149
00:05:22,260 --> 00:05:25,950
vulnerable driver on the box and then

150
00:05:24,090 --> 00:05:27,989
exploiting that<font color="#E5E5E5"> in order</font><font color="#CCCCCC"> to gain kernel</font>

151
00:05:25,950 --> 00:05:30,360
code execution<font color="#E5E5E5"> thereby sidestepping</font>

152
00:05:27,990 --> 00:05:32,280
driver<font color="#E5E5E5"> signature enforcement and another</font>

153
00:05:30,360 --> 00:05:33,930
<font color="#E5E5E5">technique that's notable is just a steal</font>

154
00:05:32,280 --> 00:05:35,909
a digital certificate<font color="#CCCCCC"> from a legitimate</font>

155
00:05:33,930 --> 00:05:37,890
<font color="#E5E5E5">company and then just sign your malware</font>

156
00:05:35,910 --> 00:05:39,480
with that which you know gets you loaded

157
00:05:37,890 --> 00:05:43,770
also makes you look<font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot more</font>

158
00:05:39,480 --> 00:05:45,180
legitimate on the<font color="#CCCCCC"> endpoint even</font><font color="#E5E5E5"> more</font>

159
00:05:43,770 --> 00:05:47,580
advanced<font color="#E5E5E5"> nation-state threats such as</font>

160
00:05:45,180 --> 00:05:48,870
<font color="#CCCCCC">Dooku don't even</font><font color="#E5E5E5"> bother with bringing a</font>

161
00:05:47,580 --> 00:05:50,490
vulnerable driver<font color="#E5E5E5"> they'll actually</font>

162
00:05:48,870 --> 00:05:54,140
exploit the kernel directly with a

163
00:05:50,490 --> 00:05:56,730
<font color="#CCCCCC">zero-day</font><font color="#E5E5E5"> so Dooku 2.0 for example</font>

164
00:05:54,140 --> 00:05:57,330
exploited a vulnerability<font color="#E5E5E5"> in</font><font color="#CCCCCC"> win32 que</font>

165
00:05:56,730 --> 00:05:59,850
<font color="#CCCCCC">Texas</font>

166
00:05:57,330 --> 00:06:02,310
it was<font color="#E5E5E5"> also notable that it did some</font>

167
00:05:59,850 --> 00:06:04,260
kernel hooking of<font color="#E5E5E5"> the Kaspersky driver</font>

168
00:06:02,310 --> 00:06:06,360
<font color="#E5E5E5">and basically what this did was allowed</font>

169
00:06:04,260 --> 00:06:08,400
them<font color="#CCCCCC"> to convince</font><font color="#E5E5E5"> the Kaspersky driver</font>

170
00:06:06,360 --> 00:06:10,830
that their use remote injected code was

171
00:06:08,400 --> 00:06:11,880
actually<font color="#E5E5E5"> trusted Kaspersky code and this</font>

172
00:06:10,830 --> 00:06:14,490
<font color="#CCCCCC">is not</font><font color="#E5E5E5"> really a vulnerability</font><font color="#CCCCCC"> with</font>

173
00:06:11,880 --> 00:06:15,659
Kaspersky<font color="#CCCCCC"> this is kind of</font><font color="#E5E5E5"> a problem in</font>

174
00:06:14,490 --> 00:06:17,490
<font color="#CCCCCC">the inherent trust that you</font><font color="#E5E5E5"> have once</font>

175
00:06:15,660 --> 00:06:19,410
you<font color="#E5E5E5"> gain kernel code execution but</font>

176
00:06:17,490 --> 00:06:20,940
basically Kaspersky would<font color="#E5E5E5"> wait list</font>

177
00:06:19,410 --> 00:06:22,710
their process completely wouldn't alert

178
00:06:20,940 --> 00:06:24,060
on<font color="#CCCCCC"> anything</font><font color="#E5E5E5"> and will also protect that</font>

179
00:06:22,710 --> 00:06:27,780
process from being<font color="#E5E5E5"> terminated by</font><font color="#CCCCCC"> the</font>

180
00:06:24,060 --> 00:06:30,540
admins<font color="#E5E5E5"> or other security software for</font>

181
00:06:27,780 --> 00:06:33,239
<font color="#E5E5E5">actual persistence the</font><font color="#CCCCCC"> dooku 2.0 actors</font>

182
00:06:30,540 --> 00:06:35,040
also<font color="#E5E5E5"> they</font><font color="#CCCCCC"> they used a malicious sign</font>

183
00:06:33,240 --> 00:06:36,660
<font color="#E5E5E5">driver from a stolen</font><font color="#CCCCCC"> Foxconn certificate</font>

184
00:06:35,040 --> 00:06:37,310
basically they would drop<font color="#E5E5E5"> that</font><font color="#CCCCCC"> on</font>

185
00:06:36,660 --> 00:06:38,940
certain

186
00:06:37,310 --> 00:06:41,070
<font color="#E5E5E5">computers on the network that</font>

187
00:06:38,940 --> 00:06:42,960
external access they would connect<font color="#E5E5E5"> into</font>

188
00:06:41,070 --> 00:06:45,120
that that computer<font color="#CCCCCC"> and then route their</font>

189
00:06:42,960 --> 00:06:50,250
malicious<font color="#CCCCCC"> traffic to internal machines</font>

190
00:06:45,120 --> 00:06:51,750
from<font color="#CCCCCC"> their double pulsar is also worth a</font>

191
00:06:50,250 --> 00:06:54,210
strong mention which<font color="#E5E5E5"> is basically a</font>

192
00:06:51,750 --> 00:06:55,320
lightweight<font color="#E5E5E5"> kernel-mode implant that</font>

193
00:06:54,210 --> 00:06:58,080
lives only in<font color="#E5E5E5"> memory</font>

194
00:06:55,320 --> 00:06:59,760
no reboot persistence<font color="#CCCCCC"> it's typically</font>

195
00:06:58,080 --> 00:07:02,419
loaded<font color="#E5E5E5"> onto a system using a remote ring</font>

196
00:06:59,760 --> 00:07:05,700
<font color="#E5E5E5">zero exploit such as eternal blue and</font>

197
00:07:02,420 --> 00:07:06,960
double pulsar allows attackers to

198
00:07:05,700 --> 00:07:09,330
basically get stealthy remote access

199
00:07:06,960 --> 00:07:11,190
under the<font color="#E5E5E5"> system and do network</font>

200
00:07:09,330 --> 00:07:14,280
communications by hooking<font color="#E5E5E5"> a function</font>

201
00:07:11,190 --> 00:07:16,080
<font color="#CCCCCC">pointer in the SMB one driver</font><font color="#E5E5E5"> and</font>

202
00:07:14,280 --> 00:07:17,340
basically<font color="#E5E5E5"> at the time</font><font color="#CCCCCC"> patch guard didn't</font>

203
00:07:16,080 --> 00:07:18,479
care<font color="#E5E5E5"> about this function pointer wasn't</font>

204
00:07:17,340 --> 00:07:21,179
<font color="#E5E5E5">checking it so I was</font><font color="#CCCCCC"> able to</font><font color="#E5E5E5"> evade that</font>

205
00:07:18,480 --> 00:07:24,450
<font color="#E5E5E5">and when you actually connect in a</font>

206
00:07:21,180 --> 00:07:25,980
double pulsar the<font color="#E5E5E5"> you can give it more</font>

207
00:07:24,450 --> 00:07:27,719
kernel<font color="#E5E5E5"> code to execute</font><font color="#CCCCCC"> but more</font>

208
00:07:25,980 --> 00:07:29,640
typically you can pass in a user mode

209
00:07:27,720 --> 00:07:32,790
module that<font color="#E5E5E5"> will then get injected that</font>

210
00:07:29,640 --> 00:07:34,800
has a<font color="#E5E5E5"> fully featured implant it actually</font>

211
00:07:32,790 --> 00:07:36,720
became pretty<font color="#CCCCCC"> widespread after</font><font color="#E5E5E5"> the the</font>

212
00:07:34,800 --> 00:07:38,730
code for double pulsar was leaked<font color="#E5E5E5"> so</font>

213
00:07:36,720 --> 00:07:40,440
it's been picked up by other<font color="#E5E5E5"> adversaries</font>

214
00:07:38,730 --> 00:07:46,620
<font color="#E5E5E5">and used for example</font><font color="#CCCCCC"> like in</font><font color="#E5E5E5"> the don't</font>

215
00:07:40,440 --> 00:07:47,910
wanna cry attacks to mitigate you know

216
00:07:46,620 --> 00:07:49,020
these more advanced attacks that<font color="#E5E5E5"> are</font>

217
00:07:47,910 --> 00:07:51,000
exploiting their way into the kernel

218
00:07:49,020 --> 00:07:54,000
<font color="#E5E5E5">Microsoft released virtualization based</font>

219
00:07:51,000 --> 00:07:55,740
<font color="#CCCCCC">security or VBS and basically with VBS</font>

220
00:07:54,000 --> 00:07:57,960
the kernel itself<font color="#E5E5E5"> is no longer</font>

221
00:07:55,740 --> 00:07:59,400
considered trusted<font color="#E5E5E5"> its sandbox by a</font>

222
00:07:57,960 --> 00:08:00,479
hypervisor<font color="#E5E5E5"> and there's a</font><font color="#CCCCCC"> number</font><font color="#E5E5E5"> of</font>

223
00:07:59,400 --> 00:08:02,400
technologies built on top of

224
00:08:00,480 --> 00:08:06,330
virtualization<font color="#E5E5E5"> based security</font><font color="#CCCCCC"> ones</font>

225
00:08:02,400 --> 00:08:09,270
hypervisor<font color="#E5E5E5"> code integrity and hypervisor</font>

226
00:08:06,330 --> 00:08:11,130
code integrity known as<font color="#CCCCCC"> hvc I basically</font>

227
00:08:09,270 --> 00:08:13,440
requires all kernel<font color="#E5E5E5"> code to be signed</font>

228
00:08:11,130 --> 00:08:17,610
<font color="#E5E5E5">and it's enforced by the hypervisor you</font>

229
00:08:13,440 --> 00:08:19,950
can't have read write execute memory<font color="#CCCCCC"> HBC</font>

230
00:08:17,610 --> 00:08:21,870
<font color="#E5E5E5">I basically stops</font><font color="#CCCCCC"> a number of kernel</font>

231
00:08:19,950 --> 00:08:23,849
mode threats including double<font color="#E5E5E5"> pulsar and</font>

232
00:08:21,870 --> 00:08:26,820
also things like turtle a driver loader

233
00:08:23,850 --> 00:08:28,620
<font color="#E5E5E5">and</font><font color="#CCCCCC"> the other technologies</font><font color="#E5E5E5"> like cred</font>

234
00:08:26,820 --> 00:08:31,169
guard<font color="#E5E5E5"> use the hypervisor to protect</font>

235
00:08:28,620 --> 00:08:35,219
credentials from<font color="#E5E5E5"> the system from tools</font>

236
00:08:31,169 --> 00:08:36,838
like<font color="#E5E5E5"> me me cats so this chart</font><font color="#CCCCCC"> kind of</font>

237
00:08:35,219 --> 00:08:39,409
summarizes what<font color="#CCCCCC"> we've kind of talked</font>

238
00:08:36,839 --> 00:08:41,099
about<font color="#CCCCCC"> over</font><font color="#E5E5E5"> the last decade we've got the</font>

239
00:08:39,409 --> 00:08:43,110
attacker techniques and the

240
00:08:41,099 --> 00:08:45,000
corresponding defenses<font color="#E5E5E5"> so in the upper</font>

241
00:08:43,110 --> 00:08:46,320
left you know originally malware authors

242
00:08:45,000 --> 00:08:48,000
are going nuts there were no<font color="#E5E5E5"> defenses</font>

243
00:08:46,320 --> 00:08:49,340
whatsoever<font color="#CCCCCC"> just loading their code</font>

244
00:08:48,000 --> 00:08:51,110
<font color="#E5E5E5">directly</font>

245
00:08:49,340 --> 00:08:52,310
the<font color="#CCCCCC"> kernel-mode</font><font color="#E5E5E5"> from their Microsoft</font>

246
00:08:51,110 --> 00:08:54,290
<font color="#E5E5E5">released patch guard and Driver</font>

247
00:08:52,310 --> 00:08:56,660
signature enforcement attackers<font color="#CCCCCC"> design</font>

248
00:08:54,290 --> 00:08:59,380
moved to using boot kits which was then

249
00:08:56,660 --> 00:09:02,240
countered with<font color="#E5E5E5"> secure boot and then</font>

250
00:08:59,380 --> 00:09:04,580
adversary started using exploitation<font color="#E5E5E5"> in</font>

251
00:09:02,240 --> 00:09:06,050
order to load their code into in the

252
00:09:04,580 --> 00:09:07,640
kernel and<font color="#E5E5E5"> then finally Microsoft</font>

253
00:09:06,050 --> 00:09:11,390
released virtualization<font color="#CCCCCC"> based security</font>

254
00:09:07,640 --> 00:09:12,920
<font color="#E5E5E5">to counter that</font><font color="#CCCCCC"> and just to kind of show</font>

255
00:09:11,390 --> 00:09:14,990
<font color="#CCCCCC">we talked about</font><font color="#E5E5E5"> some of the more</font>

256
00:09:12,920 --> 00:09:16,939
important mitigations and protections

257
00:09:14,990 --> 00:09:18,950
<font color="#E5E5E5">built in by but there's actually a lot</font>

258
00:09:16,940 --> 00:09:20,600
more<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we didn't cover</font><font color="#E5E5E5"> and this just</font>

259
00:09:18,950 --> 00:09:21,950
kind<font color="#CCCCCC"> of shows that</font><font color="#E5E5E5"> Microsoft this put of</font>

260
00:09:20,600 --> 00:09:23,720
a lot<font color="#E5E5E5"> of investment</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> this over the</font>

261
00:09:21,950 --> 00:09:26,740
years<font color="#E5E5E5"> increasing investment more</font>

262
00:09:23,720 --> 00:09:28,610
<font color="#E5E5E5">recently but one</font><font color="#CCCCCC"> of the problems is the</font>

263
00:09:26,740 --> 00:09:31,130
<font color="#E5E5E5">adoption rate you know there's still</font>

264
00:09:28,610 --> 00:09:32,510
tons of systems running<font color="#E5E5E5"> Windows 7 so if</font>

265
00:09:31,130 --> 00:09:34,070
the the protections are only in the

266
00:09:32,510 --> 00:09:35,660
latest and<font color="#CCCCCC"> greatest version of Windows</font>

267
00:09:34,070 --> 00:09:39,710
Windows 10 then a lot of<font color="#CCCCCC"> people are</font>

268
00:09:35,660 --> 00:09:40,880
you're not getting that benefit<font color="#E5E5E5"> okay</font>

269
00:09:39,710 --> 00:09:43,070
we're<font color="#CCCCCC"> moving on to part two where we're</font>

270
00:09:40,880 --> 00:09:47,480
gonna deep dive into our own offensive

271
00:09:43,070 --> 00:09:48,950
<font color="#E5E5E5">kernel-mode tradecraft so endgame the</font>

272
00:09:47,480 --> 00:09:51,440
<font color="#E5E5E5">company we work for periodically</font>

273
00:09:48,950 --> 00:09:52,970
conducts internal red vs. blue exercises

274
00:09:51,440 --> 00:09:54,560
both<font color="#E5E5E5"> the</font><font color="#CCCCCC"> test</font><font color="#E5E5E5"> our product and</font><font color="#CCCCCC"> to test</font>

275
00:09:52,970 --> 00:09:57,080
our own<font color="#E5E5E5"> skills basically from a red and</font>

276
00:09:54,560 --> 00:09:59,390
blue perspective<font color="#CCCCCC"> Gabe and I are on the</font>

277
00:09:57,080 --> 00:10:00,980
<font color="#E5E5E5">red team and basically were tasked with</font>

278
00:09:59,390 --> 00:10:03,050
emulating adversaries from varying

279
00:10:00,980 --> 00:10:04,580
sophistication levels so we<font color="#E5E5E5"> want to try</font>

280
00:10:03,050 --> 00:10:06,410
<font color="#CCCCCC">to emulate a really noisy you know</font>

281
00:10:04,580 --> 00:10:08,270
commodity actor but<font color="#E5E5E5"> we also want to try</font>

282
00:10:06,410 --> 00:10:09,890
<font color="#E5E5E5">to emulate the</font><font color="#CCCCCC"> most advanced</font><font color="#E5E5E5"> apts to</font>

283
00:10:08,270 --> 00:10:11,660
sort<font color="#E5E5E5"> of gauge like where our blue</font><font color="#CCCCCC"> team's</font>

284
00:10:09,890 --> 00:10:15,199
are at and<font color="#E5E5E5"> how well they can detect it</font>

285
00:10:11,660 --> 00:10:17,420
<font color="#CCCCCC">so as far as the more advanced technique</font>

286
00:10:15,200 --> 00:10:19,850
<font color="#E5E5E5">to we what we had done in the past is to</font>

287
00:10:17,420 --> 00:10:21,949
just live sort of<font color="#CCCCCC"> fire less techniques</font>

288
00:10:19,850 --> 00:10:24,170
in user mode<font color="#CCCCCC"> but our blue team was</font>

289
00:10:21,950 --> 00:10:25,160
<font color="#CCCCCC">getting much better at detecting us</font><font color="#E5E5E5"> with</font>

290
00:10:24,170 --> 00:10:26,900
these<font color="#E5E5E5"> techniques they're basically</font>

291
00:10:25,160 --> 00:10:28,579
upping their game<font color="#E5E5E5"> so in the last</font>

292
00:10:26,900 --> 00:10:30,860
<font color="#E5E5E5">iteration of our red</font><font color="#CCCCCC"> versus blue we</font>

293
00:10:28,580 --> 00:10:33,050
decided to up our<font color="#CCCCCC"> game and we looked at</font>

294
00:10:30,860 --> 00:10:35,600
doing<font color="#CCCCCC"> kernel mode techniques and to try</font>

295
00:10:33,050 --> 00:10:37,640
<font color="#E5E5E5">to evade detection and at this point</font>

296
00:10:35,600 --> 00:10:39,290
<font color="#E5E5E5">personally for me I had done kernel mode</font>

297
00:10:37,640 --> 00:10:40,960
development in a while so<font color="#E5E5E5"> you know I had</font>

298
00:10:39,290 --> 00:10:43,490
to start<font color="#E5E5E5"> from scratch we might build</font>

299
00:10:40,960 --> 00:10:46,010
environment debugging environment<font color="#CCCCCC"> and I</font>

300
00:10:43,490 --> 00:10:47,930
just<font color="#E5E5E5"> wanted to share</font><font color="#CCCCCC"> if you're new in a</font>

301
00:10:46,010 --> 00:10:50,569
kernel development<font color="#E5E5E5"> definitely put time</font>

302
00:10:47,930 --> 00:10:52,609
into getting your debugging<font color="#CCCCCC"> setup down</font>

303
00:10:50,570 --> 00:10:54,260
<font color="#E5E5E5">to the point where you can build a</font>

304
00:10:52,610 --> 00:10:56,690
driver get it loaded into<font color="#E5E5E5"> a virtual</font>

305
00:10:54,260 --> 00:10:58,939
<font color="#CCCCCC">machine load it in the</font><font color="#E5E5E5"> virtual machine</font>

306
00:10:56,690 --> 00:11:01,640
crash crash the<font color="#CCCCCC"> Box blue screen the</font><font color="#E5E5E5"> box</font>

307
00:10:58,940 --> 00:11:02,610
<font color="#E5E5E5">whatever and and triage</font><font color="#CCCCCC"> that so you can</font>

308
00:11:01,640 --> 00:11:04,529
figure out what went<font color="#E5E5E5"> wrong</font>

309
00:11:02,610 --> 00:11:05,700
and then iterate<font color="#E5E5E5"> on</font><font color="#CCCCCC"> that process so</font>

310
00:11:04,529 --> 00:11:08,250
basically you<font color="#E5E5E5"> get really good really</font>

311
00:11:05,700 --> 00:11:09,810
quickly at<font color="#E5E5E5"> triage and blue screens if</font>

312
00:11:08,250 --> 00:11:11,070
you can get<font color="#E5E5E5"> that the total</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> for that</font>

313
00:11:09,810 --> 00:11:12,569
<font color="#E5E5E5">process down</font><font color="#CCCCCC"> to a couple</font><font color="#E5E5E5"> minutes then</font>

314
00:11:11,070 --> 00:11:13,709
<font color="#E5E5E5">you can compensate for</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> really</font>

315
00:11:12,570 --> 00:11:14,850
knowing what<font color="#E5E5E5"> you're</font><font color="#CCCCCC"> doing like</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> don't</font>

316
00:11:13,709 --> 00:11:16,260
<font color="#E5E5E5">really know what I'm</font><font color="#CCCCCC"> doing I can just</font>

317
00:11:14,850 --> 00:11:18,750
read documentation<font color="#E5E5E5"> and sort of try out</font>

318
00:11:16,260 --> 00:11:20,760
<font color="#E5E5E5">things crash</font><font color="#CCCCCC"> okay no go back</font><font color="#E5E5E5"> and keep</font>

319
00:11:18,750 --> 00:11:24,450
<font color="#E5E5E5">repeating that process sort of brute</font>

320
00:11:20,760 --> 00:11:26,069
force my way through it<font color="#E5E5E5"> but one of the</font>

321
00:11:24,450 --> 00:11:28,980
<font color="#E5E5E5">the key components that we wanted to</font><font color="#CCCCCC"> use</font>

322
00:11:26,070 --> 00:11:31,800
<font color="#CCCCCC">in our kernel mode implant</font><font color="#E5E5E5"> was going to</font>

323
00:11:28,980 --> 00:11:35,640
<font color="#E5E5E5">be</font><font color="#CCCCCC"> turlet driver loader so this is</font>

324
00:11:31,800 --> 00:11:37,649
written<font color="#E5E5E5"> by</font><font color="#CCCCCC"> h firefox i github it's</font>

325
00:11:35,640 --> 00:11:39,569
freely<font color="#E5E5E5"> available and basically it's an</font>

326
00:11:37,649 --> 00:11:41,579
<font color="#CCCCCC">open-source implementation of the the</font>

327
00:11:39,570 --> 00:11:44,430
Turla<font color="#E5E5E5"> exploit that they use to get code</font>

328
00:11:41,579 --> 00:11:46,260
execution<font color="#E5E5E5"> and in a nutshell</font><font color="#CCCCCC"> it'll</font>

329
00:11:44,430 --> 00:11:48,390
basically<font color="#E5E5E5"> drop a VirtualBox driver</font>

330
00:11:46,260 --> 00:11:50,220
installed on the<font color="#CCCCCC"> system it'll exploit</font>

331
00:11:48,390 --> 00:11:52,110
this VirtualBox driver<font color="#E5E5E5"> to execute</font>

332
00:11:50,220 --> 00:11:54,450
<font color="#CCCCCC">shellcode in kernel mode</font><font color="#E5E5E5"> and then the</font>

333
00:11:52,110 --> 00:11:56,670
<font color="#E5E5E5">the</font><font color="#CCCCCC"> shellcode</font><font color="#E5E5E5"> will basically memory</font>

334
00:11:54,450 --> 00:12:00,450
module style map a driver<font color="#CCCCCC"> into kernel</font>

335
00:11:56,670 --> 00:12:01,680
<font color="#E5E5E5">mode without it touching disk so that</font>

336
00:12:00,450 --> 00:12:04,680
<font color="#CCCCCC">basically helps us achieve two</font>

337
00:12:01,680 --> 00:12:07,199
objectives<font color="#CCCCCC"> we want to live in memory as</font>

338
00:12:04,680 --> 00:12:10,260
much as<font color="#CCCCCC"> possible</font><font color="#E5E5E5"> and also evade the</font>

339
00:12:07,199 --> 00:12:12,060
driver signature enforcement checks also

340
00:12:10,260 --> 00:12:14,730
<font color="#CCCCCC">for our implant design</font><font color="#E5E5E5"> we had some</font>

341
00:12:12,060 --> 00:12:17,729
<font color="#CCCCCC">high-level goals</font><font color="#E5E5E5"> so we</font><font color="#CCCCCC"> wanted to</font><font color="#E5E5E5"> be</font>

342
00:12:14,730 --> 00:12:20,089
<font color="#E5E5E5">kernel mode only</font><font color="#CCCCCC"> a lot of the kernel</font>

343
00:12:17,730 --> 00:12:22,620
malware that we've talked about

344
00:12:20,089 --> 00:12:23,880
<font color="#E5E5E5">typically use a hybrid where there's</font>

345
00:12:22,620 --> 00:12:26,550
some kernel components and there's also

346
00:12:23,880 --> 00:12:27,510
some user mode components<font color="#E5E5E5"> typically the</font>

347
00:12:26,550 --> 00:12:29,130
kernel mode<font color="#CCCCCC"> component will be as</font>

348
00:12:27,510 --> 00:12:30,839
lightweight<font color="#E5E5E5"> as possible</font><font color="#CCCCCC"> and they'll</font>

349
00:12:29,130 --> 00:12:33,269
inject the full payload<font color="#CCCCCC"> into user mode</font>

350
00:12:30,839 --> 00:12:35,250
<font color="#E5E5E5">but since our blue</font><font color="#CCCCCC"> team was really</font><font color="#E5E5E5"> good</font>

351
00:12:33,269 --> 00:12:36,630
at catching anything injected<font color="#E5E5E5"> in user</font>

352
00:12:35,250 --> 00:12:39,089
mode<font color="#E5E5E5"> that worried us so we didn't want</font>

353
00:12:36,630 --> 00:12:41,790
any user mode component<font color="#E5E5E5"> we wanted to</font>

354
00:12:39,089 --> 00:12:42,540
implant to<font color="#CCCCCC"> be fully kernel mode and that</font>

355
00:12:41,790 --> 00:12:45,269
<font color="#E5E5E5">mean we had to figure out how to</font>

356
00:12:42,540 --> 00:12:47,099
actually talk to<font color="#E5E5E5"> our driver over the</font>

357
00:12:45,269 --> 00:12:48,600
network<font color="#E5E5E5"> thankfully Microsoft has a</font>

358
00:12:47,100 --> 00:12:50,279
<font color="#E5E5E5">library for actually doing this from</font>

359
00:12:48,600 --> 00:12:52,769
kernel mode<font color="#E5E5E5"> it's called wind socket</font>

360
00:12:50,279 --> 00:12:55,620
kernel<font color="#E5E5E5"> and basically it's really</font>

361
00:12:52,769 --> 00:12:57,120
<font color="#CCCCCC">well-documented there's a</font><font color="#E5E5E5"> lot of sample</font>

362
00:12:55,620 --> 00:12:58,649
source code that you<font color="#E5E5E5"> can use so we</font>

363
00:12:57,120 --> 00:13:00,329
<font color="#E5E5E5">pretty</font><font color="#CCCCCC"> much just you know read through</font>

364
00:12:58,649 --> 00:13:02,550
some<font color="#E5E5E5"> of documentation and copy pasted</font>

365
00:13:00,329 --> 00:13:04,290
huge chunks of<font color="#CCCCCC"> their sample code</font><font color="#E5E5E5"> in</font>

366
00:13:02,550 --> 00:13:07,189
order to get kernel mode network sockets

367
00:13:04,290 --> 00:13:10,380
up and running<font color="#E5E5E5"> really quickly we also</font>

368
00:13:07,190 --> 00:13:12,569
wanted it to be trigger<font color="#CCCCCC"> oral inbound a</font>

369
00:13:10,380 --> 00:13:14,100
red vs. blue environment<font color="#E5E5E5"> doesn't have a</font>

370
00:13:12,569 --> 00:13:16,170
whole<font color="#E5E5E5"> lot of legitimate activity going</font>

371
00:13:14,100 --> 00:13:17,910
on<font color="#CCCCCC"> so we thought we would</font><font color="#E5E5E5"> stick out</font><font color="#CCCCCC"> it</font>

372
00:13:16,170 --> 00:13:20,339
like beaconing out<font color="#E5E5E5"> we would rather have</font>

373
00:13:17,910 --> 00:13:21,899
<font color="#E5E5E5">the implant</font><font color="#CCCCCC"> lie waiting</font><font color="#E5E5E5"> stealthy we can</font>

374
00:13:20,339 --> 00:13:25,800
connect in at any time<font color="#CCCCCC"> of our choosing</font>

375
00:13:21,899 --> 00:13:27,510
and<font color="#E5E5E5"> go interactive and then finally we</font>

376
00:13:25,800 --> 00:13:28,829
didn't<font color="#CCCCCC"> really care much for features of</font>

377
00:13:27,510 --> 00:13:31,019
the implant you<font color="#E5E5E5"> know really basic stuff</font>

378
00:13:28,829 --> 00:13:36,199
<font color="#E5E5E5">like file upload download was gonna be</font>

379
00:13:31,019 --> 00:13:39,630
perfect<font color="#CCCCCC"> for our for our use case now</font>

380
00:13:36,199 --> 00:13:40,769
<font color="#CCCCCC">leveraging</font><font color="#E5E5E5"> Turla driver loader</font><font color="#CCCCCC"> was</font><font color="#E5E5E5"> going</font>

381
00:13:39,630 --> 00:13:42,540
to be a<font color="#CCCCCC"> problem if we just you know</font>

382
00:13:40,769 --> 00:13:43,920
downloaded and ran it as is<font color="#E5E5E5"> because</font>

383
00:13:42,540 --> 00:13:46,380
turtle driver loader is just an

384
00:13:43,920 --> 00:13:47,880
executable<font color="#CCCCCC"> that</font><font color="#E5E5E5"> would run</font><font color="#CCCCCC"> off disk so</font>

385
00:13:46,380 --> 00:13:49,709
<font color="#E5E5E5">that was</font><font color="#CCCCCC"> gonna be a big problem for</font><font color="#E5E5E5"> us</font>

386
00:13:47,880 --> 00:13:53,519
<font color="#E5E5E5">you know our blue</font><font color="#CCCCCC"> team's</font><font color="#E5E5E5"> has access to</font>

387
00:13:49,709 --> 00:13:54,930
AI<font color="#E5E5E5"> malware detection</font><font color="#CCCCCC"> so we were really</font>

388
00:13:53,519 --> 00:13:57,420
<font color="#E5E5E5">worried about dropping any sort of</font>

389
00:13:54,930 --> 00:14:00,540
executable<font color="#E5E5E5"> to disk so we really wanted</font>

390
00:13:57,420 --> 00:14:02,120
to to get<font color="#E5E5E5"> that loaded through reusing</font>

391
00:14:00,540 --> 00:14:04,380
vilest techniques that were available

392
00:14:02,120 --> 00:14:06,180
<font color="#CCCCCC">you can do this through a number of</font>

393
00:14:04,380 --> 00:14:08,089
<font color="#CCCCCC">different scripting libraries like you</font>

394
00:14:06,180 --> 00:14:10,290
can you can map it right in<font color="#E5E5E5"> PowerShell</font>

395
00:14:08,089 --> 00:14:12,149
<font color="#E5E5E5">that one you know depending on what</font>

396
00:14:10,290 --> 00:14:14,550
security<font color="#CCCCCC"> software is running</font><font color="#E5E5E5"> could</font><font color="#CCCCCC"> add</font>

397
00:14:12,149 --> 00:14:16,740
<font color="#E5E5E5">visibility into PowerShell at the time</font>

398
00:14:14,550 --> 00:14:19,079
squiggly-doo<font color="#E5E5E5"> by Casey Smith was sort of</font>

399
00:14:16,740 --> 00:14:22,320
like<font color="#E5E5E5"> the</font><font color="#CCCCCC"> the new hotness</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> basically</font>

400
00:14:19,079 --> 00:14:23,819
<font color="#CCCCCC">that</font><font color="#E5E5E5"> was leveraging</font><font color="#CCCCCC"> reg server 32 and</font>

401
00:14:22,320 --> 00:14:25,680
you<font color="#CCCCCC"> could download what's called a</font>

402
00:14:23,820 --> 00:14:27,510
scriptlet that contains<font color="#E5E5E5"> JavaScript code</font>

403
00:14:25,680 --> 00:14:30,420
over the<font color="#E5E5E5"> network and you</font><font color="#CCCCCC"> could actually</font>

404
00:14:27,510 --> 00:14:32,970
get<font color="#E5E5E5"> your JavaScript code in memory from</font>

405
00:14:30,420 --> 00:14:35,069
there you can<font color="#E5E5E5"> use a tool called dotnet</font>

406
00:14:32,970 --> 00:14:37,370
<font color="#E5E5E5">to</font><font color="#CCCCCC"> j/s written by a</font><font color="#E5E5E5"> Google project</font><font color="#CCCCCC"> 0</font>

407
00:14:35,070 --> 00:14:40,410
researcher<font color="#E5E5E5"> James for Shaw and you can</font>

408
00:14:37,370 --> 00:14:43,290
<font color="#E5E5E5">basically map a full dotnet module into</font>

409
00:14:40,410 --> 00:14:44,880
memory from JavaScript and then once we

410
00:14:43,290 --> 00:14:46,290
have dotnet code execution we can pretty

411
00:14:44,880 --> 00:14:49,709
much do whatever<font color="#E5E5E5"> we have full</font><font color="#CCCCCC"> access to</font>

412
00:14:46,290 --> 00:14:51,599
win32<font color="#CCCCCC"> api we could have exploited</font><font color="#E5E5E5"> the</font>

413
00:14:49,709 --> 00:14:54,180
driver from<font color="#E5E5E5"> here but we already had the</font>

414
00:14:51,600 --> 00:14:56,339
TDL code in native<font color="#CCCCCC"> c code so instead we</font>

415
00:14:54,180 --> 00:14:57,959
just<font color="#E5E5E5"> used basically memory module</font>

416
00:14:56,339 --> 00:15:00,720
techniques<font color="#E5E5E5"> for mapping that into memory</font>

417
00:14:57,959 --> 00:15:02,489
<font color="#E5E5E5">so our we had to dot that memory module</font>

418
00:15:00,720 --> 00:15:05,220
which<font color="#E5E5E5"> were then mapped</font><font color="#CCCCCC"> TDL into memory</font>

419
00:15:02,490 --> 00:15:06,990
and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> TDA</font><font color="#E5E5E5"> we transfer execution</font><font color="#CCCCCC"> at</font>

420
00:15:05,220 --> 00:15:09,300
<font color="#CCCCCC">TDL which would then exploit the driver</font>

421
00:15:06,990 --> 00:15:11,720
and then install our<font color="#E5E5E5"> implant into kernel</font>

422
00:15:09,300 --> 00:15:11,719
mode<font color="#E5E5E5"> memory</font>

423
00:15:11,750 --> 00:15:15,690
another thing we examined was actually

424
00:15:13,829 --> 00:15:16,709
<font color="#E5E5E5">keeping the legitimate driver off of</font>

425
00:15:15,690 --> 00:15:18,990
disk<font color="#CCCCCC"> because technically that was the</font>

426
00:15:16,709 --> 00:15:20,939
<font color="#CCCCCC">only</font><font color="#E5E5E5"> thing that was being written we</font>

427
00:15:18,990 --> 00:15:22,709
looked at using<font color="#E5E5E5"> web</font><font color="#CCCCCC"> dev</font><font color="#E5E5E5"> for doing this</font>

428
00:15:20,940 --> 00:15:24,420
which is one<font color="#E5E5E5"> option</font><font color="#CCCCCC"> there was all kind</font>

429
00:15:22,709 --> 00:15:25,680
<font color="#E5E5E5">of an interesting system on bug where it</font>

430
00:15:24,420 --> 00:15:27,209
didn't<font color="#E5E5E5"> really like the path very much</font>

431
00:15:25,680 --> 00:15:30,050
for that<font color="#E5E5E5"> it couldn't recover the hashes</font>

432
00:15:27,209 --> 00:15:30,050
which<font color="#E5E5E5"> thought was</font><font color="#CCCCCC"> interesting</font>

433
00:15:30,120 --> 00:15:34,660
so we talked<font color="#E5E5E5"> about wind socket</font><font color="#CCCCCC"> kernel</font>

434
00:15:32,890 --> 00:15:36,189
<font color="#E5E5E5">and in the sample code</font><font color="#CCCCCC"> that we had it</font>

435
00:15:34,660 --> 00:15:39,310
would<font color="#E5E5E5"> open</font><font color="#CCCCCC"> a port on</font><font color="#E5E5E5"> the system this</font>

436
00:15:36,190 --> 00:15:40,300
<font color="#E5E5E5">definitely was not stealthy by opening a</font>

437
00:15:39,310 --> 00:15:42,550
port<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know you'd have to</font><font color="#E5E5E5"> worry about</font>

438
00:15:40,300 --> 00:15:44,740
firewalls<font color="#E5E5E5"> and stuff</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> wanted to do</font>

439
00:15:42,550 --> 00:15:45,939
<font color="#E5E5E5">something better so we kind of reuse the</font>

440
00:15:44,740 --> 00:15:47,860
idea<font color="#E5E5E5"> that double pulse</font><font color="#CCCCCC"> are ahead of</font>

441
00:15:45,940 --> 00:15:49,270
corrupting a function<font color="#E5E5E5"> pointer in order</font>

442
00:15:47,860 --> 00:15:50,800
to hook stuff<font color="#E5E5E5"> without triggering patch</font>

443
00:15:49,270 --> 00:15:52,480
guard<font color="#E5E5E5"> but we didn't want to pick the</font>

444
00:15:50,800 --> 00:15:54,609
same function we figured now maybe patch

445
00:15:52,480 --> 00:15:55,900
guard is you know<font color="#E5E5E5"> caught on to that</font><font color="#CCCCCC"> and</font>

446
00:15:54,610 --> 00:15:57,130
<font color="#E5E5E5">might</font><font color="#CCCCCC"> be standing that</font><font color="#E5E5E5"> so we started</font>

447
00:15:55,900 --> 00:15:59,140
<font color="#E5E5E5">looking through various other drivers to</font>

448
00:15:57,130 --> 00:16:01,450
<font color="#E5E5E5">figure out a good function point or a</font>

449
00:15:59,140 --> 00:16:05,199
good hook point and we<font color="#E5E5E5"> settled on the</font>

450
00:16:01,450 --> 00:16:07,030
the server net<font color="#CCCCCC"> driver</font><font color="#E5E5E5"> and basically this</font>

451
00:16:05,200 --> 00:16:09,100
shows the process<font color="#CCCCCC"> the server net driver</font>

452
00:16:07,030 --> 00:16:10,959
is<font color="#CCCCCC"> responsible for</font><font color="#E5E5E5"> opening port</font><font color="#CCCCCC"> 445</font><font color="#E5E5E5"> and</font>

453
00:16:09,100 --> 00:16:12,340
these are the functions that<font color="#E5E5E5"> it goes</font>

454
00:16:10,960 --> 00:16:15,100
through<font color="#E5E5E5"> in</font><font color="#CCCCCC"> order</font><font color="#E5E5E5"> to actually open</font><font color="#CCCCCC"> up</font>

455
00:16:12,340 --> 00:16:17,740
that socket<font color="#E5E5E5"> and</font><font color="#CCCCCC"> on the far right</font><font color="#E5E5E5"> you can</font>

456
00:16:15,100 --> 00:16:19,360
see the<font color="#E5E5E5"> server net wsk</font><font color="#CCCCCC"> except</font><font color="#E5E5E5"> function</font>

457
00:16:17,740 --> 00:16:20,590
well we<font color="#CCCCCC"> actually have an egg hunter that</font>

458
00:16:19,360 --> 00:16:22,960
will search for<font color="#CCCCCC"> that pointer in memory</font>

459
00:16:20,590 --> 00:16:25,330
and we<font color="#CCCCCC"> basically hooked</font><font color="#E5E5E5"> that with our</font>

460
00:16:22,960 --> 00:16:26,980
<font color="#E5E5E5">own</font><font color="#CCCCCC"> accept function and when you connect</font>

461
00:16:25,330 --> 00:16:28,900
in the<font color="#CCCCCC"> box on four</font><font color="#E5E5E5"> four four five we get</font>

462
00:16:26,980 --> 00:16:30,850
redirected to<font color="#CCCCCC"> our code we can basically</font>

463
00:16:28,900 --> 00:16:33,280
<font color="#E5E5E5">decide at that point hey do we want to</font>

464
00:16:30,850 --> 00:16:35,740
hook<font color="#E5E5E5"> this connection</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> use that for</font>

465
00:16:33,280 --> 00:16:37,300
implant<font color="#E5E5E5"> coms or do we</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> want to pass</font>

466
00:16:35,740 --> 00:16:39,070
it back to<font color="#CCCCCC"> the system silently so that</font>

467
00:16:37,300 --> 00:16:42,880
people can still use SMB file-sharing

468
00:16:39,070 --> 00:16:53,100
and stuff<font color="#E5E5E5"> like that so gonna show a demo</font>

469
00:16:42,880 --> 00:16:53,100
<font color="#E5E5E5">of this tool it looks</font><font color="#CCCCCC"> good okay so</font>

470
00:16:53,730 --> 00:16:58,810
basically when we did this back<font color="#CCCCCC"> in</font><font color="#E5E5E5"> you</font>

471
00:16:57,070 --> 00:17:00,280
know<font color="#E5E5E5"> at our last read verse blue the the</font>

472
00:16:58,810 --> 00:17:02,229
current hot trend was using squiggly-doo

473
00:17:00,280 --> 00:17:05,050
<font color="#E5E5E5">but we</font><font color="#CCCCCC"> kinda</font><font color="#E5E5E5"> want to refresh this for</font>

474
00:17:02,230 --> 00:17:08,140
<font color="#E5E5E5">this talk</font><font color="#CCCCCC"> so a very recent technique by</font>

475
00:17:05,050 --> 00:17:09,760
<font color="#E5E5E5">matt</font><font color="#CCCCCC"> Graber and by</font><font color="#E5E5E5"> extension Casey Smith</font>

476
00:17:08,140 --> 00:17:11,790
is notice<font color="#CCCCCC"> Whibley</font>

477
00:17:09,760 --> 00:17:15,869
<font color="#E5E5E5">- and basically the</font><font color="#CCCCCC"> idea is you can</font>

478
00:17:11,790 --> 00:17:18,938
<font color="#E5E5E5">execute XSL files which contain embedded</font>

479
00:17:15,869 --> 00:17:20,500
JavaScript code and<font color="#CCCCCC"> matt graver actually</font>

480
00:17:18,939 --> 00:17:22,780
<font color="#E5E5E5">took this a step further by figuring out</font>

481
00:17:20,500 --> 00:17:24,670
<font color="#E5E5E5">how</font><font color="#CCCCCC"> to inject it into a legitimate</font><font color="#E5E5E5"> sign</font>

482
00:17:22,780 --> 00:17:27,399
VBS script<font color="#CCCCCC"> so on the screen you can</font><font color="#E5E5E5"> see</font>

483
00:17:24,670 --> 00:17:29,890
you can execute<font color="#E5E5E5"> C script</font><font color="#CCCCCC"> with this</font>

484
00:17:27,400 --> 00:17:32,620
<font color="#E5E5E5">winter</font><font color="#CCCCCC"> MDBs</font><font color="#E5E5E5"> this is a valid sign driver</font>

485
00:17:29,890 --> 00:17:37,720
and then in the same<font color="#CCCCCC"> folder you can</font>

486
00:17:32,620 --> 00:17:39,350
basically<font color="#E5E5E5"> plant this file</font><font color="#CCCCCC"> WSM</font><font color="#E5E5E5"> PTY</font><font color="#CCCCCC"> - XSL</font>

487
00:17:37,720 --> 00:17:41,960
which will then

488
00:17:39,350 --> 00:17:43,790
get<font color="#E5E5E5"> coat start executing your JavaScript</font>

489
00:17:41,960 --> 00:17:45,320
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> embedded in there so you know this</font>

490
00:17:43,790 --> 00:17:46,850
is kind of a new technique it's released

491
00:17:45,320 --> 00:17:49,820
in the<font color="#E5E5E5"> last few weeks we wanted to</font>

492
00:17:46,850 --> 00:17:52,668
leverage this so basically<font color="#CCCCCC"> we execute</font>

493
00:17:49,820 --> 00:17:54,649
<font color="#CCCCCC">that</font><font color="#E5E5E5"> it goes to</font><font color="#CCCCCC"> the various stages very</font>

494
00:17:52,669 --> 00:17:56,870
<font color="#E5E5E5">quickly in order to map the the</font><font color="#CCCCCC"> code</font>

495
00:17:54,650 --> 00:17:58,549
into memory<font color="#E5E5E5"> and exploit the driver and</font>

496
00:17:56,870 --> 00:18:00,409
then from there<font color="#E5E5E5"> we have a</font><font color="#CCCCCC"> Python</font>

497
00:17:58,549 --> 00:18:01,700
controller that<font color="#E5E5E5"> we can connect in you</font>

498
00:18:00,410 --> 00:18:03,559
know we can get<font color="#E5E5E5"> some</font><font color="#CCCCCC"> basic system</font>

499
00:18:01,700 --> 00:18:07,580
<font color="#CCCCCC">information you can download</font><font color="#E5E5E5"> files from</font>

500
00:18:03,559 --> 00:18:09,168
<font color="#E5E5E5">there and just to show the the kernel</font>

501
00:18:07,580 --> 00:18:10,428
socket hooking technique<font color="#E5E5E5"> you can see</font>

502
00:18:09,169 --> 00:18:12,230
we're connected in on<font color="#E5E5E5"> four four four</font>

503
00:18:10,429 --> 00:18:14,299
<font color="#E5E5E5">five over on the right</font><font color="#CCCCCC"> you can see</font><font color="#E5E5E5"> the</font>

504
00:18:12,230 --> 00:18:15,770
pit<font color="#CCCCCC"> there paid</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> associated with</font>

505
00:18:14,299 --> 00:18:23,990
<font color="#CCCCCC">the system</font><font color="#E5E5E5"> process basically the</font>

506
00:18:15,770 --> 00:18:25,760
associated with<font color="#CCCCCC"> the kernel</font><font color="#E5E5E5"> okay so that</font>

507
00:18:23,990 --> 00:18:26,900
was really<font color="#E5E5E5"> cool</font><font color="#CCCCCC"> you know</font><font color="#E5E5E5"> we we did</font>

508
00:18:25,760 --> 00:18:28,400
really<font color="#E5E5E5"> well</font><font color="#CCCCCC"> on a red versus blue</font>

509
00:18:26,900 --> 00:18:30,820
unfortunately that<font color="#E5E5E5"> meant we</font><font color="#CCCCCC"> had a lot of</font>

510
00:18:28,400 --> 00:18:33,169
<font color="#E5E5E5">work to do to sort</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> improve our</font>

511
00:18:30,820 --> 00:18:35,230
<font color="#E5E5E5">tradecraft because you know our day job</font>

512
00:18:33,169 --> 00:18:37,970
is actually<font color="#E5E5E5"> defense of these systems</font><font color="#CCCCCC"> so</font>

513
00:18:35,230 --> 00:18:39,230
<font color="#CCCCCC">we're like</font><font color="#E5E5E5"> okay yeah now we got to work</font>

514
00:18:37,970 --> 00:18:41,030
on<font color="#E5E5E5"> that but when we</font><font color="#CCCCCC"> actually got</font>

515
00:18:39,230 --> 00:18:43,520
accepted to<font color="#E5E5E5"> this talk we actually wanted</font>

516
00:18:41,030 --> 00:18:45,110
<font color="#CCCCCC">to</font><font color="#E5E5E5"> push it even</font><font color="#CCCCCC"> further</font><font color="#E5E5E5"> so I talked</font>

517
00:18:43,520 --> 00:18:48,080
about virtualization based security<font color="#CCCCCC"> a</font>

518
00:18:45,110 --> 00:18:50,659
little<font color="#CCCCCC"> bit and</font><font color="#E5E5E5"> virtualization based</font>

519
00:18:48,080 --> 00:18:52,699
security<font color="#E5E5E5"> combined with hypervisor code</font>

520
00:18:50,660 --> 00:18:54,770
integrity<font color="#E5E5E5"> like I said earlier will block</font>

521
00:18:52,700 --> 00:18:57,110
any unsigned code from executing that

522
00:18:54,770 --> 00:19:00,320
includes both<font color="#E5E5E5"> you know double pulse</font><font color="#CCCCCC"> are</font>

523
00:18:57,110 --> 00:19:03,020
TDL and by extension<font color="#CCCCCC"> are implant</font><font color="#E5E5E5"> that we</font>

524
00:19:00,320 --> 00:19:05,629
use in<font color="#CCCCCC"> our red vs. blue</font><font color="#E5E5E5"> so okay what can</font>

525
00:19:03,020 --> 00:19:07,160
<font color="#E5E5E5">we do to actually evade</font><font color="#CCCCCC"> HPC I the</font><font color="#E5E5E5"> latest</font>

526
00:19:05,630 --> 00:19:09,620
Microsoft mitigations and<font color="#E5E5E5"> get code</font>

527
00:19:07,160 --> 00:19:12,140
execution<font color="#E5E5E5"> well we started</font><font color="#CCCCCC"> with trying to</font>

528
00:19:09,620 --> 00:19:14,209
load our VirtualBox driver<font color="#E5E5E5"> and that was</font>

529
00:19:12,140 --> 00:19:15,679
a<font color="#E5E5E5"> no-go it's completely blocked from</font>

530
00:19:14,210 --> 00:19:18,140
loading I think that it's<font color="#E5E5E5"> just generally</font>

531
00:19:15,679 --> 00:19:20,870
incompatible with<font color="#E5E5E5"> HPC I so it's not</font>

532
00:19:18,140 --> 00:19:22,040
allowed<font color="#E5E5E5"> to load and our first step was</font>

533
00:19:20,870 --> 00:19:23,959
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> be we're gonna have to find a new</font>

534
00:19:22,040 --> 00:19:25,210
driver to exploit so<font color="#CCCCCC"> at great</font><font color="#E5E5E5"> hat hacker</font>

535
00:19:23,960 --> 00:19:29,840
net there are a ton of

536
00:19:25,210 --> 00:19:31,520
<font color="#CCCCCC">pocs that this guy Parvez Anwar has you</font>

537
00:19:29,840 --> 00:19:33,168
know done<font color="#CCCCCC"> some fuzzing or analysis and</font>

538
00:19:31,520 --> 00:19:35,418
found vulnerabilities<font color="#CCCCCC"> in various</font><font color="#E5E5E5"> drivers</font>

539
00:19:33,169 --> 00:19:36,830
of software you've never heard of<font color="#E5E5E5"> but</font>

540
00:19:35,419 --> 00:19:38,480
<font color="#CCCCCC">that was kind of a good stop for us to</font>

541
00:19:36,830 --> 00:19:41,570
shop<font color="#E5E5E5"> for various exploits</font><font color="#CCCCCC"> that we could</font>

542
00:19:38,480 --> 00:19:43,070
<font color="#CCCCCC">reuse we started off with one</font>

543
00:19:41,570 --> 00:19:44,689
vulnerability that<font color="#E5E5E5"> it was like a static</font>

544
00:19:43,070 --> 00:19:46,010
one byte right<font color="#E5E5E5"> to anywhere</font><font color="#CCCCCC"> in kernel</font>

545
00:19:44,690 --> 00:19:48,950
mode<font color="#CCCCCC"> memory well the problem with that</font>

546
00:19:46,010 --> 00:19:51,650
is you<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to corrupt some kernel heap</font>

547
00:19:48,950 --> 00:19:52,620
memory in<font color="#CCCCCC"> order to</font><font color="#E5E5E5"> actually get a full</font>

548
00:19:51,650 --> 00:19:54,059
read/write primitive

549
00:19:52,620 --> 00:19:55,469
just it would have been a lot of<font color="#E5E5E5"> work</font><font color="#CCCCCC"> if</font>

550
00:19:54,059 --> 00:19:56,670
you can<font color="#E5E5E5"> choose the vulnerability that</font>

551
00:19:55,470 --> 00:19:58,530
<font color="#E5E5E5">you're bringing I would just say choose</font>

552
00:19:56,670 --> 00:20:00,120
wisely make it easy for<font color="#E5E5E5"> yourself</font><font color="#CCCCCC"> it also</font>

553
00:19:58,530 --> 00:20:01,830
makes a lot<font color="#CCCCCC"> more stable so we found</font>

554
00:20:00,120 --> 00:20:03,510
<font color="#E5E5E5">another vulnerability that basically</font>

555
00:20:01,830 --> 00:20:05,100
<font color="#E5E5E5">gave us a full read/write primitive</font>

556
00:20:03,510 --> 00:20:06,660
right from the driver<font color="#CCCCCC"> so</font><font color="#E5E5E5"> we can read and</font>

557
00:20:05,100 --> 00:20:09,990
<font color="#E5E5E5">write</font><font color="#CCCCCC"> eight bytes of memory wherever we</font>

558
00:20:06,660 --> 00:20:12,210
want in kernel mode so<font color="#CCCCCC"> that on its own</font>

559
00:20:09,990 --> 00:20:14,730
can be using<font color="#E5E5E5"> can be used for</font><font color="#CCCCCC"> data-driven</font>

560
00:20:12,210 --> 00:20:16,740
attacks<font color="#E5E5E5"> so H</font><font color="#CCCCCC"> PCI prevents</font><font color="#E5E5E5"> unsigned code</font>

561
00:20:14,730 --> 00:20:19,890
but it does<font color="#CCCCCC"> nothing to</font><font color="#E5E5E5"> protect against</font>

562
00:20:16,740 --> 00:20:21,390
general kernel tank tampering<font color="#E5E5E5"> so</font>

563
00:20:19,890 --> 00:20:23,820
basically you can still corrupt<font color="#E5E5E5"> key data</font>

564
00:20:21,390 --> 00:20:25,890
structures in the kernel and in any

565
00:20:23,820 --> 00:20:27,720
drivers that are loaded<font color="#E5E5E5"> for example you</font>

566
00:20:25,890 --> 00:20:30,210
can modify the import address<font color="#E5E5E5"> table of</font>

567
00:20:27,720 --> 00:20:32,600
certain drivers<font color="#E5E5E5"> on the system just like</font>

568
00:20:30,210 --> 00:20:35,580
<font color="#CCCCCC">dooku 2.0 did on the kaspersky</font><font color="#E5E5E5"> driver</font>

569
00:20:32,600 --> 00:20:38,639
<font color="#CCCCCC">you can you know knock them out</font><font color="#E5E5E5"> make</font>

570
00:20:35,580 --> 00:20:40,949
them<font color="#E5E5E5"> do nothing</font><font color="#CCCCCC"> you can disable EDR</font>

571
00:20:38,640 --> 00:20:43,710
kernel user communications you can

572
00:20:40,950 --> 00:20:45,510
<font color="#E5E5E5">disable security focus kernel etw</font>

573
00:20:43,710 --> 00:20:46,880
<font color="#E5E5E5">provider such as Microsoft Windows</font>

574
00:20:45,510 --> 00:20:49,800
threat intelligence

575
00:20:46,880 --> 00:20:51,510
you<font color="#CCCCCC"> can also elevate privileges by</font>

576
00:20:49,800 --> 00:20:53,190
modifying tokens or handles from kernel

577
00:20:51,510 --> 00:20:57,960
mode and<font color="#E5E5E5"> basically a variety of other</font>

578
00:20:53,190 --> 00:20:59,370
data corruption attacks so one<font color="#CCCCCC"> example</font>

579
00:20:57,960 --> 00:21:01,380
of<font color="#E5E5E5"> this we</font><font color="#CCCCCC"> actually looked at sis Mon</font>

580
00:20:59,370 --> 00:21:02,969
and we were rupiahs you know with what

581
00:21:01,380 --> 00:21:04,800
we<font color="#E5E5E5"> could tamper with system on just from</font>

582
00:21:02,970 --> 00:21:06,270
a data perspective<font color="#E5E5E5"> this is nothing</font>

583
00:21:04,800 --> 00:21:07,620
against this<font color="#E5E5E5"> Mon it's just you know</font>

584
00:21:06,270 --> 00:21:08,970
freely available we can<font color="#E5E5E5"> download and</font>

585
00:21:07,620 --> 00:21:11,370
play<font color="#E5E5E5"> with it it's definitely</font><font color="#CCCCCC"> not a</font>

586
00:21:08,970 --> 00:21:13,559
system on specific vulnerability but

587
00:21:11,370 --> 00:21:15,120
<font color="#CCCCCC">what we did was basically</font><font color="#E5E5E5"> found</font><font color="#CCCCCC"> the the</font>

588
00:21:13,559 --> 00:21:17,399
chunk of<font color="#E5E5E5"> code that's responsible for</font>

589
00:21:15,120 --> 00:21:19,919
<font color="#CCCCCC">sending events from kernel mode to user</font>

590
00:21:17,400 --> 00:21:22,290
mode so<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> see there's this</font><font color="#CCCCCC"> IOC sq</font>

591
00:21:19,920 --> 00:21:24,570
<font color="#E5E5E5">or move next</font><font color="#CCCCCC"> herb</font><font color="#E5E5E5"> function up here</font><font color="#CCCCCC"> and</font>

592
00:21:22,290 --> 00:21:27,090
if you replace<font color="#CCCCCC"> the pointer in the IAT</font>

593
00:21:24,570 --> 00:21:30,960
to basically<font color="#E5E5E5"> a return</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> Rob gadget</font>

594
00:21:27,090 --> 00:21:33,000
then all<font color="#E5E5E5"> this code here is gonna get</font>

595
00:21:30,960 --> 00:21:34,320
skipped over<font color="#E5E5E5"> and this code right here is</font>

596
00:21:33,000 --> 00:21:36,179
<font color="#CCCCCC">actually what's responsible</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> sending</font>

597
00:21:34,320 --> 00:21:38,189
the events down<font color="#CCCCCC"> to user mode so if you</font>

598
00:21:36,179 --> 00:21:42,179
skip this then no more events from

599
00:21:38,190 --> 00:21:43,350
system on so you know<font color="#CCCCCC"> if you want to</font><font color="#E5E5E5"> be</font>

600
00:21:42,179 --> 00:21:45,240
a little more sneaky you could probably

601
00:21:43,350 --> 00:21:47,010
selectively drop certain events<font color="#CCCCCC"> there's</font>

602
00:21:45,240 --> 00:21:48,270
a like a structure that<font color="#CCCCCC"> gets passed</font><font color="#E5E5E5"> into</font>

603
00:21:47,010 --> 00:21:49,850
<font color="#CCCCCC">this</font><font color="#E5E5E5"> function that actually contains the</font>

604
00:21:48,270 --> 00:21:52,080
<font color="#CCCCCC">pit associated with it so you could</font>

605
00:21:49,850 --> 00:21:53,879
selectively drop things<font color="#E5E5E5"> for your implant</font>

606
00:21:52,080 --> 00:21:58,139
<font color="#CCCCCC">but</font><font color="#E5E5E5"> in this example I think</font><font color="#CCCCCC"> it was good</font>

607
00:21:53,880 --> 00:22:00,000
<font color="#CCCCCC">enough for</font><font color="#E5E5E5"> our purposes and this is sort</font>

608
00:21:58,140 --> 00:22:01,679
of an<font color="#E5E5E5"> example of tampering with the etw</font>

609
00:22:00,000 --> 00:22:03,360
providers in the kernel<font color="#CCCCCC"> so there's this</font>

610
00:22:01,679 --> 00:22:05,309
registration handle it's referenced<font color="#E5E5E5"> in</font>

611
00:22:03,360 --> 00:22:06,779
all the<font color="#E5E5E5"> the functions</font>

612
00:22:05,309 --> 00:22:08,428
that are responsible for process

613
00:22:06,779 --> 00:22:11,129
injection<font color="#E5E5E5"> this is the way that you know</font>

614
00:22:08,429 --> 00:22:14,490
Microsoft<font color="#E5E5E5"> products can monitor for</font>

615
00:22:11,129 --> 00:22:17,248
various process injection events<font color="#E5E5E5"> well if</font>

616
00:22:14,490 --> 00:22:19,289
you<font color="#CCCCCC"> modify this handle then you know</font>

617
00:22:17,249 --> 00:22:24,629
these functions will basically<font color="#E5E5E5"> just fail</font>

618
00:22:19,289 --> 00:22:26,850
silently<font color="#E5E5E5"> okay so we do data corruption</font>

619
00:22:24,629 --> 00:22:29,490
attacks that's cool but<font color="#E5E5E5"> we really wanted</font>

620
00:22:26,850 --> 00:22:32,219
<font color="#CCCCCC">to get kernel code execution</font><font color="#E5E5E5"> and we</font><font color="#CCCCCC"> were</font>

621
00:22:29,490 --> 00:22:33,929
clued in by a talk by David<font color="#CCCCCC"> Weston who</font>

622
00:22:32,220 --> 00:22:35,879
is the<font color="#CCCCCC"> Windows offensive security</font><font color="#E5E5E5"> team</font>

623
00:22:33,929 --> 00:22:38,820
lead and Windows Device<font color="#E5E5E5"> Security Manager</font>

624
00:22:35,879 --> 00:22:40,769
he did a talk at blue hat<font color="#E5E5E5"> IO and their</font>

625
00:22:38,820 --> 00:22:42,389
own red team was<font color="#CCCCCC"> working to try</font><font color="#E5E5E5"> to</font>

626
00:22:40,769 --> 00:22:45,929
defeat<font color="#CCCCCC"> HB</font><font color="#E5E5E5"> CI that's what they do</font>

627
00:22:42,389 --> 00:22:47,699
<font color="#E5E5E5">and basically they found that they could</font>

628
00:22:45,929 --> 00:22:49,169
use code reuse attacks<font color="#E5E5E5"> in order</font><font color="#CCCCCC"> to</font>

629
00:22:47,700 --> 00:22:50,850
<font color="#CCCCCC">execute what they wanted in kernel mode</font>

630
00:22:49,169 --> 00:22:53,070
<font color="#E5E5E5">and they actually worked on a mitigation</font>

631
00:22:50,850 --> 00:22:55,709
where they would try to<font color="#E5E5E5"> detect and block</font>

632
00:22:53,070 --> 00:22:57,600
code reuse attacks basically<font color="#E5E5E5"> Rob from</font>

633
00:22:55,710 --> 00:22:59,309
working but at the last minute<font color="#E5E5E5"> they</font>

634
00:22:57,600 --> 00:23:01,469
found some unknown vulnerability and

635
00:22:59,309 --> 00:23:02,908
their implementation<font color="#CCCCCC"> and</font><font color="#E5E5E5"> fun wouldn't</font>

636
00:23:01,470 --> 00:23:04,320
basically<font color="#CCCCCC"> give</font><font color="#E5E5E5"> them the level of</font>

637
00:23:02,909 --> 00:23:04,649
<font color="#CCCCCC">security they wanted so instead of</font>

638
00:23:04,320 --> 00:23:06,269
shipping

639
00:23:04,649 --> 00:23:08,309
<font color="#CCCCCC">you know half-baked feature they cut it</font>

640
00:23:06,269 --> 00:23:09,840
out which<font color="#E5E5E5"> is good for them but that</font>

641
00:23:08,309 --> 00:23:13,259
means<font color="#E5E5E5"> there's still this whole available</font>

642
00:23:09,840 --> 00:23:16,168
now that<font color="#CCCCCC"> people can go after Intel is</font>

643
00:23:13,259 --> 00:23:19,169
actually<font color="#E5E5E5"> planning on hopefully</font><font color="#CCCCCC"> someday</font>

644
00:23:16,169 --> 00:23:22,049
releasing<font color="#E5E5E5"> hardware technology to detect</font>

645
00:23:19,169 --> 00:23:23,669
<font color="#CCCCCC">Rob in kernel mode</font><font color="#E5E5E5"> there's out their</font>

646
00:23:22,049 --> 00:23:25,649
specifications out there about<font color="#E5E5E5"> it</font><font color="#CCCCCC"> but</font>

647
00:23:23,669 --> 00:23:26,970
there's no chips available<font color="#CCCCCC"> today</font><font color="#E5E5E5"> that</font>

648
00:23:25,649 --> 00:23:29,369
you<font color="#CCCCCC"> can buy</font><font color="#E5E5E5"> that actually have this in</font>

649
00:23:26,970 --> 00:23:31,529
there<font color="#E5E5E5"> so basically today you can do Rob</font>

650
00:23:29,369 --> 00:23:34,529
with everything enabled and you're free

651
00:23:31,529 --> 00:23:37,799
<font color="#CCCCCC">to do that but for actually weaponizing</font>

652
00:23:34,529 --> 00:23:40,049
this we got an idea from it was a keen

653
00:23:37,799 --> 00:23:41,908
<font color="#CCCCCC">team presentation from</font><font color="#E5E5E5"> recon in 2015</font>

654
00:23:40,049 --> 00:23:43,860
they talked about<font color="#E5E5E5"> doing kernel stack</font>

655
00:23:41,909 --> 00:23:45,389
hooking so we have this<font color="#CCCCCC"> readwrite</font>

656
00:23:43,860 --> 00:23:46,678
primitive<font color="#E5E5E5"> and we thought oh we can do</font>

657
00:23:45,389 --> 00:23:49,379
kernel stack hooking in order to get

658
00:23:46,679 --> 00:23:51,360
code execution<font color="#E5E5E5"> to while we're running</font>

659
00:23:49,379 --> 00:23:53,219
under<font color="#CCCCCC"> HPC I and basically the</font><font color="#E5E5E5"> way this</font>

660
00:23:51,360 --> 00:23:54,539
<font color="#CCCCCC">works is</font><font color="#E5E5E5"> you create a surrogate thread</font>

661
00:23:53,220 --> 00:23:56,730
and put it<font color="#E5E5E5"> asleep by basically waiting</font>

662
00:23:54,539 --> 00:23:59,730
for a mutex<font color="#CCCCCC"> and then you can locate its</font>

663
00:23:56,730 --> 00:24:01,259
each read structure<font color="#E5E5E5"> basically from there</font>

664
00:23:59,730 --> 00:24:03,179
there's a pointer to the the kernel

665
00:24:01,259 --> 00:24:06,480
stack associated with<font color="#E5E5E5"> that you can scan</font>

666
00:24:03,179 --> 00:24:08,460
through<font color="#E5E5E5"> the stack and find a function</font>

667
00:24:06,480 --> 00:24:10,710
pointer<font color="#E5E5E5"> like</font><font color="#CCCCCC"> NT wait for signal object</font>

668
00:24:08,460 --> 00:24:13,259
and you basically<font color="#E5E5E5"> can overwrite that</font>

669
00:24:10,710 --> 00:24:15,269
<font color="#E5E5E5">function pointer with a pivot gadget and</font>

670
00:24:13,259 --> 00:24:17,070
use that<font color="#CCCCCC"> too after you resumed the</font>

671
00:24:15,269 --> 00:24:18,149
thread<font color="#CCCCCC"> that'll start executing and then</font>

672
00:24:17,070 --> 00:24:22,619
you've diverted

673
00:24:18,149 --> 00:24:24,539
the flow of<font color="#E5E5E5"> execution so basically what</font>

674
00:24:22,619 --> 00:24:26,549
this looks like<font color="#E5E5E5"> is when you want to call</font>

675
00:24:24,539 --> 00:24:28,139
a function<font color="#E5E5E5"> we dynamically build a rock</font>

676
00:24:26,549 --> 00:24:31,289
chain that's based on<font color="#E5E5E5"> the number</font><font color="#CCCCCC"> of</font>

677
00:24:28,139 --> 00:24:33,329
<font color="#E5E5E5">arguments in</font><font color="#CCCCCC"> that are for the target</font>

678
00:24:31,289 --> 00:24:34,799
<font color="#CCCCCC">function you want</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> call</font><font color="#E5E5E5"> so we had</font><font color="#CCCCCC"> 10</font>

679
00:24:33,329 --> 00:24:38,609
gadgets were required<font color="#E5E5E5"> for us</font><font color="#CCCCCC"> to get</font>

680
00:24:34,799 --> 00:24:41,749
<font color="#E5E5E5">basically a full end call arguments or</font>

681
00:24:38,609 --> 00:24:43,859
an argument<font color="#CCCCCC"> function call pardon me and</font>

682
00:24:41,749 --> 00:24:45,029
basically<font color="#E5E5E5"> what that meant is if you're</font>

683
00:24:43,859 --> 00:24:47,369
gonna call a function with one argument

684
00:24:45,029 --> 00:24:48,389
<font color="#E5E5E5">will generate one</font><font color="#CCCCCC"> wrap chain if you're</font>

685
00:24:47,369 --> 00:24:49,589
calling<font color="#E5E5E5"> another function with</font><font color="#CCCCCC"> eight</font>

686
00:24:48,389 --> 00:24:50,579
arguments it'll be a<font color="#E5E5E5"> little bit</font>

687
00:24:49,589 --> 00:24:51,779
<font color="#E5E5E5">different because you got to set up</font>

688
00:24:50,579 --> 00:24:53,569
different parameters and<font color="#CCCCCC"> stuff on the</font>

689
00:24:51,779 --> 00:24:55,859
chain<font color="#E5E5E5"> and that's all done on the fly</font><font color="#CCCCCC"> so</font>

690
00:24:53,569 --> 00:24:58,289
<font color="#CCCCCC">basically you know it starts off with</font>

691
00:24:55,859 --> 00:25:00,478
<font color="#E5E5E5">that pop RSP return</font><font color="#CCCCCC"> gadget and</font><font color="#E5E5E5"> that gets</font>

692
00:24:58,289 --> 00:25:01,859
us<font color="#E5E5E5"> to</font><font color="#CCCCCC"> our actual wrap chain the</font><font color="#E5E5E5"> first</font>

693
00:25:00,479 --> 00:25:04,469
step is we had a few gadgets<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font>

694
00:25:01,859 --> 00:25:06,448
needed<font color="#E5E5E5"> to actually</font><font color="#CCCCCC"> restore the data we</font>

695
00:25:04,469 --> 00:25:07,829
corrupted on the legitimate stack<font color="#E5E5E5"> so we</font>

696
00:25:06,449 --> 00:25:10,769
had<font color="#E5E5E5"> you know put back the original</font>

697
00:25:07,829 --> 00:25:12,029
pointer that<font color="#E5E5E5"> we overrode then you have</font>

698
00:25:10,769 --> 00:25:13,289
to<font color="#E5E5E5"> set up the actual arguments for the</font>

699
00:25:12,029 --> 00:25:15,209
function call you want<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> got to</font>

700
00:25:13,289 --> 00:25:17,519
push<font color="#E5E5E5"> things</font><font color="#CCCCCC"> onto the stack you gotta set</font>

701
00:25:15,209 --> 00:25:19,289
up<font color="#E5E5E5"> things and registers and then you</font>

702
00:25:17,519 --> 00:25:21,629
actually<font color="#CCCCCC"> call the target function to do</font>

703
00:25:19,289 --> 00:25:23,099
whatever you want next<font color="#E5E5E5"> you can save the</font>

704
00:25:21,629 --> 00:25:25,379
return value and<font color="#E5E5E5"> actually save that</font>

705
00:25:23,099 --> 00:25:27,359
directly back to<font color="#E5E5E5"> user mode and then</font>

706
00:25:25,379 --> 00:25:28,678
there was<font color="#E5E5E5"> just one register that we</font>

707
00:25:27,359 --> 00:25:29,099
basically couldn't dirty through this

708
00:25:28,679 --> 00:25:31,109
<font color="#E5E5E5">process</font>

709
00:25:29,099 --> 00:25:32,158
<font color="#E5E5E5">r14 which contained the mutex object so</font>

710
00:25:31,109 --> 00:25:34,649
we decide<font color="#E5E5E5"> to make sure we replace that</font>

711
00:25:32,159 --> 00:25:39,989
<font color="#CCCCCC">and then unfit</font><font color="#E5E5E5"> the stack to complete the</font>

712
00:25:34,649 --> 00:25:41,879
attack so basically the<font color="#E5E5E5"> end effect of</font>

713
00:25:39,989 --> 00:25:44,129
this<font color="#E5E5E5"> is you actually write your</font><font color="#CCCCCC"> kernel</font>

714
00:25:41,879 --> 00:25:46,649
<font color="#E5E5E5">mode implant</font><font color="#CCCCCC"> in user mode and each</font>

715
00:25:44,129 --> 00:25:49,049
function<font color="#CCCCCC"> call that you do is basically</font>

716
00:25:46,649 --> 00:25:50,968
<font color="#E5E5E5">an exploitation of the driver so our</font>

717
00:25:49,049 --> 00:25:52,739
<font color="#E5E5E5">readwrite primitive so basically this is</font>

718
00:25:50,969 --> 00:25:54,749
<font color="#E5E5E5">user mode code for doing like</font><font color="#CCCCCC"> write</font>

719
00:25:52,739 --> 00:25:56,719
<font color="#E5E5E5">process memory without you know doing</font>

720
00:25:54,749 --> 00:25:59,789
open process or actually<font color="#E5E5E5"> calling any</font>

721
00:25:56,719 --> 00:26:01,589
<font color="#E5E5E5">syscalls so you know this will this call</font>

722
00:25:59,789 --> 00:26:02,658
function you pass in the<font color="#E5E5E5"> string of the</font>

723
00:26:01,589 --> 00:26:05,639
function you<font color="#CCCCCC"> want</font>

724
00:26:02,659 --> 00:26:07,289
<font color="#CCCCCC">so PS</font><font color="#E5E5E5"> get current process and then copy</font>

725
00:26:05,639 --> 00:26:10,319
virtual memory<font color="#E5E5E5"> over the the ones needed</font>

726
00:26:07,289 --> 00:26:11,819
for this specific implementation so with

727
00:26:10,319 --> 00:26:13,408
<font color="#E5E5E5">this you know you could inject into</font>

728
00:26:11,819 --> 00:26:19,438
<font color="#E5E5E5">protected processes you can evade</font>

729
00:26:13,409 --> 00:26:21,949
detection by<font color="#E5E5E5"> edr and AV etc show a demo</font>

730
00:26:19,439 --> 00:26:21,949
of<font color="#E5E5E5"> this now</font>

731
00:26:26,220 --> 00:26:32,770
<font color="#E5E5E5">okay so this is also gonna go pretty</font>

732
00:26:29,050 --> 00:26:35,980
quick but basically we run this POC<font color="#CCCCCC"> Exe</font>

733
00:26:32,770 --> 00:26:37,809
<font color="#E5E5E5">what</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> gonna do is it's gonna spawn a</font>

734
00:26:35,980 --> 00:26:40,690
new instance of the<font color="#E5E5E5"> defender process</font>

735
00:26:37,809 --> 00:26:42,760
that has a<font color="#E5E5E5"> ppl or a protected process</font>

736
00:26:40,690 --> 00:26:44,590
compatible signature<font color="#E5E5E5"> so you can actually</font>

737
00:26:42,760 --> 00:26:46,090
create<font color="#E5E5E5"> a new</font><font color="#CCCCCC"> instance of that that's</font>

738
00:26:44,590 --> 00:26:47,290
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to be protected normally you would</font>

739
00:26:46,090 --> 00:26:49,209
<font color="#E5E5E5">not be able to access that process</font>

740
00:26:47,290 --> 00:26:51,730
<font color="#E5E5E5">unless you had the</font><font color="#CCCCCC"> equivalent level</font><font color="#E5E5E5"> of</font>

741
00:26:49,210 --> 00:26:53,050
protection<font color="#E5E5E5"> on</font><font color="#CCCCCC"> your process so we're</font>

742
00:26:51,730 --> 00:26:54,640
gonna launch that and then what we're

743
00:26:53,050 --> 00:26:57,040
<font color="#E5E5E5">gonna do is we're going to use these</font>

744
00:26:54,640 --> 00:26:58,600
<font color="#CCCCCC">Roth techniques all while hvc is running</font>

745
00:26:57,040 --> 00:27:01,178
so<font color="#CCCCCC"> you can see on the bottom</font><font color="#E5E5E5"> hypervisor</font>

746
00:26:58,600 --> 00:27:03,340
code integrity is enabled<font color="#E5E5E5"> and basically</font>

747
00:27:01,179 --> 00:27:04,990
use<font color="#CCCCCC"> Rob in order to call a number</font><font color="#E5E5E5"> of</font>

748
00:27:03,340 --> 00:27:07,030
functions for<font color="#E5E5E5"> giving us access</font><font color="#CCCCCC"> into this</font>

749
00:27:04,990 --> 00:27:09,910
process<font color="#CCCCCC"> so you know we're basically</font>

750
00:27:07,030 --> 00:27:11,530
opening<font color="#E5E5E5"> a handle to the process with a</font>

751
00:27:09,910 --> 00:27:13,600
from kernel mode and then duplicating

752
00:27:11,530 --> 00:27:15,428
that<font color="#E5E5E5"> into our POC exe which gives us</font>

753
00:27:13,600 --> 00:27:17,678
full<font color="#E5E5E5"> access then from there we</font><font color="#CCCCCC"> actually</font>

754
00:27:15,429 --> 00:27:23,170
<font color="#E5E5E5">just overrode the entry point with some</font>

755
00:27:17,679 --> 00:27:24,790
shell code to pop cmd.exe<font color="#E5E5E5"> and you can</font>

756
00:27:23,170 --> 00:27:27,250
see here this<font color="#CCCCCC"> is the the</font><font color="#E5E5E5"> defender</font>

757
00:27:24,790 --> 00:27:30,460
process<font color="#E5E5E5"> with CMD as a child and process</font>

758
00:27:27,250 --> 00:27:32,350
hacker<font color="#E5E5E5"> and if we open</font><font color="#CCCCCC"> this up you can</font>

759
00:27:30,460 --> 00:27:33,790
<font color="#E5E5E5">see</font><font color="#CCCCCC"> that the protection is full so you'd</font>

760
00:27:32,350 --> 00:27:36,428
normally<font color="#E5E5E5"> not</font><font color="#CCCCCC"> have access</font><font color="#E5E5E5"> to this well at</font>

761
00:27:33,790 --> 00:27:38,379
kernel level or some other techniques

762
00:27:36,429 --> 00:27:43,110
<font color="#E5E5E5">but it's a good demo to show sort of</font>

763
00:27:38,380 --> 00:27:43,110
what you can do<font color="#E5E5E5"> by bypassing</font><font color="#CCCCCC"> HPC I</font>

764
00:27:50,570 --> 00:27:57,590
<font color="#E5E5E5">okay thank you</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right</font>

765
00:27:54,830 --> 00:28:00,770
so up to this<font color="#E5E5E5"> point we've talked about</font>

766
00:27:57,590 --> 00:28:02,149
<font color="#E5E5E5">how kernel-mode threats and platform</font>

767
00:28:00,770 --> 00:28:04,400
protections<font color="#E5E5E5"> have evolved</font><font color="#CCCCCC"> around each</font>

768
00:28:02,150 --> 00:28:06,470
other<font color="#CCCCCC"> then we talked about</font><font color="#E5E5E5"> some</font>

769
00:28:04,400 --> 00:28:08,000
offensive<font color="#CCCCCC"> tradecraft</font><font color="#E5E5E5"> that works</font><font color="#CCCCCC"> even</font>

770
00:28:06,470 --> 00:28:10,730
<font color="#CCCCCC">with the latest and greatest</font><font color="#E5E5E5"> platform</font>

771
00:28:08,000 --> 00:28:12,200
protections<font color="#E5E5E5"> in this final section we're</font>

772
00:28:10,730 --> 00:28:14,090
going<font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> about how defenders can</font>

773
00:28:12,200 --> 00:28:15,500
<font color="#E5E5E5">augment windows built-in defenses in</font>

774
00:28:14,090 --> 00:28:17,300
order to better guard their enterprises

775
00:28:15,500 --> 00:28:18,740
<font color="#CCCCCC">and then finally we're going to</font><font color="#E5E5E5"> cover</font>

776
00:28:17,300 --> 00:28:21,800
<font color="#E5E5E5">some aspirational research that we</font>

777
00:28:18,740 --> 00:28:23,390
perform to further raise the bar<font color="#E5E5E5"> so</font>

778
00:28:21,800 --> 00:28:26,330
first and foremost<font color="#CCCCCC"> simplest thing you</font>

779
00:28:23,390 --> 00:28:28,730
can<font color="#E5E5E5"> do is event and hunt on driver loads</font>

780
00:28:26,330 --> 00:28:30,050
throughout<font color="#CCCCCC"> your organization's there's</font>

781
00:28:28,730 --> 00:28:32,320
readily available tools to do this

782
00:28:30,050 --> 00:28:35,600
<font color="#CCCCCC">including system on system eternals</font>

783
00:28:32,320 --> 00:28:37,550
<font color="#E5E5E5">system sysinternals</font><font color="#CCCCCC"> system on and</font>

784
00:28:35,600 --> 00:28:39,500
Windows Defender application control

785
00:28:37,550 --> 00:28:40,909
when you put it<font color="#E5E5E5"> into audit mode you</font>

786
00:28:39,500 --> 00:28:43,070
should<font color="#CCCCCC"> be</font><font color="#E5E5E5"> looking for</font><font color="#CCCCCC"> low prevalence and</font>

787
00:28:40,910 --> 00:28:44,360
<font color="#E5E5E5">known exploitable drivers it is</font>

788
00:28:43,070 --> 00:28:46,429
important to<font color="#E5E5E5"> build a baseline if</font>

789
00:28:44,360 --> 00:28:48,020
possible<font color="#CCCCCC"> as many of you know</font><font color="#E5E5E5"> you have to</font>

790
00:28:46,430 --> 00:28:50,000
understand your company's assets and

791
00:28:48,020 --> 00:28:52,370
infrastructure<font color="#E5E5E5"> before</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> begin</font>

792
00:28:50,000 --> 00:28:54,230
looking for adversaries the same applies

793
00:28:52,370 --> 00:28:57,010
for understanding the exposure of kernel

794
00:28:54,230 --> 00:28:57,010
modules throughout your organization

795
00:28:57,070 --> 00:29:02,090
<font color="#CCCCCC">defenders</font><font color="#E5E5E5"> should employ hypervisor code</font>

796
00:28:59,660 --> 00:29:04,280
integrity policies<font color="#CCCCCC"> to block most legacy</font>

797
00:29:02,090 --> 00:29:07,939
drivers ideally you should<font color="#E5E5E5"> be</font>

798
00:29:04,280 --> 00:29:09,170
<font color="#CCCCCC">whitelisting driver publishers but white</font>

799
00:29:07,940 --> 00:29:12,140
lists can<font color="#E5E5E5"> be very hard to maintain</font>

800
00:29:09,170 --> 00:29:14,170
effectively at a minimum you<font color="#CCCCCC"> should see</font>

801
00:29:12,140 --> 00:29:16,250
if<font color="#CCCCCC"> you can mandate whq else signatures</font>

802
00:29:14,170 --> 00:29:21,470
<font color="#CCCCCC">which stands for</font><font color="#E5E5E5"> Windows</font><font color="#CCCCCC"> Hardware</font>

803
00:29:16,250 --> 00:29:23,180
<font color="#CCCCCC">quality</font><font color="#E5E5E5"> labs</font><font color="#CCCCCC"> to get a whq</font><font color="#E5E5E5"> signature you</font>

804
00:29:21,470 --> 00:29:25,220
have to upload<font color="#E5E5E5"> your driver to Microsoft</font>

805
00:29:23,180 --> 00:29:27,170
which<font color="#E5E5E5"> theoretically mitigates the threat</font>

806
00:29:25,220 --> 00:29:29,060
<font color="#CCCCCC">of stolen private keys and certificates</font>

807
00:29:27,170 --> 00:29:31,460
<font color="#E5E5E5">because attackers can no longer</font>

808
00:29:29,060 --> 00:29:34,010
stealthily<font color="#CCCCCC"> signed their malware</font><font color="#E5E5E5"> it also</font>

809
00:29:31,460 --> 00:29:36,400
eliminates<font color="#E5E5E5"> a whole swath of legacy</font>

810
00:29:34,010 --> 00:29:40,100
drivers that were developed<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the past</font>

811
00:29:36,400 --> 00:29:41,510
however<font color="#CCCCCC"> WH KL</font><font color="#E5E5E5"> is not a panacea</font><font color="#CCCCCC"> so what</font>

812
00:29:40,100 --> 00:29:44,800
you're seeing<font color="#CCCCCC"> right here</font><font color="#E5E5E5"> on your</font><font color="#CCCCCC"> screen</font>

813
00:29:41,510 --> 00:29:49,270
is the<font color="#CCCCCC"> WH QL signature for the driver</font>

814
00:29:44,800 --> 00:29:49,270
<font color="#CCCCCC">that we just exploited in the rap demo</font>

815
00:29:49,540 --> 00:29:54,500
so to further<font color="#E5E5E5"> their defenses</font><font color="#CCCCCC"> defenders</font>

816
00:29:52,940 --> 00:29:56,240
can supplement code integrity policies

817
00:29:54,500 --> 00:29:58,130
with<font color="#E5E5E5"> black listing of known exploitable</font>

818
00:29:56,240 --> 00:30:00,200
drivers<font color="#CCCCCC"> starting with</font><font color="#E5E5E5"> Windows 10 red</font>

819
00:29:58,130 --> 00:30:03,530
<font color="#E5E5E5">stone 5 which comes out</font><font color="#CCCCCC"> in October</font>

820
00:30:00,200 --> 00:30:04,400
<font color="#E5E5E5">hopefully Microsoft will block many</font>

821
00:30:03,530 --> 00:30:06,710
known exploitable

822
00:30:04,400 --> 00:30:09,440
drivers by default if hypervisor code

823
00:30:06,710 --> 00:30:11,510
integrity is enabled<font color="#E5E5E5"> it's great for some</font>

824
00:30:09,440 --> 00:30:14,200
users<font color="#E5E5E5"> but not everybody has the hardware</font>

825
00:30:11,510 --> 00:30:17,180
requirement<font color="#E5E5E5"> that's required for HV CI</font>

826
00:30:14,200 --> 00:30:18,730
<font color="#E5E5E5">and a lot of enterprises are still on</font>

827
00:30:17,180 --> 00:30:21,830
Windows<font color="#E5E5E5"> 7 and</font><font color="#CCCCCC"> Windows 8</font>

828
00:30:18,730 --> 00:30:23,150
so to help<font color="#E5E5E5"> mitigate these risks the</font>

829
00:30:21,830 --> 00:30:25,280
risks of these<font color="#CCCCCC"> forever</font><font color="#E5E5E5"> days for the rest</font>

830
00:30:23,150 --> 00:30:27,460
of us<font color="#CCCCCC"> we're releasing a tool called</font>

831
00:30:25,280 --> 00:30:31,790
kernel attack surface reduction or<font color="#CCCCCC"> Qasr</font>

832
00:30:27,460 --> 00:30:33,950
alongside this<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> that will block</font><font color="#E5E5E5"> a</font>

833
00:30:31,790 --> 00:30:35,659
list of known exploitable date of

834
00:30:33,950 --> 00:30:37,670
drivers these are drivers<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you can</font>

835
00:30:35,660 --> 00:30:39,890
find on github where you run a tool and

836
00:30:37,670 --> 00:30:42,860
<font color="#CCCCCC">pop</font><font color="#E5E5E5"> you pop the kernel within as quickly</font>

837
00:30:39,890 --> 00:30:45,680
as<font color="#CCCCCC"> you saw that demo so we understand</font>

838
00:30:42,860 --> 00:30:47,889
that this<font color="#E5E5E5"> is only going to add a</font>

839
00:30:45,680 --> 00:30:50,630
roadblock<font color="#CCCCCC"> for unsophisticated attackers</font>

840
00:30:47,890 --> 00:30:52,820
that<font color="#E5E5E5"> are reusing known exploits</font><font color="#CCCCCC"> it's not</font>

841
00:30:50,630 --> 00:30:56,180
it<font color="#CCCCCC"> doesn't scale blacklisting doesn't</font>

842
00:30:52,820 --> 00:30:58,580
scale<font color="#CCCCCC"> and it will</font><font color="#E5E5E5"> not stop attackers who</font>

843
00:30:56,180 --> 00:30:59,570
know how to<font color="#E5E5E5"> find new exploits new font</font>

844
00:30:58,580 --> 00:31:01,699
new vulnerabilities<font color="#E5E5E5"> and then write</font>

845
00:30:59,570 --> 00:31:03,439
exploits for them<font color="#CCCCCC"> but we're hoping what</font>

846
00:31:01,700 --> 00:31:06,410
least stop script<font color="#CCCCCC"> kiddies from rampaging</font>

847
00:31:03,440 --> 00:31:08,360
around<font color="#CCCCCC"> in your kernels Microsoft is in</font>

848
00:31:06,410 --> 00:31:10,520
the process<font color="#CCCCCC"> of finalizing their redstone</font>

849
00:31:08,360 --> 00:31:12,889
<font color="#CCCCCC">5 driver blacklist when it's complete</font>

850
00:31:10,520 --> 00:31:15,860
<font color="#E5E5E5">will we're hoping to incorporate it into</font>

851
00:31:12,890 --> 00:31:18,110
a future version<font color="#E5E5E5"> of Qasr</font><font color="#CCCCCC"> Oh</font>

852
00:31:15,860 --> 00:31:22,250
<font color="#E5E5E5">Qasr will be available on our website</font>

853
00:31:18,110 --> 00:31:24,320
and Gabe comm<font color="#E5E5E5"> sometime today</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> looking</font>

854
00:31:22,250 --> 00:31:26,270
back<font color="#E5E5E5"> at our red vs. blue we realized</font>

855
00:31:24,320 --> 00:31:28,310
that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> needed a better</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> to hunt in</font>

856
00:31:26,270 --> 00:31:29,950
the kernel for threats like double

857
00:31:28,310 --> 00:31:32,389
pulsar and our file<font color="#E5E5E5"> ass implant</font>

858
00:31:29,950 --> 00:31:34,100
<font color="#E5E5E5">traditional forensic style techniques of</font>

859
00:31:32,390 --> 00:31:36,140
you know full memory capture and then

860
00:31:34,100 --> 00:31:38,060
offline<font color="#E5E5E5"> analysis they don't really scale</font>

861
00:31:36,140 --> 00:31:41,510
<font color="#E5E5E5">to too large or medium or large</font>

862
00:31:38,060 --> 00:31:43,070
enterprises<font color="#E5E5E5"> so to address the problem</font><font color="#CCCCCC"> we</font>

863
00:31:41,510 --> 00:31:46,070
<font color="#E5E5E5">decided to leverage the same style of</font>

864
00:31:43,070 --> 00:31:49,870
collection techniques but instead we

865
00:31:46,070 --> 00:31:52,189
<font color="#E5E5E5">would do the analysis on the</font><font color="#CCCCCC"> endpoint so</font>

866
00:31:49,870 --> 00:31:53,750
<font color="#CCCCCC">it's similar</font><font color="#E5E5E5"> to what traditionally</font>

867
00:31:52,190 --> 00:31:55,670
blackbox rootkit scanners<font color="#E5E5E5"> have type have</font>

868
00:31:53,750 --> 00:31:57,650
done in the past<font color="#E5E5E5"> this means we can</font>

869
00:31:55,670 --> 00:32:02,630
complete a scan in milliseconds instead

870
00:31:57,650 --> 00:32:03,560
<font color="#CCCCCC">of minutes however several technique I'm</font>

871
00:32:02,630 --> 00:32:05,060
sorry there<font color="#E5E5E5"> are several techniques</font>

872
00:32:03,560 --> 00:32:06,860
available to<font color="#E5E5E5"> read physical memory</font><font color="#CCCCCC"> on a</font>

873
00:32:05,060 --> 00:32:09,740
Windows<font color="#CCCCCC"> machine such as the physical</font>

874
00:32:06,860 --> 00:32:12,590
memory device or in the kernel various

875
00:32:09,740 --> 00:32:15,350
<font color="#E5E5E5">MDL based</font><font color="#CCCCCC"> api's but</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> favorite</font>

876
00:32:12,590 --> 00:32:18,649
technique is page table remapping

877
00:32:15,350 --> 00:32:20,149
so processors use page tables<font color="#E5E5E5"> to map</font>

878
00:32:18,650 --> 00:32:22,880
virtual addresses<font color="#E5E5E5"> into physical</font>

879
00:32:20,150 --> 00:32:26,180
addresses page table remapping uses the

880
00:32:22,880 --> 00:32:28,910
<font color="#E5E5E5">CPUs paging system itself to read</font>

881
00:32:26,180 --> 00:32:30,680
arbitrary physical pages<font color="#E5E5E5"> it requires</font>

882
00:32:28,910 --> 00:32:32,240
very<font color="#CCCCCC"> little cooperation</font><font color="#E5E5E5"> from the OS</font>

883
00:32:30,680 --> 00:32:34,610
memory manager<font color="#E5E5E5"> making it resistant to</font>

884
00:32:32,240 --> 00:32:37,360
<font color="#CCCCCC">rootkits</font><font color="#E5E5E5"> that say you hope the virtual</font>

885
00:32:34,610 --> 00:32:40,310
memory<font color="#E5E5E5"> device</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> physical memory device</font>

886
00:32:37,360 --> 00:32:42,439
<font color="#CCCCCC">the general</font><font color="#E5E5E5"> idea of it is</font><font color="#CCCCCC"> that you</font>

887
00:32:40,310 --> 00:32:44,240
<font color="#E5E5E5">allocate a page of memory and then you</font>

888
00:32:42,440 --> 00:32:46,780
use search and you find the page table

889
00:32:44,240 --> 00:32:48,770
that<font color="#CCCCCC"> describes</font><font color="#E5E5E5"> that page of</font><font color="#CCCCCC"> memory and</font>

890
00:32:46,780 --> 00:32:50,090
there's a<font color="#E5E5E5"> corresponding physical</font><font color="#CCCCCC"> page</font>

891
00:32:48,770 --> 00:32:51,470
for every virtual page of memory

892
00:32:50,090 --> 00:32:52,820
well if once<font color="#E5E5E5"> you know where that page</font>

893
00:32:51,470 --> 00:32:54,140
table<font color="#E5E5E5"> is if you're in the kernel you</font>

894
00:32:52,820 --> 00:32:55,850
have you can just<font color="#CCCCCC"> rewrite that</font><font color="#E5E5E5"> page</font>

895
00:32:54,140 --> 00:32:57,410
table<font color="#E5E5E5"> entry so you rewrite the page</font>

896
00:32:55,850 --> 00:33:00,740
table entry to point to a new<font color="#CCCCCC"> physical</font>

897
00:32:57,410 --> 00:33:01,940
page and then afterwards you flush a CPU

898
00:33:00,740 --> 00:33:03,710
cache called the translation lookaside

899
00:33:01,940 --> 00:33:06,290
<font color="#E5E5E5">buffer which is just caches the old</font>

900
00:33:03,710 --> 00:33:07,850
value<font color="#CCCCCC"> of that Pte</font><font color="#E5E5E5"> so once you flush that</font>

901
00:33:06,290 --> 00:33:09,740
you can now reread that<font color="#E5E5E5"> same virtual</font>

902
00:33:07,850 --> 00:33:11,120
address which will be backed by<font color="#E5E5E5"> whatever</font>

903
00:33:09,740 --> 00:33:13,760
physical<font color="#E5E5E5"> address year of your choosing</font>

904
00:33:11,120 --> 00:33:17,629
<font color="#E5E5E5">now this technique is extremely fast</font>

905
00:33:13,760 --> 00:33:22,970
<font color="#CCCCCC">doesn't require any OSAP eyes and it was</font>

906
00:33:17,630 --> 00:33:24,710
our<font color="#E5E5E5"> our approach</font><font color="#CCCCCC"> of choice so our goal</font>

907
00:33:22,970 --> 00:33:27,770
was<font color="#CCCCCC"> to generically detect double pulsar</font>

908
00:33:24,710 --> 00:33:28,940
as<font color="#E5E5E5"> it</font><font color="#CCCCCC"> lay dormant</font><font color="#E5E5E5"> without signatures</font><font color="#CCCCCC"> one</font>

909
00:33:27,770 --> 00:33:30,500
<font color="#E5E5E5">option would have been to scan through</font>

910
00:33:28,940 --> 00:33:33,500
the kernel pool which is<font color="#CCCCCC"> this it's a</font>

911
00:33:30,500 --> 00:33:35,240
heap in<font color="#CCCCCC"> the kernel it's the pool memory</font>

912
00:33:33,500 --> 00:33:37,730
looking for shell code like blobs

913
00:33:35,240 --> 00:33:40,580
unfortunately on<font color="#CCCCCC"> Windows 7</font><font color="#E5E5E5"> the entire</font>

914
00:33:37,730 --> 00:33:42,140
<font color="#CCCCCC">nan page pool is executable which leaves</font>

915
00:33:40,580 --> 00:33:45,980
a large search space<font color="#CCCCCC"> and we're worried</font>

916
00:33:42,140 --> 00:33:47,900
about false positives<font color="#CCCCCC"> so</font><font color="#E5E5E5"> instead we</font>

917
00:33:45,980 --> 00:33:51,110
decided<font color="#E5E5E5"> to identify the function pointer</font>

918
00:33:47,900 --> 00:33:52,850
hook<font color="#E5E5E5"> but what would take a step back and</font>

919
00:33:51,110 --> 00:33:54,949
say what is a function<font color="#CCCCCC"> pointer a</font>

920
00:33:52,850 --> 00:33:56,899
function pointer<font color="#E5E5E5"> in a PE file because</font>

921
00:33:54,950 --> 00:33:59,090
all drivers<font color="#E5E5E5"> are PE files is just an</font>

922
00:33:56,900 --> 00:34:01,220
absolute address when a driver is<font color="#E5E5E5"> built</font>

923
00:33:59,090 --> 00:34:02,780
it was compiled and linked it is linked

924
00:34:01,220 --> 00:34:05,240
with<font color="#E5E5E5"> a preferred load address and all</font>

925
00:34:02,780 --> 00:34:09,560
pointers are addresses within<font color="#E5E5E5"> that</font>

926
00:34:05,240 --> 00:34:10,580
driver<font color="#E5E5E5"> so</font><font color="#CCCCCC"> with modern operating systems</font>

927
00:34:09,560 --> 00:34:12,529
there's address space layout

928
00:34:10,580 --> 00:34:13,759
<font color="#CCCCCC">randomization</font><font color="#E5E5E5"> which means that drivers</font>

929
00:34:12,530 --> 00:34:14,240
will never get loaded<font color="#E5E5E5"> at the preferred</font>

930
00:34:13,760 --> 00:34:16,580
load address

931
00:34:14,239 --> 00:34:17,959
so the compensate for this the PE file

932
00:34:16,580 --> 00:34:20,199
has something<font color="#CCCCCC"> called a relocation</font>

933
00:34:17,960 --> 00:34:22,220
directory<font color="#E5E5E5"> which is a list of all the</font>

934
00:34:20,199 --> 00:34:24,739
<font color="#E5E5E5">locations within that PE file that needs</font>

935
00:34:22,219 --> 00:34:26,029
<font color="#CCCCCC">to be</font><font color="#E5E5E5"> adjusted</font><font color="#CCCCCC"> when</font><font color="#E5E5E5"> if a PE gets loaded</font>

936
00:34:24,739 --> 00:34:28,370
here instead of<font color="#E5E5E5"> its preferred load</font>

937
00:34:26,030 --> 00:34:29,240
address<font color="#E5E5E5"> here so</font><font color="#CCCCCC"> this relocation</font>

938
00:34:28,370 --> 00:34:30,710
directory is

939
00:34:29,239 --> 00:34:33,979
basically<font color="#E5E5E5"> a list of all the pointers</font>

940
00:34:30,710 --> 00:34:35,389
within the driver file<font color="#E5E5E5"> so</font><font color="#CCCCCC"> now just</font><font color="#E5E5E5"> by</font>

941
00:34:33,980 --> 00:34:36,710
walking<font color="#CCCCCC"> the relocation directory we know</font>

942
00:34:35,389 --> 00:34:38,659
all the pointers in the file<font color="#CCCCCC"> but</font><font color="#E5E5E5"> we're</font>

943
00:34:36,710 --> 00:34:41,600
interested<font color="#CCCCCC"> in function pointers well so</font>

944
00:34:38,659 --> 00:34:43,970
if<font color="#E5E5E5"> we now are that list down</font><font color="#CCCCCC"> to pointers</font>

945
00:34:41,600 --> 00:34:46,489
to executable regions within<font color="#E5E5E5"> that</font><font color="#CCCCCC"> PD</font>

946
00:34:43,969 --> 00:34:46,850
file then now we<font color="#E5E5E5"> have a list of function</font>

947
00:34:46,489 --> 00:34:51,199
pointers

948
00:34:46,850 --> 00:34:54,110
so we then qualify that<font color="#E5E5E5"> even further and</font>

949
00:34:51,199 --> 00:34:57,529
we<font color="#E5E5E5"> we say that</font><font color="#CCCCCC"> okay if it was a</font><font color="#E5E5E5"> function</font>

950
00:34:54,110 --> 00:34:58,940
<font color="#CCCCCC">pointer on</font><font color="#E5E5E5"> disk but</font><font color="#CCCCCC"> in memory</font><font color="#E5E5E5"> it doesn't</font>

951
00:34:57,530 --> 00:35:00,619
even<font color="#E5E5E5"> point to anywhere in</font><font color="#CCCCCC"> that driver</font>

952
00:34:58,940 --> 00:35:04,610
file but instead points to somewhere

953
00:35:00,619 --> 00:35:09,350
<font color="#CCCCCC">else in</font><font color="#E5E5E5"> that is also executable then</font><font color="#CCCCCC"> we</font>

954
00:35:04,610 --> 00:35:10,850
consider that a hit<font color="#E5E5E5"> so this technique</font>

955
00:35:09,350 --> 00:35:12,890
<font color="#CCCCCC">that I</font><font color="#E5E5E5"> just described detects both</font>

956
00:35:10,850 --> 00:35:14,750
double pulsar and the socket<font color="#E5E5E5"> Handler</font>

957
00:35:12,890 --> 00:35:17,118
hook installed by our<font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> mode</font>

958
00:35:14,750 --> 00:35:19,340
implant<font color="#E5E5E5"> we're releasing a tool that in</font>

959
00:35:17,119 --> 00:35:21,200
our testing can scan<font color="#CCCCCC"> all drivers on a</font>

960
00:35:19,340 --> 00:35:23,990
Windows 10<font color="#E5E5E5"> system and under it's like 80</font>

961
00:35:21,200 --> 00:35:26,450
milliseconds<font color="#CCCCCC"> some</font><font color="#E5E5E5"> like that it's it's</font>

962
00:35:23,990 --> 00:35:28,549
<font color="#CCCCCC">really fast we're</font><font color="#E5E5E5"> calling up</font><font color="#CCCCCC"> marta named</font>

963
00:35:26,450 --> 00:35:31,100
after marta<font color="#CCCCCC"> burg a the first astronomer</font>

964
00:35:28,550 --> 00:35:32,840
to discover a double pole star will demo

965
00:35:31,100 --> 00:35:33,700
<font color="#CCCCCC">marta alongside another</font><font color="#E5E5E5"> tool in just a</font>

966
00:35:32,840 --> 00:35:36,770
minute

967
00:35:33,700 --> 00:35:37,669
so<font color="#CCCCCC"> on-demand</font><font color="#E5E5E5"> scans are great but we</font>

968
00:35:36,770 --> 00:35:39,710
wanted to<font color="#E5E5E5"> see if we could take this a</font>

969
00:35:37,670 --> 00:35:41,780
step further<font color="#CCCCCC"> so we wanted to</font><font color="#E5E5E5"> see if we</font>

970
00:35:39,710 --> 00:35:44,359
could catch in<font color="#E5E5E5"> real time and potentially</font>

971
00:35:41,780 --> 00:35:46,850
stop<font color="#E5E5E5"> these types of attacks</font><font color="#CCCCCC"> before they</font>

972
00:35:44,359 --> 00:35:48,710
can do damage so having<font color="#E5E5E5"> worked on</font><font color="#CCCCCC"> em</font>

973
00:35:46,850 --> 00:35:50,630
games<font color="#CCCCCC"> hardware</font><font color="#E5E5E5"> assisted control flow</font>

974
00:35:48,710 --> 00:35:52,510
integrity product<font color="#E5E5E5"> we're familiar with</font>

975
00:35:50,630 --> 00:35:57,230
the performance<font color="#E5E5E5"> monitoring unit which is</font>

976
00:35:52,510 --> 00:35:58,970
<font color="#E5E5E5">present on most</font><font color="#CCCCCC"> cpus and the</font><font color="#E5E5E5"> PMU is a</font>

977
00:35:57,230 --> 00:36:00,830
component of the<font color="#CCCCCC"> cpu</font><font color="#E5E5E5"> that can be</font>

978
00:35:58,970 --> 00:36:02,660
programmed<font color="#E5E5E5"> to count occurrences</font><font color="#CCCCCC"> of</font>

979
00:36:00,830 --> 00:36:04,069
certain low-level events and you<font color="#E5E5E5"> can</font>

980
00:36:02,660 --> 00:36:06,140
also<font color="#CCCCCC"> program it to generate</font><font color="#E5E5E5"> and</font>

981
00:36:04,070 --> 00:36:08,650
interrupt<font color="#E5E5E5"> when a certain</font><font color="#CCCCCC"> number of those</font>

982
00:36:06,140 --> 00:36:12,290
events<font color="#E5E5E5"> has occurred</font><font color="#CCCCCC"> so in</font><font color="#E5E5E5"> this case</font>

983
00:36:08,650 --> 00:36:15,109
after<font color="#E5E5E5"> some</font><font color="#CCCCCC"> experimentation we</font><font color="#E5E5E5"> settled</font>

984
00:36:12,290 --> 00:36:18,020
upon<font color="#E5E5E5"> indirect near call branch</font>

985
00:36:15,109 --> 00:36:20,359
mispredictions<font color="#CCCCCC"> when one of these events</font>

986
00:36:18,020 --> 00:36:21,830
occurs<font color="#E5E5E5"> we program the PMU to generate an</font>

987
00:36:20,359 --> 00:36:24,140
interrupt<font color="#CCCCCC"> and now when the interrupt</font>

988
00:36:21,830 --> 00:36:25,700
happens our interrupt service routine

989
00:36:24,140 --> 00:36:28,640
executes and we have a chance<font color="#E5E5E5"> to</font>

990
00:36:25,700 --> 00:36:30,799
validate and enforce the policy<font color="#E5E5E5"> so to</font>

991
00:36:28,640 --> 00:36:33,080
detect<font color="#CCCCCC"> unpacked code execution in this</font>

992
00:36:30,800 --> 00:36:34,280
case we keep a list of memory ranges

993
00:36:33,080 --> 00:36:36,020
<font color="#E5E5E5">that correspond to all the loaded</font>

994
00:36:34,280 --> 00:36:38,000
drivers on the system<font color="#E5E5E5"> and when</font><font color="#CCCCCC"> the</font>

995
00:36:36,020 --> 00:36:39,530
interrupt occurs we validate<font color="#E5E5E5"> that the</font>

996
00:36:38,000 --> 00:36:42,530
instruction pointer

997
00:36:39,530 --> 00:36:44,750
was executing when the<font color="#CCCCCC"> interupt</font><font color="#E5E5E5"> fire</font>

998
00:36:42,530 --> 00:36:46,820
<font color="#E5E5E5">belongs to one</font><font color="#CCCCCC"> of those</font><font color="#E5E5E5"> valid memory</font>

999
00:36:44,750 --> 00:36:50,240
ranges<font color="#CCCCCC"> and if it doesn't we consider</font>

1000
00:36:46,820 --> 00:36:52,430
that to<font color="#CCCCCC"> be a</font><font color="#E5E5E5"> policy</font><font color="#CCCCCC"> violation so now I'm</font>

1001
00:36:50,240 --> 00:36:55,459
<font color="#E5E5E5">go to demo a real-time detection of the</font>

1002
00:36:52,430 --> 00:37:03,710
double pulsar and it's also going to

1003
00:36:55,460 --> 00:37:04,670
show<font color="#E5E5E5"> Marta all right so first thing I'm</font>

1004
00:37:03,710 --> 00:37:07,640
going to do is I'm<font color="#E5E5E5"> going to start the</font>

1005
00:37:04,670 --> 00:37:10,340
unpack the Tecton<font color="#E5E5E5"> then unpack detection</font>

1006
00:37:07,640 --> 00:37:11,359
driver<font color="#E5E5E5"> next</font><font color="#CCCCCC"> time to do a martyr scan and</font>

1007
00:37:10,340 --> 00:37:14,180
Marta's not<font color="#CCCCCC"> going to find</font><font color="#E5E5E5"> anything</font>

1008
00:37:11,360 --> 00:37:17,300
because we haven't exploited the kernel

1009
00:37:14,180 --> 00:37:23,149
yet<font color="#E5E5E5"> next from a second VM</font><font color="#CCCCCC"> I'm going to</font>

1010
00:37:17,300 --> 00:37:25,460
launch<font color="#E5E5E5"> the eternal blue exploit and in</font>

1011
00:37:23,150 --> 00:37:27,680
just a second when they exploit succeeds

1012
00:37:25,460 --> 00:37:29,090
<font color="#CCCCCC">you're gonna see a break into window bug</font>

1013
00:37:27,680 --> 00:37:30,859
that's<font color="#E5E5E5"> our detection driver and it's</font>

1014
00:37:29,090 --> 00:37:32,180
going<font color="#E5E5E5"> to print out the instruction</font>

1015
00:37:30,860 --> 00:37:35,810
pointer that<font color="#E5E5E5"> it detected is unpacked</font>

1016
00:37:32,180 --> 00:37:37,279
<font color="#E5E5E5">there it is</font><font color="#CCCCCC"> alright so first we're gonna</font>

1017
00:37:35,810 --> 00:37:38,779
<font color="#E5E5E5">know we're gonna check out that address</font>

1018
00:37:37,280 --> 00:37:40,340
and we're gonna see it doesn't<font color="#E5E5E5"> belong to</font>

1019
00:37:38,780 --> 00:37:44,930
<font color="#E5E5E5">any driver module in fact it belongs</font><font color="#CCCCCC"> to</font>

1020
00:37:40,340 --> 00:37:46,280
the halbert's<font color="#E5E5E5"> reserved range we're gonna</font>

1021
00:37:44,930 --> 00:37:48,319
look at the call stack here and we're

1022
00:37:46,280 --> 00:37:50,930
<font color="#E5E5E5">gonna see that serve net is calling some</font>

1023
00:37:48,320 --> 00:37:53,420
unpacked code right here serve net dot

1024
00:37:50,930 --> 00:37:57,740
sis<font color="#E5E5E5"> now if we look at the actual</font>

1025
00:37:53,420 --> 00:38:00,490
instructions of the that are executing

1026
00:37:57,740 --> 00:38:03,430
we're gonna see here that it is this

1027
00:38:00,490 --> 00:38:06,169
architecture determination shell code

1028
00:38:03,430 --> 00:38:09,770
this<font color="#E5E5E5"> is this shell code will</font><font color="#CCCCCC"> work on</font>

1029
00:38:06,170 --> 00:38:11,060
both<font color="#E5E5E5"> x86 and x64 it uses some tricks to</font>

1030
00:38:09,770 --> 00:38:13,640
figure out which architecture it's

1031
00:38:11,060 --> 00:38:16,190
running on finally we're gonna rerun

1032
00:38:13,640 --> 00:38:18,020
<font color="#CCCCCC">Marta because we allowed the shell code</font>

1033
00:38:16,190 --> 00:38:20,300
<font color="#E5E5E5">to</font><font color="#CCCCCC"> execute it successfully installed a</font>

1034
00:38:18,020 --> 00:38:21,440
hook<font color="#E5E5E5"> in</font><font color="#CCCCCC"> to serve</font><font color="#E5E5E5"> that sis and Marta</font>

1035
00:38:20,300 --> 00:38:22,820
detected it and by the way<font color="#CCCCCC"> Mart</font><font color="#E5E5E5"> is</font>

1036
00:38:21,440 --> 00:38:25,610
actually faster now this was an older

1037
00:38:22,820 --> 00:38:28,760
version debug build probably<font color="#CCCCCC"> ya know we</font>

1038
00:38:25,610 --> 00:38:33,320
added<font color="#CCCCCC"> some optimizations also</font><font color="#E5E5E5"> yeah</font>

1039
00:38:28,760 --> 00:38:38,510
so that is detection of<font color="#CCCCCC"> real time all</font>

1040
00:38:33,320 --> 00:38:42,410
<font color="#E5E5E5">right here we go as well as demo of</font>

1041
00:38:38,510 --> 00:38:44,720
Marta all right so there's weaknesses to

1042
00:38:42,410 --> 00:38:46,339
this<font color="#E5E5E5"> proof of concept</font><font color="#CCCCCC"> including</font><font color="#E5E5E5"> the fact</font>

1043
00:38:44,720 --> 00:38:49,069
that patch guard<font color="#E5E5E5"> itself uses unpacked</font>

1044
00:38:46,340 --> 00:38:51,260
code so because they're trying<font color="#CCCCCC"> to hinder</font>

1045
00:38:49,070 --> 00:38:53,299
<font color="#CCCCCC">reverse</font><font color="#E5E5E5"> engineering so while it's fun to</font>

1046
00:38:51,260 --> 00:38:55,349
catch patch guard

1047
00:38:53,299 --> 00:38:55,949
<font color="#E5E5E5">this false positive would need to be</font>

1048
00:38:55,349 --> 00:38:58,829
addressed

1049
00:38:55,949 --> 00:39:00,150
<font color="#E5E5E5">in a reliable</font><font color="#CCCCCC"> and robust manner</font><font color="#E5E5E5"> it which</font>

1050
00:38:58,829 --> 00:39:02,459
is difficult<font color="#E5E5E5"> given the fact that patch</font>

1051
00:39:00,150 --> 00:39:05,069
guard is undocumented and subject to

1052
00:39:02,459 --> 00:39:07,680
change<font color="#CCCCCC"> at</font><font color="#E5E5E5"> any time another weakness is</font>

1053
00:39:05,069 --> 00:39:09,779
that<font color="#E5E5E5"> kernel code so if the adversary can</font>

1054
00:39:07,680 --> 00:39:11,098
execute kernel code<font color="#E5E5E5"> and they're aware of</font>

1055
00:39:09,779 --> 00:39:11,999
the system the first thing<font color="#E5E5E5"> they could do</font>

1056
00:39:11,099 --> 00:39:13,650
<font color="#E5E5E5">is disable the PMU</font>

1057
00:39:11,999 --> 00:39:16,348
<font color="#E5E5E5">all you need to do is write</font><font color="#CCCCCC"> some MSRs to</font>

1058
00:39:13,650 --> 00:39:21,140
disable the<font color="#CCCCCC"> PMU or they could disable</font>

1059
00:39:16,349 --> 00:39:23,640
interrupts entirely<font color="#E5E5E5"> and finally an</font>

1060
00:39:21,140 --> 00:39:27,058
attacker could always do data attacks on

1061
00:39:23,640 --> 00:39:28,348
our<font color="#E5E5E5"> driver just</font><font color="#CCCCCC"> like before where we can</font>

1062
00:39:27,059 --> 00:39:29,969
do I 80 patching things<font color="#E5E5E5"> like that</font>

1063
00:39:28,349 --> 00:39:31,079
<font color="#E5E5E5">because this is</font><font color="#CCCCCC"> just this is a driver</font>

1064
00:39:29,969 --> 00:39:34,589
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> just software</font><font color="#E5E5E5"> running a ring</font>

1065
00:39:31,079 --> 00:39:35,699
<font color="#E5E5E5">zero</font><font color="#CCCCCC"> all right so I just</font><font color="#E5E5E5"> want to copper</font>

1066
00:39:34,589 --> 00:39:37,489
<font color="#E5E5E5">quickly there's some notable work in</font>

1067
00:39:35,699 --> 00:39:40,319
this<font color="#E5E5E5"> space we're running short</font><font color="#CCCCCC"> on time</font>

1068
00:39:37,489 --> 00:39:41,519
hypervisors that do<font color="#E5E5E5"> similar things but</font>

1069
00:39:40,319 --> 00:39:43,650
<font color="#CCCCCC">instead</font><font color="#E5E5E5"> of using</font><font color="#CCCCCC"> P mu</font><font color="#E5E5E5"> they use</font>

1070
00:39:41,519 --> 00:39:44,698
hypervisors including memory<font color="#CCCCCC"> Menaul mem</font>

1071
00:39:43,650 --> 00:39:46,289
<font color="#CCCCCC">Pro and sacrificer</font>

1072
00:39:44,699 --> 00:39:47,880
additional details are<font color="#CCCCCC"> available in our</font>

1073
00:39:46,289 --> 00:39:50,519
<font color="#E5E5E5">slides which will</font><font color="#CCCCCC"> be posted online</font><font color="#E5E5E5"> at</font>

1074
00:39:47,880 --> 00:39:51,689
the end of the day so earlier we

1075
00:39:50,519 --> 00:39:53,430
mentioned that<font color="#E5E5E5"> Windows the Windows</font>

1076
00:39:51,689 --> 00:39:56,629
kernel has<font color="#E5E5E5"> a gap in coverage against</font>

1077
00:39:53,430 --> 00:39:59,489
<font color="#E5E5E5">rear flow control hijacks Roth attacks</font>

1078
00:39:56,630 --> 00:40:01,019
so Microsoft<font color="#CCCCCC"> canceled return flow guard</font>

1079
00:39:59,489 --> 00:40:02,609
<font color="#CCCCCC">and their current plan to</font><font color="#E5E5E5"> defend against</font>

1080
00:40:01,019 --> 00:40:05,008
<font color="#CCCCCC">rock requires Intel control flow</font>

1081
00:40:02,609 --> 00:40:06,269
enhancement technology or<font color="#E5E5E5"> CET which to</font>

1082
00:40:05,009 --> 00:40:08,459
our<font color="#CCCCCC"> knowledge doesn't</font><font color="#E5E5E5"> exist on any</font>

1083
00:40:06,269 --> 00:40:10,379
production processor<font color="#CCCCCC"> today when it is</font>

1084
00:40:08,459 --> 00:40:12,419
released it<font color="#E5E5E5"> will only benefit processors</font>

1085
00:40:10,380 --> 00:40:14,459
that<font color="#E5E5E5"> are the systems that are running</font>

1086
00:40:12,420 --> 00:40:15,709
<font color="#E5E5E5">those processors which was great for the</font>

1087
00:40:14,459 --> 00:40:19,140
future<font color="#E5E5E5"> but it doesn't help</font><font color="#CCCCCC"> anybody today</font>

1088
00:40:15,709 --> 00:40:23,448
<font color="#E5E5E5">so here we promote a</font><font color="#CCCCCC"> propose a PM you</font>

1089
00:40:19,140 --> 00:40:27,058
based protection system so we<font color="#CCCCCC"> can</font>

1090
00:40:23,449 --> 00:40:31,140
configure the CPUs last branch recorded

1091
00:40:27,059 --> 00:40:32,880
mechanism to keep a circular log of all

1092
00:40:31,140 --> 00:40:35,699
of the return instructions that<font color="#E5E5E5"> occur</font>

1093
00:40:32,880 --> 00:40:38,519
within the kernel we can then generate a

1094
00:40:35,699 --> 00:40:40,079
control flow policy by<font color="#E5E5E5"> scanning all the</font>

1095
00:40:38,519 --> 00:40:43,019
<font color="#CCCCCC">drivers that are</font><font color="#E5E5E5"> loaded into the kernel</font>

1096
00:40:40,079 --> 00:40:44,640
<font color="#CCCCCC">performing a linear scan disassembly of</font>

1097
00:40:43,019 --> 00:40:47,459
<font color="#E5E5E5">those drivers looking for call</font>

1098
00:40:44,640 --> 00:40:49,469
instructions every call<font color="#CCCCCC"> instruction</font><font color="#E5E5E5"> on</font>

1099
00:40:47,459 --> 00:40:50,819
or<font color="#CCCCCC"> under</font><font color="#E5E5E5"> normal control flow the next</font>

1100
00:40:49,469 --> 00:40:52,380
instruction<font color="#E5E5E5"> after that call</font><font color="#CCCCCC"> instruction</font>

1101
00:40:50,819 --> 00:40:53,849
is the<font color="#E5E5E5"> expected return</font><font color="#CCCCCC"> sight you call</font>

1102
00:40:52,380 --> 00:40:57,479
somewhere<font color="#E5E5E5"> else it returns back to the</font>

1103
00:40:53,849 --> 00:40:58,920
<font color="#E5E5E5">next instruction</font><font color="#CCCCCC"> so we build up a policy</font>

1104
00:40:57,479 --> 00:41:00,879
<font color="#E5E5E5">for every driver on the system that's a</font>

1105
00:40:58,920 --> 00:41:02,559
<font color="#CCCCCC">bitmap that</font><font color="#E5E5E5"> just says</font><font color="#CCCCCC"> where</font>

1106
00:41:00,880 --> 00:41:03,910
the bid<font color="#E5E5E5"> is one if that's a legitimate</font>

1107
00:41:02,559 --> 00:41:05,680
return<font color="#E5E5E5"> site and the bid is zero if it's</font>

1108
00:41:03,910 --> 00:41:07,149
not a<font color="#E5E5E5"> legitimate return site and we do</font>

1109
00:41:05,680 --> 00:41:09,609
this for<font color="#CCCCCC"> every</font><font color="#E5E5E5"> driver on the system as</font>

1110
00:41:07,150 --> 00:41:11,200
the system<font color="#E5E5E5"> as we start up we did this is</font>

1111
00:41:09,609 --> 00:41:12,460
<font color="#E5E5E5">what we're calling a policy as new</font>

1112
00:41:11,200 --> 00:41:17,169
drivers<font color="#CCCCCC"> load into the kernel</font><font color="#E5E5E5"> we update</font>

1113
00:41:12,460 --> 00:41:18,910
the policy accordingly<font color="#CCCCCC"> so generating</font><font color="#E5E5E5"> an</font>

1114
00:41:17,170 --> 00:41:21,069
<font color="#E5E5E5">interrupt for every return instruction</font>

1115
00:41:18,910 --> 00:41:22,989
is too<font color="#E5E5E5"> costly so instead that we exploit</font>

1116
00:41:21,069 --> 00:41:24,970
the fact<font color="#CCCCCC"> that Rob a return oriented</font>

1117
00:41:22,989 --> 00:41:26,380
programming<font color="#E5E5E5"> tends to</font><font color="#CCCCCC"> generate a lot of</font>

1118
00:41:24,970 --> 00:41:28,720
branch mispredictions and this is

1119
00:41:26,380 --> 00:41:31,180
because<font color="#CCCCCC"> CPUs the branch predictors</font><font color="#E5E5E5"> in</font>

1120
00:41:28,720 --> 00:41:34,359
CPUs were not optimized or designed to

1121
00:41:31,180 --> 00:41:35,618
work well in<font color="#E5E5E5"> Rob scenarios so they tend</font>

1122
00:41:34,359 --> 00:41:38,890
to be<font color="#E5E5E5"> there tend to</font><font color="#CCCCCC"> be a lot of branch</font>

1123
00:41:35,619 --> 00:41:40,809
mispredictions in these<font color="#E5E5E5"> scenarios so we</font>

1124
00:41:38,890 --> 00:41:42,160
can we can<font color="#CCCCCC"> program the PMU to</font><font color="#E5E5E5"> only</font>

1125
00:41:40,809 --> 00:41:43,839
generate interrupts<font color="#E5E5E5"> when there are</font>

1126
00:41:42,160 --> 00:41:45,609
branch mispredictions in the kernel<font color="#E5E5E5"> and</font>

1127
00:41:43,839 --> 00:41:47,589
then finally when one of these

1128
00:41:45,609 --> 00:41:50,229
interrupts fires<font color="#CCCCCC"> we look at that whole</font>

1129
00:41:47,589 --> 00:41:52,299
<font color="#CCCCCC">circularbuffer of the PM of the lbr the</font>

1130
00:41:50,229 --> 00:41:54,038
last branch recorded system and we

1131
00:41:52,299 --> 00:41:55,930
validate that<font color="#E5E5E5"> each</font><font color="#CCCCCC"> of those is a valid</font>

1132
00:41:54,039 --> 00:41:58,349
return<font color="#CCCCCC"> site and if one</font><font color="#E5E5E5"> of them is not we</font>

1133
00:41:55,930 --> 00:42:01,899
<font color="#CCCCCC">consider that</font><font color="#E5E5E5"> to be a policy violation</font>

1134
00:41:58,349 --> 00:42:03,700
<font color="#E5E5E5">so if you one thing I'd like to say if</font>

1135
00:42:01,900 --> 00:42:05,019
<font color="#E5E5E5">you don't tune these systems</font><font color="#CCCCCC"> properly</font>

1136
00:42:03,700 --> 00:42:07,419
they can<font color="#E5E5E5"> generate way too many</font>

1137
00:42:05,019 --> 00:42:09,308
interrupts and they conversely affect

1138
00:42:07,420 --> 00:42:10,869
system performance<font color="#E5E5E5"> with the system tuned</font>

1139
00:42:09,309 --> 00:42:13,839
<font color="#E5E5E5">as you're gonna see it in an upcoming</font>

1140
00:42:10,869 --> 00:42:17,440
demo<font color="#E5E5E5"> we saw about a 1% reduction in the</font>

1141
00:42:13,839 --> 00:42:18,880
<font color="#E5E5E5">jet stream</font><font color="#CCCCCC"> browser benchmark</font><font color="#E5E5E5"> while still</font>

1142
00:42:17,440 --> 00:42:20,920
maintaining<font color="#E5E5E5"> a hundred percent detection</font>

1143
00:42:18,880 --> 00:42:23,559
against our exploit<font color="#E5E5E5"> our tests our sample</font>

1144
00:42:20,920 --> 00:42:28,420
exploit<font color="#E5E5E5"> we were using this as</font><font color="#CCCCCC"> a rough</font>

1145
00:42:23,559 --> 00:42:37,229
<font color="#CCCCCC">approximation of</font><font color="#E5E5E5"> user experience all</font>

1146
00:42:28,420 --> 00:42:37,229
<font color="#E5E5E5">right so here I'm gonna demo</font><font color="#CCCCCC"> rap exploit</font>

1147
00:42:38,729 --> 00:42:48,759
this<font color="#E5E5E5"> is Windows</font><font color="#CCCCCC"> 10 18:03 hypervisor code</font>

1148
00:42:46,269 --> 00:42:50,049
integrity is enabled<font color="#E5E5E5"> first thing I'm</font>

1149
00:42:48,759 --> 00:42:52,539
going to do is I'm going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> start up our</font>

1150
00:42:50,049 --> 00:42:54,160
detection driver<font color="#CCCCCC"> and it's gonna</font><font color="#E5E5E5"> parse</font>

1151
00:42:52,539 --> 00:42:57,329
every<font color="#E5E5E5"> driver to float it into the kernel</font>

1152
00:42:54,160 --> 00:42:59,348
<font color="#E5E5E5">generate those policies and build and</font>

1153
00:42:57,329 --> 00:43:02,109
store them in fast lookup data

1154
00:42:59,349 --> 00:43:04,779
structures next I'm going to<font color="#E5E5E5"> launch an</font>

1155
00:43:02,109 --> 00:43:06,190
exploit against that<font color="#CCCCCC"> wh ql driver that's</font>

1156
00:43:04,779 --> 00:43:07,869
loaded into<font color="#E5E5E5"> the kernel right now and</font>

1157
00:43:06,190 --> 00:43:09,460
<font color="#CCCCCC">here</font><font color="#E5E5E5"> right here you can see there's a</font>

1158
00:43:07,869 --> 00:43:14,440
<font color="#CCCCCC">four rap gadgets that</font><font color="#E5E5E5"> this exploits</font>

1159
00:43:09,460 --> 00:43:15,010
going to use we run the<font color="#E5E5E5"> exploit and our</font>

1160
00:43:14,440 --> 00:43:18,970
detection

1161
00:43:15,010 --> 00:43:21,520
driver<font color="#E5E5E5"> prints out the</font><font color="#CCCCCC"> return</font>

1162
00:43:18,970 --> 00:43:25,950
destinations<font color="#E5E5E5"> and we can see that</font><font color="#CCCCCC"> we</font>

1163
00:43:21,520 --> 00:43:25,950
catch all four<font color="#CCCCCC"> rap gadgets</font>

1164
00:43:39,230 --> 00:43:44,820
so getting<font color="#E5E5E5"> into weaknesses and</font>

1165
00:43:42,450 --> 00:43:46,350
limitations<font color="#CCCCCC"> select any other</font><font color="#E5E5E5"> driver this</font>

1166
00:43:44,820 --> 00:43:49,200
driver is vulnerable to<font color="#E5E5E5"> data attacks</font>

1167
00:43:46,350 --> 00:43:51,900
like IAT patching etc or attacks on<font color="#E5E5E5"> our</font>

1168
00:43:49,200 --> 00:43:53,910
policy bitmaps<font color="#CCCCCC"> then</font><font color="#E5E5E5"> just like before the</font>

1169
00:43:51,900 --> 00:43:56,580
<font color="#CCCCCC">p.m.</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> be disabled by an adversary</font>

1170
00:43:53,910 --> 00:43:58,140
with would bring zero access however

1171
00:43:56,580 --> 00:43:59,850
<font color="#E5E5E5">both</font><font color="#CCCCCC"> of these issues</font><font color="#E5E5E5"> could</font><font color="#CCCCCC"> be addressed</font>

1172
00:43:58,140 --> 00:44:01,680
<font color="#E5E5E5">with a hypervisor</font><font color="#CCCCCC"> the hypervisor could</font>

1173
00:43:59,850 --> 00:44:03,299
create and maintain the policy bitmaps

1174
00:44:01,680 --> 00:44:04,830
<font color="#E5E5E5">just like they do with control flow</font>

1175
00:44:03,300 --> 00:44:06,570
guard and they keep<font color="#E5E5E5"> those bitmaps</font>

1176
00:44:04,830 --> 00:44:10,410
<font color="#CCCCCC">read-only to the kernel so they can't be</font>

1177
00:44:06,570 --> 00:44:12,450
tampered<font color="#CCCCCC"> with the hypervisor could also</font>

1178
00:44:10,410 --> 00:44:14,368
prevent tampering of<font color="#E5E5E5"> the MSRs that</font>

1179
00:44:12,450 --> 00:44:15,600
control the performance<font color="#CCCCCC"> miring unit as</font>

1180
00:44:14,369 --> 00:44:17,340
well<font color="#E5E5E5"> as</font><font color="#CCCCCC"> the last branch recorded</font>

1181
00:44:15,600 --> 00:44:20,430
mechanism to keep them from<font color="#E5E5E5"> being</font>

1182
00:44:17,340 --> 00:44:22,109
tampered with<font color="#E5E5E5"> another issue is that in</font>

1183
00:44:20,430 --> 00:44:24,000
order<font color="#E5E5E5"> to</font><font color="#CCCCCC"> perform utley and accurately</font>

1184
00:44:22,109 --> 00:44:26,819
determine control flow<font color="#E5E5E5"> we need both the</font>

1185
00:44:24,000 --> 00:44:28,290
<font color="#CCCCCC">p mu and the l BR</font><font color="#E5E5E5"> this means that if</font>

1186
00:44:26,820 --> 00:44:30,210
<font color="#CCCCCC">this system is</font><font color="#E5E5E5"> running inside</font><font color="#CCCCCC"> of a</font>

1187
00:44:28,290 --> 00:44:32,369
hypervisor the hypervisor needs to make

1188
00:44:30,210 --> 00:44:35,910
both of those<font color="#CCCCCC"> cpu functions available</font><font color="#E5E5E5"> to</font>

1189
00:44:32,369 --> 00:44:38,220
us<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is not currently true on hyper-v</font>

1190
00:44:35,910 --> 00:44:42,390
or<font color="#E5E5E5"> VMware VMware does expose the</font><font color="#CCCCCC"> P</font><font color="#E5E5E5"> mu</font>

1191
00:44:38,220 --> 00:44:44,189
but not the<font color="#CCCCCC"> l BR however the VBS or</font>

1192
00:44:42,390 --> 00:44:46,890
virtualization<font color="#E5E5E5"> based security hypervisor</font>

1193
00:44:44,190 --> 00:44:49,680
<font color="#CCCCCC">than the newer Windows 10</font><font color="#E5E5E5"> the numeron</font>

1194
00:44:46,890 --> 00:44:51,540
<font color="#E5E5E5">dos 10 security feature</font><font color="#CCCCCC"> does make it</font>

1195
00:44:49,680 --> 00:44:54,629
available<font color="#E5E5E5"> so it is available</font><font color="#CCCCCC"> on native</font>

1196
00:44:51,540 --> 00:44:57,480
<font color="#CCCCCC">hardware</font><font color="#E5E5E5"> if you have h v CI enabled this</font>

1197
00:44:54,630 --> 00:44:59,340
<font color="#E5E5E5">system does depend on being able to</font>

1198
00:44:57,480 --> 00:45:01,020
<font color="#CCCCCC">accurately determine valid return sites</font>

1199
00:44:59,340 --> 00:45:02,280
<font color="#CCCCCC">which means we</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to build up that</font>

1200
00:45:01,020 --> 00:45:03,810
<font color="#CCCCCC">remember I was talking for about</font><font color="#E5E5E5"> the</font>

1201
00:45:02,280 --> 00:45:05,369
call and it needs to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> have the</font><font color="#E5E5E5"> return</font>

1202
00:45:03,810 --> 00:45:06,630
<font color="#CCCCCC">site immediately</font><font color="#E5E5E5"> afterwards well</font>

1203
00:45:05,369 --> 00:45:07,920
unfortunately there's two drivers<font color="#E5E5E5"> that</font>

1204
00:45:06,630 --> 00:45:10,830
<font color="#CCCCCC">are loaded</font><font color="#E5E5E5"> into the Windows kernel by</font>

1205
00:45:07,920 --> 00:45:15,480
default that<font color="#E5E5E5"> are off you skated</font><font color="#CCCCCC"> clip</font>

1206
00:45:10,830 --> 00:45:17,009
<font color="#CCCCCC">SPSS</font><font color="#E5E5E5"> and PE off that sis</font><font color="#CCCCCC"> because their</font>

1207
00:45:15,480 --> 00:45:19,740
<font color="#CCCCCC">APIs gated they do weird things</font><font color="#E5E5E5"> like</font>

1208
00:45:17,010 --> 00:45:21,510
push<font color="#CCCCCC"> rep and that make it difficult to</font>

1209
00:45:19,740 --> 00:45:25,319
<font color="#E5E5E5">determine all the legitimate return</font>

1210
00:45:21,510 --> 00:45:27,780
sites<font color="#CCCCCC"> so we have</font><font color="#E5E5E5"> to currently ignore all</font>

1211
00:45:25,320 --> 00:45:29,609
returns into<font color="#E5E5E5"> those drivers which creates</font>

1212
00:45:27,780 --> 00:45:31,380
a huge<font color="#CCCCCC"> gap</font><font color="#E5E5E5"> this could be</font><font color="#CCCCCC"> addressed by</font>

1213
00:45:29,609 --> 00:45:33,330
Microsoft if they were to have<font color="#CCCCCC"> their</font>

1214
00:45:31,380 --> 00:45:35,640
obfuscating compiler<font color="#CCCCCC"> emit a list of</font>

1215
00:45:33,330 --> 00:45:38,009
<font color="#E5E5E5">valid return sites</font><font color="#CCCCCC"> what's doing its</font>

1216
00:45:35,640 --> 00:45:40,890
obfuscation<font color="#CCCCCC"> and then those return sets</font>

1217
00:45:38,010 --> 00:45:43,230
could<font color="#E5E5E5"> be used for Policy generation so</font>

1218
00:45:40,890 --> 00:45:45,930
finally I want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> give credit</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> George</font>

1219
00:45:43,230 --> 00:45:48,030
<font color="#CCCCCC">butcher ski-in a testament to there's</font>

1220
00:45:45,930 --> 00:45:50,460
nothing<font color="#CCCCCC"> new Under the Sun we</font><font color="#E5E5E5"> very</font>

1221
00:45:48,030 --> 00:45:52,510
<font color="#E5E5E5">recently found out that he invented a</font>

1222
00:45:50,460 --> 00:45:58,700
<font color="#CCCCCC">similar system</font><font color="#E5E5E5"> clears</font>

1223
00:45:52,510 --> 00:46:02,180
<font color="#E5E5E5">implemented against Linux so today we</font>

1224
00:45:58,700 --> 00:46:03,950
talked<font color="#E5E5E5"> about how Windows kernel security</font>

1225
00:46:02,180 --> 00:46:07,460
has evolved<font color="#CCCCCC"> over time in response</font><font color="#E5E5E5"> to</font>

1226
00:46:03,950 --> 00:46:09,379
<font color="#E5E5E5">threats we then discovered we discussed</font>

1227
00:46:07,460 --> 00:46:11,869
<font color="#E5E5E5">some discoveries that we as red teamers</font>

1228
00:46:09,380 --> 00:46:14,510
made and then we put<font color="#CCCCCC"> our blue shirts</font>

1229
00:46:11,869 --> 00:46:18,740
back on<font color="#E5E5E5"> and discuss some ways to close</font>

1230
00:46:14,510 --> 00:46:20,390
<font color="#E5E5E5">these</font><font color="#CCCCCC"> gaps</font><font color="#E5E5E5"> Windows platform security has</font>

1231
00:46:18,740 --> 00:46:23,240
gotten a lot better<font color="#CCCCCC"> in the last decade</font>

1232
00:46:20,390 --> 00:46:24,609
<font color="#CCCCCC">but there's still big holes that</font><font color="#E5E5E5"> will</font>

1233
00:46:23,240 --> 00:46:27,020
need to<font color="#E5E5E5"> be addressed at</font><font color="#CCCCCC"> some point</font>

1234
00:46:24,609 --> 00:46:28,910
<font color="#CCCCCC">there's steps you can take though</font><font color="#E5E5E5"> you</font>

1235
00:46:27,020 --> 00:46:31,780
should be upgrading to Windows<font color="#CCCCCC"> 10 you</font>

1236
00:46:28,910 --> 00:46:35,598
should<font color="#CCCCCC"> be enabling your TPMS</font><font color="#E5E5E5"> secure boot</font>

1237
00:46:31,780 --> 00:46:37,069
hypervisor code integrity implement a

1238
00:46:35,599 --> 00:46:40,460
code integrity<font color="#CCCCCC"> policy that requires</font>

1239
00:46:37,069 --> 00:46:43,700
<font color="#E5E5E5">extended</font><font color="#CCCCCC"> validation and</font><font color="#E5E5E5"> wh</font><font color="#CCCCCC"> ql signatures</font>

1240
00:46:40,460 --> 00:46:45,440
if possible go even stricter<font color="#CCCCCC"> and</font>

1241
00:46:43,700 --> 00:46:49,669
<font color="#E5E5E5">implement a whitelist of allowed</font>

1242
00:46:45,440 --> 00:46:51,319
publishers for<font color="#E5E5E5"> your organization use the</font>

1243
00:46:49,670 --> 00:46:53,030
so assigned code integrity policy

1244
00:46:51,319 --> 00:46:55,099
<font color="#E5E5E5">because if you don't sign it it can be</font>

1245
00:46:53,030 --> 00:46:56,000
just replaced by the attackers<font color="#E5E5E5"> if they</font>

1246
00:46:55,099 --> 00:47:00,230
<font color="#CCCCCC">died they might</font><font color="#E5E5E5"> have to reboot the</font>

1247
00:46:56,000 --> 00:47:02,329
system<font color="#CCCCCC"> but whatever and finally monitor</font>

1248
00:47:00,230 --> 00:47:08,770
and hunt<font color="#E5E5E5"> on driver loads throughout your</font>

1249
00:47:02,329 --> 00:47:08,770
organization<font color="#CCCCCC"> how</font><font color="#E5E5E5"> many questions</font>

1250
00:47:13,000 --> 00:47:16,719
[Applause]

1251
00:47:18,780 --> 00:47:22,760
[Music]

1252
00:47:19,220 --> 00:47:22,759
[Applause]

