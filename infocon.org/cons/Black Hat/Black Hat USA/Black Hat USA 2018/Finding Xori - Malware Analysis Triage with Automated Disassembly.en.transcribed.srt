1
00:00:00,030 --> 00:00:03,539
hello everyone<font color="#E5E5E5"> I'm here</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk to you</font>

2
00:00:01,800 --> 00:00:05,490
about finding<font color="#CCCCCC"> dory which is</font><font color="#E5E5E5"> am our</font>

3
00:00:03,540 --> 00:00:09,000
analysis triage automated assembly

4
00:00:05,490 --> 00:00:10,860
framework that we design<font color="#CCCCCC"> and to</font>

5
00:00:09,000 --> 00:00:13,920
<font color="#E5E5E5">introduce ourselves</font><font color="#CCCCCC"> my name is Amanda</font>

6
00:00:10,860 --> 00:00:16,529
<font color="#E5E5E5">Russo</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> am our researcher at endgame Inc</font>

7
00:00:13,920 --> 00:00:19,020
<font color="#CCCCCC">I look at malware all day reverse it</font>

8
00:00:16,529 --> 00:00:21,240
rate detection for it<font color="#CCCCCC"> some</font><font color="#E5E5E5"> of you</font>

9
00:00:19,020 --> 00:00:24,660
already know<font color="#CCCCCC"> me as Mao or unicorn</font><font color="#E5E5E5"> on</font>

10
00:00:21,240 --> 00:00:27,060
<font color="#E5E5E5">Twitter</font><font color="#CCCCCC"> and this is hi I'm rich</font><font color="#E5E5E5"> Seymour</font>

11
00:00:24,660 --> 00:00:29,970
<font color="#E5E5E5">I also worked at endgame I'm a data</font>

12
00:00:27,060 --> 00:00:32,250
scientist they're working on<font color="#E5E5E5"> bulk</font>

13
00:00:29,970 --> 00:00:35,879
processing of malware on our little chat

14
00:00:32,250 --> 00:00:38,850
<font color="#E5E5E5">BOTS Artemis and</font><font color="#CCCCCC"> thesauri thing which we</font>

15
00:00:35,880 --> 00:00:41,489
started in<font color="#CCCCCC"> January</font><font color="#E5E5E5"> approximately about</font>

16
00:00:38,850 --> 00:00:44,489
<font color="#E5E5E5">six months</font><font color="#CCCCCC"> ago it's thirty six thousand</font>

17
00:00:41,489 --> 00:00:47,430
lines of<font color="#E5E5E5"> code</font><font color="#CCCCCC"> and we're super</font><font color="#E5E5E5"> excited</font><font color="#CCCCCC"> to</font>

18
00:00:44,489 --> 00:00:48,629
tell<font color="#CCCCCC"> you about it</font><font color="#E5E5E5"> all right so normally</font>

19
00:00:47,430 --> 00:00:50,550
people<font color="#E5E5E5"> will show you the demo at the end</font>

20
00:00:48,629 --> 00:00:54,030
<font color="#E5E5E5">but how many people</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> know what</font>

21
00:00:50,550 --> 00:00:55,620
it does<font color="#E5E5E5"> somewhere is okay good that's</font>

22
00:00:54,030 --> 00:00:58,879
good<font color="#E5E5E5"> so we'll show you what it is first</font>

23
00:00:55,620 --> 00:01:01,320
<font color="#E5E5E5">and then</font><font color="#CCCCCC"> we'll go</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> to the details so</font>

24
00:00:58,879 --> 00:01:03,510
last minute<font color="#E5E5E5"> like what last few weeks</font>

25
00:01:01,320 --> 00:01:05,670
have made<font color="#E5E5E5"> a UI for</font><font color="#CCCCCC"> it which my intern</font>

26
00:01:03,510 --> 00:01:07,740
helped me with he's gone<font color="#CCCCCC"> so you can just</font>

27
00:01:05,670 --> 00:01:11,040
<font color="#E5E5E5">click</font><font color="#CCCCCC"> and drop</font><font color="#E5E5E5"> a file let's say</font><font color="#CCCCCC"> you want</font>

28
00:01:07,740 --> 00:01:13,830
<font color="#E5E5E5">to cry right it'll take a few seconds</font>

29
00:01:11,040 --> 00:01:17,990
<font color="#E5E5E5">and</font><font color="#CCCCCC"> it'll</font><font color="#E5E5E5"> disassemble it for you and you</font>

30
00:01:13,830 --> 00:01:17,990
can see this nice little<font color="#E5E5E5"> lovely you I</font>

31
00:01:18,500 --> 00:01:24,119
switch to linear view say you wanted<font color="#E5E5E5"> to</font>

32
00:01:21,990 --> 00:01:25,679
just<font color="#E5E5E5"> look at</font><font color="#CCCCCC"> the info it's pretty basic</font>

33
00:01:24,119 --> 00:01:28,020
<font color="#CCCCCC">that's what we could</font><font color="#E5E5E5"> do in a few weeks</font>

34
00:01:25,680 --> 00:01:30,060
<font color="#E5E5E5">but you kind of get an</font><font color="#CCCCCC"> idea of</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> what</font>

35
00:01:28,020 --> 00:01:34,048
we've<font color="#E5E5E5"> been working</font><font color="#CCCCCC"> on but it's it's</font>

36
00:01:30,060 --> 00:01:36,110
mainly for automated assembly<font color="#E5E5E5"> so back to</font>

37
00:01:34,049 --> 00:01:38,880
the<font color="#E5E5E5"> slides</font>

38
00:01:36,110 --> 00:01:40,259
<font color="#CCCCCC">all right so how it's gonna work</font>

39
00:01:38,880 --> 00:01:42,119
<font color="#CCCCCC">I'm gonna go</font><font color="#E5E5E5"> over you</font><font color="#CCCCCC"> know what's the</font>

40
00:01:40,259 --> 00:01:45,750
<font color="#E5E5E5">current state of</font><font color="#CCCCCC"> comment disassemblers</font>

41
00:01:42,119 --> 00:01:48,509
<font color="#E5E5E5">like how they handle PE files as well</font><font color="#CCCCCC"> as</font>

42
00:01:45,750 --> 00:01:50,610
<font color="#E5E5E5">the functionality</font><font color="#CCCCCC"> and features and how</font>

43
00:01:48,509 --> 00:01:52,290
we pull<font color="#E5E5E5"> together different disassemblers</font>

44
00:01:50,610 --> 00:01:54,810
and<font color="#E5E5E5"> emulators to get to where we need</font><font color="#CCCCCC"> to</font>

45
00:01:52,290 --> 00:01:59,000
be and then I showed you a<font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit of</font>

46
00:01:54,810 --> 00:02:02,280
<font color="#E5E5E5">the demo but I'll go into some specifics</font>

47
00:01:59,000 --> 00:02:04,439
<font color="#CCCCCC">all right</font><font color="#E5E5E5"> yeah so the problem is</font><font color="#CCCCCC"> a</font>

48
00:02:02,280 --> 00:02:06,329
<font color="#CCCCCC">10-game</font><font color="#E5E5E5"> and maybe it all of you at home</font>

49
00:02:04,439 --> 00:02:08,369
<font color="#CCCCCC">you have a ton of million malware</font>

50
00:02:06,329 --> 00:02:11,190
samples millions of them<font color="#E5E5E5"> but very</font><font color="#CCCCCC"> few</font>

51
00:02:08,369 --> 00:02:13,930
reverse engineers so the idea with Zuri

52
00:02:11,190 --> 00:02:16,460
was is there a way<font color="#CCCCCC"> to just bulk process</font>

53
00:02:13,930 --> 00:02:19,070
things that<font color="#CCCCCC"> may be</font><font color="#E5E5E5"> malware might be</font>

54
00:02:16,460 --> 00:02:23,450
benign<font color="#CCCCCC"> might be</font><font color="#E5E5E5"> pups or whatever very</font>

55
00:02:19,070 --> 00:02:25,070
quickly<font color="#E5E5E5"> so you can triage them</font><font color="#CCCCCC"> and so</font>

56
00:02:23,450 --> 00:02:28,730
the idea<font color="#E5E5E5"> was how can we build something</font>

57
00:02:25,070 --> 00:02:31,940
<font color="#CCCCCC">scalable and actually useful</font><font color="#E5E5E5"> and most</font>

58
00:02:28,730 --> 00:02:34,100
importantly<font color="#CCCCCC"> stable so you put together</font>

59
00:02:31,940 --> 00:02:36,170
this chart<font color="#CCCCCC"> we're kind of looking</font><font color="#E5E5E5"> for a</font>

60
00:02:34,100 --> 00:02:37,880
solution<font color="#E5E5E5"> for automated disassembly</font><font color="#CCCCCC"> and</font>

61
00:02:36,170 --> 00:02:40,970
<font color="#CCCCCC">so I kind of have these little</font><font color="#E5E5E5"> checkmark</font>

62
00:02:37,880 --> 00:02:44,660
boxes and X's as far as<font color="#CCCCCC"> evaluating you</font>

63
00:02:40,970 --> 00:02:46,220
know capstone Rodari<font color="#E5E5E5"> to Ida Pro hopper</font>

64
00:02:44,660 --> 00:02:48,410
<font color="#E5E5E5">and binary ninja which are pretty common</font>

65
00:02:46,220 --> 00:02:50,120
<font color="#E5E5E5">a lot</font><font color="#CCCCCC"> of people use them and I</font><font color="#E5E5E5"> found</font>

66
00:02:48,410 --> 00:02:52,820
that they have their strengths and

67
00:02:50,120 --> 00:02:55,790
<font color="#CCCCCC">weaknesses</font><font color="#E5E5E5"> as far as price</font><font color="#CCCCCC"> can it be</font>

68
00:02:52,820 --> 00:02:57,560
used<font color="#E5E5E5"> for automation</font><font color="#CCCCCC"> is it</font><font color="#E5E5E5"> stable like</font>

69
00:02:55,790 --> 00:02:59,120
<font color="#CCCCCC">principles for dari</font><font color="#E5E5E5"> to kind of crashes</font>

70
00:02:57,560 --> 00:03:03,020
and<font color="#CCCCCC"> safe</font><font color="#E5E5E5"> also if a lot if you're trying</font>

71
00:02:59,120 --> 00:03:04,610
to do specific things<font color="#CCCCCC"> or you know it may</font>

72
00:03:03,020 --> 00:03:07,070
<font color="#E5E5E5">have a couple of features</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> need</font>

73
00:03:04,610 --> 00:03:09,440
or you<font color="#E5E5E5"> don't need so we kind of wanted</font>

74
00:03:07,070 --> 00:03:12,799
to lay out the map and<font color="#E5E5E5"> see what we can</font>

75
00:03:09,440 --> 00:03:15,109
use it's already<font color="#CCCCCC"> available</font><font color="#E5E5E5"> but we found</font>

76
00:03:12,800 --> 00:03:18,380
out that<font color="#E5E5E5"> we needed these specific</font>

77
00:03:15,110 --> 00:03:19,820
requirements<font color="#E5E5E5"> yeah so as I said before we</font>

78
00:03:18,380 --> 00:03:21,380
needed stability<font color="#E5E5E5"> we also needed</font>

79
00:03:19,820 --> 00:03:22,880
cross-platform because we're developing

80
00:03:21,380 --> 00:03:25,430
on<font color="#E5E5E5"> Macs or running stuff on Windows or</font>

81
00:03:22,880 --> 00:03:27,620
<font color="#E5E5E5">any stuff on Linux etc etc we wanted</font>

82
00:03:25,430 --> 00:03:30,500
output<font color="#E5E5E5"> that we could actually read which</font>

83
00:03:27,620 --> 00:03:32,120
if you saw how<font color="#CCCCCC"> FAR's talked</font><font color="#E5E5E5"> I forget</font>

84
00:03:30,500 --> 00:03:33,470
where<font color="#CCCCCC"> it was</font><font color="#E5E5E5"> he</font><font color="#CCCCCC"> is talking about this</font><font color="#E5E5E5"> a</font>

85
00:03:32,120 --> 00:03:34,850
<font color="#CCCCCC">little</font><font color="#E5E5E5"> bit like outputting a control</font>

86
00:03:33,470 --> 00:03:36,560
<font color="#E5E5E5">flow graph that you could actually read</font>

87
00:03:34,850 --> 00:03:39,019
in another<font color="#E5E5E5"> tool would</font><font color="#CCCCCC"> be really cool</font><font color="#E5E5E5"> so</font>

88
00:03:36,560 --> 00:03:41,120
<font color="#CCCCCC">that was an important thing for us ease</font>

89
00:03:39,020 --> 00:03:44,390
of<font color="#E5E5E5"> use</font><font color="#CCCCCC"> depending</font><font color="#E5E5E5"> on if you think</font><font color="#CCCCCC"> this</font>

90
00:03:41,120 --> 00:03:45,860
assembly is<font color="#E5E5E5"> easy</font><font color="#CCCCCC"> and then just a core</font>

91
00:03:44,390 --> 00:03:47,000
feature set<font color="#E5E5E5"> that's on par</font><font color="#CCCCCC"> with some</font><font color="#E5E5E5"> of</font>

92
00:03:45,860 --> 00:03:51,230
the other tools<font color="#CCCCCC"> that are out</font><font color="#E5E5E5"> there and</font>

93
00:03:47,000 --> 00:03:53,060
then accuracy so you know the first<font color="#E5E5E5"> step</font>

94
00:03:51,230 --> 00:03:54,530
<font color="#E5E5E5">was diving</font><font color="#CCCCCC"> into a lot of</font><font color="#E5E5E5"> different</font><font color="#CCCCCC"> this</font>

95
00:03:53,060 --> 00:03:56,810
<font color="#CCCCCC">is</font><font color="#E5E5E5"> like open sources assemblers and</font>

96
00:03:54,530 --> 00:03:59,480
<font color="#E5E5E5">trying to figure</font><font color="#CCCCCC"> out like could I</font>

97
00:03:56,810 --> 00:04:00,800
evaluate their accuracy<font color="#CCCCCC"> could I see what</font>

98
00:03:59,480 --> 00:04:01,609
they're doing<font color="#E5E5E5"> to make sure</font><font color="#CCCCCC"> that they</font>

99
00:04:00,800 --> 00:04:04,490
were performant

100
00:04:01,610 --> 00:04:05,959
<font color="#E5E5E5">how many bugs do they have</font><font color="#CCCCCC"> what language</font>

101
00:04:04,490 --> 00:04:07,550
were they programmed in like how<font color="#E5E5E5"> can i</font>

102
00:04:05,959 --> 00:04:09,650
<font color="#E5E5E5">integrate it into my language like the</font>

103
00:04:07,550 --> 00:04:12,440
languages<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we use so we looked at a</font>

104
00:04:09,650 --> 00:04:14,450
<font color="#E5E5E5">lot so we found</font><font color="#CCCCCC"> that much of</font><font color="#E5E5E5"> capstone</font>

105
00:04:12,440 --> 00:04:15,260
was really nice it was<font color="#E5E5E5"> pretty performant</font>

106
00:04:14,450 --> 00:04:20,029
<font color="#E5E5E5">really fast</font>

107
00:04:15,260 --> 00:04:23,690
<font color="#CCCCCC">as</font><font color="#E5E5E5"> well as</font><font color="#CCCCCC"> ll it's based off of LLVM and</font>

108
00:04:20,029 --> 00:04:25,780
be headers<font color="#E5E5E5"> so you know is more common</font>

109
00:04:23,690 --> 00:04:28,490
across like Linux Linux distributions

110
00:04:25,780 --> 00:04:30,559
<font color="#CCCCCC">kemo had some really good emulation that</font>

111
00:04:28,490 --> 00:04:32,840
<font color="#E5E5E5">you know we do some</font><font color="#CCCCCC"> light emulation I'll</font>

112
00:04:30,560 --> 00:04:34,750
get to the features later<font color="#CCCCCC"> and then we</font>

113
00:04:32,840 --> 00:04:39,289
took all the things<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> liked and</font>

114
00:04:34,750 --> 00:04:41,389
developed an arrest<font color="#E5E5E5"> so so here's an</font>

115
00:04:39,290 --> 00:04:44,030
example<font color="#CCCCCC"> of evaluating some of the</font>

116
00:04:41,389 --> 00:04:48,919
assembly<font color="#E5E5E5"> so we have x86 32-bit</font>

117
00:04:44,030 --> 00:04:51,080
instruction here which normally<font color="#E5E5E5"> X hex 66</font>

118
00:04:48,919 --> 00:04:52,940
is<font color="#CCCCCC"> the OP size which tells</font><font color="#E5E5E5"> it you</font><font color="#CCCCCC"> know</font>

119
00:04:51,080 --> 00:04:55,820
do I<font color="#CCCCCC"> need to go lower</font><font color="#E5E5E5"> or smaller or</font>

120
00:04:52,940 --> 00:04:59,090
bigger<font color="#CCCCCC"> and then the</font><font color="#E5E5E5"> opcode right</font>

121
00:04:55,820 --> 00:05:01,370
so generally<font color="#CCCCCC"> ninety means not but in</font>

122
00:04:59,090 --> 00:05:06,440
<font color="#E5E5E5">this case it actually the top victim is</font>

123
00:05:01,370 --> 00:05:08,060
<font color="#CCCCCC">exchange</font><font color="#E5E5E5"> X X right</font><font color="#CCCCCC"> so i2 Pro also does</font>

124
00:05:06,440 --> 00:05:10,730
<font color="#CCCCCC">this</font><font color="#E5E5E5"> correctly but when you look at</font>

125
00:05:08,060 --> 00:05:12,979
capstone and like the storm<font color="#E5E5E5"> it's a</font>

126
00:05:10,730 --> 00:05:15,740
report<font color="#E5E5E5"> is not so sometimes you want that</font>

127
00:05:12,979 --> 00:05:18,409
<font color="#CCCCCC">information to</font><font color="#E5E5E5"> be you know correct</font>

128
00:05:15,740 --> 00:05:20,150
across all of them but<font color="#E5E5E5"> you know it's you</font>

129
00:05:18,410 --> 00:05:24,740
know mine<font color="#CCCCCC"> are changes in specific</font>

130
00:05:20,150 --> 00:05:26,989
instructions so developing and rust how

131
00:05:24,740 --> 00:05:28,460
many people here<font color="#E5E5E5"> have heard of rust the</font>

132
00:05:26,990 --> 00:05:30,820
programming language<font color="#CCCCCC"> how many people</font>

133
00:05:28,460 --> 00:05:32,770
here have<font color="#E5E5E5"> coated</font><font color="#CCCCCC"> up something in rust</font>

134
00:05:30,820 --> 00:05:38,870
<font color="#CCCCCC">okay cool</font>

135
00:05:32,770 --> 00:05:41,000
camera guy excellent<font color="#E5E5E5"> that's great</font>

136
00:05:38,870 --> 00:05:43,280
so rust<font color="#E5E5E5"> has a lot of advantages</font><font color="#CCCCCC"> it's</font>

137
00:05:41,000 --> 00:05:44,780
kind of like that new<font color="#CCCCCC"> version of</font><font color="#E5E5E5"> C++ you</font>

138
00:05:43,280 --> 00:05:46,309
can't use<font color="#E5E5E5"> at work yet because it</font><font color="#CCCCCC"> hasn't</font>

139
00:05:44,780 --> 00:05:50,270
been standardized<font color="#E5E5E5"> in Microsoft Visual</font>

140
00:05:46,310 --> 00:05:53,390
Studio<font color="#CCCCCC"> but it's even better</font><font color="#E5E5E5"> than</font><font color="#CCCCCC"> that it</font>

141
00:05:50,270 --> 00:05:54,770
<font color="#CCCCCC">has a lot of</font><font color="#E5E5E5"> safety features</font><font color="#CCCCCC"> which save</font>

142
00:05:53,390 --> 00:05:56,990
you from yourself like if you're a

143
00:05:54,770 --> 00:05:59,450
terrible programmer<font color="#E5E5E5"> like me it's nice to</font>

144
00:05:56,990 --> 00:06:02,419
have a your compiler tell you oh you

145
00:05:59,450 --> 00:06:03,650
forgot<font color="#E5E5E5"> the ampersand because you did too</font>

146
00:06:02,419 --> 00:06:07,669
many<font color="#E5E5E5"> drugs in college to remember how</font>

147
00:06:03,650 --> 00:06:09,440
pointers work and this is more things

148
00:06:07,669 --> 00:06:10,789
<font color="#E5E5E5">you've got stability</font><font color="#CCCCCC"> and speed</font><font color="#E5E5E5"> it's</font>

149
00:06:09,440 --> 00:06:12,830
really fast that's probably the<font color="#E5E5E5"> craziest</font>

150
00:06:10,789 --> 00:06:14,659
thing about<font color="#E5E5E5"> it and</font><font color="#CCCCCC"> the other</font><font color="#E5E5E5"> thing is I</font>

151
00:06:12,830 --> 00:06:17,800
didn't<font color="#CCCCCC"> really know rust other than</font><font color="#E5E5E5"> just</font>

152
00:06:14,660 --> 00:06:21,380
as a fan boy until starting on this<font color="#E5E5E5"> and</font>

153
00:06:17,800 --> 00:06:22,490
we this was developed really<font color="#E5E5E5"> quickly</font><font color="#CCCCCC"> and</font>

154
00:06:21,380 --> 00:06:25,190
I<font color="#E5E5E5"> think a lot of that's</font><font color="#CCCCCC"> because this</font>

155
00:06:22,490 --> 00:06:27,500
language<font color="#CCCCCC"> kept us from</font><font color="#E5E5E5"> falling into a lot</font>

156
00:06:25,190 --> 00:06:29,300
of<font color="#E5E5E5"> dark holes yeah</font><font color="#CCCCCC"> yeah this means</font><font color="#E5E5E5"> like</font>

157
00:06:27,500 --> 00:06:29,659
<font color="#E5E5E5">okay we need a program a project</font><font color="#CCCCCC"> and</font>

158
00:06:29,300 --> 00:06:31,559
<font color="#CCCCCC">rust</font>

159
00:06:29,659 --> 00:06:36,089
just to get<font color="#E5E5E5"> used to it</font><font color="#CCCCCC"> like</font>

160
00:06:31,559 --> 00:06:37,709
<font color="#CCCCCC">and I get this tumblr alright so current</font>

161
00:06:36,089 --> 00:06:41,399
features<font color="#E5E5E5"> yes we're open</font><font color="#CCCCCC"> sourcing this</font>

162
00:06:37,709 --> 00:06:45,809
but<font color="#E5E5E5"> it's a</font><font color="#CCCCCC"> pgl version three and support</font>

163
00:06:41,399 --> 00:06:49,099
currently supports x86<font color="#CCCCCC"> and 64-bit we do</font>

164
00:06:45,809 --> 00:06:52,679
<font color="#CCCCCC">shell</font><font color="#E5E5E5"> code if it's x86 as well as</font>

165
00:06:49,099 --> 00:06:55,019
portable executables<font color="#E5E5E5"> so what does that</font>

166
00:06:52,679 --> 00:06:56,909
mean<font color="#CCCCCC"> down here on the bottom</font><font color="#E5E5E5"> of it I</font>

167
00:06:55,019 --> 00:06:58,559
simulated the thread and environment

168
00:06:56,909 --> 00:07:00,989
block and the process environment and

169
00:06:58,559 --> 00:07:03,209
block<font color="#E5E5E5"> so if you're doing</font><font color="#CCCCCC"> shellcode</font><font color="#E5E5E5"> and</font>

170
00:07:00,989 --> 00:07:06,359
you need to dynamically<font color="#CCCCCC"> load any of your</font>

171
00:07:03,209 --> 00:07:07,979
<font color="#E5E5E5">a</font><font color="#CCCCCC"> Windows API so you can do</font><font color="#E5E5E5"> that with a</font>

172
00:07:06,359 --> 00:07:10,138
little<font color="#E5E5E5"> bit light emulation you can see</font>

173
00:07:07,979 --> 00:07:13,769
it in the output<font color="#CCCCCC"> then I'll show you what</font>

174
00:07:10,139 --> 00:07:16,979
<font color="#CCCCCC">I mean</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> that it displays strings so if</font>

175
00:07:13,769 --> 00:07:18,899
you're familiar<font color="#CCCCCC"> with the</font><font color="#E5E5E5"> flare</font><font color="#CCCCCC"> library</font>

176
00:07:16,979 --> 00:07:20,878
<font color="#E5E5E5">is where they kind of do emulation to</font>

177
00:07:18,899 --> 00:07:23,339
pull out strings from stack<font color="#E5E5E5"> it does it</font>

178
00:07:20,879 --> 00:07:26,999
automatically<font color="#E5E5E5"> in the code as it's doing</font>

179
00:07:23,339 --> 00:07:29,879
inline<font color="#CCCCCC"> it</font><font color="#E5E5E5"> manages memory so for instance</font>

180
00:07:26,999 --> 00:07:32,129
if you have the program<font color="#CCCCCC"> image versus the</font>

181
00:07:29,879 --> 00:07:34,429
stack versus<font color="#E5E5E5"> you know whatever remember</font>

182
00:07:32,129 --> 00:07:37,049
you add to it<font color="#CCCCCC"> it will handle it and read</font>

183
00:07:34,429 --> 00:07:39,119
<font color="#E5E5E5">safely so anytime there's an address</font>

184
00:07:37,049 --> 00:07:42,388
that<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> outside</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the bounds of what</font>

185
00:07:39,119 --> 00:07:45,509
<font color="#CCCCCC">the instructions are doing it won't</font><font color="#E5E5E5"> do</font>

186
00:07:42,389 --> 00:07:46,949
anything and it outputs JSON so you can

187
00:07:45,509 --> 00:07:49,649
happen in all of your services and

188
00:07:46,949 --> 00:07:52,379
automate it<font color="#CCCCCC"> I would like</font><font color="#E5E5E5"> to do message</font>

189
00:07:49,649 --> 00:07:55,019
<font color="#E5E5E5">pack but since JSON was fast</font><font color="#CCCCCC"> you know is</font>

190
00:07:52,379 --> 00:07:57,089
doable<font color="#CCCCCC"> so there's two modes</font><font color="#E5E5E5"> there's</font>

191
00:07:55,019 --> 00:07:59,099
light emulation where it will go through

192
00:07:57,089 --> 00:08:01,529
<font color="#E5E5E5">it'll use a stack to push all the</font>

193
00:07:59,099 --> 00:08:03,419
<font color="#E5E5E5">arguments</font><font color="#CCCCCC"> on the stack when you jump</font>

194
00:08:01,529 --> 00:08:05,159
<font color="#CCCCCC">into a function as well as full</font>

195
00:08:03,419 --> 00:08:08,159
emulation<font color="#E5E5E5"> but</font><font color="#CCCCCC"> you don't recommend</font>

196
00:08:05,159 --> 00:08:10,799
because I'll need to<font color="#E5E5E5"> make it faster</font><font color="#CCCCCC"> but</font>

197
00:08:08,159 --> 00:08:14,069
it works like<font color="#E5E5E5"> say you're doing</font><font color="#CCCCCC"> packing</font>

198
00:08:10,799 --> 00:08:16,558
or you're doing the<font color="#CCCCCC"> peb loading but</font>

199
00:08:14,069 --> 00:08:18,659
which<font color="#E5E5E5"> I'll explain again</font><font color="#CCCCCC"> it's pretty</font>

200
00:08:16,559 --> 00:08:21,809
<font color="#E5E5E5">slow</font><font color="#CCCCCC"> but you know if you're working</font><font color="#E5E5E5"> with</font>

201
00:08:18,659 --> 00:08:24,449
<font color="#CCCCCC">a small program</font><font color="#E5E5E5"> it'll work and finally</font>

202
00:08:21,809 --> 00:08:25,079
<font color="#E5E5E5">evaluate</font><font color="#CCCCCC"> some functions based off of</font>

203
00:08:24,449 --> 00:08:28,529
<font color="#E5E5E5">dll's</font>

204
00:08:25,079 --> 00:08:31,169
because I have this huge JSON file<font color="#E5E5E5"> that</font>

205
00:08:28,529 --> 00:08:32,639
has all<font color="#CCCCCC"> of the windows dll's and all of</font>

206
00:08:31,169 --> 00:08:33,970
their offsets and everything it will

207
00:08:32,639 --> 00:08:35,979
populate those

208
00:08:33,970 --> 00:08:39,010
right the actual addresses<font color="#E5E5E5"> and simulate</font>

209
00:08:35,979 --> 00:08:41,320
that<font color="#E5E5E5"> so that when it accesses a API call</font>

210
00:08:39,010 --> 00:08:46,060
it will actually<font color="#CCCCCC"> display it as it was</font>

211
00:08:41,320 --> 00:08:48,940
<font color="#CCCCCC">accessing</font><font color="#E5E5E5"> memory so design so we have</font>

212
00:08:46,060 --> 00:08:51,040
the<font color="#CCCCCC"> PT loader</font><font color="#E5E5E5"> which basically takes the</font>

213
00:08:48,940 --> 00:08:54,520
header<font color="#E5E5E5"> information puts it into the</font>

214
00:08:51,040 --> 00:08:56,740
memory<font color="#E5E5E5"> image as well as simulates the</font>

215
00:08:54,520 --> 00:08:58,630
<font color="#E5E5E5">tab and peb and all the</font><font color="#CCCCCC"> dll's and from</font>

216
00:08:56,740 --> 00:09:00,850
the import table and then we have the

217
00:08:58,630 --> 00:09:04,660
manager<font color="#E5E5E5"> which I just explained earlier</font>

218
00:09:00,850 --> 00:09:06,880
<font color="#CCCCCC">and then we have</font><font color="#E5E5E5"> this analysis struck</font>

219
00:09:04,660 --> 00:09:08,949
that follows all<font color="#CCCCCC"> of the disassembly</font>

220
00:09:06,880 --> 00:09:10,660
that's coming out all the<font color="#CCCCCC"> functions</font>

221
00:09:08,950 --> 00:09:14,770
built all the functions and keeps<font color="#E5E5E5"> track</font>

222
00:09:10,660 --> 00:09:16,390
of all<font color="#E5E5E5"> the imports as well as the state</font>

223
00:09:14,770 --> 00:09:20,560
which tracks all the registers from<font color="#E5E5E5"> the</font>

224
00:09:16,390 --> 00:09:24,730
CPU<font color="#E5E5E5"> and the flags</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> copies us like the</font>

225
00:09:20,560 --> 00:09:26,920
new state<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the stack for when it goes</font>

226
00:09:24,730 --> 00:09:28,720
<font color="#CCCCCC">to another function</font><font color="#E5E5E5"> as well as I</font>

227
00:09:26,920 --> 00:09:30,699
<font color="#E5E5E5">introduced</font><font color="#CCCCCC"> loop</font><font color="#E5E5E5"> tracking and I'll get</font>

228
00:09:28,720 --> 00:09:33,550
into<font color="#E5E5E5"> a</font><font color="#CCCCCC"> little bit later it's basically</font>

229
00:09:30,700 --> 00:09:37,630
<font color="#E5E5E5">basically for the emulation part</font><font color="#CCCCCC"> all</font>

230
00:09:33,550 --> 00:09:40,510
<font color="#CCCCCC">right ah yeah</font><font color="#E5E5E5"> my my thing um the we</font>

231
00:09:37,630 --> 00:09:42,910
decided<font color="#CCCCCC"> to roll our own PD parser mainly</font>

232
00:09:40,510 --> 00:09:44,830
because<font color="#E5E5E5"> I'd stared at that like</font><font color="#CCCCCC"> core</font>

233
00:09:42,910 --> 00:09:48,280
<font color="#CCCCCC">commie poster so much that I</font><font color="#E5E5E5"> was like</font>

234
00:09:44,830 --> 00:09:51,540
tried<font color="#CCCCCC"> to</font><font color="#E5E5E5"> make it real</font><font color="#CCCCCC"> if you don't know</font>

235
00:09:48,280 --> 00:09:54,550
the PE header it's like a history of<font color="#CCCCCC"> das</font>

236
00:09:51,540 --> 00:09:57,969
ms-dos from<font color="#E5E5E5"> 8-bit two 16-bit to 32-bit</font>

237
00:09:54,550 --> 00:10:01,390
to 64-bit<font color="#CCCCCC"> in a little pack of bytes and</font>

238
00:09:57,970 --> 00:10:03,220
<font color="#CCCCCC">so we made this parser that</font><font color="#E5E5E5"> will read</font>

239
00:10:01,390 --> 00:10:05,290
through<font color="#E5E5E5"> the header and yank out</font>

240
00:10:03,220 --> 00:10:06,550
everything out<font color="#CCCCCC"> of it so I tried to get</font>

241
00:10:05,290 --> 00:10:07,900
<font color="#E5E5E5">as much obscure stuff in there as</font>

242
00:10:06,550 --> 00:10:10,349
<font color="#CCCCCC">possible</font><font color="#E5E5E5"> not just</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> stuff you need</font><font color="#CCCCCC"> to</font>

243
00:10:07,900 --> 00:10:12,579
load the<font color="#E5E5E5"> binary but also things like</font>

244
00:10:10,350 --> 00:10:14,530
<font color="#E5E5E5">what we're looking at here the dot stub</font>

245
00:10:12,580 --> 00:10:16,839
<font color="#E5E5E5">like the message it prints out because</font>

246
00:10:14,530 --> 00:10:18,520
sometimes malware analysis like to see

247
00:10:16,839 --> 00:10:21,089
like<font color="#E5E5E5"> well is that corrupted or was it</font>

248
00:10:18,520 --> 00:10:24,430
modified or is that a<font color="#E5E5E5"> different compiler</font>

249
00:10:21,089 --> 00:10:28,290
<font color="#E5E5E5">so yeah so</font><font color="#CCCCCC"> it'll</font><font color="#E5E5E5"> read P 32 PE 32 plus</font>

250
00:10:24,430 --> 00:10:31,959
and it's pretty stable<font color="#CCCCCC"> pretty good</font>

251
00:10:28,290 --> 00:10:34,240
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> so from the output from the P</font>

252
00:10:31,960 --> 00:10:37,210
loader I'm able<font color="#CCCCCC"> to rebuild the image</font>

253
00:10:34,240 --> 00:10:39,490
<font color="#E5E5E5">into memory</font><font color="#CCCCCC"> I put the stack at like a</font>

254
00:10:37,210 --> 00:10:41,350
static spot<font color="#E5E5E5"> we're in the config file you</font>

255
00:10:39,490 --> 00:10:43,270
can change that if<font color="#E5E5E5"> you wanted to as well</font>

256
00:10:41,350 --> 00:10:45,089
<font color="#CCCCCC">as all the dll's like where the DLL</font>

257
00:10:43,270 --> 00:10:46,600
address starts you can configure<font color="#CCCCCC"> that</font>

258
00:10:45,089 --> 00:10:48,880
<font color="#E5E5E5">and the tab</font>

259
00:10:46,600 --> 00:10:50,440
have addresses so if you like one<font color="#E5E5E5"> it for</font>

260
00:10:48,880 --> 00:10:51,880
a<font color="#E5E5E5"> specific environment</font><font color="#CCCCCC"> and you</font><font color="#E5E5E5"> want to</font>

261
00:10:50,440 --> 00:10:54,550
have those offsets correct you can do

262
00:10:51,880 --> 00:10:56,290
that which<font color="#E5E5E5"> is nice</font><font color="#CCCCCC"> and the memory</font>

263
00:10:54,550 --> 00:10:58,620
manager handles<font color="#CCCCCC"> all of</font><font color="#E5E5E5"> where all of</font>

264
00:10:56,290 --> 00:11:01,360
those are and how you<font color="#CCCCCC"> access them</font><font color="#E5E5E5"> all</font>

265
00:10:58,620 --> 00:11:04,090
<font color="#CCCCCC">right</font><font color="#E5E5E5"> and so I explained before symbols</font>

266
00:11:01,360 --> 00:11:06,040
so<font color="#CCCCCC"> we have we you can make your own</font>

267
00:11:04,090 --> 00:11:08,230
<font color="#E5E5E5">symbols so if you have a bunch of</font><font color="#CCCCCC"> DLLs</font>

268
00:11:06,040 --> 00:11:11,439
who are like XP or Windows 7<font color="#E5E5E5"> or Windows</font>

269
00:11:08,230 --> 00:11:13,720
10 you can<font color="#E5E5E5"> populate those into a nice</font>

270
00:11:11,440 --> 00:11:15,610
JSON<font color="#E5E5E5"> it will load them up recreate the</font>

271
00:11:13,720 --> 00:11:18,370
import tables<font color="#CCCCCC"> and the pet and tab and</font>

272
00:11:15,610 --> 00:11:20,440
you can<font color="#E5E5E5"> have</font><font color="#CCCCCC"> it accessible</font><font color="#E5E5E5"> when it's</font>

273
00:11:18,370 --> 00:11:23,380
doing<font color="#E5E5E5"> the disassembly</font><font color="#CCCCCC"> so you can</font>

274
00:11:20,440 --> 00:11:27,880
customize<font color="#E5E5E5"> it for your analysis</font>

275
00:11:23,380 --> 00:11:29,620
<font color="#CCCCCC">environment pretty much all right so</font>

276
00:11:27,880 --> 00:11:31,570
like<font color="#E5E5E5"> I explained if you're doing shell</font>

277
00:11:29,620 --> 00:11:35,260
<font color="#E5E5E5">code you're dynamically loading the API</font>

278
00:11:31,570 --> 00:11:36,700
calls that<font color="#CCCCCC"> you need so from</font><font color="#E5E5E5"> that its</font>

279
00:11:35,260 --> 00:11:38,860
<font color="#E5E5E5">Emelia the tab and pet and you know what</font>

280
00:11:36,700 --> 00:11:40,750
I keep<font color="#CCCCCC"> saying that and</font><font color="#E5E5E5"> handle memory</font>

281
00:11:38,860 --> 00:11:43,000
management where<font color="#E5E5E5"> I segregate everything</font>

282
00:11:40,750 --> 00:11:44,700
so that you know it won't access<font color="#E5E5E5"> things</font>

283
00:11:43,000 --> 00:11:47,380
that it<font color="#E5E5E5"> doesn't need to access and</font>

284
00:11:44,700 --> 00:11:49,630
because functions can be<font color="#E5E5E5"> pushed on the</font>

285
00:11:47,380 --> 00:11:52,210
stack<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can actually see that as it's</font>

286
00:11:49,630 --> 00:11:54,910
happening<font color="#CCCCCC"> and so what I</font><font color="#E5E5E5"> mean</font><font color="#CCCCCC"> by that</font><font color="#E5E5E5"> so</font>

287
00:11:52,210 --> 00:11:59,170
this<font color="#E5E5E5"> is a shellcode routine for loading</font>

288
00:11:54,910 --> 00:12:02,110
load<font color="#CCCCCC"> library a to be called by the shell</font>

289
00:11:59,170 --> 00:12:05,410
<font color="#CCCCCC">code</font><font color="#E5E5E5"> but in the actual header imports</font>

290
00:12:02,110 --> 00:12:07,300
that<font color="#CCCCCC"> this shell</font><font color="#E5E5E5"> code uses is exit</font>

291
00:12:05,410 --> 00:12:10,089
process<font color="#E5E5E5"> get less error get</font><font color="#CCCCCC"> local time</font>

292
00:12:07,300 --> 00:12:13,359
and get module handle a but you don't

293
00:12:10,090 --> 00:12:15,010
see load library<font color="#CCCCCC"> a or shell execute a or</font>

294
00:12:13,360 --> 00:12:18,490
protect<font color="#CCCCCC"> write because</font><font color="#E5E5E5"> it's going to</font>

295
00:12:15,010 --> 00:12:20,380
dynamically load<font color="#E5E5E5"> it from the pet so you</font>

296
00:12:18,490 --> 00:12:24,220
can see this is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> Zora outfit by the</font>

297
00:12:20,380 --> 00:12:26,230
way<font color="#CCCCCC"> the string will show up like lobe</font>

298
00:12:24,220 --> 00:12:27,610
<font color="#E5E5E5">library a and that function that</font><font color="#CCCCCC"> it's</font>

299
00:12:26,230 --> 00:12:29,710
calling right underneath there is

300
00:12:27,610 --> 00:12:32,410
actually getting<font color="#E5E5E5"> that address from the</font>

301
00:12:29,710 --> 00:12:35,170
stack by comparing the name to the name

302
00:12:32,410 --> 00:12:37,209
<font color="#E5E5E5">that's in the pet</font><font color="#CCCCCC"> alright and it once</font>

303
00:12:35,170 --> 00:12:40,599
it's done it moves that address<font color="#CCCCCC"> into</font>

304
00:12:37,210 --> 00:12:43,660
that pointer<font color="#E5E5E5"> for 0 1 1 or 1 0 those are</font>

305
00:12:40,600 --> 00:12:45,460
<font color="#CCCCCC">before and down here is actually where</font>

306
00:12:43,660 --> 00:12:47,500
it calls load<font color="#CCCCCC"> library a and you can</font>

307
00:12:45,460 --> 00:12:48,130
<font color="#CCCCCC">actually see that in the emulation part</font>

308
00:12:47,500 --> 00:12:53,290
of sorry

309
00:12:48,130 --> 00:12:56,050
so it'll nicely populate for<font color="#E5E5E5"> you</font><font color="#CCCCCC"> alright</font>

310
00:12:53,290 --> 00:12:59,980
<font color="#CCCCCC">umm the thread</font><font color="#E5E5E5"> and process of fire my</font>

311
00:12:56,050 --> 00:13:00,490
<font color="#CCCCCC">block so I just looked at Wikipedia to</font>

312
00:12:59,980 --> 00:13:02,470
get the

313
00:13:00,490 --> 00:13:03,820
because they're<font color="#E5E5E5"> like all out there</font><font color="#CCCCCC"> ready</font>

314
00:13:02,470 --> 00:13:06,610
<font color="#E5E5E5">you really don't need the whole like</font>

315
00:13:03,820 --> 00:13:08,500
<font color="#CCCCCC">strux from</font><font color="#E5E5E5"> windows in order</font><font color="#CCCCCC"> to get all</font>

316
00:13:06,610 --> 00:13:09,970
the<font color="#CCCCCC"> special stuff underneath I left it</font>

317
00:13:08,500 --> 00:13:11,589
in<font color="#E5E5E5"> there in</font><font color="#CCCCCC"> case</font><font color="#E5E5E5"> you wanted to use it</font>

318
00:13:09,970 --> 00:13:15,130
but I don't recommend<font color="#E5E5E5"> it because it</font>

319
00:13:11,589 --> 00:13:16,630
<font color="#E5E5E5">takes a while to load</font><font color="#CCCCCC"> so basically the</font>

320
00:13:15,130 --> 00:13:20,050
nice thing about rust as you can see

321
00:13:16,630 --> 00:13:22,000
<font color="#CCCCCC">relies strikes</font><font color="#E5E5E5"> in two</font><font color="#CCCCCC"> bites so I was</font>

322
00:13:20,050 --> 00:13:24,310
<font color="#CCCCCC">able to</font><font color="#E5E5E5"> recreate the link list of the</font>

323
00:13:22,000 --> 00:13:27,070
peb and tab and the peb loader data

324
00:13:24,310 --> 00:13:29,800
<font color="#CCCCCC">compiled it</font><font color="#E5E5E5"> all into a nice serialize</font>

325
00:13:27,070 --> 00:13:31,870
<font color="#E5E5E5">bytes and</font><font color="#CCCCCC"> so the memory manager will</font>

326
00:13:29,800 --> 00:13:35,920
handle when the assembly<font color="#E5E5E5"> instruction</font>

327
00:13:31,870 --> 00:13:37,930
accesses<font color="#E5E5E5"> address to the whatever part</font>

328
00:13:35,920 --> 00:13:42,209
like if it's doing the normal<font color="#E5E5E5"> shell code</font>

329
00:13:37,930 --> 00:13:45,880
routine FS 30 you<font color="#E5E5E5"> know go through there</font>

330
00:13:42,209 --> 00:13:49,359
<font color="#CCCCCC">alright another thing that we wanted to</font>

331
00:13:45,880 --> 00:13:51,370
<font color="#E5E5E5">pay attention to was identifying what's</font>

332
00:13:49,360 --> 00:13:53,440
code versus data and so who have a lot

333
00:13:51,370 --> 00:13:56,230
of<font color="#E5E5E5"> research papers out</font><font color="#CCCCCC"> there that talk</font>

334
00:13:53,440 --> 00:13:59,680
<font color="#CCCCCC">about when to identify padding after</font><font color="#E5E5E5"> a</font>

335
00:13:56,230 --> 00:14:01,450
function<font color="#E5E5E5"> junk code after a return and so</font>

336
00:13:59,680 --> 00:14:02,770
we we<font color="#CCCCCC"> try to do as</font><font color="#E5E5E5"> much as we can by</font>

337
00:14:01,450 --> 00:14:05,459
checking off all the boxes<font color="#E5E5E5"> of</font>

338
00:14:02,770 --> 00:14:08,439
identifying those things and trying<font color="#E5E5E5"> to</font>

339
00:14:05,459 --> 00:14:10,959
show that<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> output</font><font color="#E5E5E5"> so here's an</font>

340
00:14:08,440 --> 00:14:13,540
<font color="#CCCCCC">example of padding after a non returning</font>

341
00:14:10,959 --> 00:14:17,500
call you can see that this is actually

342
00:14:13,540 --> 00:14:20,560
<font color="#CCCCCC">BB five so right after the call to thir</font>

343
00:14:17,500 --> 00:14:23,050
main I think<font color="#E5E5E5"> this</font><font color="#CCCCCC"> lysate</font><font color="#E5E5E5"> is the struct</font>

344
00:14:20,560 --> 00:14:26,500
on how it loads all the functions<font color="#E5E5E5"> to be</font>

345
00:14:23,050 --> 00:14:28,870
called<font color="#CCCCCC"> and you can see if it's non</font>

346
00:14:26,500 --> 00:14:30,010
returning<font color="#E5E5E5"> call we won't show you know we</font>

347
00:14:28,870 --> 00:14:34,150
<font color="#E5E5E5">won't try to disassemble it</font><font color="#CCCCCC"> we'll just</font>

348
00:14:30,010 --> 00:14:36,370
<font color="#CCCCCC">show it</font><font color="#E5E5E5"> if data and you it'll try to any</font>

349
00:14:34,150 --> 00:14:37,930
<font color="#E5E5E5">function</font><font color="#CCCCCC"> that it links to it will go and</font>

350
00:14:36,370 --> 00:14:40,930
try<font color="#CCCCCC"> to disassemble that</font><font color="#E5E5E5"> function if it's</font>

351
00:14:37,930 --> 00:14:43,060
in that<font color="#E5E5E5"> list same with padding after</font>

352
00:14:40,930 --> 00:14:45,550
returns<font color="#E5E5E5"> so if you're using</font><font color="#CCCCCC"> black</font><font color="#E5E5E5"> Visual</font>

353
00:14:43,060 --> 00:14:47,890
<font color="#E5E5E5">Studio or</font><font color="#CCCCCC"> some other common compiler it</font>

354
00:14:45,550 --> 00:14:49,390
will add a specific<font color="#CCCCCC"> type of</font><font color="#E5E5E5"> padding</font><font color="#CCCCCC"> and</font>

355
00:14:47,890 --> 00:14:52,089
<font color="#E5E5E5">you can you</font><font color="#CCCCCC"> can configure</font><font color="#E5E5E5"> that but</font>

356
00:14:49,390 --> 00:14:55,270
normally<font color="#CCCCCC"> it's like CC so we try to</font>

357
00:14:52,089 --> 00:14:58,300
<font color="#E5E5E5">identify that as best as we</font><font color="#CCCCCC"> can alright</font>

358
00:14:55,270 --> 00:15:01,720
so how do we another<font color="#E5E5E5"> the way to identify</font>

359
00:14:58,300 --> 00:15:05,079
<font color="#E5E5E5">junk code versus data is that I do this</font>

360
00:15:01,720 --> 00:15:07,660
thing called a<font color="#E5E5E5"> queue where if you have a</font>

361
00:15:05,079 --> 00:15:12,010
branch statement<font color="#E5E5E5"> if or else it will</font>

362
00:15:07,660 --> 00:15:14,079
follow<font color="#E5E5E5"> the jump first and then the non</font>

363
00:15:12,010 --> 00:15:15,700
jump second so push all

364
00:15:14,080 --> 00:15:18,880
jumps to the top<font color="#CCCCCC"> of the queue to be</font>

365
00:15:15,700 --> 00:15:20,950
analyzed first and then the<font color="#CCCCCC"> left</font><font color="#E5E5E5"> the</font>

366
00:15:18,880 --> 00:15:23,410
left<font color="#E5E5E5"> branch will go to the back</font><font color="#CCCCCC"> of the</font>

367
00:15:20,950 --> 00:15:25,380
<font color="#CCCCCC">queue and this is pretty fast</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> it</font>

368
00:15:23,410 --> 00:15:28,719
will enumerate you know<font color="#E5E5E5"> the actual</font>

369
00:15:25,380 --> 00:15:32,740
control flow as it goes through<font color="#E5E5E5"> very</font>

370
00:15:28,720 --> 00:15:35,110
nicely<font color="#E5E5E5"> and it should and properly with</font>

371
00:15:32,740 --> 00:15:40,720
all the<font color="#E5E5E5"> instructions enumerated only for</font>

372
00:15:35,110 --> 00:15:42,880
the text section<font color="#E5E5E5"> so far okay</font><font color="#CCCCCC"> so I talked</font>

373
00:15:40,720 --> 00:15:45,040
about<font color="#E5E5E5"> the loop tracking earlier and what</font>

374
00:15:42,880 --> 00:15:48,340
that is is<font color="#CCCCCC"> for the light emulation I</font>

375
00:15:45,040 --> 00:15:50,290
found out that<font color="#E5E5E5"> sometimes if you can</font><font color="#CCCCCC"> it's</font>

376
00:15:48,340 --> 00:15:52,060
possible<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get into an infinite loop so</font>

377
00:15:50,290 --> 00:15:54,400
I wanted to configure something<font color="#E5E5E5"> that I</font>

378
00:15:52,060 --> 00:15:56,439
would<font color="#E5E5E5"> camp like just kill after like</font>

379
00:15:54,400 --> 00:15:59,050
<font color="#E5E5E5">4,000 loops or something so I have that</font>

380
00:15:56,440 --> 00:16:01,030
configuration<font color="#E5E5E5"> in there because you know</font>

381
00:15:59,050 --> 00:16:02,770
say you<font color="#CCCCCC"> just wanted to do quick triage</font>

382
00:16:01,030 --> 00:16:06,870
really quick you didn't really need<font color="#CCCCCC"> to</font>

383
00:16:02,770 --> 00:16:10,150
go those loop cases well<font color="#CCCCCC"> short circuit</font>

384
00:16:06,870 --> 00:16:12,730
some of the loops in<font color="#E5E5E5"> there</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> need some</font>

385
00:16:10,150 --> 00:16:15,370
research<font color="#E5E5E5"> but yeah I did best as I can</font><font color="#CCCCCC"> I</font>

386
00:16:12,730 --> 00:16:18,130
would<font color="#CCCCCC"> probably</font><font color="#E5E5E5"> put more like bite it</font>

387
00:16:15,370 --> 00:16:21,190
<font color="#E5E5E5">like the real looper yeah the real</font><font color="#CCCCCC"> uber</font>

388
00:16:18,130 --> 00:16:25,450
uh<font color="#E5E5E5"> algorithm in there to see if you know</font>

389
00:16:21,190 --> 00:16:26,430
that would work<font color="#CCCCCC"> better ah yes my last</font>

390
00:16:25,450 --> 00:16:28,960
week of<font color="#E5E5E5"> my life</font>

391
00:16:26,430 --> 00:16:31,180
<font color="#E5E5E5">so</font><font color="#CCCCCC"> four signatures</font><font color="#E5E5E5"> there are a few</font>

392
00:16:28,960 --> 00:16:33,070
<font color="#E5E5E5">signatures</font><font color="#CCCCCC"> built-in</font><font color="#E5E5E5"> for standard</font>

393
00:16:31,180 --> 00:16:35,439
function headers there and one nice

394
00:16:33,070 --> 00:16:36,700
thing<font color="#CCCCCC"> that rust gives you recently is</font>

395
00:16:35,440 --> 00:16:40,330
<font color="#CCCCCC">called byte regex</font>

396
00:16:36,700 --> 00:16:41,740
which is follows people<font color="#CCCCCC"> who</font><font color="#E5E5E5"> use reg X's</font>

397
00:16:40,330 --> 00:16:46,870
now you can use them on bytes<font color="#E5E5E5"> and it</font>

398
00:16:41,740 --> 00:16:49,180
pretty much translates<font color="#CCCCCC"> I spent quite</font><font color="#E5E5E5"> a</font>

399
00:16:46,870 --> 00:16:53,110
long time importing what are known as

400
00:16:49,180 --> 00:16:55,810
flirt patterns<font color="#E5E5E5"> flare patterns that were</font>

401
00:16:53,110 --> 00:16:58,200
open out there in the world<font color="#E5E5E5"> the problem</font>

402
00:16:55,810 --> 00:17:00,760
is all<font color="#CCCCCC"> of those depend on</font><font color="#E5E5E5"> Ida Pro</font>

403
00:16:58,200 --> 00:17:02,470
internal patterns<font color="#E5E5E5"> so it's like building</font>

404
00:17:00,760 --> 00:17:08,760
<font color="#E5E5E5">a tree but the entire trunk of the tree</font>

405
00:17:02,470 --> 00:17:11,020
<font color="#E5E5E5">is in a</font><font color="#CCCCCC"> $3,000 disassembler so so this</font>

406
00:17:08,760 --> 00:17:12,010
partially partially works but it's

407
00:17:11,020 --> 00:17:14,589
<font color="#CCCCCC">definitely the thing that we</font><font color="#E5E5E5"> are looking</font>

408
00:17:12,010 --> 00:17:17,379
<font color="#CCCCCC">for the most help with if you are a</font>

409
00:17:14,589 --> 00:17:20,169
master<font color="#CCCCCC"> of</font><font color="#E5E5E5"> pattern files or signature</font>

410
00:17:17,380 --> 00:17:23,620
files<font color="#CCCCCC"> get in touch with</font><font color="#E5E5E5"> me but this</font>

411
00:17:20,170 --> 00:17:27,190
<font color="#E5E5E5">allows you to add a lot more name info</font>

412
00:17:23,619 --> 00:17:27,959
to the<font color="#E5E5E5"> things that</font><font color="#CCCCCC"> are compiled into</font>

413
00:17:27,190 --> 00:17:30,610
your program

414
00:17:27,960 --> 00:17:33,100
yeah yeah if you wanted to enumerate all

415
00:17:30,610 --> 00:17:35,409
the<font color="#E5E5E5"> CRT libraries from like the visual</font>

416
00:17:33,100 --> 00:17:38,530
<font color="#E5E5E5">studio you can do that</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> are some</font>

417
00:17:35,410 --> 00:17:40,120
open source<font color="#E5E5E5"> flirt signatures but you</font>

418
00:17:38,530 --> 00:17:43,030
know there's a different versions<font color="#E5E5E5"> for a</font>

419
00:17:40,120 --> 00:17:45,549
version of Ida Pro so unfortunately you

420
00:17:43,030 --> 00:17:49,418
know<font color="#CCCCCC"> the older ones we could do</font><font color="#E5E5E5"> yeah the</font>

421
00:17:45,549 --> 00:17:52,600
real<font color="#CCCCCC"> ovens we can</font><font color="#E5E5E5"> do all right ah this</font>

422
00:17:49,419 --> 00:17:55,299
I'm here for the speed this was<font color="#E5E5E5"> crazy</font>

423
00:17:52,600 --> 00:17:56,409
because mostly this<font color="#CCCCCC"> is Amanda</font><font color="#E5E5E5"> just doing</font>

424
00:17:55,299 --> 00:17:58,360
whatever she does to write a

425
00:17:56,410 --> 00:17:59,799
disassembler in six months<font color="#E5E5E5"> and me then</font>

426
00:17:58,360 --> 00:18:03,610
occasionally running it to see how well

427
00:17:59,799 --> 00:18:07,330
<font color="#E5E5E5">it ran and it runs really really fast</font>

428
00:18:03,610 --> 00:18:10,780
especially<font color="#E5E5E5"> on an SSD</font><font color="#CCCCCC"> you can do</font><font color="#E5E5E5"> these</font>

429
00:18:07,330 --> 00:18:13,059
were a thousand samples<font color="#E5E5E5"> from ember which</font>

430
00:18:10,780 --> 00:18:14,860
is a test set that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> release the hashes</font>

431
00:18:13,059 --> 00:18:16,149
of<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> know how to</font><font color="#E5E5E5"> get the hash</font>

432
00:18:14,860 --> 00:18:19,090
<font color="#CCCCCC">I'll get the</font><font color="#E5E5E5"> binary from the hashes you</font>

433
00:18:16,150 --> 00:18:20,320
can download it yourself<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font>

434
00:18:19,090 --> 00:18:23,110
specifically<font color="#E5E5E5"> the one that's in</font><font color="#CCCCCC"> the AI</font>

435
00:18:20,320 --> 00:18:26,799
<font color="#E5E5E5">village and</font><font color="#CCCCCC"> DEF CON</font><font color="#E5E5E5"> it's just a subset</font>

436
00:18:23,110 --> 00:18:28,590
the test set<font color="#E5E5E5"> and it just guns through</font>

437
00:18:26,799 --> 00:18:32,260
these<font color="#E5E5E5"> things on an old machine</font>

438
00:18:28,590 --> 00:18:33,280
outputting<font color="#CCCCCC"> 5.3 gigabytes of</font><font color="#E5E5E5"> JSON which</font>

439
00:18:32,260 --> 00:18:36,039
then you<font color="#E5E5E5"> can do whatever the heck you</font>

440
00:18:33,280 --> 00:18:38,770
want<font color="#E5E5E5"> like if you want to look for all</font>

441
00:18:36,039 --> 00:18:39,850
<font color="#E5E5E5">things with crypt you know all functions</font>

442
00:18:38,770 --> 00:18:43,020
that were called with crypt in the name

443
00:18:39,850 --> 00:18:45,490
<font color="#E5E5E5">just run JQ over all those files</font>

444
00:18:43,020 --> 00:18:47,139
<font color="#CCCCCC">da-da-da-dah</font><font color="#E5E5E5"> grab it or you can take</font>

445
00:18:45,490 --> 00:18:50,590
<font color="#E5E5E5">that JSON throwing the</font><font color="#CCCCCC"> Postgres</font>

446
00:18:47,140 --> 00:18:55,809
<font color="#E5E5E5">elasticsearch Mongo whatever's on the</font>

447
00:18:50,590 --> 00:18:57,879
horizon put on the blockchain<font color="#E5E5E5"> and and</font>

448
00:18:55,809 --> 00:19:01,720
that's it it's<font color="#CCCCCC"> great it's</font><font color="#E5E5E5"> freaking super</font>

449
00:18:57,880 --> 00:19:04,390
fast super stable<font color="#CCCCCC"> Hey so simple is</font><font color="#E5E5E5"> way</font>

450
00:19:01,720 --> 00:19:06,070
<font color="#CCCCCC">if you are not</font><font color="#E5E5E5"> coming with the rest they</font>

451
00:19:04,390 --> 00:19:07,900
have this once you install<font color="#CCCCCC"> it they have</font>

452
00:19:06,070 --> 00:19:10,000
this<font color="#E5E5E5"> thing called cargo just cargo build</font>

453
00:19:07,900 --> 00:19:11,679
release and then as<font color="#E5E5E5"> soon as it's done</font>

454
00:19:10,000 --> 00:19:16,570
<font color="#CCCCCC">you can do target release story</font>

455
00:19:11,679 --> 00:19:18,010
-<font color="#CCCCCC"> F whatever</font><font color="#E5E5E5"> file</font><font color="#CCCCCC"> you want like</font><font color="#E5E5E5"> right if</font>

456
00:19:16,570 --> 00:19:19,389
you want to do a basic disassembler you

457
00:19:18,010 --> 00:19:21,158
can need it you don't<font color="#CCCCCC"> want actually use</font>

458
00:19:19,390 --> 00:19:23,049
the analysis part<font color="#CCCCCC"> of it did this numbers</font>

459
00:19:21,159 --> 00:19:26,309
in there you could<font color="#CCCCCC"> just use it directly</font>

460
00:19:23,049 --> 00:19:28,990
<font color="#E5E5E5">on a binary list there and it'll output</font>

461
00:19:26,309 --> 00:19:34,510
<font color="#E5E5E5">without the nice</font><font color="#CCCCCC"> colorful you know</font>

462
00:19:28,990 --> 00:19:35,950
display<font color="#E5E5E5"> if you want to do</font><font color="#CCCCCC"> the file</font>

463
00:19:34,510 --> 00:19:37,809
<font color="#CCCCCC">disassembler you can also access the</font>

464
00:19:35,950 --> 00:19:39,490
analysis portion of it as you<font color="#E5E5E5"> can see</font>

465
00:19:37,809 --> 00:19:40,629
this is a simple<font color="#E5E5E5"> hello world program in</font>

466
00:19:39,490 --> 00:19:42,280
<font color="#CCCCCC">shellcode</font>

467
00:19:40,630 --> 00:19:47,500
and you can see the hello world being

468
00:19:42,280 --> 00:19:50,920
popped off of<font color="#CCCCCC"> SBC</font><font color="#E5E5E5"> X right there</font><font color="#CCCCCC"> alright</font>

469
00:19:47,500 --> 00:19:52,930
<font color="#CCCCCC">so comparing one a cry with</font><font color="#E5E5E5"> zouri and</font>

470
00:19:50,920 --> 00:19:55,180
<font color="#CCCCCC">ida pro</font><font color="#E5E5E5"> you can see that a crow has a</font>

471
00:19:52,930 --> 00:19:56,980
lot of like cool numeration<font color="#CCCCCC"> z' for like</font>

472
00:19:55,180 --> 00:19:59,860
function arguments<font color="#E5E5E5"> but that's due to</font>

473
00:19:56,980 --> 00:20:00,130
like flirt signatures<font color="#CCCCCC"> so we're not</font><font color="#E5E5E5"> there</font>

474
00:19:59,860 --> 00:20:02,500
<font color="#CCCCCC">yet</font>

475
00:20:00,130 --> 00:20:06,490
<font color="#CCCCCC">but</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> know for six months it's not</font>

476
00:20:02,500 --> 00:20:08,920
<font color="#CCCCCC">that same way through dari Rodari has</font>

477
00:20:06,490 --> 00:20:10,810
some like<font color="#E5E5E5"> similar kind of signature</font>

478
00:20:08,920 --> 00:20:12,730
analysis as well for identifying the

479
00:20:10,810 --> 00:20:15,970
libraries but<font color="#CCCCCC"> i think the difference is</font>

480
00:20:12,730 --> 00:20:19,150
between<font color="#CCCCCC"> dory</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> radar e is that i don't</font>

481
00:20:15,970 --> 00:20:22,330
<font color="#E5E5E5">know if Rodari actually populates actual</font>

482
00:20:19,150 --> 00:20:25,840
memory addresses of the imports so it

483
00:20:22,330 --> 00:20:27,669
might<font color="#CCCCCC"> not show up oh and like i had a</font>

484
00:20:25,840 --> 00:20:32,679
gift ready but<font color="#CCCCCC"> i showed it</font><font color="#E5E5E5"> to you in the</font>

485
00:20:27,670 --> 00:20:36,910
<font color="#CCCCCC">beginning these two my intern for</font>

486
00:20:32,680 --> 00:20:39,580
helping me with the UI<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> and</font>

487
00:20:36,910 --> 00:20:40,990
that's pretty much<font color="#E5E5E5"> it</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> live now</font><font color="#CCCCCC"> so</font>

488
00:20:39,580 --> 00:20:44,590
you can go download it<font color="#E5E5E5"> and play</font><font color="#CCCCCC"> with it</font>

489
00:20:40,990 --> 00:20:48,280
<font color="#E5E5E5">off of our github but with end game inc</font>

490
00:20:44,590 --> 00:20:49,840
<font color="#E5E5E5">zouri and if you have any questions you</font>

491
00:20:48,280 --> 00:20:52,450
<font color="#CCCCCC">can like thing us on twitter or</font>

492
00:20:49,840 --> 00:20:54,899
<font color="#CCCCCC">something or email us directly</font><font color="#E5E5E5"> we'll</font>

493
00:20:52,450 --> 00:20:54,900
give you our<font color="#CCCCCC"> e-mail</font>

494
00:20:57,660 --> 00:21:06,430
[Applause]

