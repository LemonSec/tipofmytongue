1
00:00:00,000 --> 00:00:03,570
<font color="#CCCCCC">Thanks so</font><font color="#E5E5E5"> let's talk about DC</font>

2
00:00:01,709 --> 00:00:08,150
realization vulnerabilities so real

3
00:00:03,570 --> 00:00:11,250
quick<font color="#E5E5E5"> we will attempt to advance slides</font>

4
00:00:08,150 --> 00:00:12,630
<font color="#E5E5E5">that's it</font><font color="#CCCCCC"> not coming</font><font color="#E5E5E5"> through</font><font color="#CCCCCC"> it's</font>

5
00:00:11,250 --> 00:00:17,460
advancing<font color="#E5E5E5"> on my screen and</font><font color="#CCCCCC"> it's not</font>

6
00:00:12,630 --> 00:00:20,070
<font color="#E5E5E5">advancing up there all right good enough</font>

7
00:00:17,460 --> 00:00:21,720
<font color="#E5E5E5">all right so few words about Who I am</font><font color="#CCCCCC"> so</font>

8
00:00:20,070 --> 00:00:23,279
I'm a senior software<font color="#CCCCCC"> security engineer</font>

9
00:00:21,720 --> 00:00:25,590
at Netflix I work on the platform

10
00:00:23,279 --> 00:00:27,420
<font color="#CCCCCC">security team we build all sorts of cool</font>

11
00:00:25,590 --> 00:00:29,820
stuff<font color="#CCCCCC"> to make our</font><font color="#E5E5E5"> micro service</font>

12
00:00:27,420 --> 00:00:31,410
ecosystem safe and if<font color="#E5E5E5"> you download the</font>

13
00:00:29,820 --> 00:00:32,730
slide deck afterwards you can<font color="#E5E5E5"> check out</font>

14
00:00:31,410 --> 00:00:36,120
some<font color="#E5E5E5"> of the cool projects that we work</font>

15
00:00:32,729 --> 00:00:37,290
on<font color="#CCCCCC"> I'm easily findable online if you</font>

16
00:00:36,120 --> 00:00:39,510
<font color="#CCCCCC">want to shoot me some</font><font color="#E5E5E5"> questions after</font>

17
00:00:37,290 --> 00:00:40,860
the talk<font color="#E5E5E5"> but let's get into</font><font color="#CCCCCC"> it let's</font>

18
00:00:39,510 --> 00:00:42,570
talk<font color="#E5E5E5"> about D serialization</font>

19
00:00:40,860 --> 00:00:44,430
vulnerabilities so first I'm<font color="#E5E5E5"> gonna</font>

20
00:00:42,570 --> 00:00:45,930
scribe what those are so that<font color="#CCCCCC"> we're all</font>

21
00:00:44,430 --> 00:00:48,300
<font color="#E5E5E5">on the</font><font color="#CCCCCC"> same</font><font color="#E5E5E5"> page</font><font color="#CCCCCC"> and then I'm going</font><font color="#E5E5E5"> to</font>

22
00:00:45,930 --> 00:00:49,860
talk<font color="#E5E5E5"> about what a gadget chain is and</font>

23
00:00:48,300 --> 00:00:51,718
why I'm<font color="#E5E5E5"> spending all my</font><font color="#CCCCCC"> time talking</font>

24
00:00:49,860 --> 00:00:53,699
<font color="#CCCCCC">about that and then finally I'm going to</font>

25
00:00:51,719 --> 00:00:55,860
talk about<font color="#E5E5E5"> the new tool I made to find</font>

26
00:00:53,699 --> 00:00:58,230
gadget chains and<font color="#E5E5E5"> finally the good stuff</font>

27
00:00:55,860 --> 00:01:01,109
some new exploits that<font color="#CCCCCC"> I</font><font color="#E5E5E5"> discovered with</font>

28
00:00:58,230 --> 00:01:05,600
that tool so first of all what<font color="#CCCCCC"> is a</font><font color="#E5E5E5"> D</font>

29
00:01:01,109 --> 00:01:08,490
serialization vulnerability so in

30
00:01:05,600 --> 00:01:11,399
<font color="#CCCCCC">object-oriented languages like Java</font><font color="#E5E5E5"> data</font>

31
00:01:08,490 --> 00:01:13,560
is contained<font color="#E5E5E5"> in classes and classes also</font>

32
00:01:11,400 --> 00:01:14,850
<font color="#E5E5E5">contain code</font><font color="#CCCCCC"> this is</font><font color="#E5E5E5"> object-oriented</font>

33
00:01:13,560 --> 00:01:17,100
programming<font color="#E5E5E5"> and it gives you cool stuff</font>

34
00:01:14,850 --> 00:01:19,860
like polymorphism but this leads to<font color="#E5E5E5"> a</font>

35
00:01:17,100 --> 00:01:22,470
really important side effect when you're

36
00:01:19,860 --> 00:01:24,570
talking<font color="#E5E5E5"> about deserializing data which</font>

37
00:01:22,470 --> 00:01:27,509
is that if<font color="#E5E5E5"> you control the</font><font color="#CCCCCC"> data type</font>

38
00:01:24,570 --> 00:01:29,639
then you<font color="#E5E5E5"> also control code that's</font>

39
00:01:27,509 --> 00:01:32,909
getting run because<font color="#E5E5E5"> the codes is</font>

40
00:01:29,640 --> 00:01:34,380
determined by the data type<font color="#E5E5E5"> so what does</font>

41
00:01:32,909 --> 00:01:35,939
that<font color="#E5E5E5"> actually mean if you're trying to</font>

42
00:01:34,380 --> 00:01:37,649
<font color="#CCCCCC">look at something that's vulnerable</font><font color="#E5E5E5"> and</font>

43
00:01:35,939 --> 00:01:40,020
then try<font color="#E5E5E5"> to exploit that so here's an</font>

44
00:01:37,650 --> 00:01:41,460
example<font color="#E5E5E5"> of like a rest endpoint that</font>

45
00:01:40,020 --> 00:01:44,340
<font color="#E5E5E5">would be vulnerable and kind of a</font>

46
00:01:41,460 --> 00:01:46,110
classic<font color="#E5E5E5"> Java program</font><font color="#CCCCCC"> so you've got some</font>

47
00:01:44,340 --> 00:01:49,110
<font color="#E5E5E5">kind of render user</font><font color="#CCCCCC"> endpoint it's</font><font color="#E5E5E5"> got a</font>

48
00:01:46,110 --> 00:01:51,689
post body<font color="#CCCCCC"> and you pass the</font><font color="#E5E5E5"> request body</font>

49
00:01:49,110 --> 00:01:53,759
into the object input stream class<font color="#E5E5E5"> you</font>

50
00:01:51,689 --> 00:01:55,470
read an object out<font color="#CCCCCC"> of there and whoever</font>

51
00:01:53,759 --> 00:01:57,060
wrote this expects the object that you

52
00:01:55,470 --> 00:01:58,770
read out to be a user and it's going<font color="#E5E5E5"> to</font>

53
00:01:57,060 --> 00:02:01,680
call something like<font color="#E5E5E5"> user dot render so</font>

54
00:01:58,770 --> 00:02:04,798
the developer has the intent of the

55
00:02:01,680 --> 00:02:06,869
person<font color="#E5E5E5"> posting</font><font color="#CCCCCC"> a serialized body that</font>

56
00:02:04,799 --> 00:02:08,729
<font color="#CCCCCC">represents this user class</font><font color="#E5E5E5"> and this does</font>

57
00:02:06,869 --> 00:02:10,530
nothing<font color="#E5E5E5"> interesting it's</font><font color="#CCCCCC"> holy knock</font>

58
00:02:08,729 --> 00:02:13,080
<font color="#CCCCCC">Lluis</font><font color="#E5E5E5"> but where you get into a</font>

59
00:02:10,530 --> 00:02:13,770
potentially dangerous place is if the

60
00:02:13,080 --> 00:02:15,540
<font color="#E5E5E5">application</font>

61
00:02:13,770 --> 00:02:17,760
something like this on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> classpath as</font>

62
00:02:15,540 --> 00:02:19,560
well a thumbnail user and in<font color="#E5E5E5"> this case</font>

63
00:02:17,760 --> 00:02:21,359
this<font color="#CCCCCC"> is maybe a user</font><font color="#E5E5E5"> that has a</font>

64
00:02:19,560 --> 00:02:23,250
thumbnail<font color="#E5E5E5"> which is a path to</font><font color="#CCCCCC"> something</font>

65
00:02:21,360 --> 00:02:25,680
on<font color="#E5E5E5"> disk</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that means that if a</font>

66
00:02:23,250 --> 00:02:28,260
attacker can serialize the some<font color="#CCCCCC"> male</font>

67
00:02:25,680 --> 00:02:31,110
user class and pass<font color="#E5E5E5"> it</font><font color="#CCCCCC"> into this post</font>

68
00:02:28,260 --> 00:02:33,209
body<font color="#E5E5E5"> then they can read any file off the</font>

69
00:02:31,110 --> 00:02:35,250
disk<font color="#E5E5E5"> and so this is what I mean by</font><font color="#CCCCCC"> if an</font>

70
00:02:33,210 --> 00:02:36,960
attacker can control<font color="#E5E5E5"> your data type then</font>

71
00:02:35,250 --> 00:02:39,210
they might<font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to directly influence</font>

72
00:02:36,960 --> 00:02:42,480
what code gets executed<font color="#E5E5E5"> and potentially</font>

73
00:02:39,210 --> 00:02:45,840
do something unintended<font color="#E5E5E5"> so</font><font color="#CCCCCC"> D</font>

74
00:02:42,480 --> 00:02:48,570
serialization<font color="#E5E5E5"> that's not a new topic so</font>

75
00:02:45,840 --> 00:02:50,250
this was a<font color="#E5E5E5"> really popular topic in 2016</font>

76
00:02:48,570 --> 00:02:52,470
<font color="#E5E5E5">but D serialization vulnerabilities</font>

77
00:02:50,250 --> 00:02:54,480
actually go to something way before that

78
00:02:52,470 --> 00:02:57,090
so they first kind of<font color="#E5E5E5"> came up</font><font color="#CCCCCC"> around</font>

79
00:02:54,480 --> 00:03:00,540
2006<font color="#E5E5E5"> some work shown in field gave a</font>

80
00:02:57,090 --> 00:03:02,700
talk at blackhat<font color="#CCCCCC"> where he describes</font>

81
00:03:00,540 --> 00:03:04,440
exactly<font color="#E5E5E5"> a sort of issue you can</font>

82
00:03:02,700 --> 00:03:06,839
potentially<font color="#E5E5E5"> do weird</font><font color="#CCCCCC"> things with your</font>

83
00:03:04,440 --> 00:03:09,840
data types in a serialized body<font color="#CCCCCC"> and get</font>

84
00:03:06,840 --> 00:03:13,020
arbitrary code execution<font color="#E5E5E5"> but this really</font>

85
00:03:09,840 --> 00:03:14,940
gained steam in 2015 when fro<font color="#CCCCCC"> HOF and</font>

86
00:03:13,020 --> 00:03:16,670
Lawrence gave a presentation at<font color="#E5E5E5"> app set</font>

87
00:03:14,940 --> 00:03:19,200
<font color="#CCCCCC">Cali</font><font color="#E5E5E5"> where they showed</font><font color="#CCCCCC"> that there's</font>

88
00:03:16,670 --> 00:03:21,540
arbitrary code execution gadget chains

89
00:03:19,200 --> 00:03:23,100
in all sorts of<font color="#CCCCCC"> open-source libraries</font>

90
00:03:21,540 --> 00:03:24,900
are commonly pulled in like<font color="#E5E5E5"> commas</font>

91
00:03:23,100 --> 00:03:27,540
collections<font color="#E5E5E5"> and so if you've got any</font>

92
00:03:24,900 --> 00:03:29,040
application doing unsafety serialization

93
00:03:27,540 --> 00:03:31,470
<font color="#E5E5E5">and that included things like jenkins</font>

94
00:03:29,040 --> 00:03:33,329
and various application containers<font color="#E5E5E5"> then</font>

95
00:03:31,470 --> 00:03:35,070
you've<font color="#E5E5E5"> got arbitrary code execution on</font>

96
00:03:33,330 --> 00:03:36,690
those apps and it's because there's<font color="#CCCCCC"> just</font>

97
00:03:35,070 --> 00:03:38,459
so many libraries<font color="#E5E5E5"> that</font><font color="#CCCCCC"> have these</font>

98
00:03:36,690 --> 00:03:41,370
interesting<font color="#E5E5E5"> gadget chains in them that</font>

99
00:03:38,460 --> 00:03:43,050
end up<font color="#E5E5E5"> doing arbitrary code execution so</font>

100
00:03:41,370 --> 00:03:44,670
the year that followed<font color="#CCCCCC"> I've heard a</font><font color="#E5E5E5"> lot</font>

101
00:03:43,050 --> 00:03:46,260
of<font color="#E5E5E5"> people refer to</font><font color="#CCCCCC"> as like the</font><font color="#E5E5E5"> Java</font><font color="#CCCCCC"> D</font>

102
00:03:44,670 --> 00:03:47,790
serialization<font color="#E5E5E5"> apocalypse because just</font>

103
00:03:46,260 --> 00:03:49,649
everyone realized that they were

104
00:03:47,790 --> 00:03:51,420
<font color="#CCCCCC">vulnerable to this and so lots of talks</font>

105
00:03:49,650 --> 00:03:53,580
were given in that<font color="#E5E5E5"> year and probably my</font>

106
00:03:51,420 --> 00:03:55,920
favorite one<font color="#CCCCCC"> was by</font><font color="#E5E5E5"> Luca at an OAuth</font>

107
00:03:53,580 --> 00:03:57,210
<font color="#CCCCCC">meetup where he</font><font color="#E5E5E5"> just did a really good</font>

108
00:03:55,920 --> 00:03:59,309
<font color="#CCCCCC">job of outlining this</font><font color="#E5E5E5"> is what a</font>

109
00:03:57,210 --> 00:04:01,200
vulnerability is this is what an exploit

110
00:03:59,310 --> 00:04:03,930
looks like this is<font color="#E5E5E5"> how you fix them</font><font color="#CCCCCC"> so</font>

111
00:04:01,200 --> 00:04:05,730
this<font color="#CCCCCC"> is a good</font><font color="#E5E5E5"> talk to go look at</font>

112
00:04:03,930 --> 00:04:07,140
afterwards if you<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to kind of dig a</font>

113
00:04:05,730 --> 00:04:09,840
little deeper<font color="#CCCCCC"> on what phoner abilities</font>

114
00:04:07,140 --> 00:04:11,190
look like but you<font color="#E5E5E5"> know the subject</font>

115
00:04:09,840 --> 00:04:13,410
<font color="#CCCCCC">didn't end there so at last year's</font>

116
00:04:11,190 --> 00:04:16,410
blackhat<font color="#CCCCCC"> Nino's Amuro she gave</font><font color="#E5E5E5"> talk</font>

117
00:04:13,410 --> 00:04:17,850
about JSON parsing libraries<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are</font>

118
00:04:16,410 --> 00:04:20,220
also subject to<font color="#E5E5E5"> these kind of</font><font color="#CCCCCC"> D</font>

119
00:04:17,850 --> 00:04:22,200
serialization attacks so for<font color="#E5E5E5"> a while in</font>

120
00:04:20,220 --> 00:04:24,060
2016 everyone's like art if I just<font color="#E5E5E5"> don't</font>

121
00:04:22,200 --> 00:04:25,650
use the<font color="#E5E5E5"> Java like object input stream</font>

122
00:04:24,060 --> 00:04:27,139
then I'm not<font color="#CCCCCC"> gonna be</font><font color="#E5E5E5"> subject</font><font color="#CCCCCC"> to these</font>

123
00:04:25,650 --> 00:04:29,599
<font color="#CCCCCC">vulnerabilities so it's all</font>

124
00:04:27,139 --> 00:04:31,759
good right and the answer<font color="#CCCCCC"> is no there's</font>

125
00:04:29,599 --> 00:04:33,949
still<font color="#CCCCCC"> plenty of ways other</font><font color="#E5E5E5"> Java</font>

126
00:04:31,759 --> 00:04:35,840
deserialize errs or<font color="#E5E5E5"> DC</font><font color="#CCCCCC"> Wiser's and other</font>

127
00:04:33,949 --> 00:04:37,879
languages<font color="#E5E5E5"> can be</font><font color="#CCCCCC"> vulnerable</font><font color="#E5E5E5"> to these</font>

128
00:04:35,840 --> 00:04:39,378
sorts of exploits<font color="#E5E5E5"> so this is a really</font>

129
00:04:37,879 --> 00:04:41,509
<font color="#E5E5E5">good survey of all sorts of different</font>

130
00:04:39,379 --> 00:04:43,490
deserializing libraries and in lots<font color="#E5E5E5"> of</font>

131
00:04:41,509 --> 00:04:45,710
languages<font color="#E5E5E5"> besides</font><font color="#CCCCCC"> Java</font><font color="#E5E5E5"> so that's another</font>

132
00:04:43,490 --> 00:04:47,389
<font color="#E5E5E5">good talk to go check out</font><font color="#CCCCCC"> so there was</font>

133
00:04:45,710 --> 00:04:49,489
that<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> last year there's this talk</font>

134
00:04:47,389 --> 00:04:51,919
right now<font color="#CCCCCC"> so that's the end of the</font><font color="#E5E5E5"> D</font>

135
00:04:49,490 --> 00:04:53,749
serialization story right<font color="#CCCCCC"> no like this</font>

136
00:04:51,919 --> 00:04:55,039
<font color="#CCCCCC">is still an important topic we still</font>

137
00:04:53,749 --> 00:04:56,900
haven't killed off<font color="#E5E5E5"> this vulnerability</font>

138
00:04:55,039 --> 00:04:58,759
class so in<font color="#E5E5E5"> October</font><font color="#CCCCCC"> this year at app</font>

139
00:04:56,900 --> 00:05:01,039
<font color="#CCCCCC">tech USA</font><font color="#E5E5E5"> there's still gonna be another</font>

140
00:04:58,759 --> 00:05:02,719
talk about D<font color="#E5E5E5"> serialization and why you</font>

141
00:05:01,039 --> 00:05:04,729
shouldn't<font color="#E5E5E5"> be doing</font><font color="#CCCCCC"> this in a dangerous</font>

142
00:05:02,719 --> 00:05:07,219
way and what can go<font color="#E5E5E5"> wrong so this is</font>

143
00:05:04,729 --> 00:05:08,210
<font color="#E5E5E5">still a relevant topic</font><font color="#CCCCCC"> and it's</font>

144
00:05:07,219 --> 00:05:09,889
something<font color="#CCCCCC"> that we need to understand</font>

145
00:05:08,210 --> 00:05:10,448
more<font color="#CCCCCC"> deeply</font><font color="#E5E5E5"> because it's obviously not</font>

146
00:05:09,889 --> 00:05:13,370
going<font color="#E5E5E5"> away</font>

147
00:05:10,449 --> 00:05:14,810
<font color="#E5E5E5">so what's the deal</font><font color="#CCCCCC"> with Java</font><font color="#E5E5E5"> D</font>

148
00:05:13,370 --> 00:05:16,400
serialization<font color="#E5E5E5"> vulnerabilities why are</font>

149
00:05:14,810 --> 00:05:18,229
they so interesting why did this cause

150
00:05:16,400 --> 00:05:20,688
so much strife when we realized what a

151
00:05:18,229 --> 00:05:22,039
big<font color="#E5E5E5"> deal they were you know if all DC</font>

152
00:05:20,689 --> 00:05:23,689
relation vulnerabilities look like what

153
00:05:22,039 --> 00:05:25,520
I<font color="#E5E5E5"> add in that first slide</font><font color="#CCCCCC"> they wouldn't</font>

154
00:05:23,689 --> 00:05:27,650
actually be<font color="#E5E5E5"> that interesting the reason</font>

155
00:05:25,520 --> 00:05:29,359
<font color="#CCCCCC">they're interesting is because</font><font color="#E5E5E5"> there's</font>

156
00:05:27,650 --> 00:05:30,620
these things<font color="#E5E5E5"> called magic methods and</font>

157
00:05:29,360 --> 00:05:32,960
those magic methods will get

158
00:05:30,620 --> 00:05:34,819
automatically executed by the D

159
00:05:32,960 --> 00:05:36,438
serialization library while it's

160
00:05:34,819 --> 00:05:38,479
constructing<font color="#CCCCCC"> your payload from the</font>

161
00:05:36,439 --> 00:05:40,279
serialize byte stream and that's what

162
00:05:38,479 --> 00:05:42,830
<font color="#E5E5E5">gives rise to all sorts of interesting</font>

163
00:05:40,279 --> 00:05:44,870
behavior that attackers<font color="#E5E5E5"> can exploit so</font>

164
00:05:42,830 --> 00:05:46,849
here's another<font color="#CCCCCC"> example that</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

165
00:05:44,870 --> 00:05:48,500
<font color="#E5E5E5">the exact same post endpoint as before</font>

166
00:05:46,849 --> 00:05:50,240
<font color="#E5E5E5">but let's say you have this like evil</font>

167
00:05:48,500 --> 00:05:51,500
class that's on your class path for some

168
00:05:50,240 --> 00:05:52,819
reason this<font color="#E5E5E5"> probably doesn't actually</font>

169
00:05:51,500 --> 00:05:55,069
exist<font color="#E5E5E5"> anymore but</font><font color="#CCCCCC"> for the sake of</font>

170
00:05:52,819 --> 00:05:57,139
<font color="#E5E5E5">example</font><font color="#CCCCCC"> there's this this class</font>

171
00:05:55,069 --> 00:05:58,849
implements this read object method and

172
00:05:57,139 --> 00:06:01,069
that's one<font color="#CCCCCC"> of these</font><font color="#E5E5E5"> magic methods that</font>

173
00:05:58,849 --> 00:06:02,449
gets automatically invoked<font color="#E5E5E5"> and that</font>

174
00:06:01,069 --> 00:06:05,120
<font color="#E5E5E5">thing's gonna read something that'll be</font>

175
00:06:02,449 --> 00:06:08,240
object input stream<font color="#E5E5E5"> and execute it so</font>

176
00:06:05,120 --> 00:06:10,639
shell out to whatever it read in and the

177
00:06:08,240 --> 00:06:12,740
thing that<font color="#E5E5E5"> about this magic method this</font>

178
00:06:10,639 --> 00:06:16,849
read object method that's so critical<font color="#CCCCCC"> is</font>

179
00:06:12,740 --> 00:06:19,819
that that gets executed<font color="#CCCCCC"> before this</font><font color="#E5E5E5"> we'd</font>

180
00:06:16,849 --> 00:06:21,860
object method<font color="#E5E5E5"> ever gets ever returns on</font>

181
00:06:19,819 --> 00:06:24,110
the<font color="#E5E5E5"> left-hand side so</font><font color="#CCCCCC"> it doesn't matter</font>

182
00:06:21,860 --> 00:06:26,599
<font color="#CCCCCC">that</font><font color="#E5E5E5"> this evil class can't be</font><font color="#CCCCCC"> passed to</font>

183
00:06:24,110 --> 00:06:30,560
a user<font color="#E5E5E5"> because this magic method gets</font>

184
00:06:26,599 --> 00:06:32,810
invoked before<font color="#E5E5E5"> that ever returns so</font>

185
00:06:30,560 --> 00:06:35,060
magic methods<font color="#E5E5E5"> what's the deal with those</font>

186
00:06:32,810 --> 00:06:36,680
like you've probably never<font color="#CCCCCC"> implemented</font>

187
00:06:35,060 --> 00:06:38,449
one you're<font color="#E5E5E5"> just like how common can</font>

188
00:06:36,680 --> 00:06:39,569
<font color="#E5E5E5">these</font><font color="#CCCCCC"> things actually</font><font color="#E5E5E5"> be and the answer</font>

189
00:06:38,449 --> 00:06:41,639
is<font color="#CCCCCC"> that they're in</font>

190
00:06:39,569 --> 00:06:45,960
<font color="#CCCCCC">doubly common because</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> JDK</font><font color="#E5E5E5"> has them</font>

191
00:06:41,639 --> 00:06:47,429
all over the place<font color="#CCCCCC"> so the so</font><font color="#E5E5E5"> hashmap is</font>

192
00:06:45,960 --> 00:06:49,258
a really good example<font color="#CCCCCC"> of a class</font>

193
00:06:47,429 --> 00:06:51,089
implementing one of these matching

194
00:06:49,259 --> 00:06:53,550
method so it implements read object and

195
00:06:51,089 --> 00:06:56,009
the reason<font color="#E5E5E5"> that it implements the right</font>

196
00:06:53,550 --> 00:06:58,169
<font color="#E5E5E5">object and read object method is because</font>

197
00:06:56,009 --> 00:06:59,669
it allows serialize versions of a hash

198
00:06:58,169 --> 00:07:01,619
map to be interoperable<font color="#E5E5E5"> between</font>

199
00:06:59,669 --> 00:07:03,508
different<font color="#CCCCCC"> jdk versions they might want</font>

200
00:07:01,619 --> 00:07:06,179
to<font color="#E5E5E5"> change the way they manage</font><font color="#CCCCCC"> their hash</font>

201
00:07:03,509 --> 00:07:08,339
tables and things between<font color="#CCCCCC"> jdk releases</font>

202
00:07:06,179 --> 00:07:10,169
and if they did<font color="#CCCCCC"> that too</font><font color="#E5E5E5"> may use default</font>

203
00:07:08,339 --> 00:07:11,729
serialization<font color="#E5E5E5"> techniques then those here</font>

204
00:07:10,169 --> 00:07:14,209
<font color="#E5E5E5">live versions of hash mats wouldn't be</font>

205
00:07:11,729 --> 00:07:16,169
<font color="#CCCCCC">interoperable</font><font color="#E5E5E5"> but by instead</font>

206
00:07:14,209 --> 00:07:18,509
implementing<font color="#CCCCCC"> write object and</font>

207
00:07:16,169 --> 00:07:20,969
serializing out<font color="#E5E5E5"> the hash map is just a</font>

208
00:07:18,509 --> 00:07:23,069
list of key<font color="#CCCCCC"> value pairs they can read</font>

209
00:07:20,969 --> 00:07:25,080
<font color="#E5E5E5">that in in any version of</font><font color="#CCCCCC"> the JDK as a</font>

210
00:07:23,069 --> 00:07:26,789
list of key<font color="#CCCCCC"> value pairs and call this</font>

211
00:07:25,080 --> 00:07:28,740
<font color="#E5E5E5">stop put with that key</font><font color="#CCCCCC"> and that value</font>

212
00:07:26,789 --> 00:07:32,699
for each one they read in<font color="#CCCCCC"> that means</font>

213
00:07:28,740 --> 00:07:35,399
that as the Java<font color="#CCCCCC"> ID serials I D</font>

214
00:07:32,699 --> 00:07:38,099
<font color="#E5E5E5">serialization library is deserializing a</font>

215
00:07:35,399 --> 00:07:40,019
hash map<font color="#E5E5E5"> your calling object hash code</font>

216
00:07:38,099 --> 00:07:42,779
and object equals<font color="#E5E5E5"> for each of those keys</font>

217
00:07:40,019 --> 00:07:44,550
<font color="#E5E5E5">you're reading out of that list so this</font>

218
00:07:42,779 --> 00:07:46,439
<font color="#E5E5E5">gives us a way</font><font color="#CCCCCC"> of getting to</font><font color="#E5E5E5"> other known</font>

219
00:07:44,550 --> 00:07:48,300
entry points so if there's a class that

220
00:07:46,439 --> 00:07:49,800
has<font color="#E5E5E5"> an interesting hashcode method that</font>

221
00:07:48,300 --> 00:07:51,930
does something<font color="#CCCCCC"> potentially dangerous in</font>

222
00:07:49,800 --> 00:07:54,029
that<font color="#E5E5E5"> hash code then even though patch</font>

223
00:07:51,930 --> 00:07:55,740
code<font color="#CCCCCC"> isn't a magic methods we know we</font>

224
00:07:54,029 --> 00:07:58,259
can wrap it<font color="#CCCCCC"> inside a hash map and we'll</font>

225
00:07:55,740 --> 00:08:00,300
end up invoking it<font color="#E5E5E5"> and that kind of gets</font>

226
00:07:58,259 --> 00:08:01,889
you into what gadget<font color="#E5E5E5"> chains start</font>

227
00:08:00,300 --> 00:08:03,539
looking like<font color="#E5E5E5"> it's where you</font><font color="#CCCCCC"> get moved</font>

228
00:08:01,889 --> 00:08:05,069
from one method that<font color="#CCCCCC"> you know the D</font>

229
00:08:03,539 --> 00:08:06,269
serialization library will invoke and

230
00:08:05,069 --> 00:08:08,849
getting into<font color="#E5E5E5"> another one and then</font>

231
00:08:06,269 --> 00:08:10,439
potentially<font color="#CCCCCC"> more</font><font color="#E5E5E5"> from there</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> I talked</font>

232
00:08:08,849 --> 00:08:12,058
<font color="#E5E5E5">about hash map priority queue is just</font>

233
00:08:10,439 --> 00:08:14,669
another really common<font color="#CCCCCC"> example</font><font color="#E5E5E5"> that I've</font>

234
00:08:12,059 --> 00:08:17,459
seen attackers use in building up gadget

235
00:08:14,669 --> 00:08:19,258
chains<font color="#E5E5E5"> but if you check out a project</font>

236
00:08:17,459 --> 00:08:22,949
<font color="#CCCCCC">like Y so</font><font color="#E5E5E5"> serial you'll see a bunch of</font>

237
00:08:19,259 --> 00:08:25,319
others so here's an<font color="#CCCCCC"> example of how</font><font color="#E5E5E5"> magic</font>

238
00:08:22,949 --> 00:08:27,329
methods get you to gadget<font color="#CCCCCC"> chain</font><font color="#E5E5E5"> so this</font>

239
00:08:25,319 --> 00:08:28,949
is a really<font color="#E5E5E5"> simplified version of</font><font color="#CCCCCC"> what</font>

240
00:08:27,329 --> 00:08:30,749
we table<font color="#CCCCCC"> tech</font><font color="#E5E5E5"> looks like in a hash map</font>

241
00:08:28,949 --> 00:08:32,729
and the main<font color="#E5E5E5"> thing to notice is that it</font>

242
00:08:30,749 --> 00:08:35,550
reads keys and values out of<font color="#E5E5E5"> that object</font>

243
00:08:32,729 --> 00:08:38,159
<font color="#E5E5E5">input stream and calls hash code on the</font>

244
00:08:35,549 --> 00:08:40,468
key<font color="#E5E5E5"> and so if I put into</font><font color="#CCCCCC"> my object input</font>

245
00:08:38,159 --> 00:08:42,599
stream<font color="#E5E5E5"> something</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> this class and</font>

246
00:08:40,469 --> 00:08:44,009
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> an example again simplified</font>

247
00:08:42,599 --> 00:08:46,259
example<font color="#E5E5E5"> but an example</font><font color="#CCCCCC"> of a class</font><font color="#E5E5E5"> that</font>

248
00:08:44,009 --> 00:08:48,480
<font color="#CCCCCC">comes</font><font color="#E5E5E5"> out of</font><font color="#CCCCCC"> the closure library then</font>

249
00:08:46,259 --> 00:08:50,519
what this class does when you invoke

250
00:08:48,480 --> 00:08:53,190
<font color="#E5E5E5">cache code on it</font><font color="#CCCCCC"> is it looks up inside</font>

251
00:08:50,519 --> 00:08:55,800
its<font color="#CCCCCC"> mat for a I</font><font color="#E5E5E5"> function</font>

252
00:08:53,190 --> 00:08:58,290
<font color="#CCCCCC">instance and calls invoke on it</font><font color="#E5E5E5"> so if I</font>

253
00:08:55,800 --> 00:09:00,089
put inside<font color="#CCCCCC"> that closer function map an</font>

254
00:08:58,290 --> 00:09:02,160
interesting implementation<font color="#CCCCCC"> of</font><font color="#E5E5E5"> I function</font>

255
00:09:00,090 --> 00:09:04,200
I can<font color="#CCCCCC"> get into a class it does</font>

256
00:09:02,160 --> 00:09:06,390
<font color="#E5E5E5">interesting things and invoke so here's</font>

257
00:09:04,200 --> 00:09:08,460
an<font color="#CCCCCC"> example of a function implementation</font>

258
00:09:06,390 --> 00:09:11,490
that<font color="#E5E5E5"> composes two other functions so</font>

259
00:09:08,460 --> 00:09:13,260
let's say for<font color="#CCCCCC"> f1 I implement the</font>

260
00:09:11,490 --> 00:09:16,710
constant<font color="#CCCCCC"> function that just returned</font>

261
00:09:13,260 --> 00:09:19,380
some constant value<font color="#CCCCCC"> and for f2</font><font color="#E5E5E5"> I directs</font>

262
00:09:16,710 --> 00:09:21,360
the payload<font color="#E5E5E5"> to deserialize</font><font color="#CCCCCC"> and eval</font>

263
00:09:19,380 --> 00:09:23,580
function<font color="#E5E5E5"> and that means that I can get</font>

264
00:09:21,360 --> 00:09:25,410
some arbitrary value pass into the

265
00:09:23,580 --> 00:09:26,100
invoke on function eval and basically

266
00:09:25,410 --> 00:09:28,199
get<font color="#CCCCCC"> RCE</font>

267
00:09:26,100 --> 00:09:30,930
<font color="#E5E5E5">so this is what</font><font color="#CCCCCC"> a gadget chain looks</font>

268
00:09:28,200 --> 00:09:31,860
like in<font color="#E5E5E5"> a</font><font color="#CCCCCC"> DC realization exploit and if</font>

269
00:09:30,930 --> 00:09:33,540
you want to know what that<font color="#CCCCCC"> like would</font>

270
00:09:31,860 --> 00:09:36,540
actually look<font color="#CCCCCC"> like</font><font color="#E5E5E5"> on the wire this is</font>

271
00:09:33,540 --> 00:09:38,790
an<font color="#CCCCCC"> example</font><font color="#E5E5E5"> of a</font><font color="#CCCCCC"> Jackson version of that</font>

272
00:09:36,540 --> 00:09:40,740
kind of<font color="#E5E5E5"> a payload so you wrap that</font>

273
00:09:38,790 --> 00:09:42,120
<font color="#E5E5E5">interesting abstract table model class</font>

274
00:09:40,740 --> 00:09:44,220
<font color="#CCCCCC">that had that interesting hash code</font>

275
00:09:42,120 --> 00:09:46,710
implementation<font color="#E5E5E5"> inside a hash map and</font>

276
00:09:44,220 --> 00:09:48,180
then<font color="#E5E5E5"> you just supply as the instances</font><font color="#CCCCCC"> of</font>

277
00:09:46,710 --> 00:09:49,890
all those member variables these

278
00:09:48,180 --> 00:09:52,260
interesting classes<font color="#E5E5E5"> with potentially</font>

279
00:09:49,890 --> 00:09:56,010
more interesting<font color="#CCCCCC"> member values inside</font>

280
00:09:52,260 --> 00:09:57,510
that so the important thing<font color="#E5E5E5"> to</font><font color="#CCCCCC"> note</font>

281
00:09:56,010 --> 00:10:00,360
about<font color="#CCCCCC"> that example that I just</font><font color="#E5E5E5"> gave</font>

282
00:09:57,510 --> 00:10:02,550
though is<font color="#E5E5E5"> that all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> that had nothing</font>

283
00:10:00,360 --> 00:10:04,440
<font color="#E5E5E5">to do with</font><font color="#CCCCCC"> what the application was</font>

284
00:10:02,550 --> 00:10:08,040
actually<font color="#CCCCCC"> calling what code it was</font>

285
00:10:04,440 --> 00:10:10,380
invoking<font color="#CCCCCC"> that payload worked just as</font>

286
00:10:08,040 --> 00:10:12,300
<font color="#CCCCCC">well with that first example</font><font color="#E5E5E5"> I gave that</font>

287
00:10:10,380 --> 00:10:14,520
tried to<font color="#CCCCCC"> pass things to users it had</font>

288
00:10:12,300 --> 00:10:16,800
nothing to<font color="#CCCCCC"> do</font><font color="#E5E5E5"> that payload had nothing</font>

289
00:10:14,520 --> 00:10:17,910
to do with<font color="#E5E5E5"> what the application expects</font>

290
00:10:16,800 --> 00:10:20,400
to do<font color="#CCCCCC"> what the payload wants is</font>

291
00:10:17,910 --> 00:10:21,990
deserialized everything that determines

292
00:10:20,400 --> 00:10:24,150
what gadget<font color="#CCCCCC"> chain to construct is</font>

293
00:10:21,990 --> 00:10:26,130
determined by the class path by what

294
00:10:24,150 --> 00:10:28,530
classes<font color="#CCCCCC"> exist inside your application</font>

295
00:10:26,130 --> 00:10:29,850
<font color="#CCCCCC">and that doesn't have</font><font color="#E5E5E5"> to be dis</font><font color="#CCCCCC"> class as</font>

296
00:10:28,530 --> 00:10:31,829
<font color="#CCCCCC">you call directly that is the cumulative</font>

297
00:10:29,850 --> 00:10:33,570
<font color="#E5E5E5">sum of all</font><font color="#CCCCCC"> of your transitive</font>

298
00:10:31,830 --> 00:10:34,950
dependencies<font color="#CCCCCC"> so if there's</font><font color="#E5E5E5"> something</font>

299
00:10:33,570 --> 00:10:36,540
interesting<font color="#E5E5E5"> in some transitive</font>

300
00:10:34,950 --> 00:10:39,180
dependency you didn't even know you were

301
00:10:36,540 --> 00:10:41,069
pulling<font color="#CCCCCC"> in</font><font color="#E5E5E5"> a DC realization gadget chain</font>

302
00:10:39,180 --> 00:10:42,719
can potentially utilize that<font color="#E5E5E5"> and that's</font>

303
00:10:41,070 --> 00:10:46,290
what makes these things<font color="#CCCCCC"> so dangerous and</font>

304
00:10:42,720 --> 00:10:49,500
<font color="#E5E5E5">so</font><font color="#CCCCCC"> prolific</font><font color="#E5E5E5"> in in applications</font><font color="#CCCCCC"> and</font>

305
00:10:46,290 --> 00:10:51,540
practice so what Java deserialize errs

306
00:10:49,500 --> 00:10:55,260
are vulnerable<font color="#E5E5E5"> to</font><font color="#CCCCCC"> these kind of exploits</font>

307
00:10:51,540 --> 00:10:56,610
<font color="#E5E5E5">so the</font><font color="#CCCCCC"> JDK object input stream</font><font color="#E5E5E5"> is the</font>

308
00:10:55,260 --> 00:10:58,350
classic one<font color="#E5E5E5"> that's the one</font><font color="#CCCCCC"> that we're</font>

309
00:10:56,610 --> 00:11:00,540
<font color="#E5E5E5">all this attention started gaining steam</font>

310
00:10:58,350 --> 00:11:03,150
but that's<font color="#CCCCCC"> definitely</font><font color="#E5E5E5"> not the</font><font color="#CCCCCC"> only one</font>

311
00:11:00,540 --> 00:11:05,640
so extreme is another<font color="#CCCCCC"> example of an</font><font color="#E5E5E5"> XML</font>

312
00:11:03,150 --> 00:11:06,600
parser<font color="#E5E5E5"> where you can specify your data</font>

313
00:11:05,640 --> 00:11:08,069
types and therefore

314
00:11:06,600 --> 00:11:09,480
or end up in San Shi<font color="#E5E5E5"> a</font><font color="#CCCCCC"> ting arbitrary</font>

315
00:11:08,069 --> 00:11:11,819
things and potentially building gadget

316
00:11:09,480 --> 00:11:13,980
chain<font color="#E5E5E5"> all of these</font><font color="#CCCCCC"> JSON libraries are</font>

317
00:11:11,819 --> 00:11:15,689
potentially exploitable some of them are

318
00:11:13,980 --> 00:11:18,269
<font color="#E5E5E5">not by default but with some certain</font>

319
00:11:15,690 --> 00:11:19,380
configuration options<font color="#CCCCCC"> might end up being</font>

320
00:11:18,269 --> 00:11:20,910
exploitable so you should spend some

321
00:11:19,380 --> 00:11:22,139
<font color="#E5E5E5">time reading you know</font><font color="#CCCCCC"> some arose if</font>

322
00:11:20,910 --> 00:11:23,910
you're worried about<font color="#E5E5E5"> those and</font>

323
00:11:22,139 --> 00:11:25,529
understanding<font color="#E5E5E5"> exactly how and when those</font>

324
00:11:23,910 --> 00:11:27,120
<font color="#E5E5E5">are exploitable but the point is</font><font color="#CCCCCC"> that</font>

325
00:11:25,529 --> 00:11:28,649
there's lots of<font color="#E5E5E5"> different</font><font color="#CCCCCC"> libraries and</font>

326
00:11:27,120 --> 00:11:31,380
all those libraries have different<font color="#E5E5E5"> ideas</font>

327
00:11:28,649 --> 00:11:33,300
about what<font color="#CCCCCC"> classes they'll deserialize</font>

328
00:11:31,380 --> 00:11:35,310
and what magic methods will be<font color="#E5E5E5"> invoked</font>

329
00:11:33,300 --> 00:11:37,469
<font color="#E5E5E5">and so those different libraries might</font>

330
00:11:35,310 --> 00:11:39,209
end up having different<font color="#CCCCCC"> types of gadget</font>

331
00:11:37,470 --> 00:11:42,300
chains possible and<font color="#E5E5E5"> that's something</font><font color="#CCCCCC"> to</font>

332
00:11:39,209 --> 00:11:44,008
keep in<font color="#CCCCCC"> mind</font><font color="#E5E5E5"> for later so finding</font>

333
00:11:42,300 --> 00:11:46,199
vulnerabilities<font color="#CCCCCC"> how do you actually know</font>

334
00:11:44,009 --> 00:11:49,470
if your application is vulnerable to

335
00:11:46,199 --> 00:11:51,209
<font color="#CCCCCC">addy serialization bug</font><font color="#E5E5E5"> well finding a</font>

336
00:11:49,470 --> 00:11:52,949
potential<font color="#E5E5E5"> D serialization vulnerability</font>

337
00:11:51,209 --> 00:11:54,810
isn't really any different from<font color="#E5E5E5"> finding</font>

338
00:11:52,949 --> 00:11:56,790
many other types of<font color="#CCCCCC"> application security</font>

339
00:11:54,810 --> 00:11:59,399
<font color="#E5E5E5">vulnerabilities like sequel injection or</font>

340
00:11:56,790 --> 00:12:01,860
XSS it's really<font color="#CCCCCC"> just a question</font><font color="#E5E5E5"> of can</font>

341
00:11:59,399 --> 00:12:03,839
attacker<font color="#E5E5E5"> controlled data flow into your</font>

342
00:12:01,860 --> 00:12:05,220
application and<font color="#E5E5E5"> then go into one</font><font color="#CCCCCC"> of</font>

343
00:12:03,839 --> 00:12:07,680
these potentially dangerous<font color="#E5E5E5"> sinks in</font>

344
00:12:05,220 --> 00:12:10,259
this<font color="#E5E5E5"> case a parser library to</font>

345
00:12:07,680 --> 00:12:12,599
deserialize<font color="#CCCCCC"> or library</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> anyone's</font><font color="#E5E5E5"> I</font>

346
00:12:10,259 --> 00:12:13,680
<font color="#CCCCCC">just named on that last page and that's</font>

347
00:12:12,600 --> 00:12:14,880
basically<font color="#E5E5E5"> the same thing</font><font color="#CCCCCC"> as something</font>

348
00:12:13,680 --> 00:12:16,859
<font color="#E5E5E5">like sequel injection</font><font color="#CCCCCC"> that's something</font>

349
00:12:14,880 --> 00:12:19,709
attacker control will flow into<font color="#CCCCCC"> a sequel</font>

350
00:12:16,860 --> 00:12:21,149
statement<font color="#E5E5E5"> so existing tools are pretty</font>

351
00:12:19,709 --> 00:12:22,649
<font color="#E5E5E5">good</font><font color="#CCCCCC"> at finding these kind of</font>

352
00:12:21,149 --> 00:12:24,689
vulnerabilities we understand how<font color="#E5E5E5"> to</font>

353
00:12:22,649 --> 00:12:26,819
<font color="#CCCCCC">find them statically and dynamically</font><font color="#E5E5E5"> so</font>

354
00:12:24,689 --> 00:12:28,800
I'm<font color="#E5E5E5"> actually not</font><font color="#CCCCCC"> that interested in how</font>

355
00:12:26,819 --> 00:12:30,060
do you find these<font color="#CCCCCC"> things because that's</font>

356
00:12:28,800 --> 00:12:32,310
the topic<font color="#CCCCCC"> that we've been discussing for</font>

357
00:12:30,060 --> 00:12:34,619
years it's not where I'm<font color="#CCCCCC"> gonna focus on</font>

358
00:12:32,310 --> 00:12:37,829
what I'm<font color="#E5E5E5"> really interested in are the</font>

359
00:12:34,620 --> 00:12:40,920
gadget chains<font color="#E5E5E5"> so why am i interested</font><font color="#CCCCCC"> in</font>

360
00:12:37,829 --> 00:12:42,660
gadget chains<font color="#E5E5E5"> and why is that the</font><font color="#CCCCCC"> focus</font>

361
00:12:40,920 --> 00:12:44,550
of this talk<font color="#E5E5E5"> and the answer is that it</font>

362
00:12:42,660 --> 00:12:47,480
has to do<font color="#E5E5E5"> with what do you do with the</font>

363
00:12:44,550 --> 00:12:50,219
vulnerability once you discover it<font color="#E5E5E5"> so</font>

364
00:12:47,480 --> 00:12:52,560
why not<font color="#E5E5E5"> just use a better serialization</font>

365
00:12:50,220 --> 00:12:54,420
strategy why not use some library or

366
00:12:52,560 --> 00:12:57,268
some configuration that isn't vulnerable

367
00:12:54,420 --> 00:12:59,310
to this<font color="#E5E5E5"> kind of problem and I think</font><font color="#CCCCCC"> Luca</font>

368
00:12:57,269 --> 00:13:01,649
<font color="#E5E5E5">summed this up into 2016</font><font color="#CCCCCC"> talk the best</font>

369
00:12:59,310 --> 00:13:03,420
<font color="#CCCCCC">it's 2016</font><font color="#E5E5E5"> there are better</font><font color="#CCCCCC"> options for</font>

370
00:13:01,649 --> 00:13:06,839
<font color="#CCCCCC">serialization and that was true then</font>

371
00:13:03,420 --> 00:13:09,839
<font color="#E5E5E5">that's true today</font><font color="#CCCCCC"> but my</font><font color="#E5E5E5"> answer to that</font>

372
00:13:06,839 --> 00:13:12,060
<font color="#E5E5E5">is that's fine if you're developing</font><font color="#CCCCCC"> new</font>

373
00:13:09,839 --> 00:13:12,959
<font color="#E5E5E5">application but what do you do when</font>

374
00:13:12,060 --> 00:13:15,059
you're working<font color="#CCCCCC"> with</font><font color="#E5E5E5"> existing</font>

375
00:13:12,959 --> 00:13:17,010
<font color="#E5E5E5">applications</font><font color="#CCCCCC"> that have existing clients</font>

376
00:13:15,059 --> 00:13:19,189
out there<font color="#CCCCCC"> in the world</font><font color="#E5E5E5"> we're changing</font>

377
00:13:17,010 --> 00:13:22,130
<font color="#E5E5E5">the way that</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> parse</font><font color="#CCCCCC"> their</font><font color="#E5E5E5"> pale</font>

378
00:13:19,190 --> 00:13:25,250
might end<font color="#E5E5E5"> up breaking things so who</font>

379
00:13:22,130 --> 00:13:28,310
recognizes this guy on the<font color="#CCCCCC"> left so this</font>

380
00:13:25,250 --> 00:13:29,960
is the original<font color="#CCCCCC"> weed DVD that got</font><font color="#E5E5E5"> sent</font>

381
00:13:28,310 --> 00:13:31,609
out to<font color="#CCCCCC"> customers of Netflix so they</font>

382
00:13:29,960 --> 00:13:34,460
could stream Netflix from there we<font color="#E5E5E5"> V</font>

383
00:13:31,610 --> 00:13:36,050
<font color="#E5E5E5">that thing went out around 2010 and</font>

384
00:13:34,460 --> 00:13:38,810
that's got a client<font color="#E5E5E5"> stands on the disc</font>

385
00:13:36,050 --> 00:13:40,400
<font color="#CCCCCC">which if you want wanted</font><font color="#E5E5E5"> to go use</font><font color="#CCCCCC"> it</font>

386
00:13:38,810 --> 00:13:42,500
like we should still understand how to

387
00:13:40,400 --> 00:13:44,569
parse<font color="#E5E5E5"> payloads from those clients the</font>

388
00:13:42,500 --> 00:13:46,640
thing on the<font color="#CCCCCC"> right is in a</font><font color="#E5E5E5"> first</font>

389
00:13:44,570 --> 00:13:48,890
<font color="#E5E5E5">generation</font><font color="#CCCCCC"> roku</font><font color="#E5E5E5"> also came out around</font>

390
00:13:46,640 --> 00:13:50,300
2010<font color="#CCCCCC"> and there's probably a</font><font color="#E5E5E5"> bunch of</font>

391
00:13:48,890 --> 00:13:51,980
<font color="#E5E5E5">those stuffed in someone's closet and</font>

392
00:13:50,300 --> 00:13:54,140
same thing<font color="#CCCCCC"> if you plug that</font><font color="#E5E5E5"> in today</font>

393
00:13:51,980 --> 00:13:55,610
like that should boot up and be able<font color="#E5E5E5"> to</font>

394
00:13:54,140 --> 00:13:58,400
<font color="#CCCCCC">sing</font><font color="#E5E5E5"> Netflix or at the</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> least be</font>

395
00:13:55,610 --> 00:14:00,350
able<font color="#E5E5E5"> to talk to some kind of Netflix</font>

396
00:13:58,400 --> 00:14:01,640
server and be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get a firmware</font>

397
00:14:00,350 --> 00:14:04,070
update and we should be able<font color="#CCCCCC"> to</font>

398
00:14:01,640 --> 00:14:06,170
understand those payloads<font color="#E5E5E5"> so you want so</font>

399
00:14:04,070 --> 00:14:09,380
there's plenty of contexts where

400
00:14:06,170 --> 00:14:11,300
updating your IPC mechanism is really

401
00:14:09,380 --> 00:14:12,860
<font color="#E5E5E5">hard or impossible because you've got</font>

402
00:14:11,300 --> 00:14:15,020
clients<font color="#E5E5E5"> out</font><font color="#CCCCCC"> there that you can't readily</font>

403
00:14:12,860 --> 00:14:16,820
update and the thing is even<font color="#CCCCCC"> if</font><font color="#E5E5E5"> you're</font>

404
00:14:15,020 --> 00:14:18,470
<font color="#E5E5E5">not in</font><font color="#CCCCCC"> one of</font><font color="#E5E5E5"> these</font><font color="#CCCCCC"> contexts</font><font color="#E5E5E5"> even</font><font color="#CCCCCC"> if you</font>

405
00:14:16,820 --> 00:14:20,570
do have<font color="#E5E5E5"> full control of both your</font>

406
00:14:18,470 --> 00:14:22,460
<font color="#E5E5E5">clients</font><font color="#CCCCCC"> and your servers it's just an</font>

407
00:14:20,570 --> 00:14:24,590
<font color="#E5E5E5">expensive</font><font color="#CCCCCC"> thing to do if you have to go</font>

408
00:14:22,460 --> 00:14:26,990
update all your<font color="#E5E5E5"> clients like it takes a</font>

409
00:14:24,590 --> 00:14:31,310
lot of someone's time<font color="#E5E5E5"> to replace an IPC</font>

410
00:14:26,990 --> 00:14:33,200
mechanism<font color="#E5E5E5"> so is it worth</font><font color="#CCCCCC"> the effort to</font>

411
00:14:31,310 --> 00:14:35,660
<font color="#E5E5E5">remediate one of these vulnerabilities</font>

412
00:14:33,200 --> 00:14:37,280
<font color="#E5E5E5">that's ultimately the question</font><font color="#CCCCCC"> it's</font>

413
00:14:35,660 --> 00:14:40,219
<font color="#E5E5E5">gonna take a developer like three weeks</font>

414
00:14:37,280 --> 00:14:41,839
of<font color="#E5E5E5"> time to go update a server to</font>

415
00:14:40,220 --> 00:14:43,250
<font color="#E5E5E5">understand some new protocol then go</font>

416
00:14:41,840 --> 00:14:45,050
update all<font color="#E5E5E5"> the clients make sure they're</font>

417
00:14:43,250 --> 00:14:48,590
all really<font color="#E5E5E5"> updated then go take the old</font>

418
00:14:45,050 --> 00:14:50,630
one out<font color="#CCCCCC"> is that we're doing</font><font color="#E5E5E5"> maybe you've</font>

419
00:14:48,590 --> 00:14:51,800
got some vulnerability but it's not

420
00:14:50,630 --> 00:14:54,310
actually exploitable you can't do

421
00:14:51,800 --> 00:14:54,310
<font color="#CCCCCC">anything with it</font>

422
00:15:02,080 --> 00:15:08,360
so how do you<font color="#CCCCCC"> know if your application</font>

423
00:15:06,020 --> 00:15:09,949
is exploitable so there's a few known

424
00:15:08,360 --> 00:15:11,600
exploits in a bunch of<font color="#CCCCCC"> open source</font>

425
00:15:09,950 --> 00:15:13,880
projects<font color="#E5E5E5"> so why so serial is probably</font>

426
00:15:11,600 --> 00:15:16,430
the<font color="#E5E5E5"> most</font><font color="#CCCCCC"> well-known</font><font color="#E5E5E5"> one and that was and</font>

427
00:15:13,880 --> 00:15:17,990
that's<font color="#E5E5E5"> run by</font><font color="#CCCCCC"> fro Hoff the same person</font>

428
00:15:16,430 --> 00:15:20,479
that<font color="#E5E5E5"> started talking</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> these</font>

429
00:15:17,990 --> 00:15:22,370
vulnerabilities<font color="#E5E5E5"> in 2015 and that's got a</font>

430
00:15:20,480 --> 00:15:24,260
lot<font color="#CCCCCC"> of gadget</font><font color="#E5E5E5"> chains that researchers</font>

431
00:15:22,370 --> 00:15:26,300
have<font color="#E5E5E5"> discovered in open source libraries</font>

432
00:15:24,260 --> 00:15:28,160
so if you look at<font color="#E5E5E5"> that</font><font color="#CCCCCC"> project</font><font color="#E5E5E5"> look at</font>

433
00:15:26,300 --> 00:15:31,099
the places<font color="#CCCCCC"> where there are known gadget</font>

434
00:15:28,160 --> 00:15:32,579
chains then you can<font color="#E5E5E5"> look at your</font>

435
00:15:31,100 --> 00:15:33,299
application<font color="#CCCCCC"> determined</font>

436
00:15:32,579 --> 00:15:34,679
they're not it's got<font color="#E5E5E5"> one of those</font>

437
00:15:33,299 --> 00:15:36,239
libraries<font color="#CCCCCC"> and be like</font><font color="#E5E5E5"> okay it's got one</font>

438
00:15:34,679 --> 00:15:38,389
of<font color="#E5E5E5"> those libraries</font><font color="#CCCCCC"> I know that thing's</font>

439
00:15:36,239 --> 00:15:41,699
vulnerable<font color="#E5E5E5"> and that thing is exploitable</font>

440
00:15:38,389 --> 00:15:43,709
<font color="#CCCCCC">marshal SEC is a similar open-source</font>

441
00:15:41,699 --> 00:15:47,069
project<font color="#CCCCCC"> so it's</font><font color="#E5E5E5"> not a wider breadth of</font>

442
00:15:43,709 --> 00:15:49,888
<font color="#E5E5E5">exploits it works it's got some gadget</font>

443
00:15:47,069 --> 00:15:51,299
chains for other<font color="#E5E5E5"> libraries but it's kind</font>

444
00:15:49,889 --> 00:15:54,449
of the<font color="#CCCCCC"> same thing where it's got a bunch</font>

445
00:15:51,299 --> 00:15:56,309
<font color="#E5E5E5">of known gadget chains but isn't going</font>

446
00:15:54,449 --> 00:15:58,559
to<font color="#E5E5E5"> tell you anything specific about</font><font color="#CCCCCC"> your</font>

447
00:15:56,309 --> 00:16:00,629
<font color="#E5E5E5">application</font><font color="#CCCCCC"> it's not</font><font color="#E5E5E5"> going to tell you</font>

448
00:15:58,559 --> 00:16:02,939
are<font color="#E5E5E5"> there gadget chains that</font><font color="#CCCCCC"> are unique</font>

449
00:16:00,629 --> 00:16:04,739
to<font color="#E5E5E5"> my random</font><font color="#CCCCCC"> collection</font><font color="#E5E5E5"> of libraries</font>

450
00:16:02,939 --> 00:16:07,618
<font color="#E5E5E5">that I happen to have on</font><font color="#CCCCCC"> my class path</font>

451
00:16:04,739 --> 00:16:08,639
and for that matter<font color="#CCCCCC"> now that these</font>

452
00:16:07,619 --> 00:16:10,259
things<font color="#E5E5E5"> is going to give you much</font>

453
00:16:08,639 --> 00:16:12,509
information<font color="#E5E5E5"> if you're using some kind of</font>

454
00:16:10,259 --> 00:16:14,040
non-standard<font color="#CCCCCC"> deserialization</font><font color="#E5E5E5"> library</font>

455
00:16:12,509 --> 00:16:16,019
that these things weren't<font color="#E5E5E5"> built around</font>

456
00:16:14,040 --> 00:16:18,660
<font color="#CCCCCC">but which is still</font><font color="#E5E5E5"> potentially dangerous</font>

457
00:16:16,019 --> 00:16:22,049
<font color="#E5E5E5">because it instantiates arbitrary object</font>

458
00:16:18,660 --> 00:16:24,449
types so what tools<font color="#E5E5E5"> are out there so</font>

459
00:16:22,049 --> 00:16:26,459
I've talked<font color="#CCCCCC"> about why so serial Jugal is</font>

460
00:16:24,449 --> 00:16:27,959
another interesting<font color="#CCCCCC"> project</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> allows</font>

461
00:16:26,459 --> 00:16:29,878
you<font color="#E5E5E5"> to programmatically query things</font>

462
00:16:27,959 --> 00:16:31,378
<font color="#E5E5E5">about data types on your class path if</font>

463
00:16:29,879 --> 00:16:33,149
you're manually<font color="#E5E5E5"> building up a gadget</font>

464
00:16:31,379 --> 00:16:34,350
chain one link at<font color="#CCCCCC"> a time and</font><font color="#E5E5E5"> you want to</font>

465
00:16:33,149 --> 00:16:36,179
know for<font color="#CCCCCC"> example what are all the</font>

466
00:16:34,350 --> 00:16:38,910
implementations a map on my<font color="#E5E5E5"> class path</font>

467
00:16:36,179 --> 00:16:40,619
that thing will give you that answer<font color="#CCCCCC"> on</font>

468
00:16:38,910 --> 00:16:42,118
<font color="#CCCCCC">the other</font><font color="#E5E5E5"> hand if there is</font><font color="#CCCCCC"> 5,000</font>

469
00:16:40,619 --> 00:16:44,009
implementations of<font color="#E5E5E5"> map on your class</font>

470
00:16:42,119 --> 00:16:45,419
path that's a lot of<font color="#E5E5E5"> stuff is then sift</font>

471
00:16:44,009 --> 00:16:48,600
through and find out if any<font color="#E5E5E5"> of those do</font>

472
00:16:45,419 --> 00:16:50,429
anything<font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> there's the</font><font color="#E5E5E5"> java d</font>

473
00:16:48,600 --> 00:16:51,839
serialization scanner that's<font color="#E5E5E5"> a burp</font>

474
00:16:50,429 --> 00:16:53,429
suite<font color="#CCCCCC"> plugin that basically uses</font>

475
00:16:51,839 --> 00:16:55,110
<font color="#E5E5E5">payloads from life so serial to</font>

476
00:16:53,429 --> 00:16:57,209
dynamically scan your app and determine

477
00:16:55,110 --> 00:16:59,279
if any<font color="#E5E5E5"> of those payloads work already</font>

478
00:16:57,209 --> 00:17:01,258
<font color="#CCCCCC">mention marshal sec</font><font color="#E5E5E5"> earlier this year</font>

479
00:16:59,279 --> 00:17:03,569
the<font color="#CCCCCC"> mcc group released a burp suite</font>

480
00:17:01,259 --> 00:17:05,279
<font color="#E5E5E5">plugin which</font><font color="#CCCCCC"> again</font><font color="#E5E5E5"> kind of does</font><font color="#CCCCCC"> the same</font>

481
00:17:03,569 --> 00:17:07,019
thing as the other burp suite<font color="#E5E5E5"> plugin but</font>

482
00:17:05,279 --> 00:17:08,699
that one's mainly based on payloads from

483
00:17:07,019 --> 00:17:12,029
<font color="#E5E5E5">you knows</font><font color="#CCCCCC"> mirages work at</font><font color="#E5E5E5"> last week's</font>

484
00:17:08,699 --> 00:17:13,769
blackhat but all<font color="#E5E5E5"> those things</font><font color="#CCCCCC"> don't</font>

485
00:17:12,029 --> 00:17:15,869
<font color="#CCCCCC">really do what I</font><font color="#E5E5E5"> described the last page</font>

486
00:17:13,769 --> 00:17:19,349
<font color="#E5E5E5">tell you something that's unique about</font>

487
00:17:15,869 --> 00:17:21,599
your<font color="#CCCCCC"> application so really what is it</font>

488
00:17:19,349 --> 00:17:23,458
<font color="#E5E5E5">that I'm after so we've got thousands of</font>

489
00:17:21,599 --> 00:17:25,198
<font color="#CCCCCC">applications in our Netflix</font><font color="#E5E5E5"> micro</font>

490
00:17:23,459 --> 00:17:26,939
service ecosystem and when we stumble

491
00:17:25,199 --> 00:17:28,500
upon<font color="#CCCCCC"> one of these vulnerabilities we</font>

492
00:17:26,939 --> 00:17:30,720
really want<font color="#CCCCCC"> to be able to</font><font color="#E5E5E5"> assess</font><font color="#CCCCCC"> the</font>

493
00:17:28,500 --> 00:17:33,269
risk of a vulnerability<font color="#E5E5E5"> we would like to</font>

494
00:17:30,720 --> 00:17:35,100
<font color="#E5E5E5">know how important is</font><font color="#CCCCCC"> it to remediate</font><font color="#E5E5E5"> is</font>

495
00:17:33,269 --> 00:17:36,870
it even exploitable<font color="#E5E5E5"> and if it's</font>

496
00:17:35,100 --> 00:17:40,949
exploitable what kind of exploits

497
00:17:36,870 --> 00:17:42,959
possible<font color="#CCCCCC"> RCEs SRF we'd like to</font><font color="#E5E5E5"> know and</font>

498
00:17:40,950 --> 00:17:44,880
<font color="#E5E5E5">so if we're answering</font><font color="#CCCCCC"> that question we</font>

499
00:17:42,960 --> 00:17:46,590
<font color="#CCCCCC">don't necessarily</font><font color="#E5E5E5"> have to</font><font color="#CCCCCC"> be perfect a</font>

500
00:17:44,880 --> 00:17:48,360
reasonable<font color="#CCCCCC"> overestimation</font>

501
00:17:46,590 --> 00:17:50,100
risk is<font color="#CCCCCC"> still useful and we don't</font>

502
00:17:48,360 --> 00:17:51,959
actually have to<font color="#E5E5E5"> generate payloads</font><font color="#CCCCCC"> if</font>

503
00:17:50,100 --> 00:17:54,570
our goal is<font color="#CCCCCC"> just</font><font color="#E5E5E5"> to understand what</font>

504
00:17:51,960 --> 00:17:56,340
gadget chains are possible<font color="#CCCCCC"> what</font><font color="#E5E5E5"> is a</font>

505
00:17:54,570 --> 00:18:00,149
good starting point<font color="#E5E5E5"> if I was trying to</font>

506
00:17:56,340 --> 00:18:02,100
<font color="#E5E5E5">exploit this so what are the</font>

507
00:18:00,150 --> 00:18:03,779
<font color="#E5E5E5">requirements</font><font color="#CCCCCC"> if I'm going to set out to</font>

508
00:18:02,100 --> 00:18:06,480
<font color="#E5E5E5">build a tool to solve this problem</font>

509
00:18:03,779 --> 00:18:07,770
<font color="#E5E5E5">because like I described tools exist but</font>

510
00:18:06,480 --> 00:18:10,380
they didn't do exactly<font color="#CCCCCC"> what</font><font color="#E5E5E5"> I wanted to</font>

511
00:18:07,770 --> 00:18:12,059
do so<font color="#E5E5E5"> really if I'm not looking for</font>

512
00:18:10,380 --> 00:18:13,740
vulnerabilities<font color="#CCCCCC"> I don't have to find</font>

513
00:18:12,059 --> 00:18:15,149
<font color="#E5E5E5">them</font><font color="#CCCCCC"> I'm only</font><font color="#E5E5E5"> gonna use this if I</font>

514
00:18:13,740 --> 00:18:17,039
already<font color="#CCCCCC"> know my application as a</font>

515
00:18:15,150 --> 00:18:19,529
<font color="#E5E5E5">vulnerability but it needs to be able to</font>

516
00:18:17,039 --> 00:18:21,179
<font color="#E5E5E5">look at the entire class</font><font color="#CCCCCC"> path so all the</font>

517
00:18:19,529 --> 00:18:23,610
transitive dependencies I'm pulling in

518
00:18:21,179 --> 00:18:24,960
and be able<font color="#E5E5E5"> to tell me if there's any</font>

519
00:18:23,610 --> 00:18:28,049
kind<font color="#CCCCCC"> of gadget chain that potentially</font>

520
00:18:24,960 --> 00:18:29,580
uses<font color="#E5E5E5"> a bunch of</font><font color="#CCCCCC"> those libraries and it</font>

521
00:18:28,049 --> 00:18:31,168
should operate<font color="#E5E5E5"> on</font><font color="#CCCCCC"> bytecode so</font><font color="#E5E5E5"> that I</font>

522
00:18:29,580 --> 00:18:33,299
don't<font color="#CCCCCC"> have to understand groovy</font><font color="#E5E5E5"> and</font>

523
00:18:31,169 --> 00:18:34,770
closure in Kotlin and any other JVM

524
00:18:33,299 --> 00:18:37,020
language<font color="#E5E5E5"> that's been invented in the</font>

525
00:18:34,770 --> 00:18:39,059
<font color="#E5E5E5">last few</font><font color="#CCCCCC"> years and</font><font color="#E5E5E5"> we might even be</font>

526
00:18:37,020 --> 00:18:41,190
including proprietary<font color="#E5E5E5"> third-party things</font>

527
00:18:39,059 --> 00:18:42,809
which again<font color="#E5E5E5"> maybe I'm not even using</font>

528
00:18:41,190 --> 00:18:44,370
<font color="#E5E5E5">directly but if it's on the class path</font>

529
00:18:42,809 --> 00:18:47,399
it's potentially usable in a gadget

530
00:18:44,370 --> 00:18:49,678
chain so I really want something<font color="#E5E5E5"> that</font>

531
00:18:47,399 --> 00:18:53,939
<font color="#E5E5E5">will operate on byte codes inside my</font>

532
00:18:49,679 --> 00:18:56,370
application<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that was the goal that I</font>

533
00:18:53,940 --> 00:18:57,960
<font color="#CCCCCC">set out to</font><font color="#E5E5E5"> achieve and in doing so</font><font color="#CCCCCC"> I</font>

534
00:18:56,370 --> 00:19:00,449
created this tool<font color="#E5E5E5"> called that I</font><font color="#CCCCCC"> called</font>

535
00:18:57,960 --> 00:19:01,770
gadget inspector<font color="#CCCCCC"> so what it</font><font color="#E5E5E5"> does is</font>

536
00:19:00,450 --> 00:19:03,690
exactly<font color="#E5E5E5"> what I've</font><font color="#CCCCCC"> just described it</font>

537
00:19:01,770 --> 00:19:05,850
analyzes<font color="#E5E5E5"> the byte codes of your</font>

538
00:19:03,690 --> 00:19:09,690
application<font color="#E5E5E5"> and its entire class path in</font>

539
00:19:05,850 --> 00:19:12,779
an attempt to<font color="#E5E5E5"> find gadget chains so how</font>

540
00:19:09,690 --> 00:19:14,640
does<font color="#E5E5E5"> it work well it takes in your</font>

541
00:19:12,779 --> 00:19:15,960
application be it in<font color="#E5E5E5"> war format or a</font>

542
00:19:14,640 --> 00:19:17,700
collection of<font color="#E5E5E5"> jars kind of whatever</font>

543
00:19:15,960 --> 00:19:19,710
<font color="#E5E5E5">makes</font><font color="#CCCCCC"> sense for your application</font><font color="#E5E5E5"> does</font>

544
00:19:17,700 --> 00:19:21,299
some analysis<font color="#CCCCCC"> and then spits out what it</font>

545
00:19:19,710 --> 00:19:23,250
<font color="#E5E5E5">thinks are possible gadget chains and</font>

546
00:19:21,299 --> 00:19:26,250
the gadget chain here is basically<font color="#CCCCCC"> just</font>

547
00:19:23,250 --> 00:19:28,080
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to be a link of method invocations</font>

548
00:19:26,250 --> 00:19:29,490
where we know that<font color="#CCCCCC"> this method can call</font>

549
00:19:28,080 --> 00:19:30,899
this<font color="#E5E5E5"> one and this</font><font color="#CCCCCC"> one and</font><font color="#E5E5E5"> this one</font><font color="#CCCCCC"> and</font>

550
00:19:29,490 --> 00:19:33,750
then it<font color="#CCCCCC"> gets down to something</font>

551
00:19:30,899 --> 00:19:35,580
potentially interesting so<font color="#CCCCCC"> let's dig in</font>

552
00:19:33,750 --> 00:19:37,380
a little<font color="#E5E5E5"> bit to understand exactly what</font>

553
00:19:35,580 --> 00:19:40,408
this does and what kind of gadget chains

554
00:19:37,380 --> 00:19:42,539
it can produce so the first step is just

555
00:19:40,409 --> 00:19:44,909
<font color="#E5E5E5">to enumerate everything we have on the</font>

556
00:19:42,539 --> 00:19:47,039
class<font color="#E5E5E5"> path and then determine its class</font>

557
00:19:44,909 --> 00:19:49,470
hierarchy what methods<font color="#E5E5E5"> override other</font>

558
00:19:47,039 --> 00:19:51,059
ones and things like<font color="#CCCCCC"> that</font><font color="#E5E5E5"> that's not</font><font color="#CCCCCC"> a</font>

559
00:19:49,470 --> 00:19:52,320
terribly difficult<font color="#E5E5E5"> problem to solve</font>

560
00:19:51,059 --> 00:19:53,428
<font color="#E5E5E5">that's something that you can even do</font>

561
00:19:52,320 --> 00:19:55,559
with like plain old<font color="#E5E5E5"> Java reflection</font>

562
00:19:53,429 --> 00:19:57,179
api's but we really want to<font color="#E5E5E5"> just</font>

563
00:19:55,559 --> 00:19:58,770
<font color="#E5E5E5">enumerate all that stuff because</font><font color="#CCCCCC"> it's</font>

564
00:19:57,179 --> 00:19:59,879
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to be really</font><font color="#E5E5E5"> relevant</font><font color="#CCCCCC"> for the next</font>

565
00:19:58,770 --> 00:20:02,158
few<font color="#CCCCCC"> steps</font>

566
00:19:59,879 --> 00:20:03,599
but something<font color="#E5E5E5"> that's really useful to do</font>

567
00:20:02,159 --> 00:20:05,399
in<font color="#E5E5E5"> this context is if you're analyzing</font>

568
00:20:03,599 --> 00:20:07,739
<font color="#E5E5E5">things in the</font><font color="#CCCCCC"> byte</font><font color="#E5E5E5"> code level as opposed</font>

569
00:20:05,399 --> 00:20:09,478
to<font color="#CCCCCC"> using dollar reflection api's</font><font color="#E5E5E5"> is that</font>

570
00:20:07,739 --> 00:20:11,849
you can really<font color="#E5E5E5"> dig in</font><font color="#CCCCCC"> and understand</font>

571
00:20:09,479 --> 00:20:12,719
<font color="#E5E5E5">inner inner inner classes which are the</font>

572
00:20:11,849 --> 00:20:14,489
kind of things<font color="#CCCCCC"> that end up</font><font color="#E5E5E5"> getting</font>

573
00:20:12,719 --> 00:20:19,139
produced<font color="#E5E5E5"> when you use some of these jvm</font>

574
00:20:14,489 --> 00:20:20,669
languages like<font color="#CCCCCC"> scholar</font><font color="#E5E5E5"> closure so the</font>

575
00:20:19,139 --> 00:20:23,008
<font color="#E5E5E5">next step is where things start getting</font>

576
00:20:20,669 --> 00:20:24,509
<font color="#E5E5E5">a</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit interesting where</font><font color="#CCCCCC"> I want</font><font color="#E5E5E5"> to</font>

577
00:20:23,009 --> 00:20:27,089
discover what I call<font color="#E5E5E5"> pass through data</font>

578
00:20:24,509 --> 00:20:29,489
flow<font color="#E5E5E5"> and the goal of</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> step is</font><font color="#CCCCCC"> to</font>

579
00:20:27,089 --> 00:20:31,259
understand<font color="#CCCCCC"> if an attacker is able</font><font color="#E5E5E5"> to</font>

580
00:20:29,489 --> 00:20:33,989
control some<font color="#CCCCCC"> arguments that</font><font color="#E5E5E5"> gets passed</font>

581
00:20:31,259 --> 00:20:37,319
into<font color="#E5E5E5"> a function can the attacker control</font>

582
00:20:33,989 --> 00:20:38,669
the return value<font color="#E5E5E5"> of that method</font><font color="#CCCCCC"> and we</font>

583
00:20:37,319 --> 00:20:41,039
basically<font color="#CCCCCC"> just want that so that we can</font>

584
00:20:38,669 --> 00:20:43,109
<font color="#E5E5E5">do the next step where we understand</font>

585
00:20:41,039 --> 00:20:45,809
what methods call other methods<font color="#CCCCCC"> so</font>

586
00:20:43,109 --> 00:20:46,739
that's what we do in this step<font color="#E5E5E5"> and we</font>

587
00:20:45,809 --> 00:20:48,239
basically<font color="#E5E5E5"> just do a little</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> of</font>

588
00:20:46,739 --> 00:20:50,669
symbolic execution where we<font color="#E5E5E5"> step through</font>

589
00:20:48,239 --> 00:20:53,249
<font color="#E5E5E5">the byte codes one instruction at a time</font>

590
00:20:50,669 --> 00:20:55,769
<font color="#E5E5E5">and then</font><font color="#CCCCCC"> whenever</font><font color="#E5E5E5"> we return a value we</font>

591
00:20:53,249 --> 00:20:58,589
will output that so there's one

592
00:20:55,769 --> 00:21:00,899
<font color="#E5E5E5">assumption here that I make in this</font>

593
00:20:58,589 --> 00:21:02,849
analysis which is<font color="#E5E5E5"> basically that if any</font>

594
00:21:00,899 --> 00:21:04,738
object is tainted<font color="#E5E5E5"> and in this case I</font>

595
00:21:02,849 --> 00:21:07,139
<font color="#CCCCCC">really just</font><font color="#E5E5E5"> buy taint I mean attacker</font>

596
00:21:04,739 --> 00:21:08,849
<font color="#E5E5E5">controllable then everything about that</font>

597
00:21:07,139 --> 00:21:10,619
<font color="#E5E5E5">object</font><font color="#CCCCCC"> is attacked uncontrollable and</font>

598
00:21:08,849 --> 00:21:13,319
that makes sense<font color="#E5E5E5"> in this context because</font>

599
00:21:10,619 --> 00:21:14,939
<font color="#E5E5E5">in a DC realization vulnerability if an</font>

600
00:21:13,319 --> 00:21:16,709
attacker can control an object it's

601
00:21:14,940 --> 00:21:18,029
because it came out<font color="#CCCCCC"> of that</font><font color="#E5E5E5"> payload so</font>

602
00:21:16,709 --> 00:21:20,069
they control everything about<font color="#E5E5E5"> that</font>

603
00:21:18,029 --> 00:21:21,959
<font color="#CCCCCC">object there are places</font><font color="#E5E5E5"> where that could</font>

604
00:21:20,069 --> 00:21:24,959
<font color="#E5E5E5">break down don't get me wrong but</font><font color="#CCCCCC"> for</font>

605
00:21:21,959 --> 00:21:28,169
our purposes it's basically always<font color="#E5E5E5"> going</font>

606
00:21:24,959 --> 00:21:30,839
to be true<font color="#E5E5E5"> so in this case we can</font>

607
00:21:28,169 --> 00:21:32,279
determine that<font color="#E5E5E5"> and what this funky</font>

608
00:21:30,839 --> 00:21:35,190
syntax<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the top right means is that</font>

609
00:21:32,279 --> 00:21:36,779
the<font color="#CCCCCC"> if an attacker can control argument</font>

610
00:21:35,190 --> 00:21:39,329
<font color="#CCCCCC">zero which in this case is the</font><font color="#E5E5E5"> implicit</font>

611
00:21:36,779 --> 00:21:41,279
this of the function then the return

612
00:21:39,329 --> 00:21:43,019
value is<font color="#CCCCCC"> also tacker controllable so</font>

613
00:21:41,279 --> 00:21:45,869
basically<font color="#E5E5E5"> this means the</font><font color="#CCCCCC"> return value is</font>

614
00:21:43,019 --> 00:21:47,099
influenced<font color="#E5E5E5"> by argument</font><font color="#CCCCCC"> zero and here we</font>

615
00:21:45,869 --> 00:21:48,899
<font color="#E5E5E5">can just</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> that directly we're</font>

616
00:21:47,099 --> 00:21:51,299
<font color="#E5E5E5">returning this top value and if we</font>

617
00:21:48,899 --> 00:21:54,329
<font color="#E5E5E5">assume this is tainted then if we assume</font>

618
00:21:51,299 --> 00:21:56,668
every member value is tainted then this

619
00:21:54,329 --> 00:21:58,469
thought value would<font color="#E5E5E5"> be</font><font color="#CCCCCC"> tainted so one</font>

620
00:21:56,669 --> 00:22:00,269
more example<font color="#CCCCCC"> here's something a little</font>

621
00:21:58,469 --> 00:22:02,429
bit trickier it's got an<font color="#CCCCCC"> F else in it</font>

622
00:22:00,269 --> 00:22:03,989
<font color="#CCCCCC">but it's either just returning the</font>

623
00:22:02,429 --> 00:22:05,729
argument<font color="#E5E5E5"> as passed in or calling</font>

624
00:22:03,989 --> 00:22:08,429
<font color="#E5E5E5">functions on</font><font color="#CCCCCC"> VOC on some other argument</font>

625
00:22:05,729 --> 00:22:09,479
and this gets us<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> next assumption</font>

626
00:22:08,429 --> 00:22:11,069
that<font color="#E5E5E5"> I make in the course of this</font>

627
00:22:09,479 --> 00:22:13,940
analysis and<font color="#E5E5E5"> this is something that</font>

628
00:22:11,069 --> 00:22:15,710
<font color="#E5E5E5">makes the analysis super easy if</font>

629
00:22:13,940 --> 00:22:17,000
you are interested in static analysis or

630
00:22:15,710 --> 00:22:18,769
symbolic execution or something

631
00:22:17,000 --> 00:22:20,659
<font color="#E5E5E5">determining what branch conditions are</font>

632
00:22:18,769 --> 00:22:23,629
satisfiable tends to be the hardest

633
00:22:20,659 --> 00:22:25,250
<font color="#E5E5E5">problem</font><font color="#CCCCCC"> we sidestep that entirely and</font>

634
00:22:23,629 --> 00:22:26,959
<font color="#CCCCCC">just</font><font color="#E5E5E5"> assume that any branch condition is</font>

635
00:22:25,250 --> 00:22:30,080
satisfiable<font color="#CCCCCC"> this is probably one of</font><font color="#E5E5E5"> the</font>

636
00:22:26,960 --> 00:22:31,610
weakest assumptions<font color="#CCCCCC"> that I make in the</font>

637
00:22:30,080 --> 00:22:33,889
<font color="#E5E5E5">course</font><font color="#CCCCCC"> of this analysis</font><font color="#E5E5E5"> but it's also</font>

638
00:22:31,610 --> 00:22:35,658
most<font color="#E5E5E5"> of the time totally</font><font color="#CCCCCC"> reasonable</font>

639
00:22:33,889 --> 00:22:37,129
because<font color="#E5E5E5"> in practice any branch</font>

640
00:22:35,659 --> 00:22:39,649
conditions we end up encountering in

641
00:22:37,129 --> 00:22:41,240
these<font color="#E5E5E5"> methods are influenced by member</font>

642
00:22:39,649 --> 00:22:43,070
values and arguments getting passed in

643
00:22:41,240 --> 00:22:44,299
and all<font color="#E5E5E5"> of that ends up being attacker</font>

644
00:22:43,070 --> 00:22:45,769
controllable because<font color="#E5E5E5"> we're in this</font>

645
00:22:44,299 --> 00:22:48,830
context where we're deserializing

646
00:22:45,769 --> 00:22:51,350
payloads inside of methods of objects

647
00:22:48,830 --> 00:22:52,879
<font color="#CCCCCC">that</font><font color="#E5E5E5"> are from</font><font color="#CCCCCC"> that payload</font><font color="#E5E5E5"> so in general</font>

648
00:22:51,350 --> 00:22:54,559
whenever we want<font color="#E5E5E5"> a branch condition to</font>

649
00:22:52,879 --> 00:22:56,959
be satisfied<font color="#CCCCCC"> we can usually achieve it</font>

650
00:22:54,559 --> 00:22:58,190
<font color="#E5E5E5">so in this case we</font><font color="#CCCCCC"> just look at all the</font>

651
00:22:56,960 --> 00:22:59,990
different<font color="#E5E5E5"> outcomes of</font><font color="#CCCCCC"> that branch</font>

652
00:22:58,190 --> 00:23:01,549
condition<font color="#E5E5E5"> so in this case where we</font>

653
00:22:59,990 --> 00:23:03,470
<font color="#E5E5E5">returned the argument directly we see</font>

654
00:23:01,549 --> 00:23:05,240
that the first<font color="#CCCCCC"> argument goes out into</font>

655
00:23:03,470 --> 00:23:08,710
<font color="#CCCCCC">the</font><font color="#E5E5E5"> return value in the second one</font><font color="#CCCCCC"> we</font>

656
00:23:05,240 --> 00:23:11,029
call F dot<font color="#E5E5E5"> invoke and then using the</font>

657
00:23:08,710 --> 00:23:12,559
result from the above step where<font color="#E5E5E5"> we see</font>

658
00:23:11,029 --> 00:23:14,509
<font color="#E5E5E5">function constants return values</font>

659
00:23:12,559 --> 00:23:15,769
<font color="#CCCCCC">influenced by argument zero</font><font color="#E5E5E5"> we end up</font>

660
00:23:14,509 --> 00:23:17,299
deriving that<font color="#CCCCCC"> the return value</font><font color="#E5E5E5"> of that</font>

661
00:23:15,769 --> 00:23:21,049
is<font color="#CCCCCC"> also potentially attacked</font><font color="#E5E5E5"> and</font>

662
00:23:17,299 --> 00:23:23,779
controllable from<font color="#E5E5E5"> argument zero</font><font color="#CCCCCC"> so next</font>

663
00:23:21,049 --> 00:23:25,370
up<font color="#E5E5E5"> step</font><font color="#CCCCCC"> three is basically the exact</font>

664
00:23:23,779 --> 00:23:27,200
<font color="#E5E5E5">same</font><font color="#CCCCCC"> thing but instead of carrying about</font>

665
00:23:25,370 --> 00:23:29,330
return values we instead care about what

666
00:23:27,200 --> 00:23:31,309
methods get<font color="#E5E5E5"> invoked and the goal there</font>

667
00:23:29,330 --> 00:23:33,379
is to<font color="#CCCCCC"> build</font><font color="#E5E5E5"> up the call graph of knowing</font>

668
00:23:31,309 --> 00:23:34,668
this method invokes that<font color="#E5E5E5"> one because</font>

669
00:23:33,379 --> 00:23:36,830
<font color="#E5E5E5">that's how you start building up chains</font>

670
00:23:34,669 --> 00:23:39,019
you want to know one method a calls

671
00:23:36,830 --> 00:23:40,789
<font color="#E5E5E5">method B calls</font><font color="#CCCCCC"> method C</font><font color="#E5E5E5"> and you want to</font>

672
00:23:39,019 --> 00:23:42,470
know when<font color="#E5E5E5"> attacker control input flows</font>

673
00:23:40,789 --> 00:23:45,980
through all<font color="#CCCCCC"> of those so we basically</font><font color="#E5E5E5"> do</font>

674
00:23:42,470 --> 00:23:47,899
exactly<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same analysis</font><font color="#E5E5E5"> but this time</font>

675
00:23:45,980 --> 00:23:50,419
you want to<font color="#E5E5E5"> know when some argument</font>

676
00:23:47,899 --> 00:23:52,219
inputs like argument<font color="#CCCCCC"> zero flows into the</font>

677
00:23:50,419 --> 00:23:54,320
<font color="#E5E5E5">invocation of some function</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> what</font>

678
00:23:52,220 --> 00:23:56,210
argument index that<font color="#E5E5E5"> flows into so again</font>

679
00:23:54,320 --> 00:23:57,918
<font color="#E5E5E5">some kind of weird funky syntax</font><font color="#CCCCCC"> I just</font>

680
00:23:56,210 --> 00:23:59,809
invented<font color="#CCCCCC"> for the purpose of</font><font color="#E5E5E5"> this</font>

681
00:23:57,919 --> 00:24:02,330
analysis here<font color="#CCCCCC"> what all this means</font><font color="#E5E5E5"> is</font>

682
00:23:59,809 --> 00:24:04,250
<font color="#E5E5E5">that argument</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> flows into function</font>

683
00:24:02,330 --> 00:24:06,259
<font color="#CCCCCC">invoke at argument</font><font color="#E5E5E5"> one and in this case</font>

684
00:24:04,250 --> 00:24:08,240
that's happening<font color="#E5E5E5"> literally because we're</font>

685
00:24:06,259 --> 00:24:10,720
passing this in as argument<font color="#E5E5E5"> one to</font>

686
00:24:08,240 --> 00:24:14,809
function invoke and then similarly<font color="#E5E5E5"> we</font>

687
00:24:10,720 --> 00:24:17,179
<font color="#CCCCCC">know that the</font><font color="#E5E5E5"> F comes out of that closer</font>

688
00:24:14,809 --> 00:24:19,070
map we know that closer map is<font color="#CCCCCC"> or is</font>

689
00:24:17,179 --> 00:24:21,379
controllable<font color="#E5E5E5"> if you control the this</font>

690
00:24:19,070 --> 00:24:23,418
argument<font color="#E5E5E5"> so we know F is attacker</font>

691
00:24:21,379 --> 00:24:25,009
controllable so<font color="#E5E5E5"> F which is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> implicit</font>

692
00:24:23,419 --> 00:24:27,470
this the<font color="#E5E5E5"> function invoke is also</font>

693
00:24:25,009 --> 00:24:29,240
attacker controllable so

694
00:24:27,470 --> 00:24:30,940
here's just one more example<font color="#E5E5E5"> using that</font>

695
00:24:29,240 --> 00:24:33,169
compose function<font color="#E5E5E5"> from the previous slide</font>

696
00:24:30,940 --> 00:24:34,850
<font color="#CCCCCC">and</font><font color="#E5E5E5"> basically you just</font><font color="#CCCCCC"> run through</font>

697
00:24:33,169 --> 00:24:37,250
<font color="#CCCCCC">exactly</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> same thing so argument</font><font color="#E5E5E5"> one</font>

698
00:24:34,850 --> 00:24:39,230
gets passed in as argument<font color="#E5E5E5"> one there one</font>

699
00:24:37,250 --> 00:24:42,110
gets passed in is argument<font color="#E5E5E5"> zero the</font>

700
00:24:39,230 --> 00:24:44,690
implicit this and then using the last

701
00:24:42,110 --> 00:24:46,850
<font color="#CCCCCC">step knowing</font><font color="#E5E5E5"> that you</font><font color="#CCCCCC"> return value is</font>

702
00:24:44,690 --> 00:24:49,610
<font color="#E5E5E5">potentially attacker controllable we can</font>

703
00:24:46,850 --> 00:24:51,590
derive<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the return value gets passed</font>

704
00:24:49,610 --> 00:24:53,149
in as an attacker control value<font color="#E5E5E5"> again</font>

705
00:24:51,590 --> 00:24:55,939
assuming argument<font color="#CCCCCC"> 0s attacker</font>

706
00:24:53,150 --> 00:24:57,559
controllable<font color="#E5E5E5"> so this is actually I feel</font>

707
00:24:55,940 --> 00:25:00,559
like harder<font color="#E5E5E5"> to follow on a slide deck</font>

708
00:24:57,559 --> 00:25:03,139
like<font color="#CCCCCC"> this</font><font color="#E5E5E5"> if you walk</font><font color="#CCCCCC"> through the codes</font>

709
00:25:00,559 --> 00:25:05,149
in the tool it's actually just you

710
00:25:03,140 --> 00:25:06,740
execute<font color="#E5E5E5"> bytecode one at a time and do</font>

711
00:25:05,150 --> 00:25:08,630
what it<font color="#E5E5E5"> says and then</font><font color="#CCCCCC"> you output</font><font color="#E5E5E5"> when</font>

712
00:25:06,740 --> 00:25:11,059
<font color="#E5E5E5">you see a method call</font><font color="#CCCCCC"> so it's actually</font>

713
00:25:08,630 --> 00:25:14,330
<font color="#E5E5E5">kind</font><font color="#CCCCCC"> of easier to follow</font><font color="#E5E5E5"> in detail then</font>

714
00:25:11,059 --> 00:25:16,280
at this<font color="#CCCCCC"> high-level</font><font color="#E5E5E5"> alright so step four</font>

715
00:25:14,330 --> 00:25:17,480
if you're<font color="#CCCCCC"> getting a little</font><font color="#E5E5E5"> awesome</font>

716
00:25:16,280 --> 00:25:19,220
<font color="#CCCCCC">worried this is completely independent</font>

717
00:25:17,480 --> 00:25:21,169
of all the other<font color="#CCCCCC"> steps step four is</font>

718
00:25:19,220 --> 00:25:23,659
really<font color="#E5E5E5"> simple</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> just want to enumerate</font>

719
00:25:21,169 --> 00:25:25,280
<font color="#E5E5E5">entry points for gadget chains and this</font>

720
00:25:23,659 --> 00:25:27,799
<font color="#E5E5E5">is basically new ring entry points using</font>

721
00:25:25,280 --> 00:25:30,500
<font color="#E5E5E5">known tricks and as an example we know</font>

722
00:25:27,799 --> 00:25:31,639
that<font color="#E5E5E5"> hash code is an entry point</font><font color="#CCCCCC"> because</font>

723
00:25:30,500 --> 00:25:33,169
of<font color="#CCCCCC"> what I described</font><font color="#E5E5E5"> on those previous</font>

724
00:25:31,640 --> 00:25:34,669
<font color="#CCCCCC">slides</font><font color="#E5E5E5"> we know we can wrap</font><font color="#CCCCCC"> it in a hash</font>

725
00:25:33,169 --> 00:25:37,760
map<font color="#E5E5E5"> and therefore to get</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> hash code</font>

726
00:25:34,669 --> 00:25:39,980
so this is one of<font color="#CCCCCC"> the other limitations</font>

727
00:25:37,760 --> 00:25:42,770
of this analysis<font color="#E5E5E5"> is that it</font><font color="#CCCCCC"> relies on</font>

728
00:25:39,980 --> 00:25:45,260
some known tricks<font color="#E5E5E5"> now the hash</font><font color="#CCCCCC"> mapping</font>

729
00:25:42,770 --> 00:25:46,668
<font color="#E5E5E5">wrapping with its matching method</font><font color="#CCCCCC"> and</font>

730
00:25:45,260 --> 00:25:48,590
calling hash code<font color="#E5E5E5"> we've actually</font><font color="#CCCCCC"> be able</font>

731
00:25:46,669 --> 00:25:51,260
<font color="#E5E5E5">to derive</font><font color="#CCCCCC"> from those method invocations</font>

732
00:25:48,590 --> 00:25:53,389
<font color="#CCCCCC">in the previous step but there's other</font>

733
00:25:51,260 --> 00:25:54,799
neat tricks that<font color="#E5E5E5"> researchers</font><font color="#CCCCCC"> have come</font>

734
00:25:53,390 --> 00:25:56,720
up<font color="#CCCCCC"> with like wrapping</font><font color="#E5E5E5"> things in a</font>

735
00:25:54,799 --> 00:25:58,460
dynamic proxy which gets you into an

736
00:25:56,720 --> 00:26:00,230
invocation handler<font color="#CCCCCC"> dot invoke method</font>

737
00:25:58,460 --> 00:26:02,210
that you wouldn't be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to derive</font><font color="#CCCCCC"> from</font>

738
00:26:00,230 --> 00:26:04,039
<font color="#E5E5E5">this analysis because</font><font color="#CCCCCC"> that sort of built</font>

739
00:26:02,210 --> 00:26:07,070
into<font color="#E5E5E5"> how the JVM works with these</font>

740
00:26:04,039 --> 00:26:09,440
dynamic proxies so there's definitely<font color="#CCCCCC"> if</font>

741
00:26:07,070 --> 00:26:11,210
as researchers come up with other clever

742
00:26:09,440 --> 00:26:13,820
tricks for entry points<font color="#E5E5E5"> into a gadget</font>

743
00:26:11,210 --> 00:26:15,559
chain<font color="#CCCCCC"> this this tool could</font><font color="#E5E5E5"> be enhanced</font>

744
00:26:13,820 --> 00:26:17,689
<font color="#E5E5E5">with and potentially find some more</font>

745
00:26:15,559 --> 00:26:18,770
gadget chains<font color="#E5E5E5"> but that's all this</font><font color="#CCCCCC"> does</font>

746
00:26:17,690 --> 00:26:20,120
<font color="#CCCCCC">is it basically looks at method</font>

747
00:26:18,770 --> 00:26:22,580
signatures<font color="#E5E5E5"> and it's like I know that's</font>

748
00:26:20,120 --> 00:26:25,189
an entry point<font color="#CCCCCC"> all right so the last</font>

749
00:26:22,580 --> 00:26:28,820
<font color="#E5E5E5">step is just putting it all together we</font>

750
00:26:25,190 --> 00:26:30,740
<font color="#E5E5E5">have this graph call</font><font color="#CCCCCC"> we have this call</font>

751
00:26:28,820 --> 00:26:32,689
graph of method invocations<font color="#E5E5E5"> and what</font>

752
00:26:30,740 --> 00:26:35,210
methods invoke other ones we have<font color="#E5E5E5"> entry</font>

753
00:26:32,690 --> 00:26:37,190
points<font color="#E5E5E5"> so literally</font><font color="#CCCCCC"> all we</font><font color="#E5E5E5"> do now is a</font>

754
00:26:35,210 --> 00:26:39,490
breadth-first search through<font color="#E5E5E5"> this call</font>

755
00:26:37,190 --> 00:26:41,389
graph starting<font color="#E5E5E5"> at these entry points and</font>

756
00:26:39,490 --> 00:26:43,369
output a gadget chain

757
00:26:41,389 --> 00:26:45,320
when we reach an interesting method<font color="#E5E5E5"> so</font>

758
00:26:43,369 --> 00:26:46,849
let's just walk<font color="#CCCCCC"> through</font><font color="#E5E5E5"> this basically</font>

759
00:26:45,320 --> 00:26:48,769
<font color="#E5E5E5">coming up with that gadget chain I had</font>

760
00:26:46,849 --> 00:26:51,589
<font color="#E5E5E5">from one of the first</font><font color="#CCCCCC"> slides so</font><font color="#E5E5E5"> we have</font>

761
00:26:48,769 --> 00:26:53,389
this<font color="#E5E5E5"> starting</font><font color="#CCCCCC"> point and then we have all</font>

762
00:26:51,589 --> 00:26:55,070
those method invocations there where we

763
00:26:53,389 --> 00:26:57,678
call<font color="#E5E5E5"> function</font><font color="#CCCCCC"> dot invoke and pass an</font>

764
00:26:55,070 --> 00:26:59,839
argument<font color="#CCCCCC"> 1 or argument 0</font><font color="#E5E5E5"> and so the</font><font color="#CCCCCC"> next</font>

765
00:26:57,679 --> 00:27:01,969
assumption<font color="#E5E5E5"> I make here is that</font><font color="#CCCCCC"> we can</font>

766
00:26:59,839 --> 00:27:03,950
jump to<font color="#CCCCCC"> any method implementation we</font>

767
00:27:01,969 --> 00:27:06,289
choose as long<font color="#E5E5E5"> as it's in a serializable</font>

768
00:27:03,950 --> 00:27:07,909
class and again<font color="#E5E5E5"> this is just because</font>

769
00:27:06,289 --> 00:27:10,969
we're in<font color="#CCCCCC"> this context where an attacker</font>

770
00:27:07,909 --> 00:27:13,309
controls<font color="#E5E5E5"> all of</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> methods and what</font>

771
00:27:10,969 --> 00:27:16,099
class gets instantiated as one<font color="#E5E5E5"> of those</font>

772
00:27:13,309 --> 00:27:17,749
member values<font color="#E5E5E5"> so this is literally how</font>

773
00:27:16,099 --> 00:27:20,239
you construct those gadget chains which

774
00:27:17,749 --> 00:27:23,539
is the attacker specifies what class

775
00:27:20,239 --> 00:27:25,940
type you<font color="#CCCCCC"> should supply as these members</font>

776
00:27:23,539 --> 00:27:27,469
so what so when we enumerate all<font color="#CCCCCC"> the</font>

777
00:27:25,940 --> 00:27:29,779
different places we can go to in<font color="#E5E5E5"> this</font>

778
00:27:27,469 --> 00:27:35,450
graph<font color="#E5E5E5"> we choose every of mendacious</font><font color="#CCCCCC"> to</font>

779
00:27:29,779 --> 00:27:38,539
start<font color="#E5E5E5"> our graph search so as an example</font>

780
00:27:35,450 --> 00:27:40,249
<font color="#CCCCCC">using that method call we might</font><font color="#E5E5E5"> include</font>

781
00:27:38,539 --> 00:27:42,200
function compose<font color="#E5E5E5"> out invoke as one</font>

782
00:27:40,249 --> 00:27:43,999
<font color="#E5E5E5">particular</font><font color="#CCCCCC"> mentation</font><font color="#E5E5E5"> you look at all the</font>

783
00:27:42,200 --> 00:27:45,379
things<font color="#CCCCCC"> that invokes and as we are</font>

784
00:27:43,999 --> 00:27:47,269
<font color="#CCCCCC">walking through</font><font color="#E5E5E5"> this we say all</font><font color="#CCCCCC"> right</font>

785
00:27:45,379 --> 00:27:49,939
while we might<font color="#E5E5E5"> choose the eval</font><font color="#CCCCCC"> function</font>

786
00:27:47,269 --> 00:27:52,879
<font color="#E5E5E5">as the implementation</font><font color="#CCCCCC"> we invoke here and</font>

787
00:27:49,940 --> 00:27:54,829
then inside that<font color="#E5E5E5"> eval function we know</font>

788
00:27:52,879 --> 00:27:56,509
that it calls runtime<font color="#E5E5E5"> exec and then you</font>

789
00:27:54,829 --> 00:27:58,279
end up<font color="#CCCCCC"> with this gadget</font><font color="#E5E5E5"> chain because we</font>

790
00:27:56,509 --> 00:28:00,499
know runtime exec is interesting you<font color="#E5E5E5"> can</font>

791
00:27:58,279 --> 00:28:02,389
invoke arbitrary code with it<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is</font>

792
00:28:00,499 --> 00:28:03,829
how the tool<font color="#E5E5E5"> ends up outputting a bunch</font>

793
00:28:02,389 --> 00:28:08,629
of<font color="#E5E5E5"> gadget chains it discovers some of</font>

794
00:28:03,829 --> 00:28:10,070
the class<font color="#CCCCCC"> paths so the last limitation</font>

795
00:28:08,629 --> 00:28:12,139
that<font color="#CCCCCC"> I'll describe is that it</font><font color="#E5E5E5"> relies on</font>

796
00:28:10,070 --> 00:28:14,029
some known interesting<font color="#E5E5E5"> sink so obviously</font>

797
00:28:12,139 --> 00:28:15,228
runtime exec is one we know about<font color="#E5E5E5"> and</font>

798
00:28:14,029 --> 00:28:16,729
there's a whole<font color="#E5E5E5"> list of other</font>

799
00:28:15,229 --> 00:28:18,139
interesting ones that have<font color="#E5E5E5"> been built</font>

800
00:28:16,729 --> 00:28:20,269
<font color="#CCCCCC">into</font><font color="#E5E5E5"> your gadget inspector</font><font color="#CCCCCC"> so things</font>

801
00:28:18,139 --> 00:28:23,658
like opening files writing files opening

802
00:28:20,269 --> 00:28:26,389
URLs doing<font color="#CCCCCC"> dns lookups terminating the</font>

803
00:28:23,659 --> 00:28:28,429
JVM lots of interesting<font color="#CCCCCC"> syncs</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> exist</font>

804
00:28:26,389 --> 00:28:30,049
in there but it's entirely possible that

805
00:28:28,429 --> 00:28:32,029
<font color="#E5E5E5">I've missed some more interesting things</font>

806
00:28:30,049 --> 00:28:33,679
so just enumerated more of those could

807
00:28:32,029 --> 00:28:37,940
also potentially<font color="#E5E5E5"> find some more gadget</font>

808
00:28:33,679 --> 00:28:41,869
chains so in everything<font color="#E5E5E5"> I've described</font>

809
00:28:37,940 --> 00:28:43,190
<font color="#CCCCCC">one thing that I've left out</font><font color="#E5E5E5"> is how do</font>

810
00:28:41,869 --> 00:28:45,349
you deal with<font color="#E5E5E5"> this if you're working</font>

811
00:28:43,190 --> 00:28:47,329
<font color="#CCCCCC">with different types of DC realization</font>

812
00:28:45,349 --> 00:28:49,999
libraries<font color="#E5E5E5"> well basically everything I've</font>

813
00:28:47,329 --> 00:28:51,440
described is<font color="#CCCCCC"> parameterize Abul so what</font>

814
00:28:49,999 --> 00:28:54,049
classes are considered considered

815
00:28:51,440 --> 00:28:55,300
serializable<font color="#CCCCCC"> well you can pass</font><font color="#E5E5E5"> that in</font>

816
00:28:54,049 --> 00:28:58,639
as a parameter<font color="#E5E5E5"> to the</font>

817
00:28:55,300 --> 00:29:01,520
analysis<font color="#E5E5E5"> and say</font><font color="#CCCCCC"> classes implementing</font>

818
00:28:58,640 --> 00:29:02,840
this interface are serializable or

819
00:29:01,520 --> 00:29:04,730
classes<font color="#E5E5E5"> of no</font><font color="#CCCCCC"> art constructors are</font>

820
00:29:02,840 --> 00:29:06,970
serializable<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that will determine how</font>

821
00:29:04,730 --> 00:29:09,890
<font color="#CCCCCC">you do</font><font color="#E5E5E5"> that graph search and step 5</font>

822
00:29:06,970 --> 00:29:11,330
<font color="#CCCCCC">different D serialization sources exist</font>

823
00:29:09,890 --> 00:29:13,130
different matching methods between

824
00:29:11,330 --> 00:29:15,740
different libraries again<font color="#E5E5E5"> parameter</font>

825
00:29:13,130 --> 00:29:17,600
<font color="#CCCCCC">eyes'll and step</font><font color="#E5E5E5"> 4 and</font><font color="#CCCCCC"> what a method</font>

826
00:29:15,740 --> 00:29:20,060
implementation<font color="#CCCCCC"> should you consider</font><font color="#E5E5E5"> for</font>

827
00:29:17,600 --> 00:29:23,240
things<font color="#CCCCCC"> like the JRE</font><font color="#E5E5E5"> object input stream</font>

828
00:29:20,060 --> 00:29:24,710
<font color="#E5E5E5">that's basically any</font><font color="#CCCCCC"> implementation you</font>

829
00:29:23,240 --> 00:29:26,300
want but<font color="#E5E5E5"> for something like Jackson</font>

830
00:29:24,710 --> 00:29:27,770
there's annotations you<font color="#E5E5E5"> can put on</font>

831
00:29:26,300 --> 00:29:29,659
methods that determine<font color="#E5E5E5"> what data types</font>

832
00:29:27,770 --> 00:29:31,970
<font color="#E5E5E5">can be used</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> those member values so</font>

833
00:29:29,660 --> 00:29:34,780
it depends and<font color="#E5E5E5"> all of that's</font>

834
00:29:31,970 --> 00:29:37,850
parameterize<font color="#CCCCCC"> bol in this analysis though</font>

835
00:29:34,780 --> 00:29:43,010
so<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> lots of talk about lots of</font>

836
00:29:37,850 --> 00:29:44,659
<font color="#CCCCCC">things</font><font color="#E5E5E5"> that this tool does</font><font color="#CCCCCC"> and lots of</font>

837
00:29:43,010 --> 00:29:46,430
<font color="#E5E5E5">assumptions</font><font color="#CCCCCC"> that it makes so the</font>

838
00:29:44,660 --> 00:29:48,110
<font color="#E5E5E5">question is does it actually find</font>

839
00:29:46,430 --> 00:29:50,750
anything useful<font color="#E5E5E5"> or is it just false</font>

840
00:29:48,110 --> 00:29:52,939
positive heavy<font color="#E5E5E5"> and totally useless so</font>

841
00:29:50,750 --> 00:29:54,620
first thing I<font color="#E5E5E5"> did was set out to scan</font>

842
00:29:52,940 --> 00:29:58,490
some open source libraries and see what

843
00:29:54,620 --> 00:30:00,139
it<font color="#E5E5E5"> comes up with so Rand gadget</font>

844
00:29:58,490 --> 00:30:01,580
inspector<font color="#CCCCCC"> against 100 most popular</font>

845
00:30:00,140 --> 00:30:04,610
libraries as listed on maven repository

846
00:30:01,580 --> 00:30:06,679
<font color="#CCCCCC">comm and look</font><font color="#E5E5E5"> for exploits against</font><font color="#CCCCCC"> Java</font>

847
00:30:04,610 --> 00:30:08,929
<font color="#CCCCCC">d serialization</font><font color="#E5E5E5"> the built-in object</font>

848
00:30:06,680 --> 00:30:10,970
input stream<font color="#E5E5E5"> so it did rediscover</font>

849
00:30:08,930 --> 00:30:12,350
several known gadget chains<font color="#CCCCCC"> so that's</font>

850
00:30:10,970 --> 00:30:14,570
good<font color="#CCCCCC"> that means it's</font><font color="#E5E5E5"> actually finding</font>

851
00:30:12,350 --> 00:30:17,209
<font color="#E5E5E5">things I know it should find so thumbs</font>

852
00:30:14,570 --> 00:30:18,980
<font color="#E5E5E5">up it's it's</font><font color="#CCCCCC"> doing</font><font color="#E5E5E5"> something useful</font><font color="#CCCCCC"> it</font>

853
00:30:17,210 --> 00:30:21,020
turns out<font color="#E5E5E5"> that not that</font><font color="#CCCCCC"> many open source</font>

854
00:30:18,980 --> 00:30:24,140
libraries<font color="#E5E5E5"> actually implement classes</font>

855
00:30:21,020 --> 00:30:25,850
that implement<font color="#CCCCCC"> serializable it's not</font>

856
00:30:24,140 --> 00:30:28,250
that<font color="#CCCCCC"> popular these days to use the</font>

857
00:30:25,850 --> 00:30:30,949
object input stream<font color="#CCCCCC"> but there were a</font><font color="#E5E5E5"> few</font>

858
00:30:28,250 --> 00:30:32,240
new<font color="#CCCCCC"> things that fall into that class so</font>

859
00:30:30,950 --> 00:30:33,680
<font color="#E5E5E5">I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk about those it did</font>

860
00:30:32,240 --> 00:30:35,900
actually<font color="#E5E5E5"> find some interesting new stuff</font>

861
00:30:33,680 --> 00:30:37,580
it did have a handful<font color="#E5E5E5"> of false positives</font>

862
00:30:35,900 --> 00:30:39,320
because<font color="#E5E5E5"> there are some assumptions</font><font color="#CCCCCC"> but</font>

863
00:30:37,580 --> 00:30:40,850
there's not<font color="#E5E5E5"> that as many as you'd expect</font>

864
00:30:39,320 --> 00:30:43,340
and I think<font color="#E5E5E5"> it's because most of those</font>

865
00:30:40,850 --> 00:30:45,649
assumptions<font color="#E5E5E5"> I made</font><font color="#CCCCCC"> are reasonably valid</font>

866
00:30:43,340 --> 00:30:47,000
they make sense<font color="#E5E5E5"> in this context most of</font>

867
00:30:45,650 --> 00:30:51,170
the sources<font color="#E5E5E5"> of false positives is</font>

868
00:30:47,000 --> 00:30:53,180
because reflection is hard so old<font color="#CCCCCC"> gadget</font>

869
00:30:51,170 --> 00:30:55,460
<font color="#CCCCCC">chain</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> comments collections this is</font>

870
00:30:53,180 --> 00:30:57,830
the big one that you know<font color="#CCCCCC"> fro often</font>

871
00:30:55,460 --> 00:30:59,480
<font color="#CCCCCC">Lorenz talk about in</font><font color="#E5E5E5"> 2015 and the reason</font>

872
00:30:57,830 --> 00:31:01,129
that<font color="#CCCCCC"> this one was so interesting is that</font>

873
00:30:59,480 --> 00:31:03,350
it was<font color="#CCCCCC"> in</font><font color="#E5E5E5"> Commons collections this is a</font>

874
00:31:01,130 --> 00:31:07,070
<font color="#E5E5E5">38 most popular library according to</font>

875
00:31:03,350 --> 00:31:08,840
maven repository<font color="#CCCCCC"> and this is</font><font color="#E5E5E5"> basically</font>

876
00:31:07,070 --> 00:31:09,230
what's the they started<font color="#E5E5E5"> that catch a</font>

877
00:31:08,840 --> 00:31:11,000
chain

878
00:31:09,230 --> 00:31:13,520
<font color="#E5E5E5">like you</font><font color="#CCCCCC"> wrapped</font><font color="#E5E5E5"> something in a dynamic</font>

879
00:31:11,000 --> 00:31:15,740
proxy<font color="#E5E5E5"> you get into the</font><font color="#CCCCCC"> occasion handler</font>

880
00:31:13,520 --> 00:31:17,480
entry point<font color="#CCCCCC"> you go to this lazy map in</font>

881
00:31:15,740 --> 00:31:19,130
Commons collections and<font color="#E5E5E5"> then you're able</font>

882
00:31:17,480 --> 00:31:21,799
<font color="#E5E5E5">to do some reflection stuff and get</font>

883
00:31:19,130 --> 00:31:23,600
somewhere<font color="#CCCCCC"> interesting so cool found the</font>

884
00:31:21,799 --> 00:31:26,150
<font color="#CCCCCC">Commons collections Gacha</font><font color="#E5E5E5"> chains doing</font>

885
00:31:23,600 --> 00:31:27,740
something useful<font color="#E5E5E5"> the very first thing</font>

886
00:31:26,150 --> 00:31:29,600
that<font color="#E5E5E5"> gadget inspector discovered though</font>

887
00:31:27,740 --> 00:31:31,790
was the gadget<font color="#E5E5E5"> chaining closure and we</font>

888
00:31:29,600 --> 00:31:33,530
<font color="#CCCCCC">thought</font><font color="#E5E5E5"> Commons collections was</font>

889
00:31:31,790 --> 00:31:35,540
interesting because the<font color="#E5E5E5"> 38 most popular</font>

890
00:31:33,530 --> 00:31:37,309
library<font color="#E5E5E5"> closure is the</font><font color="#CCCCCC"> six</font><font color="#E5E5E5"> most popular</font>

891
00:31:35,540 --> 00:31:39,950
library so this was really<font color="#CCCCCC"> interesting</font>

892
00:31:37,309 --> 00:31:42,440
to me<font color="#CCCCCC"> so it</font><font color="#E5E5E5"> found a gadget chain</font>

893
00:31:39,950 --> 00:31:43,820
starting in<font color="#E5E5E5"> hashcode and got down</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

894
00:31:42,440 --> 00:31:46,160
<font color="#E5E5E5">bottom here where basically</font><font color="#CCCCCC"> it was able</font>

895
00:31:43,820 --> 00:31:48,740
<font color="#CCCCCC">to</font><font color="#E5E5E5"> read an arbitrary file from disk and</font>

896
00:31:46,160 --> 00:31:50,240
execute<font color="#E5E5E5"> it as closure so it turns</font><font color="#CCCCCC"> out</font>

897
00:31:48,740 --> 00:31:51,799
<font color="#E5E5E5">that by tweaking that last step and</font>

898
00:31:50,240 --> 00:31:54,140
<font color="#E5E5E5">instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> calling load file you call</font>

899
00:31:51,799 --> 00:31:55,940
eval<font color="#CCCCCC"> you get exactly the gadget chain</font>

900
00:31:54,140 --> 00:31:58,100
that<font color="#E5E5E5"> have kind of been</font><font color="#CCCCCC"> describing</font><font color="#E5E5E5"> at the</font>

901
00:31:55,940 --> 00:32:00,290
beginning of the talk<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> turned</font>

902
00:31:58,100 --> 00:32:02,299
into an RTC gadget chain it's been in

903
00:32:00,290 --> 00:32:04,549
all versions of closure since like one

904
00:32:02,299 --> 00:32:07,879
<font color="#E5E5E5">point 2.0 which is like eight years old</font>

905
00:32:04,549 --> 00:32:09,799
<font color="#E5E5E5">or something</font><font color="#CCCCCC"> and I reported that to</font>

906
00:32:07,880 --> 00:32:11,600
closure<font color="#CCCCCC"> dev mailing list and they</font>

907
00:32:09,799 --> 00:32:13,040
<font color="#E5E5E5">decided to turn off serialization for</font>

908
00:32:11,600 --> 00:32:16,129
this class<font color="#E5E5E5"> because like who in the world</font>

909
00:32:13,040 --> 00:32:18,620
even<font color="#E5E5E5"> uses that anyway</font><font color="#CCCCCC"> so that's great</font>

910
00:32:16,130 --> 00:32:21,290
<font color="#E5E5E5">version one nine zero release doesn't</font>

911
00:32:18,620 --> 00:32:23,600
<font color="#CCCCCC">have that gadget</font><font color="#E5E5E5"> chain anymore so cool</font>

912
00:32:21,290 --> 00:32:25,428
progress all right what else<font color="#CCCCCC"> did gadget</font>

913
00:32:23,600 --> 00:32:27,678
inspector find<font color="#E5E5E5"> so it found stuff in</font>

914
00:32:25,429 --> 00:32:30,290
<font color="#E5E5E5">Scala so that's the third most popular</font>

915
00:32:27,679 --> 00:32:31,520
library on maven repository<font color="#E5E5E5"> comm so this</font>

916
00:32:30,290 --> 00:32:33,110
one isn't<font color="#CCCCCC"> RCE</font>

917
00:32:31,520 --> 00:32:36,350
so maybe a<font color="#E5E5E5"> little bit less interesting</font>

918
00:32:33,110 --> 00:32:38,928
to<font color="#E5E5E5"> you but it did but it</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> able to</font>

919
00:32:36,350 --> 00:32:40,399
write out a zero byte file why is that

920
00:32:38,929 --> 00:32:41,809
interesting<font color="#CCCCCC"> well</font><font color="#E5E5E5"> let's you overwrite a</font>

921
00:32:40,400 --> 00:32:43,610
file with zero bytes which can

922
00:32:41,809 --> 00:32:45,020
potentially<font color="#CCCCCC"> cause</font><font color="#E5E5E5"> some denial of service</font>

923
00:32:43,610 --> 00:32:47,689
if you overwrite<font color="#CCCCCC"> your application</font>

924
00:32:45,020 --> 00:32:49,700
<font color="#E5E5E5">resources</font><font color="#CCCCCC"> that could then just crash</font>

925
00:32:47,690 --> 00:32:53,870
your your application<font color="#E5E5E5"> so that's kind of</font>

926
00:32:49,700 --> 00:32:57,110
interesting<font color="#CCCCCC"> it also found just a slight</font>

927
00:32:53,870 --> 00:32:59,149
<font color="#CCCCCC">variation on that gadget chain where it</font>

928
00:32:57,110 --> 00:33:01,668
will do an<font color="#CCCCCC"> SS RF so it gets at an</font>

929
00:32:59,150 --> 00:33:05,870
arbitrary URL with with<font color="#E5E5E5"> your application</font>

930
00:33:01,669 --> 00:33:06,140
<font color="#E5E5E5">so cool it's finding</font><font color="#CCCCCC"> useful stuff all</font>

931
00:33:05,870 --> 00:33:08,899
<font color="#E5E5E5">right</font>

932
00:33:06,140 --> 00:33:12,770
just before<font color="#E5E5E5"> I put these slides together</font>

933
00:33:08,900 --> 00:33:14,540
<font color="#CCCCCC">I reran the analysis on closure it turns</font>

934
00:33:12,770 --> 00:33:16,520
out<font color="#E5E5E5"> that there's</font><font color="#CCCCCC"> actually a different</font>

935
00:33:14,540 --> 00:33:19,639
entry<font color="#CCCCCC"> points</font><font color="#E5E5E5"> that gives you exactly the</font>

936
00:33:16,520 --> 00:33:21,270
<font color="#CCCCCC">same</font><font color="#E5E5E5"> gadget chain so even though they</font>

937
00:33:19,640 --> 00:33:23,460
remove<font color="#E5E5E5"> that gadget chain and</font><font color="#CCCCCC"> 1-9</font>

938
00:33:21,270 --> 00:33:25,379
<font color="#CCCCCC">oh</font><font color="#E5E5E5"> it turns</font><font color="#CCCCCC"> out they're still actually</font>

939
00:33:23,460 --> 00:33:27,870
<font color="#E5E5E5">an RC e gadget chain in all versions</font>

940
00:33:25,380 --> 00:33:28,890
released<font color="#E5E5E5"> since then so I haven't</font>

941
00:33:27,870 --> 00:33:30,600
<font color="#E5E5E5">actually followed up</font><font color="#CCCCCC"> with the closure</font>

942
00:33:28,890 --> 00:33:31,920
dev mailing list but it turns out if

943
00:33:30,600 --> 00:33:34,110
<font color="#CCCCCC">you've</font><font color="#E5E5E5"> got an application that's doing</font>

944
00:33:31,920 --> 00:33:35,760
unsafe<font color="#CCCCCC"> D</font><font color="#E5E5E5"> serialization and you've got</font>

945
00:33:34,110 --> 00:33:37,979
the six most popular library on your

946
00:33:35,760 --> 00:33:40,260
<font color="#E5E5E5">class path then there's an RC e in there</font>

947
00:33:37,980 --> 00:33:41,730
<font color="#E5E5E5">so yeah hopefully</font><font color="#CCCCCC"> this is just</font>

948
00:33:40,260 --> 00:33:44,940
<font color="#E5E5E5">reiterating the</font><font color="#CCCCCC"> fact that you got to</font>

949
00:33:41,730 --> 00:33:46,770
stop doing unsafety serialization<font color="#E5E5E5"> okay</font>

950
00:33:44,940 --> 00:33:48,600
so that's all great<font color="#CCCCCC"> it proved that</font>

951
00:33:46,770 --> 00:33:51,870
gadget<font color="#E5E5E5"> inspector is doing something</font>

952
00:33:48,600 --> 00:33:53,370
<font color="#E5E5E5">useful for open source libraries but the</font>

953
00:33:51,870 --> 00:33:54,959
whole point<font color="#CCCCCC"> of this</font><font color="#E5E5E5"> was to be able to</font>

954
00:33:53,370 --> 00:33:57,149
<font color="#E5E5E5">tell me about the risk of my</font>

955
00:33:54,960 --> 00:33:58,710
applications<font color="#CCCCCC"> I wanted to know whether</font><font color="#E5E5E5"> or</font>

956
00:33:57,150 --> 00:34:01,200
not there's some gadget chain that's

957
00:33:58,710 --> 00:34:02,790
unique<font color="#CCCCCC"> to my app under some unique</font>

958
00:34:01,200 --> 00:34:07,800
constraints<font color="#E5E5E5"> about</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> D serialization</font>

959
00:34:02,790 --> 00:34:09,929
that I'm doing so first app that<font color="#CCCCCC"> I</font>

960
00:34:07,800 --> 00:34:12,270
looked at<font color="#E5E5E5"> was</font><font color="#CCCCCC"> an app that was</font><font color="#E5E5E5"> doing some</font>

961
00:34:09,929 --> 00:34:14,159
<font color="#E5E5E5">unsafety civilization with</font><font color="#CCCCCC"> jackson where</font>

962
00:34:12,270 --> 00:34:15,899
an attacker could<font color="#CCCCCC"> specify what class</font>

963
00:34:14,159 --> 00:34:18,750
were deserializing and the whole<font color="#CCCCCC"> meth</font>

964
00:34:15,899 --> 00:34:20,159
<font color="#E5E5E5">and the whole payload so because we're</font>

965
00:34:18,750 --> 00:34:21,120
using<font color="#E5E5E5"> jackson and its default</font>

966
00:34:20,159 --> 00:34:22,980
configuration

967
00:34:21,120 --> 00:34:25,020
it can only deserialize classes with no

968
00:34:22,980 --> 00:34:25,830
<font color="#CCCCCC">art</font><font color="#E5E5E5"> constructors and the only entry</font>

969
00:34:25,020 --> 00:34:28,290
points are going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be those</font>

970
00:34:25,830 --> 00:34:30,690
constructors<font color="#CCCCCC"> but there's a</font><font color="#E5E5E5"> 200 megabyte</font>

971
00:34:28,290 --> 00:34:32,100
class path on this app so maybe there's

972
00:34:30,690 --> 00:34:33,510
<font color="#CCCCCC">something there like we spent a little</font>

973
00:34:32,100 --> 00:34:35,580
<font color="#E5E5E5">while looking at it manually and</font><font color="#CCCCCC"> we</font>

974
00:34:33,510 --> 00:34:37,230
couldn't<font color="#E5E5E5"> decide but it's like this</font><font color="#CCCCCC"> is</font>

975
00:34:35,580 --> 00:34:38,699
<font color="#CCCCCC">kind</font><font color="#E5E5E5"> of icky like we</font><font color="#CCCCCC"> don't know if</font>

976
00:34:37,230 --> 00:34:40,620
there's<font color="#E5E5E5"> some rain and constructor out</font>

977
00:34:38,699 --> 00:34:42,839
there that does<font color="#E5E5E5"> something</font><font color="#CCCCCC"> interesting</font><font color="#E5E5E5"> so</font>

978
00:34:40,620 --> 00:34:43,259
I ran<font color="#CCCCCC"> gas</font><font color="#E5E5E5"> inspector it didn't find</font>

979
00:34:42,840 --> 00:34:45,179
anything

980
00:34:43,260 --> 00:34:47,340
so<font color="#E5E5E5"> all right</font><font color="#CCCCCC"> cool maybe we don't</font>

981
00:34:45,179 --> 00:34:48,990
actually need<font color="#E5E5E5"> to worry about this</font><font color="#CCCCCC"> so</font>

982
00:34:47,340 --> 00:34:50,550
that's a good lesson<font color="#E5E5E5"> in how this saved</font>

983
00:34:48,989 --> 00:34:52,168
us some time<font color="#CCCCCC"> we didn't spend</font><font color="#E5E5E5"> that much</font>

984
00:34:50,550 --> 00:34:53,610
time remediating it it's<font color="#CCCCCC"> probably</font>

985
00:34:52,168 --> 00:34:54,960
dropped down we eventually fixed it but

986
00:34:53,610 --> 00:34:57,660
<font color="#E5E5E5">it wasn't something</font><font color="#CCCCCC"> where we had to</font><font color="#E5E5E5"> drop</font>

987
00:34:54,960 --> 00:35:00,630
<font color="#E5E5E5">everything and fix this</font><font color="#CCCCCC"> before we could</font>

988
00:34:57,660 --> 00:35:02,129
<font color="#E5E5E5">get out some more</font><font color="#CCCCCC"> features but of course</font>

989
00:35:00,630 --> 00:35:03,780
I'm not<font color="#E5E5E5"> gonna leave you with that let's</font>

990
00:35:02,130 --> 00:35:05,910
get<font color="#E5E5E5"> to something more interesting</font><font color="#CCCCCC"> so</font>

991
00:35:03,780 --> 00:35:07,650
there was a second web app which was

992
00:35:05,910 --> 00:35:09,450
<font color="#E5E5E5">using</font><font color="#CCCCCC"> a non-standard</font><font color="#E5E5E5"> D serialization</font>

993
00:35:07,650 --> 00:35:12,240
library<font color="#E5E5E5"> when an attacker could specify</font>

994
00:35:09,450 --> 00:35:14,069
<font color="#E5E5E5">what data types DC relies but had some</font>

995
00:35:12,240 --> 00:35:16,410
really<font color="#E5E5E5"> weird and interesting constraints</font>

996
00:35:14,070 --> 00:35:18,000
<font color="#E5E5E5">on it it didn't use the read object</font>

997
00:35:16,410 --> 00:35:20,460
magic methods but it<font color="#E5E5E5"> did use read</font>

998
00:35:18,000 --> 00:35:22,440
<font color="#E5E5E5">resolve so your lies</font><font color="#CCCCCC"> objects didn't need</font>

999
00:35:20,460 --> 00:35:24,300
to<font color="#CCCCCC"> implement</font><font color="#E5E5E5"> serializable</font><font color="#CCCCCC"> but they did</font>

1000
00:35:22,440 --> 00:35:26,130
have<font color="#E5E5E5"> a bunch of other restrictions</font><font color="#CCCCCC"> so</font>

1001
00:35:24,300 --> 00:35:28,680
they couldn't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> any member fields</font>

1002
00:35:26,130 --> 00:35:31,320
with dollars in the name<font color="#CCCCCC"> it couldn't</font>

1003
00:35:28,680 --> 00:35:33,629
have any arrays or generic Matz's

1004
00:35:31,320 --> 00:35:35,079
numbers and it couldn't<font color="#E5E5E5"> have any</font><font color="#CCCCCC"> null</font>

1005
00:35:33,630 --> 00:35:36,910
member values and that<font color="#E5E5E5"> was</font>

1006
00:35:35,079 --> 00:35:39,309
the kicker<font color="#CCCCCC"> because it means</font><font color="#E5E5E5"> that if it</font>

1007
00:35:36,910 --> 00:35:41,440
had some<font color="#E5E5E5"> value that was like a character</font>

1008
00:35:39,309 --> 00:35:41,890
<font color="#E5E5E5">array or a byte array</font><font color="#CCCCCC"> or something that</font>

1009
00:35:41,440 --> 00:35:43,809
it wasn't

1010
00:35:41,890 --> 00:35:45,759
<font color="#CCCCCC">C realizable by this library because</font>

1011
00:35:43,809 --> 00:35:48,339
that couldn't be<font color="#E5E5E5"> null and this doesn't</font>

1012
00:35:45,759 --> 00:35:50,489
<font color="#E5E5E5">support</font><font color="#CCCCCC"> serializing arrays so</font><font color="#E5E5E5"> it was</font>

1013
00:35:48,339 --> 00:35:53,140
hard to<font color="#E5E5E5"> tell for that matter what</font>

1014
00:35:50,489 --> 00:35:56,529
<font color="#E5E5E5">classes on a class path were even</font>

1015
00:35:53,140 --> 00:35:59,319
serializable<font color="#CCCCCC"> and because there are</font><font color="#E5E5E5"> no</font>

1016
00:35:56,529 --> 00:36:01,630
<font color="#E5E5E5">null values this is a recursive</font>

1017
00:35:59,319 --> 00:36:03,700
requirement<font color="#CCCCCC"> all of its member types</font><font color="#E5E5E5"> also</font>

1018
00:36:01,630 --> 00:36:06,430
<font color="#E5E5E5">had to be satisfied these restrictions</font>

1019
00:36:03,700 --> 00:36:08,109
<font color="#E5E5E5">so it was hard to tell what was even</font>

1020
00:36:06,430 --> 00:36:11,288
serializable in this case much less

1021
00:36:08,109 --> 00:36:13,839
whether<font color="#E5E5E5"> or not gadget chains existed but</font>

1022
00:36:11,289 --> 00:36:17,259
<font color="#CCCCCC">I found</font><font color="#E5E5E5"> something so this gadget chain</font>

1023
00:36:13,839 --> 00:36:18,880
is 12 steps deep and you<font color="#E5E5E5"> know don't look</font>

1024
00:36:17,259 --> 00:36:20,229
at<font color="#E5E5E5"> exactly what the different methods</font>

1025
00:36:18,880 --> 00:36:21,759
are because that's<font color="#E5E5E5"> not nearly as</font>

1026
00:36:20,229 --> 00:36:23,890
<font color="#CCCCCC">interesting it's just a fact of what the</font>

1027
00:36:21,759 --> 00:36:25,989
different packages<font color="#CCCCCC"> are so there are</font>

1028
00:36:23,890 --> 00:36:28,749
seven different libraries involved<font color="#CCCCCC"> in</font>

1029
00:36:25,989 --> 00:36:31,719
<font color="#E5E5E5">this gadget chain including classes in</font>

1030
00:36:28,749 --> 00:36:33,640
the app itself<font color="#E5E5E5"> and some JRE classes so</font>

1031
00:36:31,719 --> 00:36:35,619
this<font color="#E5E5E5"> is something we're just looking at</font>

1032
00:36:33,640 --> 00:36:37,180
<font color="#CCCCCC">a project like Y so cereal or Marshalls</font>

1033
00:36:35,619 --> 00:36:39,099
heck<font color="#E5E5E5"> wouldn't have been able</font><font color="#CCCCCC"> to tell</font><font color="#E5E5E5"> you</font>

1034
00:36:37,180 --> 00:36:40,930
<font color="#E5E5E5">that there's a gadget chain that exists</font>

1035
00:36:39,099 --> 00:36:43,029
when<font color="#E5E5E5"> you have this random collection</font><font color="#CCCCCC"> of</font>

1036
00:36:40,930 --> 00:36:44,828
classes in your<font color="#E5E5E5"> class path plus some</font>

1037
00:36:43,029 --> 00:36:47,739
behavior that's unique to<font color="#E5E5E5"> classes</font><font color="#CCCCCC"> in</font>

1038
00:36:44,829 --> 00:36:51,190
<font color="#CCCCCC">your app and</font><font color="#E5E5E5"> so this was incredibly cool</font>

1039
00:36:47,739 --> 00:36:53,440
<font color="#CCCCCC">and</font><font color="#E5E5E5"> what this what this gadget chain</font>

1040
00:36:51,190 --> 00:36:55,209
does is it copies a file<font color="#CCCCCC"> from an</font>

1041
00:36:53,440 --> 00:36:57,219
arbitrary<font color="#CCCCCC"> location to an arbitrary</font>

1042
00:36:55,209 --> 00:36:59,618
<font color="#CCCCCC">location so we were able to</font><font color="#E5E5E5"> do with this</font>

1043
00:36:57,219 --> 00:37:00,999
is copy private keys<font color="#E5E5E5"> into</font><font color="#CCCCCC"> the web app</font>

1044
00:36:59,619 --> 00:37:04,269
resource directory<font color="#E5E5E5"> and exfiltrate</font>

1045
00:37:00,999 --> 00:37:05,680
<font color="#E5E5E5">secrets off of that box but a few</font>

1046
00:37:04,269 --> 00:37:08,169
<font color="#E5E5E5">minutes of manually inspecting this</font>

1047
00:37:05,680 --> 00:37:10,328
<font color="#E5E5E5">after the fact what you</font><font color="#CCCCCC"> realize is that</font>

1048
00:37:08,170 --> 00:37:12,369
there's a stream pumper thing<font color="#CCCCCC"> ATS</font><font color="#E5E5E5"> line</font><font color="#CCCCCC"> 8</font>

1049
00:37:10,329 --> 00:37:14,380
which<font color="#E5E5E5"> basically copies an input stream</font>

1050
00:37:12,369 --> 00:37:15,819
to an output stream<font color="#E5E5E5"> so there's a small</font>

1051
00:37:14,380 --> 00:37:18,279
tweak you can do on this where you

1052
00:37:15,819 --> 00:37:20,709
specify<font color="#E5E5E5"> a arbitrary string as your</font><font color="#CCCCCC"> input</font>

1053
00:37:18,279 --> 00:37:22,690
stream<font color="#E5E5E5"> and then an arbitrary file path</font>

1054
00:37:20,709 --> 00:37:25,509
as your output stream<font color="#E5E5E5"> and now I can</font>

1055
00:37:22,690 --> 00:37:27,789
write<font color="#E5E5E5"> arbitrary string to a JSP file and</font>

1056
00:37:25,509 --> 00:37:29,859
yet<font color="#CCCCCC"> RCE with this gadget chain so this</font>

1057
00:37:27,789 --> 00:37:31,089
was even<font color="#E5E5E5"> worse than what gadget</font>

1058
00:37:29,859 --> 00:37:33,308
inspector<font color="#E5E5E5"> originally thought it was</font>

1059
00:37:31,089 --> 00:37:34,779
<font color="#CCCCCC">and so that's</font><font color="#E5E5E5"> amazing this thing was</font>

1060
00:37:33,309 --> 00:37:36,190
able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> tell us</font><font color="#CCCCCC"> any course of</font><font color="#E5E5E5"> a few</font>

1061
00:37:34,779 --> 00:37:38,499
<font color="#E5E5E5">minutes</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> there was an order</font><font color="#CCCCCC"> to e</font>

1062
00:37:36,190 --> 00:37:41,440
gadget chain in this app so<font color="#CCCCCC"> that is a</font>

1063
00:37:38,499 --> 00:37:43,718
<font color="#E5E5E5">huge win so there's lots of room for</font>

1064
00:37:41,440 --> 00:37:45,130
improvement with this tool it chokes on

1065
00:37:43,719 --> 00:37:46,690
<font color="#E5E5E5">reflection a little bit I talked about</font>

1066
00:37:45,130 --> 00:37:48,750
the assumptions that<font color="#E5E5E5"> it makes I talked</font>

1067
00:37:46,690 --> 00:37:51,240
<font color="#CCCCCC">about the limitations that exist</font>

1068
00:37:48,750 --> 00:37:55,050
with with knowing about different

1069
00:37:51,240 --> 00:37:56,279
sources<font color="#CCCCCC"> and different</font><font color="#E5E5E5"> sinks but one</font><font color="#CCCCCC"> of</font>

1070
00:37:55,050 --> 00:37:57,570
the things that I really think<font color="#E5E5E5"> is worth</font>

1071
00:37:56,280 --> 00:37:59,670
<font color="#E5E5E5">taking away from this is</font><font color="#CCCCCC"> that I think</font>

1072
00:37:57,570 --> 00:38:01,860
it's completely<font color="#E5E5E5"> uncharted territory</font><font color="#CCCCCC"> for</font>

1073
00:37:59,670 --> 00:38:04,140
the<font color="#E5E5E5"> D serialization space automatically</font>

1074
00:38:01,860 --> 00:38:06,150
finding<font color="#E5E5E5"> these gadget chains and I feel</font>

1075
00:38:04,140 --> 00:38:08,100
like it's proven<font color="#E5E5E5"> just in this sort of</font>

1076
00:38:06,150 --> 00:38:09,780
proof of concept<font color="#CCCCCC"> that I've built</font><font color="#E5E5E5"> that</font>

1077
00:38:08,100 --> 00:38:12,630
it's able<font color="#E5E5E5"> to find some</font><font color="#CCCCCC"> really useful</font>

1078
00:38:09,780 --> 00:38:13,620
things<font color="#CCCCCC"> and you know as I mentioned at</font>

1079
00:38:12,630 --> 00:38:15,420
the beginning going<font color="#E5E5E5"> through the history</font>

1080
00:38:13,620 --> 00:38:17,520
<font color="#CCCCCC">of DC realization vulnerabilities</font>

1081
00:38:15,420 --> 00:38:18,930
<font color="#E5E5E5">they're not going away yet</font><font color="#CCCCCC"> there's still</font>

1082
00:38:17,520 --> 00:38:21,200
<font color="#E5E5E5">things we have to deal with and we're</font>

1083
00:38:18,930 --> 00:38:23,279
still realizing that there's new

1084
00:38:21,200 --> 00:38:25,890
libraries that<font color="#CCCCCC"> are subject to these kind</font>

1085
00:38:23,280 --> 00:38:29,130
of vulnerabilities so and<font color="#CCCCCC"> hopefully as</font>

1086
00:38:25,890 --> 00:38:30,330
our last<font color="#CCCCCC"> example showed they gadget</font>

1087
00:38:29,130 --> 00:38:31,350
chains that<font color="#E5E5E5"> were</font><font color="#CCCCCC"> able to build through</font>

1088
00:38:30,330 --> 00:38:33,000
these sorts of vulnerabilities are

1089
00:38:31,350 --> 00:38:37,020
getting more<font color="#E5E5E5"> and more complicated and</font>

1090
00:38:33,000 --> 00:38:38,460
<font color="#E5E5E5">more and more sophisticated</font><font color="#CCCCCC"> so I think</font>

1091
00:38:37,020 --> 00:38:40,680
we need<font color="#CCCCCC"> better tools that are better</font>

1092
00:38:38,460 --> 00:38:43,380
<font color="#E5E5E5">able to understand our risk profile in</font>

1093
00:38:40,680 --> 00:38:45,089
these sorts of applications<font color="#CCCCCC"> so this tool</font>

1094
00:38:43,380 --> 00:38:47,280
is<font color="#E5E5E5"> open source I just pushed it to</font>

1095
00:38:45,090 --> 00:38:49,350
github so take a<font color="#E5E5E5"> look at it feel free to</font>

1096
00:38:47,280 --> 00:38:52,320
submit PRS feel free to just take the

1097
00:38:49,350 --> 00:38:54,630
ideas and<font color="#E5E5E5"> build something robust</font><font color="#CCCCCC"> but</font>

1098
00:38:52,320 --> 00:38:57,450
hopefully I just hope<font color="#E5E5E5"> that people come</font>

1099
00:38:54,630 --> 00:39:00,630
<font color="#CCCCCC">away looking</font><font color="#E5E5E5"> at this and using</font><font color="#CCCCCC"> these</font>

1100
00:38:57,450 --> 00:39:02,430
<font color="#E5E5E5">ideas to to improve the state of the</font>

1101
00:39:00,630 --> 00:39:04,920
<font color="#E5E5E5">worlds when it comes to</font><font color="#CCCCCC"> DC's H</font><font color="#E5E5E5"> and</font>

1102
00:39:02,430 --> 00:39:06,480
vulnerabilities so hit me up online<font color="#E5E5E5"> if</font>

1103
00:39:04,920 --> 00:39:06,840
you want<font color="#CCCCCC"> to afterwards</font><font color="#E5E5E5"> and that's all</font>

1104
00:39:06,480 --> 00:39:08,050
I've got

1105
00:39:06,840 --> 00:39:11,960
<font color="#CCCCCC">thank you</font>

1106
00:39:08,050 --> 00:39:14,710
[Applause]

1107
00:39:11,960 --> 00:39:14,710
thank you

