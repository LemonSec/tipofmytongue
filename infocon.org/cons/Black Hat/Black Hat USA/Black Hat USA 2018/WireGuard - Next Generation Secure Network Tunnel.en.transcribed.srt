1
00:00:00,000 --> 00:00:07,049
hello<font color="#CCCCCC"> so this is on wire guard which is</font>

2
00:00:02,820 --> 00:00:08,990
fast<font color="#E5E5E5"> smart secure VPN tunnel</font><font color="#CCCCCC"> so with</font>

3
00:00:07,049 --> 00:00:11,700
some<font color="#CCCCCC"> background I'm Jason donenfeld</font>

4
00:00:08,990 --> 00:00:13,830
<font color="#CCCCCC">around security</font><font color="#E5E5E5"> company</font><font color="#CCCCCC"> and my</font>

5
00:00:11,700 --> 00:00:15,509
<font color="#CCCCCC">background</font><font color="#E5E5E5"> is primarily</font><font color="#CCCCCC"> in exploitation</font>

6
00:00:13,830 --> 00:00:18,960
and funding kernel vulnerabilities

7
00:00:15,509 --> 00:00:20,869
crypto vulnerabilities<font color="#CCCCCC"> yeah mostly in</font>

8
00:00:18,960 --> 00:00:24,869
breaking things but I've also been<font color="#E5E5E5"> doing</font>

9
00:00:20,869 --> 00:00:27,448
<font color="#E5E5E5">kernel related development for a long</font>

10
00:00:24,869 --> 00:00:29,460
time and I wanted to<font color="#E5E5E5"> make a VPN</font><font color="#CCCCCC"> that</font>

11
00:00:27,449 --> 00:00:32,340
would avoid a lot<font color="#CCCCCC"> of the things</font><font color="#E5E5E5"> that a</font>

12
00:00:29,460 --> 00:00:36,719
lot<font color="#CCCCCC"> of the problems that</font><font color="#E5E5E5"> I've seen when</font>

13
00:00:32,340 --> 00:00:39,960
doing offensive research<font color="#E5E5E5"> so what is wire</font>

14
00:00:36,719 --> 00:00:43,559
garden it's a layer<font color="#CCCCCC"> 3</font><font color="#E5E5E5"> secure network</font>

15
00:00:39,960 --> 00:00:45,510
tunnel for ipv4<font color="#E5E5E5"> and ipv6 and as we'll</font>

16
00:00:43,559 --> 00:00:47,940
see throughout this presentation is<font color="#E5E5E5"> very</font>

17
00:00:45,510 --> 00:00:50,430
opinionated<font color="#CCCCCC"> so in this case it's only</font>

18
00:00:47,940 --> 00:00:53,099
layer 3 it only works at the IP level<font color="#CCCCCC"> it</font>

19
00:00:50,430 --> 00:00:56,129
doesn't do layer 2<font color="#E5E5E5"> Ethernet frames</font>

20
00:00:53,100 --> 00:00:57,809
<font color="#E5E5E5">because I don't think that's the right</font>

21
00:00:56,129 --> 00:00:59,968
<font color="#E5E5E5">way</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> design your network</font><font color="#CCCCCC"> l think</font>

22
00:00:57,809 --> 00:01:02,940
<font color="#E5E5E5">that's a good way to do tunneling and so</font>

23
00:00:59,969 --> 00:01:05,939
it only does layer 3<font color="#E5E5E5"> because it's a very</font>

24
00:01:02,940 --> 00:01:08,009
opinionated<font color="#E5E5E5"> design</font><font color="#CCCCCC"> it's been designed</font>

25
00:01:05,939 --> 00:01:09,990
specifically<font color="#CCCCCC"> for the Linux kernel</font><font color="#E5E5E5"> and</font>

26
00:01:08,010 --> 00:01:12,650
the Linux kernel networking idioms but

27
00:01:09,990 --> 00:01:15,780
we do have cross platforms of limitation

28
00:01:12,650 --> 00:01:17,330
available and hopefully<font color="#CCCCCC"> we'll be porting</font>

29
00:01:15,780 --> 00:01:23,220
to other<font color="#CCCCCC"> kernels as well</font>

30
00:01:17,330 --> 00:01:25,170
it's udp-based<font color="#CCCCCC"> it doesn't use its own IP</font>

31
00:01:23,220 --> 00:01:27,420
protocol which means it<font color="#E5E5E5"> gets through</font>

32
00:01:25,170 --> 00:01:31,950
most<font color="#E5E5E5"> firewalls in the normal way that</font>

33
00:01:27,420 --> 00:01:34,320
UDP gets through<font color="#CCCCCC"> firewalls we've tried</font>

34
00:01:31,950 --> 00:01:36,240
to<font color="#E5E5E5"> use modern cryptography</font><font color="#CCCCCC"> but also a</font>

35
00:01:34,320 --> 00:01:38,639
fairly<font color="#E5E5E5"> conservative cryptography nothing</font>

36
00:01:36,240 --> 00:01:41,009
<font color="#CCCCCC">too new thing</font><font color="#E5E5E5"> gold and the emphasis of</font>

37
00:01:38,640 --> 00:01:43,290
<font color="#E5E5E5">the project is</font><font color="#CCCCCC"> on general simplicity</font>

38
00:01:41,009 --> 00:01:44,670
simplicity and and being really

39
00:01:43,290 --> 00:01:47,100
auditable we want<font color="#CCCCCC"> people to</font><font color="#E5E5E5"> be able to</font>

40
00:01:44,670 --> 00:01:49,140
sit<font color="#CCCCCC"> down read the code understand the</font>

41
00:01:47,100 --> 00:01:53,309
project<font color="#CCCCCC"> and make sure that it's doing</font>

42
00:01:49,140 --> 00:01:56,130
what we say it<font color="#E5E5E5"> does</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> authentication</font>

43
00:01:53,310 --> 00:01:58,649
model<font color="#E5E5E5"> is extremely simple it's just like</font>

44
00:01:56,130 --> 00:02:00,420
<font color="#E5E5E5">SSH is authenticated keys where both</font>

45
00:01:58,649 --> 00:02:02,159
sides know each other's public use ahead

46
00:02:00,420 --> 00:02:06,630
of time and then<font color="#E5E5E5"> they can talk to</font><font color="#CCCCCC"> each</font>

47
00:02:02,159 --> 00:02:08,489
other<font color="#CCCCCC"> there</font><font color="#E5E5E5"> is a presentation</font><font color="#CCCCCC"> in here</font>

48
00:02:06,630 --> 00:02:10,410
<font color="#CCCCCC">before about Open VPN</font><font color="#E5E5E5"> and some problems</font>

49
00:02:08,489 --> 00:02:13,260
with it so wire guard is a replacement

50
00:02:10,410 --> 00:02:16,530
for<font color="#E5E5E5"> Open VPN and the other</font>

51
00:02:13,260 --> 00:02:18,420
standard of<font color="#E5E5E5"> IPSec now the code base for</font>

52
00:02:16,530 --> 00:02:21,209
this actually grew<font color="#CCCCCC"> out of a stealth</font>

53
00:02:18,420 --> 00:02:23,819
rootkit project I was working<font color="#CCCCCC"> on</font><font color="#E5E5E5"> where I</font>

54
00:02:21,209 --> 00:02:25,799
needed<font color="#CCCCCC"> to stay embedded in a</font><font color="#E5E5E5"> network for</font>

55
00:02:23,819 --> 00:02:29,670
quite some time<font color="#E5E5E5"> without being discovered</font>

56
00:02:25,799 --> 00:02:31,230
<font color="#E5E5E5">and get data in and out</font><font color="#CCCCCC"> securely but it</font>

57
00:02:29,670 --> 00:02:33,958
turns out<font color="#E5E5E5"> that a lot of these things</font>

58
00:02:31,230 --> 00:02:36,030
that<font color="#CCCCCC"> you do</font><font color="#E5E5E5"> for stealth in an offensive</font>

59
00:02:33,959 --> 00:02:37,799
setting turn out to<font color="#CCCCCC"> be really useful</font><font color="#E5E5E5"> in</font>

60
00:02:36,030 --> 00:02:39,870
a defensive setting when<font color="#CCCCCC"> you just want</font>

61
00:02:37,799 --> 00:02:42,079
<font color="#CCCCCC">to have a</font><font color="#E5E5E5"> legitimate network tunnel for</font>

62
00:02:39,870 --> 00:02:44,549
yourself

63
00:02:42,079 --> 00:02:46,170
so this first<font color="#CCCCCC"> idea</font><font color="#E5E5E5"> of being easily</font>

64
00:02:44,549 --> 00:02:48,599
auditable when we look at the code

65
00:02:46,170 --> 00:02:51,089
counts for<font color="#CCCCCC"> this other project</font><font color="#E5E5E5"> but</font>

66
00:02:48,599 --> 00:02:53,638
<font color="#CCCCCC">OpenVPN</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> hundred</font><font color="#E5E5E5"> sixteen thousand lines</font>

67
00:02:51,090 --> 00:02:58,260
of code<font color="#CCCCCC"> plus need all of</font><font color="#E5E5E5"> OpenSSL</font>

68
00:02:53,639 --> 00:02:59,670
<font color="#CCCCCC">in order to to run it</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Linux xfr M</font>

69
00:02:58,260 --> 00:03:03,239
layer which is<font color="#E5E5E5"> like kind of the</font>

70
00:02:59,670 --> 00:03:05,369
<font color="#E5E5E5">symmetric part</font><font color="#CCCCCC"> of the IPSec is 119</font>

71
00:03:03,239 --> 00:03:07,349
thousand lines of<font color="#CCCCCC"> code but then you need</font>

72
00:03:05,370 --> 00:03:09,599
strong<font color="#CCCCCC"> Swann for the key exchange</font><font color="#E5E5E5"> and</font>

73
00:03:07,349 --> 00:03:12,988
<font color="#E5E5E5">strongswan is massive four hundred</font>

74
00:03:09,599 --> 00:03:15,089
thousand<font color="#E5E5E5"> lines of code</font><font color="#CCCCCC"> soft ether is</font>

75
00:03:12,989 --> 00:03:18,090
kind of<font color="#E5E5E5"> this jack-of-all-trades</font>

76
00:03:15,090 --> 00:03:20,400
user space program that<font color="#E5E5E5"> implements a</font>

77
00:03:18,090 --> 00:03:21,690
variety of VPN protocols is three

78
00:03:20,400 --> 00:03:24,660
hundred<font color="#E5E5E5"> thousand lines of</font><font color="#CCCCCC"> code I mean</font>

79
00:03:21,690 --> 00:03:26,609
this is a lot<font color="#CCCCCC"> of stuff</font><font color="#E5E5E5"> that is going to</font>

80
00:03:24,660 --> 00:03:28,198
be very difficult has been very

81
00:03:26,609 --> 00:03:30,930
difficult for<font color="#CCCCCC"> people to audit because</font>

82
00:03:28,199 --> 00:03:32,129
it's so big<font color="#CCCCCC"> wire guard in contrast is</font>

83
00:03:30,930 --> 00:03:34,980
less than<font color="#E5E5E5"> four thousand lines of code</font>

84
00:03:32,129 --> 00:03:38,819
<font color="#E5E5E5">yeah so when we</font><font color="#CCCCCC"> visualize this kind of</font>

85
00:03:34,980 --> 00:03:42,599
the solar system of VPNs<font color="#CCCCCC"> will hire guard</font>

86
00:03:38,819 --> 00:03:44,540
is<font color="#E5E5E5"> the Pluto over there and this is</font>

87
00:03:42,599 --> 00:03:47,910
really important

88
00:03:44,540 --> 00:03:50,608
we want the project<font color="#E5E5E5"> to be one that any</font>

89
00:03:47,910 --> 00:03:52,709
security researcher on the weekend just

90
00:03:50,609 --> 00:03:57,419
<font color="#CCCCCC">because</font><font color="#E5E5E5"> he's curious could casually open</font>

91
00:03:52,709 --> 00:04:01,440
it up and check<font color="#CCCCCC"> things</font><font color="#E5E5E5"> you know when you</font>

92
00:03:57,419 --> 00:04:03,000
have a massive<font color="#CCCCCC"> code</font><font color="#E5E5E5"> base</font><font color="#CCCCCC"> maybe you look</font>

93
00:04:01,440 --> 00:04:05,250
<font color="#E5E5E5">at it as a security searcher because</font>

94
00:04:03,000 --> 00:04:06,930
you've been paid to as part<font color="#CCCCCC"> of a job or</font>

95
00:04:05,250 --> 00:04:09,199
because<font color="#CCCCCC"> you want to make a massive</font>

96
00:04:06,930 --> 00:04:11,790
<font color="#CCCCCC">project out of it but always it's a very</font>

97
00:04:09,199 --> 00:04:14,310
cumbersome undertaking not something you

98
00:04:11,790 --> 00:04:16,399
<font color="#CCCCCC">would just</font><font color="#E5E5E5"> casually waltz into whereas I</font>

99
00:04:14,310 --> 00:04:20,849
think<font color="#CCCCCC"> with wire guard with such a small</font>

100
00:04:16,399 --> 00:04:23,400
code size it resembles more<font color="#E5E5E5"> of a toy in</font>

101
00:04:20,849 --> 00:04:25,580
size and so researchers<font color="#E5E5E5"> will</font><font color="#CCCCCC"> be more</font>

102
00:04:23,400 --> 00:04:27,250
inclined just to take a quick peek

103
00:04:25,580 --> 00:04:31,930
because it's quick

104
00:04:27,250 --> 00:04:33,280
it's small the next thing we<font color="#CCCCCC"> want is the</font>

105
00:04:31,930 --> 00:04:37,840
<font color="#E5E5E5">simplicity of the interface</font>

106
00:04:33,280 --> 00:04:40,179
so if you if you used IPSec before<font color="#CCCCCC"> maybe</font>

107
00:04:37,840 --> 00:04:41,619
you've struggled<font color="#E5E5E5"> with the Linux XF RM</font>

108
00:04:40,180 --> 00:04:45,460
layer to make<font color="#E5E5E5"> this happen we have</font>

109
00:04:41,620 --> 00:04:47,080
transformation tables and policies<font color="#CCCCCC"> and</font>

110
00:04:45,460 --> 00:04:49,419
<font color="#E5E5E5">it's very complicated with wire guard</font>

111
00:04:47,080 --> 00:04:51,880
instead<font color="#E5E5E5"> you</font><font color="#CCCCCC"> just get a normal</font><font color="#E5E5E5"> network</font>

112
00:04:49,420 --> 00:04:54,250
interface<font color="#E5E5E5"> so you can add the interface</font>

113
00:04:51,880 --> 00:04:58,240
using IP link you can give it IP

114
00:04:54,250 --> 00:04:59,890
addresses routes<font color="#CCCCCC"> IP tables basically all</font>

115
00:04:58,240 --> 00:05:02,230
the<font color="#CCCCCC"> things</font><font color="#E5E5E5"> that you're used to doing</font>

116
00:04:59,890 --> 00:05:03,780
<font color="#E5E5E5">with normal network interfaces like ETA</font>

117
00:05:02,230 --> 00:05:06,850
<font color="#CCCCCC">zero or wlan0</font>

118
00:05:03,780 --> 00:05:11,020
you can do<font color="#E5E5E5"> just the same with with WG</font>

119
00:05:06,850 --> 00:05:13,690
zero with wire guard<font color="#CCCCCC"> as</font><font color="#E5E5E5"> we'll see even</font>

120
00:05:11,020 --> 00:05:16,570
kind<font color="#E5E5E5"> of antiquated things like Ezio so</font>

121
00:05:13,690 --> 00:05:20,590
now and deny become newly possible newly

122
00:05:16,570 --> 00:05:22,980
<font color="#CCCCCC">secured with wire guard but why our</font>

123
00:05:20,590 --> 00:05:25,570
guard<font color="#E5E5E5"> is also a little</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> blasphemous</font>

124
00:05:22,980 --> 00:05:30,070
<font color="#CCCCCC">we've broken a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> really nice</font>

125
00:05:25,570 --> 00:05:32,830
pristine layering that<font color="#E5E5E5"> 90s technology</font><font color="#CCCCCC"> is</font>

126
00:05:30,070 --> 00:05:35,380
like IPSec have so IPSec you get a

127
00:05:32,830 --> 00:05:37,180
transformation table that transforms

128
00:05:35,380 --> 00:05:38,770
packets by adding encryption or

129
00:05:37,180 --> 00:05:41,080
sometimes even compression

130
00:05:38,770 --> 00:05:42,849
yikes and then this is managed

131
00:05:41,080 --> 00:05:45,969
separately by a user space<font color="#E5E5E5"> daemon that</font>

132
00:05:42,850 --> 00:05:48,370
<font color="#E5E5E5">does the keying that updates a policy</font>

133
00:05:45,970 --> 00:05:52,660
table and the transformation table and

134
00:05:48,370 --> 00:05:55,060
so very nicely cleanly<font color="#E5E5E5"> layered but that</font>

135
00:05:52,660 --> 00:05:57,220
makes<font color="#E5E5E5"> it super complex</font><font color="#CCCCCC"> to so with wire</font>

136
00:05:55,060 --> 00:06:00,370
guard we just kind of get<font color="#CCCCCC"> rid of</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> of</font>

137
00:05:57,220 --> 00:06:02,110
<font color="#CCCCCC">that and</font><font color="#E5E5E5"> our basic unit instead is the</font>

138
00:06:00,370 --> 00:06:04,030
network interface and then we build<font color="#E5E5E5"> up</font>

139
00:06:02,110 --> 00:06:05,410
from<font color="#E5E5E5"> there</font><font color="#CCCCCC"> we try and use clever</font>

140
00:06:04,030 --> 00:06:08,049
engineering tricks and clever

141
00:06:05,410 --> 00:06:10,570
organizational tricks to make it

142
00:06:08,050 --> 00:06:13,660
coherent again so we start with

143
00:06:10,570 --> 00:06:15,190
something<font color="#CCCCCC"> that at first can possibly do</font>

144
00:06:13,660 --> 00:06:16,960
<font color="#E5E5E5">what we need encrypting things and</font>

145
00:06:15,190 --> 00:06:19,090
accounting for different peers but then

146
00:06:16,960 --> 00:06:21,219
we're able to<font color="#E5E5E5"> gradually solve each of</font>

147
00:06:19,090 --> 00:06:23,250
the<font color="#E5E5E5"> problems that that has and we have</font>

148
00:06:21,220 --> 00:06:25,479
something<font color="#E5E5E5"> a lot simpler as a consequence</font>

149
00:06:23,250 --> 00:06:28,840
<font color="#E5E5E5">so how do we do this we</font><font color="#CCCCCC"> have this idea</font>

150
00:06:25,479 --> 00:06:31,210
<font color="#E5E5E5">called</font><font color="#CCCCCC"> cryptokey routing we're the</font>

151
00:06:28,840 --> 00:06:33,489
fundamental idea is you<font color="#CCCCCC"> have an</font>

152
00:06:31,210 --> 00:06:36,700
<font color="#CCCCCC">association between a</font><font color="#E5E5E5"> public key of</font>

153
00:06:33,490 --> 00:06:39,240
<font color="#E5E5E5">appear and the IP addresses that that</font>

154
00:06:36,700 --> 00:06:40,990
<font color="#CCCCCC">peer is allowed to be</font><font color="#E5E5E5"> inside the tunnel</font>

155
00:06:39,240 --> 00:06:42,880
so let's<font color="#E5E5E5"> look</font>

156
00:06:40,990 --> 00:06:44,620
the full list of<font color="#E5E5E5"> things that</font><font color="#CCCCCC"> wire</font>

157
00:06:42,880 --> 00:06:46,480
<font color="#CCCCCC">interface has</font><font color="#E5E5E5"> a wire guard interface has</font>

158
00:06:44,620 --> 00:06:49,720
<font color="#E5E5E5">a private key that's what would identify</font>

159
00:06:46,480 --> 00:06:52,390
<font color="#E5E5E5">you for example</font><font color="#CCCCCC"> it has a listening UDP</font>

160
00:06:49,720 --> 00:06:55,120
port so that's how<font color="#E5E5E5"> to access</font><font color="#CCCCCC"> your wire</font>

161
00:06:52,390 --> 00:06:58,030
guard<font color="#E5E5E5"> interface on the</font><font color="#CCCCCC"> internet and</font><font color="#E5E5E5"> that</font>

162
00:06:55,120 --> 00:07:00,670
has a list of peers<font color="#E5E5E5"> each peer is</font>

163
00:06:58,030 --> 00:07:03,400
identified by<font color="#CCCCCC"> his public key his public</font>

164
00:07:00,670 --> 00:07:05,740
key is his name<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> it has this</font>

165
00:07:03,400 --> 00:07:08,530
list of associated<font color="#E5E5E5"> tunnel IP use this</font>

166
00:07:05,740 --> 00:07:10,330
<font color="#E5E5E5">allowed IPs</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> these are the IP</font>

167
00:07:08,530 --> 00:07:12,429
addresses<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it can be inside the</font>

168
00:07:10,330 --> 00:07:14,890
tunnel<font color="#E5E5E5"> not outside but inside the tunnel</font>

169
00:07:12,430 --> 00:07:17,070
<font color="#E5E5E5">and then optionally it has an endpoint</font>

170
00:07:14,890 --> 00:07:20,140
<font color="#CCCCCC">IP and port on the</font><font color="#E5E5E5"> internet that is</font>

171
00:07:17,070 --> 00:07:23,460
where do I<font color="#CCCCCC"> send UDP packets to to find</font>

172
00:07:20,140 --> 00:07:26,289
that<font color="#CCCCCC"> peer on the</font><font color="#E5E5E5"> Internet</font>

173
00:07:23,460 --> 00:07:28,690
so this is a really important<font color="#E5E5E5"> concept we</font>

174
00:07:26,290 --> 00:07:30,370
bind the public key to<font color="#CCCCCC"> the IP address</font>

175
00:07:28,690 --> 00:07:33,570
<font color="#E5E5E5">and there's always this 1:1 mapping</font>

176
00:07:30,370 --> 00:07:37,570
between a and IP address and public key

177
00:07:33,570 --> 00:07:42,340
so if we look at<font color="#CCCCCC"> just kind of an</font><font color="#E5E5E5"> example</font>

178
00:07:37,570 --> 00:07:44,830
text configuration<font color="#CCCCCC"> a server</font><font color="#E5E5E5"> would have a</font>

179
00:07:42,340 --> 00:07:47,890
private key and<font color="#E5E5E5"> list on</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> well-known</font>

180
00:07:44,830 --> 00:07:51,070
listen port<font color="#E5E5E5"> and it would say</font><font color="#CCCCCC"> alright</font>

181
00:07:47,890 --> 00:07:53,710
<font color="#E5E5E5">this peer can be in the slash 32 in the</font>

182
00:07:51,070 --> 00:07:56,680
slash 24 the other peer can be in this

183
00:07:53,710 --> 00:07:59,169
slash 32 in the<font color="#E5E5E5"> slash</font><font color="#CCCCCC"> 16 but then on the</font>

184
00:07:56,680 --> 00:08:00,690
client the<font color="#CCCCCC"> client might want to</font><font color="#E5E5E5"> say</font>

185
00:07:59,170 --> 00:08:04,180
<font color="#CCCCCC">alright my allowed IP is is going to be</font>

186
00:08:00,690 --> 00:08:06,400
<font color="#E5E5E5">0 0 0 slash 0</font><font color="#CCCCCC"> so that</font><font color="#E5E5E5"> would mean I trust</font>

187
00:08:04,180 --> 00:08:08,950
the server to<font color="#E5E5E5"> send me any packets</font>

188
00:08:06,400 --> 00:08:10,330
through<font color="#E5E5E5"> the tunnel which would be the</font>

189
00:08:08,950 --> 00:08:11,620
case<font color="#E5E5E5"> if you wanted to use a wire at</font>

190
00:08:10,330 --> 00:08:15,880
server for tunneling<font color="#CCCCCC"> internet traffic</font>

191
00:08:11,620 --> 00:08:18,580
for example<font color="#E5E5E5"> so here's the flow of</font>

192
00:08:15,880 --> 00:08:22,360
<font color="#CCCCCC">packets when when you send</font><font color="#E5E5E5"> things from</font>

193
00:08:18,580 --> 00:08:23,859
user space<font color="#CCCCCC"> so you type ping and this</font>

194
00:08:22,360 --> 00:08:26,110
issue is the sense this call you send a

195
00:08:23,860 --> 00:08:28,480
packet the Linux<font color="#E5E5E5"> kernel then goes</font><font color="#CCCCCC"> the</font>

196
00:08:26,110 --> 00:08:30,340
ordinary routing table and it determines

197
00:08:28,480 --> 00:08:33,520
that<font color="#E5E5E5"> this should be routed using the W</font>

198
00:08:30,340 --> 00:08:36,069
<font color="#E5E5E5">g0 interface then wire guard now has the</font>

199
00:08:33,520 --> 00:08:38,470
packet and we<font color="#E5E5E5"> look at the destination IP</font>

200
00:08:36,070 --> 00:08:40,660
address<font color="#CCCCCC"> to determine which peer should</font>

201
00:08:38,470 --> 00:08:41,830
we send<font color="#E5E5E5"> it</font><font color="#CCCCCC"> to and then once we know</font>

202
00:08:40,659 --> 00:08:43,390
which appear we should send<font color="#E5E5E5"> it to we</font>

203
00:08:41,830 --> 00:08:46,690
encrypt it<font color="#E5E5E5"> and we send it</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> that peers</font>

204
00:08:43,390 --> 00:08:48,520
<font color="#CCCCCC">end point</font><font color="#E5E5E5"> on the other</font><font color="#CCCCCC"> end</font><font color="#E5E5E5"> it works in</font>

205
00:08:46,690 --> 00:08:50,620
<font color="#E5E5E5">Reverse where wire guard will</font><font color="#CCCCCC"> receive</font>

206
00:08:48,520 --> 00:08:53,319
<font color="#E5E5E5">through its UDP socket and encrypted</font>

207
00:08:50,620 --> 00:08:54,590
packet it'll decrypt<font color="#E5E5E5"> that and well it</font>

208
00:08:53,320 --> 00:08:58,700
decrypts it and it will<font color="#CCCCCC"> to</font>

209
00:08:54,590 --> 00:09:00,800
<font color="#E5E5E5">Herman which</font><font color="#CCCCCC"> pier encrypted it then</font>

210
00:08:58,700 --> 00:09:04,310
<font color="#CCCCCC">it'll look at</font><font color="#E5E5E5"> the source IP</font><font color="#CCCCCC"> address of</font>

211
00:09:00,800 --> 00:09:07,209
<font color="#CCCCCC">that decrypted packet and say were I to</font>

212
00:09:04,310 --> 00:09:10,280
be sending to<font color="#E5E5E5"> this source IP address</font>

213
00:09:07,210 --> 00:09:12,200
<font color="#CCCCCC">would I send it to</font><font color="#E5E5E5"> the same pier that</font>

214
00:09:10,280 --> 00:09:15,680
just sent<font color="#E5E5E5"> me this packet so it was a</font>

215
00:09:12,200 --> 00:09:17,450
kind<font color="#CCCCCC"> of reverse path filtering there but</font>

216
00:09:15,680 --> 00:09:19,400
cryptographically enforced<font color="#E5E5E5"> and then once</font>

217
00:09:17,450 --> 00:09:21,950
it checks out that<font color="#E5E5E5"> indeed this pier is</font>

218
00:09:19,400 --> 00:09:23,870
<font color="#E5E5E5">allowed</font><font color="#CCCCCC"> to have sent</font><font color="#E5E5E5"> that packet as that</font>

219
00:09:21,950 --> 00:09:26,860
IP<font color="#CCCCCC"> address then it just hands</font><font color="#E5E5E5"> it off to</font>

220
00:09:23,870 --> 00:09:30,770
<font color="#E5E5E5">the rest of the Linux networking stack</font>

221
00:09:26,860 --> 00:09:32,330
so this model<font color="#E5E5E5"> here makes system</font>

222
00:09:30,770 --> 00:09:36,590
administration extremely simple if it

223
00:09:32,330 --> 00:09:40,610
comes from<font color="#CCCCCC"> wt0 and it comes from the IP</font>

224
00:09:36,590 --> 00:09:42,050
address say 191<font color="#E5E5E5"> 68</font><font color="#CCCCCC"> 517</font><font color="#E5E5E5"> and that's for</font>

225
00:09:40,610 --> 00:09:44,120
<font color="#CCCCCC">yoshi's public key then</font><font color="#E5E5E5"> we know it</font>

226
00:09:42,050 --> 00:09:45,439
definitely<font color="#E5E5E5"> came from Yoshi</font><font color="#CCCCCC"> and it</font>

227
00:09:44,120 --> 00:09:48,350
couldn't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> come from</font><font color="#E5E5E5"> anyone else</font>

228
00:09:45,440 --> 00:09:50,090
<font color="#E5E5E5">cryptographically enforced and so the IP</font>

229
00:09:48,350 --> 00:09:51,410
<font color="#CCCCCC">table is rules for this kind of thing or</font>

230
00:09:50,090 --> 00:09:53,630
<font color="#E5E5E5">playing the simple comes from the wiring</font>

231
00:09:51,410 --> 00:09:55,189
interface<font color="#E5E5E5"> it's from the given IP address</font>

232
00:09:53,630 --> 00:09:59,720
and<font color="#E5E5E5"> then you know it's authentically</font>

233
00:09:55,190 --> 00:10:03,830
<font color="#CCCCCC">from who you want it to be from so I</font>

234
00:09:59,720 --> 00:10:05,630
mentioned<font color="#CCCCCC"> this was was simple and the</font>

235
00:10:03,830 --> 00:10:08,960
intent is<font color="#CCCCCC"> that you set things</font><font color="#E5E5E5"> up</font>

236
00:10:05,630 --> 00:10:12,260
stateless<font color="#E5E5E5"> Lee so you have</font><font color="#CCCCCC"> W g0 and it</font>

237
00:10:08,960 --> 00:10:17,360
looks kind of<font color="#E5E5E5"> like an ETA</font><font color="#CCCCCC"> zero but of</font>

238
00:10:12,260 --> 00:10:19,480
<font color="#CCCCCC">course all all</font><font color="#E5E5E5"> network protocols that</font>

239
00:10:17,360 --> 00:10:22,430
use cryptography<font color="#E5E5E5"> or most I should say</font>

240
00:10:19,480 --> 00:10:25,130
require some<font color="#E5E5E5"> kind of state for things</font>

241
00:10:22,430 --> 00:10:28,550
<font color="#CCCCCC">like for secrecy</font><font color="#E5E5E5"> or uncle and key</font>

242
00:10:25,130 --> 00:10:31,640
exchanges and<font color="#CCCCCC"> so forth</font><font color="#E5E5E5"> but wire guard a</font>

243
00:10:28,550 --> 00:10:33,319
<font color="#E5E5E5">peer state listed administrator so the</font>

244
00:10:31,640 --> 00:10:37,819
way we do this is<font color="#E5E5E5"> with a series of</font>

245
00:10:33,320 --> 00:10:39,380
timers and the<font color="#E5E5E5"> timers manage all the</font>

246
00:10:37,820 --> 00:10:41,660
<font color="#E5E5E5">session state invisibly behind the</font>

247
00:10:39,380 --> 00:10:45,920
scenes that doesn't require<font color="#E5E5E5"> any</font>

248
00:10:41,660 --> 00:10:48,250
configuration<font color="#E5E5E5"> and it just works you turn</font>

249
00:10:45,920 --> 00:10:50,599
it<font color="#E5E5E5"> on and</font><font color="#CCCCCC"> wire</font><font color="#E5E5E5"> there it starts working</font>

250
00:10:48,250 --> 00:10:52,130
<font color="#CCCCCC">we've tried to</font><font color="#E5E5E5"> keep the timer model</font>

251
00:10:50,600 --> 00:10:54,620
state machine extremely simple so<font color="#CCCCCC"> that</font>

252
00:10:52,130 --> 00:10:56,689
every<font color="#E5E5E5"> transition between each state is</font>

253
00:10:54,620 --> 00:11:01,490
accounted for so we have no undefined

254
00:10:56,690 --> 00:11:05,210
corners of it so we<font color="#E5E5E5"> have four main</font>

255
00:11:01,490 --> 00:11:06,710
events<font color="#CCCCCC"> user space sends a packet now if</font>

256
00:11:05,210 --> 00:11:08,329
there has been no session<font color="#E5E5E5"> that's been</font>

257
00:11:06,710 --> 00:11:10,249
established<font color="#CCCCCC"> for the last</font><font color="#E5E5E5"> two minutes</font>

258
00:11:08,329 --> 00:11:13,429
then we send a handshake initiation

259
00:11:10,249 --> 00:11:15,199
<font color="#E5E5E5">packet if we don't get a response</font><font color="#CCCCCC"> to</font>

260
00:11:13,429 --> 00:11:19,839
<font color="#CCCCCC">that packet after five seconds then we</font>

261
00:11:15,199 --> 00:11:22,998
send a new one now<font color="#E5E5E5"> after we successfully</font>

262
00:11:19,839 --> 00:11:25,879
<font color="#E5E5E5">authenticate an incoming packet like a</font>

263
00:11:22,999 --> 00:11:27,350
data packet we get from a peer and we're

264
00:11:25,879 --> 00:11:31,730
certain that<font color="#E5E5E5"> the peers actually</font><font color="#CCCCCC"> sent it</font>

265
00:11:27,350 --> 00:11:34,160
to us then we wait 10 seconds<font color="#CCCCCC"> if during</font>

266
00:11:31,730 --> 00:11:36,499
<font color="#E5E5E5">there was 10 seconds we have a packet</font><font color="#CCCCCC"> to</font>

267
00:11:34,160 --> 00:11:39,499
reply<font color="#E5E5E5"> such as I tend to pain you send a</font>

268
00:11:36,499 --> 00:11:41,389
pong<font color="#E5E5E5"> that's fine we do nothing</font><font color="#CCCCCC"> but if we</font>

269
00:11:39,499 --> 00:11:43,970
<font color="#CCCCCC">don't have anything to send within 10</font>

270
00:11:41,389 --> 00:11:47,540
seconds naturally then we just send an

271
00:11:43,970 --> 00:11:51,379
authenticated<font color="#E5E5E5"> empty packet this way if</font>

272
00:11:47,540 --> 00:11:53,029
we've sent<font color="#CCCCCC"> information but but we</font>

273
00:11:51,379 --> 00:11:54,949
<font color="#E5E5E5">haven't received anything back within 15</font>

274
00:11:53,029 --> 00:11:57,559
seconds<font color="#E5E5E5"> we know something went wrong</font>

275
00:11:54,949 --> 00:12:00,040
with<font color="#E5E5E5"> the with the connection and we send</font>

276
00:11:57,559 --> 00:12:03,769
a new handshake initiation

277
00:12:00,040 --> 00:12:05,868
now notably the this all stops<font color="#E5E5E5"> when</font>

278
00:12:03,769 --> 00:12:07,610
<font color="#CCCCCC">no-one's sending anything if no one's</font>

279
00:12:05,869 --> 00:12:09,259
<font color="#E5E5E5">sending anything I haven't received a</font>

280
00:12:07,610 --> 00:12:11,480
message<font color="#E5E5E5"> that I'm inclined to reply to</font>

281
00:12:09,259 --> 00:12:13,669
and so I don't reply<font color="#E5E5E5"> and so it goes</font>

282
00:12:11,480 --> 00:12:15,709
silent<font color="#E5E5E5"> which is nice</font><font color="#CCCCCC"> for stealth</font><font color="#E5E5E5"> as I'll</font>

283
00:12:13,669 --> 00:12:18,410
see you later<font color="#E5E5E5"> but well people are</font>

284
00:12:15,709 --> 00:12:21,378
talking we make sure that<font color="#CCCCCC"> we'll continue</font>

285
00:12:18,410 --> 00:12:26,238
<font color="#E5E5E5">to</font><font color="#CCCCCC"> be able to</font><font color="#E5E5E5"> talk successfully with</font>

286
00:12:21,379 --> 00:12:28,970
simple time or state machine<font color="#CCCCCC"> so as I</font>

287
00:12:26,239 --> 00:12:30,949
<font color="#E5E5E5">mentioned the</font><font color="#CCCCCC"> the interface is super</font>

288
00:12:28,970 --> 00:12:32,629
<font color="#E5E5E5">simple</font><font color="#CCCCCC"> it's trying</font><font color="#E5E5E5"> to be stateless to</font>

289
00:12:30,949 --> 00:12:34,758
the administrator<font color="#CCCCCC"> we add it interface</font>

290
00:12:32,629 --> 00:12:38,869
you configure its peers and then

291
00:12:34,759 --> 00:12:40,369
<font color="#CCCCCC">immediately you can just send packets we</font>

292
00:12:38,869 --> 00:12:43,459
try and have very few configuration

293
00:12:40,369 --> 00:12:45,829
knobs for this and the goal is<font color="#CCCCCC"> that if</font>

294
00:12:43,459 --> 00:12:48,439
you set it<font color="#CCCCCC"> up wrong it</font><font color="#E5E5E5"> just won't work</font>

295
00:12:45,829 --> 00:12:50,569
<font color="#CCCCCC">as opposed to setting</font><font color="#E5E5E5"> it up wrong and</font>

296
00:12:48,439 --> 00:12:52,759
then<font color="#E5E5E5"> you have some terrible security</font>

297
00:12:50,569 --> 00:12:54,860
catastrophe<font color="#E5E5E5"> they didn't realize because</font>

298
00:12:52,759 --> 00:12:59,329
<font color="#CCCCCC">it seemed</font><font color="#E5E5E5"> to be working</font><font color="#CCCCCC"> no but in this</font>

299
00:12:54,860 --> 00:13:02,029
case we want to<font color="#CCCCCC"> failsafe</font><font color="#E5E5E5"> the endpoints</font>

300
00:12:59,329 --> 00:13:05,689
also<font color="#CCCCCC"> Rome</font><font color="#E5E5E5"> so you don't actually have to</font>

301
00:13:02,029 --> 00:13:06,230
<font color="#CCCCCC">specify where</font><font color="#E5E5E5"> to reach a peer on the</font>

302
00:13:05,689 --> 00:13:09,649
<font color="#CCCCCC">Internet</font>

303
00:13:06,230 --> 00:13:10,970
if a packet<font color="#CCCCCC"> from</font><font color="#E5E5E5"> a peer arrives at your</font>

304
00:13:09,649 --> 00:13:12,860
computer<font color="#E5E5E5"> and it authenticates</font>

305
00:13:10,970 --> 00:13:14,809
successfully then if you want to<font color="#E5E5E5"> talk</font>

306
00:13:12,860 --> 00:13:16,850
back<font color="#CCCCCC"> to that peer you just talk back to</font>

307
00:13:14,809 --> 00:13:19,219
wherever that peer was sending packets

308
00:13:16,850 --> 00:13:20,779
from<font color="#E5E5E5"> so this means if</font><font color="#CCCCCC"> you put</font><font color="#E5E5E5"> your</font>

309
00:13:19,220 --> 00:13:21,800
laptop<font color="#E5E5E5"> to sleep and what network and</font>

310
00:13:20,779 --> 00:13:23,060
wake it<font color="#E5E5E5"> up in another</font>

311
00:13:21,800 --> 00:13:24,550
<font color="#E5E5E5">it'll just</font><font color="#CCCCCC"> keep</font><font color="#E5E5E5"> working or</font><font color="#CCCCCC"> roam</font>

312
00:13:23,060 --> 00:13:27,680
seamlessly with<font color="#CCCCCC"> to one from the</font><font color="#E5E5E5"> other</font>

313
00:13:24,550 --> 00:13:30,500
from one<font color="#E5E5E5"> to the other</font><font color="#CCCCCC"> if you have a</font>

314
00:13:27,680 --> 00:13:32,390
mobile<font color="#CCCCCC"> phone</font><font color="#E5E5E5"> with Wi-Fi</font><font color="#CCCCCC"> and and cellular</font>

315
00:13:30,500 --> 00:13:34,490
and you switch between the two<font color="#E5E5E5"> it'll</font>

316
00:13:32,390 --> 00:13:36,350
just roam automatically between<font color="#CCCCCC"> the two</font>

317
00:13:34,490 --> 00:13:41,810
of them<font color="#CCCCCC"> if you've ever used</font>

318
00:13:36,350 --> 00:13:47,959
<font color="#CCCCCC">maash which is kind of</font><font color="#E5E5E5"> a UDP SSH</font><font color="#CCCCCC"> it's</font>

319
00:13:41,810 --> 00:13:49,459
<font color="#CCCCCC">very similar in nature to</font><font color="#E5E5E5"> that so before</font>

320
00:13:47,959 --> 00:13:50,959
<font color="#CCCCCC">we go</font><font color="#E5E5E5"> further into how this all works I</font>

321
00:13:49,459 --> 00:13:52,760
<font color="#CCCCCC">just want to show a demo of</font><font color="#E5E5E5"> what it's</font>

322
00:13:50,959 --> 00:13:56,410
like to<font color="#E5E5E5"> set</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> up so you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> more more</font>

323
00:13:52,760 --> 00:13:56,410
intuition<font color="#E5E5E5"> on</font><font color="#CCCCCC"> what this all looks like</font>

324
00:13:59,589 --> 00:14:07,880
<font color="#E5E5E5">okay so we have a peer a and a peer B so</font>

325
00:14:05,390 --> 00:14:09,649
a peer a will generate a new<font color="#CCCCCC"> product GWG</font>

326
00:14:07,880 --> 00:14:11,839
<font color="#CCCCCC">Genki and</font><font color="#E5E5E5"> we'll do the same on pure</font><font color="#CCCCCC"> beef</font>

327
00:14:09,649 --> 00:14:16,029
and when we look at<font color="#E5E5E5"> the private</font><font color="#CCCCCC"> keys</font>

328
00:14:11,839 --> 00:14:18,680
these very short base64 encoded<font color="#E5E5E5"> string</font>

329
00:14:16,029 --> 00:14:25,790
<font color="#E5E5E5">then from the private key we</font><font color="#CCCCCC"> can drive a</font>

330
00:14:18,680 --> 00:14:27,500
public key using WG pub key<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> now in</font>

331
00:14:25,790 --> 00:14:30,620
<font color="#E5E5E5">puree we add a wire guard interface so</font>

332
00:14:27,500 --> 00:14:33,410
and to be<font color="#CCCCCC"> 0 type wire guard</font><font color="#E5E5E5"> we give it</font>

333
00:14:30,620 --> 00:14:39,310
an<font color="#E5E5E5"> IP address this</font><font color="#CCCCCC"> is just kind of</font>

334
00:14:33,410 --> 00:14:41,750
<font color="#E5E5E5">normal boring Linux networking stuff and</font>

335
00:14:39,310 --> 00:14:43,550
then we tell it here's the<font color="#E5E5E5"> private key</font>

336
00:14:41,750 --> 00:14:45,500
that<font color="#E5E5E5"> you should use because we just</font>

337
00:14:43,550 --> 00:14:48,130
generated<font color="#E5E5E5"> this file in private and then</font>

338
00:14:45,500 --> 00:14:51,230
<font color="#CCCCCC">we set the interface up using</font><font color="#E5E5E5"> IP link</font>

339
00:14:48,130 --> 00:14:55,040
<font color="#E5E5E5">setup then we</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> the same on</font><font color="#CCCCCC"> pure beef</font>

340
00:14:51,230 --> 00:14:56,290
we have a<font color="#E5E5E5"> WG interface we give it an IP</font>

341
00:14:55,040 --> 00:14:59,990
address

342
00:14:56,290 --> 00:15:04,459
<font color="#E5E5E5">you know we assign it</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> private key</font>

343
00:14:59,990 --> 00:15:10,699
that<font color="#E5E5E5"> we've just generated and we set it</font>

344
00:15:04,459 --> 00:15:14,750
<font color="#CCCCCC">up</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> now when</font><font color="#E5E5E5"> we hit IP address we can</font>

345
00:15:10,699 --> 00:15:18,050
<font color="#CCCCCC">see the various various interfaces we</font>

346
00:15:14,750 --> 00:15:22,490
have to start with we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> ETA</font><font color="#CCCCCC"> 0 that's</font>

347
00:15:18,050 --> 00:15:27,319
like our<font color="#E5E5E5"> internet facing interface so</font>

348
00:15:22,490 --> 00:15:30,199
that's in<font color="#E5E5E5"> the 192 168 range and then we</font>

349
00:15:27,320 --> 00:15:32,930
have WG<font color="#CCCCCC"> zero and that's</font><font color="#E5E5E5"> an is like a 10</font>

350
00:15:30,199 --> 00:15:35,390
<font color="#CCCCCC">slash 24 range so</font><font color="#E5E5E5"> that's inside the</font>

351
00:15:32,930 --> 00:15:35,660
tunnel so now let's tell the peers<font color="#E5E5E5"> of</font>

352
00:15:35,390 --> 00:15:39,439
battle

353
00:15:35,660 --> 00:15:40,939
each other when we hit<font color="#CCCCCC"> wd0</font><font color="#E5E5E5"> we see that</font>

354
00:15:39,440 --> 00:15:42,530
they each have a public key and<font color="#E5E5E5"> a</font>

355
00:15:40,940 --> 00:15:44,660
<font color="#CCCCCC">private key now they're both listening</font>

356
00:15:42,530 --> 00:15:46,699
on a port and<font color="#CCCCCC"> that will tell one to</font>

357
00:15:44,660 --> 00:15:49,069
<font color="#E5E5E5">another with the amazing key exchange</font>

358
00:15:46,700 --> 00:15:50,900
mechanism called copy and paste now were

359
00:15:49,070 --> 00:15:52,640
<font color="#E5E5E5">you to be using this in</font><font color="#CCCCCC"> a bigger setting</font>

360
00:15:50,900 --> 00:15:55,520
you<font color="#E5E5E5"> could of course strip this use</font>

361
00:15:52,640 --> 00:15:58,310
databases<font color="#E5E5E5"> even use TLS it doesn't matter</font>

362
00:15:55,520 --> 00:15:59,840
<font color="#E5E5E5">but just for this we're doing the</font>

363
00:15:58,310 --> 00:16:01,880
initial key exchange through copy and

364
00:15:59,840 --> 00:16:07,700
paste which I'm sure you've already done

365
00:16:01,880 --> 00:16:09,740
with say SSH so we tell<font color="#CCCCCC"> puree about pier</font>

366
00:16:07,700 --> 00:16:12,560
<font color="#E5E5E5">B we gave it the public</font><font color="#CCCCCC"> key</font><font color="#E5E5E5"> and we say</font>

367
00:16:09,740 --> 00:16:14,660
here the IP address is that<font color="#E5E5E5"> B is allowed</font>

368
00:16:12,560 --> 00:16:16,479
to<font color="#E5E5E5"> be in the tunnel</font><font color="#CCCCCC"> and here's its</font><font color="#E5E5E5"> end</font>

369
00:16:14,660 --> 00:16:20,569
<font color="#E5E5E5">point on the Internet</font>

370
00:16:16,480 --> 00:16:23,600
and now we do the<font color="#CCCCCC"> same thing</font><font color="#E5E5E5"> on pure B</font>

371
00:16:20,570 --> 00:16:27,740
we say<font color="#CCCCCC"> okay here's purées public key</font>

372
00:16:23,600 --> 00:16:29,900
again<font color="#E5E5E5"> copy and paste here we give it the</font>

373
00:16:27,740 --> 00:16:33,350
IP address<font color="#CCCCCC"> that it's allowed to be</font>

374
00:16:29,900 --> 00:16:37,760
inside the tunnel and then<font color="#E5E5E5"> we tell it</font>

375
00:16:33,350 --> 00:16:39,170
here's<font color="#E5E5E5"> your internet facing endpoint and</font>

376
00:16:37,760 --> 00:16:41,720
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> pretty much</font><font color="#E5E5E5"> it with the</font><font color="#CCCCCC"> setup at</font>

377
00:16:39,170 --> 00:16:43,969
<font color="#E5E5E5">after this we can</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> hang the other</font>

378
00:16:41,720 --> 00:16:47,180
side and it works<font color="#E5E5E5"> it's not</font><font color="#CCCCCC"> more</font>

379
00:16:43,970 --> 00:16:50,270
<font color="#CCCCCC">complicated than that wire guard does</font>

380
00:16:47,180 --> 00:16:52,099
not do much more than<font color="#CCCCCC"> that either</font><font color="#E5E5E5"> and</font>

381
00:16:50,270 --> 00:16:54,829
<font color="#E5E5E5">when we hit W</font><font color="#CCCCCC"> Ginette</font><font color="#E5E5E5"> now we see you</font>

382
00:16:52,100 --> 00:16:57,350
know they had a<font color="#E5E5E5"> handshake and exchanged</font>

383
00:16:54,830 --> 00:16:59,330
some data and all as well<font color="#E5E5E5"> but that's</font>

384
00:16:57,350 --> 00:17:02,230
<font color="#E5E5E5">pretty much it as far as wire guard did</font>

385
00:16:59,330 --> 00:17:04,700
you have peers and you can exchange<font color="#E5E5E5"> keys</font>

386
00:17:02,230 --> 00:17:07,900
<font color="#E5E5E5">and then they can talk ever after and</font>

387
00:17:04,700 --> 00:17:13,460
you have this layer 3 interface that's

388
00:17:07,900 --> 00:17:14,870
<font color="#CCCCCC">new</font><font color="#E5E5E5"> secure it's intentionally small</font><font color="#CCCCCC"> wire</font>

389
00:17:13,460 --> 00:17:16,840
<font color="#E5E5E5">guard is intentionally the small</font>

390
00:17:14,869 --> 00:17:21,469
building block that<font color="#CCCCCC"> we want</font><font color="#E5E5E5"> to keep</font>

391
00:17:16,839 --> 00:17:23,209
secure<font color="#E5E5E5"> compact easy to understand and</font>

392
00:17:21,470 --> 00:17:25,280
then from that<font color="#E5E5E5"> you can build more</font>

393
00:17:23,210 --> 00:17:28,610
<font color="#E5E5E5">complicated systems but we want the</font>

394
00:17:25,280 --> 00:17:32,800
crucial element<font color="#E5E5E5"> the building block to be</font>

395
00:17:28,610 --> 00:17:37,040
as secure and simple<font color="#CCCCCC"> as</font><font color="#E5E5E5"> possible</font><font color="#CCCCCC"> so</font>

396
00:17:32,800 --> 00:17:40,730
<font color="#CCCCCC">since this wgz er this WG tool</font><font color="#E5E5E5"> that we</font>

397
00:17:37,040 --> 00:17:43,909
just used<font color="#CCCCCC"> it's very simple you can build</font>

398
00:17:40,730 --> 00:17:45,530
more complicated tools around<font color="#CCCCCC"> it so</font>

399
00:17:43,910 --> 00:17:47,510
there's already integration<font color="#E5E5E5"> around this</font>

400
00:17:45,530 --> 00:17:47,750
tooling<font color="#E5E5E5"> in the various network manager</font>

401
00:17:47,510 --> 00:17:51,530
is

402
00:17:47,750 --> 00:17:53,540
<font color="#CCCCCC">in open wrt</font><font color="#E5E5E5"> hits</font><font color="#CCCCCC"> in gentoos open our</font>

403
00:17:51,530 --> 00:17:55,220
<font color="#E5E5E5">seas and</font><font color="#CCCCCC"> nick sauce it's even in</font><font color="#E5E5E5"> systemd</font>

404
00:17:53,540 --> 00:17:58,850
now and<font color="#E5E5E5"> linux kit</font>

405
00:17:55,220 --> 00:18:02,270
listen ubiquity routers<font color="#CCCCCC"> it's a network</font>

406
00:17:58,850 --> 00:18:03,860
manager<font color="#E5E5E5"> so it's</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> simple interface</font>

407
00:18:02,270 --> 00:18:08,570
<font color="#E5E5E5">then you can integrate it into other</font>

408
00:18:03,860 --> 00:18:11,479
<font color="#CCCCCC">things so here's one example as WG quick</font>

409
00:18:08,570 --> 00:18:12,790
is a little bash script I wrote that<font color="#E5E5E5"> I</font>

410
00:18:11,480 --> 00:18:15,140
now distribute with the tools because

411
00:18:12,790 --> 00:18:17,960
people seem to<font color="#E5E5E5"> enjoy using it but it's</font>

412
00:18:15,140 --> 00:18:21,290
just<font color="#E5E5E5"> a tiny dumb bash script that wraps</font>

413
00:18:17,960 --> 00:18:25,280
<font color="#E5E5E5">i pianned WG and</font><font color="#CCCCCC"> adds a couple extra</font>

414
00:18:21,290 --> 00:18:30,260
fields to a config file<font color="#CCCCCC"> it adds a post</font>

415
00:18:25,280 --> 00:18:32,149
down<font color="#CCCCCC"> in case your and a post up and pre</font>

416
00:18:30,260 --> 00:18:34,820
up and<font color="#E5E5E5"> so forth you</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> around</font><font color="#E5E5E5"> some</font>

417
00:18:32,150 --> 00:18:37,190
commands<font color="#E5E5E5"> you can set the address and</font><font color="#CCCCCC"> DNS</font>

418
00:18:34,820 --> 00:18:40,280
from<font color="#E5E5E5"> within it and then you</font><font color="#CCCCCC"> just run WD</font>

419
00:18:37,190 --> 00:18:41,840
quick up and<font color="#E5E5E5"> WG quick down to have your</font>

420
00:18:40,280 --> 00:18:45,530
interface instead<font color="#E5E5E5"> of having to plug all</font>

421
00:18:41,840 --> 00:18:47,209
the keys<font color="#CCCCCC"> in manually and you know that's</font>

422
00:18:45,530 --> 00:18:49,700
<font color="#E5E5E5">great convenient works right on my</font>

423
00:18:47,210 --> 00:18:52,880
laptop<font color="#E5E5E5"> but at the end</font><font color="#CCCCCC"> of the day that's</font>

424
00:18:49,700 --> 00:18:56,900
just<font color="#E5E5E5"> a dumb shell script around these</font>

425
00:18:52,880 --> 00:18:58,190
other smaller tools<font color="#E5E5E5"> and that's the kind</font>

426
00:18:56,900 --> 00:19:00,050
<font color="#CCCCCC">of development that wire guard</font>

427
00:18:58,190 --> 00:19:01,310
encourages where we have this nice

428
00:19:00,050 --> 00:19:04,430
building block and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> build up</font>

429
00:19:01,310 --> 00:19:06,889
<font color="#E5E5E5">from that it also works nicely with</font>

430
00:19:04,430 --> 00:19:10,430
<font color="#CCCCCC">Network namespaces if you if you use</font>

431
00:19:06,890 --> 00:19:13,270
those in Linux before the<font color="#CCCCCC"> wire</font><font color="#E5E5E5"> interface</font>

432
00:19:10,430 --> 00:19:15,770
can live in<font color="#CCCCCC"> one network namespace and</font>

433
00:19:13,270 --> 00:19:18,350
the physical interface<font color="#E5E5E5"> can live in</font>

434
00:19:15,770 --> 00:19:20,060
another one<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you can choose where the</font>

435
00:19:18,350 --> 00:19:23,389
socket<font color="#CCCCCC"> that wire guard is using to</font>

436
00:19:20,060 --> 00:19:24,830
exchange<font color="#E5E5E5"> encrypted UDP packets lives so</font>

437
00:19:23,390 --> 00:19:27,560
for<font color="#E5E5E5"> example you could let a docker</font>

438
00:19:24,830 --> 00:19:30,860
container only<font color="#E5E5E5"> access the</font><font color="#CCCCCC"> internet via</font>

439
00:19:27,560 --> 00:19:33,230
wire guard<font color="#CCCCCC"> you can only let your DHCP</font>

440
00:19:30,860 --> 00:19:35,929
<font color="#E5E5E5">clients touch physical interfaces but</font>

441
00:19:33,230 --> 00:19:38,530
then let your web browser only<font color="#E5E5E5"> see the</font>

442
00:19:35,930 --> 00:19:42,410
wire<font color="#CCCCCC"> interface and nothing else</font>

443
00:19:38,530 --> 00:19:45,290
<font color="#E5E5E5">so for the the container case you might</font>

444
00:19:42,410 --> 00:19:48,380
<font color="#E5E5E5">have in your in a</font><font color="#CCCCCC"> namespace your ETA 0</font>

445
00:19:45,290 --> 00:19:50,780
<font color="#CCCCCC">and W and</font><font color="#E5E5E5"> 0 and in your container</font>

446
00:19:48,380 --> 00:19:53,810
namespace like in your doctor place<font color="#E5E5E5"> you</font>

447
00:19:50,780 --> 00:19:55,700
only have WG 0<font color="#E5E5E5"> so when you look at you</font>

448
00:19:53,810 --> 00:19:57,740
know<font color="#CCCCCC"> I have configure out put within</font><font color="#E5E5E5"> the</font>

449
00:19:55,700 --> 00:20:00,410
container<font color="#E5E5E5"> the only interface those</font>

450
00:19:57,740 --> 00:20:02,120
processes can see is double

451
00:20:00,410 --> 00:20:04,130
<font color="#CCCCCC">the only way it has to access</font><font color="#E5E5E5"> the</font>

452
00:20:02,120 --> 00:20:06,620
outside world is through wire guard but

453
00:20:04,130 --> 00:20:08,810
meanwhile the socket wire guard uses<font color="#E5E5E5"> is</font>

454
00:20:06,620 --> 00:20:11,000
over in your innovative<font color="#E5E5E5"> space and so the</font>

455
00:20:08,810 --> 00:20:15,139
encrypted<font color="#E5E5E5"> packets go out through the</font>

456
00:20:11,000 --> 00:20:17,900
interfaces<font color="#E5E5E5"> you expect it to go out we</font>

457
00:20:15,140 --> 00:20:20,150
could also reverse<font color="#CCCCCC"> the whole thing this</font>

458
00:20:17,900 --> 00:20:21,440
<font color="#E5E5E5">is running on my laptop right</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> for</font>

459
00:20:20,150 --> 00:20:24,980
the purposes of<font color="#E5E5E5"> a security conference</font>

460
00:20:21,440 --> 00:20:27,620
where I have in my<font color="#CCCCCC"> init namespace only</font>

461
00:20:24,980 --> 00:20:30,800
WG<font color="#E5E5E5"> zero</font><font color="#CCCCCC"> where in a physical namespace</font>

462
00:20:27,620 --> 00:20:34,340
<font color="#CCCCCC">are natives I'd call physical I have my</font>

463
00:20:30,800 --> 00:20:35,629
actual<font color="#E5E5E5"> Ethernet adapter so my DCP client</font>

464
00:20:34,340 --> 00:20:41,090
and<font color="#CCCCCC"> it could be a supplicant and all</font>

465
00:20:35,630 --> 00:20:43,460
that<font color="#CCCCCC"> know-how can</font><font color="#E5E5E5"> only see can only see</font>

466
00:20:41,090 --> 00:20:44,990
my physical interfaces<font color="#CCCCCC"> whereas the</font><font color="#E5E5E5"> only</font>

467
00:20:43,460 --> 00:20:48,770
way<font color="#CCCCCC"> my web browser</font><font color="#E5E5E5"> can access the</font>

468
00:20:44,990 --> 00:20:50,630
Internet is to WG<font color="#E5E5E5"> zero and so we have a</font>

469
00:20:48,770 --> 00:20:53,090
perfect separation<font color="#E5E5E5"> so I'm not going to</font>

470
00:20:50,630 --> 00:20:58,190
leak<font color="#E5E5E5"> any plain text by accident</font><font color="#CCCCCC"> to</font>

471
00:20:53,090 --> 00:21:00,590
blackhat Wi-Fi network<font color="#CCCCCC"> all right so next</font>

472
00:20:58,190 --> 00:21:04,220
next principle<font color="#E5E5E5"> and secure design we</font><font color="#CCCCCC"> want</font>

473
00:21:00,590 --> 00:21:06,169
<font color="#E5E5E5">to have static fixed length headers so</font>

474
00:21:04,220 --> 00:21:09,530
all the packet headers have<font color="#E5E5E5"> fixed</font><font color="#CCCCCC"> width</font>

475
00:21:06,170 --> 00:21:11,570
<font color="#CCCCCC">field</font><font color="#E5E5E5"> so there's no parsing and so we</font>

476
00:21:09,530 --> 00:21:13,610
eliminate all<font color="#E5E5E5"> parts or volts this is</font>

477
00:21:11,570 --> 00:21:16,580
<font color="#E5E5E5">kind of amazing</font><font color="#CCCCCC"> if we have no Parkers we</font>

478
00:21:13,610 --> 00:21:19,760
have no partial vulnerabilities<font color="#E5E5E5"> really</font>

479
00:21:16,580 --> 00:21:21,470
simple obvious basic thing<font color="#E5E5E5"> but it's not</font>

480
00:21:19,760 --> 00:21:24,710
done<font color="#E5E5E5"> in practice but when you do it then</font>

481
00:21:21,470 --> 00:21:27,440
you<font color="#CCCCCC"> just get rid</font><font color="#E5E5E5"> of years of security</font>

482
00:21:24,710 --> 00:21:29,150
researchers<font color="#E5E5E5"> coming after you</font><font color="#CCCCCC"> which is a</font>

483
00:21:27,440 --> 00:21:32,840
lot different<font color="#CCCCCC"> than what's been done say</font>

484
00:21:29,150 --> 00:21:37,580
yes and one<font color="#CCCCCC"> an x.509 where you have</font>

485
00:21:32,840 --> 00:21:40,550
these crazy formats and every time it's

486
00:21:37,580 --> 00:21:42,530
been<font color="#E5E5E5"> implemented it has a bug I don't</font>

487
00:21:40,550 --> 00:21:46,399
know anyone<font color="#E5E5E5"> that can make a asn.1 parser</font>

488
00:21:42,530 --> 00:21:47,810
correct<font color="#CCCCCC"> on the first try so we don't</font>

489
00:21:46,400 --> 00:21:52,790
give ourselves that challenge instead<font color="#E5E5E5"> we</font>

490
00:21:47,810 --> 00:21:55,340
<font color="#CCCCCC">just have fixed fixed with headers we</font>

491
00:21:52,790 --> 00:21:58,760
also have static allocations<font color="#E5E5E5"> and guarded</font>

492
00:21:55,340 --> 00:22:00,770
<font color="#E5E5E5">state everywhere and this is a little</font>

493
00:21:58,760 --> 00:22:02,600
bit harder to<font color="#E5E5E5"> do in practice so all the</font>

494
00:22:00,770 --> 00:22:05,660
state required for<font color="#E5E5E5"> wire guard to work is</font>

495
00:22:02,600 --> 00:22:11,000
allocated<font color="#CCCCCC"> at configuration time instead</font>

496
00:22:05,660 --> 00:22:13,340
<font color="#E5E5E5">of in response to packets so we get a</font>

497
00:22:11,000 --> 00:22:14,300
packet<font color="#E5E5E5"> we can't do any dynamic memory</font>

498
00:22:13,340 --> 00:22:17,120
allocation

499
00:22:14,300 --> 00:22:20,510
which is great eliminates a lot<font color="#CCCCCC"> of heat</font>

500
00:22:17,120 --> 00:22:22,550
fuller abilities<font color="#CCCCCC"> but it also places</font>

501
00:22:20,510 --> 00:22:24,200
<font color="#CCCCCC">unusual set</font><font color="#E5E5E5"> constraints on the</font>

502
00:22:22,550 --> 00:22:26,780
cryptography we're using because it

503
00:22:24,200 --> 00:22:32,960
<font color="#CCCCCC">means that we can only operate over a</font>

504
00:22:26,780 --> 00:22:35,230
<font color="#E5E5E5">very finite set of state and corollary</font>

505
00:22:32,960 --> 00:22:37,880
of<font color="#CCCCCC"> this is that no state then can be</font>

506
00:22:35,230 --> 00:22:40,190
modified in response to unauthenticated

507
00:22:37,880 --> 00:22:42,560
packets since then you could have an

508
00:22:40,190 --> 00:22:46,160
attacker used up use up all your finite

509
00:22:42,560 --> 00:22:48,770
<font color="#E5E5E5">state so on one</font><font color="#CCCCCC"> again it's great</font><font color="#E5E5E5"> that an</font>

510
00:22:46,160 --> 00:22:50,660
attacker can't use any state eliminates

511
00:22:48,770 --> 00:22:53,440
and other classic vulnerabilities<font color="#E5E5E5"> but</font>

512
00:22:50,660 --> 00:22:56,390
<font color="#CCCCCC">also puts more constraints on the crypto</font>

513
00:22:53,440 --> 00:22:58,130
<font color="#CCCCCC">so interesting part of the wire guard</font>

514
00:22:56,390 --> 00:23:00,380
project is coming<font color="#E5E5E5"> from this perspective</font>

515
00:22:58,130 --> 00:23:01,430
of<font color="#E5E5E5"> okay we want to code this in a</font>

516
00:23:00,380 --> 00:23:03,950
certain<font color="#CCCCCC"> way we want</font><font color="#E5E5E5"> to have these</font>

517
00:23:01,430 --> 00:23:06,500
defense and depth techniques<font color="#CCCCCC"> all right</font>

518
00:23:03,950 --> 00:23:07,820
now how do we<font color="#E5E5E5"> make</font><font color="#CCCCCC"> the protocol</font><font color="#E5E5E5"> so that</font>

519
00:23:06,500 --> 00:23:10,190
we can code it in a way<font color="#CCCCCC"> that's secure</font>

520
00:23:07,820 --> 00:23:11,510
<font color="#CCCCCC">most</font><font color="#E5E5E5"> network protocols are done in</font>

521
00:23:10,190 --> 00:23:13,580
Reverse where you have a room of

522
00:23:11,510 --> 00:23:16,150
networking<font color="#E5E5E5"> people and crypto people who</font>

523
00:23:13,580 --> 00:23:18,470
dream up the<font color="#E5E5E5"> best things they can and</font>

524
00:23:16,150 --> 00:23:20,600
and then you know the poor<font color="#E5E5E5"> implementer</font>

525
00:23:18,470 --> 00:23:24,410
<font color="#E5E5E5">is try and</font><font color="#CCCCCC"> code and it's a disaster</font>

526
00:23:20,600 --> 00:23:26,360
so with with wire guard we're trying to

527
00:23:24,410 --> 00:23:29,960
take<font color="#E5E5E5"> into</font><font color="#CCCCCC"> account both considerations at</font>

528
00:23:26,360 --> 00:23:32,979
the same time as I alluded to<font color="#CCCCCC"> before</font>

529
00:23:29,960 --> 00:23:36,200
<font color="#CCCCCC">wire guard</font><font color="#E5E5E5"> is intentionally stealthy</font>

530
00:23:32,980 --> 00:23:38,720
<font color="#E5E5E5">grew out of a rootkit project so needed</font>

531
00:23:36,200 --> 00:23:40,850
<font color="#E5E5E5">not</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be discovered</font><font color="#CCCCCC"> and so it</font><font color="#E5E5E5"> doesn't</font>

532
00:23:38,720 --> 00:23:43,160
respond<font color="#E5E5E5"> it doesn't respond to any</font>

533
00:23:40,850 --> 00:23:47,000
unauthenticated packets you can't scan

534
00:23:43,160 --> 00:23:49,190
for on the<font color="#E5E5E5"> internet and so it'll</font><font color="#CCCCCC"> only</font>

535
00:23:47,000 --> 00:23:52,130
respond to<font color="#E5E5E5"> you if you send a packet</font><font color="#CCCCCC"> that</font>

536
00:23:49,190 --> 00:23:53,390
<font color="#CCCCCC">has the right</font><font color="#E5E5E5"> cryptography in it it's</font>

537
00:23:52,130 --> 00:23:55,880
also nice<font color="#E5E5E5"> because</font><font color="#CCCCCC"> it's not it's not</font>

538
00:23:53,390 --> 00:23:57,530
chatty<font color="#CCCCCC"> so if you're using this</font><font color="#E5E5E5"> on a</font>

539
00:23:55,880 --> 00:24:00,080
mobile<font color="#E5E5E5"> phone with</font><font color="#CCCCCC"> filament of battery</font>

540
00:23:57,530 --> 00:24:02,330
it's not going to be sending<font color="#CCCCCC"> random</font>

541
00:24:00,080 --> 00:24:07,159
useless<font color="#E5E5E5"> junk all days because just go</font>

542
00:24:02,330 --> 00:24:09,350
silent<font color="#E5E5E5"> when it's not in</font><font color="#CCCCCC"> use so to</font>

543
00:24:07,160 --> 00:24:11,180
<font color="#CCCCCC">achieve this</font><font color="#E5E5E5"> we want to have solid</font>

544
00:24:09,350 --> 00:24:15,679
crypto we're using<font color="#E5E5E5"> Trevor parens noise</font>

545
00:24:11,180 --> 00:24:17,720
protocol framework<font color="#E5E5E5"> wire guard project</font>

546
00:24:15,680 --> 00:24:20,480
was involved really<font color="#E5E5E5"> early early on with</font>

547
00:24:17,720 --> 00:24:22,160
noise and<font color="#CCCCCC"> so we went back and</font><font color="#E5E5E5"> forth</font>

548
00:24:20,480 --> 00:24:23,870
<font color="#E5E5E5">trying to make</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that noise would be</font>

549
00:24:22,160 --> 00:24:25,910
able<font color="#E5E5E5"> to fulfill</font><font color="#CCCCCC"> the goals that we had</font>

550
00:24:23,870 --> 00:24:28,299
for<font color="#E5E5E5"> wire guard and and what's</font><font color="#CCCCCC"> come out</font>

551
00:24:25,910 --> 00:24:30,950
<font color="#E5E5E5">is quite nice</font>

552
00:24:28,299 --> 00:24:33,408
noise itself is<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> related</font><font color="#CCCCCC"> and</font>

553
00:24:30,950 --> 00:24:35,330
spirits a signal protocol<font color="#E5E5E5"> similar set of</font>

554
00:24:33,409 --> 00:24:37,610
ideas though totally<font color="#E5E5E5"> different protocol</font>

555
00:24:35,330 --> 00:24:40,490
<font color="#E5E5E5">because it comes from the same guy</font><font color="#CCCCCC"> and</font>

556
00:24:37,610 --> 00:24:42,620
it has the usual list of desirable

557
00:24:40,490 --> 00:24:45,470
property as<font color="#E5E5E5"> you want from a modern key</font>

558
00:24:42,620 --> 00:24:48,168
exchange<font color="#CCCCCC"> we're also</font><font color="#E5E5E5"> using modern</font>

559
00:24:45,470 --> 00:24:51,140
primitives we're using a curve<font color="#E5E5E5"> to 5:19</font>

560
00:24:48,169 --> 00:24:54,320
we're using<font color="#CCCCCC"> Blake 2 as a hash function</font>

561
00:24:51,140 --> 00:24:59,240
<font color="#E5E5E5">we're using cha-cha</font><font color="#CCCCCC"> 20</font><font color="#E5E5E5"> point</font><font color="#CCCCCC"> 1 3 or 5 as</font>

562
00:24:54,320 --> 00:25:01,100
an<font color="#CCCCCC"> AE ad now</font><font color="#E5E5E5"> importantly there's no</font>

563
00:24:59,240 --> 00:25:04,970
<font color="#CCCCCC">cypher agility you don't get</font><font color="#E5E5E5"> to choose</font>

564
00:25:01,100 --> 00:25:08,658
<font color="#E5E5E5">this is what we have and if you've got a</font>

565
00:25:04,970 --> 00:25:11,779
different<font color="#CCCCCC"> opinion sorry no this is what</font>

566
00:25:08,659 --> 00:25:15,049
you<font color="#E5E5E5"> get if these are ever broken then</font>

567
00:25:11,779 --> 00:25:17,840
the<font color="#E5E5E5"> policy will be to upgrade because</font>

568
00:25:15,049 --> 00:25:19,850
<font color="#E5E5E5">why would</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> want to have broken</font>

569
00:25:17,840 --> 00:25:22,158
networks<font color="#CCCCCC"> a broken elements in</font><font color="#E5E5E5"> your</font>

570
00:25:19,850 --> 00:25:25,299
network<font color="#E5E5E5"> besides secure elements no</font>

571
00:25:22,159 --> 00:25:28,039
that's not the way<font color="#CCCCCC"> to design</font><font color="#E5E5E5"> a system so</font>

572
00:25:25,299 --> 00:25:29,990
if the<font color="#E5E5E5"> Crypt is</font><font color="#CCCCCC"> broken then you</font><font color="#E5E5E5"> update</font>

573
00:25:28,039 --> 00:25:33,080
your systems<font color="#E5E5E5"> and you don't leave around</font>

574
00:25:29,990 --> 00:25:34,760
broken crypto for<font color="#E5E5E5"> years giving back</font>

575
00:25:33,080 --> 00:25:36,580
<font color="#E5E5E5">doors to attackers for a long time to</font>

576
00:25:34,760 --> 00:25:40,270
come

577
00:25:36,580 --> 00:25:43,399
this is quite a bit different<font color="#CCCCCC"> from the</font>

578
00:25:40,270 --> 00:25:45,529
<font color="#E5E5E5">extreme</font><font color="#CCCCCC"> Sai</font><font color="#E5E5E5"> fertility with something</font>

579
00:25:43,399 --> 00:25:48,110
like TLS where you have a complicated

580
00:25:45,529 --> 00:25:50,960
<font color="#E5E5E5">negotiation that happens which</font>

581
00:25:48,110 --> 00:25:53,899
historically has been<font color="#CCCCCC"> vulnerable to to</font>

582
00:25:50,960 --> 00:25:55,940
<font color="#CCCCCC">downgrade attacks and so forth</font><font color="#E5E5E5"> and it</font>

583
00:25:53,899 --> 00:25:58,820
also means<font color="#E5E5E5"> that we're not leaving</font><font color="#CCCCCC"> around</font>

584
00:25:55,940 --> 00:26:02,570
a bunch of antiquated crypto which is

585
00:25:58,820 --> 00:26:04,460
good so<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> nice properties that</font>

586
00:26:02,570 --> 00:26:06,678
<font color="#E5E5E5">come out of this protocol we have strong</font>

587
00:26:04,460 --> 00:26:07,850
key agreement<font color="#CCCCCC"> key compromise and</font>

588
00:26:06,679 --> 00:26:09,919
personation resistance<font color="#E5E5E5"> it's an</font>

589
00:26:07,850 --> 00:26:13,850
interesting<font color="#E5E5E5"> one it means that someone</font>

590
00:26:09,919 --> 00:26:14,960
steals<font color="#CCCCCC"> your public key if your protocol</font>

591
00:26:13,850 --> 00:26:16,939
is vulnerable to key compromising

592
00:26:14,960 --> 00:26:20,149
personation it means that then<font color="#CCCCCC"> I could</font>

593
00:26:16,940 --> 00:26:21,950
<font color="#E5E5E5">impersonate anyone to you because I've</font>

594
00:26:20,149 --> 00:26:25,189
stolen your<font color="#E5E5E5"> public key it's like if</font>

595
00:26:21,950 --> 00:26:26,870
someone stole your<font color="#E5E5E5"> wallet and then</font><font color="#CCCCCC"> they</font>

596
00:26:25,190 --> 00:26:28,880
could change your perception of other

597
00:26:26,870 --> 00:26:30,080
people's faces<font color="#E5E5E5"> and then you wouldn't you</font>

598
00:26:28,880 --> 00:26:33,049
know they could pretend to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> anyone to</font>

599
00:26:30,080 --> 00:26:35,449
<font color="#E5E5E5">you so we're resistant to that unknown</font>

600
00:26:33,049 --> 00:26:38,720
<font color="#E5E5E5">key share so the two people are talking</font>

601
00:26:35,450 --> 00:26:39,750
<font color="#CCCCCC">to</font><font color="#E5E5E5"> each other and definitely their key</font>

602
00:26:38,720 --> 00:26:41,970
hasn't and share

603
00:26:39,750 --> 00:26:44,639
with a didn't one there's key secrecy

604
00:26:41,970 --> 00:26:47,340
there's forward secrecy<font color="#CCCCCC"> so we have a new</font>

605
00:26:44,639 --> 00:26:49,559
session<font color="#E5E5E5"> every two minutes we're sure</font>

606
00:26:47,340 --> 00:26:52,350
that sessions are unique<font color="#CCCCCC"> there's so</font>

607
00:26:49,559 --> 00:26:53,629
limited form of identity hiding<font color="#CCCCCC"> and of</font>

608
00:26:52,350 --> 00:26:56,250
course there's replay attack prevention

609
00:26:53,629 --> 00:26:59,490
<font color="#CCCCCC">but we still allow for the network to</font>

610
00:26:56,250 --> 00:27:02,039
reorder packets which is necessary at

611
00:26:59,490 --> 00:27:07,950
layer 3 IP networks do that but we<font color="#E5E5E5"> don't</font>

612
00:27:02,039 --> 00:27:10,080
allow<font color="#CCCCCC"> it to replay packets and it might</font>

613
00:27:07,950 --> 00:27:12,629
<font color="#E5E5E5">just be</font><font color="#CCCCCC"> a bunch</font><font color="#E5E5E5"> of crypto mumbo jumbo</font>

614
00:27:10,080 --> 00:27:14,549
<font color="#CCCCCC">that you say I don't understand</font><font color="#E5E5E5"> that and</font>

615
00:27:12,629 --> 00:27:18,240
it looks fishy and so I<font color="#E5E5E5"> don't want to</font>

616
00:27:14,549 --> 00:27:21,360
trust it<font color="#E5E5E5"> but in fact we've formally</font>

617
00:27:18,240 --> 00:27:22,950
<font color="#E5E5E5">verified this in a symbolic model using</font>

618
00:27:21,360 --> 00:27:26,549
<font color="#CCCCCC">an ice topper called tamarin so we have</font>

619
00:27:22,950 --> 00:27:29,850
a proof<font color="#CCCCCC"> that it's that that has these</font>

620
00:27:26,549 --> 00:27:33,779
properties<font color="#CCCCCC"> recently there is a another</font>

621
00:27:29,850 --> 00:27:35,519
proof<font color="#E5E5E5"> done in a computational model and</font>

622
00:27:33,779 --> 00:27:37,919
academics are working on this<font color="#E5E5E5"> kind of</font>

623
00:27:35,519 --> 00:27:40,139
thing<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> have some real assurance</font>

624
00:27:37,919 --> 00:27:42,419
<font color="#E5E5E5">that the cryptography we've come</font><font color="#CCCCCC"> up with</font>

625
00:27:40,139 --> 00:27:47,908
it the protocol we come up with<font color="#E5E5E5"> is not</font>

626
00:27:42,419 --> 00:27:51,509
<font color="#E5E5E5">bogus so all these design principles</font>

627
00:27:47,909 --> 00:27:52,740
before<font color="#E5E5E5"> kind of kind of combine into into</font>

628
00:27:51,509 --> 00:27:54,509
what we get<font color="#CCCCCC"> from the key exchange so</font>

629
00:27:52,740 --> 00:27:57,799
first thing you<font color="#E5E5E5"> might notice from this</font>

630
00:27:54,509 --> 00:27:59,639
<font color="#E5E5E5">diagram is it's one one</font><font color="#CCCCCC"> round-trip</font>

631
00:27:57,799 --> 00:28:01,860
initiator sends a message to<font color="#E5E5E5"> the</font>

632
00:27:59,639 --> 00:28:03,959
responder responder sends a message back

633
00:28:01,860 --> 00:28:07,860
<font color="#CCCCCC">to the initiator they do some</font>

634
00:28:03,960 --> 00:28:09,330
computation<font color="#E5E5E5"> and then they can send data</font>

635
00:28:07,860 --> 00:28:11,699
back<font color="#CCCCCC"> and forth with the initiator</font>

636
00:28:09,330 --> 00:28:13,678
sending a<font color="#E5E5E5"> first-date a packet</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> and</font>

637
00:28:11,700 --> 00:28:20,490
<font color="#E5E5E5">the one round-trip part is really</font>

638
00:28:13,679 --> 00:28:22,830
<font color="#E5E5E5">important because it keeps this idea of</font>

639
00:28:20,490 --> 00:28:25,950
having<font color="#E5E5E5"> aesthetic allocations</font><font color="#CCCCCC"> and guards</font>

640
00:28:22,830 --> 00:28:29,039
state we have authentication<font color="#E5E5E5"> in the</font>

641
00:28:25,950 --> 00:28:30,870
first message<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that as soon</font><font color="#E5E5E5"> as the</font>

642
00:28:29,039 --> 00:28:33,929
<font color="#E5E5E5">other side is is going to operate on</font><font color="#CCCCCC"> it</font>

643
00:28:30,870 --> 00:28:35,518
<font color="#CCCCCC">and store state required for it</font><font color="#E5E5E5"> it knows</font>

644
00:28:33,929 --> 00:28:44,370
that<font color="#E5E5E5"> this indeed was an authentic</font>

645
00:28:35,519 --> 00:28:47,279
authentic packet<font color="#CCCCCC"> ok so just</font><font color="#E5E5E5"> before we go</font>

646
00:28:44,370 --> 00:28:48,809
into the details<font color="#CCCCCC"> of</font><font color="#E5E5E5"> it just for those</font>

647
00:28:47,279 --> 00:28:52,070
who<font color="#E5E5E5"> don't know I'll show you what the</font>

648
00:28:48,809 --> 00:28:55,190
hell<font color="#CCCCCC"> minh looks</font><font color="#E5E5E5"> like is</font>

649
00:28:52,070 --> 00:28:56,960
really cool property<font color="#E5E5E5"> where</font><font color="#CCCCCC"> you come up</font>

650
00:28:55,190 --> 00:28:58,970
<font color="#CCCCCC">with a private key for Alice a private</font>

651
00:28:56,960 --> 00:29:01,970
key for Bob<font color="#E5E5E5"> for both of those you can</font>

652
00:28:58,970 --> 00:29:04,670
derive a public key from<font color="#E5E5E5"> that private</font>

653
00:29:01,970 --> 00:29:07,340
key<font color="#CCCCCC"> somehow and then we have</font><font color="#E5E5E5"> this really</font>

654
00:29:04,670 --> 00:29:10,610
awesome property<font color="#E5E5E5"> where if we take the</font>

655
00:29:07,340 --> 00:29:13,610
diffie-hellman<font color="#CCCCCC"> of</font><font color="#E5E5E5"> Alice's private key</font><font color="#CCCCCC"> in</font>

656
00:29:10,610 --> 00:29:15,889
Bob's public key<font color="#CCCCCC"> that winds</font><font color="#E5E5E5"> up</font><font color="#CCCCCC"> being</font><font color="#E5E5E5"> the</font>

657
00:29:13,610 --> 00:29:17,979
same<font color="#CCCCCC"> thing as the diffie-hellman of</font>

658
00:29:15,890 --> 00:29:20,990
Bob's private key and<font color="#E5E5E5"> Alice's public key</font>

659
00:29:17,980 --> 00:29:23,920
with the hope<font color="#CCCCCC"> that there's no other way</font>

660
00:29:20,990 --> 00:29:28,970
<font color="#CCCCCC">you can compute those values other</font><font color="#E5E5E5"> than</font>

661
00:29:23,920 --> 00:29:30,800
other<font color="#E5E5E5"> than</font><font color="#CCCCCC"> having that information so</font>

662
00:29:28,970 --> 00:29:33,170
this is just<font color="#E5E5E5"> a really cool property</font>

663
00:29:30,800 --> 00:29:36,080
<font color="#CCCCCC">alone and it's kind of amazing</font><font color="#E5E5E5"> that we</font>

664
00:29:33,170 --> 00:29:39,500
were<font color="#CCCCCC"> able to find functions that exhibit</font>

665
00:29:36,080 --> 00:29:42,980
<font color="#CCCCCC">this property</font><font color="#E5E5E5"> but anyway this isn't new</font>

666
00:29:39,500 --> 00:29:45,200
it's<font color="#E5E5E5"> just kind</font><font color="#CCCCCC"> of great and essential</font>

667
00:29:42,980 --> 00:29:48,980
for<font color="#E5E5E5"> understanding</font><font color="#CCCCCC"> wire</font><font color="#E5E5E5"> handshake so and</font>

668
00:29:45,200 --> 00:29:53,060
noise<font color="#CCCCCC"> AI K which is</font><font color="#E5E5E5"> the aspect of noise</font>

669
00:29:48,980 --> 00:29:56,510
we're using<font color="#E5E5E5"> one</font><font color="#CCCCCC"> pier</font><font color="#E5E5E5"> is the initiator</font>

670
00:29:53,060 --> 00:29:58,429
<font color="#CCCCCC">the other is the responder each pier has</font>

671
00:29:56,510 --> 00:29:59,870
their static<font color="#CCCCCC"> long-term identity this</font>

672
00:29:58,430 --> 00:30:02,420
<font color="#E5E5E5">would be the equivalent of like what you</font>

673
00:29:59,870 --> 00:30:04,760
put in your<font color="#CCCCCC"> ssh authorized keys file and</font>

674
00:30:02,420 --> 00:30:08,030
then for each new<font color="#E5E5E5"> handshake we generate</font>

675
00:30:04,760 --> 00:30:10,780
an ephemeral key pair<font color="#CCCCCC"> so we pick a</font><font color="#E5E5E5"> new</font>

676
00:30:08,030 --> 00:30:13,280
random number<font color="#E5E5E5"> for each time we do</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> and</font>

677
00:30:10,780 --> 00:30:17,090
we<font color="#E5E5E5"> get the security properties we want</font>

678
00:30:13,280 --> 00:30:21,379
by computing the the diffie-hellman<font color="#E5E5E5"> on</font>

679
00:30:17,090 --> 00:30:27,949
the<font color="#E5E5E5"> combination of these so Alice will</font>

680
00:30:21,380 --> 00:30:30,800
do will do her static with Bob static

681
00:30:27,950 --> 00:30:32,390
<font color="#E5E5E5">then</font><font color="#CCCCCC"> our static with Bob's ephemeral and</font>

682
00:30:30,800 --> 00:30:33,649
<font color="#E5E5E5">then</font><font color="#CCCCCC"> a febrile looking static and they</font>

683
00:30:32,390 --> 00:30:36,230
come<font color="#CCCCCC"> over</font><font color="#E5E5E5"> to terminal so all four of</font>

684
00:30:33,650 --> 00:30:38,540
these<font color="#E5E5E5"> then because of this nice symmetry</font>

685
00:30:36,230 --> 00:30:41,030
<font color="#E5E5E5">of diffie-hellman now in</font><font color="#CCCCCC"> Reverse the</font>

686
00:30:38,540 --> 00:30:44,590
same thing will<font color="#CCCCCC"> happen with Bob static</font>

687
00:30:41,030 --> 00:30:47,240
and<font color="#E5E5E5"> Alice the static and</font><font color="#CCCCCC"> so forth and</font>

688
00:30:44,590 --> 00:30:51,020
these all get computed<font color="#E5E5E5"> and hashed</font>

689
00:30:47,240 --> 00:30:53,440
together<font color="#CCCCCC"> and in the end you</font><font color="#E5E5E5"> have a</font>

690
00:30:51,020 --> 00:30:55,670
shared secret that has these properties

691
00:30:53,440 --> 00:30:58,550
<font color="#CCCCCC">the next two slides have more</font>

692
00:30:55,670 --> 00:31:00,110
information<font color="#CCCCCC"> on this that</font><font color="#E5E5E5"> you can read in</font>

693
00:30:58,550 --> 00:31:02,180
<font color="#E5E5E5">the slides</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the internet book for this</font>

694
00:31:00,110 --> 00:31:05,510
talk<font color="#CCCCCC"> a little short on</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> so we're</font>

695
00:31:02,180 --> 00:31:09,200
going<font color="#E5E5E5"> to skip over these and</font>

696
00:31:05,510 --> 00:31:11,240
<font color="#E5E5E5">as you can see we wind up driving this</font>

697
00:31:09,200 --> 00:31:13,010
from these forward to the helm ins we

698
00:31:11,240 --> 00:31:15,190
put all<font color="#E5E5E5"> into noise and get our session</font>

699
00:31:13,010 --> 00:31:15,190
keys

700
00:31:18,010 --> 00:31:27,020
so the key exchange<font color="#CCCCCC"> might seem</font>

701
00:31:22,160 --> 00:31:29,510
complicated<font color="#CCCCCC"> but in fact it's just</font><font color="#E5E5E5"> one</font>

702
00:31:27,020 --> 00:31:32,810
round<font color="#E5E5E5"> trip and you can implement it in</font>

703
00:31:29,510 --> 00:31:34,280
like<font color="#E5E5E5"> four hundred lines</font><font color="#CCCCCC"> really a compact</font>

704
00:31:32,810 --> 00:31:37,550
thing especially<font color="#E5E5E5"> compared</font><font color="#CCCCCC"> to something</font>

705
00:31:34,280 --> 00:31:39,649
crazy like<font color="#E5E5E5"> open</font><font color="#CCCCCC"> SSL or strongswan</font><font color="#E5E5E5"> we</font>

706
00:31:37,550 --> 00:31:42,879
have those sorts of parsers<font color="#CCCCCC"> and options</font>

707
00:31:39,650 --> 00:31:46,130
and things go in different directions

708
00:31:42,880 --> 00:31:49,040
<font color="#CCCCCC">with why are there no certificates no</font>

709
00:31:46,130 --> 00:31:53,270
<font color="#CCCCCC">x.509</font><font color="#E5E5E5"> stuff both sides just have their</font>

710
00:31:49,040 --> 00:31:56,080
short base64 public<font color="#CCCCCC"> key exchange</font><font color="#E5E5E5"> and</font>

711
00:31:53,270 --> 00:31:58,100
then they can talk to<font color="#CCCCCC"> each other</font><font color="#E5E5E5"> and</font>

712
00:31:56,080 --> 00:32:01,550
it's<font color="#E5E5E5"> really important to keep the</font>

713
00:31:58,100 --> 00:32:02,810
cryptographic core minimal so that you

714
00:32:01,550 --> 00:32:06,919
can really<font color="#E5E5E5"> look at it and understand</font>

715
00:32:02,810 --> 00:32:10,669
what<font color="#E5E5E5"> it's doing</font><font color="#CCCCCC"> we also have kind of a</font>

716
00:32:06,920 --> 00:32:13,670
poor<font color="#CCCCCC"> man's post quantum resistance where</font>

717
00:32:10,670 --> 00:32:16,370
optionally each the<font color="#E5E5E5"> two</font><font color="#CCCCCC"> pairs</font><font color="#E5E5E5"> can have a</font>

718
00:32:13,670 --> 00:32:18,650
<font color="#E5E5E5">pre shared key which then gets mixed</font>

719
00:32:16,370 --> 00:32:22,070
<font color="#E5E5E5">into the handshake so there's this thing</font>

720
00:32:18,650 --> 00:32:24,910
called Grover's algorithm<font color="#CCCCCC"> which says</font>

721
00:32:22,070 --> 00:32:28,220
<font color="#CCCCCC">that if you</font><font color="#E5E5E5"> have a symmetric encryption</font>

722
00:32:24,910 --> 00:32:30,070
<font color="#E5E5E5">the</font><font color="#CCCCCC"> speed-up on it from a quantum</font>

723
00:32:28,220 --> 00:32:33,320
<font color="#CCCCCC">computer is</font><font color="#E5E5E5"> going to be square root so</font>

724
00:32:30,070 --> 00:32:36,710
<font color="#E5E5E5">256</font><font color="#CCCCCC"> bit symmetric key is going</font><font color="#E5E5E5"> to be</font>

725
00:32:33,320 --> 00:32:38,870
<font color="#E5E5E5">like like 128-bit symmetric key and once</font>

726
00:32:36,710 --> 00:32:41,660
we have quantum computers and so we mix

727
00:32:38,870 --> 00:32:43,850
it which<font color="#E5E5E5"> 128-bit is perfectly adequate</font>

728
00:32:41,660 --> 00:32:46,960
<font color="#E5E5E5">in terms of brute force complexity and</font>

729
00:32:43,850 --> 00:32:50,750
so we mix in a 256<font color="#E5E5E5"> minute symmetric key</font>

730
00:32:46,960 --> 00:32:54,050
<font color="#E5E5E5">and if that's kept secret then even with</font>

731
00:32:50,750 --> 00:32:56,420
the quantum computer<font color="#CCCCCC"> the</font><font color="#E5E5E5"> information</font>

732
00:32:54,050 --> 00:32:59,270
<font color="#CCCCCC">won't be compromised now it turns out</font>

733
00:32:56,420 --> 00:33:00,470
pre-shared keys are easier to<font color="#E5E5E5"> steal</font>

734
00:32:59,270 --> 00:33:02,780
because<font color="#E5E5E5"> they're just kind of sitting</font>

735
00:33:00,470 --> 00:33:07,730
<font color="#CCCCCC">around and they got to be shared at some</font>

736
00:33:02,780 --> 00:33:09,200
point<font color="#E5E5E5"> but the the the</font><font color="#CCCCCC"> hope is that by</font>

737
00:33:07,730 --> 00:33:10,840
<font color="#E5E5E5">the time</font><font color="#CCCCCC"> a quantum computer</font><font color="#E5E5E5"> actually</font>

738
00:33:09,200 --> 00:33:13,010
exists

739
00:33:10,840 --> 00:33:16,480
<font color="#E5E5E5">all those pre-shared keys will have</font>

740
00:33:13,010 --> 00:33:19,010
rusted off the hard drive anyway<font color="#CCCCCC"> and</font>

741
00:33:16,480 --> 00:33:20,450
additionally it's it's not

742
00:33:19,010 --> 00:33:21,980
<font color="#E5E5E5">replacement for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> previous handshake</font>

743
00:33:20,450 --> 00:33:25,250
is just augments it<font color="#E5E5E5"> so we still get all</font>

744
00:33:21,980 --> 00:33:27,230
the same<font color="#E5E5E5"> properties as before</font><font color="#CCCCCC"> but we can</font>

745
00:33:25,250 --> 00:33:29,480
also do better than the poor man's<font color="#E5E5E5"> post</font>

746
00:33:27,230 --> 00:33:31,070
climb resistance we can<font color="#E5E5E5"> also have a kind</font>

747
00:33:29,480 --> 00:33:33,410
<font color="#E5E5E5">of a hybrid post</font><font color="#CCCCCC"> flogging resistance</font>

748
00:33:31,070 --> 00:33:36,500
where at first we just<font color="#E5E5E5"> have a normal</font>

749
00:33:33,410 --> 00:33:39,080
<font color="#E5E5E5">wire guard tunnel with no no post</font>

750
00:33:36,500 --> 00:33:41,900
quantum security<font color="#CCCCCC"> and then inside the</font>

751
00:33:39,080 --> 00:33:45,710
tunnel<font color="#CCCCCC"> we do one</font><font color="#E5E5E5"> of these newfangled</font>

752
00:33:41,900 --> 00:33:49,580
<font color="#E5E5E5">post quantum key exchanges</font><font color="#CCCCCC"> now I say</font>

753
00:33:45,710 --> 00:33:52,720
newfangled<font color="#CCCCCC"> because these</font><font color="#E5E5E5"> are somewhat</font>

754
00:33:49,580 --> 00:33:56,330
new<font color="#CCCCCC"> there's a NIST competition</font><font color="#E5E5E5"> recently</font>

755
00:33:52,720 --> 00:33:58,610
there have been other things<font color="#E5E5E5"> like New</font>

756
00:33:56,330 --> 00:34:01,429
<font color="#E5E5E5">Hope and</font><font color="#CCCCCC"> enter prime that have been</font>

757
00:33:58,610 --> 00:34:04,429
<font color="#E5E5E5">around for a while</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> still it hasn't</font>

758
00:34:01,430 --> 00:34:08,690
<font color="#E5E5E5">seen the this the scrutiny that that</font>

759
00:34:04,430 --> 00:34:09,918
other classical algorithms have seen so

760
00:34:08,690 --> 00:34:12,830
<font color="#E5E5E5">this is not the kind of thing that we</font>

761
00:34:09,918 --> 00:34:14,899
want to<font color="#E5E5E5"> bake into the kernel now</font><font color="#CCCCCC"> but</font>

762
00:34:12,830 --> 00:34:17,569
what you can do now<font color="#CCCCCC"> is you make a wire</font>

763
00:34:14,899 --> 00:34:19,190
<font color="#CCCCCC">guard tunnel</font><font color="#E5E5E5"> and then through it but</font>

764
00:34:17,570 --> 00:34:23,450
since the channel<font color="#E5E5E5"> is authenticated and</font>

765
00:34:19,190 --> 00:34:25,850
encrypted already<font color="#E5E5E5"> you could say you</font>

766
00:34:23,449 --> 00:34:27,439
<font color="#E5E5E5">could pick say five different of these</font>

767
00:34:25,850 --> 00:34:30,379
<font color="#CCCCCC">NIST candidates for post quantum</font>

768
00:34:27,440 --> 00:34:32,330
algorithms and<font color="#CCCCCC"> do em all because you're</font>

769
00:34:30,379 --> 00:34:33,679
<font color="#E5E5E5">operating over something like TCP which</font>

770
00:34:32,330 --> 00:34:37,009
is<font color="#CCCCCC"> reliable so it makes it</font><font color="#E5E5E5"> easy to</font>

771
00:34:33,679 --> 00:34:38,450
<font color="#E5E5E5">implement</font><font color="#CCCCCC"> and then you take the result</font>

772
00:34:37,010 --> 00:34:40,879
of<font color="#E5E5E5"> that</font><font color="#CCCCCC"> and you put it into wire guards</font>

773
00:34:38,449 --> 00:34:43,330
<font color="#E5E5E5">pre shared key slot so what is possible</font>

774
00:34:40,879 --> 00:34:46,009
<font color="#E5E5E5">to have a hybrid post climb resistance</font>

775
00:34:43,330 --> 00:34:49,040
and<font color="#E5E5E5"> hopefully in the</font><font color="#CCCCCC"> future as we get</font>

776
00:34:46,010 --> 00:34:50,210
more<font color="#E5E5E5"> visibility into with the post</font>

777
00:34:49,040 --> 00:34:51,980
quantum algorithms<font color="#CCCCCC"> you're looking</font><font color="#E5E5E5"> like</font>

778
00:34:50,210 --> 00:34:53,570
well<font color="#E5E5E5"> we'll be able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> build something</font>

779
00:34:51,980 --> 00:34:55,429
into<font color="#E5E5E5"> the core</font><font color="#CCCCCC"> of wire guard but for now</font>

780
00:34:53,570 --> 00:34:59,570
I think<font color="#E5E5E5"> this hybrid approach is the</font>

781
00:34:55,429 --> 00:35:01,220
<font color="#E5E5E5">right way</font><font color="#CCCCCC"> okay next next security is</font><font color="#E5E5E5"> on</font>

782
00:34:59,570 --> 00:35:06,020
principle we want this to be abuse

783
00:35:01,220 --> 00:35:09,649
resistant hashing and encrypting stuff

784
00:35:06,020 --> 00:35:11,990
is fast<font color="#E5E5E5"> uh-huh but all that public key</font>

785
00:35:09,650 --> 00:35:15,590
cryptography<font color="#E5E5E5"> is not as fast we're using</font>

786
00:35:11,990 --> 00:35:17,270
curved<font color="#E5E5E5"> 519 which is among the fastest</font>

787
00:35:15,590 --> 00:35:21,440
elliptic curve diffie-hellman functions

788
00:35:17,270 --> 00:35:24,770
was still<font color="#E5E5E5"> it's way slower than hashing</font>

789
00:35:21,440 --> 00:35:28,100
and symmetric crypto and so in something

790
00:35:24,770 --> 00:35:31,300
like<font color="#E5E5E5"> Open VPN which does you know lots</font>

791
00:35:28,100 --> 00:35:32,790
of<font color="#CCCCCC"> things because</font><font color="#E5E5E5"> it uses TLS</font><font color="#CCCCCC"> you just</font>

792
00:35:31,300 --> 00:35:34,290
overwhelming ass

793
00:35:32,790 --> 00:35:36,930
<font color="#E5E5E5">yet to compute you know tons of</font>

794
00:35:34,290 --> 00:35:39,509
expensive RSA or tons of expensive<font color="#E5E5E5"> look</font>

795
00:35:36,930 --> 00:35:43,379
the<font color="#CCCCCC"> curve stuff over</font><font color="#E5E5E5"> and over so</font><font color="#CCCCCC"> what</font>

796
00:35:39,510 --> 00:35:46,560
<font color="#CCCCCC">wire guard instead uses uses cookies to</font>

797
00:35:43,380 --> 00:35:49,560
prevent this so a little<font color="#E5E5E5"> history</font><font color="#CCCCCC"> of</font>

798
00:35:46,560 --> 00:35:55,440
cookies<font color="#E5E5E5"> we first see something cookie</font>

799
00:35:49,560 --> 00:35:58,620
like in in TCP<font color="#E5E5E5"> where initiator says you</font>

800
00:35:55,440 --> 00:36:00,270
know I do<font color="#E5E5E5"> some do some expensive</font>

801
00:35:58,620 --> 00:36:03,270
calculations<font color="#CCCCCC"> say compute</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> II see</font><font color="#E5E5E5"> th</font>

802
00:36:00,270 --> 00:36:06,210
<font color="#E5E5E5">the responder says</font><font color="#CCCCCC"> okay my magic words</font>

803
00:36:03,270 --> 00:36:08,009
<font color="#E5E5E5">area 51 ask me</font><font color="#CCCCCC"> again with the magic word</font>

804
00:36:06,210 --> 00:36:09,120
initiator says<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> I got the magic</font>

805
00:36:08,010 --> 00:36:11,730
word<font color="#E5E5E5"> area 51</font>

806
00:36:09,120 --> 00:36:13,950
now will you do it and so they have this

807
00:36:11,730 --> 00:36:16,140
back and forth first so<font color="#E5E5E5"> this is great</font>

808
00:36:13,950 --> 00:36:20,609
because<font color="#CCCCCC"> it it sort of proves IP</font>

809
00:36:16,140 --> 00:36:23,220
ownership<font color="#E5E5E5"> and then since you know the IP</font>

810
00:36:20,610 --> 00:36:26,970
then you can you<font color="#CCCCCC"> can rate limit based on</font>

811
00:36:23,220 --> 00:36:28,620
the<font color="#E5E5E5"> IP address but then you have to keep</font>

812
00:36:26,970 --> 00:36:30,209
track of<font color="#CCCCCC"> this association</font><font color="#E5E5E5"> between the</font>

813
00:36:28,620 --> 00:36:32,790
magic word you<font color="#E5E5E5"> just</font><font color="#CCCCCC"> gave out the IP</font>

814
00:36:30,210 --> 00:36:35,730
address and<font color="#E5E5E5"> so you got a store</font><font color="#CCCCCC"> state and</font>

815
00:36:32,790 --> 00:36:39,960
so this this violates our dynamic

816
00:36:35,730 --> 00:36:43,950
allocation<font color="#CCCCCC"> security design principle of</font>

817
00:36:39,960 --> 00:36:45,900
course also the<font color="#E5E5E5"> responder</font><font color="#CCCCCC"> always</font>

818
00:36:43,950 --> 00:36:47,730
responds and<font color="#E5E5E5"> so we lose stealth with</font>

819
00:36:45,900 --> 00:36:52,380
something like this<font color="#E5E5E5"> and obviously the</font>

820
00:36:47,730 --> 00:36:56,070
magic word can<font color="#E5E5E5"> be intercepted here DTLS</font>

821
00:36:52,380 --> 00:36:58,230
<font color="#E5E5E5">and I can ev2 that's the IPSec</font><font color="#CCCCCC"> and a</font>

822
00:36:56,070 --> 00:37:01,680
handshake<font color="#CCCCCC"> have</font><font color="#E5E5E5"> something a</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit</font>

823
00:36:58,230 --> 00:37:03,570
<font color="#E5E5E5">improved from this where</font><font color="#CCCCCC"> you're says</font>

824
00:37:01,680 --> 00:37:06,779
compute the<font color="#CCCCCC"> CCD H the responder</font><font color="#E5E5E5"> says</font>

825
00:37:03,570 --> 00:37:07,950
your magic word is some junk

826
00:37:06,780 --> 00:37:09,960
ask me again<font color="#CCCCCC"> what the magic word</font>

827
00:37:07,950 --> 00:37:12,600
initiator says<font color="#E5E5E5"> all right my magic word</font>

828
00:37:09,960 --> 00:37:15,470
<font color="#E5E5E5">is that junk</font><font color="#CCCCCC"> now we do and then it goes</font>

829
00:37:12,600 --> 00:37:18,450
<font color="#CCCCCC">and it turns</font><font color="#E5E5E5"> out that that junk is a</font><font color="#CCCCCC"> mac</font>

830
00:37:15,470 --> 00:37:19,770
using<font color="#E5E5E5"> some secret that the responder has</font>

831
00:37:18,450 --> 00:37:23,009
the changes<font color="#CCCCCC"> over</font><font color="#E5E5E5"> a few minutes</font><font color="#CCCCCC"> as the</font>

832
00:37:19,770 --> 00:37:27,540
key and<font color="#E5E5E5"> the initiators IP address</font><font color="#CCCCCC"> as a</font>

833
00:37:23,010 --> 00:37:29,250
payload so this is clever because<font color="#E5E5E5"> you</font>

834
00:37:27,540 --> 00:37:33,779
don't<font color="#E5E5E5"> have to store state since you can</font>

835
00:37:29,250 --> 00:37:35,760
just recompute this<font color="#CCCCCC"> mac</font><font color="#E5E5E5"> every time but</font>

836
00:37:33,780 --> 00:37:39,000
there's<font color="#E5E5E5"> still a problem we're always</font>

837
00:37:35,760 --> 00:37:42,750
<font color="#E5E5E5">there is a response to</font><font color="#CCCCCC"> the message</font><font color="#E5E5E5"> so it</font>

838
00:37:39,000 --> 00:37:44,520
violates<font color="#E5E5E5"> our stealth principle also</font><font color="#CCCCCC"> the</font>

839
00:37:42,750 --> 00:37:45,690
magic word can<font color="#CCCCCC"> be intercepted</font><font color="#E5E5E5"> in the</font>

840
00:37:44,520 --> 00:37:48,329
same way

841
00:37:45,690 --> 00:37:50,670
the initiator himself can be dossed by

842
00:37:48,329 --> 00:37:54,319
just flooding the initiator<font color="#E5E5E5"> with bogus</font>

843
00:37:50,670 --> 00:37:58,170
magic words<font color="#CCCCCC"> which</font><font color="#E5E5E5"> isn't</font><font color="#CCCCCC"> good</font>

844
00:37:54,319 --> 00:38:01,770
as an aside<font color="#E5E5E5"> kind of an out of the</font>

845
00:37:58,170 --> 00:38:03,180
lineage<font color="#E5E5E5"> of these ideas</font><font color="#CCCCCC"> there's proof of</font>

846
00:38:01,770 --> 00:38:07,288
<font color="#E5E5E5">work which is seen in the host identity</font>

847
00:38:03,180 --> 00:38:10,020
<font color="#E5E5E5">protocol</font><font color="#CCCCCC"> where an issue says</font><font color="#E5E5E5"> Gil compute</font>

848
00:38:07,289 --> 00:38:12,270
<font color="#CCCCCC">this our</font><font color="#E5E5E5"> problem responder says no way</font>

849
00:38:10,020 --> 00:38:13,650
but mine a Bitcoin first and then<font color="#E5E5E5"> ask me</font>

850
00:38:12,270 --> 00:38:15,210
and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> be equal and then the</font>

851
00:38:13,650 --> 00:38:18,299
<font color="#E5E5E5">mystery says like toiling away I found a</font>

852
00:38:15,210 --> 00:38:20,250
Bitcoin now you do it and he does<font color="#CCCCCC"> it the</font>

853
00:38:18,299 --> 00:38:24,000
proof<font color="#E5E5E5"> of work is great because you</font><font color="#CCCCCC"> can</font>

854
00:38:20,250 --> 00:38:25,680
<font color="#CCCCCC">make the you can</font><font color="#E5E5E5"> make their work as hard</font>

855
00:38:24,000 --> 00:38:28,890
or harder than<font color="#E5E5E5"> what you're trying to</font>

856
00:38:25,680 --> 00:38:30,720
prevent against being dust<font color="#CCCCCC"> but in wire</font>

857
00:38:28,890 --> 00:38:31,859
guard peers can switch signs at any

858
00:38:30,720 --> 00:38:33,029
moment the initiator can<font color="#E5E5E5"> come and</font>

859
00:38:31,859 --> 00:38:33,690
respond or responder can<font color="#E5E5E5"> become</font>

860
00:38:33,030 --> 00:38:35,099
initiator

861
00:38:33,690 --> 00:38:38,970
there's no client-server architecture

862
00:38:35,099 --> 00:38:41,490
it's all just peers and so we wouldn't

863
00:38:38,970 --> 00:38:44,098
<font color="#E5E5E5">want</font><font color="#CCCCCC"> say a server</font><font color="#E5E5E5"> that has lots of peers</font>

864
00:38:41,490 --> 00:38:46,979
to be overwhelmed doing proofs of<font color="#E5E5E5"> work</font>

865
00:38:44,099 --> 00:38:48,420
just<font color="#CCCCCC"> to talk to</font><font color="#E5E5E5"> each</font><font color="#CCCCCC"> of its</font><font color="#E5E5E5"> clients so</font>

866
00:38:46,980 --> 00:38:51,180
this doesn't really<font color="#CCCCCC"> fit into what we</font>

867
00:38:48,420 --> 00:38:55,859
have<font color="#E5E5E5"> here</font><font color="#CCCCCC"> but the wire guard variant</font>

868
00:38:51,180 --> 00:39:00,450
builds on<font color="#E5E5E5"> builds on the the DTLS version</font>

869
00:38:55,859 --> 00:39:00,869
where each handshake message has<font color="#CCCCCC"> two</font>

870
00:39:00,450 --> 00:39:04,410
<font color="#CCCCCC">Macs</font>

871
00:39:00,869 --> 00:39:08,039
has Mac one and has Mac<font color="#E5E5E5"> - Mac one is</font>

872
00:39:04,410 --> 00:39:10,259
calculated as a hash<font color="#E5E5E5"> that includes the</font>

873
00:39:08,039 --> 00:39:13,079
responders public key and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> previous</font>

874
00:39:10,260 --> 00:39:14,549
bytes of<font color="#E5E5E5"> the message and so if the Mac</font>

875
00:39:13,079 --> 00:39:16,920
is invalid<font color="#E5E5E5"> or missing the</font><font color="#CCCCCC"> message is</font>

876
00:39:14,549 --> 00:39:19,770
ignored<font color="#E5E5E5"> but if it is there</font><font color="#CCCCCC"> then it</font><font color="#E5E5E5"> means</font>

877
00:39:16,920 --> 00:39:21,839
<font color="#CCCCCC">that</font><font color="#E5E5E5"> the initiator knows who the</font>

878
00:39:19,770 --> 00:39:23,490
responder<font color="#CCCCCC"> and</font><font color="#E5E5E5"> says I'm sending this</font>

879
00:39:21,839 --> 00:39:25,349
message<font color="#E5E5E5"> to you</font><font color="#CCCCCC"> and I know it's you</font>

880
00:39:23,490 --> 00:39:26,399
that's<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to be reading it and so we</font>

881
00:39:25,349 --> 00:39:29,880
don't<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to worry about stealth</font>

882
00:39:26,400 --> 00:39:31,849
because I know it's you<font color="#CCCCCC"> so if the</font>

883
00:39:29,880 --> 00:39:34,710
responder is not under load

884
00:39:31,849 --> 00:39:38,309
<font color="#CCCCCC">Percy's normally then if we're done if</font>

885
00:39:34,710 --> 00:39:41,490
it is under load then it'll respond<font color="#E5E5E5"> with</font>

886
00:39:38,309 --> 00:39:44,099
a cookie message now<font color="#CCCCCC"> the payload</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font>

887
00:39:41,490 --> 00:39:47,220
cookie<font color="#CCCCCC"> itself</font><font color="#E5E5E5"> is essentially the same as</font>

888
00:39:44,099 --> 00:39:48,660
in DTLS it's it's a<font color="#E5E5E5"> Mac using</font><font color="#CCCCCC"> a changing</font>

889
00:39:47,220 --> 00:39:52,169
responder secret<font color="#E5E5E5"> that</font><font color="#CCCCCC"> changes every two</font>

890
00:39:48,660 --> 00:39:54,779
minutes the initiators IP address but<font color="#E5E5E5"> we</font>

891
00:39:52,170 --> 00:39:58,140
want to encrypt it<font color="#E5E5E5"> and we encrypt it</font>

892
00:39:54,779 --> 00:39:58,880
using something<font color="#E5E5E5"> public using in fact a</font>

893
00:39:58,140 --> 00:40:01,759
hash there's

894
00:39:58,880 --> 00:40:04,460
there's public key so it's not<font color="#E5E5E5"> a</font>

895
00:40:01,759 --> 00:40:07,700
complete<font color="#E5E5E5"> secret but it at least assumes</font>

896
00:40:04,460 --> 00:40:10,309
that you know<font color="#E5E5E5"> who you were</font><font color="#CCCCCC"> talking to</font><font color="#E5E5E5"> so</font>

897
00:40:07,700 --> 00:40:12,038
a completely blind adversary wouldn't be

898
00:40:10,309 --> 00:40:14,900
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to modify it</font>

899
00:40:12,039 --> 00:40:17,690
additionally we use as<font color="#E5E5E5"> the additional</font>

900
00:40:14,900 --> 00:40:20,960
data as part of an ad<font color="#CCCCCC"> that is</font><font color="#E5E5E5"> some extra</font>

901
00:40:17,690 --> 00:40:24,230
<font color="#E5E5E5">information that</font><font color="#CCCCCC"> gets</font><font color="#E5E5E5"> hashed in with</font>

902
00:40:20,960 --> 00:40:26,029
authentication<font color="#CCCCCC"> tag</font><font color="#E5E5E5"> the bytes of the</font>

903
00:40:24,230 --> 00:40:29,000
<font color="#E5E5E5">handshake message that provoked this</font>

904
00:40:26,029 --> 00:40:30,559
cookie so that when the initiator

905
00:40:29,000 --> 00:40:32,150
receives the cookie he knows that<font color="#CCCCCC"> it</font>

906
00:40:30,559 --> 00:40:37,039
actually corresponds<font color="#E5E5E5"> to the handshake</font>

907
00:40:32,150 --> 00:40:40,430
<font color="#E5E5E5">message that he just sent</font><font color="#CCCCCC"> so then we can</font>

908
00:40:37,039 --> 00:40:42,140
compute Mac<font color="#CCCCCC"> 2</font><font color="#E5E5E5"> which is just a Mac of the</font>

909
00:40:40,430 --> 00:40:45,950
previous byte so the message<font color="#E5E5E5"> using this</font>

910
00:40:42,140 --> 00:40:48,288
cookie as the key<font color="#E5E5E5"> and so if the Mac 2 is</font>

911
00:40:45,950 --> 00:40:53,000
valid then the handshake proceeds

912
00:40:48,289 --> 00:40:56,720
even if we're under load so then once we

913
00:40:53,000 --> 00:40:58,940
have IP address attribution we can just

914
00:40:56,720 --> 00:41:00,828
do the normal<font color="#E5E5E5"> token bucket</font><font color="#CCCCCC"> right</font>

915
00:40:58,940 --> 00:41:02,119
limiting<font color="#E5E5E5"> it's an IP rate limiting</font>

916
00:41:00,829 --> 00:41:06,109
algorithm you can<font color="#E5E5E5"> read any network</font>

917
00:41:02,119 --> 00:41:07,700
<font color="#CCCCCC">textbook and this maintains stealthiness</font>

918
00:41:06,109 --> 00:41:10,759
since we're not<font color="#E5E5E5"> responding unless we</font>

919
00:41:07,700 --> 00:41:14,419
already know who<font color="#CCCCCC"> it is and we're talking</font>

920
00:41:10,759 --> 00:41:16,460
<font color="#E5E5E5">to and the cookies</font><font color="#CCCCCC"> themselves can be</font>

921
00:41:14,420 --> 00:41:18,019
<font color="#CCCCCC">intercepted by someone who couldn't</font>

922
00:41:16,460 --> 00:41:22,240
already initiate the same kind<font color="#E5E5E5"> of</font>

923
00:41:18,019 --> 00:41:24,799
exchange with with the responder<font color="#E5E5E5"> the</font>

924
00:41:22,240 --> 00:41:26,919
<font color="#CCCCCC">initiator himself kept DDoS because of</font>

925
00:41:24,799 --> 00:41:29,690
this<font color="#E5E5E5"> additional data that we just put in</font>

926
00:41:26,920 --> 00:41:34,700
which binds<font color="#E5E5E5"> the response to the</font>

927
00:41:29,690 --> 00:41:39,109
handshake<font color="#E5E5E5"> message that provoked it our</font>

928
00:41:34,700 --> 00:41:40,490
performance<font color="#CCCCCC"> were in the kernel</font><font color="#E5E5E5"> which</font>

929
00:41:39,109 --> 00:41:42,589
means it's really<font color="#CCCCCC"> fast and low latency</font>

930
00:41:40,490 --> 00:41:46,000
<font color="#CCCCCC">so we don't need</font><font color="#E5E5E5"> to copy packets twice</font>

931
00:41:42,589 --> 00:41:46,000
between<font color="#E5E5E5"> user space and kernel space</font>

932
00:41:46,119 --> 00:41:52,609
<font color="#E5E5E5">we're using Church of</font><font color="#CCCCCC"> 21 3 or 5 which is</font>

933
00:41:49,150 --> 00:41:56,750
super fast<font color="#CCCCCC"> in software around pretty</font>

934
00:41:52,609 --> 00:42:00,470
<font color="#E5E5E5">much all processors now</font><font color="#CCCCCC"> aes ni is really</font>

935
00:41:56,750 --> 00:42:02,240
fast<font color="#CCCCCC"> too and getting faster but actually</font>

936
00:42:00,470 --> 00:42:05,598
right now<font color="#CCCCCC"> cha-cha can piece pretty well</font>

937
00:42:02,240 --> 00:42:11,149
with it<font color="#CCCCCC"> and is fast even</font><font color="#E5E5E5"> on small nips</font>

938
00:42:05,599 --> 00:42:12,450
<font color="#E5E5E5">forbs that don't have a</font><font color="#CCCCCC"> SNI the other</font>

939
00:42:11,150 --> 00:42:17,190
aspect<font color="#E5E5E5"> of its speed is</font>

940
00:42:12,450 --> 00:42:20,910
that<font color="#CCCCCC"> my regards simple and with</font><font color="#E5E5E5"> with a</font>

941
00:42:17,190 --> 00:42:22,770
small program<font color="#E5E5E5"> with less code sometimes</font>

942
00:42:20,910 --> 00:42:25,170
it's just faster<font color="#CCCCCC"> I mean</font><font color="#E5E5E5"> not always</font>

943
00:42:22,770 --> 00:42:29,550
obviously<font color="#E5E5E5"> but in this case it's</font><font color="#CCCCCC"> just</font>

944
00:42:25,170 --> 00:42:34,520
doing<font color="#E5E5E5"> less so we have some numbers and</font>

945
00:42:29,550 --> 00:42:36,480
<font color="#E5E5E5">it beats the competition</font><font color="#CCCCCC"> alright so in</font>

946
00:42:34,520 --> 00:42:39,150
<font color="#CCCCCC">summary the whole thing is less</font><font color="#E5E5E5"> than</font>

947
00:42:36,480 --> 00:42:40,740
4,000 lines<font color="#E5E5E5"> of code</font><font color="#CCCCCC"> it's been designed</font>

948
00:42:39,150 --> 00:42:42,530
so that<font color="#CCCCCC"> it can be implemented with basic</font>

949
00:42:40,740 --> 00:42:44,879
data structures nothing too funky

950
00:42:42,530 --> 00:42:48,660
nothing you've<font color="#CCCCCC"> got a crack open a</font>

951
00:42:44,880 --> 00:42:50,369
<font color="#E5E5E5">computer science textbook for the design</font>

952
00:42:48,660 --> 00:42:53,990
<font color="#CCCCCC">of the protocol lends itself to being</font>

953
00:42:50,369 --> 00:43:00,720
implemented using secure coding patterns

954
00:42:53,990 --> 00:43:02,040
<font color="#E5E5E5">so so we're you to do this naively you</font>

955
00:43:00,720 --> 00:43:07,618
<font color="#E5E5E5">would probably come up with</font><font color="#CCCCCC"> something</font>

956
00:43:02,040 --> 00:43:09,690
<font color="#CCCCCC">that's at least okay</font><font color="#E5E5E5"> there's minimal</font>

957
00:43:07,619 --> 00:43:13,920
<font color="#CCCCCC">state no dynamic memory allocations we</font>

958
00:43:09,690 --> 00:43:18,150
want to<font color="#E5E5E5"> keep it super stealthy</font><font color="#CCCCCC"> and and</font>

959
00:43:13,920 --> 00:43:19,680
it's it's a very<font color="#CCCCCC"> opinionated so it's</font>

960
00:43:18,150 --> 00:43:21,810
available for<font color="#E5E5E5"> all</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> major</font><font color="#CCCCCC"> Linux</font>

961
00:43:19,680 --> 00:43:24,359
distros<font color="#E5E5E5"> wire guard</font><font color="#CCCCCC"> complex install but</font>

962
00:43:21,810 --> 00:43:27,180
it's also now we have a<font color="#E5E5E5"> client for</font><font color="#CCCCCC"> bsds</font>

963
00:43:24,359 --> 00:43:29,480
<font color="#CCCCCC">from mac OS and</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> android we're</font>

964
00:43:27,180 --> 00:43:32,009
<font color="#E5E5E5">working on Windows working on iOS</font>

965
00:43:29,480 --> 00:43:34,800
there's an<font color="#CCCCCC"> academic paper from n DSS</font>

966
00:43:32,010 --> 00:43:37,410
2017<font color="#CCCCCC"> that</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of lays out a lot of</font>

967
00:43:34,800 --> 00:43:40,710
design rationale it's<font color="#CCCCCC"> open source</font>

968
00:43:37,410 --> 00:43:45,390
obviously there's a mailing list<font color="#E5E5E5"> there's</font>

969
00:43:40,710 --> 00:43:47,280
a free<font color="#CCCCCC"> noon IRC channel and most</font>

970
00:43:45,390 --> 00:43:50,640
important<font color="#E5E5E5"> part is that I have this</font>

971
00:43:47,280 --> 00:43:51,750
massive bag of stickers here and if you

972
00:43:50,640 --> 00:43:54,839
find<font color="#E5E5E5"> me after all I'll give</font><font color="#CCCCCC"> you a</font>

973
00:43:51,750 --> 00:43:57,290
sticker<font color="#CCCCCC"> yeah that's it thanks that take</font>

974
00:43:54,839 --> 00:43:57,290
some<font color="#CCCCCC"> cookies</font>

975
00:43:57,320 --> 00:44:05,599
[Applause]

976
00:44:17,190 --> 00:44:20,249
[Music]

977
00:44:23,480 --> 00:44:31,349
so with ubiquity in particular<font color="#E5E5E5"> it's not</font>

978
00:44:27,510 --> 00:44:35,039
from the vendor we're supplying a dot

979
00:44:31,349 --> 00:44:36,690
Deb that you can install<font color="#E5E5E5"> with the other</font>

980
00:44:35,039 --> 00:44:37,920
things I<font color="#CCCCCC"> mentioned they're normal</font>

981
00:44:36,690 --> 00:44:42,380
<font color="#CCCCCC">open-source projects and so they</font>

982
00:44:37,920 --> 00:44:59,400
gradually trickle out<font color="#CCCCCC"> to everything</font><font color="#E5E5E5"> else</font>

983
00:44:42,380 --> 00:45:03,020
hi I'm sorry what<font color="#CCCCCC"> know that there are no</font>

984
00:44:59,400 --> 00:45:06,690
<font color="#E5E5E5">plans to</font><font color="#CCCCCC"> get this ship certified I mean</font>

985
00:45:03,020 --> 00:45:09,480
<font color="#E5E5E5">we're not using</font><font color="#CCCCCC"> AES probably chacha</font>

986
00:45:06,690 --> 00:45:12,270
<font color="#CCCCCC">Paula</font><font color="#E5E5E5"> we should be certified at some</font>

987
00:45:09,480 --> 00:45:18,410
point but<font color="#E5E5E5"> I mean who knows</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> no we're</font>

988
00:45:12,270 --> 00:45:18,410
<font color="#E5E5E5">not really seeking the FIP stamp at all</font>

989
00:45:20,000 --> 00:45:25,380
yeah<font color="#CCCCCC"> just a quick question so</font><font color="#E5E5E5"> the the</font>

990
00:45:23,369 --> 00:45:28,319
<font color="#E5E5E5">Dowling</font><font color="#CCCCCC"> Patterson analysis that you</font>

991
00:45:25,380 --> 00:45:30,960
mentioned<font color="#E5E5E5"> they weren't actually able to</font>

992
00:45:28,319 --> 00:45:34,319
<font color="#E5E5E5">prove security of the wire protocol as</font>

993
00:45:30,960 --> 00:45:36,180
is they required a small<font color="#E5E5E5"> tweak to the</font>

994
00:45:34,319 --> 00:45:38,099
protocol<font color="#E5E5E5"> to prove security can you can</font>

995
00:45:36,180 --> 00:45:40,049
you briefly explain<font color="#CCCCCC"> what what the gap</font>

996
00:45:38,099 --> 00:45:41,910
was and I'm also curious whether you

997
00:45:40,049 --> 00:45:43,259
<font color="#E5E5E5">think it represents</font><font color="#CCCCCC"> a real vulnerability</font>

998
00:45:41,910 --> 00:45:45,598
<font color="#E5E5E5">or if you think it's</font><font color="#CCCCCC"> more of</font><font color="#E5E5E5"> an academic</font>

999
00:45:43,260 --> 00:45:47,220
<font color="#E5E5E5">issue so that's not actually the</font>

1000
00:45:45,599 --> 00:45:49,020
analysis I mentioned I was<font color="#E5E5E5"> referring to</font>

1001
00:45:47,220 --> 00:45:52,230
is one<font color="#E5E5E5"> that</font><font color="#CCCCCC"> recently came</font><font color="#E5E5E5"> out for</font>

1002
00:45:49,020 --> 00:45:54,990
Benjamin<font color="#E5E5E5"> lip in the ACC model</font><font color="#CCCCCC"> which</font>

1003
00:45:52,230 --> 00:45:57,329
proves<font color="#E5E5E5"> the properties entirely and it's</font>

1004
00:45:54,990 --> 00:46:00,479
done now what happened with<font color="#E5E5E5"> the Dowling</font>

1005
00:45:57,329 --> 00:46:04,200
<font color="#E5E5E5">Patterson</font><font color="#CCCCCC"> paper is they wanted to prove</font>

1006
00:46:00,480 --> 00:46:07,260
it<font color="#CCCCCC"> more</font><font color="#E5E5E5"> traditional</font><font color="#CCCCCC"> you seek a model</font>

1007
00:46:04,200 --> 00:46:10,049
where you want to have a very separate

1008
00:46:07,260 --> 00:46:12,000
key exchange from a data plane where you

1009
00:46:10,049 --> 00:46:14,190
<font color="#E5E5E5">can have this key exchange in isolation</font>

1010
00:46:12,000 --> 00:46:15,809
and<font color="#E5E5E5"> then take</font><font color="#CCCCCC"> whatever comes</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> of that</font>

1011
00:46:14,190 --> 00:46:16,130
<font color="#E5E5E5">and</font><font color="#CCCCCC"> put it in the data plane</font><font color="#E5E5E5"> this is</font>

1012
00:46:15,809 --> 00:46:18,940
<font color="#E5E5E5">kind</font>

1013
00:46:16,130 --> 00:46:22,040
the traditional you<font color="#E5E5E5"> know</font><font color="#CCCCCC"> IPSec style</font>

1014
00:46:18,940 --> 00:46:24,350
<font color="#E5E5E5">separate all the layers and wire guard</font>

1015
00:46:22,040 --> 00:46:27,590
was was certainly not designed that way

1016
00:46:24,350 --> 00:46:29,000
we<font color="#CCCCCC"> really intimately tied a timer state</font>

1017
00:46:27,590 --> 00:46:31,970
machine with the key exchange with the

1018
00:46:29,000 --> 00:46:35,060
data<font color="#CCCCCC"> playing</font><font color="#E5E5E5"> so we have something a lot</font>

1019
00:46:31,970 --> 00:46:36,890
<font color="#CCCCCC">more compact</font><font color="#E5E5E5"> and minimal</font><font color="#CCCCCC"> and so if you</font>

1020
00:46:35,060 --> 00:46:39,290
<font color="#E5E5E5">try and analyze according to these these</font>

1021
00:46:36,890 --> 00:46:42,759
old techniques it<font color="#E5E5E5"> it doesn't work it's</font>

1022
00:46:39,290 --> 00:46:46,370
<font color="#E5E5E5">not made for</font><font color="#CCCCCC"> that so</font><font color="#E5E5E5"> they're tweak was</font>

1023
00:46:42,760 --> 00:46:49,370
to add an additional message that would

1024
00:46:46,370 --> 00:46:51,259
then put it as a separate<font color="#CCCCCC"> thing and I</font>

1025
00:46:49,370 --> 00:46:54,770
mean in the<font color="#E5E5E5"> end that</font><font color="#CCCCCC"> doesn't</font><font color="#E5E5E5"> get us</font>

1026
00:46:51,260 --> 00:46:56,600
anything and I think<font color="#CCCCCC"> there's a kind of a</font>

1027
00:46:54,770 --> 00:47:00,320
<font color="#E5E5E5">nice hand wavy argument you can</font><font color="#CCCCCC"> make</font>

1028
00:46:56,600 --> 00:47:03,110
where<font color="#CCCCCC"> you say that</font><font color="#E5E5E5"> their analysis is and</font>

1029
00:47:00,320 --> 00:47:04,940
<font color="#CCCCCC">their tweak is is morally equivalent to</font>

1030
00:47:03,110 --> 00:47:06,470
<font color="#CCCCCC">the wire guard protocol that</font><font color="#E5E5E5"> is I mean</font>

1031
00:47:04,940 --> 00:47:09,920
<font color="#CCCCCC">this you know that's the hand</font><font color="#E5E5E5"> wavy</font>

1032
00:47:06,470 --> 00:47:12,799
version and well I felt uneasy about

1033
00:47:09,920 --> 00:47:15,650
that<font color="#E5E5E5"> but recently we have this nice</font>

1034
00:47:12,800 --> 00:47:19,910
computational model analysis<font color="#E5E5E5"> that came</font>

1035
00:47:15,650 --> 00:47:23,120
out that the shows were<font color="#E5E5E5"> okay so there's</font>

1036
00:47:19,910 --> 00:47:25,250
a new proof in the ACC model of the of

1037
00:47:23,120 --> 00:47:27,500
the<font color="#CCCCCC"> Aza's wire</font><font color="#E5E5E5"> guard there is if you go</font>

1038
00:47:25,250 --> 00:47:29,330
to wire guard<font color="#E5E5E5"> comm slash formal -</font>

1039
00:47:27,500 --> 00:47:35,090
<font color="#E5E5E5">verification</font><font color="#CCCCCC"> know there's a link to</font><font color="#E5E5E5"> it</font>

1040
00:47:29,330 --> 00:47:38,779
<font color="#E5E5E5">there</font><font color="#CCCCCC"> thank</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> a question about future</font>

1041
00:47:35,090 --> 00:47:42,560
plans<font color="#E5E5E5"> small and fast is good for many</font>

1042
00:47:38,780 --> 00:47:44,930
devices<font color="#CCCCCC"> in IOT</font><font color="#E5E5E5"> but managing keys of</font>

1043
00:47:42,560 --> 00:47:47,230
thousands of devices<font color="#CCCCCC"> is problematic do</font>

1044
00:47:44,930 --> 00:47:50,629
you have any plans to<font color="#CCCCCC"> add</font><font color="#E5E5E5"> a public key</font>

1045
00:47:47,230 --> 00:47:52,940
hierarchy of any sort<font color="#E5E5E5"> some kind of sick</font>

1046
00:47:50,630 --> 00:47:55,220
checking<font color="#CCCCCC"> higher-level signature rather</font>

1047
00:47:52,940 --> 00:47:57,740
than having to know every client key<font color="#E5E5E5"> so</font>

1048
00:47:55,220 --> 00:48:02,060
we don't have<font color="#E5E5E5"> plans to add</font><font color="#CCCCCC"> signatures or</font>

1049
00:47:57,740 --> 00:48:05,629
certificates<font color="#E5E5E5"> but I think it's very</font>

1050
00:48:02,060 --> 00:48:07,850
feasible to build tooling around this to

1051
00:48:05,630 --> 00:48:11,600
even manage hundreds of thousands of

1052
00:48:07,850 --> 00:48:14,020
<font color="#E5E5E5">clients</font><font color="#CCCCCC"> where both sides do learn of</font>

1053
00:48:11,600 --> 00:48:19,040
each other's public key ahead of time<font color="#CCCCCC"> I</font>

1054
00:48:14,020 --> 00:48:21,320
don't<font color="#CCCCCC"> think that every new protocol that</font>

1055
00:48:19,040 --> 00:48:24,759
uses cryptography in one way<font color="#E5E5E5"> or another</font>

1056
00:48:21,320 --> 00:48:28,580
<font color="#E5E5E5">should reinvent the key distribution</font>

1057
00:48:24,760 --> 00:48:29,970
method<font color="#CCCCCC"> so by just having</font><font color="#E5E5E5"> these short</font>

1058
00:48:28,580 --> 00:48:31,920
base64 public key

1059
00:48:29,970 --> 00:48:34,799
that<font color="#E5E5E5"> are pre distributed you can use</font>

1060
00:48:31,920 --> 00:48:37,680
existing mechanisms if you've got you

1061
00:48:34,800 --> 00:48:39,420
know a database server or LDAP even or

1062
00:48:37,680 --> 00:48:42,149
anything<font color="#E5E5E5"> that's already there you can</font>

1063
00:48:39,420 --> 00:48:50,609
plug<font color="#E5E5E5"> into that rather than try</font><font color="#CCCCCC"> and roll</font>

1064
00:48:42,150 --> 00:48:53,369
our own<font color="#E5E5E5"> brand-new</font><font color="#CCCCCC"> PK I I there's a so</font>

1065
00:48:50,609 --> 00:48:55,650
there's a<font color="#CCCCCC"> third-party implementation of</font>

1066
00:48:53,369 --> 00:48:57,359
our guard for<font color="#E5E5E5"> Windows</font><font color="#CCCCCC"> have you had any</font>

1067
00:48:55,650 --> 00:48:59,490
<font color="#CCCCCC">communication with</font><font color="#E5E5E5"> the developers behind</font>

1068
00:48:57,359 --> 00:49:01,020
<font color="#CCCCCC">that or is your policy or</font><font color="#E5E5E5"> not still it's</font>

1069
00:48:59,490 --> 00:49:05,040
not from the market our devs so don't

1070
00:49:01,020 --> 00:49:10,920
use<font color="#E5E5E5"> it</font><font color="#CCCCCC"> so we've we've</font><font color="#E5E5E5"> talked a little</font>

1071
00:49:05,040 --> 00:49:14,130
bit<font color="#E5E5E5"> with them but we're trying to push</font>

1072
00:49:10,920 --> 00:49:19,200
out very high assurance software from

1073
00:49:14,130 --> 00:49:20,910
<font color="#E5E5E5">the wire guard project and</font><font color="#CCCCCC"> they got our</font>

1074
00:49:19,200 --> 00:49:22,830
recommendation would be wait for wait

1075
00:49:20,910 --> 00:49:24,118
for clients that<font color="#CCCCCC"> come from us</font><font color="#E5E5E5"> because</font>

1076
00:49:22,830 --> 00:49:30,779
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> trying to do a really thorough</font>

1077
00:49:24,119 --> 00:49:32,640
job and developing it<font color="#CCCCCC"> you said</font><font color="#E5E5E5"> you were</font>

1078
00:49:30,780 --> 00:49:34,349
<font color="#CCCCCC">very</font><font color="#E5E5E5"> opinionated about your crypto</font>

1079
00:49:32,640 --> 00:49:35,368
algorithm<font color="#E5E5E5"> and choice I'm sorry I didn't</font>

1080
00:49:34,349 --> 00:49:37,740
hear said you were<font color="#E5E5E5"> very opinionated</font>

1081
00:49:35,369 --> 00:49:39,780
about<font color="#E5E5E5"> your choice of crypto algorithms</font>

1082
00:49:37,740 --> 00:49:41,129
<font color="#E5E5E5">do you have a transition mechanism</font><font color="#CCCCCC"> it's</font>

1083
00:49:39,780 --> 00:49:46,410
tomorrow<font color="#CCCCCC"> morning one of</font><font color="#E5E5E5"> those has to</font>

1084
00:49:41,130 --> 00:49:48,920
<font color="#E5E5E5">change</font><font color="#CCCCCC"> yeah so every message type every</font>

1085
00:49:46,410 --> 00:49:53,779
message in wire guard has a type<font color="#CCCCCC"> and</font>

1086
00:49:48,920 --> 00:49:56,250
even<font color="#CCCCCC"> the wire guard handshake itself is</font>

1087
00:49:53,780 --> 00:49:59,580
<font color="#E5E5E5">versioned and that version is hashed in</font>

1088
00:49:56,250 --> 00:50:01,349
super<font color="#E5E5E5"> early on in a handshake</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> so the</font>

1089
00:49:59,580 --> 00:50:03,690
types of each<font color="#CCCCCC"> message in</font><font color="#E5E5E5"> the crypto that</font>

1090
00:50:01,349 --> 00:50:06,060
is using are<font color="#E5E5E5"> very closely bound to each</font>

1091
00:50:03,690 --> 00:50:09,240
other<font color="#E5E5E5"> and so if there's a clipped</font>

1092
00:50:06,060 --> 00:50:11,400
<font color="#E5E5E5">apocalypse and</font><font color="#CCCCCC"> chacha</font><font color="#E5E5E5"> is broken and</font>

1093
00:50:09,240 --> 00:50:13,229
<font color="#E5E5E5">everyone needs to upgrade</font><font color="#CCCCCC"> it's not a</font>

1094
00:50:11,400 --> 00:50:16,830
<font color="#CCCCCC">problem we</font><font color="#E5E5E5"> can introduce more message</font>

1095
00:50:13,230 --> 00:50:19,830
types and expand<font color="#E5E5E5"> things as we need it's</font>

1096
00:50:16,830 --> 00:50:21,119
very<font color="#CCCCCC"> different from negotiation it's for</font>

1097
00:50:19,830 --> 00:50:23,490
each side talks and what do<font color="#E5E5E5"> you support</font>

1098
00:50:21,119 --> 00:50:24,540
and that kind of thing it's more like

1099
00:50:23,490 --> 00:50:27,060
what you're<font color="#E5E5E5"> used to with software</font>

1100
00:50:24,540 --> 00:50:28,830
<font color="#CCCCCC">updates but the</font><font color="#E5E5E5"> protocol</font><font color="#CCCCCC"> does allow for</font>

1101
00:50:27,060 --> 00:50:32,369
that<font color="#CCCCCC"> kind of thing</font><font color="#E5E5E5"> and we even have</font>

1102
00:50:28,830 --> 00:50:35,369
three additional<font color="#E5E5E5"> reserved bytes in the</font>

1103
00:50:32,369 --> 00:50:41,460
basic message<font color="#E5E5E5"> header just in case you</font>

1104
00:50:35,369 --> 00:50:44,660
know we need<font color="#E5E5E5"> to expand massively it</font>

1105
00:50:41,460 --> 00:50:44,660
looks like I'm at a time

