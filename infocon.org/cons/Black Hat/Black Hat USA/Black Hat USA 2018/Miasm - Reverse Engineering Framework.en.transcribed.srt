1
00:00:00,060 --> 00:00:06,359
we are very<font color="#E5E5E5"> glad to be</font><font color="#CCCCCC"> here at blackhat</font>

2
00:00:01,680 --> 00:00:09,599
<font color="#CCCCCC">to present my own</font><font color="#E5E5E5"> so I am far with this</font>

3
00:00:06,359 --> 00:00:13,500
flow and he is a<font color="#CCCCCC"> cabbie mujin we</font><font color="#E5E5E5"> walk up</font>

4
00:00:09,599 --> 00:00:15,450
<font color="#E5E5E5">the CI in front</font><font color="#CCCCCC"> she's casaya</font><font color="#E5E5E5"> our energy</font>

5
00:00:13,500 --> 00:00:18,750
atomic it was<font color="#E5E5E5"> energy alternative you</font>

6
00:00:15,450 --> 00:00:21,470
know<font color="#CCCCCC"> it's nuclear stuff and we'll</font>

7
00:00:18,750 --> 00:00:24,689
present<font color="#E5E5E5"> you</font><font color="#CCCCCC"> a museum which has he said</font>

8
00:00:21,470 --> 00:00:28,380
remark of<font color="#E5E5E5"> reverse</font><font color="#CCCCCC"> engineering the</font>

9
00:00:24,689 --> 00:00:30,448
project is born in around 2006 and 2007

10
00:00:28,380 --> 00:00:34,110
<font color="#CCCCCC">and it has been made</font><font color="#E5E5E5"> the publicly</font>

11
00:00:30,449 --> 00:00:36,510
<font color="#E5E5E5">available</font><font color="#CCCCCC"> in 2011 it's written in pitten</font>

12
00:00:34,110 --> 00:00:40,350
and it has<font color="#E5E5E5"> its particular is that</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> has</font>

13
00:00:36,510 --> 00:00:42,300
it own intermediate representation you

14
00:00:40,350 --> 00:00:46,500
have<font color="#CCCCCC"> some website here in which you can</font>

15
00:00:42,300 --> 00:00:49,349
find<font color="#E5E5E5"> more</font><font color="#CCCCCC"> information about it so why</font>

16
00:00:46,500 --> 00:00:52,500
are we are here<font color="#E5E5E5"> we are here to to show</font>

17
00:00:49,350 --> 00:00:54,440
you nezam from<font color="#CCCCCC"> OC's it is used daily in</font>

18
00:00:52,500 --> 00:00:59,010
a<font color="#CCCCCC"> malware analysis and packing and</font>

19
00:00:54,440 --> 00:01:01,440
static analysis<font color="#CCCCCC"> and so on we have some</font>

20
00:00:59,010 --> 00:01:06,899
rules in order<font color="#E5E5E5"> to to do to try to do</font>

21
00:01:01,440 --> 00:01:09,830
clean code in the<font color="#CCCCCC"> Amazon here if you are</font>

22
00:01:06,900 --> 00:01:12,900
a novice<font color="#CCCCCC"> in</font><font color="#E5E5E5"> ISM you can use for example</font>

23
00:01:09,830 --> 00:01:14,340
<font color="#E5E5E5">some resources for example in the code</font>

24
00:01:12,900 --> 00:01:17,100
<font color="#CCCCCC">you have dog swings there is no real</font>

25
00:01:14,340 --> 00:01:20,299
full documentation in<font color="#CCCCCC"> Jaime azzam sadly</font>

26
00:01:17,100 --> 00:01:23,460
that<font color="#E5E5E5"> you have a lot of examples in which</font>

27
00:01:20,299 --> 00:01:25,920
you have some illustration of each video

28
00:01:23,460 --> 00:01:27,419
of<font color="#CCCCCC"> mesm which is very interesting to</font>

29
00:01:25,920 --> 00:01:30,560
read and there is a<font color="#E5E5E5"> blog</font><font color="#CCCCCC"> post I</font><font color="#E5E5E5"> wasn't</font>

30
00:01:27,420 --> 00:01:32,700
as well we want<font color="#CCCCCC"> today</font><font color="#E5E5E5"> show a list of</font>

31
00:01:30,560 --> 00:01:34,740
features of mass because it's a bit

32
00:01:32,700 --> 00:01:37,619
boring<font color="#CCCCCC"> so we will try to</font><font color="#E5E5E5"> enlight only</font>

33
00:01:34,740 --> 00:01:39,600
some very interesting features<font color="#E5E5E5"> and we</font>

34
00:01:37,619 --> 00:01:45,180
will illustrate them with real code

35
00:01:39,600 --> 00:01:48,329
examples today so first the basic stuff

36
00:01:45,180 --> 00:01:50,610
in yes<font color="#E5E5E5"> you have is music as his own</font>

37
00:01:48,329 --> 00:01:55,460
estimate<font color="#E5E5E5"> is a similar engine and</font><font color="#CCCCCC"> here's</font>

38
00:01:50,610 --> 00:01:58,560
he<font color="#CCCCCC"> can manipulate</font><font color="#E5E5E5"> x86 arm</font><font color="#CCCCCC"> meats</font><font color="#E5E5E5"> extra</font>

39
00:01:55,460 --> 00:02:00,539
architects use it can support<font color="#CCCCCC"> al for</font>

40
00:01:58,560 --> 00:02:07,110
portable executable<font color="#E5E5E5"> or roll and</font><font color="#CCCCCC"> nutiva</font>

41
00:02:00,540 --> 00:02:09,629
<font color="#E5E5E5">as</font><font color="#CCCCCC"> bipod we have we can had some custom</font>

42
00:02:07,110 --> 00:02:10,848
<font color="#E5E5E5">architectures maybe we are a mad guy</font>

43
00:02:09,628 --> 00:02:13,429
here who did that

44
00:02:10,848 --> 00:02:20,929
and he will present<font color="#E5E5E5"> it I think this</font>

45
00:02:13,430 --> 00:02:23,989
<font color="#CCCCCC">afternoon</font><font color="#E5E5E5"> okay so to</font><font color="#CCCCCC"> start with if you</font>

46
00:02:20,930 --> 00:02:25,370
want to everything<font color="#CCCCCC"> start for the</font><font color="#E5E5E5"> bite</font><font color="#CCCCCC"> so</font>

47
00:02:23,989 --> 00:02:27,769
we have<font color="#E5E5E5"> to disassemble the bite to do</font>

48
00:02:25,370 --> 00:02:30,260
this we can<font color="#E5E5E5"> do this simple code</font><font color="#CCCCCC"> so we</font>

49
00:02:27,769 --> 00:02:32,780
have a come<font color="#E5E5E5"> to know we have to</font><font color="#CCCCCC"> insert</font>

50
00:02:30,260 --> 00:02:34,489
<font color="#CCCCCC">this</font><font color="#E5E5E5"> engine and we have to decimal a</font>

51
00:02:32,780 --> 00:02:37,250
function which give an assembly control

52
00:02:34,489 --> 00:02:39,109
flow graph<font color="#E5E5E5"> and we can dump it</font><font color="#CCCCCC"> if you use</font>

53
00:02:37,250 --> 00:02:42,859
if<font color="#E5E5E5"> you read this code you</font><font color="#CCCCCC"> have written</font>

54
00:02:39,109 --> 00:02:47,150
in fact<font color="#E5E5E5"> multi architectures code you</font>

55
00:02:42,859 --> 00:02:49,579
know which can involve<font color="#E5E5E5"> a function so but</font>

56
00:02:47,150 --> 00:02:52,849
the real interesting<font color="#E5E5E5"> you you have this</font>

57
00:02:49,579 --> 00:02:55,700
code in in in<font color="#E5E5E5"> some resources</font><font color="#CCCCCC"> here but</font>

58
00:02:52,849 --> 00:02:58,129
the real<font color="#E5E5E5"> interesting since</font><font color="#CCCCCC"> inea's is its</font>

59
00:02:55,700 --> 00:03:02,149
internal and<font color="#CCCCCC"> intermediate</font><font color="#E5E5E5"> presentation</font>

60
00:02:58,129 --> 00:03:04,489
<font color="#E5E5E5">and language this language is can be</font>

61
00:03:02,150 --> 00:03:07,549
extracted from a native assembly

62
00:03:04,489 --> 00:03:09,470
language so we have a translator between

63
00:03:07,549 --> 00:03:12,139
this<font color="#CCCCCC"> language</font><font color="#E5E5E5"> and this an tomato</font>

64
00:03:09,470 --> 00:03:14,389
intermediate to expedition here owns you

65
00:03:12,139 --> 00:03:18,079
have<font color="#E5E5E5"> this</font><font color="#CCCCCC"> Co</font><font color="#E5E5E5"> feature you can do some</font>

66
00:03:14,389 --> 00:03:20,030
manipulation on it we will see those

67
00:03:18,079 --> 00:03:23,359
<font color="#CCCCCC">meditation in a couple</font><font color="#E5E5E5"> of sites and</font>

68
00:03:20,030 --> 00:03:25,010
after you<font color="#E5E5E5"> can use this intimate</font>

69
00:03:23,359 --> 00:03:27,819
representation in order to do some

70
00:03:25,010 --> 00:03:30,349
<font color="#E5E5E5">static</font><font color="#CCCCCC"> analysis</font><font color="#E5E5E5"> and so</font><font color="#CCCCCC"> on which</font><font color="#E5E5E5"> will be</font>

71
00:03:27,819 --> 00:03:34,698
demonstrated in<font color="#E5E5E5"> a couple of</font><font color="#CCCCCC"> sites as</font>

72
00:03:30,349 --> 00:03:36,948
well<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get this language you can write</font>

73
00:03:34,699 --> 00:03:39,229
this these lines which<font color="#E5E5E5"> is a native</font>

74
00:03:36,949 --> 00:03:43,970
<font color="#E5E5E5">language and which will translate it</font>

75
00:03:39,229 --> 00:03:48,409
into this<font color="#CCCCCC"> intermediate language okay</font>

76
00:03:43,970 --> 00:03:51,440
this<font color="#CCCCCC"> language is based on abstracts and</font>

77
00:03:48,409 --> 00:03:54,530
<font color="#CCCCCC">6:3</font><font color="#E5E5E5"> and is defined by about nine words</font>

78
00:03:51,440 --> 00:03:56,599
and you<font color="#E5E5E5"> have a simple very simple words</font>

79
00:03:54,530 --> 00:03:58,459
for example<font color="#E5E5E5"> integers and have variables</font>

80
00:03:56,599 --> 00:04:01,369
and more complete cat in the world

81
00:03:58,459 --> 00:04:04,729
for example operators<font color="#CCCCCC"> bytes manipulation</font>

82
00:04:01,370 --> 00:04:06,769
and so on you have also an assignment

83
00:04:04,729 --> 00:04:09,560
which is<font color="#E5E5E5"> here represented by X</font>

84
00:04:06,769 --> 00:04:12,739
expression<font color="#E5E5E5"> affectation</font><font color="#CCCCCC"> in infants</font>

85
00:04:09,560 --> 00:04:15,680
affectation<font color="#CCCCCC"> is f is for application and</font>

86
00:04:12,739 --> 00:04:20,139
it stands for assignment but in<font color="#CCCCCC"> English</font>

87
00:04:15,680 --> 00:04:24,530
<font color="#CCCCCC">X us</font><font color="#E5E5E5"> is with where the tool to use</font>

88
00:04:20,139 --> 00:04:26,480
okay so that<font color="#E5E5E5"> word there are some</font><font color="#CCCCCC"> roots</font>

89
00:04:24,530 --> 00:04:29,059
about<font color="#E5E5E5"> this language the first rules is</font>

90
00:04:26,480 --> 00:04:33,470
<font color="#CCCCCC">that each expression</font><font color="#E5E5E5"> it has a fixed size</font>

91
00:04:29,060 --> 00:04:37,250
and embed<font color="#E5E5E5"> inside here and another rule</font>

92
00:04:33,470 --> 00:04:40,220
is<font color="#E5E5E5"> that you can only have memory</font>

93
00:04:37,250 --> 00:04:44,390
<font color="#CCCCCC">Department or variable on the</font><font color="#E5E5E5"> assignment</font>

94
00:04:40,220 --> 00:04:46,340
so as less values<font color="#CCCCCC"> even surface</font><font color="#E5E5E5"> another</font>

95
00:04:44,390 --> 00:04:49,640
<font color="#E5E5E5">interesting thing is</font><font color="#CCCCCC"> that the expression</font>

96
00:04:46,340 --> 00:04:51,679
<font color="#CCCCCC">operator</font><font color="#E5E5E5"> can takes anything any any name</font>

97
00:04:49,640 --> 00:04:55,430
of operation and<font color="#E5E5E5"> me as we can rock with</font>

98
00:04:51,680 --> 00:04:58,550
unknown names of operators and<font color="#CCCCCC"> it can</font>

99
00:04:55,430 --> 00:05:03,340
under<font color="#E5E5E5"> law so it can do some propagation</font>

100
00:04:58,550 --> 00:05:05,900
algorithm<font color="#E5E5E5"> extra unknown operators</font>

101
00:05:03,340 --> 00:05:08,000
<font color="#CCCCCC">another trick is that an</font><font color="#E5E5E5"> interesting</font>

102
00:05:05,900 --> 00:05:12,169
<font color="#E5E5E5">point is that assignment</font><font color="#CCCCCC"> are done in</font>

103
00:05:08,000 --> 00:05:14,060
parallel<font color="#CCCCCC"> I will show this later so</font><font color="#E5E5E5"> for</font>

104
00:05:12,169 --> 00:05:18,380
<font color="#E5E5E5">example if you want to translate navi-x</font>

105
00:05:14,060 --> 00:05:19,820
<font color="#CCCCCC">elites</font><font color="#E5E5E5"> in x86</font><font color="#CCCCCC"> you have this kind</font><font color="#E5E5E5"> of</font>

106
00:05:18,380 --> 00:05:21,800
stuff so<font color="#CCCCCC"> you have an effect on</font>

107
00:05:19,820 --> 00:05:27,110
assignment<font color="#E5E5E5"> between the ID</font>

108
00:05:21,800 --> 00:05:29,360
<font color="#CCCCCC">EBX</font><font color="#E5E5E5"> and IDE 8 and you can print a human</font>

109
00:05:27,110 --> 00:05:33,380
readable<font color="#E5E5E5"> version of it like this so you</font>

110
00:05:29,360 --> 00:05:35,570
have simply<font color="#CCCCCC"> EI</font><font color="#E5E5E5"> wall-e B's if you want to</font>

111
00:05:33,380 --> 00:05:38,570
read<font color="#E5E5E5"> another example is a purse</font><font color="#CCCCCC"> 8 for</font>

112
00:05:35,570 --> 00:05:40,940
<font color="#CCCCCC">example so you have here</font><font color="#E5E5E5"> two equations</font>

113
00:05:38,570 --> 00:05:43,669
that<font color="#E5E5E5"> are done in</font><font color="#CCCCCC"> parallel</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> update</font>

114
00:05:40,940 --> 00:05:46,400
of<font color="#E5E5E5"> the stack pointer here and as a</font>

115
00:05:43,669 --> 00:05:49,909
storage<font color="#E5E5E5"> of the eh in the top of the</font>

116
00:05:46,400 --> 00:05:52,400
stack<font color="#CCCCCC"> and in fact this ESP here has</font>

117
00:05:49,910 --> 00:05:54,500
nothing<font color="#CCCCCC"> to do with this ESP here in fact</font>

118
00:05:52,400 --> 00:05:59,440
this one is is the source of the

119
00:05:54,500 --> 00:06:00,830
<font color="#E5E5E5">dimension and our very complete</font><font color="#CCCCCC"> more</font>

120
00:05:59,440 --> 00:06:02,870
complicated stuff

121
00:06:00,830 --> 00:06:05,510
for example the comparison<font color="#CCCCCC"> between two</font>

122
00:06:02,870 --> 00:06:10,220
register in fact when<font color="#E5E5E5"> we translate this</font>

123
00:06:05,510 --> 00:06:11,990
we will give some a bunch of flags for

124
00:06:10,220 --> 00:06:14,750
example the zero<font color="#E5E5E5"> flag</font><font color="#CCCCCC"> high flags</font><font color="#E5E5E5"> and</font>

125
00:06:11,990 --> 00:06:16,940
<font color="#E5E5E5">they are assigned from a very</font>

126
00:06:14,750 --> 00:06:18,830
complicated expression we which<font color="#CCCCCC"> is in</font>

127
00:06:16,940 --> 00:06:21,760
fact<font color="#CCCCCC"> the real a question of the carry</font>

128
00:06:18,830 --> 00:06:25,400
<font color="#E5E5E5">flag or</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> riddle equation of</font><font color="#CCCCCC"> a flight</font>

129
00:06:21,760 --> 00:06:29,539
so<font color="#E5E5E5"> to illustrate this we</font><font color="#CCCCCC"> can start</font><font color="#E5E5E5"> with</font>

130
00:06:25,400 --> 00:06:31,520
this native x86 language<font color="#CCCCCC"> so we have</font>

131
00:06:29,540 --> 00:06:35,510
<font color="#E5E5E5">function some comparison between</font>

132
00:06:31,520 --> 00:06:36,889
<font color="#E5E5E5">arguments and return value when we</font>

133
00:06:35,510 --> 00:06:40,490
translate this code in

134
00:06:36,889 --> 00:06:43,520
<font color="#E5E5E5">intimate language is a bit more</font>

135
00:06:40,490 --> 00:06:48,919
complicated here you can see that we we

136
00:06:43,520 --> 00:06:51,919
<font color="#E5E5E5">can recognize his here - EVP</font><font color="#CCCCCC"> here we</font>

137
00:06:48,919 --> 00:06:55,310
have the mo<font color="#E5E5E5"> ESP in EVP and we have a</font>

138
00:06:51,919 --> 00:06:58,370
bunch of equation of<font color="#CCCCCC"> old eflags which is</font>

139
00:06:55,310 --> 00:07:01,430
here and which<font color="#E5E5E5"> is</font><font color="#CCCCCC"> really complicated so</font>

140
00:06:58,370 --> 00:07:03,529
we have the jump<font color="#E5E5E5"> comparison</font><font color="#CCCCCC"> with the</font>

141
00:07:01,430 --> 00:07:06,289
jump less or<font color="#CCCCCC"> every one which has its own</font>

142
00:07:03,529 --> 00:07:09,560
<font color="#E5E5E5">equation here so the fixation of X and</font>

143
00:07:06,289 --> 00:07:12,979
the resolution so the first thing we can

144
00:07:09,560 --> 00:07:15,560
do here<font color="#E5E5E5"> is to use for</font><font color="#CCCCCC"> example passes</font>

145
00:07:12,979 --> 00:07:18,169
<font color="#CCCCCC">under here to generate</font><font color="#E5E5E5"> a modified here</font>

146
00:07:15,560 --> 00:07:21,169
with some codes and<font color="#E5E5E5"> education for</font>

147
00:07:18,169 --> 00:07:24,198
<font color="#CCCCCC">example the most</font><font color="#E5E5E5"> common</font><font color="#CCCCCC"> one is a dead</font>

148
00:07:21,169 --> 00:07:26,508
code elimination<font color="#E5E5E5"> if you are on x86 you</font>

149
00:07:24,199 --> 00:07:28,939
know that in the IB you<font color="#E5E5E5"> don't you don't</font>

150
00:07:26,509 --> 00:07:31,339
<font color="#E5E5E5">need the flags at</font><font color="#CCCCCC"> the end of the</font>

151
00:07:28,939 --> 00:07:33,650
<font color="#CCCCCC">function</font><font color="#E5E5E5"> so the computation of</font><font color="#CCCCCC"> the carry</font>

152
00:07:31,339 --> 00:07:35,689
flag<font color="#E5E5E5"> here is not used anymore</font><font color="#CCCCCC"> so in</font><font color="#E5E5E5"> is</font>

153
00:07:33,650 --> 00:07:37,698
in experiments in the<font color="#CCCCCC"> east notes use</font>

154
00:07:35,689 --> 00:07:42,439
<font color="#E5E5E5">anymore here and so you can see that</font>

155
00:07:37,699 --> 00:07:46,009
this equation is not need here<font color="#E5E5E5"> so we can</font>

156
00:07:42,439 --> 00:07:48,849
remove it so if we pass this this<font color="#E5E5E5"> abyss</font>

157
00:07:46,009 --> 00:07:59,120
<font color="#E5E5E5">equation here we will have this code</font>

158
00:07:48,849 --> 00:08:06,020
which is a bit<font color="#E5E5E5"> more simple in now but we</font>

159
00:07:59,120 --> 00:08:11,180
can do a better in fact the new feature

160
00:08:06,020 --> 00:08:13,159
<font color="#CCCCCC">in Jasmine is to explain</font><font color="#E5E5E5"> and represent</font>

161
00:08:11,180 --> 00:08:14,990
all<font color="#E5E5E5"> the intermediate flags with high</font>

162
00:08:13,159 --> 00:08:17,719
level flags<font color="#E5E5E5"> for example instead of</font>

163
00:08:14,990 --> 00:08:20,000
<font color="#CCCCCC">having very big equations in the</font>

164
00:08:17,719 --> 00:08:21,589
<font color="#E5E5E5">internet language we have only the</font>

165
00:08:20,000 --> 00:08:25,219
simple operator which does the same

166
00:08:21,589 --> 00:08:27,319
<font color="#E5E5E5">thing which is</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> simple here</font><font color="#CCCCCC"> and as</font>

167
00:08:25,219 --> 00:08:29,409
well<font color="#CCCCCC"> the</font><font color="#E5E5E5"> jump less</font><font color="#CCCCCC"> well will be</font>

168
00:08:27,319 --> 00:08:33,500
represented by a new a new operator here

169
00:08:29,409 --> 00:08:36,140
and which will take all<font color="#E5E5E5"> the only parts</font>

170
00:08:33,500 --> 00:08:41,719
of the flags that are used to compute

171
00:08:36,140 --> 00:08:44,208
the conditional jump<font color="#E5E5E5"> so if we here is</font>

172
00:08:41,719 --> 00:08:47,300
<font color="#E5E5E5">the new intermediate position</font><font color="#CCCCCC"> using this</font>

173
00:08:44,208 --> 00:08:49,609
new animated<font color="#E5E5E5"> language here with sorry</font>

174
00:08:47,300 --> 00:08:55,880
<font color="#E5E5E5">with this new and</font>

175
00:08:49,610 --> 00:08:58,040
and the next step will<font color="#E5E5E5"> be to</font><font color="#CCCCCC"> it's again</font>

176
00:08:55,880 --> 00:09:02,510
a bit complicated<font color="#E5E5E5"> so we have to do more</font>

177
00:08:58,040 --> 00:09:04,280
<font color="#CCCCCC">than this</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> we will</font><font color="#E5E5E5"> try to do in asthma</font>

178
00:09:02,510 --> 00:09:08,390
propagation and to do this we have to

179
00:09:04,280 --> 00:09:09,949
<font color="#CCCCCC">use a static single assignment it's a</font>

180
00:09:08,390 --> 00:09:12,890
new feature<font color="#E5E5E5"> in us which has been added</font>

181
00:09:09,950 --> 00:09:15,260
by a<font color="#E5E5E5"> contribution by team</font><font color="#CCCCCC"> play Cisco</font><font color="#E5E5E5"> and</font>

182
00:09:12,890 --> 00:09:17,150
Nico<font color="#CCCCCC"> Schmidt's</font><font color="#E5E5E5"> in fact it's</font><font color="#CCCCCC"> very common</font>

183
00:09:15,260 --> 00:09:19,160
as well<font color="#E5E5E5"> in population to</font><font color="#CCCCCC"> use this</font>

184
00:09:17,150 --> 00:09:24,170
transformation<font color="#E5E5E5"> in order to simplify your</font>

185
00:09:19,160 --> 00:09:27,230
<font color="#CCCCCC">code cut so it has a very interesting</font>

186
00:09:24,170 --> 00:09:29,959
property here each<font color="#E5E5E5"> each pneumonia each</font>

187
00:09:27,230 --> 00:09:31,490
register can<font color="#E5E5E5"> be assigned only</font><font color="#CCCCCC"> ons so you</font>

188
00:09:29,960 --> 00:09:34,700
have material version of the same<font color="#CCCCCC"> eraser</font>

189
00:09:31,490 --> 00:09:40,100
<font color="#CCCCCC">for</font><font color="#E5E5E5"> example you have</font><font color="#CCCCCC"> EA each all in X 1</font>

190
00:09:34,700 --> 00:09:42,650
X 2<font color="#E5E5E5"> X Terra</font><font color="#CCCCCC"> and here is a new code so</font>

191
00:09:40,100 --> 00:09:46,040
you you can<font color="#CCCCCC"> see</font><font color="#E5E5E5"> that the ESP dot 0 equal</font>

192
00:09:42,650 --> 00:09:49,100
<font color="#CCCCCC">X around and and</font><font color="#E5E5E5"> yeah it has the</font>

193
00:09:46,040 --> 00:09:52,730
multiple version of it here<font color="#CCCCCC"> so know that</font>

194
00:09:49,100 --> 00:09:55,160
we are<font color="#E5E5E5"> in SSA version we can do for</font>

195
00:09:52,730 --> 00:09:57,350
example<font color="#E5E5E5"> constant propagation but we will</font>

196
00:09:55,160 --> 00:09:59,030
do more<font color="#CCCCCC"> than this in us it's a cold</font>

197
00:09:57,350 --> 00:10:00,890
expression propagation because<font color="#E5E5E5"> we will</font>

198
00:09:59,030 --> 00:10:04,730
try to do more<font color="#CCCCCC"> than efficient constant</font>

199
00:10:00,890 --> 00:10:06,560
propagation to do this we have to<font color="#E5E5E5"> we</font>

200
00:10:04,730 --> 00:10:08,900
<font color="#CCCCCC">have some rules with for example we</font>

201
00:10:06,560 --> 00:10:11,599
cannot propagate<font color="#E5E5E5"> call operators because</font>

202
00:10:08,900 --> 00:10:15,079
<font color="#E5E5E5">a call represents</font><font color="#CCCCCC"> a sub call the</font>

203
00:10:11,600 --> 00:10:18,860
function you cannot mess with<font color="#E5E5E5"> readwrite</font>

204
00:10:15,080 --> 00:10:21,500
memory for example memory<font color="#CCCCCC"> boring and has</font>

205
00:10:18,860 --> 00:10:23,180
but<font color="#CCCCCC"> has we are</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> SSA</font><font color="#E5E5E5"> we can do for</font>

206
00:10:21,500 --> 00:10:27,620
example register propagation and<font color="#E5E5E5"> so on</font>

207
00:10:23,180 --> 00:10:30,199
so here is the actual<font color="#E5E5E5"> code and when we</font>

208
00:10:27,620 --> 00:10:32,480
do this we will we will do a first step

209
00:10:30,200 --> 00:10:35,570
of propagation<font color="#E5E5E5"> so only a single</font><font color="#CCCCCC"> set</font><font color="#E5E5E5"> and</font>

210
00:10:32,480 --> 00:10:38,300
it<font color="#CCCCCC"> needs this code</font><font color="#E5E5E5"> so here we have the</font>

211
00:10:35,570 --> 00:10:41,750
house we have a source<font color="#E5E5E5"> the eggs</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> 0 and</font>

212
00:10:38,300 --> 00:10:43,849
this value it comes from here so here as

213
00:10:41,750 --> 00:10:45,710
we don't<font color="#E5E5E5"> have any memory right</font><font color="#CCCCCC"> between</font>

214
00:10:43,850 --> 00:10:48,170
this<font color="#E5E5E5"> vacation is</font><font color="#CCCCCC"> this weed</font><font color="#E5E5E5"> we can</font>

215
00:10:45,710 --> 00:10:51,980
obviously<font color="#E5E5E5"> replace this value by its</font>

216
00:10:48,170 --> 00:10:53,420
source<font color="#CCCCCC"> so it will give this</font><font color="#E5E5E5"> code so this</font>

217
00:10:51,980 --> 00:10:55,610
<font color="#E5E5E5">is</font><font color="#CCCCCC"> the first</font><font color="#E5E5E5"> step and the algorithm</font>

218
00:10:53,420 --> 00:10:57,680
<font color="#E5E5E5">trying to find a fixed point so after</font>

219
00:10:55,610 --> 00:10:59,600
this it<font color="#CCCCCC"> will try to take those equation</font>

220
00:10:57,680 --> 00:11:02,750
<font color="#E5E5E5">put them here in the listicle</font>

221
00:10:59,600 --> 00:11:05,480
computation so

222
00:11:02,750 --> 00:11:07,580
the operator here will be obviously very

223
00:11:05,480 --> 00:11:10,010
very<font color="#E5E5E5"> very long and we have some</font>

224
00:11:07,580 --> 00:11:11,390
<font color="#CCCCCC">high-level reduction</font><font color="#E5E5E5"> for example here we</font>

225
00:11:10,010 --> 00:11:14,600
<font color="#CCCCCC">have a reduction that say that this</font>

226
00:11:11,390 --> 00:11:17,150
<font color="#E5E5E5">powder with those sub arguments can</font>

227
00:11:14,600 --> 00:11:21,350
reduce has this<font color="#E5E5E5"> simple comparison</font><font color="#CCCCCC"> okay</font>

228
00:11:17,150 --> 00:11:24,140
so we have the<font color="#E5E5E5"> final code which is a</font>

229
00:11:21,350 --> 00:11:26,090
<font color="#E5E5E5">given like</font><font color="#CCCCCC"> this and we from</font><font color="#E5E5E5"> the x86 we</font>

230
00:11:24,140 --> 00:11:27,800
can recover<font color="#CCCCCC"> that we have a simple</font>

231
00:11:26,090 --> 00:11:31,490
<font color="#CCCCCC">comparison which is the first argument</font>

232
00:11:27,800 --> 00:11:34,370
which is<font color="#CCCCCC"> that's signed</font><font color="#E5E5E5"> and for our igual</font>

233
00:11:31,490 --> 00:11:37,010
<font color="#E5E5E5">who as a second argument</font><font color="#CCCCCC"> the last step</font>

234
00:11:34,370 --> 00:11:38,780
is<font color="#CCCCCC"> to remove heels of he which has been</font>

235
00:11:37,010 --> 00:11:39,550
which has<font color="#E5E5E5"> a bit of using the</font>

236
00:11:38,780 --> 00:11:44,540
transformation

237
00:11:39,550 --> 00:11:46,010
so using this it Emily just as well<font color="#E5E5E5"> so</font>

238
00:11:44,540 --> 00:11:48,530
here is the final<font color="#CCCCCC"> version of</font><font color="#E5E5E5"> the code</font>

239
00:11:46,010 --> 00:11:52,069
<font color="#E5E5E5">and we have the antimatter position of</font>

240
00:11:48,530 --> 00:11:54,290
the initial<font color="#E5E5E5"> 86 code and there's a very</font>

241
00:11:52,070 --> 00:11:57,110
<font color="#CCCCCC">interesting point is know that if you</font>

242
00:11:54,290 --> 00:12:00,699
have the same code but in<font color="#E5E5E5"> arm if you</font><font color="#CCCCCC"> use</font>

243
00:11:57,110 --> 00:12:03,740
this algorithm<font color="#E5E5E5"> here is a result for arm</font>

244
00:12:00,700 --> 00:12:07,490
so you<font color="#E5E5E5"> have the same result</font><font color="#CCCCCC"> so except</font>

245
00:12:03,740 --> 00:12:09,830
that on the arguments<font color="#CCCCCC"> has change in arm</font>

246
00:12:07,490 --> 00:12:12,320
you<font color="#E5E5E5"> have arguments</font><font color="#CCCCCC"> as pass through</font>

247
00:12:09,830 --> 00:12:15,110
register<font color="#E5E5E5"> so here you have register 0 and</font>

248
00:12:12,320 --> 00:12:18,620
<font color="#E5E5E5">1 which are compared</font><font color="#CCCCCC"> and for</font><font color="#E5E5E5"> example if</font>

249
00:12:15,110 --> 00:12:20,990
you are<font color="#E5E5E5"> on</font><font color="#CCCCCC"> alma 64 this</font><font color="#E5E5E5"> is the same</font>

250
00:12:18,620 --> 00:12:26,030
reagent here from the native<font color="#CCCCCC"> a phone</font>

251
00:12:20,990 --> 00:12:28,550
call<font color="#CCCCCC"> ok so now if you use</font><font color="#E5E5E5"> it in in a</font>

252
00:12:26,030 --> 00:12:31,189
real code<font color="#CCCCCC"> if you have this kind</font><font color="#E5E5E5"> of code</font>

253
00:12:28,550 --> 00:12:31,910
which is written<font color="#E5E5E5"> in arms up in am some</font>

254
00:12:31,190 --> 00:12:34,040
it's a risk

255
00:12:31,910 --> 00:12:39,170
<font color="#CCCCCC">so risk architecture so it's very</font>

256
00:12:34,040 --> 00:12:41,780
<font color="#CCCCCC">doubled</font><font color="#E5E5E5"> we can reduce this to this so</font>

257
00:12:39,170 --> 00:12:48,130
now for<font color="#CCCCCC"> reducer</font><font color="#E5E5E5"> it's a bit more simpler</font>

258
00:12:41,780 --> 00:12:48,130
to understand the code now another<font color="#E5E5E5"> one</font>

259
00:12:53,680 --> 00:12:59,239
for<font color="#CCCCCC"> example if you</font><font color="#E5E5E5"> reverse some</font><font color="#CCCCCC"> anthem</font>

260
00:12:57,020 --> 00:13:02,240
and you have this function<font color="#E5E5E5"> we can use</font>

261
00:12:59,240 --> 00:13:04,070
<font color="#CCCCCC">the same algorithm here</font><font color="#E5E5E5"> and if you try</font>

262
00:13:02,240 --> 00:13:05,600
first to get the intermediate

263
00:13:04,070 --> 00:13:09,440
<font color="#CCCCCC">presentation he gives this very</font>

264
00:13:05,600 --> 00:13:11,300
<font color="#E5E5E5">complicated code here and you can so use</font>

265
00:13:09,440 --> 00:13:16,520
those algorithm in order<font color="#E5E5E5"> to</font><font color="#CCCCCC"> redo</font><font color="#E5E5E5"> this</font>

266
00:13:11,300 --> 00:13:19,870
<font color="#E5E5E5">and this gives the final result here so</font>

267
00:13:16,520 --> 00:13:22,250
and for those who<font color="#E5E5E5"> are familiar with</font>

268
00:13:19,870 --> 00:13:25,340
reversing low-level<font color="#CCCCCC"> arm</font><font color="#E5E5E5"> you can see that</font>

269
00:13:22,250 --> 00:13:28,730
it's a simple function which<font color="#E5E5E5"> will try to</font>

270
00:13:25,340 --> 00:13:31,490
change<font color="#CCCCCC"> the direction part of the the</font>

271
00:13:28,730 --> 00:13:34,190
process of the CP<font color="#CCCCCC"> and it's a</font><font color="#E5E5E5"> bit more</font>

272
00:13:31,490 --> 00:13:39,550
<font color="#E5E5E5">simple to read this</font><font color="#CCCCCC"> than</font><font color="#E5E5E5"> the actual</font>

273
00:13:34,190 --> 00:13:39,550
native<font color="#E5E5E5"> code</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> okay</font>

274
00:13:40,240 --> 00:13:44,810
notice that this code is<font color="#CCCCCC"> not the</font>

275
00:13:44,120 --> 00:13:46,940
<font color="#CCCCCC">compilation</font>

276
00:13:44,810 --> 00:13:49,130
it's only a modification of the

277
00:13:46,940 --> 00:13:51,650
<font color="#E5E5E5">intermediate language and is</font><font color="#CCCCCC"> only get</font>

278
00:13:49,130 --> 00:13:54,020
back<font color="#E5E5E5"> enter a language but we will see</font>

279
00:13:51,650 --> 00:13:57,709
that<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> some tricky things</font><font color="#CCCCCC"> to and</font>

280
00:13:54,020 --> 00:13:59,780
generate back native<font color="#E5E5E5"> language we can</font><font color="#CCCCCC"> and</font>

281
00:13:57,710 --> 00:14:01,910
you can use this internal language<font color="#E5E5E5"> in</font>

282
00:13:59,780 --> 00:14:04,520
order<font color="#CCCCCC"> to do for example type propagation</font>

283
00:14:01,910 --> 00:14:09,829
value analysis or loop detection and so

284
00:14:04,520 --> 00:14:12,170
on for<font color="#CCCCCC"> example in the next</font><font color="#E5E5E5"> slide we</font><font color="#CCCCCC"> will</font>

285
00:14:09,830 --> 00:14:17,500
show how<font color="#CCCCCC"> we can</font><font color="#E5E5E5"> use this entire language</font>

286
00:14:12,170 --> 00:14:21,380
in order to<font color="#E5E5E5"> do cut the sophistication so</font>

287
00:14:17,500 --> 00:14:25,550
here we<font color="#E5E5E5"> will try to analyze the just</font><font color="#CCCCCC"> VM</font>

288
00:14:21,380 --> 00:14:28,250
machine before going<font color="#E5E5E5"> deeply in the</font>

289
00:14:25,550 --> 00:14:29,449
native assembly we will<font color="#E5E5E5"> show</font><font color="#CCCCCC"> you the</font>

290
00:14:28,250 --> 00:14:33,020
<font color="#E5E5E5">first</font><font color="#CCCCCC"> feature which is symbolic</font>

291
00:14:29,450 --> 00:14:36,110
<font color="#E5E5E5">execution we will use in the attack of</font>

292
00:14:33,020 --> 00:14:37,610
this game summary execution is<font color="#E5E5E5"> weak like</font>

293
00:14:36,110 --> 00:14:39,650
concrete execution as the difference is

294
00:14:37,610 --> 00:14:42,830
when<font color="#CCCCCC"> you are doing complete execution on</font>

295
00:14:39,650 --> 00:14:44,900
a CPU register can only<font color="#CCCCCC"> integers has</font>

296
00:14:42,830 --> 00:14:48,980
value<font color="#CCCCCC"> and memory a memory has only</font>

297
00:14:44,900 --> 00:14:52,939
registers integers and in summary

298
00:14:48,980 --> 00:14:55,370
execution of<font color="#E5E5E5"> register can have can</font><font color="#CCCCCC"> be</font>

299
00:14:52,940 --> 00:14:58,490
<font color="#CCCCCC">represent a number</font><font color="#E5E5E5"> or another variable</font>

300
00:14:55,370 --> 00:15:00,800
so if you have this native code<font color="#E5E5E5"> if you</font>

301
00:14:58,490 --> 00:15:02,570
try to do a assembly execution<font color="#E5E5E5"> here is</font>

302
00:15:00,800 --> 00:15:07,400
the result of the<font color="#E5E5E5"> first line you have</font>

303
00:15:02,570 --> 00:15:11,030
<font color="#CCCCCC">ecigs</font><font color="#E5E5E5"> which is</font><font color="#CCCCCC"> a result</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> it's only</font>

304
00:15:07,400 --> 00:15:13,550
<font color="#CCCCCC">this</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> 6 plus 4</font><font color="#E5E5E5"> if you</font><font color="#CCCCCC"> do the second</font>

305
00:15:11,030 --> 00:15:17,000
line<font color="#CCCCCC"> you have this week's eagle-eye</font>

306
00:15:13,550 --> 00:15:19,670
weeks<font color="#E5E5E5"> plus 1 and if you do the</font>

307
00:15:17,000 --> 00:15:22,370
comparison between<font color="#E5E5E5"> CL and one here is</font>

308
00:15:19,670 --> 00:15:24,740
the<font color="#CCCCCC"> flag that will</font><font color="#E5E5E5"> that are given by</font><font color="#CCCCCC"> the</font>

309
00:15:22,370 --> 00:15:27,050
summary execution<font color="#E5E5E5"> and you can see here</font>

310
00:15:24,740 --> 00:15:28,830
<font color="#E5E5E5">that the zero</font><font color="#CCCCCC"> flag</font><font color="#E5E5E5"> and depend only on</font>

311
00:15:27,050 --> 00:15:34,140
the<font color="#CCCCCC"> ecig value and</font>

312
00:15:28,830 --> 00:15:38,460
<font color="#E5E5E5">equation</font><font color="#CCCCCC"> no we have a</font><font color="#E5E5E5"> jump if zero and</font>

313
00:15:34,140 --> 00:15:41,130
here we have the<font color="#E5E5E5"> register</font><font color="#CCCCCC"> IRD</font><font color="#E5E5E5"> st and his</font>

314
00:15:38,460 --> 00:15:44,880
value is a new<font color="#E5E5E5"> expression which depends</font>

315
00:15:41,130 --> 00:15:48,500
only on<font color="#CCCCCC"> ethics and some integers</font><font color="#E5E5E5"> so we</font>

316
00:15:44,880 --> 00:15:51,439
<font color="#CCCCCC">symbolic execution</font><font color="#E5E5E5"> we get the fact</font><font color="#CCCCCC"> that</font>

317
00:15:48,500 --> 00:15:55,020
we have this<font color="#CCCCCC"> equation and we can</font><font color="#E5E5E5"> deduce</font>

318
00:15:51,440 --> 00:15:56,610
dependencies of the next<font color="#E5E5E5"> basic block but</font>

319
00:15:55,020 --> 00:15:59,910
we have a problem<font color="#E5E5E5"> here</font>

320
00:15:56,610 --> 00:16:01,830
<font color="#CCCCCC">incomplete description</font><font color="#E5E5E5"> obviously</font><font color="#CCCCCC"> is zero</font>

321
00:15:59,910 --> 00:16:03,870
flag will be<font color="#E5E5E5"> an integer and will be</font>

322
00:16:01,830 --> 00:16:06,360
resolved and here it's<font color="#E5E5E5"> not special</font><font color="#CCCCCC"> so we</font>

323
00:16:03,870 --> 00:16:10,560
cannot we don't know<font color="#E5E5E5"> we have to do if we</font>

324
00:16:06,360 --> 00:16:12,660
<font color="#E5E5E5">meet we if we will go in</font><font color="#CCCCCC"> be or</font><font color="#E5E5E5"> 10 so</font>

325
00:16:10,560 --> 00:16:15,060
here this is<font color="#E5E5E5"> a classic program in</font>

326
00:16:12,660 --> 00:16:21,000
summary execution and there are many

327
00:16:15,060 --> 00:16:22,949
solution known here and we will<font color="#E5E5E5"> only and</font>

328
00:16:21,000 --> 00:16:24,960
it's up to<font color="#CCCCCC"> you to choose</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> good</font>

329
00:16:22,950 --> 00:16:27,900
solution<font color="#CCCCCC"> for you</font><font color="#E5E5E5"> for your use case and</font>

330
00:16:24,960 --> 00:16:30,270
for<font color="#E5E5E5"> example you can do a state speed for</font>

331
00:16:27,900 --> 00:16:32,069
example<font color="#CCCCCC"> you can run on the left side of</font>

332
00:16:30,270 --> 00:16:36,270
the<font color="#E5E5E5"> branch and on on the right side of</font>

333
00:16:32,070 --> 00:16:41,130
the<font color="#E5E5E5"> branch and and so on we will show</font>

334
00:16:36,270 --> 00:16:42,750
<font color="#CCCCCC">you this</font><font color="#E5E5E5"> risk</font><font color="#CCCCCC"> Emmy in</font><font color="#E5E5E5"> next</font><font color="#CCCCCC"> slides there</font>

335
00:16:41,130 --> 00:16:44,700
is another problem<font color="#E5E5E5"> with memory accesses</font>

336
00:16:42,750 --> 00:16:48,060
for example when you try<font color="#E5E5E5"> to affect</font>

337
00:16:44,700 --> 00:16:50,910
memory<font color="#CCCCCC"> usage using symbolic</font><font color="#E5E5E5"> pointer</font><font color="#CCCCCC"> it's</font>

338
00:16:48,060 --> 00:16:55,290
a bit weird<font color="#E5E5E5"> so</font><font color="#CCCCCC"> India's with the program</font>

339
00:16:50,910 --> 00:16:58,319
is solved using dictionary with when you

340
00:16:55,290 --> 00:17:00,360
<font color="#E5E5E5">have a symbolic memory</font><font color="#CCCCCC"> base</font><font color="#E5E5E5"> like this we</font>

341
00:16:58,320 --> 00:17:04,380
will<font color="#CCCCCC"> spit this in the symmetric</font><font color="#E5E5E5"> part and</font>

342
00:17:00,360 --> 00:17:07,740
the<font color="#E5E5E5"> compiled pot and</font><font color="#CCCCCC"> in NASM only memory</font>

343
00:17:04,380 --> 00:17:12,510
based on<font color="#CCCCCC"> the same sampling</font><font color="#E5E5E5"> base our can</font>

344
00:17:07,740 --> 00:17:14,550
and can<font color="#CCCCCC"> interfere</font><font color="#E5E5E5"> together so this is</font><font color="#CCCCCC"> a</font>

345
00:17:12,510 --> 00:17:20,190
bit different<font color="#CCCCCC"> from the real world</font><font color="#E5E5E5"> but it</font>

346
00:17:14,550 --> 00:17:24,030
<font color="#CCCCCC">solves some some some problems</font><font color="#E5E5E5"> ok so</font>

347
00:17:20,190 --> 00:17:28,140
back to the<font color="#CCCCCC"> C&O in the in order to to</font>

348
00:17:24,030 --> 00:17:30,840
win some time<font color="#E5E5E5"> so</font><font color="#CCCCCC"> Otto does then</font><font color="#E5E5E5"> did</font><font color="#CCCCCC"> use</font>

349
00:17:28,140 --> 00:17:33,030
<font color="#CCCCCC">uses use the automation protection</font><font color="#E5E5E5"> in</font>

350
00:17:30,840 --> 00:17:34,949
fact for those<font color="#E5E5E5"> who doesn't know this</font>

351
00:17:33,030 --> 00:17:37,950
protection<font color="#CCCCCC"> when you are completing a</font>

352
00:17:34,950 --> 00:17:40,980
code in native language it's easy for

353
00:17:37,950 --> 00:17:43,630
resort to analyze<font color="#E5E5E5"> this language it goes</font>

354
00:17:40,980 --> 00:17:46,930
it's 86 language is a bit like is the

355
00:17:43,630 --> 00:17:50,350
mother tongue<font color="#CCCCCC"> so it's easy</font><font color="#E5E5E5"> and here</font><font color="#CCCCCC"> it's</font>

356
00:17:46,930 --> 00:17:53,410
a very<font color="#E5E5E5"> easy to compile the</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> to a new</font>

357
00:17:50,350 --> 00:17:58,449
CPU completely<font color="#E5E5E5"> operated for for this</font>

358
00:17:53,410 --> 00:18:00,580
occasion<font color="#E5E5E5"> and totally exists and and this</font>

359
00:17:58,450 --> 00:18:04,600
<font color="#E5E5E5">bytecode cannot be executed on directing</font>

360
00:18:00,580 --> 00:18:06,669
the city<font color="#E5E5E5"> so you have to embed an an</font>

361
00:18:04,600 --> 00:18:08,830
emulator<font color="#E5E5E5"> of this new CPU in your binary</font>

362
00:18:06,670 --> 00:18:11,440
<font color="#E5E5E5">and in fact when you run the malware it</font>

363
00:18:08,830 --> 00:18:19,270
<font color="#E5E5E5">run an emulator which</font><font color="#CCCCCC"> run on by code</font>

364
00:18:11,440 --> 00:18:21,310
which presents the original color so how

365
00:18:19,270 --> 00:18:23,920
do<font color="#E5E5E5"> we how do we attack this protection</font>

366
00:18:21,310 --> 00:18:29,260
<font color="#E5E5E5">the first one is to do manual reversion</font>

367
00:18:23,920 --> 00:18:31,300
<font color="#E5E5E5">the reversing so we had to find the</font>

368
00:18:29,260 --> 00:18:36,300
fetcher here and so we have to<font color="#E5E5E5"> find the</font>

369
00:18:31,300 --> 00:18:38,230
<font color="#CCCCCC">mnemonic one</font><font color="#E5E5E5"> and to see how the the VM</font>

370
00:18:36,300 --> 00:18:41,200
<font color="#E5E5E5">its root 2 and so on</font>

371
00:18:38,230 --> 00:18:42,670
I want<font color="#CCCCCC"> to have this you can use</font>

372
00:18:41,200 --> 00:18:47,200
<font color="#CCCCCC">somebody's equation to have</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Rho</font>

373
00:18:42,670 --> 00:18:49,570
expression of the mnemonic<font color="#CCCCCC"> so</font><font color="#E5E5E5"> using this</font>

374
00:18:47,200 --> 00:18:51,010
result<font color="#E5E5E5"> you can infer what is the VM so</font>

375
00:18:49,570 --> 00:18:55,300
to you where<font color="#E5E5E5"> are</font><font color="#CCCCCC"> the register</font><font color="#E5E5E5"> where's</font>

376
00:18:51,010 --> 00:18:57,879
the van program<font color="#CCCCCC"> punto and so on and</font><font color="#E5E5E5"> all</font>

377
00:18:55,300 --> 00:19:01,480
<font color="#E5E5E5">you</font><font color="#CCCCCC"> have done that</font><font color="#E5E5E5"> you can use no miasma</font>

378
00:18:57,880 --> 00:19:05,500
to automate the recovery of the rest of

379
00:19:01,480 --> 00:19:07,390
<font color="#E5E5E5">mnemonics so for example if you have the</font>

380
00:19:05,500 --> 00:19:10,600
first<font color="#E5E5E5"> emulation of</font><font color="#CCCCCC"> the first mnemonic</font><font color="#E5E5E5"> we</font>

381
00:19:07,390 --> 00:19:13,060
have this and<font color="#CCCCCC"> you have read as the</font>

382
00:19:10,600 --> 00:19:15,909
memory at<font color="#E5E5E5"> easy</font><font color="#CCCCCC"> 6 is a</font><font color="#E5E5E5"> good memory</font>

383
00:19:13,060 --> 00:19:18,879
program to enter and you have the<font color="#E5E5E5"> first</font>

384
00:19:15,910 --> 00:19:22,930
<font color="#CCCCCC">visual</font><font color="#E5E5E5"> here of the execution of the</font>

385
00:19:18,880 --> 00:19:24,820
first mnemonic<font color="#E5E5E5"> you can see that here</font>

386
00:19:22,930 --> 00:19:27,070
when you have this equation<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font>

387
00:19:24,820 --> 00:19:29,139
<font color="#E5E5E5">reduce this as a program</font><font color="#CCCCCC"> koonta the</font>

388
00:19:27,070 --> 00:19:31,480
other machine promoter<font color="#E5E5E5"> so this one</font><font color="#CCCCCC"> it</font>

389
00:19:29,140 --> 00:19:34,150
<font color="#CCCCCC">words</font><font color="#E5E5E5"> to the original memory program</font>

390
00:19:31,480 --> 00:19:38,730
this machine<font color="#E5E5E5"> prompt on top is 1 so this</font>

391
00:19:34,150 --> 00:19:41,770
can<font color="#CCCCCC"> be</font><font color="#E5E5E5"> reduced has this</font><font color="#CCCCCC"> equation so</font>

392
00:19:38,730 --> 00:19:44,350
<font color="#E5E5E5">answer the question can</font><font color="#CCCCCC"> be reduced as</font>

393
00:19:41,770 --> 00:19:47,110
this one is the<font color="#E5E5E5"> better machine</font><font color="#CCCCCC"> program</font>

394
00:19:44,350 --> 00:19:50,040
<font color="#CCCCCC">Kunta</font><font color="#E5E5E5"> so you can rewrite it like this so</font>

395
00:19:47,110 --> 00:19:53,889
we will<font color="#E5E5E5"> write those reduction rules and</font>

396
00:19:50,040 --> 00:19:55,240
in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> azzam owns and after this we will</font>

397
00:19:53,890 --> 00:19:57,190
try<font color="#CCCCCC"> to</font>

398
00:19:55,240 --> 00:19:59,350
<font color="#E5E5E5">Emma stimulates the rest of the nominees</font>

399
00:19:57,190 --> 00:20:02,500
and<font color="#CCCCCC"> we will apply</font><font color="#E5E5E5"> this reduction and</font>

400
00:19:59,350 --> 00:20:05,019
<font color="#CCCCCC">Yasim</font><font color="#E5E5E5"> will give automatically this kind</font>

401
00:20:02,500 --> 00:20:07,799
of<font color="#E5E5E5"> a question so it will vacuum the</font>

402
00:20:05,019 --> 00:20:11,669
original code of the of the mnemonic<font color="#E5E5E5"> for</font>

403
00:20:07,799 --> 00:20:15,970
<font color="#CCCCCC">example if you have such a question</font><font color="#E5E5E5"> here</font>

404
00:20:11,669 --> 00:20:18,880
you have such<font color="#CCCCCC"> tree and the reduction we</font>

405
00:20:15,970 --> 00:20:20,610
<font color="#CCCCCC">lose this here other</font><font color="#E5E5E5"> elections</font><font color="#CCCCCC"> so this</font>

406
00:20:18,880 --> 00:20:24,279
is<font color="#E5E5E5"> obviously the relations</font><font color="#CCCCCC"> that I</font>

407
00:20:20,610 --> 00:20:28,120
explained earlier you have a seat which

408
00:20:24,279 --> 00:20:30,669
<font color="#CCCCCC">is reduced as VM sweet this this memory</font>

409
00:20:28,120 --> 00:20:33,399
the first<font color="#E5E5E5"> plant gives the</font><font color="#CCCCCC"> NPC this one</font>

410
00:20:30,669 --> 00:20:37,090
gives a register<font color="#CCCCCC"> and we don't know which</font>

411
00:20:33,399 --> 00:20:40,989
is it<font color="#E5E5E5"> for</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> we reduced</font><font color="#CCCCCC"> a for example</font>

412
00:20:37,090 --> 00:20:43,059
as an tiger and the<font color="#E5E5E5"> look up at PC</font><font color="#CCCCCC"> please</font>

413
00:20:40,990 --> 00:20:46,539
<font color="#E5E5E5">an integral will give an Integra because</font>

414
00:20:43,059 --> 00:20:49,240
obviously it's a<font color="#E5E5E5"> immediate value of an</font>

415
00:20:46,539 --> 00:20:51,250
<font color="#E5E5E5">opcode and</font><font color="#CCCCCC"> you have if you</font><font color="#E5E5E5"> have an</font>

416
00:20:49,240 --> 00:20:54,100
operation<font color="#E5E5E5"> between</font><font color="#CCCCCC"> two integers</font><font color="#E5E5E5"> obviously</font>

417
00:20:51,250 --> 00:20:57,940
it<font color="#E5E5E5"> will give an integral so to this</font><font color="#CCCCCC"> for</font>

418
00:20:54,100 --> 00:21:00,070
<font color="#E5E5E5">this we have first this history</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> will</font>

419
00:20:57,940 --> 00:21:01,090
apply the reduction so the first one is

420
00:21:00,070 --> 00:21:05,070
<font color="#E5E5E5">to replace ecigs</font>

421
00:21:01,090 --> 00:21:07,840
by the<font color="#CCCCCC"> vm pc streets here so we have</font>

422
00:21:05,070 --> 00:21:11,500
here all the<font color="#CCCCCC"> integrals</font><font color="#E5E5E5"> we will be</font>

423
00:21:07,840 --> 00:21:13,178
reduced to in here<font color="#E5E5E5"> so now we have a new</font>

424
00:21:11,500 --> 00:21:15,879
structure which is known which has a

425
00:21:13,179 --> 00:21:19,389
reaction<font color="#CCCCCC"> rules and this wind</font><font color="#E5E5E5"> this one</font>

426
00:21:15,879 --> 00:21:22,480
will give back<font color="#E5E5E5"> rag it's this one you</font>

427
00:21:19,389 --> 00:21:25,719
will give back<font color="#CCCCCC"> MPC here and so we have</font>

428
00:21:22,480 --> 00:21:28,509
<font color="#CCCCCC">VC plus</font><font color="#E5E5E5"> int and the</font><font color="#CCCCCC"> atomic memory</font><font color="#E5E5E5"> so</font>

429
00:21:25,720 --> 00:21:30,009
it's obviously an<font color="#CCCCCC"> integral and here we</font>

430
00:21:28,509 --> 00:21:32,710
have<font color="#CCCCCC"> Antigua x1 take off so it leaves</font>

431
00:21:30,009 --> 00:21:34,539
and<font color="#CCCCCC"> tiger</font><font color="#E5E5E5"> and we have we</font><font color="#CCCCCC"> stopped</font><font color="#E5E5E5"> here</font>

432
00:21:32,710 --> 00:21:38,049
because<font color="#E5E5E5"> we doesn't we</font><font color="#CCCCCC"> don't have anymore</font>

433
00:21:34,539 --> 00:21:39,970
<font color="#E5E5E5">any reduction remaining so at the end of</font>

434
00:21:38,049 --> 00:21:41,799
the<font color="#CCCCCC"> operation we know that the</font><font color="#E5E5E5"> the</font>

435
00:21:39,970 --> 00:21:46,059
mnemonic is only an addition<font color="#CCCCCC"> between a</font>

436
00:21:41,799 --> 00:21:47,470
register and<font color="#E5E5E5"> an integer and here is a</font>

437
00:21:46,059 --> 00:21:51,009
result on some mnemonic of the veto

438
00:21:47,470 --> 00:21:55,389
machine so here we have the result which

439
00:21:51,009 --> 00:21:57,580
is a XOR between memory<font color="#CCCCCC"> ported</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> the</font>

440
00:21:55,389 --> 00:21:59,229
<font color="#E5E5E5">register and an integral</font><font color="#CCCCCC"> and we have a</font>

441
00:21:57,580 --> 00:22:01,899
the same<font color="#E5E5E5"> M&E it was a very semi</font><font color="#CCCCCC"> monique</font>

442
00:21:59,230 --> 00:22:05,460
<font color="#E5E5E5">except the the memory size as change</font>

443
00:22:01,899 --> 00:22:05,459
so here is obvious to see this

444
00:22:10,500 --> 00:22:18,130
yeah<font color="#E5E5E5"> and now the interesting</font><font color="#CCCCCC"> thing is</font>

445
00:22:14,200 --> 00:22:21,160
<font color="#CCCCCC">that we can disassemble the</font><font color="#E5E5E5"> bytecode</font><font color="#CCCCCC"> and</font>

446
00:22:18,130 --> 00:22:23,890
re-inject<font color="#CCCCCC"> the generic equation and s</font>

447
00:22:21,160 --> 00:22:27,010
<font color="#CCCCCC">transient design</font><font color="#E5E5E5"> then using the</font><font color="#CCCCCC"> Zener TV</font>

448
00:22:23,890 --> 00:22:32,710
code so we can<font color="#E5E5E5"> get back the intermediate</font>

449
00:22:27,010 --> 00:22:37,120
position of the<font color="#E5E5E5"> the them back on so</font><font color="#CCCCCC"> when</font>

450
00:22:32,710 --> 00:22:42,100
we do some of<font color="#CCCCCC"> this</font><font color="#E5E5E5"> we will recover we do</font>

451
00:22:37,120 --> 00:22:44,469
a demo<font color="#CCCCCC"> of</font><font color="#E5E5E5"> C of this so here we rewrite</font>

452
00:22:42,100 --> 00:22:46,840
only the fetcher of the Vienna we

453
00:22:44,470 --> 00:22:50,230
emulate also mnemonics<font color="#E5E5E5"> and we integrate</font>

454
00:22:46,840 --> 00:22:54,510
some<font color="#CCCCCC"> unix</font><font color="#E5E5E5"> reject it in the in the memory</font>

455
00:22:50,230 --> 00:22:57,520
<font color="#CCCCCC">bytecode and here is the result</font><font color="#E5E5E5"> we have</font>

456
00:22:54,510 --> 00:23:00,550
the animated language<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the world</font>

457
00:22:57,520 --> 00:23:04,270
function which was emulated in the<font color="#CCCCCC"> CM</font>

458
00:23:00,550 --> 00:23:07,240
and you<font color="#CCCCCC"> can see first that</font><font color="#E5E5E5"> it's a bit</font>

459
00:23:04,270 --> 00:23:08,560
complicated because<font color="#E5E5E5"> as you can see for</font>

460
00:23:07,240 --> 00:23:10,600
<font color="#E5E5E5">example we have a register which</font><font color="#CCCCCC"> is the</font>

461
00:23:08,560 --> 00:23:12,820
constant<font color="#CCCCCC"> here</font><font color="#E5E5E5"> and we have the constant</font>

462
00:23:10,600 --> 00:23:14,919
which is added with another constant so

463
00:23:12,820 --> 00:23:17,409
obviously we can<font color="#E5E5E5"> merge them in order to</font>

464
00:23:14,920 --> 00:23:19,840
<font color="#CCCCCC">generate the constants</font><font color="#E5E5E5"> it will mean me</font>

465
00:23:17,410 --> 00:23:22,090
something here<font color="#E5E5E5"> you can see that we</font><font color="#CCCCCC"> can</font>

466
00:23:19,840 --> 00:23:24,159
use<font color="#E5E5E5"> the</font><font color="#CCCCCC"> previous algorithm</font><font color="#E5E5E5"> with SSI</font>

467
00:23:22,090 --> 00:23:27,520
<font color="#E5E5E5">propagation and so on and if</font><font color="#CCCCCC"> we did this</font>

468
00:23:24,160 --> 00:23:32,230
we have the we obtain the<font color="#CCCCCC"> next</font><font color="#E5E5E5"> result</font>

469
00:23:27,520 --> 00:23:35,950
<font color="#E5E5E5">and here we have the</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> original code</font>

470
00:23:32,230 --> 00:23:39,790
of the disaster without of his

471
00:23:35,950 --> 00:23:41,830
obfuscation and<font color="#E5E5E5"> but it's in animated</font>

472
00:23:39,790 --> 00:23:44,680
language<font color="#E5E5E5"> so it's a bit way</font><font color="#CCCCCC"> out we are to</font>

473
00:23:41,830 --> 00:23:46,030
to understand but<font color="#E5E5E5"> in</font><font color="#CCCCCC"> NASM we have a</font><font color="#E5E5E5"> pass</font>

474
00:23:44,680 --> 00:23:48,010
which can take the n-terminal language

475
00:23:46,030 --> 00:23:51,730
and translate it into<font color="#E5E5E5"> a Librium language</font>

476
00:23:48,010 --> 00:23:54,220
and so we can obtain<font color="#CCCCCC"> this</font><font color="#E5E5E5"> and the best</font>

477
00:23:51,730 --> 00:23:56,230
part is that<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> use this LLVM</font>

478
00:23:54,220 --> 00:23:59,530
language in order to compile it to

479
00:23:56,230 --> 00:24:05,110
native x86 language<font color="#E5E5E5"> and so we can obtain</font>

480
00:23:59,530 --> 00:24:07,660
this and we can<font color="#E5E5E5"> obtain a binary we can</font>

481
00:24:05,110 --> 00:24:11,530
inject<font color="#CCCCCC"> in the original binary of the</font>

482
00:24:07,660 --> 00:24:17,170
stem<font color="#E5E5E5"> and when we we run it we</font><font color="#CCCCCC"> can have</font>

483
00:24:11,530 --> 00:24:21,270
we recover the original<font color="#CCCCCC"> covenant common</font>

484
00:24:17,170 --> 00:24:24,120
<font color="#CCCCCC">controller you are so all this work</font>

485
00:24:21,270 --> 00:24:28,460
is correct because the code has been

486
00:24:24,120 --> 00:24:28,459
compiled and executed<font color="#E5E5E5"> unreal unreal code</font>

487
00:24:28,670 --> 00:24:33,810
<font color="#E5E5E5">the interesting thing is</font><font color="#CCCCCC"> that no our</font>

488
00:24:31,080 --> 00:24:35,990
does the version is very very very

489
00:24:33,810 --> 00:24:39,090
quicker than the original one<font color="#E5E5E5"> because</font>

490
00:24:35,990 --> 00:24:40,590
everything<font color="#E5E5E5"> on the VM as disappear and it</font>

491
00:24:39,090 --> 00:24:47,280
has been<font color="#E5E5E5"> translated into a native</font>

492
00:24:40,590 --> 00:24:52,379
<font color="#CCCCCC">language okay</font><font color="#E5E5E5"> another interesting part</font>

493
00:24:47,280 --> 00:24:54,960
in<font color="#CCCCCC"> Yasim</font><font color="#E5E5E5"> is to analyze malware</font><font color="#CCCCCC"> for</font>

494
00:24:52,380 --> 00:24:56,670
example in a question<font color="#E5E5E5"> group you have</font><font color="#CCCCCC"> a</font>

495
00:24:54,960 --> 00:24:59,970
<font color="#CCCCCC">naturist</font><font color="#E5E5E5"> in step the battery itself is</font>

496
00:24:56,670 --> 00:25:02,550
not<font color="#CCCCCC"> cyclone</font><font color="#E5E5E5"> but every string used the</font>

497
00:24:59,970 --> 00:25:05,250
inventory<font color="#CCCCCC"> in cycle and each time the</font>

498
00:25:02,550 --> 00:25:07,470
<font color="#CCCCCC">winery wants to use a string</font><font color="#E5E5E5"> it has to</font>

499
00:25:05,250 --> 00:25:11,190
<font color="#E5E5E5">this</font><font color="#CCCCCC"> fr it's in memory</font><font color="#E5E5E5"> use it and to</font>

500
00:25:07,470 --> 00:25:12,810
wipe it after after<font color="#CCCCCC"> this</font><font color="#E5E5E5"> so forward as</font>

501
00:25:11,190 --> 00:25:15,330
you are if you<font color="#E5E5E5"> want to do a static</font>

502
00:25:12,810 --> 00:25:17,730
<font color="#E5E5E5">analyzer in order to recover the strings</font>

503
00:25:15,330 --> 00:25:20,730
<font color="#E5E5E5">you</font><font color="#CCCCCC"> have to manually</font><font color="#E5E5E5"> take the function</font>

504
00:25:17,730 --> 00:25:22,860
<font color="#E5E5E5">take the progress and take the back the</font>

505
00:25:20,730 --> 00:25:24,750
the<font color="#E5E5E5"> pointer to the site for swing is the</font>

506
00:25:22,860 --> 00:25:26,699
<font color="#CCCCCC">length of such a swing and to do some</font>

507
00:25:24,750 --> 00:25:28,740
<font color="#CCCCCC">stuff</font><font color="#E5E5E5"> after one and</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> will show</font><font color="#CCCCCC"> you how</font>

508
00:25:26,700 --> 00:25:30,330
to<font color="#E5E5E5"> do this automatically so we will</font><font color="#CCCCCC"> use</font>

509
00:25:28,740 --> 00:25:32,640
<font color="#E5E5E5">an algo in which is called the</font><font color="#CCCCCC"> depends</font>

510
00:25:30,330 --> 00:25:35,280
you<font color="#E5E5E5"> up I won't explain here because it's</font>

511
00:25:32,640 --> 00:25:38,070
a bit long<font color="#E5E5E5"> it's a bit</font><font color="#CCCCCC"> between so</font><font color="#E5E5E5"> use</font>

512
00:25:35,280 --> 00:25:42,000
<font color="#E5E5E5">death chain and person sees chain which</font>

513
00:25:38,070 --> 00:25:44,220
can explode in with<font color="#E5E5E5"> a big loop and in</font>

514
00:25:42,000 --> 00:25:47,640
this case our<font color="#CCCCCC"> Halloween our algorithm is</font>

515
00:25:44,220 --> 00:25:50,730
<font color="#E5E5E5">a is</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> if you want some details</font><font color="#CCCCCC"> you</font>

516
00:25:47,640 --> 00:25:53,730
can see<font color="#CCCCCC"> a slides here so the demo</font>

517
00:25:50,730 --> 00:25:55,410
session is is we have<font color="#CCCCCC"> imagine we have</font>

518
00:25:53,730 --> 00:25:58,470
the a person<font color="#CCCCCC"> group binary we have</font><font color="#E5E5E5"> a</font>

519
00:25:55,410 --> 00:26:02,190
<font color="#CCCCCC">recovered the</font><font color="#E5E5E5"> deciphering a</font><font color="#CCCCCC"> swinging a</font>

520
00:25:58,470 --> 00:26:11,180
function and so we will show you a usage

521
00:26:02,190 --> 00:26:11,180
of<font color="#E5E5E5"> the function and if it is 64 it's</font>

522
00:26:12,440 --> 00:26:20,010
okay so here the<font color="#E5E5E5"> register</font><font color="#CCCCCC"> write is used</font>

523
00:26:18,180 --> 00:26:23,000
to store the length of the ciphered

524
00:26:20,010 --> 00:26:24,960
function as<font color="#E5E5E5"> a</font><font color="#CCCCCC"> success</font><font color="#E5E5E5"> thing and it it</font>

525
00:26:23,000 --> 00:26:26,730
stores the pointer<font color="#CCCCCC"> of the sizeof</font>

526
00:26:24,960 --> 00:26:29,130
function<font color="#E5E5E5"> when you reverse this it's</font>

527
00:26:26,730 --> 00:26:32,610
<font color="#E5E5E5">obviously that</font><font color="#CCCCCC"> Alex is the</font><font color="#E5E5E5"> pointer is</font>

528
00:26:29,130 --> 00:26:36,270
here and the length but

529
00:26:32,610 --> 00:26:40,919
is a bit other too tricky to<font color="#E5E5E5"> recover</font>

530
00:26:36,270 --> 00:26:44,250
<font color="#E5E5E5">here the</font><font color="#CCCCCC"> eight depends on 12 and 23 and</font>

531
00:26:40,920 --> 00:26:48,150
if you click<font color="#CCCCCC"> here you can</font><font color="#E5E5E5"> see that</font><font color="#CCCCCC"> all</font>

532
00:26:44,250 --> 00:26:50,370
12 is<font color="#E5E5E5"> in</font><font color="#CCCCCC"> saliste here with</font><font color="#E5E5E5"> FF so what we</font>

533
00:26:48,150 --> 00:26:52,410
are<font color="#E5E5E5"> doing with on either the following</font>

534
00:26:50,370 --> 00:26:54,899
the Euro step and so on<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be done with</font>

535
00:26:52,410 --> 00:26:58,710
<font color="#CCCCCC">the dependency graph so here we run the</font>

536
00:26:54,900 --> 00:27:02,059
<font color="#CCCCCC">plug-in in in in</font><font color="#E5E5E5"> HIDA we say on the call</font>

537
00:26:58,710 --> 00:27:04,919
<font color="#E5E5E5">we want to backtrack</font><font color="#CCCCCC"> for example</font><font color="#E5E5E5"> r8 and</font>

538
00:27:02,059 --> 00:27:09,000
<font color="#CCCCCC">minas will give you automatically the</font>

539
00:27:04,919 --> 00:27:12,630
lines which contains the<font color="#E5E5E5"> instructions</font>

540
00:27:09,000 --> 00:27:15,929
that<font color="#E5E5E5"> will give the</font><font color="#CCCCCC"> result in r8</font><font color="#E5E5E5"> so we</font>

541
00:27:12,630 --> 00:27:18,179
will and has we have<font color="#CCCCCC"> as well as symbolic</font>

542
00:27:15,929 --> 00:27:20,010
execution engine we<font color="#E5E5E5"> can do this on the</font>

543
00:27:18,179 --> 00:27:21,929
on this<font color="#E5E5E5"> intrusion and here musn't say</font>

544
00:27:20,010 --> 00:27:24,780
<font color="#E5E5E5">that the value is only and there is one</font>

545
00:27:21,929 --> 00:27:28,740
value<font color="#E5E5E5"> and one possibility which gives a</font>

546
00:27:24,780 --> 00:27:31,350
<font color="#E5E5E5">ID equals to 22</font><font color="#CCCCCC"> and if we are for</font>

547
00:27:28,740 --> 00:27:35,070
<font color="#CCCCCC">example is an else</font><font color="#E5E5E5"> it will track in in</font>

548
00:27:31,350 --> 00:27:37,678
both punches excellent so now we have

549
00:27:35,070 --> 00:27:39,689
that we<font color="#CCCCCC"> can automate to recover for</font><font color="#E5E5E5"> each</font>

550
00:27:37,679 --> 00:27:43,520
prospect<font color="#E5E5E5"> or some other function also</font>

551
00:27:39,690 --> 00:27:46,230
arguments<font color="#E5E5E5"> and after this we will try</font><font color="#CCCCCC"> to</font>

552
00:27:43,520 --> 00:27:47,700
do the result is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we have all the</font>

553
00:27:46,230 --> 00:27:50,130
values<font color="#E5E5E5"> of those arguments</font>

554
00:27:47,700 --> 00:27:52,620
so when testing since<font color="#CCCCCC"> know is that we</font>

555
00:27:50,130 --> 00:27:55,890
will use emulation<font color="#E5E5E5"> mode engine of Mia's</font>

556
00:27:52,620 --> 00:27:59,250
<font color="#E5E5E5">in order to emulate</font><font color="#CCCCCC"> a zoom</font><font color="#E5E5E5"> deciphering</font>

557
00:27:55,890 --> 00:28:01,470
function and to get back the result<font color="#E5E5E5"> so</font>

558
00:27:59,250 --> 00:28:05,130
to do<font color="#E5E5E5"> this here is a simple example in</font>

559
00:28:01,470 --> 00:28:07,799
order<font color="#E5E5E5"> to emulate</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> function so we had a</font>

560
00:28:05,130 --> 00:28:10,559
memory page here with the<font color="#CCCCCC"> bytecode with</font>

561
00:28:07,799 --> 00:28:13,770
native<font color="#CCCCCC"> code and we introduced the stack</font>

562
00:28:10,559 --> 00:28:15,470
and<font color="#E5E5E5"> we run the code and for</font><font color="#CCCCCC"> a special</font>

563
00:28:13,770 --> 00:28:17,250
example here<font color="#E5E5E5"> we will do this but</font>

564
00:28:15,470 --> 00:28:20,010
additionally we<font color="#E5E5E5"> will initially the</font>

565
00:28:17,250 --> 00:28:21,720
register<font color="#E5E5E5"> using</font><font color="#CCCCCC"> the recovered argument</font>

566
00:28:20,010 --> 00:28:27,540
<font color="#E5E5E5">and the length of</font><font color="#CCCCCC"> the swing</font><font color="#E5E5E5"> and the</font>

567
00:28:21,720 --> 00:28:30,210
pointer and<font color="#E5E5E5"> when we do this we we and</font>

568
00:28:27,540 --> 00:28:34,168
<font color="#E5E5E5">after we will get the memory back to me</font>

569
00:28:30,210 --> 00:28:36,890
<font color="#CCCCCC">Azzam and we would women</font><font color="#E5E5E5"> do this we have</font>

570
00:28:34,169 --> 00:28:36,890
the<font color="#E5E5E5"> following result</font>

571
00:28:44,100 --> 00:28:50,260
here<font color="#CCCCCC"> Kamiya isn't running as the</font><font color="#E5E5E5"> script</font>

572
00:28:46,990 --> 00:28:51,789
<font color="#E5E5E5">on the on the wall</font><font color="#CCCCCC"> bed and here you</font><font color="#E5E5E5"> can</font>

573
00:28:50,260 --> 00:28:53,650
see that you<font color="#E5E5E5"> have the detection of the</font>

574
00:28:51,789 --> 00:28:56,789
<font color="#E5E5E5">arguments the recovery and</font><font color="#CCCCCC"> the emulation</font>

575
00:28:53,650 --> 00:28:59,740
<font color="#E5E5E5">and for every swing you have the output</font>

576
00:28:56,789 --> 00:29:02,408
<font color="#CCCCCC">deciphered string and moreover</font><font color="#E5E5E5"> the sweep</font>

577
00:28:59,740 --> 00:29:04,630
will get back the<font color="#E5E5E5"> residue either and if</font>

578
00:29:02,409 --> 00:29:08,669
you go back to either<font color="#E5E5E5"> if you look at</font>

579
00:29:04,630 --> 00:29:11,799
each reference of the<font color="#CCCCCC"> decree function</font>

580
00:29:08,669 --> 00:29:14,049
you have<font color="#E5E5E5"> maybe it's a bit too little but</font>

581
00:29:11,799 --> 00:29:17,620
you have all the<font color="#CCCCCC"> residual so for each</font>

582
00:29:14,049 --> 00:29:24,429
for each call so here we use in this

583
00:29:17,620 --> 00:29:26,799
ring that's all for the automated

584
00:29:24,429 --> 00:29:30,580
<font color="#E5E5E5">language and and he was</font><font color="#CCCCCC"> Camino on the</font>

585
00:29:26,799 --> 00:29:35,049
<font color="#E5E5E5">emulation pot okay so I'm regarding the</font>

586
00:29:30,580 --> 00:29:37,949
equation group<font color="#E5E5E5"> yells you also have some</font>

587
00:29:35,049 --> 00:29:41,100
cryptography inside and the idea is to

588
00:29:37,950 --> 00:29:43,870
reverse the code on just one<font color="#CCCCCC"> dll</font>

589
00:29:41,100 --> 00:29:46,990
discovered<font color="#E5E5E5"> attractive to graphene and</font>

590
00:29:43,870 --> 00:29:49,989
then try<font color="#E5E5E5"> to identify</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> crypto in all</font>

591
00:29:46,990 --> 00:29:53,940
the<font color="#CCCCCC"> dll including on different active</font>

592
00:29:49,990 --> 00:29:57,370
architectures so how do we<font color="#E5E5E5"> do that sorry</font>

593
00:29:53,940 --> 00:29:59,320
already a state-of-the-art source

594
00:29:57,370 --> 00:30:02,620
<font color="#CCCCCC">offering samples are static approaches</font>

595
00:29:59,320 --> 00:30:04,750
like left<font color="#E5E5E5"> in either but we'll use</font><font color="#CCCCCC"> a</font>

596
00:30:02,620 --> 00:30:07,149
dynamic<font color="#E5E5E5"> one</font><font color="#CCCCCC"> why</font><font color="#E5E5E5"> you will use</font><font color="#CCCCCC"> that</font>

597
00:30:04,750 --> 00:30:10,270
because<font color="#E5E5E5"> for instance</font><font color="#CCCCCC"> air is</font><font color="#E5E5E5"> a mem copy</font>

598
00:30:07,150 --> 00:30:13,240
<font color="#E5E5E5">which is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> naive implementation it's</font>

599
00:30:10,270 --> 00:30:15,370
quite easy<font color="#CCCCCC"> to recognize it</font><font color="#E5E5E5"> but you can</font>

600
00:30:13,240 --> 00:30:17,650
have the same mem copy but obfuscated

601
00:30:15,370 --> 00:30:21,189
for instance if it has<font color="#E5E5E5"> been written by</font><font color="#CCCCCC"> a</font>

602
00:30:17,650 --> 00:30:24,100
inter<font color="#CCCCCC"> by an</font><font color="#E5E5E5"> intern or you can have</font><font color="#CCCCCC"> a</font>

603
00:30:21,190 --> 00:30:26,919
<font color="#CCCCCC">Victory's vectorized version with a sse</font>

604
00:30:24,100 --> 00:30:29,289
extra<font color="#E5E5E5"> so what we will do is actually</font>

605
00:30:26,919 --> 00:30:32,830
consider the function as a black box we

606
00:30:29,289 --> 00:30:34,960
will choose<font color="#E5E5E5"> the input</font><font color="#CCCCCC"> that's to say the</font>

607
00:30:32,830 --> 00:30:37,360
arguments and the initial<font color="#E5E5E5"> state</font><font color="#CCCCCC"> of the</font>

608
00:30:34,960 --> 00:30:40,570
memory run the<font color="#CCCCCC"> function in a minimalist</font>

609
00:30:37,360 --> 00:30:44,229
<font color="#E5E5E5">environment</font><font color="#CCCCCC"> let's adjust the stack just</font>

610
00:30:40,570 --> 00:30:48,309
<font color="#E5E5E5">to stack and and binary mapped and we</font>

611
00:30:44,230 --> 00:30:52,149
will if it reach the<font color="#CCCCCC"> end</font><font color="#E5E5E5"> I will</font><font color="#CCCCCC"> will</font>

612
00:30:48,309 --> 00:30:54,460
check the output the output value and

613
00:30:52,149 --> 00:30:57,580
the output<font color="#E5E5E5"> memory</font><font color="#CCCCCC"> in final memory</font>

614
00:30:54,460 --> 00:30:59,889
if it's much our<font color="#E5E5E5"> expected one you can</font>

615
00:30:57,580 --> 00:31:01,449
say<font color="#CCCCCC"> okay it's</font><font color="#E5E5E5"> it's maybe the function</font>

616
00:30:59,889 --> 00:31:04,059
that we are<font color="#E5E5E5"> considering so for instance</font>

617
00:31:01,450 --> 00:31:06,490
if you<font color="#CCCCCC"> just if I have a black box I</font>

618
00:31:04,059 --> 00:31:08,860
refer to<font color="#E5E5E5"> you to use the signature for</font>

619
00:31:06,490 --> 00:31:11,499
<font color="#CCCCCC">multiplication</font><font color="#E5E5E5"> we have</font><font color="#CCCCCC"> a five by ten I</font>

620
00:31:08,860 --> 00:31:13,209
<font color="#CCCCCC">run it it crash so obviously is not</font><font color="#E5E5E5"> an</font>

621
00:31:11,499 --> 00:31:17,289
<font color="#E5E5E5">interpretation then I try to use</font>

622
00:31:13,210 --> 00:31:18,820
<font color="#CCCCCC">esterline with the yellow strings as</font>

623
00:31:17,289 --> 00:31:21,580
originally in memory

624
00:31:18,820 --> 00:31:24,428
<font color="#CCCCCC">it runs students but</font><font color="#E5E5E5"> written</font><font color="#CCCCCC"> zero so</font>

625
00:31:21,580 --> 00:31:26,649
it's not a<font color="#CCCCCC"> Shannon and and then I try</font>

626
00:31:24,429 --> 00:31:29,230
eight well with<font color="#CCCCCC"> a one two three</font><font color="#E5E5E5"> four as</font>

627
00:31:26,649 --> 00:31:31,149
a string in input which went<font color="#E5E5E5"> to the N it</font>

628
00:31:29,230 --> 00:31:33,369
returns one two three four<font color="#CCCCCC"> other longer</font>

629
00:31:31,149 --> 00:31:35,559
<font color="#E5E5E5">so I can say ok it</font><font color="#CCCCCC"> sees the expected</font>

630
00:31:33,369 --> 00:31:38,860
output for height well signature so it

631
00:31:35,559 --> 00:31:40,720
may be a twerk<font color="#CCCCCC"> so regarding</font><font color="#E5E5E5"> the</font>

632
00:31:38,860 --> 00:31:42,908
implementation we have<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> resilient</font>

633
00:31:40,720 --> 00:31:45,490
<font color="#CCCCCC">to</font><font color="#E5E5E5"> crashes because you can seg fault</font><font color="#CCCCCC"> of</font>

634
00:31:42,909 --> 00:31:49,269
course<font color="#E5E5E5"> if the function expect</font><font color="#CCCCCC"> pointer</font>

635
00:31:45,490 --> 00:31:51,759
and you give in five it will crash so<font color="#E5E5E5"> as</font>

636
00:31:49,269 --> 00:31:54,549
we are using the emulation in myosin

637
00:31:51,759 --> 00:31:57,340
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> in lated so there is no will crush</font>

638
00:31:54,549 --> 00:32:01,110
the infinitely<font color="#CCCCCC"> if you need to have</font><font color="#E5E5E5"> Herzl</font>

639
00:31:57,340 --> 00:32:04,480
to be taking<font color="#E5E5E5"> icons</font><font color="#CCCCCC"> you just use timeout</font>

640
00:32:01,110 --> 00:32:06,668
<font color="#CCCCCC">the idea is</font><font color="#E5E5E5"> to have a disk signature</font>

641
00:32:04,480 --> 00:32:09,340
description which is<font color="#E5E5E5"> as simple as</font>

642
00:32:06,669 --> 00:32:13,240
<font color="#E5E5E5">possible</font><font color="#CCCCCC"> and are agnostic</font><font color="#E5E5E5"> if possible</font>

643
00:32:09,340 --> 00:32:16,658
<font color="#E5E5E5">and coding and which doesn't consider</font>

644
00:32:13,240 --> 00:32:18,700
<font color="#E5E5E5">the Kalinka mention so it can be a</font>

645
00:32:16,659 --> 00:32:20,409
several code to be sure that this is<font color="#CCCCCC"> a</font>

646
00:32:18,700 --> 00:32:23,860
function<font color="#E5E5E5"> and it is</font><font color="#CCCCCC"> a problem</font><font color="#E5E5E5"> which is</font>

647
00:32:20,409 --> 00:32:27,639
obviously embarassingly parallel so we

648
00:32:23,860 --> 00:32:30,998
can use this so all<font color="#E5E5E5"> these things has</font>

649
00:32:27,639 --> 00:32:34,779
been<font color="#E5E5E5"> implemented in a tiny tools</font><font color="#CCCCCC"> name as</font>

650
00:32:30,999 --> 00:32:39,070
<font color="#CCCCCC">Sevilla</font><font color="#E5E5E5"> H based on onion which also open</font>

651
00:32:34,779 --> 00:32:41,999
source<font color="#E5E5E5"> and one thing</font><font color="#CCCCCC"> that I don't talk</font>

652
00:32:39,070 --> 00:32:45,789
<font color="#E5E5E5">about today but using the symbolic</font>

653
00:32:41,999 --> 00:32:48,879
emulation<font color="#E5E5E5"> of mass M we</font><font color="#CCCCCC"> can also learn</font>

654
00:32:45,789 --> 00:32:52,629
automatically new<font color="#E5E5E5"> functions signatures</font>

655
00:32:48,879 --> 00:32:55,600
<font color="#E5E5E5">but this is for another</font><font color="#CCCCCC"> day</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> getting</font>

656
00:32:52,629 --> 00:33:00,459
<font color="#E5E5E5">back</font><font color="#CCCCCC"> to our equation drug</font><font color="#E5E5E5"> a crypto we'll</font>

657
00:32:55,600 --> 00:33:03,580
just consider the beginning part<font color="#E5E5E5"> reverse</font>

658
00:33:00,460 --> 00:33:07,059
we have reversed it<font color="#CCCCCC"> so we want to to</font>

659
00:33:03,580 --> 00:33:08,340
discover<font color="#CCCCCC"> its</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> we just create a simple</font>

660
00:33:07,059 --> 00:33:11,620
<font color="#E5E5E5">test test</font>

661
00:33:08,340 --> 00:33:15,189
then we<font color="#E5E5E5"> prepare the the test</font><font color="#CCCCCC"> we provide</font>

662
00:33:11,620 --> 00:33:17,979
the initial<font color="#E5E5E5"> in memory insert memory so</font>

663
00:33:15,190 --> 00:33:20,289
it just dedicated to bignum then we said

664
00:33:17,980 --> 00:33:21,940
the arguments we run the function<font color="#E5E5E5"> and at</font>

665
00:33:20,289 --> 00:33:25,210
the end we check the<font color="#CCCCCC"> final state</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> its</font>

666
00:33:21,940 --> 00:33:29,230
<font color="#E5E5E5">match</font><font color="#CCCCCC"> if he is matching what what we</font>

667
00:33:25,210 --> 00:33:31,659
expect we can<font color="#E5E5E5"> say</font><font color="#CCCCCC"> okay it's the copy</font><font color="#E5E5E5"> so</font>

668
00:33:29,230 --> 00:33:36,820
it's just one test<font color="#CCCCCC"> so this is the one</font>

669
00:33:31,659 --> 00:33:37,600
slide<font color="#CCCCCC"> a test which is discovering big</font>

670
00:33:36,820 --> 00:33:43,090
<font color="#E5E5E5">Numa cookie</font>

671
00:33:37,600 --> 00:33:47,260
so as a demo<font color="#CCCCCC"> I will</font><font color="#E5E5E5"> try to really run</font>

672
00:33:43,090 --> 00:33:54,428
<font color="#E5E5E5">this code on</font><font color="#CCCCCC"> unto binaries and to</font><font color="#E5E5E5"> DLL</font>

673
00:33:47,260 --> 00:33:59,950
one in HT<font color="#CCCCCC"> HT</font><font color="#E5E5E5"> 6 and</font><font color="#CCCCCC"> 1 in 32 64 32</font><font color="#E5E5E5"> sorry</font>

674
00:33:54,429 --> 00:34:02,350
so we already implement some of<font color="#E5E5E5"> test for</font>

675
00:33:59,950 --> 00:34:07,000
the beginning<font color="#E5E5E5"> cryptography and then if I</font>

676
00:34:02,350 --> 00:34:11,168
run it<font color="#CCCCCC"> sorry</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> I when it's under</font><font color="#E5E5E5"> the</font>

677
00:34:07,000 --> 00:34:14,050
first binary everyone in<font color="#CCCCCC"> parallels and</font>

678
00:34:11,168 --> 00:34:16,388
it will discover some of the the

679
00:34:14,050 --> 00:34:18,820
signature<font color="#CCCCCC"> that we just implements</font><font color="#E5E5E5"> so the</font>

680
00:34:16,389 --> 00:34:20,679
multiplication the<font color="#E5E5E5"> by now</font>

681
00:34:18,820 --> 00:34:24,040
<font color="#CCCCCC">the big name to string the comparison</font>

682
00:34:20,679 --> 00:34:28,899
extra extra<font color="#CCCCCC"> and I can rent the same I</font>

683
00:34:24,040 --> 00:34:35,290
<font color="#E5E5E5">can run the same test on a binary which</font>

684
00:34:28,899 --> 00:34:38,859
is in<font color="#CCCCCC"> 32-bit and it also found some of</font>

685
00:34:35,290 --> 00:34:41,949
the<font color="#CCCCCC"> Bates</font><font color="#E5E5E5"> termination is not not so slow</font>

686
00:34:38,859 --> 00:34:45,569
because you<font color="#E5E5E5"> are using some just-in-time</font>

687
00:34:41,949 --> 00:34:49,598
compilation but just a implementation<font color="#CCCCCC"> I</font>

688
00:34:45,570 --> 00:34:53,080
<font color="#E5E5E5">think so we</font><font color="#CCCCCC"> if you have seen the</font>

689
00:34:49,599 --> 00:34:54,879
emulation<font color="#E5E5E5"> as a tiny emulation</font><font color="#CCCCCC"> with just</font>

690
00:34:53,080 --> 00:34:56,230
the code and the stack but<font color="#E5E5E5"> we can do</font>

691
00:34:54,879 --> 00:34:58,440
more<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> instance if you</font><font color="#CCCCCC"> are</font>

692
00:34:56,230 --> 00:35:00,940
analyzing<font color="#E5E5E5"> a shellcode</font><font color="#CCCCCC"> which come from</font>

693
00:34:58,440 --> 00:35:03,220
angular exploit<font color="#E5E5E5"> Keeton this is the</font>

694
00:35:00,940 --> 00:35:05,800
landing page<font color="#E5E5E5"> you get to the 3G exploit</font>

695
00:35:03,220 --> 00:35:08,830
then you get the shellcode<font color="#CCCCCC"> you you want</font>

696
00:35:05,800 --> 00:35:11,830
<font color="#E5E5E5">to</font><font color="#CCCCCC"> analyzed it</font><font color="#E5E5E5"> so you disassembly it's</font>

697
00:35:08,830 --> 00:35:15,098
you realize it's<font color="#CCCCCC"> encoded</font><font color="#E5E5E5"> and we can say</font>

698
00:35:11,830 --> 00:35:17,589
<font color="#E5E5E5">okay we</font><font color="#CCCCCC"> just emulate it to to let Amanda</font>

699
00:35:15,099 --> 00:35:22,000
<font color="#E5E5E5">code himself and get back the</font>

700
00:35:17,589 --> 00:35:25,120
<font color="#CCCCCC">information so how if we just use what</font>

701
00:35:22,000 --> 00:35:27,130
she's done so far<font color="#E5E5E5"> that is to say only</font>

702
00:35:25,120 --> 00:35:30,339
<font color="#E5E5E5">the code and</font><font color="#CCCCCC"> a stack</font><font color="#E5E5E5"> we run the</font>

703
00:35:27,130 --> 00:35:32,640
<font color="#CCCCCC">shellcode and Mia's</font><font color="#E5E5E5"> will</font><font color="#CCCCCC"> crash that is</font>

704
00:35:30,340 --> 00:35:36,370
normal<font color="#E5E5E5"> it's kind of a try and I approach</font>

705
00:35:32,640 --> 00:35:39,730
because actually because<font color="#CCCCCC"> the</font><font color="#E5E5E5"> emulation</font>

706
00:35:36,370 --> 00:35:43,839
is minimalist<font color="#E5E5E5"> it will put your finger</font>

707
00:35:39,730 --> 00:35:45,640
<font color="#CCCCCC">just on</font><font color="#E5E5E5"> exotic things when when the</font>

708
00:35:43,840 --> 00:35:49,630
<font color="#CCCCCC">shellcode is</font><font color="#E5E5E5"> trying to do something</font><font color="#CCCCCC"> that</font>

709
00:35:45,640 --> 00:35:52,660
<font color="#CCCCCC">is not</font><font color="#E5E5E5"> quite usual but actually is as</font>

710
00:35:49,630 --> 00:35:56,170
been<font color="#CCCCCC"> the decode himself so we can get</font>

711
00:35:52,660 --> 00:35:58,109
back the memory and inspect wires are a

712
00:35:56,170 --> 00:36:01,090
problem<font color="#E5E5E5"> why</font><font color="#CCCCCC"> is there a</font><font color="#E5E5E5"> crash and</font>

713
00:35:58,110 --> 00:36:06,400
inspecting it will found this code<font color="#E5E5E5"> so</font>

714
00:36:01,090 --> 00:36:10,380
this is a this is<font color="#E5E5E5"> a common usage of</font>

715
00:36:06,400 --> 00:36:14,710
<font color="#CCCCCC">Windows internal structures</font><font color="#E5E5E5"> to to obtain</font>

716
00:36:10,380 --> 00:36:19,450
imports to to resolve<font color="#E5E5E5"> imports based on</font>

717
00:36:14,710 --> 00:36:22,600
<font color="#CCCCCC">our</font><font color="#E5E5E5"> Windows internals</font><font color="#CCCCCC"> ok so I will do to</font>

718
00:36:19,450 --> 00:36:25,000
continue<font color="#E5E5E5"> the emulation we use the so</font>

719
00:36:22,600 --> 00:36:28,270
called<font color="#E5E5E5"> sandbox in</font><font color="#CCCCCC"> unison</font><font color="#E5E5E5"> which actually</font>

720
00:36:25,000 --> 00:36:31,480
add in addition to the stack<font color="#CCCCCC"> and the</font>

721
00:36:28,270 --> 00:36:34,600
<font color="#CCCCCC">shellcode I some GLS</font><font color="#E5E5E5"> in the memory will</font>

722
00:36:31,480 --> 00:36:36,880
load it then<font color="#CCCCCC"> some</font><font color="#E5E5E5"> information on the</font>

723
00:36:34,600 --> 00:36:41,819
loader on<font color="#E5E5E5"> windows</font><font color="#CCCCCC"> installing structures</font>

724
00:36:36,880 --> 00:36:46,120
and<font color="#E5E5E5"> @uv PB extra extra</font><font color="#CCCCCC"> and so on</font>

725
00:36:41,820 --> 00:36:49,570
<font color="#CCCCCC">actually the memory in a museum being a</font>

726
00:36:46,120 --> 00:36:52,089
bytes<font color="#E5E5E5"> precise we can split the for</font>

727
00:36:49,570 --> 00:36:55,990
<font color="#E5E5E5">instance is</font><font color="#CCCCCC"> GB in just 4 bytes that we</font>

728
00:36:52,090 --> 00:36:59,620
know then skip<font color="#E5E5E5"> as a sparse structures</font>

729
00:36:55,990 --> 00:37:02,229
actually<font color="#E5E5E5"> so this way if</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> manual is</font>

730
00:36:59,620 --> 00:37:06,400
trying to reach an address that we don't

731
00:37:02,230 --> 00:37:10,360
know<font color="#E5E5E5"> because this is an exotic behavior</font>

732
00:37:06,400 --> 00:37:12,220
<font color="#E5E5E5">like getting the number of CPUs we it</font>

733
00:37:10,360 --> 00:37:14,170
will crush but<font color="#CCCCCC"> it will put</font><font color="#E5E5E5"> on finger</font>

734
00:37:12,220 --> 00:37:19,480
just<font color="#E5E5E5"> on the code that is trying to do</font>

735
00:37:14,170 --> 00:37:22,390
something nice<font color="#CCCCCC"> so using</font><font color="#E5E5E5"> this will run</font>

736
00:37:19,480 --> 00:37:25,330
<font color="#E5E5E5">the code and actually investment we will</font>

737
00:37:22,390 --> 00:37:27,490
when<font color="#CCCCCC"> we it will load the DLL and</font><font color="#E5E5E5"> trot</font>

738
00:37:25,330 --> 00:37:30,490
structures<font color="#E5E5E5"> it will treat fake address</font>

739
00:37:27,490 --> 00:37:33,370
for each of the API<font color="#E5E5E5"> and if the code is</font>

740
00:37:30,490 --> 00:37:35,169
trying to troll one of these<font color="#E5E5E5"> API it will</font>

741
00:37:33,370 --> 00:37:35,880
break on it and say<font color="#E5E5E5"> ok this code is</font>

742
00:37:35,170 --> 00:37:38,400
trying to

743
00:37:35,880 --> 00:37:41,549
to code this code is trying to<font color="#CCCCCC"> call Co</font>

744
00:37:38,400 --> 00:37:43,980
initialize X so what<font color="#CCCCCC"> we can do here we</font>

745
00:37:41,549 --> 00:37:46,980
can go back to Python and write

746
00:37:43,980 --> 00:37:50,640
functions<font color="#E5E5E5"> that so for instance if</font><font color="#CCCCCC"> we</font>

747
00:37:46,980 --> 00:37:52,740
<font color="#CCCCCC">want to</font><font color="#E5E5E5"> stab a</font><font color="#CCCCCC"> star line</font><font color="#E5E5E5"> we have a</font>

748
00:37:50,640 --> 00:37:55,859
naming convention<font color="#CCCCCC"> then we can get</font><font color="#E5E5E5"> back</font>

749
00:37:52,740 --> 00:38:00,288
<font color="#E5E5E5">the argument from the sandbox</font><font color="#CCCCCC"> knowing</font>

750
00:37:55,859 --> 00:38:03,269
the idea<font color="#E5E5E5"> and</font><font color="#CCCCCC"> Davi</font><font color="#E5E5E5"> we can get back the</font>

751
00:38:00,289 --> 00:38:06,470
Bison<font color="#E5E5E5"> strings and we can compute the</font>

752
00:38:03,269 --> 00:38:09,508
<font color="#CCCCCC">asturian in a full Python and at the end</font>

753
00:38:06,470 --> 00:38:12,750
<font color="#E5E5E5">sets the returns value and lets the</font>

754
00:38:09,509 --> 00:38:15,000
emulation continue they can also have

755
00:38:12,750 --> 00:38:18,299
some interaction<font color="#CCCCCC"> with the</font><font color="#E5E5E5"> VM like a</font>

756
00:38:15,000 --> 00:38:21,299
custom<font color="#CCCCCC"> alligator or we can write</font>

757
00:38:18,299 --> 00:38:23,250
minimalist implementation like for this

758
00:38:21,299 --> 00:38:25,460
<font color="#CCCCCC">function you are don't notify cache you</font>

759
00:38:23,250 --> 00:38:28,109
can<font color="#E5E5E5"> say okay it always works</font><font color="#CCCCCC"> it does not</font>

760
00:38:25,460 --> 00:38:35,880
actually contact internet but<font color="#E5E5E5"> Toro is</font>

761
00:38:28,109 --> 00:38:45,890
the work and the final<font color="#E5E5E5"> binary is</font><font color="#CCCCCC"> name</font><font color="#E5E5E5"> so</font>

762
00:38:35,880 --> 00:38:53,579
as<font color="#CCCCCC"> a demo okay so now if we run</font><font color="#E5E5E5"> the</font>

763
00:38:45,890 --> 00:38:57,890
decoder differently when it with just

764
00:38:53,579 --> 00:38:57,890
the<font color="#E5E5E5"> code in the stack we have T's crush</font>

765
00:38:58,490 --> 00:39:04,439
<font color="#E5E5E5">doing yeah okay we have to scratch</font>

766
00:39:02,039 --> 00:39:07,859
<font color="#CCCCCC">because we are not managing we are not</font>

767
00:39:04,440 --> 00:39:09,480
simulating the segment in<font color="#CCCCCC"> the minion we</font>

768
00:39:07,859 --> 00:39:12,210
are not<font color="#CCCCCC"> manage</font><font color="#E5E5E5"> and we are not simulating</font>

769
00:39:09,480 --> 00:39:14,700
windows internal structures and so on<font color="#E5E5E5"> so</font>

770
00:39:12,210 --> 00:39:19,680
now we can say is a an<font color="#E5E5E5"> option to achieve</font>

771
00:39:14,700 --> 00:39:21,750
it to<font color="#E5E5E5"> enable it and we go further and at</font>

772
00:39:19,680 --> 00:39:23,339
this<font color="#E5E5E5"> time at the end of the famous</font><font color="#CCCCCC"> ok</font>

773
00:39:21,750 --> 00:39:26,549
it's right when to<font color="#CCCCCC"> call</font><font color="#E5E5E5"> echo initialize</font>

774
00:39:23,339 --> 00:39:32,009
X so we can add a stub and if we do this

775
00:39:26,549 --> 00:39:38,880
<font color="#E5E5E5">for</font><font color="#CCCCCC"> some of the function for like C</font><font color="#E5E5E5"> 505</font>

776
00:39:32,009 --> 00:39:41,359
function actually and if we run back<font color="#E5E5E5"> the</font>

777
00:39:38,880 --> 00:39:41,359
binary

778
00:39:43,510 --> 00:39:49,630
and if you just look<font color="#E5E5E5"> at the</font><font color="#CCCCCC"> results what</font>

779
00:39:47,320 --> 00:39:53,500
<font color="#E5E5E5">we can see</font><font color="#CCCCCC"> here is</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> actually the</font>

780
00:39:49,630 --> 00:39:56,320
<font color="#CCCCCC">Chad has called URL then</font><font color="#E5E5E5"> notify cache so</font>

781
00:39:53,500 --> 00:39:58,510
we<font color="#E5E5E5"> get the</font><font color="#CCCCCC"> URL of the CNC</font><font color="#E5E5E5"> then we can</font>

782
00:39:56,320 --> 00:40:01,480
see that<font color="#CCCCCC"> he has denoted</font><font color="#E5E5E5"> at food that it</font>

783
00:39:58,510 --> 00:40:04,780
exists<font color="#E5E5E5"> as is our</font><font color="#CCCCCC"> name and we can</font><font color="#E5E5E5"> see</font>

784
00:40:01,480 --> 00:40:09,160
after<font color="#E5E5E5"> is doing shell execute and</font><font color="#CCCCCC"> ionic</font>

785
00:40:04,780 --> 00:40:13,540
<font color="#CCCCCC">process next what we can also do is we</font>

786
00:40:09,160 --> 00:40:17,319
<font color="#E5E5E5">use the same script to analyze sheltered</font>

787
00:40:13,540 --> 00:40:20,259
from<font color="#E5E5E5"> the same campaign by just reusing</font>

788
00:40:17,320 --> 00:40:26,020
it and if it works<font color="#E5E5E5"> obviously</font>

789
00:40:20,260 --> 00:40:31,060
so we<font color="#CCCCCC"> capitalize</font><font color="#E5E5E5"> a bit or our previous</font>

790
00:40:26,020 --> 00:40:34,210
analysis and get the new parts so so far

791
00:40:31,060 --> 00:40:36,520
we've seen emulation from very

792
00:40:34,210 --> 00:40:39,040
minimalist<font color="#CCCCCC"> uneasy code and maybe</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> stack</font>

793
00:40:36,520 --> 00:40:42,310
<font color="#E5E5E5">then we had</font><font color="#CCCCCC"> signalman link window</font>

794
00:40:39,040 --> 00:40:45,730
structures then<font color="#CCCCCC"> windows</font><font color="#E5E5E5"> API simulation</font>

795
00:40:42,310 --> 00:40:48,549
<font color="#E5E5E5">which</font><font color="#CCCCCC"> means we can go</font><font color="#E5E5E5"> further</font><font color="#CCCCCC"> recently</font>

796
00:40:45,730 --> 00:40:51,609
very recently we had the fully userland

797
00:40:48,550 --> 00:40:55,869
<font color="#E5E5E5">emulation</font><font color="#CCCCCC"> that is to say the code the</font>

798
00:40:51,609 --> 00:40:59,500
full userland<font color="#E5E5E5"> run and just the channel</font>

799
00:40:55,869 --> 00:41:01,300
is simulate onion leaves for now so for

800
00:40:59,500 --> 00:41:03,790
instance<font color="#E5E5E5"> we treat</font><font color="#CCCCCC"> linux environment</font>

801
00:41:01,300 --> 00:41:05,920
<font color="#CCCCCC">which is which will simulate the</font><font color="#E5E5E5"> file</font>

802
00:41:03,790 --> 00:41:09,070
system the<font color="#E5E5E5"> network except everything is</font>

803
00:41:05,920 --> 00:41:12,760
simulated sibility so we have to get

804
00:41:09,070 --> 00:41:15,970
<font color="#E5E5E5">back the loader inside the sandbox</font><font color="#CCCCCC"> we</font>

805
00:41:12,760 --> 00:41:18,280
have to map it indicated<font color="#CCCCCC"> pre party</font>

806
00:41:15,970 --> 00:41:20,049
environment<font color="#E5E5E5"> say what are the arguments</font>

807
00:41:18,280 --> 00:41:23,050
what are the environment what does the

808
00:41:20,050 --> 00:41:25,390
deoxy draw vectors<font color="#CCCCCC"> extra and as we have</font>

809
00:41:23,050 --> 00:41:28,480
done for<font color="#CCCCCC"> the function studying before</font><font color="#E5E5E5"> we</font>

810
00:41:25,390 --> 00:41:30,549
can stab the<font color="#CCCCCC"> cisco so we can simulate</font>

811
00:41:28,480 --> 00:41:34,140
them<font color="#E5E5E5"> so for instance if</font><font color="#CCCCCC"> i want to write</font>

812
00:41:30,550 --> 00:41:37,660
<font color="#E5E5E5">a generic</font><font color="#CCCCCC"> Cisco white what I can do is</font>

813
00:41:34,140 --> 00:41:40,930
to<font color="#CCCCCC"> just pass the arguments knowing the</font>

814
00:41:37,660 --> 00:41:42,609
<font color="#E5E5E5">the calling convention gets the memory</font>

815
00:41:40,930 --> 00:41:45,669
back from the VM

816
00:41:42,609 --> 00:41:49,750
<font color="#E5E5E5">and credits and</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> call right under fake</font>

817
00:41:45,670 --> 00:41:52,690
<font color="#E5E5E5">file descriptors then and I associate it</font>

818
00:41:49,750 --> 00:41:58,320
<font color="#E5E5E5">to the correct system number and and</font>

819
00:41:52,690 --> 00:41:58,320
it's done<font color="#E5E5E5"> so has</font>

820
00:42:00,089 --> 00:42:08,259
<font color="#CCCCCC">there is a full run of file on the RS so</font>

821
00:42:06,220 --> 00:42:11,618
everything is simulated air<font color="#E5E5E5"> you can see</font>

822
00:42:08,260 --> 00:42:13,779
<font color="#E5E5E5">that is trying to get the magic because</font>

823
00:42:11,619 --> 00:42:17,099
this is the<font color="#E5E5E5"> variant binary file he is</font>

824
00:42:13,779 --> 00:42:19,630
trying<font color="#E5E5E5"> to get</font><font color="#CCCCCC"> its magic</font><font color="#E5E5E5"> we infuse some</font>

825
00:42:17,099 --> 00:42:22,059
some of them then<font color="#E5E5E5"> you read the file</font>

826
00:42:19,630 --> 00:42:27,309
<font color="#E5E5E5">apply is force and</font><font color="#CCCCCC"> it output okay I</font>

827
00:42:22,059 --> 00:42:28,539
detected that<font color="#E5E5E5"> it's alpha 64-bit to show</font>

828
00:42:27,309 --> 00:42:33,390
you that I'm not<font color="#E5E5E5"> cheating</font>

829
00:42:28,539 --> 00:42:39,250
I can also run it<font color="#E5E5E5"> for for instance</font><font color="#CCCCCC"> LS</font>

830
00:42:33,390 --> 00:42:45,339
not<font color="#E5E5E5"> notice not not fire</font><font color="#CCCCCC"> just Alice on</font>

831
00:42:39,250 --> 00:42:47,289
arm<font color="#E5E5E5"> so I can't use my own Cisco and</font>

832
00:42:45,339 --> 00:42:50,259
trainings we are simulating<font color="#CCCCCC"> in get dance</font>

833
00:42:47,289 --> 00:42:54,390
extra and<font color="#E5E5E5"> we get the right agenda which</font>

834
00:42:50,260 --> 00:42:59,950
is outputting<font color="#CCCCCC"> the output of LS</font>

835
00:42:54,390 --> 00:43:02,799
so now we've<font color="#E5E5E5"> seen the IR use we also</font>

836
00:42:59,950 --> 00:43:06,430
<font color="#E5E5E5">have seen some of</font><font color="#CCCCCC"> the emulation part and</font>

837
00:43:02,799 --> 00:43:08,770
we<font color="#E5E5E5"> can try to mix them together</font><font color="#CCCCCC"> I will</font>

838
00:43:06,430 --> 00:43:10,720
do<font color="#E5E5E5"> this</font><font color="#CCCCCC"> we'll use one of</font><font color="#E5E5E5"> the common</font>

839
00:43:08,770 --> 00:43:16,299
technique which is called<font color="#E5E5E5"> Dyne dynamic</font>

840
00:43:10,720 --> 00:43:19,359
symbolic execution<font color="#E5E5E5"> it's nothing new but</font>

841
00:43:16,299 --> 00:43:21,069
<font color="#E5E5E5">the principle is</font><font color="#CCCCCC"> a very simple</font><font color="#E5E5E5"> actually</font>

842
00:43:19,359 --> 00:43:22,828
you have a symbolic execution<font color="#E5E5E5"> alongside</font>

843
00:43:21,069 --> 00:43:26,920
<font color="#E5E5E5">the concrete one and the concrete</font>

844
00:43:22,829 --> 00:43:29,529
execution say where we have to go<font color="#CCCCCC"> so for</font>

845
00:43:26,920 --> 00:43:31,869
<font color="#E5E5E5">instance if I have these minimized code</font>

846
00:43:29,529 --> 00:43:34,900
snippet<font color="#CCCCCC"> the concreting section is</font>

847
00:43:31,869 --> 00:43:37,029
<font color="#E5E5E5">entering the if if I just want as</font><font color="#CCCCCC"> Ferris</font>

848
00:43:34,900 --> 00:43:39,640
said before<font color="#E5E5E5"> a summary execution</font><font color="#CCCCCC"> you will</font>

849
00:43:37,029 --> 00:43:42,640
get stuck on the if statement<font color="#E5E5E5"> not</font>

850
00:43:39,640 --> 00:43:45,578
knowing if you have to enter<font color="#E5E5E5"> or not</font><font color="#CCCCCC"> T</font>

851
00:43:42,640 --> 00:43:49,538
statement in a dynamic symbolic

852
00:43:45,579 --> 00:43:51,520
execution<font color="#E5E5E5"> we will have a look at</font><font color="#CCCCCC"> what</font>

853
00:43:49,539 --> 00:43:53,680
the concrete exaction is doing taking

854
00:43:51,520 --> 00:43:57,579
the branch<font color="#E5E5E5"> so we also take the branch</font>

855
00:43:53,680 --> 00:44:00,359
but<font color="#E5E5E5"> as we are</font><font color="#CCCCCC"> taking the ranch we can</font>

856
00:43:57,579 --> 00:44:03,660
add a constraint on<font color="#E5E5E5"> the current path</font>

857
00:44:00,359 --> 00:44:06,038
saying that<font color="#E5E5E5"> X has to be odd and</font>

858
00:44:03,660 --> 00:44:06,549
accumulate some of the<font color="#E5E5E5"> some</font><font color="#CCCCCC"> of this</font>

859
00:44:06,039 --> 00:44:10,210
constraint

860
00:44:06,549 --> 00:44:13,089
<font color="#E5E5E5">along the execution</font>

861
00:44:10,210 --> 00:44:16,450
well<font color="#CCCCCC"> had</font><font color="#E5E5E5"> some usage of teaser teaser</font>

862
00:44:13,089 --> 00:44:19,538
method so<font color="#CCCCCC"> Funston so for</font><font color="#E5E5E5"> instance we can</font>

863
00:44:16,450 --> 00:44:21,819
<font color="#E5E5E5">say when you take</font><font color="#CCCCCC"> the if you</font><font color="#E5E5E5"> can say</font>

864
00:44:19,539 --> 00:44:24,910
<font color="#E5E5E5">okay is it possible</font><font color="#CCCCCC"> to find</font><font color="#E5E5E5"> a solution</font>

865
00:44:21,819 --> 00:44:29,740
<font color="#E5E5E5">which</font><font color="#CCCCCC"> Wichita does not</font><font color="#E5E5E5"> answer the</font>

866
00:44:24,910 --> 00:44:34,089
<font color="#E5E5E5">Restatement but as</font><font color="#CCCCCC"> for instance and if</font>

867
00:44:29,740 --> 00:44:35,859
so can you create using<font color="#E5E5E5"> a server</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> you</font>

868
00:44:34,089 --> 00:44:39,160
create an<font color="#CCCCCC"> input that</font><font color="#E5E5E5"> you that we will</font>

869
00:44:35,859 --> 00:44:41,589
reach<font color="#CCCCCC"> T's</font><font color="#E5E5E5"> T statement so</font><font color="#CCCCCC"> it's used</font>

870
00:44:39,160 --> 00:44:46,149
<font color="#CCCCCC">basically to expand</font><font color="#E5E5E5"> coverage and it's</font>

871
00:44:41,589 --> 00:44:48,400
very useful<font color="#CCCCCC"> in phasing like</font><font color="#E5E5E5"> user in a</font>

872
00:44:46,150 --> 00:44:51,960
vulnerability research and like in<font color="#E5E5E5"> the</font>

873
00:44:48,400 --> 00:44:54,160
<font color="#CCCCCC">cyber Grand Challenge</font><font color="#E5E5E5"> accuracy ago so</font>

874
00:44:51,960 --> 00:44:58,299
using<font color="#E5E5E5"> it for instance what you've done</font>

875
00:44:54,160 --> 00:45:02,529
<font color="#E5E5E5">before we can create 10 bytes 10 bytes</font><font color="#CCCCCC"> a</font>

876
00:44:58,299 --> 00:45:02,980
file<font color="#E5E5E5"> named target run fully run the</font>

877
00:45:02,529 --> 00:45:08,049
<font color="#CCCCCC">phylla</font>

878
00:45:02,980 --> 00:45:10,990
<font color="#CCCCCC">binary on it</font><font color="#E5E5E5"> brick on the reader Cisco</font>

879
00:45:08,049 --> 00:45:14,890
which is<font color="#E5E5E5"> reading target bytes turn</font>

880
00:45:10,990 --> 00:45:17,799
<font color="#E5E5E5">target bites into symbolic one and then</font>

881
00:45:14,890 --> 00:45:21,879
we will<font color="#CCCCCC"> run</font><font color="#E5E5E5"> until</font><font color="#CCCCCC"> the next</font><font color="#E5E5E5"> Cisco but</font>

882
00:45:17,799 --> 00:45:26,160
<font color="#E5E5E5">each time there</font><font color="#CCCCCC"> is a branch which acts</font>

883
00:45:21,880 --> 00:45:29,529
on<font color="#E5E5E5"> a symbolic in</font><font color="#CCCCCC"> bite it will try to</font>

884
00:45:26,160 --> 00:45:32,288
create a new solution<font color="#CCCCCC"> for T's fats is</font>

885
00:45:29,529 --> 00:45:35,740
right for you try to<font color="#E5E5E5"> create a new</font>

886
00:45:32,289 --> 00:45:38,140
solution which take<font color="#CCCCCC"> the this new path</font>

887
00:45:35,740 --> 00:45:42,640
and this<font color="#E5E5E5"> way you can expand</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> code</font>

888
00:45:38,140 --> 00:45:47,529
branch pass coverage<font color="#CCCCCC"> if so so has the</font>

889
00:45:42,640 --> 00:45:51,900
demo<font color="#CCCCCC"> if I rented van what I just said so</font>

890
00:45:47,529 --> 00:45:54,849
for now this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> the one</font><font color="#CCCCCC"> that we</font>

891
00:45:51,900 --> 00:45:57,430
done<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we've done</font><font color="#E5E5E5"> before we get to</font>

892
00:45:54,849 --> 00:46:00,609
the Cisco read<font color="#CCCCCC"> now it's go to the</font>

893
00:45:57,430 --> 00:46:02,348
<font color="#E5E5E5">symbolic ignition and try to</font><font color="#CCCCCC"> to maximize</font>

894
00:46:00,609 --> 00:46:04,839
<font color="#E5E5E5">the</font><font color="#CCCCCC"> deckle coverage so I found an input</font>

895
00:46:02,349 --> 00:46:07,240
which outer ASCII text then and<font color="#CCCCCC"> I'd put</font>

896
00:46:04,839 --> 00:46:09,460
out which outer data then an output

897
00:46:07,240 --> 00:46:12,759
which outer<font color="#CCCCCC"> international I don't know</font>

898
00:46:09,460 --> 00:46:18,309
what a<font color="#E5E5E5"> text</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> Tasha extra extra so it's</font>

899
00:46:12,760 --> 00:46:23,049
<font color="#E5E5E5">quite</font><font color="#CCCCCC"> useful for</font><font color="#E5E5E5"> facing another usage of</font>

900
00:46:18,309 --> 00:46:23,920
the<font color="#E5E5E5"> GAC is to restraint the output the</font>

901
00:46:23,049 --> 00:46:26,380
input

902
00:46:23,920 --> 00:46:27,070
excuse me<font color="#E5E5E5"> based on what</font><font color="#CCCCCC"> you want in the</font>

903
00:46:26,380 --> 00:46:32,110
output

904
00:46:27,070 --> 00:46:34,210
so just to<font color="#CCCCCC"> be more concrete I'll get</font>

905
00:46:32,110 --> 00:46:36,220
back to<font color="#CCCCCC"> the shell</font><font color="#E5E5E5"> cut and you even</font>

906
00:46:34,210 --> 00:46:39,280
notice that<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> packed to</font><font color="#CCCCCC"> be</font>

907
00:46:36,220 --> 00:46:40,839
alphanumeric<font color="#E5E5E5"> so what we want to do is to</font>

908
00:46:39,280 --> 00:46:43,450
have a shell code which looks<font color="#E5E5E5"> like</font>

909
00:46:40,840 --> 00:46:45,130
<font color="#E5E5E5">similar</font><font color="#CCCCCC"> to this one but</font><font color="#E5E5E5"> use our own CNC</font>

910
00:46:43,450 --> 00:46:48,700
so for instance<font color="#E5E5E5"> using your bracket</font>

911
00:46:45,130 --> 00:46:53,800
<font color="#E5E5E5">common see what we will do is</font><font color="#CCCCCC"> use the</font>

912
00:46:48,700 --> 00:46:56,259
<font color="#CCCCCC">DAC attach the jitter and and say that</font>

913
00:46:53,800 --> 00:47:00,250
the input shell cut it<font color="#CCCCCC"> would</font><font color="#E5E5E5"> be symbolic</font>

914
00:46:56,260 --> 00:47:03,400
<font color="#CCCCCC">so the the decoding routines will run on</font>

915
00:47:00,250 --> 00:47:06,340
symbolic<font color="#CCCCCC"> byte</font><font color="#E5E5E5"> and at the end we'll have</font>

916
00:47:03,400 --> 00:47:10,450
<font color="#E5E5E5">the equation of the output of the memory</font>

917
00:47:06,340 --> 00:47:14,500
<font color="#E5E5E5">output giving the input shell cut so</font><font color="#CCCCCC"> as</font>

918
00:47:10,450 --> 00:47:17,290
an<font color="#CCCCCC"> example and so what we will do</font>

919
00:47:14,500 --> 00:47:21,190
actually we just<font color="#E5E5E5"> fixed the final you us</font>

920
00:47:17,290 --> 00:47:22,750
to be a say that<font color="#CCCCCC"> we also want the that</font>

921
00:47:21,190 --> 00:47:26,050
the initial shell code has to be

922
00:47:22,750 --> 00:47:30,760
alphanumeric<font color="#E5E5E5"> and a special forgiving</font><font color="#CCCCCC"> its</font>

923
00:47:26,050 --> 00:47:35,650
<font color="#E5E5E5">constraint to to find a new shaker so if</font>

924
00:47:30,760 --> 00:47:38,140
I<font color="#E5E5E5"> run</font><font color="#CCCCCC"> this demo I take just</font><font color="#E5E5E5"> a few</font>

925
00:47:35,650 --> 00:47:42,400
minutes<font color="#CCCCCC"> but we don't have time so here</font>

926
00:47:38,140 --> 00:47:47,589
is the output in<font color="#E5E5E5"> the shell code that it</font>

927
00:47:42,400 --> 00:47:50,920
just treat<font color="#E5E5E5"> created</font><font color="#CCCCCC"> it's alphanumeric and</font>

928
00:47:47,590 --> 00:47:53,680
if we use the previous script that you

929
00:47:50,920 --> 00:48:00,480
just<font color="#CCCCCC"> use</font><font color="#E5E5E5"> to analyze</font><font color="#CCCCCC"> our angular campaign</font>

930
00:47:53,680 --> 00:48:03,490
<font color="#E5E5E5">we get back our</font><font color="#CCCCCC"> own our own</font><font color="#E5E5E5"> new Isles</font>

931
00:48:00,480 --> 00:48:06,130
<font color="#E5E5E5">like a black at</font><font color="#CCCCCC"> that comma</font><font color="#E5E5E5"> so if you are</font>

932
00:48:03,490 --> 00:48:09,759
using<font color="#CCCCCC"> T shell code it will actually try</font>

933
00:48:06,130 --> 00:48:13,330
to reach a payload from from<font color="#CCCCCC"> TV and look</font>

934
00:48:09,760 --> 00:48:18,670
like<font color="#E5E5E5"> another</font><font color="#CCCCCC"> Co coming</font><font color="#E5E5E5"> from the angular</font>

935
00:48:13,330 --> 00:48:22,029
<font color="#E5E5E5">campaign so to conclude you have just</font>

936
00:48:18,670 --> 00:48:26,410
some<font color="#E5E5E5"> ID to to get to take away</font><font color="#CCCCCC"> from this</font>

937
00:48:22,030 --> 00:48:28,480
presentation is that miasma<font color="#E5E5E5"> has as a</font>

938
00:48:26,410 --> 00:48:32,859
<font color="#CCCCCC">framework</font><font color="#E5E5E5"> there is no magic here</font>

939
00:48:28,480 --> 00:48:35,860
I just<font color="#E5E5E5"> think I just embed some of the</font>

940
00:48:32,860 --> 00:48:37,360
common parts that we<font color="#CCCCCC"> used</font><font color="#E5E5E5"> every</font><font color="#CCCCCC"> day so</font>

941
00:48:35,860 --> 00:48:39,460
for instance the<font color="#E5E5E5"> emulation</font>

942
00:48:37,360 --> 00:48:41,280
capabilities<font color="#E5E5E5"> from just a function or</font>

943
00:48:39,460 --> 00:48:45,250
just occurred snipers<font color="#E5E5E5"> to a</font><font color="#CCCCCC"> full binary</font>

944
00:48:41,280 --> 00:48:48,460
<font color="#E5E5E5">we also have the IR</font><font color="#CCCCCC"> hues with some</font>

945
00:48:45,250 --> 00:48:50,530
weapons<font color="#E5E5E5"> like symbolic execution can</font><font color="#CCCCCC"> be</font>

946
00:48:48,460 --> 00:48:54,430
used for the obfuscation<font color="#E5E5E5"> from a lot of</font>

947
00:48:50,530 --> 00:48:56,650
<font color="#E5E5E5">things or just analysis and it's a</font>

948
00:48:54,430 --> 00:48:59,169
framework that we then used unreal

949
00:48:56,650 --> 00:49:02,290
<font color="#CCCCCC">reward</font><font color="#E5E5E5"> samples and real-world</font><font color="#CCCCCC"> tasks so</font>

950
00:48:59,170 --> 00:49:05,350
it's we continue to improve it<font color="#E5E5E5"> and we</font>

951
00:49:02,290 --> 00:49:08,890
<font color="#E5E5E5">continue to add to to</font><font color="#CCCCCC"> bug</font><font color="#E5E5E5"> fix and to add</font>

952
00:49:05,350 --> 00:49:10,930
<font color="#E5E5E5">features in it so maybe</font><font color="#CCCCCC"> it's framework</font>

953
00:49:08,890 --> 00:49:14,650
you want<font color="#CCCCCC"> to add to your toolbox</font>

954
00:49:10,930 --> 00:49:18,509
<font color="#E5E5E5">we are</font><font color="#CCCCCC"> completely open to suggestions</font><font color="#E5E5E5"> to</font>

955
00:49:14,650 --> 00:49:21,940
<font color="#E5E5E5">contributions to feedbacks to beers</font><font color="#CCCCCC"> a</font>

956
00:49:18,510 --> 00:49:26,380
lot of<font color="#CCCCCC"> Rods to do regarding effects</font>

957
00:49:21,940 --> 00:49:27,580
analysis to<font color="#CCCCCC"> enhance</font><font color="#E5E5E5"> what we present</font>

958
00:49:26,380 --> 00:49:30,520
<font color="#E5E5E5">today</font>

959
00:49:27,580 --> 00:49:32,890
extra extra so thanks for<font color="#CCCCCC"> your attention</font>

960
00:49:30,520 --> 00:49:36,940
I hope<font color="#E5E5E5"> the French</font><font color="#CCCCCC"> accents</font><font color="#E5E5E5"> doesn't win</font>

961
00:49:32,890 --> 00:49:39,609
everything and if you<font color="#CCCCCC"> have maybe</font><font color="#E5E5E5"> just</font>

962
00:49:36,940 --> 00:49:41,820
one or two<font color="#E5E5E5"> questions</font><font color="#CCCCCC"> I'll take them</font>

963
00:49:39,610 --> 00:49:49,449
thank you

964
00:49:41,820 --> 00:49:49,449
[Applause]

