1
00:00:00,060 --> 00:00:04,829
and<font color="#E5E5E5"> welcome to detecting</font><font color="#CCCCCC"> credential</font>

2
00:00:02,220 --> 00:00:06,720
<font color="#CCCCCC">compromising AWS</font><font color="#E5E5E5"> just a quick show of</font>

3
00:00:04,830 --> 00:00:08,068
hands<font color="#E5E5E5"> I assume</font><font color="#CCCCCC"> that most people</font><font color="#E5E5E5"> in the</font>

4
00:00:06,720 --> 00:00:10,379
room<font color="#CCCCCC"> are familiar they W</font><font color="#E5E5E5"> us but does</font>

5
00:00:08,069 --> 00:00:11,550
<font color="#E5E5E5">anyone</font><font color="#CCCCCC"> a practitioner he'd raise your</font>

6
00:00:10,380 --> 00:00:14,070
hands I<font color="#CCCCCC"> think I could see</font><font color="#E5E5E5"> people</font><font color="#CCCCCC"> out</font>

7
00:00:11,550 --> 00:00:15,960
there so yeah quite<font color="#E5E5E5"> a few it's great to</font>

8
00:00:14,070 --> 00:00:17,760
have<font color="#E5E5E5"> a crowd here this morning</font>

9
00:00:15,960 --> 00:00:19,199
but first<font color="#CCCCCC"> Who am I</font><font color="#E5E5E5"> why am I here to</font>

10
00:00:17,760 --> 00:00:21,029
speak with<font color="#E5E5E5"> you today</font>

11
00:00:19,199 --> 00:00:23,730
my name is<font color="#CCCCCC"> Wil</font><font color="#E5E5E5"> Benson I am a senior</font>

12
00:00:21,029 --> 00:00:25,920
<font color="#CCCCCC">security engineer at</font><font color="#E5E5E5"> Netflix for those</font>

13
00:00:23,730 --> 00:00:28,500
of you are<font color="#CCCCCC"> familiar with</font><font color="#E5E5E5"> Netflix we are</font>

14
00:00:25,920 --> 00:00:30,750
a micro<font color="#E5E5E5"> service ecosystem that streams</font><font color="#CCCCCC"> a</font>

15
00:00:28,500 --> 00:00:33,149
video and we're<font color="#CCCCCC"> running a hundred</font>

16
00:00:30,750 --> 00:00:35,070
percent<font color="#E5E5E5"> in AWS so up until</font><font color="#CCCCCC"> that point</font>

17
00:00:33,149 --> 00:00:38,579
with when you<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> press play all</font>

18
00:00:35,070 --> 00:00:40,980
interactions<font color="#E5E5E5"> happen within a RADS</font>

19
00:00:38,579 --> 00:00:43,200
infrastructure the<font color="#E5E5E5"> team</font><font color="#CCCCCC"> I'm on</font><font color="#E5E5E5"> is the</font>

20
00:00:40,980 --> 00:00:44,849
security tools and operations team we're

21
00:00:43,200 --> 00:00:47,100
not like your traditional<font color="#CCCCCC"> ASEC ops team</font>

22
00:00:44,850 --> 00:00:48,870
<font color="#E5E5E5">where we're not the sock or not the</font>

23
00:00:47,100 --> 00:00:51,210
<font color="#CCCCCC">Incident Response Team but we actually</font>

24
00:00:48,870 --> 00:00:53,218
own our AWS infrastructure and the

25
00:00:51,210 --> 00:00:54,840
security<font color="#E5E5E5"> and</font><font color="#CCCCCC"> accounts</font><font color="#E5E5E5"> therein so we</font>

26
00:00:53,219 --> 00:00:56,719
control permissioning<font color="#CCCCCC"> and most</font>

27
00:00:54,840 --> 00:00:58,770
importantly monitoring of<font color="#E5E5E5"> those accounts</font>

28
00:00:56,719 --> 00:00:59,750
<font color="#CCCCCC">if you're interested the</font><font color="#E5E5E5"> slides will be</font>

29
00:00:58,770 --> 00:01:02,460
posted<font color="#E5E5E5"> later today</font>

30
00:00:59,750 --> 00:01:04,500
some cool presentations<font color="#E5E5E5"> that folks</font><font color="#CCCCCC"> from</font>

31
00:01:02,460 --> 00:01:06,119
<font color="#E5E5E5">the team have done if you want to follow</font>

32
00:01:04,500 --> 00:01:07,590
<font color="#E5E5E5">me</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> Twitter</font><font color="#CCCCCC"> to continue the</font>

33
00:01:06,119 --> 00:01:10,200
conversation afterwards<font color="#CCCCCC"> I'm at</font>

34
00:01:07,590 --> 00:01:11,729
underscore underscore muscles<font color="#CCCCCC"> and that's</font>

35
00:01:10,200 --> 00:01:15,180
my github<font color="#E5E5E5"> where I'll be open sourcing</font>

36
00:01:11,729 --> 00:01:16,710
something later today but<font color="#E5E5E5"> first I just</font>

37
00:01:15,180 --> 00:01:18,810
<font color="#E5E5E5">want</font><font color="#CCCCCC"> to start saying</font><font color="#E5E5E5"> this is</font><font color="#CCCCCC"> not a</font>

38
00:01:16,710 --> 00:01:21,030
machine learning<font color="#CCCCCC"> talk I wish I could say</font>

39
00:01:18,810 --> 00:01:23,310
<font color="#CCCCCC">that I created this really awesome model</font>

40
00:01:21,030 --> 00:01:26,189
<font color="#CCCCCC">and put in all these different data</font>

41
00:01:23,310 --> 00:01:29,159
<font color="#E5E5E5">sources and learned and was able to come</font>

42
00:01:26,189 --> 00:01:30,508
<font color="#CCCCCC">up</font><font color="#E5E5E5"> with something really awesome</font><font color="#CCCCCC"> I think</font>

43
00:01:29,159 --> 00:01:32,640
I did come<font color="#E5E5E5"> up with something awesome but</font>

44
00:01:30,509 --> 00:01:34,470
it was very simple<font color="#E5E5E5"> and so I always say</font>

45
00:01:32,640 --> 00:01:36,420
well I do something complex when<font color="#CCCCCC"> it can</font>

46
00:01:34,470 --> 00:01:37,560
<font color="#E5E5E5">be pretty straightforward</font><font color="#CCCCCC"> and I</font><font color="#E5E5E5"> think</font>

47
00:01:36,420 --> 00:01:39,329
I'll show that in<font color="#E5E5E5"> an architecture</font>

48
00:01:37,560 --> 00:01:42,390
diagram later of<font color="#E5E5E5"> how simple this</font>

49
00:01:39,329 --> 00:01:44,970
<font color="#E5E5E5">actually is</font><font color="#CCCCCC"> the scope of the</font><font color="#E5E5E5"> talk today</font>

50
00:01:42,390 --> 00:01:47,579
is<font color="#E5E5E5"> detecting compromised instance</font>

51
00:01:44,970 --> 00:01:50,009
credentials outside<font color="#E5E5E5"> of your environment</font>

52
00:01:47,579 --> 00:01:52,289
<font color="#CCCCCC">and you it's very</font><font color="#E5E5E5"> important here because</font>

53
00:01:50,009 --> 00:01:55,110
<font color="#E5E5E5">when I say</font><font color="#CCCCCC"> your or my</font>

54
00:01:52,290 --> 00:01:57,510
that means<font color="#E5E5E5"> Netflix's environment your</font>

55
00:01:55,110 --> 00:01:59,460
own AWS infrastructure<font color="#E5E5E5"> not just</font><font color="#CCCCCC"> a DBS in</font>

56
00:01:57,510 --> 00:02:02,070
general<font color="#E5E5E5"> for those that aren't familiar</font>

57
00:01:59,460 --> 00:02:04,020
when you've watched a service in AWS you

58
00:02:02,070 --> 00:02:06,059
get session credentials that<font color="#E5E5E5"> are</font>

59
00:02:04,020 --> 00:02:09,109
<font color="#E5E5E5">automatically refresh this is from the</font>

60
00:02:06,060 --> 00:02:12,030
security<font color="#CCCCCC"> token service that AWS provides</font>

61
00:02:09,110 --> 00:02:13,740
<font color="#E5E5E5">they will manage rotating credentials on</font>

62
00:02:12,030 --> 00:02:16,080
your instance for you<font color="#E5E5E5"> and you can also</font>

63
00:02:13,740 --> 00:02:17,760
use a service for distributing keys

64
00:02:16,080 --> 00:02:21,030
<font color="#E5E5E5">within your individual employees</font>

65
00:02:17,760 --> 00:02:23,370
yourself<font color="#CCCCCC"> the</font><font color="#E5E5E5"> STS tokens aren't the only</font>

66
00:02:21,030 --> 00:02:25,470
type<font color="#CCCCCC"> of key</font><font color="#E5E5E5"> in AWS you have your</font><font color="#CCCCCC"> root</font>

67
00:02:23,370 --> 00:02:27,870
keys which are like your root user<font color="#CCCCCC"> and</font>

68
00:02:25,470 --> 00:02:29,459
<font color="#E5E5E5">Linux hide those you'll never need to</font>

69
00:02:27,870 --> 00:02:31,800
<font color="#CCCCCC">use them unless you lock yourself out of</font>

70
00:02:29,459 --> 00:02:34,050
an s3 bucket<font color="#E5E5E5"> or need a change</font><font color="#CCCCCC"> of the</font>

71
00:02:31,800 --> 00:02:37,680
account billing<font color="#E5E5E5"> information that is</font>

72
00:02:34,050 --> 00:02:39,390
restricted<font color="#E5E5E5"> to</font><font color="#CCCCCC"> root</font><font color="#E5E5E5"> but mostly you'll be</font>

73
00:02:37,680 --> 00:02:41,190
interacting<font color="#CCCCCC"> with</font><font color="#E5E5E5"> these session tokens</font>

74
00:02:39,390 --> 00:02:43,950
<font color="#E5E5E5">and that's really what I'm focusing on</font>

75
00:02:41,190 --> 00:02:47,010
here<font color="#CCCCCC"> today</font><font color="#E5E5E5"> it's can be applied through</font>

76
00:02:43,950 --> 00:02:48,810
any type<font color="#E5E5E5"> of temporary credential</font><font color="#CCCCCC"> and AWS</font>

77
00:02:47,010 --> 00:02:50,730
as long as you understand how those<font color="#E5E5E5"> are</font>

78
00:02:48,810 --> 00:02:52,890
created<font color="#CCCCCC"> but</font><font color="#E5E5E5"> and you could potentially</font>

79
00:02:50,730 --> 00:02:57,030
<font color="#CCCCCC">even apply to</font><font color="#E5E5E5"> the I am user static</font><font color="#CCCCCC"> keys</font>

80
00:02:52,890 --> 00:02:59,700
as well<font color="#E5E5E5"> but so</font><font color="#CCCCCC"> that's a</font><font color="#E5E5E5"> problem</font><font color="#CCCCCC"> I really</font>

81
00:02:57,030 --> 00:03:02,090
<font color="#CCCCCC">was attempting to solve</font><font color="#E5E5E5"> detecting</font>

82
00:02:59,700 --> 00:03:06,810
<font color="#E5E5E5">compromise or credential misuse really</font>

83
00:03:02,090 --> 00:03:09,150
outside<font color="#CCCCCC"> of our environment and so at AWS</font>

84
00:03:06,810 --> 00:03:12,810
or Netflix we have hundreds of thousands

85
00:03:09,150 --> 00:03:14,790
<font color="#E5E5E5">of servers they change constantly 4,000</font>

86
00:03:12,810 --> 00:03:16,230
or so deploys a day I mean we're

87
00:03:14,790 --> 00:03:18,690
continuously deploying and changing our

88
00:03:16,230 --> 00:03:21,060
<font color="#CCCCCC">environment and so I really wanted to</font>

89
00:03:18,690 --> 00:03:24,780
<font color="#E5E5E5">know when was</font><font color="#CCCCCC"> credential</font><font color="#E5E5E5"> being used</font>

90
00:03:21,060 --> 00:03:26,970
outside of<font color="#E5E5E5"> Netflix not just AWS so I</font>

91
00:03:24,780 --> 00:03:29,340
started<font color="#E5E5E5"> asking who's doing this well and</font>

92
00:03:26,970 --> 00:03:31,560
from what I can gather publicly<font color="#CCCCCC"> no one</font>

93
00:03:29,340 --> 00:03:33,269
if you're doing<font color="#E5E5E5"> this well please raise</font>

94
00:03:31,560 --> 00:03:35,400
your hand<font color="#E5E5E5"> and find me after this talk</font>

95
00:03:33,269 --> 00:03:37,920
I'd love to collaborate<font color="#E5E5E5"> their services</font>

96
00:03:35,400 --> 00:03:40,080
provided by AWS such as guard duty that

97
00:03:37,920 --> 00:03:42,720
allow you<font color="#E5E5E5"> to detect when a credential is</font>

98
00:03:40,080 --> 00:03:45,420
used<font color="#E5E5E5"> outside of AWS</font><font color="#CCCCCC"> but if you think</font><font color="#E5E5E5"> of</font>

99
00:03:42,720 --> 00:03:47,850
the landscape<font color="#E5E5E5"> in AWS it's huge it's</font>

100
00:03:45,420 --> 00:03:49,649
<font color="#CCCCCC">Netflix</font><font color="#E5E5E5"> it's slack it's every company</font>

101
00:03:47,850 --> 00:03:51,780
running including<font color="#E5E5E5"> the attackers</font>

102
00:03:49,650 --> 00:03:53,310
infrastructure<font color="#E5E5E5"> so if I'm a bad guy I'm</font>

103
00:03:51,780 --> 00:03:54,750
<font color="#E5E5E5">gonna take your credential and use it in</font>

104
00:03:53,310 --> 00:03:57,299
my<font color="#E5E5E5"> infrastructure and fly under the</font>

105
00:03:54,750 --> 00:04:01,620
radar<font color="#E5E5E5"> so we really wanted to detect</font>

106
00:03:57,299 --> 00:04:04,320
outside of your AWS infrastructure<font color="#E5E5E5"> so</font>

107
00:04:01,620 --> 00:04:06,330
why is this so hard<font color="#CCCCCC"> for</font><font color="#E5E5E5"> us at least it's</font>

108
00:04:04,320 --> 00:04:09,030
a scale problem<font color="#CCCCCC"> and I'll get into</font>

109
00:04:06,330 --> 00:04:11,310
it's so hard<font color="#CCCCCC"> for</font><font color="#E5E5E5"> us now but many others</font>

110
00:04:09,030 --> 00:04:12,450
might have<font color="#CCCCCC"> that problem as well as you</font>

111
00:04:11,310 --> 00:04:14,970
get<font color="#E5E5E5"> familiar with</font><font color="#CCCCCC"> working</font><font color="#E5E5E5"> in the cloud</font>

112
00:04:12,450 --> 00:04:16,440
<font color="#CCCCCC">you understand that</font><font color="#E5E5E5"> you have to make API</font>

113
00:04:14,970 --> 00:04:18,060
calls<font color="#E5E5E5"> to describe your environment and</font>

114
00:04:16,440 --> 00:04:20,610
there's some<font color="#E5E5E5"> limitations that you'll run</font>

115
00:04:18,060 --> 00:04:22,770
into<font color="#E5E5E5"> as</font><font color="#CCCCCC"> you scale up so we</font><font color="#E5E5E5"> really wanted</font>

116
00:04:20,610 --> 00:04:25,980
something<font color="#CCCCCC"> that</font><font color="#E5E5E5"> worked regardless of what</font>

117
00:04:22,770 --> 00:04:27,539
size you're running in the cloud<font color="#E5E5E5"> what</font>

118
00:04:25,980 --> 00:04:28,950
tools are there<font color="#E5E5E5"> I'm sure there's a</font>

119
00:04:27,540 --> 00:04:30,210
mixture of tools that<font color="#CCCCCC"> you can use but</font>

120
00:04:28,950 --> 00:04:32,849
the main tool we're going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> use today</font>

121
00:04:30,210 --> 00:04:34,680
<font color="#E5E5E5">is actually provided by AWS and that's</font>

122
00:04:32,850 --> 00:04:38,010
cloud trail for those<font color="#E5E5E5"> that aren't</font>

123
00:04:34,680 --> 00:04:40,350
familiar<font color="#E5E5E5"> with cloud trail it's a vent</font>

124
00:04:38,010 --> 00:04:42,840
history of API<font color="#CCCCCC"> calls in your environment</font>

125
00:04:40,350 --> 00:04:45,120
<font color="#E5E5E5">so</font><font color="#CCCCCC"> anytime you're in</font><font color="#E5E5E5"> the console using</font>

126
00:04:42,840 --> 00:04:48,479
<font color="#E5E5E5">the SDK</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> a command line</font><font color="#CCCCCC"> or any other</font>

127
00:04:45,120 --> 00:04:51,870
way that<font color="#E5E5E5"> you're calling API functions</font>

128
00:04:48,480 --> 00:04:53,370
<font color="#E5E5E5">you get a log now</font><font color="#CCCCCC"> there are some gaps in</font>

129
00:04:51,870 --> 00:04:55,470
<font color="#E5E5E5">this log which I'll cover later and how</font>

130
00:04:53,370 --> 00:04:56,940
to address<font color="#E5E5E5"> those but</font><font color="#CCCCCC"> for the most</font><font color="#E5E5E5"> part</font>

131
00:04:55,470 --> 00:04:58,800
<font color="#CCCCCC">you can understand what calls are being</font>

132
00:04:56,940 --> 00:05:01,020
<font color="#E5E5E5">made</font><font color="#CCCCCC"> in your environment and just</font>

133
00:04:58,800 --> 00:05:03,810
recently Amazon made<font color="#CCCCCC"> 90-day event</font>

134
00:05:01,020 --> 00:05:05,370
history<font color="#E5E5E5"> free in the console for you to</font>

135
00:05:03,810 --> 00:05:08,250
use<font color="#E5E5E5"> so there's really no excuse for you</font>

136
00:05:05,370 --> 00:05:10,020
not<font color="#CCCCCC"> to be auditing this data</font><font color="#E5E5E5"> one of</font><font color="#CCCCCC"> the</font>

137
00:05:08,250 --> 00:05:12,270
most common ways<font color="#E5E5E5"> of getting the state it</font>

138
00:05:10,020 --> 00:05:14,460
delivered to<font color="#E5E5E5"> you is utilizing the s3</font>

139
00:05:12,270 --> 00:05:15,960
delivery function which we use at

140
00:05:14,460 --> 00:05:17,760
Netflix and so if you're<font color="#E5E5E5"> interested</font>

141
00:05:15,960 --> 00:05:19,530
that's kind of what the file name looks

142
00:05:17,760 --> 00:05:23,310
like if you're<font color="#E5E5E5"> having files delivered</font>

143
00:05:19,530 --> 00:05:25,440
<font color="#E5E5E5">but note the s3</font><font color="#CCCCCC"> file</font><font color="#E5E5E5"> delivery is up to</font>

144
00:05:23,310 --> 00:05:26,820
<font color="#E5E5E5">15 or 20 minutes delayed depending on</font>

145
00:05:25,440 --> 00:05:28,800
your<font color="#E5E5E5"> size and how much data they're</font>

146
00:05:26,820 --> 00:05:31,919
actually trying to write<font color="#CCCCCC"> for you so this</font>

147
00:05:28,800 --> 00:05:34,470
method using<font color="#E5E5E5"> this stream is going to be</font>

148
00:05:31,919 --> 00:05:36,659
delayed based on the actual time to

149
00:05:34,470 --> 00:05:39,330
detect from the first call from<font color="#E5E5E5"> the</font>

150
00:05:36,660 --> 00:05:41,310
attacker<font color="#E5E5E5"> if you don't familiar with</font>

151
00:05:39,330 --> 00:05:43,710
cloud trail there's a<font color="#E5E5E5"> couple fields that</font>

152
00:05:41,310 --> 00:05:47,190
I<font color="#E5E5E5"> want you to pay</font><font color="#CCCCCC"> attention to today</font><font color="#E5E5E5"> you</font>

153
00:05:43,710 --> 00:05:48,830
have the user identity field in our case

154
00:05:47,190 --> 00:05:51,360
we're gonna<font color="#E5E5E5"> be focusing on</font><font color="#CCCCCC"> the air in</font>

155
00:05:48,830 --> 00:05:53,520
<font color="#E5E5E5">event source a name or actually the</font>

156
00:05:51,360 --> 00:05:56,160
<font color="#E5E5E5">service and the API call that's being</font>

157
00:05:53,520 --> 00:05:59,070
<font color="#E5E5E5">made but the most important piece for us</font>

158
00:05:56,160 --> 00:06:00,930
today is source IP and that's what we're

159
00:05:59,070 --> 00:06:03,360
actually going to be<font color="#E5E5E5"> looking at as we do</font>

160
00:06:00,930 --> 00:06:04,710
this analysis and user agent<font color="#E5E5E5"> is also</font>

161
00:06:03,360 --> 00:06:08,900
something<font color="#E5E5E5"> that I'll touch a little later</font>

162
00:06:04,710 --> 00:06:11,130
on at<font color="#CCCCCC"> Netflix we have many</font><font color="#E5E5E5"> many accounts</font>

163
00:06:08,900 --> 00:06:13,169
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a common architecture</font><font color="#E5E5E5"> for</font>

164
00:06:11,130 --> 00:06:14,760
delivering cloud trail we<font color="#E5E5E5"> have every</font>

165
00:06:13,169 --> 00:06:16,500
account delivered to a single<font color="#E5E5E5"> bucket and</font>

166
00:06:14,760 --> 00:06:18,080
from<font color="#E5E5E5"> that point forward we can have a</font>

167
00:06:16,500 --> 00:06:19,909
notification topic

168
00:06:18,080 --> 00:06:22,340
off to many many subscribers whoever

169
00:06:19,909 --> 00:06:24,379
needs a process that data<font color="#CCCCCC"> so this is I</font>

170
00:06:22,340 --> 00:06:26,568
think<font color="#E5E5E5"> one of the best practices</font><font color="#CCCCCC"> from AWS</font>

171
00:06:24,379 --> 00:06:28,969
and something that<font color="#E5E5E5"> we recommend if you</font>

172
00:06:26,569 --> 00:06:30,500
<font color="#CCCCCC">want to centralize cloud trail</font><font color="#E5E5E5"> it</font>

173
00:06:28,969 --> 00:06:32,389
doesn't stop you<font color="#CCCCCC"> from having cloud trail</font>

174
00:06:30,500 --> 00:06:33,439
<font color="#CCCCCC">in each account and just</font><font color="#E5E5E5"> distributing</font>

175
00:06:32,389 --> 00:06:35,360
your orchestration<font color="#E5E5E5"> or your</font>

176
00:06:33,439 --> 00:06:37,069
infrastructure that's<font color="#E5E5E5"> monitoring it but</font>

177
00:06:35,360 --> 00:06:40,699
we<font color="#E5E5E5"> just choose to do it essentially for</font>

178
00:06:37,069 --> 00:06:43,159
us so we've I first tried<font color="#CCCCCC"> to tackle this</font>

179
00:06:40,699 --> 00:06:45,110
problem<font color="#CCCCCC"> a while back and I</font><font color="#E5E5E5"> went off to</font>

180
00:06:43,159 --> 00:06:48,139
<font color="#E5E5E5">try to define some requirements and</font>

181
00:06:45,110 --> 00:06:50,300
those<font color="#CCCCCC"> requirements were</font><font color="#E5E5E5"> I need to know</font>

182
00:06:48,139 --> 00:06:52,940
all<font color="#CCCCCC"> IPS in our environment</font><font color="#E5E5E5"> at all times</font>

183
00:06:50,300 --> 00:06:55,159
<font color="#E5E5E5">for the last hour at least that way when</font>

184
00:06:52,940 --> 00:06:59,840
I actually get the<font color="#E5E5E5"> collateral data I can</font>

185
00:06:55,159 --> 00:07:02,750
do this sliding<font color="#E5E5E5"> window kind of analysis</font>

186
00:06:59,840 --> 00:07:05,690
and ask the question did we have this IP

187
00:07:02,750 --> 00:07:08,539
for this event in<font color="#E5E5E5"> Quattro</font><font color="#CCCCCC"> if we did no</font>

188
00:07:05,690 --> 00:07:12,919
big deal we<font color="#CCCCCC"> continued on if we didn't</font>

189
00:07:08,539 --> 00:07:14,360
then it's something we might flag<font color="#CCCCCC"> right</font>

190
00:07:12,919 --> 00:07:15,740
it might<font color="#CCCCCC"> be a compromise it might just</font>

191
00:07:14,360 --> 00:07:17,539
<font color="#E5E5E5">be a misuse of credential from an</font>

192
00:07:15,740 --> 00:07:20,479
employee but something we should dig in

193
00:07:17,539 --> 00:07:22,009
deeper on<font color="#CCCCCC"> but as I mentioned there are</font>

194
00:07:20,479 --> 00:07:24,139
<font color="#CCCCCC">some problems you might run into</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> you</font>

195
00:07:22,009 --> 00:07:26,270
continue<font color="#E5E5E5"> to grow</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the cloud and with</font>

196
00:07:24,139 --> 00:07:28,490
AWS<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I'm sure that's the same with</font>

197
00:07:26,270 --> 00:07:30,710
<font color="#CCCCCC">GCP and others</font><font color="#E5E5E5"> there's patron ation in</font>

198
00:07:28,490 --> 00:07:33,349
the API calls<font color="#E5E5E5"> and then rate limiting</font>

199
00:07:30,710 --> 00:07:35,150
what I mean by patron ation is if you're

200
00:07:33,349 --> 00:07:37,240
<font color="#E5E5E5">just trying to describe your servers in</font>

201
00:07:35,150 --> 00:07:40,460
AWS<font color="#CCCCCC"> you'd make a call called</font><font color="#E5E5E5"> describe</font>

202
00:07:37,240 --> 00:07:42,379
instances AWS<font color="#CCCCCC"> isn't going to give you</font>

203
00:07:40,460 --> 00:07:43,789
<font color="#CCCCCC">all of</font><font color="#E5E5E5"> your servers back at once they're</font>

204
00:07:42,379 --> 00:07:45,469
going to give you a subset and then

205
00:07:43,789 --> 00:07:47,180
they're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> give you a page marker and</font>

206
00:07:45,469 --> 00:07:48,860
if you want to continue describing<font color="#CCCCCC"> your</font>

207
00:07:47,180 --> 00:07:50,719
environment you can't continue<font color="#CCCCCC"> sending</font>

208
00:07:48,860 --> 00:07:52,190
that marker on and the next<font color="#CCCCCC"> requests</font>

209
00:07:50,719 --> 00:07:55,400
will give you a new marker and so on so

210
00:07:52,190 --> 00:07:56,750
forth<font color="#CCCCCC"> for us</font><font color="#E5E5E5"> it can take up</font><font color="#CCCCCC"> to an hour</font>

211
00:07:55,400 --> 00:07:58,909
<font color="#CCCCCC">to describe</font><font color="#E5E5E5"> a production environment</font>

212
00:07:56,750 --> 00:08:00,860
<font color="#E5E5E5">just due to our size so if you think of</font>

213
00:07:58,909 --> 00:08:02,659
the requirements previous where<font color="#CCCCCC"> we were</font>

214
00:08:00,860 --> 00:08:04,849
<font color="#E5E5E5">trying to understand what IPS we had in</font>

215
00:08:02,659 --> 00:08:07,430
our environment for<font color="#E5E5E5"> the last hour it's</font>

216
00:08:04,849 --> 00:08:09,009
almost impossible<font color="#CCCCCC"> for how many</font><font color="#E5E5E5"> changes</font>

217
00:08:07,430 --> 00:08:11,120
<font color="#E5E5E5">we</font><font color="#CCCCCC"> have in our</font><font color="#E5E5E5"> environment</font><font color="#CCCCCC"> we</font>

218
00:08:09,009 --> 00:08:12,560
<font color="#CCCCCC">potentially miss a lot</font><font color="#E5E5E5"> of infrastructure</font>

219
00:08:11,120 --> 00:08:15,050
<font color="#CCCCCC">that we had for a brief period</font><font color="#E5E5E5"> of time</font>

220
00:08:12,560 --> 00:08:16,039
<font color="#E5E5E5">but was autumn scaled out or chaos</font><font color="#CCCCCC"> TIFF</font>

221
00:08:15,050 --> 00:08:18,620
everyone's familiar<font color="#E5E5E5"> with</font><font color="#CCCCCC"> our chaos</font>

222
00:08:16,039 --> 00:08:20,690
engineering practices but as we paginate

223
00:08:18,620 --> 00:08:22,430
through our calls with<font color="#CCCCCC"> Amazon</font><font color="#E5E5E5"> we</font>

224
00:08:20,690 --> 00:08:23,870
constantly run<font color="#E5E5E5"> into</font><font color="#CCCCCC"> rate-limiting and</font>

225
00:08:22,430 --> 00:08:26,360
this is a protection<font color="#CCCCCC"> Amazon puts in</font>

226
00:08:23,870 --> 00:08:28,459
place<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you don't just do a denial</font>

227
00:08:26,360 --> 00:08:30,620
service<font color="#E5E5E5"> on their service in point so it</font>

228
00:08:28,459 --> 00:08:33,000
makes sense<font color="#E5E5E5"> but we have to</font>

229
00:08:30,620 --> 00:08:35,310
think about these<font color="#E5E5E5"> problems when we're</font>

230
00:08:33,000 --> 00:08:38,190
doing<font color="#CCCCCC"> things at our scale</font><font color="#E5E5E5"> so I really</font>

231
00:08:35,309 --> 00:08:40,919
wanted to solve it<font color="#E5E5E5"> without having to</font><font color="#CCCCCC"> run</font>

232
00:08:38,190 --> 00:08:44,159
into these<font color="#E5E5E5"> issues so I</font><font color="#CCCCCC"> came up with a</font>

233
00:08:40,919 --> 00:08:46,620
new<font color="#CCCCCC"> approach</font><font color="#E5E5E5"> and it is based on two real</font>

234
00:08:44,159 --> 00:08:49,830
things<font color="#E5E5E5"> and that's using an understanding</font>

235
00:08:46,620 --> 00:08:51,870
of AWS and how it works<font color="#CCCCCC"> I can't stress</font>

236
00:08:49,830 --> 00:08:53,820
this enough<font color="#E5E5E5"> if you understand AWS and</font>

237
00:08:51,870 --> 00:08:56,029
what's logged in how<font color="#E5E5E5"> it's logged you're</font>

238
00:08:53,820 --> 00:08:58,680
going you<font color="#E5E5E5"> can go a far and a long way</font>

239
00:08:56,029 --> 00:09:01,410
but use AWS how it works to our

240
00:08:58,680 --> 00:09:03,479
advantage<font color="#E5E5E5"> and then make a strong but</font>

241
00:09:01,410 --> 00:09:06,149
reasonable assumption<font color="#E5E5E5"> and if we can do</font>

242
00:09:03,480 --> 00:09:09,110
those<font color="#CCCCCC"> two things and I say that we can</font>

243
00:09:06,149 --> 00:09:12,690
profit<font color="#E5E5E5"> and detect</font><font color="#CCCCCC"> critical compromise</font>

244
00:09:09,110 --> 00:09:16,230
and in this approach<font color="#CCCCCC"> I mentioned the</font>

245
00:09:12,690 --> 00:09:19,200
temporary credentials<font color="#E5E5E5"> at AWS provides on</font>

246
00:09:16,230 --> 00:09:21,420
a server<font color="#E5E5E5"> Amazon will create those</font>

247
00:09:19,200 --> 00:09:24,180
credentials that<font color="#E5E5E5"> are valid anywhere</font><font color="#CCCCCC"> to</font>

248
00:09:21,420 --> 00:09:26,279
<font color="#E5E5E5">one to six hours and they'll actually</font>

249
00:09:24,180 --> 00:09:27,870
rotate<font color="#E5E5E5"> those credentials for you</font><font color="#CCCCCC"> I'll</font>

250
00:09:26,279 --> 00:09:29,910
<font color="#E5E5E5">provide</font><font color="#CCCCCC"> them through a metadata service</font>

251
00:09:27,870 --> 00:09:32,070
<font color="#E5E5E5">with all to speak</font><font color="#CCCCCC"> about here shortly</font><font color="#E5E5E5"> but</font>

252
00:09:29,910 --> 00:09:34,980
<font color="#CCCCCC">because of this fact</font><font color="#E5E5E5"> that the</font>

253
00:09:32,070 --> 00:09:38,100
credentials<font color="#E5E5E5"> are short-lived and up to a</font>

254
00:09:34,980 --> 00:09:39,450
<font color="#CCCCCC">six-hour window</font><font color="#E5E5E5"> we can get full coverage</font>

255
00:09:38,100 --> 00:09:42,690
<font color="#E5E5E5">in our environment for the minute you</font>

256
00:09:39,450 --> 00:09:44,430
put this in place in up to<font color="#E5E5E5"> 6 hours it</font>

257
00:09:42,690 --> 00:09:46,020
can be much shorter<font color="#CCCCCC"> but depending on</font>

258
00:09:44,430 --> 00:09:48,359
when the last credential is issued in

259
00:09:46,020 --> 00:09:50,010
your<font color="#E5E5E5"> environment</font><font color="#CCCCCC"> it's up</font><font color="#E5E5E5"> to 6 hours so</font>

260
00:09:48,360 --> 00:09:50,370
from zero coverage<font color="#E5E5E5"> to full coverage in</font><font color="#CCCCCC"> 6</font>

261
00:09:50,010 --> 00:09:52,649
hours

262
00:09:50,370 --> 00:09:53,970
which i<font color="#E5E5E5"> think is pretty</font><font color="#CCCCCC"> cool and not</font>

263
00:09:52,649 --> 00:09:56,579
<font color="#E5E5E5">only in real time can you do this but</font>

264
00:09:53,970 --> 00:09:57,720
also<font color="#E5E5E5"> historically over old Platteville</font>

265
00:09:56,579 --> 00:10:00,239
data if you're<font color="#E5E5E5"> just interested in</font>

266
00:09:57,720 --> 00:10:02,339
understanding<font color="#CCCCCC"> have we had</font><font color="#E5E5E5"> a missed use</font>

267
00:10:00,240 --> 00:10:06,029
credential in the past<font color="#E5E5E5"> you can run this</font>

268
00:10:02,339 --> 00:10:08,850
over<font color="#E5E5E5"> past data as well so first how does</font>

269
00:10:06,029 --> 00:10:11,550
AWS work given<font color="#E5E5E5"> that you're deploying a</font>

270
00:10:08,850 --> 00:10:14,089
server in the cloud<font color="#CCCCCC"> there in the middle</font>

271
00:10:11,550 --> 00:10:16,560
<font color="#E5E5E5">there's multiple parts actually</font>

272
00:10:14,089 --> 00:10:20,040
interacting<font color="#CCCCCC"> together the Amazon ec2</font>

273
00:10:16,560 --> 00:10:22,589
service is<font color="#E5E5E5"> going to ask the I am service</font>

274
00:10:20,040 --> 00:10:23,969
for<font color="#E5E5E5"> credentials for your instance so</font>

275
00:10:22,589 --> 00:10:27,540
<font color="#CCCCCC">that your application can actually make</font>

276
00:10:23,970 --> 00:10:30,600
API calls<font color="#E5E5E5"> in AWS so it's going to do an</font>

277
00:10:27,540 --> 00:10:32,550
assumed<font color="#CCCCCC"> role call by the ec2 service the</font>

278
00:10:30,600 --> 00:10:35,190
<font color="#CCCCCC">iam service is then</font><font color="#E5E5E5"> going to pass</font>

279
00:10:32,550 --> 00:10:37,709
credentials back to the ec2 service

280
00:10:35,190 --> 00:10:39,870
which is then going<font color="#E5E5E5"> to pass those into</font>

281
00:10:37,709 --> 00:10:41,670
the metadata<font color="#E5E5E5"> service now the metadata</font>

282
00:10:39,870 --> 00:10:42,870
service is<font color="#E5E5E5"> something that's mounted into</font>

283
00:10:41,670 --> 00:10:45,270
<font color="#E5E5E5">your VM</font>

284
00:10:42,870 --> 00:10:49,020
and<font color="#E5E5E5"> available with a common</font><font color="#CCCCCC"> address of</font>

285
00:10:45,270 --> 00:10:50,699
169.254 169.254<font color="#CCCCCC"> now I believe that's</font>

286
00:10:49,020 --> 00:10:52,529
common across<font color="#E5E5E5"> the cloud providers and</font>

287
00:10:50,700 --> 00:10:54,540
something that<font color="#E5E5E5"> even the attackers know</font>

288
00:10:52,529 --> 00:10:56,010
and will cover<font color="#E5E5E5"> why that's important but</font>

289
00:10:54,540 --> 00:10:58,829
the metadata service has information

290
00:10:56,010 --> 00:11:01,170
<font color="#E5E5E5">about</font><font color="#CCCCCC"> your instance where what's the IP</font>

291
00:10:58,830 --> 00:11:03,270
what region<font color="#E5E5E5"> or availability zone is it</font>

292
00:11:01,170 --> 00:11:05,490
deployed<font color="#E5E5E5"> any type</font><font color="#CCCCCC"> of user data that</font>

293
00:11:03,270 --> 00:11:08,730
you're<font color="#E5E5E5"> injecting at launch</font><font color="#CCCCCC"> but most</font>

294
00:11:05,490 --> 00:11:10,020
importantly credentials<font color="#E5E5E5"> and so once the</font>

295
00:11:08,730 --> 00:11:11,670
metadata service has these credentials

296
00:11:10,020 --> 00:11:14,610
they're valid for<font color="#E5E5E5"> one to six hours</font>

297
00:11:11,670 --> 00:11:16,290
<font color="#E5E5E5">they'll automatically refreshed</font><font color="#CCCCCC"> but when</font>

298
00:11:14,610 --> 00:11:17,790
<font color="#E5E5E5">you're when</font><font color="#CCCCCC"> the application goes to use</font>

299
00:11:16,290 --> 00:11:20,610
them they'll reach out to the metadata

300
00:11:17,790 --> 00:11:23,400
<font color="#CCCCCC">service create a session or a</font><font color="#E5E5E5"> client</font>

301
00:11:20,610 --> 00:11:25,980
object<font color="#E5E5E5"> and then you can go make API</font>

302
00:11:23,400 --> 00:11:28,439
calls<font color="#E5E5E5"> to the service of</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> choice now</font>

303
00:11:25,980 --> 00:11:30,600
the way<font color="#CCCCCC"> that Quattro works is Quattro</font><font color="#E5E5E5"> is</font>

304
00:11:28,440 --> 00:11:32,910
<font color="#CCCCCC">a service within Amazon and services</font>

305
00:11:30,600 --> 00:11:35,100
have<font color="#CCCCCC"> the ability to</font><font color="#E5E5E5"> log what they want</font>

306
00:11:32,910 --> 00:11:36,329
or not<font color="#E5E5E5"> log what they want so cloud</font><font color="#CCCCCC"> troll</font>

307
00:11:35,100 --> 00:11:38,279
can't really control<font color="#E5E5E5"> it but they offer</font>

308
00:11:36,330 --> 00:11:39,720
it as a service<font color="#E5E5E5"> internally and so</font>

309
00:11:38,279 --> 00:11:42,000
depending<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the API call you're making</font>

310
00:11:39,720 --> 00:11:44,670
there might be an<font color="#E5E5E5"> ape cloud roll call</font>

311
00:11:42,000 --> 00:11:46,140
most<font color="#E5E5E5"> likely I'm mutating events or any</font>

312
00:11:44,670 --> 00:11:48,329
<font color="#CCCCCC">event that changes your environment</font>

313
00:11:46,140 --> 00:11:51,209
you'll see these<font color="#E5E5E5"> but there is a gap</font><font color="#CCCCCC"> in</font>

314
00:11:48,330 --> 00:11:54,420
data events which<font color="#E5E5E5"> we'll cover so that</font>

315
00:11:51,209 --> 00:11:57,839
<font color="#E5E5E5">strong assumption I mentioned is pretty</font>

316
00:11:54,420 --> 00:11:58,920
simple<font color="#E5E5E5"> it's basically first call wins so</font>

317
00:11:57,839 --> 00:12:01,320
we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> keep track</font><font color="#CCCCCC"> of when</font>

318
00:11:58,920 --> 00:12:03,150
Amazon's making session credentials

319
00:12:01,320 --> 00:12:05,040
<font color="#E5E5E5">we're</font><font color="#CCCCCC"> going to store</font><font color="#E5E5E5"> those in</font><font color="#CCCCCC"> a table</font>

320
00:12:03,150 --> 00:12:07,290
and<font color="#CCCCCC"> walk through an example here</font><font color="#E5E5E5"> and as</font>

321
00:12:05,040 --> 00:12:09,120
we see the first use of<font color="#CCCCCC"> that</font><font color="#E5E5E5"> temporary</font>

322
00:12:07,290 --> 00:12:11,969
credential<font color="#E5E5E5"> we're gonna grab that IP</font>

323
00:12:09,120 --> 00:12:13,709
address<font color="#CCCCCC"> and lock it</font><font color="#E5E5E5"> and that's going to</font>

324
00:12:11,970 --> 00:12:15,750
<font color="#E5E5E5">be the IP address that we hinge upon and</font>

325
00:12:13,709 --> 00:12:18,750
<font color="#E5E5E5">so without requiring any knowledge of</font>

326
00:12:15,750 --> 00:12:20,640
<font color="#E5E5E5">the IP space we can grow the session</font>

327
00:12:18,750 --> 00:12:23,100
table and understand what<font color="#E5E5E5"> ip's should we</font>

328
00:12:20,640 --> 00:12:27,900
<font color="#E5E5E5">actually see API calls</font><font color="#CCCCCC"> coming from and</font>

329
00:12:23,100 --> 00:12:29,040
from that alerting is pretty simple if

330
00:12:27,900 --> 00:12:31,529
you were to look through this diagram

331
00:12:29,040 --> 00:12:33,990
<font color="#E5E5E5">the pink boxes would show you the path</font>

332
00:12:31,529 --> 00:12:36,720
to detection so if you're processing

333
00:12:33,990 --> 00:12:37,980
<font color="#CCCCCC">quadrille you're going to get files and</font>

334
00:12:36,720 --> 00:12:40,589
you're going to process event after

335
00:12:37,980 --> 00:12:42,390
event<font color="#E5E5E5"> every file has up to thousands of</font>

336
00:12:40,589 --> 00:12:44,339
<font color="#CCCCCC">events in it</font><font color="#E5E5E5"> so you're</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> sort those</font>

337
00:12:42,390 --> 00:12:45,870
events<font color="#E5E5E5"> by time</font><font color="#CCCCCC"> you're going to go</font>

338
00:12:44,339 --> 00:12:46,980
through and<font color="#CCCCCC"> process each clot road</font>

339
00:12:45,870 --> 00:12:49,589
record

340
00:12:46,980 --> 00:12:52,170
<font color="#E5E5E5">then one by</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> we're gonna look for</font><font color="#CCCCCC"> the</font>

341
00:12:49,589 --> 00:12:54,180
assumed roll call by<font color="#E5E5E5"> ec2 and</font><font color="#CCCCCC"> we'll show</font>

342
00:12:52,170 --> 00:12:56,790
actual<font color="#CCCCCC"> cloud</font><font color="#E5E5E5"> row examples here shortly</font>

343
00:12:54,180 --> 00:12:58,410
<font color="#CCCCCC">as we see that we're gonna look into</font><font color="#E5E5E5"> our</font>

344
00:12:56,790 --> 00:13:00,689
<font color="#CCCCCC">table and</font><font color="#E5E5E5"> say do we</font><font color="#CCCCCC"> have a record</font><font color="#E5E5E5"> of</font>

345
00:12:58,410 --> 00:13:03,360
<font color="#E5E5E5">this already</font><font color="#CCCCCC"> if not then we're gonna go</font>

346
00:13:00,690 --> 00:13:05,610
at it<font color="#CCCCCC"> we're gonna add a TTL for six</font>

347
00:13:03,360 --> 00:13:06,990
hours<font color="#E5E5E5"> and that TTL is really just going</font>

348
00:13:05,610 --> 00:13:10,680
<font color="#E5E5E5">to allow</font><font color="#CCCCCC"> us to clean</font><font color="#E5E5E5"> the table up</font>

349
00:13:06,990 --> 00:13:13,560
automatically<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the DynamoDB fashion if</font>

350
00:13:10,680 --> 00:13:15,689
it's already<font color="#E5E5E5"> in the table then we</font><font color="#CCCCCC"> know</font>

351
00:13:13,560 --> 00:13:17,369
that<font color="#E5E5E5"> that instance is still up that role</font>

352
00:13:15,690 --> 00:13:20,130
<font color="#E5E5E5">is still</font><font color="#CCCCCC"> being used</font><font color="#E5E5E5"> and we're just going</font>

353
00:13:17,370 --> 00:13:22,470
<font color="#CCCCCC">to</font><font color="#E5E5E5"> refresh the TTL so you can</font>

354
00:13:20,130 --> 00:13:24,089
continually update if you look at the

355
00:13:22,470 --> 00:13:26,130
<font color="#E5E5E5">table after</font><font color="#CCCCCC"> the six hour window you</font>

356
00:13:24,089 --> 00:13:29,040
would know every session credential

357
00:13:26,130 --> 00:13:31,170
issued for<font color="#E5E5E5"> your environment</font><font color="#CCCCCC"> so once we</font>

358
00:13:29,040 --> 00:13:33,750
have a table built we're then going to

359
00:13:31,170 --> 00:13:35,130
<font color="#E5E5E5">look for the assumed role session tokens</font>

360
00:13:33,750 --> 00:13:37,170
being used and you can<font color="#E5E5E5"> do that by</font>

361
00:13:35,130 --> 00:13:40,500
<font color="#CCCCCC">looking at</font><font color="#E5E5E5"> the type of the call or the</font>

362
00:13:37,170 --> 00:13:43,079
type of the identity in<font color="#CCCCCC"> clout row if</font>

363
00:13:40,500 --> 00:13:44,940
it's intercession<font color="#CCCCCC"> the table we're</font><font color="#E5E5E5"> going</font>

364
00:13:43,079 --> 00:13:46,229
<font color="#E5E5E5">to continue on if it's not in our</font>

365
00:13:44,940 --> 00:13:48,649
session table we can't make that

366
00:13:46,230 --> 00:13:51,060
<font color="#E5E5E5">accurate guess or that accurate</font>

367
00:13:48,649 --> 00:13:52,800
assertion that<font color="#E5E5E5"> this is a potentially</font>

368
00:13:51,060 --> 00:13:55,349
<font color="#E5E5E5">misuse credential so we're just going</font><font color="#CCCCCC"> to</font>

369
00:13:52,800 --> 00:13:57,660
throw<font color="#CCCCCC"> that data away you can opt</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> to</font>

370
00:13:55,350 --> 00:13:59,730
saying first<font color="#E5E5E5"> first time on any session</font>

371
00:13:57,660 --> 00:14:01,319
we're gonna walk to that<font color="#E5E5E5"> but we've</font>

372
00:13:59,730 --> 00:14:03,209
chosen on this initial implementation to

373
00:14:01,319 --> 00:14:05,040
at<font color="#E5E5E5"> least throw it away</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> gonna get</font>

374
00:14:03,209 --> 00:14:08,339
<font color="#E5E5E5">coverage within six hours so it's not</font>

375
00:14:05,040 --> 00:14:09,870
really that<font color="#E5E5E5"> big of</font><font color="#CCCCCC"> a deal so once you're</font>

376
00:14:08,339 --> 00:14:12,269
in<font color="#E5E5E5"> the session table or once it's in the</font>

377
00:14:09,870 --> 00:14:14,190
session table you can then go look is it

378
00:14:12,269 --> 00:14:16,199
<font color="#E5E5E5">AWS making a call on</font><font color="#CCCCCC"> your behalf</font><font color="#E5E5E5"> which</font>

379
00:14:14,190 --> 00:14:19,350
will go<font color="#E5E5E5"> into edge cases here and shortly</font>

380
00:14:16,199 --> 00:14:21,540
or is it an IP that we whitelist<font color="#CCCCCC"> maybe</font>

381
00:14:19,350 --> 00:14:24,839
we allow users to pool credentials down

382
00:14:21,540 --> 00:14:26,550
for the VPN<font color="#CCCCCC"> if not then we're gonna go</font>

383
00:14:24,839 --> 00:14:29,399
look and say do<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> the source IP in</font>

384
00:14:26,550 --> 00:14:32,399
our table<font color="#CCCCCC"> already if we do do they match</font>

385
00:14:29,399 --> 00:14:34,889
if they match then we continue on if

386
00:14:32,399 --> 00:14:36,240
they don't then we alert<font color="#E5E5E5"> and if we</font>

387
00:14:34,889 --> 00:14:37,440
didn't have<font color="#E5E5E5"> a source IP in</font><font color="#CCCCCC"> the table</font>

388
00:14:36,240 --> 00:14:39,029
then that's when we'd add it to the

389
00:14:37,440 --> 00:14:42,870
session so it's basically<font color="#E5E5E5"> you're doing</font>

390
00:14:39,029 --> 00:14:45,240
<font color="#CCCCCC">this kind of flow each event</font><font color="#E5E5E5"> and you</font>

391
00:14:42,870 --> 00:14:47,100
<font color="#E5E5E5">eventually</font><font color="#CCCCCC"> make this</font><font color="#E5E5E5"> table</font><font color="#CCCCCC"> that lists</font>

392
00:14:45,240 --> 00:14:49,019
<font color="#E5E5E5">every temporary credential in your</font>

393
00:14:47,100 --> 00:14:52,500
environment<font color="#CCCCCC"> and</font><font color="#E5E5E5"> what IP they should be</font>

394
00:14:49,019 --> 00:14:54,389
coming<font color="#E5E5E5"> from</font><font color="#CCCCCC"> I mentioned a simple</font>

395
00:14:52,500 --> 00:14:55,709
architecture diagram<font color="#E5E5E5"> I debated whether I</font>

396
00:14:54,389 --> 00:14:57,029
should<font color="#CCCCCC"> actually throw this slide</font><font color="#E5E5E5"> out</font>

397
00:14:55,709 --> 00:14:57,569
because it's the first<font color="#E5E5E5"> time</font><font color="#CCCCCC"> I've ever</font>

398
00:14:57,029 --> 00:15:00,360
<font color="#E5E5E5">done</font>

399
00:14:57,570 --> 00:15:02,250
a diagram<font color="#CCCCCC"> that</font><font color="#E5E5E5"> was a single line</font><font color="#CCCCCC"> if</font>

400
00:15:00,360 --> 00:15:03,960
you've done<font color="#E5E5E5"> this like or done this many</font>

401
00:15:02,250 --> 00:15:05,810
<font color="#E5E5E5">times</font><font color="#CCCCCC"> please let me know because I need</font>

402
00:15:03,960 --> 00:15:08,280
<font color="#E5E5E5">some pointers first time this happened</font>

403
00:15:05,810 --> 00:15:11,189
so we can<font color="#E5E5E5"> start with a table like</font><font color="#CCCCCC"> this</font>

404
00:15:08,280 --> 00:15:13,620
we have an identifier<font color="#E5E5E5"> a source IP the</font>

405
00:15:11,190 --> 00:15:16,110
air in that we're actually interested<font color="#E5E5E5"> in</font>

406
00:15:13,620 --> 00:15:19,020
<font color="#E5E5E5">and then our TTL value</font><font color="#CCCCCC"> as we analyze</font>

407
00:15:16,110 --> 00:15:21,180
<font color="#E5E5E5">cloud trail we're looking for that</font>

408
00:15:19,020 --> 00:15:23,130
initial<font color="#CCCCCC"> assumed</font><font color="#E5E5E5"> roll call which is from</font>

409
00:15:21,180 --> 00:15:25,739
the event name<font color="#CCCCCC"> and the</font><font color="#E5E5E5"> pieces that tip</font>

410
00:15:23,130 --> 00:15:27,090
tip us off<font color="#E5E5E5"> of that is source IP</font><font color="#CCCCCC"> address</font>

411
00:15:25,740 --> 00:15:30,090
is<font color="#CCCCCC"> actually going to be registered</font><font color="#E5E5E5"> as</font>

412
00:15:27,090 --> 00:15:32,520
<font color="#CCCCCC">the service ec2</font><font color="#E5E5E5"> and user agent will</font><font color="#CCCCCC"> be</font>

413
00:15:30,090 --> 00:15:34,920
the same and as well as user identity is

414
00:15:32,520 --> 00:15:37,319
a to be<font color="#CCCCCC"> a service invoked by ec2</font><font color="#E5E5E5"> Amazon</font>

415
00:15:34,920 --> 00:15:40,709
<font color="#CCCCCC">so once we see that we can</font><font color="#E5E5E5"> actually go</font>

416
00:15:37,320 --> 00:15:42,690
<font color="#CCCCCC">into request parameters which Amazon ec2</font>

417
00:15:40,710 --> 00:15:44,370
<font color="#E5E5E5">service is very nice that when they</font>

418
00:15:42,690 --> 00:15:46,320
<font color="#CCCCCC">actually create the temporary session</font>

419
00:15:44,370 --> 00:15:48,660
they're<font color="#E5E5E5"> gonna create it with an instance</font>

420
00:15:46,320 --> 00:15:50,400
ID so you can track the temporary

421
00:15:48,660 --> 00:15:52,380
credential down to the instance level

422
00:15:50,400 --> 00:15:54,900
<font color="#CCCCCC">and know exactly</font><font color="#E5E5E5"> what instance is</font>

423
00:15:52,380 --> 00:15:56,610
compromised<font color="#E5E5E5"> from here we can see</font><font color="#CCCCCC"> that</font>

424
00:15:54,900 --> 00:15:58,350
the role that they're assuming<font color="#CCCCCC"> is my</font>

425
00:15:56,610 --> 00:16:00,660
cool role and<font color="#E5E5E5"> that's what we're</font><font color="#CCCCCC"> gonna</font>

426
00:15:58,350 --> 00:16:02,220
track on so if we took this entry<font color="#CCCCCC"> and</font>

427
00:16:00,660 --> 00:16:04,050
actually went to populate a table<font color="#CCCCCC"> it</font>

428
00:16:02,220 --> 00:16:06,600
might end up looking<font color="#CCCCCC"> something like this</font>

429
00:16:04,050 --> 00:16:08,760
<font color="#E5E5E5">we leave that source IP blank initially</font>

430
00:16:06,600 --> 00:16:10,620
until we actually see<font color="#E5E5E5"> the first call you</font>

431
00:16:08,760 --> 00:16:13,020
continue to process<font color="#E5E5E5"> more events more</font>

432
00:16:10,620 --> 00:16:14,400
events you'll come<font color="#CCCCCC"> across more assume</font>

433
00:16:13,020 --> 00:16:16,470
roles you'll come<font color="#CCCCCC"> across things</font><font color="#E5E5E5"> that you</font>

434
00:16:14,400 --> 00:16:19,079
who don't have<font color="#CCCCCC"> your table</font><font color="#E5E5E5"> but once you</font>

435
00:16:16,470 --> 00:16:21,660
<font color="#E5E5E5">come across something that you know you</font>

436
00:16:19,080 --> 00:16:23,970
can see<font color="#E5E5E5"> that it's a type assumed role so</font>

437
00:16:21,660 --> 00:16:26,699
we<font color="#CCCCCC"> know it's</font><font color="#E5E5E5"> something we care about the</font>

438
00:16:23,970 --> 00:16:29,220
air in is assumed rule my cool<font color="#CCCCCC"> rule and</font>

439
00:16:26,700 --> 00:16:30,780
we can see<font color="#E5E5E5"> that the session identifier</font>

440
00:16:29,220 --> 00:16:34,230
which is<font color="#E5E5E5"> everything after the</font><font color="#CCCCCC"> roll</font><font color="#E5E5E5"> name</font>

441
00:16:30,780 --> 00:16:36,180
so anything following<font color="#E5E5E5"> the final slash</font>

442
00:16:34,230 --> 00:16:38,490
and then assumed<font color="#E5E5E5"> role air in is your</font>

443
00:16:36,180 --> 00:16:41,579
session<font color="#E5E5E5"> name we can see that it's marked</font>

444
00:16:38,490 --> 00:16:43,560
to an instance ID so<font color="#E5E5E5"> we know it's</font>

445
00:16:41,580 --> 00:16:45,000
probably<font color="#E5E5E5"> something we might have or it's</font>

446
00:16:43,560 --> 00:16:46,920
something<font color="#E5E5E5"> that we're throwing away and</font>

447
00:16:45,000 --> 00:16:48,510
we'll have at some<font color="#E5E5E5"> point if we're</font>

448
00:16:46,920 --> 00:16:50,069
interested we<font color="#E5E5E5"> can go down and see what</font>

449
00:16:48,510 --> 00:16:51,780
was actually<font color="#E5E5E5"> called so in this case</font>

450
00:16:50,070 --> 00:16:55,020
someone<font color="#E5E5E5"> was describing instances in the</font>

451
00:16:51,780 --> 00:16:56,910
environment in<font color="#E5E5E5"> the region</font><font color="#CCCCCC"> uswest to the</font>

452
00:16:55,020 --> 00:17:01,650
most important piece for<font color="#E5E5E5"> us of course is</font>

453
00:16:56,910 --> 00:17:03,420
the source IP<font color="#E5E5E5"> 52.95</font><font color="#CCCCCC"> - 5.1 - long if</font>

454
00:17:01,650 --> 00:17:05,970
you're familiar with the<font color="#CCCCCC"> amazon IP space</font>

455
00:17:03,420 --> 00:17:08,359
<font color="#E5E5E5">you know that's an amazon IP so we can</font>

456
00:17:05,970 --> 00:17:10,819
actually go<font color="#CCCCCC"> in and add it to our table</font>

457
00:17:08,359 --> 00:17:12,948
so now we have<font color="#E5E5E5"> our initial session and</font>

458
00:17:10,819 --> 00:17:14,750
IP locked so if we come<font color="#CCCCCC"> across this</font>

459
00:17:12,949 --> 00:17:16,819
again we can do the analysis and<font color="#CCCCCC"> say</font>

460
00:17:14,750 --> 00:17:19,039
does this match or does it not so if we

461
00:17:16,819 --> 00:17:20,928
continue processing<font color="#CCCCCC"> Claude</font><font color="#E5E5E5"> trail we can</font>

462
00:17:19,039 --> 00:17:24,740
see once again<font color="#E5E5E5"> we have a type assumed</font>

463
00:17:20,929 --> 00:17:26,449
<font color="#E5E5E5">rule it's the</font><font color="#CCCCCC"> air in to the temporary</font>

464
00:17:24,740 --> 00:17:27,799
credential from<font color="#E5E5E5"> my cool</font><font color="#CCCCCC"> role and the</font>

465
00:17:26,449 --> 00:17:31,370
session looks like something<font color="#CCCCCC"> that we</font>

466
00:17:27,799 --> 00:17:32,779
just<font color="#CCCCCC"> saw</font><font color="#E5E5E5"> if we're interested once again</font>

467
00:17:31,370 --> 00:17:34,699
we<font color="#E5E5E5"> can</font><font color="#CCCCCC"> actually look and see</font><font color="#E5E5E5"> what the</font>

468
00:17:32,779 --> 00:17:37,010
event name<font color="#CCCCCC"> are sources this might not be</font>

469
00:17:34,700 --> 00:17:39,110
interesting until you trigger an alert

470
00:17:37,010 --> 00:17:41,510
<font color="#CCCCCC">but something</font><font color="#E5E5E5"> you might still</font><font color="#CCCCCC"> want to</font><font color="#E5E5E5"> do</font>

471
00:17:39,110 --> 00:17:43,209
alerts for<font color="#E5E5E5"> there are dangerous calls but</font>

472
00:17:41,510 --> 00:17:46,100
that's outside<font color="#CCCCCC"> the scope at this time</font>

473
00:17:43,210 --> 00:17:50,240
but most importantly is the source IP

474
00:17:46,100 --> 00:17:52,129
<font color="#E5E5E5">address 52.95 dot 255 dot</font><font color="#CCCCCC"> one-to-one so</font>

475
00:17:50,240 --> 00:17:55,279
<font color="#E5E5E5">we go</font><font color="#CCCCCC"> back</font><font color="#E5E5E5"> we see that we</font><font color="#CCCCCC"> have the</font>

476
00:17:52,130 --> 00:17:57,169
<font color="#E5E5E5">session our hash key and</font><font color="#CCCCCC"> a dynamo table</font>

477
00:17:55,279 --> 00:17:59,690
scenario is the instance ID

478
00:17:57,169 --> 00:18:01,700
<font color="#CCCCCC">it's unique globally so don't worry</font>

479
00:17:59,690 --> 00:18:04,580
<font color="#CCCCCC">about collisions</font><font color="#E5E5E5"> across your accounts</font>

480
00:18:01,700 --> 00:18:07,039
but we can ask that<font color="#E5E5E5"> question does do</font>

481
00:18:04,580 --> 00:18:09,439
these two IPS match in our case they do

482
00:18:07,039 --> 00:18:11,360
<font color="#E5E5E5">so we can say this is good continue</font>

483
00:18:09,440 --> 00:18:13,190
moving on so you do this<font color="#CCCCCC"> process over</font>

484
00:18:11,360 --> 00:18:16,370
<font color="#E5E5E5">and over</font><font color="#CCCCCC"> and over and eventually you</font>

485
00:18:13,190 --> 00:18:18,289
might come<font color="#CCCCCC"> across something that</font><font color="#E5E5E5"> should</font>

486
00:18:16,370 --> 00:18:21,080
look<font color="#E5E5E5"> familiar by now it's my cool</font><font color="#CCCCCC"> role</font>

487
00:18:18,289 --> 00:18:23,539
<font color="#E5E5E5">the instance ID that we're used to the</font>

488
00:18:21,080 --> 00:18:26,269
event name<font color="#E5E5E5"> is</font><font color="#CCCCCC"> get caller identity which</font>

489
00:18:23,539 --> 00:18:28,399
<font color="#CCCCCC">is probably suspicious in itself if you</font>

490
00:18:26,269 --> 00:18:30,440
<font color="#CCCCCC">aren't familiar with AWS yet color</font>

491
00:18:28,399 --> 00:18:32,629
identity is similar to<font color="#E5E5E5"> Who am I on a</font>

492
00:18:30,440 --> 00:18:34,700
<font color="#E5E5E5">Linux machine</font><font color="#CCCCCC"> there's no real good</font>

493
00:18:32,630 --> 00:18:37,159
reason<font color="#E5E5E5"> to call this in your account</font><font color="#CCCCCC"> if</font>

494
00:18:34,700 --> 00:18:38,539
you see this it's probably<font color="#E5E5E5"> someone</font>

495
00:18:37,159 --> 00:18:40,700
wanting to know what account they're in

496
00:18:38,539 --> 00:18:42,860
<font color="#E5E5E5">because you can pull the account ID from</font>

497
00:18:40,700 --> 00:18:44,360
but there's other ways to<font color="#CCCCCC"> get</font><font color="#E5E5E5"> that</font>

498
00:18:42,860 --> 00:18:45,799
account<font color="#E5E5E5"> information so I urge you</font><font color="#CCCCCC"> to</font>

499
00:18:44,360 --> 00:18:47,330
work<font color="#CCCCCC"> with the teams to change their</font>

500
00:18:45,799 --> 00:18:48,830
their way<font color="#CCCCCC"> of life</font><font color="#E5E5E5"> because this is</font>

501
00:18:47,330 --> 00:18:50,960
<font color="#E5E5E5">something common that an attacker</font><font color="#CCCCCC"> might</font>

502
00:18:48,830 --> 00:18:53,059
do when they come across credentials is

503
00:18:50,960 --> 00:18:55,370
Who am I is this juicy should I use it

504
00:18:53,059 --> 00:18:57,379
<font color="#CCCCCC">in this call works regardless</font><font color="#E5E5E5"> of</font>

505
00:18:55,370 --> 00:19:01,189
permissions in AWS so as<font color="#E5E5E5"> long</font><font color="#CCCCCC"> as the key</font>

506
00:18:57,380 --> 00:19:02,630
is valid<font color="#E5E5E5"> this call will work but once</font>

507
00:19:01,190 --> 00:19:05,779
again<font color="#CCCCCC"> our source IP is what we</font><font color="#E5E5E5"> really</font>

508
00:19:02,630 --> 00:19:09,590
care<font color="#E5E5E5"> about and in this case it's</font><font color="#CCCCCC"> 67.1 7</font>

509
00:19:05,779 --> 00:19:11,000
<font color="#E5E5E5">8.5</font><font color="#CCCCCC"> 2.2 3 - this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a San Jose IP</font><font color="#E5E5E5"> it's</font>

510
00:19:09,590 --> 00:19:14,510
most<font color="#CCCCCC"> likely my house for</font><font color="#E5E5E5"> this</font>

511
00:19:11,000 --> 00:19:16,779
demonstration<font color="#CCCCCC"> and this is another</font>

512
00:19:14,510 --> 00:19:19,158
question<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> asked does this match</font>

513
00:19:16,779 --> 00:19:20,310
<font color="#E5E5E5">so in this case we know these two</font><font color="#CCCCCC"> IPS</font>

514
00:19:19,159 --> 00:19:21,890
don't match<font color="#E5E5E5"> so</font>

515
00:19:20,310 --> 00:19:24,120
this would trigger an alert of

516
00:19:21,890 --> 00:19:27,180
potentially compromised credential<font color="#CCCCCC"> a</font>

517
00:19:24,120 --> 00:19:28,979
employee or engineer has<font color="#CCCCCC"> put</font><font color="#E5E5E5"> pencils</font>

518
00:19:27,180 --> 00:19:29,460
down they<font color="#CCCCCC"> used it off VPN if it's a</font>

519
00:19:28,980 --> 00:19:31,920
<font color="#CCCCCC">whitelist</font>

520
00:19:29,460 --> 00:19:34,220
but we at least<font color="#E5E5E5"> know here that</font><font color="#CCCCCC"> a</font>

521
00:19:31,920 --> 00:19:36,690
credential is not being used inside your

522
00:19:34,220 --> 00:19:39,570
environment<font color="#CCCCCC"> so this could be</font><font color="#E5E5E5"> from a</font>

523
00:19:36,690 --> 00:19:41,820
different AWS environment that's<font color="#E5E5E5"> not</font>

524
00:19:39,570 --> 00:19:43,350
registered<font color="#E5E5E5"> in</font><font color="#CCCCCC"> your account</font><font color="#E5E5E5"> and you would</font>

525
00:19:41,820 --> 00:19:46,139
alert on it<font color="#E5E5E5"> so I think that's pretty</font>

526
00:19:43,350 --> 00:19:49,560
powerful<font color="#CCCCCC"> I mentioned a few edge cases</font><font color="#E5E5E5"> as</font>

527
00:19:46,140 --> 00:19:51,990
you<font color="#CCCCCC"> can continue</font><font color="#E5E5E5"> to monitor cloud</font><font color="#CCCCCC"> show</font>

528
00:19:49,560 --> 00:19:54,720
<font color="#E5E5E5">you'll find that</font><font color="#CCCCCC"> anytime</font><font color="#E5E5E5"> Amazon does</font>

529
00:19:51,990 --> 00:19:56,940
something on<font color="#E5E5E5"> your behalf you're gonna</font>

530
00:19:54,720 --> 00:20:00,540
see the source IP show up as a service

531
00:19:56,940 --> 00:20:02,130
<font color="#E5E5E5">name dot Amazon AWS com this is weather</font>

532
00:20:00,540 --> 00:20:03,990
support is looking into<font color="#CCCCCC"> your</font><font color="#E5E5E5"> account for</font>

533
00:20:02,130 --> 00:20:06,150
a ticket<font color="#E5E5E5"> auto scaling group is auto</font>

534
00:20:03,990 --> 00:20:08,370
scaling your service<font color="#E5E5E5"> or there's actually</font>

535
00:20:06,150 --> 00:20:10,320
<font color="#E5E5E5">many calls that you</font><font color="#CCCCCC"> make that</font><font color="#E5E5E5"> Amazon</font>

536
00:20:08,370 --> 00:20:11,909
takes your credentials<font color="#E5E5E5"> and make some</font>

537
00:20:10,320 --> 00:20:14,129
calls<font color="#E5E5E5"> on your behalf to make your life</font>

538
00:20:11,910 --> 00:20:16,350
easier if you're restoring<font color="#E5E5E5"> an encrypted</font>

539
00:20:14,130 --> 00:20:18,750
database for an example<font color="#E5E5E5"> Amazon will go</font>

540
00:20:16,350 --> 00:20:20,100
make<font color="#E5E5E5"> kms calls on your behalf so</font><font color="#CCCCCC"> they'll</font>

541
00:20:18,750 --> 00:20:21,450
<font color="#E5E5E5">take your credentials and use them and</font>

542
00:20:20,100 --> 00:20:24,959
you'll see that show up<font color="#E5E5E5"> in cloud trail</font>

543
00:20:21,450 --> 00:20:27,060
as an<font color="#CCCCCC"> Amazon source</font><font color="#E5E5E5"> if you're using VP</font>

544
00:20:24,960 --> 00:20:29,940
<font color="#E5E5E5">CN points such as the s3 end point and</font>

545
00:20:27,060 --> 00:20:32,190
<font color="#E5E5E5">you have Clodfelter and on for s3 you</font>

546
00:20:29,940 --> 00:20:34,860
<font color="#E5E5E5">will actually see the calls through that</font>

547
00:20:32,190 --> 00:20:36,750
<font color="#CCCCCC">end point show up as a private</font><font color="#E5E5E5"> IP so you</font>

548
00:20:34,860 --> 00:20:39,090
need to have some<font color="#CCCCCC"> logic for first public</font>

549
00:20:36,750 --> 00:20:41,190
for private IP pair and that private<font color="#E5E5E5"> IP</font>

550
00:20:39,090 --> 00:20:44,370
ending up in the IP space for<font color="#E5E5E5"> that</font>

551
00:20:41,190 --> 00:20:46,260
<font color="#E5E5E5">environment and also you might have a</font>

552
00:20:44,370 --> 00:20:48,719
scenario where<font color="#CCCCCC"> you</font><font color="#E5E5E5"> launch an instance</font>

553
00:20:46,260 --> 00:20:50,520
<font color="#E5E5E5">and you want to attach an elastic IP</font>

554
00:20:48,720 --> 00:20:52,290
because<font color="#CCCCCC"> your public and</font><font color="#E5E5E5"> you want the IP</font>

555
00:20:50,520 --> 00:20:54,930
to<font color="#E5E5E5"> always be the same or you attach</font>

556
00:20:52,290 --> 00:20:56,610
multiple<font color="#CCCCCC"> ionize it with that</font><font color="#E5E5E5"> case you</font>

557
00:20:54,930 --> 00:20:59,010
might<font color="#CCCCCC"> have a change</font><font color="#E5E5E5"> in the IP that your</font>

558
00:20:56,610 --> 00:21:02,040
calls coming<font color="#E5E5E5"> from so we recommend</font>

559
00:20:59,010 --> 00:21:05,010
<font color="#E5E5E5">looking for those calls</font><font color="#CCCCCC"> and then putting</font>

560
00:21:02,040 --> 00:21:07,290
<font color="#E5E5E5">into a temporary table and say we can we</font>

561
00:21:05,010 --> 00:21:09,420
solve<font color="#E5E5E5"> a try to attach a new IP will</font>

562
00:21:07,290 --> 00:21:11,610
accept one deviation from this<font color="#E5E5E5"> list but</font>

563
00:21:09,420 --> 00:21:13,020
<font color="#CCCCCC">only for this amount</font><font color="#E5E5E5"> of time because if</font>

564
00:21:11,610 --> 00:21:15,959
you're attaching<font color="#E5E5E5"> a new IP you should see</font>

565
00:21:13,020 --> 00:21:18,060
calls from<font color="#E5E5E5"> that</font><font color="#CCCCCC"> new IP within</font><font color="#E5E5E5"> minutes so</font>

566
00:21:15,960 --> 00:21:21,330
you can set that<font color="#E5E5E5"> TTL on that table very</font>

567
00:21:18,060 --> 00:21:22,980
short and<font color="#E5E5E5"> minimize that</font><font color="#CCCCCC"> risk</font><font color="#E5E5E5"> that in</font>

568
00:21:21,330 --> 00:21:25,730
that time frame<font color="#CCCCCC"> an attacker were to</font>

569
00:21:22,980 --> 00:21:27,950
<font color="#E5E5E5">actually get your credentials</font>

570
00:21:25,730 --> 00:21:29,330
if you were to avoid detection one of

571
00:21:27,950 --> 00:21:30,890
the<font color="#E5E5E5"> most common ways credentials are</font>

572
00:21:29,330 --> 00:21:32,928
pulled from environments is through

573
00:21:30,890 --> 00:21:33,950
<font color="#E5E5E5">server side request forgery this is</font>

574
00:21:32,929 --> 00:21:35,929
where you've actually tricked the

575
00:21:33,950 --> 00:21:37,220
application to pull<font color="#E5E5E5"> the instance</font>

576
00:21:35,929 --> 00:21:40,519
metadata yourself

577
00:21:37,220 --> 00:21:42,380
it's very common tactic for applications

578
00:21:40,519 --> 00:21:44,960
and<font color="#E5E5E5"> researchers if they know you're</font>

579
00:21:42,380 --> 00:21:46,549
<font color="#CCCCCC">running in AWS</font><font color="#E5E5E5"> most likely it's a</font>

580
00:21:44,960 --> 00:21:49,279
critical vulnerability to the<font color="#CCCCCC"> bug bounty</font>

581
00:21:46,549 --> 00:21:50,629
that you're submitting<font color="#E5E5E5"> to what</font>

582
00:21:49,279 --> 00:21:51,860
researchers don't know<font color="#E5E5E5"> is that they</font>

583
00:21:50,630 --> 00:21:54,769
<font color="#CCCCCC">could actually use</font><font color="#E5E5E5"> those</font><font color="#CCCCCC"> credentials</font>

584
00:21:51,860 --> 00:21:57,439
<font color="#E5E5E5">sign an API call</font><font color="#CCCCCC"> and use</font><font color="#E5E5E5"> that same</font>

585
00:21:54,769 --> 00:21:59,480
attack vector through<font color="#CCCCCC"> SS RF to make that</font>

586
00:21:57,440 --> 00:22:02,149
call<font color="#CCCCCC"> in that case it</font><font color="#E5E5E5"> would actually come</font>

587
00:21:59,480 --> 00:22:04,100
from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> IP of the server</font><font color="#E5E5E5"> and you</font>

588
00:22:02,149 --> 00:22:05,959
<font color="#E5E5E5">wouldn't be able to</font><font color="#CCCCCC"> detect it so in that</font>

589
00:22:04,100 --> 00:22:07,639
scenario you'd use<font color="#E5E5E5"> a user agent and make</font>

590
00:22:05,960 --> 00:22:10,850
sure that it's<font color="#E5E5E5"> something that Amazon</font><font color="#CCCCCC"> COI</font>

591
00:22:07,639 --> 00:22:12,740
or<font color="#CCCCCC"> STK would use if</font><font color="#E5E5E5"> you have an attacker</font>

592
00:22:10,850 --> 00:22:14,090
<font color="#E5E5E5">on the box obviously you have other</font>

593
00:22:12,740 --> 00:22:15,440
<font color="#CCCCCC">problems that you're probably not going</font>

594
00:22:14,090 --> 00:22:17,658
to detect<font color="#E5E5E5"> compromised unless you're</font>

595
00:22:15,440 --> 00:22:18,860
looking<font color="#CCCCCC"> at call anomalies</font><font color="#E5E5E5"> saying we've</font>

596
00:22:17,659 --> 00:22:21,649
never actually made<font color="#E5E5E5"> that call</font><font color="#CCCCCC"> before</font>

597
00:22:18,860 --> 00:22:23,059
from the service so quickly wrapping up

598
00:22:21,649 --> 00:22:25,850
<font color="#E5E5E5">I've got two minutes and I'm happy to</font>

599
00:22:23,059 --> 00:22:29,230
<font color="#E5E5E5">take questions</font><font color="#CCCCCC"> in the</font><font color="#E5E5E5"> wrap-up</font><font color="#CCCCCC"> room</font><font color="#E5E5E5"> which</font>

600
00:22:25,850 --> 00:22:31,428
I think it's specific<font color="#CCCCCC"> be but</font>

601
00:22:29,230 --> 00:22:32,990
understanding AWS and<font color="#CCCCCC"> Quattro will make</font>

602
00:22:31,429 --> 00:22:35,480
your<font color="#E5E5E5"> life easier especially from a</font>

603
00:22:32,990 --> 00:22:36,500
<font color="#E5E5E5">monitoring standpoint</font><font color="#CCCCCC"> when we</font><font color="#E5E5E5"> ask the</font>

604
00:22:35,480 --> 00:22:38,630
cloud trail<font color="#E5E5E5"> service</font>

605
00:22:36,500 --> 00:22:41,299
what is logged they told us they did<font color="#CCCCCC"> not</font>

606
00:22:38,630 --> 00:22:43,760
know so<font color="#CCCCCC"> today I'm open sourcing a tool</font>

607
00:22:41,299 --> 00:22:45,590
called<font color="#CCCCCC"> trailblazer</font><font color="#E5E5E5"> that will</font><font color="#CCCCCC"> enumerate</font>

608
00:22:43,760 --> 00:22:48,200
all<font color="#E5E5E5"> API calls in your clot in your</font>

609
00:22:45,590 --> 00:22:50,720
environment<font color="#E5E5E5"> and associate</font><font color="#CCCCCC"> that call with</font>

610
00:22:48,200 --> 00:22:52,190
what is<font color="#E5E5E5"> actually logged in cloud</font><font color="#CCCCCC"> Trello</font>

611
00:22:50,720 --> 00:22:53,510
so not<font color="#CCCCCC"> only</font><font color="#E5E5E5"> are you saying is it logged</font>

612
00:22:52,190 --> 00:22:55,820
but you're<font color="#E5E5E5"> seeing what it's logged as</font>

613
00:22:53,510 --> 00:22:57,260
there are some calls in<font color="#CCCCCC"> cloud</font><font color="#E5E5E5"> row that</font>

614
00:22:55,820 --> 00:23:00,379
are<font color="#E5E5E5"> logged differently than the actual</font>

615
00:22:57,260 --> 00:23:01,879
API call itself<font color="#CCCCCC"> and you can</font><font color="#E5E5E5"> flip a</font>

616
00:23:00,380 --> 00:23:04,309
switch on<font color="#E5E5E5"> this and actually use it as an</font>

617
00:23:01,880 --> 00:23:06,260
attack<font color="#E5E5E5"> platform to test monitoring in</font>

618
00:23:04,309 --> 00:23:07,908
your<font color="#CCCCCC"> environment so</font><font color="#E5E5E5"> as a simple yamo</font>

619
00:23:06,260 --> 00:23:09,460
file you can chain<font color="#E5E5E5"> together calls in</font>

620
00:23:07,909 --> 00:23:11,750
order<font color="#E5E5E5"> to test your monitoring as</font><font color="#CCCCCC"> well</font>

621
00:23:09,460 --> 00:23:13,549
and then also we're open sourcing an

622
00:23:11,750 --> 00:23:15,590
example<font color="#CCCCCC"> implementation of the method I</font>

623
00:23:13,549 --> 00:23:17,330
<font color="#CCCCCC">described today</font><font color="#E5E5E5"> in Python in</font><font color="#CCCCCC"> this</font>

624
00:23:15,590 --> 00:23:18,889
<font color="#E5E5E5">skunkworks repo of</font><font color="#CCCCCC"> our github for</font>

625
00:23:17,330 --> 00:23:20,510
<font color="#E5E5E5">Netflix so if you're interested in</font>

626
00:23:18,889 --> 00:23:22,879
<font color="#CCCCCC">running it across cloth</font><font color="#E5E5E5"> show data</font>

627
00:23:20,510 --> 00:23:25,129
offline<font color="#CCCCCC"> there's an example</font><font color="#E5E5E5"> of how to do</font>

628
00:23:22,880 --> 00:23:26,779
that there<font color="#E5E5E5"> and you can take</font><font color="#CCCCCC"> that code</font>

629
00:23:25,130 --> 00:23:28,610
and<font color="#CCCCCC"> modify it at will and actually adapt</font>

630
00:23:26,779 --> 00:23:31,130
it to your architecture and how cloud

631
00:23:28,610 --> 00:23:33,139
<font color="#CCCCCC">trail is actually delivered but with</font>

632
00:23:31,130 --> 00:23:35,350
that<font color="#E5E5E5"> I thank you all for</font><font color="#CCCCCC"> coming and I'll</font>

633
00:23:33,139 --> 00:23:39,100
be available<font color="#E5E5E5"> after this for questions</font>

634
00:23:35,350 --> 00:23:39,100
[Applause]

