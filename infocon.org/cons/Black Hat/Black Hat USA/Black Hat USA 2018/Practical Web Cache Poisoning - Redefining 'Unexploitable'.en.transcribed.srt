1
00:00:00,030 --> 00:00:06,299
good afternoon and<font color="#CCCCCC"> welcome</font><font color="#E5E5E5"> to Pratt</font>

2
00:00:02,760 --> 00:00:08,700
<font color="#CCCCCC">school</font><font color="#E5E5E5"> web cache poisoning</font><font color="#CCCCCC"> have you ever</font>

3
00:00:06,299 --> 00:00:10,650
been working<font color="#CCCCCC"> away and</font><font color="#E5E5E5"> just noticed</font>

4
00:00:08,700 --> 00:00:14,040
<font color="#CCCCCC">something that wasn't</font><font color="#E5E5E5"> quite</font><font color="#CCCCCC"> right and</font>

5
00:00:10,650 --> 00:00:16,139
<font color="#E5E5E5">thought that's strange but that's rather</font>

6
00:00:14,040 --> 00:00:20,160
complex<font color="#E5E5E5"> I think I'll just deal with that</font>

7
00:00:16,139 --> 00:00:22,289
later on<font color="#E5E5E5"> when</font><font color="#CCCCCC"> I have more free time for</font>

8
00:00:20,160 --> 00:00:24,390
years web cache poisoning has been a

9
00:00:22,289 --> 00:00:26,789
vulnerability<font color="#E5E5E5"> that</font><font color="#CCCCCC"> people didn't</font><font color="#E5E5E5"> want to</font>

10
00:00:24,390 --> 00:00:28,859
<font color="#E5E5E5">think about it's existed mostly is one</font>

11
00:00:26,789 --> 00:00:31,230
of these theoretical vulnerabilities

12
00:00:28,859 --> 00:00:35,820
that<font color="#E5E5E5"> are more</font><font color="#CCCCCC"> often used to scare people</font>

13
00:00:31,230 --> 00:00:37,920
<font color="#E5E5E5">than actually proven</font><font color="#CCCCCC"> to exist and for</font>

14
00:00:35,820 --> 00:00:40,350
<font color="#E5E5E5">years I lived in fear</font><font color="#CCCCCC"> of web cache</font>

15
00:00:37,920 --> 00:00:42,660
poisoning<font color="#E5E5E5"> and it's notorious complexity</font>

16
00:00:40,350 --> 00:00:44,579
but I recently found myself in a

17
00:00:42,660 --> 00:00:47,370
<font color="#E5E5E5">situation where I had</font><font color="#CCCCCC"> no choice</font><font color="#E5E5E5"> but to</font>

18
00:00:44,579 --> 00:00:50,910
try it<font color="#E5E5E5"> and discovered that actually web</font>

19
00:00:47,370 --> 00:00:52,589
cache poisoning<font color="#E5E5E5"> is wonderful so today in</font>

20
00:00:50,910 --> 00:00:54,989
this session<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> share with you</font>

21
00:00:52,590 --> 00:00:58,440
practical tools and techniques to<font color="#CCCCCC"> detect</font>

22
00:00:54,989 --> 00:01:02,010
<font color="#E5E5E5">explore and exploit web cache poisoning</font>

23
00:00:58,440 --> 00:01:04,080
<font color="#CCCCCC">I don't normally</font><font color="#E5E5E5"> share the story of</font><font color="#CCCCCC"> how</font>

24
00:01:02,010 --> 00:01:07,408
I got<font color="#CCCCCC"> started on research because it's</font>

25
00:01:04,080 --> 00:01:09,060
generally<font color="#CCCCCC"> pretty dry</font><font color="#E5E5E5"> but this one time</font>

26
00:01:07,409 --> 00:01:12,390
I'm gonna<font color="#E5E5E5"> make an exception</font>

27
00:01:09,060 --> 00:01:15,450
I started out<font color="#E5E5E5"> about a year</font><font color="#CCCCCC"> ago</font><font color="#E5E5E5"> with a</font>

28
00:01:12,390 --> 00:01:17,790
simple<font color="#E5E5E5"> plan and a lot of optimism</font><font color="#CCCCCC"> I</font>

29
00:01:15,450 --> 00:01:20,700
wrote this tool to find hidden query

30
00:01:17,790 --> 00:01:22,740
parameters called<font color="#E5E5E5"> parameter and my plan</font>

31
00:01:20,700 --> 00:01:25,200
was I was<font color="#E5E5E5"> going to run this tool on lots</font>

32
00:01:22,740 --> 00:01:27,270
of sites<font color="#E5E5E5"> it would find some really cool</font>

33
00:01:25,200 --> 00:01:29,610
weird<font color="#E5E5E5"> parameters I'd find some</font><font color="#CCCCCC"> awesome</font>

34
00:01:27,270 --> 00:01:32,970
bugs and those and I'd give a talk<font color="#E5E5E5"> about</font>

35
00:01:29,610 --> 00:01:35,490
<font color="#E5E5E5">that and it started off quite</font><font color="#CCCCCC"> well I</font>

36
00:01:32,970 --> 00:01:39,570
found some quite remarkable<font color="#E5E5E5"> query</font>

37
00:01:35,490 --> 00:01:42,449
parameters like this one here but the

38
00:01:39,570 --> 00:01:44,250
next<font color="#CCCCCC"> step just went horribly wrong</font><font color="#E5E5E5"> the</font>

39
00:01:42,450 --> 00:01:46,439
most interesting thing I could<font color="#CCCCCC"> find in</font>

40
00:01:44,250 --> 00:01:49,229
<font color="#E5E5E5">these query parameters that was actually</font>

41
00:01:46,439 --> 00:01:51,029
serious<font color="#CCCCCC"> over and</font><font color="#E5E5E5"> over was</font><font color="#CCCCCC"> bullying old</font>

42
00:01:49,229 --> 00:01:52,740
<font color="#E5E5E5">reflected cross-site scripting which is</font>

43
00:01:51,030 --> 00:01:57,090
not something<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I really want to give</font>

44
00:01:52,740 --> 00:01:59,759
a talk<font color="#CCCCCC"> about and so I thought</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> well</font>

45
00:01:57,090 --> 00:02:01,680
this hasn't<font color="#CCCCCC"> worked</font><font color="#E5E5E5"> out but maybe all the</font>

46
00:01:59,759 --> 00:02:04,740
cool vulnerabilities are actually hiding

47
00:02:01,680 --> 00:02:07,020
<font color="#E5E5E5">in cookies so I hacked on my code to</font>

48
00:02:04,740 --> 00:02:08,699
guess cookie names as well set it

49
00:02:07,020 --> 00:02:12,060
running and found<font color="#E5E5E5"> something that looks</font>

50
00:02:08,699 --> 00:02:14,010
super promising and about<font color="#E5E5E5"> eight hours</font>

51
00:02:12,060 --> 00:02:14,250
later<font color="#E5E5E5"> I got absolutely nowhere and had</font>

52
00:02:14,010 --> 00:02:16,500
to

53
00:02:14,250 --> 00:02:20,820
actually that was a waste of<font color="#E5E5E5"> time as</font>

54
00:02:16,500 --> 00:02:23,010
well and at<font color="#E5E5E5"> this</font><font color="#CCCCCC"> stage I only really had</font>

55
00:02:20,820 --> 00:02:25,170
<font color="#CCCCCC">one option</font><font color="#E5E5E5"> left</font><font color="#CCCCCC"> which was so once again</font>

56
00:02:23,010 --> 00:02:29,220
hack up the code and this time make it

57
00:02:25,170 --> 00:02:30,959
<font color="#E5E5E5">guess HTTP headers so I did this and I</font>

58
00:02:29,220 --> 00:02:34,920
set<font color="#CCCCCC"> out guessing headers</font><font color="#E5E5E5"> and found loads</font>

59
00:02:30,960 --> 00:02:37,080
of weird and<font color="#E5E5E5"> wonderful headers and yet</font>

60
00:02:34,920 --> 00:02:39,059
<font color="#E5E5E5">once again in these headers I found</font>

61
00:02:37,080 --> 00:02:41,400
nothing<font color="#CCCCCC"> perfect for site scripting which</font>

62
00:02:39,060 --> 00:02:43,970
I was pretty<font color="#E5E5E5"> sick</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> at this point</font><font color="#CCCCCC"> and</font>

63
00:02:41,400 --> 00:02:46,320
the cross-site scripting in headers<font color="#E5E5E5"> is</font>

64
00:02:43,970 --> 00:02:48,150
even less interesting<font color="#CCCCCC"> than normal</font>

65
00:02:46,320 --> 00:02:51,000
<font color="#E5E5E5">reflected XSS because there's no way for</font>

66
00:02:48,150 --> 00:02:54,360
<font color="#CCCCCC">me to make someone else's browser send a</font>

67
00:02:51,000 --> 00:02:56,580
header<font color="#CCCCCC"> across to</font><font color="#E5E5E5"> mate there was only one</font>

68
00:02:54,360 --> 00:02:59,430
<font color="#E5E5E5">tiny glimmer of hope which was the</font>

69
00:02:56,580 --> 00:03:01,950
summer<font color="#E5E5E5"> some of these servers that had</font>

70
00:02:59,430 --> 00:03:05,040
<font color="#E5E5E5">exercise in their headers used caching</font>

71
00:03:01,950 --> 00:03:07,829
and just maybe I could use their caches

72
00:03:05,040 --> 00:03:11,429
<font color="#E5E5E5">as an exploit delivery mechanism</font><font color="#CCCCCC"> for my</font>

73
00:03:07,830 --> 00:03:13,530
header based XSS<font color="#E5E5E5"> so I try this as an</font>

74
00:03:11,430 --> 00:03:17,820
<font color="#E5E5E5">absolute</font><font color="#CCCCCC"> last resort and</font><font color="#E5E5E5"> quite</font>

75
00:03:13,530 --> 00:03:19,350
<font color="#CCCCCC">surprisingly it actually worked</font><font color="#E5E5E5"> so first</font>

76
00:03:17,820 --> 00:03:21,090
I'm going to<font color="#E5E5E5"> talk about what cache</font>

77
00:03:19,350 --> 00:03:23,609
poisoning is and how you can find it

78
00:03:21,090 --> 00:03:26,910
then I'll demonstrate cache<font color="#CCCCCC"> poisoning on</font>

79
00:03:23,610 --> 00:03:29,340
a bunch of well-known<font color="#E5E5E5"> websites and show</font>

80
00:03:26,910 --> 00:03:31,769
what goes wrong and what goes well and

81
00:03:29,340 --> 00:03:34,680
then also<font color="#E5E5E5"> do a live demo on a very</font>

82
00:03:31,769 --> 00:03:36,360
well-known<font color="#E5E5E5"> piece of software</font><font color="#CCCCCC"> and talk</font>

83
00:03:34,680 --> 00:03:38,790
<font color="#CCCCCC">about how not to get your</font><font color="#E5E5E5"> cache poisoned</font>

84
00:03:36,360 --> 00:03:44,760
<font color="#CCCCCC">and then finally wrap up and take five</font>

85
00:03:38,790 --> 00:03:47,359
<font color="#CCCCCC">minutes</font><font color="#E5E5E5"> of questions so first of all a</font>

86
00:03:44,760 --> 00:03:50,100
<font color="#E5E5E5">bit of context as to</font><font color="#CCCCCC"> this presentation</font>

87
00:03:47,360 --> 00:03:51,930
in this presentation<font color="#CCCCCC"> I'm not going to be</font>

88
00:03:50,100 --> 00:03:53,790
talking<font color="#CCCCCC"> about browser cache poisoning</font>

89
00:03:51,930 --> 00:03:57,150
<font color="#E5E5E5">browsers have built-in caches</font>

90
00:03:53,790 --> 00:03:59,519
these are client-side caches and from a

91
00:03:57,150 --> 00:04:00,840
security<font color="#CCCCCC"> point of view from</font><font color="#E5E5E5"> the cache</font>

92
00:03:59,519 --> 00:04:02,280
poisoning point of view they're not that

93
00:04:00,840 --> 00:04:04,140
interesting<font color="#CCCCCC"> I</font><font color="#E5E5E5"> so I'm not talking about</font>

94
00:04:02,280 --> 00:04:07,769
those<font color="#E5E5E5"> I'm talking about</font><font color="#CCCCCC"> server-side</font>

95
00:04:04,140 --> 00:04:10,529
caches also web cache poisoning is not

96
00:04:07,769 --> 00:04:12,090
<font color="#E5E5E5">web cache deception web cache deception</font>

97
00:04:10,530 --> 00:04:13,739
is a really cool technique that was

98
00:04:12,090 --> 00:04:16,978
there was<font color="#E5E5E5"> there was a blackout</font>

99
00:04:13,739 --> 00:04:19,048
presentation on it<font color="#E5E5E5"> last year and it's</font>

100
00:04:16,978 --> 00:04:21,298
about tricking caches into storing

101
00:04:19,048 --> 00:04:23,070
sensitive<font color="#E5E5E5"> information belonging to users</font>

102
00:04:21,298 --> 00:04:27,659
<font color="#E5E5E5">so</font><font color="#CCCCCC"> that the attacker can get access to</font>

103
00:04:23,070 --> 00:04:30,330
<font color="#E5E5E5">it web cache poisoning</font><font color="#CCCCCC"> was about</font>

104
00:04:27,660 --> 00:04:32,520
using caches to<font color="#E5E5E5"> save malicious payloads</font>

105
00:04:30,330 --> 00:04:34,500
so those payloads get served up<font color="#E5E5E5"> to other</font>

106
00:04:32,520 --> 00:04:36,359
<font color="#CCCCCC">users</font><font color="#E5E5E5"> so it's kind of related</font><font color="#CCCCCC"> with the</font>

107
00:04:34,500 --> 00:04:39,590
inverse and<font color="#E5E5E5"> the way you exploit them and</font>

108
00:04:36,360 --> 00:04:41,850
find them is<font color="#E5E5E5"> completely different also</font>

109
00:04:39,590 --> 00:04:44,219
this is<font color="#CCCCCC"> not about web cache poisoning</font>

110
00:04:41,850 --> 00:04:45,750
<font color="#CCCCCC">uses a response splitting or</font><font color="#E5E5E5"> request</font>

111
00:04:44,220 --> 00:04:47,430
<font color="#E5E5E5">smuggling these are both cool techniques</font>

112
00:04:45,750 --> 00:04:51,480
that will get<font color="#CCCCCC"> you cache poisoning in the</font>

113
00:04:47,430 --> 00:04:53,250
<font color="#CCCCCC">right circumstances but a lot of</font><font color="#E5E5E5"> the</font>

114
00:04:51,480 --> 00:04:55,260
time<font color="#CCCCCC"> they're they don't really work</font><font color="#E5E5E5"> and</font>

115
00:04:53,250 --> 00:04:58,350
they're<font color="#E5E5E5"> not the</font><font color="#CCCCCC"> topic of this</font>

116
00:04:55,260 --> 00:05:00,330
presentation<font color="#E5E5E5"> finally and</font><font color="#CCCCCC"> most</font>

117
00:04:58,350 --> 00:05:03,930
importantly practical web cache

118
00:05:00,330 --> 00:05:05,310
poisoning<font color="#CCCCCC"> is not theoretical every</font>

119
00:05:03,930 --> 00:05:07,470
<font color="#E5E5E5">example I'm using in this entire</font>

120
00:05:05,310 --> 00:05:10,230
presentation is based on a real system

121
00:05:07,470 --> 00:05:15,060
that I've proven<font color="#CCCCCC"> can be exploited using</font>

122
00:05:10,230 --> 00:05:17,370
this technique<font color="#CCCCCC"> so first let's take a</font>

123
00:05:15,060 --> 00:05:20,310
very<font color="#E5E5E5"> quick</font><font color="#CCCCCC"> look at how caching is</font>

124
00:05:17,370 --> 00:05:22,440
supposed to<font color="#E5E5E5"> work here we've got three</font>

125
00:05:20,310 --> 00:05:23,130
users<font color="#E5E5E5"> fetching the same resource one</font>

126
00:05:22,440 --> 00:05:25,170
after the other

127
00:05:23,130 --> 00:05:27,900
<font color="#E5E5E5">this resource might be an image or a</font>

128
00:05:25,170 --> 00:05:31,080
<font color="#E5E5E5">JavaScript file or even just a HTML web</font>

129
00:05:27,900 --> 00:05:32,370
<font color="#CCCCCC">page and when the cache sees this</font>

130
00:05:31,080 --> 00:05:34,859
resource being fetched<font color="#E5E5E5"> for the first</font>

131
00:05:32,370 --> 00:05:36,450
time it saves a local copy of it which

132
00:05:34,860 --> 00:05:38,550
<font color="#E5E5E5">means it can then the serve that copy up</font>

133
00:05:36,450 --> 00:05:39,780
<font color="#CCCCCC">to other users</font><font color="#E5E5E5"> without</font><font color="#CCCCCC"> having</font><font color="#E5E5E5"> to</font>

134
00:05:38,550 --> 00:05:42,410
<font color="#CCCCCC">communicate with the backend server</font>

135
00:05:39,780 --> 00:05:47,010
<font color="#E5E5E5">which speeds the website up and</font>

136
00:05:42,410 --> 00:05:48,990
everyone's happy<font color="#CCCCCC"> all objective with web</font>

137
00:05:47,010 --> 00:05:51,180
cache poisoning<font color="#CCCCCC"> is to send a</font><font color="#E5E5E5"> request to</font>

138
00:05:48,990 --> 00:05:53,280
<font color="#CCCCCC">the</font><font color="#E5E5E5"> server</font><font color="#CCCCCC"> that causes a harmful</font>

139
00:05:51,180 --> 00:05:55,560
<font color="#E5E5E5">malicious response to come back to me</font>

140
00:05:53,280 --> 00:05:59,489
and then we want the cache<font color="#CCCCCC"> to save that</font>

141
00:05:55,560 --> 00:06:02,730
and serve it up to other users<font color="#CCCCCC"> the first</font>

142
00:05:59,490 --> 00:06:04,860
step to achieving this is to<font color="#E5E5E5"> ask the</font>

143
00:06:02,730 --> 00:06:07,530
question<font color="#CCCCCC"> how does the cache know</font><font color="#E5E5E5"> that</font>

144
00:06:04,860 --> 00:06:08,630
those first<font color="#E5E5E5"> three users are all fetching</font>

145
00:06:07,530 --> 00:06:11,400
the same resource

146
00:06:08,630 --> 00:06:14,340
it can't be doing a<font color="#E5E5E5"> full on byte by byte</font>

147
00:06:11,400 --> 00:06:16,890
can Paris on the<font color="#E5E5E5"> on the on their HTTP</font>

148
00:06:14,340 --> 00:06:17,940
requests because<font color="#E5E5E5"> HTTP requests are full</font>

149
00:06:16,890 --> 00:06:19,979
of all kinds of junk

150
00:06:17,940 --> 00:06:22,350
for example if those users had different

151
00:06:19,980 --> 00:06:24,870
web browsers<font color="#E5E5E5"> the</font><font color="#CCCCCC"> user-agent header would</font>

152
00:06:22,350 --> 00:06:27,720
<font color="#E5E5E5">be different so the caching wouldn't</font>

153
00:06:24,870 --> 00:06:29,840
really work caches addressed this

154
00:06:27,720 --> 00:06:33,390
problem<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> concept of cache keats</font>

155
00:06:29,840 --> 00:06:36,060
they say we only<font color="#E5E5E5"> care about certain</font>

156
00:06:33,390 --> 00:06:37,860
parts<font color="#CCCCCC"> of the of the request generally</font>

157
00:06:36,060 --> 00:06:40,680
<font color="#E5E5E5">just the host header and the</font><font color="#CCCCCC"> request</font>

158
00:06:37,860 --> 00:06:41,460
<font color="#E5E5E5">light so this is all that the cache does</font>

159
00:06:40,680 --> 00:06:43,590
a comparison

160
00:06:41,460 --> 00:06:48,508
to work out if<font color="#CCCCCC"> two requests are</font>

161
00:06:43,590 --> 00:06:51,479
accessing<font color="#E5E5E5"> the same results and that's</font>

162
00:06:48,509 --> 00:06:54,389
<font color="#E5E5E5">all well</font><font color="#CCCCCC"> and good but it leads us on to</font>

163
00:06:51,479 --> 00:06:56,430
<font color="#CCCCCC">the</font><font color="#E5E5E5"> next question which</font><font color="#CCCCCC"> is well what</font>

164
00:06:54,389 --> 00:06:59,509
<font color="#E5E5E5">happens if there's something important</font>

165
00:06:56,430 --> 00:07:01,560
and it's not<font color="#CCCCCC"> included in the cache key</font>

166
00:06:59,509 --> 00:07:07,280
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> where things start</font><font color="#CCCCCC"> to get</font>

167
00:07:01,560 --> 00:07:10,650
<font color="#E5E5E5">interesting so here we have two requests</font>

168
00:07:07,280 --> 00:07:12,239
to the same website<font color="#CCCCCC"> to the same URL to</font>

169
00:07:10,650 --> 00:07:13,979
retrieve a<font color="#E5E5E5"> white paper but one of them</font>

170
00:07:12,240 --> 00:07:15,180
is<font color="#CCCCCC"> trying to fetch</font><font color="#E5E5E5"> it in English and the</font>

171
00:07:13,979 --> 00:07:15,810
<font color="#E5E5E5">other one is trying</font><font color="#CCCCCC"> to fetch it in</font>

172
00:07:15,180 --> 00:07:17,970
Spanish

173
00:07:15,810 --> 00:07:19,949
thanks to this language<font color="#E5E5E5"> cookie and</font>

174
00:07:17,970 --> 00:07:22,860
<font color="#E5E5E5">that's absolutely fine</font><font color="#CCCCCC"> and that will</font>

175
00:07:19,949 --> 00:07:26,310
work<font color="#CCCCCC"> just</font><font color="#E5E5E5"> great</font><font color="#CCCCCC"> until you put a cache in</font>

176
00:07:22,860 --> 00:07:27,930
front of this website<font color="#CCCCCC"> once you</font><font color="#E5E5E5"> don't</font>

177
00:07:26,310 --> 00:07:30,270
once you do that<font color="#E5E5E5"> it will break because</font>

178
00:07:27,930 --> 00:07:33,060
the cookie<font color="#E5E5E5"> header is</font><font color="#CCCCCC"> not part of the</font>

179
00:07:30,270 --> 00:07:35,280
<font color="#E5E5E5">default cache key and so the cache is</font>

180
00:07:33,060 --> 00:07:38,280
completely oblivious to<font color="#E5E5E5"> this language</font>

181
00:07:35,280 --> 00:07:40,080
<font color="#E5E5E5">cookie and that means that if the</font>

182
00:07:38,280 --> 00:07:42,059
<font color="#E5E5E5">English user were to fetch this white</font>

183
00:07:40,080 --> 00:07:43,889
paper first<font color="#E5E5E5"> they would accidentally</font>

184
00:07:42,060 --> 00:07:45,360
poison the cache with the<font color="#E5E5E5"> English</font>

185
00:07:43,889 --> 00:07:47,729
version of the white<font color="#E5E5E5"> paper and</font><font color="#CCCCCC"> all the</font>

186
00:07:45,360 --> 00:07:50,580
<font color="#E5E5E5">users</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> other languages would end up</font>

187
00:07:47,729 --> 00:07:52,560
<font color="#E5E5E5">receiving the white paper in English and</font>

188
00:07:50,580 --> 00:07:56,099
by<font color="#E5E5E5"> itself well</font><font color="#CCCCCC"> obviously</font><font color="#E5E5E5"> that's just a</font>

189
00:07:52,560 --> 00:07:57,479
harmless nuisance but this is the

190
00:07:56,099 --> 00:08:01,650
<font color="#CCCCCC">behavior that we're going</font><font color="#E5E5E5"> to turn to</font><font color="#CCCCCC"> our</font>

191
00:07:57,479 --> 00:08:04,169
advantage<font color="#E5E5E5"> in effect everything</font><font color="#CCCCCC"> that's</font>

192
00:08:01,650 --> 00:08:11,669
not part of<font color="#E5E5E5"> the cache key is part of the</font>

193
00:08:04,169 --> 00:08:14,280
cache poisoning attack surface so how do

194
00:08:11,669 --> 00:08:18,210
you find cache poisoning<font color="#CCCCCC"> well the first</font>

195
00:08:14,280 --> 00:08:21,210
step<font color="#E5E5E5"> is to</font><font color="#CCCCCC"> identify a non keyed input so</font>

196
00:08:18,210 --> 00:08:23,669
probably<font color="#E5E5E5"> a HTTP header or a cookie and</font>

197
00:08:21,210 --> 00:08:25,620
I'm releasing the talk around<font color="#E5E5E5"> minor</font><font color="#CCCCCC"> as</font>

198
00:08:23,669 --> 00:08:27,990
an<font color="#E5E5E5"> open source</font><font color="#CCCCCC"> tool</font><font color="#E5E5E5"> that works in the</font>

199
00:08:25,620 --> 00:08:29,880
<font color="#E5E5E5">Pro and free versions of book so</font>

200
00:08:27,990 --> 00:08:31,259
everyone can just run that<font color="#E5E5E5"> so when that</font>

201
00:08:29,880 --> 00:08:34,429
<font color="#E5E5E5">will hopefully do a decent job of</font>

202
00:08:31,259 --> 00:08:36,599
<font color="#E5E5E5">finding some uncle'd inputs on your site</font>

203
00:08:34,429 --> 00:08:38,279
<font color="#E5E5E5">once you've found the input the next</font>

204
00:08:36,599 --> 00:08:40,190
step is to<font color="#E5E5E5"> work out if</font><font color="#CCCCCC"> you can do</font>

205
00:08:38,279 --> 00:08:42,328
anything<font color="#CCCCCC"> interesting with it</font><font color="#E5E5E5"> if</font>

206
00:08:40,190 --> 00:08:44,099
genuinely<font color="#CCCCCC"> all you can do with this input</font>

207
00:08:42,328 --> 00:08:45,870
<font color="#E5E5E5">is change the language like in the</font>

208
00:08:44,099 --> 00:08:47,760
example I just showed<font color="#E5E5E5"> you well that's</font>

209
00:08:45,870 --> 00:08:50,339
<font color="#E5E5E5">pretty boring right that's not really</font>

210
00:08:47,760 --> 00:08:52,079
worth following up on but a lot<font color="#CCCCCC"> of</font>

211
00:08:50,339 --> 00:08:54,580
inputs can<font color="#CCCCCC"> be used for</font><font color="#E5E5E5"> more interesting</font>

212
00:08:52,079 --> 00:08:56,890
stuff while you

213
00:08:54,580 --> 00:08:59,950
doing<font color="#E5E5E5"> these two steps it's absolutely</font>

214
00:08:56,890 --> 00:09:01,870
crucial<font color="#E5E5E5"> to specify a random</font><font color="#CCCCCC"> cache buster</font>

215
00:08:59,950 --> 00:09:05,140
<font color="#E5E5E5">a parameter that changes its value</font><font color="#CCCCCC"> on</font>

216
00:09:01,870 --> 00:09:07,540
<font color="#E5E5E5">every request if you</font><font color="#CCCCCC"> don't do</font><font color="#E5E5E5"> this then</font>

217
00:09:05,140 --> 00:09:09,280
<font color="#CCCCCC">you you risk</font><font color="#E5E5E5"> getting a response from the</font>

218
00:09:07,540 --> 00:09:11,920
cache<font color="#E5E5E5"> rather than from</font><font color="#CCCCCC"> the backend</font>

219
00:09:09,280 --> 00:09:13,829
server<font color="#E5E5E5"> and that</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> effectively make</font>

220
00:09:11,920 --> 00:09:17,439
any unhealed inputs<font color="#E5E5E5"> that you're sending</font>

221
00:09:13,830 --> 00:09:19,840
<font color="#E5E5E5">completely invisible</font><font color="#CCCCCC"> I think that this</font>

222
00:09:17,440 --> 00:09:22,570
is why cache poisoning has remained so

223
00:09:19,840 --> 00:09:24,820
<font color="#CCCCCC">low-profile</font><font color="#E5E5E5"> for so many years</font><font color="#CCCCCC"> even</font>

224
00:09:22,570 --> 00:09:28,630
though once<font color="#E5E5E5"> you know how to do it it's</font>

225
00:09:24,820 --> 00:09:30,070
actually<font color="#E5E5E5"> pretty easy once you found</font><font color="#CCCCCC"> that</font>

226
00:09:28,630 --> 00:09:31,930
once<font color="#E5E5E5"> you've found</font><font color="#CCCCCC"> your own heat input</font>

227
00:09:30,070 --> 00:09:33,550
<font color="#E5E5E5">and established it has some kind of</font>

228
00:09:31,930 --> 00:09:35,920
exploit potential the next step is just

229
00:09:33,550 --> 00:09:38,109
to<font color="#E5E5E5"> try</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> get it saved in the cache and</font>

230
00:09:35,920 --> 00:09:40,180
<font color="#E5E5E5">you may find that already happened</font>

231
00:09:38,110 --> 00:09:41,650
because it's kind of a<font color="#E5E5E5"> job of caches to</font>

232
00:09:40,180 --> 00:09:44,530
<font color="#E5E5E5">save stuff so they can be quite</font>

233
00:09:41,650 --> 00:09:46,120
<font color="#E5E5E5">aggressive about it but if your response</font>

234
00:09:44,530 --> 00:09:47,589
<font color="#E5E5E5">hasn't been saved in</font><font color="#CCCCCC"> the cache</font><font color="#E5E5E5"> then</font>

235
00:09:46,120 --> 00:09:49,900
<font color="#CCCCCC">you'll</font><font color="#E5E5E5"> need to fingerprint the cache</font>

236
00:09:47,590 --> 00:09:51,640
rules<font color="#E5E5E5"> because they may be</font><font color="#CCCCCC"> saying</font><font color="#E5E5E5"> things</font>

237
00:09:49,900 --> 00:09:53,860
like<font color="#E5E5E5"> we're only going to cache responses</font>

238
00:09:51,640 --> 00:09:55,660
with<font color="#CCCCCC"> Stern file extensions or certain</font>

239
00:09:53,860 --> 00:09:57,040
status codes and so on<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> you'll</font>

240
00:09:55,660 --> 00:09:59,469
<font color="#CCCCCC">just need to troll the app to find the</font>

241
00:09:57,040 --> 00:10:01,990
<font color="#CCCCCC">target page</font><font color="#E5E5E5"> as to</font><font color="#CCCCCC"> find a page that</font>

242
00:09:59,470 --> 00:10:05,410
<font color="#E5E5E5">fulfills the conditions and that you can</font>

243
00:10:01,990 --> 00:10:07,420
<font color="#E5E5E5">point during this step it's important to</font>

244
00:10:05,410 --> 00:10:09,790
<font color="#E5E5E5">have a static safety parameter I'm going</font>

245
00:10:07,420 --> 00:10:13,420
to talk more<font color="#CCCCCC"> about that</font><font color="#E5E5E5"> shortly</font><font color="#CCCCCC"> and that</font>

246
00:10:09,790 --> 00:10:19,120
<font color="#CCCCCC">is pretty much</font><font color="#E5E5E5"> all the theory of cache</font>

247
00:10:13,420 --> 00:10:20,500
poisoning so let's take a look at what

248
00:10:19,120 --> 00:10:24,610
happens when<font color="#E5E5E5"> we apply this methodology</font>

249
00:10:20,500 --> 00:10:26,740
<font color="#E5E5E5">to some real</font><font color="#CCCCCC"> websites</font><font color="#E5E5E5"> now part of the</font>

250
00:10:24,610 --> 00:10:28,360
goal of<font color="#E5E5E5"> the section is just</font><font color="#CCCCCC"> that I want</font>

251
00:10:26,740 --> 00:10:31,090
<font color="#E5E5E5">to show you the cache poisoning does</font>

252
00:10:28,360 --> 00:10:33,970
work on real sites but<font color="#E5E5E5"> I've chosen these</font>

253
00:10:31,090 --> 00:10:35,650
specific<font color="#CCCCCC"> examples to show you some</font><font color="#E5E5E5"> of</font>

254
00:10:33,970 --> 00:10:37,990
the<font color="#E5E5E5"> challenges you may run into with</font>

255
00:10:35,650 --> 00:10:40,410
cache poisoning<font color="#CCCCCC"> and give you some ideas</font>

256
00:10:37,990 --> 00:10:43,210
as to<font color="#CCCCCC"> how to deal with</font><font color="#E5E5E5"> those</font><font color="#CCCCCC"> challenges</font>

257
00:10:40,410 --> 00:10:45,490
<font color="#E5E5E5">as usual I've only targeted sites that</font>

258
00:10:43,210 --> 00:10:47,590
have bug bounty programs and all the

259
00:10:45,490 --> 00:10:50,620
specific examples I'm showing you here

260
00:10:47,590 --> 00:10:53,350
have been fixed but<font color="#CCCCCC"> the technique still</font>

261
00:10:50,620 --> 00:10:55,660
work on<font color="#E5E5E5"> many other websites</font><font color="#CCCCCC"> I've</font>

262
00:10:53,350 --> 00:10:57,870
exploited targets with all of the<font color="#CCCCCC"> caches</font>

263
00:10:55,660 --> 00:11:00,459
that<font color="#E5E5E5"> you can see logos off here and</font>

264
00:10:57,870 --> 00:11:02,260
<font color="#E5E5E5">ultimately I think</font><font color="#CCCCCC"> basically all</font><font color="#E5E5E5"> caches</font>

265
00:11:00,460 --> 00:11:04,720
can<font color="#E5E5E5"> potentially be poisoned using this</font>

266
00:11:02,260 --> 00:11:07,569
technique<font color="#E5E5E5"> because it's a design flaw in</font>

267
00:11:04,720 --> 00:11:08,170
caches rather than an exploit<font color="#CCCCCC"> for a</font>

268
00:11:07,570 --> 00:11:13,329
specific

269
00:11:08,170 --> 00:11:14,920
caching system<font color="#E5E5E5"> so to</font><font color="#CCCCCC"> begin we're going</font>

270
00:11:13,329 --> 00:11:17,800
<font color="#CCCCCC">to take a</font><font color="#E5E5E5"> look at the home page</font><font color="#CCCCCC"> of</font>

271
00:11:14,920 --> 00:11:21,699
<font color="#CCCCCC">Reddit</font><font color="#E5E5E5"> at home made of Red Hat popular</font>

272
00:11:17,800 --> 00:11:23,260
<font color="#CCCCCC">Linux</font><font color="#E5E5E5"> distribution now if you look at</font>

273
00:11:21,700 --> 00:11:25,209
the home<font color="#E5E5E5"> page you might think this</font>

274
00:11:23,260 --> 00:11:27,490
doesn't<font color="#CCCCCC"> look</font><font color="#E5E5E5"> very promising because</font>

275
00:11:25,209 --> 00:11:29,380
we've got this cache control no cache

276
00:11:27,490 --> 00:11:32,800
headers it explicitly says don't<font color="#E5E5E5"> catch</font>

277
00:11:29,380 --> 00:11:34,839
this<font color="#E5E5E5"> and also there's</font><font color="#CCCCCC"> no other headers</font>

278
00:11:32,800 --> 00:11:38,050
that<font color="#E5E5E5"> suggest that</font><font color="#CCCCCC"> this site is</font><font color="#E5E5E5"> actually</font>

279
00:11:34,839 --> 00:11:40,149
using caching so it would be tempting<font color="#CCCCCC"> to</font>

280
00:11:38,050 --> 00:11:42,599
give up at this<font color="#E5E5E5"> point but</font><font color="#CCCCCC"> that would be</font>

281
00:11:40,149 --> 00:11:46,180
a mistake<font color="#E5E5E5"> because headers will</font><font color="#CCCCCC"> lighten</font>

282
00:11:42,600 --> 00:11:48,399
so if you run parameter on this and and

283
00:11:46,180 --> 00:11:51,459
tell it to guess headers it will quickly

284
00:11:48,399 --> 00:11:54,250
<font color="#E5E5E5">find that the</font><font color="#CCCCCC"> x4 did host header is</font>

285
00:11:51,459 --> 00:11:58,060
reflected<font color="#CCCCCC"> inside a</font><font color="#E5E5E5"> particular piece of</font>

286
00:11:54,250 --> 00:12:00,459
<font color="#CCCCCC">HTML</font><font color="#E5E5E5"> and so that's</font><font color="#CCCCCC"> how I'm keyed input</font>

287
00:11:58,060 --> 00:12:05,018
<font color="#E5E5E5">right and the next step is just to see</font>

288
00:12:00,459 --> 00:12:07,540
well<font color="#E5E5E5"> what damage can we do this</font><font color="#CCCCCC"> now what</font>

289
00:12:05,019 --> 00:12:10,570
do you<font color="#CCCCCC"> think the most obvious</font><font color="#E5E5E5"> attack to</font>

290
00:12:07,540 --> 00:12:12,189
try<font color="#E5E5E5"> here</font><font color="#CCCCCC"> it's it's cross-site scripting</font>

291
00:12:10,570 --> 00:12:13,480
right and sure enough we can break out

292
00:12:12,190 --> 00:12:18,459
of<font color="#E5E5E5"> that input and inject arbitrary</font>

293
00:12:13,480 --> 00:12:20,769
JavaScript into the response now<font color="#CCCCCC"> by</font>

294
00:12:18,459 --> 00:12:22,329
itself<font color="#E5E5E5"> this is useless right because we</font>

295
00:12:20,769 --> 00:12:25,029
<font color="#E5E5E5">are only exploiting ourselves we</font><font color="#CCCCCC"> are a</font>

296
00:12:22,329 --> 00:12:28,469
<font color="#E5E5E5">hundred percent relying on their cache</font>

297
00:12:25,029 --> 00:12:30,970
to deliver this exploit to genuine users

298
00:12:28,470 --> 00:12:33,579
so we<font color="#CCCCCC"> need to see if this is</font><font color="#E5E5E5"> being saved</font>

299
00:12:30,970 --> 00:12:36,040
in<font color="#E5E5E5"> the cache and to do that we</font><font color="#CCCCCC"> just send</font>

300
00:12:33,579 --> 00:12:38,500
the same request but we don't send any

301
00:12:36,040 --> 00:12:40,719
<font color="#E5E5E5">any funny headers so we're just</font><font color="#CCCCCC"> doing</font>

302
00:12:38,500 --> 00:12:43,149
what a normal<font color="#E5E5E5"> user would do and then we</font>

303
00:12:40,720 --> 00:12:46,290
look at<font color="#E5E5E5"> the response</font><font color="#CCCCCC"> and sure enough our</font>

304
00:12:43,149 --> 00:12:48,579
malicious<font color="#E5E5E5"> JavaScript has come back so</font>

305
00:12:46,290 --> 00:12:50,949
<font color="#E5E5E5">that was it we just got full control</font>

306
00:12:48,579 --> 00:12:54,609
over the<font color="#CCCCCC"> home</font><font color="#E5E5E5"> page of</font><font color="#CCCCCC"> Reddit</font><font color="#E5E5E5"> calm and it</font>

307
00:12:50,949 --> 00:12:56,319
wasn't<font color="#E5E5E5"> very difficult right the</font><font color="#CCCCCC"> only</font>

308
00:12:54,610 --> 00:12:59,319
other point that<font color="#E5E5E5"> I should</font><font color="#CCCCCC"> make is this</font>

309
00:12:56,319 --> 00:13:01,540
safe equals<font color="#CCCCCC"> one parameter this</font>

310
00:12:59,319 --> 00:13:03,399
<font color="#E5E5E5">highlighted in blue that's not part of</font>

311
00:13:01,540 --> 00:13:06,189
Red Hat's<font color="#E5E5E5"> website that's something I've</font>

312
00:13:03,399 --> 00:13:09,100
manually specified<font color="#E5E5E5"> because if I didn't</font>

313
00:13:06,190 --> 00:13:11,019
do that<font color="#CCCCCC"> there was a risk</font><font color="#E5E5E5"> that a lot of</font>

314
00:13:09,100 --> 00:13:13,209
genuine visitors to Red Hat site would

315
00:13:11,019 --> 00:13:15,660
start seeing pop-ups<font color="#CCCCCC"> and they might get</font>

316
00:13:13,209 --> 00:13:15,660
<font color="#CCCCCC">upset</font>

317
00:13:16,110 --> 00:13:22,120
so headers will lie to<font color="#E5E5E5"> you but they will</font>

318
00:13:20,260 --> 00:13:25,480
also tell you<font color="#E5E5E5"> useful</font>

319
00:13:22,120 --> 00:13:27,100
so having just mentioned that safety

320
00:13:25,480 --> 00:13:29,470
parameter let's pretend you a malicious

321
00:13:27,100 --> 00:13:34,150
person<font color="#E5E5E5"> and you genuinely</font><font color="#CCCCCC"> want to poison</font>

322
00:13:29,470 --> 00:13:35,860
<font color="#E5E5E5">the actual homepage of the site this is</font>

323
00:13:34,150 --> 00:13:37,990
slightly more<font color="#CCCCCC"> difficult because</font><font color="#E5E5E5"> this</font>

324
00:13:35,860 --> 00:13:40,060
means you're in a kind<font color="#E5E5E5"> of a race with</font>

325
00:13:37,990 --> 00:13:41,770
all the genuine users of the<font color="#CCCCCC"> website</font>

326
00:13:40,060 --> 00:13:44,170
because<font color="#CCCCCC"> you want your malicious response</font>

327
00:13:41,770 --> 00:13:46,329
to be cached<font color="#E5E5E5"> rather than a normal</font>

328
00:13:44,170 --> 00:13:48,760
innocent response<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> need your</font>

329
00:13:46,330 --> 00:13:51,160
request<font color="#E5E5E5"> to be the first request to hit</font>

330
00:13:48,760 --> 00:13:54,939
the server<font color="#CCCCCC"> after the cache entry expires</font>

331
00:13:51,160 --> 00:13:57,520
<font color="#E5E5E5">and sometimes headers will really help</font>

332
00:13:54,940 --> 00:13:59,290
you out<font color="#E5E5E5"> when you're trying</font><font color="#CCCCCC"> to it</font><font color="#E5E5E5"> to</font>

333
00:13:57,520 --> 00:14:00,819
<font color="#CCCCCC">achieve that</font><font color="#E5E5E5"> so this is the homepage of</font>

334
00:13:59,290 --> 00:14:02,709
unity3d<font color="#CCCCCC"> com</font>

335
00:14:00,820 --> 00:14:06,250
makers<font color="#CCCCCC"> of a well-known computer game</font>

336
00:14:02,710 --> 00:14:09,070
engine<font color="#E5E5E5"> and we can inject JavaScript and</font>

337
00:14:06,250 --> 00:14:11,800
stuff<font color="#E5E5E5"> with this X host header but the</font>

338
00:14:09,070 --> 00:14:15,010
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> is these age and max</font>

339
00:14:11,800 --> 00:14:17,920
<font color="#E5E5E5">age headers taken together specify the</font>

340
00:14:15,010 --> 00:14:21,220
exact second that<font color="#CCCCCC"> this response is going</font>

341
00:14:17,920 --> 00:14:23,319
<font color="#E5E5E5">to expire in the cache so that tells us</font>

342
00:14:21,220 --> 00:14:25,570
<font color="#E5E5E5">the</font><font color="#CCCCCC"> exact second that we need to start</font>

343
00:14:23,320 --> 00:14:29,670
spamming our<font color="#E5E5E5"> payload to the server in</font>

344
00:14:25,570 --> 00:14:29,670
order<font color="#E5E5E5"> to take full</font><font color="#CCCCCC"> control over</font><font color="#E5E5E5"> the site</font>

345
00:14:31,800 --> 00:14:36,459
HTTP headers<font color="#E5E5E5"> can give you</font><font color="#CCCCCC"> give you</font><font color="#E5E5E5"> other</font>

346
00:14:34,450 --> 00:14:38,260
clues<font color="#CCCCCC"> - so here we've got a</font><font color="#E5E5E5"> different</font>

347
00:14:36,460 --> 00:14:42,250
website<font color="#E5E5E5"> which unfortunately I can't name</font>

348
00:14:38,260 --> 00:14:44,020
but it<font color="#E5E5E5"> is quite well</font><font color="#CCCCCC"> known and once</font>

349
00:14:42,250 --> 00:14:46,360
again we<font color="#E5E5E5"> can inject JavaScript using</font><font color="#CCCCCC"> the</font>

350
00:14:44,020 --> 00:14:47,620
exported host header<font color="#CCCCCC"> I think there's</font>

351
00:14:46,360 --> 00:14:49,180
something<font color="#E5E5E5"> in rails that just adds</font>

352
00:14:47,620 --> 00:14:51,310
support for<font color="#E5E5E5"> this header by default so if</font>

353
00:14:49,180 --> 00:14:53,859
you're using rails<font color="#E5E5E5"> you might want</font><font color="#CCCCCC"> to</font>

354
00:14:51,310 --> 00:14:57,310
<font color="#CCCCCC">share</font><font color="#E5E5E5"> that out but the interesting thing</font>

355
00:14:53,860 --> 00:15:00,130
<font color="#E5E5E5">here</font><font color="#CCCCCC"> is this very</font><font color="#E5E5E5"> user agent header so</font>

356
00:14:57,310 --> 00:15:03,910
that's an instruction<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the cache to</font>

357
00:15:00,130 --> 00:15:05,170
add the user agent<font color="#E5E5E5"> into the cache key so</font>

358
00:15:03,910 --> 00:15:07,750
that<font color="#E5E5E5"> means that this request that I've</font>

359
00:15:05,170 --> 00:15:10,060
<font color="#E5E5E5">sent here will poison the cache but they</font>

360
00:15:07,750 --> 00:15:13,440
will<font color="#E5E5E5"> only poison it for other people</font>

361
00:15:10,060 --> 00:15:16,780
<font color="#E5E5E5">using the same web browser as me and</font>

362
00:15:13,440 --> 00:15:19,150
that's both<font color="#E5E5E5"> a blessing and a curse</font><font color="#CCCCCC"> it's</font>

363
00:15:16,780 --> 00:15:21,459
a bit of a headache because if I want to

364
00:15:19,150 --> 00:15:24,400
poison<font color="#E5E5E5"> the majority</font><font color="#CCCCCC"> of visitors then I</font>

365
00:15:21,460 --> 00:15:27,550
need<font color="#E5E5E5"> to send this request</font><font color="#CCCCCC"> over and</font><font color="#E5E5E5"> over</font>

366
00:15:24,400 --> 00:15:29,350
with every<font color="#E5E5E5"> possible user agent but on</font>

367
00:15:27,550 --> 00:15:32,439
the other hand<font color="#E5E5E5"> it gives</font><font color="#CCCCCC"> me the chance to</font>

368
00:15:29,350 --> 00:15:35,570
<font color="#CCCCCC">be a bit more creative with an elective</font>

369
00:15:32,440 --> 00:15:37,010
about who<font color="#E5E5E5"> I target for example</font>

370
00:15:35,570 --> 00:15:39,500
perhaps I happen to know that<font color="#E5E5E5"> the</font>

371
00:15:37,010 --> 00:15:42,920
development<font color="#CCCCCC"> team for this website</font><font color="#E5E5E5"> always</font>

372
00:15:39,500 --> 00:15:44,930
uses<font color="#E5E5E5"> Microsoft edge well that means I</font>

373
00:15:42,920 --> 00:15:47,329
can poison<font color="#E5E5E5"> the cache for everyone who's</font>

374
00:15:44,930 --> 00:15:48,469
not<font color="#E5E5E5"> using edge and then the developers</font>

375
00:15:47,330 --> 00:15:50,300
are going<font color="#E5E5E5"> to have a really hard time</font>

376
00:15:48,470 --> 00:15:53,110
<font color="#E5E5E5">figuring out why all of their users keep</font>

377
00:15:50,300 --> 00:15:53,109
getting<font color="#CCCCCC"> exploited</font>

378
00:15:56,650 --> 00:16:01,010
<font color="#CCCCCC">okay so I've</font><font color="#E5E5E5"> looked at three websites</font>

379
00:15:59,060 --> 00:16:02,959
<font color="#E5E5E5">and in each case the</font><font color="#CCCCCC"> poison has been</font>

380
00:16:01,010 --> 00:16:05,810
<font color="#E5E5E5">done using basic reflected cross-site</font>

381
00:16:02,960 --> 00:16:07,700
scripting<font color="#E5E5E5"> although through the cache</font>

382
00:16:05,810 --> 00:16:10,099
poisoning we've escalated it to stored

383
00:16:07,700 --> 00:16:14,290
XSS<font color="#CCCCCC"> so it's still serious but it's not</font>

384
00:16:10,100 --> 00:16:17,270
always<font color="#E5E5E5"> that easy</font><font color="#CCCCCC"> on this website</font><font color="#E5E5E5"> catalog</font>

385
00:16:14,290 --> 00:16:19,910
data.gov<font color="#CCCCCC"> the x4</font><font color="#E5E5E5"> did host header is</font>

386
00:16:17,270 --> 00:16:22,760
reflected<font color="#CCCCCC"> inside this data</font><font color="#E5E5E5"> site</font><font color="#CCCCCC"> root</font>

387
00:16:19,910 --> 00:16:24,560
actually<font color="#CCCCCC"> and</font><font color="#E5E5E5"> their encoding this input</font>

388
00:16:22,760 --> 00:16:28,760
<font color="#E5E5E5">so</font><font color="#CCCCCC"> we can't</font><font color="#E5E5E5"> just break out and inject</font>

389
00:16:24,560 --> 00:16:31,430
HTML to exploit<font color="#E5E5E5"> this we need to figure</font>

390
00:16:28,760 --> 00:16:34,310
<font color="#E5E5E5">out what this attribute is actually for</font>

391
00:16:31,430 --> 00:16:36,050
so to do<font color="#CCCCCC"> that I set up ahead</font><font color="#E5E5E5"> of</font>

392
00:16:34,310 --> 00:16:38,359
injection<font color="#CCCCCC"> role in burp so we just</font><font color="#E5E5E5"> add</font>

393
00:16:36,050 --> 00:16:40,699
this exported host header<font color="#E5E5E5"> to all of my</font>

394
00:16:38,360 --> 00:16:43,310
<font color="#CCCCCC">traffic and then I just browse the site</font>

395
00:16:40,700 --> 00:16:46,310
and what<font color="#CCCCCC"> I found was when</font><font color="#E5E5E5"> I loaded</font>

396
00:16:43,310 --> 00:16:48,729
certain pages<font color="#E5E5E5"> my browser sent a request</font>

397
00:16:46,310 --> 00:16:52,689
to<font color="#CCCCCC"> the collaborator server to fetch some</font>

398
00:16:48,730 --> 00:16:55,310
<font color="#E5E5E5">internationalization data from it so</font>

399
00:16:52,690 --> 00:16:57,560
using<font color="#E5E5E5"> this on keyed input with</font><font color="#CCCCCC"> cache</font>

400
00:16:55,310 --> 00:16:58,099
<font color="#CCCCCC">poisoning we can make people</font><font color="#E5E5E5"> visiting</font>

401
00:16:57,560 --> 00:17:01,040
this website

402
00:16:58,100 --> 00:17:04,280
<font color="#CCCCCC">fetch some kind of internationalization</font>

403
00:17:01,040 --> 00:17:05,690
data from our website let's have a look

404
00:17:04,280 --> 00:17:08,629
at what this data<font color="#E5E5E5"> is supposed to look</font>

405
00:17:05,690 --> 00:17:11,900
like it's meant<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be a mapping of</font>

406
00:17:08,630 --> 00:17:14,660
<font color="#E5E5E5">English phrases into the phrase in a</font>

407
00:17:11,900 --> 00:17:18,730
different language<font color="#CCCCCC"> and the translated</font>

408
00:17:14,660 --> 00:17:21,829
<font color="#E5E5E5">phrase is just concatenated into</font><font color="#CCCCCC"> the dot</font>

409
00:17:18,730 --> 00:17:24,949
<font color="#CCCCCC">so what we can</font><font color="#E5E5E5"> do is</font><font color="#CCCCCC"> to everybody use</font>

410
00:17:21,829 --> 00:17:26,659
our translation file and then we can

411
00:17:24,949 --> 00:17:29,510
make our<font color="#CCCCCC"> own custom translation file</font>

412
00:17:26,660 --> 00:17:32,600
<font color="#E5E5E5">that translates English phrases into</font>

413
00:17:29,510 --> 00:17:34,820
malicious HTML that exploits users so

414
00:17:32,600 --> 00:17:37,219
the end the end was all of this is that

415
00:17:34,820 --> 00:17:39,889
if<font color="#E5E5E5"> anyone views a page on that</font><font color="#CCCCCC"> website</font>

416
00:17:37,220 --> 00:17:43,730
<font color="#CCCCCC">that has the text show more on it then</font>

417
00:17:39,890 --> 00:17:47,330
my exploit fights<font color="#E5E5E5"> and this is a really</font>

418
00:17:43,730 --> 00:17:49,280
<font color="#CCCCCC">this thing where</font><font color="#E5E5E5"> you where you serve up</font>

419
00:17:47,330 --> 00:17:51,679
malicious<font color="#E5E5E5"> JSON by</font>

420
00:17:49,280 --> 00:17:53,780
tricking the<font color="#CCCCCC"> scientists requesting JSON</font>

421
00:17:51,680 --> 00:17:57,340
<font color="#E5E5E5">from your website is a really common</font>

422
00:17:53,780 --> 00:17:57,340
<font color="#CCCCCC">pattern with cache poisoning</font>

423
00:17:59,080 --> 00:18:04,280
now after that exploit<font color="#CCCCCC"> I forgot</font><font color="#E5E5E5"> to</font>

424
00:18:02,510 --> 00:18:06,890
delete the header injection<font color="#CCCCCC"> and match</font>

425
00:18:04,280 --> 00:18:08,660
from<font color="#E5E5E5"> the place role in burp and a few</font>

426
00:18:06,890 --> 00:18:10,790
<font color="#E5E5E5">days later when I was just tidying stuff</font>

427
00:18:08,660 --> 00:18:13,580
up and closing everything<font color="#E5E5E5"> down</font><font color="#CCCCCC"> I know</font>

428
00:18:10,790 --> 00:18:18,470
just a<font color="#E5E5E5"> really weird request and hit the</font>

429
00:18:13,580 --> 00:18:21,740
collaborator server<font color="#E5E5E5"> so the null origin</font>

430
00:18:18,470 --> 00:18:24,560
is quite rare by itself<font color="#E5E5E5"> but</font><font color="#CCCCCC"> I at</font><font color="#E5E5E5"> this</font>

431
00:18:21,740 --> 00:18:26,360
point I'd never seen<font color="#E5E5E5"> a lowercase</font><font color="#CCCCCC"> origin</font>

432
00:18:24,560 --> 00:18:29,600
header coming from the browser<font color="#E5E5E5"> before</font>

433
00:18:26,360 --> 00:18:32,350
<font color="#CCCCCC">and it definitely didn't look like this</font>

434
00:18:29,600 --> 00:18:34,550
request<font color="#E5E5E5"> had come from data gov and</font>

435
00:18:32,350 --> 00:18:37,669
investigating<font color="#E5E5E5"> it turned out that it came</font>

436
00:18:34,550 --> 00:18:41,620
from<font color="#CCCCCC"> a core Firefox feature called a</font>

437
00:18:37,670 --> 00:18:44,870
Mozilla shield so this is a<font color="#E5E5E5"> system for</font>

438
00:18:41,620 --> 00:18:47,209
silently<font color="#E5E5E5"> installing extensions in the</font>

439
00:18:44,870 --> 00:18:49,340
background for research and and

440
00:18:47,210 --> 00:18:51,680
marketing purposes<font color="#E5E5E5"> it's turned on by</font>

441
00:18:49,340 --> 00:18:53,030
default<font color="#CCCCCC"> in Firefox</font><font color="#E5E5E5"> and you may have</font>

442
00:18:51,680 --> 00:18:55,130
<font color="#CCCCCC">actually heard</font><font color="#E5E5E5"> of it because they hit</font>

443
00:18:53,030 --> 00:18:57,230
<font color="#E5E5E5">the news last year when they installed a</font>

444
00:18:55,130 --> 00:18:58,520
mr. robot extension<font color="#CCCCCC"> err on a lot</font><font color="#E5E5E5"> of</font>

445
00:18:57,230 --> 00:19:01,570
<font color="#E5E5E5">systems and it was meant to</font><font color="#CCCCCC"> be invisible</font>

446
00:18:58,520 --> 00:19:05,420
when<font color="#E5E5E5"> it</font><font color="#CCCCCC"> wasn't and some people got</font><font color="#E5E5E5"> upset</font>

447
00:19:01,570 --> 00:19:08,419
<font color="#CCCCCC">so when</font><font color="#E5E5E5"> you open</font><font color="#CCCCCC"> Firefox</font><font color="#E5E5E5"> it sends this</font>

448
00:19:05,420 --> 00:19:11,570
<font color="#E5E5E5">request</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> is to fetch a list of</font><font color="#CCCCCC"> URLs</font>

449
00:19:08,420 --> 00:19:13,310
<font color="#CCCCCC">that</font><font color="#E5E5E5"> contain recipes and the recipes</font>

450
00:19:11,570 --> 00:19:16,159
specify what extensions<font color="#E5E5E5"> should be</font>

451
00:19:13,310 --> 00:19:17,750
installed<font color="#CCCCCC"> and it also resends this</font>

452
00:19:16,160 --> 00:19:21,350
<font color="#E5E5E5">request like every 30 minutes or</font>

453
00:19:17,750 --> 00:19:23,480
<font color="#E5E5E5">something</font><font color="#CCCCCC"> like that that's</font><font color="#E5E5E5"> fine but of</font>

454
00:19:21,350 --> 00:19:26,360
<font color="#E5E5E5">course</font><font color="#CCCCCC"> for me burp had injected</font><font color="#E5E5E5"> this</font>

455
00:19:23,480 --> 00:19:28,010
header exported host and that<font color="#CCCCCC"> had</font>

456
00:19:26,360 --> 00:19:31,520
overridden<font color="#E5E5E5"> the urals</font>

457
00:19:28,010 --> 00:19:32,960
in the response<font color="#E5E5E5"> and they were using</font>

458
00:19:31,520 --> 00:19:35,900
caching in that head<font color="#CCCCCC"> and wasn't</font><font color="#E5E5E5"> in the</font>

459
00:19:32,960 --> 00:19:39,740
cache key so the end effect was I could

460
00:19:35,900 --> 00:19:42,890
make every Firefox browser<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> planet</font>

461
00:19:39,740 --> 00:19:44,960
<font color="#E5E5E5">connect to my system</font><font color="#CCCCCC"> to fetch this list</font>

462
00:19:42,890 --> 00:19:47,510
of<font color="#CCCCCC"> recipes which specify what extensions</font>

463
00:19:44,960 --> 00:19:49,700
to install so that's<font color="#E5E5E5"> pretty cool that's</font>

464
00:19:47,510 --> 00:19:52,850
<font color="#E5E5E5">like 15 million browsers or something</font>

465
00:19:49,700 --> 00:19:54,650
<font color="#E5E5E5">like</font><font color="#CCCCCC"> that right so I raised the question</font>

466
00:19:52,850 --> 00:19:58,969
well<font color="#CCCCCC"> ok or what can you do with</font><font color="#E5E5E5"> these</font>

467
00:19:54,650 --> 00:20:01,309
recipes<font color="#E5E5E5"> now unfortunately for</font><font color="#CCCCCC"> me Mozilla</font>

468
00:19:58,970 --> 00:20:03,499
was smart enough<font color="#CCCCCC"> to sign these</font><font color="#E5E5E5"> recipes</font>

469
00:20:01,309 --> 00:20:05,749
so I couldn't<font color="#CCCCCC"> just make</font><font color="#E5E5E5"> my own malicious</font>

470
00:20:03,499 --> 00:20:09,440
extension and then install install that

471
00:20:05,749 --> 00:20:13,070
<font color="#E5E5E5">on 50 million computers but what I could</font>

472
00:20:09,440 --> 00:20:14,450
do was replay<font color="#E5E5E5"> old recipes</font><font color="#CCCCCC"> so for a start</font>

473
00:20:13,070 --> 00:20:15,830
<font color="#E5E5E5">I</font><font color="#CCCCCC"> could reinstall the mr.</font><font color="#E5E5E5"> robot</font>

474
00:20:14,450 --> 00:20:20,450
extension on every one which<font color="#E5E5E5"> would</font><font color="#CCCCCC"> been</font>

475
00:20:15,830 --> 00:20:23,720
<font color="#CCCCCC">hilarious</font><font color="#E5E5E5"> but more practically speaking</font>

476
00:20:20,450 --> 00:20:25,820
I could look<font color="#CCCCCC"> through all the extensions</font>

477
00:20:23,720 --> 00:20:27,889
<font color="#CCCCCC">that had ever been</font><font color="#E5E5E5"> been supported</font><font color="#CCCCCC"> by</font>

478
00:20:25,820 --> 00:20:29,899
this system<font color="#E5E5E5"> find one with a known</font>

479
00:20:27,889 --> 00:20:31,969
vulnerability<font color="#E5E5E5"> and then basically</font>

480
00:20:29,899 --> 00:20:35,830
forcibly inflict<font color="#CCCCCC"> that vulnerability on</font>

481
00:20:31,970 --> 00:20:38,419
every copy of<font color="#E5E5E5"> Firefox worldwide also</font>

482
00:20:35,830 --> 00:20:41,539
<font color="#E5E5E5">there were some unsigned versions of</font>

483
00:20:38,419 --> 00:20:44,450
these<font color="#E5E5E5"> recipes which are used by Firefox</font>

484
00:20:41,539 --> 00:20:47,440
<font color="#CCCCCC">4 they are apparently used by</font><font color="#E5E5E5"> Mumbai by</font>

485
00:20:44,450 --> 00:20:50,539
<font color="#E5E5E5">Mozilla's</font><font color="#CCCCCC"> back-end</font><font color="#E5E5E5"> recipe development</font>

486
00:20:47,440 --> 00:20:52,190
<font color="#E5E5E5">infrastructure so I could</font><font color="#CCCCCC"> potentially</font>

487
00:20:50,539 --> 00:20:54,019
have used that to<font color="#E5E5E5"> gain access to</font><font color="#CCCCCC"> that</font>

488
00:20:52,190 --> 00:20:56,179
infrastructure<font color="#CCCCCC"> got hold of the signing</font>

489
00:20:54,019 --> 00:20:59,509
key<font color="#E5E5E5"> and then got my 50 million browser</font>

490
00:20:56,179 --> 00:21:07,789
botnet<font color="#CCCCCC"> they</font><font color="#E5E5E5"> patched this one remarkably</font>

491
00:20:59,509 --> 00:21:10,009
fast when I reported it so reoccurring

492
00:21:07,789 --> 00:21:11,720
theme<font color="#CCCCCC"> in cache poisoning is that</font><font color="#E5E5E5"> we'll</font>

493
00:21:10,009 --> 00:21:13,399
find some kind of unkeyed input and at

494
00:21:11,720 --> 00:21:15,860
first<font color="#E5E5E5"> glance it will look</font><font color="#CCCCCC"> completely</font>

495
00:21:13,399 --> 00:21:18,379
useless<font color="#CCCCCC"> like</font><font color="#E5E5E5"> this exported host header</font>

496
00:21:15,860 --> 00:21:21,918
<font color="#E5E5E5">on this</font><font color="#CCCCCC"> website</font><font color="#E5E5E5"> of a well-known computer</font>

497
00:21:18,379 --> 00:21:23,869
game that<font color="#CCCCCC"> I can't name</font><font color="#E5E5E5"> this value is</font>

498
00:21:21,919 --> 00:21:25,909
reflected in the domain attribute of the

499
00:21:23,869 --> 00:21:29,389
<font color="#CCCCCC">setcookie header</font><font color="#E5E5E5"> now as far as</font><font color="#CCCCCC"> I know</font>

500
00:21:25,909 --> 00:21:32,360
that's more or less useless<font color="#E5E5E5"> also on this</font>

501
00:21:29,389 --> 00:21:34,219
website<font color="#E5E5E5"> the exported scheme header</font><font color="#CCCCCC"> if</font>

502
00:21:32,360 --> 00:21:37,369
you set<font color="#E5E5E5"> that</font><font color="#CCCCCC"> value to anything</font><font color="#E5E5E5"> other</font>

503
00:21:34,220 --> 00:21:41,649
than<font color="#CCCCCC"> HTTPS the server responds with a</font>

504
00:21:37,369 --> 00:21:44,899
redirect<font color="#CCCCCC"> to itself once again harmless</font>

505
00:21:41,649 --> 00:21:47,418
but if you send both<font color="#E5E5E5"> of</font><font color="#CCCCCC"> these headers</font><font color="#E5E5E5"> at</font>

506
00:21:44,899 --> 00:21:50,289
<font color="#E5E5E5">the same time then suddenly we've</font><font color="#CCCCCC"> got a</font>

507
00:21:47,419 --> 00:21:52,279
redirect<font color="#E5E5E5"> to a</font><font color="#CCCCCC"> website of our choice and</font>

508
00:21:50,289 --> 00:21:54,200
because<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is being done</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> the server</font>

509
00:21:52,279 --> 00:21:57,470
level<font color="#CCCCCC"> and they've got the caching setup</font>

510
00:21:54,200 --> 00:22:00,559
<font color="#E5E5E5">right</font><font color="#CCCCCC"> I can effectively replace any</font>

511
00:21:57,470 --> 00:22:02,869
response on the entire server<font color="#E5E5E5"> any URL on</font>

512
00:22:00,559 --> 00:22:05,119
the<font color="#E5E5E5"> whole site with a redirect to</font><font color="#CCCCCC"> my</font>

513
00:22:02,869 --> 00:22:07,580
site<font color="#CCCCCC"> so</font><font color="#E5E5E5"> using that I could read I met</font>

514
00:22:05,119 --> 00:22:10,789
post requests to<font color="#CCCCCC"> still</font><font color="#E5E5E5"> see surf tokens</font>

515
00:22:07,580 --> 00:22:13,730
<font color="#E5E5E5">and I could</font><font color="#CCCCCC"> also redirect JSON fetches</font>

516
00:22:10,789 --> 00:22:14,690
<font color="#E5E5E5">in order to serve up malicious JSON and</font>

517
00:22:13,730 --> 00:22:16,160
once again<font color="#CCCCCC"> get</font>

518
00:22:14,690 --> 00:22:18,200
based cross-site scripting on various

519
00:22:16,160 --> 00:22:21,100
pages<font color="#E5E5E5"> much like why did earlier on</font>

520
00:22:18,200 --> 00:22:21,100
data.gov

521
00:22:22,090 --> 00:22:27,770
now some systems go beyond using headers

522
00:22:25,940 --> 00:22:30,410
to<font color="#E5E5E5"> generate your goals and their user</font>

523
00:22:27,770 --> 00:22:31,100
for internal routing which is really

524
00:22:30,410 --> 00:22:34,790
pretty<font color="#CCCCCC"> cool</font>

525
00:22:31,100 --> 00:22:37,189
so go<font color="#E5E5E5"> tyre comm is hosted using</font><font color="#CCCCCC"> HubSpot</font>

526
00:22:34,790 --> 00:22:40,010
and<font color="#E5E5E5"> HubSpot appear to use the exported</font>

527
00:22:37,190 --> 00:22:42,230
server header to work out<font color="#E5E5E5"> which client</font>

528
00:22:40,010 --> 00:22:43,940
you are<font color="#E5E5E5"> now we can't exploit this</font>

529
00:22:42,230 --> 00:22:47,270
directly<font color="#E5E5E5"> because</font><font color="#CCCCCC"> they're encoding the</font>

530
00:22:43,940 --> 00:22:50,360
input to<font color="#E5E5E5"> exploit this I needed</font><font color="#CCCCCC"> to</font>

531
00:22:47,270 --> 00:22:52,520
register myself<font color="#E5E5E5"> on good</font><font color="#CCCCCC"> higher com make</font>

532
00:22:50,360 --> 00:22:53,929
my own website<font color="#CCCCCC"> but some malicious HTML</font>

533
00:22:52,520 --> 00:22:56,120
on that which they let me because<font color="#E5E5E5"> it's</font>

534
00:22:53,930 --> 00:22:58,910
my own<font color="#CCCCCC"> website and then trick good</font><font color="#E5E5E5"> hire</font>

535
00:22:56,120 --> 00:23:03,560
<font color="#E5E5E5">into serving that up</font><font color="#CCCCCC"> and trick</font><font color="#E5E5E5"> HubSpot</font>

536
00:22:58,910 --> 00:23:06,260
<font color="#E5E5E5">into serving that up on good fire com so</font>

537
00:23:03,560 --> 00:23:07,520
using<font color="#E5E5E5"> this and then of course cloud for</font>

538
00:23:06,260 --> 00:23:11,360
<font color="#CCCCCC">that</font><font color="#E5E5E5"> would</font><font color="#CCCCCC"> cache that</font><font color="#E5E5E5"> and serve out to</font>

539
00:23:07,520 --> 00:23:14,360
everybody<font color="#E5E5E5"> accessing code</font><font color="#CCCCCC"> wire so</font><font color="#E5E5E5"> using</font>

540
00:23:11,360 --> 00:23:17,350
this I could take full control<font color="#E5E5E5"> over any</font>

541
00:23:14,360 --> 00:23:20,870
page on any<font color="#E5E5E5"> website hosted on HubSpot</font>

542
00:23:17,350 --> 00:23:21,949
<font color="#E5E5E5">now I reported this to good hire because</font>

543
00:23:20,870 --> 00:23:24,530
<font color="#E5E5E5">those were the guys with the bug bounty</font>

544
00:23:21,950 --> 00:23:26,900
<font color="#E5E5E5">program and they passed it on to HubSpot</font>

545
00:23:24,530 --> 00:23:31,879
who had decided<font color="#E5E5E5"> to resolve the issue by</font>

546
00:23:26,900 --> 00:23:34,790
permanently banning my IP address<font color="#E5E5E5"> which</font>

547
00:23:31,880 --> 00:23:36,440
wasn't<font color="#E5E5E5"> very polite</font><font color="#CCCCCC"> but I've checked back</font>

548
00:23:34,790 --> 00:23:38,899
and it does look<font color="#CCCCCC"> like</font><font color="#E5E5E5"> they have fixed</font>

549
00:23:36,440 --> 00:23:40,340
<font color="#E5E5E5">the root issue so if you if you're</font><font color="#CCCCCC"> using</font>

550
00:23:38,900 --> 00:23:45,440
<font color="#E5E5E5">hub spot then I think</font><font color="#CCCCCC"> you're probably</font>

551
00:23:40,340 --> 00:23:48,740
<font color="#CCCCCC">okay right now this one is my second</font>

552
00:23:45,440 --> 00:23:51,260
<font color="#CCCCCC">favorite</font><font color="#E5E5E5"> attack in this research partly</font>

553
00:23:48,740 --> 00:23:53,900
<font color="#E5E5E5">because I'm exploiting a security</font>

554
00:23:51,260 --> 00:23:57,200
company<font color="#CCCCCC"> because they use their own</font>

555
00:23:53,900 --> 00:23:59,500
security<font color="#E5E5E5"> products on their website so</font>

556
00:23:57,200 --> 00:24:04,570
<font color="#CCCCCC">blog</font><font color="#E5E5E5"> CloudFlare</font><font color="#CCCCCC"> com</font>

557
00:23:59,500 --> 00:24:07,340
he's hosted using ghost and ghost<font color="#CCCCCC"> is</font>

558
00:24:04,570 --> 00:24:09,080
doing something<font color="#E5E5E5"> with the exported host</font>

559
00:24:07,340 --> 00:24:13,399
header but if we try the attack that

560
00:24:09,080 --> 00:24:14,929
<font color="#CCCCCC">just works on hub spot</font><font color="#E5E5E5"> and specify our</font>

561
00:24:13,400 --> 00:24:17,600
own domain name after<font color="#E5E5E5"> signing up with</font>

562
00:24:14,930 --> 00:24:19,810
ghost<font color="#E5E5E5"> it doesn't work they give the</font>

563
00:24:17,600 --> 00:24:22,939
<font color="#E5E5E5">correct response after a mysterious</font>

564
00:24:19,810 --> 00:24:26,200
<font color="#CCCCCC">ten-second wait</font><font color="#E5E5E5"> which I</font><font color="#CCCCCC"> never figured</font>

565
00:24:22,940 --> 00:24:28,610
<font color="#E5E5E5">out the cause off to exploit this site</font>

566
00:24:26,200 --> 00:24:31,690
<font color="#E5E5E5">we need to kind of hit a different point</font>

567
00:24:28,610 --> 00:24:34,939
in<font color="#CCCCCC"> ghosts</font><font color="#E5E5E5"> stack and we can do that by</font>

568
00:24:31,690 --> 00:24:37,429
instead<font color="#E5E5E5"> of</font><font color="#CCCCCC"> specifying</font><font color="#E5E5E5"> our custom</font><font color="#CCCCCC"> ghost</font>

569
00:24:34,940 --> 00:24:39,649
<font color="#E5E5E5">domain name we can specify our ghost</font>

570
00:24:37,429 --> 00:24:41,870
subdomain<font color="#E5E5E5"> which triggers a redirect to</font>

571
00:24:39,649 --> 00:24:44,239
<font color="#CCCCCC">our custom domain</font><font color="#E5E5E5"> so using this I could</font>

572
00:24:41,870 --> 00:24:49,340
replace any response on that<font color="#E5E5E5"> site with a</font>

573
00:24:44,240 --> 00:24:51,409
redirect to<font color="#CCCCCC"> my domain</font><font color="#E5E5E5"> however when it</font>

574
00:24:49,340 --> 00:24:53,769
came to getting<font color="#E5E5E5"> this stored in the cache</font>

575
00:24:51,409 --> 00:24:55,940
<font color="#CCCCCC">things</font><font color="#E5E5E5"> got a bit tricky because</font>

576
00:24:53,769 --> 00:24:57,769
<font color="#CCCCCC">CloudFlare site was configured to only</font>

577
00:24:55,940 --> 00:25:02,659
cache<font color="#E5E5E5"> things with</font><font color="#CCCCCC"> certain file</font>

578
00:24:57,769 --> 00:25:04,970
extensions so I could read<font color="#CCCCCC"> over</font><font color="#E5E5E5"> images</font>

579
00:25:02,659 --> 00:25:06,950
<font color="#E5E5E5">which was kind of funny I could just</font>

580
00:25:04,970 --> 00:25:10,730
hijack any images on any of their blog

581
00:25:06,950 --> 00:25:13,539
<font color="#CCCCCC">posts but when I tried to do</font><font color="#E5E5E5"> something</font>

582
00:25:10,730 --> 00:25:16,309
useful<font color="#E5E5E5"> with</font><font color="#CCCCCC"> it and hijack</font><font color="#E5E5E5"> JavaScript</font><font color="#CCCCCC"> I</font>

583
00:25:13,539 --> 00:25:17,990
ran into<font color="#E5E5E5"> quite a significant problem</font>

584
00:25:16,309 --> 00:25:20,809
which is that<font color="#CCCCCC"> this redirect the ghost</font>

585
00:25:17,990 --> 00:25:24,200
was issuing was using the HTTP protocol

586
00:25:20,809 --> 00:25:26,299
rather than<font color="#E5E5E5"> HTTP and that means that</font>

587
00:25:24,200 --> 00:25:28,940
browsers mixed content<font color="#CCCCCC"> protection kicks</font>

588
00:25:26,299 --> 00:25:31,158
in and blocks this redirect effectively

589
00:25:28,940 --> 00:25:34,820
completely preventing my attack from

590
00:25:31,159 --> 00:25:38,210
working how I spent ages trying to find

591
00:25:34,820 --> 00:25:40,639
<font color="#CCCCCC">Oh</font><font color="#E5E5E5"> to find a way around this and</font><font color="#CCCCCC"> how I</font>

592
00:25:38,210 --> 00:25:42,649
was<font color="#E5E5E5"> even considering just contacting</font>

593
00:25:40,639 --> 00:25:46,279
ghost support and just<font color="#E5E5E5"> asking them to</font>

594
00:25:42,649 --> 00:25:48,018
<font color="#E5E5E5">change the redirect to HTTPS but never</font>

595
00:25:46,279 --> 00:25:50,419
obviously<font color="#E5E5E5"> somebody</font><font color="#CCCCCC"> epic owns</font><font color="#E5E5E5"> with that</font>

596
00:25:48,019 --> 00:25:53,389
plan so I didn't go<font color="#E5E5E5"> ahead with that in</font>

597
00:25:50,419 --> 00:25:56,960
the end what I decided to do instead<font color="#E5E5E5"> was</font>

598
00:25:53,389 --> 00:25:59,389
<font color="#E5E5E5">to try and crowdsource a solution so I</font>

599
00:25:56,960 --> 00:26:01,220
built a replica<font color="#E5E5E5"> of this mixed</font><font color="#CCCCCC"> content</font>

600
00:25:59,389 --> 00:26:03,649
problem<font color="#CCCCCC"> and I stuck it in my</font><font color="#E5E5E5"> online</font>

601
00:26:01,220 --> 00:26:05,960
hacking<font color="#E5E5E5"> game</font><font color="#CCCCCC"> and then I tweeted saying</font>

602
00:26:03,649 --> 00:26:08,360
here's a challenge<font color="#CCCCCC"> there's no known</font>

603
00:26:05,960 --> 00:26:10,340
solution and the first person to to

604
00:26:08,360 --> 00:26:13,610
solve it<font color="#E5E5E5"> I will get half the back half</font>

605
00:26:10,340 --> 00:26:16,039
the<font color="#E5E5E5"> bug bounty and that led to a great</font>

606
00:26:13,610 --> 00:26:20,779
community response and<font color="#CCCCCC"> two solid</font>

607
00:26:16,039 --> 00:26:23,330
<font color="#E5E5E5">solutions the first</font><font color="#CCCCCC"> one was someone</font>

608
00:26:20,779 --> 00:26:25,639
found<font color="#CCCCCC"> their in</font><font color="#E5E5E5"> Safari</font><font color="#CCCCCC"> if the</font><font color="#E5E5E5"> website</font>

609
00:26:23,330 --> 00:26:29,029
<font color="#E5E5E5">you'll be directing to is in safaris</font>

610
00:26:25,639 --> 00:26:31,370
strict Transport Security cache<font color="#CCCCCC"> then it</font>

611
00:26:29,029 --> 00:26:33,760
will get<font color="#E5E5E5"> automatically upgraded to HTTPS</font>

612
00:26:31,370 --> 00:26:36,320
before the mixed content protection

613
00:26:33,760 --> 00:26:38,800
<font color="#E5E5E5">block happens so that means I can</font>

614
00:26:36,320 --> 00:26:43,460
exploit Safari users

615
00:26:38,800 --> 00:26:47,899
also someone<font color="#E5E5E5"> then found in Microsoft</font>

616
00:26:43,460 --> 00:26:51,740
edge if your<font color="#E5E5E5"> response</font><font color="#CCCCCC"> sent</font><font color="#E5E5E5"> over HTTP is</font>

617
00:26:47,900 --> 00:26:55,190
a 302 redirect<font color="#E5E5E5"> to HTTPS URL edge</font><font color="#CCCCCC"> will</font>

618
00:26:51,740 --> 00:26:57,290
just follow<font color="#E5E5E5"> that and execute it which is</font>

619
00:26:55,190 --> 00:26:58,790
which is<font color="#E5E5E5"> great for me so this so that</font>

620
00:26:57,290 --> 00:27:02,120
<font color="#E5E5E5">means this exploit will work on edge</font>

621
00:26:58,790 --> 00:27:04,879
users as well<font color="#E5E5E5"> and it's also a full mixed</font>

622
00:27:02,120 --> 00:27:06,949
content bypass<font color="#CCCCCC"> edge so if there's any</font>

623
00:27:04,880 --> 00:27:09,560
<font color="#E5E5E5">Microsoft people in the audience you</font>

624
00:27:06,950 --> 00:27:11,630
might want to look at<font color="#E5E5E5"> at that one so</font>

625
00:27:09,560 --> 00:27:13,820
using this the end result<font color="#E5E5E5"> is if you went</font>

626
00:27:11,630 --> 00:27:17,510
<font color="#E5E5E5">to blogs or CloudFlare comm or any other</font>

627
00:27:13,820 --> 00:27:20,240
website hosted on<font color="#E5E5E5"> ghost org</font>

628
00:27:17,510 --> 00:27:21,920
I could take full control<font color="#E5E5E5"> over the site</font>

629
00:27:20,240 --> 00:27:24,080
over your account on there if<font color="#CCCCCC"> you were</font>

630
00:27:21,920 --> 00:27:25,550
using edge or<font color="#E5E5E5"> Safari and if not well I</font>

631
00:27:24,080 --> 00:27:27,470
could still hide<font color="#CCCCCC"> write images which</font>

632
00:27:25,550 --> 00:27:33,560
would be useful<font color="#E5E5E5"> for tracking purposes at</font>

633
00:27:27,470 --> 00:27:38,750
least right now<font color="#E5E5E5"> things are</font><font color="#CCCCCC"> beginning</font><font color="#E5E5E5"> to</font>

634
00:27:33,560 --> 00:27:41,659
<font color="#E5E5E5">get</font><font color="#CCCCCC"> more difficult so here</font><font color="#E5E5E5"> using this X</font>

635
00:27:38,750 --> 00:27:45,380
<font color="#E5E5E5">footed host header yet again we can take</font>

636
00:27:41,660 --> 00:27:47,300
control<font color="#E5E5E5"> over this Open Graph</font><font color="#CCCCCC"> euro</font><font color="#E5E5E5"> meta</font>

637
00:27:45,380 --> 00:27:48,710
<font color="#E5E5E5">property we can't break out and get</font>

638
00:27:47,300 --> 00:27:52,120
<font color="#CCCCCC">Exorcist so</font><font color="#E5E5E5"> we need to</font><font color="#CCCCCC"> figure</font><font color="#E5E5E5"> out what</font>

639
00:27:48,710 --> 00:27:54,800
this<font color="#CCCCCC"> property is for Open Graph is a</font>

640
00:27:52,120 --> 00:27:57,350
protocol by<font color="#E5E5E5"> Facebook</font><font color="#CCCCCC"> for specifying what</font>

641
00:27:54,800 --> 00:27:58,790
happens when your<font color="#CCCCCC"> website is shared</font><font color="#E5E5E5"> so</font>

642
00:27:57,350 --> 00:28:00,949
if someone<font color="#E5E5E5"> presses the share button</font><font color="#CCCCCC"> on</font>

643
00:27:58,790 --> 00:28:05,540
your<font color="#CCCCCC"> page or if someone just shares your</font>

644
00:28:00,950 --> 00:28:08,360
URL on Facebook and so using this value

645
00:28:05,540 --> 00:28:10,639
<font color="#E5E5E5">that we can control we can effectively</font>

646
00:28:08,360 --> 00:28:13,760
make someone share arbitrary content

647
00:28:10,640 --> 00:28:15,440
when they<font color="#E5E5E5"> try to share this</font><font color="#CCCCCC"> webpage</font><font color="#E5E5E5"> now</font>

648
00:28:13,760 --> 00:28:17,060
it took to get this<font color="#E5E5E5"> cache that I had to</font>

649
00:28:15,440 --> 00:28:19,550
find a specific<font color="#CCCCCC"> page</font><font color="#E5E5E5"> on the site</font><font color="#CCCCCC"> that</font>

650
00:28:17,060 --> 00:28:22,370
had the right caching headers<font color="#E5E5E5"> and I also</font>

651
00:28:19,550 --> 00:28:25,430
had<font color="#E5E5E5"> to</font><font color="#CCCCCC"> specify this session</font><font color="#E5E5E5"> ID cookie</font>

652
00:28:22,370 --> 00:28:28,939
for some reason but even after<font color="#CCCCCC"> doing all</font>

653
00:28:25,430 --> 00:28:32,480
<font color="#CCCCCC">of that</font><font color="#E5E5E5"> my like hijacking attack wasn't</font>

654
00:28:28,940 --> 00:28:34,010
working and it turned out that this

655
00:28:32,480 --> 00:28:36,050
<font color="#CCCCCC">target was using</font><font color="#E5E5E5"> CloudFlare and they</font>

656
00:28:34,010 --> 00:28:38,060
have a lot of caches and<font color="#E5E5E5"> Facebook was</font>

657
00:28:36,050 --> 00:28:40,879
hitting a different cache from the one

658
00:28:38,060 --> 00:28:44,240
that I was poisoning so<font color="#E5E5E5"> Facebook was</font>

659
00:28:40,880 --> 00:28:48,310
hitting a cache<font color="#E5E5E5"> that was in Atlanta so I</font>

660
00:28:44,240 --> 00:28:51,230
<font color="#CCCCCC">googled for</font><font color="#E5E5E5"> cheap VPN servers in Atlanta</font>

661
00:28:48,310 --> 00:28:52,269
found one and then use that<font color="#E5E5E5"> to do the</font>

662
00:28:51,230 --> 00:28:54,159
poisoning

663
00:28:52,269 --> 00:28:56,379
and that successfully<font color="#CCCCCC"> poisoned the fact</font>

664
00:28:54,159 --> 00:28:58,899
the<font color="#E5E5E5"> cash that Facebook was hit so here's</font>

665
00:28:56,379 --> 00:29:02,619
a quick demo<font color="#CCCCCC"> I've had to</font><font color="#E5E5E5"> redact it quite</font>

666
00:28:58,899 --> 00:29:04,599
heavily unfortunately<font color="#CCCCCC"> so on this webpage</font>

667
00:29:02,619 --> 00:29:07,949
<font color="#E5E5E5">well-known computer game someone</font><font color="#CCCCCC"> vs.</font>

668
00:29:04,599 --> 00:29:10,958
share and they end up<font color="#E5E5E5"> sharing my content</font>

669
00:29:07,950 --> 00:29:14,619
<font color="#E5E5E5">something particularly cool about this</font>

670
00:29:10,959 --> 00:29:18,700
is that<font color="#E5E5E5"> Facebook have their own cache so</font>

671
00:29:14,619 --> 00:29:20,228
that<font color="#CCCCCC"> malicious</font><font color="#E5E5E5"> open</font><font color="#CCCCCC"> bar fewer will get</font>

672
00:29:18,700 --> 00:29:22,239
cached in Facebook's<font color="#CCCCCC"> caches</font><font color="#E5E5E5"> will as</font>

673
00:29:20,229 --> 00:29:24,969
cloud<font color="#E5E5E5"> flares cache and that means that</font>

674
00:29:22,239 --> 00:29:26,799
even if they fix the vulnerability<font color="#E5E5E5"> and</font>

675
00:29:24,969 --> 00:29:28,839
then clear that clear the cowled flare

676
00:29:26,799 --> 00:29:31,089
cache<font color="#E5E5E5"> they will still continue to</font><font color="#CCCCCC"> have</font>

677
00:29:28,839 --> 00:29:32,799
their likes hijacked<font color="#E5E5E5"> until Facebook's</font>

678
00:29:31,089 --> 00:29:37,989
cache expires as well<font color="#CCCCCC"> so it's quite a</font>

679
00:29:32,799 --> 00:29:40,059
persistent<font color="#E5E5E5"> kind of attack so that</font><font color="#CCCCCC"> was</font>

680
00:29:37,989 --> 00:29:43,899
great<font color="#CCCCCC"> but</font><font color="#E5E5E5"> do we really need to hire a</font>

681
00:29:40,059 --> 00:29:46,269
VPS every single time that<font color="#CCCCCC"> we want to</font>

682
00:29:43,899 --> 00:29:47,968
<font color="#E5E5E5">poison a specific cache</font><font color="#CCCCCC"> whoa</font><font color="#E5E5E5"> I decided</font>

683
00:29:46,269 --> 00:29:51,219
<font color="#E5E5E5">to just do a bit of research to find</font><font color="#CCCCCC"> out</font>

684
00:29:47,969 --> 00:29:53,289
so<font color="#E5E5E5"> CloudFlare has a lot of cash caches</font>

685
00:29:51,219 --> 00:29:56,259
you can see them all here<font color="#CCCCCC"> and they have</font>

686
00:29:53,289 --> 00:29:58,179
this<font color="#E5E5E5"> fantastic feature which is on any</font>

687
00:29:56,259 --> 00:30:00,579
cloud<font color="#E5E5E5"> flower website you can send a</font>

688
00:29:58,179 --> 00:30:02,729
request<font color="#E5E5E5"> to CD and CGI slash trace and</font>

689
00:30:00,579 --> 00:30:05,079
you'll<font color="#E5E5E5"> get some metadata</font><font color="#CCCCCC"> back and</font>

690
00:30:02,729 --> 00:30:06,909
included in<font color="#CCCCCC"> that metadata</font><font color="#E5E5E5"> is the</font>

691
00:30:05,079 --> 00:30:12,399
highlighted line which<font color="#CCCCCC"> tells you which</font>

692
00:30:06,909 --> 00:30:15,009
cache your request has hit so I wrote a

693
00:30:12,399 --> 00:30:17,619
little<font color="#E5E5E5"> bash one-liner that</font><font color="#CCCCCC"> sends a</font>

694
00:30:15,009 --> 00:30:21,279
request<font color="#CCCCCC"> to my target</font><font color="#E5E5E5"> website to this</font>

695
00:30:17,619 --> 00:30:24,189
<font color="#E5E5E5">trace page and it wrote this request</font>

696
00:30:21,279 --> 00:30:28,269
through every single go through every

697
00:30:24,190 --> 00:30:29,769
single IP the<font color="#E5E5E5"> CloudFlare</font><font color="#CCCCCC"> oh</font><font color="#E5E5E5"> and then it</font>

698
00:30:28,269 --> 00:30:31,629
looks at which cache this request hits

699
00:30:29,769 --> 00:30:34,539
so<font color="#CCCCCC"> their end result</font><font color="#E5E5E5"> is that gave me a</font>

700
00:30:31,629 --> 00:30:39,129
list of which IP<font color="#CCCCCC"> I could send my request</font>

701
00:30:34,539 --> 00:30:42,700
to to poison which cache so generally

702
00:30:39,129 --> 00:30:44,559
speaking<font color="#E5E5E5"> I you you can poison cache in</font>

703
00:30:42,700 --> 00:30:46,899
Ann Arbor<font color="#CCCCCC"> key location worldwide without</font>

704
00:30:44,559 --> 00:30:52,779
<font color="#E5E5E5">using a VPS as long as you're</font><font color="#CCCCCC"> willing to</font>

705
00:30:46,899 --> 00:30:54,820
do a bit of<font color="#E5E5E5"> recon now at this stage</font>

706
00:30:52,779 --> 00:30:56,709
we've seen quite<font color="#E5E5E5"> a</font><font color="#CCCCCC"> few different attacks</font>

707
00:30:54,820 --> 00:30:59,408
<font color="#E5E5E5">almost</font><font color="#CCCCCC"> all of them have been doing some</font>

708
00:30:56,709 --> 00:31:01,899
kind<font color="#E5E5E5"> of host</font><font color="#CCCCCC"> overrides just because that</font>

709
00:30:59,409 --> 00:31:05,649
header is<font color="#E5E5E5"> widely supported by a lot of</font>

710
00:31:01,899 --> 00:31:06,080
frameworks<font color="#CCCCCC"> I'd</font><font color="#E5E5E5"> also found exploit using</font>

711
00:31:05,649 --> 00:31:08,320
some

712
00:31:06,080 --> 00:31:12,678
<font color="#CCCCCC">and one off head is like bucket</font>

713
00:31:08,320 --> 00:31:15,549
translate and<font color="#E5E5E5"> path underscore info</font><font color="#CCCCCC"> but</font>

714
00:31:12,679 --> 00:31:18,320
<font color="#E5E5E5">oh and I found one amazing one last week</font>

715
00:31:15,549 --> 00:31:19,879
<font color="#CCCCCC">that hasn't been</font><font color="#E5E5E5"> passed yet</font><font color="#CCCCCC"> but they had</font>

716
00:31:18,320 --> 00:31:22,158
a<font color="#E5E5E5"> Web Application Firewall</font><font color="#CCCCCC"> that was</font>

717
00:31:19,880 --> 00:31:25,100
scanning<font color="#E5E5E5"> all there were all the request</font>

718
00:31:22,159 --> 00:31:27,289
headers<font color="#E5E5E5"> for</font><font color="#CCCCCC"> Bert collaborator net so you</font>

719
00:31:25,100 --> 00:31:29,269
<font color="#E5E5E5">could specify an</font><font color="#CCCCCC"> arbitrary request</font>

720
00:31:27,289 --> 00:31:31,970
header<font color="#E5E5E5"> for Bert collaborated</font><font color="#CCCCCC"> on net in</font>

721
00:31:29,269 --> 00:31:34,070
it<font color="#E5E5E5"> and the wife would block this request</font>

722
00:31:31,970 --> 00:31:37,010
and then that would get<font color="#E5E5E5"> saved in the</font>

723
00:31:34,070 --> 00:31:39,350
cache<font color="#CCCCCC"> so you could effectively</font><font color="#E5E5E5"> make the</font>

724
00:31:37,010 --> 00:31:41,929
<font color="#E5E5E5">whack think that every single visitor to</font>

725
00:31:39,350 --> 00:31:45,668
any page<font color="#E5E5E5"> on the website</font><font color="#CCCCCC"> was a hacker</font><font color="#E5E5E5"> and</font>

726
00:31:41,929 --> 00:31:48,350
just<font color="#CCCCCC"> pop up anyway</font>

727
00:31:45,669 --> 00:31:51,169
why won't<font color="#CCCCCC"> it introduce you to is my</font>

728
00:31:48,350 --> 00:31:54,320
favorite header which<font color="#CCCCCC"> is the ex original</font>

729
00:31:51,169 --> 00:31:57,260
URL header<font color="#E5E5E5"> it also has a companion which</font>

730
00:31:54,320 --> 00:31:59,090
is<font color="#CCCCCC"> ex</font><font color="#E5E5E5"> rewrite URL which is supported on</font>

731
00:31:57,260 --> 00:32:03,320
<font color="#E5E5E5">the same systems and does exactly the</font>

732
00:31:59,090 --> 00:32:07,100
same<font color="#E5E5E5"> thing this header overrides the</font>

733
00:32:03,320 --> 00:32:09,168
path that's used<font color="#E5E5E5"> by the server so</font><font color="#CCCCCC"> even</font>

734
00:32:07,100 --> 00:32:11,870
before we get into cache poisoning<font color="#E5E5E5"> it's</font>

735
00:32:09,169 --> 00:32:14,179
really quite useful<font color="#CCCCCC"> because for example</font>

736
00:32:11,870 --> 00:32:18,229
on<font color="#CCCCCC"> unities</font><font color="#E5E5E5"> website</font><font color="#CCCCCC"> there my</font><font color="#E5E5E5"> favorite</font>

737
00:32:14,179 --> 00:32:20,299
example if we access slash admin<font color="#E5E5E5"> they've</font>

738
00:32:18,230 --> 00:32:22,760
got a<font color="#CCCCCC"> front-end server</font><font color="#E5E5E5"> that blocks</font><font color="#CCCCCC"> that</font>

739
00:32:20,299 --> 00:32:24,529
but if you put slash admin in<font color="#E5E5E5"> the ex</font>

740
00:32:22,760 --> 00:32:26,929
original URL<font color="#CCCCCC"> their front in server</font>

741
00:32:24,529 --> 00:32:30,080
doesn't<font color="#E5E5E5"> see this header and lets it</font>

742
00:32:26,929 --> 00:32:31,970
<font color="#CCCCCC">through</font><font color="#E5E5E5"> now the reason this head is so</font>

743
00:32:30,080 --> 00:32:35,120
awesome is because it's<font color="#E5E5E5"> supported</font><font color="#CCCCCC"> by an</font>

744
00:32:31,970 --> 00:32:37,309
unbelievable<font color="#E5E5E5"> number of systems well</font><font color="#CCCCCC"> I</font>

745
00:32:35,120 --> 00:32:40,239
originally spotted this<font color="#E5E5E5"> header on some</font>

746
00:32:37,309 --> 00:32:44,090
targets that<font color="#E5E5E5"> were running Drupal 8 and</font>

747
00:32:40,240 --> 00:32:46,130
when I reported it<font color="#CCCCCC"> to Drupal the</font>

748
00:32:44,090 --> 00:32:48,769
developer was like what is<font color="#E5E5E5"> this header</font>

749
00:32:46,130 --> 00:32:50,980
<font color="#E5E5E5">I've never seen this before and I can't</font>

750
00:32:48,769 --> 00:32:55,279
find any references to in our code base

751
00:32:50,980 --> 00:32:59,029
<font color="#E5E5E5">and it turns out</font><font color="#CCCCCC"> Drupal 8</font><font color="#E5E5E5"> is partly</font>

752
00:32:55,279 --> 00:33:00,440
built<font color="#E5E5E5"> on</font><font color="#CCCCCC"> symphony and</font><font color="#E5E5E5"> symphony has this</font>

753
00:32:59,029 --> 00:33:02,299
header in it but the only reason<font color="#CCCCCC"> that</font>

754
00:33:00,440 --> 00:33:06,260
the symphony framework has<font color="#E5E5E5"> this header</font>

755
00:33:02,299 --> 00:33:08,059
is<font color="#CCCCCC"> become</font><font color="#E5E5E5"> because it comes from</font><font color="#CCCCCC"> Zend</font><font color="#E5E5E5"> so</font>

756
00:33:06,260 --> 00:33:09,919
I think if<font color="#CCCCCC"> and if in effect</font><font color="#E5E5E5"> if you're</font>

757
00:33:08,059 --> 00:33:11,178
using any framework that's built on<font color="#E5E5E5"> a</font>

758
00:33:09,919 --> 00:33:13,940
framework that's<font color="#E5E5E5"> me want a framework</font>

759
00:33:11,179 --> 00:33:17,149
<font color="#CCCCCC">that using Zend you end up supporting</font>

760
00:33:13,940 --> 00:33:19,789
this header<font color="#E5E5E5"> so let's have a look</font><font color="#CCCCCC"> at what</font>

761
00:33:17,149 --> 00:33:24,799
we can<font color="#E5E5E5"> do with it</font>

762
00:33:19,789 --> 00:33:26,929
here<font color="#CCCCCC"> yes</font><font color="#E5E5E5"> so if the target is using an</font>

763
00:33:24,799 --> 00:33:29,899
external cash like<font color="#E5E5E5"> CloudFlare like every</font>

764
00:33:26,929 --> 00:33:33,320
example<font color="#CCCCCC"> I've shown you so far then we</font>

765
00:33:29,899 --> 00:33:39,529
can replace any<font color="#E5E5E5"> path on the server with</font>

766
00:33:33,320 --> 00:33:42,499
<font color="#CCCCCC">the response to any other path</font><font color="#E5E5E5"> so for</font>

767
00:33:39,529 --> 00:33:45,529
<font color="#E5E5E5">example on store unity</font><font color="#CCCCCC"> comm</font><font color="#E5E5E5"> we can't do</font>

768
00:33:42,499 --> 00:33:47,960
anything with the query because<font color="#E5E5E5"> the</font>

769
00:33:45,529 --> 00:33:50,419
query in that header is ignored<font color="#E5E5E5"> but we</font>

770
00:33:47,960 --> 00:33:52,309
can<font color="#CCCCCC"> sort the paths</font><font color="#E5E5E5"> around so that effect</font>

771
00:33:50,419 --> 00:33:55,639
of sending<font color="#E5E5E5"> this request to their server</font>

772
00:33:52,309 --> 00:33:57,799
<font color="#CCCCCC">is if someone tries to fetch the unity</font>

773
00:33:55,639 --> 00:34:02,320
for education page<font color="#E5E5E5"> they get the unity</font>

774
00:33:57,799 --> 00:34:05,210
for gambling page which looks<font color="#CCCCCC"> like</font><font color="#E5E5E5"> this</font>

775
00:34:02,320 --> 00:34:06,859
<font color="#CCCCCC">so that's</font><font color="#E5E5E5"> definitely entertaining and</font>

776
00:34:05,210 --> 00:34:08,569
obviously there's more<font color="#E5E5E5"> harmful things we</font>

777
00:34:06,859 --> 00:34:11,449
can do<font color="#E5E5E5"> that do with this right like we</font>

778
00:34:08,569 --> 00:34:13,250
can swap the change<font color="#CCCCCC"> password page</font><font color="#E5E5E5"> for</font>

779
00:34:11,449 --> 00:34:17,029
the<font color="#E5E5E5"> logout page so you can't change your</font>

780
00:34:13,250 --> 00:34:19,699
password<font color="#E5E5E5"> but to really prove how</font>

781
00:34:17,030 --> 00:34:22,549
dangerous<font color="#E5E5E5"> this header is I need a case</font>

782
00:34:19,699 --> 00:34:26,408
study<font color="#E5E5E5"> and for the case</font><font color="#CCCCCC"> study I'm gonna</font>

783
00:34:22,549 --> 00:34:31,879
<font color="#E5E5E5">use a vanilla installation of Drupal 8</font>

784
00:34:26,409 --> 00:34:33,679
so<font color="#CCCCCC"> triple 8 also has an internal cache</font>

785
00:34:31,879 --> 00:34:36,558
which is<font color="#E5E5E5"> enabled by default and this</font>

786
00:34:33,679 --> 00:34:38,470
cache is aware of the<font color="#E5E5E5"> ex original URL</font>

787
00:34:36,559 --> 00:34:40,309
header so we shouldn't<font color="#E5E5E5"> be able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do</font>

788
00:34:38,469 --> 00:34:42,918
internal cache poisoning with this

789
00:34:40,309 --> 00:34:45,649
header<font color="#E5E5E5"> right but when my colleague</font>

790
00:34:42,918 --> 00:34:47,179
<font color="#CCCCCC">gareth hayes</font><font color="#E5E5E5"> was helping me out</font><font color="#CCCCCC"> testing</font>

791
00:34:45,649 --> 00:34:50,629
one<font color="#CCCCCC"> of these sites he noticed</font><font color="#E5E5E5"> something</font>

792
00:34:47,179 --> 00:34:52,940
wasn't quite<font color="#CCCCCC"> right and</font><font color="#E5E5E5"> eventually</font>

793
00:34:50,629 --> 00:34:55,489
figured out that<font color="#CCCCCC"> Drupal's internal cache</font>

794
00:34:52,940 --> 00:34:57,980
has a<font color="#E5E5E5"> bug in how it handles this ex</font>

795
00:34:55,489 --> 00:34:59,799
original URL header for probably because

796
00:34:57,980 --> 00:35:03,049
they don't<font color="#CCCCCC"> know that the head of exists</font>

797
00:34:59,799 --> 00:35:06,140
<font color="#CCCCCC">so this cache thinks that the query</font>

798
00:35:03,049 --> 00:35:08,450
string in this header is<font color="#CCCCCC"> used</font><font color="#E5E5E5"> so what</font>

799
00:35:06,140 --> 00:35:09,890
we've got<font color="#CCCCCC"> is</font><font color="#E5E5E5"> kind of the inverse of</font><font color="#CCCCCC"> what</font>

800
00:35:08,450 --> 00:35:11,450
<font color="#CCCCCC">I just</font><font color="#E5E5E5"> showed</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> so now we're doing</font>

801
00:35:09,890 --> 00:35:14,480
cache<font color="#CCCCCC"> poisoning on a Drupal site that</font>

802
00:35:11,450 --> 00:35:17,210
does not have an<font color="#E5E5E5"> external cache we can't</font>

803
00:35:14,480 --> 00:35:19,010
do anything with the path<font color="#E5E5E5"> but we can</font>

804
00:35:17,210 --> 00:35:20,630
<font color="#E5E5E5">effectively replace the response to any</font>

805
00:35:19,010 --> 00:35:23,000
query string with the response to any

806
00:35:20,630 --> 00:35:24,799
other query so the in<font color="#CCCCCC"> resolved sending</font>

807
00:35:23,000 --> 00:35:26,390
<font color="#E5E5E5">this is if someone does a search</font><font color="#CCCCCC"> for</font>

808
00:35:24,799 --> 00:35:30,980
<font color="#CCCCCC">kittens they get search results</font><font color="#E5E5E5"> for</font>

809
00:35:26,390 --> 00:35:33,150
snuff and that's obviously that example

810
00:35:30,980 --> 00:35:37,319
<font color="#E5E5E5">is not that great but this is really</font>

811
00:35:33,150 --> 00:35:40,020
powerful by itself but for generic mass

812
00:35:37,319 --> 00:35:40,799
exploitation of Drupal sites<font color="#E5E5E5"> we need one</font>

813
00:35:40,020 --> 00:35:45,990
<font color="#CCCCCC">more ingredient</font>

814
00:35:40,799 --> 00:35:48,299
and luckily Drupal provides so Drupal

815
00:35:45,990 --> 00:35:50,729
<font color="#CCCCCC">has this feature on any response that's</font>

816
00:35:48,299 --> 00:35:53,880
a redirect<font color="#CCCCCC"> if you specify a parameter</font>

817
00:35:50,730 --> 00:35:56,609
<font color="#CCCCCC">called</font><font color="#E5E5E5"> destination you can overwrite the</font>

818
00:35:53,880 --> 00:35:58,170
destination<font color="#E5E5E5"> of the redirect and they do</font>

819
00:35:56,609 --> 00:35:59,880
some filtering<font color="#E5E5E5"> and stuff to try and make</font>

820
00:35:58,170 --> 00:36:01,740
<font color="#E5E5E5">sure this isn't a redirecting you to</font><font color="#CCCCCC"> an</font>

821
00:35:59,880 --> 00:36:05,400
external<font color="#CCCCCC"> site but we can bypass</font><font color="#E5E5E5"> that</font>

822
00:36:01,740 --> 00:36:07,288
fairly easily<font color="#E5E5E5"> so by itself</font>

823
00:36:05,400 --> 00:36:09,270
this is just an<font color="#CCCCCC"> open redirect</font><font color="#E5E5E5"> right it's</font>

824
00:36:07,289 --> 00:36:11,490
it's like<font color="#E5E5E5"> it's nothing but now we've got</font>

825
00:36:09,270 --> 00:36:16,109
<font color="#CCCCCC">all the ingredients that we need to</font>

826
00:36:11,490 --> 00:36:19,740
really<font color="#CCCCCC"> have some fun so business</font>

827
00:36:16,109 --> 00:36:22,619
<font color="#E5E5E5">Pinterest</font><font color="#CCCCCC"> comm uses Drupal and</font><font color="#E5E5E5"> on</font>

828
00:36:19,740 --> 00:36:27,450
<font color="#E5E5E5">certain pages they import</font><font color="#CCCCCC"> JavaScript</font>

829
00:36:22,619 --> 00:36:29,549
files via redirects so what we can do is

830
00:36:27,450 --> 00:36:32,038
we can use<font color="#E5E5E5"> internal cache poisoning to</font>

831
00:36:29,549 --> 00:36:34,500
change the parameters<font color="#CCCCCC"> on this JavaScript</font>

832
00:36:32,039 --> 00:36:36,630
import and using the ability to change

833
00:36:34,500 --> 00:36:39,569
<font color="#CCCCCC">parameters we're</font><font color="#E5E5E5"> going to inject the</font>

834
00:36:36,630 --> 00:36:41,730
destination parameter and the end result

835
00:36:39,569 --> 00:36:43,589
is<font color="#CCCCCC"> that when someone loads any of these</font>

836
00:36:41,730 --> 00:36:44,789
pages<font color="#E5E5E5"> on business</font><font color="#CCCCCC"> da pinterest calm</font>

837
00:36:43,589 --> 00:36:47,759
<font color="#E5E5E5">these pages that are meant to be</font>

838
00:36:44,789 --> 00:36:49,950
completely static<font color="#CCCCCC"> they end up importing</font>

839
00:36:47,760 --> 00:36:53,970
<font color="#CCCCCC">javascript from my website and I get</font>

840
00:36:49,950 --> 00:36:55,859
from control over<font color="#E5E5E5"> there a cap</font><font color="#CCCCCC"> so that's</font>

841
00:36:53,970 --> 00:36:58,078
<font color="#E5E5E5">pretty cool but that's still not a</font>

842
00:36:55,859 --> 00:36:59,788
<font color="#E5E5E5">full-on exploitation of all Drupal sites</font>

843
00:36:58,079 --> 00:37:04,950
because we have a light using<font color="#E5E5E5"> this we</font>

844
00:36:59,789 --> 00:37:07,170
<font color="#E5E5E5">can only hijack existing redirects what</font>

845
00:37:04,950 --> 00:37:11,700
we really want to do is hijack arbitrary

846
00:37:07,170 --> 00:37:14,099
responses from the server now in every

847
00:37:11,700 --> 00:37:16,230
example<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I've shown you so far we've</font>

848
00:37:14,099 --> 00:37:19,920
poisoned the cache<font color="#E5E5E5"> in order</font><font color="#CCCCCC"> to exploit</font>

849
00:37:16,230 --> 00:37:22,500
the end user<font color="#E5E5E5"> the victim but Drupal is</font>

850
00:37:19,920 --> 00:37:24,180
generally used with two caches<font color="#E5E5E5"> you've</font>

851
00:37:22,500 --> 00:37:26,430
got this internal cache that's<font color="#E5E5E5"> turned on</font>

852
00:37:24,180 --> 00:37:27,839
by default and<font color="#E5E5E5"> then every sort every</font>

853
00:37:26,430 --> 00:37:30,000
<font color="#E5E5E5">example of it that I've seen in the wild</font>

854
00:37:27,839 --> 00:37:31,890
<font color="#E5E5E5">has also had</font><font color="#CCCCCC"> another cache like varnish</font>

855
00:37:30,000 --> 00:37:35,940
because if you don't<font color="#E5E5E5"> have something like</font>

856
00:37:31,890 --> 00:37:37,770
<font color="#CCCCCC">that then it's incredibly slow</font><font color="#E5E5E5"> so what</font>

857
00:37:35,940 --> 00:37:41,400
<font color="#E5E5E5">if the victim of the first cache</font>

858
00:37:37,770 --> 00:37:44,400
poisoning attack is the other cache<font color="#CCCCCC"> we</font>

859
00:37:41,400 --> 00:37:45,890
can do a kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> two stage attack so the</font>

860
00:37:44,400 --> 00:37:47,270
first stage<font color="#CCCCCC"> is</font>

861
00:37:45,890 --> 00:37:48,920
<font color="#E5E5E5">roughly similar to what I just showed</font>

862
00:37:47,270 --> 00:37:51,770
<font color="#CCCCCC">you on business stop</font><font color="#E5E5E5"> Pinterest we're</font>

863
00:37:48,920 --> 00:37:55,060
gonna<font color="#CCCCCC"> poison an arbitrary redirect</font>

864
00:37:51,770 --> 00:37:58,090
response in the internal<font color="#E5E5E5"> triple cache</font>

865
00:37:55,060 --> 00:38:01,549
<font color="#E5E5E5">but then we can send</font><font color="#CCCCCC"> another request</font>

866
00:37:58,090 --> 00:38:04,070
<font color="#E5E5E5">which will effectively use the poisoned</font>

867
00:38:01,550 --> 00:38:07,550
internal cache to move<font color="#E5E5E5"> this poison to an</font>

868
00:38:04,070 --> 00:38:09,980
arbitrary location<font color="#E5E5E5"> in the external cache</font>

869
00:38:07,550 --> 00:38:11,780
and the end result of that<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> we</font>

870
00:38:09,980 --> 00:38:14,180
<font color="#E5E5E5">can replace any response on the server</font>

871
00:38:11,780 --> 00:38:16,160
with a redirect<font color="#E5E5E5"> to our site which is</font>

872
00:38:14,180 --> 00:38:18,440
really quite<font color="#CCCCCC"> powerful</font><font color="#E5E5E5"> browsers weren't</font>

873
00:38:16,160 --> 00:38:22,069
built with<font color="#E5E5E5"> that kind of attack in mind</font>

874
00:38:18,440 --> 00:38:23,780
and for example<font color="#E5E5E5"> on stored or unity comm</font>

875
00:38:22,070 --> 00:38:26,060
<font color="#CCCCCC">you can try and download the Unity</font>

876
00:38:23,780 --> 00:38:29,960
installer but<font color="#E5E5E5"> using this cache poisoning</font>

877
00:38:26,060 --> 00:38:32,060
<font color="#E5E5E5">you could rely back the download so they</font>

878
00:38:29,960 --> 00:38:33,830
would be on unity<font color="#CCCCCC"> com they click</font>

879
00:38:32,060 --> 00:38:35,870
<font color="#E5E5E5">download button</font><font color="#CCCCCC"> they're still on unity</font>

880
00:38:33,830 --> 00:38:40,730
calm but<font color="#CCCCCC"> the Installer</font><font color="#E5E5E5"> actually came</font>

881
00:38:35,870 --> 00:38:42,740
from my website<font color="#E5E5E5"> and it's malware and you</font>

882
00:38:40,730 --> 00:38:45,740
can use this<font color="#E5E5E5"> kind of technique on any</font>

883
00:38:42,740 --> 00:38:50,439
<font color="#E5E5E5">cooperate site so let's try and do a</font>

884
00:38:45,740 --> 00:38:52,009
quick demo of<font color="#E5E5E5"> this which is hopefully</font>

885
00:38:50,440 --> 00:38:55,310
going<font color="#E5E5E5"> to work</font>

886
00:38:52,010 --> 00:38:57,650
so here's as this is<font color="#E5E5E5"> have just a vanilla</font>

887
00:38:55,310 --> 00:38:59,390
installation of Drupal 8<font color="#E5E5E5"> the only</font>

888
00:38:57,650 --> 00:39:02,510
configuration I've done is I've turned

889
00:38:59,390 --> 00:39:03,200
on caching and I've put a varnish cache

890
00:39:02,510 --> 00:39:06,500
in front of it

891
00:39:03,200 --> 00:39:08,629
if so first let me<font color="#CCCCCC"> just quickly show</font><font color="#E5E5E5"> if</font>

892
00:39:06,500 --> 00:39:12,560
you<font color="#E5E5E5"> right</font><font color="#CCCCCC"> click until parameter</font><font color="#E5E5E5"> to guess</font>

893
00:39:08,630 --> 00:39:17,450
headers then that will find some headers

894
00:39:12,560 --> 00:39:19,790
hopefully<font color="#E5E5E5"> and all and also as of about</font>

895
00:39:17,450 --> 00:39:24,879
<font color="#E5E5E5">now there's an update to burp so the</font>

896
00:39:19,790 --> 00:39:29,420
<font color="#E5E5E5">active scan will also find this stuff</font>

897
00:39:24,880 --> 00:39:33,020
<font color="#CCCCCC">let's see ok well</font><font color="#E5E5E5"> the active scan worked</font>

898
00:39:29,420 --> 00:39:35,690
anyway so here we can see<font color="#CCCCCC"> that that's</font>

899
00:39:33,020 --> 00:39:37,940
<font color="#CCCCCC">spotted that</font><font color="#E5E5E5"> and for</font><font color="#CCCCCC"> my</font><font color="#E5E5E5"> know we'll</font>

900
00:39:35,690 --> 00:39:39,980
probably<font color="#CCCCCC"> find the headers eventually but</font>

901
00:39:37,940 --> 00:39:41,180
it's it's<font color="#E5E5E5"> trying millions and millions</font>

902
00:39:39,980 --> 00:39:45,050
of headers so it does take a<font color="#CCCCCC"> while</font>

903
00:39:41,180 --> 00:39:46,879
<font color="#E5E5E5">sometimes so let's try and do this</font>

904
00:39:45,050 --> 00:39:49,370
<font color="#E5E5E5">attack on it the first thing you need to</font>

905
00:39:46,880 --> 00:39:51,920
do is just find a redirects so we have

906
00:39:49,370 --> 00:39:54,529
one right<font color="#E5E5E5"> here</font><font color="#CCCCCC"> and then we're just</font><font color="#E5E5E5"> going</font>

907
00:39:51,920 --> 00:39:57,380
<font color="#CCCCCC">to take that</font><font color="#E5E5E5"> take that path and we're</font>

908
00:39:54,530 --> 00:39:59,660
gonna hit<font color="#CCCCCC"> it using the X original you're</font>

909
00:39:57,380 --> 00:40:02,210
headed and others<font color="#CCCCCC"> Destin</font>

910
00:39:59,660 --> 00:40:05,149
so now we're trying<font color="#CCCCCC"> to</font><font color="#E5E5E5"> poison the</font>

911
00:40:02,210 --> 00:40:06,680
internal<font color="#CCCCCC"> cache and that seems to be</font>

912
00:40:05,150 --> 00:40:11,150
working<font color="#CCCCCC"> and we've poisoned so we've</font>

913
00:40:06,680 --> 00:40:13,220
poisoned<font color="#CCCCCC"> that URL</font><font color="#E5E5E5"> on the</font><font color="#CCCCCC"> internal cache</font>

914
00:40:11,150 --> 00:40:15,290
<font color="#CCCCCC">Acin and so what we're going</font><font color="#E5E5E5"> to do now</font>

915
00:40:13,220 --> 00:40:17,689
is try<font color="#CCCCCC"> and shift</font><font color="#E5E5E5"> this poison into the</font>

916
00:40:15,290 --> 00:40:20,509
external cache so we're going<font color="#E5E5E5"> to leave</font>

917
00:40:17,690 --> 00:40:23,599
this head of<font color="#E5E5E5"> exactly the same</font><font color="#CCCCCC"> but change</font>

918
00:40:20,510 --> 00:40:29,210
<font color="#CCCCCC">the path</font><font color="#E5E5E5"> so we should get the same spots</font>

919
00:40:23,599 --> 00:40:31,580
<font color="#E5E5E5">hopefully yes great</font><font color="#CCCCCC"> so now the cache at</font>

920
00:40:29,210 --> 00:40:33,710
that point should be poisoned in varnish

921
00:40:31,580 --> 00:40:36,680
<font color="#E5E5E5">so now we're going to resend this this</font>

922
00:40:33,710 --> 00:40:38,150
<font color="#E5E5E5">request as a normal user would and it</font>

923
00:40:36,680 --> 00:40:42,109
looks like<font color="#E5E5E5"> it is poisoned</font>

924
00:40:38,150 --> 00:40:46,099
so now if<font color="#E5E5E5"> I just go to this website and</font>

925
00:40:42,109 --> 00:40:49,009
<font color="#E5E5E5">press the login button then with a bit</font>

926
00:40:46,099 --> 00:40:50,630
of luck<font color="#E5E5E5"> yeah we end up on</font><font color="#CCCCCC"> my hostile web</font>

927
00:40:49,010 --> 00:40:52,910
<font color="#CCCCCC">site which just has a</font><font color="#E5E5E5"> replica of the</font>

928
00:40:50,630 --> 00:41:05,300
login page<font color="#E5E5E5"> eagerly waiting for</font><font color="#CCCCCC"> your</font>

929
00:40:52,910 --> 00:41:07,310
credentials so there was a code<font color="#E5E5E5"> there</font>

930
00:41:05,300 --> 00:41:09,980
was a coordinated<font color="#E5E5E5"> security</font><font color="#CCCCCC"> released by</font>

931
00:41:07,310 --> 00:41:10,400
<font color="#CCCCCC">symfony drupal ones end</font><font color="#E5E5E5"> last week to fix</font>

932
00:41:09,980 --> 00:41:12,530
this<font color="#E5E5E5"> issue</font>

933
00:41:10,400 --> 00:41:15,800
<font color="#E5E5E5">it was super low profile so please</font>

934
00:41:12,530 --> 00:41:17,750
install<font color="#E5E5E5"> that if you haven't also there's</font>

935
00:41:15,800 --> 00:41:20,270
probably loads of other frameworks<font color="#E5E5E5"> based</font>

936
00:41:17,750 --> 00:41:22,400
on<font color="#CCCCCC"> Zend that won't back to port</font><font color="#E5E5E5"> this fix</font>

937
00:41:20,270 --> 00:41:24,349
for years so it's definitely still

938
00:41:22,400 --> 00:41:26,660
something<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you want to watch out for</font>

939
00:41:24,349 --> 00:41:28,250
<font color="#E5E5E5">and</font><font color="#CCCCCC"> I'd like</font><font color="#E5E5E5"> to give a brief shout out</font>

940
00:41:26,660 --> 00:41:30,140
to the unity security team<font color="#CCCCCC"> for letting</font>

941
00:41:28,250 --> 00:41:32,450
them letting<font color="#E5E5E5"> me use them in tons of</font>

942
00:41:30,140 --> 00:41:35,170
<font color="#CCCCCC">examples here</font><font color="#E5E5E5"> which they didn't have to</font>

943
00:41:32,450 --> 00:41:40,009
<font color="#E5E5E5">because it's a private by bounty program</font>

944
00:41:35,170 --> 00:41:42,560
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> defense now the best defense against</font>

945
00:41:40,010 --> 00:41:46,010
cache poisoning<font color="#CCCCCC"> is obviously not to use</font>

946
00:41:42,560 --> 00:41:48,859
caching the<font color="#E5E5E5"> my it sound like unrealistic</font>

947
00:41:46,010 --> 00:41:50,180
advice but I think some<font color="#CCCCCC"> people they</font>

948
00:41:48,859 --> 00:41:52,490
might do<font color="#CCCCCC"> something</font><font color="#E5E5E5"> like oh I'm</font>

949
00:41:50,180 --> 00:41:54,529
experiencing a DDoS I'm gonna sign<font color="#CCCCCC"> up</font>

950
00:41:52,490 --> 00:41:56,509
for<font color="#E5E5E5"> CloudFlare and they don't actually</font>

951
00:41:54,530 --> 00:41:58,250
<font color="#E5E5E5">particularly need cloud</font><font color="#CCCCCC"> flares caching</font>

952
00:41:56,510 --> 00:42:01,099
but it's turned on<font color="#E5E5E5"> by</font><font color="#CCCCCC"> default</font><font color="#E5E5E5"> so they</font>

953
00:41:58,250 --> 00:42:03,460
end up vulnerable to cache poisoning<font color="#E5E5E5"> so</font>

954
00:42:01,099 --> 00:42:05,599
just<font color="#E5E5E5"> turn it off if you</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> need it</font>

955
00:42:03,460 --> 00:42:07,310
<font color="#CCCCCC">regardless of whether you're</font>

956
00:42:05,599 --> 00:42:09,470
intentionally<font color="#E5E5E5"> using caching though some</font>

957
00:42:07,310 --> 00:42:11,869
of your some of your visitors may be

958
00:42:09,470 --> 00:42:13,459
going through servers that<font color="#CCCCCC"> are</font><font color="#E5E5E5"> doing</font>

959
00:42:11,869 --> 00:42:18,710
caching

960
00:42:13,460 --> 00:42:20,900
so it everyone<font color="#E5E5E5"> should avoid on on</font><font color="#CCCCCC"> qidan</font>

961
00:42:18,710 --> 00:42:24,109
<font color="#CCCCCC">but</font><font color="#E5E5E5"> avoid taking input from</font><font color="#CCCCCC"> haiti to</font><font color="#E5E5E5"> be</font>

962
00:42:20,900 --> 00:42:27,020
headers<font color="#E5E5E5"> and cookies as much as possible</font>

963
00:42:24,109 --> 00:42:29,390
<font color="#CCCCCC">and</font><font color="#E5E5E5"> also all audit your application with</font>

964
00:42:27,020 --> 00:42:31,309
<font color="#E5E5E5">with parameter to see if you can find</font>

965
00:42:29,390 --> 00:42:34,279
any unkeyed inputs<font color="#E5E5E5"> that your framework</font>

966
00:42:31,309 --> 00:42:35,869
has just sneaked in the support for if

967
00:42:34,280 --> 00:42:38,809
you find them the<font color="#CCCCCC"> best thing to do is</font>

968
00:42:35,869 --> 00:42:40,250
just to disable these<font color="#E5E5E5"> but if that's not</font>

969
00:42:38,809 --> 00:42:42,200
an<font color="#E5E5E5"> option for some reason you may be</font>

970
00:42:40,250 --> 00:42:44,599
able<font color="#E5E5E5"> to configure the caching layer to</font>

971
00:42:42,200 --> 00:42:46,250
automatically strip the headers<font color="#E5E5E5"> and has</font>

972
00:42:44,599 --> 00:42:49,430
a last resort<font color="#CCCCCC"> well if you need this</font>

973
00:42:46,250 --> 00:42:51,260
header<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> always add it</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> the</font>

974
00:42:49,430 --> 00:42:57,078
cache key which effectively<font color="#E5E5E5"> means that</font>

975
00:42:51,260 --> 00:43:00,670
<font color="#E5E5E5">it can't be used for cache poisoning so</font>

976
00:42:57,079 --> 00:43:02,960
you can grab the white paper<font color="#CCCCCC"> on line</font>

977
00:43:00,670 --> 00:43:05,869
<font color="#CCCCCC">parameters open source</font><font color="#E5E5E5"> you can grab</font><font color="#CCCCCC"> that</font>

978
00:43:02,960 --> 00:43:08,030
<font color="#E5E5E5">too</font><font color="#CCCCCC"> and also</font><font color="#E5E5E5"> for the first time this</font>

979
00:43:05,869 --> 00:43:10,339
year<font color="#E5E5E5"> I've built an online cache</font>

980
00:43:08,030 --> 00:43:13,309
poisoning challenge<font color="#CCCCCC"> in my hacking game</font>

981
00:43:10,339 --> 00:43:14,808
so you<font color="#E5E5E5"> can have a shot at that to get</font>

982
00:43:13,309 --> 00:43:16,220
some practical<font color="#CCCCCC"> experience with it</font>

983
00:43:14,809 --> 00:43:21,349
without<font color="#E5E5E5"> accidentally taking out any</font>

984
00:43:16,220 --> 00:43:23,959
<font color="#E5E5E5">websites so the three key things to</font><font color="#CCCCCC"> take</font>

985
00:43:21,349 --> 00:43:27,280
away<font color="#E5E5E5"> the header based input is</font>

986
00:43:23,960 --> 00:43:30,589
inherently<font color="#E5E5E5"> dangerous frameworks can hide</font>

987
00:43:27,280 --> 00:43:34,280
lethal functionality<font color="#E5E5E5"> and cache poisoning</font>

988
00:43:30,589 --> 00:43:36,230
<font color="#E5E5E5">is not theoretical I'm going to take the</font>

989
00:43:34,280 --> 00:43:37,299
five<font color="#CCCCCC"> minutes of questions now if you've</font>

990
00:43:36,230 --> 00:43:39,559
<font color="#E5E5E5">got any</font><font color="#CCCCCC"> more after that</font>

991
00:43:37,299 --> 00:43:40,670
<font color="#E5E5E5">feel free to come</font><font color="#CCCCCC"> and speak</font><font color="#E5E5E5"> to me out</font>

992
00:43:39,559 --> 00:43:42,619
<font color="#E5E5E5">there back or</font><font color="#CCCCCC"> just chat me an email</font>

993
00:43:40,670 --> 00:43:45,849
<font color="#CCCCCC">don't</font><font color="#E5E5E5"> forget to follow me on Twitter</font>

994
00:43:42,619 --> 00:43:45,849
<font color="#E5E5E5">thank you for listening</font>

995
00:43:49,890 --> 00:43:56,250
[Applause]

