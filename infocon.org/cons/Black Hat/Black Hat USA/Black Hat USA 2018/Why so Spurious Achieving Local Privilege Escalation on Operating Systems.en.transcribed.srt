1
00:00:00,140 --> 00:00:06,989
welcome to<font color="#E5E5E5"> Isis spurious</font><font color="#CCCCCC"> why so serious</font>

2
00:00:03,500 --> 00:00:09,960
<font color="#E5E5E5">this is a presentation</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> a hardware</font>

3
00:00:06,990 --> 00:00:14,460
feature<font color="#E5E5E5"> that exists in</font><font color="#CCCCCC"> intel and AMD</font>

4
00:00:09,960 --> 00:00:17,789
chips<font color="#E5E5E5"> and operating system developers</font>

5
00:00:14,460 --> 00:00:20,189
didn't<font color="#CCCCCC"> uh</font><font color="#E5E5E5"> so the</font><font color="#CCCCCC"> the instruction manual</font>

6
00:00:17,789 --> 00:00:23,100
there's hundreds of<font color="#E5E5E5"> tiny little tidbits</font>

7
00:00:20,189 --> 00:00:25,590
in this and there was a tiny little<font color="#E5E5E5"> bit</font>

8
00:00:23,100 --> 00:00:28,470
<font color="#E5E5E5">that they missed and we actually use</font>

9
00:00:25,590 --> 00:00:32,130
this to<font color="#E5E5E5"> create an exploit</font><font color="#CCCCCC"> turkic create</font>

10
00:00:28,470 --> 00:00:33,180
an<font color="#E5E5E5"> LP</font><font color="#CCCCCC"> e</font><font color="#E5E5E5"> and a spurious essentially means</font>

11
00:00:32,130 --> 00:00:36,390
unexpected

12
00:00:33,180 --> 00:00:40,879
so it's an appropriate<font color="#E5E5E5"> name followed by</font>

13
00:00:36,390 --> 00:00:43,379
<font color="#CCCCCC">batman</font><font color="#E5E5E5"> these are our presentation topics</font>

14
00:00:40,879 --> 00:00:45,420
<font color="#E5E5E5">we're gonna go through introductions</font><font color="#CCCCCC"> I'm</font>

15
00:00:43,379 --> 00:00:46,559
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> introduce myself</font><font color="#CCCCCC"> and then my</font>

16
00:00:45,420 --> 00:00:49,469
<font color="#E5E5E5">colleague Nami</font><font color="#CCCCCC"> is gonna introduce</font>

17
00:00:46,559 --> 00:00:51,570
himself<font color="#CCCCCC"> in his background then we're</font>

18
00:00:49,469 --> 00:00:53,940
gonna go<font color="#E5E5E5"> over what is a</font><font color="#CCCCCC"> CVE twenty</font>

19
00:00:51,570 --> 00:00:55,800
<font color="#CCCCCC">eighteen eight eight nine</font><font color="#E5E5E5"> seven if you</font>

20
00:00:53,940 --> 00:00:58,489
<font color="#CCCCCC">don't know what a CV is hopefully by the</font>

21
00:00:55,800 --> 00:00:58,489
end<font color="#E5E5E5"> of this presentation</font>

22
00:00:58,670 --> 00:01:03,840
hopefully you'll know what a<font color="#E5E5E5"> CV is we're</font>

23
00:01:01,829 --> 00:01:04,199
gonna go<font color="#E5E5E5"> over some prerequisite</font>

24
00:01:03,840 --> 00:01:07,380
knowledge

25
00:01:04,199 --> 00:01:10,350
<font color="#CCCCCC">nemi's</font><font color="#E5E5E5"> gonna kind of train you on some</font>

26
00:01:07,380 --> 00:01:11,670
some<font color="#E5E5E5"> high-level information that you</font>

27
00:01:10,350 --> 00:01:14,220
need<font color="#E5E5E5"> to actually understand how this</font>

28
00:01:11,670 --> 00:01:16,650
works<font color="#CCCCCC"> granted</font><font color="#E5E5E5"> that we only have</font><font color="#CCCCCC"> fifty</font>

29
00:01:14,220 --> 00:01:18,509
<font color="#E5E5E5">minutes</font><font color="#CCCCCC"> it's important that</font><font color="#E5E5E5"> you keep in</font>

30
00:01:16,650 --> 00:01:20,549
mind<font color="#CCCCCC"> that we we have a white</font><font color="#E5E5E5"> paper</font><font color="#CCCCCC"> if</font>

31
00:01:18,509 --> 00:01:23,000
<font color="#E5E5E5">you actually want</font><font color="#CCCCCC"> to understand a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of</font>

32
00:01:20,549 --> 00:01:25,320
the technical<font color="#CCCCCC"> details</font><font color="#E5E5E5"> of how this works</font>

33
00:01:23,000 --> 00:01:29,970
<font color="#CCCCCC">we have a link to that</font><font color="#E5E5E5"> at the end</font><font color="#CCCCCC"> of</font>

34
00:01:25,320 --> 00:01:33,210
this<font color="#E5E5E5"> presentation after</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I'm gonna</font>

35
00:01:29,970 --> 00:01:35,670
go over<font color="#E5E5E5"> how move the SS and pop SS</font>

36
00:01:33,210 --> 00:01:38,720
actually function what they do why

37
00:01:35,670 --> 00:01:41,570
they're special<font color="#CCCCCC"> in the x86</font><font color="#E5E5E5"> architecture</font>

38
00:01:38,720 --> 00:01:44,460
<font color="#CCCCCC">and then we have three proof of concepts</font>

39
00:01:41,570 --> 00:01:44,789
<font color="#E5E5E5">it's kind of</font><font color="#CCCCCC"> in order</font><font color="#E5E5E5"> how special they</font>

40
00:01:44,460 --> 00:01:46,559
are

41
00:01:44,790 --> 00:01:48,540
the first one is a local denial of

42
00:01:46,560 --> 00:01:51,450
service<font color="#E5E5E5"> this kind of just blows</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> your</font>

43
00:01:48,540 --> 00:01:54,240
own machine it's not<font color="#E5E5E5"> really that that</font>

44
00:01:51,450 --> 00:01:55,860
incredible<font color="#E5E5E5"> the second one is a local</font>

45
00:01:54,240 --> 00:01:57,270
privileged escalation using in three

46
00:01:55,860 --> 00:01:59,790
there's<font color="#E5E5E5"> the one</font><font color="#CCCCCC"> that I personally</font>

47
00:01:57,270 --> 00:02:02,369
weaponized<font color="#CCCCCC"> it's my personal favorite</font>

48
00:01:59,790 --> 00:02:04,530
<font color="#CCCCCC">and then we have the second one a local</font>

49
00:02:02,369 --> 00:02:07,140
privilege escalation using Cisco<font color="#E5E5E5"> that's</font>

50
00:02:04,530 --> 00:02:09,929
<font color="#CCCCCC">the one that let me hear weaponized</font>

51
00:02:07,140 --> 00:02:11,580
himself<font color="#E5E5E5"> that one's also incredible and</font>

52
00:02:09,929 --> 00:02:14,310
then we have a<font color="#E5E5E5"> conclusion at the end</font>

53
00:02:11,580 --> 00:02:17,190
<font color="#E5E5E5">there's a couple heads</font>

54
00:02:14,310 --> 00:02:19,020
in the<font color="#E5E5E5"> industry that we'd like</font><font color="#CCCCCC"> to give</font>

55
00:02:17,190 --> 00:02:20,849
<font color="#CCCCCC">shoutouts to</font><font color="#E5E5E5"> people who weaponize it</font>

56
00:02:19,020 --> 00:02:23,700
<font color="#E5E5E5">people who actually gave us some input</font>

57
00:02:20,849 --> 00:02:25,619
<font color="#E5E5E5">during this entire process and some</font>

58
00:02:23,700 --> 00:02:29,609
really<font color="#E5E5E5"> cool</font><font color="#CCCCCC"> people we'd like to we'd</font>

59
00:02:25,620 --> 00:02:34,019
like to give thanks to so I'm Nick

60
00:02:29,610 --> 00:02:37,319
Peterson<font color="#CCCCCC"> I got I got my</font><font color="#E5E5E5"> start in this at</font>

61
00:02:34,019 --> 00:02:40,349
a really young age<font color="#E5E5E5"> in gaming</font><font color="#CCCCCC"> a world of</font>

62
00:02:37,319 --> 00:02:42,089
<font color="#CCCCCC">warcraft</font><font color="#E5E5E5"> actually I played hardcore</font>

63
00:02:40,349 --> 00:02:44,579
through high school in fact I almost

64
00:02:42,090 --> 00:02:45,900
dropped<font color="#E5E5E5"> out</font><font color="#CCCCCC"> writing</font><font color="#E5E5E5"> all the time I'm</font>

65
00:02:44,580 --> 00:02:47,160
sure<font color="#CCCCCC"> if you're in this crowd you've</font>

66
00:02:45,900 --> 00:02:49,049
probably played World of Warcraft at

67
00:02:47,160 --> 00:02:53,459
some point if you<font color="#E5E5E5"> haven't I'm</font><font color="#CCCCCC"> sure you</font>

68
00:02:49,049 --> 00:02:55,220
at<font color="#E5E5E5"> least know what it is</font><font color="#CCCCCC"> I start while</font>

69
00:02:53,459 --> 00:02:59,940
playing World of Warcraft<font color="#CCCCCC"> I did a lot of</font>

70
00:02:55,220 --> 00:03:04,790
teleport hex<font color="#CCCCCC"> bots</font><font color="#E5E5E5"> and more per hex sort</font>

71
00:02:59,940 --> 00:03:06,510
of sort of vanity based skin

72
00:03:04,790 --> 00:03:09,298
modifications that you<font color="#E5E5E5"> could do to the</font>

73
00:03:06,510 --> 00:03:13,380
<font color="#CCCCCC">game I sold</font><font color="#E5E5E5"> some of that stuff some of</font>

74
00:03:09,299 --> 00:03:15,959
<font color="#CCCCCC">the other stuff I didn't after that I</font>

75
00:03:13,380 --> 00:03:18,829
started a cheat site called subtle<font color="#CCCCCC"> lane</font>

76
00:03:15,959 --> 00:03:22,320
which I sold a subscription-based

77
00:03:18,829 --> 00:03:24,359
<font color="#CCCCCC">Counter Strike global</font><font color="#E5E5E5"> Offensive</font><font color="#CCCCCC"> cheats</font>

78
00:03:22,320 --> 00:03:27,590
to where you<font color="#E5E5E5"> would you basically pay me</font>

79
00:03:24,359 --> 00:03:31,680
a<font color="#E5E5E5"> monthly subscription to cheat and</font>

80
00:03:27,590 --> 00:03:34,290
Counter Strike<font color="#E5E5E5"> global Offensive and</font><font color="#CCCCCC"> you</font>

81
00:03:31,680 --> 00:03:36,959
would get access<font color="#CCCCCC"> to</font><font color="#E5E5E5"> an aimbot and an ESP</font>

82
00:03:34,290 --> 00:03:38,578
and use as long<font color="#CCCCCC"> as you</font><font color="#E5E5E5"> paid me</font><font color="#CCCCCC"> $25 a</font>

83
00:03:36,959 --> 00:03:43,799
month<font color="#CCCCCC"> you</font><font color="#E5E5E5"> would be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to keep cheating</font>

84
00:03:38,579 --> 00:03:47,250
<font color="#CCCCCC">and again</font><font color="#E5E5E5"> after that I was hired into</font>

85
00:03:43,799 --> 00:03:50,989
Riot Games<font color="#E5E5E5"> by let me actually seek me</font>

86
00:03:47,250 --> 00:03:53,459
out<font color="#E5E5E5"> where I currently do similar work</font>

87
00:03:50,989 --> 00:03:55,859
<font color="#E5E5E5">currently</font><font color="#CCCCCC"> working on League of</font><font color="#E5E5E5"> Legends</font>

88
00:03:53,459 --> 00:03:59,040
we deal with a<font color="#E5E5E5"> lot of</font><font color="#CCCCCC"> cheaters there and</font>

89
00:03:55,859 --> 00:04:01,040
<font color="#E5E5E5">working on future products so I'm going</font>

90
00:03:59,040 --> 00:04:03,720
<font color="#E5E5E5">to go ahead and hand it over to</font><font color="#CCCCCC"> many</font>

91
00:04:01,040 --> 00:04:04,470
<font color="#CCCCCC">awesome introduce himself</font><font color="#E5E5E5"> you go cool</font>

92
00:04:03,720 --> 00:04:07,170
thanks<font color="#E5E5E5"> man</font>

93
00:04:04,470 --> 00:04:10,709
so yeah I actually started very similar

94
00:04:07,170 --> 00:04:12,750
to make I was game hacking<font color="#E5E5E5"> when I first</font>

95
00:04:10,709 --> 00:04:15,090
you know got into<font color="#CCCCCC"> information security</font>

96
00:04:12,750 --> 00:04:17,488
and I actually got<font color="#CCCCCC"> my start in the same</font>

97
00:04:15,090 --> 00:04:21,329
game World of Warcraft<font color="#CCCCCC"> yes it was a</font>

98
00:04:17,488 --> 00:04:23,489
<font color="#E5E5E5">popular game at the time and that's</font>

99
00:04:21,329 --> 00:04:26,640
where I first really began<font color="#E5E5E5"> you know game</font>

100
00:04:23,490 --> 00:04:28,110
hacking and what end up<font color="#E5E5E5"> evolving was a</font>

101
00:04:26,640 --> 00:04:30,568
<font color="#E5E5E5">piece I guess</font><font color="#CCCCCC"> passionate</font>

102
00:04:28,110 --> 00:04:32,789
security<font color="#CCCCCC"> I worked in the government for</font>

103
00:04:30,569 --> 00:04:34,199
a couple years<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then decided</font><font color="#CCCCCC"> that it</font>

104
00:04:32,789 --> 00:04:35,729
was very bureaucratic<font color="#E5E5E5"> and I didn't want</font>

105
00:04:34,199 --> 00:04:38,610
to stay in<font color="#E5E5E5"> that business for long so I</font>

106
00:04:35,729 --> 00:04:40,949
looked to<font color="#CCCCCC"> the west coast to find a job</font>

107
00:04:38,610 --> 00:04:43,219
in gaming<font color="#CCCCCC"> because that was really where</font>

108
00:04:40,949 --> 00:04:46,050
my<font color="#CCCCCC"> passion started in this field I</font>

109
00:04:43,219 --> 00:04:47,250
worked at Blizzard Entertainment<font color="#CCCCCC"> for a</font>

110
00:04:46,050 --> 00:04:49,830
couple<font color="#CCCCCC"> years I worked</font><font color="#E5E5E5"> kind of over</font>

111
00:04:47,250 --> 00:04:52,020
watches anti-cheat<font color="#E5E5E5"> which is a popular</font>

112
00:04:49,830 --> 00:04:54,719
first-person shooter game<font color="#CCCCCC"> then from</font>

113
00:04:52,020 --> 00:04:57,599
there<font color="#E5E5E5"> I moved to riot and now I work</font>

114
00:04:54,719 --> 00:05:01,680
with Nick on League of Legends<font color="#E5E5E5"> so to</font>

115
00:04:57,599 --> 00:05:03,389
understand really what<font color="#CCCCCC"> CV 2018 88 97</font><font color="#E5E5E5"> is</font>

116
00:05:01,680 --> 00:05:06,449
we have to explain what it could do

117
00:05:03,389 --> 00:05:08,550
<font color="#E5E5E5">right so</font><font color="#CCCCCC"> this CBE is a local privilege</font>

118
00:05:06,449 --> 00:05:10,529
escalation vulnerability<font color="#E5E5E5"> it allows you</font>

119
00:05:08,550 --> 00:05:12,330
to<font color="#E5E5E5"> read and write kernel memory from</font>

120
00:05:10,529 --> 00:05:14,520
user<font color="#E5E5E5"> mode and it also lets you execute</font>

121
00:05:12,330 --> 00:05:17,250
user mode code with kernel mode

122
00:05:14,520 --> 00:05:18,840
privileges<font color="#E5E5E5"> so it's pretty crazy like it</font>

123
00:05:17,250 --> 00:05:21,659
gives you full<font color="#E5E5E5"> compromise on a system</font>

124
00:05:18,840 --> 00:05:23,279
that<font color="#CCCCCC"> your honor</font><font color="#E5E5E5"> and it impacted a ton of</font>

125
00:05:21,659 --> 00:05:25,110
<font color="#E5E5E5">different operating systems not just</font>

126
00:05:23,279 --> 00:05:26,939
<font color="#CCCCCC">Windows which a lot of the demo code</font>

127
00:05:25,110 --> 00:05:29,099
will focus<font color="#E5E5E5"> on just because it's the most</font>

128
00:05:26,939 --> 00:05:33,180
prevalent<font color="#E5E5E5"> operating system but it also</font>

129
00:05:29,099 --> 00:05:35,639
affected<font color="#CCCCCC"> Linux Mac OS FreeBSD and</font><font color="#E5E5E5"> even</font>

130
00:05:33,180 --> 00:05:39,960
Xen configurations<font color="#E5E5E5"> basically anything</font>

131
00:05:35,639 --> 00:05:43,190
<font color="#E5E5E5">that</font><font color="#CCCCCC"> was x86 based</font><font color="#E5E5E5"> probably up</font>

132
00:05:39,960 --> 00:05:45,750
and<font color="#E5E5E5"> handling how move and pop SS worked</font>

133
00:05:43,190 --> 00:05:46,889
<font color="#E5E5E5">to really understand how this works you</font>

134
00:05:45,750 --> 00:05:49,190
have<font color="#E5E5E5"> to kind of know how interrupts</font>

135
00:05:46,889 --> 00:05:52,259
function and how<font color="#CCCCCC"> hardware breakpoints</font>

136
00:05:49,190 --> 00:05:54,089
work<font color="#CCCCCC"> and we'll go over that knowledge</font>

137
00:05:52,259 --> 00:05:56,400
this<font color="#E5E5E5"> is assuming that</font><font color="#CCCCCC"> you already have a</font>

138
00:05:54,089 --> 00:05:58,589
good<font color="#E5E5E5"> understanding of assembly you have</font>

139
00:05:56,400 --> 00:05:59,849
to have some level<font color="#CCCCCC"> of assembly knowledge</font>

140
00:05:58,589 --> 00:06:01,080
I'm sure something a lot<font color="#E5E5E5"> of</font><font color="#CCCCCC"> you have</font>

141
00:05:59,849 --> 00:06:03,389
done<font color="#E5E5E5"> reverse engineering whether it's</font>

142
00:06:01,080 --> 00:06:06,029
malware or maybe even game hacking<font color="#E5E5E5"> so</font>

143
00:06:03,389 --> 00:06:08,310
<font color="#E5E5E5">hopefully with this additional knowledge</font>

144
00:06:06,029 --> 00:06:10,349
<font color="#CCCCCC">you'll really understand how the core OS</font>

145
00:06:08,310 --> 00:06:13,199
functions when it encounters some of

146
00:06:10,349 --> 00:06:14,819
these behaviors now everyone's seen this

147
00:06:13,199 --> 00:06:16,500
<font color="#E5E5E5">probably a million times I'm sure other</font>

148
00:06:14,819 --> 00:06:19,589
blackhat presenters actually used the

149
00:06:16,500 --> 00:06:21,360
same picture<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> privilege levels on</font>

150
00:06:19,589 --> 00:06:24,839
an operating<font color="#CCCCCC"> system is</font><font color="#E5E5E5"> just on Wikipedia</font>

151
00:06:21,360 --> 00:06:27,300
and really in the<font color="#E5E5E5"> traditional sense</font>

152
00:06:24,839 --> 00:06:29,310
there's only ring<font color="#CCCCCC"> 3 in ring 0 ring 1 & 2</font>

153
00:06:27,300 --> 00:06:31,460
<font color="#E5E5E5">are</font><font color="#CCCCCC"> really never used ring</font><font color="#E5E5E5"> 3 is where</font>

154
00:06:29,310 --> 00:06:34,469
the<font color="#E5E5E5"> untrusted user mode applications</font>

155
00:06:31,460 --> 00:06:36,690
execute these<font color="#E5E5E5"> are your games your your</font>

156
00:06:34,469 --> 00:06:39,300
<font color="#CCCCCC">favorite calculator exe that gets popped</font>

157
00:06:36,690 --> 00:06:41,039
all the time as well as you know

158
00:06:39,300 --> 00:06:41,380
basically<font color="#E5E5E5"> anything that you interact</font>

159
00:06:41,039 --> 00:06:43,750
with

160
00:06:41,380 --> 00:06:45,700
directly<font color="#E5E5E5"> as an end</font><font color="#CCCCCC"> user of that</font><font color="#E5E5E5"> system</font>

161
00:06:43,750 --> 00:06:47,710
<font color="#CCCCCC">and then as you transcend into these</font>

162
00:06:45,700 --> 00:06:48,760
rings<font color="#CCCCCC"> you</font><font color="#E5E5E5"> start gaining more and more</font>

163
00:06:47,710 --> 00:06:50,620
privileges<font color="#CCCCCC"> you can use more</font>

164
00:06:48,760 --> 00:06:52,659
functionality of the<font color="#CCCCCC"> operating system</font>

165
00:06:50,620 --> 00:06:54,460
and<font color="#E5E5E5"> ring</font><font color="#CCCCCC"> zero is intended to be</font><font color="#E5E5E5"> the most</font>

166
00:06:52,660 --> 00:06:56,320
privileged<font color="#E5E5E5"> arena where the</font><font color="#CCCCCC"> kernel</font>

167
00:06:54,460 --> 00:06:59,289
operates and where the core OS<font color="#CCCCCC"> features</font>

168
00:06:56,320 --> 00:07:01,510
are now<font color="#E5E5E5"> this gets</font><font color="#CCCCCC"> complicated</font>

169
00:06:59,290 --> 00:07:04,860
obviously with hypervisors as well as

170
00:07:01,510 --> 00:07:07,390
like<font color="#CCCCCC"> Intel management engine but to our</font>

171
00:07:04,860 --> 00:07:11,590
presentation<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is the simplified view</font>

172
00:07:07,390 --> 00:07:13,780
and how things were a decade<font color="#E5E5E5"> ago when a</font>

173
00:07:11,590 --> 00:07:15,969
hardware breakpoint fires<font color="#CCCCCC"> it's it's</font>

174
00:07:13,780 --> 00:07:17,380
super<font color="#CCCCCC"> important to understand that</font><font color="#E5E5E5"> and</font>

175
00:07:15,970 --> 00:07:19,930
there's<font color="#E5E5E5"> charts here that you don't</font>

176
00:07:17,380 --> 00:07:21,790
<font color="#E5E5E5">really have</font><font color="#CCCCCC"> to look through</font><font color="#E5E5E5"> this is in</font>

177
00:07:19,930 --> 00:07:24,460
the SDM the Intel software<font color="#E5E5E5"> development</font>

178
00:07:21,790 --> 00:07:25,600
manual so<font color="#E5E5E5"> you could browse this at your</font>

179
00:07:24,460 --> 00:07:29,080
leisure<font color="#CCCCCC"> when you're trying to fall</font>

180
00:07:25,600 --> 00:07:30,460
<font color="#CCCCCC">asleep</font><font color="#E5E5E5"> but the software</font><font color="#CCCCCC"> breakpoint is</font>

181
00:07:29,080 --> 00:07:31,419
<font color="#E5E5E5">different from a hardware breakpoint I'm</font>

182
00:07:30,460 --> 00:07:33,070
sure a lot of you guys have used

183
00:07:31,420 --> 00:07:36,070
<font color="#E5E5E5">software breakpoints for debugging</font>

184
00:07:33,070 --> 00:07:39,190
purposes<font color="#CCCCCC"> a</font><font color="#E5E5E5"> software breakpoint is in</font><font color="#CCCCCC"> 3</font>

185
00:07:36,070 --> 00:07:41,920
or<font color="#CCCCCC"> a</font><font color="#E5E5E5"> CC and and</font><font color="#CCCCCC"> hardware breakpoint</font>

186
00:07:39,190 --> 00:07:43,810
varies from that in that<font color="#E5E5E5"> I'll use the</font>

187
00:07:41,920 --> 00:07:45,700
term data breakpoint<font color="#E5E5E5"> interchangeably</font><font color="#CCCCCC"> to</font>

188
00:07:43,810 --> 00:07:49,060
<font color="#CCCCCC">mean Hardware breakpoint there are only</font>

189
00:07:45,700 --> 00:07:50,680
four of them<font color="#E5E5E5"> on the x86 architecture</font><font color="#CCCCCC"> you</font>

190
00:07:49,060 --> 00:07:53,140
can<font color="#E5E5E5"> set them</font><font color="#CCCCCC"> on access read and write</font>

191
00:07:50,680 --> 00:07:54,910
you<font color="#CCCCCC"> only get four per processor every</font>

192
00:07:53,140 --> 00:07:57,219
processor has<font color="#CCCCCC"> its</font><font color="#E5E5E5"> own view</font><font color="#CCCCCC"> of Hardware</font>

193
00:07:54,910 --> 00:08:00,070
breakpoints when a hardware breakpoint

194
00:07:57,220 --> 00:08:01,960
occurs or when<font color="#E5E5E5"> any interrupt fires not</font>

195
00:08:00,070 --> 00:08:05,020
just<font color="#CCCCCC"> Hardware breakpoints execution is</font>

196
00:08:01,960 --> 00:08:07,000
given to the kernel<font color="#E5E5E5"> by the CPU and we'll</font>

197
00:08:05,020 --> 00:08:08,440
explain how<font color="#CCCCCC"> that</font><font color="#E5E5E5"> process works</font><font color="#CCCCCC"> but</font>

198
00:08:07,000 --> 00:08:11,770
there's certain status<font color="#CCCCCC"> bits in some</font>

199
00:08:08,440 --> 00:08:14,020
other debug registers<font color="#E5E5E5"> that explain what</font>

200
00:08:11,770 --> 00:08:15,909
tripped and exactly how you can<font color="#E5E5E5"> control</font>

201
00:08:14,020 --> 00:08:17,380
these<font color="#E5E5E5"> Hardware breakpoints the most</font>

202
00:08:15,910 --> 00:08:19,060
important thing to note is really that

203
00:08:17,380 --> 00:08:20,920
<font color="#E5E5E5">this is a privileged thing you can't</font>

204
00:08:19,060 --> 00:08:22,960
just set<font color="#E5E5E5"> Hardware breakpoints from user</font>

205
00:08:20,920 --> 00:08:25,840
mode<font color="#CCCCCC"> but most operating</font><font color="#E5E5E5"> systems</font><font color="#CCCCCC"> provide</font>

206
00:08:22,960 --> 00:08:27,549
<font color="#E5E5E5">a way to do that through api's</font><font color="#CCCCCC"> that will</font>

207
00:08:25,840 --> 00:08:29,560
just issue system calls under the hood

208
00:08:27,550 --> 00:08:32,590
in Windows you<font color="#CCCCCC"> can do this by using set</font>

209
00:08:29,560 --> 00:08:34,270
thread context<font color="#E5E5E5"> and other operating</font>

210
00:08:32,590 --> 00:08:37,719
systems do it differently<font color="#E5E5E5"> but most offer</font>

211
00:08:34,270 --> 00:08:38,978
this for any application that<font color="#E5E5E5"> runs it</font>

212
00:08:37,719 --> 00:08:40,780
doesn't have to be an<font color="#E5E5E5"> administrator</font>

213
00:08:38,979 --> 00:08:43,840
application just<font color="#E5E5E5"> because</font><font color="#CCCCCC"> it's such a</font>

214
00:08:40,780 --> 00:08:46,390
powerful debugging<font color="#CCCCCC"> tool so when an</font>

215
00:08:43,840 --> 00:08:49,030
interrupt fires and<font color="#CCCCCC"> 8/1 fires a DB fires</font>

216
00:08:46,390 --> 00:08:50,350
<font color="#E5E5E5">the CPU transfers execution to an</font>

217
00:08:49,030 --> 00:08:52,180
interrupt<font color="#CCCCCC"> Handler and</font><font color="#E5E5E5"> this interrupt</font>

218
00:08:50,350 --> 00:08:54,840
<font color="#E5E5E5">handler is it's located inside of this</font>

219
00:08:52,180 --> 00:08:57,959
giant<font color="#E5E5E5"> lookup table this IDT</font>

220
00:08:54,840 --> 00:09:01,410
set up early<font color="#CCCCCC"> kernel initialization by</font>

221
00:08:57,960 --> 00:09:04,200
the operating<font color="#E5E5E5"> system</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> based on what</font>

222
00:09:01,410 --> 00:09:06,660
<font color="#CCCCCC">interrupts fires</font><font color="#E5E5E5"> it's the index inside</font>

223
00:09:04,200 --> 00:09:09,270
of this<font color="#CCCCCC"> IDT so for hardware breakpoints</font>

224
00:09:06,660 --> 00:09:11,250
it's in<font color="#E5E5E5"> one and that is the second index</font>

225
00:09:09,270 --> 00:09:13,319
<font color="#E5E5E5">assuming you know you start at zero</font><font color="#CCCCCC"> and</font>

226
00:09:11,250 --> 00:09:15,030
in<font color="#E5E5E5"> three is the fourth index which is</font>

227
00:09:13,320 --> 00:09:18,570
<font color="#E5E5E5">where your software breakpoints are</font>

228
00:09:15,030 --> 00:09:21,660
firing<font color="#CCCCCC"> so when an</font><font color="#E5E5E5"> int 1 or an in</font><font color="#CCCCCC"> 3 fires</font>

229
00:09:18,570 --> 00:09:23,460
the<font color="#E5E5E5"> CPU will look at its</font><font color="#CCCCCC"> interrupt</font>

230
00:09:21,660 --> 00:09:26,189
descriptor table<font color="#E5E5E5"> to figure out where to</font>

231
00:09:23,460 --> 00:09:28,710
<font color="#CCCCCC">go in the kernel to process that</font>

232
00:09:26,190 --> 00:09:30,570
<font color="#CCCCCC">interrupt that's fired</font><font color="#E5E5E5"> these are all the</font>

233
00:09:28,710 --> 00:09:33,060
interrupts on<font color="#CCCCCC"> Windows not super</font>

234
00:09:30,570 --> 00:09:35,400
important to<font color="#CCCCCC"> know all of them just that</font>

235
00:09:33,060 --> 00:09:37,500
the<font color="#CCCCCC"> ant one handler</font><font color="#E5E5E5"> which is the one for</font>

236
00:09:35,400 --> 00:09:41,160
<font color="#CCCCCC">hardware breakpoints</font><font color="#E5E5E5"> it's called</font><font color="#CCCCCC"> ki D</font>

237
00:09:37,500 --> 00:09:45,180
bug trapper fault additionally when that

238
00:09:41,160 --> 00:09:46,980
in one fires there's some<font color="#CCCCCC"> Stax artifacts</font>

239
00:09:45,180 --> 00:09:48,390
<font color="#E5E5E5">that are pushed on by the CPU and this</font>

240
00:09:46,980 --> 00:09:50,010
is<font color="#E5E5E5"> mostly so that your kernel mode</font>

241
00:09:48,390 --> 00:09:52,020
handler<font color="#E5E5E5"> that's handling the cinder up</font>

242
00:09:50,010 --> 00:09:53,880
knows where it came from<font color="#CCCCCC"> so there's</font>

243
00:09:52,020 --> 00:09:56,010
certain stuff<font color="#E5E5E5"> that's placed onto the</font>

244
00:09:53,880 --> 00:09:58,050
<font color="#E5E5E5">stack like the instruction pointer where</font>

245
00:09:56,010 --> 00:10:00,030
the<font color="#E5E5E5"> interrupt was fired the code segment</font>

246
00:09:58,050 --> 00:10:02,609
<font color="#E5E5E5">to figure out what previous mode of</font>

247
00:10:00,030 --> 00:10:04,560
execution<font color="#CCCCCC"> it was in that is it coming</font>

248
00:10:02,610 --> 00:10:05,880
from user mode<font color="#CCCCCC"> is it or is it coming</font>

249
00:10:04,560 --> 00:10:08,280
<font color="#E5E5E5">from kernel mode</font>

250
00:10:05,880 --> 00:10:12,080
there's flags<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the stack pointers and</font>

251
00:10:08,280 --> 00:10:14,160
so on and so forth and traditionally<font color="#E5E5E5"> for</font>

252
00:10:12,080 --> 00:10:16,320
mostly every single operating system

253
00:10:14,160 --> 00:10:18,810
we've looked at the OS interrupt<font color="#E5E5E5"> handler</font>

254
00:10:16,320 --> 00:10:20,610
<font color="#E5E5E5">can ID bug trapper fault for example for</font>

255
00:10:18,810 --> 00:10:22,500
the<font color="#E5E5E5"> ant one</font><font color="#CCCCCC"> handler</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> Windows looks at</font>

256
00:10:20,610 --> 00:10:24,570
this code segment selector on the<font color="#E5E5E5"> stack</font>

257
00:10:22,500 --> 00:10:27,240
to determine what the previous privilege

258
00:10:24,570 --> 00:10:28,380
level was where the<font color="#E5E5E5"> codes coming from is</font>

259
00:10:27,240 --> 00:10:30,600
it coming from kernel mode it's coming

260
00:10:28,380 --> 00:10:33,540
from user<font color="#E5E5E5"> mode and the first two bits in</font>

261
00:10:30,600 --> 00:10:36,180
<font color="#CCCCCC">the</font><font color="#E5E5E5"> CS value actually tell you what mode</font>

262
00:10:33,540 --> 00:10:39,569
it<font color="#CCCCCC"> is and</font><font color="#E5E5E5"> will actually explain how that</font>

263
00:10:36,180 --> 00:10:41,849
<font color="#CCCCCC">looks a little bit more to really</font>

264
00:10:39,570 --> 00:10:44,700
understand how segmentation works<font color="#CCCCCC"> it's</font>

265
00:10:41,850 --> 00:10:46,980
<font color="#E5E5E5">complicated it's not really necessary</font>

266
00:10:44,700 --> 00:10:49,860
for 64-bit mode<font color="#E5E5E5"> it's kind of a</font><font color="#CCCCCC"> stijl</font>

267
00:10:46,980 --> 00:10:51,750
apart of the x86<font color="#E5E5E5"> architecture</font><font color="#CCCCCC"> the reason</font>

268
00:10:49,860 --> 00:10:53,640
why I bring<font color="#E5E5E5"> it</font><font color="#CCCCCC"> up is because there are</font>

269
00:10:51,750 --> 00:10:56,340
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> call-outs to certain</font><font color="#E5E5E5"> segment</font>

270
00:10:53,640 --> 00:10:58,620
selectors<font color="#CCCCCC"> that you need to be aware of</font>

271
00:10:56,340 --> 00:11:00,660
like for example the CS<font color="#CCCCCC"> is the code</font>

272
00:10:58,620 --> 00:11:03,120
segment<font color="#E5E5E5"> that gets placed onto the stack</font>

273
00:11:00,660 --> 00:11:05,670
by the CPU when<font color="#E5E5E5"> the int one fires then</font>

274
00:11:03,120 --> 00:11:06,880
there's the stack segment<font color="#E5E5E5"> selector SS</font>

275
00:11:05,670 --> 00:11:11,349
which is the

276
00:11:06,880 --> 00:11:13,480
<font color="#E5E5E5">move SS and the pop</font><font color="#CCCCCC"> SS part and this</font>

277
00:11:11,350 --> 00:11:15,160
<font color="#E5E5E5">whole all of</font><font color="#CCCCCC"> these segments</font><font color="#E5E5E5"> electrics</font>

278
00:11:13,480 --> 00:11:17,580
<font color="#E5E5E5">are just indices inside of this global</font>

279
00:11:15,160 --> 00:11:20,410
<font color="#CCCCCC">descriptive table</font><font color="#E5E5E5"> very similar to an IDT</font>

280
00:11:17,580 --> 00:11:22,600
<font color="#CCCCCC">setup during early</font><font color="#E5E5E5"> kernel initialization</font>

281
00:11:20,410 --> 00:11:24,819
describes kind of how that region of

282
00:11:22,600 --> 00:11:27,910
<font color="#CCCCCC">memory works because paging exists</font>

283
00:11:24,820 --> 00:11:30,610
nowadays it's super irrelevant what

284
00:11:27,910 --> 00:11:32,469
operating systems still use our FS and

285
00:11:30,610 --> 00:11:35,290
GS<font color="#E5E5E5"> segment selectors and the reason for</font>

286
00:11:32,470 --> 00:11:37,180
<font color="#CCCCCC">that is because they actually you can</font>

287
00:11:35,290 --> 00:11:42,219
set arbitrary base address is still in

288
00:11:37,180 --> 00:11:45,520
64-bit mode<font color="#E5E5E5"> that means like assuming I'm</font>

289
00:11:42,220 --> 00:11:46,960
an OS developer and I want to read like

290
00:11:45,520 --> 00:11:48,970
kernel mode data structures I can

291
00:11:46,960 --> 00:11:51,490
actually<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know set a base address or</font>

292
00:11:48,970 --> 00:11:54,160
for<font color="#CCCCCC"> example</font><font color="#E5E5E5"> FS to be</font><font color="#CCCCCC"> one two three four</font>

293
00:11:51,490 --> 00:11:57,190
<font color="#CCCCCC">five so when I read fs100</font><font color="#E5E5E5"> I'm actually</font>

294
00:11:54,160 --> 00:12:00,370
reading<font color="#E5E5E5"> from FS from the relay near</font>

295
00:11:57,190 --> 00:12:02,320
address<font color="#E5E5E5"> one two four four five and again</font>

296
00:12:00,370 --> 00:12:06,310
as I mentioned<font color="#CCCCCC"> earlier the</font><font color="#E5E5E5"> first two</font>

297
00:12:02,320 --> 00:12:08,050
<font color="#E5E5E5">bits of the segment selector index</font>

298
00:12:06,310 --> 00:12:09,430
<font color="#CCCCCC">explained what privilege level you're</font>

299
00:12:08,050 --> 00:12:11,979
coming from<font color="#E5E5E5"> so whether you're coming</font>

300
00:12:09,430 --> 00:12:13,870
<font color="#E5E5E5">from kernel mode or user mode so and as</font>

301
00:12:11,980 --> 00:12:16,600
an example<font color="#CCCCCC"> so that</font><font color="#E5E5E5"> you understand that</font><font color="#CCCCCC"> a</font>

302
00:12:13,870 --> 00:12:18,970
CS value of<font color="#CCCCCC"> ten and thirteen</font><font color="#E5E5E5"> hex tenant</font>

303
00:12:16,600 --> 00:12:21,510
<font color="#CCCCCC">X 13</font><font color="#E5E5E5"> describe the same index inside of</font>

304
00:12:18,970 --> 00:12:24,100
this<font color="#CCCCCC"> gdt</font><font color="#E5E5E5"> one describes a chroma mode</font>

305
00:12:21,510 --> 00:12:30,280
segment selector the other<font color="#E5E5E5"> describes a</font>

306
00:12:24,100 --> 00:12:32,290
user mode<font color="#E5E5E5"> one so</font><font color="#CCCCCC"> very fast</font><font color="#E5E5E5"> overview on</font>

307
00:12:30,280 --> 00:12:33,819
segmentation you don't have to<font color="#E5E5E5"> really</font>

308
00:12:32,290 --> 00:12:36,040
understand too much<font color="#E5E5E5"> of it just the fact</font>

309
00:12:33,820 --> 00:12:39,040
<font color="#CCCCCC">that it exists and it's kind of based on</font>

310
00:12:36,040 --> 00:12:41,319
how the OS handles where execution is

311
00:12:39,040 --> 00:12:43,540
coming<font color="#E5E5E5"> from when you enter it these</font>

312
00:12:41,320 --> 00:12:45,460
interrupt handlers so the int one

313
00:12:43,540 --> 00:12:49,270
<font color="#E5E5E5">handler in Windows can ID bug trapper</font>

314
00:12:45,460 --> 00:12:51,340
fault<font color="#E5E5E5"> it actually I'll</font><font color="#CCCCCC"> use my mouse</font>

315
00:12:49,270 --> 00:12:55,810
pointer<font color="#CCCCCC"> here because it's hard</font><font color="#E5E5E5"> to use</font>

316
00:12:51,340 --> 00:12:57,700
this thing<font color="#CCCCCC"> so I went too far but</font><font color="#E5E5E5"> anyway</font>

317
00:12:55,810 --> 00:13:00,099
you can<font color="#CCCCCC"> see that there's a check on the</font>

318
00:12:57,700 --> 00:13:01,720
code segment selector on<font color="#E5E5E5"> the stack and</font>

319
00:13:00,100 --> 00:13:03,850
<font color="#E5E5E5">then based on whether you're coming</font><font color="#CCCCCC"> from</font>

320
00:13:01,720 --> 00:13:05,470
user<font color="#E5E5E5"> mode or kernel mode different</font>

321
00:13:03,850 --> 00:13:06,940
things will happen<font color="#CCCCCC"> so if you're actually</font>

322
00:13:05,470 --> 00:13:09,370
coming<font color="#CCCCCC"> from kernel mode you skip this</font>

323
00:13:06,940 --> 00:13:11,440
code here<font color="#E5E5E5"> the swap GS and then the move</font>

324
00:13:09,370 --> 00:13:13,180
<font color="#CCCCCC">r10 you actually skip all that</font><font color="#E5E5E5"> logic and</font>

325
00:13:11,440 --> 00:13:13,690
you go directly<font color="#E5E5E5"> into here which is the</font>

326
00:13:13,180 --> 00:13:15,939
CLD

327
00:13:13,690 --> 00:13:18,640
and that's because based on<font color="#CCCCCC"> your mode of</font>

328
00:13:15,940 --> 00:13:20,570
<font color="#CCCCCC">execution GS means different things</font><font color="#E5E5E5"> the</font>

329
00:13:18,640 --> 00:13:23,030
GS base means different<font color="#E5E5E5"> things</font>

330
00:13:20,570 --> 00:13:24,500
in user<font color="#CCCCCC"> mode your GS</font><font color="#E5E5E5"> base is your threat</font>

331
00:13:23,030 --> 00:13:26,449
environment block if you've done any

332
00:13:24,500 --> 00:13:29,930
<font color="#CCCCCC">Windows programming</font><font color="#E5E5E5"> you know that to be</font>

333
00:13:26,450 --> 00:13:31,760
true for 64-bit<font color="#E5E5E5"> you know windows and in</font>

334
00:13:29,930 --> 00:13:33,410
kernel mode<font color="#CCCCCC"> it's not the threat</font>

335
00:13:31,760 --> 00:13:35,270
<font color="#E5E5E5">environment block it's your processor</font>

336
00:13:33,410 --> 00:13:37,730
control region it's whatever<font color="#E5E5E5"> you're</font>

337
00:13:35,270 --> 00:13:39,439
executing<font color="#E5E5E5"> under so if you're</font><font color="#CCCCCC"> coming from</font>

338
00:13:37,730 --> 00:13:41,300
user mode<font color="#CCCCCC"> so you've entered this</font>

339
00:13:39,440 --> 00:13:43,190
interrupt handler<font color="#E5E5E5"> from user mode you</font>

340
00:13:41,300 --> 00:13:46,219
actually need to<font color="#E5E5E5"> swap to a kernel GS</font>

341
00:13:43,190 --> 00:13:47,930
<font color="#E5E5E5">right how else is the OS going to access</font>

342
00:13:46,220 --> 00:13:50,300
these kernel data structures and use

343
00:13:47,930 --> 00:13:52,339
that GS base and the way it's done<font color="#CCCCCC"> is by</font>

344
00:13:50,300 --> 00:13:55,849
issuing<font color="#E5E5E5"> this assembly instruction called</font>

345
00:13:52,340 --> 00:13:58,730
<font color="#E5E5E5">swap GS and that puts the GS base for</font>

346
00:13:55,850 --> 00:14:01,190
the kernel mode<font color="#CCCCCC"> data</font><font color="#E5E5E5"> structures there so</font>

347
00:13:58,730 --> 00:14:02,990
that when<font color="#E5E5E5"> you access GS 188 you're not</font>

348
00:14:01,190 --> 00:14:06,040
<font color="#E5E5E5">reading user mode memory which is under</font>

349
00:14:02,990 --> 00:14:09,410
the control<font color="#CCCCCC"> of a user mode application I</font>

350
00:14:06,040 --> 00:14:10,939
explained what swap GS did but just<font color="#CCCCCC"> an</font>

351
00:14:09,410 --> 00:14:13,400
<font color="#E5E5E5">overview all it does that it takes</font>

352
00:14:10,940 --> 00:14:15,830
<font color="#E5E5E5">whatever's at that GS base just like</font>

353
00:14:13,400 --> 00:14:18,260
<font color="#E5E5E5">what was it that FS base and just swaps</font>

354
00:14:15,830 --> 00:14:20,600
that<font color="#E5E5E5"> with this MSR which is a model</font>

355
00:14:18,260 --> 00:14:23,450
specific register a hidden CPU register

356
00:14:20,600 --> 00:14:25,880
and it'll<font color="#E5E5E5"> allow the kernel to then</font>

357
00:14:23,450 --> 00:14:28,180
access<font color="#CCCCCC"> the GS base to read kernel mode</font>

358
00:14:25,880 --> 00:14:30,740
data structures<font color="#E5E5E5"> pretty</font><font color="#CCCCCC"> straightforward</font>

359
00:14:28,180 --> 00:14:33,560
now<font color="#E5E5E5"> Nix can explain how we leverage</font>

360
00:14:30,740 --> 00:14:36,520
remove<font color="#E5E5E5"> SS and pop SS specifically to</font>

361
00:14:33,560 --> 00:14:39,079
enter that these interrupt handlers and

362
00:14:36,520 --> 00:14:40,730
confuse the operating system into

363
00:14:39,080 --> 00:14:42,740
actually thinking<font color="#E5E5E5"> that we've entered</font>

364
00:14:40,730 --> 00:14:45,800
<font color="#E5E5E5">from kernel mode and therefore avoiding</font>

365
00:14:42,740 --> 00:14:50,150
<font color="#E5E5E5">the swamp yes and this is like the heart</font>

366
00:14:45,800 --> 00:14:51,979
<font color="#E5E5E5">of the exploit perfect so never kind of</font>

367
00:14:50,150 --> 00:14:54,050
gave us a good level<font color="#E5E5E5"> overview</font><font color="#CCCCCC"> of</font>

368
00:14:51,980 --> 00:14:55,970
<font color="#E5E5E5">segmentation and kind of stuff that</font>

369
00:14:54,050 --> 00:14:59,060
<font color="#E5E5E5">you're</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> need to actually understand</font>

370
00:14:55,970 --> 00:15:01,010
in order to grasp how this works<font color="#CCCCCC"> and</font>

371
00:14:59,060 --> 00:15:03,140
need<font color="#CCCCCC"> a remind you that there's a quiz at</font>

372
00:15:01,010 --> 00:15:04,640
the<font color="#E5E5E5"> end so if you don't pass</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> you're</font>

373
00:15:03,140 --> 00:15:06,890
actually<font color="#CCCCCC"> banned from</font><font color="#E5E5E5"> blackhat for life</font>

374
00:15:04,640 --> 00:15:08,960
that's what they tell<font color="#E5E5E5"> me anyway</font><font color="#CCCCCC"> so if</font>

375
00:15:06,890 --> 00:15:10,310
you look at if<font color="#E5E5E5"> you look at the</font><font color="#CCCCCC"> right the</font>

376
00:15:08,960 --> 00:15:11,900
assembly<font color="#E5E5E5"> if you're familiar with</font>

377
00:15:10,310 --> 00:15:13,849
assembly this<font color="#E5E5E5"> is kind of gonna be easy</font>

378
00:15:11,900 --> 00:15:16,310
for you<font color="#CCCCCC"> so if you look at the top</font>

379
00:15:13,850 --> 00:15:19,130
instruction<font color="#CCCCCC"> exclusive-or eix and then</font>

380
00:15:16,310 --> 00:15:22,510
you<font color="#E5E5E5"> follow it by increment RDI after</font>

381
00:15:19,130 --> 00:15:25,370
every instruction cycle retires the<font color="#E5E5E5"> CPU</font>

382
00:15:22,510 --> 00:15:27,580
recognizes pending interrupts<font color="#E5E5E5"> in a</font>

383
00:15:25,370 --> 00:15:30,770
priority order<font color="#E5E5E5"> and that's defined</font>

384
00:15:27,580 --> 00:15:33,380
<font color="#E5E5E5">specifically in the Intel manual but</font>

385
00:15:30,770 --> 00:15:33,840
there's a specific<font color="#CCCCCC"> case where when SS is</font>

386
00:15:33,380 --> 00:15:37,560
loaded

387
00:15:33,840 --> 00:15:40,370
<font color="#E5E5E5">either be a move SS or pop SS until the</font>

388
00:15:37,560 --> 00:15:43,770
instruction after<font color="#E5E5E5"> it completely retires</font>

389
00:15:40,370 --> 00:15:47,460
<font color="#E5E5E5">interrupts are held pending</font><font color="#CCCCCC"> and in this</font>

390
00:15:43,770 --> 00:15:51,480
<font color="#E5E5E5">particular case what we were</font><font color="#CCCCCC"> thinking</font><font color="#E5E5E5"> is</font>

391
00:15:47,460 --> 00:15:53,910
that<font color="#E5E5E5"> it's best if you think of SS and</font>

392
00:15:51,480 --> 00:15:56,520
ESP as<font color="#CCCCCC"> nemily</font><font color="#E5E5E5"> explain what</font><font color="#CCCCCC"> segments</font>

393
00:15:53,910 --> 00:15:59,760
ation as combining<font color="#E5E5E5"> themselves into a</font>

394
00:15:56,520 --> 00:16:02,490
single stack pointer so SS<font color="#CCCCCC"> plus ESP</font>

395
00:15:59,760 --> 00:16:06,780
would combine themselves to equal a

396
00:16:02,490 --> 00:16:09,000
particular linear address and after<font color="#E5E5E5"> SS</font>

397
00:16:06,780 --> 00:16:10,709
move SS or<font color="#CCCCCC"> poppets as completes its</font>

398
00:16:09,000 --> 00:16:13,230
<font color="#E5E5E5">execution all interrupts are held</font>

399
00:16:10,710 --> 00:16:14,700
pending until the instruction<font color="#CCCCCC"> after it</font>

400
00:16:13,230 --> 00:16:17,100
is finished<font color="#CCCCCC"> it doesn't matter what</font>

401
00:16:14,700 --> 00:16:19,800
instruction is after it<font color="#CCCCCC"> it could be a</font>

402
00:16:17,100 --> 00:16:23,040
branch<font color="#E5E5E5"> it could be any</font><font color="#CCCCCC"> of the ones</font><font color="#E5E5E5"> that</font>

403
00:16:19,800 --> 00:16:24,810
you<font color="#E5E5E5"> see above it</font><font color="#CCCCCC"> complete execution</font><font color="#E5E5E5"> no</font>

404
00:16:23,040 --> 00:16:26,969
interrupts are gonna be recognized after

405
00:16:24,810 --> 00:16:31,770
<font color="#E5E5E5">it and that's kind of the heart of how</font>

406
00:16:26,970 --> 00:16:34,530
this vulnerability works and so how do

407
00:16:31,770 --> 00:16:37,319
we<font color="#E5E5E5"> discover this so an Emmy</font><font color="#CCCCCC"> and I kind</font>

408
00:16:34,530 --> 00:16:39,900
of both work in<font color="#E5E5E5"> anti-cheat and in the</font>

409
00:16:37,320 --> 00:16:41,790
<font color="#E5E5E5">anti</font><font color="#CCCCCC"> Chi space</font><font color="#E5E5E5"> lots of people attack our</font>

410
00:16:39,900 --> 00:16:44,250
software with virtual machines<font color="#CCCCCC"> and the</font>

411
00:16:41,790 --> 00:16:46,740
reason for<font color="#CCCCCC"> that is is it gives them kind</font>

412
00:16:44,250 --> 00:16:48,840
of<font color="#E5E5E5"> a it kind of gives them a high</font>

413
00:16:46,740 --> 00:16:52,200
granularity of<font color="#E5E5E5"> instructions that they</font>

414
00:16:48,840 --> 00:16:53,730
can trap on and spoof certain

415
00:16:52,200 --> 00:16:57,030
instructions to give back information

416
00:16:53,730 --> 00:16:59,970
<font color="#CCCCCC">that</font><font color="#E5E5E5"> would normally not</font><font color="#CCCCCC"> be received by</font>

417
00:16:57,030 --> 00:17:03,569
our anti<font color="#E5E5E5"> Chi software and at the time my</font>

418
00:16:59,970 --> 00:17:07,140
thought was in<font color="#E5E5E5"> the particular case</font><font color="#CCCCCC"> intel</font>

419
00:17:03,570 --> 00:17:08,940
vt-x<font color="#CCCCCC"> cpuid</font><font color="#E5E5E5"> is a it's an unconditional</font>

420
00:17:07,140 --> 00:17:13,340
exit my thought at the time<font color="#CCCCCC"> was well</font>

421
00:17:08,940 --> 00:17:17,310
what<font color="#E5E5E5"> would happen if you followed</font><font color="#CCCCCC"> CPU ID</font>

422
00:17:13,339 --> 00:17:21,060
and it followed a move SS load<font color="#E5E5E5"> what</font>

423
00:17:17,310 --> 00:17:23,879
would happen in in<font color="#E5E5E5"> if if we had a VM</font>

424
00:17:21,060 --> 00:17:25,889
exit<font color="#CCCCCC"> after move SS and in this</font>

425
00:17:23,880 --> 00:17:27,930
particular<font color="#E5E5E5"> case</font><font color="#CCCCCC"> intel</font><font color="#E5E5E5"> actually</font>

426
00:17:25,890 --> 00:17:30,960
explicitly describes<font color="#CCCCCC"> in their manual</font>

427
00:17:27,930 --> 00:17:33,390
that<font color="#E5E5E5"> hey during this during this exit</font>

428
00:17:30,960 --> 00:17:36,270
<font color="#CCCCCC">there's a there's a</font><font color="#E5E5E5"> there's a blocking</font>

429
00:17:33,390 --> 00:17:38,280
by move SS for one instruction cycle AMD

430
00:17:36,270 --> 00:17:42,240
actually says nothing it was<font color="#E5E5E5"> like hey</font>

431
00:17:38,280 --> 00:17:44,850
it's it's whatever<font color="#CCCCCC"> so just just to</font><font color="#E5E5E5"> dive</font>

432
00:17:42,240 --> 00:17:47,820
into a deep technical detail for you

433
00:17:44,850 --> 00:17:50,280
quick AMD if we have a VM exit

434
00:17:47,820 --> 00:17:52,710
<font color="#CCCCCC">for cpuid with a pending DB it just</font>

435
00:17:50,280 --> 00:17:55,410
completely completely<font color="#E5E5E5"> throws it out in</font>

436
00:17:52,710 --> 00:17:58,920
<font color="#E5E5E5">Intel it's actually held pending and if</font>

437
00:17:55,410 --> 00:18:01,410
the if the<font color="#CCCCCC"> vmm developer</font><font color="#E5E5E5"> wrote their</font>

438
00:17:58,920 --> 00:18:05,850
code correctly it will<font color="#E5E5E5"> be thrown after</font>

439
00:18:01,410 --> 00:18:11,460
<font color="#CCCCCC">the cpuid increments its</font><font color="#E5E5E5"> its instruction</font>

440
00:18:05,850 --> 00:18:13,230
by one complete cycle<font color="#E5E5E5"> and so</font><font color="#CCCCCC"> two to</font>

441
00:18:11,460 --> 00:18:17,670
expand on<font color="#CCCCCC"> that my thought was well what</font>

442
00:18:13,230 --> 00:18:20,820
<font color="#E5E5E5">would happen if we had a move SS and</font>

443
00:18:17,670 --> 00:18:23,130
then<font color="#CCCCCC"> appending DB and then a branch</font><font color="#E5E5E5"> so</font>

444
00:18:20,820 --> 00:18:26,220
what happens is if<font color="#E5E5E5"> you have move SS or</font>

445
00:18:23,130 --> 00:18:29,190
pop SS and it<font color="#E5E5E5"> accesses memory followed</font>

446
00:18:26,220 --> 00:18:32,250
<font color="#CCCCCC">by a branch</font><font color="#E5E5E5"> after that right after that</font>

447
00:18:29,190 --> 00:18:35,340
instruction<font color="#E5E5E5"> it fires an</font><font color="#CCCCCC"> n1</font><font color="#E5E5E5"> come right</font>

448
00:18:32,250 --> 00:18:36,960
right<font color="#E5E5E5"> after that instruction and what</font>

449
00:18:35,340 --> 00:18:38,760
happens if<font color="#E5E5E5"> we do an inner</font><font color="#CCCCCC"> privilege</font>

450
00:18:36,960 --> 00:18:40,290
<font color="#E5E5E5">interrupt</font><font color="#CCCCCC"> okay in the two ways that we</font>

451
00:18:38,760 --> 00:18:44,910
<font color="#CCCCCC">can do that in user mode</font><font color="#E5E5E5"> are with</font>

452
00:18:40,290 --> 00:18:47,540
interrupted<font color="#E5E5E5"> Cisco so if you look at the</font>

453
00:18:44,910 --> 00:18:50,340
assembly<font color="#E5E5E5"> at the bottom and the white</font>

454
00:18:47,540 --> 00:18:53,310
<font color="#E5E5E5">what's important here is</font><font color="#CCCCCC"> that our</font><font color="#E5E5E5"> DX is</font>

455
00:18:50,340 --> 00:18:55,320
actually primed with debug registers<font color="#E5E5E5"> so</font>

456
00:18:53,310 --> 00:18:58,530
if you don't know if you've done<font color="#E5E5E5"> at</font>

457
00:18:55,320 --> 00:19:01,050
least some type of<font color="#E5E5E5"> user mode</font><font color="#CCCCCC"> Linux</font>

458
00:18:58,530 --> 00:19:03,149
debugging or Windows debugging<font color="#E5E5E5"> you can</font>

459
00:19:01,050 --> 00:19:05,970
actually set with the set thread

460
00:19:03,150 --> 00:19:09,360
contacts function on a linear<font color="#E5E5E5"> address we</font>

461
00:19:05,970 --> 00:19:13,110
could say that<font color="#CCCCCC"> our ax is going to fire</font>

462
00:19:09,360 --> 00:19:15,540
<font color="#E5E5E5">in in one after it accesses memory</font><font color="#CCCCCC"> now</font>

463
00:19:13,110 --> 00:19:19,439
what would normally happen<font color="#CCCCCC"> use</font><font color="#E5E5E5"> after</font>

464
00:19:15,540 --> 00:19:21,270
move SS accesses memory<font color="#E5E5E5"> if our X was</font>

465
00:19:19,440 --> 00:19:24,900
actually primed with debug registers<font color="#CCCCCC"> is</font>

466
00:19:21,270 --> 00:19:27,150
it would fire in<font color="#CCCCCC"> anyone after</font><font color="#E5E5E5"> it</font>

467
00:19:24,900 --> 00:19:29,010
finishes<font color="#CCCCCC"> its execution</font><font color="#E5E5E5"> but as I</font>

468
00:19:27,150 --> 00:19:31,560
described in the<font color="#E5E5E5"> previous slide</font><font color="#CCCCCC"> in this</font>

469
00:19:29,010 --> 00:19:34,620
<font color="#E5E5E5">particular case and only</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> particular</font>

470
00:19:31,560 --> 00:19:37,050
case<font color="#E5E5E5"> it's held off until</font><font color="#CCCCCC"> after the</font>

471
00:19:34,620 --> 00:19:38,969
<font color="#E5E5E5">instruction after</font><font color="#CCCCCC"> it completes and this</font>

472
00:19:37,050 --> 00:19:41,399
is an image<font color="#E5E5E5"> this is an interesting case</font>

473
00:19:38,970 --> 00:19:43,020
because<font color="#E5E5E5"> what happens what</font><font color="#CCCCCC"> happens if</font>

474
00:19:41,400 --> 00:19:45,060
<font color="#CCCCCC">after that instruction we have</font><font color="#E5E5E5"> an inner</font>

475
00:19:43,020 --> 00:19:47,879
<font color="#E5E5E5">privilege interrupt so I tried that</font>

476
00:19:45,060 --> 00:19:53,580
<font color="#CCCCCC">actually one random afternoon at my</font>

477
00:19:47,880 --> 00:19:56,070
<font color="#E5E5E5">house and my machine just blew up so</font>

478
00:19:53,580 --> 00:19:59,340
what happens we execute an entry in the

479
00:19:56,070 --> 00:20:01,379
context of user mode in Windows<font color="#CCCCCC"> this is</font>

480
00:19:59,340 --> 00:20:03,689
not privileged<font color="#E5E5E5"> ok the DPL</font>

481
00:20:01,380 --> 00:20:06,990
actually<font color="#CCCCCC"> three</font><font color="#E5E5E5"> so we can execute it</font>

482
00:20:03,690 --> 00:20:09,240
<font color="#CCCCCC">without any type of issue the entry</font>

483
00:20:06,990 --> 00:20:11,220
would normally cause a branch to<font color="#CCCCCC"> the</font>

484
00:20:09,240 --> 00:20:14,790
<font color="#E5E5E5">windows version</font><font color="#CCCCCC"> of the entry antler</font>

485
00:20:11,220 --> 00:20:17,880
<font color="#E5E5E5">which is a</font><font color="#CCCCCC"> breakpoint</font><font color="#E5E5E5"> trap but since we</font>

486
00:20:14,790 --> 00:20:19,950
<font color="#E5E5E5">have a pending in one before</font><font color="#CCCCCC"> it ever</font>

487
00:20:17,880 --> 00:20:21,330
<font color="#E5E5E5">executes the first instruction of K</font>

488
00:20:19,950 --> 00:20:24,000
<font color="#CCCCCC">break boy trap</font><font color="#E5E5E5"> it's actually you need to</font>

489
00:20:21,330 --> 00:20:25,889
<font color="#E5E5E5">go to the windows in one handler which</font>

490
00:20:24,000 --> 00:20:28,320
if you're<font color="#CCCCCC"> familiar with single stepping</font>

491
00:20:25,890 --> 00:20:30,750
instructions<font color="#CCCCCC"> it goes to the in one</font>

492
00:20:28,320 --> 00:20:33,330
handler<font color="#E5E5E5"> after every single</font><font color="#CCCCCC"> instruction</font>

493
00:20:30,750 --> 00:20:36,240
<font color="#CCCCCC">is executed</font><font color="#E5E5E5"> so if we look at number four</font>

494
00:20:33,330 --> 00:20:38,580
<font color="#E5E5E5">it's actually going to go to kadiebug</font>

495
00:20:36,240 --> 00:20:40,350
<font color="#E5E5E5">trap or fault which</font><font color="#CCCCCC"> is the windows name</font>

496
00:20:38,580 --> 00:20:44,550
<font color="#E5E5E5">it's actually the windows symbol name</font>

497
00:20:40,350 --> 00:20:46,649
for the in one handler in<font color="#CCCCCC"> its at</font><font color="#E5E5E5"> this</font>

498
00:20:44,550 --> 00:20:48,480
<font color="#E5E5E5">point in time that the</font><font color="#CCCCCC"> windows kernel</font>

499
00:20:46,650 --> 00:20:52,200
becomes completely confused<font color="#CCCCCC"> because</font>

500
00:20:48,480 --> 00:20:54,230
<font color="#CCCCCC">we're</font><font color="#E5E5E5"> actually at execution at ki debug</font>

501
00:20:52,200 --> 00:20:58,170
chopper fault<font color="#CCCCCC"> where it thinks</font><font color="#E5E5E5"> it came</font>

502
00:20:54,230 --> 00:21:01,260
from from kernel mode when in reality it

503
00:20:58,170 --> 00:21:03,180
came from user<font color="#E5E5E5"> mode so this is just a</font>

504
00:21:01,260 --> 00:21:05,610
<font color="#E5E5E5">simple demo and as I explained at the</font>

505
00:21:03,180 --> 00:21:06,930
beginning<font color="#E5E5E5"> this isn't this isn't entirely</font>

506
00:21:05,610 --> 00:21:08,429
critical it's just a way<font color="#CCCCCC"> to crash a</font>

507
00:21:06,930 --> 00:21:12,630
<font color="#E5E5E5">machine we're gonna get to egg the</font>

508
00:21:08,430 --> 00:21:16,200
actual cool later<font color="#CCCCCC"> so if you look we</font>

509
00:21:12,630 --> 00:21:19,020
have<font color="#E5E5E5"> we have execute it's wrapped in</font><font color="#CCCCCC"> a</font>

510
00:21:16,200 --> 00:21:20,850
try except<font color="#E5E5E5"> block this is just in</font><font color="#CCCCCC"> case it</font>

511
00:21:19,020 --> 00:21:23,340
crashes<font color="#E5E5E5"> so if you look at the bottom</font>

512
00:21:20,850 --> 00:21:27,149
right<font color="#CCCCCC"> this is our this is actually</font>

513
00:21:23,340 --> 00:21:30,510
nemi's code<font color="#E5E5E5"> for a github link so if your</font>

514
00:21:27,150 --> 00:21:32,040
machine<font color="#E5E5E5"> was not patched for pop SS this</font>

515
00:21:30,510 --> 00:21:33,720
would actually crash your machine and

516
00:21:32,040 --> 00:21:35,670
<font color="#E5E5E5">depending on the state of your machine</font>

517
00:21:33,720 --> 00:21:37,950
<font color="#CCCCCC">at the time you</font><font color="#E5E5E5"> can get a blue screen</font>

518
00:21:35,670 --> 00:21:39,930
<font color="#E5E5E5">your machine</font><font color="#CCCCCC"> could</font><font color="#E5E5E5"> completely Harlock it</font>

519
00:21:37,950 --> 00:21:41,940
depends<font color="#CCCCCC"> but</font><font color="#E5E5E5"> if your machine was patch</font>

520
00:21:39,930 --> 00:21:45,360
<font color="#CCCCCC">it's just gonna</font><font color="#E5E5E5"> throw an exception and</font>

521
00:21:41,940 --> 00:21:47,430
<font color="#E5E5E5">it's just gonna cause an early exit this</font>

522
00:21:45,360 --> 00:21:49,320
<font color="#E5E5E5">is</font><font color="#CCCCCC"> our assembly I'm gonna kind of</font><font color="#E5E5E5"> walk</font>

523
00:21:47,430 --> 00:21:52,500
you<font color="#CCCCCC"> through this is a little bit so if</font>

524
00:21:49,320 --> 00:21:54,030
you look at<font color="#E5E5E5"> the top we do a move SS to</font>

525
00:21:52,500 --> 00:21:56,670
the stack selector<font color="#E5E5E5"> that's important</font>

526
00:21:54,030 --> 00:21:58,950
because later when we do a move SS<font color="#E5E5E5"> it</font>

527
00:21:56,670 --> 00:22:00,870
has to be a valid SS we don't if we

528
00:21:58,950 --> 00:22:04,110
don't load a valid SS it's gonna cause a

529
00:22:00,870 --> 00:22:05,669
GP fault<font color="#CCCCCC"> and our</font><font color="#E5E5E5"> exploits not gonna work</font>

530
00:22:04,110 --> 00:22:07,169
at all<font color="#E5E5E5"> because it's gonna cause an</font>

531
00:22:05,670 --> 00:22:10,170
exception<font color="#E5E5E5"> earlier than it should and</font>

532
00:22:07,170 --> 00:22:11,850
<font color="#CCCCCC">then we if you look in the middle</font><font color="#E5E5E5"> kind</font>

533
00:22:10,170 --> 00:22:13,470
of you'll see a call set data<font color="#E5E5E5"> breakpoint</font>

534
00:22:11,850 --> 00:22:14,699
that's important<font color="#E5E5E5"> because of course</font><font color="#CCCCCC"> we</font>

535
00:22:13,470 --> 00:22:16,710
<font color="#E5E5E5">have to have</font>

536
00:22:14,700 --> 00:22:19,140
we have to have a pending DB exception

537
00:22:16,710 --> 00:22:22,230
by the time we reach the<font color="#CCCCCC"> move</font><font color="#E5E5E5"> SS</font>

538
00:22:19,140 --> 00:22:24,150
otherwise<font color="#E5E5E5"> otherwise we're not going</font><font color="#CCCCCC"> to</font>

539
00:22:22,230 --> 00:22:27,150
have the pending DB fire at the wrong

540
00:22:24,150 --> 00:22:29,880
point that<font color="#E5E5E5"> should</font><font color="#CCCCCC"> then is</font><font color="#E5E5E5"> nemi explained</font>

541
00:22:27,150 --> 00:22:33,690
earlier<font color="#CCCCCC"> we call the set thread context</font>

542
00:22:29,880 --> 00:22:35,160
<font color="#CCCCCC">so the higher-level</font><font color="#E5E5E5"> kernel32 function we</font>

543
00:22:33,690 --> 00:22:39,150
just<font color="#CCCCCC"> call that to set the data break</font>

544
00:22:35,160 --> 00:22:40,440
<font color="#CCCCCC">point on the move SS</font><font color="#E5E5E5"> the actual memory</font>

545
00:22:39,150 --> 00:22:42,720
<font color="#E5E5E5">that it's going to access</font><font color="#CCCCCC"> that's</font>

546
00:22:40,440 --> 00:22:44,730
important again<font color="#CCCCCC"> because if it doesn't</font><font color="#E5E5E5"> if</font>

547
00:22:42,720 --> 00:22:48,030
<font color="#E5E5E5">it doesn't have the debug register armed</font>

548
00:22:44,730 --> 00:22:50,460
<font color="#E5E5E5">then this</font><font color="#CCCCCC"> inter up isn't</font><font color="#E5E5E5"> gonna fire and</font>

549
00:22:48,030 --> 00:22:52,860
this<font color="#E5E5E5"> is kind of the heart</font><font color="#CCCCCC"> of it again</font>

550
00:22:50,460 --> 00:22:54,360
<font color="#CCCCCC">it's nothing it's nothing fancy it's</font>

551
00:22:52,860 --> 00:22:56,760
<font color="#E5E5E5">just gonna crash your machine so</font><font color="#CCCCCC"> if you</font>

552
00:22:54,360 --> 00:23:00,419
look at the top<font color="#E5E5E5"> we just</font><font color="#CCCCCC"> have the move SS</font>

553
00:22:56,760 --> 00:23:03,360
followed by an n3<font color="#E5E5E5"> so again move SS is</font>

554
00:23:00,420 --> 00:23:05,100
accessing<font color="#E5E5E5"> memory and the</font><font color="#CCCCCC"> RA X the</font>

555
00:23:03,360 --> 00:23:07,169
<font color="#CCCCCC">dereference there is accessing</font><font color="#E5E5E5"> memory</font>

556
00:23:05,100 --> 00:23:09,840
<font color="#E5E5E5">that is currently armed by a debug</font>

557
00:23:07,170 --> 00:23:11,760
register<font color="#E5E5E5"> followed by an</font><font color="#CCCCCC"> entry</font><font color="#E5E5E5"> so what</font>

558
00:23:09,840 --> 00:23:16,320
happens is after the<font color="#E5E5E5"> N three finishes</font>

559
00:23:11,760 --> 00:23:18,870
its execution<font color="#CCCCCC"> it's gonna fire ant 1 and</font>

560
00:23:16,320 --> 00:23:20,010
this is a quick video representation<font color="#CCCCCC"> of</font>

561
00:23:18,870 --> 00:23:21,360
how this works<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then he's</font><font color="#E5E5E5"> gonna go</font>

562
00:23:20,010 --> 00:23:24,150
ahead<font color="#E5E5E5"> and</font><font color="#CCCCCC"> walk us through</font><font color="#E5E5E5"> yeah so we'll</font>

563
00:23:21,360 --> 00:23:26,219
step through<font color="#E5E5E5"> this using the gdb stub and</font>

564
00:23:24,150 --> 00:23:28,620
<font color="#E5E5E5">we can actually debug</font><font color="#CCCCCC"> vmware</font><font color="#E5E5E5"> and see how</font>

565
00:23:26,220 --> 00:23:30,570
it handles<font color="#E5E5E5"> it so specifically what we do</font>

566
00:23:28,620 --> 00:23:32,429
is we start<font color="#E5E5E5"> a timer just so that you can</font>

567
00:23:30,570 --> 00:23:35,820
visually see when<font color="#CCCCCC"> i break in to the</font>

568
00:23:32,430 --> 00:23:37,560
debugger<font color="#E5E5E5"> we run the move SS sample that</font>

569
00:23:35,820 --> 00:23:39,840
you just saw the code for<font color="#E5E5E5"> and you can</font>

570
00:23:37,560 --> 00:23:41,820
check<font color="#E5E5E5"> the github link</font><font color="#CCCCCC"> if you're</font><font color="#E5E5E5"> confused</font>

571
00:23:39,840 --> 00:23:43,470
about<font color="#CCCCCC"> certain things there's a spin lock</font>

572
00:23:41,820 --> 00:23:44,850
there I'm not<font color="#E5E5E5"> sure if you saw</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> in</font>

573
00:23:43,470 --> 00:23:46,800
<font color="#E5E5E5">the code but this is just done so that I</font>

574
00:23:44,850 --> 00:23:50,040
can break in at<font color="#E5E5E5"> the point before we</font>

575
00:23:46,800 --> 00:23:52,830
<font color="#CCCCCC">actually run</font><font color="#E5E5E5"> the move SS in</font><font color="#CCCCCC"> 3</font><font color="#E5E5E5"> I can just</font>

576
00:23:50,040 --> 00:23:54,300
patch this out to an<font color="#E5E5E5"> OP and then we can</font>

577
00:23:52,830 --> 00:23:54,990
single step through<font color="#E5E5E5"> these instructions</font>

578
00:23:54,300 --> 00:23:57,870
real quick

579
00:23:54,990 --> 00:24:02,100
using the hypervisor debugger<font color="#E5E5E5"> of</font><font color="#CCCCCC"> vmware</font>

580
00:23:57,870 --> 00:24:04,830
<font color="#E5E5E5">so the move SS is gonna do reference</font><font color="#CCCCCC"> re</font>

581
00:24:02,100 --> 00:24:08,010
<font color="#CCCCCC">x</font><font color="#E5E5E5"> re x contains a hardware breakpoint</font>

582
00:24:04,830 --> 00:24:11,429
primed upon it<font color="#CCCCCC"> now if this wasn't move</font>

583
00:24:08,010 --> 00:24:12,840
SS or pop SS<font color="#E5E5E5"> it would actually cause an</font>

584
00:24:11,430 --> 00:24:14,700
end<font color="#CCCCCC"> 1 to</font><font color="#E5E5E5"> happen as soon as that</font>

585
00:24:12,840 --> 00:24:16,830
instruction<font color="#E5E5E5"> completed but it doesn't</font>

586
00:24:14,700 --> 00:24:19,020
because of the behavior<font color="#CCCCCC"> of move SS it</font>

587
00:24:16,830 --> 00:24:21,659
suppresses that<font color="#E5E5E5"> for one instruction that</font>

588
00:24:19,020 --> 00:24:25,920
<font color="#E5E5E5">means that that happens upon entry of in</font>

589
00:24:21,660 --> 00:24:27,540
<font color="#CCCCCC">theory and now</font><font color="#E5E5E5"> we execute in</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> the</font>

590
00:24:25,920 --> 00:24:28,660
hardware break<font color="#E5E5E5"> one hasn't hit the</font><font color="#CCCCCC"> high</font>

591
00:24:27,540 --> 00:24:31,420
<font color="#CCCCCC">road</font><font color="#E5E5E5"> breakpoint</font>

592
00:24:28,660 --> 00:24:33,310
applied now<font color="#E5E5E5"> after we've entered in three</font>

593
00:24:31,420 --> 00:24:34,960
but<font color="#E5E5E5"> look at where we're at we're</font>

594
00:24:33,310 --> 00:24:36,460
actually at the<font color="#CCCCCC"> Antoine</font><font color="#E5E5E5"> handler we're at</font>

595
00:24:34,960 --> 00:24:38,860
<font color="#E5E5E5">CAD debug trap our fault</font>

596
00:24:36,460 --> 00:24:40,390
so we've<font color="#E5E5E5"> entered the Antoine handler not</font>

597
00:24:38,860 --> 00:24:42,189
the in three handler as what we've

598
00:24:40,390 --> 00:24:44,770
expected<font color="#CCCCCC"> and if you look at the stack</font>

599
00:24:42,190 --> 00:24:48,310
<font color="#CCCCCC">actually which I'll get to</font><font color="#E5E5E5"> I'll</font>

600
00:24:44,770 --> 00:24:52,270
highlight that<font color="#E5E5E5"> using my mouse you seek a</font>

601
00:24:48,310 --> 00:24:55,120
<font color="#CCCCCC">breakpoint</font><font color="#E5E5E5"> trap is on top of the stack</font>

602
00:24:52,270 --> 00:24:58,389
<font color="#E5E5E5">and if you remember when I like short I</font>

603
00:24:55,120 --> 00:25:00,550
gave that explanation<font color="#E5E5E5"> on how the CPU</font>

604
00:24:58,390 --> 00:25:04,000
reacts<font color="#E5E5E5"> when it interrupts fires it puts</font>

605
00:25:00,550 --> 00:25:05,590
the previous state of the<font color="#E5E5E5"> processor on</font>

606
00:25:04,000 --> 00:25:08,860
top of the call stack<font color="#CCCCCC"> at the point of</font>

607
00:25:05,590 --> 00:25:10,810
<font color="#E5E5E5">the exception so</font><font color="#CCCCCC"> ki breakpoint trap</font><font color="#E5E5E5"> is</font>

608
00:25:08,860 --> 00:25:13,659
apparently<font color="#E5E5E5"> the cause of the ant one</font>

609
00:25:10,810 --> 00:25:16,060
exception which<font color="#E5E5E5"> is great because that</font>

610
00:25:13,660 --> 00:25:17,530
<font color="#E5E5E5">means it's</font><font color="#CCCCCC"> coming from kernel</font><font color="#E5E5E5"> mode it's</font>

611
00:25:16,060 --> 00:25:19,300
actually coming from kernel mode even

612
00:25:17,530 --> 00:25:23,560
<font color="#E5E5E5">though we caused the behavior to</font><font color="#CCCCCC"> occur</font>

613
00:25:19,300 --> 00:25:26,770
from<font color="#CCCCCC"> a user mode program we ran</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> INT</font>

614
00:25:23,560 --> 00:25:29,200
<font color="#E5E5E5">one from user mode but we</font><font color="#CCCCCC"> actually</font>

615
00:25:26,770 --> 00:25:31,420
delivered it in kernel mode<font color="#E5E5E5"> and that's</font>

616
00:25:29,200 --> 00:25:33,670
<font color="#CCCCCC">the beauty of the exploit</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> means</font>

617
00:25:31,420 --> 00:25:35,530
we've entered a ID bug trapper fault

618
00:25:33,670 --> 00:25:38,500
<font color="#E5E5E5">with a kernel mode CS</font><font color="#CCCCCC"> so that we don't</font>

619
00:25:35,530 --> 00:25:40,510
<font color="#E5E5E5">do the swap GS that</font><font color="#CCCCCC"> I mentioned would</font>

620
00:25:38,500 --> 00:25:42,250
happen<font color="#E5E5E5"> later and you can</font><font color="#CCCCCC"> see if</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> look</font>

621
00:25:40,510 --> 00:25:44,560
farther down on the call stack you can

622
00:25:42,250 --> 00:25:46,630
<font color="#E5E5E5">see where</font><font color="#CCCCCC"> our user mode code</font><font color="#E5E5E5"> fired this</font>

623
00:25:44,560 --> 00:25:48,550
was the in<font color="#CCCCCC"> theory branch</font><font color="#E5E5E5"> to the kernel</font>

624
00:25:46,630 --> 00:25:50,350
<font color="#CCCCCC">also add stuff to the interrupts the</font>

625
00:25:48,550 --> 00:25:52,860
screen to<font color="#E5E5E5"> the stack as part of the</font>

626
00:25:50,350 --> 00:25:56,379
interrupt handling of the processor and

627
00:25:52,860 --> 00:25:58,270
<font color="#CCCCCC">now if I resume the operating system its</font>

628
00:25:56,380 --> 00:26:02,560
hosed<font color="#CCCCCC"> it's not going to</font><font color="#E5E5E5"> continue at all</font>

629
00:25:58,270 --> 00:26:04,450
it's stuck at<font color="#E5E5E5"> eight seconds and if I</font>

630
00:26:02,560 --> 00:26:06,960
break in I'll<font color="#E5E5E5"> be stuck in a perpetual</font>

631
00:26:04,450 --> 00:26:09,730
page faulting loop so the<font color="#E5E5E5"> machine is</font>

632
00:26:06,960 --> 00:26:12,190
essentially not<font color="#E5E5E5"> gonna progress</font><font color="#CCCCCC"> anymore</font>

633
00:26:09,730 --> 00:26:14,320
<font color="#CCCCCC">and if I keep</font><font color="#E5E5E5"> breaking into</font><font color="#CCCCCC"> it you'll</font>

634
00:26:12,190 --> 00:26:18,250
see that<font color="#E5E5E5"> it's still stuck at that same</font>

635
00:26:14,320 --> 00:26:21,040
point in code<font color="#E5E5E5"> so we have successfully</font>

636
00:26:18,250 --> 00:26:23,470
caused the machine to deadlock<font color="#CCCCCC"> by just</font>

637
00:26:21,040 --> 00:26:28,450
executing two assembly instructions

638
00:26:23,470 --> 00:26:30,730
<font color="#E5E5E5">pretty crazy so let's</font><font color="#CCCCCC"> continue</font><font color="#E5E5E5"> with that</font>

639
00:26:28,450 --> 00:26:33,970
<font color="#CCCCCC">it gets</font><font color="#E5E5E5"> better because we can</font><font color="#CCCCCC"> actually</font>

640
00:26:30,730 --> 00:26:36,520
make<font color="#E5E5E5"> that and use it as a weaponized</font>

641
00:26:33,970 --> 00:26:38,830
thing instead<font color="#E5E5E5"> of</font><font color="#CCCCCC"> just hosing the machine</font>

642
00:26:36,520 --> 00:26:41,260
we can actually get system<font color="#E5E5E5"> privileges</font>

643
00:26:38,830 --> 00:26:42,379
but we'll get to that later<font color="#CCCCCC"> so again as</font>

644
00:26:41,260 --> 00:26:44,150
I just<font color="#E5E5E5"> explained</font>

645
00:26:42,380 --> 00:26:46,580
the whole<font color="#CCCCCC"> beauty of this is that you</font>

646
00:26:44,150 --> 00:26:48,200
avoid the swaps yes<font color="#E5E5E5"> so there's no need</font>

647
00:26:46,580 --> 00:26:49,610
<font color="#CCCCCC">to do the swaps yes if you're coming</font>

648
00:26:48,200 --> 00:26:51,980
<font color="#CCCCCC">from Carla Mona we've looked at this</font>

649
00:26:49,610 --> 00:26:53,360
code already<font color="#E5E5E5"> in this test which compares</font>

650
00:26:51,980 --> 00:26:55,340
that code segment<font color="#E5E5E5"> that's put on the</font>

651
00:26:53,360 --> 00:26:56,928
<font color="#E5E5E5">stack when you enter an interrupt</font>

652
00:26:55,340 --> 00:26:58,939
handler<font color="#CCCCCC"> checks to see if</font><font color="#E5E5E5"> it's coming</font>

653
00:26:56,929 --> 00:27:01,960
from<font color="#CCCCCC"> Colonel</font><font color="#E5E5E5"> mode and because</font><font color="#CCCCCC"> it is it</font>

654
00:26:58,940 --> 00:27:04,700
thinks it is<font color="#E5E5E5"> it skips this code now</font>

655
00:27:01,960 --> 00:27:07,370
<font color="#E5E5E5">because we control the threat</font>

656
00:27:04,700 --> 00:27:08,990
environment block and<font color="#E5E5E5"> GS is the threat</font>

657
00:27:07,370 --> 00:27:10,520
environment<font color="#CCCCCC"> blocking user</font><font color="#E5E5E5"> mode I believe</font>

658
00:27:08,990 --> 00:27:12,289
we've entered this from user<font color="#E5E5E5"> mode we</font>

659
00:27:10,520 --> 00:27:15,470
could<font color="#E5E5E5"> overwrite parts of that threat</font>

660
00:27:12,289 --> 00:27:17,629
environment block<font color="#E5E5E5"> to cause the CPU to</font>

661
00:27:15,470 --> 00:27:19,250
execute code wherever<font color="#E5E5E5"> we want but we</font>

662
00:27:17,630 --> 00:27:20,600
don't want<font color="#E5E5E5"> to do that because that</font><font color="#CCCCCC"> gets</font>

663
00:27:19,250 --> 00:27:21,890
a little more complicated<font color="#E5E5E5"> what we can do</font>

664
00:27:20,600 --> 00:27:24,918
is we<font color="#E5E5E5"> can actually just choose an</font>

665
00:27:21,890 --> 00:27:26,960
arbitrary<font color="#E5E5E5"> GS</font><font color="#CCCCCC"> base</font><font color="#E5E5E5"> thanks to the fact</font>

666
00:27:24,919 --> 00:27:29,600
there's an<font color="#CCCCCC"> instruction called Ride GS</font>

667
00:27:26,960 --> 00:27:32,330
<font color="#E5E5E5">base that lets you set any address there</font>

668
00:27:29,600 --> 00:27:33,709
so when the<font color="#E5E5E5"> colonel reads GS memory</font><font color="#CCCCCC"> it</font>

669
00:27:32,330 --> 00:27:35,809
<font color="#E5E5E5">doesn't dereference your threat</font>

670
00:27:33,710 --> 00:27:37,700
environment block<font color="#E5E5E5"> it doesn't dereference</font>

671
00:27:35,809 --> 00:27:39,289
<font color="#E5E5E5">your processor control region</font><font color="#CCCCCC"> it</font>

672
00:27:37,700 --> 00:27:41,120
actually<font color="#CCCCCC"> D references memory that you</font>

673
00:27:39,289 --> 00:27:43,158
completely<font color="#CCCCCC"> control and that makes it</font>

674
00:27:41,120 --> 00:27:47,059
even easier<font color="#E5E5E5"> to exploit as opposed to</font>

675
00:27:43,159 --> 00:27:49,070
just overriding<font color="#E5E5E5"> your tab so Nick's gonna</font>

676
00:27:47,059 --> 00:27:54,470
<font color="#E5E5E5">do that quick recap just</font><font color="#CCCCCC"> to explain</font>

677
00:27:49,070 --> 00:27:55,158
where we're at and<font color="#E5E5E5"> what we have now all</font>

678
00:27:54,470 --> 00:27:58,039
<font color="#E5E5E5">right perfect</font>

679
00:27:55,159 --> 00:28:00,890
<font color="#E5E5E5">so if you're paying attention</font><font color="#CCCCCC"> basically</font>

680
00:27:58,039 --> 00:28:03,200
what happens is we we end up firing a DB

681
00:28:00,890 --> 00:28:06,200
exception<font color="#E5E5E5"> at an entirely unexpected</font>

682
00:28:03,200 --> 00:28:10,730
location and operating system developers

683
00:28:06,200 --> 00:28:12,559
at the time per the<font color="#CCCCCC"> intel and AMD</font>

684
00:28:10,730 --> 00:28:14,960
instruction manual were not prepared for

685
00:28:12,559 --> 00:28:17,418
this<font color="#E5E5E5"> particular case and the handler</font>

686
00:28:14,960 --> 00:28:20,870
<font color="#E5E5E5">that</font><font color="#CCCCCC"> they wrote</font><font color="#E5E5E5"> which would be in one</font>

687
00:28:17,419 --> 00:28:22,760
handler was not aware<font color="#E5E5E5"> the the interrupt</font>

688
00:28:20,870 --> 00:28:26,239
<font color="#CCCCCC">that it was currently handling</font><font color="#E5E5E5"> was</font>

689
00:28:22,760 --> 00:28:28,820
coming from<font color="#CCCCCC"> an untrusted</font><font color="#E5E5E5"> location and so</font>

690
00:28:26,240 --> 00:28:32,659
what happens is<font color="#E5E5E5"> this gonna start</font><font color="#CCCCCC"> using</font>

691
00:28:28,820 --> 00:28:35,240
data that<font color="#CCCCCC"> was sent to it that it</font><font color="#E5E5E5"> thinks</font>

692
00:28:32,659 --> 00:28:37,610
is<font color="#CCCCCC"> kernel data</font><font color="#E5E5E5"> but in reality it's it's</font>

693
00:28:35,240 --> 00:28:41,330
user mode data<font color="#CCCCCC"> instance says let me</font>

694
00:28:37,610 --> 00:28:44,658
<font color="#E5E5E5">explain we control</font><font color="#CCCCCC"> GS base most CPUs</font><font color="#E5E5E5"> to</font>

695
00:28:41,330 --> 00:28:47,020
<font color="#E5E5E5">this day support the wor GS based</font>

696
00:28:44,659 --> 00:28:49,429
instruction<font color="#CCCCCC"> in the event</font><font color="#E5E5E5"> that it did it</font>

697
00:28:47,020 --> 00:28:52,370
we can still<font color="#E5E5E5"> send it easier mode data</font>

698
00:28:49,429 --> 00:28:54,200
from from<font color="#E5E5E5"> what's basically</font><font color="#CCCCCC"> the user mode</font>

699
00:28:52,370 --> 00:28:56,539
tab it would just be substantially<font color="#CCCCCC"> more</font>

700
00:28:54,200 --> 00:28:58,899
difficult<font color="#E5E5E5"> in</font>

701
00:28:56,539 --> 00:29:01,549
at this point<font color="#E5E5E5"> basically we need to find</font>

702
00:28:58,899 --> 00:29:04,309
<font color="#E5E5E5">instructions that are gonna</font><font color="#CCCCCC"> capitalize</font>

703
00:29:01,549 --> 00:29:07,309
on this fact<font color="#E5E5E5"> that we're using data</font><font color="#CCCCCC"> that</font>

704
00:29:04,309 --> 00:29:10,220
it thinks<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> kernel-mode data but in</font>

705
00:29:07,309 --> 00:29:13,039
reality<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> from user mode</font><font color="#CCCCCC"> and at the</font>

706
00:29:10,220 --> 00:29:15,710
<font color="#E5E5E5">very bottom</font><font color="#CCCCCC"> in the event</font><font color="#E5E5E5"> that you might</font>

707
00:29:13,039 --> 00:29:17,779
<font color="#CCCCCC">need</font><font color="#E5E5E5"> a new prescription for your</font><font color="#CCCCCC"> glasses</font>

708
00:29:15,710 --> 00:29:19,820
<font color="#CCCCCC">we want to we want</font><font color="#E5E5E5"> to turn this into</font>

709
00:29:17,779 --> 00:29:23,090
some kind<font color="#CCCCCC"> of profit</font><font color="#E5E5E5"> we want to weaponize</font>

710
00:29:19,820 --> 00:29:24,619
<font color="#E5E5E5">this so these are my initial weaponizing</font>

711
00:29:23,090 --> 00:29:25,908
attempts we're gonna do go through mine

712
00:29:24,619 --> 00:29:27,709
then we're gonna go through

713
00:29:25,909 --> 00:29:31,249
nemi's over here<font color="#E5E5E5"> so at the very</font>

714
00:29:27,710 --> 00:29:34,820
<font color="#E5E5E5">beginning</font><font color="#CCCCCC"> I erroneously assumed that</font>

715
00:29:31,249 --> 00:29:36,320
there was no encoding for<font color="#E5E5E5"> move SS</font><font color="#CCCCCC"> re x</font>

716
00:29:34,820 --> 00:29:38,210
which as you can<font color="#CCCCCC"> see</font><font color="#E5E5E5"> since it's</font>

717
00:29:36,320 --> 00:29:41,029
surrounded in brackets<font color="#CCCCCC"> dereferences</font>

718
00:29:38,210 --> 00:29:43,340
memory<font color="#CCCCCC"> i thought at</font><font color="#E5E5E5"> the time</font><font color="#CCCCCC"> that there</font>

719
00:29:41,029 --> 00:29:44,840
was<font color="#E5E5E5"> only a mu s SI x which is an</font>

720
00:29:43,340 --> 00:29:46,580
<font color="#E5E5E5">immediate</font><font color="#CCCCCC"> value</font><font color="#E5E5E5"> which is in the</font>

721
00:29:44,840 --> 00:29:48,408
instruction stream<font color="#E5E5E5"> so if you're really</font>

722
00:29:46,580 --> 00:29:50,809
<font color="#CCCCCC">actually familiar</font><font color="#E5E5E5"> with how debug</font>

723
00:29:48,409 --> 00:29:53,029
registers work you would know that<font color="#E5E5E5"> what</font>

724
00:29:50,809 --> 00:29:55,789
you see there the move<font color="#CCCCCC"> s si X would not</font>

725
00:29:53,029 --> 00:29:57,919
<font color="#E5E5E5">actually work as far as</font><font color="#CCCCCC"> the debug</font>

726
00:29:55,789 --> 00:30:00,950
register<font color="#E5E5E5"> is concerned it would not fire</font>

727
00:29:57,919 --> 00:30:04,340
any type of<font color="#E5E5E5"> ant</font><font color="#CCCCCC"> one and this was</font><font color="#E5E5E5"> pointed</font>

728
00:30:00,950 --> 00:30:06,440
out<font color="#CCCCCC"> to us in error by some of the Linux</font>

729
00:30:04,340 --> 00:30:08,658
developers thankfully later<font color="#E5E5E5"> after we</font>

730
00:30:06,440 --> 00:30:10,759
released<font color="#E5E5E5"> this exploit but at the time</font>

731
00:30:08,659 --> 00:30:13,940
<font color="#CCCCCC">what's important is I tried to weaponize</font>

732
00:30:10,759 --> 00:30:15,759
it<font color="#CCCCCC"> through pop</font><font color="#E5E5E5"> s s because pop</font><font color="#CCCCCC"> s s is if</font>

733
00:30:13,940 --> 00:30:18,830
you're familiar<font color="#E5E5E5"> again with assembly pop</font>

734
00:30:15,759 --> 00:30:22,999
pops data from the stack he<font color="#CCCCCC"> accesses</font>

735
00:30:18,830 --> 00:30:24,499
<font color="#E5E5E5">stack memory</font><font color="#CCCCCC"> and so I tried</font><font color="#E5E5E5"> the</font>

736
00:30:22,999 --> 00:30:26,690
assumption there is that<font color="#E5E5E5"> pop s s is</font>

737
00:30:24,499 --> 00:30:28,879
<font color="#E5E5E5">gonna access stack memory so if we arm</font>

738
00:30:26,690 --> 00:30:31,039
it with the type of debug register it's

739
00:30:28,879 --> 00:30:33,529
going to dereference<font color="#E5E5E5"> stack memory and</font>

740
00:30:31,039 --> 00:30:38,029
it's<font color="#CCCCCC"> going to fire in</font><font color="#E5E5E5"> one unfortunately</font>

741
00:30:33,529 --> 00:30:41,869
pop<font color="#E5E5E5"> SS in</font><font color="#CCCCCC"> AMD 64</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> Intel's version of</font>

742
00:30:38,029 --> 00:30:44,509
a 64-bit code it's<font color="#E5E5E5"> not valid in their</font>

743
00:30:41,869 --> 00:30:47,749
32-bit compiled a compatibility code

744
00:30:44,509 --> 00:30:49,730
segment<font color="#E5E5E5"> and on</font><font color="#CCCCCC"> Intel chips syscall is</font>

745
00:30:47,749 --> 00:30:52,759
not valid and the reason<font color="#E5E5E5"> that that's</font>

746
00:30:49,730 --> 00:30:55,879
important is we wanted<font color="#E5E5E5"> to use a user</font>

747
00:30:52,759 --> 00:30:57,619
mode stack<font color="#E5E5E5"> when we execute</font><font color="#CCCCCC"> sis</font><font color="#E5E5E5"> call so</font>

748
00:30:55,879 --> 00:31:00,168
at the time<font color="#E5E5E5"> I just focus on</font><font color="#CCCCCC"> the</font>

749
00:30:57,619 --> 00:31:03,350
<font color="#CCCCCC">invariant and the invariant is</font><font color="#E5E5E5"> basically</font>

750
00:31:00,169 --> 00:31:07,580
we execute<font color="#E5E5E5"> int and we check the we check</font>

751
00:31:03,350 --> 00:31:09,530
the windows<font color="#CCCCCC"> and one Handler</font><font color="#E5E5E5"> into using</font>

752
00:31:07,580 --> 00:31:11,030
data<font color="#CCCCCC"> that we pass it when</font>

753
00:31:09,530 --> 00:31:14,290
should have<font color="#E5E5E5"> done swaps yes but it</font>

754
00:31:11,030 --> 00:31:17,060
actually<font color="#E5E5E5"> does it so if you look</font>

755
00:31:14,290 --> 00:31:19,370
basically we our goal was to<font color="#E5E5E5"> try and</font>

756
00:31:17,060 --> 00:31:22,340
<font color="#CCCCCC">find</font><font color="#E5E5E5"> some type of instruction that's</font>

757
00:31:19,370 --> 00:31:26,090
going to use or I should say<font color="#E5E5E5"> a set of</font>

758
00:31:22,340 --> 00:31:27,770
instructions that's going to use<font color="#E5E5E5"> GS</font><font color="#CCCCCC"> and</font>

759
00:31:26,090 --> 00:31:29,720
if you see right<font color="#CCCCCC"> here in the bug check</font>

760
00:31:27,770 --> 00:31:31,460
<font color="#CCCCCC">function and the reason bug check if</font>

761
00:31:29,720 --> 00:31:34,130
you're from if you're familiar with bug

762
00:31:31,460 --> 00:31:36,770
check is actually a blue screen<font color="#CCCCCC"> ke bug</font>

763
00:31:34,130 --> 00:31:38,540
check<font color="#E5E5E5"> X is basically the the initial</font>

764
00:31:36,770 --> 00:31:42,830
function<font color="#E5E5E5"> of starting a blue screen on</font>

765
00:31:38,540 --> 00:31:46,310
<font color="#E5E5E5">the Windows kernel</font><font color="#CCCCCC"> it starts using our</font>

766
00:31:42,830 --> 00:31:49,429
<font color="#CCCCCC">CX from data</font><font color="#E5E5E5"> that is actually sent that</font>

767
00:31:46,310 --> 00:31:51,950
<font color="#CCCCCC">we send to it so the goal is hey it's</font>

768
00:31:49,430 --> 00:31:53,570
reading data<font color="#E5E5E5"> it's reading data from a GS</font>

769
00:31:51,950 --> 00:31:55,760
that<font color="#E5E5E5"> we send it and hopefully it's gonna</font>

770
00:31:53,570 --> 00:31:57,230
turn it<font color="#CCCCCC"> into something</font><font color="#E5E5E5"> else I mean right</font>

771
00:31:55,760 --> 00:32:00,379
now<font color="#E5E5E5"> as you can see by the highlighted</font>

772
00:31:57,230 --> 00:32:01,970
<font color="#CCCCCC">instructions is reading it</font><font color="#E5E5E5"> but if it's</font>

773
00:32:00,380 --> 00:32:03,560
<font color="#E5E5E5">not if it's just gonna read it we're</font>

774
00:32:01,970 --> 00:32:05,570
kind of out of luck<font color="#CCCCCC"> we kind</font><font color="#E5E5E5"> of have</font>

775
00:32:03,560 --> 00:32:07,700
to we kind of have to hope<font color="#E5E5E5"> that it's</font>

776
00:32:05,570 --> 00:32:09,110
<font color="#E5E5E5">gonna use it for something else</font><font color="#CCCCCC"> and in</font>

777
00:32:07,700 --> 00:32:11,840
<font color="#CCCCCC">the</font><font color="#E5E5E5"> actual function that it calls you</font>

778
00:32:09,110 --> 00:32:13,850
can see our tail<font color="#E5E5E5"> capture contest excuse</font>

779
00:32:11,840 --> 00:32:16,730
me<font color="#CCCCCC"> RT I'll capture context you see the</font>

780
00:32:13,850 --> 00:32:19,669
ends up writing data<font color="#E5E5E5"> and if you look</font>

781
00:32:16,730 --> 00:32:25,670
carefully<font color="#CCCCCC"> all the</font><font color="#E5E5E5"> instructions before</font>

782
00:32:19,670 --> 00:32:28,790
<font color="#E5E5E5">the yellow highlight it writes data to a</font>

783
00:32:25,670 --> 00:32:33,890
pointer that<font color="#CCCCCC"> we put in so RI x RS CX</font><font color="#E5E5E5"> r</font>

784
00:32:28,790 --> 00:32:35,780
<font color="#E5E5E5">DX r 8 or 9 r 10 unfortunately those are</font>

785
00:32:33,890 --> 00:32:39,200
all collaborate during<font color="#E5E5E5"> the interrupt</font>

786
00:32:35,780 --> 00:32:41,480
dispatch path process and you'll in our

787
00:32:39,200 --> 00:32:44,060
luck<font color="#CCCCCC"> the</font><font color="#E5E5E5"> only debt</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> only register</font>

788
00:32:41,480 --> 00:32:46,550
that<font color="#E5E5E5"> we controlled was our</font><font color="#CCCCCC"> 11 or 11</font>

789
00:32:44,060 --> 00:32:49,129
would be<font color="#CCCCCC"> whatever we send it on input so</font>

790
00:32:46,550 --> 00:32:51,620
if we send<font color="#CCCCCC"> an input to the exploit at 0</font>

791
00:32:49,130 --> 00:32:55,100
it will be 0<font color="#CCCCCC"> if we send</font><font color="#E5E5E5"> 1 it would be 1</font>

792
00:32:51,620 --> 00:32:58,669
<font color="#E5E5E5">in in this particular case we want to do</font>

793
00:32:55,100 --> 00:33:01,520
attack<font color="#CCCCCC"> GCI options which is the code</font>

794
00:32:58,670 --> 00:33:03,500
integrity variable<font color="#E5E5E5"> in</font><font color="#CCCCCC"> Windows</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> we</font>

795
00:33:01,520 --> 00:33:06,590
want<font color="#E5E5E5"> to load the driver but at the same</font>

796
00:33:03,500 --> 00:33:07,940
time we don't<font color="#CCCCCC"> want to</font><font color="#E5E5E5"> continue the bug</font>

797
00:33:06,590 --> 00:33:10,459
check process because that<font color="#E5E5E5"> would</font>

798
00:33:07,940 --> 00:33:13,010
completely destroy system<font color="#E5E5E5"> state and by</font>

799
00:33:10,460 --> 00:33:15,920
the time we<font color="#CCCCCC"> actually run kernel code we</font>

800
00:33:13,010 --> 00:33:18,320
would be in a situation where where we

801
00:33:15,920 --> 00:33:20,960
were recovering the entire system would

802
00:33:18,320 --> 00:33:23,230
be very<font color="#CCCCCC"> difficult</font><font color="#E5E5E5"> so if you actually</font>

803
00:33:20,960 --> 00:33:27,460
<font color="#E5E5E5">look at the highlighted instruction</font>

804
00:33:23,230 --> 00:33:30,820
move<font color="#CCCCCC"> ApS requires</font><font color="#E5E5E5"> 16 byte alignment so</font>

805
00:33:27,460 --> 00:33:33,100
we sent in<font color="#CCCCCC"> a particular linear</font><font color="#E5E5E5"> memory</font>

806
00:33:30,820 --> 00:33:35,290
address that was not 16 by the lined so

807
00:33:33,100 --> 00:33:36,790
since it's<font color="#E5E5E5"> not a 16 by the line move ApS</font>

808
00:33:35,290 --> 00:33:38,889
actually causes the<font color="#E5E5E5"> general protection</font>

809
00:33:36,790 --> 00:33:39,610
<font color="#CCCCCC">Fault</font><font color="#E5E5E5"> in since it causes general</font>

810
00:33:38,890 --> 00:33:41,350
protection fault

811
00:33:39,610 --> 00:33:44,100
it starts the entire bug check process

812
00:33:41,350 --> 00:33:47,049
all over<font color="#E5E5E5"> executing this entire process</font>

813
00:33:44,100 --> 00:33:48,730
<font color="#E5E5E5">repetitive repetitively spinning over</font>

814
00:33:47,049 --> 00:33:55,530
<font color="#CCCCCC">and</font><font color="#E5E5E5"> over and over so what we have here</font>

815
00:33:48,730 --> 00:33:59,049
<font color="#E5E5E5">is a right what we're voting the</font><font color="#CCCCCC"> same</font>

816
00:33:55,530 --> 00:34:01,570
<font color="#E5E5E5">very keeps writing the same memory over</font>

817
00:33:59,049 --> 00:34:04,960
and over repetitively<font color="#E5E5E5"> and since we have</font>

818
00:34:01,570 --> 00:34:08,710
access<font color="#E5E5E5"> to other CPUs we can change the</font>

819
00:34:04,960 --> 00:34:10,629
memory that it keeps writing<font color="#E5E5E5"> to so the</font>

820
00:34:08,710 --> 00:34:14,050
goal<font color="#E5E5E5"> here was to load a driver</font><font color="#CCCCCC"> obviously</font>

821
00:34:10,629 --> 00:34:16,118
<font color="#CCCCCC">an unsigned driver</font><font color="#E5E5E5"> and without</font><font color="#CCCCCC"> getting</font>

822
00:34:14,050 --> 00:34:19,419
<font color="#E5E5E5">into deep technical</font><font color="#CCCCCC"> detail</font><font color="#E5E5E5"> you can have</font>

823
00:34:16,119 --> 00:34:21,460
you can<font color="#E5E5E5"> ask us later at the QA</font><font color="#CCCCCC"> CPU zero</font>

824
00:34:19,418 --> 00:34:26,049
<font color="#E5E5E5">has to do the driver</font><font color="#CCCCCC"> loading</font><font color="#E5E5E5"> the reason</font>

825
00:34:21,460 --> 00:34:29,710
<font color="#E5E5E5">for that is related to a</font><font color="#CCCCCC"> Peck priority</font>

826
00:34:26,050 --> 00:34:31,210
type of interrupts so CPU<font color="#CCCCCC"> zero would be</font>

827
00:34:29,710 --> 00:34:34,480
<font color="#CCCCCC">the only one</font><font color="#E5E5E5"> that could respond to disk</font>

828
00:34:31,210 --> 00:34:36,429
interrupts so CPU zero<font color="#E5E5E5"> actually had to</font>

829
00:34:34,480 --> 00:34:39,879
do the driver loading<font color="#CCCCCC"> well anything</font>

830
00:34:36,429 --> 00:34:43,149
other than CPU zero<font color="#E5E5E5"> could run the the</font>

831
00:34:39,879 --> 00:34:44,469
actual<font color="#E5E5E5"> right what where stuff</font><font color="#CCCCCC"> so what</font>

832
00:34:43,149 --> 00:34:48,190
that means is that this<font color="#E5E5E5"> particular</font>

833
00:34:44,469 --> 00:34:51,540
<font color="#E5E5E5">vulnerability requires more</font><font color="#CCCCCC"> than</font><font color="#E5E5E5"> one CPU</font>

834
00:34:48,190 --> 00:34:58,170
<font color="#E5E5E5">which in most cases most computers today</font>

835
00:34:51,540 --> 00:35:01,390
<font color="#E5E5E5">have more than one CPU on them and this</font>

836
00:34:58,170 --> 00:35:03,670
we were stuck<font color="#CCCCCC"> because a</font><font color="#E5E5E5"> CPU zero would</font>

837
00:35:01,390 --> 00:35:06,160
actually send<font color="#E5E5E5"> down TLB shoot downs to</font>

838
00:35:03,670 --> 00:35:09,220
the other CPUs and we were kind of

839
00:35:06,160 --> 00:35:11,560
screwed<font color="#E5E5E5"> because we didn't</font><font color="#CCCCCC"> have we didn't</font>

840
00:35:09,220 --> 00:35:15,970
have a<font color="#CCCCCC"> rule way</font><font color="#E5E5E5"> to resolve the the</font>

841
00:35:11,560 --> 00:35:19,450
packet barrier pointer and<font color="#CCCCCC"> we were stuck</font>

842
00:35:15,970 --> 00:35:20,549
we we had<font color="#CCCCCC"> nothing</font><font color="#E5E5E5"> we could do thankfully</font>

843
00:35:19,450 --> 00:35:24,910
by chance

844
00:35:20,550 --> 00:35:26,619
<font color="#CCCCCC">Demming he discovered a look</font><font color="#E5E5E5"> every</font>

845
00:35:24,910 --> 00:35:28,600
didn't<font color="#E5E5E5"> by depth by completely dumb luck</font>

846
00:35:26,619 --> 00:35:30,940
while the<font color="#E5E5E5"> while</font><font color="#CCCCCC"> just working on some</font>

847
00:35:28,600 --> 00:35:32,799
random<font color="#CCCCCC"> other than this then we</font>

848
00:35:30,940 --> 00:35:36,050
<font color="#E5E5E5">actually discovered</font><font color="#CCCCCC"> up point early to</font>

849
00:35:32,800 --> 00:35:38,960
<font color="#E5E5E5">the K PCR so we were able</font><font color="#CCCCCC"> to</font>

850
00:35:36,050 --> 00:35:40,940
<font color="#E5E5E5">resolve a pointer to the K PCR and we</font>

851
00:35:38,960 --> 00:35:43,250
were able<font color="#CCCCCC"> to add that to our right what</font>

852
00:35:40,940 --> 00:35:44,870
we're spinning<font color="#E5E5E5"> CPU to add that to say</font>

853
00:35:43,250 --> 00:35:46,850
<font color="#E5E5E5">that hey all the CPUs are done with</font>

854
00:35:44,870 --> 00:35:49,670
their TLB shoot downs<font color="#E5E5E5"> and you can</font>

855
00:35:46,850 --> 00:35:52,279
continue<font color="#CCCCCC"> on with your execution we ran</font>

856
00:35:49,670 --> 00:35:54,020
into another<font color="#CCCCCC"> problem where that</font><font color="#E5E5E5"> CPU</font>

857
00:35:52,280 --> 00:35:56,480
would<font color="#E5E5E5"> run out</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> its double</font><font color="#CCCCCC"> fault stack</font>

858
00:35:54,020 --> 00:35:59,360
space<font color="#E5E5E5"> and that would flow into its K PCR</font>

859
00:35:56,480 --> 00:36:01,670
<font color="#E5E5E5">luckily his pointer leak also gave us</font>

860
00:35:59,360 --> 00:36:03,680
appointed to the TSS and<font color="#E5E5E5"> we were</font><font color="#CCCCCC"> able to</font>

861
00:36:01,670 --> 00:36:05,630
overwrite the<font color="#E5E5E5"> double fault stack in that</font>

862
00:36:03,680 --> 00:36:07,850
particular case we overrode the<font color="#E5E5E5"> double</font>

863
00:36:05,630 --> 00:36:10,610
pulse stack to point to<font color="#E5E5E5"> user mode memory</font>

864
00:36:07,850 --> 00:36:15,980
<font color="#E5E5E5">and I completely solved that problem for</font>

865
00:36:10,610 --> 00:36:18,800
us so quick<font color="#CCCCCC"> recap here</font><font color="#E5E5E5"> at the end of the</font>

866
00:36:15,980 --> 00:36:21,470
day this was<font color="#E5E5E5"> really complicated</font><font color="#CCCCCC"> I spent</font>

867
00:36:18,800 --> 00:36:24,620
I would say an entire month<font color="#E5E5E5"> of my life</font>

868
00:36:21,470 --> 00:36:27,589
<font color="#E5E5E5">trying to make</font><font color="#CCCCCC"> this work but</font><font color="#E5E5E5"> end of the</font>

869
00:36:24,620 --> 00:36:29,180
<font color="#E5E5E5">day it worked it worked really well and</font>

870
00:36:27,590 --> 00:36:32,330
<font color="#E5E5E5">that was the invariant where we're gonna</font>

871
00:36:29,180 --> 00:36:34,129
dive into<font color="#E5E5E5"> next is</font><font color="#CCCCCC"> Cisco and again with</font>

872
00:36:32,330 --> 00:36:36,890
Cisco we end up<font color="#CCCCCC"> using a user mode stack</font>

873
00:36:34,130 --> 00:36:39,530
executing kernel code nemi's<font color="#E5E5E5"> gonna</font><font color="#CCCCCC"> kick</font>

874
00:36:36,890 --> 00:36:41,569
<font color="#CCCCCC">it walk us through that yeah it's much</font>

875
00:36:39,530 --> 00:36:44,840
much much much<font color="#CCCCCC"> easier because</font><font color="#E5E5E5"> you don't</font>

876
00:36:41,570 --> 00:36:47,420
<font color="#CCCCCC">have</font><font color="#E5E5E5"> to deal</font><font color="#CCCCCC"> with a lot of complicated</font>

877
00:36:44,840 --> 00:36:48,980
<font color="#E5E5E5">things</font><font color="#CCCCCC"> that the int handler forces you</font>

878
00:36:47,420 --> 00:36:51,350
to do so<font color="#E5E5E5"> what the best thing about</font>

879
00:36:48,980 --> 00:36:53,990
system<font color="#CCCCCC"> calls</font><font color="#E5E5E5"> when they occur</font><font color="#CCCCCC"> they</font>

880
00:36:51,350 --> 00:36:56,120
<font color="#E5E5E5">actually don't do a stack swap so in the</font>

881
00:36:53,990 --> 00:36:58,850
terms of the previous exploit when we

882
00:36:56,120 --> 00:37:00,680
fire<font color="#E5E5E5"> an entry and then we get that</font>

883
00:36:58,850 --> 00:37:02,150
pending in one that fires afterwards

884
00:37:00,680 --> 00:37:03,649
<font color="#E5E5E5">what ends up</font><font color="#CCCCCC"> happening is because</font>

885
00:37:02,150 --> 00:37:05,210
<font color="#E5E5E5">there's a privilege level change we're</font>

886
00:37:03,650 --> 00:37:08,480
going<font color="#E5E5E5"> from user mode to kernel mode we</font>

887
00:37:05,210 --> 00:37:11,420
stop we swap stack now with system calls

888
00:37:08,480 --> 00:37:14,360
<font color="#E5E5E5">that doesn't happen actually</font><font color="#CCCCCC"> as part</font><font color="#E5E5E5"> of</font>

889
00:37:11,420 --> 00:37:15,980
this<font color="#E5E5E5"> just call instruction</font><font color="#CCCCCC"> it's</font>

890
00:37:14,360 --> 00:37:17,360
<font color="#E5E5E5">documented well documented you're</font>

891
00:37:15,980 --> 00:37:19,310
supposed<font color="#E5E5E5"> to update the stack yourself</font>

892
00:37:17,360 --> 00:37:21,230
<font color="#E5E5E5">and you can actually see down</font><font color="#CCCCCC"> here this</font>

893
00:37:19,310 --> 00:37:23,299
is<font color="#E5E5E5"> the system call handler so when</font>

894
00:37:21,230 --> 00:37:26,420
assist call fires it goes<font color="#E5E5E5"> into ki system</font>

895
00:37:23,300 --> 00:37:27,800
call 64 on<font color="#CCCCCC"> Windows</font><font color="#E5E5E5"> it does a swap GS and</font>

896
00:37:26,420 --> 00:37:32,060
then it loads<font color="#E5E5E5"> the appropriate stack</font>

897
00:37:27,800 --> 00:37:34,070
pointer on that<font color="#E5E5E5"> CPU now</font><font color="#CCCCCC"> because we never</font>

898
00:37:32,060 --> 00:37:37,370
<font color="#CCCCCC">actually execute any instructions in</font>

899
00:37:34,070 --> 00:37:41,750
<font color="#E5E5E5">cache system call 64 we enter kernel</font>

900
00:37:37,370 --> 00:37:44,150
mode with a user mode step and that

901
00:37:41,750 --> 00:37:46,130
makes it so so so much easier to<font color="#E5E5E5"> exploit</font>

902
00:37:44,150 --> 00:37:49,340
<font color="#E5E5E5">so it's functions very similar to in</font>

903
00:37:46,130 --> 00:37:49,809
<font color="#CCCCCC">theory</font><font color="#E5E5E5"> but better system call execute in</font>

904
00:37:49,340 --> 00:37:53,170
the<font color="#E5E5E5"> comp</font>

905
00:37:49,809 --> 00:37:55,029
so we<font color="#CCCCCC"> user</font><font color="#E5E5E5"> mode at code it branches to</font>

906
00:37:53,170 --> 00:37:57,670
<font color="#CCCCCC">the system calls handler</font><font color="#E5E5E5"> which is cat</font>

907
00:37:55,029 --> 00:37:59,680
system call 64 before any instruction

908
00:37:57,670 --> 00:38:01,630
<font color="#CCCCCC">execute and cache system</font><font color="#E5E5E5"> call 64</font><font color="#CCCCCC"> that</font>

909
00:37:59,680 --> 00:38:05,229
<font color="#E5E5E5">means that swaps yes doesn't execute</font>

910
00:38:01,630 --> 00:38:07,420
<font color="#CCCCCC">before any instruction execute</font><font color="#E5E5E5"> that DB</font>

911
00:38:05,229 --> 00:38:09,759
<font color="#E5E5E5">that</font><font color="#CCCCCC"> we suppressed by move SS and</font><font color="#E5E5E5"> Papas</font>

912
00:38:07,420 --> 00:38:11,890
as fires and we go to the<font color="#E5E5E5"> ant</font><font color="#CCCCCC"> one</font>

913
00:38:09,759 --> 00:38:14,079
handler<font color="#E5E5E5"> which is ki debug trap or fall</font>

914
00:38:11,890 --> 00:38:17,499
and then that's entered with the<font color="#E5E5E5"> kernel</font>

915
00:38:14,079 --> 00:38:18,969
<font color="#CCCCCC">mode</font><font color="#E5E5E5"> CS and with the user mode stack now</font>

916
00:38:17,499 --> 00:38:20,379
we're gonna go<font color="#CCCCCC"> through the demo</font><font color="#E5E5E5"> code</font>

917
00:38:18,969 --> 00:38:22,150
that actually<font color="#E5E5E5"> makes this possible</font><font color="#CCCCCC"> it's</font>

918
00:38:20,380 --> 00:38:23,680
on<font color="#CCCCCC"> git</font><font color="#E5E5E5"> so you should really just check</font>

919
00:38:22,150 --> 00:38:25,479
it out there<font color="#E5E5E5"> there's a lot</font><font color="#CCCCCC"> of stuff here</font>

920
00:38:23,680 --> 00:38:27,189
<font color="#CCCCCC">that happens but a lot of it is just</font>

921
00:38:25,479 --> 00:38:29,558
<font color="#E5E5E5">like boilerplate code that needs to</font>

922
00:38:27,189 --> 00:38:32,019
happen<font color="#CCCCCC"> we need two cpus for this exploit</font>

923
00:38:29,559 --> 00:38:35,259
similar to the<font color="#E5E5E5"> in</font><font color="#CCCCCC"> three variant</font><font color="#E5E5E5"> the most</font>

924
00:38:32,019 --> 00:38:37,988
important thing is we<font color="#E5E5E5"> have to figure out</font>

925
00:38:35,259 --> 00:38:40,509
where certain key locations of the

926
00:38:37,989 --> 00:38:42,519
Windows kernel are in memory<font color="#E5E5E5"> so we need</font>

927
00:38:40,509 --> 00:38:44,229
to override<font color="#E5E5E5"> the</font><font color="#CCCCCC"> driver signing</font>

928
00:38:42,519 --> 00:38:46,689
enforcement check<font color="#E5E5E5"> so we can load</font>

929
00:38:44,229 --> 00:38:49,359
unsigned drivers<font color="#E5E5E5"> and then we also need</font>

930
00:38:46,689 --> 00:38:52,808
to steal the system token<font color="#E5E5E5"> so that we</font>

931
00:38:49,359 --> 00:38:56,619
have admin privileges<font color="#E5E5E5"> from a trusted</font>

932
00:38:52,809 --> 00:38:58,269
application<font color="#E5E5E5"> so what we do to do that</font>

933
00:38:56,619 --> 00:39:00,189
<font color="#E5E5E5">achieve that functionalities we just</font>

934
00:38:58,269 --> 00:39:01,868
load symbols using<font color="#E5E5E5"> the Microsoft symbol</font>

935
00:39:00,189 --> 00:39:03,729
server so Microsoft has<font color="#CCCCCC"> a</font><font color="#E5E5E5"> public website</font>

936
00:39:01,869 --> 00:39:06,880
where you can just hit up and contact

937
00:39:03,729 --> 00:39:09,009
<font color="#E5E5E5">and get symbols for your particular</font>

938
00:39:06,880 --> 00:39:10,599
kernel version that you're<font color="#E5E5E5"> running on so</font>

939
00:39:09,009 --> 00:39:13,179
as long as<font color="#E5E5E5"> that box that we're trying to</font>

940
00:39:10,599 --> 00:39:14,349
exploit has<font color="#CCCCCC"> Internet</font><font color="#E5E5E5"> activity we can</font>

941
00:39:13,179 --> 00:39:15,759
just download symbols that<font color="#E5E5E5"> are</font>

942
00:39:14,349 --> 00:39:18,819
appropriate for<font color="#E5E5E5"> your kernel version</font>

943
00:39:15,759 --> 00:39:21,150
touch these undocumented<font color="#E5E5E5"> structures</font>

944
00:39:18,819 --> 00:39:23,769
things that may change per patch and

945
00:39:21,150 --> 00:39:27,029
reliably exploit<font color="#E5E5E5"> all the</font><font color="#CCCCCC"> different</font>

946
00:39:23,769 --> 00:39:30,160
kernel<font color="#E5E5E5"> versions that you</font><font color="#CCCCCC"> know exist</font>

947
00:39:27,029 --> 00:39:32,880
<font color="#CCCCCC">furthermore there is a</font><font color="#E5E5E5"> little bit of rap</font>

948
00:39:30,160 --> 00:39:35,678
gadgetry<font color="#E5E5E5"> that has to</font><font color="#CCCCCC"> happen because</font>

949
00:39:32,880 --> 00:39:37,329
<font color="#E5E5E5">nowadays there's a lot of security</font>

950
00:39:35,679 --> 00:39:39,039
mitigations especially in Windows 10

951
00:39:37,329 --> 00:39:40,839
that<font color="#E5E5E5"> prevent you from executing user</font>

952
00:39:39,039 --> 00:39:43,539
<font color="#E5E5E5">mode code with kernel mode privileges</font>

953
00:39:40,839 --> 00:39:45,640
<font color="#CCCCCC">that's done</font><font color="#E5E5E5"> through supervisor mode</font>

954
00:39:43,539 --> 00:39:49,029
<font color="#E5E5E5">execution prevention that's inside of</font>

955
00:39:45,640 --> 00:39:50,890
<font color="#CCCCCC">cr4 and we actually have to disable snap</font>

956
00:39:49,029 --> 00:39:53,259
and we do that by<font color="#CCCCCC"> using these rap</font>

957
00:39:50,890 --> 00:39:55,209
gadgets<font color="#CCCCCC"> that allow us to execute</font><font color="#E5E5E5"> in the</font>

958
00:39:53,259 --> 00:39:57,999
context<font color="#E5E5E5"> of the kernel disable snap and</font>

959
00:39:55,209 --> 00:39:59,198
then we<font color="#E5E5E5"> jump to our user mode code to</font>

960
00:39:57,999 --> 00:40:01,598
<font color="#E5E5E5">make</font><font color="#CCCCCC"> it easy because</font><font color="#E5E5E5"> we don't want to</font>

961
00:39:59,199 --> 00:40:03,060
stay<font color="#E5E5E5"> in this</font><font color="#CCCCCC"> return oriented programming</font>

962
00:40:01,599 --> 00:40:05,580
world forever

963
00:40:03,060 --> 00:40:08,460
<font color="#CCCCCC">furthermore</font><font color="#E5E5E5"> again we</font><font color="#CCCCCC"> get all these</font>

964
00:40:05,580 --> 00:40:10,319
offsets through those symbols that<font color="#E5E5E5"> we'll</font>

965
00:40:08,460 --> 00:40:13,440
need and we'll go over<font color="#E5E5E5"> why we need those</font>

966
00:40:10,320 --> 00:40:15,480
later<font color="#CCCCCC"> finally</font><font color="#E5E5E5"> one of the last things</font>

967
00:40:13,440 --> 00:40:17,910
that<font color="#E5E5E5"> we do is we</font><font color="#CCCCCC"> prepare the process it</font>

968
00:40:15,480 --> 00:40:21,240
sounds super<font color="#E5E5E5"> generic but because you're</font>

969
00:40:17,910 --> 00:40:23,129
not<font color="#CCCCCC"> running</font><font color="#E5E5E5"> as an admin you have no way</font>

970
00:40:21,240 --> 00:40:25,290
<font color="#CCCCCC">of guaranteeing that windows won't page</font>

971
00:40:23,130 --> 00:40:27,060
out<font color="#E5E5E5"> parts of</font><font color="#CCCCCC"> your process and if it's</font>

972
00:40:25,290 --> 00:40:28,740
paging out memory in the side<font color="#CCCCCC"> of</font><font color="#E5E5E5"> your</font>

973
00:40:27,060 --> 00:40:30,840
user mode application that you need for

974
00:40:28,740 --> 00:40:34,140
<font color="#E5E5E5">your exploit to work like screws you</font>

975
00:40:30,840 --> 00:40:36,120
over<font color="#CCCCCC"> so we make strong suggestions to</font>

976
00:40:34,140 --> 00:40:39,150
the memory manager to be like hey try

977
00:40:36,120 --> 00:40:41,850
not to page out this<font color="#E5E5E5"> GS base that we've</font>

978
00:40:39,150 --> 00:40:44,070
allocated<font color="#E5E5E5"> otherwise we'll throw a page</font>

979
00:40:41,850 --> 00:40:47,009
fault and<font color="#E5E5E5"> then the exploit will get</font>

980
00:40:44,070 --> 00:40:48,600
screwed up and then far finally what we

981
00:40:47,010 --> 00:40:51,300
do is we set that<font color="#CCCCCC"> Hardware breakpoint</font>

982
00:40:48,600 --> 00:40:54,390
<font color="#E5E5E5">prime it on that location that</font><font color="#CCCCCC"> move SS</font>

983
00:40:51,300 --> 00:40:57,090
will read from we execute our ASM

984
00:40:54,390 --> 00:40:59,910
function which will prepare<font color="#E5E5E5"> the CPU and</font>

985
00:40:57,090 --> 00:41:01,890
then start the<font color="#E5E5E5"> core of the exploit again</font>

986
00:40:59,910 --> 00:41:04,589
this is<font color="#CCCCCC"> gonna be more</font><font color="#E5E5E5"> or less step</font>

987
00:41:01,890 --> 00:41:09,089
through in the next<font color="#E5E5E5"> slide so</font><font color="#CCCCCC"> we won't go</font>

988
00:41:04,590 --> 00:41:11,820
too much<font color="#E5E5E5"> into details here CPU</font><font color="#CCCCCC"> 1 then we</font>

989
00:41:09,090 --> 00:41:15,180
need<font color="#CCCCCC"> 2 CPU CPU 0 execute</font><font color="#E5E5E5"> the exploit CPU</font>

990
00:41:11,820 --> 00:41:18,240
one constantly probes stack memory<font color="#CCCCCC"> that</font>

991
00:41:15,180 --> 00:41:20,879
CPU<font color="#E5E5E5"> 0 is executing under and the goal is</font>

992
00:41:18,240 --> 00:41:24,000
<font color="#CCCCCC">to override</font><font color="#E5E5E5"> a return address that CPU</font><font color="#CCCCCC"> 0</font>

993
00:41:20,880 --> 00:41:25,530
<font color="#E5E5E5">is going to return from and then we're</font>

994
00:41:24,000 --> 00:41:28,080
gonna go into<font color="#CCCCCC"> our</font><font color="#E5E5E5"> wrap gadgets that we</font>

995
00:41:25,530 --> 00:41:31,250
<font color="#CCCCCC">found earlier</font><font color="#E5E5E5"> which will then disable</font>

996
00:41:28,080 --> 00:41:34,529
snap and jump to<font color="#CCCCCC"> our user mode code</font>

997
00:41:31,250 --> 00:41:36,020
finally this will<font color="#CCCCCC"> also be demonstrated</font>

998
00:41:34,530 --> 00:41:39,660
later<font color="#E5E5E5"> so we'll just go to the video</font>

999
00:41:36,020 --> 00:41:41,790
<font color="#CCCCCC">that's necessary to re-enable</font><font color="#E5E5E5"> snap and</font>

1000
00:41:39,660 --> 00:41:43,950
then restore<font color="#CCCCCC"> the kernel back so in our</font>

1001
00:41:41,790 --> 00:41:47,220
VM<font color="#E5E5E5"> we have this little batch file all it</font>

1002
00:41:43,950 --> 00:41:49,200
does is<font color="#E5E5E5"> it loads a driver</font><font color="#CCCCCC"> and then</font>

1003
00:41:47,220 --> 00:41:51,149
starts it using the service manager<font color="#CCCCCC"> very</font>

1004
00:41:49,200 --> 00:41:54,330
simple we try to run this batch file

1005
00:41:51,150 --> 00:41:56,040
from an admin<font color="#E5E5E5"> command prompt</font><font color="#CCCCCC"> but we can</font>

1006
00:41:54,330 --> 00:41:57,660
see<font color="#E5E5E5"> that's clearly not signed with a</font>

1007
00:41:56,040 --> 00:41:59,610
valid digital certificate there's a

1008
00:41:57,660 --> 00:42:01,560
little<font color="#E5E5E5"> error and the machine isn't</font>

1009
00:41:59,610 --> 00:42:03,090
booted in test signing<font color="#E5E5E5"> mode so it won't</font>

1010
00:42:01,560 --> 00:42:05,520
accept this so if we run<font color="#E5E5E5"> this in an</font>

1011
00:42:03,090 --> 00:42:06,780
admin<font color="#E5E5E5"> power shell it said it says</font>

1012
00:42:05,520 --> 00:42:09,420
<font color="#CCCCCC">Windows cannot verify the digital</font>

1013
00:42:06,780 --> 00:42:11,520
signature for<font color="#E5E5E5"> this file</font><font color="#CCCCCC"> it's not valid</font>

1014
00:42:09,420 --> 00:42:13,260
<font color="#CCCCCC">it's not a</font><font color="#E5E5E5"> valid digital signature now</font>

1015
00:42:11,520 --> 00:42:14,820
if we try<font color="#E5E5E5"> to run this from a power shell</font>

1016
00:42:13,260 --> 00:42:16,230
that doesn't have<font color="#CCCCCC"> a admin</font><font color="#E5E5E5"> access you</font>

1017
00:42:14,820 --> 00:42:16,680
don't<font color="#E5E5E5"> even get to the driver signing</font>

1018
00:42:16,230 --> 00:42:18,569
<font color="#E5E5E5">check</font>

1019
00:42:16,680 --> 00:42:20,578
<font color="#E5E5E5">it just as access is</font><font color="#CCCCCC"> denied you don't</font>

1020
00:42:18,569 --> 00:42:22,020
have privileges to even get that far<font color="#CCCCCC"> so</font>

1021
00:42:20,579 --> 00:42:24,720
what we do is we run the exploit first

1022
00:42:22,020 --> 00:42:27,509
and then we install<font color="#CCCCCC"> the driver and that</font>

1023
00:42:24,720 --> 00:42:29,700
should give us everything<font color="#CCCCCC"> so to get to</font>

1024
00:42:27,510 --> 00:42:32,460
<font color="#E5E5E5">how a lot of this works we're gonna</font>

1025
00:42:29,700 --> 00:42:34,348
<font color="#E5E5E5">break in</font><font color="#CCCCCC"> again</font><font color="#E5E5E5"> using that gdb stop that</font>

1026
00:42:32,460 --> 00:42:36,869
<font color="#CCCCCC">VMware provides that</font><font color="#E5E5E5"> we can debug the</font>

1027
00:42:34,349 --> 00:42:38,990
hypervisor<font color="#CCCCCC"> we break in in a spin lock</font>

1028
00:42:36,869 --> 00:42:41,790
similar to the<font color="#CCCCCC"> denial-of-service</font>

1029
00:42:38,990 --> 00:42:43,919
<font color="#CCCCCC">proof-of-concept I'm gonna load symbols</font>

1030
00:42:41,790 --> 00:42:46,670
for my exploit<font color="#E5E5E5"> just so that it's easier</font>

1031
00:42:43,920 --> 00:42:49,130
to read what's going<font color="#CCCCCC"> on on the</font><font color="#E5E5E5"> screen</font>

1032
00:42:46,670 --> 00:42:52,109
shouldn't<font color="#CCCCCC"> take too long</font>

1033
00:42:49,130 --> 00:42:53,520
<font color="#E5E5E5">and then we</font><font color="#CCCCCC"> specify that address the</font>

1034
00:42:52,109 --> 00:42:55,558
base<font color="#E5E5E5"> address of where it's loaded into</font>

1035
00:42:53,520 --> 00:42:58,740
memory<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> gonna knock out this jump</font>

1036
00:42:55,559 --> 00:43:06,059
<font color="#E5E5E5">like we did for</font><font color="#CCCCCC"> the previous example so</font>

1037
00:42:58,740 --> 00:43:08,790
<font color="#E5E5E5">we</font><font color="#CCCCCC"> can progress</font><font color="#E5E5E5"> all right so now we set</font>

1038
00:43:06,059 --> 00:43:10,589
the<font color="#E5E5E5"> GS base to whatever we want in this</font>

1039
00:43:08,790 --> 00:43:11,490
case<font color="#CCCCCC"> this is our GS base that's under</font>

1040
00:43:10,589 --> 00:43:14,520
<font color="#CCCCCC">our</font><font color="#E5E5E5"> control</font>

1041
00:43:11,490 --> 00:43:17,308
we run move SS and then we enter using

1042
00:43:14,520 --> 00:43:18,720
<font color="#CCCCCC">sis call so what should</font><font color="#E5E5E5"> happen is we</font>

1043
00:43:17,309 --> 00:43:21,089
should go to the system<font color="#CCCCCC"> call</font><font color="#E5E5E5"> handler but</font>

1044
00:43:18,720 --> 00:43:22,859
because<font color="#CCCCCC"> of CAD</font><font color="#E5E5E5"> debug trap or faults</font>

1045
00:43:21,089 --> 00:43:25,730
behavior we get thrown into the<font color="#CCCCCC"> Antwone</font>

1046
00:43:22,859 --> 00:43:27,720
handler<font color="#E5E5E5"> because</font><font color="#CCCCCC"> of the move SS behavior</font>

1047
00:43:25,730 --> 00:43:31,309
and you can see that we're coming<font color="#E5E5E5"> from</font>

1048
00:43:27,720 --> 00:43:34,109
<font color="#E5E5E5">ki system call 64 and this means that</font>

1049
00:43:31,309 --> 00:43:35,549
<font color="#CCCCCC">now</font><font color="#E5E5E5"> we're assuming</font><font color="#CCCCCC"> that we're</font><font color="#E5E5E5"> coming</font>

1050
00:43:34,109 --> 00:43:37,319
<font color="#E5E5E5">from kernel mode so when we access this</font>

1051
00:43:35,549 --> 00:43:38,910
memory<font color="#E5E5E5"> this GS memory that we're</font>

1052
00:43:37,319 --> 00:43:40,558
touching<font color="#E5E5E5"> all over the kernel it has to</font>

1053
00:43:38,910 --> 00:43:42,750
be valid and that's part of what our

1054
00:43:40,559 --> 00:43:45,270
exploit does our code exploit has to set

1055
00:43:42,750 --> 00:43:46,410
up this GS memory to be valid and all of

1056
00:43:45,270 --> 00:43:48,509
this is<font color="#CCCCCC"> under our control everything</font>

1057
00:43:46,410 --> 00:43:51,558
<font color="#E5E5E5">that touches GS is directly under our</font>

1058
00:43:48,510 --> 00:43:56,549
control<font color="#E5E5E5"> eventually we get to the</font>

1059
00:43:51,559 --> 00:43:58,559
dispatching<font color="#E5E5E5"> of the exception and then we</font>

1060
00:43:56,549 --> 00:44:00,390
choose a return address<font color="#CCCCCC"> on the stack to</font>

1061
00:43:58,559 --> 00:44:02,700
override<font color="#E5E5E5"> and we chose an arbitrary</font>

1062
00:44:00,390 --> 00:44:05,220
function<font color="#E5E5E5"> later on during exception</font>

1063
00:44:02,700 --> 00:44:07,259
handling<font color="#E5E5E5"> that CPU</font><font color="#CCCCCC"> one will override</font><font color="#E5E5E5"> in</font>

1064
00:44:05,220 --> 00:44:09,808
this case the function<font color="#CCCCCC"> that we chose is</font>

1065
00:44:07,260 --> 00:44:11,339
ke<font color="#E5E5E5"> context from K frames you can see at</font>

1066
00:44:09,809 --> 00:44:13,349
the<font color="#CCCCCC"> bottom of the stack we've actually</font>

1067
00:44:11,339 --> 00:44:15,390
overwritten the return address to go to

1068
00:44:13,349 --> 00:44:17,460
our<font color="#CCCCCC"> wrap gadget that</font><font color="#E5E5E5"> we found now you</font>

1069
00:44:15,390 --> 00:44:20,040
can see on CPU<font color="#CCCCCC"> one which I just swapped</font>

1070
00:44:17,460 --> 00:44:22,410
<font color="#E5E5E5">to you can see that stack pointer points</font>

1071
00:44:20,040 --> 00:44:24,660
to<font color="#E5E5E5"> that memory</font><font color="#CCCCCC"> that we just over on CPU</font>

1072
00:44:22,410 --> 00:44:26,549
<font color="#CCCCCC">zero so if we go</font><font color="#E5E5E5"> to the CPU</font><font color="#CCCCCC"> zero you can</font>

1073
00:44:24,660 --> 00:44:28,230
<font color="#E5E5E5">see that's the same address and you can</font>

1074
00:44:26,549 --> 00:44:29,230
validate<font color="#CCCCCC"> that by looking at the</font><font color="#E5E5E5"> slides</font>

1075
00:44:28,230 --> 00:44:31,330
later<font color="#E5E5E5"> and the vid</font>

1076
00:44:29,230 --> 00:44:32,740
later<font color="#E5E5E5"> finally this</font><font color="#CCCCCC"> functions</font><font color="#E5E5E5"> pretty big</font>

1077
00:44:31,330 --> 00:44:34,779
and<font color="#E5E5E5"> that's why we chose to</font><font color="#CCCCCC"> overwrite</font>

1078
00:44:32,740 --> 00:44:37,029
<font color="#E5E5E5">return its return address because it's</font>

1079
00:44:34,780 --> 00:44:38,859
long and<font color="#E5E5E5"> that's the goal like hopefully</font>

1080
00:44:37,030 --> 00:44:41,470
<font color="#E5E5E5">it takes a while to execute so that we</font>

1081
00:44:38,859 --> 00:44:44,680
are able<font color="#CCCCCC"> to override it on CPU</font><font color="#E5E5E5"> one lots</font>

1082
00:44:41,470 --> 00:44:46,629
of<font color="#CCCCCC"> xmm operations</font><font color="#E5E5E5"> eventually we will do</font>

1083
00:44:44,680 --> 00:44:48,910
a return to get out of this function<font color="#E5E5E5"> and</font>

1084
00:44:46,630 --> 00:44:51,850
<font color="#E5E5E5">then we go into our wrap gadget</font><font color="#CCCCCC"> a wrap</font>

1085
00:44:48,910 --> 00:44:54,540
gadget does a big stack change so we do

1086
00:44:51,850 --> 00:45:00,279
that massive<font color="#CCCCCC"> ad RSP</font><font color="#E5E5E5"> so that we don't</font>

1087
00:44:54,540 --> 00:45:01,840
<font color="#E5E5E5">have bad memory to work with we load</font><font color="#CCCCCC"> cr4</font>

1088
00:45:00,280 --> 00:45:03,760
with the value<font color="#E5E5E5"> that we choose the</font>

1089
00:45:01,840 --> 00:45:07,030
<font color="#E5E5E5">disable supervisor mode execution</font>

1090
00:45:03,760 --> 00:45:10,090
prevention<font color="#E5E5E5"> and then we return out and</font>

1091
00:45:07,030 --> 00:45:14,950
finally<font color="#CCCCCC"> we're executing our payload so</font>

1092
00:45:10,090 --> 00:45:17,170
in user mode<font color="#CCCCCC"> as CPL zero we</font><font color="#E5E5E5"> are setting</font>

1093
00:45:14,950 --> 00:45:19,509
up a way<font color="#E5E5E5"> to come</font><font color="#CCCCCC"> back and</font><font color="#E5E5E5"> recover the</font>

1094
00:45:17,170 --> 00:45:21,940
operating system<font color="#E5E5E5"> we steal the system</font>

1095
00:45:19,510 --> 00:45:24,340
token from<font color="#E5E5E5"> the system</font><font color="#CCCCCC"> process so that we</font>

1096
00:45:21,940 --> 00:45:26,230
have admin rights<font color="#E5E5E5"> to load the driver we</font>

1097
00:45:24,340 --> 00:45:29,230
<font color="#CCCCCC">disable driver signing enforcement to</font>

1098
00:45:26,230 --> 00:45:31,420
get past that second barrier finally we

1099
00:45:29,230 --> 00:45:34,030
set up the<font color="#CCCCCC"> IRET stack so we</font><font color="#E5E5E5"> can return</font>

1100
00:45:31,420 --> 00:45:38,140
<font color="#CCCCCC">back to our</font><font color="#E5E5E5"> user mode code we re-enable</font>

1101
00:45:34,030 --> 00:45:40,080
snap and we're in user<font color="#E5E5E5"> mode we're back</font>

1102
00:45:38,140 --> 00:45:42,580
in<font color="#E5E5E5"> our program we're gonna hit</font><font color="#CCCCCC"> play and</font>

1103
00:45:40,080 --> 00:45:45,910
we're executing<font color="#E5E5E5"> under empty</font><font color="#CCCCCC"> authority</font>

1104
00:45:42,580 --> 00:45:49,270
<font color="#E5E5E5">system and now we'll run the driver and</font>

1105
00:45:45,910 --> 00:45:51,660
we actually<font color="#E5E5E5"> loaded there's no error</font>

1106
00:45:49,270 --> 00:45:56,880
message<font color="#E5E5E5"> anymore</font><font color="#CCCCCC"> we have ring</font><font color="#E5E5E5"> zero</font>

1107
00:45:51,660 --> 00:45:56,879
<font color="#E5E5E5">privileges and the Machine is pop</font>

1108
00:45:57,980 --> 00:46:04,859
<font color="#E5E5E5">cool so</font><font color="#CCCCCC"> too</font><font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> have a lot of time</font>

1109
00:46:02,580 --> 00:46:07,500
left<font color="#E5E5E5"> so I'll go over this really quickly</font>

1110
00:46:04,859 --> 00:46:10,560
a lot<font color="#CCCCCC"> of this was patched in May</font><font color="#E5E5E5"> that</font>

1111
00:46:07,500 --> 00:46:13,770
Microsoft Research did a<font color="#CCCCCC"> nsrc</font><font color="#E5E5E5"> the really</font>

1112
00:46:10,560 --> 00:46:16,080
good<font color="#CCCCCC"> inter company as well as like</font>

1113
00:46:13,770 --> 00:46:17,550
reaching<font color="#E5E5E5"> out to other OS vendors that</font>

1114
00:46:16,080 --> 00:46:19,410
were impacted by<font color="#E5E5E5"> this so shout</font><font color="#CCCCCC"> out to</font>

1115
00:46:17,550 --> 00:46:21,180
them<font color="#E5E5E5"> to helping coordinate</font><font color="#CCCCCC"> a lot of</font>

1116
00:46:19,410 --> 00:46:23,279
these fixes they<font color="#E5E5E5"> fix a lot of</font><font color="#CCCCCC"> these</font>

1117
00:46:21,180 --> 00:46:25,140
<font color="#CCCCCC">problems in May</font><font color="#E5E5E5"> I think most operating</font>

1118
00:46:23,280 --> 00:46:26,609
systems should be patched now<font color="#E5E5E5"> they</font>

1119
00:46:25,140 --> 00:46:28,080
followed the suggestion<font color="#CCCCCC"> that was made in</font>

1120
00:46:26,609 --> 00:46:31,859
our white paper so<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can you</font><font color="#E5E5E5"> know</font>

1121
00:46:28,080 --> 00:46:34,799
check that out the<font color="#E5E5E5"> may s the magic is</font>

1122
00:46:31,859 --> 00:46:37,170
that<font color="#E5E5E5"> ki debug trap our fault now we'll</font>

1123
00:46:34,800 --> 00:46:38,760
use<font color="#E5E5E5"> a known good stack regardless of how</font>

1124
00:46:37,170 --> 00:46:40,619
you enter it even if you enter it<font color="#E5E5E5"> from</font>

1125
00:46:38,760 --> 00:46:42,599
<font color="#CCCCCC">kernel</font><font color="#E5E5E5"> mode it will use a known good</font>

1126
00:46:40,619 --> 00:46:44,460
stack<font color="#E5E5E5"> just like the double fault handler</font>

1127
00:46:42,599 --> 00:46:45,210
that<font color="#CCCCCC"> means you can't</font><font color="#E5E5E5"> abuse this call</font>

1128
00:46:44,460 --> 00:46:47,910
<font color="#CCCCCC">anymore</font>

1129
00:46:45,210 --> 00:46:49,710
and<font color="#CCCCCC"> farther</font><font color="#E5E5E5"> more GS GS memory is never</font>

1130
00:46:47,910 --> 00:46:51,359
dereferenced<font color="#E5E5E5"> until you're known to</font><font color="#CCCCCC"> be in</font>

1131
00:46:49,710 --> 00:46:53,160
a good<font color="#E5E5E5"> state and the way you're known</font><font color="#CCCCCC"> to</font>

1132
00:46:51,359 --> 00:46:55,920
be in<font color="#CCCCCC"> the good</font><font color="#E5E5E5"> States by checking ki</font>

1133
00:46:53,160 --> 00:46:57,299
debug traps and<font color="#CCCCCC"> caddy about traps is</font>

1134
00:46:55,920 --> 00:46:59,310
basically an array that<font color="#CCCCCC"> contains</font>

1135
00:46:57,300 --> 00:47:03,300
function pointers that<font color="#CCCCCC"> you could enter</font>

1136
00:46:59,310 --> 00:47:05,099
from user<font color="#E5E5E5"> mode and the goal is if you</font>

1137
00:47:03,300 --> 00:47:06,810
throw an<font color="#E5E5E5"> INT one from any one of these</font>

1138
00:47:05,099 --> 00:47:09,210
<font color="#E5E5E5">you're not allowed to progress and you</font>

1139
00:47:06,810 --> 00:47:11,009
just<font color="#E5E5E5"> I read out so it avoids that</font>

1140
00:47:09,210 --> 00:47:13,040
exploit<font color="#E5E5E5"> now Nick's gonna wrap it up with</font>

1141
00:47:11,010 --> 00:47:15,210
some<font color="#CCCCCC"> shoutouts to some</font><font color="#E5E5E5"> industry folks</font>

1142
00:47:13,040 --> 00:47:17,970
<font color="#E5E5E5">all right so we</font><font color="#CCCCCC"> have a couple</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> shots</font>

1143
00:47:15,210 --> 00:47:19,050
we'd like to give<font color="#E5E5E5"> Alex</font><font color="#CCCCCC"> I and sq</font><font color="#E5E5E5"> I don't</font>

1144
00:47:17,970 --> 00:47:20,700
<font color="#E5E5E5">know if he's out there maybe you are</font>

1145
00:47:19,050 --> 00:47:22,470
maybe<font color="#E5E5E5"> you're not he actually</font><font color="#CCCCCC"> named our</font>

1146
00:47:20,700 --> 00:47:23,848
exploit<font color="#CCCCCC"> why</font><font color="#E5E5E5"> so serious</font>

1147
00:47:22,470 --> 00:47:25,740
I think it's<font color="#E5E5E5"> appropriate</font><font color="#CCCCCC"> I actually</font>

1148
00:47:23,849 --> 00:47:28,260
think it's a<font color="#E5E5E5"> pretty cool name and then a</font>

1149
00:47:25,740 --> 00:47:30,598
<font color="#CCCCCC">jam Baluch he did a weaponizing on the</font>

1150
00:47:28,260 --> 00:47:33,030
invariant it's actually really<font color="#E5E5E5"> cool</font><font color="#CCCCCC"> he</font>

1151
00:47:30,599 --> 00:47:35,160
did it much<font color="#E5E5E5"> faster than I did</font><font color="#CCCCCC"> so you</font>

1152
00:47:33,030 --> 00:47:38,339
actually see the link<font color="#E5E5E5"> here to his blog</font>

1153
00:47:35,160 --> 00:47:39,629
<font color="#E5E5E5">and then to his weaponizing work</font><font color="#CCCCCC"> it's</font>

1154
00:47:38,339 --> 00:47:41,549
<font color="#CCCCCC">definitely some cool there you</font>

1155
00:47:39,630 --> 00:47:43,020
<font color="#E5E5E5">should check that</font><font color="#CCCCCC"> out and</font><font color="#E5E5E5"> then uh so</font>

1156
00:47:41,550 --> 00:47:45,210
what are some<font color="#CCCCCC"> lessons</font><font color="#E5E5E5"> we learned here on</font>

1157
00:47:43,020 --> 00:47:47,670
how<font color="#E5E5E5"> to make how to do bug bounties</font>

1158
00:47:45,210 --> 00:47:50,490
so you have to have<font color="#CCCCCC"> a really</font><font color="#E5E5E5"> cool name</font>

1159
00:47:47,670 --> 00:47:52,440
for<font color="#CCCCCC"> your exploit</font><font color="#E5E5E5"> maybe you want to get</font>

1160
00:47:50,490 --> 00:47:54,240
that off a light goes box for ages 6 to

1161
00:47:52,440 --> 00:47:56,369
12<font color="#E5E5E5"> maybe I don't know how to expect</font>

1162
00:47:54,240 --> 00:47:58,080
<font color="#CCCCCC">their</font><font color="#E5E5E5"> meltdown you you know come up with</font>

1163
00:47:56,369 --> 00:48:00,510
a cool name<font color="#CCCCCC"> and then you might want to</font>

1164
00:47:58,080 --> 00:48:03,060
pay a<font color="#CCCCCC"> graphics designer to come</font><font color="#E5E5E5"> up with</font>

1165
00:48:00,510 --> 00:48:04,680
some type<font color="#E5E5E5"> of some type of graphic for</font>

1166
00:48:03,060 --> 00:48:06,960
vulnerability because apparently that's

1167
00:48:04,680 --> 00:48:08,759
the thing today<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then you also want</font>

1168
00:48:06,960 --> 00:48:10,020
<font color="#E5E5E5">to have</font><font color="#CCCCCC"> a great soundtrack for your</font>

1169
00:48:08,760 --> 00:48:11,970
vulnerability

1170
00:48:10,020 --> 00:48:14,100
all the vulnerabilities<font color="#CCCCCC"> have a great</font>

1171
00:48:11,970 --> 00:48:15,870
<font color="#E5E5E5">soundtracks these days definitely want</font>

1172
00:48:14,100 --> 00:48:17,819
to<font color="#E5E5E5"> come up with some some good music</font><font color="#CCCCCC"> -</font>

1173
00:48:15,870 --> 00:48:19,560
hi Pierre<font color="#E5E5E5"> your vulnerability and then</font>

1174
00:48:17,820 --> 00:48:22,020
last but<font color="#CCCCCC"> not</font><font color="#E5E5E5"> least world star exclusive</font>

1175
00:48:19,560 --> 00:48:23,970
<font color="#E5E5E5">if you're not world star exclusive you</font>

1176
00:48:22,020 --> 00:48:26,759
just it's not a good vulnerability at

1177
00:48:23,970 --> 00:48:30,689
the end of the day thank<font color="#E5E5E5"> you that's our</font>

1178
00:48:26,760 --> 00:48:33,290
logo<font color="#E5E5E5"> that's the white paper like retweet</font>

1179
00:48:30,690 --> 00:48:33,290
<font color="#E5E5E5">and subscribe</font>

