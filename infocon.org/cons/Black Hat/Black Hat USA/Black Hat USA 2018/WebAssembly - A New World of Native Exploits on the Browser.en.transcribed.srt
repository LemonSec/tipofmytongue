1
00:00:00,210 --> 00:00:04,110
before we get<font color="#E5E5E5"> started if everybody could</font>

2
00:00:01,800 --> 00:00:07,700
<font color="#CCCCCC">please raise your</font><font color="#E5E5E5"> hand</font><font color="#CCCCCC"> either</font><font color="#E5E5E5"> hand works</font>

3
00:00:04,110 --> 00:00:10,050
<font color="#E5E5E5">all right come on let's</font><font color="#CCCCCC"> go all</font><font color="#E5E5E5"> right so</font>

4
00:00:07,700 --> 00:00:12,900
<font color="#E5E5E5">anyone who didn't follow the</font><font color="#CCCCCC"> seeding</font>

5
00:00:10,050 --> 00:00:15,299
instructions please<font color="#E5E5E5"> lower</font><font color="#CCCCCC"> your hand</font><font color="#E5E5E5"> all</font>

6
00:00:12,900 --> 00:00:18,090
right<font color="#E5E5E5"> all right</font><font color="#CCCCCC"> still looking pretty</font>

7
00:00:15,299 --> 00:00:20,160
even I would<font color="#CCCCCC"> say between people who know</font>

8
00:00:18,090 --> 00:00:21,660
<font color="#E5E5E5">web and people</font><font color="#CCCCCC"> who know native</font><font color="#E5E5E5"> so that</font>

9
00:00:20,160 --> 00:00:23,000
means as<font color="#E5E5E5"> we go through this</font><font color="#CCCCCC"> yeah put</font>

10
00:00:21,660 --> 00:00:25,260
your<font color="#E5E5E5"> hands down please</font>

11
00:00:23,000 --> 00:00:26,970
we'll probably give a little<font color="#E5E5E5"> bit of</font>

12
00:00:25,260 --> 00:00:28,470
remedial education on both sides of the

13
00:00:26,970 --> 00:00:30,299
house just<font color="#E5E5E5"> so people</font><font color="#CCCCCC"> who only know web</font>

14
00:00:28,470 --> 00:00:31,679
aren't<font color="#E5E5E5"> lost when we're talking about</font><font color="#CCCCCC"> see</font>

15
00:00:30,300 --> 00:00:32,579
<font color="#E5E5E5">stuff people will only know see aren't</font>

16
00:00:31,679 --> 00:00:34,769
<font color="#E5E5E5">lost when they're talking about web</font>

17
00:00:32,579 --> 00:00:38,129
stuff<font color="#E5E5E5"> so I apologize if any of this is</font>

18
00:00:34,770 --> 00:00:39,510
<font color="#E5E5E5">review for you</font><font color="#CCCCCC"> all right so I'm Justin</font>

19
00:00:38,129 --> 00:00:49,468
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is Tyler</font><font color="#E5E5E5"> we're here to talk</font><font color="#CCCCCC"> about</font>

20
00:00:39,510 --> 00:00:52,410
<font color="#E5E5E5">web assembly so our talk today is not</font>

21
00:00:49,469 --> 00:00:54,600
<font color="#CCCCCC">about how to</font><font color="#E5E5E5"> like break out of the</font>

22
00:00:52,410 --> 00:00:56,730
browser<font color="#E5E5E5"> and web assembly or use web</font>

23
00:00:54,600 --> 00:00:58,350
assembly type bugs to end up exploiting

24
00:00:56,730 --> 00:00:59,760
things in the browser<font color="#CCCCCC"> that talk was</font>

25
00:00:58,350 --> 00:01:01,199
Natalie's talk and if you're<font color="#E5E5E5"> interested</font>

26
00:00:59,760 --> 00:01:05,009
<font color="#CCCCCC">in that you should go see</font><font color="#E5E5E5"> it three hours</font>

27
00:01:01,199 --> 00:01:06,030
ago<font color="#CCCCCC"> it was a</font><font color="#E5E5E5"> really great talk and maybe</font>

28
00:01:05,010 --> 00:01:07,680
you can<font color="#E5E5E5"> catch the recording of it later</font>

29
00:01:06,030 --> 00:01:10,380
<font color="#E5E5E5">but we're only going to talk</font><font color="#CCCCCC"> about the</font>

30
00:01:07,680 --> 00:01:12,540
<font color="#CCCCCC">application security</font><font color="#E5E5E5"> side of that so if</font>

31
00:01:10,380 --> 00:01:16,619
you are<font color="#CCCCCC"> a web developer who is trying</font><font color="#E5E5E5"> to</font>

32
00:01:12,540 --> 00:01:20,100
<font color="#E5E5E5">implement some new web assembly things</font>

33
00:01:16,619 --> 00:01:21,600
into your existing<font color="#CCCCCC"> web site what kinds</font>

34
00:01:20,100 --> 00:01:23,100
of security<font color="#E5E5E5"> problems could you cause and</font>

35
00:01:21,600 --> 00:01:25,740
<font color="#E5E5E5">you need to worry about as an attacker</font>

36
00:01:23,100 --> 00:01:27,419
when you're looking at a web page<font color="#CCCCCC"> that</font>

37
00:01:25,740 --> 00:01:29,699
includes web assembly what can we<font color="#CCCCCC"> use</font>

38
00:01:27,420 --> 00:01:30,600
that<font color="#E5E5E5"> for from an attack perspective so</font>

39
00:01:29,700 --> 00:01:33,600
that's what we're looking<font color="#CCCCCC"> at in this</font>

40
00:01:30,600 --> 00:01:35,460
talk<font color="#CCCCCC"> so in order</font><font color="#E5E5E5"> to do that we have to</font>

41
00:01:33,600 --> 00:01:37,530
talk<font color="#CCCCCC"> about how web assembly works and</font>

42
00:01:35,460 --> 00:01:39,479
some other kind<font color="#CCCCCC"> of introductory tooling</font>

43
00:01:37,530 --> 00:01:40,920
stuff so you can<font color="#E5E5E5"> understand later on</font>

44
00:01:39,479 --> 00:01:42,750
when<font color="#CCCCCC"> we go into the different exploits</font>

45
00:01:40,920 --> 00:01:44,220
<font color="#E5E5E5">what's actually happening under the hood</font>

46
00:01:42,750 --> 00:01:46,229
<font color="#CCCCCC">so if you saw a Natalie's talk this</font>

47
00:01:44,220 --> 00:01:47,610
<font color="#E5E5E5">morning</font><font color="#CCCCCC"> that part will be review but</font>

48
00:01:46,229 --> 00:01:56,490
then the other<font color="#E5E5E5"> stuff should</font><font color="#CCCCCC"> be pretty</font>

49
00:01:47,610 --> 00:01:59,430
fresh<font color="#CCCCCC"> at the same time</font><font color="#E5E5E5"> so in short what</font>

50
00:01:56,490 --> 00:02:00,780
<font color="#CCCCCC">wasum does is it allows</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> take code</font>

51
00:01:59,430 --> 00:02:02,460
written<font color="#CCCCCC"> something else we're gonna</font><font color="#E5E5E5"> only</font>

52
00:02:00,780 --> 00:02:05,579
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> about C code here but you could do</font>

53
00:02:02,460 --> 00:02:08,190
anything<font color="#E5E5E5"> compile</font><font color="#CCCCCC"> it and then take</font><font color="#E5E5E5"> that</font>

54
00:02:05,579 --> 00:02:09,449
binary<font color="#E5E5E5"> and run it in your browser what</font>

55
00:02:08,190 --> 00:02:11,520
that gives you for one you didn't have

56
00:02:09,449 --> 00:02:13,760
to rewrite<font color="#CCCCCC"> that code</font><font color="#E5E5E5"> in JavaScript and</font>

57
00:02:11,520 --> 00:02:15,019
<font color="#E5E5E5">two it's much faster</font><font color="#CCCCCC"> than new</font>

58
00:02:13,760 --> 00:02:16,700
the same thing in JavaScript<font color="#CCCCCC"> so you</font><font color="#E5E5E5"> can</font>

59
00:02:15,019 --> 00:02:18,439
see here<font color="#CCCCCC"> web</font><font color="#E5E5E5"> assembly on the</font><font color="#CCCCCC"> Left</font>

60
00:02:16,700 --> 00:02:20,810
<font color="#E5E5E5">getting 30 frames per second at face</font>

61
00:02:18,439 --> 00:02:22,700
recognition<font color="#CCCCCC"> JavaScript on</font><font color="#E5E5E5"> the right</font>

62
00:02:20,810 --> 00:02:26,299
getting<font color="#CCCCCC"> 2 frames per second</font><font color="#E5E5E5"> so much</font>

63
00:02:22,700 --> 00:02:29,030
<font color="#E5E5E5">faster there's a lot of different things</font>

64
00:02:26,299 --> 00:02:31,040
<font color="#CCCCCC">that it's being used</font><font color="#E5E5E5"> for right</font><font color="#CCCCCC"> now I'm</font>

65
00:02:29,030 --> 00:02:33,890
only<font color="#E5E5E5"> going to highlight a couple of</font>

66
00:02:31,040 --> 00:02:35,450
<font color="#E5E5E5">these right now</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> archive.org has this</font>

67
00:02:33,890 --> 00:02:38,208
<font color="#E5E5E5">really cool thing where</font><font color="#CCCCCC"> you can go</font><font color="#E5E5E5"> play</font>

68
00:02:35,450 --> 00:02:41,209
old console games and old arcade games

69
00:02:38,209 --> 00:02:42,859
on their<font color="#CCCCCC"> web page</font><font color="#E5E5E5"> they do this by they</font>

70
00:02:41,209 --> 00:02:44,870
didn't like a rewrite and assembler or

71
00:02:42,859 --> 00:02:48,170
re-implement the games in JavaScript

72
00:02:44,870 --> 00:02:49,940
<font color="#CCCCCC">instead</font><font color="#E5E5E5"> they used web assembly to</font>

73
00:02:48,170 --> 00:02:51,589
compile an existing emulator<font color="#E5E5E5"> that</font>

74
00:02:49,940 --> 00:02:52,760
<font color="#CCCCCC">already knew how to</font><font color="#E5E5E5"> emulate those games</font>

75
00:02:51,590 --> 00:02:54,440
<font color="#E5E5E5">throw a little bit of wrapper code</font>

76
00:02:52,760 --> 00:02:57,108
<font color="#E5E5E5">around it probably more than a little</font>

77
00:02:54,440 --> 00:02:58,909
<font color="#E5E5E5">bit to handle the display and control</font>

78
00:02:57,109 --> 00:03:00,409
<font color="#E5E5E5">some such and then they can run all</font>

79
00:02:58,909 --> 00:03:02,480
these<font color="#E5E5E5"> games that already had previous</font>

80
00:03:00,409 --> 00:03:04,548
emulators other thing here<font color="#E5E5E5"> that's going</font>

81
00:03:02,480 --> 00:03:07,069
to<font color="#E5E5E5"> be interesting</font><font color="#CCCCCC"> to this audience is</font>

82
00:03:04,549 --> 00:03:08,030
<font color="#CCCCCC">there already been scene crypto miners</font>

83
00:03:07,069 --> 00:03:10,010
in the<font color="#E5E5E5"> wild</font><font color="#CCCCCC"> that have been using</font>

84
00:03:08,030 --> 00:03:15,379
<font color="#E5E5E5">webassembly because it's much faster so</font>

85
00:03:10,010 --> 00:03:16,940
you can<font color="#E5E5E5"> mine more coins webassembly</font>

86
00:03:15,379 --> 00:03:18,530
isn't just about the web though there's

87
00:03:16,940 --> 00:03:20,419
<font color="#CCCCCC">lots of really crazy things</font><font color="#E5E5E5"> that are</font>

88
00:03:18,530 --> 00:03:22,280
kind of up<font color="#E5E5E5"> and coming everything on this</font>

89
00:03:20,419 --> 00:03:25,430
<font color="#E5E5E5">is kind of very</font><font color="#CCCCCC"> early stages or</font>

90
00:03:22,280 --> 00:03:26,959
experimental<font color="#CCCCCC"> but</font><font color="#E5E5E5"> it's important that you</font>

91
00:03:25,430 --> 00:03:31,180
<font color="#E5E5E5">know that there's a lot</font><font color="#CCCCCC"> more that's</font>

92
00:03:26,959 --> 00:03:33,859
going<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> happening soon so</font><font color="#CCCCCC"> brow 6</font><font color="#E5E5E5"> is</font>

93
00:03:31,180 --> 00:03:38,389
essentially implementing<font color="#E5E5E5"> all of classics</font>

94
00:03:33,859 --> 00:03:40,220
in web assembly so if you had a Linux

95
00:03:38,389 --> 00:03:41,480
program you would be able<font color="#CCCCCC"> to run it in</font>

96
00:03:40,220 --> 00:03:43,449
web assembly and have all the things

97
00:03:41,480 --> 00:03:45,230
<font color="#CCCCCC">like</font><font color="#E5E5E5"> files and stuff</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> in the browser</font>

98
00:03:43,449 --> 00:03:46,940
<font color="#E5E5E5">jeaious</font><font color="#CCCCCC"> Linux takes that one step</font>

99
00:03:45,230 --> 00:03:48,948
<font color="#CCCCCC">further and actually emulates an entire</font>

100
00:03:46,940 --> 00:03:51,349
<font color="#E5E5E5">operating system in the browser so if</font>

101
00:03:48,949 --> 00:03:53,359
you want<font color="#E5E5E5"> to run a copy of a recent</font><font color="#CCCCCC"> Linux</font>

102
00:03:51,349 --> 00:03:55,760
or something like<font color="#E5E5E5"> Windows 2000 you can</font>

103
00:03:53,359 --> 00:03:59,810
<font color="#CCCCCC">run it</font><font color="#E5E5E5"> in your browser</font><font color="#CCCCCC"> and it runs</font><font color="#E5E5E5"> all</font>

104
00:03:55,760 --> 00:04:02,750
with wasm runtime<font color="#CCCCCC"> j/s going in a</font>

105
00:03:59,810 --> 00:04:04,010
different<font color="#CCCCCC"> direction is a microkernel so</font>

106
00:04:02,750 --> 00:04:05,930
the idea is instead<font color="#E5E5E5"> of running</font><font color="#CCCCCC"> a whole</font>

107
00:04:04,010 --> 00:04:08,379
OS somewhere you would just run this

108
00:04:05,930 --> 00:04:11,690
thing<font color="#E5E5E5"> and all it has in it is node and</font>

109
00:04:08,379 --> 00:04:13,159
wasm so then you know you can<font color="#E5E5E5"> drop the</font>

110
00:04:11,690 --> 00:04:14,269
whole<font color="#CCCCCC"> OS and just</font><font color="#E5E5E5"> concentrate on</font><font color="#CCCCCC"> running</font>

111
00:04:13,159 --> 00:04:15,828
stuff but that<font color="#E5E5E5"> also means that it's all</font>

112
00:04:14,269 --> 00:04:19,608
running<font color="#E5E5E5"> and ring zero right</font><font color="#CCCCCC"> because it's</font>

113
00:04:15,829 --> 00:04:21,470
all its own curl<font color="#E5E5E5"> nebula is very similar</font>

114
00:04:19,608 --> 00:04:23,479
<font color="#E5E5E5">except without the node so we're</font><font color="#CCCCCC"> just</font>

115
00:04:21,470 --> 00:04:25,080
going to run<font color="#E5E5E5"> wasm</font><font color="#CCCCCC"> straight-up</font><font color="#E5E5E5"> ring zero</font>

116
00:04:23,479 --> 00:04:28,450
as its own kernel

117
00:04:25,080 --> 00:04:30,550
<font color="#E5E5E5">service is very interesting</font><font color="#CCCCCC"> so instead</font>

118
00:04:28,450 --> 00:04:33,430
<font color="#CCCCCC">of</font><font color="#E5E5E5"> trying to start a</font><font color="#CCCCCC"> new OS they're</font>

119
00:04:30,550 --> 00:04:35,530
going to<font color="#E5E5E5"> allow you to run</font><font color="#CCCCCC"> web assembly</font>

120
00:04:33,430 --> 00:04:37,600
things that hook into<font color="#E5E5E5"> your Linux kernel</font>

121
00:04:35,530 --> 00:04:38,679
so then you can directly<font color="#CCCCCC"> access</font><font color="#E5E5E5"> memory</font>

122
00:04:37,600 --> 00:04:41,380
and<font color="#CCCCCC"> stuff in there that's very fast</font>

123
00:04:38,680 --> 00:04:44,110
<font color="#CCCCCC">sounds</font><font color="#E5E5E5"> like a great idea mmm</font>

124
00:04:41,380 --> 00:04:46,240
crane<font color="#E5E5E5"> lift is actually going in Reverse</font>

125
00:04:44,110 --> 00:04:47,980
so you can take a Wazz<font color="#CCCCCC"> 'im program the</font>

126
00:04:46,240 --> 00:04:49,690
compiled binary and then turn around<font color="#E5E5E5"> and</font>

127
00:04:47,980 --> 00:04:53,170
<font color="#CCCCCC">turn it into a real machine binary</font><font color="#E5E5E5"> that</font>

128
00:04:49,690 --> 00:04:57,460
would run on like x86 or<font color="#CCCCCC"> arm</font><font color="#E5E5E5"> and lastly</font>

129
00:04:53,170 --> 00:05:01,630
<font color="#E5E5E5">in probably</font><font color="#CCCCCC"> the most useful</font><font color="#E5E5E5"> of all of</font>

130
00:04:57,460 --> 00:05:04,060
these is<font color="#CCCCCC"> V wasm so aetherium is a</font>

131
00:05:01,630 --> 00:05:06,190
<font color="#E5E5E5">cryptocurrency</font><font color="#CCCCCC"> that has its own language</font>

132
00:05:04,060 --> 00:05:07,360
<font color="#CCCCCC">and so the idea is that you can</font><font color="#E5E5E5"> compile</font>

133
00:05:06,190 --> 00:05:09,310
things with this<font color="#E5E5E5"> language and then</font><font color="#CCCCCC"> they</font>

134
00:05:07,360 --> 00:05:11,020
run<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the blockchain with all the stuff</font>

135
00:05:09,310 --> 00:05:12,970
<font color="#E5E5E5">it's pretty interesting except that</font>

136
00:05:11,020 --> 00:05:15,820
solidity is terrible<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> EVM is</font>

137
00:05:12,970 --> 00:05:18,280
terrible so they're working<font color="#CCCCCC"> on switching</font>

138
00:05:15,820 --> 00:05:20,290
it to running wasm instead so then you

139
00:05:18,280 --> 00:05:22,179
can write<font color="#CCCCCC"> your</font><font color="#E5E5E5"> your smart contracts in</font>

140
00:05:20,290 --> 00:05:24,910
whatever language<font color="#E5E5E5"> you want and then they</font>

141
00:05:22,180 --> 00:05:30,210
run in wasm on the blockchain<font color="#CCCCCC"> cool</font><font color="#E5E5E5"> stuff</font>

142
00:05:24,910 --> 00:05:33,669
<font color="#CCCCCC">so any of you who have been</font><font color="#E5E5E5"> around</font>

143
00:05:30,210 --> 00:05:37,120
<font color="#E5E5E5">computing since about 2001 or so may</font>

144
00:05:33,669 --> 00:05:38,710
remember that<font color="#E5E5E5"> we used to claim that like</font>

145
00:05:37,120 --> 00:05:40,870
there's these cool things<font color="#CCCCCC"> called Java</font>

146
00:05:38,710 --> 00:05:42,190
applets<font color="#E5E5E5"> and</font><font color="#CCCCCC"> they're sandbox and they run</font>

147
00:05:40,870 --> 00:05:43,690
in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> virtual machine and they run in</font>

148
00:05:42,190 --> 00:05:46,150
your<font color="#E5E5E5"> browser</font><font color="#CCCCCC"> you can write them</font><font color="#E5E5E5"> one so</font>

149
00:05:43,690 --> 00:05:47,200
you<font color="#E5E5E5"> can run them anywhere</font><font color="#CCCCCC"> and you can</font>

150
00:05:46,150 --> 00:05:48,640
put<font color="#E5E5E5"> them in other things besides</font>

151
00:05:47,200 --> 00:05:51,969
<font color="#CCCCCC">browsers like this is all the stuff that</font>

152
00:05:48,640 --> 00:05:54,039
a<font color="#E5E5E5"> Java applet claimed to do 20 years ago</font>

153
00:05:51,970 --> 00:05:56,800
and<font color="#CCCCCC"> now we're doing it</font><font color="#E5E5E5"> again I really</font>

154
00:05:54,040 --> 00:05:58,660
wonder if<font color="#E5E5E5"> there was an folks knew that</font>

155
00:05:56,800 --> 00:06:00,190
they were reimplemented stuff or if they

156
00:05:58,660 --> 00:06:02,200
<font color="#E5E5E5">are surprised that this is actually</font>

157
00:06:00,190 --> 00:06:04,000
<font color="#E5E5E5">happening all right onto what web</font>

158
00:06:02,200 --> 00:06:05,229
assembly actually is it really<font color="#CCCCCC"> probably</font>

159
00:06:04,000 --> 00:06:09,550
should<font color="#CCCCCC"> have been called something</font><font color="#E5E5E5"> else</font>

160
00:06:05,229 --> 00:06:10,900
like web bytecode or something<font color="#CCCCCC"> there's a</font>

161
00:06:09,550 --> 00:06:15,610
virtual<font color="#CCCCCC"> machine so don't</font><font color="#E5E5E5"> think about</font>

162
00:06:10,900 --> 00:06:17,409
<font color="#E5E5E5">like VMware more like a JVM so a special</font>

163
00:06:15,610 --> 00:06:18,760
purpose<font color="#E5E5E5"> machine that doesn't really</font>

164
00:06:17,410 --> 00:06:21,430
exist<font color="#E5E5E5"> but we're gonna emulate that</font>

165
00:06:18,760 --> 00:06:22,870
machine and it has a very specific set

166
00:06:21,430 --> 00:06:25,840
<font color="#CCCCCC">of instructions it's a very small set</font>

167
00:06:22,870 --> 00:06:29,790
and then there's a binary<font color="#E5E5E5"> format that's</font>

168
00:06:25,840 --> 00:06:29,789
the instructions<font color="#E5E5E5"> for this</font><font color="#CCCCCC"> machine are in</font>

169
00:06:29,940 --> 00:06:35,050
and we have compilers<font color="#CCCCCC"> that can compile</font>

170
00:06:32,650 --> 00:06:36,880
<font color="#CCCCCC">it can target</font><font color="#E5E5E5"> that new virtual</font><font color="#CCCCCC"> machine</font>

171
00:06:35,050 --> 00:06:38,440
so then you can<font color="#E5E5E5"> have code</font><font color="#CCCCCC"> that was</font>

172
00:06:36,880 --> 00:06:41,110
<font color="#CCCCCC">written in other things</font>

173
00:06:38,440 --> 00:06:45,820
and compile<font color="#CCCCCC"> it to webassembly</font><font color="#E5E5E5"> where it</font>

174
00:06:41,110 --> 00:06:47,770
will run way faster than<font color="#CCCCCC"> javascript it's</font>

175
00:06:45,820 --> 00:06:50,980
already in pretty<font color="#E5E5E5"> much every browser</font>

176
00:06:47,770 --> 00:06:52,630
<font color="#E5E5E5">that people use on a regular basis</font><font color="#CCCCCC"> but</font>

177
00:06:50,980 --> 00:06:54,430
<font color="#E5E5E5">as we talked</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> earlier there's no</font>

178
00:06:52,630 --> 00:06:57,250
reason we can't take<font color="#E5E5E5"> wisdom and put it</font>

179
00:06:54,430 --> 00:06:58,980
in<font color="#E5E5E5"> other things as well let's talk</font><font color="#CCCCCC"> a</font>

180
00:06:57,250 --> 00:07:02,860
little<font color="#CCCCCC"> bit about the mechanics of wasm</font>

181
00:06:58,980 --> 00:07:05,710
so we have instructions<font color="#CCCCCC"> they live in</font>

182
00:07:02,860 --> 00:07:09,280
their own spot<font color="#CCCCCC"> these</font><font color="#E5E5E5"> are the machine</font>

183
00:07:05,710 --> 00:07:11,169
code essentially<font color="#E5E5E5"> for wasm and the</font>

184
00:07:09,280 --> 00:07:13,359
machine that runs wasm doesn't have any

185
00:07:11,170 --> 00:07:15,460
registers so instead of registers we

186
00:07:13,360 --> 00:07:17,290
have<font color="#E5E5E5"> the stack</font><font color="#CCCCCC"> you don't</font><font color="#E5E5E5"> think of the C</font>

187
00:07:15,460 --> 00:07:19,299
stack that's totally separate<font color="#E5E5E5"> and has to</font>

188
00:07:17,290 --> 00:07:20,890
happen<font color="#E5E5E5"> later</font><font color="#CCCCCC"> this is the stack within</font>

189
00:07:19,300 --> 00:07:24,160
web assembly and it replaces registers

190
00:07:20,890 --> 00:07:28,590
<font color="#E5E5E5">so the idea is that every operation will</font>

191
00:07:24,160 --> 00:07:32,050
push or pop its values<font color="#CCCCCC"> to from the stack</font>

192
00:07:28,590 --> 00:07:35,320
here's a very simple<font color="#CCCCCC"> example so</font><font color="#E5E5E5"> first</font>

193
00:07:32,050 --> 00:07:38,620
line it module means<font color="#E5E5E5"> this is a program</font>

194
00:07:35,320 --> 00:07:41,590
<font color="#E5E5E5">and the next line line</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> we are</font>

195
00:07:38,620 --> 00:07:44,230
<font color="#E5E5E5">declaring a function called add we give</font>

196
00:07:41,590 --> 00:07:46,179
<font color="#E5E5E5">it two parameters</font><font color="#CCCCCC"> x and y and we're</font>

197
00:07:44,230 --> 00:07:50,710
saying it's going<font color="#E5E5E5"> to return a value all</font>

198
00:07:46,180 --> 00:07:52,390
those are 32-bit<font color="#CCCCCC"> in the line three we</font>

199
00:07:50,710 --> 00:07:54,010
say get local<font color="#CCCCCC"> X what that does is take</font>

200
00:07:52,390 --> 00:07:55,599
the value<font color="#CCCCCC"> of</font><font color="#E5E5E5"> X and push it onto the</font>

201
00:07:54,010 --> 00:07:58,659
stack<font color="#CCCCCC"> get local Y push it onto the stack</font>

202
00:07:55,600 --> 00:08:00,550
<font color="#E5E5E5">and then I 32 ad is gonna pop two values</font>

203
00:07:58,660 --> 00:08:03,250
from the stack<font color="#E5E5E5"> because</font><font color="#CCCCCC"> add</font><font color="#E5E5E5"> pop you</font><font color="#CCCCCC"> know</font>

204
00:08:00,550 --> 00:08:05,770
add takes two operands<font color="#E5E5E5"> and then push</font>

205
00:08:03,250 --> 00:08:07,840
back<font color="#E5E5E5"> the</font><font color="#CCCCCC"> the value</font><font color="#E5E5E5"> of that addition onto</font>

206
00:08:05,770 --> 00:08:10,539
<font color="#E5E5E5">the stack and the last line here is</font>

207
00:08:07,840 --> 00:08:12,280
export what that means is that this add

208
00:08:10,540 --> 00:08:13,930
function will now be available<font color="#CCCCCC"> to</font>

209
00:08:12,280 --> 00:08:17,500
whatever<font color="#E5E5E5"> it is that's embedding your</font>

210
00:08:13,930 --> 00:08:28,960
your<font color="#E5E5E5"> wasm system so in most cases your</font>

211
00:08:17,500 --> 00:08:31,090
browser or<font color="#CCCCCC"> JavaScript and</font><font color="#E5E5E5"> web assembly</font>

212
00:08:28,960 --> 00:08:32,620
doesn't have access<font color="#CCCCCC"> to your computer's</font>

213
00:08:31,090 --> 00:08:35,020
memory<font color="#E5E5E5"> it has its own memory that gets</font>

214
00:08:32,620 --> 00:08:37,750
emulated<font color="#E5E5E5"> this is called linear memory</font>

215
00:08:35,020 --> 00:08:39,280
<font color="#CCCCCC">it's just in its it's hosting could</font>

216
00:08:37,750 --> 00:08:41,440
implement this however<font color="#E5E5E5"> it wants but from</font>

217
00:08:39,280 --> 00:08:45,490
web<font color="#E5E5E5"> assemblies point of view it's an</font>

218
00:08:41,440 --> 00:08:47,380
array of<font color="#E5E5E5"> bytes integers whatever you</font>

219
00:08:45,490 --> 00:08:49,570
want and<font color="#E5E5E5"> it</font><font color="#CCCCCC"> can put</font><font color="#E5E5E5"> things in there and</font>

220
00:08:47,380 --> 00:08:52,200
take<font color="#E5E5E5"> them</font><font color="#CCCCCC"> out in random access</font><font color="#E5E5E5"> that's</font>

221
00:08:49,570 --> 00:08:52,200
all<font color="#CCCCCC"> I can do with</font><font color="#E5E5E5"> it</font>

222
00:08:55,030 --> 00:08:59,839
there's no way that you can see the real

223
00:08:57,830 --> 00:09:01,700
<font color="#E5E5E5">address that something's living in from</font>

224
00:08:59,840 --> 00:09:04,970
the<font color="#E5E5E5"> webassembly side you just know</font><font color="#CCCCCC"> about</font>

225
00:09:01,700 --> 00:09:08,570
the<font color="#E5E5E5"> the values that are there</font><font color="#CCCCCC"> in their</font>

226
00:09:04,970 --> 00:09:15,140
indexes in that array everything in

227
00:09:08,570 --> 00:09:18,440
there is untight so the other piece of

228
00:09:15,140 --> 00:09:20,780
the puzzle<font color="#CCCCCC"> here there's a few things</font>

229
00:09:18,440 --> 00:09:23,570
that<font color="#E5E5E5"> maybe will become clear if you're</font>

230
00:09:20,780 --> 00:09:26,720
well into<font color="#E5E5E5"> the sea world for starters</font>

231
00:09:23,570 --> 00:09:31,460
since webassembly runs in<font color="#E5E5E5"> its own space</font>

232
00:09:26,720 --> 00:09:33,230
so<font color="#E5E5E5"> it's not like say x86 and arm where</font>

233
00:09:31,460 --> 00:09:36,320
your instructions<font color="#E5E5E5"> are interleaved with</font>

234
00:09:33,230 --> 00:09:38,240
<font color="#E5E5E5">your data in the</font><font color="#CCCCCC"> means in the machines</font>

235
00:09:36,320 --> 00:09:39,500
memory<font color="#E5E5E5"> instead as a separate</font><font color="#CCCCCC"> Bank of</font>

236
00:09:38,240 --> 00:09:41,000
memory for instructions and<font color="#CCCCCC"> a separate</font>

237
00:09:39,500 --> 00:09:44,420
<font color="#CCCCCC">Bank</font><font color="#E5E5E5"> of memory for memory of</font><font color="#CCCCCC"> reading</font>

238
00:09:41,000 --> 00:09:47,990
data so there's no way<font color="#E5E5E5"> that we can have</font>

239
00:09:44,420 --> 00:09:50,569
like a pointer<font color="#E5E5E5"> that goes to an</font>

240
00:09:47,990 --> 00:09:51,830
instruction but we write<font color="#E5E5E5"> C programs like</font>

241
00:09:50,570 --> 00:09:54,020
<font color="#CCCCCC">that all the time and so we need a</font><font color="#E5E5E5"> way</font>

242
00:09:51,830 --> 00:09:55,370
to<font color="#CCCCCC"> implement that in webassembly they</font>

243
00:09:54,020 --> 00:09:58,819
didn't made<font color="#CCCCCC"> this thing</font><font color="#E5E5E5"> called a function</font>

244
00:09:55,370 --> 00:10:00,470
table<font color="#E5E5E5"> so all a function</font><font color="#CCCCCC"> table</font><font color="#E5E5E5"> is is you</font>

245
00:09:58,820 --> 00:10:02,320
<font color="#E5E5E5">can declare hey I'm gonna want an</font>

246
00:10:00,470 --> 00:10:05,780
indirect call to<font color="#E5E5E5"> a function somewhere</font>

247
00:10:02,320 --> 00:10:07,400
<font color="#E5E5E5">and then that goes in the table the</font>

248
00:10:05,780 --> 00:10:09,680
<font color="#CCCCCC">table just has numerical indexes</font><font color="#E5E5E5"> and</font>

249
00:10:07,400 --> 00:10:12,020
then later on<font color="#E5E5E5"> you can say okay I want</font><font color="#CCCCCC"> to</font>

250
00:10:09,680 --> 00:10:13,819
<font color="#E5E5E5">jump to function number decide to set</font>

251
00:10:12,020 --> 00:10:15,199
run time<font color="#CCCCCC"> and then later it goes</font><font color="#E5E5E5"> look set</font>

252
00:10:13,820 --> 00:10:17,810
up and does that let's<font color="#CCCCCC"> take a look at</font>

253
00:10:15,200 --> 00:10:19,960
that<font color="#E5E5E5"> in code</font><font color="#CCCCCC"> and if you can't read</font><font color="#E5E5E5"> this</font>

254
00:10:17,810 --> 00:10:23,239
in<font color="#E5E5E5"> the back I'm gonna</font><font color="#CCCCCC"> walk through it</font>

255
00:10:19,960 --> 00:10:24,710
<font color="#CCCCCC">not necessarily</font><font color="#E5E5E5"> you don't need to really</font>

256
00:10:23,240 --> 00:10:28,100
understand<font color="#E5E5E5"> this to get to the rest of</font>

257
00:10:24,710 --> 00:10:29,900
our talk but it is important so again we

258
00:10:28,100 --> 00:10:34,070
have a module<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to declare a</font>

259
00:10:29,900 --> 00:10:36,290
type of type function with a result<font color="#CCCCCC"> so</font>

260
00:10:34,070 --> 00:10:38,510
what we've<font color="#E5E5E5"> done</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> is we've said we're</font>

261
00:10:36,290 --> 00:10:40,640
going to<font color="#CCCCCC"> have</font><font color="#E5E5E5"> function pointers and they</font>

262
00:10:38,510 --> 00:10:43,130
are going to return<font color="#CCCCCC"> and answer they're</font>

263
00:10:40,640 --> 00:10:45,140
not<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> have any other parameters then</font>

264
00:10:43,130 --> 00:10:46,580
we're going<font color="#CCCCCC"> to make this table table</font><font color="#E5E5E5"> to</font>

265
00:10:45,140 --> 00:10:49,400
any function<font color="#CCCCCC"> says we're</font><font color="#E5E5E5"> gonna make a</font>

266
00:10:46,580 --> 00:10:53,030
table<font color="#E5E5E5"> that has size two and an element F</font>

267
00:10:49,400 --> 00:10:55,910
<font color="#E5E5E5">1 and F 2 on line four says we're going</font>

268
00:10:53,030 --> 00:10:59,900
<font color="#E5E5E5">to add two new entries to this table</font>

269
00:10:55,910 --> 00:11:02,420
they're called F 1 and F 2 on line<font color="#E5E5E5"> 6</font>

270
00:10:59,900 --> 00:11:04,060
we're<font color="#E5E5E5"> going to declare</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> F 1 actually</font>

271
00:11:02,420 --> 00:11:05,949
is and note that<font color="#CCCCCC"> it has the same</font>

272
00:11:04,060 --> 00:11:07,569
signature<font color="#E5E5E5"> that we talked about before it</font>

273
00:11:05,950 --> 00:11:08,950
turns an end that's<font color="#E5E5E5"> all it does in this</font>

274
00:11:07,570 --> 00:11:14,020
<font color="#E5E5E5">case we're just returning a number same</font>

275
00:11:08,950 --> 00:11:17,170
with<font color="#CCCCCC"> f2 here we're gonna actually call</font>

276
00:11:14,020 --> 00:11:19,329
<font color="#E5E5E5">something so this is a function we are</font>

277
00:11:17,170 --> 00:11:22,240
taking one<font color="#CCCCCC"> parameter and</font><font color="#E5E5E5"> returning one</font>

278
00:11:19,330 --> 00:11:24,130
thing and in here we're gonna<font color="#E5E5E5"> say get</font>

279
00:11:22,240 --> 00:11:26,020
local I so get the value of<font color="#E5E5E5"> the</font>

280
00:11:24,130 --> 00:11:30,250
parameter pushes on the<font color="#E5E5E5"> stack and then</font>

281
00:11:26,020 --> 00:11:31,600
call indirect some type<font color="#CCCCCC"> so now calling</font>

282
00:11:30,250 --> 00:11:32,920
<font color="#E5E5E5">direct is gonna pop the thing off the</font>

283
00:11:31,600 --> 00:11:35,590
stack that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> just pushed which is the</font>

284
00:11:32,920 --> 00:11:37,630
<font color="#E5E5E5">value in the parameter and then it's</font>

285
00:11:35,590 --> 00:11:39,700
going<font color="#E5E5E5"> to go look up in the function</font>

286
00:11:37,630 --> 00:11:45,760
table<font color="#E5E5E5"> where which function is that and</font>

287
00:11:39,700 --> 00:11:48,070
then go and<font color="#CCCCCC"> actually call it so just</font>

288
00:11:45,760 --> 00:11:49,540
another way<font color="#CCCCCC"> to</font><font color="#E5E5E5"> show that so when you use</font>

289
00:11:48,070 --> 00:11:52,480
<font color="#CCCCCC">calling direct it's gonna pull something</font>

290
00:11:49,540 --> 00:11:54,219
<font color="#E5E5E5">off the stack go look up</font><font color="#CCCCCC"> the add the</font>

291
00:11:52,480 --> 00:11:56,260
value in the stack<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the function table</font>

292
00:11:54,220 --> 00:11:57,400
<font color="#E5E5E5">the function table knows the address</font><font color="#CCCCCC"> of</font>

293
00:11:56,260 --> 00:12:01,810
the actual thing that's going<font color="#E5E5E5"> to call</font>

294
00:11:57,400 --> 00:12:03,430
and that's<font color="#E5E5E5"> what makes the call so</font>

295
00:12:01,810 --> 00:12:05,199
everything we've talked<font color="#CCCCCC"> about before</font>

296
00:12:03,430 --> 00:12:06,520
<font color="#E5E5E5">this has just been</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> wazzing we</font>

297
00:12:05,200 --> 00:12:07,750
haven't talked<font color="#CCCCCC"> about the browser at all</font>

298
00:12:06,520 --> 00:12:10,030
so we need to talk a little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> about</font>

299
00:12:07,750 --> 00:12:12,940
what<font color="#CCCCCC"> weighs</font><font color="#E5E5E5"> amines while it's living in</font>

300
00:12:10,030 --> 00:12:15,640
<font color="#E5E5E5">the browser wasm can't talk to the dom</font>

301
00:12:12,940 --> 00:12:16,960
<font color="#E5E5E5">plasm can't read your memory it can't</font>

302
00:12:15,640 --> 00:12:19,180
write to<font color="#CCCCCC"> the screen it can't do anything</font>

303
00:12:16,960 --> 00:12:21,130
<font color="#E5E5E5">on its own can't it's totally sandbox</font>

304
00:12:19,180 --> 00:12:23,050
off from all<font color="#E5E5E5"> that</font><font color="#CCCCCC"> stuff if you want wasm</font>

305
00:12:21,130 --> 00:12:25,630
to do anything other than spin your<font color="#CCCCCC"> cpu</font>

306
00:12:23,050 --> 00:12:28,870
you have to<font color="#E5E5E5"> declare some imports or some</font>

307
00:12:25,630 --> 00:12:31,780
exports<font color="#E5E5E5"> you can the most obvious example</font>

308
00:12:28,870 --> 00:12:33,040
this is functions so we declared export

309
00:12:31,780 --> 00:12:34,810
for the add<font color="#E5E5E5"> function and then that meant</font>

310
00:12:33,040 --> 00:12:36,579
that<font color="#CCCCCC"> javascript</font><font color="#E5E5E5"> could call that add</font>

311
00:12:34,810 --> 00:12:37,839
function<font color="#E5E5E5"> and it would run the wasm and</font>

312
00:12:36,580 --> 00:12:43,680
then return the value back<font color="#CCCCCC"> to javascript</font>

313
00:12:37,840 --> 00:12:46,500
<font color="#E5E5E5">you can also import an export the memory</font>

314
00:12:43,680 --> 00:12:50,410
<font color="#CCCCCC">javascript</font><font color="#E5E5E5"> is able to to look at the</font>

315
00:12:46,500 --> 00:12:51,790
linear memory<font color="#E5E5E5"> and you can also share</font>

316
00:12:50,410 --> 00:12:53,439
that<font color="#CCCCCC"> Leonard linear memory</font><font color="#E5E5E5"> across</font>

317
00:12:51,790 --> 00:12:55,870
multiple running instances<font color="#E5E5E5"> of wasm if</font>

318
00:12:53,440 --> 00:12:57,130
you want to<font color="#E5E5E5"> and the tables can also be</font>

319
00:12:55,870 --> 00:12:59,440
shared<font color="#E5E5E5"> across multiple instances of</font>

320
00:12:57,130 --> 00:13:02,020
<font color="#CCCCCC">Azzam if you want to</font><font color="#E5E5E5"> this means that you</font>

321
00:12:59,440 --> 00:13:03,310
can do things<font color="#CCCCCC"> like kind</font><font color="#E5E5E5"> of a</font>

322
00:13:02,020 --> 00:13:04,750
<font color="#E5E5E5">multi-threading thing where you've got a</font>

323
00:13:03,310 --> 00:13:05,920
web worker running something<font color="#E5E5E5"> and another</font>

324
00:13:04,750 --> 00:13:08,590
web worker running another thing they

325
00:13:05,920 --> 00:13:10,270
can share<font color="#CCCCCC"> memory if</font><font color="#E5E5E5"> you need to they can</font>

326
00:13:08,590 --> 00:13:14,530
share libraries if you need to by by

327
00:13:10,270 --> 00:13:17,710
sharing a function table<font color="#E5E5E5"> so on in</font><font color="#CCCCCC"> script</font>

328
00:13:14,530 --> 00:13:19,930
<font color="#CCCCCC">in is I guess a tool chain or an SDK</font>

329
00:13:17,710 --> 00:13:22,690
and<font color="#E5E5E5"> it's point is to create waves</font><font color="#CCCCCC"> and</font>

330
00:13:19,930 --> 00:13:25,120
binaries for<font color="#E5E5E5"> you out of other things and</font>

331
00:13:22,690 --> 00:13:29,590
we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to talk about C and C++ it's</font>

332
00:13:25,120 --> 00:13:32,920
built on LLVM and clang it includes all

333
00:13:29,590 --> 00:13:34,600
your expected built in<font color="#CCCCCC"> c libraries and</font>

334
00:13:32,920 --> 00:13:36,880
it also makes it<font color="#CCCCCC"> really easy to</font>

335
00:13:34,600 --> 00:13:39,040
<font color="#CCCCCC">integrate your wasm that you've just</font>

336
00:13:36,880 --> 00:13:41,439
<font color="#E5E5E5">produced into a</font><font color="#CCCCCC"> webpage</font><font color="#E5E5E5"> by automatically</font>

337
00:13:39,040 --> 00:13:44,290
generating<font color="#CCCCCC"> javascript</font><font color="#E5E5E5"> and HTML for you</font>

338
00:13:41,440 --> 00:13:47,940
that will handle<font color="#E5E5E5"> the glue code that</font>

339
00:13:44,290 --> 00:13:49,900
helps<font color="#E5E5E5"> the the two pieces communicate</font>

340
00:13:47,940 --> 00:13:53,800
there's a whole bunch<font color="#CCCCCC"> of other things in</font>

341
00:13:49,900 --> 00:13:54,970
<font color="#CCCCCC">this script and</font><font color="#E5E5E5"> ads as well</font><font color="#CCCCCC"> but the only</font>

342
00:13:53,800 --> 00:13:57,430
<font color="#CCCCCC">things that we're going to talk about</font>

343
00:13:54,970 --> 00:14:00,100
here are these<font color="#CCCCCC"> two things</font><font color="#E5E5E5"> called</font><font color="#CCCCCC"> EMA SM</font>

344
00:13:57,430 --> 00:14:01,359
and in script<font color="#E5E5E5"> and run script</font><font color="#CCCCCC"> those are</font>

345
00:14:00,100 --> 00:14:04,090
<font color="#E5E5E5">both two different ways they're slightly</font>

346
00:14:01,360 --> 00:14:06,190
<font color="#E5E5E5">different</font><font color="#CCCCCC"> but the idea is that you can</font>

347
00:14:04,090 --> 00:14:08,410
use those to run<font color="#E5E5E5"> arbitrary JavaScript</font>

348
00:14:06,190 --> 00:14:09,430
from inside wasm<font color="#E5E5E5"> that's going to be</font>

349
00:14:08,410 --> 00:14:11,949
really<font color="#E5E5E5"> important later for some of the</font>

350
00:14:09,430 --> 00:14:14,319
tricks we're going to do if<font color="#E5E5E5"> you want to</font>

351
00:14:11,950 --> 00:14:15,970
<font color="#E5E5E5">know more about in scripting</font><font color="#CCCCCC"> Azzam since</font>

352
00:14:14,320 --> 00:14:18,130
<font color="#CCCCCC">Natalie's talk is over and you can't go</font>

353
00:14:15,970 --> 00:14:22,350
see<font color="#CCCCCC"> that anymore you can go read the</font>

354
00:14:18,130 --> 00:14:24,670
spec<font color="#CCCCCC"> you could also this PDF</font><font color="#E5E5E5"> here is</font>

355
00:14:22,350 --> 00:14:26,140
does a really good<font color="#CCCCCC"> job of like if you're</font>

356
00:14:24,670 --> 00:14:27,550
a reverser and you want to know like the

357
00:14:26,140 --> 00:14:29,410
nuts and<font color="#E5E5E5"> bolts</font><font color="#CCCCCC"> of how</font><font color="#E5E5E5"> the binary format</font>

358
00:14:27,550 --> 00:14:31,479
<font color="#E5E5E5">works it does a great job of</font><font color="#CCCCCC"> running</font>

359
00:14:29,410 --> 00:14:32,500
through<font color="#E5E5E5"> what a</font><font color="#CCCCCC"> webassembly</font><font color="#E5E5E5"> binary looks</font>

360
00:14:31,480 --> 00:14:35,350
like and how<font color="#CCCCCC"> it all works</font>

361
00:14:32,500 --> 00:14:39,400
I wish I had that PDF<font color="#E5E5E5"> before</font><font color="#CCCCCC"> we started</font>

362
00:14:35,350 --> 00:14:41,560
<font color="#E5E5E5">doing this research so we're gonna talk</font>

363
00:14:39,400 --> 00:14:44,230
<font color="#CCCCCC">about old exploits</font><font color="#E5E5E5"> and I have a lot</font><font color="#CCCCCC"> of</font>

364
00:14:41,560 --> 00:14:48,969
choice vintage<font color="#E5E5E5"> well-tested memes to go</font>

365
00:14:44,230 --> 00:14:50,290
along with<font color="#CCCCCC"> these slides so</font><font color="#E5E5E5"> we think</font><font color="#CCCCCC"> that</font>

366
00:14:48,970 --> 00:14:52,600
a format string attack will work just

367
00:14:50,290 --> 00:14:53,949
<font color="#E5E5E5">fine for the web people</font><font color="#CCCCCC"> who don't know</font>

368
00:14:52,600 --> 00:14:58,030
see I have to cover<font color="#E5E5E5"> what a</font><font color="#CCCCCC"> formatting</font>

369
00:14:53,950 --> 00:15:00,520
attack is so there are a family<font color="#E5E5E5"> of</font>

370
00:14:58,030 --> 00:15:02,319
functions<font color="#E5E5E5"> in C that take a format</font>

371
00:15:00,520 --> 00:15:04,390
specifier where you can say<font color="#CCCCCC"> okay I'm</font>

372
00:15:02,320 --> 00:15:05,560
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> have some values of</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> variables</font>

373
00:15:04,390 --> 00:15:08,800
<font color="#E5E5E5">that go</font><font color="#CCCCCC"> into the string and then the</font>

374
00:15:05,560 --> 00:15:11,199
<font color="#E5E5E5">values get</font><font color="#CCCCCC"> filled</font><font color="#E5E5E5"> in at runtime</font><font color="#CCCCCC"> the way</font>

375
00:15:08,800 --> 00:15:14,079
<font color="#E5E5E5">that it works if the user can control</font>

376
00:15:11,200 --> 00:15:16,810
this format specifier<font color="#E5E5E5"> then the user</font>

377
00:15:14,080 --> 00:15:18,580
could add in extra<font color="#E5E5E5"> lookups</font><font color="#CCCCCC"> for variables</font>

378
00:15:16,810 --> 00:15:20,290
that didn't<font color="#E5E5E5"> actually exist and because</font><font color="#CCCCCC"> C</font>

379
00:15:18,580 --> 00:15:22,300
loves to let you shoot<font color="#CCCCCC"> yourself in the</font>

380
00:15:20,290 --> 00:15:23,740
foot<font color="#E5E5E5"> it just starts popping new things</font>

381
00:15:22,300 --> 00:15:25,449
off the stack and<font color="#E5E5E5"> putting them in the</font>

382
00:15:23,740 --> 00:15:27,220
<font color="#E5E5E5">string there's also a way to write</font>

383
00:15:25,450 --> 00:15:28,870
things to things<font color="#E5E5E5"> because they added this</font>

384
00:15:27,220 --> 00:15:30,880
percent and that lets you write<font color="#CCCCCC"> so</font>

385
00:15:28,870 --> 00:15:31,550
essentially<font color="#E5E5E5"> what it means is if there's</font>

386
00:15:30,880 --> 00:15:35,439
a user<font color="#E5E5E5"> that can</font>

387
00:15:31,550 --> 00:15:38,180
put in that can taint the value of the

388
00:15:35,440 --> 00:15:40,370
format<font color="#E5E5E5"> screen specifier then they can</font>

389
00:15:38,180 --> 00:15:46,489
arbitrarily read an arbitrarily<font color="#E5E5E5"> right</font>

390
00:15:40,370 --> 00:15:48,530
for the most<font color="#E5E5E5"> part</font><font color="#CCCCCC"> go back one we don't</font>

391
00:15:46,490 --> 00:15:51,470
have a<font color="#E5E5E5"> POC for this yet</font><font color="#CCCCCC"> so you can tell</font>

392
00:15:48,530 --> 00:15:56,680
me<font color="#CCCCCC"> to get out later</font><font color="#E5E5E5"> but we think that</font>

393
00:15:51,470 --> 00:15:58,340
<font color="#CCCCCC">this</font><font color="#E5E5E5"> will</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> integer overflows</font>

394
00:15:56,680 --> 00:16:00,199
overflows are present in a<font color="#CCCCCC"> lot of</font>

395
00:15:58,340 --> 00:16:01,970
languages<font color="#CCCCCC"> but for people</font><font color="#E5E5E5"> who haven't</font>

396
00:16:00,200 --> 00:16:04,340
heard of<font color="#CCCCCC"> them if you have an integer it</font>

397
00:16:01,970 --> 00:16:07,610
has a maximum<font color="#CCCCCC"> value</font><font color="#E5E5E5"> in any any</font>

398
00:16:04,340 --> 00:16:09,620
programming language<font color="#E5E5E5"> so if you do an</font>

399
00:16:07,610 --> 00:16:11,930
operation<font color="#CCCCCC"> that</font><font color="#E5E5E5"> would cause the value</font>

400
00:16:09,620 --> 00:16:13,610
stored in<font color="#E5E5E5"> that integer to be higher than</font>

401
00:16:11,930 --> 00:16:15,949
<font color="#CCCCCC">what the maximum value was supposed to</font>

402
00:16:13,610 --> 00:16:18,380
be then it rolls around to the back

403
00:16:15,950 --> 00:16:20,030
again<font color="#CCCCCC"> so if it's a signed</font><font color="#E5E5E5"> type then you</font>

404
00:16:18,380 --> 00:16:21,380
you<font color="#E5E5E5"> end up the negative numbers if it's</font>

405
00:16:20,030 --> 00:16:26,720
unsigned and<font color="#E5E5E5"> you end up in a low value</font>

406
00:16:21,380 --> 00:16:28,189
<font color="#E5E5E5">this is important for one because you</font>

407
00:16:26,720 --> 00:16:29,810
might<font color="#CCCCCC"> be if this was a value that was</font>

408
00:16:28,190 --> 00:16:31,820
like your bank account<font color="#E5E5E5"> you can flip it</font>

409
00:16:29,810 --> 00:16:32,660
over or<font color="#E5E5E5"> you know withdraw something that</font>

410
00:16:31,820 --> 00:16:34,520
you shouldn't<font color="#CCCCCC"> been able to</font><font color="#E5E5E5"> do things</font>

411
00:16:32,660 --> 00:16:36,290
like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> but also it's a gateway</font>

412
00:16:34,520 --> 00:16:38,329
sometimes to buffer overflow exploits

413
00:16:36,290 --> 00:16:40,160
because you can change<font color="#E5E5E5"> the expected</font>

414
00:16:38,330 --> 00:16:41,540
value of<font color="#E5E5E5"> how long</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> array was supposed</font>

415
00:16:40,160 --> 00:16:45,230
to be before<font color="#CCCCCC"> it gets created</font><font color="#E5E5E5"> things like</font>

416
00:16:41,540 --> 00:16:47,180
that<font color="#CCCCCC"> so just in this</font><font color="#E5E5E5"> deplane</font><font color="#CCCCCC"> sea</font><font color="#E5E5E5"> world</font>

417
00:16:45,230 --> 00:16:48,200
<font color="#E5E5E5">wasm isn't doing anything to defend</font><font color="#CCCCCC"> you</font>

418
00:16:47,180 --> 00:16:48,620
against these<font color="#E5E5E5"> so if you just have a</font>

419
00:16:48,200 --> 00:16:51,770
straight-up

420
00:16:48,620 --> 00:16:54,170
<font color="#CCCCCC">c integer overflow it's still</font><font color="#E5E5E5"> going to</font>

421
00:16:51,770 --> 00:16:56,449
<font color="#CCCCCC">work</font><font color="#E5E5E5"> fine the interesting</font><font color="#CCCCCC"> part</font><font color="#E5E5E5"> here is</font>

422
00:16:54,170 --> 00:16:58,280
<font color="#E5E5E5">that now we're throwing in wasm and</font>

423
00:16:56,450 --> 00:17:00,050
<font color="#E5E5E5">javascript into the mix and they all</font>

424
00:16:58,280 --> 00:17:01,400
have their own integer types<font color="#CCCCCC"> with their</font>

425
00:17:00,050 --> 00:17:03,349
own maximum values and everyone's

426
00:17:01,400 --> 00:17:04,579
<font color="#E5E5E5">different so</font><font color="#CCCCCC"> I'm not going</font><font color="#E5E5E5"> to list off</font>

427
00:17:03,350 --> 00:17:08,030
all<font color="#CCCCCC"> the different</font><font color="#E5E5E5"> types and see there's</font>

428
00:17:04,579 --> 00:17:12,889
a ton<font color="#CCCCCC"> while some have in 32 and 64 float</font>

429
00:17:08,030 --> 00:17:16,250
32 and<font color="#E5E5E5"> vote 64 javascript has</font><font color="#CCCCCC"> two the 53</font>

430
00:17:12,890 --> 00:17:19,370
minus<font color="#E5E5E5"> one so what that means is if we're</font>

431
00:17:16,250 --> 00:17:21,230
<font color="#CCCCCC">sending</font><font color="#E5E5E5"> a value from JavaScript to wasm</font>

432
00:17:19,369 --> 00:17:24,260
the<font color="#CCCCCC"> Weizmann value was declared as a</font>

433
00:17:21,230 --> 00:17:28,220
32-bit value<font color="#E5E5E5"> but the JavaScript</font><font color="#CCCCCC"> that we</font>

434
00:17:24,260 --> 00:17:29,660
<font color="#E5E5E5">send is say</font><font color="#CCCCCC"> two to the forty then what</font>

435
00:17:28,220 --> 00:17:32,420
we've just<font color="#E5E5E5"> sent in already overflowed</font>

436
00:17:29,660 --> 00:17:33,620
before we even started the<font color="#CCCCCC"> C and so then</font>

437
00:17:32,420 --> 00:17:35,060
you know there's going to be a problem

438
00:17:33,620 --> 00:17:36,830
<font color="#E5E5E5">there we had a demo</font><font color="#CCCCCC"> of this</font><font color="#E5E5E5"> but it was</font>

439
00:17:35,060 --> 00:17:38,750
<font color="#E5E5E5">boring so</font><font color="#CCCCCC"> we didn't</font><font color="#E5E5E5"> put it in</font>

440
00:17:36,830 --> 00:17:43,250
you could also overflow in the other

441
00:17:38,750 --> 00:17:45,190
<font color="#E5E5E5">direction so if the the wasum was too</font>

442
00:17:43,250 --> 00:17:46,420
big for<font color="#CCCCCC"> what we returned</font><font color="#E5E5E5"> back</font><font color="#CCCCCC"> to Java</font>

443
00:17:45,190 --> 00:17:49,900
then you could have<font color="#E5E5E5"> the same problem</font>

444
00:17:46,420 --> 00:17:53,580
once it gets<font color="#E5E5E5"> back to the JavaScript but</font>

445
00:17:49,900 --> 00:17:56,170
<font color="#E5E5E5">for overflows</font><font color="#CCCCCC"> so again for people who</font>

446
00:17:53,580 --> 00:17:59,320
are web people<font color="#E5E5E5"> a buffer overflow happens</font>

447
00:17:56,170 --> 00:18:01,420
because<font color="#E5E5E5"> C doesn't check the bounds of</font>

448
00:17:59,320 --> 00:18:03,280
memory<font color="#E5E5E5"> when you have an array and so if</font>

449
00:18:01,420 --> 00:18:04,390
you tell<font color="#CCCCCC"> it to write more</font><font color="#E5E5E5"> things than</font>

450
00:18:03,280 --> 00:18:05,740
<font color="#E5E5E5">there</font><font color="#CCCCCC"> is space</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> the array it just</font>

451
00:18:04,390 --> 00:18:07,540
keeps<font color="#E5E5E5"> writing through into other things</font>

452
00:18:05,740 --> 00:18:09,970
<font color="#CCCCCC">in memory</font><font color="#E5E5E5"> this still happens perfectly</font>

453
00:18:07,540 --> 00:18:11,620
<font color="#CCCCCC">fine in wisdom</font><font color="#E5E5E5"> you're not writing in</font>

454
00:18:09,970 --> 00:18:13,690
kind<font color="#E5E5E5"> of regular memory you're</font><font color="#CCCCCC"> overriding</font>

455
00:18:11,620 --> 00:18:14,800
things in that<font color="#E5E5E5"> linear memory so whatever</font>

456
00:18:13,690 --> 00:18:20,170
was in there we can continue to

457
00:18:14,800 --> 00:18:21,340
overwrite<font color="#CCCCCC"> the kind of simple case for</font>

458
00:18:20,170 --> 00:18:22,810
<font color="#E5E5E5">this is if there's a value</font><font color="#CCCCCC"> of memory</font>

459
00:18:21,340 --> 00:18:24,550
<font color="#CCCCCC">that you wanted to change because it</font>

460
00:18:22,810 --> 00:18:26,290
means<font color="#E5E5E5"> something important in the context</font>

461
00:18:24,550 --> 00:18:27,580
<font color="#E5E5E5">of the application</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> there's something</font>

462
00:18:26,290 --> 00:18:28,840
<font color="#E5E5E5">like a privilege level your account</font>

463
00:18:27,580 --> 00:18:30,220
balance<font color="#E5E5E5"> or whatever</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> we can find a way</font>

464
00:18:28,840 --> 00:18:33,159
<font color="#CCCCCC">to overflow</font><font color="#E5E5E5"> into those then we can</font>

465
00:18:30,220 --> 00:18:34,510
<font color="#E5E5E5">change those values which is useful the</font>

466
00:18:33,160 --> 00:18:39,160
other thing that these normally are used

467
00:18:34,510 --> 00:18:41,230
<font color="#CCCCCC">for in C is to run arbitrary code now</font>

468
00:18:39,160 --> 00:18:43,720
running arbitrary code<font color="#CCCCCC"> and lazarum is</font>

469
00:18:41,230 --> 00:18:45,220
much<font color="#E5E5E5"> harder because we</font><font color="#CCCCCC"> don't have these</font>

470
00:18:43,720 --> 00:18:46,150
function pointers and return pointers

471
00:18:45,220 --> 00:18:47,470
and<font color="#E5E5E5"> all these other</font><font color="#CCCCCC"> things that</font><font color="#E5E5E5"> we can</font>

472
00:18:46,150 --> 00:18:49,660
<font color="#E5E5E5">try</font><font color="#CCCCCC"> to override</font><font color="#E5E5E5"> and then put our code</font>

473
00:18:47,470 --> 00:18:51,190
furthermore we<font color="#E5E5E5"> can only do this in</font>

474
00:18:49,660 --> 00:18:54,430
<font color="#CCCCCC">linear memory</font><font color="#E5E5E5"> which is never executable</font>

475
00:18:51,190 --> 00:18:56,380
so we can't like write some executable

476
00:18:54,430 --> 00:18:57,700
code and then jump<font color="#CCCCCC"> to it</font><font color="#E5E5E5"> so we need some</font>

477
00:18:56,380 --> 00:19:00,580
other<font color="#CCCCCC"> things to do we'll talk about</font><font color="#E5E5E5"> that</font>

478
00:18:57,700 --> 00:19:02,230
<font color="#CCCCCC">later</font><font color="#E5E5E5"> if you try to go past the bounds</font>

479
00:19:00,580 --> 00:19:04,210
of linear<font color="#CCCCCC"> memory</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> in to something</font>

480
00:19:02,230 --> 00:19:05,140
<font color="#E5E5E5">else that the browser would have it's</font>

481
00:19:04,210 --> 00:19:07,630
supposed to<font color="#E5E5E5"> give an error</font>

482
00:19:05,140 --> 00:19:09,160
<font color="#CCCCCC">I think Natalie's talk talked about a</font>

483
00:19:07,630 --> 00:19:10,570
few cases where that wasn't<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> the</font>

484
00:19:09,160 --> 00:19:13,180
<font color="#E5E5E5">case in a browser implementation but</font>

485
00:19:10,570 --> 00:19:17,889
from a<font color="#CCCCCC"> generalized perspective it's</font>

486
00:19:13,180 --> 00:19:18,880
supposed<font color="#CCCCCC"> to</font><font color="#E5E5E5"> work fine</font><font color="#CCCCCC"> with all</font><font color="#E5E5E5"> that</font>

487
00:19:17,890 --> 00:19:20,230
being said<font color="#E5E5E5"> there</font><font color="#CCCCCC"> are still</font><font color="#E5E5E5"> some</font>

488
00:19:18,880 --> 00:19:21,460
interesting things<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can do with buffer</font>

489
00:19:20,230 --> 00:19:23,320
overflows that get us some interesting

490
00:19:21,460 --> 00:19:28,390
<font color="#E5E5E5">kinds of code execution we'll talk</font><font color="#CCCCCC"> about</font>

491
00:19:23,320 --> 00:19:32,020
<font color="#E5E5E5">that in a minute okay I have a pretty</font>

492
00:19:28,390 --> 00:19:34,270
simple<font color="#E5E5E5"> demo here which is an end of the</font>

493
00:19:32,020 --> 00:19:36,129
most basic<font color="#CCCCCC"> type of buffer overflow so</font>

494
00:19:34,270 --> 00:19:38,139
here on line<font color="#E5E5E5"> 6 we're using this</font><font color="#CCCCCC"> a.m.</font>

495
00:19:36,130 --> 00:19:39,940
underscore<font color="#CCCCCC"> J s which we talked about</font>

496
00:19:38,140 --> 00:19:43,180
<font color="#E5E5E5">earlier and this is allowing us to</font>

497
00:19:39,940 --> 00:19:45,370
<font color="#E5E5E5">actually define JavaScript inside of our</font>

498
00:19:43,180 --> 00:19:47,200
native code<font color="#CCCCCC"> so here you</font><font color="#E5E5E5"> can see that</font>

499
00:19:45,370 --> 00:19:49,000
we're we're<font color="#E5E5E5"> creating a function called</font>

500
00:19:47,200 --> 00:19:50,980
overflow alert and we're saying that

501
00:19:49,000 --> 00:19:53,560
it's<font color="#E5E5E5"> void it takes no parameters</font><font color="#CCCCCC"> and</font>

502
00:19:50,980 --> 00:19:55,750
that<font color="#E5E5E5"> it just creates an alert box that</font>

503
00:19:53,560 --> 00:19:57,730
says overflow and then here in our<font color="#E5E5E5"> main</font>

504
00:19:55,750 --> 00:19:59,010
function<font color="#CCCCCC"> we've got two buffers one is</font>

505
00:19:57,730 --> 00:20:00,960
ABC one is once

506
00:19:59,010 --> 00:20:02,250
three and then here we've got a string

507
00:20:00,960 --> 00:20:06,960
copy when we're putting way too<font color="#CCCCCC"> many</font>

508
00:20:02,250 --> 00:20:09,180
bees into<font color="#E5E5E5"> this</font><font color="#CCCCCC"> bought one</font><font color="#E5E5E5"> and then if</font>

509
00:20:06,960 --> 00:20:14,220
then we're going<font color="#E5E5E5"> to check the</font><font color="#CCCCCC"> value of</font>

510
00:20:09,180 --> 00:20:16,350
both<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> so if both zero is ABC then</font>

511
00:20:14,220 --> 00:20:18,510
this string compare is going to return

512
00:20:16,350 --> 00:20:20,909
<font color="#E5E5E5">zero</font><font color="#CCCCCC"> and nothing is</font><font color="#E5E5E5"> going to happen if</font>

513
00:20:18,510 --> 00:20:21,629
there is an overflow<font color="#CCCCCC"> and it's not ABC</font>

514
00:20:20,910 --> 00:20:22,770
anymore

515
00:20:21,630 --> 00:20:25,170
then the string a pair is going<font color="#E5E5E5"> to</font>

516
00:20:22,770 --> 00:20:26,550
return some value<font color="#E5E5E5"> and if it does then</font>

517
00:20:25,170 --> 00:20:28,280
<font color="#E5E5E5">we're gonna get this overflow alert box</font>

518
00:20:26,550 --> 00:20:31,340
so if we see the overflow alert box that

519
00:20:28,280 --> 00:20:36,950
notifies<font color="#E5E5E5"> us that there was an overflow</font>

520
00:20:31,340 --> 00:20:39,929
<font color="#E5E5E5">so I can go into my virtual machine and</font>

521
00:20:36,950 --> 00:20:41,520
<font color="#CCCCCC">our</font><font color="#E5E5E5"> gonna use em script ins</font><font color="#CCCCCC"> e/m run</font>

522
00:20:39,930 --> 00:20:44,310
<font color="#E5E5E5">which allows us</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> just sort of like</font>

523
00:20:41,520 --> 00:20:46,440
it's<font color="#CCCCCC"> kind of</font><font color="#E5E5E5"> for like testing code you</font>

524
00:20:44,310 --> 00:20:48,480
can it's a basic web server kind of a

525
00:20:46,440 --> 00:20:50,880
thing<font color="#CCCCCC"> and we can</font><font color="#E5E5E5"> just run our boss zero</font>

526
00:20:48,480 --> 00:20:53,520
<font color="#E5E5E5">dot HTML file which we compiled with</font><font color="#CCCCCC"> um</font>

527
00:20:50,880 --> 00:21:00,860
<font color="#E5E5E5">script in and see if we get our alert</font>

528
00:20:53,520 --> 00:21:00,860
box and we got<font color="#E5E5E5"> it overflow</font>

529
00:21:05,639 --> 00:21:10,719
<font color="#E5E5E5">all right so there are way</font><font color="#CCCCCC"> too many</font>

530
00:21:08,769 --> 00:21:12,639
different types of<font color="#CCCCCC"> bugs and</font><font color="#E5E5E5"> see for us</font>

531
00:21:10,720 --> 00:21:14,620
<font color="#E5E5E5">to cover all of them</font><font color="#CCCCCC"> we'll just briefly</font>

532
00:21:12,639 --> 00:21:16,899
cover<font color="#CCCCCC"> the rest of the existing</font><font color="#E5E5E5"> sea bugs</font>

533
00:21:14,620 --> 00:21:18,518
and kind of<font color="#E5E5E5"> give us give you our take on</font>

534
00:21:16,899 --> 00:21:20,979
whether<font color="#E5E5E5"> we</font><font color="#CCCCCC"> think they're</font><font color="#E5E5E5"> gonna be useful</font>

535
00:21:18,519 --> 00:21:22,750
or<font color="#E5E5E5"> not from an attackers perspective</font><font color="#CCCCCC"> so</font>

536
00:21:20,980 --> 00:21:25,360
talk<font color="#CCCCCC"> to race conditions that stuff</font>

537
00:21:22,750 --> 00:21:28,059
should<font color="#E5E5E5"> all be just as</font><font color="#CCCCCC"> before with the</font>

538
00:21:25,360 --> 00:21:31,449
<font color="#E5E5E5">caveat that threading is not very mature</font>

539
00:21:28,059 --> 00:21:34,090
<font color="#CCCCCC">in</font><font color="#E5E5E5"> wasum yet same story</font><font color="#CCCCCC"> with timing</font>

540
00:21:31,450 --> 00:21:36,159
<font color="#CCCCCC">inside channels we</font><font color="#E5E5E5"> think that heat based</font>

541
00:21:34,090 --> 00:21:37,658
arbitrary<font color="#CCCCCC"> writes will also work in</font><font color="#E5E5E5"> the</font>

542
00:21:36,159 --> 00:21:40,450
context of<font color="#CCCCCC"> linear memory we don't have a</font>

543
00:21:37,659 --> 00:21:42,399
<font color="#E5E5E5">PSC for that either</font><font color="#CCCCCC"> things that</font><font color="#E5E5E5"> won't</font>

544
00:21:40,450 --> 00:21:44,259
work<font color="#CCCCCC"> are your classic buffer overflow</font>

545
00:21:42,399 --> 00:21:46,120
where you jump back<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the code you put</font>

546
00:21:44,259 --> 00:21:47,950
<font color="#E5E5E5">in things</font><font color="#CCCCCC"> like rock won't</font><font color="#E5E5E5"> work because</font>

547
00:21:46,120 --> 00:21:51,820
<font color="#E5E5E5">we can't arbitrarily jump</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> places in</font>

548
00:21:47,950 --> 00:21:53,169
memory<font color="#CCCCCC"> and</font><font color="#E5E5E5"> as it's</font><font color="#CCCCCC"> supposed to work you</font>

549
00:21:51,820 --> 00:21:56,168
shouldn't<font color="#E5E5E5"> be getting any information</font>

550
00:21:53,169 --> 00:21:57,850
<font color="#CCCCCC">from</font><font color="#E5E5E5"> the browser</font><font color="#CCCCCC"> for example when you</font>

551
00:21:56,169 --> 00:21:59,679
declare<font color="#E5E5E5"> your memory it's supposed to be</font>

552
00:21:57,850 --> 00:22:01,269
all zeroed out when it gets to<font color="#CCCCCC"> Assam so</font>

553
00:21:59,679 --> 00:22:02,679
you can't<font color="#CCCCCC"> expect to</font><font color="#E5E5E5"> you know lead on</font>

554
00:22:01,269 --> 00:22:06,460
initialize memory and get something

555
00:22:02,679 --> 00:22:08,139
interesting<font color="#E5E5E5"> there onto the new exploits</font>

556
00:22:06,460 --> 00:22:09,759
<font color="#E5E5E5">and Tyler assures me that all the memes</font>

557
00:22:08,139 --> 00:22:11,678
we have here are<font color="#E5E5E5"> really fresh</font><font color="#CCCCCC"> and</font>

558
00:22:09,759 --> 00:22:21,909
everyone in the 15 to<font color="#CCCCCC"> 25 demographic</font>

559
00:22:11,679 --> 00:22:23,679
will get it off<font color="#E5E5E5"> to XSS so let's talk</font>

560
00:22:21,909 --> 00:22:25,149
about XSS for a minute since we gave the

561
00:22:23,679 --> 00:22:27,730
all<font color="#CCCCCC"> the web people that remedial see</font>

562
00:22:25,149 --> 00:22:29,590
stuff we have<font color="#E5E5E5"> to do the other way</font><font color="#CCCCCC"> to XSS</font>

563
00:22:27,730 --> 00:22:31,990
means that we're running arbitrary

564
00:22:29,590 --> 00:22:34,299
<font color="#E5E5E5">JavaScript</font><font color="#CCCCCC"> in the content in the context</font>

565
00:22:31,990 --> 00:22:35,710
of<font color="#E5E5E5"> a</font><font color="#CCCCCC"> webpage now if you're not that</font>

566
00:22:34,299 --> 00:22:38,110
<font color="#E5E5E5">familiar with</font><font color="#CCCCCC"> web stuff</font><font color="#E5E5E5"> you might think</font>

567
00:22:35,710 --> 00:22:40,240
<font color="#CCCCCC">oh big deal I made a</font><font color="#E5E5E5"> pop-up or old big</font>

568
00:22:38,110 --> 00:22:42,008
deal<font color="#CCCCCC"> I can steal a session</font><font color="#E5E5E5"> token' those</font>

569
00:22:40,240 --> 00:22:44,169
things are things<font color="#E5E5E5"> you can do but what</font>

570
00:22:42,009 --> 00:22:46,000
XSS really means you can do is you can

571
00:22:44,169 --> 00:22:47,470
<font color="#CCCCCC">control everything</font><font color="#E5E5E5"> that that user could</font>

572
00:22:46,000 --> 00:22:48,970
have done and a<font color="#E5E5E5"> lot of things that maybe</font>

573
00:22:47,470 --> 00:22:51,039
they didn't<font color="#E5E5E5"> even know they</font><font color="#CCCCCC"> could do in</font>

574
00:22:48,970 --> 00:22:54,220
the context of that<font color="#E5E5E5"> website where you</font>

575
00:22:51,039 --> 00:22:55,929
got XSS<font color="#E5E5E5"> so if it's a bank and I get XSS</font>

576
00:22:54,220 --> 00:22:59,740
<font color="#CCCCCC">I could use all the functions to</font>

577
00:22:55,929 --> 00:23:01,929
transfer money<font color="#E5E5E5"> out if it's a social</font>

578
00:22:59,740 --> 00:23:03,429
media<font color="#CCCCCC"> account and</font><font color="#E5E5E5"> I get XSS I could post</font>

579
00:23:01,929 --> 00:23:05,139
social<font color="#E5E5E5"> media stuff on your behalf I</font>

580
00:23:03,429 --> 00:23:07,990
could<font color="#E5E5E5"> change your password etc etc so</font>

581
00:23:05,139 --> 00:23:09,580
XSS is<font color="#CCCCCC"> a real thing and in</font><font color="#E5E5E5"> the</font>

582
00:23:07,990 --> 00:23:13,570
<font color="#CCCCCC">webassembly</font><font color="#E5E5E5"> world that's actually even</font>

583
00:23:09,580 --> 00:23:17,559
<font color="#E5E5E5">more important because the javascript</font>

584
00:23:13,570 --> 00:23:18,790
has<font color="#CCCCCC"> the ability to</font><font color="#E5E5E5"> read</font><font color="#CCCCCC"> the linear</font>

585
00:23:17,559 --> 00:23:20,740
memory that<font color="#E5E5E5"> it's allocated</font>

586
00:23:18,790 --> 00:23:23,470
<font color="#E5E5E5">it has the</font><font color="#CCCCCC"> ability to start and</font><font color="#E5E5E5"> stop</font><font color="#CCCCCC"> as</font>

587
00:23:20,740 --> 00:23:25,180
<font color="#CCCCCC">Amit has the</font><font color="#E5E5E5"> ability to modify wasm code</font>

588
00:23:23,470 --> 00:23:26,530
<font color="#CCCCCC">I don't</font><font color="#E5E5E5"> think you can modify it when</font>

589
00:23:25,180 --> 00:23:27,940
it's running but<font color="#E5E5E5"> you could stop</font><font color="#CCCCCC"> it and</font>

590
00:23:26,530 --> 00:23:31,270
<font color="#CCCCCC">then</font><font color="#E5E5E5"> restart it with your new modified</font>

591
00:23:27,940 --> 00:23:33,850
version so you should<font color="#E5E5E5"> never consider</font>

592
00:23:31,270 --> 00:23:35,830
that code that's running in wasum is

593
00:23:33,850 --> 00:23:37,330
somehow protected from<font color="#E5E5E5"> the browser if</font>

594
00:23:35,830 --> 00:23:38,830
someone has XSS they'll be able<font color="#E5E5E5"> to do</font>

595
00:23:37,330 --> 00:23:40,540
anything they want<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the one</font><font color="#E5E5E5"> that's</font>

596
00:23:38,830 --> 00:23:43,629
running<font color="#E5E5E5"> in addition to anything they</font>

597
00:23:40,540 --> 00:23:46,540
want to<font color="#CCCCCC"> the rest</font><font color="#E5E5E5"> of that site</font><font color="#CCCCCC"> No let's</font>

598
00:23:43,630 --> 00:23:48,220
go<font color="#E5E5E5"> back so now that we know what XSS</font><font color="#CCCCCC"> is</font>

599
00:23:46,540 --> 00:23:51,370
let's come<font color="#CCCCCC"> back to what it</font><font color="#E5E5E5"> means to do</font>

600
00:23:48,220 --> 00:23:57,100
buffer overflow here<font color="#E5E5E5"> so if there is an</font>

601
00:23:51,370 --> 00:23:58,989
array<font color="#CCCCCC"> that is</font><font color="#E5E5E5"> written to the</font><font color="#CCCCCC"> Dom and</font><font color="#E5E5E5"> we</font>

602
00:23:57,100 --> 00:24:00,580
have an overflow somewhere and we can

603
00:23:58,990 --> 00:24:03,420
<font color="#CCCCCC">overflow the value that</font><font color="#E5E5E5"> would have been</font>

604
00:24:00,580 --> 00:24:06,939
written<font color="#E5E5E5"> to the Dom then we have xs/s</font>

605
00:24:03,420 --> 00:24:08,710
pretty much all there is<font color="#E5E5E5"> to</font><font color="#CCCCCC"> it we used</font>

606
00:24:06,940 --> 00:24:09,970
to be our first demo of this stopped

607
00:24:08,710 --> 00:24:11,740
working like halfway<font color="#E5E5E5"> through</font><font color="#CCCCCC"> our</font>

608
00:24:09,970 --> 00:24:13,210
research<font color="#E5E5E5"> and we were really worried but</font>

609
00:24:11,740 --> 00:24:15,040
it was because we were<font color="#CCCCCC"> overflowing a</font>

610
00:24:13,210 --> 00:24:18,250
literal which normally is really hard<font color="#E5E5E5"> to</font>

611
00:24:15,040 --> 00:24:20,590
do<font color="#CCCCCC"> and they moved we're literals go</font><font color="#E5E5E5"> in</font>

612
00:24:18,250 --> 00:24:23,260
an updated<font color="#E5E5E5"> version of</font><font color="#CCCCCC"> the script and I</font>

613
00:24:20,590 --> 00:24:24,429
think to go below<font color="#E5E5E5"> us in the stack and so</font>

614
00:24:23,260 --> 00:24:29,560
we couldn't overflow it<font color="#E5E5E5"> because we can</font>

615
00:24:24,430 --> 00:24:31,090
over<font color="#E5E5E5"> only overflow up other interesting</font>

616
00:24:29,560 --> 00:24:34,750
thing here is<font color="#CCCCCC"> that your typical way to</font>

617
00:24:31,090 --> 00:24:37,480
find XSS<font color="#E5E5E5"> is to look for reflection so I</font>

618
00:24:34,750 --> 00:24:39,070
put in an input<font color="#E5E5E5"> in some</font><font color="#CCCCCC"> webpage and then</font>

619
00:24:37,480 --> 00:24:41,140
I look<font color="#CCCCCC"> to see if that gets reflected</font>

620
00:24:39,070 --> 00:24:42,820
that same input<font color="#E5E5E5"> that I put in comes out</font>

621
00:24:41,140 --> 00:24:44,290
somewhere else<font color="#CCCCCC"> and then I can try to see</font>

622
00:24:42,820 --> 00:24:47,230
if I can manipulate that<font color="#CCCCCC"> to run</font>

623
00:24:44,290 --> 00:24:48,420
<font color="#E5E5E5">JavaScript we can do XSS without any</font>

624
00:24:47,230 --> 00:24:50,440
reflection here because we're actually

625
00:24:48,420 --> 00:24:52,510
putting in a value somewhere over here

626
00:24:50,440 --> 00:24:54,010
<font color="#E5E5E5">using</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> to overflow something that</font>

627
00:24:52,510 --> 00:24:56,170
shouldn't have been<font color="#E5E5E5"> over shouldn't have</font>

628
00:24:54,010 --> 00:25:00,550
<font color="#E5E5E5">been writable by</font><font color="#CCCCCC"> the user and</font><font color="#E5E5E5"> then</font>

629
00:24:56,170 --> 00:25:03,790
that's what<font color="#CCCCCC"> actually causes the XSS okay</font>

630
00:25:00,550 --> 00:25:05,350
so I have another another example<font color="#CCCCCC"> here</font>

631
00:25:03,790 --> 00:25:09,909
for how we can use this buffer overflow

632
00:25:05,350 --> 00:25:13,330
the XSS<font color="#CCCCCC"> concepts</font><font color="#E5E5E5"> so for this for this</font>

633
00:25:09,910 --> 00:25:15,490
example<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> ba</font><font color="#E5E5E5"> function</font><font color="#CCCCCC"> which</font>

634
00:25:13,330 --> 00:25:17,860
the<font color="#CCCCCC"> extern keyword</font><font color="#E5E5E5"> is going to let us</font>

635
00:25:15,490 --> 00:25:19,330
call it from<font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> and this</font>

636
00:25:17,860 --> 00:25:21,129
<font color="#E5E5E5">function</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> going to take</font><font color="#CCCCCC"> two parameters</font>

637
00:25:19,330 --> 00:25:22,270
it's gonna take<font color="#CCCCCC"> p1</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> p2 both of which</font>

638
00:25:21,130 --> 00:25:25,450
are<font color="#CCCCCC"> just character pointers your</font>

639
00:25:22,270 --> 00:25:27,310
character is and we've got two character

640
00:25:25,450 --> 00:25:29,590
arrays both<font color="#CCCCCC"> 1</font><font color="#E5E5E5"> and both</font><font color="#CCCCCC"> 2</font><font color="#E5E5E5"> both of</font><font color="#CCCCCC"> which</font>

641
00:25:27,310 --> 00:25:32,320
are<font color="#E5E5E5"> 16 bytes long and then we've got to</font>

642
00:25:29,590 --> 00:25:32,678
unsafe string copies from p1<font color="#E5E5E5"> at the path</font>

643
00:25:32,320 --> 00:25:34,809
<font color="#E5E5E5">1</font>

644
00:25:32,679 --> 00:25:37,509
<font color="#E5E5E5">ptoo in the bath</font><font color="#CCCCCC"> - and then here we're</font>

645
00:25:34,809 --> 00:25:39,249
using<font color="#E5E5E5"> this</font><font color="#CCCCCC"> EMAS em again where</font><font color="#E5E5E5"> basically</font>

646
00:25:37,509 --> 00:25:40,960
<font color="#E5E5E5">we're just getting this element by ID</font>

647
00:25:39,249 --> 00:25:42,190
we're getting an element called<font color="#CCCCCC"> SS X and</font>

648
00:25:40,960 --> 00:25:45,369
we're<font color="#E5E5E5"> setting the innerhtml</font>

649
00:25:42,190 --> 00:25:48,360
<font color="#E5E5E5">to this pointer stringify function</font><font color="#CCCCCC"> the</font>

650
00:25:45,369 --> 00:25:52,059
pointer stringify<font color="#E5E5E5"> is going to take like</font>

651
00:25:48,360 --> 00:25:53,619
an index<font color="#E5E5E5"> into linear memory and it's</font>

652
00:25:52,059 --> 00:25:55,450
basically<font color="#E5E5E5"> going to turn that into a</font>

653
00:25:53,619 --> 00:25:57,580
<font color="#E5E5E5">string and it takes these two parameters</font>

654
00:25:55,450 --> 00:26:00,129
<font color="#E5E5E5">0 1 1 which are defined here which is</font>

655
00:25:57,580 --> 00:26:01,570
both 1 and the length of both 1<font color="#E5E5E5"> so</font>

656
00:26:00,129 --> 00:26:04,149
<font color="#E5E5E5">essentially what we're doing is we're</font>

657
00:26:01,570 --> 00:26:05,918
taking<font color="#CCCCCC"> p1 copying it</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> both</font><font color="#E5E5E5"> 1 and then</font>

658
00:26:04,149 --> 00:26:10,090
we're taking pop one<font color="#CCCCCC"> and we're</font><font color="#E5E5E5"> printing</font>

659
00:26:05,919 --> 00:26:16,119
that directly<font color="#E5E5E5"> to the dom and here in my</font>

660
00:26:10,090 --> 00:26:18,309
example page yeah so here's what the the

661
00:26:16,119 --> 00:26:20,199
code is<font color="#E5E5E5"> gonna look like from the</font>

662
00:26:18,309 --> 00:26:21,460
<font color="#CCCCCC">JavaScript side</font><font color="#E5E5E5"> of things and the reason</font>

663
00:26:20,200 --> 00:26:23,200
<font color="#CCCCCC">why this can be</font><font color="#E5E5E5"> especially dangerous</font>

664
00:26:21,460 --> 00:26:25,330
<font color="#E5E5E5">this you are calling our Bob function</font>

665
00:26:23,200 --> 00:26:27,580
and here we've<font color="#E5E5E5"> got a static string which</font>

666
00:26:25,330 --> 00:26:29,889
we're passing in as p1<font color="#E5E5E5"> and some</font>

667
00:26:27,580 --> 00:26:31,330
user-defined string as p2<font color="#E5E5E5"> and a</font>

668
00:26:29,889 --> 00:26:32,918
developer is thinking to themselves<font color="#E5E5E5"> I'm</font>

669
00:26:31,330 --> 00:26:34,480
putting a static string in here it's

670
00:26:32,919 --> 00:26:36,399
totally<font color="#CCCCCC"> safe I don't have to do any</font><font color="#E5E5E5"> kind</font>

671
00:26:34,480 --> 00:26:38,200
of<font color="#E5E5E5"> encoding I don't have to do any kind</font>

672
00:26:36,399 --> 00:26:39,610
of sanitization<font color="#E5E5E5"> I wrote that string I</font>

673
00:26:38,200 --> 00:26:41,950
know what it's<font color="#CCCCCC"> going to be</font><font color="#E5E5E5"> but because</font>

674
00:26:39,610 --> 00:26:44,799
<font color="#E5E5E5">there's an overflow in the code</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> can</font>

675
00:26:41,950 --> 00:26:46,779
take this string with user input<font color="#E5E5E5"> so we</font>

676
00:26:44,799 --> 00:26:48,460
<font color="#CCCCCC">can see here when</font><font color="#E5E5E5"> we smash our like</font>

677
00:26:46,779 --> 00:26:50,200
button<font color="#E5E5E5"> we see our static string is</font>

678
00:26:48,460 --> 00:26:53,259
written to<font color="#E5E5E5"> the Dom we can put in a</font>

679
00:26:50,200 --> 00:26:55,119
<font color="#E5E5E5">couple of days and nothing happens we</font>

680
00:26:53,259 --> 00:26:56,590
can put in the cup of<font color="#CCCCCC"> Morris</font><font color="#E5E5E5"> and we can</font>

681
00:26:55,119 --> 00:26:59,529
see that<font color="#CCCCCC"> now we're actually starting to</font>

682
00:26:56,590 --> 00:27:01,539
write user input over to the<font color="#CCCCCC"> Dom and now</font>

683
00:26:59,529 --> 00:27:03,369
we can go to<font color="#E5E5E5"> the end of our thing and we</font>

684
00:27:01,539 --> 00:27:05,619
can try<font color="#E5E5E5"> to make some kind</font><font color="#CCCCCC"> of a XSS</font>

685
00:27:03,369 --> 00:27:08,340
payload see if I can do this right

686
00:27:05,619 --> 00:27:08,340
<font color="#CCCCCC">without messing up</font>

687
00:27:18,110 --> 00:27:33,320
and we<font color="#E5E5E5"> got</font><font color="#CCCCCC"> Xbox</font><font color="#E5E5E5"> all right so that's kind</font>

688
00:27:30,710 --> 00:27:35,090
of basic still cool<font color="#CCCCCC"> but not that</font>

689
00:27:33,320 --> 00:27:37,610
technically interesting we know we can

690
00:27:35,090 --> 00:27:41,959
overflow values the reason we<font color="#E5E5E5"> went over</font>

691
00:27:37,610 --> 00:27:43,879
a bunch of details<font color="#E5E5E5"> about how function</font>

692
00:27:41,960 --> 00:27:46,279
pointers work is because we can do some

693
00:27:43,880 --> 00:27:48,620
<font color="#CCCCCC">interesting things there too so we know</font>

694
00:27:46,279 --> 00:27:50,929
that function pointers in<font color="#CCCCCC"> Wazza mark</font>

695
00:27:48,620 --> 00:27:54,309
<font color="#E5E5E5">really pointers they're integers to this</font>

696
00:27:50,929 --> 00:27:57,440
table<font color="#CCCCCC"> that</font><font color="#E5E5E5"> does the lookup and we know</font>

697
00:27:54,309 --> 00:28:01,570
that when we use<font color="#E5E5E5"> the calling direct</font>

698
00:27:57,440 --> 00:28:04,940
stuff to execute a<font color="#CCCCCC"> function pointer the</font>

699
00:28:01,570 --> 00:28:07,428
that's going<font color="#E5E5E5"> to pull it a variable get</font>

700
00:28:04,940 --> 00:28:09,440
the value<font color="#E5E5E5"> go look up from the table what</font>

701
00:28:07,429 --> 00:28:12,200
<font color="#E5E5E5">to call and then call it now we've just</font>

702
00:28:09,440 --> 00:28:14,090
<font color="#E5E5E5">shown you that we can modify what's in a</font>

703
00:28:12,200 --> 00:28:19,730
<font color="#E5E5E5">variable view and overflow so you should</font>

704
00:28:14,090 --> 00:28:21,620
be<font color="#CCCCCC"> able to guess what comes next in</font>

705
00:28:19,730 --> 00:28:22,789
scripting when it adds things that

706
00:28:21,620 --> 00:28:26,178
you're using it puts them<font color="#E5E5E5"> in the</font>

707
00:28:22,789 --> 00:28:28,429
function<font color="#CCCCCC"> table so if you used in script</font>

708
00:28:26,179 --> 00:28:30,620
and run<font color="#E5E5E5"> script in your program for some</font>

709
00:28:28,429 --> 00:28:32,600
benign<font color="#E5E5E5"> purpose it's going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be in that</font>

710
00:28:30,620 --> 00:28:36,110
<font color="#E5E5E5">table</font><font color="#CCCCCC"> so we can call it</font><font color="#E5E5E5"> dynamically as</font>

711
00:28:32,600 --> 00:28:40,129
well it has<font color="#E5E5E5"> a signature it returns</font>

712
00:28:36,110 --> 00:28:44,240
nothing<font color="#E5E5E5"> and it takes that's supposed to</font>

713
00:28:40,130 --> 00:28:46,429
be Const<font color="#E5E5E5"> car but keep in mind that</font><font color="#CCCCCC"> this</font>

714
00:28:44,240 --> 00:28:50,600
is<font color="#CCCCCC"> wasum</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> wasum only has four types</font>

715
00:28:46,429 --> 00:28:53,090
so really that's integer so and then

716
00:28:50,600 --> 00:28:54,760
when it takes whatever string is pointed

717
00:28:53,090 --> 00:28:57,168
to<font color="#E5E5E5"> by</font><font color="#CCCCCC"> that and</font><font color="#E5E5E5"> executes it</font>

718
00:28:54,760 --> 00:28:59,330
<font color="#E5E5E5">so if we can find a way</font><font color="#CCCCCC"> to pass whatever</font>

719
00:28:57,169 --> 00:29:03,230
<font color="#E5E5E5">we want to this function then we win we</font>

720
00:28:59,330 --> 00:29:05,678
get XSS again<font color="#E5E5E5"> in order</font><font color="#CCCCCC"> for this to work</font>

721
00:29:03,230 --> 00:29:09,019
<font color="#CCCCCC">there's a few things that</font><font color="#E5E5E5"> have to hold</font>

722
00:29:05,679 --> 00:29:10,580
so it has to be used in script and run

723
00:29:09,019 --> 00:29:13,309
script has to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> already</font><font color="#CCCCCC"> in the program</font>

724
00:29:10,580 --> 00:29:15,620
that we're wanting to to attack<font color="#CCCCCC"> that</font>

725
00:29:13,309 --> 00:29:16,908
<font color="#E5E5E5">means it's in the function table there</font>

726
00:29:15,620 --> 00:29:19,279
has to be a<font color="#E5E5E5"> function pointer somewhere</font>

727
00:29:16,909 --> 00:29:21,529
<font color="#E5E5E5">else in</font><font color="#CCCCCC"> the program</font><font color="#E5E5E5"> that has the same</font>

728
00:29:19,279 --> 00:29:23,960
signature<font color="#E5E5E5"> as</font><font color="#CCCCCC"> on script and run script so</font>

729
00:29:21,529 --> 00:29:27,559
returns<font color="#CCCCCC"> nothing takes one in parameter</font>

730
00:29:23,960 --> 00:29:29,929
and we have to be able to<font color="#E5E5E5"> somehow</font>

731
00:29:27,559 --> 00:29:31,100
overwrite that<font color="#E5E5E5"> function pointer</font><font color="#CCCCCC"> we're</font>

732
00:29:29,929 --> 00:29:31,850
gonna show<font color="#CCCCCC"> you about</font><font color="#E5E5E5"> for overflow any</font>

733
00:29:31,100 --> 00:29:34,219
other trick you've got

734
00:29:31,850 --> 00:29:39,409
that can arbitrary<font color="#E5E5E5"> arbitrarily rewrite</font>

735
00:29:34,220 --> 00:29:42,590
some value will work<font color="#CCCCCC"> okay so here we</font>

736
00:29:39,410 --> 00:29:45,980
<font color="#CCCCCC">have</font><font color="#E5E5E5"> another example of yeah it's a good</font>

737
00:29:42,590 --> 00:29:49,610
<font color="#CCCCCC">meme right we have another example</font><font color="#E5E5E5"> for</font>

738
00:29:45,980 --> 00:29:51,580
our<font color="#E5E5E5"> overflow this look okay yeah this</font>

739
00:29:49,610 --> 00:29:54,830
looks pretty<font color="#CCCCCC"> good okay so the the</font>

740
00:29:51,580 --> 00:29:56,780
<font color="#CCCCCC">scenario here</font><font color="#E5E5E5"> is we've got</font><font color="#CCCCCC"> some kind of</font>

741
00:29:54,830 --> 00:29:58,399
a file processor which<font color="#E5E5E5"> is going to take</font>

742
00:29:56,780 --> 00:30:01,160
a file<font color="#E5E5E5"> and it's going</font><font color="#CCCCCC"> to run</font><font color="#E5E5E5"> some kind</font>

743
00:29:58,400 --> 00:30:03,500
<font color="#E5E5E5">of a processing algorithm on it so we</font>

744
00:30:01,160 --> 00:30:05,539
have this file processor struct and the

745
00:30:03,500 --> 00:30:07,039
struct is going to have a character

746
00:30:05,539 --> 00:30:08,960
array of 64 bytes and that's gonna

747
00:30:07,039 --> 00:30:11,629
<font color="#CCCCCC">represent the</font><font color="#E5E5E5"> file that we're uploading</font>

748
00:30:08,960 --> 00:30:13,130
<font color="#CCCCCC">it's got a file length and then it's got</font>

749
00:30:11,630 --> 00:30:14,539
<font color="#E5E5E5">a function pointer for the processing</font>

750
00:30:13,130 --> 00:30:15,530
algorithm because you know say there's a

751
00:30:14,539 --> 00:30:16,820
couple<font color="#CCCCCC"> of different processing</font>

752
00:30:15,530 --> 00:30:18,590
algorithms that<font color="#E5E5E5"> we might want to try to</font>

753
00:30:16,820 --> 00:30:19,970
run and so this is going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> let you</font>

754
00:30:18,590 --> 00:30:22,340
dynamically choose between which

755
00:30:19,970 --> 00:30:24,049
processing algorithm you want here<font color="#CCCCCC"> we</font>

756
00:30:22,340 --> 00:30:26,178
have our trigger function which is<font color="#E5E5E5"> just</font>

757
00:30:24,049 --> 00:30:27,980
going<font color="#E5E5E5"> to call the processing algorithm</font>

758
00:30:26,179 --> 00:30:29,330
and it's<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to pass the file to it so</font>

759
00:30:27,980 --> 00:30:31,669
it's just<font color="#E5E5E5"> gonna call that</font><font color="#CCCCCC"> function</font>

760
00:30:29,330 --> 00:30:33,590
pointer and here we have<font color="#E5E5E5"> our machine</font>

761
00:30:31,669 --> 00:30:35,600
learning blockchain processing algorithm

762
00:30:33,590 --> 00:30:37,129
the next iteration is<font color="#E5E5E5"> going to be IOT</font>

763
00:30:35,600 --> 00:30:41,059
it's a pretty cool<font color="#E5E5E5"> start if you guys</font>

764
00:30:37,130 --> 00:30:42,620
<font color="#E5E5E5">should</font><font color="#CCCCCC"> check it out</font><font color="#E5E5E5"> yeah and so here in</font>

765
00:30:41,059 --> 00:30:45,889
our in our<font color="#CCCCCC"> function that we're exporting</font>

766
00:30:42,620 --> 00:30:48,830
<font color="#E5E5E5">the overflow</font><font color="#CCCCCC"> we're declaring</font><font color="#E5E5E5"> a file</font>

767
00:30:45,890 --> 00:30:50,000
processor<font color="#E5E5E5"> we're setting the algorithm to</font>

768
00:30:48,830 --> 00:30:52,610
our machine learning<font color="#E5E5E5"> blockchain</font>

769
00:30:50,000 --> 00:30:55,400
algorithm and then here we're doing<font color="#E5E5E5"> a</font>

770
00:30:52,610 --> 00:30:57,320
mem copy<font color="#E5E5E5"> from the payload which is just</font>

771
00:30:55,400 --> 00:31:00,140
the parameter to this<font color="#CCCCCC"> function into the</font>

772
00:30:57,320 --> 00:31:01,460
file<font color="#E5E5E5"> and then as you can see we're mem</font>

773
00:31:00,140 --> 00:31:03,710
copying<font color="#CCCCCC"> 88 bytes</font>

774
00:31:01,460 --> 00:31:05,270
whereas the file is only 64 bytes<font color="#E5E5E5"> so</font>

775
00:31:03,710 --> 00:31:07,220
this is a<font color="#E5E5E5"> pretty classic buffer overflow</font>

776
00:31:05,270 --> 00:31:10,129
<font color="#E5E5E5">and then here this is important we</font><font color="#CCCCCC"> have</font>

777
00:31:07,220 --> 00:31:11,390
in script and run scripts<font color="#CCCCCC"> which is in</font>

778
00:31:10,130 --> 00:31:13,130
this<font color="#CCCCCC"> case it's just saying that oh</font>

779
00:31:11,390 --> 00:31:14,480
<font color="#E5E5E5">there's some kind of a log which</font><font color="#CCCCCC"> is</font>

780
00:31:13,130 --> 00:31:17,990
saying<font color="#CCCCCC"> congratulations you uploaded the</font>

781
00:31:14,480 --> 00:31:19,159
<font color="#E5E5E5">file correctly</font><font color="#CCCCCC"> but this</font><font color="#E5E5E5"> has</font><font color="#CCCCCC"> to be in</font>

782
00:31:17,990 --> 00:31:20,809
<font color="#E5E5E5">here because this is putting it in the</font>

783
00:31:19,159 --> 00:31:22,220
function table<font color="#CCCCCC"> and then finally we're</font>

784
00:31:20,809 --> 00:31:27,289
just going to<font color="#E5E5E5"> call our trigger on the</font>

785
00:31:22,220 --> 00:31:29,270
function pointer<font color="#E5E5E5"> so we have a payload</font>

786
00:31:27,289 --> 00:31:30,980
<font color="#CCCCCC">which we're going to</font><font color="#E5E5E5"> this is the file</font>

787
00:31:29,270 --> 00:31:34,280
<font color="#E5E5E5">that we're going to</font><font color="#CCCCCC"> upload</font><font color="#E5E5E5"> so we're</font>

788
00:31:30,980 --> 00:31:36,799
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> have alert XSS and then we're</font>

789
00:31:34,280 --> 00:31:38,178
<font color="#E5E5E5">gonna be filling in some some spaces</font>

790
00:31:36,799 --> 00:31:39,710
<font color="#CCCCCC">just to fill</font><font color="#E5E5E5"> out the rest of the 64</font>

791
00:31:38,179 --> 00:31:41,030
bytes<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then here we're filling out</font>

792
00:31:39,710 --> 00:31:42,590
the rest of<font color="#E5E5E5"> the struct we're filling out</font>

793
00:31:41,030 --> 00:31:43,580
<font color="#CCCCCC">four which is</font><font color="#E5E5E5"> going to</font><font color="#CCCCCC"> be the file</font>

794
00:31:42,590 --> 00:31:45,050
<font color="#E5E5E5">length</font>

795
00:31:43,580 --> 00:31:47,570
we're filling<font color="#CCCCCC"> out</font><font color="#E5E5E5"> this is the integer</font>

796
00:31:45,050 --> 00:31:52,760
<font color="#CCCCCC">five now as Justin may have</font><font color="#E5E5E5"> mentioned</font>

797
00:31:47,570 --> 00:31:55,280
<font color="#CCCCCC">earlier the file</font><font color="#E5E5E5"> the the indexes in the</font>

798
00:31:52,760 --> 00:31:57,440
function table<font color="#E5E5E5"> are constants not just</font>

799
00:31:55,280 --> 00:32:00,500
<font color="#E5E5E5">across execution all right but across</font>

800
00:31:57,440 --> 00:32:02,030
compliation<font color="#E5E5E5"> so I've compiled this on</font>

801
00:32:00,500 --> 00:32:04,070
three<font color="#E5E5E5"> different machines and every time</font>

802
00:32:02,030 --> 00:32:06,830
the index<font color="#E5E5E5"> of</font><font color="#CCCCCC"> em script and</font><font color="#E5E5E5"> run script is</font>

803
00:32:04,070 --> 00:32:09,260
index five so five is<font color="#CCCCCC"> the index</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> M</font>

804
00:32:06,830 --> 00:32:11,360
script and<font color="#E5E5E5"> run scripts and so hopefully</font>

805
00:32:09,260 --> 00:32:12,650
<font color="#E5E5E5">the our function pointer over</font><font color="#CCCCCC"> right</font>

806
00:32:11,360 --> 00:32:14,479
instead<font color="#CCCCCC"> of calling the machine learning</font>

807
00:32:12,650 --> 00:32:15,770
<font color="#E5E5E5">algorithm</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we wanted it's going to</font>

808
00:32:14,480 --> 00:32:18,950
call it<font color="#CCCCCC"> scooped and run script</font><font color="#E5E5E5"> and it's</font>

809
00:32:15,770 --> 00:32:21,830
going to<font color="#E5E5E5"> pass a load to it so here we</font>

810
00:32:18,950 --> 00:32:27,440
have another example<font color="#E5E5E5"> where we</font><font color="#CCCCCC"> can choose</font>

811
00:32:21,830 --> 00:32:29,750
<font color="#E5E5E5">our file</font><font color="#CCCCCC"> and that one cross</font><font color="#E5E5E5"> your fingers</font>

812
00:32:27,440 --> 00:32:42,730
for the demo gods<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we got excess</font>

813
00:32:29,750 --> 00:32:45,380
<font color="#CCCCCC">blocks so more details about this</font>

814
00:32:42,730 --> 00:32:47,480
there's no<font color="#E5E5E5"> reason we</font><font color="#CCCCCC"> have to go for the</font>

815
00:32:45,380 --> 00:32:48,950
<font color="#CCCCCC">xs/s here</font><font color="#E5E5E5"> we could instead have used</font>

816
00:32:47,480 --> 00:32:50,890
this to call some<font color="#E5E5E5"> other function that</font>

817
00:32:48,950 --> 00:32:53,480
<font color="#E5E5E5">was important</font><font color="#CCCCCC"> with values that we wanted</font>

818
00:32:50,890 --> 00:32:55,100
<font color="#E5E5E5">so if there was a function to change my</font>

819
00:32:53,480 --> 00:32:58,040
password or<font color="#CCCCCC"> something like that</font><font color="#E5E5E5"> we could</font>

820
00:32:55,100 --> 00:32:59,570
call that<font color="#E5E5E5"> and then give</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> the values we</font>

821
00:32:58,040 --> 00:33:04,790
wanted to then do what we wanted it to

822
00:32:59,570 --> 00:33:08,000
<font color="#E5E5E5">do</font><font color="#CCCCCC"> we can do</font><font color="#E5E5E5"> this to anything that is in</font>

823
00:33:04,790 --> 00:33:11,180
<font color="#E5E5E5">the function</font><font color="#CCCCCC"> table</font><font color="#E5E5E5"> and is you know has</font>

824
00:33:08,000 --> 00:33:15,650
the right<font color="#CCCCCC"> signature that is</font><font color="#E5E5E5"> something we</font>

825
00:33:11,180 --> 00:33:17,170
can<font color="#CCCCCC"> overflow</font><font color="#E5E5E5"> to so jonathan foot if</font>

826
00:33:15,650 --> 00:33:20,900
<font color="#E5E5E5">you're in here raise your hand</font>

827
00:33:17,170 --> 00:33:22,940
no okay so he made a blog post he works

828
00:33:20,900 --> 00:33:25,340
for fastly that talks about<font color="#E5E5E5"> some very</font>

829
00:33:22,940 --> 00:33:26,780
<font color="#E5E5E5">similar techniques he was doing instead</font>

830
00:33:25,340 --> 00:33:29,030
<font color="#CCCCCC">of</font><font color="#E5E5E5"> using buffer overflows to make his</font>

831
00:33:26,780 --> 00:33:31,639
<font color="#CCCCCC">overrides he was doing it via like type</font>

832
00:33:29,030 --> 00:33:34,610
confusion or<font color="#E5E5E5"> deserialization</font><font color="#CCCCCC"> type bugs</font>

833
00:33:31,640 --> 00:33:36,740
<font color="#E5E5E5">but it's the same endpoint so he's using</font>

834
00:33:34,610 --> 00:33:40,040
those kinds of tricks<font color="#CCCCCC"> to</font><font color="#E5E5E5"> end up with a</font>

835
00:33:36,740 --> 00:33:41,120
function pointer<font color="#E5E5E5"> that calls something he</font>

836
00:33:40,040 --> 00:33:43,490
wanted<font color="#E5E5E5"> to call instead of what the</font>

837
00:33:41,120 --> 00:33:44,870
program<font color="#CCCCCC"> was originally</font><font color="#E5E5E5"> gonna call</font><font color="#CCCCCC"> looked</font>

838
00:33:43,490 --> 00:33:48,800
<font color="#CCCCCC">like he was doing it</font><font color="#E5E5E5"> about the same time</font>

839
00:33:44,870 --> 00:33:50,360
as we were so<font color="#E5E5E5"> I know that all you see</font>

840
00:33:48,800 --> 00:33:51,860
people<font color="#E5E5E5"> don't care about XSS even though</font>

841
00:33:50,360 --> 00:33:54,889
<font color="#E5E5E5">I tried to explain how important it is</font>

842
00:33:51,860 --> 00:33:56,740
<font color="#CCCCCC">so we had to give</font><font color="#E5E5E5"> you some</font><font color="#CCCCCC"> RC here right</font>

843
00:33:54,890 --> 00:33:59,559
<font color="#E5E5E5">so</font>

844
00:33:56,740 --> 00:34:01,470
if the server<font color="#E5E5E5"> is running node and you</font><font color="#CCCCCC"> do</font>

845
00:33:59,559 --> 00:34:05,740
the exact same thing we just<font color="#E5E5E5"> showed</font><font color="#CCCCCC"> you</font>

846
00:34:01,470 --> 00:34:06,190
then what is XSS mean and node it means

847
00:34:05,740 --> 00:34:09,159
<font color="#CCCCCC">RCE</font>

848
00:34:06,190 --> 00:34:11,379
<font color="#E5E5E5">so we should be able to run whatever we</font>

849
00:34:09,159 --> 00:34:16,619
want on the<font color="#E5E5E5"> server if we have the same</font>

850
00:34:11,379 --> 00:34:21,190
policy in place<font color="#CCCCCC"> alright last example</font>

851
00:34:16,619 --> 00:34:23,139
<font color="#CCCCCC">it's the exact same file processing that</font>

852
00:34:21,190 --> 00:34:24,490
we have<font color="#CCCCCC"> before</font><font color="#E5E5E5"> only</font><font color="#CCCCCC"> now this the the</font>

853
00:34:23,139 --> 00:34:26,740
payload is slightly different<font color="#CCCCCC"> instead of</font>

854
00:34:24,489 --> 00:34:28,388
an XSS payload<font color="#E5E5E5"> now requiring we're</font>

855
00:34:26,739 --> 00:34:30,638
requiring a child<font color="#E5E5E5"> process and we're</font>

856
00:34:28,389 --> 00:34:32,260
going<font color="#E5E5E5"> to be executing some application</font>

857
00:34:30,639 --> 00:34:34,750
of our choice<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the rest of it is</font>

858
00:34:32,260 --> 00:34:40,179
<font color="#E5E5E5">identical</font><font color="#CCCCCC"> so we're gonna go</font><font color="#E5E5E5"> over</font><font color="#CCCCCC"> to my</font>

859
00:34:34,750 --> 00:34:42,000
<font color="#CCCCCC">virtual machine here see you got this</font>

860
00:34:40,179 --> 00:34:46,240
one

861
00:34:42,000 --> 00:34:51,159
this one<font color="#E5E5E5"> and we're gonna just run our</font>

862
00:34:46,239 --> 00:34:54,689
node server<font color="#E5E5E5"> go back over here hopefully</font>

863
00:34:51,159 --> 00:34:54,690
this is still the same IP address

864
00:34:56,579 --> 00:35:03,430
nope<font color="#E5E5E5"> let me try and come in together</font>

865
00:34:58,809 --> 00:35:05,680
<font color="#CCCCCC">there we go</font><font color="#E5E5E5"> okay so here's a file upload</font>

866
00:35:03,430 --> 00:35:07,118
<font color="#CCCCCC">so we're gonna</font><font color="#E5E5E5"> choose a file but now</font>

867
00:35:05,680 --> 00:35:08,740
we're we're<font color="#CCCCCC"> not just running this</font>

868
00:35:07,119 --> 00:35:10,950
locally in the browser we're loading

869
00:35:08,740 --> 00:35:18,220
this<font color="#E5E5E5"> to node and nodes going to run it</font>

870
00:35:10,950 --> 00:35:20,379
upload a file<font color="#CCCCCC"> and demo gods we're not</font>

871
00:35:18,220 --> 00:35:22,089
kind<font color="#CCCCCC"> to us gonna</font><font color="#E5E5E5"> try this one more time</font>

872
00:35:20,380 --> 00:35:33,839
<font color="#CCCCCC">if this is work I</font><font color="#E5E5E5"> have a recording of it</font>

873
00:35:22,089 --> 00:35:33,839
working this<font color="#E5E5E5"> one</font>

874
00:35:35,100 --> 00:35:48,660
yeah<font color="#E5E5E5"> all right so now you guys</font><font color="#CCCCCC"> have seen</font>

875
00:35:46,920 --> 00:35:51,540
<font color="#CCCCCC">some cool bugs</font><font color="#E5E5E5"> let's talk about what we</font>

876
00:35:48,660 --> 00:35:53,310
can<font color="#E5E5E5"> do about it</font><font color="#CCCCCC"> so one thing</font><font color="#E5E5E5"> we can</font>

877
00:35:51,540 --> 00:35:54,900
<font color="#E5E5E5">think</font><font color="#CCCCCC"> about is are there</font><font color="#E5E5E5"> things</font><font color="#CCCCCC"> that in</font>

878
00:35:53,310 --> 00:35:58,500
<font color="#E5E5E5">script</font><font color="#CCCCCC"> and could add to make everything</font>

879
00:35:54,900 --> 00:35:59,970
more safe<font color="#E5E5E5"> so there are things that are</font>

880
00:35:58,500 --> 00:36:01,920
kind of out of<font color="#E5E5E5"> their scope so for</font>

881
00:35:59,970 --> 00:36:03,569
example it's not doesn't<font color="#CCCCCC"> really make</font>

882
00:36:01,920 --> 00:36:05,190
sense<font color="#CCCCCC"> for them to look</font><font color="#E5E5E5"> at things like NX</font>

883
00:36:03,570 --> 00:36:06,540
and stack Canaries<font color="#E5E5E5"> and things like that</font>

884
00:36:05,190 --> 00:36:08,250
<font color="#CCCCCC">even though those are valid see</font>

885
00:36:06,540 --> 00:36:10,560
mitigations<font color="#E5E5E5"> they don't really apply in</font>

886
00:36:08,250 --> 00:36:13,280
the<font color="#CCCCCC"> Western world</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> the code and</font>

887
00:36:10,560 --> 00:36:15,299
the<font color="#CCCCCC"> data are already</font><font color="#E5E5E5"> not interleaved</font>

888
00:36:13,280 --> 00:36:17,340
<font color="#E5E5E5">some protections they could add</font>

889
00:36:15,300 --> 00:36:21,510
something like address space

890
00:36:17,340 --> 00:36:25,200
randomization<font color="#CCCCCC"> so</font><font color="#E5E5E5"> when we put things in</font>

891
00:36:21,510 --> 00:36:26,880
the function<font color="#CCCCCC"> table</font><font color="#E5E5E5"> the order that they</font>

892
00:36:25,200 --> 00:36:28,529
are in there is determined at compile

893
00:36:26,880 --> 00:36:30,000
time<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is bad from</font><font color="#E5E5E5"> its</font><font color="#CCCCCC"> curve</font>

894
00:36:28,530 --> 00:36:32,070
<font color="#E5E5E5">perspective because it means that</font><font color="#CCCCCC"> your</font>

895
00:36:30,000 --> 00:36:34,670
exploit will always work except when it

896
00:36:32,070 --> 00:36:37,110
<font color="#E5E5E5">doesn't like but it should always work</font>

897
00:36:34,670 --> 00:36:38,520
<font color="#CCCCCC">so there is no</font><font color="#E5E5E5"> reason they couldn't</font><font color="#CCCCCC"> make</font>

898
00:36:37,110 --> 00:36:40,320
it so<font color="#E5E5E5"> those values</font><font color="#CCCCCC"> there was a much</font>

899
00:36:38,520 --> 00:36:41,759
larger set of<font color="#E5E5E5"> values to choose from and</font>

900
00:36:40,320 --> 00:36:44,880
<font color="#E5E5E5">they</font><font color="#CCCCCC"> are randomly determined</font><font color="#E5E5E5"> at runtime</font>

901
00:36:41,760 --> 00:36:46,260
<font color="#E5E5E5">then you wouldn't be as easily</font><font color="#CCCCCC"> able to</font>

902
00:36:44,880 --> 00:36:49,410
mess with function pointers in the<font color="#E5E5E5"> way</font>

903
00:36:46,260 --> 00:36:51,000
that we're showing<font color="#CCCCCC"> it would be nice to</font>

904
00:36:49,410 --> 00:36:53,009
also<font color="#E5E5E5"> have some library hardening</font><font color="#CCCCCC"> I don't</font>

905
00:36:51,000 --> 00:36:55,290
know<font color="#E5E5E5"> that anyone uses</font><font color="#CCCCCC"> percent and in</font>

906
00:36:53,010 --> 00:36:56,790
format strings anymore<font color="#CCCCCC"> it looked</font><font color="#E5E5E5"> like</font>

907
00:36:55,290 --> 00:37:00,360
the<font color="#E5E5E5"> heap implementation that's being</font>

908
00:36:56,790 --> 00:37:03,480
used is kind<font color="#E5E5E5"> of an older heap that</font>

909
00:37:00,360 --> 00:37:05,250
<font color="#CCCCCC">doesn't have a lot of keep mitigations</font>

910
00:37:03,480 --> 00:37:08,040
in place<font color="#CCCCCC"> so there's some improvements</font>

911
00:37:05,250 --> 00:37:08,990
<font color="#E5E5E5">that could be made in inscripted things</font>

912
00:37:08,040 --> 00:37:11,070
that work<font color="#CCCCCC"> really well</font>

913
00:37:08,990 --> 00:37:12,330
<font color="#CCCCCC">control flow integrity so if you're not</font>

914
00:37:11,070 --> 00:37:14,700
familiar with control flow integrity

915
00:37:12,330 --> 00:37:17,040
<font color="#CCCCCC">there's a switch you</font><font color="#E5E5E5"> can I think it's</font>

916
00:37:14,700 --> 00:37:18,569
clang or<font color="#CCCCCC"> LLVM not sure where it happens</font>

917
00:37:17,040 --> 00:37:20,250
but you<font color="#E5E5E5"> can turn it on in there at</font>

918
00:37:18,570 --> 00:37:23,190
compile time<font color="#E5E5E5"> and what's going to happen</font>

919
00:37:20,250 --> 00:37:25,230
<font color="#CCCCCC">is it kind</font><font color="#E5E5E5"> of generates a mapping of all</font>

920
00:37:23,190 --> 00:37:27,360
of the possible flow<font color="#CCCCCC"> States between</font>

921
00:37:25,230 --> 00:37:28,410
different<font color="#CCCCCC"> functions in the program so</font>

922
00:37:27,360 --> 00:37:33,660
these are all the things<font color="#CCCCCC"> that</font><font color="#E5E5E5"> could ever</font>

923
00:37:28,410 --> 00:37:36,810
<font color="#E5E5E5">happen</font><font color="#CCCCCC"> and then if at runtime you</font><font color="#E5E5E5"> are</font>

924
00:37:33,660 --> 00:37:38,609
off the map<font color="#CCCCCC"> it just crashes</font><font color="#E5E5E5"> so if you</font>

925
00:37:36,810 --> 00:37:41,070
turn<font color="#CCCCCC"> that</font><font color="#E5E5E5"> on our</font><font color="#CCCCCC"> function pointer tricks</font>

926
00:37:38,610 --> 00:37:43,640
won't work<font color="#E5E5E5"> anymore</font>

927
00:37:41,070 --> 00:37:45,690
[Music]

928
00:37:43,640 --> 00:37:48,240
<font color="#CCCCCC">the other thing that's effective here</font>

929
00:37:45,690 --> 00:37:48,510
already is the way that<font color="#E5E5E5"> wasm works to</font>

930
00:37:48,240 --> 00:37:50,009
<font color="#CCCCCC">not</font>

931
00:37:48,510 --> 00:37:51,750
allow<font color="#CCCCCC"> us to jump into arbitrary things</font>

932
00:37:50,010 --> 00:37:53,460
<font color="#E5E5E5">it means that there's no way to do</font>

933
00:37:51,750 --> 00:37:56,270
<font color="#E5E5E5">something like</font><font color="#CCCCCC"> Rob the best we can do is</font>

934
00:37:53,460 --> 00:37:58,470
call individual functions one at a time

935
00:37:56,270 --> 00:38:01,590
so we<font color="#CCCCCC"> spent a</font><font color="#E5E5E5"> lot of time researching</font>

936
00:37:58,470 --> 00:38:03,540
<font color="#E5E5E5">this and</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> found that buried on the</font>

937
00:38:01,590 --> 00:38:05,790
security page of the web assembly design

938
00:38:03,540 --> 00:38:07,740
specification in the third paragraph in

939
00:38:05,790 --> 00:38:09,450
the fourth section<font color="#E5E5E5"> like they talked</font>

940
00:38:07,740 --> 00:38:10,950
about<font color="#CCCCCC"> oh and by the way we probably</font>

941
00:38:09,450 --> 00:38:12,569
<font color="#CCCCCC">didn't protect against this</font><font color="#E5E5E5"> and this and</font>

942
00:38:10,950 --> 00:38:15,089
<font color="#E5E5E5">this</font><font color="#CCCCCC"> and this of this</font><font color="#E5E5E5"> almost everything</font>

943
00:38:12,570 --> 00:38:16,920
we<font color="#CCCCCC"> just talked about in this talk</font><font color="#E5E5E5"> the</font>

944
00:38:15,090 --> 00:38:18,180
web assembly people<font color="#E5E5E5"> did talk about and</font>

945
00:38:16,920 --> 00:38:19,800
say yeah<font color="#CCCCCC"> we probably didn't defend</font>

946
00:38:18,180 --> 00:38:21,690
against these it<font color="#E5E5E5"> would be nice if</font><font color="#CCCCCC"> they</font>

947
00:38:19,800 --> 00:38:23,400
made<font color="#E5E5E5"> this much more obvious instead of a</font>

948
00:38:21,690 --> 00:38:25,890
buried paragraph that's<font color="#CCCCCC"> so long</font><font color="#E5E5E5"> and</font>

949
00:38:23,400 --> 00:38:27,810
wordy<font color="#E5E5E5"> like a nice bulleted list of you</font>

950
00:38:25,890 --> 00:38:31,620
still need to fix all of<font color="#E5E5E5"> these kinds of</font>

951
00:38:27,810 --> 00:38:34,049
<font color="#CCCCCC">C issues this is so I'd love</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> see them</font>

952
00:38:31,620 --> 00:38:35,460
fix that<font color="#E5E5E5"> if you're an application</font>

953
00:38:34,050 --> 00:38:38,160
developer and you want<font color="#CCCCCC"> to try to make</font>

954
00:38:35,460 --> 00:38:40,380
your<font color="#E5E5E5"> code safe the first step if you</font>

955
00:38:38,160 --> 00:38:43,350
<font color="#CCCCCC">cannot use in</font><font color="#E5E5E5"> script in run script you</font>

956
00:38:40,380 --> 00:38:45,510
will be much<font color="#E5E5E5"> better</font><font color="#CCCCCC"> off</font><font color="#E5E5E5"> if you have to</font>

957
00:38:43,350 --> 00:38:47,279
use it<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> to use it but</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> like</font>

958
00:38:45,510 --> 00:38:49,830
any language<font color="#E5E5E5"> where you have something</font>

959
00:38:47,280 --> 00:38:53,580
<font color="#E5E5E5">that's like eval</font><font color="#CCCCCC"> like you want to</font><font color="#E5E5E5"> avoid</font>

960
00:38:49,830 --> 00:38:55,380
that<font color="#CCCCCC"> if at</font><font color="#E5E5E5"> all possible even if as we've</font>

961
00:38:53,580 --> 00:38:56,850
shown even<font color="#E5E5E5"> if you don't have a user</font>

962
00:38:55,380 --> 00:38:58,710
<font color="#E5E5E5">tainted way to get into it if there's an</font>

963
00:38:56,850 --> 00:39:00,569
overflow we can still call<font color="#CCCCCC"> it if you</font>

964
00:38:58,710 --> 00:39:02,460
don't use it<font color="#CCCCCC"> in your code we can't call</font>

965
00:39:00,570 --> 00:39:07,200
it<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so then it's</font><font color="#CCCCCC"> not useful</font><font color="#E5E5E5"> as</font>

966
00:39:02,460 --> 00:39:09,120
attackers<font color="#E5E5E5"> the optimizer</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> sometimes</font>

967
00:39:07,200 --> 00:39:11,370
when we would do things they wouldn't

968
00:39:09,120 --> 00:39:13,200
work<font color="#E5E5E5"> and why did my demo stop working</font><font color="#CCCCCC"> oh</font>

969
00:39:11,370 --> 00:39:14,670
<font color="#E5E5E5">we compiled it with the optimizer turned</font>

970
00:39:13,200 --> 00:39:17,189
on which changed<font color="#E5E5E5"> the way everything</font>

971
00:39:14,670 --> 00:39:18,930
<font color="#E5E5E5">worked</font><font color="#CCCCCC"> in in some cases it removes</font>

972
00:39:17,190 --> 00:39:20,430
functions or in lines<font color="#CCCCCC"> number I</font><font color="#E5E5E5"> don't</font>

973
00:39:18,930 --> 00:39:21,779
<font color="#CCCCCC">even know what's going</font><font color="#E5E5E5"> on but there's</font><font color="#CCCCCC"> a</font>

974
00:39:20,430 --> 00:39:23,910
lot of<font color="#E5E5E5"> times when we turn the optimizer</font>

975
00:39:21,780 --> 00:39:25,920
on all the way some<font color="#CCCCCC"> of our stuff doesn't</font>

976
00:39:23,910 --> 00:39:27,629
<font color="#E5E5E5">work anymore so turn</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the optimizer</font>

977
00:39:25,920 --> 00:39:30,720
it's not on by default<font color="#CCCCCC"> but use it when</font>

978
00:39:27,630 --> 00:39:31,920
you compile<font color="#CCCCCC"> control flow integrity we</font>

979
00:39:30,720 --> 00:39:33,209
talked about<font color="#E5E5E5"> how that works</font><font color="#CCCCCC"> there's a</font>

980
00:39:31,920 --> 00:39:34,560
performance<font color="#CCCCCC"> penalty when you turn</font><font color="#E5E5E5"> that</font>

981
00:39:33,210 --> 00:39:35,700
<font color="#CCCCCC">on but depending</font><font color="#E5E5E5"> on what you're</font><font color="#CCCCCC"> doing</font>

982
00:39:34,560 --> 00:39:37,950
maybe you can handle that<font color="#CCCCCC"> maybe you</font>

983
00:39:35,700 --> 00:39:39,569
can't but<font color="#E5E5E5"> at the</font><font color="#CCCCCC"> end of the day even if</font>

984
00:39:37,950 --> 00:39:40,799
you do all those<font color="#E5E5E5"> things</font><font color="#CCCCCC"> there's still</font>

985
00:39:39,570 --> 00:39:42,720
plenty<font color="#E5E5E5"> of sea bugs that are going to</font>

986
00:39:40,800 --> 00:39:45,650
work<font color="#E5E5E5"> just fine</font><font color="#CCCCCC"> on your web assembly code</font>

987
00:39:42,720 --> 00:39:48,419
<font color="#E5E5E5">so you still have to fix those things as</font>

988
00:39:45,650 --> 00:39:49,400
an attacker<font color="#E5E5E5"> if you find one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> these and</font>

989
00:39:48,420 --> 00:39:51,690
you<font color="#E5E5E5"> want to do something interesting</font>

990
00:39:49,400 --> 00:39:53,610
<font color="#CCCCCC">we'll look forward script and run script</font>

991
00:39:51,690 --> 00:39:57,660
<font color="#CCCCCC">cuz that's where</font><font color="#E5E5E5"> you're</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> have the</font>

992
00:39:53,610 --> 00:39:59,130
most<font color="#E5E5E5"> fun if you don't see that you can</font>

993
00:39:57,660 --> 00:40:01,379
<font color="#E5E5E5">use overflows you can use other things</font>

994
00:39:59,130 --> 00:40:01,710
<font color="#CCCCCC">that</font><font color="#E5E5E5"> allow you to write arbitrarily</font><font color="#CCCCCC"> to</font>

995
00:40:01,380 --> 00:40:03,990
over

996
00:40:01,710 --> 00:40:05,640
right values and in the function

997
00:40:03,990 --> 00:40:07,799
pointers cases you can overwrite

998
00:40:05,640 --> 00:40:10,170
interesting things there<font color="#CCCCCC"> if you get XSS</font>

999
00:40:07,800 --> 00:40:13,680
<font color="#E5E5E5">you can turn back</font><font color="#CCCCCC"> around and modify what</font>

1000
00:40:10,170 --> 00:40:15,390
the<font color="#CCCCCC"> wagons</font><font color="#E5E5E5"> gonna</font><font color="#CCCCCC"> be and even if there's</font>

1001
00:40:13,680 --> 00:40:17,098
no<font color="#CCCCCC"> XSS</font><font color="#E5E5E5"> because they didn't use encrypt</font>

1002
00:40:15,390 --> 00:40:18,690
<font color="#E5E5E5">and</font><font color="#CCCCCC"> run script for example then you</font>

1003
00:40:17,099 --> 00:40:21,180
should still be<font color="#CCCCCC"> able to modify things in</font>

1004
00:40:18,690 --> 00:40:23,700
memory<font color="#CCCCCC"> that are useful</font><font color="#E5E5E5"> to you</font><font color="#CCCCCC"> and then</font>

1005
00:40:21,180 --> 00:40:28,200
if you're talking<font color="#E5E5E5"> about node then all</font>

1006
00:40:23,700 --> 00:40:30,868
<font color="#E5E5E5">these tricks turn into</font><font color="#CCCCCC"> RCE we have a</font>

1007
00:40:28,200 --> 00:40:34,279
<font color="#CCCCCC">whitepaper</font><font color="#E5E5E5"> security</font><font color="#CCCCCC"> chasman Azzam went</font>

1008
00:40:30,869 --> 00:40:37,310
in my Brian Tyler Jeff and myself

1009
00:40:34,280 --> 00:40:39,839
blackhat<font color="#E5E5E5"> site has kind of the version</font>

1010
00:40:37,310 --> 00:40:41,250
0.9 we have a<font color="#E5E5E5"> couple more things</font><font color="#CCCCCC"> we want</font>

1011
00:40:39,839 --> 00:40:46,560
to finish<font color="#E5E5E5"> and when we do we'll put that</font>

1012
00:40:41,250 --> 00:40:55,560
on<font color="#E5E5E5"> the NCC website so I'm Justin this</font><font color="#CCCCCC"> is</font>

1013
00:40:46,560 --> 00:40:57,540
<font color="#E5E5E5">Tyler thank you for coming if you</font>

1014
00:40:55,560 --> 00:41:00,359
<font color="#CCCCCC">enjoyed</font><font color="#E5E5E5"> our talk please fill out the</font>

1015
00:40:57,540 --> 00:41:04,680
survey<font color="#CCCCCC"> if you didn't employ enjoy a talk</font>

1016
00:41:00,359 --> 00:41:06,299
please don't fill out survey<font color="#CCCCCC"> our speaker</font>

1017
00:41:04,680 --> 00:41:07,410
liaison has told us that<font color="#E5E5E5"> we don't have</font>

1018
00:41:06,300 --> 00:41:09,180
to go to the<font color="#CCCCCC"> Rapp room because it's</font>

1019
00:41:07,410 --> 00:41:16,259
<font color="#CCCCCC">lunchtime</font><font color="#E5E5E5"> so we can just take questions</font>

1020
00:41:09,180 --> 00:41:21,960
<font color="#E5E5E5">here until we're done questions yes yeah</font>

1021
00:41:16,260 --> 00:41:23,970
sure so if I wanted to debug an x86

1022
00:41:21,960 --> 00:41:25,680
program I'd use like all<font color="#E5E5E5"> of your</font><font color="#CCCCCC"> eider</font>

1023
00:41:23,970 --> 00:41:28,109
<font color="#E5E5E5">or</font><font color="#CCCCCC"> something but</font><font color="#E5E5E5"> would I use for</font><font color="#CCCCCC"> web</font>

1024
00:41:25,680 --> 00:41:30,509
<font color="#CCCCCC">assembly there's actually</font><font color="#E5E5E5"> really good</font>

1025
00:41:28,109 --> 00:41:32,700
debugger support<font color="#E5E5E5"> in browsers</font><font color="#CCCCCC"> now so both</font>

1026
00:41:30,510 --> 00:41:34,800
Chrome and Firefox<font color="#CCCCCC"> if you go into</font>

1027
00:41:32,700 --> 00:41:35,819
developer mode<font color="#E5E5E5"> sorry repeat the question</font>

1028
00:41:34,800 --> 00:41:38,130
you<font color="#E5E5E5"> wanted to know how to debug this</font>

1029
00:41:35,820 --> 00:41:39,839
stuff<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> go into developer mode you</font>

1030
00:41:38,130 --> 00:41:43,950
can<font color="#CCCCCC"> actually see</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> of the web assembly</font>

1031
00:41:39,839 --> 00:41:46,470
instructions<font color="#E5E5E5"> in</font><font color="#CCCCCC"> S format which is what</font>

1032
00:41:43,950 --> 00:41:47,879
we were<font color="#E5E5E5"> showing a mess and you can like</font>

1033
00:41:46,470 --> 00:41:49,439
step through you can set breakpoints all

1034
00:41:47,880 --> 00:41:51,030
that stuff in chrome<font color="#CCCCCC"> you can actually</font>

1035
00:41:49,440 --> 00:41:52,530
see the values that are on the stack at

1036
00:41:51,030 --> 00:41:56,970
any given time it's pretty<font color="#E5E5E5"> cool works</font>

1037
00:41:52,530 --> 00:41:58,740
<font color="#E5E5E5">really well thank you yeah what would</font>

1038
00:41:56,970 --> 00:42:00,450
you want<font color="#CCCCCC"> people implementing</font><font color="#E5E5E5"> other</font>

1039
00:41:58,740 --> 00:42:02,279
programming languages on top of web

1040
00:42:00,450 --> 00:42:04,950
assembly to know or do you<font color="#CCCCCC"> think of that</font>

1041
00:42:02,280 --> 00:42:07,170
<font color="#E5E5E5">I could only hear half of that a little</font>

1042
00:42:04,950 --> 00:42:09,629
louder<font color="#E5E5E5"> sorry</font><font color="#CCCCCC"> what would you</font><font color="#E5E5E5"> want other</font>

1043
00:42:07,170 --> 00:42:12,030
<font color="#E5E5E5">people implementing other programming</font>

1044
00:42:09,630 --> 00:42:13,380
languages than C on top<font color="#E5E5E5"> of</font><font color="#CCCCCC"> web is holy</font>

1045
00:42:12,030 --> 00:42:15,180
what would you want<font color="#E5E5E5"> them to know or</font>

1046
00:42:13,380 --> 00:42:17,130
include<font color="#E5E5E5"> okay so</font>

1047
00:42:15,180 --> 00:42:20,609
if<font color="#E5E5E5"> your if your language</font><font color="#CCCCCC"> is already</font>

1048
00:42:17,130 --> 00:42:21,540
memory safe then<font color="#E5E5E5"> we've</font><font color="#CCCCCC"> like a lot</font><font color="#E5E5E5"> of the</font>

1049
00:42:20,610 --> 00:42:23,490
things<font color="#E5E5E5"> that we talked about aren't</font>

1050
00:42:21,540 --> 00:42:24,870
really going to apply you need<font color="#E5E5E5"> to think</font>

1051
00:42:23,490 --> 00:42:26,640
about all the<font color="#CCCCCC"> existing known</font>

1052
00:42:24,870 --> 00:42:28,830
vulnerabilities in the language that<font color="#CCCCCC"> you</font>

1053
00:42:26,640 --> 00:42:30,839
have in its kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> base form and then</font>

1054
00:42:28,830 --> 00:42:33,090
for each<font color="#CCCCCC"> one just</font><font color="#E5E5E5"> think about how</font><font color="#CCCCCC"> does</font>

1055
00:42:30,840 --> 00:42:34,800
this apply<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the architecture of web</font>

1056
00:42:33,090 --> 00:42:36,330
<font color="#E5E5E5">assembly is there something about web</font>

1057
00:42:34,800 --> 00:42:37,680
assembly that makes these

1058
00:42:36,330 --> 00:42:38,759
vulnerabilities not work anymore is

1059
00:42:37,680 --> 00:42:40,740
there something that makes them<font color="#CCCCCC"> more</font>

1060
00:42:38,760 --> 00:42:42,930
prevalent because<font color="#E5E5E5"> of whatever is going</font>

1061
00:42:40,740 --> 00:42:44,819
<font color="#E5E5E5">on</font><font color="#CCCCCC"> I think things like</font><font color="#E5E5E5"> the serialization</font>

1062
00:42:42,930 --> 00:42:46,169
<font color="#E5E5E5">will probably still be</font><font color="#CCCCCC"> an issue</font><font color="#E5E5E5"> I don't</font>

1063
00:42:44,820 --> 00:42:48,090
know if there's something<font color="#CCCCCC"> as a language</font>

1064
00:42:46,170 --> 00:42:49,170
developer you<font color="#CCCCCC"> can do about that</font><font color="#E5E5E5"> but</font>

1065
00:42:48,090 --> 00:42:50,160
it'll<font color="#E5E5E5"> be interesting to think</font><font color="#CCCCCC"> about it's</font>

1066
00:42:49,170 --> 00:42:54,930
not<font color="#E5E5E5"> something I've</font><font color="#CCCCCC"> thought about</font><font color="#E5E5E5"> yet</font>

1067
00:42:50,160 --> 00:42:57,359
<font color="#CCCCCC">Thanks Thanks yeah I I'm totally</font><font color="#E5E5E5"> missed</font>

1068
00:42:54,930 --> 00:42:58,770
<font color="#E5E5E5">during your demo</font><font color="#CCCCCC"> when you're uploading</font>

1069
00:42:57,360 --> 00:43:00,990
the file are you just<font color="#E5E5E5"> reading the file</font>

1070
00:42:58,770 --> 00:43:02,520
contents into<font color="#E5E5E5"> that proper yeah we were</font>

1071
00:43:00,990 --> 00:43:06,990
copying<font color="#E5E5E5"> the file</font><font color="#CCCCCC"> contents what they do</font>

1072
00:43:02,520 --> 00:43:08,250
it into a string yeah<font color="#E5E5E5"> after we're done</font>

1073
00:43:06,990 --> 00:43:14,129
up<font color="#CCCCCC"> here if you</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> to see the code we</font>

1074
00:43:08,250 --> 00:43:14,580
can just show you thank you hi<font color="#CCCCCC"> great</font>

1075
00:43:14,130 --> 00:43:17,040
talk

1076
00:43:14,580 --> 00:43:20,069
maybe I missed it though<font color="#CCCCCC"> a little louder</font>

1077
00:43:17,040 --> 00:43:22,890
<font color="#E5E5E5">no maybe I missed it yeah but what</font>

1078
00:43:20,070 --> 00:43:24,840
happens when you go<font color="#CCCCCC"> pass the local</font>

1079
00:43:22,890 --> 00:43:26,879
variables like<font color="#E5E5E5"> what do you overwrite</font><font color="#CCCCCC"> an</font>

1080
00:43:24,840 --> 00:43:30,600
in your memory or can you can you<font color="#CCCCCC"> even</font>

1081
00:43:26,880 --> 00:43:34,410
do that<font color="#CCCCCC"> so the locals can be overwritten</font>

1082
00:43:30,600 --> 00:43:37,319
<font color="#CCCCCC">I think I can't remember</font><font color="#E5E5E5"> how well it</font>

1083
00:43:34,410 --> 00:43:38,430
depends on<font color="#E5E5E5"> the compiler</font><font color="#CCCCCC"> so each</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> is</font>

1084
00:43:37,320 --> 00:43:39,810
<font color="#CCCCCC">gonna be a little bit different in how</font>

1085
00:43:38,430 --> 00:43:41,669
<font color="#CCCCCC">they implement the various like data</font>

1086
00:43:39,810 --> 00:43:43,620
structures<font color="#CCCCCC"> and stuff and see but there</font>

1087
00:43:41,670 --> 00:43:45,330
are other<font color="#E5E5E5"> things like outside of</font><font color="#CCCCCC"> your</font>

1088
00:43:43,620 --> 00:43:47,880
<font color="#E5E5E5">local variables that could be potential</font>

1089
00:43:45,330 --> 00:43:51,060
targets<font color="#E5E5E5"> depending on the</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> compiler</font>

1090
00:43:47,880 --> 00:43:52,710
<font color="#E5E5E5">yeah so like we</font><font color="#CCCCCC"> mentioned we earlier we</font>

1091
00:43:51,060 --> 00:43:54,660
were able<font color="#E5E5E5"> to overwrite literals</font><font color="#CCCCCC"> which</font>

1092
00:43:52,710 --> 00:43:55,680
normally like in other languages usually

1093
00:43:54,660 --> 00:43:57,569
<font color="#CCCCCC">you can't do that</font><font color="#E5E5E5"> because there's</font>

1094
00:43:55,680 --> 00:43:59,069
somewhere<font color="#CCCCCC"> else right but because of the</font>

1095
00:43:57,570 --> 00:44:00,420
way<font color="#CCCCCC"> they was laid out</font><font color="#E5E5E5"> at that</font><font color="#CCCCCC"> time it</font>

1096
00:43:59,070 --> 00:44:03,960
was working<font color="#E5E5E5"> because we could go find it</font>

1097
00:44:00,420 --> 00:44:05,490
<font color="#E5E5E5">now it doesn't work so a good place for</font>

1098
00:44:03,960 --> 00:44:08,160
you to<font color="#E5E5E5"> start would be to look at</font><font color="#CCCCCC"> that</font>

1099
00:44:05,490 --> 00:44:10,649
<font color="#E5E5E5">PDF that we linked because that lays out</font>

1100
00:44:08,160 --> 00:44:12,029
they have the<font color="#E5E5E5"> entire file format as</font><font color="#CCCCCC"> it</font>

1101
00:44:10,650 --> 00:44:13,350
exists currently<font color="#E5E5E5"> and like where the</font>

1102
00:44:12,030 --> 00:44:16,020
different sections are and how they<font color="#CCCCCC"> work</font>

1103
00:44:13,350 --> 00:44:18,600
<font color="#CCCCCC">so that would be a</font><font color="#E5E5E5"> good place to think</font>

1104
00:44:16,020 --> 00:44:23,009
about that but at the<font color="#CCCCCC"> end</font><font color="#E5E5E5"> of the day a</font>

1105
00:44:18,600 --> 00:44:25,950
lot of<font color="#E5E5E5"> that stuff is only in the web</font>

1106
00:44:23,010 --> 00:44:27,750
assembly instructions section<font color="#E5E5E5"> and so you</font>

1107
00:44:25,950 --> 00:44:28,250
can't get to it<font color="#E5E5E5"> from linear memory</font>

1108
00:44:27,750 --> 00:44:29,120
<font color="#E5E5E5">because</font><font color="#CCCCCC"> lean</font>

1109
00:44:28,250 --> 00:44:31,700
memory is<font color="#E5E5E5"> the only thing we could</font>

1110
00:44:29,120 --> 00:44:34,100
overflow<font color="#E5E5E5"> so I wish I had a better</font><font color="#CCCCCC"> answer</font>

1111
00:44:31,700 --> 00:44:37,509
for<font color="#E5E5E5"> you but the</font><font color="#CCCCCC"> answer is one it depends</font>

1112
00:44:34,100 --> 00:44:39,500
<font color="#CCCCCC">- it's probably</font><font color="#E5E5E5"> gonna change</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> three</font>

1113
00:44:37,510 --> 00:44:41,270
<font color="#CCCCCC">there could</font><font color="#E5E5E5"> still be interesting things</font>

1114
00:44:39,500 --> 00:44:43,610
<font color="#CCCCCC">like that we don't</font><font color="#E5E5E5"> know yet</font><font color="#CCCCCC"> right so</font>

1115
00:44:41,270 --> 00:44:45,680
<font color="#CCCCCC">does that</font><font color="#E5E5E5"> also mean that there's a point</font>

1116
00:44:43,610 --> 00:44:48,680
<font color="#E5E5E5">in having some kind of stack</font><font color="#CCCCCC"> Qunari</font>

1117
00:44:45,680 --> 00:44:50,330
equivalent potentially<font color="#E5E5E5"> as in you know</font>

1118
00:44:48,680 --> 00:44:53,379
you would<font color="#CCCCCC"> want to have</font><font color="#E5E5E5"> boundaries</font>

1119
00:44:50,330 --> 00:44:57,680
between your<font color="#CCCCCC"> various linear memory</font>

1120
00:44:53,380 --> 00:44:58,940
pieces<font color="#E5E5E5"> or sections</font><font color="#CCCCCC"> yeah maybe I don't</font>

1121
00:44:57,680 --> 00:45:01,279
<font color="#CCCCCC">know how</font><font color="#E5E5E5"> hard</font><font color="#CCCCCC"> that would be</font><font color="#E5E5E5"> for them to</font>

1122
00:44:58,940 --> 00:45:03,050
<font color="#E5E5E5">do but yeah there's maybe you also have</font>

1123
00:45:01,280 --> 00:45:04,370
to keep<font color="#E5E5E5"> in</font><font color="#CCCCCC"> mind</font><font color="#E5E5E5"> that we're doing web</font>

1124
00:45:03,050 --> 00:45:06,110
assemblies supposed to be really general

1125
00:45:04,370 --> 00:45:07,759
and so<font color="#E5E5E5"> maybe something we do for</font><font color="#CCCCCC"> that</font>

1126
00:45:06,110 --> 00:45:08,870
works well<font color="#E5E5E5"> and see but then it's gonna</font>

1127
00:45:07,760 --> 00:45:15,380
<font color="#CCCCCC">make it harder for</font><font color="#E5E5E5"> them</font><font color="#CCCCCC"> to do things</font>

1128
00:45:08,870 --> 00:45:17,120
<font color="#CCCCCC">about the languages so</font><font color="#E5E5E5"> thanks all</font><font color="#CCCCCC"> right</font>

1129
00:45:15,380 --> 00:45:18,980
<font color="#E5E5E5">no other questions thanks sweet thanks</font>

1130
00:45:17,120 --> 00:45:19,259
guys appreciate it

1131
00:45:18,980 --> 00:45:22,159
[Applause]

1132
00:45:19,260 --> 00:45:22,159
[Music]

