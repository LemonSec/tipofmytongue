1
00:00:00,030 --> 00:00:04,470
thank you for<font color="#E5E5E5"> joining our talk after</font>

2
00:00:01,829 --> 00:00:08,250
lunch<font color="#CCCCCC"> hope you have good food and</font><font color="#E5E5E5"> good</font>

3
00:00:04,470 --> 00:00:10,980
time at blackhat<font color="#CCCCCC"> my name is Alex we also</font>

4
00:00:08,250 --> 00:00:12,990
have here<font color="#CCCCCC"> Mick</font><font color="#E5E5E5"> and Jesse they are from</font>

5
00:00:10,980 --> 00:00:16,170
<font color="#E5E5E5">Eclipse iam doing firm and</font><font color="#CCCCCC"> harder</font>

6
00:00:12,990 --> 00:00:17,670
security<font color="#E5E5E5"> as a result of our daily work</font>

7
00:00:16,170 --> 00:00:21,000
we were releasing the research quite

8
00:00:17,670 --> 00:00:24,150
<font color="#E5E5E5">often in this area for them in couple of</font>

9
00:00:21,000 --> 00:00:26,580
<font color="#CCCCCC">recent example so like where is the</font>

10
00:00:24,150 --> 00:00:28,439
system from<font color="#CCCCCC"> runner abilities in Super</font>

11
00:00:26,580 --> 00:00:31,288
<font color="#CCCCCC">Micro pretty interesting us and</font><font color="#E5E5E5"> from</font>

12
00:00:28,439 --> 00:00:33,270
updates<font color="#E5E5E5"> we releasing the even made</font>

13
00:00:31,289 --> 00:00:36,989
attack without open in the case or use

14
00:00:33,270 --> 00:00:38,820
<font color="#CCCCCC">beauty backup abilities</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> we release</font>

15
00:00:36,989 --> 00:00:41,218
it like how to apply<font color="#CCCCCC"> Spector in our</font>

16
00:00:38,820 --> 00:00:43,260
ability to the system<font color="#E5E5E5"> former and special</font>

17
00:00:41,219 --> 00:00:46,469
to the SMM runtime part of the system

18
00:00:43,260 --> 00:00:49,940
<font color="#CCCCCC">for month</font><font color="#E5E5E5"> but today here we want to</font>

19
00:00:46,469 --> 00:00:52,469
<font color="#CCCCCC">present some really new research from us</font>

20
00:00:49,940 --> 00:00:55,649
<font color="#CCCCCC">remote that</font><font color="#E5E5E5"> I can system from man in</font>

21
00:00:52,469 --> 00:00:57,690
this research<font color="#E5E5E5"> we will focus on what kind</font>

22
00:00:55,649 --> 00:00:59,609
of new<font color="#CCCCCC"> capability system from</font><font color="#E5E5E5"> I have and</font>

23
00:00:57,690 --> 00:01:02,968
what<font color="#E5E5E5"> kind of new risk this capability</font>

24
00:00:59,609 --> 00:01:06,270
<font color="#CCCCCC">adds to the system</font><font color="#E5E5E5"> from already</font><font color="#CCCCCC"> stock</font><font color="#E5E5E5"> we</font>

25
00:01:02,969 --> 00:01:09,150
will<font color="#CCCCCC"> go over over the list of the remote</font>

26
00:01:06,270 --> 00:01:12,210
vectors as an industry<font color="#CCCCCC"> problem with</font>

27
00:01:09,150 --> 00:01:15,390
example from the<font color="#CCCCCC"> US research and our own</font>

28
00:01:12,210 --> 00:01:17,850
<font color="#E5E5E5">research done in this area there will go</font>

29
00:01:15,390 --> 00:01:20,729
details about the executive<font color="#E5E5E5"> findings</font>

30
00:01:17,850 --> 00:01:24,539
which we have in the<font color="#CCCCCC"> system from inner</font>

31
00:01:20,729 --> 00:01:26,729
<font color="#CCCCCC">mode vectors go or exploit having the</font>

32
00:01:24,540 --> 00:01:29,070
demo<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the exploit and</font><font color="#CCCCCC"> we will talk a</font>

33
00:01:26,729 --> 00:01:31,439
little<font color="#E5E5E5"> bit about mitigations and the</font>

34
00:01:29,070 --> 00:01:34,860
<font color="#E5E5E5">detection capability switch which</font><font color="#CCCCCC"> is we</font>

35
00:01:31,439 --> 00:01:37,439
can<font color="#E5E5E5"> apply</font><font color="#CCCCCC"> for this</font><font color="#E5E5E5"> type of problem</font><font color="#CCCCCC"> if</font>

36
00:01:34,860 --> 00:01:39,570
you<font color="#E5E5E5"> think</font><font color="#CCCCCC"> about technology</font><font color="#E5E5E5"> stack there</font>

37
00:01:37,439 --> 00:01:42,570
is a bunch<font color="#E5E5E5"> of good application running</font>

38
00:01:39,570 --> 00:01:44,970
in<font color="#E5E5E5"> a user mode like browsers office and</font>

39
00:01:42,570 --> 00:01:48,029
other<font color="#E5E5E5"> applications and then you have the</font>

40
00:01:44,970 --> 00:01:49,950
kernel<font color="#CCCCCC"> mode or incurring 0</font><font color="#E5E5E5"> when you have</font>

41
00:01:48,030 --> 00:01:51,600
the<font color="#E5E5E5"> operation system</font><font color="#CCCCCC"> and drivers which</font>

42
00:01:49,950 --> 00:01:54,270
is<font color="#E5E5E5"> managed for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> resources to provide</font>

43
00:01:51,600 --> 00:01:56,640
the<font color="#CCCCCC"> the boot there are the</font><font color="#E5E5E5"> capabilities</font>

44
00:01:54,270 --> 00:01:58,770
to<font color="#E5E5E5"> the application and they have a lot</font>

45
00:01:56,640 --> 00:02:00,570
of<font color="#E5E5E5"> good security here we have like</font>

46
00:01:58,770 --> 00:02:02,969
internal<font color="#E5E5E5"> teams which is validating these</font>

47
00:02:00,570 --> 00:02:06,559
products we have the bug<font color="#CCCCCC"> bounty program</font>

48
00:02:02,969 --> 00:02:10,799
we have a bunch of exploit prevention

49
00:02:06,560 --> 00:02:12,660
capabilities like SEFI on<font color="#E5E5E5"> our other</font>

50
00:02:10,800 --> 00:02:13,200
capabilities which<font color="#CCCCCC"> has recent years</font><font color="#E5E5E5"> who</font>

51
00:02:12,660 --> 00:02:17,579
<font color="#CCCCCC">is</font>

52
00:02:13,200 --> 00:02:20,040
<font color="#CCCCCC">to this</font><font color="#E5E5E5"> to this step</font><font color="#CCCCCC"> 2 the</font><font color="#E5E5E5"> user modern</font>

53
00:02:17,580 --> 00:02:23,099
<font color="#CCCCCC">kernel which is</font><font color="#E5E5E5"> raising the bar for</font><font color="#CCCCCC"> the</font>

54
00:02:20,040 --> 00:02:25,079
attacker for attacker to compromise the

55
00:02:23,099 --> 00:02:27,629
system<font color="#CCCCCC"> they</font><font color="#E5E5E5"> Nitin when the remote code</font>

56
00:02:25,080 --> 00:02:29,910
execution then they<font color="#E5E5E5"> excape from sandbox</font>

57
00:02:27,629 --> 00:02:31,768
and<font color="#E5E5E5"> on local</font><font color="#CCCCCC"> field escalation</font><font color="#E5E5E5"> tie a</font>

58
00:02:29,910 --> 00:02:33,750
bunch of exploits so pretty pretty

59
00:02:31,769 --> 00:02:37,650
complicated work<font color="#E5E5E5"> to compromise the</font>

60
00:02:33,750 --> 00:02:39,390
system<font color="#E5E5E5"> and pretty expensive so</font><font color="#CCCCCC"> but there</font>

61
00:02:37,650 --> 00:02:43,290
is another part<font color="#E5E5E5"> of the technology which</font>

62
00:02:39,390 --> 00:02:45,738
is hardware from<font color="#E5E5E5"> server</font><font color="#CCCCCC"> to desktop to to</font>

63
00:02:43,290 --> 00:02:48,230
a network gear ATM machine<font color="#CCCCCC"> Adi system so</font>

64
00:02:45,739 --> 00:02:50,430
<font color="#CCCCCC">there</font><font color="#E5E5E5"> is a bunch of card bra and</font>

65
00:02:48,230 --> 00:02:55,380
historically we think about<font color="#CCCCCC"> Hardware in</font>

66
00:02:50,430 --> 00:02:58,980
<font color="#CCCCCC">monolithic trusted</font><font color="#E5E5E5"> block but recent</font>

67
00:02:55,380 --> 00:03:00,720
recent<font color="#E5E5E5"> decades</font><font color="#CCCCCC"> last decades</font><font color="#E5E5E5"> the</font>

68
00:02:58,980 --> 00:03:02,760
<font color="#E5E5E5">situation is change it harder become</font>

69
00:03:00,720 --> 00:03:05,190
much more complicated<font color="#CCCCCC"> so this is the</font>

70
00:03:02,760 --> 00:03:08,220
lower end example of the server<font color="#E5E5E5"> a</font>

71
00:03:05,190 --> 00:03:10,380
<font color="#E5E5E5">motherboard which has between 10 10 and</font>

72
00:03:08,220 --> 00:03:12,269
<font color="#E5E5E5">20 different component are called</font>

73
00:03:10,380 --> 00:03:14,010
controllers<font color="#E5E5E5"> and these components</font>

74
00:03:12,269 --> 00:03:17,370
<font color="#CCCCCC">communicate which has over the buses</font>

75
00:03:14,010 --> 00:03:19,290
which was designed<font color="#E5E5E5"> 20 years ago and that</font>

76
00:03:17,370 --> 00:03:22,350
these components<font color="#CCCCCC"> may run a software</font>

77
00:03:19,290 --> 00:03:25,138
<font color="#E5E5E5">called the firmer domain to manage to</font>

78
00:03:22,350 --> 00:03:28,138
management capabilities of this device

79
00:03:25,139 --> 00:03:30,060
of this controller this<font color="#CCCCCC"> former</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> be</font>

80
00:03:28,139 --> 00:03:31,980
from different<font color="#E5E5E5"> vendors the components</font>

81
00:03:30,060 --> 00:03:35,819
<font color="#E5E5E5">can be from different</font><font color="#CCCCCC"> vendors</font><font color="#E5E5E5"> it can be</font>

82
00:03:31,980 --> 00:03:39,720
really old<font color="#E5E5E5"> and the code was may not be</font>

83
00:03:35,819 --> 00:03:41,940
updated long time<font color="#CCCCCC"> this may</font><font color="#E5E5E5"> be compile it</font>

84
00:03:39,720 --> 00:03:44,280
<font color="#E5E5E5">with all compilers which may have a</font>

85
00:03:41,940 --> 00:03:46,290
bunch of which may not have the exploit

86
00:03:44,280 --> 00:03:48,389
prevention capabilities<font color="#E5E5E5"> like</font><font color="#CCCCCC"> in some</font><font color="#E5E5E5"> of</font>

87
00:03:46,290 --> 00:03:50,489
the example could<font color="#E5E5E5"> build stack executable</font>

88
00:03:48,389 --> 00:03:55,590
some of the example there is<font color="#CCCCCC"> no as</font><font color="#E5E5E5"> where</font>

89
00:03:50,489 --> 00:03:57,900
NDP and<font color="#E5E5E5"> so and so on in many cases this</font>

90
00:03:55,590 --> 00:03:59,459
framer may not be<font color="#CCCCCC"> updatable so if not</font>

91
00:03:57,900 --> 00:04:01,560
update the<font color="#E5E5E5"> from and these devices</font><font color="#CCCCCC"> so</font>

92
00:03:59,459 --> 00:04:03,380
<font color="#E5E5E5">this one are vulnerabilities there that</font>

93
00:04:01,560 --> 00:04:05,910
will live forever<font color="#CCCCCC"> and there of course</font>

94
00:04:03,380 --> 00:04:08,030
<font color="#E5E5E5">many vulnerabilities and that components</font>

95
00:04:05,910 --> 00:04:11,250
because the<font color="#CCCCCC"> code is not updating</font><font color="#E5E5E5"> often</font>

96
00:04:08,030 --> 00:04:12,750
<font color="#E5E5E5">in some cases if it is</font><font color="#CCCCCC"> updatable the</font>

97
00:04:11,250 --> 00:04:14,970
update may not be silent<font color="#CCCCCC"> so you</font>

98
00:04:12,750 --> 00:04:17,789
basically can use legitimate interface

99
00:04:14,970 --> 00:04:21,450
to update the firm on that devices<font color="#CCCCCC"> and</font>

100
00:04:17,789 --> 00:04:23,199
attacker can do it without any any

101
00:04:21,450 --> 00:04:26,378
problems

102
00:04:23,199 --> 00:04:29,050
and<font color="#E5E5E5"> another last point is that</font><font color="#CCCCCC"> in many</font>

103
00:04:26,379 --> 00:04:31,870
<font color="#E5E5E5">of this</font><font color="#CCCCCC"> Fromer</font><font color="#E5E5E5"> there's no read interface</font>

104
00:04:29,050 --> 00:04:33,729
so you cannot<font color="#CCCCCC"> make a monetary no you</font>

105
00:04:31,870 --> 00:04:36,189
cannot monitor<font color="#E5E5E5"> this device</font><font color="#CCCCCC"> at at the</font>

106
00:04:33,729 --> 00:04:38,919
runtime<font color="#E5E5E5"> so that's showing</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> them</font>

107
00:04:36,189 --> 00:04:41,229
<font color="#CCCCCC">overall</font><font color="#E5E5E5"> the problem about</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> formula</font>

108
00:04:38,919 --> 00:04:43,479
card<font color="#E5E5E5"> for the modern system as a blind</font>

109
00:04:41,229 --> 00:04:46,300
<font color="#E5E5E5">spot</font><font color="#CCCCCC"> as an area when the security</font>

110
00:04:43,479 --> 00:04:49,620
researchers<font color="#E5E5E5"> should get more</font><font color="#CCCCCC"> and more</font>

111
00:04:46,300 --> 00:04:52,509
attention<font color="#E5E5E5"> and if</font><font color="#CCCCCC"> we're talking about</font>

112
00:04:49,620 --> 00:04:54,669
<font color="#CCCCCC">what kind of hardened former vectors of</font>

113
00:04:52,509 --> 00:04:57,159
attack we<font color="#CCCCCC"> have we can split it for two</font>

114
00:04:54,669 --> 00:04:59,680
categories one<font color="#CCCCCC"> is which is require</font>

115
00:04:57,159 --> 00:05:02,139
physical access like<font color="#E5E5E5"> yo meta tag which</font>

116
00:04:59,680 --> 00:05:04,330
was<font color="#E5E5E5"> released in a</font><font color="#CCCCCC"> couple weeks ago and</font>

117
00:05:02,139 --> 00:05:05,710
to demonstrate how what<font color="#E5E5E5"> you can do with</font>

118
00:05:04,330 --> 00:05:06,758
<font color="#E5E5E5">five minutes of the access to</font><font color="#CCCCCC"> the</font>

119
00:05:05,710 --> 00:05:09,370
enterprise<font color="#E5E5E5"> laptop</font>

120
00:05:06,759 --> 00:05:13,180
so can basically<font color="#E5E5E5"> in fact that was there</font>

121
00:05:09,370 --> 00:05:15,699
<font color="#E5E5E5">the stealth implant but there's not the</font>

122
00:05:13,180 --> 00:05:18,960
parts off to attacks and the<font color="#E5E5E5"> software</font>

123
00:05:15,699 --> 00:05:21,849
part may may have different vectors

124
00:05:18,960 --> 00:05:24,068
itself like me it might be<font color="#E5E5E5"> software</font>

125
00:05:21,849 --> 00:05:25,659
attacks from<font color="#CCCCCC"> the person system it may be</font>

126
00:05:24,069 --> 00:05:29,229
sort<font color="#CCCCCC"> of attacks or a different</font>

127
00:05:25,659 --> 00:05:30,938
components and<font color="#E5E5E5"> so on so forth those come</font>

128
00:05:29,229 --> 00:05:32,919
many examples for them for the reason

129
00:05:30,939 --> 00:05:34,599
for the last<font color="#CCCCCC"> years about all of the</font>

130
00:05:32,919 --> 00:05:36,599
software attacks for<font color="#E5E5E5"> the system from a</font>

131
00:05:34,599 --> 00:05:39,699
traumatic from other companies<font color="#E5E5E5"> as well</font>

132
00:05:36,599 --> 00:05:41,409
<font color="#E5E5E5">but there is also remote attacks and</font>

133
00:05:39,699 --> 00:05:42,759
usually we think about remote attacks

134
00:05:41,409 --> 00:05:45,039
<font color="#CCCCCC">where</font><font color="#E5E5E5"> the format is something which</font><font color="#CCCCCC"> is</font>

135
00:05:42,759 --> 00:05:47,349
not really<font color="#CCCCCC"> often because there is not</font>

136
00:05:45,039 --> 00:05:49,750
<font color="#E5E5E5">many network stack implementation there</font>

137
00:05:47,349 --> 00:05:52,419
is not<font color="#E5E5E5"> many network interfaces there but</font>

138
00:05:49,750 --> 00:05:54,849
in<font color="#E5E5E5"> reality it's</font><font color="#CCCCCC"> not that in reality many</font>

139
00:05:52,419 --> 00:05:57,330
of the formal components has the network

140
00:05:54,849 --> 00:06:01,839
stack here's couple example for example

141
00:05:57,330 --> 00:06:03,639
<font color="#E5E5E5">in Intel meam team has some own</font>

142
00:06:01,839 --> 00:06:06,180
implementation<font color="#CCCCCC"> of the network stack</font>

143
00:06:03,639 --> 00:06:10,509
which which has an<font color="#E5E5E5"> example of the</font>

144
00:06:06,180 --> 00:06:13,479
vulnerability released in 2013<font color="#CCCCCC"> being</font>

145
00:06:10,509 --> 00:06:15,310
<font color="#E5E5E5">seen being sits itself it's that</font>

146
00:06:13,479 --> 00:06:17,669
<font color="#E5E5E5">component</font><font color="#CCCCCC"> which is responsible for</font>

147
00:06:15,310 --> 00:06:20,680
<font color="#E5E5E5">management capabilities for the servers</font>

148
00:06:17,669 --> 00:06:23,680
<font color="#CCCCCC">which is basically run</font><font color="#E5E5E5"> in entire</font><font color="#CCCCCC"> us with</font>

149
00:06:20,680 --> 00:06:26,860
all the capabilities like OS<font color="#E5E5E5"> including</font>

150
00:06:23,680 --> 00:06:30,690
<font color="#E5E5E5">Network step and there was a couple</font>

151
00:06:26,860 --> 00:06:33,940
<font color="#CCCCCC">Vernor ability found in HP and Dell</font>

152
00:06:30,690 --> 00:06:35,590
servers in the BMC<font color="#CCCCCC"> and one of them will</font>

153
00:06:33,940 --> 00:06:38,170
be presented and<font color="#E5E5E5"> this black hat</font>

154
00:06:35,590 --> 00:06:40,270
or in the<font color="#CCCCCC"> recommended</font><font color="#E5E5E5"> to take a look but</font>

155
00:06:38,170 --> 00:06:42,670
this also<font color="#E5E5E5"> showing us that there</font><font color="#CCCCCC"> is a</font>

156
00:06:40,270 --> 00:06:46,479
remote vector for the BMC to<font color="#E5E5E5"> compromise</font>

157
00:06:42,670 --> 00:06:51,640
<font color="#E5E5E5">service and nowadays for the last couple</font>

158
00:06:46,480 --> 00:06:55,780
years for 2015 we start<font color="#CCCCCC"> we start</font><font color="#E5E5E5"> see</font>

159
00:06:51,640 --> 00:07:00,849
that system from<font color="#E5E5E5"> also incorporating the</font>

160
00:06:55,780 --> 00:07:04,119
network stack like we have IP<font color="#E5E5E5"> DCP HTTP</font>

161
00:07:00,850 --> 00:07:05,950
implementation in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ufi basis from in</font>

162
00:07:04,120 --> 00:07:08,410
the system<font color="#E5E5E5"> from energy on</font><font color="#CCCCCC"> a current</font>

163
00:07:05,950 --> 00:07:10,450
limit a reference implementation<font color="#CCCCCC"> why we</font>

164
00:07:08,410 --> 00:07:13,240
need<font color="#CCCCCC"> these capabilities</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> need these</font>

165
00:07:10,450 --> 00:07:16,990
capabilities<font color="#E5E5E5"> because we want to put our</font>

166
00:07:13,240 --> 00:07:20,370
OS from<font color="#E5E5E5"> HTTP for example and there is</font>

167
00:07:16,990 --> 00:07:23,080
<font color="#E5E5E5">another part of them of the remote</font>

168
00:07:20,370 --> 00:07:25,600
remote capabilities<font color="#E5E5E5"> remote management</font>

169
00:07:23,080 --> 00:07:27,580
capabilities<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the modern part</font><font color="#E5E5E5"> platform</font>

170
00:07:25,600 --> 00:07:28,840
which is<font color="#E5E5E5"> vendor specific so think about</font>

171
00:07:27,580 --> 00:07:30,340
<font color="#E5E5E5">this so there is a</font><font color="#CCCCCC"> reference</font>

172
00:07:28,840 --> 00:07:32,200
implementation part which implements

173
00:07:30,340 --> 00:07:34,570
<font color="#CCCCCC">some functionality and there is vendor</font>

174
00:07:32,200 --> 00:07:37,780
specific part which<font color="#CCCCCC"> is also may employ</font>

175
00:07:34,570 --> 00:07:39,849
<font color="#E5E5E5">meant additional features and may have</font>

176
00:07:37,780 --> 00:07:43,419
them own tools for<font color="#CCCCCC"> that man them own</font>

177
00:07:39,850 --> 00:07:45,910
service<font color="#E5E5E5"> and in this talk we will focus</font>

178
00:07:43,420 --> 00:07:49,150
for this<font color="#E5E5E5"> vector for the vector</font><font color="#CCCCCC"> for</font>

179
00:07:45,910 --> 00:07:53,260
vector for the system from<font color="#E5E5E5"> in</font><font color="#CCCCCC"> a</font>

180
00:07:49,150 --> 00:07:57,159
<font color="#E5E5E5">management functionality of them</font><font color="#CCCCCC"> of the</font>

181
00:07:53,260 --> 00:08:00,159
platform<font color="#CCCCCC"> and specifically which is</font>

182
00:07:57,160 --> 00:08:02,830
vendor specific features implemented<font color="#E5E5E5"> in</font>

183
00:08:00,160 --> 00:08:05,920
some of the vendors<font color="#CCCCCC"> with this I will</font>

184
00:08:02,830 --> 00:08:12,280
switch to to make here to<font color="#E5E5E5"> continue</font><font color="#CCCCCC"> this</font>

185
00:08:05,920 --> 00:08:14,320
<font color="#E5E5E5">more details about this vectors</font><font color="#CCCCCC"> Thank</font>

186
00:08:12,280 --> 00:08:16,929
<font color="#CCCCCC">You ax</font><font color="#E5E5E5"> for that review</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> gonna go into</font>

187
00:08:14,320 --> 00:08:19,390
a little<font color="#CCCCCC"> bit a further detail</font><font color="#E5E5E5"> into the</font>

188
00:08:16,930 --> 00:08:24,520
<font color="#CCCCCC">overview that Alex went in and we're</font>

189
00:08:19,390 --> 00:08:26,740
gonna start with BMC BMC is<font color="#CCCCCC"> is an</font>

190
00:08:24,520 --> 00:08:29,130
acronym stands<font color="#CCCCCC"> for base board management</font>

191
00:08:26,740 --> 00:08:32,370
<font color="#E5E5E5">control in case</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> don't know it is</font>

192
00:08:29,130 --> 00:08:35,289
used in server boards for management

193
00:08:32,370 --> 00:08:38,230
<font color="#CCCCCC">obviously in the picture in</font><font color="#E5E5E5"> the slide</font>

194
00:08:35,289 --> 00:08:42,159
<font color="#CCCCCC">you can see</font><font color="#E5E5E5"> is zoomed in photo from the</font>

195
00:08:38,230 --> 00:08:43,960
previous slide this<font color="#E5E5E5"> is the the BMC</font>

196
00:08:42,159 --> 00:08:46,030
complex on the<font color="#E5E5E5"> motherboard as you can</font>

197
00:08:43,960 --> 00:08:48,800
see it has<font color="#CCCCCC"> its</font><font color="#E5E5E5"> own</font><font color="#CCCCCC"> CPU SRAM and</font><font color="#E5E5E5"> flash</font>

198
00:08:46,030 --> 00:08:50,689
it's an independent<font color="#E5E5E5"> computing system</font>

199
00:08:48,800 --> 00:08:53,839
the motherboard<font color="#CCCCCC"> it does</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> require a</font>

200
00:08:50,689 --> 00:08:56,059
<font color="#E5E5E5">CPU or</font><font color="#CCCCCC"> RAM or any other peripheral to to</font>

201
00:08:53,839 --> 00:08:59,119
work from the host<font color="#E5E5E5"> the moment you plug</font>

202
00:08:56,059 --> 00:09:00,499
<font color="#E5E5E5">in a power cable it</font><font color="#CCCCCC"> will boot up</font><font color="#E5E5E5"> and it</font>

203
00:08:59,119 --> 00:09:06,589
<font color="#E5E5E5">is from that point on</font>

204
00:09:00,499 --> 00:09:08,209
susceptible for attacks<font color="#CCCCCC"> the BMC's are</font>

205
00:09:06,589 --> 00:09:10,399
designed for out-of-band server

206
00:09:08,209 --> 00:09:12,888
management<font color="#E5E5E5"> some of the things you can do</font>

207
00:09:10,399 --> 00:09:16,129
with them are<font color="#CCCCCC"> KVM which allows you to</font>

208
00:09:12,889 --> 00:09:19,179
VNC<font color="#E5E5E5"> over the network</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the host which I</font>

209
00:09:16,129 --> 00:09:21,679
need a server<font color="#E5E5E5"> and configure</font><font color="#CCCCCC"> bios</font><font color="#E5E5E5"> or</font>

210
00:09:19,179 --> 00:09:25,129
install an operating system<font color="#E5E5E5"> by showing</font>

211
00:09:21,679 --> 00:09:28,069
<font color="#E5E5E5">an ISO image to the host or flash the</font>

212
00:09:25,129 --> 00:09:31,040
BIOS remotely power on or off the

213
00:09:28,069 --> 00:09:33,378
platform or even reset it<font color="#CCCCCC"> they come in</font>

214
00:09:31,040 --> 00:09:37,459
different flavors of<font color="#CCCCCC"> licensing some</font>

215
00:09:33,379 --> 00:09:40,399
though<font color="#CCCCCC"> in a paper feature model</font><font color="#E5E5E5"> some go</font>

216
00:09:37,459 --> 00:09:42,410
by<font color="#CCCCCC"> tears</font><font color="#E5E5E5"> for example</font><font color="#CCCCCC"> dell idrac have the</font>

217
00:09:40,399 --> 00:09:45,230
basic<font color="#CCCCCC"> Express and enterprise tier so you</font>

218
00:09:42,410 --> 00:09:48,679
pay more<font color="#CCCCCC"> you get</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> features in Super</font>

219
00:09:45,230 --> 00:09:50,449
<font color="#CCCCCC">Micro</font><font color="#E5E5E5"> we have paper feature we have</font><font color="#CCCCCC"> an</font>

220
00:09:48,679 --> 00:09:53,389
<font color="#E5E5E5">example we have personal experience with</font>

221
00:09:50,449 --> 00:09:55,399
that<font color="#E5E5E5"> when we accidentally brick to one</font>

222
00:09:53,389 --> 00:09:58,189
of our extant servers<font color="#E5E5E5"> and we couldn't</font>

223
00:09:55,399 --> 00:10:00,889
physically flash it<font color="#CCCCCC"> we didn't succeed</font>

224
00:09:58,189 --> 00:10:02,990
<font color="#E5E5E5">for some electrical reason and we had to</font>

225
00:10:00,889 --> 00:10:06,230
go<font color="#E5E5E5"> purchase a license from Super Micro</font>

226
00:10:02,990 --> 00:10:11,149
<font color="#E5E5E5">to go through the BMC and flash a</font>

227
00:10:06,230 --> 00:10:12,920
recovery<font color="#CCCCCC"> image that worked from an</font>

228
00:10:11,149 --> 00:10:15,139
attack surface perspective<font color="#E5E5E5"> over the</font>

229
00:10:12,920 --> 00:10:19,610
<font color="#E5E5E5">network</font><font color="#CCCCCC"> when you look at the BMC you see</font>

230
00:10:15,139 --> 00:10:24,170
the<font color="#CCCCCC"> IP mi the the IP my protocol</font><font color="#E5E5E5"> the VNC</font>

231
00:10:19,610 --> 00:10:27,559
port and the web interface<font color="#CCCCCC"> it</font><font color="#E5E5E5"> is very</font>

232
00:10:24,170 --> 00:10:31,279
very hard<font color="#E5E5E5"> to scan BMC as it takes a long</font>

233
00:10:27,559 --> 00:10:35,290
time<font color="#E5E5E5"> but if you look at a little</font><font color="#CCCCCC"> bit</font>

234
00:10:31,279 --> 00:10:40,089
<font color="#E5E5E5">more detail sorry for the horrible slide</font>

235
00:10:35,290 --> 00:10:43,819
<font color="#E5E5E5">they there's more than network on a BMC</font>

236
00:10:40,089 --> 00:10:46,610
<font color="#CCCCCC">alright we have the land or</font><font color="#E5E5E5"> the NIC</font>

237
00:10:43,819 --> 00:10:48,229
where the BMC shares a network port with

238
00:10:46,610 --> 00:10:52,100
<font color="#CCCCCC">the</font><font color="#E5E5E5"> host or has its own dedicated</font>

239
00:10:48,230 --> 00:10:55,189
<font color="#CCCCCC">network port and the serial connection</font>

240
00:10:52,100 --> 00:10:58,419
the IP<font color="#E5E5E5"> MB and the ICMP bridges as well</font>

241
00:10:55,189 --> 00:11:00,860
as other connections going<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> host</font>

242
00:10:58,419 --> 00:11:03,170
<font color="#E5E5E5">for example</font>

243
00:11:00,860 --> 00:11:05,929
the system interface between the<font color="#CCCCCC"> BMC and</font>

244
00:11:03,170 --> 00:11:08,149
<font color="#E5E5E5">the</font><font color="#CCCCCC"> hosts</font><font color="#E5E5E5"> think about it as two</font>

245
00:11:05,929 --> 00:11:09,949
computers the BMC is one computer<font color="#E5E5E5"> the</font>

246
00:11:08,149 --> 00:11:12,589
host is another computer<font color="#CCCCCC"> and they</font>

247
00:11:09,949 --> 00:11:16,998
communicate<font color="#E5E5E5"> between each</font><font color="#CCCCCC"> other</font><font color="#E5E5E5"> now if I</font>

248
00:11:12,589 --> 00:11:19,459
were an attacker<font color="#E5E5E5"> and I would want to hop</font>

249
00:11:16,999 --> 00:11:22,040
from the host<font color="#E5E5E5"> to the BMC</font><font color="#CCCCCC"> I would use</font>

250
00:11:19,459 --> 00:11:27,378
this connection<font color="#E5E5E5"> usually what happens is</font>

251
00:11:22,040 --> 00:11:29,599
in data centers and enterprises<font color="#E5E5E5"> you'd</font>

252
00:11:27,379 --> 00:11:31,009
have the BMC on one<font color="#CCCCCC"> network segment and</font>

253
00:11:29,600 --> 00:11:32,119
<font color="#E5E5E5">you have the</font><font color="#CCCCCC"> hosts connected to a</font>

254
00:11:31,009 --> 00:11:34,459
<font color="#E5E5E5">different network server</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you have a</font>

255
00:11:32,119 --> 00:11:36,079
management<font color="#CCCCCC"> networking on</font><font color="#E5E5E5"> non</font><font color="#CCCCCC"> management</font>

256
00:11:34,459 --> 00:11:37,459
<font color="#CCCCCC">network</font><font color="#E5E5E5"> as an attacker</font><font color="#CCCCCC"> jumping</font><font color="#E5E5E5"> from a</font>

257
00:11:36,079 --> 00:11:45,819
<font color="#E5E5E5">non management network to a management</font>

258
00:11:37,459 --> 00:11:50,029
network is ideal<font color="#E5E5E5"> the short history of</font>

259
00:11:45,819 --> 00:11:53,569
<font color="#CCCCCC">IPMI 1998 the</font><font color="#E5E5E5"> IPM</font><font color="#CCCCCC"> I spake out</font><font color="#E5E5E5"> the spec</font>

260
00:11:50,029 --> 00:11:56,989
comes out 2001 it bit it<font color="#E5E5E5"> gets its land</font>

261
00:11:53,569 --> 00:11:59,059
editions in 2004<font color="#E5E5E5"> yeah it's a few more</font>

262
00:11:56,989 --> 00:12:01,160
<font color="#E5E5E5">editions with VLAN</font><font color="#CCCCCC"> and firewall</font><font color="#E5E5E5"> and then</font>

263
00:11:59,059 --> 00:12:05,480
we start seeing<font color="#E5E5E5"> vulnerabilities</font><font color="#CCCCCC"> if 2013</font>

264
00:12:01,160 --> 00:12:06,740
<font color="#CCCCCC">2014 the of the</font><font color="#E5E5E5"> famous ones are HD more</font>

265
00:12:05,480 --> 00:12:09,920
than a farmer where they scan the

266
00:12:06,740 --> 00:12:11,329
<font color="#E5E5E5">internet and found 300,000</font><font color="#CCCCCC"> bmc's and 53</font>

267
00:12:09,920 --> 00:12:14,049
thousand of them<font color="#E5E5E5"> were vulnerable</font><font color="#CCCCCC"> to</font>

268
00:12:11,329 --> 00:12:17,118
<font color="#CCCCCC">cyber zero authentication bypass</font><font color="#E5E5E5"> and</font>

269
00:12:14,049 --> 00:12:19,369
most recently<font color="#CCCCCC"> they</font><font color="#E5E5E5"> vulnerabilities which</font>

270
00:12:17,119 --> 00:12:21,920
<font color="#CCCCCC">i think should</font><font color="#E5E5E5"> win the pony</font><font color="#CCCCCC"> Awards is</font>

271
00:12:19,369 --> 00:12:30,009
<font color="#E5E5E5">the HP ILO for authentication progress</font>

272
00:12:21,920 --> 00:12:33,019
with 29 or 27<font color="#E5E5E5"> days the Mema am team</font>

273
00:12:30,009 --> 00:12:35,540
<font color="#CCCCCC">unlike the previous zoom in picture</font><font color="#E5E5E5"> I</font>

274
00:12:33,019 --> 00:12:38,029
cannot show<font color="#CCCCCC"> you the</font><font color="#E5E5E5"> CPU it has a</font>

275
00:12:35,540 --> 00:12:41,839
dedicated<font color="#E5E5E5"> CPU it's in there</font>

276
00:12:38,029 --> 00:12:43,689
it<font color="#E5E5E5"> says its own SRAM it also shares</font><font color="#CCCCCC"> ram</font>

277
00:12:41,839 --> 00:12:46,579
with the<font color="#E5E5E5"> host it steals a little bit and</font>

278
00:12:43,689 --> 00:12:51,799
it loads<font color="#E5E5E5"> its code from the main platform</font>

279
00:12:46,579 --> 00:12:53,809
flash if BMC is management<font color="#CCCCCC"> for servers</font>

280
00:12:51,799 --> 00:12:56,269
<font color="#E5E5E5">than</font><font color="#CCCCCC"> a Mt AME is management for</font>

281
00:12:53,809 --> 00:12:58,879
enterprise clients<font color="#E5E5E5"> think of it as an</font>

282
00:12:56,269 --> 00:13:02,299
equivalent platform in functionality but

283
00:12:58,879 --> 00:13:05,269
not the same<font color="#E5E5E5"> physically enterprises use</font>

284
00:13:02,299 --> 00:13:08,299
these<font color="#E5E5E5"> to provision systems to allow IT</font>

285
00:13:05,269 --> 00:13:13,209
professionals to<font color="#E5E5E5"> install OS</font><font color="#CCCCCC"> s remotely</font>

286
00:13:08,299 --> 00:13:13,209
configure<font color="#CCCCCC"> BIOS and hardware and</font><font color="#E5E5E5"> firmware</font>

287
00:13:14,260 --> 00:13:19,120
attack surface<font color="#E5E5E5"> from a web perspective if</font>

288
00:13:16,810 --> 00:13:20,500
you<font color="#E5E5E5"> look at the open ports AMT has</font><font color="#CCCCCC"> a web</font>

289
00:13:19,120 --> 00:13:24,780
interface<font color="#CCCCCC"> we all know the famous</font>

290
00:13:20,500 --> 00:13:27,610
<font color="#E5E5E5">vulnerability from a year and a half ago</font>

291
00:13:24,780 --> 00:13:30,400
<font color="#CCCCCC">will allow you authenticate bypass and</font>

292
00:13:27,610 --> 00:13:31,720
<font color="#CCCCCC">the standard ones VNC in zero over land</font>

293
00:13:30,400 --> 00:13:33,550
<font color="#E5E5E5">and there's all so many</font><font color="#CCCCCC"> features we're</font>

294
00:13:31,720 --> 00:13:36,490
not gonna go into<font color="#E5E5E5"> it</font><font color="#CCCCCC"> a little brief</font>

295
00:13:33,550 --> 00:13:40,030
<font color="#CCCCCC">history of that first encounter day we</font>

296
00:13:36,490 --> 00:13:43,510
first<font color="#E5E5E5"> encountered AMT in 2006 2007 added</font>

297
00:13:40,030 --> 00:13:48,310
<font color="#E5E5E5">wireless support 2008 provisioning over</font>

298
00:13:43,510 --> 00:13:49,240
the network<font color="#E5E5E5"> 2010 remote</font><font color="#CCCCCC"> KVM and 2017</font><font color="#E5E5E5"> is</font>

299
00:13:48,310 --> 00:13:55,420
when we see the<font color="#CCCCCC"> first major</font>

300
00:13:49,240 --> 00:13:57,490
vulnerability<font color="#E5E5E5"> a brief recap</font><font color="#CCCCCC"> of that</font>

301
00:13:55,420 --> 00:14:01,329
vulnerability<font color="#E5E5E5"> in case you've never heard</font>

302
00:13:57,490 --> 00:14:05,560
of it it was a an authentication bypass

303
00:14:01,330 --> 00:14:07,930
where you could<font color="#E5E5E5"> send a an empty digest</font>

304
00:14:05,560 --> 00:14:11,770
<font color="#E5E5E5">to the AMT</font><font color="#CCCCCC"> and he lets you authenticate</font>

305
00:14:07,930 --> 00:14:14,079
and<font color="#CCCCCC"> login and there's a few</font><font color="#E5E5E5"> more in 2018</font>

306
00:14:11,770 --> 00:14:17,710
we<font color="#CCCCCC"> haven't had event but Intel released</font>

307
00:14:14,080 --> 00:14:20,410
of a<font color="#CCCCCC"> month ago advisories explaining</font>

308
00:14:17,710 --> 00:14:22,660
they found<font color="#E5E5E5"> few a few</font><font color="#CCCCCC"> more</font>

309
00:14:20,410 --> 00:14:24,699
vulnerabilities that<font color="#E5E5E5"> they dispatched</font>

310
00:14:22,660 --> 00:14:26,110
internally which is nice

311
00:14:24,700 --> 00:14:29,640
who the<font color="#CCCCCC"> stand tall for disclosing</font>

312
00:14:26,110 --> 00:14:35,200
<font color="#E5E5E5">publicly things they found internally</font>

313
00:14:29,640 --> 00:14:37,990
<font color="#CCCCCC">BIOS ok if you don't know what BIOS is</font>

314
00:14:35,200 --> 00:14:39,580
I'll go briefly over that<font color="#E5E5E5"> it is</font>

315
00:14:37,990 --> 00:14:42,640
essentially<font color="#CCCCCC"> the early code that</font>

316
00:14:39,580 --> 00:14:44,170
configures the<font color="#CCCCCC"> hardware before</font><font color="#E5E5E5"> loading</font>

317
00:14:42,640 --> 00:14:46,870
<font color="#E5E5E5">and transitioning execution to the</font>

318
00:14:44,170 --> 00:14:50,860
operating<font color="#CCCCCC"> system what I</font><font color="#E5E5E5"> mean is by</font>

319
00:14:46,870 --> 00:14:53,830
configuring<font color="#CCCCCC"> Hardware is it is setting</font>

320
00:14:50,860 --> 00:14:57,760
registers configuring memory memory

321
00:14:53,830 --> 00:15:01,090
protections<font color="#CCCCCC"> sitting SMM locking down the</font>

322
00:14:57,760 --> 00:15:02,830
configurations with bits<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you write</font>

323
00:15:01,090 --> 00:15:04,360
once to them and after you write once

324
00:15:02,830 --> 00:15:06,790
they're set and you<font color="#E5E5E5"> have to power cycle</font>

325
00:15:04,360 --> 00:15:10,750
<font color="#CCCCCC">the platform to change them</font><font color="#E5E5E5"> it also sets</font>

326
00:15:06,790 --> 00:15:12,760
protections<font color="#E5E5E5"> on its own flash so no one</font>

327
00:15:10,750 --> 00:15:14,410
other than itself can write and read

328
00:15:12,760 --> 00:15:18,630
<font color="#E5E5E5">from it yeah right</font><font color="#CCCCCC"> to it</font>

329
00:15:14,410 --> 00:15:21,280
read from<font color="#E5E5E5"> it it can the code is main CPU</font>

330
00:15:18,630 --> 00:15:23,639
<font color="#CCCCCC">flash main flash around</font><font color="#E5E5E5"> mainframe it's</font>

331
00:15:21,280 --> 00:15:27,069
part of<font color="#E5E5E5"> the main up main platform</font>

332
00:15:23,639 --> 00:15:29,800
bass is<font color="#CCCCCC"> the cute of trust</font><font color="#E5E5E5"> that</font>

333
00:15:27,069 --> 00:15:35,370
everything<font color="#E5E5E5"> that works afterwards relies</font>

334
00:15:29,800 --> 00:15:35,370
on so if you<font color="#E5E5E5"> compromise</font><font color="#CCCCCC"> BIOS</font><font color="#E5E5E5"> you win</font>

335
00:15:37,290 --> 00:15:44,259
<font color="#CCCCCC">BIOS in the early days everyone had</font>

336
00:15:40,930 --> 00:15:47,019
their<font color="#CCCCCC"> own version in</font><font color="#E5E5E5"> 1998</font><font color="#CCCCCC"> Intel said</font>

337
00:15:44,259 --> 00:15:49,749
<font color="#CCCCCC">let's that's the other heads together</font>

338
00:15:47,019 --> 00:15:55,180
<font color="#E5E5E5">and do something</font><font color="#CCCCCC"> about it</font><font color="#E5E5E5"> they they</font>

339
00:15:49,749 --> 00:15:57,639
wrote<font color="#E5E5E5"> efi 1.0 in 2002 it evolved into</font><font color="#CCCCCC"> a</font>

340
00:15:55,180 --> 00:16:01,300
forum<font color="#E5E5E5"> and more and more</font><font color="#CCCCCC"> company started</font>

341
00:15:57,639 --> 00:16:04,899
to adapt it 2007 they added cryptography

342
00:16:01,300 --> 00:16:07,449
<font color="#E5E5E5">network authentication more of that 2015</font>

343
00:16:04,899 --> 00:16:10,509
<font color="#CCCCCC">is interesting more functionality starts</font>

344
00:16:07,449 --> 00:16:13,479
to pop up<font color="#E5E5E5"> Wi-Fi</font><font color="#CCCCCC"> Bluetooth support</font><font color="#E5E5E5"> HTTP</font>

345
00:16:10,509 --> 00:16:17,740
<font color="#CCCCCC">HTTP ads in 2016 with the</font><font color="#E5E5E5"> with the</font>

346
00:16:13,480 --> 00:16:19,660
introduction<font color="#E5E5E5"> open</font><font color="#CCCCCC"> SSL and in 2016 we we</font>

347
00:16:17,740 --> 00:16:21,670
have a publicly disclosed vulnerability

348
00:16:19,660 --> 00:16:24,969
in<font color="#CCCCCC"> the core code</font><font color="#E5E5E5"> which also is called</font>

349
00:16:21,670 --> 00:16:27,189
<font color="#E5E5E5">Tiano core where Topher Timson has</font>

350
00:16:24,970 --> 00:16:30,309
discovered there is<font color="#CCCCCC"> a missing size check</font>

351
00:16:27,189 --> 00:16:32,469
in a DHCP packet the interesting fact

352
00:16:30,309 --> 00:16:38,829
about that is there was a check it

353
00:16:32,470 --> 00:16:41,079
wasn't an assert they<font color="#E5E5E5"> fixed that let's</font>

354
00:16:38,829 --> 00:16:43,180
<font color="#E5E5E5">look at the</font><font color="#CCCCCC"> the reference implementation</font>

355
00:16:41,079 --> 00:16:45,819
for<font color="#E5E5E5"> the you</font><font color="#CCCCCC"> fight 2.4 spec there's an</font>

356
00:16:43,180 --> 00:16:48,189
<font color="#E5E5E5">example you can</font><font color="#CCCCCC"> see that there is a lot</font>

357
00:16:45,819 --> 00:16:51,579
of<font color="#CCCCCC"> functionality here for if you want to</font>

358
00:16:48,189 --> 00:16:54,969
do<font color="#E5E5E5"> up pixie boots over</font><font color="#CCCCCC"> v4 v ipv4</font><font color="#E5E5E5"> ipv6 is</font>

359
00:16:51,579 --> 00:16:59,069
<font color="#E5E5E5">cozy as well you see there's TCP UDP IP</font>

360
00:16:54,970 --> 00:17:01,750
for ie6<font color="#E5E5E5"> and</font><font color="#CCCCCC"> DHCP</font><font color="#E5E5E5"> and so on and so forth</font>

361
00:16:59,069 --> 00:17:04,329
<font color="#E5E5E5">on top of that that's what the</font><font color="#CCCCCC"> reference</font>

362
00:17:01,750 --> 00:17:09,209
code gives you as a is a<font color="#E5E5E5"> vendors and as</font>

363
00:17:04,329 --> 00:17:12,970
an independent<font color="#CCCCCC"> bios vendor or ibv HP in</font>

364
00:17:09,209 --> 00:17:16,360
2015 saw that reference code and decided

365
00:17:12,970 --> 00:17:18,429
<font color="#E5E5E5">ok we need to</font><font color="#CCCCCC"> add more so they based on</font>

366
00:17:16,359 --> 00:17:20,559
<font color="#E5E5E5">that implementation</font><font color="#CCCCCC"> they added their own</font>

367
00:17:18,429 --> 00:17:23,949
implementation<font color="#E5E5E5"> for HTTP boot so what you</font>

368
00:17:20,559 --> 00:17:26,020
see in blue is HP's<font color="#E5E5E5"> addition in tinted</font>

369
00:17:23,949 --> 00:17:30,329
green is what the<font color="#E5E5E5"> reference code offers</font>

370
00:17:26,020 --> 00:17:30,329
and the pink bottom is the<font color="#CCCCCC"> harbor</font><font color="#E5E5E5"> layer</font>

371
00:17:30,370 --> 00:17:34,179
this is a perfect example of what

372
00:17:31,690 --> 00:17:37,870
<font color="#E5E5E5">vendors would do when when the reference</font>

373
00:17:34,180 --> 00:17:45,610
code does<font color="#CCCCCC"> not fit their</font><font color="#E5E5E5"> needs for the</font>

374
00:17:37,870 --> 00:17:48,520
market they're targeting another example

375
00:17:45,610 --> 00:17:52,199
<font color="#E5E5E5">today for that is am i a dish</font><font color="#CCCCCC"> am eyes</font>

376
00:17:48,520 --> 00:17:52,200
<font color="#CCCCCC">addition for the Bluetooth stack</font><font color="#E5E5E5"> in BIOS</font>

377
00:17:52,290 --> 00:17:56,620
<font color="#CCCCCC">the reference core code does not have</font>

378
00:17:55,059 --> 00:18:00,790
support<font color="#CCCCCC"> for it has some support</font><font color="#E5E5E5"> for</font>

379
00:17:56,620 --> 00:18:02,139
<font color="#E5E5E5">Bluetooth nowadays but in 2017</font><font color="#CCCCCC"> am</font><font color="#E5E5E5"> I</font>

380
00:18:00,790 --> 00:18:08,710
<font color="#E5E5E5">decided to implement their own Bluetooth</font>

381
00:18:02,140 --> 00:18:12,059
stack<font color="#CCCCCC"> basically it's</font><font color="#E5E5E5"> Bluetooth</font><font color="#CCCCCC"> in BIOS I</font>

382
00:18:08,710 --> 00:18:14,650
don't know<font color="#CCCCCC"> of any use case for</font><font color="#E5E5E5"> this but</font>

383
00:18:12,059 --> 00:18:18,940
it allows you<font color="#E5E5E5"> to connect to it before</font>

384
00:18:14,650 --> 00:18:21,130
the OS base<font color="#CCCCCC"> we did actually find</font><font color="#E5E5E5"> a Dixie</font>

385
00:18:18,940 --> 00:18:24,760
<font color="#CCCCCC">module module</font><font color="#E5E5E5"> in a production laptop</font>

386
00:18:21,130 --> 00:18:29,740
that is<font color="#CCCCCC"> Bluetooth</font><font color="#E5E5E5"> as a memo so it is</font>

387
00:18:24,760 --> 00:18:32,470
used in the wild another great example

388
00:18:29,740 --> 00:18:37,090
<font color="#E5E5E5">for adding to an existing functionality</font>

389
00:18:32,470 --> 00:18:40,390
is<font color="#CCCCCC"> ami again where UEFI</font><font color="#E5E5E5"> the reference</font>

390
00:18:37,090 --> 00:18:42,760
code offers a Wi-Fi stack but it's not

391
00:18:40,390 --> 00:18:45,250
complete<font color="#E5E5E5"> so they would have open network</font>

392
00:18:42,760 --> 00:18:48,460
connections and wpa2 connections<font color="#E5E5E5"> but</font>

393
00:18:45,250 --> 00:18:50,080
they didn't apply EAP so ami came along

394
00:18:48,460 --> 00:18:53,830
and implemented their parallel driver

395
00:18:50,080 --> 00:18:55,809
for the Wi-Fi stack so<font color="#CCCCCC"> you get these two</font>

396
00:18:53,830 --> 00:18:58,389
ecosystems<font color="#CCCCCC"> one I have to run next</font><font color="#E5E5E5"> to</font>

397
00:18:55,809 --> 00:19:03,520
each other<font color="#CCCCCC"> and that's something that</font><font color="#E5E5E5"> is</font>

398
00:18:58,390 --> 00:19:11,890
worth knowing<font color="#CCCCCC"> and with that oh so not</font><font color="#E5E5E5"> to</font>

399
00:19:03,520 --> 00:19:13,929
<font color="#CCCCCC">Jesse thanks Mickey so I'll</font><font color="#E5E5E5"> take over</font><font color="#CCCCCC"> a</font>

400
00:19:11,890 --> 00:19:17,290
little bit<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> is an</font><font color="#E5E5E5"> example of a</font>

401
00:19:13,929 --> 00:19:20,920
feature that<font color="#E5E5E5"> has</font><font color="#CCCCCC"> been added</font><font color="#E5E5E5"> like HP had</font>

402
00:19:17,290 --> 00:19:23,139
their own<font color="#CCCCCC"> version of HTTP boot</font><font color="#E5E5E5"> and it</font>

403
00:19:20,920 --> 00:19:25,690
eventually was a similar functionality

404
00:19:23,140 --> 00:19:28,510
pulled<font color="#E5E5E5"> into the official UEFI</font>

405
00:19:25,690 --> 00:19:31,380
specification<font color="#E5E5E5"> so the UEFI specification</font>

406
00:19:28,510 --> 00:19:34,750
and reference implementation now has

407
00:19:31,380 --> 00:19:38,870
HTTP boot also this<font color="#E5E5E5"> was</font><font color="#CCCCCC"> basically done</font>

408
00:19:34,750 --> 00:19:42,410
<font color="#E5E5E5">to replace pixie which was the older</font>

409
00:19:38,870 --> 00:19:45,379
version of remote network boot<font color="#CCCCCC"> this</font>

410
00:19:42,410 --> 00:19:49,460
<font color="#E5E5E5">actually allows you to configure a URL</font>

411
00:19:45,380 --> 00:19:51,590
and download<font color="#E5E5E5"> a UEFI application that's</font>

412
00:19:49,460 --> 00:19:57,380
run as a<font color="#E5E5E5"> boot loader</font><font color="#CCCCCC"> or even like a</font>

413
00:19:51,590 --> 00:20:00,199
complete ISO image over HTTP or HTTPS<font color="#CCCCCC"> it</font>

414
00:19:57,380 --> 00:20:03,050
will mount<font color="#CCCCCC"> it basically has a ram disk</font>

415
00:20:00,200 --> 00:20:07,430
functionality<font color="#E5E5E5"> where it will download the</font>

416
00:20:03,050 --> 00:20:09,649
<font color="#CCCCCC">ISO mount the Ram disk and look for the</font>

417
00:20:07,430 --> 00:20:12,020
UEFI boot loader in this<font color="#CCCCCC"> I so</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> it</font>

418
00:20:09,650 --> 00:20:14,059
<font color="#CCCCCC">downloaded</font><font color="#E5E5E5"> which is kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> cool</font><font color="#CCCCCC"> it does</font>

419
00:20:12,020 --> 00:20:17,210
do signature verification<font color="#E5E5E5"> before</font>

420
00:20:14,059 --> 00:20:20,928
executing this UEFI<font color="#E5E5E5"> there's there's</font>

421
00:20:17,210 --> 00:20:23,870
basically a policy bits that specify if

422
00:20:20,929 --> 00:20:26,900
a<font color="#CCCCCC"> UF application that comes from this</font>

423
00:20:23,870 --> 00:20:28,428
location<font color="#CCCCCC"> check signature if it's coming</font>

424
00:20:26,900 --> 00:20:29,750
from an internal thermoball<font color="#E5E5E5"> um--</font>

425
00:20:28,429 --> 00:20:31,610
don't bother checking signature but

426
00:20:29,750 --> 00:20:33,070
because it's from a remote source<font color="#E5E5E5"> it</font>

427
00:20:31,610 --> 00:20:35,659
does check that signature<font color="#E5E5E5"> verification</font>

428
00:20:33,070 --> 00:20:40,189
<font color="#E5E5E5">in order to maintain the secure boot</font>

429
00:20:35,660 --> 00:20:41,390
chain at this point so intelligent

430
00:20:40,190 --> 00:20:46,370
provisioning is kind of an interesting

431
00:20:41,390 --> 00:20:49,550
feature that<font color="#E5E5E5"> we ran into this is a</font>

432
00:20:46,370 --> 00:20:52,219
feature in HP servers and it it

433
00:20:49,550 --> 00:20:57,260
<font color="#E5E5E5">essentially is kind of an embedded</font>

434
00:20:52,220 --> 00:20:59,080
system<font color="#E5E5E5"> in HP where</font><font color="#CCCCCC"> BIOS can go and</font>

435
00:20:57,260 --> 00:21:02,240
transition into<font color="#CCCCCC"> this alternate</font>

436
00:20:59,080 --> 00:21:04,309
environment<font color="#E5E5E5"> that it can download</font>

437
00:21:02,240 --> 00:21:07,100
<font color="#E5E5E5">firmware updates can apply the firmware</font>

438
00:21:04,309 --> 00:21:10,629
updates<font color="#E5E5E5"> it can actually download drivers</font>

439
00:21:07,100 --> 00:21:13,610
for<font color="#CCCCCC"> your hardware from the internet</font><font color="#E5E5E5"> and</font>

440
00:21:10,630 --> 00:21:15,620
inject those into your<font color="#E5E5E5"> previously</font>

441
00:21:13,610 --> 00:21:18,260
installed operating<font color="#E5E5E5"> system so it all</font>

442
00:21:15,620 --> 00:21:20,360
mount file systems<font color="#E5E5E5"> that have already</font>

443
00:21:18,260 --> 00:21:22,940
been<font color="#E5E5E5"> installed</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> inject new drivers</font>

444
00:21:20,360 --> 00:21:25,659
into<font color="#CCCCCC"> the system which is</font><font color="#E5E5E5"> it's kind of</font>

445
00:21:22,940 --> 00:21:28,100
cool but makes me a little<font color="#E5E5E5"> nervous also</font>

446
00:21:25,660 --> 00:21:30,580
<font color="#E5E5E5">it also has some functionality where</font>

447
00:21:28,100 --> 00:21:33,050
it's kind of<font color="#E5E5E5"> like this wizard version of</font>

448
00:21:30,580 --> 00:21:35,320
simple configuration and provisioning of

449
00:21:33,050 --> 00:21:37,570
<font color="#E5E5E5">the operating system so you can</font>

450
00:21:35,320 --> 00:21:40,309
configure a bunch of<font color="#E5E5E5"> different devices</font>

451
00:21:37,570 --> 00:21:44,840
<font color="#E5E5E5">use this provisioning capability and</font>

452
00:21:40,309 --> 00:21:47,470
it'll install windows or SUSE Linux or

453
00:21:44,840 --> 00:21:49,970
different operating systems<font color="#E5E5E5"> from a</font>

454
00:21:47,470 --> 00:21:52,040
configuration file instead<font color="#E5E5E5"> of manually</font>

455
00:21:49,970 --> 00:21:52,570
going<font color="#E5E5E5"> through the operating system</font>

456
00:21:52,040 --> 00:21:57,279
insulin

457
00:21:52,570 --> 00:22:00,908
<font color="#E5E5E5">and steps so what one other thing that</font>

458
00:21:57,279 --> 00:22:04,990
we<font color="#E5E5E5"> ran</font><font color="#CCCCCC"> into is</font><font color="#E5E5E5"> SMTP from UEFI</font><font color="#CCCCCC"> so this is</font>

459
00:22:00,909 --> 00:22:07,720
a<font color="#E5E5E5"> feature that from BIOS it will bring</font>

460
00:22:04,990 --> 00:22:11,470
up the<font color="#E5E5E5"> network connection get a</font><font color="#CCCCCC"> dhcp</font>

461
00:22:07,720 --> 00:22:15,250
address<font color="#E5E5E5"> and connect</font><font color="#CCCCCC"> to remote</font><font color="#E5E5E5"> email</font>

462
00:22:11,470 --> 00:22:17,230
servers to send<font color="#E5E5E5"> email for you</font><font color="#CCCCCC"> in this</font>

463
00:22:15,250 --> 00:22:19,740
particular<font color="#E5E5E5"> example</font><font color="#CCCCCC"> it was designed to be</font>

464
00:22:17,230 --> 00:22:22,419
<font color="#CCCCCC">used for a</font><font color="#E5E5E5"> diagnostic tool where you can</font>

465
00:22:19,740 --> 00:22:25,960
<font color="#CCCCCC">report an issue back to the to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> bios</font>

466
00:22:22,419 --> 00:22:27,460
vendors a technical<font color="#E5E5E5"> support team</font><font color="#CCCCCC"> a</font>

467
00:22:25,960 --> 00:22:32,440
really<font color="#CCCCCC"> interesting feature</font><font color="#E5E5E5"> this</font>

468
00:22:27,460 --> 00:22:35,710
particular feature<font color="#E5E5E5"> is that they have an</font>

469
00:22:32,440 --> 00:22:39,519
NTFS driver in this<font color="#CCCCCC"> bios that this</font>

470
00:22:35,710 --> 00:22:41,620
feature can use that ntfs driver<font color="#CCCCCC"> to</font>

471
00:22:39,519 --> 00:22:44,440
mount your hard drive partition you can

472
00:22:41,620 --> 00:22:47,678
browse<font color="#CCCCCC"> to</font><font color="#E5E5E5"> any file</font><font color="#CCCCCC"> in the file system</font>

473
00:22:44,440 --> 00:22:49,840
<font color="#E5E5E5">and attach it as an email as long as</font>

474
00:22:47,679 --> 00:22:52,210
<font color="#E5E5E5">it's left</font><font color="#CCCCCC"> for three Meg's and send that</font>

475
00:22:49,840 --> 00:22:55,330
from<font color="#CCCCCC"> BIOS before the</font><font color="#E5E5E5"> operating system</font>

476
00:22:52,210 --> 00:22:58,090
ever loads which is<font color="#E5E5E5"> it's kind of</font><font color="#CCCCCC"> neat</font>

477
00:22:55,330 --> 00:23:01,210
this this feature and functionality is

478
00:22:58,090 --> 00:23:03,490
there<font color="#E5E5E5"> present</font><font color="#CCCCCC"> in the operating in the in</font>

479
00:23:01,210 --> 00:23:06,429
the BIOS so if someone is able<font color="#E5E5E5"> to</font>

480
00:23:03,490 --> 00:23:07,750
compromise<font color="#CCCCCC"> BIOS all</font><font color="#E5E5E5"> this framework is</font>

481
00:23:06,429 --> 00:23:13,240
there<font color="#CCCCCC"> you could</font><font color="#E5E5E5"> take advantage of and</font>

482
00:23:07,750 --> 00:23:14,649
<font color="#E5E5E5">potentially use</font><font color="#CCCCCC"> it maliciously another</font>

483
00:23:13,240 --> 00:23:17,980
feature that we ran into it's pretty

484
00:23:14,649 --> 00:23:21,039
interesting<font color="#E5E5E5"> is HP has a remote</font>

485
00:23:17,980 --> 00:23:24,240
diagnostic download<font color="#E5E5E5"> function where in</font>

486
00:23:21,039 --> 00:23:28,539
BIOS you<font color="#CCCCCC"> can configure this</font>

487
00:23:24,240 --> 00:23:31,539
<font color="#E5E5E5">functionality that will when you reboot</font>

488
00:23:28,539 --> 00:23:32,889
it will bring up the<font color="#E5E5E5"> network connection</font>

489
00:23:31,539 --> 00:23:35,549
<font color="#E5E5E5">before it even loads the operating</font>

490
00:23:32,889 --> 00:23:37,990
system go out to a<font color="#E5E5E5"> remote server</font>

491
00:23:35,549 --> 00:23:41,200
<font color="#E5E5E5">download and executable from that remote</font>

492
00:23:37,990 --> 00:23:44,379
server in this<font color="#E5E5E5"> case</font><font color="#CCCCCC"> it does check the</font>

493
00:23:41,200 --> 00:23:48,490
signature before<font color="#E5E5E5"> executing it like the</font>

494
00:23:44,379 --> 00:23:49,509
other like the HTTP boot<font color="#E5E5E5"> it basically</font>

495
00:23:48,490 --> 00:23:52,629
does a similar signature verification

496
00:23:49,509 --> 00:23:55,149
check<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> executes this executable</font>

497
00:23:52,629 --> 00:23:57,428
<font color="#E5E5E5">that you downloaded off the</font><font color="#CCCCCC"> internet you</font>

498
00:23:55,149 --> 00:24:00,129
<font color="#CCCCCC">can either specify</font><font color="#E5E5E5"> downloading it</font>

499
00:23:57,429 --> 00:24:03,190
officially from HP's website or you can

500
00:24:00,129 --> 00:24:05,879
<font color="#CCCCCC">have</font><font color="#E5E5E5"> your own custom</font><font color="#CCCCCC"> URL</font><font color="#E5E5E5"> where you put</font>

501
00:24:03,190 --> 00:24:05,879
this

502
00:24:05,900 --> 00:24:11,270
diagnostic tool or random<font color="#CCCCCC"> signed efi</font>

503
00:24:08,780 --> 00:24:13,280
binary<font color="#E5E5E5"> somewhere else</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Internet</font>

504
00:24:11,270 --> 00:24:15,860
and it'll<font color="#CCCCCC"> download it from</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> run</font>

505
00:24:13,280 --> 00:24:18,230
it<font color="#E5E5E5"> there is the ability</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> take the</font>

506
00:24:15,860 --> 00:24:20,419
results that<font color="#E5E5E5"> are take that are output</font>

507
00:24:18,230 --> 00:24:23,210
from this tool and upload<font color="#CCCCCC"> it back to a</font>

508
00:24:20,420 --> 00:24:24,830
different<font color="#E5E5E5"> website on the Internet</font><font color="#CCCCCC"> you</font>

509
00:24:23,210 --> 00:24:26,750
can<font color="#E5E5E5"> specify using a password if it's</font>

510
00:24:24,830 --> 00:24:29,449
behind<font color="#CCCCCC"> is something that's like a</font><font color="#E5E5E5"> FTP</font>

511
00:24:26,750 --> 00:24:32,180
server<font color="#CCCCCC"> specially</font><font color="#E5E5E5"> protected but that that</font>

512
00:24:29,450 --> 00:24:34,340
functionality is all there in the<font color="#CCCCCC"> system</font>

513
00:24:32,180 --> 00:24:37,960
and it's interesting<font color="#E5E5E5"> because this one</font>

514
00:24:34,340 --> 00:24:40,870
<font color="#E5E5E5">you can schedule it automatically so</font>

515
00:24:37,960 --> 00:24:43,220
every climate reach so it doesn't run at

516
00:24:40,870 --> 00:24:45,350
run time after the operating system<font color="#E5E5E5"> has</font>

517
00:24:43,220 --> 00:24:49,940
run<font color="#CCCCCC"> up but every time you reboot it it</font>

518
00:24:45,350 --> 00:24:51,500
will check<font color="#E5E5E5"> and</font><font color="#CCCCCC"> see if if it has if</font>

519
00:24:49,940 --> 00:24:52,760
enough time<font color="#E5E5E5"> since the last check has</font>

520
00:24:51,500 --> 00:24:55,190
happened so if you have it scheduled

521
00:24:52,760 --> 00:24:57,620
every week and you<font color="#E5E5E5"> reboot your</font><font color="#CCCCCC"> system</font>

522
00:24:55,190 --> 00:24:59,600
after<font color="#E5E5E5"> a week</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> half it'll run again</font>

523
00:24:57,620 --> 00:25:01,729
<font color="#E5E5E5">connect</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the internet download this</font>

524
00:24:59,600 --> 00:25:03,939
and upload<font color="#E5E5E5"> the results somewhere else so</font>

525
00:25:01,730 --> 00:25:08,650
it's kind of an<font color="#CCCCCC"> interesting feature and</font>

526
00:25:03,940 --> 00:25:08,650
so<font color="#E5E5E5"> another thing that we ran into is</font>

527
00:25:09,220 --> 00:25:15,980
historically<font color="#E5E5E5"> BIOS has</font><font color="#CCCCCC"> been kind of</font>

528
00:25:12,110 --> 00:25:20,510
<font color="#E5E5E5">difficult</font><font color="#CCCCCC"> to update</font><font color="#E5E5E5"> so a lot of people</font>

529
00:25:15,980 --> 00:25:22,280
<font color="#CCCCCC">don't update BIOS I got</font><font color="#E5E5E5"> I know I have</font>

530
00:25:20,510 --> 00:25:24,170
been kind<font color="#E5E5E5"> of</font><font color="#CCCCCC"> laxed and gotten better at</font>

531
00:25:22,280 --> 00:25:26,750
updating<font color="#CCCCCC"> BIOS I started working</font><font color="#E5E5E5"> on this</font>

532
00:25:24,170 --> 00:25:30,440
kind of research<font color="#E5E5E5"> but because it's been</font>

533
00:25:26,750 --> 00:25:31,640
such<font color="#E5E5E5"> a difficult thing to do</font><font color="#CCCCCC"> multiple</font>

534
00:25:30,440 --> 00:25:34,480
<font color="#E5E5E5">vendors have started adding</font>

535
00:25:31,640 --> 00:25:36,770
<font color="#E5E5E5">functionality so they can basically</font>

536
00:25:34,480 --> 00:25:38,840
<font color="#E5E5E5">check if there's a new BIOS update</font>

537
00:25:36,770 --> 00:25:41,830
available<font color="#CCCCCC"> before even loading the</font>

538
00:25:38,840 --> 00:25:44,780
operating<font color="#E5E5E5"> system so from BIOS it will</font>

539
00:25:41,830 --> 00:25:46,189
bring up the<font color="#E5E5E5"> network connection</font><font color="#CCCCCC"> make</font>

540
00:25:44,780 --> 00:25:48,200
requests out to remote servers on<font color="#E5E5E5"> the</font>

541
00:25:46,190 --> 00:25:52,250
<font color="#CCCCCC">internet potentially download those</font>

542
00:25:48,200 --> 00:25:54,530
updates<font color="#E5E5E5"> and apply them and there there</font>

543
00:25:52,250 --> 00:25:57,140
<font color="#E5E5E5">isn't a standard way to do this in UEFI</font>

544
00:25:54,530 --> 00:25:59,680
so the different<font color="#E5E5E5"> vendors have just all</font>

545
00:25:57,140 --> 00:26:03,500
made their<font color="#CCCCCC"> own implementation</font><font color="#E5E5E5"> and</font>

546
00:25:59,680 --> 00:26:06,290
<font color="#CCCCCC">everybody's</font><font color="#E5E5E5"> done it differently so there</font>

547
00:26:03,500 --> 00:26:08,360
might be some problems with<font color="#CCCCCC"> that here's</font>

548
00:26:06,290 --> 00:26:11,860
an<font color="#CCCCCC"> example of this is what as rocks</font>

549
00:26:08,360 --> 00:26:15,418
implementation<font color="#E5E5E5"> looks like it's basically</font>

550
00:26:11,860 --> 00:26:16,889
<font color="#E5E5E5">goes out it connects to the</font><font color="#CCCCCC"> internet and</font>

551
00:26:15,419 --> 00:26:20,039
shows you if there's an update<font color="#E5E5E5"> allows</font>

552
00:26:16,889 --> 00:26:20,748
you to update that<font color="#E5E5E5"> if a new update is</font>

553
00:26:20,039 --> 00:26:24,690
<font color="#E5E5E5">available</font>

554
00:26:20,749 --> 00:26:26,279
<font color="#E5E5E5">asus has a similar functionality</font><font color="#CCCCCC"> it's</font>

555
00:26:24,690 --> 00:26:27,749
it's<font color="#E5E5E5"> basically exactly the same</font>

556
00:26:26,279 --> 00:26:31,049
functionality<font color="#CCCCCC"> it just looks different</font>

557
00:26:27,749 --> 00:26:35,489
<font color="#CCCCCC">and it's it's all built on top</font><font color="#E5E5E5"> of those</font>

558
00:26:31,049 --> 00:26:38,429
core<font color="#E5E5E5"> UEFI</font><font color="#CCCCCC"> Network primitives like</font><font color="#E5E5E5"> TCP</font>

559
00:26:35,489 --> 00:26:40,919
<font color="#E5E5E5">for Dixie the DHCP primitives but</font>

560
00:26:38,429 --> 00:26:43,679
because all the extra update

561
00:26:40,919 --> 00:26:48,269
functionality is custom<font color="#E5E5E5"> it's just</font>

562
00:26:43,679 --> 00:26:50,549
implemented differently<font color="#CCCCCC"> HP</font><font color="#E5E5E5"> has a similar</font>

563
00:26:48,269 --> 00:26:53,129
<font color="#E5E5E5">feature where you can basically do the</font>

564
00:26:50,549 --> 00:26:55,589
same<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> you can configure your your</font>

565
00:26:53,129 --> 00:26:58,699
update source directly<font color="#E5E5E5"> from bio so you</font>

566
00:26:55,589 --> 00:26:58,700
can have<font color="#E5E5E5"> it point at hp.com</font>

567
00:26:59,809 --> 00:27:06,869
<font color="#CCCCCC">and this one is</font><font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> because</font>

568
00:27:02,609 --> 00:27:09,689
it'll<font color="#CCCCCC"> also you can you can schedule</font>

569
00:27:06,869 --> 00:27:11,519
dynamic it'll automatically download and

570
00:27:09,690 --> 00:27:13,259
apply those updates if a new update is

571
00:27:11,519 --> 00:27:15,389
<font color="#E5E5E5">available and this is kind of a</font>

572
00:27:13,259 --> 00:27:18,570
difference<font color="#CCCCCC"> between like this is more of</font>

573
00:27:15,389 --> 00:27:20,519
<font color="#CCCCCC">like</font><font color="#E5E5E5"> a enterprise feature</font><font color="#CCCCCC"> or focused</font>

574
00:27:18,570 --> 00:27:22,918
feature where it's like it'll go do it

575
00:27:20,519 --> 00:27:24,719
<font color="#CCCCCC">for you the other ones were like more</font>

576
00:27:22,919 --> 00:27:27,299
consumer<font color="#CCCCCC"> focus where it's like in the</font>

577
00:27:24,719 --> 00:27:28,679
foot the feature is there but it<font color="#E5E5E5"> you</font>

578
00:27:27,299 --> 00:27:33,149
can't have to go do<font color="#E5E5E5"> it yourself</font>

579
00:27:28,679 --> 00:27:36,179
<font color="#E5E5E5">so we as part of our</font><font color="#CCCCCC"> research we</font>

580
00:27:33,149 --> 00:27:39,570
<font color="#E5E5E5">basically discovered that both</font><font color="#CCCCCC"> asus</font><font color="#E5E5E5"> and</font>

581
00:27:36,179 --> 00:27:41,429
<font color="#CCCCCC">asrock we're doing this</font><font color="#E5E5E5"> in securely and</font>

582
00:27:39,570 --> 00:27:45,029
they had basic buffer<font color="#E5E5E5"> overflows in there</font>

583
00:27:41,429 --> 00:27:49,589
<font color="#E5E5E5">their update process so to show this off</font>

584
00:27:45,029 --> 00:27:52,229
we<font color="#E5E5E5"> basically wrote a demo to exploit</font>

585
00:27:49,589 --> 00:27:53,279
this and and see what we can do and we

586
00:27:52,229 --> 00:27:55,639
<font color="#CCCCCC">can show what</font><font color="#E5E5E5"> it what that looks like</font>

587
00:27:53,279 --> 00:27:55,639
<font color="#CCCCCC">right now</font>

588
00:27:58,309 --> 00:28:06,989
so as the the tradition is<font color="#CCCCCC"> to a</font><font color="#E5E5E5"> Papa</font>

589
00:28:04,200 --> 00:28:08,940
shell<font color="#E5E5E5"> when you are exploiting stuff we</font>

590
00:28:06,989 --> 00:28:11,609
figure or a pop<font color="#CCCCCC"> calc</font><font color="#E5E5E5"> we figured we might</font>

591
00:28:08,940 --> 00:28:13,559
<font color="#E5E5E5">as</font><font color="#CCCCCC"> well do that</font><font color="#E5E5E5"> so this is</font><font color="#CCCCCC"> like the</font><font color="#E5E5E5"> BIOS</font>

592
00:28:11,609 --> 00:28:16,458
what it looks like we're gonna go and

593
00:28:13,559 --> 00:28:21,200
<font color="#E5E5E5">launch the internet flash function and</font>

594
00:28:16,459 --> 00:28:21,200
and<font color="#CCCCCC"> see what it looks like</font>

595
00:28:22,099 --> 00:28:27,178
so<font color="#CCCCCC"> this got triggered just</font><font color="#E5E5E5"> by checking</font>

596
00:28:25,079 --> 00:28:29,460
if an<font color="#E5E5E5"> update was available we didn't</font>

597
00:28:27,179 --> 00:28:34,470
have to go say<font color="#CCCCCC"> okay go apply the update</font>

598
00:28:29,460 --> 00:28:36,540
and actually apply it<font color="#E5E5E5"> basically apply</font>

599
00:28:34,470 --> 00:28:39,630
the update<font color="#E5E5E5"> it's it's just just</font><font color="#CCCCCC"> checking</font>

600
00:28:36,540 --> 00:28:42,750
is enough to it<font color="#CCCCCC"> to trigger this so we</font>

601
00:28:39,630 --> 00:28:44,490
can<font color="#E5E5E5"> also</font><font color="#CCCCCC"> have like a bigger payload</font>

602
00:28:42,750 --> 00:28:47,130
that's a<font color="#E5E5E5"> little bit more elaborate</font><font color="#CCCCCC"> like</font>

603
00:28:44,490 --> 00:28:49,800
that was a pretty small payload<font color="#E5E5E5"> it's not</font>

604
00:28:47,130 --> 00:28:57,030
that<font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> but you</font><font color="#E5E5E5"> basically have</font>

605
00:28:49,800 --> 00:29:00,330
complete<font color="#E5E5E5"> you can run much bigger code in</font>

606
00:28:57,030 --> 00:29:04,139
your<font color="#CCCCCC"> in your exploit so this one</font><font color="#E5E5E5"> is</font>

607
00:29:00,330 --> 00:29:06,689
actually a<font color="#E5E5E5"> popping shell instead so like</font>

608
00:29:04,140 --> 00:29:10,110
the this the<font color="#E5E5E5"> the shell application isn't</font>

609
00:29:06,690 --> 00:29:12,510
<font color="#CCCCCC">included</font><font color="#E5E5E5"> in this UEFI binary but we can</font>

610
00:29:10,110 --> 00:29:13,979
<font color="#E5E5E5">just include it in our payload and it</font>

611
00:29:12,510 --> 00:29:16,110
takes a little bit<font color="#E5E5E5"> longer but</font><font color="#CCCCCC"> you get a</font>

612
00:29:13,980 --> 00:29:18,860
complete interactive shell you<font color="#E5E5E5"> can</font>

613
00:29:16,110 --> 00:29:20,639
basically run any arbitrary UEFI

614
00:29:18,860 --> 00:29:24,020
application that you<font color="#E5E5E5"> want at this point</font>

615
00:29:20,640 --> 00:29:28,860
<font color="#E5E5E5">you don't</font><font color="#CCCCCC"> have to have any kind of</font>

616
00:29:24,020 --> 00:29:30,629
visual like you<font color="#E5E5E5"> you don't have to show</font>

617
00:29:28,860 --> 00:29:32,760
anything on<font color="#E5E5E5"> the screen we we did this</font>

618
00:29:30,630 --> 00:29:34,650
<font color="#E5E5E5">just so</font><font color="#CCCCCC"> that you</font><font color="#E5E5E5"> could actually see</font><font color="#CCCCCC"> that</font>

619
00:29:32,760 --> 00:29:38,580
something's happening but you can have

620
00:29:34,650 --> 00:29:40,740
<font color="#E5E5E5">it be completely silent</font><font color="#CCCCCC"> and then inject</font>

621
00:29:38,580 --> 00:29:53,520
something<font color="#E5E5E5"> and then continue booting up</font>

622
00:29:40,740 --> 00:29:57,630
if you want to so so once we reported

623
00:29:53,520 --> 00:29:59,460
this as<font color="#E5E5E5"> rock was like well</font><font color="#CCCCCC"> oh</font><font color="#E5E5E5"> they</font>

624
00:29:57,630 --> 00:30:02,610
basically provided firmware updates for

625
00:29:59,460 --> 00:30:05,700
all effective systems that<font color="#E5E5E5"> just</font><font color="#CCCCCC"> disabled</font>

626
00:30:02,610 --> 00:30:08,280
the functionality and<font color="#CCCCCC"> it was</font><font color="#E5E5E5"> almost</font><font color="#CCCCCC"> 300</font>

627
00:30:05,700 --> 00:30:11,040
<font color="#E5E5E5">different motherboard models that were</font>

628
00:30:08,280 --> 00:30:14,610
affected by<font color="#CCCCCC"> this basically the last two</font>

629
00:30:11,040 --> 00:30:16,470
generations<font color="#E5E5E5"> of Intel processors</font>

630
00:30:14,610 --> 00:30:19,290
basically from<font color="#CCCCCC"> Haswell onward and</font><font color="#E5E5E5"> then</font>

631
00:30:16,470 --> 00:30:21,510
AMD processors were also affected but

632
00:30:19,290 --> 00:30:25,879
there's I think<font color="#E5E5E5"> three</font><font color="#CCCCCC"> different</font>

633
00:30:21,510 --> 00:30:29,460
generations<font color="#E5E5E5"> of AMD using the m4 socket</font>

634
00:30:25,880 --> 00:30:32,670
<font color="#CCCCCC">has</font><font color="#E5E5E5"> rocks response was they basically</font>

635
00:30:29,460 --> 00:30:35,730
<font color="#E5E5E5">said it's this is only happening before</font>

636
00:30:32,670 --> 00:30:37,200
<font color="#E5E5E5">the operating system boots so it doesn't</font>

637
00:30:35,730 --> 00:30:39,030
<font color="#E5E5E5">really matter this isn't a problem and</font>

638
00:30:37,200 --> 00:30:41,220
we went<font color="#CCCCCC"> back and</font><font color="#E5E5E5"> forth</font><font color="#CCCCCC"> with them a</font>

639
00:30:39,030 --> 00:30:43,629
little<font color="#CCCCCC"> bit and</font><font color="#E5E5E5"> tried</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> explain no you</font>

640
00:30:41,220 --> 00:30:47,410
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> really should fix this</font>

641
00:30:43,630 --> 00:30:52,760
they didn't seem<font color="#E5E5E5"> to understand why so</font>

642
00:30:47,410 --> 00:30:54,620
this actually<font color="#CCCCCC"> hasn't been fixed so let's</font>

643
00:30:52,760 --> 00:30:56,870
take a<font color="#E5E5E5"> look at what the exploit actually</font>

644
00:30:54,620 --> 00:31:00,350
looks like it's it's a<font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit</font>

645
00:30:56,870 --> 00:31:03,199
different<font color="#CCCCCC"> so well some things will look</font>

646
00:31:00,350 --> 00:31:06,409
very<font color="#E5E5E5"> similar</font><font color="#CCCCCC"> so the way this</font><font color="#E5E5E5"> works is</font>

647
00:31:03,200 --> 00:31:09,650
here's the<font color="#E5E5E5"> example of</font><font color="#CCCCCC"> asrock where it</font>

648
00:31:06,410 --> 00:31:13,400
basically<font color="#E5E5E5"> does a plain HTTP request out</font>

649
00:31:09,650 --> 00:31:16,160
to<font color="#E5E5E5"> the Internet at</font><font color="#CCCCCC"> asrock com2</font><font color="#E5E5E5"> this live</font>

650
00:31:13,400 --> 00:31:18,470
update<font color="#CCCCCC"> a sv page it does include</font><font color="#E5E5E5"> the</font>

651
00:31:16,160 --> 00:31:21,440
specific<font color="#E5E5E5"> model of the motherboard that's</font>

652
00:31:18,470 --> 00:31:22,820
running so if you need<font color="#E5E5E5"> to return a</font>

653
00:31:21,440 --> 00:31:24,740
different exploit for<font color="#E5E5E5"> a particular</font>

654
00:31:22,820 --> 00:31:29,480
motherboard<font color="#E5E5E5"> you can totally do</font><font color="#CCCCCC"> that also</font>

655
00:31:24,740 --> 00:31:30,799
<font color="#E5E5E5">but it is plain HTTP and that's it's</font>

656
00:31:29,480 --> 00:31:32,690
possible the<font color="#E5E5E5"> man in the middle of that</font>

657
00:31:30,799 --> 00:31:34,429
<font color="#E5E5E5">so let's</font><font color="#CCCCCC"> take a look at what the</font>

658
00:31:32,690 --> 00:31:40,850
response<font color="#E5E5E5"> looks like it's</font><font color="#CCCCCC"> basically just</font>

659
00:31:34,429 --> 00:31:43,760
a<font color="#CCCCCC"> xml document that has some</font><font color="#E5E5E5"> urls region</font>

660
00:31:40,850 --> 00:31:47,659
information and then a list<font color="#E5E5E5"> of what BIOS</font>

661
00:31:43,760 --> 00:31:49,520
updates are actually<font color="#E5E5E5"> available and as</font>

662
00:31:47,660 --> 00:31:53,210
you can<font color="#E5E5E5"> see like we made our description</font>

663
00:31:49,520 --> 00:31:56,360
like this is a<font color="#E5E5E5"> malicious BIOS</font><font color="#CCCCCC"> and if you</font>

664
00:31:53,210 --> 00:32:01,790
<font color="#E5E5E5">actually run this the description shows</font>

665
00:31:56,360 --> 00:32:03,340
up in the in the in<font color="#E5E5E5"> the UI and gives you</font>

666
00:32:01,790 --> 00:32:06,918
the ability<font color="#E5E5E5"> to go and update that</font><font color="#CCCCCC"> BIOS</font>

667
00:32:03,340 --> 00:32:09,830
<font color="#E5E5E5">but we figured out</font><font color="#CCCCCC"> that if you basically</font>

668
00:32:06,919 --> 00:32:13,669
<font color="#E5E5E5">just make some of these fields much</font>

669
00:32:09,830 --> 00:32:18,350
longer like if we<font color="#CCCCCC"> put</font><font color="#E5E5E5"> a bunch of A's</font><font color="#CCCCCC"> in</font>

670
00:32:13,669 --> 00:32:19,880
the URL<font color="#E5E5E5"> field when you're checking this</font>

671
00:32:18,350 --> 00:32:23,899
<font color="#E5E5E5">when you're checking for the update it</font>

672
00:32:19,880 --> 00:32:25,610
just hangs and you're wondering what

673
00:32:23,900 --> 00:32:27,830
happened<font color="#CCCCCC"> it's like</font><font color="#E5E5E5"> I'm not</font><font color="#CCCCCC"> sure what</font>

674
00:32:25,610 --> 00:32:29,270
happened here but we can<font color="#E5E5E5"> take a look at</font>

675
00:32:27,830 --> 00:32:31,730
this and<font color="#CCCCCC"> figure out what's happening and</font>

676
00:32:29,270 --> 00:32:33,650
I'll talk a<font color="#E5E5E5"> little bit more about how</font>

677
00:32:31,730 --> 00:32:35,900
specifically to figure that<font color="#E5E5E5"> out in a</font>

678
00:32:33,650 --> 00:32:37,700
second<font color="#E5E5E5"> but first let's take a look at</font>

679
00:32:35,900 --> 00:32:41,030
the<font color="#CCCCCC"> Asus one it's it's a very very</font>

680
00:32:37,700 --> 00:32:44,870
<font color="#CCCCCC">similar situation where it's it's also</font>

681
00:32:41,030 --> 00:32:47,540
<font color="#E5E5E5">making plain HTTP requests to</font><font color="#CCCCCC"> a Seuss's</font>

682
00:32:44,870 --> 00:32:49,159
website and this the structure<font color="#CCCCCC"> of the</font>

683
00:32:47,540 --> 00:32:51,590
request is<font color="#E5E5E5"> slightly different where</font>

684
00:32:49,160 --> 00:32:52,970
instead<font color="#CCCCCC"> of a an</font><font color="#E5E5E5"> ASP page with</font><font color="#CCCCCC"> the model</font>

685
00:32:51,590 --> 00:32:56,139
they have<font color="#E5E5E5"> a specific</font><font color="#CCCCCC"> path that they're</font>

686
00:32:52,970 --> 00:32:58,870
requesting<font color="#E5E5E5"> for this specific motherboard</font>

687
00:32:56,140 --> 00:33:00,460
and here's the response<font color="#E5E5E5"> from the server</font>

688
00:32:58,870 --> 00:33:03,280
<font color="#E5E5E5">saying here's your update that's</font>

689
00:33:00,460 --> 00:33:06,400
<font color="#CCCCCC">available</font><font color="#E5E5E5"> for this</font><font color="#CCCCCC"> motherboard in</font><font color="#E5E5E5"> this</font>

690
00:33:03,280 --> 00:33:10,180
case it's not<font color="#E5E5E5"> XML it's like XML but a</font>

691
00:33:06,400 --> 00:33:12,310
little<font color="#CCCCCC"> bit different and it</font><font color="#E5E5E5"> has similar</font>

692
00:33:10,180 --> 00:33:16,420
issue it's like if you<font color="#E5E5E5"> put long strings</font>

693
00:33:12,310 --> 00:33:20,110
and in these fields<font color="#E5E5E5"> you</font><font color="#CCCCCC"> get the same</font>

694
00:33:16,420 --> 00:33:21,400
behavior where the<font color="#E5E5E5"> update just hangs in</font>

695
00:33:20,110 --> 00:33:22,060
order to figure<font color="#CCCCCC"> out what actually</font>

696
00:33:21,400 --> 00:33:24,340
happens

697
00:33:22,060 --> 00:33:26,370
at that<font color="#CCCCCC"> point</font><font color="#E5E5E5"> and what actually happened</font>

698
00:33:24,340 --> 00:33:29,590
<font color="#E5E5E5">like in an operating system or</font>

699
00:33:26,370 --> 00:33:31,929
<font color="#CCCCCC">application like</font><font color="#E5E5E5"> applet user mode</font>

700
00:33:29,590 --> 00:33:36,310
applications<font color="#E5E5E5"> even kernel mode apps you</font>

701
00:33:31,930 --> 00:33:37,570
have<font color="#E5E5E5"> gdb kernel debugging tools when</font>

702
00:33:36,310 --> 00:33:39,399
you're debugging<font color="#E5E5E5"> BIOS you don't have</font>

703
00:33:37,570 --> 00:33:41,320
those capabilities<font color="#E5E5E5"> yet so you need to</font>

704
00:33:39,400 --> 00:33:44,520
use some<font color="#E5E5E5"> hardware debug interfaces</font>

705
00:33:41,320 --> 00:33:49,600
instead<font color="#CCCCCC"> if you look at these three</font>

706
00:33:44,520 --> 00:33:52,660
<font color="#CCCCCC">xtp is</font><font color="#E5E5E5"> the really old expensive one old</font>

707
00:33:49,600 --> 00:33:54,550
systems basically<font color="#E5E5E5"> had a socket on the</font>

708
00:33:52,660 --> 00:33:55,900
motherboard that<font color="#E5E5E5"> was marked sometimes</font>

709
00:33:54,550 --> 00:33:59,860
<font color="#CCCCCC">it's even</font><font color="#E5E5E5"> on the</font><font color="#CCCCCC"> silkscreen</font><font color="#E5E5E5"> of</font>

710
00:33:55,900 --> 00:34:02,140
production system saying<font color="#E5E5E5"> CPU</font><font color="#CCCCCC"> XDP or PCH</font>

711
00:33:59,860 --> 00:34:06,490
<font color="#CCCCCC">XDP</font><font color="#E5E5E5"> that you literally had to</font><font color="#CCCCCC"> open the</font>

712
00:34:02,140 --> 00:34:09,429
case<font color="#E5E5E5"> plug this into and then you had</font>

713
00:34:06,490 --> 00:34:11,980
this debug<font color="#E5E5E5"> capability and you can see</font>

714
00:34:09,429 --> 00:34:13,600
what's<font color="#CCCCCC"> going</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> they've moved to what's</font>

715
00:34:11,980 --> 00:34:17,469
called called<font color="#E5E5E5"> a</font><font color="#CCCCCC"> closed chassis adapter</font>

716
00:34:13,600 --> 00:34:21,100
which basically allows you to do<font color="#E5E5E5"> debug</font>

717
00:34:17,469 --> 00:34:23,040
through a<font color="#E5E5E5"> USB port and figure out what's</font>

718
00:34:21,100 --> 00:34:25,540
going<font color="#CCCCCC"> on</font><font color="#E5E5E5"> without opening</font><font color="#CCCCCC"> the case and</font>

719
00:34:23,040 --> 00:34:27,550
there there's<font color="#CCCCCC"> also so there's the</font>

720
00:34:25,540 --> 00:34:31,360
<font color="#E5E5E5">clothes chassis adapter and then there's</font>

721
00:34:27,550 --> 00:34:34,990
also just a native debug<font color="#CCCCCC"> key USB</font><font color="#E5E5E5"> 3 debug</font>

722
00:34:31,360 --> 00:34:37,330
capability which uses this cable on the

723
00:34:34,989 --> 00:34:39,729
the right here<font color="#E5E5E5"> which it's essentially</font>

724
00:34:37,330 --> 00:34:42,940
just<font color="#CCCCCC"> a USB</font><font color="#E5E5E5"> 3 a to a cable</font><font color="#CCCCCC"> where the V</font>

725
00:34:39,730 --> 00:34:45,310
bus line has been removed<font color="#CCCCCC"> they</font><font color="#E5E5E5"> all like</font>

726
00:34:42,940 --> 00:34:47,230
the<font color="#E5E5E5"> the</font><font color="#CCCCCC"> two on the</font><font color="#E5E5E5"> right are essentially</font>

727
00:34:45,310 --> 00:34:50,080
equivalent<font color="#E5E5E5"> and you can use those on</font>

728
00:34:47,230 --> 00:34:52,810
systems from skylake and newer<font color="#CCCCCC"> all three</font>

729
00:34:50,080 --> 00:34:57,040
<font color="#E5E5E5">of these were made for debugging the</font>

730
00:34:52,810 --> 00:34:59,980
hardware and<font color="#CCCCCC"> there they're sold to OEMs</font>

731
00:34:57,040 --> 00:35:01,300
and<font color="#CCCCCC"> bios manufacturers so that they can</font>

732
00:34:59,980 --> 00:35:02,950
<font color="#E5E5E5">figure out what's going on when they're</font>

733
00:35:01,300 --> 00:35:04,810
implementing<font color="#CCCCCC"> BIOS and bringing up</font>

734
00:35:02,950 --> 00:35:07,390
platforms<font color="#E5E5E5"> before</font><font color="#CCCCCC"> they sell them to</font>

735
00:35:04,810 --> 00:35:09,680
<font color="#E5E5E5">customers</font><font color="#CCCCCC"> the two on</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> left you in</font>

736
00:35:07,390 --> 00:35:11,480
order<font color="#E5E5E5"> to get those you can</font><font color="#CCCCCC"> buy those</font>

737
00:35:09,680 --> 00:35:16,040
if<font color="#CCCCCC"> you're an</font><font color="#E5E5E5"> external customer but you</font>

738
00:35:11,480 --> 00:35:19,190
need to sign<font color="#E5E5E5"> sign up basically get an</font>

739
00:35:16,040 --> 00:35:21,200
account with<font color="#CCCCCC"> intel</font><font color="#E5E5E5"> sign an NDA</font><font color="#CCCCCC"> the one</font>

740
00:35:19,190 --> 00:35:22,460
<font color="#E5E5E5">on the right if you</font><font color="#CCCCCC"> have a new a new and</font>

741
00:35:21,200 --> 00:35:25,910
<font color="#CCCCCC">uh platform you can</font><font color="#E5E5E5"> just buy that from</font>

742
00:35:22,460 --> 00:35:28,550
<font color="#CCCCCC">third-party vendors and go go use that</font>

743
00:35:25,910 --> 00:35:32,299
with<font color="#CCCCCC"> a newer</font><font color="#E5E5E5"> platform so it's also a lot</font>

744
00:35:28,550 --> 00:35:33,890
<font color="#CCCCCC">cheaper</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> basically those you can then</font>

745
00:35:32,300 --> 00:35:35,359
use with what's called<font color="#E5E5E5"> Intel system</font>

746
00:35:33,890 --> 00:35:37,930
debugger it's part of<font color="#E5E5E5"> the Intel system</font>

747
00:35:35,359 --> 00:35:41,000
<font color="#E5E5E5">studio package it essentially gives you</font>

748
00:35:37,930 --> 00:35:44,029
capabilities that are similar to gdb

749
00:35:41,000 --> 00:35:46,940
<font color="#CCCCCC">where you can</font><font color="#E5E5E5"> examine memory you can</font>

750
00:35:44,030 --> 00:35:50,900
look at register<font color="#E5E5E5"> state</font><font color="#CCCCCC"> you can look at</font>

751
00:35:46,940 --> 00:35:54,890
CPU<font color="#E5E5E5"> structures like the GD T table you</font>

752
00:35:50,900 --> 00:35:58,130
can set breakpoints<font color="#CCCCCC"> it's a little bit</font>

753
00:35:54,890 --> 00:36:01,879
cumbersome to<font color="#CCCCCC"> use sometimes and</font><font color="#E5E5E5"> also you</font>

754
00:35:58,130 --> 00:36:05,270
run into interesting<font color="#CCCCCC"> things</font><font color="#E5E5E5"> like when</font>

755
00:36:01,880 --> 00:36:08,869
since this is basically like<font color="#CCCCCC"> JTAG so you</font>

756
00:36:05,270 --> 00:36:10,160
you might need to halt the system enable

757
00:36:08,869 --> 00:36:13,490
<font color="#CCCCCC">your breakpoints your</font><font color="#E5E5E5"> hardware</font>

758
00:36:10,160 --> 00:36:16,460
breakpoints<font color="#E5E5E5"> and then go do your</font><font color="#CCCCCC"> tests so</font>

759
00:36:13,490 --> 00:36:18,589
it's there's a little bit more<font color="#CCCCCC"> work and</font>

760
00:36:16,460 --> 00:36:20,150
<font color="#E5E5E5">it's not</font><font color="#CCCCCC"> quite</font><font color="#E5E5E5"> as as simple as</font><font color="#CCCCCC"> just</font>

761
00:36:18,589 --> 00:36:22,790
running gdb on a user mode out this

762
00:36:20,150 --> 00:36:25,130
<font color="#CCCCCC">freshing</font><font color="#E5E5E5"> so there's also what's called</font>

763
00:36:22,790 --> 00:36:27,259
the<font color="#E5E5E5"> Intel the debug abstraction layer</font>

764
00:36:25,130 --> 00:36:29,059
which is<font color="#E5E5E5"> essentially it's part of this</font>

765
00:36:27,260 --> 00:36:31,819
<font color="#E5E5E5">Intel system debugger</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> an adult</font>

766
00:36:29,059 --> 00:36:34,430
system studio<font color="#E5E5E5"> there there's essentially</font>

767
00:36:31,819 --> 00:36:37,058
a<font color="#E5E5E5"> framework that you can write Python</font>

768
00:36:34,430 --> 00:36:41,839
<font color="#E5E5E5">scripts in order to go do things and</font>

769
00:36:37,059 --> 00:36:47,900
script your analysis and debugging<font color="#CCCCCC"> of</font>

770
00:36:41,839 --> 00:36:51,740
the system so once you get<font color="#E5E5E5"> into what's</font>

771
00:36:47,900 --> 00:36:55,000
going<font color="#E5E5E5"> on UEFI is a little bit of a</font>

772
00:36:51,740 --> 00:36:58,098
different environment just<font color="#E5E5E5"> because</font>

773
00:36:55,000 --> 00:36:59,750
obviously<font color="#E5E5E5"> your normal show kill won't</font>

774
00:36:58,099 --> 00:37:02,510
work<font color="#E5E5E5"> because there is no operating</font>

775
00:36:59,750 --> 00:37:04,030
system yet like syscalls don't work none

776
00:37:02,510 --> 00:37:06,890
of that<font color="#CCCCCC"> framework has been</font><font color="#E5E5E5"> loaded yet</font>

777
00:37:04,030 --> 00:37:09,589
<font color="#CCCCCC">but there are some things that help</font><font color="#E5E5E5"> us</font>

778
00:37:06,890 --> 00:37:11,930
<font color="#CCCCCC">out a lot so first</font><font color="#E5E5E5"> you're running is</font>

779
00:37:09,589 --> 00:37:14,089
ring<font color="#CCCCCC"> 0 there there's none</font><font color="#E5E5E5"> of these</font>

780
00:37:11,930 --> 00:37:15,700
protections<font color="#E5E5E5"> are present so there's no</font>

781
00:37:14,089 --> 00:37:19,430
address randomization things are at

782
00:37:15,700 --> 00:37:22,770
relatively predictable locations<font color="#CCCCCC"> there's</font>

783
00:37:19,430 --> 00:37:25,618
an executable stack<font color="#E5E5E5"> it's basically</font>

784
00:37:22,770 --> 00:37:28,619
easy at that<font color="#E5E5E5"> point once you know what</font>

785
00:37:25,619 --> 00:37:31,109
your environment looks like there's

786
00:37:28,619 --> 00:37:33,839
there's some other<font color="#CCCCCC"> things is that you</font>

787
00:37:31,109 --> 00:37:38,400
don't have operating system like<font color="#E5E5E5"> Windows</font>

788
00:37:33,839 --> 00:37:40,200
<font color="#E5E5E5">or Linux or whatever functions yet but</font>

789
00:37:38,400 --> 00:37:42,720
there is<font color="#E5E5E5"> something called UEFI boot</font>

790
00:37:40,200 --> 00:37:44,700
services that those<font color="#E5E5E5"> are present</font><font color="#CCCCCC"> and you</font>

791
00:37:42,720 --> 00:37:47,609
<font color="#E5E5E5">can call you fi boot services functions</font>

792
00:37:44,700 --> 00:37:49,830
<font color="#E5E5E5">up until the point where exit boot</font>

793
00:37:47,609 --> 00:37:51,990
<font color="#E5E5E5">services is called and the operating</font>

794
00:37:49,830 --> 00:37:54,029
<font color="#E5E5E5">system</font><font color="#CCCCCC"> boot loader is launched</font><font color="#E5E5E5"> so all of</font>

795
00:37:51,990 --> 00:37:56,009
that is still<font color="#CCCCCC"> present but you need to</font>

796
00:37:54,030 --> 00:37:58,140
know how UEFI works internally<font color="#E5E5E5"> to</font>

797
00:37:56,010 --> 00:38:01,740
actually take<font color="#CCCCCC"> advantage</font><font color="#E5E5E5"> of that and how</font>

798
00:37:58,140 --> 00:38:04,200
<font color="#CCCCCC">to use these functions so a pretty key</font>

799
00:38:01,740 --> 00:38:07,859
point of<font color="#E5E5E5"> how UEFI works is it's all</font>

800
00:38:04,200 --> 00:38:09,868
built<font color="#E5E5E5"> on top of this concept of UEFI</font>

801
00:38:07,859 --> 00:38:13,080
protocols and protocol interfaces and

802
00:38:09,869 --> 00:38:15,869
these are essentially<font color="#E5E5E5"> human inter</font>

803
00:38:13,080 --> 00:38:18,060
component mechanisms for communication

804
00:38:15,869 --> 00:38:20,310
<font color="#E5E5E5">it's essentially</font><font color="#CCCCCC"> like an object-oriented</font>

805
00:38:18,060 --> 00:38:23,040
programming class where there's<font color="#E5E5E5"> you can</font>

806
00:38:20,310 --> 00:38:26,190
have one piece<font color="#CCCCCC"> of code</font><font color="#E5E5E5"> published an</font>

807
00:38:23,040 --> 00:38:29,910
interface using that's identified<font color="#E5E5E5"> by</font>

808
00:38:26,190 --> 00:38:32,820
this gooood<font color="#CCCCCC"> which is a globally unique</font>

809
00:38:29,910 --> 00:38:34,799
identifier<font color="#CCCCCC"> of course and you can you</font><font color="#E5E5E5"> can</font>

810
00:38:32,820 --> 00:38:38,130
basically<font color="#E5E5E5"> specify here's an interface</font>

811
00:38:34,800 --> 00:38:39,990
that<font color="#CCCCCC"> provides</font><font color="#E5E5E5"> these</font><font color="#CCCCCC"> capabilities and I</font>

812
00:38:38,130 --> 00:38:42,150
want to publish<font color="#CCCCCC"> that by a go ahead and</font>

813
00:38:39,990 --> 00:38:44,580
then some<font color="#E5E5E5"> completely other different</font>

814
00:38:42,150 --> 00:38:48,270
piece<font color="#CCCCCC"> of code says I want to</font><font color="#E5E5E5"> go use that</font>

815
00:38:44,580 --> 00:38:50,759
<font color="#CCCCCC">piece of capability so tell me where</font>

816
00:38:48,270 --> 00:38:52,950
that that capability<font color="#CCCCCC"> that protocol is</font>

817
00:38:50,760 --> 00:38:54,839
<font color="#E5E5E5">and then you can look up the protocol by</font>

818
00:38:52,950 --> 00:38:57,930
go ahead and call functions<font color="#E5E5E5"> in</font><font color="#CCCCCC"> it it's</font>

819
00:38:54,839 --> 00:38:59,369
it's essentially<font color="#CCCCCC"> you look up this object</font>

820
00:38:57,930 --> 00:39:01,500
<font color="#E5E5E5">and then call functions in the object</font>

821
00:38:59,369 --> 00:39:02,940
and<font color="#CCCCCC"> it has built-in function pointers</font>

822
00:39:01,500 --> 00:39:06,359
and then<font color="#E5E5E5"> it's and private data exactly</font>

823
00:39:02,940 --> 00:39:08,670
<font color="#E5E5E5">like a class so some of the really</font>

824
00:39:06,359 --> 00:39:11,130
critical<font color="#CCCCCC"> boot services functions that</font>

825
00:39:08,670 --> 00:39:12,720
are useful<font color="#E5E5E5"> are locate protocol that's</font>

826
00:39:11,130 --> 00:39:17,430
the that's<font color="#E5E5E5"> the mechanism by which you</font>

827
00:39:12,720 --> 00:39:19,348
<font color="#E5E5E5">can go find some other part of UEFI so</font>

828
00:39:17,430 --> 00:39:22,589
like all<font color="#E5E5E5"> of the functionality</font><font color="#CCCCCC"> that we</font>

829
00:39:19,349 --> 00:39:26,400
talked<font color="#E5E5E5"> about before with the the network</font>

830
00:39:22,589 --> 00:39:29,970
stack that<font color="#E5E5E5"> functionality to send email</font>

831
00:39:26,400 --> 00:39:32,760
the functionality to<font color="#E5E5E5"> use the</font><font color="#CCCCCC"> D ntfs</font>

832
00:39:29,970 --> 00:39:35,730
driver<font color="#E5E5E5"> to look at your file system all</font>

833
00:39:32,760 --> 00:39:36,369
<font color="#E5E5E5">of that is is published all of those</font>

834
00:39:35,730 --> 00:39:39,039
interfaces

835
00:39:36,369 --> 00:39:41,769
published by doing so your shellcode can

836
00:39:39,039 --> 00:39:44,380
actually just<font color="#E5E5E5"> do a locate protocol call</font>

837
00:39:41,769 --> 00:39:46,899
from<font color="#E5E5E5"> boot services in order to go find</font>

838
00:39:44,380 --> 00:39:48,549
the gooood<font color="#E5E5E5"> for NTFS and then call</font>

839
00:39:46,900 --> 00:39:51,999
functions<font color="#E5E5E5"> and that and do some</font>

840
00:39:48,549 --> 00:39:55,839
interesting<font color="#E5E5E5"> things some other really key</font>

841
00:39:51,999 --> 00:39:57,430
useful things for<font color="#E5E5E5"> our purposes</font><font color="#CCCCCC"> are load</font>

842
00:39:55,839 --> 00:40:00,430
image this<font color="#E5E5E5"> is essentially the key</font>

843
00:39:57,430 --> 00:40:02,470
function<font color="#CCCCCC"> that's used to load a UEFI</font>

844
00:40:00,430 --> 00:40:05,319
executable in the first place and<font color="#E5E5E5"> you</font>

845
00:40:02,470 --> 00:40:08,019
can<font color="#E5E5E5"> either specify a device path to a</font>

846
00:40:05,319 --> 00:40:11,170
particular firmware volume or source

847
00:40:08,019 --> 00:40:14,979
that you<font color="#CCCCCC"> want to load</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> if I execute</font>

848
00:40:11,170 --> 00:40:17,799
able from<font color="#E5E5E5"> or you can give it a buffered</font>

849
00:40:14,980 --> 00:40:20,289
in memory and<font color="#E5E5E5"> a size which is really</font>

850
00:40:17,799 --> 00:40:22,690
nice<font color="#CCCCCC"> for what we want to do and start</font>

851
00:40:20,289 --> 00:40:25,299
image basically<font color="#E5E5E5"> takes the</font><font color="#CCCCCC"> handle that's</font>

852
00:40:22,690 --> 00:40:27,880
returned from load image and runs it as

853
00:40:25,299 --> 00:40:30,579
an executable and<font color="#E5E5E5"> launches yet launches</font>

854
00:40:27,880 --> 00:40:33,880
the executable so putting this all

855
00:40:30,579 --> 00:40:36,400
<font color="#E5E5E5">together</font><font color="#CCCCCC"> our payload layout ends up</font>

856
00:40:33,880 --> 00:40:39,609
<font color="#CCCCCC">looking a little</font><font color="#E5E5E5"> bit</font><font color="#CCCCCC"> like this where we</font>

857
00:40:36,400 --> 00:40:41,079
<font color="#E5E5E5">have a limited amount of size on</font><font color="#CCCCCC"> that</font>

858
00:40:39,609 --> 00:40:43,089
field<font color="#E5E5E5"> that we talked</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> that's</font>

859
00:40:41,079 --> 00:40:47,349
overflowed it turns out that if you have

860
00:40:43,089 --> 00:40:49,779
<font color="#E5E5E5">too many bytes there you cause a pointer</font>

861
00:40:47,349 --> 00:40:51,609
<font color="#CCCCCC">to</font><font color="#E5E5E5"> reference that crashes before you</font>

862
00:40:49,779 --> 00:40:54,549
even get to<font color="#E5E5E5"> the return address so you</font>

863
00:40:51,609 --> 00:40:58,558
only<font color="#E5E5E5"> have a limited amount of space on</font>

864
00:40:54,549 --> 00:41:01,839
in that overflow on the stack<font color="#CCCCCC"> itself but</font>

865
00:40:58,559 --> 00:41:03,460
we found that<font color="#CCCCCC"> the entire</font><font color="#E5E5E5"> XML document</font>

866
00:41:01,839 --> 00:41:06,819
that<font color="#CCCCCC"> was downloaded from the remote site</font>

867
00:41:03,460 --> 00:41:09,400
is<font color="#E5E5E5"> also in memory it's basically sitting</font>

868
00:41:06,819 --> 00:41:11,200
on the heap<font color="#E5E5E5"> and we just in our in our</font>

869
00:41:09,400 --> 00:41:13,239
exploit that<font color="#E5E5E5"> actually goes on the stack</font>

870
00:41:11,200 --> 00:41:14,769
in the<font color="#E5E5E5"> overflow we just have a little</font>

871
00:41:13,239 --> 00:41:17,380
egg hunter<font color="#E5E5E5"> shell code to go search for</font>

872
00:41:14,769 --> 00:41:21,819
the heap<font color="#E5E5E5"> search the heap to go find the</font>

873
00:41:17,380 --> 00:41:24,309
<font color="#E5E5E5">rest of the exploit and basically jump</font>

874
00:41:21,819 --> 00:41:28,150
there one thing<font color="#E5E5E5"> that we ran into though</font>

875
00:41:24,309 --> 00:41:33,180
is that<font color="#E5E5E5"> the XML document with the</font><font color="#CCCCCC"> rest</font>

876
00:41:28,150 --> 00:41:33,180
of our exploit is sitting in the heap so

877
00:41:33,480 --> 00:41:40,450
<font color="#E5E5E5">when when it was right before we we hit</font>

878
00:41:37,480 --> 00:41:42,579
the return<font color="#CCCCCC"> instruction and returned to</font>

879
00:41:40,450 --> 00:41:45,939
our<font color="#E5E5E5"> overflowed return address they</font>

880
00:41:42,579 --> 00:41:48,609
called a free function so our data is on

881
00:41:45,940 --> 00:41:50,050
<font color="#E5E5E5">the heap but it's in no longer allocated</font>

882
00:41:48,609 --> 00:41:53,690
space so if we trigger

883
00:41:50,050 --> 00:41:55,520
allocations<font color="#E5E5E5"> it's gonna corrupt our our</font>

884
00:41:53,690 --> 00:41:57,440
buffer that we want to<font color="#E5E5E5"> preserve</font><font color="#CCCCCC"> and we</font>

885
00:41:55,520 --> 00:41:59,600
want to<font color="#E5E5E5"> execute our malicious code out</font>

886
00:41:57,440 --> 00:42:02,870
of<font color="#E5E5E5"> so it turns out that we</font><font color="#CCCCCC"> basically</font>

887
00:41:59,600 --> 00:42:05,960
need to copy ourselves out<font color="#CCCCCC"> of the heap</font>

888
00:42:02,870 --> 00:42:08,420
<font color="#CCCCCC">into a</font><font color="#E5E5E5"> different location</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then from</font>

889
00:42:05,960 --> 00:42:12,260
there we<font color="#CCCCCC"> can call the the load image and</font>

890
00:42:08,420 --> 00:42:14,300
start<font color="#E5E5E5"> image functions and basically</font>

891
00:42:12,260 --> 00:42:16,970
<font color="#E5E5E5">provide whatever arbitrary UEFI</font>

892
00:42:14,300 --> 00:42:19,430
applications we<font color="#E5E5E5"> want after</font><font color="#CCCCCC"> that we</font><font color="#E5E5E5"> could</font>

893
00:42:16,970 --> 00:42:21,470
we could go use some<font color="#E5E5E5"> functionality</font>

894
00:42:19,430 --> 00:42:23,600
that's built into<font color="#E5E5E5"> the</font><font color="#CCCCCC"> system we could</font>

895
00:42:21,470 --> 00:42:25,220
<font color="#E5E5E5">bring up network connections</font><font color="#CCCCCC"> we could</font>

896
00:42:23,600 --> 00:42:27,049
use the NTFS driver but we could

897
00:42:25,220 --> 00:42:28,490
<font color="#E5E5E5">basically do whatever we want at this</font>

898
00:42:27,050 --> 00:42:33,740
point

899
00:42:28,490 --> 00:42:35,390
I imagined the NTFS driver a couple<font color="#CCCCCC"> of</font>

900
00:42:33,740 --> 00:42:38,470
times<font color="#E5E5E5"> and the interesting</font><font color="#CCCCCC"> thing about</font>

901
00:42:35,390 --> 00:42:42,319
<font color="#E5E5E5">that one</font><font color="#CCCCCC"> is that if you've looked at</font><font color="#E5E5E5"> the</font>

902
00:42:38,470 --> 00:42:44,480
hacking team<font color="#CCCCCC"> rip kit they</font><font color="#E5E5E5"> actually as</font>

903
00:42:42,320 --> 00:42:48,020
part of the<font color="#CCCCCC"> recs way they packaged up</font>

904
00:42:44,480 --> 00:42:49,520
the NTFS driver<font color="#E5E5E5"> with their exploit so</font>

905
00:42:48,020 --> 00:42:53,060
that they could use<font color="#CCCCCC"> that</font><font color="#E5E5E5"> functionality</font>

906
00:42:49,520 --> 00:42:55,460
<font color="#E5E5E5">to rather than read a file out of the</font>

907
00:42:53,060 --> 00:42:57,080
operating system<font color="#E5E5E5"> they would persistently</font>

908
00:42:55,460 --> 00:42:59,270
inject their agent into the operating

909
00:42:57,080 --> 00:43:02,420
system<font color="#CCCCCC"> using the NTFS driver and that</font>

910
00:42:59,270 --> 00:43:04,640
was an<font color="#E5E5E5"> interesting at UEFI rootkit that</font>

911
00:43:02,420 --> 00:43:07,280
you that you can do<font color="#E5E5E5"> essentially that</font>

912
00:43:04,640 --> 00:43:08,600
from this exploit except you<font color="#E5E5E5"> don't even</font>

913
00:43:07,280 --> 00:43:12,830
need<font color="#E5E5E5"> to bring the NTFS driver with you</font>

914
00:43:08,600 --> 00:43:14,630
because it's already<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> system</font><font color="#E5E5E5"> so</font>

915
00:43:12,830 --> 00:43:17,450
what<font color="#CCCCCC"> can we do about this there is</font>

916
00:43:14,630 --> 00:43:21,440
there's been<font color="#E5E5E5"> some talk in the UEFI forum</font>

917
00:43:17,450 --> 00:43:24,439
about hardening<font color="#E5E5E5"> you if I like doing</font>

918
00:43:21,440 --> 00:43:27,320
<font color="#CCCCCC">hardening page in configuration actually</font>

919
00:43:24,440 --> 00:43:29,090
randomizing the<font color="#E5E5E5"> stack making it a non</font>

920
00:43:27,320 --> 00:43:31,580
executable sack<font color="#E5E5E5"> but none of that have</font>

921
00:43:29,090 --> 00:43:34,940
actually<font color="#CCCCCC"> been implemented yet</font><font color="#E5E5E5"> so we're</font>

922
00:43:31,580 --> 00:43:36,770
hoping that<font color="#E5E5E5"> this</font><font color="#CCCCCC"> will go in but it's</font>

923
00:43:34,940 --> 00:43:38,150
it's<font color="#E5E5E5"> not even in the reference code and</font>

924
00:43:36,770 --> 00:43:41,030
even<font color="#CCCCCC"> once it</font><font color="#E5E5E5"> goes into the reference</font>

925
00:43:38,150 --> 00:43:44,150
<font color="#E5E5E5">code it'll</font><font color="#CCCCCC"> take a while before it shows</font>

926
00:43:41,030 --> 00:43:48,130
up<font color="#E5E5E5"> in real vendor biases that are being</font>

927
00:43:44,150 --> 00:43:52,490
shipped into production<font color="#E5E5E5"> devices so</font>

928
00:43:48,130 --> 00:43:54,680
that's what so we if you<font color="#E5E5E5"> are concerned</font>

929
00:43:52,490 --> 00:43:56,629
about detecting this we can we can

930
00:43:54,680 --> 00:43:59,180
detect<font color="#E5E5E5"> it</font><font color="#CCCCCC"> with a fairly simple Yara rule</font>

931
00:43:56,630 --> 00:44:00,470
<font color="#E5E5E5">if you</font><font color="#CCCCCC"> have an IDs that can feed your</font>

932
00:43:59,180 --> 00:44:02,589
network data through<font color="#CCCCCC"> your aware</font><font color="#E5E5E5"> it's</font>

933
00:44:00,470 --> 00:44:05,529
like we just<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to look for</font><font color="#E5E5E5"> our</font>

934
00:44:02,590 --> 00:44:07,720
an<font color="#CCCCCC"> extra-long URL field</font><font color="#E5E5E5"> and it's a</font>

935
00:44:05,530 --> 00:44:10,000
pretty<font color="#E5E5E5"> simple rule so we can detect the</font>

936
00:44:07,720 --> 00:44:13,990
<font color="#CCCCCC">asrock buffer overflow live on the</font>

937
00:44:10,000 --> 00:44:17,520
network with this<font color="#CCCCCC"> Asics one is</font><font color="#E5E5E5"> basically</font>

938
00:44:13,990 --> 00:44:17,520
<font color="#CCCCCC">very</font><font color="#E5E5E5"> similar it's</font><font color="#CCCCCC"> just a different field</font>

939
00:44:17,610 --> 00:44:27,820
so if somebody<font color="#CCCCCC"> has already</font><font color="#E5E5E5"> modified your</font>

940
00:44:25,030 --> 00:44:30,940
<font color="#CCCCCC">bios a</font><font color="#E5E5E5"> useful way to detect</font>

941
00:44:27,820 --> 00:44:34,480
modifications to the system<font color="#E5E5E5"> after</font><font color="#CCCCCC"> the</font>

942
00:44:30,940 --> 00:44:36,670
fact is you<font color="#E5E5E5"> can use the the</font><font color="#CCCCCC"> chipset</font><font color="#E5E5E5"> tool</font>

943
00:44:34,480 --> 00:44:38,800
which is a<font color="#E5E5E5"> really</font><font color="#CCCCCC"> useful framework for</font>

944
00:44:36,670 --> 00:44:40,900
exploring<font color="#CCCCCC"> hardware interfaces in the</font>

945
00:44:38,800 --> 00:44:42,580
system you can<font color="#CCCCCC"> use it to</font><font color="#E5E5E5"> check for known</font>

946
00:44:40,900 --> 00:44:45,910
miss<font color="#E5E5E5"> configuration so like there's a</font>

947
00:44:42,580 --> 00:44:47,319
there's a lot of bits and locks and

948
00:44:45,910 --> 00:44:50,290
hardware configuration<font color="#E5E5E5"> that needs to be</font>

949
00:44:47,320 --> 00:44:53,200
<font color="#E5E5E5">set properly</font><font color="#CCCCCC"> in order for a system to be</font>

950
00:44:50,290 --> 00:44:57,160
<font color="#E5E5E5">secure</font><font color="#CCCCCC"> once it boots up</font><font color="#E5E5E5"> and we found</font>

951
00:44:53,200 --> 00:44:58,839
many many issues<font color="#E5E5E5"> where biases were not</font>

952
00:44:57,160 --> 00:45:00,629
setting<font color="#E5E5E5"> everything that they needed to</font>

953
00:44:58,840 --> 00:45:05,320
set or they were setting one part and

954
00:45:00,630 --> 00:45:07,870
not setting it in other<font color="#E5E5E5"> places so I</font>

955
00:45:05,320 --> 00:45:09,160
totally<font color="#CCCCCC"> recommend trying out chips like</font>

956
00:45:07,870 --> 00:45:14,020
<font color="#E5E5E5">it's also a good frame it's basically</font>

957
00:45:09,160 --> 00:45:15,399
<font color="#E5E5E5">there's a kernel driver to go get the</font>

958
00:45:14,020 --> 00:45:16,720
rep<font color="#CCCCCC"> Hardware access then it's all</font>

959
00:45:15,400 --> 00:45:20,890
<font color="#E5E5E5">written in Python so it's really</font><font color="#CCCCCC"> easy to</font>

960
00:45:16,720 --> 00:45:22,240
to build new tests and framework so<font color="#E5E5E5"> you</font>

961
00:45:20,890 --> 00:45:26,020
can use it<font color="#CCCCCC"> to</font><font color="#E5E5E5"> explore the system you can</font>

962
00:45:22,240 --> 00:45:29,770
also use it to build build exploits and

963
00:45:26,020 --> 00:45:31,360
proof<font color="#E5E5E5"> of concept to try things out but</font>

964
00:45:29,770 --> 00:45:32,980
<font color="#E5E5E5">there's basically some built-in</font>

965
00:45:31,360 --> 00:45:36,880
functionality<font color="#E5E5E5"> that's been added</font><font color="#CCCCCC"> to chip</font>

966
00:45:32,980 --> 00:45:39,730
<font color="#CCCCCC">sack to be able to extract</font><font color="#E5E5E5"> the spy image</font>

967
00:45:36,880 --> 00:45:41,020
from the<font color="#E5E5E5"> running system and then check</font>

968
00:45:39,730 --> 00:45:45,280
it<font color="#CCCCCC"> against the whitelist that you've</font>

969
00:45:41,020 --> 00:45:49,660
built previously<font color="#E5E5E5"> so if you've if you</font>

970
00:45:45,280 --> 00:45:52,450
think you've been hacked<font color="#E5E5E5"> or somebody has</font>

971
00:45:49,660 --> 00:45:53,830
implanted<font color="#CCCCCC"> a system in your implanted</font>

972
00:45:52,450 --> 00:45:58,770
your<font color="#E5E5E5"> bios made some modification</font>

973
00:45:53,830 --> 00:46:01,750
maliciously<font color="#E5E5E5"> maybe somebody managed to</font>

974
00:45:58,770 --> 00:46:02,950
find a runtime vulnerability<font color="#E5E5E5"> or there's</font>

975
00:46:01,750 --> 00:46:04,960
a<font color="#CCCCCC"> vulnerability and how it sets up the</font>

976
00:46:02,950 --> 00:46:07,120
<font color="#E5E5E5">system so the spy</font><font color="#CCCCCC"> right protection</font><font color="#E5E5E5"> is</font>

977
00:46:04,960 --> 00:46:09,940
not correctly configured<font color="#E5E5E5"> and somebody</font>

978
00:46:07,120 --> 00:46:12,490
the a is able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> modify that and</font>

979
00:46:09,940 --> 00:46:14,140
they're able<font color="#E5E5E5"> you can basically extract</font>

980
00:46:12,490 --> 00:46:16,450
<font color="#E5E5E5">the spy</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then check it against the</font>

981
00:46:14,140 --> 00:46:19,930
<font color="#CCCCCC">whitelist</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> also generate a</font>

982
00:46:16,450 --> 00:46:22,720
whitelist so like when you buy a new

983
00:46:19,930 --> 00:46:24,759
<font color="#E5E5E5">system if you if you believe it hasn't</font>

984
00:46:22,720 --> 00:46:26,080
been<font color="#CCCCCC"> tampered with yet</font><font color="#E5E5E5"> hopefully you</font>

985
00:46:24,760 --> 00:46:28,600
didn't have a supply chain<font color="#CCCCCC"> compromised</font>

986
00:46:26,080 --> 00:46:30,580
and along the way but if you<font color="#CCCCCC"> think it's</font>

987
00:46:28,600 --> 00:46:32,770
in a known good<font color="#CCCCCC"> state you can</font><font color="#E5E5E5"> generate a</font>

988
00:46:30,580 --> 00:46:36,759
whitelist using this second command line

989
00:46:32,770 --> 00:46:39,130
here<font color="#E5E5E5"> which will basically parse all of</font>

990
00:46:36,760 --> 00:46:42,910
the firmware volumes<font color="#E5E5E5"> generate hashes for</font>

991
00:46:39,130 --> 00:46:46,390
all of the images<font color="#E5E5E5"> in the in the</font><font color="#CCCCCC"> EFI</font>

992
00:46:42,910 --> 00:46:48,279
binary and then later maybe once you've

993
00:46:46,390 --> 00:46:50,319
traveled to Vegas with a bunch of<font color="#E5E5E5"> other</font>

994
00:46:48,280 --> 00:46:52,110
hackers<font color="#CCCCCC"> maybe you</font><font color="#E5E5E5"> think something</font>

995
00:46:50,320 --> 00:46:55,810
happened<font color="#E5E5E5"> you can then go go back and</font>

996
00:46:52,110 --> 00:46:57,760
<font color="#E5E5E5">check</font><font color="#CCCCCC"> your generator your you can check</font>

997
00:46:55,810 --> 00:46:58,930
your system<font color="#E5E5E5"> against this but this</font>

998
00:46:57,760 --> 00:47:02,290
whitelist that you generated previously

999
00:46:58,930 --> 00:47:07,629
<font color="#E5E5E5">so it's a really useful bit of</font>

1000
00:47:02,290 --> 00:47:10,509
<font color="#CCCCCC">functionality so some basic concepts is</font>

1001
00:47:07,630 --> 00:47:12,700
the<font color="#E5E5E5"> system firmware is really big it's</font>

1002
00:47:10,510 --> 00:47:15,880
complex it's highly privileged software

1003
00:47:12,700 --> 00:47:20,379
it runs<font color="#CCCCCC"> before the operating</font><font color="#E5E5E5"> system</font>

1004
00:47:15,880 --> 00:47:21,670
loads also<font color="#E5E5E5"> BIOS has</font><font color="#CCCCCC"> about has had a</font>

1005
00:47:20,380 --> 00:47:23,950
bunch of<font color="#CCCCCC"> issues where it's like it's</font>

1006
00:47:21,670 --> 00:47:25,620
been<font color="#E5E5E5"> kind of a mess and it's it's</font>

1007
00:47:23,950 --> 00:47:29,080
getting<font color="#E5E5E5"> better like the update process</font>

1008
00:47:25,620 --> 00:47:32,830
<font color="#CCCCCC">it still is a mess it's hard to update a</font>

1009
00:47:29,080 --> 00:47:37,240
lot<font color="#E5E5E5"> of people don't update BIOS but this</font>

1010
00:47:32,830 --> 00:47:39,130
this remote<font color="#E5E5E5"> attack surface</font><font color="#CCCCCC"> it's it keeps</font>

1011
00:47:37,240 --> 00:47:41,290
<font color="#CCCCCC">showing up in new places and</font><font color="#E5E5E5"> new places</font>

1012
00:47:39,130 --> 00:47:44,500
<font color="#E5E5E5">that didn't have a network remote attack</font>

1013
00:47:41,290 --> 00:47:46,120
<font color="#E5E5E5">service now suddenly do and part of that</font>

1014
00:47:44,500 --> 00:47:48,160
is just<font color="#E5E5E5"> because</font><font color="#CCCCCC"> of like trying to fix</font>

1015
00:47:46,120 --> 00:47:49,900
the problem<font color="#CCCCCC"> of doing system updates in</font>

1016
00:47:48,160 --> 00:47:52,480
the first place<font color="#CCCCCC"> people are adding new</font>

1017
00:47:49,900 --> 00:47:53,800
exploit vectors and adding new

1018
00:47:52,480 --> 00:47:55,090
vulnerabilities to<font color="#E5E5E5"> the system that</font>

1019
00:47:53,800 --> 00:47:59,530
<font color="#E5E5E5">didn't exist in the</font><font color="#CCCCCC"> first place</font>

1020
00:47:55,090 --> 00:48:02,740
so I think we've reached our end of<font color="#E5E5E5"> a</font>

1021
00:47:59,530 --> 00:48:05,430
time so anybody<font color="#E5E5E5"> have any questions do</font>

1022
00:48:02,740 --> 00:48:10,828
you<font color="#E5E5E5"> have</font><font color="#CCCCCC"> a time for</font><font color="#E5E5E5"> questions</font><font color="#CCCCCC"> okay</font>

1023
00:48:05,430 --> 00:48:10,828
[Applause]

