1
00:00:00,030 --> 00:00:06,540
hi good<font color="#CCCCCC"> evening everyone my name is para</font>

2
00:00:03,980 --> 00:00:07,950
<font color="#E5E5E5">Vincent Dominique and I are security</font>

3
00:00:06,540 --> 00:00:10,139
researchers from<font color="#CCCCCC"> the Technical</font>

4
00:00:07,950 --> 00:00:12,150
University of Berlin Germany and we're

5
00:00:10,139 --> 00:00:14,809
here to<font color="#E5E5E5"> talk about our automated</font><font color="#CCCCCC"> first</font>

6
00:00:12,150 --> 00:00:17,190
testing framework called<font color="#E5E5E5"> fuzz</font><font color="#CCCCCC"> X bikina</font>

7
00:00:14,809 --> 00:00:18,720
this is going to be a<font color="#CCCCCC"> longish talk so</font>

8
00:00:17,190 --> 00:00:21,869
I'll start with<font color="#E5E5E5"> a</font><font color="#CCCCCC"> brief summary of hard</font>

9
00:00:18,720 --> 00:00:24,180
work fuzz ex machina<font color="#CCCCCC"> or fiction for</font>

10
00:00:21,869 --> 00:00:27,060
short is an automated<font color="#E5E5E5"> fuzzing framework</font>

11
00:00:24,180 --> 00:00:29,460
<font color="#E5E5E5">what this means is that it</font><font color="#CCCCCC"> reduces to a</font>

12
00:00:27,060 --> 00:00:31,169
bare minimum<font color="#CCCCCC"> the manual effort that</font>

13
00:00:29,460 --> 00:00:33,930
typically goes into setting<font color="#CCCCCC"> up a fast</font>

14
00:00:31,170 --> 00:00:36,390
testing pipeline for<font color="#E5E5E5"> software now</font>

15
00:00:33,930 --> 00:00:38,730
naturally automating<font color="#E5E5E5"> fasting is a hard</font>

16
00:00:36,390 --> 00:00:41,280
problem<font color="#E5E5E5"> so to tackle some of these</font>

17
00:00:38,730 --> 00:00:42,809
challenges<font color="#CCCCCC"> POSIX lukina has clever</font>

18
00:00:41,280 --> 00:00:44,360
tricks up its sleeve<font color="#E5E5E5"> which</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> going</font>

19
00:00:42,809 --> 00:00:47,280
<font color="#E5E5E5">to talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> later in this presentation</font>

20
00:00:44,360 --> 00:00:50,100
<font color="#E5E5E5">we've developed</font><font color="#CCCCCC"> fixham with two use</font>

21
00:00:47,280 --> 00:00:52,860
cases in mind<font color="#CCCCCC"> BYOB or bring your</font><font color="#E5E5E5"> own</font>

22
00:00:50,100 --> 00:00:54,600
<font color="#E5E5E5">binary in this mode you can fast</font>

23
00:00:52,860 --> 00:00:57,170
<font color="#E5E5E5">automatically fast software that you</font>

24
00:00:54,600 --> 00:01:00,270
care about<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> other mode is</font>

25
00:00:57,170 --> 00:01:03,600
large-scale<font color="#E5E5E5"> distributed fuzzing in this</font>

26
00:01:00,270 --> 00:01:06,570
mode<font color="#CCCCCC"> you can use fixham to automatically</font>

27
00:01:03,600 --> 00:01:08,790
fuzz represent<font color="#CCCCCC"> or ease</font><font color="#E5E5E5"> of software</font>

28
00:01:06,570 --> 00:01:11,939
<font color="#E5E5E5">packages such as the arch linux package</font>

29
00:01:08,790 --> 00:01:13,500
repository<font color="#E5E5E5"> we believe in eating our own</font>

30
00:01:11,939 --> 00:01:15,389
dog food<font color="#CCCCCC"> so we have</font><font color="#E5E5E5"> tried</font><font color="#CCCCCC"> flexing</font>

31
00:01:13,500 --> 00:01:17,729
<font color="#E5E5E5">ourselves and found numerous bugs and</font>

32
00:01:15,390 --> 00:01:18,420
crashes<font color="#E5E5E5"> which will disclose later in</font>

33
00:01:17,729 --> 00:01:20,670
this presentation

34
00:01:18,420 --> 00:01:24,299
finally<font color="#E5E5E5"> if</font><font color="#CCCCCC"> exome itself is free and</font>

35
00:01:20,670 --> 00:01:29,310
<font color="#CCCCCC">open-source you can check it</font><font color="#E5E5E5"> out at the</font>

36
00:01:24,299 --> 00:01:31,020
linked github URL great so here's a

37
00:01:29,310 --> 00:01:33,689
<font color="#E5E5E5">small outline</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> our talk I'm going to</font>

38
00:01:31,020 --> 00:01:36,360
provide<font color="#CCCCCC"> some context behind</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> book</font><font color="#E5E5E5"> and</font>

39
00:01:33,689 --> 00:01:37,649
provide a brief<font color="#E5E5E5"> introduction then</font><font color="#CCCCCC"> I'm</font>

40
00:01:36,360 --> 00:01:40,380
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to show you</font><font color="#E5E5E5"> how you can use</font>

41
00:01:37,650 --> 00:01:42,540
<font color="#CCCCCC">flexsim to automatically</font><font color="#E5E5E5"> files</font><font color="#CCCCCC"> software</font>

42
00:01:40,380 --> 00:01:44,640
<font color="#E5E5E5">that you care</font><font color="#CCCCCC"> about the so-called BYOB</font>

43
00:01:42,540 --> 00:01:46,290
mode then<font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to hand over the</font>

44
00:01:44,640 --> 00:01:49,229
<font color="#CCCCCC">presentation to</font><font color="#E5E5E5"> Vincent who's going to</font>

45
00:01:46,290 --> 00:01:50,750
get into<font color="#CCCCCC"> fixham internals and then more</font>

46
00:01:49,229 --> 00:01:53,729
the bug dashboard so to speak and

47
00:01:50,750 --> 00:01:56,460
finally<font color="#E5E5E5"> Dominic is</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to present our</font>

48
00:01:53,729 --> 00:01:58,649
findings<font color="#CCCCCC"> a cool new feature called time</font>

49
00:01:56,460 --> 00:02:00,179
work<font color="#E5E5E5"> and finally conclude the</font>

50
00:01:58,649 --> 00:02:05,369
presentation<font color="#CCCCCC"> and before that</font><font color="#E5E5E5"> he's going</font>

51
00:02:00,180 --> 00:02:09,149
<font color="#E5E5E5">to show the demo great with that out of</font>

52
00:02:05,369 --> 00:02:11,459
<font color="#E5E5E5">the</font><font color="#CCCCCC"> way let me get started I'm sure most</font>

53
00:02:09,149 --> 00:02:13,560
<font color="#E5E5E5">of you are aware of what</font><font color="#CCCCCC"> fuzz testing</font><font color="#E5E5E5"> is</font>

54
00:02:11,459 --> 00:02:15,239
but<font color="#E5E5E5"> for those</font><font color="#CCCCCC"> who don't</font>

55
00:02:13,560 --> 00:02:17,099
it's essentially throwing<font color="#E5E5E5"> Carnegie's</font>

56
00:02:15,239 --> 00:02:19,349
input at a<font color="#CCCCCC"> program until</font><font color="#E5E5E5"> it breaks</font><font color="#CCCCCC"> so</font>

57
00:02:17,099 --> 00:02:22,380
<font color="#CCCCCC">it's a bit like shooting</font><font color="#E5E5E5"> in the dark but</font>

58
00:02:19,349 --> 00:02:24,299
not exactly<font color="#CCCCCC"> and the idea is</font><font color="#E5E5E5"> not new in</font>

59
00:02:22,380 --> 00:02:27,569
<font color="#CCCCCC">fact anecdotally speaking it dates</font><font color="#E5E5E5"> back</font>

60
00:02:24,300 --> 00:02:30,209
<font color="#E5E5E5">to a computer science assignment</font><font color="#CCCCCC"> in 1988</font>

61
00:02:27,569 --> 00:02:32,399
provided by<font color="#CCCCCC"> Professor Bart Miller at the</font>

62
00:02:30,209 --> 00:02:34,319
University of Wisconsin when he asked

63
00:02:32,400 --> 00:02:36,540
students to write the<font color="#E5E5E5"> so-called first</font>

64
00:02:34,319 --> 00:02:39,208
generator program<font color="#E5E5E5"> the goal of this</font>

65
00:02:36,540 --> 00:02:42,200
program<font color="#E5E5E5"> was</font><font color="#CCCCCC"> to provide</font><font color="#E5E5E5"> an unpredictable</font>

66
00:02:39,209 --> 00:02:45,450
<font color="#E5E5E5">input stream to test the resilience of</font>

67
00:02:42,200 --> 00:02:47,280
UNIX utility programs<font color="#E5E5E5"> although</font><font color="#CCCCCC"> this</font>

68
00:02:45,450 --> 00:02:49,470
<font color="#E5E5E5">approach was rather dumb it was</font>

69
00:02:47,280 --> 00:02:51,840
<font color="#E5E5E5">surprisingly effective and</font><font color="#CCCCCC"> one-third of</font>

70
00:02:49,470 --> 00:02:56,580
the UNIX utility programs that were

71
00:02:51,840 --> 00:02:59,220
<font color="#CCCCCC">tested crashed ever since then we've</font>

72
00:02:56,580 --> 00:03:01,920
come a long<font color="#E5E5E5"> way in making fast testing</font>

73
00:02:59,220 --> 00:03:04,560
more effective we security researchers

74
00:03:01,920 --> 00:03:06,208
quickly figured that simply random

75
00:03:04,560 --> 00:03:08,670
testing is not very<font color="#CCCCCC"> effective because</font>

76
00:03:06,209 --> 00:03:11,220
while it can<font color="#E5E5E5"> quickly find shallow bugs</font>

77
00:03:08,670 --> 00:03:16,700
<font color="#CCCCCC">it cannot test deep portions of the</font>

78
00:03:11,220 --> 00:03:18,930
program<font color="#E5E5E5"> so in the early noughties</font>

79
00:03:16,700 --> 00:03:21,298
some of the<font color="#E5E5E5"> researchers proposed a</font>

80
00:03:18,930 --> 00:03:24,900
<font color="#CCCCCC">so-called</font><font color="#E5E5E5"> input specification guided</font>

81
00:03:21,299 --> 00:03:25,579
<font color="#CCCCCC">fast testing here the main idea was tell</font>

82
00:03:24,900 --> 00:03:28,920
<font color="#E5E5E5">the</font><font color="#CCCCCC"> fuzzer</font>

83
00:03:25,579 --> 00:03:32,280
what the program does<font color="#E5E5E5"> by feeding it a</font>

84
00:03:28,920 --> 00:03:34,290
specification<font color="#CCCCCC"> of the program</font><font color="#E5E5E5"> one way to</font>

85
00:03:32,280 --> 00:03:37,290
provide such a specification<font color="#E5E5E5"> is for</font>

86
00:03:34,290 --> 00:03:39,630
example<font color="#CCCCCC"> tell the fuzzer what inputs to</font>

87
00:03:37,290 --> 00:03:42,510
the program on<font color="#E5E5E5"> the test looks like for</font>

88
00:03:39,630 --> 00:03:44,790
example<font color="#E5E5E5"> let's say you're passing the TCP</font>

89
00:03:42,510 --> 00:03:48,450
protocol parser program what<font color="#E5E5E5"> you would</font>

90
00:03:44,790 --> 00:03:50,670
do is define the<font color="#CCCCCC"> so called TCP data</font>

91
00:03:48,450 --> 00:03:53,790
format so<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> phaser can</font>

92
00:03:50,670 --> 00:03:55,649
<font color="#E5E5E5">meaningfully</font><font color="#CCCCCC"> first test your program</font><font color="#E5E5E5"> now</font>

93
00:03:53,790 --> 00:03:58,170
although<font color="#E5E5E5"> this was much better than</font>

94
00:03:55,650 --> 00:04:00,690
random<font color="#CCCCCC"> fuzz testing it had its own</font>

95
00:03:58,170 --> 00:04:03,388
limitations for<font color="#E5E5E5"> one you needed the</font>

96
00:04:00,690 --> 00:04:05,160
specification<font color="#CCCCCC"> to do such testing and in</font>

97
00:04:03,389 --> 00:04:07,889
several<font color="#CCCCCC"> cases getting</font><font color="#E5E5E5"> a specification</font>

98
00:04:05,160 --> 00:04:10,920
<font color="#E5E5E5">was difficult because either the program</font>

99
00:04:07,889 --> 00:04:12,840
was poorly documented<font color="#E5E5E5"> or for some other</font>

100
00:04:10,920 --> 00:04:15,888
reason specification did not simply

101
00:04:12,840 --> 00:04:18,810
exist and the other problem was<font color="#E5E5E5"> that</font>

102
00:04:15,889 --> 00:04:21,060
when you drive<font color="#CCCCCC"> fuzzer</font><font color="#E5E5E5"> using a</font>

103
00:04:18,810 --> 00:04:23,789
specification<font color="#E5E5E5"> you might not actually</font><font color="#CCCCCC"> be</font>

104
00:04:21,060 --> 00:04:26,370
testing undocumented features<font color="#E5E5E5"> so what</font>

105
00:04:23,789 --> 00:04:28,199
happens is there<font color="#CCCCCC"> is a divergence</font><font color="#E5E5E5"> between</font>

106
00:04:26,370 --> 00:04:30,030
specification and implementation<font color="#E5E5E5"> and</font>

107
00:04:28,199 --> 00:04:32,580
you're targeting<font color="#E5E5E5"> your fussing at</font>

108
00:04:30,030 --> 00:04:35,820
specification and that might<font color="#E5E5E5"> not uncover</font>

109
00:04:32,580 --> 00:04:38,250
bugs in undocumented<font color="#E5E5E5"> features so finally</font>

110
00:04:35,820 --> 00:04:40,290
in the late<font color="#E5E5E5"> not East</font><font color="#CCCCCC"> researchers</font>

111
00:04:38,250 --> 00:04:42,180
<font color="#E5E5E5">proposed so-called feedback guided</font>

112
00:04:40,290 --> 00:04:44,070
<font color="#E5E5E5">fuzzing and the main idea behind</font>

113
00:04:42,180 --> 00:04:48,090
feedback headed fuzzing is do away

114
00:04:44,070 --> 00:04:50,159
entirely with having to require some

115
00:04:48,090 --> 00:04:52,530
sort of specification<font color="#E5E5E5"> and let the</font><font color="#CCCCCC"> phaser</font>

116
00:04:50,160 --> 00:04:55,139
automatically<font color="#E5E5E5"> learn about program</font>

117
00:04:52,530 --> 00:04:57,659
<font color="#E5E5E5">behavior one popular technique to learn</font>

118
00:04:55,139 --> 00:04:59,880
about program behavior<font color="#E5E5E5"> on the fly is</font>

119
00:04:57,660 --> 00:05:02,340
coverage guided<font color="#CCCCCC"> fast</font><font color="#E5E5E5"> testing in this</font>

120
00:04:59,880 --> 00:05:03,840
technique<font color="#CCCCCC"> what the father does</font><font color="#E5E5E5"> is it</font>

121
00:05:02,340 --> 00:05:05,820
essentially<font color="#E5E5E5"> instruments' the program</font>

122
00:05:03,840 --> 00:05:08,638
such<font color="#CCCCCC"> that it can monitor program</font>

123
00:05:05,820 --> 00:05:10,409
coverage and then sees how different

124
00:05:08,639 --> 00:05:12,570
inputs that<font color="#E5E5E5"> are fed</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the program</font>

125
00:05:10,410 --> 00:05:16,220
<font color="#CCCCCC">change</font><font color="#E5E5E5"> program coverage with the idea</font>

126
00:05:12,570 --> 00:05:18,479
being that greater coverage indicates

127
00:05:16,220 --> 00:05:20,460
execution of some<font color="#E5E5E5"> interesting portion</font><font color="#CCCCCC"> of</font>

128
00:05:18,479 --> 00:05:22,860
the<font color="#CCCCCC"> program and this</font><font color="#E5E5E5"> is retain for</font>

129
00:05:20,460 --> 00:05:24,570
future fuzzing<font color="#E5E5E5"> and feedback driven</font>

130
00:05:22,860 --> 00:05:26,580
fuzzing has been surprisingly very

131
00:05:24,570 --> 00:05:29,400
effective<font color="#E5E5E5"> and found numerous bugs and</font>

132
00:05:26,580 --> 00:05:31,830
vulnerabilities this brings me<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font>

133
00:05:29,400 --> 00:05:33,989
<font color="#E5E5E5">state of the art so today you find</font>

134
00:05:31,830 --> 00:05:35,909
<font color="#E5E5E5">frameworks such as Google's OSS</font><font color="#CCCCCC"> files</font>

135
00:05:33,990 --> 00:05:38,760
and similar offerings<font color="#E5E5E5"> by Microsoft and</font>

136
00:05:35,910 --> 00:05:41,300
<font color="#CCCCCC">Yahoo which take these advances over</font><font color="#E5E5E5"> the</font>

137
00:05:38,760 --> 00:05:44,700
years<font color="#E5E5E5"> and scale it up at a massive level</font>

138
00:05:41,300 --> 00:05:46,680
<font color="#E5E5E5">so you have for example</font><font color="#CCCCCC"> Google</font><font color="#E5E5E5"> OSS fuzz</font>

139
00:05:44,700 --> 00:05:48,389
<font color="#E5E5E5">which is known to churn out four</font>

140
00:05:46,680 --> 00:05:52,289
trillion<font color="#E5E5E5"> test cases per week this</font><font color="#CCCCCC"> is</font>

141
00:05:48,389 --> 00:05:55,139
<font color="#E5E5E5">massive so the idea is that these</font>

142
00:05:52,289 --> 00:05:57,599
initiatives<font color="#E5E5E5"> provide the infrastructure</font>

143
00:05:55,139 --> 00:05:59,970
to fast programs and also<font color="#E5E5E5"> the fuzzing</font>

144
00:05:57,599 --> 00:06:03,870
<font color="#E5E5E5">tool chain so all the developer needs</font><font color="#CCCCCC"> to</font>

145
00:05:59,970 --> 00:06:08,360
do is provide test cases seeds and so on

146
00:06:03,870 --> 00:06:11,849
and so forth and the impact has been

147
00:06:08,360 --> 00:06:14,070
massive for example Google's fuzz<font color="#E5E5E5"> bot</font>

148
00:06:11,849 --> 00:06:17,909
has exposed<font color="#E5E5E5"> over thousand</font><font color="#CCCCCC"> open-source</font>

149
00:06:14,070 --> 00:06:20,370
bugs<font color="#CCCCCC"> in various</font><font color="#E5E5E5"> you user space programs</font>

150
00:06:17,910 --> 00:06:24,240
and not only this it has also<font color="#E5E5E5"> uncovered</font>

151
00:06:20,370 --> 00:06:26,130
in similar initiatives various bugs<font color="#E5E5E5"> in</font>

152
00:06:24,240 --> 00:06:29,039
the<font color="#CCCCCC"> Linux</font><font color="#E5E5E5"> kernel itself</font><font color="#CCCCCC"> which is used in</font>

153
00:06:26,130 --> 00:06:32,070
millions of<font color="#E5E5E5"> devices now after</font><font color="#CCCCCC"> Hartley it</font>

154
00:06:29,039 --> 00:06:35,099
was found in open<font color="#E5E5E5"> SSL some researchers</font>

155
00:06:32,070 --> 00:06:37,830
at Google showed<font color="#E5E5E5"> that had open SSL</font>

156
00:06:35,099 --> 00:06:39,930
actually taken up continuous fuzzing of

157
00:06:37,830 --> 00:06:42,060
its codebase<font color="#E5E5E5"> heartbeat would have been</font>

158
00:06:39,930 --> 00:06:44,430
in a matter<font color="#E5E5E5"> of seconds with the tooling</font>

159
00:06:42,060 --> 00:06:48,060
that<font color="#E5E5E5"> we have today the jiff on the right</font>

160
00:06:44,430 --> 00:06:50,970
shows<font color="#CCCCCC"> you how quick it is to</font><font color="#E5E5E5"> find ha a</font>

161
00:06:48,060 --> 00:06:54,720
bug like<font color="#E5E5E5"> heartbleed using modern fuzzing</font>

162
00:06:50,970 --> 00:06:57,150
<font color="#CCCCCC">2 chainz so clearly we've come a long</font>

163
00:06:54,720 --> 00:06:59,430
<font color="#E5E5E5">way and made a lot of progress</font><font color="#CCCCCC"> but yet</font>

164
00:06:57,150 --> 00:07:02,549
we<font color="#E5E5E5"> still find buffer overflows</font><font color="#CCCCCC"> in</font>

165
00:06:59,430 --> 00:07:04,530
various programs<font color="#E5E5E5"> like it's 1996</font><font color="#CCCCCC"> so</font>

166
00:07:02,550 --> 00:07:08,130
clearly there's a<font color="#E5E5E5"> divergence between</font>

167
00:07:04,530 --> 00:07:10,559
what exists<font color="#E5E5E5"> and the kind of bugs we find</font>

168
00:07:08,130 --> 00:07:13,620
<font color="#E5E5E5">today so the question is why aren't</font>

169
00:07:10,560 --> 00:07:17,910
developers and QA teams not fuzzing yet

170
00:07:13,620 --> 00:07:19,800
<font color="#E5E5E5">right</font><font color="#CCCCCC"> and the truth is actually that we</font>

171
00:07:17,910 --> 00:07:23,370
<font color="#E5E5E5">aren't fuzzing but we</font><font color="#CCCCCC"> aren't</font><font color="#E5E5E5"> fuzzing</font><font color="#CCCCCC"> the</font>

172
00:07:19,800 --> 00:07:24,960
sub 1% what I mean is if you look<font color="#E5E5E5"> at the</font>

173
00:07:23,370 --> 00:07:26,759
scale of software that<font color="#E5E5E5"> is shipped in a</font>

174
00:07:24,960 --> 00:07:28,469
modern<font color="#E5E5E5"> OS distribution which is</font>

175
00:07:26,759 --> 00:07:32,190
typically around<font color="#E5E5E5"> 50,000 software</font>

176
00:07:28,470 --> 00:07:33,900
projects and the scale<font color="#CCCCCC"> of let's say the</font>

177
00:07:32,190 --> 00:07:36,570
most popular<font color="#CCCCCC"> open source passing</font>

178
00:07:33,900 --> 00:07:38,400
initiative which is Google OS as fast<font color="#E5E5E5"> it</font>

179
00:07:36,570 --> 00:07:41,280
only contains 150 software projects so

180
00:07:38,400 --> 00:07:44,489
this<font color="#E5E5E5"> is less</font><font color="#CCCCCC"> than</font><font color="#E5E5E5"> 1% of the</font><font color="#CCCCCC"> software</font>

181
00:07:41,280 --> 00:07:46,619
<font color="#E5E5E5">that is shipped to users</font><font color="#CCCCCC"> end</font><font color="#E5E5E5"> users and</font>

182
00:07:44,490 --> 00:07:49,020
bear in mind<font color="#CCCCCC"> that</font><font color="#E5E5E5"> Google OSS files has</font>

183
00:07:46,620 --> 00:07:51,780
been around for approximately<font color="#CCCCCC"> 2 years</font>

184
00:07:49,020 --> 00:07:55,109
<font color="#E5E5E5">now so it's somewhat</font><font color="#CCCCCC"> surprising that</font>

185
00:07:51,780 --> 00:07:56,729
there are so few projects still in<font color="#E5E5E5"> spite</font>

186
00:07:55,110 --> 00:07:58,979
of the fact<font color="#E5E5E5"> that fuzzing</font><font color="#CCCCCC"> tool chains</font>

187
00:07:56,729 --> 00:08:03,870
have really made<font color="#E5E5E5"> it easy for developers</font>

188
00:07:58,979 --> 00:08:06,030
<font color="#E5E5E5">to test their code so let</font><font color="#CCCCCC"> me qualify the</font>

189
00:08:03,870 --> 00:08:08,880
question that<font color="#E5E5E5"> I posed a couple of slides</font>

190
00:08:06,030 --> 00:08:10,859
back<font color="#E5E5E5"> the question is not that we</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> not</font>

191
00:08:08,880 --> 00:08:13,860
<font color="#E5E5E5">fuzzing but we're not fuzzing enough</font>

192
00:08:10,860 --> 00:08:21,300
<font color="#CCCCCC">we're not</font><font color="#E5E5E5"> caring about the</font><font color="#CCCCCC"> other 99% of</font>

193
00:08:13,860 --> 00:08:25,500
software packages so<font color="#E5E5E5"> to to understand</font>

194
00:08:21,300 --> 00:08:27,210
why we<font color="#E5E5E5"> might</font><font color="#CCCCCC"> not be fuzzing enough I did</font>

195
00:08:25,500 --> 00:08:30,870
an experiment<font color="#CCCCCC"> so I'm going to present</font>

196
00:08:27,210 --> 00:08:33,179
<font color="#E5E5E5">two perspectives about open sourcing</font>

197
00:08:30,870 --> 00:08:35,339
initiatives such as Google<font color="#E5E5E5"> OSS first one</font>

198
00:08:33,179 --> 00:08:37,260
<font color="#CCCCCC">I'm going to present</font><font color="#E5E5E5"> the perspective of</font>

199
00:08:35,339 --> 00:08:39,959
a developer who is interested<font color="#E5E5E5"> in</font>

200
00:08:37,260 --> 00:08:41,819
enrolling their project<font color="#E5E5E5"> into this</font>

201
00:08:39,958 --> 00:08:44,339
<font color="#CCCCCC">program</font><font color="#E5E5E5"> and also the perspective</font><font color="#CCCCCC"> of</font>

202
00:08:41,820 --> 00:08:46,800
Google so let's see what the developer

203
00:08:44,339 --> 00:08:50,430
perspective<font color="#CCCCCC"> is so here's what I did I</font>

204
00:08:46,800 --> 00:08:52,469
actually went ahead and try to enroll<font color="#E5E5E5"> a</font>

205
00:08:50,430 --> 00:08:53,510
software popular software package<font color="#CCCCCC"> called</font>

206
00:08:52,470 --> 00:08:55,310
open<font color="#CCCCCC"> we</font>

207
00:08:53,510 --> 00:08:57,260
for those of you who are not<font color="#CCCCCC"> aware of</font>

208
00:08:55,310 --> 00:09:01,790
<font color="#CCCCCC">open</font><font color="#E5E5E5"> we switch it's essentially a</font>

209
00:08:57,260 --> 00:09:05,300
software virtual<font color="#E5E5E5"> networking switch which</font>

210
00:09:01,790 --> 00:09:08,270
does routine packet processing<font color="#E5E5E5"> so I went</font>

211
00:09:05,300 --> 00:09:10,790
ahead and enrolled this project<font color="#E5E5E5"> into OS</font>

212
00:09:08,270 --> 00:09:12,980
<font color="#E5E5E5">as fast and in the process what I found</font>

213
00:09:10,790 --> 00:09:15,250
is<font color="#CCCCCC"> that I needed to do three things</font>

214
00:09:12,980 --> 00:09:19,220
first<font color="#CCCCCC"> I needed to</font><font color="#E5E5E5"> write a test program</font>

215
00:09:15,250 --> 00:09:22,190
which is essentially<font color="#E5E5E5"> C or C++ program</font>

216
00:09:19,220 --> 00:09:24,800
which accepts input<font color="#E5E5E5"> from the fuzzing</font>

217
00:09:22,190 --> 00:09:28,190
tool chain<font color="#E5E5E5"> and feeds it to the</font><font color="#CCCCCC"> API on</font>

218
00:09:24,800 --> 00:09:31,130
the<font color="#E5E5E5"> test second I needed to provide a</font>

219
00:09:28,190 --> 00:09:34,070
<font color="#CCCCCC">seed corpus or a list</font><font color="#E5E5E5"> of files that</font><font color="#CCCCCC"> I</font>

220
00:09:31,130 --> 00:09:37,130
consider somewhat valid files by the

221
00:09:34,070 --> 00:09:38,930
program<font color="#CCCCCC"> under</font><font color="#E5E5E5"> test for example</font><font color="#CCCCCC"> if the</font>

222
00:09:37,130 --> 00:09:41,209
switch typically<font color="#E5E5E5"> parts is let's say TCP</font>

223
00:09:38,930 --> 00:09:44,239
payloads<font color="#CCCCCC"> I need to provide a bunch of</font>

224
00:09:41,209 --> 00:09:46,550
TCP payloads<font color="#E5E5E5"> as the seed purpose finally</font>

225
00:09:44,240 --> 00:09:49,490
I needed to<font color="#E5E5E5"> write a build script such</font>

226
00:09:46,550 --> 00:09:51,770
that the<font color="#E5E5E5"> software would</font><font color="#CCCCCC"> be fetched from</font>

227
00:09:49,490 --> 00:09:53,839
<font color="#E5E5E5">let's say github and then automatically</font>

228
00:09:51,770 --> 00:09:55,760
compile it and linked<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> fuzzer</font>

229
00:09:53,839 --> 00:09:58,490
binary that would be run on<font color="#E5E5E5"> the Google</font>

230
00:09:55,760 --> 00:10:02,390
infrastructure<font color="#E5E5E5"> and to do this</font><font color="#CCCCCC"> I also had</font>

231
00:09:58,490 --> 00:10:04,399
to provide<font color="#E5E5E5"> a docker file which makes it</font>

232
00:10:02,390 --> 00:10:07,370
possible to<font color="#E5E5E5"> run the fuzzer in a</font>

233
00:10:04,399 --> 00:10:09,350
containerized<font color="#E5E5E5"> environment so this is not</font>

234
00:10:07,370 --> 00:10:11,180
<font color="#E5E5E5">I would I wouldn't say this is too much</font>

235
00:10:09,350 --> 00:10:13,730
<font color="#E5E5E5">work for the developer but it's</font>

236
00:10:11,180 --> 00:10:16,069
certainly not trivial<font color="#E5E5E5"> especially for</font>

237
00:10:13,730 --> 00:10:18,680
those<font color="#E5E5E5"> who have let's say little</font>

238
00:10:16,070 --> 00:10:23,120
<font color="#E5E5E5">knowledge of fuzzing</font><font color="#CCCCCC"> toolchains</font><font color="#E5E5E5"> and the</font>

239
00:10:18,680 --> 00:10:24,890
<font color="#E5E5E5">process passing itself and then I</font>

240
00:10:23,120 --> 00:10:28,130
present to you<font color="#E5E5E5"> the Googler perspective</font>

241
00:10:24,890 --> 00:10:30,230
so what I<font color="#E5E5E5"> did next was like I said</font>

242
00:10:28,130 --> 00:10:34,160
before I was surprised<font color="#E5E5E5"> that even</font><font color="#CCCCCC"> after</font>

243
00:10:30,230 --> 00:10:37,040
<font color="#E5E5E5">two years</font><font color="#CCCCCC"> Google OSS</font><font color="#E5E5E5"> fuzz has under 150</font>

244
00:10:34,160 --> 00:10:40,040
<font color="#E5E5E5">projects so I I spoke to a Googler</font>

245
00:10:37,040 --> 00:10:41,569
called Kostya who is closely<font color="#E5E5E5"> involved</font>

246
00:10:40,040 --> 00:10:45,560
with<font color="#E5E5E5"> this initiative and asked him why</font>

247
00:10:41,570 --> 00:10:47,060
is this<font color="#E5E5E5"> disparity between the time OS as</font>

248
00:10:45,560 --> 00:10:49,430
<font color="#E5E5E5">far as has been around and so few</font>

249
00:10:47,060 --> 00:10:51,500
projects right<font color="#E5E5E5"> and this what he said he</font>

250
00:10:49,430 --> 00:10:53,959
<font color="#E5E5E5">said that the biggest reasons people are</font>

251
00:10:51,500 --> 00:10:56,990
not<font color="#E5E5E5"> using initiatives such as OSS fuzz</font>

252
00:10:53,959 --> 00:10:59,119
<font color="#E5E5E5">is that there is huge inertia</font><font color="#CCCCCC"> on the</font>

253
00:10:56,990 --> 00:11:02,120
part of developers there's lack of

254
00:10:59,120 --> 00:11:05,290
awareness<font color="#E5E5E5"> religious reasons which I</font>

255
00:11:02,120 --> 00:11:08,320
don't<font color="#E5E5E5"> know what they are but they exist</font>

256
00:11:05,290 --> 00:11:10,839
<font color="#E5E5E5">and no time right</font><font color="#CCCCCC"> so then we got</font>

257
00:11:08,320 --> 00:11:12,820
together and we<font color="#CCCCCC"> thought okay</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> can't do</font>

258
00:11:10,839 --> 00:11:14,889
much about religious reasons and<font color="#E5E5E5"> lack</font><font color="#CCCCCC"> of</font>

259
00:11:12,820 --> 00:11:16,870
awareness of course what we can do is

260
00:11:14,889 --> 00:11:18,550
come to platforms like black black<font color="#E5E5E5"> hat</font>

261
00:11:16,870 --> 00:11:21,639
and<font color="#E5E5E5"> asked you to</font><font color="#CCCCCC"> fuss if you're a</font>

262
00:11:18,550 --> 00:11:23,769
<font color="#E5E5E5">software developer</font><font color="#CCCCCC"> so I'm gonna do</font><font color="#E5E5E5"> that</font>

263
00:11:21,639 --> 00:11:26,350
and<font color="#CCCCCC"> say please use</font><font color="#E5E5E5"> us as far as please</font>

264
00:11:23,769 --> 00:11:30,209
use<font color="#CCCCCC"> fiction and fuzz your software</font>

265
00:11:26,350 --> 00:11:34,600
however<font color="#E5E5E5"> what we</font><font color="#CCCCCC"> can do is try to address</font>

266
00:11:30,209 --> 00:11:36,279
<font color="#E5E5E5">huge inertia and no time right</font><font color="#CCCCCC"> so how</font>

267
00:11:34,600 --> 00:11:39,100
can we make<font color="#CCCCCC"> it</font><font color="#E5E5E5"> easier for software</font>

268
00:11:36,279 --> 00:11:42,990
developers to fast test the software

269
00:11:39,100 --> 00:11:45,240
that<font color="#E5E5E5"> they care</font><font color="#CCCCCC"> about right so what is</font>

270
00:11:42,990 --> 00:11:47,769
<font color="#CCCCCC">disappered from my conversation with</font>

271
00:11:45,240 --> 00:11:50,709
<font color="#CCCCCC">Kostya and my own experience</font><font color="#E5E5E5"> writing</font>

272
00:11:47,769 --> 00:11:54,550
test cases<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the developer</font>

273
00:11:50,709 --> 00:11:57,790
expectation is that<font color="#CCCCCC"> I provide</font><font color="#E5E5E5"> these</font><font color="#CCCCCC"> so</font>

274
00:11:54,550 --> 00:12:02,560
<font color="#CCCCCC">called</font><font color="#E5E5E5"> fuzzing frameworks my github URL</font>

275
00:11:57,790 --> 00:12:06,149
and the the fuzzing bot or the fuzzing

276
00:12:02,560 --> 00:12:08,709
service says<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> I take your URL</font><font color="#CCCCCC"> and I</font>

277
00:12:06,149 --> 00:12:10,149
and I give<font color="#E5E5E5"> you the box that I found</font>

278
00:12:08,709 --> 00:12:12,069
<font color="#E5E5E5">right so that's the developer</font>

279
00:12:10,149 --> 00:12:14,889
expectation<font color="#E5E5E5"> I provide</font><font color="#CCCCCC"> you the URL you</font>

280
00:12:12,069 --> 00:12:18,250
<font color="#E5E5E5">give me bugs and we are done however</font><font color="#CCCCCC"> the</font>

281
00:12:14,889 --> 00:12:20,079
reality is that it it requires

282
00:12:18,250 --> 00:12:22,750
non-trivial amount of work on the part

283
00:12:20,079 --> 00:12:24,638
<font color="#CCCCCC">of developers for example providing a</font>

284
00:12:22,750 --> 00:12:27,040
test program<font color="#CCCCCC"> seats and some</font>

285
00:12:24,639 --> 00:12:29,260
configuration<font color="#CCCCCC"> and a bill</font><font color="#E5E5E5"> script and this</font>

286
00:12:27,040 --> 00:12:32,170
can be quickly<font color="#E5E5E5"> discouraging enough for</font>

287
00:12:29,260 --> 00:12:35,019
the developers<font color="#E5E5E5"> to</font><font color="#CCCCCC"> not really</font><font color="#E5E5E5"> take it</font>

288
00:12:32,170 --> 00:12:36,969
<font color="#E5E5E5">take it further</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> so there's a</font>

289
00:12:35,019 --> 00:12:42,040
divergence<font color="#E5E5E5"> between expectation and</font>

290
00:12:36,970 --> 00:12:44,319
reality which<font color="#CCCCCC"> I decipher so at this</font>

291
00:12:42,040 --> 00:12:46,689
point this was<font color="#CCCCCC"> the main problem</font><font color="#E5E5E5"> we were</font>

292
00:12:44,319 --> 00:12:49,389
faced with which is that if we<font color="#E5E5E5"> take the</font>

293
00:12:46,690 --> 00:12:51,880
route<font color="#CCCCCC"> of Google OSS</font><font color="#E5E5E5"> fuzz which requires</font>

294
00:12:49,389 --> 00:12:54,010
<font color="#E5E5E5">developer participation we pretty much</font>

295
00:12:51,880 --> 00:12:55,779
encounter the same problems as they will

296
00:12:54,010 --> 00:12:58,480
and we<font color="#E5E5E5"> will not be able to scale up</font>

297
00:12:55,779 --> 00:13:00,970
<font color="#E5E5E5">fuzzing further so our main</font><font color="#CCCCCC"> philosophy</font>

298
00:12:58,480 --> 00:13:05,829
was<font color="#CCCCCC"> to start automatic and go to manual</font>

299
00:13:00,970 --> 00:13:09,100
<font color="#E5E5E5">only</font><font color="#CCCCCC"> if necessary so we</font><font color="#E5E5E5"> essentially the</font>

300
00:13:05,829 --> 00:13:11,138
idea<font color="#E5E5E5"> is we we want the developer to do</font>

301
00:13:09,100 --> 00:13:13,569
as little<font color="#E5E5E5"> work as possible right in the</font>

302
00:13:11,139 --> 00:13:16,000
beginning<font color="#E5E5E5"> to enroll their project but</font><font color="#CCCCCC"> in</font>

303
00:13:13,569 --> 00:13:18,430
case the automatic automatic part does

304
00:13:16,000 --> 00:13:18,880
not<font color="#E5E5E5"> work we fall back to</font><font color="#CCCCCC"> manual</font><font color="#E5E5E5"> and</font>

305
00:13:18,430 --> 00:13:21,489
provide

306
00:13:18,880 --> 00:13:25,630
developer to investigate<font color="#E5E5E5"> potentially</font>

307
00:13:21,490 --> 00:13:27,790
manually so with this design philosophy

308
00:13:25,630 --> 00:13:30,550
in mind<font color="#E5E5E5"> we have design fiction and at</font>

309
00:13:27,790 --> 00:13:35,170
this point<font color="#E5E5E5"> I'm going to show you a demo</font>

310
00:13:30,550 --> 00:13:37,270
of how<font color="#E5E5E5"> you can use fixham to essentially</font>

311
00:13:35,170 --> 00:13:39,280
fast<font color="#CCCCCC"> software that you care about in</font>

312
00:13:37,270 --> 00:13:41,949
other words<font color="#CCCCCC"> be biome</font><font color="#E5E5E5"> be you note and</font>

313
00:13:39,280 --> 00:13:47,100
<font color="#E5E5E5">here my colleague Vincent is going to</font>

314
00:13:41,950 --> 00:13:49,860
help me with the demo thanks Wilson

315
00:13:47,100 --> 00:13:54,300
so what you're<font color="#E5E5E5"> seeing is a terminal</font>

316
00:13:49,860 --> 00:13:57,730
where we have set up<font color="#CCCCCC"> the fixham to chain</font>

317
00:13:54,300 --> 00:14:00,310
<font color="#E5E5E5">beforehand and now we are going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> show</font>

318
00:13:57,730 --> 00:14:01,750
you how you can<font color="#E5E5E5"> run fix them on a binary</font>

319
00:14:00,310 --> 00:14:05,890
you care about<font color="#E5E5E5"> so first we're going to</font>

320
00:14:01,750 --> 00:14:10,290
<font color="#CCCCCC">show you a configuration file that is</font>

321
00:14:05,890 --> 00:14:17,050
required to run fixham so let's do cat

322
00:14:10,290 --> 00:14:19,630
configuration file<font color="#CCCCCC"> so here's what we</font>

323
00:14:17,050 --> 00:14:21,729
want<font color="#E5E5E5"> the developers to provide us the</font>

324
00:14:19,630 --> 00:14:23,860
name of<font color="#CCCCCC"> the software</font><font color="#E5E5E5"> package this is</font>

325
00:14:21,730 --> 00:14:26,080
trivial right<font color="#E5E5E5"> the out there which is</font>

326
00:14:23,860 --> 00:14:29,290
where the<font color="#E5E5E5"> results of passing would be</font>

327
00:14:26,080 --> 00:14:30,520
stored the fuzz manager or<font color="#E5E5E5"> the mode in</font>

328
00:14:29,290 --> 00:14:32,709
<font color="#CCCCCC">which you</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> to use fixham in this</font>

329
00:14:30,520 --> 00:14:34,390
case it's the<font color="#CCCCCC"> be by OB mode and the</font>

330
00:14:32,710 --> 00:14:35,920
first deviation<font color="#CCCCCC"> in other words how long</font>

331
00:14:34,390 --> 00:14:38,740
you want the fuzzing to take place in

332
00:14:35,920 --> 00:14:40,660
minutes<font color="#CCCCCC"> so for one minute and we</font>

333
00:14:38,740 --> 00:14:43,870
optionally require a<font color="#E5E5E5"> docker file which</font>

334
00:14:40,660 --> 00:14:48,550
<font color="#CCCCCC">we'll show you</font><font color="#E5E5E5"> and the docker file in</font>

335
00:14:43,870 --> 00:14:50,050
some respects essentially provides a

336
00:14:48,550 --> 00:14:52,420
containerized<font color="#CCCCCC"> environment for fussing</font>

337
00:14:50,050 --> 00:14:54,219
here what we do<font color="#E5E5E5"> is we use a pre-built</font>

338
00:14:52,420 --> 00:14:58,270
docker image which we call<font color="#CCCCCC"> pac-man</font><font color="#E5E5E5"> fossa</font>

339
00:14:54,220 --> 00:15:00,490
<font color="#CCCCCC">and</font><font color="#E5E5E5"> essentially we clone the software</font>

340
00:14:58,270 --> 00:15:02,800
that you<font color="#CCCCCC"> want to fuzz in this case</font><font color="#E5E5E5"> J</font>

341
00:15:00,490 --> 00:15:05,500
head which is a<font color="#CCCCCC"> JPEG parsing library and</font>

342
00:15:02,800 --> 00:15:07,209
then essentially<font color="#E5E5E5"> compile it</font><font color="#CCCCCC"> and start</font>

343
00:15:05,500 --> 00:15:09,730
our own fuzzing so let's start fuzzing

344
00:15:07,210 --> 00:15:11,260
with these two inputs<font color="#E5E5E5"> and to do that</font>

345
00:15:09,730 --> 00:15:13,300
what<font color="#E5E5E5"> you would do is essentially run</font>

346
00:15:11,260 --> 00:15:17,620
effects and fuzz and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> configuration</font>

347
00:15:13,300 --> 00:15:20,829
file and at this point<font color="#E5E5E5"> what is going to</font>

348
00:15:17,620 --> 00:15:22,690
<font color="#E5E5E5">happen is let's hit enter what's going</font>

349
00:15:20,830 --> 00:15:24,880
to<font color="#E5E5E5"> happen is fixham starts automatically</font>

350
00:15:22,690 --> 00:15:27,100
inferring the<font color="#CCCCCC"> right</font><font color="#E5E5E5"> invocation for the</font>

351
00:15:24,880 --> 00:15:29,260
program<font color="#E5E5E5"> in other words how do</font><font color="#CCCCCC"> I invoke</font><font color="#E5E5E5"> J</font>

352
00:15:27,100 --> 00:15:31,390
head so that parsing takes place it's

353
00:15:29,260 --> 00:15:32,350
also going to info automatically what

354
00:15:31,390 --> 00:15:34,720
kinds<font color="#CCCCCC"> of input</font>

355
00:15:32,350 --> 00:15:36,700
<font color="#CCCCCC">state</font><font color="#E5E5E5"> passes in this case JPEG files and</font>

356
00:15:34,720 --> 00:15:38,830
when all<font color="#E5E5E5"> of this is done it's going to</font>

357
00:15:36,700 --> 00:15:40,840
provide an optimal<font color="#E5E5E5"> seat set to the</font>

358
00:15:38,830 --> 00:15:43,810
program and automatically start<font color="#CCCCCC"> pausing</font>

359
00:15:40,840 --> 00:15:46,120
like<font color="#CCCCCC"> you see on the dashboard it's going</font>

360
00:15:43,810 --> 00:15:47,800
to take a while to<font color="#E5E5E5"> do all the fussing so</font>

361
00:15:46,120 --> 00:15:49,060
at this point I'm going to hand<font color="#E5E5E5"> over the</font>

362
00:15:47,800 --> 00:15:50,770
presentation<font color="#CCCCCC"> to Winston</font>

363
00:15:49,060 --> 00:15:52,780
who's going to<font color="#CCCCCC"> begin</font><font color="#E5E5E5"> to fix some</font>

364
00:15:50,770 --> 00:15:57,660
internals<font color="#E5E5E5"> and tell you in greater detail</font>

365
00:15:52,780 --> 00:15:57,660
<font color="#E5E5E5">how</font><font color="#CCCCCC"> we do the automation so Vincent oh</font>

366
00:15:58,230 --> 00:16:04,330
thanks bhagava<font color="#E5E5E5"> so yeah what's that</font><font color="#CCCCCC"> out</font>

367
00:16:01,900 --> 00:16:07,689
<font color="#E5E5E5">of the way let me tell you what</font><font color="#CCCCCC"> faz ex</font>

368
00:16:04,330 --> 00:16:09,160
machina or<font color="#E5E5E5"> FX I'm actually</font><font color="#CCCCCC"> as it's a</font>

369
00:16:07,690 --> 00:16:11,800
distributed<font color="#CCCCCC"> last day of</font><font color="#E5E5E5"> fasting</font>

370
00:16:09,160 --> 00:16:14,439
framework which basically minimizes the

371
00:16:11,800 --> 00:16:15,819
effort to<font color="#CCCCCC"> set up a fuzzing pipeline to</font>

372
00:16:14,440 --> 00:16:19,090
point where<font color="#E5E5E5"> it's almost completely</font>

373
00:16:15,820 --> 00:16:23,020
automated<font color="#E5E5E5"> we leverage existing</font><font color="#CCCCCC"> bail</font>

374
00:16:19,090 --> 00:16:26,110
proof software to build this<font color="#E5E5E5"> automatic</font>

375
00:16:23,020 --> 00:16:29,170
framework<font color="#E5E5E5"> right and using this framework</font>

376
00:16:26,110 --> 00:16:33,220
we started passing hundreds of<font color="#CCCCCC"> packages</font>

377
00:16:29,170 --> 00:16:36,729
immediately<font color="#E5E5E5"> so here's how</font><font color="#CCCCCC"> fake them</font>

378
00:16:33,220 --> 00:16:38,890
<font color="#CCCCCC">automated automates this pipeline</font><font color="#E5E5E5"> the</font>

379
00:16:36,730 --> 00:16:42,910
<font color="#E5E5E5">only thing you need</font><font color="#CCCCCC"> to provide is a</font>

380
00:16:38,890 --> 00:16:44,680
package size which<font color="#E5E5E5"> can be either BYOB</font>

381
00:16:42,910 --> 00:16:48,579
configuration like bag of I showed you

382
00:16:44,680 --> 00:16:50,140
<font color="#E5E5E5">or it could be package repository</font><font color="#CCCCCC"> that</font>

383
00:16:48,580 --> 00:16:52,930
<font color="#CCCCCC">you want to fast so say you</font><font color="#E5E5E5"> want to</font>

384
00:16:50,140 --> 00:16:55,780
<font color="#E5E5E5">scale up then you could fix them</font><font color="#CCCCCC"> telefax</font>

385
00:16:52,930 --> 00:17:00,459
them to<font color="#E5E5E5"> download packages from pacman</font>

386
00:16:55,780 --> 00:17:02,439
<font color="#E5E5E5">say now</font><font color="#CCCCCC"> once 6m has this package choice</font>

387
00:17:00,460 --> 00:17:05,319
<font color="#E5E5E5">or a list of packages that</font><font color="#CCCCCC"> you want to</font>

388
00:17:02,440 --> 00:17:08,950
<font color="#E5E5E5">fast it crawls those</font><font color="#CCCCCC"> packages for</font>

389
00:17:05,319 --> 00:17:12,240
binaries then in first some way to give

390
00:17:08,950 --> 00:17:16,420
those binaries<font color="#E5E5E5"> user-defined input select</font>

391
00:17:12,240 --> 00:17:19,150
<font color="#E5E5E5">good set of</font><font color="#CCCCCC"> seeds then starts</font><font color="#E5E5E5"> the actual</font>

392
00:17:16,420 --> 00:17:22,090
fuzzing for you with a good

393
00:17:19,150 --> 00:17:24,190
configuration<font color="#CCCCCC"> and after that it triage</font>

394
00:17:22,089 --> 00:17:27,069
<font color="#CCCCCC">those two crashes</font><font color="#E5E5E5"> that came out</font><font color="#CCCCCC"> of the</font>

395
00:17:24,190 --> 00:17:29,680
fuzzy<font color="#CCCCCC"> and then in the</font><font color="#E5E5E5"> last step</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> hand</font>

396
00:17:27,069 --> 00:17:31,720
control<font color="#CCCCCC"> like</font><font color="#E5E5E5"> over to you in a dashboard</font>

397
00:17:29,680 --> 00:17:35,790
that displays<font color="#CCCCCC"> the results in a</font><font color="#E5E5E5"> very</font>

398
00:17:31,720 --> 00:17:39,280
convenient way<font color="#E5E5E5"> all right</font><font color="#CCCCCC"> so let's look</font>

399
00:17:35,790 --> 00:17:41,190
<font color="#CCCCCC">into each</font><font color="#E5E5E5"> step in detail and the first</font>

400
00:17:39,280 --> 00:17:44,080
step would be<font color="#E5E5E5"> the crawling binary step</font>

401
00:17:41,190 --> 00:17:45,490
so like I said<font color="#E5E5E5"> if you want to scale up</font>

402
00:17:44,080 --> 00:17:46,139
you do<font color="#E5E5E5"> the following basically you</font>

403
00:17:45,490 --> 00:17:49,050
choose

404
00:17:46,140 --> 00:17:51,540
<font color="#CCCCCC">sorry</font><font color="#E5E5E5"> and then provide fax em with a</font>

405
00:17:49,050 --> 00:17:53,790
list of packages<font color="#E5E5E5"> from that</font><font color="#CCCCCC"> repository</font>

406
00:17:51,540 --> 00:17:57,180
that<font color="#E5E5E5"> you want to fuss once you've done</font>

407
00:17:53,790 --> 00:18:00,450
that<font color="#CCCCCC"> sex em tries to download</font><font color="#E5E5E5"> the source</font>

408
00:17:57,180 --> 00:18:03,420
of the packages and compile<font color="#CCCCCC"> it and</font><font color="#E5E5E5"> also</font>

409
00:18:00,450 --> 00:18:06,950
add instrumentation where possible it

410
00:18:03,420 --> 00:18:09,840
also tries to after the compilation<font color="#E5E5E5"> step</font>

411
00:18:06,950 --> 00:18:12,320
extract ready to run<font color="#CCCCCC"> elf binaries</font><font color="#E5E5E5"> that</font>

412
00:18:09,840 --> 00:18:14,909
<font color="#CCCCCC">we</font><font color="#E5E5E5"> later on one</font><font color="#CCCCCC"> tooth us</font>

413
00:18:12,320 --> 00:18:16,889
so<font color="#CCCCCC"> we've</font><font color="#E5E5E5"> before</font><font color="#CCCCCC"> we move on</font><font color="#E5E5E5"> to the next</font>

414
00:18:14,910 --> 00:18:19,770
<font color="#E5E5E5">step let me quickly clarify what</font>

415
00:18:16,890 --> 00:18:21,960
instrumentation means basically<font color="#CCCCCC"> backup I</font>

416
00:18:19,770 --> 00:18:24,150
<font color="#E5E5E5">explained to you we need to give the</font>

417
00:18:21,960 --> 00:18:27,420
phaser feedback and to give the<font color="#CCCCCC"> feather</font>

418
00:18:24,150 --> 00:18:30,000
<font color="#CCCCCC">PFLAG we need to keep track</font><font color="#E5E5E5"> of the code</font>

419
00:18:27,420 --> 00:18:32,820
<font color="#CCCCCC">tablet that we have achieved</font><font color="#E5E5E5"> in a</font>

420
00:18:30,000 --> 00:18:35,040
certain execution of the<font color="#CCCCCC"> binary we could</font>

421
00:18:32,820 --> 00:18:37,020
do this either during compile time<font color="#E5E5E5"> and</font>

422
00:18:35,040 --> 00:18:39,870
this results in<font color="#E5E5E5"> a</font><font color="#CCCCCC"> very fast execution</font>

423
00:18:37,020 --> 00:18:42,810
<font color="#CCCCCC">speed but it require a source code for</font>

424
00:18:39,870 --> 00:18:45,060
the<font color="#E5E5E5"> binary and in the case of fixham</font>

425
00:18:42,810 --> 00:18:48,360
<font color="#CCCCCC">that we want</font><font color="#E5E5E5"> to do anything anything</font>

426
00:18:45,060 --> 00:18:50,940
<font color="#E5E5E5">automated we also need to be able to</font>

427
00:18:48,360 --> 00:18:53,729
automatically build a binary successful

428
00:18:50,940 --> 00:18:56,610
<font color="#E5E5E5">which from our experience unfortunately</font>

429
00:18:53,730 --> 00:18:59,460
<font color="#E5E5E5">it's not always possible so following</font>

430
00:18:56,610 --> 00:19:02,909
our best effort approach we fall back<font color="#E5E5E5"> to</font>

431
00:18:59,460 --> 00:19:06,570
<font color="#CCCCCC">a slower</font><font color="#E5E5E5"> run time</font><font color="#CCCCCC"> investment</font><font color="#E5E5E5"> ation which</font>

432
00:19:02,910 --> 00:19:11,400
also works for<font color="#E5E5E5"> black box binaries that</font>

433
00:19:06,570 --> 00:19:14,760
<font color="#E5E5E5">means if you call recall the</font><font color="#CCCCCC"> pacman</font>

434
00:19:11,400 --> 00:19:17,970
<font color="#E5E5E5">manager package</font><font color="#CCCCCC"> manager example we try</font>

435
00:19:14,760 --> 00:19:20,220
<font color="#CCCCCC">to build binary some soils but if</font><font color="#E5E5E5"> there</font>

436
00:19:17,970 --> 00:19:24,060
doesn't succeed<font color="#E5E5E5"> we then just download</font>

437
00:19:20,220 --> 00:19:27,390
<font color="#E5E5E5">the people binaries</font><font color="#CCCCCC"> alright once</font><font color="#E5E5E5"> we have</font>

438
00:19:24,060 --> 00:19:30,210
our<font color="#CCCCCC"> pre-built</font><font color="#E5E5E5"> or our binaries we need a</font>

439
00:19:27,390 --> 00:19:32,880
way<font color="#E5E5E5"> we need to identify</font><font color="#CCCCCC"> way to provide</font>

440
00:19:30,210 --> 00:19:35,040
them<font color="#CCCCCC"> with user-defined input</font><font color="#E5E5E5"> so to give</font>

441
00:19:32,880 --> 00:19:38,310
you<font color="#CCCCCC"> an some</font><font color="#E5E5E5"> intuition on what</font><font color="#CCCCCC"> this means</font>

442
00:19:35,040 --> 00:19:40,470
<font color="#E5E5E5">say you would</font><font color="#CCCCCC"> like to first tcpdump</font><font color="#E5E5E5"> then</font>

443
00:19:38,310 --> 00:19:44,520
what you would need<font color="#E5E5E5"> to identify is the</font>

444
00:19:40,470 --> 00:19:47,880
<font color="#E5E5E5">parameter -</font><font color="#CCCCCC"> NVR and then the path to a</font>

445
00:19:44,520 --> 00:19:50,580
file so<font color="#CCCCCC"> that tcpdump</font>

446
00:19:47,880 --> 00:19:53,760
then reads this file<font color="#E5E5E5"> you would also like</font>

447
00:19:50,580 --> 00:19:55,889
<font color="#CCCCCC">to identify that tcpdump</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> passes</font>

448
00:19:53,760 --> 00:19:59,100
<font color="#CCCCCC">pickup files</font><font color="#E5E5E5"> but that's going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be a</font>

449
00:19:55,890 --> 00:20:00,310
later step so to formalize this

450
00:19:59,100 --> 00:20:03,399
<font color="#CCCCCC">intuitional</font>

451
00:20:00,310 --> 00:20:06,129
once we have a binary in the repository

452
00:20:03,400 --> 00:20:10,150
we need to<font color="#CCCCCC"> identify two things one the</font>

453
00:20:06,130 --> 00:20:11,680
parameter which we with which we need<font color="#CCCCCC"> to</font>

454
00:20:10,150 --> 00:20:14,950
call the binary<font color="#E5E5E5"> so that it people</font>

455
00:20:11,680 --> 00:20:17,320
processes our<font color="#E5E5E5"> user-defined input and the</font>

456
00:20:14,950 --> 00:20:18,760
second thing we<font color="#CCCCCC"> need to</font><font color="#E5E5E5"> identify this</font>

457
00:20:17,320 --> 00:20:24,220
<font color="#E5E5E5">the input channels so</font><font color="#CCCCCC"> that would either</font>

458
00:20:18,760 --> 00:20:27,360
be standard<font color="#CCCCCC"> in network or a file</font><font color="#E5E5E5"> given</font>

459
00:20:24,220 --> 00:20:30,310
or a file path<font color="#E5E5E5"> given</font><font color="#CCCCCC"> as a parameter I</font>

460
00:20:27,360 --> 00:20:34,000
want to quickly note here that<font color="#E5E5E5"> normally</font>

461
00:20:30,310 --> 00:20:36,520
network<font color="#E5E5E5"> fuzzing is a non-trivial task so</font>

462
00:20:34,000 --> 00:20:39,250
what we do is we leverage great existing

463
00:20:36,520 --> 00:20:41,129
software<font color="#CCCCCC"> in particular</font><font color="#E5E5E5"> we leverage the D</font>

464
00:20:39,250 --> 00:20:47,200
<font color="#E5E5E5">soft library out of the premium package</font>

465
00:20:41,130 --> 00:20:50,230
<font color="#CCCCCC">which hooks libraries so it's a</font>

466
00:20:47,200 --> 00:20:54,370
<font color="#E5E5E5">pre-loaded library which hopes</font><font color="#CCCCCC"> Network</font>

467
00:20:50,230 --> 00:20:57,220
<font color="#E5E5E5">calls so that every time</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> binary</font>

468
00:20:54,370 --> 00:21:00,699
reads from a socket the input<font color="#E5E5E5"> actually</font>

469
00:20:57,220 --> 00:21:03,280
comes from a CDN<font color="#CCCCCC"> so in that sense input</font>

470
00:21:00,700 --> 00:21:07,300
from<font color="#CCCCCC"> SVN and from sockets</font><font color="#E5E5E5"> are the same</font>

471
00:21:03,280 --> 00:21:09,040
<font color="#E5E5E5">but for</font><font color="#CCCCCC"> fats</font><font color="#E5E5E5"> ex machina so to give you</font>

472
00:21:07,300 --> 00:21:11,110
<font color="#E5E5E5">two more</font><font color="#CCCCCC"> examples well we already have</font>

473
00:21:09,040 --> 00:21:13,720
<font color="#E5E5E5">two TCP dump example which would be and</font>

474
00:21:11,110 --> 00:21:15,550
we<font color="#CCCCCC"> are and then path to a file</font><font color="#E5E5E5"> and say</font>

475
00:21:13,720 --> 00:21:18,820
you want<font color="#CCCCCC"> to fast we get then you would</font>

476
00:21:15,550 --> 00:21:20,620
need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> identify</font><font color="#E5E5E5"> local host</font><font color="#CCCCCC"> ad as</font><font color="#E5E5E5"> the</font>

477
00:21:18,820 --> 00:21:22,629
invocation<font color="#CCCCCC"> that leads to user-defined</font>

478
00:21:20,620 --> 00:21:24,969
<font color="#E5E5E5">input all right</font>

479
00:21:22,630 --> 00:21:27,580
so to do<font color="#E5E5E5"> this Tex M employs the</font>

480
00:21:24,970 --> 00:21:30,900
two-phase algorithm in the first phase

481
00:21:27,580 --> 00:21:33,490
<font color="#E5E5E5">we call that</font><font color="#CCCCCC"> the collection</font><font color="#E5E5E5"> phase we</font>

482
00:21:30,900 --> 00:21:36,610
collect potential parameter candidates

483
00:21:33,490 --> 00:21:38,470
where we<font color="#E5E5E5"> assume those candidates could</font>

484
00:21:36,610 --> 00:21:41,020
lead to<font color="#E5E5E5"> the processing of</font><font color="#CCCCCC"> user-defined</font>

485
00:21:38,470 --> 00:21:44,650
input we do this by pausing<font color="#CCCCCC"> the help</font>

486
00:21:41,020 --> 00:21:46,900
text<font color="#CCCCCC"> of the binary</font><font color="#E5E5E5"> so in the case of TCP</font>

487
00:21:44,650 --> 00:21:48,880
<font color="#CCCCCC">dump for</font><font color="#E5E5E5"> example we would pass the help</font>

488
00:21:46,900 --> 00:21:52,210
<font color="#CCCCCC">text</font><font color="#E5E5E5"> and that would point us to the -</font>

489
00:21:48,880 --> 00:21:55,140
<font color="#E5E5E5">our parameter and we also employ other</font>

490
00:21:52,210 --> 00:21:58,030
heuristics<font color="#CCCCCC"> for</font><font color="#E5E5E5"> example route forcing</font>

491
00:21:55,140 --> 00:21:59,860
different meta candidates that often

492
00:21:58,030 --> 00:22:02,580
lead to processing of<font color="#CCCCCC"> user-defined input</font>

493
00:21:59,860 --> 00:22:05,350
like<font color="#E5E5E5"> - F and then the path to a file</font>

494
00:22:02,580 --> 00:22:07,330
<font color="#CCCCCC">then once we have all those parameter</font>

495
00:22:05,350 --> 00:22:11,260
candidates for each parameter candidate

496
00:22:07,330 --> 00:22:13,389
we do a<font color="#E5E5E5"> validation phase which basically</font>

497
00:22:11,260 --> 00:22:16,479
means<font color="#E5E5E5"> we need</font><font color="#CCCCCC"> to check</font>

498
00:22:13,389 --> 00:22:20,519
if the parameter we tried<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> let</font>

499
00:22:16,479 --> 00:22:29,369
<font color="#E5E5E5">to the processing of</font><font color="#CCCCCC"> user-defined input</font>

500
00:22:20,519 --> 00:22:32,879
sorry so here's how we do this<font color="#E5E5E5"> and sorry</font>

501
00:22:29,369 --> 00:22:35,708
<font color="#E5E5E5">here's how we do this for each parameter</font>

502
00:22:32,879 --> 00:22:38,559
we basically create a temporary dummy

503
00:22:35,709 --> 00:22:41,679
file and then try<font color="#E5E5E5"> to give the dummy file</font>

504
00:22:38,559 --> 00:22:46,329
to the binary<font color="#E5E5E5"> as input with our</font>

505
00:22:41,679 --> 00:22:49,959
parameter<font color="#CCCCCC"> in the case where</font><font color="#E5E5E5"> we have a</font>

506
00:22:46,329 --> 00:22:52,089
parameter<font color="#E5E5E5"> that takes a path to a file we</font>

507
00:22:49,959 --> 00:22:55,299
<font color="#CCCCCC">just replace that path with the path to</font>

508
00:22:52,089 --> 00:22:57,969
our dummy file and in the<font color="#E5E5E5"> case of</font><font color="#CCCCCC"> a</font>

509
00:22:55,299 --> 00:22:59,979
<font color="#E5E5E5">parameter that</font><font color="#CCCCCC"> we suspect leads to the</font>

510
00:22:57,969 --> 00:23:02,649
processing of input wire centered in our

511
00:22:59,979 --> 00:23:05,589
network we just<font color="#CCCCCC"> pipe the contents of the</font>

512
00:23:02,649 --> 00:23:09,099
dummy file<font color="#E5E5E5"> to standard in remember we</font><font color="#CCCCCC"> D</font>

513
00:23:05,589 --> 00:23:12,009
sort the binary and<font color="#E5E5E5"> then after we've</font>

514
00:23:09,099 --> 00:23:14,918
done<font color="#E5E5E5"> this we check the system</font><font color="#CCCCCC"> calls</font><font color="#E5E5E5"> of</font>

515
00:23:12,009 --> 00:23:19,299
that particular execution<font color="#E5E5E5"> and</font><font color="#CCCCCC"> grep for</font>

516
00:23:14,919 --> 00:23:21,669
open or<font color="#E5E5E5"> read calls for our dummy file</font>

517
00:23:19,299 --> 00:23:23,859
<font color="#E5E5E5">and if the system</font><font color="#CCCCCC"> code for that</font>

518
00:23:21,669 --> 00:23:27,070
<font color="#E5E5E5">particular execution contains those</font>

519
00:23:23,859 --> 00:23:28,958
<font color="#E5E5E5">faults then we know that our parameter</font>

520
00:23:27,070 --> 00:23:32,769
indeed led to the processing<font color="#E5E5E5"> of</font>

521
00:23:28,959 --> 00:23:34,719
<font color="#CCCCCC">user-defined input</font><font color="#E5E5E5"> okay so once we've</font>

522
00:23:32,769 --> 00:23:36,909
done<font color="#CCCCCC"> that we could already start</font><font color="#E5E5E5"> to fast</font>

523
00:23:34,719 --> 00:23:39,339
<font color="#E5E5E5">but we would like to optimize our</font>

524
00:23:36,909 --> 00:23:42,820
<font color="#E5E5E5">passing set up a little more so we want</font>

525
00:23:39,339 --> 00:23:46,299
<font color="#E5E5E5">to select good</font><font color="#CCCCCC"> seats</font><font color="#E5E5E5"> now what I could</font>

526
00:23:42,820 --> 00:23:49,299
see the good seed is basically a valid

527
00:23:46,299 --> 00:23:53,408
<font color="#CCCCCC">program input in the case of binary is</font>

528
00:23:49,299 --> 00:23:57,190
that<font color="#E5E5E5"> process files or process specific</font>

529
00:23:53,409 --> 00:24:02,019
protocols<font color="#E5E5E5"> it would just be a sample file</font>

530
00:23:57,190 --> 00:24:04,599
of the file type data program<font color="#E5E5E5"> parsers so</font>

531
00:24:02,019 --> 00:24:10,649
come back<font color="#CCCCCC"> coming</font><font color="#E5E5E5"> back</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the TCP dump</font>

532
00:24:04,599 --> 00:24:13,689
example<font color="#E5E5E5"> it would just be a pcap file and</font>

533
00:24:10,649 --> 00:24:17,408
so to identify<font color="#E5E5E5"> this the algorithm we</font>

534
00:24:13,690 --> 00:24:20,349
employ is based on coverage and we do

535
00:24:17,409 --> 00:24:24,129
this under<font color="#CCCCCC"> the assumption that</font><font color="#E5E5E5"> the right</font>

536
00:24:20,349 --> 00:24:27,280
file type<font color="#E5E5E5"> yields higher coverage all</font>

537
00:24:24,129 --> 00:24:30,669
<font color="#E5E5E5">right but before we can implement this</font>

538
00:24:27,280 --> 00:24:34,180
we need to acquire a set of sample<font color="#E5E5E5"> seed</font>

539
00:24:30,670 --> 00:24:37,210
files we decided to<font color="#CCCCCC"> crawl it up for that</font>

540
00:24:34,180 --> 00:24:39,580
and we did this<font color="#CCCCCC"> because often</font><font color="#E5E5E5"> developers</font>

541
00:24:37,210 --> 00:24:42,550
include small test files in their

542
00:24:39,580 --> 00:24:45,280
repositories<font color="#E5E5E5"> so say you</font><font color="#CCCCCC"> want to develop</font>

543
00:24:42,550 --> 00:24:49,419
a<font color="#E5E5E5"> JPEG buzzer then you would include a</font>

544
00:24:45,280 --> 00:24:53,050
<font color="#CCCCCC">jpg file</font><font color="#E5E5E5"> in your data repository</font><font color="#CCCCCC"> to do</font>

545
00:24:49,420 --> 00:24:56,410
better unit tests<font color="#E5E5E5"> and this leads to the</font>

546
00:24:53,050 --> 00:24:59,110
result<font color="#E5E5E5"> that often in data repositories</font>

547
00:24:56,410 --> 00:25:01,630
they are small sample files which have<font color="#CCCCCC"> a</font>

548
00:24:59,110 --> 00:25:05,889
lot of<font color="#CCCCCC"> chronic cases which is great for</font>

549
00:25:01,630 --> 00:25:11,560
<font color="#E5E5E5">our</font><font color="#CCCCCC"> fuzzing purpose</font><font color="#E5E5E5"> okay so what you can</font>

550
00:25:05,890 --> 00:25:14,530
see here<font color="#CCCCCC"> is a result of</font><font color="#E5E5E5"> that eristic on</font>

551
00:25:11,560 --> 00:25:17,020
your<font color="#CCCCCC"> x-axis</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> see the different</font>

552
00:25:14,530 --> 00:25:19,270
file types<font color="#E5E5E5"> and then on the y-axis</font><font color="#CCCCCC"> you</font>

553
00:25:17,020 --> 00:25:22,150
can see the total<font color="#E5E5E5"> coverage the sample</font>

554
00:25:19,270 --> 00:25:26,500
files yielded for the<font color="#CCCCCC"> tcpdump</font><font color="#E5E5E5"> execution</font>

555
00:25:22,150 --> 00:25:29,260
<font color="#E5E5E5">I elaborated on Julia earlier</font><font color="#CCCCCC"> and we can</font>

556
00:25:26,500 --> 00:25:31,240
really see this peak<font color="#CCCCCC"> here for the pcap</font>

557
00:25:29,260 --> 00:25:34,480
file type<font color="#E5E5E5"> so this would allow us to</font>

558
00:25:31,240 --> 00:25:37,690
<font color="#CCCCCC">identify PKS write file type and</font><font color="#E5E5E5"> dice</font>

559
00:25:34,480 --> 00:25:40,650
choose good<font color="#CCCCCC"> seats while</font><font color="#E5E5E5"> we were</font>

560
00:25:37,690 --> 00:25:43,920
developing<font color="#E5E5E5"> fixham we identified three</font>

561
00:25:40,650 --> 00:25:46,510
sort of stereotypical<font color="#E5E5E5"> coverage patterns</font>

562
00:25:43,920 --> 00:25:49,630
<font color="#E5E5E5">one is where the binary process is a</font>

563
00:25:46,510 --> 00:25:52,480
single file type<font color="#E5E5E5"> that's one on</font><font color="#CCCCCC"> the Left</font>

564
00:25:49,630 --> 00:25:54,310
where you just have one peak so it's

565
00:25:52,480 --> 00:25:57,100
pretty<font color="#CCCCCC"> obvious that we have one right</font>

566
00:25:54,310 --> 00:25:58,659
file type then there's another more or

567
00:25:57,100 --> 00:26:00,790
less obvious case where the<font color="#E5E5E5"> binary</font>

568
00:25:58,660 --> 00:26:02,680
process<font color="#CCCCCC"> is multiple file types and we</font>

569
00:26:00,790 --> 00:26:04,659
just have multiple<font color="#CCCCCC"> peaks so that would</font>

570
00:26:02,680 --> 00:26:08,440
be the case<font color="#E5E5E5"> for</font><font color="#CCCCCC"> an image</font><font color="#E5E5E5"> passer which</font>

571
00:26:04,660 --> 00:26:10,360
<font color="#CCCCCC">can price</font><font color="#E5E5E5"> JPEG as well as PNG files</font><font color="#CCCCCC"> and</font>

572
00:26:08,440 --> 00:26:11,920
they have<font color="#E5E5E5"> a third case where the</font>

573
00:26:10,360 --> 00:26:14,949
distribution the<font color="#E5E5E5"> coverage distribution</font>

574
00:26:11,920 --> 00:26:17,860
is rather noisy and in that case we hand

575
00:26:14,950 --> 00:26:20,700
<font color="#E5E5E5">back of control to the</font><font color="#CCCCCC"> user</font><font color="#E5E5E5"> and remote</font>

576
00:26:17,860 --> 00:26:23,139
Dominic is<font color="#CCCCCC"> going to elaborate on later</font>

577
00:26:20,700 --> 00:26:24,760
<font color="#E5E5E5">all right now we have selected to see it</font>

578
00:26:23,140 --> 00:26:29,500
we<font color="#CCCCCC"> know how to give the binary input so</font>

579
00:26:24,760 --> 00:26:31,870
we<font color="#E5E5E5"> can finally</font><font color="#CCCCCC"> start first in sizing we</font>

580
00:26:29,500 --> 00:26:34,540
try to<font color="#CCCCCC"> Excel assemble our own filing</font>

581
00:26:31,870 --> 00:26:36,729
experience in to fix them<font color="#E5E5E5"> and two</font>

582
00:26:34,540 --> 00:26:39,639
results following<font color="#E5E5E5"> we use American</font><font color="#CCCCCC"> puzzle</font>

583
00:26:36,730 --> 00:26:42,429
which is a well-known<font color="#E5E5E5"> established Prezi</font>

584
00:26:39,640 --> 00:26:44,499
which has found a<font color="#E5E5E5"> lot of</font><font color="#CCCCCC"> crack</font>

585
00:26:42,429 --> 00:26:46,299
we use fighting dictionaries where

586
00:26:44,499 --> 00:26:49,179
appropriate<font color="#CCCCCC"> so here we can</font><font color="#E5E5E5"> leverage our</font>

587
00:26:46,299 --> 00:26:51,220
file type inference algorithm<font color="#E5E5E5"> so say we</font>

588
00:26:49,179 --> 00:26:54,489
know that the binary processes<font color="#CCCCCC"> chip</font>

589
00:26:51,220 --> 00:26:57,309
files<font color="#CCCCCC"> then we can use jiff dictionaries</font>

590
00:26:54,489 --> 00:26:59,559
<font color="#E5E5E5">for fuzzy we use address sanitizers</font>

591
00:26:57,309 --> 00:27:02,678
<font color="#E5E5E5">which detect memory corruptions whenever</font>

592
00:26:59,559 --> 00:27:03,869
possible<font color="#CCCCCC"> and we do</font><font color="#E5E5E5"> Network pausing why</font>

593
00:27:02,679 --> 00:27:06,759
<font color="#CCCCCC">daddy sock</font>

594
00:27:03,869 --> 00:27:09,610
we also<font color="#E5E5E5"> schedule the fighting in a round</font>

595
00:27:06,759 --> 00:27:12,129
robin<font color="#E5E5E5"> fashion so that each binary gets</font>

596
00:27:09,610 --> 00:27:14,559
its fair share of<font color="#E5E5E5"> fuzzing so to speak</font>

597
00:27:12,129 --> 00:27:19,719
and we need to do that because we are<font color="#CCCCCC"> in</font>

598
00:27:14,559 --> 00:27:21,970
a<font color="#CCCCCC"> large-scale</font><font color="#E5E5E5"> set in once we fast we</font>

599
00:27:19,720 --> 00:27:23,739
hopefully<font color="#CCCCCC"> got some crashes</font><font color="#E5E5E5"> but those</font>

600
00:27:21,970 --> 00:27:26,470
crashes are not really structured so we

601
00:27:23,739 --> 00:27:29,019
need to bring some<font color="#E5E5E5"> structure to the</font>

602
00:27:26,470 --> 00:27:31,450
unstructured<font color="#E5E5E5"> fuzzing outputs and this is</font>

603
00:27:29,019 --> 00:27:33,970
<font color="#E5E5E5">basically this triaging step the</font>

604
00:27:31,450 --> 00:27:36,129
<font color="#E5E5E5">triaging step we do two things we</font>

605
00:27:33,970 --> 00:27:38,649
classify the crashes according<font color="#E5E5E5"> to their</font>

606
00:27:36,129 --> 00:27:41,350
severity<font color="#E5E5E5"> and we try to deduplicate</font>

607
00:27:38,649 --> 00:27:46,809
<font color="#E5E5E5">pressures so that we are only left with</font>

608
00:27:41,350 --> 00:27:50,248
unique pressures for this we<font color="#E5E5E5"> leverage a</font>

609
00:27:46,809 --> 00:27:53,830
<font color="#E5E5E5">six existing tools namely exploitable</font>

610
00:27:50,249 --> 00:27:57,369
nafl you tools and exploitable has the

611
00:27:53,830 --> 00:28:00,369
built-in<font color="#E5E5E5"> eristic heuristic to assess the</font>

612
00:27:57,369 --> 00:28:05,168
severity and the<font color="#CCCCCC"> uniqueness of a crash</font>

613
00:28:00,369 --> 00:28:08,350
we only<font color="#E5E5E5"> fixed a functionality</font><font color="#CCCCCC"> in</font>

614
00:28:05,169 --> 00:28:11,169
exploitable namely the handling of<font color="#E5E5E5"> a</font>

615
00:28:08,350 --> 00:28:13,709
<font color="#CCCCCC">sense tech</font><font color="#E5E5E5"> traces so on this slide you</font>

616
00:28:11,169 --> 00:28:16,210
<font color="#CCCCCC">can see a sample a sense take place and</font>

617
00:28:13,710 --> 00:28:19,919
what exploitable does it takes<font color="#E5E5E5"> into</font>

618
00:28:16,210 --> 00:28:23,039
account<font color="#CCCCCC"> two things to assess</font><font color="#E5E5E5"> the place</font>

619
00:28:19,919 --> 00:28:25,749
<font color="#E5E5E5">disarray B of a crash into uniqueness so</font>

620
00:28:23,039 --> 00:28:29,200
<font color="#CCCCCC">one is the type of the memory corruption</font>

621
00:28:25,749 --> 00:28:32,109
<font color="#E5E5E5">say it's</font><font color="#CCCCCC"> HIPAA overflow</font><font color="#E5E5E5"> you would</font>

622
00:28:29,200 --> 00:28:35,139
consider that<font color="#E5E5E5"> more severe than a null</font>

623
00:28:32,109 --> 00:28:37,029
pointer dereference<font color="#E5E5E5"> for example and the</font>

624
00:28:35,139 --> 00:28:40,508
<font color="#CCCCCC">other one is you try to calculate a</font>

625
00:28:37,029 --> 00:28:45,220
unique hash of the<font color="#CCCCCC"> SEC</font><font color="#E5E5E5"> trace to</font>

626
00:28:40,509 --> 00:28:47,320
deduplicate<font color="#CCCCCC"> the Crushers okay we finally</font>

627
00:28:45,220 --> 00:28:49,509
arrived at<font color="#CCCCCC"> the</font><font color="#E5E5E5"> last step</font><font color="#CCCCCC"> the dashboard</font>

628
00:28:47,320 --> 00:28:52,299
step where we<font color="#CCCCCC"> show</font><font color="#E5E5E5"> you the results and</font>

629
00:28:49,509 --> 00:28:55,059
for<font color="#E5E5E5"> this I would like</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> a spec</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> for</font>

630
00:28:52,299 --> 00:28:56,590
existence because I<font color="#E5E5E5"> figured</font>

631
00:28:55,059 --> 00:29:02,710
instead of showing<font color="#E5E5E5"> you more slides I</font>

632
00:28:56,590 --> 00:29:05,168
<font color="#E5E5E5">will just show you another</font><font color="#CCCCCC"> demo yeah so</font>

633
00:29:02,710 --> 00:29:07,840
what you can see here practically took

634
00:29:05,169 --> 00:29:11,169
you bring the window<font color="#CCCCCC"> a little bit to the</font>

635
00:29:07,840 --> 00:29:19,840
<font color="#CCCCCC">right because</font><font color="#E5E5E5"> I think it's cut off sorry</font>

636
00:29:11,169 --> 00:29:21,820
for that<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> what you can see here is</font>

637
00:29:19,840 --> 00:29:24,789
the effects<font color="#E5E5E5"> and dashboard where you can</font>

638
00:29:21,820 --> 00:29:26,200
see the results and it shows you which

639
00:29:24,789 --> 00:29:29,590
packages<font color="#E5E5E5"> you fast</font>

640
00:29:26,200 --> 00:29:33,730
and what's the worst<font color="#E5E5E5"> crash that has been</font>

641
00:29:29,590 --> 00:29:37,059
found<font color="#E5E5E5"> in those packages</font><font color="#CCCCCC"> so say we we</font>

642
00:29:33,730 --> 00:29:39,070
found<font color="#E5E5E5"> an exploitable</font><font color="#CCCCCC"> pression</font><font color="#E5E5E5"> jus new</font><font color="#CCCCCC"> PG</font>

643
00:29:37,059 --> 00:29:42,809
for example and say we<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to log into</font>

644
00:29:39,070 --> 00:29:45,340
<font color="#E5E5E5">that then we can click on</font><font color="#CCCCCC"> that package</font>

645
00:29:42,809 --> 00:29:47,230
<font color="#CCCCCC">alright and then we</font><font color="#E5E5E5"> can see all the</font>

646
00:29:45,340 --> 00:29:50,230
wineries we<font color="#CCCCCC"> have found in that package</font>

647
00:29:47,230 --> 00:29:52,179
that<font color="#E5E5E5"> we fast already</font><font color="#CCCCCC"> and which</font><font color="#E5E5E5"> crashes</font>

648
00:29:50,230 --> 00:29:55,090
have been<font color="#E5E5E5"> found for their specific</font>

649
00:29:52,179 --> 00:29:57,399
binary and and the<font color="#CCCCCC"> death</font><font color="#E5E5E5"> what we can see</font>

650
00:29:55,090 --> 00:30:00,309
<font color="#CCCCCC">alright we found an exploitable crash in</font>

651
00:29:57,399 --> 00:30:02,018
<font color="#CCCCCC">kbx utah and we would like to</font><font color="#E5E5E5"> look into</font>

652
00:30:00,309 --> 00:30:05,470
<font color="#E5E5E5">that a little more so</font><font color="#CCCCCC"> we click on</font><font color="#E5E5E5"> the</font>

653
00:30:02,019 --> 00:30:07,929
<font color="#E5E5E5">binary and here we see an</font><font color="#CCCCCC"> overview of</font>

654
00:30:05,470 --> 00:30:09,669
<font color="#E5E5E5">all the crashes we found which are</font>

655
00:30:07,929 --> 00:30:13,809
<font color="#CCCCCC">hopefully unique because we do the</font><font color="#E5E5E5"> deal</font>

656
00:30:09,669 --> 00:30:15,909
<font color="#E5E5E5">organization and their severity well the</font>

657
00:30:13,809 --> 00:30:17,649
last<font color="#E5E5E5"> thing we could do if</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> want to</font>

658
00:30:15,909 --> 00:30:19,299
explore<font color="#CCCCCC"> the creatures a little more say</font>

659
00:30:17,649 --> 00:30:21,729
we want to debug or we want<font color="#E5E5E5"> to end some</font>

660
00:30:19,299 --> 00:30:26,950
bug bounty<font color="#E5E5E5"> then we can view the crash</font>

661
00:30:21,730 --> 00:30:29,320
law<font color="#CCCCCC"> or</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Athens tech fest</font><font color="#E5E5E5"> like so yeah</font>

662
00:30:26,950 --> 00:30:31,690
<font color="#CCCCCC">all right so that's the dashboard</font><font color="#E5E5E5"> and as</font>

663
00:30:29,320 --> 00:30:34,360
you<font color="#E5E5E5"> have might notice we have a lot of</font>

664
00:30:31,690 --> 00:30:36,070
pressures that<font color="#E5E5E5"> we found so I will hand</font>

665
00:30:34,360 --> 00:30:38,699
over to Dominic now<font color="#E5E5E5"> who is going to</font>

666
00:30:36,070 --> 00:30:42,490
<font color="#E5E5E5">explain</font><font color="#CCCCCC"> to you</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> results or findings</font>

667
00:30:38,700 --> 00:30:45,429
and<font color="#CCCCCC"> to time warp modes which is remote</font>

668
00:30:42,490 --> 00:30:49,119
we hand back<font color="#E5E5E5"> control to the user</font><font color="#CCCCCC"> in case</font>

669
00:30:45,429 --> 00:30:50,549
<font color="#CCCCCC">fix them fails with their</font><font color="#E5E5E5"> infos Thank</font>

670
00:30:49,119 --> 00:30:53,980
You Vincent

671
00:30:50,549 --> 00:30:58,090
yeah so did dashboard<font color="#E5E5E5"> you've just seen</font>

672
00:30:53,980 --> 00:31:01,509
it<font color="#CCCCCC"> and what better way to end blackhat</font>

673
00:30:58,090 --> 00:31:04,389
<font color="#CCCCCC">and with a few crashes</font><font color="#E5E5E5"> right so let's</font>

674
00:31:01,509 --> 00:31:07,210
let me<font color="#E5E5E5"> present you the findings what we</font>

675
00:31:04,389 --> 00:31:08,699
did was<font color="#E5E5E5"> we</font><font color="#CCCCCC"> just ran effects them against</font>

676
00:31:07,210 --> 00:31:12,090
<font color="#E5E5E5">our</font><font color="#CCCCCC"> package repo</font>

677
00:31:08,700 --> 00:31:15,030
for a few days<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we just ran it on the</font>

678
00:31:12,090 --> 00:31:18,780
<font color="#CCCCCC">top 500 packages</font><font color="#E5E5E5"> which means we ran it</font>

679
00:31:15,030 --> 00:31:20,580
on<font color="#E5E5E5"> around 200 containing also binaries</font>

680
00:31:18,780 --> 00:31:23,310
<font color="#E5E5E5">like the other ones are probably Python</font>

681
00:31:20,580 --> 00:31:25,710
or something<font color="#CCCCCC"> we only</font><font color="#E5E5E5"> ran it on one</font>

682
00:31:23,310 --> 00:31:27,389
<font color="#CCCCCC">machine</font><font color="#E5E5E5"> also we could have done it</font><font color="#CCCCCC"> on</font>

683
00:31:25,710 --> 00:31:31,790
<font color="#E5E5E5">different machines because we're like</font>

684
00:31:27,390 --> 00:31:35,300
<font color="#E5E5E5">using celery like large-scale stuff</font><font color="#CCCCCC"> and</font>

685
00:31:31,790 --> 00:31:37,830
well this<font color="#CCCCCC"> is how</font><font color="#E5E5E5"> we started the day zero</font>

686
00:31:35,300 --> 00:31:40,470
<font color="#CCCCCC">and the first day we had the first</font>

687
00:31:37,830 --> 00:31:42,840
crashes or on that day but<font color="#E5E5E5"> next day we</font>

688
00:31:40,470 --> 00:31:47,010
were happy to find crashes<font color="#E5E5E5"> after the</font>

689
00:31:42,840 --> 00:31:49,709
second day of those<font color="#E5E5E5"> 200 packages</font><font color="#CCCCCC"> 29 of</font>

690
00:31:47,010 --> 00:31:52,790
them had<font color="#E5E5E5"> binaries that crashed 12 of</font>

691
00:31:49,710 --> 00:31:56,010
them were exploitable<font color="#E5E5E5"> according to our</font>

692
00:31:52,790 --> 00:31:57,899
<font color="#E5E5E5">automated triaging</font><font color="#CCCCCC"> so that doesn't</font><font color="#E5E5E5"> mean</font>

693
00:31:56,010 --> 00:31:59,730
<font color="#CCCCCC">that others are not exploitable</font><font color="#E5E5E5"> and it</font>

694
00:31:57,900 --> 00:32:02,190
doesn't mean<font color="#CCCCCC"> that all of</font><font color="#E5E5E5"> them are super</font>

695
00:31:59,730 --> 00:32:04,410
severe bugs that can be<font color="#E5E5E5"> exploited over</font>

696
00:32:02,190 --> 00:32:06,000
the network<font color="#E5E5E5"> it just means that these are</font>

697
00:32:04,410 --> 00:32:09,270
like heap<font color="#E5E5E5"> out of bound reads or writes</font>

698
00:32:06,000 --> 00:32:11,850
or something like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> and all of them</font>

699
00:32:09,270 --> 00:32:15,629
were pretty popular<font color="#E5E5E5"> so we only took the</font>

700
00:32:11,850 --> 00:32:17,760
500<font color="#E5E5E5"> top art packages including sissy TL</font>

701
00:32:15,630 --> 00:32:19,740
-<font color="#E5E5E5"> would have never heard</font><font color="#CCCCCC"> about but it's</font>

702
00:32:17,760 --> 00:32:21,540
part of libreoffice sort of<font color="#E5E5E5"> maybe</font>

703
00:32:19,740 --> 00:32:23,910
<font color="#E5E5E5">something there if you want to look into</font>

704
00:32:21,540 --> 00:32:26,550
it and then<font color="#E5E5E5"> drift to PNG I just included</font>

705
00:32:23,910 --> 00:32:28,530
it because<font color="#CCCCCC"> I</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> just tips</font><font color="#E5E5E5"> it's</font>

706
00:32:26,550 --> 00:32:31,500
actually not one of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> 500 most popular</font>

707
00:32:28,530 --> 00:32:34,590
packages<font color="#CCCCCC"> although it</font><font color="#E5E5E5"> should be yeah so</font>

708
00:32:31,500 --> 00:32:36,930
crashes right there's a heap of overflow

709
00:32:34,590 --> 00:32:39,629
in<font color="#CCCCCC"> sis detail with the read</font>

710
00:32:36,930 --> 00:32:41,580
<font color="#CCCCCC">out-of-bounds read of</font><font color="#E5E5E5"> what 4k or</font>

711
00:32:39,630 --> 00:32:46,260
something like<font color="#E5E5E5"> that which</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> obviously</font>

712
00:32:41,580 --> 00:32:48,120
<font color="#E5E5E5">not too good continuing on what if</font><font color="#CCCCCC"> facts</font>

713
00:32:46,260 --> 00:32:51,570
some inference fails what if we cannot

714
00:32:48,120 --> 00:32:54,199
do it fully<font color="#E5E5E5"> automated well we have so</font>

715
00:32:51,570 --> 00:32:57,870
many<font color="#E5E5E5"> packages we ran it on</font><font color="#CCCCCC"> 200 packages</font>

716
00:32:54,200 --> 00:33:00,780
<font color="#CCCCCC">who cares</font><font color="#E5E5E5"> right we cannot run it we just</font>

717
00:32:57,870 --> 00:33:04,409
drop<font color="#CCCCCC"> it now that's obviously</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> true</font>

718
00:33:00,780 --> 00:33:05,520
that would be<font color="#E5E5E5"> boring as</font><font color="#CCCCCC"> bhargava said in</font>

719
00:33:04,410 --> 00:33:08,610
the beginning<font color="#E5E5E5"> you've seen this slide</font>

720
00:33:05,520 --> 00:33:12,660
before when automatic mode fails<font color="#E5E5E5"> we fall</font>

721
00:33:08,610 --> 00:33:17,969
back<font color="#CCCCCC"> to manual we introduced a new</font><font color="#E5E5E5"> way</font>

722
00:33:12,660 --> 00:33:21,360
<font color="#CCCCCC">to deal with AFL which is easy</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> use</font>

723
00:33:17,970 --> 00:33:22,360
hopefully and hopefully makes sense<font color="#E5E5E5"> so</font>

724
00:33:21,360 --> 00:33:26,199
basically as

725
00:33:22,360 --> 00:33:27,510
user you can<font color="#CCCCCC"> use the MA</font><font color="#E5E5E5"> FL or you can</font>

726
00:33:26,200 --> 00:33:29,590
use the tool as<font color="#CCCCCC"> you would usually</font>

727
00:33:27,510 --> 00:33:31,140
because<font color="#CCCCCC"> you know things that</font><font color="#E5E5E5"> other</font>

728
00:33:29,590 --> 00:33:34,959
people<font color="#CCCCCC"> don't</font>

729
00:33:31,140 --> 00:33:39,790
using time work<font color="#E5E5E5"> here we have an</font>

730
00:33:34,960 --> 00:33:41,980
unfeasible<font color="#CCCCCC"> source</font><font color="#E5E5E5"> code which is please</font>

731
00:33:39,790 --> 00:33:43,540
give me<font color="#E5E5E5"> eight characters and then please</font>

732
00:33:41,980 --> 00:33:45,850
give me the same eight characters again

733
00:33:43,540 --> 00:33:49,389
that's basically<font color="#E5E5E5"> into entering a</font>

734
00:33:45,850 --> 00:33:51,730
password<font color="#E5E5E5"> well for user right you read it</font>

735
00:33:49,390 --> 00:33:54,250
<font color="#CCCCCC">please give me</font><font color="#E5E5E5"> a charge please give you</font>

736
00:33:51,730 --> 00:33:57,490
the same hrs it is extremely easy<font color="#E5E5E5"> to do</font>

737
00:33:54,250 --> 00:33:59,860
however<font color="#E5E5E5"> a father that</font><font color="#CCCCCC"> can only see how</font>

738
00:33:57,490 --> 00:34:02,410
if it reaches new basic blocks or not

739
00:33:59,860 --> 00:34:05,260
<font color="#E5E5E5">and it can never see if it reaches the</font>

740
00:34:02,410 --> 00:34:06,820
<font color="#CCCCCC">correct ones</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> well it takes how</font>

741
00:34:05,260 --> 00:34:08,800
much<font color="#E5E5E5"> how long</font><font color="#CCCCCC"> does it take to</font>

742
00:34:06,820 --> 00:34:12,400
<font color="#E5E5E5">brute-force eight characters it takes</font>

743
00:34:08,800 --> 00:34:18,090
<font color="#E5E5E5">rather long hopefully</font><font color="#CCCCCC"> else our passwords</font>

744
00:34:12,400 --> 00:34:20,020
are<font color="#CCCCCC"> pretty</font><font color="#E5E5E5"> bad</font><font color="#CCCCCC"> anyway so using that and</font>

745
00:34:18,090 --> 00:34:23,380
below<font color="#CCCCCC"> there would be</font><font color="#E5E5E5"> the crash</font>

746
00:34:20,020 --> 00:34:25,239
so using that<font color="#E5E5E5"> if the user can use it</font>

747
00:34:23,380 --> 00:34:28,450
until<font color="#CCCCCC"> their</font><font color="#E5E5E5"> point and then start fuzzing</font>

748
00:34:25,239 --> 00:34:30,729
we can find the bugs<font color="#E5E5E5"> despite this being</font>

749
00:34:28,449 --> 00:34:34,870
an unfeasible binary just thanks to

750
00:34:30,730 --> 00:34:38,650
<font color="#E5E5E5">human use user mode anyway here's</font>

751
00:34:34,870 --> 00:34:43,089
another bug<font color="#CCCCCC"> right of</font><font color="#E5E5E5"> size 8 in G disk</font>

752
00:34:38,650 --> 00:34:45,460
which is<font color="#E5E5E5"> part of GPT fdisk so time work</font>

753
00:34:43,090 --> 00:34:47,650
mode<font color="#CCCCCC"> as I</font><font color="#E5E5E5"> just said it can start fuzzing</font>

754
00:34:45,460 --> 00:34:50,190
at any point<font color="#E5E5E5"> so it will span spin up</font><font color="#CCCCCC"> the</font>

755
00:34:47,650 --> 00:34:52,930
fork server<font color="#E5E5E5"> I'll go into that in a bit</font>

756
00:34:50,190 --> 00:34:54,639
<font color="#CCCCCC">at any</font><font color="#E5E5E5"> given point in the program it</font>

757
00:34:52,929 --> 00:34:57,490
requires<font color="#E5E5E5"> little technical knowledge and</font>

758
00:34:54,639 --> 00:34:59,620
<font color="#E5E5E5">it's fully integrated</font><font color="#CCCCCC"> with XM</font><font color="#E5E5E5"> it's shown</font>

759
00:34:57,490 --> 00:35:01,479
in<font color="#CCCCCC"> the dashboard</font><font color="#E5E5E5"> whenever</font><font color="#CCCCCC"> FEX some</font>

760
00:34:59,620 --> 00:35:03,790
fields<font color="#E5E5E5"> that there's a need for it so</font>

761
00:35:01,480 --> 00:35:06,070
it's like<font color="#E5E5E5"> hmm I'm not sure about if I</font>

762
00:35:03,790 --> 00:35:08,590
invert this correctly<font color="#CCCCCC"> maybe you want</font><font color="#E5E5E5"> to</font>

763
00:35:06,070 --> 00:35:10,420
have a look at it yourself<font color="#CCCCCC"> and then you</font>

764
00:35:08,590 --> 00:35:13,450
can<font color="#CCCCCC"> choose if the</font><font color="#E5E5E5"> binary is interesting</font>

765
00:35:10,420 --> 00:35:16,390
or not like<font color="#E5E5E5"> most of them for me or not</font>

766
00:35:13,450 --> 00:35:20,049
and then it'll<font color="#E5E5E5"> generate test cases when</font>

767
00:35:16,390 --> 00:35:22,750
you use the<font color="#E5E5E5"> binary so this is how if</font>

768
00:35:20,050 --> 00:35:25,180
I'll usually<font color="#E5E5E5"> works</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> L spawns</font><font color="#CCCCCC"> a but or</font>

769
00:35:22,750 --> 00:35:28,750
at least the<font color="#CCCCCC"> Frog server mode FL spawns</font>

770
00:35:25,180 --> 00:35:30,370
<font color="#CCCCCC">its child and</font><font color="#E5E5E5"> the child then pauses at</font>

771
00:35:28,750 --> 00:35:33,340
the very beginning<font color="#E5E5E5"> the instrumented</font>

772
00:35:30,370 --> 00:35:35,029
child and<font color="#E5E5E5"> Forks are for each new</font><font color="#CCCCCC"> fast</font>

773
00:35:33,340 --> 00:35:37,220
instance that way you

774
00:35:35,030 --> 00:35:39,320
you know<font color="#E5E5E5"> copy-on-write</font><font color="#CCCCCC"> and it's a lot</font>

775
00:35:37,220 --> 00:35:42,049
quicker as then if you would restart the

776
00:35:39,320 --> 00:35:44,900
<font color="#E5E5E5">whole program every time</font><font color="#CCCCCC"> and we added</font>

777
00:35:42,050 --> 00:35:48,170
you know<font color="#CCCCCC"> a command control port I have</font>

778
00:35:44,900 --> 00:35:50,870
one<font color="#E5E5E5"> FL and a standard i/o port so you</font>

779
00:35:48,170 --> 00:35:53,600
<font color="#CCCCCC">can then give input over</font><font color="#E5E5E5"> network and</font>

780
00:35:50,870 --> 00:35:55,970
then using the control port you can go

781
00:35:53,600 --> 00:35:58,460
back to the<font color="#CCCCCC"> beginning of the program or</font>

782
00:35:55,970 --> 00:36:03,259
<font color="#CCCCCC">you can start the folks over at any</font>

783
00:35:58,460 --> 00:36:07,700
given point in<font color="#E5E5E5"> time yeah</font><font color="#CCCCCC"> jpg</font><font color="#E5E5E5"> up Tim</font>

784
00:36:03,260 --> 00:36:09,410
another<font color="#E5E5E5"> read of size</font><font color="#CCCCCC"> 29 let's let's do</font>

785
00:36:07,700 --> 00:36:13,879
the time-warp so<font color="#CCCCCC"> winston is gonna assist</font>

786
00:36:09,410 --> 00:36:17,770
me<font color="#E5E5E5"> with the demo this time and I'm gonna</font>

787
00:36:13,880 --> 00:36:17,770
cut short a little<font color="#CCCCCC"> bit because</font><font color="#E5E5E5"> of time</font>

788
00:36:18,850 --> 00:36:24,110
so<font color="#E5E5E5"> this is this is</font><font color="#CCCCCC"> actually the j-hat</font>

789
00:36:22,220 --> 00:36:26,540
<font color="#E5E5E5">demo dead bug</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> start in the very</font>

790
00:36:24,110 --> 00:36:28,040
<font color="#CCCCCC">beginning this</font><font color="#E5E5E5"> is our demo dry</font><font color="#CCCCCC"> head so</font>

791
00:36:26,540 --> 00:36:31,400
this<font color="#E5E5E5"> is why we only</font><font color="#CCCCCC"> have one package</font>

792
00:36:28,040 --> 00:36:35,029
here it found<font color="#CCCCCC"> J head exploit or not</font>

793
00:36:31,400 --> 00:36:37,970
exploit with a<font color="#E5E5E5"> back after one minute and</font>

794
00:36:35,030 --> 00:36:40,340
and revive me<font color="#E5E5E5"> is the package that we</font>

795
00:36:37,970 --> 00:36:41,390
<font color="#CCCCCC">added so in the very left</font><font color="#E5E5E5"> you see on the</font>

796
00:36:40,340 --> 00:36:43,490
<font color="#CCCCCC">very right sorry</font>

797
00:36:41,390 --> 00:36:46,310
you see the timer button you can<font color="#E5E5E5"> press</font>

798
00:36:43,490 --> 00:36:48,529
it press it yes<font color="#E5E5E5"> it will take some time</font>

799
00:36:46,310 --> 00:36:50,120
spinning<font color="#E5E5E5"> up hopefully</font>

800
00:36:48,530 --> 00:36:52,220
yeah<font color="#E5E5E5"> it'll spin out the docker in the</font>

801
00:36:50,120 --> 00:36:54,440
<font color="#CCCCCC">background so everything is</font>

802
00:36:52,220 --> 00:36:56,959
<font color="#E5E5E5">containerized</font><font color="#CCCCCC"> and it will connect to</font><font color="#E5E5E5"> the</font>

803
00:36:54,440 --> 00:36:58,730
binary<font color="#E5E5E5"> and here this is the command</font>

804
00:36:56,960 --> 00:37:01,430
prompt as you would see it if you would

805
00:36:58,730 --> 00:37:03,290
run the<font color="#E5E5E5"> binary directly so enter a char</font>

806
00:37:01,430 --> 00:37:05,089
password here that is the thing that

807
00:37:03,290 --> 00:37:06,920
you've seen<font color="#CCCCCC"> before</font><font color="#E5E5E5"> and slides yeah you</font>

808
00:37:05,090 --> 00:37:08,990
can interact with<font color="#E5E5E5"> it or something yeah</font>

809
00:37:06,920 --> 00:37:13,150
yeah<font color="#CCCCCC"> okay let's go back</font><font color="#E5E5E5"> to the slides</font>

810
00:37:08,990 --> 00:37:16,640
then thank<font color="#E5E5E5"> you Thank You Vincent</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so</font>

811
00:37:13,150 --> 00:37:18,650
this<font color="#E5E5E5"> is the internals this is how you</font>

812
00:37:16,640 --> 00:37:20,810
know if I can't do and passing talk

813
00:37:18,650 --> 00:37:23,120
<font color="#CCCCCC">without showing you I fell for once</font><font color="#E5E5E5"> so</font>

814
00:37:20,810 --> 00:37:26,330
on the on<font color="#E5E5E5"> the bottom you</font><font color="#CCCCCC"> see that it</font>

815
00:37:23,120 --> 00:37:29,330
crashes after<font color="#E5E5E5"> a very</font><font color="#CCCCCC"> short time after</font>

816
00:37:26,330 --> 00:37:33,080
we've<font color="#CCCCCC"> done we enter a test test and</font><font color="#E5E5E5"> test</font>

817
00:37:29,330 --> 00:37:34,850
test again<font color="#CCCCCC"> using</font><font color="#E5E5E5"> standard i/o and then</font>

818
00:37:33,080 --> 00:37:38,470
started fuzzing using the command and

819
00:37:34,850 --> 00:37:39,620
control server on the on the top here

820
00:37:38,470 --> 00:37:42,049
yeah

821
00:37:39,620 --> 00:37:43,700
another crash this time it's in J hat J

822
00:37:42,050 --> 00:37:46,370
<font color="#CCCCCC">ed was the</font><font color="#E5E5E5"> crash as you just saw there</font>

823
00:37:43,700 --> 00:37:48,970
<font color="#E5E5E5">were many more</font><font color="#CCCCCC"> caresses actually</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> of</font>

824
00:37:46,370 --> 00:37:52,270
bounds<font color="#CCCCCC"> beat so to conclude this</font>

825
00:37:48,970 --> 00:37:55,240
how bad is<font color="#CCCCCC"> it right</font><font color="#E5E5E5"> if we have crashes</font>

826
00:37:52,270 --> 00:37:57,280
in<font color="#E5E5E5"> bash not embarrass re but in in the</font>

827
00:37:55,240 --> 00:38:00,549
package<font color="#CCCCCC"> bash and when you</font><font color="#E5E5E5"> install bash</font>

828
00:37:57,280 --> 00:38:02,440
you get men<font color="#CCCCCC"> into HTML you get like out</font>

829
00:38:00,550 --> 00:38:05,500
of<font color="#CCCCCC"> pound</font><font color="#E5E5E5"> read out of bounds right and</font>

830
00:38:02,440 --> 00:38:08,710
the sauce this<font color="#CCCCCC"> is the</font><font color="#E5E5E5"> crashing input by</font>

831
00:38:05,500 --> 00:38:10,960
<font color="#E5E5E5">the way</font><font color="#CCCCCC"> it's some random generates</font><font color="#E5E5E5"> that</font>

832
00:38:08,710 --> 00:38:13,119
we caught something<font color="#E5E5E5"> from github</font><font color="#CCCCCC"> and this</font>

833
00:38:10,960 --> 00:38:17,740
is random stuff that<font color="#CCCCCC"> it generated it</font>

834
00:38:13,119 --> 00:38:20,050
included CSS and whatever<font color="#CCCCCC"> it's kind of</font>

835
00:38:17,740 --> 00:38:23,169
resembles<font color="#E5E5E5"> pro your</font><font color="#CCCCCC"> man page I</font><font color="#E5E5E5"> don't know</font>

836
00:38:20,050 --> 00:38:26,140
and meant to it HTML even has this line

837
00:38:23,170 --> 00:38:27,550
and<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> intro</font><font color="#E5E5E5"> this program is rather</font>

838
00:38:26,140 --> 00:38:32,109
buggy but in spite of that<font color="#E5E5E5"> it often</font>

839
00:38:27,550 --> 00:38:35,770
<font color="#E5E5E5">works yeah so okay</font><font color="#CCCCCC"> not a bug right off</font>

840
00:38:32,109 --> 00:38:37,450
says whatever<font color="#CCCCCC"> what happens to the box</font><font color="#E5E5E5"> so</font>

841
00:38:35,770 --> 00:38:40,210
in the beginning<font color="#E5E5E5"> we</font><font color="#CCCCCC"> started off</font><font color="#E5E5E5"> okay</font>

842
00:38:37,450 --> 00:38:43,419
let's report some<font color="#E5E5E5"> we're gonna find some</font>

843
00:38:40,210 --> 00:38:45,609
so let's report them mostly<font color="#E5E5E5"> either no</font>

844
00:38:43,420 --> 00:38:47,500
response<font color="#CCCCCC"> or they didn't know how to how</font>

845
00:38:45,609 --> 00:38:51,130
to deal<font color="#CCCCCC"> with a nascent</font><font color="#E5E5E5"> output and the</font>

846
00:38:47,500 --> 00:38:53,530
binary<font color="#E5E5E5"> blob so the guys from</font><font color="#CCCCCC"> Lib PNG</font>

847
00:38:51,130 --> 00:38:55,329
<font color="#E5E5E5">told us please send a non binary file as</font>

848
00:38:53,530 --> 00:38:57,220
input<font color="#E5E5E5"> I don't know what a non binary</font>

849
00:38:55,329 --> 00:38:58,890
file<font color="#E5E5E5"> would</font><font color="#CCCCCC"> be but if they would run the</font>

850
00:38:57,220 --> 00:39:00,270
binary file in the PNG<font color="#E5E5E5"> it would crash</font>

851
00:38:58,890 --> 00:39:03,279
[Music]

852
00:39:00,270 --> 00:39:06,400
<font color="#CCCCCC">then there was another</font><font color="#E5E5E5"> one shape</font><font color="#CCCCCC"> Nick</font>

853
00:39:03,280 --> 00:39:09,760
<font color="#CCCCCC">optimum which was</font><font color="#E5E5E5"> already fixed</font><font color="#CCCCCC"> upstream</font>

854
00:39:06,400 --> 00:39:12,280
but just for a year<font color="#CCCCCC"> not downstream in</font>

855
00:39:09,760 --> 00:39:16,480
art or<font color="#E5E5E5"> upstream in art it's just in the</font>

856
00:39:12,280 --> 00:39:18,849
github repo fixed and then there is<font color="#E5E5E5"> J</font>

857
00:39:16,480 --> 00:39:21,069
had that we just talked about<font color="#CCCCCC"> it's also</font>

858
00:39:18,849 --> 00:39:24,420
in the art repo still and it will

859
00:39:21,069 --> 00:39:27,480
probably<font color="#E5E5E5"> always stay there</font><font color="#CCCCCC"> another</font><font color="#E5E5E5"> read</font>

860
00:39:24,420 --> 00:39:29,410
<font color="#E5E5E5">and this was the</font><font color="#CCCCCC"> answer of the author</font>

861
00:39:27,480 --> 00:39:31,000
<font color="#E5E5E5">unfortunately I don't have time to work</font>

862
00:39:29,410 --> 00:39:33,520
on<font color="#CCCCCC"> it these days well at least he</font>

863
00:39:31,000 --> 00:39:35,800
answered in one<font color="#CCCCCC"> day</font><font color="#E5E5E5"> so I've heard about</font>

864
00:39:33,520 --> 00:39:38,770
you know IOT is so broken<font color="#E5E5E5"> and</font><font color="#CCCCCC"> nobody is</font>

865
00:39:35,800 --> 00:39:42,280
one of we wants<font color="#CCCCCC"> to fix bugs</font><font color="#E5E5E5"> but just</font>

866
00:39:38,770 --> 00:39:45,430
look at<font color="#E5E5E5"> your local repository</font><font color="#CCCCCC"> here</font>

867
00:39:42,280 --> 00:39:49,060
that's the<font color="#CCCCCC"> - bug right</font><font color="#E5E5E5"> up</font><font color="#CCCCCC"> sized one and</font>

868
00:39:45,430 --> 00:39:50,828
<font color="#E5E5E5">some random library so what do we want</font>

869
00:39:49,060 --> 00:39:52,119
to do in future<font color="#CCCCCC"> it's not</font><font color="#E5E5E5"> about the box</font>

870
00:39:50,829 --> 00:39:54,880
we're not here<font color="#CCCCCC"> for</font><font color="#E5E5E5"> the box we here</font><font color="#CCCCCC"> for</font>

871
00:39:52,119 --> 00:39:56,319
the tool<font color="#E5E5E5"> obviously it's</font><font color="#CCCCCC"> rent change</font>

872
00:39:54,880 --> 00:39:58,720
human can still do a<font color="#E5E5E5"> lot better</font><font color="#CCCCCC"> than a</font>

873
00:39:56,319 --> 00:40:00,640
fully<font color="#E5E5E5"> automated solution</font><font color="#CCCCCC"> we want to</font>

874
00:39:58,720 --> 00:40:02,290
improve<font color="#E5E5E5"> that we want to let the machines</font>

875
00:40:00,640 --> 00:40:04,420
take<font color="#CCCCCC"> over eventually</font>

876
00:40:02,290 --> 00:40:06,609
at more repos so right now we have apt

877
00:40:04,420 --> 00:40:10,089
<font color="#E5E5E5">which wasn't tested in last week though</font>

878
00:40:06,609 --> 00:40:12,460
<font color="#E5E5E5">we have</font><font color="#CCCCCC"> pac-man we want to scale</font><font color="#E5E5E5"> maybe</font>

879
00:40:10,089 --> 00:40:13,390
github<font color="#E5E5E5"> we started</font><font color="#CCCCCC"> doing that</font><font color="#E5E5E5"> a little</font>

880
00:40:12,460 --> 00:40:16,390
bit it's hard

881
00:40:13,390 --> 00:40:20,020
you have to infer how to build a whole

882
00:40:16,390 --> 00:40:22,270
repo<font color="#E5E5E5"> that's not easy and we're still</font>

883
00:40:20,020 --> 00:40:24,460
<font color="#CCCCCC">puzzling</font><font color="#E5E5E5"> pretty shallow so you know like</font>

884
00:40:22,270 --> 00:40:27,400
symbolic execution at some point or

885
00:40:24,460 --> 00:40:32,260
<font color="#E5E5E5">something we need to go</font><font color="#CCCCCC"> deeper to stay</font>

886
00:40:27,400 --> 00:40:35,079
in the<font color="#E5E5E5"> meme category here</font><font color="#CCCCCC"> lip soundTouch</font>

887
00:40:32,260 --> 00:40:39,609
<font color="#E5E5E5">it's used in</font><font color="#CCCCCC"> sounds to it oh we</font>

888
00:40:35,079 --> 00:40:42,670
downloaded something<font color="#E5E5E5"> sorry</font><font color="#CCCCCC"> yeah this is</font>

889
00:40:39,609 --> 00:40:45,640
using audacity<font color="#E5E5E5"> or</font><font color="#CCCCCC"> some I</font><font color="#E5E5E5"> don't so to</font>

890
00:40:42,670 --> 00:40:47,109
come<font color="#CCCCCC"> back</font><font color="#E5E5E5"> to the</font><font color="#CCCCCC"> beginning</font><font color="#E5E5E5"> the TLDR we</font>

891
00:40:45,640 --> 00:40:49,440
have a fully automated<font color="#E5E5E5"> fuzzing test</font>

892
00:40:47,109 --> 00:40:51,819
framework<font color="#E5E5E5"> clever tricks up its sleeve</font>

893
00:40:49,440 --> 00:40:53,920
<font color="#E5E5E5">you can either bring your own binaries</font>

894
00:40:51,820 --> 00:40:56,260
or you can you know fast distributions

895
00:40:53,920 --> 00:40:58,150
and<font color="#CCCCCC"> we found numerous bugs if you should</font>

896
00:40:56,260 --> 00:40:59,380
<font color="#CCCCCC">just</font><font color="#E5E5E5"> see and it's free and</font><font color="#CCCCCC"> open</font><font color="#E5E5E5"> source</font>

897
00:40:58,150 --> 00:41:01,619
<font color="#E5E5E5">starting now</font>

898
00:40:59,380 --> 00:41:04,420
it just got<font color="#E5E5E5"> released to the public oh</font>

899
00:41:01,619 --> 00:41:08,740
yeah there's a<font color="#CCCCCC"> back in SQLite</font><font color="#E5E5E5"> not a</font>

900
00:41:04,420 --> 00:41:10,270
<font color="#E5E5E5">SQLite but inside its repo so it</font>

901
00:41:08,740 --> 00:41:13,649
wouldn't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> been</font><font color="#E5E5E5"> possible with lots of</font>

902
00:41:10,270 --> 00:41:15,849
people's help<font color="#E5E5E5"> and without</font><font color="#CCCCCC"> their prior</font>

903
00:41:13,650 --> 00:41:18,280
contributions that we used<font color="#E5E5E5"> from you know</font>

904
00:41:15,849 --> 00:41:20,200
<font color="#E5E5E5">open source community more help is</font>

905
00:41:18,280 --> 00:41:22,869
<font color="#E5E5E5">always appreciated so go to github.com</font>

906
00:41:20,200 --> 00:41:24,879
so there's<font color="#CCCCCC"> FG secti so let's fix them</font>

907
00:41:22,869 --> 00:41:26,410
now<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> know try it out maybe it</font>

908
00:41:24,880 --> 00:41:31,359
works hopefully<font color="#E5E5E5"> works now it will work</font>

909
00:41:26,410 --> 00:41:34,690
if not<font color="#E5E5E5"> two decisions if you</font><font color="#CCCCCC"> are ears we</font>

910
00:41:31,359 --> 00:41:36,430
are always happy<font color="#CCCCCC"> to</font><font color="#E5E5E5"> hear them so to wrap</font>

911
00:41:34,690 --> 00:41:38,530
it<font color="#CCCCCC"> up</font><font color="#E5E5E5"> simple memory corruptions are</font>

912
00:41:36,430 --> 00:41:41,259
still way too widespread<font color="#CCCCCC"> we don't know</font>

913
00:41:38,530 --> 00:41:43,690
why we find so<font color="#E5E5E5"> many bugs in simple tools</font>

914
00:41:41,260 --> 00:41:46,540
it should be easy to trivial to use<font color="#CCCCCC"> AFL</font>

915
00:41:43,690 --> 00:41:50,680
by this point<font color="#E5E5E5"> checksum then tries</font><font color="#CCCCCC"> to</font>

916
00:41:46,540 --> 00:41:53,759
help<font color="#E5E5E5"> out by I oughta mating this and it</font>

917
00:41:50,680 --> 00:41:56,529
<font color="#E5E5E5">scales it to everywhere you want to go</font>

918
00:41:53,760 --> 00:42:00,220
<font color="#E5E5E5">there's no more excuses</font><font color="#CCCCCC"> to not fastest</font>

919
00:41:56,530 --> 00:42:02,380
starting today so<font color="#E5E5E5"> thank you I</font><font color="#CCCCCC"> think we</font>

920
00:42:00,220 --> 00:42:05,459
have time left<font color="#E5E5E5"> if not and we can</font>

921
00:42:02,380 --> 00:42:07,030
continue<font color="#CCCCCC"> in the rep room that was Faxon</font>

922
00:42:05,460 --> 00:42:15,099
<font color="#CCCCCC">thanks</font>

923
00:42:07,030 --> 00:42:15,099
[Applause]

