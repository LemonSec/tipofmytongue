1
00:00:00,030 --> 00:00:03,360
hi it's<font color="#E5E5E5"> great to be here my name is Alex</font>

2
00:00:02,159 --> 00:00:05,730
<font color="#CCCCCC">bol Iselle</font><font color="#E5E5E5"> I'm here to talk</font><font color="#CCCCCC"> about</font>

3
00:00:03,360 --> 00:00:08,700
reverse<font color="#CCCCCC"> engineering</font><font color="#E5E5E5"> Windows defenders</font>

4
00:00:05,730 --> 00:00:10,740
antivirus emulator before we get<font color="#E5E5E5"> started</font>

5
00:00:08,700 --> 00:00:12,540
just<font color="#E5E5E5"> a little bit about me</font><font color="#CCCCCC"> I am a</font>

6
00:00:10,740 --> 00:00:13,980
security researcher<font color="#CCCCCC"> at for all</font><font color="#E5E5E5"> secure</font>

7
00:00:12,540 --> 00:00:15,660
you may know the company for their

8
00:00:13,980 --> 00:00:18,539
<font color="#E5E5E5">victory at the cyber Grand Challenge two</font>

9
00:00:15,660 --> 00:00:19,770
years ago at<font color="#E5E5E5"> DEFCON 2016 doing automated</font>

10
00:00:18,539 --> 00:00:23,070
vulnerability discovery and exploitation

11
00:00:19,770 --> 00:00:25,198
<font color="#CCCCCC">I also do firm re insider policy at</font>

12
00:00:23,070 --> 00:00:27,930
<font color="#CCCCCC">River loop security I'm a very proud</font>

13
00:00:25,199 --> 00:00:29,449
alumnus of RPI<font color="#CCCCCC"> and the RPI</font><font color="#E5E5E5"> SEC CTF team</font>

14
00:00:27,930 --> 00:00:32,098
was<font color="#E5E5E5"> playing in DEFCON leader this week</font>

15
00:00:29,449 --> 00:00:34,380
<font color="#E5E5E5">this is my second time at Def Con</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> try</font>

16
00:00:32,098 --> 00:00:38,099
<font color="#E5E5E5">blackhat</font><font color="#CCCCCC"> previously</font><font color="#E5E5E5"> I presented some</font>

17
00:00:34,380 --> 00:00:39,510
<font color="#E5E5E5">work called AV leak at blackhat 2016 or</font>

18
00:00:38,100 --> 00:00:41,129
get started I do want<font color="#CCCCCC"> to say this is my</font>

19
00:00:39,510 --> 00:00:43,050
personal<font color="#E5E5E5"> research and the opinions and</font>

20
00:00:41,129 --> 00:00:46,829
<font color="#E5E5E5">views expressed on my own not those</font><font color="#CCCCCC"> of</font>

21
00:00:43,050 --> 00:00:48,660
my own employers of mine I want to say

22
00:00:46,829 --> 00:00:50,850
this presentation is a deeply technical

23
00:00:48,660 --> 00:00:52,800
look at Windows defenders antivirus and

24
00:00:50,850 --> 00:00:54,180
binary emulator<font color="#E5E5E5"> and as far as</font><font color="#CCCCCC"> I know</font>

25
00:00:52,800 --> 00:00:55,739
it's the<font color="#CCCCCC"> first</font><font color="#E5E5E5"> conference to talk to</font>

26
00:00:54,180 --> 00:00:58,949
really<font color="#E5E5E5"> look at reverse engineering any</font>

27
00:00:55,739 --> 00:01:01,739
<font color="#E5E5E5">antivirus softwares binary emulator</font><font color="#CCCCCC"> that</font>

28
00:00:58,949 --> 00:01:02,849
<font color="#CCCCCC">said it's</font><font color="#E5E5E5"> not an evaluation of Windows</font>

29
00:01:01,739 --> 00:01:04,048
Defender<font color="#CCCCCC"> I'm not going to tell you</font>

30
00:01:02,850 --> 00:01:05,640
whether this is a<font color="#E5E5E5"> good product or not</font>

31
00:01:04,049 --> 00:01:07,380
whether you should<font color="#CCCCCC"> use</font><font color="#E5E5E5"> they're not how</font>

32
00:01:05,640 --> 00:01:09,090
effective is<font color="#E5E5E5"> it</font><font color="#CCCCCC"> catching viruses and</font>

33
00:01:07,380 --> 00:01:11,070
it's also<font color="#E5E5E5"> not related to Windows</font>

34
00:01:09,090 --> 00:01:12,659
Defender<font color="#CCCCCC"> ATP or any</font><font color="#E5E5E5"> of the other</font>

35
00:01:11,070 --> 00:01:14,279
technologies of<font color="#E5E5E5"> the window defender name</font>

36
00:01:12,659 --> 00:01:17,310
we're here talking<font color="#E5E5E5"> about Windows</font>

37
00:01:14,280 --> 00:01:18,509
Defender<font color="#E5E5E5"> antivirus the traditional you</font>

38
00:01:17,310 --> 00:01:21,360
<font color="#E5E5E5">know first thing to have the Windows</font>

39
00:01:18,509 --> 00:01:22,920
Defender<font color="#E5E5E5"> name it's an outline</font><font color="#CCCCCC"> in this</font>

40
00:01:21,360 --> 00:01:25,080
presentation I'm going<font color="#E5E5E5"> to go through an</font>

41
00:01:22,920 --> 00:01:27,960
introduction<font color="#E5E5E5"> then</font><font color="#CCCCCC"> talk about tooling and</font>

42
00:01:25,080 --> 00:01:29,340
process<font color="#CCCCCC"> then my reverse engineering then</font>

43
00:01:27,960 --> 00:01:30,689
a bit<font color="#E5E5E5"> of a vulnerability research and</font>

44
00:01:29,340 --> 00:01:33,860
vulnerabilities inside defender and

45
00:01:30,689 --> 00:01:36,360
<font color="#CCCCCC">they're gonna have a conclusion</font><font color="#E5E5E5"> so</font>

46
00:01:33,860 --> 00:01:37,770
<font color="#CCCCCC">Windows Defender</font><font color="#E5E5E5"> is Microsoft's built-in</font>

47
00:01:36,360 --> 00:01:39,900
antivirus software built<font color="#CCCCCC"> into all</font>

48
00:01:37,770 --> 00:01:41,399
<font color="#CCCCCC">Windows systems and as I said</font><font color="#E5E5E5"> the</font>

49
00:01:39,900 --> 00:01:43,290
defender name now seems<font color="#E5E5E5"> to cover a</font>

50
00:01:41,400 --> 00:01:44,810
variety of mitigation since security

51
00:01:43,290 --> 00:01:46,860
controls<font color="#E5E5E5"> that are built into Windows and</font>

52
00:01:44,810 --> 00:01:49,470
here today<font color="#E5E5E5"> we're talking about when it's</font>

53
00:01:46,860 --> 00:01:50,670
<font color="#E5E5E5">better antivirus not</font><font color="#CCCCCC"> ATP application</font>

54
00:01:49,470 --> 00:01:53,090
guard<font color="#CCCCCC"> exploit guard or any other</font>

55
00:01:50,670 --> 00:01:55,649
technologies with the<font color="#E5E5E5"> defender</font><font color="#CCCCCC"> named</font>

56
00:01:53,090 --> 00:01:56,549
defender<font color="#E5E5E5"> is a huge market share in the</font>

57
00:01:55,649 --> 00:01:59,250
AV industry

58
00:01:56,549 --> 00:02:00,659
<font color="#CCCCCC">eight percent of Windows 7</font><font color="#E5E5E5"> systems and</font>

59
00:01:59,250 --> 00:02:02,369
no more<font color="#E5E5E5"> than 50 percent of Windows 10</font>

60
00:02:00,659 --> 00:02:03,659
devices<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> because it's my</font>

61
00:02:02,369 --> 00:02:05,909
<font color="#E5E5E5">understanding that with Windows 10</font>

62
00:02:03,659 --> 00:02:09,179
Microsoft<font color="#CCCCCC"> turned</font><font color="#E5E5E5"> out defender by default</font>

63
00:02:05,909 --> 00:02:11,550
when you install the OS<font color="#E5E5E5"> Defender also</font>

64
00:02:09,179 --> 00:02:13,140
runs on<font color="#CCCCCC"> sandbox Taz NT authority</font><font color="#E5E5E5"> system</font>

65
00:02:11,550 --> 00:02:14,130
<font color="#E5E5E5">meaning</font><font color="#CCCCCC"> that if you</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> an exploit for</font>

66
00:02:13,140 --> 00:02:16,440
<font color="#E5E5E5">a vulnerability inside the</font>

67
00:02:14,130 --> 00:02:18,570
<font color="#E5E5E5">fender you'll get initial remote code</font>

68
00:02:16,440 --> 00:02:20,670
execution<font color="#CCCCCC"> you also have a profess</font><font color="#E5E5E5"> cup</font><font color="#CCCCCC"> to</font>

69
00:02:18,570 --> 00:02:22,290
system<font color="#CCCCCC"> and you'll have</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> Navy bypass</font>

70
00:02:20,670 --> 00:02:23,670
because<font color="#E5E5E5"> you're</font><font color="#CCCCCC"> running inside the AV</font><font color="#E5E5E5"> so</font>

71
00:02:22,290 --> 00:02:25,350
it's not likely to flag itself doing

72
00:02:23,670 --> 00:02:26,970
anything malicious it's also

73
00:02:25,350 --> 00:02:29,070
surprisingly easy for attackers to reach

74
00:02:26,970 --> 00:02:30,480
remotely<font color="#CCCCCC"> I haven't</font><font color="#E5E5E5"> tried this myself but</font>

75
00:02:29,070 --> 00:02:32,070
some<font color="#E5E5E5"> friends</font><font color="#CCCCCC"> of Google</font><font color="#E5E5E5"> project zero told</font>

76
00:02:30,480 --> 00:02:34,019
me that they were able<font color="#E5E5E5"> to get definitive</font>

77
00:02:32,070 --> 00:02:35,700
scan binaries by simply emailing them to

78
00:02:34,020 --> 00:02:38,070
<font color="#E5E5E5">people</font><font color="#CCCCCC"> who had a gmail tab open in the</font>

79
00:02:35,700 --> 00:02:40,709
<font color="#E5E5E5">background and then Google Chrome would</font>

80
00:02:38,070 --> 00:02:41,970
catch the downloaded file from the<font color="#CCCCCC"> GL</font>

81
00:02:40,710 --> 00:02:43,830
<font color="#CCCCCC">message it would</font><font color="#E5E5E5"> hit disk and</font><font color="#CCCCCC"> a mini</font>

82
00:02:41,970 --> 00:02:45,180
filter driver would grab it<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then go</font>

83
00:02:43,830 --> 00:02:48,150
scan it so it's<font color="#E5E5E5"> actually really easy to</font>

84
00:02:45,180 --> 00:02:49,980
<font color="#E5E5E5">get into this attack surface my</font>

85
00:02:48,150 --> 00:02:51,840
motivation was<font color="#CCCCCC"> you might have</font><font color="#E5E5E5"> seen this</font>

86
00:02:49,980 --> 00:02:54,090
tweet about<font color="#E5E5E5"> a year</font><font color="#CCCCCC"> ago</font><font color="#E5E5E5"> Tavis</font><font color="#CCCCCC"> Ormandy and</font>

87
00:02:51,840 --> 00:02:55,980
Natalie<font color="#E5E5E5"> Silvana</font><font color="#CCCCCC"> via Google</font><font color="#E5E5E5"> project zero</font>

88
00:02:54,090 --> 00:02:57,330
discovered some great defender bugs<font color="#E5E5E5"> and</font>

89
00:02:55,980 --> 00:02:59,700
I have<font color="#E5E5E5"> looked at other a of these but</font>

90
00:02:57,330 --> 00:03:00,840
never defender<font color="#E5E5E5"> so I spent about four</font>

91
00:02:59,700 --> 00:03:02,310
months<font color="#CCCCCC"> reverse engineering</font><font color="#E5E5E5"> Windows</font>

92
00:03:00,840 --> 00:03:03,840
<font color="#E5E5E5">defenders JavaScript engine what you're</font>

93
00:03:02,310 --> 00:03:05,910
going to<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> just briefly</font><font color="#CCCCCC"> next</font>

94
00:03:03,840 --> 00:03:07,410
and then after doing<font color="#E5E5E5"> that I moved on to</font>

95
00:03:05,910 --> 00:03:09,000
looking<font color="#E5E5E5"> at the Windows emulator for</font>

96
00:03:07,410 --> 00:03:12,630
<font color="#E5E5E5">about five or six months and that's what</font>

97
00:03:09,000 --> 00:03:15,150
you're seeing here<font color="#CCCCCC"> today now</font><font color="#E5E5E5"> defender</font>

98
00:03:12,630 --> 00:03:15,780
has a number<font color="#CCCCCC"> of</font><font color="#E5E5E5"> components and and</font>

99
00:03:15,150 --> 00:03:18,630
things like<font color="#E5E5E5"> that</font>

100
00:03:15,780 --> 00:03:20,870
<font color="#E5E5E5">I've different plugins drivers dll's and</font>

101
00:03:18,630 --> 00:03:23,880
so forth<font color="#E5E5E5"> here we're looking at the main</font>

102
00:03:20,870 --> 00:03:26,700
traditional main defender<font color="#E5E5E5"> DLL MP engine</font>

103
00:03:23,880 --> 00:03:28,170
<font color="#E5E5E5">DLL</font><font color="#CCCCCC"> this is really the main scanning</font>

104
00:03:26,700 --> 00:03:30,600
interface for defender so it's<font color="#E5E5E5"> not doing</font>

105
00:03:28,170 --> 00:03:31,950
say system<font color="#E5E5E5"> call hooking or</font><font color="#CCCCCC"> callbacks or</font>

106
00:03:30,600 --> 00:03:33,750
<font color="#E5E5E5">anything like that it's the main</font>

107
00:03:31,950 --> 00:03:38,040
scanning interface that says given a

108
00:03:33,750 --> 00:03:39,540
file<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> file malicious or not want</font>

109
00:03:38,040 --> 00:03:41,429
<font color="#E5E5E5">to talk a</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit about my prior</font>

110
00:03:39,540 --> 00:03:43,049
research on<font color="#CCCCCC"> defenders</font><font color="#E5E5E5"> JavaScript engine</font>

111
00:03:41,430 --> 00:03:45,540
which presented<font color="#E5E5E5"> out at recon Brussels in</font>

112
00:03:43,050 --> 00:03:46,440
Brussels<font color="#E5E5E5"> Belgium in February and some of</font>

113
00:03:45,540 --> 00:03:48,120
the themes<font color="#CCCCCC"> that I'm going</font><font color="#E5E5E5"> to talk about</font>

114
00:03:46,440 --> 00:03:50,190
the<font color="#CCCCCC"> JavaScript engine you're going to</font>

115
00:03:48,120 --> 00:03:51,240
see repeated in the<font color="#CCCCCC"> windows engine this</font>

116
00:03:50,190 --> 00:03:53,730
<font color="#CCCCCC">bit Lille equal taking to the</font>

117
00:03:51,240 --> 00:03:55,230
presentation<font color="#E5E5E5"> so I found</font><font color="#CCCCCC"> they the</font>

118
00:03:53,730 --> 00:03:56,730
defender had a<font color="#E5E5E5"> JavaScript engine used</font>

119
00:03:55,230 --> 00:03:59,820
for analysis of potentially malicious

120
00:03:56,730 --> 00:04:01,649
code<font color="#E5E5E5"> that I reversed from</font><font color="#CCCCCC"> binary I use</font>

121
00:03:59,820 --> 00:04:04,590
the custom shell and loader with help

122
00:04:01,650 --> 00:04:05,760
from<font color="#CCCCCC"> Ralph</font><font color="#E5E5E5"> rolls so this was a custom</font>

123
00:04:04,590 --> 00:04:07,080
shell we<font color="#CCCCCC"> could</font><font color="#E5E5E5"> use to interact with this</font>

124
00:04:05,760 --> 00:04:09,870
<font color="#CCCCCC">JavaScript engine which is</font><font color="#E5E5E5"> not normally</font>

125
00:04:07,080 --> 00:04:11,100
<font color="#E5E5E5">exposed to users and I found throughout</font>

126
00:04:09,870 --> 00:04:13,230
the<font color="#CCCCCC"> engine that there were a V</font>

127
00:04:11,100 --> 00:04:14,700
instrumentation callbacks<font color="#E5E5E5"> to</font><font color="#CCCCCC"> inform the</font>

128
00:04:13,230 --> 00:04:16,048
engine about actions<font color="#E5E5E5"> that potentially</font>

129
00:04:14,700 --> 00:04:18,570
malicious JavaScript scripts<font color="#E5E5E5"> weren't</font>

130
00:04:16,048 --> 00:04:19,829
using or taking and I also found<font color="#CCCCCC"> that</font>

131
00:04:18,570 --> 00:04:21,630
the<font color="#E5E5E5"> developers</font><font color="#CCCCCC"> made the choice that</font>

132
00:04:19,829 --> 00:04:23,640
<font color="#E5E5E5">seemed to emphasize security at the cost</font>

133
00:04:21,630 --> 00:04:25,320
<font color="#E5E5E5">of performance</font><font color="#CCCCCC"> so the engine</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> not</font>

134
00:04:23,640 --> 00:04:26,530
<font color="#E5E5E5">necessarily super fast</font><font color="#CCCCCC"> at Hershel drop</font>

135
00:04:25,320 --> 00:04:29,889
<font color="#E5E5E5">script engine</font>

136
00:04:26,530 --> 00:04:31,690
I found<font color="#E5E5E5"> it</font><font color="#CCCCCC"> to be relatively secure in</font>

137
00:04:29,889 --> 00:04:33,520
terms of related work in the<font color="#CCCCCC"> AV reverse</font>

138
00:04:31,690 --> 00:04:36,910
<font color="#CCCCCC">engineering space</font><font color="#E5E5E5"> there's only a handful</font>

139
00:04:33,520 --> 00:04:38,320
<font color="#E5E5E5">of prior publications</font><font color="#CCCCCC"> I did some</font><font color="#E5E5E5"> work</font>

140
00:04:36,910 --> 00:04:41,410
called<font color="#E5E5E5"> a V leak with some collaborators</font>

141
00:04:38,320 --> 00:04:42,909
<font color="#CCCCCC">from my</font><font color="#E5E5E5"> University</font><font color="#CCCCCC"> we presented that</font><font color="#E5E5E5"> two</font>

142
00:04:41,410 --> 00:04:44,560
years<font color="#E5E5E5"> ago here at Glock had indefinite</font>

143
00:04:42,910 --> 00:04:46,720
blackout<font color="#E5E5E5"> and music</font><font color="#CCCCCC"> swoon as well</font>

144
00:04:44,560 --> 00:04:48,700
there's also<font color="#CCCCCC"> tablets or Mindy's defender</font>

145
00:04:46,720 --> 00:04:51,340
bugs<font color="#CCCCCC"> from 2017 and you might</font><font color="#E5E5E5"> have seen</font>

146
00:04:48,700 --> 00:04:52,630
and<font color="#CCCCCC"> hak-seon wrote a great book but in</font>

147
00:04:51,340 --> 00:04:55,270
general there's not a lot of<font color="#E5E5E5"> talk about</font>

148
00:04:52,630 --> 00:04:57,340
<font color="#E5E5E5">reversing</font><font color="#CCCCCC"> IVs and in particular my focus</font>

149
00:04:55,270 --> 00:04:59,349
<font color="#E5E5E5">on AV emulators there's really no prior</font>

150
00:04:57,340 --> 00:05:01,179
art other than there is<font color="#E5E5E5"> actually a</font>

151
00:04:59,350 --> 00:05:03,580
<font color="#E5E5E5">couple AV industry patents or that great</font>

152
00:05:01,180 --> 00:05:05,800
<font color="#CCCCCC">presentation from BitDefender looking at</font>

153
00:05:03,580 --> 00:05:09,820
their emulator from<font color="#E5E5E5"> 10 10 plus</font><font color="#CCCCCC"> years</font><font color="#E5E5E5"> ago</font>

154
00:05:05,800 --> 00:05:11,200
<font color="#CCCCCC">I think it doesn't 8so including the</font>

155
00:05:09,820 --> 00:05:13,930
kind<font color="#E5E5E5"> of background</font><font color="#CCCCCC"> section let's talk</font>

156
00:05:11,200 --> 00:05:15,190
about emulation itself so the

157
00:05:13,930 --> 00:05:17,230
traditional AV model I<font color="#CCCCCC"> think a lot of</font>

158
00:05:15,190 --> 00:05:18,820
people think of is the city of<font color="#E5E5E5"> scanning</font>

159
00:05:17,230 --> 00:05:21,640
<font color="#E5E5E5">files and look for known malicious</font>

160
00:05:18,820 --> 00:05:23,919
sequences or signatures such as file

161
00:05:21,640 --> 00:05:26,349
hashes<font color="#E5E5E5"> sequences of bytes or traits of</font>

162
00:05:23,919 --> 00:05:28,900
the<font color="#E5E5E5"> file but the problem is that</font><font color="#CCCCCC"> the</font>

163
00:05:26,350 --> 00:05:31,630
<font color="#CCCCCC">signature based</font><font color="#E5E5E5"> heuristics like</font><font color="#CCCCCC"> this</font>

164
00:05:28,900 --> 00:05:33,429
<font color="#E5E5E5">using hashes</font><font color="#CCCCCC"> or things that</font><font color="#E5E5E5"> are very</font>

165
00:05:31,630 --> 00:05:35,800
easily evaded with<font color="#CCCCCC"> pact code and Apple</font>

166
00:05:33,430 --> 00:05:37,690
binaries and so forth<font color="#CCCCCC"> this has been a</font>

167
00:05:35,800 --> 00:05:39,330
problem<font color="#E5E5E5"> for a long time I'm talking 15</font>

168
00:05:37,690 --> 00:05:42,039
to 20 plus years this has<font color="#CCCCCC"> been a problem</font>

169
00:05:39,330 --> 00:05:44,680
so about 15 or 20<font color="#CCCCCC"> years ago the AV</font>

170
00:05:42,039 --> 00:05:46,630
industry moved into emulation so taking

171
00:05:44,680 --> 00:05:47,740
potentially malicious<font color="#E5E5E5"> unknown binaries</font>

172
00:05:46,630 --> 00:05:49,840
<font color="#E5E5E5">and actually running them in a</font>

173
00:05:47,740 --> 00:05:50,740
virtualized environment to see what are

174
00:05:49,840 --> 00:05:52,960
they doing at<font color="#CCCCCC"> run time</font>

175
00:05:50,740 --> 00:05:54,400
are they malicious or not and this

176
00:05:52,960 --> 00:05:57,159
technology<font color="#CCCCCC"> both</font><font color="#E5E5E5"> by names such as</font>

177
00:05:54,400 --> 00:05:59,849
sandboxing<font color="#E5E5E5"> dynamic analysis that a</font>

178
00:05:57,160 --> 00:06:02,950
nation chamber is so forth

179
00:05:59,850 --> 00:06:03,940
it's an overview of emulation<font color="#E5E5E5"> you're</font>

180
00:06:02,950 --> 00:06:06,460
going to take a potentially<font color="#CCCCCC"> malicious</font>

181
00:06:03,940 --> 00:06:08,100
<font color="#E5E5E5">unknown binary loaded into</font><font color="#CCCCCC"> you or</font>

182
00:06:06,460 --> 00:06:10,090
virtual memory space<font color="#CCCCCC"> for your emulator</font>

183
00:06:08,100 --> 00:06:12,400
<font color="#CCCCCC">begin to running from some entry point</font>

184
00:06:10,090 --> 00:06:14,500
<font color="#E5E5E5">and run into</font><font color="#CCCCCC"> a termination condition</font>

185
00:06:12,400 --> 00:06:17,349
such as time number of instructions

186
00:06:14,500 --> 00:06:20,979
executed<font color="#E5E5E5"> number of API calls</font><font color="#CCCCCC"> amount</font><font color="#E5E5E5"> of</font>

187
00:06:17,350 --> 00:06:22,270
memory<font color="#E5E5E5"> used etc and throughout this</font>

188
00:06:20,979 --> 00:06:23,950
process<font color="#E5E5E5"> you're collecting heuristic</font>

189
00:06:22,270 --> 00:06:25,990
observations about the<font color="#CCCCCC"> malleus runtime</font>

190
00:06:23,950 --> 00:06:27,789
behavior<font color="#CCCCCC"> looking for signatures</font><font color="#E5E5E5"> and</font>

191
00:06:25,990 --> 00:06:29,860
memory or<font color="#CCCCCC"> dropped the disk or anything</font>

192
00:06:27,789 --> 00:06:32,400
else<font color="#E5E5E5"> you use the detect malware that you</font>

193
00:06:29,860 --> 00:06:33,760
can't detect with<font color="#E5E5E5"> a single static hash</font>

194
00:06:32,400 --> 00:06:35,530
<font color="#E5E5E5">all right</font>

195
00:06:33,760 --> 00:06:36,880
that includes the introduction moving

196
00:06:35,530 --> 00:06:39,758
<font color="#E5E5E5">into talking</font><font color="#CCCCCC"> about my tooling and</font>

197
00:06:36,880 --> 00:06:42,349
process so how I did what I did

198
00:06:39,759 --> 00:06:44,210
did traditional<font color="#E5E5E5"> static analysis with</font>

199
00:06:42,349 --> 00:06:46,909
industry standard technologies like<font color="#E5E5E5"> Ida</font>

200
00:06:44,210 --> 00:06:48,378
<font color="#E5E5E5">Pro also did some patch analysis with</font>

201
00:06:46,909 --> 00:06:50,449
<font color="#CCCCCC">and</font><font color="#E5E5E5"> if so I said to take multiple</font>

202
00:06:48,379 --> 00:06:52,039
versions of defender<font color="#E5E5E5"> and</font><font color="#CCCCCC"> diff them and</font>

203
00:06:50,449 --> 00:06:53,810
see what a change<font color="#E5E5E5"> would</font><font color="#CCCCCC"> have updated as</font>

204
00:06:52,039 --> 00:06:55,219
for<font color="#E5E5E5"> example project zero is finding</font>

205
00:06:53,810 --> 00:06:57,080
vulnerability as a defender<font color="#CCCCCC"> I could</font>

206
00:06:55,220 --> 00:06:59,449
<font color="#E5E5E5">analyze and see how Microsoft was</font><font color="#CCCCCC"> fixing</font>

207
00:06:57,080 --> 00:07:01,400
them<font color="#CCCCCC"> I found it really</font><font color="#E5E5E5"> nice that</font>

208
00:06:59,449 --> 00:07:03,289
<font color="#E5E5E5">Microsoft publishes PD B's these are</font>

209
00:07:01,400 --> 00:07:05,539
debug<font color="#E5E5E5"> databases that describe the file</font>

210
00:07:03,289 --> 00:07:08,840
have symbols<font color="#E5E5E5"> and structures and things</font>

211
00:07:05,539 --> 00:07:10,190
<font color="#CCCCCC">like that</font><font color="#E5E5E5"> and while I was doing the</font>

212
00:07:08,840 --> 00:07:11,690
static analysis I also did a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of</font>

213
00:07:10,190 --> 00:07:13,219
dynamic analysis but there's<font color="#CCCCCC"> a little</font>

214
00:07:11,690 --> 00:07:16,370
challenges to<font color="#E5E5E5"> doing dynamic analysis of</font>

215
00:07:13,219 --> 00:07:17,389
avian engines<font color="#CCCCCC"> defenders case it runs as</font>

216
00:07:16,370 --> 00:07:19,009
a protective process

217
00:07:17,389 --> 00:07:21,259
you can't debug it even as local admin

218
00:07:19,009 --> 00:07:24,400
you have to attach a kernel debugger to

219
00:07:21,259 --> 00:07:26,509
a VM<font color="#E5E5E5"> in order to</font><font color="#CCCCCC"> actually debug defender</font>

220
00:07:24,400 --> 00:07:28,400
introspection can be difficult the thing

221
00:07:26,509 --> 00:07:29,930
is just so complex<font color="#E5E5E5"> when you're looking</font>

222
00:07:28,400 --> 00:07:32,060
at emulator it can be very difficult to

223
00:07:29,930 --> 00:07:33,319
<font color="#CCCCCC">analyze the virtual emulated</font><font color="#E5E5E5"> state and</font>

224
00:07:32,060 --> 00:07:35,810
the real<font color="#CCCCCC"> estate and all this kind of</font>

225
00:07:33,319 --> 00:07:37,129
stuff<font color="#CCCCCC"> from</font><font color="#E5E5E5"> just a debugger scanning on</font>

226
00:07:35,810 --> 00:07:38,449
demand can<font color="#E5E5E5"> be difficult to trigger if</font>

227
00:07:37,129 --> 00:07:40,069
<font color="#E5E5E5">you for example have to go into a GUI</font>

228
00:07:38,449 --> 00:07:42,500
and<font color="#E5E5E5"> select the file and do multiple</font>

229
00:07:40,069 --> 00:07:44,690
<font color="#E5E5E5">clicks and drags and drops that's a pain</font>

230
00:07:42,500 --> 00:07:46,370
to automate and also code reach<font color="#E5E5E5"> ability</font>

231
00:07:44,690 --> 00:07:49,219
can be configuration<font color="#CCCCCC"> to heuristics</font>

232
00:07:46,370 --> 00:07:50,539
<font color="#E5E5E5">dependent so in some cases your defender</font>

233
00:07:49,219 --> 00:07:53,210
installed we<font color="#CCCCCC"> could figure not to use</font>

234
00:07:50,539 --> 00:07:54,979
emulation<font color="#CCCCCC"> for</font><font color="#E5E5E5"> whatever reason the</font>

235
00:07:53,210 --> 00:07:56,900
solution<font color="#E5E5E5"> to this problem is to build</font>

236
00:07:54,979 --> 00:07:58,430
custom<font color="#E5E5E5"> loaders</font><font color="#CCCCCC"> 480 binaries and this is</font>

237
00:07:56,900 --> 00:08:00,500
not a unique idea to mean other people

238
00:07:58,430 --> 00:08:03,680
<font color="#CCCCCC">like Travis and Hawkes Anna thought</font><font color="#E5E5E5"> look</font>

239
00:08:00,500 --> 00:08:06,139
what<font color="#CCCCCC"> the need to do this</font><font color="#E5E5E5"> as well</font><font color="#CCCCCC"> so I</font>

240
00:08:03,680 --> 00:08:07,639
began my<font color="#E5E5E5"> work by</font><font color="#CCCCCC"> taking a tool built by</font>

241
00:08:06,139 --> 00:08:09,319
<font color="#E5E5E5">Travis Ormandy of Google project</font><font color="#CCCCCC"> 0</font>

242
00:08:07,639 --> 00:08:12,009
called load library<font color="#E5E5E5"> and what type of</font>

243
00:08:09,319 --> 00:08:14,270
stood was<font color="#CCCCCC"> the PE loader for Linux</font>

244
00:08:12,009 --> 00:08:16,069
specifically tailored to<font color="#CCCCCC"> the needs of</font>

245
00:08:14,270 --> 00:08:17,049
<font color="#E5E5E5">Windows Defender</font><font color="#CCCCCC"> this is not a full fact</font>

246
00:08:16,069 --> 00:08:19,729
a<font color="#E5E5E5"> full-featured</font>

247
00:08:17,050 --> 00:08:21,680
Windows emulator akin to<font color="#E5E5E5"> wine or nothing</font>

248
00:08:19,729 --> 00:08:23,568
like<font color="#E5E5E5"> that just enough to get the fender</font>

249
00:08:21,680 --> 00:08:25,550
running on Linux<font color="#E5E5E5"> so loading the P file</font>

250
00:08:23,569 --> 00:08:28,009
in and exposing a scanning interface<font color="#CCCCCC"> I</font>

251
00:08:25,550 --> 00:08:29,750
built about<font color="#CCCCCC"> 3,000 lines of tooling on</font>

252
00:08:28,009 --> 00:08:32,690
<font color="#E5E5E5">top of that in order</font><font color="#CCCCCC"> to enable</font><font color="#E5E5E5"> my</font>

253
00:08:29,750 --> 00:08:34,760
research<font color="#E5E5E5"> which I'll talk about quick</font>

254
00:08:32,690 --> 00:08:37,070
<font color="#CCCCCC">walk through of how Tabitha's load</font>

255
00:08:34,760 --> 00:08:39,799
library<font color="#CCCCCC"> Tool Works</font><font color="#E5E5E5"> we begin with our</font>

256
00:08:37,070 --> 00:08:41,539
<font color="#CCCCCC">Linux MP client binary this is this</font>

257
00:08:39,799 --> 00:08:44,420
<font color="#E5E5E5">binary that's</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> do the</font><font color="#CCCCCC"> loading for</font>

258
00:08:41,539 --> 00:08:46,819
us<font color="#E5E5E5"> we've loaded URI locations for</font><font color="#CCCCCC"> MB</font>

259
00:08:44,420 --> 00:08:48,349
<font color="#E5E5E5">engine</font><font color="#CCCCCC"> dll so just a matter of reading</font>

260
00:08:46,820 --> 00:08:50,360
<font color="#E5E5E5">the piece back and understanding how</font><font color="#CCCCCC"> to</font>

261
00:08:48,350 --> 00:08:51,500
map in a<font color="#E5E5E5"> P file into memory even though</font>

262
00:08:50,360 --> 00:08:53,000
we're on<font color="#E5E5E5"> Linux</font>

263
00:08:51,500 --> 00:08:54,920
do we go<font color="#E5E5E5"> through the import address</font>

264
00:08:53,000 --> 00:08:57,110
table<font color="#CCCCCC"> and resolve</font><font color="#E5E5E5"> imports to windows</font>

265
00:08:54,920 --> 00:08:59,569
functions<font color="#E5E5E5"> to</font><font color="#CCCCCC"> shimmed out implementations</font>

266
00:08:57,110 --> 00:09:01,820
of them on<font color="#CCCCCC"> linux</font><font color="#E5E5E5"> so for example a call</font>

267
00:08:59,570 --> 00:09:04,460
to create file is trimmed out to a call

268
00:09:01,820 --> 00:09:07,400
to F<font color="#E5E5E5"> open and a call to</font><font color="#CCCCCC"> write file is</font>

269
00:09:04,460 --> 00:09:09,230
done with F right<font color="#E5E5E5"> and then inside of</font>

270
00:09:07,400 --> 00:09:10,430
<font color="#E5E5E5">there we have an emulator and for now</font>

271
00:09:09,230 --> 00:09:12,110
<font color="#E5E5E5">just remember that it</font><font color="#CCCCCC"> has this table</font>

272
00:09:10,430 --> 00:09:15,430
Jesus calls this<font color="#CCCCCC"> is basically</font><font color="#E5E5E5"> a table of</font>

273
00:09:12,110 --> 00:09:17,330
emulations for various<font color="#E5E5E5"> windows api's</font>

274
00:09:15,430 --> 00:09:19,939
outside<font color="#E5E5E5"> of there we have our malware</font>

275
00:09:17,330 --> 00:09:21,770
binary we call a function called<font color="#CCCCCC"> our</font>

276
00:09:19,940 --> 00:09:23,570
signal with the malware binary as a

277
00:09:21,770 --> 00:09:26,360
buffer<font color="#E5E5E5"> and we say here you scan this</font>

278
00:09:23,570 --> 00:09:28,190
buffer of this length then<font color="#E5E5E5"> we go through</font>

279
00:09:26,360 --> 00:09:30,320
<font color="#E5E5E5">some scanning engine selection that</font><font color="#CCCCCC"> will</font>

280
00:09:28,190 --> 00:09:32,390
see if they can<font color="#E5E5E5"> scan and detect this</font>

281
00:09:30,320 --> 00:09:34,070
<font color="#E5E5E5">with</font><font color="#CCCCCC"> no six that</font><font color="#E5E5E5"> caches or whatever if</font>

282
00:09:32,390 --> 00:09:35,660
<font color="#CCCCCC">they can't eventually they'll make their</font>

283
00:09:34,070 --> 00:09:37,910
<font color="#E5E5E5">way to the emulator</font><font color="#CCCCCC"> and our malware</font>

284
00:09:35,660 --> 00:09:39,530
binary will get<font color="#CCCCCC"> am elated</font><font color="#E5E5E5"> there the</font>

285
00:09:37,910 --> 00:09:41,990
defender<font color="#E5E5E5"> comes back and says hey we</font>

286
00:09:39,530 --> 00:09:43,220
found this<font color="#E5E5E5"> particular virus so it's a</font>

287
00:09:41,990 --> 00:09:46,640
very<font color="#E5E5E5"> simple interface all you get is a</font>

288
00:09:43,220 --> 00:09:49,220
name of virus out so a quick demo let's

289
00:09:46,640 --> 00:09:50,810
see<font color="#E5E5E5"> scanning with</font><font color="#CCCCCC"> MB client so here I'm</font>

290
00:09:49,220 --> 00:09:52,550
going<font color="#E5E5E5"> to scan the e car test file this</font>

291
00:09:50,810 --> 00:09:55,520
is an<font color="#CCCCCC"> industry standard test file for</font>

292
00:09:52,550 --> 00:09:56,719
any<font color="#E5E5E5"> AV</font><font color="#CCCCCC"> this is not a cumulative file</font><font color="#E5E5E5"> but</font>

293
00:09:55,520 --> 00:09:58,579
this is<font color="#E5E5E5"> just standard in the AV industry</font>

294
00:09:56,720 --> 00:10:01,190
you scan this and it should<font color="#E5E5E5"> say found a</font>

295
00:09:58,580 --> 00:10:03,440
card not<font color="#E5E5E5"> a</font><font color="#CCCCCC"> virus</font><font color="#E5E5E5"> so we're gonna run load</font>

296
00:10:01,190 --> 00:10:05,480
<font color="#CCCCCC">library and a</font><font color="#E5E5E5"> client and scan D car calm</font>

297
00:10:03,440 --> 00:10:07,850
and we'll see defender comes back with a

298
00:10:05,480 --> 00:10:10,880
classification<font color="#E5E5E5"> that</font><font color="#CCCCCC"> this was a</font><font color="#E5E5E5"> virus</font>

299
00:10:07,850 --> 00:10:13,370
thought<font color="#CCCCCC"> C</font><font color="#E5E5E5"> car test file</font><font color="#CCCCCC"> all right so</font>

300
00:10:10,880 --> 00:10:14,660
that's just<font color="#E5E5E5"> the basic standard tool that</font>

301
00:10:13,370 --> 00:10:19,100
just<font color="#E5E5E5"> does that scanning all we get out</font>

302
00:10:14,660 --> 00:10:20,780
is a<font color="#E5E5E5"> malware name in addition to just</font>

303
00:10:19,100 --> 00:10:22,790
running<font color="#CCCCCC"> the engine I wanted to</font><font color="#E5E5E5"> collect</font>

304
00:10:20,780 --> 00:10:23,600
more information<font color="#E5E5E5"> on it such as debug and</font>

305
00:10:22,790 --> 00:10:25,849
given things like that

306
00:10:23,600 --> 00:10:27,410
I found that debugger is like gdb on

307
00:10:25,850 --> 00:10:28,280
Linux or<font color="#E5E5E5"> just a little too</font><font color="#CCCCCC"> low-level for</font>

308
00:10:27,410 --> 00:10:29,390
what I wanted to do the amount<font color="#CCCCCC"> of</font>

309
00:10:28,280 --> 00:10:31,339
<font color="#E5E5E5">introspection I wanted to do and then</font>

310
00:10:29,390 --> 00:10:33,140
the complexity<font color="#CCCCCC"> I was dealing with</font><font color="#E5E5E5"> so</font>

311
00:10:31,340 --> 00:10:34,610
ended<font color="#E5E5E5"> up using a code coverage analysis</font>

312
00:10:33,140 --> 00:10:36,140
tool called<font color="#CCCCCC"> lighthouse which was</font>

313
00:10:34,610 --> 00:10:38,360
developed by Marcus<font color="#E5E5E5"> gross a</font><font color="#CCCCCC"> Tom</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> ret</font>

314
00:10:36,140 --> 00:10:42,110
<font color="#CCCCCC">to systems</font><font color="#E5E5E5"> who is also a fellow alumnus</font>

315
00:10:38,360 --> 00:10:44,000
of RPI<font color="#E5E5E5"> SEC and RPI with me and</font><font color="#CCCCCC"> well-laid</font>

316
00:10:42,110 --> 00:10:46,430
house does run<font color="#E5E5E5"> a given binary under</font>

317
00:10:44,000 --> 00:10:48,530
Intel<font color="#E5E5E5"> pin or</font><font color="#CCCCCC"> Dynamo</font><font color="#E5E5E5"> real instrumentation</font>

318
00:10:46,430 --> 00:10:49,849
<font color="#CCCCCC">then</font><font color="#E5E5E5"> emit a file that has some</font><font color="#CCCCCC"> cupboard</font>

319
00:10:48,530 --> 00:10:52,280
information which<font color="#E5E5E5"> you've been</font><font color="#CCCCCC"> loading</font><font color="#E5E5E5"> to</font>

320
00:10:49,850 --> 00:10:54,050
<font color="#CCCCCC">Ida Pro and you can visualize what</font><font color="#E5E5E5"> basic</font>

321
00:10:52,280 --> 00:10:55,160
<font color="#CCCCCC">locks were</font><font color="#E5E5E5"> hit during execution and my</font>

322
00:10:54,050 --> 00:10:57,199
<font color="#E5E5E5">family's we have are a useful tool</font>

323
00:10:55,160 --> 00:10:59,420
throughout<font color="#E5E5E5"> my reversing I'll show</font><font color="#CCCCCC"> some</font>

324
00:10:57,200 --> 00:11:00,980
<font color="#E5E5E5">examples of that as I go</font><font color="#CCCCCC"> through</font><font color="#E5E5E5"> I did</font>

325
00:10:59,420 --> 00:11:02,420
find it kind of funny<font color="#E5E5E5"> a</font><font color="#CCCCCC"> have our flake</font>

326
00:11:00,980 --> 00:11:03,380
<font color="#CCCCCC">really great</font><font color="#E5E5E5"> reverse engineer with</font>

327
00:11:02,420 --> 00:11:05,120
Google project<font color="#E5E5E5"> zero</font>

328
00:11:03,380 --> 00:11:06,680
give a keynote<font color="#E5E5E5"> about challenges</font>

329
00:11:05,120 --> 00:11:08,510
reverse engineering<font color="#E5E5E5"> and actually pointed</font>

330
00:11:06,680 --> 00:11:09,890
out that collecting<font color="#CCCCCC"> covered traces from</font>

331
00:11:08,510 --> 00:11:11,960
<font color="#E5E5E5">Windows Defender itself in this</font>

332
00:11:09,890 --> 00:11:13,850
particular<font color="#E5E5E5"> DLL we're working with is</font>

333
00:11:11,960 --> 00:11:17,660
<font color="#E5E5E5">very difficult because of the fact that</font>

334
00:11:13,850 --> 00:11:19,580
it runs<font color="#E5E5E5"> as a</font><font color="#CCCCCC"> privilege process</font><font color="#E5E5E5"> okay</font>

335
00:11:17,660 --> 00:11:21,560
moving<font color="#CCCCCC"> into</font><font color="#E5E5E5"> talking</font><font color="#CCCCCC"> about my reverse</font>

336
00:11:19,580 --> 00:11:22,760
engineering itself<font color="#E5E5E5"> first up</font><font color="#CCCCCC"> were going</font>

337
00:11:21,560 --> 00:11:24,829
<font color="#CCCCCC">to talk about the engine start up an</font>

338
00:11:22,760 --> 00:11:31,310
initialization<font color="#E5E5E5"> very quick overview</font><font color="#CCCCCC"> of</font>

339
00:11:24,830 --> 00:11:33,200
that so defenders are signal<font color="#CCCCCC"> function</font>

340
00:11:31,310 --> 00:11:34,939
provides an entry<font color="#CCCCCC"> point into defenders</font>

341
00:11:33,200 --> 00:11:36,440
scanning you give a buffer<font color="#E5E5E5"> of data and</font>

342
00:11:34,940 --> 00:11:38,660
it comes back<font color="#CCCCCC"> with a classification</font><font color="#E5E5E5"> of</font>

343
00:11:36,440 --> 00:11:40,190
the malware<font color="#CCCCCC"> was it malicious what is it</font>

344
00:11:38,660 --> 00:11:43,069
<font color="#E5E5E5">and what's its name that's what we saw</font>

345
00:11:40,190 --> 00:11:44,600
<font color="#E5E5E5">with the</font><font color="#CCCCCC"> e</font><font color="#E5E5E5"> car test file example as I</font>

346
00:11:43,070 --> 00:11:46,250
<font color="#E5E5E5">said</font><font color="#CCCCCC"> defender uses emulation to</font><font color="#E5E5E5"> analyze</font>

347
00:11:44,600 --> 00:11:47,420
potentially in malicious binaries<font color="#CCCCCC"> that</font>

348
00:11:46,250 --> 00:11:50,120
<font color="#CCCCCC">doesn't recognize</font><font color="#E5E5E5"> an other</font><font color="#CCCCCC"> less</font>

349
00:11:47,420 --> 00:11:52,430
<font color="#CCCCCC">expensive analyses as</font><font color="#E5E5E5"> hashing or other</font>

350
00:11:50,120 --> 00:11:53,330
heuristics<font color="#E5E5E5"> like that and emulate results</font>

351
00:11:52,430 --> 00:11:54,469
are also<font color="#CCCCCC"> cached</font>

352
00:11:53,330 --> 00:11:56,450
meaning if you<font color="#E5E5E5"> try to scan the file</font>

353
00:11:54,470 --> 00:11:57,860
twice<font color="#CCCCCC"> over</font><font color="#E5E5E5"> the first time you scan it</font>

354
00:11:56,450 --> 00:11:58,310
<font color="#E5E5E5">the result of the emulation will be</font>

355
00:11:57,860 --> 00:11:59,960
cached

356
00:11:58,310 --> 00:12:01,969
<font color="#E5E5E5">say for example by an md5 hash or</font>

357
00:11:59,960 --> 00:12:03,890
something<font color="#CCCCCC"> like that</font><font color="#E5E5E5"> and it won't be</font>

358
00:12:01,970 --> 00:12:05,990
emulated second time<font color="#E5E5E5"> unless</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> fully</font>

359
00:12:03,890 --> 00:12:07,790
reinitialize the<font color="#E5E5E5"> engine or there are</font>

360
00:12:05,990 --> 00:12:10,029
some Microsoft<font color="#E5E5E5"> kind of features a way of</font>

361
00:12:07,790 --> 00:12:12,439
doing<font color="#E5E5E5"> that enforce agree emulation I</font>

362
00:12:10,029 --> 00:12:15,490
mean there needs<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be initialized by</font>

363
00:12:12,440 --> 00:12:17,240
say allocating memory for the emulation

364
00:12:15,490 --> 00:12:19,730
initializing various objects<font color="#CCCCCC"> and</font>

365
00:12:17,240 --> 00:12:22,040
subsystems<font color="#E5E5E5"> so this is all meant in C++</font>

366
00:12:19,730 --> 00:12:25,220
so if emulate or<font color="#E5E5E5"> build up various equals</font>

367
00:12:22,040 --> 00:12:27,290
<font color="#E5E5E5">plus objects then the binder could be</font>

368
00:12:25,220 --> 00:12:29,089
analyzed has to be<font color="#E5E5E5"> loaded relocated</font>

369
00:12:27,290 --> 00:12:31,610
resolving imports and so forth<font color="#E5E5E5"> and</font>

370
00:12:29,089 --> 00:12:34,850
you'll<font color="#E5E5E5"> actually see here on the right</font>

371
00:12:31,610 --> 00:12:38,209
side of<font color="#CCCCCC"> my slides</font><font color="#E5E5E5"> some examples like</font>

372
00:12:34,850 --> 00:12:40,720
they are looking for say a suspicious

373
00:12:38,209 --> 00:12:42,680
<font color="#E5E5E5">section</font><font color="#CCCCCC"> sighs a suspicious section</font><font color="#E5E5E5"> name</font>

374
00:12:40,720 --> 00:12:44,390
<font color="#E5E5E5">section</font><font color="#CCCCCC"> offset</font><font color="#E5E5E5"> and so forth they're</font>

375
00:12:42,680 --> 00:12:46,239
collecting heuristic observations about

376
00:12:44,390 --> 00:12:48,800
the<font color="#E5E5E5"> binary during the loading</font><font color="#CCCCCC"> process</font>

377
00:12:46,240 --> 00:12:51,560
<font color="#E5E5E5">and then they're also going to resolve</font>

378
00:12:48,800 --> 00:12:53,000
<font color="#CCCCCC">imports</font><font color="#E5E5E5"> to what they call</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> DLL is</font>

379
00:12:51,560 --> 00:12:54,439
just like<font color="#E5E5E5"> our own real window systems</font>

380
00:12:53,000 --> 00:12:56,060
you have<font color="#E5E5E5"> DLLs and defender you have a</font>

381
00:12:54,440 --> 00:12:58,400
virtual<font color="#E5E5E5"> DLL satellite emulation</font><font color="#CCCCCC"> of the</font>

382
00:12:56,060 --> 00:12:59,810
<font color="#E5E5E5">windows</font><font color="#CCCCCC"> api</font><font color="#E5E5E5"> and you'll also see things</font>

383
00:12:58,400 --> 00:13:02,660
<font color="#E5E5E5">like they need to set</font><font color="#CCCCCC"> up an image name</font>

384
00:12:59,810 --> 00:13:03,920
so for example if you are an executable

385
00:13:02,660 --> 00:13:06,620
<font color="#E5E5E5">PE binary</font>

386
00:13:03,920 --> 00:13:07,760
your name is my app that<font color="#CCCCCC"> XE this is</font>

387
00:13:06,620 --> 00:13:09,589
obviously<font color="#E5E5E5"> something that you could use</font>

388
00:13:07,760 --> 00:13:12,110
<font color="#CCCCCC">to write evasive malware that would look</font>

389
00:13:09,589 --> 00:13:13,790
for is my name my app<font color="#CCCCCC"> and if it is it</font>

390
00:13:12,110 --> 00:13:15,020
<font color="#E5E5E5">would choose not to run and you can</font>

391
00:13:13,790 --> 00:13:16,250
actually<font color="#E5E5E5"> see that reflected here</font><font color="#CCCCCC"> in the</font>

392
00:13:15,020 --> 00:13:17,900
loading<font color="#CCCCCC"> process itself as they're</font>

393
00:13:16,250 --> 00:13:21,950
setting up that<font color="#CCCCCC"> particular trait of</font>

394
00:13:17,900 --> 00:13:23,720
later moving<font color="#E5E5E5"> into talking about cpu</font>

395
00:13:21,950 --> 00:13:25,850
emulation<font color="#E5E5E5"> the very lowest level</font><font color="#CCCCCC"> of the</font>

396
00:13:23,720 --> 00:13:27,470
engine actually emulating the<font color="#E5E5E5"> CPU and</font>

397
00:13:25,850 --> 00:13:30,650
<font color="#E5E5E5">the instructions that the malware binary</font>

398
00:13:27,470 --> 00:13:33,200
is running so<font color="#CCCCCC"> defenders</font><font color="#E5E5E5"> emulation of</font>

399
00:13:30,650 --> 00:13:35,329
<font color="#E5E5E5">CPUs is actually really not emulation so</font>

400
00:13:33,200 --> 00:13:38,270
much as dynamic<font color="#CCCCCC"> translation</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> very</font>

401
00:13:35,330 --> 00:13:40,070
similar<font color="#E5E5E5"> to what chemo or</font><font color="#CCCCCC"> QEMU</font><font color="#E5E5E5"> the quick</font>

402
00:13:38,270 --> 00:13:42,319
and<font color="#CCCCCC"> muller does you're basically going</font>

403
00:13:40,070 --> 00:13:44,300
<font color="#E5E5E5">to lift the x86 code up into an</font>

404
00:13:42,320 --> 00:13:47,090
<font color="#E5E5E5">intermediate representation</font><font color="#CCCCCC"> and then</font>

405
00:13:44,300 --> 00:13:49,459
dump it<font color="#E5E5E5"> down into sanitized xt6 you're</font>

406
00:13:47,090 --> 00:13:50,570
rewriting the code so that<font color="#E5E5E5"> it's safe and</font>

407
00:13:49,460 --> 00:13:52,670
clean and has certain security

408
00:13:50,570 --> 00:13:54,140
properties and say can't access outside

409
00:13:52,670 --> 00:13:56,270
<font color="#E5E5E5">of the bounds of certain buffers and</font>

410
00:13:54,140 --> 00:13:58,250
things like that<font color="#CCCCCC"> they actually support a</font>

411
00:13:56,270 --> 00:14:03,740
number of architectures you can do 16 32

412
00:13:58,250 --> 00:14:06,020
and<font color="#E5E5E5"> 64-bit x86</font><font color="#CCCCCC"> ILR net they can do</font><font color="#E5E5E5"> VM</font>

413
00:14:03,740 --> 00:14:08,420
protect<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> Ameritech packer they can</font>

414
00:14:06,020 --> 00:14:11,180
lift and then dump out or even<font color="#CCCCCC"> arm</font><font color="#E5E5E5"> and</font>

415
00:14:08,420 --> 00:14:12,500
then this<font color="#CCCCCC"> sub system is incredibly</font>

416
00:14:11,180 --> 00:14:13,819
<font color="#E5E5E5">complicated as you'll see some of the</font>

417
00:14:12,500 --> 00:14:15,290
control<font color="#CCCCCC"> hole graphs it's just way too</font>

418
00:14:13,820 --> 00:14:17,060
much<font color="#CCCCCC"> to</font><font color="#E5E5E5"> reverse engineer</font><font color="#CCCCCC"> the whole thing</font>

419
00:14:15,290 --> 00:14:18,829
so<font color="#CCCCCC"> just</font><font color="#E5E5E5"> we give you a broad overview of</font>

420
00:14:17,060 --> 00:14:21,560
how<font color="#CCCCCC"> it works and</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> Diet do a deeper</font>

421
00:14:18,830 --> 00:14:23,990
dive<font color="#E5E5E5"> and say the Windows emulation so we</font>

422
00:14:21,560 --> 00:14:25,760
have these architecture<font color="#CCCCCC"> 2il lifting</font>

423
00:14:23,990 --> 00:14:27,440
functions that take<font color="#E5E5E5"> a given code of it</font>

424
00:14:25,760 --> 00:14:28,790
in architecture<font color="#E5E5E5"> and lift it up into</font>

425
00:14:27,440 --> 00:14:29,600
defenders unique<font color="#E5E5E5"> intermediate</font>

426
00:14:28,790 --> 00:14:32,360
representation

427
00:14:29,600 --> 00:14:36,350
<font color="#E5E5E5">you see</font><font color="#CCCCCC"> finger</font><font color="#E5E5E5"> things like arm net the</font>

428
00:14:32,360 --> 00:14:38,320
unprotected<font color="#E5E5E5"> xt6 x64</font><font color="#CCCCCC"> - IL and these are</font>

429
00:14:36,350 --> 00:14:41,330
massive<font color="#CCCCCC"> use control flow graphs that are</font>

430
00:14:38,320 --> 00:14:42,320
far too<font color="#CCCCCC"> difficult</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> take on you know</font><font color="#E5E5E5"> it</font>

431
00:14:41,330 --> 00:14:45,230
would take<font color="#CCCCCC"> a lot of time</font><font color="#E5E5E5"> to reverse</font>

432
00:14:42,320 --> 00:14:46,280
engineer<font color="#CCCCCC"> that china of a switch case and</font>

433
00:14:45,230 --> 00:14:48,080
basically they're gonna do is grab<font color="#E5E5E5"> an</font>

434
00:14:46,280 --> 00:14:50,270
opcode and<font color="#CCCCCC"> then IAL bytes accordingly</font>

435
00:14:48,080 --> 00:14:53,240
you<font color="#E5E5E5"> can kind of see this</font><font color="#CCCCCC"> process in the</font>

436
00:14:50,270 --> 00:14:56,270
bottom<font color="#E5E5E5"> right as for example a</font><font color="#CCCCCC"> xt6 push</font>

437
00:14:53,240 --> 00:14:58,730
instruction<font color="#E5E5E5"> mapped to 13 in the</font><font color="#CCCCCC"> IL</font>

438
00:14:56,270 --> 00:15:01,160
<font color="#CCCCCC">aisles are so so popular right now</font><font color="#E5E5E5"> and</font>

439
00:14:58,730 --> 00:15:02,630
<font color="#CCCCCC">everyone loves to use them but defender</font>

440
00:15:01,160 --> 00:15:06,860
has been doing<font color="#CCCCCC"> this for at least 15 or</font>

441
00:15:02,630 --> 00:15:09,050
20 years<font color="#CCCCCC"> which is</font><font color="#E5E5E5"> really amazing in</font>

442
00:15:06,860 --> 00:15:11,840
addition to the just simply lifting the

443
00:15:09,050 --> 00:15:14,300
<font color="#CCCCCC">IAP - uplifting architecture up</font><font color="#E5E5E5"> - IL you</font>

444
00:15:11,840 --> 00:15:16,220
can do<font color="#CCCCCC"> AI emulation in software I</font><font color="#E5E5E5"> did</font>

445
00:15:14,300 --> 00:15:18,859
<font color="#E5E5E5">never observe the</font><font color="#CCCCCC"> IL being emulated in</font>

446
00:15:16,220 --> 00:15:20,750
<font color="#E5E5E5">software during my research</font><font color="#CCCCCC"> I haven't</font>

447
00:15:18,860 --> 00:15:22,910
verified this but my hypothesis<font color="#CCCCCC"> is this</font>

448
00:15:20,750 --> 00:15:24,920
is so that the<font color="#CCCCCC"> windows</font><font color="#E5E5E5"> develop defender</font>

449
00:15:22,910 --> 00:15:26,750
developers can support<font color="#CCCCCC"> and</font><font color="#E5E5E5"> non x86</font>

450
00:15:24,920 --> 00:15:29,030
architectures<font color="#E5E5E5"> so they don't have to</font>

451
00:15:26,750 --> 00:15:31,100
write<font color="#CCCCCC"> a jet engine to jet from</font><font color="#E5E5E5"> il down</font>

452
00:15:29,030 --> 00:15:31,699
to<font color="#CCCCCC"> arm or</font><font color="#E5E5E5"> IL down to some other</font>

453
00:15:31,100 --> 00:15:33,799
architecture

454
00:15:31,699 --> 00:15:35,118
they can just<font color="#CCCCCC"> JIT to exit e6 and if they</font>

455
00:15:33,799 --> 00:15:37,100
ever want to run<font color="#E5E5E5"> an arm they could just</font>

456
00:15:35,119 --> 00:15:38,959
compile their<font color="#E5E5E5"> software emulator for arm</font>

457
00:15:37,100 --> 00:15:42,129
or any other<font color="#E5E5E5"> architecture and it should</font>

458
00:15:38,959 --> 00:15:44,449
<font color="#E5E5E5">just sort</font><font color="#CCCCCC"> of work I'll be it slowly and</font>

459
00:15:42,129 --> 00:15:46,220
<font color="#E5E5E5">then we have the exit of the</font><font color="#CCCCCC"> il to</font>

460
00:15:44,449 --> 00:15:48,079
<font color="#CCCCCC">execute translation which is taking the</font>

461
00:15:46,220 --> 00:15:50,899
<font color="#E5E5E5">il code and then dump it out</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> the</font>

462
00:15:48,079 --> 00:15:54,919
sanitized x86 and you can even see<font color="#CCCCCC"> how</font>

463
00:15:50,899 --> 00:15:58,639
this sort<font color="#CCCCCC"> of works</font><font color="#E5E5E5"> here for example with</font>

464
00:15:54,919 --> 00:16:00,879
the<font color="#CCCCCC"> le a instruction the opcode in x86</font>

465
00:15:58,639 --> 00:16:04,100
<font color="#CCCCCC">for</font><font color="#E5E5E5"> le a which is a</font><font color="#CCCCCC"> loading</font><font color="#E5E5E5"> load</font>

466
00:16:00,879 --> 00:16:06,290
<font color="#E5E5E5">relative address is 8</font><font color="#CCCCCC"> D and you can see</font>

467
00:16:04,100 --> 00:16:08,209
them<font color="#E5E5E5"> here constructing the le a</font>

468
00:16:06,290 --> 00:16:11,480
instruction<font color="#CCCCCC"> whether taking 8 D and then</font>

469
00:16:08,209 --> 00:16:13,099
masking off with a register<font color="#E5E5E5"> that would</font>

470
00:16:11,480 --> 00:16:15,079
indicate the particular<font color="#E5E5E5"> registry 1 le a</font>

471
00:16:13,100 --> 00:16:20,299
<font color="#E5E5E5">into and you can see that here in the</font>

472
00:16:15,079 --> 00:16:21,769
circle<font color="#E5E5E5"> red boxes and then architectural</font>

473
00:16:20,299 --> 00:16:23,509
a weak or difficult<font color="#E5E5E5"> to emulate</font><font color="#CCCCCC"> or</font>

474
00:16:21,769 --> 00:16:25,759
difficult<font color="#E5E5E5"> lift instructions such as for</font>

475
00:16:23,509 --> 00:16:27,410
example<font color="#CCCCCC"> cpuid are handled by calling</font>

476
00:16:25,759 --> 00:16:29,720
directly<font color="#E5E5E5"> into software</font><font color="#CCCCCC"> bound emulations</font>

477
00:16:27,410 --> 00:16:32,089
<font color="#E5E5E5">of those instructions</font><font color="#CCCCCC"> and you can see</font>

478
00:16:29,720 --> 00:16:34,910
here in the left code that's actually

479
00:16:32,089 --> 00:16:36,889
<font color="#E5E5E5">generating a call into a handler</font>

480
00:16:34,910 --> 00:16:38,868
function<font color="#E5E5E5"> so here</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> need to get</font><font color="#CCCCCC"> a</font>

481
00:16:36,889 --> 00:16:40,220
pointer to the handler function of

482
00:16:38,869 --> 00:16:41,749
function<font color="#E5E5E5"> pointer and then they're going</font>

483
00:16:40,220 --> 00:16:44,749
<font color="#E5E5E5">to generate out here you can see in</font>

484
00:16:41,749 --> 00:16:46,970
these immediate here<font color="#E5E5E5"> moving the</font>

485
00:16:44,749 --> 00:16:48,919
appropriate registers<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> J</font>

486
00:16:46,970 --> 00:16:50,929
<font color="#CCCCCC">actually generating a call to the</font>

487
00:16:48,919 --> 00:16:53,079
immediate<font color="#CCCCCC"> value</font><font color="#E5E5E5"> to call the register</font>

488
00:16:50,929 --> 00:16:55,608
handling that unique architectural event

489
00:16:53,079 --> 00:16:57,169
<font color="#CCCCCC">microsoft</font><font color="#E5E5E5"> did document this in a 2005</font>

490
00:16:55,609 --> 00:16:58,339
paper published<font color="#E5E5E5"> a virus bold and</font>

491
00:16:57,169 --> 00:17:01,160
recommend checking that out if you're

492
00:16:58,339 --> 00:17:03,019
<font color="#E5E5E5">interested so as I mentioned there</font><font color="#CCCCCC"> are</font>

493
00:17:01,160 --> 00:17:04,549
<font color="#E5E5E5">architectural or specific emulation</font>

494
00:17:03,019 --> 00:17:08,929
functions for unique instructions<font color="#E5E5E5"> like</font>

495
00:17:04,549 --> 00:17:09,888
<font color="#E5E5E5">CPU ID or an arm</font><font color="#CCCCCC"> cue add or</font><font color="#E5E5E5"> SM law all</font>

496
00:17:08,929 --> 00:17:11,510
these kind<font color="#CCCCCC"> of strange unique</font>

497
00:17:09,888 --> 00:17:14,269
instructions<font color="#CCCCCC"> that don't cleanly map up</font>

498
00:17:11,510 --> 00:17:16,220
<font color="#CCCCCC">to</font><font color="#E5E5E5"> the il so they're gonna use these</font>

499
00:17:14,269 --> 00:17:19,549
<font color="#CCCCCC">functions emulate</font><font color="#E5E5E5"> those instructions</font><font color="#CCCCCC"> I</font>

500
00:17:16,220 --> 00:17:22,600
have<font color="#CCCCCC"> an example here of the</font><font color="#E5E5E5"> x86</font><font color="#CCCCCC"> CPU ID</font>

501
00:17:19,549 --> 00:17:25,609
instruction which is<font color="#CCCCCC"> emulated here and</font>

502
00:17:22,599 --> 00:17:28,010
here I have a mallet mine area<font color="#E5E5E5"> that does</font>

503
00:17:25,609 --> 00:17:30,889
movie<font color="#E5E5E5"> IX you know eight-eight 1000</font>

504
00:17:28,010 --> 00:17:32,210
whatever and then<font color="#CCCCCC"> cpuid</font><font color="#E5E5E5"> and using</font>

505
00:17:30,889 --> 00:17:33,289
<font color="#E5E5E5">lighthouse we can visualize the basic</font>

506
00:17:32,210 --> 00:17:36,019
block coverage<font color="#CCCCCC"> well in this</font><font color="#E5E5E5"> particular</font>

507
00:17:33,289 --> 00:17:38,179
<font color="#CCCCCC">binary is run and we can see</font><font color="#E5E5E5"> that we hit</font>

508
00:17:36,019 --> 00:17:40,399
<font color="#E5E5E5">these basic</font><font color="#CCCCCC"> blocks</font><font color="#E5E5E5"> and here</font><font color="#CCCCCC"> I'm the</font>

509
00:17:38,179 --> 00:17:42,590
comparison of the same immediate<font color="#CCCCCC"> we take</font>

510
00:17:40,399 --> 00:17:45,408
the forward branch

511
00:17:42,590 --> 00:17:47,870
and hit push<font color="#CCCCCC"> three and so forth</font><font color="#E5E5E5"> so this</font>

512
00:17:45,409 --> 00:17:52,100
is an instruction<font color="#E5E5E5"> that's not emulated</font>

513
00:17:47,870 --> 00:17:54,139
with out of the code now to

514
00:17:52,100 --> 00:17:56,360
talk about<font color="#E5E5E5"> some instrumentation after we</font>

515
00:17:54,140 --> 00:17:58,880
record the basics<font color="#E5E5E5"> of the loading and the</font>

516
00:17:56,360 --> 00:17:59,959
<font color="#CCCCCC">CPU emulation</font><font color="#E5E5E5"> needed to talk about how</font><font color="#CCCCCC"> I</font>

517
00:17:58,880 --> 00:18:02,990
did some of my<font color="#E5E5E5"> research with some</font>

518
00:17:59,960 --> 00:18:05,330
instrumentation<font color="#CCCCCC"> before going further</font>

519
00:18:02,990 --> 00:18:06,799
<font color="#E5E5E5">so as I said there's very little</font>

520
00:18:05,330 --> 00:18:08,270
visibility<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> engine</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> difficult</font>

521
00:18:06,799 --> 00:18:12,260
to introspect into<font color="#E5E5E5"> it difficult to debug</font>

522
00:18:08,270 --> 00:18:13,789
it<font color="#CCCCCC"> and</font><font color="#E5E5E5"> when you run the Trender all you</font>

523
00:18:12,260 --> 00:18:16,879
get<font color="#E5E5E5"> out for output is the name of a</font>

524
00:18:13,789 --> 00:18:18,350
virus that<font color="#E5E5E5"> was identified the solution</font>

525
00:18:16,880 --> 00:18:20,630
<font color="#CCCCCC">that I came</font><font color="#E5E5E5"> up</font><font color="#CCCCCC"> with was to give</font><font color="#E5E5E5"> us a</font>

526
00:18:18,350 --> 00:18:23,270
<font color="#CCCCCC">malware's eye view sort of hook</font>

527
00:18:20,630 --> 00:18:25,100
functions inside defender that<font color="#E5E5E5"> when</font>

528
00:18:23,270 --> 00:18:27,408
malabar calls them it<font color="#CCCCCC"> can pass</font><font color="#E5E5E5"> data out</font>

529
00:18:25,100 --> 00:18:29,178
to<font color="#E5E5E5"> the outside and in turn the inside of</font>

530
00:18:27,409 --> 00:18:30,169
the engine has data back<font color="#CCCCCC"> into the</font><font color="#E5E5E5"> inside</font>

531
00:18:29,179 --> 00:18:32,840
and<font color="#E5E5E5"> we can have a two-way communication</font>

532
00:18:30,169 --> 00:18:35,419
with<font color="#E5E5E5"> the malware inside someone to talk</font>

533
00:18:32,840 --> 00:18:36,830
about how that works<font color="#CCCCCC"> so remember this is</font>

534
00:18:35,419 --> 00:18:38,659
<font color="#E5E5E5">the original diagram of tavis or</font>

535
00:18:36,830 --> 00:18:38,840
<font color="#CCCCCC">Maddie's load library</font><font color="#E5E5E5"> tool that I showed</font>

536
00:18:38,659 --> 00:18:40,970
you

537
00:18:38,840 --> 00:18:42,918
<font color="#E5E5E5">we're going to hear all these kind of</font>

538
00:18:40,970 --> 00:18:44,929
stuff<font color="#CCCCCC"> in a particular the jeesus calls</font>

539
00:18:42,919 --> 00:18:46,460
call table which<font color="#E5E5E5"> is table function</font>

540
00:18:44,929 --> 00:18:48,470
<font color="#E5E5E5">pointers for functions that are called</font>

541
00:18:46,460 --> 00:18:51,710
when various windows api's are called

542
00:18:48,470 --> 00:18:53,690
<font color="#E5E5E5">inside</font><font color="#CCCCCC"> the emulator by the malware and I</font>

543
00:18:51,710 --> 00:18:56,270
modified and<font color="#E5E5E5"> B client with about</font><font color="#CCCCCC"> 3,000</font>

544
00:18:53,690 --> 00:19:00,049
lines<font color="#E5E5E5"> of</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> and particularly</font><font color="#CCCCCC"> eg</font>

545
00:18:56,270 --> 00:19:02,360
<font color="#E5E5E5">syscalls table and</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> replaced defenders</font>

546
00:19:00,049 --> 00:19:04,370
implementations of<font color="#E5E5E5"> various OS API</font>

547
00:19:02,360 --> 00:19:06,350
emulations like output debug string<font color="#E5E5E5"> ie</font>

548
00:19:04,370 --> 00:19:08,360
or in win exec with my own function

549
00:19:06,350 --> 00:19:12,408
<font color="#CCCCCC">players</font><font color="#E5E5E5"> so let's see what that looks</font>

550
00:19:08,360 --> 00:19:13,760
<font color="#CCCCCC">like so for</font><font color="#E5E5E5"> example defender has an</font>

551
00:19:12,409 --> 00:19:15,980
emulation about<font color="#CCCCCC"> cookie bugs during</font><font color="#E5E5E5"> a</font>

552
00:19:13,760 --> 00:19:17,899
that's very<font color="#E5E5E5"> simple just peels a single</font>

553
00:19:15,980 --> 00:19:21,110
parameter off the stack<font color="#CCCCCC"> and bugs the</font>

554
00:19:17,899 --> 00:19:23,330
time<font color="#E5E5E5"> on the emulator</font><font color="#CCCCCC"> I can go here and</font><font color="#E5E5E5"> I</font>

555
00:19:21,110 --> 00:19:25,459
can find offsets to<font color="#E5E5E5"> the various</font>

556
00:19:23,330 --> 00:19:27,049
functions inside<font color="#E5E5E5"> the fender</font><font color="#CCCCCC"> and I can</font>

557
00:19:25,460 --> 00:19:29,380
then set hooks by overwriting that

558
00:19:27,049 --> 00:19:31,700
memory inside the defender binary and

559
00:19:29,380 --> 00:19:33,200
that means that when output<font color="#E5E5E5"> debug string</font>

560
00:19:31,700 --> 00:19:35,360
a is called inside the emulator by a

561
00:19:33,200 --> 00:19:38,330
malware binary our function pointer is

562
00:19:35,360 --> 00:19:40,729
called<font color="#CCCCCC"> stat</font><font color="#E5E5E5"> or on relation is invoked so</font>

563
00:19:38,330 --> 00:19:42,439
here's the original<font color="#CCCCCC"> output debug string</font>

564
00:19:40,730 --> 00:19:43,850
a implementation and the top right<font color="#E5E5E5"> and</font>

565
00:19:42,440 --> 00:19:45,710
in the center<font color="#CCCCCC"> of the screen</font><font color="#E5E5E5"> is my</font>

566
00:19:43,850 --> 00:19:48,080
implantation of this function let's walk

567
00:19:45,710 --> 00:19:50,450
through this at the top we have<font color="#CCCCCC"> our</font>

568
00:19:48,080 --> 00:19:52,158
declaration<font color="#E5E5E5"> there's a large structure</font><font color="#CCCCCC"> of</font>

569
00:19:50,450 --> 00:19:55,100
PE VARs<font color="#E5E5E5"> T that's used throughout</font>

570
00:19:52,159 --> 00:19:55,460
<font color="#E5E5E5">defender it's large when</font><font color="#CCCCCC"> confuso</font><font color="#E5E5E5"> you</font>

571
00:19:55,100 --> 00:19:56,719
<font color="#E5E5E5">know</font>

572
00:19:55,460 --> 00:19:58,549
<font color="#E5E5E5">Poynter</font><font color="#CCCCCC"> we don't actually</font><font color="#E5E5E5"> have to</font>

573
00:19:56,720 --> 00:20:00,470
<font color="#CCCCCC">manipulate it directly we</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> defender's</font>

574
00:19:58,549 --> 00:20:01,760
<font color="#CCCCCC">programmatic api's for doing</font><font color="#E5E5E5"> that to</font>

575
00:20:00,470 --> 00:20:04,850
<font color="#E5E5E5">interact</font><font color="#CCCCCC"> with it so I just declared as a</font>

576
00:20:01,760 --> 00:20:06,289
<font color="#E5E5E5">flag pointer then we have this in</font>

577
00:20:04,850 --> 00:20:09,860
defender we have a template<font color="#E5E5E5"> structure</font>

578
00:20:06,289 --> 00:20:11,600
called<font color="#E5E5E5"> parameters one</font><font color="#CCCCCC"> argh this</font><font color="#E5E5E5"> is</font>

579
00:20:09,860 --> 00:20:13,789
basically a structure<font color="#CCCCCC"> that stores a</font>

580
00:20:11,600 --> 00:20:16,219
single parameter to the function<font color="#E5E5E5"> so we</font>

581
00:20:13,789 --> 00:20:19,730
declare our own array of<font color="#E5E5E5"> human 64's to</font>

582
00:20:16,220 --> 00:20:21,620
be the parameters array then we<font color="#E5E5E5"> use a</font>

583
00:20:19,730 --> 00:20:23,149
function<font color="#CCCCCC"> inside defender that pills a</font>

584
00:20:21,620 --> 00:20:24,949
single parameter off the<font color="#E5E5E5"> virtual stack</font>

585
00:20:23,149 --> 00:20:27,649
<font color="#E5E5E5">meaning they're going to go into</font><font color="#CCCCCC"> the</font>

586
00:20:24,950 --> 00:20:30,590
emulated<font color="#CCCCCC"> state</font><font color="#E5E5E5"> read the ESP and</font><font color="#CCCCCC"> AP</font>

587
00:20:27,649 --> 00:20:31,520
registers and calculate according to you

588
00:20:30,590 --> 00:20:33,289
know where they're<font color="#CCCCCC"> being the built from</font>

589
00:20:31,520 --> 00:20:35,330
<font color="#E5E5E5">everything and actually pull</font><font color="#CCCCCC"> off</font><font color="#E5E5E5"> the</font>

590
00:20:33,289 --> 00:20:37,700
<font color="#E5E5E5">four byte parameter from the stack</font>

591
00:20:35,330 --> 00:20:39,470
<font color="#E5E5E5">passed</font><font color="#CCCCCC"> this function and we're</font><font color="#E5E5E5"> gonna use</font>

592
00:20:37,700 --> 00:20:40,580
their function to do that for<font color="#E5E5E5"> us we have</font>

593
00:20:39,470 --> 00:20:42,110
<font color="#E5E5E5">to resolve the address that that</font>

594
00:20:40,580 --> 00:20:44,389
functionally just call<font color="#E5E5E5"> directly into it</font>

595
00:20:42,110 --> 00:20:47,178
with the<font color="#CCCCCC"> the llevarse team structure and</font>

596
00:20:44,390 --> 00:20:48,770
we'll<font color="#E5E5E5"> get</font><font color="#CCCCCC"> a one-parameter back and that</font>

597
00:20:47,179 --> 00:20:50,870
parameter<font color="#E5E5E5"> is simply a virtual</font><font color="#CCCCCC"> address</font>

598
00:20:48,770 --> 00:20:52,820
inside<font color="#CCCCCC"> defenders emulator so it's</font>

599
00:20:50,870 --> 00:20:54,080
actually<font color="#E5E5E5"> a pointer that's not a real</font>

600
00:20:52,820 --> 00:20:55,668
pointer<font color="#E5E5E5"> that we can dereference it's</font>

601
00:20:54,080 --> 00:20:57,850
just an<font color="#CCCCCC"> address in</font><font color="#E5E5E5"> there's a virtualized</font>

602
00:20:55,669 --> 00:21:00,500
memory space<font color="#E5E5E5"> sitting inside our engine</font>

603
00:20:57,850 --> 00:21:02,779
then we use a defender function called

604
00:21:00,500 --> 00:21:04,850
getstring or PE<font color="#CCCCCC"> var a PE get strength</font>

605
00:21:02,779 --> 00:21:06,740
that<font color="#E5E5E5"> will take that virtual address and</font>

606
00:21:04,850 --> 00:21:08,870
translate that<font color="#CCCCCC"> into a real pointer</font><font color="#E5E5E5"> that</font>

607
00:21:06,740 --> 00:21:10,429
we can actually<font color="#E5E5E5"> manipulate with native</font>

608
00:21:08,870 --> 00:21:11,689
<font color="#CCCCCC">code so we're going to do that</font><font color="#E5E5E5"> we're</font>

609
00:21:10,429 --> 00:21:14,090
going to<font color="#E5E5E5"> call it that defender function</font>

610
00:21:11,690 --> 00:21:15,740
for doing that and now we have<font color="#CCCCCC"> a string</font>

611
00:21:14,090 --> 00:21:17,629
we<font color="#CCCCCC"> can simply print a standard out so</font>

612
00:21:15,740 --> 00:21:21,860
this sounds<font color="#CCCCCC"> like a lot but let's see it</font>

613
00:21:17,630 --> 00:21:23,330
in action with a quick demo so remember

614
00:21:21,860 --> 00:21:25,279
previously I showed you<font color="#CCCCCC"> just a very</font>

615
00:21:23,330 --> 00:21:28,960
<font color="#CCCCCC">simple</font><font color="#E5E5E5"> example of just calling</font><font color="#CCCCCC"> eke our</font>

616
00:21:25,279 --> 00:21:31,220
test file here we're passing in a binary

617
00:21:28,960 --> 00:21:33,740
<font color="#E5E5E5">that's gonna say hello Def Con when it's</font>

618
00:21:31,220 --> 00:21:36,649
run<font color="#E5E5E5"> all right because it should say</font>

619
00:21:33,740 --> 00:21:39,350
hello<font color="#CCCCCC"> blackhat but basically we have a</font>

620
00:21:36,649 --> 00:21:42,110
binary<font color="#E5E5E5"> a Windows binary that I call you</font>

621
00:21:39,350 --> 00:21:44,209
know<font color="#CCCCCC"> DEF CON XE and when</font><font color="#E5E5E5"> I scan that</font>

622
00:21:42,110 --> 00:21:46,969
binary<font color="#E5E5E5"> it goes inside the emulator calls</font>

623
00:21:44,210 --> 00:21:48,649
up with debug string a with hello Def

624
00:21:46,970 --> 00:21:51,200
Con<font color="#CCCCCC"> and then open to extra a with this</font>

625
00:21:48,649 --> 00:21:54,770
is a live demo<font color="#CCCCCC"> I may run</font><font color="#E5E5E5"> it with more</font>

626
00:21:51,200 --> 00:21:57,250
debug stuff and then we can see what the

627
00:21:54,770 --> 00:22:02,389
emulator engine wouldn't saw inside

628
00:21:57,250 --> 00:22:04,429
sorry with more debug stuff more<font color="#E5E5E5"> debug</font>

629
00:22:02,390 --> 00:22:04,980
<font color="#CCCCCC">up</font><font color="#E5E5E5"> we can see the exact offsets and</font>

630
00:22:04,429 --> 00:22:07,200
parameters

631
00:22:04,980 --> 00:22:08,640
and we can see the exact<font color="#E5E5E5"> some of the API</font>

632
00:22:07,200 --> 00:22:13,200
calls<font color="#E5E5E5"> and we could see that the virtual</font>

633
00:22:08,640 --> 00:22:16,050
<font color="#CCCCCC">address was 43 2 2</font><font color="#E5E5E5"> 8 it says hello Def</font>

634
00:22:13,200 --> 00:22:18,120
Con<font color="#CCCCCC"> and the</font><font color="#E5E5E5"> next call is</font><font color="#CCCCCC"> 4</font><font color="#E5E5E5"> 3 0 whatever</font>

635
00:22:16,050 --> 00:22:20,850
this is<font color="#E5E5E5"> and we can translate that out</font>

636
00:22:18,120 --> 00:22:22,290
and print<font color="#CCCCCC"> the standard out that gives us</font>

637
00:22:20,850 --> 00:22:24,540
a view<font color="#E5E5E5"> inside the engine</font><font color="#CCCCCC"> now it's great</font>

638
00:22:22,290 --> 00:22:26,310
<font color="#E5E5E5">that we</font><font color="#CCCCCC"> can just say print out strings 2</font>

639
00:22:24,540 --> 00:22:27,570
standard<font color="#E5E5E5"> out</font><font color="#CCCCCC"> but how about</font><font color="#E5E5E5"> doing more we</font>

640
00:22:26,310 --> 00:22:31,310
can actually<font color="#E5E5E5"> use this to observe what's</font>

641
00:22:27,570 --> 00:22:34,800
<font color="#CCCCCC">going on inside</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> engine as well</font><font color="#E5E5E5"> so</font>

642
00:22:31,310 --> 00:22:37,290
<font color="#E5E5E5">have to build this binary as I said it's</font>

643
00:22:34,800 --> 00:22:38,909
not<font color="#E5E5E5"> as easy as you</font><font color="#CCCCCC"> might think they just</font>

644
00:22:37,290 --> 00:22:40,649
<font color="#E5E5E5">always</font><font color="#CCCCCC"> get</font><font color="#E5E5E5"> emulator consistently it does</font>

645
00:22:38,910 --> 00:22:42,540
take massaging the linker and<font color="#E5E5E5"> your</font>

646
00:22:40,650 --> 00:22:44,670
compiler<font color="#E5E5E5"> in order to create binaries</font>

647
00:22:42,540 --> 00:22:45,960
<font color="#CCCCCC">that are consistently emulated</font><font color="#E5E5E5"> because</font>

648
00:22:44,670 --> 00:22:47,700
the<font color="#E5E5E5"> federal out of heuristics</font><font color="#CCCCCC"> that it</font>

649
00:22:45,960 --> 00:22:49,470
uses<font color="#E5E5E5"> to turn it if it can or emulate the</font>

650
00:22:47,700 --> 00:22:51,030
binaries<font color="#E5E5E5"> or not at the end of this</font>

651
00:22:49,470 --> 00:22:53,190
<font color="#E5E5E5">presentation I will release some code</font>

652
00:22:51,030 --> 00:22:58,410
for<font color="#E5E5E5"> your own binary you can put</font><font color="#CCCCCC"> inside</font>

653
00:22:53,190 --> 00:23:00,570
the engine and<font color="#CCCCCC"> have it go</font><font color="#E5E5E5"> and run</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so</font>

654
00:22:58,410 --> 00:23:03,930
we have now established<font color="#E5E5E5"> the basics of</font>

655
00:23:00,570 --> 00:23:06,030
<font color="#E5E5E5">how our code is loaded how</font><font color="#CCCCCC"> it's run and</font>

656
00:23:03,930 --> 00:23:07,440
then how we're<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to observe what's</font>

657
00:23:06,030 --> 00:23:09,660
<font color="#CCCCCC">going on inside</font><font color="#E5E5E5"> the emulator</font><font color="#CCCCCC"> so now to</font>

658
00:23:07,440 --> 00:23:11,790
the<font color="#E5E5E5"> real meat</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the presentation</font><font color="#CCCCCC"> let's</font>

659
00:23:09,660 --> 00:23:14,220
<font color="#E5E5E5">look at the</font><font color="#CCCCCC"> Windows mu windows</font><font color="#E5E5E5"> emulation</font>

660
00:23:11,790 --> 00:23:17,310
routines<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we can are now exposed to</font>

661
00:23:14,220 --> 00:23:18,330
us with this<font color="#E5E5E5"> kind of i/o mechanism so</font>

662
00:23:17,310 --> 00:23:20,040
first off we're<font color="#E5E5E5"> going to start off by</font>

663
00:23:18,330 --> 00:23:24,179
<font color="#CCCCCC">talking</font><font color="#E5E5E5"> about the user mode environment</font>

664
00:23:20,040 --> 00:23:27,000
inside Windows Defender so<font color="#E5E5E5"> defender has</font>

665
00:23:24,180 --> 00:23:29,040
a virtualized<font color="#E5E5E5"> virtual file system just</font>

666
00:23:27,000 --> 00:23:31,200
<font color="#E5E5E5">like a real file system so this is</font>

667
00:23:29,040 --> 00:23:32,940
<font color="#CCCCCC">inside this virtual emulator your</font>

668
00:23:31,200 --> 00:23:35,730
<font color="#E5E5E5">malware interactive file system and</font>

669
00:23:32,940 --> 00:23:36,960
using our file system using our hook

670
00:23:35,730 --> 00:23:39,180
function we're able to<font color="#E5E5E5"> dump the entire</font>

671
00:23:36,960 --> 00:23:43,350
<font color="#E5E5E5">file system which I'm going to</font><font color="#CCCCCC"> demo here</font>

672
00:23:39,180 --> 00:23:46,020
there's about<font color="#CCCCCC"> 1300 functions or 39 areas</font>

673
00:23:43,350 --> 00:23:47,370
<font color="#CCCCCC">rather on the file</font><font color="#E5E5E5"> system</font><font color="#CCCCCC"> and here we're</font>

674
00:23:46,020 --> 00:23:48,629
just running<font color="#E5E5E5"> through all those files on</font>

675
00:23:47,370 --> 00:23:51,090
the file<font color="#CCCCCC"> system that</font><font color="#E5E5E5"> just up in the</font><font color="#CCCCCC"> boat</font>

676
00:23:48,630 --> 00:23:53,100
<font color="#E5E5E5">I'll run that one more</font><font color="#CCCCCC"> time you can see</font>

677
00:23:51,090 --> 00:23:54,570
here<font color="#E5E5E5"> basically our</font><font color="#CCCCCC"> binaries going inside</font>

678
00:23:53,100 --> 00:23:56,159
the emulator and<font color="#E5E5E5"> numerating all the</font>

679
00:23:54,570 --> 00:23:58,290
files in the<font color="#E5E5E5"> file system</font><font color="#CCCCCC"> and they're</font>

680
00:23:56,160 --> 00:24:01,440
just dumping them out with our hooked

681
00:23:58,290 --> 00:24:02,879
binaries<font color="#E5E5E5"> now I can LS the dump FS</font>

682
00:24:01,440 --> 00:24:03,960
directory and<font color="#E5E5E5"> we can see all</font><font color="#CCCCCC"> these</font>

683
00:24:02,880 --> 00:24:07,860
different<font color="#E5E5E5"> binaries</font><font color="#CCCCCC"> that we pulled out</font>

684
00:24:03,960 --> 00:24:12,240
and there I<font color="#E5E5E5"> think about</font><font color="#CCCCCC"> 1,500 of them</font><font color="#E5E5E5"> or</font>

685
00:24:07,860 --> 00:24:13,370
so mostly they're fake executables but

686
00:24:12,240 --> 00:24:17,400
you'll find<font color="#CCCCCC"> a</font><font color="#E5E5E5"> handful of other things</font>

687
00:24:13,370 --> 00:24:19,229
<font color="#E5E5E5">like these unique</font><font color="#CCCCCC"> gook files</font>

688
00:24:17,400 --> 00:24:21,690
I found this file that<font color="#CCCCCC"> just says the</font>

689
00:24:19,230 --> 00:24:24,480
word goat thousands of times<font color="#E5E5E5"> over in</font>

690
00:24:21,690 --> 00:24:26,670
with<font color="#E5E5E5"> this name</font><font color="#CCCCCC"> AAA</font><font color="#E5E5E5"> touch-me-not</font><font color="#CCCCCC"> dot txt</font>

691
00:24:24,480 --> 00:24:28,910
<font color="#CCCCCC">I had heard this term goat file before</font>

692
00:24:26,670 --> 00:24:31,560
<font color="#E5E5E5">it's kind</font><font color="#CCCCCC"> of an AV industry</font><font color="#E5E5E5"> term</font><font color="#CCCCCC"> for</font>

693
00:24:28,910 --> 00:24:34,530
like a sacrificial file that's used<font color="#CCCCCC"> for</font>

694
00:24:31,560 --> 00:24:36,240
a<font color="#CCCCCC"> malware to infect or mess with so in</font>

695
00:24:34,530 --> 00:24:37,040
this case they created a file a

696
00:24:36,240 --> 00:24:39,360
touch-me-not

697
00:24:37,040 --> 00:24:41,639
presumably if<font color="#E5E5E5"> your malware touches that</font>

698
00:24:39,360 --> 00:24:43,229
file<font color="#E5E5E5"> that might be an indicator that the</font>

699
00:24:41,640 --> 00:24:45,360
malicious<font color="#E5E5E5"> binding or something like that</font>

700
00:24:43,230 --> 00:24:46,950
<font color="#CCCCCC">I didn't go in a necessary</font><font color="#E5E5E5"> to understand</font>

701
00:24:45,360 --> 00:24:49,260
that exact relationship<font color="#E5E5E5"> but it's a</font>

702
00:24:46,950 --> 00:24:51,330
clearly you know kind of an insider joke

703
00:24:49,260 --> 00:24:54,750
<font color="#E5E5E5">for the programmers that put thousands</font>

704
00:24:51,330 --> 00:24:56,760
times over<font color="#E5E5E5"> will also find fake config</font>

705
00:24:54,750 --> 00:24:58,440
files clearly<font color="#E5E5E5"> written by programmers</font>

706
00:24:56,760 --> 00:25:00,150
with comments like<font color="#E5E5E5"> blah blah</font>

707
00:24:58,440 --> 00:25:01,620
so again if<font color="#E5E5E5"> your malware goes in and say</font>

708
00:25:00,150 --> 00:25:03,270
reads this<font color="#E5E5E5"> file that might be American</font>

709
00:25:01,620 --> 00:25:06,090
militia<font color="#E5E5E5"> heuristic indicator of malicious</font>

710
00:25:03,270 --> 00:25:08,190
intent<font color="#CCCCCC"> we've a virtual registry with</font>

711
00:25:06,090 --> 00:25:09,929
thousands of registry entries with<font color="#CCCCCC"> nique</font>

712
00:25:08,190 --> 00:25:11,250
entry is like for things<font color="#E5E5E5"> like</font><font color="#CCCCCC"> world</font><font color="#E5E5E5"> of</font>

713
00:25:09,930 --> 00:25:12,780
<font color="#CCCCCC">warcraft so again maybe you have a</font>

714
00:25:11,250 --> 00:25:14,010
malware binary that looks for the<font color="#CCCCCC"> World</font>

715
00:25:12,780 --> 00:25:15,600
<font color="#E5E5E5">of</font><font color="#CCCCCC"> Warcraft registry entry because</font><font color="#E5E5E5"> it</font>

716
00:25:14,010 --> 00:25:17,670
wants<font color="#CCCCCC"> to say steal your login credits</font>

717
00:25:15,600 --> 00:25:19,379
the World<font color="#E5E5E5"> of Warcraft this is a way that</font>

718
00:25:17,670 --> 00:25:21,420
<font color="#CCCCCC">offender developers could</font><font color="#E5E5E5"> detect that</font>

719
00:25:19,380 --> 00:25:23,070
that is<font color="#E5E5E5"> indeed</font><font color="#CCCCCC"> that kind of malware if</font>

720
00:25:21,420 --> 00:25:25,260
they see it<font color="#CCCCCC"> doing the Reg open key on</font>

721
00:25:23,070 --> 00:25:26,730
the world<font color="#E5E5E5"> Warcraft key that might</font>

722
00:25:25,260 --> 00:25:29,480
<font color="#E5E5E5">indicate that</font><font color="#CCCCCC"> it's you know looking for</font>

723
00:25:26,730 --> 00:25:32,190
<font color="#E5E5E5">World of Warcraft mine Ares for example</font>

724
00:25:29,480 --> 00:25:33,870
we also have virtual processes inside

725
00:25:32,190 --> 00:25:35,880
<font color="#E5E5E5">the emulator</font><font color="#CCCCCC"> and these are not real</font>

726
00:25:33,870 --> 00:25:37,500
processes<font color="#E5E5E5"> they're just names</font><font color="#CCCCCC"> of returned</font>

727
00:25:35,880 --> 00:25:39,240
in this in this order<font color="#CCCCCC"> so there's no</font>

728
00:25:37,500 --> 00:25:42,240
<font color="#E5E5E5">actual other processes running there's</font>

729
00:25:39,240 --> 00:25:44,250
<font color="#CCCCCC">no IP</font><font color="#E5E5E5"> C or any of the full-on facilities</font>

730
00:25:42,240 --> 00:25:46,020
of<font color="#CCCCCC"> Window System of</font><font color="#E5E5E5"> ID but when you do a</font>

731
00:25:44,250 --> 00:25:48,060
process<font color="#E5E5E5"> enumeration which is a fairly</font>

732
00:25:46,020 --> 00:25:50,970
<font color="#E5E5E5">common</font><font color="#CCCCCC"> thing from our to do it'll</font><font color="#E5E5E5"> give</font>

733
00:25:48,060 --> 00:25:52,889
you this list of fake processes of how

734
00:25:50,970 --> 00:25:57,000
<font color="#CCCCCC">that</font><font color="#E5E5E5"> yellow with a lot of my app that</font><font color="#CCCCCC"> XE</font>

735
00:25:52,890 --> 00:25:58,680
which is our binary then we have beyond

736
00:25:57,000 --> 00:26:01,740
just the use in one environment<font color="#CCCCCC"> we have</font>

737
00:25:58,680 --> 00:26:03,540
user mode code inside<font color="#CCCCCC"> the engine which</font>

738
00:26:01,740 --> 00:26:07,080
provides<font color="#E5E5E5"> emulation of simples Windows</font><font color="#CCCCCC"> ap</font>

739
00:26:03,540 --> 00:26:08,670
<font color="#E5E5E5">is now in the real</font><font color="#CCCCCC"> Windows API</font><font color="#E5E5E5"> there are</font>

740
00:26:07,080 --> 00:26:10,830
generally two<font color="#CCCCCC"> types of Windows API</font>

741
00:26:08,670 --> 00:26:12,360
functions broadly there<font color="#E5E5E5"> are those that</font>

742
00:26:10,830 --> 00:26:14,040
<font color="#CCCCCC">are</font><font color="#E5E5E5"> going to stay inside user mode and</font>

743
00:26:12,360 --> 00:26:16,110
do things<font color="#E5E5E5"> like manipulating a string</font>

744
00:26:14,040 --> 00:26:17,820
<font color="#E5E5E5">returning the</font><font color="#CCCCCC"> hard-coded</font><font color="#E5E5E5"> value and so</font>

745
00:26:16,110 --> 00:26:19,530
forth<font color="#E5E5E5"> and then of those that end up</font>

746
00:26:17,820 --> 00:26:21,389
resolving<font color="#CCCCCC"> in to</font><font color="#E5E5E5"> assist call for example</font>

747
00:26:19,530 --> 00:26:23,040
those that<font color="#E5E5E5"> write</font><font color="#CCCCCC"> to a file on file on</font>

748
00:26:21,390 --> 00:26:24,870
disk open<font color="#CCCCCC"> a socket</font>

749
00:26:23,040 --> 00:26:26,159
<font color="#E5E5E5">interact with the registry and so forth</font>

750
00:26:24,870 --> 00:26:28,050
<font color="#CCCCCC">those</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> resolve to assess</font><font color="#E5E5E5"> Co</font>

751
00:26:26,160 --> 00:26:30,350
where the<font color="#E5E5E5"> kernel</font><font color="#CCCCCC"> has to service the this</font>

752
00:26:28,050 --> 00:26:30,350
request

753
00:26:30,700 --> 00:26:35,599
and defender<font color="#CCCCCC"> of these are analogously</font>

754
00:26:33,529 --> 00:26:37,070
implemented with functions that<font color="#E5E5E5"> stay</font>

755
00:26:35,599 --> 00:26:39,619
inside the emulator<font color="#E5E5E5"> and those that trap</font>

756
00:26:37,070 --> 00:26:41,509
it<font color="#E5E5E5"> to native emulation and these are</font>

757
00:26:39,619 --> 00:26:43,639
called<font color="#CCCCCC"> vdl else inside defender the</font>

758
00:26:41,509 --> 00:26:47,320
<font color="#CCCCCC">deals that provide this functionality</font><font color="#E5E5E5"> my</font>

759
00:26:43,639 --> 00:26:50,689
<font color="#E5E5E5">presumption is that's virtual</font><font color="#CCCCCC"> DLLs</font>

760
00:26:47,320 --> 00:26:52,639
because<font color="#E5E5E5"> these are just regular dll's in</font>

761
00:26:50,690 --> 00:26:54,259
the RP binaries<font color="#E5E5E5"> once they extract them</font>

762
00:26:52,639 --> 00:26:56,089
with our<font color="#CCCCCC"> file system</font><font color="#E5E5E5"> dumping code which</font>

763
00:26:54,259 --> 00:26:58,099
extracted the<font color="#CCCCCC"> 1500 functions or so or</font>

764
00:26:56,089 --> 00:26:59,779
<font color="#CCCCCC">binaries or so that</font><font color="#E5E5E5"> are on the file</font>

765
00:26:58,099 --> 00:27:02,570
system<font color="#CCCCCC"> we can pop them</font><font color="#E5E5E5"> tighter and</font>

766
00:26:59,779 --> 00:27:04,729
reverse them which is<font color="#E5E5E5"> really nice so our</font>

767
00:27:02,570 --> 00:27:07,428
first thing<font color="#E5E5E5"> these what did I find</font><font color="#CCCCCC"> I can</font>

768
00:27:04,729 --> 00:27:12,309
go through that<font color="#E5E5E5"> for the simple in</font>

769
00:27:07,429 --> 00:27:14,539
emulator<font color="#E5E5E5"> DLL emulations will find unique</font>

770
00:27:12,309 --> 00:27:17,570
reputations of<font color="#CCCCCC"> windows api functions for</font>

771
00:27:14,539 --> 00:27:19,639
<font color="#CCCCCC">example get user</font><font color="#E5E5E5"> an MA</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> in this case</font>

772
00:27:17,570 --> 00:27:21,889
get user may returns<font color="#E5E5E5"> a hard code string</font>

773
00:27:19,639 --> 00:27:23,839
of John Doe<font color="#E5E5E5"> this is something you could</font>

774
00:27:21,889 --> 00:27:25,459
<font color="#CCCCCC">obviously use to detect the</font><font color="#E5E5E5"> fender you</font>

775
00:27:23,839 --> 00:27:26,629
could say if I see the name John Doe<font color="#CCCCCC"> I</font>

776
00:27:25,460 --> 00:27:29,299
know I'm running<font color="#E5E5E5"> inside the fenders</font>

777
00:27:26,629 --> 00:27:30,349
emulator by the same<font color="#E5E5E5"> token if you ask</font>

778
00:27:29,299 --> 00:27:32,719
for<font color="#CCCCCC"> the computer name</font>

779
00:27:30,349 --> 00:27:34,939
let's get computer name<font color="#CCCCCC"> X</font><font color="#E5E5E5"> a it'll say</font>

780
00:27:32,719 --> 00:27:37,309
Hal 9000 so<font color="#CCCCCC"> although I see</font><font color="#E5E5E5"> a reference</font>

781
00:27:34,940 --> 00:27:38,809
<font color="#E5E5E5">to</font><font color="#CCCCCC"> 2,000 want to Space Odyssey</font>

782
00:27:37,309 --> 00:27:39,979
<font color="#E5E5E5">and again this is something</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> could</font>

783
00:27:38,809 --> 00:27:41,658
write malware<font color="#E5E5E5"> that looks for the user</font>

784
00:27:39,979 --> 00:27:43,729
<font color="#E5E5E5">named Hal 9000 and knows it's running</font>

785
00:27:41,659 --> 00:27:45,049
inside defender and this is obviously

786
00:27:43,729 --> 00:27:46,609
not how getting user name a or<font color="#CCCCCC"> their</font>

787
00:27:45,049 --> 00:27:48,710
computer name works<font color="#CCCCCC"> on real Windows</font>

788
00:27:46,609 --> 00:27:49,789
system but these functions are simple

789
00:27:48,710 --> 00:27:51,710
<font color="#CCCCCC">enough and they just return a simple</font>

790
00:27:49,789 --> 00:27:53,239
string that<font color="#E5E5E5"> they can be run inside the</font>

791
00:27:51,710 --> 00:27:55,369
emulator inside that dynamic translation

792
00:27:53,239 --> 00:27:57,190
context where they're ever escaping<font color="#E5E5E5"> into</font>

793
00:27:55,369 --> 00:27:59,570
<font color="#E5E5E5">say</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> native emulation that function</font>

794
00:27:57,190 --> 00:28:01,669
will also<font color="#E5E5E5"> see things that return simple</font>

795
00:27:59,570 --> 00:28:03,009
<font color="#CCCCCC">Heartgard</font><font color="#E5E5E5"> values or just grab a value</font>

796
00:28:01,669 --> 00:28:05,210
off the<font color="#CCCCCC"> pad</font>

797
00:28:03,009 --> 00:28:07,099
lots of functions<font color="#E5E5E5"> that are too complex</font>

798
00:28:05,210 --> 00:28:10,219
to<font color="#E5E5E5"> be implemented with</font><font color="#CCCCCC"> full-on relations</font>

799
00:28:07,099 --> 00:28:12,049
or simply stubbed out so RPC enable<font color="#CCCCCC"> with</font>

800
00:28:10,219 --> 00:28:14,239
<font color="#CCCCCC">me</font><font color="#E5E5E5"> trace is just gonna do it an exit</font>

801
00:28:12,049 --> 00:28:16,759
process negative<font color="#E5E5E5"> one our</font><font color="#CCCCCC"> PC exception</font>

802
00:28:14,239 --> 00:28:18,830
filter<font color="#E5E5E5"> just returns</font><font color="#CCCCCC"> zero and so forth</font><font color="#E5E5E5"> so</font>

803
00:28:16,759 --> 00:28:20,899
lots of functions that<font color="#CCCCCC"> a malware</font><font color="#E5E5E5"> may</font>

804
00:28:18,830 --> 00:28:23,029
call but may not be expecting them

805
00:28:20,899 --> 00:28:25,218
<font color="#E5E5E5">always to succeed</font><font color="#CCCCCC"> or just shimmed out</font>

806
00:28:23,029 --> 00:28:28,659
with implementations that<font color="#E5E5E5"> just turn</font><font color="#CCCCCC"> 0 or</font>

807
00:28:25,219 --> 00:28:31,909
negative<font color="#CCCCCC"> 1 or whatever hard-coded value</font>

808
00:28:28,659 --> 00:28:34,009
will<font color="#E5E5E5"> also find more unique strings for</font>

809
00:28:31,909 --> 00:28:35,869
example<font color="#CCCCCC"> another</font><font color="#E5E5E5"> dll there are many</font><font color="#CCCCCC"> dll's</font>

810
00:28:34,009 --> 00:28:38,570
<font color="#CCCCCC">and i can't show all of them here</font><font color="#E5E5E5"> but</font>

811
00:28:35,869 --> 00:28:39,829
looking at WS 232<font color="#CCCCCC"> I thought this was</font>

812
00:28:38,570 --> 00:28:41,509
<font color="#E5E5E5">really</font><font color="#CCCCCC"> interesting seeing</font><font color="#E5E5E5"> these unique</font>

813
00:28:39,829 --> 00:28:41,970
strings and German IP addresses<font color="#CCCCCC"> and</font>

814
00:28:41,509 --> 00:28:44,100
German

815
00:28:41,970 --> 00:28:45,600
<font color="#E5E5E5">sites presumably maybe a German</font>

816
00:28:44,100 --> 00:28:47,159
developer<font color="#E5E5E5"> develop this or something but</font>

817
00:28:45,600 --> 00:28:48,449
again these<font color="#E5E5E5"> are all traits that you</font>

818
00:28:47,160 --> 00:28:49,740
could write malware<font color="#E5E5E5"> that looks for them</font>

819
00:28:48,450 --> 00:28:53,280
and uses them<font color="#CCCCCC"> to detect</font><font color="#E5E5E5"> that it's</font>

820
00:28:49,740 --> 00:28:54,840
running inside defender so we've talked

821
00:28:53,280 --> 00:28:56,760
<font color="#CCCCCC">about the simple emulations those that</font>

822
00:28:54,840 --> 00:28:59,010
return simple<font color="#E5E5E5"> hard-coded strings or</font>

823
00:28:56,760 --> 00:29:01,200
negative<font color="#E5E5E5"> 1 or</font><font color="#CCCCCC"> 0 whatever hard-coded</font>

824
00:28:59,010 --> 00:29:04,379
value there are also more advanced

825
00:29:01,200 --> 00:29:05,730
simulations<font color="#E5E5E5"> they require a Bulls that on</font>

826
00:29:04,380 --> 00:29:07,980
a real<font color="#CCCCCC"> one to system would go into the</font>

827
00:29:05,730 --> 00:29:09,540
kernel in defender<font color="#E5E5E5"> they track out</font><font color="#CCCCCC"> to</font>

828
00:29:07,980 --> 00:29:11,070
native emulations<font color="#E5E5E5"> we're going to talk</font>

829
00:29:09,540 --> 00:29:14,010
<font color="#E5E5E5">about the user kernel interaction and</font>

830
00:29:11,070 --> 00:29:16,470
how the analogous<font color="#E5E5E5"> this is called</font>

831
00:29:14,010 --> 00:29:19,530
instruction<font color="#E5E5E5"> the analogous</font><font color="#CCCCCC"> processes</font>

832
00:29:16,470 --> 00:29:21,030
planted inside defender so defenders

833
00:29:19,530 --> 00:29:23,250
thetaba<font color="#E5E5E5"> malaysian is implemented with a</font>

834
00:29:21,030 --> 00:29:25,920
unique hyper call<font color="#E5E5E5"> instruction called api</font>

835
00:29:23,250 --> 00:29:28,710
call the bytes<font color="#E5E5E5"> of the opcode are shown</font>

836
00:29:25,920 --> 00:29:31,950
there<font color="#CCCCCC"> 0 F F F F 0 and then a 4 byte</font>

837
00:29:28,710 --> 00:29:36,210
immediate this<font color="#E5E5E5"> is obviously not a real</font>

838
00:29:31,950 --> 00:29:38,990
x86 instruction<font color="#E5E5E5"> but inside defender as</font>

839
00:29:36,210 --> 00:29:41,430
we're running<font color="#E5E5E5"> our</font><font color="#CCCCCC"> minor</font><font color="#E5E5E5"> malware binaries</font>

840
00:29:38,990 --> 00:29:42,720
<font color="#CCCCCC">the API call instruction</font><font color="#E5E5E5"> is they used a</font>

841
00:29:41,430 --> 00:29:44,910
<font color="#CCCCCC">track outside of this dynamic</font>

842
00:29:42,720 --> 00:29:47,690
<font color="#E5E5E5">translation context so as the dynamic</font>

843
00:29:44,910 --> 00:29:51,360
translator sees the API call instruction

844
00:29:47,690 --> 00:29:54,270
<font color="#CCCCCC">it will then step in and then basically</font>

845
00:29:51,360 --> 00:29:57,060
transition from this step you know this

846
00:29:54,270 --> 00:29:59,070
emulation of the jittered x86 code<font color="#E5E5E5"> it'll</font>

847
00:29:57,060 --> 00:30:01,879
call directly<font color="#E5E5E5"> into an emulation routine</font>

848
00:29:59,070 --> 00:30:03,840
that provides emulation<font color="#E5E5E5"> of</font><font color="#CCCCCC"> that function</font>

849
00:30:01,880 --> 00:30:05,250
so these are for more complex<font color="#E5E5E5"> functions</font>

850
00:30:03,840 --> 00:30:07,649
<font color="#CCCCCC">though than a real</font><font color="#E5E5E5"> window system would</font>

851
00:30:05,250 --> 00:30:10,380
require<font color="#CCCCCC"> going into the kernel so for</font>

852
00:30:07,650 --> 00:30:12,240
here for copy file<font color="#E5E5E5"> W worker</font><font color="#CCCCCC"> ivan I do</font>

853
00:30:10,380 --> 00:30:14,400
<font color="#CCCCCC">disassembly that shows them do an API</font>

854
00:30:12,240 --> 00:30:16,770
call over to<font color="#CCCCCC"> Corona</font><font color="#E5E5E5"> to copy file worker</font>

855
00:30:14,400 --> 00:30:18,900
as soon as the dynamic translation<font color="#E5E5E5"> the</font>

856
00:30:16,770 --> 00:30:21,629
interpreter<font color="#CCCCCC"> server</font><font color="#E5E5E5"> for this sexy</font><font color="#CCCCCC"> 6 code</font>

857
00:30:18,900 --> 00:30:24,060
that's being lifted<font color="#E5E5E5"> to</font><font color="#CCCCCC"> V il as soon as</font>

858
00:30:21,630 --> 00:30:25,440
it sees the API call<font color="#E5E5E5"> it brings us</font><font color="#CCCCCC"> over</font>

859
00:30:24,060 --> 00:30:30,120
here to<font color="#E5E5E5"> MP</font><font color="#CCCCCC"> engine's function</font>

860
00:30:25,440 --> 00:30:33,300
kernel32.dll copy file<font color="#CCCCCC"> W worker</font><font color="#E5E5E5"> this</font>

861
00:30:30,120 --> 00:30:34,350
<font color="#E5E5E5">mechanism</font><font color="#CCCCCC"> this is</font><font color="#E5E5E5"> the sort of function</font>

862
00:30:33,300 --> 00:30:35,399
<font color="#E5E5E5">that we hooked when we hooked up with</font>

863
00:30:34,350 --> 00:30:38,610
your<font color="#CCCCCC"> bugs during a where these are</font>

864
00:30:35,400 --> 00:30:42,150
translating into<font color="#CCCCCC"> a function</font><font color="#E5E5E5"> inside MP</font>

865
00:30:38,610 --> 00:30:44,010
<font color="#E5E5E5">engine DLL itself the</font><font color="#CCCCCC"> prod simulation so</font>

866
00:30:42,150 --> 00:30:46,440
then there's<font color="#CCCCCC"> a G syscalls table this is</font>

867
00:30:44,010 --> 00:30:48,450
the table of 119 functions<font color="#E5E5E5"> that provide</font>

868
00:30:46,440 --> 00:30:50,190
emulations for these unique and

869
00:30:48,450 --> 00:30:52,800
<font color="#E5E5E5">difficult</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> complex to emulate</font>

870
00:30:50,190 --> 00:30:54,510
routines<font color="#CCCCCC"> so they're all</font><font color="#E5E5E5"> stored here</font><font color="#CCCCCC"> in</font>

871
00:30:52,800 --> 00:30:56,159
<font color="#E5E5E5">the table which has a function pointer</font>

872
00:30:54,510 --> 00:30:59,760
<font color="#E5E5E5">to the emulation</font>

873
00:30:56,160 --> 00:31:04,920
<font color="#E5E5E5">as well as a</font><font color="#CCCCCC"> crc32 of the DLL name and</font>

874
00:30:59,760 --> 00:31:06,300
the<font color="#CCCCCC"> function name this</font><font color="#E5E5E5"> is where we plant</font>

875
00:31:04,920 --> 00:31:09,450
our pointers when we're hooking

876
00:31:06,300 --> 00:31:10,919
up<font color="#E5E5E5"> a debug string</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> other functions so</font>

877
00:31:09,450 --> 00:31:12,210
an example<font color="#CCCCCC"> of how this</font><font color="#E5E5E5"> mechanism looks</font>

878
00:31:10,920 --> 00:31:15,810
<font color="#E5E5E5">like what it looks like</font><font color="#CCCCCC"> an</font>

879
00:31:12,210 --> 00:31:17,280
implementation inside<font color="#E5E5E5"> defenders virtual</font>

880
00:31:15,810 --> 00:31:19,620
dials inside the virtual file system

881
00:31:17,280 --> 00:31:21,540
they have an emulation<font color="#CCCCCC"> of kernel32 of</font>

882
00:31:19,620 --> 00:31:23,729
put debug<font color="#E5E5E5"> string a it's going to do some</font>

883
00:31:21,540 --> 00:31:24,960
things<font color="#CCCCCC"> like for example check was</font><font color="#E5E5E5"> uppity</font>

884
00:31:23,730 --> 00:31:27,060
bug string<font color="#CCCCCC"> I called</font><font color="#E5E5E5"> over</font><font color="#CCCCCC"> nine hundred</font>

885
00:31:24,960 --> 00:31:28,290
<font color="#CCCCCC">times maybe you have</font><font color="#E5E5E5"> malware that just</font>

886
00:31:27,060 --> 00:31:30,000
repeatedly does up with debug string<font color="#E5E5E5"> a</font>

887
00:31:28,290 --> 00:31:31,050
<font color="#CCCCCC">and they want</font><font color="#E5E5E5"> to know that so they'll</font>

888
00:31:30,000 --> 00:31:33,000
keep a count<font color="#E5E5E5"> of how many times it was</font>

889
00:31:31,050 --> 00:31:34,980
called<font color="#E5E5E5"> then they're gonna ultimately</font>

890
00:31:33,000 --> 00:31:38,070
resolve down into a call to API called

891
00:31:34,980 --> 00:31:40,290
kernel32 up with debug string<font color="#CCCCCC"> I and this</font>

892
00:31:38,070 --> 00:31:44,310
<font color="#E5E5E5">is a function</font><font color="#CCCCCC"> that has here our API call</font>

893
00:31:40,290 --> 00:31:46,530
instruction<font color="#E5E5E5"> 0 FF FF 0 and the</font><font color="#CCCCCC"> four byte</font>

894
00:31:44,310 --> 00:31:48,450
immediate specifying<font color="#E5E5E5"> kernel32 output</font>

895
00:31:46,530 --> 00:31:50,850
debug string<font color="#CCCCCC"> a</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> one the dynamic</font>

896
00:31:48,450 --> 00:31:53,730
translator<font color="#E5E5E5"> sees that</font><font color="#CCCCCC"> then transitioned</font>

897
00:31:50,850 --> 00:31:55,649
<font color="#E5E5E5">writing that emulation for us so then we</font>

898
00:31:53,730 --> 00:31:57,090
reach the native emulation function this

899
00:31:55,650 --> 00:31:58,380
is the function that we hooked<font color="#E5E5E5"> when I</font>

900
00:31:57,090 --> 00:32:01,860
was showing you<font color="#E5E5E5"> uppity</font><font color="#CCCCCC"> bug string ie on</font>

901
00:31:58,380 --> 00:32:03,480
to standard out so we can go through<font color="#CCCCCC"> the</font>

902
00:32:01,860 --> 00:32:05,250
Jesus calls table<font color="#CCCCCC"> or numerate the</font>

903
00:32:03,480 --> 00:32:07,020
functions that<font color="#CCCCCC"> are done with our</font>

904
00:32:05,250 --> 00:32:10,050
provided<font color="#E5E5E5"> native emulation by defender</font>

905
00:32:07,020 --> 00:32:11,639
<font color="#CCCCCC">and you'll see here at 3 API 32 car 32</font>

906
00:32:10,050 --> 00:32:12,899
and so forth<font color="#E5E5E5"> the ones that are</font>

907
00:32:11,640 --> 00:32:14,550
<font color="#E5E5E5">highlighted in yellow are unique to</font>

908
00:32:12,900 --> 00:32:16,920
defender these are not functions found

909
00:32:14,550 --> 00:32:19,169
<font color="#E5E5E5">in real window system so for example</font>

910
00:32:16,920 --> 00:32:20,520
they have some backdoor<font color="#E5E5E5"> debug functions</font>

911
00:32:19,170 --> 00:32:22,290
administration functions<font color="#E5E5E5"> function</font>

912
00:32:20,520 --> 00:32:25,020
relating to phone to malware signatures

913
00:32:22,290 --> 00:32:26,639
and in ntdll they've a number of

914
00:32:25,020 --> 00:32:28,350
functions<font color="#CCCCCC"> linked to low-level access to</font>

915
00:32:26,640 --> 00:32:32,520
the<font color="#E5E5E5"> virtual file system</font><font color="#CCCCCC"> that have the</font>

916
00:32:28,350 --> 00:32:34,379
<font color="#E5E5E5">VFS prefix all these native emulation</font>

917
00:32:32,520 --> 00:32:36,389
functions take a large parameter called

918
00:32:34,380 --> 00:32:37,980
a<font color="#E5E5E5"> PE</font><font color="#CCCCCC"> varsity</font><font color="#E5E5E5"> it's about a half megabyte</font>

919
00:32:36,390 --> 00:32:40,110
large structure that contains<font color="#E5E5E5"> everything</font>

920
00:32:37,980 --> 00:32:42,090
about<font color="#E5E5E5"> a given emulation context so it's</font>

921
00:32:40,110 --> 00:32:45,149
gonna it's gonna have your time all the

922
00:32:42,090 --> 00:32:46,530
<font color="#CCCCCC">DLL binary is loaded</font><font color="#E5E5E5"> various heuristic</font>

923
00:32:45,150 --> 00:32:48,240
observations about the binary

924
00:32:46,530 --> 00:32:50,310
<font color="#E5E5E5">pointers of the virtual</font><font color="#CCCCCC"> address space</font>

925
00:32:48,240 --> 00:32:52,320
just everything<font color="#E5E5E5"> you need to know about a</font>

926
00:32:50,310 --> 00:32:55,730
give you emulation session that being

927
00:32:52,320 --> 00:32:58,620
single<font color="#E5E5E5"> blob of code or brother of data</font>

928
00:32:55,730 --> 00:33:01,830
<font color="#CCCCCC">it's passed</font><font color="#E5E5E5"> into every native emulation</font>

929
00:32:58,620 --> 00:33:03,870
<font color="#E5E5E5">and then programmatic api's are used to</font>

930
00:33:01,830 --> 00:33:05,399
say retrieve parameters<font color="#E5E5E5"> so they're going</font>

931
00:33:03,870 --> 00:33:08,399
<font color="#E5E5E5">to go in and manipulate the virtual</font>

932
00:33:05,400 --> 00:33:09,500
stack<font color="#E5E5E5"> they're used to manipulate virtual</font>

933
00:33:08,400 --> 00:33:11,090
memory<font color="#CCCCCC"> get</font>

934
00:33:09,500 --> 00:33:14,600
that registers getting set and<font color="#E5E5E5"> change</font>

935
00:33:11,090 --> 00:33:16,459
memory<font color="#E5E5E5"> and even change things like the</font>

936
00:33:14,600 --> 00:33:19,820
<font color="#E5E5E5">CPU to</font><font color="#CCCCCC"> counter</font><font color="#E5E5E5"> the time inside</font><font color="#CCCCCC"> the</font>

937
00:33:16,460 --> 00:33:21,560
<font color="#CCCCCC">engine a virtual</font><font color="#E5E5E5"> memory can be</font>

938
00:33:19,820 --> 00:33:23,389
interacted with an<font color="#CCCCCC"> API similar to that</font>

939
00:33:21,560 --> 00:33:26,300
found<font color="#E5E5E5"> in the unicorn engine or any other</font>

940
00:33:23,390 --> 00:33:28,760
sort of programmatic<font color="#E5E5E5"> emulator where you</font>

941
00:33:26,300 --> 00:33:30,919
can map it memory from a virtualized

942
00:33:28,760 --> 00:33:32,120
memory space translate that<font color="#CCCCCC"> to a native</font>

943
00:33:30,920 --> 00:33:34,280
memory<font color="#E5E5E5"> you can interact with</font><font color="#CCCCCC"> and touch</font>

944
00:33:32,120 --> 00:33:36,199
and then a number of utility functions

945
00:33:34,280 --> 00:33:37,730
and wrapper functions provide easier

946
00:33:36,200 --> 00:33:39,710
ways of<font color="#E5E5E5"> doing common operations like</font>

947
00:33:37,730 --> 00:33:41,990
<font color="#E5E5E5">writing a single byte reading a single</font>

948
00:33:39,710 --> 00:33:43,760
byte a D word or word so<font color="#CCCCCC"> for various</font>

949
00:33:41,990 --> 00:33:45,860
sizes<font color="#E5E5E5"> of memory</font><font color="#CCCCCC"> or doing</font><font color="#E5E5E5"> things like</font>

950
00:33:43,760 --> 00:33:52,190
reading a virtual string from<font color="#E5E5E5"> the</font>

951
00:33:45,860 --> 00:33:53,540
<font color="#E5E5E5">another environment so we've now talked</font>

952
00:33:52,190 --> 00:33:55,040
about the mechanism<font color="#E5E5E5"> you</font><font color="#CCCCCC"> use the trap</font>

953
00:33:53,540 --> 00:33:57,320
from inside the emulator at the outside

954
00:33:55,040 --> 00:33:59,030
for complex simulations let's talk a

955
00:33:57,320 --> 00:34:00,439
little<font color="#CCCCCC"> about the internal emulation of</font>

956
00:33:59,030 --> 00:34:04,100
<font color="#E5E5E5">the</font><font color="#CCCCCC"> Windows kernel in the NT kernel</font>

957
00:34:00,440 --> 00:34:06,560
facilities so Windows<font color="#E5E5E5"> kernel facilities</font>

958
00:34:04,100 --> 00:34:07,760
are emulated<font color="#CCCCCC"> with native code so</font><font color="#E5E5E5"> these</font>

959
00:34:06,560 --> 00:34:10,219
facilities include the object manager

960
00:34:07,760 --> 00:34:12,320
<font color="#CCCCCC">process</font><font color="#E5E5E5"> management file system the</font>

961
00:34:10,219 --> 00:34:13,790
<font color="#E5E5E5">registry and various synchronization</font>

962
00:34:12,320 --> 00:34:15,260
primitives<font color="#CCCCCC"> this is just like you would</font>

963
00:34:13,790 --> 00:34:18,710
<font color="#E5E5E5">find on a real</font><font color="#CCCCCC"> Windows system with the</font>

964
00:34:15,260 --> 00:34:20,990
NT kernel so first off we have<font color="#E5E5E5"> the</font>

965
00:34:18,710 --> 00:34:22,850
<font color="#E5E5E5">object</font><font color="#CCCCCC"> manager this is part of Windows</font>

966
00:34:20,989 --> 00:34:23,899
<font color="#CCCCCC">that whenever you access a handle</font><font color="#E5E5E5"> work</font>

967
00:34:22,850 --> 00:34:24,949
with a handle

968
00:34:23,899 --> 00:34:27,620
it's going to pass through<font color="#E5E5E5"> the object</font>

969
00:34:24,949 --> 00:34:29,480
<font color="#CCCCCC">manager so</font><font color="#E5E5E5"> handles can</font><font color="#CCCCCC"> be things like</font>

970
00:34:27,620 --> 00:34:31,819
<font color="#CCCCCC">process these files registry Keys</font>

971
00:34:29,480 --> 00:34:34,280
mutexes<font color="#E5E5E5"> any sort of system resource that</font>

972
00:34:31,820 --> 00:34:36,679
you<font color="#CCCCCC"> can manipulate with your process</font><font color="#E5E5E5"> has</font>

973
00:34:34,280 --> 00:34:38,330
a handle assigned to it<font color="#CCCCCC"> and in a real</font>

974
00:34:36,679 --> 00:34:41,240
<font color="#E5E5E5">Windows system those</font><font color="#CCCCCC"> are stored inside</font>

975
00:34:38,330 --> 00:34:42,710
<font color="#E5E5E5">the object</font><font color="#CCCCCC"> manager defender sports</font><font color="#E5E5E5"> five</font>

976
00:34:41,239 --> 00:34:44,388
types<font color="#E5E5E5"> of objects which I've shown</font><font color="#CCCCCC"> here</font>

977
00:34:42,710 --> 00:34:47,929
file thread event mutex and semaphore

978
00:34:44,389 --> 00:34:49,899
<font color="#E5E5E5">and inside</font><font color="#CCCCCC"> MP engine bed DLL there is a</font>

979
00:34:47,929 --> 00:34:52,159
virtual<font color="#CCCCCC"> object manager</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> provide a</font>

980
00:34:49,899 --> 00:34:53,929
software bound emulation of this

981
00:34:52,159 --> 00:34:56,240
traditional Windows kernel facility this

982
00:34:53,929 --> 00:34:57,680
<font color="#CCCCCC">is done here in mp Engine 2 DLL for</font>

983
00:34:56,239 --> 00:35:00,680
malware being<font color="#E5E5E5"> emulated inside the</font>

984
00:34:57,680 --> 00:35:02,690
emulator as I said there are there are

985
00:35:00,680 --> 00:35:04,940
<font color="#E5E5E5">five types of object with emulation</font>

986
00:35:02,690 --> 00:35:06,470
spotted by defender<font color="#CCCCCC"> and</font><font color="#E5E5E5"> they all</font>

987
00:35:04,940 --> 00:35:08,150
<font color="#E5E5E5">actually on the</font><font color="#CCCCCC"> background</font><font color="#E5E5E5"> or</font>

988
00:35:06,470 --> 00:35:08,720
implemented with C++<font color="#E5E5E5"> classes and</font>

989
00:35:08,150 --> 00:35:11,660
subclasses

990
00:35:08,720 --> 00:35:13,879
<font color="#CCCCCC">were</font><font color="#E5E5E5"> they all in a</font><font color="#CCCCCC"> herefor common MP</font>

991
00:35:11,660 --> 00:35:15,470
engine object manager<font color="#CCCCCC"> object class you</font>

992
00:35:13,880 --> 00:35:17,210
then have things like a file<font color="#E5E5E5"> object</font>

993
00:35:15,470 --> 00:35:19,850
which has unique traits like<font color="#E5E5E5"> an M file</font>

994
00:35:17,210 --> 00:35:22,620
handle<font color="#E5E5E5"> access mode share</font><font color="#CCCCCC"> access and so</font>

995
00:35:19,850 --> 00:35:24,839
forth<font color="#E5E5E5"> or a mutex which is an M</font>

996
00:35:22,620 --> 00:35:26,400
mutant mutant object and<font color="#CCCCCC"> that has going</font>

997
00:35:24,840 --> 00:35:27,990
<font color="#E5E5E5">to have unique traits like it was an</font>

998
00:35:26,400 --> 00:35:29,700
abandon and what is the<font color="#E5E5E5"> weight count on</font>

999
00:35:27,990 --> 00:35:31,229
that<font color="#CCCCCC"> object and then these are</font><font color="#E5E5E5"> all</font>

1000
00:35:29,700 --> 00:35:34,140
stored<font color="#CCCCCC"> in this basically a big hash map</font>

1001
00:35:31,230 --> 00:35:35,280
<font color="#E5E5E5">in in Windows Defender and access</font>

1002
00:35:34,140 --> 00:35:43,100
programmatically<font color="#CCCCCC"> through the object</font>

1003
00:35:35,280 --> 00:35:47,400
<font color="#CCCCCC">manager the operator</font><font color="#E5E5E5"> is interact with by</font>

1004
00:35:43,100 --> 00:35:49,980
<font color="#CCCCCC">windows API emulations so for example in</font>

1005
00:35:47,400 --> 00:35:51,300
NT open mutant worker<font color="#E5E5E5"> they are going</font><font color="#CCCCCC"> to</font>

1006
00:35:49,980 --> 00:35:52,940
<font color="#E5E5E5">open an object so they're going to go</font>

1007
00:35:51,300 --> 00:35:56,460
into that<font color="#E5E5E5"> hash table and try to retrieve</font>

1008
00:35:52,940 --> 00:35:58,920
the appropriate handle<font color="#E5E5E5"> that the malware</font>

1009
00:35:56,460 --> 00:36:01,080
being emulated<font color="#CCCCCC"> tried</font><font color="#E5E5E5"> to interact with or</font>

1010
00:35:58,920 --> 00:36:02,640
if they want to say set information<font color="#E5E5E5"> for</font>

1011
00:36:01,080 --> 00:36:04,799
file<font color="#CCCCCC"> they're gonna pull back handle and</font>

1012
00:36:02,640 --> 00:36:07,049
they're<font color="#E5E5E5"> gonna specifically check I want</font>

1013
00:36:04,800 --> 00:36:09,510
<font color="#E5E5E5">a file object so if you</font><font color="#CCCCCC"> trace an a a</font>

1014
00:36:07,050 --> 00:36:11,490
handle to a mutex to<font color="#CCCCCC"> an T set</font>

1015
00:36:09,510 --> 00:36:14,670
information file a worker that call will

1016
00:36:11,490 --> 00:36:15,839
fail<font color="#E5E5E5"> because</font><font color="#CCCCCC"> it's not a file object</font><font color="#E5E5E5"> and</font>

1017
00:36:14,670 --> 00:36:18,000
the object manners are going to manage

1018
00:36:15,840 --> 00:36:19,350
<font color="#CCCCCC">that</font><font color="#E5E5E5"> and keep track</font><font color="#CCCCCC"> of State and type of</font>

1019
00:36:18,000 --> 00:36:22,740
different objects that are passed<font color="#E5E5E5"> into</font>

1020
00:36:19,350 --> 00:36:25,200
it<font color="#E5E5E5"> you'll also</font><font color="#CCCCCC"> see unique things like</font>

1021
00:36:22,740 --> 00:36:26,879
the current process handle is<font color="#E5E5E5"> in Windows</font>

1022
00:36:25,200 --> 00:36:28,740
a<font color="#E5E5E5"> pseudo handle it's not a real handle</font>

1023
00:36:26,880 --> 00:36:31,230
<font color="#E5E5E5">and so in the object manager in</font>

1024
00:36:28,740 --> 00:36:33,060
<font color="#E5E5E5">defenders case it's emulated as X 1 2 3</font>

1025
00:36:31,230 --> 00:36:34,980
4 so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a trait you can use</font><font color="#E5E5E5"> right</font>

1026
00:36:33,060 --> 00:36:36,509
malware<font color="#E5E5E5"> that looks for hex 1 2 3 4 and</font>

1027
00:36:34,980 --> 00:36:40,170
knows it's<font color="#E5E5E5"> being emulated inside</font>

1028
00:36:36,510 --> 00:36:42,810
<font color="#E5E5E5">defender if it sees that</font><font color="#CCCCCC"> nique value for</font>

1029
00:36:40,170 --> 00:36:45,600
its own across the same day<font color="#CCCCCC"> moves of</font><font color="#E5E5E5"> a</font>

1030
00:36:42,810 --> 00:36:48,090
virtual file system<font color="#E5E5E5"> so this</font><font color="#CCCCCC"> provides</font>

1031
00:36:45,600 --> 00:36:50,310
basically software bound emulation<font color="#E5E5E5"> of a</font>

1032
00:36:48,090 --> 00:36:52,530
file<font color="#E5E5E5"> system it's all done on the heap in</font>

1033
00:36:50,310 --> 00:36:53,970
defender so there's not<font color="#E5E5E5"> a real file</font>

1034
00:36:52,530 --> 00:36:57,480
system with a real disk or anything like

1035
00:36:53,970 --> 00:36:58,980
<font color="#E5E5E5">that this is just sort of allocated</font>

1036
00:36:57,480 --> 00:37:00,660
memory on the heap that<font color="#E5E5E5"> stores these</font>

1037
00:36:58,980 --> 00:37:04,590
<font color="#E5E5E5">virtual files you can write to read to</font>

1038
00:37:00,660 --> 00:37:07,410
interact<font color="#CCCCCC"> with and so forth there are</font>

1039
00:37:04,590 --> 00:37:09,030
these kind<font color="#CCCCCC"> of backdoor lower-level API</font>

1040
00:37:07,410 --> 00:37:11,850
<font color="#E5E5E5">for interacting with</font><font color="#CCCCCC"> the file system of</font>

1041
00:37:09,030 --> 00:37:16,410
<font color="#CCCCCC">the VFS functions these</font><font color="#E5E5E5"> are used by</font>

1042
00:37:11,850 --> 00:37:18,060
emulations<font color="#E5E5E5"> of the low-level NT api's for</font>

1043
00:37:16,410 --> 00:37:19,649
enacting<font color="#CCCCCC"> the file system but they're</font>

1044
00:37:18,060 --> 00:37:21,120
also exposed by<font color="#E5E5E5"> Microsoft inside the</font>

1045
00:37:19,650 --> 00:37:23,010
engine<font color="#CCCCCC"> which is someone we</font><font color="#E5E5E5"> talked about</font>

1046
00:37:21,120 --> 00:37:24,029
<font color="#E5E5E5">a little bit a little</font><font color="#CCCCCC"> bit later</font><font color="#E5E5E5"> how</font>

1047
00:37:23,010 --> 00:37:26,130
<font color="#CCCCCC">there's some vulnerabilities that</font>

1048
00:37:24,030 --> 00:37:27,960
manifest through these being exposed to

1049
00:37:26,130 --> 00:37:31,770
<font color="#E5E5E5">the user or</font><font color="#CCCCCC"> the brother the malware</font>

1050
00:37:27,960 --> 00:37:32,880
running<font color="#E5E5E5"> inside the emulator finally</font>

1051
00:37:31,770 --> 00:37:34,450
<font color="#CCCCCC">moving</font><font color="#E5E5E5"> into talking about AV</font>

1052
00:37:32,880 --> 00:37:36,250
instrumentation

1053
00:37:34,450 --> 00:37:38,669
throughout the<font color="#CCCCCC"> engine we have these</font>

1054
00:37:36,250 --> 00:37:41,110
internal functions that<font color="#E5E5E5"> I mentioned that</font>

1055
00:37:38,670 --> 00:37:42,970
<font color="#E5E5E5">are accessible through the API call</font>

1056
00:37:41,110 --> 00:37:45,540
hyper call instruction<font color="#E5E5E5"> and they do</font>

1057
00:37:42,970 --> 00:37:48,160
things like<font color="#CCCCCC"> cube us a file for scanning</font>

1058
00:37:45,540 --> 00:37:49,630
<font color="#CCCCCC">alias memory inside</font><font color="#E5E5E5"> the emulator and</font>

1059
00:37:48,160 --> 00:37:51,670
most interestingly report<font color="#CCCCCC"> Malheur</font>

1060
00:37:49,630 --> 00:37:53,740
behavior to inform detection heuristics

1061
00:37:51,670 --> 00:37:56,380
<font color="#E5E5E5">so we're going to talk about that so</font>

1062
00:37:53,740 --> 00:37:58,479
<font color="#E5E5E5">inside these kind of user mode</font>

1063
00:37:56,380 --> 00:38:01,240
emulations<font color="#E5E5E5"> of various windows</font><font color="#CCCCCC"> api</font>

1064
00:37:58,480 --> 00:38:04,750
functions<font color="#E5E5E5"> there are</font><font color="#CCCCCC"> lots of calls to MP</font>

1065
00:38:01,240 --> 00:38:06,609
<font color="#CCCCCC">report event with various values this is</font>

1066
00:38:04,750 --> 00:38:08,500
<font color="#E5E5E5">basically reporting that the malware</font>

1067
00:38:06,610 --> 00:38:10,330
<font color="#E5E5E5">inside the emulator</font><font color="#CCCCCC"> took a particular</font>

1068
00:38:08,500 --> 00:38:12,340
action so if<font color="#E5E5E5"> you call get system</font>

1069
00:38:10,330 --> 00:38:14,950
directory Adel's call<font color="#CCCCCC"> MP report event</font>

1070
00:38:12,340 --> 00:38:16,450
<font color="#CCCCCC">one two three three one</font><font color="#E5E5E5"> so if you</font><font color="#CCCCCC"> have</font>

1071
00:38:14,950 --> 00:38:18,129
some signatures that<font color="#E5E5E5"> say I'm</font><font color="#CCCCCC"> looking for</font>

1072
00:38:16,450 --> 00:38:19,899
a call to<font color="#CCCCCC"> get system directory and then</font>

1073
00:38:18,130 --> 00:38:21,700
to load<font color="#CCCCCC"> library and then to</font><font color="#E5E5E5"> this and</font>

1074
00:38:19,900 --> 00:38:23,200
then of<font color="#CCCCCC"> that you want to know the</font>

1075
00:38:21,700 --> 00:38:24,669
sequences<font color="#E5E5E5"> of API</font><font color="#CCCCCC"> calls that</font><font color="#E5E5E5"> are called</font>

1076
00:38:23,200 --> 00:38:27,850
<font color="#CCCCCC">by the</font><font color="#E5E5E5"> malware</font><font color="#CCCCCC"> to inform that detection</font>

1077
00:38:24,670 --> 00:38:29,740
so<font color="#E5E5E5"> throughout the video else</font>

1078
00:38:27,850 --> 00:38:32,110
the<font color="#CCCCCC"> pride emulation windows api</font><font color="#E5E5E5"> that</font>

1079
00:38:29,740 --> 00:38:34,810
<font color="#CCCCCC">microsoft is woven in these calls</font><font color="#E5E5E5"> to MP</font>

1080
00:38:32,110 --> 00:38:37,390
<font color="#E5E5E5">report event reporting</font><font color="#CCCCCC"> bow out to the MP</font>

1081
00:38:34,810 --> 00:38:40,090
engine<font color="#E5E5E5"> dll the the larger sort of native</font>

1082
00:38:37,390 --> 00:38:41,680
code<font color="#CCCCCC"> what particular API is the amount</font>

1083
00:38:40,090 --> 00:38:45,160
were inside the emulator<font color="#E5E5E5"> is calling and</font>

1084
00:38:41,680 --> 00:38:47,350
it can also pass out strings you can<font color="#CCCCCC"> see</font>

1085
00:38:45,160 --> 00:38:49,060
things here<font color="#CCCCCC"> like if you do a create</font>

1086
00:38:47,350 --> 00:38:51,040
process and you create suspended<font color="#E5E5E5"> maybe</font>

1087
00:38:49,060 --> 00:38:52,509
<font color="#CCCCCC">you</font><font color="#E5E5E5"> doing process hollowing so they will</font>

1088
00:38:51,040 --> 00:38:54,520
pass<font color="#E5E5E5"> that the</font><font color="#CCCCCC"> string create suspended to</font>

1089
00:38:52,510 --> 00:38:56,260
inform<font color="#CCCCCC"> defender that</font><font color="#E5E5E5"> you know this is a</font>

1090
00:38:54,520 --> 00:38:58,000
particularly potentially malicious

1091
00:38:56,260 --> 00:39:00,990
<font color="#E5E5E5">action particularly</font><font color="#CCCCCC"> sketchy</font><font color="#E5E5E5"> something</font>

1092
00:38:58,000 --> 00:39:03,880
you really normal<font color="#E5E5E5"> software might not do</font>

1093
00:39:00,990 --> 00:39:06,819
more MP report<font color="#CCCCCC"> events on things</font><font color="#E5E5E5"> like get</font>

1094
00:39:03,880 --> 00:39:08,440
file size or I get<font color="#E5E5E5"> drive type a again</font>

1095
00:39:06,820 --> 00:39:10,180
<font color="#CCCCCC">will</font><font color="#E5E5E5"> open throughout these simulations</font>

1096
00:39:08,440 --> 00:39:13,060
of various<font color="#E5E5E5"> windows api's</font><font color="#CCCCCC"> they're</font>

1097
00:39:10,180 --> 00:39:16,690
informing<font color="#E5E5E5"> defender about sort of</font>

1098
00:39:13,060 --> 00:39:18,220
<font color="#E5E5E5">heuristic protections and one</font><font color="#CCCCCC"> example of</font>

1099
00:39:16,690 --> 00:39:20,350
this kind<font color="#E5E5E5"> of concrete very interesting</font>

1100
00:39:18,220 --> 00:39:21,939
to look<font color="#E5E5E5"> at these as I mentioned we have</font>

1101
00:39:20,350 --> 00:39:23,589
these emulations of various other

1102
00:39:21,940 --> 00:39:26,440
processes running on<font color="#E5E5E5"> the system and</font>

1103
00:39:23,590 --> 00:39:28,570
you'll notice<font color="#E5E5E5"> that the names of</font>

1104
00:39:26,440 --> 00:39:31,510
antivirus processes<font color="#E5E5E5"> all are in the 700</font>

1105
00:39:28,570 --> 00:39:35,530
range so because first b AV AV<font color="#E5E5E5"> p Tyvek</font>

1106
00:39:31,510 --> 00:39:36,910
<font color="#CCCCCC">c-- f save as f-secure</font><font color="#E5E5E5"> norton</font><font color="#CCCCCC"> DX e m</font><font color="#E5E5E5"> SMP</font>

1107
00:39:35,530 --> 00:39:39,400
engine that's the defender itself

1108
00:39:36,910 --> 00:39:41,470
<font color="#CCCCCC">outpost</font><font color="#E5E5E5"> and so forth</font><font color="#CCCCCC"> they're all in</font><font color="#E5E5E5"> the</font>

1109
00:39:39,400 --> 00:39:42,970
700 range as far<font color="#CCCCCC"> as</font><font color="#E5E5E5"> their pits these are</font>

1110
00:39:41,470 --> 00:39:44,950
not again real processes<font color="#E5E5E5"> this is just an</font>

1111
00:39:42,970 --> 00:39:45,689
emulation<font color="#E5E5E5"> of these processes being</font>

1112
00:39:44,950 --> 00:39:48,120
present<font color="#E5E5E5"> it's just</font>

1113
00:39:45,690 --> 00:39:50,940
value<font color="#E5E5E5"> but you'll notice when</font><font color="#CCCCCC"> you call</font>

1114
00:39:48,120 --> 00:39:52,799
the terminate process<font color="#E5E5E5"> API if you pass it</font>

1115
00:39:50,940 --> 00:39:55,650
<font color="#CCCCCC">up hit in the</font><font color="#E5E5E5"> 700 range to that function</font>

1116
00:39:52,800 --> 00:39:58,890
<font color="#CCCCCC">they will call</font><font color="#E5E5E5"> MP reporter met with a</font>

1117
00:39:55,650 --> 00:40:00,210
unique value and say<font color="#E5E5E5"> a</font><font color="#CCCCCC"> V</font><font color="#E5E5E5"> so that's</font>

1118
00:39:58,890 --> 00:40:01,170
<font color="#E5E5E5">probably a strong indicator that your</font>

1119
00:40:00,210 --> 00:40:03,510
<font color="#CCCCCC">malware</font><font color="#E5E5E5"> and you're trying to go and</font>

1120
00:40:01,170 --> 00:40:04,500
terminate<font color="#CCCCCC"> AV processes so</font><font color="#E5E5E5"> they want to</font>

1121
00:40:03,510 --> 00:40:06,180
know that<font color="#E5E5E5"> you were</font><font color="#CCCCCC"> not just</font><font color="#E5E5E5"> trying to</font>

1122
00:40:04,500 --> 00:40:07,740
kill any process which<font color="#CCCCCC"> is itself may be</font>

1123
00:40:06,180 --> 00:40:09,180
an indicator of malicious<font color="#E5E5E5"> intent</font><font color="#CCCCCC"> you're</font>

1124
00:40:07,740 --> 00:40:10,979
trying to clone a V process<font color="#CCCCCC"> that's</font>

1125
00:40:09,180 --> 00:40:13,290
particularly<font color="#E5E5E5"> bad and malicious so</font>

1126
00:40:10,980 --> 00:40:14,310
<font color="#CCCCCC">they'll inform that that part</font><font color="#E5E5E5"> of the</font>

1127
00:40:13,290 --> 00:40:20,160
<font color="#E5E5E5">offender that you're trying to kill an</font>

1128
00:40:14,310 --> 00:40:21,990
<font color="#E5E5E5">AV we also have a function</font><font color="#CCCCCC"> called NT</font>

1129
00:40:20,160 --> 00:40:24,680
control<font color="#E5E5E5"> channel which provides</font><font color="#CCCCCC"> our</font>

1130
00:40:21,990 --> 00:40:27,240
<font color="#E5E5E5">backdoor administration of the engine</font>

1131
00:40:24,680 --> 00:40:29,580
and this is<font color="#CCCCCC"> something that</font><font color="#E5E5E5"> taps or</font><font color="#CCCCCC"> MIDI</font>

1132
00:40:27,240 --> 00:40:31,649
was abusing this is basically it seems

1133
00:40:29,580 --> 00:40:34,500
like for developers<font color="#CCCCCC"> to manage and debug</font>

1134
00:40:31,650 --> 00:40:36,810
the engine so from inside the engine<font color="#E5E5E5"> you</font>

1135
00:40:34,500 --> 00:40:40,050
can do things like change<font color="#E5E5E5"> memory you can</font>

1136
00:40:36,810 --> 00:40:41,700
change various<font color="#CCCCCC"> ticks</font><font color="#E5E5E5"> for detection you</font>

1137
00:40:40,050 --> 00:40:44,130
can<font color="#CCCCCC"> rewrite micro code that's used for</font>

1138
00:40:41,700 --> 00:40:46,379
emulation<font color="#E5E5E5"> of various x86 or otherwise</font>

1139
00:40:44,130 --> 00:40:48,150
instructions<font color="#E5E5E5"> you can modify register</font>

1140
00:40:46,380 --> 00:40:51,570
<font color="#E5E5E5">state you can get the exact version</font>

1141
00:40:48,150 --> 00:40:53,490
<font color="#E5E5E5">number</font><font color="#CCCCCC"> of MP engine but</font><font color="#E5E5E5"> DLL this is all</font>

1142
00:40:51,570 --> 00:40:55,860
exposed to malware inside the engine

1143
00:40:53,490 --> 00:40:57,540
<font color="#E5E5E5">kind</font><font color="#CCCCCC"> of interesting and presumably just</font>

1144
00:40:55,860 --> 00:40:59,880
sort of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> debug feature I</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> to</font>

1145
00:40:57,540 --> 00:41:01,980
<font color="#E5E5E5">reverse engineered the 32 options that</font>

1146
00:40:59,880 --> 00:41:05,520
<font color="#E5E5E5">this function rides and you can see them</font>

1147
00:41:01,980 --> 00:41:07,530
<font color="#CCCCCC">here so</font><font color="#E5E5E5"> that concludes the</font><font color="#CCCCCC"> discussion of</font>

1148
00:41:05,520 --> 00:41:09,240
reverse<font color="#CCCCCC"> engineering</font><font color="#E5E5E5"> finally we're moving</font>

1149
00:41:07,530 --> 00:41:10,350
<font color="#E5E5E5">into vulnerability research we're going</font>

1150
00:41:09,240 --> 00:41:11,580
<font color="#E5E5E5">to start off by talking about some</font>

1151
00:41:10,350 --> 00:41:15,630
vulnerabilities inside defender that

1152
00:41:11,580 --> 00:41:18,029
Google project<font color="#E5E5E5"> 0 discovered so</font><font color="#CCCCCC"> Tabassum</font>

1153
00:41:15,630 --> 00:41:20,370
<font color="#CCCCCC">Rd at Google project</font><font color="#E5E5E5"> 0 was looking at</font>

1154
00:41:18,030 --> 00:41:21,750
the API call instruction<font color="#E5E5E5"> and found that</font>

1155
00:41:20,370 --> 00:41:24,089
he could<font color="#E5E5E5"> abuse that instruction by</font>

1156
00:41:21,750 --> 00:41:26,550
calling it<font color="#E5E5E5"> directly</font><font color="#CCCCCC"> from his malware</font><font color="#E5E5E5"> so</font>

1157
00:41:24,090 --> 00:41:28,020
he would<font color="#E5E5E5"> able maybe basically create</font>

1158
00:41:26,550 --> 00:41:30,150
malware with a read write<font color="#CCCCCC"> execute</font><font color="#E5E5E5"> text</font>

1159
00:41:28,020 --> 00:41:31,950
<font color="#E5E5E5">section and then dynamically generate</font>

1160
00:41:30,150 --> 00:41:33,390
the exact API call instruction<font color="#CCCCCC"> he wanted</font>

1161
00:41:31,950 --> 00:41:35,850
<font color="#E5E5E5">to call with some inline assembly here</font>

1162
00:41:33,390 --> 00:41:37,920
<font color="#E5E5E5">and then when that instruction is run</font>

1163
00:41:35,850 --> 00:41:42,360
over<font color="#E5E5E5"> the virtual CPU it generates a call</font>

1164
00:41:37,920 --> 00:41:44,340
<font color="#E5E5E5">into these native emulation routines so</font>

1165
00:41:42,360 --> 00:41:46,290
this was<font color="#CCCCCC"> Tabitha's trick for</font><font color="#E5E5E5"> getting</font>

1166
00:41:44,340 --> 00:41:47,880
into<font color="#E5E5E5"> those unique Anita emulation</font>

1167
00:41:46,290 --> 00:41:50,850
routines was just to generate the API

1168
00:41:47,880 --> 00:41:54,780
construction with the<font color="#CCCCCC"> the write for</font><font color="#E5E5E5"> byte</font>

1169
00:41:50,850 --> 00:41:56,339
<font color="#CCCCCC">CRC</font><font color="#E5E5E5"> that's required</font><font color="#CCCCCC"> to reach them so</font>

1170
00:41:54,780 --> 00:41:57,630
then<font color="#CCCCCC"> Tavis looked at the NT control</font>

1171
00:41:56,340 --> 00:41:59,040
channel interface which is<font color="#E5E5E5"> going to that</font>

1172
00:41:57,630 --> 00:41:59,850
sort<font color="#E5E5E5"> of backdoor administration</font>

1173
00:41:59,040 --> 00:42:01,380
interface

1174
00:41:59,850 --> 00:42:03,690
<font color="#E5E5E5">seems like for developers to minister of</font>

1175
00:42:01,380 --> 00:42:05,910
the engine<font color="#CCCCCC"> and found that</font><font color="#E5E5E5"> when he used</font>

1176
00:42:03,690 --> 00:42:09,510
option<font color="#CCCCCC"> 12 which is to load in micro code</font>

1177
00:42:05,910 --> 00:42:11,129
<font color="#E5E5E5">there was this loop and then the count</font>

1178
00:42:09,510 --> 00:42:12,870
which is<font color="#CCCCCC"> the number of</font><font color="#E5E5E5"> entries provided</font>

1179
00:42:11,130 --> 00:42:16,680
in this<font color="#E5E5E5"> structure with new micro code</font>

1180
00:42:12,870 --> 00:42:18,750
<font color="#CCCCCC">it's user controlled</font><font color="#E5E5E5"> and you can pass it</font>

1181
00:42:16,680 --> 00:42:20,910
an arbitrary<font color="#CCCCCC"> amount of new micro code</font>

1182
00:42:18,750 --> 00:42:22,950
and you only have a statically<font color="#E5E5E5"> allocated</font>

1183
00:42:20,910 --> 00:42:25,100
buffer to store that new micro code<font color="#E5E5E5"> so</font>

1184
00:42:22,950 --> 00:42:27,210
you<font color="#E5E5E5"> get a nice linear buffer overflow</font>

1185
00:42:25,100 --> 00:42:29,670
Microsoft<font color="#E5E5E5"> patch this with a check that</font>

1186
00:42:27,210 --> 00:42:33,270
only<font color="#CCCCCC"> 1000 entries are passed in for this</font>

1187
00:42:29,670 --> 00:42:36,270
microcode interface also<font color="#E5E5E5"> Tavis looked at</font>

1188
00:42:33,270 --> 00:42:37,680
the<font color="#E5E5E5"> VFS subsystem and found</font><font color="#CCCCCC"> that the VFS</font>

1189
00:42:36,270 --> 00:42:40,110
<font color="#CCCCCC">write</font><font color="#E5E5E5"> function which is a lower level</font>

1190
00:42:37,680 --> 00:42:41,879
API below<font color="#CCCCCC"> NT right file providing</font>

1191
00:42:40,110 --> 00:42:45,420
emulation and access<font color="#E5E5E5"> to the virtual file</font>

1192
00:42:41,880 --> 00:42:49,980
system<font color="#CCCCCC"> if you began by writing</font><font color="#E5E5E5"> to a file</font>

1193
00:42:45,420 --> 00:42:53,550
<font color="#E5E5E5">with nothing with</font><font color="#CCCCCC"> zero and</font><font color="#E5E5E5"> basically you</font>

1194
00:42:49,980 --> 00:42:56,070
could<font color="#E5E5E5"> have a heap allocation inside the</font>

1195
00:42:53,550 --> 00:42:58,350
<font color="#CCCCCC">real engine though basically</font><font color="#E5E5E5"> be like</font>

1196
00:42:56,070 --> 00:42:58,980
empty there and then when you do another

1197
00:42:58,350 --> 00:43:02,580
right

1198
00:42:58,980 --> 00:43:04,320
you could have an arbitrary<font color="#E5E5E5"> heap write</font>

1199
00:43:02,580 --> 00:43:06,150
like a<font color="#E5E5E5"> linear overflow and heap very bad</font>

1200
00:43:04,320 --> 00:43:07,980
<font color="#CCCCCC">learner ability very</font><font color="#E5E5E5"> what about it's bit</font>

1201
00:43:06,150 --> 00:43:09,480
easy to exploit it seems like you could

1202
00:43:07,980 --> 00:43:13,470
also get arbitrary read as well in the

1203
00:43:09,480 --> 00:43:16,500
hey Bo<font color="#E5E5E5"> so this was very</font><font color="#CCCCCC"> bad that</font><font color="#E5E5E5"> you</font>

1204
00:43:13,470 --> 00:43:21,379
could reach this internal API from

1205
00:43:16,500 --> 00:43:23,220
malware inside the emulator so then

1206
00:43:21,380 --> 00:43:25,680
Microsoft<font color="#E5E5E5"> perhaps these vulnerabilities</font>

1207
00:43:23,220 --> 00:43:26,939
out<font color="#CCCCCC"> and I started</font><font color="#E5E5E5"> looking at the API</font>

1208
00:43:25,680 --> 00:43:29,069
call instruction<font color="#E5E5E5"> in the mechanism</font>

1209
00:43:26,940 --> 00:43:31,620
<font color="#CCCCCC">provided I was</font><font color="#E5E5E5"> actually able to get</font>

1210
00:43:29,070 --> 00:43:33,660
around<font color="#CCCCCC"> some of the mitigation of</font><font color="#E5E5E5"> the</font>

1211
00:43:31,620 --> 00:43:36,540
Microsoft added so<font color="#CCCCCC"> Microsoft added this</font>

1212
00:43:33,660 --> 00:43:39,060
check to<font color="#E5E5E5"> is the DLL page</font><font color="#CCCCCC"> which is used</font>

1213
00:43:36,540 --> 00:43:41,610
to whatever the API call instruction<font color="#CCCCCC"> has</font>

1214
00:43:39,060 --> 00:43:43,710
invoked<font color="#CCCCCC"> its gonna</font><font color="#E5E5E5"> check is</font><font color="#CCCCCC"> that API call</font>

1215
00:43:41,610 --> 00:43:45,120
instruction coming from the malware text

1216
00:43:43,710 --> 00:43:49,260
section<font color="#E5E5E5"> or or is it</font><font color="#CCCCCC"> coming from</font><font color="#E5E5E5"> a video</font>

1217
00:43:45,120 --> 00:43:50,580
<font color="#CCCCCC">L and this prevents you from using</font><font color="#E5E5E5"> to</font>

1218
00:43:49,260 --> 00:43:54,450
<font color="#CCCCCC">have this</font><font color="#E5E5E5"> trick of just generating the</font>

1219
00:43:50,580 --> 00:43:56,160
API construction yourself so because<font color="#E5E5E5"> I</font>

1220
00:43:54,450 --> 00:43:57,990
dumped at the<font color="#CCCCCC"> vdl LS I was able to go</font>

1221
00:43:56,160 --> 00:44:00,569
through<font color="#CCCCCC"> them and</font><font color="#E5E5E5"> find the API call stubs</font>

1222
00:43:57,990 --> 00:44:02,580
inside the<font color="#E5E5E5"> videos that provide access</font><font color="#CCCCCC"> to</font>

1223
00:44:00,570 --> 00:44:03,960
these api's<font color="#CCCCCC"> I'm but just bouncing</font><font color="#E5E5E5"> off</font>

1224
00:44:02,580 --> 00:44:05,970
the my memory I could again open this

1225
00:44:03,960 --> 00:44:07,050
attack surface<font color="#E5E5E5"> up</font><font color="#CCCCCC"> I did</font><font color="#E5E5E5"> report this to</font>

1226
00:44:05,970 --> 00:44:09,000
Microsoft when they said it's not<font color="#E5E5E5"> a</font>

1227
00:44:07,050 --> 00:44:10,650
trust boundaries kind<font color="#E5E5E5"> of a common</font>

1228
00:44:09,000 --> 00:44:12,200
response<font color="#E5E5E5"> to Microsoft people reported</font>

1229
00:44:10,650 --> 00:44:13,579
vulnerabilities to<font color="#E5E5E5"> them that</font>

1230
00:44:12,200 --> 00:44:16,759
<font color="#E5E5E5">are quite</font><font color="#CCCCCC"> saying</font><font color="#E5E5E5"> exact memory</font><font color="#CCCCCC"> corruption</font>

1231
00:44:13,579 --> 00:44:18,470
<font color="#E5E5E5">but are sort of logical flaw so you'll</font>

1232
00:44:16,760 --> 00:44:21,589
see an example<font color="#CCCCCC"> here we</font><font color="#E5E5E5"> can call out 50</font>

1233
00:44:18,470 --> 00:44:23,419
<font color="#CCCCCC">bucks during a by simply</font><font color="#E5E5E5"> finding the</font>

1234
00:44:21,589 --> 00:44:25,070
offset inside<font color="#CCCCCC"> perimeter to where the API</font>

1235
00:44:23,420 --> 00:44:27,640
construction<font color="#CCCCCC"> calpro debug string a is</font>

1236
00:44:25,070 --> 00:44:31,460
and then<font color="#E5E5E5"> just sort of bouncing off</font><font color="#CCCCCC"> that</font>

1237
00:44:27,640 --> 00:44:33,560
<font color="#E5E5E5">with this particular offset and we can</font>

1238
00:44:31,460 --> 00:44:35,150
also open these up these bad debug

1239
00:44:33,560 --> 00:44:37,490
functions like<font color="#E5E5E5"> entry control channel</font>

1240
00:44:35,150 --> 00:44:40,280
again finding<font color="#E5E5E5"> the offset to call that</font>

1241
00:44:37,490 --> 00:44:41,959
function and we<font color="#CCCCCC"> can again</font><font color="#E5E5E5"> call</font><font color="#CCCCCC"> in to</font>

1242
00:44:40,280 --> 00:44:44,900
that<font color="#E5E5E5"> effect or administration interface</font>

1243
00:44:41,960 --> 00:44:46,849
from<font color="#E5E5E5"> inside the emulator</font><font color="#CCCCCC"> this seems a</font>

1244
00:44:44,900 --> 00:44:48,349
<font color="#E5E5E5">pretty systematic sort of design thing</font>

1245
00:44:46,849 --> 00:44:50,900
that you have<font color="#E5E5E5"> to have these</font><font color="#CCCCCC"> API call</font>

1246
00:44:48,349 --> 00:44:53,150
stubs<font color="#E5E5E5"> exposed within the emulator it</font>

1247
00:44:50,900 --> 00:44:55,190
seems fairly hard to patch out of<font color="#CCCCCC"> one or</font>

1248
00:44:53,150 --> 00:44:58,310
<font color="#CCCCCC">Billie like this</font><font color="#E5E5E5"> I'm gonna skip over the</font>

1249
00:44:55,190 --> 00:45:00,020
quick demo<font color="#E5E5E5"> of that</font><font color="#CCCCCC"> but basically I think</font>

1250
00:44:58,310 --> 00:45:02,200
this you<font color="#E5E5E5"> know it's not quite</font><font color="#CCCCCC"> a memory</font>

1251
00:45:00,020 --> 00:45:04,220
corruption<font color="#E5E5E5"> but does open us up to</font>

1252
00:45:02,200 --> 00:45:06,560
controlling<font color="#E5E5E5"> and manipulating the engine</font>

1253
00:45:04,220 --> 00:45:08,660
<font color="#E5E5E5">and also lets us</font><font color="#CCCCCC"> access an attack circle</font>

1254
00:45:06,560 --> 00:45:10,190
<font color="#CCCCCC">a known history of vulnerabilities as</font>

1255
00:45:08,660 --> 00:45:11,720
<font color="#E5E5E5">Google</font><font color="#CCCCCC"> project</font><font color="#E5E5E5"> zero is demonstrated and</font>

1256
00:45:10,190 --> 00:45:13,190
you can do all sorts<font color="#E5E5E5"> of weird debug</font>

1257
00:45:11,720 --> 00:45:15,799
interface things with empty control

1258
00:45:13,190 --> 00:45:18,470
<font color="#E5E5E5">channel finally</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> wanna talk a little</font>

1259
00:45:15,800 --> 00:45:20,930
bit about fuzzing<font color="#E5E5E5"> so I was able to build</font>

1260
00:45:18,470 --> 00:45:23,299
<font color="#E5E5E5">a customized</font><font color="#CCCCCC"> buzzer to fuzz the</font><font color="#E5E5E5"> Windows</font>

1261
00:45:20,930 --> 00:45:24,440
Defender<font color="#E5E5E5"> need of</font><font color="#CCCCCC"> emulated api's and this</font>

1262
00:45:23,300 --> 00:45:25,790
is sort of the attack surface<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font>

1263
00:45:24,440 --> 00:45:27,619
engine if you can hit<font color="#E5E5E5"> those native API</font>

1264
00:45:25,790 --> 00:45:29,180
so we're inside the emulator<font color="#E5E5E5"> you could</font>

1265
00:45:27,619 --> 00:45:31,160
break out<font color="#CCCCCC"> of it because this is native</font>

1266
00:45:29,180 --> 00:45:33,470
<font color="#E5E5E5">emulation of</font><font color="#CCCCCC"> these functions this</font><font color="#E5E5E5"> is</font>

1267
00:45:31,160 --> 00:45:37,490
<font color="#E5E5E5">akin to doing a</font><font color="#CCCCCC"> probe esque by hitting a</font>

1268
00:45:33,470 --> 00:45:39,560
Windows kernel syscall so I took<font color="#CCCCCC"> MWR</font>

1269
00:45:37,490 --> 00:45:41,270
labs as OSX<font color="#CCCCCC"> assist called fuzzer which</font>

1270
00:45:39,560 --> 00:45:43,130
just generates some values this is<font color="#E5E5E5"> not</font>

1271
00:45:41,270 --> 00:45:44,750
anything fancy<font color="#E5E5E5"> like</font><font color="#CCCCCC"> AFL no coverage no</font>

1272
00:45:43,130 --> 00:45:47,660
instrumentation just<font color="#CCCCCC"> throwing random</font>

1273
00:45:44,750 --> 00:45:49,880
values at the<font color="#E5E5E5"> fender and</font><font color="#CCCCCC"> then I was able</font>

1274
00:45:47,660 --> 00:45:51,770
to do things<font color="#CCCCCC"> like fuzz NT write file I</font>

1275
00:45:49,880 --> 00:45:53,780
posed a vulnerable version of NT<font color="#CCCCCC"> write</font>

1276
00:45:51,770 --> 00:45:55,819
file for an older<font color="#E5E5E5"> buildup offender which</font>

1277
00:45:53,780 --> 00:45:58,160
<font color="#CCCCCC">Kavis or</font><font color="#E5E5E5"> MIDI had his</font><font color="#CCCCCC"> VFS</font><font color="#E5E5E5"> write function</font>

1278
00:45:55,819 --> 00:46:00,410
and his vulnerability there<font color="#E5E5E5"> and I knew</font>

1279
00:45:58,160 --> 00:46:02,598
that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Tabitha's parameters can be</font>

1280
00:46:00,410 --> 00:46:04,490
<font color="#CCCCCC">write file were not</font><font color="#E5E5E5"> or rather</font><font color="#CCCCCC"> to VFS</font>

1281
00:46:02,599 --> 00:46:06,650
<font color="#CCCCCC">write would</font><font color="#E5E5E5"> not be accepted by NT write</font>

1282
00:46:04,490 --> 00:46:08,060
file<font color="#E5E5E5"> but</font><font color="#CCCCCC"> I fuzz the</font><font color="#E5E5E5"> function</font><font color="#CCCCCC"> word who</font>

1283
00:46:06,650 --> 00:46:09,849
see if I could reach<font color="#CCCCCC"> this the same</font>

1284
00:46:08,060 --> 00:46:12,770
vulnerable<font color="#E5E5E5"> code</font><font color="#CCCCCC"> path</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> VFS write file</font>

1285
00:46:09,849 --> 00:46:13,940
through NT write file and I<font color="#E5E5E5"> was able to</font>

1286
00:46:12,770 --> 00:46:16,700
<font color="#E5E5E5">do that</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> about seven minutes</font><font color="#CCCCCC"> of</font>

1287
00:46:13,940 --> 00:46:19,970
fuzzing<font color="#E5E5E5"> around 8,000</font><font color="#CCCCCC"> execs a second so</font>

1288
00:46:16,700 --> 00:46:24,580
let<font color="#E5E5E5"> me just quickly demo that so this is</font>

1289
00:46:19,970 --> 00:46:26,859
<font color="#E5E5E5">sort of running</font><font color="#CCCCCC"> that fuzzer</font><font color="#E5E5E5"> and</font>

1290
00:46:24,580 --> 00:46:28,750
throwing these random values at these

1291
00:46:26,860 --> 00:46:30,430
api's over and over again<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font>

1292
00:46:28,750 --> 00:46:32,260
take a minute<font color="#CCCCCC"> to initialize and here</font>

1293
00:46:30,430 --> 00:46:33,940
we're just<font color="#E5E5E5"> throwing indefinitely it'll</font>

1294
00:46:32,260 --> 00:46:35,320
just keep running<font color="#E5E5E5"> and</font><font color="#CCCCCC"> running</font><font color="#E5E5E5"> throwing</font>

1295
00:46:33,940 --> 00:46:38,230
these random values the PC<font color="#E5E5E5"> API so</font>

1296
00:46:35,320 --> 00:46:44,380
<font color="#E5E5E5">potentially we</font><font color="#CCCCCC"> find a crash</font><font color="#E5E5E5"> if we</font><font color="#CCCCCC"> hit</font>

1297
00:46:38,230 --> 00:46:47,770
<font color="#CCCCCC">one of</font><font color="#E5E5E5"> the native api's so it was a demo</font>

1298
00:46:44,380 --> 00:46:50,140
<font color="#CCCCCC">now wrapping up</font><font color="#E5E5E5"> with the</font><font color="#CCCCCC"> conclusion we</font>

1299
00:46:47,770 --> 00:46:53,290
<font color="#CCCCCC">cover tool and implementation CPU</font>

1300
00:46:50,140 --> 00:46:55,150
dynamic translation basics for x86<font color="#E5E5E5"> a bit</font>

1301
00:46:53,290 --> 00:46:56,529
about the windows using more environment

1302
00:46:55,150 --> 00:46:58,900
and a bit of owner ability<font color="#CCCCCC"> researching</font>

1303
00:46:56,530 --> 00:47:00,940
how we could fuzz this engine<font color="#E5E5E5"> but</font><font color="#CCCCCC"> does a</font>

1304
00:46:58,900 --> 00:47:02,710
whole<font color="#CCCCCC"> lot we didn't cover</font><font color="#E5E5E5"> the fender is</font>

1305
00:47:00,940 --> 00:47:03,850
absolutely massive<font color="#E5E5E5"> and there's a whole</font>

1306
00:47:02,710 --> 00:47:07,000
<font color="#E5E5E5">lot even just in the emulator we</font>

1307
00:47:03,850 --> 00:47:08,380
couldn't cover in<font color="#CCCCCC"> just an hour</font><font color="#E5E5E5"> today in</font>

1308
00:47:07,000 --> 00:47:10,420
addition to the emulator inside<font color="#E5E5E5"> the</font>

1309
00:47:08,380 --> 00:47:13,180
engine<font color="#E5E5E5"> we have things</font><font color="#CCCCCC"> like uh knackers</font>

1310
00:47:10,420 --> 00:47:15,430
parsers<font color="#E5E5E5"> a JavaScript engine</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> I</font>

1311
00:47:13,180 --> 00:47:17,560
talked<font color="#CCCCCC"> about our recon Brussels other</font>

1312
00:47:15,430 --> 00:47:19,990
scanning engines and a dotnet engine

1313
00:47:17,560 --> 00:47:22,630
<font color="#E5E5E5">this is a whole lot</font><font color="#CCCCCC"> more tax surface 12</font>

1314
00:47:19,990 --> 00:47:25,930
mega bytes of code to<font color="#CCCCCC"> look at</font><font color="#E5E5E5"> there's</font>

1315
00:47:22,630 --> 00:47:28,450
also a low<font color="#CCCCCC"> engine I want to say broadly</font>

1316
00:47:25,930 --> 00:47:29,379
<font color="#E5E5E5">people love to talk about</font><font color="#CCCCCC"> AVS and</font>

1317
00:47:28,450 --> 00:47:31,720
vulnerabilities that may<font color="#E5E5E5"> manifest</font>

1318
00:47:29,380 --> 00:47:33,070
themselves inside<font color="#E5E5E5"> antivirus software but</font>

1319
00:47:31,720 --> 00:47:36,129
there's not<font color="#E5E5E5"> at all a lot of ground truth</font>

1320
00:47:33,070 --> 00:47:37,600
at<font color="#E5E5E5"> all about</font><font color="#CCCCCC"> a visa bout emulation</font>

1321
00:47:36,130 --> 00:47:41,170
systems<font color="#CCCCCC"> in Navis or really any other</font>

1322
00:47:37,600 --> 00:47:42,700
facets of<font color="#CCCCCC"> a DS and there's there needs</font>

1323
00:47:41,170 --> 00:47:43,960
to be more research<font color="#CCCCCC"> or Navis I think</font>

1324
00:47:42,700 --> 00:47:45,549
before<font color="#CCCCCC"> people</font><font color="#E5E5E5"> make these broad claims</font>

1325
00:47:43,960 --> 00:47:47,290
<font color="#CCCCCC">about how they work</font><font color="#E5E5E5"> don't</font><font color="#CCCCCC"> get</font><font color="#E5E5E5"> me wrong</font>

1326
00:47:45,550 --> 00:47:48,520
<font color="#CCCCCC">AVS</font><font color="#E5E5E5"> have plenty of attack surface</font>

1327
00:47:47,290 --> 00:47:50,230
there's plenty of vulnerability<font color="#CCCCCC"> into</font>

1328
00:47:48,520 --> 00:47:51,880
your systems<font color="#E5E5E5"> what people love to sort of</font>

1329
00:47:50,230 --> 00:47:52,900
hand wave at that and<font color="#CCCCCC"> just say well hey</font>

1330
00:47:51,880 --> 00:47:54,250
these make you vulnerable

1331
00:47:52,900 --> 00:47:55,930
<font color="#CCCCCC">Eevee's let you get hacked</font><font color="#E5E5E5"> without</font>

1332
00:47:54,250 --> 00:47:58,030
actually<font color="#CCCCCC"> citing any research or showing</font>

1333
00:47:55,930 --> 00:47:59,950
<font color="#E5E5E5">that so</font><font color="#CCCCCC"> i hope more people would reverse</font>

1334
00:47:58,030 --> 00:48:01,180
abies<font color="#E5E5E5"> because right now there's just not</font>

1335
00:47:59,950 --> 00:48:02,859
a lot<font color="#E5E5E5"> of publications about them and I</font>

1336
00:48:01,180 --> 00:48:04,870
<font color="#E5E5E5">hope I've inspired people to do that and</font>

1337
00:48:02,860 --> 00:48:06,040
<font color="#CCCCCC">shown</font><font color="#E5E5E5"> that it is possible</font><font color="#CCCCCC"> if not it is</font>

1338
00:48:04,870 --> 00:48:08,470
it is rather<font color="#E5E5E5"> difficult and</font><font color="#CCCCCC"> time</font>

1339
00:48:06,040 --> 00:48:11,500
<font color="#CCCCCC">consuming I'm</font><font color="#E5E5E5"> gonna release some code</font>

1340
00:48:08,470 --> 00:48:12,819
later today<font color="#CCCCCC"> or later this week</font><font color="#E5E5E5"> sharing</font>

1341
00:48:11,500 --> 00:48:14,350
some<font color="#E5E5E5"> of the instrumentation I built for</font>

1342
00:48:12,820 --> 00:48:16,930
<font color="#CCCCCC">a defender such as</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> LP debug string a</font>

1343
00:48:14,350 --> 00:48:18,130
hooking and malware binary which I have

1344
00:48:16,930 --> 00:48:19,569
<font color="#CCCCCC">linker settings and the Pilar</font>

1345
00:48:18,130 --> 00:48:20,740
optimizations<font color="#CCCCCC"> that make it bit</font>

1346
00:48:19,570 --> 00:48:22,990
consistently emulated inside the

1347
00:48:20,740 --> 00:48:24,939
emulator I've also got an article<font color="#E5E5E5"> coming</font>

1348
00:48:22,990 --> 00:48:28,060
out<font color="#CCCCCC"> of pocket GT phone</font><font color="#E5E5E5"> 19 describing</font>

1349
00:48:24,940 --> 00:48:30,310
more of<font color="#E5E5E5"> this detail and that concludes</font>

1350
00:48:28,060 --> 00:48:32,440
<font color="#E5E5E5">my</font><font color="#CCCCCC"> presentation I'm going</font><font color="#E5E5E5"> release slides</font>

1351
00:48:30,310 --> 00:48:33,970
<font color="#CCCCCC">online I have over 200</font><font color="#E5E5E5"> slides and</font>

1352
00:48:32,440 --> 00:48:35,320
releasing with<font color="#E5E5E5"> a ton more information</font>

1353
00:48:33,970 --> 00:48:37,149
because there's way too much that I

1354
00:48:35,320 --> 00:48:38,410
<font color="#CCCCCC">could just</font><font color="#E5E5E5"> cover in</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> 15 minutes</font>

1355
00:48:37,150 --> 00:48:40,690
so I hope<font color="#E5E5E5"> you've enjoyed</font><font color="#CCCCCC"> the</font>

1356
00:48:38,410 --> 00:48:42,129
presentation<font color="#CCCCCC"> I've opened EMS on Twitter</font>

1357
00:48:40,690 --> 00:48:43,240
if<font color="#E5E5E5"> you have any questions and I'll I</font>

1358
00:48:42,130 --> 00:48:44,440
guess I<font color="#E5E5E5"> don't have much time to</font><font color="#CCCCCC"> take</font>

1359
00:48:43,240 --> 00:48:47,250
<font color="#E5E5E5">questions but I'll be happy to talk to</font>

1360
00:48:44,440 --> 00:48:49,559
<font color="#E5E5E5">people</font><font color="#CCCCCC"> after one-on-one</font><font color="#E5E5E5"> thanks very much</font>

1361
00:48:47,250 --> 00:48:49,559
[Applause]

