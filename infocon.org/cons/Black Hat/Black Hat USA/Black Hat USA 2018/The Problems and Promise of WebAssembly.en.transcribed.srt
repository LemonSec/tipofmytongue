1
00:00:00,000 --> 00:00:05,810
hi everyone<font color="#CCCCCC"> thanks so much</font><font color="#E5E5E5"> for coming to</font>

2
00:00:03,030 --> 00:00:08,580
this very<font color="#CCCCCC"> early morning presentation</font>

3
00:00:05,810 --> 00:00:11,399
today<font color="#E5E5E5"> I gonna</font><font color="#CCCCCC"> give a talk entitled</font><font color="#E5E5E5"> the</font>

4
00:00:08,580 --> 00:00:13,830
problems<font color="#E5E5E5"> and promise of</font><font color="#CCCCCC"> web assembly I'm</font>

5
00:00:11,400 --> 00:00:16,079
<font color="#E5E5E5">madly</font><font color="#CCCCCC"> silvana bitch I'm on</font><font color="#E5E5E5"> project zero</font>

6
00:00:13,830 --> 00:00:18,740
at Google and you might remember<font color="#E5E5E5"> me from</font>

7
00:00:16,079 --> 00:00:21,599
<font color="#E5E5E5">previous presentations about JavaScript</font>

8
00:00:18,740 --> 00:00:23,490
<font color="#E5E5E5">well I've been taking a bit</font><font color="#CCCCCC"> of a break</font>

9
00:00:21,600 --> 00:00:25,980
from<font color="#E5E5E5"> JavaScript</font><font color="#CCCCCC"> and looking at the other</font>

10
00:00:23,490 --> 00:00:27,598
<font color="#CCCCCC">features of the browser</font><font color="#E5E5E5"> and one thing I</font>

11
00:00:25,980 --> 00:00:30,570
looked at that I<font color="#CCCCCC"> thought was</font><font color="#E5E5E5"> really</font>

12
00:00:27,599 --> 00:00:32,610
<font color="#CCCCCC">interesting was web assembly</font><font color="#E5E5E5"> so today</font>

13
00:00:30,570 --> 00:00:34,620
I'm gonna<font color="#E5E5E5"> share with</font><font color="#CCCCCC"> you a bit of</font><font color="#E5E5E5"> what I</font>

14
00:00:32,610 --> 00:00:37,980
<font color="#E5E5E5">learned about web assembly and the sort</font>

15
00:00:34,620 --> 00:00:41,160
<font color="#E5E5E5">of bugs I found so what is web assembly</font>

16
00:00:37,980 --> 00:00:44,069
<font color="#E5E5E5">well it's a format for</font><font color="#CCCCCC"> writing it</font><font color="#E5E5E5"> was</font>

17
00:00:41,160 --> 00:00:46,019
<font color="#E5E5E5">assembly code for the web</font><font color="#CCCCCC"> basically if</font>

18
00:00:44,070 --> 00:00:48,300
<font color="#E5E5E5">you have JavaScript and</font><font color="#CCCCCC"> you have</font>

19
00:00:46,020 --> 00:00:50,789
<font color="#E5E5E5">something that</font><font color="#CCCCCC"> is really masse in that</font>

20
00:00:48,300 --> 00:00:53,218
<font color="#E5E5E5">JavaScript you can abstract that out and</font>

21
00:00:50,789 --> 00:00:55,379
put<font color="#E5E5E5"> it into web assembly and it'll run</font>

22
00:00:53,219 --> 00:00:57,239
in an<font color="#E5E5E5"> interpreter or</font><font color="#CCCCCC"> a JIT</font><font color="#E5E5E5"> that is</font>

23
00:00:55,379 --> 00:00:59,579
typically much faster than<font color="#CCCCCC"> javascript</font>

24
00:00:57,239 --> 00:01:01,890
<font color="#E5E5E5">because it doesn't do things like type</font>

25
00:00:59,579 --> 00:01:04,920
checking and that sort of thing<font color="#E5E5E5"> because</font>

26
00:01:01,890 --> 00:01:07,740
<font color="#E5E5E5">it has more limited features it was</font>

27
00:01:04,920 --> 00:01:09,540
motivated<font color="#CCCCCC"> for by two reasons one was a</font>

28
00:01:07,740 --> 00:01:11,939
need<font color="#E5E5E5"> for greater efficiency</font><font color="#CCCCCC"> in the</font>

29
00:01:09,540 --> 00:01:15,270
browser<font color="#E5E5E5"> and the other was a need</font><font color="#CCCCCC"> for a</font>

30
00:01:11,939 --> 00:01:17,250
greater safety<font color="#E5E5E5"> some people hope that web</font>

31
00:01:15,270 --> 00:01:19,200
assembly will become a good<font color="#CCCCCC"> alternative</font>

32
00:01:17,250 --> 00:01:22,560
<font color="#CCCCCC">to running a native application on your</font>

33
00:01:19,200 --> 00:01:25,200
desktop there's a few<font color="#E5E5E5"> ways you</font><font color="#CCCCCC"> can write</font>

34
00:01:22,560 --> 00:01:27,090
<font color="#E5E5E5">code and web assembly what is that there</font>

35
00:01:25,200 --> 00:01:28,310
is a web assembly assembler so you can

36
00:01:27,090 --> 00:01:31,140
just write instruction by instruction

37
00:01:28,310 --> 00:01:33,270
and then assemble it but the main way

38
00:01:31,140 --> 00:01:36,479
it's<font color="#E5E5E5"> meant to be used is by writing</font>

39
00:01:33,270 --> 00:01:38,460
<font color="#CCCCCC">native code and compiling it there's a</font>

40
00:01:36,479 --> 00:01:39,689
<font color="#E5E5E5">limitations to compile ability though</font>

41
00:01:38,460 --> 00:01:42,990
it's<font color="#E5E5E5"> getting better every</font><font color="#CCCCCC"> day</font>

42
00:01:39,689 --> 00:01:45,600
C and C++ compile pretty well and<font color="#CCCCCC"> so do</font>

43
00:01:42,990 --> 00:01:47,939
some<font color="#CCCCCC"> other languages and then some like</font>

44
00:01:45,600 --> 00:01:49,890
Java which have garbage collection<font color="#E5E5E5"> are</font>

45
00:01:47,939 --> 00:01:52,589
quite far away<font color="#E5E5E5"> from being</font><font color="#CCCCCC"> able to</font>

46
00:01:49,890 --> 00:01:55,049
<font color="#E5E5E5">compile well in web assembly but the</font>

47
00:01:52,590 --> 00:01:57,329
<font color="#CCCCCC">long term goal for a web assembly is to</font>

48
00:01:55,049 --> 00:01:59,399
be able<font color="#E5E5E5"> to basically compile any code</font>

49
00:01:57,329 --> 00:02:03,750
<font color="#CCCCCC">written in any language to run on the</font>

50
00:01:59,399 --> 00:02:05,969
web<font color="#E5E5E5"> it's wc3 standard and I'd</font><font color="#CCCCCC"> actually</font>

51
00:02:03,750 --> 00:02:08,190
say it's quite<font color="#CCCCCC"> an ambitious standard not</font>

52
00:02:05,969 --> 00:02:10,679
only<font color="#CCCCCC"> do they want</font><font color="#E5E5E5"> to make the web you</font>

53
00:02:08,190 --> 00:02:12,550
know safer and faster<font color="#CCCCCC"> they also want to</font>

54
00:02:10,679 --> 00:02:14,830
compile every language

55
00:02:12,550 --> 00:02:17,530
<font color="#CCCCCC">are also</font><font color="#E5E5E5"> thinking about applications off</font>

56
00:02:14,830 --> 00:02:19,030
of the web to<font color="#E5E5E5"> get one example of this</font>

57
00:02:17,530 --> 00:02:21,100
<font color="#E5E5E5">and they're thinking of moving the</font>

58
00:02:19,030 --> 00:02:23,860
etherium interpreter to<font color="#E5E5E5"> web assembly and</font>

59
00:02:21,100 --> 00:02:25,269
that's just one of<font color="#E5E5E5"> the one example of</font>

60
00:02:23,860 --> 00:02:29,140
the sort<font color="#CCCCCC"> of applications that web</font>

61
00:02:25,270 --> 00:02:30,400
assembly could have in the future<font color="#E5E5E5"> so</font>

62
00:02:29,140 --> 00:02:32,890
when you think<font color="#CCCCCC"> about something like web</font>

63
00:02:30,400 --> 00:02:35,140
assembly a language that<font color="#E5E5E5"> is written to</font>

64
00:02:32,890 --> 00:02:38,290
implement stuff on the web<font color="#E5E5E5"> there is kind</font>

65
00:02:35,140 --> 00:02:39,850
<font color="#CCCCCC">of</font><font color="#E5E5E5"> two possible problems one is that web</font>

66
00:02:38,290 --> 00:02:42,579
assembly engines<font color="#E5E5E5"> aren't implemented</font>

67
00:02:39,850 --> 00:02:44,500
securely<font color="#E5E5E5"> that</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> malicious developer can</font>

68
00:02:42,580 --> 00:02:46,270
write web assembly that violates the

69
00:02:44,500 --> 00:02:48,520
security<font color="#E5E5E5"> properties of the browser</font><font color="#CCCCCC"> and</font>

70
00:02:46,270 --> 00:02:51,280
can compromise the browser<font color="#E5E5E5"> and then</font>

71
00:02:48,520 --> 00:02:53,560
<font color="#E5E5E5">there's a second problem where web</font>

72
00:02:51,280 --> 00:02:55,150
assembly itself<font color="#CCCCCC"> web</font><font color="#E5E5E5"> assembly application</font>

73
00:02:53,560 --> 00:02:57,550
isn't<font color="#E5E5E5"> written securely and</font><font color="#CCCCCC"> that</font>

74
00:02:55,150 --> 00:03:00,010
application<font color="#CCCCCC"> can be</font><font color="#E5E5E5"> compromised</font><font color="#CCCCCC"> I am</font>

75
00:02:57,550 --> 00:03:01,750
talking<font color="#CCCCCC"> about this problem today the</font>

76
00:03:00,010 --> 00:03:04,000
first one<font color="#E5E5E5"> and I'm not talking about the</font>

77
00:03:01,750 --> 00:03:06,400
second one there is actually a talk

78
00:03:04,000 --> 00:03:09,100
today<font color="#E5E5E5"> at 12:10 about the second issue</font>

79
00:03:06,400 --> 00:03:10,690
which I recommend<font color="#E5E5E5"> you attend if you're</font>

80
00:03:09,100 --> 00:03:15,130
interested in learning how<font color="#E5E5E5"> to write</font>

81
00:03:10,690 --> 00:03:17,050
actual<font color="#E5E5E5"> web assembly securely so to start</font>

82
00:03:15,130 --> 00:03:19,750
off<font color="#E5E5E5"> from a technical perspective what is</font>

83
00:03:17,050 --> 00:03:21,760
web assembly well it's a binary<font color="#E5E5E5"> format</font>

84
00:03:19,750 --> 00:03:24,459
<font color="#CCCCCC">and since right now</font><font color="#E5E5E5"> it mostly gets</font>

85
00:03:21,760 --> 00:03:26,350
loaded<font color="#CCCCCC"> in JavaScript</font><font color="#E5E5E5"> you create a</font><font color="#CCCCCC"> binary</font>

86
00:03:24,459 --> 00:03:28,150
and there's a keyword fetch you can use

87
00:03:26,350 --> 00:03:30,370
to put it into an<font color="#CCCCCC"> array</font><font color="#E5E5E5"> buffer or a</font>

88
00:03:28,150 --> 00:03:32,350
typed<font color="#E5E5E5"> array in JavaScript</font><font color="#CCCCCC"> or you can</font>

89
00:03:30,370 --> 00:03:36,010
just put it in byte by byte<font color="#E5E5E5"> like I did</font>

90
00:03:32,350 --> 00:03:38,530
here and what<font color="#E5E5E5"> does this format actually</font>

91
00:03:36,010 --> 00:03:40,299
look like<font color="#E5E5E5"> well like all good binary</font>

92
00:03:38,530 --> 00:03:43,390
formats<font color="#CCCCCC"> it starts</font><font color="#E5E5E5"> with a magic number</font>

93
00:03:40,300 --> 00:03:45,640
<font color="#E5E5E5">and a</font><font color="#CCCCCC"> version and then</font><font color="#E5E5E5"> there's a series</font>

94
00:03:43,390 --> 00:03:47,440
of<font color="#E5E5E5"> sections that have an IDE</font><font color="#CCCCCC"> and</font>

95
00:03:45,640 --> 00:03:49,208
depending<font color="#E5E5E5"> what on</font><font color="#CCCCCC"> what the idea</font><font color="#E5E5E5"> is that</font>

96
00:03:47,440 --> 00:03:52,060
<font color="#E5E5E5">determines what the</font><font color="#CCCCCC"> payload</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font>

97
00:03:49,209 --> 00:03:55,090
section does and there's actually tons

98
00:03:52,060 --> 00:03:57,130
of rules for these<font color="#E5E5E5"> sections they have to</font>

99
00:03:55,090 --> 00:03:58,930
be in a<font color="#E5E5E5"> certain order some of them are</font>

100
00:03:57,130 --> 00:04:02,890
mandatory some of them can't have

101
00:03:58,930 --> 00:04:04,900
duplicates<font color="#CCCCCC"> that sort</font><font color="#E5E5E5"> of thing and</font><font color="#CCCCCC"> what</font>

102
00:04:02,890 --> 00:04:07,630
<font color="#CCCCCC">do</font><font color="#E5E5E5"> all these sections do well they</font>

103
00:04:04,900 --> 00:04:10,540
contain basically<font color="#E5E5E5"> everything you need</font><font color="#CCCCCC"> to</font>

104
00:04:07,630 --> 00:04:12,730
execute<font color="#E5E5E5"> this code so there is type</font>

105
00:04:10,540 --> 00:04:15,070
<font color="#CCCCCC">information there's imports there's</font>

106
00:04:12,730 --> 00:04:17,079
memory there's code there's that sort of

107
00:04:15,070 --> 00:04:20,310
thing<font color="#E5E5E5"> and I'll go through</font><font color="#CCCCCC"> what each</font><font color="#E5E5E5"> of</font>

108
00:04:17,079 --> 00:04:23,200
these do<font color="#E5E5E5"> in much more detail later and</font>

109
00:04:20,310 --> 00:04:25,810
then how is this format actually get

110
00:04:23,200 --> 00:04:27,969
parsed<font color="#E5E5E5"> well your first step is you</font>

111
00:04:25,810 --> 00:04:30,639
have this typed array or array buffer

112
00:04:27,970 --> 00:04:32,020
which is<font color="#CCCCCC"> the variable wasm here</font><font color="#E5E5E5"> and then</font>

113
00:04:30,639 --> 00:04:34,780
you create<font color="#E5E5E5"> what's called</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> web assembly</font>

114
00:04:32,020 --> 00:04:38,830
module<font color="#CCCCCC"> and this is the thing</font><font color="#E5E5E5"> that parses</font>

115
00:04:34,780 --> 00:04:40,750
your binary<font color="#E5E5E5"> and loads it</font><font color="#CCCCCC"> into memory</font><font color="#E5E5E5"> and</font>

116
00:04:38,830 --> 00:04:43,479
<font color="#E5E5E5">at this point they're already started to</font>

117
00:04:40,750 --> 00:04:45,970
be a few bugs<font color="#E5E5E5"> so this is a vulnerability</font>

118
00:04:43,480 --> 00:04:48,760
<font color="#E5E5E5">I found in WebKit and this is an</font>

119
00:04:45,970 --> 00:04:50,440
<font color="#E5E5E5">ordering problem</font><font color="#CCCCCC"> so as I</font><font color="#E5E5E5"> said some</font>

120
00:04:48,760 --> 00:04:52,570
sections are mandatory some of them have

121
00:04:50,440 --> 00:04:54,790
to be<font color="#CCCCCC"> in certain orders and there's also</font>

122
00:04:52,570 --> 00:04:57,760
something called<font color="#E5E5E5"> a custom</font><font color="#CCCCCC"> section which</font>

123
00:04:54,790 --> 00:05:00,400
pretty much means<font color="#CCCCCC"> that if the web</font>

124
00:04:57,760 --> 00:05:03,130
assembly engine<font color="#E5E5E5"> doesn't know the ID of</font>

125
00:05:00,400 --> 00:05:04,270
<font color="#CCCCCC">your section it'll just skip over it</font><font color="#E5E5E5"> and</font>

126
00:05:03,130 --> 00:05:07,990
assume it's<font color="#CCCCCC"> something it doesn't</font><font color="#E5E5E5"> support</font>

127
00:05:04,270 --> 00:05:09,700
<font color="#E5E5E5">yet but and every engine has</font><font color="#CCCCCC"> a way that</font>

128
00:05:07,990 --> 00:05:11,680
it validates these sections are<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the</font>

129
00:05:09,700 --> 00:05:13,300
right<font color="#E5E5E5"> order taking into account custom</font>

130
00:05:11,680 --> 00:05:15,639
sections but the WebKit one was

131
00:05:13,300 --> 00:05:17,350
<font color="#E5E5E5">defective so in this case you'll</font><font color="#CCCCCC"> notice</font>

132
00:05:15,639 --> 00:05:19,150
if there was a custom section<font color="#E5E5E5"> it just</font>

133
00:05:17,350 --> 00:05:20,800
<font color="#E5E5E5">returns true which means</font><font color="#CCCCCC"> that you're</font>

134
00:05:19,150 --> 00:05:22,539
ordering resets every time you have a

135
00:05:20,800 --> 00:05:24,700
custom section<font color="#E5E5E5"> and you could do out of</font>

136
00:05:22,540 --> 00:05:26,710
<font color="#E5E5E5">order sections and violate all the rules</font>

137
00:05:24,700 --> 00:05:28,870
<font color="#CCCCCC">and there's lots of reasons why this</font>

138
00:05:26,710 --> 00:05:30,010
could cause problems<font color="#E5E5E5"> but I think the</font>

139
00:05:28,870 --> 00:05:33,460
most<font color="#E5E5E5"> interesting one and the one that</font>

140
00:05:30,010 --> 00:05:35,260
<font color="#CCCCCC">ended up being exploited</font><font color="#E5E5E5"> is that there</font>

141
00:05:33,460 --> 00:05:37,060
are some sections<font color="#E5E5E5"> that they're supposed</font>

142
00:05:35,260 --> 00:05:38,800
<font color="#E5E5E5">to only be one of but if you could put</font>

143
00:05:37,060 --> 00:05:41,020
more<font color="#E5E5E5"> than</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> of them in then it would</font>

144
00:05:38,800 --> 00:05:42,460
<font color="#E5E5E5">start putting things into a</font><font color="#CCCCCC"> vector</font><font color="#E5E5E5"> pass</font>

145
00:05:41,020 --> 00:05:47,049
the bounds of<font color="#E5E5E5"> the vector and it turned</font>

146
00:05:42,460 --> 00:05:48,789
out to be<font color="#CCCCCC"> a buffer overflow</font><font color="#E5E5E5"> so here's</font>

147
00:05:47,050 --> 00:05:51,010
<font color="#E5E5E5">another issue that turned up just</font><font color="#CCCCCC"> in the</font>

148
00:05:48,789 --> 00:05:53,080
<font color="#E5E5E5">parsing of this format this is an issue</font>

149
00:05:51,010 --> 00:05:55,120
<font color="#E5E5E5">that was in v8 and this is an integer</font>

150
00:05:53,080 --> 00:05:58,750
overflow issue and it only<font color="#E5E5E5"> works</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> a</font>

151
00:05:55,120 --> 00:06:00,700
32-bit platform so basically<font color="#CCCCCC"> there's one</font>

152
00:05:58,750 --> 00:06:02,560
of the things that is in this format is

153
00:06:00,700 --> 00:06:04,930
the<font color="#E5E5E5"> number of locals that each function</font>

154
00:06:02,560 --> 00:06:07,419
has and if you had a very large<font color="#CCCCCC"> number</font>

155
00:06:04,930 --> 00:06:10,450
of locals<font color="#E5E5E5"> in VA it would just overflow</font>

156
00:06:07,419 --> 00:06:12,490
the allocation and then you overflow the

157
00:06:10,450 --> 00:06:13,990
integer<font color="#CCCCCC"> of the allocation and then</font><font color="#E5E5E5"> you</font>

158
00:06:12,490 --> 00:06:18,450
would<font color="#E5E5E5"> have a very</font><font color="#CCCCCC"> small piece of memory</font>

159
00:06:13,990 --> 00:06:21,550
with<font color="#CCCCCC"> a very large array copied into</font><font color="#E5E5E5"> it</font>

160
00:06:18,450 --> 00:06:24,880
<font color="#E5E5E5">so here's another issue that</font><font color="#CCCCCC"> happens</font>

161
00:06:21,550 --> 00:06:27,100
once again just in parsing this<font color="#CCCCCC"> isn't</font>

162
00:06:24,880 --> 00:06:29,050
<font color="#E5E5E5">WebKit and this is kind of silly issue</font>

163
00:06:27,100 --> 00:06:31,270
in that<font color="#CCCCCC"> it's clearly</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> a developer</font>

164
00:06:29,050 --> 00:06:34,780
error not any misunderstanding of<font color="#CCCCCC"> the</font>

165
00:06:31,270 --> 00:06:37,700
specification<font color="#E5E5E5"> so in JavaScript</font><font color="#CCCCCC"> when you</font>

166
00:06:34,780 --> 00:06:40,250
have an array buffer<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can create</font>

167
00:06:37,700 --> 00:06:42,050
<font color="#CCCCCC">I typed array buffer around it and this</font>

168
00:06:40,250 --> 00:06:45,290
<font color="#CCCCCC">is basically just a view into</font><font color="#E5E5E5"> that</font>

169
00:06:42,050 --> 00:06:49,190
buffer<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example the variable view</font>

170
00:06:45,290 --> 00:06:54,050
that is offset 700 of this array buffer

171
00:06:49,190 --> 00:06:57,580
<font color="#E5E5E5">so if you access sub 0 of that view you</font>

172
00:06:54,050 --> 00:07:00,110
<font color="#CCCCCC">would get sub 700 of the variable B</font><font color="#E5E5E5"> 2</font>

173
00:06:57,580 --> 00:07:02,900
but the error they made in<font color="#CCCCCC"> developing</font>

174
00:07:00,110 --> 00:07:05,660
this was that they accidentally added

175
00:07:02,900 --> 00:07:07,940
<font color="#E5E5E5">this offset in twice</font><font color="#CCCCCC"> they call the</font>

176
00:07:05,660 --> 00:07:09,590
function that<font color="#CCCCCC"> gets the array buffer with</font>

177
00:07:07,940 --> 00:07:11,660
<font color="#CCCCCC">the offset and they forgot that</font><font color="#E5E5E5"> it did</font>

178
00:07:09,590 --> 00:07:13,250
<font color="#E5E5E5">that and they had to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> offset again so</font>

179
00:07:11,660 --> 00:07:15,140
this<font color="#E5E5E5"> is kind of an interesting bug just</font>

180
00:07:13,250 --> 00:07:17,140
<font color="#E5E5E5">cuz also prevented this from working it</font>

181
00:07:15,140 --> 00:07:19,969
meant<font color="#E5E5E5"> that if you</font><font color="#CCCCCC"> ever had a typed array</font>

182
00:07:17,140 --> 00:07:21,919
<font color="#E5E5E5">with an offset that wasn't</font><font color="#CCCCCC"> 0 webassembly</font>

183
00:07:19,970 --> 00:07:23,360
<font color="#E5E5E5">would just never work</font><font color="#CCCCCC"> so this is a bug</font>

184
00:07:21,920 --> 00:07:25,910
that<font color="#E5E5E5"> was probably</font><font color="#CCCCCC"> not long for this</font>

185
00:07:23,360 --> 00:07:27,920
world<font color="#E5E5E5"> but it did show up and</font><font color="#CCCCCC"> actually</font>

186
00:07:25,910 --> 00:07:30,020
there<font color="#E5E5E5"> was sort of a similar bug in</font><font color="#CCCCCC"> BA</font>

187
00:07:27,920 --> 00:07:32,570
<font color="#E5E5E5">that came up at the pony's last night</font>

188
00:07:30,020 --> 00:07:34,370
<font color="#E5E5E5">which</font><font color="#CCCCCC"> is found by crying dog and it's</font>

189
00:07:32,570 --> 00:07:37,280
<font color="#E5E5E5">another issue where they didn't quite</font>

190
00:07:34,370 --> 00:07:39,170
get the<font color="#E5E5E5"> JavaScript properties of the</font>

191
00:07:37,280 --> 00:07:41,270
typed array and you're<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> able to</font>

192
00:07:39,170 --> 00:07:44,000
<font color="#E5E5E5">change the tapered array in the middle</font>

193
00:07:41,270 --> 00:07:45,740
of execution which caused problems<font color="#E5E5E5"> so</font>

194
00:07:44,000 --> 00:07:47,570
there's<font color="#E5E5E5"> actually been quite</font><font color="#CCCCCC"> a few issues</font>

195
00:07:45,740 --> 00:07:50,300
and webassembly just with what I call

196
00:07:47,570 --> 00:07:52,400
JavaScript bindings<font color="#CCCCCC"> making</font><font color="#E5E5E5"> sure the</font>

197
00:07:50,300 --> 00:07:54,080
<font color="#E5E5E5">JavaScript properties of the objects</font>

198
00:07:52,400 --> 00:07:57,830
<font color="#CCCCCC">that get webassembly started work</font>

199
00:07:54,080 --> 00:08:02,570
correctly<font color="#E5E5E5"> so what happens</font><font color="#CCCCCC"> what now that</font>

200
00:07:57,830 --> 00:08:03,530
you've got this binary format loaded

201
00:08:02,570 --> 00:08:05,630
into<font color="#E5E5E5"> the module</font>

202
00:08:03,530 --> 00:08:07,969
well now you actually<font color="#CCCCCC"> have to run it</font><font color="#E5E5E5"> and</font>

203
00:08:05,630 --> 00:08:11,780
<font color="#E5E5E5">you need certain properties to run it so</font>

204
00:08:07,970 --> 00:08:13,670
you do this using<font color="#E5E5E5"> an instance so what</font>

205
00:08:11,780 --> 00:08:16,549
does this instance object actually<font color="#E5E5E5"> do</font>

206
00:08:13,670 --> 00:08:19,220
well it starts off<font color="#E5E5E5"> by doing imports and</font>

207
00:08:16,550 --> 00:08:22,450
then it I'm gonna<font color="#CCCCCC"> slices</font><font color="#E5E5E5"> the imports and</font>

208
00:08:19,220 --> 00:08:24,290
then it<font color="#E5E5E5"> creates the exports so there's</font>

209
00:08:22,450 --> 00:08:25,789
<font color="#E5E5E5">but there's</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> than three</font>

210
00:08:24,290 --> 00:08:28,550
import types<font color="#E5E5E5"> but I think there's three</font>

211
00:08:25,790 --> 00:08:30,890
<font color="#E5E5E5">that are actually interesting there are</font>

212
00:08:28,550 --> 00:08:32,840
functions so<font color="#E5E5E5"> you can import Java Script</font>

213
00:08:30,890 --> 00:08:34,970
or web assembly functions into web

214
00:08:32,840 --> 00:08:38,620
assembly and then you can<font color="#E5E5E5"> call them from</font>

215
00:08:34,970 --> 00:08:40,910
web assembly you<font color="#E5E5E5"> can also import memory</font>

216
00:08:38,620 --> 00:08:43,340
<font color="#CCCCCC">fundamentally web assembly is a set of</font>

217
00:08:40,909 --> 00:08:45,020
instructions like loads and stores and

218
00:08:43,340 --> 00:08:47,089
they need memory<font color="#E5E5E5"> they can access</font>

219
00:08:45,020 --> 00:08:49,910
and you need to import<font color="#E5E5E5"> the single memory</font>

220
00:08:47,089 --> 00:08:50,690
page that it<font color="#E5E5E5"> uses before you run</font>

221
00:08:49,910 --> 00:08:53,689
<font color="#CCCCCC">webassembly</font>

222
00:08:50,690 --> 00:08:55,640
<font color="#E5E5E5">and there's also a function table</font><font color="#CCCCCC"> object</font>

223
00:08:53,690 --> 00:08:57,770
which is<font color="#E5E5E5"> literally just a table of</font>

224
00:08:55,640 --> 00:08:59,600
functions<font color="#E5E5E5"> and this is used to</font><font color="#CCCCCC"> implement</font>

225
00:08:57,770 --> 00:09:02,079
things like<font color="#CCCCCC"> V tables where you need the</font>

226
00:08:59,600 --> 00:09:04,880
<font color="#CCCCCC">ability to dynamically call a function</font>

227
00:09:02,080 --> 00:09:06,740
so<font color="#CCCCCC"> here's</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> web assembly terminology</font>

228
00:09:04,880 --> 00:09:09,320
<font color="#E5E5E5">you can totally</font><font color="#CCCCCC"> use to impress all your</font>

229
00:09:06,740 --> 00:09:12,620
web assembly friends so there's these

230
00:09:09,320 --> 00:09:14,930
two imports<font color="#E5E5E5"> the memory and the table and</font>

231
00:09:12,620 --> 00:09:17,149
of course you can have many<font color="#E5E5E5"> instances of</font>

232
00:09:14,930 --> 00:09:20,120
the same module<font color="#E5E5E5"> or different modules and</font>

233
00:09:17,149 --> 00:09:21,770
web assembly<font color="#E5E5E5"> so if two instances or more</font>

234
00:09:20,120 --> 00:09:23,990
instances<font color="#CCCCCC"> have the same memory in the</font>

235
00:09:21,770 --> 00:09:26,750
same table<font color="#CCCCCC"> they</font><font color="#E5E5E5"> are called in</font><font color="#CCCCCC"> the same</font>

236
00:09:23,990 --> 00:09:29,750
compartment<font color="#E5E5E5"> now the question</font><font color="#CCCCCC"> you might</font>

237
00:09:26,750 --> 00:09:31,820
have is well can an instance<font color="#E5E5E5"> share the</font>

238
00:09:29,750 --> 00:09:34,250
memory but not<font color="#E5E5E5"> the table or share the</font>

239
00:09:31,820 --> 00:09:35,600
table but<font color="#E5E5E5"> not the memory and the answer</font>

240
00:09:34,250 --> 00:09:37,610
is sure<font color="#E5E5E5"> you can totally</font><font color="#CCCCCC"> have web</font>

241
00:09:35,600 --> 00:09:39,860
assembly that's<font color="#E5E5E5"> in like half</font><font color="#CCCCCC"> of the same</font>

242
00:09:37,610 --> 00:09:41,839
compartment<font color="#CCCCCC"> but</font><font color="#E5E5E5"> there's no reason you</font>

243
00:09:39,860 --> 00:09:44,149
would ever practically do this in

244
00:09:41,839 --> 00:09:46,310
writing<font color="#E5E5E5"> web assembly and no compiler</font>

245
00:09:44,149 --> 00:09:47,390
will ever generate this code but you

246
00:09:46,310 --> 00:09:52,010
<font color="#E5E5E5">know if you want to do it to reach</font><font color="#CCCCCC"> the</font>

247
00:09:47,390 --> 00:09:53,589
<font color="#E5E5E5">vulnerability it's totally an option so</font>

248
00:09:52,010 --> 00:09:56,089
let's<font color="#CCCCCC"> talk a bit more about</font><font color="#E5E5E5"> this memory</font>

249
00:09:53,589 --> 00:09:58,310
<font color="#CCCCCC">it's a memory page for the web assembly</font>

250
00:09:56,089 --> 00:10:00,860
code and right now<font color="#CCCCCC"> that assembly is</font>

251
00:09:58,310 --> 00:10:02,719
limited to a single<font color="#E5E5E5"> memory page that</font>

252
00:10:00,860 --> 00:10:05,839
load<font color="#CCCCCC"> and store</font><font color="#E5E5E5"> instructions can access</font>

253
00:10:02,720 --> 00:10:08,300
and the way this gets<font color="#CCCCCC"> allocated is you</font>

254
00:10:05,839 --> 00:10:11,060
allocate<font color="#E5E5E5"> this memory object and it has</font>

255
00:10:08,300 --> 00:10:14,060
an<font color="#E5E5E5"> initial size and a maximum size in</font>

256
00:10:11,060 --> 00:10:19,430
pages and then you call grow to increase

257
00:10:14,060 --> 00:10:20,839
the size and this memory<font color="#CCCCCC"> then just</font>

258
00:10:19,430 --> 00:10:23,630
becomes available<font color="#E5E5E5"> to all the</font>

259
00:10:20,839 --> 00:10:26,300
instructions<font color="#CCCCCC"> in web assembly and at this</font>

260
00:10:23,630 --> 00:10:28,459
point<font color="#E5E5E5"> there's also been some problems in</font>

261
00:10:26,300 --> 00:10:29,930
this<font color="#E5E5E5"> feature</font><font color="#CCCCCC"> and these are</font><font color="#E5E5E5"> kind of</font>

262
00:10:28,459 --> 00:10:32,119
<font color="#E5E5E5">interesting because they're actually</font>

263
00:10:29,930 --> 00:10:34,729
<font color="#CCCCCC">very</font><font color="#E5E5E5"> similar bugs in two</font><font color="#CCCCCC"> different</font>

264
00:10:32,120 --> 00:10:37,040
implementations<font color="#CCCCCC"> there's the first bug</font>

265
00:10:34,730 --> 00:10:39,290
which was found in Firefox by their own

266
00:10:37,040 --> 00:10:42,349
<font color="#E5E5E5">internal fuzzing and this was an issue</font>

267
00:10:39,290 --> 00:10:44,870
where there wasn't integer overflow in

268
00:10:42,350 --> 00:10:47,660
growing<font color="#E5E5E5"> this memory so</font><font color="#CCCCCC"> eventually you</font>

269
00:10:44,870 --> 00:10:49,100
would grow<font color="#CCCCCC"> the memory and then it would</font>

270
00:10:47,660 --> 00:10:51,380
<font color="#E5E5E5">think it was bigger than it</font><font color="#CCCCCC"> was and you</font>

271
00:10:49,100 --> 00:10:56,180
<font color="#E5E5E5">could</font><font color="#CCCCCC"> write out of bounds and the second</font>

272
00:10:51,380 --> 00:10:57,829
one<font color="#E5E5E5"> found by</font><font color="#CCCCCC"> using Exuma of qihoo this</font>

273
00:10:56,180 --> 00:11:00,260
<font color="#E5E5E5">is very similar although it ends up</font>

274
00:10:57,829 --> 00:11:05,150
<font color="#E5E5E5">being a use after free where the memory</font>

275
00:11:00,260 --> 00:11:06,680
is<font color="#E5E5E5"> freed unexpectedly now one thing I</font>

276
00:11:05,150 --> 00:11:09,110
<font color="#E5E5E5">thought I would see a lot</font><font color="#CCCCCC"> of which I</font>

277
00:11:06,680 --> 00:11:12,170
didn't<font color="#E5E5E5"> see a lot of was out of</font><font color="#CCCCCC"> bounds</font>

278
00:11:09,110 --> 00:11:14,240
<font color="#E5E5E5">issues and I thought there was</font><font color="#CCCCCC"> a few</font>

279
00:11:12,170 --> 00:11:15,620
reasons for<font color="#CCCCCC"> this one is that there's</font>

280
00:11:14,240 --> 00:11:17,779
<font color="#E5E5E5">actually a fairly limited set of</font>

281
00:11:15,620 --> 00:11:20,870
instructions that<font color="#CCCCCC"> can</font><font color="#E5E5E5"> access memory and</font>

282
00:11:17,779 --> 00:11:23,270
<font color="#CCCCCC">webassembly</font><font color="#E5E5E5"> pretty much load in store so</font>

283
00:11:20,870 --> 00:11:25,040
this<font color="#E5E5E5"> is a very like small inaudible sets</font>

284
00:11:23,270 --> 00:11:27,980
of instructions<font color="#CCCCCC"> that</font><font color="#E5E5E5"> might go out of</font>

285
00:11:25,040 --> 00:11:29,719
<font color="#E5E5E5">bounds</font><font color="#CCCCCC"> I'll</font><font color="#E5E5E5"> say right</font><font color="#CCCCCC"> now a web assembly</font>

286
00:11:27,980 --> 00:11:32,270
supports a very limited threading model

287
00:11:29,720 --> 00:11:33,949
<font color="#CCCCCC">so there's not</font><font color="#E5E5E5"> a lot of fear</font><font color="#CCCCCC"> that you're</font>

288
00:11:32,270 --> 00:11:35,870
going<font color="#CCCCCC"> to check the size of something</font><font color="#E5E5E5"> and</font>

289
00:11:33,949 --> 00:11:37,969
then it's gonna change<font color="#CCCCCC"> it also helps</font>

290
00:11:35,870 --> 00:11:39,800
that memory buffers you might notice you

291
00:11:37,970 --> 00:11:42,230
can grow them but they can<font color="#E5E5E5"> never get any</font>

292
00:11:39,800 --> 00:11:44,990
smaller once they're a<font color="#E5E5E5"> certain size they</font>

293
00:11:42,230 --> 00:11:46,699
<font color="#E5E5E5">can only get bigger um but something</font>

294
00:11:44,990 --> 00:11:48,470
else<font color="#E5E5E5"> I thought was really cool is how</font>

295
00:11:46,699 --> 00:11:50,959
they<font color="#E5E5E5"> actually designed these</font><font color="#CCCCCC"> I memory</font>

296
00:11:48,470 --> 00:11:52,579
buffers on<font color="#E5E5E5"> 64-bit platforms</font><font color="#CCCCCC"> and it's</font>

297
00:11:50,959 --> 00:11:55,880
called safe<font color="#CCCCCC"> buffer</font><font color="#E5E5E5"> their signal buffers</font>

298
00:11:52,579 --> 00:11:58,939
and it's actually<font color="#CCCCCC"> quite cool</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> what</font>

299
00:11:55,880 --> 00:12:02,209
they'll do is<font color="#E5E5E5"> they'll map the memory of</font>

300
00:11:58,940 --> 00:12:03,410
<font color="#CCCCCC">4</font><font color="#E5E5E5"> gigabytes for the memory buffer and if</font>

301
00:12:02,209 --> 00:12:05,479
you<font color="#CCCCCC"> think about</font><font color="#E5E5E5"> it the way the</font>

302
00:12:03,410 --> 00:12:07,760
instructions<font color="#E5E5E5"> work when you load in store</font>

303
00:12:05,480 --> 00:12:11,390
there<font color="#CCCCCC"> is an</font><font color="#E5E5E5"> int and unsigned integer</font>

304
00:12:07,760 --> 00:12:14,600
offset<font color="#E5E5E5"> so it can go from 0 to ffff and</font>

305
00:12:11,390 --> 00:12:16,430
that is<font color="#E5E5E5"> 4 gigs in size total so they</font>

306
00:12:14,600 --> 00:12:18,380
have mapped<font color="#E5E5E5"> all this memory that the</font>

307
00:12:16,430 --> 00:12:21,349
<font color="#E5E5E5">index of a loader store instruction can</font>

308
00:12:18,380 --> 00:12:23,660
actually access<font color="#E5E5E5"> and then the part that's</font>

309
00:12:21,350 --> 00:12:26,120
actually<font color="#CCCCCC"> allocated they</font><font color="#E5E5E5"> map to being</font>

310
00:12:23,660 --> 00:12:29,420
readwrite memory<font color="#CCCCCC"> and then when you</font><font color="#E5E5E5"> run</font>

311
00:12:26,120 --> 00:12:31,699
<font color="#CCCCCC">webassembly if the memory</font><font color="#E5E5E5"> is mapped it</font>

312
00:12:29,420 --> 00:12:33,949
works properly<font color="#E5E5E5"> and if the memory is</font><font color="#CCCCCC"> not</font>

313
00:12:31,699 --> 00:12:35,810
<font color="#E5E5E5">mapped it throws a signal or an</font>

314
00:12:33,949 --> 00:12:38,660
exception<font color="#E5E5E5"> depending on platform and then</font>

315
00:12:35,810 --> 00:12:40,510
this gets detected by JavaScript and

316
00:12:38,660 --> 00:12:43,579
<font color="#E5E5E5">then they create a JavaScript exception</font>

317
00:12:40,510 --> 00:12:46,910
<font color="#E5E5E5">so I think this is cool</font><font color="#CCCCCC"> eggs it's very</font>

318
00:12:43,579 --> 00:12:48,229
<font color="#E5E5E5">effective you don't need manual bounds</font>

319
00:12:46,910 --> 00:12:50,360
checks and I think it's very likely

320
00:12:48,230 --> 00:12:53,750
<font color="#E5E5E5">you're unlikely you're gonna have a bug</font>

321
00:12:50,360 --> 00:12:55,730
<font color="#E5E5E5">where something larger</font><font color="#CCCCCC"> than the size</font><font color="#E5E5E5"> of</font>

322
00:12:53,750 --> 00:12:57,780
<font color="#E5E5E5">an integer tries to access</font><font color="#CCCCCC"> this memory</font>

323
00:12:55,730 --> 00:13:00,300
<font color="#E5E5E5">but I also like how</font>

324
00:12:57,780 --> 00:13:01,920
puts all the burden of<font color="#E5E5E5"> the type of the</font>

325
00:13:00,300 --> 00:13:03,959
bounds checking on<font color="#CCCCCC"> to people who go out</font>

326
00:13:01,920 --> 00:13:06,240
<font color="#CCCCCC">of bounds if you don't go out of</font><font color="#E5E5E5"> bounds</font>

327
00:13:03,960 --> 00:13:08,430
this has no performance impact<font color="#CCCCCC"> for</font>

328
00:13:06,240 --> 00:13:09,690
bounds checking it's only<font color="#E5E5E5"> if you go out</font>

329
00:13:08,430 --> 00:13:11,160
of<font color="#E5E5E5"> bounds then there's a lot of</font>

330
00:13:09,690 --> 00:13:13,080
performance impact for creating<font color="#E5E5E5"> that</font>

331
00:13:11,160 --> 00:13:14,880
exception<font color="#E5E5E5"> and I think like</font><font color="#CCCCCC"> that's a</font>

332
00:13:13,080 --> 00:13:16,500
pretty<font color="#E5E5E5"> cool design and I think</font><font color="#CCCCCC"> it's one</font>

333
00:13:14,880 --> 00:13:19,010
<font color="#CCCCCC">of the reasons that</font><font color="#E5E5E5"> there's been very</font>

334
00:13:16,500 --> 00:13:21,990
few<font color="#CCCCCC"> out of</font><font color="#E5E5E5"> bounds issues and webassembly</font>

335
00:13:19,010 --> 00:13:24,750
<font color="#CCCCCC">no look</font><font color="#E5E5E5"> one problem with this is it</font>

336
00:13:21,990 --> 00:13:26,880
doesn't<font color="#CCCCCC"> work on 32-bit platforms</font><font color="#E5E5E5"> and</font>

337
00:13:24,750 --> 00:13:29,520
they have to use<font color="#E5E5E5"> regular buffers there</font>

338
00:13:26,880 --> 00:13:31,590
but<font color="#E5E5E5"> still on 64-bit platforms I think</font>

339
00:13:29,520 --> 00:13:34,370
it's fairly unlikely<font color="#E5E5E5"> we'll be out of</font>

340
00:13:31,590 --> 00:13:36,780
bounds issues<font color="#E5E5E5"> specifically in the memory</font>

341
00:13:34,370 --> 00:13:39,630
so like the memory<font color="#E5E5E5"> the other thing that</font>

342
00:13:36,780 --> 00:13:42,000
<font color="#E5E5E5">gets imported is the table and this is</font>

343
00:13:39,630 --> 00:13:45,030
<font color="#CCCCCC">basically a table</font><font color="#E5E5E5"> of functions and they</font>

344
00:13:42,000 --> 00:13:46,860
have to be<font color="#CCCCCC"> webassembly</font><font color="#E5E5E5"> functions so if</font>

345
00:13:45,030 --> 00:13:48,360
you want to call a<font color="#CCCCCC"> javascript function</font>

346
00:13:46,860 --> 00:13:49,740
from a<font color="#CCCCCC"> table you have to create</font><font color="#E5E5E5"> a web</font>

347
00:13:48,360 --> 00:13:52,440
assembly function that calls that

348
00:13:49,740 --> 00:13:56,580
<font color="#CCCCCC">function and it's similar to the memory</font>

349
00:13:52,440 --> 00:13:59,990
you<font color="#E5E5E5"> create one with initial size and</font>

350
00:13:56,580 --> 00:14:02,190
then<font color="#CCCCCC"> you can grow it and once again</font>

351
00:13:59,990 --> 00:14:06,210
<font color="#E5E5E5">there were kind of the similar bindings</font>

352
00:14:02,190 --> 00:14:07,830
issues with these<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Firefox</font><font color="#E5E5E5"> issue also</font>

353
00:14:06,210 --> 00:14:11,250
<font color="#E5E5E5">occurred with tables where there is the</font>

354
00:14:07,830 --> 00:14:12,870
integer<font color="#CCCCCC"> wrapping</font><font color="#E5E5E5"> and then there was this</font>

355
00:14:11,250 --> 00:14:17,640
issue submitted<font color="#E5E5E5"> to the chromium</font><font color="#CCCCCC"> Rewards</font>

356
00:14:12,870 --> 00:14:19,380
program<font color="#E5E5E5"> where when you grew a table</font><font color="#CCCCCC"> like</font>

357
00:14:17,640 --> 00:14:21,990
all things in<font color="#CCCCCC"> JavaScript if there's an</font>

358
00:14:19,380 --> 00:14:24,660
index<font color="#E5E5E5"> you have to convert the index by</font>

359
00:14:21,990 --> 00:14:26,220
calling<font color="#E5E5E5"> to integer and then that can</font>

360
00:14:24,660 --> 00:14:28,680
make calls that<font color="#CCCCCC"> change the</font><font color="#E5E5E5"> property of</font>

361
00:14:26,220 --> 00:14:31,410
the table and<font color="#E5E5E5"> this ended up being once</font>

362
00:14:28,680 --> 00:14:36,660
again I use after free<font color="#E5E5E5"> similar to the</font>

363
00:14:31,410 --> 00:14:39,770
memory<font color="#E5E5E5"> one so what happens after you've</font>

364
00:14:36,660 --> 00:14:42,390
<font color="#E5E5E5">loaded the imports well now you get to</font>

365
00:14:39,770 --> 00:14:44,750
initialization and this is<font color="#E5E5E5"> basically</font>

366
00:14:42,390 --> 00:14:47,490
when you<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have an option in the</font>

367
00:14:44,750 --> 00:14:49,800
section to initialize<font color="#CCCCCC"> both</font><font color="#E5E5E5"> of your</font>

368
00:14:47,490 --> 00:14:52,350
memory and<font color="#E5E5E5"> your tables so</font><font color="#CCCCCC"> if data</font>

369
00:14:49,800 --> 00:14:54,150
segments are used to initialize memory

370
00:14:52,350 --> 00:14:56,760
and element sections are used to

371
00:14:54,150 --> 00:14:59,189
implement<font color="#E5E5E5"> the table</font><font color="#CCCCCC"> I thought there were</font>

372
00:14:56,760 --> 00:15:00,600
a few possible bugs here one thing I

373
00:14:59,190 --> 00:15:02,370
thought is<font color="#CCCCCC"> you know there's</font><font color="#E5E5E5"> this is</font>

374
00:15:00,600 --> 00:15:05,010
gonna<font color="#E5E5E5"> go</font><font color="#CCCCCC"> out of bounds like somewhere on</font>

375
00:15:02,370 --> 00:15:06,990
some platform but I check the

376
00:15:05,010 --> 00:15:07,430
implementations on all<font color="#CCCCCC"> four browsers and</font>

377
00:15:06,990 --> 00:15:09,529
<font color="#CCCCCC">I do</font>

378
00:15:07,430 --> 00:15:10,849
<font color="#E5E5E5">see any issues like this and I</font><font color="#CCCCCC"> think and</font>

379
00:15:09,529 --> 00:15:13,520
one of the things that<font color="#E5E5E5"> led to that is</font>

380
00:15:10,850 --> 00:15:14,930
this<font color="#E5E5E5"> is very</font><font color="#CCCCCC"> well specified</font><font color="#E5E5E5"> there are</font>

381
00:15:13,520 --> 00:15:17,089
very specific checks<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are supposed</font>

382
00:15:14,930 --> 00:15:20,149
<font color="#CCCCCC">to</font><font color="#E5E5E5"> be made and they were all consistent</font>

383
00:15:17,089 --> 00:15:23,810
<font color="#CCCCCC">on all the platforms however there was</font>

384
00:15:20,149 --> 00:15:26,420
this one fairly interesting<font color="#E5E5E5"> issue in</font><font color="#CCCCCC"> v8</font>

385
00:15:23,810 --> 00:15:29,180
and it kind<font color="#E5E5E5"> of came</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> twice and I don't</font>

386
00:15:26,420 --> 00:15:32,529
<font color="#E5E5E5">have a CV for it because the chrome team</font>

387
00:15:29,180 --> 00:15:34,849
<font color="#CCCCCC">actually found it before I found it</font><font color="#E5E5E5"> so</font>

388
00:15:32,529 --> 00:15:37,040
here's what the issue was<font color="#E5E5E5"> if you think</font>

389
00:15:34,850 --> 00:15:38,720
<font color="#E5E5E5">about how tables work there is an</font>

390
00:15:37,040 --> 00:15:40,279
instruction calling directly<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can use</font>

391
00:15:38,720 --> 00:15:43,010
<font color="#CCCCCC">a</font><font color="#E5E5E5"> web assembly that will call</font><font color="#CCCCCC"> into a</font>

392
00:15:40,279 --> 00:15:45,470
table<font color="#E5E5E5"> and then that table can call in to</font>

393
00:15:43,010 --> 00:15:47,569
JavaScript and<font color="#E5E5E5"> then that</font><font color="#CCCCCC"> JavaScript can</font>

394
00:15:45,470 --> 00:15:50,209
change the table<font color="#CCCCCC"> so the original issue</font>

395
00:15:47,570 --> 00:15:51,740
was if<font color="#CCCCCC"> that JavaScript</font><font color="#E5E5E5"> changed the table</font>

396
00:15:50,209 --> 00:15:52,609
to remove the function that<font color="#E5E5E5"> it was</font>

397
00:15:51,740 --> 00:15:54,380
calling<font color="#E5E5E5"> right now</font>

398
00:15:52,610 --> 00:15:55,820
<font color="#E5E5E5">that would be the last handle to that</font>

399
00:15:54,380 --> 00:15:57,700
<font color="#E5E5E5">function</font><font color="#CCCCCC"> and then that function would go</font>

400
00:15:55,820 --> 00:15:59,810
<font color="#E5E5E5">away and that would be a use after free</font>

401
00:15:57,700 --> 00:16:01,880
<font color="#E5E5E5">so they</font><font color="#CCCCCC"> fixed</font><font color="#E5E5E5"> this at least for the</font>

402
00:15:59,810 --> 00:16:03,619
short<font color="#E5E5E5"> term by detecting this situation</font>

403
00:16:01,880 --> 00:16:06,050
if you're already<font color="#E5E5E5"> in</font><font color="#CCCCCC"> it was Azzam call</font>

404
00:16:03,620 --> 00:16:08,380
you can't<font color="#E5E5E5"> change a table and this is</font>

405
00:16:06,050 --> 00:16:11,540
<font color="#E5E5E5">actually okay I forgot to mention but</font>

406
00:16:08,380 --> 00:16:14,480
tables are one of those things<font color="#CCCCCC"> that you</font>

407
00:16:11,540 --> 00:16:17,390
can do a lot more<font color="#E5E5E5"> with them than is</font>

408
00:16:14,480 --> 00:16:19,250
necessary<font color="#CCCCCC"> in code</font><font color="#E5E5E5"> so any compiled code</font>

409
00:16:17,390 --> 00:16:22,520
will<font color="#CCCCCC"> only ever change their tables</font><font color="#E5E5E5"> that</font>

410
00:16:19,250 --> 00:16:24,050
start up and there's pretty much no

411
00:16:22,520 --> 00:16:26,839
reasonable reason to<font color="#E5E5E5"> change them</font>

412
00:16:24,050 --> 00:16:28,699
<font color="#E5E5E5">dynamically during execution but of</font>

413
00:16:26,839 --> 00:16:29,870
course it's<font color="#E5E5E5"> still</font><font color="#CCCCCC"> possible</font><font color="#E5E5E5"> so they just</font>

414
00:16:28,700 --> 00:16:31,850
<font color="#E5E5E5">made it so that you can change them</font>

415
00:16:29,870 --> 00:16:33,950
during execution<font color="#E5E5E5"> but not actually during</font>

416
00:16:31,850 --> 00:16:36,620
<font color="#E5E5E5">a zone call which is fairly reasonable</font>

417
00:16:33,950 --> 00:16:38,890
<font color="#E5E5E5">considering what compilers generate but</font>

418
00:16:36,620 --> 00:16:41,270
then I found<font color="#E5E5E5"> another way to</font><font color="#CCCCCC"> actually</font>

419
00:16:38,890 --> 00:16:43,390
reach<font color="#CCCCCC"> this</font><font color="#E5E5E5"> issue which is let's say you</font>

420
00:16:41,270 --> 00:16:45,980
do the same thing you call the function

421
00:16:43,390 --> 00:16:49,550
<font color="#CCCCCC">that but</font><font color="#E5E5E5"> instead of</font><font color="#CCCCCC"> removing it</font><font color="#E5E5E5"> from the</font>

422
00:16:45,980 --> 00:16:51,680
<font color="#CCCCCC">table directly</font><font color="#E5E5E5"> you load another was an</font>

423
00:16:49,550 --> 00:16:54,050
instance into<font color="#E5E5E5"> the same compartment</font><font color="#CCCCCC"> and</font>

424
00:16:51,680 --> 00:16:56,180
<font color="#E5E5E5">that one has initialization then that</font>

425
00:16:54,050 --> 00:16:57,949
initialization will initialize the<font color="#E5E5E5"> table</font>

426
00:16:56,180 --> 00:17:00,380
and then that will once again wipe out

427
00:16:57,950 --> 00:17:02,450
<font color="#E5E5E5">the last reference to the function so</font>

428
00:17:00,380 --> 00:17:03,980
<font color="#E5E5E5">now this is has been</font><font color="#CCCCCC"> fixed</font><font color="#E5E5E5"> in a way that</font>

429
00:17:02,450 --> 00:17:08,270
they just<font color="#CCCCCC"> keep a reference to</font><font color="#E5E5E5"> that</font>

430
00:17:03,980 --> 00:17:11,150
function<font color="#CCCCCC"> much longer</font><font color="#E5E5E5"> than the table so</font>

431
00:17:08,270 --> 00:17:12,829
what happens now<font color="#CCCCCC"> well we've finished all</font>

432
00:17:11,150 --> 00:17:14,720
the steps of loading our web assembly

433
00:17:12,829 --> 00:17:17,659
we've created the module we've created

434
00:17:14,720 --> 00:17:20,780
the instance with all the imports and

435
00:17:17,660 --> 00:17:22,940
we get exports back and yay<font color="#E5E5E5"> finally we</font>

436
00:17:20,780 --> 00:17:27,649
can call these exports and<font color="#E5E5E5"> webassembly</font>

437
00:17:22,940 --> 00:17:30,020
happens so what happens next

438
00:17:27,650 --> 00:17:32,720
are there such thing as webassembly<font color="#E5E5E5"> run</font>

439
00:17:30,020 --> 00:17:35,450
<font color="#E5E5E5">time issues and the answer is yes though</font>

440
00:17:32,720 --> 00:17:37,730
I didn't<font color="#E5E5E5"> find that many</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> guess there's</font>

441
00:17:35,450 --> 00:17:39,380
a<font color="#CCCCCC"> couple of reasons for this one is that</font>

442
00:17:37,730 --> 00:17:41,630
I<font color="#CCCCCC"> think at every</font><font color="#E5E5E5"> stage of webassembly</font>

443
00:17:39,380 --> 00:17:43,340
finding<font color="#CCCCCC"> bugs becomes more difficult and</font>

444
00:17:41,630 --> 00:17:44,210
if you look at kind<font color="#E5E5E5"> of the amounts that</font>

445
00:17:43,340 --> 00:17:47,449
have<font color="#E5E5E5"> been found</font>

446
00:17:44,210 --> 00:17:49,010
you know the parsing and module issues

447
00:17:47,450 --> 00:17:50,930
there's a lot of them<font color="#E5E5E5"> and then there's</font>

448
00:17:49,010 --> 00:17:53,600
kind<font color="#E5E5E5"> of fewer instance issues and then</font>

449
00:17:50,930 --> 00:17:55,100
there's very little<font color="#CCCCCC"> runtime issues</font><font color="#E5E5E5"> and I</font>

450
00:17:53,600 --> 00:17:57,320
<font color="#E5E5E5">think it may be just because as people</font>

451
00:17:55,100 --> 00:17:58,610
find<font color="#E5E5E5"> bugs you</font><font color="#CCCCCC"> know you tend</font><font color="#E5E5E5"> to go deeper</font>

452
00:17:57,320 --> 00:18:01,429
and<font color="#E5E5E5"> deeper</font><font color="#CCCCCC"> each time so it's possible</font>

453
00:17:58,610 --> 00:18:04,580
<font color="#E5E5E5">there'll be some in the future but also</font>

454
00:18:01,430 --> 00:18:05,780
I think<font color="#E5E5E5"> the way that</font><font color="#CCCCCC"> I web assembly is</font>

455
00:18:04,580 --> 00:18:08,179
specified and<font color="#E5E5E5"> the limited number of</font>

456
00:18:05,780 --> 00:18:10,670
features<font color="#E5E5E5"> and really does reduce</font><font color="#CCCCCC"> the</font>

457
00:18:08,180 --> 00:18:13,520
likelihood that these types of issues

458
00:18:10,670 --> 00:18:15,590
occur so one possibility is that

459
00:18:13,520 --> 00:18:17,990
instructions do the wrong thing<font color="#CCCCCC"> and</font>

460
00:18:15,590 --> 00:18:19,399
they're actually<font color="#E5E5E5"> having a few issues</font>

461
00:18:17,990 --> 00:18:21,400
like<font color="#E5E5E5"> this especially if you go through</font>

462
00:18:19,400 --> 00:18:24,080
<font color="#E5E5E5">the bug tracker of webassembly</font>

463
00:18:21,400 --> 00:18:24,890
implementations really early on<font color="#E5E5E5"> if you</font>

464
00:18:24,080 --> 00:18:26,899
look at like<font color="#E5E5E5"> it you know the first</font>

465
00:18:24,890 --> 00:18:28,940
<font color="#E5E5E5">months or even</font><font color="#CCCCCC"> before they actually</font><font color="#E5E5E5"> put</font>

466
00:18:26,900 --> 00:18:30,170
it into stable browser<font color="#CCCCCC"> there's like a</font>

467
00:18:28,940 --> 00:18:32,000
lot<font color="#CCCCCC"> of issues like this that</font><font color="#E5E5E5"> cause</font>

468
00:18:30,170 --> 00:18:33,230
<font color="#CCCCCC">crashes but</font><font color="#E5E5E5"> a lot of them were</font><font color="#CCCCCC"> removed</font>

469
00:18:32,000 --> 00:18:35,780
by fuzzing before they were even

470
00:18:33,230 --> 00:18:39,740
<font color="#E5E5E5">released there was incorrect bounds</font>

471
00:18:35,780 --> 00:18:41,450
checking<font color="#E5E5E5"> and I discussed this earlier I</font>

472
00:18:39,740 --> 00:18:43,280
think<font color="#E5E5E5"> because</font><font color="#CCCCCC"> of safe buffers and signal</font>

473
00:18:41,450 --> 00:18:46,520
buffers this one will probably<font color="#E5E5E5"> not come</font>

474
00:18:43,280 --> 00:18:48,830
<font color="#CCCCCC">up except on 32 bits and then incorrect</font>

475
00:18:46,520 --> 00:18:50,900
handles news after<font color="#E5E5E5"> freeze there's been a</font>

476
00:18:48,830 --> 00:18:53,030
couple of these<font color="#E5E5E5"> though most of them seem</font>

477
00:18:50,900 --> 00:18:57,800
to<font color="#CCCCCC"> have been in loading and not an</font>

478
00:18:53,030 --> 00:18:59,480
actual<font color="#E5E5E5"> execution so things are</font><font color="#CCCCCC"> fairly</font>

479
00:18:57,800 --> 00:19:01,340
<font color="#E5E5E5">good right now but there are two future</font>

480
00:18:59,480 --> 00:19:03,530
features of web assembly that I think

481
00:19:01,340 --> 00:19:06,649
will change<font color="#E5E5E5"> the security</font><font color="#CCCCCC"> landscape of it</font>

482
00:19:03,530 --> 00:19:08,330
a lot<font color="#E5E5E5"> if they go in one is concurrency</font>

483
00:19:06,650 --> 00:19:11,150
<font color="#CCCCCC">I'm right now there's not</font><font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of</font>

484
00:19:08,330 --> 00:19:12,800
threading supported in web assembly<font color="#CCCCCC"> it's</font>

485
00:19:11,150 --> 00:19:14,570
just JavaScript threading but a lot of

486
00:19:12,800 --> 00:19:16,340
<font color="#E5E5E5">people want there to be threading within</font>

487
00:19:14,570 --> 00:19:17,300
web assembly and I think this<font color="#CCCCCC"> will</font>

488
00:19:16,340 --> 00:19:19,550
completely<font color="#CCCCCC"> change the security</font>

489
00:19:17,300 --> 00:19:21,560
<font color="#E5E5E5">properties of all the</font><font color="#CCCCCC"> code that exists</font>

490
00:19:19,550 --> 00:19:23,840
and this will make<font color="#E5E5E5"> it much more</font><font color="#CCCCCC"> likely</font>

491
00:19:21,560 --> 00:19:26,210
that<font color="#E5E5E5"> there are balance issues the</font>

492
00:19:23,840 --> 00:19:28,100
there are certain types<font color="#CCCCCC"> to use after</font>

493
00:19:26,210 --> 00:19:29,570
free issues that sort<font color="#CCCCCC"> of thing and</font><font color="#E5E5E5"> we'll</font>

494
00:19:28,100 --> 00:19:31,399
also make<font color="#CCCCCC"> it</font><font color="#E5E5E5"> a lot more</font><font color="#CCCCCC"> difficult</font><font color="#E5E5E5"> to</font>

495
00:19:29,570 --> 00:19:34,520
<font color="#E5E5E5">write secure web assembly code itself</font>

496
00:19:31,400 --> 00:19:36,260
<font color="#E5E5E5">there's also a web assembly GC which</font>

497
00:19:34,520 --> 00:19:38,090
will<font color="#E5E5E5"> probably come in in the future</font><font color="#CCCCCC"> and</font>

498
00:19:36,260 --> 00:19:40,429
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> basically to solve the problem</font>

499
00:19:38,090 --> 00:19:41,959
where you can't compile Java<font color="#E5E5E5"> because I'm</font>

500
00:19:40,429 --> 00:19:43,940
cutting<font color="#E5E5E5"> up</font><font color="#CCCCCC"> that one slab of</font><font color="#E5E5E5"> memory</font>

501
00:19:41,960 --> 00:19:46,370
you're allowed to have<font color="#CCCCCC"> is do performance</font>

502
00:19:43,940 --> 00:19:47,720
intensive so they<font color="#CCCCCC"> think in the</font><font color="#E5E5E5"> future</font>

503
00:19:46,370 --> 00:19:50,209
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> going to be a way to request</font>

504
00:19:47,720 --> 00:19:52,039
memory a small piece and use it in web

505
00:19:50,210 --> 00:19:54,230
assembly and then have it<font color="#E5E5E5"> managed by the</font>

506
00:19:52,039 --> 00:19:57,169
<font color="#E5E5E5">interpreter and once</font><font color="#CCCCCC"> again I</font><font color="#E5E5E5"> think this</font>

507
00:19:54,230 --> 00:19:59,779
<font color="#E5E5E5">will make</font><font color="#CCCCCC"> all the good things about how</font>

508
00:19:57,169 --> 00:20:00,980
memory works right now<font color="#CCCCCC"> a lot less</font>

509
00:19:59,779 --> 00:20:02,539
certain and<font color="#CCCCCC"> I think they'll</font><font color="#E5E5E5"> be more</font>

510
00:20:00,980 --> 00:20:06,679
<font color="#CCCCCC">balanced issues and that</font><font color="#E5E5E5"> sort</font><font color="#CCCCCC"> of thing</font>

511
00:20:02,539 --> 00:20:09,620
if a specific<font color="#CCCCCC"> feature goes in</font><font color="#E5E5E5"> um so to</font>

512
00:20:06,679 --> 00:20:12,440
end off<font color="#E5E5E5"> I found several owner abilities</font>

513
00:20:09,620 --> 00:20:14,570
<font color="#E5E5E5">in</font><font color="#CCCCCC"> web assembly implementations but</font>

514
00:20:12,440 --> 00:20:16,190
<font color="#CCCCCC">funnily enough I actually thought</font><font color="#E5E5E5"> it was</font>

515
00:20:14,570 --> 00:20:18,139
pretty<font color="#E5E5E5"> good</font><font color="#CCCCCC"> there were</font><font color="#E5E5E5"> definitely some</font>

516
00:20:16,190 --> 00:20:20,210
implementations I didn't find any bugs

517
00:20:18,140 --> 00:20:22,309
in and considering<font color="#E5E5E5"> we're coming from a</font>

518
00:20:20,210 --> 00:20:25,520
place<font color="#E5E5E5"> we want to run web assembly</font>

519
00:20:22,309 --> 00:20:27,649
securely on the web<font color="#CCCCCC"> I found there</font>

520
00:20:25,520 --> 00:20:30,408
weren't actually<font color="#E5E5E5"> that many bugs compared</font>

521
00:20:27,649 --> 00:20:31,789
to what I was<font color="#CCCCCC"> expecting and I</font><font color="#E5E5E5"> think it's</font>

522
00:20:30,409 --> 00:20:34,279
<font color="#E5E5E5">I do know a few things</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> it's</font>

523
00:20:31,789 --> 00:20:36,460
because web assembly has a limited

524
00:20:34,279 --> 00:20:38,779
<font color="#E5E5E5">number of features that are necessary</font>

525
00:20:36,460 --> 00:20:40,460
<font color="#CCCCCC">it's because the way they designed the</font>

526
00:20:38,779 --> 00:20:42,080
feature is<font color="#CCCCCC"> especially things like signal</font>

527
00:20:40,460 --> 00:20:44,809
buffers I made it less<font color="#E5E5E5"> likely for</font>

528
00:20:42,080 --> 00:20:48,049
specific problems<font color="#CCCCCC"> to occur and all the</font>

529
00:20:44,809 --> 00:20:51,559
<font color="#CCCCCC">features are</font><font color="#E5E5E5"> very well specified and and</font>

530
00:20:48,049 --> 00:20:53,629
it's very<font color="#E5E5E5"> clear so what will happen</font><font color="#CCCCCC"> to</font>

531
00:20:51,559 --> 00:20:55,610
have assembly in the future<font color="#E5E5E5"> I don't know</font>

532
00:20:53,630 --> 00:20:58,309
I think it's<font color="#E5E5E5"> very possible though</font><font color="#CCCCCC"> that</font>

533
00:20:55,610 --> 00:21:01,129
it becomes the<font color="#CCCCCC"> next</font><font color="#E5E5E5"> flash or JavaScript</font>

534
00:20:58,309 --> 00:21:03,289
or Java<font color="#E5E5E5"> and I think whether it's secure</font>

535
00:21:01,130 --> 00:21:05,029
in the future will depend<font color="#E5E5E5"> on which of</font>

536
00:21:03,289 --> 00:21:09,470
these features go in and how they're

537
00:21:05,029 --> 00:21:11,870
implemented so I hope that<font color="#CCCCCC"> job I hope</font>

538
00:21:09,470 --> 00:21:13,659
that web assembly does go<font color="#E5E5E5"> with the</font>

539
00:21:11,870 --> 00:21:16,570
<font color="#E5E5E5">direction of security in the future</font>

540
00:21:13,659 --> 00:21:25,770
thanks a<font color="#E5E5E5"> lot</font>

541
00:21:16,570 --> 00:21:25,770
[Applause]

