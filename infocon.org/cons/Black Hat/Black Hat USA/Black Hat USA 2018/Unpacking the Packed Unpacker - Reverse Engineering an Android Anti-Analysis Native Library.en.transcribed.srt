1
00:00:00,030 --> 00:00:04,830
so Who am<font color="#E5E5E5"> I my name is Maddy stone I am</font>

2
00:00:02,879 --> 00:00:07,319
<font color="#E5E5E5">a reverse engineer on the Google Play</font>

3
00:00:04,830 --> 00:00:09,780
protect team under<font color="#E5E5E5"> Android security and</font>

4
00:00:07,319 --> 00:00:11,280
I've been there<font color="#E5E5E5"> for about a year before</font>

5
00:00:09,780 --> 00:00:14,009
<font color="#CCCCCC">that I have about</font><font color="#E5E5E5"> five years of</font>

6
00:00:11,280 --> 00:00:20,340
<font color="#CCCCCC">experience doing hardware</font><font color="#E5E5E5"> and firmware</font>

7
00:00:14,009 --> 00:00:22,109
reversing and exploit dev so why do we

8
00:00:20,340 --> 00:00:24,750
<font color="#E5E5E5">even care what is the</font><font color="#CCCCCC"> whole point</font><font color="#E5E5E5"> of</font>

9
00:00:22,109 --> 00:00:27,210
this where are we<font color="#E5E5E5"> coming from so the</font>

10
00:00:24,750 --> 00:00:29,400
reason why I'm talking<font color="#E5E5E5"> and wanted to</font>

11
00:00:27,210 --> 00:00:32,340
focus on anti analysis techniques<font color="#E5E5E5"> was</font>

12
00:00:29,400 --> 00:00:35,820
very first off the reason they<font color="#CCCCCC"> exist is</font>

13
00:00:32,340 --> 00:00:37,410
this whole sort of dynamic between<font color="#E5E5E5"> us as</font>

14
00:00:35,820 --> 00:00:39,660
malware<font color="#CCCCCC"> analyst</font><font color="#E5E5E5"> and the malware</font>

15
00:00:37,410 --> 00:00:42,750
developers and so we're<font color="#E5E5E5"> both striving</font>

16
00:00:39,660 --> 00:00:46,169
for asymmetric<font color="#E5E5E5"> advantage so</font><font color="#CCCCCC"> they want</font><font color="#E5E5E5"> to</font>

17
00:00:42,750 --> 00:00:48,059
be able<font color="#E5E5E5"> to create malware that super</font>

18
00:00:46,170 --> 00:00:49,469
<font color="#E5E5E5">quickly that has the most market share</font>

19
00:00:48,059 --> 00:00:52,078
<font color="#E5E5E5">that they're accomplishing their goal</font>

20
00:00:49,469 --> 00:00:55,199
while we want to be able<font color="#E5E5E5"> to detect it</font>

21
00:00:52,079 --> 00:00:57,120
that much<font color="#CCCCCC"> faster</font><font color="#E5E5E5"> so that's</font><font color="#CCCCCC"> this mindset</font>

22
00:00:55,199 --> 00:00:59,250
<font color="#E5E5E5">that we're</font><font color="#CCCCCC"> coming</font><font color="#E5E5E5"> from of they can</font>

23
00:00:57,120 --> 00:01:02,730
create anti analysis techniques<font color="#E5E5E5"> but can</font>

24
00:00:59,250 --> 00:01:05,069
we detect them and<font color="#E5E5E5"> prevent them and get</font>

25
00:01:02,730 --> 00:01:09,390
around<font color="#E5E5E5"> them with less investment than it</font>

26
00:01:05,069 --> 00:01:10,979
takes<font color="#E5E5E5"> for them to</font><font color="#CCCCCC"> develop them</font><font color="#E5E5E5"> so what</font>

27
00:01:09,390 --> 00:01:13,590
is this anti analysis technique

28
00:01:10,979 --> 00:01:15,119
<font color="#E5E5E5">basically</font><font color="#CCCCCC"> just to make it</font><font color="#E5E5E5"> harder for you</font>

29
00:01:13,590 --> 00:01:18,450
to<font color="#CCCCCC"> figure</font><font color="#E5E5E5"> out what they're trying to</font>

30
00:01:15,119 --> 00:01:21,299
hide<font color="#CCCCCC"> so that this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> encompass</font>

31
00:01:18,450 --> 00:01:23,580
all of<font color="#E5E5E5"> anti reverse engineering</font><font color="#CCCCCC"> anti</font>

32
00:01:21,299 --> 00:01:24,119
debugging anti emulation<font color="#E5E5E5"> all of those</font>

33
00:01:23,580 --> 00:01:29,789
things

34
00:01:24,119 --> 00:01:31,619
<font color="#CCCCCC">I'm packaging up into anti analysis</font><font color="#E5E5E5"> so</font>

35
00:01:29,790 --> 00:01:33,600
let's take a step<font color="#CCCCCC"> back and set the</font>

36
00:01:31,619 --> 00:01:36,630
contacts what's the story<font color="#E5E5E5"> where are we</font><font color="#CCCCCC"> I</font>

37
00:01:33,600 --> 00:01:38,820
on the<font color="#CCCCCC"> Google Play protect team we have</font>

38
00:01:36,630 --> 00:01:40,619
so many<font color="#E5E5E5"> apps coming in all the</font><font color="#CCCCCC"> time and</font>

39
00:01:38,820 --> 00:01:42,960
certain ones are flagged for<font color="#E5E5E5"> a human</font>

40
00:01:40,619 --> 00:01:44,850
reviewer when that's escalated to me<font color="#CCCCCC"> I</font>

41
00:01:42,960 --> 00:01:45,990
want to<font color="#E5E5E5"> take</font><font color="#CCCCCC"> a look and decide as</font>

42
00:01:44,850 --> 00:01:48,600
quickly as possible

43
00:01:45,990 --> 00:01:51,750
is this benign<font color="#CCCCCC"> or is</font><font color="#E5E5E5"> it malware and</font>

44
00:01:48,600 --> 00:01:55,229
should be started issuing<font color="#E5E5E5"> warnings so</font>

45
00:01:51,750 --> 00:01:57,060
this app came up it looked<font color="#E5E5E5"> pretty normal</font>

46
00:01:55,229 --> 00:01:59,880
<font color="#CCCCCC">but there was one interesting</font><font color="#E5E5E5"> thing it</font>

47
00:01:57,060 --> 00:02:02,939
had an elf file embedded<font color="#E5E5E5"> in the apk that</font>

48
00:01:59,880 --> 00:02:05,850
<font color="#E5E5E5">just it didn't look right</font><font color="#CCCCCC"> I couldn't</font>

49
00:02:02,939 --> 00:02:08,008
<font color="#CCCCCC">tell if</font><font color="#E5E5E5"> it was</font><font color="#CCCCCC"> actually malware or not</font>

50
00:02:05,850 --> 00:02:09,929
yet but I also<font color="#E5E5E5"> noticed that there were</font>

51
00:02:08,008 --> 00:02:12,809
at least<font color="#E5E5E5"> a hundred</font>

52
00:02:09,929 --> 00:02:16,140
<font color="#E5E5E5">their digests or apks out there that</font>

53
00:02:12,810 --> 00:02:18,989
also<font color="#E5E5E5"> included this elf library so that</font>

54
00:02:16,140 --> 00:02:20,939
<font color="#CCCCCC">got me in this mindset of</font><font color="#E5E5E5"> one I need to</font>

55
00:02:18,989 --> 00:02:24,510
decide<font color="#E5E5E5"> very quickly whether this is</font>

56
00:02:20,939 --> 00:02:26,400
malware<font color="#CCCCCC"> at benign so that we can get</font>

57
00:02:24,510 --> 00:02:28,500
protections out but I also need to

58
00:02:26,400 --> 00:02:34,829
<font color="#E5E5E5">figure out why all of these different</font>

59
00:02:28,500 --> 00:02:37,019
apks are using it so<font color="#CCCCCC"> if</font><font color="#E5E5E5"> you're sort of</font>

60
00:02:34,829 --> 00:02:39,000
new to the Android malware analysis<font color="#E5E5E5"> we</font>

61
00:02:37,019 --> 00:02:41,370
<font color="#E5E5E5">have our apk that's your Android</font>

62
00:02:39,000 --> 00:02:44,040
application<font color="#E5E5E5"> and in there you'll usually</font>

63
00:02:41,370 --> 00:02:45,919
see<font color="#E5E5E5"> it's mostly running on the Java code</font>

64
00:02:44,040 --> 00:02:48,569
which<font color="#CCCCCC"> you will find in classes.dex</font>

65
00:02:45,919 --> 00:02:51,450
<font color="#CCCCCC">however developers can choose to write</font>

66
00:02:48,569 --> 00:02:53,790
and have functionality<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is also in</font>

67
00:02:51,450 --> 00:02:55,768
<font color="#E5E5E5">the C or C++ compiled code and that's</font>

68
00:02:53,790 --> 00:02:58,709
what we're talking<font color="#CCCCCC"> about</font><font color="#E5E5E5"> today one of</font>

69
00:02:55,769 --> 00:03:01,590
these elf libraries<font color="#CCCCCC"> a shared object</font><font color="#E5E5E5"> that</font>

70
00:02:58,709 --> 00:03:06,329
is<font color="#E5E5E5"> embedded in the</font><font color="#CCCCCC"> apk</font><font color="#E5E5E5"> and has the</font>

71
00:03:01,590 --> 00:03:08,129
native functionality so what are we

72
00:03:06,329 --> 00:03:10,980
<font color="#CCCCCC">talking about</font><font color="#E5E5E5"> we are</font><font color="#CCCCCC"> going to talk about</font>

73
00:03:08,129 --> 00:03:13,048
<font color="#E5E5E5">the</font><font color="#CCCCCC"> wedding take</font><font color="#E5E5E5"> anti analysis library</font>

74
00:03:10,980 --> 00:03:14,940
which is<font color="#E5E5E5"> this native code and why</font>

75
00:03:13,049 --> 00:03:17,370
wedding-cake is<font color="#E5E5E5"> cuz it's got lots of</font>

76
00:03:14,940 --> 00:03:19,650
layers<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we're gonna go over all of</font>

77
00:03:17,370 --> 00:03:22,919
<font color="#CCCCCC">these different layers</font><font color="#E5E5E5"> why it's so</font>

78
00:03:19,650 --> 00:03:25,199
robust<font color="#CCCCCC"> what makes it so interesting and</font>

79
00:03:22,919 --> 00:03:26,370
how can<font color="#E5E5E5"> you reverse engineer</font><font color="#CCCCCC"> it more</font>

80
00:03:25,199 --> 00:03:28,739
quickly<font color="#E5E5E5"> and what would I have</font><font color="#CCCCCC"> done</font>

81
00:03:26,370 --> 00:03:33,449
<font color="#CCCCCC">instead</font><font color="#E5E5E5"> of falling support each of their</font>

82
00:03:28,739 --> 00:03:35,970
traps<font color="#E5E5E5"> along the way so once again why</font>

83
00:03:33,449 --> 00:03:38,099
<font color="#CCCCCC">wedding-cake</font><font color="#E5E5E5"> why is this interesting</font>

84
00:03:35,970 --> 00:03:41,699
so since<font color="#E5E5E5"> doing this research I have</font>

85
00:03:38,099 --> 00:03:44,129
<font color="#CCCCCC">found at least 5,000 distinct sip apks</font>

86
00:03:41,699 --> 00:03:48,120
in the wild<font color="#E5E5E5"> that</font><font color="#CCCCCC"> contain wedding cake</font>

87
00:03:44,129 --> 00:03:50,608
none<font color="#E5E5E5"> of these samples are benign all of</font>

88
00:03:48,120 --> 00:03:52,709
them are well malware<font color="#E5E5E5"> and one of the</font>

89
00:03:50,609 --> 00:03:56,579
most notable aspects<font color="#E5E5E5"> is the</font><font color="#CCCCCC"> newer</font>

90
00:03:52,709 --> 00:03:58,680
variants of the<font color="#CCCCCC"> chinois android</font><font color="#E5E5E5"> botnet</font>

91
00:03:56,579 --> 00:04:00,389
family which this links<font color="#CCCCCC"> to when the</font>

92
00:03:58,680 --> 00:04:03,209
sides are posted a<font color="#CCCCCC"> blog post we did</font>

93
00:04:00,389 --> 00:04:06,329
about<font color="#CCCCCC"> it before is using this</font><font color="#E5E5E5"> to hide</font>

94
00:04:03,209 --> 00:04:09,659
their functionality<font color="#E5E5E5"> so what wedding cake</font>

95
00:04:06,329 --> 00:04:12,030
is is it wraps<font color="#E5E5E5"> the functionality</font><font color="#CCCCCC"> that</font>

96
00:04:09,659 --> 00:04:14,578
the<font color="#E5E5E5"> malware</font><font color="#CCCCCC"> authors are trying to hide</font>

97
00:04:12,030 --> 00:04:19,380
so this diagram<font color="#E5E5E5"> came from the initial</font>

98
00:04:14,579 --> 00:04:21,329
<font color="#CCCCCC">blog post about Shinhwa in late 2016 so</font>

99
00:04:19,380 --> 00:04:22,430
what we're gonna focus on<font color="#CCCCCC"> is stage</font><font color="#E5E5E5"> 3</font>

100
00:04:21,329 --> 00:04:24,919
which is<font color="#E5E5E5"> the elf</font>

101
00:04:22,430 --> 00:04:25,729
so that's what they had studied<font color="#E5E5E5"> analyzed</font>

102
00:04:24,919 --> 00:04:29,508
back then

103
00:04:25,729 --> 00:04:32,780
what's new is now you see<font color="#E5E5E5"> this wedding</font>

104
00:04:29,509 --> 00:04:34,970
cake<font color="#CCCCCC"> packs jar but once I finally</font><font color="#E5E5E5"> got</font>

105
00:04:32,780 --> 00:04:37,669
through<font color="#E5E5E5"> all of the anti reversing and</font>

106
00:04:34,970 --> 00:04:38,750
anti analysis techniques the<font color="#E5E5E5"> decryption</font>

107
00:04:37,669 --> 00:04:41,570
and everything we're<font color="#E5E5E5"> gonna talk about</font>

108
00:04:38,750 --> 00:04:43,639
<font color="#E5E5E5">today what I found was I had</font><font color="#CCCCCC"> just</font>

109
00:04:41,570 --> 00:04:46,759
unpacked the<font color="#CCCCCC"> packed on packer</font>

110
00:04:43,639 --> 00:04:49,220
<font color="#E5E5E5">because that's what stage</font><font color="#CCCCCC"> 3 was so I was</font>

111
00:04:46,759 --> 00:04:52,870
<font color="#CCCCCC">able to</font><font color="#E5E5E5"> then say yes this is a part of</font>

112
00:04:49,220 --> 00:04:55,729
this<font color="#CCCCCC"> family and I now know that this</font>

113
00:04:52,870 --> 00:04:58,370
these signatures of this elf<font color="#E5E5E5"> which I've</font>

114
00:04:55,729 --> 00:05:02,419
now<font color="#E5E5E5"> called wedding cake</font><font color="#CCCCCC"> just wrap</font>

115
00:04:58,370 --> 00:05:03,560
<font color="#E5E5E5">everything else so what are all these</font>

116
00:05:02,419 --> 00:05:05,139
different<font color="#E5E5E5"> techniques that we're going to</font>

117
00:05:03,560 --> 00:05:06,919
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> about what makes it so interesting</font>

118
00:05:05,139 --> 00:05:09,400
<font color="#E5E5E5">first one of the things that's</font>

119
00:05:06,919 --> 00:05:11,900
<font color="#E5E5E5">interesting is previously</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> Android</font>

120
00:05:09,400 --> 00:05:14,448
<font color="#CCCCCC">what we've seen is generally if someone</font>

121
00:05:11,900 --> 00:05:16,250
was going<font color="#E5E5E5"> to implement anti analysis and</font>

122
00:05:14,449 --> 00:05:18,560
tie a debugging<font color="#E5E5E5"> types of techniques they</font>

123
00:05:16,250 --> 00:05:20,630
were usually<font color="#E5E5E5"> still in job because that's</font>

124
00:05:18,560 --> 00:05:23,570
what<font color="#E5E5E5"> the malware developers were already</font>

125
00:05:20,630 --> 00:05:26,330
<font color="#E5E5E5">using it's sometimes have a lower point</font>

126
00:05:23,570 --> 00:05:27,979
of entry than C or C++ compiled code so

127
00:05:26,330 --> 00:05:31,698
the first notable thing was that<font color="#CCCCCC"> all of</font>

128
00:05:27,979 --> 00:05:33,889
<font color="#E5E5E5">this is in native code first we're gonna</font>

129
00:05:31,699 --> 00:05:36,260
<font color="#CCCCCC">start about some of the j'ni or Java</font>

130
00:05:33,889 --> 00:05:38,570
native interface manipulations<font color="#E5E5E5"> then</font>

131
00:05:36,260 --> 00:05:40,340
we're gonna go<font color="#CCCCCC"> into</font><font color="#E5E5E5"> some places where</font>

132
00:05:38,570 --> 00:05:43,130
they've used<font color="#E5E5E5"> anti reversing techniques</font>

133
00:05:40,340 --> 00:05:45,289
<font color="#E5E5E5">in place</font><font color="#CCCCCC"> decryption and finally to about</font>

134
00:05:43,130 --> 00:05:47,719
40 different runtime environment checks

135
00:05:45,289 --> 00:05:50,539
that they use so none<font color="#CCCCCC"> of these in and of</font>

136
00:05:47,720 --> 00:05:52,760
themselves are super novel<font color="#E5E5E5"> but the fact</font>

137
00:05:50,539 --> 00:05:55,099
that they embedded<font color="#E5E5E5"> each one in each</font>

138
00:05:52,760 --> 00:05:58,219
other<font color="#E5E5E5"> is what made it so complex and</font>

139
00:05:55,099 --> 00:06:02,479
difficult<font color="#E5E5E5"> to both signature reverse and</font>

140
00:05:58,220 --> 00:06:04,580
understand what was<font color="#CCCCCC"> happening</font><font color="#E5E5E5"> so what's</font>

141
00:06:02,479 --> 00:06:06,800
the characteristics how can you notice

142
00:06:04,580 --> 00:06:09,409
<font color="#E5E5E5">if you've seen it</font><font color="#CCCCCC"> or not very first</font>

143
00:06:06,800 --> 00:06:13,520
thing<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that as we've said it's an Elfa</font>

144
00:06:09,409 --> 00:06:15,590
<font color="#CCCCCC">FL file in the</font><font color="#E5E5E5"> apk usually it is three</font>

145
00:06:13,520 --> 00:06:17,389
to eight random lowercase letters is how

146
00:06:15,590 --> 00:06:20,448
they've named<font color="#E5E5E5"> it probably not after this</font>

147
00:06:17,389 --> 00:06:23,510
talk<font color="#E5E5E5"> but you know so the other thing is</font>

148
00:06:20,449 --> 00:06:25,909
<font color="#CCCCCC">that the</font><font color="#E5E5E5"> Java code that has to interact</font>

149
00:06:23,510 --> 00:06:28,699
<font color="#CCCCCC">with this native library</font><font color="#E5E5E5"> it is always</font>

150
00:06:25,909 --> 00:06:30,830
random<font color="#CCCCCC"> lettered class names as well</font><font color="#E5E5E5"> so</font>

151
00:06:28,699 --> 00:06:34,099
what<font color="#E5E5E5"> that also tells us is that this is</font>

152
00:06:30,830 --> 00:06:35,669
distributed as source<font color="#E5E5E5"> code or and so it</font>

153
00:06:34,099 --> 00:06:37,500
is dynamically generating the

154
00:06:35,670 --> 00:06:40,610
last names in<font color="#E5E5E5"> the library names every</font>

155
00:06:37,500 --> 00:06:43,230
time they build the application<font color="#E5E5E5"> lastly</font>

156
00:06:40,610 --> 00:06:45,120
<font color="#E5E5E5">two things you can look</font><font color="#CCCCCC"> for but probably</font>

157
00:06:43,230 --> 00:06:48,210
not<font color="#E5E5E5"> in</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> couple of weeks anymore are</font>

158
00:06:45,120 --> 00:06:53,880
these two strings<font color="#E5E5E5"> in the comment section</font>

159
00:06:48,210 --> 00:06:56,849
of the elf<font color="#CCCCCC"> a few more of the more key</font>

160
00:06:53,880 --> 00:07:01,950
characteristics of<font color="#E5E5E5"> wedding-cake is that</font>

161
00:06:56,850 --> 00:07:04,290
there is<font color="#CCCCCC"> always two native methods</font><font color="#E5E5E5"> that</font>

162
00:07:01,950 --> 00:07:06,090
are declared<font color="#CCCCCC"> in the java application so</font>

163
00:07:04,290 --> 00:07:08,070
we're gonna go over<font color="#CCCCCC"> a bit how the J&I</font>

164
00:07:06,090 --> 00:07:10,770
works and how execution is passed from

165
00:07:08,070 --> 00:07:12,840
<font color="#E5E5E5">the java code into the</font><font color="#CCCCCC"> native code</font><font color="#E5E5E5"> but</font>

166
00:07:10,770 --> 00:07:14,700
what you'll see is that<font color="#E5E5E5"> there are always</font>

167
00:07:12,840 --> 00:07:17,820
these two functions<font color="#E5E5E5"> and there's</font>

168
00:07:14,700 --> 00:07:20,010
sometimes<font color="#E5E5E5"> this third depending on the</font>

169
00:07:17,820 --> 00:07:22,710
sort<font color="#E5E5E5"> of version and when they compiled</font>

170
00:07:20,010 --> 00:07:23,849
it so the main function that our method

171
00:07:22,710 --> 00:07:25,710
that we will<font color="#E5E5E5"> talk about that they</font>

172
00:07:23,850 --> 00:07:28,770
implement in the native code is here

173
00:07:25,710 --> 00:07:30,930
<font color="#E5E5E5">called</font><font color="#CCCCCC"> VX eg again dynamically generated</font>

174
00:07:28,770 --> 00:07:32,400
at compile time<font color="#E5E5E5"> but this is going to be</font>

175
00:07:30,930 --> 00:07:34,890
the<font color="#CCCCCC"> function that performs all of our</font>

176
00:07:32,400 --> 00:07:36,900
runtime<font color="#E5E5E5"> environment checks and starts</font>

177
00:07:34,890 --> 00:07:40,050
that main functionality of<font color="#E5E5E5"> the elf that</font>

178
00:07:36,900 --> 00:07:42,090
<font color="#CCCCCC">the malware author was trying to hide in</font>

179
00:07:40,050 --> 00:07:44,250
every version<font color="#E5E5E5"> though you will see that</font>

180
00:07:42,090 --> 00:07:47,369
they<font color="#CCCCCC"> have these same methods</font><font color="#E5E5E5"> signatures</font>

181
00:07:44,250 --> 00:07:51,110
so for example<font color="#E5E5E5"> VX</font><font color="#CCCCCC"> eg returns an int and</font>

182
00:07:47,370 --> 00:07:53,430
takes an<font color="#CCCCCC"> object array as the arguments</font>

183
00:07:51,110 --> 00:07:55,230
one of the other<font color="#CCCCCC"> interesting things I</font>

184
00:07:53,430 --> 00:07:56,820
<font color="#CCCCCC">found is I really tried to understand</font>

185
00:07:55,230 --> 00:07:58,530
all<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> different variants and how</font>

186
00:07:56,820 --> 00:08:00,480
<font color="#CCCCCC">well these</font><font color="#E5E5E5"> different</font><font color="#CCCCCC"> samples were using</font>

187
00:07:58,530 --> 00:08:04,109
it is that there are many different<font color="#CCCCCC"> CPU</font>

188
00:08:00,480 --> 00:08:05,910
variants of<font color="#E5E5E5"> it so the most common</font><font color="#CCCCCC"> is in</font>

189
00:08:04,110 --> 00:08:08,730
most of the Android ecosystem is a

190
00:08:05,910 --> 00:08:12,180
<font color="#E5E5E5">32-bit what they call an Android generic</font>

191
00:08:08,730 --> 00:08:15,420
arm so that<font color="#E5E5E5"> uses a CPU</font><font color="#CCCCCC"> cut keyword army</font>

192
00:08:12,180 --> 00:08:21,210
<font color="#E5E5E5">ABI but I've also seen</font><font color="#CCCCCC"> verge 32-bit</font><font color="#E5E5E5"> arm</font>

193
00:08:15,420 --> 00:08:23,580
v7 arm 64<font color="#E5E5E5"> as well as x86</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> is a link</font>

194
00:08:21,210 --> 00:08:26,340
<font color="#E5E5E5">to virustotal and a digest for one of</font>

195
00:08:23,580 --> 00:08:28,800
the<font color="#CCCCCC"> APK samples</font><font color="#E5E5E5"> that includes three</font><font color="#CCCCCC"> of</font>

196
00:08:26,340 --> 00:08:30,359
<font color="#CCCCCC">these</font><font color="#E5E5E5"> different</font><font color="#CCCCCC"> CPU variants in it and</font>

197
00:08:28,800 --> 00:08:32,430
what's<font color="#E5E5E5"> really interesting and what we</font>

198
00:08:30,360 --> 00:08:34,820
can<font color="#E5E5E5"> talk about and keep in mind going</font>

199
00:08:32,429 --> 00:08:36,859
through<font color="#CCCCCC"> the rest</font><font color="#E5E5E5"> of this talk is that</font>

200
00:08:34,820 --> 00:08:39,050
every single<font color="#E5E5E5"> one of these different CPU</font>

201
00:08:36,860 --> 00:08:43,060
variants has the same functionality<font color="#CCCCCC"> so</font>

202
00:08:39,049 --> 00:08:46,819
that's not changing<font color="#CCCCCC"> across any of</font><font color="#E5E5E5"> them</font>

203
00:08:43,059 --> 00:08:49,939
so let's start analyzing<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is the</font>

204
00:08:46,820 --> 00:08:51,560
<font color="#E5E5E5">sample that</font><font color="#CCCCCC"> I have used as sort of</font><font color="#E5E5E5"> walk</font>

205
00:08:49,940 --> 00:08:54,230
<font color="#E5E5E5">through it</font><font color="#CCCCCC"> later on</font><font color="#E5E5E5"> you're interested</font>

206
00:08:51,560 --> 00:08:57,530
it's up on<font color="#E5E5E5"> virustotal as well so you can</font>

207
00:08:54,230 --> 00:08:58,970
<font color="#E5E5E5">look into</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> and follow along later when</font>

208
00:08:57,530 --> 00:09:03,680
I post the slides<font color="#E5E5E5"> if you're interested</font>

209
00:08:58,970 --> 00:09:06,320
in that so first what is<font color="#E5E5E5"> J and</font><font color="#CCCCCC"> I how</font><font color="#E5E5E5"> do</font>

210
00:09:03,680 --> 00:09:09,170
<font color="#CCCCCC">Android apps even use native code</font>

211
00:09:06,320 --> 00:09:11,870
so basically Java native interface<font color="#E5E5E5"> in</font>

212
00:09:09,170 --> 00:09:14,209
your java application where execution

213
00:09:11,870 --> 00:09:16,550
has<font color="#CCCCCC"> to start</font><font color="#E5E5E5"> in the Android app you</font><font color="#CCCCCC"> can</font>

214
00:09:14,210 --> 00:09:19,340
<font color="#E5E5E5">declare that</font><font color="#CCCCCC"> you have methods</font><font color="#E5E5E5"> that are</font>

215
00:09:16,550 --> 00:09:23,300
implemented<font color="#CCCCCC"> in your</font><font color="#E5E5E5"> C or C++ or other</font>

216
00:09:19,340 --> 00:09:25,910
compiled code so you<font color="#CCCCCC"> just declare it as</font>

217
00:09:23,300 --> 00:09:29,359
you see here<font color="#E5E5E5"> native</font><font color="#CCCCCC"> keyword there's</font>

218
00:09:25,910 --> 00:09:36,050
nothing else<font color="#CCCCCC"> in that</font><font color="#E5E5E5"> method then you</font>

219
00:09:29,360 --> 00:09:38,270
<font color="#CCCCCC">just write it and C or C++ but the j'ni</font>

220
00:09:36,050 --> 00:09:41,599
interface<font color="#E5E5E5"> has</font><font color="#CCCCCC"> to actually know how</font><font color="#E5E5E5"> to</font>

221
00:09:38,270 --> 00:09:43,670
pair these two things<font color="#E5E5E5"> so and it</font><font color="#CCCCCC"> has to</font>

222
00:09:41,600 --> 00:09:45,230
know where to<font color="#CCCCCC"> look for</font><font color="#E5E5E5"> these methods</font><font color="#CCCCCC"> and</font>

223
00:09:43,670 --> 00:09:47,540
<font color="#E5E5E5">where they might</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> implemented for</font><font color="#CCCCCC"> the</font>

224
00:09:45,230 --> 00:09:50,630
so the very first<font color="#CCCCCC"> thing you'll</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> to</font>

225
00:09:47,540 --> 00:09:53,959
do in the<font color="#E5E5E5"> Java side of your or Kotlin of</font>

226
00:09:50,630 --> 00:09:57,380
your hand<font color="#CCCCCC"> roid application is load into</font>

227
00:09:53,960 --> 00:09:59,900
memory<font color="#E5E5E5"> that native library so you have</font>

228
00:09:57,380 --> 00:10:02,270
two<font color="#E5E5E5"> options</font><font color="#CCCCCC"> both basically perform the</font>

229
00:09:59,900 --> 00:10:04,640
same thing system dot load library<font color="#CCCCCC"> or</font>

230
00:10:02,270 --> 00:10:07,100
system got load the key thing to

231
00:10:04,640 --> 00:10:10,310
remember<font color="#E5E5E5"> as we get into</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> disassembly</font>

232
00:10:07,100 --> 00:10:13,190
of<font color="#E5E5E5"> the elf is that when either these</font><font color="#CCCCCC"> two</font>

233
00:10:10,310 --> 00:10:16,250
methods are called in Java<font color="#E5E5E5"> that calls</font>

234
00:10:13,190 --> 00:10:19,400
the exported method in<font color="#CCCCCC"> me or exported</font>

235
00:10:16,250 --> 00:10:21,200
function any elf called<font color="#CCCCCC"> j'ni</font><font color="#E5E5E5"> onload so</font>

236
00:10:19,400 --> 00:10:24,280
this is<font color="#E5E5E5"> going to become really important</font>

237
00:10:21,200 --> 00:10:24,280
later in<font color="#E5E5E5"> our analysis</font>

238
00:10:24,550 --> 00:10:30,290
so now you've<font color="#CCCCCC"> loaded this</font><font color="#E5E5E5"> into memory</font>

239
00:10:27,560 --> 00:10:32,930
but how still is this<font color="#E5E5E5"> J&I going to</font>

240
00:10:30,290 --> 00:10:36,680
understand that<font color="#E5E5E5"> this Java declared</font>

241
00:10:32,930 --> 00:10:38,750
method is going<font color="#E5E5E5"> to match up</font><font color="#CCCCCC"> and run</font><font color="#E5E5E5"> this</font>

242
00:10:36,680 --> 00:10:42,380
native method<font color="#E5E5E5"> there has to be some way</font>

243
00:10:38,750 --> 00:10:43,100
<font color="#CCCCCC">to pair and know that these two</font><font color="#E5E5E5"> things</font>

244
00:10:42,380 --> 00:10:45,450
go<font color="#CCCCCC"> together</font>

245
00:10:43,100 --> 00:10:49,170
<font color="#E5E5E5">so you have two options</font>

246
00:10:45,450 --> 00:10:52,770
one is discovery<font color="#CCCCCC"> where in your compiled</font>

247
00:10:49,170 --> 00:10:54,689
code the method or<font color="#CCCCCC"> the implementation of</font>

248
00:10:52,770 --> 00:10:57,510
<font color="#E5E5E5">the method so the function there is</font>

249
00:10:54,690 --> 00:10:59,940
named<font color="#E5E5E5"> Java</font><font color="#CCCCCC"> underscore the</font><font color="#E5E5E5"> mangled class</font>

250
00:10:57,510 --> 00:11:01,860
name underscored the mangled mess<font color="#E5E5E5"> a name</font>

251
00:10:59,940 --> 00:11:04,470
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is really nice</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> it's a</font>

252
00:11:01,860 --> 00:11:06,900
really<font color="#CCCCCC"> easy indicator to look and find</font>

253
00:11:04,470 --> 00:11:09,120
in your elf<font color="#CCCCCC"> if you're trying to</font><font color="#E5E5E5"> pair and</font>

254
00:11:06,900 --> 00:11:11,040
understand what's being run when that

255
00:11:09,120 --> 00:11:13,920
Java<font color="#E5E5E5"> native method is called from the</font>

256
00:11:11,040 --> 00:11:16,770
application the second option that

257
00:11:13,920 --> 00:11:20,099
developers can<font color="#CCCCCC"> use is</font><font color="#E5E5E5"> called is using</font>

258
00:11:16,770 --> 00:11:21,840
the register native function so this you

259
00:11:20,100 --> 00:11:23,970
<font color="#CCCCCC">can you don't</font><font color="#E5E5E5"> have to have any of</font><font color="#CCCCCC"> your</font>

260
00:11:21,840 --> 00:11:27,510
functions named<font color="#E5E5E5"> in the elf</font><font color="#CCCCCC"> but what you</font>

261
00:11:23,970 --> 00:11:29,580
will still<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to use is a string of</font>

262
00:11:27,510 --> 00:11:32,750
the both the method<font color="#E5E5E5"> name and the</font><font color="#CCCCCC"> method</font>

263
00:11:29,580 --> 00:11:35,430
signature<font color="#E5E5E5"> so they know</font><font color="#CCCCCC"> that this</font>

264
00:11:32,750 --> 00:11:38,130
function and that<font color="#CCCCCC"> is in the compiled</font>

265
00:11:35,430 --> 00:11:41,729
code<font color="#E5E5E5"> is what is run when you call the</font>

266
00:11:38,130 --> 00:11:44,130
Java<font color="#E5E5E5"> native method so this is what</font>

267
00:11:41,730 --> 00:11:47,370
register<font color="#E5E5E5"> native signature looks like and</font>

268
00:11:44,130 --> 00:11:50,370
what<font color="#E5E5E5"> the key we need to remember is that</font>

269
00:11:47,370 --> 00:11:53,310
<font color="#CCCCCC">it</font><font color="#E5E5E5"> requires this string or the car array</font>

270
00:11:50,370 --> 00:11:56,130
of name and<font color="#E5E5E5"> the signature and what</font><font color="#CCCCCC"> I</font>

271
00:11:53,310 --> 00:11:59,459
mean<font color="#E5E5E5"> by signature in this context is</font>

272
00:11:56,130 --> 00:12:04,410
here is one of our<font color="#E5E5E5"> Java native declared</font>

273
00:11:59,460 --> 00:12:08,220
methods<font color="#CCCCCC"> so if it was returning</font><font color="#E5E5E5"> a string</font>

274
00:12:04,410 --> 00:12:10,350
<font color="#CCCCCC">and taking a integer</font><font color="#E5E5E5"> as an argument then</font>

275
00:12:08,220 --> 00:12:13,110
you'll have the I in the<font color="#CCCCCC"> parenthesis and</font>

276
00:12:10,350 --> 00:12:16,440
<font color="#CCCCCC">then the type that's being returned at</font>

277
00:12:13,110 --> 00:12:21,000
the<font color="#CCCCCC"> end</font><font color="#E5E5E5"> so these are really easy things</font>

278
00:12:16,440 --> 00:12:23,490
<font color="#CCCCCC">to identify when you have your elf but</font>

279
00:12:21,000 --> 00:12:26,220
<font color="#E5E5E5">when I opened up the</font><font color="#CCCCCC"> library that</font><font color="#E5E5E5"> was in</font>

280
00:12:23,490 --> 00:12:27,810
my sample to start<font color="#E5E5E5"> I didn't see any of</font>

281
00:12:26,220 --> 00:12:30,270
this there were no strings

282
00:12:27,810 --> 00:12:31,829
<font color="#E5E5E5">none of the functions were named it</font>

283
00:12:30,270 --> 00:12:35,310
didn't even have<font color="#E5E5E5"> J and I on mode</font>

284
00:12:31,830 --> 00:12:37,860
declared in the function<font color="#E5E5E5"> and what this</font>

285
00:12:35,310 --> 00:12:40,739
was is that<font color="#E5E5E5"> in every disassembler I've</font>

286
00:12:37,860 --> 00:12:44,580
opened<font color="#E5E5E5"> or every disassembler I've tried</font>

287
00:12:40,740 --> 00:12:47,370
<font color="#CCCCCC">this far</font><font color="#E5E5E5"> including Ida Pro when you try</font>

288
00:12:44,580 --> 00:12:50,310
and<font color="#CCCCCC"> look at the code that is labeled</font><font color="#E5E5E5"> as</font>

289
00:12:47,370 --> 00:12:52,920
J and<font color="#E5E5E5"> I on mode I know it's not able to</font>

290
00:12:50,310 --> 00:12:54,498
define<font color="#CCCCCC"> it as a function</font><font color="#E5E5E5"> due to these two</font>

291
00:12:52,920 --> 00:12:56,449
blocks of data

292
00:12:54,499 --> 00:12:59,419
that is another really<font color="#E5E5E5"> strong indicator</font>

293
00:12:56,449 --> 00:13:01,368
and signature<font color="#E5E5E5"> when I've</font><font color="#CCCCCC"> been able</font><font color="#E5E5E5"> to</font>

294
00:12:59,419 --> 00:13:03,679
open<font color="#CCCCCC"> it up because this has been true of</font>

295
00:13:01,369 --> 00:13:08,659
every different<font color="#E5E5E5"> sample that was compiled</font>

296
00:13:03,679 --> 00:13:10,968
in<font color="#E5E5E5"> 32-bit arm so first thing you</font><font color="#CCCCCC"> gotta</font>

297
00:13:08,659 --> 00:13:12,619
do to figure<font color="#E5E5E5"> it out is</font><font color="#CCCCCC"> super-easy just</font>

298
00:13:10,969 --> 00:13:14,829
declare it<font color="#E5E5E5"> as code you have</font><font color="#CCCCCC"> your</font>

299
00:13:12,619 --> 00:13:18,229
<font color="#CCCCCC">function but now where do we</font><font color="#E5E5E5"> start</font>

300
00:13:14,829 --> 00:13:20,899
because we wanted<font color="#E5E5E5"> to focus our analysis</font>

301
00:13:18,229 --> 00:13:22,999
on<font color="#E5E5E5"> those Java declared methods they were</font>

302
00:13:20,899 --> 00:13:27,499
declared<font color="#E5E5E5"> for a reason we see them called</font>

303
00:13:22,999 --> 00:13:30,109
in the<font color="#E5E5E5"> Java code yet we can't find what</font>

304
00:13:27,499 --> 00:13:32,419
is actually implemented to be associated

305
00:13:30,109 --> 00:13:35,839
with<font color="#E5E5E5"> those methods because they should</font>

306
00:13:32,419 --> 00:13:38,478
either have<font color="#E5E5E5"> a native function here in</font>

307
00:13:35,839 --> 00:13:40,759
the elf<font color="#E5E5E5"> with that mangled</font><font color="#CCCCCC"> Java name or</font>

308
00:13:38,479 --> 00:13:42,469
they should have the strings of<font color="#CCCCCC"> the</font>

309
00:13:40,759 --> 00:13:46,549
signature<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the name for register</font>

310
00:13:42,469 --> 00:13:50,269
natives to run on it so where I decided

311
00:13:46,549 --> 00:13:53,869
<font color="#E5E5E5">to start with J&I</font><font color="#CCCCCC"> onload because before</font>

312
00:13:50,269 --> 00:13:56,119
any<font color="#E5E5E5"> of those native methods could run</font>

313
00:13:53,869 --> 00:13:58,789
<font color="#E5E5E5">you still had to load the library into</font>

314
00:13:56,119 --> 00:14:01,609
memory<font color="#E5E5E5"> and when I started</font><font color="#CCCCCC"> looking at J&I</font>

315
00:13:58,789 --> 00:14:05,569
<font color="#CCCCCC">onload</font><font color="#E5E5E5"> it had all of these repetitive</font>

316
00:14:01,609 --> 00:14:08,149
<font color="#E5E5E5">calls to the same function at the end</font>

317
00:14:05,569 --> 00:14:10,669
and it was taking<font color="#E5E5E5"> in arguments of</font>

318
00:14:08,149 --> 00:14:13,009
different blocks of memory<font color="#E5E5E5"> so this isn't</font>

319
00:14:10,669 --> 00:14:16,699
a really really<font color="#E5E5E5"> strong signal</font><font color="#CCCCCC"> of</font>

320
00:14:13,009 --> 00:14:18,949
encryption<font color="#E5E5E5"> or decryption</font><font color="#CCCCCC"> because you</font>

321
00:14:16,699 --> 00:14:20,929
have to run the decryption<font color="#E5E5E5"> function over</font>

322
00:14:18,949 --> 00:14:22,579
different<font color="#E5E5E5"> places and then hopefully</font>

323
00:14:20,929 --> 00:14:26,539
<font color="#E5E5E5">we'll have more information about how</font>

324
00:14:22,579 --> 00:14:28,728
<font color="#CCCCCC">this works so in this case all of</font><font color="#E5E5E5"> the</font>

325
00:14:26,539 --> 00:14:32,959
yellow blocks are the calls<font color="#E5E5E5"> to the same</font>

326
00:14:28,729 --> 00:14:34,879
<font color="#E5E5E5">function sub</font><font color="#CCCCCC"> 2 f 3 0 I highlighted</font><font color="#E5E5E5"> one</font>

327
00:14:32,959 --> 00:14:36,439
of them and<font color="#CCCCCC"> that's gonna be our what</font><font color="#E5E5E5"> we</font>

328
00:14:34,879 --> 00:14:41,209
believe right<font color="#CCCCCC"> now is our decryption</font>

329
00:14:36,439 --> 00:14:43,669
subroutine so that's the<font color="#E5E5E5"> next place to</font>

330
00:14:41,209 --> 00:14:45,319
<font color="#E5E5E5">start because obviously I want to</font>

331
00:14:43,669 --> 00:14:48,859
understand<font color="#E5E5E5"> and be</font><font color="#CCCCCC"> able to</font><font color="#E5E5E5"> analyze this</font>

332
00:14:45,319 --> 00:14:51,529
lab library as it runs in memory<font color="#E5E5E5"> so go</font>

333
00:14:48,859 --> 00:14:53,299
ahead<font color="#E5E5E5"> figure out put the different</font>

334
00:14:51,529 --> 00:14:55,519
<font color="#E5E5E5">arguments in there it takes four</font>

335
00:14:53,299 --> 00:14:58,459
arguments<font color="#E5E5E5"> each time it's called first</font>

336
00:14:55,519 --> 00:15:00,049
the pointer to the<font color="#CCCCCC"> encrypted bytes</font><font color="#E5E5E5"> the</font>

337
00:14:58,459 --> 00:15:02,929
length of those bytes that<font color="#E5E5E5"> should be</font>

338
00:15:00,049 --> 00:15:04,079
<font color="#CCCCCC">decrypted and then it has two arguments</font>

339
00:15:02,929 --> 00:15:07,530
that stay the same

340
00:15:04,080 --> 00:15:10,890
whole time<font color="#E5E5E5"> we have a word</font><font color="#CCCCCC"> co2 ray</font><font color="#E5E5E5"> which</font>

341
00:15:07,530 --> 00:15:14,420
is<font color="#E5E5E5"> an array of</font><font color="#CCCCCC"> four bytes of each</font><font color="#E5E5E5"> mouth</font>

342
00:15:10,890 --> 00:15:17,069
<font color="#E5E5E5">or each byte in each value is four bytes</font>

343
00:15:14,420 --> 00:15:18,990
and then<font color="#E5E5E5"> a byte seat array so these are</font>

344
00:15:17,070 --> 00:15:21,390
<font color="#E5E5E5">generated before any of the trypsin</font>

345
00:15:18,990 --> 00:15:25,850
calls<font color="#E5E5E5"> start and then the same things</font><font color="#CCCCCC"> is</font>

346
00:15:21,390 --> 00:15:28,290
<font color="#E5E5E5">passed to each time so this is the</font><font color="#CCCCCC"> idath</font>

347
00:15:25,850 --> 00:15:30,750
generated<font color="#E5E5E5"> decompiler which</font><font color="#CCCCCC"> I sort of</font>

348
00:15:28,290 --> 00:15:34,650
cleaned up a little<font color="#E5E5E5"> of what the seed</font>

349
00:15:30,750 --> 00:15:36,330
arrays functions were I went ahead went

350
00:15:34,650 --> 00:15:39,360
through this<font color="#E5E5E5"> tried to understand it</font>

351
00:15:36,330 --> 00:15:43,230
<font color="#E5E5E5">coated up a super simple thing in Python</font>

352
00:15:39,360 --> 00:15:45,900
<font color="#E5E5E5">to go</font><font color="#CCCCCC"> ahead and generate it so I could</font>

353
00:15:43,230 --> 00:15:49,340
<font color="#E5E5E5">see what those</font><font color="#CCCCCC"> values were and what I</font>

354
00:15:45,900 --> 00:15:53,970
found is<font color="#CCCCCC"> that they</font><font color="#E5E5E5"> simply were</font>

355
00:15:49,340 --> 00:15:56,640
allocating two arrays from<font color="#CCCCCC"> 0 to 255</font><font color="#E5E5E5"> so</font>

356
00:15:53,970 --> 00:16:00,420
they wrote this complex algorithm

357
00:15:56,640 --> 00:16:02,850
instead<font color="#CCCCCC"> of two lines to allocate these</font>

358
00:16:00,420 --> 00:16:05,819
arrays so<font color="#CCCCCC"> this was a</font><font color="#E5E5E5"> first technique in</font>

359
00:16:02,850 --> 00:16:07,740
a really great use<font color="#E5E5E5"> of my</font><font color="#CCCCCC"> 6 hours as I</font>

360
00:16:05,820 --> 00:16:10,140
was coding it up and trying<font color="#E5E5E5"> to</font>

361
00:16:07,740 --> 00:16:13,890
understand<font color="#E5E5E5"> what it was doing so what I</font>

362
00:16:10,140 --> 00:16:16,920
would<font color="#E5E5E5"> suggest in the future</font><font color="#CCCCCC"> is that in</font>

363
00:16:13,890 --> 00:16:19,230
what I would<font color="#CCCCCC"> do instead was just run it</font>

364
00:16:16,920 --> 00:16:21,209
<font color="#E5E5E5">dynamically and grab them I already knew</font>

365
00:16:19,230 --> 00:16:23,310
the<font color="#CCCCCC"> same values were passed each time</font>

366
00:16:21,210 --> 00:16:25,890
they weren't<font color="#E5E5E5"> being regenerated</font><font color="#CCCCCC"> but</font>

367
00:16:23,310 --> 00:16:28,229
instead I stuck with static reversing

368
00:16:25,890 --> 00:16:30,810
and fell for their anti reversing trap

369
00:16:28,230 --> 00:16:32,850
so hopefully if you all see this

370
00:16:30,810 --> 00:16:35,069
algorithm in the future<font color="#E5E5E5"> too you won't</font>

371
00:16:32,850 --> 00:16:36,890
<font color="#E5E5E5">fall for</font><font color="#CCCCCC"> the same things and I took the</font>

372
00:16:35,070 --> 00:16:41,520
bullet for<font color="#CCCCCC"> all of us</font>

373
00:16:36,890 --> 00:16:46,050
<font color="#E5E5E5">so we now have our seed arrays we can</font>

374
00:16:41,520 --> 00:16:47,400
move on to<font color="#E5E5E5"> the decryption</font><font color="#CCCCCC"> the key</font><font color="#E5E5E5"> and</font>

375
00:16:46,050 --> 00:16:49,560
the<font color="#E5E5E5"> overall framework of how the</font>

376
00:16:47,400 --> 00:16:51,930
<font color="#E5E5E5">decryption works since it's in place and</font>

377
00:16:49,560 --> 00:16:54,959
it<font color="#CCCCCC"> is running during J&I onload so</font>

378
00:16:51,930 --> 00:16:58,890
before the elf is actually there in

379
00:16:54,960 --> 00:17:00,300
<font color="#E5E5E5">memory</font><font color="#CCCCCC"> is that the decryption function</font>

380
00:16:58,890 --> 00:17:03,630
is called on<font color="#CCCCCC"> that</font><font color="#E5E5E5"> encrypted array of</font>

381
00:17:00,300 --> 00:17:05,430
bytes<font color="#E5E5E5"> it does its decryption and then it</font>

382
00:17:03,630 --> 00:17:07,800
actually overrides the<font color="#E5E5E5"> byte the</font>

383
00:17:05,430 --> 00:17:10,800
encrypted bytes in<font color="#CCCCCC"> the same place so</font>

384
00:17:07,800 --> 00:17:11,510
<font color="#CCCCCC">this gives us</font><font color="#E5E5E5"> an idea</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> how to decrypt</font>

385
00:17:10,800 --> 00:17:14,270
it in

386
00:17:11,510 --> 00:17:15,829
how we can<font color="#E5E5E5"> start to analyze it as it</font>

387
00:17:14,270 --> 00:17:18,439
would look in memory<font color="#CCCCCC"> too</font>

388
00:17:15,829 --> 00:17:20,709
I<font color="#E5E5E5"> personally was not able to</font><font color="#CCCCCC"> identify it</font>

389
00:17:18,439 --> 00:17:24,290
as any known encryption decryption

390
00:17:20,709 --> 00:17:26,630
algorithm<font color="#E5E5E5"> but hey if you all can find it</font>

391
00:17:24,290 --> 00:17:28,760
I would be more than<font color="#CCCCCC"> uh I would be very</font>

392
00:17:26,630 --> 00:17:32,169
happy<font color="#CCCCCC"> to know if you see</font><font color="#E5E5E5"> it as something</font>

393
00:17:28,760 --> 00:17:32,169
<font color="#CCCCCC">that you already know</font><font color="#E5E5E5"> and is out there</font>

394
00:17:32,230 --> 00:17:38,809
so at this point the key that I need is

395
00:17:37,340 --> 00:17:41,750
I<font color="#CCCCCC"> would needed a solution that</font><font color="#E5E5E5"> was going</font>

396
00:17:38,809 --> 00:17:43,700
to work fast<font color="#CCCCCC"> and be flexible because</font>

397
00:17:41,750 --> 00:17:46,070
<font color="#E5E5E5">again remember</font><font color="#CCCCCC"> I'm still trying to</font>

398
00:17:43,700 --> 00:17:48,200
<font color="#E5E5E5">decide and</font><font color="#CCCCCC"> make the decision</font><font color="#E5E5E5"> do we need</font>

399
00:17:46,070 --> 00:17:50,418
to start alerting users<font color="#E5E5E5"> or is this</font>

400
00:17:48,200 --> 00:17:52,900
benign and I can pass<font color="#E5E5E5"> and also I knew</font>

401
00:17:50,419 --> 00:17:55,640
that there were at least<font color="#E5E5E5"> a hundred other</font>

402
00:17:52,900 --> 00:17:58,880
samples out there and each<font color="#E5E5E5"> of them are</font>

403
00:17:55,640 --> 00:18:01,250
compiled<font color="#E5E5E5"> differently so my key thoughts</font>

404
00:17:58,880 --> 00:18:03,710
when going<font color="#E5E5E5"> into this was</font><font color="#CCCCCC"> that one I</font>

405
00:18:01,250 --> 00:18:05,330
don't<font color="#E5E5E5"> need to fully understand the</font>

406
00:18:03,710 --> 00:18:07,100
<font color="#E5E5E5">decryption algorithm I just need</font>

407
00:18:05,330 --> 00:18:08,928
something that's going<font color="#E5E5E5"> to run</font><font color="#CCCCCC"> over it</font>

408
00:18:07,100 --> 00:18:11,600
and decrypt it for me so I can<font color="#E5E5E5"> analyze</font>

409
00:18:08,929 --> 00:18:13,880
<font color="#E5E5E5">the contents</font><font color="#CCCCCC"> the second thing I needed</font>

410
00:18:11,600 --> 00:18:15,620
<font color="#E5E5E5">was</font><font color="#CCCCCC"> I needed it to be flexible because I</font>

411
00:18:13,880 --> 00:18:18,200
had so many samples<font color="#CCCCCC"> I didn't want to</font>

412
00:18:15,620 --> 00:18:20,239
have to copy<font color="#E5E5E5"> and paste rewrite it just</font>

413
00:18:18,200 --> 00:18:21,620
for different<font color="#E5E5E5"> memory addresses</font><font color="#CCCCCC"> different</font>

414
00:18:20,240 --> 00:18:24,230
registers that<font color="#E5E5E5"> are used in</font><font color="#CCCCCC"> different</font>

415
00:18:21,620 --> 00:18:26,570
<font color="#E5E5E5">places to develop my solution so those</font>

416
00:18:24,230 --> 00:18:28,640
are the two key things<font color="#E5E5E5"> that I keep in</font>

417
00:18:26,570 --> 00:18:30,770
mind<font color="#E5E5E5"> whenever I'm trying to develop a</font>

418
00:18:28,640 --> 00:18:35,270
quick decryption solution for<font color="#E5E5E5"> these</font>

419
00:18:30,770 --> 00:18:38,929
types of packed things<font color="#E5E5E5"> so I did open</font>

420
00:18:35,270 --> 00:18:41,750
<font color="#E5E5E5">source my Ida Python script and that is</font>

421
00:18:38,929 --> 00:18:43,340
<font color="#CCCCCC">available</font><font color="#E5E5E5"> there you can also just google</font>

422
00:18:41,750 --> 00:18:46,040
Ida python embedded toolkit and<font color="#E5E5E5"> it's</font>

423
00:18:43,340 --> 00:18:48,770
under the<font color="#CCCCCC"> Android stuff I chose to use</font>

424
00:18:46,040 --> 00:18:50,928
<font color="#E5E5E5">Ida Python</font><font color="#CCCCCC"> because it is one of</font><font color="#E5E5E5"> those</font>

425
00:18:48,770 --> 00:18:53,379
<font color="#CCCCCC">well it's one</font><font color="#E5E5E5"> of my favorite tools to</font>

426
00:18:50,929 --> 00:18:56,690
use<font color="#CCCCCC"> and where I'm super fast and I also</font>

427
00:18:53,380 --> 00:18:59,570
focused on<font color="#E5E5E5"> translating that the</font>

428
00:18:56,690 --> 00:19:02,960
decryption to Python rather than trying

429
00:18:59,570 --> 00:19:05,689
to create<font color="#CCCCCC"> true</font><font color="#E5E5E5"> pseudo code or a code</font>

430
00:19:02,960 --> 00:19:08,000
representation<font color="#E5E5E5"> of it what I mean by</font>

431
00:19:05,690 --> 00:19:09,980
translating<font color="#E5E5E5"> it and this is how I play</font>

432
00:19:08,000 --> 00:19:11,809
<font color="#E5E5E5">into the speed and move as quickly as</font>

433
00:19:09,980 --> 00:19:14,390
<font color="#CCCCCC">possible and</font><font color="#E5E5E5"> then instead of</font>

434
00:19:11,809 --> 00:19:16,490
understanding<font color="#CCCCCC"> in the assembly what each</font>

435
00:19:14,390 --> 00:19:18,140
of these<font color="#E5E5E5"> registers do or what the</font>

436
00:19:16,490 --> 00:19:20,570
developers might have called them or

437
00:19:18,140 --> 00:19:23,330
what their functions were<font color="#E5E5E5"> I just named</font>

438
00:19:20,570 --> 00:19:25,668
variables<font color="#E5E5E5"> in Python that have the same</font>

439
00:19:23,330 --> 00:19:27,860
thing and I run through and say a move

440
00:19:25,669 --> 00:19:30,500
is an equal you<font color="#E5E5E5"> know you cannot it and</font>

441
00:19:27,860 --> 00:19:32,809
just go step by<font color="#E5E5E5"> step because</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> just</font>

442
00:19:30,500 --> 00:19:35,299
allows you to<font color="#E5E5E5"> follow along instead</font><font color="#CCCCCC"> of</font>

443
00:19:32,809 --> 00:19:36,889
trying to be<font color="#CCCCCC"> like pattern matching</font><font color="#E5E5E5"> and</font>

444
00:19:35,299 --> 00:19:38,240
figuring<font color="#E5E5E5"> out all</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> different aspects</font>

445
00:19:36,890 --> 00:19:40,179
of it

446
00:19:38,240 --> 00:19:41,540
one thing<font color="#CCCCCC"> that to keep in mind is that</font>

447
00:19:40,179 --> 00:19:44,030
<font color="#E5E5E5">oops</font>

448
00:19:41,540 --> 00:19:45,710
one thing to keep in mind<font color="#E5E5E5"> is that</font><font color="#CCCCCC"> Python</font>

449
00:19:44,030 --> 00:19:47,658
is obviously not a strongly typed

450
00:19:45,710 --> 00:19:49,720
language here in assembly<font color="#CCCCCC"> the</font>

451
00:19:47,659 --> 00:19:52,490
instructions know exactly what size

452
00:19:49,720 --> 00:19:56,059
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> operating on whether it's a byte</font>

453
00:19:52,490 --> 00:19:57,799
a half word a word so that<font color="#CCCCCC"> leads</font><font color="#E5E5E5"> to a</font>

454
00:19:56,059 --> 00:19:59,960
lot<font color="#CCCCCC"> of bugs if you don't keep it in mind</font>

455
00:19:57,799 --> 00:20:01,879
so it's not something's not working<font color="#CCCCCC"> the</font>

456
00:19:59,960 --> 00:20:05,540
<font color="#CCCCCC">way you're expecting</font><font color="#E5E5E5"> that's generally</font>

457
00:20:01,880 --> 00:20:07,490
where I look I also tend<font color="#E5E5E5"> to write helper</font>

458
00:20:05,540 --> 00:20:09,408
functions which you<font color="#CCCCCC"> can find and take in</font>

459
00:20:07,490 --> 00:20:12,380
the script<font color="#E5E5E5"> for anything else you want to</font>

460
00:20:09,409 --> 00:20:16,130
<font color="#CCCCCC">use for</font><font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of this sign operation</font>

461
00:20:12,380 --> 00:20:18,230
since<font color="#CCCCCC"> Python won't usually know that</font>

462
00:20:16,130 --> 00:20:23,270
<font color="#CCCCCC">okay this is a byte that is operated on</font>

463
00:20:18,230 --> 00:20:29,150
<font color="#CCCCCC">assigned or</font><font color="#E5E5E5"> not so let's do some demos</font>

464
00:20:23,270 --> 00:20:32,150
and talk through<font color="#E5E5E5"> this assembly so this</font>

465
00:20:29,150 --> 00:20:42,950
is our sample library<font color="#E5E5E5"> oh that's an</font>

466
00:20:32,150 --> 00:20:49,520
interesting out<font color="#CCCCCC"> of view oops</font>

467
00:20:42,950 --> 00:20:53,570
okay well we're<font color="#E5E5E5"> not gonna look at it in</font>

468
00:20:49,520 --> 00:20:55,879
graph view<font color="#CCCCCC"> so the first thing is it's</font>

469
00:20:53,570 --> 00:20:57,799
very<font color="#E5E5E5"> small</font><font color="#CCCCCC"> on the right but there are</font>

470
00:20:55,880 --> 00:21:00,110
nothing<font color="#E5E5E5"> named Java as we talked</font><font color="#CCCCCC"> about</font>

471
00:20:57,799 --> 00:21:01,970
there's only all<font color="#E5E5E5"> of the imported</font>

472
00:21:00,110 --> 00:21:08,389
functions<font color="#E5E5E5"> so that's where we're pulling</font>

473
00:21:01,970 --> 00:21:10,159
<font color="#E5E5E5">into our our</font><font color="#CCCCCC"> J&I onload function and so</font>

474
00:21:08,390 --> 00:21:12,500
that's what I'm scrolling<font color="#E5E5E5"> through right</font>

475
00:21:10,159 --> 00:21:13,700
here here is that decryption function

476
00:21:12,500 --> 00:21:16,340
<font color="#E5E5E5">that I already had showed you all the</font>

477
00:21:13,700 --> 00:21:17,120
<font color="#E5E5E5">screenshot of in each of the places</font><font color="#CCCCCC"> that</font>

478
00:21:16,340 --> 00:21:20,750
it takes

479
00:21:17,120 --> 00:21:22,760
<font color="#CCCCCC">bytes is there all right</font><font color="#E5E5E5"> after each</font>

480
00:21:20,750 --> 00:21:25,280
other<font color="#E5E5E5"> it's a block of memory and it's</font>

481
00:21:22,760 --> 00:21:27,679
just random bytes<font color="#E5E5E5"> there's nothing that</font>

482
00:21:25,280 --> 00:21:29,870
looks key or anything like<font color="#E5E5E5"> that</font>

483
00:21:27,679 --> 00:21:32,360
Ida doesn't know so all of them are

484
00:21:29,870 --> 00:21:35,429
declared as unknown data as we scroll

485
00:21:32,360 --> 00:21:38,639
<font color="#E5E5E5">through it so when we</font><font color="#CCCCCC"> look</font><font color="#E5E5E5"> at</font>

486
00:21:35,430 --> 00:21:43,620
<font color="#E5E5E5">our decryption subroutine</font><font color="#CCCCCC"> that one it</font>

487
00:21:38,640 --> 00:21:46,680
<font color="#E5E5E5">will let me do here is the overall graph</font>

488
00:21:43,620 --> 00:21:49,679
structure so what<font color="#E5E5E5"> we have is two while</font>

489
00:21:46,680 --> 00:21:51,390
loops<font color="#E5E5E5"> there's one at the top and one</font><font color="#CCCCCC"> at</font>

490
00:21:49,680 --> 00:21:53,810
the<font color="#CCCCCC"> bottom</font><font color="#E5E5E5"> and so when you're doing</font>

491
00:21:51,390 --> 00:21:56,130
translation for<font color="#CCCCCC"> that</font><font color="#E5E5E5"> of those</font>

492
00:21:53,810 --> 00:21:57,950
translation to<font color="#E5E5E5"> Python in order to just</font>

493
00:21:56,130 --> 00:22:01,110
have a solution<font color="#E5E5E5"> that</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> run over it</font>

494
00:21:57,950 --> 00:22:04,140
<font color="#CCCCCC">it's oh it's I tend to</font><font color="#E5E5E5"> find it's</font><font color="#CCCCCC"> helpful</font>

495
00:22:01,110 --> 00:22:06,149
to<font color="#CCCCCC"> just that's</font><font color="#E5E5E5"> where you can have a</font>

496
00:22:04,140 --> 00:22:07,980
variable<font color="#CCCCCC"> that says keep looping true or</font>

497
00:22:06,150 --> 00:22:12,660
keep looping<font color="#CCCCCC"> at false</font><font color="#E5E5E5"> and you can just</font>

498
00:22:07,980 --> 00:22:14,430
set that<font color="#E5E5E5"> in the same way as your as the</font>

499
00:22:12,660 --> 00:22:16,530
instructions did for like branch less

500
00:22:14,430 --> 00:22:18,570
than or<font color="#CCCCCC"> not branch greater than and</font>

501
00:22:16,530 --> 00:22:24,660
things like<font color="#CCCCCC"> that to sort</font><font color="#E5E5E5"> of have</font><font color="#CCCCCC"> that</font>

502
00:22:18,570 --> 00:22:30,840
translation so going<font color="#CCCCCC"> through that</font><font color="#E5E5E5"> large</font>

503
00:22:24,660 --> 00:22:33,990
enough<font color="#CCCCCC"> the first</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> I did</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> coded</font>

504
00:22:30,840 --> 00:22:36,060
<font color="#E5E5E5">up my decryption subroutine and</font><font color="#CCCCCC"> Python</font>

505
00:22:33,990 --> 00:22:38,550
<font color="#E5E5E5">that translation we've talked about and</font>

506
00:22:36,060 --> 00:22:41,550
tested over<font color="#E5E5E5"> just one of the bite</font><font color="#CCCCCC"> there</font>

507
00:22:38,550 --> 00:22:43,350
<font color="#E5E5E5">bytes raised to see does anything come</font>

508
00:22:41,550 --> 00:22:47,220
<font color="#E5E5E5">out of it am I doing this right</font><font color="#CCCCCC"> our bugs</font>

509
00:22:43,350 --> 00:22:48,990
coming up<font color="#E5E5E5"> and followed along once I</font>

510
00:22:47,220 --> 00:22:52,140
understood that that decryption

511
00:22:48,990 --> 00:22:53,580
subroutine<font color="#E5E5E5"> was correct that's when I had</font>

512
00:22:52,140 --> 00:22:57,000
to<font color="#CCCCCC"> start thinking about the second</font>

513
00:22:53,580 --> 00:22:58,889
problem<font color="#CCCCCC"> the adaptability I have so many</font>

514
00:22:57,000 --> 00:23:01,410
<font color="#E5E5E5">samples coming in and I want to be able</font>

515
00:22:58,890 --> 00:23:04,200
<font color="#CCCCCC">to compare them to</font><font color="#E5E5E5"> each other so I don't</font>

516
00:23:01,410 --> 00:23:06,390
<font color="#E5E5E5">want to</font><font color="#CCCCCC"> have to recode anything else for</font>

517
00:23:04,200 --> 00:23:09,420
<font color="#E5E5E5">each new sample</font><font color="#CCCCCC"> I want</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> that I</font>

518
00:23:06,390 --> 00:23:11,760
can<font color="#CCCCCC"> run on</font><font color="#E5E5E5"> anything and then be able to</font>

519
00:23:09,420 --> 00:23:13,770
<font color="#E5E5E5">quickly analyze and check does this</font>

520
00:23:11,760 --> 00:23:17,160
decrypted<font color="#E5E5E5"> library look like these others</font>

521
00:23:13,770 --> 00:23:19,560
or does<font color="#E5E5E5"> something different stand out so</font>

522
00:23:17,160 --> 00:23:21,510
that means<font color="#E5E5E5"> that I can't hard code in</font>

523
00:23:19,560 --> 00:23:23,310
where those encrypted<font color="#E5E5E5"> array addresses</font>

524
00:23:21,510 --> 00:23:26,160
are<font color="#E5E5E5"> I can't hard code in what their</font>

525
00:23:23,310 --> 00:23:28,889
bites are I can't know for<font color="#E5E5E5"> sure where</font>

526
00:23:26,160 --> 00:23:31,620
does this decryption subroutine live<font color="#E5E5E5"> so</font>

527
00:23:28,890 --> 00:23:34,140
in my main script where I start<font color="#CCCCCC"> is first</font>

528
00:23:31,620 --> 00:23:36,060
even<font color="#CCCCCC"> just</font><font color="#E5E5E5"> finding</font><font color="#CCCCCC"> j'ni onload just</font><font color="#E5E5E5"> like</font>

529
00:23:34,140 --> 00:23:37,710
as humans that's where we started that's

530
00:23:36,060 --> 00:23:40,919
<font color="#E5E5E5">where we can start with the Python</font>

531
00:23:37,710 --> 00:23:42,900
script<font color="#CCCCCC"> I then went ahead and it first</font>

532
00:23:40,920 --> 00:23:45,170
just<font color="#CCCCCC"> went ahead and</font><font color="#E5E5E5"> initialized my seed</font>

533
00:23:42,900 --> 00:23:45,170
arrays

534
00:23:45,560 --> 00:23:50,270
<font color="#E5E5E5">but the next job that the script needed</font>

535
00:23:47,810 --> 00:23:52,820
to do for me was tell me where is each

536
00:23:50,270 --> 00:23:54,800
array<font color="#E5E5E5"> read its contents</font><font color="#CCCCCC"> and what it's</font>

537
00:23:52,820 --> 00:23:58,100
<font color="#CCCCCC">it's links because those</font><font color="#E5E5E5"> are the two</font>

538
00:23:54,800 --> 00:24:02,540
dynamically changing<font color="#E5E5E5"> arguments to the</font>

539
00:23:58,100 --> 00:24:05,810
decryption subroutine<font color="#E5E5E5"> so what I</font><font color="#CCCCCC"> did was</font>

540
00:24:02,540 --> 00:24:09,070
that<font color="#CCCCCC"> I first wrote a subroutine called</font>

541
00:24:05,810 --> 00:24:21,950
find a kripp sub really creative<font color="#E5E5E5"> and</font>

542
00:24:09,070 --> 00:24:26,389
went through<font color="#E5E5E5"> J and I on load so it</font>

543
00:24:21,950 --> 00:24:28,310
starts<font color="#E5E5E5"> about hex</font><font color="#CCCCCC"> 20 or no hex adizero</font>

544
00:24:26,390 --> 00:24:30,200
<font color="#E5E5E5">off from the beginning of J and</font><font color="#CCCCCC"> I on</font>

545
00:24:28,310 --> 00:24:33,500
load<font color="#E5E5E5"> and then begins looking for</font>

546
00:24:30,200 --> 00:24:36,410
<font color="#E5E5E5">repetitive calls using BL since that</font>

547
00:24:33,500 --> 00:24:39,470
<font color="#E5E5E5">we're in 32-bit arm I knew at the last</font>

548
00:24:36,410 --> 00:24:42,380
<font color="#E5E5E5">chunk of the</font><font color="#CCCCCC"> J&I onload function they</font>

549
00:24:39,470 --> 00:24:44,300
just repetitive a call to this<font color="#E5E5E5"> so once I</font>

550
00:24:42,380 --> 00:24:46,640
found a subroutine<font color="#CCCCCC"> and used some string</font>

551
00:24:44,300 --> 00:24:49,669
processing<font color="#CCCCCC"> on Ida's disassembly</font><font color="#E5E5E5"> all I</font>

552
00:24:46,640 --> 00:24:52,190
needed to<font color="#CCCCCC"> get the disassembly just using</font>

553
00:24:49,670 --> 00:24:54,620
<font color="#CCCCCC">get dis azzam</font><font color="#E5E5E5"> from the Ida Python api's</font>

554
00:24:52,190 --> 00:24:56,810
I just did some string<font color="#CCCCCC"> processing to see</font>

555
00:24:54,620 --> 00:24:59,060
the address<font color="#CCCCCC"> I then just checked that</font>

556
00:24:56,810 --> 00:25:02,330
that same subroutine was called at<font color="#E5E5E5"> least</font>

557
00:24:59,060 --> 00:25:03,530
<font color="#E5E5E5">file</font><font color="#CCCCCC"> five times to make sure</font><font color="#E5E5E5"> as a safety</font>

558
00:25:02,330 --> 00:25:06,740
check that I'd found the right

559
00:25:03,530 --> 00:25:09,320
subroutine<font color="#E5E5E5"> and then I recorded all</font><font color="#CCCCCC"> of</font>

560
00:25:06,740 --> 00:25:11,540
the cross references are the<font color="#E5E5E5"> addresses</font>

561
00:25:09,320 --> 00:25:13,760
<font color="#CCCCCC">that called</font><font color="#E5E5E5"> that subroutine each place</font>

562
00:25:11,540 --> 00:25:15,980
because every time<font color="#E5E5E5"> they call the</font>

563
00:25:13,760 --> 00:25:18,590
subroutine they had to allocate or

564
00:25:15,980 --> 00:25:21,920
assign the arguments<font color="#E5E5E5"> earlier they had to</font>

565
00:25:18,590 --> 00:25:23,840
say<font color="#CCCCCC"> r0 is gonna equal this pointer</font><font color="#E5E5E5"> so if</font>

566
00:25:21,920 --> 00:25:28,790
I have<font color="#E5E5E5"> those addresses</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> can now figure</font>

567
00:25:23,840 --> 00:25:31,550
out what's the encrypted<font color="#E5E5E5"> array so once I</font>

568
00:25:28,790 --> 00:25:34,420
did that<font color="#CCCCCC"> I then iterated through</font><font color="#E5E5E5"> each of</font>

569
00:25:31,550 --> 00:25:37,129
those different<font color="#E5E5E5"> cross references and</font>

570
00:25:34,420 --> 00:25:39,710
every time I<font color="#CCCCCC"> had a</font><font color="#E5E5E5"> cross-reference</font><font color="#CCCCCC"> I</font>

571
00:25:37,130 --> 00:25:43,460
would use regular expressions<font color="#CCCCCC"> to look</font>

572
00:25:39,710 --> 00:25:46,100
for the different types of<font color="#E5E5E5"> instructions</font>

573
00:25:43,460 --> 00:25:49,370
<font color="#CCCCCC">that</font><font color="#E5E5E5"> could be</font><font color="#CCCCCC"> assigning the encrypted</font>

574
00:25:46,100 --> 00:25:51,800
array bytes which are at the top<font color="#E5E5E5"> of this</font>

575
00:25:49,370 --> 00:25:53,870
thing<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> always change</font><font color="#E5E5E5"> that if</font>

576
00:25:51,800 --> 00:25:55,280
<font color="#E5E5E5">you are looking at a different</font><font color="#CCCCCC"> CPU of</font>

577
00:25:53,870 --> 00:25:58,250
<font color="#E5E5E5">some sort</font>

578
00:25:55,280 --> 00:25:59,930
and then I pass it<font color="#E5E5E5"> to this function</font>

579
00:25:58,250 --> 00:26:04,190
<font color="#E5E5E5">called get array in length</font>

580
00:25:59,930 --> 00:26:06,980
<font color="#E5E5E5">I do pass it pre the previous previously</font>

581
00:26:04,190 --> 00:26:08,090
<font color="#E5E5E5">used length as well and the reason</font><font color="#CCCCCC"> for</font>

582
00:26:06,980 --> 00:26:10,010
<font color="#E5E5E5">that is that there's a couple of</font>

583
00:26:08,090 --> 00:26:13,250
different<font color="#E5E5E5"> ways you</font><font color="#CCCCCC"> can assign the length</font>

584
00:26:10,010 --> 00:26:16,730
<font color="#E5E5E5">if we look back let's see if it's gonna</font>

585
00:26:13,250 --> 00:26:19,220
load<font color="#E5E5E5"> yes at J and I on load first we see</font>

586
00:26:16,730 --> 00:26:22,130
an example<font color="#CCCCCC"> of where they assign the</font>

587
00:26:19,220 --> 00:26:26,330
length<font color="#E5E5E5"> here to</font><font color="#CCCCCC"> r1 using this immediate</font>

588
00:26:22,130 --> 00:26:30,350
assignment<font color="#CCCCCC"> cool</font><font color="#E5E5E5"> but later on they start</font>

589
00:26:26,330 --> 00:26:33,050
storing that value on<font color="#CCCCCC"> the stack as well</font>

590
00:26:30,350 --> 00:26:35,810
and also loading the length from<font color="#E5E5E5"> the</font>

591
00:26:33,050 --> 00:26:38,240
<font color="#E5E5E5">stack or sometimes that they're using</font>

592
00:26:35,810 --> 00:26:39,470
the<font color="#E5E5E5"> same previous length so accounting</font>

593
00:26:38,240 --> 00:26:41,870
for all of those<font color="#E5E5E5"> different regular</font>

594
00:26:39,470 --> 00:26:46,270
expressions<font color="#CCCCCC"> in those different cases is</font>

595
00:26:41,870 --> 00:26:46,270
what I did<font color="#CCCCCC"> within get array and length</font>

596
00:26:47,860 --> 00:26:54,229
so finally after<font color="#E5E5E5"> that we have a map of</font>

597
00:26:51,460 --> 00:26:55,910
here is where the array starts<font color="#E5E5E5"> the</font>

598
00:26:54,230 --> 00:26:57,980
encrypted<font color="#E5E5E5"> array starts and here's what</font>

599
00:26:55,910 --> 00:27:01,010
its length<font color="#E5E5E5"> then we can just thankfully</font>

600
00:26:57,980 --> 00:27:02,600
use the<font color="#CCCCCC"> ida python api</font><font color="#E5E5E5"> s and call to our</font>

601
00:27:01,010 --> 00:27:05,090
decryption function which we'd already

602
00:27:02,600 --> 00:27:08,449
tested and then we get<font color="#E5E5E5"> back</font><font color="#CCCCCC"> the results</font>

603
00:27:05,090 --> 00:27:11,240
of the<font color="#E5E5E5"> decryption</font><font color="#CCCCCC"> and now another</font><font color="#E5E5E5"> reason</font>

604
00:27:08,450 --> 00:27:14,510
why<font color="#E5E5E5"> I like to</font><font color="#CCCCCC"> use Ida</font><font color="#E5E5E5"> Python instead</font><font color="#CCCCCC"> of</font>

605
00:27:11,240 --> 00:27:16,490
API<font color="#E5E5E5"> is it allows</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> to just patch those</font>

606
00:27:14,510 --> 00:27:20,030
bytes that previously<font color="#E5E5E5"> were encrypted</font>

607
00:27:16,490 --> 00:27:23,270
using the<font color="#E5E5E5"> patch fight</font><font color="#CCCCCC"> API and write them</font>

608
00:27:20,030 --> 00:27:26,990
over that address<font color="#E5E5E5"> so now we are able</font><font color="#CCCCCC"> to</font>

609
00:27:23,270 --> 00:27:29,420
<font color="#E5E5E5">run or not run analyze our Ida database</font>

610
00:27:26,990 --> 00:27:32,090
<font color="#E5E5E5">in the same way as it looks after</font><font color="#CCCCCC"> all of</font>

611
00:27:29,420 --> 00:27:34,220
this decryption has run in memory so

612
00:27:32,090 --> 00:27:36,199
what<font color="#CCCCCC"> this</font><font color="#E5E5E5"> looks like is obviously here</font>

613
00:27:34,220 --> 00:27:40,820
<font color="#CCCCCC">we still have all of these unknowns if</font>

614
00:27:36,200 --> 00:27:43,310
we look at<font color="#E5E5E5"> our strings</font><font color="#CCCCCC"> there's a lot</font><font color="#E5E5E5"> of</font>

615
00:27:40,820 --> 00:27:46,179
jumbled<font color="#E5E5E5"> but nothing really more oh this</font>

616
00:27:43,310 --> 00:27:46,179
is<font color="#E5E5E5"> really</font><font color="#CCCCCC"> small sorry</font>

617
00:27:50,830 --> 00:27:56,389
<font color="#CCCCCC">so a lot of</font><font color="#E5E5E5"> jumbled things and then some</font>

618
00:27:53,600 --> 00:27:58,490
of the common imports exports in here

619
00:27:56,390 --> 00:28:00,050
but nothing that<font color="#CCCCCC"> really talks about</font><font color="#E5E5E5"> that</font>

620
00:27:58,490 --> 00:28:03,020
signature<font color="#E5E5E5"> that we're still looking for</font>

621
00:28:00,050 --> 00:28:04,760
<font color="#E5E5E5">or the declared</font><font color="#CCCCCC"> Java method names</font><font color="#E5E5E5"> that</font>

622
00:28:03,020 --> 00:28:07,520
we still<font color="#E5E5E5"> need to be</font><font color="#CCCCCC"> able to do that</font>

623
00:28:04,760 --> 00:28:10,070
peering from the beginning of our apk

624
00:28:07,520 --> 00:28:14,180
says I have these native methods

625
00:28:10,070 --> 00:28:25,939
what's run in this library<font color="#CCCCCC"> so when I run</font>

626
00:28:14,180 --> 00:28:28,520
this file script file and then<font color="#CCCCCC"> run our</font>

627
00:28:25,940 --> 00:28:30,800
wedding cake<font color="#CCCCCC"> crypt what we will see now</font>

628
00:28:28,520 --> 00:28:33,530
<font color="#E5E5E5">back in our</font><font color="#CCCCCC"> J&I onload is suddenly</font><font color="#E5E5E5"> we</font>

629
00:28:30,800 --> 00:28:35,870
have all these strengths so now we can

630
00:28:33,530 --> 00:28:39,260
start<font color="#CCCCCC"> our analysis</font><font color="#E5E5E5"> because one of those</font>

631
00:28:35,870 --> 00:28:43,340
keeping<font color="#E5E5E5"> this look we have calls to</font><font color="#CCCCCC"> decks</font>

632
00:28:39,260 --> 00:28:46,460
<font color="#CCCCCC">class loader</font><font color="#E5E5E5"> we see an it we see right</font>

633
00:28:43,340 --> 00:28:49,070
<font color="#CCCCCC">here was that class name that with all</font>

634
00:28:46,460 --> 00:28:51,230
those jumbled letters<font color="#E5E5E5"> so now we can</font>

635
00:28:49,070 --> 00:28:52,939
really<font color="#CCCCCC"> start understanding</font><font color="#E5E5E5"> what is this</font>

636
00:28:51,230 --> 00:28:55,250
<font color="#E5E5E5">doing and getting</font><font color="#CCCCCC"> past the decryption</font>

637
00:28:52,940 --> 00:29:00,410
<font color="#CCCCCC">and this script is going</font><font color="#E5E5E5"> to run on all</font>

638
00:28:55,250 --> 00:29:03,770
<font color="#E5E5E5">of our other samples</font><font color="#CCCCCC"> - oops my</font><font color="#E5E5E5"> sites go</font>

639
00:29:00,410 --> 00:29:05,840
so again focus just on speed and

640
00:29:03,770 --> 00:29:07,639
flexibility<font color="#E5E5E5"> it's always hard for me</font>

641
00:29:05,840 --> 00:29:09,740
because<font color="#CCCCCC"> I like</font><font color="#E5E5E5"> to understand everything</font>

642
00:29:07,640 --> 00:29:14,330
I'm<font color="#CCCCCC"> reversing but sometimes it's not the</font>

643
00:29:09,740 --> 00:29:17,030
<font color="#E5E5E5">right choice</font><font color="#CCCCCC"> if you are better at</font>

644
00:29:14,330 --> 00:29:19,010
setting<font color="#CCCCCC"> up our emulators or</font><font color="#E5E5E5"> debuggers</font>

645
00:29:17,030 --> 00:29:21,200
then that<font color="#CCCCCC"> MCMAP could probably be a</font>

646
00:29:19,010 --> 00:29:25,400
faster route<font color="#CCCCCC"> - but that would have taken</font>

647
00:29:21,200 --> 00:29:27,290
<font color="#E5E5E5">me longer so yeah</font><font color="#CCCCCC"> Oh</font><font color="#E5E5E5"> in one of the ways</font>

648
00:29:25,400 --> 00:29:30,020
that<font color="#E5E5E5"> I generally get around</font><font color="#CCCCCC"> hard-coded</font>

649
00:29:27,290 --> 00:29:31,990
addresses as well<font color="#CCCCCC"> as registers as using</font>

650
00:29:30,020 --> 00:29:35,180
<font color="#E5E5E5">regex</font>

651
00:29:31,990 --> 00:29:38,060
so just a<font color="#CCCCCC"> screenshot the top was all of</font>

652
00:29:35,180 --> 00:29:40,910
the encrypted<font color="#CCCCCC"> block of memory</font><font color="#E5E5E5"> and then a</font>

653
00:29:38,060 --> 00:29:44,000
segment where<font color="#E5E5E5"> the same segment decrypted</font>

654
00:29:40,910 --> 00:29:46,610
after running<font color="#E5E5E5"> our script</font><font color="#CCCCCC"> and the key</font>

655
00:29:44,000 --> 00:29:49,730
thing was is now we do<font color="#E5E5E5"> have that string</font>

656
00:29:46,610 --> 00:29:52,280
of our function<font color="#CCCCCC"> named VX CG we have it</font>

657
00:29:49,730 --> 00:29:54,590
signature and now we also see in the

658
00:29:52,280 --> 00:29:57,110
structure<font color="#E5E5E5"> the subroutine</font><font color="#CCCCCC"> that is</font>

659
00:29:54,590 --> 00:29:59,330
associated<font color="#CCCCCC"> with</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is now where</font>

660
00:29:57,110 --> 00:30:01,250
we can<font color="#CCCCCC"> go we can</font><font color="#E5E5E5"> finally get to what we</font>

661
00:29:59,330 --> 00:30:03,470
<font color="#CCCCCC">actually wanted</font><font color="#E5E5E5"> to analyze in the</font>

662
00:30:01,250 --> 00:30:03,950
beginning<font color="#E5E5E5"> the plus one at</font><font color="#CCCCCC"> the end is</font>

663
00:30:03,470 --> 00:30:08,659
<font color="#E5E5E5">just</font>

664
00:30:03,950 --> 00:30:12,350
it's running in thumb mode so we have

665
00:30:08,659 --> 00:30:14,960
our three declared native methods<font color="#CCCCCC"> we</font>

666
00:30:12,350 --> 00:30:16,969
know their native subroutines that<font color="#E5E5E5"> are</font>

667
00:30:14,960 --> 00:30:19,100
run each time they're called<font color="#CCCCCC"> we</font><font color="#E5E5E5"> have</font>

668
00:30:16,970 --> 00:30:22,279
their signatures<font color="#E5E5E5"> because each of them</font>

669
00:30:19,100 --> 00:30:26,480
<font color="#E5E5E5">are named differently in all the samples</font>

670
00:30:22,279 --> 00:30:30,440
<font color="#CCCCCC">I just added a function</font><font color="#E5E5E5"> number</font><font color="#CCCCCC"> and the</font>

671
00:30:26,480 --> 00:30:32,659
leftmost column to say that any of the

672
00:30:30,440 --> 00:30:34,970
native declared methods<font color="#E5E5E5"> that have these</font>

673
00:30:32,659 --> 00:30:37,309
same signatures<font color="#CCCCCC"> would correspond in the</font>

674
00:30:34,970 --> 00:30:41,809
same analysis as what I have here for<font color="#CCCCCC"> BX</font>

675
00:30:37,309 --> 00:30:43,820
<font color="#CCCCCC">eg or two so that leads us into our</font>

676
00:30:41,809 --> 00:30:45,559
<font color="#E5E5E5">runtime environment checks which I</font>

677
00:30:43,820 --> 00:30:48,189
didn't<font color="#CCCCCC"> know at the</font><font color="#E5E5E5"> time I</font><font color="#CCCCCC"> just started</font>

678
00:30:45,559 --> 00:30:51,139
my analysis on<font color="#E5E5E5"> that function number one</font>

679
00:30:48,190 --> 00:30:54,049
<font color="#E5E5E5">but what the goal of</font><font color="#CCCCCC"> the malware</font>

680
00:30:51,139 --> 00:30:56,090
developers was they<font color="#E5E5E5"> wanted to understand</font>

681
00:30:54,049 --> 00:30:59,240
if they are being dynamically<font color="#CCCCCC"> analyzed</font>

682
00:30:56,090 --> 00:31:01,908
<font color="#E5E5E5">debug or emulated someone managed to get</font>

683
00:30:59,240 --> 00:31:04,159
through<font color="#E5E5E5"> probably the</font><font color="#CCCCCC"> JNA I mean</font>

684
00:31:01,909 --> 00:31:06,230
manipulations<font color="#E5E5E5"> the anti reversing and the</font>

685
00:31:04,159 --> 00:31:07,610
decryption<font color="#E5E5E5"> so now where are they and</font>

686
00:31:06,230 --> 00:31:09,500
they want to<font color="#E5E5E5"> make</font><font color="#CCCCCC"> sure this isn't a</font>

687
00:31:07,610 --> 00:31:12,740
debugger that<font color="#E5E5E5"> got around those things or</font>

688
00:31:09,500 --> 00:31:14,240
it's not some<font color="#E5E5E5"> automated pipeline and one</font>

689
00:31:12,740 --> 00:31:16,070
<font color="#E5E5E5">of the interesting</font><font color="#CCCCCC"> things that's</font><font color="#E5E5E5"> sort</font><font color="#CCCCCC"> of</font>

690
00:31:14,240 --> 00:31:18,320
<font color="#CCCCCC">different and is changing with the</font>

691
00:31:16,070 --> 00:31:20,149
evolution of<font color="#E5E5E5"> Android and how there's not</font>

692
00:31:18,320 --> 00:31:22,100
really the low-hanging fruit anymore<font color="#CCCCCC"> is</font>

693
00:31:20,149 --> 00:31:24,949
that they're willing<font color="#CCCCCC"> to</font><font color="#E5E5E5"> give</font><font color="#CCCCCC"> up some of</font>

694
00:31:22,100 --> 00:31:29,029
<font color="#E5E5E5">their market share as malware developers</font>

695
00:31:24,950 --> 00:31:32,000
if that means waiting at more heavily

696
00:31:29,029 --> 00:31:34,880
<font color="#E5E5E5">towards not being detected</font><font color="#CCCCCC"> which is not</font>

697
00:31:32,000 --> 00:31:36,500
one of those things<font color="#E5E5E5"> in a malware family</font>

698
00:31:34,880 --> 00:31:38,750
such as<font color="#CCCCCC"> gem wall which</font><font color="#E5E5E5"> is focused on</font>

699
00:31:36,500 --> 00:31:41,269
<font color="#E5E5E5">making money</font><font color="#CCCCCC"> through different</font><font color="#E5E5E5"> types of</font>

700
00:31:38,750 --> 00:31:43,370
fraud<font color="#E5E5E5"> what we saw here is that they're</font>

701
00:31:41,269 --> 00:31:47,419
willing to<font color="#E5E5E5"> not run on every device</font><font color="#CCCCCC"> as</font>

702
00:31:43,370 --> 00:31:50,449
<font color="#E5E5E5">long as they're not being detected so</font>

703
00:31:47,419 --> 00:31:52,070
again<font color="#CCCCCC"> the xcg</font><font color="#E5E5E5"> firms runtime environment</font>

704
00:31:50,450 --> 00:31:54,679
checks and there's 45 different<font color="#E5E5E5"> ones of</font>

705
00:31:52,070 --> 00:31:58,039
them if<font color="#E5E5E5"> any single</font><font color="#CCCCCC"> one of these</font><font color="#E5E5E5"> 45</font>

706
00:31:54,679 --> 00:32:02,690
checks fails then we<font color="#CCCCCC"> will stop execution</font>

707
00:31:58,039 --> 00:32:04,190
of the app<font color="#E5E5E5"> so we're going to go through</font>

708
00:32:02,690 --> 00:32:06,649
a<font color="#CCCCCC"> couple different groups of</font><font color="#E5E5E5"> these that</font>

709
00:32:04,190 --> 00:32:10,220
make up the 45<font color="#E5E5E5"> the first one is going</font>

710
00:32:06,649 --> 00:32:12,678
through<font color="#CCCCCC"> sis all the system properties so</font>

711
00:32:10,220 --> 00:32:15,080
the all of<font color="#CCCCCC"> them are sort</font><font color="#E5E5E5"> of aimed at</font>

712
00:32:12,679 --> 00:32:15,870
being whether or not<font color="#CCCCCC"> you're hardware</font>

713
00:32:15,080 --> 00:32:19,199
<font color="#E5E5E5">you're running</font>

714
00:32:15,870 --> 00:32:21,809
<font color="#E5E5E5">is an emulator or being debugged and the</font>

715
00:32:19,200 --> 00:32:23,280
first 37<font color="#E5E5E5"> checks they do are checking to</font>

716
00:32:21,809 --> 00:32:25,530
see<font color="#CCCCCC"> if the</font><font color="#E5E5E5"> system property has a</font>

717
00:32:23,280 --> 00:32:26,610
specific value<font color="#CCCCCC"> I obviously could not</font>

718
00:32:25,530 --> 00:32:29,070
list them<font color="#E5E5E5"> all here</font>

719
00:32:26,610 --> 00:32:30,780
so there is a<font color="#E5E5E5"> link as well as in that</font>

720
00:32:29,070 --> 00:32:33,419
Ida Python<font color="#E5E5E5"> embedded toolkit where the</font>

721
00:32:30,780 --> 00:32:35,010
decryption<font color="#E5E5E5"> is of all 37 of these checks</font>

722
00:32:33,420 --> 00:32:36,990
if you're interested<font color="#E5E5E5"> in seeing what</font>

723
00:32:35,010 --> 00:32:39,480
they're looking<font color="#CCCCCC"> for</font><font color="#E5E5E5"> but most of them are</font>

724
00:32:36,990 --> 00:32:41,550
based<font color="#E5E5E5"> on looking for common emulators</font>

725
00:32:39,480 --> 00:32:44,370
debuggers<font color="#E5E5E5"> but one</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> interesting</font>

726
00:32:41,550 --> 00:32:47,970
<font color="#CCCCCC">ones too was they will not run if you do</font>

727
00:32:44,370 --> 00:32:49,620
not have<font color="#CCCCCC"> SELinux in enabling mode so</font>

728
00:32:47,970 --> 00:32:51,030
that is one<font color="#E5E5E5"> of the places where they're</font>

729
00:32:49,620 --> 00:32:53,550
<font color="#E5E5E5">not going to generally run if your</font>

730
00:32:51,030 --> 00:32:55,920
device<font color="#E5E5E5"> is rooted and things like that</font>

731
00:32:53,550 --> 00:32:58,530
<font color="#E5E5E5">the last five that they go through</font><font color="#CCCCCC"> is</font>

732
00:32:55,920 --> 00:33:00,870
using<font color="#E5E5E5"> is just checking if any of these</font>

733
00:32:58,530 --> 00:33:03,149
<font color="#E5E5E5">five on the right</font><font color="#CCCCCC"> exists not even what</font>

734
00:33:00,870 --> 00:33:05,760
their value<font color="#E5E5E5"> is and it's pretty clear why</font>

735
00:33:03,150 --> 00:33:09,600
they're all related<font color="#CCCCCC"> to different types</font>

736
00:33:05,760 --> 00:33:13,710
of emulators or things that emulators

737
00:33:09,600 --> 00:33:18,449
and debugger<font color="#E5E5E5"> set up in</font><font color="#CCCCCC"> order</font><font color="#E5E5E5"> to make it</font>

738
00:33:13,710 --> 00:33:19,830
<font color="#E5E5E5">look like a real device so the next</font>

739
00:33:18,450 --> 00:33:21,450
thing they do is<font color="#E5E5E5"> they want to make sure</font>

740
00:33:19,830 --> 00:33:23,610
<font color="#E5E5E5">what architecture they're running on</font>

741
00:33:21,450 --> 00:33:25,650
they<font color="#E5E5E5"> will not run if you are not running</font>

742
00:33:23,610 --> 00:33:28,379
on<font color="#E5E5E5"> arm which is really really</font>

743
00:33:25,650 --> 00:33:31,080
<font color="#CCCCCC">fascinating since we found x86 versions</font>

744
00:33:28,380 --> 00:33:33,960
of this library<font color="#E5E5E5"> to those x86 versions</font>

745
00:33:31,080 --> 00:33:37,530
also<font color="#E5E5E5"> include this check even though they</font>

746
00:33:33,960 --> 00:33:41,130
are running<font color="#E5E5E5"> because you are on x86 so</font>

747
00:33:37,530 --> 00:33:43,440
they don't do<font color="#E5E5E5"> this with a clear API call</font>

748
00:33:41,130 --> 00:33:46,770
<font color="#E5E5E5">instead what they do is they open up</font>

749
00:33:43,440 --> 00:33:50,580
<font color="#CCCCCC">slash</font><font color="#E5E5E5"> system flash LED flash</font><font color="#CCCCCC"> led CSL and</font>

750
00:33:46,770 --> 00:33:53,670
read the first<font color="#CCCCCC"> 20 characters or 20 bytes</font>

751
00:33:50,580 --> 00:33:55,830
<font color="#E5E5E5">from that file this is still a part of</font>

752
00:33:53,670 --> 00:33:58,080
<font color="#E5E5E5">the elf header being the first 20 bytes</font>

753
00:33:55,830 --> 00:34:00,720
<font color="#E5E5E5">and then out of those 20 bytes they only</font>

754
00:33:58,080 --> 00:34:03,899
read<font color="#E5E5E5"> three</font><font color="#CCCCCC"> of them the first that check</font>

755
00:34:00,720 --> 00:34:07,710
they do is for the byte<font color="#E5E5E5"> that's at the</font><font color="#CCCCCC"> ie</font>

756
00:34:03,900 --> 00:34:09,540
<font color="#E5E5E5">identity I class position</font><font color="#CCCCCC"> in the elf</font>

757
00:34:07,710 --> 00:34:12,379
header and<font color="#E5E5E5"> that determines whether or</font>

758
00:34:09,540 --> 00:34:14,879
<font color="#E5E5E5">not you're running as 32-bit or 64-bit</font>

759
00:34:12,379 --> 00:34:17,639
<font color="#E5E5E5">the last two bytes they do is what</font>

760
00:34:14,879 --> 00:34:19,290
machine<font color="#E5E5E5"> our</font><font color="#CCCCCC"> hardware you are</font><font color="#E5E5E5"> on so in</font>

761
00:34:17,639 --> 00:34:22,649
this case they're looking for these

762
00:34:19,290 --> 00:34:25,918
values<font color="#E5E5E5"> of either hex 28 or hex</font><font color="#CCCCCC"> b7 to say</font>

763
00:34:22,649 --> 00:34:27,779
<font color="#CCCCCC">your</font><font color="#E5E5E5"> either</font><font color="#CCCCCC"> arm or arc 64</font><font color="#E5E5E5"> so the only</font>

764
00:34:25,918 --> 00:34:29,190
two combinations<font color="#CCCCCC"> that are acceptable is</font>

765
00:34:27,780 --> 00:34:32,309
32-bit<font color="#CCCCCC"> an</font><font color="#E5E5E5"> arm</font>

766
00:34:29,190 --> 00:34:34,679
or<font color="#E5E5E5"> 64bit in art if you are running</font>

767
00:34:32,309 --> 00:34:38,970
<font color="#E5E5E5">anything else</font><font color="#CCCCCC"> the new exit and the</font>

768
00:34:34,679 --> 00:34:41,490
application stops the next thing they

769
00:34:38,969 --> 00:34:43,018
look for is to<font color="#CCCCCC"> determine if monkey is</font>

770
00:34:41,489 --> 00:34:46,819
running if you<font color="#CCCCCC"> don't know what monkey</font><font color="#E5E5E5"> is</font>

771
00:34:43,018 --> 00:34:49,558
it is a tool<font color="#CCCCCC"> that</font><font color="#E5E5E5"> allows developers to</font>

772
00:34:46,819 --> 00:34:51,239
emulate<font color="#E5E5E5"> or pretend that a user</font><font color="#CCCCCC"> is</font>

773
00:34:49,559 --> 00:34:53,819
interacting with<font color="#CCCCCC"> their device in their</font>

774
00:34:51,239 --> 00:34:55,969
application<font color="#E5E5E5"> so you know performing fake</font>

775
00:34:53,819 --> 00:34:58,589
touches fake clicks and things like<font color="#E5E5E5"> that</font>

776
00:34:55,969 --> 00:35:00,990
<font color="#E5E5E5">the way they go about</font><font color="#CCCCCC"> trying to detect</font>

777
00:34:58,589 --> 00:35:03,750
<font color="#E5E5E5">if monkey is running is they open</font><font color="#CCCCCC"> up</font>

778
00:35:00,990 --> 00:35:09,990
<font color="#E5E5E5">croc they then iterate through every</font>

779
00:35:03,750 --> 00:35:13,589
directory<font color="#CCCCCC"> here</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> so they after</font><font color="#E5E5E5"> they</font>

780
00:35:09,990 --> 00:35:15,959
open up croc<font color="#E5E5E5"> they check what each file</font>

781
00:35:13,589 --> 00:35:18,058
or notes<font color="#E5E5E5"> value is and whether or not</font>

782
00:35:15,960 --> 00:35:19,920
it's a directory<font color="#CCCCCC"> if it's a directory</font>

783
00:35:18,059 --> 00:35:21,839
they check its name to determine whether

784
00:35:19,920 --> 00:35:25,259
or not it's an integer<font color="#CCCCCC"> and they then</font>

785
00:35:21,839 --> 00:35:27,599
construct these two paths of the<font color="#CCCCCC"> PIDs</font>

786
00:35:25,259 --> 00:35:30,660
directory<font color="#E5E5E5"> for calm or I mean file for</font>

787
00:35:27,599 --> 00:35:33,839
calm as well<font color="#E5E5E5"> as</font><font color="#CCCCCC"> command-line they read</font>

788
00:35:30,660 --> 00:35:36,029
then out the max or a max up to<font color="#E5E5E5"> seven</font><font color="#CCCCCC"> F</font>

789
00:35:33,839 --> 00:35:39,509
fights<font color="#E5E5E5"> and then choose whichever one has</font>

790
00:35:36,029 --> 00:35:41,819
more<font color="#CCCCCC"> information they then see if that</font>

791
00:35:39,509 --> 00:35:44,730
information<font color="#E5E5E5"> contains the monkey package</font>

792
00:35:41,819 --> 00:35:46,500
name at<font color="#CCCCCC"> all if it does it means that</font>

793
00:35:44,730 --> 00:35:50,009
monkey is running and they choose<font color="#E5E5E5"> to</font>

794
00:35:46,500 --> 00:35:52,259
exit so just a note this no<font color="#E5E5E5"> longer does</font>

795
00:35:50,009 --> 00:35:54,450
this doesn't work on anything<font color="#E5E5E5"> Android</font><font color="#CCCCCC"> an</font>

796
00:35:52,259 --> 00:35:55,490
<font color="#CCCCCC">hour</font><font color="#E5E5E5"> plus to open up proc and iterate</font>

797
00:35:54,450 --> 00:35:57,930
through the<font color="#CCCCCC"> pidz</font>

798
00:35:55,490 --> 00:36:00,390
<font color="#CCCCCC">so in that</font><font color="#E5E5E5"> case</font><font color="#CCCCCC"> that they are</font><font color="#E5E5E5"> not</font>

799
00:35:57,930 --> 00:36:02,819
<font color="#E5E5E5">actually able to open up proc and</font><font color="#CCCCCC"> pit</font>

800
00:36:00,390 --> 00:36:05,129
instead of exiting<font color="#E5E5E5"> in that case they</font>

801
00:36:02,819 --> 00:36:09,509
will still just skip over<font color="#E5E5E5"> that check and</font>

802
00:36:05,130 --> 00:36:17,039
<font color="#CCCCCC">run it's only if they're able to</font><font color="#E5E5E5"> open do</font>

803
00:36:09,509 --> 00:36:18,779
they exit if they see monkey the very

804
00:36:17,039 --> 00:36:21,809
last runtime environment check they do

805
00:36:18,779 --> 00:36:25,829
is to determine<font color="#E5E5E5"> if</font><font color="#CCCCCC"> the xposed framework</font>

806
00:36:21,809 --> 00:36:28,170
<font color="#E5E5E5">is running as</font><font color="#CCCCCC"> well</font><font color="#E5E5E5"> so exposed</font><font color="#CCCCCC"> is a</font>

807
00:36:25,829 --> 00:36:30,180
framework<font color="#E5E5E5"> that allows you to</font><font color="#CCCCCC"> hook or</font>

808
00:36:28,170 --> 00:36:32,039
modify system code on<font color="#CCCCCC"> your android</font>

809
00:36:30,180 --> 00:36:33,808
device<font color="#E5E5E5"> it's used on a lot of different</font>

810
00:36:32,039 --> 00:36:35,460
<font color="#CCCCCC">forms for</font><font color="#E5E5E5"> a lot of</font><font color="#CCCCCC"> different reasons</font><font color="#E5E5E5"> but</font>

811
00:36:33,809 --> 00:36:38,200
<font color="#E5E5E5">they want to make sure that you haven't</font>

812
00:36:35,460 --> 00:36:40,600
hooked their app for analysis<font color="#E5E5E5"> so</font>

813
00:36:38,200 --> 00:36:43,000
they're going<font color="#E5E5E5"> to check if these two</font>

814
00:36:40,600 --> 00:36:44,770
files are existing<font color="#CCCCCC"> and praça</font><font color="#E5E5E5"> self</font><font color="#CCCCCC"> maps</font>

815
00:36:43,000 --> 00:36:47,410
me meaning they have been mapped<font color="#E5E5E5"> into</font>

816
00:36:44,770 --> 00:36:49,900
memory and<font color="#E5E5E5"> then if that one passes they</font>

817
00:36:47,410 --> 00:36:52,330
then<font color="#CCCCCC"> also check using je and I find</font>

818
00:36:49,900 --> 00:36:54,520
class methods<font color="#E5E5E5"> if they are able to find</font>

819
00:36:52,330 --> 00:36:56,710
either<font color="#E5E5E5"> of these two exposed class</font>

820
00:36:54,520 --> 00:37:00,480
methods are running<font color="#CCCCCC"> two because you want</font>

821
00:36:56,710 --> 00:37:00,480
<font color="#E5E5E5">to be really sure exposed isn't running</font>

822
00:37:00,990 --> 00:37:06,189
but if you make<font color="#E5E5E5"> it through all</font><font color="#CCCCCC"> of those</font>

823
00:37:03,550 --> 00:37:08,440
different<font color="#CCCCCC"> 45 checks as well as</font><font color="#E5E5E5"> the</font>

824
00:37:06,190 --> 00:37:11,560
in-place decryption and anti reversing

825
00:37:08,440 --> 00:37:13,450
<font color="#E5E5E5">what</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> then found was it</font><font color="#CCCCCC"> was code that</font>

826
00:37:11,560 --> 00:37:15,310
I'd already<font color="#E5E5E5"> analyzed before and that</font>

827
00:37:13,450 --> 00:37:18,009
other team members had<font color="#E5E5E5"> documented as</font>

828
00:37:15,310 --> 00:37:20,290
well and the sample<font color="#E5E5E5"> I had been looking</font>

829
00:37:18,010 --> 00:37:22,630
<font color="#CCCCCC">at was a new variant</font><font color="#E5E5E5"> of this Shinhwa</font>

830
00:37:20,290 --> 00:37:26,529
<font color="#E5E5E5">family and it was just another unpacker</font>

831
00:37:22,630 --> 00:37:28,510
<font color="#E5E5E5">so I spent you know a couple of days</font><font color="#CCCCCC"> all</font>

832
00:37:26,530 --> 00:37:31,980
my<font color="#CCCCCC"> time focused on</font><font color="#E5E5E5"> getting through this</font>

833
00:37:28,510 --> 00:37:31,980
to unpack the packed<font color="#CCCCCC"> unpacker</font>

834
00:37:32,670 --> 00:37:36,580
but what was<font color="#CCCCCC"> really</font><font color="#E5E5E5"> interesting about</font>

835
00:37:34,840 --> 00:37:39,760
<font color="#E5E5E5">this</font><font color="#CCCCCC"> and what I had been thinking</font><font color="#E5E5E5"> about</font>

836
00:37:36,580 --> 00:37:42,520
<font color="#E5E5E5">a lot</font><font color="#CCCCCC"> is one you know they're willing</font>

837
00:37:39,760 --> 00:37:44,560
even<font color="#E5E5E5"> though there are a large sort of</font>

838
00:37:42,520 --> 00:37:46,330
<font color="#CCCCCC">money-making fraud</font><font color="#E5E5E5"> botnet and that's</font>

839
00:37:44,560 --> 00:37:48,340
always<font color="#E5E5E5"> been</font><font color="#CCCCCC"> their goal</font><font color="#E5E5E5"> is market share</font>

840
00:37:46,330 --> 00:37:49,990
<font color="#E5E5E5">because that's how you make money they</font>

841
00:37:48,340 --> 00:37:51,670
had evolved to<font color="#CCCCCC"> a point now that they</font>

842
00:37:49,990 --> 00:37:54,040
were willing<font color="#CCCCCC"> to miss out on</font><font color="#E5E5E5"> potential</font>

843
00:37:51,670 --> 00:37:57,430
targets<font color="#E5E5E5"> if that means not being detected</font>

844
00:37:54,040 --> 00:37:59,259
<font color="#CCCCCC">and in addition they were very</font>

845
00:37:57,430 --> 00:38:01,810
<font color="#CCCCCC">intelligent</font><font color="#E5E5E5"> and how they layered their</font>

846
00:37:59,260 --> 00:38:04,570
<font color="#E5E5E5">ant analysis techniques because they</font>

847
00:38:01,810 --> 00:38:07,090
targeted one<font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to frustrate the</font>

848
00:38:04,570 --> 00:38:10,090
<font color="#E5E5E5">human analyst through the decryption and</font>

849
00:38:07,090 --> 00:38:13,860
<font color="#E5E5E5">are the encryption and the anti reverse</font>

850
00:38:10,090 --> 00:38:18,820
engineering<font color="#E5E5E5"> then they're also going</font><font color="#CCCCCC"> to</font>

851
00:38:13,860 --> 00:38:21,010
prevent dynamic static<font color="#CCCCCC"> analysis tools</font>

852
00:38:18,820 --> 00:38:23,970
running<font color="#E5E5E5"> over it to find strings</font><font color="#CCCCCC"> or</font>

853
00:38:21,010 --> 00:38:28,560
understanding<font color="#E5E5E5"> of what was in the elf and</font>

854
00:38:23,970 --> 00:38:28,560
lastly you know they also are using

855
00:38:28,740 --> 00:38:33,640
<font color="#E5E5E5">techniques to detect if they are being</font>

856
00:38:30,940 --> 00:38:35,980
<font color="#E5E5E5">dynamically analyzed so packaging all of</font>

857
00:38:33,640 --> 00:38:37,690
these together to try<font color="#CCCCCC"> and target</font><font color="#E5E5E5"> each of</font>

858
00:38:35,980 --> 00:38:41,680
those<font color="#E5E5E5"> different types</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> analysis</font><font color="#CCCCCC"> that</font>

859
00:38:37,690 --> 00:38:44,710
<font color="#E5E5E5">we all have defenders or attackers try</font>

860
00:38:41,680 --> 00:38:46,839
to bring to the table here<font color="#E5E5E5"> so what I</font>

861
00:38:44,710 --> 00:38:49,369
hope and what I was<font color="#CCCCCC"> hoping to help or</font>

862
00:38:46,840 --> 00:38:51,349
provide<font color="#E5E5E5"> to you</font><font color="#CCCCCC"> and why I hope you</font>

863
00:38:49,369 --> 00:38:53,239
or I hope to<font color="#CCCCCC"> have provided in the sense</font>

864
00:38:51,349 --> 00:38:55,910
that you stayed it until<font color="#CCCCCC"> 6 p.m. on the</font>

865
00:38:53,239 --> 00:38:57,380
<font color="#CCCCCC">last day of blackhat was some ideas of</font>

866
00:38:55,910 --> 00:38:59,058
what<font color="#CCCCCC"> is the</font><font color="#E5E5E5"> current state of the art</font><font color="#CCCCCC"> in</font>

867
00:38:57,380 --> 00:39:01,369
terms of<font color="#E5E5E5"> Android anti analysis</font>

868
00:38:59,059 --> 00:39:04,190
techniques<font color="#E5E5E5"> and how could you</font><font color="#CCCCCC"> possibly</font>

869
00:39:01,369 --> 00:39:06,589
get<font color="#E5E5E5"> through them faster</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> that you</font>

870
00:39:04,190 --> 00:39:08,299
could look for<font color="#CCCCCC"> know</font><font color="#E5E5E5"> that they're being</font>

871
00:39:06,589 --> 00:39:12,979
used so you don't spend the<font color="#E5E5E5"> same amount</font>

872
00:39:08,299 --> 00:39:14,509
<font color="#CCCCCC">of time I did and</font><font color="#E5E5E5"> also how</font><font color="#CCCCCC"> can you write</font>

873
00:39:12,979 --> 00:39:18,049
decryption solutions with<font color="#E5E5E5"> the goal being</font>

874
00:39:14,509 --> 00:39:21,229
<font color="#E5E5E5">fast</font><font color="#CCCCCC"> and sort</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> agnostic to the exact</font>

875
00:39:18,049 --> 00:39:23,880
sample<font color="#E5E5E5"> you're looking at and with that</font>

876
00:39:21,229 --> 00:39:33,489
thank<font color="#CCCCCC"> you and are there any questions</font>

877
00:39:23,880 --> 00:39:33,489
[Applause]

