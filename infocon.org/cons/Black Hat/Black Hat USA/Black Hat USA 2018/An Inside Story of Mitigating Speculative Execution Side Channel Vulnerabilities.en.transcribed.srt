1
00:00:00,030 --> 00:00:03,239
today we are<font color="#E5E5E5"> going to be speaking</font><font color="#CCCCCC"> about</font>

2
00:00:01,410 --> 00:00:05,609
wrangling<font color="#CCCCCC"> with a ghost which is</font>

3
00:00:03,240 --> 00:00:07,799
essentially a inside story about how

4
00:00:05,609 --> 00:00:11,370
<font color="#CCCCCC">spectral meltdown was mitigated within</font>

5
00:00:07,799 --> 00:00:16,080
Microsoft<font color="#CCCCCC"> yesterday there was</font><font color="#E5E5E5"> a panel</font>

6
00:00:11,370 --> 00:00:18,660
about<font color="#E5E5E5"> the</font><font color="#CCCCCC"> industry</font><font color="#E5E5E5"> cooperation and</font>

7
00:00:16,079 --> 00:00:22,979
mitigating<font color="#E5E5E5"> specter meltdown</font><font color="#CCCCCC"> which was</font>

8
00:00:18,660 --> 00:00:26,250
really<font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> also today there is a</font>

9
00:00:22,980 --> 00:00:27,720
talk in the<font color="#CCCCCC"> last slot about meltdown if</font>

10
00:00:26,250 --> 00:00:30,269
you're interested in<font color="#E5E5E5"> technical details</font>

11
00:00:27,720 --> 00:00:32,668
on meltdown<font color="#CCCCCC"> that is probably</font><font color="#E5E5E5"> the better</font>

12
00:00:30,269 --> 00:00:34,320
talk<font color="#E5E5E5"> to go to because we're going</font><font color="#CCCCCC"> to</font>

13
00:00:32,668 --> 00:00:36,180
<font color="#E5E5E5">talk mostly about mitigation we're going</font>

14
00:00:34,320 --> 00:00:40,079
to skip relatively quickly over the

15
00:00:36,180 --> 00:00:41,940
attacks<font color="#CCCCCC"> that also makes our talk kind of</font>

16
00:00:40,079 --> 00:00:44,399
orthogonal<font color="#E5E5E5"> to the two other spectrum</font><font color="#CCCCCC"> of</font>

17
00:00:41,940 --> 00:00:48,059
down talks that have been yet on the

18
00:00:44,399 --> 00:00:51,120
past<font color="#E5E5E5"> so spectrum meltdown one two ponies</font>

19
00:00:48,059 --> 00:00:54,149
yesterday<font color="#E5E5E5"> so we kind of</font><font color="#CCCCCC"> think that it's</font>

20
00:00:51,120 --> 00:00:56,370
a<font color="#E5E5E5"> relevant talk</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> without further ado</font>

21
00:00:54,149 --> 00:00:58,620
<font color="#E5E5E5">my</font><font color="#CCCCCC"> name is Anna's I</font><font color="#E5E5E5"> am a security</font>

22
00:00:56,370 --> 00:01:01,620
<font color="#E5E5E5">researcher and I should mention here</font>

23
00:00:58,620 --> 00:01:02,968
<font color="#E5E5E5">that I did this research while I was</font>

24
00:01:01,620 --> 00:01:05,489
employed by<font color="#CCCCCC"> gee</font><font color="#E5E5E5"> data and bounced</font>

25
00:01:02,969 --> 00:01:08,430
analytics and while under contract<font color="#CCCCCC"> with</font>

26
00:01:05,489 --> 00:01:11,490
Microsoft<font color="#CCCCCC"> the presentation here does not</font>

27
00:01:08,430 --> 00:01:16,110
reflect the<font color="#CCCCCC"> views of</font><font color="#E5E5E5"> my previous nor my</font>

28
00:01:11,490 --> 00:01:18,780
current employer and I'm Christopher<font color="#E5E5E5"> so</font>

29
00:01:16,110 --> 00:01:20,900
I'm a security engineer<font color="#CCCCCC"> and the nsrc in</font>

30
00:01:18,780 --> 00:01:23,880
the UK office

31
00:01:20,900 --> 00:01:25,890
<font color="#CCCCCC">alright so Spector and</font><font color="#E5E5E5"> meltdown these</font>

32
00:01:23,880 --> 00:01:27,600
issues gained a huge<font color="#E5E5E5"> amount of interest</font>

33
00:01:25,890 --> 00:01:29,310
<font color="#E5E5E5">from the research</font><font color="#CCCCCC"> community when they</font>

34
00:01:27,600 --> 00:01:31,408
were first disclosed<font color="#E5E5E5"> earlier this year</font>

35
00:01:29,310 --> 00:01:33,119
because<font color="#CCCCCC"> they represent</font><font color="#E5E5E5"> a fundamentally</font>

36
00:01:31,409 --> 00:01:34,860
<font color="#CCCCCC">new class of Hardware vulnerability</font>

37
00:01:33,119 --> 00:01:37,799
which is an<font color="#E5E5E5"> extremely rare occurrence</font>

38
00:01:34,860 --> 00:01:39,990
<font color="#CCCCCC">and</font><font color="#E5E5E5"> the scope of the impact is</font><font color="#CCCCCC"> just</font>

39
00:01:37,799 --> 00:01:42,180
massive<font color="#E5E5E5"> potentially leaking information</font>

40
00:01:39,990 --> 00:01:46,048
<font color="#CCCCCC">across nearly</font><font color="#E5E5E5"> every security</font><font color="#CCCCCC"> boundary</font>

41
00:01:42,180 --> 00:01:47,909
that we rely on so when we were<font color="#E5E5E5"> first</font>

42
00:01:46,049 --> 00:01:50,430
made aware<font color="#CCCCCC"> of</font><font color="#E5E5E5"> these issues</font><font color="#CCCCCC"> in June last</font>

43
00:01:47,909 --> 00:01:53,250
<font color="#CCCCCC">year we kicked off our Incident Response</font>

44
00:01:50,430 --> 00:01:54,810
<font color="#E5E5E5">process and this is</font><font color="#CCCCCC"> the typical process</font>

45
00:01:53,250 --> 00:01:56,700
that Microsoft follows whenever we're

46
00:01:54,810 --> 00:01:59,070
made aware of a security vulnerability

47
00:01:56,700 --> 00:02:01,710
<font color="#CCCCCC">either being actively exploited in the</font>

48
00:01:59,070 --> 00:02:03,539
<font color="#E5E5E5">wild or just a high threat risk that</font>

49
00:02:01,710 --> 00:02:06,419
requires mobilizing<font color="#E5E5E5"> a large number of</font>

50
00:02:03,540 --> 00:02:08,759
<font color="#CCCCCC">people within Microsoft</font><font color="#E5E5E5"> in particular</font>

51
00:02:06,420 --> 00:02:10,289
perspective<font color="#E5E5E5"> we realized we were dealing</font>

52
00:02:08,758 --> 00:02:11,329
<font color="#E5E5E5">with a fundamentally</font><font color="#CCCCCC"> new class of</font>

53
00:02:10,288 --> 00:02:15,640
vulnerability<font color="#CCCCCC"> and</font>

54
00:02:11,330 --> 00:02:15,640
we<font color="#E5E5E5"> decided to bring in an expert anders</font>

55
00:02:15,880 --> 00:02:20,480
<font color="#CCCCCC">so once again</font><font color="#E5E5E5"> why do why does</font><font color="#CCCCCC"> Microsoft</font>

56
00:02:18,950 --> 00:02:22,609
care about these<font color="#E5E5E5"> issues</font><font color="#CCCCCC"> because they</font>

57
00:02:20,480 --> 00:02:25,820
were relevant to<font color="#CCCCCC"> nearly every security</font>

58
00:02:22,610 --> 00:02:29,240
boundary we rely on so if an attacker

59
00:02:25,820 --> 00:02:30,950
has some kind of code execution<font color="#CCCCCC"> even</font>

60
00:02:29,240 --> 00:02:31,640
within a scripting environment such<font color="#CCCCCC"> as</font>

61
00:02:30,950 --> 00:02:33,260
JavaScript

62
00:02:31,640 --> 00:02:35,649
<font color="#CCCCCC">they might potentially</font><font color="#E5E5E5"> be able</font><font color="#CCCCCC"> to leak</font>

63
00:02:33,260 --> 00:02:38,829
information across<font color="#CCCCCC"> a</font><font color="#E5E5E5"> security boundary</font>

64
00:02:35,650 --> 00:02:45,350
so this affects potentially hyper-v

65
00:02:38,830 --> 00:02:47,840
<font color="#CCCCCC">Windows kernel and the browser so before</font>

66
00:02:45,350 --> 00:02:49,700
one can actually<font color="#CCCCCC"> start</font><font color="#E5E5E5"> mitigating a new</font>

67
00:02:47,840 --> 00:02:51,680
class of vulnerabilities one has to

68
00:02:49,700 --> 00:02:53,208
think<font color="#CCCCCC"> about</font><font color="#E5E5E5"> what are these</font>

69
00:02:51,680 --> 00:02:57,130
vulnerabilities especially when it's a

70
00:02:53,209 --> 00:02:59,720
new class and what we did was we<font color="#CCCCCC"> made a</font>

71
00:02:57,130 --> 00:03:02,359
made a taxonomy and a framework to

72
00:02:59,720 --> 00:03:04,390
reason about not only the attacks<font color="#E5E5E5"> but</font>

73
00:03:02,360 --> 00:03:07,130
<font color="#CCCCCC">also how the mitigation could look like</font>

74
00:03:04,390 --> 00:03:09,859
<font color="#CCCCCC">and this is</font><font color="#E5E5E5"> going to be the topic</font><font color="#CCCCCC"> of</font>

75
00:03:07,130 --> 00:03:11,000
this section<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> talk but before we</font>

76
00:03:09,860 --> 00:03:12,560
can<font color="#CCCCCC"> get that far</font><font color="#E5E5E5"> we need to talk a</font>

77
00:03:11,000 --> 00:03:15,910
little<font color="#E5E5E5"> bit about how modern CPUs</font>

78
00:03:12,560 --> 00:03:19,239
actually work<font color="#E5E5E5"> just for context so</font>

79
00:03:15,910 --> 00:03:22,250
usually we think<font color="#E5E5E5"> of programs as recipes</font>

80
00:03:19,239 --> 00:03:24,709
that execute one instruction after<font color="#E5E5E5"> the</font>

81
00:03:22,250 --> 00:03:27,019
other sequentially<font color="#E5E5E5"> and in fact this</font><font color="#CCCCCC"> is</font>

82
00:03:24,709 --> 00:03:29,510
how programmers usually<font color="#E5E5E5"> try to write</font>

83
00:03:27,019 --> 00:03:32,209
their programs<font color="#CCCCCC"> turns</font><font color="#E5E5E5"> out that if the CPU</font>

84
00:03:29,510 --> 00:03:36,230
interpreted the program in that<font color="#E5E5E5"> same way</font>

85
00:03:32,209 --> 00:03:39,410
it would<font color="#E5E5E5"> be rather slow so modern CPUs</font>

86
00:03:36,230 --> 00:03:44,179
especially the high the<font color="#CCCCCC"> high performance</font>

87
00:03:39,410 --> 00:03:46,730
general CPUs<font color="#E5E5E5"> do many things at the</font><font color="#CCCCCC"> same</font>

88
00:03:44,180 --> 00:03:49,670
<font color="#CCCCCC">time</font><font color="#E5E5E5"> and this takes a couple of</font>

89
00:03:46,730 --> 00:03:52,399
different in a couple<font color="#CCCCCC"> of</font><font color="#E5E5E5"> different ways</font>

90
00:03:49,670 --> 00:03:54,170
the<font color="#CCCCCC"> first way is</font><font color="#E5E5E5"> pipelining pipelining</font>

91
00:03:52,400 --> 00:03:56,450
means that when<font color="#E5E5E5"> it takes an instruction</font>

92
00:03:54,170 --> 00:03:58,549
in it works on<font color="#E5E5E5"> this instruction doing</font>

93
00:03:56,450 --> 00:04:01,220
<font color="#E5E5E5">bits and parts of it through multiple</font>

94
00:03:58,550 --> 00:04:04,070
<font color="#E5E5E5">stages but simply</font><font color="#CCCCCC"> lot essentially like</font>

95
00:04:01,220 --> 00:04:07,250
an assembly line the second thing is

96
00:04:04,070 --> 00:04:08,900
<font color="#E5E5E5">monitor views</font><font color="#CCCCCC"> are superscalar</font><font color="#E5E5E5"> that means</font>

97
00:04:07,250 --> 00:04:10,600
<font color="#E5E5E5">nothing</font><font color="#CCCCCC"> more that</font><font color="#E5E5E5"> it they are</font><font color="#CCCCCC"> capable of</font>

98
00:04:08,900 --> 00:04:12,080
<font color="#E5E5E5">working out and</font><font color="#CCCCCC"> march on</font><font color="#E5E5E5"> more</font>

99
00:04:10,600 --> 00:04:14,690
instructions num1

100
00:04:12,080 --> 00:04:16,879
at<font color="#CCCCCC"> the same time</font><font color="#E5E5E5"> and we'll take a look</font>

101
00:04:14,690 --> 00:04:20,189
<font color="#E5E5E5">about how</font><font color="#CCCCCC"> that works in a second</font>

102
00:04:16,879 --> 00:04:22,590
then we have out of<font color="#CCCCCC"> order execution so</font>

103
00:04:20,189 --> 00:04:24,030
out of<font color="#E5E5E5"> order</font><font color="#CCCCCC"> execution means that the</font>

104
00:04:22,590 --> 00:04:27,090
instructions<font color="#E5E5E5"> are no longer treated like</font>

105
00:04:24,030 --> 00:04:29,878
a<font color="#E5E5E5"> recipe they are actually</font><font color="#CCCCCC"> executed when</font>

106
00:04:27,090 --> 00:04:32,549
the<font color="#E5E5E5"> dependencies resolved and when</font>

107
00:04:29,879 --> 00:04:34,379
<font color="#CCCCCC">resources</font><font color="#E5E5E5"> are available so this makes it</font>

108
00:04:32,550 --> 00:04:36,449
<font color="#CCCCCC">possible to execute</font><font color="#E5E5E5"> things out of order</font>

109
00:04:34,379 --> 00:04:38,490
<font color="#CCCCCC">and this again is</font><font color="#E5E5E5"> a speed-up</font><font color="#CCCCCC"> to my</font>

110
00:04:36,449 --> 00:04:40,349
<font color="#CCCCCC">session</font>

111
00:04:38,490 --> 00:04:43,219
finally we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to talk about</font>

112
00:04:40,349 --> 00:04:45,300
speculative execution as well<font color="#E5E5E5"> and</font>

113
00:04:43,219 --> 00:04:48,180
speculative execution is essentially

114
00:04:45,300 --> 00:04:50,099
when<font color="#CCCCCC"> the pipeline</font><font color="#E5E5E5"> is working on data</font>

115
00:04:48,180 --> 00:04:52,289
<font color="#CCCCCC">that is predicted instead of actually</font>

116
00:04:50,099 --> 00:04:56,009
calculated<font color="#E5E5E5"> we'll also be talking a lot</font>

117
00:04:52,289 --> 00:04:57,960
about<font color="#E5E5E5"> that</font><font color="#CCCCCC"> so here you see a very small</font>

118
00:04:56,009 --> 00:05:00,830
assembler program that consists of<font color="#E5E5E5"> two</font>

119
00:04:57,960 --> 00:05:04,049
more instructions and an<font color="#E5E5E5"> instruction the</font>

120
00:05:00,830 --> 00:05:07,139
first and the third instruction<font color="#E5E5E5"> here</font>

121
00:05:04,050 --> 00:05:08,849
don't have any dependencies<font color="#E5E5E5"> which means</font>

122
00:05:07,139 --> 00:05:12,180
that if we<font color="#CCCCCC"> want to</font><font color="#E5E5E5"> start to run this</font>

123
00:05:08,849 --> 00:05:13,650
program<font color="#E5E5E5"> on a CPU these both instructions</font>

124
00:05:12,180 --> 00:05:17,009
are ready to start<font color="#E5E5E5"> running at any time</font>

125
00:05:13,650 --> 00:05:18,539
whereas<font color="#E5E5E5"> the middle instruction depends</font>

126
00:05:17,009 --> 00:05:21,000
on the result from the first which means

127
00:05:18,539 --> 00:05:22,770
<font color="#E5E5E5">that this is not ready it has to wait</font>

128
00:05:21,000 --> 00:05:24,690
<font color="#CCCCCC">for</font><font color="#E5E5E5"> the first instruction so when we</font>

129
00:05:22,770 --> 00:05:27,919
actually<font color="#E5E5E5"> start executing this</font><font color="#CCCCCC"> program on</font>

130
00:05:24,690 --> 00:05:30,029
I<font color="#CCCCCC"> wanting to CPU will have that the</font>

131
00:05:27,919 --> 00:05:32,969
first and the third<font color="#E5E5E5"> instruction will</font>

132
00:05:30,029 --> 00:05:34,469
start<font color="#E5E5E5"> executing this is both superscalar</font>

133
00:05:32,969 --> 00:05:37,259
<font color="#E5E5E5">because we were executing two</font>

134
00:05:34,469 --> 00:05:38,909
instructions at once and it is also<font color="#E5E5E5"> out</font>

135
00:05:37,259 --> 00:05:42,270
<font color="#CCCCCC">of order</font><font color="#E5E5E5"> because the third instruction</font>

136
00:05:38,909 --> 00:05:44,370
shouldn't execute<font color="#CCCCCC"> and</font><font color="#E5E5E5"> rip recipe order</font>

137
00:05:42,270 --> 00:05:46,500
until the second instruction action was

138
00:05:44,370 --> 00:05:48,330
done the advantage<font color="#E5E5E5"> of doing it</font><font color="#CCCCCC"> this way</font>

139
00:05:46,500 --> 00:05:51,689
<font color="#CCCCCC">is that since we're executing</font><font color="#E5E5E5"> two extra</font>

140
00:05:48,330 --> 00:05:53,460
instruction at once<font color="#E5E5E5"> this program will</font>

141
00:05:51,689 --> 00:05:55,409
take the time of one more<font color="#E5E5E5"> than one</font><font color="#CCCCCC"> ad</font>

142
00:05:53,460 --> 00:05:58,020
<font color="#E5E5E5">whereas if we were executing in a</font>

143
00:05:55,409 --> 00:05:59,819
program order<font color="#E5E5E5"> recipe order it would be</font>

144
00:05:58,020 --> 00:06:06,330
the time of<font color="#E5E5E5"> two</font><font color="#CCCCCC"> miles in one ad which is</font>

145
00:05:59,819 --> 00:06:08,310
<font color="#CCCCCC">for cost a lot more so about speculation</font>

146
00:06:06,330 --> 00:06:10,620
<font color="#E5E5E5">when we went into this we made a very</font>

147
00:06:08,310 --> 00:06:14,009
<font color="#E5E5E5">general spec definition of what</font>

148
00:06:10,620 --> 00:06:16,439
<font color="#E5E5E5">speculation is more general than</font><font color="#CCCCCC"> you</font>

149
00:06:14,009 --> 00:06:18,839
normally<font color="#E5E5E5"> find in textbooks so our</font>

150
00:06:16,439 --> 00:06:21,240
definition of speculative<font color="#CCCCCC"> execution was</font>

151
00:06:18,839 --> 00:06:24,569
that it's speculative<font color="#E5E5E5"> whenever the</font>

152
00:06:21,240 --> 00:06:26,550
pipeline is working with data that<font color="#E5E5E5"> may</font>

153
00:06:24,569 --> 00:06:28,760
turn<font color="#E5E5E5"> out to</font><font color="#CCCCCC"> be wrong that is predicted</font>

154
00:06:26,550 --> 00:06:31,760
in some kind of way

155
00:06:28,760 --> 00:06:34,520
so why does<font color="#E5E5E5"> CPU predict data well</font>

156
00:06:31,760 --> 00:06:36,170
typically it's because real data arrives

157
00:06:34,520 --> 00:06:38,780
late they're calculated later in the

158
00:06:36,170 --> 00:06:41,360
<font color="#E5E5E5">process and</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> it can be</font><font color="#CCCCCC"> predicted</font>

159
00:06:38,780 --> 00:06:43,760
very well so if you get this situation

160
00:06:41,360 --> 00:06:45,470
<font color="#E5E5E5">instead of waiting for the data you</font><font color="#CCCCCC"> can</font>

161
00:06:43,760 --> 00:06:48,280
<font color="#E5E5E5">predict it if you predict it correctly</font>

162
00:06:45,470 --> 00:06:54,260
<font color="#E5E5E5">you win if you predict it wrongly you</font>

163
00:06:48,280 --> 00:06:56,570
unroll<font color="#E5E5E5"> so speculative execution consists</font>

164
00:06:54,260 --> 00:07:01,070
of many kind of things you can speculate

165
00:06:56,570 --> 00:07:03,560
<font color="#E5E5E5">on say conditional conditional live</font><font color="#CCCCCC"> jig</font>

166
00:07:01,070 --> 00:07:05,270
you can speculate on<font color="#E5E5E5"> the instruction</font>

167
00:07:03,560 --> 00:07:07,220
pointer where that has to go<font color="#E5E5E5"> you can</font>

168
00:07:05,270 --> 00:07:09,049
speculate<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the values of registers you</font>

169
00:07:07,220 --> 00:07:13,220
can defer error handling<font color="#E5E5E5"> things like</font>

170
00:07:09,050 --> 00:07:17,900
this so when<font color="#E5E5E5"> this prediction is actually</font>

171
00:07:13,220 --> 00:07:20,120
unrolled<font color="#E5E5E5"> all the results that are</font><font color="#CCCCCC"> that</font>

172
00:07:17,900 --> 00:07:23,090
comes from working<font color="#CCCCCC"> with the mispredicted</font>

173
00:07:20,120 --> 00:07:25,280
data are just dropped<font color="#E5E5E5"> just completely</font>

174
00:07:23,090 --> 00:07:27,500
removed from the<font color="#CCCCCC"> CPU and this</font><font color="#E5E5E5"> includes</font>

175
00:07:25,280 --> 00:07:31,880
<font color="#E5E5E5">registers memory operations</font><font color="#CCCCCC"> things like</font>

176
00:07:27,500 --> 00:07:34,910
that<font color="#CCCCCC"> and when</font><font color="#E5E5E5"> these things are then</font>

177
00:07:31,880 --> 00:07:36,590
dropped execution will pick up where the

178
00:07:34,910 --> 00:07:40,190
prediction was<font color="#CCCCCC"> made because now we have</font>

179
00:07:36,590 --> 00:07:43,640
the right data<font color="#CCCCCC"> however</font><font color="#E5E5E5"> there is this</font>

180
00:07:40,190 --> 00:07:46,250
tiny<font color="#E5E5E5"> snack here</font><font color="#CCCCCC"> not everything is rolled</font>

181
00:07:43,640 --> 00:07:48,140
<font color="#CCCCCC">back and an example</font><font color="#E5E5E5"> of what's not rolled</font>

182
00:07:46,250 --> 00:07:52,310
back when speculative execution is

183
00:07:48,140 --> 00:07:53,780
unrolled<font color="#E5E5E5"> is the caches so speculative</font>

184
00:07:52,310 --> 00:07:57,830
execution can actually load a cache and

185
00:07:53,780 --> 00:07:59,419
<font color="#CCCCCC">will not unload it afterwards</font><font color="#E5E5E5"> so we need</font>

186
00:07:57,830 --> 00:08:03,109
to talk<font color="#CCCCCC"> a bit about memory uses and</font>

187
00:07:59,420 --> 00:08:05,930
caches so<font color="#E5E5E5"> it turns out that main memory</font>

188
00:08:03,110 --> 00:08:07,910
<font color="#CCCCCC">that</font><font color="#E5E5E5"> is DRAM modules reading data from</font>

189
00:08:05,930 --> 00:08:11,170
those are really really<font color="#CCCCCC"> slow compared to</font>

190
00:08:07,910 --> 00:08:14,180
<font color="#E5E5E5">how fast</font><font color="#CCCCCC"> a modern CPU actually is</font><font color="#E5E5E5"> and</font>

191
00:08:11,170 --> 00:08:17,180
one should<font color="#E5E5E5"> also notice here that memory</font>

192
00:08:14,180 --> 00:08:19,940
access patents are<font color="#CCCCCC"> not random this they</font>

193
00:08:17,180 --> 00:08:22,910
can in terms of rejected in some way and

194
00:08:19,940 --> 00:08:26,030
the way<font color="#E5E5E5"> that this works is</font><font color="#CCCCCC"> that usually</font>

195
00:08:22,910 --> 00:08:29,600
<font color="#E5E5E5">CPUs tend to use the</font><font color="#CCCCCC"> same memory again</font>

196
00:08:26,030 --> 00:08:31,250
and again<font color="#E5E5E5"> and there's a solution for CPU</font>

197
00:08:29,600 --> 00:08:32,630
designers<font color="#E5E5E5"> to this to make this faster</font>

198
00:08:31,250 --> 00:08:35,150
and this<font color="#E5E5E5"> is to make a very small cache</font>

199
00:08:32,630 --> 00:08:36,740
inside of the CPU not in MIT just<font color="#E5E5E5"> part</font>

200
00:08:35,150 --> 00:08:39,978
<font color="#E5E5E5">of main</font><font color="#CCCCCC"> memory but inside the CPU and</font>

201
00:08:36,740 --> 00:08:40,710
keep the most<font color="#E5E5E5"> recent memory access in</font>

202
00:08:39,979 --> 00:08:43,020
there

203
00:08:40,710 --> 00:08:45,360
serve memory<font color="#CCCCCC"> requests from this cache if</font>

204
00:08:43,020 --> 00:08:50,939
possible<font color="#E5E5E5"> and this of course makes</font><font color="#CCCCCC"> it a</font>

205
00:08:45,360 --> 00:08:54,270
lot<font color="#CCCCCC"> faster so this also entails</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> site</font>

206
00:08:50,940 --> 00:08:57,510
<font color="#CCCCCC">channel so that an attacker can time how</font>

207
00:08:54,270 --> 00:09:00,870
<font color="#CCCCCC">fast a memory accesses and if it's fast</font>

208
00:08:57,510 --> 00:09:02,550
<font color="#CCCCCC">well it was</font><font color="#E5E5E5"> recently</font><font color="#CCCCCC"> used and this of</font>

209
00:09:00,870 --> 00:09:05,390
course means that<font color="#E5E5E5"> he is able to tell</font>

210
00:09:02,550 --> 00:09:08,579
<font color="#E5E5E5">something about memory access pattern</font>

211
00:09:05,390 --> 00:09:11,040
<font color="#E5E5E5">made by whoever executed before him</font>

212
00:09:08,580 --> 00:09:12,960
which again means he's able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> tell</font>

213
00:09:11,040 --> 00:09:15,060
something<font color="#CCCCCC"> about that</font><font color="#E5E5E5"> and we're gonna see</font>

214
00:09:12,960 --> 00:09:18,690
this a lot going through<font color="#E5E5E5"> this</font>

215
00:09:15,060 --> 00:09:21,359
presentation<font color="#E5E5E5"> so the fundamental idea</font>

216
00:09:18,690 --> 00:09:23,490
about<font color="#E5E5E5"> spectral meltdown is that when the</font>

217
00:09:21,360 --> 00:09:26,490
CPU<font color="#CCCCCC"> unroll speculative execution</font>

218
00:09:23,490 --> 00:09:31,650
it doesn't unroll everything the cache

219
00:09:26,490 --> 00:09:33,660
is<font color="#E5E5E5"> the example here and that through</font>

220
00:09:31,650 --> 00:09:37,439
this side<font color="#E5E5E5"> channel we were capable of</font>

221
00:09:33,660 --> 00:09:40,170
recovering<font color="#E5E5E5"> information that was used</font>

222
00:09:37,440 --> 00:09:42,720
<font color="#E5E5E5">during the</font><font color="#CCCCCC"> speculate</font><font color="#E5E5E5"> execution and the</font>

223
00:09:40,170 --> 00:09:44,610
results here can then be<font color="#E5E5E5"> recovered</font>

224
00:09:42,720 --> 00:09:47,220
through<font color="#E5E5E5"> the side channel</font><font color="#CCCCCC"> and in some</font>

225
00:09:44,610 --> 00:09:49,410
cases these results contain private data

226
00:09:47,220 --> 00:09:53,640
and we have leakage<font color="#E5E5E5"> of private data</font>

227
00:09:49,410 --> 00:09:56,400
between<font color="#CCCCCC"> security domains so moving on</font><font color="#E5E5E5"> to</font>

228
00:09:53,640 --> 00:09:58,980
spectral variant<font color="#CCCCCC"> one so spectral Rayyan</font>

229
00:09:56,400 --> 00:10:00,780
one works with prediction<font color="#E5E5E5"> of conditional</font>

230
00:09:58,980 --> 00:10:03,600
branches<font color="#E5E5E5"> so the thing about a</font>

231
00:10:00,780 --> 00:10:05,550
conditional branch is that you don't

232
00:10:03,600 --> 00:10:08,070
know where it goes<font color="#CCCCCC"> until it's been</font>

233
00:10:05,550 --> 00:10:10,290
executed<font color="#E5E5E5"> however we want the pipeline to</font>

234
00:10:08,070 --> 00:10:12,210
<font color="#CCCCCC">be full to have it full of instructions</font>

235
00:10:10,290 --> 00:10:17,670
to<font color="#E5E5E5"> work on from the out of order</font>

236
00:10:12,210 --> 00:10:19,350
execution engine for this<font color="#E5E5E5"> reason the CPU</font>

237
00:10:17,670 --> 00:10:21,030
predicts the conditional branches

238
00:10:19,350 --> 00:10:22,830
because it can do that right up<font color="#CCCCCC"> the top</font>

239
00:10:21,030 --> 00:10:25,079
at<font color="#CCCCCC"> the pipeline and keep on filling the</font>

240
00:10:22,830 --> 00:10:28,050
rest<font color="#E5E5E5"> of the pipeline</font><font color="#CCCCCC"> so we have this</font>

241
00:10:25,080 --> 00:10:33,180
delay here that I was<font color="#E5E5E5"> talking about</font>

242
00:10:28,050 --> 00:10:36,199
before<font color="#CCCCCC"> this</font><font color="#E5E5E5"> actually works</font><font color="#CCCCCC"> quite well</font>

243
00:10:33,180 --> 00:10:39,000
modern<font color="#E5E5E5"> CPUs are capable of predicting</font>

244
00:10:36,200 --> 00:10:42,750
conditional branches above 99% of the

245
00:10:39,000 --> 00:10:45,570
times correctly<font color="#E5E5E5"> however we said before</font>

246
00:10:42,750 --> 00:10:49,410
<font color="#E5E5E5">that conditional branches are predicted</font>

247
00:10:45,570 --> 00:10:51,390
on past history<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the CPU and this is a</font>

248
00:10:49,410 --> 00:10:53,219
problem because if<font color="#CCCCCC"> it's an attacker is</font>

249
00:10:51,390 --> 00:10:53,730
running on the CPU<font color="#E5E5E5"> he actually</font>

250
00:10:53,220 --> 00:10:55,859
determined

251
00:10:53,730 --> 00:10:57,869
past behavior<font color="#E5E5E5"> and he determines how</font>

252
00:10:55,859 --> 00:11:01,470
these things<font color="#E5E5E5"> will predict be predicted</font>

253
00:10:57,869 --> 00:11:03,839
<font color="#E5E5E5">and this allows the attacker to</font>

254
00:11:01,470 --> 00:11:07,259
<font color="#E5E5E5">determine the prediction and if we look</font>

255
00:11:03,839 --> 00:11:10,139
at the code<font color="#CCCCCC"> but</font><font color="#E5E5E5"> below</font><font color="#CCCCCC"> the blue thing</font>

256
00:11:07,259 --> 00:11:11,999
<font color="#E5E5E5">we'll see what essentially will be a</font>

257
00:11:10,139 --> 00:11:15,569
conditional branch<font color="#E5E5E5"> and we have an</font>

258
00:11:11,999 --> 00:11:19,619
untrusted index in here<font color="#E5E5E5"> so if the</font>

259
00:11:15,569 --> 00:11:20,189
prediction is wrong or no matter what

260
00:11:19,619 --> 00:11:21,959
the predictor

261
00:11:20,189 --> 00:11:23,939
no matter what the<font color="#CCCCCC"> value of the</font>

262
00:11:21,959 --> 00:11:27,029
untrusted<font color="#E5E5E5"> index with the</font><font color="#CCCCCC"> wrong</font>

263
00:11:23,939 --> 00:11:31,519
prediction the<font color="#CCCCCC"> the code</font><font color="#E5E5E5"> below the if</font>

264
00:11:27,029 --> 00:11:34,799
statement<font color="#CCCCCC"> can execute speculatively</font><font color="#E5E5E5"> so</font>

265
00:11:31,519 --> 00:11:38,399
this means that<font color="#E5E5E5"> the second line of the</font>

266
00:11:34,799 --> 00:11:42,179
<font color="#E5E5E5">code is capable of accessing in in a</font>

267
00:11:38,399 --> 00:11:44,609
buffer indexed<font color="#E5E5E5"> on our untrusted index</font>

268
00:11:42,179 --> 00:11:46,738
and this untrusted index can take any

269
00:11:44,609 --> 00:11:50,459
value<font color="#CCCCCC"> meaning that we essentially have</font>

270
00:11:46,739 --> 00:11:53,069
arbitrary load of memory into<font color="#E5E5E5"> the CPU</font>

271
00:11:50,459 --> 00:11:55,079
<font color="#CCCCCC">this is enough in and of itself not a</font>

272
00:11:53,069 --> 00:11:57,209
big<font color="#E5E5E5"> problem the problem comes with a</font>

273
00:11:55,079 --> 00:12:01,738
search<font color="#E5E5E5"> statement and the search</font>

274
00:11:57,209 --> 00:12:04,649
statement is essentially loading into

275
00:12:01,739 --> 00:12:07,799
the cache<font color="#E5E5E5"> some address depending on the</font>

276
00:12:04,649 --> 00:12:11,639
value<font color="#CCCCCC"> that we read from arbitrary memory</font>

277
00:12:07,799 --> 00:12:14,910
<font color="#CCCCCC">so we take the cache in a way that</font>

278
00:12:11,639 --> 00:12:17,459
discloses<font color="#E5E5E5"> what the value of the memory</font>

279
00:12:14,910 --> 00:12:19,379
<font color="#E5E5E5">the arbitrary memory that we read in the</font>

280
00:12:17,459 --> 00:12:21,049
<font color="#CCCCCC">previous statement in other words we're</font>

281
00:12:19,379 --> 00:12:23,999
capable<font color="#CCCCCC"> of reading arbitrary memory</font>

282
00:12:21,049 --> 00:12:26,639
using the<font color="#E5E5E5"> side channel timing attack we</font>

283
00:12:23,999 --> 00:12:28,859
described on<font color="#E5E5E5"> under the caches so if</font>

284
00:12:26,639 --> 00:12:30,959
you're<font color="#CCCCCC"> wondering what</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> 40 in</font><font color="#E5E5E5"> that</font>

285
00:12:28,859 --> 00:12:32,730
<font color="#E5E5E5">statement is it's because caches don't</font>

286
00:12:30,959 --> 00:12:36,679
really work on bytes<font color="#E5E5E5"> they works on</font>

287
00:12:32,730 --> 00:12:41,039
blocks<font color="#E5E5E5"> of 64 bytes and 40</font><font color="#CCCCCC"> hexes 64 bytes</font>

288
00:12:36,679 --> 00:12:42,689
<font color="#CCCCCC">and to be able</font><font color="#E5E5E5"> to distinguish between</font>

289
00:12:41,039 --> 00:12:45,509
all<font color="#E5E5E5"> different values you need to</font>

290
00:12:42,689 --> 00:12:46,889
multiply by<font color="#E5E5E5"> that the consequence of</font>

291
00:12:45,509 --> 00:12:49,980
<font color="#CCCCCC">having this code somewhere</font><font color="#E5E5E5"> in your</font>

292
00:12:46,889 --> 00:12:55,139
computer is that if an attacker can

293
00:12:49,980 --> 00:12:57,959
execute this code can find<font color="#E5E5E5"> execute or</font>

294
00:12:55,139 --> 00:13:00,869
generate and execute this code<font color="#E5E5E5"> he'll be</font>

295
00:12:57,959 --> 00:13:03,779
able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> read memory at the privileged</font>

296
00:13:00,869 --> 00:13:05,970
count<font color="#CCCCCC"> the privilege level where</font><font color="#E5E5E5"> they</font>

297
00:13:03,779 --> 00:13:07,470
<font color="#E5E5E5">found this code so if this is a kernel</font>

298
00:13:05,970 --> 00:13:09,900
<font color="#E5E5E5">or the hypervisor or</font>

299
00:13:07,470 --> 00:13:12,390
in<font color="#E5E5E5"> clave doesn't matter he's capable of</font>

300
00:13:09,900 --> 00:13:15,420
reading the memory with a high privilege

301
00:13:12,390 --> 00:13:18,990
<font color="#CCCCCC">this is a clear violation of basic</font>

302
00:13:15,420 --> 00:13:22,199
security<font color="#E5E5E5"> principles so moving on to</font>

303
00:13:18,990 --> 00:13:24,180
<font color="#E5E5E5">respect</font><font color="#CCCCCC"> to variant two this time around</font>

304
00:13:22,200 --> 00:13:26,940
<font color="#E5E5E5">if not conditional branches is indirect</font>

305
00:13:24,180 --> 00:13:28,469
branches and in our<font color="#CCCCCC"> back branches is not</font>

306
00:13:26,940 --> 00:13:30,360
predicted whether they are taken or not

307
00:13:28,470 --> 00:13:33,240
taken<font color="#E5E5E5"> because</font><font color="#CCCCCC"> they're always taken</font>

308
00:13:30,360 --> 00:13:36,570
they are predicted where they are going

309
00:13:33,240 --> 00:13:38,430
to go so like before<font color="#E5E5E5"> indirect branches</font>

310
00:13:36,570 --> 00:13:40,230
can be trained<font color="#E5E5E5"> but there is a special</font>

311
00:13:38,430 --> 00:13:42,060
thing about indirect branches<font color="#E5E5E5"> that it's</font>

312
00:13:40,230 --> 00:13:45,360
not<font color="#CCCCCC"> just</font><font color="#E5E5E5"> a single bit that has to be</font>

313
00:13:42,060 --> 00:13:48,930
predicted<font color="#E5E5E5"> it's an entire address and for</font>

314
00:13:45,360 --> 00:13:51,600
<font color="#E5E5E5">this reason</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> CPU keeps a table where</font>

315
00:13:48,930 --> 00:13:53,099
any indirect branch<font color="#CCCCCC"> past behavior is</font>

316
00:13:51,600 --> 00:13:56,340
stored this is called the branch target

317
00:13:53,100 --> 00:13:59,820
buffer<font color="#CCCCCC"> of btp and because you can't have</font>

318
00:13:56,340 --> 00:14:02,610
a table for every possible indirect jump

319
00:13:59,820 --> 00:14:04,200
<font color="#E5E5E5">it actually is indexed with just a</font>

320
00:14:02,610 --> 00:14:06,600
subset of the bit of<font color="#E5E5E5"> the address of the</font>

321
00:14:04,200 --> 00:14:09,180
indirect jump<font color="#E5E5E5"> this means that if an</font>

322
00:14:06,600 --> 00:14:10,560
<font color="#E5E5E5">address if an attacker knows which bit</font>

323
00:14:09,180 --> 00:14:11,790
this is and this can be reverse

324
00:14:10,560 --> 00:14:15,209
engineered and has been reversed

325
00:14:11,790 --> 00:14:17,010
<font color="#E5E5E5">engineered he can just allocate a piece</font>

326
00:14:15,210 --> 00:14:20,370
of memory put an indirect branch<font color="#E5E5E5"> in a</font>

327
00:14:17,010 --> 00:14:22,050
location that collides with this and

328
00:14:20,370 --> 00:14:24,650
then he<font color="#CCCCCC"> could start</font><font color="#E5E5E5"> training his</font>

329
00:14:22,050 --> 00:14:27,479
indirect branch to go wherever<font color="#E5E5E5"> he likes</font>

330
00:14:24,650 --> 00:14:31,470
meaning that<font color="#E5E5E5"> an attacker is capable of</font>

331
00:14:27,480 --> 00:14:34,790
picking code in<font color="#E5E5E5"> the security domain</font>

332
00:14:31,470 --> 00:14:37,020
where he<font color="#CCCCCC"> found</font><font color="#E5E5E5"> the indirect branch</font>

333
00:14:34,790 --> 00:14:39,780
essentially anywhere so I try<font color="#E5E5E5"> to</font>

334
00:14:37,020 --> 00:14:42,660
illustrate<font color="#E5E5E5"> this here with the</font><font color="#CCCCCC"> read</font><font color="#E5E5E5"> 5,000</font>

335
00:14:39,780 --> 00:14:45,209
<font color="#E5E5E5">rx equals that it should go to 5,000 put</font>

336
00:14:42,660 --> 00:14:47,250
speculatively it can go anywhere<font color="#CCCCCC"> and an</font>

337
00:14:45,210 --> 00:14:49,260
attacker can make it go<font color="#CCCCCC"> to 4141 if he</font>

338
00:14:47,250 --> 00:14:51,960
likes the<font color="#E5E5E5"> assembler code</font><font color="#CCCCCC"> in the lower</font>

339
00:14:49,260 --> 00:14:53,550
part of the slide<font color="#E5E5E5"> this is same as the C</font>

340
00:14:51,960 --> 00:14:57,230
code<font color="#CCCCCC"> and the previous slide it just</font>

341
00:14:53,550 --> 00:14:59,520
reads memory and persists into<font color="#E5E5E5"> the cache</font>

342
00:14:57,230 --> 00:15:01,980
<font color="#E5E5E5">so this makes the attack</font><font color="#CCCCCC"> a lot worse</font>

343
00:14:59,520 --> 00:15:05,960
<font color="#E5E5E5">from from a defender perspective because</font>

344
00:15:01,980 --> 00:15:08,130
now we<font color="#E5E5E5"> don't need to</font><font color="#CCCCCC"> have a long</font><font color="#E5E5E5"> blog</font>

345
00:15:05,960 --> 00:15:10,140
<font color="#E5E5E5">consistent code we can</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> just</font>

346
00:15:08,130 --> 00:15:11,339
<font color="#E5E5E5">have</font><font color="#CCCCCC"> a in Eric branch and and the rest</font>

347
00:15:10,140 --> 00:15:13,890
of the code that<font color="#E5E5E5"> an attacker needs</font>

348
00:15:11,339 --> 00:15:17,850
somewhere<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> of course much more</font>

349
00:15:13,890 --> 00:15:21,089
flexible<font color="#E5E5E5"> again the consequences</font><font color="#CCCCCC"> of this</font>

350
00:15:17,850 --> 00:15:23,189
is an attacker is capable<font color="#E5E5E5"> of reading</font>

351
00:15:21,089 --> 00:15:25,649
<font color="#E5E5E5">they shouldn't be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to memory to read</font>

352
00:15:23,189 --> 00:15:30,809
that is in the security<font color="#CCCCCC"> domain where he</font>

353
00:15:25,649 --> 00:15:33,779
finds these two things<font color="#CCCCCC"> which leads us</font><font color="#E5E5E5"> on</font>

354
00:15:30,809 --> 00:15:37,019
<font color="#E5E5E5">to the third variant the third variant</font>

355
00:15:33,779 --> 00:15:39,149
is also known as meltdown<font color="#E5E5E5"> and it is</font>

356
00:15:37,019 --> 00:15:41,189
fundamentally different from spectra in

357
00:15:39,149 --> 00:15:43,350
that<font color="#E5E5E5"> perspective</font><font color="#CCCCCC"> you need to find to</font>

358
00:15:41,189 --> 00:15:45,719
create<font color="#E5E5E5"> this code you could bring it with</font>

359
00:15:43,350 --> 00:15:48,059
you<font color="#E5E5E5"> an attacker can write all the code</font>

360
00:15:45,720 --> 00:15:49,230
that<font color="#E5E5E5"> is needed for this attack</font><font color="#CCCCCC"> so this</font>

361
00:15:48,059 --> 00:15:51,569
is the first<font color="#E5E5E5"> major difference</font>

362
00:15:49,230 --> 00:15:54,540
the second<font color="#E5E5E5"> major difference is that</font><font color="#CCCCCC"> this</font>

363
00:15:51,569 --> 00:15:57,839
is<font color="#CCCCCC"> not about branches so what happens</font>

364
00:15:54,540 --> 00:16:00,748
<font color="#CCCCCC">here</font><font color="#E5E5E5"> is that when a user tries to access</font>

365
00:15:57,839 --> 00:16:02,160
kernel memory<font color="#E5E5E5"> the colonel says no you're</font>

366
00:16:00,749 --> 00:16:04,680
not<font color="#E5E5E5"> allowed</font><font color="#CCCCCC"> to do this it's both an</font>

367
00:16:02,160 --> 00:16:07,199
exception and<font color="#CCCCCC"> stop program execution</font>

368
00:16:04,680 --> 00:16:09,989
<font color="#E5E5E5">which is great because then you can't</font>

369
00:16:07,199 --> 00:16:11,819
<font color="#E5E5E5">read kernel</font><font color="#CCCCCC"> memory except what</font><font color="#E5E5E5"> happens</font>

370
00:16:09,990 --> 00:16:14,879
in some CPUs is that when you try<font color="#CCCCCC"> to</font>

371
00:16:11,819 --> 00:16:16,829
read kernel<font color="#E5E5E5"> memory the CPU speculates oh</font>

372
00:16:14,879 --> 00:16:19,079
<font color="#CCCCCC">he's</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> reading</font><font color="#E5E5E5"> from memory</font><font color="#CCCCCC"> I should</font>

373
00:16:16,829 --> 00:16:21,029
give<font color="#CCCCCC"> it to</font><font color="#E5E5E5"> him and at some point a</font>

374
00:16:19,079 --> 00:16:23,160
little<font color="#E5E5E5"> later it will discover oh there</font>

375
00:16:21,029 --> 00:16:26,040
should<font color="#E5E5E5"> be an exception</font><font color="#CCCCCC"> and this gives an</font>

376
00:16:23,160 --> 00:16:29,309
attacker a window to do the exact same

377
00:16:26,040 --> 00:16:30,990
trick<font color="#CCCCCC"> as before</font><font color="#E5E5E5"> persist the memory into</font>

378
00:16:29,309 --> 00:16:33,779
<font color="#CCCCCC">the cache and side-channel it out</font>

379
00:16:30,990 --> 00:16:36,509
afterwards<font color="#CCCCCC"> and this leads to</font><font color="#E5E5E5"> the</font>

380
00:16:33,779 --> 00:16:39,029
<font color="#E5E5E5">situation where an unprivileged user is</font>

381
00:16:36,509 --> 00:16:41,459
capable<font color="#CCCCCC"> of reading</font><font color="#E5E5E5"> arbitrary kernel mode</font>

382
00:16:39,029 --> 00:16:44,309
memory<font color="#CCCCCC"> and that again is a clear</font>

383
00:16:41,459 --> 00:16:49,138
violation<font color="#CCCCCC"> of</font><font color="#E5E5E5"> standard operating system</font>

384
00:16:44,309 --> 00:16:50,459
<font color="#E5E5E5">security so now that we have seen the</font>

385
00:16:49,139 --> 00:16:53,509
three<font color="#E5E5E5"> variant</font><font color="#CCCCCC"> that we were presented</font>

386
00:16:50,459 --> 00:16:56,189
with in June<font color="#CCCCCC"> last year</font><font color="#E5E5E5"> we go on to</font>

387
00:16:53,509 --> 00:16:58,230
building<font color="#E5E5E5"> economy about that the first</font>

388
00:16:56,189 --> 00:17:00,540
<font color="#E5E5E5">question we</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> to raise this why do we</font>

389
00:16:58,230 --> 00:17:03,770
want<font color="#E5E5E5"> to create a taxonomy the thing is</font>

390
00:17:00,540 --> 00:17:07,918
when you<font color="#E5E5E5"> design medications especially</font>

391
00:17:03,770 --> 00:17:11,220
mitigations<font color="#E5E5E5"> which relies who comes with</font>

392
00:17:07,919 --> 00:17:13,350
a new class of vulnerabilities<font color="#E5E5E5"> you want</font>

393
00:17:11,220 --> 00:17:15,899
to be<font color="#CCCCCC"> systematic about</font><font color="#E5E5E5"> it you don't want</font>

394
00:17:13,349 --> 00:17:18,270
to mitigate<font color="#E5E5E5"> the three examples that we</font>

395
00:17:15,898 --> 00:17:20,819
were sent from Google<font color="#E5E5E5"> project zero you</font>

396
00:17:18,270 --> 00:17:23,970
want to mitigate<font color="#E5E5E5"> every possible</font>

397
00:17:20,819 --> 00:17:27,000
variation<font color="#CCCCCC"> of these and to do this you</font>

398
00:17:23,970 --> 00:17:29,190
<font color="#E5E5E5">need a taxonomy to reason about how this</font>

399
00:17:27,000 --> 00:17:31,860
thing actually<font color="#E5E5E5"> works when does it break</font>

400
00:17:29,190 --> 00:17:32,940
down<font color="#E5E5E5"> when doesn't it break down so we</font>

401
00:17:31,860 --> 00:17:35,939
went<font color="#E5E5E5"> on to</font>

402
00:17:32,940 --> 00:17:38,310
work on a taxonomy<font color="#E5E5E5"> and what we noticed</font>

403
00:17:35,940 --> 00:17:40,080
<font color="#E5E5E5">was that there</font><font color="#CCCCCC"> are four</font><font color="#E5E5E5"> steps that</font><font color="#CCCCCC"> are</font>

404
00:17:38,310 --> 00:17:44,270
required<font color="#CCCCCC"> for an attacker to run</font><font color="#E5E5E5"> a</font>

405
00:17:40,080 --> 00:17:47,580
speculative<font color="#E5E5E5"> execution attack</font><font color="#CCCCCC"> the first</font>

406
00:17:44,270 --> 00:17:50,460
thing that<font color="#CCCCCC"> an attacker</font><font color="#E5E5E5"> needs to do he</font>

407
00:17:47,580 --> 00:17:53,730
needs to get wrong data into the

408
00:17:50,460 --> 00:17:58,410
<font color="#CCCCCC">pipeline and we call that call</font><font color="#E5E5E5"> the</font>

409
00:17:53,730 --> 00:17:59,640
process<font color="#E5E5E5"> gaining speculation and we call</font>

410
00:17:58,410 --> 00:18:01,650
the primitive the code<font color="#E5E5E5"> that actually</font>

411
00:17:59,640 --> 00:18:03,240
does this that for<font color="#E5E5E5"> specter</font><font color="#CCCCCC"> of you will</font>

412
00:18:01,650 --> 00:18:05,220
need to find<font color="#E5E5E5"> from</font><font color="#CCCCCC"> milp and he'll need to</font>

413
00:18:03,240 --> 00:18:08,160
write<font color="#E5E5E5"> we call this a speculation</font>

414
00:18:05,220 --> 00:18:10,380
primitive and this essentially gets

415
00:18:08,160 --> 00:18:12,660
wrong<font color="#E5E5E5"> data into the pipeline the second</font>

416
00:18:10,380 --> 00:18:16,790
thing that an attacker<font color="#E5E5E5"> needs to make</font>

417
00:18:12,660 --> 00:18:19,650
sure<font color="#CCCCCC"> is that once he</font><font color="#E5E5E5"> is in speculation</font>

418
00:18:16,790 --> 00:18:20,520
<font color="#E5E5E5">the</font><font color="#CCCCCC"> CPU will try to rectify</font><font color="#E5E5E5"> this as soon</font>

419
00:18:19,650 --> 00:18:22,830
<font color="#E5E5E5">as possible</font>

420
00:18:20,520 --> 00:18:26,220
<font color="#E5E5E5">and he wants to delay that so that he</font>

421
00:18:22,830 --> 00:18:28,439
can run<font color="#CCCCCC"> the code that persists persist</font>

422
00:18:26,220 --> 00:18:31,830
the secret data into the cache of some

423
00:18:28,440 --> 00:18:33,690
work somewhere else<font color="#E5E5E5"> to make sure that he</font>

424
00:18:31,830 --> 00:18:34,980
can read it out later<font color="#CCCCCC"> so there's a race</font>

425
00:18:33,690 --> 00:18:37,500
condition<font color="#E5E5E5"> here and he needs to make</font><font color="#CCCCCC"> sure</font>

426
00:18:34,980 --> 00:18:39,240
<font color="#CCCCCC">he can win that and we</font><font color="#E5E5E5"> talked about</font><font color="#CCCCCC"> a</font>

427
00:18:37,500 --> 00:18:40,890
window<font color="#E5E5E5"> for speculative execution and</font>

428
00:18:39,240 --> 00:18:44,430
hence we're talking about<font color="#CCCCCC"> Windows</font>

429
00:18:40,890 --> 00:18:47,040
gadgets<font color="#E5E5E5"> and the third step he needs to</font>

430
00:18:44,430 --> 00:18:50,490
do<font color="#E5E5E5"> is he</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> needs to write the</font>

431
00:18:47,040 --> 00:18:52,649
<font color="#E5E5E5">secret in to a side channel where</font><font color="#CCCCCC"> he can</font>

432
00:18:50,490 --> 00:18:56,220
read it later<font color="#E5E5E5"> we call this this</font>

433
00:18:52,650 --> 00:18:57,720
disclosure tachat and finally he needs

434
00:18:56,220 --> 00:18:59,820
to get the information<font color="#E5E5E5"> back from the</font>

435
00:18:57,720 --> 00:19:01,950
cache or wherever he<font color="#E5E5E5"> stored it</font><font color="#CCCCCC"> in</font>

436
00:18:59,820 --> 00:19:03,960
whatever<font color="#E5E5E5"> side</font><font color="#CCCCCC"> channel he used and we</font>

437
00:19:01,950 --> 00:19:05,340
call this the disclosure primitive this

438
00:19:03,960 --> 00:19:07,800
is where he<font color="#E5E5E5"> gets the data back so he's</font>

439
00:19:05,340 --> 00:19:11,120
able<font color="#E5E5E5"> to work with it</font><font color="#CCCCCC"> and disclose it or</font>

440
00:19:07,800 --> 00:19:17,190
do whatever<font color="#E5E5E5"> evil</font><font color="#CCCCCC"> he wants to do with</font><font color="#E5E5E5"> it</font>

441
00:19:11,120 --> 00:19:20,159
oh sorry<font color="#E5E5E5"> so it should be fairly</font><font color="#CCCCCC"> obvious</font>

442
00:19:17,190 --> 00:19:23,100
that<font color="#E5E5E5"> if any of these steps breaks there</font>

443
00:19:20,160 --> 00:19:24,540
is no speculative attack<font color="#CCCCCC"> and when you</font>

444
00:19:23,100 --> 00:19:26,760
<font color="#E5E5E5">think of it like this this is</font><font color="#CCCCCC"> very</font>

445
00:19:24,540 --> 00:19:29,790
important<font color="#E5E5E5"> information</font><font color="#CCCCCC"> for somebody who</font>

446
00:19:26,760 --> 00:19:31,290
<font color="#E5E5E5">wants to mitigate this stuff I'm taking</font>

447
00:19:29,790 --> 00:19:33,360
a closer look<font color="#E5E5E5"> at</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> of these things</font><font color="#CCCCCC"> so</font>

448
00:19:31,290 --> 00:19:35,970
<font color="#E5E5E5">gaining</font><font color="#CCCCCC"> speculation the speculation</font>

449
00:19:33,360 --> 00:19:39,270
primitive essentially we have three

450
00:19:35,970 --> 00:19:40,740
<font color="#CCCCCC">versions or we have three</font><font color="#E5E5E5"> versions of it</font>

451
00:19:39,270 --> 00:19:43,050
<font color="#E5E5E5">we have</font><font color="#CCCCCC"> misprediction on conditional</font>

452
00:19:40,740 --> 00:19:45,120
branches we have<font color="#E5E5E5"> misprediction on</font>

453
00:19:43,050 --> 00:19:46,050
indirect branches both<font color="#E5E5E5"> of which could be</font>

454
00:19:45,120 --> 00:19:49,260
<font color="#E5E5E5">trained the</font><font color="#CCCCCC"> in</font>

455
00:19:46,050 --> 00:19:50,879
break<font color="#CCCCCC"> branches a bit more sophisticated</font>

456
00:19:49,260 --> 00:19:53,010
there allows an attacker more

457
00:19:50,880 --> 00:19:54,810
possibilities<font color="#E5E5E5"> and finally we have the</font>

458
00:19:53,010 --> 00:19:56,820
meltdown version where we<font color="#CCCCCC"> have an</font>

459
00:19:54,810 --> 00:20:00,659
interrupt that<font color="#E5E5E5"> is delivered after</font><font color="#CCCCCC"> it</font>

460
00:19:56,820 --> 00:20:04,050
should be and allows execution to<font color="#CCCCCC"> be</font>

461
00:20:00,660 --> 00:20:08,430
continued<font color="#CCCCCC"> with data</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> a that</font>

462
00:20:04,050 --> 00:20:10,740
shouldn't be present in the pipeline<font color="#CCCCCC"> so</font>

463
00:20:08,430 --> 00:20:12,510
the second is window gadgets maintaining

464
00:20:10,740 --> 00:20:15,380
<font color="#CCCCCC">speculation so the thing</font><font color="#E5E5E5"> here is that</font>

465
00:20:12,510 --> 00:20:18,600
once we an attacker executes the

466
00:20:15,380 --> 00:20:20,400
speculation gadget he is on a race

467
00:20:18,600 --> 00:20:22,850
<font color="#CCCCCC">condition</font><font color="#E5E5E5"> against the CPU finding out</font>

468
00:20:20,400 --> 00:20:28,530
that it was working<font color="#CCCCCC"> on predicted data</font>

469
00:20:22,850 --> 00:20:32,159
<font color="#CCCCCC">mispredicted</font><font color="#E5E5E5"> data and to win this race</font>

470
00:20:28,530 --> 00:20:34,680
condition<font color="#E5E5E5"> he needs to have some code</font>

471
00:20:32,160 --> 00:20:36,750
that<font color="#CCCCCC"> gives</font><font color="#E5E5E5"> him time and he also needs to</font>

472
00:20:34,680 --> 00:20:38,910
<font color="#E5E5E5">make</font><font color="#CCCCCC"> sure that the code he actually</font>

473
00:20:36,750 --> 00:20:42,060
wants to execute<font color="#CCCCCC"> can execute out of</font>

474
00:20:38,910 --> 00:20:44,610
order<font color="#CCCCCC"> so there are some</font><font color="#E5E5E5"> limits about how</font>

475
00:20:42,060 --> 00:20:49,379
the code that generates the windows has

476
00:20:44,610 --> 00:20:51,000
to look and window gadgets can occur

477
00:20:49,380 --> 00:20:53,160
naturally<font color="#E5E5E5"> that is kind of the entire</font>

478
00:20:51,000 --> 00:20:55,740
<font color="#CCCCCC">point why the CPU is able to do out of</font>

479
00:20:53,160 --> 00:20:58,620
<font color="#E5E5E5">order</font><font color="#CCCCCC"> execution but</font><font color="#E5E5E5"> in some</font>

480
00:20:55,740 --> 00:21:01,380
<font color="#E5E5E5">circumstances there are some ways that</font>

481
00:20:58,620 --> 00:21:06,810
<font color="#CCCCCC">an attacker</font><font color="#E5E5E5"> can actually engineer having</font>

482
00:21:01,380 --> 00:21:09,330
good window gadgets and the actual

483
00:21:06,810 --> 00:21:12,600
window size is<font color="#E5E5E5"> very difficult to</font><font color="#CCCCCC"> reason</font>

484
00:21:09,330 --> 00:21:14,280
about because it derived from a lot<font color="#E5E5E5"> of</font>

485
00:21:12,600 --> 00:21:18,719
things the first<font color="#E5E5E5"> is the actual hardware</font>

486
00:21:14,280 --> 00:21:20,190
on which was running<font color="#CCCCCC"> the second is how</font>

487
00:21:18,720 --> 00:21:23,160
the dependencies<font color="#CCCCCC"> that the code looks</font>

488
00:21:20,190 --> 00:21:25,620
like<font color="#CCCCCC"> and the third is</font><font color="#E5E5E5"> what other</font>

489
00:21:23,160 --> 00:21:27,540
congestion are happening on the CPU at

490
00:21:25,620 --> 00:21:30,510
the time that is running<font color="#E5E5E5"> so it's kind</font><font color="#CCCCCC"> of</font>

491
00:21:27,540 --> 00:21:32,820
<font color="#CCCCCC">difficult but you can in big terms</font>

492
00:21:30,510 --> 00:21:38,310
reason about<font color="#E5E5E5"> what kind of</font><font color="#CCCCCC"> windows</font><font color="#E5E5E5"> you're</font>

493
00:21:32,820 --> 00:21:41,700
looking at the third will catch<font color="#CCCCCC"> it that</font>

494
00:21:38,310 --> 00:21:43,409
<font color="#E5E5E5">we need is the disclosure gadget and the</font>

495
00:21:41,700 --> 00:21:46,890
disclosure gadget is centrally just

496
00:21:43,410 --> 00:21:48,540
<font color="#E5E5E5">writing into a side</font><font color="#CCCCCC"> channel</font><font color="#E5E5E5"> and the</font>

497
00:21:46,890 --> 00:21:51,570
example here is<font color="#CCCCCC"> the cache that we have</font>

498
00:21:48,540 --> 00:21:53,970
before<font color="#E5E5E5"> and it needs to run within the</font>

499
00:21:51,570 --> 00:21:55,980
speculative window<font color="#E5E5E5"> and the fourth and</font>

500
00:21:53,970 --> 00:21:56,640
final is of course getting<font color="#E5E5E5"> the data</font><font color="#CCCCCC"> back</font>

501
00:21:55,980 --> 00:22:00,000
from

502
00:21:56,640 --> 00:22:01,860
wherever we started before<font color="#E5E5E5"> using some</font>

503
00:22:00,000 --> 00:22:04,740
<font color="#E5E5E5">kind of primitive</font><font color="#CCCCCC"> we call it the</font>

504
00:22:01,860 --> 00:22:07,459
<font color="#E5E5E5">disclosure primitive and we can</font>

505
00:22:04,740 --> 00:22:11,340
generalize a bit more about<font color="#E5E5E5"> that but</font>

506
00:22:07,460 --> 00:22:12,540
let's go<font color="#E5E5E5"> into specific instead so taking</font>

507
00:22:11,340 --> 00:22:15,240
each of the<font color="#E5E5E5"> four</font><font color="#CCCCCC"> components with</font>

508
00:22:12,540 --> 00:22:18,480
examples we've had it<font color="#E5E5E5"> before conditional</font>

509
00:22:15,240 --> 00:22:20,970
branches indirect branches and deferred

510
00:22:18,480 --> 00:22:27,180
<font color="#CCCCCC">into interrupts the techniques that we</font>

511
00:22:20,970 --> 00:22:28,710
knew<font color="#E5E5E5"> on June and when we go on to window</font>

512
00:22:27,180 --> 00:22:32,010
gadgets we have a couple<font color="#E5E5E5"> of special</font>

513
00:22:28,710 --> 00:22:34,650
<font color="#CCCCCC">cases the first case</font><font color="#E5E5E5"> here is when</font><font color="#CCCCCC"> we</font>

514
00:22:32,010 --> 00:22:37,110
have dependencies<font color="#CCCCCC"> on a load loading</font>

515
00:22:34,650 --> 00:22:38,520
something<font color="#E5E5E5"> from memory</font><font color="#CCCCCC"> so this is the</font>

516
00:22:37,110 --> 00:22:41,159
case where<font color="#CCCCCC"> the attacker is actually</font>

517
00:22:38,520 --> 00:22:43,530
capable of<font color="#E5E5E5"> engineering the gadget so if</font>

518
00:22:41,160 --> 00:22:47,400
you make sure<font color="#CCCCCC"> that the value here in</font><font color="#E5E5E5"> P</font>

519
00:22:43,530 --> 00:22:50,010
is not in the cache it<font color="#CCCCCC"> will load much</font>

520
00:22:47,400 --> 00:22:52,020
much<font color="#E5E5E5"> slower than</font><font color="#CCCCCC"> if it were and this</font>

521
00:22:50,010 --> 00:22:53,760
actually<font color="#CCCCCC"> increases his window size if</font>

522
00:22:52,020 --> 00:22:56,970
there's a dependency<font color="#E5E5E5"> on this value</font><font color="#CCCCCC"> and</font>

523
00:22:53,760 --> 00:22:59,070
in this fashion he can create a lot<font color="#E5E5E5"> of</font>

524
00:22:56,970 --> 00:23:01,230
window for himself<font color="#E5E5E5"> so something like</font>

525
00:22:59,070 --> 00:23:04,110
this<font color="#CCCCCC"> is likely</font><font color="#E5E5E5"> to occur naturally</font><font color="#CCCCCC"> in</font>

526
00:23:01,230 --> 00:23:06,840
<font color="#CCCCCC">code and he can then engineer situation</font>

527
00:23:04,110 --> 00:23:08,820
where his window gets big enough<font color="#E5E5E5"> you can</font>

528
00:23:06,840 --> 00:23:11,100
<font color="#E5E5E5">take this to an extreme so if you have a</font>

529
00:23:08,820 --> 00:23:14,550
chain on dependent<font color="#CCCCCC"> load from cache</font>

530
00:23:11,100 --> 00:23:16,919
memory<font color="#CCCCCC"> you can create very large windows</font>

531
00:23:14,550 --> 00:23:19,530
up to the<font color="#E5E5E5"> theoretical</font><font color="#CCCCCC"> limit that is</font>

532
00:23:16,920 --> 00:23:22,290
determined<font color="#E5E5E5"> by the hardware</font><font color="#CCCCCC"> that however</font>

533
00:23:19,530 --> 00:23:25,740
is not very likely<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> present in much</font>

534
00:23:22,290 --> 00:23:27,810
<font color="#E5E5E5">naturally occurring code and the final</font>

535
00:23:25,740 --> 00:23:29,580
<font color="#E5E5E5">thing is a bit more worrying in natural</font>

536
00:23:27,810 --> 00:23:32,460
occurring code<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is because if you</font>

537
00:23:29,580 --> 00:23:35,879
<font color="#E5E5E5">have integer operations on the same</font>

538
00:23:32,460 --> 00:23:38,850
variable that<font color="#CCCCCC"> too can</font><font color="#E5E5E5"> cause a window to</font>

539
00:23:35,880 --> 00:23:41,730
<font color="#CCCCCC">be created</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> that is something that is</font>

540
00:23:38,850 --> 00:23:43,770
likely to<font color="#CCCCCC"> occur in a natural occurring</font>

541
00:23:41,730 --> 00:23:47,490
code meaning that it's likely<font color="#E5E5E5"> to find</font>

542
00:23:43,770 --> 00:23:50,639
<font color="#E5E5E5">gadgets window gadgets in natural</font>

543
00:23:47,490 --> 00:23:53,940
occurring codes<font color="#CCCCCC"> just by</font><font color="#E5E5E5"> having somebody</font>

544
00:23:50,640 --> 00:23:58,470
<font color="#E5E5E5">do something on whatever into job even</font>

545
00:23:53,940 --> 00:24:00,990
<font color="#E5E5E5">floating point</font><font color="#CCCCCC"> so of</font><font color="#E5E5E5"> course there can</font><font color="#CCCCCC"> be</font>

546
00:23:58,470 --> 00:24:02,130
more window gadgets than the ones I

547
00:24:00,990 --> 00:24:04,590
listed<font color="#CCCCCC"> here in fact</font><font color="#E5E5E5"> there could be an</font>

548
00:24:02,130 --> 00:24:08,230
infinite<font color="#CCCCCC"> number of them</font><font color="#E5E5E5"> but we haven't</font>

549
00:24:04,590 --> 00:24:11,139
done<font color="#CCCCCC"> Tia about how they could</font><font color="#E5E5E5"> look like</font>

550
00:24:08,230 --> 00:24:13,000
the next step is the disclosure gadget

551
00:24:11,140 --> 00:24:15,520
<font color="#E5E5E5">we talked about two levels of</font><font color="#CCCCCC"> in</font>

552
00:24:13,000 --> 00:24:17,740
directions<font color="#CCCCCC"> a lot so far because getting</font>

553
00:24:15,520 --> 00:24:19,600
arbitrary memory<font color="#E5E5E5"> persisting an arbitrary</font>

554
00:24:17,740 --> 00:24:22,780
<font color="#E5E5E5">memory into the cache this is the second</font>

555
00:24:19,600 --> 00:24:25,060
one<font color="#E5E5E5"> and</font><font color="#CCCCCC"> in the box</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> but it's easy</font><font color="#E5E5E5"> to</font>

556
00:24:22,780 --> 00:24:28,330
realize that if say you have some<font color="#CCCCCC"> secret</font>

557
00:24:25,060 --> 00:24:30,280
value<font color="#E5E5E5"> X that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> used in speculative</font>

558
00:24:28,330 --> 00:24:32,110
execution<font color="#E5E5E5"> and you do a load</font><font color="#CCCCCC"> on that</font>

559
00:24:30,280 --> 00:24:33,940
<font color="#E5E5E5">you'll load the cache for that as well</font>

560
00:24:32,110 --> 00:24:35,560
<font color="#E5E5E5">and this means you</font><font color="#CCCCCC"> have another</font>

561
00:24:33,940 --> 00:24:38,260
disclosure<font color="#CCCCCC"> catered with just one level</font>

562
00:24:35,560 --> 00:24:39,730
<font color="#E5E5E5">of indirection</font><font color="#CCCCCC"> and you can do</font><font color="#E5E5E5"> three</font>

563
00:24:38,260 --> 00:24:41,620
levels<font color="#CCCCCC"> of indirection as well</font><font color="#E5E5E5"> that will</font>

564
00:24:39,730 --> 00:24:43,540
leave<font color="#CCCCCC"> leaked</font><font color="#E5E5E5"> memory</font><font color="#CCCCCC"> too and you can</font>

565
00:24:41,620 --> 00:24:45,370
<font color="#E5E5E5">probably do a lot of other things that</font>

566
00:24:43,540 --> 00:24:47,230
will<font color="#E5E5E5"> write something</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> some side</font>

567
00:24:45,370 --> 00:24:49,239
<font color="#E5E5E5">channel and this</font><font color="#CCCCCC"> is important</font><font color="#E5E5E5"> to notice</font>

568
00:24:47,230 --> 00:24:52,690
<font color="#CCCCCC">when</font><font color="#E5E5E5"> you want</font><font color="#CCCCCC"> to do mitigations because</font>

569
00:24:49,240 --> 00:24:56,200
it becomes<font color="#E5E5E5"> more</font><font color="#CCCCCC"> than just the case that</font>

570
00:24:52,690 --> 00:24:58,440
we had before<font color="#CCCCCC"> and in</font><font color="#E5E5E5"> this the examples</font>

571
00:24:56,200 --> 00:25:00,930
<font color="#CCCCCC">that we got from project</font><font color="#E5E5E5"> zero and</font>

572
00:24:58,440 --> 00:25:03,040
finally we have the disclosure primitive

573
00:25:00,930 --> 00:25:04,780
<font color="#CCCCCC">here we're just listing disclosure</font>

574
00:25:03,040 --> 00:25:05,980
primitive that relates to to the cache

575
00:25:04,780 --> 00:25:08,110
<font color="#E5E5E5">because that is what we have been</font><font color="#CCCCCC"> doing</font>

576
00:25:05,980 --> 00:25:09,700
this<font color="#E5E5E5"> in this talk</font><font color="#CCCCCC"> so we have the classic</font>

577
00:25:08,110 --> 00:25:11,409
<font color="#E5E5E5">flash and we load the fashion we load</font>

578
00:25:09,700 --> 00:25:14,380
that<font color="#CCCCCC"> is essentially</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> I've described</font>

579
00:25:11,410 --> 00:25:16,330
so far<font color="#E5E5E5"> requires that the attacker</font><font color="#CCCCCC"> and</font>

580
00:25:14,380 --> 00:25:19,320
<font color="#E5E5E5">the victim code actually shares some</font>

581
00:25:16,330 --> 00:25:21,520
memory<font color="#CCCCCC"> that is not a strict requirement</font>

582
00:25:19,320 --> 00:25:25,720
<font color="#CCCCCC">there are other attacks on the cache</font>

583
00:25:21,520 --> 00:25:28,389
called evict<font color="#E5E5E5"> and time and there is prime</font>

584
00:25:25,720 --> 00:25:30,400
<font color="#CCCCCC">and probe which don't have this</font>

585
00:25:28,390 --> 00:25:32,140
requirement<font color="#E5E5E5"> which can lead data</font><font color="#CCCCCC"> without</font>

586
00:25:30,400 --> 00:25:35,590
<font color="#CCCCCC">actually sharing memory with the</font>

587
00:25:32,140 --> 00:25:37,420
attacker between attacker and victim if

588
00:25:35,590 --> 00:25:39,760
you want to know more<font color="#CCCCCC"> about these two</font>

589
00:25:37,420 --> 00:25:42,250
attacks<font color="#CCCCCC"> I did a talk at hack in the Box</font>

590
00:25:39,760 --> 00:25:47,290
in 2016<font color="#CCCCCC"> that covered</font><font color="#E5E5E5"> these kind of</font>

591
00:25:42,250 --> 00:25:49,270
attacks<font color="#E5E5E5"> in much more detail so once we</font>

592
00:25:47,290 --> 00:25:52,240
have a taxonomy in place we<font color="#E5E5E5"> need to look</font>

593
00:25:49,270 --> 00:25:54,700
at where are<font color="#E5E5E5"> these scenarios relevant so</font>

594
00:25:52,240 --> 00:25:57,880
the first thing<font color="#CCCCCC"> that we did was we came</font>

595
00:25:54,700 --> 00:26:00,280
up with some categories of<font color="#E5E5E5"> disclosure</font>

596
00:25:57,880 --> 00:26:02,320
and<font color="#CCCCCC"> the first category is</font><font color="#E5E5E5"> what happened</font>

597
00:26:00,280 --> 00:26:04,389
inside a virtualized system this<font color="#E5E5E5"> is</font>

598
00:26:02,320 --> 00:26:06,669
relevant for things like<font color="#CCCCCC"> Asscher for</font>

599
00:26:04,390 --> 00:26:08,920
hyper-v<font color="#E5E5E5"> and this is like disclosure</font>

600
00:26:06,670 --> 00:26:11,260
between<font color="#E5E5E5"> two guests or disclosure of</font>

601
00:26:08,920 --> 00:26:16,390
memory<font color="#CCCCCC"> between the hypervisors itself</font>

602
00:26:11,260 --> 00:26:19,480
and<font color="#E5E5E5"> an a process you we have another</font>

603
00:26:16,390 --> 00:26:20,700
<font color="#CCCCCC">category</font><font color="#E5E5E5"> about what happens in a</font><font color="#CCCCCC"> in an</font>

604
00:26:19,480 --> 00:26:22,410
operating<font color="#CCCCCC"> system</font>

605
00:26:20,700 --> 00:26:26,400
and here we're talking<font color="#E5E5E5"> about disclosure</font>

606
00:26:22,410 --> 00:26:28,350
<font color="#E5E5E5">from</font><font color="#CCCCCC"> Colonel</font><font color="#E5E5E5"> between processes</font><font color="#CCCCCC"> and we've</font>

607
00:26:26,400 --> 00:26:30,450
had a final<font color="#E5E5E5"> category about enclaves and</font>

608
00:26:28,350 --> 00:26:32,189
enclaves are sensitive because they're

609
00:26:30,450 --> 00:26:37,110
<font color="#E5E5E5">supposed to be secured about against</font>

610
00:26:32,190 --> 00:26:38,430
anybody<font color="#E5E5E5"> in any scenario</font><font color="#CCCCCC"> and then we had</font>

611
00:26:37,110 --> 00:26:40,610
<font color="#E5E5E5">listed all</font><font color="#CCCCCC"> the scenarios</font><font color="#E5E5E5"> that we could</font>

612
00:26:38,430 --> 00:26:45,000
find I'm<font color="#E5E5E5"> not going to read them and</font>

613
00:26:40,610 --> 00:26:47,939
<font color="#E5E5E5">realize</font><font color="#CCCCCC"> that spectrum version 1 and</font>

614
00:26:45,000 --> 00:26:50,270
version 2<font color="#E5E5E5"> actually is relevant</font><font color="#CCCCCC"> for</font>

615
00:26:47,940 --> 00:26:53,300
everything here<font color="#E5E5E5"> whereas the meltdown</font>

616
00:26:50,270 --> 00:26:55,770
appears<font color="#E5E5E5"> to be only irrelevant between</font>

617
00:26:53,300 --> 00:26:59,280
<font color="#CCCCCC">four operating</font><font color="#E5E5E5"> systems and only between</font>

618
00:26:55,770 --> 00:27:01,950
<font color="#E5E5E5">the</font><font color="#CCCCCC"> kernel and the user and that leaves</font>

619
00:26:59,280 --> 00:27:05,550
the systemic systematization part of

620
00:27:01,950 --> 00:27:07,440
this talk<font color="#E5E5E5"> thank you so now we can begin</font>

621
00:27:05,550 --> 00:27:09,090
to<font color="#E5E5E5"> reason</font><font color="#CCCCCC"> about the kind of mitigations</font>

622
00:27:07,440 --> 00:27:12,360
we can put in place<font color="#CCCCCC"> for</font><font color="#E5E5E5"> these types of</font>

623
00:27:09,090 --> 00:27:15,540
<font color="#CCCCCC">attacks</font><font color="#E5E5E5"> so we defined three mitigation</font>

624
00:27:12,360 --> 00:27:17,969
tactics the first of which<font color="#CCCCCC"> is preventing</font>

625
00:27:15,540 --> 00:27:19,440
speculation techniques<font color="#E5E5E5"> and specifically</font>

626
00:27:17,970 --> 00:27:21,810
what we<font color="#E5E5E5"> mean</font><font color="#CCCCCC"> by this is we want to</font>

627
00:27:19,440 --> 00:27:23,520
prevent unsafe speculation where the

628
00:27:21,810 --> 00:27:26,490
speculation primitive<font color="#E5E5E5"> could lead to a</font>

629
00:27:23,520 --> 00:27:28,560
disclosure capture the second tactic we

630
00:27:26,490 --> 00:27:31,620
have is removing sensitive content<font color="#E5E5E5"> from</font>

631
00:27:28,560 --> 00:27:35,040
memory<font color="#E5E5E5"> so the idea here</font><font color="#CCCCCC"> is to eliminate</font>

632
00:27:31,620 --> 00:27:38,760
entire attack scenarios or simply limit

633
00:27:35,040 --> 00:27:41,340
the severity<font color="#E5E5E5"> of what speculative what a</font>

634
00:27:38,760 --> 00:27:45,120
speculative read<font color="#E5E5E5"> could actually disclose</font>

635
00:27:41,340 --> 00:27:47,850
and the final tactic we had was removing

636
00:27:45,120 --> 00:27:50,729
observation channels<font color="#E5E5E5"> so the idea</font><font color="#CCCCCC"> here is</font>

637
00:27:47,850 --> 00:27:52,679
to<font color="#E5E5E5"> make it as</font><font color="#CCCCCC"> difficult as</font><font color="#E5E5E5"> possible</font><font color="#CCCCCC"> or</font>

638
00:27:50,730 --> 00:27:54,840
<font color="#CCCCCC">even impossible</font><font color="#E5E5E5"> for an attacker to</font>

639
00:27:52,680 --> 00:27:59,010
observe changes<font color="#E5E5E5"> to the cache state for</font>

640
00:27:54,840 --> 00:28:00,449
<font color="#CCCCCC">example and infer secrets from</font><font color="#E5E5E5"> that but</font>

641
00:27:59,010 --> 00:28:02,610
<font color="#E5E5E5">the key point</font><font color="#CCCCCC"> here is</font><font color="#E5E5E5"> there's no silver</font>

642
00:28:00,450 --> 00:28:05,000
<font color="#E5E5E5">bullet</font><font color="#CCCCCC"> that each of the attack scenarios</font>

643
00:28:02,610 --> 00:28:09,169
<font color="#CCCCCC">will require a different</font><font color="#E5E5E5"> combination of</font>

644
00:28:05,000 --> 00:28:11,580
<font color="#E5E5E5">mitigations both hardware and software</font>

645
00:28:09,170 --> 00:28:14,400
<font color="#CCCCCC">okay so starting with removing</font>

646
00:28:11,580 --> 00:28:15,870
speculation techniques<font color="#CCCCCC"> once more the</font>

647
00:28:14,400 --> 00:28:17,820
goal here is<font color="#CCCCCC"> to prevent unsafe</font>

648
00:28:15,870 --> 00:28:21,239
speculation which could<font color="#E5E5E5"> lead to a</font>

649
00:28:17,820 --> 00:28:23,550
disclosure<font color="#E5E5E5"> capture first thing we can do</font>

650
00:28:21,240 --> 00:28:26,970
is have some kind of serialization<font color="#E5E5E5"> of</font>

651
00:28:23,550 --> 00:28:28,560
the instruction pipeline so on x86 we

652
00:28:26,970 --> 00:28:30,090
have the<font color="#CCCCCC"> L offense instruction which has</font>

653
00:28:28,560 --> 00:28:32,730
<font color="#CCCCCC">the neat property of acting as a</font>

654
00:28:30,090 --> 00:28:33,590
speculation barrier so if we think<font color="#E5E5E5"> back</font>

655
00:28:32,730 --> 00:28:36,529
<font color="#E5E5E5">to</font>

656
00:28:33,590 --> 00:28:38,360
<font color="#E5E5E5">this variant</font><font color="#CCCCCC"> one code pattern we can use</font>

657
00:28:36,529 --> 00:28:39,980
the<font color="#E5E5E5"> elephants after performing the</font>

658
00:28:38,360 --> 00:28:42,139
balance check and this will create<font color="#E5E5E5"> the</font>

659
00:28:39,980 --> 00:28:44,620
<font color="#E5E5E5">guarantee that speculation won't be able</font>

660
00:28:42,140 --> 00:28:47,659
<font color="#E5E5E5">to continue on from past this point</font>

661
00:28:44,620 --> 00:28:50,418
<font color="#CCCCCC">where untrusted index is greater</font><font color="#E5E5E5"> than or</font>

662
00:28:47,659 --> 00:28:51,679
<font color="#CCCCCC">equal to length</font><font color="#E5E5E5"> second thing we can do</font>

663
00:28:50,419 --> 00:28:54,679
is have<font color="#E5E5E5"> some kind of implicit</font>

664
00:28:51,679 --> 00:28:56,659
<font color="#CCCCCC">sterilization so thinking back to</font>

665
00:28:54,679 --> 00:29:00,140
<font color="#E5E5E5">variant</font><font color="#CCCCCC"> one again</font><font color="#E5E5E5"> we can use</font><font color="#CCCCCC"> a</font>

666
00:28:56,659 --> 00:29:03,350
conditional move instruction to set

667
00:29:00,140 --> 00:29:05,059
untrusted index<font color="#E5E5E5"> to a zero register if it</font>

668
00:29:03,350 --> 00:29:07,668
is greater<font color="#E5E5E5"> than or equal to</font><font color="#CCCCCC"> length and</font>

669
00:29:05,059 --> 00:29:10,309
this will force the<font color="#E5E5E5"> miss speculated path</font>

670
00:29:07,669 --> 00:29:12,740
<font color="#E5E5E5">to execute the subsequent two array</font>

671
00:29:10,309 --> 00:29:14,450
operations with untrusted<font color="#CCCCCC"> and index</font>

672
00:29:12,740 --> 00:29:17,840
being<font color="#E5E5E5"> zero which won't disclose</font><font color="#CCCCCC"> a</font>

673
00:29:14,450 --> 00:29:20,779
sensitive secret and to do this we have

674
00:29:17,840 --> 00:29:23,330
<font color="#CCCCCC">Q Spector command line flag in visual</font>

675
00:29:20,779 --> 00:29:25,070
<font color="#E5E5E5">C++ which will automatically detect</font>

676
00:29:23,330 --> 00:29:26,860
potentially<font color="#CCCCCC"> vulnerable code patterns and</font>

677
00:29:25,070 --> 00:29:30,428
insert appropriate<font color="#CCCCCC"> sterilization</font>

678
00:29:26,860 --> 00:29:32,779
similarly for Microsoft edge we have

679
00:29:30,429 --> 00:29:34,669
mitigations in the chat for<font color="#CCCCCC"> a</font><font color="#E5E5E5"> JavaScript</font>

680
00:29:32,779 --> 00:29:37,130
engine<font color="#E5E5E5"> which prevent an attacker from</font>

681
00:29:34,669 --> 00:29:39,080
being able to create these kind of

682
00:29:37,130 --> 00:29:42,890
vulnerable code patterns<font color="#E5E5E5"> to disclose</font>

683
00:29:39,080 --> 00:29:46,010
memory the next<font color="#CCCCCC"> thing we can do is have</font>

684
00:29:42,890 --> 00:29:48,049
<font color="#E5E5E5">some kind of workload isolation so as we</font>

685
00:29:46,010 --> 00:29:51,080
heard earlier<font color="#E5E5E5"> indirect branches are</font>

686
00:29:48,049 --> 00:29:53,950
predicted based on past behavior<font color="#CCCCCC"> which</font>

687
00:29:51,080 --> 00:29:56,120
<font color="#CCCCCC">is stored in</font><font color="#E5E5E5"> the branch target buffer</font>

688
00:29:53,950 --> 00:29:58,840
<font color="#CCCCCC">these kind</font><font color="#E5E5E5"> of prediction states are</font>

689
00:29:56,120 --> 00:30:01,610
generally either<font color="#E5E5E5"> shared per core or</font>

690
00:29:58,840 --> 00:30:05,629
hyper thread in the case of simultaneous

691
00:30:01,610 --> 00:30:09,168
<font color="#CCCCCC">multithreading is enabled</font><font color="#E5E5E5"> so what we can</font>

692
00:30:05,630 --> 00:30:11,809
<font color="#E5E5E5">do is we can assign a certain core to</font>

693
00:30:09,169 --> 00:30:14,539
<font color="#E5E5E5">guest VM for example and leave the</font>

694
00:30:11,809 --> 00:30:16,639
others for the<font color="#CCCCCC"> host and what this will</font>

695
00:30:14,539 --> 00:30:18,169
<font color="#E5E5E5">do</font><font color="#CCCCCC"> is it will prevent a malicious guest</font>

696
00:30:16,640 --> 00:30:22,970
from being able to collide the branch

697
00:30:18,169 --> 00:30:25,130
prediction<font color="#E5E5E5"> state and trigger unsafe</font>

698
00:30:22,970 --> 00:30:29,059
speculation from<font color="#E5E5E5"> an indirect branch of</font>

699
00:30:25,130 --> 00:30:31,700
the host<font color="#E5E5E5"> and to do this</font><font color="#CCCCCC"> hyper V supports</font>

700
00:30:29,059 --> 00:30:35,330
min<font color="#CCCCCC"> route and</font><font color="#E5E5E5"> CPU groups which can</font><font color="#CCCCCC"> be</font>

701
00:30:31,700 --> 00:30:39,020
<font color="#E5E5E5">used to schedule the behavior of</font><font color="#CCCCCC"> the</font>

702
00:30:35,330 --> 00:30:41,120
guest<font color="#CCCCCC"> the next thing we can</font><font color="#E5E5E5"> do is make</font>

703
00:30:39,020 --> 00:30:43,429
use of the indirect branch control

704
00:30:41,120 --> 00:30:46,199
features which are provided by<font color="#E5E5E5"> micro</font>

705
00:30:43,429 --> 00:30:49,020
<font color="#E5E5E5">code updates by Intel</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> AMD</font>

706
00:30:46,200 --> 00:30:51,840
so we have three new options we have

707
00:30:49,020 --> 00:30:54,570
IBRS<font color="#E5E5E5"> which kind of acts as a way of</font>

708
00:30:51,840 --> 00:30:58,320
<font color="#E5E5E5">creating two</font><font color="#CCCCCC"> different</font><font color="#E5E5E5"> privileged</font>

709
00:30:54,570 --> 00:31:00,230
domains so we set IVRS to<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> for the</font>

710
00:30:58,320 --> 00:31:02,100
lower<font color="#CCCCCC"> privileged</font><font color="#E5E5E5"> state and then on</font>

711
00:31:00,230 --> 00:31:03,960
transition into the higher<font color="#E5E5E5"> privileged</font>

712
00:31:02,100 --> 00:31:06,510
states such as<font color="#E5E5E5"> on</font><font color="#CCCCCC"> kernel entry we can</font>

713
00:31:03,960 --> 00:31:07,860
set IBRS to<font color="#CCCCCC"> one</font><font color="#E5E5E5"> and this will create</font><font color="#CCCCCC"> the</font>

714
00:31:06,510 --> 00:31:09,890
guarantee that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> higher privileged</font>

715
00:31:07,860 --> 00:31:12,330
<font color="#E5E5E5">state will not be influenced by</font>

716
00:31:09,890 --> 00:31:15,240
prediction changes made by<font color="#E5E5E5"> the less</font>

717
00:31:12,330 --> 00:31:17,879
privileged context<font color="#E5E5E5"> the next thing we</font>

718
00:31:15,240 --> 00:31:20,340
have is<font color="#E5E5E5"> IB PB which essentially</font><font color="#CCCCCC"> allows</font>

719
00:31:17,880 --> 00:31:23,130
the operating<font color="#E5E5E5"> system to flush this</font>

720
00:31:20,340 --> 00:31:26,668
prediction<font color="#CCCCCC"> state so this</font><font color="#E5E5E5"> might</font><font color="#CCCCCC"> be used</font>

721
00:31:23,130 --> 00:31:29,520
when switching context switching

722
00:31:26,669 --> 00:31:32,610
processes or switching<font color="#E5E5E5"> guest virtual</font>

723
00:31:29,520 --> 00:31:35,668
machines<font color="#E5E5E5"> for the hypervisor scenario</font><font color="#CCCCCC"> the</font>

724
00:31:32,610 --> 00:31:38,250
final thing<font color="#CCCCCC"> we have is s dibp</font><font color="#E5E5E5"> so as we</font>

725
00:31:35,669 --> 00:31:40,890
saw when in the<font color="#E5E5E5"> case where simultaneous</font>

726
00:31:38,250 --> 00:31:43,110
<font color="#E5E5E5">multithreading has enabled two</font>

727
00:31:40,890 --> 00:31:45,000
co-located threads on a single core

728
00:31:43,110 --> 00:31:47,159
might share some prediction<font color="#CCCCCC"> state</font><font color="#E5E5E5"> so if</font>

729
00:31:45,000 --> 00:31:48,990
we have higher<font color="#E5E5E5"> privilege</font><font color="#CCCCCC"> contexts</font>

730
00:31:47,160 --> 00:31:51,510
running and a lower<font color="#E5E5E5"> privilege context</font>

731
00:31:48,990 --> 00:31:52,950
running on the same<font color="#E5E5E5"> core the lower</font>

732
00:31:51,510 --> 00:31:55,200
privileged<font color="#E5E5E5"> context might be able to</font>

733
00:31:52,950 --> 00:31:57,840
<font color="#E5E5E5">collide the branch prediction</font><font color="#CCCCCC"> state so</font>

734
00:31:55,200 --> 00:32:00,540
setting<font color="#CCCCCC"> s GI be</font><font color="#E5E5E5"> p21 just prevents this</font>

735
00:31:57,840 --> 00:32:04,110
attack scenario<font color="#CCCCCC"> and all versions of</font>

736
00:32:00,540 --> 00:32:08,970
Windows client that<font color="#E5E5E5"> are supported make</font>

737
00:32:04,110 --> 00:32:10,649
use of these features<font color="#CCCCCC"> the next thing we</font>

738
00:32:08,970 --> 00:32:13,679
<font color="#CCCCCC">can do to prevent speculation techniques</font>

739
00:32:10,650 --> 00:32:16,830
<font color="#E5E5E5">is used non speculated or safely</font>

740
00:32:13,679 --> 00:32:19,140
speculated indirect jumps so on Intel

741
00:32:16,830 --> 00:32:21,360
<font color="#E5E5E5">CPUs the far jump and far ret</font>

742
00:32:19,140 --> 00:32:23,280
instructions which are indirect jumps

743
00:32:21,360 --> 00:32:25,350
<font color="#CCCCCC">that</font><font color="#E5E5E5"> also change the code segment will</font>

744
00:32:23,280 --> 00:32:26,760
not be speculated<font color="#E5E5E5"> so we can replace</font>

745
00:32:25,350 --> 00:32:29,549
indirect branches with these

746
00:32:26,760 --> 00:32:32,910
<font color="#E5E5E5">instructions and this will guarantee</font>

747
00:32:29,549 --> 00:32:34,790
<font color="#E5E5E5">that</font><font color="#CCCCCC"> miss speculation will never occur</font>

748
00:32:32,910 --> 00:32:38,730
from an<font color="#E5E5E5"> indirect branch</font>

749
00:32:34,790 --> 00:32:41,250
similarly for AMD<font color="#CCCCCC"> CPUs we can use the</font>

750
00:32:38,730 --> 00:32:44,370
<font color="#CCCCCC">elephants instruction and</font><font color="#E5E5E5"> will guarantee</font>

751
00:32:41,250 --> 00:32:47,730
<font color="#E5E5E5">also</font><font color="#CCCCCC"> that Miss speculation will never</font>

752
00:32:44,370 --> 00:32:50,250
occur from<font color="#CCCCCC"> an indirect branch there was</font>

753
00:32:47,730 --> 00:32:56,460
also this proposal<font color="#E5E5E5"> by Google for</font><font color="#CCCCCC"> Rhett</font>

754
00:32:50,250 --> 00:32:59,910
<font color="#E5E5E5">Pauline and this essentially can be used</font>

755
00:32:56,460 --> 00:33:03,000
to<font color="#E5E5E5"> control speculation</font><font color="#CCCCCC"> after an indirect</font>

756
00:32:59,910 --> 00:33:05,280
branch so<font color="#E5E5E5"> speculation could go to an</font>

757
00:33:03,000 --> 00:33:07,340
infinite loop say<font color="#E5E5E5"> where as architectural</font>

758
00:33:05,280 --> 00:33:10,500
<font color="#CCCCCC">II the jump will resolve as normal</font>

759
00:33:07,340 --> 00:33:13,530
<font color="#E5E5E5">Windows kernel and hyper-v are using a</font>

760
00:33:10,500 --> 00:33:17,910
combination<font color="#E5E5E5"> of these</font><font color="#CCCCCC"> to best optimize</font>

761
00:33:13,530 --> 00:33:19,920
performance so moving on to<font color="#CCCCCC"> the second</font>

762
00:33:17,910 --> 00:33:23,270
tactic removing sensitive content<font color="#E5E5E5"> from</font>

763
00:33:19,920 --> 00:33:26,040
memory<font color="#E5E5E5"> once more the goal here is</font><font color="#CCCCCC"> to</font>

764
00:33:23,270 --> 00:33:33,000
limit<font color="#E5E5E5"> the sensitivity of memory that</font>

765
00:33:26,040 --> 00:33:35,070
<font color="#E5E5E5">speculation could read and disclose the</font>

766
00:33:33,000 --> 00:33:38,250
first thing we can do is have hypervisor

767
00:33:35,070 --> 00:33:40,050
<font color="#E5E5E5">address space segregation so as the</font>

768
00:33:38,250 --> 00:33:42,000
<font color="#E5E5E5">hypervisor runs we can map guest</font>

769
00:33:40,050 --> 00:33:44,220
physical memory on demand<font color="#CCCCCC"> as its</font>

770
00:33:42,000 --> 00:33:47,400
<font color="#E5E5E5">required</font><font color="#CCCCCC"> as opposed to historically</font>

771
00:33:44,220 --> 00:33:49,380
where the hypervisor would have all

772
00:33:47,400 --> 00:33:53,340
<font color="#E5E5E5">guest physical memory</font><font color="#CCCCCC"> Maps at all times</font>

773
00:33:49,380 --> 00:33:55,680
<font color="#CCCCCC">and</font><font color="#E5E5E5"> so what this means</font><font color="#CCCCCC"> is that if a</font>

774
00:33:53,340 --> 00:33:58,260
<font color="#CCCCCC">malicious vm performs a hyper call and</font>

775
00:33:55,680 --> 00:34:00,060
tries to<font color="#CCCCCC"> induce</font><font color="#E5E5E5"> unsafe speculation it</font>

776
00:33:58,260 --> 00:34:02,940
will only ever have<font color="#CCCCCC"> access to its own</font>

777
00:34:00,060 --> 00:34:05,370
guest<font color="#E5E5E5"> physical memory and so will not</font><font color="#CCCCCC"> be</font>

778
00:34:02,940 --> 00:34:07,620
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> disclose guest physical memory</font>

779
00:34:05,370 --> 00:34:12,150
from other virtual<font color="#CCCCCC"> machines running on</font>

780
00:34:07,620 --> 00:34:14,460
the host<font color="#E5E5E5"> the next thing we have this is</font>

781
00:34:12,150 --> 00:34:17,340
specific to variant<font color="#CCCCCC"> 3 the kernel user</font>

782
00:34:14,460 --> 00:34:20,668
<font color="#E5E5E5">information disclosure scenario is</font><font color="#CCCCCC"> KB a</font>

783
00:34:17,340 --> 00:34:23,160
shadow<font color="#E5E5E5"> so previously in user mode</font>

784
00:34:20,668 --> 00:34:24,989
execution the kernel page table entries

785
00:34:23,159 --> 00:34:28,529
would<font color="#E5E5E5"> be mapped but just marked as</font>

786
00:34:24,989 --> 00:34:30,899
<font color="#E5E5E5">inaccessible with</font><font color="#CCCCCC"> KB a shadow</font><font color="#E5E5E5"> we</font>

787
00:34:28,530 --> 00:34:32,400
guarantee the user mode execution<font color="#E5E5E5"> only</font>

788
00:34:30,900 --> 00:34:35,520
however has access to<font color="#CCCCCC"> its</font><font color="#E5E5E5"> own page</font>

789
00:34:32,400 --> 00:34:38,310
tables we add the kernel page tables

790
00:34:35,520 --> 00:34:43,110
back in when we transition to<font color="#E5E5E5"> the kernel</font>

791
00:34:38,310 --> 00:34:45,779
<font color="#E5E5E5">as as needed</font><font color="#CCCCCC"> all supported versions of</font>

792
00:34:43,110 --> 00:34:50,070
<font color="#E5E5E5">Windows client enable this</font><font color="#CCCCCC"> by default</font>

793
00:34:45,780 --> 00:34:52,350
<font color="#E5E5E5">and final tactic removing observation</font>

794
00:34:50,070 --> 00:34:54,270
channels once more the goal here<font color="#CCCCCC"> is to</font>

795
00:34:52,350 --> 00:34:57,000
<font color="#E5E5E5">make</font><font color="#CCCCCC"> it difficult</font><font color="#E5E5E5"> for an attacker or</font>

796
00:34:54,270 --> 00:34:58,800
even impossible<font color="#CCCCCC"> to observe changes to</font>

797
00:34:57,000 --> 00:35:02,460
the cache state and<font color="#CCCCCC"> infer secrets from</font>

798
00:34:58,800 --> 00:35:05,820
<font color="#E5E5E5">that the first thing we have is</font><font color="#CCCCCC"> mapping</font>

799
00:35:02,460 --> 00:35:08,190
<font color="#E5E5E5">guest physical memory as uncatchable so</font>

800
00:35:05,820 --> 00:35:10,830
if we have some system physical memory

801
00:35:08,190 --> 00:35:12,660
we<font color="#CCCCCC"> can map it as</font><font color="#E5E5E5"> write back cache for</font>

802
00:35:10,830 --> 00:35:15,180
<font color="#E5E5E5">the guest</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> it will be no</font><font color="#CCCCCC"> performance</font>

803
00:35:12,660 --> 00:35:17,009
packed for<font color="#E5E5E5"> the</font><font color="#CCCCCC"> guests itself but</font><font color="#E5E5E5"> for the</font>

804
00:35:15,180 --> 00:35:19,740
hypervisor we can map it as uncatchable

805
00:35:17,010 --> 00:35:22,740
<font color="#E5E5E5">and what this will do is</font><font color="#CCCCCC"> it will create</font>

806
00:35:19,740 --> 00:35:26,970
<font color="#CCCCCC">the guarantee that if the hypervisor</font>

807
00:35:22,740 --> 00:35:28,649
<font color="#E5E5E5">performs a speculative load on this</font>

808
00:35:26,970 --> 00:35:31,109
<font color="#E5E5E5">guest physical memory it will obey</font><font color="#CCCCCC"> the</font>

809
00:35:28,650 --> 00:35:34,920
uncatchable<font color="#E5E5E5"> property and so won't be</font>

810
00:35:31,109 --> 00:35:36,930
<font color="#CCCCCC">able to make any cash</font><font color="#E5E5E5"> cash changes that</font>

811
00:35:34,920 --> 00:35:39,059
will be observable<font color="#E5E5E5"> to the guests through</font>

812
00:35:36,930 --> 00:35:43,200
a<font color="#CCCCCC"> flash memory load primitive so this</font>

813
00:35:39,059 --> 00:35:47,849
acts as<font color="#E5E5E5"> a generic mitigation for yes to</font>

814
00:35:43,200 --> 00:35:49,740
host a flash memory<font color="#E5E5E5"> load the other thing</font>

815
00:35:47,849 --> 00:35:51,390
we can<font color="#CCCCCC"> do similarly to prevent guest</font><font color="#E5E5E5"> to</font>

816
00:35:49,740 --> 00:35:53,549
guest<font color="#CCCCCC"> flash and reload</font><font color="#E5E5E5"> disclosure</font>

817
00:35:51,390 --> 00:35:56,009
primitive is simply ensure that we never

818
00:35:53,549 --> 00:35:58,440
share any<font color="#E5E5E5"> physical memory between two</font>

819
00:35:56,010 --> 00:36:01,589
guests so we ensure they always have

820
00:35:58,440 --> 00:36:04,230
their<font color="#E5E5E5"> own copy of everything</font><font color="#CCCCCC"> and this</font>

821
00:36:01,589 --> 00:36:07,680
ensures<font color="#E5E5E5"> that changes made to the cache</font>

822
00:36:04,230 --> 00:36:09,150
and one<font color="#E5E5E5"> guest</font><font color="#CCCCCC"> cannot be observed by</font>

823
00:36:07,680 --> 00:36:10,890
another through<font color="#CCCCCC"> the flush and reload</font>

824
00:36:09,150 --> 00:36:16,440
primitive which requires shared cache

825
00:36:10,890 --> 00:36:19,020
lines<font color="#E5E5E5"> finally we can decrease the time</font>

826
00:36:16,440 --> 00:36:21,000
of precision in the<font color="#E5E5E5"> browser so there's</font>

827
00:36:19,020 --> 00:36:22,920
this API performance<font color="#CCCCCC"> start now which is</font>

828
00:36:21,000 --> 00:36:24,750
accessible<font color="#E5E5E5"> to</font><font color="#CCCCCC"> JavaScript which</font>

829
00:36:22,920 --> 00:36:28,619
previously could<font color="#CCCCCC"> be used</font><font color="#E5E5E5"> to time a</font>

830
00:36:24,750 --> 00:36:30,119
single<font color="#E5E5E5"> indirect a single load and then</font>

831
00:36:28,619 --> 00:36:32,730
determine<font color="#E5E5E5"> whether that address was in</font>

832
00:36:30,119 --> 00:36:34,500
<font color="#CCCCCC">the cache or not</font><font color="#E5E5E5"> now what we do is</font><font color="#CCCCCC"> we</font>

833
00:36:32,730 --> 00:36:36,270
decrease<font color="#CCCCCC"> the precision of this timer</font><font color="#E5E5E5"> and</font>

834
00:36:34,500 --> 00:36:38,910
we also add<font color="#E5E5E5"> random jitter to prevent</font>

835
00:36:36,270 --> 00:36:42,200
clock edging techniques<font color="#E5E5E5"> which makes it</font>

836
00:36:38,910 --> 00:36:45,660
much more<font color="#E5E5E5"> difficult</font><font color="#CCCCCC"> for an attacker to</font>

837
00:36:42,200 --> 00:36:49,470
perform<font color="#E5E5E5"> a speculative attack in the</font>

838
00:36:45,660 --> 00:36:51,690
browser<font color="#E5E5E5"> so for closing remarks</font><font color="#CCCCCC"> I just</font>

839
00:36:49,470 --> 00:36:53,788
want to<font color="#E5E5E5"> reiterate the point that there's</font>

840
00:36:51,690 --> 00:36:55,319
a large<font color="#CCCCCC"> number of attack scenarios and</font>

841
00:36:53,789 --> 00:36:57,049
for<font color="#CCCCCC"> each of them we require a different</font>

842
00:36:55,319 --> 00:37:00,119
<font color="#CCCCCC">combination of hardware</font><font color="#E5E5E5"> and software</font>

843
00:36:57,049 --> 00:37:02,788
<font color="#E5E5E5">mitigations to prevent the problem as</font>

844
00:37:00,119 --> 00:37:06,599
best<font color="#E5E5E5"> as possible thinking back to the</font>

845
00:37:02,789 --> 00:37:08,270
<font color="#E5E5E5">variants themselves</font><font color="#CCCCCC"> variant</font><font color="#E5E5E5"> 1 well</font>

846
00:37:06,599 --> 00:37:10,589
they're all<font color="#CCCCCC"> Hardware vulnerabilities</font>

847
00:37:08,270 --> 00:37:12,660
variant 1 is<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> require software</font>

848
00:37:10,589 --> 00:37:14,279
changes<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that might</font><font color="#E5E5E5"> be using</font><font color="#CCCCCC"> the Hugh</font>

849
00:37:12,660 --> 00:37:17,868
<font color="#CCCCCC">specter command line flag to insert</font>

850
00:37:14,279 --> 00:37:21,329
appropriate serialization<font color="#E5E5E5"> variant</font><font color="#CCCCCC"> 2 is</font>

851
00:37:17,869 --> 00:37:22,710
mitigated by the<font color="#E5E5E5"> operating</font><font color="#CCCCCC"> system by</font>

852
00:37:21,329 --> 00:37:26,370
<font color="#E5E5E5">making use of the indirect branch</font>

853
00:37:22,710 --> 00:37:28,440
controls for<font color="#CCCCCC"> example and finally variant</font>

854
00:37:26,370 --> 00:37:32,580
is<font color="#E5E5E5"> completely mitigated with</font><font color="#CCCCCC"> KVA shadow</font>

855
00:37:28,440 --> 00:37:35,930
<font color="#E5E5E5">so once more</font><font color="#CCCCCC"> userland execution</font><font color="#E5E5E5"> never</font>

856
00:37:32,580 --> 00:37:38,520
has<font color="#CCCCCC"> kernel page table entries mapped</font>

857
00:37:35,930 --> 00:37:40,799
<font color="#E5E5E5">since then we've received also some new</font>

858
00:37:38,520 --> 00:37:43,730
variants which I<font color="#E5E5E5"> just like to go</font><font color="#CCCCCC"> over</font>

859
00:37:40,800 --> 00:37:47,420
briefly<font color="#CCCCCC"> the first of which is</font>

860
00:37:43,730 --> 00:37:50,190
speculative<font color="#E5E5E5"> store bypass which worked by</font>

861
00:37:47,420 --> 00:37:51,540
creating<font color="#CCCCCC"> mispredictions between data</font>

862
00:37:50,190 --> 00:37:54,390
dependencies of<font color="#E5E5E5"> store and load</font>

863
00:37:51,540 --> 00:37:57,740
instructions<font color="#E5E5E5"> the mitigation for this is</font>

864
00:37:54,390 --> 00:38:00,710
the same as variant<font color="#CCCCCC"> one</font><font color="#E5E5E5"> just adding</font>

865
00:37:57,740 --> 00:38:03,660
serialization<font color="#E5E5E5"> to the pipeline</font><font color="#CCCCCC"> for</font>

866
00:38:00,710 --> 00:38:05,730
vulnerable code patterns alternatively

867
00:38:03,660 --> 00:38:07,589
there is a feature of<font color="#E5E5E5"> the CPU which can</font>

868
00:38:05,730 --> 00:38:12,570
be used to disable<font color="#E5E5E5"> this memory</font>

869
00:38:07,590 --> 00:38:14,880
disambiguation<font color="#CCCCCC"> optimisation but that is</font>

870
00:38:12,570 --> 00:38:16,830
disabled by default<font color="#CCCCCC"> as no vulnerable</font>

871
00:38:14,880 --> 00:38:20,580
code<font color="#E5E5E5"> patents have</font><font color="#CCCCCC"> efan have been found</font>

872
00:38:16,830 --> 00:38:22,290
<font color="#E5E5E5">affecting Microsoft code the second of</font>

873
00:38:20,580 --> 00:38:25,290
<font color="#CCCCCC">which is the lazy floating-point</font><font color="#E5E5E5"> state</font>

874
00:38:22,290 --> 00:38:27,210
restore so 32-bit versions of Windows

875
00:38:25,290 --> 00:38:29,370
prior to<font color="#CCCCCC"> 10 would make</font><font color="#E5E5E5"> this optimization</font>

876
00:38:27,210 --> 00:38:32,250
<font color="#E5E5E5">where when</font><font color="#CCCCCC"> context switching between</font>

877
00:38:29,370 --> 00:38:34,230
processes<font color="#E5E5E5"> instead of always just</font><font color="#CCCCCC"> copying</font>

878
00:38:32,250 --> 00:38:35,790
the<font color="#E5E5E5"> floating-point registers they would</font>

879
00:38:34,230 --> 00:38:38,760
<font color="#CCCCCC">simply mark them as inaccessible and</font>

880
00:38:35,790 --> 00:38:41,190
then restore<font color="#CCCCCC"> them on first use through</font>

881
00:38:38,760 --> 00:38:44,160
triggering an exception<font color="#CCCCCC"> the problem with</font>

882
00:38:41,190 --> 00:38:46,050
this was speculative execution<font color="#E5E5E5"> could</font>

883
00:38:44,160 --> 00:38:51,930
<font color="#CCCCCC">reach stale floating point register</font>

884
00:38:46,050 --> 00:38:54,150
values from prior process as the

885
00:38:51,930 --> 00:38:57,660
<font color="#E5E5E5">exception could be deferred</font><font color="#CCCCCC"> similar to</font>

886
00:38:54,150 --> 00:38:59,480
variant 3 the mitigation for this is

887
00:38:57,660 --> 00:39:02,640
simply to disable<font color="#E5E5E5"> this optimization</font>

888
00:38:59,480 --> 00:39:06,870
which<font color="#CCCCCC"> is done and</font><font color="#E5E5E5"> the latest version</font><font color="#CCCCCC"> of</font>

889
00:39:02,640 --> 00:39:08,640
all<font color="#CCCCCC"> windows 10 the</font><font color="#E5E5E5"> bounce bounce check</font>

890
00:39:06,870 --> 00:39:10,290
<font color="#E5E5E5">by</font><font color="#CCCCCC"> PI store this was where a conditional</font>

891
00:39:08,640 --> 00:39:12,990
branch would<font color="#CCCCCC"> mispredict</font><font color="#E5E5E5"> leading to an</font>

892
00:39:10,290 --> 00:39:14,400
<font color="#E5E5E5">outer bounds right speculatively</font><font color="#CCCCCC"> and if</font>

893
00:39:12,990 --> 00:39:16,979
this speculative<font color="#E5E5E5"> outer bounds right</font>

894
00:39:14,400 --> 00:39:20,430
corrupted an indirect branch target<font color="#CCCCCC"> this</font>

895
00:39:16,980 --> 00:39:22,650
could<font color="#E5E5E5"> lead to speculation that an</font>

896
00:39:20,430 --> 00:39:25,319
arbitrary<font color="#E5E5E5"> attacker controlled address if</font>

897
00:39:22,650 --> 00:39:27,720
that was then called<font color="#CCCCCC"> similar to how</font>

898
00:39:25,320 --> 00:39:29,670
variant<font color="#CCCCCC"> two works so that's powerful</font>

899
00:39:27,720 --> 00:39:32,609
<font color="#CCCCCC">because it could lead to disclosure</font>

900
00:39:29,670 --> 00:39:34,620
primitive<font color="#E5E5E5"> the mitigation for this is</font>

901
00:39:32,610 --> 00:39:36,240
once again<font color="#E5E5E5"> identifying vulnerable code</font>

902
00:39:34,620 --> 00:39:38,810
patterns and inserting appropriate

903
00:39:36,240 --> 00:39:38,810
serialization

904
00:39:39,320 --> 00:39:44,690
then moving on to finally<font color="#E5E5E5"> in that</font>

905
00:39:42,530 --> 00:39:48,770
<font color="#CCCCCC">Spectre</font><font color="#E5E5E5"> which was the first attack</font>

906
00:39:44,690 --> 00:39:50,650
demonstrated over<font color="#CCCCCC"> the network the</font>

907
00:39:48,770 --> 00:39:53,390
mitigation<font color="#E5E5E5"> for this is once more</font><font color="#CCCCCC"> just</font>

908
00:39:50,650 --> 00:39:57,200
detecting vulnerable<font color="#CCCCCC"> Co patterns and</font>

909
00:39:53,390 --> 00:39:58,879
<font color="#E5E5E5">inserting serialization but we</font><font color="#CCCCCC"> we expect</font>

910
00:39:57,200 --> 00:40:00,620
this to<font color="#CCCCCC"> be a continuing subject of</font>

911
00:39:58,880 --> 00:40:02,300
research<font color="#E5E5E5"> and so we've launched our</font>

912
00:40:00,620 --> 00:40:06,020
speculative execution<font color="#CCCCCC"> side-channel</font>

913
00:40:02,300 --> 00:40:10,790
<font color="#E5E5E5">bounty the max payout for this is 250 K</font>

914
00:40:06,020 --> 00:40:12,440
USD for new variants<font color="#CCCCCC"> we also have more</font>

915
00:40:10,790 --> 00:40:15,250
<font color="#E5E5E5">information about the variants</font>

916
00:40:12,440 --> 00:40:19,130
themselves and developer guidelines<font color="#E5E5E5"> on</font>

917
00:40:15,250 --> 00:40:20,990
tech nap<font color="#E5E5E5"> globe so I just like to</font><font color="#CCCCCC"> finish</font>

918
00:40:19,130 --> 00:40:23,360
by<font color="#CCCCCC"> saying thank you</font><font color="#E5E5E5"> to everyone who</font><font color="#CCCCCC"> is</font>

919
00:40:20,990 --> 00:40:25,069
<font color="#E5E5E5">involved in this research and the</font>

920
00:40:23,360 --> 00:40:28,640
mitigations<font color="#E5E5E5"> it's been a tremendous</font>

921
00:40:25,070 --> 00:40:30,410
<font color="#CCCCCC">undertaking I would like</font><font color="#E5E5E5"> to join in</font><font color="#CCCCCC"> that</font>

922
00:40:28,640 --> 00:40:32,270
<font color="#E5E5E5">thanks and I would also like</font><font color="#CCCCCC"> to thank</font>

923
00:40:30,410 --> 00:40:35,000
Microsoft<font color="#E5E5E5"> for allowing to me to be a</font>

924
00:40:32,270 --> 00:40:38,570
part of that process<font color="#CCCCCC"> and</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> allowing me</font>

925
00:40:35,000 --> 00:40:40,820
to be<font color="#E5E5E5"> here today</font><font color="#CCCCCC"> and of course</font><font color="#E5E5E5"> to all of</font>

926
00:40:38,570 --> 00:40:43,750
you guys who came<font color="#E5E5E5"> to to watch this talk</font>

927
00:40:40,820 --> 00:40:43,750
<font color="#CCCCCC">thank you very</font><font color="#E5E5E5"> much</font>

928
00:40:45,680 --> 00:40:48,580
[Music]

