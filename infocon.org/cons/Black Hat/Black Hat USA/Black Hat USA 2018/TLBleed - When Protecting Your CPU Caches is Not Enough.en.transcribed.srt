1
00:00:00,000 --> 00:00:06,330
hi everyone<font color="#E5E5E5"> thank you thank you for</font>

2
00:00:01,530 --> 00:00:06,690
coming<font color="#E5E5E5"> to this talk about TL bleed</font><font color="#CCCCCC"> all</font>

3
00:00:06,330 --> 00:00:09,240
<font color="#E5E5E5">right</font>

4
00:00:06,690 --> 00:00:11,370
so big picture<font color="#CCCCCC"> we are going to talk</font>

5
00:00:09,240 --> 00:00:16,730
<font color="#E5E5E5">about a lots of kind of nitty-gritty</font>

6
00:00:11,370 --> 00:00:19,799
<font color="#E5E5E5">details about how the CPU</font><font color="#CCCCCC"> works oh yeah</font>

7
00:00:16,730 --> 00:00:23,369
<font color="#CCCCCC">about how the</font><font color="#E5E5E5"> CPU works</font><font color="#CCCCCC"> so we're gonna</font>

8
00:00:19,800 --> 00:00:26,820
<font color="#E5E5E5">talk about CPU caches Tilby how to</font>

9
00:00:23,369 --> 00:00:29,099
attack other processes<font color="#E5E5E5"> through the CPU</font>

10
00:00:26,820 --> 00:00:31,170
cache how to defend against<font color="#CCCCCC"> that</font><font color="#E5E5E5"> and how</font>

11
00:00:29,099 --> 00:00:33,000
<font color="#E5E5E5">this</font><font color="#CCCCCC"> new attack vector using</font><font color="#E5E5E5"> the TLB</font>

12
00:00:31,170 --> 00:00:34,350
will work to bypass those defenses so

13
00:00:33,000 --> 00:00:36,239
we're<font color="#E5E5E5"> going to steal cryptographic keys</font>

14
00:00:34,350 --> 00:00:38,250
from another process<font color="#E5E5E5"> not supposed to be</font>

15
00:00:36,239 --> 00:00:42,930
<font color="#CCCCCC">possible using</font><font color="#E5E5E5"> completely new technique</font>

16
00:00:38,250 --> 00:00:44,719
that<font color="#E5E5E5"> is not through the cache briefly</font>

17
00:00:42,930 --> 00:00:47,010
<font color="#E5E5E5">about me I'm a PC shoot in the</font><font color="#CCCCCC"> few SEC</font>

18
00:00:44,719 --> 00:00:49,440
<font color="#E5E5E5">research group at the Free University in</font>

19
00:00:47,010 --> 00:00:52,349
Amsterdam when<font color="#E5E5E5"> the academic group</font>

20
00:00:49,440 --> 00:00:55,199
focusing on system<font color="#E5E5E5"> security so we do</font>

21
00:00:52,350 --> 00:00:57,020
both exploitative projects<font color="#E5E5E5"> exploration</font>

22
00:00:55,199 --> 00:00:59,550
projects as well as defensive projects

23
00:00:57,020 --> 00:01:01,649
both<font color="#E5E5E5"> on software and lately also be kind</font>

24
00:00:59,550 --> 00:01:05,729
<font color="#CCCCCC">of dabbling in these</font><font color="#E5E5E5"> Hardware texts so</font>

25
00:01:01,649 --> 00:01:07,470
<font color="#CCCCCC">do</font><font color="#E5E5E5"> we use software techniques to exploit</font>

26
00:01:05,729 --> 00:01:10,830
hybrid properties that give us side

27
00:01:07,470 --> 00:01:12,630
channels if you want to<font color="#E5E5E5"> kind of guess</font>

28
00:01:10,830 --> 00:01:13,979
what my<font color="#E5E5E5"> favorite kind of project is</font>

29
00:01:12,630 --> 00:01:16,289
between offensive and<font color="#E5E5E5"> defense if this</font>

30
00:01:13,979 --> 00:01:19,250
was my<font color="#E5E5E5"> vanity license plate when I lived</font>

31
00:01:16,290 --> 00:01:22,729
<font color="#E5E5E5">in Tennessee last</font><font color="#CCCCCC"> year for six months</font>

32
00:01:19,250 --> 00:01:24,689
<font color="#CCCCCC">still</font><font color="#E5E5E5"> proudly in my office in Amsterdam</font>

33
00:01:22,729 --> 00:01:27,479
<font color="#CCCCCC">alright so a</font><font color="#E5E5E5"> view of the talk</font><font color="#CCCCCC"> is</font>

34
00:01:24,689 --> 00:01:29,158
Sarcelles in general what<font color="#CCCCCC"> are they</font><font color="#E5E5E5"> what</font>

35
00:01:27,479 --> 00:01:30,900
<font color="#E5E5E5">can we do with them the example</font><font color="#CCCCCC"> of</font>

36
00:01:29,159 --> 00:01:33,479
<font color="#CCCCCC">science</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> software which</font><font color="#E5E5E5"> are cache</font>

37
00:01:30,900 --> 00:01:35,030
attacks<font color="#E5E5E5"> how can we protect against these</font>

38
00:01:33,479 --> 00:01:37,259
cache attacks the two different ways<font color="#CCCCCC"> and</font>

39
00:01:35,030 --> 00:01:38,640
how does teal<font color="#E5E5E5"> bleed fit in that picture</font>

40
00:01:37,259 --> 00:01:41,299
how does it work what are<font color="#E5E5E5"> the properties</font>

41
00:01:38,640 --> 00:01:44,040
of the TLB that make this possible<font color="#CCCCCC"> and</font>

42
00:01:41,299 --> 00:01:46,200
and and how well does it work let's

43
00:01:44,040 --> 00:01:48,960
evaluate this<font color="#E5E5E5"> thing and how did the work</font>

44
00:01:46,200 --> 00:01:51,180
respond to this so first of all<font color="#CCCCCC"> side</font>

45
00:01:48,960 --> 00:01:52,559
<font color="#CCCCCC">charles superfast</font><font color="#E5E5E5"> introduction I'll try</font>

46
00:01:51,180 --> 00:01:53,939
and keep it short<font color="#E5E5E5"> customers you probably</font>

47
00:01:52,560 --> 00:01:55,380
already know about this<font color="#E5E5E5"> but</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> to set</font>

48
00:01:53,939 --> 00:01:57,929
<font color="#E5E5E5">the stage Sarcelles</font>

49
00:01:55,380 --> 00:01:59,880
is a way to leak information from<font color="#E5E5E5"> a</font>

50
00:01:57,930 --> 00:02:02,520
system<font color="#E5E5E5"> using side effects of how that</font>

51
00:01:59,880 --> 00:02:05,158
<font color="#E5E5E5">system works in a way that the designer</font>

52
00:02:02,520 --> 00:02:08,478
did not intend<font color="#E5E5E5"> right so this only works</font>

53
00:02:05,159 --> 00:02:10,950
on<font color="#E5E5E5"> saves I think from the 50s but if you</font>

54
00:02:08,479 --> 00:02:12,300
<font color="#E5E5E5">the first kind of</font><font color="#CCCCCC"> tumbler saves</font><font color="#E5E5E5"> if you</font>

55
00:02:10,949 --> 00:02:12,950
touch a stethoscope<font color="#E5E5E5"> to it and you can</font>

56
00:02:12,300 --> 00:02:14,900
hear the

57
00:02:12,950 --> 00:02:16,488
tumblers<font color="#E5E5E5"> fall one by one instead of so</font>

58
00:02:14,900 --> 00:02:17,720
you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> break the combination one by one</font>

59
00:02:16,489 --> 00:02:19,819
instead<font color="#CCCCCC"> of in the set all at the same</font>

60
00:02:17,720 --> 00:02:21,260
<font color="#E5E5E5">time</font><font color="#CCCCCC"> that's only</font><font color="#E5E5E5"> possible because of</font><font color="#CCCCCC"> how</font>

61
00:02:19,819 --> 00:02:24,619
the safe works and this<font color="#CCCCCC"> is not what the</font>

62
00:02:21,260 --> 00:02:29,060
designer intended<font color="#E5E5E5"> so we can leak</font><font color="#CCCCCC"> secrets</font>

63
00:02:24,620 --> 00:02:31,040
from<font color="#E5E5E5"> a system like this the history of</font>

64
00:02:29,060 --> 00:02:33,019
<font color="#CCCCCC">digital side channels goes all the way</font>

65
00:02:31,040 --> 00:02:34,730
back well much farther<font color="#E5E5E5"> either but in in</font>

66
00:02:33,019 --> 00:02:36,980
<font color="#E5E5E5">public life in</font><font color="#CCCCCC"> recent memory</font><font color="#E5E5E5"> it was all</font>

67
00:02:34,730 --> 00:02:38,390
about<font color="#E5E5E5"> smart cards smart cards processed</font>

68
00:02:36,980 --> 00:02:39,920
<font color="#CCCCCC">secrets</font><font color="#E5E5E5"> sometimes even if you're the</font>

69
00:02:38,390 --> 00:02:41,779
<font color="#E5E5E5">owner against person are the secrets and</font>

70
00:02:39,920 --> 00:02:43,790
as a side effect<font color="#CCCCCC"> of processing these</font>

71
00:02:41,780 --> 00:02:45,200
secrets<font color="#CCCCCC"> it generates all kinds of</font>

72
00:02:43,790 --> 00:02:46,730
signals<font color="#CCCCCC"> into the</font><font color="#E5E5E5"> world that sometimes</font>

73
00:02:45,200 --> 00:02:48,679
<font color="#E5E5E5">depend on these secrets and ever</font>

74
00:02:46,730 --> 00:02:51,290
whenever<font color="#E5E5E5"> that's true we can sometimes</font>

75
00:02:48,680 --> 00:02:53,480
leak<font color="#E5E5E5"> these secrets from the smart card</font>

76
00:02:51,290 --> 00:02:54,700
<font color="#CCCCCC">as a side effect of how the system works</font>

77
00:02:53,480 --> 00:02:57,260
it could<font color="#E5E5E5"> be a power consumption</font>

78
00:02:54,700 --> 00:02:59,569
<font color="#E5E5E5">electromagnetic radiation execution time</font>

79
00:02:57,260 --> 00:03:03,109
<font color="#CCCCCC">and in some cases even the signals might</font>

80
00:02:59,569 --> 00:03:07,130
leak into a speaker giving<font color="#E5E5E5"> rise to</font>

81
00:03:03,110 --> 00:03:10,370
acoustic crypt analysis so what is the

82
00:03:07,130 --> 00:03:15,319
software equivalent of this<font color="#E5E5E5"> are these</font>

83
00:03:10,370 --> 00:03:17,359
<font color="#CCCCCC">Akash attacks so normally the</font>

84
00:03:15,319 --> 00:03:19,399
abstraction<font color="#CCCCCC"> that we're all given and are</font>

85
00:03:17,359 --> 00:03:20,870
given to believe is a<font color="#CCCCCC"> process that</font>

86
00:03:19,400 --> 00:03:23,959
virtual machines are perfectly isolated

87
00:03:20,870 --> 00:03:26,019
<font color="#E5E5E5">from each other in a computer system one</font>

88
00:03:23,959 --> 00:03:29,060
<font color="#CCCCCC">cannot read the memory of the other and</font>

89
00:03:26,019 --> 00:03:30,769
this<font color="#CCCCCC"> abstraction is is very</font><font color="#E5E5E5"> very</font>

90
00:03:29,060 --> 00:03:32,540
comforting<font color="#E5E5E5"> but the reality</font><font color="#CCCCCC"> is different</font>

91
00:03:30,769 --> 00:03:34,970
<font color="#E5E5E5">because there are many shared resources</font>

92
00:03:32,540 --> 00:03:36,230
<font color="#E5E5E5">in a computing system that are the RAM</font>

93
00:03:34,970 --> 00:03:38,870
chips<font color="#E5E5E5"> we're sharing the RAM chips</font>

94
00:03:36,230 --> 00:03:41,388
<font color="#CCCCCC">pushing CPU cache</font><font color="#E5E5E5"> for sharing probably</font>

95
00:03:38,870 --> 00:03:44,180
many other resources<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we maybe</font><font color="#CCCCCC"> even</font>

96
00:03:41,389 --> 00:03:46,130
don't know about<font color="#E5E5E5"> today and all</font><font color="#CCCCCC"> of these</font>

97
00:03:44,180 --> 00:03:48,260
<font color="#E5E5E5">whenever you share a resource like this</font>

98
00:03:46,130 --> 00:03:49,910
<font color="#E5E5E5">this kind of abstraction starts to break</font>

99
00:03:48,260 --> 00:03:50,298
down<font color="#CCCCCC"> this perfect isolation starts to</font>

100
00:03:49,910 --> 00:03:52,220
break down

101
00:03:50,299 --> 00:03:54,980
whenever you share resources practically

102
00:03:52,220 --> 00:03:57,109
always allows<font color="#CCCCCC"> you to send secret</font>

103
00:03:54,980 --> 00:03:59,480
messages or send<font color="#E5E5E5"> messages to each other</font>

104
00:03:57,109 --> 00:04:02,150
by observing the state of that resource

105
00:03:59,480 --> 00:04:04,790
<font color="#E5E5E5">and then depending</font><font color="#CCCCCC"> on what you observe</font>

106
00:04:02,150 --> 00:04:06,200
you see that the<font color="#CCCCCC"> other party</font><font color="#E5E5E5"> that's also</font>

107
00:04:04,790 --> 00:04:08,090
seeing<font color="#E5E5E5"> this resource is sending you a</font>

108
00:04:06,200 --> 00:04:12,349
<font color="#CCCCCC">message we call that curb or</font><font color="#E5E5E5"> channel and</font>

109
00:04:08,090 --> 00:04:14,209
<font color="#E5E5E5">also sometimes that allows for leaking</font>

110
00:04:12,349 --> 00:04:17,180
<font color="#CCCCCC">information that the other party</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> not</font>

111
00:04:14,209 --> 00:04:18,590
cooperating<font color="#E5E5E5"> with and it these things</font>

112
00:04:17,180 --> 00:04:22,130
could be secret so that's we call<font color="#CCCCCC"> that a</font>

113
00:04:18,589 --> 00:04:25,429
<font color="#E5E5E5">cycle so examples of</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is you might</font>

114
00:04:22,130 --> 00:04:29,060
share<font color="#E5E5E5"> a row in RAM</font><font color="#CCCCCC"> or</font>

115
00:04:25,430 --> 00:04:30,560
so<font color="#CCCCCC"> RAM is accessed</font><font color="#E5E5E5"> in these structures</font>

116
00:04:29,060 --> 00:04:33,949
called<font color="#E5E5E5"> rows and whenever you switch</font><font color="#CCCCCC"> from</font>

117
00:04:30,560 --> 00:04:35,360
<font color="#E5E5E5">one</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> one row to another</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> takes</font>

118
00:04:33,949 --> 00:04:36,740
a certain amount<font color="#E5E5E5"> of time and you could</font>

119
00:04:35,360 --> 00:04:38,960
observe<font color="#E5E5E5"> this latency so that means that</font>

120
00:04:36,740 --> 00:04:42,770
you can observe<font color="#E5E5E5"> that the access pattern</font>

121
00:04:38,960 --> 00:04:45,739
<font color="#E5E5E5">of other processes</font><font color="#CCCCCC"> onto a Ram chip</font><font color="#E5E5E5"> by</font>

122
00:04:42,770 --> 00:04:49,549
observing things<font color="#E5E5E5"> that only you sorry</font>

123
00:04:45,740 --> 00:04:51,169
<font color="#CCCCCC">that</font><font color="#E5E5E5"> you can observe yourself so this is</font>

124
00:04:49,550 --> 00:04:53,330
<font color="#E5E5E5">the this histogram shows the latency</font>

125
00:04:51,169 --> 00:04:56,479
difference the same thing goes for

126
00:04:53,330 --> 00:04:58,580
shared caches<font color="#E5E5E5"> whenever all processes are</font>

127
00:04:56,479 --> 00:05:00,199
<font color="#E5E5E5">sharing a cache cache is critical for</font>

128
00:04:58,580 --> 00:05:04,130
performance that's why they're never

129
00:05:00,199 --> 00:05:07,610
going to go away<font color="#E5E5E5"> until well everything</font>

130
00:05:04,130 --> 00:05:09,560
changes and whenever you share a cache

131
00:05:07,610 --> 00:05:11,360
that<font color="#CCCCCC"> also means you</font><font color="#E5E5E5"> can observe whenever</font>

132
00:05:09,560 --> 00:05:12,560
someone else<font color="#E5E5E5"> another process fills up</font>

133
00:05:11,360 --> 00:05:15,380
the cache because<font color="#E5E5E5"> you can see your</font><font color="#CCCCCC"> own</font>

134
00:05:12,560 --> 00:05:16,699
<font color="#E5E5E5">stuff is gone from there and we're going</font>

135
00:05:15,380 --> 00:05:20,060
<font color="#E5E5E5">to go into more detail about how that</font>

136
00:05:16,699 --> 00:05:21,410
<font color="#E5E5E5">might work later on all of this is</font><font color="#CCCCCC"> only</font>

137
00:05:20,060 --> 00:05:23,539
possible because<font color="#E5E5E5"> of shared</font><font color="#CCCCCC"> resources</font>

138
00:05:21,410 --> 00:05:27,050
we're sharing the l1 l2 cache<font color="#E5E5E5"> on a core</font>

139
00:05:23,539 --> 00:05:29,210
we're sharing the l3 cache between all

140
00:05:27,050 --> 00:05:31,520
these cores<font color="#E5E5E5"> and because of these shared</font>

141
00:05:29,210 --> 00:05:33,919
resources<font color="#CCCCCC"> this kind of spying becomes</font>

142
00:05:31,520 --> 00:05:36,380
possible so<font color="#E5E5E5"> let's look at an example</font>

143
00:05:33,919 --> 00:05:37,580
<font color="#E5E5E5">this is all still just</font><font color="#CCCCCC"> background</font>

144
00:05:36,380 --> 00:05:40,340
information<font color="#E5E5E5"> it's not my work this is</font>

145
00:05:37,580 --> 00:05:44,389
<font color="#E5E5E5">just an example that</font><font color="#CCCCCC"> sets the the</font>

146
00:05:40,340 --> 00:05:46,340
relevance for<font color="#CCCCCC"> tle so this cache attack</font>

147
00:05:44,389 --> 00:05:50,030
is an<font color="#E5E5E5"> example of this is flush</font><font color="#CCCCCC"> and</font>

148
00:05:46,340 --> 00:05:52,810
reload<font color="#E5E5E5"> it's very common in operating</font>

149
00:05:50,030 --> 00:05:55,119
<font color="#CCCCCC">systems that you should</font><font color="#E5E5E5"> actually share</font>

150
00:05:52,810 --> 00:05:57,110
<font color="#E5E5E5">literally share exactly</font><font color="#CCCCCC"> the same</font>

151
00:05:55,120 --> 00:06:01,070
physical memory it's a very powerful

152
00:05:57,110 --> 00:06:03,169
technique<font color="#CCCCCC"> to to reduce the work set size</font>

153
00:06:01,070 --> 00:06:04,699
because if if you're both doing<font color="#CCCCCC"> the same</font>

154
00:06:03,169 --> 00:06:06,680
thing with<font color="#E5E5E5"> the same program and we don't</font>

155
00:06:04,699 --> 00:06:08,870
have to copy that because of<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it</font>

156
00:06:06,680 --> 00:06:11,150
means<font color="#E5E5E5"> we can there's less copying going</font>

157
00:06:08,870 --> 00:06:12,919
on there's hard cash utilization<font color="#CCCCCC"> to work</font>

158
00:06:11,150 --> 00:06:15,650
inside<font color="#E5E5E5"> the working set size gets less</font>

159
00:06:12,919 --> 00:06:19,430
and<font color="#E5E5E5"> everything is faster for for these</font>

160
00:06:15,650 --> 00:06:20,810
reasons<font color="#CCCCCC"> it also means that you're</font>

161
00:06:19,430 --> 00:06:23,060
playing with<font color="#E5E5E5"> exactly the</font><font color="#CCCCCC"> same physical</font>

162
00:06:20,810 --> 00:06:26,060
<font color="#E5E5E5">memory</font><font color="#CCCCCC"> that the other process is playing</font>

163
00:06:23,060 --> 00:06:27,889
with<font color="#CCCCCC"> but</font><font color="#E5E5E5"> I mean using so let's say we</font>

164
00:06:26,060 --> 00:06:29,659
both there's a system<font color="#CCCCCC"> call called a map</font>

165
00:06:27,889 --> 00:06:31,130
let's say we're both running<font color="#E5E5E5"> and we're</font>

166
00:06:29,659 --> 00:06:32,990
using the same cryptographic library

167
00:06:31,130 --> 00:06:33,969
<font color="#E5E5E5">maybe</font><font color="#CCCCCC"> Lib</font><font color="#E5E5E5"> do crypt or something like</font>

168
00:06:32,990 --> 00:06:36,289
<font color="#E5E5E5">that</font>

169
00:06:33,969 --> 00:06:37,700
we both map them<font color="#CCCCCC"> into our own address</font>

170
00:06:36,289 --> 00:06:38,550
<font color="#CCCCCC">space and we're using exactly the</font><font color="#E5E5E5"> same</font>

171
00:06:37,700 --> 00:06:40,920
<font color="#CCCCCC">physical memory</font>

172
00:06:38,550 --> 00:06:42,780
<font color="#E5E5E5">it means that if I tell the</font><font color="#CCCCCC"> CPU which I</font>

173
00:06:40,920 --> 00:06:45,210
can if I<font color="#E5E5E5"> have access to that memory if I</font>

174
00:06:42,780 --> 00:06:47,820
tell the CPU to flush<font color="#E5E5E5"> this piece of</font>

175
00:06:45,210 --> 00:06:50,159
memory<font color="#E5E5E5"> out of out</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the cache and goes</font>

176
00:06:47,820 --> 00:06:53,190
to<font color="#CCCCCC"> RAM and then I access</font><font color="#E5E5E5"> it again it's</font>

177
00:06:50,160 --> 00:06:55,440
going<font color="#E5E5E5"> to be slow but if someone else my</font>

178
00:06:53,190 --> 00:06:59,219
victim use that memory<font color="#CCCCCC"> in the meantime</font>

179
00:06:55,440 --> 00:07:00,900
<font color="#E5E5E5">it's going to be fast again so that</font>

180
00:06:59,220 --> 00:07:02,220
gives<font color="#E5E5E5"> us the side</font><font color="#CCCCCC"> channel saying</font><font color="#E5E5E5"> hey</font>

181
00:07:00,900 --> 00:07:07,620
someone else<font color="#CCCCCC"> uses a</font><font color="#E5E5E5"> memory so this</font>

182
00:07:02,220 --> 00:07:12,720
perfect<font color="#CCCCCC"> isolation is gone so how does it</font>

183
00:07:07,620 --> 00:07:14,690
<font color="#CCCCCC">work so let's say that we are</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> course</font>

184
00:07:12,720 --> 00:07:18,170
the attacker<font color="#CCCCCC"> so</font><font color="#E5E5E5"> we're the lower bar and</font>

185
00:07:14,690 --> 00:07:21,900
the red block indicates reloading<font color="#E5E5E5"> and</font>

186
00:07:18,170 --> 00:07:25,080
blue<font color="#E5E5E5"> indicates flushing so blue the the</font>

187
00:07:21,900 --> 00:07:27,750
blue operation says<font color="#E5E5E5"> send this piece of</font>

188
00:07:25,080 --> 00:07:29,640
memory away<font color="#E5E5E5"> out of the cache wait a</font>

189
00:07:27,750 --> 00:07:31,320
little bit we try to access it again<font color="#CCCCCC"> and</font>

190
00:07:29,640 --> 00:07:33,030
because we<font color="#CCCCCC"> sent it away</font><font color="#E5E5E5"> the next</font>

191
00:07:31,320 --> 00:07:35,940
operation<font color="#E5E5E5"> the reload in red it takes a</font>

192
00:07:33,030 --> 00:07:38,400
<font color="#E5E5E5">longer amount of time unless</font><font color="#CCCCCC"> our victim</font>

193
00:07:35,940 --> 00:07:40,320
which is<font color="#E5E5E5"> using the same memory has used</font>

194
00:07:38,400 --> 00:07:42,690
it in the meantime<font color="#E5E5E5"> this makes the second</font>

195
00:07:40,320 --> 00:07:45,270
access fast sonali so as a side effect

196
00:07:42,690 --> 00:07:47,670
<font color="#CCCCCC">of our</font><font color="#E5E5E5"> victim</font><font color="#CCCCCC"> accessing</font><font color="#E5E5E5"> the memory we</font>

197
00:07:45,270 --> 00:07:49,469
see a<font color="#E5E5E5"> low latency</font><font color="#CCCCCC"> on the second access</font>

198
00:07:47,670 --> 00:07:54,090
so<font color="#CCCCCC"> that gives us</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Sychar and we can</font>

199
00:07:49,470 --> 00:07:57,360
do<font color="#E5E5E5"> all</font><font color="#CCCCCC"> kinds</font><font color="#E5E5E5"> of tricks with</font><font color="#CCCCCC"> a primitive</font>

200
00:07:54,090 --> 00:07:59,219
<font color="#E5E5E5">like this and there</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> many more</font>

201
00:07:57,360 --> 00:08:00,600
examples<font color="#E5E5E5"> of a cache attacks like this</font>

202
00:07:59,220 --> 00:08:02,010
which use different<font color="#CCCCCC"> mechanisms which</font>

203
00:08:00,600 --> 00:08:03,540
don't<font color="#E5E5E5"> require sharing but this is the</font>

204
00:08:02,010 --> 00:08:10,050
<font color="#E5E5E5">easiest to explain but this is the</font>

205
00:08:03,540 --> 00:08:11,430
general principle always so let's look

206
00:08:10,050 --> 00:08:13,350
at an<font color="#CCCCCC"> example of an attack that we can</font>

207
00:08:11,430 --> 00:08:15,480
do with<font color="#E5E5E5"> this let's say we have an aes</font>

208
00:08:13,350 --> 00:08:17,250
implementation<font color="#E5E5E5"> in a yes of course uses</font>

209
00:08:15,480 --> 00:08:19,350
<font color="#E5E5E5">the secret key that's supposed</font><font color="#CCCCCC"> to of</font>

210
00:08:17,250 --> 00:08:23,460
course remain secret but let's say the

211
00:08:19,350 --> 00:08:25,620
implementation has<font color="#CCCCCC"> a floor sorry</font>

212
00:08:23,460 --> 00:08:27,510
implementers of<font color="#E5E5E5"> this of this</font>

213
00:08:25,620 --> 00:08:30,990
<font color="#CCCCCC">implementation that uses what we call</font>

214
00:08:27,510 --> 00:08:32,819
<font color="#CCCCCC">tea tables this means</font><font color="#E5E5E5"> that the</font>

215
00:08:30,990 --> 00:08:35,549
implementation<font color="#CCCCCC"> will in the process of</font>

216
00:08:32,820 --> 00:08:38,330
encrypting something it will look up in

217
00:08:35,549 --> 00:08:40,679
a<font color="#CCCCCC"> precomputed table to speed things up</font>

218
00:08:38,330 --> 00:08:42,390
it'll it'll look<font color="#E5E5E5"> up something that it</font>

219
00:08:40,679 --> 00:08:45,030
needs<font color="#CCCCCC"> for</font><font color="#E5E5E5"> the to generate the encrypted</font>

220
00:08:42,390 --> 00:08:48,420
<font color="#E5E5E5">stream and that thing is</font><font color="#CCCCCC"> a wizards or of</font>

221
00:08:45,030 --> 00:08:50,980
the plaintext byte and of a key byte and

222
00:08:48,420 --> 00:08:54,589
as you can<font color="#CCCCCC"> see from</font><font color="#E5E5E5"> the syntax</font>

223
00:08:50,980 --> 00:08:56,300
what it wants<font color="#E5E5E5"> is somewhere</font><font color="#CCCCCC"> else</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> the</font>

224
00:08:54,590 --> 00:08:58,160
table in other words<font color="#E5E5E5"> somewhere else in</font>

225
00:08:56,300 --> 00:09:00,140
memory depending on what the plaintext

226
00:08:58,160 --> 00:09:01,850
<font color="#CCCCCC">byte is and what the key bug is so if we</font>

227
00:09:00,140 --> 00:09:04,010
know<font color="#E5E5E5"> what the plaintext is which is</font>

228
00:09:01,850 --> 00:09:05,480
often<font color="#CCCCCC"> the</font><font color="#E5E5E5"> case if we feed the encrypt or</font>

229
00:09:04,010 --> 00:09:07,790
plain text<font color="#CCCCCC"> that we know like a known</font>

230
00:09:05,480 --> 00:09:12,130
plaintext attack and we observe<font color="#CCCCCC"> where in</font>

231
00:09:07,790 --> 00:09:15,860
the table we're seeing these<font color="#CCCCCC"> accesses</font>

232
00:09:12,130 --> 00:09:17,180
<font color="#E5E5E5">then we can figure</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> by knowing what</font>

233
00:09:15,860 --> 00:09:19,250
the plaintext is we can also figure out

234
00:09:17,180 --> 00:09:20,719
which key<font color="#E5E5E5"> byte was used to act to</font>

235
00:09:19,250 --> 00:09:25,250
generate<font color="#E5E5E5"> that access so</font><font color="#CCCCCC"> we can compute</font>

236
00:09:20,720 --> 00:09:27,710
<font color="#E5E5E5">the key bytes so as an example of how</font>

237
00:09:25,250 --> 00:09:29,330
that<font color="#CCCCCC"> might work</font><font color="#E5E5E5"> we here we here see this</font>

238
00:09:27,710 --> 00:09:32,060
coloration this figure is<font color="#E5E5E5"> from a paper</font>

239
00:09:29,330 --> 00:09:33,740
called cloak<font color="#E5E5E5"> that</font><font color="#CCCCCC"> uses</font><font color="#E5E5E5"> defense which we</font>

240
00:09:32,060 --> 00:09:35,390
can talk about<font color="#CCCCCC"> later we can</font><font color="#E5E5E5"> see a very</font>

241
00:09:33,740 --> 00:09:36,920
<font color="#CCCCCC">strong correlation between</font><font color="#E5E5E5"> the activity</font>

242
00:09:35,390 --> 00:09:38,810
in a<font color="#E5E5E5"> particular cache line and what the</font>

243
00:09:36,920 --> 00:09:43,000
<font color="#CCCCCC">Playtex bite is so that allows us to</font>

244
00:09:38,810 --> 00:09:44,959
attack this implementation so let's see

245
00:09:43,000 --> 00:09:47,450
<font color="#E5E5E5">another</font><font color="#CCCCCC"> outcome that we're going to talk</font>

246
00:09:44,960 --> 00:09:49,760
<font color="#CCCCCC">about data</font><font color="#E5E5E5"> or in the context of TLB also</font>

247
00:09:47,450 --> 00:09:50,840
so this<font color="#E5E5E5"> is a I won't talk about</font><font color="#CCCCCC"> all the</font>

248
00:09:49,760 --> 00:09:52,880
<font color="#CCCCCC">details here because it doesn't</font><font color="#E5E5E5"> matter</font>

249
00:09:50,840 --> 00:09:54,860
<font color="#E5E5E5">that much but the most important thing</font>

250
00:09:52,880 --> 00:09:56,510
here is<font color="#CCCCCC"> that this is a elliptic curve</font>

251
00:09:54,860 --> 00:09:58,850
cryptography<font color="#E5E5E5"> implementation in Lib G</font>

252
00:09:56,510 --> 00:10:01,310
crypt<font color="#E5E5E5"> and I should say this is this</font><font color="#CCCCCC"> is</font>

253
00:09:58,850 --> 00:10:04,040
<font color="#E5E5E5">not the</font><font color="#CCCCCC"> size of proof version right so</font>

254
00:10:01,310 --> 00:10:06,890
there's there have been<font color="#E5E5E5"> there's</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> child</font>

255
00:10:04,040 --> 00:10:08,270
proof version<font color="#E5E5E5"> that is safer than this</font>

256
00:10:06,890 --> 00:10:09,680
<font color="#E5E5E5">and there's</font><font color="#CCCCCC"> even</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> mirror versions you</font>

257
00:10:08,270 --> 00:10:11,180
even say<font color="#CCCCCC"> for which we'll</font><font color="#E5E5E5"> also talk</font><font color="#CCCCCC"> about</font>

258
00:10:09,680 --> 00:10:12,319
but let's<font color="#E5E5E5"> just for</font><font color="#CCCCCC"> the sake of</font>

259
00:10:11,180 --> 00:10:15,290
illustration look at this non

260
00:10:12,320 --> 00:10:17,810
side-channel proof<font color="#CCCCCC"> version the</font><font color="#E5E5E5"> this the</font>

261
00:10:15,290 --> 00:10:19,699
unsafety comes because<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the second</font>

262
00:10:17,810 --> 00:10:22,069
conditional here<font color="#E5E5E5"> I mean the conditional</font>

263
00:10:19,700 --> 00:10:24,620
here so if the scalar<font color="#CCCCCC"> is the secret</font>

264
00:10:22,070 --> 00:10:27,170
<font color="#CCCCCC">value this is a function</font><font color="#E5E5E5"> it might be</font>

265
00:10:24,620 --> 00:10:28,850
called when you're signing something<font color="#E5E5E5"> so</font>

266
00:10:27,170 --> 00:10:31,250
it needs a<font color="#E5E5E5"> secret key</font><font color="#CCCCCC"> which is which is</font>

267
00:10:28,850 --> 00:10:32,690
stored in<font color="#E5E5E5"> the scalar and then we do this</font>

268
00:10:31,250 --> 00:10:34,700
multiplication<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> a series of</font>

269
00:10:32,690 --> 00:10:37,070
duplications and<font color="#E5E5E5"> conditional additions</font>

270
00:10:34,700 --> 00:10:38,240
and the<font color="#E5E5E5"> addition conditional depends on</font>

271
00:10:37,070 --> 00:10:40,400
what the secret value<font color="#E5E5E5"> is so we're</font>

272
00:10:38,240 --> 00:10:41,630
posting this secret be able to duplicate

273
00:10:40,400 --> 00:10:44,209
duplicate duplicate<font color="#E5E5E5"> add duplicate</font>

274
00:10:41,630 --> 00:10:45,530
duplicate<font color="#E5E5E5"> add double add depending on</font>

275
00:10:44,210 --> 00:10:47,480
what the secret<font color="#E5E5E5"> is so let's see that</font>

276
00:10:45,530 --> 00:10:50,810
<font color="#CCCCCC">visualized in what what might this look</font>

277
00:10:47,480 --> 00:10:52,670
like in the CPU cache<font color="#E5E5E5"> so let's see we're</font>

278
00:10:50,810 --> 00:10:55,189
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the top half here we're</font>

279
00:10:52,670 --> 00:10:57,680
seeing<font color="#E5E5E5"> the signal in the cache</font><font color="#CCCCCC"> that is</font>

280
00:10:55,190 --> 00:11:00,110
<font color="#E5E5E5">read so these are data reads and at the</font>

281
00:10:57,680 --> 00:11:03,140
lower half we see<font color="#E5E5E5"> execution so this is</font>

282
00:11:00,110 --> 00:11:04,750
the code<font color="#CCCCCC"> accesses and you can see that</font>

283
00:11:03,140 --> 00:11:07,060
<font color="#E5E5E5">the let's see the blue</font>

284
00:11:04,750 --> 00:11:09,520
is<font color="#CCCCCC"> for</font><font color="#E5E5E5"> zero so it's short it's only</font>

285
00:11:07,060 --> 00:11:11,140
duplicating and<font color="#E5E5E5"> green is for once so</font>

286
00:11:09,520 --> 00:11:12,819
it's<font color="#E5E5E5"> longer</font><font color="#CCCCCC"> but you can</font><font color="#E5E5E5"> duplicate first</font>

287
00:11:11,140 --> 00:11:14,800
and then in addition so<font color="#E5E5E5"> you can see</font>

288
00:11:12,820 --> 00:11:19,510
these signals<font color="#E5E5E5"> they look like a mess but</font>

289
00:11:14,800 --> 00:11:21,250
they're still<font color="#E5E5E5"> very different</font><font color="#CCCCCC"> right so if</font>

290
00:11:19,510 --> 00:11:23,110
we were if<font color="#CCCCCC"> we can tell the difference</font>

291
00:11:21,250 --> 00:11:25,570
between<font color="#E5E5E5"> one</font><font color="#CCCCCC"> x span or</font><font color="#E5E5E5"> the other then we</font>

292
00:11:23,110 --> 00:11:27,160
<font color="#E5E5E5">can leak these key bits so let's put</font>

293
00:11:25,570 --> 00:11:28,300
them one over the other and<font color="#CCCCCC"> see if we</font>

294
00:11:27,160 --> 00:11:30,699
can tell any difference<font color="#CCCCCC"> so here's a</font>

295
00:11:28,300 --> 00:11:32,859
duplication<font color="#E5E5E5"> there's duplication and then</font>

296
00:11:30,700 --> 00:11:34,840
adding so if we can tell<font color="#E5E5E5"> the</font><font color="#CCCCCC"> cash</font>

297
00:11:32,860 --> 00:11:37,000
signature of this adding parts<font color="#E5E5E5"> and I can</font>

298
00:11:34,840 --> 00:11:39,910
I can kind of see some<font color="#E5E5E5"> differences then</font>

299
00:11:37,000 --> 00:11:47,710
we can then we have a side charm that

300
00:11:39,910 --> 00:11:52,510
can leak the secret key all using the

301
00:11:47,710 --> 00:11:55,450
<font color="#E5E5E5">CPU cache now can we make the algorithm</font>

302
00:11:52,510 --> 00:11:58,360
<font color="#E5E5E5">better the implementation better so that</font>

303
00:11:55,450 --> 00:12:02,190
it's not possible<font color="#CCCCCC"> anymore</font><font color="#E5E5E5"> yeah we can do</font>

304
00:11:58,360 --> 00:12:04,450
<font color="#E5E5E5">that we can unconditionally do the</font>

305
00:12:02,190 --> 00:12:05,950
duplication<font color="#E5E5E5"> and the addition no matter</font>

306
00:12:04,450 --> 00:12:07,870
what the secret key<font color="#E5E5E5"> base will do just do</font>

307
00:12:05,950 --> 00:12:10,470
both and<font color="#E5E5E5"> then conditionally use the</font>

308
00:12:07,870 --> 00:12:13,839
<font color="#E5E5E5">result so what would that look like</font>

309
00:12:10,470 --> 00:12:15,280
<font color="#E5E5E5">that's a</font><font color="#CCCCCC"> zero bit that's a 1 bit now</font>

310
00:12:13,839 --> 00:12:16,570
this looks much<font color="#E5E5E5"> better right we can't</font>

311
00:12:15,280 --> 00:12:19,120
really tell<font color="#CCCCCC"> the difference between one</font>

312
00:12:16,570 --> 00:12:23,170
or<font color="#E5E5E5"> the other there's a small exception</font>

313
00:12:19,120 --> 00:12:25,540
<font color="#E5E5E5">if you can spot</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> if we look at the</font>

314
00:12:23,170 --> 00:12:28,150
green<font color="#E5E5E5"> signal that's a fraction longer</font>

315
00:12:25,540 --> 00:12:30,459
than the blue signal do you see right at

316
00:12:28,150 --> 00:12:31,959
the end there's this there's this<font color="#E5E5E5"> title</font>

317
00:12:30,460 --> 00:12:34,750
bit of extra operation<font color="#E5E5E5"> and that's the</font>

318
00:12:31,960 --> 00:12:37,450
conditional using of the result because

319
00:12:34,750 --> 00:12:39,040
we<font color="#E5E5E5"> only want to use the result in the</font>

320
00:12:37,450 --> 00:12:40,839
<font color="#E5E5E5">case of a 1 bit</font><font color="#CCCCCC"> because otherwise the</font>

321
00:12:39,040 --> 00:12:42,280
<font color="#CCCCCC">Edition should</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> happen</font><font color="#E5E5E5"> and in the</font>

322
00:12:40,839 --> 00:12:44,350
case<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> 1 bit you can see this tiny</font>

323
00:12:42,280 --> 00:12:46,240
<font color="#E5E5E5">little bit of extra work that's done to</font>

324
00:12:44,350 --> 00:12:49,600
use this result<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that is also</font><font color="#E5E5E5"> a side</font>

325
00:12:46,240 --> 00:12:51,130
channel<font color="#E5E5E5"> that we can use and there's even</font>

326
00:12:49,600 --> 00:12:53,980
newer version of<font color="#CCCCCC"> this code which is even</font>

327
00:12:51,130 --> 00:12:55,600
safer<font color="#E5E5E5"> but this is just so I'm</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> trying</font>

328
00:12:53,980 --> 00:12:57,640
to make you look bad here that they're

329
00:12:55,600 --> 00:12:59,350
doing<font color="#E5E5E5"> a great job it's just</font><font color="#CCCCCC"> to</font>

330
00:12:57,640 --> 00:13:01,540
<font color="#CCCCCC">demonstrate or push to show to you that</font>

331
00:12:59,350 --> 00:13:03,070
<font color="#CCCCCC">it's extremely hard</font><font color="#E5E5E5"> to do the site</font><font color="#CCCCCC"> realm</font>

332
00:13:01,540 --> 00:13:06,670
proof implementations<font color="#E5E5E5"> at this arms race</font>

333
00:13:03,070 --> 00:13:12,160
that's been going on ever since<font color="#CCCCCC"> oh I</font>

334
00:13:06,670 --> 00:13:13,689
think 2005 roughly<font color="#E5E5E5"> and ever and a new</font>

335
00:13:12,160 --> 00:13:15,760
cycle results are still<font color="#CCCCCC"> coming out today</font>

336
00:13:13,690 --> 00:13:19,380
<font color="#CCCCCC">and which</font><font color="#E5E5E5"> which sometimes depend on the</font>

337
00:13:15,760 --> 00:13:19,380
code but sometimes it also depends on

338
00:13:19,610 --> 00:13:23,120
sometimes depends<font color="#E5E5E5"> on a micro</font>

339
00:13:21,410 --> 00:13:24,829
architectural problems the<font color="#CCCCCC"> cpu which is</font>

340
00:13:23,120 --> 00:13:27,170
very hard to predict<font color="#E5E5E5"> so just trying to</font>

341
00:13:24,829 --> 00:13:29,300
say is extremely<font color="#CCCCCC"> hard to write perfectly</font>

342
00:13:27,170 --> 00:13:30,589
such on proof code and we maybe we

343
00:13:29,300 --> 00:13:32,810
should even<font color="#E5E5E5"> expect</font><font color="#CCCCCC"> to be able</font><font color="#E5E5E5"> to do it</font>

344
00:13:30,589 --> 00:13:35,089
<font color="#E5E5E5">and for</font><font color="#CCCCCC"> that reason it would be really</font>

345
00:13:32,810 --> 00:13:38,410
<font color="#E5E5E5">great</font><font color="#CCCCCC"> if there were generic</font><font color="#E5E5E5"> defenses can</font>

346
00:13:35,089 --> 00:13:42,230
we just deploy some some some<font color="#CCCCCC"> cache</font>

347
00:13:38,410 --> 00:13:44,899
magic<font color="#E5E5E5"> that makes</font><font color="#CCCCCC"> even these unsafe</font>

348
00:13:42,230 --> 00:13:46,250
implementations unmonitored<font color="#CCCCCC"> but keep the</font>

349
00:13:44,899 --> 00:13:52,100
benefits<font color="#CCCCCC"> of the cache now that would be</font>

350
00:13:46,250 --> 00:13:54,199
<font color="#E5E5E5">great so</font><font color="#CCCCCC"> let's look</font><font color="#E5E5E5"> at that I'm going to</font>

351
00:13:52,100 --> 00:13:56,750
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> about three general ways to do this</font>

352
00:13:54,199 --> 00:13:59,060
<font color="#E5E5E5">one is cache</font><font color="#CCCCCC"> coloring</font><font color="#E5E5E5"> so the cache looks</font>

353
00:13:56,750 --> 00:14:01,970
something like this all these physical

354
00:13:59,060 --> 00:14:04,010
<font color="#CCCCCC">pages have a color they call it colors</font>

355
00:14:01,970 --> 00:14:08,389
they don't really<font color="#E5E5E5"> have colors let's say</font>

356
00:14:04,010 --> 00:14:10,970
128<font color="#E5E5E5"> different ones and every physical</font>

357
00:14:08,389 --> 00:14:13,029
page<font color="#E5E5E5"> every blue page so to speak will go</font>

358
00:14:10,970 --> 00:14:16,810
to the blue part<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the cache always</font>

359
00:14:13,029 --> 00:14:19,310
that's just how the cache is partitioned

360
00:14:16,810 --> 00:14:20,689
<font color="#E5E5E5">normally you don't</font><font color="#CCCCCC"> notice this but it</font>

361
00:14:19,310 --> 00:14:23,660
does mean that if you are trying<font color="#E5E5E5"> to</font>

362
00:14:20,690 --> 00:14:25,339
<font color="#E5E5E5">access if you as a process only get new</font>

363
00:14:23,660 --> 00:14:28,490
pages<font color="#E5E5E5"> you can never see any cache</font>

364
00:14:25,339 --> 00:14:33,170
activity of a<font color="#CCCCCC"> read process so that's one</font>

365
00:14:28,490 --> 00:14:35,029
<font color="#E5E5E5">way to do it another way</font><font color="#CCCCCC"> to do it</font><font color="#E5E5E5"> is use</font>

366
00:14:33,170 --> 00:14:36,920
this<font color="#E5E5E5"> Intel</font><font color="#CCCCCC"> COP feature called CAD cache</font>

367
00:14:35,029 --> 00:14:38,810
allocation technology it partitions the

368
00:14:36,920 --> 00:14:41,630
<font color="#E5E5E5">cache in a different way it was not</font>

369
00:14:38,810 --> 00:14:43,939
intended for security but<font color="#E5E5E5"> we could use</font>

370
00:14:41,630 --> 00:14:45,529
<font color="#E5E5E5">it for</font><font color="#CCCCCC"> security it was intended</font><font color="#E5E5E5"> for more</font>

371
00:14:43,940 --> 00:14:47,630
predictable performance<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> put a</font>

372
00:14:45,529 --> 00:14:50,209
bunch<font color="#E5E5E5"> of VMs on a machine and</font><font color="#CCCCCC"> you let</font>

373
00:14:47,630 --> 00:14:52,279
<font color="#E5E5E5">them access the cache using a partition</font>

374
00:14:50,209 --> 00:14:53,540
like this it<font color="#E5E5E5"> won't make it faster but</font>

375
00:14:52,279 --> 00:14:58,310
it'll make<font color="#E5E5E5"> it very predictable because</font>

376
00:14:53,540 --> 00:15:00,529
<font color="#E5E5E5">the cache usage does not it's not sort</font>

377
00:14:58,310 --> 00:15:03,319
of<font color="#E5E5E5"> blocked not obstructed by other VMs</font>

378
00:15:00,529 --> 00:15:05,899
running<font color="#E5E5E5"> on the same machine</font><font color="#CCCCCC"> and then one</font>

379
00:15:03,319 --> 00:15:08,060
final<font color="#CCCCCC"> example is</font><font color="#E5E5E5"> TSX which is which</font>

380
00:15:05,899 --> 00:15:10,430
allows you to<font color="#E5E5E5"> create memory transactions</font>

381
00:15:08,060 --> 00:15:13,670
also<font color="#E5E5E5"> an Intel CPU feature so we can say</font>

382
00:15:10,430 --> 00:15:15,260
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> I want to start a transaction</font><font color="#CCCCCC"> do a</font>

383
00:15:13,670 --> 00:15:18,290
bunch of<font color="#CCCCCC"> operations do a commit</font><font color="#E5E5E5"> and then</font>

384
00:15:15,260 --> 00:15:20,360
that will become atomically visible what

385
00:15:18,290 --> 00:15:22,610
the restriction is that<font color="#CCCCCC"> in there in the</font>

386
00:15:20,360 --> 00:15:24,470
time that<font color="#CCCCCC"> the</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> transaction happens</font>

387
00:15:22,610 --> 00:15:25,819
all<font color="#CCCCCC"> of the data must fit into</font><font color="#E5E5E5"> the cache</font>

388
00:15:24,470 --> 00:15:27,110
because<font color="#E5E5E5"> as soon as it goes</font><font color="#CCCCCC"> Ram we cut</font>

389
00:15:25,819 --> 00:15:27,910
<font color="#CCCCCC">under the transaction anymore but kind</font>

390
00:15:27,110 --> 00:15:30,430
<font color="#CCCCCC">of border</font>

391
00:15:27,910 --> 00:15:32,020
so that's interesting<font color="#CCCCCC"> also not in it for</font>

392
00:15:30,430 --> 00:15:36,760
<font color="#CCCCCC">security but it was</font><font color="#E5E5E5"> intended for</font>

393
00:15:32,020 --> 00:15:40,840
concurrent programming but what we can

394
00:15:36,760 --> 00:15:43,270
use we can<font color="#E5E5E5"> exploit this because of the</font>

395
00:15:40,840 --> 00:15:44,470
<font color="#E5E5E5">fact that whenever someone is playing</font>

396
00:15:43,270 --> 00:15:45,939
tricks<font color="#E5E5E5"> with your cache</font><font color="#CCCCCC"> we're going to</font>

397
00:15:44,470 --> 00:15:47,650
get evictions because the other side<font color="#E5E5E5"> is</font>

398
00:15:45,940 --> 00:15:49,300
trying<font color="#E5E5E5"> to monitor is it in the cache or</font>

399
00:15:47,650 --> 00:15:52,030
not<font color="#CCCCCC"> and as a side effect of that</font><font color="#E5E5E5"> the</font>

400
00:15:49,300 --> 00:15:53,560
transaction will abort<font color="#E5E5E5"> so that the other</font>

401
00:15:52,030 --> 00:15:54,970
party will<font color="#E5E5E5"> hopefully not be able to</font>

402
00:15:53,560 --> 00:15:56,920
deduce any information from<font color="#E5E5E5"> that and</font>

403
00:15:54,970 --> 00:15:58,540
<font color="#E5E5E5">just to show you how that what the</font>

404
00:15:56,920 --> 00:16:00,069
signal will look like also with flash

405
00:15:58,540 --> 00:16:02,199
Android on the AES attack you remember

406
00:16:00,070 --> 00:16:04,540
this is the<font color="#CCCCCC"> original signal has very</font>

407
00:16:02,200 --> 00:16:06,430
<font color="#E5E5E5">strong correlation with it in but if the</font>

408
00:16:04,540 --> 00:16:08,620
<font color="#E5E5E5">since the operation is done inside</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> TSX</font>

409
00:16:06,430 --> 00:16:10,329
transaction the<font color="#CCCCCC"> signal is destroyed</font><font color="#E5E5E5"> and</font>

410
00:16:08,620 --> 00:16:12,340
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> really great because now we have</font>

411
00:16:10,330 --> 00:16:14,140
an unsafe implementation that is<font color="#E5E5E5"> that</font>

412
00:16:12,340 --> 00:16:15,610
cannot<font color="#E5E5E5"> be attacked but the</font>

413
00:16:14,140 --> 00:16:18,310
implementation did have<font color="#E5E5E5"> to didn't have</font>

414
00:16:15,610 --> 00:16:23,710
<font color="#E5E5E5">to change</font><font color="#CCCCCC"> now that's</font><font color="#E5E5E5"> really</font><font color="#CCCCCC"> attractive</font>

415
00:16:18,310 --> 00:16:26,199
property this<font color="#E5E5E5"> is work from a paper</font>

416
00:16:23,710 --> 00:16:27,610
called<font color="#E5E5E5"> cloak which uses the Miss TSX</font>

417
00:16:26,200 --> 00:16:32,290
feature to protect cryptographic

418
00:16:27,610 --> 00:16:40,120
implementations<font color="#E5E5E5"> all right so all</font><font color="#CCCCCC"> cash</font>

419
00:16:32,290 --> 00:16:42,490
problem solved dramatic pause<font color="#E5E5E5"> so now</font><font color="#CCCCCC"> we</font>

420
00:16:40,120 --> 00:16:43,780
have the situation where we<font color="#E5E5E5"> would like</font>

421
00:16:42,490 --> 00:16:47,140
<font color="#CCCCCC">to have these</font><font color="#E5E5E5"> very generic cash</font>

422
00:16:43,780 --> 00:16:48,310
protections because<font color="#E5E5E5"> it's very hard</font><font color="#CCCCCC"> to do</font>

423
00:16:47,140 --> 00:16:49,420
a perfectly<font color="#E5E5E5"> tight round proof</font>

424
00:16:48,310 --> 00:16:51,910
implementation otherwise there<font color="#E5E5E5"> are</font>

425
00:16:49,420 --> 00:16:55,120
things in the that the compiler might do

426
00:16:51,910 --> 00:16:56,410
that will they will ruin your safety the

427
00:16:55,120 --> 00:16:58,390
compiler might optimize something<font color="#E5E5E5"> that</font>

428
00:16:56,410 --> 00:16:59,500
depends on<font color="#E5E5E5"> the secret the CPU might do</font>

429
00:16:58,390 --> 00:17:01,630
something<font color="#E5E5E5"> that depends on the secret</font>

430
00:16:59,500 --> 00:17:03,070
<font color="#E5E5E5">that</font><font color="#CCCCCC"> you can't</font><font color="#E5E5E5"> really predict even today</font>

431
00:17:01,630 --> 00:17:07,930
it's<font color="#E5E5E5"> hard to predict that but imagine</font>

432
00:17:03,070 --> 00:17:10,060
future compilers or future<font color="#E5E5E5"> CPUs so if</font>

433
00:17:07,930 --> 00:17:12,819
only we had these generic defenses now

434
00:17:10,060 --> 00:17:15,669
so this talk is<font color="#CCCCCC"> about well even if you</font>

435
00:17:12,819 --> 00:17:16,899
have these generic defenses<font color="#E5E5E5"> that</font><font color="#CCCCCC"> protect</font>

436
00:17:15,670 --> 00:17:21,180
against cache attacks<font color="#CCCCCC"> they're perfectly</font>

437
00:17:16,900 --> 00:17:26,709
isolated<font color="#E5E5E5"> the cache what about the TLB</font>

438
00:17:21,180 --> 00:17:33,340
<font color="#E5E5E5">okay so by a show of hands who knows</font>

439
00:17:26,709 --> 00:17:36,190
<font color="#E5E5E5">what if she'll</font><font color="#CCCCCC"> be is okay great</font>

440
00:17:33,340 --> 00:17:38,800
so the<font color="#E5E5E5"> Tilby is something that caches</font>

441
00:17:36,190 --> 00:17:41,620
page table<font color="#E5E5E5"> lookup so this is the the the</font>

442
00:17:38,800 --> 00:17:45,909
way<font color="#CCCCCC"> that these process isolations are</font>

443
00:17:41,620 --> 00:17:47,669
provided is that<font color="#E5E5E5"> all process have their</font>

444
00:17:45,910 --> 00:17:50,230
own address<font color="#E5E5E5"> space and this is kind of a</font>

445
00:17:47,670 --> 00:17:52,150
but it's of course<font color="#CCCCCC"> it's unreal it's it's</font>

446
00:17:50,230 --> 00:17:54,820
virtual right hence virtual memory<font color="#E5E5E5"> and</font>

447
00:17:52,150 --> 00:17:56,770
this<font color="#E5E5E5"> is this is provided by the CPU by</font>

448
00:17:54,820 --> 00:17:58,330
these systems<font color="#CCCCCC"> called</font><font color="#E5E5E5"> page tables at page</font>

449
00:17:56,770 --> 00:18:00,760
tables<font color="#E5E5E5"> they map</font><font color="#CCCCCC"> to the virtual address</font>

450
00:17:58,330 --> 00:18:03,399
<font color="#E5E5E5">space of each separate process</font><font color="#CCCCCC"> onto the</font>

451
00:18:00,760 --> 00:18:05,650
same physical address so it looks the

452
00:18:03,400 --> 00:18:07,080
<font color="#E5E5E5">same pool of physical RAM</font><font color="#CCCCCC"> and this</font>

453
00:18:05,650 --> 00:18:10,180
provides very strong isolation

454
00:18:07,080 --> 00:18:13,870
<font color="#E5E5E5">properties and other and other and nice</font>

455
00:18:10,180 --> 00:18:14,980
features<font color="#CCCCCC"> but looking up the translation</font>

456
00:18:13,870 --> 00:18:17,649
<font color="#E5E5E5">from which address to physical address</font>

457
00:18:14,980 --> 00:18:19,450
is<font color="#E5E5E5"> very slow relatively speaking so it</font>

458
00:18:17,650 --> 00:18:20,890
would<font color="#E5E5E5"> take</font><font color="#CCCCCC"> four memory</font><font color="#E5E5E5"> accesses before</font>

459
00:18:19,450 --> 00:18:22,720
you can do your<font color="#E5E5E5"> actual memory access</font><font color="#CCCCCC"> and</font>

460
00:18:20,890 --> 00:18:24,220
slow everything down by five times<font color="#E5E5E5"> if</font>

461
00:18:22,720 --> 00:18:27,520
this were to happen every time

462
00:18:24,220 --> 00:18:29,230
fortunately we cache this information in

463
00:18:27,520 --> 00:18:33,330
this structure<font color="#E5E5E5"> called</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> TLB</font><font color="#CCCCCC"> till B</font>

464
00:18:29,230 --> 00:18:33,330
stands for translation lookaside buffer

465
00:18:35,340 --> 00:18:44,850
so<font color="#CCCCCC"> that should</font><font color="#E5E5E5"> make you think well if</font>

466
00:18:42,100 --> 00:18:47,709
the cache is shared<font color="#E5E5E5"> in that's dangerous</font>

467
00:18:44,850 --> 00:18:50,169
<font color="#E5E5E5">if that betrays some activity of what</font>

468
00:18:47,710 --> 00:18:52,390
this process is doing<font color="#E5E5E5"> then what about</font>

469
00:18:50,170 --> 00:18:53,950
the<font color="#CCCCCC"> till B</font><font color="#E5E5E5"> if could it be</font><font color="#CCCCCC"> that the TLB</font>

470
00:18:52,390 --> 00:18:55,660
is<font color="#E5E5E5"> shared and could that betray any</font>

471
00:18:53,950 --> 00:18:57,580
activity of what I'm<font color="#E5E5E5"> doing it's</font><font color="#CCCCCC"> very</font>

472
00:18:55,660 --> 00:18:59,050
different<font color="#E5E5E5"> because cash is</font><font color="#CCCCCC"> all about data</font>

473
00:18:57,580 --> 00:19:01,030
and code<font color="#CCCCCC"> and stuff until B's</font><font color="#E5E5E5"> about</font>

474
00:18:59,050 --> 00:19:06,550
translation so I don't know if it

475
00:19:01,030 --> 00:19:10,720
applies but<font color="#E5E5E5"> what if it did so</font><font color="#CCCCCC"> what we</font>

476
00:19:06,550 --> 00:19:14,139
know about the TLB<font color="#E5E5E5"> is that it has a low</font>

477
00:19:10,720 --> 00:19:17,530
<font color="#CCCCCC">level the l1 is very fast and relatively</font>

478
00:19:14,140 --> 00:19:19,150
<font color="#E5E5E5">small l2 is larger we know that it's</font>

479
00:19:17,530 --> 00:19:20,290
partitioned<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> according to the</font>

480
00:19:19,150 --> 00:19:21,520
documentation<font color="#E5E5E5"> we know that it's</font>

481
00:19:20,290 --> 00:19:27,639
partitioned into these<font color="#E5E5E5"> things called</font>

482
00:19:21,520 --> 00:19:30,010
sets and and ways so sets are just like

483
00:19:27,640 --> 00:19:32,080
you saw with<font color="#CCCCCC"> the memory cache white we</font>

484
00:19:30,010 --> 00:19:34,360
have blue<font color="#E5E5E5"> and red this that</font><font color="#CCCCCC"> could be</font>

485
00:19:32,080 --> 00:19:38,800
separate<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that there's a blue set in</font>

486
00:19:34,360 --> 00:19:41,229
<font color="#E5E5E5">the red set and within a set we have 12</font>

487
00:19:38,800 --> 00:19:42,700
or 16<font color="#E5E5E5"> entries that</font><font color="#CCCCCC"> are just a pool so</font>

488
00:19:41,230 --> 00:19:49,630
there could be anything in<font color="#E5E5E5"> there</font><font color="#CCCCCC"> but</font>

489
00:19:42,700 --> 00:19:51,760
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is a very small set usually so we</font>

490
00:19:49,630 --> 00:19:53,170
know that the TLB<font color="#E5E5E5"> has this partitioning</font>

491
00:19:51,760 --> 00:19:55,660
just like the cache does and<font color="#E5E5E5"> that's very</font>

492
00:19:53,170 --> 00:19:57,070
important for<font color="#E5E5E5"> us if you want to if you</font>

493
00:19:55,660 --> 00:19:58,480
<font color="#E5E5E5">want</font><font color="#CCCCCC"> to access the TLB</font><font color="#E5E5E5"> and if you want</font>

494
00:19:57,070 --> 00:20:00,820
to<font color="#E5E5E5"> try and monitor it cut its contents</font>

495
00:19:58,480 --> 00:20:01,870
we also want to know<font color="#CCCCCC"> that means we</font><font color="#E5E5E5"> have</font>

496
00:20:00,820 --> 00:20:03,189
to know what to<font color="#E5E5E5"> expect</font>

497
00:20:01,870 --> 00:20:05,080
under normal conditions we want<font color="#CCCCCC"> to know</font>

498
00:20:03,190 --> 00:20:06,940
what to<font color="#CCCCCC"> expect if we have exclusive</font>

499
00:20:05,080 --> 00:20:08,980
access<font color="#E5E5E5"> and what is the difference</font><font color="#CCCCCC"> when</font>

500
00:20:06,940 --> 00:20:10,840
someone<font color="#CCCCCC"> else</font><font color="#E5E5E5"> is accessing it as well so</font>

501
00:20:08,980 --> 00:20:15,040
<font color="#CCCCCC">therefore we</font><font color="#E5E5E5"> have to know this structure</font>

502
00:20:10,840 --> 00:20:18,159
<font color="#E5E5E5">of the TLB so what can</font><font color="#CCCCCC"> we how are these</font>

503
00:20:15,040 --> 00:20:20,560
how many<font color="#E5E5E5"> sets are there and what is the</font>

504
00:20:18,160 --> 00:20:22,090
<font color="#CCCCCC">mechanism</font><font color="#E5E5E5"> that decides this translation</font>

505
00:20:20,560 --> 00:20:24,040
goes<font color="#E5E5E5"> into this set in that</font><font color="#CCCCCC"> translation</font>

506
00:20:22,090 --> 00:20:25,810
goes into that set and<font color="#E5E5E5"> then all that</font>

507
00:20:24,040 --> 00:20:30,250
stuff's not<font color="#CCCCCC"> documented so let's try and</font>

508
00:20:25,810 --> 00:20:32,530
<font color="#E5E5E5">find out we use performance counters for</font>

509
00:20:30,250 --> 00:20:35,350
<font color="#E5E5E5">this</font><font color="#CCCCCC"> Intel</font><font color="#E5E5E5"> CPU has many performance</font>

510
00:20:32,530 --> 00:20:37,090
counters that whenever you whenever

511
00:20:35,350 --> 00:20:38,919
something happens<font color="#CCCCCC"> basically an event is</font>

512
00:20:37,090 --> 00:20:41,590
counted it could be and in this case

513
00:20:38,920 --> 00:20:46,140
we're<font color="#CCCCCC"> interested in he'll be hits</font>

514
00:20:41,590 --> 00:20:48,340
she'll be misses l1 misses l2 misses<font color="#E5E5E5"> and</font>

515
00:20:46,140 --> 00:20:50,530
using counters like that we can device

516
00:20:48,340 --> 00:20:53,260
the experiment<font color="#E5E5E5"> that accesses a bunch of</font>

517
00:20:50,530 --> 00:20:55,450
addresses<font color="#CCCCCC"> and then counts</font><font color="#E5E5E5"> did we hit the</font>

518
00:20:53,260 --> 00:20:57,550
l1 did we hit<font color="#E5E5E5"> the l2 if we do it even</font>

519
00:20:55,450 --> 00:21:00,760
<font color="#CCCCCC">more do we</font><font color="#E5E5E5"> continue to hit the l1 or</font>

520
00:20:57,550 --> 00:21:02,440
continue<font color="#E5E5E5"> to hit the l2 or miss it and so</font>

521
00:21:00,760 --> 00:21:04,240
we can<font color="#CCCCCC"> do this experiment that says well</font>

522
00:21:02,440 --> 00:21:06,160
let's just<font color="#E5E5E5"> assume</font><font color="#CCCCCC"> that for the lower</font>

523
00:21:04,240 --> 00:21:08,679
level it has a<font color="#E5E5E5"> linear structure so that</font>

524
00:21:06,160 --> 00:21:12,250
<font color="#E5E5E5">means that page 0 goes to slot 0 page</font>

525
00:21:08,679 --> 00:21:15,190
one goes to<font color="#E5E5E5"> slot 1 and page 16</font><font color="#CCCCCC"> if there</font>

526
00:21:12,250 --> 00:21:17,530
are 16 slots<font color="#E5E5E5"> page 16 goes to</font><font color="#CCCCCC"> 0 again so</font>

527
00:21:15,190 --> 00:21:22,450
it's<font color="#E5E5E5"> this sort of very</font><font color="#CCCCCC"> natural</font><font color="#E5E5E5"> round</font>

528
00:21:17,530 --> 00:21:24,340
circular structure so on that hypothesis

529
00:21:22,450 --> 00:21:26,710
we do<font color="#E5E5E5"> this experiment</font><font color="#CCCCCC"> to find to try and</font>

530
00:21:24,340 --> 00:21:28,030
find out how<font color="#CCCCCC"> many sets</font><font color="#E5E5E5"> there are and</font>

531
00:21:26,710 --> 00:21:30,940
what the set size is so this<font color="#E5E5E5"> is an</font>

532
00:21:28,030 --> 00:21:32,440
experiment where the color indicates the

533
00:21:30,940 --> 00:21:34,929
number of evictions<font color="#CCCCCC"> that we see so</font>

534
00:21:32,440 --> 00:21:36,190
whenever you<font color="#CCCCCC"> see purple</font><font color="#E5E5E5"> or dark there</font>

535
00:21:34,929 --> 00:21:38,530
<font color="#E5E5E5">are no eviction so we</font><font color="#CCCCCC"> can just access</font>

536
00:21:36,190 --> 00:21:41,080
all this we<font color="#E5E5E5"> can access our experiment</font>

537
00:21:38,530 --> 00:21:44,980
all<font color="#E5E5E5"> the time without filling up the TLB</font>

538
00:21:41,080 --> 00:21:47,559
completely but every now and again we we

539
00:21:44,980 --> 00:21:49,510
hit this we do hit<font color="#E5E5E5"> these colors and that</font>

540
00:21:47,559 --> 00:21:53,550
means that<font color="#CCCCCC"> ok now we have an access</font>

541
00:21:49,510 --> 00:21:56,020
pattern that hits a<font color="#E5E5E5"> small number of sets</font>

542
00:21:53,550 --> 00:21:57,730
<font color="#E5E5E5">all</font><font color="#CCCCCC"> the time because apparently</font><font color="#E5E5E5"> we're</font>

543
00:21:56,020 --> 00:21:59,350
seeing addictions so and that tells

544
00:21:57,730 --> 00:22:00,760
something about<font color="#E5E5E5"> what the set size</font><font color="#CCCCCC"> what</font>

545
00:21:59,350 --> 00:22:02,740
the set size is and how many sets there

546
00:22:00,760 --> 00:22:08,050
are so we see from the graph

547
00:22:02,740 --> 00:22:09,760
that we we need at least four elements

548
00:22:08,050 --> 00:22:11,440
to<font color="#E5E5E5"> completely evict</font><font color="#CCCCCC"> to said right</font>

549
00:22:09,760 --> 00:22:13,270
because the<font color="#E5E5E5"> lowest number of elements</font>

550
00:22:11,440 --> 00:22:16,450
<font color="#CCCCCC">that cause evictions is 4 you can see</font>

551
00:22:13,270 --> 00:22:18,429
<font color="#CCCCCC">that with</font><font color="#E5E5E5"> the third bar and the lowest</font>

552
00:22:16,450 --> 00:22:20,559
number of sets<font color="#E5E5E5"> that we have</font><font color="#CCCCCC"> that can</font>

553
00:22:18,429 --> 00:22:22,690
cause this<font color="#E5E5E5"> eviction</font><font color="#CCCCCC"> a 60s</font><font color="#E5E5E5"> that tell us</font>

554
00:22:20,559 --> 00:22:27,100
we have<font color="#E5E5E5"> 16 sets and each of them have</font>

555
00:22:22,690 --> 00:22:28,240
<font color="#E5E5E5">four ways so</font><font color="#CCCCCC"> the set size of</font><font color="#E5E5E5"> four so</font>

556
00:22:27,100 --> 00:22:30,189
it's<font color="#CCCCCC"> just</font><font color="#E5E5E5"> nice to have this current</font>

557
00:22:28,240 --> 00:22:34,300
information<font color="#E5E5E5"> confirmed whether it's</font>

558
00:22:30,190 --> 00:22:35,620
<font color="#CCCCCC">documented or not for the help to TLB we</font>

559
00:22:34,300 --> 00:22:40,149
<font color="#CCCCCC">all set</font><font color="#E5E5E5"> some reverse engineering and we</font>

560
00:22:35,620 --> 00:22:42,580
find out<font color="#E5E5E5"> that it's not linear</font><font color="#CCCCCC"> sometimes</font>

561
00:22:40,150 --> 00:22:44,530
if<font color="#E5E5E5"> we try this one</font><font color="#CCCCCC"> skylake when fairly</font>

562
00:22:42,580 --> 00:22:47,620
recent<font color="#CCCCCC"> into marker architecture and we</font>

563
00:22:44,530 --> 00:22:49,000
find<font color="#E5E5E5"> that this is all about pages right</font>

564
00:22:47,620 --> 00:22:51,159
so we have to discard the lower 12 bits

565
00:22:49,000 --> 00:22:52,809
of the virtual<font color="#E5E5E5"> address and</font><font color="#CCCCCC"> we find</font><font color="#E5E5E5"> that</font>

566
00:22:51,160 --> 00:22:55,750
what determines<font color="#E5E5E5"> the slot</font><font color="#CCCCCC"> number</font><font color="#E5E5E5"> is not</font>

567
00:22:52,809 --> 00:22:57,520
simply as the lowest<font color="#E5E5E5"> bits but it's the</font>

568
00:22:55,750 --> 00:23:00,340
lowest<font color="#E5E5E5"> 7 bits and in the lowest 7 bits</font>

569
00:22:57,520 --> 00:23:03,970
<font color="#E5E5E5">above that drawer together and that</font>

570
00:23:00,340 --> 00:23:05,860
determines the slot number so expressed

571
00:23:03,970 --> 00:23:08,050
as a matrix multiplication<font color="#CCCCCC"> this</font><font color="#E5E5E5"> would be</font>

572
00:23:05,860 --> 00:23:09,550
the matrix<font color="#E5E5E5"> for transforming a virtual</font>

573
00:23:08,050 --> 00:23:12,730
address<font color="#E5E5E5"> or a virtual page number I</font>

574
00:23:09,550 --> 00:23:15,600
should<font color="#CCCCCC"> say</font><font color="#E5E5E5"> to to a slot</font><font color="#CCCCCC"> number to a</font>

575
00:23:12,730 --> 00:23:20,140
hundred<font color="#E5E5E5"> twenty eight to a slot</font><font color="#CCCCCC"> number of</font>

576
00:23:15,600 --> 00:23:22,030
<font color="#CCCCCC">128 a maximum of</font><font color="#E5E5E5"> seven bits for board</font>

577
00:23:20,140 --> 00:23:24,130
<font color="#E5E5E5">well it's twice eight bits and all this</font>

578
00:23:22,030 --> 00:23:25,899
information<font color="#CCCCCC"> is important because if you</font>

579
00:23:24,130 --> 00:23:27,220
<font color="#E5E5E5">monitor the</font><font color="#CCCCCC"> Tilby</font><font color="#E5E5E5"> you have to be able to</font>

580
00:23:25,900 --> 00:23:28,600
predict<font color="#E5E5E5"> what it's going to do and using</font>

581
00:23:27,220 --> 00:23:31,140
<font color="#CCCCCC">this information we can predict</font><font color="#E5E5E5"> what it</font>

582
00:23:28,600 --> 00:23:32,980
does if we're using it<font color="#E5E5E5"> exclusively and</font>

583
00:23:31,140 --> 00:23:34,660
therefore we can see the difference when

584
00:23:32,980 --> 00:23:44,950
<font color="#E5E5E5">someone</font><font color="#CCCCCC"> else is using</font><font color="#E5E5E5"> the TLB as well</font>

585
00:23:34,660 --> 00:23:47,559
<font color="#E5E5E5">because that's what</font><font color="#CCCCCC"> we want to do so now</font>

586
00:23:44,950 --> 00:23:51,100
that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know the structure</font><font color="#E5E5E5"> let's see if</font>

587
00:23:47,559 --> 00:23:52,540
we can see what's<font color="#E5E5E5"> happening whether we</font>

588
00:23:51,100 --> 00:23:55,209
get hits<font color="#CCCCCC"> from</font><font color="#E5E5E5"> misses using only the</font>

589
00:23:52,540 --> 00:23:57,610
latency that's really important<font color="#CCCCCC"> oh I'm</font>

590
00:23:55,210 --> 00:23:59,290
<font color="#CCCCCC">skipped slide sorry</font><font color="#E5E5E5"> so let's see if</font>

591
00:23:57,610 --> 00:24:00,969
these teal<font color="#CCCCCC"> B's are shared or not so</font>

592
00:23:59,290 --> 00:24:02,590
let's look first<font color="#CCCCCC"> we do this experiment</font>

593
00:24:00,970 --> 00:24:05,770
<font color="#CCCCCC">and there's actually this experiment</font>

594
00:24:02,590 --> 00:24:10,059
where we access all numb all possible

595
00:24:05,770 --> 00:24:11,950
slots<font color="#E5E5E5"> 0</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> 16 on one CPU thread and 0 to</font>

596
00:24:10,059 --> 00:24:13,330
16 threads<font color="#E5E5E5"> on another different CPU</font>

597
00:24:11,950 --> 00:24:15,640
thread and count how<font color="#CCCCCC"> many evictions we</font>

598
00:24:13,330 --> 00:24:16,178
see and if<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Tilby is shared we should</font>

599
00:24:15,640 --> 00:24:18,820
see if

600
00:24:16,179 --> 00:24:21,159
depending on<font color="#E5E5E5"> who's accessing what and as</font>

601
00:24:18,820 --> 00:24:24,639
you can see<font color="#E5E5E5"> with a detail be this this</font>

602
00:24:21,159 --> 00:24:27,070
l1<font color="#E5E5E5"> detail</font><font color="#CCCCCC"> B we do get the evictions that</font>

603
00:24:24,639 --> 00:24:28,658
<font color="#CCCCCC">we're expecting whenever we access slot</font>

604
00:24:27,070 --> 00:24:30,428
<font color="#CCCCCC">zero on</font><font color="#E5E5E5"> one thread SL 0 on the other</font>

605
00:24:28,659 --> 00:24:32,559
<font color="#E5E5E5">thread receive Ixion's but not in other</font>

606
00:24:30,429 --> 00:24:34,799
combination so<font color="#CCCCCC"> zero is shared with the</font>

607
00:24:32,559 --> 00:24:37,928
<font color="#CCCCCC">zero one</font><font color="#E5E5E5"> is shared with one and so</font><font color="#CCCCCC"> on</font>

608
00:24:34,799 --> 00:24:39,158
not so for the ITIL<font color="#E5E5E5"> B so we find that</font>

609
00:24:37,929 --> 00:24:41,169
the ITIL<font color="#E5E5E5"> B which towards these</font>

610
00:24:39,159 --> 00:24:43,899
instruction actresses is partitioned

611
00:24:41,169 --> 00:24:47,200
<font color="#CCCCCC">between these two threads</font><font color="#E5E5E5"> so it's not</font>

612
00:24:43,899 --> 00:24:48,699
not shared so we cannot see<font color="#E5E5E5"> any code</font>

613
00:24:47,200 --> 00:24:50,320
activity from the other thread which<font color="#CCCCCC"> is</font>

614
00:24:48,700 --> 00:24:53,289
a shame<font color="#E5E5E5"> because that's a very</font><font color="#CCCCCC"> powerful</font>

615
00:24:50,320 --> 00:24:55,029
source<font color="#E5E5E5"> of information within the l2 TLB</font>

616
00:24:53,289 --> 00:24:57,369
we also find<font color="#E5E5E5"> that there is</font><font color="#CCCCCC"> that it is</font>

617
00:24:55,029 --> 00:24:59,499
shared but interestingly the slots do

618
00:24:57,369 --> 00:25:03,158
not align so slot number<font color="#CCCCCC"> zero on</font><font color="#E5E5E5"> one</font>

619
00:24:59,499 --> 00:25:05,340
thread<font color="#CCCCCC"> is shared with stalled 64 or on</font>

620
00:25:03,159 --> 00:25:07,600
<font color="#CCCCCC">another thread</font><font color="#E5E5E5"> so that tells us that</font>

621
00:25:05,340 --> 00:25:09,639
probably<font color="#CCCCCC"> in</font><font color="#E5E5E5"> this hashing function that</font>

622
00:25:07,600 --> 00:25:11,019
determines the<font color="#E5E5E5"> virtual address that goes</font>

623
00:25:09,639 --> 00:25:13,959
<font color="#E5E5E5">to a</font><font color="#CCCCCC"> particular slot number</font><font color="#E5E5E5"> there's</font>

624
00:25:11,019 --> 00:25:15,669
probably like an extra bit of

625
00:25:13,960 --> 00:25:17,230
<font color="#CCCCCC">information in there like the thread ID</font>

626
00:25:15,669 --> 00:25:19,299
or something<font color="#CCCCCC"> like that and maybe this</font><font color="#E5E5E5"> is</font>

627
00:25:17,230 --> 00:25:20,799
<font color="#CCCCCC">just speculation but maybe that causes</font>

628
00:25:19,299 --> 00:25:22,299
that<font color="#E5E5E5"> Tilby users to be smoothed out</font>

629
00:25:20,799 --> 00:25:24,580
between<font color="#E5E5E5"> threads maybe it causes</font><font color="#CCCCCC"> less</font>

630
00:25:22,299 --> 00:25:34,299
contention<font color="#E5E5E5"> there ways just to guess but</font>

631
00:25:24,580 --> 00:25:35,830
there has to be some reason<font color="#CCCCCC"> for there is</font>

632
00:25:34,299 --> 00:25:36,850
a little a little<font color="#E5E5E5"> summary of all these</font>

633
00:25:35,830 --> 00:25:38,860
<font color="#E5E5E5">properties of the tibia that we</font>

634
00:25:36,850 --> 00:25:40,539
<font color="#CCCCCC">reverse-engineer donor is a function of</font>

635
00:25:38,860 --> 00:25:44,740
different<font color="#E5E5E5"> looking at different and</font>

636
00:25:40,539 --> 00:25:46,269
microarchitectures so what we see I

637
00:25:44,740 --> 00:25:47,679
think<font color="#E5E5E5"> the most</font><font color="#CCCCCC"> interesting thing is what</font>

638
00:25:46,269 --> 00:25:51,879
is<font color="#E5E5E5"> the hashing function that's for the</font>

639
00:25:47,679 --> 00:25:53,619
l1 TLB is linear everywhere detail<font color="#CCCCCC"> B is</font>

640
00:25:51,879 --> 00:25:58,299
shared everywhere<font color="#E5E5E5"> the ITIL B is shared</font>

641
00:25:53,619 --> 00:26:00,369
<font color="#E5E5E5">nowhere and the l2</font><font color="#CCCCCC"> till B has a huge</font>

642
00:25:58,299 --> 00:26:04,918
number<font color="#E5E5E5"> of sets as you</font><font color="#CCCCCC"> know skylake has</font>

643
00:26:00,369 --> 00:26:07,570
128 sets of<font color="#CCCCCC"> 12 of</font><font color="#E5E5E5"> size 12 each which is</font>

644
00:26:04,919 --> 00:26:13,600
1536 entries which is which<font color="#E5E5E5"> is massive I</font>

645
00:26:07,570 --> 00:26:15,039
think<font color="#E5E5E5"> and these strange I think kind of</font>

646
00:26:13,600 --> 00:26:17,259
<font color="#E5E5E5">strange hashing functions that they use</font>

647
00:26:15,039 --> 00:26:18,970
they<font color="#E5E5E5"> started using since I think</font><font color="#CCCCCC"> since</font>

648
00:26:17,259 --> 00:26:20,350
<font color="#CCCCCC">karlik</font><font color="#E5E5E5"> so I think that's kind of</font>

649
00:26:18,970 --> 00:26:28,090
<font color="#E5E5E5">interesting information to know that</font>

650
00:26:20,350 --> 00:26:29,110
here<font color="#CCCCCC"> that that's not documented so now</font>

651
00:26:28,090 --> 00:26:30,370
that we<font color="#E5E5E5"> have the structure</font>

652
00:26:29,110 --> 00:26:31,479
we can't use performance counters if

653
00:26:30,370 --> 00:26:34,928
we're an attacker<font color="#E5E5E5"> because that's</font>

654
00:26:31,480 --> 00:26:38,230
privileged<font color="#E5E5E5"> and too slow</font><font color="#CCCCCC"> so can we tell</font>

655
00:26:34,929 --> 00:26:41,230
the<font color="#E5E5E5"> difference</font><font color="#CCCCCC"> between accessing l1 and</font>

656
00:26:38,230 --> 00:26:42,460
l2<font color="#E5E5E5"> missing l1 l2 using only latency it</font>

657
00:26:41,230 --> 00:26:46,360
turns out that we can<font color="#CCCCCC"> severe in the</font>

658
00:26:42,460 --> 00:26:50,080
histogram<font color="#CCCCCC"> of l1 hits in blue and l1</font>

659
00:26:46,360 --> 00:26:53,260
misses and<font color="#E5E5E5"> L 2 hits in orange and alpha</font>

660
00:26:50,080 --> 00:26:54,280
l2 misses<font color="#E5E5E5"> in in green so you can see</font>

661
00:26:53,260 --> 00:26:56,980
there's a big<font color="#E5E5E5"> difference there</font>

662
00:26:54,280 --> 00:26:58,990
the thing with green<font color="#E5E5E5"> is that</font><font color="#CCCCCC"> we have</font><font color="#E5E5E5"> no</font>

663
00:26:56,980 --> 00:27:02,950
<font color="#CCCCCC">Tilby</font><font color="#E5E5E5"> entry so we</font><font color="#CCCCCC"> have to do a page</font>

664
00:26:58,990 --> 00:27:04,330
table walk and this<font color="#CCCCCC"> patient will walk it</font>

665
00:27:02,950 --> 00:27:08,110
still goes still stays<font color="#E5E5E5"> in the cache</font>

666
00:27:04,330 --> 00:27:09,970
<font color="#E5E5E5">because all these page page table cache</font>

667
00:27:08,110 --> 00:27:12,040
lines will be will<font color="#CCCCCC"> be</font><font color="#E5E5E5"> cached still so we</font>

668
00:27:09,970 --> 00:27:15,340
have but<font color="#E5E5E5"> just a really</font><font color="#CCCCCC"> brilliant</font><font color="#E5E5E5"> figure</font>

669
00:27:12,040 --> 00:27:16,960
<font color="#E5E5E5">to</font><font color="#CCCCCC"> ram so but we do have</font><font color="#E5E5E5"> to do this walk</font>

670
00:27:15,340 --> 00:27:18,790
going<font color="#E5E5E5"> well here's the first entry</font><font color="#CCCCCC"> a</font>

671
00:27:16,960 --> 00:27:24,280
second<font color="#E5E5E5"> your third entry and do</font><font color="#CCCCCC"> that'll</font>

672
00:27:18,790 --> 00:27:25,899
<font color="#E5E5E5">just take some time to to assemble</font><font color="#CCCCCC"> ok</font>

673
00:27:24,280 --> 00:27:29,490
let's try and use<font color="#E5E5E5"> this knowledge to</font>

674
00:27:25,900 --> 00:27:31,750
attack this not<font color="#E5E5E5"> side-channel safe</font>

675
00:27:29,490 --> 00:27:33,340
<font color="#E5E5E5">function that we found in</font><font color="#CCCCCC"> Lib G clip</font>

676
00:27:31,750 --> 00:27:36,960
just<font color="#E5E5E5"> as an example</font><font color="#CCCCCC"> of just just to show</font>

677
00:27:33,340 --> 00:27:40,870
can we use the TLB for<font color="#E5E5E5"> stunts like this</font>

678
00:27:36,960 --> 00:27:44,080
<font color="#E5E5E5">so again we see</font><font color="#CCCCCC"> that the secret value</font><font color="#E5E5E5"> of</font>

679
00:27:40,870 --> 00:27:46,510
the scalar depends determines the the

680
00:27:44,080 --> 00:27:47,949
control flow path so<font color="#E5E5E5"> only if it's</font><font color="#CCCCCC"> 1 we</font>

681
00:27:46,510 --> 00:27:50,620
do<font color="#E5E5E5"> this addition otherwise we do not do</font>

682
00:27:47,950 --> 00:27:52,270
this addition<font color="#CCCCCC"> and we want to try and</font>

683
00:27:50,620 --> 00:27:53,590
<font color="#CCCCCC">tell the difference between one case and</font>

684
00:27:52,270 --> 00:27:56,200
the other case between the<font color="#E5E5E5"> scalar being</font>

685
00:27:53,590 --> 00:27:57,879
<font color="#CCCCCC">0 or 1</font><font color="#E5E5E5"> only using these data accesses</font>

686
00:27:56,200 --> 00:28:01,270
because we don't see any code<font color="#CCCCCC"> X's</font>

687
00:27:57,880 --> 00:28:04,000
because<font color="#E5E5E5"> the TLB is not shared the</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> TLB</font>

688
00:28:01,270 --> 00:28:05,950
is not sure so can we do<font color="#CCCCCC"> this well I</font>

689
00:28:04,000 --> 00:28:08,290
don't know<font color="#E5E5E5"> let's look at the let's</font>

690
00:28:05,950 --> 00:28:11,140
simulate<font color="#E5E5E5"> this in just like</font><font color="#CCCCCC"> we did for</font>

691
00:28:08,290 --> 00:28:13,030
the cache but now we<font color="#E5E5E5"> use we share what</font>

692
00:28:11,140 --> 00:28:16,470
the signal might look<font color="#CCCCCC"> like</font><font color="#E5E5E5"> if we</font><font color="#CCCCCC"> view it</font>

693
00:28:13,030 --> 00:28:16,470
<font color="#E5E5E5">through the TLB instead of the cache</font>

694
00:28:17,400 --> 00:28:22,929
<font color="#CCCCCC">okay so here's a kind of a simulation of</font>

695
00:28:21,370 --> 00:28:24,549
<font color="#E5E5E5">what</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> might look like if</font><font color="#CCCCCC"> we know 16</font>

696
00:28:22,929 --> 00:28:26,620
different TLB sets and all these things

697
00:28:24,549 --> 00:28:29,500
are page level granularity says very

698
00:28:26,620 --> 00:28:33,280
very rough spatial resolutions<font color="#E5E5E5"> it's not</font>

699
00:28:29,500 --> 00:28:35,230
great so what we were hoping<font color="#CCCCCC"> for is that</font>

700
00:28:33,280 --> 00:28:36,700
<font color="#E5E5E5">whenever there's a green and blue are</font>

701
00:28:35,230 --> 00:28:38,050
the secret values right the secret

702
00:28:36,700 --> 00:28:39,640
values that you don't know as an attack

703
00:28:38,050 --> 00:28:41,770
<font color="#CCCCCC">want try and find out based only on the</font>

704
00:28:39,640 --> 00:28:43,570
measurements that<font color="#CCCCCC"> you see so what we're</font>

705
00:28:41,770 --> 00:28:46,150
hoping for<font color="#CCCCCC"> is that that one set would be</font>

706
00:28:43,570 --> 00:28:48,100
active<font color="#E5E5E5"> only</font><font color="#CCCCCC"> for green</font><font color="#E5E5E5"> and a different</font>

707
00:28:46,150 --> 00:28:50,050
<font color="#E5E5E5">set would be active only for blue</font><font color="#CCCCCC"> that</font>

708
00:28:48,100 --> 00:28:53,080
we<font color="#E5E5E5"> don't see that we only every single</font>

709
00:28:50,050 --> 00:28:55,960
set is always<font color="#E5E5E5"> is active all the time</font><font color="#CCCCCC"> or</font>

710
00:28:53,080 --> 00:28:59,770
<font color="#CCCCCC">Never so that makes our job</font><font color="#E5E5E5"> even harder</font>

711
00:28:55,960 --> 00:29:03,340
<font color="#CCCCCC">than</font><font color="#E5E5E5"> it already was what we do find is</font>

712
00:28:59,770 --> 00:29:04,900
that<font color="#CCCCCC"> there is a temporal different</font>

713
00:29:03,340 --> 00:29:07,360
temporal different signal so they say

714
00:29:04,900 --> 00:29:08,740
the<font color="#E5E5E5"> the signal in time is different</font>

715
00:29:07,360 --> 00:29:10,899
depending<font color="#E5E5E5"> on whether we're green or blue</font>

716
00:29:08,740 --> 00:29:12,670
now that's<font color="#E5E5E5"> interesting information so</font>

717
00:29:10,900 --> 00:29:14,050
you<font color="#E5E5E5"> can see that the red rectangles here</font>

718
00:29:12,670 --> 00:29:15,550
show you well there's this<font color="#CCCCCC"> excess</font>

719
00:29:14,050 --> 00:29:17,980
pattern that looks<font color="#E5E5E5"> like this in</font><font color="#CCCCCC"> the</font>

720
00:29:15,550 --> 00:29:20,950
green case and looks different in<font color="#E5E5E5"> the</font>

721
00:29:17,980 --> 00:29:26,800
blue case and that's a detection<font color="#E5E5E5"> that we</font>

722
00:29:20,950 --> 00:29:32,890
might want to do so<font color="#E5E5E5"> this is how this</font>

723
00:29:26,800 --> 00:29:35,080
looks just if we were to collect<font color="#E5E5E5"> this</font>

724
00:29:32,890 --> 00:29:37,270
trace<font color="#E5E5E5"> this how would</font><font color="#CCCCCC"> look like we see</font>

725
00:29:35,080 --> 00:29:41,139
and<font color="#E5E5E5"> this is very very coarse I will only</font>

726
00:29:37,270 --> 00:29:45,160
<font color="#E5E5E5">have 16 different sets and and the</font>

727
00:29:41,140 --> 00:29:48,040
resolution is 4k<font color="#E5E5E5"> so yeah it you can kind</font>

728
00:29:45,160 --> 00:29:50,500
of see a difference<font color="#E5E5E5"> but it's not it</font>

729
00:29:48,040 --> 00:29:51,820
<font color="#CCCCCC">doesn't look great so</font><font color="#E5E5E5"> we see that we're</font>

730
00:29:50,500 --> 00:29:54,100
<font color="#CCCCCC">trying to sting which the blue</font><font color="#E5E5E5"> case from</font>

731
00:29:51,820 --> 00:29:57,040
the green<font color="#E5E5E5"> case but</font><font color="#CCCCCC"> what I'm saying here</font>

732
00:29:54,100 --> 00:30:02,080
is<font color="#CCCCCC"> sort of a lot</font><font color="#E5E5E5"> of noisy stuff in the</font>

733
00:29:57,040 --> 00:30:03,820
same sets all<font color="#E5E5E5"> the time so that looks</font>

734
00:30:02,080 --> 00:30:12,939
like<font color="#E5E5E5"> it would be hard to</font><font color="#CCCCCC"> analyze but</font><font color="#E5E5E5"> at</font>

735
00:30:03,820 --> 00:30:15,750
least we're seeing something so what we

736
00:30:12,940 --> 00:30:19,750
try to do is and we<font color="#CCCCCC"> monitor a single</font>

737
00:30:15,750 --> 00:30:21,580
Tilby set and use<font color="#CCCCCC"> information</font><font color="#E5E5E5"> that</font>

738
00:30:19,750 --> 00:30:23,380
changes<font color="#E5E5E5"> in time instead of in space will</font>

739
00:30:21,580 --> 00:30:25,149
be much<font color="#CCCCCC"> easier to just say one or two</font>

740
00:30:23,380 --> 00:30:26,470
<font color="#E5E5E5">sets</font><font color="#CCCCCC"> and see</font><font color="#E5E5E5"> whenever I see something</font>

741
00:30:25,150 --> 00:30:27,760
here<font color="#E5E5E5"> it must be a one</font><font color="#CCCCCC"> wait we never</font><font color="#E5E5E5"> see</font>

742
00:30:26,470 --> 00:30:29,860
<font color="#E5E5E5">something here must be a zero bit or</font>

743
00:30:27,760 --> 00:30:31,240
something<font color="#CCCCCC"> like that</font><font color="#E5E5E5"> but we can't do that</font>

744
00:30:29,860 --> 00:30:33,010
because<font color="#CCCCCC"> that</font><font color="#E5E5E5"> distinction</font><font color="#CCCCCC"> doesn't exist</font>

745
00:30:31,240 --> 00:30:34,420
<font color="#CCCCCC">there's no</font><font color="#E5E5E5"> spatial separation so that</font>

746
00:30:33,010 --> 00:30:36,520
<font color="#CCCCCC">makes it a little bit harder than the</font>

747
00:30:34,420 --> 00:30:37,810
<font color="#E5E5E5">usual cache attack because usually you</font>

748
00:30:36,520 --> 00:30:42,010
can't find two<font color="#E5E5E5"> different cache lines</font>

749
00:30:37,810 --> 00:30:44,050
that mean this so what we try to do is

750
00:30:42,010 --> 00:30:46,330
we use this<font color="#E5E5E5"> machine learning algorithm</font>

751
00:30:44,050 --> 00:30:49,030
<font color="#E5E5E5">oh yeah if you were at the keynote</font>

752
00:30:46,330 --> 00:30:51,260
yesterday you<font color="#E5E5E5"> hear Jeff</font><font color="#CCCCCC"> must say kind of</font>

753
00:30:49,030 --> 00:30:53,930
felt to<font color="#E5E5E5"> me like it was a bit marshy</font>

754
00:30:51,260 --> 00:30:55,460
yeah we use all this advanced<font color="#CCCCCC"> technology</font>

755
00:30:53,930 --> 00:30:57,140
that we developed we use them mostly for

756
00:30:55,460 --> 00:31:00,080
offensive purposes<font color="#E5E5E5"> like machine</font><font color="#CCCCCC"> learning</font>

757
00:30:57,140 --> 00:31:01,970
and stuff so I<font color="#E5E5E5"> don't want to say I'm</font>

758
00:31:00,080 --> 00:31:05,210
part of<font color="#E5E5E5"> the problem</font><font color="#CCCCCC"> but we use</font><font color="#E5E5E5"> machine</font>

759
00:31:01,970 --> 00:31:07,430
learning<font color="#CCCCCC"> for offensive purposes so we</font>

760
00:31:05,210 --> 00:31:11,120
try to we capture this<font color="#E5E5E5"> this is the raw</font>

761
00:31:07,430 --> 00:31:13,520
signal<font color="#E5E5E5"> that we capture for real on on</font>

762
00:31:11,120 --> 00:31:16,699
the spy thread so we access it<font color="#E5E5E5"> till be</font>

763
00:31:13,520 --> 00:31:18,170
set all the time<font color="#E5E5E5"> most of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> time the</font>

764
00:31:16,700 --> 00:31:21,380
latency is<font color="#E5E5E5"> low because that</font><font color="#CCCCCC"> means that</font>

765
00:31:18,170 --> 00:31:23,420
because<font color="#E5E5E5"> our</font><font color="#CCCCCC"> our sets the access</font><font color="#E5E5E5"> that we</font>

766
00:31:21,380 --> 00:31:26,240
do it fits in the set completely fits

767
00:31:23,420 --> 00:31:28,280
perfectly so<font color="#E5E5E5"> it's fast so we know</font><font color="#CCCCCC"> that</font>

768
00:31:26,240 --> 00:31:29,930
whenever the whenever<font color="#E5E5E5"> the latency is</font>

769
00:31:28,280 --> 00:31:30,740
<font color="#E5E5E5">high whenever it's slow it means that</font>

770
00:31:29,930 --> 00:31:33,860
someone else

771
00:31:30,740 --> 00:31:35,840
our victim process needed<font color="#E5E5E5"> to use that</font>

772
00:31:33,860 --> 00:31:38,179
set for something and<font color="#E5E5E5"> that</font><font color="#CCCCCC"> tells us</font>

773
00:31:35,840 --> 00:31:42,409
<font color="#CCCCCC">something about</font><font color="#E5E5E5"> the activity</font><font color="#CCCCCC"> that it's</font>

774
00:31:38,180 --> 00:31:45,200
doing<font color="#E5E5E5"> and we're trying to see what this</font>

775
00:31:42,410 --> 00:31:46,690
activity<font color="#E5E5E5"> as you can see that we there's</font>

776
00:31:45,200 --> 00:31:49,100
no easy<font color="#E5E5E5"> way to make the distinguish</font>

777
00:31:46,690 --> 00:31:52,880
distinguish<font color="#CCCCCC"> situation</font><font color="#E5E5E5"> there's no easy</font>

778
00:31:49,100 --> 00:31:56,629
<font color="#E5E5E5">way</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> distinguish it but there is this</font>

779
00:31:52,880 --> 00:31:59,900
<font color="#E5E5E5">sort of signal that changes in time that</font>

780
00:31:56,630 --> 00:32:01,940
can tell<font color="#CCCCCC"> us a</font><font color="#E5E5E5"> lot more information so if</font>

781
00:31:59,900 --> 00:32:04,550
you look at the<font color="#CCCCCC"> moving average of</font><font color="#E5E5E5"> this</font>

782
00:32:01,940 --> 00:32:06,410
latency<font color="#E5E5E5"> then we can start to see these</font>

783
00:32:04,550 --> 00:32:10,700
differences<font color="#E5E5E5"> we see</font><font color="#CCCCCC"> that the blue which</font>

784
00:32:06,410 --> 00:32:13,600
<font color="#E5E5E5">is a zero key bit we see that the blue</font>

785
00:32:10,700 --> 00:32:16,310
has this very regular spiky pattern<font color="#E5E5E5"> and</font>

786
00:32:13,600 --> 00:32:17,929
that green<font color="#E5E5E5"> looks a little bit Messier</font>

787
00:32:16,310 --> 00:32:19,340
but it's noticeably different from<font color="#E5E5E5"> blue</font>

788
00:32:17,930 --> 00:32:21,860
right so we want to be able<font color="#E5E5E5"> to</font>

789
00:32:19,340 --> 00:32:23,209
distinguish<font color="#E5E5E5"> this so I probably wouldn't</font>

790
00:32:21,860 --> 00:32:25,129
<font color="#CCCCCC">right probably</font><font color="#E5E5E5"> wouldn't write a program</font>

791
00:32:23,210 --> 00:32:26,450
<font color="#CCCCCC">by hand probably</font><font color="#E5E5E5"> couldn't write a</font>

792
00:32:25,130 --> 00:32:28,960
program<font color="#E5E5E5"> by hand that does this</font>

793
00:32:26,450 --> 00:32:32,210
distinguishing and I<font color="#CCCCCC"> didn't want to</font>

794
00:32:28,960 --> 00:32:35,630
so<font color="#E5E5E5"> can we train a classifier that</font><font color="#CCCCCC"> will</font>

795
00:32:32,210 --> 00:32:38,570
automatically classify the<font color="#E5E5E5"> zero secret</font>

796
00:32:35,630 --> 00:32:39,890
or<font color="#E5E5E5"> the green or</font><font color="#CCCCCC"> the one secret given</font>

797
00:32:38,570 --> 00:32:41,120
<font color="#E5E5E5">enough training example because we can</font>

798
00:32:39,890 --> 00:32:42,620
generate all the training<font color="#CCCCCC"> examples that</font>

799
00:32:41,120 --> 00:32:44,030
we want right we assume that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> the</font>

800
00:32:42,620 --> 00:32:45,590
binary<font color="#E5E5E5"> that the victim is running and</font>

801
00:32:44,030 --> 00:32:47,030
<font color="#E5E5E5">that we know the microarchitecture the</font>

802
00:32:45,590 --> 00:32:53,360
victim is running and<font color="#CCCCCC"> that is the</font><font color="#E5E5E5"> only</font>

803
00:32:47,030 --> 00:32:55,310
<font color="#E5E5E5">two things that that that that determine</font>

804
00:32:53,360 --> 00:32:56,929
<font color="#E5E5E5">what the signal will look like so we</font><font color="#CCCCCC"> can</font>

805
00:32:55,310 --> 00:33:00,139
generate<font color="#E5E5E5"> all the training</font><font color="#CCCCCC"> examples of</font>

806
00:32:56,930 --> 00:33:02,750
you want so we use this SVM classifiers

807
00:33:00,140 --> 00:33:04,000
<font color="#CCCCCC">it's called support vector machine for</font>

808
00:33:02,750 --> 00:33:07,780
those of you

809
00:33:04,000 --> 00:33:09,670
we don't know<font color="#E5E5E5"> which works like this so</font>

810
00:33:07,780 --> 00:33:11,290
we<font color="#E5E5E5"> we give it these green training</font>

811
00:33:09,670 --> 00:33:13,900
examples<font color="#E5E5E5"> and these red training examples</font>

812
00:33:11,290 --> 00:33:15,700
and then the<font color="#E5E5E5"> SVM classifier will try and</font>

813
00:33:13,900 --> 00:33:17,680
find this line this big black line<font color="#CCCCCC"> that</font>

814
00:33:15,700 --> 00:33:20,680
separates those two<font color="#E5E5E5"> things so whenever</font>

815
00:33:17,680 --> 00:33:22,780
it says gets<font color="#E5E5E5"> whenever</font><font color="#CCCCCC"> it sees a new</font>

816
00:33:20,680 --> 00:33:24,100
sample<font color="#E5E5E5"> and it that that it doesn't</font><font color="#CCCCCC"> know</font>

817
00:33:22,780 --> 00:33:26,710
what it<font color="#E5E5E5"> is doesn't know whether it's</font>

818
00:33:24,100 --> 00:33:28,560
<font color="#E5E5E5">green or red</font><font color="#CCCCCC"> they'd</font><font color="#E5E5E5"> use that line</font><font color="#CCCCCC"> to</font>

819
00:33:26,710 --> 00:33:32,110
determine well is this a green or a red

820
00:33:28,560 --> 00:33:34,450
sample and this kind<font color="#CCCCCC"> of simplification</font>

821
00:33:32,110 --> 00:33:37,120
<font color="#E5E5E5">because this this graphic just</font><font color="#CCCCCC"> shows a</font>

822
00:33:34,450 --> 00:33:39,790
2d feature space<font color="#CCCCCC"> all</font><font color="#E5E5E5"> of the all of the</font>

823
00:33:37,120 --> 00:33:41,889
<font color="#E5E5E5">points only have an X or a Y property so</font>

824
00:33:39,790 --> 00:33:43,960
we can<font color="#CCCCCC"> plot</font><font color="#E5E5E5"> them very nicely</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> reality</font>

825
00:33:41,890 --> 00:33:46,990
that's<font color="#E5E5E5"> not enough serving in our case</font>

826
00:33:43,960 --> 00:33:49,450
we're going<font color="#CCCCCC"> to use this big big signal</font>

827
00:33:46,990 --> 00:33:50,740
which can be<font color="#CCCCCC"> I</font><font color="#E5E5E5"> know it could</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> a</font>

828
00:33:49,450 --> 00:33:52,240
<font color="#CCCCCC">hundred measurements so we're going</font><font color="#E5E5E5"> to</font>

829
00:33:50,740 --> 00:33:54,310
use a<font color="#E5E5E5"> hundred we're going to give the</font>

830
00:33:52,240 --> 00:33:56,830
<font color="#E5E5E5">pacifier a hundred dimensional space and</font>

831
00:33:54,310 --> 00:33:59,050
you<font color="#CCCCCC"> can I'm</font><font color="#E5E5E5"> going to tell it</font><font color="#CCCCCC"> okay</font>

832
00:33:56,830 --> 00:34:00,100
these are 100 samples<font color="#E5E5E5"> from one case this</font>

833
00:33:59,050 --> 00:34:01,450
is a hundred<font color="#CCCCCC"> samples from a</font><font color="#E5E5E5"> different</font>

834
00:34:00,100 --> 00:34:05,260
case can you please tell the difference

835
00:34:01,450 --> 00:34:08,350
<font color="#E5E5E5">just trying to find this separating line</font>

836
00:34:05,260 --> 00:34:11,260
or plane or<font color="#E5E5E5"> hyperplane in our case to</font>

837
00:34:08,350 --> 00:34:14,679
separate<font color="#CCCCCC"> those</font><font color="#E5E5E5"> two training sets that</font>

838
00:34:11,260 --> 00:34:16,630
that it gets so let's see how well it

839
00:34:14,679 --> 00:34:18,399
<font color="#CCCCCC">does so we see that the after much</font>

840
00:34:16,630 --> 00:34:20,470
experimentation we find that we<font color="#E5E5E5"> can</font>

841
00:34:18,400 --> 00:34:22,630
train an SVM classifier<font color="#E5E5E5"> to tell the</font>

842
00:34:20,469 --> 00:34:24,459
difference<font color="#E5E5E5"> and we want it not just</font><font color="#CCCCCC"> to</font>

843
00:34:22,630 --> 00:34:26,590
say when are you blue and<font color="#CCCCCC"> winner you</font>

844
00:34:24,460 --> 00:34:28,150
agree we want<font color="#E5E5E5"> to say when does blue</font>

845
00:34:26,590 --> 00:34:31,180
<font color="#CCCCCC">start</font><font color="#E5E5E5"> because there could be multiple</font>

846
00:34:28,150 --> 00:34:33,130
<font color="#CCCCCC">blues in in a row and it would be much</font>

847
00:34:31,179 --> 00:34:37,089
<font color="#CCCCCC">nicer if</font><font color="#E5E5E5"> the classifier could tell us</font>

848
00:34:33,130 --> 00:34:39,400
<font color="#E5E5E5">that and we find that it can so we can</font>

849
00:34:37,090 --> 00:34:42,190
it can tell<font color="#CCCCCC"> us reliably</font><font color="#E5E5E5"> when does blue</font>

850
00:34:39,400 --> 00:34:44,880
start is plotted with with<font color="#E5E5E5"> zero</font><font color="#CCCCCC"> when</font>

851
00:34:42,190 --> 00:34:47,050
does green start uh spotted with

852
00:34:44,880 --> 00:34:49,360
<font color="#CCCCCC">one-and-a-half is well nothing's</font>

853
00:34:47,050 --> 00:34:52,090
happening<font color="#E5E5E5"> in it and it gets this gets</font>

854
00:34:49,360 --> 00:34:55,120
this done very<font color="#CCCCCC"> well</font><font color="#E5E5E5"> so we see</font><font color="#CCCCCC"> start of</font>

855
00:34:52,090 --> 00:34:57,490
this first one here<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> putting</font><font color="#CCCCCC"> a that</font>

856
00:34:55,120 --> 00:34:58,990
thing<font color="#E5E5E5"> this first one here is</font><font color="#CCCCCC"> wrong so</font>

857
00:34:57,490 --> 00:35:00,700
it's not the start of blue but all the

858
00:34:58,990 --> 00:35:03,100
other ones<font color="#CCCCCC"> I</font><font color="#E5E5E5"> right so I'm just as an</font>

859
00:35:00,700 --> 00:35:04,750
example<font color="#E5E5E5"> is not completely perfect start</font>

860
00:35:03,100 --> 00:35:06,549
of blue start of blue start of<font color="#CCCCCC"> Green</font>

861
00:35:04,750 --> 00:35:09,040
sort of proof start of blue start of

862
00:35:06,550 --> 00:35:10,960
green sort of blue<font color="#E5E5E5"> and that leads us</font>

863
00:35:09,040 --> 00:35:12,520
directly use then<font color="#E5E5E5"> we apply a peak</font>

864
00:35:10,960 --> 00:35:14,170
detector<font color="#CCCCCC"> that says when is a reserved</font>

865
00:35:12,520 --> 00:35:15,790
<font color="#CCCCCC">bit starting witnesses</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> but starting</font>

866
00:35:14,170 --> 00:35:17,740
when is<font color="#E5E5E5"> a</font><font color="#CCCCCC"> 1-bit starting and that gives</font>

867
00:35:15,790 --> 00:35:19,990
us a bit string that

868
00:35:17,740 --> 00:35:21,399
<font color="#CCCCCC">the</font><font color="#E5E5E5"> core can perfectly correspond</font>

869
00:35:19,990 --> 00:35:27,790
<font color="#CCCCCC">without it perfectly corresponds</font><font color="#E5E5E5"> to our</font>

870
00:35:21,400 --> 00:35:29,200
<font color="#E5E5E5">guess of the secret key</font><font color="#CCCCCC"> that does</font><font color="#E5E5E5"> not</font>

871
00:35:27,790 --> 00:35:30,550
mean we're quite there<font color="#CCCCCC"> yet because there</font>

872
00:35:29,200 --> 00:35:32,500
could be<font color="#E5E5E5"> glitches</font><font color="#CCCCCC"> we do assume that</font><font color="#E5E5E5"> we</font>

873
00:35:30,550 --> 00:35:34,869
<font color="#CCCCCC">can guess</font><font color="#E5E5E5"> that we can verify guesses of</font>

874
00:35:32,500 --> 00:35:36,430
<font color="#E5E5E5">the secret key</font><font color="#CCCCCC"> that means</font><font color="#E5E5E5"> we can do a</font>

875
00:35:34,869 --> 00:35:38,619
<font color="#E5E5E5">little bit of brute force</font><font color="#CCCCCC"> if the guess</font>

876
00:35:36,430 --> 00:35:40,660
is<font color="#E5E5E5"> not perfect and</font><font color="#CCCCCC"> we find</font><font color="#E5E5E5"> that most of</font>

877
00:35:38,619 --> 00:35:42,460
<font color="#E5E5E5">the time we only need a tiny amount of</font>

878
00:35:40,660 --> 00:35:46,210
<font color="#CCCCCC">brute-forcing to get actually get</font><font color="#E5E5E5"> the</font>

879
00:35:42,460 --> 00:35:49,420
full secret key<font color="#E5E5E5"> but how how good is it</font>

880
00:35:46,210 --> 00:35:50,830
so let's see we tried<font color="#CCCCCC"> 500 tiles</font><font color="#E5E5E5"> on these</font>

881
00:35:49,420 --> 00:35:53,050
three different microarchitectures on

882
00:35:50,830 --> 00:35:55,390
<font color="#CCCCCC">the skylight board well and coffee like</font>

883
00:35:53,050 --> 00:35:57,340
we tried<font color="#E5E5E5"> 500 times we find it</font><font color="#CCCCCC"> very high</font>

884
00:35:55,390 --> 00:35:59,230
after<font color="#E5E5E5"> some brute forcing well how</font><font color="#CCCCCC"> many</font>

885
00:35:57,340 --> 00:36:00,820
how many<font color="#E5E5E5"> percent of the time can we</font>

886
00:35:59,230 --> 00:36:03,490
guess<font color="#CCCCCC"> the right</font><font color="#E5E5E5"> key well it's</font><font color="#CCCCCC"> mean</font><font color="#E5E5E5"> over</font>

887
00:36:00,820 --> 00:36:05,230
<font color="#CCCCCC">98% using just a single</font><font color="#E5E5E5"> capture trace</font>

888
00:36:03,490 --> 00:36:08,129
<font color="#E5E5E5">that's quite</font><font color="#CCCCCC"> unusual for</font><font color="#E5E5E5"> a text like</font>

889
00:36:05,230 --> 00:36:12,280
<font color="#E5E5E5">this by the way so using</font><font color="#CCCCCC"> just a single</font>

890
00:36:08,130 --> 00:36:14,740
<font color="#E5E5E5">trace we well first we capture many</font>

891
00:36:12,280 --> 00:36:15,820
traces<font color="#E5E5E5"> for training that takes about the</font>

892
00:36:14,740 --> 00:36:18,189
<font color="#E5E5E5">training takes a minute</font>

893
00:36:15,820 --> 00:36:19,510
then we capture a single<font color="#E5E5E5"> trace in</font><font color="#CCCCCC"> the</font>

894
00:36:18,190 --> 00:36:22,750
attack mode<font color="#E5E5E5"> where we don't know the real</font>

895
00:36:19,510 --> 00:36:24,880
truth and do a small amount<font color="#CCCCCC"> of</font>

896
00:36:22,750 --> 00:36:27,100
<font color="#CCCCCC">brute-forcing and we find</font><font color="#E5E5E5"> that 98% of</font>

897
00:36:24,880 --> 00:36:29,260
<font color="#E5E5E5">the</font><font color="#CCCCCC"> cases or</font><font color="#E5E5E5"> more we can guess the real</font>

898
00:36:27,100 --> 00:36:31,330
secret key after<font color="#E5E5E5"> just a single trace and</font>

899
00:36:29,260 --> 00:36:35,230
it<font color="#CCCCCC"> in total that takes about 17 seconds</font>

900
00:36:31,330 --> 00:36:36,700
from capture time<font color="#E5E5E5"> to including the</font>

901
00:36:35,230 --> 00:36:39,160
classification and including the

902
00:36:36,700 --> 00:36:42,759
<font color="#CCCCCC">brute-forcing</font><font color="#E5E5E5"> in median the median case</font>

903
00:36:39,160 --> 00:36:44,350
that<font color="#CCCCCC"> takes</font><font color="#E5E5E5"> just 17 seconds so you can</font>

904
00:36:42,760 --> 00:36:46,420
see here<font color="#E5E5E5"> that most the time we need</font>

905
00:36:44,350 --> 00:36:48,190
hardly<font color="#E5E5E5"> any brute-forcing at all and in</font>

906
00:36:46,420 --> 00:36:50,170
some cases<font color="#E5E5E5"> that just means like oh it</font>

907
00:36:48,190 --> 00:36:51,580
<font color="#E5E5E5">looks like we get too many zeros here</font>

908
00:36:50,170 --> 00:36:53,140
we'll take<font color="#E5E5E5"> that</font><font color="#CCCCCC"> out we'll put one in</font>

909
00:36:51,580 --> 00:36:54,730
here and<font color="#CCCCCC"> the most time you can guess</font>

910
00:36:53,140 --> 00:36:58,210
it's very very quickly in<font color="#E5E5E5"> less than 32</font>

911
00:36:54,730 --> 00:36:59,920
tries and sometimes we need<font color="#E5E5E5"> many more</font>

912
00:36:58,210 --> 00:37:01,960
tries but then at least eventually we

913
00:36:59,920 --> 00:37:03,970
can guess<font color="#CCCCCC"> it I mean 2 to the 30 in</font><font color="#E5E5E5"> the</font>

914
00:37:01,960 --> 00:37:09,940
worst case is still much<font color="#E5E5E5"> better</font><font color="#CCCCCC"> than 2</font>

915
00:37:03,970 --> 00:37:10,629
to the 256<font color="#E5E5E5"> ok as I've been promising you</font>

916
00:37:09,940 --> 00:37:13,150
all along

917
00:37:10,630 --> 00:37:14,740
can we bypass cache defenses with a

918
00:37:13,150 --> 00:37:17,200
technique<font color="#CCCCCC"> like this and the</font><font color="#E5E5E5"> answer is</font>

919
00:37:14,740 --> 00:37:19,509
yes<font color="#E5E5E5"> so we apply this cache defense</font>

920
00:37:17,200 --> 00:37:21,910
called<font color="#E5E5E5"> Intel</font><font color="#CCCCCC"> Cat Cat</font><font color="#E5E5E5"> the cache</font>

921
00:37:19,510 --> 00:37:24,100
allocation technology so<font color="#E5E5E5"> that if you</font>

922
00:37:21,910 --> 00:37:26,470
remember<font color="#CCCCCC"> is the the feature</font><font color="#E5E5E5"> that</font>

923
00:37:24,100 --> 00:37:27,819
separates cache sets sort of

924
00:37:26,470 --> 00:37:29,560
horizontally right so you can only

925
00:37:27,820 --> 00:37:30,430
access a part of the set<font color="#CCCCCC"> and part</font><font color="#E5E5E5"> of the</font>

926
00:37:29,560 --> 00:37:34,119
set and we

927
00:37:30,430 --> 00:37:36,279
find that if<font color="#CCCCCC"> we separate the spy process</font>

928
00:37:34,119 --> 00:37:37,599
<font color="#CCCCCC">and the victim process using this cat</font>

929
00:37:36,280 --> 00:37:40,510
technology so they can't see<font color="#CCCCCC"> each</font>

930
00:37:37,599 --> 00:37:43,930
<font color="#E5E5E5">other's cache lines we can still with a</font>

931
00:37:40,510 --> 00:37:51,609
very high<font color="#CCCCCC"> success rate of 96%</font><font color="#E5E5E5"> guess the</font>

932
00:37:43,930 --> 00:37:55,890
secret key<font color="#CCCCCC"> on the victim process</font><font color="#E5E5E5"> okay so</font>

933
00:37:51,609 --> 00:37:55,890
a word<font color="#CCCCCC"> about how this work was received</font>

934
00:37:57,720 --> 00:38:05,319
we report this to Intel<font color="#E5E5E5"> and they said</font>

935
00:38:01,750 --> 00:38:07,180
<font color="#CCCCCC">Matt we</font><font color="#E5E5E5"> don't we're necessarily not</font>

936
00:38:05,319 --> 00:38:08,770
impressed basically they said well yeah

937
00:38:07,180 --> 00:38:12,399
you<font color="#CCCCCC"> know what there's already</font><font color="#E5E5E5"> enough</font>

938
00:38:08,770 --> 00:38:13,450
<font color="#E5E5E5">guidance out there about</font><font color="#CCCCCC"> how to write</font>

939
00:38:12,400 --> 00:38:16,869
perfectly safe cryptographic

940
00:38:13,450 --> 00:38:18,460
implementations<font color="#CCCCCC"> and</font><font color="#E5E5E5"> if they were</font>

941
00:38:16,869 --> 00:38:24,160
perfectly<font color="#CCCCCC"> safe it will also be immune to</font>

942
00:38:18,460 --> 00:38:26,920
<font color="#CCCCCC">TL bleed so we we see this as a not a</font>

943
00:38:24,160 --> 00:38:28,660
new side channel attack<font color="#E5E5E5"> this was on done</font>

944
00:38:26,920 --> 00:38:31,569
<font color="#CCCCCC">under hack the hacker one bug bounty</font>

945
00:38:28,660 --> 00:38:34,089
program where for which<font color="#E5E5E5"> side channels</font>

946
00:38:31,569 --> 00:38:38,020
are recently in scope<font color="#E5E5E5"> so we thought</font><font color="#CCCCCC"> okay</font>

947
00:38:34,089 --> 00:38:41,440
we'll give that<font color="#E5E5E5"> a shot</font><font color="#CCCCCC"> and I honestly I</font>

948
00:38:38,020 --> 00:38:43,809
can see both<font color="#CCCCCC"> sides</font><font color="#E5E5E5"> of that it's just not</font>

949
00:38:41,440 --> 00:38:46,000
<font color="#E5E5E5">a browser</font><font color="#CCCCCC"> before</font><font color="#E5E5E5"> okay</font>

950
00:38:43,809 --> 00:38:48,579
<font color="#E5E5E5">OpenBSD</font><font color="#CCCCCC"> disabled</font><font color="#E5E5E5"> hyper threading because</font>

951
00:38:46,000 --> 00:38:50,980
of this<font color="#E5E5E5"> or at least by default on Intel</font>

952
00:38:48,579 --> 00:38:52,720
you know so they committed this couple

953
00:38:50,980 --> 00:38:56,770
months ago disabling<font color="#E5E5E5"> because they could</font>

954
00:38:52,720 --> 00:39:00,098
<font color="#CCCCCC">see this risk</font><font color="#E5E5E5"> and related risks to the</font>

955
00:38:56,770 --> 00:39:02,829
<font color="#CCCCCC">to</font><font color="#E5E5E5"> TLB and pay translation is what made</font>

956
00:39:00,099 --> 00:39:06,730
them<font color="#E5E5E5"> decide to finally disable hyper</font>

957
00:39:02,829 --> 00:39:09,940
threading by default as a result there

958
00:39:06,730 --> 00:39:12,490
was lots of media coverage<font color="#E5E5E5"> so he okay</font>

959
00:39:09,940 --> 00:39:14,290
<font color="#E5E5E5">all right not usually in the business of</font>

960
00:39:12,490 --> 00:39:17,140
making logos for our friends of projects

961
00:39:14,290 --> 00:39:19,150
but<font color="#E5E5E5"> the register was kind</font><font color="#CCCCCC"> enough to</font><font color="#E5E5E5"> make</font>

962
00:39:17,140 --> 00:39:20,410
<font color="#E5E5E5">one appear on the article anyway</font><font color="#CCCCCC"> so we</font>

963
00:39:19,150 --> 00:39:22,480
thought<font color="#CCCCCC"> that was kind of cool now we can</font>

964
00:39:20,410 --> 00:39:24,250
<font color="#CCCCCC">use this logo I thought they did a</font>

965
00:39:22,480 --> 00:39:26,619
really<font color="#CCCCCC"> great job also</font><font color="#E5E5E5"> of capturing well</font>

966
00:39:24,250 --> 00:39:28,900
it's all<font color="#E5E5E5"> about by these two hearts or</font>

967
00:39:26,619 --> 00:39:30,780
the two threads I guess<font color="#CCCCCC"> I think that was</font>

968
00:39:28,900 --> 00:39:34,150
pretty cool

969
00:39:30,780 --> 00:39:36,250
<font color="#E5E5E5">okay that's most what I have to say just</font>

970
00:39:34,150 --> 00:39:39,849
<font color="#E5E5E5">some credits we I did this work together</font>

971
00:39:36,250 --> 00:39:41,349
with<font color="#CCCCCC"> kuvira's IV and professors oh no I</font>

972
00:39:39,849 --> 00:39:44,330
did this work together with professors

973
00:39:41,349 --> 00:39:48,650
covers<font color="#CCCCCC"> Ivy Christianity Frida</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> her</font>

974
00:39:44,330 --> 00:39:50,450
<font color="#CCCCCC">pose some diagrams from</font><font color="#E5E5E5"> this talk</font><font color="#CCCCCC"> were</font>

975
00:39:48,650 --> 00:39:53,360
gratefully taken from other work<font color="#E5E5E5"> flash</font>

976
00:39:50,450 --> 00:40:00,020
and reload prefetch<font color="#E5E5E5"> and drama</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> these</font>

977
00:39:53,360 --> 00:40:03,800
authors<font color="#CCCCCC"> ok so what are the takeaways</font>

978
00:40:00,020 --> 00:40:08,660
that I would like<font color="#E5E5E5"> you to take</font><font color="#CCCCCC"> away from</font>

979
00:40:03,800 --> 00:40:10,670
<font color="#E5E5E5">this talk so outside the cache we can</font>

980
00:40:08,660 --> 00:40:12,879
still do practical reliable and

981
00:40:10,670 --> 00:40:17,690
high-resolution<font color="#E5E5E5"> side channels that have</font>

982
00:40:12,880 --> 00:40:19,280
realistic<font color="#CCCCCC"> security results</font><font color="#E5E5E5"> they even</font>

983
00:40:17,690 --> 00:40:21,950
they bypass<font color="#CCCCCC"> cut the</font><font color="#E5E5E5"> currently now</font>

984
00:40:19,280 --> 00:40:23,480
generic cache<font color="#E5E5E5"> defenses making it extra</font>

985
00:40:21,950 --> 00:40:28,069
hard to rely on both the<font color="#E5E5E5"> perfect</font>

986
00:40:23,480 --> 00:40:34,970
algorithm and a hedge against imperfect

987
00:40:28,070 --> 00:40:37,510
algorithms and so<font color="#E5E5E5"> that's something to to</font>

988
00:40:34,970 --> 00:40:40,250
keep in mind<font color="#E5E5E5"> whenever you make perfectly</font>

989
00:40:37,510 --> 00:40:42,470
if you write algorithms or perfect<font color="#E5E5E5"> cache</font>

990
00:40:40,250 --> 00:40:44,450
defense<font color="#E5E5E5"> there are more side channels out</font>

991
00:40:42,470 --> 00:40:46,339
<font color="#CCCCCC">there like the TLB and probably more</font>

992
00:40:44,450 --> 00:40:47,899
<font color="#E5E5E5">resources</font><font color="#CCCCCC"> that can also be</font><font color="#E5E5E5"> exploited</font>

993
00:40:46,340 --> 00:40:50,900
that you should that shouldn't be

994
00:40:47,900 --> 00:40:54,650
forgotten<font color="#CCCCCC"> so these are our</font><font color="#E5E5E5"> twitter</font>

995
00:40:50,900 --> 00:40:56,200
handles and the group project page<font color="#E5E5E5"> thank</font>

996
00:40:54,650 --> 00:41:03,509
you<font color="#CCCCCC"> all</font><font color="#E5E5E5"> for listening</font>

997
00:40:56,200 --> 00:41:06,038
[Applause]

998
00:41:03,509 --> 00:41:08,849
I'm a little<font color="#CCCCCC"> fast even so we have time</font>

999
00:41:06,039 --> 00:41:08,849
for questions<font color="#E5E5E5"> if you want</font>

1000
00:41:29,130 --> 00:41:34,420
right<font color="#E5E5E5"> okay so the</font><font color="#CCCCCC"> question here</font><font color="#E5E5E5"> is for</font>

1001
00:41:32,410 --> 00:41:36,940
the support vector<font color="#E5E5E5"> machine can you can</font>

1002
00:41:34,420 --> 00:41:39,670
you train on<font color="#CCCCCC"> one configuration</font><font color="#E5E5E5"> then</font>

1003
00:41:36,940 --> 00:41:44,050
transfer that<font color="#E5E5E5"> to a different a</font><font color="#CCCCCC"> different</font>

1004
00:41:39,670 --> 00:41:45,910
environment<font color="#CCCCCC"> I have not tried this I do</font>

1005
00:41:44,050 --> 00:41:47,830
not I do know that<font color="#CCCCCC"> the only</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> things</font>

1006
00:41:45,910 --> 00:41:49,359
<font color="#E5E5E5">that really matter for this for this</font>

1007
00:41:47,830 --> 00:41:50,770
transferring is which<font color="#E5E5E5"> market</font>

1008
00:41:49,359 --> 00:41:52,330
architecture is<font color="#CCCCCC"> the victim running and</font>

1009
00:41:50,770 --> 00:41:57,160
which binary is<font color="#E5E5E5"> the victim running so we</font>

1010
00:41:52,330 --> 00:41:58,750
do assume<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> know that and I</font>

1011
00:41:57,160 --> 00:42:00,098
<font color="#E5E5E5">honestly don't know how well it would</font>

1012
00:41:58,750 --> 00:42:02,109
transfer between<font color="#CCCCCC"> mic architectures I</font>

1013
00:42:00,099 --> 00:42:05,170
would guess<font color="#E5E5E5"> reasonably well as long as</font>

1014
00:42:02,109 --> 00:42:11,650
the<font color="#CCCCCC"> Tilby configuration is is close</font>

1015
00:42:05,170 --> 00:42:12,550
enough but we do<font color="#E5E5E5"> yeah as long as the</font>

1016
00:42:11,650 --> 00:42:31,510
<font color="#E5E5E5">hardware is the same that would</font>

1017
00:42:12,550 --> 00:42:35,050
<font color="#E5E5E5">definitely</font><font color="#CCCCCC"> work right</font><font color="#E5E5E5"> so the</font><font color="#CCCCCC"> question is</font>

1018
00:42:31,510 --> 00:42:37,570
is in<font color="#E5E5E5"> talk had intended to separate</font>

1019
00:42:35,050 --> 00:42:39,460
caches from between processes<font color="#E5E5E5"> or</font><font color="#CCCCCC"> also</font>

1020
00:42:37,570 --> 00:42:41,200
the TLB so no it's<font color="#E5E5E5"> not it's only</font>

1021
00:42:39,460 --> 00:42:45,550
intended<font color="#CCCCCC"> to separate the caches it's not</font>

1022
00:42:41,200 --> 00:42:48,669
a it's actually<font color="#E5E5E5"> a good</font><font color="#CCCCCC"> question because</font>

1023
00:42:45,550 --> 00:42:50,980
<font color="#E5E5E5">the point of cat was not action out for</font>

1024
00:42:48,670 --> 00:42:53,800
security<font color="#CCCCCC"> which but you</font><font color="#E5E5E5"> could think you</font>

1025
00:42:50,980 --> 00:42:55,630
could<font color="#E5E5E5"> abuse it for security so it was</font>

1026
00:42:53,800 --> 00:43:00,430
<font color="#E5E5E5">intended</font><font color="#CCCCCC"> for to get more predictable</font>

1027
00:42:55,630 --> 00:43:02,109
performance<font color="#E5E5E5"> but part of performance of</font>

1028
00:43:00,430 --> 00:43:07,440
<font color="#E5E5E5">course is also the TLB but for some</font>

1029
00:43:02,109 --> 00:43:07,440
reason<font color="#CCCCCC"> that</font><font color="#E5E5E5"> was not considered</font><font color="#CCCCCC"> part</font><font color="#E5E5E5"> of</font>

1030
00:43:07,680 --> 00:43:21,330
the partitioning does it<font color="#CCCCCC"> answer your</font>

1031
00:43:13,390 --> 00:43:27,940
question yes they are<font color="#E5E5E5"> that's why I</font>

1032
00:43:21,330 --> 00:43:30,310
<font color="#E5E5E5">imagine that yes yes that's</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> yes so</font>

1033
00:43:27,940 --> 00:43:31,470
<font color="#E5E5E5">this I'm not I'm</font><font color="#CCCCCC"> not implying</font><font color="#E5E5E5"> we broke</font>

1034
00:43:30,310 --> 00:43:32,790
<font color="#CCCCCC">at</font>

1035
00:43:31,470 --> 00:43:36,390
I'm just saying no no that's<font color="#CCCCCC"> not what I</font>

1036
00:43:32,790 --> 00:43:38,190
meant so<font color="#E5E5E5"> what I</font><font color="#CCCCCC"> just meant is so cat</font>

1037
00:43:36,390 --> 00:43:40,980
<font color="#E5E5E5">only applies to the cash but I just want</font>

1038
00:43:38,190 --> 00:43:42,960
<font color="#E5E5E5">to super clearly demonstrate well even</font>

1039
00:43:40,980 --> 00:43:46,109
if you have this cash defense it would

1040
00:43:42,960 --> 00:43:47,369
defend against cash<font color="#CCCCCC"> touch holes</font><font color="#E5E5E5"> but it</font>

1041
00:43:46,109 --> 00:43:50,819
would not defend against<font color="#E5E5E5"> that she'll</font><font color="#CCCCCC"> be</font>

1042
00:43:47,369 --> 00:44:00,869
attacking that was the part<font color="#E5E5E5"> of the story</font>

1043
00:43:50,820 --> 00:44:04,770
I think<font color="#CCCCCC"> we have time okay the success</font>

1044
00:44:00,869 --> 00:44:08,280
<font color="#E5E5E5">rate bit I was afraid you'd ask that</font><font color="#CCCCCC"> I</font>

1045
00:44:04,770 --> 00:44:13,400
didn't know so<font color="#CCCCCC"> it did indeed</font><font color="#E5E5E5"> go from but</font>

1046
00:44:08,280 --> 00:44:15,900
it went<font color="#E5E5E5"> from</font><font color="#CCCCCC"> 98% to 96% so I thought</font>

1047
00:44:13,400 --> 00:44:18,900
well this still<font color="#E5E5E5"> seems pretty high so I</font>

1048
00:44:15,900 --> 00:44:20,520
didn't investigate that<font color="#CCCCCC"> honestly like I</font>

1049
00:44:18,900 --> 00:44:21,780
<font color="#E5E5E5">can't imagine now</font><font color="#CCCCCC"> that I'm thinking</font>

1050
00:44:20,520 --> 00:44:23,460
<font color="#E5E5E5">about it I can't imagine that the</font>

1051
00:44:21,780 --> 00:44:25,619
behavior would be<font color="#E5E5E5"> sufficiently different</font>

1052
00:44:23,460 --> 00:44:28,500
so because you do have<font color="#E5E5E5"> less cash</font>

1053
00:44:25,619 --> 00:44:31,109
<font color="#CCCCCC">available to you so</font><font color="#E5E5E5"> that might make the</font>

1054
00:44:28,500 --> 00:44:32,369
behavior of the victim process or<font color="#CCCCCC"> the</font>

1055
00:44:31,109 --> 00:44:33,960
<font color="#CCCCCC">spy process for the marriage just</font>

1056
00:44:32,369 --> 00:44:37,109
different enough<font color="#E5E5E5"> maybe it's a little</font><font color="#CCCCCC"> bit</font>

1057
00:44:33,960 --> 00:44:39,450
<font color="#E5E5E5">slower that the signal degrades a little</font>

1058
00:44:37,109 --> 00:44:44,330
bit that's something I could speculate

1059
00:44:39,450 --> 00:44:44,330
this happen thank you

1060
00:44:45,630 --> 00:44:53,070
so maybe one question<font color="#E5E5E5"> about let's say</font>

1061
00:44:49,200 --> 00:44:57,899
other platforms embedded<font color="#E5E5E5"> systems for</font>

1062
00:44:53,070 --> 00:45:00,180
example<font color="#E5E5E5"> arm or risk or whatever what do</font>

1063
00:44:57,900 --> 00:45:02,369
you need in in the<font color="#CCCCCC"> processor or</font>

1064
00:45:00,180 --> 00:45:05,190
structure<font color="#CCCCCC"> or in the</font><font color="#E5E5E5"> system structure to</font>

1065
00:45:02,369 --> 00:45:08,490
make this attack work right<font color="#CCCCCC"> okay the</font>

1066
00:45:05,190 --> 00:45:10,230
question<font color="#CCCCCC"> is are we</font><font color="#E5E5E5"> what about other</font>

1067
00:45:08,490 --> 00:45:14,520
architectures and other other platforms

1068
00:45:10,230 --> 00:45:15,900
are we do we see any possibility for

1069
00:45:14,520 --> 00:45:19,920
<font color="#E5E5E5">working</font><font color="#CCCCCC"> down what do we need for to</font><font color="#E5E5E5"> work</font>

1070
00:45:15,900 --> 00:45:21,180
did I get<font color="#E5E5E5"> that right so what we the two</font>

1071
00:45:19,920 --> 00:45:25,859
things are<font color="#CCCCCC"> necessary for this is</font>

1072
00:45:21,180 --> 00:45:27,359
<font color="#E5E5E5">concurrent access to the to share</font><font color="#CCCCCC"> Tilby</font>

1073
00:45:25,859 --> 00:45:28,529
so the<font color="#E5E5E5"> Tilby has to be shared and it has</font>

1074
00:45:27,359 --> 00:45:30,660
to<font color="#E5E5E5"> be possible for</font><font color="#CCCCCC"> there to be a</font>

1075
00:45:28,530 --> 00:45:35,580
concurrent access<font color="#E5E5E5"> and what that will</font>

1076
00:45:30,660 --> 00:45:36,990
<font color="#CCCCCC">mean is that I</font><font color="#E5E5E5"> don't</font><font color="#CCCCCC"> I don't think there</font>

1077
00:45:35,580 --> 00:45:39,480
<font color="#CCCCCC">are</font><font color="#E5E5E5"> any architectures out there that</font>

1078
00:45:36,990 --> 00:45:42,000
have teal<font color="#E5E5E5"> B's shared between cores</font>

1079
00:45:39,480 --> 00:45:45,070
<font color="#E5E5E5">doesn't make sense to me so I think what</font>

1080
00:45:42,000 --> 00:45:46,870
we what's necessary is for

1081
00:45:45,070 --> 00:45:48,610
<font color="#CCCCCC">they're to</font><font color="#E5E5E5"> be hyper-threading</font><font color="#CCCCCC"> within a</font>

1082
00:45:46,870 --> 00:45:52,480
<font color="#CCCCCC">core so we can have multiple</font><font color="#E5E5E5"> threads of</font>

1083
00:45:48,610 --> 00:45:54,700
execution active in parallel to some

1084
00:45:52,480 --> 00:45:57,940
degree<font color="#CCCCCC"> to a significant degree and that</font>

1085
00:45:54,700 --> 00:46:01,540
the access<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the TLB is shared between</font>

1086
00:45:57,940 --> 00:46:06,280
those execution threads<font color="#E5E5E5"> in that and and</font>

1087
00:46:01,540 --> 00:46:09,850
the<font color="#CCCCCC"> deacon card acts as possible we</font>

1088
00:46:06,280 --> 00:46:13,480
briefly looked<font color="#E5E5E5"> at a new AMD machine for</font>

1089
00:46:09,850 --> 00:46:17,680
this<font color="#CCCCCC"> was a was it again</font><font color="#E5E5E5"> rising</font><font color="#CCCCCC"> i think</font>

1090
00:46:13,480 --> 00:46:20,920
and<font color="#E5E5E5"> to my i couldn't quite get to work</font>

1091
00:46:17,680 --> 00:46:23,830
it seemed<font color="#E5E5E5"> like the TLB and someone told</font>

1092
00:46:20,920 --> 00:46:26,470
me and what<font color="#CCCCCC"> I saw seemed to confirm this</font>

1093
00:46:23,830 --> 00:46:28,240
that the l1 TLB was completely

1094
00:46:26,470 --> 00:46:31,660
associative so there's just<font color="#CCCCCC"> one big</font><font color="#E5E5E5"> pool</font>

1095
00:46:28,240 --> 00:46:34,270
of entries<font color="#CCCCCC"> no sets which doesn't mean</font>

1096
00:46:31,660 --> 00:46:35,740
<font color="#E5E5E5">the attack would be impossible but in</font>

1097
00:46:34,270 --> 00:46:39,820
<font color="#E5E5E5">fact in</font><font color="#CCCCCC"> some sense it's easier because I</font>

1098
00:46:35,740 --> 00:46:42,970
have to pick<font color="#CCCCCC"> a slot</font><font color="#E5E5E5"> but but but the</font>

1099
00:46:39,820 --> 00:46:48,660
accuracy<font color="#E5E5E5"> was was very bad maybe</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> had</font>

1100
00:46:42,970 --> 00:46:51,370
<font color="#CCCCCC">better something</font><font color="#E5E5E5"> to do with it</font><font color="#CCCCCC"> for arm</font><font color="#E5E5E5"> I</font>

1101
00:46:48,660 --> 00:46:52,690
<font color="#E5E5E5">have</font><font color="#CCCCCC"> been</font><font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> find machines with</font>

1102
00:46:51,370 --> 00:46:57,759
hyper-threading and concurrent access

1103
00:46:52,690 --> 00:46:58,990
seems to be very rare<font color="#E5E5E5"> for arm</font><font color="#CCCCCC"> seems to</font>

1104
00:46:57,760 --> 00:47:00,700
be very<font color="#E5E5E5"> rare there there are any</font>

1105
00:46:58,990 --> 00:47:03,640
<font color="#CCCCCC">hyper-threading configurations out there</font>

1106
00:47:00,700 --> 00:47:07,480
<font color="#CCCCCC">I</font><font color="#E5E5E5"> found one which is what's called again</font>

1107
00:47:03,640 --> 00:47:09,129
the<font color="#CCCCCC"> KVM Thunder x2 which has</font><font color="#E5E5E5"> very</font>

1108
00:47:07,480 --> 00:47:17,500
expensive<font color="#E5E5E5"> workstation</font><font color="#CCCCCC"> model</font><font color="#E5E5E5"> so I</font>

1109
00:47:09,130 --> 00:47:20,920
couldn't easily buy it<font color="#E5E5E5"> to test but I am</font>

1110
00:47:17,500 --> 00:47:23,410
waiting<font color="#CCCCCC"> for some time I'm telling you</font>

1111
00:47:20,920 --> 00:47:25,150
someone who can probably arrange for

1112
00:47:23,410 --> 00:47:28,060
borrowed access to a<font color="#CCCCCC"> machine like that</font>

1113
00:47:25,150 --> 00:47:29,230
<font color="#E5E5E5">and</font><font color="#CCCCCC"> a denial</font><font color="#E5E5E5"> toilet at their spark and</font>

1114
00:47:28,060 --> 00:47:31,060
power<font color="#CCCCCC"> platforms which of course have</font>

1115
00:47:29,230 --> 00:47:33,520
highly highly threaded the<font color="#CCCCCC"> CPU</font>

1116
00:47:31,060 --> 00:47:36,360
implementations which on which this may

1117
00:47:33,520 --> 00:47:40,330
be<font color="#E5E5E5"> possible but I haven't tried</font><font color="#CCCCCC"> that out</font>

1118
00:47:36,360 --> 00:47:42,730
and and<font color="#E5E5E5"> talking about let's say software</font>

1119
00:47:40,330 --> 00:47:44,890
countermeasures I mean as I understood

1120
00:47:42,730 --> 00:47:47,260
that the leakage was mostly<font color="#E5E5E5"> on the on</font>

1121
00:47:44,890 --> 00:47:50,410
this data buffer<font color="#CCCCCC"> not on the instruction</font>

1122
00:47:47,260 --> 00:47:55,690
<font color="#E5E5E5">he'll be</font><font color="#CCCCCC"> cache right</font><font color="#E5E5E5"> so if you would</font>

1123
00:47:50,410 --> 00:47:57,910
kind of obscure the data masking<font color="#E5E5E5"> for</font>

1124
00:47:55,690 --> 00:48:00,970
example or yes

1125
00:47:57,910 --> 00:48:02,649
that that would<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> hit</font><font color="#E5E5E5"> right yes</font>

1126
00:48:00,970 --> 00:48:04,569
<font color="#CCCCCC">yes</font><font color="#E5E5E5"> that would works if I understand you</font>

1127
00:48:02,650 --> 00:48:07,599
correctly<font color="#E5E5E5"> you we only observe the data a</font>

1128
00:48:04,569 --> 00:48:11,650
trace of<font color="#E5E5E5"> the data signal</font><font color="#CCCCCC"> and if the data</font>

1129
00:48:07,599 --> 00:48:13,119
if the data trace would<font color="#E5E5E5"> be not depending</font>

1130
00:48:11,650 --> 00:48:15,220
<font color="#E5E5E5">on the secret then it wouldn't work</font><font color="#CCCCCC"> is</font>

1131
00:48:13,119 --> 00:48:17,740
<font color="#E5E5E5">that right yeah</font><font color="#CCCCCC"> so you're right you're</font>

1132
00:48:15,220 --> 00:48:19,209
right about<font color="#E5E5E5"> that</font><font color="#CCCCCC"> that's the new version</font>

1133
00:48:17,740 --> 00:48:22,509
of<font color="#E5E5E5"> this of this code</font><font color="#CCCCCC"> that we take in</font>

1134
00:48:19,210 --> 00:48:25,539
live<font color="#CCCCCC"> decrypt does seem to have such a</font>

1135
00:48:22,510 --> 00:48:27,369
very strong data trace independent

1136
00:48:25,539 --> 00:48:31,420
implementation secret independent data

1137
00:48:27,369 --> 00:48:35,260
presentation but what we argue in<font color="#CCCCCC"> this</font>

1138
00:48:31,420 --> 00:48:38,049
project<font color="#E5E5E5"> is that for one it's</font><font color="#CCCCCC"> very hard</font>

1139
00:48:35,260 --> 00:48:39,760
<font color="#E5E5E5">to make these implementations perfectly</font>

1140
00:48:38,049 --> 00:48:41,349
<font color="#E5E5E5">sized channel safe because there could</font>

1141
00:48:39,760 --> 00:48:43,569
be artifacts in your compiler or your

1142
00:48:41,349 --> 00:48:44,890
CPU architecture that<font color="#E5E5E5"> you didn't foresee</font>

1143
00:48:43,569 --> 00:48:46,359
or didn't<font color="#CCCCCC"> even know who didn't know</font>

1144
00:48:44,890 --> 00:48:49,259
about<font color="#E5E5E5"> and then same thing</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> your</font>

1145
00:48:46,359 --> 00:48:52,150
future revisions of compilers and<font color="#E5E5E5"> CPS</font>

1146
00:48:49,260 --> 00:48:55,240
and therefore it<font color="#E5E5E5"> would</font><font color="#CCCCCC"> be nice to have</font>

1147
00:48:52,150 --> 00:48:56,859
generic<font color="#E5E5E5"> cache defenses but then this is</font>

1148
00:48:55,240 --> 00:49:00,339
<font color="#CCCCCC">an example of how these generic cache</font>

1149
00:48:56,859 --> 00:49:01,960
defenses<font color="#CCCCCC"> could</font><font color="#E5E5E5"> be bypassed so you write</font>

1150
00:49:00,339 --> 00:49:04,960
<font color="#E5E5E5">that if the algorithm is perfect and</font>

1151
00:49:01,960 --> 00:49:07,240
<font color="#E5E5E5">this won't work but it's also devilishly</font>

1152
00:49:04,960 --> 00:49:10,210
hard to make perfect logarithms

1153
00:49:07,240 --> 00:49:13,288
I would I<font color="#CCCCCC"> would agree to that thank you</font>

1154
00:49:10,210 --> 00:49:13,289
<font color="#CCCCCC">thank</font><font color="#E5E5E5"> thank you</font>

1155
00:49:19,410 --> 00:49:27,328
I would it be reasonable to just say

1156
00:49:24,269 --> 00:49:29,939
that if you use large or a huge page for

1157
00:49:27,329 --> 00:49:32,160
any<font color="#E5E5E5"> compute sensitive crypto sensitive</font>

1158
00:49:29,940 --> 00:49:37,470
processes that<font color="#E5E5E5"> that kind of obviates the</font>

1159
00:49:32,160 --> 00:49:39,538
<font color="#E5E5E5">whole TLB part of the problem so the</font>

1160
00:49:37,470 --> 00:49:43,078
question is what would<font color="#CCCCCC"> the effect be on</font>

1161
00:49:39,539 --> 00:49:44,940
large pages in<font color="#E5E5E5"> the in the processor is</font>

1162
00:49:43,079 --> 00:49:48,869
that is right<font color="#E5E5E5"> well they're all gonna be</font>

1163
00:49:44,940 --> 00:49:51,839
<font color="#E5E5E5">in the same virtual page yeah yeah yeah</font>

1164
00:49:48,869 --> 00:49:54,960
I need<font color="#E5E5E5"> so that's true</font><font color="#CCCCCC"> um I haven't tried</font>

1165
00:49:51,839 --> 00:49:56,880
this<font color="#E5E5E5"> but I would</font><font color="#CCCCCC"> expect that what we see</font>

1166
00:49:54,960 --> 00:49:58,380
is that<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> signals that you you</font>

1167
00:49:56,880 --> 00:50:00,869
know saw in their chart<font color="#CCCCCC"> you'll probably</font>

1168
00:49:58,380 --> 00:50:02,670
see them all added up<font color="#CCCCCC"> I guess</font><font color="#E5E5E5"> because</font>

1169
00:50:00,869 --> 00:50:05,369
<font color="#CCCCCC">you</font><font color="#E5E5E5"> see all this activity all the time I</font>

1170
00:50:02,670 --> 00:50:08,430
<font color="#E5E5E5">mean</font><font color="#CCCCCC"> I'll guess it would</font><font color="#E5E5E5"> make it so</font>

1171
00:50:05,369 --> 00:50:10,170
noisy<font color="#CCCCCC"> I I guess it would be very noisy</font>

1172
00:50:08,430 --> 00:50:11,609
<font color="#CCCCCC">but I don't know if you could make she</font>

1173
00:50:10,170 --> 00:50:13,650
could still make it distinguishing some

1174
00:50:11,609 --> 00:50:15,450
of the signal is in there so I was kind

1175
00:50:13,650 --> 00:50:16,740
of expected would be<font color="#E5E5E5"> it would still work</font>

1176
00:50:15,450 --> 00:50:18,509
<font color="#E5E5E5">they would probably be</font><font color="#CCCCCC"> a bit</font><font color="#E5E5E5"> harder to</font>

1177
00:50:16,740 --> 00:50:20,129
analyze<font color="#E5E5E5"> but you're just not gonna have</font>

1178
00:50:18,509 --> 00:50:22,380
any<font color="#E5E5E5"> more till the</font><font color="#CCCCCC"> misses for anything</font>

1179
00:50:20,130 --> 00:50:26,519
<font color="#CCCCCC">related to</font><font color="#E5E5E5"> that process if it's gonna be</font>

1180
00:50:22,380 --> 00:50:28,470
all<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> same</font><font color="#E5E5E5"> large page huge page I'm</font>

1181
00:50:26,519 --> 00:50:30,899
sorry I didn't<font color="#E5E5E5"> catch that for you if</font>

1182
00:50:28,470 --> 00:50:32,038
that sensitive process is all running in

1183
00:50:30,900 --> 00:50:35,039
the same huge page you're not gonna have

1184
00:50:32,039 --> 00:50:39,890
TLB misses for<font color="#E5E5E5"> that one</font><font color="#CCCCCC"> anymore probably</font>

1185
00:50:35,039 --> 00:50:42,869
<font color="#E5E5E5">or you're gonna have them all at once if</font>

1186
00:50:39,890 --> 00:50:45,269
you're not gonna have small pages<font color="#E5E5E5"> level</font>

1187
00:50:42,869 --> 00:50:47,430
granularity introspection into<font color="#E5E5E5"> that</font>

1188
00:50:45,269 --> 00:50:52,348
process<font color="#E5E5E5"> it's either gonna</font><font color="#CCCCCC"> be there or</font>

1189
00:50:47,430 --> 00:50:56,220
not<font color="#E5E5E5"> for the whole</font><font color="#CCCCCC"> execution of it anyway</font>

1190
00:50:52,349 --> 00:50:58,650
<font color="#E5E5E5">for future research</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> afraid I feel</font>

1191
00:50:56,220 --> 00:51:14,368
<font color="#CCCCCC">like maybe we</font><font color="#E5E5E5"> could talk about the soft</font>

1192
00:50:58,650 --> 00:51:16,980
words thank you yeah<font color="#CCCCCC"> do you have a</font>

1193
00:51:14,369 --> 00:51:20,640
server where you<font color="#E5E5E5"> tried yes that's right</font>

1194
00:51:16,980 --> 00:51:22,920
yes<font color="#E5E5E5"> okay did you try doing this attack</font>

1195
00:51:20,640 --> 00:51:24,960
while running<font color="#E5E5E5"> other workloads</font><font color="#CCCCCC"> oh you</font>

1196
00:51:22,920 --> 00:51:31,019
know would<font color="#CCCCCC"> it reduce noise</font><font color="#E5E5E5"> yeah that's</font>

1197
00:51:24,960 --> 00:51:32,670
what question we did<font color="#E5E5E5"> what we see that</font>

1198
00:51:31,019 --> 00:51:33,118
<font color="#E5E5E5">because it happens occasionally anyway</font>

1199
00:51:32,670 --> 00:51:34,470
so<font color="#CCCCCC"> where we</font>

1200
00:51:33,119 --> 00:51:37,319
see is<font color="#E5E5E5"> that sometimes man in trouble</font>

1201
00:51:34,470 --> 00:51:38,669
<font color="#CCCCCC">might occur or some other</font><font color="#E5E5E5"> process might</font>

1202
00:51:37,319 --> 00:51:41,970
be scheduled<font color="#E5E5E5"> on top of the victim and</font>

1203
00:51:38,670 --> 00:51:45,749
then<font color="#E5E5E5"> the signals gone of course so what</font>

1204
00:51:41,970 --> 00:51:48,419
we we did<font color="#E5E5E5"> actually quantify this but</font>

1205
00:51:45,749 --> 00:51:49,859
just<font color="#E5E5E5"> from kind</font><font color="#CCCCCC"> of eyeballing the charts</font>

1206
00:51:48,420 --> 00:51:53,220
<font color="#E5E5E5">that we see then we just see a long</font>

1207
00:51:49,859 --> 00:51:55,019
stretch of of<font color="#E5E5E5"> zeros so the the spy</font>

1208
00:51:53,220 --> 00:51:57,299
<font color="#E5E5E5">purchase just sees sort of perfect</font>

1209
00:51:55,019 --> 00:52:02,788
accesses because it<font color="#E5E5E5"> because this because</font>

1210
00:51:57,299 --> 00:52:04,230
the<font color="#CCCCCC"> victim is done</font><font color="#E5E5E5"> running so if it's</font>

1211
00:52:02,789 --> 00:52:10,230
interrupted in the<font color="#E5E5E5"> middle</font><font color="#CCCCCC"> of this secret</font>

1212
00:52:04,230 --> 00:52:11,910
operation<font color="#E5E5E5"> then it would it would chop up</font>

1213
00:52:10,230 --> 00:52:15,450
the signal so you would see it sort<font color="#E5E5E5"> of</font>

1214
00:52:11,910 --> 00:52:16,440
<font color="#E5E5E5">in parts so I</font><font color="#CCCCCC"> it'll probably be</font><font color="#E5E5E5"> quite</font>

1215
00:52:15,450 --> 00:52:17,939
hard<font color="#CCCCCC"> to</font><font color="#E5E5E5"> stitch that together</font>

1216
00:52:16,440 --> 00:52:20,400
automatically<font color="#E5E5E5"> I think it would be</font>

1217
00:52:17,940 --> 00:52:22,230
possible<font color="#E5E5E5"> so I think because the the time</font>

1218
00:52:20,400 --> 00:52:24,539
slices for the the secret operation is

1219
00:52:22,230 --> 00:52:26,190
so tiny<font color="#E5E5E5"> that I don't think that'll</font>

1220
00:52:24,539 --> 00:52:29,220
<font color="#CCCCCC">really distort the signal</font><font color="#E5E5E5"> that much</font>

1221
00:52:26,190 --> 00:52:30,240
<font color="#CCCCCC">it'll only kind</font><font color="#E5E5E5"> of chop it up into time</font>

1222
00:52:29,220 --> 00:52:32,669
<font color="#CCCCCC">and you'd have to</font><font color="#E5E5E5"> splice</font><font color="#CCCCCC"> that together</font>

1223
00:52:30,240 --> 00:52:34,078
<font color="#E5E5E5">again so I don't really have numbers on</font>

1224
00:52:32,670 --> 00:52:35,970
how reliable<font color="#CCCCCC"> that would be but I think</font>

1225
00:52:34,079 --> 00:52:42,289
the signal is there if you're<font color="#E5E5E5"> willing to</font>

1226
00:52:35,970 --> 00:52:42,288
put<font color="#E5E5E5"> it together thank you thank you</font>

1227
00:52:42,769 --> 00:52:47,379
thank<font color="#CCCCCC"> you everyone</font>

1228
00:52:45,250 --> 00:52:47,380
[Applause]

