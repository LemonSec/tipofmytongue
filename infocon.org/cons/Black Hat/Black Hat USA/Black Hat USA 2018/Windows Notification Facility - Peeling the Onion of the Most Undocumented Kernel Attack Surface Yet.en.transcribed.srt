1
00:00:00,030 --> 00:00:03,750
<font color="#E5E5E5">all right thank you for</font><font color="#CCCCCC"> coming to our</font>

2
00:00:01,620 --> 00:00:06,330
talk<font color="#E5E5E5"> about</font><font color="#CCCCCC"> the Windows notification</font>

3
00:00:03,750 --> 00:00:09,450
facility so just to get<font color="#E5E5E5"> started like to</font>

4
00:00:06,330 --> 00:00:12,059
introduce my co-speaker Gabrielle<font color="#E5E5E5"> so hey</font>

5
00:00:09,450 --> 00:00:14,719
everybody<font color="#E5E5E5"> I'm Gabby</font><font color="#CCCCCC"> reverse engineer at</font>

6
00:00:12,059 --> 00:00:16,890
<font color="#CCCCCC">Crocs lab in France</font><font color="#E5E5E5"> and I'm focusing on</font>

7
00:00:14,719 --> 00:00:17,490
<font color="#E5E5E5">Windows internals</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> not specifically</font>

8
00:00:16,890 --> 00:00:20,400
<font color="#CCCCCC">Sakana</font>

9
00:00:17,490 --> 00:00:22,589
I'm also<font color="#CCCCCC"> bidding bedont going to the</font>

10
00:00:20,400 --> 00:00:26,788
black<font color="#CCCCCC"> Fuji against this</font><font color="#E5E5E5"> organization</font><font color="#CCCCCC"> ku</font>

11
00:00:22,590 --> 00:00:29,670
where<font color="#CCCCCC"> we</font><font color="#E5E5E5"> trying to show newcomers ladies</font>

12
00:00:26,789 --> 00:00:32,369
that's reversing some answers pretty

13
00:00:29,670 --> 00:00:34,440
<font color="#E5E5E5">hard for me thanks Abby</font>

14
00:00:32,369 --> 00:00:36,450
you know it's<font color="#CCCCCC"> very rare that it happens</font>

15
00:00:34,440 --> 00:00:38,280
<font color="#E5E5E5">that you</font><font color="#CCCCCC"> do research and you end up</font>

16
00:00:36,450 --> 00:00:40,230
<font color="#E5E5E5">having a collision of someone and</font>

17
00:00:38,280 --> 00:00:42,239
instead of fighting<font color="#E5E5E5"> over who's gonna</font>

18
00:00:40,230 --> 00:00:44,578
<font color="#CCCCCC">present and you know</font><font color="#E5E5E5"> trying to get into</font>

19
00:00:42,239 --> 00:00:46,260
<font color="#E5E5E5">all sorts of pestering it's nice that</font>

20
00:00:44,579 --> 00:00:48,239
we're in a community where two people

21
00:00:46,260 --> 00:00:50,489
<font color="#CCCCCC">who met at a conference</font><font color="#E5E5E5"> doing similar</font>

22
00:00:48,239 --> 00:00:51,839
research got to combine their research

23
00:00:50,489 --> 00:00:53,788
so I'm very<font color="#E5E5E5"> lucky to have</font><font color="#CCCCCC"> Gabrielle here</font>

24
00:00:51,840 --> 00:00:55,340
who helped out a lot<font color="#E5E5E5"> with some of the</font>

25
00:00:53,789 --> 00:00:57,210
tough stuff you're gonna see in<font color="#CCCCCC"> this top</font>

26
00:00:55,340 --> 00:00:58,020
<font color="#CCCCCC">for those of you don't know</font><font color="#E5E5E5"> me</font><font color="#CCCCCC"> my name</font>

27
00:00:57,210 --> 00:01:00,570
<font color="#E5E5E5">is</font><font color="#CCCCCC"> Alex</font><font color="#E5E5E5"> Enescu</font>

28
00:00:58,020 --> 00:01:02,969
currently VP of EDR strategy crash

29
00:01:00,570 --> 00:01:05,220
strike and I'm a passion and Windows

30
00:01:02,969 --> 00:01:07,189
internals<font color="#E5E5E5"> researcher that have been has</font>

31
00:01:05,220 --> 00:01:09,330
<font color="#CCCCCC">been doing this for way too long</font><font color="#E5E5E5"> now</font>

32
00:01:07,189 --> 00:01:12,539
<font color="#CCCCCC">publisher of the windows internal series</font>

33
00:01:09,330 --> 00:01:14,759
and you know<font color="#E5E5E5"> often speak your various</font>

34
00:01:12,540 --> 00:01:16,740
conferences about<font color="#CCCCCC"> low-level</font><font color="#E5E5E5"> things in</font>

35
00:01:14,760 --> 00:01:19,439
Windows<font color="#CCCCCC"> that no one knows</font><font color="#E5E5E5"> about that</font><font color="#CCCCCC"> are</font>

36
00:01:16,740 --> 00:01:21,298
interesting to<font color="#CCCCCC"> misuse abuse or otherwise</font>

37
00:01:19,439 --> 00:01:24,000
play around with<font color="#E5E5E5"> and hopefully you'll</font>

38
00:01:21,299 --> 00:01:26,009
see<font color="#CCCCCC"> some examples</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> that in this</font><font color="#E5E5E5"> w NF</font>

39
00:01:24,000 --> 00:01:27,479
talk so first of all we'll<font color="#CCCCCC"> start by</font>

40
00:01:26,009 --> 00:01:30,030
talking<font color="#E5E5E5"> a</font><font color="#CCCCCC"> little about what double-unit</font>

41
00:01:27,479 --> 00:01:33,720
<font color="#E5E5E5">is why it exists why it was built how it</font>

42
00:01:30,030 --> 00:01:35,100
works<font color="#CCCCCC"> some of the api's</font><font color="#E5E5E5"> who use w NF and</font>

43
00:01:33,720 --> 00:01:37,170
then<font color="#E5E5E5"> Gabrielle will go over some of the</font>

44
00:01:35,100 --> 00:01:38,850
data structures<font color="#E5E5E5"> for</font><font color="#CCCCCC"> those of you who are</font>

45
00:01:37,170 --> 00:01:41,159
<font color="#CCCCCC">doing forensics or kind</font><font color="#E5E5E5"> of understand</font>

46
00:01:38,850 --> 00:01:42,630
<font color="#CCCCCC">how it works behind the scenes and will</font>

47
00:01:41,159 --> 00:01:45,479
<font color="#E5E5E5">also talk about some tools that we've</font>

48
00:01:42,630 --> 00:01:47,310
built<font color="#E5E5E5"> together some wind back extensions</font>

49
00:01:45,479 --> 00:01:49,530
some Python<font color="#E5E5E5"> scripts some C scripts that</font>

50
00:01:47,310 --> 00:01:52,049
<font color="#E5E5E5">will be releasing so that you can also</font>

51
00:01:49,530 --> 00:01:54,930
you know fuzz manipulate and play<font color="#E5E5E5"> around</font>

52
00:01:52,049 --> 00:01:56,729
in W<font color="#E5E5E5"> net area</font><font color="#CCCCCC"> I don't think you some of</font>

53
00:01:54,930 --> 00:01:58,740
the interesting<font color="#CCCCCC"> attack</font><font color="#E5E5E5"> surfaces a</font><font color="#CCCCCC"> WMS</font>

54
00:01:56,729 --> 00:02:00,689
provides like most you know kernel

55
00:01:58,740 --> 00:02:03,539
functionality<font color="#E5E5E5"> it's not</font><font color="#CCCCCC"> inherently</font><font color="#E5E5E5"> bad</font>

56
00:02:00,689 --> 00:02:05,490
<font color="#E5E5E5">it's just the way people use it and you</font>

57
00:02:03,540 --> 00:02:07,380
know what can<font color="#E5E5E5"> happen when you misuse it</font>

58
00:02:05,490 --> 00:02:09,239
and kind<font color="#CCCCCC"> of break the assumptions</font><font color="#E5E5E5"> when</font>

59
00:02:07,380 --> 00:02:11,879
things are undocumented there's often a

60
00:02:09,239 --> 00:02:13,650
<font color="#CCCCCC">lot less fuzzing and</font><font color="#E5E5E5"> security testing</font>

61
00:02:11,879 --> 00:02:15,659
that goes<font color="#E5E5E5"> on within the vendor because</font>

62
00:02:13,650 --> 00:02:18,299
they<font color="#CCCCCC"> figured hey it's</font><font color="#E5E5E5"> undocumented until</font>

63
00:02:15,659 --> 00:02:19,769
someone<font color="#E5E5E5"> talks</font><font color="#CCCCCC"> about it</font><font color="#E5E5E5"> we're okay</font>

64
00:02:18,299 --> 00:02:21,780
<font color="#E5E5E5">I'll also talk</font><font color="#CCCCCC"> about you know</font>

65
00:02:19,769 --> 00:02:24,239
interesting use cases of<font color="#CCCCCC"> W&F that are</font>

66
00:02:21,780 --> 00:02:27,329
probably<font color="#E5E5E5"> not intended things like using</font>

67
00:02:24,239 --> 00:02:29,010
<font color="#E5E5E5">it as a covert side channel as well</font><font color="#CCCCCC"> as</font>

68
00:02:27,329 --> 00:02:31,890
<font color="#E5E5E5">using some of the notifications</font><font color="#CCCCCC"> that</font>

69
00:02:29,010 --> 00:02:34,230
provides for you know<font color="#E5E5E5"> rootkit like</font>

70
00:02:31,890 --> 00:02:36,208
implant like behavior without<font color="#E5E5E5"> doing some</font>

71
00:02:34,230 --> 00:02:39,000
of the hard work someone in<font color="#E5E5E5"> that space</font>

72
00:02:36,209 --> 00:02:40,799
normally has<font color="#E5E5E5"> to do it is a kernel level</font>

73
00:02:39,000 --> 00:02:43,049
facility and so it allows<font color="#E5E5E5"> you to get</font>

74
00:02:40,799 --> 00:02:44,519
very fine-grained information about the

75
00:02:43,049 --> 00:02:46,680
<font color="#E5E5E5">system and you</font><font color="#CCCCCC"> get to see some examples</font>

76
00:02:44,519 --> 00:02:49,319
<font color="#E5E5E5">that</font><font color="#CCCCCC"> you often can't do in carl mode at</font>

77
00:02:46,680 --> 00:02:50,940
<font color="#E5E5E5">all or that's very very complex</font><font color="#CCCCCC"> and</font>

78
00:02:49,319 --> 00:02:52,798
again piggybacking on the system we're

79
00:02:50,940 --> 00:02:54,480
living<font color="#E5E5E5"> off the land</font><font color="#CCCCCC"> is something that's</font>

80
00:02:52,799 --> 00:02:56,790
<font color="#CCCCCC">very popular</font><font color="#E5E5E5"> these days and</font><font color="#CCCCCC"> insecurity</font>

81
00:02:54,480 --> 00:02:58,738
research<font color="#CCCCCC"> and also</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about a few</font>

82
00:02:56,790 --> 00:03:01,170
<font color="#CCCCCC">examples on how WUF can be used to</font>

83
00:02:58,739 --> 00:03:03,120
manipulate<font color="#CCCCCC"> a system state you know</font>

84
00:03:01,170 --> 00:03:06,179
instead of global variables<font color="#E5E5E5"> more and</font>

85
00:03:03,120 --> 00:03:08,280
<font color="#E5E5E5">more state is now stored in</font><font color="#CCCCCC"> W&F</font><font color="#E5E5E5"> data and</font>

86
00:03:06,180 --> 00:03:09,780
again<font color="#CCCCCC"> you can manipulate assist them in</font>

87
00:03:08,280 --> 00:03:12,150
interesting<font color="#CCCCCC"> ways</font><font color="#E5E5E5"> either as an</font>

88
00:03:09,780 --> 00:03:13,829
administrator or<font color="#E5E5E5"> not</font><font color="#CCCCCC"> and then we'll wrap</font>

89
00:03:12,150 --> 00:03:16,889
<font color="#E5E5E5">up</font><font color="#CCCCCC"> with some some future research ideas</font>

90
00:03:13,829 --> 00:03:19,109
that<font color="#CCCCCC"> would come up with</font><font color="#E5E5E5"> so let's talk</font>

91
00:03:16,889 --> 00:03:21,449
<font color="#CCCCCC">about first of all</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> is w enough</font><font color="#E5E5E5"> so</font>

92
00:03:19,109 --> 00:03:23,040
the<font color="#CCCCCC"> Windows notification facility</font><font color="#E5E5E5"> this</font>

93
00:03:21,449 --> 00:03:25,169
<font color="#E5E5E5">is a new kernel component</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> was added</font>

94
00:03:23,040 --> 00:03:27,720
in Windows 8<font color="#E5E5E5"> and it's essentially a pup</font>

95
00:03:25,169 --> 00:03:29,069
<font color="#E5E5E5">sub model</font><font color="#CCCCCC"> publisher subscriber</font><font color="#E5E5E5"> so you</font>

96
00:03:27,720 --> 00:03:31,169
have one side<font color="#CCCCCC"> that's basically</font>

97
00:03:29,069 --> 00:03:33,238
publishing data<font color="#E5E5E5"> publishing notifications</font>

98
00:03:31,169 --> 00:03:35,010
<font color="#E5E5E5">and you have one or more subscribers or</font>

99
00:03:33,239 --> 00:03:37,590
consumers on the other<font color="#E5E5E5"> side that are</font>

100
00:03:35,010 --> 00:03:40,198
consuming<font color="#CCCCCC"> that data now</font><font color="#E5E5E5"> the way WF was</font>

101
00:03:37,590 --> 00:03:42,479
built is actually very nice because<font color="#CCCCCC"> it</font>

102
00:03:40,199 --> 00:03:44,010
fixes<font color="#E5E5E5"> some of the design limitations</font>

103
00:03:42,479 --> 00:03:45,720
that<font color="#CCCCCC"> Windows had before</font><font color="#E5E5E5"> and I'll give</font>

104
00:03:44,010 --> 00:03:48,269
you an example<font color="#CCCCCC"> of you know</font><font color="#E5E5E5"> something you</font>

105
00:03:45,720 --> 00:03:49,228
couldn't do before<font color="#CCCCCC"> W enough</font><font color="#E5E5E5"> now what's</font>

106
00:03:48,269 --> 00:03:51,720
<font color="#CCCCCC">really cool about is</font><font color="#E5E5E5"> that it's</font>

107
00:03:49,229 --> 00:03:53,340
completely<font color="#E5E5E5"> blind</font><font color="#CCCCCC"> in many pups</font><font color="#E5E5E5"> up models</font>

108
00:03:51,720 --> 00:03:54,959
the publisher has to come first

109
00:03:53,340 --> 00:03:56,699
<font color="#CCCCCC">you can't subscribe for something that</font>

110
00:03:54,959 --> 00:03:58,049
hasn't been<font color="#CCCCCC"> published yet</font><font color="#E5E5E5"> and if your</font>

111
00:03:56,699 --> 00:04:00,209
<font color="#E5E5E5">publisher</font><font color="#CCCCCC"> you're publishing something</font>

112
00:03:58,049 --> 00:04:01,709
before their subscribers<font color="#CCCCCC"> and subscribers</font>

113
00:04:00,209 --> 00:04:03,720
might miss the data<font color="#CCCCCC"> and so there's a lot</font>

114
00:04:01,709 --> 00:04:05,040
<font color="#CCCCCC">of</font><font color="#E5E5E5"> synchronization</font><font color="#CCCCCC"> in a lot of classical</font>

115
00:04:03,720 --> 00:04:06,930
<font color="#CCCCCC">pup</font><font color="#E5E5E5"> sub models around who publishes</font>

116
00:04:05,040 --> 00:04:09,239
first who subscribes<font color="#E5E5E5"> and so on and so</font>

117
00:04:06,930 --> 00:04:11,849
forth<font color="#CCCCCC"> so forth with W&F it's kind</font><font color="#E5E5E5"> of a</font>

118
00:04:09,239 --> 00:04:13,139
blind system is registration less and so

119
00:04:11,849 --> 00:04:14,488
the publisher<font color="#E5E5E5"> in a consumer or</font>

120
00:04:13,139 --> 00:04:16,560
<font color="#E5E5E5">subscriber don't really need to know</font>

121
00:04:14,489 --> 00:04:19,530
<font color="#CCCCCC">about each other's or cool loads first</font>

122
00:04:16,560 --> 00:04:21,839
<font color="#CCCCCC">before</font><font color="#E5E5E5"> the other</font><font color="#CCCCCC"> so kind</font><font color="#E5E5E5"> of support is</font>

123
00:04:19,529 --> 00:04:23,099
out of<font color="#CCCCCC"> order behavior</font><font color="#E5E5E5"> on top of this it</font>

124
00:04:21,839 --> 00:04:25,719
has<font color="#E5E5E5"> lots of cool features</font><font color="#CCCCCC"> like</font>

125
00:04:23,099 --> 00:04:27,460
persistent<font color="#E5E5E5"> data versus volatile data</font>

126
00:04:25,720 --> 00:04:29,260
it has a change stamp so<font color="#CCCCCC"> you can see</font>

127
00:04:27,460 --> 00:04:30,520
someone's modify the data in<font color="#CCCCCC"> between you</font>

128
00:04:29,260 --> 00:04:32,260
<font color="#E5E5E5">lives reading it</font>

129
00:04:30,520 --> 00:04:34,120
it supports<font color="#E5E5E5"> when to secure the scripture</font>

130
00:04:32,260 --> 00:04:35,770
so it's kind of got all the features

131
00:04:34,120 --> 00:04:38,290
you'd expect<font color="#CCCCCC"> out of amateur Windows</font>

132
00:04:35,770 --> 00:04:40,599
kernel functionality<font color="#E5E5E5"> and a good example</font>

133
00:04:38,290 --> 00:04:43,960
<font color="#CCCCCC">for</font><font color="#E5E5E5"> why you need something like</font><font color="#CCCCCC"> wnf is</font>

134
00:04:40,600 --> 00:04:46,690
on<font color="#E5E5E5"> Windows</font><font color="#CCCCCC"> the example when you write a</font>

135
00:04:43,960 --> 00:04:47,650
Windows driver<font color="#CCCCCC"> that loads a boot</font><font color="#E5E5E5"> and you</font>

136
00:04:46,690 --> 00:04:50,080
want to write<font color="#CCCCCC"> to the disk</font>

137
00:04:47,650 --> 00:04:52,450
now<font color="#E5E5E5"> the disk when Windows boots up is</font>

138
00:04:50,080 --> 00:04:54,159
usually<font color="#CCCCCC"> mounted read-only this happens</font>

139
00:04:52,450 --> 00:04:56,200
in every<font color="#E5E5E5"> major OS in the world and even</font>

140
00:04:54,160 --> 00:04:58,390
<font color="#E5E5E5">Linux and Mac OS booted discrete only</font>

141
00:04:56,200 --> 00:05:00,700
then at<font color="#E5E5E5"> some point around</font><font color="#CCCCCC"> a utility like</font>

142
00:04:58,390 --> 00:05:03,010
fsck<font color="#E5E5E5"> or</font><font color="#CCCCCC"> AutoCheck and</font><font color="#E5E5E5"> windows this case</font>

143
00:05:00,700 --> 00:05:05,500
which<font color="#E5E5E5"> makes sure the disk is safe for</font>

144
00:05:03,010 --> 00:05:08,349
writing<font color="#CCCCCC"> 6 is any bad sectors</font><font color="#E5E5E5"> and then</font>

145
00:05:05,500 --> 00:05:10,630
<font color="#E5E5E5">rebounds to drive as read right</font><font color="#CCCCCC"> now that</font>

146
00:05:08,350 --> 00:05:12,520
<font color="#E5E5E5">point a driver knows that it's safe to</font>

147
00:05:10,630 --> 00:05:15,340
write to the disk now because<font color="#CCCCCC"> AutoCheck</font>

148
00:05:12,520 --> 00:05:18,130
executed now to do this<font color="#CCCCCC"> oughta check</font>

149
00:05:15,340 --> 00:05:20,140
signals<font color="#CCCCCC"> an event that's named but who</font>

150
00:05:18,130 --> 00:05:22,360
creates<font color="#E5E5E5"> that event because</font><font color="#CCCCCC"> if AutoCheck</font>

151
00:05:20,140 --> 00:05:24,400
creates the event then any drivers which

152
00:05:22,360 --> 00:05:26,110
load before<font color="#CCCCCC"> auto check</font><font color="#E5E5E5"> don't have an</font>

153
00:05:24,400 --> 00:05:27,370
event to wait on because the thing<font color="#CCCCCC"> that</font>

154
00:05:26,110 --> 00:05:30,250
tells<font color="#E5E5E5"> you auto check around doesn't</font>

155
00:05:27,370 --> 00:05:32,560
<font color="#E5E5E5">exist yet</font><font color="#CCCCCC"> if the drivers are supposed to</font>

156
00:05:30,250 --> 00:05:34,180
<font color="#E5E5E5">create the</font><font color="#CCCCCC"> event first</font><font color="#E5E5E5"> then which driver</font>

157
00:05:32,560 --> 00:05:35,710
becomes the first one to wait on the

158
00:05:34,180 --> 00:05:37,510
event becomes the one<font color="#CCCCCC"> to create the</font>

159
00:05:35,710 --> 00:05:37,840
event<font color="#E5E5E5"> again</font><font color="#CCCCCC"> you end up with in these</font>

160
00:05:37,510 --> 00:05:42,219
weird

161
00:05:37,840 --> 00:05:43,960
ordering<font color="#E5E5E5"> problems which were fixed in</font>

162
00:05:42,220 --> 00:05:46,360
<font color="#E5E5E5">this particular case by having</font><font color="#CCCCCC"> the</font>

163
00:05:43,960 --> 00:05:48,010
kernel very early boot being the one

164
00:05:46,360 --> 00:05:49,660
<font color="#E5E5E5">that</font><font color="#CCCCCC"> carries the</font><font color="#E5E5E5"> auto check event that</font>

165
00:05:48,010 --> 00:05:51,669
way auto check<font color="#E5E5E5"> always knows it can</font>

166
00:05:49,660 --> 00:05:53,140
<font color="#E5E5E5">signal it and drivers</font><font color="#CCCCCC"> always know it's</font>

167
00:05:51,669 --> 00:05:55,419
it's already there someone took<font color="#E5E5E5"> care</font><font color="#CCCCCC"> of</font>

168
00:05:53,140 --> 00:05:57,580
it for<font color="#CCCCCC"> them but this</font><font color="#E5E5E5"> is for this one</font>

169
00:05:55,419 --> 00:05:58,810
specific use case<font color="#E5E5E5"> right</font><font color="#CCCCCC"> sure some of</font>

170
00:05:57,580 --> 00:06:00,669
your<font color="#E5E5E5"> programmers you've had similar</font>

171
00:05:58,810 --> 00:06:02,320
<font color="#CCCCCC">issues where there's some event out</font>

172
00:06:00,669 --> 00:06:04,719
there<font color="#CCCCCC"> at once I</font><font color="#E5E5E5"> need to signal and other</font>

173
00:06:02,320 --> 00:06:06,760
sightings through to wait on how do you

174
00:06:04,720 --> 00:06:09,370
wait on<font color="#E5E5E5"> something before it exists right</font>

175
00:06:06,760 --> 00:06:12,219
<font color="#E5E5E5">W&F solves that because</font><font color="#CCCCCC"> with W enough I</font>

176
00:06:09,370 --> 00:06:14,560
can subscribe to<font color="#E5E5E5"> that event</font><font color="#CCCCCC"> and block</font>

177
00:06:12,220 --> 00:06:16,540
<font color="#E5E5E5">even if it doesn't</font><font color="#CCCCCC"> exist yet</font><font color="#E5E5E5"> and when</font>

178
00:06:14,560 --> 00:06:18,610
the<font color="#E5E5E5"> event actually gets created then</font>

179
00:06:16,540 --> 00:06:20,260
I'll actually wake up once<font color="#E5E5E5"> it's get once</font>

180
00:06:18,610 --> 00:06:22,090
it gets published<font color="#CCCCCC"> too so that's kind of</font>

181
00:06:20,260 --> 00:06:25,840
one of<font color="#E5E5E5"> the top use cases is blind</font>

182
00:06:22,090 --> 00:06:27,549
registration<font color="#E5E5E5"> less subscription model now</font>

183
00:06:25,840 --> 00:06:30,880
<font color="#CCCCCC">in the W&F world would you have aren't</font>

184
00:06:27,550 --> 00:06:32,770
events<font color="#CCCCCC"> there W&F state names these are</font>

185
00:06:30,880 --> 00:06:35,890
basically<font color="#E5E5E5"> 64-bit IDs they're just</font>

186
00:06:32,770 --> 00:06:38,349
numbers<font color="#E5E5E5"> well there's a trick to it these</font>

187
00:06:35,890 --> 00:06:39,520
<font color="#E5E5E5">numbers actually encode a data structure</font>

188
00:06:38,349 --> 00:06:41,650
inside<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> dodges</font>

189
00:06:39,520 --> 00:06:44,049
random numbers<font color="#E5E5E5"> they actually are bits</font>

190
00:06:41,650 --> 00:06:46,359
that represent a<font color="#CCCCCC"> version a lifetime of</font>

191
00:06:44,050 --> 00:06:48,729
scope<font color="#CCCCCC"> a permanent flag and then a unique</font>

192
00:06:46,360 --> 00:06:50,620
sequence<font color="#E5E5E5"> number the trick is you take a</font>

193
00:06:48,729 --> 00:06:53,378
<font color="#E5E5E5">W&F state name you take the 64-bit</font>

194
00:06:50,620 --> 00:06:55,360
<font color="#E5E5E5">number you</font><font color="#CCCCCC"> XOR it with this magic key</font>

195
00:06:53,379 --> 00:06:56,530
here which you know<font color="#E5E5E5"> who knows what it</font>

196
00:06:55,360 --> 00:06:59,349
really means I don't<font color="#E5E5E5"> know if it's</font><font color="#CCCCCC"> a</font>

197
00:06:56,530 --> 00:07:01,030
<font color="#E5E5E5">person's name and</font><font color="#CCCCCC"> a skew or whatnot but</font>

198
00:06:59,349 --> 00:07:03,009
<font color="#E5E5E5">you XOR it with this key and then you</font>

199
00:07:01,030 --> 00:07:04,508
get this data structure out of<font color="#CCCCCC"> it with</font>

200
00:07:03,009 --> 00:07:06,430
<font color="#E5E5E5">these different bits that are gonna mean</font>

201
00:07:04,509 --> 00:07:08,710
different<font color="#CCCCCC"> things so they're not just</font>

202
00:07:06,430 --> 00:07:11,139
goods they actually have meaning

203
00:07:08,710 --> 00:07:13,630
<font color="#CCCCCC">associated with them</font><font color="#E5E5E5"> so the first</font>

204
00:07:11,139 --> 00:07:16,479
meaning<font color="#E5E5E5"> is the lifetime</font><font color="#CCCCCC"> W&F state names</font>

205
00:07:13,630 --> 00:07:18,400
have lifetime<font color="#E5E5E5"> and there's three main</font>

206
00:07:16,479 --> 00:07:20,949
lifetimes<font color="#E5E5E5"> that are used</font><font color="#CCCCCC"> well-known names</font>

207
00:07:18,400 --> 00:07:22,630
<font color="#E5E5E5">vermin and names and persistent things</font>

208
00:07:20,949 --> 00:07:25,509
and then there's a fourth<font color="#E5E5E5"> type of</font>

209
00:07:22,630 --> 00:07:27,520
lifetime which is<font color="#E5E5E5"> a temporary name now</font>

210
00:07:25,509 --> 00:07:29,530
<font color="#CCCCCC">well-known names are</font><font color="#E5E5E5"> actually in the</font>

211
00:07:27,520 --> 00:07:31,840
registry and they're published and

212
00:07:29,530 --> 00:07:33,609
basically created when the<font color="#E5E5E5"> Windows</font>

213
00:07:31,840 --> 00:07:35,619
installation<font color="#E5E5E5"> media is created so these</font>

214
00:07:33,610 --> 00:07:37,560
are in a header file of Microsoft and

215
00:07:35,620 --> 00:07:40,060
they basically<font color="#E5E5E5"> get added in the registry</font>

216
00:07:37,560 --> 00:07:42,190
<font color="#E5E5E5">permanent names are names that can be</font>

217
00:07:40,060 --> 00:07:43,780
registered<font color="#CCCCCC"> after the fact they're also</font>

218
00:07:42,190 --> 00:07:45,699
stored in the registry<font color="#CCCCCC"> so once a</font>

219
00:07:43,780 --> 00:07:47,948
permanent name gets registered<font color="#E5E5E5"> it</font>

220
00:07:45,699 --> 00:07:49,990
persists<font color="#CCCCCC"> it's data may or may not</font>

221
00:07:47,949 --> 00:07:52,569
persist<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> a flag that specifies</font>

222
00:07:49,990 --> 00:07:55,029
should the last data that was associated

223
00:07:52,569 --> 00:07:57,190
with<font color="#CCCCCC"> this state name be persistent</font><font color="#E5E5E5"> or</font>

224
00:07:55,029 --> 00:07:58,990
not<font color="#E5E5E5"> and then this is</font><font color="#CCCCCC"> gets a little</font><font color="#E5E5E5"> bit</font>

225
00:07:57,190 --> 00:08:01,150
confusing<font color="#CCCCCC"> there are persistent names</font>

226
00:07:58,990 --> 00:08:04,270
<font color="#E5E5E5">which go</font><font color="#CCCCCC"> on a registry</font><font color="#E5E5E5"> key called</font>

227
00:08:01,150 --> 00:08:06,190
volatile notifications<font color="#E5E5E5"> so persistent</font>

228
00:08:04,270 --> 00:08:08,469
names are persistent with regards<font color="#CCCCCC"> to the</font>

229
00:08:06,190 --> 00:08:11,110
process<font color="#E5E5E5"> that registered them but they're</font>

230
00:08:08,469 --> 00:08:13,060
not<font color="#E5E5E5"> permanent across reboots so if I'm a</font>

231
00:08:11,110 --> 00:08:16,060
<font color="#E5E5E5">process and I register persistent name</font>

232
00:08:13,060 --> 00:08:18,969
and I exit the data and the name<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that</font>

233
00:08:16,060 --> 00:08:21,940
wnf state name persists until<font color="#CCCCCC"> I reboot</font>

234
00:08:18,969 --> 00:08:24,310
and then it's<font color="#E5E5E5"> got a temporary name if I</font>

235
00:08:21,940 --> 00:08:26,590
create it and I exit<font color="#E5E5E5"> it's got no</font>

236
00:08:24,310 --> 00:08:28,449
registry backing associated with it<font color="#E5E5E5"> once</font>

237
00:08:26,590 --> 00:08:30,609
the<font color="#E5E5E5"> process exits the temporary name is</font>

238
00:08:28,449 --> 00:08:32,440
gone<font color="#E5E5E5"> so temporary names are bound to the</font>

239
00:08:30,610 --> 00:08:33,820
lifetime<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the process</font><font color="#CCCCCC"> persist</font><font color="#E5E5E5"> the</font>

240
00:08:32,440 --> 00:08:36,159
names are bound to the lifetime<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

241
00:08:33,820 --> 00:08:38,829
system permanent names are in the

242
00:08:36,159 --> 00:08:40,270
<font color="#E5E5E5">registry forever</font><font color="#CCCCCC"> and then well no names</font>

243
00:08:38,828 --> 00:08:41,859
are in<font color="#E5E5E5"> the registry</font><font color="#CCCCCC"> but you can't</font>

244
00:08:40,270 --> 00:08:44,228
<font color="#CCCCCC">register them</font><font color="#E5E5E5"> they're kind</font><font color="#CCCCCC"> of pre</font>

245
00:08:41,860 --> 00:08:46,360
registered well no names<font color="#E5E5E5"> that the system</font>

246
00:08:44,229 --> 00:08:48,490
is going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use and this kind of follows</font>

247
00:08:46,360 --> 00:08:50,290
<font color="#CCCCCC">similar models objects where unless you</font>

248
00:08:48,490 --> 00:08:52,870
an administrator<font color="#E5E5E5"> or you have the create</font>

249
00:08:50,290 --> 00:08:54,459
<font color="#E5E5E5">global name privilege you can't create</font>

250
00:08:52,870 --> 00:08:55,990
permanent or persistent names you can

251
00:08:54,460 --> 00:08:57,370
only create temporary<font color="#E5E5E5"> names</font><font color="#CCCCCC"> unless</font>

252
00:08:55,990 --> 00:08:59,650
<font color="#E5E5E5">you're an admin or above and then</font>

253
00:08:57,370 --> 00:09:02,020
obviously<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> do that</font><font color="#E5E5E5"> the second</font>

254
00:08:59,650 --> 00:09:04,150
piece of<font color="#CCCCCC"> its state name is its scope</font><font color="#E5E5E5"> and</font>

255
00:09:02,020 --> 00:09:05,980
the scope determines basically the

256
00:09:04,150 --> 00:09:09,340
initial<font color="#CCCCCC"> security boundary</font><font color="#E5E5E5"> and visibility</font>

257
00:09:05,980 --> 00:09:11,170
boundary around<font color="#CCCCCC"> a WF state</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> W and F</font>

258
00:09:09,340 --> 00:09:14,950
<font color="#E5E5E5">state name can either be global</font>

259
00:09:11,170 --> 00:09:17,020
or it can<font color="#CCCCCC"> be unique to a</font><font color="#E5E5E5"> session</font><font color="#CCCCCC"> or it</font>

260
00:09:14,950 --> 00:09:19,270
can be unique<font color="#CCCCCC"> to a user</font><font color="#E5E5E5"> or it can be</font>

261
00:09:17,020 --> 00:09:21,760
unique to<font color="#CCCCCC"> a process so you can</font><font color="#E5E5E5"> say only</font>

262
00:09:19,270 --> 00:09:24,460
<font color="#E5E5E5">this process and</font><font color="#CCCCCC"> it's threads</font><font color="#E5E5E5"> know about</font>

263
00:09:21,760 --> 00:09:26,620
these state names<font color="#E5E5E5"> or only the user only</font>

264
00:09:24,460 --> 00:09:28,420
<font color="#E5E5E5">Alex's processes can touch the state</font>

265
00:09:26,620 --> 00:09:30,160
name<font color="#E5E5E5"> or only</font><font color="#CCCCCC"> whoever's logged in a</font>

266
00:09:28,420 --> 00:09:31,990
<font color="#E5E5E5">session one can touch</font><font color="#CCCCCC"> a state name or</font>

267
00:09:30,160 --> 00:09:33,640
<font color="#E5E5E5">anything across the system can do this</font>

268
00:09:31,990 --> 00:09:35,650
so there's different scoping that<font color="#E5E5E5"> you</font>

269
00:09:33,640 --> 00:09:38,319
can associate<font color="#CCCCCC"> and lifetime in scope</font>

270
00:09:35,650 --> 00:09:40,180
obviously go<font color="#E5E5E5"> hand</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> hand together</font><font color="#CCCCCC"> for</font>

271
00:09:38,320 --> 00:09:42,790
<font color="#E5E5E5">example you couldn't create a permanent</font>

272
00:09:40,180 --> 00:09:43,839
name<font color="#E5E5E5"> that</font><font color="#CCCCCC"> has process scoped</font><font color="#E5E5E5"> because</font>

273
00:09:42,790 --> 00:09:45,969
that<font color="#E5E5E5"> wouldn't make sense</font><font color="#CCCCCC"> once your</font>

274
00:09:43,840 --> 00:09:47,290
process is gone<font color="#CCCCCC"> the process scope is</font>

275
00:09:45,970 --> 00:09:49,270
gone where were you why are you

276
00:09:47,290 --> 00:09:50,829
persisting this name that no one<font color="#E5E5E5"> will</font>

277
00:09:49,270 --> 00:09:52,660
ever be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> open again because no</font>

278
00:09:50,830 --> 00:09:53,920
one will<font color="#CCCCCC"> ever be that</font><font color="#E5E5E5"> process again</font><font color="#CCCCCC"> so</font>

279
00:09:52,660 --> 00:09:55,750
there are some rules<font color="#CCCCCC"> obviously some</font>

280
00:09:53,920 --> 00:09:58,569
scopes don't make<font color="#E5E5E5"> sense for certain</font>

281
00:09:55,750 --> 00:09:59,950
lifetimes<font color="#CCCCCC"> and vice-versa and then the</font>

282
00:09:58,570 --> 00:10:02,410
last piece<font color="#CCCCCC"> is the sequence number</font>

283
00:09:59,950 --> 00:10:04,450
because since these names are<font color="#E5E5E5"> just bits</font>

284
00:10:02,410 --> 00:10:06,579
<font color="#E5E5E5">well some of the bits are the scope some</font>

285
00:10:04,450 --> 00:10:08,770
of the bits are the lifetime<font color="#E5E5E5"> one bit</font>

286
00:10:06,580 --> 00:10:10,450
says if this is persistent data<font color="#E5E5E5"> or not</font>

287
00:10:08,770 --> 00:10:12,699
<font color="#E5E5E5">how do you then actually make that the</font>

288
00:10:10,450 --> 00:10:15,190
name be unique<font color="#E5E5E5"> so</font><font color="#CCCCCC"> there's a 51 bit</font>

289
00:10:12,700 --> 00:10:17,260
sequence number now<font color="#E5E5E5"> for well</font><font color="#CCCCCC"> no names</font>

290
00:10:15,190 --> 00:10:19,390
the first 32 bits are basically

291
00:10:17,260 --> 00:10:21,939
characters<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of like a pool tag or a</font>

292
00:10:19,390 --> 00:10:24,580
heap tag it's for<font color="#E5E5E5"> ASCII letters that</font>

293
00:10:21,940 --> 00:10:26,320
kind<font color="#CCCCCC"> of define the the family the tag</font>

294
00:10:24,580 --> 00:10:28,810
<font color="#CCCCCC">that really is</font><font color="#E5E5E5"> associated</font><font color="#CCCCCC"> with this name</font>

295
00:10:26,320 --> 00:10:30,460
and<font color="#E5E5E5"> you'll see some</font><font color="#CCCCCC"> examples soon the</font>

296
00:10:28,810 --> 00:10:32,709
remainder of the bits<font color="#CCCCCC"> the last 21</font><font color="#E5E5E5"> bits</font>

297
00:10:30,460 --> 00:10:35,320
are then used as a number within<font color="#E5E5E5"> that</font>

298
00:10:32,710 --> 00:10:36,840
family<font color="#CCCCCC"> so this is the let's say I don't</font>

299
00:10:35,320 --> 00:10:41,350
<font color="#CCCCCC">know it's come up with a tag called</font>

300
00:10:36,840 --> 00:10:43,300
<font color="#E5E5E5">BK HT event</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> all right so BK HT that's</font>

301
00:10:41,350 --> 00:10:45,100
your tag that's<font color="#CCCCCC"> your first 32 bits then</font>

302
00:10:43,300 --> 00:10:47,800
<font color="#E5E5E5">one is the first black</font><font color="#CCCCCC"> hat event and</font>

303
00:10:45,100 --> 00:10:49,720
then 2 3<font color="#E5E5E5"> 4 5 and so on so forth</font><font color="#CCCCCC"> that's 4</font>

304
00:10:47,800 --> 00:10:51,010
well<font color="#E5E5E5"> no names for the other names</font><font color="#CCCCCC"> I</font>

305
00:10:49,720 --> 00:10:53,620
<font color="#E5E5E5">wanted you to register at runtime the</font>

306
00:10:51,010 --> 00:10:55,210
<font color="#E5E5E5">persisted names the permanent names that</font>

307
00:10:53,620 --> 00:10:57,190
sequence number<font color="#CCCCCC"> is a monotonically</font>

308
00:10:55,210 --> 00:10:58,690
increasing number so the<font color="#E5E5E5"> first ever</font>

309
00:10:57,190 --> 00:11:00,940
<font color="#E5E5E5">permanent state name that was ever</font>

310
00:10:58,690 --> 00:11:03,730
<font color="#E5E5E5">created</font><font color="#CCCCCC"> it's sequence number was 1 and</font>

311
00:11:00,940 --> 00:11:05,260
then<font color="#CCCCCC"> 2 and then 3 and then 4</font><font color="#E5E5E5"> and the</font>

312
00:11:03,730 --> 00:11:06,640
last<font color="#CCCCCC"> used sequence number gets</font><font color="#E5E5E5"> rid in</font>

313
00:11:05,260 --> 00:11:08,770
the registry<font color="#CCCCCC"> so every</font>

314
00:11:06,640 --> 00:11:10,540
permanent aim until you reformat your

315
00:11:08,770 --> 00:11:12,579
<font color="#E5E5E5">drive will always be increasing</font>

316
00:11:10,540 --> 00:11:14,860
increasing increasing increasing then

317
00:11:12,580 --> 00:11:16,450
<font color="#CCCCCC">the persistent and temporary names which</font>

318
00:11:14,860 --> 00:11:18,310
disappear once you reboot the<font color="#E5E5E5"> machine</font>

319
00:11:16,450 --> 00:11:19,900
<font color="#E5E5E5">those have their own monotonically</font>

320
00:11:18,310 --> 00:11:21,640
increasing sequence<font color="#E5E5E5"> number that</font>

321
00:11:19,900 --> 00:11:23,079
<font color="#E5E5E5">obviously gives reset to</font><font color="#CCCCCC"> zero wants to</font>

322
00:11:21,640 --> 00:11:24,760
reboot the<font color="#E5E5E5"> machine so somewhere in a</font>

323
00:11:23,080 --> 00:11:26,680
kernel variable<font color="#E5E5E5"> we basically remember</font>

324
00:11:24,760 --> 00:11:29,380
<font color="#E5E5E5">this was the last you</font><font color="#CCCCCC"> know</font>

325
00:11:26,680 --> 00:11:31,630
non non permanent<font color="#E5E5E5"> sequence number</font><font color="#CCCCCC"> and</font>

326
00:11:29,380 --> 00:11:34,540
we'll just keeping incrementing that<font color="#E5E5E5"> so</font>

327
00:11:31,630 --> 00:11:36,340
here's an example<font color="#E5E5E5"> of a state named</font><font color="#CCCCCC"> W&F</font>

328
00:11:34,540 --> 00:11:38,170
boot<font color="#E5E5E5"> dirty</font><font color="#CCCCCC"> shutdown like that's its</font>

329
00:11:36,340 --> 00:11:40,120
friendly name that's<font color="#CCCCCC"> kind of what you</font>

330
00:11:38,170 --> 00:11:42,760
can see<font color="#CCCCCC"> in the symbols what it looks</font>

331
00:11:40,120 --> 00:11:44,710
like if<font color="#CCCCCC"> you open this up in Ida</font><font color="#E5E5E5"> is one</font>

332
00:11:42,760 --> 00:11:47,620
five eight nine<font color="#E5E5E5"> zero a bunch of hex</font>

333
00:11:44,710 --> 00:11:50,170
numbers<font color="#E5E5E5"> you XOR those hex numbers with</font>

334
00:11:47,620 --> 00:11:51,700
that magic key and then you get you know

335
00:11:50,170 --> 00:11:53,020
something<font color="#E5E5E5"> that still looks like magic</font>

336
00:11:51,700 --> 00:11:54,700
hex but it's a<font color="#E5E5E5"> little bit more readable</font>

337
00:11:53,020 --> 00:11:56,680
<font color="#E5E5E5">now</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right some of you can probably</font>

338
00:11:54,700 --> 00:11:58,960
recognize<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> that looks</font><font color="#E5E5E5"> like a ski</font>

339
00:11:56,680 --> 00:12:01,150
<font color="#E5E5E5">okay you know there's some meaning to</font>

340
00:11:58,960 --> 00:12:03,220
<font color="#E5E5E5">this and if we follow the</font><font color="#CCCCCC"> data</font><font color="#E5E5E5"> structure</font>

341
00:12:01,150 --> 00:12:06,189
from earlier<font color="#CCCCCC"> well this one basically</font>

342
00:12:03,220 --> 00:12:07,870
tells us this is<font color="#CCCCCC"> version one</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> zero</font>

343
00:12:06,190 --> 00:12:11,560
over<font color="#CCCCCC"> here tells us that</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is a</font>

344
00:12:07,870 --> 00:12:14,290
<font color="#CCCCCC">well-known system scoped name and then</font>

345
00:12:11,560 --> 00:12:18,219
obviously these ASCII characters

346
00:12:14,290 --> 00:12:21,069
represent the word boot<font color="#E5E5E5"> and then the one</font>

347
00:12:18,220 --> 00:12:22,120
over<font color="#CCCCCC"> here and this isn't one shift</font><font color="#E5E5E5"> that</font>

348
00:12:21,070 --> 00:12:24,970
obviously<font color="#E5E5E5"> so it looks</font><font color="#CCCCCC"> like an</font><font color="#E5E5E5"> eight</font>

349
00:12:22,120 --> 00:12:27,130
means that it's<font color="#E5E5E5"> the first event</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> part</font>

350
00:12:24,970 --> 00:12:28,930
of<font color="#E5E5E5"> the boot family so wnf boot dirty</font>

351
00:12:27,130 --> 00:12:31,420
shutdown<font color="#E5E5E5"> is that number that's</font>

352
00:12:28,930 --> 00:12:35,079
internally<font color="#E5E5E5"> like how its represented by</font>

353
00:12:31,420 --> 00:12:36,550
the<font color="#CCCCCC"> WUF system so to register names that</font>

354
00:12:35,080 --> 00:12:39,010
are not well<font color="#E5E5E5"> know names there's a nice</font>

355
00:12:36,550 --> 00:12:41,079
little<font color="#CCCCCC"> API a system called Korea W</font>

356
00:12:39,010 --> 00:12:42,850
<font color="#CCCCCC">enough</font><font color="#E5E5E5"> state</font><font color="#CCCCCC"> name you pass in the</font>

357
00:12:41,080 --> 00:12:45,220
lifetime<font color="#E5E5E5"> to scope</font><font color="#CCCCCC"> whether or not data</font>

358
00:12:42,850 --> 00:12:46,960
should be persisted<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is the size a</font>

359
00:12:45,220 --> 00:12:49,330
security<font color="#E5E5E5"> of</font><font color="#CCCCCC"> scripter it goes in the</font>

360
00:12:46,960 --> 00:12:51,430
registry or if it's temporary<font color="#CCCCCC"> it doesn't</font>

361
00:12:49,330 --> 00:12:52,810
and then it creates this<font color="#E5E5E5"> name for you if</font>

362
00:12:51,430 --> 00:12:55,630
you want to<font color="#E5E5E5"> get rid of it at some</font><font color="#CCCCCC"> point</font>

363
00:12:52,810 --> 00:12:58,839
you<font color="#E5E5E5"> called</font><font color="#CCCCCC"> Z W</font><font color="#E5E5E5"> delete</font><font color="#CCCCCC"> WF</font><font color="#E5E5E5"> state name and</font>

364
00:12:55,630 --> 00:13:00,970
then this will<font color="#E5E5E5"> then get rid of it then</font>

365
00:12:58,840 --> 00:13:02,560
if you want<font color="#E5E5E5"> to add data</font><font color="#CCCCCC"> if you want</font><font color="#E5E5E5"> to</font>

366
00:13:00,970 --> 00:13:04,810
send some<font color="#CCCCCC"> sentinel if you can</font>

367
00:13:02,560 --> 00:13:06,640
<font color="#E5E5E5">notification there is a update</font><font color="#CCCCCC"> WF state</font>

368
00:13:04,810 --> 00:13:09,819
data in which you pass in the state name

369
00:13:06,640 --> 00:13:11,860
<font color="#CCCCCC">a buffer size</font><font color="#E5E5E5"> and then something called</font>

370
00:13:09,820 --> 00:13:15,430
<font color="#E5E5E5">a change stamp and the change down</font>

371
00:13:11,860 --> 00:13:18,100
basically<font color="#E5E5E5"> lets you say look every time</font><font color="#CCCCCC"> I</font>

372
00:13:15,430 --> 00:13:19,839
publish data there's a unique<font color="#E5E5E5"> timestamp</font>

373
00:13:18,100 --> 00:13:20,560
<font color="#E5E5E5">that's basically a monotonically</font>

374
00:13:19,840 --> 00:13:24,610
increasing number

375
00:13:20,560 --> 00:13:26,770
that says you know<font color="#E5E5E5"> data entry 37 was</font>

376
00:13:24,610 --> 00:13:28,750
written<font color="#E5E5E5"> to and then it's 30 and then 39</font>

377
00:13:26,770 --> 00:13:31,390
and so on and so forth<font color="#CCCCCC"> you can say</font><font color="#E5E5E5"> look</font>

378
00:13:28,750 --> 00:13:33,910
I the last time<font color="#CCCCCC"> I</font><font color="#E5E5E5"> published data the</font>

379
00:13:31,390 --> 00:13:37,000
<font color="#CCCCCC">time stamp was 40</font><font color="#E5E5E5"> and so now I believe</font>

380
00:13:33,910 --> 00:13:38,560
I'm publishing<font color="#CCCCCC"> timestamp</font><font color="#E5E5E5"> 41 so I can</font>

381
00:13:37,000 --> 00:13:40,120
enforce that<font color="#CCCCCC"> basically says if someone</font>

382
00:13:38,560 --> 00:13:42,699
<font color="#CCCCCC">else has already published something</font>

383
00:13:40,120 --> 00:13:44,380
<font color="#E5E5E5">then ignore what I'm saying so you can</font>

384
00:13:42,700 --> 00:13:46,600
put a matching<font color="#E5E5E5"> change tab that basically</font>

385
00:13:44,380 --> 00:13:49,480
says I expect the data to currently<font color="#E5E5E5"> be</font>

386
00:13:46,600 --> 00:13:51,370
40<font color="#E5E5E5"> if it's 41 or later than</font><font color="#CCCCCC"> me</font><font color="#E5E5E5"> some</font>

387
00:13:49,480 --> 00:13:53,620
someone<font color="#CCCCCC"> argued</font><font color="#E5E5E5"> an update or we can say I</font>

388
00:13:51,370 --> 00:13:55,000
don't<font color="#CCCCCC"> care if someone updated data</font><font color="#E5E5E5"> just</font>

389
00:13:53,620 --> 00:13:56,589
<font color="#E5E5E5">go</font><font color="#CCCCCC"> ahead and publish</font><font color="#E5E5E5"> it so</font><font color="#CCCCCC"> that's what</font>

390
00:13:55,000 --> 00:13:57,940
<font color="#E5E5E5">that change stamp of the concept is</font>

391
00:13:56,589 --> 00:13:59,890
about<font color="#E5E5E5"> it's kind of like a sequence</font>

392
00:13:57,940 --> 00:14:01,660
number<font color="#E5E5E5"> that you can use</font><font color="#CCCCCC"> to see if</font>

393
00:13:59,890 --> 00:14:03,819
anyone's<font color="#E5E5E5"> made a change or not if you</font>

394
00:14:01,660 --> 00:14:05,620
<font color="#E5E5E5">want to delete data</font><font color="#CCCCCC"> you can call ZW</font>

395
00:14:03,820 --> 00:14:09,460
delete<font color="#E5E5E5"> WF</font><font color="#CCCCCC"> stay data and then this gets</font>

396
00:14:05,620 --> 00:14:13,000
<font color="#E5E5E5">rid of it to read</font><font color="#CCCCCC"> W&F data there is a ZW</font>

397
00:14:09,460 --> 00:14:15,130
query<font color="#CCCCCC"> W&F</font><font color="#E5E5E5"> state data which</font><font color="#CCCCCC"> gives you the</font>

398
00:14:13,000 --> 00:14:17,230
data<font color="#CCCCCC"> the buffer size and the current</font>

399
00:14:15,130 --> 00:14:19,870
change stamp of the<font color="#CCCCCC"> data that you just</font>

400
00:14:17,230 --> 00:14:22,750
read<font color="#E5E5E5"> now the real power of WN f though</font>

401
00:14:19,870 --> 00:14:24,970
is that<font color="#E5E5E5"> both for consuming data and</font>

402
00:14:22,750 --> 00:14:27,100
<font color="#E5E5E5">querying data the name doesn't</font><font color="#CCCCCC"> yet have</font>

403
00:14:24,970 --> 00:14:29,050
to<font color="#CCCCCC"> be registered unless it's a temporary</font>

404
00:14:27,100 --> 00:14:30,850
name which<font color="#CCCCCC"> wouldn't make sense if it's a</font>

405
00:14:29,050 --> 00:14:32,740
<font color="#E5E5E5">persistent permanent or</font><font color="#CCCCCC"> well-known name</font>

406
00:14:30,850 --> 00:14:35,110
<font color="#E5E5E5">even if it's not been</font><font color="#CCCCCC"> registered by</font>

407
00:14:32,740 --> 00:14:37,089
<font color="#E5E5E5">anyone yet you can still publish data to</font>

408
00:14:35,110 --> 00:14:38,800
it<font color="#E5E5E5"> the kernel will basically allocate a</font>

409
00:14:37,089 --> 00:14:40,750
buffer where it says<font color="#E5E5E5"> okay for this name</font>

410
00:14:38,800 --> 00:14:42,520
that I don't know about yet<font color="#E5E5E5"> here's the</font>

411
00:14:40,750 --> 00:14:44,230
data<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> gonna be associated with it</font><font color="#E5E5E5"> so</font>

412
00:14:42,520 --> 00:14:46,329
when the consumer or<font color="#CCCCCC"> the publisher comes</font>

413
00:14:44,230 --> 00:14:47,680
in and says now<font color="#E5E5E5"> this name exists well</font>

414
00:14:46,330 --> 00:14:49,600
then I could<font color="#CCCCCC"> just</font><font color="#E5E5E5"> associate the data</font>

415
00:14:47,680 --> 00:14:51,040
that<font color="#E5E5E5"> was already</font><font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of associate with</font>

416
00:14:49,600 --> 00:14:53,200
the name<font color="#CCCCCC"> even</font><font color="#E5E5E5"> though the name wasn't</font>

417
00:14:51,040 --> 00:14:55,390
even<font color="#E5E5E5"> published yet and vice versa I can</font>

418
00:14:53,200 --> 00:14:57,010
ask for<font color="#E5E5E5"> data even though the publisher</font>

419
00:14:55,390 --> 00:14:58,480
may not have published it because I

420
00:14:57,010 --> 00:15:00,430
could<font color="#E5E5E5"> have it from a previous reboot for</font>

421
00:14:58,480 --> 00:15:02,880
example<font color="#E5E5E5"> so this kind of this associates</font>

422
00:15:00,430 --> 00:15:05,140
the data<font color="#E5E5E5"> associated</font><font color="#CCCCCC"> with a state before</font>

423
00:15:02,880 --> 00:15:07,089
<font color="#E5E5E5">without the state needing to really</font>

424
00:15:05,140 --> 00:15:08,319
<font color="#E5E5E5">exist</font><font color="#CCCCCC"> yet</font><font color="#E5E5E5"> with the difference of</font><font color="#CCCCCC"> ten</font>

425
00:15:07,089 --> 00:15:10,000
with<font color="#CCCCCC"> the exception of temporary names</font>

426
00:15:08,320 --> 00:15:12,100
<font color="#E5E5E5">because obviously temporary names are</font>

427
00:15:10,000 --> 00:15:13,570
completely based on<font color="#E5E5E5"> a sequence number</font>

428
00:15:12,100 --> 00:15:15,760
that<font color="#E5E5E5"> gets updated</font><font color="#CCCCCC"> every time you reboot</font>

429
00:15:13,570 --> 00:15:16,779
<font color="#E5E5E5">if I probably get up to a temporary name</font>

430
00:15:15,760 --> 00:15:19,240
before<font color="#E5E5E5"> the</font><font color="#CCCCCC"> temporary name gets</font>

431
00:15:16,779 --> 00:15:20,320
registered<font color="#CCCCCC"> I don't know how to</font><font color="#E5E5E5"> associate</font>

432
00:15:19,240 --> 00:15:21,700
those two things<font color="#E5E5E5"> right</font><font color="#CCCCCC"> because there's</font>

433
00:15:20,320 --> 00:15:24,640
there's<font color="#E5E5E5"> no kind of static information</font>

434
00:15:21,700 --> 00:15:27,190
<font color="#E5E5E5">associated with it and so when you query</font>

435
00:15:24,640 --> 00:15:29,140
or when you publish<font color="#CCCCCC"> if the name doesn't</font>

436
00:15:27,190 --> 00:15:30,880
<font color="#E5E5E5">exist there'll be an instance created</font>

437
00:15:29,140 --> 00:15:32,560
anyway<font color="#E5E5E5"> and then we got BL talks about</font>

438
00:15:30,880 --> 00:15:34,450
the data structures<font color="#CCCCCC"> you'll see that</font><font color="#E5E5E5"> that</font>

439
00:15:32,560 --> 00:15:36,339
<font color="#E5E5E5">name instance data structure</font>

440
00:15:34,450 --> 00:15:38,139
so<font color="#E5E5E5"> so far we can see we've seen that you</font>

441
00:15:36,339 --> 00:15:40,750
<font color="#E5E5E5">can create a state</font><font color="#CCCCCC"> name delete it and</font>

442
00:15:38,139 --> 00:15:43,089
<font color="#E5E5E5">then publish or read data from it but</font>

443
00:15:40,750 --> 00:15:44,860
what if the data<font color="#CCCCCC"> doesn't</font><font color="#E5E5E5"> exist yet well</font>

444
00:15:43,089 --> 00:15:47,230
then the last thing<font color="#E5E5E5"> you can do is set</font><font color="#CCCCCC"> up</font>

445
00:15:44,860 --> 00:15:48,790
a notification<font color="#E5E5E5"> and so there's a bunch of</font>

446
00:15:47,230 --> 00:15:52,000
system calls<font color="#E5E5E5"> that allow you to be</font>

447
00:15:48,790 --> 00:15:54,130
<font color="#CCCCCC">notified whenever data gets published to</font>

448
00:15:52,000 --> 00:15:57,250
a state<font color="#CCCCCC"> name</font><font color="#E5E5E5"> the way this works is you</font>

449
00:15:54,130 --> 00:15:59,439
<font color="#E5E5E5">call an API</font><font color="#CCCCCC"> zlw set</font><font color="#E5E5E5"> W&F process</font>

450
00:15:57,250 --> 00:16:01,990
notification event<font color="#E5E5E5"> to first associate an</font>

451
00:15:59,440 --> 00:16:04,089
event with<font color="#E5E5E5"> your process then you call a</font>

452
00:16:01,990 --> 00:16:06,820
<font color="#E5E5E5">different API subscribe state change</font>

453
00:16:04,089 --> 00:16:08,350
that lets you specify<font color="#E5E5E5"> that you want</font><font color="#CCCCCC"> to</font>

454
00:16:06,820 --> 00:16:10,540
be notified<font color="#E5E5E5"> when certain things happen</font>

455
00:16:08,350 --> 00:16:12,220
to receive to the state either<font color="#E5E5E5"> when data</font>

456
00:16:10,540 --> 00:16:14,560
gets published<font color="#E5E5E5"> or when the state gets</font>

457
00:16:12,220 --> 00:16:16,000
destroyed<font color="#E5E5E5"> or you can even register to</font>

458
00:16:14,560 --> 00:16:17,768
know when someone has<font color="#E5E5E5"> subscribed the</font>

459
00:16:16,000 --> 00:16:19,839
event<font color="#E5E5E5"> it's basically called a meta</font>

460
00:16:17,769 --> 00:16:21,370
notification<font color="#CCCCCC"> it tells you when anyone</font>

461
00:16:19,839 --> 00:16:23,350
else has also<font color="#E5E5E5"> subscribed for the thing</font>

462
00:16:21,370 --> 00:16:24,970
you're<font color="#E5E5E5"> also subscribing for</font><font color="#CCCCCC"> they you</font>

463
00:16:23,350 --> 00:16:27,190
could<font color="#CCCCCC"> that's something you can do then</font>

464
00:16:24,970 --> 00:16:29,079
<font color="#E5E5E5">your event will get signaled so you wait</font>

465
00:16:27,190 --> 00:16:31,720
<font color="#CCCCCC">on</font><font color="#E5E5E5"> your event handle every time you get</font>

466
00:16:29,079 --> 00:16:33,339
signaled you call get completion<font color="#CCCCCC"> W&F</font>

467
00:16:31,720 --> 00:16:35,050
<font color="#CCCCCC">state subscription</font><font color="#E5E5E5"> this gives you a</font>

468
00:16:33,339 --> 00:16:36,760
delivery descriptor<font color="#CCCCCC"> that basically shows</font>

469
00:16:35,050 --> 00:16:38,949
you<font color="#E5E5E5"> the last update</font><font color="#CCCCCC"> that was just pushed</font>

470
00:16:36,760 --> 00:16:41,589
what data what size what is<font color="#E5E5E5"> the change</font>

471
00:16:38,949 --> 00:16:43,839
tab<font color="#E5E5E5"> that caused you to wake up and so</font>

472
00:16:41,589 --> 00:16:45,820
initially<font color="#E5E5E5"> I had</font><font color="#CCCCCC"> a POC that</font><font color="#E5E5E5"> use these</font>

473
00:16:43,839 --> 00:16:47,470
system calls<font color="#E5E5E5"> to basically be notified</font>

474
00:16:45,820 --> 00:16:49,510
and<font color="#E5E5E5"> I was trying to hit various</font>

475
00:16:47,470 --> 00:16:51,940
keystrokes<font color="#CCCCCC"> launch various apps and see</font>

476
00:16:49,510 --> 00:16:53,970
what<font color="#CCCCCC"> wmf IDs were being you</font><font color="#E5E5E5"> know lighted</font>

477
00:16:51,940 --> 00:16:55,930
up when I was when I was doing<font color="#E5E5E5"> things</font>

478
00:16:53,970 --> 00:16:57,459
<font color="#CCCCCC">eventually I'm</font><font color="#E5E5E5"> not sure</font><font color="#CCCCCC"> the code with</font>

479
00:16:55,930 --> 00:16:59,140
Gabrielle<font color="#CCCCCC"> she found out</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> I wasn't</font>

480
00:16:57,459 --> 00:17:01,300
working<font color="#CCCCCC"> on some of</font><font color="#E5E5E5"> her systems that my</font>

481
00:16:59,140 --> 00:17:04,599
code is basically<font color="#CCCCCC"> failing and the reason</font>

482
00:17:01,300 --> 00:17:06,730
<font color="#CCCCCC">for that is only</font><font color="#E5E5E5"> a single</font><font color="#CCCCCC"> event can be</font>

483
00:17:04,599 --> 00:17:08,579
associated with<font color="#E5E5E5"> the process</font><font color="#CCCCCC"> so as soon</font>

484
00:17:06,730 --> 00:17:11,890
as someone<font color="#E5E5E5"> wants to be notified</font><font color="#CCCCCC"> about</font>

485
00:17:08,579 --> 00:17:13,809
1wf<font color="#E5E5E5"> state no one else can be notified</font>

486
00:17:11,890 --> 00:17:15,579
about any<font color="#E5E5E5"> other states because</font><font color="#CCCCCC"> only one</font>

487
00:17:13,809 --> 00:17:17,260
event<font color="#CCCCCC"> can be associated with</font><font color="#E5E5E5"> one process</font>

488
00:17:15,579 --> 00:17:19,569
it's like<font color="#E5E5E5"> well</font><font color="#CCCCCC"> how the heck</font><font color="#E5E5E5"> does this</font>

489
00:17:17,260 --> 00:17:22,059
work then if there's multiple<font color="#CCCCCC"> WF</font>

490
00:17:19,569 --> 00:17:24,609
consumers<font color="#E5E5E5"> and it turns out that in</font><font color="#CCCCCC"> 80</font>

491
00:17:22,059 --> 00:17:26,319
<font color="#E5E5E5">DLL there's a higher level API you're</font>

492
00:17:24,609 --> 00:17:28,510
not supposed to directly call<font color="#E5E5E5"> the system</font>

493
00:17:26,319 --> 00:17:31,149
<font color="#CCCCCC">calls those are actually meant for ntdll</font>

494
00:17:28,510 --> 00:17:33,429
itself<font color="#E5E5E5"> which does</font><font color="#CCCCCC"> assess</font><font color="#E5E5E5"> process</font><font color="#CCCCCC"> startup</font>

495
00:17:31,150 --> 00:17:34,929
<font color="#CCCCCC">registers its own event</font><font color="#E5E5E5"> and then</font>

496
00:17:33,429 --> 00:17:37,900
everyone else<font color="#E5E5E5"> is basically getting</font>

497
00:17:34,929 --> 00:17:40,330
<font color="#CCCCCC">multiplexed</font><font color="#E5E5E5"> my</font><font color="#CCCCCC"> NT DLL and so</font><font color="#E5E5E5"> there's an</font>

498
00:17:37,900 --> 00:17:42,190
<font color="#E5E5E5">API called RTL</font><font color="#CCCCCC"> subscribe W&F state</font>

499
00:17:40,330 --> 00:17:44,799
change notification where you're asking

500
00:17:42,190 --> 00:17:47,200
ntdll<font color="#E5E5E5"> on your behalf to subscribe for</font>

501
00:17:44,799 --> 00:17:48,470
this<font color="#E5E5E5"> it uses</font><font color="#CCCCCC"> its event</font><font color="#E5E5E5"> and every time</font>

502
00:17:47,200 --> 00:17:50,360
it's even<font color="#E5E5E5"> get signal</font>

503
00:17:48,470 --> 00:17:52,430
it goes over<font color="#E5E5E5"> the list of all the current</font>

504
00:17:50,360 --> 00:17:54,050
subscribers in<font color="#E5E5E5"> the process figures out</font>

505
00:17:52,430 --> 00:17:56,630
who owns this particularly event and

506
00:17:54,050 --> 00:17:57,379
then notifies that<font color="#E5E5E5"> subscriber by issuing</font>

507
00:17:56,630 --> 00:17:59,360
a<font color="#CCCCCC"> callback</font>

508
00:17:57,380 --> 00:18:01,310
so you're<font color="#E5E5E5"> supposed to rely on this not</font>

509
00:17:59,360 --> 00:18:02,929
<font color="#E5E5E5">on basically calling syscalls yourself</font>

510
00:18:01,310 --> 00:18:04,520
if you want the notifications to work

511
00:18:02,930 --> 00:18:06,080
and this will have<font color="#E5E5E5"> some interesting</font><font color="#CCCCCC"> use</font>

512
00:18:04,520 --> 00:18:08,210
cases<font color="#E5E5E5"> I want</font><font color="#CCCCCC"> to talk about forensics and</font>

513
00:18:06,080 --> 00:18:10,070
some attack surfaces so<font color="#CCCCCC"> that callback</font>

514
00:18:08,210 --> 00:18:12,380
basically gives you the<font color="#E5E5E5"> name the stamp</font>

515
00:18:10,070 --> 00:18:13,850
the buffer and<font color="#CCCCCC"> the buffer size and this</font>

516
00:18:12,380 --> 00:18:15,410
<font color="#E5E5E5">is how inside of your process you can</font>

517
00:18:13,850 --> 00:18:17,570
know<font color="#CCCCCC"> that there's data</font><font color="#E5E5E5"> has been</font>

518
00:18:15,410 --> 00:18:20,180
published for one of these<font color="#CCCCCC"> W&F state IDs</font>

519
00:18:17,570 --> 00:18:22,490
that you're<font color="#E5E5E5"> registered for now there</font>

520
00:18:20,180 --> 00:18:25,070
<font color="#E5E5E5">also is a</font><font color="#CCCCCC"> kernel mode API</font><font color="#E5E5E5"> so in kernel</font>

521
00:18:22,490 --> 00:18:26,720
<font color="#CCCCCC">mode there also is a e^x</font><font color="#E5E5E5"> subscribe W&F</font>

522
00:18:25,070 --> 00:18:28,610
state change which<font color="#E5E5E5"> let's do the same</font>

523
00:18:26,720 --> 00:18:30,530
<font color="#E5E5E5">thing as the kernel driver and then the</font>

524
00:18:28,610 --> 00:18:33,080
driver gets that<font color="#E5E5E5"> gets a call back and</font>

525
00:18:30,530 --> 00:18:35,000
the driver calls<font color="#E5E5E5"> e^x query</font><font color="#CCCCCC"> W&F stay data</font>

526
00:18:33,080 --> 00:18:38,179
to read the<font color="#E5E5E5"> information that's there so</font>

527
00:18:35,000 --> 00:18:40,280
<font color="#E5E5E5">both drivers can publish and consume WN</font>

528
00:18:38,180 --> 00:18:42,530
f data both drivers and<font color="#E5E5E5"> user space</font>

529
00:18:40,280 --> 00:18:44,660
applications can can get notifications

530
00:18:42,530 --> 00:18:46,610
<font color="#E5E5E5">for W and F as well so you can</font>

531
00:18:44,660 --> 00:18:48,260
<font color="#E5E5E5">communicate across process boundaries</font>

532
00:18:46,610 --> 00:18:49,939
across session boundaries across user

533
00:18:48,260 --> 00:18:51,260
kernel boundaries<font color="#E5E5E5"> and obviously it's</font>

534
00:18:49,940 --> 00:18:53,150
very<font color="#E5E5E5"> interesting when you</font><font color="#CCCCCC"> have you know</font>

535
00:18:51,260 --> 00:18:55,370
<font color="#E5E5E5">an IPC mechanism that's that's this rich</font>

536
00:18:53,150 --> 00:18:57,260
<font color="#E5E5E5">that crosses these many boundaries and</font>

537
00:18:55,370 --> 00:18:58,939
<font color="#CCCCCC">kind of hands the interest of looking at</font>

538
00:18:57,260 --> 00:19:00,500
it in more detail because no one's

539
00:18:58,940 --> 00:19:04,310
really talked about<font color="#E5E5E5"> the W</font><font color="#CCCCCC"> and F in the</font>

540
00:19:00,500 --> 00:19:06,260
past so that's kind of the basic basics

541
00:19:04,310 --> 00:19:07,639
of how it works<font color="#E5E5E5"> and we're gonna publish</font>

542
00:19:06,260 --> 00:19:09,320
<font color="#E5E5E5">all these slides obviously so you're not</font>

543
00:19:07,640 --> 00:19:11,510
<font color="#E5E5E5">have</font><font color="#CCCCCC"> to memorize how those api's work</font>

544
00:19:09,320 --> 00:19:13,280
<font color="#CCCCCC">and what's good is</font><font color="#E5E5E5"> that they</font>

545
00:19:11,510 --> 00:19:15,440
accidentally all<font color="#CCCCCC"> leak them in an old</font>

546
00:19:13,280 --> 00:19:16,850
<font color="#E5E5E5">windows header file so they're available</font>

547
00:19:15,440 --> 00:19:19,250
you know if you know where<font color="#E5E5E5"> to look but</font>

548
00:19:16,850 --> 00:19:20,810
you'll have<font color="#E5E5E5"> the slides sound as well so</font>

549
00:19:19,250 --> 00:19:22,550
next up I'll pass it off to Gibby to

550
00:19:20,810 --> 00:19:25,970
talk about some<font color="#E5E5E5"> of the data structures</font>

551
00:19:22,550 --> 00:19:30,409
<font color="#CCCCCC">that are involved in the internals</font><font color="#E5E5E5"> of</font>

552
00:19:25,970 --> 00:19:32,510
keeping track<font color="#CCCCCC"> of all this data so now</font>

553
00:19:30,410 --> 00:19:36,020
you have basically prudent<font color="#E5E5E5"> and</font>

554
00:19:32,510 --> 00:19:41,000
understanding about<font color="#E5E5E5"> the WWN</font><font color="#CCCCCC"> F mechanism</font>

555
00:19:36,020 --> 00:19:44,870
so let's dive into the structures so<font color="#CCCCCC"> W&F</font>

556
00:19:41,000 --> 00:19:47,780
events is indentified in memory as a

557
00:19:44,870 --> 00:19:49,760
<font color="#E5E5E5">name instance these structures</font><font color="#CCCCCC"> basically</font>

558
00:19:47,780 --> 00:19:53,780
<font color="#CCCCCC">or the all the</font><font color="#E5E5E5"> information</font><font color="#CCCCCC"> rich it to</font>

559
00:19:49,760 --> 00:19:57,050
<font color="#E5E5E5">the event</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> example you can</font><font color="#CCCCCC"> find the</font>

560
00:19:53,780 --> 00:20:01,480
state name the scope in<font color="#CCCCCC"> which the event</font>

561
00:19:57,050 --> 00:20:05,600
<font color="#E5E5E5">occurs so</font><font color="#CCCCCC"> security descriptor</font><font color="#E5E5E5"> and so on</font>

562
00:20:01,480 --> 00:20:09,350
you may notice<font color="#CCCCCC"> that the first field of</font>

563
00:20:05,600 --> 00:20:11,810
<font color="#E5E5E5">the structures is tiny tiny circles</font>

564
00:20:09,350 --> 00:20:16,189
<font color="#E5E5E5">names</font><font color="#CCCCCC"> the W&F context vida</font>

565
00:20:11,810 --> 00:20:19,820
in fact this<font color="#E5E5E5"> to choose</font><font color="#CCCCCC"> keeps information</font>

566
00:20:16,190 --> 00:20:23,510
<font color="#E5E5E5">about</font><font color="#CCCCCC"> the type of</font><font color="#E5E5E5"> structures and</font><font color="#CCCCCC"> decides</font>

567
00:20:19,820 --> 00:20:26,600
and in fact most<font color="#E5E5E5"> of the deputy minutes</font>

568
00:20:23,510 --> 00:20:29,810
to choose as<font color="#E5E5E5"> these videos so it's kind</font>

569
00:20:26,600 --> 00:20:32,419
of convenient when you're in memory and

570
00:20:29,810 --> 00:20:37,550
your 1 25 something<font color="#E5E5E5"> you don't know</font>

571
00:20:32,420 --> 00:20:40,010
<font color="#E5E5E5">because</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> just have so</font><font color="#CCCCCC"> Ada</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> also</font>

572
00:20:37,550 --> 00:20:43,850
things such<font color="#CCCCCC"> as interesting is</font><font color="#E5E5E5"> that in</font>

573
00:20:40,010 --> 00:20:46,840
the instance name you have a pointer to

574
00:20:43,850 --> 00:20:51,409
<font color="#E5E5E5">the</font><font color="#CCCCCC"> data that will be</font><font color="#E5E5E5"> sent to</font>

575
00:20:46,840 --> 00:20:54,409
subscribers<font color="#E5E5E5"> this data</font><font color="#CCCCCC"> start with a</font>

576
00:20:51,410 --> 00:20:57,680
<font color="#E5E5E5">double</font><font color="#CCCCCC"> unit state data structures that</font>

577
00:20:54,410 --> 00:21:01,340
gives information about<font color="#E5E5E5"> the size</font><font color="#CCCCCC"> of the</font>

578
00:20:57,680 --> 00:21:07,370
data and for example<font color="#E5E5E5"> the number</font><font color="#CCCCCC"> of time</font>

579
00:21:01,340 --> 00:21:09,860
<font color="#E5E5E5">it</font><font color="#CCCCCC"> has been updated as Alex told you an</font>

580
00:21:07,370 --> 00:21:12,639
event occurs in a specific<font color="#E5E5E5"> scope so</font>

581
00:21:09,860 --> 00:21:18,350
since the<font color="#CCCCCC"> scopes are represented as</font>

582
00:21:12,640 --> 00:21:22,280
scope instances<font color="#CCCCCC"> just cut this cap</font>

583
00:21:18,350 --> 00:21:27,500
<font color="#E5E5E5">instances gives all</font><font color="#CCCCCC"> of the stuff</font><font color="#E5E5E5"> needed</font>

584
00:21:22,280 --> 00:21:31,700
<font color="#CCCCCC">to identify</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> cap and they also give</font>

585
00:21:27,500 --> 00:21:34,850
<font color="#CCCCCC">got a list of name instance that are</font>

586
00:21:31,700 --> 00:21:37,130
available<font color="#E5E5E5"> on this</font><font color="#CCCCCC"> cup well when I said a</font>

587
00:21:34,850 --> 00:21:40,810
<font color="#E5E5E5">list is not a list it's more like a</font>

588
00:21:37,130 --> 00:21:45,980
binary tree<font color="#E5E5E5"> that enables a quick lookup</font>

589
00:21:40,810 --> 00:21:49,700
and all<font color="#CCCCCC"> these scape instances are stored</font>

590
00:21:45,980 --> 00:21:53,420
in<font color="#CCCCCC"> lists and</font><font color="#E5E5E5"> tree and escape map</font><font color="#CCCCCC"> enables</font>

591
00:21:49,700 --> 00:21:56,840
to keep track of<font color="#CCCCCC"> all</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font>

592
00:21:53,420 --> 00:22:01,970
<font color="#E5E5E5">find the scope map in the server side or</font>

593
00:21:56,840 --> 00:22:06,610
Global's<font color="#E5E5E5"> and basically yeah it's bound</font>

594
00:22:01,970 --> 00:22:08,509
to one side but for bond<font color="#E5E5E5"> to</font><font color="#CCCCCC"> other side</font>

595
00:22:06,610 --> 00:22:11,748
<font color="#CCCCCC">okay so</font>

596
00:22:08,509 --> 00:22:13,669
when a consumer<font color="#E5E5E5"> wants to subscribe an</font>

597
00:22:11,749 --> 00:22:17,570
event<font color="#CCCCCC"> it</font><font color="#E5E5E5"> created</font><font color="#CCCCCC"> the Burien f</font>

598
00:22:13,669 --> 00:22:19,429
subscription this situation<font color="#E5E5E5"> basically</font>

599
00:22:17,570 --> 00:22:26,379
stores all the information<font color="#CCCCCC"> needed to</font>

600
00:22:19,429 --> 00:22:30,440
<font color="#E5E5E5">have</font><font color="#CCCCCC"> four W&F</font><font color="#E5E5E5"> to to notify the consumer</font>

601
00:22:26,379 --> 00:22:33,080
it's also<font color="#CCCCCC"> star as</font><font color="#E5E5E5"> the state</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

602
00:22:30,440 --> 00:22:37,479
switch question and<font color="#E5E5E5"> the submitted the</font>

603
00:22:33,080 --> 00:22:41,779
way so<font color="#E5E5E5"> the option in fact</font>

604
00:22:37,479 --> 00:22:45,769
okay last structures in canals<font color="#CCCCCC"> i</font>

605
00:22:41,779 --> 00:22:48,649
<font color="#CCCCCC">represents</font><font color="#E5E5E5"> is the process context in</font>

606
00:22:45,769 --> 00:22:51,499
fact the<font color="#CCCCCC"> ISIS structures that keep</font>

607
00:22:48,649 --> 00:22:55,458
tracks of all the different objects

608
00:22:51,499 --> 00:23:02,450
<font color="#E5E5E5">ready to a process and you can find it</font>

609
00:22:55,459 --> 00:23:04,369
in the<font color="#CCCCCC"> a process object so oh yeah you</font>

610
00:23:02,450 --> 00:23:06,379
may<font color="#E5E5E5"> notice that the last field is</font>

611
00:23:04,369 --> 00:23:09,079
actually<font color="#E5E5E5"> syndication</font><font color="#CCCCCC"> in notification</font>

612
00:23:06,379 --> 00:23:12,799
event so that mean yeah you can<font color="#CCCCCC"> just</font>

613
00:23:09,079 --> 00:23:17,089
have one<font color="#E5E5E5"> event</font><font color="#CCCCCC"> as Alex told you</font><font color="#E5E5E5"> so how's</font>

614
00:23:12,799 --> 00:23:19,519
the<font color="#CCCCCC"> WEF managed to circulant</font><font color="#E5E5E5"> program of</font>

615
00:23:17,089 --> 00:23:23,899
<font color="#E5E5E5">having only one single processed</font>

616
00:23:19,519 --> 00:23:26,509
notification well when you<font color="#CCCCCC"> you even when</font>

617
00:23:23,899 --> 00:23:29,149
you<font color="#E5E5E5"> are using</font><font color="#CCCCCC"> high-level api's</font><font color="#E5E5E5"> you</font>

618
00:23:26,509 --> 00:23:32,169
actually<font color="#CCCCCC"> are dealings with a set of user</font>

619
00:23:29,149 --> 00:23:35,478
<font color="#CCCCCC">none structures this</font><font color="#E5E5E5"> another's</font>

620
00:23:32,169 --> 00:23:38,149
multiplexing of subscriptions<font color="#CCCCCC"> and to</font>

621
00:23:35,479 --> 00:23:42,519
keep<font color="#E5E5E5"> track</font><font color="#CCCCCC"> of all</font><font color="#E5E5E5"> these different object</font>

622
00:23:38,149 --> 00:23:46,218
<font color="#E5E5E5">you have the subscription table and</font>

623
00:23:42,519 --> 00:23:51,440
basically<font color="#CCCCCC"> if you have the sub consumer</font>

624
00:23:46,219 --> 00:23:55,479
that<font color="#E5E5E5"> want to</font><font color="#CCCCCC"> subscribe an event you will</font>

625
00:23:51,440 --> 00:23:58,309
create a<font color="#E5E5E5"> W&F name its description this</font>

626
00:23:55,479 --> 00:24:02,209
structures is a unique for<font color="#E5E5E5"> a state name</font>

627
00:23:58,309 --> 00:24:06,469
in the process context<font color="#E5E5E5"> and then you will</font>

628
00:24:02,209 --> 00:24:09,079
<font color="#E5E5E5">also</font><font color="#CCCCCC"> have W net user subscription to of</font>

629
00:24:06,469 --> 00:24:14,479
the information about the notification

630
00:24:09,079 --> 00:24:17,510
mechanism for<font color="#E5E5E5"> the soup consumer so this</font>

631
00:24:14,479 --> 00:24:19,940
way you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> have one</font>

632
00:24:17,510 --> 00:24:21,799
the various names description and

633
00:24:19,940 --> 00:24:26,960
several the<font color="#CCCCCC"> Burien excuse of</font>

634
00:24:21,799 --> 00:24:29,840
subscription so that's how the<font color="#CCCCCC"> kaepa</font><font color="#E5E5E5"> the</font>

635
00:24:26,960 --> 00:24:35,299
issue is a managed and I<font color="#E5E5E5"> think that's</font>

636
00:24:29,840 --> 00:24:38,149
quite<font color="#CCCCCC"> cool okay so</font><font color="#E5E5E5"> I finished those are</font>

637
00:24:35,299 --> 00:24:41,168
<font color="#E5E5E5">structures and I will present some</font><font color="#CCCCCC"> tours</font>

638
00:24:38,149 --> 00:24:44,059
<font color="#CCCCCC">oh well we</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> making some kills</font>

639
00:24:41,169 --> 00:24:46,630
so as you can<font color="#E5E5E5"> see there's a lot of</font>

640
00:24:44,059 --> 00:24:49,370
structures and it's quite an answer to

641
00:24:46,630 --> 00:24:52,669
keep track<font color="#CCCCCC"> of all</font><font color="#E5E5E5"> of them to intensify</font>

642
00:24:49,370 --> 00:24:57,139
them when you're debugging<font color="#CCCCCC"> every you</font>

643
00:24:52,669 --> 00:25:00,860
have let you<font color="#E5E5E5"> win the</font><font color="#CCCCCC"> back command which</font>

644
00:24:57,139 --> 00:25:02,899
<font color="#CCCCCC">is called bang</font><font color="#E5E5E5"> W&F that's provide and</font>

645
00:25:00,860 --> 00:25:05,539
play relevant information about<font color="#E5E5E5"> the</font>

646
00:25:02,899 --> 00:25:07,699
<font color="#E5E5E5">structures the thing is it doesn't work</font>

647
00:25:05,539 --> 00:25:10,010
<font color="#CCCCCC">out of the box</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> it's realized of</font>

648
00:25:07,700 --> 00:25:15,200
the symbols<font color="#E5E5E5"> and</font><font color="#CCCCCC"> obviously</font><font color="#E5E5E5"> we don't have</font>

649
00:25:10,010 --> 00:25:18,470
<font color="#CCCCCC">any symbols but you can fix</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> by adding</font>

650
00:25:15,200 --> 00:25:24,880
<font color="#E5E5E5">the</font><font color="#CCCCCC"> structure</font><font color="#E5E5E5"> definition to your PD</font><font color="#CCCCCC"> B's</font>

651
00:25:18,470 --> 00:25:32,240
<font color="#E5E5E5">and with that so</font><font color="#CCCCCC"> WM f is a W and F</font>

652
00:25:24,880 --> 00:25:35,090
command is working<font color="#E5E5E5"> the problem is well</font>

653
00:25:32,240 --> 00:25:37,399
<font color="#E5E5E5">even if you</font><font color="#CCCCCC"> manage to fix it you would</font>

654
00:25:35,090 --> 00:25:41,480
<font color="#E5E5E5">still have a bunch of error popping out</font>

655
00:25:37,399 --> 00:25:44,178
I think well it seemed like<font color="#CCCCCC"> ii wasn't</font>

656
00:25:41,480 --> 00:25:47,929
really finished and it's not totally

657
00:25:44,179 --> 00:25:51,260
polished yeah it's quite strange

658
00:25:47,929 --> 00:25:53,990
<font color="#E5E5E5">particularly</font><font color="#CCCCCC"> I had to patch the DLL for</font>

659
00:25:51,260 --> 00:25:55,760
for<font color="#E5E5E5"> this beings spot some</font><font color="#CCCCCC"> of the</font>

660
00:25:53,990 --> 00:25:59,059
features<font color="#CCCCCC"> so it's</font><font color="#E5E5E5"> quite strange</font>

661
00:25:55,760 --> 00:26:02,240
<font color="#E5E5E5">so for</font><font color="#CCCCCC"> artists reason I decided to</font>

662
00:25:59,059 --> 00:26:05,120
<font color="#CCCCCC">create</font><font color="#E5E5E5"> my own extension it's nothing</font>

663
00:26:02,240 --> 00:26:08,360
fancy<font color="#CCCCCC"> in basically do all the</font><font color="#E5E5E5"> things at</font>

664
00:26:05,120 --> 00:26:12,199
the<font color="#CCCCCC"> command line the command</font><font color="#E5E5E5"> does</font>

665
00:26:08,360 --> 00:26:15,709
already but it doesn't rely<font color="#CCCCCC"> on your PB</font>

666
00:26:12,200 --> 00:26:18,340
symbols so it should work out<font color="#E5E5E5"> of the box</font>

667
00:26:15,710 --> 00:26:18,340
<font color="#CCCCCC">and smoothly</font>

668
00:26:18,880 --> 00:26:25,010
<font color="#E5E5E5">nothing region</font><font color="#CCCCCC"> I created a tiny</font><font color="#E5E5E5"> Python</font>

669
00:26:24,019 --> 00:26:28,629
modules

670
00:26:25,010 --> 00:26:28,629
thanks to your script

671
00:26:28,790 --> 00:26:36,168
for in a<font color="#E5E5E5"> ping communication ya</font><font color="#CCCCCC"> deberías</font>

672
00:26:33,250 --> 00:26:39,980
<font color="#E5E5E5">basically with this module you can read</font>

673
00:26:36,169 --> 00:26:43,790
and write to<font color="#E5E5E5"> existing name instance or</font>

674
00:26:39,980 --> 00:26:46,880
<font color="#CCCCCC">even create a new temporary</font><font color="#E5E5E5"> state name</font>

675
00:26:43,790 --> 00:26:49,370
<font color="#CCCCCC">for creating some kind</font><font color="#E5E5E5"> of server side</font>

676
00:26:46,880 --> 00:26:52,750
and the<font color="#CCCCCC"> wizard supply inside you can</font>

677
00:26:49,370 --> 00:26:57,559
<font color="#E5E5E5">just create it and it's pretty</font><font color="#CCCCCC"> pretty</font>

678
00:26:52,750 --> 00:27:01,120
<font color="#CCCCCC">easy</font><font color="#E5E5E5"> to use</font><font color="#CCCCCC"> I show you an example well I</font>

679
00:26:57,559 --> 00:27:03,760
just<font color="#E5E5E5"> created a server and</font><font color="#CCCCCC"> youngsaeng</font>

680
00:27:01,120 --> 00:27:09,320
<font color="#E5E5E5">second</font><font color="#CCCCCC"> join cakes</font>

681
00:27:03,760 --> 00:27:12,320
yeah<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> thanks a real fun and</font>

682
00:27:09,320 --> 00:27:14,960
<font color="#E5E5E5">apparently this</font><font color="#CCCCCC"> is what goes for not</font>

683
00:27:12,320 --> 00:27:16,668
very fancy it's just she just<font color="#E5E5E5"> put 50</font>

684
00:27:14,960 --> 00:27:19,400
commands<font color="#E5E5E5"> in there and that are super</font>

685
00:27:16,669 --> 00:27:20,690
awesome but it's nothing fancy<font color="#E5E5E5"> I created</font>

686
00:27:19,400 --> 00:27:22,429
something that's<font color="#E5E5E5"> really not fancy which</font>

687
00:27:20,690 --> 00:27:26,210
is a little<font color="#CCCCCC"> see tool and I don't</font><font color="#E5E5E5"> do</font>

688
00:27:22,429 --> 00:27:28,340
<font color="#E5E5E5">Python because</font><font color="#CCCCCC"> you know I suck so this</font>

689
00:27:26,210 --> 00:27:30,830
<font color="#CCCCCC">see tool</font><font color="#E5E5E5"> WF dump and basically lets you</font>

690
00:27:28,340 --> 00:27:32,000
<font color="#E5E5E5">do is just dump all the state names and</font>

691
00:27:30,830 --> 00:27:33,740
I'll do a little<font color="#E5E5E5"> demo</font>

692
00:27:32,000 --> 00:27:35,240
it lets you brute force state names as

693
00:27:33,740 --> 00:27:36,530
well should have how<font color="#E5E5E5"> actually you can</font>

694
00:27:35,240 --> 00:27:39,260
<font color="#E5E5E5">root for</font><font color="#CCCCCC"> the names that are</font><font color="#E5E5E5"> not</font>

695
00:27:36,530 --> 00:27:41,809
<font color="#CCCCCC">well-known</font><font color="#E5E5E5"> lets you read a state name</font>

696
00:27:39,260 --> 00:27:44,960
right into a state name or register<font color="#CCCCCC"> for</font>

697
00:27:41,809 --> 00:27:47,750
a notification on<font color="#CCCCCC"> a state name</font><font color="#E5E5E5"> in a very</font>

698
00:27:44,960 --> 00:27:50,510
very<font color="#E5E5E5"> simple tool</font><font color="#CCCCCC"> here's you know</font><font color="#E5E5E5"> me</font>

699
00:27:47,750 --> 00:27:52,220
running it with with<font color="#E5E5E5"> Daphne saying you</font>

700
00:27:50,510 --> 00:27:55,010
know just<font color="#E5E5E5"> just dump all the states and</font>

701
00:27:52,220 --> 00:27:57,620
<font color="#E5E5E5">you know it just starts dumping all the</font>

702
00:27:55,010 --> 00:27:59,450
<font color="#CCCCCC">WF</font><font color="#E5E5E5"> IDs some of these you're gonna see</font>

703
00:27:57,620 --> 00:28:01,790
look pretty interesting and we're<font color="#CCCCCC"> gonna</font>

704
00:27:59,450 --> 00:28:04,610
<font color="#CCCCCC">talk about</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> very soon kind of tells</font>

705
00:28:01,790 --> 00:28:06,590
you you know if there's system<font color="#CCCCCC"> wiry door</font>

706
00:28:04,610 --> 00:28:09,770
for process if you have<font color="#E5E5E5"> write access or</font>

707
00:28:06,590 --> 00:28:12,740
not<font color="#CCCCCC"> there's any current subscribers to</font>

708
00:28:09,770 --> 00:28:15,740
it if you have sorry this is the scope

709
00:28:12,740 --> 00:28:17,660
<font color="#E5E5E5">read write read only and then it gives</font>

710
00:28:15,740 --> 00:28:19,190
<font color="#E5E5E5">you kind of</font><font color="#CCCCCC"> the current</font><font color="#E5E5E5"> change stamp so</font>

711
00:28:17,660 --> 00:28:20,570
that<font color="#E5E5E5"> kind of tells you how many times</font>

712
00:28:19,190 --> 00:28:22,040
<font color="#CCCCCC">just</font><font color="#E5E5E5"> has been updated obviously if it's</font>

713
00:28:20,570 --> 00:28:25,370
zero it<font color="#E5E5E5"> means no one's ever written</font><font color="#CCCCCC"> into</font>

714
00:28:22,040 --> 00:28:27,409
this and then basically how much data is

715
00:28:25,370 --> 00:28:28,668
<font color="#E5E5E5">currently</font><font color="#CCCCCC"> nasty event</font><font color="#E5E5E5"> so once you have</font>

716
00:28:27,410 --> 00:28:30,530
the tool<font color="#E5E5E5"> to play around with obviously</font>

717
00:28:28,669 --> 00:28:32,090
<font color="#E5E5E5">the he'll probably make a lot more sense</font>

718
00:28:30,530 --> 00:28:34,010
but it's kind of something<font color="#E5E5E5"> I used</font>

719
00:28:32,090 --> 00:28:37,459
initially<font color="#CCCCCC"> to kind of figure out you know</font>

720
00:28:34,010 --> 00:28:39,080
what are<font color="#E5E5E5"> different</font><font color="#CCCCCC"> WF IDs out there that</font>

721
00:28:37,460 --> 00:28:41,659
we can start looking at<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> know</font>

722
00:28:39,080 --> 00:28:42,520
playing around<font color="#E5E5E5"> with and again many of</font>

723
00:28:41,659 --> 00:28:44,110
<font color="#E5E5E5">these</font><font color="#CCCCCC"> seem</font><font color="#E5E5E5"> very</font>

724
00:28:42,520 --> 00:28:45,730
interesting<font color="#E5E5E5"> just</font><font color="#CCCCCC"> from kind</font><font color="#E5E5E5"> of looking at</font>

725
00:28:44,110 --> 00:28:46,929
them from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> beginning</font><font color="#E5E5E5"> and I can start</font>

726
00:28:45,730 --> 00:28:48,940
dumping them<font color="#E5E5E5"> looking at a security</font>

727
00:28:46,930 --> 00:28:49,900
scriptures<font color="#E5E5E5"> and so on and so forth so</font>

728
00:28:48,940 --> 00:28:52,150
<font color="#E5E5E5">hopefully with these tools in the</font>

729
00:28:49,900 --> 00:28:53,920
<font color="#E5E5E5">extensions once we release them</font><font color="#CCCCCC"> you know</font>

730
00:28:52,150 --> 00:28:55,840
you can do<font color="#E5E5E5"> your own research and find</font>

731
00:28:53,920 --> 00:28:58,060
<font color="#E5E5E5">out more because we've literally only</font>

732
00:28:55,840 --> 00:28:59,949
scratch the<font color="#E5E5E5"> surface</font><font color="#CCCCCC"> of everything that's</font>

733
00:28:58,060 --> 00:29:01,120
out there<font color="#E5E5E5"> and</font><font color="#CCCCCC"> so let's</font><font color="#E5E5E5"> talk about about</font>

734
00:28:59,950 --> 00:29:03,550
<font color="#E5E5E5">kind of what are some of the interesting</font>

735
00:29:01,120 --> 00:29:05,469
areas<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can start poking at w enough</font>

736
00:29:03,550 --> 00:29:07,870
<font color="#E5E5E5">the first and some of the kind of</font>

737
00:29:05,470 --> 00:29:09,850
findings<font color="#CCCCCC"> that I had because some of</font><font color="#E5E5E5"> you</font>

738
00:29:07,870 --> 00:29:11,379
know me I'm I<font color="#CCCCCC"> don't do fuzzers not</font>

739
00:29:09,850 --> 00:29:13,209
<font color="#CCCCCC">because I look down on them on anything</font>

740
00:29:11,380 --> 00:29:15,730
I'm just<font color="#E5E5E5"> not a</font><font color="#CCCCCC"> fuzzer</font><font color="#E5E5E5"> person I I like</font>

741
00:29:13,210 --> 00:29:18,400
finding<font color="#CCCCCC"> these</font><font color="#E5E5E5"> on Logic issues</font><font color="#CCCCCC"> but</font>

742
00:29:15,730 --> 00:29:21,250
<font color="#E5E5E5">accidentally as I was</font><font color="#CCCCCC"> writing WF dump I</font>

743
00:29:18,400 --> 00:29:23,440
kind of turned it into a fuzzer<font color="#E5E5E5"> because</font>

744
00:29:21,250 --> 00:29:25,810
one<font color="#CCCCCC"> of the ways I wanted to see if I</font>

745
00:29:23,440 --> 00:29:28,060
have<font color="#E5E5E5"> access</font><font color="#CCCCCC"> to modify state name is</font>

746
00:29:25,810 --> 00:29:30,129
instead of<font color="#E5E5E5"> getting it</font><font color="#CCCCCC"> secured descriptor</font>

747
00:29:28,060 --> 00:29:32,290
I just tried<font color="#CCCCCC"> writing</font><font color="#E5E5E5"> into it and I said</font>

748
00:29:30,130 --> 00:29:34,450
look if<font color="#E5E5E5"> I just write</font><font color="#CCCCCC"> zero bytes what</font>

749
00:29:32,290 --> 00:29:36,129
could go wrong<font color="#CCCCCC"> right it's actually</font>

750
00:29:34,450 --> 00:29:38,170
<font color="#CCCCCC">pretty naive</font><font color="#E5E5E5"> because if you write zero</font>

751
00:29:36,130 --> 00:29:40,300
bytes you're overriding<font color="#E5E5E5"> anyone that had</font>

752
00:29:38,170 --> 00:29:42,670
any<font color="#E5E5E5"> had ever written anything in there</font>

753
00:29:40,300 --> 00:29:44,020
whose data hadn't been consumed yet<font color="#CCCCCC"> so</font>

754
00:29:42,670 --> 00:29:45,700
when the consumer<font color="#E5E5E5"> comes along they get</font>

755
00:29:44,020 --> 00:29:47,950
my zero byte payload instead of the real

756
00:29:45,700 --> 00:29:50,050
payload<font color="#E5E5E5"> also every</font><font color="#CCCCCC"> writes changes the</font>

757
00:29:47,950 --> 00:29:52,270
<font color="#CCCCCC">chained stamp so anyone that was trying</font>

758
00:29:50,050 --> 00:29:54,760
<font color="#E5E5E5">to write</font><font color="#CCCCCC"> to it</font><font color="#E5E5E5"> legitimately with</font>

759
00:29:52,270 --> 00:29:58,210
enforced change stamps<font color="#E5E5E5"> saw some other</font>

760
00:29:54,760 --> 00:30:00,160
<font color="#E5E5E5">things already</font><font color="#CCCCCC"> modify the data so it</font>

761
00:29:58,210 --> 00:30:02,020
ended up<font color="#E5E5E5"> happening</font><font color="#CCCCCC"> after I wrote zero</font>

762
00:30:00,160 --> 00:30:04,420
into every single<font color="#E5E5E5"> W and F ID on my</font>

763
00:30:02,020 --> 00:30:07,300
system<font color="#E5E5E5"> is explored just disappeared I</font>

764
00:30:04,420 --> 00:30:09,160
could never relaunch it<font color="#CCCCCC"> I rebooted</font><font color="#E5E5E5"> the</font>

765
00:30:07,300 --> 00:30:13,120
<font color="#E5E5E5">Machine and I was greeted by a black</font>

766
00:30:09,160 --> 00:30:14,680
screen<font color="#E5E5E5"> my that's not good and I had to</font>

767
00:30:13,120 --> 00:30:17,169
<font color="#CCCCCC">fix it by</font><font color="#E5E5E5"> basically going on a different</font>

768
00:30:14,680 --> 00:30:19,510
machines registry exporting all the<font color="#CCCCCC"> W</font>

769
00:30:17,170 --> 00:30:21,310
nfid data back<font color="#E5E5E5"> and I was like right data</font>

770
00:30:19,510 --> 00:30:23,620
is persistent so I probably wrote a

771
00:30:21,310 --> 00:30:25,510
bunch of zeros any persistent<font color="#CCCCCC"> W</font><font color="#E5E5E5"> enough</font>

772
00:30:23,620 --> 00:30:28,000
state ID that something gonna system

773
00:30:25,510 --> 00:30:30,580
relies on<font color="#CCCCCC"> but the</font><font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> is I</font>

774
00:30:28,000 --> 00:30:33,250
had run<font color="#E5E5E5"> I had run</font><font color="#CCCCCC"> WN f dumb</font><font color="#E5E5E5"> as a</font>

775
00:30:30,580 --> 00:30:35,620
standard user<font color="#E5E5E5"> so like Oh a standard user</font>

776
00:30:33,250 --> 00:30:38,980
<font color="#CCCCCC">King Nuka box</font><font color="#E5E5E5"> cool I think</font><font color="#CCCCCC"> I should</font><font color="#E5E5E5"> have</font>

777
00:30:35,620 --> 00:30:40,659
<font color="#E5E5E5">more research on this another thing</font><font color="#CCCCCC"> that</font>

778
00:30:38,980 --> 00:30:42,310
I did is I eventually dumped every

779
00:30:40,660 --> 00:30:44,920
single byte that<font color="#CCCCCC"> was there in every</font>

780
00:30:42,310 --> 00:30:46,929
single<font color="#E5E5E5"> W and F ID</font><font color="#CCCCCC"> both his admin both</font>

781
00:30:44,920 --> 00:30:48,250
the system both the<font color="#CCCCCC"> cemented user and a</font>

782
00:30:46,930 --> 00:30:50,560
<font color="#E5E5E5">standard user when I started reading</font>

783
00:30:48,250 --> 00:30:52,000
<font color="#E5E5E5">some</font><font color="#CCCCCC"> of the data</font><font color="#E5E5E5"> that's there I start</font>

784
00:30:50,560 --> 00:30:54,389
seeing things like you know wireless

785
00:30:52,000 --> 00:30:56,050
network names and things like pointers

786
00:30:54,390 --> 00:30:58,060
you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> they</font>

787
00:30:56,050 --> 00:30:59,770
that's privileged<font color="#E5E5E5"> across process</font>

788
00:30:58,060 --> 00:31:02,500
boundaries user boundaries<font color="#E5E5E5"> there was</font>

789
00:30:59,770 --> 00:31:05,070
some globally scoped<font color="#CCCCCC"> you know world</font>

790
00:31:02,500 --> 00:31:08,260
accessible<font color="#CCCCCC"> W nuff state names whose data</font>

791
00:31:05,070 --> 00:31:10,990
<font color="#E5E5E5">really shouldn't be exposed that way and</font>

792
00:31:08,260 --> 00:31:12,970
you know I<font color="#E5E5E5"> submitted these to nsrc last</font>

793
00:31:10,990 --> 00:31:14,920
week<font color="#E5E5E5"> because I was reminded that</font>

794
00:31:12,970 --> 00:31:16,630
actually these types of issues do matter

795
00:31:14,920 --> 00:31:18,280
information disclosure<font color="#CCCCCC"> czar considered</font>

796
00:31:16,630 --> 00:31:19,750
security boundaries<font color="#E5E5E5"> and it's hard to</font>

797
00:31:18,280 --> 00:31:21,430
<font color="#E5E5E5">keep</font><font color="#CCCCCC"> track of all that</font><font color="#E5E5E5"> so that's one</font>

798
00:31:19,750 --> 00:31:24,100
reason why<font color="#E5E5E5"> I can't share the tools or I</font>

799
00:31:21,430 --> 00:31:25,570
won't<font color="#E5E5E5"> name names because if you run the</font>

800
00:31:24,100 --> 00:31:27,790
tools you<font color="#E5E5E5"> would literally see that in</font>

801
00:31:25,570 --> 00:31:29,460
like the first<font color="#CCCCCC"> three seconds</font><font color="#E5E5E5"> so please</font>

802
00:31:27,790 --> 00:31:31,780
don't do<font color="#CCCCCC"> that wait for</font><font color="#E5E5E5"> them</font><font color="#CCCCCC"> to fix it</font>

803
00:31:29,460 --> 00:31:33,550
and<font color="#E5E5E5"> so that's why</font><font color="#CCCCCC"> these tools will come</font>

804
00:31:31,780 --> 00:31:34,570
out once<font color="#E5E5E5"> these issues are fixed because</font>

805
00:31:33,550 --> 00:31:36,280
<font color="#E5E5E5">we don't want to make it easier for</font>

806
00:31:34,570 --> 00:31:38,620
<font color="#E5E5E5">people to just rediscover the the same</font>

807
00:31:36,280 --> 00:31:41,139
<font color="#CCCCCC">bucks</font><font color="#E5E5E5"> another thing</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I have noticed</font>

808
00:31:38,620 --> 00:31:44,020
is when<font color="#E5E5E5"> I accidentally wrote some data</font>

809
00:31:41,140 --> 00:31:46,090
in one of the<font color="#CCCCCC"> WUF</font><font color="#E5E5E5"> IDs</font><font color="#CCCCCC"> I wasn't able to</font>

810
00:31:44,020 --> 00:31:48,610
<font color="#E5E5E5">launch any modern apps anymore so calc</font>

811
00:31:46,090 --> 00:31:50,709
<font color="#E5E5E5">actually calc is modern nowadays regedit</font>

812
00:31:48,610 --> 00:31:52,750
<font color="#E5E5E5">work fine your notepad work but</font>

813
00:31:50,710 --> 00:31:55,660
calculator the new one in Windows 10 or

814
00:31:52,750 --> 00:31:57,670
any other<font color="#E5E5E5"> metro modern</font><font color="#CCCCCC"> payal app wasn't</font>

815
00:31:55,660 --> 00:31:59,860
launching anymore because<font color="#CCCCCC"> I</font><font color="#E5E5E5"> accidentally</font>

816
00:31:57,670 --> 00:32:02,050
corrupted one of the state names<font color="#CCCCCC"> reboot</font>

817
00:31:59,860 --> 00:32:03,909
<font color="#E5E5E5">it and</font><font color="#CCCCCC"> it worked again</font><font color="#E5E5E5"> right so I wasn't</font>

818
00:32:02,050 --> 00:32:05,520
<font color="#E5E5E5">trying to like fuzz and find these types</font>

819
00:32:03,910 --> 00:32:07,630
of issues but<font color="#E5E5E5"> just</font><font color="#CCCCCC"> kind of</font><font color="#E5E5E5"> while</font>

820
00:32:05,520 --> 00:32:10,060
accidentally<font color="#CCCCCC"> riding</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> wrong thing</font>

821
00:32:07,630 --> 00:32:11,950
<font color="#E5E5E5">there these things are happening</font><font color="#CCCCCC"> the</font>

822
00:32:10,060 --> 00:32:13,720
last<font color="#E5E5E5"> one is when I run my tools as admin</font>

823
00:32:11,950 --> 00:32:15,730
so again I had<font color="#E5E5E5"> to be admin so it's</font>

824
00:32:13,720 --> 00:32:17,110
probably<font color="#CCCCCC"> not an issue but as admin</font><font color="#E5E5E5"> and</font>

825
00:32:15,730 --> 00:32:17,980
when I started<font color="#E5E5E5"> writing garbage over the</font>

826
00:32:17,110 --> 00:32:19,629
WUF world

827
00:32:17,980 --> 00:32:22,090
I started getting<font color="#E5E5E5"> service</font><font color="#CCCCCC"> hosts to crash</font>

828
00:32:19,630 --> 00:32:24,550
<font color="#CCCCCC">with</font><font color="#E5E5E5"> no point of</font><font color="#CCCCCC"> dereferences</font><font color="#E5E5E5"> so you</font>

829
00:32:22,090 --> 00:32:26,500
know<font color="#CCCCCC"> probably not exploitable</font><font color="#E5E5E5"> have to be</font>

830
00:32:24,550 --> 00:32:27,909
admin anyway who cares<font color="#CCCCCC"> about an admin to</font>

831
00:32:26,500 --> 00:32:29,380
<font color="#E5E5E5">service null pointer but it kind</font><font color="#CCCCCC"> of</font>

832
00:32:27,910 --> 00:32:31,120
showed me<font color="#E5E5E5"> you know what if someone is</font>

833
00:32:29,380 --> 00:32:33,460
<font color="#CCCCCC">actually competent</font><font color="#E5E5E5"> in the arc of writing</font>

834
00:32:31,120 --> 00:32:34,959
fuzzers and you know crew creating

835
00:32:33,460 --> 00:32:36,100
polymorphic data and you<font color="#E5E5E5"> know doing</font><font color="#CCCCCC"> all</font>

836
00:32:34,960 --> 00:32:38,890
the things that good fuzz are supposed

837
00:32:36,100 --> 00:32:40,719
to do and<font color="#CCCCCC"> then logging what right</font><font color="#E5E5E5"> caused</font>

838
00:32:38,890 --> 00:32:42,670
what crash<font color="#CCCCCC"> I'm sure you could find</font>

839
00:32:40,720 --> 00:32:44,710
<font color="#CCCCCC">something right I mean if like me</font>

840
00:32:42,670 --> 00:32:46,600
stumbling<font color="#E5E5E5"> around I got some things to</font>

841
00:32:44,710 --> 00:32:49,030
happen<font color="#E5E5E5"> someone more</font><font color="#CCCCCC"> competent and</font>

842
00:32:46,600 --> 00:32:52,060
<font color="#E5E5E5">probably do a lot better there so how do</font>

843
00:32:49,030 --> 00:32:53,590
you kind<font color="#E5E5E5"> of discover your these names so</font>

844
00:32:52,060 --> 00:32:55,540
the first approach<font color="#CCCCCC"> is to basically go</font>

845
00:32:53,590 --> 00:32:57,399
for the<font color="#CCCCCC"> well-known</font><font color="#E5E5E5"> permanent persistence</font>

846
00:32:55,540 --> 00:32:59,800
names<font color="#CCCCCC"> there in the registry</font><font color="#E5E5E5"> so if you</font>

847
00:32:57,400 --> 00:33:01,810
just enumerate the registry<font color="#E5E5E5"> keys that</font>

848
00:32:59,800 --> 00:33:03,580
<font color="#E5E5E5">are on an earlier slide also on the</font>

849
00:33:01,810 --> 00:33:05,740
kernel<font color="#CCCCCC"> you can basically get all</font><font color="#E5E5E5"> the</font>

850
00:33:03,580 --> 00:33:07,720
state names and the registry data that's

851
00:33:05,740 --> 00:33:09,250
there is the state data that's<font color="#E5E5E5"> there</font>

852
00:33:07,720 --> 00:33:09,730
right<font color="#E5E5E5"> now plus is the queue descriptor</font>

853
00:33:09,250 --> 00:33:10,990
<font color="#CCCCCC">so</font>

854
00:33:09,730 --> 00:33:12,519
the secure descriptor and<font color="#CCCCCC"> the data</font>

855
00:33:10,990 --> 00:33:14,799
that's<font color="#E5E5E5"> there and that's what my tool</font>

856
00:33:12,519 --> 00:33:17,559
does basically parses that and shows it

857
00:33:14,799 --> 00:33:19,418
<font color="#CCCCCC">to you in a nice format but ten three</font>

858
00:33:17,559 --> 00:33:21,580
names<font color="#CCCCCC"> they're</font><font color="#E5E5E5"> only known</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the kernel</font>

859
00:33:19,419 --> 00:33:23,380
<font color="#E5E5E5">they're not in the registry</font><font color="#CCCCCC"> so I also</font>

860
00:33:21,580 --> 00:33:24,730
wanted to<font color="#E5E5E5"> do</font><font color="#CCCCCC"> fahza</font><font color="#E5E5E5"> to play around with</font>

861
00:33:23,380 --> 00:33:27,279
temporary names I'm like well how do I

862
00:33:24,730 --> 00:33:29,529
get<font color="#E5E5E5"> those without having a kernel</font>

863
00:33:27,279 --> 00:33:32,080
extension well if you<font color="#E5E5E5"> think</font><font color="#CCCCCC"> about a</font>

864
00:33:29,529 --> 00:33:33,909
temporary name or volatile name again

865
00:33:32,080 --> 00:33:35,678
it's a state name like any other so it's

866
00:33:33,909 --> 00:33:37,809
got a version<font color="#E5E5E5"> and the version is always</font>

867
00:33:35,679 --> 00:33:40,510
one<font color="#E5E5E5"> it's got a lifetime and the</font><font color="#CCCCCC"> lifetime</font>

868
00:33:37,809 --> 00:33:42,220
is temporary<font color="#E5E5E5"> it's got a permanent flag</font>

869
00:33:40,510 --> 00:33:43,690
<font color="#CCCCCC">which by definition is 0 because the</font>

870
00:33:42,220 --> 00:33:45,760
temporary name can't have permanent data

871
00:33:43,690 --> 00:33:47,799
and the scope is one of the four

872
00:33:45,760 --> 00:33:50,830
possible<font color="#E5E5E5"> scopes right</font><font color="#CCCCCC"> Machine scope or</font>

873
00:33:47,799 --> 00:33:52,629
process scope or user scope<font color="#E5E5E5"> so what the</font>

874
00:33:50,830 --> 00:33:53,860
only<font color="#E5E5E5"> part</font><font color="#CCCCCC"> that's left</font><font color="#E5E5E5"> to guess is the</font>

875
00:33:52,630 --> 00:33:56,649
sequence number and<font color="#CCCCCC"> a sequence numbers</font>

876
00:33:53,860 --> 00:33:58,928
51 bits<font color="#E5E5E5"> how are you gonna</font><font color="#CCCCCC"> brute-force 51</font>

877
00:33:56,649 --> 00:34:01,059
bits<font color="#E5E5E5"> you don't have to because remember</font>

878
00:33:58,929 --> 00:34:03,700
the sequence<font color="#E5E5E5"> number is</font><font color="#CCCCCC"> a monotonically</font>

879
00:34:01,059 --> 00:34:06,940
increasing number that starts<font color="#CCCCCC"> 0 so</font><font color="#E5E5E5"> for</font>

880
00:34:03,700 --> 00:34:09,040
permanent names you know<font color="#E5E5E5"> those are in</font>

881
00:34:06,940 --> 00:34:10,720
the registry but<font color="#E5E5E5"> for temporary names</font><font color="#CCCCCC"> you</font>

882
00:34:09,040 --> 00:34:12,820
remember that this<font color="#E5E5E5"> is it gets reset</font><font color="#CCCCCC"> so</font>

883
00:34:10,719 --> 00:34:15,520
once you reboot the machine how many

884
00:34:12,820 --> 00:34:18,250
stadiums can there possibly be 20,000

885
00:34:15,520 --> 00:34:19,989
50,000 a million let's<font color="#E5E5E5"> say a million so</font>

886
00:34:18,250 --> 00:34:22,119
I just basically loop from zero to a

887
00:34:19,989 --> 00:34:24,848
million<font color="#E5E5E5"> try all the sequence numbers and</font>

888
00:34:22,119 --> 00:34:28,210
it turns out there's an API query W&F

889
00:34:24,849 --> 00:34:30,609
state<font color="#E5E5E5"> name information with W info state</font>

890
00:34:28,210 --> 00:34:32,829
name exists and this tells you if<font color="#E5E5E5"> this</font>

891
00:34:30,609 --> 00:34:34,239
state name exists or not<font color="#E5E5E5"> now this thing</font>

892
00:34:32,829 --> 00:34:36,280
name doesn't<font color="#E5E5E5"> exist that</font><font color="#CCCCCC"> the returns</font>

893
00:34:34,239 --> 00:34:38,109
false<font color="#E5E5E5"> if the state name exists and</font>

894
00:34:36,280 --> 00:34:40,149
you're allowed<font color="#CCCCCC"> to know that it exists it</font>

895
00:34:38,109 --> 00:34:41,589
returns exists and if<font color="#E5E5E5"> the state name</font>

896
00:34:40,149 --> 00:34:43,929
exists and you're<font color="#E5E5E5"> not allowed</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> know</font>

897
00:34:41,589 --> 00:34:48,549
that it exists it returns access denied

898
00:34:43,929 --> 00:34:49,990
so you know<font color="#CCCCCC"> it exists right so very easy</font>

899
00:34:48,550 --> 00:34:51,040
<font color="#E5E5E5">to be asked a</font><font color="#CCCCCC"> brute-force</font><font color="#E5E5E5"> what the names</font>

900
00:34:49,989 --> 00:34:52,509
are<font color="#CCCCCC"> even though you might not be able</font><font color="#E5E5E5"> to</font>

901
00:34:51,040 --> 00:34:54,399
<font color="#E5E5E5">access them at least you know they're</font>

902
00:34:52,510 --> 00:34:56,470
there<font color="#CCCCCC"> so you can you</font><font color="#E5E5E5"> can start</font><font color="#CCCCCC"> messing</font>

903
00:34:54,399 --> 00:34:58,328
with them now the last problem<font color="#CCCCCC"> is the</font>

904
00:34:56,469 --> 00:35:00,368
<font color="#E5E5E5">secure descriptors how can you know what</font>

905
00:34:58,329 --> 00:35:02,079
access you have to the state<font color="#E5E5E5"> name again</font>

906
00:35:00,369 --> 00:35:04,329
with the kernel I could just<font color="#E5E5E5"> dump the SD</font>

907
00:35:02,079 --> 00:35:06,730
<font color="#CCCCCC">and see it but</font><font color="#E5E5E5"> from user space the</font><font color="#CCCCCC"> skews</font>

908
00:35:04,329 --> 00:35:08,440
<font color="#CCCCCC">creeper isn't anywhere there so I said</font>

909
00:35:06,730 --> 00:35:10,270
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> well</font><font color="#CCCCCC"> if I can try</font><font color="#E5E5E5"> reading from it</font>

910
00:35:08,440 --> 00:35:12,069
<font color="#CCCCCC">then I know</font><font color="#E5E5E5"> it'll</font><font color="#CCCCCC"> work rest illustrated</font>

911
00:35:10,270 --> 00:35:13,900
in the read<font color="#CCCCCC"> ok the read doesn't work I</font>

912
00:35:12,069 --> 00:35:16,720
know I don't<font color="#E5E5E5"> have read access how can I</font>

913
00:35:13,900 --> 00:35:17,800
tell<font color="#CCCCCC"> if I've write access well again you</font>

914
00:35:16,720 --> 00:35:19,750
can do this<font color="#CCCCCC"> stupid thing</font><font color="#E5E5E5"> I was doing</font>

915
00:35:17,800 --> 00:35:21,550
initially<font color="#CCCCCC"> which is</font><font color="#E5E5E5"> write nothing but by</font>

916
00:35:19,750 --> 00:35:23,470
<font color="#CCCCCC">writing nothing</font><font color="#E5E5E5"> you're destroying what's</font>

917
00:35:21,550 --> 00:35:25,599
there but remember<font color="#CCCCCC"> that</font><font color="#E5E5E5"> when you run</font>

918
00:35:23,470 --> 00:35:27,910
you can enforce the<font color="#E5E5E5"> current change them</font>

919
00:35:25,599 --> 00:35:30,609
<font color="#E5E5E5">and when I thought it</font><font color="#CCCCCC"> is what what if I</font>

920
00:35:27,910 --> 00:35:33,580
make the current<font color="#E5E5E5"> change snap be F F F F</font>

921
00:35:30,609 --> 00:35:36,098
F F F F F F F F<font color="#E5E5E5"> F well if you have write</font>

922
00:35:33,580 --> 00:35:38,590
access<font color="#CCCCCC"> you're gonna get back status and</font>

923
00:35:36,099 --> 00:35:40,780
valid change that<font color="#E5E5E5"> which basically tells</font>

924
00:35:38,590 --> 00:35:42,520
<font color="#E5E5E5">you it's not an F F F F F F F F right</font>

925
00:35:40,780 --> 00:35:44,380
now<font color="#E5E5E5"> no rights gonna happen so you didn't</font>

926
00:35:42,520 --> 00:35:46,660
corrupt anything if you<font color="#E5E5E5"> don't have</font>

927
00:35:44,380 --> 00:35:48,280
access<font color="#CCCCCC"> you're gonna get access denied</font>

928
00:35:46,660 --> 00:35:50,170
and it's<font color="#E5E5E5"> still not gonna change anything</font>

929
00:35:48,280 --> 00:35:50,950
<font color="#CCCCCC">so if I</font><font color="#E5E5E5"> get access denied I know I don't</font>

930
00:35:50,170 --> 00:35:53,170
have write access

931
00:35:50,950 --> 00:35:54,730
if I get invalid change stamp<font color="#CCCCCC"> I know I</font>

932
00:35:53,170 --> 00:35:57,310
have write access but thankfully I

933
00:35:54,730 --> 00:35:58,720
didn't modify the data<font color="#CCCCCC"> the</font><font color="#E5E5E5"> only way this</font>

934
00:35:57,310 --> 00:36:00,940
can break is if there<font color="#CCCCCC"> is a legitimate</font>

935
00:35:58,720 --> 00:36:03,640
<font color="#E5E5E5">event out there</font><font color="#CCCCCC"> whose change</font><font color="#E5E5E5"> that really</font>

936
00:36:00,940 --> 00:36:05,109
is<font color="#E5E5E5"> F F F F F F F yes by</font><font color="#CCCCCC"> writing</font><font color="#E5E5E5"> into it</font>

937
00:36:03,640 --> 00:36:06,879
I will<font color="#CCCCCC"> now make it overflow into</font><font color="#E5E5E5"> zero</font>

938
00:36:05,109 --> 00:36:07,869
and potentially<font color="#E5E5E5"> break something but</font><font color="#CCCCCC"> that</font>

939
00:36:06,880 --> 00:36:09,970
would<font color="#E5E5E5"> mean there's been four billion</font>

940
00:36:07,869 --> 00:36:11,740
<font color="#CCCCCC">writes</font><font color="#E5E5E5"> in a temporary state name which</font>

941
00:36:09,970 --> 00:36:13,750
which should never<font color="#E5E5E5"> happen</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> that's kind</font>

942
00:36:11,740 --> 00:36:17,049
of the approach<font color="#E5E5E5"> I</font><font color="#CCCCCC"> took when creating</font><font color="#E5E5E5"> WN</font>

943
00:36:13,750 --> 00:36:18,490
<font color="#E5E5E5">f WN f tap now what are</font><font color="#CCCCCC"> some things</font><font color="#E5E5E5"> you</font>

944
00:36:17,050 --> 00:36:19,900
can do with would that be<font color="#E5E5E5"> enough other</font>

945
00:36:18,490 --> 00:36:22,089
than trying<font color="#CCCCCC"> to like once you know these</font>

946
00:36:19,900 --> 00:36:23,950
<font color="#E5E5E5">names are well one of the things you can</font>

947
00:36:22,090 --> 00:36:25,450
<font color="#CCCCCC">use that PMF</font><font color="#E5E5E5"> for is basically a covert</font>

948
00:36:23,950 --> 00:36:27,549
side<font color="#E5E5E5"> channel right let's say you want to</font>

949
00:36:25,450 --> 00:36:29,439
<font color="#CCCCCC">communicate across process boundaries</font>

950
00:36:27,550 --> 00:36:30,339
there's lots of<font color="#E5E5E5"> windows EP</font><font color="#CCCCCC"> outlets</font><font color="#E5E5E5"> that</font>

951
00:36:29,440 --> 00:36:32,140
lets you do that

952
00:36:30,339 --> 00:36:34,210
but what's<font color="#E5E5E5"> cool about</font><font color="#CCCCCC"> W&F is you get</font>

953
00:36:32,140 --> 00:36:35,859
these well-known<font color="#E5E5E5"> W&F names that already</font>

954
00:36:34,210 --> 00:36:38,109
exists<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you don't have to register</font>

955
00:36:35,859 --> 00:36:40,509
<font color="#E5E5E5">so there's no windows</font><font color="#CCCCCC"> api that anyone</font>

956
00:36:38,109 --> 00:36:42,700
any<font color="#CCCCCC"> EDR vendor can hook that tells you</font>

957
00:36:40,510 --> 00:36:44,020
someone is using a<font color="#E5E5E5"> well known name</font>

958
00:36:42,700 --> 00:36:46,540
because the<font color="#E5E5E5"> well-known</font><font color="#CCCCCC"> name is is</font>

959
00:36:44,020 --> 00:36:48,759
<font color="#CCCCCC">already there</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> so you can publish</font><font color="#E5E5E5"> and</font>

960
00:36:46,540 --> 00:36:50,140
read from a<font color="#CCCCCC"> well-known name and the only</font>

961
00:36:48,760 --> 00:36:52,089
thing that anyone's ever<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> see is</font>

962
00:36:50,140 --> 00:36:53,200
<font color="#E5E5E5">that you did a system call but you know</font>

963
00:36:52,089 --> 00:36:55,540
in Windows there's no way to<font color="#E5E5E5"> hook system</font>

964
00:36:53,200 --> 00:36:57,609
<font color="#E5E5E5">calls officially right and so reading</font>

965
00:36:55,540 --> 00:36:59,529
and writing into wnf names<font color="#E5E5E5"> doesn't</font>

966
00:36:57,609 --> 00:37:01,598
<font color="#E5E5E5">reveal anything that vendors know know</font>

967
00:36:59,530 --> 00:37:03,640
about<font color="#CCCCCC"> unless</font><font color="#E5E5E5"> they know the registry keys</font>

968
00:37:01,599 --> 00:37:05,740
where the data is<font color="#E5E5E5"> being stored so with</font>

969
00:37:03,640 --> 00:37:08,529
well-known names you can<font color="#CCCCCC"> basically store</font>

970
00:37:05,740 --> 00:37:09,939
data<font color="#E5E5E5"> and read the data later by relying</font>

971
00:37:08,530 --> 00:37:12,490
on parts<font color="#E5E5E5"> of the registry</font><font color="#CCCCCC"> that most</font>

972
00:37:09,940 --> 00:37:13,810
people don't know<font color="#CCCCCC"> what was in there and</font>

973
00:37:12,490 --> 00:37:15,490
<font color="#E5E5E5">without these actually being registry</font>

974
00:37:13,810 --> 00:37:17,049
reads or writes right cuz if you're an

975
00:37:15,490 --> 00:37:19,240
anti<font color="#CCCCCC"> Meyer vendor who's doing the</font>

976
00:37:17,050 --> 00:37:20,650
registry<font color="#E5E5E5"> right it's the</font><font color="#CCCCCC"> kernels WF</font>

977
00:37:19,240 --> 00:37:22,660
<font color="#E5E5E5">subsystem who's doing the crud</font><font color="#CCCCCC"> that</font>

978
00:37:20,650 --> 00:37:25,089
registry read<font color="#CCCCCC"> it's the kernels w</font><font color="#E5E5E5"> nuff</font>

979
00:37:22,660 --> 00:37:27,580
subsystem<font color="#E5E5E5"> so by using state names that</font>

980
00:37:25,089 --> 00:37:29,560
are defined but not used by anyone<font color="#CCCCCC"> you</font>

981
00:37:27,580 --> 00:37:30,250
<font color="#CCCCCC">can kind of by piggybacking on your</font>

982
00:37:29,560 --> 00:37:31,540
registry

983
00:37:30,250 --> 00:37:33,599
you know achieve a<font color="#E5E5E5"> side channel that</font>

984
00:37:31,540 --> 00:37:35,980
most people don't<font color="#E5E5E5"> know what</font><font color="#CCCCCC"> to look</font><font color="#E5E5E5"> for</font>

985
00:37:33,599 --> 00:37:37,180
<font color="#E5E5E5">the other option is</font><font color="#CCCCCC"> to actually create</font>

986
00:37:35,980 --> 00:37:38,319
<font color="#CCCCCC">your own names</font>

987
00:37:37,180 --> 00:37:40,240
now if you create<font color="#CCCCCC"> your own temporary</font>

988
00:37:38,319 --> 00:37:42,009
names<font color="#E5E5E5"> this completely avoids the</font>

989
00:37:40,240 --> 00:37:44,979
registry<font color="#CCCCCC"> all right so these are now</font>

990
00:37:42,010 --> 00:37:46,720
<font color="#E5E5E5">gonna be names and data that</font><font color="#CCCCCC"> only exists</font>

991
00:37:44,980 --> 00:37:48,970
in<font color="#CCCCCC"> current memory</font><font color="#E5E5E5"> where most</font><font color="#CCCCCC"> people</font>

992
00:37:46,720 --> 00:37:50,618
don't know where<font color="#CCCCCC"> to look with the</font><font color="#E5E5E5"> caveat</font>

993
00:37:48,970 --> 00:37:53,379
that<font color="#E5E5E5"> you do have to register by now</font>

994
00:37:50,619 --> 00:37:55,210
calling<font color="#CCCCCC"> zlw create</font><font color="#E5E5E5"> register name but as</font>

995
00:37:53,380 --> 00:37:57,160
you're gonna<font color="#CCCCCC"> see</font><font color="#E5E5E5"> there's no</font><font color="#CCCCCC"> etw</font><font color="#E5E5E5"> event</font>

996
00:37:55,210 --> 00:37:58,720
there's no<font color="#E5E5E5"> kernel notification and</font>

997
00:37:57,160 --> 00:38:00,640
there's no<font color="#E5E5E5"> event log there's no auditing</font>

998
00:37:58,720 --> 00:38:02,529
of any kind when someone registers a

999
00:38:00,640 --> 00:38:04,808
temporary name<font color="#E5E5E5"> so unless you literally</font>

1000
00:38:02,529 --> 00:38:05,710
hook that<font color="#CCCCCC"> API which you know you all</font>

1001
00:38:04,809 --> 00:38:07,839
<font color="#CCCCCC">know you're not supposed to be</font><font color="#E5E5E5"> hooking</font>

1002
00:38:05,710 --> 00:38:09,670
<font color="#CCCCCC">Windows api's</font><font color="#E5E5E5"> it's a completely</font>

1003
00:38:07,839 --> 00:38:11,650
invisible way to basically<font color="#E5E5E5"> exchange data</font>

1004
00:38:09,670 --> 00:38:13,569
between processes<font color="#E5E5E5"> and there are many</font>

1005
00:38:11,650 --> 00:38:15,730
other such ways but this<font color="#E5E5E5"> is one that you</font>

1006
00:38:13,569 --> 00:38:17,230
know<font color="#E5E5E5"> no one's kind of named and put a</font>

1007
00:38:15,730 --> 00:38:19,059
logo on<font color="#E5E5E5"> it yet you know you know about</font>

1008
00:38:17,230 --> 00:38:21,730
atom bomb being now you can call<font color="#CCCCCC"> WF</font>

1009
00:38:19,059 --> 00:38:23,140
bombing or something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> that so</font><font color="#E5E5E5"> that's</font>

1010
00:38:21,730 --> 00:38:25,299
kind of one<font color="#E5E5E5"> you know interesting thing</font>

1011
00:38:23,140 --> 00:38:29,230
here<font color="#E5E5E5"> and so from</font><font color="#CCCCCC"> a EDR and time our</font>

1012
00:38:25,299 --> 00:38:31,420
perspective if<font color="#E5E5E5"> WF permanent or</font>

1013
00:38:29,230 --> 00:38:33,010
persistent names are used<font color="#E5E5E5"> you'll kind of</font>

1014
00:38:31,420 --> 00:38:34,270
see registry reads and writes if you

1015
00:38:33,010 --> 00:38:36,400
know about those<font color="#CCCCCC"> values they'll come</font>

1016
00:38:34,270 --> 00:38:38,829
<font color="#E5E5E5">from the kernel behind the scenes or</font>

1017
00:38:36,400 --> 00:38:40,720
some<font color="#CCCCCC"> processes doing that</font><font color="#E5E5E5"> if they're</font>

1018
00:38:38,829 --> 00:38:42,309
temporary names<font color="#CCCCCC"> there's nothing</font><font color="#E5E5E5"> you can</font>

1019
00:38:40,720 --> 00:38:44,680
really do to<font color="#E5E5E5"> see that people are</font><font color="#CCCCCC"> using W</font>

1020
00:38:42,309 --> 00:38:46,480
enough although<font color="#CCCCCC"> there are ECW events</font>

1021
00:38:44,680 --> 00:38:48,129
<font color="#E5E5E5">there actually is an</font><font color="#CCCCCC"> ECW event for</font>

1022
00:38:46,480 --> 00:38:51,220
subscribe and<font color="#E5E5E5"> I'm subscribed for</font>

1023
00:38:48,130 --> 00:38:53,200
<font color="#E5E5E5">callback and for publish but only for</font>

1024
00:38:51,220 --> 00:38:55,629
user mode callers and only if you're

1025
00:38:53,200 --> 00:38:58,390
using the RTL api's so if you're in

1026
00:38:55,630 --> 00:39:00,520
kernel mode<font color="#E5E5E5"> and you're using</font><font color="#CCCCCC"> WF</font><font color="#E5E5E5"> no</font><font color="#CCCCCC"> etw</font>

1027
00:38:58,390 --> 00:39:01,839
<font color="#CCCCCC">trace is generated if you and</font><font color="#E5E5E5"> user space</font>

1028
00:39:00,520 --> 00:39:04,059
<font color="#CCCCCC">and your genius</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> caught the system</font>

1029
00:39:01,839 --> 00:39:05,200
calls directly<font color="#E5E5E5"> no</font><font color="#CCCCCC"> e2w trace is being</font>

1030
00:39:04,059 --> 00:39:08,049
<font color="#CCCCCC">generated at all so it's a very</font>

1031
00:39:05,200 --> 00:39:10,538
invisible kind of IPC mechanism which

1032
00:39:08,049 --> 00:39:12,130
makes it<font color="#E5E5E5"> interesting for</font><font color="#CCCCCC"> me now the</font>

1033
00:39:10,539 --> 00:39:13,720
other thing that's<font color="#CCCCCC"> interesting is what</font>

1034
00:39:12,130 --> 00:39:15,700
are<font color="#E5E5E5"> some names that that reveal</font>

1035
00:39:13,720 --> 00:39:17,049
information about<font color="#CCCCCC"> the system</font><font color="#E5E5E5"> that really</font>

1036
00:39:15,700 --> 00:39:19,598
<font color="#E5E5E5">should perhaps shouldn't be revealed</font>

1037
00:39:17,049 --> 00:39:20,829
<font color="#CCCCCC">right now there's like 4,000 well-known</font>

1038
00:39:19,599 --> 00:39:22,869
names so we're just<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> go over a</font>

1039
00:39:20,829 --> 00:39:25,809
few of them but<font color="#CCCCCC"> for example there's a W</font>

1040
00:39:22,869 --> 00:39:27,490
<font color="#CCCCCC">nfid called w</font><font color="#E5E5E5"> NF Wi-Fi connection status</font>

1041
00:39:25,809 --> 00:39:29,049
<font color="#E5E5E5">this tells you the machine is connected</font>

1042
00:39:27,490 --> 00:39:30,609
<font color="#E5E5E5">to the Wi-Fi network</font><font color="#CCCCCC"> and the current</font>

1043
00:39:29,049 --> 00:39:32,619
signal strength<font color="#E5E5E5"> and if</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> register</font>

1044
00:39:30,609 --> 00:39:34,660
<font color="#E5E5E5">notification on this even from</font><font color="#CCCCCC"> Kermode</font>

1045
00:39:32,619 --> 00:39:35,920
for<font color="#E5E5E5"> example you'll get this data right</font>

1046
00:39:34,660 --> 00:39:37,299
now<font color="#E5E5E5"> if some of your kernel programmers</font>

1047
00:39:35,920 --> 00:39:39,160
you know the<font color="#CCCCCC"> official way of doing this</font>

1048
00:39:37,299 --> 00:39:41,440
with like an<font color="#E5E5E5"> end this</font><font color="#CCCCCC"> lightweight</font><font color="#E5E5E5"> filter</font>

1049
00:39:39,160 --> 00:39:43,058
and like sending<font color="#CCCCCC"> a light diesel</font><font color="#E5E5E5"> all you</font>

1050
00:39:41,440 --> 00:39:44,319
<font color="#CCCCCC">need is one API and you</font><font color="#E5E5E5"> get notified</font>

1051
00:39:43,059 --> 00:39:46,390
every<font color="#CCCCCC"> time</font><font color="#E5E5E5"> the or else that will goes up</font>

1052
00:39:44,319 --> 00:39:48,400
and down<font color="#E5E5E5"> there's one for Bluetooth in</font>

1053
00:39:46,390 --> 00:39:49,750
fact there's<font color="#CCCCCC"> even one called tethering</font>

1054
00:39:48,400 --> 00:39:50,780
<font color="#CCCCCC">States every time there's tethering</font>

1055
00:39:49,750 --> 00:39:53,090
enabled or disabled

1056
00:39:50,780 --> 00:39:55,010
you get notification<font color="#E5E5E5"> there is one</font><font color="#CCCCCC"> called</font>

1057
00:39:53,090 --> 00:39:56,270
<font color="#E5E5E5">power source which tells you if the</font>

1058
00:39:55,010 --> 00:39:58,580
machine is current<font color="#CCCCCC"> through an AC adapter</font>

1059
00:39:56,270 --> 00:40:00,590
<font color="#CCCCCC">or living</font><font color="#E5E5E5"> off the battery if is living</font>

1060
00:39:58,580 --> 00:40:03,890
off the battery you can<font color="#E5E5E5"> get the battery</font>

1061
00:40:00,590 --> 00:40:06,350
level<font color="#E5E5E5"> from another W nfid there are cell</font>

1062
00:40:03,890 --> 00:40:08,210
phone<font color="#CCCCCC"> w NF</font><font color="#E5E5E5"> IDs on this thing called a</font>

1063
00:40:06,350 --> 00:40:10,880
Windows Phone which here<font color="#E5E5E5"> you can bind</font>

1064
00:40:08,210 --> 00:40:13,130
some<font color="#E5E5E5"> archaeological stores which had</font>

1065
00:40:10,880 --> 00:40:15,530
information<font color="#CCCCCC"> like the network you're</font>

1066
00:40:13,130 --> 00:40:17,990
connected to LTE band that you connected

1067
00:40:15,530 --> 00:40:19,040
<font color="#E5E5E5">to you know if one day there's</font><font color="#CCCCCC"> Windows</font>

1068
00:40:17,990 --> 00:40:21,620
<font color="#CCCCCC">phones again</font><font color="#E5E5E5"> you know those would be</font>

1069
00:40:19,040 --> 00:40:23,870
useful<font color="#E5E5E5"> there's one that we came in for</font>

1070
00:40:21,620 --> 00:40:25,790
user behaviors for example there's<font color="#CCCCCC"> audio</font>

1071
00:40:23,870 --> 00:40:27,529
capture all<font color="#CCCCCC"> your render this will give</font>

1072
00:40:25,790 --> 00:40:29,720
you notification<font color="#CCCCCC"> anytime someone plays</font>

1073
00:40:27,530 --> 00:40:31,880
any sound<font color="#E5E5E5"> and or</font><font color="#CCCCCC"> anytime someone</font>

1074
00:40:29,720 --> 00:40:34,580
captures any sound<font color="#E5E5E5"> so anytime I use</font>

1075
00:40:31,880 --> 00:40:37,670
Cortana<font color="#CCCCCC"> the capture Wi-Fi D</font><font color="#E5E5E5"> gets</font>

1076
00:40:34,580 --> 00:40:39,529
notified<font color="#CCCCCC"> TKB an touch event registers a</font>

1077
00:40:37,670 --> 00:40:41,720
notification<font color="#E5E5E5"> every single time</font><font color="#CCCCCC"> I touch</font>

1078
00:40:39,530 --> 00:40:44,510
my touch screen press the<font color="#CCCCCC"> mouse or press</font>

1079
00:40:41,720 --> 00:40:46,700
<font color="#E5E5E5">the key boom that gets notified in fact</font>

1080
00:40:44,510 --> 00:40:48,740
if you might want<font color="#CCCCCC"> to do user</font><font color="#E5E5E5"> detection</font>

1081
00:40:46,700 --> 00:40:50,990
<font color="#CCCCCC">Windows has</font><font color="#E5E5E5"> already its own built-in</font>

1082
00:40:48,740 --> 00:40:54,020
user presence detector<font color="#E5E5E5"> and it will</font>

1083
00:40:50,990 --> 00:40:56,450
notify<font color="#CCCCCC"> SCB user present or</font><font color="#E5E5E5"> SCP user</font>

1084
00:40:54,020 --> 00:40:57,800
present change when the user<font color="#E5E5E5"> leaves or</font>

1085
00:40:56,450 --> 00:40:59,210
approaches the<font color="#CCCCCC"> Machine based on</font><font color="#E5E5E5"> the</font>

1086
00:40:57,800 --> 00:41:01,070
<font color="#E5E5E5">machine learning heuristics that</font><font color="#CCCCCC"> Windows</font>

1087
00:40:59,210 --> 00:41:02,900
already has so these are all things you

1088
00:41:01,070 --> 00:41:04,910
<font color="#E5E5E5">could already do</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> now you have a</font>

1089
00:41:02,900 --> 00:41:06,740
simple<font color="#E5E5E5"> way</font><font color="#CCCCCC"> of just registering for an ID</font>

1090
00:41:04,910 --> 00:41:08,629
<font color="#E5E5E5">that tells you when these things happen</font>

1091
00:41:06,740 --> 00:41:11,540
there's also things that<font color="#E5E5E5"> there's already</font>

1092
00:41:08,630 --> 00:41:13,520
API<font color="#E5E5E5"> support like there is an API to get</font>

1093
00:41:11,540 --> 00:41:15,590
notified when a<font color="#CCCCCC"> prosecute started but</font>

1094
00:41:13,520 --> 00:41:17,390
everyone knows<font color="#E5E5E5"> about PS</font><font color="#CCCCCC"> register</font><font color="#E5E5E5"> across</font>

1095
00:41:15,590 --> 00:41:20,210
<font color="#CCCCCC">the notification but did you know that</font>

1096
00:41:17,390 --> 00:41:23,180
<font color="#E5E5E5">there's a</font><font color="#CCCCCC"> WN f shell desktop application</font>

1097
00:41:20,210 --> 00:41:25,070
started<font color="#E5E5E5"> WN f shell application started</font>

1098
00:41:23,180 --> 00:41:27,169
and terminated<font color="#CCCCCC"> that</font><font color="#E5E5E5"> if you listen for</font>

1099
00:41:25,070 --> 00:41:28,730
<font color="#E5E5E5">these events</font><font color="#CCCCCC"> you will get the name and</font>

1100
00:41:27,170 --> 00:41:30,140
over the package<font color="#CCCCCC"> name in the path of</font>

1101
00:41:28,730 --> 00:41:32,300
every single<font color="#E5E5E5"> process</font><font color="#CCCCCC"> creation and</font>

1102
00:41:30,140 --> 00:41:34,370
destruction<font color="#CCCCCC"> as long as</font><font color="#E5E5E5"> it's down through</font>

1103
00:41:32,300 --> 00:41:37,220
shell execute so sure you won't<font color="#E5E5E5"> get like</font>

1104
00:41:34,370 --> 00:41:39,650
non shell based launches but<font color="#E5E5E5"> it's a nice</font>

1105
00:41:37,220 --> 00:41:41,149
way to get most interactive law<font color="#E5E5E5"> launched</font>

1106
00:41:39,650 --> 00:41:43,520
applications without<font color="#E5E5E5"> calling any</font><font color="#CCCCCC"> other</font>

1107
00:41:41,150 --> 00:41:47,240
API you know one of<font color="#E5E5E5"> my favorite ones is</font>

1108
00:41:43,520 --> 00:41:49,370
<font color="#E5E5E5">WN f edge last navigated host which</font>

1109
00:41:47,240 --> 00:41:51,979
basically you know I I'll just do like<font color="#CCCCCC"> a</font>

1110
00:41:49,370 --> 00:41:52,600
live demo<font color="#E5E5E5"> hoping the demo gods are with</font>

1111
00:41:51,980 --> 00:41:59,050
me

1112
00:41:52,600 --> 00:42:03,890
<font color="#CCCCCC">WUF dumb dash n BB enough edge last</font>

1113
00:41:59,050 --> 00:42:04,609
navigated host<font color="#CCCCCC"> all right</font><font color="#E5E5E5"> let's see if</font>

1114
00:42:03,890 --> 00:42:09,288
that works

1115
00:42:04,609 --> 00:42:11,288
cross fingers<font color="#CCCCCC"> open edge</font><font color="#E5E5E5"> I'll be not</font>

1116
00:42:09,289 --> 00:42:15,890
<font color="#E5E5E5">gonna work</font>

1117
00:42:11,289 --> 00:42:18,789
let's see<font color="#E5E5E5"> google.com I'm not connected</font>

1118
00:42:15,890 --> 00:42:21,499
so<font color="#CCCCCC"> what else oh there we go</font>

1119
00:42:18,789 --> 00:42:24,769
<font color="#E5E5E5">mvlr which is probably the Mandalay</font><font color="#CCCCCC"> base</font>

1120
00:42:21,499 --> 00:42:27,169
Wi-Fi network<font color="#CCCCCC"> so you know now I can get</font>

1121
00:42:24,769 --> 00:42:29,149
every every URL<font color="#E5E5E5"> that's ever</font><font color="#CCCCCC"> piped or</font>

1122
00:42:27,170 --> 00:42:30,739
<font color="#CCCCCC">clicking the edge without any DLL</font>

1123
00:42:29,150 --> 00:42:32,989
injection or anything like<font color="#E5E5E5"> that</font>

1124
00:42:30,739 --> 00:42:35,239
<font color="#CCCCCC">including</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> kernel mode</font><font color="#E5E5E5"> right another</font>

1125
00:42:32,989 --> 00:42:36,799
<font color="#E5E5E5">one is shell</font><font color="#CCCCCC"> lockscreen</font><font color="#E5E5E5"> active over the</font>

1126
00:42:35,239 --> 00:42:38,329
<font color="#E5E5E5">shells every time the</font><font color="#CCCCCC"> lockscreen exactly</font>

1127
00:42:36,799 --> 00:42:39,829
right and there are thousands of these

1128
00:42:38,329 --> 00:42:41,449
right so I'm sure you<font color="#E5E5E5"> can find</font><font color="#CCCCCC"> something</font>

1129
00:42:39,829 --> 00:42:43,969
interesting<font color="#CCCCCC"> if you go over that list</font>

1130
00:42:41,449 --> 00:42:46,759
<font color="#E5E5E5">there's also Wi-Fi</font><font color="#CCCCCC"> deselect you change</font>

1131
00:42:43,969 --> 00:42:48,679
<font color="#E5E5E5">state like there's one called FS RTL opt</font>

1132
00:42:46,759 --> 00:42:50,809
lock break where you write a bunch<font color="#E5E5E5"> of</font>

1133
00:42:48,679 --> 00:42:53,390
<font color="#E5E5E5">pits</font><font color="#CCCCCC"> and there's a servicing</font><font color="#E5E5E5"> user space</font>

1134
00:42:50,809 --> 00:42:55,339
that terminates those pits for you so

1135
00:42:53,390 --> 00:42:57,288
you just<font color="#E5E5E5"> write like</font><font color="#CCCCCC"> eight and</font><font color="#E5E5E5"> it just</font>

1136
00:42:55,339 --> 00:42:58,969
kills pit number<font color="#CCCCCC"> eight</font><font color="#E5E5E5"> now you'd have to</font>

1137
00:42:57,289 --> 00:43:00,739
be system so this one is<font color="#E5E5E5"> not something</font><font color="#CCCCCC"> a</font>

1138
00:42:58,969 --> 00:43:02,509
<font color="#E5E5E5">you know app container can write in here</font>

1139
00:43:00,739 --> 00:43:04,489
<font color="#E5E5E5">you have to</font><font color="#CCCCCC"> be system if your system you</font>

1140
00:43:02,509 --> 00:43:05,920
can already terminate process right but

1141
00:43:04,489 --> 00:43:08,029
you<font color="#E5E5E5"> terminated process going through</font>

1142
00:43:05,920 --> 00:43:09,799
<font color="#E5E5E5">mechanisms that have no CD articles know</font>

1143
00:43:08,029 --> 00:43:11,119
how to<font color="#E5E5E5"> look at who the heck knows</font><font color="#CCCCCC"> that</font>

1144
00:43:09,799 --> 00:43:13,969
if you write<font color="#E5E5E5"> eight in there</font>

1145
00:43:11,119 --> 00:43:15,410
it ends up killing process eight<font color="#CCCCCC"> you</font>

1146
00:43:13,969 --> 00:43:17,209
know there's other<font color="#CCCCCC"> things</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> BNF</font>

1147
00:43:15,410 --> 00:43:19,308
<font color="#CCCCCC">surd flushed</font><font color="#E5E5E5"> cache sugar which</font><font color="#CCCCCC"> flush to</font>

1148
00:43:17,209 --> 00:43:21,410
the<font color="#CCCCCC"> certificate cache or boot memory</font>

1149
00:43:19,309 --> 00:43:23,749
partitions restore which restores memory

1150
00:43:21,410 --> 00:43:25,788
allocations<font color="#CCCCCC"> so there's nothing</font><font color="#E5E5E5"> nfid</font><font color="#CCCCCC"> that</font>

1151
00:43:23,749 --> 00:43:27,109
by signaling them<font color="#E5E5E5"> you get the</font><font color="#CCCCCC"> system</font><font color="#E5E5E5"> to</font>

1152
00:43:25,789 --> 00:43:28,729
do certain<font color="#E5E5E5"> things they almost behave</font>

1153
00:43:27,109 --> 00:43:30,679
like<font color="#E5E5E5"> API is where you put some</font>

1154
00:43:28,729 --> 00:43:32,959
<font color="#CCCCCC">parameters you signal the</font><font color="#E5E5E5"> event and then</font>

1155
00:43:30,679 --> 00:43:34,609
some service does some action on<font color="#CCCCCC"> behalf</font>

1156
00:43:32,959 --> 00:43:38,899
of that and you know<font color="#E5E5E5"> there's really</font><font color="#CCCCCC"> lots</font>

1157
00:43:34,609 --> 00:43:41,089
examples people<font color="#E5E5E5"> will find and so if you</font>

1158
00:43:38,900 --> 00:43:42,799
want to<font color="#CCCCCC"> kind of find things</font><font color="#E5E5E5"> to have fun</font>

1159
00:43:41,089 --> 00:43:45,319
with one of the things you can<font color="#E5E5E5"> do is</font>

1160
00:43:42,799 --> 00:43:46,939
<font color="#E5E5E5">basically dump the</font><font color="#CCCCCC"> WUF process context</font>

1161
00:43:45,319 --> 00:43:48,349
<font color="#E5E5E5">and instead of a double eunice process</font>

1162
00:43:46,939 --> 00:43:50,118
context you're gonna see all<font color="#CCCCCC"> the active</font>

1163
00:43:48,349 --> 00:43:52,609
<font color="#CCCCCC">for subscriptions</font><font color="#E5E5E5"> now if you look at a</font>

1164
00:43:50,119 --> 00:43:54,170
system process all of<font color="#CCCCCC"> its subscriptions</font>

1165
00:43:52,609 --> 00:43:56,299
are basically subscriptions owned by

1166
00:43:54,170 --> 00:43:58,189
<font color="#E5E5E5">kernel mode drivers as you can see what</font>

1167
00:43:56,299 --> 00:44:00,559
are<font color="#E5E5E5"> all the kernel mode callbacks</font>

1168
00:43:58,189 --> 00:44:02,569
<font color="#E5E5E5">that'll get notified based on what</font><font color="#CCCCCC"> W&F</font>

1169
00:44:00,559 --> 00:44:04,309
<font color="#E5E5E5">ID that kind of gives you know this</font>

1170
00:44:02,569 --> 00:44:06,288
driver is my attack surface right here

1171
00:44:04,309 --> 00:44:07,939
<font color="#CCCCCC">and then the</font><font color="#E5E5E5"> callbacks office again you</font>

1172
00:44:06,289 --> 00:44:10,009
<font color="#E5E5E5">get a payload and the question is you</font>

1173
00:44:07,939 --> 00:44:11,839
know if<font color="#CCCCCC"> i statically analyze the driver</font>

1174
00:44:10,009 --> 00:44:13,400
<font color="#E5E5E5">what</font><font color="#CCCCCC"> does it do with</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> pay</font><font color="#E5E5E5"> with its</font>

1175
00:44:11,839 --> 00:44:15,308
payload is it actually correctly

1176
00:44:13,400 --> 00:44:18,260
handling the data<font color="#CCCCCC"> that</font><font color="#E5E5E5"> comes in there</font>

1177
00:44:15,309 --> 00:44:19,670
now in some cases<font color="#E5E5E5"> you're going to find</font>

1178
00:44:18,260 --> 00:44:21,860
aggravated driver<font color="#E5E5E5"> there's a driver</font>

1179
00:44:19,670 --> 00:44:24,110
called<font color="#E5E5E5"> the event aggregator ei dot sis</font>

1180
00:44:21,860 --> 00:44:26,030
and it a<font color="#E5E5E5"> great supple unified ease and</font>

1181
00:44:24,110 --> 00:44:28,400
it has its own sub callbacks

1182
00:44:26,030 --> 00:44:30,430
so there's drivers<font color="#E5E5E5"> that rely on CA da</font>

1183
00:44:28,400 --> 00:44:32,810
sis which then registered<font color="#CCCCCC"> some</font><font color="#E5E5E5"> callback</font>

1184
00:44:30,430 --> 00:44:34,669
<font color="#CCCCCC">kind</font><font color="#E5E5E5"> of like</font><font color="#CCCCCC"> in userspace</font><font color="#E5E5E5"> yet ntdll</font>

1185
00:44:32,810 --> 00:44:38,029
acting as an aggregator<font color="#E5E5E5"> as well in</font>

1186
00:44:34,670 --> 00:44:40,780
<font color="#E5E5E5">userspace</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> an RTL pwf process</font>

1187
00:44:38,030 --> 00:44:43,070
subscriptions table and this table<font color="#CCCCCC"> has</font>

1188
00:44:40,780 --> 00:44:45,530
<font color="#E5E5E5">underling</font><font color="#CCCCCC"> lists of all the</font><font color="#E5E5E5"> active</font>

1189
00:44:43,070 --> 00:44:47,420
subscriptions as<font color="#CCCCCC"> Gabriele talked about</font>

1190
00:44:45,530 --> 00:44:49,070
for each<font color="#E5E5E5"> subscription all the callbacks</font>

1191
00:44:47,420 --> 00:44:50,780
that<font color="#CCCCCC"> are associated</font><font color="#E5E5E5"> with it and given a</font>

1192
00:44:49,070 --> 00:44:53,660
process you can<font color="#E5E5E5"> see what are all the</font>

1193
00:44:50,780 --> 00:44:55,970
user<font color="#E5E5E5"> mode functions inside of every DLL</font>

1194
00:44:53,660 --> 00:44:57,859
instead of every function<font color="#E5E5E5"> and what name</font>

1195
00:44:55,970 --> 00:44:59,660
are<font color="#CCCCCC"> they basically listening on so that</font>

1196
00:44:57,860 --> 00:45:02,120
kind of gives<font color="#CCCCCC"> you a</font><font color="#E5E5E5"> good mapping of here</font>

1197
00:44:59,660 --> 00:45:04,100
all the code paths<font color="#E5E5E5"> that I can hit by</font>

1198
00:45:02,120 --> 00:45:05,930
modifying or writing into certain<font color="#CCCCCC"> W and</font>

1199
00:45:04,100 --> 00:45:07,040
<font color="#CCCCCC">F state names</font><font color="#E5E5E5"> and let me statically</font>

1200
00:45:05,930 --> 00:45:08,240
analyze the code<font color="#E5E5E5"> right so you can have</font>

1201
00:45:07,040 --> 00:45:10,759
the<font color="#CCCCCC"> Foss things and</font><font color="#E5E5E5"> just write garbage</font>

1202
00:45:08,240 --> 00:45:12,799
<font color="#E5E5E5">or you know look into what you know the</font>

1203
00:45:10,760 --> 00:45:14,840
callbacks are and seeing what they're

1204
00:45:12,800 --> 00:45:16,400
gonna be doing<font color="#E5E5E5"> and so once you know that</font>

1205
00:45:14,840 --> 00:45:18,680
<font color="#E5E5E5">you can basically signal arbitrary</font>

1206
00:45:16,400 --> 00:45:20,870
subscribers to see you know what's the

1207
00:45:18,680 --> 00:45:22,819
<font color="#E5E5E5">impact the system once I do this are the</font>

1208
00:45:20,870 --> 00:45:24,290
fun things that<font color="#E5E5E5"> I can do one of the</font>

1209
00:45:22,820 --> 00:45:26,120
<font color="#E5E5E5">things</font><font color="#CCCCCC"> actually wanted to talk about is</font>

1210
00:45:24,290 --> 00:45:28,460
how<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> play with windows insider</font>

1211
00:45:26,120 --> 00:45:30,920
features<font color="#E5E5E5"> because all of the wind side</font>

1212
00:45:28,460 --> 00:45:32,630
windows<font color="#CCCCCC"> inside insider preview</font><font color="#E5E5E5"> a be</font>

1213
00:45:30,920 --> 00:45:34,430
testing<font color="#E5E5E5"> that Microsoft does where they</font>

1214
00:45:32,630 --> 00:45:36,200
<font color="#E5E5E5">enable dark mode for half of you but not</font>

1215
00:45:34,430 --> 00:45:37,850
<font color="#E5E5E5">the other half and they see if one half</font>

1216
00:45:36,200 --> 00:45:39,620
is jealous of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> other half for other</font>

1217
00:45:37,850 --> 00:45:42,110
good<font color="#CCCCCC"> reasons or bad</font><font color="#E5E5E5"> reasons is they</font>

1218
00:45:39,620 --> 00:45:45,200
<font color="#CCCCCC">actually encode thousands of a be</font>

1219
00:45:42,110 --> 00:45:48,230
testing features<font color="#CCCCCC"> asked w</font><font color="#E5E5E5"> enough payload</font>

1220
00:45:45,200 --> 00:45:49,879
inside of w<font color="#CCCCCC"> nfid</font><font color="#E5E5E5"> and that's so figuring</font>

1221
00:45:48,230 --> 00:45:52,520
<font color="#E5E5E5">this out</font><font color="#CCCCCC"> rafael Riviera</font>

1222
00:45:49,880 --> 00:45:55,490
really great you<font color="#E5E5E5"> know windows MVP and</font>

1223
00:45:52,520 --> 00:45:57,140
internals<font color="#E5E5E5"> kind of person he ended up</font>

1224
00:45:55,490 --> 00:45:59,089
figuring<font color="#E5E5E5"> us out as well and he</font><font color="#CCCCCC"> actually</font>

1225
00:45:57,140 --> 00:46:01,580
<font color="#E5E5E5">created a tool on github called mock to</font>

1226
00:45:59,090 --> 00:46:04,400
where it actually<font color="#E5E5E5"> uses</font><font color="#CCCCCC"> WF underneath the</font>

1227
00:46:01,580 --> 00:46:05,990
scenes<font color="#E5E5E5"> to modify which windows insider</font>

1228
00:46:04,400 --> 00:46:07,640
preview features are activated on your

1229
00:46:05,990 --> 00:46:09,560
<font color="#E5E5E5">machine so even though you didn't get</font>

1230
00:46:07,640 --> 00:46:11,299
selected<font color="#E5E5E5"> to try</font><font color="#CCCCCC"> this cool new dark mode</font>

1231
00:46:09,560 --> 00:46:13,370
feature<font color="#E5E5E5"> with this you can kind of force</font>

1232
00:46:11,300 --> 00:46:15,350
it on<font color="#E5E5E5"> or if you're like yuck dark mode</font>

1233
00:46:13,370 --> 00:46:18,380
you just<font color="#E5E5E5"> want to force it off you can do</font>

1234
00:46:15,350 --> 00:46:19,940
that so that's<font color="#E5E5E5"> kind of you know one of</font>

1235
00:46:18,380 --> 00:46:21,740
<font color="#CCCCCC">the many</font><font color="#E5E5E5"> things that rely on top of that</font>

1236
00:46:19,940 --> 00:46:22,910
<font color="#E5E5E5">up</font><font color="#CCCCCC"> that'd be enough and if you go over</font>

1237
00:46:21,740 --> 00:46:24,560
and you<font color="#E5E5E5"> look at like</font><font color="#CCCCCC"> what are</font><font color="#E5E5E5"> some of</font>

1238
00:46:22,910 --> 00:46:26,720
the interesting<font color="#CCCCCC"> insider</font><font color="#E5E5E5"> settings you can</font>

1239
00:46:24,560 --> 00:46:28,610
enable<font color="#E5E5E5"> one of them is Windows</font>

1240
00:46:26,720 --> 00:46:31,009
application<font color="#E5E5E5"> guard container for office</font>

1241
00:46:28,610 --> 00:46:31,369
<font color="#E5E5E5">oh cool office under application guard I</font>

1242
00:46:31,010 --> 00:46:34,130
know

1243
00:46:31,369 --> 00:46:35,089
<font color="#E5E5E5">gonna happen the Andromeda store</font><font color="#CCCCCC"> oh so</font>

1244
00:46:34,130 --> 00:46:38,059
there is gonna<font color="#CCCCCC"> be a device called</font>

1245
00:46:35,089 --> 00:46:40,150
Andromeda<font color="#E5E5E5"> the CNN anti-spoofing data</font>

1246
00:46:38,059 --> 00:46:43,579
collection not<font color="#E5E5E5"> I'm gonna get into that</font>

1247
00:46:40,150 --> 00:46:45,680
deep<font color="#CCCCCC"> inferno I don't know what</font><font color="#E5E5E5"> that does</font>

1248
00:46:43,579 --> 00:46:48,079
dev mode internal<font color="#CCCCCC"> alright so you</font><font color="#E5E5E5"> kind of</font>

1249
00:46:45,680 --> 00:46:50,269
see<font color="#E5E5E5"> you know new features that</font><font color="#CCCCCC"> they're</font>

1250
00:46:48,079 --> 00:46:52,549
testing<font color="#E5E5E5"> internally</font><font color="#CCCCCC"> and what</font><font color="#E5E5E5"> W&F you can</font>

1251
00:46:50,269 --> 00:46:54,919
enable the enable those on like HV CI

1252
00:46:52,549 --> 00:46:56,630
everywhere<font color="#E5E5E5"> or you know virtual machine</font>

1253
00:46:54,920 --> 00:46:59,269
chipset load<font color="#E5E5E5"> firmer from file so</font>

1254
00:46:56,630 --> 00:47:00,680
interesting things show<font color="#CCCCCC"> up there you</font>

1255
00:46:59,269 --> 00:47:03,288
<font color="#E5E5E5">know in the world of things that rely</font>

1256
00:47:00,680 --> 00:47:04,640
behind<font color="#CCCCCC"> WN F so if you interested in some</font>

1257
00:47:03,289 --> 00:47:07,069
of<font color="#E5E5E5"> the insider stuff here definitely</font>

1258
00:47:04,640 --> 00:47:08,808
<font color="#CCCCCC">check out Mach 2</font><font color="#E5E5E5"> by Rafael Rivera on</font>

1259
00:47:07,069 --> 00:47:09,950
github<font color="#CCCCCC"> he</font><font color="#E5E5E5"> uses you know they'll be</font>

1260
00:47:08,809 --> 00:47:11,390
<font color="#E5E5E5">enough to kind of mess around these</font>

1261
00:47:09,950 --> 00:47:14,029
things<font color="#E5E5E5"> and there's lots of</font><font color="#CCCCCC"> other things</font>

1262
00:47:11,390 --> 00:47:15,440
<font color="#E5E5E5">you can mess</font><font color="#CCCCCC"> around with as well another</font>

1263
00:47:14,029 --> 00:47:17,930
<font color="#CCCCCC">thing you can</font><font color="#E5E5E5"> do with</font><font color="#CCCCCC"> W&F that's kind of</font>

1264
00:47:15,440 --> 00:47:20,089
not by design<font color="#E5E5E5"> is code injection right</font>

1265
00:47:17,930 --> 00:47:21,649
lots of people love<font color="#CCCCCC"> to migrate code from</font>

1266
00:47:20,089 --> 00:47:23,180
<font color="#CCCCCC">one place to</font><font color="#E5E5E5"> another and the way</font><font color="#CCCCCC"> they</font>

1267
00:47:21,650 --> 00:47:25,190
normally<font color="#E5E5E5"> do that is by either calling</font>

1268
00:47:23,180 --> 00:47:27,109
<font color="#CCCCCC">write process memory</font><font color="#E5E5E5"> or using file</font>

1269
00:47:25,190 --> 00:47:29,089
mappings or using add some objects or

1270
00:47:27,109 --> 00:47:30,499
<font color="#E5E5E5">Windows messages or</font><font color="#CCCCCC"> GUI objects because</font>

1271
00:47:29,089 --> 00:47:32,569
<font color="#E5E5E5">these are all Windows</font><font color="#CCCCCC"> epi</font><font color="#E5E5E5"> is where one</font>

1272
00:47:30,499 --> 00:47:34,700
<font color="#E5E5E5">side can send some data and the</font><font color="#CCCCCC"> other</font>

1273
00:47:32,569 --> 00:47:36,380
side can receive the<font color="#E5E5E5"> data well W have</font>

1274
00:47:34,700 --> 00:47:38,720
lets you do<font color="#E5E5E5"> that as well so if you</font>

1275
00:47:36,380 --> 00:47:40,519
actually<font color="#E5E5E5"> know there's a</font><font color="#CCCCCC"> W nfid</font><font color="#E5E5E5"> that a</font>

1276
00:47:38,720 --> 00:47:42,680
process already<font color="#E5E5E5"> kind of reads from time</font>

1277
00:47:40,519 --> 00:47:44,419
to time if you signal that<font color="#CCCCCC"> ID</font><font color="#E5E5E5"> and put a</font>

1278
00:47:42,680 --> 00:47:45,680
payload you<font color="#E5E5E5"> know your payload is gonna</font>

1279
00:47:44,420 --> 00:47:47,480
end up<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> other process right when</font>

1280
00:47:45,680 --> 00:47:49,609
<font color="#E5E5E5">that process sends</font><font color="#CCCCCC"> a heap address to get</font>

1281
00:47:47,480 --> 00:47:51,019
<font color="#E5E5E5">the result the result is</font><font color="#CCCCCC"> basically your</font>

1282
00:47:49,609 --> 00:47:53,869
data so you<font color="#CCCCCC"> can use this as a way to</font>

1283
00:47:51,019 --> 00:47:55,910
inject<font color="#E5E5E5"> data or code into another</font><font color="#CCCCCC"> process</font>

1284
00:47:53,869 --> 00:47:56,839
without the standard techniques that you

1285
00:47:55,910 --> 00:48:00,230
know everyone<font color="#CCCCCC"> on the internet knows</font>

1286
00:47:56,839 --> 00:48:02,180
about you can also redirect code

1287
00:48:00,230 --> 00:48:03,769
execution<font color="#E5E5E5"> right because</font><font color="#CCCCCC"> you want a</font>

1288
00:48:02,180 --> 00:48:05,509
process<font color="#CCCCCC"> the or threat to do something</font>

1289
00:48:03,769 --> 00:48:08,089
else<font color="#E5E5E5"> and</font><font color="#CCCCCC"> what it normally</font><font color="#E5E5E5"> does typically</font>

1290
00:48:05,509 --> 00:48:09,829
use<font color="#E5E5E5"> an EPC or remote thread or we change</font>

1291
00:48:08,089 --> 00:48:12,440
<font color="#E5E5E5">the thread context or you modify the</font>

1292
00:48:09,829 --> 00:48:14,239
window<font color="#E5E5E5"> long there's again lots of things</font>

1293
00:48:12,440 --> 00:48:16,880
that<font color="#E5E5E5"> hackers and you know designers know</font>

1294
00:48:14,239 --> 00:48:18,109
about but remember<font color="#CCCCCC"> that instead</font><font color="#E5E5E5"> of every</font>

1295
00:48:16,880 --> 00:48:20,210
process<font color="#E5E5E5"> there's a list of very</font>

1296
00:48:18,109 --> 00:48:22,730
subscription and every subscription<font color="#CCCCCC"> has</font>

1297
00:48:20,210 --> 00:48:25,819
a<font color="#E5E5E5"> callback and a context and so</font>

1298
00:48:22,730 --> 00:48:28,249
basically if I can find<font color="#E5E5E5"> out</font><font color="#CCCCCC"> a WF IDs</font>

1299
00:48:25,819 --> 00:48:29,989
callback<font color="#E5E5E5"> inside of your process</font><font color="#CCCCCC"> all I</font>

1300
00:48:28,249 --> 00:48:32,959
have<font color="#E5E5E5"> to do is modify the data structure</font>

1301
00:48:29,989 --> 00:48:34,400
by passing a different callback<font color="#E5E5E5"> now I</font>

1302
00:48:32,960 --> 00:48:36,589
have to worry<font color="#E5E5E5"> about control flow guard</font>

1303
00:48:34,400 --> 00:48:38,239
<font color="#E5E5E5">signaling the W and F ID and now that</font>

1304
00:48:36,589 --> 00:48:40,369
other<font color="#CCCCCC"> function runs instead of the real</font>

1305
00:48:38,239 --> 00:48:42,319
function and<font color="#E5E5E5"> parameter five and six are</font>

1306
00:48:40,369 --> 00:48:43,970
<font color="#CCCCCC">the</font><font color="#E5E5E5"> buffer in the buffer size so by</font>

1307
00:48:42,319 --> 00:48:45,119
stimuli that<font color="#E5E5E5"> the nfid</font><font color="#CCCCCC"> I now get your</font>

1308
00:48:43,970 --> 00:48:47,038
process<font color="#E5E5E5"> to execute</font>

1309
00:48:45,119 --> 00:48:48,749
function<font color="#E5E5E5"> it normally</font><font color="#CCCCCC"> wouldn't</font><font color="#E5E5E5"> execute</font>

1310
00:48:47,039 --> 00:48:50,579
now there's<font color="#CCCCCC"> million</font><font color="#E5E5E5"> other things you can</font>

1311
00:48:48,749 --> 00:48:53,519
do like<font color="#CCCCCC"> this but you know it's another</font>

1312
00:48:50,579 --> 00:48:55,529
kind<font color="#E5E5E5"> of use case for this um or we can</font>

1313
00:48:53,519 --> 00:48:57,930
modify the context<font color="#E5E5E5"> a lot of double</font><font color="#CCCCCC"> Univ</font>

1314
00:48:55,529 --> 00:49:00,029
callbacks<font color="#CCCCCC"> what the callback code does is</font>

1315
00:48:57,930 --> 00:49:01,649
it<font color="#CCCCCC"> gets a context</font><font color="#E5E5E5"> and then it made on</font>

1316
00:49:00,029 --> 00:49:03,450
that context there's a<font color="#E5E5E5"> V table there</font>

1317
00:49:01,650 --> 00:49:05,099
<font color="#E5E5E5">there's</font><font color="#CCCCCC"> another</font><font color="#E5E5E5"> function pointer there I</font>

1318
00:49:03,450 --> 00:49:06,839
could just modify<font color="#E5E5E5"> the function pointer</font>

1319
00:49:05,099 --> 00:49:08,640
<font color="#E5E5E5">in the call in the callback context of a</font>

1320
00:49:06,839 --> 00:49:11,640
<font color="#CCCCCC">callback</font><font color="#E5E5E5"> signal</font><font color="#CCCCCC"> W nfid</font>

1321
00:49:08,640 --> 00:49:13,379
the real<font color="#E5E5E5"> callback runs but when it reads</font>

1322
00:49:11,640 --> 00:49:15,328
its<font color="#E5E5E5"> context its context is different and</font>

1323
00:49:13,380 --> 00:49:17,730
<font color="#E5E5E5">something else ends up basically</font>

1324
00:49:15,329 --> 00:49:20,069
happening<font color="#CCCCCC"> alright so those are kind of</font>

1325
00:49:17,730 --> 00:49:23,609
<font color="#E5E5E5">some ideas of things</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you can end up</font>

1326
00:49:20,069 --> 00:49:26,069
doing<font color="#E5E5E5"> to kind of wrap up here</font><font color="#CCCCCC"> w</font><font color="#E5E5E5"> NF is a</font>

1327
00:49:23,609 --> 00:49:27,328
very interesting<font color="#E5E5E5"> well-designed kind of</font>

1328
00:49:26,069 --> 00:49:29,220
feature<font color="#E5E5E5"> that was added to Windows 8</font>

1329
00:49:27,329 --> 00:49:31,859
provides<font color="#CCCCCC"> lots of useful legitimate</font>

1330
00:49:29,220 --> 00:49:33,480
functionality<font color="#CCCCCC"> but because it's highly</font>

1331
00:49:31,859 --> 00:49:35,130
<font color="#E5E5E5">undocumented</font><font color="#CCCCCC"> and provides</font><font color="#E5E5E5"> almost no</font>

1332
00:49:33,480 --> 00:49:36,660
visibility<font color="#CCCCCC"> other than a</font><font color="#E5E5E5"> wind back</font>

1333
00:49:35,130 --> 00:49:38,099
extension which doesn't work until<font color="#E5E5E5"> a</font>

1334
00:49:36,660 --> 00:49:40,319
<font color="#CCCCCC">Gabi fixed it</font>

1335
00:49:38,099 --> 00:49:42,450
<font color="#E5E5E5">you basically have</font><font color="#CCCCCC"> no idea what's really</font>

1336
00:49:40,319 --> 00:49:44,190
<font color="#E5E5E5">using W net behind the scenes and</font>

1337
00:49:42,450 --> 00:49:45,660
there's really no<font color="#CCCCCC"> reason where Microsoft</font>

1338
00:49:44,190 --> 00:49:47,130
shouldn't just<font color="#E5E5E5"> publish the symbols for w</font>

1339
00:49:45,660 --> 00:49:49,019
NF ID and they'll be enough<font color="#CCCCCC"> it's not</font>

1340
00:49:47,130 --> 00:49:51,329
<font color="#E5E5E5">like there's some sort of</font><font color="#CCCCCC"> super-secret</font>

1341
00:49:49,019 --> 00:49:52,950
PII<font color="#CCCCCC"> and mojo in there</font><font color="#E5E5E5"> they probably just</font>

1342
00:49:51,329 --> 00:49:54,390
never thought<font color="#CCCCCC"> about adding the symbols</font>

1343
00:49:52,950 --> 00:49:57,058
<font color="#E5E5E5">that again creates a breeding ground</font>

1344
00:49:54,390 --> 00:49:58,410
where people can kind<font color="#E5E5E5"> of hide and the</font>

1345
00:49:57,059 --> 00:50:00,420
last thing here to note is that uh BNF

1346
00:49:58,410 --> 00:50:02,819
is basically<font color="#CCCCCC"> growing beyond just</font>

1347
00:50:00,420 --> 00:50:04,650
providing notifications<font color="#E5E5E5"> right</font><font color="#CCCCCC"> you've got</font>

1348
00:50:02,819 --> 00:50:06,630
a kernel user mode<font color="#CCCCCC"> above buffer</font><font color="#E5E5E5"> you've</font>

1349
00:50:04,650 --> 00:50:09,210
got things<font color="#E5E5E5"> like every edge tab being</font>

1350
00:50:06,630 --> 00:50:11,160
like sent and<font color="#CCCCCC"> W enough so there's more</font>

1351
00:50:09,210 --> 00:50:13,170
<font color="#E5E5E5">and</font><font color="#CCCCCC"> more things use W&F</font><font color="#E5E5E5"> well the</font>

1352
00:50:11,160 --> 00:50:14,940
question<font color="#E5E5E5"> is like our people gonna start</font>

1353
00:50:13,170 --> 00:50:17,279
<font color="#CCCCCC">doing silly things like putting code in</font>

1354
00:50:14,940 --> 00:50:18,690
<font color="#CCCCCC">W&F state names</font><font color="#E5E5E5"> or putting pointers and</font>

1355
00:50:17,279 --> 00:50:20,640
<font color="#CCCCCC">W in a state names like one</font><font color="#E5E5E5"> of the ones</font>

1356
00:50:18,690 --> 00:50:23,160
<font color="#E5E5E5">we</font><font color="#CCCCCC"> found</font><font color="#E5E5E5"> and so because it can be used</font>

1357
00:50:20,640 --> 00:50:24,569
to transfer<font color="#CCCCCC"> data across</font><font color="#E5E5E5"> boundaries you</font>

1358
00:50:23,160 --> 00:50:25,859
know<font color="#E5E5E5"> add marks don't have to be very</font>

1359
00:50:24,569 --> 00:50:28,170
careful that<font color="#E5E5E5"> they make sure that they</font>

1360
00:50:25,859 --> 00:50:30,328
know you know<font color="#CCCCCC"> WF is not</font><font color="#E5E5E5"> documented that</font>

1361
00:50:28,170 --> 00:50:32,039
doesn't mean that<font color="#E5E5E5"> it's secure</font><font color="#CCCCCC"> so</font>

1362
00:50:30,329 --> 00:50:33,450
definitely if you're<font color="#E5E5E5"> a defender start</font>

1363
00:50:32,039 --> 00:50:34,980
fuzzing start building your<font color="#CCCCCC"> own</font>

1364
00:50:33,450 --> 00:50:36,868
visibility<font color="#E5E5E5"> tool start poking at this</font>

1365
00:50:34,980 --> 00:50:38,160
<font color="#E5E5E5">because I'm sure you'll find</font><font color="#CCCCCC"> Dragons and</font>

1366
00:50:36,869 --> 00:50:40,829
hopefully once you release<font color="#CCCCCC"> the tools</font>

1367
00:50:38,160 --> 00:50:43,920
that'll give you<font color="#E5E5E5"> kind of some more some</font>

1368
00:50:40,829 --> 00:50:45,390
more ideas there<font color="#E5E5E5"> all right and so thank</font>

1369
00:50:43,920 --> 00:50:47,489
you very very<font color="#E5E5E5"> much thank you to</font>

1370
00:50:45,390 --> 00:50:50,879
<font color="#E5E5E5">Gabrielle for assisting with</font><font color="#CCCCCC"> the talk</font>

1371
00:50:47,489 --> 00:50:52,440
and helping here I hope<font color="#E5E5E5"> you liked it and</font>

1372
00:50:50,880 --> 00:50:54,539
<font color="#E5E5E5">if there's any questions I</font><font color="#CCCCCC"> think we can</font>

1373
00:50:52,440 --> 00:50:56,069
move to a different room<font color="#CCCCCC"> and I'll</font><font color="#E5E5E5"> be</font>

1374
00:50:54,539 --> 00:50:56,390
happy<font color="#CCCCCC"> to feel</font><font color="#E5E5E5"> those so thank you</font><font color="#CCCCCC"> very</font>

1375
00:50:56,069 --> 00:51:02,099
much

1376
00:50:56,390 --> 00:51:02,098
[Applause]

