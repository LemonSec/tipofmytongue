1
00:00:00,030 --> 00:00:05,370
well thanks for<font color="#E5E5E5"> coming</font><font color="#CCCCCC"> I appreciate that</font>

2
00:00:02,460 --> 00:00:07,830
<font color="#E5E5E5">it's towards the end of the black cat</font>

3
00:00:05,370 --> 00:00:10,559
conference and I'm<font color="#E5E5E5"> delighted to be here</font>

4
00:00:07,830 --> 00:00:13,379
for my first<font color="#E5E5E5"> ever speaking engagement at</font>

5
00:00:10,559 --> 00:00:14,969
<font color="#CCCCCC">blackhat I can say unequivocally</font><font color="#E5E5E5"> that</font>

6
00:00:13,380 --> 00:00:17,449
this is the<font color="#E5E5E5"> most people I've</font><font color="#CCCCCC"> ever</font><font color="#E5E5E5"> seen</font>

7
00:00:14,969 --> 00:00:21,390
<font color="#E5E5E5">in one room coming</font><font color="#CCCCCC"> to one of my talks</font>

8
00:00:17,449 --> 00:00:23,460
<font color="#CCCCCC">Phil Young and I gave a talk at RSA</font><font color="#E5E5E5"> last</font>

9
00:00:21,390 --> 00:00:27,119
year and there<font color="#E5E5E5"> were seven people</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font>

10
00:00:23,460 --> 00:00:28,920
room<font color="#E5E5E5"> including me and Phil</font><font color="#CCCCCC"> so this is</font>

11
00:00:27,119 --> 00:00:30,480
outstanding<font color="#CCCCCC"> thank you now most</font><font color="#E5E5E5"> of you</font>

12
00:00:28,920 --> 00:00:31,890
<font color="#E5E5E5">are probably thinking wait I'm in the</font>

13
00:00:30,480 --> 00:00:35,489
wrong<font color="#E5E5E5"> room but you can't leave now</font>

14
00:00:31,890 --> 00:00:36,960
<font color="#CCCCCC">you're</font><font color="#E5E5E5"> in so you have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> say and I take</font>

15
00:00:35,489 --> 00:00:38,578
the<font color="#E5E5E5"> next few slides to just talk a</font>

16
00:00:36,960 --> 00:00:39,840
little bit about me before<font color="#E5E5E5"> we dive into</font>

17
00:00:38,579 --> 00:00:43,129
it so if I could<font color="#CCCCCC"> just draw your</font>

18
00:00:39,840 --> 00:00:43,129
attention over<font color="#CCCCCC"> to one of these monitors</font>

19
00:01:06,400 --> 00:01:11,210
so I spent the<font color="#E5E5E5"> last prior to the last</font>

20
00:01:09,890 --> 00:01:13,040
<font color="#E5E5E5">year</font><font color="#CCCCCC"> and a half about the last 20 years</font>

21
00:01:11,210 --> 00:01:15,229
<font color="#E5E5E5">at a large financial institution and</font>

22
00:01:13,040 --> 00:01:19,220
<font color="#E5E5E5">basically got tired of working for</font>

23
00:01:15,229 --> 00:01:20,900
<font color="#E5E5E5">corporate America and then I reached out</font>

24
00:01:19,220 --> 00:01:23,300
<font color="#E5E5E5">to a friend of mine who owns a</font>

25
00:01:20,900 --> 00:01:25,400
consulting<font color="#CCCCCC"> company in</font><font color="#E5E5E5"> the UK said hey</font>

26
00:01:23,300 --> 00:01:28,130
how about we start a franchise<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> US</font>

27
00:01:25,400 --> 00:01:29,540
under for our SM partners and I'll run

28
00:01:28,130 --> 00:01:32,800
<font color="#E5E5E5">it and we thought that was</font><font color="#CCCCCC"> a great idea</font>

29
00:01:29,540 --> 00:01:34,670
so<font color="#CCCCCC"> we did</font><font color="#E5E5E5"> so I</font><font color="#CCCCCC"> am the director of</font>

30
00:01:32,800 --> 00:01:36,530
<font color="#E5E5E5">operations for North</font><font color="#CCCCCC"> American Forests</font>

31
00:01:34,670 --> 00:01:38,450
and partners<font color="#E5E5E5"> and all we do is mainframe</font>

32
00:01:36,530 --> 00:01:41,300
we do<font color="#CCCCCC"> mainframes security assessments</font>

33
00:01:38,450 --> 00:01:44,180
mainframe software<font color="#E5E5E5"> we do Red Team</font>

34
00:01:41,300 --> 00:01:45,920
augmentation<font color="#CCCCCC"> and</font><font color="#E5E5E5"> when I talk about</font>

35
00:01:44,180 --> 00:01:48,130
mainframe for<font color="#E5E5E5"> the purposes</font><font color="#CCCCCC"> of this talk</font>

36
00:01:45,920 --> 00:01:51,710
<font color="#E5E5E5">I am talking about IBM's</font>

37
00:01:48,130 --> 00:01:53,240
<font color="#CCCCCC">System z running z/os there are other</font>

38
00:01:51,710 --> 00:01:55,160
things<font color="#E5E5E5"> that maybe rightly or wrongly</font>

39
00:01:53,240 --> 00:01:56,420
considered<font color="#CCCCCC"> a mainframe</font><font color="#E5E5E5"> but for what</font>

40
00:01:55,160 --> 00:01:58,070
we're<font color="#E5E5E5"> talking about</font><font color="#CCCCCC"> gear we're</font><font color="#E5E5E5"> talking</font>

41
00:01:56,420 --> 00:02:01,100
about<font color="#E5E5E5"> what is probably the 800-pound</font>

42
00:01:58,070 --> 00:02:03,440
gorilla the most predominant mainframe

43
00:02:01,100 --> 00:02:08,810
out there<font color="#CCCCCC"> you may have heard</font><font color="#E5E5E5"> of it</font>

44
00:02:03,440 --> 00:02:10,970
<font color="#E5E5E5">referred to as system Z or Z MVS is the</font>

45
00:02:08,810 --> 00:02:12,620
<font color="#E5E5E5">operating system now called z/os for the</font>

46
00:02:10,970 --> 00:02:17,109
last several years<font color="#E5E5E5"> that's what we'll</font><font color="#CCCCCC"> be</font>

47
00:02:12,620 --> 00:02:20,990
<font color="#E5E5E5">talking about here so what is this talk</font>

48
00:02:17,110 --> 00:02:23,240
this talk<font color="#E5E5E5"> is a year maybe he's worth of</font>

49
00:02:20,990 --> 00:02:26,690
research and working<font color="#E5E5E5"> on stuff condensed</font>

50
00:02:23,240 --> 00:02:28,730
<font color="#E5E5E5">into 40 minutes it's probably several</font>

51
00:02:26,690 --> 00:02:30,590
<font color="#E5E5E5">week class if we were to really blow</font>

52
00:02:28,730 --> 00:02:32,119
through it<font color="#E5E5E5"> all so</font><font color="#CCCCCC"> I am gonna talk about</font>

53
00:02:30,590 --> 00:02:33,560
<font color="#E5E5E5">a lot</font><font color="#CCCCCC"> of these things</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> if you already</font>

54
00:02:32,120 --> 00:02:35,090
<font color="#E5E5E5">know what what I'm talking about because</font>

55
00:02:33,560 --> 00:02:37,340
<font color="#E5E5E5">I can't go into a tremendous</font><font color="#CCCCCC"> amount</font><font color="#E5E5E5"> of</font>

56
00:02:35,090 --> 00:02:39,260
detail but<font color="#E5E5E5"> I'll make analogies wherever</font>

57
00:02:37,340 --> 00:02:40,700
I can<font color="#E5E5E5"> to things that</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> you</font>

58
00:02:39,260 --> 00:02:42,739
<font color="#E5E5E5">probably do understand if you're not</font><font color="#CCCCCC"> a</font>

59
00:02:40,700 --> 00:02:45,429
mainframe<font color="#CCCCCC"> ER</font><font color="#E5E5E5"> by the way who in the room</font>

60
00:02:42,739 --> 00:02:48,440
would consider themselves a mainframe<font color="#E5E5E5"> er</font>

61
00:02:45,430 --> 00:02:50,770
<font color="#CCCCCC">unit you know who you are</font><font color="#E5E5E5"> that's pretty</font>

62
00:02:48,440 --> 00:02:53,090
reasonable<font color="#CCCCCC"> I think I saw six maybe four</font>

63
00:02:50,770 --> 00:02:54,920
perfect so all of the<font color="#E5E5E5"> main framers at</font>

64
00:02:53,090 --> 00:02:57,290
<font color="#E5E5E5">blackhat are probably here I think</font>

65
00:02:54,920 --> 00:02:59,299
that's safe<font color="#E5E5E5"> to</font><font color="#CCCCCC"> say</font><font color="#E5E5E5"> but the things that</font>

66
00:02:57,290 --> 00:03:01,220
<font color="#E5E5E5">we</font><font color="#CCCCCC"> talked about</font><font color="#E5E5E5"> not specifically the</font>

67
00:02:59,300 --> 00:03:02,360
<font color="#E5E5E5">mainframe will be familiar to you so</font>

68
00:03:01,220 --> 00:03:04,670
we're gonna talk<font color="#CCCCCC"> a little bit about the</font>

69
00:03:02,360 --> 00:03:07,550
machine itself a little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> about the</font>

70
00:03:04,670 --> 00:03:09,920
structure<font color="#CCCCCC"> of it</font><font color="#E5E5E5"> the CPU instructions</font>

71
00:03:07,550 --> 00:03:11,300
binaries vulnerabilities some of the

72
00:03:09,920 --> 00:03:13,280
tools that are<font color="#E5E5E5"> out</font><font color="#CCCCCC"> there how we might</font>

73
00:03:11,300 --> 00:03:15,530
exploit and find these<font color="#E5E5E5"> vulnerabilities</font>

74
00:03:13,280 --> 00:03:16,940
but there's a lot<font color="#E5E5E5"> of one-on-one stuff</font>

75
00:03:15,530 --> 00:03:18,500
out there<font color="#CCCCCC"> that I'm not going</font><font color="#E5E5E5"> to go into</font>

76
00:03:16,940 --> 00:03:20,480
you<font color="#E5E5E5"> can look at all the people listed</font>

77
00:03:18,500 --> 00:03:23,660
there below have done<font color="#E5E5E5"> talks and videos</font>

78
00:03:20,480 --> 00:03:26,149
and blog posts<font color="#CCCCCC"> and</font><font color="#E5E5E5"> all kinds of stuff</font>

79
00:03:23,660 --> 00:03:30,560
101<font color="#E5E5E5"> wise on this platform</font><font color="#CCCCCC"> that's not</font>

80
00:03:26,150 --> 00:03:33,140
<font color="#E5E5E5">this so we talked</font><font color="#CCCCCC"> about the mainframe as</font>

81
00:03:30,560 --> 00:03:35,840
just as a machine<font color="#E5E5E5"> for a minute if I</font>

82
00:03:33,140 --> 00:03:38,869
bring up<font color="#CCCCCC"> mainframe to somebody usually</font>

83
00:03:35,840 --> 00:03:41,270
<font color="#CCCCCC">after they asked what I do</font><font color="#E5E5E5"> this first</font>

84
00:03:38,870 --> 00:03:43,000
word or<font color="#CCCCCC"> maybe somewhere in the top 10</font>

85
00:03:41,270 --> 00:03:47,420
words that comes out<font color="#CCCCCC"> of their mouth</font><font color="#E5E5E5"> is</font>

86
00:03:43,000 --> 00:03:50,360
<font color="#CCCCCC">this</font><font color="#E5E5E5"> anybody know what this is yeah this</font>

87
00:03:47,420 --> 00:03:52,160
<font color="#CCCCCC">is COBOL</font><font color="#E5E5E5"> right so I say I do mainframe</font>

88
00:03:50,360 --> 00:03:54,709
<font color="#CCCCCC">it</font><font color="#E5E5E5"> I'm like oh god that thing runs COBOL</font>

89
00:03:52,160 --> 00:03:56,720
right it's like yeah<font color="#CCCCCC"> is that is that</font>

90
00:03:54,709 --> 00:03:58,459
COBOL I'm like that's<font color="#E5E5E5"> not</font><font color="#CCCCCC"> really COBOL</font>

91
00:03:56,720 --> 00:04:03,019
<font color="#CCCCCC">anymore then your dishwasher is a fork</font>

92
00:03:58,459 --> 00:04:05,180
<font color="#E5E5E5">right</font><font color="#CCCCCC"> it's an operating system</font><font color="#E5E5E5"> that runs</font>

93
00:04:03,019 --> 00:04:07,010
<font color="#E5E5E5">a bunch of different programming</font>

94
00:04:05,180 --> 00:04:08,989
languages<font color="#CCCCCC"> COBOL just happens to</font><font color="#E5E5E5"> be one</font>

95
00:04:07,010 --> 00:04:10,280
<font color="#E5E5E5">of them got bad news if you're kind of</font>

96
00:04:08,989 --> 00:04:12,230
one<font color="#E5E5E5"> of these</font><font color="#CCCCCC"> people who's against COBOL</font>

97
00:04:10,280 --> 00:04:14,330
<font color="#CCCCCC">caused a great deal of the world runs</font><font color="#E5E5E5"> on</font>

98
00:04:12,230 --> 00:04:15,768
it still<font color="#E5E5E5"> in fact here's a tip and don't</font>

99
00:04:14,330 --> 00:04:16,910
<font color="#E5E5E5">share that outside this room but if you</font>

100
00:04:15,769 --> 00:04:18,918
want to make a ton of money learn how to

101
00:04:16,910 --> 00:04:22,810
write COBOL<font color="#CCCCCC"> because you'll probably</font>

102
00:04:18,918 --> 00:04:25,729
never have to ask<font color="#E5E5E5"> for another job again</font>

103
00:04:22,810 --> 00:04:26,990
if you ask the media<font color="#CCCCCC"> what a mainframe</font><font color="#E5E5E5"> is</font>

104
00:04:25,729 --> 00:04:33,110
generally you'll get something<font color="#E5E5E5"> that</font>

105
00:04:26,990 --> 00:04:36,470
looks like<font color="#E5E5E5"> this oops so IBM released</font>

106
00:04:33,110 --> 00:04:39,410
their new flagship<font color="#CCCCCC"> systems II this</font><font color="#E5E5E5"> year</font>

107
00:04:36,470 --> 00:04:42,229
called<font color="#CCCCCC"> the</font><font color="#E5E5E5"> Z 14 has been by all</font><font color="#CCCCCC"> accounts</font>

108
00:04:39,410 --> 00:04:43,880
just a raging success<font color="#E5E5E5"> and there was a</font>

109
00:04:42,229 --> 00:04:45,560
whole<font color="#CCCCCC"> bunch of news articles about it</font>

110
00:04:43,880 --> 00:04:47,659
and one<font color="#E5E5E5"> of them from a really well-known</font>

111
00:04:45,560 --> 00:04:49,190
newspaper<font color="#E5E5E5"> talked about it did a great</font>

112
00:04:47,660 --> 00:04:52,850
job talking<font color="#E5E5E5"> about</font><font color="#CCCCCC"> it and ran the byline</font>

113
00:04:49,190 --> 00:04:54,289
<font color="#CCCCCC">with this picture you know</font><font color="#E5E5E5"> I don't know</font>

114
00:04:52,850 --> 00:04:55,610
how I'm<font color="#E5E5E5"> gonna change people's minds if I</font>

115
00:04:54,289 --> 00:04:58,789
can't get the Wall Street Journal to

116
00:04:55,610 --> 00:05:00,200
publish a better picture<font color="#CCCCCC"> than that but</font>

117
00:04:58,789 --> 00:05:01,280
what it really<font color="#E5E5E5"> is if</font><font color="#CCCCCC"> you want to know</font>

118
00:05:00,200 --> 00:05:03,680
what it<font color="#CCCCCC"> looks like is something</font><font color="#E5E5E5"> like</font>

119
00:05:01,280 --> 00:05:04,880
<font color="#CCCCCC">this probably</font><font color="#E5E5E5"> not all that</font><font color="#CCCCCC"> dissimilar to</font>

120
00:05:03,680 --> 00:05:07,100
<font color="#E5E5E5">things you have in your data center</font>

121
00:05:04,880 --> 00:05:08,450
today<font color="#E5E5E5"> it's a lot</font><font color="#CCCCCC"> of rack full of CPU and</font>

122
00:05:07,100 --> 00:05:12,919
memory and a bunch of racks<font color="#E5E5E5"> full of</font>

123
00:05:08,450 --> 00:05:15,289
storage<font color="#CCCCCC"> it's important it's really</font>

124
00:05:12,919 --> 00:05:18,080
important<font color="#E5E5E5"> so</font><font color="#CCCCCC"> these these numbers are</font>

125
00:05:15,289 --> 00:05:19,310
over a year old<font color="#CCCCCC"> that they've gone up</font>

126
00:05:18,080 --> 00:05:22,700
since then but<font color="#E5E5E5"> I didn't feel like</font>

127
00:05:19,310 --> 00:05:24,020
updating<font color="#E5E5E5"> them but effectively from a</font>

128
00:05:22,700 --> 00:05:25,909
Global Payments perspective the

129
00:05:24,020 --> 00:05:27,000
mainframes globally process<font color="#E5E5E5"> about eight</font>

130
00:05:25,909 --> 00:05:29,190
trillion dollars

131
00:05:27,000 --> 00:05:31,020
twenty nine<font color="#E5E5E5"> billion ATM transactions</font>

132
00:05:29,190 --> 00:05:32,550
four billion<font color="#E5E5E5"> passenger flights these</font>

133
00:05:31,020 --> 00:05:33,840
<font color="#E5E5E5">numbers</font><font color="#CCCCCC"> don't mean much to me so I like</font>

134
00:05:32,550 --> 00:05:36,720
<font color="#CCCCCC">to break</font><font color="#E5E5E5"> them down into</font><font color="#CCCCCC"> something a</font>

135
00:05:33,840 --> 00:05:38,789
<font color="#E5E5E5">little bit smaller</font><font color="#CCCCCC"> eight</font><font color="#E5E5E5"> trillion</font>

136
00:05:36,720 --> 00:05:41,730
dollars is<font color="#CCCCCC"> the GDP of the UK France</font>

137
00:05:38,790 --> 00:05:47,610
<font color="#E5E5E5">India and Brazil combined or eight</font>

138
00:05:41,730 --> 00:05:49,800
apples<font color="#E5E5E5"> if your passenger</font><font color="#CCCCCC"> flights per</font>

139
00:05:47,610 --> 00:05:51,660
minute transactions per second that last

140
00:05:49,800 --> 00:05:53,070
one was<font color="#E5E5E5"> kind of interesting</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> terms of</font>

141
00:05:51,660 --> 00:05:54,540
the number of<font color="#E5E5E5"> global transactions per</font>

142
00:05:53,070 --> 00:05:59,280
second it's<font color="#E5E5E5"> about eight and a half times</font>

143
00:05:54,540 --> 00:06:01,080
what Google does<font color="#E5E5E5"> I like to use analogies</font>

144
00:05:59,280 --> 00:06:03,330
wherever I can<font color="#E5E5E5"> because this kind</font><font color="#CCCCCC"> of a it</font>

145
00:06:01,080 --> 00:06:06,359
<font color="#E5E5E5">is not not a pun intended a black box</font>

146
00:06:03,330 --> 00:06:08,219
for<font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of people</font><font color="#CCCCCC"> I know that the rage</font>

147
00:06:06,360 --> 00:06:12,060
today<font color="#E5E5E5"> is you know</font><font color="#CCCCCC"> full-stack to</font>

148
00:06:08,220 --> 00:06:16,290
<font color="#CCCCCC">developers DevOps</font><font color="#E5E5E5"> which in my mind</font><font color="#CCCCCC"> looks</font>

149
00:06:12,060 --> 00:06:18,090
a little bit like<font color="#E5E5E5"> this</font><font color="#CCCCCC"> if you</font><font color="#E5E5E5"> think</font>

150
00:06:16,290 --> 00:06:20,100
<font color="#CCCCCC">about</font><font color="#E5E5E5"> that from a</font><font color="#CCCCCC"> mainframe from a</font>

151
00:06:18,090 --> 00:06:22,440
mainframe perspective though is probably

152
00:06:20,100 --> 00:06:24,090
a little<font color="#E5E5E5"> bit more</font><font color="#CCCCCC"> like this if you go</font>

153
00:06:22,440 --> 00:06:26,040
into<font color="#CCCCCC"> a mainframe shop today what you'll</font>

154
00:06:24,090 --> 00:06:28,349
<font color="#E5E5E5">probably find are a bunch of people who</font>

155
00:06:26,040 --> 00:06:31,169
are<font color="#CCCCCC"> very siloed</font><font color="#E5E5E5"> and very much have</font>

156
00:06:28,350 --> 00:06:34,320
expertise in<font color="#E5E5E5"> one particular area</font><font color="#CCCCCC"> of it</font>

157
00:06:31,169 --> 00:06:38,099
<font color="#E5E5E5">maybe networking maybe security maybe</font>

158
00:06:34,320 --> 00:06:39,900
storage all working in<font color="#E5E5E5"> concert</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> make</font>

159
00:06:38,100 --> 00:06:45,690
this<font color="#E5E5E5"> thing to sing make it perform as</font>

160
00:06:39,900 --> 00:06:46,799
much as as much<font color="#E5E5E5"> as it possibly can so</font>

161
00:06:45,690 --> 00:06:50,250
I'm<font color="#E5E5E5"> going to dive</font><font color="#CCCCCC"> a little bit into the</font>

162
00:06:46,800 --> 00:06:53,700
architecture<font color="#E5E5E5"> the actual Z architecture</font>

163
00:06:50,250 --> 00:06:55,919
the CPU and a little bit<font color="#E5E5E5"> into z/os with</font>

164
00:06:53,700 --> 00:06:57,390
the lens towards what we're talking

165
00:06:55,919 --> 00:07:01,049
about<font color="#E5E5E5"> today which is exploits and</font>

166
00:06:57,390 --> 00:07:03,150
vulnerabilities so the<font color="#E5E5E5"> CPU a lot of</font>

167
00:07:01,050 --> 00:07:05,580
people<font color="#E5E5E5"> don't know the CPU is a different</font>

168
00:07:03,150 --> 00:07:07,739
CPU<font color="#E5E5E5"> it's not x86 it's not</font><font color="#CCCCCC"> arm</font>

169
00:07:05,580 --> 00:07:10,109
it's<font color="#CCCCCC"> Z architecture</font><font color="#E5E5E5"> right it's it's own</font>

170
00:07:07,740 --> 00:07:11,760
CPU now it has a lot in<font color="#E5E5E5"> common with</font>

171
00:07:10,110 --> 00:07:13,770
those other CPUs

172
00:07:11,760 --> 00:07:15,180
it's a von Neumann<font color="#CCCCCC"> architecture right so</font>

173
00:07:13,770 --> 00:07:17,039
you've got<font color="#CCCCCC"> data and instructions</font>

174
00:07:15,180 --> 00:07:19,800
occupying the same memory space you can

175
00:07:17,040 --> 00:07:22,200
execute<font color="#E5E5E5"> data as instructions like</font><font color="#CCCCCC"> shell</font>

176
00:07:19,800 --> 00:07:23,430
<font color="#CCCCCC">code but it is a different animal</font>

177
00:07:22,200 --> 00:07:25,680
<font color="#E5E5E5">altogether</font>

178
00:07:23,430 --> 00:07:28,590
so from an exploit point of view there's

179
00:07:25,680 --> 00:07:29,669
a few things we<font color="#CCCCCC"> need to understand we're</font>

180
00:07:28,590 --> 00:07:30,780
always looking at escalating our

181
00:07:29,669 --> 00:07:33,419
privileges<font color="#E5E5E5"> so we're going to start at</font>

182
00:07:30,780 --> 00:07:35,520
the<font color="#E5E5E5"> lowest level</font><font color="#CCCCCC"> and work up the CPU</font><font color="#E5E5E5"> can</font>

183
00:07:33,419 --> 00:07:37,049
operate<font color="#E5E5E5"> for any given address for any</font>

184
00:07:35,520 --> 00:07:39,169
given process in a couple<font color="#E5E5E5"> of</font><font color="#CCCCCC"> states</font>

185
00:07:37,050 --> 00:07:40,840
problem<font color="#CCCCCC"> State and supervisor</font><font color="#E5E5E5"> state</font>

186
00:07:39,169 --> 00:07:44,049
problem<font color="#CCCCCC"> state</font>

187
00:07:40,840 --> 00:07:45,820
is kind<font color="#E5E5E5"> of normal right so problem state</font>

188
00:07:44,050 --> 00:07:47,860
is normal<font color="#CCCCCC"> makes sense</font><font color="#E5E5E5"> right</font>

189
00:07:45,820 --> 00:07:49,330
supervisor state is the<font color="#E5E5E5"> one that allows</font>

190
00:07:47,860 --> 00:07:51,280
you<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> pretty much anything you want</font>

191
00:07:49,330 --> 00:07:53,320
<font color="#CCCCCC">really the difference between</font><font color="#E5E5E5"> these two</font>

192
00:07:51,280 --> 00:07:55,090
states is how many of the instructions

193
00:07:53,320 --> 00:07:56,919
<font color="#CCCCCC">that</font><font color="#E5E5E5"> the CPU knows about can</font><font color="#CCCCCC"> you execute</font>

194
00:07:55,090 --> 00:07:59,049
<font color="#CCCCCC">if you're in supervisor state you can</font>

195
00:07:56,919 --> 00:08:01,330
<font color="#CCCCCC">execute the full gamut of instructions</font>

196
00:07:59,050 --> 00:08:04,810
<font color="#E5E5E5">if you are in problem state you can only</font>

197
00:08:01,330 --> 00:08:06,789
execute some of that some subset of<font color="#E5E5E5"> that</font>

198
00:08:04,810 --> 00:08:09,550
<font color="#E5E5E5">especially not the ones that allow you</font>

199
00:08:06,790 --> 00:08:13,419
<font color="#E5E5E5">to do privileged executions for instance</font>

200
00:08:09,550 --> 00:08:14,979
there's one there's one instruction<font color="#E5E5E5"> that</font>

201
00:08:13,419 --> 00:08:16,990
allows you to<font color="#E5E5E5"> move from problem state to</font>

202
00:08:14,979 --> 00:08:18,609
supervisor state so the goal of<font color="#CCCCCC"> most</font>

203
00:08:16,990 --> 00:08:20,350
<font color="#E5E5E5">exploits or most things we're trying</font><font color="#CCCCCC"> to</font>

204
00:08:18,610 --> 00:08:24,970
<font color="#E5E5E5">do is to be able to get to execute</font><font color="#CCCCCC"> that</font>

205
00:08:20,350 --> 00:08:26,919
instruction<font color="#E5E5E5"> simple enough couple of</font>

206
00:08:24,970 --> 00:08:31,389
other terms you need<font color="#CCCCCC"> to understand as we</font>

207
00:08:26,919 --> 00:08:36,069
go<font color="#E5E5E5"> on</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> PSW stands for program status</font>

208
00:08:31,389 --> 00:08:38,799
<font color="#E5E5E5">word so for x86 people out there this is</font>

209
00:08:36,070 --> 00:08:40,870
kind of like<font color="#CCCCCC"> a combination</font><font color="#E5E5E5"> of AI PR IP</font>

210
00:08:38,799 --> 00:08:43,299
it's your instruction pointer<font color="#CCCCCC"> tells you</font>

211
00:08:40,870 --> 00:08:45,010
what instruction<font color="#E5E5E5"> in memory what</font><font color="#CCCCCC"> a memory</font>

212
00:08:43,299 --> 00:08:46,599
<font color="#E5E5E5">address is gonna be executed next and a</font>

213
00:08:45,010 --> 00:08:48,910
bunch of flags<font color="#CCCCCC"> all kind of smashed</font>

214
00:08:46,600 --> 00:08:51,279
<font color="#CCCCCC">together one of those</font><font color="#E5E5E5"> flags is are you</font>

215
00:08:48,910 --> 00:08:53,770
in is this process<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I'm talking</font>

216
00:08:51,279 --> 00:08:57,820
about<font color="#E5E5E5"> in</font><font color="#CCCCCC"> problem state or in supervisor</font>

217
00:08:53,770 --> 00:08:59,439
state the<font color="#E5E5E5"> processor the current model</font>

218
00:08:57,820 --> 00:09:02,830
processor can run in three different

219
00:08:59,440 --> 00:09:04,180
<font color="#CCCCCC">modes it can run 24 bit programs run 31</font>

220
00:09:02,830 --> 00:09:08,170
bit binaries and<font color="#E5E5E5"> it can run 64-bit</font>

221
00:09:04,180 --> 00:09:09,969
<font color="#E5E5E5">binaries if you take only</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> couple</font>

222
00:09:08,170 --> 00:09:11,079
things away from<font color="#CCCCCC"> this</font><font color="#E5E5E5"> talk one thing to</font>

223
00:09:09,970 --> 00:09:13,360
help you<font color="#E5E5E5"> get into the right mindset</font>

224
00:09:11,080 --> 00:09:16,420
<font color="#E5E5E5">about mainframe is it's backwards</font>

225
00:09:13,360 --> 00:09:18,430
<font color="#E5E5E5">compatible to a fault</font><font color="#CCCCCC"> the name</font><font color="#E5E5E5"> of the</font>

226
00:09:16,420 --> 00:09:20,529
<font color="#E5E5E5">game</font><font color="#CCCCCC"> and one</font><font color="#E5E5E5"> of the reasons why</font>

227
00:09:18,430 --> 00:09:22,239
mainframe kind of slips into<font color="#CCCCCC"> lore as</font>

228
00:09:20,529 --> 00:09:24,130
this old technology<font color="#E5E5E5"> this</font><font color="#CCCCCC"> antiquated</font>

229
00:09:22,240 --> 00:09:26,470
technology<font color="#E5E5E5"> is because code that was</font>

230
00:09:24,130 --> 00:09:28,750
<font color="#CCCCCC">written in the 70s can still</font><font color="#E5E5E5"> run on the</font>

231
00:09:26,470 --> 00:09:31,029
<font color="#CCCCCC">very</font><font color="#E5E5E5"> current model architecture with</font>

232
00:09:28,750 --> 00:09:32,830
almost<font color="#E5E5E5"> and then in some</font><font color="#CCCCCC"> cases</font><font color="#E5E5E5"> no</font>

233
00:09:31,029 --> 00:09:34,150
modification whatsoever<font color="#E5E5E5"> there are</font>

234
00:09:32,830 --> 00:09:36,310
absolutely<font color="#E5E5E5"> organizations out there</font>

235
00:09:34,150 --> 00:09:37,270
<font color="#E5E5E5">running binaries</font><font color="#CCCCCC"> that they wrote</font><font color="#E5E5E5"> 30</font>

236
00:09:36,310 --> 00:09:39,939
years ago<font color="#E5E5E5"> that they don't have the</font>

237
00:09:37,270 --> 00:09:44,949
source<font color="#CCCCCC"> code to</font><font color="#E5E5E5"> and they just work it</font>

238
00:09:39,940 --> 00:09:46,330
<font color="#CCCCCC">just works the other</font><font color="#E5E5E5"> thing in our stance</font>

239
00:09:44,950 --> 00:09:49,180
we've got problem state and supervisor

240
00:09:46,330 --> 00:09:52,750
state in terms<font color="#E5E5E5"> of the CPU mode is this</font>

241
00:09:49,180 --> 00:09:53,859
idea<font color="#E5E5E5"> of access storage keys so when I</font>

242
00:09:52,750 --> 00:09:54,490
talk about<font color="#E5E5E5"> storage I'm talking about</font>

243
00:09:53,860 --> 00:09:57,910
<font color="#E5E5E5">memory and</font>

244
00:09:54,490 --> 00:09:59,680
talking about<font color="#CCCCCC"> RAM</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> part</font><font color="#E5E5E5"> of getting</font>

245
00:09:57,910 --> 00:10:02,439
<font color="#E5E5E5">into the mainframe vibe is understanding</font>

246
00:09:59,680 --> 00:10:04,060
the parlance<font color="#CCCCCC"> that they use for things</font>

247
00:10:02,440 --> 00:10:06,370
and<font color="#E5E5E5"> I hate to tell you but they were</font>

248
00:10:04,060 --> 00:10:09,310
here first<font color="#E5E5E5"> so it's not</font><font color="#CCCCCC"> like they're</font>

249
00:10:06,370 --> 00:10:10,810
gonna change their way<font color="#E5E5E5"> anytime soon we</font>

250
00:10:09,310 --> 00:10:12,520
<font color="#CCCCCC">talked about</font><font color="#E5E5E5"> access storage keys what</font>

251
00:10:10,810 --> 00:10:14,770
I'm talking about is for any given

252
00:10:12,520 --> 00:10:19,209
<font color="#CCCCCC">address space for any given process</font>

253
00:10:14,770 --> 00:10:24,910
<font color="#E5E5E5">there is a key a byte between 0 and 15</font>

254
00:10:19,209 --> 00:10:26,709
<font color="#E5E5E5">that says simply put what memory pages</font>

255
00:10:24,910 --> 00:10:28,779
does it have access to each page<font color="#E5E5E5"> of</font>

256
00:10:26,709 --> 00:10:31,779
memory<font color="#CCCCCC"> also has a key basically if those</font>

257
00:10:28,779 --> 00:10:33,490
pages match and<font color="#E5E5E5"> I'm oversimplifying this</font>

258
00:10:31,779 --> 00:10:35,439
you might<font color="#E5E5E5"> be able to read and write that</font>

259
00:10:33,490 --> 00:10:36,520
memory<font color="#E5E5E5"> if they don't match</font><font color="#CCCCCC"> you're not</font>

260
00:10:35,440 --> 00:10:39,700
going to be<font color="#CCCCCC"> able to read</font><font color="#E5E5E5"> and write that</font>

261
00:10:36,520 --> 00:10:41,699
memory<font color="#E5E5E5"> the exception then is key 0 which</font>

262
00:10:39,700 --> 00:10:43,810
allows you<font color="#E5E5E5"> to read and write any memory</font>

263
00:10:41,700 --> 00:10:45,970
so the goal<font color="#E5E5E5"> from a privileged escalation</font>

264
00:10:43,810 --> 00:10:48,520
point of view is to<font color="#CCCCCC"> get the supervisor</font>

265
00:10:45,970 --> 00:10:52,380
<font color="#E5E5E5">state key 0</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> can execute all the things</font>

266
00:10:48,520 --> 00:10:52,380
and I can read and<font color="#E5E5E5"> write all the memory</font>

267
00:10:54,720 --> 00:10:59,589
<font color="#CCCCCC">lots</font><font color="#E5E5E5"> just to recap so that's that that</font>

268
00:10:58,270 --> 00:11:01,060
is<font color="#CCCCCC"> just the architecture that has</font>

269
00:10:59,589 --> 00:11:02,500
<font color="#E5E5E5">nothing whatsoever to do with the</font>

270
00:11:01,060 --> 00:11:07,089
<font color="#E5E5E5">operating</font><font color="#CCCCCC"> system at this point</font>

271
00:11:02,500 --> 00:11:09,880
so<font color="#E5E5E5"> z/os has this idea of operating</font>

272
00:11:07,089 --> 00:11:12,450
system integrity<font color="#E5E5E5"> whereby it decides</font>

273
00:11:09,880 --> 00:11:15,220
through a series of<font color="#E5E5E5"> fairly simple rules</font>

274
00:11:12,450 --> 00:11:17,230
<font color="#E5E5E5">who can who</font><font color="#CCCCCC"> can execute in an authorized</font>

275
00:11:15,220 --> 00:11:20,110
<font color="#E5E5E5">state when I say authorized state I'm</font>

276
00:11:17,230 --> 00:11:22,390
talking<font color="#CCCCCC"> about who has the ability to you</font>

277
00:11:20,110 --> 00:11:25,839
know<font color="#E5E5E5"> change that CPU into supervisor</font>

278
00:11:22,390 --> 00:11:27,100
mode or become key<font color="#E5E5E5"> 0 there's a few</font>

279
00:11:25,839 --> 00:11:28,209
different<font color="#E5E5E5"> ways to do that there are more</font>

280
00:11:27,100 --> 00:11:30,010
<font color="#E5E5E5">than I list here</font><font color="#CCCCCC"> but these</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> the</font>

281
00:11:28,209 --> 00:11:32,529
<font color="#E5E5E5">common ones</font><font color="#CCCCCC"> the first one which is</font>

282
00:11:30,010 --> 00:11:35,350
should<font color="#CCCCCC"> be obvious is is in the early IPL</font>

283
00:11:32,529 --> 00:11:37,810
process<font color="#E5E5E5"> or the boot process IPL initial</font>

284
00:11:35,350 --> 00:11:39,940
program load booting you boot<font color="#E5E5E5"> the</font>

285
00:11:37,810 --> 00:11:41,529
mainframe<font color="#E5E5E5"> that</font><font color="#CCCCCC"> all has to be run an</font>

286
00:11:39,940 --> 00:11:43,209
authorized code because it<font color="#E5E5E5"> is the code</font>

287
00:11:41,529 --> 00:11:44,950
responsible for setting<font color="#E5E5E5"> up the operating</font>

288
00:11:43,209 --> 00:11:46,959
<font color="#E5E5E5">system and making sure it can do what it</font>

289
00:11:44,950 --> 00:11:48,399
needs to do at some<font color="#CCCCCC"> point in time</font><font color="#E5E5E5"> when</font>

290
00:11:46,959 --> 00:11:51,369
the operating system<font color="#E5E5E5"> is sufficiently</font>

291
00:11:48,399 --> 00:11:54,279
loaded it gets locked<font color="#E5E5E5"> down and</font><font color="#CCCCCC"> when user</font>

292
00:11:51,370 --> 00:11:55,720
<font color="#CCCCCC">land programs start running</font><font color="#E5E5E5"> then they</font>

293
00:11:54,279 --> 00:11:57,329
have a<font color="#E5E5E5"> couple of other</font><font color="#CCCCCC"> options</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> they</font>

294
00:11:55,720 --> 00:12:00,370
need to<font color="#E5E5E5"> perform authorized functions</font>

295
00:11:57,329 --> 00:12:03,459
<font color="#E5E5E5">they have supervisor calls and program</font>

296
00:12:00,370 --> 00:12:04,990
calls<font color="#E5E5E5"> so these can be analogous to</font><font color="#CCCCCC"> what</font>

297
00:12:03,459 --> 00:12:07,138
you<font color="#E5E5E5"> think about in Linux is maybe a sis</font>

298
00:12:04,990 --> 00:12:08,939
call so if you're writing a

299
00:12:07,139 --> 00:12:11,579
program you have<font color="#CCCCCC"> to do an open</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> a</font>

300
00:12:08,939 --> 00:12:12,839
closed socket connect those kinds of

301
00:12:11,579 --> 00:12:14,459
things those<font color="#CCCCCC"> are things that are</font>

302
00:12:12,839 --> 00:12:15,839
<font color="#E5E5E5">necessarily part of the</font><font color="#CCCCCC"> kernel because</font>

303
00:12:14,459 --> 00:12:18,660
<font color="#E5E5E5">they have to do very privileged</font>

304
00:12:15,839 --> 00:12:20,100
<font color="#E5E5E5">operations right</font><font color="#CCCCCC"> IO to a device reading</font>

305
00:12:18,660 --> 00:12:21,509
<font color="#CCCCCC">writing from a hard disk those are</font>

306
00:12:20,100 --> 00:12:23,669
privileged operations<font color="#E5E5E5"> you don't want</font>

307
00:12:21,509 --> 00:12:25,559
average users to be<font color="#E5E5E5"> able to do that's</font>

308
00:12:23,669 --> 00:12:27,239
<font color="#E5E5E5">why you have</font><font color="#CCCCCC"> assist call you think we're</font>

309
00:12:25,559 --> 00:12:29,519
gonna talk a lot about SVC so you can

310
00:12:27,239 --> 00:12:32,299
think<font color="#CCCCCC"> about that</font><font color="#E5E5E5"> loosely as a as like</font>

311
00:12:29,519 --> 00:12:35,249
what it would<font color="#E5E5E5"> be</font><font color="#CCCCCC"> assist</font><font color="#E5E5E5"> call in Linux</font>

312
00:12:32,299 --> 00:12:38,459
the other construct<font color="#E5E5E5"> which doesn't have a</font>

313
00:12:35,249 --> 00:12:41,160
really good analogy in Linux or Windows

314
00:12:38,459 --> 00:12:45,868
Land<font color="#E5E5E5"> is this idea of an</font><font color="#CCCCCC"> AP F authorized</font>

315
00:12:41,160 --> 00:12:48,179
<font color="#CCCCCC">library list so in a nutshell</font><font color="#E5E5E5"> what this</font>

316
00:12:45,869 --> 00:12:49,829
is is a<font color="#E5E5E5"> list of libraries</font><font color="#CCCCCC"> on the</font>

317
00:12:48,179 --> 00:12:51,209
mainframe<font color="#E5E5E5"> and all the mainframes in here</font>

318
00:12:49,829 --> 00:12:52,729
cringe<font color="#CCCCCC"> when</font><font color="#E5E5E5"> I say this but</font><font color="#CCCCCC"> a library you</font>

319
00:12:51,209 --> 00:12:57,449
<font color="#E5E5E5">could kind of</font><font color="#CCCCCC"> think about</font><font color="#E5E5E5"> like a folder</font>

320
00:12:52,730 --> 00:12:59,429
so it's a list of folders<font color="#CCCCCC"> that have a</font>

321
00:12:57,449 --> 00:13:01,469
property such that if you<font color="#CCCCCC"> can have if</font>

322
00:12:59,429 --> 00:13:03,059
<font color="#E5E5E5">you are a</font><font color="#CCCCCC"> binary</font><font color="#E5E5E5"> if you can put a</font><font color="#CCCCCC"> binary</font>

323
00:13:01,470 --> 00:13:06,259
in this folder any binaries<font color="#CCCCCC"> in</font><font color="#E5E5E5"> this</font>

324
00:13:03,059 --> 00:13:09,358
folder<font color="#E5E5E5"> can run authorized by</font><font color="#CCCCCC"> definition</font>

325
00:13:06,259 --> 00:13:10,889
so what<font color="#CCCCCC"> that means is there's a</font>

326
00:13:09,359 --> 00:13:13,199
concatenation or a list<font color="#E5E5E5"> of these</font>

327
00:13:10,889 --> 00:13:15,149
<font color="#CCCCCC">libraries that's</font><font color="#E5E5E5"> set up on IPL on boot</font>

328
00:13:13,199 --> 00:13:17,639
<font color="#E5E5E5">if you can write to one</font><font color="#CCCCCC"> of these</font>

329
00:13:15,149 --> 00:13:20,610
<font color="#CCCCCC">libraries</font><font color="#E5E5E5"> write to one of these</font>

330
00:13:17,639 --> 00:13:22,290
<font color="#CCCCCC">libraries or if you can add a</font><font color="#E5E5E5"> library</font>

331
00:13:20,610 --> 00:13:24,749
that<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> write to to this list</font>

332
00:13:22,290 --> 00:13:27,118
<font color="#E5E5E5">dynamically which is also possible</font><font color="#CCCCCC"> that</font>

333
00:13:24,749 --> 00:13:30,419
is game over<font color="#E5E5E5"> because now</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> run a</font>

334
00:13:27,119 --> 00:13:32,279
binary<font color="#E5E5E5"> in supervisor</font><font color="#CCCCCC"> state p0 by</font>

335
00:13:30,419 --> 00:13:34,949
<font color="#E5E5E5">definition this</font><font color="#CCCCCC"> is how the system</font>

336
00:13:32,279 --> 00:13:37,769
maintains<font color="#CCCCCC"> can integrity</font><font color="#E5E5E5"> this system</font>

337
00:13:34,949 --> 00:13:39,959
basically<font color="#E5E5E5"> z/os basically says only</font>

338
00:13:37,769 --> 00:13:43,679
<font color="#E5E5E5">authorized programs can call other</font>

339
00:13:39,959 --> 00:13:47,368
authorized programs<font color="#E5E5E5"> unless you meet one</font>

340
00:13:43,679 --> 00:13:48,929
of<font color="#E5E5E5"> these criteria I'm going to blow</font>

341
00:13:47,369 --> 00:13:51,569
really<font color="#E5E5E5"> quickly through the tools and</font>

342
00:13:48,929 --> 00:13:54,179
this<font color="#E5E5E5"> is basically</font><font color="#CCCCCC"> just to kind of show</font>

343
00:13:51,569 --> 00:13:55,498
<font color="#CCCCCC">you</font><font color="#E5E5E5"> what's out there and and some of it</font>

344
00:13:54,179 --> 00:13:57,749
I<font color="#CCCCCC"> think you'll find hilarious if</font><font color="#E5E5E5"> you're</font>

345
00:13:55,499 --> 00:14:00,539
if you work in reverse<font color="#CCCCCC"> engineering or</font>

346
00:13:57,749 --> 00:14:02,610
you spend<font color="#CCCCCC"> any</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> and like Ida</font><font color="#E5E5E5"> it's</font>

347
00:14:00,539 --> 00:14:04,259
worth mentioning<font color="#E5E5E5"> that the debuggers and</font>

348
00:14:02,610 --> 00:14:06,600
disassemblers for the most part on the

349
00:14:04,259 --> 00:14:08,129
mainframe<font color="#E5E5E5"> were designed</font><font color="#CCCCCC"> for people</font><font color="#E5E5E5"> who</font>

350
00:14:06,600 --> 00:14:10,199
have the code<font color="#CCCCCC"> to the program they're</font>

351
00:14:08,129 --> 00:14:13,769
debugging<font color="#CCCCCC"> or disassembling</font><font color="#E5E5E5"> right not</font>

352
00:14:10,199 --> 00:14:15,029
like reverse engineering or looking<font color="#E5E5E5"> for</font>

353
00:14:13,769 --> 00:14:17,220
vulnerabilities<font color="#CCCCCC"> and that kind of stuff</font>

354
00:14:15,029 --> 00:14:18,899
they they<font color="#E5E5E5"> don't do a very</font><font color="#CCCCCC"> good job of</font>

355
00:14:17,220 --> 00:14:20,759
this but some<font color="#E5E5E5"> of these are really quite</font>

356
00:14:18,899 --> 00:14:21,089
clever so<font color="#E5E5E5"> I thought I would show them to</font>

357
00:14:20,759 --> 00:14:24,629
you

358
00:14:21,089 --> 00:14:27,089
first<font color="#E5E5E5"> ones called DB</font><font color="#CCCCCC"> X</font><font color="#E5E5E5"> DB</font><font color="#CCCCCC"> X is a</font>

359
00:14:24,629 --> 00:14:31,110
debugger actually I think<font color="#CCCCCC"> Oracle has</font><font color="#E5E5E5"> DB</font>

360
00:14:27,089 --> 00:14:32,759
<font color="#E5E5E5">x as well</font><font color="#CCCCCC"> it looks a little bit like gdb</font>

361
00:14:31,110 --> 00:14:35,850
it's kind<font color="#E5E5E5"> of gdb</font><font color="#CCCCCC"> esque it's nowhere near</font>

362
00:14:32,759 --> 00:14:37,379
as functional as gdb but the good thing

363
00:14:35,850 --> 00:14:39,449
<font color="#CCCCCC">about DB x if you're</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> getting</font>

364
00:14:37,379 --> 00:14:41,610
<font color="#E5E5E5">started in this the mainframe has</font><font color="#CCCCCC"> a</font>

365
00:14:39,449 --> 00:14:42,990
unix-like interface<font color="#E5E5E5"> it's not a separate</font>

366
00:14:41,610 --> 00:14:44,999
<font color="#E5E5E5">operating system it's just a separate</font>

367
00:14:42,990 --> 00:14:49,709
interface to the to the operating<font color="#E5E5E5"> system</font>

368
00:14:44,999 --> 00:14:52,559
<font color="#E5E5E5">it really looks like AI X DB X runs in</font>

369
00:14:49,709 --> 00:14:54,930
in the UNIX based operating system so if

370
00:14:52,559 --> 00:14:57,240
you're new<font color="#CCCCCC"> to it like I was when I</font>

371
00:14:54,930 --> 00:14:58,920
started<font color="#CCCCCC"> this</font><font color="#E5E5E5"> it's a good place to learn</font>

372
00:14:57,240 --> 00:15:02,899
<font color="#CCCCCC">because it'll be</font><font color="#E5E5E5"> the most familiar to</font>

373
00:14:58,920 --> 00:15:05,579
<font color="#E5E5E5">you</font><font color="#CCCCCC"> debug</font><font color="#E5E5E5"> tool this one's</font><font color="#CCCCCC"> just hilarious</font>

374
00:15:02,899 --> 00:15:07,740
<font color="#CCCCCC">it's that I'm game ajan staring at that</font>

375
00:15:05,579 --> 00:15:08,969
all day<font color="#CCCCCC"> long but there's a lot</font><font color="#E5E5E5"> of</font>

376
00:15:07,740 --> 00:15:10,470
<font color="#CCCCCC">limitations to it</font><font color="#E5E5E5"> you can't do</font>

377
00:15:08,970 --> 00:15:13,019
authorized code you can't do<font color="#E5E5E5"> cross</font>

378
00:15:10,470 --> 00:15:18,329
memory stuff it's super kludgy but man

379
00:15:13,019 --> 00:15:19,800
those colors are cool<font color="#CCCCCC"> the the debugger</font>

380
00:15:18,329 --> 00:15:21,449
that<font color="#E5E5E5"> comes with the</font><font color="#CCCCCC"> high-level assembler</font>

381
00:15:19,800 --> 00:15:22,949
is<font color="#E5E5E5"> pretty good and actually</font><font color="#CCCCCC"> if you</font>

382
00:15:21,449 --> 00:15:25,139
<font color="#E5E5E5">modify it a</font><font color="#CCCCCC"> little bit you</font><font color="#E5E5E5"> can do</font>

383
00:15:22,949 --> 00:15:26,519
authorized code debugging<font color="#E5E5E5"> and</font>

384
00:15:25,139 --> 00:15:28,709
disassembly I lived in this one for<font color="#CCCCCC"> a</font>

385
00:15:26,519 --> 00:15:30,829
<font color="#E5E5E5">long time before I got the one</font><font color="#CCCCCC"> that I</font>

386
00:15:28,709 --> 00:15:33,599
use now<font color="#CCCCCC"> which was a third party product</font>

387
00:15:30,829 --> 00:15:35,670
<font color="#E5E5E5">all of the previous ones</font><font color="#CCCCCC"> are all IBM</font>

388
00:15:33,600 --> 00:15:36,899
products some of<font color="#E5E5E5"> them come with come</font>

389
00:15:35,670 --> 00:15:40,170
<font color="#E5E5E5">with the operating system some of them</font>

390
00:15:36,899 --> 00:15:42,540
are add-ons<font color="#CCCCCC"> TSO ii test is kind of an</font>

391
00:15:40,170 --> 00:15:46,349
<font color="#E5E5E5">interesting one it's the original it's</font>

392
00:15:42,540 --> 00:15:47,879
all command driven<font color="#CCCCCC"> it's the one where if</font>

393
00:15:46,350 --> 00:15:50,069
you're stuck<font color="#E5E5E5"> on a system and you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> to</font>

394
00:15:47,879 --> 00:15:51,329
live off<font color="#CCCCCC"> the land if you know how</font><font color="#E5E5E5"> to use</font>

395
00:15:50,069 --> 00:15:53,670
it you might be<font color="#CCCCCC"> able to</font><font color="#E5E5E5"> get what you</font>

396
00:15:51,329 --> 00:15:55,498
<font color="#CCCCCC">need done but basically you type the</font>

397
00:15:53,670 --> 00:15:58,378
command TSO he<font color="#E5E5E5"> tests in your binary name</font>

398
00:15:55,499 --> 00:16:00,269
and then you just get<font color="#E5E5E5"> a prompt so it's a</font>

399
00:15:58,379 --> 00:16:03,809
little<font color="#E5E5E5"> bit like running gdb without any</font>

400
00:16:00,269 --> 00:16:06,839
you know<font color="#CCCCCC"> any chewy interface or</font><font color="#E5E5E5"> Python</font>

401
00:16:03,809 --> 00:16:07,980
interface<font color="#E5E5E5"> or anything like that</font><font color="#CCCCCC"> or as</font>

402
00:16:06,839 --> 00:16:10,949
somebody likened<font color="#E5E5E5"> it once</font>

403
00:16:07,980 --> 00:16:11,850
<font color="#E5E5E5">if you ever ended up in Linux using the</font>

404
00:16:10,949 --> 00:16:14,309
editor<font color="#CCCCCC"> edie</font>

405
00:16:11,850 --> 00:16:16,769
<font color="#CCCCCC">and you're like what the</font><font color="#E5E5E5"> hell is</font><font color="#CCCCCC"> this I</font>

406
00:16:14,309 --> 00:16:18,569
have like one line of<font color="#CCCCCC"> text that</font><font color="#E5E5E5"> I can</font>

407
00:16:16,769 --> 00:16:20,790
enter<font color="#E5E5E5"> and I can't see it when I'm done</font>

408
00:16:18,569 --> 00:16:23,519
and how do<font color="#E5E5E5"> I exit this thing it's kind</font>

409
00:16:20,790 --> 00:16:26,599
of like<font color="#E5E5E5"> that z/xdc is the real contender</font>

410
00:16:23,519 --> 00:16:29,759
it's made by a<font color="#E5E5E5"> third party</font><font color="#CCCCCC"> Cole soft and</font>

411
00:16:26,600 --> 00:16:31,379
it<font color="#E5E5E5"> is it is very good it has all the</font>

412
00:16:29,759 --> 00:16:33,900
features you<font color="#CCCCCC"> would want on this platform</font>

413
00:16:31,379 --> 00:16:35,490
<font color="#E5E5E5">it's still text based on the interface</font>

414
00:16:33,900 --> 00:16:38,340
<font color="#E5E5E5">but it's exceptionally good as one I'll</font>

415
00:16:35,490 --> 00:16:40,890
use<font color="#E5E5E5"> for my demonstration</font><font color="#CCCCCC"> some</font>

416
00:16:38,340 --> 00:16:42,600
miscellaneous<font color="#CCCCCC"> tools these</font><font color="#E5E5E5"> are things we</font>

417
00:16:40,890 --> 00:16:45,330
find on pen tests on systems<font color="#CCCCCC"> that are</font>

418
00:16:42,600 --> 00:16:47,090
part of the operating<font color="#CCCCCC"> system that can</font><font color="#E5E5E5"> be</font>

419
00:16:45,330 --> 00:16:50,250
useful in a pinch<font color="#E5E5E5"> some of them are</font>

420
00:16:47,090 --> 00:16:52,910
really<font color="#CCCCCC"> useful</font><font color="#E5E5E5"> I start</font><font color="#CCCCCC"> ddn is kind of</font><font color="#E5E5E5"> a</font>

421
00:16:50,250 --> 00:16:55,380
handy Swiss Army knife lets you look at

422
00:16:52,910 --> 00:16:57,600
<font color="#CCCCCC">lets you look</font><font color="#E5E5E5"> at the concatenations of</font>

423
00:16:55,380 --> 00:16:58,890
folders you<font color="#CCCCCC"> can also browse memory so</font>

424
00:16:57,600 --> 00:17:00,060
you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> actually browse your address</font>

425
00:16:58,890 --> 00:17:02,900
space with<font color="#CCCCCC"> this which will show later</font>

426
00:17:00,060 --> 00:17:06,510
which<font color="#CCCCCC"> is pretty handy disassemble is a</font>

427
00:17:02,900 --> 00:17:08,730
disassembler<font color="#CCCCCC"> i'm not shockingly</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> amb</font>

428
00:17:06,510 --> 00:17:11,010
list is kind of like<font color="#E5E5E5"> a knob</font><font color="#CCCCCC"> them objdump</font>

429
00:17:08,730 --> 00:17:12,690
<font color="#CCCCCC">that you might use on</font><font color="#E5E5E5"> linux</font><font color="#CCCCCC"> to basically</font>

430
00:17:11,010 --> 00:17:14,730
show you<font color="#E5E5E5"> entry points and external</font>

431
00:17:12,690 --> 00:17:18,120
symbols<font color="#E5E5E5"> and that sort of stuff from</font><font color="#CCCCCC"> a</font>

432
00:17:14,730 --> 00:17:19,740
<font color="#CCCCCC">binary so we can't talk about exploiting</font>

433
00:17:18,119 --> 00:17:21,689
<font color="#CCCCCC">in binaries and finding vulnerabilities</font>

434
00:17:19,740 --> 00:17:23,010
without talking<font color="#CCCCCC"> about the binary formats</font>

435
00:17:21,690 --> 00:17:24,030
<font color="#CCCCCC">just like if</font><font color="#E5E5E5"> we were doing this in</font><font color="#CCCCCC"> Linux</font>

436
00:17:23,010 --> 00:17:26,010
and<font color="#CCCCCC"> Windows we couldn't do it without</font>

437
00:17:24,030 --> 00:17:28,170
<font color="#CCCCCC">talking about l4 PE or something like</font>

438
00:17:26,010 --> 00:17:29,310
<font color="#E5E5E5">that so briefly we'll talk about the</font>

439
00:17:28,170 --> 00:17:31,410
binaries<font color="#E5E5E5"> and how it works</font>

440
00:17:29,310 --> 00:17:32,909
<font color="#E5E5E5">generally speaking the creation of</font>

441
00:17:31,410 --> 00:17:34,380
binaries works just like<font color="#E5E5E5"> it</font><font color="#CCCCCC"> does on any</font>

442
00:17:32,910 --> 00:17:36,150
<font color="#CCCCCC">other</font><font color="#E5E5E5"> platform you've got source code</font>

443
00:17:34,380 --> 00:17:37,770
you can<font color="#CCCCCC"> pilot</font><font color="#E5E5E5"> get an object you link it</font>

444
00:17:36,150 --> 00:17:41,940
<font color="#CCCCCC">and</font><font color="#E5E5E5"> then you have a binary there are a</font>

445
00:17:37,770 --> 00:17:43,080
few<font color="#E5E5E5"> exceptions</font><font color="#CCCCCC"> that and also</font><font color="#E5E5E5"> it's</font>

446
00:17:41,940 --> 00:17:45,750
important that<font color="#E5E5E5"> you get the nominal</font>

447
00:17:43,080 --> 00:17:47,010
<font color="#CCCCCC">Eicher so take</font><font color="#E5E5E5"> your source code we</font>

448
00:17:45,750 --> 00:17:49,050
<font color="#CCCCCC">compile it or assemble it and</font><font color="#E5E5E5"> that</font>

449
00:17:47,010 --> 00:17:52,020
generates program object so program

450
00:17:49,050 --> 00:17:54,570
objects are non executable compiled but

451
00:17:52,020 --> 00:17:56,580
don't have the<font color="#E5E5E5"> external references that</font>

452
00:17:54,570 --> 00:17:59,730
might come at the time of loading<font color="#E5E5E5"> them</font>

453
00:17:56,580 --> 00:18:00,929
<font color="#E5E5E5">there is an option to take those program</font>

454
00:17:59,730 --> 00:18:02,850
objects through what's<font color="#CCCCCC"> called a batch</font>

455
00:18:00,930 --> 00:18:04,350
loader and it links those program

456
00:18:02,850 --> 00:18:06,300
objects and writes<font color="#E5E5E5"> them directly</font><font color="#CCCCCC"> into</font>

457
00:18:04,350 --> 00:18:08,250
<font color="#CCCCCC">memory it doesn't actually</font><font color="#E5E5E5"> put them on</font>

458
00:18:06,300 --> 00:18:09,690
disk<font color="#E5E5E5"> so you can take</font><font color="#CCCCCC"> your objects</font><font color="#E5E5E5"> you</font>

459
00:18:08,250 --> 00:18:11,130
can link<font color="#CCCCCC"> edit them you can</font><font color="#E5E5E5"> put it</font>

460
00:18:09,690 --> 00:18:12,570
directly into memory<font color="#E5E5E5"> and execute it</font>

461
00:18:11,130 --> 00:18:16,190
<font color="#CCCCCC">right</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> of memory that binary never</font>

462
00:18:12,570 --> 00:18:19,320
exists on disk interesting possibilities

463
00:18:16,190 --> 00:18:21,120
but<font color="#E5E5E5"> the more traditional route you take</font>

464
00:18:19,320 --> 00:18:22,950
your program object you link<font color="#E5E5E5"> edit it you</font>

465
00:18:21,120 --> 00:18:24,419
bind it<font color="#E5E5E5"> you create what's</font><font color="#CCCCCC"> called a</font>

466
00:18:22,950 --> 00:18:26,970
<font color="#E5E5E5">program module and then you write that</font>

467
00:18:24,420 --> 00:18:29,180
to disk or<font color="#E5E5E5"> in mainframe parlance</font><font color="#CCCCCC"> des the</font>

468
00:18:26,970 --> 00:18:33,390
direct access<font color="#E5E5E5"> storage device or the disk</font>

469
00:18:29,180 --> 00:18:34,830
<font color="#CCCCCC">we'll</font><font color="#E5E5E5"> just call it a disk program</font>

470
00:18:33,390 --> 00:18:36,570
modules then have a couple of<font color="#E5E5E5"> different</font>

471
00:18:34,830 --> 00:18:39,000
types so these are the actual executable

472
00:18:36,570 --> 00:18:41,399
binaries<font color="#CCCCCC"> load modules and program</font>

473
00:18:39,000 --> 00:18:43,050
objects a load module is a legacy

474
00:18:41,400 --> 00:18:45,840
construct that's been<font color="#CCCCCC"> around for a long</font>

475
00:18:43,050 --> 00:18:47,760
time<font color="#CCCCCC"> program object is</font><font color="#E5E5E5"> relatively new</font>

476
00:18:45,840 --> 00:18:49,919
relatively<font color="#E5E5E5"> new</font>

477
00:18:47,760 --> 00:18:51,780
has a<font color="#E5E5E5"> lot more features</font><font color="#CCCCCC"> a bunch</font><font color="#E5E5E5"> of</font>

478
00:18:49,920 --> 00:18:53,220
different kind of formats and that sort

479
00:18:51,780 --> 00:18:55,590
of thing I'm not<font color="#E5E5E5"> gonna dive into these</font>

480
00:18:53,220 --> 00:18:57,720
at all<font color="#E5E5E5"> except to say that the</font>

481
00:18:55,590 --> 00:19:00,000
differentiation<font color="#CCCCCC"> between them has to do</font>

482
00:18:57,720 --> 00:19:03,780
<font color="#E5E5E5">with where they land so if you're</font>

483
00:19:00,000 --> 00:19:05,400
creating<font color="#CCCCCC"> a binary</font><font color="#E5E5E5"> whether it's a load</font>

484
00:19:03,780 --> 00:19:08,190
module or whether it's a program object

485
00:19:05,400 --> 00:19:09,870
depends upon where that final binary

486
00:19:08,190 --> 00:19:11,490
lives if it lives in UNIX system

487
00:19:09,870 --> 00:19:13,979
services on the mainframe<font color="#E5E5E5"> or if it lives</font>

488
00:19:11,490 --> 00:19:17,610
<font color="#E5E5E5">in a PDS</font><font color="#CCCCCC"> II</font><font color="#E5E5E5"> it's a program object if it</font>

489
00:19:13,980 --> 00:19:19,050
lives in a PDS it's a load module<font color="#CCCCCC"> when</font>

490
00:19:17,610 --> 00:19:21,719
you upload the slides I just<font color="#CCCCCC"> put these</font>

491
00:19:19,050 --> 00:19:23,760
in<font color="#CCCCCC"> here so</font><font color="#E5E5E5"> people can look at the the</font>

492
00:19:21,720 --> 00:19:25,020
<font color="#E5E5E5">manual that basically</font><font color="#CCCCCC"> lays all this out</font>

493
00:19:23,760 --> 00:19:26,580
<font color="#E5E5E5">so if you want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> learn more</font><font color="#CCCCCC"> about this</font>

494
00:19:25,020 --> 00:19:29,160
I've got<font color="#CCCCCC"> slides through here when I post</font>

495
00:19:26,580 --> 00:19:31,679
these<font color="#CCCCCC"> it's like here's the manual</font><font color="#E5E5E5"> that</font>

496
00:19:29,160 --> 00:19:34,230
really breaks all this down<font color="#E5E5E5"> some really</font>

497
00:19:31,680 --> 00:19:35,880
basic assembler constructs the assembler

498
00:19:34,230 --> 00:19:37,890
is very very intuitive<font color="#E5E5E5"> it's a great</font>

499
00:19:35,880 --> 00:19:39,330
assembler<font color="#CCCCCC"> language really</font><font color="#E5E5E5"> intuitive I</font>

500
00:19:37,890 --> 00:19:42,210
find it a lot<font color="#E5E5E5"> more intuitive actually</font>

501
00:19:39,330 --> 00:19:44,840
the next<font color="#E5E5E5"> 86 assembler but a couple of</font>

502
00:19:42,210 --> 00:19:47,820
ideas<font color="#CCCCCC"> that don't exactly match up</font><font color="#E5E5E5"> here</font>

503
00:19:44,840 --> 00:19:49,770
<font color="#E5E5E5">store and the structions that revolve</font>

504
00:19:47,820 --> 00:19:52,409
<font color="#E5E5E5">around store have to do with moving</font>

505
00:19:49,770 --> 00:19:54,690
something into a memory address<font color="#E5E5E5"> so from</font>

506
00:19:52,410 --> 00:19:57,240
a register into memory or from<font color="#E5E5E5"> memory</font>

507
00:19:54,690 --> 00:19:58,560
<font color="#E5E5E5">into memory</font><font color="#CCCCCC"> a load is the opposite has</font>

508
00:19:57,240 --> 00:20:00,900
to do with<font color="#CCCCCC"> moving something into a</font>

509
00:19:58,560 --> 00:20:04,260
register<font color="#CCCCCC"> so from memory to a register</font>

510
00:20:00,900 --> 00:20:07,470
from<font color="#E5E5E5"> a register to</font><font color="#CCCCCC"> register addressing</font>

511
00:20:04,260 --> 00:20:09,990
is<font color="#CCCCCC"> could be</font><font color="#E5E5E5"> relative or base plus</font>

512
00:20:07,470 --> 00:20:11,700
displacement<font color="#E5E5E5"> so generally</font><font color="#CCCCCC"> speaking you</font>

513
00:20:09,990 --> 00:20:13,140
have<font color="#CCCCCC"> a base register and if you're</font>

514
00:20:11,700 --> 00:20:14,550
addressing<font color="#E5E5E5"> a variable or</font><font color="#CCCCCC"> something in</font>

515
00:20:13,140 --> 00:20:16,050
memory<font color="#CCCCCC"> of a base register</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> is</font>

516
00:20:14,550 --> 00:20:18,030
usually set<font color="#CCCCCC"> to maybe the beginning of</font>

517
00:20:16,050 --> 00:20:19,970
your program<font color="#CCCCCC"> its entry point</font><font color="#E5E5E5"> and then</font>

518
00:20:18,030 --> 00:20:22,110
you have<font color="#CCCCCC"> an offset</font><font color="#E5E5E5"> pointing to where</font>

519
00:20:19,970 --> 00:20:23,940
where<font color="#E5E5E5"> your variable in the data you're</font>

520
00:20:22,110 --> 00:20:25,800
trying<font color="#CCCCCC"> to access</font><font color="#E5E5E5"> can also be relative</font>

521
00:20:23,940 --> 00:20:27,960
just like<font color="#E5E5E5"> in x86 where I want to say I</font>

522
00:20:25,800 --> 00:20:31,190
want to<font color="#E5E5E5"> access the thing that's 67 bytes</font>

523
00:20:27,960 --> 00:20:33,240
from where I'm at right<font color="#CCCCCC"> now can do</font><font color="#E5E5E5"> both</font>

524
00:20:31,190 --> 00:20:35,250
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> just an example of an</font>

525
00:20:33,240 --> 00:20:36,270
instruction a common<font color="#CCCCCC"> instruction and</font>

526
00:20:35,250 --> 00:20:37,860
what it looks<font color="#CCCCCC"> like if you</font><font color="#E5E5E5"> look</font><font color="#CCCCCC"> it up in</font>

527
00:20:36,270 --> 00:20:39,389
<font color="#CCCCCC">the manual there they're all documented</font>

528
00:20:37,860 --> 00:20:41,790
<font color="#CCCCCC">very well but</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> to give</font><font color="#E5E5E5"> you an</font><font color="#CCCCCC"> idea</font>

529
00:20:39,390 --> 00:20:45,000
and then also what it looks like<font color="#CCCCCC"> in</font>

530
00:20:41,790 --> 00:20:46,800
assembler as well so this instruction

531
00:20:45,000 --> 00:20:50,210
basically<font color="#E5E5E5"> just takes a memory</font><font color="#CCCCCC"> address</font>

532
00:20:46,800 --> 00:20:52,350
and puts<font color="#CCCCCC"> that address into a register</font>

533
00:20:50,210 --> 00:20:54,270
<font color="#CCCCCC">when you look it up in</font><font color="#E5E5E5"> the you look</font><font color="#CCCCCC"> it</font>

534
00:20:52,350 --> 00:20:57,540
up in<font color="#CCCCCC"> the</font><font color="#E5E5E5"> manual you'll see the mnemonic</font>

535
00:20:54,270 --> 00:20:59,280
<font color="#E5E5E5">right there up in the corner la for load</font>

536
00:20:57,540 --> 00:21:00,870
address<font color="#CCCCCC"> and then you'll see this</font>

537
00:20:59,280 --> 00:21:01,600
construct right here which<font color="#CCCCCC"> basically is</font>

538
00:21:00,870 --> 00:21:03,370
how<font color="#E5E5E5"> you lay it out</font>

539
00:21:01,600 --> 00:21:05,560
you've got the the<font color="#E5E5E5"> target register left</font>

540
00:21:03,370 --> 00:21:07,629
to right target register<font color="#E5E5E5"> displacement</font>

541
00:21:05,560 --> 00:21:10,030
and then what the base<font color="#CCCCCC"> register is to</font>

542
00:21:07,630 --> 00:21:11,740
calculate the address<font color="#E5E5E5"> from and then</font>

543
00:21:10,030 --> 00:21:13,600
below that<font color="#E5E5E5"> it's got the</font><font color="#CCCCCC"> Machine opcodes</font>

544
00:21:11,740 --> 00:21:15,340
<font color="#E5E5E5">so when you see it in</font><font color="#CCCCCC"> shellcode or when</font>

545
00:21:13,600 --> 00:21:17,379
you see it in<font color="#CCCCCC"> a machine code you can</font>

546
00:21:15,340 --> 00:21:18,790
know what that looks like<font color="#CCCCCC"> so I've</font>

547
00:21:17,380 --> 00:21:19,870
written the same instruction three times

548
00:21:18,790 --> 00:21:22,659
<font color="#CCCCCC">just so you</font><font color="#E5E5E5"> can see what it looks like</font>

549
00:21:19,870 --> 00:21:24,659
<font color="#CCCCCC">an assembler</font><font color="#E5E5E5"> so this instruction</font><font color="#CCCCCC"> the</font>

550
00:21:22,660 --> 00:21:28,060
kind<font color="#CCCCCC"> of like</font><font color="#E5E5E5"> Intel syntax you've got</font>

551
00:21:24,660 --> 00:21:31,240
<font color="#CCCCCC">target</font><font color="#E5E5E5"> comma source so load address in</font>

552
00:21:28,060 --> 00:21:34,270
to<font color="#E5E5E5"> register for from my variable that</font>

553
00:21:31,240 --> 00:21:36,250
<font color="#E5E5E5">will get resolved that gets resolved at</font>

554
00:21:34,270 --> 00:21:39,100
compile time but for<font color="#E5E5E5"> readability you</font>

555
00:21:36,250 --> 00:21:41,560
would code it like this<font color="#E5E5E5"> you can do it</font>

556
00:21:39,100 --> 00:21:44,980
<font color="#E5E5E5">directly and say I want to load</font><font color="#CCCCCC"> address</font>

557
00:21:41,560 --> 00:21:47,200
into r4 from register<font color="#CCCCCC"> 7 which we don't</font>

558
00:21:44,980 --> 00:21:51,010
<font color="#E5E5E5">know where register 7 points here but we</font>

559
00:21:47,200 --> 00:21:53,110
know that<font color="#CCCCCC"> one echo hex bytes from</font>

560
00:21:51,010 --> 00:21:54,970
register 7 is also<font color="#E5E5E5"> where</font><font color="#CCCCCC"> the address is</font>

561
00:21:53,110 --> 00:21:56,290
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to get loaded into register 4 and</font>

562
00:21:54,970 --> 00:21:59,050
we could do<font color="#E5E5E5"> it as</font><font color="#CCCCCC"> shellcode and</font><font color="#E5E5E5"> this</font>

563
00:21:56,290 --> 00:22:00,730
will execute just fine as<font color="#E5E5E5"> well where we</font>

564
00:21:59,050 --> 00:22:02,590
basically<font color="#E5E5E5"> just coded in the same format</font>

565
00:22:00,730 --> 00:22:03,970
<font color="#CCCCCC">that you see it on</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> left hand side</font><font color="#E5E5E5"> so</font>

566
00:22:02,590 --> 00:22:05,560
when we talk about shellcode<font color="#E5E5E5"> here in a</font>

567
00:22:03,970 --> 00:22:08,500
minute<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> what that'll</font><font color="#CCCCCC"> look like</font>

568
00:22:05,560 --> 00:22:11,889
that<font color="#E5E5E5"> is basically just a declaration of</font>

569
00:22:08,500 --> 00:22:15,850
a constant if you will<font color="#CCCCCC"> it has a label</font><font color="#E5E5E5"> s3</font>

570
00:22:11,890 --> 00:22:20,020
<font color="#E5E5E5">and the constant is</font><font color="#CCCCCC"> four hex bytes 4</font><font color="#E5E5E5"> 1 4</font>

571
00:22:15,850 --> 00:22:20,969
<font color="#CCCCCC">0</font><font color="#E5E5E5"> 700</font><font color="#CCCCCC"> 1e and there again is to</font><font color="#E5E5E5"> manually</font>

572
00:22:20,020 --> 00:22:24,220
if you want to read all about<font color="#E5E5E5"> that</font>

573
00:22:20,970 --> 00:22:25,750
<font color="#E5E5E5">principles of</font><font color="#CCCCCC"> operation is the manual</font>

574
00:22:24,220 --> 00:22:27,400
that describes the architecture

575
00:22:25,750 --> 00:22:28,900
describes all the<font color="#E5E5E5"> mnemonics describes</font>

576
00:22:27,400 --> 00:22:30,070
all the<font color="#E5E5E5"> assembler statements describes</font>

577
00:22:28,900 --> 00:22:33,610
how<font color="#E5E5E5"> the system works</font>

578
00:22:30,070 --> 00:22:35,800
it is a jarring read that is really good

579
00:22:33,610 --> 00:22:40,030
<font color="#E5E5E5">for insomnia</font><font color="#CCCCCC"> but it is absolutely</font>

580
00:22:35,800 --> 00:22:42,190
essential reference manual so we talked

581
00:22:40,030 --> 00:22:44,280
about vulnerabilities<font color="#E5E5E5"> there's a link at</font>

582
00:22:42,190 --> 00:22:47,260
<font color="#E5E5E5">the</font><font color="#CCCCCC"> end of this where IBM lists the six</font>

583
00:22:44,280 --> 00:22:48,879
coding sins on<font color="#CCCCCC"> the mainframe I'm only</font>

584
00:22:47,260 --> 00:22:51,280
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk about a couple</font><font color="#CCCCCC"> of them for</font>

585
00:22:48,880 --> 00:22:52,780
<font color="#CCCCCC">the purposes of the purpose of</font><font color="#E5E5E5"> this talk</font>

586
00:22:51,280 --> 00:22:54,730
but<font color="#E5E5E5"> what you'll find when</font><font color="#CCCCCC"> you look at</font>

587
00:22:52,780 --> 00:22:56,680
the vulnerabilities is by and<font color="#E5E5E5"> large</font>

588
00:22:54,730 --> 00:22:58,330
they're similar to vulnerabilities<font color="#CCCCCC"> that</font>

589
00:22:56,680 --> 00:22:59,740
you would<font color="#E5E5E5"> find on other platforms it</font>

590
00:22:58,330 --> 00:23:02,169
might just be<font color="#E5E5E5"> called something</font><font color="#CCCCCC"> different</font>

591
00:22:59,740 --> 00:23:05,530
<font color="#E5E5E5">but they're pretty common here's an</font>

592
00:23:02,170 --> 00:23:07,270
example so untrusted parameters so

593
00:23:05,530 --> 00:23:11,830
you've got a service<font color="#E5E5E5"> call</font><font color="#CCCCCC"> which is</font>

594
00:23:07,270 --> 00:23:13,360
you'll remember like a sis call and that

595
00:23:11,830 --> 00:23:15,370
is a<font color="#E5E5E5"> privileged program that is a</font>

596
00:23:13,360 --> 00:23:17,379
<font color="#E5E5E5">program that can</font><font color="#CCCCCC"> run authorized so it</font>

597
00:23:15,370 --> 00:23:19,300
incumbent upon the<font color="#E5E5E5"> privileged program to</font>

598
00:23:17,380 --> 00:23:22,120
make<font color="#E5E5E5"> sure that the calling program which</font>

599
00:23:19,300 --> 00:23:23,740
is not privileged<font color="#E5E5E5"> is authorized to</font>

600
00:23:22,120 --> 00:23:25,600
either read or<font color="#E5E5E5"> write wherever it's</font><font color="#CCCCCC"> being</font>

601
00:23:23,740 --> 00:23:28,300
told to<font color="#E5E5E5"> read or write to so as an</font>

602
00:23:25,600 --> 00:23:30,939
example<font color="#E5E5E5"> if I call a service if I call an</font>

603
00:23:28,300 --> 00:23:32,409
<font color="#CCCCCC">FCC</font><font color="#E5E5E5"> and say hey you know fetch me the</font>

604
00:23:30,940 --> 00:23:34,990
fetch me<font color="#CCCCCC"> that</font><font color="#E5E5E5"> data that's in memory</font>

605
00:23:32,410 --> 00:23:36,910
<font color="#E5E5E5">location XYZ it's incumbent upon that</font>

606
00:23:34,990 --> 00:23:39,280
<font color="#E5E5E5">SVC to make sure that I actually have</font>

607
00:23:36,910 --> 00:23:41,350
<font color="#E5E5E5">the</font><font color="#CCCCCC"> ability to read that</font><font color="#E5E5E5"> if I don't</font><font color="#CCCCCC"> have</font>

608
00:23:39,280 --> 00:23:43,270
<font color="#CCCCCC">the ability to read that</font><font color="#E5E5E5"> as my user it</font>

609
00:23:41,350 --> 00:23:45,850
should not perform<font color="#E5E5E5"> that action but we</font>

610
00:23:43,270 --> 00:23:47,260
see lots of them<font color="#CCCCCC"> that do write</font><font color="#E5E5E5"> so I just</font>

611
00:23:45,850 --> 00:23:49,449
<font color="#CCCCCC">passed it a memory space and say hey</font>

612
00:23:47,260 --> 00:23:50,830
read that for me<font color="#CCCCCC"> and return</font><font color="#E5E5E5"> it and if</font>

613
00:23:49,450 --> 00:23:52,930
it's not<font color="#E5E5E5"> checking to see if I had access</font>

614
00:23:50,830 --> 00:23:55,540
<font color="#E5E5E5">the proper access</font><font color="#CCCCCC"> to that</font><font color="#E5E5E5"> to begin with</font>

615
00:23:52,930 --> 00:23:57,010
it's not<font color="#CCCCCC"> checking my processes key then</font>

616
00:23:55,540 --> 00:23:58,960
<font color="#CCCCCC">it was happy we return it in I've got</font>

617
00:23:57,010 --> 00:24:01,810
all<font color="#CCCCCC"> kinds of</font><font color="#E5E5E5"> vulnerabilities to be able</font>

618
00:23:58,960 --> 00:24:04,150
<font color="#E5E5E5">to read memory</font><font color="#CCCCCC"> write read unauthorized</font>

619
00:24:01,810 --> 00:24:06,220
memory reads all over the place the

620
00:24:04,150 --> 00:24:08,410
worst one is is the converse which is

621
00:24:06,220 --> 00:24:12,850
not checking<font color="#CCCCCC"> write access so that same</font>

622
00:24:08,410 --> 00:24:16,180
<font color="#CCCCCC">eight</font><font color="#E5E5E5"> scenario I call an SVC</font><font color="#CCCCCC"> I say read</font>

623
00:24:12,850 --> 00:24:18,040
this memory space<font color="#E5E5E5"> just a</font><font color="#CCCCCC"> byte in memory</font>

624
00:24:16,180 --> 00:24:19,510
somewhere but return it to the pointer

625
00:24:18,040 --> 00:24:21,190
in the in the parameter I'm going to

626
00:24:19,510 --> 00:24:22,240
give you a pointer in<font color="#E5E5E5"> the one of the</font>

627
00:24:21,190 --> 00:24:24,760
parameters where I want the value

628
00:24:22,240 --> 00:24:26,020
<font color="#E5E5E5">returned to if that pointer points</font>

629
00:24:24,760 --> 00:24:28,390
somewhere that I<font color="#E5E5E5"> don't already have</font>

630
00:24:26,020 --> 00:24:30,370
access<font color="#E5E5E5"> to now you've got an SVC that's</font>

631
00:24:28,390 --> 00:24:31,600
doing arbitrary<font color="#CCCCCC"> writes and as soon</font><font color="#E5E5E5"> as</font>

632
00:24:30,370 --> 00:24:34,989
you can do arbitrary memory<font color="#CCCCCC"> rights</font>

633
00:24:31,600 --> 00:24:38,320
<font color="#E5E5E5">that's also game over just like just</font>

634
00:24:34,990 --> 00:24:42,130
like x86 land buffer overflows work just

635
00:24:38,320 --> 00:24:43,600
like buffer overflows work for the<font color="#E5E5E5"> maybe</font>

636
00:24:42,130 --> 00:24:45,670
one person<font color="#CCCCCC"> in</font><font color="#E5E5E5"> here that doesn't know</font>

637
00:24:43,600 --> 00:24:48,070
<font color="#CCCCCC">what a buffer overflow is</font><font color="#E5E5E5"> it basically</font>

638
00:24:45,670 --> 00:24:49,450
<font color="#CCCCCC">just an unchecked</font><font color="#E5E5E5"> read that's out of</font>

639
00:24:48,070 --> 00:24:51,730
bounds outside of wherever<font color="#E5E5E5"> it's being</font>

640
00:24:49,450 --> 00:24:53,440
<font color="#E5E5E5">stored so you've got a program reads a</font>

641
00:24:51,730 --> 00:24:55,240
<font color="#CCCCCC">nine-digit social security number in it</font>

642
00:24:53,440 --> 00:24:57,550
but the caller feeds<font color="#E5E5E5"> at a hundred digits</font>

643
00:24:55,240 --> 00:24:59,050
<font color="#CCCCCC">and now you've overwritten memory that</font>

644
00:24:57,550 --> 00:25:01,000
you weren't<font color="#E5E5E5"> supposed to write to buy</font>

645
00:24:59,050 --> 00:25:02,590
some<font color="#E5E5E5"> 91 bytes and if you do that</font><font color="#CCCCCC"> right</font>

646
00:25:01,000 --> 00:25:05,080
<font color="#CCCCCC">you can write</font><font color="#E5E5E5"> something important</font><font color="#CCCCCC"> like a</font>

647
00:25:02,590 --> 00:25:07,570
return<font color="#E5E5E5"> address or a jump address or a</font>

648
00:25:05,080 --> 00:25:10,330
routine or maybe just<font color="#E5E5E5"> some important</font>

649
00:25:07,570 --> 00:25:13,409
<font color="#CCCCCC">data one we're going</font><font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> today</font>

650
00:25:10,330 --> 00:25:15,970
because<font color="#E5E5E5"> it's just fun is a real live</font>

651
00:25:13,410 --> 00:25:17,920
vendor SVC that we found<font color="#E5E5E5"> in the wild</font>

652
00:25:15,970 --> 00:25:19,660
<font color="#CCCCCC">then</font><font color="#E5E5E5"> we found it years ago</font><font color="#CCCCCC"> it's since</font>

653
00:25:17,920 --> 00:25:22,060
been<font color="#E5E5E5"> fixed but I think it's</font><font color="#CCCCCC"> just great</font>

654
00:25:19,660 --> 00:25:24,430
<font color="#CCCCCC">and it's</font><font color="#E5E5E5"> great for a couple</font><font color="#CCCCCC"> reasons one</font>

655
00:25:22,060 --> 00:25:25,240
<font color="#E5E5E5">we can show you kind of</font><font color="#CCCCCC"> what to look for</font>

656
00:25:24,430 --> 00:25:27,190
how this<font color="#E5E5E5"> works</font>

657
00:25:25,240 --> 00:25:28,250
frankly it's still out there<font color="#E5E5E5"> I still</font>

658
00:25:27,190 --> 00:25:30,860
find<font color="#E5E5E5"> this</font>

659
00:25:28,250 --> 00:25:35,690
unpatched version of<font color="#E5E5E5"> this but also</font><font color="#CCCCCC"> it</font>

660
00:25:30,860 --> 00:25:37,789
really<font color="#E5E5E5"> kind of lends to</font><font color="#CCCCCC"> what happens if</font>

661
00:25:35,690 --> 00:25:39,440
you<font color="#E5E5E5"> have people writing critical code</font>

662
00:25:37,789 --> 00:25:41,299
for a<font color="#E5E5E5"> critical</font><font color="#CCCCCC"> system but they're</font><font color="#E5E5E5"> not</font>

663
00:25:39,440 --> 00:25:45,080
being<font color="#E5E5E5"> checked by</font><font color="#CCCCCC"> anyone whether</font><font color="#E5E5E5"> they're</font>

664
00:25:41,299 --> 00:25:47,539
<font color="#E5E5E5">a vendor whether they are a user because</font>

665
00:25:45,080 --> 00:25:49,280
<font color="#E5E5E5">oftentimes what'll happen like a vendor</font>

666
00:25:47,539 --> 00:25:51,169
might leave a<font color="#E5E5E5"> bat literally like a</font>

667
00:25:49,280 --> 00:25:52,250
<font color="#E5E5E5">backdoor in their code so that when they</font>

668
00:25:51,169 --> 00:25:53,480
<font color="#E5E5E5">come in and do maintenance they don't</font>

669
00:25:52,250 --> 00:25:55,340
have to go through<font color="#E5E5E5"> that pesky change</font>

670
00:25:53,480 --> 00:25:57,710
control process right or worry about

671
00:25:55,340 --> 00:25:59,840
<font color="#CCCCCC">checking</font><font color="#E5E5E5"> out an authorized ID</font><font color="#CCCCCC"> they can</font>

672
00:25:57,710 --> 00:26:01,570
just use this magic<font color="#E5E5E5"> switch to get</font>

673
00:25:59,840 --> 00:26:04,100
<font color="#CCCCCC">themself access to whatever</font><font color="#E5E5E5"> they need</font>

674
00:26:01,570 --> 00:26:05,780
it's also really<font color="#E5E5E5"> common to see</font>

675
00:26:04,100 --> 00:26:08,449
<font color="#CCCCCC">especially in today's day and age where</font>

676
00:26:05,780 --> 00:26:09,620
we we are<font color="#CCCCCC"> working on these</font><font color="#E5E5E5"> privileged</font>

677
00:26:08,450 --> 00:26:11,179
we're locking<font color="#CCCCCC"> people out of their</font>

678
00:26:09,620 --> 00:26:13,100
authorized<font color="#E5E5E5"> IDs we're not letting</font><font color="#CCCCCC"> you</font>

679
00:26:11,179 --> 00:26:15,440
<font color="#CCCCCC">have all</font><font color="#E5E5E5"> that permissions on your</font>

680
00:26:13,100 --> 00:26:16,939
<font color="#E5E5E5">developer ID that you used to</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> the</font>

681
00:26:15,440 --> 00:26:18,950
developers aren't taking that line down

682
00:26:16,940 --> 00:26:20,240
<font color="#E5E5E5">so they create</font><font color="#CCCCCC"> themselves a</font><font color="#E5E5E5"> little</font>

683
00:26:18,950 --> 00:26:21,650
backdoor that they can just call

684
00:26:20,240 --> 00:26:24,650
periodically when they need<font color="#E5E5E5"> to do a</font>

685
00:26:21,650 --> 00:26:26,510
thing or another thing<font color="#CCCCCC"> but</font><font color="#E5E5E5"> effectively</font>

686
00:26:24,650 --> 00:26:28,280
it just becomes a<font color="#E5E5E5"> giant gaping hole that</font>

687
00:26:26,510 --> 00:26:30,789
<font color="#CCCCCC">can</font><font color="#E5E5E5"> pierce the integrity of the system</font>

688
00:26:28,280 --> 00:26:34,610
<font color="#E5E5E5">the one we're</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> look at today</font>

689
00:26:30,789 --> 00:26:36,320
<font color="#E5E5E5">literally takes four parameters</font><font color="#CCCCCC"> action</font>

690
00:26:34,610 --> 00:26:39,620
type a secret code which we'll<font color="#E5E5E5"> talk more</font>

691
00:26:36,320 --> 00:26:42,408
about later<font color="#CCCCCC"> and potentially a jump</font>

692
00:26:39,620 --> 00:26:44,719
<font color="#CCCCCC">address and that's</font><font color="#E5E5E5"> the pseudo code</font><font color="#CCCCCC"> in</font>

693
00:26:42,409 --> 00:26:46,460
<font color="#E5E5E5">the orange box it checks secrets to make</font>

694
00:26:44,720 --> 00:26:47,900
sure<font color="#E5E5E5"> that if the secrets are not good</font>

695
00:26:46,460 --> 00:26:50,270
then it gives<font color="#E5E5E5"> you an error and says</font>

696
00:26:47,900 --> 00:26:51,590
<font color="#CCCCCC">Shane</font><font color="#E5E5E5"> and if the secrets are good then</font>

697
00:26:50,270 --> 00:26:56,230
you get to steal all the things<font color="#E5E5E5"> and</font>

698
00:26:51,590 --> 00:26:58,789
<font color="#E5E5E5">everything everybody's happy maybe not</font>

699
00:26:56,230 --> 00:27:00,200
so I'm<font color="#E5E5E5"> gonna look at that in one minute</font>

700
00:26:58,789 --> 00:27:02,150
<font color="#CCCCCC">but</font><font color="#E5E5E5"> before we do that I just want to</font>

701
00:27:00,200 --> 00:27:05,630
show you an example<font color="#E5E5E5"> of what shell code</font>

702
00:27:02,150 --> 00:27:08,270
might look<font color="#CCCCCC"> like there</font><font color="#E5E5E5"> are there are more</font>

703
00:27:05,630 --> 00:27:10,460
succinct ways to do this but<font color="#CCCCCC"> I'm a man</font>

704
00:27:08,270 --> 00:27:13,490
of like living<font color="#E5E5E5"> off the land keeping it</font>

705
00:27:10,460 --> 00:27:15,590
simple<font color="#CCCCCC"> pretty</font><font color="#E5E5E5"> straightforward</font><font color="#CCCCCC"> but I'll</font>

706
00:27:13,490 --> 00:27:17,390
<font color="#CCCCCC">just</font><font color="#E5E5E5"> show you real quick so you get your</font>

707
00:27:15,590 --> 00:27:19,939
<font color="#CCCCCC">working code this is JCL that's</font>

708
00:27:17,390 --> 00:27:21,350
generated from<font color="#CCCCCC"> Metasploit</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> Metasploit</font>

709
00:27:19,940 --> 00:27:24,350
supports<font color="#E5E5E5"> this platform there are</font>

710
00:27:21,350 --> 00:27:25,580
payloads out there<font color="#E5E5E5"> one authenticated</font>

711
00:27:24,350 --> 00:27:28,340
exploit<font color="#CCCCCC"> a few other</font><font color="#E5E5E5"> things out there</font>

712
00:27:25,580 --> 00:27:31,340
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is just assembler and JCL that gets</font>

713
00:27:28,340 --> 00:27:33,408
<font color="#E5E5E5">generated from</font><font color="#CCCCCC"> Metasploit put it on my</font>

714
00:27:31,340 --> 00:27:34,939
system compile it<font color="#E5E5E5"> bind it create a</font>

715
00:27:33,409 --> 00:27:37,630
binary then I'm just<font color="#E5E5E5"> gonna copy that</font>

716
00:27:34,940 --> 00:27:39,740
binary off to my<font color="#CCCCCC"> machine because the the</font>

717
00:27:37,630 --> 00:27:41,730
manipulation tools on<font color="#E5E5E5"> Linux for me are</font>

718
00:27:39,740 --> 00:27:43,860
way<font color="#CCCCCC"> easier to</font><font color="#E5E5E5"> use</font>

719
00:27:41,730 --> 00:27:45,090
then been doing it<font color="#E5E5E5"> on the mainframe</font><font color="#CCCCCC"> and</font>

720
00:27:43,860 --> 00:27:47,490
I'm<font color="#E5E5E5"> essentially just gonna take that</font>

721
00:27:45,090 --> 00:27:50,730
<font color="#CCCCCC">binary I'm just gonna</font><font color="#E5E5E5"> use a</font><font color="#CCCCCC"> combination</font>

722
00:27:47,490 --> 00:27:53,280
of like<font color="#CCCCCC"> xx</font><font color="#E5E5E5"> the grep cut that kind of</font>

723
00:27:50,730 --> 00:27:56,420
stuff<font color="#E5E5E5"> and make it into a text file that</font>

724
00:27:53,280 --> 00:27:59,730
<font color="#CCCCCC">is formatted like a bunch of assembly</font>

725
00:27:56,420 --> 00:28:02,400
constant strings<font color="#E5E5E5"> I'm gonna put that</font><font color="#CCCCCC"> back</font>

726
00:27:59,730 --> 00:28:03,990
<font color="#CCCCCC">up on the mainframe as a</font><font color="#E5E5E5"> text file and</font>

727
00:28:02,400 --> 00:28:07,380
then the only other thing<font color="#CCCCCC"> I've got to</font><font color="#E5E5E5"> do</font>

728
00:28:03,990 --> 00:28:11,970
is resolve<font color="#E5E5E5"> those pesky</font><font color="#CCCCCC"> external</font>

729
00:28:07,380 --> 00:28:13,560
functions<font color="#E5E5E5"> so when you write when you</font>

730
00:28:11,970 --> 00:28:16,020
write a program<font color="#E5E5E5"> and</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is not this is</font>

731
00:28:13,560 --> 00:28:18,030
<font color="#CCCCCC">not unique to the mainframe but when you</font>

732
00:28:16,020 --> 00:28:19,770
write<font color="#CCCCCC"> shell code</font><font color="#E5E5E5"> there's a couple things</font>

733
00:28:18,030 --> 00:28:23,580
shell code needs to<font color="#E5E5E5"> be one is generally</font>

734
00:28:19,770 --> 00:28:26,160
it needs to be a string that can live

735
00:28:23,580 --> 00:28:27,629
anywhere<font color="#CCCCCC"> in memory and it has to</font><font color="#E5E5E5"> be</font>

736
00:28:26,160 --> 00:28:29,730
position independent<font color="#CCCCCC"> and it can't</font>

737
00:28:27,630 --> 00:28:31,380
require any<font color="#E5E5E5"> kind of like a loader so</font>

738
00:28:29,730 --> 00:28:33,690
when you<font color="#E5E5E5"> load a when you load a</font><font color="#CCCCCC"> program</font>

739
00:28:31,380 --> 00:28:35,070
when<font color="#CCCCCC"> you execute</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> binary it fills in</font>

740
00:28:33,690 --> 00:28:37,560
all kinds of<font color="#CCCCCC"> information for you about</font>

741
00:28:35,070 --> 00:28:38,610
<font color="#CCCCCC">where that function</font><font color="#E5E5E5"> is open and read and</font>

742
00:28:37,560 --> 00:28:39,690
all this kind of stuff<font color="#CCCCCC"> because on</font>

743
00:28:38,610 --> 00:28:41,490
different systems<font color="#E5E5E5"> they might</font><font color="#CCCCCC"> be in</font>

744
00:28:39,690 --> 00:28:43,380
<font color="#CCCCCC">different places</font><font color="#E5E5E5"> in memory that</font><font color="#CCCCCC"> happens</font>

745
00:28:41,490 --> 00:28:45,270
when you launch a binary<font color="#E5E5E5"> same thing</font>

746
00:28:43,380 --> 00:28:47,250
happens on<font color="#E5E5E5"> the mainframe so we've got to</font>

747
00:28:45,270 --> 00:28:48,330
have<font color="#E5E5E5"> functions in</font><font color="#CCCCCC"> here that look</font><font color="#E5E5E5"> that up</font>

748
00:28:47,250 --> 00:28:50,160
for<font color="#CCCCCC"> us because</font><font color="#E5E5E5"> we're not necessarily</font>

749
00:28:48,330 --> 00:28:52,649
launching our shell code right we're

750
00:28:50,160 --> 00:28:55,650
gonna be we're gonna be just jumping<font color="#CCCCCC"> to</font>

751
00:28:52,650 --> 00:28:57,180
it<font color="#E5E5E5"> from some area memory so we're gonna</font>

752
00:28:55,650 --> 00:28:58,950
put the instruction these in here that

753
00:28:57,180 --> 00:29:00,780
do the dynamic lookups a<font color="#CCCCCC"> two step</font>

754
00:28:58,950 --> 00:29:02,580
<font color="#CCCCCC">process we create the original shell</font>

755
00:29:00,780 --> 00:29:03,780
code<font color="#E5E5E5"> we put these in we put these</font>

756
00:29:02,580 --> 00:29:07,320
instructions in here that will<font color="#E5E5E5"> do the</font>

757
00:29:03,780 --> 00:29:08,910
dynamic lookup<font color="#E5E5E5"> of those functions this</font>

758
00:29:07,320 --> 00:29:11,909
<font color="#CCCCCC">is a reverse shell</font><font color="#E5E5E5"> so we've got like</font><font color="#CCCCCC"> a</font>

759
00:29:08,910 --> 00:29:15,720
socket<font color="#E5E5E5"> connect fctl and then some kind</font>

760
00:29:11,910 --> 00:29:17,490
<font color="#CCCCCC">of exact or spawn we're gonna go in</font><font color="#E5E5E5"> to</font>

761
00:29:15,720 --> 00:29:20,400
the debugger we're gonna find out where

762
00:29:17,490 --> 00:29:22,380
those offsets are we're gonna change<font color="#E5E5E5"> the</font>

763
00:29:20,400 --> 00:29:24,120
instructions instead of loading<font color="#E5E5E5"> from</font>

764
00:29:22,380 --> 00:29:26,070
those offsets<font color="#E5E5E5"> to just load the address</font>

765
00:29:24,120 --> 00:29:27,300
so we can jump to them<font color="#E5E5E5"> and then we're</font>

766
00:29:26,070 --> 00:29:29,100
gonna zap it and if you learn<font color="#CCCCCC"> nothing</font>

767
00:29:27,300 --> 00:29:30,930
<font color="#E5E5E5">else</font><font color="#CCCCCC"> today you'll learn</font><font color="#E5E5E5"> that the coolest</font>

768
00:29:29,100 --> 00:29:34,139
<font color="#E5E5E5">tournament mainframe is zapping</font>

769
00:29:30,930 --> 00:29:36,020
basically because it's<font color="#E5E5E5"> really it really</font>

770
00:29:34,140 --> 00:29:38,220
is the only<font color="#CCCCCC"> cool term on the mainframe</font>

771
00:29:36,020 --> 00:29:40,320
<font color="#E5E5E5">but that basically just</font><font color="#CCCCCC"> means</font><font color="#E5E5E5"> that</font>

772
00:29:38,220 --> 00:29:42,570
<font color="#E5E5E5">you're patching</font><font color="#CCCCCC"> a binary</font><font color="#E5E5E5"> right so</font>

773
00:29:40,320 --> 00:29:44,970
patching a binary<font color="#E5E5E5"> they refer</font><font color="#CCCCCC"> to as</font><font color="#E5E5E5"> this</font>

774
00:29:42,570 --> 00:29:46,679
<font color="#E5E5E5">app or changing changing data in memory</font>

775
00:29:44,970 --> 00:29:50,220
<font color="#E5E5E5">they</font><font color="#CCCCCC"> referred</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> as a</font><font color="#E5E5E5"> zap which is like</font>

776
00:29:46,680 --> 00:29:51,960
super<font color="#E5E5E5"> cool so we can find that code that</font>

777
00:29:50,220 --> 00:29:54,030
<font color="#CCCCCC">does the lookups on the system this is</font>

778
00:29:51,960 --> 00:29:55,590
<font color="#CCCCCC">the</font><font color="#E5E5E5"> actual code then that does the</font>

779
00:29:54,030 --> 00:29:57,629
lookups on the system and we

780
00:29:55,590 --> 00:29:59,610
basically<font color="#CCCCCC"> just gonna</font><font color="#E5E5E5"> dump that copy</font>

781
00:29:57,630 --> 00:30:02,789
those bytes<font color="#E5E5E5"> and create shelf code out of</font>

782
00:29:59,610 --> 00:30:04,469
<font color="#E5E5E5">that now what we've</font><font color="#CCCCCC"> got</font><font color="#E5E5E5"> is position</font>

783
00:30:02,789 --> 00:30:07,529
independent<font color="#E5E5E5"> shell code so this code</font><font color="#CCCCCC"> now</font>

784
00:30:04,470 --> 00:30:11,370
can be<font color="#E5E5E5"> jumped to rather than launched as</font>

785
00:30:07,529 --> 00:30:12,570
a binary so here's a<font color="#E5E5E5"> here's some</font>

786
00:30:11,370 --> 00:30:14,399
examples<font color="#E5E5E5"> I'm gonna show some</font>

787
00:30:12,570 --> 00:30:16,470
<font color="#E5E5E5">demonstrations I recorded them because</font>

788
00:30:14,400 --> 00:30:18,750
when I<font color="#E5E5E5"> get up</font><font color="#CCCCCC"> here my brain can't tell</font>

789
00:30:16,470 --> 00:30:21,510
<font color="#E5E5E5">my fingers what to do and it's really</font>

790
00:30:18,750 --> 00:30:22,799
<font color="#E5E5E5">painful</font><font color="#CCCCCC"> so on the left hand side you're</font>

791
00:30:21,510 --> 00:30:24,870
<font color="#CCCCCC">just gonna see</font><font color="#E5E5E5"> that shell code that we</font>

792
00:30:22,799 --> 00:30:26,129
<font color="#E5E5E5">just looked at on</font><font color="#CCCCCC"> the mainframe I'm</font>

793
00:30:24,870 --> 00:30:27,689
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> run that job on the right hand</font>

794
00:30:26,130 --> 00:30:30,899
side probably<font color="#E5E5E5"> looks</font><font color="#CCCCCC"> familiar to a lot of</font>

795
00:30:27,690 --> 00:30:33,059
<font color="#E5E5E5">you that's just MSF console running a</font>

796
00:30:30,899 --> 00:30:34,379
listener<font color="#CCCCCC"> I don't get a reverse shell on</font>

797
00:30:33,059 --> 00:30:36,149
here<font color="#E5E5E5"> just to basically show you what</font>

798
00:30:34,380 --> 00:30:39,120
that<font color="#E5E5E5"> looks</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> the shell is a</font><font color="#CCCCCC"> Linux</font>

799
00:30:36,149 --> 00:30:40,500
<font color="#E5E5E5">excuse me is the UNIX shell so we're</font>

800
00:30:39,120 --> 00:30:42,418
operating on the UNIX side of the

801
00:30:40,500 --> 00:30:44,640
mainframe<font color="#CCCCCC"> but it absolutely is the</font>

802
00:30:42,419 --> 00:30:46,380
mainframe<font color="#CCCCCC"> and you're all the permissions</font>

803
00:30:44,640 --> 00:30:50,909
<font color="#CCCCCC">of whoever it was that that actually</font>

804
00:30:46,380 --> 00:30:54,690
<font color="#E5E5E5">executed that shell so back to this</font>

805
00:30:50,909 --> 00:30:56,190
vendor SVC<font color="#CCCCCC"> for whatever reason in the</font>

806
00:30:54,690 --> 00:30:59,010
annals of mainframe history this<font color="#E5E5E5"> has</font>

807
00:30:56,190 --> 00:31:01,700
<font color="#E5E5E5">been referred to as the magic SVC or</font><font color="#CCCCCC"> a</font>

808
00:30:59,010 --> 00:31:04,860
magic<font color="#CCCCCC"> sec being</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> that gives you</font>

809
00:31:01,700 --> 00:31:08,070
that<font color="#CCCCCC"> backdoor gives you that immediate</font>

810
00:31:04,860 --> 00:31:09,539
like escalation to<font color="#CCCCCC"> route or supervisor</font>

811
00:31:08,070 --> 00:31:11,549
state or<font color="#E5E5E5"> whatever so we refer</font><font color="#CCCCCC"> to it as</font>

812
00:31:09,539 --> 00:31:15,990
magic<font color="#E5E5E5"> because when you do</font><font color="#CCCCCC"> it you get to</font>

813
00:31:11,549 --> 00:31:18,629
do all<font color="#CCCCCC"> the magic</font><font color="#E5E5E5"> what we're looking for</font>

814
00:31:15,990 --> 00:31:20,070
<font color="#E5E5E5">in</font><font color="#CCCCCC"> terms of a vulnerable SVC is a few</font>

815
00:31:18,630 --> 00:31:22,950
things there's there's only a few<font color="#E5E5E5"> ways</font>

816
00:31:20,070 --> 00:31:24,990
<font color="#E5E5E5">to do this transition from problem state</font>

817
00:31:22,950 --> 00:31:26,940
to supervisor state but one of<font color="#E5E5E5"> the</font>

818
00:31:24,990 --> 00:31:28,830
things that has to<font color="#CCCCCC"> happen is there's a</font>

819
00:31:26,940 --> 00:31:30,630
bit there's always just<font color="#E5E5E5"> one bit there's</font>

820
00:31:28,830 --> 00:31:32,070
a bit that<font color="#E5E5E5"> has to be flipped in your</font>

821
00:31:30,630 --> 00:31:34,529
address<font color="#E5E5E5"> space</font><font color="#CCCCCC"> for the operating system</font>

822
00:31:32,070 --> 00:31:36,059
to<font color="#CCCCCC"> say ok you</font><font color="#E5E5E5"> can do that so there's a</font>

823
00:31:34,529 --> 00:31:38,010
<font color="#E5E5E5">permission that if you will that says</font>

824
00:31:36,059 --> 00:31:40,918
yeah this person<font color="#CCCCCC"> this process this</font>

825
00:31:38,010 --> 00:31:42,750
address space<font color="#CCCCCC"> can issue the command to</font>

826
00:31:40,919 --> 00:31:44,460
move from problem<font color="#E5E5E5"> state the supervisor</font>

827
00:31:42,750 --> 00:31:45,870
state so it doesn't actually move you

828
00:31:44,460 --> 00:31:48,149
there it just<font color="#E5E5E5"> gives you permission to</font>

829
00:31:45,870 --> 00:31:50,750
execute<font color="#E5E5E5"> the command so you could think</font>

830
00:31:48,149 --> 00:31:53,070
<font color="#E5E5E5">about</font><font color="#CCCCCC"> it's like</font><font color="#E5E5E5"> the ability</font><font color="#CCCCCC"> to run sudo</font>

831
00:31:50,750 --> 00:31:57,600
<font color="#CCCCCC">versus like actually</font><font color="#E5E5E5"> running studio</font>

832
00:31:53,070 --> 00:31:59,460
right<font color="#E5E5E5"> so if we load up is our DD</font><font color="#CCCCCC"> N and</font>

833
00:31:57,600 --> 00:32:01,260
we<font color="#CCCCCC"> pump we look into our memory where</font>

834
00:31:59,460 --> 00:32:05,220
we've got this vulnerable SVC loaded

835
00:32:01,260 --> 00:32:08,399
what we can see first<font color="#E5E5E5"> of all is there</font>

836
00:32:05,220 --> 00:32:09,389
are some<font color="#E5E5E5"> text over</font><font color="#CCCCCC"> on the side here and</font>

837
00:32:08,399 --> 00:32:12,119
obviously<font color="#E5E5E5"> that</font>

838
00:32:09,389 --> 00:32:14,218
text has changed<font color="#CCCCCC"> from</font><font color="#E5E5E5"> the original but</font>

839
00:32:12,119 --> 00:32:16,708
it wasn't much<font color="#CCCCCC"> different than</font><font color="#E5E5E5"> that to be</font>

840
00:32:14,219 --> 00:32:19,589
honest<font color="#CCCCCC"> with you and then there's another</font>

841
00:32:16,709 --> 00:32:22,469
<font color="#CCCCCC">hard-coded word down below which is of</font>

842
00:32:19,589 --> 00:32:24,599
<font color="#E5E5E5">course the password yes so the password</font>

843
00:32:22,469 --> 00:32:27,089
<font color="#E5E5E5">required to execute this is just</font>

844
00:32:24,599 --> 00:32:30,689
<font color="#CCCCCC">hard-coded in</font><font color="#E5E5E5"> the SVC itself sort</font>

845
00:32:27,089 --> 00:32:33,029
<font color="#E5E5E5">non-encrypted not encoded in memory</font><font color="#CCCCCC"> and</font>

846
00:32:30,690 --> 00:32:35,070
it just does a string compare if you

847
00:32:33,029 --> 00:32:36,869
type it in and it<font color="#CCCCCC"> they're equal I mean</font>

848
00:32:35,070 --> 00:32:38,700
<font color="#E5E5E5">this is three lines of assembler code</font>

849
00:32:36,869 --> 00:32:42,649
that anybody in<font color="#E5E5E5"> here could read after</font>

850
00:32:38,700 --> 00:32:46,019
about five minutes<font color="#CCCCCC"> of instruction but</font>

851
00:32:42,649 --> 00:32:47,488
what I'm<font color="#E5E5E5"> looking for is</font><font color="#CCCCCC"> to see if if if</font>

852
00:32:46,019 --> 00:32:49,559
they're doing<font color="#CCCCCC"> something nefarious with</font>

853
00:32:47,489 --> 00:32:50,729
this or if this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> else so the</font>

854
00:32:49,559 --> 00:32:52,019
first thing I'm<font color="#CCCCCC"> looking for is I'm</font>

855
00:32:50,729 --> 00:32:54,059
looking<font color="#CCCCCC"> for an instruction something</font>

856
00:32:52,019 --> 00:32:56,729
like<font color="#E5E5E5"> this so this is an or instruction</font>

857
00:32:54,059 --> 00:32:59,279
<font color="#E5E5E5">it's an or immediate so for you guys out</font>

858
00:32:56,729 --> 00:33:01,469
there<font color="#E5E5E5"> that are bit Twitter's if you're</font>

859
00:32:59,279 --> 00:33:03,179
<font color="#E5E5E5">doing an or</font><font color="#CCCCCC"> two a</font><font color="#E5E5E5"> byte</font><font color="#CCCCCC"> in memory what</font>

860
00:33:01,469 --> 00:33:05,549
<font color="#E5E5E5">you're probably doing is changing bits</font>

861
00:33:03,179 --> 00:33:07,200
from<font color="#CCCCCC"> zero to one so if you or a byte in</font>

862
00:33:05,549 --> 00:33:10,408
memory with some kind of<font color="#E5E5E5"> mask</font>

863
00:33:07,200 --> 00:33:12,359
wherever the mask bytes are one then the

864
00:33:10,409 --> 00:33:15,029
resulting in memory will also be a<font color="#E5E5E5"> one</font>

865
00:33:12,359 --> 00:33:17,158
so<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is flipping a bit in memory and</font>

866
00:33:15,029 --> 00:33:20,489
<font color="#CCCCCC">that particular instruction</font><font color="#E5E5E5"> sequence</font>

867
00:33:17,159 --> 00:33:23,459
nine six zero one<font color="#E5E5E5"> eight zero</font><font color="#CCCCCC"> echo</font>

868
00:33:20,489 --> 00:33:26,009
<font color="#CCCCCC">Charlie's</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of hard to read</font><font color="#E5E5E5"> that is a</font>

869
00:33:23,459 --> 00:33:28,709
sequence<font color="#CCCCCC"> that I can</font><font color="#E5E5E5"> look for and know</font>

870
00:33:26,009 --> 00:33:31,049
that that is<font color="#E5E5E5"> probably not necessarily</font>

871
00:33:28,709 --> 00:33:32,940
<font color="#E5E5E5">but probably flipping this bit and there</font>

872
00:33:31,049 --> 00:33:34,200
are legit reasons to flip<font color="#E5E5E5"> this bit but</font>

873
00:33:32,940 --> 00:33:37,229
<font color="#E5E5E5">it's definitely</font><font color="#CCCCCC"> something I would look</font>

874
00:33:34,200 --> 00:33:39,419
into<font color="#E5E5E5"> further I'll also mention in case</font>

875
00:33:37,229 --> 00:33:40,889
it<font color="#CCCCCC"> went by too fast that when I went to</font>

876
00:33:39,419 --> 00:33:43,469
disassemble this in memory

877
00:33:40,889 --> 00:33:45,629
this warning popped up preventing me

878
00:33:43,469 --> 00:33:48,059
from disassembling it<font color="#E5E5E5"> if I don't have</font>

879
00:33:45,629 --> 00:33:50,549
<font color="#CCCCCC">permission because</font><font color="#E5E5E5"> if you type know then</font>

880
00:33:48,059 --> 00:33:55,379
it won't<font color="#E5E5E5"> do it but if you type yes it</font>

881
00:33:50,549 --> 00:33:59,279
will so I dumped that SVC out of memory

882
00:33:55,379 --> 00:34:02,309
<font color="#E5E5E5">disassembled it put it into</font><font color="#CCCCCC"> a source</font>

883
00:33:59,279 --> 00:34:04,169
library and then I clean<font color="#CCCCCC"> it up I'm gonna</font>

884
00:34:02,309 --> 00:34:05,700
<font color="#E5E5E5">rewrite it basically so</font><font color="#CCCCCC"> that I can</font>

885
00:34:04,169 --> 00:34:08,579
really<font color="#E5E5E5"> figure out what this</font><font color="#CCCCCC"> thing does</font>

886
00:34:05,700 --> 00:34:10,109
<font color="#E5E5E5">I've reversed engine I reversed it I've</font>

887
00:34:08,579 --> 00:34:12,089
disassembled it<font color="#E5E5E5"> and but now I really</font>

888
00:34:10,109 --> 00:34:13,589
want to understand<font color="#E5E5E5"> what it</font><font color="#CCCCCC"> does</font><font color="#E5E5E5"> to know</font>

889
00:34:12,089 --> 00:34:16,558
if it's malicious<font color="#E5E5E5"> or not or something</font>

890
00:34:13,589 --> 00:34:17,759
<font color="#E5E5E5">that I can exploit I'm gonna and the way</font>

891
00:34:16,559 --> 00:34:19,470
I'm<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> do that</font><font color="#CCCCCC"> is I'm going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> copy</font>

892
00:34:17,759 --> 00:34:21,329
it<font color="#E5E5E5"> in and I'm gonna use all the</font><font color="#CCCCCC"> macros</font>

893
00:34:19,469 --> 00:34:23,069
<font color="#CCCCCC">that the system is designed to</font><font color="#E5E5E5"> do and</font>

894
00:34:21,329 --> 00:34:24,570
then I'm gonna go look<font color="#E5E5E5"> at</font><font color="#CCCCCC"> it and see</font>

895
00:34:23,070 --> 00:34:27,270
this looked<font color="#CCCCCC"> like what was in the memory</font>

896
00:34:24,570 --> 00:34:28,590
<font color="#E5E5E5">what was in memory</font><font color="#CCCCCC"> to begin</font><font color="#E5E5E5"> with so</font>

897
00:34:27,270 --> 00:34:31,770
something like<font color="#E5E5E5"> this so</font><font color="#CCCCCC"> this is</font><font color="#E5E5E5"> the</font>

898
00:34:28,590 --> 00:34:33,720
source code after I've rewritten it of

899
00:34:31,770 --> 00:34:35,250
<font color="#E5E5E5">this SVC and you'll see when we scroll</font>

900
00:34:33,719 --> 00:34:37,799
<font color="#E5E5E5">down here a little bit that it's</font>

901
00:34:35,250 --> 00:34:39,360
actually using the names<font color="#E5E5E5"> that the system</font>

902
00:34:37,800 --> 00:34:41,580
resolves for these<font color="#E5E5E5"> things so for</font>

903
00:34:39,360 --> 00:34:43,350
instance<font color="#CCCCCC"> there on that</font><font color="#E5E5E5"> war statement</font>

904
00:34:41,580 --> 00:34:45,509
<font color="#E5E5E5">you'll see it doesn't have register</font>

905
00:34:43,350 --> 00:34:48,750
names and addresses anymore<font color="#E5E5E5"> it has</font>

906
00:34:45,510 --> 00:34:51,480
something<font color="#E5E5E5"> called JSC</font><font color="#CCCCCC"> B ops and JSC D off</font>

907
00:34:48,750 --> 00:34:54,030
so JSC<font color="#CCCCCC"> D stands for job</font><font color="#E5E5E5"> step control</font>

908
00:34:51,480 --> 00:34:55,469
block<font color="#E5E5E5"> JSC the ops is a byte in that</font>

909
00:34:54,030 --> 00:34:58,110
control<font color="#E5E5E5"> box this is all well documented</font>

910
00:34:55,469 --> 00:35:00,779
<font color="#CCCCCC">as part of the operating</font><font color="#E5E5E5"> system</font><font color="#CCCCCC"> you can</font>

911
00:34:58,110 --> 00:35:03,360
look all<font color="#E5E5E5"> this up JSC B</font><font color="#CCCCCC"> off is the one</font>

912
00:35:00,780 --> 00:35:05,550
bit<font color="#E5E5E5"> inside that byte that if it's turned</font>

913
00:35:03,360 --> 00:35:07,560
<font color="#E5E5E5">on that is my permission that</font><font color="#CCCCCC"> I need to</font>

914
00:35:05,550 --> 00:35:09,630
be able to execute<font color="#E5E5E5"> a</font><font color="#CCCCCC"> privileged</font>

915
00:35:07,560 --> 00:35:13,980
escalation<font color="#CCCCCC"> or change the</font><font color="#E5E5E5"> processor state</font>

916
00:35:09,630 --> 00:35:15,570
if you will now<font color="#CCCCCC"> when this was found</font><font color="#E5E5E5"> I</font>

917
00:35:13,980 --> 00:35:17,340
wasn't working there at the time<font color="#E5E5E5"> this</font>

918
00:35:15,570 --> 00:35:19,110
has<font color="#CCCCCC"> been a while ago</font><font color="#E5E5E5"> but when this was</font>

919
00:35:17,340 --> 00:35:21,150
found we reported<font color="#E5E5E5"> it to the company who</font>

920
00:35:19,110 --> 00:35:22,920
is no<font color="#CCCCCC"> longer</font><font color="#E5E5E5"> in business but has sold</font>

921
00:35:21,150 --> 00:35:25,260
their IP to someone else and they are

922
00:35:22,920 --> 00:35:27,030
<font color="#E5E5E5">still</font><font color="#CCCCCC"> in business</font><font color="#E5E5E5"> but when we reported</font>

923
00:35:25,260 --> 00:35:28,440
<font color="#CCCCCC">it to them at the time and we</font><font color="#E5E5E5"> explained</font>

924
00:35:27,030 --> 00:35:29,910
this and said look what<font color="#E5E5E5"> you've left</font>

925
00:35:28,440 --> 00:35:31,830
<font color="#CCCCCC">behind here is basically like a</font>

926
00:35:29,910 --> 00:35:34,290
functional<font color="#CCCCCC"> back door</font><font color="#E5E5E5"> and it's not even a</font>

927
00:35:31,830 --> 00:35:36,240
good back door<font color="#E5E5E5"> right it's got the</font>

928
00:35:34,290 --> 00:35:37,560
password hard-coded in memory and what

929
00:35:36,240 --> 00:35:39,990
it does which we'll<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> in a</font>

930
00:35:37,560 --> 00:35:41,759
minute<font color="#E5E5E5"> is kind of horrific like you know</font>

931
00:35:39,990 --> 00:35:43,830
anybody<font color="#E5E5E5"> with with a few years of</font>

932
00:35:41,760 --> 00:35:45,620
<font color="#CCCCCC">experience or 10 minutes</font><font color="#E5E5E5"> and is half way</font>

933
00:35:43,830 --> 00:35:51,090
smart would be able<font color="#E5E5E5"> to figure this out</font>

934
00:35:45,620 --> 00:35:53,460
and they said yep yeah

935
00:35:51,090 --> 00:35:55,730
that's how we built it<font color="#E5E5E5"> it's doing</font><font color="#CCCCCC"> what</font>

936
00:35:53,460 --> 00:35:58,080
it meant<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be but what it</font><font color="#E5E5E5"> meant to do</font>

937
00:35:55,730 --> 00:36:01,350
this is<font color="#E5E5E5"> kind of a cultural</font><font color="#CCCCCC"> problem</font>

938
00:35:58,080 --> 00:36:03,390
because there isn't them the reason I

939
00:36:01,350 --> 00:36:05,790
have the job<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I do is</font><font color="#CCCCCC"> because there</font>

940
00:36:03,390 --> 00:36:08,580
<font color="#CCCCCC">isn't</font><font color="#E5E5E5"> the hacker ethos the pentesting</font>

941
00:36:05,790 --> 00:36:10,110
mindset<font color="#CCCCCC"> doesn't</font><font color="#E5E5E5"> exist in a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> these</font>

942
00:36:08,580 --> 00:36:11,880
places<font color="#CCCCCC"> so there's nobody holding these</font>

943
00:36:10,110 --> 00:36:13,950
<font color="#CCCCCC">people in check there's nobody telling</font>

944
00:36:11,880 --> 00:36:16,980
them which<font color="#CCCCCC"> you think you wouldn't have</font>

945
00:36:13,950 --> 00:36:20,160
to but there's this whole security<font color="#CCCCCC"> by</font>

946
00:36:16,980 --> 00:36:22,140
obscurity<font color="#E5E5E5"> feeling where nobody's telling</font>

947
00:36:20,160 --> 00:36:24,480
<font color="#E5E5E5">them hey you shouldn't leave a gaping</font>

948
00:36:22,140 --> 00:36:28,040
hole of a<font color="#CCCCCC"> backdoor on</font><font color="#E5E5E5"> production systems</font>

949
00:36:24,480 --> 00:36:28,040
at customer sites that's irresponsible

950
00:36:28,460 --> 00:36:33,660
<font color="#E5E5E5">so that's why I have a job</font><font color="#CCCCCC"> there's an</font>

951
00:36:32,160 --> 00:36:36,109
easier<font color="#E5E5E5"> way to go</font><font color="#CCCCCC"> about this there's a</font>

952
00:36:33,660 --> 00:36:38,930
friend of<font color="#E5E5E5"> mine named IU who</font>

953
00:36:36,110 --> 00:36:40,820
was<font color="#E5E5E5"> going to</font><font color="#CCCCCC"> present here last year but</font>

954
00:36:38,930 --> 00:36:42,890
<font color="#E5E5E5">he couldn't make it over</font><font color="#CCCCCC"> couldn't</font><font color="#E5E5E5"> get</font>

955
00:36:40,820 --> 00:36:46,280
into the<font color="#CCCCCC"> country but presented</font><font color="#E5E5E5"> it black</font>

956
00:36:42,890 --> 00:36:48,350
<font color="#E5E5E5">at Europe</font><font color="#CCCCCC"> but he</font><font color="#E5E5E5"> basically has a tool</font>

957
00:36:46,280 --> 00:36:50,410
that<font color="#E5E5E5"> will just go through</font><font color="#CCCCCC"> and search</font><font color="#E5E5E5"> all</font>

958
00:36:48,350 --> 00:36:53,200
the<font color="#CCCCCC"> SV C's in memory search all the</font>

959
00:36:50,410 --> 00:36:57,170
strings of bytes<font color="#E5E5E5"> and look for</font>

960
00:36:53,200 --> 00:37:00,169
<font color="#E5E5E5">particularly suspicious</font><font color="#CCCCCC"> codes of bytes</font>

961
00:36:57,170 --> 00:37:01,580
it's just a regular<font color="#CCCCCC"> expression and if it</font>

962
00:37:00,170 --> 00:37:02,870
finds<font color="#E5E5E5"> it then it will kick it</font><font color="#CCCCCC"> out and</font>

963
00:37:01,580 --> 00:37:05,120
say hey you<font color="#CCCCCC"> should maybe have a look</font><font color="#E5E5E5"> at</font>

964
00:37:02,870 --> 00:37:06,650
this this<font color="#E5E5E5"> is kind of</font><font color="#CCCCCC"> suspicious</font><font color="#E5E5E5"> and then</font>

965
00:37:05,120 --> 00:37:08,690
you can go<font color="#E5E5E5"> through the</font><font color="#CCCCCC"> whole process</font><font color="#E5E5E5"> of</font>

966
00:37:06,650 --> 00:37:10,280
<font color="#E5E5E5">disassembling it or whatever but it's a</font>

967
00:37:08,690 --> 00:37:12,470
quick<font color="#CCCCCC"> and dirty way I use it all the</font>

968
00:37:10,280 --> 00:37:15,080
time<font color="#CCCCCC"> on</font><font color="#E5E5E5"> customer systems to see if they</font>

969
00:37:12,470 --> 00:37:17,680
have anything that<font color="#CCCCCC"> looks suspicious and</font>

970
00:37:15,080 --> 00:37:21,670
it does it does a pretty<font color="#E5E5E5"> good job</font><font color="#CCCCCC"> so</font>

971
00:37:17,680 --> 00:37:25,190
<font color="#CCCCCC">back to this back to</font><font color="#E5E5E5"> this vendor SVC</font>

972
00:37:21,670 --> 00:37:27,410
<font color="#E5E5E5">this magic SVC</font><font color="#CCCCCC"> it turns out this thing</font>

973
00:37:25,190 --> 00:37:30,080
has a couple of different<font color="#CCCCCC"> uses it does a</font>

974
00:37:27,410 --> 00:37:32,960
<font color="#CCCCCC">couple</font><font color="#E5E5E5"> different things</font><font color="#CCCCCC"> and it</font><font color="#E5E5E5"> is magic</font>

975
00:37:30,080 --> 00:37:34,430
<font color="#CCCCCC">when I tell you about this you'll be I'm</font>

976
00:37:32,960 --> 00:37:38,090
pretty sure you'll<font color="#CCCCCC"> agree with</font><font color="#E5E5E5"> me</font><font color="#CCCCCC"> that</font>

977
00:37:34,430 --> 00:37:39,470
it's<font color="#CCCCCC"> magic you call this SVC and in</font>

978
00:37:38,090 --> 00:37:41,240
addition<font color="#E5E5E5"> to the super secret password</font>

979
00:37:39,470 --> 00:37:43,490
the one<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> hard coded and stored</font>

980
00:37:41,240 --> 00:37:45,200
unencrypted in memory<font color="#E5E5E5"> you pass it</font>

981
00:37:43,490 --> 00:37:47,540
another<font color="#CCCCCC"> argument the second argument can</font>

982
00:37:45,200 --> 00:37:50,470
<font color="#CCCCCC">be one</font><font color="#E5E5E5"> of three values</font><font color="#CCCCCC"> if you pass it a</font>

983
00:37:47,540 --> 00:37:54,200
four it flips this<font color="#E5E5E5"> jstv bit on and</font>

984
00:37:50,470 --> 00:37:56,629
basically<font color="#E5E5E5"> your address space</font><font color="#CCCCCC"> can now</font>

985
00:37:54,200 --> 00:37:59,240
execute<font color="#E5E5E5"> the command to move yourself</font>

986
00:37:56,630 --> 00:38:01,790
<font color="#E5E5E5">from problem state and</font><font color="#CCCCCC"> supervisor</font><font color="#E5E5E5"> state</font>

987
00:37:59,240 --> 00:38:03,979
<font color="#CCCCCC">PHP zero</font><font color="#E5E5E5"> if you pass it an eight it</font>

988
00:38:01,790 --> 00:38:05,090
flips<font color="#E5E5E5"> that bit off so you don't want it</font>

989
00:38:03,980 --> 00:38:09,590
<font color="#E5E5E5">if you don't want to leave it</font><font color="#CCCCCC"> on you can</font>

990
00:38:05,090 --> 00:38:11,390
<font color="#E5E5E5">flip it off if you pass</font><font color="#CCCCCC"> it a</font><font color="#E5E5E5"> zero if you</font>

991
00:38:09,590 --> 00:38:12,680
pass it<font color="#CCCCCC"> a zero you can set the</font><font color="#E5E5E5"> program</font>

992
00:38:11,390 --> 00:38:14,150
status<font color="#CCCCCC"> where the PSW</font>

993
00:38:12,680 --> 00:38:16,100
you'll remember<font color="#E5E5E5"> that was like the</font>

994
00:38:14,150 --> 00:38:18,770
instruction pointer and some flags<font color="#CCCCCC"> to</font>

995
00:38:16,100 --> 00:38:20,180
anything you<font color="#CCCCCC"> want</font><font color="#E5E5E5"> so basically it's like</font>

996
00:38:18,770 --> 00:38:21,980
<font color="#E5E5E5">a buffer overflow without all the</font>

997
00:38:20,180 --> 00:38:23,810
problem<font color="#E5E5E5"> right you just pass it an</font>

998
00:38:21,980 --> 00:38:26,300
address<font color="#CCCCCC"> and</font><font color="#E5E5E5"> it just jumps to</font><font color="#CCCCCC"> that</font>

999
00:38:23,810 --> 00:38:27,410
address<font color="#E5E5E5"> in a fully authorized mode so</font>

1000
00:38:26,300 --> 00:38:29,300
this is<font color="#E5E5E5"> awesome</font>

1001
00:38:27,410 --> 00:38:32,029
right this is fantastic it's just a

1002
00:38:29,300 --> 00:38:34,550
handful<font color="#E5E5E5"> of lines of code</font><font color="#CCCCCC"> this is what</font>

1003
00:38:32,030 --> 00:38:35,510
that looks like in a debugger so I put

1004
00:38:34,550 --> 00:38:41,660
this in the debugger what you're gonna

1005
00:38:35,510 --> 00:38:43,220
see is<font color="#E5E5E5"> it calls this SVC</font><font color="#CCCCCC"> fvc 241</font><font color="#E5E5E5"> when it</font>

1006
00:38:41,660 --> 00:38:45,170
comes back<font color="#CCCCCC"> I issued the</font><font color="#E5E5E5"> command to put</font>

1007
00:38:43,220 --> 00:38:47,620
me in a supervisor<font color="#CCCCCC"> state</font><font color="#E5E5E5"> just real quick</font>

1008
00:38:45,170 --> 00:38:49,790
to<font color="#E5E5E5"> show you what</font><font color="#CCCCCC"> that looks like from</font>

1009
00:38:47,620 --> 00:38:50,089
from a<font color="#E5E5E5"> debugger point of view when</font>

1010
00:38:49,790 --> 00:38:51,020
<font color="#E5E5E5">you're</font>

1011
00:38:50,090 --> 00:38:55,070
when you're<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> going through this</font>

1012
00:38:51,020 --> 00:38:56,990
<font color="#E5E5E5">stuff so this is my debugger I'm gonna</font>

1013
00:38:55,070 --> 00:39:00,770
launch a cassette a couple<font color="#CCCCCC"> breakpoints</font>

1014
00:38:56,990 --> 00:39:03,020
<font color="#CCCCCC">one right before I issue the SVC 2:41</font>

1015
00:39:00,770 --> 00:39:08,000
command<font color="#E5E5E5"> this is I'm using it in the mode</font>

1016
00:39:03,020 --> 00:39:10,070
<font color="#CCCCCC">for so flip on my JSC</font><font color="#E5E5E5"> be bit</font><font color="#CCCCCC"> and the</font>

1017
00:39:08,000 --> 00:39:12,080
second<font color="#CCCCCC"> breakpoint I'm</font><font color="#E5E5E5"> gonna stop it</font>

1018
00:39:10,070 --> 00:39:13,640
<font color="#CCCCCC">right when I issue the command to</font>

1019
00:39:12,080 --> 00:39:16,490
actually move myself<font color="#CCCCCC"> from supervisor</font>

1020
00:39:13,640 --> 00:39:20,379
<font color="#E5E5E5">state to profit from excuse me problems</font>

1021
00:39:16,490 --> 00:39:20,379
take supervisor state<font color="#E5E5E5"> key eight key zero</font>

1022
00:39:22,210 --> 00:39:29,630
so there we are<font color="#CCCCCC"> stop right on that</font><font color="#E5E5E5"> and</font>

1023
00:39:27,050 --> 00:39:32,750
now you can<font color="#CCCCCC"> see that we're in</font><font color="#E5E5E5"> supervisor</font>

1024
00:39:29,630 --> 00:39:36,560
<font color="#E5E5E5">state so super easy only</font><font color="#CCCCCC"> a couple lines</font>

1025
00:39:32,750 --> 00:39:38,660
of<font color="#E5E5E5"> code</font><font color="#CCCCCC"> to get that point</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> then what</font>

1026
00:39:36,560 --> 00:39:40,460
now it's important and<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> a</font>

1027
00:39:38,660 --> 00:39:44,960
distinction that that you might<font color="#E5E5E5"> miss if</font>

1028
00:39:40,460 --> 00:39:46,760
you're not<font color="#E5E5E5"> following along entirely or</font>

1029
00:39:44,960 --> 00:39:48,740
even if you are because it's a lot<font color="#CCCCCC"> of</font>

1030
00:39:46,760 --> 00:39:51,530
stuff in a short<font color="#CCCCCC"> period of time</font><font color="#E5E5E5"> but this</font>

1031
00:39:48,740 --> 00:39:53,720
only is a<font color="#E5E5E5"> CPU level</font>

1032
00:39:51,530 --> 00:39:56,240
privilege that<font color="#E5E5E5"> I've changed</font><font color="#CCCCCC"> so I have</font>

1033
00:39:53,720 --> 00:39:58,580
changed<font color="#CCCCCC"> the CPU to say hey</font><font color="#E5E5E5"> this user</font>

1034
00:39:56,240 --> 00:40:00,709
<font color="#E5E5E5">this users address space</font><font color="#CCCCCC"> can now execute</font>

1035
00:39:58,580 --> 00:40:02,150
any of the CPUs instruction<font color="#E5E5E5"> but we've</font>

1036
00:40:00,710 --> 00:40:04,850
still<font color="#E5E5E5"> got</font><font color="#CCCCCC"> an operating system</font><font color="#E5E5E5"> in front</font>

1037
00:40:02,150 --> 00:40:07,070
of<font color="#E5E5E5"> that and so my user is still contain</font>

1038
00:40:04,850 --> 00:40:08,900
<font color="#E5E5E5">constrained by the security protections</font>

1039
00:40:07,070 --> 00:40:11,450
of<font color="#CCCCCC"> the operating system itself just</font>

1040
00:40:08,900 --> 00:40:13,430
<font color="#E5E5E5">because I'm able to now read any memory</font>

1041
00:40:11,450 --> 00:40:14,799
and<font color="#E5E5E5"> execute any CPU level command</font>

1042
00:40:13,430 --> 00:40:18,290
doesn't mean I'm able<font color="#CCCCCC"> to execute</font><font color="#E5E5E5"> any</font>

1043
00:40:14,800 --> 00:40:20,960
z/os level<font color="#E5E5E5"> command but since I can write</font>

1044
00:40:18,290 --> 00:40:23,420
any place in memory<font color="#E5E5E5"> I can now</font><font color="#CCCCCC"> start</font>

1045
00:40:20,960 --> 00:40:24,950
flipping bits in my<font color="#E5E5E5"> own address space</font><font color="#CCCCCC"> to</font>

1046
00:40:23,420 --> 00:40:27,130
trick the operating system into thinking

1047
00:40:24,950 --> 00:40:29,509
<font color="#CCCCCC">that</font><font color="#E5E5E5"> I am allowed to do that</font>

1048
00:40:27,130 --> 00:40:31,700
so we go back<font color="#E5E5E5"> in here</font><font color="#CCCCCC"> and the next</font><font color="#E5E5E5"> thing</font>

1049
00:40:29,510 --> 00:40:34,310
<font color="#CCCCCC">I do after I go to supervisor state is I</font>

1050
00:40:31,700 --> 00:40:36,589
start modifying bits in<font color="#CCCCCC"> my memory this</font>

1051
00:40:34,310 --> 00:40:41,000
system runs<font color="#E5E5E5"> rack</font><font color="#CCCCCC"> F rack F is the</font>

1052
00:40:36,590 --> 00:40:42,470
security security manager for for z/os

1053
00:40:41,000 --> 00:40:45,310
on this<font color="#E5E5E5"> system there's a couple of other</font>

1054
00:40:42,470 --> 00:40:47,299
products but this one runs<font color="#E5E5E5"> rack F and</font>

1055
00:40:45,310 --> 00:40:50,630
basically I'm flipping the bits in my

1056
00:40:47,300 --> 00:40:53,300
<font color="#E5E5E5">memory in a in a data area called the AC</font>

1057
00:40:50,630 --> 00:40:55,220
EE<font color="#E5E5E5"> to tell the system</font><font color="#CCCCCC"> if I try</font><font color="#E5E5E5"> to run a</font>

1058
00:40:53,300 --> 00:40:57,410
privileged command<font color="#E5E5E5"> or view a data set</font>

1059
00:40:55,220 --> 00:40:59,060
that<font color="#E5E5E5"> I don't have</font><font color="#CCCCCC"> access to</font><font color="#E5E5E5"> it checks a</font>

1060
00:40:57,410 --> 00:41:00,770
few things<font color="#CCCCCC"> there's a list of</font><font color="#E5E5E5"> things that</font>

1061
00:40:59,060 --> 00:41:02,480
checks to<font color="#CCCCCC"> see decide if it's going to</font>

1062
00:41:00,770 --> 00:41:03,550
give you access<font color="#E5E5E5"> to that command or</font>

1063
00:41:02,480 --> 00:41:05,140
access to<font color="#E5E5E5"> that data</font>

1064
00:41:03,550 --> 00:41:07,810
but the first thing<font color="#E5E5E5"> on both of those</font>

1065
00:41:05,140 --> 00:41:09,460
lists is does this person<font color="#E5E5E5"> system special</font>

1066
00:41:07,810 --> 00:41:11,470
do they have operations<font color="#E5E5E5"> and those are</font>

1067
00:41:09,460 --> 00:41:14,350
just bits<font color="#CCCCCC"> those are just two bits in</font>

1068
00:41:11,470 --> 00:41:14,799
your<font color="#E5E5E5"> memory</font><font color="#CCCCCC"> for your address</font><font color="#E5E5E5"> space if</font>

1069
00:41:14,350 --> 00:41:17,680
you

1070
00:41:14,800 --> 00:41:19,720
<font color="#CCCCCC">they're obviously read-only unless you</font>

1071
00:41:17,680 --> 00:41:21,970
have<font color="#CCCCCC"> all right supervisor state</font><font color="#E5E5E5"> so now</font>

1072
00:41:19,720 --> 00:41:25,330
<font color="#CCCCCC">we've got supervisor state zero</font><font color="#E5E5E5"> we can</font>

1073
00:41:21,970 --> 00:41:27,640
<font color="#E5E5E5">flip these bits</font><font color="#CCCCCC"> and now I can run I can</font>

1074
00:41:25,330 --> 00:41:28,810
turn the supervisor<font color="#E5E5E5"> state off and I can</font>

1075
00:41:27,640 --> 00:41:30,400
use the<font color="#E5E5E5"> operating system in all the</font>

1076
00:41:28,810 --> 00:41:32,140
commands in<font color="#E5E5E5"> the operating system</font><font color="#CCCCCC"> to give</font>

1077
00:41:30,400 --> 00:41:35,950
myself<font color="#E5E5E5"> all the privileges I need and go</font>

1078
00:41:32,140 --> 00:41:38,859
forth the<font color="#CCCCCC"> jumpring bit is</font><font color="#E5E5E5"> really pretty</font>

1079
00:41:35,950 --> 00:41:42,669
cool<font color="#CCCCCC"> because that was</font><font color="#E5E5E5"> the one feature of</font>

1080
00:41:38,860 --> 00:41:44,740
<font color="#CCCCCC">this SVC</font><font color="#E5E5E5"> feature</font><font color="#CCCCCC"> the jumpring that is</font>

1081
00:41:42,670 --> 00:41:47,710
pretty<font color="#E5E5E5"> cool so wrote a write a program</font>

1082
00:41:44,740 --> 00:41:51,609
<font color="#E5E5E5">to call this SVC and I'm gonna pass</font><font color="#CCCCCC"> it</font>

1083
00:41:47,710 --> 00:41:54,490
an address<font color="#E5E5E5"> of a of this reverse shell</font>

1084
00:41:51,610 --> 00:41:56,350
that we built and have it<font color="#CCCCCC"> jump to it</font><font color="#E5E5E5"> and</font>

1085
00:41:54,490 --> 00:41:57,879
when I built it<font color="#CCCCCC"> I just built</font><font color="#E5E5E5"> this</font>

1086
00:41:56,350 --> 00:42:01,210
function<font color="#CCCCCC"> that calls the reverse shell</font>

1087
00:41:57,880 --> 00:42:02,950
<font color="#E5E5E5">into</font><font color="#CCCCCC"> the source code but it's an orphan</font>

1088
00:42:01,210 --> 00:42:04,660
function there's no way in<font color="#E5E5E5"> the source</font>

1089
00:42:02,950 --> 00:42:06,939
code to<font color="#CCCCCC"> actually get to this function</font>

1090
00:42:04,660 --> 00:42:09,790
<font color="#CCCCCC">you can't it isn't called - it isn't</font>

1091
00:42:06,940 --> 00:42:11,560
<font color="#E5E5E5">branch</font><font color="#CCCCCC"> to anywhere just</font><font color="#E5E5E5"> to prove</font><font color="#CCCCCC"> that</font>

1092
00:42:09,790 --> 00:42:12,880
when I'm<font color="#CCCCCC"> calling this SVC and passing in</font>

1093
00:42:11,560 --> 00:42:14,500
an<font color="#CCCCCC"> address</font><font color="#E5E5E5"> and we put the breakpoint</font>

1094
00:42:12,880 --> 00:42:20,140
back on this<font color="#CCCCCC"> function and</font><font color="#E5E5E5"> it lands there</font>

1095
00:42:14,500 --> 00:42:21,670
that that's<font color="#E5E5E5"> how</font><font color="#CCCCCC"> it got there so what you</font>

1096
00:42:20,140 --> 00:42:25,750
see here<font color="#CCCCCC"> is this is the</font><font color="#E5E5E5"> assembler source</font>

1097
00:42:21,670 --> 00:42:28,420
code<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> gonna do the branch to the</font><font color="#CCCCCC"> I'm</font>

1098
00:42:25,750 --> 00:42:31,120
gonna<font color="#CCCCCC"> do</font><font color="#E5E5E5"> a branch to call this magic SVC</font>

1099
00:42:28,420 --> 00:42:34,270
<font color="#E5E5E5">I'm gonna pass it the address of my</font>

1100
00:42:31,120 --> 00:42:35,980
<font color="#CCCCCC">shellcode and if we look down</font><font color="#E5E5E5"> here at</font>

1101
00:42:34,270 --> 00:42:38,820
the parameters<font color="#E5E5E5"> that I'm gonna that I'm</font>

1102
00:42:35,980 --> 00:42:41,770
gonna pass when I call that SVC<font color="#CCCCCC"> 2:41</font>

1103
00:42:38,820 --> 00:42:44,320
down in the bottom you'll see<font color="#E5E5E5"> I'm</font>

1104
00:42:41,770 --> 00:42:46,300
passing it my<font color="#CCCCCC"> super-secret and I am</font>

1105
00:42:44,320 --> 00:42:48,190
passing<font color="#CCCCCC"> it right there and I'm passing</font>

1106
00:42:46,300 --> 00:42:52,900
it a<font color="#E5E5E5"> number</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> and I'm passing</font><font color="#CCCCCC"> it the</font>

1107
00:42:48,190 --> 00:42:55,990
<font color="#CCCCCC">address of my shellcode so then there's</font>

1108
00:42:52,900 --> 00:42:57,910
a function right<font color="#E5E5E5"> there in the in the</font>

1109
00:42:55,990 --> 00:42:59,859
source code<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is that shellcode</font>

1110
00:42:57,910 --> 00:43:01,330
function and like I said<font color="#E5E5E5"> there's no way</font>

1111
00:42:59,860 --> 00:43:03,100
there's<font color="#E5E5E5"> no</font><font color="#CCCCCC"> way to branch to this if we</font>

1112
00:43:01,330 --> 00:43:04,540
<font color="#E5E5E5">end up here it's because we did a</font>

1113
00:43:03,100 --> 00:43:06,960
deliberate modification of the

1114
00:43:04,540 --> 00:43:10,450
instruction pointer<font color="#E5E5E5"> and we ended up here</font>

1115
00:43:06,960 --> 00:43:13,960
that shouldn't happen<font color="#E5E5E5"> so this is what</font>

1116
00:43:10,450 --> 00:43:16,319
that<font color="#CCCCCC"> looks like in a debugger although</font>

1117
00:43:13,960 --> 00:43:19,570
we'll put<font color="#E5E5E5"> it all together</font>

1118
00:43:16,320 --> 00:43:22,060
so they set a<font color="#E5E5E5"> breakpoint again before</font>

1119
00:43:19,570 --> 00:43:24,700
the SVC<font color="#CCCCCC"> 2:41 call and I'm gonna set a</font>

1120
00:43:22,060 --> 00:43:27,730
breakpoint at this<font color="#E5E5E5"> shellcode orphan</font>

1121
00:43:24,700 --> 00:43:30,129
function<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> gonna run run it a</font><font color="#CCCCCC"> couple</font>

1122
00:43:27,730 --> 00:43:31,570
of times<font color="#E5E5E5"> and what you'll see</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> after I</font>

1123
00:43:30,130 --> 00:43:35,260
<font color="#E5E5E5">run it the second</font><font color="#CCCCCC"> time here that it</font>

1124
00:43:31,570 --> 00:43:38,170
basically<font color="#E5E5E5"> lands at the shellcode</font>

1125
00:43:35,260 --> 00:43:40,120
function right before it calls the

1126
00:43:38,170 --> 00:43:44,290
reverse shell so here we are the

1127
00:43:40,120 --> 00:43:47,650
instruction pointer is now set to the to

1128
00:43:44,290 --> 00:43:51,279
call the reverse shell and for<font color="#E5E5E5"> those</font><font color="#CCCCCC"> of</font>

1129
00:43:47,650 --> 00:43:53,440
you<font color="#CCCCCC"> keeping track</font><font color="#E5E5E5"> at home</font><font color="#CCCCCC"> I am also</font>

1130
00:43:51,280 --> 00:43:55,360
<font color="#CCCCCC">running it's kind of hard to</font><font color="#E5E5E5"> read but</font>

1131
00:43:53,440 --> 00:43:56,740
<font color="#E5E5E5">the PSW down there basically indicates</font>

1132
00:43:55,360 --> 00:43:58,660
<font color="#E5E5E5">that I'm also running in the supervisor</font>

1133
00:43:56,740 --> 00:44:00,189
<font color="#CCCCCC">state</font><font color="#E5E5E5"> so not only am</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> going to</font><font color="#CCCCCC"> get this</font>

1134
00:43:58,660 --> 00:44:01,720
to kick off a reverse<font color="#CCCCCC"> shell for me but</font>

1135
00:44:00,190 --> 00:44:03,880
it's gonna be<font color="#CCCCCC"> a fully</font><font color="#E5E5E5"> authorized</font><font color="#CCCCCC"> for</font>

1136
00:44:01,720 --> 00:44:05,290
<font color="#CCCCCC">burst shell so when you want to</font><font color="#E5E5E5"> put this</font>

1137
00:44:03,880 --> 00:44:06,910
all together<font color="#CCCCCC"> obviously if I'm on a</font>

1138
00:44:05,290 --> 00:44:08,670
client<font color="#CCCCCC"> side if I'm</font><font color="#E5E5E5"> testing this out if I</font>

1139
00:44:06,910 --> 00:44:10,960
find this I'm<font color="#E5E5E5"> not</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> do a bunch of</font>

1140
00:44:08,670 --> 00:44:12,070
you know<font color="#E5E5E5"> the disassembler and the</font>

1141
00:44:10,960 --> 00:44:13,300
stepping<font color="#CCCCCC"> through this I'm gonna wrap</font>

1142
00:44:12,070 --> 00:44:15,460
this all up<font color="#E5E5E5"> into one tight little</font>

1143
00:44:13,300 --> 00:44:17,170
package<font color="#CCCCCC"> usually</font><font color="#E5E5E5"> I have an ID at this</font>

1144
00:44:15,460 --> 00:44:20,710
point that's<font color="#E5E5E5"> not privileged maybe can't</font>

1145
00:44:17,170 --> 00:44:23,260
submit<font color="#E5E5E5"> jobs and I want</font><font color="#CCCCCC"> obviously more</font>

1146
00:44:20,710 --> 00:44:25,960
than<font color="#E5E5E5"> that so what you'll see on the next</font>

1147
00:44:23,260 --> 00:44:29,020
<font color="#CCCCCC">one is basically unprivileged user</font><font color="#E5E5E5"> bad</font>

1148
00:44:25,960 --> 00:44:30,580
<font color="#E5E5E5">guy logs in</font><font color="#CCCCCC"> tries</font><font color="#E5E5E5"> the first thing you</font>

1149
00:44:29,020 --> 00:44:34,090
usually try when you get creds in a box

1150
00:44:30,580 --> 00:44:36,360
<font color="#CCCCCC">Who am I what do I have what can I do</font>

1151
00:44:34,090 --> 00:44:39,130
he's nobody<font color="#E5E5E5"> he can't really</font><font color="#CCCCCC"> do anything</font>

1152
00:44:36,360 --> 00:44:41,350
calls this binary now this all happens

1153
00:44:39,130 --> 00:44:43,000
<font color="#E5E5E5">in memory so it is probably</font><font color="#CCCCCC"> not going to</font>

1154
00:44:41,350 --> 00:44:45,190
<font color="#E5E5E5">set off any alarms I can tell you it's</font>

1155
00:44:43,000 --> 00:44:46,510
<font color="#E5E5E5">not</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> set off any alarms</font><font color="#CCCCCC"> because</font>

1156
00:44:45,190 --> 00:44:48,280
<font color="#E5E5E5">this is all happening in memory when you</font>

1157
00:44:46,510 --> 00:44:50,230
log out if you don't execute any

1158
00:44:48,280 --> 00:44:52,540
operating<font color="#CCCCCC"> system-level</font><font color="#E5E5E5"> privileged</font>

1159
00:44:50,230 --> 00:44:53,530
<font color="#E5E5E5">commands all these bits are just being</font>

1160
00:44:52,540 --> 00:44:56,860
flipped in your address<font color="#CCCCCC"> base when</font><font color="#E5E5E5"> you</font>

1161
00:44:53,530 --> 00:44:57,940
log out they're gone right<font color="#E5E5E5"> so in order</font>

1162
00:44:56,860 --> 00:44:59,530
to<font color="#E5E5E5"> catch this they would have</font><font color="#CCCCCC"> to be</font>

1163
00:44:57,940 --> 00:45:01,180
monitoring<font color="#E5E5E5"> a whole lot of address spaces</font>

1164
00:44:59,530 --> 00:45:04,180
and a whole lot of<font color="#E5E5E5"> changes basically</font>

1165
00:45:01,180 --> 00:45:07,109
<font color="#CCCCCC">real-time so that's what it</font><font color="#E5E5E5"> looks like</font>

1166
00:45:04,180 --> 00:45:10,330
so left hand<font color="#E5E5E5"> side</font><font color="#CCCCCC"> is my TSO session</font>

1167
00:45:07,110 --> 00:45:12,400
where<font color="#CCCCCC"> i'm logging</font><font color="#E5E5E5"> in as the bad guy</font>

1168
00:45:10,330 --> 00:45:16,000
<font color="#CCCCCC">whose user ID is bad guy would think</font>

1169
00:45:12,400 --> 00:45:17,140
they'd be easy to catch that way<font color="#E5E5E5"> and I'm</font>

1170
00:45:16,000 --> 00:45:19,360
gonna I'm gonna<font color="#E5E5E5"> do a check a couple</font>

1171
00:45:17,140 --> 00:45:20,950
<font color="#CCCCCC">things I'm gonna see if I have if I can</font>

1172
00:45:19,360 --> 00:45:24,310
look at the user the administrator user

1173
00:45:20,950 --> 00:45:26,200
Chad<font color="#E5E5E5"> can I change</font><font color="#CCCCCC"> my ID</font><font color="#E5E5E5"> right away not</font>

1174
00:45:24,310 --> 00:45:27,880
authorized<font color="#CCCCCC"> to do that I'm just</font><font color="#E5E5E5"> gonna</font>

1175
00:45:26,200 --> 00:45:28,750
<font color="#E5E5E5">call this one</font><font color="#CCCCCC"> program and</font><font color="#E5E5E5"> as soon as I</font>

1176
00:45:27,880 --> 00:45:30,130
do

1177
00:45:28,750 --> 00:45:31,690
thing you'll notice is<font color="#E5E5E5"> the reverse shell</font>

1178
00:45:30,130 --> 00:45:33,700
that pops up<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> hand side and</font>

1179
00:45:31,690 --> 00:45:35,710
then the second thing<font color="#E5E5E5"> is I'm gonna start</font>

1180
00:45:33,700 --> 00:45:39,450
<font color="#E5E5E5">retyping these commands and now I can</font>

1181
00:45:35,710 --> 00:45:43,870
list Chad now I can change<font color="#E5E5E5"> my own user</font>

1182
00:45:39,450 --> 00:45:46,240
<font color="#E5E5E5">to something more something</font><font color="#CCCCCC"> more with</font>

1183
00:45:43,870 --> 00:45:47,560
more privilege and on the<font color="#E5E5E5"> right hand</font>

1184
00:45:46,240 --> 00:45:50,529
<font color="#CCCCCC">side</font><font color="#E5E5E5"> you'll see that</font><font color="#CCCCCC"> I've got a shell</font>

1185
00:45:47,560 --> 00:45:54,009
and<font color="#CCCCCC"> that that shell is also in fact</font>

1186
00:45:50,530 --> 00:45:55,860
authorized<font color="#CCCCCC"> so z/os shell</font><font color="#E5E5E5"> and I can run</font>

1187
00:45:54,010 --> 00:45:57,910
commands on<font color="#CCCCCC"> there</font>

1188
00:45:55,860 --> 00:45:59,740
display my user<font color="#CCCCCC"> and things like</font><font color="#E5E5E5"> that</font>

1189
00:45:57,910 --> 00:46:01,420
that<font color="#CCCCCC"> I would not</font><font color="#E5E5E5"> have had the ability</font><font color="#CCCCCC"> to</font>

1190
00:45:59,740 --> 00:46:04,569
do you can see that I've<font color="#CCCCCC"> got</font><font color="#E5E5E5"> system</font>

1191
00:46:01,420 --> 00:46:07,780
special and all that<font color="#CCCCCC"> good stuff so what</font>

1192
00:46:04,570 --> 00:46:12,310
what<font color="#CCCCCC"> just happened so as a non</font>

1193
00:46:07,780 --> 00:46:14,200
privileged user because of a very very

1194
00:46:12,310 --> 00:46:16,029
<font color="#E5E5E5">irresponsible piece of vendor code that</font>

1195
00:46:14,200 --> 00:46:17,759
was left behind<font color="#CCCCCC"> or could have been user</font>

1196
00:46:16,030 --> 00:46:20,140
code but in this case it was vendor code

1197
00:46:17,760 --> 00:46:22,090
as a<font color="#E5E5E5"> is a non privileged user I</font>

1198
00:46:20,140 --> 00:46:26,620
basically just<font color="#E5E5E5"> wrote a fairly</font><font color="#CCCCCC"> simpler</font>

1199
00:46:22,090 --> 00:46:27,940
assembler<font color="#E5E5E5"> program that anybody with you</font>

1200
00:46:26,620 --> 00:46:29,529
know half an ability to write some

1201
00:46:27,940 --> 00:46:32,230
assembly code could absolutely<font color="#E5E5E5"> put that</font>

1202
00:46:29,530 --> 00:46:33,940
together<font color="#E5E5E5"> in short order</font><font color="#CCCCCC"> called it and</font>

1203
00:46:32,230 --> 00:46:36,370
then I ended<font color="#CCCCCC"> up with a privileged TSO</font>

1204
00:46:33,940 --> 00:46:38,620
session as well<font color="#E5E5E5"> as a privileged shell</font><font color="#CCCCCC"> so</font>

1205
00:46:36,370 --> 00:46:41,319
<font color="#E5E5E5">I can analyze both sides of the</font>

1206
00:46:38,620 --> 00:46:42,730
operating system<font color="#CCCCCC"> actual trade data go</font>

1207
00:46:41,320 --> 00:46:45,280
look for<font color="#E5E5E5"> whatever I'm looking</font><font color="#CCCCCC"> for but</font>

1208
00:46:42,730 --> 00:46:50,380
basically it's full-on game over at that

1209
00:46:45,280 --> 00:46:54,970
<font color="#E5E5E5">point</font><font color="#CCCCCC"> all right</font>

1210
00:46:50,380 --> 00:46:56,020
so there's a lot<font color="#E5E5E5"> of stuff for</font><font color="#CCCCCC"> no there's</font>

1211
00:46:54,970 --> 00:46:58,839
a lot of stuff<font color="#E5E5E5"> for</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> there's a lot of</font>

1212
00:46:56,020 --> 00:46:59,860
stuff for<font color="#E5E5E5"> me this is this is what I</font>

1213
00:46:58,840 --> 00:47:01,360
<font color="#E5E5E5">would have you take away from</font><font color="#CCCCCC"> all of</font>

1214
00:46:59,860 --> 00:47:02,890
<font color="#E5E5E5">this if you're not somebody who's gonna</font>

1215
00:47:01,360 --> 00:47:04,090
go dive<font color="#E5E5E5"> into the technical end of this</font>

1216
00:47:02,890 --> 00:47:05,920
if you're somebody who works in an

1217
00:47:04,090 --> 00:47:08,290
enterprise that<font color="#CCCCCC"> has one</font><font color="#E5E5E5"> of these systems</font>

1218
00:47:05,920 --> 00:47:09,970
<font color="#E5E5E5">if you're in the media if you're</font>

1219
00:47:08,290 --> 00:47:11,770
interested in<font color="#E5E5E5"> this if you like having</font>

1220
00:47:09,970 --> 00:47:14,310
<font color="#E5E5E5">money and airplanes</font><font color="#CCCCCC"> that work this is</font>

1221
00:47:11,770 --> 00:47:16,480
what I<font color="#E5E5E5"> would have have you take away</font>

1222
00:47:14,310 --> 00:47:18,220
<font color="#CCCCCC">first of</font><font color="#E5E5E5"> all it's just another computer</font>

1223
00:47:16,480 --> 00:47:20,350
it's a big computer<font color="#E5E5E5"> it's an expensive</font>

1224
00:47:18,220 --> 00:47:22,899
computer<font color="#E5E5E5"> super powerful computer but</font>

1225
00:47:20,350 --> 00:47:24,430
it's just<font color="#E5E5E5"> a computer and I say that not</font>

1226
00:47:22,900 --> 00:47:25,990
to<font color="#E5E5E5"> minimize it but I say</font><font color="#CCCCCC"> that to get</font>

1227
00:47:24,430 --> 00:47:28,000
<font color="#CCCCCC">people to think about it in a way</font><font color="#E5E5E5"> like</font>

1228
00:47:25,990 --> 00:47:30,609
<font color="#E5E5E5">you would think</font><font color="#CCCCCC"> about the you know your</font>

1229
00:47:28,000 --> 00:47:33,430
thermostat your IOT device your PC at

1230
00:47:30,610 --> 00:47:35,230
<font color="#CCCCCC">home</font><font color="#E5E5E5"> your new robot dog that you bought</font>

1231
00:47:33,430 --> 00:47:36,640
all<font color="#E5E5E5"> of those things we know our</font>

1232
00:47:35,230 --> 00:47:39,880
computers<font color="#E5E5E5"> and all those things we know</font>

1233
00:47:36,640 --> 00:47:41,890
are<font color="#CCCCCC"> written by humans</font><font color="#E5E5E5"> and have have</font>

1234
00:47:39,880 --> 00:47:42,580
<font color="#CCCCCC">vulnerabilities in them</font><font color="#E5E5E5"> or operated by</font>

1235
00:47:41,890 --> 00:47:44,529
humans and

1236
00:47:42,580 --> 00:47:48,180
misconfigurations<font color="#CCCCCC"> you need to think</font>

1237
00:47:44,530 --> 00:47:50,590
about<font color="#E5E5E5"> this the same way second thing</font><font color="#CCCCCC"> is</font>

1238
00:47:48,180 --> 00:47:52,390
<font color="#E5E5E5">it's systemically important I'm gonna go</font>

1239
00:47:50,590 --> 00:47:55,510
<font color="#E5E5E5">over that</font><font color="#CCCCCC"> again but it's</font><font color="#E5E5E5"> really freaking</font>

1240
00:47:52,390 --> 00:48:00,490
important to kind<font color="#CCCCCC"> of the world</font><font color="#E5E5E5"> operating</font>

1241
00:47:55,510 --> 00:48:02,650
as we know it there's no excuse for this

1242
00:48:00,490 --> 00:48:05,140
thing to not be a fortress if you forget

1243
00:48:02,650 --> 00:48:07,690
everything<font color="#E5E5E5"> I said understand that this</font>

1244
00:48:05,140 --> 00:48:09,700
<font color="#E5E5E5">thing can be locked down</font><font color="#CCCCCC"> so well that I</font>

1245
00:48:07,690 --> 00:48:12,850
<font color="#E5E5E5">would have no problem</font><font color="#CCCCCC"> dropping one in</font>

1246
00:48:09,700 --> 00:48:14,589
<font color="#CCCCCC">Def Con or</font><font color="#E5E5E5"> on the</font><font color="#CCCCCC"> internet and letting</font>

1247
00:48:12,850 --> 00:48:15,610
<font color="#CCCCCC">people have</font><font color="#E5E5E5"> access</font><font color="#CCCCCC"> to it and use it the</font>

1248
00:48:14,590 --> 00:48:17,740
way<font color="#E5E5E5"> it was meant</font><font color="#CCCCCC"> to be used</font>

1249
00:48:15,610 --> 00:48:20,410
there<font color="#CCCCCC"> are intrusion detection systems</font>

1250
00:48:17,740 --> 00:48:23,109
there's full-blown<font color="#E5E5E5"> inch ingress egress</font>

1251
00:48:20,410 --> 00:48:25,149
firewalls there's something called

1252
00:48:23,110 --> 00:48:27,670
<font color="#CCCCCC">defense manager which can take active</font>

1253
00:48:25,150 --> 00:48:29,590
acts<font color="#E5E5E5"> active action against things that</font>

1254
00:48:27,670 --> 00:48:31,390
<font color="#E5E5E5">things that are attacking it there's a</font>

1255
00:48:29,590 --> 00:48:33,790
<font color="#E5E5E5">million in one different ways to secure</font>

1256
00:48:31,390 --> 00:48:35,080
<font color="#CCCCCC">this thing and lock it down</font><font color="#E5E5E5"> but I'm here</font>

1257
00:48:33,790 --> 00:48:37,000
to tell<font color="#E5E5E5"> you</font><font color="#CCCCCC"> that most of</font><font color="#E5E5E5"> the mainframes</font>

1258
00:48:35,080 --> 00:48:40,150
I run across if not all<font color="#E5E5E5"> of them are not</font>

1259
00:48:37,000 --> 00:48:42,100
and<font color="#E5E5E5"> that has nothing</font><font color="#CCCCCC"> to do</font><font color="#E5E5E5"> with the</font>

1260
00:48:40,150 --> 00:48:43,960
platform's ability to be secured it has

1261
00:48:42,100 --> 00:48:45,910
to do<font color="#E5E5E5"> with neglect it has to do with a</font>

1262
00:48:43,960 --> 00:48:47,260
false sense of security<font color="#CCCCCC"> it has to do</font>

1263
00:48:45,910 --> 00:48:49,720
with<font color="#E5E5E5"> people thinking like do we still</font>

1264
00:48:47,260 --> 00:48:53,290
have mainframes<font color="#E5E5E5"> around isn't that in</font>

1265
00:48:49,720 --> 00:48:54,730
that COBOL you need to enforce<font color="#CCCCCC"> your</font>

1266
00:48:53,290 --> 00:48:56,170
existing policy in<font color="#E5E5E5"> this platform you've</font>

1267
00:48:54,730 --> 00:48:58,810
got<font color="#CCCCCC"> policies</font><font color="#E5E5E5"> say we're</font><font color="#CCCCCC"> gonna Penn test</font>

1268
00:48:56,170 --> 00:49:00,130
we're gonna audit<font color="#CCCCCC"> we're gonna do</font>

1269
00:48:58,810 --> 00:49:02,049
vulnerability management<font color="#E5E5E5"> we're going to</font>

1270
00:49:00,130 --> 00:49:03,370
do patch management<font color="#CCCCCC"> we're gonna do we're</font>

1271
00:49:02,050 --> 00:49:04,570
gonna<font color="#E5E5E5"> have these controls all this stuff</font>

1272
00:49:03,370 --> 00:49:06,930
set<font color="#CCCCCC"> up on this platform you</font><font color="#E5E5E5"> need to do</font>

1273
00:49:04,570 --> 00:49:10,420
that for<font color="#E5E5E5"> this for this platform as well</font>

1274
00:49:06,930 --> 00:49:11,980
<font color="#E5E5E5">get a pen test exploits work here some</font>

1275
00:49:10,420 --> 00:49:13,450
variation but<font color="#CCCCCC"> they're they're</font><font color="#E5E5E5"> gonna work</font>

1276
00:49:11,980 --> 00:49:15,040
here<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we can't keep</font><font color="#E5E5E5"> our vendors</font>

1277
00:49:13,450 --> 00:49:17,140
honest if we<font color="#E5E5E5"> don't have</font><font color="#CCCCCC"> people out</font><font color="#E5E5E5"> doing</font>

1278
00:49:15,040 --> 00:49:20,230
this kind of<font color="#CCCCCC"> research and</font><font color="#E5E5E5"> lastly it's</font>

1279
00:49:17,140 --> 00:49:22,029
not COBOL so that's it thank you<font color="#E5E5E5"> very</font>

1280
00:49:20,230 --> 00:49:24,240
<font color="#E5E5E5">much</font><font color="#CCCCCC"> I think I am</font><font color="#E5E5E5"> right at the end of my</font>

1281
00:49:22,030 --> 00:49:24,240
time

