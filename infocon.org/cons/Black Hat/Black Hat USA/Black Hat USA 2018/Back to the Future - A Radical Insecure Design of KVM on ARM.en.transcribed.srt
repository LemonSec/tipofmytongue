1
00:00:00,030 --> 00:00:04,890
hi<font color="#CCCCCC"> so in this talk we are going to</font>

2
00:00:02,399 --> 00:00:06,960
discuss about<font color="#E5E5E5"> KVM hypervisor or arm</font>

3
00:00:04,890 --> 00:00:10,889
systems<font color="#E5E5E5"> as you know that KVM hypervisor</font>

4
00:00:06,960 --> 00:00:12,509
<font color="#CCCCCC">are the part of linux kernel</font><font color="#E5E5E5"> and so they</font>

5
00:00:10,889 --> 00:00:15,239
are automatically<font color="#CCCCCC"> available to the</font>

6
00:00:12,509 --> 00:00:18,420
devices<font color="#E5E5E5"> in which</font><font color="#CCCCCC"> linux kernel is running</font>

7
00:00:15,240 --> 00:00:20,730
and we know that linux is running in all

8
00:00:18,420 --> 00:00:24,420
sort<font color="#E5E5E5"> of devices from a traffic control</font>

9
00:00:20,730 --> 00:00:26,430
system to self-driving cars to the home

10
00:00:24,420 --> 00:00:28,949
appliances<font color="#E5E5E5"> that we had we have at home</font>

11
00:00:26,430 --> 00:00:32,098
<font color="#E5E5E5">so it may be possible</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> of the</font>

12
00:00:28,949 --> 00:00:34,860
devices<font color="#E5E5E5"> around us will have</font><font color="#CCCCCC"> a VM enabled</font>

13
00:00:32,098 --> 00:00:37,769
on<font color="#E5E5E5"> it as well</font><font color="#CCCCCC"> so in this</font><font color="#E5E5E5"> talk we will</font>

14
00:00:34,860 --> 00:00:40,100
<font color="#CCCCCC">talk about the</font><font color="#E5E5E5"> security for floor using</font>

15
00:00:37,770 --> 00:00:43,980
which it is<font color="#E5E5E5"> possible for an attacker to</font>

16
00:00:40,100 --> 00:00:46,079
gain<font color="#E5E5E5"> a privilege on hypervisor that</font><font color="#CCCCCC"> is</font>

17
00:00:43,980 --> 00:00:50,459
<font color="#E5E5E5">running with a</font><font color="#CCCCCC"> mode privilege level from</font>

18
00:00:46,079 --> 00:00:51,870
a less<font color="#E5E5E5"> privileged kernel mode so before</font>

19
00:00:50,460 --> 00:00:54,210
I<font color="#E5E5E5"> start my talk I would like to</font>

20
00:00:51,870 --> 00:00:58,468
introduce myself so I work for<font color="#CCCCCC"> Samsung</font>

21
00:00:54,210 --> 00:01:00,539
<font color="#CCCCCC">Research America and before joining</font>

22
00:00:58,469 --> 00:01:02,340
Samsung<font color="#E5E5E5"> research America I work for</font>

23
00:01:00,539 --> 00:01:05,460
various<font color="#E5E5E5"> other companies</font><font color="#CCCCCC"> like McAfee</font>

24
00:01:02,340 --> 00:01:09,360
Citrix and bromium<font color="#E5E5E5"> and I've worked in</font>

25
00:01:05,459 --> 00:01:12,509
<font color="#E5E5E5">various areas</font><font color="#CCCCCC"> of security like Volante</font>

26
00:01:09,360 --> 00:01:14,130
<font color="#E5E5E5">research</font><font color="#CCCCCC"> security</font><font color="#E5E5E5"> LC and also I have</font>

27
00:01:12,510 --> 00:01:17,220
architected and developed a<font color="#E5E5E5"> malware</font>

28
00:01:14,130 --> 00:01:19,048
detection<font color="#E5E5E5"> engine for bromium so right</font>

29
00:01:17,220 --> 00:01:22,740
now I'm actively working on<font color="#CCCCCC"> on</font><font color="#E5E5E5"> system</font>

30
00:01:19,049 --> 00:01:26,009
security<font color="#E5E5E5"> and so this paper is</font><font color="#CCCCCC"> one of my</font>

31
00:01:22,740 --> 00:01:27,270
research on<font color="#E5E5E5"> arm system security and the</font>

32
00:01:26,009 --> 00:01:29,340
opinion<font color="#CCCCCC"> that I am sharing with this</font>

33
00:01:27,270 --> 00:01:31,170
paper is my personal<font color="#CCCCCC"> opinion and it may</font>

34
00:01:29,340 --> 00:01:36,689
not<font color="#CCCCCC"> represent the open</font><font color="#E5E5E5"> era</font><font color="#CCCCCC"> I employ</font><font color="#E5E5E5"> just</font>

35
00:01:31,170 --> 00:01:39,570
<font color="#CCCCCC">a disclaimer</font><font color="#E5E5E5"> so so just to give</font><font color="#CCCCCC"> you some</font>

36
00:01:36,689 --> 00:01:42,179
background<font color="#CCCCCC"> about this flaw so I found</font>

37
00:01:39,570 --> 00:01:45,360
this flaw early this year while doing

38
00:01:42,180 --> 00:01:48,659
some research on<font color="#E5E5E5"> arm hypervisors so and</font>

39
00:01:45,360 --> 00:01:51,149
on 25th January<font color="#CCCCCC"> I reported this issue to</font>

40
00:01:48,659 --> 00:01:53,579
the<font color="#CCCCCC"> to Reddit product security team and</font>

41
00:01:51,149 --> 00:01:57,390
with that I provided them<font color="#E5E5E5"> a complete</font>

42
00:01:53,579 --> 00:01:59,969
<font color="#E5E5E5">detailed report and</font><font color="#CCCCCC"> an and exploit code</font>

43
00:01:57,390 --> 00:02:02,820
and<font color="#E5E5E5"> after that we had multiple email</font>

44
00:01:59,969 --> 00:02:04,679
exchanges and I had them understanding

45
00:02:02,820 --> 00:02:06,889
the problem<font color="#E5E5E5"> and finally</font><font color="#CCCCCC"> they understood</font>

46
00:02:04,680 --> 00:02:10,489
the problem<font color="#E5E5E5"> and after</font><font color="#CCCCCC"> that they</font>

47
00:02:06,890 --> 00:02:13,590
escalated<font color="#E5E5E5"> that to the</font><font color="#CCCCCC"> KVM team but this</font>

48
00:02:10,489 --> 00:02:15,480
<font color="#CCCCCC">flaw</font><font color="#E5E5E5"> is still not fixed so I decided to</font>

49
00:02:13,590 --> 00:02:17,040
submit a<font color="#CCCCCC"> blackhat paper and thanks to</font>

50
00:02:15,480 --> 00:02:21,660
<font color="#CCCCCC">blackhat for providing</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> platform to</font>

51
00:02:17,040 --> 00:02:25,349
<font color="#E5E5E5">share my</font><font color="#CCCCCC"> research</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so I</font><font color="#E5E5E5"> will start</font>

52
00:02:21,660 --> 00:02:27,450
<font color="#E5E5E5">with the basic arm v8a architecture so</font>

53
00:02:25,349 --> 00:02:30,268
as we<font color="#CCCCCC"> know in our v8a there are</font><font color="#E5E5E5"> four</font>

54
00:02:27,450 --> 00:02:33,450
exception levels and program executes<font color="#E5E5E5"> in</font>

55
00:02:30,269 --> 00:02:35,099
one of<font color="#E5E5E5"> these four extra levels so</font>

56
00:02:33,450 --> 00:02:36,540
exception levels determines the

57
00:02:35,099 --> 00:02:40,518
privilege level higher the exception

58
00:02:36,540 --> 00:02:42,959
value more<font color="#CCCCCC"> privilege it has</font><font color="#E5E5E5"> so</font>

59
00:02:40,519 --> 00:02:44,489
hypervisor running in el2 will have more

60
00:02:42,959 --> 00:02:48,660
privileged than<font color="#E5E5E5"> the guest OS that is</font>

61
00:02:44,489 --> 00:02:50,760
running<font color="#E5E5E5"> in</font><font color="#CCCCCC"> el1</font><font color="#E5E5E5"> so if the OS wants to</font>

62
00:02:48,660 --> 00:02:52,260
require<font color="#E5E5E5"> some service from hypervisor</font><font color="#CCCCCC"> for</font>

63
00:02:50,760 --> 00:02:55,730
that there<font color="#E5E5E5"> is a special</font><font color="#CCCCCC"> instruction</font>

64
00:02:52,260 --> 00:02:58,040
called<font color="#CCCCCC"> HVC that is hypervisor called</font>

65
00:02:55,730 --> 00:03:01,018
when these instructions<font color="#E5E5E5"> are executed</font>

66
00:02:58,040 --> 00:03:04,048
<font color="#E5E5E5">they result into a synchronous exception</font>

67
00:03:01,019 --> 00:03:06,420
and these exceptions are handled by<font color="#E5E5E5"> the</font>

68
00:03:04,049 --> 00:03:08,640
hypervisor<font color="#CCCCCC"> the</font><font color="#E5E5E5"> hypervisor has the</font>

69
00:03:06,420 --> 00:03:10,890
handler code<font color="#E5E5E5"> in it and through that</font>

70
00:03:08,640 --> 00:03:13,379
exception handler hypervisor services

71
00:03:10,890 --> 00:03:15,480
the request back so this<font color="#E5E5E5"> is how secure</font>

72
00:03:13,379 --> 00:03:16,078
communication happens between OS<font color="#E5E5E5"> and</font>

73
00:03:15,480 --> 00:03:18,720
hypervisor

74
00:03:16,079 --> 00:03:22,139
and so the movement<font color="#E5E5E5"> any exception occurs</font>

75
00:03:18,720 --> 00:03:24,359
CPU executes its corresponding handler

76
00:03:22,139 --> 00:03:25,859
code so the location where this<font color="#E5E5E5"> handler</font>

77
00:03:24,359 --> 00:03:28,859
<font color="#E5E5E5">ports are stored are called</font>

78
00:03:25,859 --> 00:03:30,959
exception vectors and these<font color="#E5E5E5"> vectors are</font>

79
00:03:28,859 --> 00:03:35,549
stored in a special table<font color="#E5E5E5"> called</font>

80
00:03:30,959 --> 00:03:38,250
exception<font color="#E5E5E5"> vector</font><font color="#CCCCCC"> table and every e-l</font>

81
00:03:35,549 --> 00:03:41,130
every exception level has its<font color="#E5E5E5"> own vector</font>

82
00:03:38,250 --> 00:03:46,079
table<font color="#E5E5E5"> so l1 will have its own l2 will</font>

83
00:03:41,130 --> 00:03:48,030
have its own and similarly l3 so in this

84
00:03:46,079 --> 00:03:49,590
talk we will<font color="#E5E5E5"> just talk about l2</font><font color="#CCCCCC"> x s no</font>

85
00:03:48,030 --> 00:03:53,819
vector<font color="#CCCCCC"> table and</font><font color="#E5E5E5"> because we are</font><font color="#CCCCCC"> just</font>

86
00:03:49,590 --> 00:03:55,769
<font color="#E5E5E5">talking</font><font color="#CCCCCC"> about hypervisors so and the</font>

87
00:03:53,819 --> 00:03:57,839
base address<font color="#CCCCCC"> of this exception vector</font>

88
00:03:55,769 --> 00:04:01,669
tables are stored in a special<font color="#CCCCCC"> register</font>

89
00:03:57,840 --> 00:04:04,169
called<font color="#CCCCCC"> v bar registers and</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> V bar</font>

90
00:04:01,669 --> 00:04:05,730
<font color="#CCCCCC">ETL has its own V Bar register as well</font>

91
00:04:04,169 --> 00:04:06,870
that points to the corresponding

92
00:04:05,730 --> 00:04:10,709
expression vector table<font color="#E5E5E5"> for that</font>

93
00:04:06,870 --> 00:04:15,630
particular<font color="#CCCCCC"> PL so</font><font color="#E5E5E5"> V</font><font color="#CCCCCC"> Bar e l2</font><font color="#E5E5E5"> will point</font>

94
00:04:10,709 --> 00:04:17,668
to exception vector table<font color="#E5E5E5"> of l2 and this</font>

95
00:04:15,630 --> 00:04:19,858
expression vector table<font color="#E5E5E5"> has 16 handlers</font>

96
00:04:17,668 --> 00:04:23,080
in it and each handlers are executed

97
00:04:19,858 --> 00:04:25,599
based<font color="#E5E5E5"> on the kind of reception so</font>

98
00:04:23,080 --> 00:04:27,789
in case of<font color="#CCCCCC"> HVC that is originating from</font>

99
00:04:25,599 --> 00:04:29,919
64-bit kernel<font color="#E5E5E5"> the exception</font><font color="#CCCCCC"> handler that</font>

100
00:04:27,789 --> 00:04:34,990
<font color="#E5E5E5">will</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> executed will be at an offset</font><font color="#CCCCCC"> of</font>

101
00:04:29,919 --> 00:04:39,039
zero X 400 so when<font color="#CCCCCC"> H VC is originated</font>

102
00:04:34,990 --> 00:04:42,009
from 64 64-bit kernel CPU refers to this

103
00:04:39,039 --> 00:04:45,280
<font color="#CCCCCC">v bar el2 register obtains the pointer</font>

104
00:04:42,009 --> 00:04:48,150
<font color="#E5E5E5">then it adds 0 X 400 to it and then</font>

105
00:04:45,280 --> 00:04:51,429
executes the handler code from there and

106
00:04:48,150 --> 00:04:54,280
this is how hypervisor services the

107
00:04:51,430 --> 00:04:57,069
request to<font color="#E5E5E5"> the OS and they communicate</font>

108
00:04:54,280 --> 00:04:58,929
<font color="#CCCCCC">with each other</font><font color="#E5E5E5"> so this explains us</font>

109
00:04:57,069 --> 00:05:00,969
between<font color="#E5E5E5"> how the comic internally how the</font>

110
00:04:58,930 --> 00:05:04,150
communication<font color="#E5E5E5"> happens</font><font color="#CCCCCC"> between the OS and</font>

111
00:05:00,969 --> 00:05:08,139
<font color="#E5E5E5">the hypervisors now we will see the</font>

112
00:05:04,150 --> 00:05:10,299
hypervisor<font color="#E5E5E5"> on arm so in order to support</font>

113
00:05:08,139 --> 00:05:13,780
virtualization in arm hypervisor has<font color="#E5E5E5"> to</font>

114
00:05:10,300 --> 00:05:16,990
execute<font color="#CCCCCC"> in</font><font color="#E5E5E5"> l2</font><font color="#CCCCCC"> and this is needed</font><font color="#E5E5E5"> because</font>

115
00:05:13,780 --> 00:05:18,690
<font color="#E5E5E5">in order</font><font color="#CCCCCC"> to access the hardware</font><font color="#E5E5E5"> that is</font>

116
00:05:16,990 --> 00:05:21,580
needed<font color="#CCCCCC"> to</font><font color="#E5E5E5"> support virtualization a</font>

117
00:05:18,690 --> 00:05:24,310
software can access those hardware from

118
00:05:21,580 --> 00:05:26,318
<font color="#CCCCCC">el2 so that's why</font><font color="#E5E5E5"> your appetizer has to</font>

119
00:05:24,310 --> 00:05:30,069
execute<font color="#CCCCCC"> in</font><font color="#E5E5E5"> el2 some of some portion</font><font color="#CCCCCC"> of</font>

120
00:05:26,319 --> 00:05:32,440
it has to be<font color="#E5E5E5"> present in the l2 and there</font>

121
00:05:30,069 --> 00:05:35,430
are<font color="#E5E5E5"> two kinds</font><font color="#CCCCCC"> of hypervisors type 1</font>

122
00:05:32,440 --> 00:05:37,810
hypervisor<font color="#E5E5E5"> and type 2 hypervisors so</font>

123
00:05:35,430 --> 00:05:42,699
type 1 hypervisor<font color="#CCCCCC"> czar the bare-metal</font>

124
00:05:37,810 --> 00:05:45,219
<font color="#CCCCCC">hypervisor and</font><font color="#E5E5E5"> the host is considered as</font>

125
00:05:42,699 --> 00:05:46,750
a<font color="#CCCCCC"> VM in that so that is the main</font>

126
00:05:45,219 --> 00:05:49,150
difference<font color="#CCCCCC"> between type 1 and type 2 so</font>

127
00:05:46,750 --> 00:05:51,250
host is considered a VM and Xen is a

128
00:05:49,150 --> 00:05:55,650
classic example of type 1 hypervisor and

129
00:05:51,250 --> 00:05:57,520
it<font color="#E5E5E5"> runs completely</font><font color="#CCCCCC"> niall to on arm and</font>

130
00:05:55,650 --> 00:05:59,289
type 2<font color="#E5E5E5"> hypervisor</font>

131
00:05:57,520 --> 00:06:01,210
the extension of the host kernel<font color="#E5E5E5"> so</font>

132
00:05:59,289 --> 00:06:04,568
that's why the host kernel is not

133
00:06:01,210 --> 00:06:07,900
considered as a<font color="#E5E5E5"> VM in that and KVM is a</font>

134
00:06:04,569 --> 00:06:11,560
type 2 hypervisor<font color="#E5E5E5"> and KVM runs partially</font>

135
00:06:07,900 --> 00:06:14,650
in<font color="#CCCCCC"> al2 so4 arm a VM</font><font color="#E5E5E5"> has two component</font><font color="#CCCCCC"> a</font>

136
00:06:11,560 --> 00:06:17,949
<font color="#CCCCCC">low wiser and high</font><font color="#E5E5E5"> riser loaiza runs in</font>

137
00:06:14,650 --> 00:06:21,210
<font color="#CCCCCC">el2 and this is the core guy and it does</font>

138
00:06:17,949 --> 00:06:25,090
the configuration of the hardware and

139
00:06:21,210 --> 00:06:27,159
the<font color="#CCCCCC"> VM switching so this</font><font color="#E5E5E5"> this component</font>

140
00:06:25,090 --> 00:06:29,500
does the<font color="#E5E5E5"> low level stuff and the high</font>

141
00:06:27,159 --> 00:06:31,330
<font color="#E5E5E5">visor runs with the Linux kernel</font><font color="#CCCCCC"> and it</font>

142
00:06:29,500 --> 00:06:32,200
uses<font color="#E5E5E5"> the</font><font color="#CCCCCC"> resources that</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> provided by</font>

143
00:06:31,330 --> 00:06:37,780
<font color="#CCCCCC">the</font>

144
00:06:32,200 --> 00:06:38,920
<font color="#CCCCCC">Scanlan okay so in order to support KVM</font>

145
00:06:37,780 --> 00:06:42,729
in<font color="#E5E5E5"> linux</font>

146
00:06:38,920 --> 00:06:44,410
so linux<font color="#E5E5E5"> has to boot in l2 so the one of</font>

147
00:06:42,730 --> 00:06:46,510
<font color="#CCCCCC">the initial thing that linux does when</font>

148
00:06:44,410 --> 00:06:48,310
it starts to boot<font color="#CCCCCC"> is it checks the</font>

149
00:06:46,510 --> 00:06:50,950
<font color="#E5E5E5">current TL value the exception level</font>

150
00:06:48,310 --> 00:06:54,160
value so if the<font color="#CCCCCC"> attrition</font><font color="#E5E5E5"> level value is</font>

151
00:06:50,950 --> 00:06:56,560
<font color="#E5E5E5">2 then it knows that</font><font color="#CCCCCC"> ok I am</font><font color="#E5E5E5"> running in</font>

152
00:06:54,160 --> 00:06:58,210
<font color="#E5E5E5">the l2 so I can a bit</font><font color="#CCCCCC"> I can access vbar</font>

153
00:06:56,560 --> 00:07:00,130
<font color="#CCCCCC">el2</font><font color="#E5E5E5"> register because</font><font color="#CCCCCC"> V bar</font><font color="#E5E5E5"> ul to</font>

154
00:06:58,210 --> 00:07:02,409
register can't be accessed<font color="#CCCCCC"> from the l1</font>

155
00:07:00,130 --> 00:07:05,980
directly<font color="#CCCCCC"> in C it can't be accessible</font>

156
00:07:02,410 --> 00:07:08,290
<font color="#CCCCCC">from view element so now if Linux knows</font>

157
00:07:05,980 --> 00:07:10,570
that it is running in<font color="#CCCCCC"> el2 so it can</font>

158
00:07:08,290 --> 00:07:12,610
<font color="#E5E5E5">access</font><font color="#CCCCCC"> view arielle</font><font color="#E5E5E5"> to register so it</font>

159
00:07:10,570 --> 00:07:15,190
updates the<font color="#E5E5E5"> V Bar ul to register and</font>

160
00:07:12,610 --> 00:07:17,710
make sure that it points to star vector

161
00:07:15,190 --> 00:07:21,190
<font color="#CCCCCC">table</font><font color="#E5E5E5"> we will discuss about what</font><font color="#CCCCCC"> this</font>

162
00:07:17,710 --> 00:07:23,500
stuff<font color="#CCCCCC"> actor table is so it and after</font>

163
00:07:21,190 --> 00:07:25,690
updating<font color="#E5E5E5"> that it switches back to l1 and</font>

164
00:07:23,500 --> 00:07:27,400
normal good flow happens<font color="#CCCCCC"> so what it is</font>

165
00:07:25,690 --> 00:07:29,170
doing<font color="#CCCCCC"> is that it is registering</font><font color="#E5E5E5"> star</font>

166
00:07:27,400 --> 00:07:31,840
vector<font color="#CCCCCC"> table as an exception vector</font>

167
00:07:29,170 --> 00:07:36,190
<font color="#CCCCCC">table for e l2</font><font color="#E5E5E5"> and after that normal</font>

168
00:07:31,840 --> 00:07:40,030
boot flow happens<font color="#E5E5E5"> and it is very common</font>

169
00:07:36,190 --> 00:07:42,490
practice<font color="#E5E5E5"> to start</font><font color="#CCCCCC"> Linux in l2 if the</font>

170
00:07:40,030 --> 00:07:45,299
processor supports<font color="#E5E5E5"> that mode as you</font><font color="#CCCCCC"> can</font>

171
00:07:42,490 --> 00:07:48,250
see this code<font color="#E5E5E5"> has</font><font color="#CCCCCC"> been taken from the</font>

172
00:07:45,300 --> 00:07:49,900
prostrate<font color="#E5E5E5"> form a repo and this is for</font>

173
00:07:48,250 --> 00:07:54,210
the<font color="#CCCCCC"> raspberry pi device as</font><font color="#E5E5E5"> you can see</font>

174
00:07:49,900 --> 00:07:56,770
the control is<font color="#CCCCCC"> transferred into</font><font color="#E5E5E5"> e l2 if</font>

175
00:07:54,210 --> 00:07:59,130
for these devices<font color="#CCCCCC"> because they'd support</font>

176
00:07:56,770 --> 00:08:02,200
<font color="#E5E5E5">that mode and the chances are high that</font>

177
00:07:59,130 --> 00:08:05,020
<font color="#E5E5E5">Linux will start any l2 and so the stuff</font>

178
00:08:02,200 --> 00:08:08,590
vector<font color="#CCCCCC"> table will be installed</font><font color="#E5E5E5"> and KVM</font>

179
00:08:05,020 --> 00:08:11,710
will be<font color="#E5E5E5"> enabled</font><font color="#CCCCCC"> so let's go inside</font><font color="#E5E5E5"> this</font>

180
00:08:08,590 --> 00:08:14,169
stuff vector table<font color="#E5E5E5"> so this is standard</font>

181
00:08:11,710 --> 00:08:16,900
vector<font color="#E5E5E5"> table it has 16 entry as we</font>

182
00:08:14,170 --> 00:08:20,230
discussed in<font color="#E5E5E5"> the in the vector table</font>

183
00:08:16,900 --> 00:08:23,020
<font color="#CCCCCC">slide and the handler that</font><font color="#E5E5E5"> will be</font>

184
00:08:20,230 --> 00:08:25,000
called<font color="#E5E5E5"> will be l1 underscore</font><font color="#CCCCCC"> Singh so</font>

185
00:08:23,020 --> 00:08:29,830
this this<font color="#E5E5E5"> handler will be called</font><font color="#CCCCCC"> when</font>

186
00:08:25,000 --> 00:08:31,930
<font color="#CCCCCC">hvc will be executed by</font><font color="#E5E5E5"> 64-bit kernel so</font>

187
00:08:29,830 --> 00:08:36,970
<font color="#E5E5E5">it will go inside this handler function</font>

188
00:08:31,930 --> 00:08:39,880
<font color="#E5E5E5">we will see that this processes three</font>

189
00:08:36,970 --> 00:08:43,080
commands based on the<font color="#CCCCCC"> x0 register value</font>

190
00:08:39,880 --> 00:08:46,230
so if X 0 register value is

191
00:08:43,080 --> 00:08:48,300
then it updates the<font color="#CCCCCC"> VAR e</font><font color="#E5E5E5"> l2 register</font>

192
00:08:46,230 --> 00:08:52,350
with<font color="#E5E5E5"> the value that</font><font color="#CCCCCC"> hasn't</font><font color="#E5E5E5"> passed in</font><font color="#CCCCCC"> x1</font>

193
00:08:48,300 --> 00:08:54,000
<font color="#E5E5E5">register so what this means is</font><font color="#CCCCCC"> that once</font>

194
00:08:52,350 --> 00:08:56,160
this stuff vector table is installed as

195
00:08:54,000 --> 00:08:57,900
<font color="#CCCCCC">a exception factor table for e l2 it</font>

196
00:08:56,160 --> 00:09:00,839
provides the interface using which a

197
00:08:57,900 --> 00:09:02,340
software running in l1 can update<font color="#CCCCCC"> V Bar</font>

198
00:09:00,840 --> 00:09:09,990
e l2 register and install<font color="#E5E5E5"> another</font>

199
00:09:02,340 --> 00:09:11,280
exception vector table for e l2 so so we

200
00:09:09,990 --> 00:09:14,910
will see all this with<font color="#E5E5E5"> the state diagram</font>

201
00:09:11,280 --> 00:09:18,240
to make<font color="#E5E5E5"> things more clear</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> let</font><font color="#CCCCCC"> it</font>

202
00:09:14,910 --> 00:09:21,030
started and it started<font color="#E5E5E5"> in e l2 so it</font>

203
00:09:18,240 --> 00:09:23,580
updates the<font color="#CCCCCC"> v bar UL to register and</font>

204
00:09:21,030 --> 00:09:25,140
makes your make<font color="#CCCCCC"> sure that v bar</font><font color="#E5E5E5"> en to</font>

205
00:09:23,580 --> 00:09:27,990
register points to the rest of vector

206
00:09:25,140 --> 00:09:29,939
table and after that<font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> editable</font>

207
00:09:27,990 --> 00:09:34,440
provides the interface using which it is

208
00:09:29,940 --> 00:09:35,970
possible<font color="#CCCCCC"> to update aviv arielle to</font>

209
00:09:34,440 --> 00:09:41,040
register and register a new<font color="#CCCCCC"> accession</font>

210
00:09:35,970 --> 00:09:44,460
vector table for e l2 so using this

211
00:09:41,040 --> 00:09:46,709
interface<font color="#E5E5E5"> linux installs the actual</font><font color="#CCCCCC"> k vm</font>

212
00:09:44,460 --> 00:09:48,750
vector table so this<font color="#E5E5E5"> is the actual k vm</font>

213
00:09:46,710 --> 00:09:53,510
vector table this this will<font color="#CCCCCC"> be installed</font>

214
00:09:48,750 --> 00:09:55,860
in<font color="#CCCCCC"> a machine in which</font><font color="#E5E5E5"> KVM is running and</font>

215
00:09:53,510 --> 00:09:57,810
in<font color="#E5E5E5"> between these two lot of things</font>

216
00:09:55,860 --> 00:10:01,470
happens but<font color="#CCCCCC"> that is out of scope of this</font>

217
00:09:57,810 --> 00:10:03,329
talk so once the<font color="#E5E5E5"> KVM</font><font color="#CCCCCC"> is running this</font>

218
00:10:01,470 --> 00:10:05,400
vector table will be<font color="#E5E5E5"> installed we</font><font color="#CCCCCC"> will</font>

219
00:10:03,330 --> 00:10:08,970
go<font color="#E5E5E5"> inside the HVC handler</font><font color="#CCCCCC"> of this k vm</font>

220
00:10:05,400 --> 00:10:11,730
vector table<font color="#E5E5E5"> so this is the handler of</font>

221
00:10:08,970 --> 00:10:15,540
<font color="#CCCCCC">hpc handler of</font><font color="#E5E5E5"> the k vm vector table so</font>

222
00:10:11,730 --> 00:10:17,160
the very first thing<font color="#E5E5E5"> this handler</font>

223
00:10:15,540 --> 00:10:18,719
function is<font color="#E5E5E5"> doing is</font><font color="#CCCCCC"> that it is checking</font>

224
00:10:17,160 --> 00:10:20,839
from<font color="#E5E5E5"> where that call has</font><font color="#CCCCCC"> originated</font>

225
00:10:18,720 --> 00:10:24,750
whether it has originated<font color="#E5E5E5"> from the host</font>

226
00:10:20,840 --> 00:10:27,540
<font color="#E5E5E5">kernel or from the guest kernel so if</font>

227
00:10:24,750 --> 00:10:29,190
<font color="#CCCCCC">and this check is very important that's</font>

228
00:10:27,540 --> 00:10:32,760
<font color="#E5E5E5">why the privilege escalation is not</font>

229
00:10:29,190 --> 00:10:36,480
possible from<font color="#E5E5E5"> the guest kernel so the</font>

230
00:10:32,760 --> 00:10:39,600
<font color="#CCCCCC">movement</font><font color="#E5E5E5"> it deserve when it finds that</font>

231
00:10:36,480 --> 00:10:41,370
the<font color="#CCCCCC"> HVC</font><font color="#E5E5E5"> is from the host kernel then the</font>

232
00:10:39,600 --> 00:10:43,500
control goes down and it checks the

233
00:10:41,370 --> 00:10:45,720
<font color="#CCCCCC">value of x 0 register whether it is less</font>

234
00:10:43,500 --> 00:10:47,130
<font color="#E5E5E5">than 3</font><font color="#CCCCCC"> or not and if</font><font color="#E5E5E5"> it is less than 3</font>

235
00:10:45,720 --> 00:10:50,760
then<font color="#E5E5E5"> it then it calls another function</font>

236
00:10:47,130 --> 00:10:53,860
called underscore<font color="#CCCCCC"> KVM handle stuff HVC</font>

237
00:10:50,760 --> 00:10:56,020
<font color="#E5E5E5">so it will go inside this function</font>

238
00:10:53,860 --> 00:10:59,020
<font color="#E5E5E5">we will see that there</font><font color="#CCCCCC"> is a</font><font color="#E5E5E5"> command</font>

239
00:10:56,020 --> 00:11:02,290
called<font color="#CCCCCC"> hvc reset vector command and with</font>

240
00:10:59,020 --> 00:11:04,210
this command if that's a<font color="#E5E5E5"> zero value is</font>

241
00:11:02,290 --> 00:11:07,599
<font color="#E5E5E5">true with this command it disables the</font>

242
00:11:04,210 --> 00:11:09,280
memory management unit of e l2 and after

243
00:11:07,600 --> 00:11:11,410
disabling<font color="#E5E5E5"> the memory management unit of</font>

244
00:11:09,280 --> 00:11:14,380
el2<font color="#E5E5E5"> it installs the star vector back</font>

245
00:11:11,410 --> 00:11:18,339
into the system<font color="#CCCCCC"> so what</font><font color="#E5E5E5"> this means is</font>

246
00:11:14,380 --> 00:11:19,720
that<font color="#CCCCCC"> na</font><font color="#E5E5E5"> stock vector</font><font color="#CCCCCC"> table is back into</font>

247
00:11:18,340 --> 00:11:21,370
the<font color="#E5E5E5"> system and star vector table</font>

248
00:11:19,720 --> 00:11:23,410
provides the interface using which it is

249
00:11:21,370 --> 00:11:27,580
<font color="#E5E5E5">possible to install another exception</font>

250
00:11:23,410 --> 00:11:29,860
vector table<font color="#E5E5E5"> for l2 so so attacker can</font>

251
00:11:27,580 --> 00:11:31,780
<font color="#CCCCCC">use this interface</font><font color="#E5E5E5"> to install an</font>

252
00:11:29,860 --> 00:11:33,460
attacker<font color="#CCCCCC"> exceptional vector table so we</font>

253
00:11:31,780 --> 00:11:38,530
will see with this with the<font color="#CCCCCC"> straight</font>

254
00:11:33,460 --> 00:11:40,030
<font color="#CCCCCC">diagram</font><font color="#E5E5E5"> so now KVM is running and the K</font>

255
00:11:38,530 --> 00:11:43,569
vector table<font color="#E5E5E5"> provides an interface</font>

256
00:11:40,030 --> 00:11:45,400
called<font color="#CCCCCC"> HVC reset vector</font><font color="#E5E5E5"> interface and if</font>

257
00:11:43,570 --> 00:11:49,600
that<font color="#CCCCCC"> hvc is</font><font color="#E5E5E5"> all related from the host</font>

258
00:11:45,400 --> 00:11:52,470
kernel then the<font color="#CCCCCC"> V</font><font color="#E5E5E5"> then the V bar e l2</font>

259
00:11:49,600 --> 00:11:54,520
will point to the<font color="#E5E5E5"> star vector</font><font color="#CCCCCC"> table and</font>

260
00:11:52,470 --> 00:11:55,960
the<font color="#CCCCCC"> store vector table</font><font color="#E5E5E5"> will</font><font color="#CCCCCC"> be</font>

261
00:11:54,520 --> 00:11:58,720
registered as<font color="#CCCCCC"> a exception</font><font color="#E5E5E5"> vector</font><font color="#CCCCCC"> table</font>

262
00:11:55,960 --> 00:12:00,220
and<font color="#E5E5E5"> this stuff vector</font><font color="#CCCCCC"> table provide we</font>

263
00:11:58,720 --> 00:12:03,040
already<font color="#E5E5E5"> discussed that it provides</font>

264
00:12:00,220 --> 00:12:05,230
interface using which another vector

265
00:12:03,040 --> 00:12:07,329
table<font color="#CCCCCC"> can be registered</font><font color="#E5E5E5"> so attacker can</font>

266
00:12:05,230 --> 00:12:13,710
will register<font color="#E5E5E5"> its own</font><font color="#CCCCCC"> exception vector</font>

267
00:12:07,330 --> 00:12:16,690
table<font color="#E5E5E5"> and get control</font><font color="#CCCCCC"> over the</font><font color="#E5E5E5"> e l2 so</font>

268
00:12:13,710 --> 00:12:19,090
now we will see with how the attacker

269
00:12:16,690 --> 00:12:22,170
will exploit this in order<font color="#E5E5E5"> to get code</font>

270
00:12:19,090 --> 00:12:25,240
execution in<font color="#CCCCCC"> l2</font><font color="#E5E5E5"> from ill host e l1 and</font>

271
00:12:22,170 --> 00:12:28,030
this will explain things<font color="#E5E5E5"> more clearly so</font>

272
00:12:25,240 --> 00:12:30,880
in order to skewed code from host l1 to

273
00:12:28,030 --> 00:12:34,180
l2<font color="#E5E5E5"> attacker will first load</font><font color="#CCCCCC"> the value 2</font>

274
00:12:30,880 --> 00:12:36,100
into X 0 register that means<font color="#E5E5E5"> attacker</font>

275
00:12:34,180 --> 00:12:38,469
<font color="#E5E5E5">wants to send</font><font color="#CCCCCC"> hvc reset vector command</font>

276
00:12:36,100 --> 00:12:42,970
it want<font color="#E5E5E5"> to reset the vector star vector</font>

277
00:12:38,470 --> 00:12:46,090
table<font color="#E5E5E5"> back into the</font><font color="#CCCCCC"> system</font><font color="#E5E5E5"> and then it</font>

278
00:12:42,970 --> 00:12:49,570
will execute<font color="#CCCCCC"> hvc this HVC will be</font>

279
00:12:46,090 --> 00:12:51,100
handled<font color="#E5E5E5"> by the</font><font color="#CCCCCC"> KVM vector table because</font>

280
00:12:49,570 --> 00:12:53,170
<font color="#CCCCCC">kavia vector table is registered as an</font>

281
00:12:51,100 --> 00:12:54,850
exception vector table<font color="#CCCCCC"> and the handler</font>

282
00:12:53,170 --> 00:12:56,979
of<font color="#E5E5E5"> the K</font><font color="#CCCCCC"> vector table will disable</font><font color="#E5E5E5"> the</font>

283
00:12:54,850 --> 00:12:58,690
memory management unit of e l2<font color="#E5E5E5"> and after</font>

284
00:12:56,980 --> 00:12:59,350
<font color="#E5E5E5">disabling the memory management unit of</font>

285
00:12:58,690 --> 00:13:01,360
l2

286
00:12:59,350 --> 00:13:03,580
it will install the<font color="#CCCCCC"> star vector table</font>

287
00:13:01,360 --> 00:13:06,160
<font color="#E5E5E5">back into the system</font><font color="#CCCCCC"> so now a stop</font>

288
00:13:03,580 --> 00:13:07,020
vector table<font color="#E5E5E5"> is back in action after</font>

289
00:13:06,160 --> 00:13:09,280
this

290
00:13:07,020 --> 00:13:11,740
attacker will allocate a physical

291
00:13:09,280 --> 00:13:15,100
continuous memory he a physical

292
00:13:11,740 --> 00:13:17,050
continuous memory is needed because the

293
00:13:15,100 --> 00:13:19,240
memory management unit of<font color="#E5E5E5"> el2 has been</font>

294
00:13:17,050 --> 00:13:20,920
disabled<font color="#E5E5E5"> and attacker wants to allocate</font>

295
00:13:19,240 --> 00:13:22,450
a physical<font color="#E5E5E5"> continuous memory and it</font>

296
00:13:20,920 --> 00:13:24,189
wants<font color="#CCCCCC"> to register</font><font color="#E5E5E5"> that physical</font>

297
00:13:22,450 --> 00:13:27,760
<font color="#E5E5E5">continuous memory as a exception vector</font>

298
00:13:24,190 --> 00:13:29,440
<font color="#CCCCCC">table for</font><font color="#E5E5E5"> e l2 and then attacker will</font>

299
00:13:27,760 --> 00:13:34,780
embed a<font color="#CCCCCC"> shell code at an offset of zero</font>

300
00:13:29,440 --> 00:13:36,450
X 400<font color="#CCCCCC"> zero X 400 because the exception</font>

301
00:13:34,780 --> 00:13:39,400
<font color="#CCCCCC">handler is at this</font><font color="#E5E5E5"> particular address</font>

302
00:13:36,450 --> 00:13:42,670
then attacker will load the value 0 into

303
00:13:39,400 --> 00:13:45,100
X<font color="#E5E5E5"> 0 register and then the physical</font>

304
00:13:42,670 --> 00:13:48,520
<font color="#E5E5E5">address will be loaded in X 1</font><font color="#CCCCCC"> register</font>

305
00:13:45,100 --> 00:13:51,250
<font color="#E5E5E5">and again</font><font color="#CCCCCC"> H PC will</font><font color="#E5E5E5"> be called</font><font color="#CCCCCC"> after</font>

306
00:13:48,520 --> 00:13:52,930
these<font color="#E5E5E5"> forced steps this</font><font color="#CCCCCC"> hvc will be</font>

307
00:13:51,250 --> 00:13:54,580
handled<font color="#CCCCCC"> by the stuff vector table</font>

308
00:13:52,930 --> 00:13:57,640
<font color="#E5E5E5">because now</font><font color="#CCCCCC"> star vector table is back</font>

309
00:13:54,580 --> 00:14:00,670
into action<font color="#CCCCCC"> and the handler</font><font color="#E5E5E5"> or store</font>

310
00:13:57,640 --> 00:14:03,069
vector table<font color="#E5E5E5"> will install the electric</font>

311
00:14:00,670 --> 00:14:07,270
are allocated buffer as a exception

312
00:14:03,070 --> 00:14:09,160
vector<font color="#CCCCCC"> table for e l2</font><font color="#E5E5E5"> and after that</font>

313
00:14:07,270 --> 00:14:11,410
once this is<font color="#CCCCCC"> done and the shell</font><font color="#E5E5E5"> code is</font>

314
00:14:09,160 --> 00:14:13,689
at an offset<font color="#CCCCCC"> of zero X 400 so attacker</font>

315
00:14:11,410 --> 00:14:16,660
<font color="#E5E5E5">need to execute another just as</font><font color="#CCCCCC"> hvc</font>

316
00:14:13,690 --> 00:14:20,830
<font color="#E5E5E5">called and game</font><font color="#CCCCCC"> over so attacker is able</font>

317
00:14:16,660 --> 00:14:24,699
<font color="#E5E5E5">to execute code in e l2 so after</font>

318
00:14:20,830 --> 00:14:29,740
providing<font color="#E5E5E5"> this much of detail to</font><font color="#CCCCCC"> KVM</font>

319
00:14:24,700 --> 00:14:34,540
team and the<font color="#CCCCCC"> linux team I got this reply</font>

320
00:14:29,740 --> 00:14:37,870
from them so based on their reply<font color="#CCCCCC"> it</font>

321
00:14:34,540 --> 00:14:40,000
seems like their threat model assumption

322
00:14:37,870 --> 00:14:42,070
is the code<font color="#CCCCCC"> that is running</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> hosts</font>

323
00:14:40,000 --> 00:14:45,610
<font color="#CCCCCC">l1 is equivalent to the code that is</font>

324
00:14:42,070 --> 00:14:48,400
running<font color="#E5E5E5"> in l2</font><font color="#CCCCCC"> and that's why they don't</font>

325
00:14:45,610 --> 00:14:50,140
care about the privileged<font color="#CCCCCC"> host that they</font>

326
00:14:48,400 --> 00:14:53,530
have added into<font color="#E5E5E5"> the isolation boundary</font>

327
00:14:50,140 --> 00:14:55,300
and they don't think<font color="#CCCCCC"> that this</font><font color="#E5E5E5"> is a</font>

328
00:14:53,530 --> 00:14:57,189
security<font color="#CCCCCC"> issue at all</font><font color="#E5E5E5"> that's why and</font>

329
00:14:55,300 --> 00:15:01,180
they<font color="#E5E5E5"> think that if host kernel is</font>

330
00:14:57,190 --> 00:15:06,070
compromised game is already<font color="#CCCCCC"> over but in</font>

331
00:15:01,180 --> 00:15:10,239
practice<font color="#CCCCCC"> l1 is not equal to l2 and l1</font>

332
00:15:06,070 --> 00:15:12,250
has<font color="#E5E5E5"> lot more code running than l2 l1 has</font>

333
00:15:10,240 --> 00:15:15,400
wider<font color="#E5E5E5"> attack vector than l2 because it</font>

334
00:15:12,250 --> 00:15:17,110
is interacting to outside world<font color="#E5E5E5"> it is it</font>

335
00:15:15,400 --> 00:15:19,990
may have some custom driver running<font color="#E5E5E5"> in</font>

336
00:15:17,110 --> 00:15:21,010
it so l1 has<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> more attack vector as</font>

337
00:15:19,990 --> 00:15:22,630
compared<font color="#CCCCCC"> to L</font><font color="#E5E5E5"> 2</font><font color="#CCCCCC"> L</font>

338
00:15:21,010 --> 00:15:24,370
is running in lot<font color="#E5E5E5"> more closed</font>

339
00:15:22,630 --> 00:15:28,260
environment the interaction is very

340
00:15:24,370 --> 00:15:30,940
<font color="#CCCCCC">closed</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> ul - it's a hypervisor so</font>

341
00:15:28,260 --> 00:15:32,230
what the thing as<font color="#E5E5E5"> an end of game can be</font>

342
00:15:30,940 --> 00:15:37,000
a beginning<font color="#E5E5E5"> of a new</font><font color="#CCCCCC"> game for</font><font color="#E5E5E5"> an</font>

343
00:15:32,230 --> 00:15:40,720
attacker<font color="#E5E5E5"> so if I'm an attacker and if I</font>

344
00:15:37,000 --> 00:15:41,980
manage<font color="#E5E5E5"> to get into the</font><font color="#CCCCCC"> hosts</font><font color="#E5E5E5"> el1 the</font>

345
00:15:40,720 --> 00:15:45,040
first thing that<font color="#CCCCCC"> I will do is that I</font>

346
00:15:41,980 --> 00:15:47,830
<font color="#E5E5E5">will exploit this design and I will</font>

347
00:15:45,040 --> 00:15:50,709
migrate my attack<font color="#E5E5E5"> into l2</font><font color="#CCCCCC"> and once I</font>

348
00:15:47,830 --> 00:15:55,330
<font color="#E5E5E5">migrated my attack into l2</font><font color="#CCCCCC"> I will make</font>

349
00:15:50,710 --> 00:15:57,610
sure<font color="#CCCCCC"> that my attack is isolated by</font>

350
00:15:55,330 --> 00:15:59,710
conferring<font color="#CCCCCC"> stairs</font><font color="#E5E5E5"> to page table so that</font>

351
00:15:57,610 --> 00:16:02,440
the code<font color="#CCCCCC"> that is the</font><font color="#E5E5E5"> memory scanner that</font>

352
00:15:59,710 --> 00:16:04,660
<font color="#E5E5E5">is</font><font color="#CCCCCC"> running</font><font color="#E5E5E5"> in l1 will not be able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> see</font>

353
00:16:02,440 --> 00:16:06,610
my code and so that will<font color="#E5E5E5"> make my code</font>

354
00:16:04,660 --> 00:16:09,550
very stealthy in<font color="#E5E5E5"> nature it will be hard</font>

355
00:16:06,610 --> 00:16:11,380
to detect my attack<font color="#E5E5E5"> after</font><font color="#CCCCCC"> doing</font><font color="#E5E5E5"> that I</font>

356
00:16:09,550 --> 00:16:13,209
can also configure<font color="#E5E5E5"> l2 in lot of</font>

357
00:16:11,380 --> 00:16:14,860
<font color="#CCCCCC">different ways</font><font color="#E5E5E5"> to make sure</font><font color="#CCCCCC"> that I am</font>

358
00:16:13,210 --> 00:16:18,550
getting<font color="#E5E5E5"> the control from various</font>

359
00:16:14,860 --> 00:16:22,630
<font color="#E5E5E5">different places like conferring</font>

360
00:16:18,550 --> 00:16:25,329
interrupts and all and<font color="#E5E5E5"> that will and l1</font>

361
00:16:22,630 --> 00:16:27,370
will not even know about<font color="#E5E5E5"> it</font><font color="#CCCCCC"> and the</font>

362
00:16:25,330 --> 00:16:29,530
third<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> I can use this to</font>

363
00:16:27,370 --> 00:16:31,210
bypass<font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of the production</font><font color="#CCCCCC"> mechanism</font>

364
00:16:29,530 --> 00:16:34,120
that are implemented in<font color="#E5E5E5"> the kernel like</font>

365
00:16:31,210 --> 00:16:36,720
patch guard or<font color="#E5E5E5"> Linux runtime guard in a</font>

366
00:16:34,120 --> 00:16:41,800
generic<font color="#E5E5E5"> way by directly skipping into l2</font>

367
00:16:36,720 --> 00:16:43,420
and<font color="#CCCCCC"> fourth is</font><font color="#E5E5E5"> that if somebody</font><font color="#CCCCCC"> has</font>

368
00:16:41,800 --> 00:16:45,310
<font color="#E5E5E5">implemented some secure monitoring</font>

369
00:16:43,420 --> 00:16:46,810
software<font color="#E5E5E5"> in hypervisor using</font><font color="#CCCCCC"> KVM</font>

370
00:16:45,310 --> 00:16:49,750
something they have custom

371
00:16:46,810 --> 00:16:53,859
implementation so attacker can attack

372
00:16:49,750 --> 00:16:56,640
those things as well<font color="#E5E5E5"> by</font><font color="#CCCCCC"> because now</font>

373
00:16:53,860 --> 00:17:00,550
attacker is able<font color="#CCCCCC"> to execute code in l2</font>

374
00:16:56,640 --> 00:17:02,199
so seeing all this point it seems like

375
00:17:00,550 --> 00:17:04,180
it can be<font color="#CCCCCC"> a</font><font color="#E5E5E5"> very juicy target for an</font>

376
00:17:02,200 --> 00:17:06,550
attacker<font color="#CCCCCC"> to</font><font color="#E5E5E5"> preform a very sophisticated</font>

377
00:17:04,180 --> 00:17:12,280
and<font color="#E5E5E5"> a stealth attack which will be hard</font>

378
00:17:06,550 --> 00:17:14,859
to detect<font color="#E5E5E5"> like blue pill on arm and this</font>

379
00:17:12,280 --> 00:17:18,599
design<font color="#E5E5E5"> has a bigger impact</font><font color="#CCCCCC"> on mobile and</font>

380
00:17:14,859 --> 00:17:20,740
<font color="#E5E5E5">IOT because most of them runs on arm and</font>

381
00:17:18,599 --> 00:17:23,649
the chances are<font color="#E5E5E5"> high that they will</font>

382
00:17:20,740 --> 00:17:26,260
<font color="#E5E5E5">start in</font><font color="#CCCCCC"> el2</font><font color="#E5E5E5"> because if the processor</font>

383
00:17:23,650 --> 00:17:30,760
support that mode then<font color="#E5E5E5"> it starts in e l2</font>

384
00:17:26,260 --> 00:17:33,220
<font color="#CCCCCC">and they are</font><font color="#E5E5E5"> single kernel devices so</font>

385
00:17:30,760 --> 00:17:34,780
they have wider attack surface because

386
00:17:33,220 --> 00:17:36,970
it<font color="#CCCCCC"> may pause</font>

387
00:17:34,780 --> 00:17:38,920
interact outside<font color="#E5E5E5"> world and may possible</font>

388
00:17:36,970 --> 00:17:43,090
<font color="#CCCCCC">that they</font><font color="#E5E5E5"> have some custom driver</font>

389
00:17:38,920 --> 00:17:47,040
running<font color="#CCCCCC"> in it</font><font color="#E5E5E5"> so they are more impacted</font>

390
00:17:43,090 --> 00:17:50,770
by this and the affected architecture is

391
00:17:47,040 --> 00:17:56,850
<font color="#CCCCCC">rv7 a and r</font><font color="#E5E5E5"> v8</font><font color="#CCCCCC"> a with hardware</font>

392
00:17:50,770 --> 00:17:59,920
virtualization so this describes<font color="#CCCCCC"> the</font>

393
00:17:56,850 --> 00:18:02,469
security problem<font color="#E5E5E5"> and its implications</font><font color="#CCCCCC"> so</font>

394
00:17:59,920 --> 00:18:05,770
if you think<font color="#CCCCCC"> that your system is</font>

395
00:18:02,470 --> 00:18:08,830
vulnerable<font color="#E5E5E5"> to this patch your bootloader</font>

396
00:18:05,770 --> 00:18:11,290
<font color="#CCCCCC">and make sure that your linux starts in</font>

397
00:18:08,830 --> 00:18:15,429
l1<font color="#E5E5E5"> and your KVM is disabled by default</font>

398
00:18:11,290 --> 00:18:17,950
<font color="#E5E5E5">and that will ensure</font><font color="#CCCCCC"> that the attacker</font>

399
00:18:15,430 --> 00:18:21,300
will not be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to use</font><font color="#CCCCCC"> Linux 2 as a</font>

400
00:18:17,950 --> 00:18:23,410
backdoor<font color="#CCCCCC"> to install</font><font color="#E5E5E5"> another and</font>

401
00:18:21,300 --> 00:18:29,169
hypervisor based rootkit into your

402
00:18:23,410 --> 00:18:31,720
system<font color="#E5E5E5"> so I have a demo which I would</font>

403
00:18:29,170 --> 00:18:36,190
<font color="#E5E5E5">like to show that using this it is</font>

404
00:18:31,720 --> 00:18:36,750
possible<font color="#CCCCCC"> to execute</font><font color="#E5E5E5"> code from host</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> to</font>

405
00:18:36,190 --> 00:18:42,220
<font color="#CCCCCC">l2</font>

406
00:18:36,750 --> 00:18:46,960
so for<font color="#E5E5E5"> that I am using</font><font color="#CCCCCC"> Q mu 2</font><font color="#E5E5E5"> and I am</font>

407
00:18:42,220 --> 00:18:50,290
<font color="#CCCCCC">running our machine using</font><font color="#E5E5E5"> Q mu so I have</font>

408
00:18:46,960 --> 00:18:58,570
started<font color="#E5E5E5"> my Q machine so it has cortex</font>

409
00:18:50,290 --> 00:19:01,330
<font color="#CCCCCC">a57</font><font color="#E5E5E5"> processor running in it now I</font>

410
00:18:58,570 --> 00:19:05,379
attached a gdb to<font color="#E5E5E5"> that my our machine</font>

411
00:19:01,330 --> 00:19:12,580
and continued<font color="#E5E5E5"> them so now</font><font color="#CCCCCC"> Linux is</font>

412
00:19:05,380 --> 00:19:17,290
starting now I will check<font color="#E5E5E5"> the version of</font>

413
00:19:12,580 --> 00:19:21,179
<font color="#E5E5E5">Linux so</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> a recent version</font><font color="#CCCCCC"> that I am</font>

414
00:19:17,290 --> 00:19:21,180
running I just<font color="#CCCCCC"> reversed</font><font color="#E5E5E5"> a few weeks back</font>

415
00:19:22,860 --> 00:19:28,270
now I will add<font color="#CCCCCC"> a few few breakpoints</font>

416
00:19:26,020 --> 00:19:29,879
here I<font color="#E5E5E5"> will put breakpoints in reset</font>

417
00:19:28,270 --> 00:19:34,240
<font color="#CCCCCC">vector and set vector call</font>

418
00:19:29,880 --> 00:19:36,220
so my exploit code<font color="#E5E5E5"> will call this reset</font>

419
00:19:34,240 --> 00:19:40,420
vector<font color="#E5E5E5"> first first it will call the</font>

420
00:19:36,220 --> 00:19:43,660
reset vector<font color="#E5E5E5"> to reset the vector table</font>

421
00:19:40,420 --> 00:19:46,950
as a<font color="#E5E5E5"> stop vector table and after</font><font color="#CCCCCC"> that it</font>

422
00:19:43,660 --> 00:19:46,950
will call set vector table

423
00:19:53,670 --> 00:19:57,730
[Music]

424
00:19:55,409 --> 00:19:59,679
so now I am running the exploit test

425
00:19:57,730 --> 00:20:04,630
program that will call reset vector

426
00:19:59,679 --> 00:20:07,480
<font color="#E5E5E5">first so now it this will try to add</font>

427
00:20:04,630 --> 00:20:17,650
this will set the<font color="#E5E5E5"> stop vector back into</font>

428
00:20:07,480 --> 00:20:19,480
action and now it will call the set

429
00:20:17,650 --> 00:20:21,100
vector<font color="#E5E5E5"> table so that attacker allocated</font>

430
00:20:19,480 --> 00:20:22,149
buffer will be registered as<font color="#E5E5E5"> a exception</font>

431
00:20:21,100 --> 00:20:24,850
vector table<font color="#E5E5E5"> for</font><font color="#CCCCCC"> el2</font>

432
00:20:22,149 --> 00:20:27,879
so it will pass the<font color="#CCCCCC"> buffer address</font><font color="#E5E5E5"> as</font>

433
00:20:24,850 --> 00:20:30,399
well so here the set vector has been

434
00:20:27,880 --> 00:20:32,260
called and<font color="#E5E5E5"> x1 register will contain the</font>

435
00:20:30,399 --> 00:20:41,799
physical<font color="#CCCCCC"> address</font><font color="#E5E5E5"> of the attacker</font>

436
00:20:32,260 --> 00:20:43,419
<font color="#CCCCCC">allocated buffer so gdb is not</font><font color="#E5E5E5"> able</font><font color="#CCCCCC"> to</font>

437
00:20:41,799 --> 00:20:48,639
access it because<font color="#E5E5E5"> this is a physical</font>

438
00:20:43,419 --> 00:20:51,340
address so now we are putting<font color="#E5E5E5"> a</font>

439
00:20:48,640 --> 00:20:53,230
breakpoint at an offset of<font color="#CCCCCC"> zero X 400</font>

440
00:20:51,340 --> 00:20:55,059
from<font color="#E5E5E5"> this buffer so because our</font>

441
00:20:53,230 --> 00:20:57,309
<font color="#E5E5E5">shellcode</font><font color="#CCCCCC"> is at this particular offset</font>

442
00:20:55,059 --> 00:21:00,279
<font color="#E5E5E5">so the moment our shell code will get</font>

443
00:20:57,309 --> 00:21:12,309
<font color="#E5E5E5">coded control</font><font color="#CCCCCC"> at the web the breakpoint</font>

444
00:21:00,279 --> 00:21:14,350
will hit so here we get the execution so

445
00:21:12,309 --> 00:21:20,730
now our<font color="#CCCCCC"> cell code has started executing</font>

446
00:21:14,350 --> 00:21:23,949
so now we will go in assembly view and

447
00:21:20,730 --> 00:21:26,020
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> shell code so the very first</font>

448
00:21:23,950 --> 00:21:28,840
<font color="#CCCCCC">three statement we are</font><font color="#E5E5E5"> just fetching the</font>

449
00:21:26,020 --> 00:21:31,330
value of the current<font color="#CCCCCC"> TL and storing it</font>

450
00:21:28,840 --> 00:21:33,459
in in<font color="#E5E5E5"> X</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> register and then we will</font>

451
00:21:31,330 --> 00:21:36,899
print<font color="#E5E5E5"> tax on register value to see in</font>

452
00:21:33,460 --> 00:21:36,899
which<font color="#CCCCCC"> L my shell code is running</font>

453
00:21:43,720 --> 00:21:50,200
so as you can see that<font color="#E5E5E5"> xx1 register has</font>

454
00:21:47,980 --> 00:21:53,200
value<font color="#CCCCCC"> too</font><font color="#E5E5E5"> so that means shellcode is</font>

455
00:21:50,200 --> 00:21:56,590
running<font color="#E5E5E5"> into l2</font><font color="#CCCCCC"> and now what I will</font><font color="#E5E5E5"> do</font>

456
00:21:53,200 --> 00:21:59,470
my<font color="#CCCCCC"> shellcode will get all the will</font><font color="#E5E5E5"> read</font>

457
00:21:56,590 --> 00:22:01,600
all the l2 registers and send the

458
00:21:59,470 --> 00:22:04,179
<font color="#E5E5E5">information back to the l1 so we are</font>

459
00:22:01,600 --> 00:22:08,769
able<font color="#CCCCCC"> to access the heart the hardware</font>

460
00:22:04,179 --> 00:22:10,720
register of<font color="#CCCCCC"> il-2 from</font><font color="#E5E5E5"> me l1 so as you</font>

461
00:22:08,769 --> 00:22:19,570
<font color="#E5E5E5">can</font><font color="#CCCCCC"> see we are able to access all the</font>

462
00:22:10,720 --> 00:22:25,509
hardware register of il-2 from l1 so I

463
00:22:19,570 --> 00:22:27,399
think this concludes the talk and so in

464
00:22:25,509 --> 00:22:29,649
order to<font color="#CCCCCC"> mitigate this problem we need</font>

465
00:22:27,399 --> 00:22:31,479
<font color="#E5E5E5">to pass the system so that</font><font color="#CCCCCC"> the by</font>

466
00:22:29,649 --> 00:22:35,049
default the<font color="#E5E5E5"> KVM is not enabled in the</font>

467
00:22:31,480 --> 00:22:38,220
system and the system is not<font color="#CCCCCC"> vulnerable</font>

468
00:22:35,049 --> 00:22:40,700
against the hypervisor<font color="#CCCCCC"> wastes rootkit</font>

469
00:22:38,220 --> 00:22:47,650
thank you any<font color="#CCCCCC"> questions</font>

470
00:22:40,700 --> 00:22:47,650
[Applause]

