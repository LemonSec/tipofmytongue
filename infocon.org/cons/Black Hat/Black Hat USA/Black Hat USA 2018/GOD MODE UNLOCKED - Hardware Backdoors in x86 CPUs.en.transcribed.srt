1
00:00:00,000 --> 00:00:05,130
<font color="#E5E5E5">all right Thank You</font><font color="#CCCCCC"> Stephanie</font><font color="#E5E5E5"> so welcome</font>

2
00:00:02,820 --> 00:00:07,740
<font color="#E5E5E5">everyone I'm here to talk to you</font><font color="#CCCCCC"> today</font>

3
00:00:05,130 --> 00:00:10,920
about<font color="#E5E5E5"> something that I didn't really</font>

4
00:00:07,740 --> 00:00:13,769
<font color="#CCCCCC">think was possible at first</font><font color="#E5E5E5"> but it's</font>

5
00:00:10,920 --> 00:00:15,450
it's gonna be<font color="#CCCCCC"> interesting so the the</font>

6
00:00:13,769 --> 00:00:16,859
<font color="#CCCCCC">idea of backdoors is kind of</font><font color="#E5E5E5"> thrown</font>

7
00:00:15,450 --> 00:00:19,288
around a<font color="#CCCCCC"> lot today</font><font color="#E5E5E5"> to the point that</font>

8
00:00:16,859 --> 00:00:20,820
it's it's largely lost all meaning<font color="#E5E5E5"> but</font>

9
00:00:19,289 --> 00:00:23,970
what I'm<font color="#E5E5E5"> going to talk to you about</font>

10
00:00:20,820 --> 00:00:25,859
today<font color="#E5E5E5"> is is not the management engine</font>

11
00:00:23,970 --> 00:00:26,939
it's not the platform<font color="#CCCCCC"> security processor</font>

12
00:00:25,859 --> 00:00:29,640
it's none<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> things that people</font><font color="#CCCCCC"> are</font>

13
00:00:26,939 --> 00:00:31,320
normally so concerned about<font color="#E5E5E5"> it's it's</font>

14
00:00:29,640 --> 00:00:33,210
something<font color="#E5E5E5"> that we never really saw</font>

15
00:00:31,320 --> 00:00:36,239
coming<font color="#E5E5E5"> and I think something a lot more</font>

16
00:00:33,210 --> 00:00:38,070
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> but before you again like</font>

17
00:00:36,239 --> 00:00:40,800
<font color="#E5E5E5">any good research start off with a</font>

18
00:00:38,070 --> 00:00:42,719
<font color="#E5E5E5">disclaimer I did all this research on my</font>

19
00:00:40,800 --> 00:00:45,120
own<font color="#CCCCCC"> in</font><font color="#E5E5E5"> my</font><font color="#CCCCCC"> own</font><font color="#E5E5E5"> time I was an independent</font>

20
00:00:42,719 --> 00:00:47,489
<font color="#CCCCCC">consultant</font><font color="#E5E5E5"> and none of this reflects in</font>

21
00:00:45,120 --> 00:00:49,860
any way the beliefs or actions of my

22
00:00:47,489 --> 00:00:51,269
current employer but with<font color="#E5E5E5"> that my name</font>

23
00:00:49,860 --> 00:00:53,309
is Christopher<font color="#E5E5E5"> Thomas</font><font color="#CCCCCC"> I'm a</font><font color="#E5E5E5"> cyber</font>

24
00:00:51,270 --> 00:00:54,570
<font color="#CCCCCC">security researcher</font><font color="#E5E5E5"> I've heard with a</font>

25
00:00:53,309 --> 00:00:56,579
lot of<font color="#E5E5E5"> different things over the</font><font color="#CCCCCC"> years</font>

26
00:00:54,570 --> 00:00:58,469
<font color="#E5E5E5">but</font><font color="#CCCCCC"> uh</font><font color="#E5E5E5"> the last couple years what I've</font>

27
00:00:56,579 --> 00:01:00,750
been<font color="#CCCCCC"> interested in is low level</font>

28
00:00:58,469 --> 00:01:03,090
processor exploitation and vulnerability

29
00:01:00,750 --> 00:01:04,559
research<font color="#E5E5E5"> so let's start</font><font color="#CCCCCC"> off with</font><font color="#E5E5E5"> a demo</font>

30
00:01:03,090 --> 00:01:05,820
<font color="#CCCCCC">of kind of</font><font color="#E5E5E5"> what I mean</font><font color="#CCCCCC"> by that</font><font color="#E5E5E5"> and the</font>

31
00:01:04,559 --> 00:01:07,470
kinds of<font color="#E5E5E5"> things</font><font color="#CCCCCC"> we can unlock and</font>

32
00:01:05,820 --> 00:01:10,798
specifically<font color="#E5E5E5"> let's look at what we're</font>

33
00:01:07,470 --> 00:01:13,200
going<font color="#CCCCCC"> to explore today in this in this</font>

34
00:01:10,799 --> 00:01:15,750
presentation<font color="#E5E5E5"> so I am logged into a</font>

35
00:01:13,200 --> 00:01:17,700
system just<font color="#E5E5E5"> a regular system unmodified</font>

36
00:01:15,750 --> 00:01:19,259
running default OS configuration I'm

37
00:01:17,700 --> 00:01:21,210
logged in and as<font color="#E5E5E5"> an on / privileged</font>

38
00:01:19,259 --> 00:01:25,140
easier<font color="#CCCCCC"> name Delta</font><font color="#E5E5E5"> I'm going to open up</font>

39
00:01:21,210 --> 00:01:26,880
<font color="#CCCCCC">dot C file called demo dot</font><font color="#E5E5E5"> C and m</font><font color="#CCCCCC"> dot C</font>

40
00:01:25,140 --> 00:01:28,350
is a very simple file all we do is we

41
00:01:26,880 --> 00:01:30,449
load an address<font color="#E5E5E5"> into the</font><font color="#CCCCCC"> EAX register</font>

42
00:01:28,350 --> 00:01:32,759
then we've got a<font color="#E5E5E5"> label and then we've</font>

43
00:01:30,450 --> 00:01:34,829
<font color="#E5E5E5">got all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> these bound instructions so</font>

44
00:01:32,759 --> 00:01:36,270
the x86 bound instruction is<font color="#CCCCCC"> not a very</font>

45
00:01:34,829 --> 00:01:38,009
common instruction<font color="#E5E5E5"> you might not be</font>

46
00:01:36,270 --> 00:01:40,590
<font color="#CCCCCC">familiar with bound</font><font color="#E5E5E5"> but the idea behind</font>

47
00:01:38,009 --> 00:01:42,720
the x86 bound instruction is it will

48
00:01:40,590 --> 00:01:44,159
take an address<font color="#CCCCCC"> and it will take a</font>

49
00:01:42,720 --> 00:01:45,960
<font color="#E5E5E5">second address and see if the first</font>

50
00:01:44,159 --> 00:01:47,880
address<font color="#CCCCCC"> is within</font><font color="#E5E5E5"> the bounds specified</font>

51
00:01:45,960 --> 00:01:50,339
by the second address<font color="#E5E5E5"> now you'll notice</font>

52
00:01:47,880 --> 00:01:52,140
<font color="#E5E5E5">this bound instruction has a rather</font>

53
00:01:50,340 --> 00:01:54,149
unusual set of second addresses

54
00:01:52,140 --> 00:01:55,619
associated<font color="#CCCCCC"> with it</font><font color="#E5E5E5"> these are basically</font>

55
00:01:54,149 --> 00:01:57,450
<font color="#E5E5E5">look</font><font color="#CCCCCC"> like random numbers and in fact</font>

56
00:01:55,619 --> 00:01:59,969
this processor does not have access<font color="#E5E5E5"> to</font>

57
00:01:57,450 --> 00:02:02,070
<font color="#CCCCCC">the memory</font><font color="#E5E5E5"> at that</font><font color="#CCCCCC"> address that's</font><font color="#E5E5E5"> being</font>

58
00:01:59,969 --> 00:02:03,658
specified<font color="#CCCCCC"> and like anything else in x86</font>

59
00:02:02,070 --> 00:02:05,490
if you don't have<font color="#CCCCCC"> access</font><font color="#E5E5E5"> to the memory</font>

60
00:02:03,659 --> 00:02:07,350
<font color="#CCCCCC">that you're trying to</font><font color="#E5E5E5"> use you will get</font><font color="#CCCCCC"> a</font>

61
00:02:05,490 --> 00:02:09,478
general protection exception or in Linux

62
00:02:07,350 --> 00:02:11,730
a segmentation<font color="#E5E5E5"> fault</font><font color="#CCCCCC"> so despite the</font><font color="#E5E5E5"> fact</font>

63
00:02:09,479 --> 00:02:13,200
<font color="#CCCCCC">that sorry</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> that despite the</font><font color="#E5E5E5"> fact</font>

64
00:02:11,730 --> 00:02:15,640
<font color="#CCCCCC">that all of</font><font color="#E5E5E5"> these</font>

65
00:02:13,200 --> 00:02:18,720
registers we know are going<font color="#E5E5E5"> to cause</font>

66
00:02:15,640 --> 00:02:21,190
segmentation faults at<font color="#E5E5E5"> the at the end</font>

67
00:02:18,720 --> 00:02:23,410
<font color="#E5E5E5">we're</font><font color="#CCCCCC"> still going</font><font color="#E5E5E5"> to try to launch a</font>

68
00:02:21,190 --> 00:02:25,210
shell<font color="#E5E5E5"> and see if anything</font><font color="#CCCCCC"> happens</font><font color="#E5E5E5"> so</font>

69
00:02:23,410 --> 00:02:30,010
let's let's give this<font color="#E5E5E5"> a try</font><font color="#CCCCCC"> we'll</font>

70
00:02:25,210 --> 00:02:32,110
compile this little<font color="#E5E5E5"> program</font><font color="#CCCCCC"> we will</font>

71
00:02:30,010 --> 00:02:34,120
<font color="#E5E5E5">execute it and sure enough</font><font color="#CCCCCC"> just like</font><font color="#E5E5E5"> we</font>

72
00:02:32,110 --> 00:02:35,950
expected we get a segmentation<font color="#E5E5E5"> fault</font><font color="#CCCCCC"> and</font>

73
00:02:34,120 --> 00:02:37,870
our user hasn't<font color="#E5E5E5"> changed so that's</font>

74
00:02:35,950 --> 00:02:39,399
something<font color="#E5E5E5"> terribly interesting here but</font>

75
00:02:37,870 --> 00:02:40,959
if I go back into<font color="#E5E5E5"> this program I'm gonna</font>

76
00:02:39,400 --> 00:02:43,390
make one tiny little<font color="#E5E5E5"> change I'm going to</font>

77
00:02:40,959 --> 00:02:45,280
add wine x86 instruction it's an

78
00:02:43,390 --> 00:02:47,320
<font color="#E5E5E5">instruction that's so secure or so</font>

79
00:02:45,280 --> 00:02:50,050
obscure and unknown<font color="#CCCCCC"> it doesn't actually</font>

80
00:02:47,320 --> 00:02:52,299
have<font color="#E5E5E5"> a name in fact it doesn't it's not</font>

81
00:02:50,050 --> 00:02:54,700
<font color="#E5E5E5">supposed to exist</font><font color="#CCCCCC"> I have to write this</font>

82
00:02:52,300 --> 00:02:55,810
in<font color="#E5E5E5"> machine code</font><font color="#CCCCCC"> Oh</font><font color="#E5E5E5"> F 3 F is the one</font>

83
00:02:54,700 --> 00:02:58,630
<font color="#CCCCCC">instruction I'm going to add to the</font>

84
00:02:55,810 --> 00:03:00,340
beginning<font color="#E5E5E5"> of my executable</font><font color="#CCCCCC"> and when I</font>

85
00:02:58,630 --> 00:03:01,989
execute<font color="#E5E5E5"> this</font><font color="#CCCCCC"> instruction the fundamental</font>

86
00:03:00,340 --> 00:03:03,700
nature of<font color="#CCCCCC"> all the subsequent</font><font color="#E5E5E5"> valid</font>

87
00:03:01,989 --> 00:03:04,900
instructions is going to change<font color="#E5E5E5"> and what</font>

88
00:03:03,700 --> 00:03:06,609
<font color="#E5E5E5">I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> able to do use</font><font color="#E5E5E5"> those</font>

89
00:03:04,900 --> 00:03:08,380
instructions to reach directly<font color="#E5E5E5"> into the</font>

90
00:03:06,610 --> 00:03:10,270
kernel<font color="#CCCCCC"> bypassing all the processors</font>

91
00:03:08,380 --> 00:03:13,690
<font color="#E5E5E5">security mechanisms in order</font><font color="#CCCCCC"> to give</font>

92
00:03:10,270 --> 00:03:15,870
myself<font color="#E5E5E5"> root access on this</font><font color="#CCCCCC"> system so</font>

93
00:03:13,690 --> 00:03:15,870
this

94
00:03:20,099 --> 00:03:27,159
so this kind<font color="#E5E5E5"> of thing is</font><font color="#CCCCCC"> not supposed to</font>

95
00:03:23,310 --> 00:03:28,719
<font color="#E5E5E5">exist</font><font color="#CCCCCC"> and the</font><font color="#E5E5E5"> rest of this presentation</font>

96
00:03:27,159 --> 00:03:31,209
<font color="#CCCCCC">is</font><font color="#E5E5E5"> gonna be a long convoluted journey</font>

97
00:03:28,719 --> 00:03:33,370
<font color="#CCCCCC">sort</font><font color="#E5E5E5"> of seeing how I came</font><font color="#CCCCCC"> across this</font>

98
00:03:31,209 --> 00:03:35,560
this feature<font color="#E5E5E5"> and the whole thing begins</font>

99
00:03:33,370 --> 00:03:37,000
with the<font color="#E5E5E5"> idea of rings of privilege so</font>

100
00:03:35,560 --> 00:03:39,489
in the<font color="#E5E5E5"> beginning thirty years ago in at</font>

101
00:03:37,000 --> 00:03:41,470
<font color="#E5E5E5">86 there was no concept of separation of</font>

102
00:03:39,489 --> 00:03:42,879
privileges<font color="#E5E5E5"> on the processor</font><font color="#CCCCCC"> basically</font>

103
00:03:41,470 --> 00:03:44,260
any code running<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> processor had</font>

104
00:03:42,879 --> 00:03:45,730
the same permissions as any other code

105
00:03:44,260 --> 00:03:47,290
running<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> processor</font><font color="#E5E5E5"> and things were</font>

106
00:03:45,730 --> 00:03:49,358
basically<font color="#CCCCCC"> chaos there was nothing</font>

107
00:03:47,290 --> 00:03:51,069
stopping<font color="#E5E5E5"> minesweeper from having the</font>

108
00:03:49,359 --> 00:03:52,930
exact same privileges as<font color="#E5E5E5"> the kernel</font><font color="#CCCCCC"> and</font>

109
00:03:51,069 --> 00:03:56,018
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> not a good situation to begin and</font>

110
00:03:52,930 --> 00:03:57,549
so<font color="#CCCCCC"> thirty</font><font color="#E5E5E5"> years ago</font><font color="#CCCCCC"> they implemented the</font>

111
00:03:56,019 --> 00:03:59,799
<font color="#E5E5E5">idea of separation of privileges</font>

112
00:03:57,549 --> 00:04:01,599
different rings of execution on<font color="#E5E5E5"> x86</font>

113
00:03:59,799 --> 00:04:04,480
processors and the idea<font color="#E5E5E5"> was something</font>

114
00:04:01,599 --> 00:04:06,280
<font color="#E5E5E5">like this only</font><font color="#CCCCCC"> some code would have</font>

115
00:04:04,480 --> 00:04:08,260
complete unfettered access to<font color="#E5E5E5"> the entire</font>

116
00:04:06,280 --> 00:04:09,849
system<font color="#E5E5E5"> unrestricted access to the</font>

117
00:04:08,260 --> 00:04:11,500
<font color="#CCCCCC">system's</font><font color="#E5E5E5"> hardware</font><font color="#CCCCCC"> and now</font><font color="#E5E5E5"> is the kernel</font>

118
00:04:09,849 --> 00:04:14,349
code that<font color="#E5E5E5"> would live inside of the most</font>

119
00:04:11,500 --> 00:04:16,029
privileged<font color="#CCCCCC"> ring-ring 0</font><font color="#E5E5E5"> then outside of</font>

120
00:04:14,349 --> 00:04:17,500
<font color="#E5E5E5">ring</font><font color="#CCCCCC"> 0 slightly less privileged code</font>

121
00:04:16,029 --> 00:04:19,418
would live in<font color="#E5E5E5"> the ring line less</font>

122
00:04:17,500 --> 00:04:21,009
privileged<font color="#CCCCCC"> madden ring</font><font color="#E5E5E5"> - and our least</font>

123
00:04:19,418 --> 00:04:22,750
privileged code where<font color="#CCCCCC"> we would throw all</font>

124
00:04:21,009 --> 00:04:24,639
of<font color="#E5E5E5"> our user code would live in ring</font><font color="#CCCCCC"> 3</font>

125
00:04:22,750 --> 00:04:27,070
and then fundamental idea<font color="#E5E5E5"> of separation</font>

126
00:04:24,639 --> 00:04:28,930
is why<font color="#E5E5E5"> we can have some sort</font><font color="#CCCCCC"> of</font>

127
00:04:27,070 --> 00:04:31,060
<font color="#E5E5E5">confidence that our mind super game is</font>

128
00:04:28,930 --> 00:04:32,289
not<font color="#CCCCCC"> also harvesting credentials from</font><font color="#E5E5E5"> my</font>

129
00:04:31,060 --> 00:04:35,320
banking account<font color="#E5E5E5"> sitting in another</font>

130
00:04:32,289 --> 00:04:37,360
process because in order for ring<font color="#CCCCCC"> 3 code</font>

131
00:04:35,320 --> 00:04:40,000
to do<font color="#E5E5E5"> anything of importance it has to</font>

132
00:04:37,360 --> 00:04:42,550
go through very<font color="#CCCCCC"> very strict</font><font color="#E5E5E5"> careful</font>

133
00:04:40,000 --> 00:04:45,370
<font color="#CCCCCC">hardware</font><font color="#E5E5E5"> security checks in order to ask</font>

134
00:04:42,550 --> 00:04:47,650
<font color="#E5E5E5">ring</font><font color="#CCCCCC"> 0 to do something for</font><font color="#E5E5E5"> it so that's</font>

135
00:04:45,370 --> 00:04:50,830
the fundamental<font color="#CCCCCC"> basis of</font><font color="#E5E5E5"> all security in</font>

136
00:04:47,650 --> 00:04:54,280
x86<font color="#E5E5E5"> processors today</font><font color="#CCCCCC"> but we</font><font color="#E5E5E5"> started</font>

137
00:04:50,830 --> 00:04:55,870
digging deeper basically this this<font color="#E5E5E5"> ring</font>

138
00:04:54,280 --> 00:04:57,250
model<font color="#CCCCCC"> wasn't</font><font color="#E5E5E5"> well suited for running</font>

139
00:04:55,870 --> 00:04:58,780
<font color="#E5E5E5">multiple operating</font><font color="#CCCCCC"> systems on one</font>

140
00:04:57,250 --> 00:05:00,400
<font color="#E5E5E5">processor we needed something more</font>

141
00:04:58,780 --> 00:05:01,840
<font color="#E5E5E5">privileged</font><font color="#CCCCCC"> than ring zero in order</font><font color="#E5E5E5"> to</font>

142
00:05:00,400 --> 00:05:03,429
<font color="#E5E5E5">handle that so when we invented the</font>

143
00:05:01,840 --> 00:05:04,960
hypervisor<font color="#CCCCCC"> and since it was more</font>

144
00:05:03,430 --> 00:05:06,310
privileged<font color="#CCCCCC"> than ring zero</font><font color="#E5E5E5"> colloquially</font>

145
00:05:04,960 --> 00:05:07,870
we kind of<font color="#E5E5E5"> called that ring</font><font color="#CCCCCC"> minus</font><font color="#E5E5E5"> one</font>

146
00:05:06,310 --> 00:05:09,760
but there's something to<font color="#CCCCCC"> do on</font><font color="#E5E5E5"> the</font>

147
00:05:07,870 --> 00:05:11,289
<font color="#E5E5E5">hypervisor to do we threw all those</font>

148
00:05:09,760 --> 00:05:12,460
things into system management<font color="#CCCCCC"> mode</font><font color="#E5E5E5"> and</font>

149
00:05:11,289 --> 00:05:14,169
since<font color="#E5E5E5"> that</font><font color="#CCCCCC"> was more privileged in</font><font color="#E5E5E5"> the</font>

150
00:05:12,460 --> 00:05:15,250
hypervisor we called<font color="#CCCCCC"> that ring -2 and</font>

151
00:05:14,169 --> 00:05:16,479
then a couple<font color="#E5E5E5"> of years</font><font color="#CCCCCC"> ago some</font>

152
00:05:15,250 --> 00:05:18,990
researchers<font color="#E5E5E5"> came along and they said</font><font color="#CCCCCC"> hey</font>

153
00:05:16,479 --> 00:05:21,130
there's this entirely different

154
00:05:18,990 --> 00:05:23,050
<font color="#E5E5E5">processor sitting on the platform</font><font color="#CCCCCC"> that</font>

155
00:05:21,130 --> 00:05:25,000
can actually<font color="#E5E5E5"> do things that the x86</font>

156
00:05:23,050 --> 00:05:26,590
<font color="#E5E5E5">processor can't do so we started calling</font>

157
00:05:25,000 --> 00:05:28,300
<font color="#CCCCCC">out</font><font color="#E5E5E5"> ring minus</font><font color="#CCCCCC"> 3 and it's just sort</font><font color="#E5E5E5"> of</font>

158
00:05:26,590 --> 00:05:30,250
getting ridiculous at<font color="#E5E5E5"> this point but if</font>

159
00:05:28,300 --> 00:05:32,449
you've<font color="#E5E5E5"> been following this research as</font>

160
00:05:30,250 --> 00:05:34,129
<font color="#CCCCCC">it sort of expanded over</font><font color="#E5E5E5"> the last 20</font>

161
00:05:32,449 --> 00:05:35,599
<font color="#E5E5E5">years in the back of your head</font><font color="#CCCCCC"> you</font>

162
00:05:34,129 --> 00:05:37,400
<font color="#E5E5E5">probably even thing like can</font><font color="#CCCCCC"> we go</font>

163
00:05:35,599 --> 00:05:39,229
further how deep does this rabbit hole

164
00:05:37,400 --> 00:05:42,080
go and that's<font color="#CCCCCC"> sort of the</font><font color="#E5E5E5"> question</font><font color="#CCCCCC"> I I</font>

165
00:05:39,229 --> 00:05:45,110
set out the answer when I went down this

166
00:05:42,080 --> 00:05:46,849
path<font color="#CCCCCC"> so when I'm about sort of beginning</font>

167
00:05:45,110 --> 00:05:49,159
<font color="#E5E5E5">research on something really big and</font>

168
00:05:46,849 --> 00:05:51,229
<font color="#E5E5E5">unknown</font><font color="#CCCCCC"> I found a</font><font color="#E5E5E5"> good</font><font color="#CCCCCC"> place to</font><font color="#E5E5E5"> start is</font>

169
00:05:49,159 --> 00:05:52,639
sometimes with patents because sometimes

170
00:05:51,229 --> 00:05:53,719
you can find<font color="#CCCCCC"> information in patents that</font>

171
00:05:52,639 --> 00:05:56,949
you can't find in<font color="#CCCCCC"> any other</font>

172
00:05:53,719 --> 00:05:59,180
documentation<font color="#CCCCCC"> so given this idea</font><font color="#E5E5E5"> of this</font>

173
00:05:56,949 --> 00:06:01,610
<font color="#CCCCCC">privilege model of these rings of</font>

174
00:05:59,180 --> 00:06:02,930
privilege and<font color="#CCCCCC"> at 86 imagination surprise</font>

175
00:06:01,610 --> 00:06:05,180
<font color="#E5E5E5">and</font><font color="#CCCCCC"> that sifting through patents</font><font color="#E5E5E5"> and I</font>

176
00:06:02,930 --> 00:06:07,219
saw this little blurb<font color="#E5E5E5"> just sort of</font>

177
00:06:05,180 --> 00:06:10,099
nonchalantly buried in the in the<font color="#E5E5E5"> middle</font>

178
00:06:07,219 --> 00:06:12,589
of a patent<font color="#CCCCCC"> AMA completely different</font>

179
00:06:10,099 --> 00:06:14,449
idea<font color="#CCCCCC"> it said additionally accessing some</font>

180
00:06:12,589 --> 00:06:15,740
of the internal control registers can

181
00:06:14,449 --> 00:06:18,139
enable<font color="#CCCCCC"> the user to bypass security</font>

182
00:06:15,740 --> 00:06:20,990
mechanisms<font color="#E5E5E5"> for example allowing ring</font><font color="#CCCCCC"> 0</font>

183
00:06:18,139 --> 00:06:23,449
access at ring<font color="#E5E5E5"> 3 my head kind of</font>

184
00:06:20,990 --> 00:06:25,159
exploded when<font color="#E5E5E5"> I saw this like all of our</font>

185
00:06:23,449 --> 00:06:28,069
security<font color="#E5E5E5"> on activity 6 is based around</font>

186
00:06:25,159 --> 00:06:29,599
this idea of rings of privilege and this

187
00:06:28,069 --> 00:06:31,849
little blurb is telling me<font color="#E5E5E5"> there may be</font>

188
00:06:29,599 --> 00:06:33,949
some<font color="#E5E5E5"> way to circumvent all of that in</font>

189
00:06:31,849 --> 00:06:35,449
<font color="#E5E5E5">one fell swoop but they go on to say in</font>

190
00:06:33,949 --> 00:06:36,979
addition<font color="#E5E5E5"> these control registers may</font>

191
00:06:35,449 --> 00:06:39,379
reveal information<font color="#E5E5E5"> that the processor</font>

192
00:06:36,979 --> 00:06:40,938
designers<font color="#E5E5E5"> wish to keep proprietary well</font>

193
00:06:39,379 --> 00:06:43,069
that's kind of understandable<font color="#E5E5E5"> if I had</font>

194
00:06:40,939 --> 00:06:44,719
some<font color="#E5E5E5"> sort of invention for all the</font>

195
00:06:43,069 --> 00:06:45,649
<font color="#E5E5E5">privilege mechanisms on the processor</font>

196
00:06:44,719 --> 00:06:47,779
I'd probably want<font color="#CCCCCC"> to keep that</font>

197
00:06:45,649 --> 00:06:49,819
<font color="#E5E5E5">proprietary</font><font color="#CCCCCC"> too but then they go on</font><font color="#E5E5E5"> to</font>

198
00:06:47,779 --> 00:06:51,110
<font color="#CCCCCC">say for these reasons the various x86</font>

199
00:06:49,819 --> 00:06:52,969
processor<font color="#E5E5E5"> manufacturers have not</font>

200
00:06:51,110 --> 00:06:54,919
<font color="#E5E5E5">publicly documented any description of</font>

201
00:06:52,969 --> 00:06:57,589
the address or function<font color="#E5E5E5"> some of the</font>

202
00:06:54,919 --> 00:06:58,729
control<font color="#CCCCCC"> MSR so so that makes sense but</font>

203
00:06:57,589 --> 00:07:00,319
that<font color="#E5E5E5"> means we're probably dealing with</font>

204
00:06:58,729 --> 00:07:02,870
something undocumented that<font color="#E5E5E5"> that we</font>

205
00:07:00,319 --> 00:07:04,370
don't have a lot<font color="#E5E5E5"> of access to so I did</font>

206
00:07:02,870 --> 00:07:05,599
what any<font color="#CCCCCC"> rational person would do in</font>

207
00:07:04,370 --> 00:07:07,159
this<font color="#E5E5E5"> situation I went out and bought</font>

208
00:07:05,599 --> 00:07:09,409
<font color="#CCCCCC">fifty-seven computers to start doing</font>

209
00:07:07,159 --> 00:07:11,990
<font color="#E5E5E5">some research on to see if I could dig</font>

210
00:07:09,409 --> 00:07:14,629
into this<font color="#E5E5E5"> idea a little bit further so I</font>

211
00:07:11,990 --> 00:07:16,159
had some idea based<font color="#E5E5E5"> on the patent owner</font>

212
00:07:14,629 --> 00:07:18,020
and the patent<font color="#E5E5E5"> time frame I had some</font>

213
00:07:16,159 --> 00:07:20,449
idea for what processor I might be

214
00:07:18,020 --> 00:07:21,770
trying<font color="#E5E5E5"> to look at here but</font><font color="#CCCCCC"> but patents</font>

215
00:07:20,449 --> 00:07:23,180
are a funny<font color="#CCCCCC"> thing where the intellectual</font>

216
00:07:21,770 --> 00:07:25,219
property gets bought by different

217
00:07:23,180 --> 00:07:27,020
entities<font color="#CCCCCC"> and ideas</font><font color="#E5E5E5"> sort of trickle</font>

218
00:07:25,219 --> 00:07:30,319
through<font color="#E5E5E5"> the industry in weird ways I</font>

219
00:07:27,020 --> 00:07:33,649
sort of<font color="#E5E5E5"> want to cast a wide net to try</font>

220
00:07:30,319 --> 00:07:36,529
to analyze<font color="#E5E5E5"> this this idea</font><font color="#CCCCCC"> of a ring</font>

221
00:07:33,649 --> 00:07:39,589
<font color="#E5E5E5">circumvention mechanism but eventually I</font>

222
00:07:36,529 --> 00:07:42,860
settled on was a processor with a system

223
00:07:39,589 --> 00:07:45,079
with a<font color="#CCCCCC"> be a C 3 processor so</font><font color="#E5E5E5"> B is one of</font>

224
00:07:42,860 --> 00:07:46,100
the three major x86 manufacturers and<font color="#CCCCCC"> C</font>

225
00:07:45,079 --> 00:07:48,800
<font color="#CCCCCC">Freeza</font>

226
00:07:46,100 --> 00:07:50,240
<font color="#E5E5E5">that they had a while back</font><font color="#CCCCCC"> so these were</font>

227
00:07:48,800 --> 00:07:51,800
specifically targeted<font color="#E5E5E5"> at embedded</font>

228
00:07:50,240 --> 00:07:52,660
systems<font color="#CCCCCC"> they're marketed towards</font>

229
00:07:51,800 --> 00:07:55,640
point-of-sales

230
00:07:52,660 --> 00:07:56,840
kiosks ATMs<font color="#E5E5E5"> on gaming since we're in</font>

231
00:07:55,640 --> 00:07:58,880
Vegas<font color="#E5E5E5"> you might want to start poking</font>

232
00:07:56,840 --> 00:08:00,770
<font color="#E5E5E5">around after this digital digital</font>

233
00:07:58,880 --> 00:08:02,750
signage<font color="#E5E5E5"> healthcare digital media</font>

234
00:08:00,770 --> 00:08:04,880
industrial automation<font color="#CCCCCC"> and of course you</font>

235
00:08:02,750 --> 00:08:07,460
can still find them and<font color="#E5E5E5"> PCs and laptops</font>

236
00:08:04,880 --> 00:08:09,170
<font color="#CCCCCC">so this is a</font><font color="#E5E5E5"> system I</font><font color="#CCCCCC"> eventually</font><font color="#E5E5E5"> pull</font>

237
00:08:07,460 --> 00:08:10,340
off my shelf<font color="#CCCCCC"> for this research and what</font>

238
00:08:09,170 --> 00:08:12,650
I'm going to talk<font color="#CCCCCC"> about for the</font><font color="#E5E5E5"> rest of</font>

239
00:08:10,340 --> 00:08:16,010
<font color="#E5E5E5">this presentation</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a thin client</font>

240
00:08:12,650 --> 00:08:19,969
with<font color="#E5E5E5"> a c3</font><font color="#CCCCCC"> Amaya core inside of it and</font>

241
00:08:16,010 --> 00:08:21,560
<font color="#E5E5E5">I'll talk</font><font color="#CCCCCC"> later on</font><font color="#E5E5E5"> about how this issue</font>

242
00:08:19,970 --> 00:08:22,730
might affect other processors<font color="#E5E5E5"> but for</font>

243
00:08:21,560 --> 00:08:25,520
now that's<font color="#E5E5E5"> the system we're going to be</font>

244
00:08:22,730 --> 00:08:27,470
focused on now I was unable to<font color="#E5E5E5"> find a</font>

245
00:08:25,520 --> 00:08:28,729
developer manual for this processor that

246
00:08:27,470 --> 00:08:30,680
<font color="#E5E5E5">would have been a really useful starting</font>

247
00:08:28,730 --> 00:08:32,120
<font color="#CCCCCC">point but you</font><font color="#E5E5E5"> know even the patent sort</font>

248
00:08:30,680 --> 00:08:34,280
of hinted at the idea<font color="#E5E5E5"> that a lot</font><font color="#CCCCCC"> of this</font>

249
00:08:32,120 --> 00:08:35,960
<font color="#E5E5E5">stuff's not going to be documented so</font>

250
00:08:34,280 --> 00:08:38,689
<font color="#CCCCCC">that means we</font><font color="#E5E5E5"> have to find some other</font>

251
00:08:35,960 --> 00:08:40,640
path forward<font color="#E5E5E5"> so what you can do in the</font>

252
00:08:38,690 --> 00:08:43,340
<font color="#E5E5E5">situation what I did was sort</font><font color="#CCCCCC"> of try to</font>

253
00:08:40,640 --> 00:08:45,500
follow a trail of patent breadcrumbs

254
00:08:43,340 --> 00:08:46,970
<font color="#CCCCCC">just try to read</font><font color="#E5E5E5"> different patents</font><font color="#CCCCCC"> that</font>

255
00:08:45,500 --> 00:08:48,590
might be<font color="#CCCCCC"> related to one another in order</font>

256
00:08:46,970 --> 00:08:51,920
<font color="#E5E5E5">to try</font><font color="#CCCCCC"> to piece together as much</font>

257
00:08:48,590 --> 00:08:54,440
<font color="#CCCCCC">information</font><font color="#E5E5E5"> about this this</font><font color="#CCCCCC"> backdoor</font><font color="#E5E5E5"> as</font>

258
00:08:51,920 --> 00:08:55,729
as I can so this this quote isn't

259
00:08:54,440 --> 00:08:57,740
<font color="#E5E5E5">actually from one of the patents I ended</font>

260
00:08:55,730 --> 00:08:59,930
up<font color="#E5E5E5"> using this was just another patent</font>

261
00:08:57,740 --> 00:09:01,910
that<font color="#E5E5E5"> I stumbled</font><font color="#CCCCCC"> across along the way</font><font color="#E5E5E5"> but</font>

262
00:08:59,930 --> 00:09:03,199
in<font color="#E5E5E5"> order to give you some idea</font><font color="#CCCCCC"> of what</font>

263
00:09:01,910 --> 00:09:04,699
kind<font color="#CCCCCC"> of things you're dealing with</font><font color="#E5E5E5"> when</font>

264
00:09:03,200 --> 00:09:06,440
you're<font color="#E5E5E5"> reading this patent literature I</font>

265
00:09:04,700 --> 00:09:08,420
<font color="#E5E5E5">want to</font><font color="#CCCCCC"> to quickly give you</font><font color="#E5E5E5"> an example</font>

266
00:09:06,440 --> 00:09:10,160
<font color="#E5E5E5">of some some patents speak</font>

267
00:09:08,420 --> 00:09:12,140
so this says figure 3 shows an

268
00:09:10,160 --> 00:09:14,270
embodiment of a cache memory<font color="#CCCCCC"> referring</font>

269
00:09:12,140 --> 00:09:16,069
<font color="#E5E5E5">to figure 3 in</font><font color="#CCCCCC"> 1 embodiment cache memory</font>

270
00:09:14,270 --> 00:09:18,020
<font color="#CCCCCC">322 from</font><font color="#E5E5E5"> multi-way cache memory and</font>

271
00:09:16,070 --> 00:09:19,850
another embodiment cache memory 320

272
00:09:18,020 --> 00:09:21,500
comprises multiple<font color="#CCCCCC"> physical sections in</font>

273
00:09:19,850 --> 00:09:22,940
<font color="#E5E5E5">one embodiment cache memory 320 is</font>

274
00:09:21,500 --> 00:09:24,920
logically<font color="#E5E5E5"> divided into multiple sections</font>

275
00:09:22,940 --> 00:09:26,570
<font color="#E5E5E5">in</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> embodiment cache memory 320</font>

276
00:09:24,920 --> 00:09:29,240
includes<font color="#E5E5E5"> four cache</font><font color="#CCCCCC"> ways ie cache weigh</font>

277
00:09:26,570 --> 00:09:32,090
310 cache way 311<font color="#E5E5E5"> catch way 312 and</font>

278
00:09:29,240 --> 00:09:34,310
<font color="#CCCCCC">cashflow 314 in one embodiment a process</font>

279
00:09:32,090 --> 00:09:36,950
<font color="#CCCCCC">or</font><font color="#E5E5E5"> sequester's one or more cache ways to</font>

280
00:09:34,310 --> 00:09:39,079
store or at or<font color="#E5E5E5"> to xq processor microcode</font>

281
00:09:36,950 --> 00:09:40,790
<font color="#E5E5E5">like this is the most</font><font color="#CCCCCC"> convoluted</font>

282
00:09:39,080 --> 00:09:43,340
legalese I've ever had to<font color="#E5E5E5"> sift through</font>

283
00:09:40,790 --> 00:09:45,680
<font color="#E5E5E5">and it is just so incredibly tedious</font>

284
00:09:43,340 --> 00:09:47,870
<font color="#CCCCCC">trying to drive any information from</font>

285
00:09:45,680 --> 00:09:49,489
patent<font color="#CCCCCC"> literature</font><font color="#E5E5E5"> so you can imagine how</font>

286
00:09:47,870 --> 00:09:52,790
awful<font color="#E5E5E5"> it is to try</font><font color="#CCCCCC"> to sift</font><font color="#E5E5E5"> through a</font>

287
00:09:49,490 --> 00:09:55,070
<font color="#E5E5E5">hundred pages of of this kind of text</font>

288
00:09:52,790 --> 00:09:57,260
and<font color="#CCCCCC"> just to put</font><font color="#E5E5E5"> that in perspective</font><font color="#CCCCCC"> that</font>

289
00:09:55,070 --> 00:09:59,480
<font color="#CCCCCC">one four-page patent had</font>

290
00:09:57,260 --> 00:10:02,300
phrase in<font color="#E5E5E5"> one embodiment</font><font color="#CCCCCC"> a hundred and</font>

291
00:09:59,480 --> 00:10:04,550
<font color="#E5E5E5">forty-two times like trying to do</font>

292
00:10:02,300 --> 00:10:07,250
research<font color="#CCCCCC"> this way is absolutely</font><font color="#E5E5E5"> painful</font>

293
00:10:04,550 --> 00:10:09,469
<font color="#E5E5E5">but if you're persistent</font><font color="#CCCCCC"> it can it can</font>

294
00:10:07,250 --> 00:10:11,660
start to<font color="#CCCCCC"> pay off so after a lot of</font><font color="#E5E5E5"> work</font>

295
00:10:09,470 --> 00:10:13,970
I know it in on these six patents<font color="#CCCCCC"> that</font>

296
00:10:11,660 --> 00:10:15,140
<font color="#CCCCCC">seem to have some loosely related ideas</font>

297
00:10:13,970 --> 00:10:17,570
that might<font color="#E5E5E5"> be able to point me in the</font>

298
00:10:15,140 --> 00:10:21,410
right direction for circumventing the

299
00:10:17,570 --> 00:10:23,000
<font color="#CCCCCC">ring privileged model in x86 so some of</font>

300
00:10:21,410 --> 00:10:25,490
<font color="#E5E5E5">the key</font><font color="#CCCCCC"> ideas from</font><font color="#E5E5E5"> these patents</font><font color="#CCCCCC"> that I</font>

301
00:10:23,000 --> 00:10:28,000
sort<font color="#E5E5E5"> of sort of narrowed in on was it</font>

302
00:10:25,490 --> 00:10:31,910
<font color="#CCCCCC">looked like at the time</font><font color="#E5E5E5"> via was</font>

303
00:10:28,000 --> 00:10:34,460
<font color="#E5E5E5">embedding</font><font color="#CCCCCC"> amnon</font><font color="#E5E5E5"> x86 core alongside their</font>

304
00:10:31,910 --> 00:10:36,860
x86 cores in<font color="#CCCCCC"> the c3 processor</font><font color="#E5E5E5"> this non</font>

305
00:10:34,460 --> 00:10:38,420
x86 core was a risk<font color="#E5E5E5"> type</font><font color="#CCCCCC"> Arvika</font>

306
00:10:36,860 --> 00:10:40,040
architecture and the patents didn't have

307
00:10:38,420 --> 00:10:41,750
a consistent term for<font color="#E5E5E5"> this but I started</font>

308
00:10:40,040 --> 00:10:44,060
calling<font color="#E5E5E5"> this the deeply embedded core</font>

309
00:10:41,750 --> 00:10:45,380
the<font color="#CCCCCC"> debt they also talked about</font>

310
00:10:44,060 --> 00:10:47,510
<font color="#E5E5E5">something called a global configuration</font>

311
00:10:45,380 --> 00:10:50,150
register it was a register that<font color="#CCCCCC"> would be</font>

312
00:10:47,510 --> 00:10:52,100
exposed to the x86<font color="#CCCCCC"> core</font><font color="#E5E5E5"> through a model</font>

313
00:10:50,150 --> 00:10:54,380
specific register and the patent

314
00:10:52,100 --> 00:10:57,020
suggested that<font color="#E5E5E5"> this global configuration</font>

315
00:10:54,380 --> 00:10:59,360
register could activate the<font color="#E5E5E5"> RISC core</font>

316
00:10:57,020 --> 00:11:01,010
they also talked<font color="#CCCCCC"> about what was</font><font color="#E5E5E5"> called a</font>

317
00:10:59,360 --> 00:11:03,200
launch instruction it<font color="#E5E5E5"> would be a new</font>

318
00:11:01,010 --> 00:11:05,450
instruction added to the x86<font color="#CCCCCC"> instruction</font>

319
00:11:03,200 --> 00:11:07,340
set architecture where once the<font color="#CCCCCC"> risk</font>

320
00:11:05,450 --> 00:11:09,290
<font color="#CCCCCC">core was activated</font><font color="#E5E5E5"> you could use the</font>

321
00:11:07,340 --> 00:11:13,310
launch instruction to start instruction

322
00:11:09,290 --> 00:11:14,630
a sequence of<font color="#CCCCCC"> RISC instructions</font><font color="#E5E5E5"> so so</font>

323
00:11:13,310 --> 00:11:16,010
what does that leave<font color="#CCCCCC"> us well this is all</font>

324
00:11:14,630 --> 00:11:17,960
sort<font color="#CCCCCC"> of</font><font color="#E5E5E5"> without speculation at this</font>

325
00:11:16,010 --> 00:11:19,880
<font color="#E5E5E5">point is piecing together</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> pieces</font>

326
00:11:17,960 --> 00:11:21,440
<font color="#E5E5E5">of different patents but if our</font>

327
00:11:19,880 --> 00:11:24,350
assumptions about<font color="#E5E5E5"> this deeply embedded</font>

328
00:11:21,440 --> 00:11:26,630
core are correct<font color="#CCCCCC"> that means they</font><font color="#E5E5E5"> could</font>

329
00:11:24,350 --> 00:11:29,060
be<font color="#E5E5E5"> used as sort of a</font><font color="#CCCCCC"> backdoor</font><font color="#E5E5E5"> or a means</font>

330
00:11:26,630 --> 00:11:30,680
of surreptitiously circumventing all of

331
00:11:29,060 --> 00:11:33,199
the processor security checks so that's

332
00:11:30,680 --> 00:11:35,599
<font color="#CCCCCC">obviously something</font><font color="#E5E5E5"> worth diving into a</font>

333
00:11:33,200 --> 00:11:36,700
lot further so let's start at the

334
00:11:35,600 --> 00:11:40,280
beginning<font color="#E5E5E5"> how would we go about</font>

335
00:11:36,700 --> 00:11:41,870
activating<font color="#E5E5E5"> this circumvention mechanism</font>

336
00:11:40,280 --> 00:11:43,760
well there's there's three little

337
00:11:41,870 --> 00:11:45,470
tidbits from<font color="#E5E5E5"> the various patents I was</font>

338
00:11:43,760 --> 00:11:47,090
able<font color="#CCCCCC"> to pick up on that might</font><font color="#E5E5E5"> point us</font>

339
00:11:45,470 --> 00:11:48,830
in the right direction<font color="#E5E5E5"> here we've got</font>

340
00:11:47,090 --> 00:11:50,330
one patent that<font color="#E5E5E5"> says a model specific</font>

341
00:11:48,830 --> 00:11:52,370
register can<font color="#E5E5E5"> be used to circumvent</font>

342
00:11:50,330 --> 00:11:54,020
processor security checks we've got

343
00:11:52,370 --> 00:11:55,190
another<font color="#E5E5E5"> patent that says a model</font>

344
00:11:54,020 --> 00:11:58,100
specific register can<font color="#CCCCCC"> be used to</font>

345
00:11:55,190 --> 00:11:59,780
<font color="#CCCCCC">activate the new instruction in x86</font><font color="#E5E5E5"> and</font>

346
00:11:58,100 --> 00:12:01,760
<font color="#E5E5E5">we've got a third patent that suggests</font>

347
00:11:59,780 --> 00:12:04,819
that a launch instruction can<font color="#E5E5E5"> be used to</font>

348
00:12:01,760 --> 00:12:05,930
switch<font color="#E5E5E5"> to a RISC instruction sequence so</font>

349
00:12:04,820 --> 00:12:07,520
if you put these three things together

350
00:12:05,930 --> 00:12:09,290
and<font color="#E5E5E5"> sort of fill in the</font><font color="#CCCCCC"> gaps it sounds</font>

351
00:12:07,520 --> 00:12:10,439
like there's some model specific

352
00:12:09,290 --> 00:12:12,089
register bit

353
00:12:10,440 --> 00:12:14,460
<font color="#E5E5E5">that enables a new exciting six</font>

354
00:12:12,090 --> 00:12:16,530
instruction that activates a risk cord

355
00:12:14,460 --> 00:12:19,050
that can bypass the processor security

356
00:12:16,530 --> 00:12:20,970
checks<font color="#E5E5E5"> so let's start with the first</font>

357
00:12:19,050 --> 00:12:22,469
step in<font color="#CCCCCC"> that chain this</font><font color="#E5E5E5"> model specific</font>

358
00:12:20,970 --> 00:12:24,150
register so just a<font color="#E5E5E5"> little bit of</font>

359
00:12:22,470 --> 00:12:27,360
background for<font color="#CCCCCC"> people not familiar</font><font color="#E5E5E5"> with</font>

360
00:12:24,150 --> 00:12:29,310
the idea of<font color="#E5E5E5"> MSRs on x86 so MSR SR 64-bit</font>

361
00:12:27,360 --> 00:12:30,450
control registers and<font color="#E5E5E5"> they're really</font>

362
00:12:29,310 --> 00:12:32,160
<font color="#E5E5E5">really very they're used for</font><font color="#CCCCCC"> things like</font>

363
00:12:30,450 --> 00:12:33,450
debugging<font color="#CCCCCC"> and performance monitoring</font><font color="#E5E5E5"> and</font>

364
00:12:32,160 --> 00:12:35,339
cache configuration<font color="#CCCCCC"> and feature</font>

365
00:12:33,450 --> 00:12:37,110
configuration basically anything<font color="#E5E5E5"> not</font>

366
00:12:35,340 --> 00:12:40,470
directly related to computation<font color="#E5E5E5"> can be</font>

367
00:12:37,110 --> 00:12:42,060
talked into<font color="#CCCCCC"> the</font><font color="#E5E5E5"> the MSRs on x86 and</font>

368
00:12:40,470 --> 00:12:45,810
unlike the registers you might be<font color="#E5E5E5"> more</font>

369
00:12:42,060 --> 00:12:48,359
<font color="#E5E5E5">familiar with like</font><font color="#CCCCCC"> EAX or edx on x86 ms</font>

370
00:12:45,810 --> 00:12:50,969
<font color="#E5E5E5">ours are accessed by address not by name</font>

371
00:12:48,360 --> 00:12:53,610
and the<font color="#E5E5E5"> MSR addresses go from</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> 4</font>

372
00:12:50,970 --> 00:12:56,040
billion<font color="#E5E5E5"> so the way you access</font><font color="#CCCCCC"> a specific</font>

373
00:12:53,610 --> 00:12:58,170
MSR is you load its address and the ECX

374
00:12:56,040 --> 00:13:00,060
register<font color="#E5E5E5"> and then you use the read MSR</font>

375
00:12:58,170 --> 00:13:03,810
and<font color="#E5E5E5"> write MSR instructions in order to</font>

376
00:13:00,060 --> 00:13:04,920
<font color="#CCCCCC">access the contents of that MSR so if</font>

377
00:13:03,810 --> 00:13:07,109
you read a clean one of these<font color="#CCCCCC"> MS ARS</font>

378
00:13:04,920 --> 00:13:09,180
<font color="#E5E5E5">will allow us</font><font color="#CCCCCC"> to eventually</font><font color="#E5E5E5"> bypass</font>

379
00:13:07,110 --> 00:13:11,460
<font color="#E5E5E5">security mechanisms on the processor but</font>

380
00:13:09,180 --> 00:13:15,359
there's a saving grace<font color="#CCCCCC"> here you can only</font>

381
00:13:11,460 --> 00:13:16,590
access<font color="#E5E5E5"> MSRs from ring</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> code so even</font>

382
00:13:15,360 --> 00:13:19,290
though we<font color="#E5E5E5"> might be able to enable a</font>

383
00:13:16,590 --> 00:13:22,020
backdoor on the processor it should

384
00:13:19,290 --> 00:13:25,469
require<font color="#E5E5E5"> one time ring 0 kernel level</font>

385
00:13:22,020 --> 00:13:28,050
<font color="#E5E5E5">access in order</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> activate or maybe not</font>

386
00:13:25,470 --> 00:13:29,070
we'll revisit<font color="#E5E5E5"> this part later but just</font>

387
00:13:28,050 --> 00:13:32,069
so<font color="#CCCCCC"> that we can move</font><font color="#E5E5E5"> the research forward</font>

388
00:13:29,070 --> 00:13:34,740
for now let's<font color="#E5E5E5"> assume that we have</font><font color="#CCCCCC"> one</font>

389
00:13:32,070 --> 00:13:36,630
time ring<font color="#CCCCCC"> 0 access just to tinker</font><font color="#E5E5E5"> with</font>

390
00:13:34,740 --> 00:13:39,630
the MS<font color="#CCCCCC"> ours in order to get the rest</font><font color="#E5E5E5"> of</font>

391
00:13:36,630 --> 00:13:42,960
this chain active and we'll revisit<font color="#CCCCCC"> that</font>

392
00:13:39,630 --> 00:13:44,340
limitation<font color="#CCCCCC"> later on so</font><font color="#E5E5E5"> going back</font><font color="#CCCCCC"> to</font>

393
00:13:42,960 --> 00:13:45,900
<font color="#E5E5E5">that original patent I talked about they</font>

394
00:13:44,340 --> 00:13:47,790
do<font color="#E5E5E5"> mention that the various x86</font>

395
00:13:45,900 --> 00:13:49,949
processor<font color="#E5E5E5"> manufacturers have not</font>

396
00:13:47,790 --> 00:13:51,900
publicly documented any description<font color="#E5E5E5"> of</font>

397
00:13:49,950 --> 00:13:53,160
the address or function of some of the

398
00:13:51,900 --> 00:13:55,890
control MSRs

399
00:13:53,160 --> 00:13:58,199
so that leads us in a bit of conundrum

400
00:13:55,890 --> 00:13:59,610
<font color="#E5E5E5">if we don't have any</font><font color="#CCCCCC"> documentation for</font>

401
00:13:58,200 --> 00:14:01,560
which MSR we're looking at how are we

402
00:13:59,610 --> 00:14:04,650
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> find a wine</font><font color="#CCCCCC"> that activates</font>

403
00:14:01,560 --> 00:14:06,989
these secretive features it's a step<font color="#E5E5E5"> one</font>

404
00:14:04,650 --> 00:14:09,180
it seems would be let's just<font color="#E5E5E5"> figure out</font>

405
00:14:06,990 --> 00:14:11,250
which<font color="#CCCCCC"> MSR czar implemented</font><font color="#E5E5E5"> by the</font>

406
00:14:09,180 --> 00:14:12,569
processor<font color="#E5E5E5"> ignoring any documentation or</font>

407
00:14:11,250 --> 00:14:14,520
anything<font color="#E5E5E5"> else like that let's figure out</font>

408
00:14:12,570 --> 00:14:16,860
<font color="#E5E5E5">which</font><font color="#CCCCCC"> ns ours</font><font color="#E5E5E5"> actually exists on the</font>

409
00:14:14,520 --> 00:14:17,339
processor and<font color="#E5E5E5"> this one's pretty</font><font color="#CCCCCC"> easy one</font>

410
00:14:16,860 --> 00:14:20,220
to solve

411
00:14:17,339 --> 00:14:22,260
<font color="#E5E5E5">basically what you</font><font color="#CCCCCC"> can do is in a kernel</font>

412
00:14:20,220 --> 00:14:24,440
<font color="#CCCCCC">module set your general protection</font>

413
00:14:22,260 --> 00:14:26,120
exception<font color="#E5E5E5"> handler to the</font>

414
00:14:24,440 --> 00:14:28,129
specific function under your<font color="#CCCCCC"> control you</font>

415
00:14:26,120 --> 00:14:30,740
can do that<font color="#CCCCCC"> with the lidt instruction to</font>

416
00:14:28,129 --> 00:14:32,629
<font color="#E5E5E5">reconfigure that exception handler then</font>

417
00:14:30,740 --> 00:14:34,279
you're<font color="#CCCCCC"> gonna load an MSR address into</font>

418
00:14:32,629 --> 00:14:37,579
<font color="#E5E5E5">the ECX register so let's say</font><font color="#CCCCCC"> I wanted</font>

419
00:14:34,279 --> 00:14:40,069
<font color="#E5E5E5">to figure</font><font color="#CCCCCC"> out does MSR 1:37 exist on</font>

420
00:14:37,579 --> 00:14:42,410
this processor<font color="#E5E5E5"> I'll load 133</font><font color="#CCCCCC"> seven into</font>

421
00:14:40,069 --> 00:14:44,750
<font color="#E5E5E5">the ECX register then I'm going to try</font>

422
00:14:42,410 --> 00:14:47,060
to read<font color="#E5E5E5"> that model specific register and</font>

423
00:14:44,750 --> 00:14:49,149
then if I<font color="#CCCCCC"> don't get a fault that means</font>

424
00:14:47,060 --> 00:14:51,319
that the MSR exists whether or not the

425
00:14:49,149 --> 00:14:53,480
documentation says that<font color="#E5E5E5"> hema SAR exists</font>

426
00:14:51,319 --> 00:14:55,099
it must<font color="#E5E5E5"> exist if I don't get</font><font color="#CCCCCC"> a fault</font><font color="#E5E5E5"> on</font>

427
00:14:53,480 --> 00:14:57,410
<font color="#E5E5E5">the other hand if my exception handler</font>

428
00:14:55,100 --> 00:14:59,269
gets<font color="#E5E5E5"> control that means that that MSR</font>

429
00:14:57,410 --> 00:15:00,829
does not<font color="#CCCCCC"> exists</font><font color="#E5E5E5"> so this is a really</font>

430
00:14:59,269 --> 00:15:02,480
really<font color="#CCCCCC"> simple way to iterate through</font><font color="#E5E5E5"> all</font>

431
00:15:00,829 --> 00:15:04,399
<font color="#E5E5E5">the possible</font><font color="#CCCCCC"> EMA czars</font><font color="#E5E5E5"> and figure out</font>

432
00:15:02,480 --> 00:15:06,949
which<font color="#E5E5E5"> exists on the processor which</font>

433
00:15:04,399 --> 00:15:09,470
don't exist<font color="#CCCCCC"> on a processor so when I</font><font color="#E5E5E5"> ran</font>

434
00:15:06,949 --> 00:15:11,680
this little algorithm<font color="#CCCCCC"> on my targets III</font>

435
00:15:09,470 --> 00:15:13,910
processor<font color="#E5E5E5"> what a can</font><font color="#CCCCCC"> were that it had</font>

436
00:15:11,680 --> 00:15:16,279
1,300 implemented model specific

437
00:15:13,910 --> 00:15:19,129
registers<font color="#CCCCCC"> meta</font><font color="#E5E5E5"> is a way more than would</font>

438
00:15:16,279 --> 00:15:20,360
<font color="#CCCCCC">be typical on an x86 processor and kind</font>

439
00:15:19,129 --> 00:15:23,480
<font color="#E5E5E5">of threw a wrench in this whole process</font>

440
00:15:20,360 --> 00:15:25,819
that's too many<font color="#CCCCCC"> MSRs to analyze I</font><font color="#E5E5E5"> I</font>

441
00:15:23,480 --> 00:15:28,519
<font color="#E5E5E5">think one bit and one of these</font><font color="#CCCCCC"> MS ARS is</font>

442
00:15:25,819 --> 00:15:30,889
going to activate<font color="#E5E5E5"> this this new x86</font>

443
00:15:28,519 --> 00:15:34,189
instruction but I can't sift through

444
00:15:30,889 --> 00:15:35,689
1,300<font color="#E5E5E5"> MSRs on my own so the next</font>

445
00:15:34,189 --> 00:15:37,610
question<font color="#E5E5E5"> is well which of these</font><font color="#CCCCCC"> MS</font><font color="#E5E5E5"> ARS</font>

446
00:15:35,689 --> 00:15:38,899
are actually unique<font color="#E5E5E5"> which really could</font>

447
00:15:37,610 --> 00:15:40,790
<font color="#E5E5E5">be</font><font color="#CCCCCC"> the ones</font><font color="#E5E5E5"> that I'm looking for</font><font color="#CCCCCC"> what</font>

448
00:15:38,899 --> 00:15:42,769
<font color="#CCCCCC">are the interesting ones that I should</font>

449
00:15:40,790 --> 00:15:45,560
be focused on<font color="#CCCCCC"> so I came up with this</font>

450
00:15:42,769 --> 00:15:48,949
idea<font color="#E5E5E5"> for sort of a timing side channel</font>

451
00:15:45,560 --> 00:15:51,649
attack<font color="#E5E5E5"> on the processor</font><font color="#CCCCCC"> where basically</font>

452
00:15:48,949 --> 00:15:53,870
<font color="#E5E5E5">what I would do would be to calculate</font>

453
00:15:51,649 --> 00:15:57,529
the access times for all four billion

454
00:15:53,870 --> 00:15:59,329
possible MSRs<font color="#E5E5E5"> so what that</font><font color="#CCCCCC"> looks like is</font>

455
00:15:57,529 --> 00:16:00,920
we have a read MSR instruction and then

456
00:15:59,329 --> 00:16:03,109
on either side of that<font color="#E5E5E5"> read MSR</font>

457
00:16:00,920 --> 00:16:05,029
instruction we have<font color="#CCCCCC"> some serialized</font><font color="#E5E5E5"> read</font>

458
00:16:03,110 --> 00:16:07,069
time stamp counter instructions<font color="#E5E5E5"> and that</font>

459
00:16:05,029 --> 00:16:10,009
<font color="#E5E5E5">lets me measure exactly</font><font color="#CCCCCC"> how</font><font color="#E5E5E5"> much time it</font>

460
00:16:07,069 --> 00:16:11,630
<font color="#E5E5E5">takes to read any given model specific</font>

461
00:16:10,009 --> 00:16:15,350
register so what that ends up looking

462
00:16:11,630 --> 00:16:17,930
<font color="#E5E5E5">like is is this on the x-axis here</font><font color="#CCCCCC"> I've</font>

463
00:16:15,350 --> 00:16:20,180
got my four<font color="#E5E5E5"> billion possible MSRs on</font>

464
00:16:17,930 --> 00:16:22,399
this platform<font color="#E5E5E5"> on the y-axis is</font><font color="#CCCCCC"> the</font>

465
00:16:20,180 --> 00:16:24,739
<font color="#E5E5E5">amount of time it takes to access each</font>

466
00:16:22,399 --> 00:16:26,360
of those<font color="#E5E5E5"> MSRs</font><font color="#CCCCCC"> in green I'm showing the</font>

467
00:16:24,740 --> 00:16:28,569
MSR that actually exists on the

468
00:16:26,360 --> 00:16:29,750
processor<font color="#E5E5E5"> in red are the unimplemented</font>

469
00:16:28,569 --> 00:16:31,430
<font color="#CCCCCC">MSRs</font>

470
00:16:29,750 --> 00:16:33,019
so this<font color="#CCCCCC"> gives some really really</font>

471
00:16:31,430 --> 00:16:34,339
<font color="#E5E5E5">interesting insights</font><font color="#CCCCCC"> into the processor</font>

472
00:16:33,019 --> 00:16:35,990
<font color="#CCCCCC">that would normally be totally</font>

473
00:16:34,339 --> 00:16:36,760
<font color="#CCCCCC">off-limits to us we can actually</font><font color="#E5E5E5"> sort of</font>

474
00:16:35,990 --> 00:16:38,260
peer under<font color="#CCCCCC"> the my</font>

475
00:16:36,760 --> 00:16:40,720
<font color="#E5E5E5">code and understand what's happening</font>

476
00:16:38,260 --> 00:16:43,300
<font color="#CCCCCC">with these various emissaries using this</font>

477
00:16:40,720 --> 00:16:45,790
<font color="#E5E5E5">timing side channel so I want</font><font color="#CCCCCC"> to throw</font>

478
00:16:43,300 --> 00:16:47,620
out an observation here<font color="#CCCCCC"> may be that</font>

479
00:16:45,790 --> 00:16:50,410
functionally different MSR should have

480
00:16:47,620 --> 00:16:52,390
<font color="#E5E5E5">different access times</font><font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example</font>

481
00:16:50,410 --> 00:16:53,620
accessing the time stamp counter<font color="#E5E5E5"> MSR</font>

482
00:16:52,390 --> 00:16:56,890
should take a<font color="#E5E5E5"> different amount of</font><font color="#CCCCCC"> time</font>

483
00:16:53,620 --> 00:16:58,420
than<font color="#E5E5E5"> accessing a thermal sensor MSR</font><font color="#CCCCCC"> and</font>

484
00:16:56,890 --> 00:16:59,500
that's because each of those<font color="#CCCCCC"> MS ours is</font>

485
00:16:58,420 --> 00:17:01,329
going to a<font color="#CCCCCC"> different</font><font color="#E5E5E5"> micro code</font>

486
00:16:59,500 --> 00:17:02,530
implementing them<font color="#E5E5E5"> that micro cuts going</font>

487
00:17:01,330 --> 00:17:04,240
<font color="#E5E5E5">to take different</font><font color="#CCCCCC"> amounts of times to</font>

488
00:17:02,530 --> 00:17:06,190
execute so I would expect<font color="#CCCCCC"> the access</font>

489
00:17:04,240 --> 00:17:08,260
time for each MSR to be different if the

490
00:17:06,190 --> 00:17:10,360
<font color="#E5E5E5">MSR is are very</font><font color="#CCCCCC"> different</font><font color="#E5E5E5"> on the other</font>

491
00:17:08,260 --> 00:17:12,099
hand<font color="#CCCCCC"> functional equivalent MSR should</font>

492
00:17:10,359 --> 00:17:13,599
have approximately<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same access time</font>

493
00:17:12,099 --> 00:17:15,339
so for example there's something called

494
00:17:13,599 --> 00:17:18,189
<font color="#E5E5E5">the MTR are the memory type range</font>

495
00:17:15,339 --> 00:17:20,230
registers<font color="#E5E5E5"> in x86 it's a set of</font><font color="#CCCCCC"> MSRs that</font>

496
00:17:18,190 --> 00:17:22,089
control<font color="#E5E5E5"> caching</font><font color="#CCCCCC"> behavior</font><font color="#E5E5E5"> for different</font>

497
00:17:20,230 --> 00:17:24,640
<font color="#E5E5E5">regions of memory what I would expect</font>

498
00:17:22,089 --> 00:17:27,040
<font color="#CCCCCC">would be that MT rr0 would have roughly</font>

499
00:17:24,640 --> 00:17:28,089
the same access time as MTR r1<font color="#E5E5E5"> because</font>

500
00:17:27,040 --> 00:17:30,129
<font color="#E5E5E5">even though they control different</font>

501
00:17:28,089 --> 00:17:33,010
<font color="#E5E5E5">regions of memory they're functionally</font>

502
00:17:30,130 --> 00:17:35,110
<font color="#E5E5E5">equivalent</font><font color="#CCCCCC"> MSRs</font><font color="#E5E5E5"> so what that means is</font>

503
00:17:33,010 --> 00:17:38,250
that<font color="#E5E5E5"> this timing attack gives me a way</font>

504
00:17:35,110 --> 00:17:41,439
<font color="#E5E5E5">to differentiate between like and unlike</font>

505
00:17:38,250 --> 00:17:43,390
<font color="#CCCCCC">MSRs and I'm gonna</font><font color="#E5E5E5"> define like MSRs as</font>

506
00:17:41,440 --> 00:17:46,030
<font color="#CCCCCC">adjacent MSRs with equal</font><font color="#E5E5E5"> are</font>

507
00:17:43,390 --> 00:17:47,110
functionally related<font color="#E5E5E5"> access times so</font>

508
00:17:46,030 --> 00:17:48,850
then specifically<font color="#CCCCCC"> i want to throw out</font>

509
00:17:47,110 --> 00:17:51,010
this hypothesis<font color="#CCCCCC"> that the global</font>

510
00:17:48,850 --> 00:17:53,050
configuration register this model

511
00:17:51,010 --> 00:17:56,200
specific register hinted at and these

512
00:17:53,050 --> 00:17:58,149
patents<font color="#E5E5E5"> is probably unique it doesn't</font>

513
00:17:56,200 --> 00:18:01,690
make<font color="#CCCCCC"> sense</font><font color="#E5E5E5"> to have multiple functionally</font>

514
00:17:58,150 --> 00:18:03,400
<font color="#E5E5E5">equivalent versions of the GCR this</font>

515
00:18:01,690 --> 00:18:05,910
thing<font color="#E5E5E5"> should have a bit that activates a</font>

516
00:18:03,400 --> 00:18:08,380
new x86 instruction that<font color="#E5E5E5"> I can use for</font>

517
00:18:05,910 --> 00:18:09,820
<font color="#E5E5E5">circumventing protections and it doesn't</font>

518
00:18:08,380 --> 00:18:11,380
<font color="#E5E5E5">make a lot of sense</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> have several of</font>

519
00:18:09,820 --> 00:18:13,419
these different registers all doing the

520
00:18:11,380 --> 00:18:15,550
<font color="#CCCCCC">same thing</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> when I started looking at</font>

521
00:18:13,420 --> 00:18:19,300
<font color="#E5E5E5">my</font><font color="#CCCCCC"> timing graph I can</font><font color="#E5E5E5"> begin to pick out</font>

522
00:18:15,550 --> 00:18:21,639
the functionally unique MSRs<font color="#CCCCCC"> in this in</font>

523
00:18:19,300 --> 00:18:24,700
this<font color="#E5E5E5"> graph it's the one said are</font>

524
00:18:21,640 --> 00:18:26,740
separate from<font color="#CCCCCC"> the</font><font color="#E5E5E5"> other ns ours</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the</font>

525
00:18:24,700 --> 00:18:29,020
system so when I begin to<font color="#E5E5E5"> identify the</font>

526
00:18:26,740 --> 00:18:31,510
functionally unique<font color="#E5E5E5"> MS</font><font color="#CCCCCC"> ours I'm able to</font>

527
00:18:29,020 --> 00:18:34,210
actually hair down<font color="#CCCCCC"> that original list of</font>

528
00:18:31,510 --> 00:18:37,030
MS<font color="#CCCCCC"> ours</font><font color="#E5E5E5"> a lot more so using the</font><font color="#CCCCCC"> side</font>

529
00:18:34,210 --> 00:18:39,340
<font color="#CCCCCC">channel I found 43 unique model specific</font>

530
00:18:37,030 --> 00:18:41,500
registers<font color="#E5E5E5"> from the</font><font color="#CCCCCC"> 1,300 that are</font>

531
00:18:39,340 --> 00:18:42,879
actually implemented on<font color="#CCCCCC"> the processor so</font>

532
00:18:41,500 --> 00:18:44,290
that's that's<font color="#E5E5E5"> really</font><font color="#CCCCCC"> exciting</font><font color="#E5E5E5"> for me</font>

533
00:18:42,880 --> 00:18:46,480
<font color="#E5E5E5">that means it seems like my research can</font>

534
00:18:44,290 --> 00:18:48,730
<font color="#E5E5E5">move forward 43 cm</font><font color="#CCCCCC"> it sounds like a much</font>

535
00:18:46,480 --> 00:18:50,290
<font color="#CCCCCC">more tractable number of model specific</font>

536
00:18:48,730 --> 00:18:53,020
registers to analyze then

537
00:18:50,290 --> 00:18:57,430
<font color="#CCCCCC">thirteen-hundred</font><font color="#E5E5E5"> the problem is 43 m/s</font>

538
00:18:53,020 --> 00:18:59,379
ours is<font color="#E5E5E5"> still</font><font color="#CCCCCC"> 27:52</font><font color="#E5E5E5"> bits to check at 64</font>

539
00:18:57,430 --> 00:19:01,120
bits of<font color="#E5E5E5"> piece that</font><font color="#CCCCCC"> is a lot of bits to</font>

540
00:18:59,380 --> 00:19:03,340
sift through<font color="#CCCCCC"> I want to find one bit that</font>

541
00:19:01,120 --> 00:19:06,100
activates this this<font color="#E5E5E5"> launch instruction</font>

542
00:19:03,340 --> 00:19:08,649
<font color="#E5E5E5">this new x86 instruction but that's too</font>

543
00:19:06,100 --> 00:19:10,240
many bits for me to go through<font color="#E5E5E5"> by</font><font color="#CCCCCC"> hand</font>

544
00:19:08,650 --> 00:19:12,520
<font color="#CCCCCC">especially when you</font><font color="#E5E5E5"> can see</font><font color="#CCCCCC"> there the</font>

545
00:19:10,240 --> 00:19:14,170
<font color="#CCCCCC">magnitude of the x86 instruction set so</font>

546
00:19:12,520 --> 00:19:16,600
<font color="#CCCCCC">theoretically one of these bits enables</font>

547
00:19:14,170 --> 00:19:19,150
a new x86 instruction well if we<font color="#E5E5E5"> look at</font>

548
00:19:16,600 --> 00:19:20,949
how<font color="#CCCCCC"> many possible x86 instructions there</font>

549
00:19:19,150 --> 00:19:23,080
can be it turns out there's a lot at

550
00:19:20,950 --> 00:19:25,720
<font color="#CCCCCC">City six is a really really</font><font color="#E5E5E5"> complicated</font>

551
00:19:23,080 --> 00:19:27,760
<font color="#CCCCCC">architecture and an upper</font><font color="#E5E5E5"> bound on</font><font color="#CCCCCC"> the</font>

552
00:19:25,720 --> 00:19:29,880
number of possible x86 instructions

553
00:19:27,760 --> 00:19:33,220
<font color="#E5E5E5">would be something like 1.3 undecillion</font>

554
00:19:29,880 --> 00:19:36,070
<font color="#E5E5E5">instructions so I'm looking for a single</font>

555
00:19:33,220 --> 00:19:39,310
new instruction amongst 1.3 undecillion

556
00:19:36,070 --> 00:19:41,230
possible instructions<font color="#CCCCCC"> even if</font><font color="#E5E5E5"> I take a</font>

557
00:19:39,310 --> 00:19:44,440
really really<font color="#E5E5E5"> generous</font><font color="#CCCCCC"> at estimate and</font>

558
00:19:41,230 --> 00:19:46,030
say that I can scan<font color="#E5E5E5"> 1 billion possible</font>

559
00:19:44,440 --> 00:19:49,270
instructions a second we<font color="#E5E5E5"> can do like</font><font color="#CCCCCC"> a</font>

560
00:19:46,030 --> 00:19:51,220
quick Fermi calculation to<font color="#CCCCCC"> see like 1.3</font>

561
00:19:49,270 --> 00:19:53,770
undecillion divided by a billion<font color="#CCCCCC"> divided</font>

562
00:19:51,220 --> 00:19:55,120
by 60 seconds<font color="#E5E5E5"> in a minute divided by 60</font>

563
00:19:53,770 --> 00:19:57,639
minutes an hour divided by 24

564
00:19:55,120 --> 00:20:00,189
<font color="#CCCCCC">hours-a-day</font><font color="#E5E5E5"> divided by 365 days a year</font>

565
00:19:57,640 --> 00:20:02,020
means scanning for<font color="#E5E5E5"> a new instruction X</font>

566
00:20:00,190 --> 00:20:04,510
86 is going to take<font color="#E5E5E5"> approximately</font><font color="#CCCCCC"> one</font>

567
00:20:02,020 --> 00:20:06,580
<font color="#E5E5E5">eternity so I don't have time to sit</font>

568
00:20:04,510 --> 00:20:08,590
<font color="#CCCCCC">around waiting to find this this new</font>

569
00:20:06,580 --> 00:20:10,149
instruction<font color="#E5E5E5"> especially</font><font color="#CCCCCC"> when I've got to</font>

570
00:20:08,590 --> 00:20:13,000
do a scan for every bit<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I'm looking</font>

571
00:20:10,150 --> 00:20:15,700
<font color="#CCCCCC">at about 2700 eternities trying to find</font>

572
00:20:13,000 --> 00:20:17,710
which bit activates this new x86

573
00:20:15,700 --> 00:20:19,420
instruction so I<font color="#CCCCCC"> was</font><font color="#E5E5E5"> really fortunate</font>

574
00:20:17,710 --> 00:20:21,490
this case because I actually looked at

575
00:20:19,420 --> 00:20:22,900
<font color="#E5E5E5">this exact problem last year and</font>

576
00:20:21,490 --> 00:20:25,330
developed this tool<font color="#E5E5E5"> called stance after</font>

577
00:20:22,900 --> 00:20:27,930
<font color="#E5E5E5">so what's an sector does is it finds an</font>

578
00:20:25,330 --> 00:20:30,129
intelligent way to<font color="#E5E5E5"> scan through the x86</font>

579
00:20:27,930 --> 00:20:31,390
<font color="#CCCCCC">instruction set</font><font color="#E5E5E5"> and uses page fault</font>

580
00:20:30,130 --> 00:20:34,780
analysis and a depth first search

581
00:20:31,390 --> 00:20:38,320
algorithm to quickly<font color="#E5E5E5"> find</font><font color="#CCCCCC"> all the x86</font>

582
00:20:34,780 --> 00:20:42,730
instructions of interest<font color="#E5E5E5"> on a processor</font>

583
00:20:38,320 --> 00:20:43,990
<font color="#E5E5E5">so I still can't run Sam Viktor</font><font color="#CCCCCC"> 2700</font>

584
00:20:42,730 --> 00:20:46,870
<font color="#CCCCCC">different</font><font color="#E5E5E5"> times it takes about a day</font><font color="#CCCCCC"> to</font>

585
00:20:43,990 --> 00:20:48,610
scan a processor<font color="#CCCCCC"> but this at least opens</font>

586
00:20:46,870 --> 00:20:51,250
up some opportunity from from moving

587
00:20:48,610 --> 00:20:53,709
<font color="#E5E5E5">forward what I can do is I can</font><font color="#CCCCCC"> look at</font>

588
00:20:51,250 --> 00:20:56,020
each of those<font color="#CCCCCC"> 2,700</font><font color="#E5E5E5"> Candidate MSR bits</font>

589
00:20:53,710 --> 00:20:57,940
and I can try to toggle<font color="#E5E5E5"> each of them one</font>

590
00:20:56,020 --> 00:20:59,350
by<font color="#CCCCCC"> one not doing an instruction scan</font>

591
00:20:57,940 --> 00:20:59,890
between each one<font color="#E5E5E5"> but I can just try to</font>

592
00:20:59,350 --> 00:21:02,168
toggle

593
00:20:59,890 --> 00:21:04,210
<font color="#E5E5E5">each of these bits one</font>

594
00:21:02,169 --> 00:21:06,070
time<font color="#E5E5E5"> of course I'm gonna run</font><font color="#CCCCCC"> to some</font>

595
00:21:04,210 --> 00:21:07,659
problems these are configuration<font color="#E5E5E5"> bits</font>

596
00:21:06,070 --> 00:21:09,789
that control the deepest workings of the

597
00:21:07,659 --> 00:21:11,679
processor<font color="#E5E5E5"> and I have no idea what they</font>

598
00:21:09,789 --> 00:21:14,019
do<font color="#CCCCCC"> so a lot of</font><font color="#E5E5E5"> them are going to lock</font>

599
00:21:11,679 --> 00:21:16,210
the processor<font color="#CCCCCC"> free z/os panic the kernel</font>

600
00:21:14,019 --> 00:21:17,590
<font color="#E5E5E5">or just reset the system entirely</font><font color="#CCCCCC"> so</font>

601
00:21:16,210 --> 00:21:20,529
this is still something<font color="#E5E5E5"> that's not</font>

602
00:21:17,590 --> 00:21:22,709
<font color="#E5E5E5">really doable by hand but we we can</font>

603
00:21:20,529 --> 00:21:26,230
automate this process so I developed a

604
00:21:22,710 --> 00:21:28,779
simple<font color="#E5E5E5"> setup where I would have a target</font>

605
00:21:26,230 --> 00:21:31,299
system<font color="#CCCCCC"> that'd be a c3 processor would</font>

606
00:21:28,779 --> 00:21:32,679
<font color="#E5E5E5">have a wire soldered on to its power</font>

607
00:21:31,299 --> 00:21:34,059
switch<font color="#E5E5E5"> and that wires connected to a</font>

608
00:21:32,679 --> 00:21:36,369
relay and<font color="#CCCCCC"> that relays connected to a</font>

609
00:21:34,059 --> 00:21:38,499
master system the target system<font color="#E5E5E5"> boots</font>

610
00:21:36,369 --> 00:21:40,539
from<font color="#E5E5E5"> the master over the network and the</font>

611
00:21:38,499 --> 00:21:44,139
master system can SSH into<font color="#E5E5E5"> the target</font>

612
00:21:40,539 --> 00:21:45,970
<font color="#CCCCCC">and assign it</font><font color="#E5E5E5"> jobs</font><font color="#CCCCCC"> basically it can SSH</font>

613
00:21:44,139 --> 00:21:50,139
into<font color="#E5E5E5"> the target and start toggling its</font>

614
00:21:45,970 --> 00:21:51,460
potential MSR bits one by one<font color="#E5E5E5"> and what</font>

615
00:21:50,139 --> 00:21:53,408
the master will do is it<font color="#CCCCCC"> will detect</font>

616
00:21:51,460 --> 00:21:55,659
when<font color="#CCCCCC"> the target</font><font color="#E5E5E5"> is frozen or panicked</font><font color="#CCCCCC"> or</font>

617
00:21:53,409 --> 00:21:57,759
locked<font color="#E5E5E5"> and use that relay in order to</font>

618
00:21:55,659 --> 00:21:59,649
power<font color="#CCCCCC"> cycle the target</font><font color="#E5E5E5"> so this way I can</font>

619
00:21:57,759 --> 00:22:03,159
automate the process of<font color="#E5E5E5"> trying to toggle</font>

620
00:21:59,649 --> 00:22:04,449
<font color="#E5E5E5">each of these</font><font color="#CCCCCC"> 2,700 MSR bits</font><font color="#E5E5E5"> one by one</font>

621
00:22:03,159 --> 00:22:06,059
and<font color="#E5E5E5"> what I'm going</font><font color="#CCCCCC"> to see how many</font><font color="#E5E5E5"> can I</font>

622
00:22:04,450 --> 00:22:08,649
get on before<font color="#E5E5E5"> the system becomes</font>

623
00:22:06,059 --> 00:22:10,269
<font color="#CCCCCC">unstable so through hundreds of</font>

624
00:22:08,649 --> 00:22:11,768
automated reboots is saying ran for

625
00:22:10,269 --> 00:22:13,899
about<font color="#CCCCCC"> a week and I was able</font><font color="#E5E5E5"> to identify</font>

626
00:22:11,769 --> 00:22:15,909
<font color="#CCCCCC">exactly</font><font color="#E5E5E5"> which of</font><font color="#CCCCCC"> those</font><font color="#E5E5E5"> bits could be</font>

627
00:22:13,899 --> 00:22:18,789
toggled<font color="#E5E5E5"> without the</font><font color="#CCCCCC"> system having</font><font color="#E5E5E5"> any</font>

628
00:22:15,909 --> 00:22:20,440
<font color="#CCCCCC">sort of visible side effects</font><font color="#E5E5E5"> so so with</font>

629
00:22:18,789 --> 00:22:23,889
<font color="#E5E5E5">that done</font><font color="#CCCCCC"> I would go in and I would</font>

630
00:22:20,440 --> 00:22:26,320
toggle all the stable MSR bits<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I</font>

631
00:22:23,889 --> 00:22:28,238
could possibly access and then run<font color="#E5E5E5"> the</font>

632
00:22:26,320 --> 00:22:29,950
<font color="#E5E5E5">sand</font><font color="#CCCCCC"> scepter scanning tool in order to</font>

633
00:22:28,239 --> 00:22:33,129
<font color="#E5E5E5">see if any new instructions had appeared</font>

634
00:22:29,950 --> 00:22:35,999
on<font color="#E5E5E5"> that x86 processor so so that looks</font>

635
00:22:33,129 --> 00:22:40,059
something like like<font color="#E5E5E5"> this</font><font color="#CCCCCC"> sand scepter is</font>

636
00:22:35,999 --> 00:22:41,859
scanning<font color="#E5E5E5"> scanning the system for it for</font>

637
00:22:40,059 --> 00:22:43,629
new instructions using<font color="#CCCCCC"> its it's page</font>

638
00:22:41,859 --> 00:22:46,059
fault analysis depth-first search thing

639
00:22:43,629 --> 00:22:47,949
<font color="#E5E5E5">I sort of started</font><font color="#CCCCCC"> watching this taking</font>

640
00:22:46,059 --> 00:22:50,019
this<font color="#E5E5E5"> video in the middle</font><font color="#CCCCCC"> of a search but</font>

641
00:22:47,950 --> 00:22:52,720
if you<font color="#E5E5E5"> let this</font><font color="#CCCCCC"> scan</font><font color="#E5E5E5"> for about a day</font>

642
00:22:50,019 --> 00:22:54,340
<font color="#E5E5E5">what you'll eventually find is</font><font color="#CCCCCC"> San</font>

643
00:22:52,720 --> 00:22:57,999
<font color="#CCCCCC">sector will spit out some some new</font>

644
00:22:54,340 --> 00:23:00,070
information<font color="#E5E5E5"> for</font><font color="#CCCCCC"> us so there we go</font>

645
00:22:57,999 --> 00:23:02,710
<font color="#E5E5E5">after about a day of</font><font color="#CCCCCC"> scanning sans</font>

646
00:23:00,070 --> 00:23:05,289
<font color="#E5E5E5">scepter finds exactly</font><font color="#CCCCCC"> one new</font>

647
00:23:02,710 --> 00:23:08,830
instruction in x86 that was not supposed

648
00:23:05,289 --> 00:23:10,269
<font color="#CCCCCC">to</font><font color="#E5E5E5"> be there it finds Oh F 3 F so judging</font>

649
00:23:08,830 --> 00:23:12,099
from<font color="#E5E5E5"> the patent</font><font color="#CCCCCC"> literature this</font><font color="#E5E5E5"> is what</font>

650
00:23:10,269 --> 00:23:14,259
they're calling<font color="#E5E5E5"> the launch instruction</font>

651
00:23:12,099 --> 00:23:15,418
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is the new x86 instruction and</font>

652
00:23:14,259 --> 00:23:17,579
enabled by<font color="#E5E5E5"> some</font>

653
00:23:15,419 --> 00:23:19,679
<font color="#CCCCCC">big in</font><font color="#E5E5E5"> the global configuration</font><font color="#CCCCCC"> register</font>

654
00:23:17,579 --> 00:23:20,879
<font color="#E5E5E5">so with GD being a little trial and</font>

655
00:23:19,679 --> 00:23:23,399
<font color="#E5E5E5">error I was</font><font color="#CCCCCC"> able to figure</font><font color="#E5E5E5"> out that this</font>

656
00:23:20,879 --> 00:23:25,139
<font color="#E5E5E5">launch instruction is effectively a jump</font>

657
00:23:23,399 --> 00:23:27,289
<font color="#CCCCCC">EAX instruction it just</font><font color="#E5E5E5"> jumps to</font>

658
00:23:25,139 --> 00:23:29,428
whatever address<font color="#E5E5E5"> is in the</font><font color="#CCCCCC"> EAX register</font>

659
00:23:27,289 --> 00:23:31,019
<font color="#E5E5E5">so now I want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> know which</font><font color="#CCCCCC"> of those</font>

660
00:23:29,429 --> 00:23:33,389
<font color="#E5E5E5">bits that I activated was really</font>

661
00:23:31,019 --> 00:23:34,919
<font color="#E5E5E5">responsible for enabling this this large</font>

662
00:23:33,389 --> 00:23:37,408
instruction fortunately now that I know

663
00:23:34,919 --> 00:23:39,509
what the instruction is<font color="#E5E5E5"> I no longer have</font>

664
00:23:37,409 --> 00:23:42,299
to run complete sense after scans<font color="#E5E5E5"> in</font>

665
00:23:39,509 --> 00:23:43,919
order to test my theories<font color="#E5E5E5"> basically what</font>

666
00:23:42,299 --> 00:23:47,039
I can do is I can<font color="#E5E5E5"> activate a candidate</font>

667
00:23:43,919 --> 00:23:49,259
MSR bid and see if<font color="#CCCCCC"> oh the Oh f3f exists</font>

668
00:23:47,039 --> 00:23:51,029
on the processor if it doesn't that

669
00:23:49,259 --> 00:23:53,070
wasn't the correct MSR<font color="#E5E5E5"> bid if it does</font>

670
00:23:51,029 --> 00:23:54,299
and<font color="#E5E5E5"> I found a bit that I'm after</font><font color="#CCCCCC"> so</font>

671
00:23:53,070 --> 00:23:56,700
<font color="#E5E5E5">using this approach I was able to</font>

672
00:23:54,299 --> 00:23:59,609
<font color="#E5E5E5">determine pretty quickly that MSR number</font>

673
00:23:56,700 --> 00:24:02,279
1107 on the processor<font color="#E5E5E5"> activates this</font>

674
00:23:59,609 --> 00:24:04,019
<font color="#E5E5E5">launch instruction so 1107 must be what</font>

675
00:24:02,279 --> 00:24:05,909
the patents are calling the global

676
00:24:04,019 --> 00:24:09,570
configuration register<font color="#CCCCCC"> the register that</font>

677
00:24:05,909 --> 00:24:12,629
will unlock this new functionality going

678
00:24:09,570 --> 00:24:15,928
further<font color="#E5E5E5"> what I suspect at this</font><font color="#CCCCCC"> point is</font>

679
00:24:12,629 --> 00:24:18,238
that<font color="#CCCCCC"> by</font><font color="#E5E5E5"> unlocking this other risk core</font>

680
00:24:15,929 --> 00:24:20,429
on the processor<font color="#CCCCCC"> I will you be</font><font color="#E5E5E5"> use that</font>

681
00:24:18,239 --> 00:24:23,759
<font color="#CCCCCC">core to</font><font color="#E5E5E5"> circumvent all of the security</font>

682
00:24:20,429 --> 00:24:25,769
<font color="#E5E5E5">checks built</font><font color="#CCCCCC"> into x86</font><font color="#E5E5E5"> that that really</font>

683
00:24:23,759 --> 00:24:28,649
opens up<font color="#E5E5E5"> some phenomenal opportunities</font>

684
00:24:25,769 --> 00:24:32,609
<font color="#CCCCCC">in exploitation so because of that</font><font color="#E5E5E5"> power</font>

685
00:24:28,649 --> 00:24:34,889
<font color="#CCCCCC">I</font><font color="#E5E5E5"> called that specific bit in MSR 1107</font>

686
00:24:32,609 --> 00:24:37,109
the god mode bit is basically bid<font color="#CCCCCC"> zero</font>

687
00:24:34,889 --> 00:24:39,449
of that register<font color="#CCCCCC"> was the one</font><font color="#E5E5E5"> ultimately</font>

688
00:24:37,109 --> 00:24:42,779
responsible for enabling this new x86

689
00:24:39,450 --> 00:24:45,359
instruction so so with this I figured

690
00:24:42,779 --> 00:24:47,849
<font color="#E5E5E5">out the god mode bid I figured out what</font>

691
00:24:45,359 --> 00:24:49,589
<font color="#E5E5E5">the launch instruction is now the</font>

692
00:24:47,849 --> 00:24:52,829
<font color="#E5E5E5">question is how do I actually execute</font>

693
00:24:49,589 --> 00:24:54,178
instructions on this risk<font color="#E5E5E5"> core so we can</font>

694
00:24:52,829 --> 00:24:55,799
dive into the patents a little bit more

695
00:24:54,179 --> 00:24:56,999
to<font color="#E5E5E5"> try to speculate on how this</font><font color="#CCCCCC"> might</font>

696
00:24:55,799 --> 00:24:58,918
<font color="#CCCCCC">work</font><font color="#E5E5E5"> and the patents include some</font>

697
00:24:56,999 --> 00:25:00,809
interesting<font color="#E5E5E5"> figures for this dual</font>

698
00:24:58,919 --> 00:25:03,089
instruction set pipeline and what they

699
00:25:00,809 --> 00:25:05,190
suggest is<font color="#E5E5E5"> that</font><font color="#CCCCCC"> sometime after fetching</font>

700
00:25:03,089 --> 00:25:07,168
<font color="#E5E5E5">an instruction that instruction might be</font>

701
00:25:05,190 --> 00:25:08,879
sent<font color="#E5E5E5"> to the x86 core or if the wrist</font>

702
00:25:07,169 --> 00:25:10,709
<font color="#E5E5E5">core has been activated</font><font color="#CCCCCC"> it might be sent</font>

703
00:25:08,879 --> 00:25:11,939
<font color="#E5E5E5">to the risk core so I</font><font color="#CCCCCC"> went through a lot</font>

704
00:25:10,709 --> 00:25:13,589
<font color="#CCCCCC">of trial and</font><font color="#E5E5E5"> error and a lot</font><font color="#CCCCCC"> of</font>

705
00:25:11,940 --> 00:25:15,479
<font color="#E5E5E5">different models</font><font color="#CCCCCC"> for exactly</font><font color="#E5E5E5"> how this</font>

706
00:25:13,589 --> 00:25:17,668
would work<font color="#CCCCCC"> and I ended</font><font color="#E5E5E5"> up settling on</font>

707
00:25:15,479 --> 00:25:20,459
something like this<font color="#E5E5E5"> where what's</font>

708
00:25:17,669 --> 00:25:21,509
essentially going to happen is an

709
00:25:20,459 --> 00:25:23,219
assertion is<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to be fetched</font><font color="#E5E5E5"> from</font>

710
00:25:21,509 --> 00:25:26,459
<font color="#E5E5E5">the instructor in cash it's got to go to</font>

711
00:25:23,219 --> 00:25:28,049
some x86 pre decoder<font color="#CCCCCC"> that's basically</font>

712
00:25:26,459 --> 00:25:29,560
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> break that instruction part</font>

713
00:25:28,049 --> 00:25:31,990
<font color="#E5E5E5">apart into its</font>

714
00:25:29,560 --> 00:25:34,360
<font color="#E5E5E5">basic components then those components</font>

715
00:25:31,990 --> 00:25:36,220
<font color="#E5E5E5">are going to pass a check the process</font><font color="#CCCCCC"> is</font>

716
00:25:34,360 --> 00:25:38,050
going<font color="#E5E5E5"> to check has the risk or been</font>

717
00:25:36,220 --> 00:25:40,810
<font color="#E5E5E5">activated with that</font><font color="#CCCCCC"> launch instruction</font>

718
00:25:38,050 --> 00:25:42,850
or not<font color="#E5E5E5"> if it is not it's going to pass</font>

719
00:25:40,810 --> 00:25:44,110
those components over<font color="#E5E5E5"> to the full x86</font>

720
00:25:42,850 --> 00:25:46,780
decoder and<font color="#E5E5E5"> those are going to go</font>

721
00:25:44,110 --> 00:25:47,979
through<font color="#E5E5E5"> the x86 pipeline if it has it's</font>

722
00:25:46,780 --> 00:25:50,350
going to break off one of<font color="#E5E5E5"> these</font>

723
00:25:47,980 --> 00:25:52,000
components<font color="#CCCCCC"> and send it</font><font color="#E5E5E5"> over to the</font><font color="#CCCCCC"> risk</font>

724
00:25:50,350 --> 00:25:54,790
decoder<font color="#E5E5E5"> and execute</font><font color="#CCCCCC"> that as a risk</font>

725
00:25:52,000 --> 00:25:57,820
instruction instead<font color="#E5E5E5"> in other words with</font>

726
00:25:54,790 --> 00:26:00,550
this<font color="#CCCCCC"> setup there is some x86 instruction</font>

727
00:25:57,820 --> 00:26:03,429
where if the processor is in risk mode

728
00:26:00,550 --> 00:26:06,340
<font color="#E5E5E5">it can pass a portion of itself over to</font>

729
00:26:03,430 --> 00:26:07,930
the RISC<font color="#E5E5E5"> processor</font><font color="#CCCCCC"> and since this x86</font>

730
00:26:06,340 --> 00:26:09,879
instruction he essentially joins the two

731
00:26:07,930 --> 00:26:12,060
cores it joins the x86<font color="#CCCCCC"> in the risk</font><font color="#E5E5E5"> core</font>

732
00:26:09,880 --> 00:26:14,170
I started calling<font color="#CCCCCC"> this the</font><font color="#E5E5E5"> the bridge</font>

733
00:26:12,060 --> 00:26:16,179
instruction but we don't know what this

734
00:26:14,170 --> 00:26:18,640
instruction<font color="#E5E5E5"> is yet</font><font color="#CCCCCC"> I have no idea how to</font>

735
00:26:16,180 --> 00:26:22,600
<font color="#CCCCCC">actually feed instructions</font><font color="#E5E5E5"> to this risk</font>

736
00:26:18,640 --> 00:26:24,250
court that I've activated<font color="#CCCCCC"> so to</font><font color="#E5E5E5"> find the</font>

737
00:26:22,600 --> 00:26:26,020
bridge instruction it should be

738
00:26:24,250 --> 00:26:27,730
sufficient to detect<font color="#E5E5E5"> that our RISC</font>

739
00:26:26,020 --> 00:26:29,889
instruction has the execute has been

740
00:26:27,730 --> 00:26:32,590
executed<font color="#E5E5E5"> but that's easier said</font><font color="#CCCCCC"> than</font>

741
00:26:29,890 --> 00:26:34,000
done<font color="#CCCCCC"> I have no idea what this</font><font color="#E5E5E5"> risk</font><font color="#CCCCCC"> court</font>

742
00:26:32,590 --> 00:26:36,340
looks like I<font color="#CCCCCC"> don't know what instruction</font>

743
00:26:34,000 --> 00:26:38,620
execution on<font color="#CCCCCC"> that court should look like</font>

744
00:26:36,340 --> 00:26:40,209
<font color="#CCCCCC">so how</font><font color="#E5E5E5"> are we going to detect if we've</font>

745
00:26:38,620 --> 00:26:43,060
successfully executed a RISC instruction

746
00:26:40,210 --> 00:26:44,980
<font color="#CCCCCC">well there is one easy way</font><font color="#E5E5E5"> on the theory</font>

747
00:26:43,060 --> 00:26:47,260
here is<font color="#E5E5E5"> that if this core actually does</font>

748
00:26:44,980 --> 00:26:49,180
<font color="#E5E5E5">provide a way to get around</font><font color="#CCCCCC"> the</font>

749
00:26:47,260 --> 00:26:52,120
processor security checks then there

750
00:26:49,180 --> 00:26:54,700
should<font color="#E5E5E5"> be some</font><font color="#CCCCCC"> RISC instruction that</font>

751
00:26:52,120 --> 00:26:56,860
when executed in<font color="#CCCCCC"> lane 3 would corrupt</font>

752
00:26:54,700 --> 00:26:58,690
the<font color="#CCCCCC"> system basically that would give us</font>

753
00:26:56,860 --> 00:27:00,850
something<font color="#CCCCCC"> really easy to detect</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> the</font>

754
00:26:58,690 --> 00:27:03,880
processor locks<font color="#E5E5E5"> or the kernel panics</font><font color="#CCCCCC"> or</font>

755
00:27:00,850 --> 00:27:05,760
<font color="#CCCCCC">the system resets that would be a sure</font>

756
00:27:03,880 --> 00:27:08,080
sign<font color="#CCCCCC"> that we executed a RISC instruction</font>

757
00:27:05,760 --> 00:27:10,390
because none of<font color="#CCCCCC"> those things</font><font color="#E5E5E5"> should</font><font color="#CCCCCC"> be</font>

758
00:27:08,080 --> 00:27:13,570
<font color="#E5E5E5">able to</font><font color="#CCCCCC"> happen if you're just executing</font>

759
00:27:10,390 --> 00:27:15,130
<font color="#CCCCCC">three x86 instructions</font><font color="#E5E5E5"> so if we detect</font>

760
00:27:13,570 --> 00:27:17,230
any of that behavior<font color="#E5E5E5"> we know that we've</font>

761
00:27:15,130 --> 00:27:18,970
found a corrupting RISC instruction and

762
00:27:17,230 --> 00:27:22,900
therefore<font color="#CCCCCC"> found the x86 bridge</font>

763
00:27:18,970 --> 00:27:24,760
instruction as<font color="#E5E5E5"> well so I explore</font><font color="#CCCCCC"> this I</font>

764
00:27:22,900 --> 00:27:26,860
sort of<font color="#E5E5E5"> pour apart the heart of</font><font color="#CCCCCC"> sand</font>

765
00:27:24,760 --> 00:27:28,900
sifter and repurposed it for brute force

766
00:27:26,860 --> 00:27:30,639
<font color="#CCCCCC">fuzzing</font><font color="#E5E5E5"> of the of the processor and</font>

767
00:27:28,900 --> 00:27:32,350
<font color="#CCCCCC">what's Ancestors going to do now is it's</font>

768
00:27:30,640 --> 00:27:35,020
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> execute that</font><font color="#E5E5E5"> launch instruction</font>

769
00:27:32,350 --> 00:27:36,699
before<font color="#CCCCCC"> every x86 instruction that it</font>

770
00:27:35,020 --> 00:27:38,440
generates<font color="#E5E5E5"> and what since if there's</font>

771
00:27:36,700 --> 00:27:40,060
trying<font color="#E5E5E5"> to do is trying to generate a</font>

772
00:27:38,440 --> 00:27:41,020
processor lock and you'll see that we

773
00:27:40,060 --> 00:27:43,480
<font color="#CCCCCC">just did that</font>

774
00:27:41,020 --> 00:27:46,180
after fuzzing the<font color="#E5E5E5"> processor for</font>

775
00:27:43,480 --> 00:27:48,310
little bit basically<font color="#E5E5E5"> when you observe</font>

776
00:27:46,180 --> 00:27:50,950
that the<font color="#E5E5E5"> processors lock when from ring</font>

777
00:27:48,310 --> 00:27:52,480
<font color="#E5E5E5">three we locked the processor that</font>

778
00:27:50,950 --> 00:27:53,770
indicates that<font color="#E5E5E5"> we've found that</font><font color="#CCCCCC"> bridge</font>

779
00:27:52,480 --> 00:27:56,920
instruction that<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> looking for we</font>

780
00:27:53,770 --> 00:27:59,080
found<font color="#E5E5E5"> a way to send commands to</font><font color="#CCCCCC"> that x86</font>

781
00:27:56,920 --> 00:28:01,420
<font color="#CCCCCC">core or two</font><font color="#E5E5E5"> that risk or embedded</font>

782
00:27:59,080 --> 00:28:03,010
alongside the x86 core so it takes about

783
00:28:01,420 --> 00:28:05,020
a full hour<font color="#E5E5E5"> of</font><font color="#CCCCCC"> buzzing to find us</font>

784
00:28:03,010 --> 00:28:08,410
but<font color="#CCCCCC"> what seeing</font><font color="#E5E5E5"> sector uncovered was</font>

785
00:28:05,020 --> 00:28:10,240
that<font color="#CCCCCC"> bound EAX instruction in x86</font><font color="#E5E5E5"> is</font>

786
00:28:08,410 --> 00:28:12,400
able to send<font color="#CCCCCC"> instructions over</font><font color="#E5E5E5"> to the</font>

787
00:28:10,240 --> 00:28:13,710
risk<font color="#E5E5E5"> core after that core has been</font>

788
00:28:12,400 --> 00:28:17,050
activated

789
00:28:13,710 --> 00:28:20,110
specifically<font color="#CCCCCC"> bounty ax has a 32-bit</font>

790
00:28:17,050 --> 00:28:22,120
constant value in it and<font color="#CCCCCC"> it's the</font><font color="#E5E5E5"> 32-bit</font>

791
00:28:20,110 --> 00:28:24,550
constant value<font color="#E5E5E5"> that forms the actual</font>

792
00:28:22,120 --> 00:28:26,620
<font color="#E5E5E5">risk instruction that will be sent to</font>

793
00:28:24,550 --> 00:28:28,690
that deeply embedded core that<font color="#E5E5E5"> might be</font>

794
00:28:26,620 --> 00:28:31,600
<font color="#E5E5E5">able to bypass processor security checks</font>

795
00:28:28,690 --> 00:28:34,120
<font color="#E5E5E5">so so we're getting further we figured</font>

796
00:28:31,600 --> 00:28:35,949
out how to execute instructions<font color="#E5E5E5"> on the</font>

797
00:28:34,120 --> 00:28:39,219
deck<font color="#E5E5E5"> I use this bridge instruction to</font>

798
00:28:35,950 --> 00:28:41,260
send it and risk instruction so so the

799
00:28:39,220 --> 00:28:43,090
next question<font color="#CCCCCC"> is what do I actually</font><font color="#E5E5E5"> want</font>

800
00:28:41,260 --> 00:28:44,860
to execute<font color="#E5E5E5"> like what</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> these</font>

801
00:28:43,090 --> 00:28:46,629
instructions look like what architecture

802
00:28:44,860 --> 00:28:48,129
<font color="#E5E5E5">am</font><font color="#CCCCCC"> I even dealing with if I want to use</font>

803
00:28:46,630 --> 00:28:50,680
this<font color="#E5E5E5"> actually circumvent security checks</font>

804
00:28:48,130 --> 00:28:53,050
<font color="#CCCCCC">I need to answer these these questions</font>

805
00:28:50,680 --> 00:28:55,210
so so the obvious<font color="#CCCCCC"> first approach</font><font color="#E5E5E5"> to</font>

806
00:28:53,050 --> 00:28:56,980
<font color="#CCCCCC">dealing with</font><font color="#E5E5E5"> this unknown</font><font color="#CCCCCC"> architecture</font>

807
00:28:55,210 --> 00:28:58,450
is<font color="#CCCCCC"> just assume that it's some common</font>

808
00:28:56,980 --> 00:29:00,820
<font color="#CCCCCC">architecture there's really no need to</font>

809
00:28:58,450 --> 00:29:03,400
<font color="#E5E5E5">reinvent the</font><font color="#CCCCCC"> wheel</font><font color="#E5E5E5"> adding a new core to</font>

810
00:29:00,820 --> 00:29:04,720
your your x86 processor so maybe<font color="#CCCCCC"> it's</font>

811
00:29:03,400 --> 00:29:07,390
<font color="#CCCCCC">saying is some common architecture</font><font color="#E5E5E5"> that</font>

812
00:29:04,720 --> 00:29:08,740
we've seen before<font color="#E5E5E5"> so to test that we can</font>

813
00:29:07,390 --> 00:29:10,860
<font color="#E5E5E5">basically try generating simple</font>

814
00:29:08,740 --> 00:29:13,450
instructions<font color="#E5E5E5"> in some common architecture</font>

815
00:29:10,860 --> 00:29:15,969
<font color="#E5E5E5">like arm</font><font color="#CCCCCC"> power</font><font color="#E5E5E5"> PC or MIPS how might</font>

816
00:29:13,450 --> 00:29:17,980
generate<font color="#CCCCCC"> instruction like add one to our</font>

817
00:29:15,970 --> 00:29:20,530
<font color="#CCCCCC">zero</font><font color="#E5E5E5"> for arm and I could try executing</font>

818
00:29:17,980 --> 00:29:22,870
<font color="#CCCCCC">that on the deeply embedded core and see</font>

819
00:29:20,530 --> 00:29:24,940
what happens<font color="#E5E5E5"> the the</font><font color="#CCCCCC"> challenge here is</font>

820
00:29:22,870 --> 00:29:26,979
<font color="#E5E5E5">without knowing</font><font color="#CCCCCC"> anything</font><font color="#E5E5E5"> about that</font>

821
00:29:24,940 --> 00:29:28,510
deeply embedded core there's<font color="#E5E5E5"> no</font><font color="#CCCCCC"> obvious</font>

822
00:29:26,980 --> 00:29:30,910
way<font color="#E5E5E5"> for me to necessarily check the</font>

823
00:29:28,510 --> 00:29:32,500
results of an instruction so sure I can

824
00:29:30,910 --> 00:29:34,630
<font color="#E5E5E5">generate some simple RISC instruction</font>

825
00:29:32,500 --> 00:29:36,430
and try to execute it but<font color="#CCCCCC"> I don't know</font>

826
00:29:34,630 --> 00:29:38,830
what I'm<font color="#CCCCCC"> looking for after it executes</font>

827
00:29:36,430 --> 00:29:40,300
so the good<font color="#CCCCCC"> thing here</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that there is</font>

828
00:29:38,830 --> 00:29:42,879
<font color="#CCCCCC">still a</font><font color="#E5E5E5"> simple way to rule out</font>

829
00:29:40,300 --> 00:29:44,500
architectures<font color="#E5E5E5"> what I was observing is</font>

830
00:29:42,880 --> 00:29:46,750
that<font color="#CCCCCC"> a lot of</font><font color="#E5E5E5"> the risk instructions I</font>

831
00:29:44,500 --> 00:29:49,270
tried to execute would actually lock the

832
00:29:46,750 --> 00:29:51,550
processor so if I generated a really

833
00:29:49,270 --> 00:29:53,740
simple instruction like add<font color="#E5E5E5"> one to</font><font color="#CCCCCC"> r0</font>

834
00:29:51,550 --> 00:29:55,330
for a RISC architecture and I tried to

835
00:29:53,740 --> 00:29:57,429
execute<font color="#CCCCCC"> that on the deck</font>

836
00:29:55,330 --> 00:29:59,739
and the processor locked up<font color="#E5E5E5"> that's a</font>

837
00:29:57,429 --> 00:30:02,110
pretty good sign that that wasn't the

838
00:29:59,739 --> 00:30:04,360
architecture<font color="#CCCCCC"> that I was expecting so I</font>

839
00:30:02,110 --> 00:30:06,360
can move<font color="#E5E5E5"> out</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is arm</font><font color="#E5E5E5"> if it's</font>

840
00:30:04,360 --> 00:30:08,139
<font color="#E5E5E5">choking on simple arm instructions</font>

841
00:30:06,360 --> 00:30:10,689
<font color="#E5E5E5">unfortunately when I took this approach</font>

842
00:30:08,139 --> 00:30:12,908
I pretty<font color="#E5E5E5"> quickly ruled out on 30 very</font>

843
00:30:10,690 --> 00:30:14,739
common<font color="#CCCCCC"> RISC architectures for</font><font color="#E5E5E5"> that</font>

844
00:30:12,909 --> 00:30:17,379
deeply<font color="#E5E5E5"> embedded core now I still think</font>

845
00:30:14,739 --> 00:30:19,059
<font color="#CCCCCC">that this thing is probably based off of</font>

846
00:30:17,379 --> 00:30:20,559
<font color="#CCCCCC">some common architecture there'd be no</font>

847
00:30:19,059 --> 00:30:22,450
<font color="#E5E5E5">reason to</font><font color="#CCCCCC"> spend something</font><font color="#E5E5E5"> up from</font>

848
00:30:20,559 --> 00:30:24,309
<font color="#E5E5E5">scratch but it's probably heavily enough</font>

849
00:30:22,450 --> 00:30:25,869
modified that<font color="#CCCCCC"> I couldn't recognize it so</font>

850
00:30:24,309 --> 00:30:28,690
so that means I've got<font color="#CCCCCC"> to sort of deal</font>

851
00:30:25,869 --> 00:30:30,639
with<font color="#CCCCCC"> this deeply</font><font color="#E5E5E5"> embedded core as a</font>

852
00:30:28,690 --> 00:30:32,889
black box I've got to<font color="#E5E5E5"> treat this as</font><font color="#CCCCCC"> an</font>

853
00:30:30,639 --> 00:30:35,229
unknown architecture and figure<font color="#CCCCCC"> out how</font>

854
00:30:32,889 --> 00:30:36,238
it's actually<font color="#E5E5E5"> communicate with it so to</font>

855
00:30:35,230 --> 00:30:38,470
do that we've got to<font color="#CCCCCC"> basically</font>

856
00:30:36,239 --> 00:30:40,509
<font color="#CCCCCC">reverse-engineer the instruction format</font>

857
00:30:38,470 --> 00:30:42,759
<font color="#E5E5E5">for</font><font color="#CCCCCC"> that deeply embedded core and I</font>

858
00:30:40,509 --> 00:30:44,200
spent enough time on<font color="#CCCCCC"> this</font><font color="#E5E5E5"> I I made up my</font>

859
00:30:42,759 --> 00:30:45,249
<font color="#CCCCCC">own name for</font><font color="#E5E5E5"> this I called started</font>

860
00:30:44,200 --> 00:30:48,460
calling it the deeply<font color="#E5E5E5"> embedded</font>

861
00:30:45,249 --> 00:30:51,070
<font color="#CCCCCC">instructions set that dies</font><font color="#E5E5E5"> so this</font><font color="#CCCCCC"> dies</font>

862
00:30:48,460 --> 00:30:53,710
<font color="#E5E5E5">might look like and and how we might</font>

863
00:30:51,070 --> 00:30:55,299
begin to to<font color="#E5E5E5"> reverse engineer so one idea</font>

864
00:30:53,710 --> 00:30:57,159
would<font color="#CCCCCC"> be we could execute a RISC</font>

865
00:30:55,299 --> 00:30:58,989
instruction and<font color="#E5E5E5"> basically try to observe</font>

866
00:30:57,159 --> 00:31:01,090
its results<font color="#E5E5E5"> like I said the challenge</font>

867
00:30:58,989 --> 00:31:04,119
with that<font color="#CCCCCC"> though is</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> don't know what</font>

868
00:31:01,090 --> 00:31:05,590
the risk is<font color="#CCCCCC"> a looks</font><font color="#E5E5E5"> like so there's not</font>

869
00:31:04,119 --> 00:31:07,749
<font color="#CCCCCC">necessarily an easy way to observe the</font>

870
00:31:05,590 --> 00:31:09,070
results of an of an instruction but as I

871
00:31:07,749 --> 00:31:10,450
started reading more<font color="#E5E5E5"> into the patent</font>

872
00:31:09,070 --> 00:31:13,570
<font color="#CCCCCC">literature I saw that there are hints</font>

873
00:31:10,450 --> 00:31:16,419
that this risk court and the x86<font color="#E5E5E5"> core</font>

874
00:31:13,570 --> 00:31:18,580
had a partially shared<font color="#CCCCCC"> register file</font>

875
00:31:16,419 --> 00:31:20,529
which<font color="#E5E5E5"> means we should</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> able to observe</font>

876
00:31:18,580 --> 00:31:23,439
<font color="#E5E5E5">the results of at least some</font><font color="#CCCCCC"> of these</font>

877
00:31:20,529 --> 00:31:24,730
risk instructions from the x86 core so

878
00:31:23,440 --> 00:31:26,739
this is a<font color="#E5E5E5"> diagram from the patent</font>

879
00:31:24,730 --> 00:31:28,749
<font color="#CCCCCC">literature where they're sort of</font><font color="#E5E5E5"> showing</font>

880
00:31:26,739 --> 00:31:30,669
<font color="#CCCCCC">in an arm core and how some of the</font>

881
00:31:28,749 --> 00:31:32,859
register registers are shared with<font color="#E5E5E5"> the</font>

882
00:31:30,669 --> 00:31:34,330
x86 core<font color="#E5E5E5"> on the processor so what that</font>

883
00:31:32,859 --> 00:31:35,769
means is we could do something<font color="#CCCCCC"> like</font><font color="#E5E5E5"> this</font>

884
00:31:34,330 --> 00:31:38,259
and<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is just sort of a rough summary</font>

885
00:31:35,769 --> 00:31:39,850
<font color="#E5E5E5">we could generate</font><font color="#CCCCCC"> a processor</font><font color="#E5E5E5"> state so</font>

886
00:31:38,259 --> 00:31:41,470
we could<font color="#CCCCCC"> generate some buffers in kernel</font>

887
00:31:39,850 --> 00:31:43,840
memory<font color="#E5E5E5"> generate some buffers and user</font>

888
00:31:41,470 --> 00:31:46,389
memory<font color="#CCCCCC"> generate a state for all the</font>

889
00:31:43,840 --> 00:31:49,269
processor registers and we<font color="#CCCCCC"> could load</font>

890
00:31:46,389 --> 00:31:51,279
that<font color="#E5E5E5"> state</font><font color="#CCCCCC"> onto the processor</font><font color="#E5E5E5"> after</font>

891
00:31:49,269 --> 00:31:53,440
we've loaded<font color="#E5E5E5"> up this state will execute</font>

892
00:31:51,279 --> 00:31:55,059
the launch instruction followed by an

893
00:31:53,440 --> 00:31:57,519
x86<font color="#CCCCCC"> Bridge instruction the bridge</font>

894
00:31:55,059 --> 00:32:01,389
instruction will feed a RISC<font color="#CCCCCC"> instruction</font>

895
00:31:57,519 --> 00:32:03,309
over<font color="#E5E5E5"> to the deeply embedded core</font><font color="#CCCCCC"> and let</font>

896
00:32:01,389 --> 00:32:04,658
<font color="#E5E5E5">that instruction execute after</font><font color="#CCCCCC"> that</font>

897
00:32:03,309 --> 00:32:06,340
instruction<font color="#CCCCCC"> executes so I'm a deeply</font>

898
00:32:04,659 --> 00:32:08,200
<font color="#E5E5E5">embedded core what we're going</font><font color="#CCCCCC"> to do is</font>

899
00:32:06,340 --> 00:32:09,070
read the<font color="#CCCCCC"> state</font><font color="#E5E5E5"> off of the processor</font><font color="#CCCCCC"> will</font>

900
00:32:08,200 --> 00:32:10,210
read out all the

901
00:32:09,070 --> 00:32:12,129
<font color="#CCCCCC">the search will</font><font color="#E5E5E5"> read out all the buffers</font>

902
00:32:10,210 --> 00:32:13,809
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we set</font><font color="#CCCCCC"> up and then we'll see if</font>

903
00:32:12,130 --> 00:32:16,539
anything's changed between<font color="#E5E5E5"> that input</font>

904
00:32:13,809 --> 00:32:18,549
<font color="#E5E5E5">and output state to see if we can start</font>

905
00:32:16,539 --> 00:32:22,120
deciphering what effect<font color="#E5E5E5"> that randomly</font>

906
00:32:18,549 --> 00:32:24,070
generated instruction had so nothing's

907
00:32:22,120 --> 00:32:26,889
ever simple with this<font color="#E5E5E5"> another challenge</font>

908
00:32:24,070 --> 00:32:28,629
came up<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> dealing with an unknown</font>

909
00:32:26,889 --> 00:32:31,750
instruction set with<font color="#E5E5E5"> unfettered access</font>

910
00:32:28,630 --> 00:32:33,669
<font color="#CCCCCC">to ring 0</font><font color="#E5E5E5"> so I'm just</font><font color="#CCCCCC"> trying to randomly</font>

911
00:32:31,750 --> 00:32:34,659
<font color="#CCCCCC">generate these RISC instructions and see</font>

912
00:32:33,669 --> 00:32:36,159
what happens

913
00:32:34,659 --> 00:32:37,960
but it turns<font color="#E5E5E5"> out it's really really easy</font>

914
00:32:36,159 --> 00:32:39,759
<font color="#E5E5E5">then to generate an</font><font color="#CCCCCC"> instruction that</font>

915
00:32:37,960 --> 00:32:42,220
causes a kernel panic<font color="#CCCCCC"> or a processor</font>

916
00:32:39,759 --> 00:32:44,769
lock or system reboots<font color="#E5E5E5"> and in practice I</font>

917
00:32:42,220 --> 00:32:46,990
could<font color="#E5E5E5"> only execute about 20 random RISC</font>

918
00:32:44,769 --> 00:32:49,539
instructions before<font color="#CCCCCC"> the system</font><font color="#E5E5E5"> became</font>

919
00:32:46,990 --> 00:32:52,570
<font color="#E5E5E5">unrecoverable corrupted and had to be</font>

920
00:32:49,539 --> 00:32:53,769
rebooted<font color="#CCCCCC"> so even after optimization</font><font color="#E5E5E5"> the</font>

921
00:32:52,570 --> 00:32:56,799
fastest I can<font color="#CCCCCC"> get one of</font><font color="#E5E5E5"> these systems</font>

922
00:32:53,769 --> 00:32:58,389
<font color="#CCCCCC">to boot was about</font><font color="#E5E5E5"> two minutes</font><font color="#CCCCCC"> so some</font>

923
00:32:56,799 --> 00:33:00,009
quick<font color="#E5E5E5"> calculations</font><font color="#CCCCCC"> suggested that</font>

924
00:32:58,389 --> 00:33:02,918
gathering enough data<font color="#CCCCCC"> to</font><font color="#E5E5E5"> reverse</font>

925
00:33:00,009 --> 00:33:05,080
<font color="#E5E5E5">engineer the entire instruction set at</font>

926
00:33:02,919 --> 00:33:07,899
this rate was<font color="#E5E5E5"> going to take months and</font>

927
00:33:05,080 --> 00:33:09,639
<font color="#CCCCCC">months</font><font color="#E5E5E5"> so I decided to expand</font><font color="#CCCCCC"> the</font>

928
00:33:07,899 --> 00:33:12,489
original system that that I had built

929
00:33:09,639 --> 00:33:16,000
<font color="#CCCCCC">fir for fuzzing this so what we see down</font>

930
00:33:12,490 --> 00:33:19,120
here<font color="#CCCCCC"> are instead of one target</font><font color="#E5E5E5"> I've now</font>

931
00:33:16,000 --> 00:33:20,769
<font color="#E5E5E5">got seven of these thin-client targets</font>

932
00:33:19,120 --> 00:33:22,299
<font color="#E5E5E5">if you look closely you can see</font><font color="#CCCCCC"> a little</font>

933
00:33:20,769 --> 00:33:23,799
green wire coming<font color="#E5E5E5"> out of the chassis of</font>

934
00:33:22,299 --> 00:33:26,529
<font color="#E5E5E5">each of these all hooked up to this</font>

935
00:33:23,799 --> 00:33:30,190
relay<font color="#E5E5E5"> up here</font><font color="#CCCCCC"> the relay is hooked up to</font>

936
00:33:26,529 --> 00:33:31,899
a master system that can use that relay

937
00:33:30,190 --> 00:33:34,419
in order to power cycle<font color="#E5E5E5"> each individual</font>

938
00:33:31,899 --> 00:33:36,279
target<font color="#E5E5E5"> the targets network boot through</font>

939
00:33:34,419 --> 00:33:38,649
the master<font color="#CCCCCC"> and the master once each</font>

940
00:33:36,279 --> 00:33:41,049
system is booted<font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> SSH into the</font>

941
00:33:38,649 --> 00:33:42,729
target<font color="#CCCCCC"> and give</font><font color="#E5E5E5"> it a</font><font color="#CCCCCC"> fuzzing task</font><font color="#E5E5E5"> the</font>

942
00:33:41,049 --> 00:33:44,830
master records the results of the

943
00:33:42,730 --> 00:33:46,720
fuzzing<font color="#E5E5E5"> as they occur into a database</font>

944
00:33:44,830 --> 00:33:49,090
<font color="#E5E5E5">and when it detects that one of these</font>

945
00:33:46,720 --> 00:33:50,799
<font color="#E5E5E5">targets has become corrupted if the</font>

946
00:33:49,090 --> 00:33:51,850
<font color="#CCCCCC">colonel is panicked the</font><font color="#E5E5E5"> system's frozen</font>

947
00:33:50,799 --> 00:33:54,070
<font color="#E5E5E5">or</font><font color="#CCCCCC"> what-have-you</font>

948
00:33:51,850 --> 00:33:57,820
it will use the relays in order to power

949
00:33:54,070 --> 00:33:59,559
cycle that<font color="#E5E5E5"> specific frozen target so we</font>

950
00:33:57,820 --> 00:34:02,080
can see what<font color="#E5E5E5"> this</font><font color="#CCCCCC"> thing's looks like in</font>

951
00:33:59,559 --> 00:34:04,149
action<font color="#E5E5E5"> so what I'm going</font><font color="#CCCCCC"> to do is I'm</font>

952
00:34:02,080 --> 00:34:05,740
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> start a fuzzing job on the</font>

953
00:34:04,149 --> 00:34:07,719
master it's going to<font color="#E5E5E5"> generate some</font>

954
00:34:05,740 --> 00:34:10,659
fuzzing tasks for each<font color="#E5E5E5"> of the targets</font>

955
00:34:07,720 --> 00:34:13,030
and once it's done that<font color="#CCCCCC"> it'll start</font>

956
00:34:10,659 --> 00:34:14,409
<font color="#E5E5E5">power powering</font><font color="#CCCCCC"> up each of these targets</font>

957
00:34:13,030 --> 00:34:16,599
one by one so if you<font color="#E5E5E5"> watch the lights on</font>

958
00:34:14,409 --> 00:34:18,940
the relay and<font color="#E5E5E5"> if you listen</font><font color="#CCCCCC"> carefully</font>

959
00:34:16,599 --> 00:34:20,079
you can<font color="#E5E5E5"> hear the relays clicking you'll</font>

960
00:34:18,940 --> 00:34:21,490
see that each of these targets is

961
00:34:20,079 --> 00:34:22,669
powering<font color="#E5E5E5"> up one by</font><font color="#CCCCCC"> one if you watch the</font>

962
00:34:21,489 --> 00:34:25,158
<font color="#E5E5E5">little green LEDs and</font>

963
00:34:22,668 --> 00:34:26,960
<font color="#CCCCCC">targets you'll see them</font><font color="#E5E5E5"> coming up and</font>

964
00:34:25,159 --> 00:34:30,109
<font color="#E5E5E5">they'll take about two</font><font color="#CCCCCC"> minutes for those</font>

965
00:34:26,960 --> 00:34:32,059
targets to completely come up but once

966
00:34:30,109 --> 00:34:34,819
it<font color="#E5E5E5"> does we</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> actually start</font><font color="#CCCCCC"> to see</font>

967
00:34:32,059 --> 00:34:36,649
<font color="#CCCCCC">some of fuzzing results occurring so</font>

968
00:34:34,819 --> 00:34:39,739
what we're seeing scrolling by on the

969
00:34:36,649 --> 00:34:41,989
I'm a<font color="#E5E5E5"> master system now is every once in</font>

970
00:34:39,739 --> 00:34:43,518
a<font color="#CCCCCC"> while you'll see a state if there is</font>

971
00:34:41,989 --> 00:34:45,709
one scroll<font color="#E5E5E5"> by on the screen</font><font color="#CCCCCC"> and the</font>

972
00:34:43,518 --> 00:34:47,928
master is recording each of those<font color="#E5E5E5"> discs</font>

973
00:34:45,710 --> 00:34:49,549
as they occur and my hope is that I'll

974
00:34:47,929 --> 00:34:51,619
<font color="#E5E5E5">be able to analyze those discs offline</font>

975
00:34:49,549 --> 00:34:53,809
<font color="#E5E5E5">later in order to detect what changes</font>

976
00:34:51,619 --> 00:34:54,919
<font color="#E5E5E5">each instruction is having but of course</font>

977
00:34:53,809 --> 00:34:56,149
every once in a while<font color="#E5E5E5"> one of these</font>

978
00:34:54,918 --> 00:34:57,920
<font color="#E5E5E5">instructions will lock the</font><font color="#CCCCCC"> system and</font>

979
00:34:56,149 --> 00:35:00,589
you can<font color="#CCCCCC"> see the relay blinking as the</font>

980
00:34:57,920 --> 00:35:03,829
master is now resetting<font color="#CCCCCC"> rows and target</font>

981
00:35:00,589 --> 00:35:04,700
systems<font color="#E5E5E5"> so this thing ran for about</font>

982
00:35:03,829 --> 00:35:07,160
<font color="#E5E5E5">three weeks</font>

983
00:35:04,700 --> 00:35:09,410
I collected 15 gigabytes of logs<font color="#E5E5E5"> about</font>

984
00:35:07,160 --> 00:35:11,328
<font color="#E5E5E5">2.3 million different state disks for</font>

985
00:35:09,410 --> 00:35:12,618
<font color="#CCCCCC">four</font><font color="#E5E5E5"> thousand hours of compute time</font><font color="#CCCCCC"> in</font>

986
00:35:11,329 --> 00:35:14,210
order<font color="#E5E5E5"> to try</font><font color="#CCCCCC"> to gather enough</font>

987
00:35:12,619 --> 00:35:16,309
information<font color="#E5E5E5"> to reverse</font><font color="#CCCCCC"> engineer this</font>

988
00:35:14,210 --> 00:35:17,809
unknown instruction said so the very

989
00:35:16,309 --> 00:35:20,539
first<font color="#E5E5E5"> thing I wanted</font><font color="#CCCCCC"> to figure out after</font>

990
00:35:17,809 --> 00:35:24,109
I collected this giant collection of

991
00:35:20,539 --> 00:35:25,910
logs<font color="#E5E5E5"> was is any of my theory correct</font>

992
00:35:24,109 --> 00:35:28,819
am<font color="#CCCCCC"> I actually</font><font color="#E5E5E5"> able to circumvent ring</font>

993
00:35:25,910 --> 00:35:30,980
protections through this embedded<font color="#E5E5E5"> risk</font>

994
00:35:28,819 --> 00:35:32,029
<font color="#CCCCCC">core on the processor and</font><font color="#E5E5E5"> I've really</font>

995
00:35:30,980 --> 00:35:34,130
excited when I found<font color="#E5E5E5"> this first</font>

996
00:35:32,029 --> 00:35:37,309
instruction<font color="#E5E5E5"> a seven seven</font><font color="#CCCCCC"> one nine five</font>

997
00:35:34,130 --> 00:35:39,410
six three<font color="#E5E5E5"> an instruction that</font><font color="#CCCCCC"> I executed</font>

998
00:35:37,309 --> 00:35:41,059
in ring<font color="#E5E5E5"> three sending that instruction</font>

999
00:35:39,410 --> 00:35:42,980
over<font color="#E5E5E5"> to the deeply embedded core from</font>

1000
00:35:41,059 --> 00:35:45,680
<font color="#E5E5E5">the bridge instruction and we can see</font>

1001
00:35:42,980 --> 00:35:47,900
<font color="#E5E5E5">that</font><font color="#CCCCCC"> EDX got loaded</font><font color="#E5E5E5"> with a new value</font>

1002
00:35:45,680 --> 00:35:50,149
<font color="#E5E5E5">here</font><font color="#CCCCCC"> EDX became eight zero zero five</font>

1003
00:35:47,900 --> 00:35:53,240
<font color="#E5E5E5">zero</font><font color="#CCCCCC"> zero three three</font><font color="#E5E5E5"> that is the value</font>

1004
00:35:50,150 --> 00:35:54,829
<font color="#CCCCCC">of this control register zero so CR 0</font><font color="#E5E5E5"> is</font>

1005
00:35:53,240 --> 00:35:57,649
supposed<font color="#E5E5E5"> to be a register that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> only</font>

1006
00:35:54,829 --> 00:35:59,750
accessible<font color="#CCCCCC"> to ring</font><font color="#E5E5E5"> zero but we just read</font>

1007
00:35:57,650 --> 00:36:01,940
it<font color="#E5E5E5"> in ring 3</font><font color="#CCCCCC"> using the deeply embedded</font>

1008
00:35:59,750 --> 00:36:04,369
core and we're not<font color="#E5E5E5"> this limited to</font>

1009
00:36:01,940 --> 00:36:07,309
leaking data from ring zero<font color="#E5E5E5"> we can</font>

1010
00:36:04,369 --> 00:36:08,960
<font color="#E5E5E5">actually write data that only ring zero</font>

1011
00:36:07,309 --> 00:36:10,940
should have access<font color="#E5E5E5"> to</font><font color="#CCCCCC"> so for example</font>

1012
00:36:08,960 --> 00:36:13,640
only<font color="#E5E5E5"> ring zero should be able to modify</font>

1013
00:36:10,940 --> 00:36:15,559
<font color="#E5E5E5">the debug registers</font><font color="#CCCCCC"> in x86 but here we</font>

1014
00:36:13,640 --> 00:36:17,450
can<font color="#CCCCCC"> actually see that this deck</font>

1015
00:36:15,559 --> 00:36:19,910
instruction<font color="#E5E5E5"> this deeply embedded</font>

1016
00:36:17,450 --> 00:36:23,029
instruction was<font color="#E5E5E5"> able</font><font color="#CCCCCC"> to write the value</font>

1017
00:36:19,910 --> 00:36:24,078
of<font color="#E5E5E5"> EBP into the</font><font color="#CCCCCC"> dr zero register so this</font>

1018
00:36:23,029 --> 00:36:25,970
is a really<font color="#CCCCCC"> good sign</font>

1019
00:36:24,079 --> 00:36:27,380
thanks for looking looking<font color="#CCCCCC"> promising to</font>

1020
00:36:25,970 --> 00:36:29,839
be able<font color="#E5E5E5"> to use this backdoor for</font>

1021
00:36:27,380 --> 00:36:31,490
<font color="#CCCCCC">privileged escalation</font><font color="#E5E5E5"> purposes so really</font>

1022
00:36:29,839 --> 00:36:32,808
when we've<font color="#E5E5E5"> started tearing down the</font>

1023
00:36:31,490 --> 00:36:34,759
boundaries of rings when we can reach

1024
00:36:32,809 --> 00:36:36,350
directly<font color="#E5E5E5"> into the kernel we</font>

1025
00:36:34,760 --> 00:36:37,750
do whatever we want at that<font color="#E5E5E5"> point but I</font>

1026
00:36:36,350 --> 00:36:40,580
wanted<font color="#E5E5E5"> to come up with some sort</font><font color="#CCCCCC"> of</font>

1027
00:36:37,750 --> 00:36:42,920
simple interesting<font color="#CCCCCC"> proof-of-concept</font>

1028
00:36:40,580 --> 00:36:45,590
<font color="#CCCCCC">payload to demonstrate the capabilities</font>

1029
00:36:42,920 --> 00:36:47,740
<font color="#E5E5E5">of this this deeply embedded core on the</font>

1030
00:36:45,590 --> 00:36:50,330
processor so I thought an easy<font color="#E5E5E5"> easy</font>

1031
00:36:47,740 --> 00:36:52,310
<font color="#CCCCCC">proof-of-concept</font><font color="#E5E5E5"> would be privileged</font>

1032
00:36:50,330 --> 00:36:53,960
<font color="#E5E5E5">escalation payload and the privilege</font>

1033
00:36:52,310 --> 00:36:54,560
<font color="#E5E5E5">escalation payload would look something</font>

1034
00:36:53,960 --> 00:36:56,630
<font color="#CCCCCC">like this</font>

1035
00:36:54,560 --> 00:36:58,850
it's<font color="#E5E5E5"> a very first thing we want to do is</font>

1036
00:36:56,630 --> 00:37:01,910
we want to read<font color="#E5E5E5"> the global descriptor</font>

1037
00:36:58,850 --> 00:37:03,170
table register and an x86<font color="#E5E5E5"> global</font>

1038
00:37:01,910 --> 00:37:04,460
descriptor table register is going to

1039
00:37:03,170 --> 00:37:05,780
point<font color="#E5E5E5"> us to</font><font color="#CCCCCC"> the global descriptor table</font>

1040
00:37:04,460 --> 00:37:08,000
and one of the entries in<font color="#E5E5E5"> the global</font>

1041
00:37:05,780 --> 00:37:10,400
descriptor table<font color="#CCCCCC"> is going to be for the</font>

1042
00:37:08,000 --> 00:37:12,500
FS<font color="#E5E5E5"> segment register</font><font color="#CCCCCC"> and we can</font>

1043
00:37:10,400 --> 00:37:14,180
theoretically if we can circumvent

1044
00:37:12,500 --> 00:37:16,460
<font color="#CCCCCC">Marine protections we can reach directly</font>

1045
00:37:14,180 --> 00:37:17,810
<font color="#E5E5E5">into kernel</font><font color="#CCCCCC"> memory and pull out</font><font color="#E5E5E5"> that</font>

1046
00:37:16,460 --> 00:37:20,000
segment descriptor from the global

1047
00:37:17,810 --> 00:37:21,590
descriptor table<font color="#E5E5E5"> and there's some</font><font color="#CCCCCC"> bit</font>

1048
00:37:20,000 --> 00:37:24,350
fields in<font color="#E5E5E5"> that segment</font><font color="#CCCCCC"> descriptor that</font>

1049
00:37:21,590 --> 00:37:27,350
<font color="#CCCCCC">will give us a pointer to our processes</font>

1050
00:37:24,350 --> 00:37:29,630
<font color="#CCCCCC">task structure and again if we are</font><font color="#E5E5E5"> able</font>

1051
00:37:27,350 --> 00:37:32,420
<font color="#E5E5E5">to reach into kernel</font><font color="#CCCCCC"> memory and pull out</font>

1052
00:37:29,630 --> 00:37:34,640
information<font color="#E5E5E5"> we can grab a pointer to</font>

1053
00:37:32,420 --> 00:37:36,650
<font color="#E5E5E5">what's called the cred structure that</font>

1054
00:37:34,640 --> 00:37:38,359
sits<font color="#E5E5E5"> within this test structure so the</font>

1055
00:37:36,650 --> 00:37:41,630
credit structure is going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> hold my</font>

1056
00:37:38,359 --> 00:37:43,790
processes permissions so with that test

1057
00:37:41,630 --> 00:37:44,810
of<font color="#CCCCCC"> the credential structure what I'm</font>

1058
00:37:43,790 --> 00:37:47,359
going<font color="#CCCCCC"> to do is I'm</font><font color="#E5E5E5"> going to give myself</font>

1059
00:37:44,810 --> 00:37:49,759
root permissions<font color="#CCCCCC"> root and Linux is</font>

1060
00:37:47,359 --> 00:37:52,100
basically defined<font color="#CCCCCC"> by zero</font><font color="#E5E5E5"> so I'm going</font>

1061
00:37:49,760 --> 00:37:54,800
<font color="#E5E5E5">to use my range circumvention techniques</font>

1062
00:37:52,100 --> 00:37:57,680
in order<font color="#E5E5E5"> to write the value</font><font color="#CCCCCC"> root to</font><font color="#E5E5E5"> the</font>

1063
00:37:54,800 --> 00:38:00,800
<font color="#E5E5E5">new ID the GID the EU ID and the eg ID</font>

1064
00:37:57,680 --> 00:38:01,868
<font color="#E5E5E5">in that credentials structure so at</font>

1065
00:38:00,800 --> 00:38:03,980
least<font color="#E5E5E5"> that's what our payload</font>

1066
00:38:01,869 --> 00:38:05,359
theoretically looks like the<font color="#E5E5E5"> next</font>

1067
00:38:03,980 --> 00:38:08,180
<font color="#CCCCCC">question is</font><font color="#E5E5E5"> can we actually build this</font>

1068
00:38:05,359 --> 00:38:10,040
thing<font color="#E5E5E5"> using this deeply embedded core</font>

1069
00:38:08,180 --> 00:38:11,450
now if you look carefully at the payload

1070
00:38:10,040 --> 00:38:14,090
there's really only a few<font color="#E5E5E5"> places where</font>

1071
00:38:11,450 --> 00:38:16,069
<font color="#CCCCCC">we actually bypass the ring boundaries</font>

1072
00:38:14,090 --> 00:38:19,220
where we<font color="#CCCCCC"> actually reach</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> Curt ring</font>

1073
00:38:16,070 --> 00:38:20,869
<font color="#E5E5E5">zero and start modifying things so those</font>

1074
00:38:19,220 --> 00:38:22,790
are really the<font color="#CCCCCC"> only places where</font><font color="#E5E5E5"> I need</font>

1075
00:38:20,869 --> 00:38:26,170
this deeply<font color="#E5E5E5"> embedded core to do my work</font>

1076
00:38:22,790 --> 00:38:28,759
for<font color="#CCCCCC"> me but it</font><font color="#E5E5E5"> is kind of fun to write</font>

1077
00:38:26,170 --> 00:38:30,020
instructions for this the secret<font color="#E5E5E5"> core on</font>

1078
00:38:28,760 --> 00:38:31,609
the processor<font color="#E5E5E5"> and</font><font color="#CCCCCC"> they could do</font>

1079
00:38:30,020 --> 00:38:33,109
interesting<font color="#CCCCCC"> things so I thought it'd be</font>

1080
00:38:31,609 --> 00:38:36,200
<font color="#E5E5E5">a little</font><font color="#CCCCCC"> more interesting to actually</font>

1081
00:38:33,109 --> 00:38:37,940
<font color="#E5E5E5">try to write this</font><font color="#CCCCCC"> entire payload</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> an</font>

1082
00:38:36,200 --> 00:38:39,649
instructions<font color="#E5E5E5"> for that deeply embedded</font>

1083
00:38:37,940 --> 00:38:42,650
core as opposed to just<font color="#CCCCCC"> the kernel</font>

1084
00:38:39,650 --> 00:38:44,180
accesses that<font color="#CCCCCC"> I</font><font color="#E5E5E5"> needed so so to build</font>

1085
00:38:42,650 --> 00:38:47,330
<font color="#E5E5E5">that payload well I'm in a situation</font>

1086
00:38:44,180 --> 00:38:48,078
<font color="#CCCCCC">where I've got 15 gigabytes of</font><font color="#E5E5E5"> of logs</font>

1087
00:38:47,330 --> 00:38:49,788
<font color="#E5E5E5">I've</font>

1088
00:38:48,079 --> 00:38:52,309
<font color="#E5E5E5">they start sifting through this thing</font>

1089
00:38:49,789 --> 00:38:53,420
for primitives<font color="#E5E5E5"> so this actually starts</font>

1090
00:38:52,309 --> 00:38:55,339
to<font color="#E5E5E5"> feel a lot like</font><font color="#CCCCCC"> building a rope chain</font>

1091
00:38:53,420 --> 00:38:56,900
<font color="#E5E5E5">where conceptually I know what I'm</font>

1092
00:38:55,339 --> 00:38:58,400
<font color="#E5E5E5">trying to accomplish</font><font color="#CCCCCC"> but I need to</font>

1093
00:38:56,900 --> 00:39:00,650
figure out<font color="#E5E5E5"> how to use my individual</font>

1094
00:38:58,400 --> 00:39:01,999
pieces<font color="#E5E5E5"> in order to</font><font color="#CCCCCC"> accomplish</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> so we</font>

1095
00:39:00,650 --> 00:39:03,709
<font color="#E5E5E5">can start looking for through those logs</font>

1096
00:39:01,999 --> 00:39:06,019
for some some<font color="#E5E5E5"> things to help us out</font><font color="#CCCCCC"> so</font>

1097
00:39:03,709 --> 00:39:08,779
<font color="#CCCCCC">for</font><font color="#E5E5E5"> example I want to find</font><font color="#CCCCCC"> a gdt read</font>

1098
00:39:06,019 --> 00:39:10,399
instruction<font color="#E5E5E5"> from that deck core and sure</font>

1099
00:39:08,779 --> 00:39:11,930
enough<font color="#E5E5E5"> I can find a three one three</font>

1100
00:39:10,400 --> 00:39:13,609
which seems to<font color="#E5E5E5"> read the global</font>

1101
00:39:11,930 --> 00:39:15,589
descriptor<font color="#E5E5E5"> table register into the</font><font color="#CCCCCC"> ebh</font>

1102
00:39:13,609 --> 00:39:17,029
registered<font color="#E5E5E5"> I need a colonel read</font>

1103
00:39:15,589 --> 00:39:18,920
primitive I need some way to read

1104
00:39:17,029 --> 00:39:20,509
<font color="#CCCCCC">colonel memory from that deeply</font><font color="#E5E5E5"> embedded</font>

1105
00:39:18,920 --> 00:39:23,599
<font color="#CCCCCC">corner and if I can find</font><font color="#E5E5E5"> an instruction</font>

1106
00:39:20,509 --> 00:39:25,700
<font color="#CCCCCC">that does a D 407 read this single bite</font>

1107
00:39:23,599 --> 00:39:27,499
out of<font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> memory and into a</font>

1108
00:39:25,700 --> 00:39:30,229
processor register I need a kernel<font color="#CCCCCC"> write</font>

1109
00:39:27,499 --> 00:39:32,569
<font color="#CCCCCC">privileged I can find</font><font color="#E5E5E5"> out to</font><font color="#CCCCCC"> e to b7</font>

1110
00:39:30,229 --> 00:39:35,509
<font color="#E5E5E5">does exactly that it wrote the</font><font color="#CCCCCC"> the low</font>

1111
00:39:32,569 --> 00:39:39,049
bit of<font color="#CCCCCC"> ECX</font><font color="#E5E5E5"> into a kernel memory buffer</font>

1112
00:39:35,509 --> 00:39:40,249
so this is this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> promising but sifting</font>

1113
00:39:39,049 --> 00:39:42,709
through these logs like<font color="#E5E5E5"> this just</font>

1114
00:39:40,249 --> 00:39:44,299
<font color="#CCCCCC">doesn't scale very well I really wanted</font>

1115
00:39:42,709 --> 00:39:45,769
<font color="#E5E5E5">to be able to write robust payload it's</font>

1116
00:39:44,299 --> 00:39:47,420
a lot<font color="#E5E5E5"> of different things for this</font>

1117
00:39:45,769 --> 00:39:49,098
deeply<font color="#CCCCCC"> embedded core so I needed some</font>

1118
00:39:47,420 --> 00:39:50,390
<font color="#E5E5E5">way to automate this approach</font><font color="#CCCCCC"> that</font>

1119
00:39:49,099 --> 00:39:52,699
wouldn't<font color="#E5E5E5"> require me to manually go</font>

1120
00:39:50,390 --> 00:39:55,848
through 15<font color="#E5E5E5"> gigabytes</font><font color="#CCCCCC"> of logs so I</font>

1121
00:39:52,699 --> 00:39:57,109
started<font color="#E5E5E5"> looking</font><font color="#CCCCCC"> for a way to reverse</font>

1122
00:39:55,849 --> 00:39:59,209
<font color="#E5E5E5">engineer this deeply embedded</font>

1123
00:39:57,109 --> 00:40:01,339
instruction set<font color="#E5E5E5"> and an automated fashion</font>

1124
00:39:59,209 --> 00:40:03,799
so my idea<font color="#E5E5E5"> here was if we</font><font color="#CCCCCC"> could extract</font>

1125
00:40:01,339 --> 00:40:05,299
<font color="#E5E5E5">instruction behavior from</font><font color="#CCCCCC"> this set of</font>

1126
00:40:03,799 --> 00:40:08,509
<font color="#E5E5E5">state disks</font><font color="#CCCCCC"> I could</font><font color="#E5E5E5"> start to</font><font color="#CCCCCC"> identify</font>

1127
00:40:05,299 --> 00:40:10,549
bit patterns and yet<font color="#CCCCCC"> star in these</font><font color="#E5E5E5"> risk</font>

1128
00:40:08,509 --> 00:40:12,499
instructions<font color="#E5E5E5"> so I built a tool for this</font>

1129
00:40:10,549 --> 00:40:13,549
that I called<font color="#E5E5E5"> the collector and</font>

1130
00:40:12,499 --> 00:40:14,868
basically what that's<font color="#E5E5E5"> going to do is</font>

1131
00:40:13,549 --> 00:40:17,059
it's<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> help us automatically your</font>

1132
00:40:14,869 --> 00:40:18,709
<font color="#CCCCCC">verse engineer</font><font color="#E5E5E5"> this unknown instruction</font>

1133
00:40:17,059 --> 00:40:21,469
said so the<font color="#CCCCCC"> culture starts out by trying</font>

1134
00:40:18,709 --> 00:40:23,328
to look<font color="#E5E5E5"> at state</font><font color="#CCCCCC"> dips</font><font color="#E5E5E5"> and identify basic</font>

1135
00:40:21,469 --> 00:40:24,949
patterns and<font color="#E5E5E5"> them so for example it'll</font>

1136
00:40:23,329 --> 00:40:26,299
look for<font color="#E5E5E5"> words being copied around in</font>

1137
00:40:24,949 --> 00:40:28,160
the state<font color="#E5E5E5"> so</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> look for immediate</font>

1138
00:40:26,299 --> 00:40:29,599
values<font color="#E5E5E5"> being loaded into registers you</font>

1139
00:40:28,160 --> 00:40:31,098
look for one register being transferred

1140
00:40:29,599 --> 00:40:32,869
to<font color="#E5E5E5"> another</font><font color="#CCCCCC"> register to look for memory</font>

1141
00:40:31,099 --> 00:40:36,380
<font color="#E5E5E5">rights memory reads increments</font>

1142
00:40:32,869 --> 00:40:38,049
decrements<font color="#E5E5E5"> shifts media loads and look</font>

1143
00:40:36,380 --> 00:40:40,160
for various arithmetic<font color="#CCCCCC"> and bitwise</font>

1144
00:40:38,049 --> 00:40:44,509
instructions just<font color="#CCCCCC"> by looking at patterns</font>

1145
00:40:40,160 --> 00:40:46,149
<font color="#CCCCCC">in</font><font color="#E5E5E5"> these state differential records so</font>

1146
00:40:44,509 --> 00:40:48,170
what<font color="#E5E5E5"> will give you is it will start</font>

1147
00:40:46,150 --> 00:40:49,969
classifying instructions based on the

1148
00:40:48,170 --> 00:40:51,739
patterns<font color="#CCCCCC"> that it observed</font><font color="#E5E5E5"> so for</font><font color="#CCCCCC"> example</font>

1149
00:40:49,969 --> 00:40:53,209
here it's<font color="#E5E5E5"> telling me well these are all</font>

1150
00:40:51,739 --> 00:40:55,190
<font color="#E5E5E5">the</font><font color="#CCCCCC"> instructions that</font><font color="#E5E5E5"> I found for</font><font color="#CCCCCC"> you</font>

1151
00:40:53,209 --> 00:40:57,618
<font color="#E5E5E5">that transferred information from one</font>

1152
00:40:55,190 --> 00:40:59,509
register to another<font color="#E5E5E5"> now the very first</font>

1153
00:40:57,619 --> 00:41:00,709
thing<font color="#E5E5E5"> the collector is going to do at</font>

1154
00:40:59,509 --> 00:41:02,010
this<font color="#E5E5E5"> point after it generates this</font>

1155
00:41:00,709 --> 00:41:03,899
instruction then<font color="#E5E5E5"> it's</font>

1156
00:41:02,010 --> 00:41:05,910
<font color="#E5E5E5">is it's going to try to</font><font color="#CCCCCC"> resolve what do</font>

1157
00:41:03,900 --> 00:41:08,220
these individual bits<font color="#E5E5E5"> mean in this</font>

1158
00:41:05,910 --> 00:41:09,930
instruction so through<font color="#CCCCCC"> some manual</font>

1159
00:41:08,220 --> 00:41:12,839
analysis<font color="#CCCCCC"> I was able to figure</font><font color="#E5E5E5"> out for</font>

1160
00:41:09,930 --> 00:41:16,290
<font color="#CCCCCC">example that the eex register is encoded</font>

1161
00:41:12,840 --> 00:41:19,050
<font color="#CCCCCC">by</font><font color="#E5E5E5"> the bits 0 0 0 0 and the ECX register</font>

1162
00:41:16,290 --> 00:41:20,279
is encoded by<font color="#E5E5E5"> the bits 0 0 0 1</font><font color="#CCCCCC"> so the</font>

1163
00:41:19,050 --> 00:41:21,960
first thing that<font color="#CCCCCC"> collector is</font><font color="#E5E5E5"> going to</font>

1164
00:41:20,280 --> 00:41:24,360
do is it's<font color="#CCCCCC"> going to check for each of</font>

1165
00:41:21,960 --> 00:41:26,160
these<font color="#E5E5E5"> instructions</font><font color="#CCCCCC"> based on the register</font>

1166
00:41:24,360 --> 00:41:28,680
change that I'm<font color="#CCCCCC"> observing can I find</font>

1167
00:41:26,160 --> 00:41:30,870
those bit patterns somewhere in this

1168
00:41:28,680 --> 00:41:32,879
instruction so it'll pull out patterns

1169
00:41:30,870 --> 00:41:35,670
<font color="#CCCCCC">like this this is basically everywhere</font>

1170
00:41:32,880 --> 00:41:37,140
in this entire set of<font color="#CCCCCC"> data that those</font>

1171
00:41:35,670 --> 00:41:38,900
individual registers could have been

1172
00:41:37,140 --> 00:41:41,490
encoded<font color="#CCCCCC"> in their corresponding</font>

1173
00:41:38,900 --> 00:41:43,920
<font color="#E5E5E5">instructions and what you'll see is</font><font color="#CCCCCC"> that</font>

1174
00:41:41,490 --> 00:41:47,040
there are patterns here there's only<font color="#E5E5E5"> one</font>

1175
00:41:43,920 --> 00:41:48,960
<font color="#CCCCCC">location</font><font color="#E5E5E5"> and this the set of register</font>

1176
00:41:47,040 --> 00:41:51,870
the set of<font color="#E5E5E5"> instructions where that</font>

1177
00:41:48,960 --> 00:41:53,190
pattern is it's consistent<font color="#E5E5E5"> so the</font>

1178
00:41:51,870 --> 00:41:55,529
collectors they put on the<font color="#E5E5E5"> FIR well it</font>

1179
00:41:53,190 --> 00:41:57,870
has to<font color="#CCCCCC"> be these two columns encoding</font>

1180
00:41:55,530 --> 00:41:59,400
<font color="#E5E5E5">your your registers one column encoding</font>

1181
00:41:57,870 --> 00:42:01,140
the source one column encoding the

1182
00:41:59,400 --> 00:42:03,120
destination<font color="#CCCCCC"> we can use</font><font color="#E5E5E5"> that same</font>

1183
00:42:01,140 --> 00:42:04,350
<font color="#E5E5E5">technique</font><font color="#CCCCCC"> to pull out other</font><font color="#E5E5E5"> bit patterns</font>

1184
00:42:03,120 --> 00:42:06,960
so for example here we're trying<font color="#E5E5E5"> to</font>

1185
00:42:04,350 --> 00:42:08,430
<font color="#CCCCCC">resolve which what</font><font color="#E5E5E5"> op codes are being</font>

1186
00:42:06,960 --> 00:42:09,780
used to encode these different

1187
00:42:08,430 --> 00:42:11,700
instructions and you'll see that it's

1188
00:42:09,780 --> 00:42:13,650
not<font color="#E5E5E5"> perfect ideally you would see all</font>

1189
00:42:11,700 --> 00:42:15,270
these registers<font color="#E5E5E5"> would say with</font><font color="#CCCCCC"> all these</font>

1190
00:42:13,650 --> 00:42:17,460
<font color="#CCCCCC">instructions with exactly the same</font>

1191
00:42:15,270 --> 00:42:19,200
<font color="#E5E5E5">opcode pattern and that's not what we</font>

1192
00:42:17,460 --> 00:42:20,640
see some<font color="#E5E5E5"> of the later lines don't really</font>

1193
00:42:19,200 --> 00:42:22,379
follow<font color="#E5E5E5"> the patterns that</font><font color="#CCCCCC"> we saw</font><font color="#E5E5E5"> on some</font>

1194
00:42:20,640 --> 00:42:23,730
of the earlier<font color="#E5E5E5"> ones but that's</font><font color="#CCCCCC"> okay the</font>

1195
00:42:22,380 --> 00:42:25,410
collector will deal with<font color="#CCCCCC"> that it'll just</font>

1196
00:42:23,730 --> 00:42:27,980
<font color="#E5E5E5">try to pick out the patterns that are</font>

1197
00:42:25,410 --> 00:42:30,120
the most probable or the<font color="#E5E5E5"> most common</font>

1198
00:42:27,980 --> 00:42:32,190
didn't even do things like try<font color="#E5E5E5"> to pick</font>

1199
00:42:30,120 --> 00:42:34,319
out don't care bits or bits set<font color="#E5E5E5"> have</font>

1200
00:42:32,190 --> 00:42:35,790
some unusual statistical properties<font color="#E5E5E5"> that</font>

1201
00:42:34,320 --> 00:42:37,110
might<font color="#E5E5E5"> indicate that they do something</font>

1202
00:42:35,790 --> 00:42:39,660
even though we don't<font color="#CCCCCC"> know what they</font><font color="#E5E5E5"> did</font>

1203
00:42:37,110 --> 00:42:40,890
<font color="#E5E5E5">and then it'll Jam all this information</font>

1204
00:42:39,660 --> 00:42:43,950
together in order to automatically

1205
00:42:40,890 --> 00:42:47,069
derive a bit encoding for that specific

1206
00:42:43,950 --> 00:42:48,600
instruction so based on the beans<font color="#E5E5E5"> that</font>

1207
00:42:47,070 --> 00:42:50,010
the collector was finding<font color="#CCCCCC"> he's a</font><font color="#E5E5E5"> sort of</font>

1208
00:42:48,600 --> 00:42:51,870
<font color="#E5E5E5">the</font><font color="#CCCCCC"> encodings that I</font><font color="#E5E5E5"> came</font><font color="#CCCCCC"> up with in</font><font color="#E5E5E5"> the</font>

1209
00:42:50,010 --> 00:42:54,060
basic instructions I had to work<font color="#E5E5E5"> with</font>

1210
00:42:51,870 --> 00:42:56,400
for<font color="#CCCCCC"> the deeply</font><font color="#E5E5E5"> embedded core I've got</font>

1211
00:42:54,060 --> 00:42:57,450
instructions<font color="#E5E5E5"> to load the global</font>

1212
00:42:56,400 --> 00:42:59,160
descriptor table<font color="#E5E5E5"> I've got instructions</font>

1213
00:42:57,450 --> 00:43:00,689
<font color="#E5E5E5">to move data around load immediate</font>

1214
00:42:59,160 --> 00:43:01,890
values read data out of<font color="#E5E5E5"> memory write</font>

1215
00:43:00,690 --> 00:43:03,900
data to memory i've got all the basic

1216
00:43:01,890 --> 00:43:05,879
primitives<font color="#CCCCCC"> i need now in order to</font>

1217
00:43:03,900 --> 00:43:09,720
implement that payload<font color="#CCCCCC"> that</font><font color="#E5E5E5"> i was a</font>

1218
00:43:05,880 --> 00:43:12,450
<font color="#E5E5E5">trying to implement so</font><font color="#CCCCCC"> so at this point</font>

1219
00:43:09,720 --> 00:43:13,980
<font color="#E5E5E5">i decided to go all out and</font><font color="#CCCCCC"> i wrote a</font>

1220
00:43:12,450 --> 00:43:15,549
complete assembler for this custom

1221
00:43:13,980 --> 00:43:17,680
assembly language and<font color="#CCCCCC"> they called</font>

1222
00:43:15,550 --> 00:43:19,330
<font color="#CCCCCC">DICE assembler which basically</font><font color="#E5E5E5"> means</font>

1223
00:43:17,680 --> 00:43:20,589
<font color="#CCCCCC">that I can</font><font color="#E5E5E5"> write instructions and one of</font>

1224
00:43:19,330 --> 00:43:22,480
their<font color="#CCCCCC"> primitive forms like this</font><font color="#E5E5E5"> at a</font>

1225
00:43:20,590 --> 00:43:24,940
high level<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then get it encoded into</font>

1226
00:43:22,480 --> 00:43:26,410
<font color="#E5E5E5">a binary format</font><font color="#CCCCCC"> I can then</font><font color="#E5E5E5"> wrap each of</font>

1227
00:43:24,940 --> 00:43:28,840
those<font color="#E5E5E5"> instructions in the x86</font><font color="#CCCCCC"> Bridge</font>

1228
00:43:26,410 --> 00:43:30,819
instruction<font color="#E5E5E5"> and send</font><font color="#CCCCCC"> that instruction</font>

1229
00:43:28,840 --> 00:43:33,250
over<font color="#E5E5E5"> to the wrist core in order to</font>

1230
00:43:30,820 --> 00:43:35,320
execute<font color="#CCCCCC"> that instruction so let me our</font>

1231
00:43:33,250 --> 00:43:37,270
<font color="#CCCCCC">payload again</font><font color="#E5E5E5"> in dice assembly it looks</font>

1232
00:43:35,320 --> 00:43:39,970
something<font color="#CCCCCC"> like this we grab the global</font>

1233
00:43:37,270 --> 00:43:43,060
descriptor table register we calculate

1234
00:43:39,970 --> 00:43:46,089
an offset to that FS descriptor we use

1235
00:43:43,060 --> 00:43:47,200
our<font color="#CCCCCC"> rings</font><font color="#E5E5E5"> for convention instructions in</font>

1236
00:43:46,090 --> 00:43:49,450
<font color="#CCCCCC">order to pull</font><font color="#E5E5E5"> at the scripture</font>

1237
00:43:47,200 --> 00:43:51,549
descriptor directly out<font color="#CCCCCC"> of kernel memory</font>

1238
00:43:49,450 --> 00:43:53,169
and parse<font color="#CCCCCC"> its bit patterns at that point</font>

1239
00:43:51,550 --> 00:43:55,270
we've got<font color="#E5E5E5"> a pointer</font><font color="#CCCCCC"> to the task struct</font>

1240
00:43:53,170 --> 00:43:56,440
<font color="#CCCCCC">so we'll pull up</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> apart that pointer</font>

1241
00:43:55,270 --> 00:43:56,950
in order to get a pointer to the cred

1242
00:43:56,440 --> 00:43:58,690
<font color="#E5E5E5">struct</font>

1243
00:43:56,950 --> 00:44:01,120
<font color="#E5E5E5">will pull</font><font color="#CCCCCC"> apart</font><font color="#E5E5E5"> that pointer in order to</font>

1244
00:43:58,690 --> 00:44:04,000
start<font color="#E5E5E5"> writing out the UID the G ID the</font>

1245
00:44:01,120 --> 00:44:06,520
EU ID and the eg ID<font color="#E5E5E5"> feel it's all in</font>

1246
00:44:04,000 --> 00:44:08,380
this custom<font color="#E5E5E5"> deeply embedded instruction</font>

1247
00:44:06,520 --> 00:44:10,690
set<font color="#CCCCCC"> for that alternate core on the</font>

1248
00:44:08,380 --> 00:44:12,310
processor so<font color="#E5E5E5"> collectively that looks</font>

1249
00:44:10,690 --> 00:44:14,440
something like<font color="#E5E5E5"> this we actually build</font>

1250
00:44:12,310 --> 00:44:16,210
that<font color="#E5E5E5"> into a working payload we've got</font>

1251
00:44:14,440 --> 00:44:18,100
our introductory instructions that<font color="#CCCCCC"> are</font>

1252
00:44:16,210 --> 00:44:19,930
<font color="#E5E5E5">going to be the the launch instruction</font>

1253
00:44:18,100 --> 00:44:22,060
to activate the deeply embedded core and

1254
00:44:19,930 --> 00:44:24,490
then we've got each of those<font color="#E5E5E5"> assembled</font>

1255
00:44:22,060 --> 00:44:26,230
<font color="#CCCCCC">dice instructions wrapped and the bridge</font>

1256
00:44:24,490 --> 00:44:28,089
instructions so<font color="#CCCCCC"> that I can feed it</font><font color="#E5E5E5"> over</font>

1257
00:44:26,230 --> 00:44:30,730
to<font color="#E5E5E5"> that embedded core but I mean</font><font color="#CCCCCC"> when</font>

1258
00:44:28,090 --> 00:44:32,800
we're done we launch<font color="#E5E5E5"> a shell in order to</font>

1259
00:44:30,730 --> 00:44:34,720
try to try<font color="#CCCCCC"> to get our privilege</font>

1260
00:44:32,800 --> 00:44:36,790
<font color="#CCCCCC">escalation</font><font color="#E5E5E5"> so one more time revisiting</font>

1261
00:44:34,720 --> 00:44:38,140
<font color="#E5E5E5">that demo from the beginning</font><font color="#CCCCCC"> now now</font>

1262
00:44:36,790 --> 00:44:40,660
<font color="#E5E5E5">that we understand how all the different</font>

1263
00:44:38,140 --> 00:44:43,540
pieces work<font color="#E5E5E5"> we began</font><font color="#CCCCCC"> by unlocking</font><font color="#E5E5E5"> the</font>

1264
00:44:40,660 --> 00:44:45,279
<font color="#CCCCCC">backdoor by executing that secret x86</font>

1265
00:44:43,540 --> 00:44:47,410
launch instruction that<font color="#E5E5E5"> was enabled by</font>

1266
00:44:45,280 --> 00:44:48,940
<font color="#CCCCCC">the god mode bid after we've executed</font>

1267
00:44:47,410 --> 00:44:50,589
the launch instruction the processor is

1268
00:44:48,940 --> 00:44:52,150
ready to start<font color="#E5E5E5"> accepting</font><font color="#CCCCCC"> RISC</font>

1269
00:44:50,590 --> 00:44:53,500
instructions<font color="#E5E5E5"> but we're only able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> get</font>

1270
00:44:52,150 --> 00:44:55,720
those instructions over<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> RISC</font>

1271
00:44:53,500 --> 00:44:58,120
<font color="#CCCCCC">score by wrapping the instruction in the</font>

1272
00:44:55,720 --> 00:45:00,879
x86<font color="#CCCCCC"> bridge instructions so that</font><font color="#E5E5E5"> bound</font>

1273
00:44:58,120 --> 00:45:03,220
<font color="#CCCCCC">EAX instruction is now how we can</font><font color="#E5E5E5"> send</font>

1274
00:45:00,880 --> 00:45:05,500
these individual risk instructions<font color="#E5E5E5"> over</font>

1275
00:45:03,220 --> 00:45:07,240
to that deeply embedded core in<font color="#E5E5E5"> order to</font>

1276
00:45:05,500 --> 00:45:08,920
get it<font color="#CCCCCC"> to execute exactly what we want</font>

1277
00:45:07,240 --> 00:45:10,629
in<font color="#E5E5E5"> order to make it circumvent the</font>

1278
00:45:08,920 --> 00:45:11,470
processor security checks<font color="#E5E5E5"> that we're</font>

1279
00:45:10,630 --> 00:45:14,560
trying to<font color="#E5E5E5"> get around</font>

1280
00:45:11,470 --> 00:45:17,589
<font color="#CCCCCC">finally we'll execute</font><font color="#E5E5E5"> a shell in order</font>

1281
00:45:14,560 --> 00:45:20,920
to view<font color="#E5E5E5"> our</font><font color="#CCCCCC"> results so once again</font><font color="#E5E5E5"> we</font>

1282
00:45:17,590 --> 00:45:22,300
simply compile this program<font color="#E5E5E5"> and check</font>

1283
00:45:20,920 --> 00:45:24,940
who we are we're<font color="#CCCCCC"> still a regular user</font>

1284
00:45:22,300 --> 00:45:27,350
<font color="#CCCCCC">will relaunch this program and see</font><font color="#E5E5E5"> that</font>

1285
00:45:24,940 --> 00:45:29,240
we've become<font color="#E5E5E5"> route so</font>

1286
00:45:27,350 --> 00:45:31,700
I'm only gonna<font color="#E5E5E5"> have seriously throw this</font>

1287
00:45:29,240 --> 00:45:34,160
out but this<font color="#E5E5E5"> is sort of like a ring</font><font color="#CCCCCC"> -</font>

1288
00:45:31,700 --> 00:45:36,259
floor on the processor so<font color="#E5E5E5"> ring -</font><font color="#CCCCCC"> three</font>

1289
00:45:34,160 --> 00:45:39,950
was a core that was completely<font color="#E5E5E5"> separate</font>

1290
00:45:36,260 --> 00:45:41,510
from<font color="#E5E5E5"> the x86 processor</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a little</font>

1291
00:45:39,950 --> 00:45:43,640
bit more deeply<font color="#E5E5E5"> embedded it's sort of a</font>

1292
00:45:41,510 --> 00:45:46,610
secret<font color="#CCCCCC"> kool-aid located core alongside</font>

1293
00:45:43,640 --> 00:45:48,830
the x86 core unlike<font color="#E5E5E5"> green</font><font color="#CCCCCC"> - three it has</font>

1294
00:45:46,610 --> 00:45:52,310
unrestricted access to<font color="#E5E5E5"> the x86 cores</font>

1295
00:45:48,830 --> 00:45:54,529
<font color="#E5E5E5">register filed it's got shared execution</font>

1296
00:45:52,310 --> 00:45:56,509
pipeline with the x86 core which in many

1297
00:45:54,530 --> 00:45:58,910
ways makes this more powerful<font color="#CCCCCC"> than ring</font>

1298
00:45:56,510 --> 00:46:00,380
<font color="#E5E5E5">-</font><font color="#CCCCCC"> 3 was but at the same time the whole</font>

1299
00:45:58,910 --> 00:46:02,299
<font color="#CCCCCC">thing's nebulous</font><font color="#E5E5E5"> this deep and the whole</font>

1300
00:46:00,380 --> 00:46:04,070
ring model<font color="#E5E5E5"> has sort of completely</font>

1301
00:46:02,300 --> 00:46:05,060
shattered by this point<font color="#E5E5E5"> but it is sort</font>

1302
00:46:04,070 --> 00:46:08,420
of an<font color="#E5E5E5"> interesting thing</font><font color="#CCCCCC"> to think about</font>

1303
00:46:05,060 --> 00:46:11,420
<font color="#E5E5E5">so that leaves us</font><font color="#CCCCCC"> with this this</font><font color="#E5E5E5"> is</font>

1304
00:46:08,420 --> 00:46:14,240
direct<font color="#E5E5E5"> ring 3 - ring</font><font color="#CCCCCC"> 0 hardware</font>

1305
00:46:11,420 --> 00:46:17,630
privilege escalation<font color="#E5E5E5"> on x86 this has</font>

1306
00:46:14,240 --> 00:46:18,859
never<font color="#E5E5E5"> been</font><font color="#CCCCCC"> done that every other</font><font color="#E5E5E5"> every</font>

1307
00:46:17,630 --> 00:46:21,020
other<font color="#CCCCCC"> can tap this</font><font color="#E5E5E5"> kind of thing has</font>

1308
00:46:18,860 --> 00:46:23,630
used<font color="#CCCCCC"> operating system code or other</font>

1309
00:46:21,020 --> 00:46:26,180
<font color="#E5E5E5">program code in order to exploit some</font>

1310
00:46:23,630 --> 00:46:27,980
<font color="#CCCCCC">flaw this is purely a</font><font color="#E5E5E5"> hardware</font>

1311
00:46:26,180 --> 00:46:30,140
circumvention mechanism for the

1312
00:46:27,980 --> 00:46:32,840
fundamental<font color="#CCCCCC"> ring</font><font color="#E5E5E5"> privilege model behind</font>

1313
00:46:30,140 --> 00:46:34,850
<font color="#E5E5E5">all</font><font color="#CCCCCC"> of our processors fortunately it</font>

1314
00:46:32,840 --> 00:46:36,470
shouldn't be<font color="#E5E5E5"> that big of a deal we still</font>

1315
00:46:34,850 --> 00:46:38,330
need ring<font color="#CCCCCC"> zero access in order to</font><font color="#E5E5E5"> get</font>

1316
00:46:36,470 --> 00:46:39,859
this<font color="#E5E5E5"> whole thing kicked off the the</font>

1317
00:46:38,330 --> 00:46:43,279
whole<font color="#E5E5E5"> rest of the</font><font color="#CCCCCC"> pipeline can</font><font color="#E5E5E5"> be done</font>

1318
00:46:39,860 --> 00:46:45,980
in ring<font color="#CCCCCC"> 3 but the first change that that</font>

1319
00:46:43,280 --> 00:46:49,280
toggling the god mode bit had to be done

1320
00:46:45,980 --> 00:46:51,290
with ring<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> access and he sets the</font>

1321
00:46:49,280 --> 00:46:53,120
theory as I started poking around some

1322
00:46:51,290 --> 00:46:55,550
of<font color="#E5E5E5"> these other systems I had in my</font>

1323
00:46:53,120 --> 00:46:57,410
stockpile<font color="#CCCCCC"> that</font><font color="#E5E5E5"> turned out to</font><font color="#CCCCCC"> not be the</font>

1324
00:46:55,550 --> 00:46:59,660
<font color="#E5E5E5">case so what we're</font><font color="#CCCCCC"> looking at here is</font>

1325
00:46:57,410 --> 00:47:02,000
another<font color="#CCCCCC"> vsc</font><font color="#E5E5E5"> 3</font><font color="#CCCCCC"> process so this is a</font>

1326
00:46:59,660 --> 00:47:03,890
<font color="#CCCCCC">samuel</font><font color="#E5E5E5"> 2 core</font><font color="#CCCCCC"> i've just booted up this</font>

1327
00:47:02,000 --> 00:47:05,360
<font color="#E5E5E5">system</font><font color="#CCCCCC"> from scratch nothing else has</font>

1328
00:47:03,890 --> 00:47:07,160
been<font color="#E5E5E5"> modified nothing else been touched</font>

1329
00:47:05,360 --> 00:47:09,860
on it<font color="#E5E5E5"> we're under login as</font><font color="#CCCCCC"> an</font>

1330
00:47:07,160 --> 00:47:11,180
unprivileged user<font color="#CCCCCC"> I could have dumped</font>

1331
00:47:09,860 --> 00:47:13,640
all this over<font color="#CCCCCC"> cereal I didn't have the</font>

1332
00:47:11,180 --> 00:47:19,460
<font color="#E5E5E5">right</font><font color="#CCCCCC"> setup for</font><font color="#E5E5E5"> that but after</font><font color="#CCCCCC"> we log</font>

1333
00:47:13,640 --> 00:47:23,839
<font color="#CCCCCC">into the system and</font><font color="#E5E5E5"> what we're going</font><font color="#CCCCCC"> to</font>

1334
00:47:19,460 --> 00:47:25,370
do is install the<font color="#E5E5E5"> MSR kernel module in</font>

1335
00:47:23,840 --> 00:47:27,260
<font color="#E5E5E5">order to gain access to the</font><font color="#CCCCCC"> MSR bitch</font>

1336
00:47:25,370 --> 00:47:28,549
we're not going to<font color="#CCCCCC"> modify them but a</font><font color="#E5E5E5"> I'm</font>

1337
00:47:27,260 --> 00:47:30,110
going to read them out I don't<font color="#CCCCCC"> have the</font>

1338
00:47:28,550 --> 00:47:31,640
read<font color="#E5E5E5"> em it's our tool on this so I'm</font>

1339
00:47:30,110 --> 00:47:33,650
just<font color="#CCCCCC"> going to hex them about</font><font color="#E5E5E5"> there's a</font>

1340
00:47:31,640 --> 00:47:35,690
specific MSR bit<font color="#E5E5E5"> so I'm looking at the</font>

1341
00:47:33,650 --> 00:47:37,700
global<font color="#E5E5E5"> configuration register on this</font>

1342
00:47:35,690 --> 00:47:39,080
processor<font color="#CCCCCC"> and when I do</font><font color="#E5E5E5"> that you'll see</font>

1343
00:47:37,700 --> 00:47:40,819
<font color="#E5E5E5">the low</font><font color="#CCCCCC"> byte of</font><font color="#E5E5E5"> the global configuration</font>

1344
00:47:39,080 --> 00:47:42,859
<font color="#E5E5E5">registers these</font>

1345
00:47:40,820 --> 00:47:45,349
that is<font color="#CCCCCC"> one one zero one zero one one</font>

1346
00:47:42,859 --> 00:47:47,540
<font color="#CCCCCC">one the low bid this registers the god</font>

1347
00:47:45,349 --> 00:47:49,849
mode bid and I mean see god mode bit is

1348
00:47:47,540 --> 00:47:52,009
active by default<font color="#E5E5E5"> on a freshly booted</font>

1349
00:47:49,849 --> 00:47:54,380
<font color="#E5E5E5">Samuel</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> core that means that any</font>

1350
00:47:52,010 --> 00:47:57,980
unprivileged<font color="#E5E5E5"> code on the system could</font>

1351
00:47:54,380 --> 00:48:00,589
have access<font color="#E5E5E5"> to</font><font color="#CCCCCC"> Colonel at any time which</font>

1352
00:47:57,980 --> 00:48:03,890
which<font color="#CCCCCC"> is a scary prospect</font><font color="#E5E5E5"> and we need</font>

1353
00:48:00,589 --> 00:48:06,710
sort<font color="#E5E5E5"> of blow away the x86 ring</font>

1354
00:48:03,890 --> 00:48:08,480
protection<font color="#E5E5E5"> model entirely all of our</font>

1355
00:48:06,710 --> 00:48:11,480
other protections fall apart

1356
00:48:08,480 --> 00:48:13,490
<font color="#E5E5E5">antivirus does nothing now</font><font color="#CCCCCC"> ASLR depth</font>

1357
00:48:11,480 --> 00:48:14,930
<font color="#E5E5E5">they're easily circumvented when you can</font>

1358
00:48:13,490 --> 00:48:16,490
just<font color="#E5E5E5"> directly reach into ring</font><font color="#CCCCCC"> zero</font>

1359
00:48:14,930 --> 00:48:18,230
code-signing control flow integrity

1360
00:48:16,490 --> 00:48:20,029
<font color="#CCCCCC">Colonel integrity checks</font><font color="#E5E5E5"> don't do</font>

1361
00:48:18,230 --> 00:48:23,330
anything<font color="#E5E5E5"> when there's no more separation</font>

1362
00:48:20,030 --> 00:48:25,700
between the<font color="#E5E5E5"> Rings so so it's a scary</font>

1363
00:48:23,330 --> 00:48:27,020
prospect but there are mitigations<font color="#E5E5E5"> so</font>

1364
00:48:25,700 --> 00:48:28,848
one<font color="#CCCCCC"> approach would</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> to update the</font>

1365
00:48:27,020 --> 00:48:30,740
microcode<font color="#E5E5E5"> to lock down the god mode bit</font>

1366
00:48:28,849 --> 00:48:32,330
well we can update<font color="#E5E5E5"> micro code to disable</font>

1367
00:48:30,740 --> 00:48:34,339
<font color="#E5E5E5">the bridge instructions so</font><font color="#CCCCCC"> that we</font>

1368
00:48:32,330 --> 00:48:36,710
couldn't<font color="#E5E5E5"> feed instructions to the deeply</font>

1369
00:48:34,339 --> 00:48:38,540
<font color="#E5E5E5">embedded core alternatively we can</font>

1370
00:48:36,710 --> 00:48:40,130
update the OS and<font color="#E5E5E5"> firmware to disable</font>

1371
00:48:38,540 --> 00:48:41,540
that<font color="#CCCCCC"> god mode bit and just periodically</font>

1372
00:48:40,130 --> 00:48:43,700
<font color="#E5E5E5">check its</font><font color="#CCCCCC"> status to</font><font color="#E5E5E5"> make sure it hasn't</font>

1373
00:48:41,540 --> 00:48:45,349
<font color="#CCCCCC">been enabled but at the end</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the day</font>

1374
00:48:43,700 --> 00:48:46,848
this is an old processor it's not in

1375
00:48:45,349 --> 00:48:49,070
widespread<font color="#CCCCCC"> use and I don't</font><font color="#E5E5E5"> mean</font><font color="#CCCCCC"> to throw</font>

1376
00:48:46,849 --> 00:48:50,660
<font color="#CCCCCC">Vee under the bus</font><font color="#E5E5E5"> I think this was a</font>

1377
00:48:49,070 --> 00:48:52,760
good<font color="#E5E5E5"> idea that just had a flaw</font><font color="#CCCCCC"> on its</font>

1378
00:48:50,660 --> 00:48:54,950
implementation<font color="#E5E5E5"> their target market was</font>

1379
00:48:52,760 --> 00:48:57,380
embedded<font color="#E5E5E5"> and this was probably a useful</font>

1380
00:48:54,950 --> 00:48:59,799
feature<font color="#CCCCCC"> for their customers so instead</font>

1381
00:48:57,380 --> 00:49:04,550
we<font color="#CCCCCC"> should take this as a case study</font>

1382
00:48:59,800 --> 00:49:06,520
<font color="#E5E5E5">backdoors do exist in hardware but we</font>

1383
00:49:04,550 --> 00:49:09,950
can find them with<font color="#E5E5E5"> the right techniques</font>

1384
00:49:06,520 --> 00:49:12,020
<font color="#E5E5E5">so looking forward I do think this is a</font>

1385
00:49:09,950 --> 00:49:14,180
big deal this isn't just a c3 problem

1386
00:49:12,020 --> 00:49:17,030
<font color="#E5E5E5">this isn't just an x86 problem this is</font>

1387
00:49:14,180 --> 00:49:19,190
<font color="#E5E5E5">an overall flaw or an overall problem in</font>

1388
00:49:17,030 --> 00:49:21,260
all of<font color="#E5E5E5"> computer engineering where these</font>

1389
00:49:19,190 --> 00:49:23,300
black<font color="#E5E5E5"> boxes that were trusting for all</font>

1390
00:49:21,260 --> 00:49:25,339
of our computation we have no way to

1391
00:49:23,300 --> 00:49:28,030
introspect them<font color="#E5E5E5"> so whether or not these</font>

1392
00:49:25,339 --> 00:49:30,259
<font color="#CCCCCC">Hardware backdoors exist anywhere else</font>

1393
00:49:28,030 --> 00:49:32,119
<font color="#CCCCCC">this is a problem that's</font><font color="#E5E5E5"> going to</font>

1394
00:49:30,260 --> 00:49:34,520
<font color="#E5E5E5">continue to haunt us until we have a way</font>

1395
00:49:32,119 --> 00:49:36,170
to<font color="#E5E5E5"> look into these black boxes so I</font>

1396
00:49:34,520 --> 00:49:37,790
<font color="#CCCCCC">think that's the big takeaway here</font><font color="#E5E5E5"> is</font>

1397
00:49:36,170 --> 00:49:38,420
whenever<font color="#E5E5E5"> we find something</font><font color="#CCCCCC"> secretive or</font>

1398
00:49:37,790 --> 00:49:40,640
<font color="#E5E5E5">off-limits</font>

1399
00:49:38,420 --> 00:49:41,960
we as security researchers need<font color="#E5E5E5"> to push</font>

1400
00:49:40,640 --> 00:49:42,710
deeper<font color="#E5E5E5"> because that's how we establish</font>

1401
00:49:41,960 --> 00:49:46,839
trust

1402
00:49:42,710 --> 00:49:48,980
that's how<font color="#CCCCCC"> cybersecurity</font><font color="#E5E5E5"> should work</font><font color="#CCCCCC"> so</font>

1403
00:49:46,839 --> 00:49:50,630
<font color="#CCCCCC">along those lines</font><font color="#E5E5E5"> I've open sourced all</font>

1404
00:49:48,980 --> 00:49:52,369
this information all the tools

1405
00:49:50,630 --> 00:49:53,850
techniques<font color="#E5E5E5"> code and data from this are</font>

1406
00:49:52,369 --> 00:49:55,500
available<font color="#CCCCCC"> online now</font>

1407
00:49:53,850 --> 00:49:56,850
you can skin anything scan<font color="#E5E5E5"> everything</font>

1408
00:49:55,500 --> 00:49:59,310
and I really<font color="#CCCCCC"> really</font><font color="#E5E5E5"> hope</font><font color="#CCCCCC"> people will</font>

1409
00:49:56,850 --> 00:50:01,080
build<font color="#E5E5E5"> off of</font><font color="#CCCCCC"> this for future</font><font color="#E5E5E5"> research</font>

1410
00:49:59,310 --> 00:50:06,090
you know let's dive<font color="#CCCCCC"> deeper and</font><font color="#E5E5E5"> deeper</font>

1411
00:50:01,080 --> 00:50:07,650
into<font color="#E5E5E5"> and to processor security</font><font color="#CCCCCC"> I do want</font>

1412
00:50:06,090 --> 00:50:09,690
to quickly<font color="#E5E5E5"> pitch a side project project</font>

1413
00:50:07,650 --> 00:50:12,030
nightshift<font color="#CCCCCC"> I'll talk more about this in</font>

1414
00:50:09,690 --> 00:50:13,410
a few days but<font color="#CCCCCC"> it</font><font color="#E5E5E5"> turns out that you can</font>

1415
00:50:12,030 --> 00:50:15,020
use<font color="#CCCCCC"> that side channel attack that I</font>

1416
00:50:13,410 --> 00:50:17,940
demonstrated<font color="#CCCCCC"> in order to reveal</font>

1417
00:50:15,020 --> 00:50:19,620
password-protected registers in some x86

1418
00:50:17,940 --> 00:50:22,230
processors so I'll be<font color="#CCCCCC"> demonstrating that</font>

1419
00:50:19,620 --> 00:50:24,569
<font color="#E5E5E5">at Def Con</font><font color="#CCCCCC"> if you're around but beyond</font>

1420
00:50:22,230 --> 00:50:27,030
<font color="#E5E5E5">that you</font><font color="#CCCCCC"> can find all this work right</font>

1421
00:50:24,570 --> 00:50:28,830
now<font color="#CCCCCC"> on my github that's github comics or</font>

1422
00:50:27,030 --> 00:50:31,980
<font color="#CCCCCC">eax EAX Dax</font>

1423
00:50:28,830 --> 00:50:34,319
that's project Rosen bridge is this

1424
00:50:31,980 --> 00:50:36,390
<font color="#E5E5E5">specific project</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> also find the</font>

1425
00:50:34,320 --> 00:50:38,520
<font color="#CCCCCC">scene</font><font color="#E5E5E5"> sifter fuzzer</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> mouths</font>

1426
00:50:36,390 --> 00:50:40,200
<font color="#CCCCCC">Gators single instructions C compilers</font>

1427
00:50:38,520 --> 00:50:41,820
<font color="#CCCCCC">they're some other fun stuff I've done</font>

1428
00:50:40,200 --> 00:50:43,290
over<font color="#E5E5E5"> the years it's all there if you</font>

1429
00:50:41,820 --> 00:50:45,360
have any feedback<font color="#CCCCCC"> or ideas</font><font color="#E5E5E5"> on this I</font>

1430
00:50:43,290 --> 00:50:47,250
would absolutely love<font color="#CCCCCC"> to hear it</font>

1431
00:50:45,360 --> 00:50:49,350
I'm totally<font color="#E5E5E5"> out of time now but you can</font>

1432
00:50:47,250 --> 00:50:51,930
grab me after<font color="#E5E5E5"> the talk you can shoot me</font>

1433
00:50:49,350 --> 00:50:54,360
<font color="#E5E5E5">an</font><font color="#CCCCCC"> email or</font><font color="#E5E5E5"> a contact me on Twitter at X</font>

1434
00:50:51,930 --> 00:50:56,190
or<font color="#E5E5E5"> Y ax e ax ax or same</font><font color="#CCCCCC"> thing at</font>

1435
00:50:54,360 --> 00:50:59,870
gmail.com<font color="#E5E5E5"> so thank you everybody for</font>

1436
00:50:56,190 --> 00:50:59,870
attending and that's all<font color="#CCCCCC"> I</font><font color="#E5E5E5"> got</font>

