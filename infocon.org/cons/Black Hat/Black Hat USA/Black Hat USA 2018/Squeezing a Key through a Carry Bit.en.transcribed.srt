1
00:00:00,030 --> 00:00:05,279
so I'm Philippa<font color="#CCCCCC"> I now work at Google on</font>

2
00:00:03,120 --> 00:00:07,799
<font color="#CCCCCC">the go team but this research</font><font color="#E5E5E5"> for it was</font>

3
00:00:05,279 --> 00:00:09,450
from<font color="#E5E5E5"> before I joined the company</font><font color="#CCCCCC"> and it</font>

4
00:00:07,799 --> 00:00:11,519
<font color="#E5E5E5">was done</font><font color="#CCCCCC"> in collaboration with sean</font>

5
00:00:09,450 --> 00:00:14,219
devlin who you may know as<font color="#CCCCCC"> the</font><font color="#E5E5E5"> outer of</font>

6
00:00:11,519 --> 00:00:16,259
the<font color="#E5E5E5"> recent crypto pulse the cryptography</font>

7
00:00:14,219 --> 00:00:19,259
challenges once known as the matazano

8
00:00:16,260 --> 00:00:22,170
crypto challenges so the story of<font color="#E5E5E5"> this</font>

9
00:00:19,260 --> 00:00:24,720
<font color="#E5E5E5">talk starts when a cloud for engineer</font>

10
00:00:22,170 --> 00:00:27,869
found something weird<font color="#E5E5E5"> verifying</font>

11
00:00:24,720 --> 00:00:29,840
certificates<font color="#E5E5E5"> in a city log it found a</font>

12
00:00:27,869 --> 00:00:33,269
certificate with a signature that<font color="#CCCCCC"> been</font>

13
00:00:29,840 --> 00:00:35,790
verified<font color="#CCCCCC"> and that's weird because city</font>

14
00:00:33,270 --> 00:00:38,399
logs verify signatures<font color="#E5E5E5"> before accepting</font>

15
00:00:35,790 --> 00:00:40,559
certificates so something had to be up

16
00:00:38,399 --> 00:00:43,410
with the code<font color="#E5E5E5"> that was being used</font><font color="#CCCCCC"> to</font>

17
00:00:40,559 --> 00:00:47,550
verify<font color="#CCCCCC"> verify them</font><font color="#E5E5E5"> it turned out that</font>

18
00:00:43,410 --> 00:00:50,328
<font color="#E5E5E5">the bug was</font><font color="#CCCCCC"> specific bug in the</font>

19
00:00:47,550 --> 00:00:54,089
implementation<font color="#E5E5E5"> of the NIST</font><font color="#CCCCCC"> P 256</font>

20
00:00:50,329 --> 00:00:58,590
<font color="#E5E5E5">elliptic curve and more specifically in</font>

21
00:00:54,090 --> 00:01:00,570
<font color="#CCCCCC">the</font><font color="#E5E5E5"> x86 64 as symbol implementation</font><font color="#CCCCCC"> this</font>

22
00:00:58,590 --> 00:01:03,180
was optimized<font color="#CCCCCC"> them to implementation</font>

23
00:01:00,570 --> 00:01:05,159
<font color="#E5E5E5">written by hand</font><font color="#CCCCCC"> in assembly to</font><font color="#E5E5E5"> make</font>

24
00:01:03,180 --> 00:01:07,619
these operations<font color="#E5E5E5"> from this elliptic</font>

25
00:01:05,159 --> 00:01:09,840
curve especially<font color="#CCCCCC"> fast</font><font color="#E5E5E5"> on the</font>

26
00:01:07,619 --> 00:01:12,810
architecture which<font color="#CCCCCC"> is the most popular</font>

27
00:01:09,840 --> 00:01:17,880
<font color="#CCCCCC">one on computers that are</font><font color="#E5E5E5"> not mobile or</font>

28
00:01:12,810 --> 00:01:20,330
embedded<font color="#E5E5E5"> these days so</font><font color="#CCCCCC"> copper reports</font>

29
00:01:17,880 --> 00:01:22,860
this<font color="#E5E5E5"> winner ability to the go team and</font>

30
00:01:20,330 --> 00:01:25,650
atom language on the on the go<font color="#E5E5E5"> teams</font>

31
00:01:22,860 --> 00:01:29,159
<font color="#CCCCCC">comments that yes the that's a problem</font>

32
00:01:25,650 --> 00:01:31,560
<font color="#CCCCCC">although it's not obvious if someone</font>

33
00:01:29,159 --> 00:01:32,340
will be able<font color="#E5E5E5"> to squeeze something out of</font>

34
00:01:31,560 --> 00:01:35,939
<font color="#E5E5E5">this hole</font>

35
00:01:32,340 --> 00:01:42,360
but you know it would be<font color="#E5E5E5"> a cool paper so</font>

36
00:01:35,939 --> 00:01:44,609
yeah<font color="#CCCCCC"> Sean</font><font color="#E5E5E5"> and I met in Paris</font><font color="#CCCCCC"> to look at</font>

37
00:01:42,360 --> 00:01:47,430
this vulnerability that's nothing else

38
00:01:44,610 --> 00:01:48,899
than a challenge<font color="#CCCCCC"> right there and one</font>

39
00:01:47,430 --> 00:01:52,200
month<font color="#E5E5E5"> later we figured out a way to</font>

40
00:01:48,899 --> 00:01:55,259
mount a complete key recovery attack

41
00:01:52,200 --> 00:01:57,780
against real protocols<font color="#E5E5E5"> as implemented</font><font color="#CCCCCC"> by</font>

42
00:01:55,259 --> 00:02:00,149
real implementations<font color="#E5E5E5"> that</font><font color="#CCCCCC"> would recover</font>

43
00:01:57,780 --> 00:02:03,049
<font color="#E5E5E5">the</font><font color="#CCCCCC"> entire private</font><font color="#E5E5E5"> key from</font><font color="#CCCCCC"> that small</font>

44
00:02:00,149 --> 00:02:08,550
extremely rare<font color="#E5E5E5"> bug in the implementation</font>

45
00:02:03,049 --> 00:02:11,760
<font color="#E5E5E5">go on the goal releases were minted with</font>

46
00:02:08,550 --> 00:02:13,250
the<font color="#E5E5E5"> facts</font><font color="#CCCCCC"> and of course we're talking</font>

47
00:02:11,760 --> 00:02:15,200
<font color="#E5E5E5">about something that</font>

48
00:02:13,250 --> 00:02:19,160
does not apply to the<font color="#CCCCCC"> current go</font>

49
00:02:15,200 --> 00:02:21,290
<font color="#CCCCCC">distribution so first of all I want</font><font color="#E5E5E5"> you</font>

50
00:02:19,160 --> 00:02:25,460
<font color="#E5E5E5">to understand a bit</font><font color="#CCCCCC"> of what the code was</font>

51
00:02:21,290 --> 00:02:28,220
doing now<font color="#E5E5E5"> elliptic curve</font><font color="#CCCCCC"> implementations</font>

52
00:02:25,460 --> 00:02:30,740
<font color="#E5E5E5">have as their bedrock field</font>

53
00:02:28,220 --> 00:02:32,720
<font color="#E5E5E5">implementation field arithmetic</font>

54
00:02:30,740 --> 00:02:37,030
implementations<font color="#E5E5E5"> those are nothing else</font>

55
00:02:32,720 --> 00:02:40,940
<font color="#E5E5E5">than operations need n modulo a prime P</font>

56
00:02:37,030 --> 00:02:43,610
<font color="#E5E5E5">this prime P is fixed for each little</font>

57
00:02:40,940 --> 00:02:45,950
<font color="#E5E5E5">curve so for example the</font><font color="#CCCCCC"> value P here</font>

58
00:02:43,610 --> 00:02:48,440
would be a constant for the<font color="#E5E5E5"> NIST</font><font color="#CCCCCC"> advance</font>

59
00:02:45,950 --> 00:02:50,480
the second curve<font color="#E5E5E5"> and a lot of the</font>

60
00:02:48,440 --> 00:02:52,340
operations<font color="#E5E5E5"> you need to do to build the</font>

61
00:02:50,480 --> 00:02:55,190
wider implementation will have to be

62
00:02:52,340 --> 00:02:56,570
modular<font color="#E5E5E5"> this</font><font color="#CCCCCC"> p</font><font color="#E5E5E5"> number for example</font><font color="#CCCCCC"> the</font>

63
00:02:55,190 --> 00:02:59,510
code we're going<font color="#E5E5E5"> to be looking</font><font color="#CCCCCC"> at today</font>

64
00:02:56,570 --> 00:03:02,510
<font color="#CCCCCC">is the code</font><font color="#E5E5E5"> to subtract two</font><font color="#CCCCCC"> numbers</font>

65
00:02:59,510 --> 00:03:05,540
modulo<font color="#CCCCCC"> P straightforward enough you have</font>

66
00:03:02,510 --> 00:03:07,880
a and<font color="#CCCCCC"> B and</font><font color="#E5E5E5"> you want a minus B that's it</font>

67
00:03:05,540 --> 00:03:12,679
that's<font color="#E5E5E5"> what this code does why is this</font>

68
00:03:07,880 --> 00:03:15,140
hard<font color="#E5E5E5"> well P is a 256-bit wide number</font>

69
00:03:12,680 --> 00:03:19,400
there are no registers in your machines

70
00:03:15,140 --> 00:03:20,899
that can hold<font color="#CCCCCC"> a 256-bit wide</font><font color="#E5E5E5"> number so</font>

71
00:03:19,400 --> 00:03:23,360
instead you have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> break it</font><font color="#CCCCCC"> up over</font>

72
00:03:20,900 --> 00:03:25,910
<font color="#CCCCCC">multiple registers</font><font color="#E5E5E5"> you actually know how</font>

73
00:03:23,360 --> 00:03:28,700
<font color="#CCCCCC">to do this every time you do columnar</font>

74
00:03:25,910 --> 00:03:32,390
subtraction<font color="#E5E5E5"> you are using there is more</font>

75
00:03:28,700 --> 00:03:34,280
registers<font color="#CCCCCC"> one</font><font color="#E5E5E5"> digit wide and doing</font>

76
00:03:32,390 --> 00:03:37,458
<font color="#CCCCCC">subtraction between</font><font color="#E5E5E5"> the two digits and</font>

77
00:03:34,280 --> 00:03:40,910
then doing a borrow from the next digit

78
00:03:37,459 --> 00:03:45,049
<font color="#E5E5E5">right this does the exact</font><font color="#CCCCCC"> same thing</font><font color="#E5E5E5"> it</font>

79
00:03:40,910 --> 00:03:49,370
breaks up the 256 bit number into<font color="#CCCCCC"> four</font>

80
00:03:45,049 --> 00:03:53,390
64-bit registers then subtract them one

81
00:03:49,370 --> 00:03:56,510
by one<font color="#E5E5E5"> and if there's a borrow bit it</font>

82
00:03:53,390 --> 00:03:59,480
<font color="#E5E5E5">borrows a one from the next more</font>

83
00:03:56,510 --> 00:04:01,519
significant register so that's what

84
00:03:59,480 --> 00:04:05,450
you're looking<font color="#CCCCCC"> at for the very top block</font>

85
00:04:01,519 --> 00:04:10,160
you look at a<font color="#CCCCCC"> sub-q instruction which is</font>

86
00:04:05,450 --> 00:04:15,109
<font color="#E5E5E5">just a set a to a minus</font><font color="#CCCCCC"> b and then</font>

87
00:04:10,160 --> 00:04:16,250
afterwards<font color="#CCCCCC"> SBB</font><font color="#E5E5E5"> q instruction which means</font>

88
00:04:15,110 --> 00:04:18,919
the same thing

89
00:04:16,250 --> 00:04:21,529
subtraction<font color="#E5E5E5"> but with the borrow so if</font>

90
00:04:18,918 --> 00:04:24,590
the previous<font color="#E5E5E5"> instruction had to borrow a</font>

91
00:04:21,529 --> 00:04:26,900
bit the<font color="#CCCCCC"> caret flag in the</font><font color="#E5E5E5"> CPU is</font><font color="#CCCCCC"> going</font>

92
00:04:24,590 --> 00:04:29,299
<font color="#CCCCCC">to be sad and</font><font color="#E5E5E5"> the next instruction</font><font color="#CCCCCC"> will</font>

93
00:04:26,900 --> 00:04:31,789
one from the result of the next

94
00:04:29,300 --> 00:04:33,350
<font color="#E5E5E5">operation you do that multiple</font><font color="#CCCCCC"> times and</font>

95
00:04:31,790 --> 00:04:36,070
<font color="#CCCCCC">eventually you end up with just</font><font color="#E5E5E5"> the ball</font>

96
00:04:33,350 --> 00:04:41,060
final<font color="#CCCCCC"> borough</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> tells you if you</font>

97
00:04:36,070 --> 00:04:42,979
under<font color="#CCCCCC"> flowed or not so this function is</font>

98
00:04:41,060 --> 00:04:44,720
longer than<font color="#CCCCCC"> just</font><font color="#E5E5E5"> that block why</font>

99
00:04:42,979 --> 00:04:48,530
well this function is doing<font color="#E5E5E5"> two</font>

100
00:04:44,720 --> 00:04:50,840
additional things<font color="#CCCCCC"> this function is</font><font color="#E5E5E5"> a</font>

101
00:04:48,530 --> 00:04:54,198
hand of course handling the case where

102
00:04:50,840 --> 00:04:56,960
you<font color="#E5E5E5"> have to be dude you have to be doing</font>

103
00:04:54,199 --> 00:05:00,440
the subtraction<font color="#E5E5E5"> modulo P not module</font><font color="#CCCCCC"> 2 to</font>

104
00:04:56,960 --> 00:05:03,260
<font color="#E5E5E5">256 and</font><font color="#CCCCCC"> it's handling the fact that</font><font color="#E5E5E5"> you</font>

105
00:05:00,440 --> 00:05:05,479
want that to be<font color="#CCCCCC"> in</font><font color="#E5E5E5"> constant time</font><font color="#CCCCCC"> if this</font>

106
00:05:03,260 --> 00:05:09,440
function took a different<font color="#E5E5E5"> time based on</font>

107
00:05:05,479 --> 00:05:11,930
whether<font color="#E5E5E5"> or</font><font color="#CCCCCC"> not for</font><font color="#E5E5E5"> example there was an</font>

108
00:05:09,440 --> 00:05:13,850
underflow or overflow<font color="#E5E5E5"> that would leak</font>

109
00:05:11,930 --> 00:05:15,919
information<font color="#CCCCCC"> to an attacker like house</font>

110
00:05:13,850 --> 00:05:17,479
and<font color="#E5E5E5"> we would find out things about the</font>

111
00:05:15,919 --> 00:05:20,150
key like with it<font color="#E5E5E5"> but for different</font>

112
00:05:17,479 --> 00:05:22,490
reasons<font color="#CCCCCC"> so instead what does it do</font>

113
00:05:20,150 --> 00:05:26,900
pretty simple<font color="#CCCCCC"> it starts</font><font color="#E5E5E5"> by doing the</font>

114
00:05:22,490 --> 00:05:29,960
subtraction<font color="#CCCCCC"> a minus equal B then it</font>

115
00:05:26,900 --> 00:05:34,099
<font color="#CCCCCC">saves</font><font color="#E5E5E5"> that value of a in a separate set</font>

116
00:05:29,960 --> 00:05:36,739
of<font color="#E5E5E5"> registers and then it adds to a</font><font color="#CCCCCC"> P</font><font color="#E5E5E5"> why</font>

117
00:05:34,099 --> 00:05:39,919
the problem is that a minus P a B might

118
00:05:36,740 --> 00:05:42,470
have<font color="#E5E5E5"> underflow and it wraps around at</font><font color="#CCCCCC"> 2</font>

119
00:05:39,919 --> 00:05:44,960
to the 256<font color="#E5E5E5"> because that's how wide four</font>

120
00:05:42,470 --> 00:05:47,270
registers are but<font color="#E5E5E5"> that's not correct</font>

121
00:05:44,960 --> 00:05:50,599
<font color="#CCCCCC">you want to wrap</font><font color="#E5E5E5"> around that P not at</font>

122
00:05:47,270 --> 00:05:54,680
212 256<font color="#E5E5E5"> so instead what it does is that</font>

123
00:05:50,599 --> 00:05:57,110
it<font color="#E5E5E5"> adds back P P overflows so one under</font>

124
00:05:54,680 --> 00:05:59,720
<font color="#E5E5E5">flow and one overflow bring it back into</font>

125
00:05:57,110 --> 00:06:03,229
<font color="#E5E5E5">the right space correct the error</font><font color="#CCCCCC"> and</font>

126
00:05:59,720 --> 00:06:07,070
since adding P for the operation modulo

127
00:06:03,229 --> 00:06:10,310
P is is not problem in arithmetic<font color="#E5E5E5"> terms</font>

128
00:06:07,070 --> 00:06:12,530
<font color="#E5E5E5">the result is correct</font><font color="#CCCCCC"> and finally the</font>

129
00:06:10,310 --> 00:06:15,440
last block has<font color="#CCCCCC"> to decide which one am</font><font color="#E5E5E5"> I</font>

130
00:06:12,530 --> 00:06:20,960
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> use the one with the P added or</font>

131
00:06:15,440 --> 00:06:25,070
the<font color="#CCCCCC"> one without</font><font color="#E5E5E5"> the P if if adding P had</font>

132
00:06:20,960 --> 00:06:27,580
if subtracting<font color="#E5E5E5"> B did not under flow then</font>

133
00:06:25,070 --> 00:06:30,260
<font color="#E5E5E5">you can just use a minus B but if</font>

134
00:06:27,580 --> 00:06:32,810
instead<font color="#E5E5E5"> it had under</font><font color="#CCCCCC"> flowed you have to</font>

135
00:06:30,260 --> 00:06:35,389
add P you can't always<font color="#E5E5E5"> add use the one</font>

136
00:06:32,810 --> 00:06:38,389
where<font color="#E5E5E5"> P was added because that would</font>

137
00:06:35,389 --> 00:06:39,500
<font color="#E5E5E5">have overflowed</font><font color="#CCCCCC"> in the other case</font><font color="#E5E5E5"> so</font>

138
00:06:38,389 --> 00:06:40,490
that's<font color="#E5E5E5"> what you're looking</font><font color="#CCCCCC"> at with that</font>

139
00:06:39,500 --> 00:06:43,430
<font color="#CCCCCC">Molesey</font>

140
00:06:40,490 --> 00:06:46,430
register the<font color="#CCCCCC"> borrow bid from</font><font color="#E5E5E5"> the first</font>

141
00:06:43,430 --> 00:06:48,380
chain from a minus B is saved in a

142
00:06:46,430 --> 00:06:50,570
register<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we can use it later to</font>

143
00:06:48,380 --> 00:06:53,090
make<font color="#E5E5E5"> a decision</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that will tell</font><font color="#CCCCCC"> us if</font>

144
00:06:50,570 --> 00:06:56,420
a minus B<font color="#E5E5E5"> under float or not and based</font>

145
00:06:53,090 --> 00:06:58,369
on that it makes a decision<font color="#E5E5E5"> with some</font>

146
00:06:56,420 --> 00:07:01,280
<font color="#E5E5E5">seem of instructions</font><font color="#CCCCCC"> seem of</font>

147
00:06:58,370 --> 00:07:03,530
instructions<font color="#CCCCCC"> just in constant time copy</font>

148
00:07:01,280 --> 00:07:06,919
a value<font color="#E5E5E5"> from left to right in this</font>

149
00:07:03,530 --> 00:07:10,340
notation<font color="#CCCCCC"> based</font><font color="#E5E5E5"> on what the zero flag is</font>

150
00:07:06,920 --> 00:07:14,690
<font color="#E5E5E5">and finally</font><font color="#CCCCCC"> there is essentially dummy</font>

151
00:07:10,340 --> 00:07:16,880
operation in theory that just checks<font color="#E5E5E5"> not</font>

152
00:07:14,690 --> 00:07:20,750
<font color="#E5E5E5">zero and uses it to set the zero the</font>

153
00:07:16,880 --> 00:07:23,570
zero<font color="#E5E5E5"> flag where's the bag the bag is</font>

154
00:07:20,750 --> 00:07:25,160
that that dummy operation right there

155
00:07:23,570 --> 00:07:28,310
was supposed to<font color="#E5E5E5"> be something like add</font>

156
00:07:25,160 --> 00:07:30,920
<font color="#E5E5E5">zero or end one something</font><font color="#CCCCCC"> that doesn't</font>

157
00:07:28,310 --> 00:07:33,110
<font color="#E5E5E5">actually change</font><font color="#CCCCCC"> multirow but just</font>

158
00:07:30,920 --> 00:07:36,200
operates on it so that the<font color="#E5E5E5"> zero flag</font>

159
00:07:33,110 --> 00:07:38,060
<font color="#E5E5E5">gets set</font><font color="#CCCCCC"> based on what mod 0 was so that</font>

160
00:07:36,200 --> 00:07:42,710
then we can<font color="#CCCCCC"> use it to</font><font color="#E5E5E5"> make the decision</font>

161
00:07:38,060 --> 00:07:46,400
in C mode but it's not that our ad with

162
00:07:42,710 --> 00:07:51,530
carry<font color="#E5E5E5"> there's a cylinder</font><font color="#CCCCCC"> so that one</font>

163
00:07:46,400 --> 00:07:53,239
<font color="#CCCCCC">byte mistake makes it take in the carry</font>

164
00:07:51,530 --> 00:07:55,130
bit from the previous<font color="#CCCCCC"> instruction</font>

165
00:07:53,240 --> 00:07:58,970
what's the previous instruction<font color="#CCCCCC"> it's</font>

166
00:07:55,130 --> 00:08:00,950
just the<font color="#E5E5E5"> end of adding P to a minus V</font>

167
00:07:58,970 --> 00:08:03,530
which has nothing<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> with the</font>

168
00:08:00,950 --> 00:08:06,140
decision that<font color="#CCCCCC"> multirow is there for so</font>

169
00:08:03,530 --> 00:08:07,849
this<font color="#E5E5E5"> is sneaking in a carry that has</font>

170
00:08:06,140 --> 00:08:12,050
<font color="#E5E5E5">nothing to do</font><font color="#CCCCCC"> with what we're</font><font color="#E5E5E5"> trying to</font>

171
00:08:07,850 --> 00:08:14,810
do and that influences the decision now

172
00:08:12,050 --> 00:08:19,690
this would<font color="#E5E5E5"> be wrong most of the times</font>

173
00:08:14,810 --> 00:08:24,560
but instead<font color="#E5E5E5"> the seam of instruction is</font>

174
00:08:19,690 --> 00:08:28,430
swapped instead of being if<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> its if not</font>

175
00:08:24,560 --> 00:08:30,980
<font color="#E5E5E5">zero</font><font color="#CCCCCC"> so two</font><font color="#E5E5E5"> mistakes cancel each other</font>

176
00:08:28,430 --> 00:08:33,169
out<font color="#E5E5E5"> and most of the times everything</font>

177
00:08:30,980 --> 00:08:36,710
goes well and<font color="#E5E5E5"> that's why it's a skate</font>

178
00:08:33,169 --> 00:08:40,760
<font color="#E5E5E5">testing so almost always this is not a</font>

179
00:08:36,710 --> 00:08:43,940
problem except that<font color="#E5E5E5"> there is the</font>

180
00:08:40,760 --> 00:08:45,830
<font color="#E5E5E5">difference</font><font color="#CCCCCC"> between the or</font><font color="#E5E5E5"> the old code</font>

181
00:08:43,940 --> 00:08:48,260
and the patched one and the difference

182
00:08:45,830 --> 00:08:51,230
is<font color="#E5E5E5"> what happens when that carry bit is</font>

183
00:08:48,260 --> 00:08:53,270
<font color="#E5E5E5">not there</font><font color="#CCCCCC"> a rare occurrence but</font>

184
00:08:51,230 --> 00:08:57,020
<font color="#E5E5E5">sometimes adding</font><font color="#CCCCCC"> P</font>

185
00:08:53,270 --> 00:08:59,780
does not overflow<font color="#E5E5E5"> and if adding P does</font>

186
00:08:57,020 --> 00:09:03,140
not<font color="#E5E5E5"> overflow the bit the carry flag is</font>

187
00:08:59,780 --> 00:09:06,740
not set<font color="#E5E5E5"> and the result is wrong instead</font>

188
00:09:03,140 --> 00:09:09,170
of returning a<font color="#E5E5E5"> minus B as it should it</font>

189
00:09:06,740 --> 00:09:13,250
will return a minus B plus P which will

190
00:09:09,170 --> 00:09:14,780
end up being higher than<font color="#CCCCCC"> P</font><font color="#E5E5E5"> a specific</font>

191
00:09:13,250 --> 00:09:17,570
case<font color="#CCCCCC"> of this is that if you try</font>

192
00:09:14,780 --> 00:09:21,199
subtracting<font color="#CCCCCC"> one from one one minus one</font>

193
00:09:17,570 --> 00:09:24,650
<font color="#E5E5E5">it will return P instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> zero because</font>

194
00:09:21,200 --> 00:09:27,260
adding P will not<font color="#CCCCCC"> wraparound</font><font color="#E5E5E5"> so why is</font>

195
00:09:24,650 --> 00:09:31,990
this a problem<font color="#CCCCCC"> well this is a</font><font color="#E5E5E5"> problem</font>

196
00:09:27,260 --> 00:09:35,030
because once in 2 to the 32 times that

197
00:09:31,990 --> 00:09:37,970
<font color="#E5E5E5">result will be wrong and when that</font>

198
00:09:35,030 --> 00:09:40,550
happens something<font color="#CCCCCC"> will break higher up</font>

199
00:09:37,970 --> 00:09:42,260
but<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> rare again 2 to 32 times</font>

200
00:09:40,550 --> 00:09:46,189
<font color="#E5E5E5">that's why it went completely</font><font color="#CCCCCC"> unnoticed</font>

201
00:09:42,260 --> 00:09:47,840
until it made a signature not verify

202
00:09:46,190 --> 00:09:51,730
that someone was really really sure that

203
00:09:47,840 --> 00:09:54,830
<font color="#CCCCCC">should really</font><font color="#E5E5E5"> verify so this is the back</font>

204
00:09:51,730 --> 00:09:57,650
now<font color="#E5E5E5"> we didn't find this back we worked</font>

205
00:09:54,830 --> 00:10:01,550
on how to use<font color="#E5E5E5"> this back which is a carry</font>

206
00:09:57,650 --> 00:10:03,350
propagation<font color="#CCCCCC"> bag to mount an attack</font><font color="#E5E5E5"> to</font>

207
00:10:01,550 --> 00:10:06,099
actually<font color="#CCCCCC"> recover something</font><font color="#E5E5E5"> useful the</font>

208
00:10:03,350 --> 00:10:09,020
key<font color="#E5E5E5"> now you might be</font><font color="#CCCCCC"> asking how does</font>

209
00:10:06,100 --> 00:10:11,060
forgetting to carry the<font color="#E5E5E5"> 1</font><font color="#CCCCCC"> or carry a</font><font color="#E5E5E5"> 1</font>

210
00:10:09,020 --> 00:10:14,090
that<font color="#E5E5E5"> wasn't there very literally</font>

211
00:10:11,060 --> 00:10:17,569
forgetting to carry the<font color="#E5E5E5"> 1 cause a fool</font>

212
00:10:14,090 --> 00:10:19,850
he<font color="#CCCCCC"> recover attack now</font><font color="#E5E5E5"> that's exactly</font>

213
00:10:17,570 --> 00:10:21,830
<font color="#CCCCCC">what this talk is about</font><font color="#E5E5E5"> but to</font>

214
00:10:19,850 --> 00:10:24,350
understand that I<font color="#E5E5E5"> need you to take you</font>

215
00:10:21,830 --> 00:10:25,930
back for<font color="#CCCCCC"> a moment</font><font color="#E5E5E5"> and do a crash course</font>

216
00:10:24,350 --> 00:10:28,550
on<font color="#CCCCCC"> the lipstick curve cryptography</font>

217
00:10:25,930 --> 00:10:32,390
<font color="#E5E5E5">sounds scary I promise I've done before</font>

218
00:10:28,550 --> 00:10:34,160
<font color="#CCCCCC">and</font><font color="#E5E5E5"> people survived now we know that</font>

219
00:10:32,390 --> 00:10:37,189
<font color="#CCCCCC">there are fields right we know</font><font color="#E5E5E5"> that</font>

220
00:10:34,160 --> 00:10:39,680
there<font color="#CCCCCC"> are operations are done module P</font>

221
00:10:37,190 --> 00:10:43,310
because that's what we're looking<font color="#E5E5E5"> at and</font>

222
00:10:39,680 --> 00:10:46,520
that's what all numbers we work with are

223
00:10:43,310 --> 00:10:49,640
at the<font color="#E5E5E5"> lowest level numbers modulo P in</font>

224
00:10:46,520 --> 00:10:52,760
the field then there<font color="#E5E5E5"> are points points</font>

225
00:10:49,640 --> 00:10:54,920
are simply x and<font color="#CCCCCC"> y-coordinates</font><font color="#E5E5E5"> where x</font>

226
00:10:52,760 --> 00:10:57,230
and<font color="#E5E5E5"> y fit in an equation which</font><font color="#CCCCCC"> is the</font>

227
00:10:54,920 --> 00:10:59,209
<font color="#CCCCCC">curve equation</font><font color="#E5E5E5"> we don't care about the</font>

228
00:10:57,230 --> 00:11:01,670
curve equation<font color="#CCCCCC"> don't worry it's not even</font>

229
00:10:59,210 --> 00:11:03,620
on the<font color="#E5E5E5"> slides because what we're</font><font color="#CCCCCC"> going</font>

230
00:11:01,670 --> 00:11:06,530
to be working on is the abstraction

231
00:11:03,620 --> 00:11:07,160
<font color="#E5E5E5">above</font><font color="#CCCCCC"> that the obstruction critical to</font>

232
00:11:06,530 --> 00:11:12,199
understand

233
00:11:07,160 --> 00:11:15,620
<font color="#CCCCCC">TAC is the group a group is two things a</font>

234
00:11:12,199 --> 00:11:19,339
generator point<font color="#E5E5E5"> and an operation</font>

235
00:11:15,620 --> 00:11:21,620
<font color="#E5E5E5">addition</font><font color="#CCCCCC"> what's this a special</font><font color="#E5E5E5"> about the</font>

236
00:11:19,339 --> 00:11:23,600
generator point<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> take the</font>

237
00:11:21,620 --> 00:11:26,470
generator point<font color="#E5E5E5"> and you add it</font><font color="#CCCCCC"> to itself</font>

238
00:11:23,600 --> 00:11:29,689
<font color="#E5E5E5">using that addition you defined a</font>

239
00:11:26,470 --> 00:11:32,209
certain number<font color="#E5E5E5"> of times you go</font><font color="#CCCCCC"> back to G</font>

240
00:11:29,689 --> 00:11:35,899
that number of times is called the<font color="#E5E5E5"> order</font>

241
00:11:32,209 --> 00:11:40,489
of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> group</font><font color="#E5E5E5"> and it's another very big</font>

242
00:11:35,899 --> 00:11:45,379
number in the order of<font color="#CCCCCC"> P and 2 to</font><font color="#E5E5E5"> 256 so</font>

243
00:11:40,490 --> 00:11:47,300
it's a 256-bit wide number<font color="#E5E5E5"> but this</font><font color="#CCCCCC"> this</font>

244
00:11:45,379 --> 00:11:49,519
<font color="#E5E5E5">is important it's a cyclic group so you</font>

245
00:11:47,300 --> 00:11:51,529
<font color="#CCCCCC">can keep adding G and</font><font color="#E5E5E5"> you hit a bunch of</font>

246
00:11:49,519 --> 00:11:53,569
<font color="#E5E5E5">points in the group and</font><font color="#CCCCCC"> eventually</font><font color="#E5E5E5"> wrap</font>

247
00:11:51,529 --> 00:11:55,519
<font color="#E5E5E5">around and you're back</font><font color="#CCCCCC"> at G</font><font color="#E5E5E5"> this is a</font>

248
00:11:53,569 --> 00:11:57,410
group<font color="#E5E5E5"> if you give a group to a</font>

249
00:11:55,519 --> 00:12:01,100
cryptographer<font color="#CCCCCC"> that will build if you</font>

250
00:11:57,410 --> 00:12:03,740
have<font color="#CCCCCC"> Mon on it so to build if you hamon</font>

251
00:12:01,100 --> 00:12:06,500
you need multiplication but we only have

252
00:12:03,740 --> 00:12:07,910
addition now if you know how<font color="#E5E5E5"> to do</font>

253
00:12:06,500 --> 00:12:10,069
addition<font color="#E5E5E5"> you know how to do</font>

254
00:12:07,910 --> 00:12:14,540
multiplication<font color="#CCCCCC"> if you want to multiply</font>

255
00:12:10,069 --> 00:12:16,430
<font color="#E5E5E5">by 5 you add add add add add and there's</font>

256
00:12:14,540 --> 00:12:17,540
no<font color="#E5E5E5"> special definition of multiplication</font>

257
00:12:16,430 --> 00:12:19,750
in groups

258
00:12:17,540 --> 00:12:22,219
it's just repeated addition<font color="#E5E5E5"> an</font>

259
00:12:19,750 --> 00:12:24,199
additional multiplication<font color="#E5E5E5"> follow all the</font>

260
00:12:22,220 --> 00:12:26,139
rules<font color="#E5E5E5"> that you already know about they</font>

261
00:12:24,199 --> 00:12:29,719
are commutative<font color="#E5E5E5"> and they're associated</font>

262
00:12:26,139 --> 00:12:32,329
so you know you can do first<font color="#CCCCCC"> add 5 and</font>

263
00:12:29,720 --> 00:12:37,220
<font color="#CCCCCC">then add 7</font><font color="#E5E5E5"> or the</font><font color="#CCCCCC"> other way</font><font color="#E5E5E5"> around</font><font color="#CCCCCC"> you</font>

264
00:12:32,329 --> 00:12:39,649
<font color="#CCCCCC">can group them however you like then as</font>

265
00:12:37,220 --> 00:12:41,600
I said you give us a<font color="#E5E5E5"> group we build</font>

266
00:12:39,649 --> 00:12:43,699
diffie-hellman<font color="#E5E5E5"> you might already know</font>

267
00:12:41,600 --> 00:12:45,589
diffie-hellman<font color="#E5E5E5"> from its finite field</font>

268
00:12:43,699 --> 00:12:47,209
<font color="#E5E5E5">version but if you don't it's our</font>

269
00:12:45,589 --> 00:12:49,910
problem<font color="#E5E5E5"> here's how it works on</font>

270
00:12:47,209 --> 00:12:52,550
<font color="#E5E5E5">ellipticals the private key in</font><font color="#CCCCCC"> defi</font>

271
00:12:49,910 --> 00:12:55,279
<font color="#CCCCCC">Hellman</font><font color="#E5E5E5"> is a giant number modulo the</font>

272
00:12:52,550 --> 00:12:58,479
order of the curve it has<font color="#E5E5E5"> no special</font>

273
00:12:55,279 --> 00:13:00,399
properties except<font color="#E5E5E5"> it's this giant</font>

274
00:12:58,480 --> 00:13:02,689
integer that you select at random

275
00:13:00,399 --> 00:13:05,920
<font color="#CCCCCC">cryptographic</font><font color="#E5E5E5"> from a cryptographically</font>

276
00:13:02,689 --> 00:13:09,349
secure random number generator<font color="#E5E5E5"> hopefully</font>

277
00:13:05,920 --> 00:13:11,420
then you want<font color="#E5E5E5"> to generate a</font><font color="#CCCCCC"> public key</font>

278
00:13:09,350 --> 00:13:14,540
for<font color="#E5E5E5"> your site how you do</font><font color="#CCCCCC"> that is that</font>

279
00:13:11,420 --> 00:13:16,910
<font color="#CCCCCC">you just multiply this giant number by</font>

280
00:13:14,540 --> 00:13:20,240
the generator point of the curve<font color="#CCCCCC"> so</font>

281
00:13:16,910 --> 00:13:20,899
generator<font color="#E5E5E5"> times the giant number is your</font>

282
00:13:20,240 --> 00:13:23,329
<font color="#E5E5E5">private</font>

283
00:13:20,899 --> 00:13:25,819
your public key<font color="#E5E5E5"> you send your public</font><font color="#CCCCCC"> key</font>

284
00:13:23,329 --> 00:13:27,649
to<font color="#E5E5E5"> your</font><font color="#CCCCCC"> pier your Pierce generates a</font>

285
00:13:25,819 --> 00:13:30,290
private key<font color="#E5E5E5"> and sends their public key</font>

286
00:13:27,649 --> 00:13:32,329
to<font color="#CCCCCC"> you and then to generate a shared</font>

287
00:13:30,290 --> 00:13:35,719
<font color="#E5E5E5">secret between the</font><font color="#CCCCCC"> two of</font><font color="#E5E5E5"> us that's the</font>

288
00:13:32,329 --> 00:13:37,878
<font color="#E5E5E5">goal</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> Hellman we take the public</font>

289
00:13:35,720 --> 00:13:40,850
key of the<font color="#E5E5E5"> other side and multiply</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> by</font>

290
00:13:37,879 --> 00:13:45,199
our<font color="#E5E5E5"> private key</font><font color="#CCCCCC"> so the final result on</font>

291
00:13:40,850 --> 00:13:47,809
our side is generator<font color="#CCCCCC"> times the other</font>

292
00:13:45,199 --> 00:13:50,059
part is private key<font color="#E5E5E5"> times our private</font>

293
00:13:47,809 --> 00:13:52,040
key<font color="#E5E5E5"> they do the same and on the other</font>

294
00:13:50,059 --> 00:13:55,420
<font color="#CCCCCC">side it's going to be generator</font><font color="#E5E5E5"> times</font>

295
00:13:52,040 --> 00:13:57,529
our private key times their private key

296
00:13:55,420 --> 00:14:00,019
multiplication is associative<font color="#E5E5E5"> it's</font>

297
00:13:57,529 --> 00:14:02,569
commutative<font color="#E5E5E5"> we can these</font><font color="#CCCCCC"> two results are</font>

298
00:14:00,019 --> 00:14:04,699
identical<font color="#CCCCCC"> so since we</font><font color="#E5E5E5"> have identical</font>

299
00:14:02,569 --> 00:14:06,410
results we can<font color="#E5E5E5"> do</font><font color="#CCCCCC"> the C Hellman</font><font color="#E5E5E5"> and then</font>

300
00:14:04,699 --> 00:14:08,689
we can use<font color="#CCCCCC"> that shared secret for</font>

301
00:14:06,410 --> 00:14:11,868
example as a session<font color="#E5E5E5"> key</font><font color="#CCCCCC"> or as an</font>

302
00:14:08,689 --> 00:14:15,829
<font color="#CCCCCC">encryption key in a public key</font>

303
00:14:11,869 --> 00:14:19,790
encryption scheme so this is how<font color="#E5E5E5"> to</font>

304
00:14:15,829 --> 00:14:22,638
<font color="#CCCCCC">build</font><font color="#E5E5E5"> diffie-hellman from the group but</font>

305
00:14:19,790 --> 00:14:24,649
I go stove or something<font color="#CCCCCC"> I told you that</font>

306
00:14:22,639 --> 00:14:26,149
how we do<font color="#CCCCCC"> multiplication is by adding</font>

307
00:14:24,649 --> 00:14:27,889
<font color="#CCCCCC">and adding and</font><font color="#E5E5E5"> adding and adding and</font>

308
00:14:26,149 --> 00:14:30,529
<font color="#E5E5E5">adding</font><font color="#CCCCCC"> and then I</font><font color="#E5E5E5"> told you</font><font color="#CCCCCC"> that we take</font>

309
00:14:27,889 --> 00:14:33,709
<font color="#CCCCCC">a giant</font><font color="#E5E5E5"> number and we multiply by that</font>

310
00:14:30,529 --> 00:14:37,189
<font color="#CCCCCC">giant number of course you can't add</font><font color="#E5E5E5"> G</font>

311
00:14:33,709 --> 00:14:39,649
to itself<font color="#CCCCCC"> two</font><font color="#E5E5E5"> to the 255 plus whatever</font>

312
00:14:37,189 --> 00:14:41,719
<font color="#E5E5E5">times there is literally not enough</font>

313
00:14:39,649 --> 00:14:44,779
energy<font color="#CCCCCC"> in the universe to do something</font>

314
00:14:41,720 --> 00:14:51,110
to to<font color="#E5E5E5"> a 255 times and I'm not I'm not</font>

315
00:14:44,779 --> 00:14:53,449
<font color="#E5E5E5">making this up</font><font color="#CCCCCC"> I wanted</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> go into</font><font color="#E5E5E5"> the</font>

316
00:14:51,110 --> 00:14:56,019
physics<font color="#CCCCCC"> and then regretted it and so</font>

317
00:14:53,449 --> 00:14:56,019
we're moving on

318
00:14:56,800 --> 00:15:03,889
but I will I can<font color="#CCCCCC"> tell you is how to</font>

319
00:15:00,559 --> 00:15:06,740
avoid<font color="#CCCCCC"> that problem</font><font color="#E5E5E5"> and would use</font><font color="#CCCCCC"> to out</font>

320
00:15:03,889 --> 00:15:08,629
so<font color="#E5E5E5"> I multiply by this giant number we</font>

321
00:15:06,740 --> 00:15:13,730
use<font color="#E5E5E5"> what's called a double and add</font>

322
00:15:08,629 --> 00:15:16,579
algorithm now we take our giant<font color="#E5E5E5"> D and we</font>

323
00:15:13,730 --> 00:15:18,589
consider<font color="#E5E5E5"> it as a string of bits it there</font>

324
00:15:16,579 --> 00:15:21,459
will be a most significant bit<font color="#CCCCCC"> on the</font>

325
00:15:18,589 --> 00:15:25,970
left because<font color="#E5E5E5"> the Gambian is the only way</font>

326
00:15:21,459 --> 00:15:27,979
reasonable way to work<font color="#E5E5E5"> and then all the</font>

327
00:15:25,970 --> 00:15:30,799
way<font color="#E5E5E5"> to the least significant bit on the</font>

328
00:15:27,980 --> 00:15:32,310
right the most significant bit is worth

329
00:15:30,799 --> 00:15:36,670
<font color="#CCCCCC">2 to the</font>

330
00:15:32,310 --> 00:15:39,339
<font color="#E5E5E5">2:55</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> tutorial 254 etc sir</font>

331
00:15:36,670 --> 00:15:41,319
what we do is<font color="#CCCCCC"> that we do a sequence</font><font color="#E5E5E5"> of</font>

332
00:15:39,340 --> 00:15:43,540
<font color="#CCCCCC">operations</font><font color="#E5E5E5"> that's the double in AD</font>

333
00:15:41,320 --> 00:15:47,950
algorithm based on the bits<font color="#E5E5E5"> of the key</font>

334
00:15:43,540 --> 00:15:51,160
we<font color="#E5E5E5"> want to generate the product q times</font>

335
00:15:47,950 --> 00:15:53,370
<font color="#CCCCCC">D</font><font color="#E5E5E5"> okay so we start from the most</font>

336
00:15:51,160 --> 00:15:56,890
significant bit<font color="#E5E5E5"> if it's</font><font color="#CCCCCC"> said if it's one</font>

337
00:15:53,370 --> 00:15:59,650
we add<font color="#CCCCCC"> q and since there's nothing we</font>

338
00:15:56,890 --> 00:16:03,010
just<font color="#E5E5E5"> take Q for now then every time we</font>

339
00:15:59,650 --> 00:16:06,130
move down<font color="#E5E5E5"> one we double we double the</font>

340
00:16:03,010 --> 00:16:07,540
running result we have we add a double

341
00:16:06,130 --> 00:16:09,970
operation to our chain

342
00:16:07,540 --> 00:16:12,280
now what happens by the time<font color="#E5E5E5"> we are at</font>

343
00:16:09,970 --> 00:16:16,840
the end to this<font color="#E5E5E5"> Q that we added now it</font>

344
00:16:12,280 --> 00:16:18,970
gets doubled 255 times so it gets to

345
00:16:16,840 --> 00:16:21,760
<font color="#E5E5E5">have exactly the value it was supposed</font>

346
00:16:18,970 --> 00:16:24,760
to have for its significance<font color="#E5E5E5"> which was</font>

347
00:16:21,760 --> 00:16:27,760
<font color="#CCCCCC">to</font><font color="#E5E5E5"> 255 because it's the most significant</font>

348
00:16:24,760 --> 00:16:31,810
<font color="#E5E5E5">most important highest valued bit in the</font>

349
00:16:27,760 --> 00:16:33,850
key now this might not<font color="#E5E5E5"> be immediately</font>

350
00:16:31,810 --> 00:16:36,760
<font color="#E5E5E5">intuitive but we're</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> run through</font><font color="#CCCCCC"> it</font>

351
00:16:33,850 --> 00:16:39,160
so<font color="#CCCCCC"> we move down 1 and we do a double</font>

352
00:16:36,760 --> 00:16:40,810
<font color="#E5E5E5">operation at the bottom there I'm</font>

353
00:16:39,160 --> 00:16:43,780
keeping a track of<font color="#CCCCCC"> the operations we</font>

354
00:16:40,810 --> 00:16:46,030
have to do on our<font color="#E5E5E5"> running product then</font>

355
00:16:43,780 --> 00:16:48,490
<font color="#CCCCCC">we check the bit and it's zero so we</font>

356
00:16:46,030 --> 00:16:51,699
don't<font color="#CCCCCC"> add anything we double again to</font>

357
00:16:48,490 --> 00:16:55,390
move down<font color="#E5E5E5"> one this bit is 1 so now we</font>

358
00:16:51,700 --> 00:16:58,750
add<font color="#E5E5E5"> Q and then we move down</font><font color="#CCCCCC"> by doubling</font>

359
00:16:55,390 --> 00:17:01,660
this bit is 1 so we add Q and then we

360
00:16:58,750 --> 00:17:05,319
move<font color="#CCCCCC"> down by doubling we keep</font><font color="#E5E5E5"> doing that</font>

361
00:17:01,660 --> 00:17:11,109
skipping the bits<font color="#E5E5E5"> the zero bit and</font>

362
00:17:05,319 --> 00:17:14,020
adding one for each for each one bit so

363
00:17:11,109 --> 00:17:16,479
what<font color="#E5E5E5"> we get at the</font><font color="#CCCCCC"> end is this</font><font color="#E5E5E5"> string at</font>

364
00:17:14,020 --> 00:17:19,150
the bottom of operations<font color="#E5E5E5"> that if we do</font>

365
00:17:16,480 --> 00:17:21,569
them<font color="#E5E5E5"> in that order with the Q point that</font>

366
00:17:19,150 --> 00:17:26,770
we want to<font color="#E5E5E5"> multiply the final result is</font>

367
00:17:21,569 --> 00:17:28,840
d times<font color="#CCCCCC"> Q now this might have clicked</font><font color="#E5E5E5"> if</font>

368
00:17:26,770 --> 00:17:31,210
it didn't click the part<font color="#E5E5E5"> that you need</font>

369
00:17:28,840 --> 00:17:34,689
<font color="#E5E5E5">to understand</font><font color="#CCCCCC"> further</font><font color="#E5E5E5"> attack is</font><font color="#CCCCCC"> that</font>

370
00:17:31,210 --> 00:17:36,760
given<font color="#E5E5E5"> one a private key we generate a</font>

371
00:17:34,690 --> 00:17:42,520
sequence of<font color="#CCCCCC"> operations that</font><font color="#E5E5E5"> we do on the</font>

372
00:17:36,760 --> 00:17:45,550
point<font color="#E5E5E5"> and we use that</font><font color="#CCCCCC"> as the result</font><font color="#E5E5E5"> okay</font>

373
00:17:42,520 --> 00:17:47,980
<font color="#CCCCCC">so you're given a</font><font color="#E5E5E5"> point and</font><font color="#CCCCCC"> enum</font>

374
00:17:45,550 --> 00:17:50,440
<font color="#CCCCCC">multiply and based on the bits of</font><font color="#E5E5E5"> the</font>

375
00:17:47,980 --> 00:17:52,810
point which is<font color="#E5E5E5"> our private key we build</font>

376
00:17:50,440 --> 00:17:54,480
a custom very specific to the key

377
00:17:52,810 --> 00:17:58,030
<font color="#E5E5E5">sequence of operations and the</font>

378
00:17:54,480 --> 00:17:59,980
<font color="#CCCCCC">operations are the same up</font><font color="#E5E5E5"> to if the</font>

379
00:17:58,030 --> 00:18:01,960
first bits are the same or if all the

380
00:17:59,980 --> 00:18:04,240
bits are the same if a bit is different

381
00:18:01,960 --> 00:18:06,070
at position 100<font color="#E5E5E5"> the</font><font color="#CCCCCC"> FIR</font><font color="#E5E5E5"> the old</font>

382
00:18:04,240 --> 00:18:09,340
operations before<font color="#E5E5E5"> that are going to be</font>

383
00:18:06,070 --> 00:18:13,300
the same so we're going to<font color="#E5E5E5"> use this fact</font>

384
00:18:09,340 --> 00:18:16,750
the fact that<font color="#CCCCCC"> a key bits trim bit string</font>

385
00:18:13,300 --> 00:18:21,240
is<font color="#E5E5E5"> maps directly into operations done to</font>

386
00:18:16,750 --> 00:18:24,820
the point to build<font color="#E5E5E5"> our adaptive attack</font>

387
00:18:21,240 --> 00:18:27,460
so back to our carrot now we have about

388
00:18:24,820 --> 00:18:29,530
where our wrong result is returned from

389
00:18:27,460 --> 00:18:32,020
a very internal function<font color="#CCCCCC"> evening has</font>

390
00:18:29,530 --> 00:18:34,120
internal in the<font color="#E5E5E5"> name so what does it</font>

391
00:18:32,020 --> 00:18:38,139
<font color="#E5E5E5">that we break we</font><font color="#CCCCCC"> look at the code</font>

392
00:18:34,120 --> 00:18:40,090
<font color="#CCCCCC">and it's called by point</font><font color="#E5E5E5"> add adding two</font>

393
00:18:38,140 --> 00:18:43,330
points<font color="#CCCCCC"> together and it's also called by</font>

394
00:18:40,090 --> 00:18:46,020
point double which is just an<font color="#E5E5E5"> optimised</font>

395
00:18:43,330 --> 00:18:49,000
way of adding the point to<font color="#E5E5E5"> itself and</font>

396
00:18:46,020 --> 00:18:50,920
that is used in scalar<font color="#E5E5E5"> multiplication</font>

397
00:18:49,000 --> 00:18:52,690
scalar multiplication is<font color="#CCCCCC"> exactly what I</font>

398
00:18:50,920 --> 00:18:57,160
<font color="#CCCCCC">just described</font><font color="#E5E5E5"> it's a fancy way of</font>

399
00:18:52,690 --> 00:18:58,240
<font color="#E5E5E5">calling x as a sequence of adding X so</font>

400
00:18:57,160 --> 00:19:00,670
you know how<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> scatter</font>

401
00:18:58,240 --> 00:19:03,490
multiplication now how is this used in a

402
00:19:00,670 --> 00:19:05,350
real protocol well<font color="#E5E5E5"> this for example in</font>

403
00:19:03,490 --> 00:19:09,130
elliptic curve diffie-hellman<font color="#E5E5E5"> is used</font>

404
00:19:05,350 --> 00:19:10,840
with<font color="#E5E5E5"> a point which can from your peer</font>

405
00:19:09,130 --> 00:19:15,040
because<font color="#E5E5E5"> that's the public key</font><font color="#CCCCCC"> of the</font>

406
00:19:10,840 --> 00:19:17,740
other party<font color="#CCCCCC"> a scalar which is the giant</font>

407
00:19:15,040 --> 00:19:19,360
bits through<font color="#E5E5E5"> a string which</font><font color="#CCCCCC"> is your</font>

408
00:19:17,740 --> 00:19:22,180
<font color="#E5E5E5">secret key</font><font color="#CCCCCC"> that the attacker doesn't</font>

409
00:19:19,360 --> 00:19:24,850
know<font color="#E5E5E5"> and the result is the shared secret</font>

410
00:19:22,180 --> 00:19:26,680
<font color="#E5E5E5">the shared secret is going to be what's</font>

411
00:19:24,850 --> 00:19:28,540
used for<font color="#CCCCCC"> example to encrypt this</font>

412
00:19:26,680 --> 00:19:32,310
connection we're setting<font color="#E5E5E5"> up or to</font>

413
00:19:28,540 --> 00:19:36,220
decrypt<font color="#E5E5E5"> this message we are received now</font>

414
00:19:32,310 --> 00:19:38,560
this is used one<font color="#E5E5E5"> way to use</font><font color="#CCCCCC"> this is</font>

415
00:19:36,220 --> 00:19:40,960
normal ephemeral diffie-hellman<font color="#E5E5E5"> where</font>

416
00:19:38,560 --> 00:19:43,840
each part generates a new private<font color="#E5E5E5"> key</font><font color="#CCCCCC"> at</font>

417
00:19:40,960 --> 00:19:45,490
every run and we can't<font color="#E5E5E5"> attack that but</font>

418
00:19:43,840 --> 00:19:48,669
there's another way of<font color="#CCCCCC"> using</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> element</font>

419
00:19:45,490 --> 00:19:51,310
if you feel brave and it's by fixing the

420
00:19:48,670 --> 00:19:53,440
private key on one side<font color="#E5E5E5"> that's useful</font>

421
00:19:51,310 --> 00:19:56,560
because the public he also never changes

422
00:19:53,440 --> 00:19:59,049
<font color="#CCCCCC">so you can you know broadcasted you</font><font color="#E5E5E5"> can</font>

423
00:19:56,560 --> 00:20:01,119
put in a<font color="#E5E5E5"> certificate you</font><font color="#CCCCCC"> can deploy</font>

424
00:19:59,049 --> 00:20:04,090
<font color="#CCCCCC">to machines</font><font color="#E5E5E5"> printed on business cards</font>

425
00:20:01,119 --> 00:20:07,809
<font color="#E5E5E5">and I'm not joking</font><font color="#CCCCCC"> that what happens if</font>

426
00:20:04,090 --> 00:20:09,699
you try to use it<font color="#E5E5E5"> with PGP but so the</font>

427
00:20:07,809 --> 00:20:12,489
point is<font color="#E5E5E5"> that the private key</font><font color="#CCCCCC"> this color</font>

428
00:20:09,700 --> 00:20:14,980
<font color="#E5E5E5">right there that never changes on our</font>

429
00:20:12,489 --> 00:20:17,529
side<font color="#CCCCCC"> while the public key is different</font>

430
00:20:14,980 --> 00:20:20,710
every time<font color="#E5E5E5"> we do this with a new peer</font>

431
00:20:17,529 --> 00:20:23,320
which might be an attacker<font color="#E5E5E5"> so recapping</font>

432
00:20:20,710 --> 00:20:26,739
scalar multiplication is called with an

433
00:20:23,320 --> 00:20:30,039
attacker<font color="#E5E5E5"> provide the point</font><font color="#CCCCCC"> a secret</font>

434
00:20:26,739 --> 00:20:32,350
private<font color="#CCCCCC"> key is color</font><font color="#E5E5E5"> and the result the</font>

435
00:20:30,039 --> 00:20:34,330
seeker<font color="#E5E5E5"> the shared secret is going to be</font>

436
00:20:32,350 --> 00:20:36,549
used to do some interaction with<font color="#E5E5E5"> the</font>

437
00:20:34,330 --> 00:20:38,678
attacker now what can the attacker learn

438
00:20:36,549 --> 00:20:41,080
from<font color="#E5E5E5"> this it learns whether the</font><font color="#CCCCCC"> bag</font>

439
00:20:38,679 --> 00:20:43,509
triggered or not because if<font color="#E5E5E5"> that</font>

440
00:20:41,080 --> 00:20:45,609
function<font color="#CCCCCC"> at the bottom</font><font color="#E5E5E5"> doesn't work</font><font color="#CCCCCC"> The</font>

441
00:20:43,509 --> 00:20:49,149
<font color="#CCCCCC">Shard</font><font color="#E5E5E5"> secret the result is going to</font><font color="#CCCCCC"> be</font>

442
00:20:45,609 --> 00:20:51,369
wrong<font color="#E5E5E5"> and if that's wrong the TLS</font>

443
00:20:49,149 --> 00:20:53,830
connection for example<font color="#CCCCCC"> will break and it</font>

444
00:20:51,369 --> 00:20:56,559
will terminate<font color="#E5E5E5"> and that's what in</font>

445
00:20:53,830 --> 00:20:58,859
<font color="#CCCCCC">cryptography call we call an</font><font color="#E5E5E5"> Oracle an</font>

446
00:20:56,559 --> 00:21:01,600
Oracle is something that has some

447
00:20:58,859 --> 00:21:03,580
information<font color="#E5E5E5"> hidden inside it</font><font color="#CCCCCC"> that we</font>

448
00:21:01,600 --> 00:21:06,070
want<font color="#E5E5E5"> to discover but that we can see</font>

449
00:21:03,580 --> 00:21:09,309
directly<font color="#E5E5E5"> but will answer questions</font><font color="#CCCCCC"> of</font>

450
00:21:06,070 --> 00:21:11,230
some sort<font color="#E5E5E5"> about</font><font color="#CCCCCC"> this in this thing the</font>

451
00:21:09,309 --> 00:21:13,840
question<font color="#CCCCCC"> we can ask</font><font color="#E5E5E5"> this one is if I</font>

452
00:21:11,230 --> 00:21:18,279
give you this point<font color="#E5E5E5"> do you calculate the</font>

453
00:21:13,840 --> 00:21:21,309
result correctly or not<font color="#E5E5E5"> now once we box</font>

454
00:21:18,279 --> 00:21:22,929
this into this kind of Oracle that's

455
00:21:21,309 --> 00:21:25,090
game over<font color="#CCCCCC"> because if you give an Oracle</font>

456
00:21:22,929 --> 00:21:27,239
<font color="#CCCCCC">to a cryptographer they will</font><font color="#E5E5E5"> build on</font>

457
00:21:25,090 --> 00:21:29,559
<font color="#E5E5E5">that have adaptive attack let's see how</font>

458
00:21:27,239 --> 00:21:32,559
so let's say<font color="#CCCCCC"> that we have two magic</font>

459
00:21:29,559 --> 00:21:34,749
points<font color="#E5E5E5"> okay one of</font><font color="#CCCCCC"> them breaks</font><font color="#E5E5E5"> if you</font>

460
00:21:32,559 --> 00:21:36,279
add the double<font color="#E5E5E5"> it double it add the</font>

461
00:21:34,749 --> 00:21:38,859
double it add the<font color="#CCCCCC"> double it and add</font><font color="#E5E5E5"> it</font>

462
00:21:36,279 --> 00:21:41,399
<font color="#E5E5E5">and it breaks a dead last</font><font color="#CCCCCC"> edition and</font>

463
00:21:38,859 --> 00:21:44,889
from their<font color="#E5E5E5"> own everything</font><font color="#CCCCCC"> is broken</font>

464
00:21:41,399 --> 00:21:46,508
<font color="#E5E5E5">another magic point breaks if you add</font>

465
00:21:44,889 --> 00:21:49,449
<font color="#CCCCCC">the doublet doublet at the double it</font>

466
00:21:46,509 --> 00:21:51,460
<font color="#E5E5E5">I'll add the double doublet and it</font>

467
00:21:49,450 --> 00:21:54,820
breaks specifically on that<font color="#CCCCCC"> double</font>

468
00:21:51,460 --> 00:21:58,179
operation now how do<font color="#E5E5E5"> we use this to to</font>

469
00:21:54,820 --> 00:22:00,129
discover a bit of the key<font color="#E5E5E5"> let's say we</font>

470
00:21:58,179 --> 00:22:02,919
already<font color="#E5E5E5"> know the four bits first four</font>

471
00:22:00,129 --> 00:22:04,928
bits of the key based on<font color="#CCCCCC"> what the last</font>

472
00:22:02,919 --> 00:22:08,320
bit of the key the fifth bit of the key

473
00:22:04,929 --> 00:22:11,100
is the operations will follow one chain

474
00:22:08,320 --> 00:22:12,610
or the<font color="#CCCCCC"> other</font><font color="#E5E5E5"> so they will hit the bug on</font>

475
00:22:11,100 --> 00:22:14,260
<font color="#E5E5E5">it</font><font color="#CCCCCC"> will</font>

476
00:22:12,610 --> 00:22:16,330
hit the bag<font color="#E5E5E5"> only on one of the two</font>

477
00:22:14,260 --> 00:22:19,210
<font color="#E5E5E5">points based on</font><font color="#CCCCCC"> wood the bit of the key</font>

478
00:22:16,330 --> 00:22:21,790
is so we<font color="#E5E5E5"> send both points to our Oracle</font>

479
00:22:19,210 --> 00:22:23,890
<font color="#E5E5E5">one of them causes the bug and breaks</font>

480
00:22:21,790 --> 00:22:25,149
the connection<font color="#CCCCCC"> one of them doesn't</font><font color="#E5E5E5"> close</font>

481
00:22:23,890 --> 00:22:28,450
<font color="#CCCCCC">the</font><font color="#E5E5E5"> bank and</font><font color="#CCCCCC"> doesn't break the</font>

482
00:22:25,150 --> 00:22:30,190
connection<font color="#CCCCCC"> what does that mean</font><font color="#E5E5E5"> that the</font>

483
00:22:28,450 --> 00:22:32,470
one that<font color="#E5E5E5"> broke the connection is the one</font>

484
00:22:30,190 --> 00:22:35,559
that corresponds<font color="#E5E5E5"> to the bit of the key</font>

485
00:22:32,470 --> 00:22:37,450
and<font color="#E5E5E5"> we learned a bit of the key now if</font>

486
00:22:35,559 --> 00:22:39,850
we learn a bit<font color="#CCCCCC"> of the key it's usually</font>

487
00:22:37,450 --> 00:22:41,440
<font color="#E5E5E5">older specifically it's over if you</font>

488
00:22:39,850 --> 00:22:43,750
<font color="#CCCCCC">learned a bit</font><font color="#E5E5E5"> of the key and then we</font>

489
00:22:41,440 --> 00:22:46,150
<font color="#E5E5E5">have a way to discover the next bit</font>

490
00:22:43,750 --> 00:22:48,460
<font color="#E5E5E5">given all the previous ones</font><font color="#CCCCCC"> and how do</font>

491
00:22:46,150 --> 00:22:50,590
<font color="#E5E5E5">we proceed</font><font color="#CCCCCC"> on this attack</font><font color="#E5E5E5"> well once we</font>

492
00:22:48,460 --> 00:22:52,630
<font color="#E5E5E5">know the first five bits because we just</font>

493
00:22:50,590 --> 00:22:56,709
figured them out<font color="#E5E5E5"> with these</font><font color="#CCCCCC"> two points</font>

494
00:22:52,630 --> 00:22:59,200
<font color="#CCCCCC">we generate</font><font color="#E5E5E5"> two new magic points that</font>

495
00:22:56,710 --> 00:23:03,970
chain that<font color="#CCCCCC"> crash on the two different</font>

496
00:22:59,200 --> 00:23:06,460
<font color="#CCCCCC">paths of the</font><font color="#E5E5E5"> next bit and we send them</font>

497
00:23:03,970 --> 00:23:08,410
<font color="#E5E5E5">both one of them breaks one</font><font color="#CCCCCC"> of them</font>

498
00:23:06,460 --> 00:23:10,929
<font color="#E5E5E5">doesn't we learnt another bit we</font>

499
00:23:08,410 --> 00:23:12,669
generate two magic points<font color="#E5E5E5"> we send them</font>

500
00:23:10,929 --> 00:23:16,720
both and we<font color="#E5E5E5"> keep doing this until we</font>

501
00:23:12,669 --> 00:23:19,390
<font color="#CCCCCC">have your key now what's</font><font color="#E5E5E5"> this gold is an</font>

502
00:23:16,720 --> 00:23:21,160
adaptive attack and it's adaptive

503
00:23:19,390 --> 00:23:24,280
<font color="#E5E5E5">because we can't generate the two magic</font>

504
00:23:21,160 --> 00:23:28,299
points to find<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> six unless we know</font>

505
00:23:24,280 --> 00:23:29,950
bit five and that also means that<font color="#E5E5E5"> we can</font>

506
00:23:28,299 --> 00:23:31,780
pre-compute points for all the possible

507
00:23:29,950 --> 00:23:34,450
<font color="#CCCCCC">chains because there are as many chains</font>

508
00:23:31,780 --> 00:23:36,879
as there are keys but we can generate

509
00:23:34,450 --> 00:23:38,919
points<font color="#E5E5E5"> for the two possible chains for</font>

510
00:23:36,880 --> 00:23:41,590
the next bit that we don't know given

511
00:23:38,919 --> 00:23:43,540
all<font color="#E5E5E5"> the previous</font><font color="#CCCCCC"> tours now we were</font>

512
00:23:41,590 --> 00:23:47,199
extremely<font color="#E5E5E5"> proud that we had figured out</font>

513
00:23:43,540 --> 00:23:50,020
<font color="#E5E5E5">this attack</font><font color="#CCCCCC"> if anyone in the room is in</font>

514
00:23:47,200 --> 00:23:52,030
<font color="#CCCCCC">the</font><font color="#E5E5E5"> academic career they will know the</font>

515
00:23:50,020 --> 00:23:54,910
feeling then of going to the literature

516
00:23:52,030 --> 00:24:01,418
<font color="#CCCCCC">and find him</font><font color="#E5E5E5"> that Billy Bob Bromley</font>

517
00:23:54,910 --> 00:24:04,020
figured this out<font color="#CCCCCC"> in 2011 before us so</font>

518
00:24:01,419 --> 00:24:09,059
the attack is pretty<font color="#CCCCCC"> much the same thing</font>

519
00:24:04,020 --> 00:24:11,799
although<font color="#CCCCCC"> this was against</font><font color="#E5E5E5"> a 2006 bug</font>

520
00:24:09,059 --> 00:24:14,710
<font color="#E5E5E5">2007 possibly and it was published in</font>

521
00:24:11,799 --> 00:24:16,629
2011<font color="#CCCCCC"> so there was a bit of consolation</font>

522
00:24:14,710 --> 00:24:19,120
<font color="#CCCCCC">in the fact that it took a few years to</font>

523
00:24:16,630 --> 00:24:21,910
<font color="#E5E5E5">notice that</font><font color="#CCCCCC"> that bug was</font><font color="#E5E5E5"> explorable so</font>

524
00:24:19,120 --> 00:24:24,219
we're still pretty<font color="#E5E5E5"> happy but the paper</font>

525
00:24:21,910 --> 00:24:25,570
is eerily similar<font color="#E5E5E5"> there is a bug it's</font>

526
00:24:24,220 --> 00:24:26,020
not the same it's<font color="#CCCCCC"> not in the same</font>

527
00:24:25,570 --> 00:24:27,429
function

528
00:24:26,020 --> 00:24:30,460
as I've<font color="#CCCCCC"> shown you that there</font><font color="#E5E5E5"> is a bug in</font>

529
00:24:27,430 --> 00:24:32,710
<font color="#CCCCCC">OpenSSL it does the exact same thing it</font>

530
00:24:30,460 --> 00:24:34,840
breaks<font color="#E5E5E5"> and you can generate two magic</font>

531
00:24:32,710 --> 00:24:37,300
points that break<font color="#E5E5E5"> based on the two bits</font>

532
00:24:34,840 --> 00:24:40,570
and you can send them both<font color="#E5E5E5"> and build the</font>

533
00:24:37,300 --> 00:24:43,690
same adaptive attack now<font color="#E5E5E5"> it's exactly</font>

534
00:24:40,570 --> 00:24:45,990
<font color="#CCCCCC">the</font><font color="#E5E5E5"> same except</font><font color="#CCCCCC"> that it's absolutely not</font>

535
00:24:43,690 --> 00:24:49,620
the same in<font color="#E5E5E5"> terms of implementation</font><font color="#CCCCCC"> and</font>

536
00:24:45,990 --> 00:24:52,690
<font color="#E5E5E5">that's because the go implementation was</font>

537
00:24:49,620 --> 00:24:55,899
using certain optimizations based on the

538
00:24:52,690 --> 00:24:58,560
work by<font color="#E5E5E5"> Krasnov and</font><font color="#CCCCCC"> where on that they</font>

539
00:24:55,900 --> 00:25:02,850
applied<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> meantime</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> open SSL -</font>

540
00:24:58,560 --> 00:25:06,760
which speeds up that double in<font color="#CCCCCC"> ad</font>

541
00:25:02,850 --> 00:25:10,080
sequence by a lot by instead<font color="#E5E5E5"> of looking</font>

542
00:25:06,760 --> 00:25:12,970
bit by bit you know<font color="#E5E5E5"> one bit at the point</font>

543
00:25:10,080 --> 00:25:14,800
<font color="#E5E5E5">double maybe at the point double</font><font color="#CCCCCC"> may be</font>

544
00:25:12,970 --> 00:25:18,250
<font color="#CCCCCC">at the point double instead</font><font color="#E5E5E5"> it looks at</font>

545
00:25:14,800 --> 00:25:21,190
chunks of<font color="#E5E5E5"> five bits in a specific</font>

546
00:25:18,250 --> 00:25:24,460
encoding based on<font color="#CCCCCC"> boof</font><font color="#E5E5E5"> on the boof</font>

547
00:25:21,190 --> 00:25:25,060
<font color="#CCCCCC">algorithm which is from the 50s not</font>

548
00:25:24,460 --> 00:25:28,360
<font color="#E5E5E5">kidding</font>

549
00:25:25,060 --> 00:25:31,960
not wrong<font color="#E5E5E5"> paper from the 50s still</font>

550
00:25:28,360 --> 00:25:34,000
<font color="#E5E5E5">speeding up things but at the</font><font color="#CCCCCC"> end of the</font>

551
00:25:31,960 --> 00:25:36,460
day we're<font color="#CCCCCC"> doing is</font><font color="#E5E5E5"> that it takes</font><font color="#CCCCCC"> Windows</font>

552
00:25:34,000 --> 00:25:38,920
of<font color="#E5E5E5"> five bits and for each window</font><font color="#CCCCCC"> the</font>

553
00:25:36,460 --> 00:25:42,580
value<font color="#E5E5E5"> can be from minus sixteen to class</font>

554
00:25:38,920 --> 00:25:45,580
<font color="#CCCCCC">sixteen and instead of</font><font color="#E5E5E5"> adding one and</font>

555
00:25:42,580 --> 00:25:48,189
then doubling it will add or subtract

556
00:25:45,580 --> 00:25:51,760
one to sixteen and then double five

557
00:25:48,190 --> 00:25:53,650
times to catch up<font color="#E5E5E5"> to move down so it</font>

558
00:25:51,760 --> 00:25:57,940
starts by making<font color="#CCCCCC"> up</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> computation table</font>

559
00:25:53,650 --> 00:26:00,700
<font color="#E5E5E5">and once it has the per computation</font>

560
00:25:57,940 --> 00:26:03,790
table it will<font color="#E5E5E5"> use it to double five</font>

561
00:26:00,700 --> 00:26:06,730
times and then look at the window<font color="#E5E5E5"> of</font>

562
00:26:03,790 --> 00:26:09,580
five bits<font color="#E5E5E5"> add or subtract one to sixteen</font>

563
00:26:06,730 --> 00:26:12,730
from<font color="#E5E5E5"> the running result and double five</font>

564
00:26:09,580 --> 00:26:17,320
times again until the windows have run

565
00:26:12,730 --> 00:26:19,780
through<font color="#CCCCCC"> the entire</font><font color="#E5E5E5"> number so as I said</font>

566
00:26:17,320 --> 00:26:21,250
this is<font color="#E5E5E5"> boof encoded so it's a little</font>

567
00:26:19,780 --> 00:26:23,830
different<font color="#E5E5E5"> than</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> so instead of</font>

568
00:26:21,250 --> 00:26:26,020
talking<font color="#E5E5E5"> about five bit windows we</font><font color="#CCCCCC"> talked</font>

569
00:26:23,830 --> 00:26:31,120
about limbs limbs are nothing else<font color="#CCCCCC"> than</font>

570
00:26:26,020 --> 00:26:33,430
<font color="#E5E5E5">each sign bit and one to</font><font color="#CCCCCC"> sixteen so the</font>

571
00:26:31,120 --> 00:26:35,590
value you want to<font color="#CCCCCC"> add or subtract one to</font>

572
00:26:33,430 --> 00:26:38,680
say zero<font color="#E5E5E5"> to sixteen and whether you want</font>

573
00:26:35,590 --> 00:26:39,789
<font color="#E5E5E5">to</font><font color="#CCCCCC"> add it or subtract them</font><font color="#E5E5E5"> and that's a</font>

574
00:26:38,680 --> 00:26:42,399
sequence<font color="#E5E5E5"> or</font>

575
00:26:39,789 --> 00:26:45,669
values that<font color="#CCCCCC"> we apply to come to our</font>

576
00:26:42,399 --> 00:26:48,129
product but<font color="#E5E5E5"> then the tack pretty much</font>

577
00:26:45,669 --> 00:26:51,609
<font color="#E5E5E5">are all soft the same way instead</font><font color="#CCCCCC"> of</font>

578
00:26:48,129 --> 00:26:54,189
attacking<font color="#E5E5E5"> the two options</font><font color="#CCCCCC"> ad or not</font><font color="#E5E5E5"> ad</font>

579
00:26:51,609 --> 00:26:55,989
<font color="#E5E5E5">we attack each possible value that</font>

580
00:26:54,190 --> 00:26:59,799
<font color="#CCCCCC">you're adding</font><font color="#E5E5E5"> from the pre-computation</font>

581
00:26:55,989 --> 00:27:02,409
table so now for each limb there are<font color="#E5E5E5"> 33</font>

582
00:26:59,799 --> 00:27:05,830
values because plus and minus<font color="#CCCCCC"> zero are</font>

583
00:27:02,409 --> 00:27:08,559
not distinguishable<font color="#E5E5E5"> and we generate</font>

584
00:27:05,830 --> 00:27:10,149
points<font color="#E5E5E5"> for on average half of them which</font>

585
00:27:08,559 --> 00:27:14,019
happens to be 16<font color="#E5E5E5"> because there's some</font>

586
00:27:10,149 --> 00:27:16,719
overlap<font color="#CCCCCC"> and so on average we take 16</font>

587
00:27:14,019 --> 00:27:19,389
points instead<font color="#E5E5E5"> of</font><font color="#CCCCCC"> one sorry</font>

588
00:27:16,720 --> 00:27:21,879
16 points<font color="#E5E5E5"> to figure out</font><font color="#CCCCCC"> five bits of the</font>

589
00:27:19,389 --> 00:27:23,258
key instead<font color="#E5E5E5"> of five to figure out five</font>

590
00:27:21,879 --> 00:27:25,748
bits<font color="#E5E5E5"> of the key so it's approximately</font>

591
00:27:23,259 --> 00:27:30,489
three times slower<font color="#E5E5E5"> but it works the</font>

592
00:27:25,749 --> 00:27:32,559
exact<font color="#CCCCCC"> same</font><font color="#E5E5E5"> way now as I</font><font color="#CCCCCC"> said it</font><font color="#E5E5E5"> works</font>

593
00:27:30,489 --> 00:27:33,999
the same<font color="#E5E5E5"> way so we're targeting things</font>

594
00:27:32,559 --> 00:27:36,580
that will<font color="#E5E5E5"> cause the bug to trigger</font>

595
00:27:33,999 --> 00:27:39,039
<font color="#E5E5E5">either in adding the limp from the</font><font color="#CCCCCC"> pro</font>

596
00:27:36,580 --> 00:27:40,989
<font color="#CCCCCC">competition table specifically</font><font color="#E5E5E5"> that limp</font>

597
00:27:39,039 --> 00:27:42,729
from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> competition table so</font><font color="#E5E5E5"> we'll have</font>

598
00:27:40,989 --> 00:27:45,129
a point<font color="#E5E5E5"> that</font><font color="#CCCCCC"> only breaks when you add</font>

599
00:27:42,729 --> 00:27:47,830
<font color="#CCCCCC">the</font><font color="#E5E5E5"> turkey</font><font color="#CCCCCC"> and one that</font><font color="#E5E5E5"> only breaks when</font>

600
00:27:45,129 --> 00:27:49,599
you<font color="#E5E5E5"> subtract 12 and we send each of them</font>

601
00:27:47,830 --> 00:27:52,989
and one<font color="#CCCCCC"> of them will break</font><font color="#E5E5E5"> and we</font><font color="#CCCCCC"> will</font>

602
00:27:49,599 --> 00:27:54,399
know that<font color="#E5E5E5"> limp or break in the five</font>

603
00:27:52,989 --> 00:27:57,899
doubles that come immediately after

604
00:27:54,399 --> 00:28:00,969
<font color="#E5E5E5">which still depend on the previous limb</font>

605
00:27:57,899 --> 00:28:03,668
now<font color="#E5E5E5"> the one thing I didn't tell you is</font>

606
00:28:00,970 --> 00:28:06,519
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> but these magic points</font><font color="#E5E5E5"> where are</font>

607
00:28:03,669 --> 00:28:08,799
you pulling them out of<font color="#E5E5E5"> and the answer</font>

608
00:28:06,519 --> 00:28:11,679
is<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have an algebraic way</font>

609
00:28:08,799 --> 00:28:13,599
<font color="#E5E5E5">to figure them out</font><font color="#CCCCCC"> partially because by</font>

610
00:28:11,679 --> 00:28:15,580
the time<font color="#E5E5E5"> they reach that point of the</font>

611
00:28:13,599 --> 00:28:19,658
chain a lot of things have happened<font color="#E5E5E5"> to</font>

612
00:28:15,580 --> 00:28:22,269
<font color="#E5E5E5">the value but we have and it would be</font>

613
00:28:19,659 --> 00:28:23,799
hard to undo them<font color="#E5E5E5"> but so instead we just</font>

614
00:28:22,269 --> 00:28:28,179
<font color="#E5E5E5">took the extremely fast implementation</font>

615
00:28:23,799 --> 00:28:30,489
<font color="#E5E5E5">of the curve and added</font><font color="#CCCCCC"> assembly hook to</font>

616
00:28:28,179 --> 00:28:32,970
just tell us whether<font color="#CCCCCC"> or</font><font color="#E5E5E5"> not the</font><font color="#CCCCCC"> bug</font>

617
00:28:30,489 --> 00:28:35,769
would trigger<font color="#E5E5E5"> and then we run a</font><font color="#CCCCCC"> fuzzer</font>

618
00:28:32,970 --> 00:28:37,929
so that would just<font color="#E5E5E5"> raise the flag set a</font>

619
00:28:35,769 --> 00:28:40,269
register if the conditions for<font color="#E5E5E5"> the bag</font>

620
00:28:37,929 --> 00:28:43,960
were met<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we would notify us instead</font>

621
00:28:40,269 --> 00:28:45,970
<font color="#CCCCCC">of breaking</font><font color="#E5E5E5"> and then we wrote as a small</font>

622
00:28:43,960 --> 00:28:47,739
scaffolding around<font color="#E5E5E5"> that which would</font>

623
00:28:45,970 --> 00:28:50,200
execute<font color="#E5E5E5"> all the operations that we</font>

624
00:28:47,739 --> 00:28:51,730
already<font color="#E5E5E5"> know from the</font><font color="#CCCCCC"> previous limbs</font><font color="#E5E5E5"> all</font>

625
00:28:50,200 --> 00:28:52,790
the operations that<font color="#CCCCCC"> we've already</font>

626
00:28:51,730 --> 00:28:55,340
learned<font color="#E5E5E5"> that</font>

627
00:28:52,790 --> 00:28:57,440
<font color="#E5E5E5">no we are going to be executed and then</font>

628
00:28:55,340 --> 00:29:01,280
for<font color="#E5E5E5"> each</font><font color="#CCCCCC"> of the possible</font><font color="#E5E5E5"> next operations</font>

629
00:28:57,440 --> 00:29:05,270
so subtract<font color="#E5E5E5"> 16 subtract 15 all the way</font>

630
00:29:01,280 --> 00:29:07,520
to add 15<font color="#CCCCCC"> at 16</font><font color="#E5E5E5"> we look for something</font>

631
00:29:05,270 --> 00:29:10,580
that<font color="#E5E5E5"> breaks for</font><font color="#CCCCCC"> only one of these</font>

632
00:29:07,520 --> 00:29:12,620
<font color="#E5E5E5">operations</font><font color="#CCCCCC"> if we</font><font color="#E5E5E5"> find that that's it</font>

633
00:29:10,580 --> 00:29:15,040
that's a candidate point we send it to

634
00:29:12,620 --> 00:29:17,510
<font color="#CCCCCC">the Oracle and we check if we were</font><font color="#E5E5E5"> lucky</font>

635
00:29:15,040 --> 00:29:19,550
<font color="#E5E5E5">we removed some</font><font color="#CCCCCC"> of the constant time</font>

636
00:29:17,510 --> 00:29:21,430
stuff<font color="#E5E5E5"> because death code had to be</font>

637
00:29:19,550 --> 00:29:23,600
constant time<font color="#E5E5E5"> our doesn't have to and</font>

638
00:29:21,430 --> 00:29:26,570
turns out that branches are a<font color="#E5E5E5"> little</font>

639
00:29:23,600 --> 00:29:30,620
faster<font color="#E5E5E5"> so this was generating point at a</font>

640
00:29:26,570 --> 00:29:33,439
very acceptable<font color="#E5E5E5"> rate of course to</font>

641
00:29:30,620 --> 00:29:36,800
generate<font color="#E5E5E5"> points we need test points</font>

642
00:29:33,440 --> 00:29:38,360
candidate points<font color="#E5E5E5"> to that we can try and</font>

643
00:29:36,800 --> 00:29:41,750
<font color="#E5E5E5">figure out</font><font color="#CCCCCC"> if they're</font><font color="#E5E5E5"> going to be useful</font>

644
00:29:38,360 --> 00:29:43,280
<font color="#E5E5E5">points or not so instead what we did</font>

645
00:29:41,750 --> 00:29:45,860
there is<font color="#CCCCCC"> that we just</font><font color="#E5E5E5"> started from a</font>

646
00:29:43,280 --> 00:29:48,740
random number<font color="#E5E5E5"> multiplied by G and that</font>

647
00:29:45,860 --> 00:29:50,840
was a pair and then just kept adding<font color="#E5E5E5"> one</font>

648
00:29:48,740 --> 00:29:53,090
to<font color="#E5E5E5"> the private key and G to</font><font color="#CCCCCC"> the public</font>

649
00:29:50,840 --> 00:29:57,350
key<font color="#E5E5E5"> remember</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the private key is</font>

650
00:29:53,090 --> 00:29:59,300
<font color="#E5E5E5">just the thing we're going to multiply G</font>

651
00:29:57,350 --> 00:30:01,639
by so if you add one<font color="#CCCCCC"> to the private key</font>

652
00:29:59,300 --> 00:30:05,120
<font color="#E5E5E5">and G to the public key you have a new</font>

653
00:30:01,640 --> 00:30:06,830
pair of valid points point<font color="#E5E5E5"> and private</font>

654
00:30:05,120 --> 00:30:10,070
key<font color="#E5E5E5"> why do we need the private key</font>

655
00:30:06,830 --> 00:30:13,639
<font color="#E5E5E5">because the only way</font><font color="#CCCCCC"> we can in the</font>

656
00:30:10,070 --> 00:30:15,860
Oracle<font color="#E5E5E5"> does this point cause a bug is by</font>

657
00:30:13,640 --> 00:30:18,290
checking<font color="#E5E5E5"> if the whole protocol works</font>

658
00:30:15,860 --> 00:30:20,060
correctly<font color="#CCCCCC"> if we don't know our</font><font color="#E5E5E5"> private</font>

659
00:30:18,290 --> 00:30:24,980
key there is<font color="#E5E5E5"> no way we're going to</font><font color="#CCCCCC"> know</font>

660
00:30:20,060 --> 00:30:27,889
if the<font color="#CCCCCC"> other side made a mistake so this</font>

661
00:30:24,980 --> 00:30:29,720
worked out<font color="#E5E5E5"> we had four magic points for</font>

662
00:30:27,890 --> 00:30:31,430
all the different<font color="#CCCCCC"> values we wanted we</font>

663
00:30:29,720 --> 00:30:33,440
added some<font color="#CCCCCC"> post-processing because there</font>

664
00:30:31,430 --> 00:30:35,480
were<font color="#E5E5E5"> plenty of false positives but</font>

665
00:30:33,440 --> 00:30:37,790
eventually we had a steady stream of

666
00:30:35,480 --> 00:30:40,130
points<font color="#CCCCCC"> that would</font><font color="#E5E5E5"> only break at that</font>

667
00:30:37,790 --> 00:30:43,730
specific point<font color="#CCCCCC"> at for that</font><font color="#E5E5E5"> specific</font>

668
00:30:40,130 --> 00:30:46,430
operation so we<font color="#CCCCCC"> know how</font><font color="#E5E5E5"> to proceed</font><font color="#CCCCCC"> in</font>

669
00:30:43,730 --> 00:30:49,340
the<font color="#CCCCCC"> attack once we know the few limbs</font><font color="#E5E5E5"> we</font>

670
00:30:46,430 --> 00:30:52,040
know how to find the n plus<font color="#CCCCCC"> 1 limb if we</font>

671
00:30:49,340 --> 00:30:54,919
know the enth<font color="#E5E5E5"> limb now the question is</font>

672
00:30:52,040 --> 00:30:57,470
how do we<font color="#E5E5E5"> start how do we find the first</font>

673
00:30:54,920 --> 00:30:59,120
limit the first two limbs<font color="#E5E5E5"> you can think</font>

674
00:30:57,470 --> 00:31:01,280
you do the same thing right

675
00:30:59,120 --> 00:31:03,469
<font color="#E5E5E5">you generate a point that only breaks</font>

676
00:31:01,280 --> 00:31:05,210
when you<font color="#E5E5E5"> take three from the</font><font color="#CCCCCC"> computation</font>

677
00:31:03,470 --> 00:31:06,770
table because that's<font color="#E5E5E5"> the first limb and</font>

678
00:31:05,210 --> 00:31:10,400
you<font color="#CCCCCC"> multiply it</font>

679
00:31:06,770 --> 00:31:12,350
<font color="#CCCCCC">you double it five times and you do that</font>

680
00:31:10,400 --> 00:31:14,360
<font color="#E5E5E5">you generated</font><font color="#CCCCCC"> you try it and what</font>

681
00:31:12,350 --> 00:31:15,550
happens is<font color="#CCCCCC"> that it also</font><font color="#E5E5E5"> breaks for six</font>

682
00:31:14,360 --> 00:31:18,979
and<font color="#CCCCCC"> for 12</font>

683
00:31:15,550 --> 00:31:21,730
<font color="#E5E5E5">why well six in the</font><font color="#CCCCCC"> pre-computation</font>

684
00:31:18,980 --> 00:31:25,910
<font color="#E5E5E5">table is nothing else than three doubled</font>

685
00:31:21,730 --> 00:31:27,290
so if the<font color="#E5E5E5"> tree you find a point that</font>

686
00:31:25,910 --> 00:31:30,950
breaks when you<font color="#E5E5E5"> take three and you</font>

687
00:31:27,290 --> 00:31:32,930
double double double double double<font color="#CCCCCC"> that</font>

688
00:31:30,950 --> 00:31:34,430
will also break when you<font color="#E5E5E5"> take six which</font>

689
00:31:32,930 --> 00:31:38,000
<font color="#CCCCCC">is nothing</font><font color="#E5E5E5"> else than three double and</font>

690
00:31:34,430 --> 00:31:40,100
then<font color="#E5E5E5"> you double double double double so</font>

691
00:31:38,000 --> 00:31:42,380
it's going<font color="#E5E5E5"> to break sooner but</font><font color="#CCCCCC"> we don't</font>

692
00:31:40,100 --> 00:31:44,750
have<font color="#CCCCCC"> visibility into when it</font><font color="#E5E5E5"> breaks</font><font color="#CCCCCC"> we</font>

693
00:31:42,380 --> 00:31:47,450
<font color="#CCCCCC">only get to know it works it didn't work</font>

694
00:31:44,750 --> 00:31:49,820
and<font color="#CCCCCC"> Woodbury</font><font color="#E5E5E5"> Coast offers 12 because 12</font>

695
00:31:47,450 --> 00:31:51,820
is again<font color="#CCCCCC"> three double double so</font><font color="#E5E5E5"> it will</font>

696
00:31:49,820 --> 00:31:54,620
break after you do double double double

697
00:31:51,820 --> 00:31:56,510
<font color="#E5E5E5">so how do you fix this you generate</font>

698
00:31:54,620 --> 00:31:58,639
three points<font color="#E5E5E5"> you generate one that</font>

699
00:31:56,510 --> 00:32:00,560
breaks<font color="#E5E5E5"> doubling five times one that</font>

700
00:31:58,640 --> 00:32:03,410
breaks doubling six times and one that

701
00:32:00,560 --> 00:32:05,389
<font color="#E5E5E5">breaks doubling seven times you send all</font>

702
00:32:03,410 --> 00:32:09,200
<font color="#E5E5E5">three and you look at which</font><font color="#CCCCCC"> ones break</font>

703
00:32:05,390 --> 00:32:11,690
if<font color="#CCCCCC"> they all three break</font><font color="#E5E5E5"> if 12 if only</font>

704
00:32:09,200 --> 00:32:14,810
<font color="#E5E5E5">two of them break it's six if only one</font>

705
00:32:11,690 --> 00:32:16,370
breaks is three it's even harder than

706
00:32:14,810 --> 00:32:18,590
this because<font color="#E5E5E5"> the next thing might be</font>

707
00:32:16,370 --> 00:32:20,629
<font color="#CCCCCC">zero and more doubles might happen but</font>

708
00:32:18,590 --> 00:32:23,570
<font color="#CCCCCC">that gets less and</font><font color="#E5E5E5"> less likely the more</font>

709
00:32:20,630 --> 00:32:25,550
<font color="#E5E5E5">zeroes you string so I'm not suggesting</font>

710
00:32:23,570 --> 00:32:29,450
adding<font color="#E5E5E5"> zeroes at the top of your private</font>

711
00:32:25,550 --> 00:32:32,090
key<font color="#E5E5E5"> to defend against this attack but</font>

712
00:32:29,450 --> 00:32:36,200
eventually you you come<font color="#E5E5E5"> to a pretty</font>

713
00:32:32,090 --> 00:32:37,280
certain<font color="#CCCCCC"> about the first limbs and the</font>

714
00:32:36,200 --> 00:32:39,920
good thing is that<font color="#CCCCCC"> you can pre-compute</font>

715
00:32:37,280 --> 00:32:41,899
these these don't depend<font color="#E5E5E5"> on anything</font>

716
00:32:39,920 --> 00:32:43,340
<font color="#E5E5E5">don't require you to adapt on any</font>

717
00:32:41,900 --> 00:32:45,980
previous limbs because those are the

718
00:32:43,340 --> 00:32:48,020
<font color="#CCCCCC">first so we can pre generate these and</font>

719
00:32:45,980 --> 00:32:52,400
have them<font color="#CCCCCC"> forever and</font><font color="#E5E5E5"> all the cats we</font>

720
00:32:48,020 --> 00:32:54,680
can use them so we now know<font color="#E5E5E5"> how to start</font>

721
00:32:52,400 --> 00:32:57,200
and how<font color="#E5E5E5"> to proceed</font><font color="#CCCCCC"> we can recover the</font>

722
00:32:54,680 --> 00:32:58,550
<font color="#CCCCCC">entire key and I</font><font color="#E5E5E5"> can see</font><font color="#CCCCCC"> you're tired so</font>

723
00:32:57,200 --> 00:33:01,520
for a<font color="#E5E5E5"> change of pace we're just going to</font>

724
00:32:58,550 --> 00:33:06,020
<font color="#E5E5E5">chat about kangaroos now aren't they</font>

725
00:33:01,520 --> 00:33:09,830
cute<font color="#CCCCCC"> but where are we</font><font color="#E5E5E5"> going to use</font>

726
00:33:06,020 --> 00:33:12,170
kangaroos to finish the attack<font color="#E5E5E5"> so we're</font>

727
00:33:09,830 --> 00:33:14,330
going<font color="#CCCCCC"> to use again</font><font color="#E5E5E5"> the polar kangaroo</font>

728
00:33:12,170 --> 00:33:16,820
attack<font color="#E5E5E5"> to find the last bits of the key</font>

729
00:33:14,330 --> 00:33:19,429
<font color="#CCCCCC">we could just run the auricle until the</font>

730
00:33:16,820 --> 00:33:20,418
end but this makes it much<font color="#CCCCCC"> faster and</font>

731
00:33:19,430 --> 00:33:24,799
more importantly

732
00:33:20,419 --> 00:33:27,859
<font color="#E5E5E5">to find the result of line it's optional</font>

733
00:33:24,799 --> 00:33:31,549
but<font color="#E5E5E5"> it's fun to learn about it's also</font>

734
00:33:27,859 --> 00:33:34,460
fun<font color="#CCCCCC"> because now I had an</font><font color="#E5E5E5"> Australian</font>

735
00:33:31,549 --> 00:33:37,100
<font color="#E5E5E5">dispute this but Pollard in a</font>

736
00:33:34,460 --> 00:33:39,309
cryptography paper<font color="#E5E5E5"> maintains that</font><font color="#CCCCCC"> this</font>

737
00:33:37,100 --> 00:33:43,969
is true<font color="#E5E5E5"> and I'm not</font><font color="#CCCCCC"> arguing with Pollard</font>

738
00:33:39,309 --> 00:33:47,299
so apparently<font color="#E5E5E5"> kangaroos jump</font><font color="#CCCCCC"> based on</font>

739
00:33:43,970 --> 00:33:49,639
the ground<font color="#E5E5E5"> on under their feet in the</font>

740
00:33:47,299 --> 00:33:51,230
point where they're jumping from so if

741
00:33:49,639 --> 00:33:53,479
you put two<font color="#CCCCCC"> kangaroos in</font><font color="#E5E5E5"> the same spot</font>

742
00:33:51,230 --> 00:33:57,320
they will jump<font color="#E5E5E5"> in the same direction and</font>

743
00:33:53,480 --> 00:34:00,499
at the same distance<font color="#E5E5E5"> how do you use this</font>

744
00:33:57,320 --> 00:34:03,139
because well what if you have to catch

745
00:34:00,499 --> 00:34:05,090
kangaroos<font color="#E5E5E5"> you had some times to catch a</font>

746
00:34:03,139 --> 00:34:08,179
kangaroo<font color="#CCCCCC"> right that's annoying</font>

747
00:34:05,090 --> 00:34:09,889
<font color="#E5E5E5">so what you do is that you</font><font color="#CCCCCC"> take a ten</font>

748
00:34:08,179 --> 00:34:11,599
kangaroo which of course<font color="#E5E5E5"> you have laying</font>

749
00:34:09,889 --> 00:34:15,169
around because<font color="#E5E5E5"> you have a ten kangaroo</font>

750
00:34:11,599 --> 00:34:17,720
<font color="#E5E5E5">and you put a GPS</font><font color="#CCCCCC"> tracker on</font><font color="#E5E5E5"> it and you</font>

751
00:34:15,168 --> 00:34:20,388
let it<font color="#E5E5E5"> loose it jumps a lot it makes a</font>

752
00:34:17,719 --> 00:34:22,609
lot<font color="#E5E5E5"> of footprints and eventually it you</font>

753
00:34:20,389 --> 00:34:24,619
go pick it up<font color="#CCCCCC"> it made a lot of jumps</font><font color="#E5E5E5"> and</font>

754
00:34:22,609 --> 00:34:26,119
<font color="#E5E5E5">you go pick it up the kangaroo and in</font>

755
00:34:24,619 --> 00:34:29,960
place<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the kangaroo</font><font color="#CCCCCC"> where you found</font>

756
00:34:26,119 --> 00:34:33,829
<font color="#CCCCCC">that you put a trap right</font><font color="#E5E5E5"> there then a</font>

757
00:34:29,960 --> 00:34:35,690
wild kangaroos hopping around now it's

758
00:34:33,829 --> 00:34:38,659
very unlikely that the wild kangaroo

759
00:34:35,690 --> 00:34:40,450
will step into the trap right<font color="#CCCCCC"> but it's</font>

760
00:34:38,659 --> 00:34:43,010
more likely that<font color="#E5E5E5"> will step into the</font>

761
00:34:40,449 --> 00:34:44,750
<font color="#E5E5E5">footprints of the while the same</font>

762
00:34:43,010 --> 00:34:47,750
kangaroo because it left<font color="#E5E5E5"> a lot of those</font>

763
00:34:44,750 --> 00:34:49,849
and<font color="#E5E5E5"> we know that if it steps in the same</font>

764
00:34:47,750 --> 00:34:52,339
spot it will keep<font color="#E5E5E5"> jump in the same way</font>

765
00:34:49,849 --> 00:34:54,829
from<font color="#E5E5E5"> there on and so eventually it will</font>

766
00:34:52,339 --> 00:34:57,319
end up<font color="#E5E5E5"> in the trap so this is how you</font>

767
00:34:54,829 --> 00:35:00,650
catch kangaroos and that was it that<font color="#CCCCCC"> was</font>

768
00:34:57,319 --> 00:35:01,759
<font color="#CCCCCC">the end of talk like that that's it but</font>

769
00:35:00,650 --> 00:35:04,160
if you really<font color="#CCCCCC"> want to use it for</font>

770
00:35:01,760 --> 00:35:07,400
<font color="#E5E5E5">elliptic curve cryptography</font><font color="#CCCCCC"> you just</font>

771
00:35:04,160 --> 00:35:10,819
have<font color="#E5E5E5"> to define how a jump is defined in</font>

772
00:35:07,400 --> 00:35:13,579
an elliptic curve<font color="#E5E5E5"> now we can define</font><font color="#CCCCCC"> it</font>

773
00:35:10,819 --> 00:35:17,119
by taking<font color="#E5E5E5"> a point hashing it and adding</font>

774
00:35:13,579 --> 00:35:20,540
it to<font color="#E5E5E5"> itself this operation</font><font color="#CCCCCC"> Q n plus 1</font>

775
00:35:17,119 --> 00:35:23,030
will depend only on Q<font color="#E5E5E5"> n so it has it has</font>

776
00:35:20,540 --> 00:35:25,040
<font color="#E5E5E5">the property</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> kangaroo jump that</font>

777
00:35:23,030 --> 00:35:27,170
it only depends<font color="#CCCCCC"> on the starting</font><font color="#E5E5E5"> point</font>

778
00:35:25,040 --> 00:35:31,509
<font color="#E5E5E5">the next</font><font color="#CCCCCC"> that depends</font><font color="#E5E5E5"> on the starting</font>

779
00:35:27,170 --> 00:35:35,170
<font color="#CCCCCC">point of the point a lot</font><font color="#E5E5E5"> of points</font>

780
00:35:31,510 --> 00:35:40,990
so we use this to<font color="#CCCCCC"> catch kangaroos</font><font color="#E5E5E5"> by to</font>

781
00:35:35,170 --> 00:35:43,119
catch to find<font color="#E5E5E5"> private keys</font><font color="#CCCCCC"> by taking a</font>

782
00:35:40,990 --> 00:35:45,368
<font color="#CCCCCC">team</font><font color="#E5E5E5"> point</font><font color="#CCCCCC"> at endpoint is</font><font color="#E5E5E5"> one we know</font>

783
00:35:43,119 --> 00:35:48,730
<font color="#E5E5E5">the private key</font><font color="#CCCCCC"> off and we make it do a</font>

784
00:35:45,369 --> 00:35:50,800
lot of<font color="#E5E5E5"> jumps and then we only save</font><font color="#CCCCCC"> the</font>

785
00:35:48,730 --> 00:35:52,900
final<font color="#E5E5E5"> position we don't</font><font color="#CCCCCC"> save all the</font>

786
00:35:50,800 --> 00:35:55,090
intermediate<font color="#CCCCCC"> states we save the</font><font color="#E5E5E5"> final</font>

787
00:35:52,900 --> 00:35:57,820
position<font color="#CCCCCC"> and how much distance the</font>

788
00:35:55,090 --> 00:36:00,700
private key has traveled effectively<font color="#E5E5E5"> to</font>

789
00:35:57,820 --> 00:36:02,590
<font color="#E5E5E5">get there and then we take the point we</font>

790
00:36:00,700 --> 00:36:04,839
<font color="#E5E5E5">don't</font><font color="#CCCCCC"> know the</font><font color="#E5E5E5"> private key off and we</font>

791
00:36:02,590 --> 00:36:06,940
run it a bunch<font color="#E5E5E5"> we do the same thing we</font>

792
00:36:04,840 --> 00:36:09,550
hope that it will intersect<font color="#CCCCCC"> at some</font>

793
00:36:06,940 --> 00:36:12,010
<font color="#E5E5E5">point with the chain that the previous</font>

794
00:36:09,550 --> 00:36:14,080
that the team wanted<font color="#E5E5E5"> and if it does it</font>

795
00:36:12,010 --> 00:36:17,920
will end up<font color="#E5E5E5"> in the trap by ending up</font>

796
00:36:14,080 --> 00:36:20,319
exactly<font color="#CCCCCC"> the</font><font color="#E5E5E5"> same as the chain that we</font>

797
00:36:17,920 --> 00:36:22,300
started<font color="#E5E5E5"> from</font><font color="#CCCCCC"> a known point</font><font color="#E5E5E5"> since we</font><font color="#CCCCCC"> know</font>

798
00:36:20,320 --> 00:36:25,150
where the chain ends and we know how far

799
00:36:22,300 --> 00:36:28,840
the wild point<font color="#CCCCCC"> traveled</font><font color="#E5E5E5"> we can backtrack</font>

800
00:36:25,150 --> 00:36:30,760
<font color="#CCCCCC">and we find the private key now this is</font>

801
00:36:28,840 --> 00:36:33,609
<font color="#CCCCCC">actually evolved algorithm to</font><font color="#E5E5E5"> find</font>

802
00:36:30,760 --> 00:36:35,680
private<font color="#E5E5E5"> keys for full-fledged attacks</font>

803
00:36:33,609 --> 00:36:39,580
<font color="#E5E5E5">but of course you can't apply it against</font>

804
00:36:35,680 --> 00:36:40,509
a<font color="#E5E5E5"> 256-bit key because again had heat</font>

805
00:36:39,580 --> 00:36:43,150
death of the universe

806
00:36:40,510 --> 00:36:45,520
<font color="#CCCCCC">yada-yada</font><font color="#E5E5E5"> but the advantage of this</font>

807
00:36:43,150 --> 00:36:47,950
attack is<font color="#E5E5E5"> that if you know that the</font>

808
00:36:45,520 --> 00:36:50,590
private key lies in<font color="#E5E5E5"> a range it's as if</font>

809
00:36:47,950 --> 00:36:53,259
you knew that<font color="#CCCCCC"> the wild kangaroo is an is</font>

810
00:36:50,590 --> 00:36:56,020
in an area<font color="#E5E5E5"> and if too much time passes</font>

811
00:36:53,260 --> 00:36:58,660
<font color="#E5E5E5">it probably escaped and you can start</font>

812
00:36:56,020 --> 00:37:00,990
<font color="#E5E5E5">over so this is useful when</font><font color="#CCCCCC"> you know</font>

813
00:36:58,660 --> 00:37:03,399
that the private key lies<font color="#CCCCCC"> in a range</font><font color="#E5E5E5"> and</font>

814
00:37:00,990 --> 00:37:05,859
we know that the private key lies in a

815
00:37:03,400 --> 00:37:07,900
range when we<font color="#E5E5E5"> know a bunch of limbs</font>

816
00:37:05,859 --> 00:37:10,119
already<font color="#E5E5E5"> and we just</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> know how the</font>

817
00:37:07,900 --> 00:37:12,790
number finishes it will have to<font color="#E5E5E5"> be</font>

818
00:37:10,119 --> 00:37:15,250
<font color="#E5E5E5">between the non limbs and zero and the</font>

819
00:37:12,790 --> 00:37:17,740
known limbs at<font color="#E5E5E5"> 32 so that's a range and</font>

820
00:37:15,250 --> 00:37:19,390
<font color="#E5E5E5">this is a more efficient attack as well</font>

821
00:37:17,740 --> 00:37:21,399
<font color="#E5E5E5">I didn't make this up and it comes from</font>

822
00:37:19,390 --> 00:37:24,520
the same paper from which the raw<font color="#E5E5E5"> attack</font>

823
00:37:21,400 --> 00:37:28,480
comes which is the attack<font color="#E5E5E5"> to find</font>

824
00:37:24,520 --> 00:37:31,200
private<font color="#E5E5E5"> keys so now that we know how to</font>

825
00:37:28,480 --> 00:37:37,660
start how<font color="#CCCCCC"> to proceed</font><font color="#E5E5E5"> and how to end</font>

826
00:37:31,200 --> 00:37:39,700
<font color="#CCCCCC">we're just in a</font><font color="#E5E5E5"> target now we as I told</font>

827
00:37:37,660 --> 00:37:41,710
you<font color="#E5E5E5"> you only use elliptic curve</font>

828
00:37:39,700 --> 00:37:44,259
diffie-hellman<font color="#CCCCCC"> in a femoral static way</font>

829
00:37:41,710 --> 00:37:45,220
where the one private<font color="#E5E5E5"> key is fixed if</font>

830
00:37:44,260 --> 00:37:48,070
you're extremely

831
00:37:45,220 --> 00:37:51,580
brave<font color="#E5E5E5"> and we know that</font><font color="#CCCCCC"> usually</font>

832
00:37:48,070 --> 00:37:53,380
cryptographers shouldn't be brave<font color="#E5E5E5"> but we</font>

833
00:37:51,580 --> 00:37:55,660
also know that<font color="#CCCCCC"> sometimes programmers</font>

834
00:37:53,380 --> 00:37:58,090
<font color="#CCCCCC">come</font><font color="#E5E5E5"> and they're like man I want more</font>

835
00:37:55,660 --> 00:38:00,129
choice<font color="#CCCCCC"> I want to be able to use any</font>

836
00:37:58,090 --> 00:38:02,380
primitive<font color="#CCCCCC"> I want and I want to be able</font>

837
00:38:00,130 --> 00:38:04,630
<font color="#CCCCCC">to combine them</font><font color="#E5E5E5"> however I want and I</font>

838
00:38:02,380 --> 00:38:06,490
<font color="#CCCCCC">want to have to</font><font color="#E5E5E5"> choose them and I don't</font>

839
00:38:04,630 --> 00:38:08,890
<font color="#E5E5E5">want</font><font color="#CCCCCC"> you to give me any guidance</font><font color="#E5E5E5"> about</font>

840
00:38:06,490 --> 00:38:10,660
<font color="#E5E5E5">which ones to use because I'm a mature</font>

841
00:38:08,890 --> 00:38:15,400
adult programmer<font color="#E5E5E5"> and I'm going to use</font>

842
00:38:10,660 --> 00:38:18,368
what I want so<font color="#E5E5E5"> josy was built based</font><font color="#CCCCCC"> on</font>

843
00:38:15,400 --> 00:38:21,369
that understanding<font color="#E5E5E5"> and it allows you to</font>

844
00:38:18,369 --> 00:38:23,140
<font color="#E5E5E5">use anything including a</font><font color="#CCCCCC"> lipstick curve</font>

845
00:38:21,369 --> 00:38:26,050
diffie-hellman in<font color="#CCCCCC"> a femoral static or</font>

846
00:38:23,140 --> 00:38:28,480
air mode<font color="#E5E5E5"> now if you couldn't tell I was</font>

847
00:38:26,050 --> 00:38:32,859
sarcastic<font color="#CCCCCC"> and friends</font><font color="#E5E5E5"> don't let friends</font>

848
00:38:28,480 --> 00:38:36,820
use<font color="#E5E5E5"> Josie and</font><font color="#CCCCCC"> JW tees but people</font><font color="#E5E5E5"> still</font>

849
00:38:32,859 --> 00:38:39,250
<font color="#E5E5E5">use them so we just find ourselves off</font>

850
00:38:36,820 --> 00:38:43,090
the shelf<font color="#CCCCCC"> go implementation</font><font color="#E5E5E5"> this is no</font>

851
00:38:39,250 --> 00:38:44,349
fault of their own<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> check that</font><font color="#E5E5E5"> it</font>

852
00:38:43,090 --> 00:38:45,910
does support<font color="#E5E5E5"> elliptic curve</font>

853
00:38:44,349 --> 00:38:47,320
diffie-hellman in the femoral static way

854
00:38:45,910 --> 00:38:50,649
because of<font color="#E5E5E5"> course it does</font>

855
00:38:47,320 --> 00:38:52,900
<font color="#E5E5E5">and we build it with a vulnerable</font>

856
00:38:50,650 --> 00:38:54,849
<font color="#E5E5E5">version of go maybe the last one</font><font color="#CCCCCC"> before</font>

857
00:38:52,900 --> 00:38:56,589
<font color="#CCCCCC">the patch was applied and we</font><font color="#E5E5E5"> bought</font>

858
00:38:54,849 --> 00:38:58,930
<font color="#CCCCCC">guild a small service something</font><font color="#E5E5E5"> that</font>

859
00:38:56,589 --> 00:39:02,109
publishes its public key and accepts

860
00:38:58,930 --> 00:39:04,029
encrypted messages<font color="#E5E5E5"> and there will be a</font>

861
00:39:02,109 --> 00:39:06,609
<font color="#CCCCCC">dealer timing</font><font color="#E5E5E5"> difference or</font><font color="#CCCCCC"> an error</font>

862
00:39:04,030 --> 00:39:09,310
difference between this does not decrypt

863
00:39:06,609 --> 00:39:11,980
and these<font color="#E5E5E5"> the</font><font color="#CCCCCC"> crypts</font><font color="#E5E5E5"> but I don't know</font>

864
00:39:09,310 --> 00:39:14,470
what you sent me so that's<font color="#E5E5E5"> our Oracle</font>

865
00:39:11,980 --> 00:39:16,330
<font color="#CCCCCC">this does not decrypt trigger the</font><font color="#E5E5E5"> bug</font>

866
00:39:14,470 --> 00:39:18,240
this is the crypts but I don't know what

867
00:39:16,330 --> 00:39:23,319
what's in it<font color="#E5E5E5"> did not trigger the back</font>

868
00:39:18,240 --> 00:39:25,479
<font color="#E5E5E5">and we just use</font><font color="#CCCCCC"> that to</font><font color="#E5E5E5"> build our</font>

869
00:39:23,320 --> 00:39:29,890
adaptive attack and we<font color="#CCCCCC"> recover the</font>

870
00:39:25,480 --> 00:39:32,589
<font color="#E5E5E5">entire</font><font color="#CCCCCC"> key we have to rebuild</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> and</font>

871
00:39:29,890 --> 00:39:34,868
we built us with the infrastructure

872
00:39:32,589 --> 00:39:37,029
where the there's a small dispatcher

873
00:39:34,869 --> 00:39:40,000
program running on a laptop or anything

874
00:39:37,030 --> 00:39:42,700
<font color="#E5E5E5">maybe with an</font><font color="#CCCCCC"> grok exposed</font><font color="#E5E5E5"> it runs a</font>

875
00:39:40,000 --> 00:39:46,119
HTTP server with two<font color="#E5E5E5"> endpoints work</font>

876
00:39:42,700 --> 00:39:50,259
<font color="#E5E5E5">which allows a pool</font><font color="#CCCCCC"> of workers to ask ok</font>

877
00:39:46,119 --> 00:39:52,420
<font color="#E5E5E5">what should</font><font color="#CCCCCC"> I fast next</font><font color="#E5E5E5"> and then resolve</font>

878
00:39:50,260 --> 00:39:56,109
which is for when hey I found a useful

879
00:39:52,420 --> 00:39:58,960
<font color="#E5E5E5">point here is it it has a short timeout</font>

880
00:39:56,109 --> 00:40:00,520
<font color="#E5E5E5">so if someone else finds the</font>

881
00:39:58,960 --> 00:40:03,460
if you<font color="#E5E5E5"> find the limp and you want to</font>

882
00:40:00,520 --> 00:40:06,339
<font color="#E5E5E5">move on to the next limb all the workers</font>

883
00:40:03,460 --> 00:40:08,440
will check in soon<font color="#CCCCCC"> to figure out more</font>

884
00:40:06,339 --> 00:40:11,410
work<font color="#E5E5E5"> and the workers can</font><font color="#CCCCCC"> be anything</font>

885
00:40:08,440 --> 00:40:13,359
<font color="#E5E5E5">they can be cloud instances</font><font color="#CCCCCC"> potty</font>

886
00:40:11,410 --> 00:40:16,328
<font color="#CCCCCC">assistants preemptable instances</font>

887
00:40:13,359 --> 00:40:18,250
<font color="#E5E5E5">baldness instances whatever you like</font>

888
00:40:16,329 --> 00:40:19,210
<font color="#E5E5E5">they just have to be able to connect</font><font color="#CCCCCC"> to</font>

889
00:40:18,250 --> 00:40:22,089
an<font color="#CCCCCC"> HTP endpoint</font>

890
00:40:19,210 --> 00:40:24,430
<font color="#CCCCCC">ask for</font><font color="#E5E5E5"> work and do</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> work</font><font color="#CCCCCC"> so this</font>

891
00:40:22,089 --> 00:40:28,599
scales horizontally as much as you want

892
00:40:24,430 --> 00:40:31,000
<font color="#E5E5E5">and it allowed us</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do the attack from</font>

893
00:40:28,599 --> 00:40:34,089
top to bottom<font color="#E5E5E5"> for a full</font><font color="#CCCCCC"> recovery of</font><font color="#E5E5E5"> the</font>

894
00:40:31,000 --> 00:40:36,280
key<font color="#E5E5E5"> so here are some numbers for each</font>

895
00:40:34,089 --> 00:40:39,250
key there are 52 limbs ignoring the

896
00:40:36,280 --> 00:40:41,410
<font color="#CCCCCC">kangaroos</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> each limb there you will</font>

897
00:40:39,250 --> 00:40:44,470
<font color="#E5E5E5">need on average 16 points before</font><font color="#CCCCCC"> your</font>

898
00:40:41,410 --> 00:40:49,180
you strike the right one and each point

899
00:40:44,470 --> 00:40:53,339
requires about<font color="#CCCCCC"> 2 to the</font><font color="#E5E5E5"> 26 tries to find</font>

900
00:40:49,180 --> 00:40:57,460
a candidate point so about every<font color="#CCCCCC"> limb is</font>

901
00:40:53,339 --> 00:40:59,890
85 CPU hours which clocks<font color="#E5E5E5"> the entire</font>

902
00:40:57,460 --> 00:41:03,490
attack at less than<font color="#CCCCCC"> 5,000 CPU hours</font>

903
00:40:59,890 --> 00:41:06,970
<font color="#E5E5E5">which you can buy from the cloud for</font>

904
00:41:03,490 --> 00:41:11,439
less<font color="#E5E5E5"> than 50 bucks so you can run the</font>

905
00:41:06,970 --> 00:41:14,680
<font color="#CCCCCC">attack and it will take about 800 and</font>

906
00:41:11,440 --> 00:41:18,180
spare<font color="#CCCCCC"> Kyrie's to the Oracle less if you</font>

907
00:41:14,680 --> 00:41:21,310
have a lot of<font color="#CCCCCC"> Kangaroos and 50 bucks</font><font color="#E5E5E5"> in</font>

908
00:41:18,180 --> 00:41:23,950
offline computation and<font color="#CCCCCC"> you will have</font>

909
00:41:21,310 --> 00:41:26,020
the key<font color="#CCCCCC"> so now we're gonna have a live</font>

910
00:41:23,950 --> 00:41:29,368
<font color="#E5E5E5">demo</font><font color="#CCCCCC"> in which I'm going to attack a live</font>

911
00:41:26,020 --> 00:41:31,630
running server from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> conference Wi-Fi</font>

912
00:41:29,369 --> 00:41:33,880
<font color="#CCCCCC">you know of course I'm kidding</font>

913
00:41:31,630 --> 00:41:36,099
I am<font color="#CCCCCC"> not that brave instead we're gonna</font>

914
00:41:33,880 --> 00:41:40,780
have a recording<font color="#E5E5E5"> of exactly that</font>

915
00:41:36,099 --> 00:41:43,839
happening<font color="#CCCCCC"> this is a UI built by</font><font color="#E5E5E5"> Shawn</font>

916
00:41:40,780 --> 00:41:46,390
where you can see each remaining

917
00:41:43,839 --> 00:41:48,339
candidate for the next<font color="#CCCCCC"> limb and you read</font>

918
00:41:46,390 --> 00:41:50,740
all the candidates that<font color="#E5E5E5"> we found</font><font color="#CCCCCC"> the</font>

919
00:41:48,339 --> 00:41:53,078
point<font color="#E5E5E5"> for and we sent it and it was not</font>

920
00:41:50,740 --> 00:41:55,149
the right one and in green the ones that

921
00:41:53,079 --> 00:41:59,680
we sent and it did<font color="#CCCCCC"> cross</font><font color="#E5E5E5"> the bag so we</font>

922
00:41:55,150 --> 00:42:02,589
know<font color="#CCCCCC"> that that's</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> limb it's sped up</font>

923
00:41:59,680 --> 00:42:05,348
yes I'm cheating<font color="#E5E5E5"> as I said not</font><font color="#CCCCCC"> that</font>

924
00:42:02,589 --> 00:42:08,890
brave and also you don't<font color="#CCCCCC"> have the time</font>

925
00:42:05,349 --> 00:42:11,460
<font color="#CCCCCC">to stay here and see it</font><font color="#E5E5E5"> but would you</font>

926
00:42:08,890 --> 00:42:12,970
now<font color="#E5E5E5"> what's beautiful about this</font>

927
00:42:11,460 --> 00:42:14,920
specifically sped<font color="#E5E5E5"> up</font>

928
00:42:12,970 --> 00:42:18,129
<font color="#E5E5E5">is that you know how to's Hollywood</font>

929
00:42:14,920 --> 00:42:19,810
movies that depict<font color="#E5E5E5"> hacking in all the</font>

930
00:42:18,130 --> 00:42:21,970
<font color="#E5E5E5">wrong</font><font color="#CCCCCC"> ways and there are these people</font>

931
00:42:19,810 --> 00:42:23,859
with<font color="#CCCCCC"> these UIs</font><font color="#E5E5E5"> where the numbers spin</font>

932
00:42:21,970 --> 00:42:25,839
very fast and then it finds one and

933
00:42:23,859 --> 00:42:27,430
moves to the<font color="#CCCCCC"> next</font><font color="#E5E5E5"> one and then finds</font>

934
00:42:25,840 --> 00:42:29,530
that and move to<font color="#CCCCCC"> next</font><font color="#E5E5E5"> one and we were</font>

935
00:42:27,430 --> 00:42:37,710
like that's absolutely<font color="#E5E5E5"> Porsche that's</font>

936
00:42:29,530 --> 00:42:40,000
<font color="#E5E5E5">not how any of</font><font color="#CCCCCC"> that works there isn't a</font>

937
00:42:37,710 --> 00:42:42,130
<font color="#E5E5E5">cryptographers get into adaptive attacks</font>

938
00:42:40,000 --> 00:42:44,650
<font color="#E5E5E5">it's not the papers it's that you can</font>

939
00:42:42,130 --> 00:42:50,650
build these<font color="#CCCCCC"> you eyes</font><font color="#E5E5E5"> look</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> the key at</font>

940
00:42:44,650 --> 00:42:52,960
the bottom slowly being stopped<font color="#CCCCCC"> Hey look</font>

941
00:42:50,650 --> 00:42:55,540
<font color="#E5E5E5">at the kid at the bottom slowly rolling</font>

942
00:42:52,960 --> 00:42:59,369
and appearing more and more as more bits

943
00:42:55,540 --> 00:43:02,080
are figured out so yes<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> beautiful</font>

944
00:42:59,369 --> 00:43:03,640
now<font color="#E5E5E5"> we could stay here</font><font color="#CCCCCC"> stare at the</font><font color="#E5E5E5"> dima</font>

945
00:43:02,080 --> 00:43:10,660
for a little while<font color="#CCCCCC"> I love</font><font color="#E5E5E5"> it you</font>

946
00:43:03,640 --> 00:43:12,848
probably<font color="#E5E5E5"> don't so moving on what</font><font color="#CCCCCC"> so in</font>

947
00:43:10,660 --> 00:43:15,250
real time<font color="#E5E5E5"> this really depends on how</font>

948
00:43:12,849 --> 00:43:19,260
<font color="#CCCCCC">many workers</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> have which depends</font><font color="#E5E5E5"> on</font>

949
00:43:15,250 --> 00:43:22,510
how brave you are<font color="#CCCCCC"> because you have to</font>

950
00:43:19,260 --> 00:43:24,700
decide on one<font color="#CCCCCC"> side it will make it</font>

951
00:43:22,510 --> 00:43:26,710
faster and<font color="#CCCCCC"> save me time from my life on</font>

952
00:43:24,700 --> 00:43:29,470
the<font color="#E5E5E5"> other side if I forget</font><font color="#CCCCCC"> to turn them</font>

953
00:43:26,710 --> 00:43:33,330
off that's<font color="#E5E5E5"> going to cost me a fortune</font>

954
00:43:29,470 --> 00:43:36,430
<font color="#E5E5E5">so this one took a few hours</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> think</font><font color="#CCCCCC"> 12</font>

955
00:43:33,330 --> 00:43:38,650
<font color="#E5E5E5">with doubled workers who have taken</font><font color="#CCCCCC"> 6</font>

956
00:43:36,430 --> 00:43:40,270
with double it would probably<font color="#E5E5E5"> have</font><font color="#CCCCCC"> taken</font>

957
00:43:38,650 --> 00:43:45,730
down by someone<font color="#E5E5E5"> thinking it was mining</font>

958
00:43:40,270 --> 00:43:48,040
bitcoins so now as I<font color="#CCCCCC"> told you when I</font>

959
00:43:45,730 --> 00:43:50,260
<font color="#E5E5E5">when we started</font><font color="#CCCCCC"> I was not at Google at</font>

960
00:43:48,040 --> 00:43:52,180
<font color="#CCCCCC">the time I am now at Google I'm now on</font>

961
00:43:50,260 --> 00:43:54,010
the<font color="#E5E5E5"> go team and I now own the</font>

962
00:43:52,180 --> 00:43:57,270
cryptography libraries in<font color="#CCCCCC"> the NGO</font>

963
00:43:54,010 --> 00:44:00,310
<font color="#E5E5E5">project so now</font><font color="#CCCCCC"> this is my problem so</font>

964
00:43:57,270 --> 00:44:01,720
<font color="#CCCCCC">here's the new policy on what you need</font>

965
00:44:00,310 --> 00:44:04,509
<font color="#E5E5E5">to do before</font><font color="#CCCCCC"> we will accept</font><font color="#E5E5E5"> your</font>

966
00:44:01,720 --> 00:44:07,720
assembly from<font color="#E5E5E5"> now on and you know it's</font>

967
00:44:04,510 --> 00:44:09,849
pretty obvious staff<font color="#E5E5E5"> like we prefer go</font>

968
00:44:07,720 --> 00:44:12,459
<font color="#E5E5E5">so if we can make</font><font color="#CCCCCC"> the compiler faster</font>

969
00:44:09,849 --> 00:44:14,859
for<font color="#E5E5E5"> you tell us and</font><font color="#CCCCCC"> write go that is</font>

970
00:44:12,460 --> 00:44:16,780
easier<font color="#E5E5E5"> to to review because let's a</font>

971
00:44:14,859 --> 00:44:20,080
knowledge it<font color="#CCCCCC"> assembly is hard to write</font>

972
00:44:16,780 --> 00:44:21,880
and it's hard<font color="#E5E5E5"> to review and then if you</font>

973
00:44:20,080 --> 00:44:25,359
have to write it assembly tell us why

974
00:44:21,880 --> 00:44:26,500
and then test it well test it into small

975
00:44:25,359 --> 00:44:29,529
chunks because<font color="#E5E5E5"> this</font>

976
00:44:26,500 --> 00:44:31,810
function<font color="#E5E5E5"> tested individually was easy to</font>

977
00:44:29,530 --> 00:44:35,620
detect but tested in the<font color="#CCCCCC"> hole if we've</font>

978
00:44:31,810 --> 00:44:37,210
taken<font color="#E5E5E5"> forever and connected</font><font color="#CCCCCC"> to give us</font>

979
00:44:35,620 --> 00:44:38,980
<font color="#CCCCCC">thousand hooks so</font><font color="#E5E5E5"> that we can</font><font color="#CCCCCC"> false</font>

980
00:44:37,210 --> 00:44:41,800
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> and we're in the process</font><font color="#E5E5E5"> of</font>

981
00:44:38,980 --> 00:44:46,990
cleaning this up so hopefully<font color="#E5E5E5"> this does</font>

982
00:44:41,800 --> 00:44:51,610
not happen<font color="#CCCCCC"> again</font><font color="#E5E5E5"> now in closing if you</font>

983
00:44:46,990 --> 00:44:54,220
liked<font color="#E5E5E5"> this talk you probably also like</font>

984
00:44:51,610 --> 00:44:56,680
the<font color="#E5E5E5"> crypto house the crypto challenges I</font>

985
00:44:54,220 --> 00:45:00,399
told you at the beginning<font color="#E5E5E5"> and here's a</font>

986
00:44:56,680 --> 00:45:02,620
<font color="#CCCCCC">three if</font><font color="#E5E5E5"> you followed this talk you have</font>

987
00:45:00,400 --> 00:45:05,350
a head start<font color="#CCCCCC"> for the latest crypto</font>

988
00:45:02,620 --> 00:45:07,390
<font color="#CCCCCC">powerset written by shawn literally on</font>

989
00:45:05,350 --> 00:45:10,839
the plane<font color="#E5E5E5"> over here dropping</font>

990
00:45:07,390 --> 00:45:16,680
<font color="#CCCCCC">hot-off-the-press</font><font color="#E5E5E5"> dropping right now</font><font color="#CCCCCC"> if</font>

991
00:45:10,840 --> 00:45:19,750
<font color="#CCCCCC">ssh was working so that's the URL</font><font color="#E5E5E5"> and</font>

992
00:45:16,680 --> 00:45:22,509
finally everybody<font color="#E5E5E5"> took a picture I'm</font>

993
00:45:19,750 --> 00:45:24,730
<font color="#E5E5E5">gonna wait for you yes you yes</font><font color="#CCCCCC"> no stress</font>

994
00:45:22,510 --> 00:45:28,620
don't worry<font color="#CCCCCC"> no don't worry yes we were</font>

995
00:45:24,730 --> 00:45:31,540
<font color="#CCCCCC">just all waiting for</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> but in</font><font color="#E5E5E5"> closing</font>

996
00:45:28,620 --> 00:45:33,730
thank you very much and as uma<font color="#E5E5E5"> Thurman</font>

997
00:45:31,540 --> 00:45:35,590
said in Kill Bill<font color="#CCCCCC"> leave the limbs you</font>

998
00:45:33,730 --> 00:45:37,700
lost<font color="#E5E5E5"> those belong</font><font color="#CCCCCC"> to me and</font><font color="#E5E5E5"> Shawn now</font>

999
00:45:35,590 --> 00:45:46,630
<font color="#CCCCCC">and thank you</font><font color="#E5E5E5"> very much</font>

1000
00:45:37,700 --> 00:45:46,629
[Applause]

