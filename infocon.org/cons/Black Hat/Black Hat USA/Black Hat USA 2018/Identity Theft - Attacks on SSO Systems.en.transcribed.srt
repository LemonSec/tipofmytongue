1
00:00:00,000 --> 00:00:03,510
hello<font color="#E5E5E5"> I'm Cal B and today I'll be</font>

2
00:00:02,009 --> 00:00:05,699
<font color="#E5E5E5">talking about some</font><font color="#CCCCCC"> new classes of</font>

3
00:00:03,510 --> 00:00:07,379
<font color="#E5E5E5">vulnerabilities that</font><font color="#CCCCCC"> ice covered</font><font color="#E5E5E5"> earlier</font>

4
00:00:05,700 --> 00:00:09,780
this year<font color="#E5E5E5"> that affects single sign-on</font>

5
00:00:07,379 --> 00:00:11,428
systems<font color="#E5E5E5"> these vulnerabilities were</font>

6
00:00:09,780 --> 00:00:14,009
discovered<font color="#CCCCCC"> recently and pretty generally</font>

7
00:00:11,429 --> 00:00:15,900
applicable to<font color="#E5E5E5"> multiple systems</font><font color="#CCCCCC"> and in</font>

8
00:00:14,009 --> 00:00:17,850
some cases these vulnerabilities enable

9
00:00:15,900 --> 00:00:19,980
authentication bypasses and allow

10
00:00:17,850 --> 00:00:23,910
attackers<font color="#CCCCCC"> to pivot</font><font color="#E5E5E5"> from one user account</font>

11
00:00:19,980 --> 00:00:26,099
to<font color="#E5E5E5"> another so a quick thing about me</font>

12
00:00:23,910 --> 00:00:27,810
before<font color="#CCCCCC"> I dive into my research</font><font color="#E5E5E5"> um so my</font>

13
00:00:26,099 --> 00:00:30,090
professional<font color="#CCCCCC"> and research</font><font color="#E5E5E5"> interests are</font>

14
00:00:27,810 --> 00:00:31,919
in<font color="#E5E5E5"> cryptography mathematics and security</font>

15
00:00:30,090 --> 00:00:33,600
engineering so if you like those things

16
00:00:31,920 --> 00:00:36,840
<font color="#E5E5E5">feel free to check out my blog or</font>

17
00:00:33,600 --> 00:00:38,700
Twitter<font color="#CCCCCC"> I do</font><font color="#E5E5E5"> most of my time to spend as</font>

18
00:00:36,840 --> 00:00:40,590
<font color="#CCCCCC">a security advisor for a</font><font color="#E5E5E5"> product and</font>

19
00:00:38,700 --> 00:00:43,079
engineering<font color="#E5E5E5"> teams as well</font><font color="#CCCCCC"> as doing code</font>

20
00:00:40,590 --> 00:00:44,640
and system<font color="#CCCCCC"> design audits</font><font color="#E5E5E5"> and in fact the</font>

21
00:00:43,079 --> 00:00:46,140
research that<font color="#E5E5E5"> I'm presenting today was</font>

22
00:00:44,640 --> 00:00:49,980
<font color="#E5E5E5">originally</font><font color="#CCCCCC"> identified during</font><font color="#E5E5E5"> one of</font>

23
00:00:46,140 --> 00:00:52,110
these<font color="#E5E5E5"> internal audits so the goal today</font>

24
00:00:49,980 --> 00:00:54,538
is to<font color="#CCCCCC"> describe these classes of taxon</font>

25
00:00:52,110 --> 00:00:56,610
SSO and sam'l and how an<font color="#E5E5E5"> attacker could</font>

26
00:00:54,539 --> 00:00:58,710
exploit them<font color="#E5E5E5"> so at first I'll discuss</font>

27
00:00:56,610 --> 00:01:00,989
sam'l at<font color="#CCCCCC"> a high level</font><font color="#E5E5E5"> so we're along the</font>

28
00:00:58,710 --> 00:01:02,730
same page<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the mechanisms that enable</font>

29
00:01:00,989 --> 00:01:04,619
these vulnerabilities<font color="#E5E5E5"> and then from</font>

30
00:01:02,730 --> 00:01:08,700
there I'll take more into the the nuance

31
00:01:04,619 --> 00:01:09,840
of exploitation<font color="#E5E5E5"> as well as mitigation so</font>

32
00:01:08,700 --> 00:01:12,659
with<font color="#CCCCCC"> that</font><font color="#E5E5E5"> being said let's first get</font>

33
00:01:09,840 --> 00:01:14,220
started<font color="#E5E5E5"> off with sam'l an SSO there's</font>

34
00:01:12,659 --> 00:01:15,509
<font color="#E5E5E5">quite a bit I could cover here but I'll</font>

35
00:01:14,220 --> 00:01:16,740
cover enough ground just so these

36
00:01:15,509 --> 00:01:20,520
vulnerabilities seem relatively

37
00:01:16,740 --> 00:01:22,530
<font color="#CCCCCC">intuitive so single sign-on</font><font color="#E5E5E5"> is really</font>

38
00:01:20,520 --> 00:01:25,020
just describing<font color="#CCCCCC"> a user experience</font><font color="#E5E5E5"> where</font>

39
00:01:22,530 --> 00:01:27,479
you authenticate to<font color="#E5E5E5"> one service in order</font>

40
00:01:25,020 --> 00:01:29,789
to<font color="#CCCCCC"> access multiple</font><font color="#E5E5E5"> services so in an</font>

41
00:01:27,479 --> 00:01:31,380
ideal SSO world<font color="#CCCCCC"> users would benefit from</font>

42
00:01:29,790 --> 00:01:33,479
this<font color="#CCCCCC"> u-axis they would only</font><font color="#E5E5E5"> need to</font>

43
00:01:31,380 --> 00:01:37,079
remember one really good password in

44
00:01:33,479 --> 00:01:38,789
order to<font color="#E5E5E5"> access many services in a</font>

45
00:01:37,079 --> 00:01:41,100
generalized SSO set up there<font color="#E5E5E5"> are like</font>

46
00:01:38,790 --> 00:01:42,869
three main characters<font color="#CCCCCC"> the first is the</font>

47
00:01:41,100 --> 00:01:45,689
identity provider<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is often</font>

48
00:01:42,869 --> 00:01:47,549
<font color="#CCCCCC">abbreviated IDP the IDP is</font><font color="#E5E5E5"> who you</font>

49
00:01:45,689 --> 00:01:49,889
authenticate to<font color="#E5E5E5"> in order to get access</font>

50
00:01:47,549 --> 00:01:51,600
<font color="#CCCCCC">to these multiple services</font><font color="#E5E5E5"> so for</font>

51
00:01:49,890 --> 00:01:54,119
<font color="#E5E5E5">example your organization's user</font>

52
00:01:51,600 --> 00:01:55,798
directory the second character is<font color="#E5E5E5"> the</font>

53
00:01:54,119 --> 00:01:58,890
user<font color="#CCCCCC"> agent which is just a fancy term</font>

54
00:01:55,799 --> 00:02:01,170
for<font color="#E5E5E5"> a</font><font color="#CCCCCC"> process acting on a user's behalf</font>

55
00:01:58,890 --> 00:02:04,079
<font color="#E5E5E5">and for this talk you'll always</font><font color="#CCCCCC"> just be</font>

56
00:02:01,170 --> 00:02:05,790
a web browser<font color="#E5E5E5"> and then finally we have a</font>

57
00:02:04,079 --> 00:02:08,639
service provider<font color="#E5E5E5"> which is often</font>

58
00:02:05,790 --> 00:02:10,800
<font color="#CCCCCC">abbreviated SP and the SP is the</font><font color="#E5E5E5"> service</font>

59
00:02:08,639 --> 00:02:13,950
the user wants<font color="#CCCCCC"> to access so this could</font>

60
00:02:10,800 --> 00:02:17,790
<font color="#CCCCCC">be a payroll payroll web application or</font>

61
00:02:13,950 --> 00:02:20,099
some sort<font color="#E5E5E5"> of chat application</font><font color="#CCCCCC"> so one</font>

62
00:02:17,790 --> 00:02:23,370
<font color="#E5E5E5">fairly common SSO flow starts with</font>

63
00:02:20,099 --> 00:02:25,200
authentication to the<font color="#CCCCCC"> IB P the IB P then</font>

64
00:02:23,370 --> 00:02:27,180
generates and signs a message<font color="#E5E5E5"> intended</font>

65
00:02:25,200 --> 00:02:29,549
for the<font color="#E5E5E5"> SP and passes that to the</font>

66
00:02:27,180 --> 00:02:32,459
browser the browser takes<font color="#E5E5E5"> this message</font>

67
00:02:29,550 --> 00:02:34,980
and directs it<font color="#E5E5E5"> towards the SP and the SP</font>

68
00:02:32,459 --> 00:02:36,840
parses<font color="#E5E5E5"> that message out validates it and</font>

69
00:02:34,980 --> 00:02:37,649
determines how to<font color="#E5E5E5"> authenticate the user</font>

70
00:02:36,840 --> 00:02:39,959
if at<font color="#E5E5E5"> all</font>

71
00:02:37,650 --> 00:02:42,330
so what's notable about this particular

72
00:02:39,959 --> 00:02:44,549
<font color="#CCCCCC">workflow is that the</font><font color="#E5E5E5"> browser process is</font>

73
00:02:42,330 --> 00:02:46,319
under user control<font color="#CCCCCC"> and these messages</font>

74
00:02:44,549 --> 00:02:47,940
<font color="#CCCCCC">are ultimately passed through it so a</font>

75
00:02:46,319 --> 00:02:49,649
service provider<font color="#E5E5E5"> must be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

76
00:02:47,940 --> 00:02:52,319
<font color="#CCCCCC">authenticate</font><font color="#E5E5E5"> the contents of the message</font>

77
00:02:49,650 --> 00:02:54,030
<font color="#E5E5E5">when it receives it this is part of the</font>

78
00:02:52,319 --> 00:02:55,738
problem that sam'l<font color="#E5E5E5"> and some of the</font>

79
00:02:54,030 --> 00:02:59,430
related<font color="#E5E5E5"> standards are attempting to</font>

80
00:02:55,739 --> 00:03:01,079
solve so sam'l is the security assertion

81
00:02:59,430 --> 00:03:03,840
markup language and<font color="#E5E5E5"> it's a common</font>

82
00:03:01,079 --> 00:03:05,910
<font color="#CCCCCC">standard used for SSO there are multiple</font>

83
00:03:03,840 --> 00:03:08,489
<font color="#E5E5E5">other standards that could be used</font><font color="#CCCCCC"> for</font>

84
00:03:05,910 --> 00:03:10,799
an SSO setup like<font color="#CCCCCC"> Open ID Connect for</font>

85
00:03:08,489 --> 00:03:12,900
<font color="#E5E5E5">example but from my experience sam'l is</font>

86
00:03:10,799 --> 00:03:14,819
<font color="#E5E5E5">more prevalent</font><font color="#CCCCCC"> and organizational</font>

87
00:03:12,900 --> 00:03:17,700
context<font color="#E5E5E5"> whereas you may see things like</font>

88
00:03:14,819 --> 00:03:19,230
<font color="#E5E5E5">open ID</font><font color="#CCCCCC"> Connect or similar</font><font color="#E5E5E5"> ad hoc</font>

89
00:03:17,700 --> 00:03:22,709
protocols in a more consumer facing

90
00:03:19,230 --> 00:03:25,319
context and<font color="#CCCCCC"> really and what same well is</font>

91
00:03:22,709 --> 00:03:27,329
<font color="#E5E5E5">defining is considering</font><font color="#CCCCCC"> that your IDP</font>

92
00:03:25,319 --> 00:03:29,850
and<font color="#E5E5E5"> your SP may be built by completely</font>

93
00:03:27,329 --> 00:03:31,829
<font color="#CCCCCC">different people</font><font color="#E5E5E5"> or systems it's a</font>

94
00:03:29,850 --> 00:03:35,280
common language that's used<font color="#E5E5E5"> to share</font>

95
00:03:31,829 --> 00:03:37,709
data across these disparate systems<font color="#E5E5E5"> so</font>

96
00:03:35,280 --> 00:03:39,239
<font color="#E5E5E5">sam'l also defines how other standards</font>

97
00:03:37,709 --> 00:03:42,319
interact with it such<font color="#CCCCCC"> as those that</font>

98
00:03:39,239 --> 00:03:45,060
provide things like message authenticity

99
00:03:42,319 --> 00:03:47,040
<font color="#E5E5E5">so</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> everyone would probably hate</font>

100
00:03:45,060 --> 00:03:48,420
me<font color="#E5E5E5"> if I put like a real sam'l document</font>

101
00:03:47,040 --> 00:03:49,429
up here so<font color="#E5E5E5"> this is a very simplified</font>

102
00:03:48,420 --> 00:03:52,980
example

103
00:03:49,430 --> 00:03:54,840
sam'l documents are just XML XML can get

104
00:03:52,980 --> 00:03:57,179
like relatively nasty so this is has a

105
00:03:54,840 --> 00:03:58,709
lot of<font color="#E5E5E5"> the crux removed</font><font color="#CCCCCC"> I would however</font>

106
00:03:57,180 --> 00:04:00,480
<font color="#E5E5E5">like to highlight a few</font><font color="#CCCCCC"> key elements</font>

107
00:03:58,709 --> 00:04:02,280
<font color="#CCCCCC">that are often used during same old</font><font color="#E5E5E5"> base</font>

108
00:04:00,480 --> 00:04:05,369
SSO because they are<font color="#E5E5E5"> relevant to this</font>

109
00:04:02,280 --> 00:04:08,310
talk the<font color="#E5E5E5"> first of the subject in the</font>

110
00:04:05,370 --> 00:04:10,349
name ID elements<font color="#E5E5E5"> so the subject element</font>

111
00:04:08,310 --> 00:04:12,989
is<font color="#CCCCCC"> just conveying</font><font color="#E5E5E5"> information about the</font>

112
00:04:10,349 --> 00:04:14,700
authenticating user the name<font color="#E5E5E5"> ID is one</font>

113
00:04:12,989 --> 00:04:17,039
part of<font color="#E5E5E5"> the subject element and defined</font>

114
00:04:14,700 --> 00:04:19,289
as a string value<font color="#E5E5E5"> that uniquely</font>

115
00:04:17,039 --> 00:04:21,418
<font color="#CCCCCC">identifies a user</font><font color="#E5E5E5"> this could be really</font>

116
00:04:19,289 --> 00:04:23,159
<font color="#E5E5E5">any identifier but like more commonly</font>

117
00:04:21,418 --> 00:04:25,260
you'll see things<font color="#E5E5E5"> like email addresses</font>

118
00:04:23,159 --> 00:04:28,080
or<font color="#E5E5E5"> user names</font>

119
00:04:25,260 --> 00:04:30,450
<font color="#CCCCCC">SPS very often end up using this name ID</font>

120
00:04:28,080 --> 00:04:31,710
in<font color="#E5E5E5"> order to identify what user they want</font>

121
00:04:30,450 --> 00:04:35,490
to authenticate<font color="#CCCCCC"> when they receive a</font>

122
00:04:31,710 --> 00:04:37,200
<font color="#E5E5E5">sam'l message so the next interesting</font>

123
00:04:35,490 --> 00:04:39,420
<font color="#E5E5E5">set</font><font color="#CCCCCC"> of elements</font><font color="#E5E5E5"> are the</font><font color="#CCCCCC"> attributed</font>

124
00:04:37,200 --> 00:04:41,520
statements and attributes so<font color="#E5E5E5"> add</font>

125
00:04:39,420 --> 00:04:44,010
attribute statement is just<font color="#CCCCCC"> a set of</font>

126
00:04:41,520 --> 00:04:45,930
<font color="#CCCCCC">attributes and attributes are just</font>

127
00:04:44,010 --> 00:04:47,640
general properties<font color="#CCCCCC"> of the user that</font><font color="#E5E5E5"> the</font>

128
00:04:45,930 --> 00:04:51,150
identity provider may want<font color="#E5E5E5"> to convey to</font>

129
00:04:47,640 --> 00:04:53,340
a service<font color="#CCCCCC"> provider</font><font color="#E5E5E5"> so for example an</font>

130
00:04:51,150 --> 00:04:55,919
identity provider may use a<font color="#E5E5E5"> user name</font>

131
00:04:53,340 --> 00:04:57,780
<font color="#E5E5E5">for a name ID but also wants to inform a</font>

132
00:04:55,920 --> 00:05:01,440
service provider<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> user's email</font><font color="#E5E5E5"> for</font>

133
00:04:57,780 --> 00:05:04,830
like notification<font color="#CCCCCC"> purposes so</font><font color="#E5E5E5"> you could</font>

134
00:05:01,440 --> 00:05:07,440
also say use the attributes<font color="#E5E5E5"> section to</font>

135
00:05:04,830 --> 00:05:09,419
convey<font color="#E5E5E5"> as I've done in the slide access</font>

136
00:05:07,440 --> 00:05:15,000
<font color="#E5E5E5">control roles like this person is an</font>

137
00:05:09,420 --> 00:05:16,290
administrator and finally we need<font color="#E5E5E5"> a</font>

138
00:05:15,000 --> 00:05:18,890
signature to prove that<font color="#E5E5E5"> this information</font>

139
00:05:16,290 --> 00:05:21,450
<font color="#E5E5E5">wasn't changed by a malicious user and</font>

140
00:05:18,890 --> 00:05:23,340
this<font color="#E5E5E5"> is where the signature element</font><font color="#CCCCCC"> and</font>

141
00:05:21,450 --> 00:05:27,780
the XML digital<font color="#E5E5E5"> signature student</font>

142
00:05:23,340 --> 00:05:30,419
standard comes into play<font color="#E5E5E5"> so sam'l uses</font>

143
00:05:27,780 --> 00:05:33,299
the XML digital signature standard often

144
00:05:30,420 --> 00:05:34,830
said<font color="#E5E5E5"> XML</font><font color="#CCCCCC"> deseg</font><font color="#E5E5E5"> to sign documents and</font>

145
00:05:33,300 --> 00:05:38,070
prevent tampering by potentially

146
00:05:34,830 --> 00:05:39,630
malicious<font color="#E5E5E5"> user agents so what the simple</font>

147
00:05:38,070 --> 00:05:41,730
signature element and the slide is

148
00:05:39,630 --> 00:05:43,440
conveying is that<font color="#E5E5E5"> these signatures</font><font color="#CCCCCC"> are</font>

149
00:05:41,730 --> 00:05:46,830
included within the same<font color="#CCCCCC"> ole messages</font>

150
00:05:43,440 --> 00:05:48,120
passed within<font color="#E5E5E5"> between these systems so</font>

151
00:05:46,830 --> 00:05:49,770
at first<font color="#E5E5E5"> glance this may seem like</font>

152
00:05:48,120 --> 00:05:52,260
<font color="#E5E5E5">somewhat of</font><font color="#CCCCCC"> a chicken and</font><font color="#E5E5E5"> egg</font><font color="#CCCCCC"> problem</font>

153
00:05:49,770 --> 00:05:55,140
<font color="#CCCCCC">how do you sign a document that includes</font>

154
00:05:52,260 --> 00:05:58,469
<font color="#E5E5E5">its own signature but this is part of</font>

155
00:05:55,140 --> 00:06:01,140
what XML D<font color="#E5E5E5"> cig and the standard</font><font color="#CCCCCC"> is</font>

156
00:05:58,470 --> 00:06:02,520
specifying so for the most part<font color="#E5E5E5"> XML</font><font color="#CCCCCC"> D</font>

157
00:06:01,140 --> 00:06:05,400
<font color="#CCCCCC">cig is irrelevant for this presentation</font>

158
00:06:02,520 --> 00:06:07,320
<font color="#CCCCCC">but there's</font><font color="#E5E5E5"> one step of creating XML</font>

159
00:06:05,400 --> 00:06:08,969
digital signatures that enable these

160
00:06:07,320 --> 00:06:12,330
authentication bypasses<font color="#CCCCCC"> that I alluded</font>

161
00:06:08,970 --> 00:06:15,270
<font color="#CCCCCC">to</font><font color="#E5E5E5"> so we'll dig into it a</font><font color="#CCCCCC"> bit more in</font>

162
00:06:12,330 --> 00:06:17,460
this step<font color="#E5E5E5"> is xml canonicalization</font><font color="#CCCCCC"> so as</font>

163
00:06:15,270 --> 00:06:20,219
you may know<font color="#E5E5E5"> digital signatures become</font>

164
00:06:17,460 --> 00:06:23,280
invalid<font color="#CCCCCC"> if even</font><font color="#E5E5E5"> one single bit changes</font>

165
00:06:20,220 --> 00:06:25,350
in the sign text because signed<font color="#CCCCCC"> XML</font>

166
00:06:23,280 --> 00:06:27,659
documents could pass through<font color="#E5E5E5"> multiple</font>

167
00:06:25,350 --> 00:06:30,540
services and experience possibly

168
00:06:27,660 --> 00:06:32,149
inconsequential changes XML documents

169
00:06:30,540 --> 00:06:34,639
are not signed as is

170
00:06:32,149 --> 00:06:36,619
<font color="#CCCCCC">xml documents are instead signed in</font>

171
00:06:34,639 --> 00:06:39,439
their canonical format<font color="#CCCCCC"> so</font>

172
00:06:36,619 --> 00:06:41,599
canonicalization<font color="#E5E5E5"> which is abbreviated</font><font color="#CCCCCC"> c</font>

173
00:06:39,439 --> 00:06:42,829
<font color="#E5E5E5">14</font><font color="#CCCCCC"> n as a standard series of</font>

174
00:06:41,599 --> 00:06:45,709
<font color="#CCCCCC">transformations that</font><font color="#E5E5E5"> are applied to</font>

175
00:06:42,829 --> 00:06:47,089
documents before signature operations<font color="#E5E5E5"> so</font>

176
00:06:45,709 --> 00:06:49,309
this prevents minor differences in

177
00:06:47,089 --> 00:06:51,889
signed documents from causing signatures

178
00:06:49,309 --> 00:06:53,509
to become invalid<font color="#CCCCCC"> the key point here</font><font color="#E5E5E5"> is</font>

179
00:06:51,889 --> 00:06:55,459
so long as the documents have the same

180
00:06:53,509 --> 00:06:58,699
logical<font color="#CCCCCC"> meaning they should have the</font>

181
00:06:55,459 --> 00:07:01,159
<font color="#E5E5E5">same signature so a demonstration of</font><font color="#CCCCCC"> c14</font>

182
00:06:58,699 --> 00:07:04,189
in can<font color="#E5E5E5"> be seen and these xml documents</font><font color="#CCCCCC"> i</font>

183
00:07:01,159 --> 00:07:06,259
<font color="#CCCCCC">have included in the slide</font><font color="#E5E5E5"> so the first</font>

184
00:07:04,189 --> 00:07:08,719
two<font color="#E5E5E5"> are quite similar</font><font color="#CCCCCC"> aside from their</font>

185
00:07:06,259 --> 00:07:10,909
attribute ordering being reversed<font color="#CCCCCC"> these</font>

186
00:07:08,719 --> 00:07:12,739
two<font color="#E5E5E5"> documents have the same canonical</font>

187
00:07:10,909 --> 00:07:14,179
form because they have the same logical

188
00:07:12,739 --> 00:07:18,049
meaning<font color="#E5E5E5"> and would therefore have</font><font color="#CCCCCC"> the</font>

189
00:07:14,179 --> 00:07:19,849
<font color="#CCCCCC">same XML signature the last two</font>

190
00:07:18,049 --> 00:07:22,068
documents<font color="#E5E5E5"> are also quite signature</font>

191
00:07:19,849 --> 00:07:23,869
<font color="#E5E5E5">except are actually quite similar except</font>

192
00:07:22,069 --> 00:07:26,059
for<font color="#CCCCCC"> the comment included in the last</font>

193
00:07:23,869 --> 00:07:28,429
document<font color="#CCCCCC"> and so the last two documents</font>

194
00:07:26,059 --> 00:07:29,929
could have the same canonical form<font color="#E5E5E5"> but</font>

195
00:07:28,429 --> 00:07:32,419
it depends on<font color="#E5E5E5"> the canonicalization</font>

196
00:07:29,929 --> 00:07:34,458
algorithm<font color="#E5E5E5"> which the fact that there are</font>

197
00:07:32,419 --> 00:07:36,378
multiple c14<font color="#E5E5E5"> in algorithms is probably</font>

198
00:07:34,459 --> 00:07:38,929
<font color="#E5E5E5">not surprising because it is XML and XML</font>

199
00:07:36,379 --> 00:07:40,699
is complicated but however<font color="#E5E5E5"> for this talk</font>

200
00:07:38,929 --> 00:07:42,558
there's only one distinction<font color="#E5E5E5"> that's</font>

201
00:07:40,699 --> 00:07:45,559
worth<font color="#E5E5E5"> noting across these</font><font color="#CCCCCC"> algorithms and</font>

202
00:07:42,559 --> 00:07:47,449
it's that<font color="#E5E5E5"> some c14 algorithms remove</font>

203
00:07:45,559 --> 00:07:49,819
comments prior to signature operations

204
00:07:47,449 --> 00:07:51,829
<font color="#E5E5E5">so that is xml comments like the ones</font>

205
00:07:49,819 --> 00:07:55,009
<font color="#E5E5E5">that i included in</font><font color="#CCCCCC"> the previous slide do</font>

206
00:07:51,829 --> 00:07:57,289
not actually<font color="#CCCCCC"> affect</font><font color="#E5E5E5"> the signature there</font>

207
00:07:55,009 --> 00:07:58,579
are algorithms that<font color="#CCCCCC"> I that do include</font>

208
00:07:57,289 --> 00:08:01,068
comments<font color="#E5E5E5"> as part of the canonical</font>

209
00:07:58,579 --> 00:08:03,139
document but from my research I<font color="#CCCCCC"> think</font>

210
00:08:01,069 --> 00:08:05,689
those c14 algorithms are actually far

211
00:08:03,139 --> 00:08:07,279
<font color="#CCCCCC">less frequently used and</font><font color="#E5E5E5"> I believe</font>

212
00:08:05,689 --> 00:08:09,709
<font color="#E5E5E5">that's probably due</font><font color="#CCCCCC"> to this quote which</font>

213
00:08:07,279 --> 00:08:12,769
suggests that<font color="#CCCCCC"> c14</font><font color="#E5E5E5"> in including comments</font>

214
00:08:09,709 --> 00:08:14,929
<font color="#CCCCCC">is merely a recommended</font><font color="#E5E5E5"> part of the</font>

215
00:08:12,769 --> 00:08:19,389
standard<font color="#E5E5E5"> whereas c14</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> without comments</font>

216
00:08:14,929 --> 00:08:22,609
is a required part of<font color="#E5E5E5"> the standard so</font>

217
00:08:19,389 --> 00:08:24,919
given this complexity<font color="#CCCCCC"> of sam'l and the</font>

218
00:08:22,610 --> 00:08:27,229
supporting specifications like<font color="#E5E5E5"> XML</font><font color="#CCCCCC"> C for</font>

219
00:08:24,919 --> 00:08:29,748
<font color="#E5E5E5">tuning and the</font><font color="#CCCCCC"> xml digital signature</font>

220
00:08:27,229 --> 00:08:31,369
standard if I was a developer wanting to

221
00:08:29,749 --> 00:08:33,439
<font color="#CCCCCC">implement a</font><font color="#E5E5E5"> sam'l service provider</font>

222
00:08:31,369 --> 00:08:35,599
<font color="#E5E5E5">I'm very unlikely to just start from</font>

223
00:08:33,438 --> 00:08:40,399
scratch<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is where sam'l</font>

224
00:08:35,599 --> 00:08:42,319
libraries come in so<font color="#E5E5E5"> sam'l api's are</font>

225
00:08:40,399 --> 00:08:44,569
often<font color="#CCCCCC"> abstract away</font><font color="#E5E5E5"> all the nasty</font>

226
00:08:42,318 --> 00:08:45,300
details to make developer<font color="#CCCCCC"> ux a bit more</font>

227
00:08:44,569 --> 00:08:48,959
straight

228
00:08:45,300 --> 00:08:52,140
so considering<font color="#E5E5E5"> sam'l</font><font color="#CCCCCC"> is also</font><font color="#E5E5E5"> just a</font>

229
00:08:48,960 --> 00:08:54,540
language<font color="#E5E5E5"> to</font><font color="#CCCCCC"> convey data it's still up to</font>

230
00:08:52,140 --> 00:08:57,270
the<font color="#CCCCCC"> SP implementer</font><font color="#E5E5E5"> to decide on what</font>

231
00:08:54,540 --> 00:08:59,189
needs<font color="#CCCCCC"> to be done with</font><font color="#E5E5E5"> that data so we</font>

232
00:08:57,270 --> 00:09:01,829
<font color="#E5E5E5">can see in this code snippet here using</font>

233
00:08:59,190 --> 00:09:05,700
the Python<font color="#E5E5E5"> sam'l</font><font color="#CCCCCC"> api</font><font color="#E5E5E5"> how you could</font>

234
00:09:01,830 --> 00:09:07,770
probably<font color="#E5E5E5"> build a very simple sam'l SP so</font>

235
00:09:05,700 --> 00:09:10,160
this code snippet here<font color="#CCCCCC"> is just taking</font>

236
00:09:07,770 --> 00:09:12,420
something<font color="#CCCCCC"> like an HTTP request object</font>

237
00:09:10,160 --> 00:09:15,240
<font color="#E5E5E5">processing it and transforming it into a</font>

238
00:09:12,420 --> 00:09:16,650
sam'l document object the sam'l object

239
00:09:15,240 --> 00:09:20,070
is then<font color="#CCCCCC"> processed and check for</font>

240
00:09:16,650 --> 00:09:22,319
signature validity and assuming there

241
00:09:20,070 --> 00:09:24,090
were<font color="#E5E5E5"> no errors during processing</font><font color="#CCCCCC"> we can</font>

242
00:09:22,320 --> 00:09:26,160
extract the<font color="#E5E5E5"> data relevant for our use</font>

243
00:09:24,090 --> 00:09:28,530
case so in this case we just<font color="#E5E5E5"> need to</font>

244
00:09:26,160 --> 00:09:31,709
extract<font color="#E5E5E5"> the name ID element from the</font>

245
00:09:28,530 --> 00:09:34,439
sam'l XML which is the<font color="#CCCCCC"> username that</font><font color="#E5E5E5"> we</font>

246
00:09:31,710 --> 00:09:36,690
<font color="#E5E5E5">want to use to</font><font color="#CCCCCC"> authenticate our user so</font>

247
00:09:34,440 --> 00:09:38,790
a subtle<font color="#E5E5E5"> point here is that these</font>

248
00:09:36,690 --> 00:09:40,980
libraries do not<font color="#CCCCCC"> often use the</font><font color="#E5E5E5"> canonical</font>

249
00:09:38,790 --> 00:09:43,949
XML document for this<font color="#E5E5E5"> post-processing</font>

250
00:09:40,980 --> 00:09:45,480
step that's<font color="#CCCCCC"> SP specific this means that</font>

251
00:09:43,950 --> 00:09:47,730
the document<font color="#E5E5E5"> used for signature</font>

252
00:09:45,480 --> 00:09:49,530
verification<font color="#E5E5E5"> may be slightly different</font>

253
00:09:47,730 --> 00:09:54,840
<font color="#E5E5E5">than the document that's used for this</font>

254
00:09:49,530 --> 00:09:57,300
<font color="#E5E5E5">post-processing step so considering</font>

255
00:09:54,840 --> 00:09:58,680
sam'l library<font color="#E5E5E5"> authors or SP developers</font>

256
00:09:57,300 --> 00:10:00,240
may need some way<font color="#E5E5E5"> to extract the</font>

257
00:09:58,680 --> 00:10:01,439
<font color="#CCCCCC">relevant XML data</font><font color="#E5E5E5"> during</font><font color="#CCCCCC"> the</font>

258
00:10:00,240 --> 00:10:03,510
authentication process

259
00:10:01,440 --> 00:10:05,010
I may help to get<font color="#E5E5E5"> a sense on</font><font color="#CCCCCC"> how this is</font>

260
00:10:03,510 --> 00:10:07,410
accomplished underneath the hood<font color="#E5E5E5"> of</font>

261
00:10:05,010 --> 00:10:10,410
these sam'l<font color="#E5E5E5"> api's and this is where the</font>

262
00:10:07,410 --> 00:10:12,750
lower-level XML API is come in so this

263
00:10:10,410 --> 00:10:14,880
code snippet is an<font color="#E5E5E5"> example of what</font>

264
00:10:12,750 --> 00:10:17,460
extracting a name ID may look like at

265
00:10:14,880 --> 00:10:21,450
the<font color="#E5E5E5"> XML API level using</font><font color="#CCCCCC"> the popular</font>

266
00:10:17,460 --> 00:10:23,220
Python<font color="#E5E5E5"> L XML library so first we</font><font color="#CCCCCC"> need to</font>

267
00:10:21,450 --> 00:10:26,400
<font color="#E5E5E5">convert some string representing XML</font>

268
00:10:23,220 --> 00:10:28,200
<font color="#E5E5E5">into an XML object and then we</font><font color="#CCCCCC"> can call</font>

269
00:10:26,400 --> 00:10:29,970
<font color="#CCCCCC">a method like the dot</font><font color="#E5E5E5"> text method</font><font color="#CCCCCC"> on</font>

270
00:10:28,200 --> 00:10:33,450
that<font color="#CCCCCC"> element to extract the inner text</font>

271
00:10:29,970 --> 00:10:35,430
of it the<font color="#E5E5E5"> output of this code is</font><font color="#CCCCCC"> simply</font>

272
00:10:33,450 --> 00:10:36,900
<font color="#E5E5E5">the name ID value</font><font color="#CCCCCC"> kalbi Lib League</font><font color="#E5E5E5"> I</font>

273
00:10:35,430 --> 00:10:40,260
think<font color="#CCCCCC"> most of</font><font color="#E5E5E5"> in here would probably</font>

274
00:10:36,900 --> 00:10:41,939
<font color="#CCCCCC">guess that so one of the key findings</font>

275
00:10:40,260 --> 00:10:43,770
from<font color="#CCCCCC"> my research however</font><font color="#E5E5E5"> is how these</font>

276
00:10:41,940 --> 00:10:46,110
<font color="#CCCCCC">api</font><font color="#E5E5E5"> is changed when comments are</font>

277
00:10:43,770 --> 00:10:48,240
included into<font color="#CCCCCC"> these inner</font><font color="#E5E5E5"> text values so</font>

278
00:10:46,110 --> 00:10:50,790
given that<font color="#E5E5E5"> a comment</font><font color="#CCCCCC"> has been</font><font color="#E5E5E5"> inserted</font>

279
00:10:48,240 --> 00:10:52,410
into<font color="#E5E5E5"> the inner text of this name ID</font><font color="#CCCCCC"> what</font>

280
00:10:50,790 --> 00:10:54,780
would<font color="#E5E5E5"> output of this code be</font>

281
00:10:52,410 --> 00:10:57,870
one might expect<font color="#CCCCCC"> to it to not change</font><font color="#E5E5E5"> at</font>

282
00:10:54,780 --> 00:10:58,410
<font color="#E5E5E5">all however the insertion of this</font>

283
00:10:57,870 --> 00:11:00,000
comment

284
00:10:58,410 --> 00:11:04,860
actually truncate the<font color="#E5E5E5"> attracted</font>

285
00:11:00,000 --> 00:11:08,040
intertext so you may ask why did that

286
00:11:04,860 --> 00:11:09,870
value get<font color="#E5E5E5"> truncated if it of course</font>

287
00:11:08,040 --> 00:11:11,969
depends on<font color="#E5E5E5"> the implementation</font><font color="#CCCCCC"> but a</font>

288
00:11:09,870 --> 00:11:13,949
probable<font color="#CCCCCC"> answer is that XML documents</font>

289
00:11:11,970 --> 00:11:16,529
<font color="#E5E5E5">may be internally represented in the</font>

290
00:11:13,949 --> 00:11:18,959
library as trees by<font color="#E5E5E5"> the underlying XML</font>

291
00:11:16,529 --> 00:11:20,910
library<font color="#E5E5E5"> so in my first text extracting</font>

292
00:11:18,959 --> 00:11:24,268
<font color="#E5E5E5">extract in my first text extraction</font>

293
00:11:20,910 --> 00:11:26,279
example the<font color="#CCCCCC"> document used</font><font color="#E5E5E5"> could be seen</font>

294
00:11:24,269 --> 00:11:28,250
as a tree<font color="#E5E5E5"> with one root with one child</font>

295
00:11:26,279 --> 00:11:31,319
<font color="#E5E5E5">node containing the full inner text</font>

296
00:11:28,250 --> 00:11:33,360
<font color="#E5E5E5">however the second</font><font color="#CCCCCC"> document may have</font>

297
00:11:31,319 --> 00:11:35,069
<font color="#E5E5E5">three child nodes</font><font color="#CCCCCC"> so a text node</font>

298
00:11:33,360 --> 00:11:37,050
containing the first<font color="#E5E5E5"> part of the text</font><font color="#CCCCCC"> a</font>

299
00:11:35,069 --> 00:11:38,040
comment node and then a node with the

300
00:11:37,050 --> 00:11:40,199
<font color="#E5E5E5">rest of the text</font>

301
00:11:38,040 --> 00:11:42,360
<font color="#E5E5E5">so if viewed in this manner it may be a</font>

302
00:11:40,199 --> 00:11:44,430
bit more<font color="#E5E5E5"> clear what false assumption was</font>

303
00:11:42,360 --> 00:11:46,500
made<font color="#E5E5E5"> and it's</font><font color="#CCCCCC"> at a root node may have</font>

304
00:11:44,430 --> 00:11:49,410
multiple text nodes as children's that

305
00:11:46,500 --> 00:11:51,750
represents one<font color="#E5E5E5"> string so if it's assumed</font>

306
00:11:49,410 --> 00:11:53,370
there's only one child<font color="#CCCCCC"> containing all</font>

307
00:11:51,750 --> 00:11:56,879
the<font color="#CCCCCC"> relevant text that</font><font color="#E5E5E5"> partial text</font>

308
00:11:53,370 --> 00:11:58,589
<font color="#CCCCCC">extraction may occur although I hadn't</font>

309
00:11:56,879 --> 00:12:00,360
<font color="#E5E5E5">personally seen an</font><font color="#CCCCCC"> example of this when</font>

310
00:11:58,589 --> 00:12:02,250
I was<font color="#E5E5E5"> doing</font><font color="#CCCCCC"> my research</font><font color="#E5E5E5"> I've since seen</font>

311
00:12:00,360 --> 00:12:04,980
some systems that<font color="#E5E5E5"> actually accidentally</font>

312
00:12:02,250 --> 00:12:07,410
only extracting strings<font color="#E5E5E5"> from like the</font>

313
00:12:04,980 --> 00:12:09,120
last<font color="#E5E5E5"> text node instead of just</font>

314
00:12:07,410 --> 00:12:11,310
extracting the first so that<font color="#CCCCCC"> means</font>

315
00:12:09,120 --> 00:12:13,680
there's a possible few<font color="#CCCCCC"> variations of</font>

316
00:12:11,310 --> 00:12:15,660
this type of<font color="#E5E5E5"> failure but for now</font><font color="#CCCCCC"> would</font>

317
00:12:13,680 --> 00:12:21,660
just<font color="#E5E5E5"> assume that a comment is truncating</font>

318
00:12:15,660 --> 00:12:24,480
everything after the comment so is<font color="#CCCCCC"> L</font><font color="#E5E5E5"> XML</font>

319
00:12:21,660 --> 00:12:27,480
broken<font color="#CCCCCC"> it's kind of hard to say so</font>

320
00:12:24,480 --> 00:12:28,949
<font color="#E5E5E5">other libraries do what</font><font color="#CCCCCC"> L XML does and</font>

321
00:12:27,480 --> 00:12:32,180
their methods for extracting inner text

322
00:12:28,949 --> 00:12:35,240
but take for example Ruby's re<font color="#CCCCCC"> XML</font>

323
00:12:32,180 --> 00:12:38,550
they'll also truncate text<font color="#E5E5E5"> after</font>

324
00:12:35,240 --> 00:12:41,160
everything after<font color="#E5E5E5"> the comment but re XML</font>

325
00:12:38,550 --> 00:12:44,250
documents this behavior so<font color="#CCCCCC"> it could</font><font color="#E5E5E5"> just</font>

326
00:12:41,160 --> 00:12:45,630
be viewed as correct but another

327
00:12:44,250 --> 00:12:47,880
perspective on correctness may be

328
00:12:45,630 --> 00:12:50,850
<font color="#E5E5E5">whether a language ecosystem is</font>

329
00:12:47,880 --> 00:12:53,220
consistent<font color="#E5E5E5"> other Python</font><font color="#CCCCCC"> libraries like</font>

330
00:12:50,850 --> 00:12:56,550
pythons<font color="#E5E5E5"> XML each tree has</font><font color="#CCCCCC"> a dot text</font>

331
00:12:53,220 --> 00:12:58,259
method<font color="#E5E5E5"> exactly like L XML does but that</font>

332
00:12:56,550 --> 00:13:01,050
one actually<font color="#E5E5E5"> ignores the comment and</font>

333
00:12:58,259 --> 00:13:03,120
returns the full inner text<font color="#E5E5E5"> so at best</font>

334
00:13:01,050 --> 00:13:04,878
<font color="#E5E5E5">you could probably argue that this</font>

335
00:13:03,120 --> 00:13:07,139
behavior is<font color="#E5E5E5"> technically correct but</font>

336
00:13:04,879 --> 00:13:09,630
technical correctness<font color="#CCCCCC"> may not be</font>

337
00:13:07,139 --> 00:13:12,120
intuitive and intuitive unintuitive this

338
00:13:09,630 --> 00:13:13,980
may be<font color="#E5E5E5"> artful</font>

339
00:13:12,120 --> 00:13:16,259
so some<font color="#CCCCCC"> libraries</font><font color="#E5E5E5"> like for example</font>

340
00:13:13,980 --> 00:13:18,809
pythons<font color="#E5E5E5"> mini Dom doesn't even provide</font><font color="#CCCCCC"> a</font>

341
00:13:16,259 --> 00:13:20,670
<font color="#E5E5E5">method for extracting inner text</font><font color="#CCCCCC"> users</font>

342
00:13:18,809 --> 00:13:22,860
<font color="#E5E5E5">of this library just have an XML tree</font>

343
00:13:20,670 --> 00:13:25,050
API and so they would be responsible<font color="#CCCCCC"> for</font>

344
00:13:22,860 --> 00:13:27,779
using<font color="#E5E5E5"> an XML tree API to extract inner</font>

345
00:13:25,050 --> 00:13:32,370
<font color="#E5E5E5">text and are likely to also</font><font color="#CCCCCC"> introduce a</font>

346
00:13:27,779 --> 00:13:34,410
<font color="#E5E5E5">similar issue so at this point</font><font color="#CCCCCC"> we know</font>

347
00:13:32,370 --> 00:13:35,699
just enough about sam'l to actually

348
00:13:34,410 --> 00:13:39,480
<font color="#E5E5E5">construct one of the vulnerability</font>

349
00:13:35,699 --> 00:13:41,699
classes<font color="#CCCCCC"> that I identified so to</font><font color="#E5E5E5"> recap</font>

350
00:13:39,480 --> 00:13:43,410
what we know first sam'l documents are

351
00:13:41,699 --> 00:13:45,209
passed through<font color="#CCCCCC"> an untrustworthy browser</font>

352
00:13:43,410 --> 00:13:47,969
<font color="#E5E5E5">browser to convey authentication</font>

353
00:13:45,209 --> 00:13:49,739
information<font color="#CCCCCC"> within</font><font color="#E5E5E5"> XML these documents</font>

354
00:13:47,970 --> 00:13:51,899
are then signed<font color="#E5E5E5"> to prevent tampering</font>

355
00:13:49,740 --> 00:13:54,930
but xml canonicalization algorithms

356
00:13:51,899 --> 00:13:57,569
<font color="#E5E5E5">often don't factor in comments into</font>

357
00:13:54,930 --> 00:13:59,189
signature validity and<font color="#E5E5E5"> on top</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> that</font>

358
00:13:57,569 --> 00:14:01,050
the<font color="#CCCCCC"> api is provided to</font><font color="#E5E5E5"> sam'l</font>

359
00:13:59,189 --> 00:14:06,240
implementers<font color="#CCCCCC"> may truncate</font><font color="#E5E5E5"> text when a</font>

360
00:14:01,050 --> 00:14:08,819
<font color="#E5E5E5">comment is added to</font><font color="#CCCCCC"> inter</font><font color="#E5E5E5"> text so our</font>

361
00:14:06,240 --> 00:14:11,850
attack is<font color="#E5E5E5"> simply taking a section of</font><font color="#CCCCCC"> XML</font>

362
00:14:08,819 --> 00:14:13,498
that<font color="#CCCCCC"> looks</font><font color="#E5E5E5"> like this and inserting a</font>

363
00:14:11,850 --> 00:14:16,589
comment into their appropriate<font color="#CCCCCC"> location</font>

364
00:14:13,499 --> 00:14:18,899
and so the result is that<font color="#E5E5E5"> when this is</font>

365
00:14:16,589 --> 00:14:20,249
processed by<font color="#CCCCCC"> a vulnerable sam'l</font><font color="#E5E5E5"> SP the</font>

366
00:14:18,899 --> 00:14:21,959
comment<font color="#E5E5E5"> would not invalidate the</font>

367
00:14:20,249 --> 00:14:23,730
signature but<font color="#E5E5E5"> would still</font><font color="#CCCCCC"> cause the</font>

368
00:14:21,959 --> 00:14:25,670
subjects user identifier<font color="#CCCCCC"> to become</font>

369
00:14:23,730 --> 00:14:27,990
truncated so in this example

370
00:14:25,670 --> 00:14:30,599
authenticating as the user admin at

371
00:14:27,990 --> 00:14:32,370
victim combat evil<font color="#CCCCCC"> comm would allow an</font>

372
00:14:30,600 --> 00:14:34,439
attacker to truncate the name ID to a

373
00:14:32,370 --> 00:14:36,110
completely different user like admin<font color="#E5E5E5"> at</font>

374
00:14:34,439 --> 00:14:38,998
victim<font color="#E5E5E5"> com</font>

375
00:14:36,110 --> 00:14:41,429
so in other<font color="#E5E5E5"> words the comment is acting</font>

376
00:14:38,999 --> 00:14:43,620
very similar<font color="#E5E5E5"> it's similarly to</font><font color="#CCCCCC"> null byte</font>

377
00:14:41,429 --> 00:14:46,139
<font color="#E5E5E5">attacks so it gives me the</font><font color="#CCCCCC"> capability</font><font color="#E5E5E5"> to</font>

378
00:14:43,620 --> 00:14:50,639
truncate my own credential in<font color="#E5E5E5"> order to</font>

379
00:14:46,139 --> 00:14:51,929
become other users<font color="#CCCCCC"> so as</font><font color="#E5E5E5"> I mentioned</font>

380
00:14:50,639 --> 00:14:53,519
<font color="#E5E5E5">before</font><font color="#CCCCCC"> I first identified</font><font color="#E5E5E5"> this</font>

381
00:14:51,929 --> 00:14:56,009
vulnerability<font color="#E5E5E5"> during an internal audit</font>

382
00:14:53,519 --> 00:14:57,959
of a potential<font color="#E5E5E5"> dependency so once we</font>

383
00:14:56,009 --> 00:15:00,269
identified this first instance<font color="#E5E5E5"> of the</font>

384
00:14:57,959 --> 00:15:02,459
single vulnerability doing a root cause

385
00:15:00,269 --> 00:15:04,949
analysis suggested<font color="#E5E5E5"> that this issue could</font>

386
00:15:02,459 --> 00:15:06,779
<font color="#CCCCCC">be much</font><font color="#E5E5E5"> more widespread in fact I when</font>

387
00:15:04,949 --> 00:15:09,540
doing my initial<font color="#E5E5E5"> proof of concept ended</font>

388
00:15:06,779 --> 00:15:12,290
up<font color="#CCCCCC"> making the same mistake as L</font><font color="#E5E5E5"> XML and</font>

389
00:15:09,540 --> 00:15:15,629
<font color="#CCCCCC">I had hawk recreating the issue myself</font>

390
00:15:12,290 --> 00:15:17,579
so testing that other people could have

391
00:15:15,629 --> 00:15:19,050
<font color="#CCCCCC">also made this mistake testing</font><font color="#E5E5E5"> that</font>

392
00:15:17,579 --> 00:15:21,569
hypothesis actually<font color="#E5E5E5"> turned out to be</font>

393
00:15:19,050 --> 00:15:23,069
fairly<font color="#E5E5E5"> efficient</font><font color="#CCCCCC"> with the help of a</font>

394
00:15:21,569 --> 00:15:25,680
couple<font color="#CCCCCC"> of</font><font color="#E5E5E5"> other</font><font color="#CCCCCC"> duo researchers we</font>

395
00:15:23,069 --> 00:15:27,569
hunted down open source<font color="#CCCCCC"> animal and</font>

396
00:15:25,680 --> 00:15:30,000
<font color="#E5E5E5">patience to try to identify similar</font>

397
00:15:27,570 --> 00:15:33,060
behavior<font color="#E5E5E5"> so our main</font><font color="#CCCCCC"> strategy for doing</font>

398
00:15:30,000 --> 00:15:36,240
<font color="#CCCCCC">this was weaponizing</font><font color="#E5E5E5"> existing unit tests</font>

399
00:15:33,060 --> 00:15:38,130
so what I<font color="#E5E5E5"> mean by</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> is many</font><font color="#CCCCCC"> open</font>

400
00:15:36,240 --> 00:15:40,110
<font color="#CCCCCC">source</font><font color="#E5E5E5"> sam'l libraries often included</font><font color="#CCCCCC"> a</font>

401
00:15:38,130 --> 00:15:42,600
set of unit tests where at<font color="#E5E5E5"> least one</font>

402
00:15:40,110 --> 00:15:46,860
tests involved extracting a name ID from

403
00:15:42,600 --> 00:15:49,440
a sign symbol element<font color="#E5E5E5"> to identify if a</font>

404
00:15:46,860 --> 00:15:51,839
library<font color="#E5E5E5"> was vulnerable</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> nearly made it</font>

405
00:15:49,440 --> 00:15:54,330
<font color="#E5E5E5">needed to take that</font><font color="#CCCCCC"> test in that format</font>

406
00:15:51,839 --> 00:15:56,730
<font color="#E5E5E5">add a comment somewhere and ensure the</font>

407
00:15:54,330 --> 00:15:58,470
name ID was extracted properly<font color="#CCCCCC"> so this</font>

408
00:15:56,730 --> 00:16:00,180
allowed us<font color="#E5E5E5"> to very quickly identify</font>

409
00:15:58,470 --> 00:16:04,380
<font color="#CCCCCC">multiple open source projects that were</font>

410
00:16:00,180 --> 00:16:06,239
affected by this<font color="#CCCCCC"> vulnerability the</font>

411
00:16:04,380 --> 00:16:07,680
initial<font color="#CCCCCC"> research identified</font><font color="#E5E5E5"> for open</font>

412
00:16:06,240 --> 00:16:10,920
source projects that<font color="#CCCCCC"> were affected</font>

413
00:16:07,680 --> 00:16:13,439
<font color="#CCCCCC">python sam'l</font><font color="#E5E5E5"> Ruby sam'l sam'l</font><font color="#CCCCCC"> two Jas</font>

414
00:16:10,920 --> 00:16:15,360
and<font color="#CCCCCC"> Omni out sam'l the last</font><font color="#E5E5E5"> project</font>

415
00:16:13,440 --> 00:16:17,790
interestingly was actually built using

416
00:16:15,360 --> 00:16:20,100
<font color="#E5E5E5">Ruby sam'l so the presence of the Volm</font>

417
00:16:17,790 --> 00:16:23,040
<font color="#CCCCCC">ended up propagating through into a</font>

418
00:16:20,100 --> 00:16:25,130
different project<font color="#CCCCCC"> throughout our</font>

419
00:16:23,040 --> 00:16:26,939
disclosure process<font color="#E5E5E5"> there had been</font>

420
00:16:25,130 --> 00:16:29,010
additional projects that have<font color="#E5E5E5"> self</font>

421
00:16:26,940 --> 00:16:31,860
<font color="#E5E5E5">reported being a portable such as open</font>

422
00:16:29,010 --> 00:16:33,510
sam'l C++<font color="#CCCCCC"> and really like the</font>

423
00:16:31,860 --> 00:16:35,160
interesting aspect of<font color="#E5E5E5"> this particular</font>

424
00:16:33,510 --> 00:16:38,490
<font color="#E5E5E5">outcome is</font><font color="#CCCCCC"> that these are known</font>

425
00:16:35,160 --> 00:16:40,410
vulnerable sam'l libraries<font color="#CCCCCC"> so this means</font>

426
00:16:38,490 --> 00:16:42,630
<font color="#E5E5E5">that the scope is much larger than just</font>

427
00:16:40,410 --> 00:16:44,699
<font color="#CCCCCC">these five projects because service</font>

428
00:16:42,630 --> 00:16:46,529
<font color="#E5E5E5">providers or products reliant on</font>

429
00:16:44,700 --> 00:16:49,920
vulnerable<font color="#E5E5E5"> versions of these</font><font color="#CCCCCC"> libraries</font>

430
00:16:46,529 --> 00:16:52,170
<font color="#CCCCCC">are often</font><font color="#E5E5E5"> affected so additionally this</font>

431
00:16:49,920 --> 00:16:54,569
doesn't account for any one-off sam'l

432
00:16:52,170 --> 00:16:58,189
implementations that<font color="#E5E5E5"> may have</font><font color="#CCCCCC"> ad hoc</font>

433
00:16:54,570 --> 00:17:00,540
recreated the vulnerability<font color="#E5E5E5"> themselves</font>

434
00:16:58,190 --> 00:17:01,920
and this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> subset</font><font color="#CCCCCC"> of products that</font>

435
00:17:00,540 --> 00:17:04,319
I'm aware of that<font color="#E5E5E5"> were affected by this</font>

436
00:17:01,920 --> 00:17:06,839
comment truncation vulnerability<font color="#E5E5E5"> this</font>

437
00:17:04,319 --> 00:17:09,990
includes products such as<font color="#E5E5E5"> shibboleths SP</font>

438
00:17:06,839 --> 00:17:11,730
get lab a few<font color="#CCCCCC"> semantic products and the</font>

439
00:17:09,990 --> 00:17:14,429
product<font color="#E5E5E5"> I alluded to</font><font color="#CCCCCC"> earlier that we did</font>

440
00:17:11,730 --> 00:17:16,380
the review of<font color="#E5E5E5"> to do a network gateway so</font>

441
00:17:14,429 --> 00:17:18,300
a good<font color="#E5E5E5"> chunk of these products had sam'l</font>

442
00:17:16,380 --> 00:17:21,300
implications based on libraries<font color="#E5E5E5"> that I</font>

443
00:17:18,300 --> 00:17:22,770
<font color="#E5E5E5">previously mentioned</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> for what it's</font>

444
00:17:21,300 --> 00:17:25,198
worth most of<font color="#E5E5E5"> these products are</font>

445
00:17:22,770 --> 00:17:26,819
<font color="#CCCCCC">on-premise</font><font color="#E5E5E5"> so there could be SAS</font>

446
00:17:25,199 --> 00:17:29,660
products that were affected<font color="#E5E5E5"> and some</font>

447
00:17:26,819 --> 00:17:32,100
have<font color="#E5E5E5"> self-reported being affected but</font>

448
00:17:29,660 --> 00:17:34,080
not everyone always publishes release

449
00:17:32,100 --> 00:17:35,969
notes when<font color="#CCCCCC"> their</font><font color="#E5E5E5"> SAS</font><font color="#CCCCCC"> service has some</font>

450
00:17:34,080 --> 00:17:36,990
<font color="#CCCCCC">back-end</font><font color="#E5E5E5"> vulnerability patch so those</font>

451
00:17:35,970 --> 00:17:41,070
<font color="#E5E5E5">cases are a bit</font>

452
00:17:36,990 --> 00:17:43,740
harder to<font color="#E5E5E5"> track and finally this is the</font>

453
00:17:41,070 --> 00:17:46,080
<font color="#CCCCCC">timeline</font><font color="#E5E5E5"> of our findings and research as</font>

454
00:17:43,740 --> 00:17:47,670
I mentioned before<font color="#CCCCCC"> I identified the</font>

455
00:17:46,080 --> 00:17:49,678
first issue during<font color="#E5E5E5"> an internal audit</font>

456
00:17:47,670 --> 00:17:51,929
last December<font color="#E5E5E5"> three days after that</font>

457
00:17:49,679 --> 00:17:53,250
<font color="#E5E5E5">while simultaneously sorting out what</font><font color="#CCCCCC"> a</font>

458
00:17:51,929 --> 00:17:55,230
good patch would look like for the

459
00:17:53,250 --> 00:17:56,700
seemingly new vulnerability<font color="#CCCCCC"> we</font>

460
00:17:55,230 --> 00:17:59,700
identified three other vendors that<font color="#CCCCCC"> were</font>

461
00:17:56,700 --> 00:18:01,679
also<font color="#E5E5E5"> affected and since we were dealing</font>

462
00:17:59,700 --> 00:18:03,780
<font color="#E5E5E5">with most multiple affected vendors we</font>

463
00:18:01,679 --> 00:18:05,970
opted<font color="#CCCCCC"> to work with cert CC to coordinate</font>

464
00:18:03,780 --> 00:18:08,428
disclosure<font color="#E5E5E5"> across these vendors as well</font>

465
00:18:05,970 --> 00:18:10,800
<font color="#CCCCCC">as other common sam'l IDPs an SPS and</font>

466
00:18:08,429 --> 00:18:12,420
<font color="#E5E5E5">the coordinated public disclosure was</font>

467
00:18:10,800 --> 00:18:15,090
done<font color="#E5E5E5"> around two months after the initial</font>

468
00:18:12,420 --> 00:18:17,040
<font color="#E5E5E5">contact a cert CC which is</font><font color="#CCCCCC"> about a</font><font color="#E5E5E5"> month</font>

469
00:18:15,090 --> 00:18:21,720
<font color="#CCCCCC">earlier than the initial suggested</font>

470
00:18:17,040 --> 00:18:23,490
deadline<font color="#E5E5E5"> so switching</font><font color="#CCCCCC"> gears a bit</font><font color="#E5E5E5"> let's</font>

471
00:18:21,720 --> 00:18:25,650
let's take some time<font color="#CCCCCC"> to look at</font><font color="#E5E5E5"> how this</font>

472
00:18:23,490 --> 00:18:28,380
<font color="#E5E5E5">one er ability could be exploited so</font>

473
00:18:25,650 --> 00:18:30,240
given that<font color="#CCCCCC"> we know that we can</font><font color="#E5E5E5"> find</font>

474
00:18:28,380 --> 00:18:32,400
vulnerable sam'l service providers that

475
00:18:30,240 --> 00:18:34,140
<font color="#CCCCCC">allow us to truncate signed data how</font>

476
00:18:32,400 --> 00:18:36,780
could this<font color="#E5E5E5"> be leveraged by</font><font color="#CCCCCC"> an attacker</font>

477
00:18:34,140 --> 00:18:38,900
<font color="#E5E5E5">does exploitation just require sheer</font>

478
00:18:36,780 --> 00:18:42,000
luck to get an identifier that is

479
00:18:38,900 --> 00:18:43,260
truncates to some other target<font color="#E5E5E5"> and the</font>

480
00:18:42,000 --> 00:18:45,809
answer to that<font color="#E5E5E5"> is actually kind of</font>

481
00:18:43,260 --> 00:18:48,540
<font color="#E5E5E5">complicated because both SPS and IDPs</font>

482
00:18:45,809 --> 00:18:50,790
<font color="#E5E5E5">are really configurable so there's like</font>

483
00:18:48,540 --> 00:18:53,010
lots of wiggle<font color="#CCCCCC"> room</font><font color="#E5E5E5"> for configuring</font>

484
00:18:50,790 --> 00:18:56,129
things<font color="#E5E5E5"> in such a way where risk is</font>

485
00:18:53,010 --> 00:18:58,110
negatively<font color="#E5E5E5"> or positively impacted so</font>

486
00:18:56,130 --> 00:18:59,790
let's first take a look<font color="#CCCCCC"> at some ways</font>

487
00:18:58,110 --> 00:19:01,199
<font color="#CCCCCC">that a service provider may be affected</font>

488
00:18:59,790 --> 00:19:04,470
as<font color="#E5E5E5"> well</font><font color="#CCCCCC"> as walk through an example</font>

489
00:19:01,200 --> 00:19:09,210
<font color="#E5E5E5">against of an exploit of vulnerable</font>

490
00:19:04,470 --> 00:19:10,710
service provider<font color="#E5E5E5"> so to be clear the</font>

491
00:19:09,210 --> 00:19:12,570
threat<font color="#E5E5E5"> model this</font><font color="#CCCCCC"> tact first requires</font>

492
00:19:10,710 --> 00:19:15,059
authenticated access<font color="#E5E5E5"> to an identity</font>

493
00:19:12,570 --> 00:19:16,919
provider<font color="#E5E5E5"> so initial access may be</font>

494
00:19:15,059 --> 00:19:19,260
<font color="#E5E5E5">achieved through some form of account</font>

495
00:19:16,920 --> 00:19:20,910
takeover like phishing or could<font color="#CCCCCC"> just be</font>

496
00:19:19,260 --> 00:19:23,700
carried out<font color="#E5E5E5"> by an employee looking to</font>

497
00:19:20,910 --> 00:19:25,350
access a<font color="#CCCCCC"> co-workers data this initial</font>

498
00:19:23,700 --> 00:19:27,450
foothold when combined with<font color="#E5E5E5"> the common</font>

499
00:19:25,350 --> 00:19:30,780
truncation vulnerability<font color="#E5E5E5"> can be used to</font>

500
00:19:27,450 --> 00:19:32,070
pivot to different user accounts so at

501
00:19:30,780 --> 00:19:36,300
<font color="#E5E5E5">first glance this may be impractical</font>

502
00:19:32,070 --> 00:19:38,159
since we may be<font color="#E5E5E5"> reliant on truncating</font>

503
00:19:36,300 --> 00:19:40,260
the data for our<font color="#E5E5E5"> foothold account which</font>

504
00:19:38,160 --> 00:19:42,420
is may<font color="#CCCCCC"> not necessarily</font><font color="#E5E5E5"> lead</font><font color="#CCCCCC"> to anything</font>

505
00:19:40,260 --> 00:19:44,070
interesting<font color="#CCCCCC"> but this</font><font color="#E5E5E5"> is where these SP</font>

506
00:19:42,420 --> 00:19:45,929
<font color="#E5E5E5">specific features or minor</font>

507
00:19:44,070 --> 00:19:49,789
implementation details that vary across

508
00:19:45,929 --> 00:19:54,029
SPS may make things easier for<font color="#E5E5E5"> attackers</font>

509
00:19:49,789 --> 00:19:56,490
so the first aspect<font color="#E5E5E5"> of SPS that</font><font color="#CCCCCC"> is could</font>

510
00:19:54,029 --> 00:19:58,200
lead to more interesting<font color="#E5E5E5"> exploits</font><font color="#CCCCCC"> is how</font>

511
00:19:56,490 --> 00:20:00,779
<font color="#CCCCCC">samwell's sometimes used</font><font color="#E5E5E5"> to convey</font>

512
00:19:58,200 --> 00:20:02,399
authorization information<font color="#E5E5E5"> so recall that</font>

513
00:20:00,779 --> 00:20:04,950
<font color="#CCCCCC">the</font><font color="#E5E5E5"> sam'l attribute statement is just</font>

514
00:20:02,399 --> 00:20:07,889
<font color="#CCCCCC">some set of properties</font><font color="#E5E5E5"> relevant to the</font>

515
00:20:04,950 --> 00:20:09,269
authenticating subject so a sam'l

516
00:20:07,890 --> 00:20:12,269
document may use these attribute

517
00:20:09,269 --> 00:20:14,269
statements to inform the SPS as a use of

518
00:20:12,269 --> 00:20:17,610
the<font color="#E5E5E5"> user's role like I mentioned earlier</font>

519
00:20:14,269 --> 00:20:20,490
<font color="#E5E5E5">so this adds another</font><font color="#CCCCCC"> possible Avenue for</font>

520
00:20:17,610 --> 00:20:22,019
impactful value truncation so if the

521
00:20:20,490 --> 00:20:24,120
attacker doesn't necessarily have an

522
00:20:22,019 --> 00:20:26,399
interesting user identifier to<font color="#E5E5E5"> truncate</font>

523
00:20:24,120 --> 00:20:28,529
<font color="#E5E5E5">they may be able to truncate group names</font>

524
00:20:26,399 --> 00:20:31,018
into<font color="#E5E5E5"> something impactful and and this</font>

525
00:20:28,529 --> 00:20:32,700
this<font color="#E5E5E5"> generally applies to any other XML</font>

526
00:20:31,019 --> 00:20:36,240
element that is conveying authentication

527
00:20:32,700 --> 00:20:38,940
or authorization information<font color="#E5E5E5"> so in the</font>

528
00:20:36,240 --> 00:20:40,769
same<font color="#E5E5E5"> ole example a user may have say a</font>

529
00:20:38,940 --> 00:20:42,330
lesser privilege administration role

530
00:20:40,769 --> 00:20:44,700
like one thatis coped<font color="#CCCCCC"> to HR</font>

531
00:20:42,330 --> 00:20:46,049
administration however<font color="#E5E5E5"> if this was</font>

532
00:20:44,700 --> 00:20:48,450
truncated<font color="#CCCCCC"> to something like</font>

533
00:20:46,049 --> 00:20:50,340
administrators the service provider may

534
00:20:48,450 --> 00:20:52,110
be enabling<font color="#E5E5E5"> a</font><font color="#CCCCCC"> privilege escalation</font>

535
00:20:50,340 --> 00:20:55,699
vulnerability<font color="#E5E5E5"> through this particular</font>

536
00:20:52,110 --> 00:20:58,559
<font color="#CCCCCC">comment truncation technique</font>

537
00:20:55,700 --> 00:21:01,200
so another<font color="#E5E5E5"> SP specific detail is how</font>

538
00:20:58,559 --> 00:21:03,389
name IDs are handled in processed<font color="#CCCCCC"> s' the</font>

539
00:21:01,200 --> 00:21:05,639
only requirement for user identifier is

540
00:21:03,389 --> 00:21:08,969
conveyed via<font color="#E5E5E5"> name ID is</font><font color="#CCCCCC"> that it uniquely</font>

541
00:21:05,639 --> 00:21:11,039
<font color="#CCCCCC">identifies a</font><font color="#E5E5E5"> specific</font><font color="#CCCCCC"> user identifiers</font>

542
00:21:08,970 --> 00:21:12,840
could be anything from user selected

543
00:21:11,039 --> 00:21:15,799
user names to<font color="#E5E5E5"> completely random</font>

544
00:21:12,840 --> 00:21:18,149
identifiers using random identifiers

545
00:21:15,799 --> 00:21:21,360
<font color="#CCCCCC">it's probably unlikely to be</font><font color="#E5E5E5"> truncated</font>

546
00:21:18,149 --> 00:21:23,250
<font color="#E5E5E5">to anything interesting but maybe things</font>

547
00:21:21,360 --> 00:21:26,549
like incremental numeric identifiers

548
00:21:23,250 --> 00:21:30,210
<font color="#E5E5E5">could be exploitable as numbers like</font><font color="#CCCCCC"> 104</font>

549
00:21:26,549 --> 00:21:31,980
could be<font color="#CCCCCC"> truncated to become</font><font color="#E5E5E5"> one other</font>

550
00:21:30,210 --> 00:21:34,320
identifiers such as email addresses<font color="#CCCCCC"> and</font>

551
00:21:31,980 --> 00:21:36,570
<font color="#E5E5E5">user names are more dependent on how</font>

552
00:21:34,320 --> 00:21:38,639
accounts are registered<font color="#E5E5E5"> and since</font>

553
00:21:36,570 --> 00:21:40,350
account<font color="#E5E5E5"> registration is often more</font><font color="#CCCCCC"> of a</font>

554
00:21:38,639 --> 00:21:42,029
function<font color="#E5E5E5"> of the identity provider</font><font color="#CCCCCC"> I'll</font>

555
00:21:40,350 --> 00:21:45,769
discuss<font color="#CCCCCC"> that a bit more</font><font color="#E5E5E5"> when we get to</font>

556
00:21:42,029 --> 00:21:45,769
the IDP exploitability part of that talk

557
00:21:46,039 --> 00:21:51,029
so an interesting<font color="#E5E5E5"> case study for</font>

558
00:21:48,440 --> 00:21:52,200
<font color="#E5E5E5">exploitation is actually get lab the</font>

559
00:21:51,029 --> 00:21:55,200
<font color="#E5E5E5">open source source code management</font>

560
00:21:52,200 --> 00:21:57,929
service<font color="#E5E5E5"> it's notable because prior to</font>

561
00:21:55,200 --> 00:21:59,789
10.7<font color="#E5E5E5"> dot o</font><font color="#CCCCCC"> gate lab was vulnerable</font><font color="#E5E5E5"> to</font>

562
00:21:57,929 --> 00:22:01,860
<font color="#CCCCCC">the common truncation vulnerability and</font>

563
00:21:59,789 --> 00:22:03,000
<font color="#CCCCCC">their same as sam'l service provider</font>

564
00:22:01,860 --> 00:22:05,299
<font color="#CCCCCC">as they use one of</font><font color="#E5E5E5"> the vulnerable</font>

565
00:22:03,000 --> 00:22:08,160
dependencies that<font color="#CCCCCC"> I mentioned early on</font>

566
00:22:05,299 --> 00:22:09,960
<font color="#CCCCCC">Gil AB Sam OSP implementation</font><font color="#E5E5E5"> also</font>

567
00:22:08,160 --> 00:22:12,090
highlights some<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the unique processing</font>

568
00:22:09,960 --> 00:22:15,360
that<font color="#E5E5E5"> is done during</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> service provider</font>

569
00:22:12,090 --> 00:22:20,428
authentication that that makes it a also

570
00:22:15,360 --> 00:22:21,600
<font color="#E5E5E5">an interesting case study</font><font color="#CCCCCC"> so first to</font>

571
00:22:20,429 --> 00:22:24,570
get<font color="#CCCCCC"> a understanding</font><font color="#E5E5E5"> of their</font>

572
00:22:21,600 --> 00:22:26,610
<font color="#CCCCCC">architecture for identity</font><font color="#E5E5E5"> first</font><font color="#CCCCCC"> gitlab</font>

573
00:22:24,570 --> 00:22:28,770
<font color="#CCCCCC">maintains separate tables for their</font>

574
00:22:26,610 --> 00:22:31,260
<font color="#E5E5E5">username and these external identities</font>

575
00:22:28,770 --> 00:22:34,320
<font color="#CCCCCC">an example of the latter these external</font>

576
00:22:31,260 --> 00:22:36,629
identities would be a sam'l name ID so

577
00:22:34,320 --> 00:22:38,280
once the sam'l document is processed<font color="#E5E5E5"> get</font>

578
00:22:36,630 --> 00:22:42,000
lab would attempt<font color="#CCCCCC"> to map that external</font>

579
00:22:38,280 --> 00:22:44,370
<font color="#E5E5E5">identifier</font><font color="#CCCCCC"> to a gitlab user if the name</font>

580
00:22:42,000 --> 00:22:47,070
idea was already<font color="#E5E5E5"> mapped to a user the</font>

581
00:22:44,370 --> 00:22:49,530
user is then authenticated<font color="#CCCCCC"> if the name</font>

582
00:22:47,070 --> 00:22:51,270
ID isn't<font color="#CCCCCC"> mapped to a user</font><font color="#E5E5E5"> get lab may</font>

583
00:22:49,530 --> 00:22:53,490
just<font color="#E5E5E5"> create an entirely new user with</font>

584
00:22:51,270 --> 00:22:58,139
whatever privileges<font color="#E5E5E5"> the administrator</font>

585
00:22:53,490 --> 00:22:59,669
had<font color="#E5E5E5"> configured for default access so to</font>

586
00:22:58,140 --> 00:23:01,140
exploit<font color="#CCCCCC"> gitlab using</font><font color="#E5E5E5"> the common</font>

587
00:22:59,669 --> 00:23:03,510
truncation vulnerability the attacker

588
00:23:01,140 --> 00:23:05,580
needs to truncate their name ID<font color="#E5E5E5"> in order</font>

589
00:23:03,510 --> 00:23:10,290
<font color="#CCCCCC">to match an external identifier that</font>

590
00:23:05,580 --> 00:23:11,210
<font color="#CCCCCC">maps</font><font color="#E5E5E5"> to our</font><font color="#CCCCCC"> target user so to walk</font>

591
00:23:10,290 --> 00:23:13,590
through what this<font color="#E5E5E5"> would look like</font>

592
00:23:11,210 --> 00:23:15,780
<font color="#CCCCCC">suppose that we're targeting a</font><font color="#E5E5E5"> get lab</font>

593
00:23:13,590 --> 00:23:17,309
user with the<font color="#E5E5E5"> username victim this is</font>

594
00:23:15,780 --> 00:23:18,990
not the actual<font color="#CCCCCC"> username that</font><font color="#E5E5E5"> we'd be</font>

595
00:23:17,309 --> 00:23:21,418
targeting for this exploit<font color="#E5E5E5"> because</font>

596
00:23:18,990 --> 00:23:22,830
they're set us external identity<font color="#CCCCCC"> which</font>

597
00:23:21,419 --> 00:23:26,010
is<font color="#CCCCCC"> shown in</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> bottom</font><font color="#E5E5E5"> right photo here</font>

598
00:23:22,830 --> 00:23:27,240
<font color="#E5E5E5">might be something like sam'l victim and</font>

599
00:23:26,010 --> 00:23:31,410
so this is the one that<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> looking to</font>

600
00:23:27,240 --> 00:23:33,360
<font color="#E5E5E5">target for this truncation bug so this</font>

601
00:23:31,410 --> 00:23:35,160
is a<font color="#E5E5E5"> snippet of what the target</font><font color="#CCCCCC"> users</font>

602
00:23:33,360 --> 00:23:37,049
sam'l assertion<font color="#E5E5E5"> would actually look like</font>

603
00:23:35,160 --> 00:23:40,520
so this<font color="#CCCCCC"> is a completely normal</font>

604
00:23:37,049 --> 00:23:43,100
<font color="#E5E5E5">unmodified</font><font color="#CCCCCC"> benign sam'l assertion</font>

605
00:23:40,520 --> 00:23:45,090
<font color="#E5E5E5">basically the name ID has the external</font>

606
00:23:43,100 --> 00:23:48,030
identifier that<font color="#CCCCCC"> we're looking</font><font color="#E5E5E5"> for which</font>

607
00:23:45,090 --> 00:23:52,020
is sam'l victim and it's also<font color="#CCCCCC"> noteworthy</font>

608
00:23:48,030 --> 00:23:54,120
<font color="#CCCCCC">to</font><font color="#E5E5E5"> see that the</font><font color="#CCCCCC"> user's email</font><font color="#E5E5E5"> is provided</font>

609
00:23:52,020 --> 00:23:57,030
through the<font color="#E5E5E5"> attribute statement element</font>

610
00:23:54,120 --> 00:23:59,219
so<font color="#E5E5E5"> that part doesn't necessarily affect</font>

611
00:23:57,030 --> 00:24:02,460
<font color="#E5E5E5">our ability</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> exploit the system it's</font>

612
00:23:59,220 --> 00:24:04,410
really<font color="#CCCCCC"> just used so gitlab can keep user</font>

613
00:24:02,460 --> 00:24:06,480
profile information synchronized between

614
00:24:04,410 --> 00:24:10,800
<font color="#E5E5E5">the identity provider and the service</font>

615
00:24:06,480 --> 00:24:13,440
<font color="#E5E5E5">provider so assuming</font><font color="#CCCCCC"> we can access an</font>

616
00:24:10,800 --> 00:24:15,220
account on on the identity provider with

617
00:24:13,440 --> 00:24:17,350
name ID sam'l victim<font color="#CCCCCC"> 1</font>

618
00:24:15,220 --> 00:24:19,210
<font color="#E5E5E5">three</font><font color="#CCCCCC"> and attacker can truncate their</font>

619
00:24:17,350 --> 00:24:21,908
own sam'l document to collide with<font color="#CCCCCC"> the</font>

620
00:24:19,210 --> 00:24:24,400
target users external<font color="#E5E5E5"> identifier using</font>

621
00:24:21,909 --> 00:24:26,110
the payload seen here<font color="#CCCCCC"> an interesting</font>

622
00:24:24,400 --> 00:24:28,390
side effect<font color="#E5E5E5"> of successful exploitation</font>

623
00:24:26,110 --> 00:24:30,639
is that the<font color="#E5E5E5"> victims profile</font><font color="#CCCCCC"> information</font>

624
00:24:28,390 --> 00:24:33,159
may be<font color="#E5E5E5"> updated based on attributes in</font>

625
00:24:30,640 --> 00:24:34,929
the<font color="#CCCCCC"> attackers sam'l document so for</font>

626
00:24:33,159 --> 00:24:37,000
<font color="#E5E5E5">example here in the</font><font color="#CCCCCC"> bottom picture the</font>

627
00:24:34,929 --> 00:24:38,950
attackers account email address replaced

628
00:24:37,000 --> 00:24:41,289
the<font color="#E5E5E5"> victims original email address</font>

629
00:24:38,950 --> 00:24:44,289
during authentication<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is not</font>

630
00:24:41,289 --> 00:24:46,450
necessarily indicative<font color="#CCCCCC"> of an increase</font><font color="#E5E5E5"> or</font>

631
00:24:44,289 --> 00:24:48,610
<font color="#CCCCCC">decrease in</font><font color="#E5E5E5"> exploit ability but it's</font>

632
00:24:46,450 --> 00:24:50,380
another<font color="#E5E5E5"> indication</font><font color="#CCCCCC"> that these sam'l</font>

633
00:24:48,610 --> 00:24:52,809
service providers<font color="#E5E5E5"> often implement some</font>

634
00:24:50,380 --> 00:24:58,480
amount of custom logic<font color="#CCCCCC"> after sam'l</font>

635
00:24:52,809 --> 00:25:00,760
documents are verified so before I<font color="#CCCCCC"> get</font>

636
00:24:58,480 --> 00:25:03,070
<font color="#E5E5E5">into how IDPs expect</font><font color="#CCCCCC"> effect</font>

637
00:25:00,760 --> 00:25:04,900
<font color="#E5E5E5">exploitability</font><font color="#CCCCCC"> I'd like to cover some of</font>

638
00:25:03,070 --> 00:25:08,080
<font color="#E5E5E5">the</font><font color="#CCCCCC"> remediation</font><font color="#E5E5E5"> of the comment on</font>

639
00:25:04,900 --> 00:25:09,909
patient owner ability so<font color="#E5E5E5"> both the</font>

640
00:25:08,080 --> 00:25:12,610
identification<font color="#E5E5E5"> and remediation process</font>

641
00:25:09,909 --> 00:25:14,980
<font color="#E5E5E5">of this of a vulnerable service provider</font>

642
00:25:12,610 --> 00:25:17,860
<font color="#E5E5E5">depends a bit on your relationship with</font>

643
00:25:14,980 --> 00:25:20,320
<font color="#CCCCCC">the service provider</font><font color="#E5E5E5"> so if you say</font>

644
00:25:17,860 --> 00:25:22,959
manager administrator administrator

645
00:25:20,320 --> 00:25:25,178
<font color="#E5E5E5">service providers your two best options</font>

646
00:25:22,960 --> 00:25:25,840
<font color="#E5E5E5">are probably asking service providers if</font>

647
00:25:25,179 --> 00:25:28,390
they're vulnerable

648
00:25:25,840 --> 00:25:31,780
<font color="#CCCCCC">or just spinning up a browser proxy and</font>

649
00:25:28,390 --> 00:25:33,400
testing things<font color="#E5E5E5"> yourself if you're</font>

650
00:25:31,780 --> 00:25:35,500
someone in an organization that<font color="#CCCCCC"> has</font>

651
00:25:33,400 --> 00:25:37,299
<font color="#CCCCCC">written a sam'l service provider I'd</font>

652
00:25:35,500 --> 00:25:39,850
probably recommend<font color="#E5E5E5"> to follow the the</font>

653
00:25:37,299 --> 00:25:42,490
<font color="#CCCCCC">weaponize</font><font color="#E5E5E5"> unit test strategy to identify</font>

654
00:25:39,850 --> 00:25:44,830
<font color="#CCCCCC">if your library or implementation is</font>

655
00:25:42,490 --> 00:25:47,260
vulnerable this does of<font color="#CCCCCC"> course assume</font>

656
00:25:44,830 --> 00:25:49,059
that someone wrote tests but which may

657
00:25:47,260 --> 00:25:52,870
be an absurd<font color="#E5E5E5"> assumption but you never</font>

658
00:25:49,059 --> 00:25:55,330
know<font color="#CCCCCC"> so there</font><font color="#E5E5E5"> are also other mitigation</font>

659
00:25:52,870 --> 00:25:56,860
strategies as well such as rejecting

660
00:25:55,330 --> 00:25:59,530
sam'l documents that are<font color="#E5E5E5"> non canonical</font>

661
00:25:56,860 --> 00:26:01,240
when they are received<font color="#CCCCCC"> or rejecting</font>

662
00:25:59,530 --> 00:26:03,010
sam'l documents that contain comments

663
00:26:01,240 --> 00:26:05,590
which<font color="#E5E5E5"> is probably fairly unlikely in</font>

664
00:26:03,010 --> 00:26:07,750
most normal<font color="#CCCCCC"> circumstances but the</font>

665
00:26:05,590 --> 00:26:09,580
efficacy and<font color="#CCCCCC"> practicality of</font><font color="#E5E5E5"> both of</font>

666
00:26:07,750 --> 00:26:14,980
those<font color="#CCCCCC"> solutions does depend on your</font>

667
00:26:09,580 --> 00:26:16,570
context<font color="#CCCCCC"> okay so up until</font><font color="#E5E5E5"> this point I</font>

668
00:26:14,980 --> 00:26:19,150
pretty<font color="#E5E5E5"> much heavily focused</font><font color="#CCCCCC"> on</font>

669
00:26:16,570 --> 00:26:21,189
<font color="#E5E5E5">exploiting the service provider</font><font color="#CCCCCC"> but the</font>

670
00:26:19,150 --> 00:26:25,330
service provider is really only<font color="#E5E5E5"> one</font><font color="#CCCCCC"> part</font>

671
00:26:21,190 --> 00:26:27,800
of<font color="#E5E5E5"> the SSO system so even if even though</font>

672
00:26:25,330 --> 00:26:30,110
service providers are ultimately making

673
00:26:27,800 --> 00:26:31,669
this comic truncation mistake<font color="#CCCCCC"> in my</font>

674
00:26:30,110 --> 00:26:34,100
opinion<font color="#E5E5E5"> most of the risk increasing</font>

675
00:26:31,670 --> 00:26:36,260
features actually<font color="#E5E5E5"> come from the identity</font>

676
00:26:34,100 --> 00:26:38,929
<font color="#E5E5E5">provider</font><font color="#CCCCCC"> so what features are</font>

677
00:26:36,260 --> 00:26:42,740
configurations of<font color="#E5E5E5"> an IDP would influence</font>

678
00:26:38,930 --> 00:26:44,180
exploitability<font color="#CCCCCC"> the first feature</font><font color="#E5E5E5"> that</font>

679
00:26:42,740 --> 00:26:45,560
one might possibly think could reduce

680
00:26:44,180 --> 00:26:47,840
<font color="#E5E5E5">exploit ability is something</font><font color="#CCCCCC"> like</font>

681
00:26:45,560 --> 00:26:50,899
two-factor authentication<font color="#E5E5E5"> however</font>

682
00:26:47,840 --> 00:26:53,060
whether<font color="#CCCCCC"> to</font><font color="#E5E5E5"> if a actually completely</font>

683
00:26:50,900 --> 00:26:55,070
eliminates this<font color="#CCCCCC"> mourner bility depends</font>

684
00:26:53,060 --> 00:26:59,659
on what systems or systems are enforcing

685
00:26:55,070 --> 00:27:02,689
to<font color="#E5E5E5"> effect so if the IDP is responsible</font>

686
00:26:59,660 --> 00:27:04,490
for<font color="#CCCCCC"> it</font><font color="#E5E5E5"> responsible for enforcing</font><font color="#CCCCCC"> 2fa</font>

687
00:27:02,690 --> 00:27:07,310
that may not<font color="#E5E5E5"> provide additional</font>

688
00:27:04,490 --> 00:27:09,560
protection from this vulnerability<font color="#E5E5E5"> our</font>

689
00:27:07,310 --> 00:27:11,540
threat<font color="#CCCCCC"> model is based</font><font color="#E5E5E5"> on a user with</font>

690
00:27:09,560 --> 00:27:13,460
authenticated session<font color="#E5E5E5"> the attacker</font>

691
00:27:11,540 --> 00:27:15,980
already has authenticated<font color="#CCCCCC"> access to the</font>

692
00:27:13,460 --> 00:27:18,140
ID key<font color="#E5E5E5"> so while</font><font color="#CCCCCC"> - if a may increase the</font>

693
00:27:15,980 --> 00:27:20,180
<font color="#E5E5E5">costs</font><font color="#CCCCCC"> required for an attacker to get</font>

694
00:27:18,140 --> 00:27:23,990
their initial foothold in the case of

695
00:27:20,180 --> 00:27:25,940
like an ATO<font color="#CCCCCC"> this doesn't really</font><font color="#E5E5E5"> help for</font>

696
00:27:23,990 --> 00:27:28,460
the threat model<font color="#CCCCCC"> of malicious insiders</font>

697
00:27:25,940 --> 00:27:30,200
who have the capability<font color="#CCCCCC"> to</font><font color="#E5E5E5"> provide their</font>

698
00:27:28,460 --> 00:27:32,870
own second factor<font color="#CCCCCC"> of authentication in</font>

699
00:27:30,200 --> 00:27:35,600
order to access their own<font color="#E5E5E5"> IDP</font>

700
00:27:32,870 --> 00:27:37,280
and since sam'l talk document tampering

701
00:27:35,600 --> 00:27:39,919
takes place after off the IDP

702
00:27:37,280 --> 00:27:42,200
authentication is complete<font color="#E5E5E5"> identity and</font>

703
00:27:39,920 --> 00:27:45,140
<font color="#CCCCCC">i didn'ti provider enforce to a fade</font>

704
00:27:42,200 --> 00:27:47,560
doesn't necessarily limit<font color="#CCCCCC"> the</font><font color="#E5E5E5"> risk of</font>

705
00:27:45,140 --> 00:27:51,800
exploitation

706
00:27:47,560 --> 00:27:54,310
if the<font color="#CCCCCC"> SP enforces to a</font><font color="#E5E5E5"> PHA or</font><font color="#CCCCCC"> the SP</font>

707
00:27:51,800 --> 00:27:56,330
enforces<font color="#E5E5E5"> to a PHA in addition to the IDP</font>

708
00:27:54,310 --> 00:27:58,940
exploitation opportunities<font color="#E5E5E5"> are a bit</font>

709
00:27:56,330 --> 00:28:01,250
more<font color="#CCCCCC"> limited and this is because the SP</font>

710
00:27:58,940 --> 00:28:03,950
would likely be<font color="#E5E5E5"> extracting the users</font>

711
00:28:01,250 --> 00:28:05,750
<font color="#E5E5E5">identity from the sam'l document in</font>

712
00:28:03,950 --> 00:28:08,180
order to look up the users<font color="#E5E5E5"> to</font><font color="#CCCCCC"> a PHA</font>

713
00:28:05,750 --> 00:28:10,370
information and in this case the common

714
00:28:08,180 --> 00:28:12,020
truncation exploit would cause the SP to

715
00:28:10,370 --> 00:28:13,939
<font color="#E5E5E5">look up the victim users</font><font color="#CCCCCC"> - if they</font>

716
00:28:12,020 --> 00:28:16,340
information which means the<font color="#CCCCCC"> attacker</font>

717
00:28:13,940 --> 00:28:18,980
would<font color="#E5E5E5"> then be presented</font><font color="#CCCCCC"> with the use the</font>

718
00:28:16,340 --> 00:28:20,629
victim users<font color="#CCCCCC"> - if a prompt and would</font>

719
00:28:18,980 --> 00:28:22,790
<font color="#E5E5E5">have to then</font><font color="#CCCCCC"> bypass</font><font color="#E5E5E5"> that in order</font><font color="#CCCCCC"> to</font>

720
00:28:20,630 --> 00:28:23,960
gain access as well<font color="#E5E5E5"> so in this case it's</font>

721
00:28:22,790 --> 00:28:26,210
still<font color="#CCCCCC"> a first actor authentication</font>

722
00:28:23,960 --> 00:28:30,440
bypass but there's still that second

723
00:28:26,210 --> 00:28:31,700
<font color="#CCCCCC">factor of authentication another</font>

724
00:28:30,440 --> 00:28:33,710
variable<font color="#E5E5E5"> that can greatly influence</font>

725
00:28:31,700 --> 00:28:36,830
impact as I mentioned previously<font color="#E5E5E5"> is how</font>

726
00:28:33,710 --> 00:28:38,240
IDP users are registered so self

727
00:28:36,830 --> 00:28:40,960
<font color="#CCCCCC">registration is a pretty standard</font>

728
00:28:38,240 --> 00:28:42,640
practice for consumer services but

729
00:28:40,960 --> 00:28:44,620
<font color="#CCCCCC">for my experience as I mentioned earlier</font>

730
00:28:42,640 --> 00:28:48,090
sam'l based authentication for consumer

731
00:28:44,620 --> 00:28:50,229
services is probably a bit less common

732
00:28:48,090 --> 00:28:52,149
<font color="#CCCCCC">organizations</font><font color="#E5E5E5"> that are more likely to</font>

733
00:28:50,230 --> 00:28:54,700
<font color="#CCCCCC">use</font><font color="#E5E5E5"> something like sam'l may manually</font>

734
00:28:52,150 --> 00:28:57,250
provision other and manually provision

735
00:28:54,700 --> 00:28:58,960
all their employees<font color="#CCCCCC"> however</font><font color="#E5E5E5"> some</font>

736
00:28:57,250 --> 00:29:01,150
identity providers do offer self

737
00:28:58,960 --> 00:29:04,090
registration<font color="#E5E5E5"> options which may be</font><font color="#CCCCCC"> used</font>

738
00:29:01,150 --> 00:29:05,590
to<font color="#CCCCCC"> for example reduce IT burden so an</font>

739
00:29:04,090 --> 00:29:07,570
attacker who takes<font color="#CCCCCC"> advantage of</font>

740
00:29:05,590 --> 00:29:09,909
self-service user registration for an

741
00:29:07,570 --> 00:29:11,950
IDP<font color="#E5E5E5"> would likely increase the impact of</font>

742
00:29:09,910 --> 00:29:14,080
this vulnerability<font color="#CCCCCC"> as the attacker can</font>

743
00:29:11,950 --> 00:29:15,600
provision accounts for themselves<font color="#E5E5E5"> and so</font>

744
00:29:14,080 --> 00:29:18,639
<font color="#CCCCCC">this gives</font><font color="#E5E5E5"> them</font><font color="#CCCCCC"> an opportunity</font><font color="#E5E5E5"> to</font>

745
00:29:15,600 --> 00:29:20,800
<font color="#CCCCCC">influence their SSO</font><font color="#E5E5E5"> identifier and if</font>

746
00:29:18,640 --> 00:29:22,480
I'm able<font color="#CCCCCC"> to just choose my</font><font color="#E5E5E5"> username for</font>

747
00:29:20,800 --> 00:29:24,610
the IDP that gets used in<font color="#E5E5E5"> the same low</font>

748
00:29:22,480 --> 00:29:26,560
assertion I can just pick one<font color="#E5E5E5"> that</font>

749
00:29:24,610 --> 00:29:28,929
matches<font color="#CCCCCC"> my</font><font color="#E5E5E5"> target user with some like</font>

750
00:29:26,560 --> 00:29:36,399
junk at the end and so I can truncate it

751
00:29:28,930 --> 00:29:38,530
<font color="#E5E5E5">as I need so another potentially risky</font>

752
00:29:36,400 --> 00:29:41,680
<font color="#CCCCCC">IDB feature is account lifecycle</font>

753
00:29:38,530 --> 00:29:44,379
<font color="#E5E5E5">functionality such as user profiles so</font>

754
00:29:41,680 --> 00:29:47,470
if an<font color="#E5E5E5"> IDP also functions as an employee</font>

755
00:29:44,380 --> 00:29:49,960
directory the employees may<font color="#CCCCCC"> be also</font><font color="#E5E5E5"> able</font>

756
00:29:47,470 --> 00:29:51,850
<font color="#CCCCCC">to do self server self-service profile</font>

757
00:29:49,960 --> 00:29:54,280
management<font color="#E5E5E5"> such as</font><font color="#CCCCCC"> updating the first</font>

758
00:29:51,850 --> 00:29:55,870
name or updating<font color="#E5E5E5"> their phone number in</font>

759
00:29:54,280 --> 00:29:58,720
other words if an identity provider

760
00:29:55,870 --> 00:30:01,300
allows<font color="#E5E5E5"> the user to edit the data that</font>

761
00:29:58,720 --> 00:30:03,550
they then use later for SSO identity

762
00:30:01,300 --> 00:30:07,330
<font color="#E5E5E5">they may have some influence over how</font>

763
00:30:03,550 --> 00:30:10,389
they're identified<font color="#E5E5E5"> and to describe this</font>

764
00:30:07,330 --> 00:30:12,280
particular<font color="#E5E5E5"> scenario I'll use the term</font>

765
00:30:10,390 --> 00:30:13,990
<font color="#CCCCCC">mutable identity to describe user</font>

766
00:30:12,280 --> 00:30:16,960
profiles that exhibit<font color="#E5E5E5"> this particular</font>

767
00:30:13,990 --> 00:30:18,160
behavior<font color="#E5E5E5"> in fact I think mutable</font>

768
00:30:16,960 --> 00:30:19,360
identities<font color="#CCCCCC"> aren't</font><font color="#E5E5E5"> interesting enough</font>

769
00:30:18,160 --> 00:30:21,010
concept that<font color="#E5E5E5"> it's worth digging into</font>

770
00:30:19,360 --> 00:30:24,639
<font color="#E5E5E5">more as it can kind of be its own</font>

771
00:30:21,010 --> 00:30:26,590
vulnerability class so mutable

772
00:30:24,640 --> 00:30:29,340
identities are interesting because<font color="#E5E5E5"> users</font>

773
00:30:26,590 --> 00:30:33,280
are<font color="#E5E5E5"> able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> influence their SSO identity</font>

774
00:30:29,340 --> 00:30:34,899
they<font color="#CCCCCC"> also greatly impact or effect</font><font color="#E5E5E5"> the</font>

775
00:30:33,280 --> 00:30:37,300
<font color="#CCCCCC">impact of the comment</font><font color="#E5E5E5"> from patient owner</font>

776
00:30:34,900 --> 00:30:39,010
ability so just like user registration

777
00:30:37,300 --> 00:30:43,210
may allow an attacker to choose their

778
00:30:39,010 --> 00:30:45,490
<font color="#CCCCCC">own identity to</font><font color="#E5E5E5"> mutable identities allow</font>

779
00:30:43,210 --> 00:30:48,750
an attacker to update their identity in

780
00:30:45,490 --> 00:30:51,250
order<font color="#E5E5E5"> to be conveniently</font><font color="#CCCCCC"> truncate able</font>

781
00:30:48,750 --> 00:30:53,740
so<font color="#E5E5E5"> to get a better sense of this comment</font>

782
00:30:51,250 --> 00:30:54,070
or this<font color="#E5E5E5"> concept we can see an</font><font color="#CCCCCC"> example of</font>

783
00:30:53,740 --> 00:30:56,500
new

784
00:30:54,070 --> 00:30:59,200
identity and<font color="#E5E5E5"> LastPass enterprises SSO</font>

785
00:30:56,500 --> 00:31:01,390
feature<font color="#CCCCCC"> so similar to</font><font color="#E5E5E5"> other identity</font>

786
00:30:59,200 --> 00:31:02,920
providers<font color="#E5E5E5"> LastPass has an enterprise</font>

787
00:31:01,390 --> 00:31:05,020
feature that<font color="#E5E5E5"> gives you this like launch</font>

788
00:31:02,920 --> 00:31:08,410
review for all the service providers

789
00:31:05,020 --> 00:31:10,330
<font color="#CCCCCC">that a user has access to</font><font color="#E5E5E5"> so if an</font>

790
00:31:08,410 --> 00:31:13,120
administrator had<font color="#E5E5E5"> configured a user's</font>

791
00:31:10,330 --> 00:31:15,699
email identifier as the sam'l name ID

792
00:31:13,120 --> 00:31:17,530
for one of these<font color="#CCCCCC"> services</font><font color="#E5E5E5"> the name ID</font>

793
00:31:15,700 --> 00:31:20,770
would update<font color="#CCCCCC"> after the user updates</font>

794
00:31:17,530 --> 00:31:23,230
<font color="#E5E5E5">their account email so this allows the</font>

795
00:31:20,770 --> 00:31:24,700
<font color="#E5E5E5">attacker to update their SSO name ID to</font>

796
00:31:23,230 --> 00:31:27,940
any email address<font color="#CCCCCC"> they can prove</font>

797
00:31:24,700 --> 00:31:29,230
ownership for so in normal<font color="#E5E5E5"> circumstances</font>

798
00:31:27,940 --> 00:31:31,720
this actually wouldn't<font color="#E5E5E5"> be</font><font color="#CCCCCC"> an issue</font>

799
00:31:29,230 --> 00:31:34,390
because an attacker wouldn't<font color="#CCCCCC"> likely to</font>

800
00:31:31,720 --> 00:31:37,120
be able<font color="#E5E5E5"> to prove ownership of a victim's</font>

801
00:31:34,390 --> 00:31:38,920
email address<font color="#E5E5E5"> however when combined with</font>

802
00:31:37,120 --> 00:31:41,080
<font color="#E5E5E5">the</font><font color="#CCCCCC"> comment truncation vulnerability</font>

803
00:31:38,920 --> 00:31:45,400
that becomes<font color="#E5E5E5"> trivial to use mutable</font>

804
00:31:41,080 --> 00:31:47,500
identity to target any user so this is

805
00:31:45,400 --> 00:31:49,120
what an example<font color="#CCCCCC"> exploit steps would look</font>

806
00:31:47,500 --> 00:31:50,800
like in<font color="#CCCCCC"> order to combine</font><font color="#E5E5E5"> the comment</font>

807
00:31:49,120 --> 00:31:53,830
truncation vulnerability with mutable

808
00:31:50,800 --> 00:31:56,530
identities<font color="#E5E5E5"> so in this case I'm acting as</font>

809
00:31:53,830 --> 00:32:00,580
myself<font color="#E5E5E5"> an employee within duo looking to</font>

810
00:31:56,530 --> 00:32:02,800
target<font color="#CCCCCC"> our CTO jonno</font><font color="#E5E5E5"> so I first need</font><font color="#CCCCCC"> to</font>

811
00:32:00,580 --> 00:32:05,290
<font color="#CCCCCC">find</font><font color="#E5E5E5"> the SP vulnerable to the comment</font>

812
00:32:02,800 --> 00:32:07,899
truncation vulnerability that uses<font color="#E5E5E5"> email</font>

813
00:32:05,290 --> 00:32:10,300
addresses for identity<font color="#E5E5E5"> so this can be</font>

814
00:32:07,900 --> 00:32:12,100
<font color="#CCCCCC">detected</font><font color="#E5E5E5"> just by authenticating to</font>

815
00:32:10,300 --> 00:32:14,470
services<font color="#E5E5E5"> that I have access</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> and</font>

816
00:32:12,100 --> 00:32:16,750
inserting comments<font color="#E5E5E5"> into sam'l assertions</font>

817
00:32:14,470 --> 00:32:19,260
and observing responses from SPS

818
00:32:16,750 --> 00:32:22,000
so like things like error responses or

819
00:32:19,260 --> 00:32:24,390
maybe default user access is a good

820
00:32:22,000 --> 00:32:28,660
indication<font color="#E5E5E5"> that a service is vulnerable</font>

821
00:32:24,390 --> 00:32:30,760
so once a vulnerables SP is found<font color="#E5E5E5"> I can</font>

822
00:32:28,660 --> 00:32:33,430
update my last pass account email under

823
00:32:30,760 --> 00:32:36,070
a domain I own<font color="#E5E5E5"> so for example pretending</font>

824
00:32:33,430 --> 00:32:38,800
I own attacker<font color="#CCCCCC"> comm I could use the</font>

825
00:32:36,070 --> 00:32:42,220
email address<font color="#CCCCCC"> jonno at duo comm attacker</font>

826
00:32:38,800 --> 00:32:43,960
<font color="#E5E5E5">comm since I own attacker</font><font color="#CCCCCC"> comm this is</font>

827
00:32:42,220 --> 00:32:45,310
an<font color="#E5E5E5"> email I can</font><font color="#CCCCCC"> prove ownership of by</font>

828
00:32:43,960 --> 00:32:47,740
following through<font color="#CCCCCC"> Lots passes</font>

829
00:32:45,310 --> 00:32:49,810
confirmation email<font color="#E5E5E5"> and</font><font color="#CCCCCC"> so once this</font>

830
00:32:47,740 --> 00:32:52,480
email address<font color="#CCCCCC"> is confirmed my LastPass</font>

831
00:32:49,810 --> 00:32:53,379
profile is<font color="#CCCCCC"> updated as is my name</font><font color="#E5E5E5"> ID used</font>

832
00:32:52,480 --> 00:32:56,530
for

833
00:32:53,380 --> 00:32:59,170
LastPass SSO<font color="#E5E5E5"> and then I can reallocate</font>

834
00:32:56,530 --> 00:33:01,540
to<font color="#E5E5E5"> the vulnerable SP and cert</font><font color="#CCCCCC"> a comment</font>

835
00:32:59,170 --> 00:33:04,840
before my domain attacker<font color="#E5E5E5"> comm and</font>

836
00:33:01,540 --> 00:33:06,750
authenticate as my target<font color="#CCCCCC"> user so I've</font>

837
00:33:04,840 --> 00:33:09,689
actually<font color="#E5E5E5"> recorded a demo of this</font><font color="#CCCCCC"> ex</font>

838
00:33:06,750 --> 00:33:11,910
workflow using LastPass enterprises so

839
00:33:09,690 --> 00:33:13,470
and a demo sam'l service provider that

840
00:33:11,910 --> 00:33:17,550
<font color="#CCCCCC">is vulnerable to</font><font color="#E5E5E5"> the common truncation</font>

841
00:33:13,470 --> 00:33:19,830
vulnerability<font color="#E5E5E5"> so this first video</font>

842
00:33:17,550 --> 00:33:22,680
demonstrates LastPass<font color="#E5E5E5"> is estação</font>

843
00:33:19,830 --> 00:33:24,449
workflow as well as the demo vulnerable

844
00:33:22,680 --> 00:33:28,140
service provider who just logs<font color="#E5E5E5"> who I</font>

845
00:33:24,450 --> 00:33:33,420
bought<font color="#CCCCCC"> the negated as so you'll see I'll</font>

846
00:33:28,140 --> 00:33:36,120
start the<font color="#CCCCCC"> attack with a with my</font><font color="#E5E5E5"> standard</font>

847
00:33:33,420 --> 00:33:38,280
organizational<font color="#E5E5E5"> email like my name at duo</font>

848
00:33:36,120 --> 00:33:40,080
<font color="#CCCCCC">comm would you can see there and then</font>

849
00:33:38,280 --> 00:33:42,899
<font color="#E5E5E5">once I authenticate</font><font color="#CCCCCC"> through lots passes</font>

850
00:33:40,080 --> 00:33:45,629
<font color="#CCCCCC">to so my</font><font color="#E5E5E5"> last name ID is just shown in</font>

851
00:33:42,900 --> 00:33:46,230
the service providers<font color="#E5E5E5"> UI so completely</font>

852
00:33:45,630 --> 00:33:52,890
normal

853
00:33:46,230 --> 00:33:55,350
SSO workflow<font color="#CCCCCC"> this video</font><font color="#E5E5E5"> demonstrates how</font>

854
00:33:52,890 --> 00:33:57,420
LastPass email update functionality is

855
00:33:55,350 --> 00:34:01,230
mutable by M users within the last pass

856
00:33:57,420 --> 00:34:03,000
<font color="#CCCCCC">enterprise organization so here I'm</font>

857
00:34:01,230 --> 00:34:06,630
updating<font color="#E5E5E5"> my email address from one in my</font>

858
00:34:03,000 --> 00:34:08,399
organization so my name at duo<font color="#E5E5E5"> comm to</font>

859
00:34:06,630 --> 00:34:10,800
target the email address subdue<font color="#CCCCCC"> Oct oh</font>

860
00:34:08,399 --> 00:34:15,270
under domain<font color="#E5E5E5"> I own which is John Doe at</font>

861
00:34:10,800 --> 00:34:16,860
<font color="#CCCCCC">do comm Cal DZ which I</font><font color="#E5E5E5"> don't actually</font>

862
00:34:15,270 --> 00:34:19,918
<font color="#E5E5E5">own attacker calm as cool as that</font><font color="#CCCCCC"> would</font>

863
00:34:16,860 --> 00:34:24,840
<font color="#E5E5E5">be I can come I can confirm this email</font>

864
00:34:19,918 --> 00:34:27,929
since I do own this domain<font color="#CCCCCC"> and then</font>

865
00:34:24,840 --> 00:34:30,870
finally after<font color="#E5E5E5"> proving email ownership of</font>

866
00:34:27,929 --> 00:34:32,610
that<font color="#CCCCCC"> domain which I did</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> of an my</font>

867
00:34:30,870 --> 00:34:35,100
LastPass account<font color="#E5E5E5"> email has been updated</font>

868
00:34:32,610 --> 00:34:37,020
so this video demonstrates my ability to

869
00:34:35,100 --> 00:34:38,730
<font color="#CCCCCC">authenticate as a different user in my</font>

870
00:34:37,020 --> 00:34:40,649
organization using the comment

871
00:34:38,730 --> 00:34:42,719
truncation vulnerability<font color="#E5E5E5"> so you'll note</font>

872
00:34:40,649 --> 00:34:44,370
at one point in<font color="#E5E5E5"> this video I enable a</font>

873
00:34:42,719 --> 00:34:45,810
browser extension which<font color="#CCCCCC"> is this</font><font color="#E5E5E5"> little</font>

874
00:34:44,370 --> 00:34:47,759
<font color="#E5E5E5">blue circle</font><font color="#CCCCCC"> in the top right corner and</font>

875
00:34:45,810 --> 00:34:49,350
<font color="#CCCCCC">that's really just a browser proxy</font>

876
00:34:47,760 --> 00:34:51,090
that's inserting comments<font color="#E5E5E5"> into</font><font color="#CCCCCC"> their</font>

877
00:34:49,350 --> 00:34:52,830
appropriate<font color="#E5E5E5"> location automatically as</font>

878
00:34:51,090 --> 00:34:58,980
sam'l messages or pass<font color="#CCCCCC"> through my</font>

879
00:34:52,830 --> 00:35:03,210
browser<font color="#E5E5E5"> so here I first killed my</font>

880
00:34:58,980 --> 00:35:06,330
previous<font color="#E5E5E5"> SP session because I had</font><font color="#CCCCCC"> RA</font>

881
00:35:03,210 --> 00:35:09,030
authenticated<font color="#CCCCCC"> and so after doing</font><font color="#E5E5E5"> a</font>

882
00:35:06,330 --> 00:35:10,710
reallocation<font color="#E5E5E5"> you can see that my email</font>

883
00:35:09,030 --> 00:35:12,510
address<font color="#E5E5E5"> has</font><font color="#CCCCCC"> been updated to the one that</font>

884
00:35:10,710 --> 00:35:14,190
<font color="#CCCCCC">I just</font><font color="#E5E5E5"> proved ownership of and then</font>

885
00:35:12,510 --> 00:35:17,460
after killing<font color="#E5E5E5"> my session and enabling my</font>

886
00:35:14,190 --> 00:35:19,020
browser proxy I can reallocate<font color="#CCCCCC"> which</font>

887
00:35:17,460 --> 00:35:20,150
inserts the comment in the appropriate

888
00:35:19,020 --> 00:35:23,030
<font color="#E5E5E5">location this new</font>

889
00:35:20,150 --> 00:35:33,050
<font color="#E5E5E5">address and allows me to target</font><font color="#CCCCCC"> jano</font><font color="#E5E5E5"> a</font>

890
00:35:23,030 --> 00:35:35,540
<font color="#E5E5E5">duo</font><font color="#CCCCCC"> calm so just as</font><font color="#E5E5E5"> I demonstrated</font>

891
00:35:33,050 --> 00:35:37,370
mutable identity is a great pairing with

892
00:35:35,540 --> 00:35:40,310
a service provider<font color="#E5E5E5"> that's one herbal to</font>

893
00:35:37,370 --> 00:35:42,259
the<font color="#E5E5E5"> common truncation bug but in some</font>

894
00:35:40,310 --> 00:35:45,860
<font color="#E5E5E5">cases mutable identity could just be a</font>

895
00:35:42,260 --> 00:35:48,200
<font color="#E5E5E5">vulnerability on its own</font><font color="#CCCCCC"> what if I could</font>

896
00:35:45,860 --> 00:35:51,860
just edit my identity<font color="#CCCCCC"> to become someone</font>

897
00:35:48,200 --> 00:35:53,299
else if my IDP was<font color="#E5E5E5"> configured in this</font>

898
00:35:51,860 --> 00:35:55,340
way an attacker may not even need<font color="#E5E5E5"> a</font>

899
00:35:53,300 --> 00:35:57,350
<font color="#E5E5E5">common truncation vulnerability they may</font>

900
00:35:55,340 --> 00:36:01,220
<font color="#E5E5E5">just be able to indirectly choose their</font>

901
00:35:57,350 --> 00:36:02,299
name ID<font color="#E5E5E5"> and so during</font><font color="#CCCCCC"> my research I</font>

902
00:36:01,220 --> 00:36:05,750
<font color="#E5E5E5">actually found a fairly</font><font color="#CCCCCC"> straightforward</font>

903
00:36:02,300 --> 00:36:07,940
<font color="#CCCCCC">path to this behavior</font><font color="#E5E5E5"> and octa so for</font>

904
00:36:05,750 --> 00:36:09,560
context<font color="#E5E5E5"> octa is an identity service that</font>

905
00:36:07,940 --> 00:36:11,210
<font color="#CCCCCC">provides users with an esse so</font>

906
00:36:09,560 --> 00:36:13,759
<font color="#E5E5E5">experience similar to what I described</font>

907
00:36:11,210 --> 00:36:15,500
<font color="#E5E5E5">with LastPass the path towards choose</font>

908
00:36:13,760 --> 00:36:20,120
your own<font color="#CCCCCC"> identity for users</font><font color="#E5E5E5"> just</font>

909
00:36:15,500 --> 00:36:21,800
required the usage of<font color="#E5E5E5"> three features the</font>

910
00:36:20,120 --> 00:36:23,630
first feature was that<font color="#E5E5E5"> octa allows a</font>

911
00:36:21,800 --> 00:36:26,210
service provider<font color="#E5E5E5"> to use a programmable</font>

912
00:36:23,630 --> 00:36:28,430
identity so instead of configuring each

913
00:36:26,210 --> 00:36:30,050
user's identity on a case-by-case basis

914
00:36:28,430 --> 00:36:32,600
<font color="#E5E5E5">you could use their expression language</font>

915
00:36:30,050 --> 00:36:35,150
<font color="#CCCCCC">to provision identities under a common</font>

916
00:36:32,600 --> 00:36:37,580
format<font color="#CCCCCC"> so if your organization uses a</font>

917
00:36:35,150 --> 00:36:38,930
standard<font color="#E5E5E5"> username format like first name</font>

918
00:36:37,580 --> 00:36:40,549
dot<font color="#CCCCCC"> last name</font>

919
00:36:38,930 --> 00:36:45,770
this makes provisioning accounts much

920
00:36:40,550 --> 00:36:47,090
easier<font color="#CCCCCC"> octa also gives users edible</font>

921
00:36:45,770 --> 00:36:49,550
account<font color="#CCCCCC"> information once they're</font>

922
00:36:47,090 --> 00:36:51,050
authenticated<font color="#CCCCCC"> to</font><font color="#E5E5E5"> their IDP some of this</font>

923
00:36:49,550 --> 00:36:53,240
account<font color="#E5E5E5"> information was by default</font>

924
00:36:51,050 --> 00:36:55,970
writable by<font color="#CCCCCC"> a</font><font color="#E5E5E5"> user at the time of this</font>

925
00:36:53,240 --> 00:36:57,950
research<font color="#E5E5E5"> so for example a user could</font>

926
00:36:55,970 --> 00:37:00,410
update values such as<font color="#E5E5E5"> their first name</font>

927
00:36:57,950 --> 00:37:02,359
their<font color="#CCCCCC"> last name or email</font><font color="#E5E5E5"> and ultimately</font>

928
00:37:00,410 --> 00:37:03,859
<font color="#E5E5E5">octa would end up using these editable</font>

929
00:37:02,360 --> 00:37:08,540
values for previously<font color="#E5E5E5"> mentioned</font>

930
00:37:03,860 --> 00:37:10,640
programmable identity so at first<font color="#E5E5E5"> glance</font>

931
00:37:08,540 --> 00:37:12,320
<font color="#E5E5E5">this seems like it's a fairly</font>

932
00:37:10,640 --> 00:37:14,240
straightforward path because a user

933
00:37:12,320 --> 00:37:18,830
could update<font color="#E5E5E5"> their profile information</font>

934
00:37:14,240 --> 00:37:22,459
<font color="#CCCCCC">which then gets used to an SSO gets used</font>

935
00:37:18,830 --> 00:37:24,830
as their sam'l name ID<font color="#E5E5E5"> so for example if</font>

936
00:37:22,460 --> 00:37:27,140
<font color="#E5E5E5">I use my first name</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> last name for</font>

937
00:37:24,830 --> 00:37:29,240
identity<font color="#E5E5E5"> in the SSO context I could just</font>

938
00:37:27,140 --> 00:37:31,770
change<font color="#CCCCCC"> my first name and last</font><font color="#E5E5E5"> name using</font>

939
00:37:29,240 --> 00:37:35,200
the<font color="#E5E5E5"> account update profile functionality</font>

940
00:37:31,770 --> 00:37:36,280
but there was<font color="#E5E5E5"> actually one</font><font color="#CCCCCC"> more</font><font color="#E5E5E5"> trick to</font>

941
00:37:35,200 --> 00:37:36,879
making<font color="#E5E5E5"> this work it wasn't</font><font color="#CCCCCC"> that</font>

942
00:37:36,280 --> 00:37:39,220
straightforward

943
00:37:36,880 --> 00:37:40,990
<font color="#E5E5E5">octa didn't actually provision these</font>

944
00:37:39,220 --> 00:37:43,509
programmable<font color="#E5E5E5"> identities on a per</font>

945
00:37:40,990 --> 00:37:45,040
authentication basis<font color="#E5E5E5"> so if you were</font>

946
00:37:43,510 --> 00:37:47,530
previously provisioned<font color="#CCCCCC"> in the account</font>

947
00:37:45,040 --> 00:37:49,240
<font color="#E5E5E5">and you updated your profile your</font>

948
00:37:47,530 --> 00:37:50,710
identity wouldn't change on<font color="#CCCCCC"> that off</font>

949
00:37:49,240 --> 00:37:53,979
next authentication<font color="#E5E5E5"> like you've</font>

950
00:37:50,710 --> 00:37:55,990
<font color="#E5E5E5">experienced with LastPass however there</font>

951
00:37:53,980 --> 00:37:57,490
was a third feature that made this

952
00:37:55,990 --> 00:37:59,529
<font color="#E5E5E5">vulnerability possible which was a</font>

953
00:37:57,490 --> 00:38:01,750
self-service application portal for

954
00:37:59,530 --> 00:38:04,090
users<font color="#E5E5E5"> and what this feature would allow</font>

955
00:38:01,750 --> 00:38:06,970
is<font color="#E5E5E5"> directory administrators could allow</font>

956
00:38:04,090 --> 00:38:10,030
their<font color="#CCCCCC"> users to</font><font color="#E5E5E5"> opt</font><font color="#CCCCCC"> into or</font><font color="#E5E5E5"> opt out of</font>

957
00:38:06,970 --> 00:38:13,209
<font color="#E5E5E5">applications that they have access</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> so</font>

958
00:38:10,030 --> 00:38:15,190
this could for example be used<font color="#E5E5E5"> to clean</font>

959
00:38:13,210 --> 00:38:16,990
up a user's UI if they have<font color="#E5E5E5"> access</font><font color="#CCCCCC"> to</font>

960
00:38:15,190 --> 00:38:20,380
<font color="#E5E5E5">multiple applications but</font><font color="#CCCCCC"> only end up</font>

961
00:38:16,990 --> 00:38:21,819
<font color="#E5E5E5">using a few this feature was not</font><font color="#CCCCCC"> enabled</font>

962
00:38:20,380 --> 00:38:24,490
by<font color="#E5E5E5"> default</font><font color="#CCCCCC"> at the time of the research</font>

963
00:38:21,820 --> 00:38:26,770
<font color="#E5E5E5">but if this was enabled and used with</font>

964
00:38:24,490 --> 00:38:29,470
programmable identities<font color="#CCCCCC"> a user could use</font>

965
00:38:26,770 --> 00:38:31,390
it to<font color="#E5E5E5"> D provision</font><font color="#CCCCCC"> their their</font>

966
00:38:29,470 --> 00:38:33,640
application and then reprovision

967
00:38:31,390 --> 00:38:36,098
themselves from an<font color="#E5E5E5"> application which</font>

968
00:38:33,640 --> 00:38:37,990
would cause their identity to<font color="#CCCCCC"> be a count</font>

969
00:38:36,099 --> 00:38:40,060
to be reprovision<font color="#CCCCCC"> and they would have</font>

970
00:38:37,990 --> 00:38:44,259
complete control<font color="#E5E5E5"> over</font><font color="#CCCCCC"> their sam'l name</font>

971
00:38:40,060 --> 00:38:45,580
ID used in SSO so identifying our

972
00:38:44,260 --> 00:38:47,770
exploiting this issue would have<font color="#E5E5E5"> gone</font>

973
00:38:45,580 --> 00:38:49,930
<font color="#E5E5E5">through these high-level steps so you</font>

974
00:38:47,770 --> 00:38:51,759
just update<font color="#E5E5E5"> your profile information and</font>

975
00:38:49,930 --> 00:38:54,730
<font color="#E5E5E5">deprovision yourself from a target</font>

976
00:38:51,760 --> 00:38:56,530
<font color="#E5E5E5">service provider and</font><font color="#CCCCCC"> after reprovision a</font>

977
00:38:54,730 --> 00:38:58,240
and using the<font color="#CCCCCC"> self-service application</font>

978
00:38:56,530 --> 00:39:00,220
management<font color="#E5E5E5"> portal you could reallocate</font>

979
00:38:58,240 --> 00:39:02,618
and expect and inspect the sam'l

980
00:39:00,220 --> 00:39:04,509
document<font color="#E5E5E5"> that was issued</font><font color="#CCCCCC"> if it had</font><font color="#E5E5E5"> not</font>

981
00:39:02,619 --> 00:39:07,510
<font color="#CCCCCC">changed you could try again with another</font>

982
00:39:04,510 --> 00:39:09,520
<font color="#CCCCCC">application if your identity had changed</font>

983
00:39:07,510 --> 00:39:12,790
you can use the same set<font color="#CCCCCC"> of</font><font color="#E5E5E5"> steps to</font>

984
00:39:09,520 --> 00:39:15,520
target any user<font color="#E5E5E5"> that you</font><font color="#CCCCCC"> want it does</font>

985
00:39:12,790 --> 00:39:17,980
<font color="#E5E5E5">depend on a bit on how these</font><font color="#CCCCCC"> usernames</font>

986
00:39:15,520 --> 00:39:19,750
were programmed<font color="#E5E5E5"> but in some cases you</font>

987
00:39:17,980 --> 00:39:24,460
may not even need a<font color="#E5E5E5"> comment truncation</font>

988
00:39:19,750 --> 00:39:26,859
vulnerability at all so if you were a

989
00:39:24,460 --> 00:39:29,320
<font color="#E5E5E5">user of Octus dynamic expressions and</font>

990
00:39:26,859 --> 00:39:31,869
our user expressions and you wanted<font color="#E5E5E5"> to</font>

991
00:39:29,320 --> 00:39:34,720
remediate this you could do so<font color="#CCCCCC"> by either</font>

992
00:39:31,869 --> 00:39:36,580
<font color="#E5E5E5">avoiding programmable identities or</font>

993
00:39:34,720 --> 00:39:39,189
disappointing them with writable user

994
00:39:36,580 --> 00:39:41,290
<font color="#CCCCCC">attributes</font><font color="#E5E5E5"> octave remediation plan for</font>

995
00:39:39,190 --> 00:39:44,560
<font color="#E5E5E5">this issue when I first reported it was</font>

996
00:39:41,290 --> 00:39:45,220
to mark some of these profile attributes

997
00:39:44,560 --> 00:39:47,440
<font color="#E5E5E5">that</font><font color="#CCCCCC"> I mentioned</font>

998
00:39:45,220 --> 00:39:50,169
<font color="#E5E5E5">is read</font><font color="#CCCCCC"> only by default for new</font>

999
00:39:47,440 --> 00:39:51,520
organizations<font color="#CCCCCC"> at the time there were no</font>

1000
00:39:50,170 --> 00:39:54,130
<font color="#E5E5E5">stated</font><font color="#CCCCCC"> plans to change</font><font color="#E5E5E5"> existing</font>

1001
00:39:51,520 --> 00:39:56,290
<font color="#E5E5E5">organizations but prior</font><font color="#CCCCCC"> to this</font>

1002
00:39:54,130 --> 00:39:58,570
presentation<font color="#CCCCCC"> octave did state that they</font>

1003
00:39:56,290 --> 00:40:01,150
worked<font color="#E5E5E5"> with customers</font><font color="#CCCCCC"> to disable mutable</font>

1004
00:39:58,570 --> 00:40:03,190
user attributes<font color="#CCCCCC"> and existing orgs but I</font>

1005
00:40:01,150 --> 00:40:04,900
don't<font color="#E5E5E5"> have timelines or contexts on the</font>

1006
00:40:03,190 --> 00:40:06,250
scope of<font color="#CCCCCC"> that so if you use these</font>

1007
00:40:04,900 --> 00:40:09,340
<font color="#CCCCCC">features it probably</font><font color="#E5E5E5"> wouldn't hurt to</font>

1008
00:40:06,250 --> 00:40:10,810
<font color="#E5E5E5">spot-check your configuration and it's</font>

1009
00:40:09,340 --> 00:40:12,880
worth<font color="#E5E5E5"> noting that in general it's still</font>

1010
00:40:10,810 --> 00:40:15,099
possible<font color="#E5E5E5"> to configure an application in</font>

1011
00:40:12,880 --> 00:40:17,920
<font color="#E5E5E5">this way but the changes that octave</font>

1012
00:40:15,099 --> 00:40:21,190
made for new organizations<font color="#E5E5E5"> made this</font>

1013
00:40:17,920 --> 00:40:22,869
foot gun a lot easier to avoid or I'm a

1014
00:40:21,190 --> 00:40:28,270
lot<font color="#E5E5E5"> more difficult to stumble across by</font>

1015
00:40:22,869 --> 00:40:29,920
accident so to wrap<font color="#CCCCCC"> things up so I hope</font>

1016
00:40:28,270 --> 00:40:32,200
<font color="#E5E5E5">this talk demonstrates that even old and</font>

1017
00:40:29,920 --> 00:40:33,760
frequently used systems may<font color="#CCCCCC"> have some</font>

1018
00:40:32,200 --> 00:40:35,830
interesting vulnerability classes lying

1019
00:40:33,760 --> 00:40:38,410
dormant<font color="#E5E5E5"> underneath piles of complexity</font>

1020
00:40:35,830 --> 00:40:40,540
<font color="#E5E5E5">and I'd also like</font><font color="#CCCCCC"> to emphasize that we</font>

1021
00:40:38,410 --> 00:40:42,339
could only<font color="#E5E5E5"> look at so many systems and I</font>

1022
00:40:40,540 --> 00:40:44,349
hope this talk inspires some a few folks

1023
00:40:42,340 --> 00:40:47,410
to go out and look<font color="#E5E5E5"> at their own SSO set</font>

1024
00:40:44,349 --> 00:40:48,880
<font color="#E5E5E5">up and see what they can</font><font color="#CCCCCC"> find and then</font>

1025
00:40:47,410 --> 00:40:50,859
finally I'd<font color="#CCCCCC"> like to give a shout out to</font>

1026
00:40:48,880 --> 00:40:52,330
<font color="#CCCCCC">cert CC</font><font color="#E5E5E5"> and duo for supporting this</font>

1027
00:40:50,859 --> 00:40:55,089
research<font color="#CCCCCC"> and the coordinated disclosure</font>

1028
00:40:52,330 --> 00:40:57,160
<font color="#E5E5E5">as well as big thanks</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> any vendors who</font>

1029
00:40:55,089 --> 00:40:58,810
provided<font color="#CCCCCC"> patchers</font><font color="#E5E5E5"> to their users and</font>

1030
00:40:57,160 --> 00:41:01,049
with that thank<font color="#E5E5E5"> you</font><font color="#CCCCCC"> all as well</font><font color="#E5E5E5"> for</font>

1031
00:40:58,810 --> 00:41:01,049
<font color="#CCCCCC">coming</font>

1032
00:41:03,720 --> 00:41:05,779
you

