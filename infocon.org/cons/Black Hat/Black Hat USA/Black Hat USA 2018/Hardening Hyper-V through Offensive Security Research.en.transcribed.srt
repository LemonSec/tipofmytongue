1
00:00:00,030 --> 00:00:04,830
hi everyone<font color="#CCCCCC"> like candy</font><font color="#E5E5E5"> just said my</font>

2
00:00:02,520 --> 00:00:07,490
<font color="#E5E5E5">name's</font><font color="#CCCCCC"> Jorden and I work at Microsoft's</font>

3
00:00:04,830 --> 00:00:09,420
offensive cyber security research team

4
00:00:07,490 --> 00:00:12,420
<font color="#CCCCCC">today I'm going</font><font color="#E5E5E5"> to be talking to you</font>

5
00:00:09,420 --> 00:00:14,400
about<font color="#E5E5E5"> exploiting hyper-v and</font><font color="#CCCCCC"> you might</font>

6
00:00:12,420 --> 00:00:15,839
be wondering<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> York</font><font color="#E5E5E5"> and Microsoft</font>

7
00:00:14,400 --> 00:00:18,930
<font color="#E5E5E5">what are you talking about this what's</font>

8
00:00:15,839 --> 00:00:21,050
the point<font color="#CCCCCC"> and so it turns out</font><font color="#E5E5E5"> this team</font>

9
00:00:18,930 --> 00:00:24,960
that<font color="#CCCCCC"> I work on</font><font color="#E5E5E5"> Microsoft</font><font color="#CCCCCC"> to us are you</font>

10
00:00:21,050 --> 00:00:26,519
<font color="#CCCCCC">probably have not</font><font color="#E5E5E5"> heard</font><font color="#CCCCCC"> of but we are</font>

11
00:00:24,960 --> 00:00:28,109
continuously writing exploits<font color="#E5E5E5"> for</font>

12
00:00:26,519 --> 00:00:31,169
Microsoft products<font color="#E5E5E5"> and the whole</font><font color="#CCCCCC"> idea</font>

13
00:00:28,109 --> 00:00:33,180
behind that is<font color="#CCCCCC"> that we are hoping</font><font color="#E5E5E5"> to</font>

14
00:00:31,170 --> 00:00:35,070
that by<font color="#E5E5E5"> developing these exploits</font>

15
00:00:33,180 --> 00:00:36,899
ourselves we will<font color="#E5E5E5"> be able to get ahead</font>

16
00:00:35,070 --> 00:00:39,000
of<font color="#E5E5E5"> attackers and try to</font><font color="#CCCCCC"> figure</font><font color="#E5E5E5"> out not</font>

17
00:00:36,899 --> 00:00:41,460
<font color="#E5E5E5">only where vulnerabilities are but also</font>

18
00:00:39,000 --> 00:00:42,450
<font color="#E5E5E5">what</font><font color="#CCCCCC"> kind of exploit techniques will be</font>

19
00:00:41,460 --> 00:00:45,000
<font color="#E5E5E5">necessary to exploit these</font>

20
00:00:42,450 --> 00:00:46,200
vulnerabilities<font color="#CCCCCC"> right</font><font color="#E5E5E5"> and if we are able</font>

21
00:00:45,000 --> 00:00:48,239
<font color="#CCCCCC">to do that</font><font color="#E5E5E5"> then we</font><font color="#CCCCCC"> can come up with</font>

22
00:00:46,200 --> 00:00:50,399
<font color="#E5E5E5">mitigation strategies mitigation</font>

23
00:00:48,239 --> 00:00:52,230
technology<font color="#E5E5E5"> that we can implement in</font>

24
00:00:50,399 --> 00:00:54,059
Windows before these attack techniques

25
00:00:52,230 --> 00:00:58,230
are actually used<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the wild and so</font>

26
00:00:54,059 --> 00:01:01,410
hyper-v is a target<font color="#CCCCCC"> that we had</font><font color="#E5E5E5"> you know</font>

27
00:00:58,230 --> 00:01:04,289
last year<font color="#E5E5E5"> and I feel like it's a pretty</font>

28
00:01:01,410 --> 00:01:06,960
<font color="#E5E5E5">good</font><font color="#CCCCCC"> example of our work</font><font color="#E5E5E5"> in terms of you</font>

29
00:01:04,290 --> 00:01:09,479
know<font color="#E5E5E5"> giving diving deep into a component</font>

30
00:01:06,960 --> 00:01:11,520
<font color="#E5E5E5">finding some vulnerabilities explaining</font>

31
00:01:09,479 --> 00:01:13,670
those<font color="#CCCCCC"> vulnerabilities and then using</font><font color="#E5E5E5"> our</font>

32
00:01:11,520 --> 00:01:16,229
learnings<font color="#CCCCCC"> from this whole operation</font><font color="#E5E5E5"> in</font>

33
00:01:13,670 --> 00:01:19,140
applying them to Windows in<font color="#E5E5E5"> order to</font>

34
00:01:16,229 --> 00:01:20,189
harden<font color="#E5E5E5"> it and so that's basically you</font>

35
00:01:19,140 --> 00:01:22,020
know I just<font color="#CCCCCC"> basically laid out the</font>

36
00:01:20,189 --> 00:01:23,279
entire talk for you<font color="#CCCCCC"> we're gonna be</font>

37
00:01:22,020 --> 00:01:25,048
looking<font color="#CCCCCC"> at vulnerabilities in hyper-v</font>

38
00:01:23,280 --> 00:01:27,540
<font color="#E5E5E5">we're going to be exploiting them and</font>

39
00:01:25,049 --> 00:01:29,430
then we are going<font color="#CCCCCC"> to be talking about</font>

40
00:01:27,540 --> 00:01:31,619
how<font color="#E5E5E5"> we can make Windows better and</font>

41
00:01:29,430 --> 00:01:33,780
harder<font color="#CCCCCC"> to exploit in this context in</font>

42
00:01:31,619 --> 00:01:35,670
addition to<font color="#E5E5E5"> that there will be a live</font>

43
00:01:33,780 --> 00:01:36,720
demo<font color="#CCCCCC"> towards the</font><font color="#E5E5E5"> end of the talk so</font>

44
00:01:35,670 --> 00:01:40,799
<font color="#CCCCCC">please don't</font><font color="#E5E5E5"> leave like them</font><font color="#CCCCCC"> it will</font><font color="#E5E5E5"> be</font>

45
00:01:36,720 --> 00:01:42,810
<font color="#E5E5E5">pretty cool</font><font color="#CCCCCC"> and yeah let's get going so</font>

46
00:01:40,799 --> 00:01:44,310
the first thing is if<font color="#E5E5E5"> we want to talk</font>

47
00:01:42,810 --> 00:01:46,619
<font color="#CCCCCC">about hyper-v we need to actually</font>

48
00:01:44,310 --> 00:01:48,210
<font color="#E5E5E5">understand what hyper-v is and I don't</font>

49
00:01:46,619 --> 00:01:51,240
<font color="#E5E5E5">expect any of you</font><font color="#CCCCCC"> in the audience to be</font>

50
00:01:48,210 --> 00:01:52,679
<font color="#E5E5E5">like intimately familiar with the well</font>

51
00:01:51,240 --> 00:01:54,420
you know all<font color="#CCCCCC"> the details of how hyper-v</font>

52
00:01:52,680 --> 00:01:57,090
works so I'm going to<font color="#E5E5E5"> start</font><font color="#CCCCCC"> a very very</font>

53
00:01:54,420 --> 00:01:58,860
high level<font color="#E5E5E5"> essentially this is hyper-v</font>

54
00:01:57,090 --> 00:02:00,119
<font color="#E5E5E5">right if you were to use hyper-v and</font>

55
00:01:58,860 --> 00:02:01,350
<font color="#E5E5E5">your desktop</font><font color="#CCCCCC"> machine this is what you</font>

56
00:02:00,119 --> 00:02:03,180
would<font color="#E5E5E5"> see you have your own little</font>

57
00:02:01,350 --> 00:02:04,439
desktop<font color="#CCCCCC"> up there and you</font><font color="#E5E5E5"> have a little</font>

58
00:02:03,180 --> 00:02:06,899
window<font color="#CCCCCC"> and that little</font><font color="#E5E5E5"> window you have</font>

59
00:02:04,439 --> 00:02:08,310
<font color="#E5E5E5">your own like little other desktop right</font>

60
00:02:06,899 --> 00:02:10,560
so what's<font color="#E5E5E5"> going on here is you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> the</font>

61
00:02:08,310 --> 00:02:12,420
<font color="#CCCCCC">host</font><font color="#E5E5E5"> operating system which</font><font color="#CCCCCC"> is hosting</font>

62
00:02:10,560 --> 00:02:13,770
these virtual<font color="#CCCCCC"> machines and in</font>

63
00:02:12,420 --> 00:02:15,720
window you have<font color="#E5E5E5"> the guest operating</font>

64
00:02:13,770 --> 00:02:17,819
<font color="#CCCCCC">system which is</font><font color="#E5E5E5"> running inside</font><font color="#CCCCCC"> of one</font><font color="#E5E5E5"> of</font>

65
00:02:15,720 --> 00:02:20,069
<font color="#E5E5E5">those virtual machines</font><font color="#CCCCCC"> and so what</font>

66
00:02:17,819 --> 00:02:22,109
hyper-v<font color="#E5E5E5"> is is it's</font><font color="#CCCCCC"> the virtualization</font>

67
00:02:20,069 --> 00:02:24,299
stack if that makes it possible for that

68
00:02:22,110 --> 00:02:26,340
<font color="#E5E5E5">guest operating system to run when I</font>

69
00:02:24,300 --> 00:02:28,590
look at<font color="#E5E5E5"> it from</font><font color="#CCCCCC"> a slightly more detailed</font>

70
00:02:26,340 --> 00:02:30,180
<font color="#CCCCCC">point of view</font><font color="#E5E5E5"> this is</font><font color="#CCCCCC"> what you would</font><font color="#E5E5E5"> get</font>

71
00:02:28,590 --> 00:02:32,340
to the<font color="#E5E5E5"> left you have</font><font color="#CCCCCC"> the host operating</font>

72
00:02:30,180 --> 00:02:34,650
<font color="#E5E5E5">system once again so right you have the</font>

73
00:02:32,340 --> 00:02:37,110
guest<font color="#CCCCCC"> operating system and what you can</font>

74
00:02:34,650 --> 00:02:39,330
see<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> the host operating</font><font color="#CCCCCC"> system is</font>

75
00:02:37,110 --> 00:02:41,760
able<font color="#CCCCCC"> to talk to</font><font color="#E5E5E5"> Hardware directly</font><font color="#CCCCCC"> for</font>

76
00:02:39,330 --> 00:02:43,560
the most part and the guest operating

77
00:02:41,760 --> 00:02:44,730
<font color="#CCCCCC">system is</font><font color="#E5E5E5"> not both of</font><font color="#CCCCCC"> them are able to</font>

78
00:02:43,560 --> 00:02:46,709
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> to this</font><font color="#E5E5E5"> thing called the hypervisor</font>

79
00:02:44,730 --> 00:02:49,649
which<font color="#E5E5E5"> is kind of you know blob in there</font>

80
00:02:46,709 --> 00:02:52,380
<font color="#E5E5E5">it's you know a level of</font><font color="#CCCCCC"> security</font>

81
00:02:49,650 --> 00:02:53,850
superior<font color="#E5E5E5"> to the kernel it has its own</font>

82
00:02:52,380 --> 00:02:55,440
memory<font color="#E5E5E5"> like even though host operating</font>

83
00:02:53,850 --> 00:02:57,840
system<font color="#E5E5E5"> is not meant to</font><font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to mess</font>

84
00:02:55,440 --> 00:02:59,280
<font color="#E5E5E5">with</font><font color="#CCCCCC"> that and so the hypervisor</font><font color="#E5E5E5"> is able</font>

85
00:02:57,840 --> 00:03:01,080
to talk to<font color="#CCCCCC"> hardware the host operating</font>

86
00:02:59,280 --> 00:03:04,260
<font color="#E5E5E5">system is able to talk the hardware but</font>

87
00:03:01,080 --> 00:03:06,090
the guest to us is<font color="#E5E5E5"> not and you might be</font>

88
00:03:04,260 --> 00:03:07,980
wondering<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> well that's cool that</font>

89
00:03:06,090 --> 00:03:10,650
<font color="#CCCCCC">makes sense</font><font color="#E5E5E5"> except it</font><font color="#CCCCCC"> doesn't because</font>

90
00:03:07,980 --> 00:03:12,149
what if a program in my guest OS wants

91
00:03:10,650 --> 00:03:13,410
to<font color="#CCCCCC"> access network</font><font color="#E5E5E5"> what if it wants to</font>

92
00:03:12,150 --> 00:03:15,840
access<font color="#CCCCCC"> the storage</font><font color="#E5E5E5"> it has to be able to</font>

93
00:03:13,410 --> 00:03:18,450
do that<font color="#E5E5E5"> somehow</font><font color="#CCCCCC"> and so let's take an</font>

94
00:03:15,840 --> 00:03:20,160
<font color="#CCCCCC">example of this process</font><font color="#E5E5E5"> food</font><font color="#CCCCCC"> at exe</font>

95
00:03:18,450 --> 00:03:22,320
which is running<font color="#E5E5E5"> user mode and the guest</font>

96
00:03:20,160 --> 00:03:25,890
OS so Fuu dot exe wants to access<font color="#CCCCCC"> a file</font>

97
00:03:22,320 --> 00:03:29,250
off of a hard<font color="#CCCCCC"> disk</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> going to</font>

98
00:03:25,890 --> 00:03:30,988
do that by you know<font color="#E5E5E5"> using some system</font>

99
00:03:29,250 --> 00:03:33,540
calls to talk to the guest<font color="#CCCCCC"> operating</font>

100
00:03:30,989 --> 00:03:36,209
system<font color="#CCCCCC"> guest OS</font><font color="#E5E5E5"> typically would just go</font>

101
00:03:33,540 --> 00:03:38,280
<font color="#E5E5E5">and talk</font><font color="#CCCCCC"> directly to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> the hard drive</font>

102
00:03:36,209 --> 00:03:39,870
<font color="#E5E5E5">unfortunately like I just</font><font color="#CCCCCC"> mentioned a</font>

103
00:03:38,280 --> 00:03:41,280
couple times<font color="#CCCCCC"> the guest OS does not have</font>

104
00:03:39,870 --> 00:03:44,459
<font color="#CCCCCC">access</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> hardware</font><font color="#E5E5E5"> so what happens</font>

105
00:03:41,280 --> 00:03:47,609
instead<font color="#E5E5E5"> is the</font><font color="#CCCCCC"> i/o stack in the kernel</font>

106
00:03:44,459 --> 00:03:49,709
guest OS is going to talk<font color="#E5E5E5"> to this driver</font>

107
00:03:47,609 --> 00:03:52,560
that lives in the guest OS kernel<font color="#E5E5E5"> that's</font>

108
00:03:49,709 --> 00:03:53,910
called store<font color="#CCCCCC"> VSC</font><font color="#E5E5E5"> so the SC in this</font>

109
00:03:52,560 --> 00:03:57,209
context stands for<font color="#E5E5E5"> virtualization</font>

110
00:03:53,910 --> 00:03:59,370
service client or consumer or one of

111
00:03:57,209 --> 00:04:01,109
those two and<font color="#E5E5E5"> basically the</font><font color="#CCCCCC"> idea</font><font color="#E5E5E5"> is that</font>

112
00:03:59,370 --> 00:04:03,390
<font color="#E5E5E5">this store via C is going to kind of</font>

113
00:04:01,109 --> 00:04:06,120
provide an<font color="#CCCCCC"> interface that</font><font color="#E5E5E5"> looks like a</font>

114
00:04:03,390 --> 00:04:07,980
hard drive<font color="#E5E5E5"> and is instead going</font><font color="#CCCCCC"> to talk</font>

115
00:04:06,120 --> 00:04:10,019
to this big blob in the<font color="#CCCCCC"> middle called VM</font>

116
00:04:07,980 --> 00:04:12,060
bus and the<font color="#CCCCCC"> n bus you can</font><font color="#E5E5E5"> think of as a</font>

117
00:04:10,019 --> 00:04:14,370
communication channel<font color="#CCCCCC"> between the</font><font color="#E5E5E5"> guest</font>

118
00:04:12,060 --> 00:04:15,720
and<font color="#CCCCCC"> the host right and so then on</font><font color="#E5E5E5"> the</font>

119
00:04:14,370 --> 00:04:17,190
other<font color="#E5E5E5"> end</font><font color="#CCCCCC"> of the N bus of course</font><font color="#E5E5E5"> in the</font>

120
00:04:15,720 --> 00:04:18,720
host<font color="#E5E5E5"> you're going to have the</font><font color="#CCCCCC"> equivalent</font>

121
00:04:17,190 --> 00:04:21,029
to store BSC<font color="#CCCCCC"> Villas in the host store</font>

122
00:04:18,720 --> 00:04:22,770
VSP and so<font color="#CCCCCC"> in this</font><font color="#E5E5E5"> case VSP is</font>

123
00:04:21,029 --> 00:04:24,750
virtualization service provider<font color="#E5E5E5"> and</font>

124
00:04:22,770 --> 00:04:26,430
basically that's<font color="#CCCCCC"> just going</font><font color="#E5E5E5"> to decode</font>

125
00:04:24,750 --> 00:04:29,250
whatever it is<font color="#CCCCCC"> at store BSC</font>

126
00:04:26,430 --> 00:04:31,259
<font color="#E5E5E5">is asking for and then do that operation</font>

127
00:04:29,250 --> 00:04:32,460
<font color="#E5E5E5">on the guest</font><font color="#CCCCCC"> colonel</font><font color="#E5E5E5"> it's going to go</font>

128
00:04:31,259 --> 00:04:35,039
through its own<font color="#CCCCCC"> i/o</font><font color="#E5E5E5"> stack and that's</font>

129
00:04:32,460 --> 00:04:36,479
going<font color="#E5E5E5"> to jump into the hardware so</font><font color="#CCCCCC"> we're</font>

130
00:04:35,039 --> 00:04:39,870
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to talk about</font><font color="#E5E5E5"> hard disk get the</font>

131
00:04:36,479 --> 00:04:41,940
<font color="#E5E5E5">sectors the you know the guest OS might</font>

132
00:04:39,870 --> 00:04:44,880
be asking for<font color="#E5E5E5"> and that's just gonna be</font>

133
00:04:41,940 --> 00:04:47,250
that which is cool<font color="#E5E5E5"> if you think</font><font color="#CCCCCC"> about</font>

134
00:04:44,880 --> 00:04:48,449
this like a sandbox<font color="#E5E5E5"> model you can really</font>

135
00:04:47,250 --> 00:04:50,699
think<font color="#CCCCCC"> about the hoe</font><font color="#E5E5E5"> stress of being</font><font color="#CCCCCC"> a</font>

136
00:04:48,449 --> 00:04:52,680
you know<font color="#CCCCCC"> being a broker</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> has the</font>

137
00:04:50,699 --> 00:04:55,080
<font color="#E5E5E5">ability to intercept every i/o access</font>

138
00:04:52,680 --> 00:04:56,639
essentially that the guest OS is going

139
00:04:55,080 --> 00:04:57,960
to have and so<font color="#E5E5E5"> I can decide</font><font color="#CCCCCC"> okay I want</font>

140
00:04:56,639 --> 00:04:59,430
you<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to access this</font><font color="#CCCCCC"> piece</font><font color="#E5E5E5"> of</font>

141
00:04:57,960 --> 00:05:00,750
<font color="#E5E5E5">hardware</font><font color="#CCCCCC"> I want you to be able to access</font>

142
00:04:59,430 --> 00:05:01,919
this piece of harder but<font color="#CCCCCC"> not naturally</font>

143
00:05:00,750 --> 00:05:04,410
like this<font color="#E5E5E5"> other piece</font><font color="#CCCCCC"> of hardware right</font>

144
00:05:01,919 --> 00:05:05,909
<font color="#E5E5E5">and middle that of course the guest OS</font>

145
00:05:04,410 --> 00:05:07,710
does not have access<font color="#E5E5E5"> to</font><font color="#CCCCCC"> old memory it</font>

146
00:05:05,910 --> 00:05:09,830
only has<font color="#CCCCCC"> access to</font><font color="#E5E5E5"> a few CPU cores which</font>

147
00:05:07,710 --> 00:05:13,229
are is decided by the hypervisor<font color="#CCCCCC"> and so</font>

148
00:05:09,830 --> 00:05:16,370
yeah<font color="#CCCCCC"> we have like</font><font color="#E5E5E5"> a very tight grip on</font>

149
00:05:13,229 --> 00:05:19,020
what the guest OS<font color="#E5E5E5"> has access to or not</font>

150
00:05:16,370 --> 00:05:20,520
now the thing is<font color="#E5E5E5"> I</font><font color="#CCCCCC"> just talked about VM</font>

151
00:05:19,020 --> 00:05:22,049
bus<font color="#E5E5E5"> as like this kind</font><font color="#CCCCCC"> of blob</font>

152
00:05:20,520 --> 00:05:23,639
communications channel<font color="#E5E5E5"> between the host</font>

153
00:05:22,050 --> 00:05:26,039
and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> guest</font><font color="#E5E5E5"> didn't really explain</font><font color="#CCCCCC"> how</font>

154
00:05:23,639 --> 00:05:28,020
it works<font color="#E5E5E5"> and it's kind of important</font><font color="#CCCCCC"> the</font>

155
00:05:26,039 --> 00:05:29,099
thing is you might<font color="#CCCCCC"> be thinking okay</font><font color="#E5E5E5"> if</font>

156
00:05:28,020 --> 00:05:30,330
you looked at<font color="#CCCCCC"> that last slide</font><font color="#E5E5E5"> we</font>

157
00:05:29,099 --> 00:05:31,680
actually have<font color="#CCCCCC"> the guest to us and the</font>

158
00:05:30,330 --> 00:05:33,630
host<font color="#E5E5E5"> to us have</font><font color="#CCCCCC"> access to the hypervisor</font>

159
00:05:31,680 --> 00:05:34,860
right<font color="#E5E5E5"> so we might as</font><font color="#CCCCCC"> well</font><font color="#E5E5E5"> just use the</font>

160
00:05:33,630 --> 00:05:36,419
<font color="#E5E5E5">hypervisor has that communications</font>

161
00:05:34,860 --> 00:05:37,949
channel<font color="#E5E5E5"> of course you don't really want</font>

162
00:05:36,419 --> 00:05:39,270
to do<font color="#E5E5E5"> that because context switches into</font>

163
00:05:37,949 --> 00:05:41,010
<font color="#E5E5E5">the hypervisor all the time</font><font color="#CCCCCC"> archive</font>

164
00:05:39,270 --> 00:05:43,109
expensive so instead what you're<font color="#E5E5E5"> gonna</font>

165
00:05:41,010 --> 00:05:44,570
do is use this concept<font color="#E5E5E5"> of shared memory</font>

166
00:05:43,110 --> 00:05:46,590
between<font color="#E5E5E5"> the guest</font><font color="#CCCCCC"> in the host</font><font color="#E5E5E5"> and</font>

167
00:05:44,570 --> 00:05:47,789
basically what's<font color="#E5E5E5"> got was</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> be</font>

168
00:05:46,590 --> 00:05:50,039
<font color="#E5E5E5">happening there is you're just</font><font color="#CCCCCC"> gonna</font>

169
00:05:47,789 --> 00:05:51,479
<font color="#E5E5E5">pick a piece of memory in physical</font>

170
00:05:50,039 --> 00:05:54,210
<font color="#E5E5E5">memory and</font><font color="#CCCCCC"> you're going to</font><font color="#E5E5E5"> be able to</font>

171
00:05:51,479 --> 00:05:56,669
map it in both the hosts memory space

172
00:05:54,210 --> 00:05:58,020
and the guest memory space once that

173
00:05:56,669 --> 00:05:59,639
happens you can<font color="#E5E5E5"> kind of have the</font>

174
00:05:58,020 --> 00:06:02,008
embossed<font color="#E5E5E5"> interpret that piece of memory</font>

175
00:05:59,639 --> 00:06:03,960
as a ring buffer<font color="#E5E5E5"> which means that you</font>

176
00:06:02,009 --> 00:06:05,490
know you're just<font color="#E5E5E5"> going to copy a packet</font>

177
00:06:03,960 --> 00:06:06,840
<font color="#E5E5E5">into it and another packet in another</font>

178
00:06:05,490 --> 00:06:10,500
packet and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> from once you run out of</font>

179
00:06:06,840 --> 00:06:12,448
<font color="#E5E5E5">space just start over</font><font color="#CCCCCC"> and so based on</font>

180
00:06:10,500 --> 00:06:15,360
<font color="#E5E5E5">that</font><font color="#CCCCCC"> transferring data</font><font color="#E5E5E5"> to and</font><font color="#CCCCCC"> from the</font>

181
00:06:12,449 --> 00:06:17,520
<font color="#E5E5E5">host is pretty simple you just have</font><font color="#CCCCCC"> this</font>

182
00:06:15,360 --> 00:06:19,590
packet in your<font color="#CCCCCC"> VSC</font><font color="#E5E5E5"> you copy it into the</font>

183
00:06:17,520 --> 00:06:21,180
ring buffer<font color="#E5E5E5"> since that piece of memory</font>

184
00:06:19,590 --> 00:06:22,888
is shared<font color="#E5E5E5"> the package</font><font color="#CCCCCC"> just like</font>

185
00:06:21,180 --> 00:06:24,780
magically shows up everywhere this piece

186
00:06:22,889 --> 00:06:25,979
of memory is mapped<font color="#E5E5E5"> out and then the</font>

187
00:06:24,780 --> 00:06:27,739
host will be alerted<font color="#CCCCCC"> that there's a</font>

188
00:06:25,979 --> 00:06:29,699
packet in there it's<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to grab</font><font color="#E5E5E5"> it</font>

189
00:06:27,740 --> 00:06:32,610
interpret it do whatever it wants<font color="#CCCCCC"> with</font>

190
00:06:29,699 --> 00:06:33,900
it<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> that'll be that</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> only</font>

191
00:06:32,610 --> 00:06:36,419
<font color="#E5E5E5">problem with that is</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> course</font><font color="#CCCCCC"> this we</font>

192
00:06:33,900 --> 00:06:38,679
have<font color="#E5E5E5"> ring buffer and you know this these</font>

193
00:06:36,419 --> 00:06:40,030
machines<font color="#E5E5E5"> are highly well</font>

194
00:06:38,680 --> 00:06:42,130
you know modern<font color="#E5E5E5"> machines have a lot of</font>

195
00:06:40,030 --> 00:06:43,299
<font color="#E5E5E5">threads</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of different</font><font color="#CCCCCC"> components</font>

196
00:06:42,130 --> 00:06:46,570
might want to<font color="#E5E5E5"> be able</font><font color="#CCCCCC"> to talk to the</font>

197
00:06:43,300 --> 00:06:47,949
<font color="#E5E5E5">host to us</font><font color="#CCCCCC"> and using a ring buffer</font><font color="#E5E5E5"> for</font>

198
00:06:46,570 --> 00:06:49,060
that is kind of problematic<font color="#E5E5E5"> if you're</font>

199
00:06:47,949 --> 00:06:52,750
going<font color="#E5E5E5"> to be locking the ring buffer</font>

200
00:06:49,060 --> 00:06:55,300
constantly in order<font color="#CCCCCC"> to talk to the host</font>

201
00:06:52,750 --> 00:06:57,400
OS side of things<font color="#E5E5E5"> you are not going to</font>

202
00:06:55,300 --> 00:06:58,690
be able<font color="#CCCCCC"> to send a lot of packets</font><font color="#E5E5E5"> at</font>

203
00:06:57,400 --> 00:07:00,070
least not a lot<font color="#E5E5E5"> of packets they're</font>

204
00:06:58,690 --> 00:07:01,960
really big<font color="#E5E5E5"> because if you're gonna be</font>

205
00:07:00,070 --> 00:07:03,699
<font color="#CCCCCC">constantly copying memory</font><font color="#E5E5E5"> in and out of</font>

206
00:07:01,960 --> 00:07:05,020
the ring buffer<font color="#CCCCCC"> well that takes time</font>

207
00:07:03,699 --> 00:07:08,110
everything is serialized because the

208
00:07:05,020 --> 00:07:09,698
spring buffer and that's not<font color="#E5E5E5"> ideal</font><font color="#CCCCCC"> so in</font>

209
00:07:08,110 --> 00:07:12,190
order to<font color="#E5E5E5"> palette like deal</font><font color="#CCCCCC"> with that</font>

210
00:07:09,699 --> 00:07:14,289
problem<font color="#CCCCCC"> we introduced this concept of</font>

211
00:07:12,190 --> 00:07:16,570
shared memory that is that can be<font color="#E5E5E5"> sent</font>

212
00:07:14,289 --> 00:07:18,550
<font color="#CCCCCC">from the guest</font><font color="#E5E5E5"> to the host through VM</font>

213
00:07:16,570 --> 00:07:20,740
bus<font color="#E5E5E5"> and so you have this kind of thing</font>

214
00:07:18,550 --> 00:07:23,380
there the<font color="#E5E5E5"> GP ADL</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> call it a G paddle</font>

215
00:07:20,740 --> 00:07:25,539
<font color="#E5E5E5">that stands for guest physical address</font>

216
00:07:23,380 --> 00:07:28,210
<font color="#CCCCCC">descriptor list if you're familiar with</font>

217
00:07:25,539 --> 00:07:30,969
<font color="#E5E5E5">with</font><font color="#CCCCCC"> Windows kernel lingo this is</font>

218
00:07:28,210 --> 00:07:33,099
basically an MDL<font color="#E5E5E5"> that can span you know</font>

219
00:07:30,970 --> 00:07:34,840
the the boundary between the<font color="#E5E5E5"> host</font><font color="#CCCCCC"> and</font>

220
00:07:33,099 --> 00:07:35,889
<font color="#E5E5E5">the guest so the idea is that the guest</font>

221
00:07:34,840 --> 00:07:37,989
is going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> allocate this piece of</font>

222
00:07:35,889 --> 00:07:39,729
memory<font color="#CCCCCC"> there's going</font><font color="#E5E5E5"> to say okay I want</font>

223
00:07:37,990 --> 00:07:41,349
to send<font color="#CCCCCC"> that piece of memory over to the</font>

224
00:07:39,729 --> 00:07:43,419
<font color="#E5E5E5">host and instead</font><font color="#CCCCCC"> of copying</font><font color="#E5E5E5"> that memory</font>

225
00:07:41,349 --> 00:07:45,460
<font color="#E5E5E5">in and out of the</font><font color="#CCCCCC"> vorenii buffer is just</font>

226
00:07:43,419 --> 00:07:46,900
going<font color="#E5E5E5"> to basically give</font><font color="#CCCCCC"> a reference to</font>

227
00:07:45,460 --> 00:07:48,729
that piece of<font color="#E5E5E5"> memory and then that piece</font>

228
00:07:46,900 --> 00:07:50,739
of memory is<font color="#E5E5E5"> going to be mapped into the</font>

229
00:07:48,729 --> 00:07:51,940
host OS<font color="#E5E5E5"> and the host OS at that point</font>

230
00:07:50,740 --> 00:07:53,949
can do whatever it<font color="#E5E5E5"> wants</font><font color="#CCCCCC"> with it I could</font>

231
00:07:51,940 --> 00:07:56,650
copy memory<font color="#E5E5E5"> out of it can't copy memory</font>

232
00:07:53,949 --> 00:07:58,599
into it it<font color="#E5E5E5"> can keep it map or</font><font color="#CCCCCC"> on map it</font>

233
00:07:56,650 --> 00:08:00,849
or whatever<font color="#E5E5E5"> and that's basically the</font><font color="#CCCCCC"> way</font>

234
00:07:58,599 --> 00:08:03,550
you're going<font color="#E5E5E5"> to be able</font><font color="#CCCCCC"> to send larger</font>

235
00:08:00,849 --> 00:08:04,990
amounts<font color="#E5E5E5"> of data a</font><font color="#CCCCCC"> hilar higher frequency</font>

236
00:08:03,550 --> 00:08:07,990
than<font color="#E5E5E5"> you would be able to adjust</font><font color="#CCCCCC"> a ring</font>

237
00:08:04,990 --> 00:08:11,020
<font color="#CCCCCC">buffer</font><font color="#E5E5E5"> so at this point you are</font>

238
00:08:07,990 --> 00:08:12,280
<font color="#E5E5E5">essentially hyper-v experts at least as</font>

239
00:08:11,020 --> 00:08:13,690
<font color="#E5E5E5">far as I'm concerned</font><font color="#CCCCCC"> because I'm not a</font>

240
00:08:12,280 --> 00:08:17,109
hyper-v expert this<font color="#E5E5E5"> is basically</font><font color="#CCCCCC"> all I</font>

241
00:08:13,690 --> 00:08:18,669
know about it<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> know I'm I'm here</font>

242
00:08:17,110 --> 00:08:20,710
to write exploits<font color="#E5E5E5"> right here at</font><font color="#CCCCCC"> 5:00</font>

243
00:08:18,669 --> 00:08:22,299
ulnar abilities and so once<font color="#E5E5E5"> we have this</font>

244
00:08:20,710 --> 00:08:23,560
level<font color="#E5E5E5"> of context for hyper-v which is</font>

245
00:08:22,300 --> 00:08:26,050
all you're going to<font color="#E5E5E5"> need for rest of the</font>

246
00:08:23,560 --> 00:08:28,030
talk we are<font color="#CCCCCC"> going to be looking</font><font color="#E5E5E5"> into a</font>

247
00:08:26,050 --> 00:08:32,380
specific<font color="#CCCCCC"> component and this component is</font>

248
00:08:28,030 --> 00:08:34,179
VM<font color="#E5E5E5"> switch VMs which is just the VSP that</font>

249
00:08:32,380 --> 00:08:36,669
provides network access<font color="#CCCCCC"> to the guests</font>

250
00:08:34,179 --> 00:08:37,929
<font color="#E5E5E5">there's really nothing fancy here</font><font color="#CCCCCC"> it's</font>

251
00:08:36,669 --> 00:08:40,659
basically<font color="#CCCCCC"> the</font><font color="#E5E5E5"> same diagram</font><font color="#CCCCCC"> as showing</font>

252
00:08:37,929 --> 00:08:42,189
you<font color="#CCCCCC"> earlier except that VM switch is</font>

253
00:08:40,659 --> 00:08:45,700
<font color="#E5E5E5">going to be accessing the network card</font>

254
00:08:42,190 --> 00:08:46,570
instead<font color="#E5E5E5"> of a hard disk right so the</font>

255
00:08:45,700 --> 00:08:49,360
thing<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you're going</font><font color="#CCCCCC"> to notice here</font>

256
00:08:46,570 --> 00:08:51,649
first<font color="#E5E5E5"> is much like store VSP</font><font color="#CCCCCC"> VM switch</font>

257
00:08:49,360 --> 00:08:53,600
<font color="#CCCCCC">war lives in the host OS kernel</font>

258
00:08:51,649 --> 00:08:54,800
so that means that we<font color="#E5E5E5"> are</font><font color="#CCCCCC"> able to find a</font>

259
00:08:53,600 --> 00:08:57,079
<font color="#CCCCCC">vulnerability in the</font><font color="#E5E5E5"> EM switch and</font>

260
00:08:54,800 --> 00:08:59,628
compromise<font color="#CCCCCC"> you know the host through VM</font>

261
00:08:57,079 --> 00:09:01,969
<font color="#E5E5E5">switch</font><font color="#CCCCCC"> then we'll have full</font><font color="#E5E5E5"> control over</font>

262
00:08:59,629 --> 00:09:03,740
<font color="#E5E5E5">the host</font><font color="#CCCCCC"> OS we won't</font><font color="#E5E5E5"> have to escalate</font>

263
00:09:01,970 --> 00:09:05,869
out of user mode or anything<font color="#CCCCCC"> we'll just</font>

264
00:09:03,740 --> 00:09:07,309
kind of be there<font color="#E5E5E5"> we'll be done it'll be</font>

265
00:09:05,869 --> 00:09:10,339
great<font color="#CCCCCC"> so that</font><font color="#E5E5E5"> makes it a</font><font color="#CCCCCC"> pretty good</font>

266
00:09:07,309 --> 00:09:13,219
<font color="#CCCCCC">target</font><font color="#E5E5E5"> the other thing to know about</font><font color="#CCCCCC"> VM</font>

267
00:09:10,339 --> 00:09:15,800
<font color="#CCCCCC">switch is the way</font><font color="#E5E5E5"> that it works is it</font>

268
00:09:13,220 --> 00:09:17,420
implements<font color="#E5E5E5"> this protocol which is the</font>

269
00:09:15,800 --> 00:09:20,079
<font color="#E5E5E5">Ardis protocol which stands</font><font color="#CCCCCC"> for remote</font>

270
00:09:17,420 --> 00:09:21,800
<font color="#E5E5E5">network device interface something and</font>

271
00:09:20,079 --> 00:09:23,959
basically that's<font color="#CCCCCC"> a</font><font color="#E5E5E5"> protocol that was</font>

272
00:09:21,800 --> 00:09:25,998
introduced<font color="#E5E5E5"> by Microsoft awhile ago</font><font color="#CCCCCC"> that</font>

273
00:09:23,959 --> 00:09:26,959
<font color="#CCCCCC">is typically used to access network</font>

274
00:09:25,999 --> 00:09:29,300
cards over USB

275
00:09:26,959 --> 00:09:31,998
so really<font color="#E5E5E5"> the</font><font color="#CCCCCC"> emphasis you can kind of</font>

276
00:09:29,300 --> 00:09:34,639
<font color="#E5E5E5">think of as a USB network card that is</font>

277
00:09:31,999 --> 00:09:35,779
exposed over<font color="#CCCCCC"> VN bus</font><font color="#E5E5E5"> I'm really</font>

278
00:09:34,639 --> 00:09:38,480
simplifying things<font color="#E5E5E5"> but that's basically</font>

279
00:09:35,779 --> 00:09:40,160
how it<font color="#CCCCCC"> works</font><font color="#E5E5E5"> and so thinking about how</font>

280
00:09:38,480 --> 00:09:42,050
<font color="#E5E5E5">to interact with VM</font><font color="#CCCCCC"> search you're</font><font color="#E5E5E5"> gonna</font>

281
00:09:40,160 --> 00:09:43,550
have two types of messages right I'm

282
00:09:42,050 --> 00:09:46,160
going<font color="#E5E5E5"> to have the messages that you sent</font>

283
00:09:43,550 --> 00:09:47,899
to<font color="#CCCCCC"> VMs which to kind of set</font><font color="#E5E5E5"> up VM switch</font>

284
00:09:46,160 --> 00:09:49,399
tell<font color="#CCCCCC"> it okay</font><font color="#E5E5E5"> this is a protocol version</font>

285
00:09:47,899 --> 00:09:50,509
<font color="#E5E5E5">I want</font><font color="#CCCCCC"> to use these are the</font><font color="#E5E5E5"> buffers</font><font color="#CCCCCC"> I</font>

286
00:09:49,399 --> 00:09:52,639
want to use<font color="#E5E5E5"> this is the size of the</font>

287
00:09:50,509 --> 00:09:54,259
packets<font color="#CCCCCC"> unless N and so</font><font color="#E5E5E5"> on and then</font>

288
00:09:52,639 --> 00:09:55,639
you're going to<font color="#E5E5E5"> have the second layer of</font>

289
00:09:54,259 --> 00:09:57,800
messages which are<font color="#E5E5E5"> these are</font><font color="#CCCCCC"> in this</font>

290
00:09:55,639 --> 00:09:59,660
messages which are<font color="#E5E5E5"> going to let you</font>

291
00:09:57,800 --> 00:10:00,740
<font color="#E5E5E5">interact with VMs which basically in the</font>

292
00:09:59,660 --> 00:10:03,649
same way that you would interact with

293
00:10:00,740 --> 00:10:05,689
<font color="#CCCCCC">the you know</font><font color="#E5E5E5"> USB network card right and</font>

294
00:10:03,649 --> 00:10:07,459
so knowing<font color="#E5E5E5"> that it kind of makes sense</font>

295
00:10:05,689 --> 00:10:09,498
<font color="#CCCCCC">to start looking at the initialization</font>

296
00:10:07,459 --> 00:10:11,748
sequence of<font color="#E5E5E5"> yet a VM switch right like</font>

297
00:10:09,499 --> 00:10:13,129
image so think<font color="#CCCCCC"> of</font><font color="#E5E5E5"> it like to the left</font>

298
00:10:11,749 --> 00:10:15,439
once again you have<font color="#CCCCCC"> the</font><font color="#E5E5E5"> host</font><font color="#CCCCCC"> all right</font>

299
00:10:13,129 --> 00:10:16,819
<font color="#E5E5E5">you have the guest and so bringing up</font>

300
00:10:15,439 --> 00:10:19,219
VMs which is basically just<font color="#E5E5E5"> sending a</font>

301
00:10:16,819 --> 00:10:21,849
few secrets of a few messages<font color="#E5E5E5"> the first</font>

302
00:10:19,220 --> 00:10:24,259
thing is<font color="#E5E5E5"> going to be agreeing on which</font>

303
00:10:21,850 --> 00:10:25,009
on<font color="#E5E5E5"> which protocol versions to use so</font>

304
00:10:24,259 --> 00:10:26,929
you're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> have the protocol</font>

305
00:10:25,009 --> 00:10:29,059
<font color="#E5E5E5">version 4 VMs which they first sent then</font>

306
00:10:26,929 --> 00:10:31,879
the protocol version<font color="#CCCCCC"> 4 the actual</font><font color="#E5E5E5"> or and</font>

307
00:10:29,059 --> 00:10:33,559
dis protocol<font color="#E5E5E5"> that sense and so let's you</font>

308
00:10:31,879 --> 00:10:35,329
know basically<font color="#E5E5E5"> that's just how it works</font>

309
00:10:33,559 --> 00:10:38,179
and then<font color="#CCCCCC"> B after that you're going to</font><font color="#E5E5E5"> be</font>

310
00:10:35,329 --> 00:10:40,370
sending these receive buffers and send

311
00:10:38,179 --> 00:10:41,990
buffers<font color="#CCCCCC"> so the receive buffer</font><font color="#E5E5E5"> and send</font>

312
00:10:40,370 --> 00:10:44,029
buffer basically what's going<font color="#E5E5E5"> to be used</font>

313
00:10:41,990 --> 00:10:46,279
so first off they<font color="#CCCCCC"> are shared pieces of</font>

314
00:10:44,029 --> 00:10:48,139
memory they are<font color="#E5E5E5"> G paddles</font><font color="#CCCCCC"> so the guest</font>

315
00:10:46,279 --> 00:10:50,119
OS allocates them in its own memory

316
00:10:48,139 --> 00:10:52,160
<font color="#CCCCCC">space sends it over</font><font color="#E5E5E5"> through the</font><font color="#CCCCCC"> EM bus</font>

317
00:10:50,119 --> 00:10:54,049
to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> host to us host</font><font color="#E5E5E5"> to us</font><font color="#CCCCCC"> Maps it and</font>

318
00:10:52,160 --> 00:10:57,019
then they're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be used to</font>

319
00:10:54,049 --> 00:10:58,459
<font color="#CCCCCC">basically transfer</font><font color="#E5E5E5"> our in dispatches the</font>

320
00:10:57,019 --> 00:11:00,529
reason to<font color="#E5E5E5"> use those rather than just the</font>

321
00:10:58,459 --> 00:11:01,880
M bus directly<font color="#CCCCCC"> is what I</font><font color="#E5E5E5"> was saying</font>

322
00:11:00,529 --> 00:11:03,770
earlier<font color="#E5E5E5"> that</font>

323
00:11:01,880 --> 00:11:05,270
well this is<font color="#CCCCCC"> exactly the kind</font><font color="#E5E5E5"> of case</font>

324
00:11:03,770 --> 00:11:07,760
that<font color="#E5E5E5"> you would not</font><font color="#CCCCCC"> want to use VN bus</font>

325
00:11:05,270 --> 00:11:09,079
for all the time because<font color="#E5E5E5"> network packets</font>

326
00:11:07,760 --> 00:11:11,210
are<font color="#E5E5E5"> going to be large they're going to</font>

327
00:11:09,080 --> 00:11:13,040
be happening at<font color="#E5E5E5"> very high frequency so a</font>

328
00:11:11,210 --> 00:11:14,450
ring<font color="#CCCCCC"> buffer is really not</font><font color="#E5E5E5"> ideal</font><font color="#CCCCCC"> for that</font>

329
00:11:13,040 --> 00:11:16,730
<font color="#E5E5E5">especially</font><font color="#CCCCCC"> since things can</font><font color="#E5E5E5"> happen out</font>

330
00:11:14,450 --> 00:11:18,050
of order<font color="#E5E5E5"> and all that so basically you</font>

331
00:11:16,730 --> 00:11:19,820
we<font color="#CCCCCC"> introduce</font><font color="#E5E5E5"> a send buffer which is</font>

332
00:11:18,050 --> 00:11:21,680
<font color="#E5E5E5">going to</font><font color="#CCCCCC"> be used by the</font><font color="#E5E5E5"> guests to send</font>

333
00:11:19,820 --> 00:11:22,820
<font color="#CCCCCC">packets and the receive buffer which is</font>

334
00:11:21,680 --> 00:11:25,099
going<font color="#E5E5E5"> to be used by</font><font color="#CCCCCC"> the guests to</font>

335
00:11:22,820 --> 00:11:26,270
receive<font color="#E5E5E5"> packets and that's just</font>

336
00:11:25,100 --> 00:11:29,720
<font color="#E5E5E5">basically you can think of those as</font>

337
00:11:26,270 --> 00:11:32,780
<font color="#E5E5E5">alternative communications channels that</font>

338
00:11:29,720 --> 00:11:35,990
the games are<font color="#E5E5E5"> going to use so in terms</font>

339
00:11:32,780 --> 00:11:37,550
of<font color="#E5E5E5"> looking a little more in detail at</font>

340
00:11:35,990 --> 00:11:41,240
how<font color="#E5E5E5"> these receive buffers and send</font>

341
00:11:37,550 --> 00:11:42,800
buffers look like how they work<font color="#CCCCCC"> right so</font>

342
00:11:41,240 --> 00:11:45,530
<font color="#CCCCCC">we we said we have these messages that</font>

343
00:11:42,800 --> 00:11:47,479
<font color="#E5E5E5">sets them up in the hosts OS so we send</font>

344
00:11:45,530 --> 00:11:49,430
them over we send this big blob of

345
00:11:47,480 --> 00:11:50,960
memory for each<font color="#E5E5E5"> the receive buffer and</font>

346
00:11:49,430 --> 00:11:52,459
send buffer<font color="#E5E5E5"> the thing is we want to be</font>

347
00:11:50,960 --> 00:11:54,320
able to send and receive more<font color="#CCCCCC"> than</font><font color="#E5E5E5"> one</font>

348
00:11:52,460 --> 00:11:55,670
pack at a time so what happens is the

349
00:11:54,320 --> 00:11:58,580
<font color="#CCCCCC">hosts</font><font color="#E5E5E5"> to us is responsible</font><font color="#CCCCCC"> for</font>

350
00:11:55,670 --> 00:12:00,469
subdividing<font color="#E5E5E5"> the receive buffer and the</font>

351
00:11:58,580 --> 00:12:02,090
send buffer into smaller sub allocations

352
00:12:00,470 --> 00:12:03,080
<font color="#E5E5E5">the reason</font><font color="#CCCCCC"> for that is you want to be</font>

353
00:12:02,090 --> 00:12:04,430
able<font color="#CCCCCC"> to send</font><font color="#E5E5E5"> or receive more than</font><font color="#CCCCCC"> one</font>

354
00:12:03,080 --> 00:12:07,130
<font color="#E5E5E5">pack at a time because again networks</font>

355
00:12:04,430 --> 00:12:08,959
are nightmare and there's<font color="#E5E5E5"> a lot of</font>

356
00:12:07,130 --> 00:12:10,820
packets<font color="#E5E5E5"> all the time and you have to</font>

357
00:12:08,960 --> 00:12:12,980
deal with<font color="#E5E5E5"> that and so the important</font>

358
00:12:10,820 --> 00:12:15,740
<font color="#CCCCCC">thing here</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the host OS</font><font color="#E5E5E5"> is the</font><font color="#CCCCCC"> one who</font>

359
00:12:12,980 --> 00:12:18,650
makes<font color="#E5E5E5"> that</font><font color="#CCCCCC"> decision</font><font color="#E5E5E5"> and sends</font><font color="#CCCCCC"> back those</font>

360
00:12:15,740 --> 00:12:20,780
bounds for sub allocations<font color="#E5E5E5"> next</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> we</font>

361
00:12:18,650 --> 00:12:22,400
have a the guest wants<font color="#E5E5E5"> to send</font><font color="#CCCCCC"> an R</font><font color="#E5E5E5"> in</font>

362
00:12:20,780 --> 00:12:24,350
this packet this gets<font color="#E5E5E5"> it's a query</font>

363
00:12:22,400 --> 00:12:25,610
packet which just means you know asking

364
00:12:24,350 --> 00:12:26,990
<font color="#E5E5E5">for things like the MAC</font><font color="#CCCCCC"> address or</font>

365
00:12:25,610 --> 00:12:29,420
<font color="#E5E5E5">something like that</font><font color="#CCCCCC"> from the from the</font>

366
00:12:26,990 --> 00:12:31,820
host is going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> generate its R in this</font>

367
00:12:29,420 --> 00:12:33,770
packet locally is then going<font color="#E5E5E5"> to send it</font>

368
00:12:31,820 --> 00:12:34,880
into the send buffer just copy into<font color="#E5E5E5"> the</font>

369
00:12:33,770 --> 00:12:37,280
send buffer because once<font color="#CCCCCC"> again it's a</font>

370
00:12:34,880 --> 00:12:39,410
piece of shared memory<font color="#CCCCCC"> and once that</font>

371
00:12:37,280 --> 00:12:42,140
happens it's going to<font color="#E5E5E5"> send a</font><font color="#CCCCCC"> message</font>

372
00:12:39,410 --> 00:12:44,089
<font color="#E5E5E5">over</font><font color="#CCCCCC"> vm bus to let the the host</font><font color="#E5E5E5"> vm</font>

373
00:12:42,140 --> 00:12:46,160
switch<font color="#CCCCCC"> know hey there's a message</font>

374
00:12:44,090 --> 00:12:48,140
<font color="#E5E5E5">there's a packet in my send buffer</font>

375
00:12:46,160 --> 00:12:50,569
<font color="#E5E5E5">please read it please take care of</font><font color="#CCCCCC"> it</font>

376
00:12:48,140 --> 00:12:52,730
once the host sees that is going to copy

377
00:12:50,570 --> 00:12:55,310
it into<font color="#E5E5E5"> its own memory space</font>

378
00:12:52,730 --> 00:12:58,010
it sounds weak to acknowledge to the

379
00:12:55,310 --> 00:12:59,810
guest<font color="#E5E5E5"> okay I've read it out you can now</font>

380
00:12:58,010 --> 00:13:01,400
use the<font color="#CCCCCC"> send buffer for something else</font>

381
00:12:59,810 --> 00:13:03,140
like<font color="#CCCCCC"> this ml for solace</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> obligation</font>

382
00:13:01,400 --> 00:13:05,270
<font color="#CCCCCC">for something else</font><font color="#E5E5E5"> then it's going to</font>

383
00:13:03,140 --> 00:13:07,580
<font color="#E5E5E5">handle it and then it's going to copy</font>

384
00:13:05,270 --> 00:13:10,280
<font color="#E5E5E5">the completion message into the receive</font>

385
00:13:07,580 --> 00:13:12,800
buffer<font color="#E5E5E5"> let the guests</font><font color="#CCCCCC"> know that there's</font>

386
00:13:10,280 --> 00:13:14,959
a packet<font color="#CCCCCC"> in the receive buffer</font><font color="#E5E5E5"> sub</font>

387
00:13:12,800 --> 00:13:15,569
allocation number<font color="#CCCCCC"> two and then the guest</font>

388
00:13:14,960 --> 00:13:17,250
is<font color="#E5E5E5"> going to</font>

389
00:13:15,570 --> 00:13:19,980
copy that<font color="#CCCCCC"> and you know take into account</font>

390
00:13:17,250 --> 00:13:21,810
that whatever has happened<font color="#E5E5E5"> and</font>

391
00:13:19,980 --> 00:13:24,240
<font color="#E5E5E5">acknowledge to their guests</font><font color="#CCCCCC"> to the host</font>

392
00:13:21,810 --> 00:13:26,040
<font color="#E5E5E5">okay we're done we could you can now</font>

393
00:13:24,240 --> 00:13:29,220
copy<font color="#E5E5E5"> more stuff into</font><font color="#CCCCCC"> this receive</font><font color="#E5E5E5"> buffer</font>

394
00:13:26,040 --> 00:13:30,329
<font color="#E5E5E5">selves allocation so that's that's</font>

395
00:13:29,220 --> 00:13:32,550
<font color="#E5E5E5">basically how it</font><font color="#CCCCCC"> works in terms of</font>

396
00:13:30,330 --> 00:13:34,170
<font color="#E5E5E5">sending and receiving the</font><font color="#CCCCCC"> artists</font>

397
00:13:32,550 --> 00:13:36,089
<font color="#E5E5E5">messages what's interesting here</font><font color="#CCCCCC"> is</font>

398
00:13:34,170 --> 00:13:38,189
<font color="#E5E5E5">we're not just</font><font color="#CCCCCC"> using</font><font color="#E5E5E5"> the receive buffers</font>

399
00:13:36,090 --> 00:13:41,670
we're still also<font color="#E5E5E5"> sending these</font><font color="#CCCCCC"> things</font>

400
00:13:38,190 --> 00:13:43,380
over<font color="#CCCCCC"> vm bus</font><font color="#E5E5E5"> and the thing</font><font color="#CCCCCC"> that's kind of</font>

401
00:13:41,670 --> 00:13:44,939
interesting<font color="#CCCCCC"> about that is</font><font color="#E5E5E5"> the reason to</font>

402
00:13:43,380 --> 00:13:47,939
<font color="#E5E5E5">use the receive buffers and ascend</font>

403
00:13:44,940 --> 00:13:50,310
buffers<font color="#E5E5E5"> as far as I can tell is to kind</font>

404
00:13:47,940 --> 00:13:53,580
of have<font color="#E5E5E5"> this really highly paralyzed way</font>

405
00:13:50,310 --> 00:13:55,319
of handling<font color="#E5E5E5"> those messages</font><font color="#CCCCCC"> and you</font><font color="#E5E5E5"> know</font>

406
00:13:53,580 --> 00:13:57,780
<font color="#E5E5E5">having this level of a synchronicity</font>

407
00:13:55,320 --> 00:13:59,460
<font color="#E5E5E5">even though but the thing is like the</font><font color="#CCCCCC"> M</font>

408
00:13:57,780 --> 00:14:01,199
bus by its very nature because<font color="#CCCCCC"> as</font><font color="#E5E5E5"> a ring</font>

409
00:13:59,460 --> 00:14:02,700
buffer<font color="#E5E5E5"> everything is serialized so it</font>

410
00:14:01,200 --> 00:14:07,380
kind of doesn't entirely make sense

411
00:14:02,700 --> 00:14:10,050
right how<font color="#CCCCCC"> do you narrate it - so looking</font>

412
00:14:07,380 --> 00:14:12,990
more specifically<font color="#CCCCCC"> at</font><font color="#E5E5E5"> how the host OS vm</font>

413
00:14:10,050 --> 00:14:14,849
switch handles those<font color="#E5E5E5"> messages it doesn't</font>

414
00:14:12,990 --> 00:14:17,370
<font color="#E5E5E5">just handle them directly and so we're</font>

415
00:14:14,850 --> 00:14:18,750
<font color="#CCCCCC">going to take</font><font color="#E5E5E5"> a look at that let's say</font>

416
00:14:17,370 --> 00:14:21,390
<font color="#E5E5E5">you have the guest that</font><font color="#CCCCCC"> has sent these</font>

417
00:14:18,750 --> 00:14:25,020
<font color="#E5E5E5">two messages through the send buffer</font><font color="#CCCCCC"> it</font>

418
00:14:21,390 --> 00:14:27,660
lets the host<font color="#CCCCCC"> OS</font><font color="#E5E5E5"> know through through</font>

419
00:14:25,020 --> 00:14:30,210
through<font color="#CCCCCC"> VM bus the</font><font color="#E5E5E5"> host received them</font>

420
00:14:27,660 --> 00:14:32,130
<font color="#E5E5E5">and then instead of just handling them</font>

421
00:14:30,210 --> 00:14:34,020
<font color="#E5E5E5">directly it's going to copy them into a</font>

422
00:14:32,130 --> 00:14:35,820
queue and then<font color="#CCCCCC"> acknowledge that has</font>

423
00:14:34,020 --> 00:14:37,170
received them then it's<font color="#E5E5E5"> going to do the</font>

424
00:14:35,820 --> 00:14:38,580
same<font color="#E5E5E5"> thing for</font><font color="#CCCCCC"> the second message put it</font>

425
00:14:37,170 --> 00:14:40,620
into a queue acknowledge<font color="#E5E5E5"> that has</font>

426
00:14:38,580 --> 00:14:42,360
received<font color="#CCCCCC"> that message</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> you know</font>

427
00:14:40,620 --> 00:14:43,770
that's<font color="#CCCCCC"> basically at that point and the</font>

428
00:14:42,360 --> 00:14:45,750
reason<font color="#CCCCCC"> for</font><font color="#E5E5E5"> that is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> once again you</font>

429
00:14:43,770 --> 00:14:48,150
know all of<font color="#CCCCCC"> VM</font><font color="#E5E5E5"> bus messages are handled</font>

430
00:14:45,750 --> 00:14:49,380
in a very serialize way and<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is on</font>

431
00:14:48,150 --> 00:14:51,240
single thread and you don't want to be

432
00:14:49,380 --> 00:14:52,890
<font color="#E5E5E5">stalling that thread for however long it</font>

433
00:14:51,240 --> 00:14:54,180
takes<font color="#CCCCCC"> to actually handle those</font><font color="#E5E5E5"> messages</font>

434
00:14:52,890 --> 00:14:56,189
which is why they're put in<font color="#E5E5E5"> the queue</font>

435
00:14:54,180 --> 00:14:58,079
<font color="#E5E5E5">and then they are actually handled by</font>

436
00:14:56,190 --> 00:14:59,940
these two separate worker threads which

437
00:14:58,080 --> 00:15:01,950
you can<font color="#E5E5E5"> think of as actually belonging</font>

438
00:14:59,940 --> 00:15:03,690
to<font color="#E5E5E5"> VM switch so then they're going to be</font>

439
00:15:01,950 --> 00:15:05,490
<font color="#E5E5E5">used</font><font color="#CCCCCC"> they're they're going to be copied</font>

440
00:15:03,690 --> 00:15:07,440
out<font color="#E5E5E5"> of the queue they're going to</font>

441
00:15:05,490 --> 00:15:10,160
actually<font color="#CCCCCC"> be handled and then the results</font>

442
00:15:07,440 --> 00:15:12,240
are going to<font color="#E5E5E5"> be copied from</font>

443
00:15:10,160 --> 00:15:13,920
<font color="#E5E5E5">they're going to be copied into the</font>

444
00:15:12,240 --> 00:15:15,480
<font color="#E5E5E5">receive buffer by the actual worker</font>

445
00:15:13,920 --> 00:15:17,370
thread as opposed to the VM bus thread

446
00:15:15,480 --> 00:15:18,660
and you know I know<font color="#CCCCCC"> all these</font><font color="#E5E5E5"> details</font>

447
00:15:17,370 --> 00:15:21,080
are<font color="#E5E5E5"> kind of boring but they will all</font>

448
00:15:18,660 --> 00:15:24,360
<font color="#CCCCCC">come up</font><font color="#E5E5E5"> later so try to pay attention</font>

449
00:15:21,080 --> 00:15:26,070
<font color="#CCCCCC">and so after that</font><font color="#E5E5E5"> the the host OS is</font>

450
00:15:24,360 --> 00:15:28,470
going<font color="#E5E5E5"> to acknowledge that has you know</font>

451
00:15:26,070 --> 00:15:29,279
<font color="#CCCCCC">finished</font><font color="#E5E5E5"> this message it has placed the</font>

452
00:15:28,470 --> 00:15:30,720
completion message

453
00:15:29,279 --> 00:15:32,819
<font color="#E5E5E5">to the receive buffer it's going to do</font>

454
00:15:30,720 --> 00:15:35,310
the same thing for<font color="#E5E5E5"> the for the other</font>

455
00:15:32,819 --> 00:15:38,099
message<font color="#E5E5E5"> acknowledge it to the guests</font><font color="#CCCCCC"> and</font>

456
00:15:35,310 --> 00:15:40,290
that's<font color="#E5E5E5"> basically it okay so once</font><font color="#CCCCCC"> again</font>

457
00:15:38,100 --> 00:15:42,660
<font color="#E5E5E5">you're now complete VMs which experts at</font>

458
00:15:40,290 --> 00:15:44,069
least as<font color="#CCCCCC"> far as I know</font><font color="#E5E5E5"> I don't really</font>

459
00:15:42,660 --> 00:15:46,410
know much more about<font color="#E5E5E5"> VM search than that</font>

460
00:15:44,069 --> 00:15:48,059
and I'm gonna<font color="#E5E5E5"> try</font><font color="#CCCCCC"> and now walk you</font>

461
00:15:46,410 --> 00:15:49,740
through<font color="#CCCCCC"> how I actually found the</font>

462
00:15:48,059 --> 00:15:52,800
vulnerability<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I did and how I</font>

463
00:15:49,740 --> 00:15:53,879
exploited<font color="#E5E5E5"> it and all that so we just</font>

464
00:15:52,800 --> 00:15:56,519
took a<font color="#E5E5E5"> look at the VM switch</font>

465
00:15:53,879 --> 00:15:58,199
initialization sequence<font color="#CCCCCC"> you know sending</font>

466
00:15:56,519 --> 00:16:00,449
<font color="#E5E5E5">a few packets first negotiating the</font>

467
00:15:58,199 --> 00:16:03,809
protocol version<font color="#CCCCCC"> all that so that every</font>

468
00:16:00,449 --> 00:16:04,769
end knows what to talk<font color="#E5E5E5"> about</font><font color="#CCCCCC"> but one way</font>

469
00:16:03,809 --> 00:16:06,719
<font color="#E5E5E5">to kind</font><font color="#CCCCCC"> of find vulnerabilities</font>

470
00:16:04,769 --> 00:16:08,579
typically is you know you have these

471
00:16:06,720 --> 00:16:09,959
very well defined sequences<font color="#E5E5E5"> what if you</font>

472
00:16:08,579 --> 00:16:11,579
mess<font color="#E5E5E5"> with</font><font color="#CCCCCC"> that sequence</font><font color="#E5E5E5"> right what if</font>

473
00:16:09,959 --> 00:16:13,258
you send<font color="#E5E5E5"> one message before the other or</font>

474
00:16:11,579 --> 00:16:15,029
what if you send<font color="#E5E5E5"> one message multiple</font>

475
00:16:13,259 --> 00:16:15,689
times like<font color="#E5E5E5"> do things</font><font color="#CCCCCC"> new interesting</font>

476
00:16:15,029 --> 00:16:17,670
<font color="#CCCCCC">things happen</font>

477
00:16:15,689 --> 00:16:19,259
turns out interesting<font color="#E5E5E5"> interesting things</font>

478
00:16:17,670 --> 00:16:21,930
do happen if you send<font color="#CCCCCC"> a receive buffer</font>

479
00:16:19,259 --> 00:16:24,449
multiple times<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example here we're</font>

480
00:16:21,930 --> 00:16:25,709
gonna<font color="#E5E5E5"> have the guest define G BL 0 so</font>

481
00:16:24,449 --> 00:16:27,359
share<font color="#E5E5E5"> memory between</font><font color="#CCCCCC"> the guest in the</font>

482
00:16:25,709 --> 00:16:29,819
host and it's going<font color="#E5E5E5"> to send first</font>

483
00:16:27,360 --> 00:16:31,740
<font color="#E5E5E5">receive buffer it's like okay the host</font>

484
00:16:29,819 --> 00:16:32,699
is<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> map</font><font color="#CCCCCC"> chip l0</font><font color="#E5E5E5"> as its</font><font color="#CCCCCC"> receive</font>

485
00:16:31,740 --> 00:16:35,160
buffer<font color="#E5E5E5"> and you have a pointer</font><font color="#CCCCCC"> that</font>

486
00:16:32,699 --> 00:16:38,430
points to it fully cool after that is

487
00:16:35,160 --> 00:16:40,170
<font color="#E5E5E5">going to but it's going to do a second G</font>

488
00:16:38,430 --> 00:16:41,550
battle and<font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of sending it as</font><font color="#E5E5E5"> a</font>

489
00:16:40,170 --> 00:16:42,719
send buffer is<font color="#E5E5E5"> going to send it as a</font>

490
00:16:41,550 --> 00:16:44,490
receive buffer<font color="#E5E5E5"> and what happens here is</font>

491
00:16:42,720 --> 00:16:47,370
interesting is that the receive buffer

492
00:16:44,490 --> 00:16:49,470
pointer is updated right<font color="#E5E5E5"> it now points</font>

493
00:16:47,370 --> 00:16:51,000
<font color="#E5E5E5">to G paddle</font><font color="#CCCCCC"> 1 instead</font><font color="#E5E5E5"> of G</font><font color="#CCCCCC"> powell</font><font color="#E5E5E5"> 0 even</font>

494
00:16:49,470 --> 00:16:52,170
<font color="#CCCCCC">though we are not actually</font><font color="#E5E5E5"> supposed to</font>

495
00:16:51,000 --> 00:16:53,939
be able<font color="#E5E5E5"> to have more than one</font><font color="#CCCCCC"> received</font>

496
00:16:52,170 --> 00:16:56,670
<font color="#E5E5E5">buffer in fact there's no longer any</font>

497
00:16:53,939 --> 00:16:59,129
reference to<font color="#E5E5E5"> the old jeep l0 mapping and</font>

498
00:16:56,670 --> 00:17:01,589
the host OS<font color="#CCCCCC"> VM</font><font color="#E5E5E5"> switch it's just kind of</font>

499
00:16:59,129 --> 00:17:03,389
there it's still mapped there and well

500
00:17:01,589 --> 00:17:04,679
that doesn't<font color="#E5E5E5"> seem like a huge deal but</font>

501
00:17:03,389 --> 00:17:06,329
yeah if you<font color="#E5E5E5"> keep</font><font color="#CCCCCC"> doing it it just</font><font color="#E5E5E5"> keeps</font>

502
00:17:04,679 --> 00:17:08,490
<font color="#CCCCCC">happening and at</font><font color="#E5E5E5"> that point you may be</font>

503
00:17:06,329 --> 00:17:10,918
thinking<font color="#CCCCCC"> okay well that's kind of</font><font color="#E5E5E5"> weird</font>

504
00:17:08,490 --> 00:17:12,480
<font color="#E5E5E5">but at worst it's probably just a memory</font>

505
00:17:10,919 --> 00:17:14,220
leak right because you keep mapping more

506
00:17:12,480 --> 00:17:15,599
and more memory<font color="#E5E5E5"> into the</font><font color="#CCCCCC"> host and even</font>

507
00:17:14,220 --> 00:17:17,669
then you're really just<font color="#CCCCCC"> mapping one more</font>

508
00:17:15,599 --> 00:17:19,829
physical memory<font color="#CCCCCC"> you're not really</font>

509
00:17:17,669 --> 00:17:22,020
allocating new<font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> into like the hosts</font>

510
00:17:19,829 --> 00:17:23,520
pool or anything so even if it is a

511
00:17:22,020 --> 00:17:26,520
memory leak it's probably kind<font color="#CCCCCC"> of tiny</font>

512
00:17:23,520 --> 00:17:28,559
insignificant but the thing that's

513
00:17:26,520 --> 00:17:31,020
interesting is if<font color="#CCCCCC"> you look at the way</font>

514
00:17:28,559 --> 00:17:34,408
that the receive buffer is<font color="#E5E5E5"> initialized</font>

515
00:17:31,020 --> 00:17:35,700
and in turn how<font color="#CCCCCC"> it's updated because</font><font color="#E5E5E5"> it</font>

516
00:17:34,409 --> 00:17:37,799
turns out<font color="#CCCCCC"> we are</font><font color="#E5E5E5"> able</font><font color="#CCCCCC"> to send the</font>

517
00:17:35,700 --> 00:17:40,860
receive buffer more than once<font color="#CCCCCC"> that</font>

518
00:17:37,799 --> 00:17:42,270
<font color="#E5E5E5">operation is not atomic</font><font color="#CCCCCC"> and because you</font>

519
00:17:40,860 --> 00:17:42,990
know the team did<font color="#CCCCCC"> not initially expect</font>

520
00:17:42,270 --> 00:17:44,850
the bill

521
00:17:42,990 --> 00:17:46,890
from an attacker to<font color="#E5E5E5"> send more</font><font color="#CCCCCC"> than one</font>

522
00:17:44,850 --> 00:17:48,750
<font color="#E5E5E5">receive buffer there is also no locking</font>

523
00:17:46,890 --> 00:17:51,570
on this operation<font color="#CCCCCC"> and so if you</font><font color="#E5E5E5"> take a</font>

524
00:17:48,750 --> 00:17:54,179
<font color="#E5E5E5">look at how the buffer update works</font>

525
00:17:51,570 --> 00:17:56,039
<font color="#E5E5E5">there are</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> steps right because the</font>

526
00:17:54,179 --> 00:17:57,960
first step<font color="#E5E5E5"> is what</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> showing in</font>

527
00:17:56,039 --> 00:17:59,610
<font color="#E5E5E5">this slide before is updating</font><font color="#CCCCCC"> the</font>

528
00:17:57,960 --> 00:18:01,350
receive buffer pointer right so it's

529
00:17:59,610 --> 00:18:03,320
<font color="#CCCCCC">pretty straightforward the thing is as</font>

530
00:18:01,350 --> 00:18:06,120
<font color="#E5E5E5">mentioned before the hostfest is also</font>

531
00:18:03,320 --> 00:18:08,158
responsible for<font color="#E5E5E5"> generating sub</font>

532
00:18:06,120 --> 00:18:10,080
allocations<font color="#E5E5E5"> into that receive</font><font color="#CCCCCC"> buffer and</font>

533
00:18:08,159 --> 00:18:12,750
then sending them<font color="#E5E5E5"> back to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> guest to</font>

534
00:18:10,080 --> 00:18:14,039
us and so that's<font color="#CCCCCC"> actually what the step</font>

535
00:18:12,750 --> 00:18:16,799
<font color="#E5E5E5">of a second step is is actually</font>

536
00:18:14,039 --> 00:18:20,158
generating that list of sub a location

537
00:18:16,799 --> 00:18:22,740
is have the the<font color="#CCCCCC"> of the receive buffer</font>

538
00:18:20,159 --> 00:18:26,700
and then the third<font color="#E5E5E5"> step is</font><font color="#CCCCCC"> to actually</font>

539
00:18:22,740 --> 00:18:29,070
<font color="#E5E5E5">update those allocations</font><font color="#CCCCCC"> and so it might</font>

540
00:18:26,700 --> 00:18:31,110
<font color="#E5E5E5">not seem like a</font><font color="#CCCCCC"> huge deal if you take a</font>

541
00:18:29,070 --> 00:18:33,870
look<font color="#E5E5E5"> at how this works let's assume that</font>

542
00:18:31,110 --> 00:18:36,779
<font color="#E5E5E5">we have</font><font color="#CCCCCC"> GPL l0g paddle 1 both mapped in</font>

543
00:18:33,870 --> 00:18:38,489
the<font color="#CCCCCC"> guests toe and</font><font color="#E5E5E5"> the host OS and</font><font color="#CCCCCC"> host</font>

544
00:18:36,779 --> 00:18:41,909
<font color="#CCCCCC">the guest OS decides ok let's use the</font>

545
00:18:38,490 --> 00:18:44,100
powell 0 as our receive buffer<font color="#E5E5E5"> so the</font>

546
00:18:41,909 --> 00:18:45,870
host was like<font color="#CCCCCC"> okey-dokey</font><font color="#E5E5E5"> here we are</font><font color="#CCCCCC"> we</font>

547
00:18:44,100 --> 00:18:47,370
have<font color="#CCCCCC"> a pointer</font><font color="#E5E5E5"> and now we have sub</font>

548
00:18:45,870 --> 00:18:47,789
allocations<font color="#CCCCCC"> to that receive buffer</font><font color="#E5E5E5"> it's</font>

549
00:18:47,370 --> 00:18:50,699
all good

550
00:18:47,789 --> 00:18:54,390
but now<font color="#E5E5E5"> the guest to us is being</font>

551
00:18:50,700 --> 00:18:56,010
annoying as telling it to use the GPL<font color="#E5E5E5"> 1</font>

552
00:18:54,390 --> 00:18:58,260
instead<font color="#E5E5E5"> of GPL 0 as a receive buffer</font>

553
00:18:56,010 --> 00:19:01,200
<font color="#E5E5E5">well the first step is to update the</font>

554
00:18:58,260 --> 00:19:04,049
<font color="#E5E5E5">pointer to receive buffer right and so</font>

555
00:19:01,200 --> 00:19:07,860
as<font color="#E5E5E5"> that happens first step the point is</font>

556
00:19:04,049 --> 00:19:10,139
<font color="#E5E5E5">going to</font><font color="#CCCCCC"> be updated and implicitly the</font>

557
00:19:07,860 --> 00:19:11,789
stub allocation<font color="#E5E5E5"> bounds are all going</font><font color="#CCCCCC"> to</font>

558
00:19:10,140 --> 00:19:13,710
be applied to<font color="#CCCCCC"> this new receipt</font><font color="#E5E5E5"> buffer</font>

559
00:19:11,789 --> 00:19:17,220
and this<font color="#CCCCCC"> specific case because we have</font>

560
00:19:13,710 --> 00:19:19,200
<font color="#E5E5E5">GL one smaller than GPL</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> those sub</font>

561
00:19:17,220 --> 00:19:21,440
allocation bounds are actually going<font color="#E5E5E5"> to</font>

562
00:19:19,200 --> 00:19:23,970
go<font color="#E5E5E5"> out</font><font color="#CCCCCC"> of bounds of that</font><font color="#E5E5E5"> receive buffer</font>

563
00:19:21,440 --> 00:19:27,149
and well I'm you<font color="#E5E5E5"> don't really tell you</font>

564
00:19:23,970 --> 00:19:29,250
<font color="#CCCCCC">that it's</font><font color="#E5E5E5"> not a great</font><font color="#CCCCCC"> thing and the of</font>

565
00:19:27,149 --> 00:19:31,350
<font color="#CCCCCC">course</font><font color="#E5E5E5"> you know if you let</font><font color="#CCCCCC"> go if you let</font>

566
00:19:29,250 --> 00:19:33,210
<font color="#E5E5E5">generates new sub</font><font color="#CCCCCC"> Alka sub allocation</font>

567
00:19:31,350 --> 00:19:34,709
downs<font color="#E5E5E5"> and you kind of like let it</font><font color="#CCCCCC"> go</font><font color="#E5E5E5"> all</font>

568
00:19:33,210 --> 00:19:37,409
the way to step<font color="#E5E5E5"> 3 it's totally fine</font>

569
00:19:34,710 --> 00:19:39,360
<font color="#E5E5E5">after that you know you end up with a</font>

570
00:19:37,409 --> 00:19:41,490
<font color="#E5E5E5">perfectly valid</font><font color="#CCCCCC"> received</font><font color="#E5E5E5"> buffer like a</font>

571
00:19:39,360 --> 00:19:44,100
really good<font color="#E5E5E5"> received buffer and it's</font>

572
00:19:41,490 --> 00:19:46,049
really possible to use<font color="#E5E5E5"> it unfortunately</font>

573
00:19:44,100 --> 00:19:50,090
<font color="#E5E5E5">you do end up with like this tiny window</font>

574
00:19:46,049 --> 00:19:52,500
<font color="#E5E5E5">during step 2 where you are able to</font>

575
00:19:50,090 --> 00:19:55,899
<font color="#E5E5E5">potentially write data out</font><font color="#CCCCCC"> of bounds</font>

576
00:19:52,500 --> 00:19:57,490
<font color="#E5E5E5">from that receive buffer and</font>

577
00:19:55,900 --> 00:20:00,400
well it is like a really<font color="#E5E5E5"> tiny window</font>

578
00:19:57,490 --> 00:20:01,980
right<font color="#CCCCCC"> this is basically generating the</font>

579
00:20:00,400 --> 00:20:04,540
sub allocations for receive buffer

580
00:20:01,980 --> 00:20:05,920
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> really just dividing the size of</font>

581
00:20:04,540 --> 00:20:09,070
the receive buffer by the number<font color="#E5E5E5"> of sub</font>

582
00:20:05,920 --> 00:20:10,660
allocations and<font color="#E5E5E5"> then you know generating</font>

583
00:20:09,070 --> 00:20:12,159
like some data structures<font color="#E5E5E5"> and stuff so</font>

584
00:20:10,660 --> 00:20:14,170
it's really just a few<font color="#E5E5E5"> probably</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> few</font>

585
00:20:12,160 --> 00:20:16,090
hundreds of cycles<font color="#CCCCCC"> but it is a</font>

586
00:20:14,170 --> 00:20:17,830
possibility<font color="#CCCCCC"> right because as mentioned</font>

587
00:20:16,090 --> 00:20:19,600
<font color="#CCCCCC">earlier</font><font color="#E5E5E5"> we do have these</font><font color="#CCCCCC"> are NIST worker</font>

588
00:20:17,830 --> 00:20:21,699
threads that are running<font color="#CCCCCC"> in the</font>

589
00:20:19,600 --> 00:20:24,189
background<font color="#E5E5E5"> working on</font><font color="#CCCCCC"> are in this</font>

590
00:20:21,700 --> 00:20:26,290
packets and<font color="#CCCCCC"> so if those are running</font>

591
00:20:24,190 --> 00:20:29,380
while you update<font color="#E5E5E5"> these sub allocations</font>

592
00:20:26,290 --> 00:20:31,420
<font color="#E5E5E5">and you can somehow make them</font><font color="#CCCCCC"> write to</font>

593
00:20:29,380 --> 00:20:33,580
the receive buffer as the sub

594
00:20:31,420 --> 00:20:35,140
allocations are being generated<font color="#E5E5E5"> then</font>

595
00:20:33,580 --> 00:20:38,860
you'll<font color="#E5E5E5"> be able to write data about and</font>

596
00:20:35,140 --> 00:20:41,650
so that's basically<font color="#CCCCCC"> the vulnerability</font>

597
00:20:38,860 --> 00:20:42,850
<font color="#CCCCCC">and now in</font><font color="#E5E5E5"> terms of exploiting it you</font>

598
00:20:41,650 --> 00:20:44,860
really<font color="#CCCCCC"> have to deal with three</font><font color="#E5E5E5"> things</font>

599
00:20:42,850 --> 00:20:47,139
which are kind of<font color="#E5E5E5"> annoying</font><font color="#CCCCCC"> the first</font>

600
00:20:44,860 --> 00:20:48,820
thing is<font color="#E5E5E5"> okay can we</font><font color="#CCCCCC"> even control it's</font>

601
00:20:47,140 --> 00:20:50,050
<font color="#E5E5E5">gonna be written to this receive buffer</font>

602
00:20:48,820 --> 00:20:51,820
<font color="#E5E5E5">because once again there's gonna be</font>

603
00:20:50,050 --> 00:20:54,070
<font color="#E5E5E5">written by the</font><font color="#CCCCCC"> arm dist worker threads</font>

604
00:20:51,820 --> 00:20:56,559
not by data that you necessarily

605
00:20:54,070 --> 00:20:57,970
<font color="#E5E5E5">directly control as the</font><font color="#CCCCCC"> guest to us</font><font color="#E5E5E5"> so</font>

606
00:20:56,559 --> 00:20:59,620
that might<font color="#CCCCCC"> be tricky</font>

607
00:20:57,970 --> 00:21:01,480
second thing is can we even win the race

608
00:20:59,620 --> 00:21:03,939
as mentioned this is<font color="#CCCCCC"> a really a</font><font color="#E5E5E5"> fairly</font>

609
00:21:01,480 --> 00:21:06,190
tight race<font color="#CCCCCC"> and again you're doing</font><font color="#E5E5E5"> this</font>

610
00:21:03,940 --> 00:21:07,840
from<font color="#CCCCCC"> the guests OS but</font><font color="#E5E5E5"> you are not the</font>

611
00:21:06,190 --> 00:21:09,760
one<font color="#E5E5E5"> that is directly racing the host OS</font>

612
00:21:07,840 --> 00:21:12,790
<font color="#CCCCCC">you've basically</font><font color="#E5E5E5"> got to get the host</font><font color="#CCCCCC"> OS</font>

613
00:21:09,760 --> 00:21:14,860
<font color="#E5E5E5">to race itself and well I mean that's</font>

614
00:21:12,790 --> 00:21:17,290
kind<font color="#E5E5E5"> of annoying</font><font color="#CCCCCC"> and the third</font><font color="#E5E5E5"> thing of</font>

615
00:21:14,860 --> 00:21:19,870
course is<font color="#E5E5E5"> okay even</font><font color="#CCCCCC"> if we do have the</font>

616
00:21:17,290 --> 00:21:21,700
<font color="#CCCCCC">ability to read to you know hit the race</font>

617
00:21:19,870 --> 00:21:23,320
and control what's being written<font color="#E5E5E5"> can we</font>

618
00:21:21,700 --> 00:21:25,120
even put<font color="#E5E5E5"> a useful corruption target</font>

619
00:21:23,320 --> 00:21:26,950
behind<font color="#E5E5E5"> the receive buffer because</font>

620
00:21:25,120 --> 00:21:28,928
typically you know at<font color="#E5E5E5"> least for me in my</font>

621
00:21:26,950 --> 00:21:30,700
experience for kernel exploitation<font color="#E5E5E5"> I'm</font>

622
00:21:28,929 --> 00:21:34,030
used to having an out of bounds right

623
00:21:30,700 --> 00:21:35,410
<font color="#E5E5E5">out</font><font color="#CCCCCC"> of a pool buffer right I don't know</font>

624
00:21:34,030 --> 00:21:37,720
where these shared buffers<font color="#CCCCCC"> are mapped</font>

625
00:21:35,410 --> 00:21:39,220
<font color="#E5E5E5">this is not on the pool for sure so</font>

626
00:21:37,720 --> 00:21:40,390
<font color="#CCCCCC">gotta</font><font color="#E5E5E5"> take a look at that and try</font><font color="#CCCCCC"> to</font>

627
00:21:39,220 --> 00:21:42,730
figure out<font color="#E5E5E5"> if I can do anything useful</font>

628
00:21:40,390 --> 00:21:44,950
<font color="#E5E5E5">with that and that's what we're gonna</font>

629
00:21:42,730 --> 00:21:47,470
get into<font color="#E5E5E5"> right now so the first thing is</font>

630
00:21:44,950 --> 00:21:50,230
can we even write useful data to the

631
00:21:47,470 --> 00:21:51,610
receive buffer out of bounds<font color="#CCCCCC"> the short</font>

632
00:21:50,230 --> 00:21:53,860
<font color="#E5E5E5">answer is yes</font><font color="#CCCCCC"> it's actually not that</font>

633
00:21:51,610 --> 00:21:56,459
<font color="#E5E5E5">difficult</font><font color="#CCCCCC"> take a look at how</font><font color="#E5E5E5"> the are in</font>

634
00:21:53,860 --> 00:21:59,169
this<font color="#E5E5E5"> the</font><font color="#CCCCCC"> artists protocol works</font>

635
00:21:56,460 --> 00:22:00,670
<font color="#E5E5E5">basically every message that</font><font color="#CCCCCC"> you send to</font>

636
00:21:59,170 --> 00:22:02,650
<font color="#E5E5E5">your network card is going to have a</font>

637
00:22:00,670 --> 00:22:04,450
complete<font color="#CCCCCC"> message and some of the</font>

638
00:22:02,650 --> 00:22:07,320
complete messages such<font color="#CCCCCC"> as the complete</font>

639
00:22:04,450 --> 00:22:10,290
message<font color="#E5E5E5"> for the</font><font color="#CCCCCC"> oranges query message</font>

640
00:22:07,320 --> 00:22:11,909
include a you know a buffer at the end

641
00:22:10,290 --> 00:22:15,480
<font color="#E5E5E5">the buffer that can contain arbitrary</font>

642
00:22:11,910 --> 00:22:17,280
data<font color="#E5E5E5"> and so basically the kind of data</font>

643
00:22:15,480 --> 00:22:18,630
<font color="#CCCCCC">that you're going to</font><font color="#E5E5E5"> be querying</font><font color="#CCCCCC"> through</font>

644
00:22:17,280 --> 00:22:20,700
<font color="#E5E5E5">this is</font><font color="#CCCCCC"> gonna be stuff like I mentioned</font>

645
00:22:18,630 --> 00:22:23,280
<font color="#CCCCCC">earlier for example</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the network cards</font>

646
00:22:20,700 --> 00:22:25,170
MAC address<font color="#E5E5E5"> right and these are</font><font color="#CCCCCC"> things</font>

647
00:22:23,280 --> 00:22:28,230
that you<font color="#E5E5E5"> might</font><font color="#CCCCCC"> be able to</font><font color="#E5E5E5"> set through</font>

648
00:22:25,170 --> 00:22:29,940
<font color="#CCCCCC">the are in</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> set message</font><font color="#E5E5E5"> so basically</font>

649
00:22:28,230 --> 00:22:32,400
the<font color="#CCCCCC"> idea from</font><font color="#E5E5E5"> here is you're gonna like</font>

650
00:22:29,940 --> 00:22:35,460
<font color="#E5E5E5">find</font><font color="#CCCCCC"> in oh it that is handled by a VM</font>

651
00:22:32,400 --> 00:22:37,560
switch that<font color="#E5E5E5"> lets</font><font color="#CCCCCC"> you set some data that</font>

652
00:22:35,460 --> 00:22:39,900
<font color="#CCCCCC">can be returned through the query</font>

653
00:22:37,560 --> 00:22:41,399
message<font color="#CCCCCC"> and I'm not</font><font color="#E5E5E5"> gonna go into detail</font>

654
00:22:39,900 --> 00:22:43,200
in terms<font color="#CCCCCC"> of like which messages actually</font>

655
00:22:41,400 --> 00:22:45,120
<font color="#E5E5E5">allow you to do that but this is the</font>

656
00:22:43,200 --> 00:22:46,290
<font color="#E5E5E5">basic idea it's really</font><font color="#CCCCCC"> simple and from</font>

657
00:22:45,120 --> 00:22:47,580
<font color="#E5E5E5">that you</font><font color="#CCCCCC"> can actually</font><font color="#E5E5E5"> control</font><font color="#CCCCCC"> a fair</font>

658
00:22:46,290 --> 00:22:49,409
<font color="#CCCCCC">amount of data that</font><font color="#E5E5E5"> is going</font><font color="#CCCCCC"> to be</font>

659
00:22:47,580 --> 00:22:50,520
written<font color="#E5E5E5"> out of bounds and you actually</font>

660
00:22:49,410 --> 00:22:53,520
even control the<font color="#E5E5E5"> length</font><font color="#CCCCCC"> it's gonna be</font>

661
00:22:50,520 --> 00:22:57,470
<font color="#CCCCCC">written</font><font color="#E5E5E5"> and at that point you know</font>

662
00:22:53,520 --> 00:22:59,879
that's like<font color="#CCCCCC"> yay we got number one down</font>

663
00:22:57,470 --> 00:23:04,380
<font color="#CCCCCC">number two is a little trickier</font><font color="#E5E5E5"> how do</font>

664
00:22:59,880 --> 00:23:06,300
<font color="#E5E5E5">we win that race well the first thing to</font>

665
00:23:04,380 --> 00:23:08,700
<font color="#CCCCCC">know</font><font color="#E5E5E5"> is a you know we've been talking</font>

666
00:23:06,300 --> 00:23:12,030
<font color="#CCCCCC">about how</font><font color="#E5E5E5"> these</font><font color="#CCCCCC"> aren't this messages are</font>

667
00:23:08,700 --> 00:23:13,470
<font color="#E5E5E5">be are being handled</font><font color="#CCCCCC"> in parallel</font><font color="#E5E5E5"> in in</font>

668
00:23:12,030 --> 00:23:16,080
the background<font color="#CCCCCC"> by these worker threads</font>

669
00:23:13,470 --> 00:23:18,030
right<font color="#E5E5E5"> and so ideally what you would want</font>

670
00:23:16,080 --> 00:23:19,860
<font color="#E5E5E5">is okay maybe you have this</font><font color="#CCCCCC"> queue right</font>

671
00:23:18,030 --> 00:23:21,450
<font color="#CCCCCC">maybe I can just like queue a bunch of</font>

672
00:23:19,860 --> 00:23:23,580
messages<font color="#CCCCCC"> and they're all gonna be</font>

673
00:23:21,450 --> 00:23:23,820
handled<font color="#E5E5E5"> in the background one after the</font>

674
00:23:23,580 --> 00:23:25,980
other

675
00:23:23,820 --> 00:23:27,870
and each one<font color="#CCCCCC"> is</font><font color="#E5E5E5"> going to be completed</font>

676
00:23:25,980 --> 00:23:30,300
<font color="#E5E5E5">and going to be</font><font color="#CCCCCC"> written to receive</font>

677
00:23:27,870 --> 00:23:32,040
buffer<font color="#E5E5E5"> unfortunately if you take a look</font>

678
00:23:30,300 --> 00:23:33,330
<font color="#CCCCCC">at what happens if you try</font><font color="#E5E5E5"> to do that so</font>

679
00:23:32,040 --> 00:23:35,220
here we have like<font color="#CCCCCC"> two</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> threads</font>

680
00:23:33,330 --> 00:23:37,679
<font color="#E5E5E5">practice there's actually five but let's</font>

681
00:23:35,220 --> 00:23:39,210
say there's<font color="#CCCCCC"> only two</font><font color="#E5E5E5"> you have these two</font>

682
00:23:37,680 --> 00:23:42,150
worker threads there's three messages

683
00:23:39,210 --> 00:23:45,090
that are queued<font color="#CCCCCC"> and what happens is the</font>

684
00:23:42,150 --> 00:23:48,360
worker threads<font color="#E5E5E5"> each pick up a</font><font color="#CCCCCC"> message it</font>

685
00:23:45,090 --> 00:23:50,040
handles it<font color="#CCCCCC"> then it writes it to receive</font>

686
00:23:48,360 --> 00:23:51,330
<font color="#CCCCCC">buffer and after</font><font color="#E5E5E5"> that you would expect</font>

687
00:23:50,040 --> 00:23:53,879
<font color="#E5E5E5">it they</font><font color="#CCCCCC"> actually grab the fir'd message</font>

688
00:23:51,330 --> 00:23:56,310
and handle it unfortunately<font color="#CCCCCC"> know what</font>

689
00:23:53,880 --> 00:23:58,380
happens after<font color="#CCCCCC"> that is because they alert</font>

690
00:23:56,310 --> 00:23:59,550
the<font color="#CCCCCC"> guests</font><font color="#E5E5E5"> that hey there's something to</font>

691
00:23:58,380 --> 00:24:02,370
grab the receive buffer right<font color="#E5E5E5"> now you</font>

692
00:23:59,550 --> 00:24:03,780
should go and do that<font color="#CCCCCC"> it's going to</font>

693
00:24:02,370 --> 00:24:05,250
<font color="#CCCCCC">actually wait for</font><font color="#E5E5E5"> the guests to say okay</font>

694
00:24:03,780 --> 00:24:07,320
<font color="#CCCCCC">I</font><font color="#E5E5E5"> grabbed it</font><font color="#CCCCCC"> from the receive buffer and</font>

695
00:24:05,250 --> 00:24:10,830
<font color="#E5E5E5">you can now use that slot and receive</font>

696
00:24:07,320 --> 00:24:13,370
buffer once again<font color="#CCCCCC"> so</font><font color="#E5E5E5"> basically unless</font>

697
00:24:10,830 --> 00:24:16,199
the guest actually sends one of<font color="#E5E5E5"> these</font>

698
00:24:13,370 --> 00:24:18,120
acknowledges<font color="#CCCCCC"> acknowledgment messages</font>

699
00:24:16,200 --> 00:24:20,550
<font color="#E5E5E5">these worker threads are just</font><font color="#CCCCCC"> going to</font>

700
00:24:18,120 --> 00:24:21,729
<font color="#CCCCCC">be stuck and once you do receive an</font>

701
00:24:20,550 --> 00:24:23,050
<font color="#CCCCCC">acknowledgment</font>

702
00:24:21,730 --> 00:24:24,460
it's not going<font color="#E5E5E5"> to be stuck anymore is</font>

703
00:24:23,050 --> 00:24:27,070
just gonna keep handling message after

704
00:24:24,460 --> 00:24:29,230
message after message<font color="#E5E5E5"> the problem is in</font>

705
00:24:27,070 --> 00:24:30,970
our case these<font color="#CCCCCC"> acknowledgement messages</font>

706
00:24:29,230 --> 00:24:32,110
have to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> sent</font><font color="#CCCCCC"> over of a</font><font color="#E5E5E5"> VM bus channel</font>

707
00:24:30,970 --> 00:24:35,710
<font color="#E5E5E5">which once again</font><font color="#CCCCCC"> is completely</font>

708
00:24:32,110 --> 00:24:37,300
serialized<font color="#E5E5E5"> and that's also being that's</font>

709
00:24:35,710 --> 00:24:39,820
also<font color="#E5E5E5"> a channel that we have to send the</font>

710
00:24:37,300 --> 00:24:41,500
new receive buffer<font color="#E5E5E5"> over so basically the</font>

711
00:24:39,820 --> 00:24:43,389
receive buffer message and<font color="#CCCCCC"> the you</font><font color="#E5E5E5"> know</font>

712
00:24:41,500 --> 00:24:45,100
<font color="#E5E5E5">the acknowledgement message cannot ever</font>

713
00:24:43,390 --> 00:24:47,260
be<font color="#E5E5E5"> handled at the same time so you</font>

714
00:24:45,100 --> 00:24:50,199
cannot<font color="#E5E5E5"> actually unlock this thread as</font>

715
00:24:47,260 --> 00:24:54,150
you<font color="#CCCCCC"> are</font><font color="#E5E5E5"> trying to hit the race which is</font>

716
00:24:50,200 --> 00:24:56,800
kind of<font color="#CCCCCC"> a problem so it's one idea down</font>

717
00:24:54,150 --> 00:24:59,650
<font color="#CCCCCC">but if you think</font><font color="#E5E5E5"> about it the very</font>

718
00:24:56,800 --> 00:25:01,180
<font color="#E5E5E5">reason that these messages are that</font>

719
00:24:59,650 --> 00:25:03,610
<font color="#E5E5E5">these worker threads are being blocked</font>

720
00:25:01,180 --> 00:25:06,130
<font color="#E5E5E5">until</font><font color="#CCCCCC"> it receives it receives an</font>

721
00:25:03,610 --> 00:25:08,770
<font color="#E5E5E5">acknowledgement from the</font><font color="#CCCCCC"> guest is that</font>

722
00:25:06,130 --> 00:25:10,900
as mentioned they all kind<font color="#CCCCCC"> of like use a</font>

723
00:25:08,770 --> 00:25:13,810
few slots<font color="#E5E5E5"> of the receive message of the</font>

724
00:25:10,900 --> 00:25:15,340
receive buffer<font color="#CCCCCC"> and you know they want to</font>

725
00:25:13,810 --> 00:25:18,010
<font color="#E5E5E5">make</font><font color="#CCCCCC"> sure that whatever</font><font color="#E5E5E5"> is in those</font>

726
00:25:15,340 --> 00:25:21,820
slots<font color="#E5E5E5"> has been read out before they</font>

727
00:25:18,010 --> 00:25:23,260
write<font color="#E5E5E5"> something else to them but so so</font>

728
00:25:21,820 --> 00:25:25,300
<font color="#E5E5E5">that's a problem because</font><font color="#CCCCCC"> every message</font>

729
00:25:23,260 --> 00:25:26,920
in the<font color="#CCCCCC"> Ardis protocol</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> has a</font>

730
00:25:25,300 --> 00:25:28,659
complete message<font color="#E5E5E5"> and so every message I</font>

731
00:25:26,920 --> 00:25:29,710
sent<font color="#CCCCCC"> over is going to be doing that I</font>

732
00:25:28,660 --> 00:25:31,570
<font color="#E5E5E5">think it's going</font><font color="#CCCCCC"> to be right in to</font>

733
00:25:29,710 --> 00:25:33,720
<font color="#E5E5E5">receive buffer and waiting for</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> unless</font>

734
00:25:31,570 --> 00:25:36,639
you take a look<font color="#CCCCCC"> at the failure pass</font>

735
00:25:33,720 --> 00:25:39,910
<font color="#CCCCCC">fortunately if you look at pal VMs which</font>

736
00:25:36,640 --> 00:25:41,620
handles certain<font color="#E5E5E5"> are in dismiss it turns</font>

737
00:25:39,910 --> 00:25:43,540
out that<font color="#E5E5E5"> certain failure paths will</font>

738
00:25:41,620 --> 00:25:45,250
cause it to never<font color="#E5E5E5"> try</font><font color="#CCCCCC"> to write to the</font>

739
00:25:43,540 --> 00:25:48,040
receive buffer<font color="#CCCCCC"> it's just going</font><font color="#E5E5E5"> to return</font>

740
00:25:45,250 --> 00:25:49,600
<font color="#CCCCCC">you know an error and it's just going</font><font color="#E5E5E5"> to</font>

741
00:25:48,040 --> 00:25:52,659
skip that message<font color="#E5E5E5"> and jump to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> next</font>

742
00:25:49,600 --> 00:25:55,990
<font color="#E5E5E5">message in the queue and so there's this</font>

743
00:25:52,660 --> 00:25:57,460
<font color="#E5E5E5">idea then of the Cascade of failure</font>

744
00:25:55,990 --> 00:26:00,610
which is<font color="#CCCCCC"> also the</font><font color="#E5E5E5"> title of</font><font color="#CCCCCC"> my</font>

745
00:25:57,460 --> 00:26:01,930
autobiography biography<font color="#CCCCCC"> cascade of</font>

746
00:26:00,610 --> 00:26:03,729
<font color="#E5E5E5">failure being that okay you're just</font>

747
00:26:01,930 --> 00:26:05,530
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to queue a bunch of</font><font color="#CCCCCC"> messages that</font>

748
00:26:03,730 --> 00:26:07,360
<font color="#E5E5E5">are going to fail</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that's going</font><font color="#CCCCCC"> to</font>

749
00:26:05,530 --> 00:26:08,680
<font color="#CCCCCC">create a</font><font color="#E5E5E5"> sufficient time differential</font>

750
00:26:07,360 --> 00:26:11,169
<font color="#E5E5E5">that you are able to control as an</font>

751
00:26:08,680 --> 00:26:13,300
attacker<font color="#E5E5E5"> such that you can try to</font><font color="#CCCCCC"> hit</font>

752
00:26:11,170 --> 00:26:15,610
the race<font color="#E5E5E5"> because maybe we can't get</font>

753
00:26:13,300 --> 00:26:17,620
messages to continuously writes a

754
00:26:15,610 --> 00:26:20,469
receive buffer<font color="#E5E5E5"> but all we really</font><font color="#CCCCCC"> need is</font>

755
00:26:17,620 --> 00:26:22,030
one buffer like one message<font color="#CCCCCC"> to write to</font>

756
00:26:20,470 --> 00:26:23,530
the receive buffer and the only

757
00:26:22,030 --> 00:26:25,090
difficulty then is like we need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

758
00:26:23,530 --> 00:26:26,020
<font color="#CCCCCC">able to control when that message is</font>

759
00:26:25,090 --> 00:26:28,689
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be written</font><font color="#E5E5E5"> to the receive</font>

760
00:26:26,020 --> 00:26:31,240
buffer<font color="#E5E5E5"> but if we are able to have an</font>

761
00:26:28,690 --> 00:26:31,850
arbitrary<font color="#E5E5E5"> number</font><font color="#CCCCCC"> of messages</font><font color="#E5E5E5"> fail before</font>

762
00:26:31,240 --> 00:26:34,820
that

763
00:26:31,850 --> 00:26:36,709
then we'll be fine<font color="#CCCCCC"> and so trying</font><font color="#E5E5E5"> to</font>

764
00:26:34,820 --> 00:26:38,149
visualize<font color="#E5E5E5"> that you can see you can</font>

765
00:26:36,710 --> 00:26:40,039
imagine locate each worker fred is

766
00:26:38,150 --> 00:26:40,940
already handling an actual valid<font color="#E5E5E5"> message</font>

767
00:26:40,039 --> 00:26:42,350
<font color="#E5E5E5">okay</font>

768
00:26:40,940 --> 00:26:44,090
it's going to<font color="#E5E5E5"> handle it it's going</font><font color="#CCCCCC"> to</font>

769
00:26:42,350 --> 00:26:47,149
<font color="#E5E5E5">send them</font><font color="#CCCCCC"> back to the the guests</font><font color="#E5E5E5"> and</font>

770
00:26:44,090 --> 00:26:48,320
then it's going<font color="#E5E5E5"> to be blocked then the</font>

771
00:26:47,150 --> 00:26:50,840
guest is going<font color="#E5E5E5"> to send</font><font color="#CCCCCC"> one</font>

772
00:26:48,320 --> 00:26:52,520
<font color="#CCCCCC">acknowledgement</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> VM bus and that's</font>

773
00:26:50,840 --> 00:26:54,830
<font color="#E5E5E5">kind of what's going to start this whole</font>

774
00:26:52,520 --> 00:26:57,950
cascade<font color="#CCCCCC"> you can see our in</font><font color="#E5E5E5"> this message</font>

775
00:26:54,830 --> 00:26:59,689
<font color="#CCCCCC">is</font><font color="#E5E5E5"> three to seven or</font><font color="#CCCCCC"> each have like that</font>

776
00:26:57,950 --> 00:27:01,910
<font color="#E5E5E5">little crash thingy there that just</font>

777
00:26:59,690 --> 00:27:03,500
<font color="#E5E5E5">means it's a malformed packet and so as</font>

778
00:27:01,910 --> 00:27:05,360
<font color="#E5E5E5">soon as</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> be tried to be handled</font>

779
00:27:03,500 --> 00:27:07,190
<font color="#CCCCCC">it's going to go</font><font color="#E5E5E5"> into there it's gonna</font>

780
00:27:05,360 --> 00:27:08,539
fail<font color="#E5E5E5"> and it's just going to</font><font color="#CCCCCC"> go to</font><font color="#E5E5E5"> mess</font>

781
00:27:07,190 --> 00:27:10,580
next<font color="#CCCCCC"> message the next message next</font>

782
00:27:08,539 --> 00:27:12,620
<font color="#E5E5E5">message and as you can tell that took a</font>

783
00:27:10,580 --> 00:27:14,120
few seconds<font color="#CCCCCC"> so in practice so just be</font>

784
00:27:12,620 --> 00:27:15,830
like a few you know microseconds<font color="#CCCCCC"> or now</font>

785
00:27:14,120 --> 00:27:16,820
seconds or whatever<font color="#E5E5E5"> but the whole</font><font color="#CCCCCC"> point</font>

786
00:27:15,830 --> 00:27:20,720
is that we created<font color="#E5E5E5"> this time</font>

787
00:27:16,820 --> 00:27:22,309
differential and from there<font color="#E5E5E5"> this actual</font>

788
00:27:20,720 --> 00:27:23,870
last message is going to<font color="#CCCCCC"> be written to</font><font color="#E5E5E5"> a</font>

789
00:27:22,309 --> 00:27:27,200
receive buffer<font color="#E5E5E5"> and so if your control</font>

790
00:27:23,870 --> 00:27:30,350
that<font color="#CCCCCC"> data</font><font color="#E5E5E5"> then we're all good the only</font>

791
00:27:27,200 --> 00:27:31,789
<font color="#E5E5E5">difficulty of</font><font color="#CCCCCC"> that is well you know you</font>

792
00:27:30,350 --> 00:27:32,899
want to win<font color="#CCCCCC"> that race but you</font><font color="#E5E5E5"> don't</font>

793
00:27:31,789 --> 00:27:35,179
actually know<font color="#E5E5E5"> how long do you want to</font>

794
00:27:32,900 --> 00:27:36,590
<font color="#E5E5E5">wait</font><font color="#CCCCCC"> right you and you don't</font><font color="#E5E5E5"> even know</font>

795
00:27:35,179 --> 00:27:38,179
how long<font color="#CCCCCC"> you are going to be</font><font color="#E5E5E5"> waiting by</font>

796
00:27:36,590 --> 00:27:39,230
you only<font color="#E5E5E5"> know that the amount of time</font>

797
00:27:38,179 --> 00:27:41,120
<font color="#E5E5E5">believe it's time differential that</font>

798
00:27:39,230 --> 00:27:43,100
you're creating<font color="#E5E5E5"> is proportional to the</font>

799
00:27:41,120 --> 00:27:45,139
number of<font color="#CCCCCC"> messages that</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> gonna fail</font>

800
00:27:43,100 --> 00:27:46,850
but<font color="#CCCCCC"> you</font><font color="#E5E5E5"> don't know how long like one</font>

801
00:27:45,140 --> 00:27:47,960
message failure is gonna take right<font color="#CCCCCC"> you</font>

802
00:27:46,850 --> 00:27:50,059
<font color="#CCCCCC">also don't know how long</font><font color="#E5E5E5"> you've</font><font color="#CCCCCC"> been</font><font color="#E5E5E5"> I</font>

803
00:27:47,960 --> 00:27:53,090
want to wait<font color="#E5E5E5"> so it's kind of annoying</font>

804
00:27:50,059 --> 00:27:56,600
but maybe we<font color="#CCCCCC"> are able to distinguish</font>

805
00:27:53,090 --> 00:27:58,039
<font color="#E5E5E5">between the race being too early like us</font>

806
00:27:56,600 --> 00:27:59,539
being too early in<font color="#E5E5E5"> the race</font><font color="#CCCCCC"> for us</font><font color="#E5E5E5"> being</font>

807
00:27:58,039 --> 00:28:01,490
too late in<font color="#E5E5E5"> the race and if we're able</font>

808
00:27:59,539 --> 00:28:03,350
to do that then<font color="#E5E5E5"> we can just adjust</font><font color="#CCCCCC"> the</font>

809
00:28:01,490 --> 00:28:05,539
number of<font color="#E5E5E5"> failure messages to increase</font>

810
00:28:03,350 --> 00:28:08,240
if<font color="#CCCCCC"> we</font><font color="#E5E5E5"> too</font><font color="#CCCCCC"> early or</font><font color="#E5E5E5"> decrease if we're too</font>

811
00:28:05,539 --> 00:28:09,919
late<font color="#E5E5E5"> and so taking a look at what</font>

812
00:28:08,240 --> 00:28:11,150
happens if you're too early<font color="#CCCCCC"> well if</font>

813
00:28:09,919 --> 00:28:13,010
you're too<font color="#CCCCCC"> early you're actually</font><font color="#E5E5E5"> just</font>

814
00:28:11,150 --> 00:28:14,690
gonna<font color="#E5E5E5"> be writing</font><font color="#CCCCCC"> to the old receive</font>

815
00:28:13,010 --> 00:28:16,820
<font color="#E5E5E5">buffer with</font><font color="#CCCCCC"> the correct sub page in</font>

816
00:28:14,690 --> 00:28:18,559
<font color="#CCCCCC">bounds</font><font color="#E5E5E5"> and so your</font><font color="#CCCCCC"> message is ends up in</font>

817
00:28:16,820 --> 00:28:19,789
here and since<font color="#E5E5E5"> the receive buffer is</font>

818
00:28:18,559 --> 00:28:21,889
something that<font color="#E5E5E5"> shared between the guest</font>

819
00:28:19,789 --> 00:28:23,570
and<font color="#CCCCCC"> the host</font><font color="#E5E5E5"> well as a guest you can</font>

820
00:28:21,890 --> 00:28:25,730
just like read from<font color="#CCCCCC"> that receive buffer</font>

821
00:28:23,570 --> 00:28:28,309
<font color="#E5E5E5">and and see that okay we were truly</font>

822
00:28:25,730 --> 00:28:29,630
<font color="#E5E5E5">let's try again if you're too late it's</font>

823
00:28:28,309 --> 00:28:33,049
gonna be the same<font color="#CCCCCC"> thing but with a new</font>

824
00:28:29,630 --> 00:28:35,120
<font color="#E5E5E5">receive</font><font color="#CCCCCC"> buffer because we will if you</font>

825
00:28:33,049 --> 00:28:37,280
<font color="#E5E5E5">don't hit the race inherently you're</font>

826
00:28:35,120 --> 00:28:39,110
going to be writing<font color="#CCCCCC"> into the bounds of</font>

827
00:28:37,280 --> 00:28:40,760
one of<font color="#E5E5E5"> your</font><font color="#CCCCCC"> receiver buffers</font><font color="#E5E5E5"> and so the</font>

828
00:28:39,110 --> 00:28:43,189
only difference<font color="#E5E5E5"> is which receive buffer</font>

829
00:28:40,760 --> 00:28:44,420
<font color="#E5E5E5">are you writing into</font>

830
00:28:43,190 --> 00:28:46,070
and<font color="#E5E5E5"> you were able</font><font color="#CCCCCC"> to distinguish</font><font color="#E5E5E5"> those</font>

831
00:28:44,420 --> 00:28:48,620
because as the guests you<font color="#E5E5E5"> are able to</font>

832
00:28:46,070 --> 00:28:50,210
read<font color="#CCCCCC"> from that</font><font color="#E5E5E5"> memory and so if you're</font>

833
00:28:48,620 --> 00:28:51,860
just<font color="#CCCCCC"> right though well you're not gonna</font>

834
00:28:50,210 --> 00:28:53,120
see anything<font color="#E5E5E5"> in either of those receipt</font>

835
00:28:51,860 --> 00:28:54,620
buffers because<font color="#E5E5E5"> by</font><font color="#CCCCCC"> definition you're</font>

836
00:28:53,120 --> 00:28:56,149
<font color="#E5E5E5">writing out of bounds which is what you</font>

837
00:28:54,620 --> 00:28:59,419
want<font color="#E5E5E5"> at that point all you have to do is</font>

838
00:28:56,150 --> 00:29:01,550
celebrate so we are able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> win the race</font>

839
00:28:59,420 --> 00:29:04,550
<font color="#CCCCCC">and</font><font color="#E5E5E5"> we're</font><font color="#CCCCCC"> able to write our</font><font color="#E5E5E5"> betray data</font>

840
00:29:01,550 --> 00:29:06,710
out<font color="#CCCCCC"> of</font><font color="#E5E5E5"> Bounce it's pretty great the only</font>

841
00:29:04,550 --> 00:29:08,480
thing is we still<font color="#CCCCCC"> have</font><font color="#E5E5E5"> no</font><font color="#CCCCCC"> idea where a</font>

842
00:29:06,710 --> 00:29:13,070
buffer is have no idea<font color="#CCCCCC"> we're actually</font>

843
00:29:08,480 --> 00:29:14,900
corrupting<font color="#E5E5E5"> just</font><font color="#CCCCCC"> calves annoying so you</font>

844
00:29:13,070 --> 00:29:17,480
know<font color="#E5E5E5"> pulling up</font><font color="#CCCCCC"> KD</font><font color="#E5E5E5"> doing bang address</font>

845
00:29:14,900 --> 00:29:19,100
what you're gonna see is that<font color="#E5E5E5"> well</font>

846
00:29:17,480 --> 00:29:21,410
there's a bunch<font color="#E5E5E5"> of other</font><font color="#CCCCCC"> G paddles and</font>

847
00:29:19,100 --> 00:29:23,120
other m<font color="#E5E5E5"> deals or</font><font color="#CCCCCC"> allocating to</font><font color="#E5E5E5"> that</font>

848
00:29:21,410 --> 00:29:24,590
memory region but the other thing that

849
00:29:23,120 --> 00:29:27,679
is<font color="#CCCCCC"> allocated</font><font color="#E5E5E5"> that memory region which is</font>

850
00:29:24,590 --> 00:29:30,080
really nice is<font color="#CCCCCC"> kernel thread</font><font color="#E5E5E5"> stacks and</font>

851
00:29:27,680 --> 00:29:31,490
that is a very<font color="#E5E5E5"> juicy attack target</font>

852
00:29:30,080 --> 00:29:33,409
because<font color="#E5E5E5"> really</font><font color="#CCCCCC"> all you have</font><font color="#E5E5E5"> to do is</font>

853
00:29:31,490 --> 00:29:36,170
like<font color="#E5E5E5"> overwrite one return address on</font>

854
00:29:33,410 --> 00:29:39,710
there<font color="#E5E5E5"> you get robbed</font><font color="#CCCCCC"> and you're done</font><font color="#E5E5E5"> so</font>

855
00:29:36,170 --> 00:29:44,990
it's kind of blessing<font color="#CCCCCC"> the</font><font color="#E5E5E5"> only thing is</font>

856
00:29:39,710 --> 00:29:47,330
you know it's also not because<font color="#E5E5E5"> it turns</font>

857
00:29:44,990 --> 00:29:49,520
out<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know if you have this allocator</font>

858
00:29:47,330 --> 00:29:52,220
right<font color="#E5E5E5"> and you want to somehow place one</font>

859
00:29:49,520 --> 00:29:54,230
target<font color="#CCCCCC"> after your buffer</font><font color="#E5E5E5"> you need to be</font>

860
00:29:52,220 --> 00:29:56,480
able<font color="#E5E5E5"> to basically massage</font><font color="#CCCCCC"> the allocator</font>

861
00:29:54,230 --> 00:29:58,460
into doing that but difficulty is as a

862
00:29:56,480 --> 00:30:00,530
guest to us you're not<font color="#CCCCCC"> you don't really</font>

863
00:29:58,460 --> 00:30:02,450
<font color="#E5E5E5">have any</font><font color="#CCCCCC"> control over</font><font color="#E5E5E5"> what threads are</font>

864
00:30:00,530 --> 00:30:04,700
<font color="#E5E5E5">going to be</font><font color="#CCCCCC"> created the hosts to</font><font color="#E5E5E5"> us at</font>

865
00:30:02,450 --> 00:30:05,840
least<font color="#E5E5E5"> not directly</font><font color="#CCCCCC"> and so that</font><font color="#E5E5E5"> means if</font>

866
00:30:04,700 --> 00:30:07,100
<font color="#E5E5E5">you can't create new threads the</font><font color="#CCCCCC"> host</font>

867
00:30:05,840 --> 00:30:08,540
way so you can't create new<font color="#CCCCCC"> stacks if</font>

868
00:30:07,100 --> 00:30:10,040
you can't create new stacks you're going

869
00:30:08,540 --> 00:30:11,990
to have to try<font color="#E5E5E5"> to corrupt an existing</font>

870
00:30:10,040 --> 00:30:13,250
stack and<font color="#E5E5E5"> that's also difficult so</font>

871
00:30:11,990 --> 00:30:14,660
there's basically<font color="#E5E5E5"> three things</font><font color="#CCCCCC"> to deal</font>

872
00:30:13,250 --> 00:30:17,660
<font color="#CCCCCC">with it's okay first off how this is</font>

873
00:30:14,660 --> 00:30:19,640
allocated even work secondly<font color="#E5E5E5"> can we you</font>

874
00:30:17,660 --> 00:30:22,040
<font color="#E5E5E5">know place a stack at a known address</font>

875
00:30:19,640 --> 00:30:23,270
and in order to<font color="#E5E5E5"> do that well then offset</font>

876
00:30:22,040 --> 00:30:24,620
in order to do that we<font color="#CCCCCC"> actually also</font>

877
00:30:23,270 --> 00:30:26,300
<font color="#E5E5E5">need to be</font><font color="#CCCCCC"> able to place</font><font color="#E5E5E5"> the stack in</font>

878
00:30:24,620 --> 00:30:27,310
the first place so a lot of<font color="#CCCCCC"> non-trivial</font>

879
00:30:26,300 --> 00:30:29,750
stuff

880
00:30:27,310 --> 00:30:32,149
well the first<font color="#E5E5E5"> thing is well actually do</font>

881
00:30:29,750 --> 00:30:34,550
the allocator is kind of trivial<font color="#E5E5E5"> it's</font>

882
00:30:32,150 --> 00:30:36,260
kind of nice<font color="#CCCCCC"> so this the name is region</font>

883
00:30:34,550 --> 00:30:39,590
that<font color="#E5E5E5"> contains these</font><font color="#CCCCCC"> MD LS and all these</font>

884
00:30:36,260 --> 00:30:42,020
stacks<font color="#E5E5E5"> is assistant PT region and the</font>

885
00:30:39,590 --> 00:30:43,490
allocator for that is just<font color="#CCCCCC"> a bit map</font>

886
00:30:42,020 --> 00:30:46,190
based allocator so you can see the right

887
00:30:43,490 --> 00:30:49,040
it's an artistic<font color="#E5E5E5"> representation of this</font>

888
00:30:46,190 --> 00:30:52,910
bitmap<font color="#E5E5E5"> in orange you're going to see bit</font>

889
00:30:49,040 --> 00:30:55,430
ones<font color="#E5E5E5"> which you</font><font color="#CCCCCC"> know mean that a</font><font color="#E5E5E5"> page is</font>

890
00:30:52,910 --> 00:30:57,050
<font color="#E5E5E5">allocated and blue is going to be bit</font><font color="#CCCCCC"> 0</font>

891
00:30:55,430 --> 00:30:59,000
<font color="#E5E5E5">between set of</font><font color="#CCCCCC"> pages now okay</font>

892
00:30:57,050 --> 00:31:00,710
and the way that<font color="#E5E5E5"> this</font><font color="#CCCCCC"> allocator works is</font>

893
00:30:59,000 --> 00:31:03,260
basically<font color="#E5E5E5"> it has this little yellow</font>

894
00:31:00,710 --> 00:31:04,700
arrow in there that<font color="#E5E5E5"> yellow that the</font>

895
00:31:03,260 --> 00:31:07,250
yellow arrow is called<font color="#E5E5E5"> the hint and</font>

896
00:31:04,700 --> 00:31:09,500
that's basically a heuristic<font color="#E5E5E5"> for where</font>

897
00:31:07,250 --> 00:31:11,390
the<font color="#CCCCCC"> bitmap</font><font color="#E5E5E5"> alligator is going to start</font>

898
00:31:09,500 --> 00:31:14,300
scanning<font color="#E5E5E5"> into the bitmap and so in terms</font>

899
00:31:11,390 --> 00:31:15,350
<font color="#CCCCCC">of allocating</font><font color="#E5E5E5"> something into that that</font>

900
00:31:14,300 --> 00:31:15,860
<font color="#E5E5E5">memory region it's actually really</font>

901
00:31:15,350 --> 00:31:18,620
<font color="#E5E5E5">simple</font>

902
00:31:15,860 --> 00:31:21,350
the allocate just scans<font color="#E5E5E5"> the bitmap if it</font>

903
00:31:18,620 --> 00:31:22,729
finds a group of bits<font color="#CCCCCC"> they're contiguous</font>

904
00:31:21,350 --> 00:31:24,530
<font color="#CCCCCC">they're big</font><font color="#E5E5E5"> enough</font><font color="#CCCCCC"> for what you</font><font color="#E5E5E5"> want</font>

905
00:31:22,730 --> 00:31:26,000
<font color="#CCCCCC">just</font><font color="#E5E5E5"> going to place that memory there if</font>

906
00:31:24,530 --> 00:31:27,920
it doesn't is going to add<font color="#E5E5E5"> some more</font>

907
00:31:26,000 --> 00:31:29,990
memory so as an example let's<font color="#CCCCCC"> say we</font>

908
00:31:27,920 --> 00:31:31,160
<font color="#CCCCCC">want to allocate five pages the hint is</font>

909
00:31:29,990 --> 00:31:33,440
right in the<font color="#E5E5E5"> middle there it's right</font>

910
00:31:31,160 --> 00:31:34,910
<font color="#CCCCCC">before a</font><font color="#E5E5E5"> big free region and so it</font>

911
00:31:33,440 --> 00:31:36,590
actually<font color="#E5E5E5"> does already have five pages</font>

912
00:31:34,910 --> 00:31:39,020
<font color="#CCCCCC">right</font><font color="#E5E5E5"> available there it's just going to</font>

913
00:31:36,590 --> 00:31:40,669
allocate<font color="#E5E5E5"> it</font><font color="#CCCCCC"> and update the hint</font><font color="#E5E5E5"> to go</font>

914
00:31:39,020 --> 00:31:42,650
after<font color="#E5E5E5"> that allocation such that you</font>

915
00:31:40,670 --> 00:31:44,300
<font color="#CCCCCC">don't have</font><font color="#E5E5E5"> to scan that again next time</font>

916
00:31:42,650 --> 00:31:47,120
let's say you want to<font color="#E5E5E5"> allocate</font><font color="#CCCCCC"> five</font>

917
00:31:44,300 --> 00:31:48,620
pages again well you don't have<font color="#E5E5E5"> five</font>

918
00:31:47,120 --> 00:31:50,870
pages<font color="#E5E5E5"> immediately available so that</font>

919
00:31:48,620 --> 00:31:53,750
<font color="#E5E5E5">little arrow is</font><font color="#CCCCCC"> just going</font><font color="#E5E5E5"> to scan</font><font color="#CCCCCC"> the</font>

920
00:31:50,870 --> 00:31:56,149
bitmap and find five pages<font color="#E5E5E5"> here</font>

921
00:31:53,750 --> 00:31:58,309
allocated there and then you are going

922
00:31:56,150 --> 00:32:00,080
<font color="#E5E5E5">to be done now let's say you want to</font>

923
00:31:58,309 --> 00:32:02,840
allocate 17<font color="#E5E5E5"> pages well you</font><font color="#CCCCCC"> actually</font>

924
00:32:00,080 --> 00:32:05,870
don't really have any<font color="#E5E5E5"> you know free</font>

925
00:32:02,840 --> 00:32:08,209
<font color="#E5E5E5">memory in there that has 17 contiguous</font>

926
00:32:05,870 --> 00:32:10,189
pages<font color="#E5E5E5"> so instead it's going to expand</font>

927
00:32:08,210 --> 00:32:13,400
the bitmap<font color="#E5E5E5"> it does that in groups of</font><font color="#CCCCCC"> 2</font>

928
00:32:10,190 --> 00:32:17,059
megabytes<font color="#E5E5E5"> and then place those 17 pages</font>

929
00:32:13,400 --> 00:32:18,890
there and that's that the annoying thing

930
00:32:17,059 --> 00:32:21,530
if you end up<font color="#CCCCCC"> doing that is that the</font>

931
00:32:18,890 --> 00:32:22,850
hint is not actually updated which can

932
00:32:21,530 --> 00:32:25,490
come<font color="#CCCCCC"> in</font><font color="#E5E5E5"> handy or can become annoying</font>

933
00:32:22,850 --> 00:32:28,580
based on<font color="#CCCCCC"> what</font><font color="#E5E5E5"> you're trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do you</font>

934
00:32:25,490 --> 00:32:29,809
<font color="#E5E5E5">know</font><font color="#CCCCCC"> just something</font><font color="#E5E5E5"> to know now okay so</font>

935
00:32:28,580 --> 00:32:31,490
we understand how<font color="#E5E5E5"> the Ella</font><font color="#CCCCCC"> care works</font>

936
00:32:29,809 --> 00:32:32,480
<font color="#E5E5E5">it's actually pretty simple</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> we need</font>

937
00:32:31,490 --> 00:32:34,340
to be able<font color="#CCCCCC"> to interact with that</font>

938
00:32:32,480 --> 00:32:35,660
<font color="#E5E5E5">allocator in a meaningful way</font><font color="#CCCCCC"> we need</font>

939
00:32:34,340 --> 00:32:39,889
two<font color="#CCCCCC"> things we need to actually</font><font color="#E5E5E5"> be able</font>

940
00:32:35,660 --> 00:32:41,990
to ideally allocate arbitrary amounts of

941
00:32:39,890 --> 00:32:42,860
data arbitrary times and that's<font color="#CCCCCC"> actually</font>

942
00:32:41,990 --> 00:32:45,559
<font color="#E5E5E5">really</font><font color="#CCCCCC"> easy because</font><font color="#E5E5E5"> we have</font><font color="#CCCCCC"> this</font>

943
00:32:42,860 --> 00:32:47,149
<font color="#E5E5E5">vulnerability where we are able to map</font>

944
00:32:45,559 --> 00:32:48,860
receive buffers and send buffers<font color="#E5E5E5"> over</font>

945
00:32:47,150 --> 00:32:51,559
and over<font color="#E5E5E5"> and over again and since these</font>

946
00:32:48,860 --> 00:32:53,419
<font color="#CCCCCC">rd</font><font color="#E5E5E5"> paddles</font><font color="#CCCCCC"> ng paddle size is controlled</font>

947
00:32:51,559 --> 00:32:54,170
by<font color="#E5E5E5"> the attacker because</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> controlled</font>

948
00:32:53,420 --> 00:32:56,660
with a<font color="#E5E5E5"> guess to us</font>

949
00:32:54,170 --> 00:32:58,400
you can basically allocate any piece of

950
00:32:56,660 --> 00:33:00,950
<font color="#E5E5E5">memory of any size which is a really</font>

951
00:32:58,400 --> 00:33:02,780
nice primitive next thing is<font color="#E5E5E5"> need to be</font>

952
00:33:00,950 --> 00:33:04,550
able to<font color="#E5E5E5"> allocate new kernel thread</font>

953
00:33:02,780 --> 00:33:06,918
stacks such that we can place them<font color="#E5E5E5"> after</font>

954
00:33:04,550 --> 00:33:08,840
a<font color="#E5E5E5"> received buffer and that's that's</font>

955
00:33:06,919 --> 00:33:10,759
<font color="#E5E5E5">actually really annoying</font>

956
00:33:08,840 --> 00:33:12,678
once as I mentioned there's like<font color="#E5E5E5"> really</font>

957
00:33:10,759 --> 00:33:14,870
no good<font color="#E5E5E5"> way</font><font color="#CCCCCC"> like there's obviously no by</font>

958
00:33:12,679 --> 00:33:16,970
design way to do that from a<font color="#CCCCCC"> guest</font><font color="#E5E5E5"> and</font>

959
00:33:14,870 --> 00:33:19,969
<font color="#E5E5E5">so the best way I found how to do that</font>

960
00:33:16,970 --> 00:33:22,820
is to notice<font color="#E5E5E5"> that the</font><font color="#CCCCCC"> M</font><font color="#E5E5E5"> switch and a lot</font>

961
00:33:19,970 --> 00:33:26,960
of the<font color="#E5E5E5"> M bus based services actually</font>

962
00:33:22,820 --> 00:33:30,230
rely on the NT system worker thread pool

963
00:33:26,960 --> 00:33:32,419
<font color="#E5E5E5">the reasoning being that once again</font><font color="#CCCCCC"> vm</font>

964
00:33:30,230 --> 00:33:34,039
<font color="#CCCCCC">vm buff</font><font color="#E5E5E5"> messages are all serialized</font><font color="#CCCCCC"> we'd</font>

965
00:33:32,419 --> 00:33:36,019
rather be<font color="#CCCCCC"> doing that in parallel so</font>

966
00:33:34,039 --> 00:33:37,940
basically<font color="#CCCCCC"> it'll read a message</font><font color="#E5E5E5"> submit a</font>

967
00:33:36,019 --> 00:33:38,990
task to<font color="#E5E5E5"> the worker pool then the worker</font>

968
00:33:37,940 --> 00:33:41,090
pool was<font color="#E5E5E5"> going to take on</font><font color="#CCCCCC"> that task</font>

969
00:33:38,990 --> 00:33:43,700
handle it and in the meantime like the

970
00:33:41,090 --> 00:33:46,279
vm bus<font color="#CCCCCC"> thread can</font><font color="#E5E5E5"> let go on to handling</font>

971
00:33:43,700 --> 00:33:48,080
another<font color="#E5E5E5"> vm bus message but so the way</font>

972
00:33:46,279 --> 00:33:51,769
<font color="#E5E5E5">that the thread pool works is whenever</font>

973
00:33:48,080 --> 00:33:53,418
it<font color="#CCCCCC"> gets a task if there's</font><font color="#E5E5E5"> a three free</font>

974
00:33:51,769 --> 00:33:55,610
thread inside that pool it's just going

975
00:33:53,419 --> 00:33:57,529
<font color="#CCCCCC">to use that thread</font><font color="#E5E5E5"> right and so no new</font>

976
00:33:55,610 --> 00:34:00,949
thread is<font color="#CCCCCC"> created a new stack which is</font>

977
00:33:57,529 --> 00:34:03,259
not<font color="#E5E5E5"> great for us but if there is if all</font>

978
00:34:00,950 --> 00:34:04,669
the other<font color="#E5E5E5"> threads are already busy it's</font>

979
00:34:03,259 --> 00:34:06,710
going to<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> create a new</font><font color="#E5E5E5"> thread</font>

980
00:34:04,669 --> 00:34:08,480
<font color="#CCCCCC">add it</font><font color="#E5E5E5"> to the pool and that's going to</font>

981
00:34:06,710 --> 00:34:10,460
<font color="#E5E5E5">create a new stack so the idea is</font>

982
00:34:08,480 --> 00:34:12,918
basically<font color="#CCCCCC"> just kind</font><font color="#E5E5E5"> of find a message</font>

983
00:34:10,460 --> 00:34:15,589
that is easy<font color="#E5E5E5"> enough to</font><font color="#CCCCCC"> hit and we'll</font>

984
00:34:12,918 --> 00:34:17,239
submit<font color="#E5E5E5"> a task to that pool and just kind</font>

985
00:34:15,589 --> 00:34:20,089
of flood it just just send a<font color="#E5E5E5"> bunch of</font>

986
00:34:17,239 --> 00:34:21,908
them and<font color="#CCCCCC"> the host of</font><font color="#E5E5E5"> s is</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to be</font>

987
00:34:20,089 --> 00:34:24,770
submitting all<font color="#CCCCCC"> of those to the</font><font color="#E5E5E5"> empty</font>

988
00:34:21,909 --> 00:34:26,060
<font color="#E5E5E5">kernel worker or thread pool and</font>

989
00:34:24,770 --> 00:34:27,440
eventually<font color="#E5E5E5"> it will create</font><font color="#CCCCCC"> some new</font>

990
00:34:26,060 --> 00:34:29,210
messages something with some<font color="#CCCCCC"> new threads</font>

991
00:34:27,440 --> 00:34:31,520
<font color="#CCCCCC">and it's still going to</font><font color="#E5E5E5"> create some</font><font color="#CCCCCC"> of</font>

992
00:34:29,210 --> 00:34:33,710
<font color="#CCCCCC">stacks</font><font color="#E5E5E5"> and ideally it will place it</font>

993
00:34:31,520 --> 00:34:35,389
where we want<font color="#CCCCCC"> i was</font><font color="#E5E5E5"> also helped by the</font>

994
00:34:33,710 --> 00:34:38,300
<font color="#E5E5E5">fact that VMs which at the time had a</font>

995
00:34:35,389 --> 00:34:40,879
tiny bug which would cause certain

996
00:34:38,300 --> 00:34:42,169
worker threads to<font color="#E5E5E5"> be deadlocked and it</font>

997
00:34:40,879 --> 00:34:44,449
would just<font color="#CCCCCC"> like wait on a mutex forever</font>

998
00:34:42,168 --> 00:34:45,828
<font color="#CCCCCC">which was kind of annoying but</font><font color="#E5E5E5"> also</font>

999
00:34:44,449 --> 00:34:47,989
actually<font color="#E5E5E5"> came in really handy because</font>

1000
00:34:45,829 --> 00:34:50,119
that way you can<font color="#CCCCCC"> just make sure</font><font color="#E5E5E5"> that and</font>

1001
00:34:47,989 --> 00:34:51,859
like any arbitrary number<font color="#CCCCCC"> of worker</font>

1002
00:34:50,119 --> 00:34:54,679
threads<font color="#E5E5E5"> that you want is just</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to</font>

1003
00:34:51,859 --> 00:34:56,899
<font color="#E5E5E5">stay</font><font color="#CCCCCC"> you know busy forever</font><font color="#E5E5E5"> and that lets</font>

1004
00:34:54,679 --> 00:34:58,760
you allocate<font color="#E5E5E5"> new ones so at this point</font>

1005
00:34:56,899 --> 00:35:01,098
this like<font color="#E5E5E5"> okay we basically have a</font>

1006
00:34:58,760 --> 00:35:02,869
really hacky way of of creating<font color="#CCCCCC"> new</font>

1007
00:35:01,099 --> 00:35:04,880
kernel thread<font color="#CCCCCC"> sacks</font><font color="#E5E5E5"> ideally we really</font>

1008
00:35:02,869 --> 00:35:06,800
only want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be able we really only want</font>

1009
00:35:04,880 --> 00:35:08,540
<font color="#CCCCCC">to</font><font color="#E5E5E5"> have to like spawn a single one and</font>

1010
00:35:06,800 --> 00:35:12,430
so that's<font color="#E5E5E5"> where we</font><font color="#CCCCCC"> have to go into</font><font color="#E5E5E5"> how</font>

1011
00:35:08,540 --> 00:35:15,770
<font color="#CCCCCC">to massage</font><font color="#E5E5E5"> the the heap boy give kernel</font>

1012
00:35:12,430 --> 00:35:18,710
<font color="#CCCCCC">assistant PT region and basically just</font>

1013
00:35:15,770 --> 00:35:19,310
have like these<font color="#E5E5E5"> five steps that kind of</font>

1014
00:35:18,710 --> 00:35:21,440
just<font color="#E5E5E5"> work</font>

1015
00:35:19,310 --> 00:35:22,270
the idea being of like first want<font color="#E5E5E5"> to</font>

1016
00:35:21,440 --> 00:35:25,120
spray one mega

1017
00:35:22,270 --> 00:35:26,980
by blocks<font color="#E5E5E5"> and we do that in order</font><font color="#CCCCCC"> to</font>

1018
00:35:25,120 --> 00:35:28,810
kind<font color="#E5E5E5"> of fill in these gaps to make sure</font>

1019
00:35:26,980 --> 00:35:30,610
that our later allocations will not be

1020
00:35:28,810 --> 00:35:32,020
going<font color="#E5E5E5"> all the</font><font color="#CCCCCC"> way up in there so we do</font>

1021
00:35:30,610 --> 00:35:34,210
that by spraying a bunch of<font color="#E5E5E5"> receive</font>

1022
00:35:32,020 --> 00:35:36,970
buffers<font color="#E5E5E5"> or send buffers or whatever</font><font color="#CCCCCC"> it's</font>

1023
00:35:34,210 --> 00:35:39,820
pretty simple<font color="#E5E5E5"> and the next thing</font><font color="#CCCCCC"> is we</font>

1024
00:35:36,970 --> 00:35:42,580
want<font color="#CCCCCC"> to allocate</font><font color="#E5E5E5"> a buffer</font><font color="#CCCCCC"> that is equal</font>

1025
00:35:39,820 --> 00:35:44,620
<font color="#E5E5E5">to in length to two megabytes minus one</font>

1026
00:35:42,580 --> 00:35:46,390
page<font color="#E5E5E5"> and the reason for</font><font color="#CCCCCC"> that is if we</font>

1027
00:35:44,620 --> 00:35:48,910
this is<font color="#E5E5E5"> the maximum size that</font><font color="#CCCCCC"> we can</font>

1028
00:35:46,390 --> 00:35:51,460
<font color="#CCCCCC">allocate that it will</font><font color="#E5E5E5"> create a new</font>

1029
00:35:48,910 --> 00:35:53,460
region<font color="#CCCCCC"> like a new two megabyte region</font>

1030
00:35:51,460 --> 00:35:55,630
expansion at the<font color="#E5E5E5"> bottom of the bitmap</font>

1031
00:35:53,460 --> 00:35:58,000
<font color="#E5E5E5">without actually like putting it</font>

1032
00:35:55,630 --> 00:35:58,990
somewhere<font color="#E5E5E5"> else</font><font color="#CCCCCC"> and the reason that it's</font>

1033
00:35:58,000 --> 00:36:00,190
<font color="#CCCCCC">interesting is that this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> actually</font>

1034
00:35:58,990 --> 00:36:01,959
<font color="#E5E5E5">going to be a receive buffer if you'll</font>

1035
00:36:00,190 --> 00:36:04,020
recall<font color="#E5E5E5"> we need to actually hit the race</font>

1036
00:36:01,960 --> 00:36:06,640
several times<font color="#CCCCCC"> before we are actually</font>

1037
00:36:04,020 --> 00:36:08,230
<font color="#E5E5E5">able to</font><font color="#CCCCCC"> to hit the right number of</font>

1038
00:36:06,640 --> 00:36:11,020
failure messages and so you want<font color="#E5E5E5"> to be</font>

1039
00:36:08,230 --> 00:36:12,640
able<font color="#E5E5E5"> to place your buffer in the</font>

1040
00:36:11,020 --> 00:36:14,740
location where<font color="#CCCCCC"> you know that the</font><font color="#E5E5E5"> next</font>

1041
00:36:12,640 --> 00:36:17,980
time you have<font color="#E5E5E5"> an allocation it will end</font>

1042
00:36:14,740 --> 00:36:19,299
<font color="#E5E5E5">up in the same location</font><font color="#CCCCCC"> because we want</font>

1043
00:36:17,980 --> 00:36:21,310
to<font color="#CCCCCC"> be able to repeat that race over and</font>

1044
00:36:19,300 --> 00:36:24,220
over<font color="#E5E5E5"> and over again and so making it the</font>

1045
00:36:21,310 --> 00:36:26,590
biggest<font color="#E5E5E5"> size possible</font><font color="#CCCCCC"> allows us to do</font>

1046
00:36:24,220 --> 00:36:28,839
that<font color="#E5E5E5"> and then you just allocate a one</font>

1047
00:36:26,590 --> 00:36:31,930
megabyte buffer that's just basically to

1048
00:36:28,840 --> 00:36:33,430
take care of possible alignment issues

1049
00:36:31,930 --> 00:36:35,290
I'm not going to get<font color="#E5E5E5"> into that but</font>

1050
00:36:33,430 --> 00:36:37,660
there's something in the appendix<font color="#CCCCCC"> for</font>

1051
00:36:35,290 --> 00:36:39,070
that<font color="#CCCCCC"> and after that</font><font color="#E5E5E5"> you're going to</font>

1052
00:36:37,660 --> 00:36:41,500
allocate<font color="#E5E5E5"> something that is</font><font color="#CCCCCC"> one megabyte</font>

1053
00:36:39,070 --> 00:36:43,650
<font color="#CCCCCC">minus the size of the kernel stack and</font>

1054
00:36:41,500 --> 00:36:46,630
then that's going<font color="#E5E5E5"> to update the hint and</font>

1055
00:36:43,650 --> 00:36:48,760
because the hint<font color="#E5E5E5"> is right before that</font>

1056
00:36:46,630 --> 00:36:51,820
thing there you can just allocate a new

1057
00:36:48,760 --> 00:36:53,530
<font color="#E5E5E5">stack it's going to be there and you end</font>

1058
00:36:51,820 --> 00:36:57,400
<font color="#E5E5E5">up being able to place a kernel stack</font>

1059
00:36:53,530 --> 00:36:59,140
<font color="#E5E5E5">and you know not an arbitrary offset</font>

1060
00:36:57,400 --> 00:37:00,490
from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> function buffer but</font><font color="#E5E5E5"> a known</font>

1061
00:36:59,140 --> 00:37:02,319
offset<font color="#E5E5E5"> that's really all you want</font>

1062
00:37:00,490 --> 00:37:04,419
<font color="#CCCCCC">because at this</font><font color="#E5E5E5"> point then we</font><font color="#CCCCCC"> can</font>

1063
00:37:02,320 --> 00:37:06,010
manufacture our receive buffers in such

1064
00:37:04,420 --> 00:37:07,660
a way that<font color="#E5E5E5"> we know that</font><font color="#CCCCCC"> the sub</font>

1065
00:37:06,010 --> 00:37:11,160
allocation that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> care about will be</font>

1066
00:37:07,660 --> 00:37:14,049
placed to overlap with<font color="#CCCCCC"> that</font><font color="#E5E5E5"> kernel</font><font color="#CCCCCC"> stack</font>

1067
00:37:11,160 --> 00:37:15,549
so we're good<font color="#CCCCCC"> at this</font><font color="#E5E5E5"> point we have</font>

1068
00:37:14,050 --> 00:37:17,770
filled in all three of<font color="#CCCCCC"> those</font>

1069
00:37:15,550 --> 00:37:19,750
requirements<font color="#E5E5E5"> and we are actually able to</font>

1070
00:37:17,770 --> 00:37:21,280
<font color="#E5E5E5">write write memory out</font><font color="#CCCCCC"> of bounds and</font>

1071
00:37:19,750 --> 00:37:22,930
everything is awesome<font color="#CCCCCC"> the</font><font color="#E5E5E5"> only thing is</font>

1072
00:37:21,280 --> 00:37:24,600
since we were corrupting a kernel<font color="#E5E5E5"> thread</font>

1073
00:37:22,930 --> 00:37:27,580
stack we actually need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> bypass KS LR</font>

1074
00:37:24,600 --> 00:37:29,620
as you probably<font color="#CCCCCC"> hopefully know the end</font>

1075
00:37:27,580 --> 00:37:33,610
of host OS<font color="#E5E5E5"> all memory is kind of</font>

1076
00:37:29,620 --> 00:37:35,089
randomized so we don't really<font color="#E5E5E5"> know</font><font color="#CCCCCC"> you</font>

1077
00:37:33,610 --> 00:37:36,559
know whoa

1078
00:37:35,089 --> 00:37:38,299
we want to override a<font color="#E5E5E5"> fret stack the</font>

1079
00:37:36,559 --> 00:37:39,529
reason<font color="#CCCCCC"> one will read the threat stack is</font>

1080
00:37:38,299 --> 00:37:40,999
to overwrite a return address

1081
00:37:39,529 --> 00:37:42,529
we can't overwrite a return address

1082
00:37:40,999 --> 00:37:44,328
<font color="#CCCCCC">unless we know what to overwrite</font><font color="#E5E5E5"> it with</font>

1083
00:37:42,529 --> 00:37:46,519
<font color="#E5E5E5">so we need to know the location</font><font color="#CCCCCC"> of some</font>

1084
00:37:44,329 --> 00:37:49,519
code<font color="#CCCCCC"> and the host to us in</font><font color="#E5E5E5"> order to do</font>

1085
00:37:46,519 --> 00:37:51,049
that<font color="#E5E5E5"> and so that's what bypassing</font><font color="#CCCCCC"> Kas</font>

1086
00:37:49,519 --> 00:37:54,319
floor<font color="#E5E5E5"> means is</font><font color="#CCCCCC"> just finding the address</font>

1087
00:37:51,049 --> 00:37:55,759
of a piece<font color="#E5E5E5"> of code that is known</font><font color="#CCCCCC"> and the</font>

1088
00:37:54,319 --> 00:37:59,749
first way to do that is actually<font color="#E5E5E5"> just</font>

1089
00:37:55,759 --> 00:38:01,369
<font color="#E5E5E5">define it</font><font color="#CCCCCC"> in info leak and</font><font color="#E5E5E5"> so the info</font>

1090
00:37:59,749 --> 00:38:03,769
leak that I found for this for this<font color="#E5E5E5"> text</font>

1091
00:38:01,369 --> 00:38:06,799
<font color="#E5E5E5">plate is actually really like quite</font>

1092
00:38:03,769 --> 00:38:08,508
simple<font color="#E5E5E5"> basically this is how these like</font>

1093
00:38:06,799 --> 00:38:10,549
this is the<font color="#E5E5E5"> structure of a use</font><font color="#CCCCCC"> by both</font>

1094
00:38:08,509 --> 00:38:12,979
the host OS<font color="#E5E5E5"> and the guest OS for VM</font>

1095
00:38:10,549 --> 00:38:15,349
switch messages<font color="#CCCCCC"> and you have this Union</font>

1096
00:38:12,979 --> 00:38:16,968
<font color="#E5E5E5">right the thing about unions is not</font>

1097
00:38:15,349 --> 00:38:19,099
every member<font color="#CCCCCC"> of a union has to be the</font>

1098
00:38:16,969 --> 00:38:20,749
same<font color="#E5E5E5"> length so for example you have like</font>

1099
00:38:19,099 --> 00:38:22,539
one message<font color="#CCCCCC"> to the left here that has</font>

1100
00:38:20,749 --> 00:38:26,839
one more<font color="#E5E5E5"> field than the one to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> right</font>

1101
00:38:22,539 --> 00:38:29,119
<font color="#CCCCCC">and that's</font><font color="#E5E5E5"> totally</font><font color="#CCCCCC"> fine except that</font><font color="#E5E5E5"> you</font>

1102
00:38:26,839 --> 00:38:31,489
<font color="#E5E5E5">know once you do size of that struct</font>

1103
00:38:29,119 --> 00:38:34,759
<font color="#CCCCCC">it's gonna be used at the same</font><font color="#E5E5E5"> size</font>

1104
00:38:31,489 --> 00:38:36,950
everywhere<font color="#E5E5E5"> and that means that if you</font>

1105
00:38:34,759 --> 00:38:40,190
<font color="#CCCCCC">allocate that</font><font color="#E5E5E5"> structure on the stack</font>

1106
00:38:36,950 --> 00:38:41,960
never fully initialize it<font color="#E5E5E5"> and just send</font>

1107
00:38:40,190 --> 00:38:44,029
<font color="#CCCCCC">over like the entire size of that</font>

1108
00:38:41,960 --> 00:38:45,729
<font color="#E5E5E5">structure well you return a bunch of</font>

1109
00:38:44,029 --> 00:38:47,539
<font color="#CCCCCC">initialized stack bytes</font><font color="#E5E5E5"> and</font>

1110
00:38:45,729 --> 00:38:48,799
uninitialized stack bytes are pretty

1111
00:38:47,539 --> 00:38:50,779
great<font color="#E5E5E5"> for us because</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> typically</font>

1112
00:38:48,799 --> 00:38:52,190
contain return<font color="#CCCCCC"> addresses and so we were</font>

1113
00:38:50,779 --> 00:38:53,869
<font color="#CCCCCC">able to</font><font color="#E5E5E5"> get a return address</font><font color="#CCCCCC"> from VM</font>

1114
00:38:52,190 --> 00:38:56,119
switch which is<font color="#E5E5E5"> awesome and with that</font>

1115
00:38:53,869 --> 00:38:57,769
return address we<font color="#CCCCCC"> are able</font><font color="#E5E5E5"> to you know</font>

1116
00:38:56,119 --> 00:38:59,690
build a rope chain and get code

1117
00:38:57,769 --> 00:39:03,229
execution and all<font color="#E5E5E5"> that fun</font><font color="#CCCCCC"> stuff</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> so</font>

1118
00:38:59,690 --> 00:39:05,029
we're<font color="#E5E5E5"> done except for not as it turns</font>

1119
00:39:03,229 --> 00:39:06,680
out<font color="#E5E5E5"> that info leak is awesome but it</font>

1120
00:39:05,029 --> 00:39:09,130
only worked on older<font color="#E5E5E5"> versions of Windows</font>

1121
00:39:06,680 --> 00:39:11,690
<font color="#CCCCCC">a time</font><font color="#E5E5E5"> that was Windows Server 2012 r2</font>

1122
00:39:09,130 --> 00:39:12,640
so we were actually<font color="#CCCCCC"> targeting Windows</font><font color="#E5E5E5"> 10</font>

1123
00:39:11,690 --> 00:39:15,920
so oops

1124
00:39:12,640 --> 00:39:17,479
let's<font color="#E5E5E5"> find something else and actually</font>

1125
00:39:15,920 --> 00:39:18,469
<font color="#CCCCCC">that new method that</font><font color="#E5E5E5"> other method that</font>

1126
00:39:17,479 --> 00:39:20,269
were going<font color="#E5E5E5"> to talk about does not</font>

1127
00:39:18,469 --> 00:39:22,609
include a new vulnerability it's just a

1128
00:39:20,269 --> 00:39:25,129
way of you<font color="#CCCCCC"> know dealing with case law</font>

1129
00:39:22,609 --> 00:39:28,069
<font color="#E5E5E5">without you know finding a new bug and</font>

1130
00:39:25,130 --> 00:39:30,380
the thing to know about<font color="#CCCCCC"> ksl</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> Windows</font>

1131
00:39:28,069 --> 00:39:33,229
at least for for drivers is that<font color="#E5E5E5"> each</font>

1132
00:39:30,380 --> 00:39:35,900
driver<font color="#E5E5E5"> is</font><font color="#CCCCCC"> gonna be aligned to</font><font color="#E5E5E5"> this 0 X</font>

1133
00:39:33,229 --> 00:39:37,489
<font color="#E5E5E5">10,000 byte boundary so</font><font color="#CCCCCC"> that means is</font>

1134
00:39:35,900 --> 00:39:40,279
that if you overwrite the lower two

1135
00:39:37,489 --> 00:39:42,950
bytes<font color="#E5E5E5"> of an address</font><font color="#CCCCCC"> within that module</font>

1136
00:39:40,279 --> 00:39:44,299
<font color="#CCCCCC">well you can change</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> offset within</font>

1137
00:39:42,950 --> 00:39:45,649
<font color="#E5E5E5">the module</font><font color="#CCCCCC"> without having any</font>

1138
00:39:44,299 --> 00:39:47,569
information<font color="#E5E5E5"> about where the module is</font>

1139
00:39:45,650 --> 00:39:48,770
and so if you'll recall<font color="#E5E5E5"> we have the</font>

1140
00:39:47,569 --> 00:39:51,380
ability to write<font color="#CCCCCC"> arbitrary</font>

1141
00:39:48,770 --> 00:39:53,630
data<font color="#E5E5E5"> you know semi-controlled offset</font>

1142
00:39:51,380 --> 00:39:55,190
inside<font color="#CCCCCC"> of the host</font><font color="#E5E5E5"> inside</font><font color="#CCCCCC"> of like that</font>

1143
00:39:53,630 --> 00:39:56,960
criminal threat<font color="#E5E5E5"> stack so it means that</font>

1144
00:39:55,190 --> 00:39:58,850
we can totally<font color="#E5E5E5"> just overwrite the lower</font>

1145
00:39:56,960 --> 00:40:00,980
two<font color="#CCCCCC"> bites</font><font color="#E5E5E5"> of something so we can see</font><font color="#CCCCCC"> the</font>

1146
00:39:58,850 --> 00:40:02,480
<font color="#E5E5E5">example down there is we have this</font>

1147
00:40:00,980 --> 00:40:04,400
actual valid<font color="#E5E5E5"> return address on the stack</font>

1148
00:40:02,480 --> 00:40:06,050
<font color="#E5E5E5">and</font><font color="#CCCCCC"> instead we overwrite the lower two</font>

1149
00:40:04,400 --> 00:40:08,630
bytes<font color="#E5E5E5"> and then it's going</font><font color="#CCCCCC"> to point</font>

1150
00:40:06,050 --> 00:40:11,000
towards a<font color="#CCCCCC"> rap gadget</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> this case just</font>

1151
00:40:08,630 --> 00:40:12,710
pop our<font color="#E5E5E5"> fifteen ret which is not really</font>

1152
00:40:11,000 --> 00:40:14,090
useful<font color="#E5E5E5"> and that's kind of</font><font color="#CCCCCC"> the thing</font>

1153
00:40:12,710 --> 00:40:17,420
though it's like okay we can<font color="#E5E5E5"> jump to</font>

1154
00:40:14,090 --> 00:40:19,700
<font color="#CCCCCC">robbed gadget</font><font color="#E5E5E5"> cool but we only have like</font>

1155
00:40:17,420 --> 00:40:22,160
<font color="#CCCCCC">0</font><font color="#E5E5E5"> X 10 bytes which is like 64 K of range</font>

1156
00:40:19,700 --> 00:40:24,560
or<font color="#CCCCCC"> something and well we can't really do</font>

1157
00:40:22,160 --> 00:40:27,950
<font color="#CCCCCC">anything useful with just</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> Rob gadget</font>

1158
00:40:24,560 --> 00:40:29,840
or<font color="#CCCCCC"> can't we</font><font color="#E5E5E5"> thinking about</font><font color="#CCCCCC"> the</font>

1159
00:40:27,950 --> 00:40:31,310
allocations again right we had this

1160
00:40:29,840 --> 00:40:34,370
thread stack<font color="#E5E5E5"> right after a receive</font>

1161
00:40:31,310 --> 00:40:37,190
buffer<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we still have the ability to</font>

1162
00:40:34,370 --> 00:40:39,109
map more shared memories so what if we

1163
00:40:37,190 --> 00:40:41,510
allocated like say a send buffer<font color="#E5E5E5"> right</font>

1164
00:40:39,110 --> 00:40:42,590
before right<font color="#CCCCCC"> after</font><font color="#E5E5E5"> a thread stack and we</font>

1165
00:40:41,510 --> 00:40:43,250
have this shared memory between<font color="#E5E5E5"> the</font>

1166
00:40:42,590 --> 00:40:45,320
guest<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> host</font>

1167
00:40:43,250 --> 00:40:47,210
right after the<font color="#CCCCCC"> Fed stack</font><font color="#E5E5E5"> and then we</font>

1168
00:40:45,320 --> 00:40:49,940
have the<font color="#E5E5E5"> ability to jump to one</font><font color="#CCCCCC"> rock</font>

1169
00:40:47,210 --> 00:40:51,320
gadget well<font color="#E5E5E5"> this Rob</font><font color="#CCCCCC"> Petch is pretty</font>

1170
00:40:49,940 --> 00:40:53,360
great<font color="#E5E5E5"> because it's just going to do</font><font color="#CCCCCC"> RSP</font>

1171
00:40:51,320 --> 00:40:56,030
plus<font color="#CCCCCC"> equals like almost a whole page</font>

1172
00:40:53,360 --> 00:40:58,010
worth of data and so thinking about<font color="#E5E5E5"> it</font>

1173
00:40:56,030 --> 00:41:01,820
<font color="#E5E5E5">you have like the thread stack at the</font>

1174
00:40:58,010 --> 00:41:03,350
top here on the right<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have this you</font>

1175
00:41:01,820 --> 00:41:05,480
know<font color="#CCCCCC"> you have this this</font><font color="#E5E5E5"> return</font><font color="#CCCCCC"> addressed</font>

1176
00:41:03,350 --> 00:41:08,029
there you overwrite it to jump to that

1177
00:41:05,480 --> 00:41:10,490
<font color="#CCCCCC">Rob gadget</font><font color="#E5E5E5"> okay and then what's gonna</font>

1178
00:41:08,030 --> 00:41:13,670
happen<font color="#E5E5E5"> RSP is going to go from your</font>

1179
00:41:10,490 --> 00:41:16,160
<font color="#CCCCCC">kernel thread stack right into shared</font>

1180
00:41:13,670 --> 00:41:17,720
memory<font color="#E5E5E5"> say okay this is cool</font><font color="#CCCCCC"> we can</font><font color="#E5E5E5"> like</font>

1181
00:41:16,160 --> 00:41:19,580
<font color="#CCCCCC">control more data that's</font><font color="#E5E5E5"> gonna be</font>

1182
00:41:17,720 --> 00:41:22,580
interpreted as being<font color="#E5E5E5"> the stack that's</font>

1183
00:41:19,580 --> 00:41:24,290
nice but<font color="#E5E5E5"> of course once you hit ret well</font>

1184
00:41:22,580 --> 00:41:25,670
it's<font color="#CCCCCC"> just gonna</font><font color="#E5E5E5"> crash because</font><font color="#CCCCCC"> the guest</font>

1185
00:41:24,290 --> 00:41:27,320
to us doesn't really have any<font color="#E5E5E5"> way of</font>

1186
00:41:25,670 --> 00:41:28,550
<font color="#E5E5E5">knowing</font><font color="#CCCCCC"> what to put in there that's the</font>

1187
00:41:27,320 --> 00:41:30,590
whole point we're<font color="#CCCCCC"> trying</font><font color="#E5E5E5"> to get and a</font>

1188
00:41:28,550 --> 00:41:34,010
slower bypass but what's<font color="#E5E5E5"> cool about that</font>

1189
00:41:30,590 --> 00:41:36,260
is<font color="#E5E5E5"> it's going</font><font color="#CCCCCC"> to crash</font><font color="#E5E5E5"> and when an x86</font>

1190
00:41:34,010 --> 00:41:37,820
CPU crashes at least on<font color="#CCCCCC"> Windows it's</font>

1191
00:41:36,260 --> 00:41:40,010
going to put the<font color="#CCCCCC"> return</font><font color="#E5E5E5"> address of where</font>

1192
00:41:37,820 --> 00:41:42,830
the crash<font color="#CCCCCC"> happened on to the stack which</font>

1193
00:41:40,010 --> 00:41:44,360
means as a<font color="#E5E5E5"> guest who has access to that</font>

1194
00:41:42,830 --> 00:41:46,819
<font color="#CCCCCC">share memory I can actually read back</font>

1195
00:41:44,360 --> 00:41:47,300
that return address of where the crash

1196
00:41:46,820 --> 00:41:49,850
happened

1197
00:41:47,300 --> 00:41:52,100
and then the<font color="#CCCCCC"> exception</font><font color="#E5E5E5"> handler</font><font color="#CCCCCC"> of</font>

1198
00:41:49,850 --> 00:41:54,049
<font color="#E5E5E5">Windows is going to be using my shared</font>

1199
00:41:52,100 --> 00:41:56,120
memory as a stack for<font color="#CCCCCC"> the exception</font>

1200
00:41:54,050 --> 00:41:58,070
handling<font color="#CCCCCC"> and so as an attacker</font><font color="#E5E5E5"> I can</font>

1201
00:41:56,120 --> 00:41:59,750
both read<font color="#E5E5E5"> and</font><font color="#CCCCCC"> write from that and I can</font>

1202
00:41:58,070 --> 00:42:01,770
redirect<font color="#E5E5E5"> execution from the exception</font>

1203
00:41:59,750 --> 00:42:03,869
handler<font color="#E5E5E5"> into anywhere I want</font>

1204
00:42:01,770 --> 00:42:05,040
and so that's how you bypass<font color="#CCCCCC"> chaos floor</font>

1205
00:42:03,869 --> 00:42:06,660
without<font color="#CCCCCC"> an info leak</font>

1206
00:42:05,040 --> 00:42:09,300
you basically just move the stack into

1207
00:42:06,660 --> 00:42:11,279
shared memory<font color="#CCCCCC"> doesn't work</font><font color="#E5E5E5"> for many</font>

1208
00:42:09,300 --> 00:42:14,520
things<font color="#CCCCCC"> but in this case it came in</font>

1209
00:42:11,280 --> 00:42:16,740
pretty<font color="#E5E5E5"> handy so as a result we have Rob</font>

1210
00:42:14,520 --> 00:42:20,610
<font color="#E5E5E5">and by extension Constitution on</font><font color="#CCCCCC"> windows</font>

1211
00:42:16,740 --> 00:42:22,140
10<font color="#E5E5E5"> from a guest VM which is cool</font><font color="#CCCCCC"> but</font>

1212
00:42:20,610 --> 00:42:29,750
<font color="#E5E5E5">let's see how that works in practice</font><font color="#CCCCCC"> I</font>

1213
00:42:22,140 --> 00:42:37,440
<font color="#CCCCCC">do a live demo ok ok</font><font color="#E5E5E5"> I can't</font><font color="#CCCCCC"> see</font>

1214
00:42:29,750 --> 00:42:45,060
<font color="#E5E5E5">just a second</font><font color="#CCCCCC"> just making</font><font color="#E5E5E5"> sure I can</font>

1215
00:42:37,440 --> 00:42:47,790
actually see the<font color="#E5E5E5"> screen ok ok so this is</font>

1216
00:42:45,060 --> 00:42:49,170
<font color="#E5E5E5">running Windows</font><font color="#CCCCCC"> Server 2012 r2 just</font>

1217
00:42:47,790 --> 00:42:51,240
<font color="#E5E5E5">running on this little laptop here which</font>

1218
00:42:49,170 --> 00:42:55,800
is not server<font color="#E5E5E5"> you know whatever and this</font>

1219
00:42:51,240 --> 00:42:58,319
<font color="#E5E5E5">is a a VM here right</font><font color="#CCCCCC"> so what I'm gonna</font>

1220
00:42:55,800 --> 00:43:01,320
do is I'm gonna pop up my super elite

1221
00:42:58,320 --> 00:43:06,540
hacker shell and I first want to grab

1222
00:43:01,320 --> 00:43:08,190
the VM<font color="#E5E5E5"> bus channel that is being used by</font>

1223
00:43:06,540 --> 00:43:10,109
VM switch<font color="#E5E5E5"> okay so let's just return</font><font color="#CCCCCC"> to</font>

1224
00:43:08,190 --> 00:43:11,640
address of that<font color="#E5E5E5"> and the guest OS then</font>

1225
00:43:10,109 --> 00:43:23,430
what check that my info<font color="#CCCCCC"> leaked actually</font>

1226
00:43:11,640 --> 00:43:27,180
works um this is for<font color="#E5E5E5"> God</font><font color="#CCCCCC"> okay</font>

1227
00:43:23,430 --> 00:43:32,970
<font color="#CCCCCC">I</font><font color="#E5E5E5"> just hung it didn't crash or anything</font>

1228
00:43:27,180 --> 00:43:36,600
<font color="#CCCCCC">it's just hanging there okay</font><font color="#E5E5E5"> I guess no</font>

1229
00:43:32,970 --> 00:43:40,799
live demo<font color="#E5E5E5"> okay I mean I keep going</font><font color="#CCCCCC"> and</font>

1230
00:43:36,600 --> 00:43:42,180
try to get that working<font color="#E5E5E5"> as possible but</font>

1231
00:43:40,800 --> 00:43:46,500
this<font color="#E5E5E5"> was supposed to work is it supposed</font>

1232
00:43:42,180 --> 00:43:51,089
to be<font color="#E5E5E5"> really cool</font><font color="#CCCCCC"> so let's keep going in</font>

1233
00:43:46,500 --> 00:43:53,040
the meantime in the meantime<font color="#E5E5E5"> what's</font>

1234
00:43:51,090 --> 00:43:54,990
happening what's happening<font color="#E5E5E5"> is what want</font>

1235
00:43:53,040 --> 00:43:56,670
<font color="#E5E5E5">to do is</font><font color="#CCCCCC"> okay so we have this exploit</font>

1236
00:43:54,990 --> 00:43:58,890
which as you just saw<font color="#E5E5E5"> we're super well</font>

1237
00:43:56,670 --> 00:44:00,420
super reliable is really awesome<font color="#CCCCCC"> and</font>

1238
00:43:58,890 --> 00:44:02,270
based on that we have<font color="#E5E5E5"> like this whole</font>

1239
00:44:00,420 --> 00:44:07,370
host of data I<font color="#CCCCCC"> just got</font>

1240
00:44:02,270 --> 00:44:09,020
right and so data that we get from<font color="#CCCCCC"> like</font>

1241
00:44:07,370 --> 00:44:10,100
writing<font color="#E5E5E5"> these exploits is it's a couple</font>

1242
00:44:09,020 --> 00:44:11,690
things<font color="#CCCCCC"> it's first like the the</font>

1243
00:44:10,100 --> 00:44:13,400
vulnerability discovery right<font color="#E5E5E5"> it's a</font>

1244
00:44:11,690 --> 00:44:17,480
little<font color="#CCCCCC"> process now we are</font><font color="#E5E5E5"> able</font><font color="#CCCCCC"> to know</font>

1245
00:44:13,400 --> 00:44:19,100
<font color="#E5E5E5">okay where</font><font color="#CCCCCC"> to look for for for more you</font>

1246
00:44:17,480 --> 00:44:21,650
know for more vulnerabilities<font color="#E5E5E5"> how do you</font>

1247
00:44:19,100 --> 00:44:22,880
want to<font color="#E5E5E5"> do that the the best way for us</font>

1248
00:44:21,650 --> 00:44:24,320
to do that really<font color="#E5E5E5"> for</font><font color="#CCCCCC"> for</font>

1249
00:44:22,880 --> 00:44:26,570
vulnerabilities is either going to be

1250
00:44:24,320 --> 00:44:29,420
<font color="#CCCCCC">introducing mitigations that we believe</font>

1251
00:44:26,570 --> 00:44:33,730
are<font color="#CCCCCC"> actually going</font><font color="#E5E5E5"> to you know kill</font>

1252
00:44:29,420 --> 00:44:36,380
certain certain types<font color="#E5E5E5"> of vulnerabilities</font>

1253
00:44:33,730 --> 00:44:38,780
<font color="#E5E5E5">but that's typically</font><font color="#CCCCCC"> difficult and</font>

1254
00:44:36,380 --> 00:44:41,150
<font color="#E5E5E5">instead what we want</font><font color="#CCCCCC"> to do most likely</font>

1255
00:44:38,780 --> 00:44:43,340
<font color="#CCCCCC">is going to be stuff like</font><font color="#E5E5E5"> a lot of code</font>

1256
00:44:41,150 --> 00:44:45,280
review internally<font color="#E5E5E5"> or you know</font>

1257
00:44:43,340 --> 00:44:47,930
introducing a bug bounty that pays out

1258
00:44:45,280 --> 00:44:50,350
<font color="#CCCCCC">$250,000 for working exploit</font><font color="#E5E5E5"> next thing</font>

1259
00:44:47,930 --> 00:44:52,520
we<font color="#E5E5E5"> can do is learn from our exploits</font>

1260
00:44:50,350 --> 00:44:57,560
techniques that we use and hopefully

1261
00:44:52,520 --> 00:44:58,640
introduce some new I'm sorry I'm<font color="#CCCCCC"> trying</font>

1262
00:44:57,560 --> 00:45:05,240
<font color="#E5E5E5">to do two things at once it's really</font>

1263
00:44:58,640 --> 00:45:06,440
difficult<font color="#CCCCCC"> yes so introduce some new some</font>

1264
00:45:05,240 --> 00:45:10,790
new mitigation that<font color="#E5E5E5"> will break these</font>

1265
00:45:06,440 --> 00:45:12,260
exploit techniques and so in order and

1266
00:45:10,790 --> 00:45:14,120
so<font color="#CCCCCC"> we kind of did that and in addition</font>

1267
00:45:12,260 --> 00:45:15,980
<font color="#CCCCCC">to like kind of</font><font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to break the</font>

1268
00:45:14,120 --> 00:45:17,240
whole post exploitation game right<font color="#E5E5E5"> in</font>

1269
00:45:15,980 --> 00:45:19,160
terms of breaking<font color="#E5E5E5"> the post exploitation</font>

1270
00:45:17,240 --> 00:45:21,080
game is not necessarily<font color="#E5E5E5"> going to be</font>

1271
00:45:19,160 --> 00:45:22,520
introducing more mitigations<font color="#E5E5E5"> although</font>

1272
00:45:21,080 --> 00:45:24,319
that's definitely a part of<font color="#E5E5E5"> it it's</font>

1273
00:45:22,520 --> 00:45:26,720
going<font color="#E5E5E5"> to be reacting</font><font color="#CCCCCC"> things in such a</font>

1274
00:45:24,320 --> 00:45:30,080
way that<font color="#E5E5E5"> you know we make the targets</font>

1275
00:45:26,720 --> 00:45:32,029
<font color="#E5E5E5">less interesting and so in terms of</font>

1276
00:45:30,080 --> 00:45:33,680
<font color="#E5E5E5">mitigation that we introduced the first</font>

1277
00:45:32,030 --> 00:45:35,540
<font color="#E5E5E5">and most obvious thing I think is just</font>

1278
00:45:33,680 --> 00:45:39,440
going<font color="#CCCCCC"> to be separating the kernel stacks</font>

1279
00:45:35,540 --> 00:45:41,060
from the rest<font color="#E5E5E5"> of memory</font><font color="#CCCCCC"> the reasoning</font>

1280
00:45:39,440 --> 00:45:43,100
between<font color="#E5E5E5"> behind that is that this way</font>

1281
00:45:41,060 --> 00:45:45,529
<font color="#CCCCCC">you'll</font><font color="#E5E5E5"> never be able to overflow from</font>

1282
00:45:43,100 --> 00:45:47,779
any buffer into a kernel stack and so

1283
00:45:45,530 --> 00:45:50,150
that's just<font color="#E5E5E5"> better not only for hyper-v</font>

1284
00:45:47,780 --> 00:45:54,140
which has all these you know has all

1285
00:45:50,150 --> 00:45:56,720
these buffers that<font color="#E5E5E5"> are handling that are</font>

1286
00:45:54,140 --> 00:46:00,500
working<font color="#E5E5E5"> in in that same memory region</font>

1287
00:45:56,720 --> 00:46:02,359
but also for other you know drivers<font color="#E5E5E5"> that</font>

1288
00:46:00,500 --> 00:46:05,540
use<font color="#CCCCCC"> MBL's</font><font color="#E5E5E5"> and map physical memory and</font>

1289
00:46:02,360 --> 00:46:07,130
<font color="#E5E5E5">all that and so so that's the first</font>

1290
00:46:05,540 --> 00:46:10,009
mitigation the the second thing that we

1291
00:46:07,130 --> 00:46:11,600
can look into<font color="#E5E5E5"> is more much more general</font>

1292
00:46:10,010 --> 00:46:13,310
mitigations things like<font color="#CCCCCC"> hvc</font><font color="#E5E5E5"> iso</font>

1293
00:46:11,600 --> 00:46:15,740
hypervisor enforce code integrity which

1294
00:46:13,310 --> 00:46:17,480
makes it such that<font color="#E5E5E5"> attackers cannot</font>

1295
00:46:15,740 --> 00:46:19,609
<font color="#CCCCCC">check new unsigned code into the host</font><font color="#E5E5E5"> OS</font>

1296
00:46:17,480 --> 00:46:22,340
kernel<font color="#CCCCCC"> in addition to</font><font color="#E5E5E5"> that we have</font>

1297
00:46:19,610 --> 00:46:24,950
<font color="#E5E5E5">things like</font><font color="#CCCCCC"> K CFG which you know is</font>

1298
00:46:22,340 --> 00:46:28,550
preventing the takeover<font color="#CCCCCC"> of certain</font>

1299
00:46:24,950 --> 00:46:29,990
function pointers<font color="#CCCCCC"> and things like that</font>

1300
00:46:28,550 --> 00:46:31,940
in the<font color="#E5E5E5"> host OS kernel and so that's just</font>

1301
00:46:29,990 --> 00:46:33,770
like<font color="#E5E5E5"> very general hardening that we are</font>

1302
00:46:31,940 --> 00:46:35,150
definitely<font color="#CCCCCC"> doing in</font><font color="#E5E5E5"> like these features</font>

1303
00:46:33,770 --> 00:46:36,950
have<font color="#E5E5E5"> existed for a little while but now</font>

1304
00:46:35,150 --> 00:46:39,350
there's<font color="#E5E5E5"> like more and more effort</font><font color="#CCCCCC"> to</font>

1305
00:46:36,950 --> 00:46:41,299
make<font color="#CCCCCC"> it happen by</font><font color="#E5E5E5"> default on more</font>

1306
00:46:39,350 --> 00:46:43,759
platforms<font color="#E5E5E5"> addition to that we are</font>

1307
00:46:41,300 --> 00:46:45,440
<font color="#E5E5E5">actually investing with Intel</font><font color="#CCCCCC"> and other</font>

1308
00:46:43,760 --> 00:46:47,780
partners in<font color="#E5E5E5"> security features are</font>

1309
00:46:45,440 --> 00:46:49,310
actually<font color="#E5E5E5"> implemented in</font><font color="#CCCCCC"> Hardware the</font>

1310
00:46:47,780 --> 00:46:51,680
main one of<font color="#E5E5E5"> those that would actually</font>

1311
00:46:49,310 --> 00:46:53,840
totally apply to this exploit is<font color="#E5E5E5"> CT</font>

1312
00:46:51,680 --> 00:46:56,089
which is<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to be a you know a</font>

1313
00:46:53,840 --> 00:46:57,650
hardware implemented shadow stack which

1314
00:46:56,090 --> 00:46:59,480
<font color="#CCCCCC">is going to</font><font color="#E5E5E5"> make it such that you cannot</font>

1315
00:46:57,650 --> 00:47:01,640
just overwrite a return address with

1316
00:46:59,480 --> 00:47:02,869
<font color="#CCCCCC">whatever the</font><font color="#E5E5E5"> whatever you want and that</font>

1317
00:47:01,640 --> 00:47:05,180
prevents<font color="#CCCCCC"> Rob and that prevents</font><font color="#E5E5E5"> this</font>

1318
00:47:02,869 --> 00:47:07,790
exploit in addition to other stuff<font color="#E5E5E5"> in</font>

1319
00:47:05,180 --> 00:47:09,730
<font color="#E5E5E5">terms of more architectural changes that</font>

1320
00:47:07,790 --> 00:47:17,509
would change the post exploitation game

1321
00:47:09,730 --> 00:47:21,020
<font color="#CCCCCC">you've</font><font color="#E5E5E5"> got you've got</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> this works</font><font color="#CCCCCC"> we</font>

1322
00:47:17,510 --> 00:47:25,040
<font color="#E5E5E5">are going to switch</font><font color="#CCCCCC"> back to this demo as</font>

1323
00:47:21,020 --> 00:47:26,540
soon as I can<font color="#E5E5E5"> connect back in there but</font>

1324
00:47:25,040 --> 00:47:28,130
<font color="#E5E5E5">yeah so the</font><font color="#CCCCCC"> thing I</font><font color="#E5E5E5"> was saying is you</font>

1325
00:47:26,540 --> 00:47:30,830
actually have<font color="#E5E5E5"> sort</font><font color="#CCCCCC"> of VSPs that live in</font>

1326
00:47:28,130 --> 00:47:33,740
the<font color="#CCCCCC"> the host OS</font><font color="#E5E5E5"> user mode and the reason</font>

1327
00:47:30,830 --> 00:47:35,930
<font color="#E5E5E5">that that's</font><font color="#CCCCCC"> interesting is that most of</font>

1328
00:47:33,740 --> 00:47:37,729
<font color="#CCCCCC">as user mode is gonna be isolated on a</font>

1329
00:47:35,930 --> 00:47:39,470
per VM basis so if you break into<font color="#E5E5E5"> the</font>

1330
00:47:37,730 --> 00:47:41,570
<font color="#CCCCCC">amore</font><font color="#E5E5E5"> process well you've only really</font>

1331
00:47:39,470 --> 00:47:43,759
broken into one vm's worker process

1332
00:47:41,570 --> 00:47:45,580
<font color="#E5E5E5">unlike this where you're gonna see you</font>

1333
00:47:43,760 --> 00:47:48,619
<font color="#E5E5E5">actually are able</font><font color="#CCCCCC"> to do a lot of</font><font color="#E5E5E5"> things</font>

1334
00:47:45,580 --> 00:47:51,890
so<font color="#E5E5E5"> hopefully so this actually shows that</font>

1335
00:47:48,619 --> 00:47:55,720
<font color="#E5E5E5">the exploit actually worked</font><font color="#CCCCCC"> and I'm just</font>

1336
00:47:51,890 --> 00:47:58,640
going<font color="#CCCCCC"> to skip a few</font><font color="#E5E5E5"> things let's see</font>

1337
00:47:55,720 --> 00:48:01,459
first<font color="#CCCCCC"> wanna so this is actually listing</font>

1338
00:47:58,640 --> 00:48:02,810
the processes in the host<font color="#CCCCCC"> OS from the</font>

1339
00:48:01,460 --> 00:48:04,340
guest OS right so you<font color="#CCCCCC"> have a list</font><font color="#E5E5E5"> of</font>

1340
00:48:02,810 --> 00:48:06,770
<font color="#E5E5E5">this and well I mean you don't</font><font color="#CCCCCC"> really</font>

1341
00:48:04,340 --> 00:48:08,810
<font color="#CCCCCC">have like any reason to believe that any</font>

1342
00:48:06,770 --> 00:48:09,859
of<font color="#E5E5E5"> this is legitimate because anyone can</font>

1343
00:48:08,810 --> 00:48:12,859
come up a list of<font color="#CCCCCC"> pidz</font>

1344
00:48:09,859 --> 00:48:18,770
but let's see<font color="#CCCCCC"> if</font><font color="#E5E5E5"> we can inject a DLL</font>

1345
00:48:12,859 --> 00:48:19,090
<font color="#E5E5E5">into the host to us</font><font color="#CCCCCC"> explorer.exe</font><font color="#E5E5E5"> yes we</font>

1346
00:48:18,770 --> 00:48:22,820
can

1347
00:48:19,090 --> 00:48:22,820
[Applause]

1348
00:48:25,090 --> 00:48:28,580
<font color="#E5E5E5">okay this is cool that</font><font color="#CCCCCC"> actually worked</font>

1349
00:48:28,070 --> 00:48:30,800
for once

1350
00:48:28,580 --> 00:48:32,930
well not<font color="#E5E5E5"> for once but so yes so the</font>

1351
00:48:30,800 --> 00:48:34,160
<font color="#E5E5E5">thing was in addition to that I'm</font><font color="#CCCCCC"> also</font>

1352
00:48:32,930 --> 00:48:36,350
running a second VM on<font color="#E5E5E5"> this machine</font>

1353
00:48:34,160 --> 00:48:40,190
<font color="#E5E5E5">because I want my demos to be really</font>

1354
00:48:36,350 --> 00:48:42,589
complicated<font color="#CCCCCC"> and we're gonna do is</font>

1355
00:48:40,190 --> 00:48:44,990
<font color="#E5E5E5">rejection I like I log into</font><font color="#CCCCCC"> that VM no</font>

1356
00:48:42,590 --> 00:48:48,650
particular reason<font color="#E5E5E5"> and from the original</font>

1357
00:48:44,990 --> 00:48:50,959
guests<font color="#E5E5E5"> not kissed can actually list what</font>

1358
00:48:48,650 --> 00:48:52,700
other partitions are living in there

1359
00:48:50,960 --> 00:48:55,640
<font color="#E5E5E5">okay so you have two and three I'm gonna</font>

1360
00:48:52,700 --> 00:48:58,549
guess that we're<font color="#E5E5E5"> two because sure and</font>

1361
00:48:55,640 --> 00:49:02,509
then we can actually<font color="#E5E5E5"> grab the other</font>

1362
00:48:58,550 --> 00:49:06,500
guests<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> it's going</font><font color="#E5E5E5"> to kind</font><font color="#CCCCCC"> of hook</font>

1363
00:49:02,510 --> 00:49:20,660
<font color="#E5E5E5">into the other VM and at this point we</font>

1364
00:49:06,500 --> 00:49:22,300
are<font color="#E5E5E5"> actually able to</font><font color="#CCCCCC"> come on so there</font>

1365
00:49:20,660 --> 00:49:24,980
were a<font color="#E5E5E5"> few more things for</font><font color="#CCCCCC"> the demo but</font>

1366
00:49:22,300 --> 00:49:27,800
<font color="#E5E5E5">you know first</font><font color="#CCCCCC"> failure kind of breaks</font>

1367
00:49:24,980 --> 00:49:29,360
<font color="#E5E5E5">things anyway I</font><font color="#CCCCCC"> have about</font><font color="#E5E5E5"> three seconds</font>

1368
00:49:27,800 --> 00:49:31,160
left<font color="#E5E5E5"> so the whole</font><font color="#CCCCCC"> point</font><font color="#E5E5E5"> is like yeah you</font>

1369
00:49:29,360 --> 00:49:32,630
<font color="#CCCCCC">have one being with a process per VM</font><font color="#E5E5E5"> and</font>

1370
00:49:31,160 --> 00:49:34,700
so if you<font color="#E5E5E5"> break into</font><font color="#CCCCCC"> that very important</font>

1371
00:49:32,630 --> 00:49:36,980
process<font color="#CCCCCC"> in one of those VIPs</font><font color="#E5E5E5"> VSPs that</font>

1372
00:49:34,700 --> 00:49:38,180
is in the worker process<font color="#E5E5E5"> well you've</font>

1373
00:49:36,980 --> 00:49:39,440
only really broken into that worker

1374
00:49:38,180 --> 00:49:41,299
process if you want<font color="#CCCCCC"> to have full access</font>

1375
00:49:39,440 --> 00:49:43,430
<font color="#E5E5E5">to all the</font><font color="#CCCCCC"> other</font><font color="#E5E5E5"> VMs</font><font color="#CCCCCC"> like I just</font><font color="#E5E5E5"> showed</font>

1376
00:49:41,300 --> 00:49:45,680
you<font color="#E5E5E5"> you still need to escalate to like a</font>

1377
00:49:43,430 --> 00:49:47,779
kernel level<font color="#E5E5E5"> and so this is something</font>

1378
00:49:45,680 --> 00:49:49,819
that we're<font color="#E5E5E5"> definitely trying to</font><font color="#CCCCCC"> invest</font>

1379
00:49:47,780 --> 00:49:51,830
in in terms of well we are actually

1380
00:49:49,820 --> 00:49:53,720
hardening also the worker process even

1381
00:49:51,830 --> 00:49:55,069
<font color="#CCCCCC">more so</font><font color="#E5E5E5"> than the kernel</font>

1382
00:49:53,720 --> 00:49:56,450
you know improvements the sandbox

1383
00:49:55,070 --> 00:49:58,220
improvements to our<font color="#CCCCCC"> scene mitigations</font>

1384
00:49:56,450 --> 00:50:00,560
<font color="#E5E5E5">and addition to that you know we</font><font color="#CCCCCC"> are</font>

1385
00:49:58,220 --> 00:50:02,089
trying<font color="#CCCCCC"> to move more and</font><font color="#E5E5E5"> more hyper-v</font>

1386
00:50:00,560 --> 00:50:06,820
components into user mode because it's

1387
00:50:02,090 --> 00:50:06,820
just a much better security posture and

1388
00:50:07,420 --> 00:50:11,810
<font color="#CCCCCC">ok now my slides okay</font><font color="#E5E5E5"> and the last thing</font>

1389
00:50:10,550 --> 00:50:14,210
I want to talk<font color="#CCCCCC"> about is just hyper-v</font>

1390
00:50:11,810 --> 00:50:16,870
Avanti<font color="#CCCCCC"> so what</font><font color="#E5E5E5"> I just</font><font color="#CCCCCC"> demoed here assume</font>

1391
00:50:14,210 --> 00:50:19,850
you have<font color="#E5E5E5"> worked the first</font><font color="#CCCCCC"> time is worth</font>

1392
00:50:16,870 --> 00:50:23,000
$250,000<font color="#CCCCCC"> to Microsoft</font><font color="#E5E5E5"> and keep in</font><font color="#CCCCCC"> mind</font>

1393
00:50:19,850 --> 00:50:25,009
this is about<font color="#CCCCCC"> Oh month's work of work</font><font color="#E5E5E5"> so</font>

1394
00:50:23,000 --> 00:50:26,570
if you want<font color="#E5E5E5"> to make you know one two or</font>

1395
00:50:25,010 --> 00:50:29,720
<font color="#CCCCCC">three years worth of salary in a month</font>

1396
00:50:26,570 --> 00:50:30,800
<font color="#E5E5E5">please submit to our bounty pay really</font>

1397
00:50:29,720 --> 00:50:32,509
<font color="#CCCCCC">well</font>

1398
00:50:30,800 --> 00:50:34,640
and there's<font color="#E5E5E5"> actually more</font><font color="#CCCCCC"> and more</font>

1399
00:50:32,510 --> 00:50:37,160
resources<font color="#E5E5E5"> out</font><font color="#CCCCCC"> there in terms of getting</font>

1400
00:50:34,640 --> 00:50:38,868
<font color="#CCCCCC">started one good thing one good resource</font>

1401
00:50:37,160 --> 00:50:42,430
<font color="#E5E5E5">to like get started is actually a talk</font>

1402
00:50:38,869 --> 00:50:44,480
<font color="#CCCCCC">that was yesterday</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> Jovi</font><font color="#E5E5E5"> Alec and</font><font color="#CCCCCC"> Nico</font>

1403
00:50:42,430 --> 00:50:45,890
<font color="#CCCCCC">so the slides</font><font color="#E5E5E5"> should be</font><font color="#CCCCCC"> available online</font>

1404
00:50:44,480 --> 00:50:48,080
<font color="#CCCCCC">in addition to</font><font color="#E5E5E5"> that we actually have a</font>

1405
00:50:45,890 --> 00:50:51,560
lot of<font color="#E5E5E5"> really well documented guests</font><font color="#CCCCCC"> I'd</font>

1406
00:50:48,080 --> 00:50:53,660
<font color="#E5E5E5">driver code that is in on github</font><font color="#CCCCCC"> so you</font>

1407
00:50:51,560 --> 00:50:55,369
<font color="#E5E5E5">can just like click on that and figure</font>

1408
00:50:53,660 --> 00:50:56,330
<font color="#CCCCCC">out how these VSPs work just</font><font color="#E5E5E5"> by looking</font>

1409
00:50:55,369 --> 00:50:58,220
at<font color="#CCCCCC"> VSC source code</font>

1410
00:50:56,330 --> 00:50:59,930
really well documented honestly<font color="#E5E5E5"> maybe</font>

1411
00:50:58,220 --> 00:51:01,640
better<font color="#E5E5E5"> documents and then some internal</font>

1412
00:50:59,930 --> 00:51:03,669
code and in addition to<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we have</font>

1413
00:51:01,640 --> 00:51:06,440
been publishing a bunch of hyper-v

1414
00:51:03,670 --> 00:51:08,089
symbols so a lot for you get started

1415
00:51:06,440 --> 00:51:09,550
<font color="#E5E5E5">with and hopefully we'll hear from you</font>

1416
00:51:08,089 --> 00:51:13,429
<font color="#CCCCCC">and about you thank you for</font><font color="#E5E5E5"> your time</font>

1417
00:51:09,550 --> 00:51:13,429
[Applause]

