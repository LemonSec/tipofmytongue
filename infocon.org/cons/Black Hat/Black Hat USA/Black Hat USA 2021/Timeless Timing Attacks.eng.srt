1
00:00:01,130 --> 00:00:14,000
[Music]

2
00:00:14,000 --> 00:00:16,079
hello i am mati vanu and together with

3
00:00:16,079 --> 00:00:18,320
tom von gutem we will be presenting

4
00:00:18,320 --> 00:00:20,560
timeless timing attacks

5
00:00:20,560 --> 00:00:22,560
tom is a researcher at the d strength

6
00:00:22,560 --> 00:00:24,800
group in keuler in belgium he's a

7
00:00:24,800 --> 00:00:27,039
phonetic web on the network security

8
00:00:27,039 --> 00:00:29,760
enthusiasts and he likes to exploit side

9
00:00:29,760 --> 00:00:32,159
channel leaks in browsers and more

10
00:00:32,159 --> 00:00:34,960
generally in web platforms

11
00:00:34,960 --> 00:00:37,520
i'm a postdoctoral researcher at nyu abu

12
00:00:37,520 --> 00:00:39,680
dhabi and later this year i will start

13
00:00:39,680 --> 00:00:42,640
as a professor at k11 i'm interested in

14
00:00:42,640 --> 00:00:44,879
wireless security software security and

15
00:00:44,879 --> 00:00:47,440
also a bit of applied crypto

16
00:00:47,440 --> 00:00:49,120
and previously i discovered the crack

17
00:00:49,120 --> 00:00:52,480
attack against wpa2 on the rc4 no more

18
00:00:52,480 --> 00:00:54,640
attack

19
00:00:54,640 --> 00:00:56,399
in this presentation we will be talking

20
00:00:56,399 --> 00:00:59,680
about timing attacks on timing leaks and

21
00:00:59,680 --> 00:01:02,239
let's start with three simple examples

22
00:01:02,239 --> 00:01:04,319
of a timing leak

23
00:01:04,319 --> 00:01:06,880
so the first example on the top left is

24
00:01:06,880 --> 00:01:09,360
a quite straightforward timing leak if

25
00:01:09,360 --> 00:01:12,400
some secret condition is true then extra

26
00:01:12,400 --> 00:01:14,479
computation is performed

27
00:01:14,479 --> 00:01:17,439
on here the adversary can recover

28
00:01:17,439 --> 00:01:19,600
whether the secret condition was true or

29
00:01:19,600 --> 00:01:23,280
not based on the execution time

30
00:01:23,280 --> 00:01:25,680
an example on the top right we have a

31
00:01:25,680 --> 00:01:27,439
for loop that goes through all the

32
00:01:27,439 --> 00:01:29,360
elements in an array

33
00:01:29,360 --> 00:01:31,439
and once an element has been found with

34
00:01:31,439 --> 00:01:34,240
a certain secret property then the for

35
00:01:34,240 --> 00:01:37,520
loop is terminated

36
00:01:37,680 --> 00:01:40,079
in other words the number of iterations

37
00:01:40,079 --> 00:01:42,640
that the for loop executes

38
00:01:42,640 --> 00:01:44,479
depends on some kind of secret

39
00:01:44,479 --> 00:01:46,240
information

40
00:01:46,240 --> 00:01:47,759
and this also means that the number of

41
00:01:47,759 --> 00:01:50,240
iterations that are executed leaks

42
00:01:50,240 --> 00:01:54,360
information to an adversary

43
00:01:54,880 --> 00:01:56,960
finally at the bottom we have a timing

44
00:01:56,960 --> 00:02:01,040
leak where if an array is not empty then

45
00:02:01,040 --> 00:02:03,600
extra computation is performed

46
00:02:03,600 --> 00:02:05,759
you can for instance for instance

47
00:02:05,759 --> 00:02:08,080
imagine a case where there is a search

48
00:02:08,080 --> 00:02:10,080
functionality on the website

49
00:02:10,080 --> 00:02:11,520
and if

50
00:02:11,520 --> 00:02:13,599
you are searching for a keyword on this

51
00:02:13,599 --> 00:02:16,879
keyword occurs in a secret document then

52
00:02:16,879 --> 00:02:19,360
extra computation is performed which

53
00:02:19,360 --> 00:02:22,959
again leaks information

54
00:02:22,959 --> 00:02:24,879
now how can these timing leaks be

55
00:02:24,879 --> 00:02:26,879
exploited using a traditional timing

56
00:02:26,879 --> 00:02:27,920
attack

57
00:02:27,920 --> 00:02:29,760
well the adversary of course needs to

58
00:02:29,760 --> 00:02:31,599
connect to the target server the

59
00:02:31,599 --> 00:02:34,000
adversary possibly needs to send a large

60
00:02:34,000 --> 00:02:37,440
number of requests and for each request

61
00:02:37,440 --> 00:02:39,760
the adversary measures how long it took

62
00:02:39,760 --> 00:02:43,200
the server to send a response

63
00:02:43,200 --> 00:02:45,519
and then the adversary will compare the

64
00:02:45,519 --> 00:02:48,239
response time of a baseline request with

65
00:02:48,239 --> 00:02:51,200
a target request now what do i mean with

66
00:02:51,200 --> 00:02:53,920
a baseline request well a baseline

67
00:02:53,920 --> 00:02:57,120
request is for example the first time

68
00:02:57,120 --> 00:02:59,840
leak here where the adversary knows that

69
00:02:59,840 --> 00:03:02,840
the secret condition will evaluate to

70
00:03:02,840 --> 00:03:06,159
false and then in the target request we

71
00:03:06,159 --> 00:03:07,519
do not know

72
00:03:07,519 --> 00:03:09,120
whether the secret condition will

73
00:03:09,120 --> 00:03:11,599
evaluate to false or true

74
00:03:11,599 --> 00:03:13,440
and instead we derive that by

75
00:03:13,440 --> 00:03:15,680
determining if there is a

76
00:03:15,680 --> 00:03:18,159
difference in the response time between

77
00:03:18,159 --> 00:03:20,319
the baseline where we know the condition

78
00:03:20,319 --> 00:03:22,879
is false on between the target where we

79
00:03:22,879 --> 00:03:24,720
do not know what this condition will

80
00:03:24,720 --> 00:03:26,560
evaluate to

81
00:03:26,560 --> 00:03:29,200
so on our timing timing attacks we will

82
00:03:29,200 --> 00:03:31,120
be we will always be comparing the

83
00:03:31,120 --> 00:03:34,000
baseline with a target

84
00:03:34,000 --> 00:03:35,760
to determine whether there really is a

85
00:03:35,760 --> 00:03:37,519
difference between the baseline on the

86
00:03:37,519 --> 00:03:42,640
target we will use statistical tests

87
00:03:43,200 --> 00:03:45,519
now what is the performance of these

88
00:03:45,519 --> 00:03:47,440
timing attacks well it depends on

89
00:03:47,440 --> 00:03:50,159
various variables depends on the network

90
00:03:50,159 --> 00:03:51,680
connection between the attacker on the

91
00:03:51,680 --> 00:03:54,560
server so if there is more jitter the

92
00:03:54,560 --> 00:03:57,439
performance of the attack will degrade

93
00:03:57,439 --> 00:03:59,680
an attacker can try to mitigate this to

94
00:03:59,680 --> 00:04:01,760
some extent by moving closer to the

95
00:04:01,760 --> 00:04:04,080
target for instance by renting the

96
00:04:04,080 --> 00:04:06,480
server in the same cloud provider of the

97
00:04:06,480 --> 00:04:07,840
victim

98
00:04:07,840 --> 00:04:09,920
and just to remark here the jitter can

99
00:04:09,920 --> 00:04:12,000
be present both on the upstream so on

100
00:04:12,000 --> 00:04:14,720
the requests on the down screen so on

101
00:04:14,720 --> 00:04:17,120
the responses

102
00:04:17,120 --> 00:04:19,199
another important factor is the size of

103
00:04:19,199 --> 00:04:22,079
the timing leaks so it's much easier to

104
00:04:22,079 --> 00:04:25,120
exploit a large timing leak of say 50

105
00:04:25,120 --> 00:04:27,600
milliseconds than it is to exploit a

106
00:04:27,600 --> 00:04:30,960
small timing leak of for instance five

107
00:04:30,960 --> 00:04:33,360
microseconds

108
00:04:33,360 --> 00:04:34,560
finally

109
00:04:34,560 --> 00:04:36,800
the number of measurements that you can

110
00:04:36,800 --> 00:04:39,120
make also heavily influence the

111
00:04:39,120 --> 00:04:41,440
performance of the attack so the more

112
00:04:41,440 --> 00:04:43,360
measurements you can make

113
00:04:43,360 --> 00:04:46,160
the better the performance of a

114
00:04:46,160 --> 00:04:47,840
timing attack

115
00:04:47,840 --> 00:04:50,000
anton will now graphically illustrate

116
00:04:50,000 --> 00:04:53,680
how a timing attack works

117
00:04:53,919 --> 00:04:56,320
okay so let's see how this attack works

118
00:04:56,320 --> 00:04:59,120
in practice so we have our attacker on

119
00:04:59,120 --> 00:05:00,960
the left side and the server on the

120
00:05:00,960 --> 00:05:03,360
right side and it's a remote attack as

121
00:05:03,360 --> 00:05:05,520
you can see because

122
00:05:05,520 --> 00:05:07,440
well the packets need to go over the

123
00:05:07,440 --> 00:05:10,000
internet over several hubs so what the

124
00:05:10,000 --> 00:05:12,080
attacker does is he will

125
00:05:12,080 --> 00:05:14,400
send the request and start at the same

126
00:05:14,400 --> 00:05:15,919
time the timer

127
00:05:15,919 --> 00:05:17,440
and only when the

128
00:05:17,440 --> 00:05:19,600
response has been received the attacker

129
00:05:19,600 --> 00:05:21,680
will stop the timer

130
00:05:21,680 --> 00:05:23,520
so the attacker will have to do this

131
00:05:23,520 --> 00:05:26,240
multiple times and record every time how

132
00:05:26,240 --> 00:05:30,479
long it took to process the request

133
00:05:30,560 --> 00:05:33,199
so here we see another example and in

134
00:05:33,199 --> 00:05:35,440
the last hope you can see that there was

135
00:05:35,440 --> 00:05:37,520
a bit of jitter

136
00:05:37,520 --> 00:05:40,800
causing the the request to be delayed

137
00:05:40,800 --> 00:05:41,520
and

138
00:05:41,520 --> 00:05:43,759
that resulted in a higher

139
00:05:43,759 --> 00:05:46,080
timing measurement

140
00:05:46,080 --> 00:05:47,120
so

141
00:05:47,120 --> 00:05:49,199
the attacker will have to do this

142
00:05:49,199 --> 00:05:51,280
many times over and then

143
00:05:51,280 --> 00:05:54,400
try to use some statistical analysis

144
00:05:54,400 --> 00:05:56,720
to see what the actual timing

145
00:05:56,720 --> 00:05:58,240
without

146
00:05:58,240 --> 00:06:00,240
the consequences of jitter

147
00:06:00,240 --> 00:06:01,600
for the

148
00:06:01,600 --> 00:06:05,880
processing the request will be

149
00:06:06,560 --> 00:06:09,280
um so to see uh

150
00:06:09,280 --> 00:06:11,360
what what could actually be achieved

151
00:06:11,360 --> 00:06:12,639
with such a

152
00:06:12,639 --> 00:06:15,759
timing attack uh we did some experiments

153
00:06:15,759 --> 00:06:18,880
uh so from our university network we

154
00:06:18,880 --> 00:06:21,039
launched attacks against

155
00:06:21,039 --> 00:06:24,720
servers that we set up on aws

156
00:06:24,720 --> 00:06:27,039
in different parts of the world so we

157
00:06:27,039 --> 00:06:29,280
set a server up in the eu

158
00:06:29,280 --> 00:06:33,680
the us and asia and then we try to see

159
00:06:33,680 --> 00:06:37,360
like with with 95 accuracy how many

160
00:06:37,360 --> 00:06:39,120
requests were required

161
00:06:39,120 --> 00:06:40,080
to

162
00:06:40,080 --> 00:06:42,720
detect a timing difference

163
00:06:42,720 --> 00:06:45,199
and we arranged this timing difference

164
00:06:45,199 --> 00:06:47,680
between 5 microseconds

165
00:06:47,680 --> 00:06:49,840
and 50 microseconds

166
00:06:49,840 --> 00:06:52,720
so as you can see um

167
00:06:52,720 --> 00:06:55,440
for 50 microseconds

168
00:06:55,440 --> 00:06:58,639
we managed to find to detect

169
00:06:58,639 --> 00:07:03,199
this timing difference in all servers

170
00:07:03,199 --> 00:07:07,840
and so it took 333 requests to find

171
00:07:07,840 --> 00:07:10,400
to detect this timing difference in the

172
00:07:10,400 --> 00:07:12,319
eu server

173
00:07:12,319 --> 00:07:15,120
a bit more than 4000 for the us and more

174
00:07:15,120 --> 00:07:16,639
than 7000

175
00:07:16,639 --> 00:07:18,960
for the server in asia

176
00:07:18,960 --> 00:07:22,000
and also as the timing difference goes

177
00:07:22,000 --> 00:07:23,520
lower

178
00:07:23,520 --> 00:07:25,440
you can see that either

179
00:07:25,440 --> 00:07:28,319
many more requests are required

180
00:07:28,319 --> 00:07:31,360
to perform this statistical analysis or

181
00:07:31,360 --> 00:07:34,080
it's simply not possible so for uh the

182
00:07:34,080 --> 00:07:36,639
server in the us a timing difference of

183
00:07:36,639 --> 00:07:38,800
10 microseconds was no longer possible

184
00:07:38,800 --> 00:07:40,080
to detect

185
00:07:40,080 --> 00:07:41,039
um

186
00:07:41,039 --> 00:07:45,039
with less than 1000

187
00:07:45,039 --> 00:07:47,599
measurements

188
00:07:50,319 --> 00:07:52,080
and that brings us to the timeless

189
00:07:52,080 --> 00:07:54,878
timing index

190
00:07:56,960 --> 00:08:00,720
so as we see from the

191
00:08:00,720 --> 00:08:01,599
um

192
00:08:01,599 --> 00:08:03,599
from the example before

193
00:08:03,599 --> 00:08:06,000
we know that the the absolute response

194
00:08:06,000 --> 00:08:08,479
timing is quite unreliable

195
00:08:08,479 --> 00:08:10,240
because it will always include jitter

196
00:08:10,240 --> 00:08:13,440
for every request so we thought like

197
00:08:13,440 --> 00:08:16,000
okay why not just get rid of the notion

198
00:08:16,000 --> 00:08:18,160
of time so that's why we call these

199
00:08:18,160 --> 00:08:21,280
attacks timeless

200
00:08:21,520 --> 00:08:23,840
and then well when we don't have any

201
00:08:23,840 --> 00:08:27,440
time and still want to do time index

202
00:08:27,440 --> 00:08:28,720
we have to

203
00:08:28,720 --> 00:08:30,319
find something different

204
00:08:30,319 --> 00:08:33,120
so we found that we can actually use

205
00:08:33,120 --> 00:08:35,599
or exploit concurrency

206
00:08:35,599 --> 00:08:36,719
and

207
00:08:36,719 --> 00:08:39,200
instead of looking at the time of the

208
00:08:39,200 --> 00:08:40,559
request

209
00:08:40,559 --> 00:08:42,640
we send two requests at the same time

210
00:08:42,640 --> 00:08:43,919
and then

211
00:08:43,919 --> 00:08:45,920
look at their

212
00:08:45,920 --> 00:08:47,920
the response order

213
00:08:47,920 --> 00:08:50,160
so this means that we don't no longer

214
00:08:50,160 --> 00:08:53,360
need any absolute timing measurements

215
00:08:53,360 --> 00:08:55,760
and as a result

216
00:08:55,760 --> 00:08:57,519
these timeless diamond attacks are

217
00:08:57,519 --> 00:08:59,279
completely unaffected by a network

218
00:08:59,279 --> 00:09:01,600
jitter

219
00:09:01,600 --> 00:09:04,640
so let's look at this diagram on how

220
00:09:04,640 --> 00:09:07,040
this would work in practice

221
00:09:07,040 --> 00:09:09,519
so we have the exact same

222
00:09:09,519 --> 00:09:10,880
setup

223
00:09:10,880 --> 00:09:13,440
exact here you can see that the

224
00:09:13,440 --> 00:09:16,080
attacker is no longer using a clock to

225
00:09:16,080 --> 00:09:17,440
measure the time

226
00:09:17,440 --> 00:09:20,320
it takes to send the request

227
00:09:20,320 --> 00:09:22,560
so the attacker sends two

228
00:09:22,560 --> 00:09:24,800
requests the same time

229
00:09:24,800 --> 00:09:26,399
and they

230
00:09:26,399 --> 00:09:28,560
arrive at the server and then they're

231
00:09:28,560 --> 00:09:30,080
processed

232
00:09:30,080 --> 00:09:31,360
in parallel

233
00:09:31,360 --> 00:09:34,320
and of course there can only be one

234
00:09:34,320 --> 00:09:37,200
who finishes processing first and so

235
00:09:37,200 --> 00:09:39,279
this will be the light blue one

236
00:09:39,279 --> 00:09:41,519
um and this will also be the order in

237
00:09:41,519 --> 00:09:44,000
which they are received by the attacker

238
00:09:44,000 --> 00:09:46,240
and so the attacker can

239
00:09:46,240 --> 00:09:47,760
from this infer

240
00:09:47,760 --> 00:09:51,200
that's the the light blue which

241
00:09:51,200 --> 00:09:53,200
matches the the light

242
00:09:53,200 --> 00:09:54,800
pink one

243
00:09:54,800 --> 00:09:56,160
that requests

244
00:09:56,160 --> 00:09:58,800
managed to process before

245
00:09:58,800 --> 00:10:01,599
the darker one

246
00:10:02,000 --> 00:10:04,399
now if we again have the same

247
00:10:04,399 --> 00:10:07,120
example but here we see and there was

248
00:10:07,120 --> 00:10:08,480
still a

249
00:10:08,480 --> 00:10:11,440
some jitter in the network parts from

250
00:10:11,440 --> 00:10:13,680
the attacker to the server

251
00:10:13,680 --> 00:10:16,079
we see that the packets still arrive at

252
00:10:16,079 --> 00:10:18,480
the same time at the server so they are

253
00:10:18,480 --> 00:10:22,160
still processed at exactly the same time

254
00:10:22,160 --> 00:10:23,920
and again

255
00:10:23,920 --> 00:10:26,079
we see that the

256
00:10:26,079 --> 00:10:28,079
light blue response

257
00:10:28,079 --> 00:10:30,320
is generated first so this

258
00:10:30,320 --> 00:10:32,399
indicates that the processing time of

259
00:10:32,399 --> 00:10:33,360
this

260
00:10:33,360 --> 00:10:37,760
lights pink requests took less time

261
00:10:37,760 --> 00:10:39,120
thank you tom

262
00:10:39,120 --> 00:10:41,040
so what are the requirements to perform

263
00:10:41,040 --> 00:10:42,880
a timeless timing attack

264
00:10:42,880 --> 00:10:44,880
well first and for all the requests need

265
00:10:44,880 --> 00:10:47,680
to arrive at the same time at the server

266
00:10:47,680 --> 00:10:49,839
the server needs to process requests

267
00:10:49,839 --> 00:10:51,120
concurrently

268
00:10:51,120 --> 00:10:53,360
on the response order needs to reflect

269
00:10:53,360 --> 00:10:55,920
the difference in the execution time of

270
00:10:55,920 --> 00:10:58,160
both requests

271
00:10:58,160 --> 00:10:59,680
so let's explore these three

272
00:10:59,680 --> 00:11:02,480
requirements in more detail

273
00:11:02,480 --> 00:11:04,480
the first requirement that the two

274
00:11:04,480 --> 00:11:07,120
requests have to arrive at the same time

275
00:11:07,120 --> 00:11:09,760
can be fulfilled using two options

276
00:11:09,760 --> 00:11:12,240
namely by either relying on multiplexing

277
00:11:12,240 --> 00:11:16,000
or by relying on encapsulation

278
00:11:16,000 --> 00:11:17,760
an example where we can rely on

279
00:11:17,760 --> 00:11:21,120
multiplexing is the http 2 protocol

280
00:11:21,120 --> 00:11:22,800
which supports

281
00:11:22,800 --> 00:11:25,920
concurrent requests so with http 2 we

282
00:11:25,920 --> 00:11:28,480
send we can send two requests at the

283
00:11:28,480 --> 00:11:31,279
same time and they will be sent on

284
00:11:31,279 --> 00:11:34,160
processed in parallel

285
00:11:34,160 --> 00:11:36,880
moreover a single request

286
00:11:36,880 --> 00:11:39,279
well actually a single tcp packet can

287
00:11:39,279 --> 00:11:41,040
carry two

288
00:11:41,040 --> 00:11:43,920
http requests at the same time that will

289
00:11:43,920 --> 00:11:47,760
then also be pro processed concurrently

290
00:11:47,760 --> 00:11:49,440
another option is to rely on

291
00:11:49,440 --> 00:11:51,040
encapsulation

292
00:11:51,040 --> 00:11:54,800
and here our example is to exploit http1

293
00:11:54,800 --> 00:11:57,440
when that protocol is run over tor or

294
00:11:57,440 --> 00:12:00,399
over a vpn connection

295
00:12:00,399 --> 00:12:03,519
and let me illustrate both examples

296
00:12:03,519 --> 00:12:04,720
graphically

297
00:12:04,720 --> 00:12:08,480
so with multiplexing we can put two http

298
00:12:08,480 --> 00:12:11,120
requests shown in grey here at the top

299
00:12:11,120 --> 00:12:15,600
and a single tcp packet shown in blue

300
00:12:15,600 --> 00:12:18,320
for http 1 over tor we would be

301
00:12:18,320 --> 00:12:21,279
targeting an onion service

302
00:12:21,279 --> 00:12:23,839
and here at the bottom again the two

303
00:12:23,839 --> 00:12:27,200
http requests are shown in grey

304
00:12:27,200 --> 00:12:30,480
on here each http one request is put

305
00:12:30,480 --> 00:12:34,480
into a separate tcp packet shown in red

306
00:12:34,480 --> 00:12:37,519
on the turn this tcp packet is put into

307
00:12:37,519 --> 00:12:40,800
a separate torso packet

308
00:12:40,800 --> 00:12:43,360
however what the adversary then does is

309
00:12:43,360 --> 00:12:46,160
that the adversary assures that these

310
00:12:46,160 --> 00:12:49,519
two torsos will be aggregated into one

311
00:12:49,519 --> 00:12:51,760
single tcp packet

312
00:12:51,760 --> 00:12:54,480
and when that single tcp packet arrives

313
00:12:54,480 --> 00:12:56,720
at the server then the server will

314
00:12:56,720 --> 00:13:00,399
effectively process both http 1 requests

315
00:13:00,399 --> 00:13:03,279
at the same time

316
00:13:04,560 --> 00:13:05,279
now

317
00:13:05,279 --> 00:13:07,360
for the second requirement

318
00:13:07,360 --> 00:13:09,600
the second requirement is that these two

319
00:13:09,600 --> 00:13:11,760
requests have to be processed

320
00:13:11,760 --> 00:13:13,040
concurrently

321
00:13:13,040 --> 00:13:15,839
and whether that is done depends on the

322
00:13:15,839 --> 00:13:18,320
application so with some implementations

323
00:13:18,320 --> 00:13:20,320
they may still handle requests

324
00:13:20,320 --> 00:13:21,600
sequentially

325
00:13:21,600 --> 00:13:24,000
other implementations may handle them in

326
00:13:24,000 --> 00:13:25,279
parallel

327
00:13:25,279 --> 00:13:27,360
one thing to watch out for here is that

328
00:13:27,360 --> 00:13:30,399
if an encryption protocol is used on top

329
00:13:30,399 --> 00:13:32,399
then sometimes that encryption protocol

330
00:13:32,399 --> 00:13:35,120
may require that the decryption happens

331
00:13:35,120 --> 00:13:37,839
sequentially

332
00:13:37,839 --> 00:13:40,480
the third requirement is that the

333
00:13:40,480 --> 00:13:42,560
order of responses

334
00:13:42,560 --> 00:13:44,560
has to reflect the order of the

335
00:13:44,560 --> 00:13:46,240
execution time

336
00:13:46,240 --> 00:13:48,480
or in other words the server must

337
00:13:48,480 --> 00:13:51,600
generate on sent a response immediately

338
00:13:51,600 --> 00:13:56,000
after it finished processing the request

339
00:13:56,000 --> 00:13:58,880
additionally the order of responses must

340
00:13:58,880 --> 00:14:00,959
still be the same when it when they

341
00:14:00,959 --> 00:14:03,199
arrive at the adversary

342
00:14:03,199 --> 00:14:05,360
and most of the cases

343
00:14:05,360 --> 00:14:07,440
that is actually the case and this is

344
00:14:07,440 --> 00:14:10,160
because both responsible responses

345
00:14:10,160 --> 00:14:12,959
follow the same network path

346
00:14:12,959 --> 00:14:14,959
but even if for some reasons

347
00:14:14,959 --> 00:14:18,240
these responses are reordered then the

348
00:14:18,240 --> 00:14:20,560
adversary can still look at the tcp

349
00:14:20,560 --> 00:14:24,000
sequence number or the tcp timestamps to

350
00:14:24,000 --> 00:14:26,720
recover the original order in which the

351
00:14:26,720 --> 00:14:31,399
server sent those responses

352
00:14:32,800 --> 00:14:34,639
so how performant is the attack in

353
00:14:34,639 --> 00:14:36,079
practice

354
00:14:36,079 --> 00:14:38,480
well if we compare to sequential timing

355
00:14:38,480 --> 00:14:41,360
attacks tom already explained the first

356
00:14:41,360 --> 00:14:42,880
part of this

357
00:14:42,880 --> 00:14:46,160
table here now we also added how many

358
00:14:46,160 --> 00:14:48,160
requests we need when performing a

359
00:14:48,160 --> 00:14:50,240
traditional timing attack over land on

360
00:14:50,240 --> 00:14:51,920
over the local host

361
00:14:51,920 --> 00:14:54,240
for instance to measure a five

362
00:14:54,240 --> 00:14:56,320
microsecond timing leak over the local

363
00:14:56,320 --> 00:15:00,160
host we need a bit more than 40 requests

364
00:15:00,160 --> 00:15:02,480
on the other hand for a timeless timing

365
00:15:02,480 --> 00:15:04,959
attack no matter where we are on the

366
00:15:04,959 --> 00:15:08,399
internet to measure the same timing leak

367
00:15:08,399 --> 00:15:11,519
we only need about 50 requests pair

368
00:15:11,519 --> 00:15:13,760
while for instance the five microsecond

369
00:15:13,760 --> 00:15:16,560
leak cannot be exploited

370
00:15:16,560 --> 00:15:18,480
remotely over the internet it can only

371
00:15:18,480 --> 00:15:20,880
be done in the same land or localhost

372
00:15:20,880 --> 00:15:23,040
while with a timeless attack we can

373
00:15:23,040 --> 00:15:24,839
exploit that leak

374
00:15:24,839 --> 00:15:27,680
anywhere and i also want to highlight

375
00:15:27,680 --> 00:15:30,160
that the smallest time leak that we

376
00:15:30,160 --> 00:15:34,079
could exploit was a timing leak of 100

377
00:15:34,079 --> 00:15:35,519
nanoseconds

378
00:15:35,519 --> 00:15:37,279
and this really shows that timeless

379
00:15:37,279 --> 00:15:39,920
timing attacks offer an order of

380
00:15:39,920 --> 00:15:42,560
magnitude improvement over traditional

381
00:15:42,560 --> 00:15:43,920
timing leaks

382
00:15:43,920 --> 00:15:46,959
even it even improves over some timing

383
00:15:46,959 --> 00:15:49,519
attacks over the local host

384
00:15:49,519 --> 00:15:51,440
so that explains how a direct timing

385
00:15:51,440 --> 00:15:52,639
attack works

386
00:15:52,639 --> 00:15:54,800
it is also possible to perform a

387
00:15:54,800 --> 00:15:57,600
cross-site timeless timing attack on to

388
00:15:57,600 --> 00:16:00,079
perform a timeless timing attack over

389
00:16:00,079 --> 00:16:02,639
wi-fi anton will now explain how the

390
00:16:02,639 --> 00:16:06,320
cross-site timing attack works

391
00:16:06,320 --> 00:16:07,360
so this

392
00:16:07,360 --> 00:16:09,440
cross side time intake is actually a bit

393
00:16:09,440 --> 00:16:11,600
different from the time attack that we

394
00:16:11,600 --> 00:16:12,959
saw before

395
00:16:12,959 --> 00:16:15,199
so in the previous time attack it's

396
00:16:15,199 --> 00:16:18,560
direct time intake the attacker directly

397
00:16:18,560 --> 00:16:22,240
connects to the target server

398
00:16:22,240 --> 00:16:24,480
and with this chromesite diamantec it's

399
00:16:24,480 --> 00:16:27,279
actually the victim with their browser

400
00:16:27,279 --> 00:16:29,120
who will be connecting to the

401
00:16:29,120 --> 00:16:31,600
target server

402
00:16:31,600 --> 00:16:34,079
and so the threat model is a bit

403
00:16:34,079 --> 00:16:35,279
different

404
00:16:35,279 --> 00:16:36,560
so

405
00:16:36,560 --> 00:16:38,880
here in the cross-site time intake the

406
00:16:38,880 --> 00:16:41,279
attack can be launched when the victim

407
00:16:41,279 --> 00:16:43,759
lands on a malicious website

408
00:16:43,759 --> 00:16:45,759
so this could be

409
00:16:45,759 --> 00:16:48,560
caused by clicking on a malicious link

410
00:16:48,560 --> 00:16:50,959
or there would be an malicious

411
00:16:50,959 --> 00:16:53,839
advertisement of the attacker or the

412
00:16:53,839 --> 00:16:56,000
victim really as an urgent need to look

413
00:16:56,000 --> 00:16:58,880
at cute animal videos

414
00:16:58,880 --> 00:17:01,360
so as long as the attacker is able to

415
00:17:01,360 --> 00:17:02,399
launch

416
00:17:02,399 --> 00:17:03,759
javascript

417
00:17:03,759 --> 00:17:05,760
in order to trigger requests to the

418
00:17:05,760 --> 00:17:07,919
targeted web server

419
00:17:07,919 --> 00:17:12,000
it's possible to to perform this attack

420
00:17:12,160 --> 00:17:14,559
and the reason why this is is because

421
00:17:14,559 --> 00:17:17,439
the the victim's cookies will be

422
00:17:17,439 --> 00:17:20,000
automatically included in the request so

423
00:17:20,000 --> 00:17:21,760
this means that the request will be

424
00:17:21,760 --> 00:17:23,039
processed

425
00:17:23,039 --> 00:17:26,640
using the victim's authentication

426
00:17:27,199 --> 00:17:29,280
and what attacker needs to do is to

427
00:17:29,280 --> 00:17:32,080
observe the response order in which the

428
00:17:32,080 --> 00:17:35,679
requests are processed and returned

429
00:17:35,679 --> 00:17:37,760
so this can be easily done using the

430
00:17:37,760 --> 00:17:39,520
fetch api

431
00:17:39,520 --> 00:17:42,400
and then the attacker can leak sensitive

432
00:17:42,400 --> 00:17:45,039
information that the user shared

433
00:17:45,039 --> 00:17:47,840
or the victim shared with the website

434
00:17:47,840 --> 00:17:51,200
so to give an example of this

435
00:17:51,200 --> 00:17:54,559
is a bug that we found in hacker one

436
00:17:54,559 --> 00:17:56,320
where we could abuse

437
00:17:56,320 --> 00:17:58,160
the search function

438
00:17:58,160 --> 00:18:02,160
to see if there were any results uh

439
00:18:02,160 --> 00:18:04,240
with a given search term

440
00:18:04,240 --> 00:18:07,440
uh which would include uh information

441
00:18:07,440 --> 00:18:10,000
about private reports

442
00:18:10,000 --> 00:18:12,080
so this

443
00:18:12,080 --> 00:18:14,240
vulnerability was actually detected a

444
00:18:14,240 --> 00:18:16,960
couple of times before

445
00:18:16,960 --> 00:18:21,120
and there people reported it using a

446
00:18:21,120 --> 00:18:23,679
regular timing intake

447
00:18:23,679 --> 00:18:26,720
and it was not really

448
00:18:26,720 --> 00:18:29,120
feasible to exploit it

449
00:18:29,120 --> 00:18:30,240
um

450
00:18:30,240 --> 00:18:33,039
and so with these timeless time attacks

451
00:18:33,039 --> 00:18:35,039
we managed to actually

452
00:18:35,039 --> 00:18:36,960
improve uh

453
00:18:36,960 --> 00:18:39,280
this well the timing leak

454
00:18:39,280 --> 00:18:41,760
uh and we could actually

455
00:18:41,760 --> 00:18:42,720
quite

456
00:18:42,720 --> 00:18:44,480
consistently

457
00:18:44,480 --> 00:18:47,280
reproduce the vulnerability and search

458
00:18:47,280 --> 00:18:48,640
for

459
00:18:48,640 --> 00:18:52,320
information about private reports

460
00:18:54,840 --> 00:18:59,280
so because now the attacker is is

461
00:18:59,280 --> 00:19:01,600
running javascript they no longer have

462
00:19:01,600 --> 00:19:04,240
uh low level control over uh the network

463
00:19:04,240 --> 00:19:06,799
connections uh as they did in the direct

464
00:19:06,799 --> 00:19:09,200
diametric because the browser is the one

465
00:19:09,200 --> 00:19:10,960
that chooses how to

466
00:19:10,960 --> 00:19:13,520
send to requests or send the packets to

467
00:19:13,520 --> 00:19:16,880
the kernel which will forward them

468
00:19:16,880 --> 00:19:19,679
to the target server

469
00:19:19,679 --> 00:19:22,160
so this means that the attacker needs

470
00:19:22,160 --> 00:19:23,600
another technique

471
00:19:23,600 --> 00:19:25,840
to ensure that

472
00:19:25,840 --> 00:19:28,000
the two requests are

473
00:19:28,000 --> 00:19:31,039
put into a single packet

474
00:19:31,039 --> 00:19:32,400
fortunately

475
00:19:32,400 --> 00:19:33,360
we can

476
00:19:33,360 --> 00:19:35,440
leverage some

477
00:19:35,440 --> 00:19:37,280
things of tcp

478
00:19:37,280 --> 00:19:41,120
nearly the the tcp congestion control

479
00:19:41,120 --> 00:19:43,280
so this this mechanism prevents the

480
00:19:43,280 --> 00:19:44,480
client from

481
00:19:44,480 --> 00:19:46,640
sending all packets at once

482
00:19:46,640 --> 00:19:47,919
and

483
00:19:47,919 --> 00:19:50,160
so the client can send

484
00:19:50,160 --> 00:19:51,600
a packet

485
00:19:51,600 --> 00:19:53,840
depending on the current congestion

486
00:19:53,840 --> 00:19:55,440
window

487
00:19:55,440 --> 00:19:57,919
and before sending more packets it will

488
00:19:57,919 --> 00:20:02,000
need an acknowledgement from the server

489
00:20:02,640 --> 00:20:04,159
and as

490
00:20:04,159 --> 00:20:07,520
well when requests are queued

491
00:20:07,520 --> 00:20:09,039
the

492
00:20:09,039 --> 00:20:09,919
and

493
00:20:09,919 --> 00:20:11,919
the the acknowledgement hasn't been

494
00:20:11,919 --> 00:20:13,600
received yet

495
00:20:13,600 --> 00:20:15,840
the the following

496
00:20:15,840 --> 00:20:18,080
requests will be merged into a single

497
00:20:18,080 --> 00:20:20,640
packet

498
00:20:20,640 --> 00:20:22,240
so the attack

499
00:20:22,240 --> 00:20:24,000
is fairly

500
00:20:24,000 --> 00:20:25,520
straightforward

501
00:20:25,520 --> 00:20:27,440
as you can see here

502
00:20:27,440 --> 00:20:28,480
so

503
00:20:28,480 --> 00:20:30,240
what the attacker just needs to do is

504
00:20:30,240 --> 00:20:32,880
first send a bogus

505
00:20:32,880 --> 00:20:36,480
post requests with a very long body

506
00:20:36,480 --> 00:20:38,960
in order to fill

507
00:20:38,960 --> 00:20:41,760
the congestion window

508
00:20:41,760 --> 00:20:44,720
so this is just a body with a very long

509
00:20:44,720 --> 00:20:46,720
string

510
00:20:46,720 --> 00:20:48,400
and after that

511
00:20:48,400 --> 00:20:51,520
uh the congestion window will be used up

512
00:20:51,520 --> 00:20:54,640
and uh the browser will need to wait uh

513
00:20:54,640 --> 00:20:56,720
or the kernel will have to wait

514
00:20:56,720 --> 00:20:59,679
for sending the next packets uh before

515
00:20:59,679 --> 00:21:01,520
an acknowledgement from the server has

516
00:21:01,520 --> 00:21:04,240
rece has been received

517
00:21:04,240 --> 00:21:07,520
um so before that happens uh the

518
00:21:07,520 --> 00:21:09,919
attacker will send two more uh fetch

519
00:21:09,919 --> 00:21:13,440
requests and these are the the requested

520
00:21:13,440 --> 00:21:16,240
and they're interested that the care is

521
00:21:16,240 --> 00:21:19,360
interested in to know the relative

522
00:21:19,360 --> 00:21:22,320
response order

523
00:21:22,720 --> 00:21:25,919
so let's see how this works in practice

524
00:21:25,919 --> 00:21:30,159
so we have our malicious attacker

525
00:21:30,159 --> 00:21:32,320
well running some javascript on a

526
00:21:32,320 --> 00:21:34,640
website that's being visited by the

527
00:21:34,640 --> 00:21:36,799
client

528
00:21:36,799 --> 00:21:39,039
so with this first

529
00:21:39,039 --> 00:21:40,799
post request

530
00:21:40,799 --> 00:21:45,360
the attackers or the victims tcp package

531
00:21:45,360 --> 00:21:46,559
queue is

532
00:21:46,559 --> 00:21:47,840
filled up

533
00:21:47,840 --> 00:21:49,200
and

534
00:21:49,200 --> 00:21:52,480
so it already sends

535
00:21:52,480 --> 00:21:54,640
something like 10 tcp packets to the

536
00:21:54,640 --> 00:21:56,110
server

537
00:21:56,110 --> 00:21:57,440
[Music]

538
00:21:57,440 --> 00:22:00,480
and of course it includes the the cookie

539
00:22:00,480 --> 00:22:03,440
um in the in this request

540
00:22:03,440 --> 00:22:05,760
um

541
00:22:05,840 --> 00:22:08,559
and then well the client will have to

542
00:22:08,559 --> 00:22:11,039
wait before sending uh the rest of the

543
00:22:11,039 --> 00:22:12,960
packets

544
00:22:12,960 --> 00:22:16,640
and in this period uh the client will or

545
00:22:16,640 --> 00:22:19,679
the attacker will already launch another

546
00:22:19,679 --> 00:22:21,120
fetch request

547
00:22:21,120 --> 00:22:22,559
um

548
00:22:22,559 --> 00:22:24,799
but well there's still a queue so then

549
00:22:24,799 --> 00:22:27,679
it will this request will be appended to

550
00:22:27,679 --> 00:22:29,360
the queue

551
00:22:29,360 --> 00:22:31,840
and then the second one

552
00:22:31,840 --> 00:22:34,960
will also be appended to the queue

553
00:22:34,960 --> 00:22:36,960
and so here

554
00:22:36,960 --> 00:22:39,840
so the the packet queue that we see here

555
00:22:39,840 --> 00:22:40,559
it

556
00:22:40,559 --> 00:22:42,640
represents all the different

557
00:22:42,640 --> 00:22:45,200
all the different tcp packets that will

558
00:22:45,200 --> 00:22:46,799
be sent

559
00:22:46,799 --> 00:22:48,400
and we can see that

560
00:22:48,400 --> 00:22:49,440
the

561
00:22:49,440 --> 00:22:52,559
lights pink and the dark pink

562
00:22:52,559 --> 00:22:54,559
requests will be merged into a single

563
00:22:54,559 --> 00:22:56,960
packet

564
00:22:57,039 --> 00:22:59,600
so once the acknowledgement from the

565
00:22:59,600 --> 00:23:01,840
server has arrived the queue will be

566
00:23:01,840 --> 00:23:04,240
cleared and the requests

567
00:23:04,240 --> 00:23:06,720
so both requests will be

568
00:23:06,720 --> 00:23:08,880
forced into a single packet and then

569
00:23:08,880 --> 00:23:11,919
send off to the server

570
00:23:13,360 --> 00:23:15,200
so this uh

571
00:23:15,200 --> 00:23:16,799
so in this presentation we already

572
00:23:16,799 --> 00:23:19,360
covered the direct timing index

573
00:23:19,360 --> 00:23:20,240
and

574
00:23:20,240 --> 00:23:22,480
i now just covered also the cross-site

575
00:23:22,480 --> 00:23:25,440
time intakes and now mati will be

576
00:23:25,440 --> 00:23:29,120
looking into a third attack scenario

577
00:23:29,120 --> 00:23:32,000
namely where we

578
00:23:32,320 --> 00:23:35,440
attack the wi-fi and

579
00:23:35,440 --> 00:23:37,280
so it is also possible to perform

580
00:23:37,280 --> 00:23:39,919
timeless timing attacks over wi-fi

581
00:23:39,919 --> 00:23:42,960
and in particular we will target the pwd

582
00:23:42,960 --> 00:23:46,799
protocol when used in a wpa2 network

583
00:23:46,799 --> 00:23:49,279
so with wpa2 and in particular with

584
00:23:49,279 --> 00:23:51,760
enterprise networks authentication can

585
00:23:51,760 --> 00:23:54,480
be done using certificates but those can

586
00:23:54,480 --> 00:23:56,640
be annoying to configure so a

587
00:23:56,640 --> 00:23:58,720
significant amount of networks will

588
00:23:58,720 --> 00:23:59,840
instead use

589
00:23:59,840 --> 00:24:02,720
pwd where authentication can easily be

590
00:24:02,720 --> 00:24:06,400
done using a username on the password

591
00:24:06,400 --> 00:24:08,240
in this case the authentication happens

592
00:24:08,240 --> 00:24:09,919
between the clients on the

593
00:24:09,919 --> 00:24:12,240
authentication server for instance free

594
00:24:12,240 --> 00:24:13,360
radius

595
00:24:13,360 --> 00:24:15,279
on the access point simply forwards

596
00:24:15,279 --> 00:24:17,120
messages between the client on the

597
00:24:17,120 --> 00:24:19,600
authentication server

598
00:24:19,600 --> 00:24:21,679
because the authentication server can be

599
00:24:21,679 --> 00:24:24,080
located anywhere on the internet the

600
00:24:24,080 --> 00:24:26,159
connection between the access point onto

601
00:24:26,159 --> 00:24:28,559
the server is typically protected using

602
00:24:28,559 --> 00:24:33,039
tls which is called ratsec connection

603
00:24:33,039 --> 00:24:36,240
on epwd who will use the hash to curve

604
00:24:36,240 --> 00:24:38,720
algorithm to verify the password

605
00:24:38,720 --> 00:24:41,360
unfortunately in previous research a

606
00:24:41,360 --> 00:24:43,120
timing leak was discovered in this

607
00:24:43,120 --> 00:24:45,760
algorithm namely the dragonblood attack

608
00:24:45,760 --> 00:24:49,679
but against epwd this attack seemed

609
00:24:49,679 --> 00:24:51,760
hard to perform because this timing

610
00:24:51,760 --> 00:24:54,320
difference was small and it was unclear

611
00:24:54,320 --> 00:24:56,240
whether multiple measurements could be

612
00:24:56,240 --> 00:24:58,159
made so that then

613
00:24:58,159 --> 00:24:59,760
the timing measurements could be

614
00:24:59,760 --> 00:25:02,480
combined in other words this timing leak

615
00:25:02,480 --> 00:25:05,360
was considered impossible to exploit in

616
00:25:05,360 --> 00:25:07,520
practice

617
00:25:07,520 --> 00:25:10,480
however using the timeless technique we

618
00:25:10,480 --> 00:25:13,520
can exploit this on how does this work

619
00:25:13,520 --> 00:25:15,919
well the adversary will spoof three

620
00:25:15,919 --> 00:25:17,039
clients

621
00:25:17,039 --> 00:25:19,520
the two clients will associate as normal

622
00:25:19,520 --> 00:25:21,120
to the access point

623
00:25:21,120 --> 00:25:22,880
the access point will request their

624
00:25:22,880 --> 00:25:24,880
identity the clients will send their

625
00:25:24,880 --> 00:25:27,760
identity to the free radius server on

626
00:25:27,760 --> 00:25:30,880
the free radio server replies back

627
00:25:30,880 --> 00:25:33,039
that hey you're now gonna have to start

628
00:25:33,039 --> 00:25:36,400
the eep pwd protocol

629
00:25:36,400 --> 00:25:38,799
this is all very normal nothing special

630
00:25:38,799 --> 00:25:40,640
has happened so far

631
00:25:40,640 --> 00:25:43,840
but the fun stuff happens now

632
00:25:43,840 --> 00:25:46,880
because what will the adversary do now

633
00:25:46,880 --> 00:25:48,720
instead of continuing immediately with

634
00:25:48,720 --> 00:25:52,400
the pwd protocol the adversary will send

635
00:25:52,400 --> 00:25:55,120
a special authentication packet which

636
00:25:55,120 --> 00:25:57,360
will be forwarded over the rod stack

637
00:25:57,360 --> 00:26:00,080
connection so over the tls connection to

638
00:26:00,080 --> 00:26:02,000
the free radius server

639
00:26:02,000 --> 00:26:04,320
and it causes the buffer of the access

640
00:26:04,320 --> 00:26:07,840
point to fill up with packets

641
00:26:07,840 --> 00:26:10,720
and because this buffer is now full

642
00:26:10,720 --> 00:26:14,799
when the two clients now send their epwd

643
00:26:14,799 --> 00:26:17,360
authentication response

644
00:26:17,360 --> 00:26:19,840
this authentication response will be

645
00:26:19,840 --> 00:26:22,799
combined into a single tls packet over

646
00:26:22,799 --> 00:26:25,360
the rutsec connection

647
00:26:25,360 --> 00:26:27,279
but let me also highlight one other

648
00:26:27,279 --> 00:26:30,480
thing these two

649
00:26:30,480 --> 00:26:33,440
pwd authentication responses

650
00:26:33,440 --> 00:26:36,159
they are sent in a single physical wi-fi

651
00:26:36,159 --> 00:26:37,760
frame

652
00:26:37,760 --> 00:26:39,679
particular they are sent in a single

653
00:26:39,679 --> 00:26:42,320
physical a and pdu frame

654
00:26:42,320 --> 00:26:44,400
meaning that both these authentication

655
00:26:44,400 --> 00:26:47,200
responses arrive at exactly the same

656
00:26:47,200 --> 00:26:50,320
time at the access point

657
00:26:50,320 --> 00:26:52,400
and as i mentioned the buffer in the

658
00:26:52,400 --> 00:26:55,120
access point is now starting to get full

659
00:26:55,120 --> 00:26:58,000
and as a consequence of that both these

660
00:26:58,000 --> 00:27:00,720
authentication requests will be combined

661
00:27:00,720 --> 00:27:03,840
in a single tls record towards the free

662
00:27:03,840 --> 00:27:06,159
radius server

663
00:27:06,159 --> 00:27:08,400
in other words this means that free

664
00:27:08,400 --> 00:27:09,440
radius

665
00:27:09,440 --> 00:27:12,559
receives both authentication requests at

666
00:27:12,559 --> 00:27:15,600
exactly the same time

667
00:27:15,600 --> 00:27:16,640
on then

668
00:27:16,640 --> 00:27:19,200
free radius will respond

669
00:27:19,200 --> 00:27:22,000
to the clients where the authentication

670
00:27:22,000 --> 00:27:25,760
request finished processing first

671
00:27:25,760 --> 00:27:28,000
so in this case

672
00:27:28,000 --> 00:27:30,559
free radius first finished processing

673
00:27:30,559 --> 00:27:32,720
the request from client 1 on the

674
00:27:32,720 --> 00:27:35,279
response shown and light blue here is

675
00:27:35,279 --> 00:27:37,679
sent first while the response of client

676
00:27:37,679 --> 00:27:41,200
2 is sent later

677
00:27:41,200 --> 00:27:43,440
and you can also see here over wi-fi we

678
00:27:43,440 --> 00:27:46,240
can see that client 1 received the reply

679
00:27:46,240 --> 00:27:50,559
first on client 2 received a reply later

680
00:27:50,559 --> 00:27:53,840
on this order of responses leak enough

681
00:27:53,840 --> 00:27:56,399
information to then perform a brute

682
00:27:56,399 --> 00:27:59,440
force offline dictionary attack against

683
00:27:59,440 --> 00:28:02,640
the password of the user and in our

684
00:28:02,640 --> 00:28:05,679
experiments we can indeed see that this

685
00:28:05,679 --> 00:28:08,320
uh that the order we

686
00:28:08,320 --> 00:28:10,960
receive these responses at our wi-fi

687
00:28:10,960 --> 00:28:12,480
clients

688
00:28:12,480 --> 00:28:15,360
indeed corresponds to the difference in

689
00:28:15,360 --> 00:28:16,799
execution

690
00:28:16,799 --> 00:28:19,520
on the free radius server

691
00:28:19,520 --> 00:28:21,679
so to put that differently only in less

692
00:28:21,679 --> 00:28:24,159
than one percent of the cases do we

693
00:28:24,159 --> 00:28:27,039
incorrectly derive the execution time on

694
00:28:27,039 --> 00:28:29,120
the server

695
00:28:29,120 --> 00:28:30,720
and as mentioned we can use this

696
00:28:30,720 --> 00:28:32,720
information to perform a dictionary

697
00:28:32,720 --> 00:28:34,799
attack against the password of the

698
00:28:34,799 --> 00:28:35,919
victim

699
00:28:35,919 --> 00:28:38,880
so if we take the roku database dump of

700
00:28:38,880 --> 00:28:41,200
passwords which contains about 40

701
00:28:41,200 --> 00:28:43,039
million passwords

702
00:28:43,039 --> 00:28:46,000
we need about 14 measurements and with

703
00:28:46,000 --> 00:28:49,120
those 14 measurements we can then with

704
00:28:49,120 --> 00:28:52,399
86 success probability derive the

705
00:28:52,399 --> 00:28:54,720
password of the victim at least if the

706
00:28:54,720 --> 00:28:58,480
password is in this network dom dump and

707
00:28:58,480 --> 00:29:00,399
the cost of that brute force attack is

708
00:29:00,399 --> 00:29:02,960
less than one dollar when you perform it

709
00:29:02,960 --> 00:29:04,799
on the cloud

710
00:29:04,799 --> 00:29:07,440
so as a quick recap we have now shown

711
00:29:07,440 --> 00:29:09,360
direct timing attacks we have shown

712
00:29:09,360 --> 00:29:11,440
cross-site timing attacks and we have

713
00:29:11,440 --> 00:29:13,520
shown a timeless timing attack over

714
00:29:13,520 --> 00:29:15,600
wi-fi authentication

715
00:29:15,600 --> 00:29:19,360
and with that i hand back over to tom

716
00:29:19,360 --> 00:29:21,440
alright so now it's time for a little

717
00:29:21,440 --> 00:29:23,039
demonstration

718
00:29:23,039 --> 00:29:26,000
so for this demo i created an example

719
00:29:26,000 --> 00:29:30,000
application called default

720
00:29:30,159 --> 00:29:32,080
where people can enter their documents

721
00:29:32,080 --> 00:29:34,399
with a title and then

722
00:29:34,399 --> 00:29:36,880
the content and for these documents they

723
00:29:36,880 --> 00:29:40,240
can set a required security level so one

724
00:29:40,240 --> 00:29:42,399
is for documents that can be

725
00:29:42,399 --> 00:29:44,240
that are public

726
00:29:44,240 --> 00:29:46,960
and can be accessed by anyone and then

727
00:29:46,960 --> 00:29:49,200
there are documents that are top secrets

728
00:29:49,200 --> 00:29:52,320
that can only be

729
00:29:52,399 --> 00:29:54,559
accessed by people with the correct

730
00:29:54,559 --> 00:29:56,480
security clearance

731
00:29:56,480 --> 00:29:57,410
um so

732
00:29:57,410 --> 00:29:58,960
[Music]

733
00:29:58,960 --> 00:30:01,039
i've already entered a lot of documents

734
00:30:01,039 --> 00:30:03,279
like a couple of hundred documents into

735
00:30:03,279 --> 00:30:05,840
the vault and there's a single one that

736
00:30:05,840 --> 00:30:08,640
is set to top secret

737
00:30:08,640 --> 00:30:10,880
so the the website also has a search

738
00:30:10,880 --> 00:30:12,960
functionality where we can

739
00:30:12,960 --> 00:30:15,600
search for simple strings like the and

740
00:30:15,600 --> 00:30:18,799
then we get a bunch of results

741
00:30:18,799 --> 00:30:21,760
and there this single

742
00:30:21,760 --> 00:30:24,159
or secret documents contains the string

743
00:30:24,159 --> 00:30:26,080
blackhead

744
00:30:26,080 --> 00:30:28,000
and we can look for it and we can see

745
00:30:28,000 --> 00:30:29,679
that's actually

746
00:30:29,679 --> 00:30:32,159
we don't find any documents and that's

747
00:30:32,159 --> 00:30:34,080
because we don't have the right security

748
00:30:34,080 --> 00:30:36,000
clearance

749
00:30:36,000 --> 00:30:38,240
but still this

750
00:30:38,240 --> 00:30:40,159
application is vulnerable to a timing

751
00:30:40,159 --> 00:30:41,200
attack

752
00:30:41,200 --> 00:30:44,080
and this is how we will dig the password

753
00:30:44,080 --> 00:30:45,760
from

754
00:30:45,760 --> 00:30:48,480
the document

755
00:30:48,960 --> 00:30:51,679
so i will briefly show where the timing

756
00:30:51,679 --> 00:30:52,799
link is

757
00:30:52,799 --> 00:30:55,360
um so the

758
00:30:55,360 --> 00:30:57,039
search functionality works a bit like

759
00:30:57,039 --> 00:30:59,600
this so there's a text search happening

760
00:30:59,600 --> 00:31:01,039
on

761
00:31:01,039 --> 00:31:02,720
all the documents

762
00:31:02,720 --> 00:31:05,120
based on the query parameter that is

763
00:31:05,120 --> 00:31:06,880
provided in

764
00:31:06,880 --> 00:31:11,440
by the user or in this case the attacker

765
00:31:11,440 --> 00:31:13,360
and then the application will check if

766
00:31:13,360 --> 00:31:16,480
there's more than one document found

767
00:31:16,480 --> 00:31:18,720
and if that's the case it will get the

768
00:31:18,720 --> 00:31:19,919
security

769
00:31:19,919 --> 00:31:23,200
level of the current user

770
00:31:23,200 --> 00:31:24,960
and in order to do this

771
00:31:24,960 --> 00:31:26,320
it will

772
00:31:26,320 --> 00:31:32,760
perform one additional secured sql query

773
00:31:33,039 --> 00:31:35,840
and it will only do so if there's more

774
00:31:35,840 --> 00:31:37,519
than one document

775
00:31:37,519 --> 00:31:40,320
that needs to be filtered

776
00:31:40,320 --> 00:31:41,039
and

777
00:31:41,039 --> 00:31:43,919
this is where the security issue is

778
00:31:43,919 --> 00:31:47,120
the timing leak because this allows us

779
00:31:47,120 --> 00:31:49,360
to know whether there was at least one

780
00:31:49,360 --> 00:31:51,360
document that matched

781
00:31:51,360 --> 00:31:53,840
the text search

782
00:31:53,840 --> 00:31:57,279
so then the attack looks as follows

783
00:31:57,279 --> 00:31:58,000
we

784
00:31:58,000 --> 00:32:02,080
here make use of the h2 h2 time

785
00:32:02,080 --> 00:32:03,519
library

786
00:32:03,519 --> 00:32:07,279
which is uh what we used um for our

787
00:32:07,279 --> 00:32:09,760
research and we also published this on

788
00:32:09,760 --> 00:32:12,080
github and i'll be sharing

789
00:32:12,080 --> 00:32:15,279
the link later in the presentation

790
00:32:15,279 --> 00:32:18,799
so we defined two get requests

791
00:32:18,799 --> 00:32:20,880
the first one r1

792
00:32:20,880 --> 00:32:22,720
contains actual guess

793
00:32:22,720 --> 00:32:25,120
and then r2

794
00:32:25,120 --> 00:32:26,159
has

795
00:32:26,159 --> 00:32:28,799
the add sign as i guess and because the

796
00:32:28,799 --> 00:32:30,720
add sign is not part of the character

797
00:32:30,720 --> 00:32:31,600
set

798
00:32:31,600 --> 00:32:34,240
uh there will never be any matching

799
00:32:34,240 --> 00:32:36,640
documents found so we can use this as a

800
00:32:36,640 --> 00:32:38,320
baseline

801
00:32:38,320 --> 00:32:41,039
and then we use h2 time to launch the

802
00:32:41,039 --> 00:32:45,039
attack and as a result we receive

803
00:32:45,039 --> 00:32:46,159
a bunch of

804
00:32:46,159 --> 00:32:48,000
values

805
00:32:48,000 --> 00:32:51,200
so 15 values

806
00:32:51,200 --> 00:32:53,519
and then we see how many

807
00:32:53,519 --> 00:32:56,480
negative values there are

808
00:32:56,480 --> 00:32:58,799
and this is because a negative value

809
00:32:58,799 --> 00:33:01,039
indicates that the

810
00:33:01,039 --> 00:33:03,440
order in which the response was returned

811
00:33:03,440 --> 00:33:06,559
is reversed so this means that

812
00:33:06,559 --> 00:33:08,960
if we send r1 and r2

813
00:33:08,960 --> 00:33:12,000
then the response for r2 will be

814
00:33:12,000 --> 00:33:16,720
received before that the one of r1

815
00:33:16,720 --> 00:33:17,679
and

816
00:33:17,679 --> 00:33:20,159
this would be the case if

817
00:33:20,159 --> 00:33:23,440
r1 took longer to process

818
00:33:23,440 --> 00:33:25,440
so then the probability of this is

819
00:33:25,440 --> 00:33:27,760
higher

820
00:33:29,039 --> 00:33:32,080
and well this is also the case when it's

821
00:33:32,080 --> 00:33:33,200
a correct

822
00:33:33,200 --> 00:33:35,679
uh character of the passwords because

823
00:33:35,679 --> 00:33:38,480
then we need this additional sql query

824
00:33:38,480 --> 00:33:39,919
to get the user's

825
00:33:39,919 --> 00:33:42,240
security level

826
00:33:42,240 --> 00:33:44,720
and then we see if this

827
00:33:44,720 --> 00:33:46,640
percentage of the reverse order is

828
00:33:46,640 --> 00:33:48,960
higher than a certain threshold

829
00:33:48,960 --> 00:33:50,840
in the

830
00:33:50,840 --> 00:33:52,240
example uh

831
00:33:52,240 --> 00:33:54,559
that i will be running soon

832
00:33:54,559 --> 00:33:57,440
the threshold is set to 80

833
00:33:57,440 --> 00:34:00,399
all right so now let's run the attack um

834
00:34:00,399 --> 00:34:03,360
to do so we just need to run attack.buy

835
00:34:03,360 --> 00:34:05,440
with python

836
00:34:05,440 --> 00:34:08,800
um so here we can see um

837
00:34:08,800 --> 00:34:10,560
all the characters that have been found

838
00:34:10,560 --> 00:34:14,399
so far on the top line so far there's no

839
00:34:14,399 --> 00:34:15,839
character

840
00:34:15,839 --> 00:34:16,800
um

841
00:34:16,800 --> 00:34:18,719
but as you can see the first character

842
00:34:18,719 --> 00:34:20,719
has just been found so you have the

843
00:34:20,719 --> 00:34:22,480
capital t

844
00:34:22,480 --> 00:34:23,599
um

845
00:34:23,599 --> 00:34:26,320
and then the second line uh show

846
00:34:26,320 --> 00:34:28,960
shows the characters that are currently

847
00:34:28,960 --> 00:34:30,800
being guessed

848
00:34:30,800 --> 00:34:31,520
so

849
00:34:31,520 --> 00:34:35,599
we just saw that the one was just found

850
00:34:35,599 --> 00:34:37,918
so we're guessing one character at a

851
00:34:37,918 --> 00:34:40,158
time

852
00:34:40,399 --> 00:34:43,119
and then the the third line shows

853
00:34:43,119 --> 00:34:44,800
the percentage

854
00:34:44,800 --> 00:34:47,440
percentage of the responses that were

855
00:34:47,440 --> 00:34:51,200
returned in the reverse order

856
00:34:51,599 --> 00:34:52,399
and

857
00:34:52,399 --> 00:34:54,239
well as you can see

858
00:34:54,239 --> 00:34:56,479
when

859
00:34:56,719 --> 00:34:59,440
the guess is incorrect

860
00:34:59,440 --> 00:35:02,400
the or well the percentage

861
00:35:02,400 --> 00:35:05,040
is closer to 50 percent

862
00:35:05,040 --> 00:35:07,520
um of course is

863
00:35:07,520 --> 00:35:09,680
there's still some amount of chance

864
00:35:09,680 --> 00:35:11,680
involved

865
00:35:11,680 --> 00:35:14,078
because

866
00:35:14,480 --> 00:35:15,760
well

867
00:35:15,760 --> 00:35:18,000
if it's an incorrect guess then uh

868
00:35:18,000 --> 00:35:21,599
there's for each request uh 50 chance

869
00:35:21,599 --> 00:35:23,760
uh that it will be in the correct order

870
00:35:23,760 --> 00:35:25,760
or in the reverse order

871
00:35:25,760 --> 00:35:28,079
um

872
00:35:28,480 --> 00:35:30,240
so it's

873
00:35:30,240 --> 00:35:32,079
at the moment going

874
00:35:32,079 --> 00:35:34,880
fairly well um so it

875
00:35:34,880 --> 00:35:37,920
already found several several characters

876
00:35:37,920 --> 00:35:41,440
so um the the demonstration is

877
00:35:41,440 --> 00:35:43,680
also publicly available

878
00:35:43,680 --> 00:35:46,079
on github

879
00:35:46,079 --> 00:35:49,920
you can just run it with docker

880
00:35:49,920 --> 00:35:52,079
and i will also be sharing the link

881
00:35:52,079 --> 00:35:55,280
later in the presentation

882
00:35:55,280 --> 00:35:56,839
so

883
00:35:56,839 --> 00:35:59,760
far all except one character have been

884
00:35:59,760 --> 00:36:01,830
correctly guessed

885
00:36:01,830 --> 00:36:03,520
[Music]

886
00:36:03,520 --> 00:36:06,079
and that should be the last one yeah and

887
00:36:06,079 --> 00:36:08,960
that's also a correct guess

888
00:36:08,960 --> 00:36:11,200
so as you can see

889
00:36:11,200 --> 00:36:12,560
the deck

890
00:36:12,560 --> 00:36:16,079
was successful and we managed to find

891
00:36:16,079 --> 00:36:18,640
the secret passwords namely timeless

892
00:36:18,640 --> 00:36:20,000
timing

893
00:36:20,000 --> 00:36:22,480
so that brings us to the conclusion

894
00:36:22,480 --> 00:36:25,040
so we find that these timeless time

895
00:36:25,040 --> 00:36:27,040
intakes are not affected by network

896
00:36:27,040 --> 00:36:28,400
jitter at all

897
00:36:28,400 --> 00:36:31,359
and this is because the two requests are

898
00:36:31,359 --> 00:36:33,280
arrived in the same packets at this

899
00:36:33,280 --> 00:36:36,240
exact same time at the server

900
00:36:36,240 --> 00:36:38,320
and this allows us to perform remote

901
00:36:38,320 --> 00:36:41,119
timing index with an accuracy that is

902
00:36:41,119 --> 00:36:43,599
similar to as if the attack was

903
00:36:43,599 --> 00:36:46,079
launched on the local system so in our

904
00:36:46,079 --> 00:36:48,320
demonstration

905
00:36:48,320 --> 00:36:49,119
that

906
00:36:49,119 --> 00:36:50,560
well we showed that

907
00:36:50,560 --> 00:36:53,359
the attack is quite practical

908
00:36:53,359 --> 00:36:54,480
the

909
00:36:54,480 --> 00:36:56,480
attack was launched from

910
00:36:56,480 --> 00:37:00,000
my home uh on a not all to create wi-fi

911
00:37:00,000 --> 00:37:02,320
connection against the server that's

912
00:37:02,320 --> 00:37:05,680
located in the us whereas i look it in

913
00:37:05,680 --> 00:37:08,480
located in the eu

914
00:37:08,480 --> 00:37:10,880
and still the

915
00:37:10,880 --> 00:37:12,960
the timeless time index allowed us to

916
00:37:12,960 --> 00:37:17,200
detect this very small timing difference

917
00:37:17,440 --> 00:37:20,400
so we find that these attacks can be

918
00:37:20,400 --> 00:37:22,880
launched against protocols that either

919
00:37:22,880 --> 00:37:24,000
feed

920
00:37:24,000 --> 00:37:25,440
either enable

921
00:37:25,440 --> 00:37:26,800
multiplexing

922
00:37:26,800 --> 00:37:28,800
for instance http 2

923
00:37:28,800 --> 00:37:29,760
or

924
00:37:29,760 --> 00:37:31,760
that's or where we can leverage a

925
00:37:31,760 --> 00:37:33,599
transport protocol

926
00:37:33,599 --> 00:37:36,800
that enables encapsulation for instance

927
00:37:36,800 --> 00:37:40,640
store or a vpn

928
00:37:40,640 --> 00:37:42,400
and then finally

929
00:37:42,400 --> 00:37:45,359
all the protocols that meets these

930
00:37:45,359 --> 00:37:46,720
criteria

931
00:37:46,720 --> 00:37:49,280
may be susceptible to these timeless

932
00:37:49,280 --> 00:37:50,400
time index

933
00:37:50,400 --> 00:37:52,720
and we already created practical attacks

934
00:37:52,720 --> 00:37:56,720
against http 2 and eap wd

935
00:37:56,720 --> 00:38:00,560
which is for wi-fi authentication

936
00:38:00,560 --> 00:38:02,839
so with that i would like to thank you

937
00:38:02,839 --> 00:38:06,320
for listening

938
00:38:06,400 --> 00:38:07,839
and you can

939
00:38:07,839 --> 00:38:10,960
if you have any questions or remarks or

940
00:38:10,960 --> 00:38:12,320
ideas

941
00:38:12,320 --> 00:38:14,160
don't hesitate to reach out to us on

942
00:38:14,160 --> 00:38:15,200
twitter

943
00:38:15,200 --> 00:38:17,440
and you can find

944
00:38:17,440 --> 00:38:18,640
the

945
00:38:18,640 --> 00:38:21,599
sources of the h2 time

946
00:38:21,599 --> 00:38:24,800
library on the left side and the

947
00:38:24,800 --> 00:38:26,720
sources for the demonstration on the

948
00:38:26,720 --> 00:38:31,200
right side so thank you

