1
00:00:01,130 --> 00:00:14,320
[Music]

2
00:00:14,320 --> 00:00:15,839
thanks everyone for joining and welcome

3
00:00:15,839 --> 00:00:19,199
to our talk cloudy with a chance of apt

4
00:00:19,199 --> 00:00:21,680
i'm doug beanstalk i'm a manager at

5
00:00:21,680 --> 00:00:23,680
mandiant and i've been with mandiant for

6
00:00:23,680 --> 00:00:26,400
about seven years now which for some

7
00:00:26,400 --> 00:00:28,560
feels like an eternity i'm certainly one

8
00:00:28,560 --> 00:00:31,279
of those my rolex mandiant is primarily

9
00:00:31,279 --> 00:00:33,600
an incident response manager so i manage

10
00:00:33,600 --> 00:00:34,719
a lot of the

11
00:00:34,719 --> 00:00:36,559
investigations that come to us in our

12
00:00:36,559 --> 00:00:38,160
new york city office

13
00:00:38,160 --> 00:00:40,079
i also dabble a little bit in red

14
00:00:40,079 --> 00:00:41,760
teaming especially on the research side

15
00:00:41,760 --> 00:00:43,760
of things where i've published tools

16
00:00:43,760 --> 00:00:46,719
like poenath for oauth abuse as well of

17
00:00:46,719 --> 00:00:50,239
of course adfs dump and adv 80 fs spoof

18
00:00:50,239 --> 00:00:52,800
and some other associated research

19
00:00:52,800 --> 00:00:55,199
outside of infosec i'm a lifelong green

20
00:00:55,199 --> 00:00:57,680
bay packers fan and i'm currently very

21
00:00:57,680 --> 00:01:00,239
anxiously and nervously

22
00:01:00,239 --> 00:01:02,000
reading the news about aaron rodgers and

23
00:01:02,000 --> 00:01:04,319
i'm really hoping for a resolution so

24
00:01:04,319 --> 00:01:05,920
we'll see what happens there now i'm

25
00:01:05,920 --> 00:01:07,600
going to turn it over to my colleague

26
00:01:07,600 --> 00:01:09,520
josh he's going to introduce himself and

27
00:01:09,520 --> 00:01:11,119
get us kicked off with some content

28
00:01:11,119 --> 00:01:13,600
thanks doug my name is josh maidly i'm a

29
00:01:13,600 --> 00:01:15,600
manager of professional services at

30
00:01:15,600 --> 00:01:18,560
mandiant i've been with the company for

31
00:01:18,560 --> 00:01:20,640
almost six years and that entire time i

32
00:01:20,640 --> 00:01:22,640
have been an incident response lead

33
00:01:22,640 --> 00:01:25,759
based out of our boston office

34
00:01:25,759 --> 00:01:27,920
unlike doug i'm not an author of any

35
00:01:27,920 --> 00:01:29,439
publicly available tools but if you do

36
00:01:29,439 --> 00:01:31,840
work at mandi you've probably interacted

37
00:01:31,840 --> 00:01:34,159
with some code that i have written

38
00:01:34,159 --> 00:01:36,720
i am a canadian expat i moved from

39
00:01:36,720 --> 00:01:38,840
toronto to boston in

40
00:01:38,840 --> 00:01:41,840
2012 which means that i adopted the new

41
00:01:41,840 --> 00:01:45,280
england patriots as my team of choice so

42
00:01:45,280 --> 00:01:48,159
cue the boos

43
00:01:48,799 --> 00:01:52,479
this past year has proved the point that

44
00:01:52,479 --> 00:01:54,079
nation state state-backed threat actors

45
00:01:54,079 --> 00:01:56,079
are increasingly investing time and

46
00:01:56,079 --> 00:01:58,880
money to develop novel ways to access

47
00:01:58,880 --> 00:02:02,159
data in microsoft 365. and these actors

48
00:02:02,159 --> 00:02:04,320
are especially interested in microsoft

49
00:02:04,320 --> 00:02:07,040
365 because that's where more and more

50
00:02:07,040 --> 00:02:09,679
organizations are storing data and

51
00:02:09,679 --> 00:02:11,680
collaborating and this can be some of

52
00:02:11,680 --> 00:02:14,000
their most confidential data like email

53
00:02:14,000 --> 00:02:17,760
sharepoint onedrive power bi

54
00:02:17,760 --> 00:02:20,239
so if you're an espionage motivated

55
00:02:20,239 --> 00:02:21,680
threat actor

56
00:02:21,680 --> 00:02:25,599
microsoft 365 is the holy grail

57
00:02:25,599 --> 00:02:28,640
so today we're going to talk about some

58
00:02:28,640 --> 00:02:31,360
of the lessons learned from some

59
00:02:31,360 --> 00:02:33,840
high scale or large-scale espionage

60
00:02:33,840 --> 00:02:35,599
campaigns that we've detected over the

61
00:02:35,599 --> 00:02:38,160
past year and we're going to talk

62
00:02:38,160 --> 00:02:39,599
through the novel techniques that they

63
00:02:39,599 --> 00:02:42,080
use to evade detection by disabling

64
00:02:42,080 --> 00:02:44,640
security features like

65
00:02:44,640 --> 00:02:46,239
auditing and logging

66
00:02:46,239 --> 00:02:48,000
automating data theft through old

67
00:02:48,000 --> 00:02:49,440
techniques like mailbox folder

68
00:02:49,440 --> 00:02:51,680
permissions and some newer techniques

69
00:02:51,680 --> 00:02:54,400
like abusing

70
00:02:54,400 --> 00:02:56,640
enterprise applications and then we're

71
00:02:56,640 --> 00:02:58,239
going to talk through maintaining

72
00:02:58,239 --> 00:03:01,040
persistent access by abusing saml and

73
00:03:01,040 --> 00:03:03,280
adfs

74
00:03:03,280 --> 00:03:05,040
throughout this talk we're going to

75
00:03:05,040 --> 00:03:07,360
detail the technical underpinnings that

76
00:03:07,360 --> 00:03:09,519
are key to understanding and realizing

77
00:03:09,519 --> 00:03:12,080
these techniques and in a few instances

78
00:03:12,080 --> 00:03:14,640
we're also going to cover new extensions

79
00:03:14,640 --> 00:03:17,040
or facets of these techniques that have

80
00:03:17,040 --> 00:03:19,360
not yet been observed in the wild but

81
00:03:19,360 --> 00:03:22,080
are natural extensions of the technique

82
00:03:22,080 --> 00:03:24,000
that organizations should be prepared to

83
00:03:24,000 --> 00:03:25,840
defend against in the coming weeks

84
00:03:25,840 --> 00:03:28,480
months and years

85
00:03:28,480 --> 00:03:30,400
so to start we're going to talk about

86
00:03:30,400 --> 00:03:32,720
avoiding detection specifically by

87
00:03:32,720 --> 00:03:34,799
disabling security features and

88
00:03:34,799 --> 00:03:37,040
throughout this talk we're going to see

89
00:03:37,040 --> 00:03:39,280
that

90
00:03:39,440 --> 00:03:42,159
attackers are targeting microsoft 365 to

91
00:03:42,159 --> 00:03:44,080
steal data that's why they're there

92
00:03:44,080 --> 00:03:45,200
they're not

93
00:03:45,200 --> 00:03:47,440
just interested in modifying data they

94
00:03:47,440 --> 00:03:49,200
actually want to take it and review it

95
00:03:49,200 --> 00:03:51,840
and understand it

96
00:03:51,840 --> 00:03:53,280
and there are some pretty stealthy ways

97
00:03:53,280 --> 00:03:55,599
to do this but attackers always want to

98
00:03:55,599 --> 00:03:57,439
increase their stealth make it harder to

99
00:03:57,439 --> 00:04:00,799
get caught especially if they want to

100
00:04:00,799 --> 00:04:03,200
perpetrate these this data theft over

101
00:04:03,200 --> 00:04:04,720
years

102
00:04:04,720 --> 00:04:06,640
as opposed to just a one-time smash and

103
00:04:06,640 --> 00:04:08,319
grab so if we

104
00:04:08,319 --> 00:04:10,799
think about the analogy of let's say a

105
00:04:10,799 --> 00:04:12,959
stealing a rar archive full of files

106
00:04:12,959 --> 00:04:15,360
from a file server if we have object

107
00:04:15,360 --> 00:04:17,279
level auditing enabled on this file

108
00:04:17,279 --> 00:04:19,918
server we can see every archive file

109
00:04:19,918 --> 00:04:21,600
that is put into that

110
00:04:21,600 --> 00:04:23,199
or every file that's put into that

111
00:04:23,199 --> 00:04:24,960
archive

112
00:04:24,960 --> 00:04:28,400
the same concept applies for

113
00:04:28,400 --> 00:04:31,600
office 365 or microsoft 365. all domain

114
00:04:31,600 --> 00:04:34,240
admins have access to the audit logs but

115
00:04:34,240 --> 00:04:36,560
if you pay for an e5 license you have

116
00:04:36,560 --> 00:04:38,240
access to what's known as the advanced

117
00:04:38,240 --> 00:04:40,560
auditing and this could be analogous to

118
00:04:40,560 --> 00:04:42,479
object level auditing

119
00:04:42,479 --> 00:04:43,759
specifically

120
00:04:43,759 --> 00:04:46,160
that that comes with the mail items

121
00:04:46,160 --> 00:04:48,560
accessed event which is going to record

122
00:04:48,560 --> 00:04:51,280
any interactions with mail item objects

123
00:04:51,280 --> 00:04:52,720
in a mailbox

124
00:04:52,720 --> 00:04:54,400
it's going to record the first 1000

125
00:04:54,400 --> 00:04:56,880
interactions in a 24-hour period which

126
00:04:56,880 --> 00:04:59,600
according to microsoft accounts for 99

127
00:04:59,600 --> 00:05:01,919
of users within the world

128
00:05:01,919 --> 00:05:04,000
after that it's throttled and it will

129
00:05:04,000 --> 00:05:05,199
say so

130
00:05:05,199 --> 00:05:06,960
but you can imagine this type of logging

131
00:05:06,960 --> 00:05:08,639
is problematic to attackers who are

132
00:05:08,639 --> 00:05:10,960
trying to steal data

133
00:05:10,960 --> 00:05:12,479
and as of today

134
00:05:12,479 --> 00:05:14,639
if mailbox auditing is enabled by

135
00:05:14,639 --> 00:05:16,479
default in the tenant

136
00:05:16,479 --> 00:05:18,479
you can't disable it on individual

137
00:05:18,479 --> 00:05:20,240
mailboxes so attackers needed to find a

138
00:05:20,240 --> 00:05:22,240
different way around this

139
00:05:22,240 --> 00:05:24,080
fortunately microsoft handed it to them

140
00:05:24,080 --> 00:05:26,800
in the set mailbox audit bypass

141
00:05:26,800 --> 00:05:29,039
association commandlet and what this is

142
00:05:29,039 --> 00:05:30,960
going to do is prevent any and all

143
00:05:30,960 --> 00:05:33,840
mailbox mailbox actions for specific

144
00:05:33,840 --> 00:05:36,080
users from being logged

145
00:05:36,080 --> 00:05:38,320
i'm not entirely sure why this feature

146
00:05:38,320 --> 00:05:40,400
exists but there is some reference to

147
00:05:40,400 --> 00:05:42,320
administrators trying to limit noise in

148
00:05:42,320 --> 00:05:44,800
their logs so they bypass a couple

149
00:05:44,800 --> 00:05:46,880
different users

150
00:05:46,880 --> 00:05:49,520
but you would it's

151
00:05:49,520 --> 00:05:50,639
you'd be

152
00:05:50,639 --> 00:05:53,120
well served to monitor for the execution

153
00:05:53,120 --> 00:05:54,240
of this

154
00:05:54,240 --> 00:05:56,560
commandlet in your tenant

155
00:05:56,560 --> 00:05:57,520
now

156
00:05:57,520 --> 00:05:59,680
what this means once it's configured is

157
00:05:59,680 --> 00:06:00,960
that

158
00:06:00,960 --> 00:06:06,080
any action or any mailbox owner actions

159
00:06:06,080 --> 00:06:08,639
made by the specified users that have

160
00:06:08,639 --> 00:06:11,919
the bypass association created

161
00:06:11,919 --> 00:06:13,919
are not going to be logged it also means

162
00:06:13,919 --> 00:06:16,400
that delegate actions performed by the

163
00:06:16,400 --> 00:06:19,680
bypassed users on target mailboxes

164
00:06:19,680 --> 00:06:23,360
including shared mailboxes aren't logged

165
00:06:23,360 --> 00:06:25,840
it also means that admin actions or

166
00:06:25,840 --> 00:06:27,520
certain admin actions are not going to

167
00:06:27,520 --> 00:06:29,680
be logged

168
00:06:29,680 --> 00:06:30,560
so

169
00:06:30,560 --> 00:06:32,720
this allows attackers to

170
00:06:32,720 --> 00:06:34,400
if you're monitoring for data theft to

171
00:06:34,400 --> 00:06:36,400
access a particular mailbox and it not

172
00:06:36,400 --> 00:06:38,960
generate a mail items access log

173
00:06:38,960 --> 00:06:40,240
but a more efficient way that we've

174
00:06:40,240 --> 00:06:42,400
actually seen threat actors using to

175
00:06:42,400 --> 00:06:45,039
bypass logging in an environment is to

176
00:06:45,039 --> 00:06:48,240
downgrade the critical users from an e5

177
00:06:48,240 --> 00:06:51,440
to an e3 license now

178
00:06:51,440 --> 00:06:53,120
along with saving the organization a

179
00:06:53,120 --> 00:06:55,599
little bit of money it's also going to

180
00:06:55,599 --> 00:06:58,880
disable the mail item access logging

181
00:06:58,880 --> 00:07:01,120
without degrading any of the features

182
00:07:01,120 --> 00:07:03,280
that the majority of users are

183
00:07:03,280 --> 00:07:06,080
taking advantage of on a daily basis

184
00:07:06,080 --> 00:07:07,759
these are really simple techniques once

185
00:07:07,759 --> 00:07:09,280
you get administrative access to a

186
00:07:09,280 --> 00:07:10,160
tenant

187
00:07:10,160 --> 00:07:10,960
to

188
00:07:10,960 --> 00:07:13,599
make these changes to enable long-term

189
00:07:13,599 --> 00:07:15,280
data theft

190
00:07:15,280 --> 00:07:16,479
and we're going to talk about some of

191
00:07:16,479 --> 00:07:19,919
these in the next slide

192
00:07:20,000 --> 00:07:21,199
so first we're going to talk about an

193
00:07:21,199 --> 00:07:23,280
older technique which is abusing mailbox

194
00:07:23,280 --> 00:07:24,880
folder permissions

195
00:07:24,880 --> 00:07:25,680
and

196
00:07:25,680 --> 00:07:27,360
if it ain't broke

197
00:07:27,360 --> 00:07:29,520
don't fix it so

198
00:07:29,520 --> 00:07:32,479
mailbox folder positions are our folder

199
00:07:32,479 --> 00:07:34,400
permissions are an alternative to

200
00:07:34,400 --> 00:07:36,880
mailbox delegation so within a mailbox a

201
00:07:36,880 --> 00:07:39,759
user administrator or delegate can grant

202
00:07:39,759 --> 00:07:42,240
permissions to other users

203
00:07:42,240 --> 00:07:44,080
that allow them to access specific

204
00:07:44,080 --> 00:07:46,560
folders

205
00:07:46,639 --> 00:07:48,560
this you know you can think about

206
00:07:48,560 --> 00:07:50,879
sharing calendars

207
00:07:50,879 --> 00:07:52,960
allowing administrative assistants to

208
00:07:52,960 --> 00:07:55,440
look at particular folders or particular

209
00:07:55,440 --> 00:07:56,479
content

210
00:07:56,479 --> 00:08:00,240
that is moved around for them

211
00:08:00,240 --> 00:08:02,240
but just like administrators attackers

212
00:08:02,240 --> 00:08:04,160
who have acquired sufficient permissions

213
00:08:04,160 --> 00:08:06,800
to a mailbox or tenant can modify these

214
00:08:06,800 --> 00:08:10,000
permissions to allow them to access the

215
00:08:10,000 --> 00:08:12,960
folder contents this is an older

216
00:08:12,960 --> 00:08:14,800
technique that was actually documented

217
00:08:14,800 --> 00:08:17,039
by bo bullock at black hills information

218
00:08:17,039 --> 00:08:18,479
security

219
00:08:18,479 --> 00:08:19,840
but the reason we're talking about it

220
00:08:19,840 --> 00:08:22,319
today is that we recently saw an apt

221
00:08:22,319 --> 00:08:24,840
threat actor lose access to multiple

222
00:08:24,840 --> 00:08:27,440
environments using a sophisticated means

223
00:08:27,440 --> 00:08:30,080
of targeting mailboxes only to fall back

224
00:08:30,080 --> 00:08:32,320
on this old school method

225
00:08:32,320 --> 00:08:34,320
of abusing mailbox folder permissions

226
00:08:34,320 --> 00:08:35,679
and i think what was even more

227
00:08:35,679 --> 00:08:37,039
fascinating

228
00:08:37,039 --> 00:08:38,000
is

229
00:08:38,000 --> 00:08:39,919
that when they fell back on this method

230
00:08:39,919 --> 00:08:42,000
there were no modifications made to the

231
00:08:42,000 --> 00:08:43,919
environment to enable it

232
00:08:43,919 --> 00:08:45,760
during the time of our investigation

233
00:08:45,760 --> 00:08:48,000
which meant that those changes had been

234
00:08:48,000 --> 00:08:49,519
made

235
00:08:49,519 --> 00:08:52,800
a long time before

236
00:08:52,880 --> 00:08:54,560
so just like

237
00:08:54,560 --> 00:08:57,120
local folders mailbox folder permissions

238
00:08:57,120 --> 00:08:58,640
can be assigned

239
00:08:58,640 --> 00:09:01,120
through either individual permissions or

240
00:09:01,120 --> 00:09:04,000
roles which are just collections of

241
00:09:04,000 --> 00:09:05,600
folder permissions

242
00:09:05,600 --> 00:09:07,040
ultimately though the threat actors are

243
00:09:07,040 --> 00:09:09,040
going to be after roles that have the

244
00:09:09,040 --> 00:09:11,279
read items permission

245
00:09:11,279 --> 00:09:13,760
and as its name implies it grants access

246
00:09:13,760 --> 00:09:16,640
to the contents of the folders

247
00:09:16,640 --> 00:09:19,040
to a specific user or group

248
00:09:19,040 --> 00:09:21,839
so author editor non-editing author

249
00:09:21,839 --> 00:09:23,839
owner publishing editor these are all

250
00:09:23,839 --> 00:09:26,160
roles that have the

251
00:09:26,160 --> 00:09:29,760
read items permission and we have

252
00:09:29,760 --> 00:09:32,240
the reviewer role as uh

253
00:09:32,240 --> 00:09:33,600
noted here because that's the one that

254
00:09:33,600 --> 00:09:36,720
we've actually seen threat actors use

255
00:09:36,720 --> 00:09:38,399
and it is also the one that beau bullock

256
00:09:38,399 --> 00:09:41,279
talked about in his

257
00:09:41,279 --> 00:09:43,360
his post on using mail sniper to

258
00:09:43,360 --> 00:09:45,600
accomplish this

259
00:09:45,600 --> 00:09:46,640
now

260
00:09:46,640 --> 00:09:48,800
folder permissions can be assigned to

261
00:09:48,800 --> 00:09:51,920
users and mail enabled security groups

262
00:09:51,920 --> 00:09:53,600
in addition to the users within the

263
00:09:53,600 --> 00:09:56,560
tenant there are two special users

264
00:09:56,560 --> 00:09:58,720
there is the anonymous user which

265
00:09:58,720 --> 00:10:00,320
accounts for any external

266
00:10:00,320 --> 00:10:02,720
unauthenticated user

267
00:10:02,720 --> 00:10:04,240
which sounds pretty scary but in

268
00:10:04,240 --> 00:10:06,160
practice neither doug or myself have

269
00:10:06,160 --> 00:10:08,560
been able to get this to work as

270
00:10:08,560 --> 00:10:09,839
advertised we haven't been able to take

271
00:10:09,839 --> 00:10:12,079
advantage of that anonymous permission

272
00:10:12,079 --> 00:10:15,120
set to abuse mailbox folder permissions

273
00:10:15,120 --> 00:10:17,600
and then there is the default user also

274
00:10:17,600 --> 00:10:20,160
known as the everyone user depending on

275
00:10:20,160 --> 00:10:23,040
what log you're looking at and this

276
00:10:23,040 --> 00:10:25,040
up this includes any internal

277
00:10:25,040 --> 00:10:26,800
authenticated user

278
00:10:26,800 --> 00:10:28,399
now by default

279
00:10:28,399 --> 00:10:30,640
the access for both users is set to none

280
00:10:30,640 --> 00:10:32,720
so they can't do anything

281
00:10:32,720 --> 00:10:34,560
but

282
00:10:34,560 --> 00:10:36,720
a threat actor can take advantage of

283
00:10:36,720 --> 00:10:38,959
this and what we have seen is that

284
00:10:38,959 --> 00:10:41,760
they're going to assign the default user

285
00:10:41,760 --> 00:10:44,000
reviewer the reviewer role

286
00:10:44,000 --> 00:10:46,079
to the top of the information store and

287
00:10:46,079 --> 00:10:48,240
every folder underneath it

288
00:10:48,240 --> 00:10:51,040
to allow any off and any authenticated

289
00:10:51,040 --> 00:10:54,079
user access to the mailbox folder

290
00:10:54,079 --> 00:10:55,680
now these permissions don't

291
00:10:55,680 --> 00:10:57,760
automatically cascade down from child to

292
00:10:57,760 --> 00:10:59,680
parent so the threat actor needed to

293
00:10:59,680 --> 00:11:02,560
intentionally modify each subfolder

294
00:11:02,560 --> 00:11:04,320
but any new folders that the user

295
00:11:04,320 --> 00:11:06,320
creates

296
00:11:06,320 --> 00:11:08,640
the threat actor will have access to and

297
00:11:08,640 --> 00:11:10,959
this can trivially be done by using the

298
00:11:10,959 --> 00:11:13,279
set mailbox folder permission commandlet

299
00:11:13,279 --> 00:11:16,320
or a tool like ews editor

300
00:11:16,320 --> 00:11:19,040
or mail sniper or one or a custom built

301
00:11:19,040 --> 00:11:23,360
application that makes ews api calls

302
00:11:23,360 --> 00:11:24,240
now

303
00:11:24,240 --> 00:11:27,120
the threat actor still needs to maintain

304
00:11:27,120 --> 00:11:29,600
some level of access to the environment

305
00:11:29,600 --> 00:11:31,120
via a

306
00:11:31,120 --> 00:11:33,839
valid account but they don't need to

307
00:11:33,839 --> 00:11:35,440
once they've made this modification they

308
00:11:35,440 --> 00:11:37,760
don't need to maintain access

309
00:11:37,760 --> 00:11:40,800
to an account or to sp to the specif the

310
00:11:40,800 --> 00:11:42,399
specific accounts that they want to

311
00:11:42,399 --> 00:11:44,480
target on a daily basis or on a weekly

312
00:11:44,480 --> 00:11:47,200
basis so they can use one compromised

313
00:11:47,200 --> 00:11:50,320
account to access 10 modified

314
00:11:50,320 --> 00:11:52,079
or mailboxes that have

315
00:11:52,079 --> 00:11:54,639
modified folder permissions

316
00:11:54,639 --> 00:11:57,839
now to detect this mechanism

317
00:11:58,560 --> 00:12:01,600
we want to look for ews sign-ins that

318
00:12:01,600 --> 00:12:03,600
are then being used

319
00:12:03,600 --> 00:12:06,880
to access the modified folders

320
00:12:06,880 --> 00:12:08,240
in azure active directory these are

321
00:12:08,240 --> 00:12:10,560
going to be coded as non-interactive

322
00:12:10,560 --> 00:12:12,399
sign-ins

323
00:12:12,399 --> 00:12:13,200
and

324
00:12:13,200 --> 00:12:14,800
it's important to note that these are

325
00:12:14,800 --> 00:12:17,279
azure ad logs so they're not going to be

326
00:12:17,279 --> 00:12:20,399
forwarded to the unified audit log and

327
00:12:20,399 --> 00:12:22,720
they must be specifically enabled to

328
00:12:22,720 --> 00:12:25,360
forward to some sort of sim or

329
00:12:25,360 --> 00:12:28,959
ingested into microsoft sentinel

330
00:12:28,959 --> 00:12:30,880
alternatively you can look for the

331
00:12:30,880 --> 00:12:34,079
execution or the use of the set mailbox

332
00:12:34,079 --> 00:12:36,079
folder permission or the set mailbox

333
00:12:36,079 --> 00:12:37,600
permission

334
00:12:37,600 --> 00:12:40,000
command within your unified audit log

335
00:12:40,000 --> 00:12:41,120
keep in mind though that there's going

336
00:12:41,120 --> 00:12:42,480
to be a lot of noise from legitimate

337
00:12:42,480 --> 00:12:44,959
admin activity as well as some

338
00:12:44,959 --> 00:12:48,959
background exchange online activity

339
00:12:48,959 --> 00:12:51,360
if you have

340
00:12:51,360 --> 00:12:53,920
mail items access auditing enabled

341
00:12:53,920 --> 00:12:56,399
you can also look for any patterns of

342
00:12:56,399 --> 00:12:59,360
non-owner access to high-value targeted

343
00:12:59,360 --> 00:13:02,959
or high-value mailboxes

344
00:13:03,200 --> 00:13:05,600
final method you can use is to enumerate

345
00:13:05,600 --> 00:13:07,200
the mailbox folder permissions with

346
00:13:07,200 --> 00:13:10,320
powershell and look for any evidence of

347
00:13:10,320 --> 00:13:13,519
the default user

348
00:13:13,519 --> 00:13:15,600
having the reviewer permission or the

349
00:13:15,600 --> 00:13:17,279
everyone users having reviewer

350
00:13:17,279 --> 00:13:19,200
permission and this

351
00:13:19,200 --> 00:13:21,839
you know is going it doesn't scale well

352
00:13:21,839 --> 00:13:24,240
if you have 150 000 users in your tenant

353
00:13:24,240 --> 00:13:26,320
but you can be targeting high value

354
00:13:26,320 --> 00:13:28,240
users or users that fit within a

355
00:13:28,240 --> 00:13:31,279
particular threat model

356
00:13:31,279 --> 00:13:32,399
so

357
00:13:32,399 --> 00:13:35,040
you can see threat actors can steal data

358
00:13:35,040 --> 00:13:37,040
using this kind of older method but it

359
00:13:37,040 --> 00:13:39,360
still requires them to maintain

360
00:13:39,360 --> 00:13:41,199
a valid account

361
00:13:41,199 --> 00:13:42,880
and if you're changing passwords every

362
00:13:42,880 --> 00:13:45,279
90 days you know this can be problematic

363
00:13:45,279 --> 00:13:46,320
they have to come back in and

364
00:13:46,320 --> 00:13:48,880
re-compromise and risk getting detected

365
00:13:48,880 --> 00:13:51,120
a better way to maintain access to

366
00:13:51,120 --> 00:13:52,880
mailboxes would be to hijack an

367
00:13:52,880 --> 00:13:55,040
enterprise application or an app

368
00:13:55,040 --> 00:13:57,199
registration

369
00:13:57,199 --> 00:13:59,279
now both app registrations and

370
00:13:59,279 --> 00:14:02,000
enterprise applications are referred to

371
00:14:02,000 --> 00:14:02,959
as

372
00:14:02,959 --> 00:14:05,760
applications or azure ad applications

373
00:14:05,760 --> 00:14:07,600
but there are some key differences that

374
00:14:07,600 --> 00:14:09,760
we want to discuss

375
00:14:09,760 --> 00:14:12,240
in the context of abuse

376
00:14:12,240 --> 00:14:15,040
app registrations are the initial

377
00:14:15,040 --> 00:14:17,760
instance of an application

378
00:14:17,760 --> 00:14:19,600
that lives within the

379
00:14:19,600 --> 00:14:22,160
tenant that created the app

380
00:14:22,160 --> 00:14:24,480
and this effectively serves as the

381
00:14:24,480 --> 00:14:25,680
blueprint

382
00:14:25,680 --> 00:14:27,760
to create a service principle in any

383
00:14:27,760 --> 00:14:29,760
tenant that is going to be consuming or

384
00:14:29,760 --> 00:14:32,079
using that application a good example of

385
00:14:32,079 --> 00:14:34,880
this would be exchange online it's

386
00:14:34,880 --> 00:14:36,959
located within the microsoft corporation

387
00:14:36,959 --> 00:14:38,320
tenant

388
00:14:38,320 --> 00:14:39,920
but the service principle that you

389
00:14:39,920 --> 00:14:42,000
interact with as a consumer on a daily

390
00:14:42,000 --> 00:14:44,320
basis is going to exist within your

391
00:14:44,320 --> 00:14:46,959
tenant and it is modeled off of

392
00:14:46,959 --> 00:14:49,199
the blueprint in the microsoft

393
00:14:49,199 --> 00:14:51,680
corporation tenant

394
00:14:51,680 --> 00:14:54,000
then we have enterprise applications

395
00:14:54,000 --> 00:14:56,240
also known as service principles and

396
00:14:56,240 --> 00:14:58,639
these are that copy of the app

397
00:14:58,639 --> 00:15:01,279
registration that live in your tenant or

398
00:15:01,279 --> 00:15:02,480
these are going to be custom

399
00:15:02,480 --> 00:15:04,959
applications that you have made in your

400
00:15:04,959 --> 00:15:06,079
tenant

401
00:15:06,079 --> 00:15:09,920
now everything within microsoft 365 uses

402
00:15:09,920 --> 00:15:12,480
applications or this model

403
00:15:12,480 --> 00:15:14,959
of applications to interact with each

404
00:15:14,959 --> 00:15:17,360
other so if you need to make api calls

405
00:15:17,360 --> 00:15:18,399
to

406
00:15:18,399 --> 00:15:20,560
office or to microsoft 365 if you need

407
00:15:20,560 --> 00:15:22,240
to interact with data

408
00:15:22,240 --> 00:15:23,760
it's going to be done through an

409
00:15:23,760 --> 00:15:26,320
application so if you go through your

410
00:15:26,320 --> 00:15:28,639
tenant right now there's going to be a

411
00:15:28,639 --> 00:15:30,000
a bunch of service principles that

412
00:15:30,000 --> 00:15:31,519
you've probably never heard of but

413
00:15:31,519 --> 00:15:33,040
there's going to be one for every

414
00:15:33,040 --> 00:15:35,440
application that you're using

415
00:15:35,440 --> 00:15:38,800
and microsoft services are designated as

416
00:15:38,800 --> 00:15:40,480
first party service principal so they

417
00:15:40,480 --> 00:15:42,639
have a different level of access to the

418
00:15:42,639 --> 00:15:44,800
tenant that's not otherwise afforded to

419
00:15:44,800 --> 00:15:47,839
any custom apps that you create

420
00:15:47,839 --> 00:15:50,880
but it is important to note that

421
00:15:50,880 --> 00:15:52,560
everything within

422
00:15:52,560 --> 00:15:54,880
microsoft 365 every application every

423
00:15:54,880 --> 00:15:57,040
interaction is going to

424
00:15:57,040 --> 00:15:59,600
be reliant on some sort of application

425
00:15:59,600 --> 00:16:01,600
use

426
00:16:01,600 --> 00:16:03,759
now

427
00:16:04,160 --> 00:16:07,199
effectively applications are an oauth

428
00:16:07,199 --> 00:16:09,680
authentication mechanism so the

429
00:16:09,680 --> 00:16:12,959
applications provide

430
00:16:12,959 --> 00:16:15,360
the the oauth entity that is going to be

431
00:16:15,360 --> 00:16:17,839
authenticating to different services and

432
00:16:17,839 --> 00:16:18,639
they're going to have different

433
00:16:18,639 --> 00:16:20,399
permissions applied to them and

434
00:16:20,399 --> 00:16:21,839
depending on how the application is

435
00:16:21,839 --> 00:16:23,120
being used is going to be a different

436
00:16:23,120 --> 00:16:25,519
type of permission so we have delegated

437
00:16:25,519 --> 00:16:27,279
permissions which are going to enable

438
00:16:27,279 --> 00:16:30,560
apps to perform api operations on behalf

439
00:16:30,560 --> 00:16:33,440
of a user so this is going to be limited

440
00:16:33,440 --> 00:16:33,770
to

441
00:16:33,770 --> 00:16:35,040
[Music]

442
00:16:35,040 --> 00:16:37,680
data that the user has access to

443
00:16:37,680 --> 00:16:39,519
so effectively that user is going to

444
00:16:39,519 --> 00:16:42,000
consent to this application

445
00:16:42,000 --> 00:16:43,600
at runtime or they're going to consent

446
00:16:43,600 --> 00:16:46,399
to the permissions at runtime

447
00:16:46,399 --> 00:16:47,920
and then that application is going to

448
00:16:47,920 --> 00:16:49,839
act as the user a good example of this

449
00:16:49,839 --> 00:16:51,920
would be a morning digest application

450
00:16:51,920 --> 00:16:55,279
that reads your emails calendar and task

451
00:16:55,279 --> 00:16:57,600
and then reads your gmail calendar and

452
00:16:57,600 --> 00:16:59,839
tasks and collates them all into a

453
00:16:59,839 --> 00:17:02,000
cohesive unit

454
00:17:02,000 --> 00:17:04,720
the api calls that that application is

455
00:17:04,720 --> 00:17:06,799
making to pull your emails are being

456
00:17:06,799 --> 00:17:09,039
made on your by the application on your

457
00:17:09,039 --> 00:17:11,760
behalf using your permissions

458
00:17:11,760 --> 00:17:13,679
application permissions on the other

459
00:17:13,679 --> 00:17:14,720
hand

460
00:17:14,720 --> 00:17:18,000
enable apps to perform api operations

461
00:17:18,000 --> 00:17:21,199
without a signed in user

462
00:17:21,199 --> 00:17:23,039
and they're allowed to access

463
00:17:23,039 --> 00:17:25,039
tenant-wide data

464
00:17:25,039 --> 00:17:28,079
now this does require admin consent but

465
00:17:28,079 --> 00:17:30,080
once that administrative consent is

466
00:17:30,080 --> 00:17:32,400
provided the application

467
00:17:32,400 --> 00:17:35,200
acts as itself it doesn't act on behalf

468
00:17:35,200 --> 00:17:37,280
of the administrator

469
00:17:37,280 --> 00:17:39,360
now both app registrations and

470
00:17:39,360 --> 00:17:41,280
enterprise applications can be assigned

471
00:17:41,280 --> 00:17:42,320
permission so we're going to talk a

472
00:17:42,320 --> 00:17:43,760
little bit about that

473
00:17:43,760 --> 00:17:46,400
in a couple slides and how that affects

474
00:17:46,400 --> 00:17:48,640
applications that you trust from third

475
00:17:48,640 --> 00:17:50,799
parties

476
00:17:50,799 --> 00:17:53,120
but before we go any further we do need

477
00:17:53,120 --> 00:17:56,720
to talk about authentication because

478
00:17:56,720 --> 00:17:59,120
you can't just create an application

479
00:17:59,120 --> 00:18:01,039
with

480
00:18:01,039 --> 00:18:02,799
permissions and then expect it to be

481
00:18:02,799 --> 00:18:04,480
able to authenticate to the services you

482
00:18:04,480 --> 00:18:07,679
need to create a secret or a certificate

483
00:18:07,679 --> 00:18:10,640
that allows

484
00:18:10,799 --> 00:18:12,000
or that allows

485
00:18:12,000 --> 00:18:14,640
the application to

486
00:18:14,640 --> 00:18:18,559
authenticate as the identity of the app

487
00:18:18,559 --> 00:18:20,960
and this is roughly analogous to api

488
00:18:20,960 --> 00:18:22,080
keys

489
00:18:22,080 --> 00:18:25,520
applications can have

490
00:18:25,520 --> 00:18:26,960
multiple secrets or certificates

491
00:18:26,960 --> 00:18:28,720
associated with them they can have

492
00:18:28,720 --> 00:18:32,160
multiple api keys

493
00:18:32,559 --> 00:18:34,480
but once they're created once you create

494
00:18:34,480 --> 00:18:36,160
this api key

495
00:18:36,160 --> 00:18:38,080
you can't extract it from

496
00:18:38,080 --> 00:18:40,240
azure ad from the azure ad key store

497
00:18:40,240 --> 00:18:42,160
there's no mini cats equivalent that you

498
00:18:42,160 --> 00:18:44,880
can run or at least that i'm aware of

499
00:18:44,880 --> 00:18:46,480
that will extract the plain text

500
00:18:46,480 --> 00:18:48,240
credentials

501
00:18:48,240 --> 00:18:51,280
for that api key what this means is that

502
00:18:51,280 --> 00:18:52,880
the threat actor is going to need to

503
00:18:52,880 --> 00:18:55,760
create their own

504
00:18:55,760 --> 00:18:57,520
secrets or certificates for an

505
00:18:57,520 --> 00:19:01,440
application that they want to access

506
00:19:02,320 --> 00:19:03,600
now

507
00:19:03,600 --> 00:19:06,160
both app registrations and enterprise

508
00:19:06,160 --> 00:19:08,840
apps both the blueprint and the service

509
00:19:08,840 --> 00:19:11,120
principle can have secrets assigned to

510
00:19:11,120 --> 00:19:12,559
them however

511
00:19:12,559 --> 00:19:14,240
you can only assign

512
00:19:14,240 --> 00:19:16,480
credentials to an enterprise application

513
00:19:16,480 --> 00:19:18,400
via powershell you can't do that through

514
00:19:18,400 --> 00:19:20,400
the

515
00:19:20,400 --> 00:19:23,280
azure portal

516
00:19:23,280 --> 00:19:24,640
so now that we've kind of laid the

517
00:19:24,640 --> 00:19:26,559
groundwork for how azure applications

518
00:19:26,559 --> 00:19:28,160
work

519
00:19:28,160 --> 00:19:30,320
the high-level fun fundamentals for the

520
00:19:30,320 --> 00:19:32,320
permissions

521
00:19:32,320 --> 00:19:34,400
and the

522
00:19:34,400 --> 00:19:35,919
mechanisms for authenticating it seems

523
00:19:35,919 --> 00:19:37,679
pretty obvious how attackers are abusing

524
00:19:37,679 --> 00:19:39,840
them

525
00:19:40,960 --> 00:19:43,679
what we have seen is attackers identify

526
00:19:43,679 --> 00:19:46,000
an existing service principle inside of

527
00:19:46,000 --> 00:19:48,640
a tenant that they want to

528
00:19:48,640 --> 00:19:50,799
hijack and to hijack them what they

529
00:19:50,799 --> 00:19:53,280
would do is add the

530
00:19:53,280 --> 00:19:56,320
ms graph application permissions

531
00:19:56,320 --> 00:19:59,760
specifically the file.read and mail.read

532
00:19:59,760 --> 00:20:01,360
permissions

533
00:20:01,360 --> 00:20:04,240
that allow them to as the name suggests

534
00:20:04,240 --> 00:20:06,159
read mail and read files within the

535
00:20:06,159 --> 00:20:07,280
tenant

536
00:20:07,280 --> 00:20:09,440
then to authenticate the threat actor

537
00:20:09,440 --> 00:20:10,799
would add

538
00:20:10,799 --> 00:20:12,799
new credentials these can be either

539
00:20:12,799 --> 00:20:14,240
secrets or certificates and we've

540
00:20:14,240 --> 00:20:16,559
actually seen threat actors use both we

541
00:20:16,559 --> 00:20:18,640
haven't fully figured out why they pick

542
00:20:18,640 --> 00:20:21,679
one over the other but ultimately

543
00:20:21,679 --> 00:20:24,559
they add these credentials to

544
00:20:24,559 --> 00:20:27,200
act as their api keys once they have

545
00:20:27,200 --> 00:20:29,200
done this

546
00:20:29,200 --> 00:20:31,600
they have remote access to make api

547
00:20:31,600 --> 00:20:34,559
calls to the microsoft graph so every

548
00:20:34,559 --> 00:20:37,520
day an attacker would log in and extract

549
00:20:37,520 --> 00:20:41,200
the last 24 hours of emails

550
00:20:41,200 --> 00:20:43,919
from a set group of mailboxes now we

551
00:20:43,919 --> 00:20:46,000
hadn't seen them target every mailbox in

552
00:20:46,000 --> 00:20:47,919
a tenant that would be too much data but

553
00:20:47,919 --> 00:20:50,640
we did see them target the last 24 hours

554
00:20:50,640 --> 00:20:53,120
of a couple hundred mailboxes that fit

555
00:20:53,120 --> 00:20:55,520
within their espionage

556
00:20:55,520 --> 00:20:57,440
campaign or with the data that they were

557
00:20:57,440 --> 00:20:59,360
after

558
00:20:59,360 --> 00:21:00,880
now some of you may be saying well we

559
00:21:00,880 --> 00:21:02,320
have conditional access policies that

560
00:21:02,320 --> 00:21:04,640
limit how people access our environment

561
00:21:04,640 --> 00:21:07,120
those don't get applied to applications

562
00:21:07,120 --> 00:21:09,039
which means that the threat actor can

563
00:21:09,039 --> 00:21:11,280
access or can authenticate to the graph

564
00:21:11,280 --> 00:21:13,760
from anywhere in the world and to make

565
00:21:13,760 --> 00:21:16,960
matters worse service principal sign-ins

566
00:21:16,960 --> 00:21:19,600
weren't even available or sign-in logs

567
00:21:19,600 --> 00:21:22,320
weren't even available until mid-2020

568
00:21:22,320 --> 00:21:24,639
when

569
00:21:25,039 --> 00:21:28,159
and even then they're only recorded in

570
00:21:28,159 --> 00:21:29,760
azure ad and they need to be forwarded

571
00:21:29,760 --> 00:21:31,280
to a sim if you want to do any sort of

572
00:21:31,280 --> 00:21:33,679
meaningful analytics on them fortunately

573
00:21:33,679 --> 00:21:36,400
microsoft is paying close attention to

574
00:21:36,400 --> 00:21:37,919
where applications are authenticating

575
00:21:37,919 --> 00:21:39,919
from in the back end so it is making a

576
00:21:39,919 --> 00:21:41,280
little bit more difficult for threat

577
00:21:41,280 --> 00:21:45,200
actors to abuse them now

578
00:21:45,200 --> 00:21:47,919
we talk about app registrations

579
00:21:47,919 --> 00:21:49,760
because these can be created as

580
00:21:49,760 --> 00:21:53,280
multi-tenants customers can add your app

581
00:21:53,280 --> 00:21:55,280
to their tenant

582
00:21:55,280 --> 00:21:57,520
and the app registration remains as that

583
00:21:57,520 --> 00:22:00,159
master copy or the blueprint that is

584
00:22:00,159 --> 00:22:02,640
linked to all of the existing enterprise

585
00:22:02,640 --> 00:22:03,520
apps

586
00:22:03,520 --> 00:22:05,280
that are registered in the customer

587
00:22:05,280 --> 00:22:08,159
tenants so if we compromise that app

588
00:22:08,159 --> 00:22:11,039
registration that master copy we can

589
00:22:11,039 --> 00:22:14,320
access the data in any of the customer

590
00:22:14,320 --> 00:22:15,840
tenants

591
00:22:15,840 --> 00:22:17,120
so you really have to think about how

592
00:22:17,120 --> 00:22:20,799
you're trusting your

593
00:22:20,880 --> 00:22:22,559
business partners or applications that

594
00:22:22,559 --> 00:22:24,960
you've added to your tenants

595
00:22:24,960 --> 00:22:26,720
and all we need to do

596
00:22:26,720 --> 00:22:28,960
is use the friendly name of the

597
00:22:28,960 --> 00:22:30,960
application that we want or the friendly

598
00:22:30,960 --> 00:22:32,640
name of the tenant i should say that we

599
00:22:32,640 --> 00:22:34,720
want to access microsoft.com

600
00:22:34,720 --> 00:22:36,960
yourcompanyinc.com

601
00:22:36,960 --> 00:22:39,039
to access the data now there's a couple

602
00:22:39,039 --> 00:22:41,440
caveats here

603
00:22:41,440 --> 00:22:43,280
the permissions set

604
00:22:43,280 --> 00:22:45,360
that the app registration has is going

605
00:22:45,360 --> 00:22:47,760
to be the minimum of what the particular

606
00:22:47,760 --> 00:22:51,120
app is granted in the

607
00:22:51,120 --> 00:22:52,799
the consuming tenant or the consuming

608
00:22:52,799 --> 00:22:55,679
tenant service principle

609
00:22:55,679 --> 00:22:57,600
which also means that modifications to

610
00:22:57,600 --> 00:22:59,840
the app registration don't automatically

611
00:22:59,840 --> 00:23:01,760
propagate down

612
00:23:01,760 --> 00:23:03,520
to the

613
00:23:03,520 --> 00:23:05,520
uh the consuming tenants

614
00:23:05,520 --> 00:23:08,480
so a threat actor can't just

615
00:23:08,480 --> 00:23:10,960
add the mail.read permission and expect

616
00:23:10,960 --> 00:23:12,480
it to work in all of the consuming

617
00:23:12,480 --> 00:23:14,240
tenants uh still requires an

618
00:23:14,240 --> 00:23:16,880
administrator to consent but if the app

619
00:23:16,880 --> 00:23:20,400
already has the mail.read permission

620
00:23:20,400 --> 00:23:23,760
um they can they can leverage that

621
00:23:23,760 --> 00:23:25,520
um additionally though

622
00:23:25,520 --> 00:23:28,640
if the threat actor adds the adds a new

623
00:23:28,640 --> 00:23:30,559
credential to an app registration that

624
00:23:30,559 --> 00:23:33,360
exists outside of the blueprint and that

625
00:23:33,360 --> 00:23:35,360
app register that

626
00:23:35,360 --> 00:23:37,120
credential can be used to authenticate

627
00:23:37,120 --> 00:23:38,400
that new credential can be used to

628
00:23:38,400 --> 00:23:40,880
authenticate to all of the consuming

629
00:23:40,880 --> 00:23:42,960
tenants

630
00:23:42,960 --> 00:23:44,799
so

631
00:23:44,799 --> 00:23:46,960
this is the this is pretty scary because

632
00:23:46,960 --> 00:23:48,480
you can trust an

633
00:23:48,480 --> 00:23:49,679
application

634
00:23:49,679 --> 00:23:50,960
you think that you've got a service

635
00:23:50,960 --> 00:23:52,320
principle and that's the entity that

636
00:23:52,320 --> 00:23:53,760
you're going to be interacting with an

637
00:23:53,760 --> 00:23:55,279
attacker can't access your service

638
00:23:55,279 --> 00:23:56,640
principle because your security is

639
00:23:56,640 --> 00:23:57,760
really good

640
00:23:57,760 --> 00:24:00,240
but now the security of the

641
00:24:00,240 --> 00:24:03,279
service that you're trusting is now in

642
00:24:03,279 --> 00:24:05,120
question you have to focus very

643
00:24:05,120 --> 00:24:06,799
carefully on that and what permissions

644
00:24:06,799 --> 00:24:08,559
you're giving access to

645
00:24:08,559 --> 00:24:10,400
and to further complicate matters

646
00:24:10,400 --> 00:24:11,520
defenders

647
00:24:11,520 --> 00:24:13,600
in in our experience don't really

648
00:24:13,600 --> 00:24:16,000
understand the intricacies of azure ad

649
00:24:16,000 --> 00:24:18,159
apps there's a lot of new terminology

650
00:24:18,159 --> 00:24:20,240
that's you know if you live in an amazon

651
00:24:20,240 --> 00:24:21,279
world

652
00:24:21,279 --> 00:24:22,640
that

653
00:24:22,640 --> 00:24:24,400
is very different or if you live in a

654
00:24:24,400 --> 00:24:26,640
gcp world it's very different

655
00:24:26,640 --> 00:24:29,440
that this is a very new frontier for

656
00:24:29,440 --> 00:24:30,880
defenders

657
00:24:30,880 --> 00:24:32,240
and combine that with the fact that

658
00:24:32,240 --> 00:24:34,240
logging is pretty minimal

659
00:24:34,240 --> 00:24:37,200
and it's less than intuitive

660
00:24:37,200 --> 00:24:39,279
there's a big blind spot for defenders

661
00:24:39,279 --> 00:24:41,520
to realize that data could be

662
00:24:41,520 --> 00:24:43,200
being mass exported from their

663
00:24:43,200 --> 00:24:44,840
environment

664
00:24:44,840 --> 00:24:48,320
without any sort of alarm bells ringing

665
00:24:48,320 --> 00:24:50,240
like i said before fortunately microsoft

666
00:24:50,240 --> 00:24:52,480
is paying attention to this issue and

667
00:24:52,480 --> 00:24:54,960
they are proactively

668
00:24:54,960 --> 00:24:57,840
monitoring for abuse of

669
00:24:57,840 --> 00:25:01,360
azure ed apps so with that said i want

670
00:25:01,360 --> 00:25:05,200
to hand it over to doug to talk about

671
00:25:05,200 --> 00:25:08,400
saml abuse and adfs doug

672
00:25:08,400 --> 00:25:10,320
thanks josh now we're going to move into

673
00:25:10,320 --> 00:25:13,200
some adfs techniques specifically and

674
00:25:13,200 --> 00:25:15,919
saml so before we get into gold and saml

675
00:25:15,919 --> 00:25:18,400
i want to give a little bit of a quick

676
00:25:18,400 --> 00:25:21,520
one slide walkthrough on the adfs web

677
00:25:21,520 --> 00:25:24,159
authentication flow so we've got our

678
00:25:24,159 --> 00:25:26,080
user here on the bottom they're going to

679
00:25:26,080 --> 00:25:28,960
try and log into office 365. so they go

680
00:25:28,960 --> 00:25:31,840
to the website they enter their username

681
00:25:31,840 --> 00:25:33,440
and then we go through a process called

682
00:25:33,440 --> 00:25:36,720
home realm discovery where office 365 is

683
00:25:36,720 --> 00:25:39,520
going to kick me back to my adfs login

684
00:25:39,520 --> 00:25:42,799
page which is being proxied by our web

685
00:25:42,799 --> 00:25:45,520
application proxy in the dmz now that's

686
00:25:45,520 --> 00:25:48,159
really just a dumb reverse proxy uh for

687
00:25:48,159 --> 00:25:50,559
the real adfs server which is going to

688
00:25:50,559 --> 00:25:52,480
be sitting somewhere in that corporate

689
00:25:52,480 --> 00:25:55,039
network right so i enter my username and

690
00:25:55,039 --> 00:25:58,080
password adfs is going to pass that over

691
00:25:58,080 --> 00:26:00,400
to in most cases active directory to

692
00:26:00,400 --> 00:26:03,360
make our actual authentication decision

693
00:26:03,360 --> 00:26:05,600
if that authentication is successful

694
00:26:05,600 --> 00:26:07,039
then it's going to provide back some

695
00:26:07,039 --> 00:26:08,960
information to adfs things like my

696
00:26:08,960 --> 00:26:11,679
username maybe my group memberships

697
00:26:11,679 --> 00:26:13,760
maybe when the password expires these

698
00:26:13,760 --> 00:26:15,360
are all provided in what are called

699
00:26:15,360 --> 00:26:17,039
claims which are really just little

700
00:26:17,039 --> 00:26:19,120
snippets of information about the

701
00:26:19,120 --> 00:26:20,880
identity or the user that's

702
00:26:20,880 --> 00:26:22,240
authenticating

703
00:26:22,240 --> 00:26:25,200
now adfs is going to take those claims

704
00:26:25,200 --> 00:26:28,000
and transform them into new claims it

705
00:26:28,000 --> 00:26:30,159
could be simple such as pass through the

706
00:26:30,159 --> 00:26:32,240
username or it could be more complex

707
00:26:32,240 --> 00:26:34,960
like transform it add some text to it

708
00:26:34,960 --> 00:26:36,640
and it's going to package those claims

709
00:26:36,640 --> 00:26:39,919
into a security token which is called a

710
00:26:39,919 --> 00:26:42,480
saml token now that saml token is just

711
00:26:42,480 --> 00:26:44,640
an xml text document it's going to

712
00:26:44,640 --> 00:26:46,559
contain those pieces of information

713
00:26:46,559 --> 00:26:48,799
those claims and then the security of

714
00:26:48,799 --> 00:26:51,919
that document or how office 365 knows

715
00:26:51,919 --> 00:26:53,840
it's a valid token

716
00:26:53,840 --> 00:26:56,080
is facilitated through a digital

717
00:26:56,080 --> 00:26:58,559
signature and that digital signature is

718
00:26:58,559 --> 00:27:01,120
using a private key called the adfs

719
00:27:01,120 --> 00:27:04,400
token signing key which sits on the adfs

720
00:27:04,400 --> 00:27:05,520
server

721
00:27:05,520 --> 00:27:07,679
so you can imagine pretty easily if an

722
00:27:07,679 --> 00:27:09,600
attacker were able to get their hands on

723
00:27:09,600 --> 00:27:12,400
that adfs token signing key

724
00:27:12,400 --> 00:27:14,240
they could create saml tokens

725
00:27:14,240 --> 00:27:16,720
arbitrarily and access any cloud

726
00:27:16,720 --> 00:27:19,200
application that is federated to adfs

727
00:27:19,200 --> 00:27:21,600
right so the real bedrock of security

728
00:27:21,600 --> 00:27:24,799
for adfs is that token signing key and

729
00:27:24,799 --> 00:27:26,720
we want to keep it out of the hands of

730
00:27:26,720 --> 00:27:28,159
attackers

731
00:27:28,159 --> 00:27:30,399
so shifting our focus or our viewpoint

732
00:27:30,399 --> 00:27:32,320
to that attacker viewpoint how do we get

733
00:27:32,320 --> 00:27:35,679
our hands on that adfs token signing key

734
00:27:35,679 --> 00:27:38,159
well the first step is we need the

735
00:27:38,159 --> 00:27:39,760
encrypted key

736
00:27:39,760 --> 00:27:41,440
there are a couple of ways to get it but

737
00:27:41,440 --> 00:27:44,000
what we're going to focus on is

738
00:27:44,000 --> 00:27:45,760
how it's stored in the adfs

739
00:27:45,760 --> 00:27:49,200
configuration database and it's packed

740
00:27:49,200 --> 00:27:51,600
into this encrypted blob which i have on

741
00:27:51,600 --> 00:27:53,760
the screen for us now so there's of

742
00:27:53,760 --> 00:27:55,360
course going to be the cipher text but

743
00:27:55,360 --> 00:27:57,200
there's also a lot of associated

744
00:27:57,200 --> 00:27:59,360
information that we need to perform the

745
00:27:59,360 --> 00:28:01,520
decryption things like the nonce and the

746
00:28:01,520 --> 00:28:03,760
initialization vector for the decryption

747
00:28:03,760 --> 00:28:06,240
routine we also have a mac value so that

748
00:28:06,240 --> 00:28:08,799
we can validate that we decrypted the

749
00:28:08,799 --> 00:28:09,840
proper

750
00:28:09,840 --> 00:28:12,320
ciphertext or cleartext so how do we

751
00:28:12,320 --> 00:28:14,480
actually perform this decryption we

752
00:28:14,480 --> 00:28:17,200
first need some secret material

753
00:28:17,200 --> 00:28:18,880
and that secret material is using a

754
00:28:18,880 --> 00:28:21,279
technology called dkm or distributed key

755
00:28:21,279 --> 00:28:24,000
manager which is basically a fancy way

756
00:28:24,000 --> 00:28:26,799
of storing secrets inside of active

757
00:28:26,799 --> 00:28:27,919
directory

758
00:28:27,919 --> 00:28:30,399
and so that secret is stored in this

759
00:28:30,399 --> 00:28:34,240
adfs group in a contact object

760
00:28:34,240 --> 00:28:36,399
specifically in a thumbnail photo

761
00:28:36,399 --> 00:28:39,039
attribute of that contact object now by

762
00:28:39,039 --> 00:28:42,240
default only the adfs service account

763
00:28:42,240 --> 00:28:44,080
and some highly privileged groups like

764
00:28:44,080 --> 00:28:46,399
domain admins can read

765
00:28:46,399 --> 00:28:48,960
that key

766
00:28:48,960 --> 00:28:51,679
now the dkm value is not used by itself

767
00:28:51,679 --> 00:28:54,000
to decrypt the token signing certificate

768
00:28:54,000 --> 00:28:55,760
it's actually used as input to a key

769
00:28:55,760 --> 00:28:57,840
derivation function and the key

770
00:28:57,840 --> 00:28:59,760
derivation function that we're using is

771
00:28:59,760 --> 00:29:02,720
a nist standard it's a hmac sha-256

772
00:29:02,720 --> 00:29:04,480
derivation function

773
00:29:04,480 --> 00:29:06,960
and it mostly but not exactly follows

774
00:29:06,960 --> 00:29:09,039
the standard defined by nist and this is

775
00:29:09,039 --> 00:29:11,520
important because as a red teamer or as

776
00:29:11,520 --> 00:29:13,840
attackers if we just use for example the

777
00:29:13,840 --> 00:29:16,000
standard python cryptography package

778
00:29:16,000 --> 00:29:17,360
we're going to run into issues we

779
00:29:17,360 --> 00:29:19,840
actually need to tweak some of the

780
00:29:19,840 --> 00:29:21,840
parameters for that function in order to

781
00:29:21,840 --> 00:29:23,360
get the proper key

782
00:29:23,360 --> 00:29:25,039
now the other inputs are going to be

783
00:29:25,039 --> 00:29:27,039
taken out of that encrypted blob that i

784
00:29:27,039 --> 00:29:29,039
showed a couple of slides ago so we have

785
00:29:29,039 --> 00:29:30,240
the nonce

786
00:29:30,240 --> 00:29:31,919
we have the iv we have what's called a

787
00:29:31,919 --> 00:29:33,840
context all of that goes into this

788
00:29:33,840 --> 00:29:36,720
function and then we get the actual aes

789
00:29:36,720 --> 00:29:39,679
symmetric key to use for decryption

790
00:29:39,679 --> 00:29:41,919
so at this point we have a valid token

791
00:29:41,919 --> 00:29:44,240
signing key but how do we actually

792
00:29:44,240 --> 00:29:46,480
create a saml token that for example

793
00:29:46,480 --> 00:29:49,120
office 365 will accept

794
00:29:49,120 --> 00:29:50,559
well it relies on something called

795
00:29:50,559 --> 00:29:52,960
claims issuance rules and so anyone

796
00:29:52,960 --> 00:29:54,799
who's dabbled in adfs

797
00:29:54,799 --> 00:29:56,720
this will be familiar to you

798
00:29:56,720 --> 00:29:58,480
but i've got an example of some of the

799
00:29:58,480 --> 00:30:01,679
claim issuance rules for office 365 on

800
00:30:01,679 --> 00:30:04,159
this slide and it uses kind of a custom

801
00:30:04,159 --> 00:30:07,440
language that is documented by microsoft

802
00:30:07,440 --> 00:30:09,520
that falls into two parts we have a

803
00:30:09,520 --> 00:30:10,559
condition

804
00:30:10,559 --> 00:30:12,320
and then we have the actual issuance

805
00:30:12,320 --> 00:30:14,399
rule so it could be very simple such as

806
00:30:14,399 --> 00:30:16,399
take the claim that's incoming and just

807
00:30:16,399 --> 00:30:18,640
spit it out into the saml token or it

808
00:30:18,640 --> 00:30:20,960
could be more complex right

809
00:30:20,960 --> 00:30:22,799
now the order of these rules matters

810
00:30:22,799 --> 00:30:24,159
it's very important because they're

811
00:30:24,159 --> 00:30:26,880
evaluated chronologically so if we as

812
00:30:26,880 --> 00:30:29,039
attackers don't follow the order of

813
00:30:29,039 --> 00:30:30,240
these rules

814
00:30:30,240 --> 00:30:31,840
to the letter we're going to get a

815
00:30:31,840 --> 00:30:34,080
different set of resulting claims which

816
00:30:34,080 --> 00:30:36,720
means that office 365 or dropbox

817
00:30:36,720 --> 00:30:38,799
whatever we're trying to access it might

818
00:30:38,799 --> 00:30:41,200
not accept our saml token

819
00:30:41,200 --> 00:30:44,799
or we may add additional claims that

820
00:30:44,799 --> 00:30:47,600
aren't necessary and for anyone who is

821
00:30:47,600 --> 00:30:50,559
following the unk 2452 the solarwinds

822
00:30:50,559 --> 00:30:54,080
stuff some of the office 365 tools was

823
00:30:54,080 --> 00:30:56,559
we're looking for a user authentication

824
00:30:56,559 --> 00:30:59,279
method value of i think it was one six

825
00:30:59,279 --> 00:31:02,399
four five seven and that value is just a

826
00:31:02,399 --> 00:31:04,720
bitmap of the different claims in the

827
00:31:04,720 --> 00:31:06,960
token so as defenders that's kind of

828
00:31:06,960 --> 00:31:09,039
neat because we can kind of baseline

829
00:31:09,039 --> 00:31:11,600
what that value is and then look for

830
00:31:11,600 --> 00:31:13,039
look for outliers

831
00:31:13,039 --> 00:31:15,840
the sort of unfortunate thing is

832
00:31:15,840 --> 00:31:18,240
that value was never intended to be

833
00:31:18,240 --> 00:31:21,039
exposed to defenders so if you search

834
00:31:21,039 --> 00:31:23,840
for that value in your unified audit log

835
00:31:23,840 --> 00:31:25,840
or in your azure sign in logs you're not

836
00:31:25,840 --> 00:31:27,919
going to see it anymore so as defenders

837
00:31:27,919 --> 00:31:30,320
we cannot do any detecting based on

838
00:31:30,320 --> 00:31:33,760
abnormal claims now microsoft can see

839
00:31:33,760 --> 00:31:35,360
the claims in the token to a degree

840
00:31:35,360 --> 00:31:37,039
because they can see that user

841
00:31:37,039 --> 00:31:39,440
authentication method value so they may

842
00:31:39,440 --> 00:31:41,360
be monitoring right and it's important

843
00:31:41,360 --> 00:31:43,039
that if we're red teamers or threat

844
00:31:43,039 --> 00:31:45,679
actors we want to as closely match a

845
00:31:45,679 --> 00:31:50,159
legitimate saml token as possible

846
00:31:50,159 --> 00:31:52,240
the last piece of information that we

847
00:31:52,240 --> 00:31:54,320
want to focus on is that token lifetime

848
00:31:54,320 --> 00:31:56,720
right so how long are these saml tokens

849
00:31:56,720 --> 00:31:59,279
valid for now this is configurable per

850
00:31:59,279 --> 00:32:02,159
relying party trust which is per cloud

851
00:32:02,159 --> 00:32:04,399
application we're trying to access

852
00:32:04,399 --> 00:32:07,440
we can find that in the adfs database we

853
00:32:07,440 --> 00:32:10,080
can also get it using powershell now a

854
00:32:10,080 --> 00:32:13,679
default value of 0 means 60 seconds

855
00:32:13,679 --> 00:32:15,279
but we could set it for longer there's

856
00:32:15,279 --> 00:32:17,440
nothing to say that we can't make this a

857
00:32:17,440 --> 00:32:19,360
year or three years

858
00:32:19,360 --> 00:32:21,760
the only things to keep in mind are

859
00:32:21,760 --> 00:32:24,480
the saml token is evaluated when you

860
00:32:24,480 --> 00:32:26,720
provide it to that application you're

861
00:32:26,720 --> 00:32:28,480
trying to access so

862
00:32:28,480 --> 00:32:30,640
if we make a saml token with a validity

863
00:32:30,640 --> 00:32:33,519
period of five years but the underlying

864
00:32:33,519 --> 00:32:35,519
private public key pair is only valid

865
00:32:35,519 --> 00:32:37,600
for one the saml token's not going to be

866
00:32:37,600 --> 00:32:39,679
valid right the other thing to keep in

867
00:32:39,679 --> 00:32:42,240
mind is well this is an anomaly this is

868
00:32:42,240 --> 00:32:44,480
something that defenders can key in on

869
00:32:44,480 --> 00:32:46,799
and again we run into a situation where

870
00:32:46,799 --> 00:32:48,960
actual enterprise defenders cannot see

871
00:32:48,960 --> 00:32:50,720
this value so it does not show up in the

872
00:32:50,720 --> 00:32:52,880
logs it will not show up in your sim

873
00:32:52,880 --> 00:32:54,399
it's not something you can build rules

874
00:32:54,399 --> 00:32:57,440
for microsoft however can see this value

875
00:32:57,440 --> 00:32:59,840
on their back end and especially after

876
00:32:59,840 --> 00:33:01,000
last year's

877
00:33:01,000 --> 00:33:03,279
unk2452 spree they're probably

878
00:33:03,279 --> 00:33:04,799
monitoring for this so again as red

879
00:33:04,799 --> 00:33:07,039
teamers threat actors they're going to

880
00:33:07,039 --> 00:33:09,039
want to closely mimic this and 60

881
00:33:09,039 --> 00:33:11,279
minutes is pretty long time right in

882
00:33:11,279 --> 00:33:13,840
kind of the digital realm

883
00:33:13,840 --> 00:33:16,159
so this is all cool but what can we

884
00:33:16,159 --> 00:33:18,240
really do with this well

885
00:33:18,240 --> 00:33:20,799
as threat actors as red teamers our goal

886
00:33:20,799 --> 00:33:22,720
is always going to be persistence right

887
00:33:22,720 --> 00:33:25,519
how can we access this data for as long

888
00:33:25,519 --> 00:33:27,919
as possible and so it turns out one

889
00:33:27,919 --> 00:33:30,080
thing we can do is we can actually add a

890
00:33:30,080 --> 00:33:33,279
second token signing certificate to adfs

891
00:33:33,279 --> 00:33:35,039
we can have two valid certificates at

892
00:33:35,039 --> 00:33:38,320
the same time and the reason for this is

893
00:33:38,320 --> 00:33:40,320
token certificate signing certificate

894
00:33:40,320 --> 00:33:43,679
rollover right this is managed by adfs

895
00:33:43,679 --> 00:33:46,080
and in order to avoid outages

896
00:33:46,080 --> 00:33:48,159
there is actually the space for two

897
00:33:48,159 --> 00:33:50,640
token signing certificates so that one

898
00:33:50,640 --> 00:33:53,919
can expire in 30 days a new one can be

899
00:33:53,919 --> 00:33:55,200
created

900
00:33:55,200 --> 00:33:56,399
and then you have a little bit of

901
00:33:56,399 --> 00:33:57,919
overlap right

902
00:33:57,919 --> 00:34:00,000
and in fact both signing certificates

903
00:34:00,000 --> 00:34:02,000
can be valid at the same time and

904
00:34:02,000 --> 00:34:03,840
there's nothing to say that one signing

905
00:34:03,840 --> 00:34:06,320
certificate can be valid for the default

906
00:34:06,320 --> 00:34:07,840
period of one year

907
00:34:07,840 --> 00:34:09,520
and another one like we see in the

908
00:34:09,520 --> 00:34:12,000
screenshot be valid for five years

909
00:34:12,000 --> 00:34:14,480
so i can create my secondary token

910
00:34:14,480 --> 00:34:17,760
signing certificate i can add it to adfs

911
00:34:17,760 --> 00:34:19,359
or if i have global administrator

912
00:34:19,359 --> 00:34:22,719
privileges i could bypass adfs entirely

913
00:34:22,719 --> 00:34:26,159
and just add it to office 365.

914
00:34:26,159 --> 00:34:27,839
we can then create and mint our own

915
00:34:27,839 --> 00:34:29,280
tokens

916
00:34:29,280 --> 00:34:31,359
for you know as long as we want 5 years

917
00:34:31,359 --> 00:34:34,239
20 years 100 years until someone notices

918
00:34:34,239 --> 00:34:36,560
the secondary certificate and gets rid

919
00:34:36,560 --> 00:34:37,520
of it

920
00:34:37,520 --> 00:34:39,199
we can create valid token signing

921
00:34:39,199 --> 00:34:40,639
certificates so a very powerful

922
00:34:40,639 --> 00:34:42,560
persistence mechanism

923
00:34:42,560 --> 00:34:45,760
and in fact as defenders there is an

924
00:34:45,760 --> 00:34:47,599
event log message that gets generated

925
00:34:47,599 --> 00:34:49,679
when a new token signing certificate is

926
00:34:49,679 --> 00:34:51,359
added but there's no like built-in

927
00:34:51,359 --> 00:34:53,119
alerting right we'll need to create some

928
00:34:53,119 --> 00:34:55,520
custom scene rules if we want to detect

929
00:34:55,520 --> 00:34:57,119
this and you know we're going to have to

930
00:34:57,119 --> 00:34:59,280
do some baselining right because this

931
00:34:59,280 --> 00:35:02,000
process happens automatically when adfs

932
00:35:02,000 --> 00:35:05,280
performs rollovers and unfortunately the

933
00:35:05,280 --> 00:35:06,960
event log message does not tell us

934
00:35:06,960 --> 00:35:08,480
anything about the cert so we can't

935
00:35:08,480 --> 00:35:10,800
create some baselines to say hey tell me

936
00:35:10,800 --> 00:35:12,480
whenever a certificate is valid for

937
00:35:12,480 --> 00:35:14,160
longer than one year we kind of just

938
00:35:14,160 --> 00:35:16,960
need to see this alert maybe establish a

939
00:35:16,960 --> 00:35:18,720
pattern or maybe just have someone

940
00:35:18,720 --> 00:35:21,760
manually check that new cert

941
00:35:21,760 --> 00:35:23,680
so let's move on to some new techniques

942
00:35:23,680 --> 00:35:26,160
adfs replication

943
00:35:26,160 --> 00:35:28,880
and when i was doing the adfs spoof and

944
00:35:28,880 --> 00:35:30,800
dump research a couple years ago you

945
00:35:30,800 --> 00:35:32,160
know i always was thinking well what can

946
00:35:32,160 --> 00:35:33,680
we do to go further you know this

947
00:35:33,680 --> 00:35:35,280
technique is pretty cool it's pretty

948
00:35:35,280 --> 00:35:36,320
powerful

949
00:35:36,320 --> 00:35:38,800
but it relies on a threat actor gaining

950
00:35:38,800 --> 00:35:41,520
access to the adfs server and hopefully

951
00:35:41,520 --> 00:35:43,440
mature organizations are treating that

952
00:35:43,440 --> 00:35:46,480
adfs server as tier zero which means

953
00:35:46,480 --> 00:35:48,000
it's going to be hard to get at so is

954
00:35:48,000 --> 00:35:49,839
there any way that we could do this over

955
00:35:49,839 --> 00:35:51,119
the network

956
00:35:51,119 --> 00:35:53,760
and it turns out that we can with adfs

957
00:35:53,760 --> 00:35:55,920
replication so you can imagine that

958
00:35:55,920 --> 00:35:58,000
larger organizations geographically

959
00:35:58,000 --> 00:36:00,240
dispersed organizations they don't want

960
00:36:00,240 --> 00:36:02,960
just one adfs server they want multiple

961
00:36:02,960 --> 00:36:04,480
and those servers are going to exist in

962
00:36:04,480 --> 00:36:06,400
what's called a farm

963
00:36:06,400 --> 00:36:08,880
so we have multiple farm nodes and by

964
00:36:08,880 --> 00:36:10,320
default they're all going to use the

965
00:36:10,320 --> 00:36:12,160
same configuration and they're all going

966
00:36:12,160 --> 00:36:13,520
to use the same secrets they're going to

967
00:36:13,520 --> 00:36:16,560
use the same token signing certificate

968
00:36:16,560 --> 00:36:18,320
so these nodes keep the information in

969
00:36:18,320 --> 00:36:20,800
sync by using a replication service and

970
00:36:20,800 --> 00:36:23,520
this replication service is going to

971
00:36:23,520 --> 00:36:26,240
be served on the primary adfs server

972
00:36:26,240 --> 00:36:28,400
which is just the first adfs server that

973
00:36:28,400 --> 00:36:30,960
we install the roll on or the first

974
00:36:30,960 --> 00:36:33,280
windows server that we install that roll

975
00:36:33,280 --> 00:36:34,960
on

976
00:36:34,960 --> 00:36:36,960
so replication is going to be

977
00:36:36,960 --> 00:36:38,720
making use of something called the

978
00:36:38,720 --> 00:36:41,920
windows communication foundation or wcf

979
00:36:41,920 --> 00:36:43,520
which is really just another.net

980
00:36:43,520 --> 00:36:45,040
framework that allows us to really

981
00:36:45,040 --> 00:36:47,440
easily build client server applications

982
00:36:47,440 --> 00:36:50,480
so it kind of abstracts away all of the

983
00:36:50,480 --> 00:36:52,000
stuff that is developers we don't really

984
00:36:52,000 --> 00:36:54,480
want to focus on so the channels that

985
00:36:54,480 --> 00:36:56,079
communication is going to occur over

986
00:36:56,079 --> 00:36:58,560
which in this case is http and things

987
00:36:58,560 --> 00:37:00,800
like message security and authentication

988
00:37:00,800 --> 00:37:02,880
and authorization which in this case is

989
00:37:02,880 --> 00:37:04,880
going to be ws security

990
00:37:04,880 --> 00:37:07,680
in kerberos so that replication service

991
00:37:07,680 --> 00:37:10,000
is going to be accessible over a

992
00:37:10,000 --> 00:37:12,320
well-known uri which i have here on the

993
00:37:12,320 --> 00:37:13,280
slide

994
00:37:13,280 --> 00:37:15,599
authentication is going to use ws trust

995
00:37:15,599 --> 00:37:18,560
esp nego using kerberos

996
00:37:18,560 --> 00:37:20,640
and then you can see that this is over

997
00:37:20,640 --> 00:37:23,520
port 80 so it's over clear text http but

998
00:37:23,520 --> 00:37:25,520
the actual data payloads are going to be

999
00:37:25,520 --> 00:37:27,760
encrypted using a shared secret that's

1000
00:37:27,760 --> 00:37:30,400
derived from the kerberos session key so

1001
00:37:30,400 --> 00:37:32,400
even though this is you know clear text

1002
00:37:32,400 --> 00:37:34,560
http the actual data payloads are

1003
00:37:34,560 --> 00:37:36,320
encrypted so we can't just sit on the

1004
00:37:36,320 --> 00:37:39,920
wire and uh spoof or snoop on the

1005
00:37:39,920 --> 00:37:43,359
traffic on the replication traffic

1006
00:37:43,359 --> 00:37:46,000
now i mentioned that replication

1007
00:37:46,000 --> 00:37:47,839
is using some sort of authorization

1008
00:37:47,839 --> 00:37:49,280
right there's going to be a decision

1009
00:37:49,280 --> 00:37:52,480
made to see if a wcf client can

1010
00:37:52,480 --> 00:37:53,839
in fact

1011
00:37:53,839 --> 00:37:56,240
perform this replication and that

1012
00:37:56,240 --> 00:37:57,599
authorization

1013
00:37:57,599 --> 00:37:59,200
is going to use a policy which sits on

1014
00:37:59,200 --> 00:38:01,839
the adfs server in that configuration

1015
00:38:01,839 --> 00:38:04,480
database and it's just some xml text

1016
00:38:04,480 --> 00:38:06,560
which i have here on the slide this is

1017
00:38:06,560 --> 00:38:09,920
the default adfs authorization policy

1018
00:38:09,920 --> 00:38:12,400
and there are two main rules the first

1019
00:38:12,400 --> 00:38:14,720
we can see is a user sid this is just

1020
00:38:14,720 --> 00:38:16,960
the user sid for the adfs service

1021
00:38:16,960 --> 00:38:19,839
account in my test lab

1022
00:38:19,839 --> 00:38:21,920
and the second is a group sid and so we

1023
00:38:21,920 --> 00:38:23,200
can actually see this is a little bit

1024
00:38:23,200 --> 00:38:25,440
more permissive than than maybe we would

1025
00:38:25,440 --> 00:38:27,359
think any member of the local

1026
00:38:27,359 --> 00:38:30,000
administrators group on the adfs server

1027
00:38:30,000 --> 00:38:33,920
can in fact perform a replication so

1028
00:38:33,920 --> 00:38:35,200
even though we're still getting an

1029
00:38:35,200 --> 00:38:37,359
encrypted value we're still getting an

1030
00:38:37,359 --> 00:38:39,760
encrypted token signing cert we've now

1031
00:38:39,760 --> 00:38:41,440
expanded the attack surface right

1032
00:38:41,440 --> 00:38:43,920
previously we needed to run some code on

1033
00:38:43,920 --> 00:38:46,400
the adfs server and we needed to

1034
00:38:46,400 --> 00:38:49,119
compromise the adfs service account

1035
00:38:49,119 --> 00:38:50,720
now we can actually get this secret

1036
00:38:50,720 --> 00:38:53,040
value from anywhere on the network

1037
00:38:53,040 --> 00:38:54,960
and in fact we don't even need the adfs

1038
00:38:54,960 --> 00:38:56,800
service account we can use any local

1039
00:38:56,800 --> 00:38:58,079
admin

1040
00:38:58,079 --> 00:39:00,079
so maybe domain admin maybe that's for

1041
00:39:00,079 --> 00:39:01,680
whatever reason easier to get

1042
00:39:01,680 --> 00:39:04,320
credentials for than that single adfs

1043
00:39:04,320 --> 00:39:06,480
service account

1044
00:39:06,480 --> 00:39:08,400
so how do we actually do the replication

1045
00:39:08,400 --> 00:39:10,079
well again it turns out it's pretty easy

1046
00:39:10,079 --> 00:39:13,200
and the reason is wcf it extracts away a

1047
00:39:13,200 --> 00:39:16,079
lot of what we as developers or tool

1048
00:39:16,079 --> 00:39:18,079
developers we need to do and on the

1049
00:39:18,079 --> 00:39:20,320
slide here you see in just a few lines

1050
00:39:20,320 --> 00:39:23,680
this is really all the code you need to

1051
00:39:23,680 --> 00:39:26,800
request using the wcf client the

1052
00:39:26,800 --> 00:39:29,760
particular endpoint to get the encrypted

1053
00:39:29,760 --> 00:39:31,680
token signing certificate you call a

1054
00:39:31,680 --> 00:39:33,599
function or you're actually sending a

1055
00:39:33,599 --> 00:39:36,560
message with the get state operation now

1056
00:39:36,560 --> 00:39:38,400
there's some more code that you need but

1057
00:39:38,400 --> 00:39:40,400
it's really all boilerplate and the

1058
00:39:40,400 --> 00:39:42,720
entire poc that i wrote which i will not

1059
00:39:42,720 --> 00:39:45,839
be releasing is about 150 lines of code

1060
00:39:45,839 --> 00:39:48,079
and you can see some some other of my

1061
00:39:48,079 --> 00:39:50,400
peers wrote wrote a tool in powershell

1062
00:39:50,400 --> 00:39:52,560
for example which kind of reverse

1063
00:39:52,560 --> 00:39:54,160
engineered a lot of the actual network

1064
00:39:54,160 --> 00:39:55,280
protocols

1065
00:39:55,280 --> 00:39:56,960
but you get the same result there you

1066
00:39:56,960 --> 00:39:59,520
get the encrypted as token signing

1067
00:39:59,520 --> 00:40:01,760
certificate

1068
00:40:01,760 --> 00:40:03,839
so thinking forward to persistence like

1069
00:40:03,839 --> 00:40:05,839
what can i actually do with this how can

1070
00:40:05,839 --> 00:40:08,400
i persist my access to for example

1071
00:40:08,400 --> 00:40:11,839
office 365 for longer or

1072
00:40:11,839 --> 00:40:15,119
maybe a la dc shadow how can i as a

1073
00:40:15,119 --> 00:40:16,640
threat actor as a red team or when i

1074
00:40:16,640 --> 00:40:19,119
re-compromise the network go from domain

1075
00:40:19,119 --> 00:40:20,560
user to

1076
00:40:20,560 --> 00:40:22,400
control of adfs

1077
00:40:22,400 --> 00:40:24,560
in just one click

1078
00:40:24,560 --> 00:40:25,599
and so it's actually pretty

1079
00:40:25,599 --> 00:40:27,119
straightforward right we can imagine

1080
00:40:27,119 --> 00:40:28,960
that when i compromise the network i

1081
00:40:28,960 --> 00:40:30,880
elevate my privileges to

1082
00:40:30,880 --> 00:40:33,280
domain admin for example the first thing

1083
00:40:33,280 --> 00:40:35,839
i do is i edit the object acl to include

1084
00:40:35,839 --> 00:40:38,960
a new access control entry for that dkm

1085
00:40:38,960 --> 00:40:42,079
key to allow all domain users to read it

1086
00:40:42,079 --> 00:40:44,640
so now any domain user can get that dkm

1087
00:40:44,640 --> 00:40:45,599
key

1088
00:40:45,599 --> 00:40:48,000
i can also really easily create a new

1089
00:40:48,000 --> 00:40:50,960
authorization policy to authorize the

1090
00:40:50,960 --> 00:40:53,920
group sid for domain users to

1091
00:40:53,920 --> 00:40:57,040
access the replication service using a

1092
00:40:57,040 --> 00:40:59,920
wcf client so now

1093
00:40:59,920 --> 00:41:01,599
when i re-compromise the network as a

1094
00:41:01,599 --> 00:41:03,680
domain user all of the permissions are

1095
00:41:03,680 --> 00:41:07,359
in place for me to establish a wcf

1096
00:41:07,359 --> 00:41:08,319
client

1097
00:41:08,319 --> 00:41:11,440
call that get state operation and i now

1098
00:41:11,440 --> 00:41:14,400
have the means to decrypt the adfs token

1099
00:41:14,400 --> 00:41:16,720
signing certificate from anywhere on the

1100
00:41:16,720 --> 00:41:18,960
network as any user

1101
00:41:18,960 --> 00:41:21,280
so this is really powerful and we're you

1102
00:41:21,280 --> 00:41:22,160
know

1103
00:41:22,160 --> 00:41:24,319
we're asking the question why or

1104
00:41:24,319 --> 00:41:25,920
why are we going to do this well i think

1105
00:41:25,920 --> 00:41:28,960
that's easy we want persistent access to

1106
00:41:28,960 --> 00:41:31,359
information and more often than not that

1107
00:41:31,359 --> 00:41:33,760
information is going to be in office 365

1108
00:41:33,760 --> 00:41:35,359
right whether it's email whether it's

1109
00:41:35,359 --> 00:41:37,440
teams messages whether it's files on

1110
00:41:37,440 --> 00:41:38,880
sharepoint

1111
00:41:38,880 --> 00:41:39,920
as a

1112
00:41:39,920 --> 00:41:41,520
nation state actor with intelligence

1113
00:41:41,520 --> 00:41:43,280
collection requirements that's going to

1114
00:41:43,280 --> 00:41:45,040
be the bulk of what i want or as a red

1115
00:41:45,040 --> 00:41:47,200
teamer that's probably a pretty

1116
00:41:47,200 --> 00:41:49,760
high importance objective

1117
00:41:49,760 --> 00:41:51,839
and we're aided by some of the default

1118
00:41:51,839 --> 00:41:53,839
configurations in adfs when we're

1119
00:41:53,839 --> 00:41:56,000
performing this attack the first is by

1120
00:41:56,000 --> 00:41:59,599
default adfs is going to expose port 80

1121
00:41:59,599 --> 00:42:01,520
to all systems using the windows

1122
00:42:01,520 --> 00:42:02,480
firewall

1123
00:42:02,480 --> 00:42:04,720
the adfs role actually creates some

1124
00:42:04,720 --> 00:42:07,520
default firewall rules for us to allow

1125
00:42:07,520 --> 00:42:09,599
all port 80 traffic and you know you can

1126
00:42:09,599 --> 00:42:11,280
imagine well that makes sense right if

1127
00:42:11,280 --> 00:42:13,359
i'm trying to access something as an end

1128
00:42:13,359 --> 00:42:14,800
user using

1129
00:42:14,800 --> 00:42:17,359
web authentication i'm going to need

1130
00:42:17,359 --> 00:42:19,599
to access it over the web it turns out

1131
00:42:19,599 --> 00:42:21,760
that's slightly wrong you definitely

1132
00:42:21,760 --> 00:42:25,040
need port 443 right because as a user

1133
00:42:25,040 --> 00:42:26,560
authenticating i'm going to be doing

1134
00:42:26,560 --> 00:42:28,800
this over tls but we don't actually need

1135
00:42:28,800 --> 00:42:31,119
to expose port 80 to all systems the

1136
00:42:31,119 --> 00:42:32,240
only

1137
00:42:32,240 --> 00:42:34,720
adfs service that's using port 80 is

1138
00:42:34,720 --> 00:42:37,520
that replication service and the only

1139
00:42:37,520 --> 00:42:39,040
clients that should be accessing that

1140
00:42:39,040 --> 00:42:41,359
are other adfs servers

1141
00:42:41,359 --> 00:42:43,599
we also have some logging settings going

1142
00:42:43,599 --> 00:42:46,400
for us we have some stealth built in

1143
00:42:46,400 --> 00:42:48,160
the first is that replication events are

1144
00:42:48,160 --> 00:42:50,400
not logged at all so nowhere not in the

1145
00:42:50,400 --> 00:42:52,160
security event logs

1146
00:42:52,160 --> 00:42:55,520
not in the adfs log itself that's not

1147
00:42:55,520 --> 00:42:57,359
logged anywhere the only way that you'll

1148
00:42:57,359 --> 00:42:59,119
see this in the event log is

1149
00:42:59,119 --> 00:43:02,560
is if you enable wcf tracing which to be

1150
00:43:02,560 --> 00:43:03,920
honest no one's going to do because it's

1151
00:43:03,920 --> 00:43:06,400
extremely chatty

1152
00:43:06,400 --> 00:43:08,720
editing that adfs configuration database

1153
00:43:08,720 --> 00:43:11,200
is also not logged anywhere so we can

1154
00:43:11,200 --> 00:43:13,040
make changes to that and as long as we

1155
00:43:13,040 --> 00:43:14,400
don't mess up as long as we don't

1156
00:43:14,400 --> 00:43:16,640
invalidate the configuration no one's

1157
00:43:16,640 --> 00:43:18,960
really going to be the wiser

1158
00:43:18,960 --> 00:43:19,839
and

1159
00:43:19,839 --> 00:43:22,079
then lastly you know editing domain

1160
00:43:22,079 --> 00:43:23,680
object acls you know there's some really

1161
00:43:23,680 --> 00:43:26,240
great research out there and talks out

1162
00:43:26,240 --> 00:43:28,079
there about you know how you can enable

1163
00:43:28,079 --> 00:43:29,920
auditing for that but you know i think

1164
00:43:29,920 --> 00:43:31,920
the organization that enables that is

1165
00:43:31,920 --> 00:43:35,119
going to be very few and far between so

1166
00:43:35,119 --> 00:43:36,560
we definitely have some things going for

1167
00:43:36,560 --> 00:43:38,400
us here with this technique

1168
00:43:38,400 --> 00:43:40,000
and then you know the attack surface i

1169
00:43:40,000 --> 00:43:41,520
already talked about a little bit but

1170
00:43:41,520 --> 00:43:43,920
it's worth noting that you don't need to

1171
00:43:43,920 --> 00:43:46,880
target the primary adfs server so you

1172
00:43:46,880 --> 00:43:48,319
know if you're sitting off in some data

1173
00:43:48,319 --> 00:43:50,319
center far away and that primary server

1174
00:43:50,319 --> 00:43:53,200
is vland off you can actually access the

1175
00:43:53,200 --> 00:43:54,880
replication service

1176
00:43:54,880 --> 00:43:56,880
by um

1177
00:43:56,880 --> 00:43:59,200
by any adfs server even the secondary

1178
00:43:59,200 --> 00:44:00,960
server it's just going to service that

1179
00:44:00,960 --> 00:44:02,720
request for you

1180
00:44:02,720 --> 00:44:04,880
and if your adfs environment you're

1181
00:44:04,880 --> 00:44:07,359
targeting is using a sql server backend

1182
00:44:07,359 --> 00:44:09,280
which is not the default this will work

1183
00:44:09,280 --> 00:44:11,440
as well right so it's a pretty powerful

1184
00:44:11,440 --> 00:44:13,119
technique if we're for whatever reason

1185
00:44:13,119 --> 00:44:15,040
able to get domain admin privileges but

1186
00:44:15,040 --> 00:44:17,599
not adfs service account privileges we

1187
00:44:17,599 --> 00:44:19,839
can still get the adfs signing key we

1188
00:44:19,839 --> 00:44:21,839
can still decrypt it and then we can

1189
00:44:21,839 --> 00:44:24,160
create this kind of adfs backdoor to

1190
00:44:24,160 --> 00:44:26,160
give ourselves persistent access to that

1191
00:44:26,160 --> 00:44:28,079
token signing key

1192
00:44:28,079 --> 00:44:30,400
so that's all we have for today

1193
00:44:30,400 --> 00:44:32,160
if we'll have any questions they'll be

1194
00:44:32,160 --> 00:44:35,040
in the chat i think if not you have my

1195
00:44:35,040 --> 00:44:37,200
and josh's twitter and thanks guys for

1196
00:44:37,200 --> 00:44:40,000
listening

