1
00:00:01,130 --> 00:00:14,160
[Music]

2
00:00:14,160 --> 00:00:16,880
welcome everyone to our talk about 20

3
00:00:16,880 --> 00:00:19,439
plus ways to bypass your mac os privacy

4
00:00:19,439 --> 00:00:20,800
mechanism

5
00:00:20,800 --> 00:00:23,439
uh my name is chaba fitzel

6
00:00:23,439 --> 00:00:25,519
i'm currently working at the offensive

7
00:00:25,519 --> 00:00:28,320
security and i'm the author of the

8
00:00:28,320 --> 00:00:30,240
upcoming mac os control bypass is

9
00:00:30,240 --> 00:00:31,199
training

10
00:00:31,199 --> 00:00:33,840
uh i have an open source app called

11
00:00:33,840 --> 00:00:36,239
sheet which

12
00:00:36,239 --> 00:00:38,480
can be used for excellent protection on

13
00:00:38,480 --> 00:00:39,680
mac os

14
00:00:39,680 --> 00:00:41,280
i used to be

15
00:00:41,280 --> 00:00:43,520
a red and blue dimmer for a very long

16
00:00:43,520 --> 00:00:46,079
time before that i'm married have two

17
00:00:46,079 --> 00:00:48,960
kids and i love to spend my time

18
00:00:48,960 --> 00:00:51,199
in the mountains

19
00:00:51,199 --> 00:00:53,199
over to you yeah

20
00:00:53,199 --> 00:00:55,680
yeah so my name is voice

21
00:00:55,680 --> 00:00:57,920
i'm a seniority security consultant

22
00:00:57,920 --> 00:01:00,399
currently employed at securing i'm

23
00:01:00,399 --> 00:01:03,039
mostly focused on ios and mac os

24
00:01:03,039 --> 00:01:06,240
application security in my free time i

25
00:01:06,240 --> 00:01:09,119
also run a blog about apple security so

26
00:01:09,119 --> 00:01:11,280
you can see the link on the slide

27
00:01:11,280 --> 00:01:13,680
you may also know me from the ios

28
00:01:13,680 --> 00:01:16,320
security suit that i'm a creator of it's

29
00:01:16,320 --> 00:01:19,360
a open source swift library that helps

30
00:01:19,360 --> 00:01:20,960
you to make sure if you run your

31
00:01:20,960 --> 00:01:25,200
application on a secure ios device and

32
00:01:25,200 --> 00:01:27,520
recently i also started a new service

33
00:01:27,520 --> 00:01:30,000
that is macros environment security

34
00:01:30,000 --> 00:01:31,010
testing

35
00:01:31,010 --> 00:01:32,799
[Music]

36
00:01:32,799 --> 00:01:33,759
but

37
00:01:33,759 --> 00:01:36,400
coming back to the presentation

38
00:01:36,400 --> 00:01:38,799
so we both of chaba

39
00:01:38,799 --> 00:01:42,399
made uh joint research about uh tcc and

40
00:01:42,399 --> 00:01:46,079
the security mechanisms present on macas

41
00:01:46,079 --> 00:01:49,280
and uh we identified a lot of different

42
00:01:49,280 --> 00:01:52,640
ways to bypass the tcc uh as this is

43
00:01:52,640 --> 00:01:55,280
only a 40 minutes talk

44
00:01:55,280 --> 00:01:57,439
we don't have to talk about every

45
00:01:57,439 --> 00:02:00,960
vulnerability we have identified uh so

46
00:02:00,960 --> 00:02:03,280
this presentation will focus only on

47
00:02:03,280 --> 00:02:06,079
selected vulnerabilities that i hope and

48
00:02:06,079 --> 00:02:07,439
show

49
00:02:07,439 --> 00:02:09,679
also that you enjoy

50
00:02:09,679 --> 00:02:11,280
uh

51
00:02:11,280 --> 00:02:12,080
so

52
00:02:12,080 --> 00:02:14,400
uh the first mechanism we want to

53
00:02:14,400 --> 00:02:17,040
discuss uh in order to

54
00:02:17,040 --> 00:02:20,080
uh show you how the tcc works is system

55
00:02:20,080 --> 00:02:22,879
integrity protection it's based on

56
00:02:22,879 --> 00:02:26,080
sandbox kernel extension and restricts

57
00:02:26,080 --> 00:02:30,400
access to many directories on macos

58
00:02:30,400 --> 00:02:32,720
it also as it's called system integrity

59
00:02:32,720 --> 00:02:34,959
protection it protects the integrity so

60
00:02:34,959 --> 00:02:37,200
it will also block you from injecting

61
00:02:37,200 --> 00:02:38,239
your

62
00:02:38,239 --> 00:02:41,760
brain malicious code to uh

63
00:02:41,760 --> 00:02:44,000
system services that are of course

64
00:02:44,000 --> 00:02:47,120
signed directly by apple's certificate

65
00:02:47,120 --> 00:02:49,599
and system integrity protection is also

66
00:02:49,599 --> 00:02:51,519
known as ruthless

67
00:02:51,519 --> 00:02:53,920
because on mac os if you have root you

68
00:02:53,920 --> 00:02:55,519
are not a god

69
00:02:55,519 --> 00:02:57,680
you still cannot do everything you want

70
00:02:57,680 --> 00:02:59,599
so system integrity protection will

71
00:02:59,599 --> 00:03:01,599
prevent you even as a route to access

72
00:03:01,599 --> 00:03:04,159
some directories uh to write files to

73
00:03:04,159 --> 00:03:06,239
specific directories or to

74
00:03:06,239 --> 00:03:08,560
uh attach for example debuggers to

75
00:03:08,560 --> 00:03:10,879
apple's processes

76
00:03:10,879 --> 00:03:14,800
uh but what does the tcc stand for

77
00:03:14,800 --> 00:03:19,360
tcc is transparency constant and control

78
00:03:19,360 --> 00:03:21,840
framework

79
00:03:22,080 --> 00:03:25,280
it makes sure that

80
00:03:25,280 --> 00:03:27,680
you you have

81
00:03:27,680 --> 00:03:29,200
permissions to

82
00:03:29,200 --> 00:03:31,440
some privacy privacy

83
00:03:31,440 --> 00:03:34,400
resources so for example a must

84
00:03:34,400 --> 00:03:37,040
application cannot access your desktop

85
00:03:37,040 --> 00:03:38,799
or for example

86
00:03:38,799 --> 00:03:40,400
your address book

87
00:03:40,400 --> 00:03:42,560
let's take a look on an example on the

88
00:03:42,560 --> 00:03:46,000
slide so i've opened the fresh terminal

89
00:03:46,000 --> 00:03:48,239
and terminal of course is an application

90
00:03:48,239 --> 00:03:50,720
in the context of macros and i tried to

91
00:03:50,720 --> 00:03:53,680
list the address book and as you can see

92
00:03:53,680 --> 00:03:57,040
maca has prompted me uh with the

93
00:03:57,040 --> 00:03:59,439
with that prompt if the terminal would

94
00:03:59,439 --> 00:04:03,840
like to access my contacts so i can

95
00:04:03,840 --> 00:04:07,360
grant the permission or or not

96
00:04:07,360 --> 00:04:09,760
if you are a mac os user

97
00:04:09,760 --> 00:04:12,159
you are probably familiar with this

98
00:04:12,159 --> 00:04:14,720
privacy tab and you know this is the

99
00:04:14,720 --> 00:04:16,720
core of the tcc from the user's

100
00:04:16,720 --> 00:04:18,798
perspective uh you grant for example

101
00:04:18,798 --> 00:04:20,399
permission to camera to specific

102
00:04:20,399 --> 00:04:22,560
applications or for example in the

103
00:04:22,560 --> 00:04:24,320
automation uh

104
00:04:24,320 --> 00:04:26,400
subtop uh you can

105
00:04:26,400 --> 00:04:28,639
give and give access to one application

106
00:04:28,639 --> 00:04:31,280
that will be able to control

107
00:04:31,280 --> 00:04:33,120
another application

108
00:04:33,120 --> 00:04:34,560
so yeah this is

109
00:04:34,560 --> 00:04:38,160
briefly about what tcc is but from the

110
00:04:38,160 --> 00:04:41,360
reverse engineer perspective uh so from

111
00:04:41,360 --> 00:04:42,560
our

112
00:04:42,560 --> 00:04:47,199
security perspective uh tcc has a

113
00:04:47,199 --> 00:04:50,800
sqlite free databases uh this databases

114
00:04:50,800 --> 00:04:52,479
contain the

115
00:04:52,479 --> 00:04:55,280
rules the permission you uh had granted

116
00:04:55,280 --> 00:04:58,160
to the applications and you have one

117
00:04:58,160 --> 00:05:00,880
global uh protected by the system

118
00:05:00,880 --> 00:05:04,000
integrity protection database uh placed

119
00:05:04,000 --> 00:05:06,320
in the library application support com

120
00:05:06,320 --> 00:05:09,759
apple tcc directory and uh for each

121
00:05:09,759 --> 00:05:12,560
every user uh you have

122
00:05:12,560 --> 00:05:15,520
another tcc database in the uh home

123
00:05:15,520 --> 00:05:17,520
directory slash labor application

124
00:05:17,520 --> 00:05:20,160
support com apple tcc director

125
00:05:20,160 --> 00:05:22,479
uh the first one the first database the

126
00:05:22,479 --> 00:05:25,199
global uh contains the

127
00:05:25,199 --> 00:05:26,800
permissions to

128
00:05:26,800 --> 00:05:29,680
for example full disk access

129
00:05:29,680 --> 00:05:32,240
but that the second one the paper each

130
00:05:32,240 --> 00:05:34,560
user database will for example control

131
00:05:34,560 --> 00:05:36,960
your camera and the user specific

132
00:05:36,960 --> 00:05:39,360
directories like desktop or

133
00:05:39,360 --> 00:05:41,039
uh

134
00:05:41,039 --> 00:05:43,600
or contacts

135
00:05:43,600 --> 00:05:46,560
to show you that's indeed a sqli free

136
00:05:46,560 --> 00:05:50,160
database i connected via sqli3

137
00:05:50,160 --> 00:05:53,680
binary and uh selected a few columns

138
00:05:53,680 --> 00:05:56,319
like service client value and code sign

139
00:05:56,319 --> 00:05:59,520
requirement uh the first one uh contains

140
00:05:59,520 --> 00:06:02,720
the the permissions that we had granted

141
00:06:02,720 --> 00:06:05,680
to the applications uh client contains

142
00:06:05,680 --> 00:06:06,880
the

143
00:06:06,880 --> 00:06:09,199
in this case bundle identifiers of the

144
00:06:09,199 --> 00:06:11,840
applications that have the permissions

145
00:06:11,840 --> 00:06:15,520
granted um it they may be also passed to

146
00:06:15,520 --> 00:06:18,080
these applications uh the out value

147
00:06:18,080 --> 00:06:20,319
contains the current out

148
00:06:20,319 --> 00:06:23,199
authorization value so if the permission

149
00:06:23,199 --> 00:06:26,240
has been granted or not and uh the cs

150
00:06:26,240 --> 00:06:29,520
reg stands for code signing requirements

151
00:06:29,520 --> 00:06:31,759
and as you can see there are quotation

152
00:06:31,759 --> 00:06:35,280
marks and uh this appears because that

153
00:06:35,280 --> 00:06:37,120
the code signing requirements are not

154
00:06:37,120 --> 00:06:38,240
printable

155
00:06:38,240 --> 00:06:41,520
so i took one code signing requirement

156
00:06:41,520 --> 00:06:45,759
encoded it in base64 and written

157
00:06:45,759 --> 00:06:48,160
and i have written such a code to show

158
00:06:48,160 --> 00:06:50,479
you how to decode this code site

159
00:06:50,479 --> 00:06:52,160
requirement

160
00:06:52,160 --> 00:06:53,440
so

161
00:06:53,440 --> 00:06:55,840
on the screenshot below uh you can see

162
00:06:55,840 --> 00:06:58,479
that you can

163
00:06:58,479 --> 00:07:01,759
create a human readable form from this

164
00:07:01,759 --> 00:07:05,759
non-printable code signing requirement

165
00:07:05,759 --> 00:07:08,240
okay so now i'm

166
00:07:08,240 --> 00:07:11,680
passing the microphone back to java

167
00:07:11,680 --> 00:07:13,039
okay

168
00:07:13,039 --> 00:07:16,639
so the next big pillar of tcc is all

169
00:07:16,639 --> 00:07:19,280
around user intent

170
00:07:19,280 --> 00:07:22,880
this comes into play when the user is

171
00:07:22,880 --> 00:07:25,039
showing a clear intention

172
00:07:25,039 --> 00:07:26,400
uh that

173
00:07:26,400 --> 00:07:29,039
he or she wants to access a particular

174
00:07:29,039 --> 00:07:30,400
file

175
00:07:30,400 --> 00:07:32,319
this user intent is

176
00:07:32,319 --> 00:07:34,560
controlled by an extended attribute

177
00:07:34,560 --> 00:07:37,520
called the mac com pepper macro

178
00:07:37,520 --> 00:07:39,840
and it's entirely managed by by the

179
00:07:39,840 --> 00:07:42,400
sandbox and also protected by system

180
00:07:42,400 --> 00:07:45,520
integrity protection so user cannot just

181
00:07:45,520 --> 00:07:47,120
add or delete

182
00:07:47,120 --> 00:07:48,960
these attributes

183
00:07:48,960 --> 00:07:50,319
so

184
00:07:50,319 --> 00:07:52,720
basically what happens uh what is shown

185
00:07:52,720 --> 00:07:54,960
here on the screen is

186
00:07:54,960 --> 00:07:56,639
let's say terminal doesn't have access

187
00:07:56,639 --> 00:07:59,039
to the documents folder so the user

188
00:07:59,039 --> 00:08:02,960
cannot print out the password takes the

189
00:08:02,960 --> 00:08:06,720
stored in this directory but if the user

190
00:08:06,720 --> 00:08:09,280
drag and drops the password txt from

191
00:08:09,280 --> 00:08:11,360
finder to terminal

192
00:08:11,360 --> 00:08:14,240
the user shows a clear intended

193
00:08:14,240 --> 00:08:15,280
um

194
00:08:15,280 --> 00:08:17,199
he wants to access it

195
00:08:17,199 --> 00:08:18,720
so what happens

196
00:08:18,720 --> 00:08:20,960
at that point mac os will grant access

197
00:08:20,960 --> 00:08:23,599
to password txt for terminal

198
00:08:23,599 --> 00:08:28,800
and then terminal can print it out

199
00:08:29,120 --> 00:08:31,599
so the way it's managed again is through

200
00:08:31,599 --> 00:08:33,440
an extended attribute

201
00:08:33,440 --> 00:08:36,240
which is stored with the file

202
00:08:36,240 --> 00:08:38,958
it's called com apple macro and

203
00:08:38,958 --> 00:08:42,719
basically it contains a list of uu ids

204
00:08:42,719 --> 00:08:44,800
with a particular header the header is

205
00:08:44,800 --> 00:08:46,460
typically

206
00:08:46,460 --> 00:08:47,920
[Music]

207
00:08:47,920 --> 00:08:50,720
number three and it's uh two byte long

208
00:08:50,720 --> 00:08:53,120
so the second one is just uh

209
00:08:53,120 --> 00:08:55,200
zero here we can see that the

210
00:08:55,200 --> 00:09:00,240
password.txt has two uuids associated uh

211
00:09:00,240 --> 00:09:02,480
one is for terminal and the other one is

212
00:09:02,480 --> 00:09:05,360
text edit which i use to create

213
00:09:05,360 --> 00:09:07,040
this file

214
00:09:07,040 --> 00:09:09,600
now it's very important that this uuid

215
00:09:09,600 --> 00:09:10,959
is unique

216
00:09:10,959 --> 00:09:11,760
uh

217
00:09:11,760 --> 00:09:15,360
to the actual device so if we transfer

218
00:09:15,360 --> 00:09:18,880
this file to another mac uh device

219
00:09:18,880 --> 00:09:21,279
and we somehow managed to maintain this

220
00:09:21,279 --> 00:09:23,120
extended attribute

221
00:09:23,120 --> 00:09:24,399
um

222
00:09:24,399 --> 00:09:27,279
on that device this attribute will not

223
00:09:27,279 --> 00:09:28,480
grant

224
00:09:28,480 --> 00:09:31,600
any access to in this case to terminal

225
00:09:31,600 --> 00:09:32,640
and

226
00:09:32,640 --> 00:09:35,279
text edit

227
00:09:35,440 --> 00:09:37,560
all right so the first group of

228
00:09:37,560 --> 00:09:39,760
vulnerabilities that we wanted to show

229
00:09:39,760 --> 00:09:42,959
you are tcc by buses via

230
00:09:42,959 --> 00:09:44,320
plugins

231
00:09:44,320 --> 00:09:46,800
so the problem with tcc

232
00:09:46,800 --> 00:09:49,279
is that it validates the entitlements

233
00:09:49,279 --> 00:09:52,399
held by the main executable so if you

234
00:09:52,399 --> 00:09:54,959
have applications or sub-applications

235
00:09:54,959 --> 00:09:57,839
that are executed that are executing

236
00:09:57,839 --> 00:09:59,760
their code in the context of the main

237
00:09:59,760 --> 00:10:01,519
applications

238
00:10:01,519 --> 00:10:04,160
they will inherit the private tcc

239
00:10:04,160 --> 00:10:06,880
entitlements or the

240
00:10:06,880 --> 00:10:09,040
tcc permissions granted to the main

241
00:10:09,040 --> 00:10:10,399
executable

242
00:10:10,399 --> 00:10:14,480
let's take a look on an example

243
00:10:14,480 --> 00:10:15,519
so

244
00:10:15,519 --> 00:10:17,440
we have three actors here the system

245
00:10:17,440 --> 00:10:19,600
application with private dc permissions

246
00:10:19,600 --> 00:10:22,320
that contains plugins

247
00:10:22,320 --> 00:10:26,000
we have kernel and user space tccd

248
00:10:26,000 --> 00:10:26,880
so

249
00:10:26,880 --> 00:10:29,839
whenever the system application

250
00:10:29,839 --> 00:10:32,240
wants to access the files from the

251
00:10:32,240 --> 00:10:33,839
desktop

252
00:10:33,839 --> 00:10:36,560
under the hood the kernel will be asked

253
00:10:36,560 --> 00:10:37,839
if that

254
00:10:37,839 --> 00:10:40,720
if the permission could be granted so

255
00:10:40,720 --> 00:10:43,279
the caramel will delegate

256
00:10:43,279 --> 00:10:46,399
this decision to the tcc daemon the user

257
00:10:46,399 --> 00:10:49,680
space c demon and this demon

258
00:10:49,680 --> 00:10:52,320
will verify the code signing requirement

259
00:10:52,320 --> 00:10:53,760
that you saw in the

260
00:10:53,760 --> 00:10:56,480
in the sqlite3 database of the main

261
00:10:56,480 --> 00:10:59,680
executable in order to verify if the

262
00:10:59,680 --> 00:11:02,240
permission has been granted or not

263
00:11:02,240 --> 00:11:05,760
if it was the access is granted and yeah

264
00:11:05,760 --> 00:11:08,160
our application can access the files

265
00:11:08,160 --> 00:11:09,920
from desktop

266
00:11:09,920 --> 00:11:11,200
however

267
00:11:11,200 --> 00:11:13,120
if we have the system application that

268
00:11:13,120 --> 00:11:17,120
contains a malicious plugin what happens

269
00:11:17,120 --> 00:11:19,360
and it turns out that

270
00:11:19,360 --> 00:11:21,600
nothing special it's exactly the same

271
00:11:21,600 --> 00:11:23,519
situation the marshes plugin still

272
00:11:23,519 --> 00:11:26,000
executes in the context of the of the

273
00:11:26,000 --> 00:11:28,560
main application so the tcc daemon will

274
00:11:28,560 --> 00:11:31,040
only verify that the parent application

275
00:11:31,040 --> 00:11:31,770
the

276
00:11:31,770 --> 00:11:33,200
[Music]

277
00:11:33,200 --> 00:11:34,640
the main application that has the

278
00:11:34,640 --> 00:11:37,040
permissions granted

279
00:11:37,040 --> 00:11:38,079
so

280
00:11:38,079 --> 00:11:40,959
an example of such a vulnerability was

281
00:11:40,959 --> 00:11:42,959
that cde

282
00:11:42,959 --> 00:11:45,760
and we richard we are changing the nfs

283
00:11:45,760 --> 00:11:49,040
home directory so i identified a

284
00:11:49,040 --> 00:11:51,680
suspicious application uh called

285
00:11:51,680 --> 00:11:54,399
directory utility and i call it

286
00:11:54,399 --> 00:11:58,079
suspicious because it had a private tcc

287
00:11:58,079 --> 00:12:00,800
entitlement that allowed accessing

288
00:12:00,800 --> 00:12:03,279
system policies admin files

289
00:12:03,279 --> 00:12:04,079
uh

290
00:12:04,079 --> 00:12:07,360
when i encountered this application i uh

291
00:12:07,360 --> 00:12:10,240
started browsing through its directory

292
00:12:10,240 --> 00:12:12,959
and it turned out that it contains a

293
00:12:12,959 --> 00:12:16,079
plugin subdirectory and the the plugin

294
00:12:16,079 --> 00:12:19,120
subdirectory contains uh for

295
00:12:19,120 --> 00:12:21,360
uh

296
00:12:21,360 --> 00:12:25,600
the domain admin uh plugins the the for

297
00:12:25,600 --> 00:12:26,959
the four plugins

298
00:12:26,959 --> 00:12:30,480
and i wanted to know if this plugins are

299
00:12:30,480 --> 00:12:33,200
uh loaded into the context of the main

300
00:12:33,200 --> 00:12:36,160
process so i've opened the active

301
00:12:36,160 --> 00:12:38,399
directory

302
00:12:38,399 --> 00:12:39,839
and also the

303
00:12:39,839 --> 00:12:42,959
task explorer and i saw that in the

304
00:12:42,959 --> 00:12:45,120
dilips

305
00:12:45,120 --> 00:12:48,079
tab these four plugins are indeed loaded

306
00:12:48,079 --> 00:12:50,399
into the context of the main application

307
00:12:50,399 --> 00:12:51,279
so

308
00:12:51,279 --> 00:12:55,040
i um i i was then sure that yeah if i

309
00:12:55,040 --> 00:12:58,800
change this plugins if i uh

310
00:12:58,959 --> 00:13:00,399
you know alter the plugin with a

311
00:13:00,399 --> 00:13:03,120
malicious one it will be loaded probably

312
00:13:03,120 --> 00:13:05,360
to the context of the main application

313
00:13:05,360 --> 00:13:08,880
so after that i started uh you know

314
00:13:08,880 --> 00:13:12,000
using the directory utility uh

315
00:13:12,000 --> 00:13:16,320
and i uh so that it has access to

316
00:13:16,320 --> 00:13:20,000
uh changing the nfs home directory and

317
00:13:20,000 --> 00:13:22,160
you know i started thinking on how this

318
00:13:22,160 --> 00:13:25,360
could be abused and i immediately

319
00:13:25,360 --> 00:13:27,279
thought that the tcc

320
00:13:27,279 --> 00:13:30,720
uh has that per each user database right

321
00:13:30,720 --> 00:13:31,440
so

322
00:13:31,440 --> 00:13:33,360
the tcc has to

323
00:13:33,360 --> 00:13:35,519
somehow know where the

324
00:13:35,519 --> 00:13:38,000
user's home directory is in order to

325
00:13:38,000 --> 00:13:40,000
determine the

326
00:13:40,000 --> 00:13:42,720
the sqlite free database

327
00:13:42,720 --> 00:13:45,839
so i reversed the tcc daemon

328
00:13:45,839 --> 00:13:47,920
and yeah indeed it had the user home

329
00:13:47,920 --> 00:13:51,120
directory method and in the body of this

330
00:13:51,120 --> 00:13:54,399
method i saw that there it's using the

331
00:13:54,399 --> 00:13:58,079
get power uid function

332
00:13:58,079 --> 00:14:00,399
and this function uh

333
00:14:00,399 --> 00:14:02,720
has the home directory

334
00:14:02,720 --> 00:14:04,560
uh

335
00:14:04,560 --> 00:14:07,760
entity so i start thinking about

336
00:14:07,760 --> 00:14:08,880
yeah but

337
00:14:08,880 --> 00:14:09,920
where the

338
00:14:09,920 --> 00:14:12,399
the function gets the information from

339
00:14:12,399 --> 00:14:14,959
and in the man um

340
00:14:14,959 --> 00:14:17,440
you can read that it obtains information

341
00:14:17,440 --> 00:14:21,279
from open directory daemon so i was all

342
00:14:21,279 --> 00:14:24,639
my i was almost sure that uh if i

343
00:14:24,639 --> 00:14:28,000
changed it via the directory utility it

344
00:14:28,000 --> 00:14:30,320
will have it will have an influence on

345
00:14:30,320 --> 00:14:31,519
tcc

346
00:14:31,519 --> 00:14:32,240
so

347
00:14:32,240 --> 00:14:34,399
i confirmed that and

348
00:14:34,399 --> 00:14:37,040
here you can see that our exploitation

349
00:14:37,040 --> 00:14:40,160
uh scenario so at first point we have to

350
00:14:40,160 --> 00:14:42,320
copy the direct volatility that to a

351
00:14:42,320 --> 00:14:44,720
location that will not be protected by

352
00:14:44,720 --> 00:14:46,639
system integrity protection so we will

353
00:14:46,639 --> 00:14:48,639
be able to alter the plugin

354
00:14:48,639 --> 00:14:51,440
uh then we will inject a malicious

355
00:14:51,440 --> 00:14:53,760
plugin that will be executed in the

356
00:14:53,760 --> 00:14:56,800
directory utilities uh context where the

357
00:14:56,800 --> 00:15:00,320
of course the private tcc entitlement

358
00:15:00,320 --> 00:15:02,399
that that allowed us to modify the

359
00:15:02,399 --> 00:15:06,160
system admin files uh then we have to

360
00:15:06,160 --> 00:15:09,440
prepare a fake tcc sqlite free database

361
00:15:09,440 --> 00:15:12,639
with the fake permissions um

362
00:15:12,639 --> 00:15:15,440
after that we modified the nfs home

363
00:15:15,440 --> 00:15:18,079
directory so now it will be pointing to

364
00:15:18,079 --> 00:15:21,120
our fake location that tcc will resolve

365
00:15:21,120 --> 00:15:23,440
in the end to the fake database with the

366
00:15:23,440 --> 00:15:26,560
fake and the fake permissions and we

367
00:15:26,560 --> 00:15:29,839
then have to restart the tcc demon so it

368
00:15:29,839 --> 00:15:32,240
will load our fake database based on the

369
00:15:32,240 --> 00:15:36,000
new nfs home directory uh variable and

370
00:15:36,000 --> 00:15:38,560
of course we achieve the full tcc bypass

371
00:15:38,560 --> 00:15:39,440
so

372
00:15:39,440 --> 00:15:43,360
let's take a look on the demo

373
00:15:46,800 --> 00:15:48,880
we now we are now confirming that we

374
00:15:48,880 --> 00:15:53,880
don't have access to to the address book

375
00:15:54,560 --> 00:15:57,519
so now let's try to open the exploit it

376
00:15:57,519 --> 00:16:00,720
failed because we need root to uh to

377
00:16:00,720 --> 00:16:04,079
change this anova's home directory entry

378
00:16:04,079 --> 00:16:06,959
and as you can see uh it has been

379
00:16:06,959 --> 00:16:10,160
changed to another one

380
00:16:10,160 --> 00:16:10,959
now

381
00:16:10,959 --> 00:16:13,199
we have to restart the tcc to make sure

382
00:16:13,199 --> 00:16:16,160
that the new fade database will will be

383
00:16:16,160 --> 00:16:19,160
loaded

384
00:16:22,320 --> 00:16:25,440
and once again let's kill it to be 100

385
00:16:25,440 --> 00:16:26,959
sure it

386
00:16:26,959 --> 00:16:29,680
has to start

387
00:16:32,880 --> 00:16:35,279
and as you can see once again

388
00:16:35,279 --> 00:16:37,199
we now have access to the address book

389
00:16:37,199 --> 00:16:38,880
so yeah we have

390
00:16:38,880 --> 00:16:43,199
uh successfully exploited the tcc

391
00:16:43,199 --> 00:16:45,120
another example of

392
00:16:45,120 --> 00:16:49,279
tcc bypass via plugins is via core audio

393
00:16:49,279 --> 00:16:53,199
demon uh so i identified uh

394
00:16:53,199 --> 00:16:56,639
yet another like uh executable with uh

395
00:16:56,639 --> 00:16:59,600
suspicious permissions and curl out the

396
00:16:59,600 --> 00:17:01,519
demon uh had

397
00:17:01,519 --> 00:17:03,199
two suspicious permissions the first one

398
00:17:03,199 --> 00:17:06,400
was tccmanager that allowed to

399
00:17:06,400 --> 00:17:08,799
change the rules in the seed protected

400
00:17:08,799 --> 00:17:09,919
database

401
00:17:09,919 --> 00:17:12,240
and the second one was designing library

402
00:17:12,240 --> 00:17:13,679
validation so

403
00:17:13,679 --> 00:17:16,400
macas won't verify if the

404
00:17:16,400 --> 00:17:18,640
library was signed with us with the same

405
00:17:18,640 --> 00:17:19,760
certificate

406
00:17:19,760 --> 00:17:20,880
um

407
00:17:20,880 --> 00:17:22,559
so

408
00:17:22,559 --> 00:17:25,760
in this example uh the exploitations the

409
00:17:25,760 --> 00:17:28,240
exploitation scenario looks as follows

410
00:17:28,240 --> 00:17:30,240
so at first we create a malicious

411
00:17:30,240 --> 00:17:32,559
markers bundle with driver extension

412
00:17:32,559 --> 00:17:35,360
that will be our plugin uh we plant it

413
00:17:35,360 --> 00:17:38,960
in uh hull plugins directory restart the

414
00:17:38,960 --> 00:17:42,160
core auto demon and yeah once again we

415
00:17:42,160 --> 00:17:44,840
can fully control the tcc

416
00:17:44,840 --> 00:17:48,720
demon let's take a look on the code um

417
00:17:48,720 --> 00:17:51,919
so i didn't want to you know uh

418
00:17:51,919 --> 00:17:53,280
write a

419
00:17:53,280 --> 00:17:55,679
manually write all the code to

420
00:17:55,679 --> 00:17:56,559
uh

421
00:17:56,559 --> 00:17:59,200
that will change this permissions in

422
00:17:59,200 --> 00:18:03,520
that sqlite3 database so i decided to

423
00:18:03,520 --> 00:18:05,760
reverse the private tcc functions and i

424
00:18:05,760 --> 00:18:08,240
found one that will make this job for

425
00:18:08,240 --> 00:18:11,280
for me uh so i extended it and based on

426
00:18:11,280 --> 00:18:14,240
this function i gave the

427
00:18:14,240 --> 00:18:16,559
full disk access permission to the

428
00:18:16,559 --> 00:18:18,000
terminal

429
00:18:18,000 --> 00:18:19,120
so

430
00:18:19,120 --> 00:18:23,399
let's take a look on the demo

431
00:18:29,280 --> 00:18:31,520
we once again verify

432
00:18:31,520 --> 00:18:35,280
if we have access to the others book

433
00:18:35,280 --> 00:18:36,559
we don't have

434
00:18:36,559 --> 00:18:40,400
let's try if sudo has it no because as i

435
00:18:40,400 --> 00:18:43,600
told you before sudo doesn't make you a

436
00:18:43,600 --> 00:18:47,039
guard on macas but now let's try to open

437
00:18:47,039 --> 00:18:49,039
the exploit as you can see the terminal

438
00:18:49,039 --> 00:18:51,600
has appeared in the full disk access

439
00:18:51,600 --> 00:18:53,600
soup tab

440
00:18:53,600 --> 00:18:58,240
now we have to restart the terminal

441
00:18:59,120 --> 00:19:00,000
and

442
00:19:00,000 --> 00:19:02,000
let's now verify if we have access or

443
00:19:02,000 --> 00:19:05,000
not

444
00:19:14,080 --> 00:19:17,200
and wow we uh have access to the others

445
00:19:17,200 --> 00:19:18,799
book that means that

446
00:19:18,799 --> 00:19:22,840
we have yet again uh successfully found

447
00:19:22,840 --> 00:19:28,080
tcc all right so now let's go to the uh

448
00:19:28,080 --> 00:19:30,640
second group of vulnerabilities uh that

449
00:19:30,640 --> 00:19:34,160
tcc bypasses through process injections

450
00:19:34,160 --> 00:19:35,840
uh so

451
00:19:35,840 --> 00:19:38,960
we once again will be executing code in

452
00:19:38,960 --> 00:19:41,600
the context of the entitlement untitled

453
00:19:41,600 --> 00:19:42,799
application

454
00:19:42,799 --> 00:19:46,000
uh but you know usually as i told you on

455
00:19:46,000 --> 00:19:48,400
the system integrity protection slide we

456
00:19:48,400 --> 00:19:50,640
cannot inject our call to the apple

457
00:19:50,640 --> 00:19:52,799
signed apps but

458
00:19:52,799 --> 00:19:55,760
it's not 100 true uh there are

459
00:19:55,760 --> 00:19:58,480
exceptions and one of the one of the

460
00:19:58,480 --> 00:20:01,280
exceptions is the

461
00:20:01,280 --> 00:20:03,679
com apple security get desk allow

462
00:20:03,679 --> 00:20:06,400
entitlement that will allow us to get

463
00:20:06,400 --> 00:20:08,960
the task part of the

464
00:20:08,960 --> 00:20:11,840
remote application

465
00:20:11,840 --> 00:20:13,919
so

466
00:20:13,919 --> 00:20:16,480
i've identified that there is an exxon

467
00:20:16,480 --> 00:20:18,840
ctl

468
00:20:18,840 --> 00:20:21,919
executable that contains the private tcc

469
00:20:21,919 --> 00:20:25,039
entitlement and also has the get dusk

470
00:20:25,039 --> 00:20:27,200
allo uh

471
00:20:27,200 --> 00:20:30,400
an entitlement another suspicious one

472
00:20:30,400 --> 00:20:33,280
so in order to create a simple proof of

473
00:20:33,280 --> 00:20:35,600
concept i proved that

474
00:20:35,600 --> 00:20:37,520
if you uh

475
00:20:37,520 --> 00:20:40,320
inject via low level debugger to the

476
00:20:40,320 --> 00:20:42,320
excellent ctl

477
00:20:42,320 --> 00:20:45,039
it succee it succeeds so as you can see

478
00:20:45,039 --> 00:20:47,280
i

479
00:20:47,520 --> 00:20:49,520
tried to do back trace and this

480
00:20:49,520 --> 00:20:51,919
succeeded so yeah we have the task of

481
00:20:51,919 --> 00:20:52,640
the

482
00:20:52,640 --> 00:20:55,120
apple signed uh process with the private

483
00:20:55,120 --> 00:20:56,960
tcc entitlement so

484
00:20:56,960 --> 00:20:59,200
yeah yet again group of the of the

485
00:20:59,200 --> 00:21:02,960
vulnerabilities on how to bypass tcc and

486
00:21:02,960 --> 00:21:06,320
this group of vulnerabilities is uh

487
00:21:06,320 --> 00:21:09,760
especially problematic because

488
00:21:09,760 --> 00:21:12,400
a lot of third-party applications are

489
00:21:12,400 --> 00:21:14,159
vulnerable to

490
00:21:14,159 --> 00:21:17,520
process injection uh techniques uh

491
00:21:17,520 --> 00:21:18,559
attacks

492
00:21:18,559 --> 00:21:19,440
so

493
00:21:19,440 --> 00:21:20,960
if you download a third party

494
00:21:20,960 --> 00:21:23,600
application on your mac os and you give

495
00:21:23,600 --> 00:21:25,679
it the tc permissions

496
00:21:25,679 --> 00:21:29,440
you have to keep in mind that mother can

497
00:21:29,440 --> 00:21:31,120
abuse that application

498
00:21:31,120 --> 00:21:33,360
and

499
00:21:33,600 --> 00:21:35,520
you know the sad fact

500
00:21:35,520 --> 00:21:38,000
about it is that electron applications

501
00:21:38,000 --> 00:21:40,240
are vulnerable by default so yeah i'm

502
00:21:40,240 --> 00:21:41,760
sorry

503
00:21:41,760 --> 00:21:44,799
and we both with java we have found a

504
00:21:44,799 --> 00:21:47,039
lot of different vulnerabilities in

505
00:21:47,039 --> 00:21:49,200
different third-party applications you

506
00:21:49,200 --> 00:21:51,360
can see that firefox is still

507
00:21:51,360 --> 00:21:54,000
unfortunately vulnerable streamlabs obs

508
00:21:54,000 --> 00:21:57,039
signal snag lt but there were many many

509
00:21:57,039 --> 00:21:59,120
more first party applications

510
00:21:59,120 --> 00:22:00,400
if you are

511
00:22:00,400 --> 00:22:02,080
curious on how

512
00:22:02,080 --> 00:22:03,039
you can

513
00:22:03,039 --> 00:22:06,400
exploit the firefox i'm encouraging you

514
00:22:06,400 --> 00:22:07,360
to

515
00:22:07,360 --> 00:22:10,640
to read my blog post about it

516
00:22:10,640 --> 00:22:11,360
so

517
00:22:11,360 --> 00:22:13,919
i'm passing the microphone back to

518
00:22:13,919 --> 00:22:15,120
java

519
00:22:15,120 --> 00:22:17,919
okay so let's continue uh with the third

520
00:22:17,919 --> 00:22:20,320
group of um

521
00:22:20,320 --> 00:22:23,600
bypasses for tcc and that's those

522
00:22:23,600 --> 00:22:26,559
involve the mount operation uh in some

523
00:22:26,559 --> 00:22:28,000
way

524
00:22:28,000 --> 00:22:30,080
so the first vulnerability

525
00:22:30,080 --> 00:22:32,960
i want to cover i discovered last year

526
00:22:32,960 --> 00:22:36,960
and it involved the amount apfs

527
00:22:36,960 --> 00:22:39,200
utility which we can use to create

528
00:22:39,200 --> 00:22:42,400
snapshots so the apfs file system

529
00:22:42,400 --> 00:22:44,960
supports uh the snapshot feature uh

530
00:22:44,960 --> 00:22:46,960
which basically allows someone to make a

531
00:22:46,960 --> 00:22:48,480
snapshot of the

532
00:22:48,480 --> 00:22:51,039
file system and then if any

533
00:22:51,039 --> 00:22:53,600
uh changes happen later on

534
00:22:53,600 --> 00:22:55,679
those can be rolled back

535
00:22:55,679 --> 00:22:57,039
to the last known

536
00:22:57,039 --> 00:22:58,640
good

537
00:22:58,640 --> 00:23:00,880
or bad state basically

538
00:23:00,880 --> 00:23:02,880
but what we can do with these snapshots

539
00:23:02,880 --> 00:23:03,919
is

540
00:23:03,919 --> 00:23:06,320
we can mount them somewhere on the file

541
00:23:06,320 --> 00:23:08,080
system

542
00:23:08,080 --> 00:23:10,640
so we can create a directory for example

543
00:23:10,640 --> 00:23:12,080
temp snap

544
00:23:12,080 --> 00:23:15,679
and basically remount the entire

545
00:23:15,679 --> 00:23:18,000
snapshot and pass the file system into

546
00:23:18,000 --> 00:23:20,559
that location now snapshots are read

547
00:23:20,559 --> 00:23:23,360
only so they cannot be written to

548
00:23:23,360 --> 00:23:26,400
but we can still read every frag file

549
00:23:26,400 --> 00:23:28,880
uh through a snapshot and

550
00:23:28,880 --> 00:23:30,720
with us mounting it to a different

551
00:23:30,720 --> 00:23:31,919
location

552
00:23:31,919 --> 00:23:33,919
out of the standard

553
00:23:33,919 --> 00:23:37,120
what that means is that location will be

554
00:23:37,120 --> 00:23:39,679
outside of the scope of the dcc

555
00:23:39,679 --> 00:23:41,520
protection

556
00:23:41,520 --> 00:23:44,000
and we can access every user file

557
00:23:44,000 --> 00:23:46,159
through the snapshot

558
00:23:46,159 --> 00:23:47,840
but to make it worse

559
00:23:47,840 --> 00:23:51,120
we could use the no owner's flag

560
00:23:51,120 --> 00:23:53,200
during this mount operation which means

561
00:23:53,200 --> 00:23:54,960
that

562
00:23:54,960 --> 00:23:57,200
we can mount the snapshot

563
00:23:57,200 --> 00:24:00,240
the way that it will be seen as we are

564
00:24:00,240 --> 00:24:01,679
the owner

565
00:24:01,679 --> 00:24:04,159
of every file so if there are multiple

566
00:24:04,159 --> 00:24:06,559
users using the same

567
00:24:06,559 --> 00:24:09,200
mac os system for any reason basically

568
00:24:09,200 --> 00:24:11,679
what we get is read access to every

569
00:24:11,679 --> 00:24:14,480
other user's file

570
00:24:14,480 --> 00:24:17,600
this worked even with being a guest

571
00:24:17,600 --> 00:24:19,360
on the system

572
00:24:19,360 --> 00:24:20,960
now what apple did

573
00:24:20,960 --> 00:24:24,640
uh is they tied the snapshot mount

574
00:24:24,640 --> 00:24:27,440
operation to full disk access role

575
00:24:27,440 --> 00:24:28,640
um

576
00:24:28,640 --> 00:24:33,720
which basically meant it's pointless

577
00:24:34,240 --> 00:24:35,360
yeah

578
00:24:35,360 --> 00:24:38,000
but unfortunately it's not not a perfect

579
00:24:38,000 --> 00:24:39,120
fix

580
00:24:39,120 --> 00:24:42,000
because let's say we grant terminal full

581
00:24:42,000 --> 00:24:44,880
disk access because we need it and i

582
00:24:44,880 --> 00:24:46,960
think many power users

583
00:24:46,960 --> 00:24:49,120
do that

584
00:24:49,120 --> 00:24:51,039
what happens

585
00:24:51,039 --> 00:24:53,840
if a low privileged user or guest

586
00:24:53,840 --> 00:24:56,080
opens up terminal

587
00:24:56,080 --> 00:24:57,440
they can still

588
00:24:57,440 --> 00:24:59,840
perform the mount operation with knowner

589
00:24:59,840 --> 00:25:02,320
so they can still access other users

590
00:25:02,320 --> 00:25:04,080
file

591
00:25:04,080 --> 00:25:06,720
this is a problem but apple decided not

592
00:25:06,720 --> 00:25:08,240
to tackle

593
00:25:08,240 --> 00:25:10,400
that

594
00:25:10,400 --> 00:25:13,200
the other bug

595
00:25:13,520 --> 00:25:16,559
was fixed uh this year

596
00:25:16,559 --> 00:25:19,200
and it also involved mounting

597
00:25:19,200 --> 00:25:22,480
uh so we discussed that the the user tcc

598
00:25:22,480 --> 00:25:25,120
database file is located in the library

599
00:25:25,120 --> 00:25:28,080
application support com apple tcc

600
00:25:28,080 --> 00:25:31,679
directory there is a tcc.db

601
00:25:31,679 --> 00:25:33,840
database file

602
00:25:33,840 --> 00:25:34,880
inside

603
00:25:34,880 --> 00:25:38,240
now macos properly protects this file so

604
00:25:38,240 --> 00:25:40,080
we cannot read or

605
00:25:40,080 --> 00:25:42,400
or write into this file so we cannot

606
00:25:42,400 --> 00:25:45,360
modify it and add custom

607
00:25:45,360 --> 00:25:46,880
rules into that

608
00:25:46,880 --> 00:25:49,039
uh so that's good and we can't even

609
00:25:49,039 --> 00:25:52,320
modify the directory itself but

610
00:25:52,320 --> 00:25:54,720
we can mount over this directory which

611
00:25:54,720 --> 00:25:56,799
means

612
00:25:56,799 --> 00:25:59,360
we can create our own image

613
00:25:59,360 --> 00:26:02,320
create our own pcc database file

614
00:26:02,320 --> 00:26:05,120
and mount it over the com app.tcc

615
00:26:05,120 --> 00:26:08,880
directory restart dcc and at that point

616
00:26:08,880 --> 00:26:11,520
pcc we read our own file

617
00:26:11,520 --> 00:26:14,640
and that basically grants us a full dcc

618
00:26:14,640 --> 00:26:17,200
bypass

619
00:26:18,400 --> 00:26:22,400
and here's the demo of this

620
00:26:22,799 --> 00:26:24,880
showing first

621
00:26:24,880 --> 00:26:25,840
um

622
00:26:25,840 --> 00:26:27,360
that we don't have access to the

623
00:26:27,360 --> 00:26:29,919
documents folder from terminal

624
00:26:29,919 --> 00:26:31,120
and then

625
00:26:31,120 --> 00:26:32,320
we

626
00:26:32,320 --> 00:26:34,240
run our exploit

627
00:26:34,240 --> 00:26:36,640
which we perform this mounting

628
00:26:36,640 --> 00:26:38,559
and restart pcc

629
00:26:38,559 --> 00:26:40,880
and then we can list the documents

630
00:26:40,880 --> 00:26:44,880
folder so we gained access

631
00:26:46,720 --> 00:26:47,520
uh

632
00:26:47,520 --> 00:26:50,559
the third the fourth big group of dc

633
00:26:50,559 --> 00:26:52,480
bypasses

634
00:26:52,480 --> 00:26:55,360
involves some application behavior

635
00:26:55,360 --> 00:26:58,720
so on mac os as you saw there are

636
00:26:58,720 --> 00:27:00,960
many applications that can access

637
00:27:00,960 --> 00:27:03,120
private files because of their

638
00:27:03,120 --> 00:27:04,840
entitlements

639
00:27:04,840 --> 00:27:07,039
um and

640
00:27:07,039 --> 00:27:09,840
there are others that move files around

641
00:27:09,840 --> 00:27:11,120
when they

642
00:27:11,120 --> 00:27:12,880
perform some

643
00:27:12,880 --> 00:27:17,200
operations and some application to both

644
00:27:17,200 --> 00:27:18,840
so even if

645
00:27:18,840 --> 00:27:21,919
we cannot inject a code into this

646
00:27:21,919 --> 00:27:23,120
application

647
00:27:23,120 --> 00:27:25,919
because it's properly protected

648
00:27:25,919 --> 00:27:28,799
maybe we can convince it to move files

649
00:27:28,799 --> 00:27:32,320
for us to a location of our choice

650
00:27:32,320 --> 00:27:35,360
so what happens in this game we have two

651
00:27:35,360 --> 00:27:38,080
players the malicious application

652
00:27:38,080 --> 00:27:40,240
and an application which has access to

653
00:27:40,240 --> 00:27:42,240
private files

654
00:27:42,240 --> 00:27:44,480
uh so comes our application and

655
00:27:44,480 --> 00:27:46,720
discovers that hey

656
00:27:46,720 --> 00:27:48,399
the other application has access to

657
00:27:48,399 --> 00:27:50,000
private files

658
00:27:50,000 --> 00:27:54,000
uh yes and then our application will

659
00:27:54,000 --> 00:27:56,480
perform some operation and ask the other

660
00:27:56,480 --> 00:27:57,679
process

661
00:27:57,679 --> 00:28:00,640
uh to move those files to somewhere else

662
00:28:00,640 --> 00:28:02,399
and the other application

663
00:28:02,399 --> 00:28:03,200
will

664
00:28:03,200 --> 00:28:04,960
happily do that

665
00:28:04,960 --> 00:28:08,320
and we can be nice and thank

666
00:28:08,320 --> 00:28:11,200
him for that

667
00:28:11,760 --> 00:28:12,960
so

668
00:28:12,960 --> 00:28:14,880
the first

669
00:28:14,880 --> 00:28:17,120
vulnerability of such

670
00:28:17,120 --> 00:28:19,440
is related to the nodes

671
00:28:19,440 --> 00:28:21,120
application

672
00:28:21,120 --> 00:28:23,919
so the nodes application stores all of

673
00:28:23,919 --> 00:28:24,880
the

674
00:28:24,880 --> 00:28:26,000
nodes

675
00:28:26,000 --> 00:28:27,279
in a

676
00:28:27,279 --> 00:28:30,640
not tcc protected location so notes are

677
00:28:30,640 --> 00:28:35,360
not considered as a private uh documents

678
00:28:35,360 --> 00:28:36,720
by apple

679
00:28:36,720 --> 00:28:40,000
and what we can do is open a file with

680
00:28:40,000 --> 00:28:43,039
the nodes application and if it's a

681
00:28:43,039 --> 00:28:44,480
binary file

682
00:28:44,480 --> 00:28:46,240
the application will automatically

683
00:28:46,240 --> 00:28:47,760
attach it

684
00:28:47,760 --> 00:28:49,279
to a new node

685
00:28:49,279 --> 00:28:51,360
and this new node along with the

686
00:28:51,360 --> 00:28:53,760
attachment will be stored

687
00:28:53,760 --> 00:28:54,480
uh

688
00:28:54,480 --> 00:28:56,720
inside the nodes directory now we can

689
00:28:56,720 --> 00:28:57,520
see

690
00:28:57,520 --> 00:28:58,720
if we

691
00:28:58,720 --> 00:29:01,120
inspect the node's

692
00:29:01,120 --> 00:29:03,440
application entitlements that it has

693
00:29:03,440 --> 00:29:04,960
quite a few

694
00:29:04,960 --> 00:29:06,960
privacy exceptions it can access the

695
00:29:06,960 --> 00:29:10,799
address book calendar and the reminders

696
00:29:10,799 --> 00:29:13,919
so what we can do is basically

697
00:29:13,919 --> 00:29:16,559
uh open the

698
00:29:16,559 --> 00:29:18,880
the default or the main address book

699
00:29:18,880 --> 00:29:21,200
database with notes

700
00:29:21,200 --> 00:29:24,320
and as it's a binary file it's a sqlite

701
00:29:24,320 --> 00:29:27,120
database it will attach it to the nodes

702
00:29:27,120 --> 00:29:29,440
and then if we go to the library group

703
00:29:29,440 --> 00:29:32,640
containers group com upper nodes

704
00:29:32,640 --> 00:29:36,880
accounts we will find this file there

705
00:29:38,240 --> 00:29:42,720
the next uh vulnerability uh

706
00:29:42,720 --> 00:29:45,679
is concerning the app translocation uh

707
00:29:45,679 --> 00:29:46,720
service

708
00:29:46,720 --> 00:29:49,520
uh this can be could be also a mount

709
00:29:49,520 --> 00:29:50,880
related bug

710
00:29:50,880 --> 00:29:54,960
uh because it involves mounting as well

711
00:29:54,960 --> 00:29:58,720
but i classified it as a behavior

712
00:29:58,720 --> 00:30:01,279
stuff so the app translocation service

713
00:30:01,279 --> 00:30:04,320
was introduced by effort to fix the

714
00:30:04,320 --> 00:30:06,159
vulnerability

715
00:30:06,159 --> 00:30:08,080
found by patrick pardo to bypass

716
00:30:08,080 --> 00:30:10,080
gatekeeper and what it does if we

717
00:30:10,080 --> 00:30:11,200
download

718
00:30:11,200 --> 00:30:14,399
an application and run it

719
00:30:14,399 --> 00:30:16,480
from the downloads folder or from the

720
00:30:16,480 --> 00:30:19,039
folder where we downloaded it to for the

721
00:30:19,039 --> 00:30:20,640
very first time

722
00:30:20,640 --> 00:30:22,880
it will make a new fs mount of that

723
00:30:22,880 --> 00:30:24,159
application

724
00:30:24,159 --> 00:30:26,480
inside the temporary directory

725
00:30:26,480 --> 00:30:27,360
um

726
00:30:27,360 --> 00:30:29,440
an olefs mount basically means that it

727
00:30:29,440 --> 00:30:30,720
will map

728
00:30:30,720 --> 00:30:33,760
the application to another location uh

729
00:30:33,760 --> 00:30:35,679
on the file system and the entire

730
00:30:35,679 --> 00:30:38,480
directory structure

731
00:30:38,480 --> 00:30:39,520
under it

732
00:30:39,520 --> 00:30:41,440
uh the destination is typically in the

733
00:30:41,440 --> 00:30:44,399
temple app translocation slash d slash d

734
00:30:44,399 --> 00:30:47,360
and then the application name

735
00:30:47,360 --> 00:30:49,440
this library is actually open source in

736
00:30:49,440 --> 00:30:51,279
the security

737
00:30:51,279 --> 00:30:52,799
bundle and

738
00:30:52,799 --> 00:30:54,799
it's in the leap security translocate

739
00:30:54,799 --> 00:30:59,039
library and the binary responsible for

740
00:30:59,039 --> 00:31:03,440
translocation is the usr libex's lsd

741
00:31:03,440 --> 00:31:06,399
file now if we inspect its entitlements

742
00:31:06,399 --> 00:31:10,380
we find that once uh it has a new lefs

743
00:31:10,380 --> 00:31:11,440
[Music]

744
00:31:11,440 --> 00:31:13,360
entitlement it means that it can make an

745
00:31:13,360 --> 00:31:16,240
olefs mount actually this is the only

746
00:31:16,240 --> 00:31:18,320
application the entire system that is

747
00:31:18,320 --> 00:31:20,399
allowed to do no left

748
00:31:20,399 --> 00:31:21,600
mounts

749
00:31:21,600 --> 00:31:24,640
additionally it has also full disk

750
00:31:24,640 --> 00:31:26,720
access rights

751
00:31:26,720 --> 00:31:30,080
and it can access every file

752
00:31:30,080 --> 00:31:31,679
uh so what we do

753
00:31:31,679 --> 00:31:34,559
in this case to exploit this behavior we

754
00:31:34,559 --> 00:31:36,880
add a current in attribute to our

755
00:31:36,880 --> 00:31:39,840
library folder for example

756
00:31:39,840 --> 00:31:42,080
uh we can do it with other folders as

757
00:31:42,080 --> 00:31:43,919
well

758
00:31:43,919 --> 00:31:46,480
and then call the com apple security

759
00:31:46,480 --> 00:31:49,840
translocation xpc service and basically

760
00:31:49,840 --> 00:31:52,320
ask the translocation service to

761
00:31:52,320 --> 00:31:55,519
translocate the library folder and what

762
00:31:55,519 --> 00:31:59,440
it will do it will happily do that and

763
00:31:59,440 --> 00:32:02,240
map it to the 10d fts location dd

764
00:32:02,240 --> 00:32:03,360
library

765
00:32:03,360 --> 00:32:05,760
and through that mode sees that pass is

766
00:32:05,760 --> 00:32:08,559
not under pcc protection

767
00:32:08,559 --> 00:32:10,960
we can access again

768
00:32:10,960 --> 00:32:12,799
every private file

769
00:32:12,799 --> 00:32:14,559
again read only

770
00:32:14,559 --> 00:32:17,519
but it's uh it's a bypass

771
00:32:17,519 --> 00:32:20,399
uh here we can see a snippet of the

772
00:32:20,399 --> 00:32:23,039
exploit uh so we first get the home

773
00:32:23,039 --> 00:32:24,799
directory location and the temp

774
00:32:24,799 --> 00:32:28,880
directory location we build our paths uh

775
00:32:28,880 --> 00:32:31,279
that is required for the

776
00:32:31,279 --> 00:32:34,880
xpc service we populate an xpc

777
00:32:34,880 --> 00:32:35,760
uh

778
00:32:35,760 --> 00:32:38,399
message a dictionary and then we pass

779
00:32:38,399 --> 00:32:41,840
this message uh to the max service

780
00:32:41,840 --> 00:32:45,200
because of the translocation

781
00:32:45,200 --> 00:32:48,080
services open source uh it was actually

782
00:32:48,080 --> 00:32:50,960
quite easy to build this up because

783
00:32:50,960 --> 00:32:54,000
there is a next pc client and

784
00:32:54,000 --> 00:32:55,679
i could use that

785
00:32:55,679 --> 00:32:59,200
now here is demo of this

786
00:32:59,200 --> 00:33:02,000
exploit so we will

787
00:33:02,000 --> 00:33:04,399
try to list the messages with a folder

788
00:33:04,399 --> 00:33:07,120
which contains the imessages of the user

789
00:33:07,120 --> 00:33:08,840
which is protected by

790
00:33:08,840 --> 00:33:11,519
privacy and then we will run our

791
00:33:11,519 --> 00:33:14,159
translocation exploit and we can see

792
00:33:14,159 --> 00:33:15,760
it's mapped

793
00:33:15,760 --> 00:33:17,200
to this long

794
00:33:17,200 --> 00:33:18,640
directory

795
00:33:18,640 --> 00:33:21,519
and if if we take it

796
00:33:21,519 --> 00:33:23,279
and check the messages

797
00:33:23,279 --> 00:33:25,200
we will see that the

798
00:33:25,200 --> 00:33:28,159
database is available for us which

799
00:33:28,159 --> 00:33:30,960
contains the messages

800
00:33:30,960 --> 00:33:32,399
now the other

801
00:33:32,399 --> 00:33:35,519
the last big group

802
00:33:35,519 --> 00:33:38,080
is not really a bypass it's more like

803
00:33:38,080 --> 00:33:40,559
leaks

804
00:33:40,799 --> 00:33:43,760
basically apple though that private info

805
00:33:43,760 --> 00:33:45,360
is located only on these certain

806
00:33:45,360 --> 00:33:47,440
locations like the address book folder

807
00:33:47,440 --> 00:33:50,159
the messages folder the documents folder

808
00:33:50,159 --> 00:33:51,279
and so on

809
00:33:51,279 --> 00:33:54,000
it turned out that it's not true so

810
00:33:54,000 --> 00:33:56,320
private information or bits of

811
00:33:56,320 --> 00:33:59,279
information are all around

812
00:33:59,279 --> 00:34:01,279
the file system

813
00:34:01,279 --> 00:34:05,200
so how to find this uh just grab around

814
00:34:05,200 --> 00:34:07,519
so what i did i grip for an email

815
00:34:07,519 --> 00:34:08,879
address i

816
00:34:08,879 --> 00:34:11,359
grabbed for a phone number some imessage

817
00:34:11,359 --> 00:34:14,159
content or email content inside my

818
00:34:14,159 --> 00:34:15,760
entire library

819
00:34:15,760 --> 00:34:16,960
and

820
00:34:16,960 --> 00:34:19,280
and there were multiple results

821
00:34:19,280 --> 00:34:21,760
of this which resulted in plenty of

822
00:34:21,760 --> 00:34:24,719
inner colleagues so sometimes it falls

823
00:34:24,719 --> 00:34:28,000
as simple as file names

824
00:34:28,000 --> 00:34:30,399
but that's considered as a private info

825
00:34:30,399 --> 00:34:34,159
so these are resulted in in the cvs

826
00:34:34,159 --> 00:34:36,960
in some cases uh i found contact

827
00:34:36,960 --> 00:34:38,320
information

828
00:34:38,320 --> 00:34:41,580
with phone numbers email addresses

829
00:34:41,580 --> 00:34:42,960
[Music]

830
00:34:42,960 --> 00:34:45,199
in some cases it was family contacts

831
00:34:45,199 --> 00:34:48,879
with their birth date and also the

832
00:34:48,879 --> 00:34:50,719
probably the knowledge c

833
00:34:50,719 --> 00:34:53,040
uh database was the more

834
00:34:53,040 --> 00:34:55,760
the most fruitful because it contained

835
00:34:55,760 --> 00:34:58,720
full imessages contact information and

836
00:34:58,720 --> 00:34:59,760
so on

837
00:34:59,760 --> 00:35:01,440
uh interestingly the current end

838
00:35:01,440 --> 00:35:04,000
database which contained the full

839
00:35:04,000 --> 00:35:05,520
download history

840
00:35:05,520 --> 00:35:08,000
back to really long time effort didn't

841
00:35:08,000 --> 00:35:10,480
considered it as a private info so they

842
00:35:10,480 --> 00:35:12,880
said that that won't be fixed

843
00:35:12,880 --> 00:35:13,839
um

844
00:35:13,839 --> 00:35:17,040
although it can still reveal quite a few

845
00:35:17,040 --> 00:35:19,680
information of what size you visited

846
00:35:19,680 --> 00:35:22,320
download it from and and so on

847
00:35:22,320 --> 00:35:23,839
and these are

848
00:35:23,839 --> 00:35:25,680
the ones that were fixed but there are

849
00:35:25,680 --> 00:35:27,359
more to come actually

850
00:35:27,359 --> 00:35:29,040
in the upcoming more

851
00:35:29,040 --> 00:35:31,839
months

852
00:35:31,920 --> 00:35:33,040
so

853
00:35:33,040 --> 00:35:35,200
as as a closure

854
00:35:35,200 --> 00:35:37,760
uh let's also talk about apple's

855
00:35:37,760 --> 00:35:40,480
security bounty program

856
00:35:40,480 --> 00:35:43,200
so they actually have a category for

857
00:35:43,200 --> 00:35:46,240
privacy bypasses

858
00:35:46,240 --> 00:35:48,560
which can range from

859
00:35:48,560 --> 00:35:52,720
25k for small long small amount of leaks

860
00:35:52,720 --> 00:35:53,680
up to

861
00:35:53,680 --> 00:35:55,520
100 000

862
00:35:55,520 --> 00:35:57,520
usd for

863
00:35:57,520 --> 00:35:59,680
major bypasses

864
00:35:59,680 --> 00:36:02,560
we can't reveal exact payouts but these

865
00:36:02,560 --> 00:36:04,320
numbers are

866
00:36:04,320 --> 00:36:06,480
pretty much correct

867
00:36:06,480 --> 00:36:08,720
um

868
00:36:08,720 --> 00:36:12,880
so apple is really fair in this

869
00:36:12,880 --> 00:36:14,640
in these terms

870
00:36:14,640 --> 00:36:16,800
uh unfortunately that's

871
00:36:16,800 --> 00:36:18,400
probably the only

872
00:36:18,400 --> 00:36:19,359
good

873
00:36:19,359 --> 00:36:21,359
point of the program

874
00:36:21,359 --> 00:36:22,160
uh

875
00:36:22,160 --> 00:36:23,839
they are really fair and they will pay

876
00:36:23,839 --> 00:36:25,760
what is promised

877
00:36:25,760 --> 00:36:28,480
but bug fixes are often really slow

878
00:36:28,480 --> 00:36:30,000
especially if it's

879
00:36:30,000 --> 00:36:32,560
more like a design issue

880
00:36:32,560 --> 00:36:34,720
sometimes they can

881
00:36:34,720 --> 00:36:37,920
range from

882
00:36:37,920 --> 00:36:40,079
being fixed in two years so there are

883
00:36:40,079 --> 00:36:42,240
some boxes reported in catalina and

884
00:36:42,240 --> 00:36:44,560
we'll be only fixing one array

885
00:36:44,560 --> 00:36:45,599
um

886
00:36:45,599 --> 00:36:47,520
there is a lack of communication so

887
00:36:47,520 --> 00:36:50,000
often it feels that he sent them an

888
00:36:50,000 --> 00:36:51,599
email and no one

889
00:36:51,599 --> 00:36:52,960
reads that

890
00:36:52,960 --> 00:36:54,880
hopefully that's not true

891
00:36:54,880 --> 00:36:57,119
but it would be nice to get some

892
00:36:57,119 --> 00:37:00,000
feedback uh more often

893
00:37:00,000 --> 00:37:02,960
uh probably the first part is the actual

894
00:37:02,960 --> 00:37:04,160
decision

895
00:37:04,160 --> 00:37:06,320
uh for the reward

896
00:37:06,320 --> 00:37:09,280
which can take really really long time

897
00:37:09,280 --> 00:37:11,760
over seven months uh both of us have

898
00:37:11,760 --> 00:37:13,920
vulnerabilities that were fixed with the

899
00:37:13,920 --> 00:37:16,320
release of pixar

900
00:37:16,320 --> 00:37:20,079
and st not decided if uh

901
00:37:20,079 --> 00:37:23,680
if we get a reward or not

902
00:37:23,680 --> 00:37:25,599
so as a conclusion

903
00:37:25,599 --> 00:37:28,480
uh for the entire talk um

904
00:37:28,480 --> 00:37:31,599
we think that the the entire effort with

905
00:37:31,599 --> 00:37:34,400
the privacy protection is is really good

906
00:37:34,400 --> 00:37:37,520
uh and it's way beyond many other os's

907
00:37:37,520 --> 00:37:40,320
that don't do that and it's a step in

908
00:37:40,320 --> 00:37:42,560
the right direction so others should do

909
00:37:42,560 --> 00:37:43,680
the same

910
00:37:43,680 --> 00:37:46,480
uh still there are lots of issues uh

911
00:37:46,480 --> 00:37:50,480
around that but uh luckily apple is

912
00:37:50,480 --> 00:37:53,119
fixing all of these

913
00:37:53,119 --> 00:37:55,760
and takes it seriously now probably one

914
00:37:55,760 --> 00:37:58,240
of the major issue is that too many

915
00:37:58,240 --> 00:38:00,079
upper binaries have

916
00:38:00,079 --> 00:38:02,320
exceptions

917
00:38:02,320 --> 00:38:04,400
to access private data

918
00:38:04,400 --> 00:38:08,480
which opens up the the road for abuses

919
00:38:08,480 --> 00:38:10,960
and the other big issue is that many

920
00:38:10,960 --> 00:38:13,359
many third-party application

921
00:38:13,359 --> 00:38:15,359
especially electron application are

922
00:38:15,359 --> 00:38:17,440
winner with injection attacks so if

923
00:38:17,440 --> 00:38:19,520
those applications have access to

924
00:38:19,520 --> 00:38:24,480
private resources then any attacker can

925
00:38:24,640 --> 00:38:26,960
access those private resources

926
00:38:26,960 --> 00:38:30,320
and the asb program

927
00:38:30,320 --> 00:38:33,720
have to improve

928
00:38:34,160 --> 00:38:36,960
so thank you for listening to our talk

929
00:38:36,960 --> 00:38:38,240
and

930
00:38:38,240 --> 00:38:40,320
we will be available for question

931
00:38:40,320 --> 00:38:42,880
answers

932
00:38:43,440 --> 00:38:44,839
in another

933
00:38:44,839 --> 00:38:47,680
channel yeah thank you for listening to

934
00:38:47,680 --> 00:38:50,680
us

