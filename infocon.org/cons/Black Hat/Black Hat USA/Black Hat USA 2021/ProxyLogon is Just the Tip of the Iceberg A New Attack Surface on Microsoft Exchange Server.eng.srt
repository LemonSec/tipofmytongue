1
00:00:01,130 --> 00:00:14,699
[Music]

2
00:00:20,400 --> 00:00:21,199
hi

3
00:00:21,199 --> 00:00:23,760
it's good to be back thank you all for

4
00:00:23,760 --> 00:00:25,680
being here

5
00:00:25,680 --> 00:00:28,720
without doubt microsoft exchange server

6
00:00:28,720 --> 00:00:31,439
is the most widely deployed mail

7
00:00:31,439 --> 00:00:34,000
solution within governments and

8
00:00:34,000 --> 00:00:35,600
enterprises

9
00:00:35,600 --> 00:00:38,399
it is an integration of their daily

10
00:00:38,399 --> 00:00:41,760
operations and security

11
00:00:41,760 --> 00:00:45,079
this january we report a series of

12
00:00:45,079 --> 00:00:46,719
vulnerabilities

13
00:00:46,719 --> 00:00:49,280
exchange server to microsoft

14
00:00:49,280 --> 00:00:52,719
and name it as proxy logon if you are

15
00:00:52,719 --> 00:00:55,920
paying attention to the industry news

16
00:00:55,920 --> 00:00:59,280
you must have heard this name

17
00:00:59,280 --> 00:01:01,920
prasiologan may be the most severe

18
00:01:01,920 --> 00:01:04,799
vulnerability in the exchange history

19
00:01:04,799 --> 00:01:06,400
ever

20
00:01:06,400 --> 00:01:09,439
however as we went into deep dive on

21
00:01:09,439 --> 00:01:11,119
proxy logong

22
00:01:11,119 --> 00:01:14,159
it came to us that it is not just a

23
00:01:14,159 --> 00:01:15,360
single bug

24
00:01:15,360 --> 00:01:18,560
but a whole new attack service to help

25
00:01:18,560 --> 00:01:20,960
researchers to uncover more

26
00:01:20,960 --> 00:01:23,840
vulnerabilities

27
00:01:23,840 --> 00:01:26,240
to unveil the beauty of this attack

28
00:01:26,240 --> 00:01:28,960
service we will start from explaining

29
00:01:28,960 --> 00:01:30,720
the architecture

30
00:01:30,720 --> 00:01:34,000
analyzing the root cause and ending up

31
00:01:34,000 --> 00:01:38,159
with any vulnerabilities we found

32
00:01:38,159 --> 00:01:40,720
by understanding the basics of this new

33
00:01:40,720 --> 00:01:42,320
attack service

34
00:01:42,320 --> 00:01:45,439
you won't be surprised why we can pop

35
00:01:45,439 --> 00:01:49,199
all your desks easily

36
00:01:50,560 --> 00:01:53,280
let me introduce myself first

37
00:01:53,280 --> 00:01:55,759
i'm orange and now the principal

38
00:01:55,759 --> 00:01:59,360
security researcher at deathcore

39
00:01:59,360 --> 00:02:02,079
i'm a theodore researcher and focusing

40
00:02:02,079 --> 00:02:05,680
on web and application security

41
00:02:05,680 --> 00:02:08,560
my job is to find out the most severe

42
00:02:08,560 --> 00:02:11,360
vulnerabilities that can impact the

43
00:02:11,360 --> 00:02:14,720
world ahead of the bad guys and report

44
00:02:14,720 --> 00:02:18,720
them to the vendors directly

45
00:02:18,720 --> 00:02:22,400
apart from that and also a speaker ctf

46
00:02:22,400 --> 00:02:26,080
player and buck bounty hunter

47
00:02:26,080 --> 00:02:29,599
i got several awards from my researchers

48
00:02:29,599 --> 00:02:32,800
such as the pony awards and the champion

49
00:02:32,800 --> 00:02:35,680
of pong to all

50
00:02:35,680 --> 00:02:38,160
if you are interested welcome to follow

51
00:02:38,160 --> 00:02:41,840
my twitter and blog

52
00:02:43,519 --> 00:02:45,840
before i get started here is the

53
00:02:45,840 --> 00:02:47,440
disclaimer

54
00:02:47,440 --> 00:02:50,480
all the cvs mentioned today have been

55
00:02:50,480 --> 00:02:52,800
reported responsibly

56
00:02:52,800 --> 00:02:57,440
and have been patched by microsoft

57
00:02:59,760 --> 00:03:04,000
so why were we targeting exchange server

58
00:03:04,000 --> 00:03:07,280
in terms of enterprise security

59
00:03:07,280 --> 00:03:10,640
mail servers are high value assets since

60
00:03:10,640 --> 00:03:12,959
they are the place to keep corporate

61
00:03:12,959 --> 00:03:15,040
confidentials

62
00:03:15,040 --> 00:03:17,920
with that being said if someone controls

63
00:03:17,920 --> 00:03:20,560
the mail server they can dominate the

64
00:03:20,560 --> 00:03:23,920
lifeline of the corporation

65
00:03:23,920 --> 00:03:26,560
exchange server is the most well-known

66
00:03:26,560 --> 00:03:29,840
and important mail solution in the world

67
00:03:29,840 --> 00:03:32,799
with this in mind exchange has also been

68
00:03:32,799 --> 00:03:36,159
the top target for nation stat acres for

69
00:03:36,159 --> 00:03:38,720
a long time

70
00:03:38,720 --> 00:03:41,120
based on our research there are more

71
00:03:41,120 --> 00:03:44,480
than 400 thousands exchange servers

72
00:03:44,480 --> 00:03:46,959
exposed on the internet

73
00:03:46,959 --> 00:03:50,159
every server represents a company you

74
00:03:50,159 --> 00:03:53,840
can imagine how severe it could be when

75
00:03:53,840 --> 00:03:56,080
there is a critical vulnerability on

76
00:03:56,080 --> 00:03:59,720
exchange server

77
00:04:00,400 --> 00:04:03,280
i will review the existing papers and

78
00:04:03,280 --> 00:04:06,319
box before starting a research

79
00:04:06,319 --> 00:04:09,200
another whole exchange history is there

80
00:04:09,200 --> 00:04:12,239
any interesting bug

81
00:04:12,239 --> 00:04:15,519
of course also most bugs are based on

82
00:04:15,519 --> 00:04:18,000
known attack service such as the

83
00:04:18,000 --> 00:04:21,440
visualization or input validation

84
00:04:21,440 --> 00:04:24,000
there are several bugs that are worth

85
00:04:24,000 --> 00:04:25,919
mentioning

86
00:04:25,919 --> 00:04:28,720
the most special one is the arsenal from

87
00:04:28,720 --> 00:04:31,919
equation group in 2017

88
00:04:31,919 --> 00:04:34,600
is the only practical and public

89
00:04:34,600 --> 00:04:38,960
pre-osrce in the exchange history

90
00:04:38,960 --> 00:04:41,919
unfortunately the arsenal only works on

91
00:04:41,919 --> 00:04:44,720
an ancient exchange server

92
00:04:44,720 --> 00:04:47,680
if the arsenal league happened earlier

93
00:04:47,680 --> 00:04:50,800
it could lead to another nuclear labor

94
00:04:50,800 --> 00:04:52,560
crisis

95
00:04:52,560 --> 00:04:54,720
among all i would say the most

96
00:04:54,720 --> 00:05:00,320
surprising one is cve 2020 real 6aa

97
00:05:00,320 --> 00:05:03,360
the nature of this stock is a hard code

98
00:05:03,360 --> 00:05:04,960
crypto key

99
00:05:04,960 --> 00:05:08,080
this also shows that exchange is latin

100
00:05:08,080 --> 00:05:11,719
security review

101
00:05:11,759 --> 00:05:15,039
it's 2020 now such a common weakness

102
00:05:15,039 --> 00:05:17,360
could still be fine in a crucial

103
00:05:17,360 --> 00:05:18,800
software

104
00:05:18,800 --> 00:05:21,680
which inspired me to dig more into the

105
00:05:21,680 --> 00:05:25,840
security of exchange

106
00:05:28,240 --> 00:05:30,479
so what have we done

107
00:05:30,479 --> 00:05:33,520
we have reviewed exchange security from

108
00:05:33,520 --> 00:05:36,880
the architectural levels and find a new

109
00:05:36,880 --> 00:05:39,120
attack service

110
00:05:39,120 --> 00:05:41,520
through this new attack service we

111
00:05:41,520 --> 00:05:44,880
uncovered a vulnerabilities and trained

112
00:05:44,880 --> 00:05:49,919
this bugs into three attacking exploits

113
00:05:49,919 --> 00:05:52,639
the first and the most famous one is

114
00:05:52,639 --> 00:05:54,320
proxy logo

115
00:05:54,320 --> 00:05:57,280
it's a pre-os rce

116
00:05:57,280 --> 00:06:00,199
the second one is proxy oracle

117
00:06:00,199 --> 00:06:03,840
xnx3 that can recover any user's

118
00:06:03,840 --> 00:06:07,440
password in plain text format

119
00:06:07,440 --> 00:06:10,080
the last one is the proxy show

120
00:06:10,080 --> 00:06:15,039
extra x3 we demonstrate at pong2 on 2021

121
00:06:15,039 --> 00:06:19,199
it's also a pre-os rce

122
00:06:19,440 --> 00:06:22,240
i would like to highlight that all the

123
00:06:22,240 --> 00:06:25,680
abilities we've uncovered here are logic

124
00:06:25,680 --> 00:06:26,960
box

125
00:06:26,960 --> 00:06:29,840
which means they could be reproduced and

126
00:06:29,840 --> 00:06:32,400
exploited easily than any memory

127
00:06:32,400 --> 00:06:35,840
corruption box

128
00:06:36,880 --> 00:06:38,960
here is my bath list

129
00:06:38,960 --> 00:06:41,759
the ones in red indicates the bug is

130
00:06:41,759 --> 00:06:45,600
related to the attack service directly

131
00:06:45,600 --> 00:06:48,000
and others are the bugs we chant

132
00:06:48,000 --> 00:06:49,520
together

133
00:06:49,520 --> 00:06:52,560
besides note that we report one more bug

134
00:06:52,560 --> 00:06:54,319
in june

135
00:06:54,319 --> 00:06:56,960
since the bug is still patchy we will

136
00:06:56,960 --> 00:07:01,719
not share its detail today

137
00:07:02,400 --> 00:07:05,440
for your references there are other bugs

138
00:07:05,440 --> 00:07:08,479
relate to this attack service

139
00:07:08,479 --> 00:07:11,759
you can see from this table an essay and

140
00:07:11,759 --> 00:07:14,479
nations that hackers are also playing

141
00:07:14,479 --> 00:07:15,360
that

142
00:07:15,360 --> 00:07:18,240
which means the attack service we share

143
00:07:18,240 --> 00:07:21,360
today is a critical hit for exchange

144
00:07:21,360 --> 00:07:23,759
server

145
00:07:24,080 --> 00:07:26,560
exchange is a very sophisticated

146
00:07:26,560 --> 00:07:28,240
application

147
00:07:28,240 --> 00:07:30,639
before we cut to the chest let me

148
00:07:30,639 --> 00:07:34,000
introduce the architecture first

149
00:07:34,000 --> 00:07:37,280
since 2000 exchange has released a new

150
00:07:37,280 --> 00:07:40,160
version every three years

151
00:07:40,160 --> 00:07:43,759
whenever exchange released a new version

152
00:07:43,759 --> 00:07:46,479
the architecture changes a lot and

153
00:07:46,479 --> 00:07:49,360
becomes different

154
00:07:49,360 --> 00:07:51,440
the change of architecture and

155
00:07:51,440 --> 00:07:54,960
iterations make it difficult to upgrade

156
00:07:54,960 --> 00:07:57,440
an exchange server

157
00:07:57,440 --> 00:08:00,240
in order to ensure the compatibility

158
00:08:00,240 --> 00:08:02,639
between the new architecture and old

159
00:08:02,639 --> 00:08:03,759
ones

160
00:08:03,759 --> 00:08:06,960
several design depths were incurred and

161
00:08:06,960 --> 00:08:12,440
led to the new attack service we found

162
00:08:13,360 --> 00:08:15,599
so where did we focus

163
00:08:15,599 --> 00:08:18,560
we focused on the client access service

164
00:08:18,560 --> 00:08:20,400
cls

165
00:08:20,400 --> 00:08:23,440
cs is a fundamental component in

166
00:08:23,440 --> 00:08:24,960
exchange

167
00:08:24,960 --> 00:08:28,319
the official document indicates cas is a

168
00:08:28,319 --> 00:08:31,039
phone and that accepts client

169
00:08:31,039 --> 00:08:33,919
connections for all protocol

170
00:08:33,919 --> 00:08:37,360
and responsible for routing and proxy in

171
00:08:37,360 --> 00:08:40,360
connections

172
00:08:40,559 --> 00:08:43,360
was framed with paid attention to

173
00:08:43,360 --> 00:08:47,200
and further attack service existed

174
00:08:47,200 --> 00:08:50,320
because the cs is located at a very

175
00:08:50,320 --> 00:08:53,040
early state of exchange request

176
00:08:53,040 --> 00:08:54,399
processing

177
00:08:54,399 --> 00:08:57,920
all bugs here are authentication free

178
00:08:57,920 --> 00:09:01,360
you can imagine how dangerous it is when

179
00:09:01,360 --> 00:09:06,160
this fundamental service is vulnerable

180
00:09:07,600 --> 00:09:10,720
here is the cns architecture copied from

181
00:09:10,720 --> 00:09:12,480
the document

182
00:09:12,480 --> 00:09:14,959
as you can see the left side is the

183
00:09:14,959 --> 00:09:16,320
client

184
00:09:16,320 --> 00:09:18,880
no matter where the connect connection

185
00:09:18,880 --> 00:09:25,519
comes from either http pop3 imap or sntp

186
00:09:25,519 --> 00:09:28,640
cs in the middle part process all

187
00:09:28,640 --> 00:09:31,760
connections and proxies to the backend

188
00:09:31,760 --> 00:09:34,720
service on the right side

189
00:09:34,720 --> 00:09:37,040
the backend service will continue to

190
00:09:37,040 --> 00:09:41,279
handle further business logics

191
00:09:42,480 --> 00:09:45,839
because i specialize in web security so

192
00:09:45,839 --> 00:09:50,120
it works on the web part

193
00:09:51,279 --> 00:09:56,080
the cns web is built on microsoft iis

194
00:09:56,080 --> 00:09:58,959
as you can see there are two websites

195
00:09:58,959 --> 00:10:00,959
inside the iis

196
00:10:00,959 --> 00:10:03,600
the default website is the front end we

197
00:10:03,600 --> 00:10:05,360
mentioned before

198
00:10:05,360 --> 00:10:07,839
and the exchange backhand is where the

199
00:10:07,839 --> 00:10:11,360
business logic is

200
00:10:13,360 --> 00:10:15,440
if you look at the configuration

201
00:10:15,440 --> 00:10:18,480
carefully you will notice the front end

202
00:10:18,480 --> 00:10:22,640
is listening on post 80 and 443 and the

203
00:10:22,640 --> 00:10:26,079
backhand is listening on the post 81 and

204
00:10:26,079 --> 00:10:27,839
444

205
00:10:27,839 --> 00:10:30,320
it should be note that the posts are

206
00:10:30,320 --> 00:10:34,079
exposed on all interfaces

207
00:10:34,079 --> 00:10:36,800
you may sense something wrong here

208
00:10:36,800 --> 00:10:40,720
all the posts are open to all interfaces

209
00:10:40,720 --> 00:10:43,360
which means you can access the backhand

210
00:10:43,360 --> 00:10:47,440
directly wouldn't it be dangerous

211
00:10:47,440 --> 00:10:50,240
please keep this question in mind and we

212
00:10:50,240 --> 00:10:54,000
will answer that later

213
00:10:54,640 --> 00:10:59,360
the cs is composed of several is modules

214
00:10:59,360 --> 00:11:02,000
applications in front-end include the

215
00:11:02,000 --> 00:11:05,200
proxy module which is responsible for

216
00:11:05,200 --> 00:11:08,160
passing all incoming requests

217
00:11:08,160 --> 00:11:11,040
applying protocol-specific settings

218
00:11:11,040 --> 00:11:14,560
and forwarding them to the backend

219
00:11:14,560 --> 00:11:17,360
as for the backhand applications include

220
00:11:17,360 --> 00:11:19,440
a rehydration module

221
00:11:19,440 --> 00:11:22,399
which is taking charge of passing from

222
00:11:22,399 --> 00:11:23,920
any class

223
00:11:23,920 --> 00:11:26,640
populating the client information back

224
00:11:26,640 --> 00:11:30,399
and continue the business logic

225
00:11:30,399 --> 00:11:32,880
here is a question for you

226
00:11:32,880 --> 00:11:35,760
how did the front end and backhand

227
00:11:35,760 --> 00:11:38,880
exchange the information

228
00:11:38,880 --> 00:11:41,600
let's synchronize the information and

229
00:11:41,600 --> 00:11:46,320
internal status http haters

230
00:11:47,360 --> 00:11:50,160
for a client request it will first be

231
00:11:50,160 --> 00:11:53,279
handled by the front end and the request

232
00:11:53,279 --> 00:11:55,839
will be passed through several is

233
00:11:55,839 --> 00:12:00,160
modules such as the filter validation

234
00:12:00,160 --> 00:12:03,920
logging and the last proxy module

235
00:12:03,920 --> 00:12:07,120
the proxy module then picks up a handler

236
00:12:07,120 --> 00:12:09,920
based on the current application paths

237
00:12:09,920 --> 00:12:14,800
such as the slash owa and slash ecp

238
00:12:14,800 --> 00:12:17,760
the handler will do the proxy work and

239
00:12:17,760 --> 00:12:21,600
forward the request to the backend

240
00:12:21,600 --> 00:12:24,560
when the backend receives the request it

241
00:12:24,560 --> 00:12:27,519
passes the request to the rehydration

242
00:12:27,519 --> 00:12:30,160
module to restore the original client

243
00:12:30,160 --> 00:12:35,279
set and continue the business logics

244
00:12:36,720 --> 00:12:39,279
so our idea is simple

245
00:12:39,279 --> 00:12:41,279
could we access the backend

246
00:12:41,279 --> 00:12:43,680
intentionally

247
00:12:43,680 --> 00:12:45,760
since the exchange synchronized the

248
00:12:45,760 --> 00:12:49,519
information by http haters and it seems

249
00:12:49,519 --> 00:12:52,480
like most of the assets control is done

250
00:12:52,480 --> 00:12:54,320
by the front end

251
00:12:54,320 --> 00:12:56,880
if we can access the backhand result

252
00:12:56,880 --> 00:12:59,680
restrictions maybe there are several

253
00:12:59,680 --> 00:13:03,600
internal apis we can abuse

254
00:13:03,600 --> 00:13:06,320
we all know implementing a proxy isn't

255
00:13:06,320 --> 00:13:07,440
easy

256
00:13:07,440 --> 00:13:09,760
and the front end things like a real

257
00:13:09,760 --> 00:13:12,720
increment http client

258
00:13:12,720 --> 00:13:15,519
if there are some magic tricks to

259
00:13:15,519 --> 00:13:18,000
manipulate the contacts between the

260
00:13:18,000 --> 00:13:23,360
front end and backhand it must be fun

261
00:13:24,560 --> 00:13:27,440
in order to abuse the contacts we have

262
00:13:27,440 --> 00:13:31,760
to know how the proxy module works first

263
00:13:31,760 --> 00:13:34,720
the proxy request handler is the most

264
00:13:34,720 --> 00:13:37,600
important part of the front end

265
00:13:37,600 --> 00:13:41,040
all handlers should inherit this class

266
00:13:41,040 --> 00:13:44,560
to implement their messages such as how

267
00:13:44,560 --> 00:13:47,760
to handle the client cookies and

268
00:13:47,760 --> 00:13:51,120
and how to proxy the client request to

269
00:13:51,120 --> 00:13:53,360
the backend

270
00:13:53,360 --> 00:13:55,760
we separate the messages into three

271
00:13:55,760 --> 00:13:57,199
sections

272
00:13:57,199 --> 00:14:00,800
the first is request which will pass and

273
00:14:00,800 --> 00:14:03,600
modify the client request

274
00:14:03,600 --> 00:14:06,160
next is proxy section

275
00:14:06,160 --> 00:14:09,279
which will proxy and send the http

276
00:14:09,279 --> 00:14:12,079
request to the backend

277
00:14:12,079 --> 00:14:15,279
and the last section is response

278
00:14:15,279 --> 00:14:17,680
this section will receive the response

279
00:14:17,680 --> 00:14:21,199
from the backend and decide which header

280
00:14:21,199 --> 00:14:23,839
or cookie should be sent back to the

281
00:14:23,839 --> 00:14:25,760
client

282
00:14:25,760 --> 00:14:28,480
because this handler is important we

283
00:14:28,480 --> 00:14:32,880
will explain the message one by one

284
00:14:34,320 --> 00:14:37,519
the first method of request is copy

285
00:14:37,519 --> 00:14:40,000
headers to server request

286
00:14:40,000 --> 00:14:43,279
it will decide which http haters from

287
00:14:43,279 --> 00:14:47,519
the client can be sent to the backend

288
00:14:47,519 --> 00:14:50,320
as we said the front end and backhand

289
00:14:50,320 --> 00:14:52,800
synchronize information and internal

290
00:14:52,800 --> 00:14:56,160
status by http agents

291
00:14:56,160 --> 00:14:58,720
maybe you are thinking i could force the

292
00:14:58,720 --> 00:15:02,560
haters to confuse something

293
00:15:02,560 --> 00:15:06,160
this is a nice try but unfortunately you

294
00:15:06,160 --> 00:15:08,880
can see here is the back list in the

295
00:15:08,880 --> 00:15:10,399
maze

296
00:15:10,399 --> 00:15:13,279
the front and product several http

297
00:15:13,279 --> 00:15:17,120
haters which are used internally

298
00:15:17,120 --> 00:15:20,000
please keep in mind that the hader x

299
00:15:20,000 --> 00:15:23,440
common access token is an important one

300
00:15:23,440 --> 00:15:27,639
you will learn this later

301
00:15:29,279 --> 00:15:32,560
the second is copy cookies to server

302
00:15:32,560 --> 00:15:33,920
request

303
00:15:33,920 --> 00:15:36,480
the functionality is the same as the

304
00:15:36,480 --> 00:15:38,160
previous one

305
00:15:38,160 --> 00:15:42,719
but it copies cookies instead

306
00:15:44,560 --> 00:15:48,240
the last method of request section is

307
00:15:48,240 --> 00:15:51,519
add protocol specific haters to server

308
00:15:51,519 --> 00:15:53,199
requests

309
00:15:53,199 --> 00:15:56,480
this method allows a handler to apply

310
00:15:56,480 --> 00:15:59,440
customized vocal status

311
00:15:59,440 --> 00:16:03,279
for example if the front and owa would

312
00:16:03,279 --> 00:16:06,560
like to pass information to the backend

313
00:16:06,560 --> 00:16:09,040
here is the plus it can insert

314
00:16:09,040 --> 00:16:12,719
information to haters

315
00:16:14,800 --> 00:16:17,839
besides the customized protocol settings

316
00:16:17,839 --> 00:16:20,399
this method also clones the user

317
00:16:20,399 --> 00:16:24,480
identity to a new http hater

318
00:16:24,480 --> 00:16:26,320
the identity is the client

319
00:16:26,320 --> 00:16:29,600
authentication results in iis

320
00:16:29,600 --> 00:16:32,560
also consisting of your security

321
00:16:32,560 --> 00:16:35,040
identifier

322
00:16:35,040 --> 00:16:38,079
the mesa theorize it to a string and

323
00:16:38,079 --> 00:16:41,279
post it into the haters which will be

324
00:16:41,279 --> 00:16:45,360
forwarded to the backend later

325
00:16:45,360 --> 00:16:48,560
as for now you know how the front end

326
00:16:48,560 --> 00:16:52,000
and backhand synchronize your identity

327
00:16:52,000 --> 00:16:55,440
they do it by the hater x common access

328
00:16:55,440 --> 00:16:57,839
token

329
00:16:59,519 --> 00:17:02,399
once the request passing is solved it

330
00:17:02,399 --> 00:17:06,160
will lead to the proxy section

331
00:17:06,160 --> 00:17:09,439
the proxy first uses the get target

332
00:17:09,439 --> 00:17:13,280
backend server url to calculate the url

333
00:17:13,280 --> 00:17:16,720
where the front end should send to

334
00:17:16,720 --> 00:17:20,079
this method is also a body plus and full

335
00:17:20,079 --> 00:17:22,160
of vulnerabilities

336
00:17:22,160 --> 00:17:26,079
we will discuss this later

337
00:17:26,799 --> 00:17:29,760
the second step of proxy is create

338
00:17:29,760 --> 00:17:31,360
server request

339
00:17:31,360 --> 00:17:35,039
which first initialize an http client

340
00:17:35,039 --> 00:17:38,559
sets up the http message and haters and

341
00:17:38,559 --> 00:17:41,919
forwards it to the backend

342
00:17:41,919 --> 00:17:45,039
we mentioned that pros in ios are open

343
00:17:45,039 --> 00:17:48,559
to anyone and this is dangerous

344
00:17:48,559 --> 00:17:51,600
so that's why exchange has a mechanism

345
00:17:51,600 --> 00:17:55,280
to avoid the situation

346
00:17:56,320 --> 00:17:58,559
while the front end is creating a

347
00:17:58,559 --> 00:18:01,440
request it will generate a kerberos

348
00:18:01,440 --> 00:18:04,720
sticky and put it in the authorization

349
00:18:04,720 --> 00:18:06,240
header

350
00:18:06,240 --> 00:18:08,799
this header will be sent to the backend

351
00:18:08,799 --> 00:18:10,720
along with the request

352
00:18:10,720 --> 00:18:13,440
so how does the backend know which

353
00:18:13,440 --> 00:18:17,280
connection is from a valid front end

354
00:18:17,280 --> 00:18:21,840
by verifying this kubrow sticky

355
00:18:23,440 --> 00:18:25,919
we look into the general kerberos

356
00:18:25,919 --> 00:18:29,360
australia and knows that the hater is

357
00:18:29,360 --> 00:18:32,960
generated with the http spn of the

358
00:18:32,960 --> 00:18:36,640
exchange machine account

359
00:18:38,799 --> 00:18:41,280
if you observe the traffic between the

360
00:18:41,280 --> 00:18:44,400
front end and backhand you will see two

361
00:18:44,400 --> 00:18:47,120
headers shown in the request

362
00:18:47,120 --> 00:18:50,000
one is the authorization header which is

363
00:18:50,000 --> 00:18:53,039
the kerberos sticky used to indicate you

364
00:18:53,039 --> 00:18:55,600
are valid from a

365
00:18:55,600 --> 00:18:58,320
the other is the halo x common access

366
00:18:58,320 --> 00:18:59,440
token

367
00:18:59,440 --> 00:19:02,000
it's a civilized token indicates your

368
00:19:02,000 --> 00:19:04,080
identity

369
00:19:04,080 --> 00:19:06,880
for example if you log in with the nand

370
00:19:06,880 --> 00:19:10,559
orange the hater is the serious result

371
00:19:10,559 --> 00:19:14,879
of your security identified

372
00:19:16,720 --> 00:19:20,080
after sending the request to the backend

373
00:19:20,080 --> 00:19:22,720
the front end receive the response and

374
00:19:22,720 --> 00:19:26,400
enter the last section

375
00:19:27,760 --> 00:19:30,160
the response section is similar to

376
00:19:30,160 --> 00:19:31,440
request

377
00:19:31,440 --> 00:19:34,559
it checks the response from the backhand

378
00:19:34,559 --> 00:19:38,000
and decide which haters or cookies are

379
00:19:38,000 --> 00:19:41,679
allowed to be sent back to the client

380
00:19:41,679 --> 00:19:44,160
now you understand how the front end

381
00:19:44,160 --> 00:19:45,200
works

382
00:19:45,200 --> 00:19:48,000
let's move on to see how the backend

383
00:19:48,000 --> 00:19:50,960
process can populate the request from

384
00:19:50,960 --> 00:19:53,840
the front end

385
00:19:54,880 --> 00:19:57,600
the backhand rehydration module first

386
00:19:57,600 --> 00:20:00,400
uses the nasa to check whether the

387
00:20:00,400 --> 00:20:04,480
incoming request is authenticated or not

388
00:20:04,480 --> 00:20:06,799
it is the time to leverage the kerberos

389
00:20:06,799 --> 00:20:09,919
sticky the front end generate

390
00:20:09,919 --> 00:20:12,480
by handing over the tikki the backhand

391
00:20:12,480 --> 00:20:16,480
knows you are valid from and not

392
00:20:16,480 --> 00:20:19,280
the backhand then called the mesa chai

393
00:20:19,280 --> 00:20:22,320
get common access token to restore the

394
00:20:22,320 --> 00:20:26,879
user's identity from the front end

395
00:20:28,080 --> 00:20:31,440
the mesa retrieves the data visualize it

396
00:20:31,440 --> 00:20:34,320
back to the original access token and

397
00:20:34,320 --> 00:20:38,000
put it in the http context option for

398
00:20:38,000 --> 00:20:40,240
later use

399
00:20:40,240 --> 00:20:42,799
so far you learn how the front end and

400
00:20:42,799 --> 00:20:46,080
backhand synchronize the user's identity

401
00:20:46,080 --> 00:20:48,880
and how the header excellent access

402
00:20:48,880 --> 00:20:52,320
token plays an important load in the cs

403
00:20:52,320 --> 00:20:54,320
architecture

404
00:20:54,320 --> 00:20:56,559
since the method just checks if the

405
00:20:56,559 --> 00:20:59,520
users are looking or not it doesn't

406
00:20:59,520 --> 00:21:01,679
check the identity

407
00:21:01,679 --> 00:21:04,640
here comes a question could we ascend

408
00:21:04,640 --> 00:21:08,799
cat as a normal user in the backend

409
00:21:08,799 --> 00:21:11,520
if we access the backend directory and

410
00:21:11,520 --> 00:21:14,400
authenticate with a normal account

411
00:21:14,400 --> 00:21:17,919
we can specify whatever values indicator

412
00:21:17,919 --> 00:21:21,120
x common as this token and impersonate

413
00:21:21,120 --> 00:21:24,399
us any uses

414
00:21:26,080 --> 00:21:29,200
the idea is good and actually you can

415
00:21:29,200 --> 00:21:31,679
test the iis authentication of the

416
00:21:31,679 --> 00:21:33,200
backend

417
00:21:33,200 --> 00:21:35,760
but there is one more checkpoint the

418
00:21:35,760 --> 00:21:39,200
method is token serialization alone

419
00:21:39,200 --> 00:21:42,720
verifies the current log user and rests

420
00:21:42,720 --> 00:21:45,440
a rehydration exception if the

421
00:21:45,440 --> 00:21:48,960
checkpoint is failed

422
00:21:50,400 --> 00:21:52,640
it checks if you have a token

423
00:21:52,640 --> 00:21:55,280
serialization right

424
00:21:55,280 --> 00:21:58,080
by default only the exchange machine

425
00:21:58,080 --> 00:22:00,559
account has this right

426
00:22:00,559 --> 00:22:03,200
so that's why the kerberos ticket

427
00:22:03,200 --> 00:22:05,840
generated by front end can pass the

428
00:22:05,840 --> 00:22:08,720
checkpoint but you will fail even you

429
00:22:08,720 --> 00:22:13,320
are using the correct credential

430
00:22:14,720 --> 00:22:17,200
here is a quick summary for you

431
00:22:17,200 --> 00:22:19,440
when there is the client request the

432
00:22:19,440 --> 00:22:22,880
front end is first tries to authenticate

433
00:22:22,880 --> 00:22:24,320
a request

434
00:22:24,320 --> 00:22:27,039
if it's a c the file ends theorize the

435
00:22:27,039 --> 00:22:30,799
user identity and acid into the header

436
00:22:30,799 --> 00:22:33,919
that's common as this token

437
00:22:33,919 --> 00:22:36,320
the front end then generates a kerberos

438
00:22:36,320 --> 00:22:40,480
ticket by this http spn and proceed into

439
00:22:40,480 --> 00:22:43,280
the authorization head

440
00:22:43,280 --> 00:22:45,840
it will forward these headers along with

441
00:22:45,840 --> 00:22:49,280
the colliding class to the backhand

442
00:22:49,280 --> 00:22:51,840
the backhand also tries to authenticate

443
00:22:51,840 --> 00:22:54,480
the request at the beginning the

444
00:22:54,480 --> 00:22:57,280
rehydration module will verify whether

445
00:22:57,280 --> 00:22:59,520
the user have the right of token

446
00:22:59,520 --> 00:23:02,080
serialization or not

447
00:23:02,080 --> 00:23:04,320
since we are using a kerbal sticky

448
00:23:04,320 --> 00:23:08,720
generated by the front end we passed

449
00:23:08,720 --> 00:23:11,440
lastly the rehydration restored the user

450
00:23:11,440 --> 00:23:14,480
identity from the hader x common access

451
00:23:14,480 --> 00:23:17,760
token and continues the backend business

452
00:23:17,760 --> 00:23:20,240
logic

453
00:23:21,280 --> 00:23:23,280
so far we briefly explained the

454
00:23:23,280 --> 00:23:25,760
communication between the front end and

455
00:23:25,760 --> 00:23:26,960
backhand

456
00:23:26,960 --> 00:23:30,000
let's start ahead

457
00:23:32,480 --> 00:23:36,320
okay the first exploit x-proxy no gun as

458
00:23:36,320 --> 00:23:38,960
introduced before this may be the most

459
00:23:38,960 --> 00:23:41,600
severe vulnerability in the exchange

460
00:23:41,600 --> 00:23:43,200
history

461
00:23:43,200 --> 00:23:45,600
carcinogen is chained with two bugs

462
00:23:45,600 --> 00:23:49,760
together ce one is an ssrf on the front

463
00:23:49,760 --> 00:23:50,400
end

464
00:23:50,400 --> 00:23:52,799
and the other is an archery viral light

465
00:23:52,799 --> 00:23:56,960
on the control panel of the backhand

466
00:23:57,600 --> 00:24:00,080
so where is the proxy logo

467
00:24:00,080 --> 00:24:02,799
the box is mainly located at the proxy

468
00:24:02,799 --> 00:24:05,279
section in the front end

469
00:24:05,279 --> 00:24:07,679
we mentioned that the front-end handler

470
00:24:07,679 --> 00:24:10,720
calculates the back-end url and forwards

471
00:24:10,720 --> 00:24:15,120
the request to that url

472
00:24:16,080 --> 00:24:18,720
one of the handlers is in charge of

473
00:24:18,720 --> 00:24:21,760
processing the static resources

474
00:24:21,760 --> 00:24:24,559
it will assign the backhand target from

475
00:24:24,559 --> 00:24:26,320
the cookie

476
00:24:26,320 --> 00:24:29,440
you will figure out how simple this part

477
00:24:29,440 --> 00:24:33,840
is after learning the architecture

478
00:24:35,039 --> 00:24:37,600
the front end is the user's supply

479
00:24:37,600 --> 00:24:40,159
cookie as the domain name

480
00:24:40,159 --> 00:24:42,559
and the domain name will be concatenated

481
00:24:42,559 --> 00:24:45,279
as the back-end url

482
00:24:45,279 --> 00:24:48,159
we use a bit of passing tricks to

483
00:24:48,159 --> 00:24:51,520
enclose the url and force the exchange

484
00:24:51,520 --> 00:24:54,480
to fetch example.com

485
00:24:54,480 --> 00:24:57,120
the exchange will then return the whole

486
00:24:57,120 --> 00:25:01,479
response back to earth

487
00:25:02,000 --> 00:25:04,720
so what is the root cause of this

488
00:25:04,720 --> 00:25:07,440
arbitrary back-end assignment

489
00:25:07,440 --> 00:25:10,000
as we mentioned that the exchange server

490
00:25:10,000 --> 00:25:12,960
changed its architecture while releasing

491
00:25:12,960 --> 00:25:14,799
new versions

492
00:25:14,799 --> 00:25:17,039
this cookie is a quick solution for

493
00:25:17,039 --> 00:25:19,919
exchange to make the front end in new

494
00:25:19,919 --> 00:25:23,200
architectures to identify where the old

495
00:25:23,200 --> 00:25:25,120
backhand is

496
00:25:25,120 --> 00:25:28,240
it looks like a design depth to adapt

497
00:25:28,240 --> 00:25:31,360
backboard compatibility

498
00:25:31,360 --> 00:25:34,080
with this backhand assignment we have a

499
00:25:34,080 --> 00:25:37,679
super exercise that can control almost

500
00:25:37,679 --> 00:25:42,320
all the requests and get older responses

501
00:25:42,320 --> 00:25:44,799
the most impressive is that it will

502
00:25:44,799 --> 00:25:47,760
generate a kerberos ticket for us

503
00:25:47,760 --> 00:25:50,640
which means even when we are taking a

504
00:25:50,640 --> 00:25:54,559
protected and domain joined http service

505
00:25:54,559 --> 00:25:56,159
we can still hack with the

506
00:25:56,159 --> 00:25:58,960
authentication of exchange machine

507
00:25:58,960 --> 00:26:01,039
account

508
00:26:01,039 --> 00:26:04,400
thanks to the super ssrf we can leverage

509
00:26:04,400 --> 00:26:08,960
the internal api slash proxy logon.ecp

510
00:26:08,960 --> 00:26:12,080
to get evaluation to access the control

511
00:26:12,080 --> 00:26:13,520
panel

512
00:26:13,520 --> 00:26:16,720
the api is also the reason why we called

513
00:26:16,720 --> 00:26:20,000
it proxy logo

514
00:26:20,240 --> 00:26:23,120
as for the rest of exploitation i

515
00:26:23,120 --> 00:26:25,600
believe there are already lots of

516
00:26:25,600 --> 00:26:28,559
technical analysis out there

517
00:26:28,559 --> 00:26:30,720
we will skip it today for the

518
00:26:30,720 --> 00:26:34,400
consideration of time

519
00:26:35,600 --> 00:26:38,720
we will not do the demonstration today

520
00:26:38,720 --> 00:26:41,360
but if you are interested we'll come to

521
00:26:41,360 --> 00:26:45,678
check the demo on our website

522
00:26:46,799 --> 00:26:49,279
next i will be sharing details about

523
00:26:49,279 --> 00:26:51,279
proxy oracle

524
00:26:51,279 --> 00:26:54,400
compared to proxy logon proxy oracle is

525
00:26:54,400 --> 00:26:57,279
an interesting exploit with a different

526
00:26:57,279 --> 00:26:58,799
approach

527
00:26:58,799 --> 00:27:01,600
proxy oracle will allow the attacker to

528
00:27:01,600 --> 00:27:04,720
recover the victims plaintext password

529
00:27:04,720 --> 00:27:06,960
simply by leading them to a malicious

530
00:27:06,960 --> 00:27:08,559
link

531
00:27:08,559 --> 00:27:11,120
we use a process gripping and adding

532
00:27:11,120 --> 00:27:15,199
oracle to complete the exploit

533
00:27:16,320 --> 00:27:18,880
first we would like to explain how the

534
00:27:18,880 --> 00:27:23,600
owa or ecp or seneca uses

535
00:27:23,600 --> 00:27:26,399
if the negative iis authentication is

536
00:27:26,399 --> 00:27:27,440
used

537
00:27:27,440 --> 00:27:30,559
an ugly prompt will pop out asking you

538
00:27:30,559 --> 00:27:33,440
to enter the password instead of this

539
00:27:33,440 --> 00:27:35,760
fancy in the face

540
00:27:35,760 --> 00:27:38,480
which means extract is using a certain

541
00:27:38,480 --> 00:27:41,760
mechanism to ask you the transformation

542
00:27:41,760 --> 00:27:45,679
between the credentials and cookies

543
00:27:45,679 --> 00:27:48,799
so let's take a look at how this fancy

544
00:27:48,799 --> 00:27:51,440
interface is working with the original

545
00:27:51,440 --> 00:27:54,240
architecture

546
00:27:55,520 --> 00:27:58,960
let's get back to the cs architecture

547
00:27:58,960 --> 00:28:02,640
all the owa and ecp looking mechanism is

548
00:28:02,640 --> 00:28:04,960
found by the phone-based authentication

549
00:28:04,960 --> 00:28:06,240
module

550
00:28:06,240 --> 00:28:09,039
the fba is an authentication module

551
00:28:09,039 --> 00:28:11,840
prior to the exchange front-end

552
00:28:11,840 --> 00:28:14,080
and responsible for converting the

553
00:28:14,080 --> 00:28:17,600
username and password into cookies or

554
00:28:17,600 --> 00:28:20,480
translating cookies back to the original

555
00:28:20,480 --> 00:28:22,799
credential page

556
00:28:22,799 --> 00:28:25,520
the implementation stores your username

557
00:28:25,520 --> 00:28:28,559
and password in cookies directly

558
00:28:28,559 --> 00:28:31,840
of course cookie is encrypted to avoid

559
00:28:31,840 --> 00:28:34,720
bad guys catching your password in plain

560
00:28:34,720 --> 00:28:38,080
text on the fly

561
00:28:39,279 --> 00:28:42,240
if you read the login traffic carefully

562
00:28:42,240 --> 00:28:45,360
you will see several cookies which stand

563
00:28:45,360 --> 00:28:47,520
for your identity

564
00:28:47,520 --> 00:28:50,159
for the later mail operations you have

565
00:28:50,159 --> 00:28:53,200
to attach cookies to identify who you

566
00:28:53,200 --> 00:28:54,559
are

567
00:28:54,559 --> 00:28:57,039
but not all cookies they are very

568
00:28:57,039 --> 00:29:01,840
important ones with the prefix ca data

569
00:29:01,840 --> 00:29:04,399
you can see from the screen the seer

570
00:29:04,399 --> 00:29:07,679
data contains your encrypted username

571
00:29:07,679 --> 00:29:10,480
and password

572
00:29:11,039 --> 00:29:12,720
here's the pseudo code for the

573
00:29:12,720 --> 00:29:14,640
encryption logic

574
00:29:14,640 --> 00:29:17,440
exchange generates to render strings as

575
00:29:17,440 --> 00:29:20,640
the iv and key for every station

576
00:29:20,640 --> 00:29:23,520
the iv and key will be sent and stored

577
00:29:23,520 --> 00:29:25,360
on the client side

578
00:29:25,360 --> 00:29:28,159
however to avoid someone stealing the

579
00:29:28,159 --> 00:29:31,279
cookies and decrypting with the iv and

580
00:29:31,279 --> 00:29:32,159
key

581
00:29:32,159 --> 00:29:35,840
exchange uses rsa to encrypt with its

582
00:29:35,840 --> 00:29:39,440
private key again before sending

583
00:29:39,440 --> 00:29:42,640
extract then use system aes to encrypt

584
00:29:42,640 --> 00:29:45,760
your encoded credential with the iv and

585
00:29:45,760 --> 00:29:46,559
key

586
00:29:46,559 --> 00:29:50,879
and put the result into the qr keys

587
00:29:51,200 --> 00:29:56,080
and yes you can cite paid oracle here

588
00:29:57,840 --> 00:30:01,919
exchange text the cbc as its fading mode

589
00:30:01,919 --> 00:30:04,640
if you are familiar with cryptography

590
00:30:04,640 --> 00:30:08,080
you must know that cdc is vulnerable to

591
00:30:08,080 --> 00:30:10,880
the painting oracle attack

592
00:30:10,880 --> 00:30:13,600
the exchange implementation catches the

593
00:30:13,600 --> 00:30:16,399
painting error exception and returns

594
00:30:16,399 --> 00:30:19,279
immediately

595
00:30:20,000 --> 00:30:23,039
when a logging process fails exchange

596
00:30:23,039 --> 00:30:25,840
redirects the http back to the login

597
00:30:25,840 --> 00:30:28,399
patch with an error code

598
00:30:28,399 --> 00:30:32,399
due to the return we have an oracle here

599
00:30:32,399 --> 00:30:35,120
if the encryption fails the error code

600
00:30:35,120 --> 00:30:36,399
is 0

601
00:30:36,399 --> 00:30:38,880
which stands for now

602
00:30:38,880 --> 00:30:41,279
and if we corrupt the cyber text

603
00:30:41,279 --> 00:30:44,240
successfully the exchange will try to

604
00:30:44,240 --> 00:30:46,880
login with the conducted credential

605
00:30:46,880 --> 00:30:48,159
pattern

606
00:30:48,159 --> 00:30:50,720
at this moment the result must be a

607
00:30:50,720 --> 00:30:53,679
failure and the error code is 2

608
00:30:53,679 --> 00:30:57,760
which stands for invalid credentials

609
00:30:57,760 --> 00:31:00,399
by differing from the payroll number we

610
00:31:00,399 --> 00:31:05,439
have an oracle to recover the plan text

611
00:31:06,799 --> 00:31:10,320
now we know we can decrypt any cookies

612
00:31:10,320 --> 00:31:13,039
with the padding oracle but the problem

613
00:31:13,039 --> 00:31:14,720
is

614
00:31:14,720 --> 00:31:19,440
how to get cookies from the rectangle

615
00:31:19,760 --> 00:31:22,880
in order to get a cookie on class we

616
00:31:22,880 --> 00:31:25,600
uncover a process with thing to change

617
00:31:25,600 --> 00:31:27,120
data

618
00:31:27,120 --> 00:31:30,840
but it comes up with another

619
00:31:30,840 --> 00:31:34,320
problem in exchange all sensitive

620
00:31:34,320 --> 00:31:38,320
cookies are protected by http only

621
00:31:38,320 --> 00:31:41,039
so we can't access the cookies by

622
00:31:41,039 --> 00:31:42,640
javascript

623
00:31:42,640 --> 00:31:46,000
so what can we do

624
00:31:46,000 --> 00:31:48,080
since we can ask you arbitrary

625
00:31:48,080 --> 00:31:50,480
javascript on client side

626
00:31:50,480 --> 00:31:53,840
why don't we just insert the ssi cookie

627
00:31:53,840 --> 00:31:56,960
which is used in proxy.gov

628
00:31:56,960 --> 00:31:59,919
once we add a cookie to the browser we

629
00:31:59,919 --> 00:32:03,200
can save and take over all the user's

630
00:32:03,200 --> 00:32:06,000
mail operations request

631
00:32:06,000 --> 00:32:09,440
all we need to do is sit on our server

632
00:32:09,440 --> 00:32:14,519
and wait for the cookies to come back

633
00:32:14,559 --> 00:32:17,679
i will elaborate the process further

634
00:32:17,679 --> 00:32:20,559
we first send the malicious link to the

635
00:32:20,559 --> 00:32:22,000
victim

636
00:32:22,000 --> 00:32:24,320
once the victim triggers our process

637
00:32:24,320 --> 00:32:27,919
scripting we insert an ssi cookie to

638
00:32:27,919 --> 00:32:32,159
pretend we are the backhand of exchange

639
00:32:32,159 --> 00:32:34,480
then the exchange server becomes the

640
00:32:34,480 --> 00:32:37,600
proxy between the victim and earns

641
00:32:37,600 --> 00:32:40,399
we will take over all the traffic and

642
00:32:40,399 --> 00:32:43,919
bypass http only to get encrypted

643
00:32:43,919 --> 00:32:46,480
cookies

644
00:32:47,360 --> 00:32:50,799
okay the demonstration

645
00:32:50,960 --> 00:32:54,080
first we have the victim

646
00:32:54,080 --> 00:32:56,720
and we passed his mail address to our

647
00:32:56,720 --> 00:32:58,640
explorer

648
00:32:58,640 --> 00:33:01,519
the explorer first sent a malicious link

649
00:33:01,519 --> 00:33:03,360
to the target

650
00:33:03,360 --> 00:33:05,919
once the target triggers our process

651
00:33:05,919 --> 00:33:09,360
free key we insert the ssi cookie and

652
00:33:09,360 --> 00:33:11,919
wait for the connection back to obtain

653
00:33:11,919 --> 00:33:15,440
the encrypted cookies

654
00:33:21,200 --> 00:33:24,080
ok we got a connection we can now

655
00:33:24,080 --> 00:33:28,000
decrypt the blocks by painting oracle

656
00:33:28,000 --> 00:33:30,000
it should be note that all the

657
00:33:30,000 --> 00:33:32,320
decryption could be done without the

658
00:33:32,320 --> 00:33:33,760
process svp

659
00:33:33,760 --> 00:33:36,480
even a user close the browser we can

660
00:33:36,480 --> 00:33:40,159
still recover the password

661
00:33:42,960 --> 00:33:45,600
with a little bit waiting we recover the

662
00:33:45,600 --> 00:33:50,360
password in plain text successfully

663
00:33:55,919 --> 00:33:58,559
the last exploit i will share today is

664
00:33:58,559 --> 00:34:00,080
proxy's shoe

665
00:34:00,080 --> 00:34:02,799
this is the exploit we demonstrate that

666
00:34:02,799 --> 00:34:05,360
pawn to all 2021

667
00:34:05,360 --> 00:34:07,600
the result of proxy share is the

668
00:34:07,600 --> 00:34:09,918
center's proximal gun

669
00:34:09,918 --> 00:34:12,800
and an authenticated attacker can ask

670
00:34:12,800 --> 00:34:15,440
you arbitrary commands on the exchange

671
00:34:15,440 --> 00:34:16,800
server

672
00:34:16,800 --> 00:34:19,199
but the exploit chain is different

673
00:34:19,199 --> 00:34:21,599
proxy share is chained with an scl

674
00:34:21,599 --> 00:34:24,960
bypass in the front end an elevation of

675
00:34:24,960 --> 00:34:27,599
privilege in the exchange powershell

676
00:34:27,599 --> 00:34:28,719
backend

677
00:34:28,719 --> 00:34:34,279
and an optional firewire to get rce

678
00:34:34,399 --> 00:34:36,800
so where is the proxy show

679
00:34:36,800 --> 00:34:40,079
the first pre-order spot is also located

680
00:34:40,079 --> 00:34:44,720
at the backhand url calculation

681
00:34:45,440 --> 00:34:47,599
practice shell begins with a pass

682
00:34:47,599 --> 00:34:49,040
confusion

683
00:34:49,040 --> 00:34:51,719
exchange has a feature called

684
00:34:51,719 --> 00:34:53,918
explicit.com feature

685
00:34:53,918 --> 00:34:56,639
this feature is used to display another

686
00:34:56,639 --> 00:34:59,599
user's mailbox or calendar in a new

687
00:34:59,599 --> 00:35:01,599
browser window

688
00:35:01,599 --> 00:35:04,640
of course the displayed mailbox must

689
00:35:04,640 --> 00:35:07,280
have to be configured with permission to

690
00:35:07,280 --> 00:35:09,839
publish first

691
00:35:09,839 --> 00:35:12,480
in order to open with a single get

692
00:35:12,480 --> 00:35:16,480
request the url format must be simple

693
00:35:16,480 --> 00:35:19,520
and the mailbox edges must be included

694
00:35:19,520 --> 00:35:22,560
in the url such as the highlight part in

695
00:35:22,560 --> 00:35:24,400
the slide

696
00:35:24,400 --> 00:35:27,680
the exchange normalize the spatial url

697
00:35:27,680 --> 00:35:32,720
and rewrite it to the existing handles

698
00:35:34,320 --> 00:35:37,040
of course the path is not the only way

699
00:35:37,040 --> 00:35:40,320
to specify the mailbox agents

700
00:35:40,320 --> 00:35:43,839
we find that through a specific test in

701
00:35:43,839 --> 00:35:46,480
the auto discovery handle

702
00:35:46,480 --> 00:35:49,359
extract will consider address from the

703
00:35:49,359 --> 00:35:53,040
query string if the path ends with slash

704
00:35:53,040 --> 00:35:56,440
auto discover.json

705
00:35:57,680 --> 00:36:00,160
after getting the agents the handler

706
00:36:00,160 --> 00:36:02,720
tries to normalize the url

707
00:36:02,720 --> 00:36:05,680
you see that exchange won't conduct too

708
00:36:05,680 --> 00:36:08,079
much checking on the patent of the

709
00:36:08,079 --> 00:36:10,720
removing mailbox edges

710
00:36:10,720 --> 00:36:13,680
which led us to use the substring to

711
00:36:13,680 --> 00:36:17,919
erase any part of the url

712
00:36:18,640 --> 00:36:21,119
as you could see from the slide this is

713
00:36:21,119 --> 00:36:24,800
the url we will be visiting

714
00:36:24,800 --> 00:36:27,520
and this is the mailbox address we use

715
00:36:27,520 --> 00:36:31,599
the query string to specify

716
00:36:31,920 --> 00:36:34,400
here is the part will be removed from

717
00:36:34,400 --> 00:36:38,320
exchange according to our

718
00:36:38,839 --> 00:36:42,880
page with the address

719
00:36:43,520 --> 00:36:46,640
this is the actual url the request will

720
00:36:46,640 --> 00:36:49,200
be sent to the backend

721
00:36:49,200 --> 00:36:52,720
as for now we can access any exchange

722
00:36:52,720 --> 00:36:55,839
backend again

723
00:36:57,040 --> 00:37:00,079
although this buff is not as powerful as

724
00:37:00,079 --> 00:37:02,800
the exercise in proximal gun

725
00:37:02,800 --> 00:37:05,200
it's sufficient to access archery

726
00:37:05,200 --> 00:37:06,800
because

727
00:37:06,800 --> 00:37:09,760
we tries to access the an api in the

728
00:37:09,760 --> 00:37:13,280
face to identify our privilege

729
00:37:13,280 --> 00:37:16,000
from the screenshot you could see that

730
00:37:16,000 --> 00:37:18,880
we did access the backhand with the

731
00:37:18,880 --> 00:37:23,839
exchange system privilege again

732
00:37:24,160 --> 00:37:27,200
here comes the post exploitation part

733
00:37:27,200 --> 00:37:29,920
the approach of original proxy load gun

734
00:37:29,920 --> 00:37:32,800
fails because of some in-depth

735
00:37:32,800 --> 00:37:34,560
protections

736
00:37:34,560 --> 00:37:38,400
so we have to discover a new approach

737
00:37:38,400 --> 00:37:41,200
now let's turn the focus to the exchange

738
00:37:41,200 --> 00:37:43,280
powershell remote

739
00:37:43,280 --> 00:37:47,599
a feature for exchange automations

740
00:37:47,599 --> 00:37:51,040
through the define shield commands users

741
00:37:51,040 --> 00:37:54,320
can read mail spend mail and even

742
00:37:54,320 --> 00:37:58,079
configure savings via command lines

743
00:37:58,079 --> 00:38:00,480
the exchange powershell implementation

744
00:38:00,480 --> 00:38:03,599
is built upon the powershell api

745
00:38:03,599 --> 00:38:06,720
by coding the api exchange could realize

746
00:38:06,720 --> 00:38:09,520
a powershell server and uses the wrong

747
00:38:09,520 --> 00:38:12,640
space to limit and isolate the command

748
00:38:12,640 --> 00:38:14,800
execution

749
00:38:14,800 --> 00:38:17,359
all the operations are based on the wing

750
00:38:17,359 --> 00:38:19,280
iron protocol

751
00:38:19,280 --> 00:38:22,000
and it should be note that also we can

752
00:38:22,000 --> 00:38:25,119
access the powershell backhand directory

753
00:38:25,119 --> 00:38:28,720
we can still interact with it because we

754
00:38:28,720 --> 00:38:30,640
are the system user

755
00:38:30,640 --> 00:38:33,359
we will fail the authentication since

756
00:38:33,359 --> 00:38:37,359
there is no mailbox for the system user

757
00:38:37,359 --> 00:38:40,640
we also can't fault the identity by the

758
00:38:40,640 --> 00:38:43,520
x common access token hater due to the

759
00:38:43,520 --> 00:38:47,119
backlist in the front end so

760
00:38:47,119 --> 00:38:48,640
what should i do

761
00:38:48,640 --> 00:38:51,040
we type into the powershell server

762
00:38:51,040 --> 00:38:54,480
implementation and find a piece of code

763
00:38:54,480 --> 00:39:00,280
that extracts the ss token from the url

764
00:39:00,560 --> 00:39:03,599
the code is sitting after the expected

765
00:39:03,599 --> 00:39:05,839
authentication and before the

766
00:39:05,839 --> 00:39:07,440
rehydration

767
00:39:07,440 --> 00:39:10,320
it checks if there is no x common access

768
00:39:10,320 --> 00:39:13,280
token the code will code out another

769
00:39:13,280 --> 00:39:18,640
method to get access token from url

770
00:39:20,240 --> 00:39:23,440
the common access token from url is a

771
00:39:23,440 --> 00:39:26,480
short method and retrieves the value of

772
00:39:26,480 --> 00:39:30,240
xrps clt from choreography

773
00:39:30,240 --> 00:39:32,880
then deserialize it back to the asus

774
00:39:32,880 --> 00:39:35,280
token

775
00:39:35,760 --> 00:39:38,320
as for now we have an elevation of

776
00:39:38,320 --> 00:39:40,480
privilege because we can access the

777
00:39:40,480 --> 00:39:42,880
powershell backend and specify the

778
00:39:42,880 --> 00:39:45,280
access token directory

779
00:39:45,280 --> 00:39:47,839
the intention of this operation is to be

780
00:39:47,839 --> 00:39:50,560
a quick proxy for internal exchange

781
00:39:50,560 --> 00:39:53,200
powershell communication

782
00:39:53,200 --> 00:39:55,599
by abusing this feature we can

783
00:39:55,599 --> 00:39:59,359
impersonate a same user

784
00:39:59,359 --> 00:40:02,160
here we use this eop to downgrade

785
00:40:02,160 --> 00:40:05,040
ourselves from the instant user we saw

786
00:40:05,040 --> 00:40:09,880
mailbox to exchange adam

787
00:40:10,640 --> 00:40:13,040
now we can ask you to arbitrarily

788
00:40:13,040 --> 00:40:16,640
exchange powershell commands as enemy

789
00:40:16,640 --> 00:40:19,118
and then

790
00:40:20,319 --> 00:40:22,960
the last piece of the puzzle is to find

791
00:40:22,960 --> 00:40:25,839
a post of rce to chat everything

792
00:40:25,839 --> 00:40:27,280
together

793
00:40:27,280 --> 00:40:29,599
because we are adaming and there are

794
00:40:29,599 --> 00:40:32,400
hundreds of exchange portion commands

795
00:40:32,400 --> 00:40:35,440
out there it's easy to find a post or

796
00:40:35,440 --> 00:40:37,040
stroke

797
00:40:37,040 --> 00:40:40,480
we abuse the command new mailbox explore

798
00:40:40,480 --> 00:40:44,400
request to export a user's mailbox into

799
00:40:44,400 --> 00:40:48,640
the webloot to be our webshop

800
00:40:49,440 --> 00:40:50,640
we can create

801
00:40:50,640 --> 00:40:53,280
files are arbitrarily passed the next

802
00:40:53,280 --> 00:40:56,400
problem is how to embed our malicious

803
00:40:56,400 --> 00:40:58,880
parallel into the file

804
00:40:58,880 --> 00:41:01,440
it's also easy we can deliver our

805
00:41:01,440 --> 00:41:03,920
parallel by mail

806
00:41:03,920 --> 00:41:08,000
however the exported file is encoded

807
00:41:08,000 --> 00:41:10,560
by reading the microsoft document we

808
00:41:10,560 --> 00:41:13,440
learned it in pst format and the

809
00:41:13,440 --> 00:41:17,040
encoding is just a simple table maybe

810
00:41:17,040 --> 00:41:19,520
we can just encode the parallel before

811
00:41:19,520 --> 00:41:20,880
sending out

812
00:41:20,880 --> 00:41:23,760
while the server tries to set and encode

813
00:41:23,760 --> 00:41:26,640
our parallel it turns into the original

814
00:41:26,640 --> 00:41:29,680
malicious scope

815
00:41:30,560 --> 00:41:32,800
let's turn everything together

816
00:41:32,800 --> 00:41:36,480
we first deliver our encoded web ship to

817
00:41:36,480 --> 00:41:38,720
the target mailbox

818
00:41:38,720 --> 00:41:40,880
we then launch a windows powershell

819
00:41:40,880 --> 00:41:45,119
client to connect to our proxy server

820
00:41:45,119 --> 00:41:48,319
we use a proxy because we have to modify

821
00:41:48,319 --> 00:41:51,680
the wing rn protocol to rewrite the path

822
00:41:51,680 --> 00:41:54,319
lead to the vulnerable auto discovery

823
00:41:54,319 --> 00:41:55,359
handle

824
00:41:55,359 --> 00:41:57,839
which will eventually trigger the past

825
00:41:57,839 --> 00:41:59,280
confusion but

826
00:41:59,280 --> 00:42:01,839
and add the essence token to the core

827
00:42:01,839 --> 00:42:04,160
history

828
00:42:04,160 --> 00:42:06,960
once our station has been established we

829
00:42:06,960 --> 00:42:09,520
can ask you the power shield command to

830
00:42:09,520 --> 00:42:12,640
grant ourselves to the mailbox export

831
00:42:12,640 --> 00:42:16,640
law and invoke the mailbox exploited

832
00:42:16,640 --> 00:42:19,920
and enjoy the show

833
00:42:23,040 --> 00:42:25,680
ok let's go to the demonstration of

834
00:42:25,680 --> 00:42:27,839
proxy shoe

835
00:42:27,839 --> 00:42:31,280
so this is the exchange server and we

836
00:42:31,280 --> 00:42:34,880
run our exploit code

837
00:42:36,240 --> 00:42:39,280
the exploit first set our encoded

838
00:42:39,280 --> 00:42:42,079
payload to the mailbox and launch the

839
00:42:42,079 --> 00:42:44,960
power shell to establish the wing rn

840
00:42:44,960 --> 00:42:46,560
connection

841
00:42:46,560 --> 00:42:49,119
we use a server to rewrite the traffic

842
00:42:49,119 --> 00:42:52,880
to implement our exploit

843
00:42:56,319 --> 00:43:00,759
okay our shirt is chopped

844
00:43:15,599 --> 00:43:19,920
and you can see we are the sensor

845
00:43:25,040 --> 00:43:28,480
let's talk about mitigations

846
00:43:28,480 --> 00:43:31,200
since it's an architectural problem it's

847
00:43:31,200 --> 00:43:34,079
hard to mitigate a text service with one

848
00:43:34,079 --> 00:43:35,680
single action

849
00:43:35,680 --> 00:43:38,240
all you can do is keep your exchange up

850
00:43:38,240 --> 00:43:40,800
to date and with the support of a

851
00:43:40,800 --> 00:43:44,560
firewall or sel to not externally facing

852
00:43:44,560 --> 00:43:47,279
the internet

853
00:43:47,440 --> 00:43:50,000
microsoft has enhanced the cs

854
00:43:50,000 --> 00:43:52,319
architecture in april

855
00:43:52,319 --> 00:43:54,800
the authentication part of this attack

856
00:43:54,800 --> 00:43:58,079
service has been reduced in the patch

857
00:43:58,079 --> 00:44:00,560
if you are lazy please up the apple

858
00:44:00,560 --> 00:44:03,680
patch at least

859
00:44:03,839 --> 00:44:06,640
and if you are super lazy maybe you can

860
00:44:06,640 --> 00:44:11,319
give a shot at office 365.

861
00:44:12,560 --> 00:44:15,680
okay conclusion modern province required

862
00:44:15,680 --> 00:44:18,480
modern solutions it's hard to find

863
00:44:18,480 --> 00:44:21,760
traditional bugs in modern architecture

864
00:44:21,760 --> 00:44:24,400
sometimes comprehending the architecture

865
00:44:24,400 --> 00:44:27,359
from a higher point of view can help you

866
00:44:27,359 --> 00:44:30,480
find new interesting bugs

867
00:44:30,480 --> 00:44:33,520
the exchange cs is still a good attack

868
00:44:33,520 --> 00:44:36,800
service also microsoft has catched it in

869
00:44:36,800 --> 00:44:38,160
apple

870
00:44:38,160 --> 00:44:41,920
however in fact we still find a few bugs

871
00:44:41,920 --> 00:44:44,400
after the apple patch

872
00:44:44,400 --> 00:44:46,560
but since the authentication part of

873
00:44:46,560 --> 00:44:49,359
this attack service is reduced

874
00:44:49,359 --> 00:44:52,400
the result may not be as powerful as

875
00:44:52,400 --> 00:44:56,960
before due to the lack of pre-order box

876
00:44:56,960 --> 00:45:00,560
lastly the exchange is still a treasure

877
00:45:00,560 --> 00:45:03,359
waiting for you to fight bugs

878
00:45:03,359 --> 00:45:04,480
as mentioned

879
00:45:04,480 --> 00:45:08,400
even in 2020 a hard code crypto key can

880
00:45:08,400 --> 00:45:11,599
still be filed in exchange server

881
00:45:11,599 --> 00:45:14,800
i can assure you that microsoft will fix

882
00:45:14,800 --> 00:45:17,359
more exchange vulnerabilities in the

883
00:45:17,359 --> 00:45:19,280
future

884
00:45:19,280 --> 00:45:22,319
but here comes a story a lot

885
00:45:22,319 --> 00:45:24,480
even you find a super critical

886
00:45:24,480 --> 00:45:28,079
vulnerability like proxy local microsoft

887
00:45:28,079 --> 00:45:31,280
will not reward you any bounty because

888
00:45:31,280 --> 00:45:34,160
the exchange server on premiums is out

889
00:45:34,160 --> 00:45:36,079
of scope

890
00:45:36,079 --> 00:45:39,200
so is it was fire hunting box on

891
00:45:39,200 --> 00:45:40,880
exchange server

892
00:45:40,880 --> 00:45:43,520
you tell me

893
00:45:44,560 --> 00:45:47,440
this is the end of my presentation if

894
00:45:47,440 --> 00:45:49,760
you have any questions here is my

895
00:45:49,760 --> 00:45:52,160
contact information

896
00:45:52,160 --> 00:45:54,560
by the way i will post a detailed

897
00:45:54,560 --> 00:45:57,280
article on my blog please look forward

898
00:45:57,280 --> 00:45:58,880
to that

899
00:45:58,880 --> 00:46:03,960
thank you again for being here thanks

