1
00:00:01,130 --> 00:00:14,639
[Music]

2
00:00:14,639 --> 00:00:16,880
hello this is certified pre-owned

3
00:00:16,880 --> 00:00:18,800
abusing active directory certificate

4
00:00:18,800 --> 00:00:21,199
services my name is will schroeder i am

5
00:00:21,199 --> 00:00:23,920
harmjoy on twitter i'm lee christensen

6
00:00:23,920 --> 00:00:25,760
tiffkin on twitter and we are both

7
00:00:25,760 --> 00:00:30,199
technical architects at spectreops

8
00:00:30,480 --> 00:00:32,320
so what we're going to cover today

9
00:00:32,320 --> 00:00:33,840
it's all about active directory

10
00:00:33,840 --> 00:00:35,520
certificate services there's a lot of

11
00:00:35,520 --> 00:00:36,960
information here that we're going to try

12
00:00:36,960 --> 00:00:38,719
to condense as best we can

13
00:00:38,719 --> 00:00:40,000
so we're going to hit some necessary

14
00:00:40,000 --> 00:00:41,840
background on what active directory

15
00:00:41,840 --> 00:00:43,680
certificate services is

16
00:00:43,680 --> 00:00:45,920
templates how these things interact some

17
00:00:45,920 --> 00:00:47,600
interesting settings for that

18
00:00:47,600 --> 00:00:49,760
some account persistence from the user

19
00:00:49,760 --> 00:00:52,000
and machine context so ways to steal

20
00:00:52,000 --> 00:00:54,399
people's credentials as well as ways to

21
00:00:54,399 --> 00:00:57,120
persist on systems for long periods of

22
00:00:57,120 --> 00:01:00,079
time kind of some cool l sas less

23
00:01:00,079 --> 00:01:01,600
credential theft then we're going to

24
00:01:01,600 --> 00:01:03,520
cover domain escalation so eight

25
00:01:03,520 --> 00:01:05,438
different misconfiguration scenarios

26
00:01:05,438 --> 00:01:08,479
that can result in domain unelevated

27
00:01:08,479 --> 00:01:11,280
users elevating in a domain to domain

28
00:01:11,280 --> 00:01:13,840
administrator or equivalent rights

29
00:01:13,840 --> 00:01:15,520
then we're going to finish off with some

30
00:01:15,520 --> 00:01:18,240
persistence with golden certificates so

31
00:01:18,240 --> 00:01:19,920
forging certificates that can't be

32
00:01:19,920 --> 00:01:22,400
revoked

33
00:01:23,040 --> 00:01:26,400
so active directory certificate services

34
00:01:26,400 --> 00:01:29,200
adcs is a server role that functions as

35
00:01:29,200 --> 00:01:31,439
microsoft's public key infrastructure

36
00:01:31,439 --> 00:01:33,759
implementation so pki why would someone

37
00:01:33,759 --> 00:01:35,600
do this internally well it's used by

38
00:01:35,600 --> 00:01:37,119
organizations for things like smart

39
00:01:37,119 --> 00:01:39,840
cards for internal ssl certificates code

40
00:01:39,840 --> 00:01:40,880
signing

41
00:01:40,880 --> 00:01:42,240
a large number of different things

42
00:01:42,240 --> 00:01:44,320
there's also different tie-ins with like

43
00:01:44,320 --> 00:01:46,560
azure and things like that as well

44
00:01:46,560 --> 00:01:47,680
a ca

45
00:01:47,680 --> 00:01:49,520
doesn't have to be a server separate

46
00:01:49,520 --> 00:01:51,520
from a dc it can be but it doesn't have

47
00:01:51,520 --> 00:01:52,640
to be

48
00:01:52,640 --> 00:01:54,640
and this is a really complex and not

49
00:01:54,640 --> 00:01:56,960
properly understood system so we started

50
00:01:56,960 --> 00:02:00,479
diving in about five months ago and this

51
00:02:00,479 --> 00:02:01,520
you know the results of all that

52
00:02:01,520 --> 00:02:04,079
research is this presentation

53
00:02:04,079 --> 00:02:06,159
so at a high level clients will send

54
00:02:06,159 --> 00:02:07,840
what's known as a certificate signing

55
00:02:07,840 --> 00:02:09,919
request a csr to an enterprise

56
00:02:09,919 --> 00:02:12,560
certificate authority a ca which signs

57
00:02:12,560 --> 00:02:14,080
the issued certificates using the

58
00:02:14,080 --> 00:02:17,840
private key associated with the ca cert

59
00:02:17,840 --> 00:02:19,760
we'll walk through this graphically as

60
00:02:19,760 --> 00:02:22,720
well

61
00:02:22,720 --> 00:02:25,200
so an enterprise certificate authority

62
00:02:25,200 --> 00:02:27,280
generates a self-signed certificate

63
00:02:27,280 --> 00:02:29,760
that's then included into the nt off

64
00:02:29,760 --> 00:02:32,160
certificates object in the domain

65
00:02:32,160 --> 00:02:33,760
this is what's displayed here through a

66
00:02:33,760 --> 00:02:35,599
tool called certify which we'll cover as

67
00:02:35,599 --> 00:02:36,640
we're releasing this with the

68
00:02:36,640 --> 00:02:38,160
presentation as well

69
00:02:38,160 --> 00:02:40,160
so these are certificates that enable

70
00:02:40,160 --> 00:02:42,239
authentication for active directory

71
00:02:42,239 --> 00:02:44,160
essentially and it doesn't have to just

72
00:02:44,160 --> 00:02:47,360
be the root ca we see here the dcca

73
00:02:47,360 --> 00:02:49,680
there at the bottom that is the root ca

74
00:02:49,680 --> 00:02:52,000
at the top the caca that is a

75
00:02:52,000 --> 00:02:53,920
subordinate certificate authority so

76
00:02:53,920 --> 00:02:55,680
both of these

77
00:02:55,680 --> 00:02:57,920
the private key associated with these

78
00:02:57,920 --> 00:03:00,640
certificates can be used to sign

79
00:03:00,640 --> 00:03:02,239
certificates that can then allow

80
00:03:02,239 --> 00:03:04,640
authentication the domain so this object

81
00:03:04,640 --> 00:03:06,800
this nt auth certificates abbreviated to

82
00:03:06,800 --> 00:03:09,120
nt auth often is the root of domain

83
00:03:09,120 --> 00:03:12,720
based certificate authentication

84
00:03:14,000 --> 00:03:16,480
so certificate enrollment so

85
00:03:16,480 --> 00:03:18,640
how do you actually go about obtaining a

86
00:03:18,640 --> 00:03:20,879
certificate with adcs

87
00:03:20,879 --> 00:03:23,120
well underneath the very first thing

88
00:03:23,120 --> 00:03:24,799
that a client needs to do is generate

89
00:03:24,799 --> 00:03:28,319
their own public slash private key pair

90
00:03:28,319 --> 00:03:30,319
and then once they have that they will

91
00:03:30,319 --> 00:03:33,519
generate a csr or a certificate signing

92
00:03:33,519 --> 00:03:35,680
request and what this is is it's

93
00:03:35,680 --> 00:03:37,599
basically just like a message and inside

94
00:03:37,599 --> 00:03:39,280
that message it contains some

95
00:03:39,280 --> 00:03:40,480
information

96
00:03:40,480 --> 00:03:42,480
about the certificate that they want to

97
00:03:42,480 --> 00:03:44,480
request so this includes like what it's

98
00:03:44,480 --> 00:03:46,560
used for so for example like code

99
00:03:46,560 --> 00:03:49,440
signing or tls or whatever

100
00:03:49,440 --> 00:03:51,920
it includes info about the subject of

101
00:03:51,920 --> 00:03:54,480
the or whoever is requesting the

102
00:03:54,480 --> 00:03:57,360
certificate and also it contains a field

103
00:03:57,360 --> 00:04:00,239
containing uh the template and we'll

104
00:04:00,239 --> 00:04:01,760
talk a little bit about what that is in

105
00:04:01,760 --> 00:04:04,319
a sec so this message gets sent sent to

106
00:04:04,319 --> 00:04:07,280
the ca the ca looks at the certificate

107
00:04:07,280 --> 00:04:09,840
the csr the certificate signing request

108
00:04:09,840 --> 00:04:11,599
and it looks at that template that's

109
00:04:11,599 --> 00:04:13,120
specified

110
00:04:13,120 --> 00:04:16,000
the template is basically a blueprint of

111
00:04:16,000 --> 00:04:17,519
settings

112
00:04:17,519 --> 00:04:19,279
that the

113
00:04:19,279 --> 00:04:21,358
certificate is going to have once it's

114
00:04:21,358 --> 00:04:24,800
issued and assuming that what the ca is

115
00:04:24,800 --> 00:04:26,000
going to do is it's going to take a look

116
00:04:26,000 --> 00:04:28,160
at the csr it's going to compare it to

117
00:04:28,160 --> 00:04:29,840
what's in the template assuming

118
00:04:29,840 --> 00:04:32,800
everything is allowed so is this user

119
00:04:32,800 --> 00:04:34,560
actually allowed to

120
00:04:34,560 --> 00:04:36,160
obtain a certificate for what they're

121
00:04:36,160 --> 00:04:37,280
asking

122
00:04:37,280 --> 00:04:40,320
the search the ca will then sign a

123
00:04:40,320 --> 00:04:43,199
certificate using its private key and

124
00:04:43,199 --> 00:04:46,880
then return it back to the client and so

125
00:04:46,880 --> 00:04:48,160
then the client's going to take that

126
00:04:48,160 --> 00:04:50,560
certificate it has and it could put in

127
00:04:50,560 --> 00:04:51,759
the windows

128
00:04:51,759 --> 00:04:53,280
certificate store that's where most

129
00:04:53,280 --> 00:04:55,120
certificates will be found

130
00:04:55,120 --> 00:04:56,800
but you know at that point the client

131
00:04:56,800 --> 00:04:58,479
can do whatever it would like with the

132
00:04:58,479 --> 00:05:00,960
certificate

133
00:05:02,800 --> 00:05:04,479
so a little bit more about certificate

134
00:05:04,479 --> 00:05:06,960
templates uh so certificate templates

135
00:05:06,960 --> 00:05:09,600
are ad objects and

136
00:05:09,600 --> 00:05:12,800
what they do is they're blueprints of

137
00:05:12,800 --> 00:05:13,840
settings

138
00:05:13,840 --> 00:05:16,400
uh that for a certificate so there's a

139
00:05:16,400 --> 00:05:17,440
bunch of different settings that

140
00:05:17,440 --> 00:05:19,360
certificates can have such as like the

141
00:05:19,360 --> 00:05:22,880
lifetime uh what it's used for uh who's

142
00:05:22,880 --> 00:05:24,560
actually allowed to request those

143
00:05:24,560 --> 00:05:26,080
certificates so there's a bunch of

144
00:05:26,080 --> 00:05:28,080
different kinds of settings

145
00:05:28,080 --> 00:05:30,240
here on the right are is one

146
00:05:30,240 --> 00:05:32,160
specific setting that you want to be

147
00:05:32,160 --> 00:05:34,240
aware of which is called application

148
00:05:34,240 --> 00:05:35,600
policies

149
00:05:35,600 --> 00:05:38,560
otherwise known as enhanced key usages

150
00:05:38,560 --> 00:05:41,199
but this basically is defining what

151
00:05:41,199 --> 00:05:44,000
the certificate can be used for so here

152
00:05:44,000 --> 00:05:46,400
you can see a few different eku's so

153
00:05:46,400 --> 00:05:48,639
they enhance key usages

154
00:05:48,639 --> 00:05:49,919
down at the bottom there's one for

155
00:05:49,919 --> 00:05:51,840
client authentication one for code

156
00:05:51,840 --> 00:05:54,320
signing one for smart card logon so this

157
00:05:54,320 --> 00:05:56,479
is what the cert can actually be used

158
00:05:56,479 --> 00:05:58,000
for underneath

159
00:05:58,000 --> 00:06:00,160
and something important there is like

160
00:06:00,160 --> 00:06:01,360
this is

161
00:06:01,360 --> 00:06:03,919
certain eku's permit domain

162
00:06:03,919 --> 00:06:05,600
authentication so here you can see

163
00:06:05,600 --> 00:06:07,840
client authentication and smart card log

164
00:06:07,840 --> 00:06:10,720
on either one of those eku's if present

165
00:06:10,720 --> 00:06:12,160
in a certificate

166
00:06:12,160 --> 00:06:14,240
means that that certificate can then be

167
00:06:14,240 --> 00:06:18,560
used to authenticate to active directory

168
00:06:19,120 --> 00:06:21,840
so when that authentication takes place

169
00:06:21,840 --> 00:06:23,039
something

170
00:06:23,039 --> 00:06:25,280
that's useful to to know about is

171
00:06:25,280 --> 00:06:27,600
subject alternative names so

172
00:06:27,600 --> 00:06:29,759
when you're off when you off with a

173
00:06:29,759 --> 00:06:33,440
certificate to ad

174
00:06:33,440 --> 00:06:35,520
basically what a san a subject

175
00:06:35,520 --> 00:06:38,479
alternative name allows uh assert to do

176
00:06:38,479 --> 00:06:41,199
is it bind a different identity to it

177
00:06:41,199 --> 00:06:43,919
and so this is a generic sounds are

178
00:06:43,919 --> 00:06:45,680
generically a a different way that you

179
00:06:45,680 --> 00:06:48,319
can bind multiple identities to one cert

180
00:06:48,319 --> 00:06:50,479
this is commonly used in things like tls

181
00:06:50,479 --> 00:06:52,639
certificates where you may have a single

182
00:06:52,639 --> 00:06:55,199
web server that's serving content for

183
00:06:55,199 --> 00:06:57,360
several different domains so you'll have

184
00:06:57,360 --> 00:06:59,360
one cert but in the san there's going to

185
00:06:59,360 --> 00:07:01,199
be a an entry for each one of those

186
00:07:01,199 --> 00:07:03,680
domains but in the case of domain

187
00:07:03,680 --> 00:07:05,840
authentication the san is used to

188
00:07:05,840 --> 00:07:07,360
specify the

189
00:07:07,360 --> 00:07:10,560
who you are going to log on as with the

190
00:07:10,560 --> 00:07:12,639
certificate or who the certificate is

191
00:07:12,639 --> 00:07:14,960
valid for so that can become dangerous

192
00:07:14,960 --> 00:07:17,680
yes that can be very dangerous um

193
00:07:17,680 --> 00:07:20,639
because if i an attacker can

194
00:07:20,639 --> 00:07:22,880
manipulate that field or specify that

195
00:07:22,880 --> 00:07:25,039
field then you know i potentially could

196
00:07:25,039 --> 00:07:27,120
specify you know i want to be a da or

197
00:07:27,120 --> 00:07:28,800
something so we'll talk a little bit

198
00:07:28,800 --> 00:07:31,039
more about that later

199
00:07:31,039 --> 00:07:32,720
but ultimately the important thing here

200
00:07:32,720 --> 00:07:34,720
is whatever's in the sand

201
00:07:34,720 --> 00:07:36,080
uh

202
00:07:36,080 --> 00:07:37,680
ultimately ends up getting mapped to a

203
00:07:37,680 --> 00:07:40,560
user account in ad during authentication

204
00:07:40,560 --> 00:07:41,840
that's kind of what you're seeing here

205
00:07:41,840 --> 00:07:43,440
is you can see a subject down in the

206
00:07:43,440 --> 00:07:44,400
bottom left

207
00:07:44,400 --> 00:07:46,560
harmjoy but in the subject alternative

208
00:07:46,560 --> 00:07:48,800
name there is a

209
00:07:48,800 --> 00:07:50,879
separate user called administrator and

210
00:07:50,879 --> 00:07:53,280
so ultimately ad is going to log on as

211
00:07:53,280 --> 00:07:55,759
the administrator user

212
00:07:55,759 --> 00:07:59,639
when authentication occurs

213
00:08:01,199 --> 00:08:02,400
um

214
00:08:02,400 --> 00:08:04,560
when we've when before doing this

215
00:08:04,560 --> 00:08:06,400
research uh

216
00:08:06,400 --> 00:08:09,120
my understanding of certificates was a

217
00:08:09,120 --> 00:08:10,639
in regard to active directory is they

218
00:08:10,639 --> 00:08:12,800
were mostly dealt with

219
00:08:12,800 --> 00:08:14,400
smart cards

220
00:08:14,400 --> 00:08:17,199
this is not true certificates are used

221
00:08:17,199 --> 00:08:19,120
all over the place

222
00:08:19,120 --> 00:08:21,520
and particularly in the context of

223
00:08:21,520 --> 00:08:23,919
domain authentication

224
00:08:23,919 --> 00:08:25,759
you do not need a smart card in order to

225
00:08:25,759 --> 00:08:28,879
authenticate to aed with a certificate

226
00:08:28,879 --> 00:08:31,520
in particular so rubius and kikio have

227
00:08:31,520 --> 00:08:33,519
implementations to authenticate to aed

228
00:08:33,519 --> 00:08:35,599
using assert um

229
00:08:35,599 --> 00:08:37,919
rubius

230
00:08:37,919 --> 00:08:39,440
obtained this capability what was it

231
00:08:39,440 --> 00:08:41,760
like it was last year from c-cob or

232
00:08:41,760 --> 00:08:44,240
ethical chaos on twitter did an awesome

233
00:08:44,240 --> 00:08:46,880
awesome pull request to rubios to allow

234
00:08:46,880 --> 00:08:48,880
pk init usage so the ability to

235
00:08:48,880 --> 00:08:50,480
authenticate to active directory and get

236
00:08:50,480 --> 00:08:52,399
a ticket granting ticket using a

237
00:08:52,399 --> 00:08:53,519
certificate

238
00:08:53,519 --> 00:08:55,920
so this was the missing piece for us

239
00:08:55,920 --> 00:08:57,519
this is we didn't know it at the time

240
00:08:57,519 --> 00:08:59,920
but this really kind of enabled a lot of

241
00:08:59,920 --> 00:09:01,680
the offensive applications that we're

242
00:09:01,680 --> 00:09:03,440
going to talk about because if it wasn't

243
00:09:03,440 --> 00:09:05,360
for this we would have to try to use a

244
00:09:05,360 --> 00:09:07,120
virtual smart card to do some stuff on

245
00:09:07,120 --> 00:09:08,959
hosts or pivot things in which some

246
00:09:08,959 --> 00:09:10,160
people have done some research in the

247
00:09:10,160 --> 00:09:12,640
past on it just gets much more difficult

248
00:09:12,640 --> 00:09:14,480
being able to use this

249
00:09:14,480 --> 00:09:17,040
a c-sharp compact tool kit over like a

250
00:09:17,040 --> 00:09:18,640
command and control channel with the

251
00:09:18,640 --> 00:09:20,880
ability to do this really flexible pcan

252
00:09:20,880 --> 00:09:23,760
at authentication with certificates is

253
00:09:23,760 --> 00:09:25,279
awesome and it can become really really

254
00:09:25,279 --> 00:09:27,440
powerful which we'll show yeah and so

255
00:09:27,440 --> 00:09:28,560
that's what you're seeing down at the

256
00:09:28,560 --> 00:09:31,600
bottom this is rubius this kerberos

257
00:09:31,600 --> 00:09:33,120
attack tool

258
00:09:33,120 --> 00:09:34,959
it's authenticating to active directory

259
00:09:34,959 --> 00:09:36,959
using a certificate file so in this case

260
00:09:36,959 --> 00:09:39,760
the certificate is that dot pfx file

261
00:09:39,760 --> 00:09:42,560
and here you can see we're requesting a

262
00:09:42,560 --> 00:09:44,240
kerberos tgt

263
00:09:44,240 --> 00:09:45,839
with rubius and down at the bottom it's

264
00:09:45,839 --> 00:09:47,360
outputting it

265
00:09:47,360 --> 00:09:50,399
so this rubius is will authenticate

266
00:09:50,399 --> 00:09:52,480
using kerberos in addition to kerberos

267
00:09:52,480 --> 00:09:53,760
you can also authenticate with a

268
00:09:53,760 --> 00:09:57,120
certificate using s-channel which is the

269
00:09:57,120 --> 00:10:00,800
secure the the ssp that backs like tls

270
00:10:00,800 --> 00:10:05,839
and so uh the most commonly enabled uh

271
00:10:05,839 --> 00:10:09,040
protocol that supports um

272
00:10:09,040 --> 00:10:11,680
that supports tls client authentication

273
00:10:11,680 --> 00:10:13,920
i'd say is ldap s

274
00:10:13,920 --> 00:10:16,560
and so for example you can authenticate

275
00:10:16,560 --> 00:10:18,399
to active directory

276
00:10:18,399 --> 00:10:20,320
over the ldap protocol using a

277
00:10:20,320 --> 00:10:22,959
certificate

278
00:10:23,120 --> 00:10:23,839
so

279
00:10:23,839 --> 00:10:25,279
that's all the background now we're all

280
00:10:25,279 --> 00:10:27,600
experts in adcs that was five months of

281
00:10:27,600 --> 00:10:29,120
understanding trying to cram into ten

282
00:10:29,120 --> 00:10:31,040
minutes now we're going to get into some

283
00:10:31,040 --> 00:10:33,519
of the attacks we are just focusing on

284
00:10:33,519 --> 00:10:34,959
offense here in this presentation we'll

285
00:10:34,959 --> 00:10:36,399
talk about some more material at the end

286
00:10:36,399 --> 00:10:37,839
from the defensive standpoint or where

287
00:10:37,839 --> 00:10:39,519
you can find it but the first thing

288
00:10:39,519 --> 00:10:40,800
we're going to talk about is account

289
00:10:40,800 --> 00:10:43,440
persistence so long-term

290
00:10:43,440 --> 00:10:45,600
credential theft without touching lsas

291
00:10:45,600 --> 00:10:49,440
for both users and computers

292
00:10:49,839 --> 00:10:51,839
so we kind of split this into passive

293
00:10:51,839 --> 00:10:53,600
and active theft and then user and

294
00:10:53,600 --> 00:10:55,440
computer theft and there's different

295
00:10:55,440 --> 00:10:57,200
applications for each

296
00:10:57,200 --> 00:10:58,880
so for passive certificate thefts the

297
00:10:58,880 --> 00:11:02,959
way we view this is if there is an adcs

298
00:11:02,959 --> 00:11:05,120
environment already installed and hooked

299
00:11:05,120 --> 00:11:07,920
up to active directory it's often used

300
00:11:07,920 --> 00:11:09,360
there's a reason that it was put there

301
00:11:09,360 --> 00:11:11,440
so very very often we see

302
00:11:11,440 --> 00:11:13,760
that users or machines will have client

303
00:11:13,760 --> 00:11:15,279
authentication certificates or some

304
00:11:15,279 --> 00:11:17,839
other types of certificates on a host

305
00:11:17,839 --> 00:11:19,360
so if these

306
00:11:19,360 --> 00:11:21,120
certificates they have they have a

307
00:11:21,120 --> 00:11:23,600
private key associated with them if the

308
00:11:23,600 --> 00:11:26,880
private key is not protected by hardware

309
00:11:26,880 --> 00:11:28,640
so if it is not protected specifically

310
00:11:28,640 --> 00:11:30,560
by like a tpm

311
00:11:30,560 --> 00:11:32,720
hsm in some cases or smart card it's

312
00:11:32,720 --> 00:11:34,720
more common if it's not protected by

313
00:11:34,720 --> 00:11:36,720
hardware then it's protected using dp

314
00:11:36,720 --> 00:11:40,320
api the data protection application api

315
00:11:40,320 --> 00:11:42,640
so it's stored on the host in a way that

316
00:11:42,640 --> 00:11:44,320
you can recover it if you're executing

317
00:11:44,320 --> 00:11:46,640
code in that user or machine's context

318
00:11:46,640 --> 00:11:48,959
so maybe cats and sharp d ppi can steal

319
00:11:48,959 --> 00:11:50,720
these certificates and private keys

320
00:11:50,720 --> 00:11:52,880
there's also like was it cert stealer

321
00:11:52,880 --> 00:11:55,360
from the wover that came out recently

322
00:11:55,360 --> 00:11:57,200
this is a screenshot of using sharp deep

323
00:11:57,200 --> 00:11:59,440
api to recover the private key for a

324
00:11:59,440 --> 00:12:01,519
user context i'm not going to get into

325
00:12:01,519 --> 00:12:02,800
all the different ways you can abuse

326
00:12:02,800 --> 00:12:04,240
stuff with dp api there's lots of

327
00:12:04,240 --> 00:12:05,440
documentation

328
00:12:05,440 --> 00:12:07,680
on sharp dp api and the readme as well

329
00:12:07,680 --> 00:12:09,360
as with the memocat stuff but just

330
00:12:09,360 --> 00:12:11,120
showing that if the cert is already on

331
00:12:11,120 --> 00:12:12,320
the host there are ways that you can

332
00:12:12,320 --> 00:12:14,639
steal it and then reuse it for say auth

333
00:12:14,639 --> 00:12:17,120
an advantage to this too is it can d it

334
00:12:17,120 --> 00:12:18,720
can also export

335
00:12:18,720 --> 00:12:20,320
um

336
00:12:20,320 --> 00:12:23,279
exportable certificates so certificates

337
00:12:23,279 --> 00:12:25,200
can be marked as non-exportable and this

338
00:12:25,200 --> 00:12:26,800
will allow you to get those certificates

339
00:12:26,800 --> 00:12:27,600
as well

340
00:12:27,600 --> 00:12:29,279
now the more interesting thing to us is

341
00:12:29,279 --> 00:12:31,760
active certificate theft so users or

342
00:12:31,760 --> 00:12:34,000
machines can enroll in any template that

343
00:12:34,000 --> 00:12:36,240
they have enroll permissions for again

344
00:12:36,240 --> 00:12:38,240
we're glossing over a chunk of stuff

345
00:12:38,240 --> 00:12:40,240
here but suffice to say there's a couple

346
00:12:40,240 --> 00:12:41,920
of default templates specifically the

347
00:12:41,920 --> 00:12:44,079
user and machine templates that allow

348
00:12:44,079 --> 00:12:46,880
domain users and domain computers to

349
00:12:46,880 --> 00:12:49,120
enroll you know prospectively and these

350
00:12:49,120 --> 00:12:50,720
templates allow for domain

351
00:12:50,720 --> 00:12:52,000
authentication they have the client

352
00:12:52,000 --> 00:12:54,000
authentication eku in them

353
00:12:54,000 --> 00:12:56,320
so if i'm in a user's context i can just

354
00:12:56,320 --> 00:12:58,959
actively enroll in this template

355
00:12:58,959 --> 00:13:00,800
and get assert for it because we want

356
00:13:00,800 --> 00:13:02,800
that template that has 80 auth because

357
00:13:02,800 --> 00:13:05,279
to abuse it for a user we can use like

358
00:13:05,279 --> 00:13:07,760
rubius to get a user's tgt and also get

359
00:13:07,760 --> 00:13:10,000
their ntlm their plaintext and tlm we'll

360
00:13:10,000 --> 00:13:12,399
talk about that in a few slides

361
00:13:12,399 --> 00:13:14,560
but from a computer context it lets us

362
00:13:14,560 --> 00:13:16,000
compromise the computer through a

363
00:13:16,000 --> 00:13:17,839
resource base concerning delegation or

364
00:13:17,839 --> 00:13:20,480
just s for u2 self

365
00:13:20,480 --> 00:13:22,079
which which basically means that we now

366
00:13:22,079 --> 00:13:23,920
have persistent access to this computer

367
00:13:23,920 --> 00:13:25,839
we can off as that computer account yeah

368
00:13:25,839 --> 00:13:27,839
with us as a certificate with a

369
00:13:27,839 --> 00:13:30,320
certificate so we can enroll in these

370
00:13:30,320 --> 00:13:32,720
through either dcom using a a tool

371
00:13:32,720 --> 00:13:34,000
called certify which we'll talk about

372
00:13:34,000 --> 00:13:35,600
that we're releasing with this talk

373
00:13:35,600 --> 00:13:37,040
through rpc

374
00:13:37,040 --> 00:13:39,360
as well as the adcs web enrollment

375
00:13:39,360 --> 00:13:40,560
endpoints which we're going to talk

376
00:13:40,560 --> 00:13:41,920
about in a few slides in one of the next

377
00:13:41,920 --> 00:13:44,160
sections

378
00:13:44,160 --> 00:13:45,760
so this is what certify looks like

379
00:13:45,760 --> 00:13:47,519
there's a lot of abuses for a lot of

380
00:13:47,519 --> 00:13:49,440
things that certifie can use to find and

381
00:13:49,440 --> 00:13:52,320
abuse these misconfigurations it's a

382
00:13:52,320 --> 00:13:54,079
it's a c-sharp toolkit that again we're

383
00:13:54,079 --> 00:13:55,519
releasing with this talk

384
00:13:55,519 --> 00:13:57,839
um here in this case we're requesting a

385
00:13:57,839 --> 00:13:59,839
certificate for the user template using

386
00:13:59,839 --> 00:14:01,680
our current context and we're specifying

387
00:14:01,680 --> 00:14:03,519
the certificate authority

388
00:14:03,519 --> 00:14:07,120
so after this we now have a pem blob

389
00:14:07,120 --> 00:14:09,920
that we can transpose or transform to a

390
00:14:09,920 --> 00:14:12,959
pfx that can then be used with rubius so

391
00:14:12,959 --> 00:14:14,720
running this in a non-elevated user

392
00:14:14,720 --> 00:14:17,199
context lets us steal

393
00:14:17,199 --> 00:14:19,279
this user's credentials essentially or

394
00:14:19,279 --> 00:14:20,800
you know it lets us authenticate as that

395
00:14:20,800 --> 00:14:22,720
user for a long period of time and we'll

396
00:14:22,720 --> 00:14:24,800
talk about timelines here in a second

397
00:14:24,800 --> 00:14:26,639
so we think this is pretty cool from an

398
00:14:26,639 --> 00:14:28,639
offensive tradecraft standpoint because

399
00:14:28,639 --> 00:14:30,639
some of the advantages are it doesn't

400
00:14:30,639 --> 00:14:32,800
touch lsas so everyone's worried about

401
00:14:32,800 --> 00:14:34,880
like different ways to like mini dump or

402
00:14:34,880 --> 00:14:36,880
rip memory out of ls because people want

403
00:14:36,880 --> 00:14:39,120
credentials in order to reauthenticate

404
00:14:39,120 --> 00:14:41,440
to somebody if we're talking about the

405
00:14:41,440 --> 00:14:43,040
end goal of being able to authenticate

406
00:14:43,040 --> 00:14:44,639
as that person on that machine in the

407
00:14:44,639 --> 00:14:46,880
domain this gives us an alternative that

408
00:14:46,880 --> 00:14:48,880
doesn't touch elsas at all

409
00:14:48,880 --> 00:14:50,800
and it doesn't even need elevation for

410
00:14:50,800 --> 00:14:52,880
user contacts we do have to be elevated

411
00:14:52,880 --> 00:14:54,560
for a machine context because you can

412
00:14:54,560 --> 00:14:56,000
imagine if you could just request a

413
00:14:56,000 --> 00:14:57,760
machine cert non-elevated that would be

414
00:14:57,760 --> 00:14:59,760
an instant you know proves and that

415
00:14:59,760 --> 00:15:01,440
would you know have to be patched so you

416
00:15:01,440 --> 00:15:03,440
do have to be elevated to request a

417
00:15:03,440 --> 00:15:05,360
computer cert but again you don't have

418
00:15:05,360 --> 00:15:07,360
to touch lsas and that's an alternative

419
00:15:07,360 --> 00:15:10,480
machine persistence method

420
00:15:10,480 --> 00:15:12,720
there's also very few detection methods

421
00:15:12,720 --> 00:15:15,680
because this is a new technique we think

422
00:15:15,680 --> 00:15:17,040
there's some stuff kind of written about

423
00:15:17,040 --> 00:15:18,240
it a little bit but you know we're

424
00:15:18,240 --> 00:15:19,920
hoping to popularize it to a degree and

425
00:15:19,920 --> 00:15:22,320
get more defenses in place we talk about

426
00:15:22,320 --> 00:15:23,440
a large

427
00:15:23,440 --> 00:15:24,880
chunk of detection and prevention

428
00:15:24,880 --> 00:15:26,560
methods in a white paper um that we'll

429
00:15:26,560 --> 00:15:28,560
talk about the end of the talk

430
00:15:28,560 --> 00:15:29,680
so it's

431
00:15:29,680 --> 00:15:31,279
lee is a fan of saying like everything

432
00:15:31,279 --> 00:15:32,720
is stealthy until somebody is looking

433
00:15:32,720 --> 00:15:34,639
for it so right now nobody's looking for

434
00:15:34,639 --> 00:15:36,639
this so it's probably going to get by uh

435
00:15:36,639 --> 00:15:38,240
things much better especially versus

436
00:15:38,240 --> 00:15:40,800
like ripping stuff out of lsas but you

437
00:15:40,800 --> 00:15:43,440
know it's definitely detectable

438
00:15:43,440 --> 00:15:45,440
and people write if they you collect the

439
00:15:45,440 --> 00:15:47,120
correct telemetry and actually write

440
00:15:47,120 --> 00:15:48,720
detections for it

441
00:15:48,720 --> 00:15:50,240
but also it's separate credential

442
00:15:50,240 --> 00:15:52,160
material from passwords it works even if

443
00:15:52,160 --> 00:15:54,000
account changes his password because the

444
00:15:54,000 --> 00:15:55,600
search still valid and has a long

445
00:15:55,600 --> 00:15:58,160
lifetime so by default the user and

446
00:15:58,160 --> 00:16:00,480
machine templates issue certificates

447
00:16:00,480 --> 00:16:02,959
valid for one year but this can actually

448
00:16:02,959 --> 00:16:03,920
be

449
00:16:03,920 --> 00:16:05,519
you know increased like we've seen

450
00:16:05,519 --> 00:16:07,120
certificates for three or four years or

451
00:16:07,120 --> 00:16:09,680
five years so if someone had actively

452
00:16:09,680 --> 00:16:12,160
maliciously enrolled for a user or

453
00:16:12,160 --> 00:16:13,519
system and one of those templates they

454
00:16:13,519 --> 00:16:15,040
could come back years later and still

455
00:16:15,040 --> 00:16:16,720
authenticate and this is crucial for

456
00:16:16,720 --> 00:16:18,639
incident responders to understand twos

457
00:16:18,639 --> 00:16:19,680
because

458
00:16:19,680 --> 00:16:20,800
i've seen

459
00:16:20,800 --> 00:16:22,720
certificate tradecraft

460
00:16:22,720 --> 00:16:26,240
or certificate adcs processes absent

461
00:16:26,240 --> 00:16:27,920
from most incident response like

462
00:16:27,920 --> 00:16:30,000
playbooks and so if an account gets

463
00:16:30,000 --> 00:16:31,360
compromised or a computer gets

464
00:16:31,360 --> 00:16:33,120
compromised for you know five minutes an

465
00:16:33,120 --> 00:16:36,320
attacker could obtain certificates that

466
00:16:36,320 --> 00:16:38,880
could maybe work for up to a year even

467
00:16:38,880 --> 00:16:41,839
across you know machine wipes or if the

468
00:16:41,839 --> 00:16:44,240
account's password is reset so

469
00:16:44,240 --> 00:16:46,320
uh this is very awesome from an attacker

470
00:16:46,320 --> 00:16:48,240
perspective

471
00:16:48,240 --> 00:16:49,199
all right

472
00:16:49,199 --> 00:16:52,000
now domain escalation

473
00:16:52,000 --> 00:16:52,880
so

474
00:16:52,880 --> 00:16:54,399
we talked a little bit about templates

475
00:16:54,399 --> 00:16:56,399
uh remember templates are those

476
00:16:56,399 --> 00:16:59,040
blueprints of settings uh that define

477
00:16:59,040 --> 00:17:01,360
you know when you uh like

478
00:17:01,360 --> 00:17:04,000
characteristics of the certificates

479
00:17:04,000 --> 00:17:06,480
and when you there's a set of

480
00:17:06,480 --> 00:17:10,319
settings uh on these templates that may

481
00:17:10,319 --> 00:17:12,720
enable uh privilege escalation in a

482
00:17:12,720 --> 00:17:14,160
domain

483
00:17:14,160 --> 00:17:16,160
but some general requirements in order

484
00:17:16,160 --> 00:17:19,039
to abuse these are first you know

485
00:17:19,039 --> 00:17:21,520
a low privileged user has to be able to

486
00:17:21,520 --> 00:17:23,679
request a certificate so a low

487
00:17:23,679 --> 00:17:25,599
privileged user has to be able

488
00:17:25,599 --> 00:17:27,599
has to have enrollment rights in order

489
00:17:27,599 --> 00:17:30,240
to obtain a certificate uh or request a

490
00:17:30,240 --> 00:17:33,360
certificate in the first place

491
00:17:33,360 --> 00:17:35,520
how this is defined is in order to

492
00:17:35,520 --> 00:17:37,760
enroll in a certificate template the

493
00:17:37,760 --> 00:17:40,160
template needs to grant the user access

494
00:17:40,160 --> 00:17:42,880
and that act that access is defined on

495
00:17:42,880 --> 00:17:45,760
the certificate template

496
00:17:45,760 --> 00:17:47,600
object and so there's a security

497
00:17:47,600 --> 00:17:49,760
descriptor on that object that grants

498
00:17:49,760 --> 00:17:52,559
enrollment rights

499
00:17:52,720 --> 00:17:54,480
in addition another setting on

500
00:17:54,480 --> 00:17:57,120
certificate templates is a setting

501
00:17:57,120 --> 00:17:59,679
called manager approval and this is a

502
00:17:59,679 --> 00:18:01,760
setting it's a protection that can be

503
00:18:01,760 --> 00:18:03,840
enabled that basically says you know i

504
00:18:03,840 --> 00:18:06,080
can request a certificate but before the

505
00:18:06,080 --> 00:18:08,960
ca is going to issue it to me uh a

506
00:18:08,960 --> 00:18:11,039
another person needs to come in and

507
00:18:11,039 --> 00:18:14,480
review it and then approve it and so we

508
00:18:14,480 --> 00:18:17,200
in order for instant domain escalation

509
00:18:17,200 --> 00:18:19,120
to occur we do not want that to be

510
00:18:19,120 --> 00:18:22,559
enabled um in addition there's another

511
00:18:22,559 --> 00:18:23,840
thing that we don't really have a lot of

512
00:18:23,840 --> 00:18:25,840
time to go into but it has to do with

513
00:18:25,840 --> 00:18:28,480
enrollment agents and um

514
00:18:28,480 --> 00:18:30,320
and it's called authorized signatures

515
00:18:30,320 --> 00:18:32,640
and basically it's another protection

516
00:18:32,640 --> 00:18:35,520
yeah another protection

517
00:18:36,240 --> 00:18:38,640
so uh

518
00:18:38,640 --> 00:18:39,520
the

519
00:18:39,520 --> 00:18:42,080
i'd say the most widely known or the

520
00:18:42,080 --> 00:18:43,919
misconfiguration that we've seen most

521
00:18:43,919 --> 00:18:45,679
most widely is

522
00:18:45,679 --> 00:18:46,640
uh

523
00:18:46,640 --> 00:18:49,600
one where an attacker can specify an

524
00:18:49,600 --> 00:18:51,120
arbitrary sam

525
00:18:51,120 --> 00:18:52,960
in the certificate so remember the sand

526
00:18:52,960 --> 00:18:54,720
specifies who

527
00:18:54,720 --> 00:18:55,520
the

528
00:18:55,520 --> 00:18:58,400
certificate is 4 in active directory so

529
00:18:58,400 --> 00:19:00,480
when you log on it's ad will look at the

530
00:19:00,480 --> 00:19:03,120
san so if i an attacker can specify the

531
00:19:03,120 --> 00:19:06,880
sam i can become basically anybody

532
00:19:06,880 --> 00:19:08,640
the certificate also needs to enable

533
00:19:08,640 --> 00:19:12,320
domain authentication so it needs an eku

534
00:19:12,320 --> 00:19:14,400
for a client authentication smart card

535
00:19:14,400 --> 00:19:16,400
authentication

536
00:19:16,400 --> 00:19:19,600
sub ca any purpose any of those

537
00:19:19,600 --> 00:19:21,760
in addition uh

538
00:19:21,760 --> 00:19:23,760
the when you request that then the ca

539
00:19:23,760 --> 00:19:26,000
needs to actually sign and

540
00:19:26,000 --> 00:19:28,240
issue a certificate back

541
00:19:28,240 --> 00:19:30,320
processing the attacker's supplied san

542
00:19:30,320 --> 00:19:31,760
so there's certain settings that need to

543
00:19:31,760 --> 00:19:34,960
be enabled in order for the ca to

544
00:19:34,960 --> 00:19:39,600
process the user-supplied sam

545
00:19:39,600 --> 00:19:42,640
and if all those conditions are met then

546
00:19:42,640 --> 00:19:44,400
an attacker can be

547
00:19:44,400 --> 00:19:47,200
can become any account in the domain and

548
00:19:47,200 --> 00:19:48,400
so that's what you're kind of seeing

549
00:19:48,400 --> 00:19:50,640
right there is you know the attacker is

550
00:19:50,640 --> 00:19:52,640
that low privileged user but the

551
00:19:52,640 --> 00:19:54,799
attacker could specify an alternate

552
00:19:54,799 --> 00:19:56,720
subject alternative name and in this

553
00:19:56,720 --> 00:19:58,640
case it's the it administrator down

554
00:19:58,640 --> 00:19:59,919
there at the bottom and we'll show a

555
00:19:59,919 --> 00:20:02,559
demo of that here in a second

556
00:20:02,559 --> 00:20:04,240
so there's eight escalation scenarios

557
00:20:04,240 --> 00:20:06,000
we've covered we're not going to go into

558
00:20:06,000 --> 00:20:07,440
depth on all of them we're going to hit

559
00:20:07,440 --> 00:20:08,880
one of the more interesting ones in

560
00:20:08,880 --> 00:20:11,280
depth here in a second but the first one

561
00:20:11,280 --> 00:20:13,280
we actually broke these out we numbered

562
00:20:13,280 --> 00:20:14,799
them we numbered all the attacks because

563
00:20:14,799 --> 00:20:15,919
there were so many of them from a

564
00:20:15,919 --> 00:20:17,280
tradecraft standpoint and we actually

565
00:20:17,280 --> 00:20:18,640
linked these to all the prevention and

566
00:20:18,640 --> 00:20:20,559
detection stuff but the first one that

567
00:20:20,559 --> 00:20:21,600
we're going to demo you have to have

568
00:20:21,600 --> 00:20:23,919
those general requirements an eku that

569
00:20:23,919 --> 00:20:25,919
allows authentication like lee mentioned

570
00:20:25,919 --> 00:20:27,760
and the specific flag called enrollee

571
00:20:27,760 --> 00:20:29,520
supply subject this allows you to

572
00:20:29,520 --> 00:20:32,159
specify an alternative san or a subject

573
00:20:32,159 --> 00:20:33,679
alternative name we'll demo that one

574
00:20:33,679 --> 00:20:34,799
here in a second

575
00:20:34,799 --> 00:20:36,559
escalation 2 general requirements then

576
00:20:36,559 --> 00:20:39,520
the any purpose or no eku for sub ca

577
00:20:39,520 --> 00:20:41,280
while this doesn't allow immediate

578
00:20:41,280 --> 00:20:43,039
domain compromise as far as we know you

579
00:20:43,039 --> 00:20:46,240
can create new certificates with any eku

580
00:20:46,240 --> 00:20:48,080
and arbitrary certificate values so this

581
00:20:48,080 --> 00:20:50,080
can potentially have implications for

582
00:20:50,080 --> 00:20:52,320
things like saml adfs ipsec things like

583
00:20:52,320 --> 00:20:53,360
that

584
00:20:53,360 --> 00:20:54,720
this is an open area of research that

585
00:20:54,720 --> 00:20:56,960
we're continuing to look into

586
00:20:56,960 --> 00:20:58,640
escalation 3 this one's definitely more

587
00:20:58,640 --> 00:21:00,799
complicated but uh you need the general

588
00:21:00,799 --> 00:21:02,320
requirements and no enrollment agent

589
00:21:02,320 --> 00:21:03,919
restrictions and you have to have the

590
00:21:03,919 --> 00:21:05,840
certificate request agent eku and

591
00:21:05,840 --> 00:21:07,440
basically this means that you can use

592
00:21:07,440 --> 00:21:09,200
this cert to request

593
00:21:09,200 --> 00:21:11,520
another cert on behalf of somebody else

594
00:21:11,520 --> 00:21:14,080
so there's things called these specific

595
00:21:14,080 --> 00:21:15,200
rights that need to apply to the

596
00:21:15,200 --> 00:21:16,559
secondary template this is really

597
00:21:16,559 --> 00:21:18,080
complicated we break all this out in the

598
00:21:18,080 --> 00:21:20,320
white paper um and blog post to a

599
00:21:20,320 --> 00:21:22,000
certain degree but these these

600
00:21:22,000 --> 00:21:23,520
situations are abusable even if they

601
00:21:23,520 --> 00:21:25,120
sound complex

602
00:21:25,120 --> 00:21:26,880
so the first demo we're gonna show

603
00:21:26,880 --> 00:21:28,400
certify

604
00:21:28,400 --> 00:21:30,159
finding vulnerable certificate templates

605
00:21:30,159 --> 00:21:32,320
which is fine vulnerable

606
00:21:32,320 --> 00:21:34,159
we see okay we have the enrollee supply

607
00:21:34,159 --> 00:21:35,919
subject there's no issuance requirements

608
00:21:35,919 --> 00:21:37,600
those protections we can authenticate to

609
00:21:37,600 --> 00:21:39,120
active directory with client auth and

610
00:21:39,120 --> 00:21:41,200
any user can enroll in the enrollment

611
00:21:41,200 --> 00:21:42,320
rights

612
00:21:42,320 --> 00:21:43,600
so we're going to enroll in this

613
00:21:43,600 --> 00:21:45,520
template and supply an alternative name

614
00:21:45,520 --> 00:21:47,280
of administrator

615
00:21:47,280 --> 00:21:49,120
even though we're running as low priv

616
00:21:49,120 --> 00:21:50,320
it's going to go through it's going to

617
00:21:50,320 --> 00:21:52,000
issue the cert to us we're going to get

618
00:21:52,000 --> 00:21:52,799
this

619
00:21:52,799 --> 00:21:53,919
pen blob

620
00:21:53,919 --> 00:21:56,400
with that alt name that we requested

621
00:21:56,400 --> 00:21:57,760
so we're going to take this private key

622
00:21:57,760 --> 00:21:59,679
and certificate and transform it to a

623
00:21:59,679 --> 00:22:03,039
pfx which is the format needed by rubius

624
00:22:03,039 --> 00:22:05,600
we can do this with openssl

625
00:22:05,600 --> 00:22:07,280
we do password protect the resulting

626
00:22:07,280 --> 00:22:08,559
cert because we don't just want to leave

627
00:22:08,559 --> 00:22:10,559
it around for anyone to use

628
00:22:10,559 --> 00:22:11,840
here we're using the super secure

629
00:22:11,840 --> 00:22:13,440
password password

630
00:22:13,440 --> 00:22:15,440
i'm showing here that i cannot access

631
00:22:15,440 --> 00:22:17,360
the domain controller's file system i'm

632
00:22:17,360 --> 00:22:18,960
going to use the cert that can off as

633
00:22:18,960 --> 00:22:21,440
administrator to get a tgt

634
00:22:21,440 --> 00:22:23,120
i'm going to ptt it to apply it to my

635
00:22:23,120 --> 00:22:25,840
current session it's imported pknit let

636
00:22:25,840 --> 00:22:27,840
me authenticate as administrator who is

637
00:22:27,840 --> 00:22:30,159
a da

638
00:22:30,159 --> 00:22:32,720
and then i can access the file system

639
00:22:32,720 --> 00:22:34,400
great so that's a common scenario that

640
00:22:34,400 --> 00:22:36,799
we have seen in the real world yes we've

641
00:22:36,799 --> 00:22:39,120
exploited this on several occasions now

642
00:22:39,120 --> 00:22:40,320
so a few more of the escalation

643
00:22:40,320 --> 00:22:42,880
scenarios isolation four is vulnerable

644
00:22:42,880 --> 00:22:44,559
certificate template access control so

645
00:22:44,559 --> 00:22:46,320
if you have edit rights over a template

646
00:22:46,320 --> 00:22:47,919
you can edit those vulnerable settings

647
00:22:47,919 --> 00:22:49,440
and basically fixate some of the

648
00:22:49,440 --> 00:22:50,400
additional

649
00:22:50,400 --> 00:22:52,480
you know escalation one through three

650
00:22:52,480 --> 00:22:54,960
discussion five vulnerable pki object

651
00:22:54,960 --> 00:22:56,640
access control so like other objects in

652
00:22:56,640 --> 00:22:58,400
active directory that affect pki the

653
00:22:58,400 --> 00:22:59,840
different containers and like all the

654
00:22:59,840 --> 00:23:01,200
different little weird inner work things

655
00:23:01,200 --> 00:23:03,120
like stuff like that nt certificates

656
00:23:03,120 --> 00:23:05,120
object if you can edit that then you

657
00:23:05,120 --> 00:23:06,720
know you can add whatever cert you want

658
00:23:06,720 --> 00:23:09,120
yeah you can add a rogue search advocate

659
00:23:09,120 --> 00:23:10,799
escalation 6 is interesting there's a

660
00:23:10,799 --> 00:23:13,120
flag that can be set in a ca called edit

661
00:23:13,120 --> 00:23:15,120
if attribute subject alternative name

662
00:23:15,120 --> 00:23:17,120
this allows certificate sign-in requests

663
00:23:17,120 --> 00:23:19,360
for any template to specify a subject

664
00:23:19,360 --> 00:23:21,679
alternative name so if this flag is set

665
00:23:21,679 --> 00:23:24,240
on a ca then any template that allows

666
00:23:24,240 --> 00:23:26,000
domain authentication that doesn't have

667
00:23:26,000 --> 00:23:27,520
manager approval or issuance

668
00:23:27,520 --> 00:23:30,400
requirements you can abuse and this is a

669
00:23:30,400 --> 00:23:32,559
registry setting that we've seen a lot

670
00:23:32,559 --> 00:23:34,720
of vendor documentation recommend

671
00:23:34,720 --> 00:23:36,400
enabling it in order for the product to

672
00:23:36,400 --> 00:23:38,240
work it's like an it just works type

673
00:23:38,240 --> 00:23:39,600
thing yeah but it's extremely and

674
00:23:39,600 --> 00:23:41,120
microsoft says this is dangerous this

675
00:23:41,120 --> 00:23:43,919
isn't like brand new information yeah

676
00:23:43,919 --> 00:23:46,480
um and seven is vulnerable ca access

677
00:23:46,480 --> 00:23:48,240
control so the certificate authority

678
00:23:48,240 --> 00:23:49,760
itself has access control um

679
00:23:49,760 --> 00:23:51,360
specifically the managed ca permission

680
00:23:51,360 --> 00:23:53,039
can be used to like

681
00:23:53,039 --> 00:23:55,120
fixate or like you know flip that

682
00:23:55,120 --> 00:23:57,520
registry bit for escalation six

683
00:23:57,520 --> 00:23:59,679
now the really interesting one

684
00:23:59,679 --> 00:24:02,880
yeah so uh escalation eight is ntlm

685
00:24:02,880 --> 00:24:06,640
relay to the hd the adcs http enrollment

686
00:24:06,640 --> 00:24:07,679
endpoints

687
00:24:07,679 --> 00:24:09,120
so

688
00:24:09,120 --> 00:24:10,640
when you install active directory

689
00:24:10,640 --> 00:24:12,480
certificate services there are some

690
00:24:12,480 --> 00:24:14,400
optional roles that you can enable that

691
00:24:14,400 --> 00:24:16,960
allow you to request a certificate

692
00:24:16,960 --> 00:24:19,279
using web-based technologies so by

693
00:24:19,279 --> 00:24:21,600
default the only one the only protocols

694
00:24:21,600 --> 00:24:24,240
that are supported are dcom and rpc

695
00:24:24,240 --> 00:24:26,480
but you can add these extra server roles

696
00:24:26,480 --> 00:24:29,279
and you can use http in order to request

697
00:24:29,279 --> 00:24:30,640
certificates

698
00:24:30,640 --> 00:24:32,480
uh the interesting thing here is all of

699
00:24:32,480 --> 00:24:35,279
those http endpoints are vulnerable to

700
00:24:35,279 --> 00:24:38,640
ntlm relay so that means you know for us

701
00:24:38,640 --> 00:24:40,559
as attackers that's great because we can

702
00:24:40,559 --> 00:24:43,200
impersonate people while uh accessing

703
00:24:43,200 --> 00:24:44,640
them

704
00:24:44,640 --> 00:24:46,799
the implication here is that if there is

705
00:24:46,799 --> 00:24:49,200
a user enrollable

706
00:24:49,200 --> 00:24:50,559
uh

707
00:24:50,559 --> 00:24:54,480
template in adcs so basically if i can

708
00:24:54,480 --> 00:24:56,320
there's a template that allows me to

709
00:24:56,320 --> 00:24:59,200
enroll and obtain a you know

710
00:24:59,200 --> 00:25:01,360
a certificate that allows for for domain

711
00:25:01,360 --> 00:25:02,640
authentication

712
00:25:02,640 --> 00:25:05,600
then i can you know obtain a certificate

713
00:25:05,600 --> 00:25:09,200
as the victim user and it extends my

714
00:25:09,200 --> 00:25:12,320
ntlm relay window so one of the problems

715
00:25:12,320 --> 00:25:14,720
or one of the i'd say restrictions with

716
00:25:14,720 --> 00:25:16,720
ntlm relay is they're somewhat

717
00:25:16,720 --> 00:25:19,279
short-lived and so this allows me to

718
00:25:19,279 --> 00:25:20,960
kind of expand the window of

719
00:25:20,960 --> 00:25:23,360
impersonation so i can immediately relay

720
00:25:23,360 --> 00:25:27,039
that to adcs obtain a certificate as the

721
00:25:27,039 --> 00:25:29,520
victim user and now i can log on as that

722
00:25:29,520 --> 00:25:31,679
user for you know up to a year

723
00:25:31,679 --> 00:25:33,679
using that certificate so that's one

724
00:25:33,679 --> 00:25:36,159
really cool like awesome benefit of

725
00:25:36,159 --> 00:25:37,600
abusing this

726
00:25:37,600 --> 00:25:40,080
an additional one is

727
00:25:40,080 --> 00:25:43,200
we can combine this with the printer bug

728
00:25:43,200 --> 00:25:46,400
to impersonate any computer in the

729
00:25:46,400 --> 00:25:48,880
network that has spooler enabled so what

730
00:25:48,880 --> 00:25:50,880
is the printer bug the printer bug is a

731
00:25:50,880 --> 00:25:51,840
a

732
00:25:51,840 --> 00:25:55,440
little feature i found a few years back

733
00:25:55,440 --> 00:25:57,520
and what it does is it allows me to

734
00:25:57,520 --> 00:25:58,480
cause

735
00:25:58,480 --> 00:26:01,360
any machine to authenticate to me if

736
00:26:01,360 --> 00:26:03,440
spooler is running on that machine so i

737
00:26:03,440 --> 00:26:05,279
can basically say hey

738
00:26:05,279 --> 00:26:06,240
you know

739
00:26:06,240 --> 00:26:07,840
hey server over there please

740
00:26:07,840 --> 00:26:10,240
authenticate to me and this is great for

741
00:26:10,240 --> 00:26:12,480
ntlm relay scenarios because i can say

742
00:26:12,480 --> 00:26:14,799
hey server please authenticate to me and

743
00:26:14,799 --> 00:26:17,039
then when it does that i can use ntlm

744
00:26:17,039 --> 00:26:20,000
relay to pass it on and impersonate that

745
00:26:20,000 --> 00:26:22,880
user to to different services so in this

746
00:26:22,880 --> 00:26:24,880
case i can relay it to the http

747
00:26:24,880 --> 00:26:26,640
endpoints and then impersonate that

748
00:26:26,640 --> 00:26:28,799
computer and we'll show a demo of it

749
00:26:28,799 --> 00:26:30,240
here yes

750
00:26:30,240 --> 00:26:32,960
so here i'm just showing that i'm i'm an

751
00:26:32,960 --> 00:26:35,200
attacker i'm a low prived attacker i

752
00:26:35,200 --> 00:26:37,200
have a windows and a linux machine so my

753
00:26:37,200 --> 00:26:39,200
first step is i'm going to create a

754
00:26:39,200 --> 00:26:42,000
certificate request

755
00:26:42,000 --> 00:26:44,480
i'm doing this in a very manual way so

756
00:26:44,480 --> 00:26:47,679
using openssl creating the csr

757
00:26:47,679 --> 00:26:50,320
and now i'm going to kind of prep this

758
00:26:50,320 --> 00:26:52,960
csr for the attack i'm going to uri

759
00:26:52,960 --> 00:26:54,240
encode it

760
00:26:54,240 --> 00:26:56,799
because we're interacting with the http

761
00:26:56,799 --> 00:26:59,840
endpoints so i'm going to ur encode that

762
00:26:59,840 --> 00:27:02,480
certificate request and now i'm going to

763
00:27:02,480 --> 00:27:05,200
prepare the actual curl command that i'm

764
00:27:05,200 --> 00:27:07,600
going to use to request a certificate

765
00:27:07,600 --> 00:27:09,120
and so that's the command i'm actually

766
00:27:09,120 --> 00:27:10,400
going to run

767
00:27:10,400 --> 00:27:12,640
and now i'm going to

768
00:27:12,640 --> 00:27:14,480
get that command ready to run but not

769
00:27:14,480 --> 00:27:16,159
execute it yet

770
00:27:16,159 --> 00:27:18,320
first i'm going to start up

771
00:27:18,320 --> 00:27:22,480
ntlm relay the ntlm relay x and in its

772
00:27:22,480 --> 00:27:24,559
sucks mode and so that's going to start

773
00:27:24,559 --> 00:27:26,640
up uh right now

774
00:27:26,640 --> 00:27:28,799
and now i'm going to coerce a domain

775
00:27:28,799 --> 00:27:30,799
controller to authenticate to my

776
00:27:30,799 --> 00:27:32,399
attacker machine here

777
00:27:32,399 --> 00:27:35,120
uh where i have ntlm relay running so

778
00:27:35,120 --> 00:27:37,360
i'm going to trigger that now that runs

779
00:27:37,360 --> 00:27:39,360
now i'm going to issue my request

780
00:27:39,360 --> 00:27:40,720
and it's going to

781
00:27:40,720 --> 00:27:42,720
use the relay

782
00:27:42,720 --> 00:27:45,279
to request a certificate as that domain

783
00:27:45,279 --> 00:27:47,840
controller so we got one we got an id

784
00:27:47,840 --> 00:27:50,159
there so now we need to download that

785
00:27:50,159 --> 00:27:52,799
certificate that's associated with that

786
00:27:52,799 --> 00:27:53,679
id

787
00:27:53,679 --> 00:27:55,760
so we're going to trigger the ntlm relay

788
00:27:55,760 --> 00:27:57,200
again here

789
00:27:57,200 --> 00:27:59,200
so that we can authenticate and download

790
00:27:59,200 --> 00:28:01,279
the certificate so that's what we're

791
00:28:01,279 --> 00:28:02,720
doing we're going to trigger coerce the

792
00:28:02,720 --> 00:28:05,520
authentication now we are downloading it

793
00:28:05,520 --> 00:28:07,840
and we have downloaded it to a file a

794
00:28:07,840 --> 00:28:10,720
dot server file there we can see that

795
00:28:10,720 --> 00:28:13,520
it is down it is on disk now

796
00:28:13,520 --> 00:28:15,679
so now we are going to

797
00:28:15,679 --> 00:28:17,200
convert that

798
00:28:17,200 --> 00:28:19,520
to a form that we can actually use so

799
00:28:19,520 --> 00:28:21,840
again we're going to use openssl

800
00:28:21,840 --> 00:28:24,399
and convert that and the private key to

801
00:28:24,399 --> 00:28:27,679
a p to a pfx

802
00:28:27,679 --> 00:28:29,840
so that we can use it with rubius so

803
00:28:29,840 --> 00:28:32,080
we're going to add a password to it

804
00:28:32,080 --> 00:28:34,799
the password here is asdf super secure

805
00:28:34,799 --> 00:28:37,840
so now we have a pfx file

806
00:28:37,840 --> 00:28:39,760
now we're going to transfer that to the

807
00:28:39,760 --> 00:28:42,000
compromise windows machine

808
00:28:42,000 --> 00:28:44,000
where we have root where we can actually

809
00:28:44,000 --> 00:28:45,279
use it so

810
00:28:45,279 --> 00:28:46,799
uh

811
00:28:46,799 --> 00:28:48,320
we're gonna go ahead and copy it and

812
00:28:48,320 --> 00:28:51,440
then authenticate using it um so

813
00:28:51,440 --> 00:28:53,520
first step copy it from our attacker

814
00:28:53,520 --> 00:28:55,679
machine to locally

815
00:28:55,679 --> 00:28:57,679
and now we're gonna use rubius to

816
00:28:57,679 --> 00:28:58,480
request

817
00:28:58,480 --> 00:29:02,320
a tgt and a service ticket

818
00:29:02,320 --> 00:29:04,320
for ldap so

819
00:29:04,320 --> 00:29:06,640
rubius gets a tgt now we're getting the

820
00:29:06,640 --> 00:29:08,159
service ticket now we're going to list

821
00:29:08,159 --> 00:29:10,640
the tickets and we can see

822
00:29:10,640 --> 00:29:13,520
that we authenticated as that corp dc

823
00:29:13,520 --> 00:29:15,840
the domain controller and now we have a

824
00:29:15,840 --> 00:29:17,679
service ticket to the other domain

825
00:29:17,679 --> 00:29:19,760
controller um

826
00:29:19,760 --> 00:29:22,640
and so now we can do things like dc sync

827
00:29:22,640 --> 00:29:23,840
and

828
00:29:23,840 --> 00:29:25,840
using memicats you know we were able to

829
00:29:25,840 --> 00:29:27,840
authenticate successfully and you can

830
00:29:27,840 --> 00:29:29,760
see we were able to dump the curb ggt

831
00:29:29,760 --> 00:29:32,080
account

832
00:29:36,799 --> 00:29:38,399
so we ended up reporting this to

833
00:29:38,399 --> 00:29:40,559
microsoft because we we feel like this

834
00:29:40,559 --> 00:29:42,559
is a default configuration and we feel

835
00:29:42,559 --> 00:29:44,720
like it should be fixed but um

836
00:29:44,720 --> 00:29:47,039
ultimately they said you know it's not a

837
00:29:47,039 --> 00:29:49,679
valid finding so you know great for us

838
00:29:49,679 --> 00:29:50,799
yep

839
00:29:50,799 --> 00:29:52,399
so last little bit

840
00:29:52,399 --> 00:29:54,559
last few minutes some domain persistence

841
00:29:54,559 --> 00:29:57,679
with golden certificates

842
00:29:57,679 --> 00:29:58,480
so

843
00:29:58,480 --> 00:30:00,159
uh basically

844
00:30:00,159 --> 00:30:02,320
all lcas they have a private key on them

845
00:30:02,320 --> 00:30:04,159
and this private key is used to sign

846
00:30:04,159 --> 00:30:06,399
certificates and so the basic idea

847
00:30:06,399 --> 00:30:09,120
behind this is you know if we can obtain

848
00:30:09,120 --> 00:30:12,000
that certificate uh then we can create

849
00:30:12,000 --> 00:30:14,559
our we can forge our own certificates

850
00:30:14,559 --> 00:30:16,559
and so if that private key isn't

851
00:30:16,559 --> 00:30:20,240
protected by a tpm or an hsm um

852
00:30:20,240 --> 00:30:22,080
then it's if it's not then it's going to

853
00:30:22,080 --> 00:30:24,720
be protected by dp api which means we

854
00:30:24,720 --> 00:30:27,200
can extract it and so

855
00:30:27,200 --> 00:30:29,520
if we can extract it and that

856
00:30:29,520 --> 00:30:32,080
certificate is in the nt auth

857
00:30:32,080 --> 00:30:34,559
certificates object then that means we

858
00:30:34,559 --> 00:30:37,039
can forge new certificates

859
00:30:37,039 --> 00:30:39,200
that are valid for domain authentication

860
00:30:39,200 --> 00:30:41,520
so we can create new certificates for

861
00:30:41,520 --> 00:30:43,840
any user that we can then use to off the

862
00:30:43,840 --> 00:30:45,440
ad

863
00:30:45,440 --> 00:30:46,880
something here too is these these

864
00:30:46,880 --> 00:30:48,320
certificates can't be revoked they

865
00:30:48,320 --> 00:30:50,960
weren't legitimately issued by the ca so

866
00:30:50,960 --> 00:30:53,440
they aren't actually logged in the ca's

867
00:30:53,440 --> 00:30:55,520
certificate database so you can't

868
00:30:55,520 --> 00:30:56,960
actually go and revoke them there

869
00:30:56,960 --> 00:30:59,360
because that's the in order to revoke it

870
00:30:59,360 --> 00:31:02,000
has to be in the database and so

871
00:31:02,000 --> 00:31:03,919
and these will last as long as the ca

872
00:31:03,919 --> 00:31:06,720
certificate is valid which by default is

873
00:31:06,720 --> 00:31:07,679
five years

874
00:31:07,679 --> 00:31:11,120
yeah so obligatory meme yeah to channel

875
00:31:11,120 --> 00:31:13,200
benjamin delpy

876
00:31:13,200 --> 00:31:15,279
um one last little thing to mix in here

877
00:31:15,279 --> 00:31:16,799
and we'll show a demo

878
00:31:16,799 --> 00:31:17,600
but

879
00:31:17,600 --> 00:31:20,559
the ms pkca so the pknet microsoft

880
00:31:20,559 --> 00:31:22,240
documentation for backwards

881
00:31:22,240 --> 00:31:23,840
compatibility reasons

882
00:31:23,840 --> 00:31:25,679
a legitimate certificate can be used to

883
00:31:25,679 --> 00:31:27,440
retrieve and associate a user or

884
00:31:27,440 --> 00:31:29,760
computer's ntlm hash so you imagine if

885
00:31:29,760 --> 00:31:31,600
you're authenticating with assert but

886
00:31:31,600 --> 00:31:33,200
you know some old device doesn't support

887
00:31:33,200 --> 00:31:34,799
this type of stuff they had to have a

888
00:31:34,799 --> 00:31:36,399
backwards compatible way that you could

889
00:31:36,399 --> 00:31:38,320
then get that ntlm hash

890
00:31:38,320 --> 00:31:40,240
so this is part of the protocol is first

891
00:31:40,240 --> 00:31:42,320
publicly or offensively detailed by

892
00:31:42,320 --> 00:31:44,080
benjamin delpy it has recently

893
00:31:44,080 --> 00:31:46,399
integrated into rubios by ethical chaos

894
00:31:46,399 --> 00:31:50,399
and exploit ph so charlie and siri

895
00:31:50,399 --> 00:31:51,840
if we combine this with golden

896
00:31:51,840 --> 00:31:53,600
certificates we have an alternative way

897
00:31:53,600 --> 00:31:56,000
to obtain ntlm credentials for any

898
00:31:56,000 --> 00:31:58,480
active user or computer meaning this is

899
00:31:58,480 --> 00:32:00,240
kind of like an alternative to dc sync

900
00:32:00,240 --> 00:32:02,320
even though it operates very differently

901
00:32:02,320 --> 00:32:04,080
i'll show full

902
00:32:04,080 --> 00:32:05,840
run through with this so we're running

903
00:32:05,840 --> 00:32:08,080
code on the ca server and we're going to

904
00:32:08,080 --> 00:32:10,480
steal the ca's private key

905
00:32:10,480 --> 00:32:13,440
using chip dp api using sharp dp api so

906
00:32:13,440 --> 00:32:15,519
we see here we see the extracted cert on

907
00:32:15,519 --> 00:32:17,279
the left i'm going through and you see

908
00:32:17,279 --> 00:32:19,519
the thumb prints match so this is the

909
00:32:19,519 --> 00:32:21,519
ca's private key you can see the issuer

910
00:32:21,519 --> 00:32:23,519
and the subject are the same so this is

911
00:32:23,519 --> 00:32:24,640
you know

912
00:32:24,640 --> 00:32:26,559
that's the ca's private key

913
00:32:26,559 --> 00:32:27,840
so then we're going to use a tool called

914
00:32:27,840 --> 00:32:29,519
forge cert which we're releasing with

915
00:32:29,519 --> 00:32:31,760
that private key to forge a certificate

916
00:32:31,760 --> 00:32:34,720
for the administrator at the shire.local

917
00:32:34,720 --> 00:32:36,320
so we see that thumbprint begins with

918
00:32:36,320 --> 00:32:38,399
e46

919
00:32:38,399 --> 00:32:40,399
we forge this new cert

920
00:32:40,399 --> 00:32:42,080
now we're running as that low priv user

921
00:32:42,080 --> 00:32:44,159
we can access the dc's file system but

922
00:32:44,159 --> 00:32:45,120
we're going to use that forged

923
00:32:45,120 --> 00:32:46,399
certificate

924
00:32:46,399 --> 00:32:49,519
with the new rubios 2.0 code base to get

925
00:32:49,519 --> 00:32:52,559
a tgt also with the git credentials we

926
00:32:52,559 --> 00:32:54,480
can get the administrators ntlm using

927
00:32:54,480 --> 00:32:56,480
some user to user stuff

928
00:32:56,480 --> 00:32:58,240
now we have access to the file system on

929
00:32:58,240 --> 00:33:00,720
the dc

930
00:33:00,720 --> 00:33:03,279
now on the dc side we see that no

931
00:33:03,279 --> 00:33:05,279
certificate was issued so there's enough

932
00:33:05,279 --> 00:33:06,640
we can't revoke it because there's

933
00:33:06,640 --> 00:33:08,880
nothing issued there and the only event

934
00:33:08,880 --> 00:33:12,000
logs from the you know kerberos side is

935
00:33:12,000 --> 00:33:14,240
we see that certificate legitimately was

936
00:33:14,240 --> 00:33:16,000
used to authenticate as administrator

937
00:33:16,000 --> 00:33:18,640
with that same thumb print

938
00:33:18,640 --> 00:33:20,399
so i think that's pretty cool very

939
00:33:20,399 --> 00:33:22,320
awesome for domain persistence and

940
00:33:22,320 --> 00:33:23,600
credential

941
00:33:23,600 --> 00:33:25,679
so as a quick summary

942
00:33:25,679 --> 00:33:27,360
active directory certificate services

943
00:33:27,360 --> 00:33:29,679
has a lot of abuse potential you know

944
00:33:29,679 --> 00:33:30,480
there's

945
00:33:30,480 --> 00:33:32,480
trade craft from you know stealing

946
00:33:32,480 --> 00:33:34,640
certificates doing active enrollments

947
00:33:34,640 --> 00:33:36,399
all these domain escalation scenarios

948
00:33:36,399 --> 00:33:38,240
domain persistence there's a huge amount

949
00:33:38,240 --> 00:33:40,080
of tradecraft here

950
00:33:40,080 --> 00:33:41,679
the ones we like tend to focus on that

951
00:33:41,679 --> 00:33:43,440
we think are really interesting are

952
00:33:43,440 --> 00:33:45,279
especially that active like kind of

953
00:33:45,279 --> 00:33:47,200
enrollment for el saslis credential

954
00:33:47,200 --> 00:33:48,799
theft but also the domain escalation

955
00:33:48,799 --> 00:33:51,760
stuff just so many different things

956
00:33:51,760 --> 00:33:54,320
we have a 140 page white paper that has

957
00:33:54,320 --> 00:33:56,320
complete details about this it includes

958
00:33:56,320 --> 00:33:58,320
extensive defensive information and

959
00:33:58,320 --> 00:34:00,640
additional architectural considerations

960
00:34:00,640 --> 00:34:02,640
you know this is a you know kind of a

961
00:34:02,640 --> 00:34:04,000
short and sweet presentation to hit the

962
00:34:04,000 --> 00:34:05,919
main points there's so much information

963
00:34:05,919 --> 00:34:08,000
here the bitly link has a link to the

964
00:34:08,000 --> 00:34:09,599
white paper it's also on the spec drops

965
00:34:09,599 --> 00:34:11,760
website

966
00:34:11,760 --> 00:34:13,839
we'll also be releasing our the tools

967
00:34:13,839 --> 00:34:15,520
that we've talked about here so certify

968
00:34:15,520 --> 00:34:16,960
and forge cert

969
00:34:16,960 --> 00:34:18,639
they're going to be live in our ghost

970
00:34:18,639 --> 00:34:20,480
pack github repo

971
00:34:20,480 --> 00:34:23,440
along with a defensive tool that we've

972
00:34:23,440 --> 00:34:26,560
previously released called pspki audit

973
00:34:26,560 --> 00:34:27,599
and so

974
00:34:27,599 --> 00:34:29,359
we'd love for you know feedback on any

975
00:34:29,359 --> 00:34:31,599
of these tools and looking forward to

976
00:34:31,599 --> 00:34:33,520
other people using them yep

977
00:34:33,520 --> 00:34:35,119
there's quick acknowledgements there's a

978
00:34:35,119 --> 00:34:36,480
lot of previous work that was done in

979
00:34:36,480 --> 00:34:38,159
this area we detail all of it in the

980
00:34:38,159 --> 00:34:40,320
white paper as well as the blog post

981
00:34:40,320 --> 00:34:42,320
also shout out to sarah for the pknet

982
00:34:42,320 --> 00:34:44,320
related rubios editions and special

983
00:34:44,320 --> 00:34:46,079
thanks to mark camach for collaborating

984
00:34:46,079 --> 00:34:47,520
with us on parts of this work is really

985
00:34:47,520 --> 00:34:48,960
awesome to work with

986
00:34:48,960 --> 00:34:50,239
so

987
00:34:50,239 --> 00:34:53,239
questions

