1
00:00:01,130 --> 00:00:14,320
[Music]

2
00:00:14,320 --> 00:00:16,160
hi i'm matt weeks and this is internal

3
00:00:16,160 --> 00:00:17,840
affairs hacking file system access from

4
00:00:17,840 --> 00:00:20,240
the web i am deloitte tush's technology

5
00:00:20,240 --> 00:00:21,279
fellow the light and touch is the

6
00:00:21,279 --> 00:00:22,480
deloitte member firm that does risk

7
00:00:22,480 --> 00:00:25,039
advisory in the u.s prior to that

8
00:00:25,039 --> 00:00:26,480
as a little bit of introduction i led

9
00:00:26,480 --> 00:00:27,920
r9b's research and development group

10
00:00:27,920 --> 00:00:29,039
focusing on things like reverse

11
00:00:29,039 --> 00:00:30,640
engineering vulnerability discovery and

12
00:00:30,640 --> 00:00:32,159
exploit development developing

13
00:00:32,159 --> 00:00:34,399
capabilities for red teaming as well as

14
00:00:34,399 --> 00:00:36,640
detection and response

15
00:00:36,640 --> 00:00:38,640
for this presentation i'm going to be

16
00:00:38,640 --> 00:00:40,960
talking about what is the

17
00:00:40,960 --> 00:00:44,160
file system access api how is it used

18
00:00:44,160 --> 00:00:46,160
was it implemented where can you use it

19
00:00:46,160 --> 00:00:48,239
now what things does it do and talk

20
00:00:48,239 --> 00:00:50,320
about different attacks that an attacker

21
00:00:50,320 --> 00:00:53,039
might be able to conduct with it

22
00:00:53,039 --> 00:00:55,920
some that failed and some that succeeded

23
00:00:55,920 --> 00:00:56,879
so first there's a little bit of

24
00:00:56,879 --> 00:00:58,399
background what is the file system

25
00:00:58,399 --> 00:01:00,640
access api so the file system access api

26
00:01:00,640 --> 00:01:03,680
is the latest in a long train of apis

27
00:01:03,680 --> 00:01:05,119
capabilities which have been added to

28
00:01:05,119 --> 00:01:08,320
web technologies to make web pages more

29
00:01:08,320 --> 00:01:11,439
feature comparable with native desktop

30
00:01:11,439 --> 00:01:14,400
or mobile applications so some of those

31
00:01:14,400 --> 00:01:16,560
which have been added in prior years

32
00:01:16,560 --> 00:01:18,000
have been things like

33
00:01:18,000 --> 00:01:19,280
access to

34
00:01:19,280 --> 00:01:21,920
webcams and microphones provided to the

35
00:01:21,920 --> 00:01:24,080
javascript running within a web page and

36
00:01:24,080 --> 00:01:26,000
obviously that's very useful for

37
00:01:26,000 --> 00:01:28,240
everybody who's remote wants to hop onto

38
00:01:28,240 --> 00:01:29,840
a video conference and not have to

39
00:01:29,840 --> 00:01:31,600
install a program

40
00:01:31,600 --> 00:01:32,880
and

41
00:01:32,880 --> 00:01:35,280
have that function from any platform

42
00:01:35,280 --> 00:01:37,280
that they're running on right

43
00:01:37,280 --> 00:01:38,880
and so

44
00:01:38,880 --> 00:01:42,000
many many different programs have become

45
00:01:42,000 --> 00:01:44,640
through these apis have become possible

46
00:01:44,640 --> 00:01:47,040
to then implement we now have the

47
00:01:47,040 --> 00:01:49,439
ability to run background threads with

48
00:01:49,439 --> 00:01:51,680
web workers we now have the ability to

49
00:01:51,680 --> 00:01:53,520
save things in the client without

50
00:01:53,520 --> 00:01:54,960
sending them to the server with things

51
00:01:54,960 --> 00:01:57,040
like session storage things like that

52
00:01:57,040 --> 00:01:58,799
but for certain certain types of

53
00:01:58,799 --> 00:02:00,000
programs

54
00:02:00,000 --> 00:02:01,920
you really need to be able to access

55
00:02:01,920 --> 00:02:04,079
files or folders in order to

56
00:02:04,079 --> 00:02:05,840
make those work in order to be able to

57
00:02:05,840 --> 00:02:07,280
integrate well with programs that might

58
00:02:07,280 --> 00:02:09,840
be running on your desktop so

59
00:02:09,840 --> 00:02:11,038
you can think of things like image

60
00:02:11,038 --> 00:02:12,800
editors i want to be able to

61
00:02:12,800 --> 00:02:15,599
apply filters and then save that image

62
00:02:15,599 --> 00:02:18,400
all within the same application

63
00:02:18,400 --> 00:02:21,200
web application and not have to

64
00:02:21,200 --> 00:02:23,760
pop a save file dialog every time

65
00:02:23,760 --> 00:02:26,000
that i make a change there or you can

66
00:02:26,000 --> 00:02:27,280
think of games which have a lot of

67
00:02:27,280 --> 00:02:30,480
supporting files not all of which are

68
00:02:30,480 --> 00:02:33,040
wanting to be in memory at the same time

69
00:02:33,040 --> 00:02:34,640
or database

70
00:02:34,640 --> 00:02:36,400
related software which is accessing

71
00:02:36,400 --> 00:02:38,480
files too big for memory music players

72
00:02:38,480 --> 00:02:39,920
that want to play your music collection

73
00:02:39,920 --> 00:02:41,040
and not just

74
00:02:41,040 --> 00:02:42,400
whatever they can stream from the

75
00:02:42,400 --> 00:02:43,760
internet using a bunch of network

76
00:02:43,760 --> 00:02:45,040
bandwidth

77
00:02:45,040 --> 00:02:46,560
so lots of lots of different use cases

78
00:02:46,560 --> 00:02:48,879
for this and has the potential for

79
00:02:48,879 --> 00:02:51,920
a lot of things on the

80
00:02:51,920 --> 00:02:54,000
user side of of the equation but of

81
00:02:54,000 --> 00:02:55,840
course it also has a lot of potential on

82
00:02:55,840 --> 00:02:56,720
the

83
00:02:56,720 --> 00:02:59,920
malicious or exploitation side of things

84
00:02:59,920 --> 00:03:01,680
when was it introduced well

85
00:03:01,680 --> 00:03:03,440
basically this

86
00:03:03,440 --> 00:03:05,360
became available to

87
00:03:05,360 --> 00:03:07,120
mainstream browsers

88
00:03:07,120 --> 00:03:08,800
all within the past year it was

89
00:03:08,800 --> 00:03:11,840
basically late 2020 that was implemented

90
00:03:11,840 --> 00:03:15,599
under the native file system api

91
00:03:15,599 --> 00:03:17,680
name that was changed with kind of a

92
00:03:17,680 --> 00:03:19,680
re-release earlier this year calling it

93
00:03:19,680 --> 00:03:21,920
the file system access api and this api

94
00:03:21,920 --> 00:03:23,440
is a

95
00:03:23,440 --> 00:03:24,879
potential for standardization the

96
00:03:24,879 --> 00:03:27,519
intention is that this is not a

97
00:03:27,519 --> 00:03:29,920
particular feature to one specific

98
00:03:29,920 --> 00:03:32,640
browser it's something that most

99
00:03:32,640 --> 00:03:34,239
should be able to support in the near

100
00:03:34,239 --> 00:03:35,680
future

101
00:03:35,680 --> 00:03:37,760
and many of them already do

102
00:03:37,760 --> 00:03:39,200
so let's talk about what functionality

103
00:03:39,200 --> 00:03:42,000
it has in detail so the api has a number

104
00:03:42,000 --> 00:03:43,599
of different functions that you can call

105
00:03:43,599 --> 00:03:47,200
which request access from the user to

106
00:03:47,200 --> 00:03:50,560
either open or write a file and open and

107
00:03:50,560 --> 00:03:51,360
then

108
00:03:51,360 --> 00:03:53,840
potentially write to a directory

109
00:03:53,840 --> 00:03:55,920
and we'll do a demo of that shortly

110
00:03:55,920 --> 00:03:57,280
there are a lot of secure features

111
00:03:57,280 --> 00:03:58,879
implemented here because of course

112
00:03:58,879 --> 00:04:00,640
there's a lot of potential for malicious

113
00:04:00,640 --> 00:04:02,799
activity so first of all every file that

114
00:04:02,799 --> 00:04:05,200
that page writes will get the mark of

115
00:04:05,200 --> 00:04:07,920
the web on windows which will trigger

116
00:04:07,920 --> 00:04:10,640
smart screen antivirus filtering white

117
00:04:10,640 --> 00:04:12,560
listing things like that

118
00:04:12,560 --> 00:04:13,840
this presentation will be a little bit

119
00:04:13,840 --> 00:04:14,879
focused on windows because that's the

120
00:04:14,879 --> 00:04:17,759
most popular desktop os still

121
00:04:17,759 --> 00:04:19,839
now some interesting things are that you

122
00:04:19,839 --> 00:04:21,680
cannot specify full paths or even file

123
00:04:21,680 --> 00:04:23,120
separators if you want to access

124
00:04:23,120 --> 00:04:24,479
subdirectories of a directory that you

125
00:04:24,479 --> 00:04:25,840
have access to

126
00:04:25,840 --> 00:04:28,080
and one of the reasons behind this is

127
00:04:28,080 --> 00:04:30,560
that you can't you know different os's

128
00:04:30,560 --> 00:04:33,040
interpret different slashes is going as

129
00:04:33,040 --> 00:04:34,960
as having different interpretations and

130
00:04:34,960 --> 00:04:37,520
so all that is is wiped out you have to

131
00:04:37,520 --> 00:04:40,000
access each individual file or

132
00:04:40,000 --> 00:04:42,960
sub entry to a directory as its separate

133
00:04:42,960 --> 00:04:45,520
api call so you can't put together those

134
00:04:45,520 --> 00:04:47,360
paths there's blocked file types there

135
00:04:47,360 --> 00:04:49,199
are certain things that you can't write

136
00:04:49,199 --> 00:04:50,720
because they're just too dangerous and

137
00:04:50,720 --> 00:04:52,639
there's also limitations of arbitrary

138
00:04:52,639 --> 00:04:55,360
read read and write so although the api

139
00:04:55,360 --> 00:04:57,280
exposed an interface which seems to

140
00:04:57,280 --> 00:05:00,080
imply you can open a file seek to a

141
00:05:00,080 --> 00:05:02,400
location within it read and write

142
00:05:02,400 --> 00:05:04,560
in reality when you're editing a file

143
00:05:04,560 --> 00:05:06,320
you're editing a temporary file which is

144
00:05:06,320 --> 00:05:09,039
added with a cr swap extension that

145
00:05:09,039 --> 00:05:11,360
temporary file then once you close the

146
00:05:11,360 --> 00:05:13,840
file is then swapped over the original

147
00:05:13,840 --> 00:05:14,880
file

148
00:05:14,880 --> 00:05:16,160
and so you're not actually editing a

149
00:05:16,160 --> 00:05:17,520
file live and so that does limit some of

150
00:05:17,520 --> 00:05:20,080
the potentials you also don't have the

151
00:05:20,080 --> 00:05:22,160
ability of doing things like

152
00:05:22,160 --> 00:05:24,000
attribute modification you can't make

153
00:05:24,000 --> 00:05:26,560
things executable on linuxes or change

154
00:05:26,560 --> 00:05:28,880
acls or edit extended attributes on

155
00:05:28,880 --> 00:05:30,639
windows things like that so let's talk

156
00:05:30,639 --> 00:05:32,479
about threat models what does an

157
00:05:32,479 --> 00:05:34,720
attacker maybe want to do or a defender

158
00:05:34,720 --> 00:05:36,400
want to prevent first of all is

159
00:05:36,400 --> 00:05:37,759
unintended reads obviously you don't

160
00:05:37,759 --> 00:05:39,199
want sensitive data exposed to the

161
00:05:39,199 --> 00:05:40,400
internet

162
00:05:40,400 --> 00:05:42,400
that you you didn't really intend to

163
00:05:42,400 --> 00:05:43,919
share unintended rights would be even

164
00:05:43,919 --> 00:05:45,440
worse you might be able to corrupt files

165
00:05:45,440 --> 00:05:47,759
or cause a denial of service conditions

166
00:05:47,759 --> 00:05:50,400
on your disk and though most of your of

167
00:05:50,400 --> 00:05:51,520
course would be cut execution where

168
00:05:51,520 --> 00:05:53,600
you'd be able to do all the previous as

169
00:05:53,600 --> 00:05:55,919
well as persistent access

170
00:05:55,919 --> 00:05:58,880
and even access to

171
00:05:58,880 --> 00:06:00,800
to be able to encrypt your drive or

172
00:06:00,800 --> 00:06:03,680
ransomware or things like that

173
00:06:03,680 --> 00:06:05,520
so first of all what are the attacks

174
00:06:05,520 --> 00:06:07,440
that i tried that failed

175
00:06:07,440 --> 00:06:09,039
one of them was alternate downstream

176
00:06:09,039 --> 00:06:11,280
modifications i was wanted to see if i

177
00:06:11,280 --> 00:06:12,720
could remove the mark of the web by

178
00:06:12,720 --> 00:06:14,639
removing the alternate data stream that

179
00:06:14,639 --> 00:06:17,759
it is stored in that was blocked no ads

180
00:06:17,759 --> 00:06:19,840
are able to be modified from this

181
00:06:19,840 --> 00:06:20,960
interface

182
00:06:20,960 --> 00:06:22,800
directory traversal also

183
00:06:22,800 --> 00:06:24,160
all kinds of path shenanigans were

184
00:06:24,160 --> 00:06:25,600
blocked i couldn't open up the parent

185
00:06:25,600 --> 00:06:27,919
directory with the dot dot

186
00:06:27,919 --> 00:06:29,600
so i had no luck there

187
00:06:29,600 --> 00:06:31,199
i was wondering if maybe you could

188
00:06:31,199 --> 00:06:33,280
convince a user to open and share

189
00:06:33,280 --> 00:06:34,960
writable access to say their startup

190
00:06:34,960 --> 00:06:37,280
folder or other profile folders in which

191
00:06:37,280 --> 00:06:38,560
by writing a file they will be

192
00:06:38,560 --> 00:06:40,000
automatically executed next time the

193
00:06:40,000 --> 00:06:42,639
user logs in also blocked even parent

194
00:06:42,639 --> 00:06:44,400
folders of that there's there's many

195
00:06:44,400 --> 00:06:45,440
different

196
00:06:45,440 --> 00:06:47,440
locations which are simply disabled

197
00:06:47,440 --> 00:06:48,639
because they're too sensitive so you

198
00:06:48,639 --> 00:06:51,120
can't share those with this api also

199
00:06:51,120 --> 00:06:52,720
shortcut based attacks i want to see if

200
00:06:52,720 --> 00:06:54,800
i could drop a link file and trigger a

201
00:06:54,800 --> 00:06:57,919
remote dll load or at least an ntlm

202
00:06:57,919 --> 00:07:00,160
authentication that would allow me to

203
00:07:00,160 --> 00:07:01,840
crack a password those are blocked by

204
00:07:01,840 --> 00:07:04,080
type lnk files can't be written i'm in

205
00:07:04,080 --> 00:07:05,280
high level folder actually i want to see

206
00:07:05,280 --> 00:07:07,520
if i can share the drive route that also

207
00:07:07,520 --> 00:07:09,919
did not work was was blocked so you see

208
00:07:09,919 --> 00:07:11,599
a lot of thought has been paid to many

209
00:07:11,599 --> 00:07:13,199
different attacks by blocking all of

210
00:07:13,199 --> 00:07:14,639
these

211
00:07:14,639 --> 00:07:16,080
nevertheless i think there's still

212
00:07:16,080 --> 00:07:18,240
potential for abuse so the first thing i

213
00:07:18,240 --> 00:07:20,000
want to show is

214
00:07:20,000 --> 00:07:22,479
a low severity issue it's basically a

215
00:07:22,479 --> 00:07:24,000
demo of

216
00:07:24,000 --> 00:07:26,160
intended functionality

217
00:07:26,160 --> 00:07:27,199
that

218
00:07:27,199 --> 00:07:29,520
i think still has some risk to an

219
00:07:29,520 --> 00:07:31,280
ordinary user

220
00:07:31,280 --> 00:07:32,960
so let's see what that looks like so if

221
00:07:32,960 --> 00:07:34,560
i am

222
00:07:34,560 --> 00:07:36,000
opening a

223
00:07:36,000 --> 00:07:37,840
browser i go to a website in this case

224
00:07:37,840 --> 00:07:39,840
it's a local host but it could be a

225
00:07:39,840 --> 00:07:41,039
remote

226
00:07:41,039 --> 00:07:43,199
drive script junkie social network oh

227
00:07:43,199 --> 00:07:44,960
great i want to join that i want to

228
00:07:44,960 --> 00:07:46,960
upload a profile picture now before i go

229
00:07:46,960 --> 00:07:49,360
to the actual upload i'm showing in

230
00:07:49,360 --> 00:07:51,680
windows explorer

231
00:07:51,680 --> 00:07:54,080
what this picture is and where it is see

232
00:07:54,080 --> 00:07:55,440
in my pictures folder i could have put

233
00:07:55,440 --> 00:07:56,560
it in the root of the pictures for it's

234
00:07:56,560 --> 00:07:58,080
the same difference i made a subfolder

235
00:07:58,080 --> 00:07:59,680
called save pictures here you can see

236
00:07:59,680 --> 00:08:01,039
that picture of

237
00:08:01,039 --> 00:08:02,639
me with the headshot that's what i want

238
00:08:02,639 --> 00:08:03,599
to share

239
00:08:03,599 --> 00:08:05,280
um but what i don't want to share is of

240
00:08:05,280 --> 00:08:06,560
course embarrassing pictures from the

241
00:08:06,560 --> 00:08:08,080
internet which i may have downloaded

242
00:08:08,080 --> 00:08:09,440
embarrassing pictures of me which would

243
00:08:09,440 --> 00:08:11,680
be even worse or extremely cringe-worthy

244
00:08:11,680 --> 00:08:12,960
memes so

245
00:08:12,960 --> 00:08:14,960
i click on the button in the website to

246
00:08:14,960 --> 00:08:16,639
upload that profile picture it pops up

247
00:08:16,639 --> 00:08:18,479
this file chooser dialog it looks just

248
00:08:18,479 --> 00:08:20,560
like a normal upload dialog with slight

249
00:08:20,560 --> 00:08:22,479
differences it says select folder

250
00:08:22,479 --> 00:08:23,599
instead so i'm going to click on that

251
00:08:23,599 --> 00:08:24,879
save pictures

252
00:08:24,879 --> 00:08:26,960
folder that i know my file is in now

253
00:08:26,960 --> 00:08:28,560
normally i would be able to click that

254
00:08:28,560 --> 00:08:30,319
open button

255
00:08:30,319 --> 00:08:32,640
which now says select folder and it

256
00:08:32,640 --> 00:08:34,640
would just open that up and then i would

257
00:08:34,640 --> 00:08:36,880
be able to select the file and click

258
00:08:36,880 --> 00:08:39,360
open to to upload it in this case

259
00:08:39,360 --> 00:08:40,958
because it's a folder selection instead

260
00:08:40,958 --> 00:08:42,880
of pops up this dialog here so this is

261
00:08:42,880 --> 00:08:44,720
where all the security is

262
00:08:44,720 --> 00:08:46,880
it has a prompt that

263
00:08:46,880 --> 00:08:49,040
requests the user decide whether or not

264
00:08:49,040 --> 00:08:51,680
to grant access to files in this folder

265
00:08:51,680 --> 00:08:53,360
saved pictures if the user

266
00:08:53,360 --> 00:08:55,040
absentmindedly clicks it and doesn't

267
00:08:55,040 --> 00:08:56,640
realize what they're doing or they

268
00:08:56,640 --> 00:08:58,240
intentionally click it this is what

269
00:08:58,240 --> 00:09:00,640
happens immediately the website is able

270
00:09:00,640 --> 00:09:02,480
to view not only the

271
00:09:02,480 --> 00:09:04,320
picture of me

272
00:09:04,320 --> 00:09:05,600
information about it and get the actual

273
00:09:05,600 --> 00:09:07,600
contents of it but also

274
00:09:07,600 --> 00:09:09,120
recursively enumerate all of the

275
00:09:09,120 --> 00:09:11,200
subfolders in that folder including

276
00:09:11,200 --> 00:09:12,880
embarrassing pictures from the internet

277
00:09:12,880 --> 00:09:14,399
embarrassing pictures of me which could

278
00:09:14,399 --> 00:09:16,640
be blackmailable

279
00:09:16,640 --> 00:09:19,040
and worst of all extremely cringe-worthy

280
00:09:19,040 --> 00:09:20,720
memes because we don't want the internet

281
00:09:20,720 --> 00:09:23,680
to see what type of things i

282
00:09:23,680 --> 00:09:25,839
laugh at

283
00:09:25,839 --> 00:09:26,880
so

284
00:09:26,880 --> 00:09:28,640
that's just a quick example of what an

285
00:09:28,640 --> 00:09:30,720
exfiltration demo looks like

286
00:09:30,720 --> 00:09:31,920
now

287
00:09:31,920 --> 00:09:33,680
that could be accelerated very quickly

288
00:09:33,680 --> 00:09:35,600
because again you can

289
00:09:35,600 --> 00:09:37,360
resize pictures you can draw them onto

290
00:09:37,360 --> 00:09:40,240
canvases at host speed all this code is

291
00:09:40,240 --> 00:09:42,240
running natively on the

292
00:09:42,240 --> 00:09:45,200
client system so you can use the

293
00:09:45,200 --> 00:09:47,279
apis in the browser to

294
00:09:47,279 --> 00:09:48,560
generate small versions of those

295
00:09:48,560 --> 00:09:50,080
pictures and send them out very quickly

296
00:09:50,080 --> 00:09:51,279
over the internet basically as fast as

297
00:09:51,279 --> 00:09:53,200
your hard drive can can pop these

298
00:09:53,200 --> 00:09:55,519
pictures out you would be able to send

299
00:09:55,519 --> 00:09:57,920
them out to

300
00:09:57,920 --> 00:10:00,399
the web and um and potentially do bad

301
00:10:00,399 --> 00:10:01,920
things with them right

302
00:10:01,920 --> 00:10:03,440
so it's very fast

303
00:10:03,440 --> 00:10:06,240
in this case we showed it in the

304
00:10:06,240 --> 00:10:07,600
web browser but of course you can do

305
00:10:07,600 --> 00:10:09,040
that silently so that nobody would see

306
00:10:09,040 --> 00:10:11,200
anything beyond that so something to be

307
00:10:11,200 --> 00:10:12,800
worried about but again this is intended

308
00:10:12,800 --> 00:10:14,320
functionality this is just a consequence

309
00:10:14,320 --> 00:10:16,160
of what file access might be

310
00:10:16,160 --> 00:10:17,839
let's talk about some more significant

311
00:10:17,839 --> 00:10:18,959
issues

312
00:10:18,959 --> 00:10:21,519
general service first of all in file

313
00:10:21,519 --> 00:10:22,959
temporary creation i mentioned earlier

314
00:10:22,959 --> 00:10:24,959
that when you're editing a file it

315
00:10:24,959 --> 00:10:26,800
creates a cr swap

316
00:10:26,800 --> 00:10:28,560
file to

317
00:10:28,560 --> 00:10:30,320
hold temporary edits to that file well

318
00:10:30,320 --> 00:10:33,279
if you have multiple handles open

319
00:10:33,279 --> 00:10:36,240
writable files to that same path it will

320
00:10:36,240 --> 00:10:38,320
create multiple cr swap files and those

321
00:10:38,320 --> 00:10:40,399
will be numbered and if you're creating

322
00:10:40,399 --> 00:10:43,279
those and there is a in in certain

323
00:10:43,279 --> 00:10:45,360
situations when you are creating

324
00:10:45,360 --> 00:10:47,120
multiple handles while a promise hasn't

325
00:10:47,120 --> 00:10:48,480
resolved yet

326
00:10:48,480 --> 00:10:49,440
it can

327
00:10:49,440 --> 00:10:50,800
enter an infinite loop it's just a

328
00:10:50,800 --> 00:10:52,480
simple bug that will

329
00:10:52,480 --> 00:10:55,040
create as many cr swap files as it can

330
00:10:55,040 --> 00:10:56,560
which it goes up to 99 because they're

331
00:10:56,560 --> 00:10:58,560
two digit numbers and then it just fails

332
00:10:58,560 --> 00:11:00,720
out

333
00:11:00,720 --> 00:11:02,880
again this is this is a minor issue it's

334
00:11:02,880 --> 00:11:05,920
just a small bug that would just enter

335
00:11:05,920 --> 00:11:07,279
that would just

336
00:11:07,279 --> 00:11:08,720
cause an issue with that particular

337
00:11:08,720 --> 00:11:11,440
website or that particular file

338
00:11:11,440 --> 00:11:13,040
that particular folder again you're just

339
00:11:13,040 --> 00:11:14,480
creating junk in the in the folder and

340
00:11:14,480 --> 00:11:15,839
this is essentially just a consequence

341
00:11:15,839 --> 00:11:17,360
of hey if you grant rival access to a

342
00:11:17,360 --> 00:11:19,920
folder then then that's

343
00:11:19,920 --> 00:11:21,680
a risk that you take but it is worth

344
00:11:21,680 --> 00:11:23,200
pointing out that the risk of things

345
00:11:23,200 --> 00:11:25,120
like just writing a ton of files and

346
00:11:25,120 --> 00:11:27,440
creating a ton of disk usage is a little

347
00:11:27,440 --> 00:11:29,839
bit more severe with this api than with

348
00:11:29,839 --> 00:11:31,680
other browser interactions which would

349
00:11:31,680 --> 00:11:33,519
require downloading something from the

350
00:11:33,519 --> 00:11:35,680
internet or storing a file in memory

351
00:11:35,680 --> 00:11:37,360
that you can download in this case you

352
00:11:37,360 --> 00:11:40,320
can keep riding more bytes as quickly as

353
00:11:40,320 --> 00:11:42,560
you can without requiring a ton of

354
00:11:42,560 --> 00:11:44,560
memory bandwidth and without waiting for

355
00:11:44,560 --> 00:11:46,320
network traffic so you can fill up the

356
00:11:46,320 --> 00:11:48,480
drive very very quickly

357
00:11:48,480 --> 00:11:50,079
as fast as the hard drive can write

358
00:11:50,079 --> 00:11:51,440
basically

359
00:11:51,440 --> 00:11:52,959
and potentially cause denial of service

360
00:11:52,959 --> 00:11:54,560
attacks on the host but again this is

361
00:11:54,560 --> 00:11:57,200
just a risk you can consume disk access

362
00:11:57,200 --> 00:12:00,000
if you grant disk access to a website so

363
00:12:00,000 --> 00:12:02,320
worth thinking about but not severe

364
00:12:02,320 --> 00:12:03,760
so now let's talk about some of the more

365
00:12:03,760 --> 00:12:05,279
significant attacks remote code

366
00:12:05,279 --> 00:12:07,200
execution attacks the first one is going

367
00:12:07,200 --> 00:12:09,040
to be binary planting so binary planting

368
00:12:09,040 --> 00:12:11,680
is a technique which has been useful in

369
00:12:11,680 --> 00:12:13,839
a lot of exploits going back

370
00:12:13,839 --> 00:12:15,440
more than 10 years a lot of applications

371
00:12:15,440 --> 00:12:18,000
will load various libraries usually dlls

372
00:12:18,000 --> 00:12:19,360
on windows

373
00:12:19,360 --> 00:12:22,800
and if it's loading a non-standard dll

374
00:12:22,800 --> 00:12:24,560
part of the search path will be the

375
00:12:24,560 --> 00:12:26,320
current working directory and if that

376
00:12:26,320 --> 00:12:28,399
dll isn't there

377
00:12:28,399 --> 00:12:30,639
isn't in one of the higher level search

378
00:12:30,639 --> 00:12:32,399
paths then that

379
00:12:32,399 --> 00:12:33,600
program will try to load that from the

380
00:12:33,600 --> 00:12:34,800
current directory so if you can write a

381
00:12:34,800 --> 00:12:36,720
dll to that directory it will then get

382
00:12:36,720 --> 00:12:38,639
loaded by that program and get executed

383
00:12:38,639 --> 00:12:40,399
there are also other binary planting

384
00:12:40,399 --> 00:12:43,040
vulnerabilities involving things like

385
00:12:43,040 --> 00:12:44,240
writing

386
00:12:44,240 --> 00:12:46,160
exes or script names which could get

387
00:12:46,160 --> 00:12:49,519
executed but this is the most common and

388
00:12:49,519 --> 00:12:52,880
this one is a significant attack vector

389
00:12:52,880 --> 00:12:56,160
because surprisingly dlls are not on the

390
00:12:56,160 --> 00:12:58,320
excluded list so

391
00:12:58,320 --> 00:12:59,680
let's do a quick demo of what this

392
00:12:59,680 --> 00:13:01,200
attack looks like how to get code

393
00:13:01,200 --> 00:13:04,079
execution through the file access api

394
00:13:04,079 --> 00:13:05,760
so in this case we're going to go to a

395
00:13:05,760 --> 00:13:07,760
new website this one's going to be an

396
00:13:07,760 --> 00:13:09,360
audio editor

397
00:13:09,360 --> 00:13:11,600
so the audio editor script junkies music

398
00:13:11,600 --> 00:13:13,680
studio

399
00:13:13,680 --> 00:13:16,079
requests access to a project folder now

400
00:13:16,079 --> 00:13:17,360
we've seen some previous attacks here

401
00:13:17,360 --> 00:13:19,120
we're not going to we're not going to

402
00:13:19,120 --> 00:13:20,720
grant access to anything we're going to

403
00:13:20,720 --> 00:13:22,880
create a new folder completely empty

404
00:13:22,880 --> 00:13:24,639
folder just call it test

405
00:13:24,639 --> 00:13:27,040
select that folder so we have the same

406
00:13:27,040 --> 00:13:29,040
prompt again asking

407
00:13:29,040 --> 00:13:30,320
for access

408
00:13:30,320 --> 00:13:32,639
readable access to that folder

409
00:13:32,639 --> 00:13:35,279
now you see the page requests

410
00:13:35,279 --> 00:13:36,880
writable access to the folder and here's

411
00:13:36,880 --> 00:13:38,639
the prompt that comes up there that's to

412
00:13:38,639 --> 00:13:40,639
be able to edit files and test until you

413
00:13:40,639 --> 00:13:42,959
close all tabs for this site okay simple

414
00:13:42,959 --> 00:13:45,199
enough no problem again this is a

415
00:13:45,199 --> 00:13:46,720
completely empty folder that we just

416
00:13:46,720 --> 00:13:49,040
granted access to so

417
00:13:49,040 --> 00:13:51,519
we will click the save changes button

418
00:13:51,519 --> 00:13:53,519
and this

419
00:13:53,519 --> 00:13:56,880
web app then we'll spend time

420
00:13:56,880 --> 00:13:58,639
editing our music saving our stuff and

421
00:13:58,639 --> 00:14:00,079
we'll create a project file in that

422
00:14:00,079 --> 00:14:01,839
folder now suppose we want to edit that

423
00:14:01,839 --> 00:14:03,360
with a different program so i'm going to

424
00:14:03,360 --> 00:14:04,959
open up windows explorer i could have

425
00:14:04,959 --> 00:14:06,560
closed the website nothing the website's

426
00:14:06,560 --> 00:14:07,920
not doing anything at this point i'm

427
00:14:07,920 --> 00:14:09,519
going to go to that folder and i'm going

428
00:14:09,519 --> 00:14:12,240
to double click the audacity project

429
00:14:12,240 --> 00:14:14,160
double click that file

430
00:14:14,160 --> 00:14:15,760
loads up the desktop program which also

431
00:14:15,760 --> 00:14:18,320
edits that project file and boom you

432
00:14:18,320 --> 00:14:20,000
have been hacked

433
00:14:20,000 --> 00:14:22,240
pops up a calculator it's never good

434
00:14:22,240 --> 00:14:24,160
when you get a

435
00:14:24,160 --> 00:14:26,160
message box saying you have been hacked

436
00:14:26,160 --> 00:14:29,279
so code execution we've got calc running

437
00:14:29,279 --> 00:14:31,440
all because that website was able to

438
00:14:31,440 --> 00:14:34,639
write a dll to the same folder as that

439
00:14:34,639 --> 00:14:37,040
project file which then got opened in a

440
00:14:37,040 --> 00:14:39,839
program which loads up a dll

441
00:14:39,839 --> 00:14:40,880
and

442
00:14:40,880 --> 00:14:42,560
that's just one example like i said

443
00:14:42,560 --> 00:14:44,160
there there are lots of other programs

444
00:14:44,160 --> 00:14:46,480
which have the same issue so that's i

445
00:14:46,480 --> 00:14:49,680
think a significant risk to

446
00:14:49,680 --> 00:14:53,519
this api granting writable access

447
00:14:53,519 --> 00:14:55,839
to to folders especially because you can

448
00:14:55,839 --> 00:14:57,279
write dlls to those folders and those

449
00:14:57,279 --> 00:14:59,040
might get loaded and that load happens

450
00:14:59,040 --> 00:15:00,720
regardless you notice there was no mark

451
00:15:00,720 --> 00:15:03,279
of the web that um that you ran into

452
00:15:03,279 --> 00:15:05,199
there it just simply

453
00:15:05,199 --> 00:15:06,720
loaded immediately because load library

454
00:15:06,720 --> 00:15:08,000
doesn't check mark the web or give you

455
00:15:08,000 --> 00:15:09,839
any kind of smart screen prompts are you

456
00:15:09,839 --> 00:15:11,600
sure you want to run this before opening

457
00:15:11,600 --> 00:15:13,839
up

458
00:15:15,120 --> 00:15:17,199
all right so next uh remote code

459
00:15:17,199 --> 00:15:18,560
execution attack

460
00:15:18,560 --> 00:15:20,399
is one that i call slate of hand so in

461
00:15:20,399 --> 00:15:22,000
this one i'm going to do a quick

462
00:15:22,000 --> 00:15:24,320
demonstration before

463
00:15:24,320 --> 00:15:26,560
we actually get started and

464
00:15:26,560 --> 00:15:27,839
do the

465
00:15:27,839 --> 00:15:29,839
and explain it

466
00:15:29,839 --> 00:15:32,959
so here's the video so in this instance

467
00:15:32,959 --> 00:15:34,560
the scenario is you're going to a

468
00:15:34,560 --> 00:15:36,240
website and this website is going to

469
00:15:36,240 --> 00:15:38,240
provide you with some test scripts

470
00:15:38,240 --> 00:15:39,920
you've got some issue with your network

471
00:15:39,920 --> 00:15:42,160
connectivity and you want to see hey is

472
00:15:42,160 --> 00:15:43,759
everything working right and this

473
00:15:43,759 --> 00:15:45,360
happens a lot for people in the

474
00:15:45,360 --> 00:15:47,279
technology industry how many times have

475
00:15:47,279 --> 00:15:48,880
we downloaded some tool off the internet

476
00:15:48,880 --> 00:15:51,120
i mean every every icon on the desktop

477
00:15:51,120 --> 00:15:52,240
right is something that we've downloaded

478
00:15:52,240 --> 00:15:53,360
on the internet from the internet and

479
00:15:53,360 --> 00:15:54,480
run

480
00:15:54,480 --> 00:15:56,720
um and we're downloading scripts from

481
00:15:56,720 --> 00:15:58,880
you know people in you know who knows

482
00:15:58,880 --> 00:16:01,279
maybe maybe some stack overflow clone or

483
00:16:01,279 --> 00:16:03,440
something like that

484
00:16:03,440 --> 00:16:05,519
and you're not sure who's who's saved

485
00:16:05,519 --> 00:16:08,000
this or who's shared this this is a

486
00:16:08,000 --> 00:16:09,839
potential risk right so here it's asking

487
00:16:09,839 --> 00:16:11,360
me to save this script so i'm going to

488
00:16:11,360 --> 00:16:12,720
save it it's a batch script just going

489
00:16:12,720 --> 00:16:14,480
to call it test

490
00:16:14,480 --> 00:16:16,959
but i don't know if this is safe or not

491
00:16:16,959 --> 00:16:19,519
i want to see if this script will will

492
00:16:19,519 --> 00:16:21,680
cause me any issues will be

493
00:16:21,680 --> 00:16:23,519
you know malicious at all so i want to

494
00:16:23,519 --> 00:16:25,600
inspect this script before i run it so

495
00:16:25,600 --> 00:16:27,199
ask yourself if you're downloading a

496
00:16:27,199 --> 00:16:28,240
file

497
00:16:28,240 --> 00:16:28,959
to

498
00:16:28,959 --> 00:16:30,639
you know a script to help you out with

499
00:16:30,639 --> 00:16:32,240
something

500
00:16:32,240 --> 00:16:33,600
how would you verify whether or not

501
00:16:33,600 --> 00:16:34,880
there is something malicious in this

502
00:16:34,880 --> 00:16:36,320
script if you're not sure where you got

503
00:16:36,320 --> 00:16:37,360
it from

504
00:16:37,360 --> 00:16:39,120
well first thing i would do is look at

505
00:16:39,120 --> 00:16:40,800
it so i'm going to go to edit

506
00:16:40,800 --> 00:16:41,920
not going to run it i'm just going to

507
00:16:41,920 --> 00:16:43,920
edit it in notepad now because this is a

508
00:16:43,920 --> 00:16:45,440
downloaded file i will get the smart

509
00:16:45,440 --> 00:16:47,199
screen prompt but again i'm just editing

510
00:16:47,199 --> 00:16:50,800
it so what does it say ping 1270

511
00:16:50,800 --> 00:16:53,839
just pinging localhost very simple

512
00:16:53,839 --> 00:16:56,240
clearly nothing malicious in here

513
00:16:56,240 --> 00:16:58,480
now i know you might be thinking oh well

514
00:16:58,480 --> 00:17:00,240
maybe he's used some unicode trick to

515
00:17:00,240 --> 00:17:02,160
hide some malicious stuff in the script

516
00:17:02,160 --> 00:17:03,680
there's no u code trick so straight up

517
00:17:03,680 --> 00:17:04,799
notepad but just to show you that i'm

518
00:17:04,799 --> 00:17:06,079
going to open it with the hex editor

519
00:17:06,079 --> 00:17:08,480
this is every byte in the file you can

520
00:17:08,480 --> 00:17:10,119
see it right here it is

521
00:17:10,119 --> 00:17:12,079
ping127.0.0.1 and a

522
00:17:12,079 --> 00:17:13,839
newline character there's absolutely

523
00:17:13,839 --> 00:17:15,199
nothing else in the file here's the

524
00:17:15,199 --> 00:17:17,199
binary if you wanted you could upload

525
00:17:17,199 --> 00:17:20,000
this to a antivirus scanner you could

526
00:17:20,000 --> 00:17:21,760
run it with a virus scanner locally you

527
00:17:21,760 --> 00:17:23,520
could run on one of the services that

528
00:17:23,520 --> 00:17:25,280
will run against a million virus

529
00:17:25,280 --> 00:17:26,640
scanners

530
00:17:26,640 --> 00:17:27,839
and you can test it out and it'll come

531
00:17:27,839 --> 00:17:29,840
back clean so now i'm going to run it

532
00:17:29,840 --> 00:17:32,559
okay it's pinging real cohost and

533
00:17:32,559 --> 00:17:35,280
popping calc

534
00:17:36,720 --> 00:17:38,799
so just like that we get command

535
00:17:38,799 --> 00:17:40,559
execution of

536
00:17:40,559 --> 00:17:43,520
arbitrary commands

537
00:17:43,520 --> 00:17:45,039
all with this

538
00:17:45,039 --> 00:17:46,480
technique

539
00:17:46,480 --> 00:17:49,679
that completely bypassed all of the type

540
00:17:49,679 --> 00:17:51,120
all of the normal techniques that you

541
00:17:51,120 --> 00:17:53,039
would use to

542
00:17:53,039 --> 00:17:54,480
look at a

543
00:17:54,480 --> 00:17:56,240
file and decide whether or not it's

544
00:17:56,240 --> 00:17:57,600
malicious or

545
00:17:57,600 --> 00:17:58,880
benign

546
00:17:58,880 --> 00:18:00,000
and i think that's that's probably one

547
00:18:00,000 --> 00:18:01,360
of the more severe attacks that you can

548
00:18:01,360 --> 00:18:03,760
do so let's talk about how that worked

549
00:18:03,760 --> 00:18:05,679
in a normal download flow you'll open a

550
00:18:05,679 --> 00:18:06,480
site

551
00:18:06,480 --> 00:18:08,960
you'll click a script to

552
00:18:08,960 --> 00:18:11,280
or click a link to download a script

553
00:18:11,280 --> 00:18:12,559
that will

554
00:18:12,559 --> 00:18:15,520
then redirect you to a save prompt for a

555
00:18:15,520 --> 00:18:17,360
file with a name

556
00:18:17,360 --> 00:18:18,960
you'll save that after that download

557
00:18:18,960 --> 00:18:21,200
completes you'll examine that file smart

558
00:18:21,200 --> 00:18:23,039
screen might run its checks at that

559
00:18:23,039 --> 00:18:25,200
point and then you run the file

560
00:18:25,200 --> 00:18:27,280
in this attack using the new file system

561
00:18:27,280 --> 00:18:29,440
api access instead of providing a link

562
00:18:29,440 --> 00:18:32,240
to a file which is a direct download

563
00:18:32,240 --> 00:18:36,400
what you do is you provide a link to a

564
00:18:36,400 --> 00:18:38,960
java bit of javascript which requests

565
00:18:38,960 --> 00:18:41,919
writable access and we can we can force

566
00:18:41,919 --> 00:18:43,600
the file extension to be what we want it

567
00:18:43,600 --> 00:18:44,880
to be which in this case was a batch

568
00:18:44,880 --> 00:18:46,080
file

569
00:18:46,080 --> 00:18:47,600
so you'll get the save prompt you'll

570
00:18:47,600 --> 00:18:49,280
have to type the name

571
00:18:49,280 --> 00:18:53,039
and then it will write that file

572
00:18:53,039 --> 00:18:54,400
at that point the user will examine the

573
00:18:54,400 --> 00:18:56,000
file smart screen will check for what's

574
00:18:56,000 --> 00:18:57,919
running on that file

575
00:18:57,919 --> 00:18:59,760
or you know the contents of that file

576
00:18:59,760 --> 00:19:01,039
and then when you double click that that

577
00:19:01,039 --> 00:19:02,400
file will be written but here's the

578
00:19:02,400 --> 00:19:03,840
difference the difference is by using

579
00:19:03,840 --> 00:19:05,919
the file access api

580
00:19:05,919 --> 00:19:08,559
the web page retains write access to

581
00:19:08,559 --> 00:19:11,919
that file even after you have now

582
00:19:11,919 --> 00:19:13,919
run it in something else

583
00:19:13,919 --> 00:19:15,919
so the user will run that file

584
00:19:15,919 --> 00:19:18,000
and the page can then re-request edit

585
00:19:18,000 --> 00:19:20,480
access to that file get edit access to

586
00:19:20,480 --> 00:19:22,320
the file the browser will attempt to

587
00:19:22,320 --> 00:19:24,320
lock the file but when running scripts

588
00:19:24,320 --> 00:19:26,240
like batch scripts the command prompt

589
00:19:26,240 --> 00:19:28,320
doesn't hold the lock to the file

590
00:19:28,320 --> 00:19:30,000
and so it will then be able to edit that

591
00:19:30,000 --> 00:19:32,000
file as it is being executed add

592
00:19:32,000 --> 00:19:33,360
additional commands to it to do whatever

593
00:19:33,360 --> 00:19:35,679
you want and then close it

594
00:19:35,679 --> 00:19:37,760
at that point because the file is

595
00:19:37,760 --> 00:19:39,520
already running in command prompt it has

596
00:19:39,520 --> 00:19:41,200
already run the smart screen checks it

597
00:19:41,200 --> 00:19:43,039
has already sent those hashes to

598
00:19:43,039 --> 00:19:45,280
microsoft to be viewed and there will be

599
00:19:45,280 --> 00:19:46,880
no further prompt it will simply run

600
00:19:46,880 --> 00:19:48,720
those malicious

601
00:19:48,720 --> 00:19:50,160
instructions that you have added to the

602
00:19:50,160 --> 00:19:52,799
file the malicious commands and

603
00:19:52,799 --> 00:19:55,039
you've basically got um

604
00:19:55,039 --> 00:19:56,799
got no

605
00:19:56,799 --> 00:19:58,960
ability to

606
00:19:58,960 --> 00:20:01,440
to then see what it is or an opportunity

607
00:20:01,440 --> 00:20:04,320
to examine it because like i said it can

608
00:20:04,320 --> 00:20:06,080
and depending what this script is you

609
00:20:06,080 --> 00:20:07,600
could potentially detect that it's been

610
00:20:07,600 --> 00:20:09,200
run and then only apply the edit once

611
00:20:09,200 --> 00:20:14,080
you know it is in progress of execution

612
00:20:15,840 --> 00:20:18,080
so in a normal download flow what are

613
00:20:18,080 --> 00:20:19,120
some of the differences here well the

614
00:20:19,120 --> 00:20:20,720
site can only suggest the extension and

615
00:20:20,720 --> 00:20:22,240
the website only has right access once

616
00:20:22,240 --> 00:20:23,520
the essential difference is in the

617
00:20:23,520 --> 00:20:25,520
attack with file system access api the

618
00:20:25,520 --> 00:20:26,799
site first of all can force the

619
00:20:26,799 --> 00:20:28,960
extension which isn't a major issue

620
00:20:28,960 --> 00:20:31,440
but most of all it can re-access that

621
00:20:31,440 --> 00:20:32,720
file

622
00:20:32,720 --> 00:20:34,880
and again like we've explained before it

623
00:20:34,880 --> 00:20:36,000
does require a whole file lock and

624
00:20:36,000 --> 00:20:38,960
replacement however when command prompt

625
00:20:38,960 --> 00:20:41,679
is executing a batch script it opens the

626
00:20:41,679 --> 00:20:45,039
file reads the first line

627
00:20:45,039 --> 00:20:47,440
closes the file executes the line then

628
00:20:47,440 --> 00:20:50,400
reopens the file seeks to the next spot

629
00:20:50,400 --> 00:20:52,799
in the in the file reads some more and

630
00:20:52,799 --> 00:20:55,360
then executes that so with a script-like

631
00:20:55,360 --> 00:20:56,960
execution with these type of script

632
00:20:56,960 --> 00:20:58,159
interpreters

633
00:20:58,159 --> 00:21:00,880
you really don't have an issue with

634
00:21:00,880 --> 00:21:02,799
locking that file

635
00:21:02,799 --> 00:21:03,919
because

636
00:21:03,919 --> 00:21:05,520
the the lock is not held by the

637
00:21:05,520 --> 00:21:07,600
interpreter as it's being executed so

638
00:21:07,600 --> 00:21:09,919
even though the website has a brief lock

639
00:21:09,919 --> 00:21:11,200
to edit it

640
00:21:11,200 --> 00:21:13,120
that doesn't conflict with the

641
00:21:13,120 --> 00:21:15,919
script execution which is running it

642
00:21:15,919 --> 00:21:17,600
which then re-obtains a lock when it

643
00:21:17,600 --> 00:21:20,880
then wants to run the next command and

644
00:21:20,880 --> 00:21:22,480
it has no issue

645
00:21:22,480 --> 00:21:24,000
executing the newly added malicious

646
00:21:24,000 --> 00:21:26,080
instructions

647
00:21:26,080 --> 00:21:28,240
now this is not

648
00:21:28,240 --> 00:21:30,480
vulnerable it doesn't apply to execution

649
00:21:30,480 --> 00:21:32,400
types that maintain handles during

650
00:21:32,400 --> 00:21:35,039
execution like any like an exe i can't

651
00:21:35,039 --> 00:21:37,280
edit an exe while it's running because

652
00:21:37,280 --> 00:21:39,039
that lock will conflict however it works

653
00:21:39,039 --> 00:21:41,039
fine with this script and i assume

654
00:21:41,039 --> 00:21:44,159
others but this was the first i tried

655
00:21:44,159 --> 00:21:45,679
so next let's talk about forensic

656
00:21:45,679 --> 00:21:48,240
artifacts of these attacks so first of

657
00:21:48,240 --> 00:21:50,400
all you have obviously browser cache and

658
00:21:50,400 --> 00:21:52,640
other forensics for these attacks which

659
00:21:52,640 --> 00:21:54,320
you might be able to see for the slate

660
00:21:54,320 --> 00:21:55,760
of hand one of the biggest things that

661
00:21:55,760 --> 00:21:56,880
you're looking for if you're doing a

662
00:21:56,880 --> 00:21:58,159
forensic analysis and you're suspecting

663
00:21:58,159 --> 00:22:00,240
something like this happens is looking

664
00:22:00,240 --> 00:22:02,320
at the time stamps because in this case

665
00:22:02,320 --> 00:22:03,520
you won't have

666
00:22:03,520 --> 00:22:05,360
a single file

667
00:22:05,360 --> 00:22:07,520
edit you will have had a series of edits

668
00:22:07,520 --> 00:22:08,960
so you'll see

669
00:22:08,960 --> 00:22:09,840
both

670
00:22:09,840 --> 00:22:10,880
and

671
00:22:10,880 --> 00:22:13,600
because the temporary file is used you

672
00:22:13,600 --> 00:22:15,360
may also see remnants of that temporary

673
00:22:15,360 --> 00:22:16,400
file

674
00:22:16,400 --> 00:22:18,799
so that file which is in use the

675
00:22:18,799 --> 00:22:20,559
modification times again will be later

676
00:22:20,559 --> 00:22:22,640
than the creation times and that will

677
00:22:22,640 --> 00:22:23,919
give you a hint that maybe this was

678
00:22:23,919 --> 00:22:26,080
modified after it was originally created

679
00:22:26,080 --> 00:22:28,400
for that slate of hand attack you also

680
00:22:28,400 --> 00:22:29,919
may see some of those temporary file

681
00:22:29,919 --> 00:22:32,000
entries like the cr swap entries which

682
00:22:32,000 --> 00:22:34,960
will tell you that hey this thing

683
00:22:34,960 --> 00:22:37,760
came from the file system access api and

684
00:22:37,760 --> 00:22:41,120
it didn't come from a normal download

685
00:22:41,120 --> 00:22:42,559
and those summary file entries might

686
00:22:42,559 --> 00:22:44,240
still exist in the mft obviously they

687
00:22:44,240 --> 00:22:45,440
can be

688
00:22:45,440 --> 00:22:46,960
overwritten

689
00:22:46,960 --> 00:22:48,960
by other files later but you may see

690
00:22:48,960 --> 00:22:50,400
that if you if you get a forensic image

691
00:22:50,400 --> 00:22:51,919
quickly

692
00:22:51,919 --> 00:22:54,880
other things are for the dll attack you

693
00:22:54,880 --> 00:22:57,360
may have evidence of dll load depending

694
00:22:57,360 --> 00:22:59,440
on you know if you have settings on

695
00:22:59,440 --> 00:23:01,039
things like

696
00:23:01,039 --> 00:23:04,080
sysmon or edrs might be able to see that

697
00:23:04,080 --> 00:23:06,880
dll being written and loaded even though

698
00:23:06,880 --> 00:23:08,320
it maintains the mark of the web the

699
00:23:08,320 --> 00:23:09,600
whole time

700
00:23:09,600 --> 00:23:11,919
for the binary planting attack

701
00:23:11,919 --> 00:23:14,320
and obviously you also have any any of

702
00:23:14,320 --> 00:23:16,640
the host files like in our example was

703
00:23:16,640 --> 00:23:19,360
the audio project file which was written

704
00:23:19,360 --> 00:23:20,880
you might be able to see things like

705
00:23:20,880 --> 00:23:23,280
that so

706
00:23:23,280 --> 00:23:24,559
these are these are the main forensics

707
00:23:24,559 --> 00:23:25,840
artifacts that you're looking for from a

708
00:23:25,840 --> 00:23:28,240
dfir perspective let's talk about

709
00:23:28,240 --> 00:23:30,960
how to mitigate this from a

710
00:23:30,960 --> 00:23:32,559
perspective of both the user as well as

711
00:23:32,559 --> 00:23:34,480
potentially the

712
00:23:34,480 --> 00:23:36,880
browser maker so first of all as a user

713
00:23:36,880 --> 00:23:39,039
the biggest thing to do is to understand

714
00:23:39,039 --> 00:23:41,440
what exactly the new permissions

715
00:23:41,440 --> 00:23:42,559
provide

716
00:23:42,559 --> 00:23:45,440
and and look for certain signs that a

717
00:23:45,440 --> 00:23:46,799
website is using some of these new

718
00:23:46,799 --> 00:23:48,960
permissions instead of the old file

719
00:23:48,960 --> 00:23:52,400
download method so one of those would be

720
00:23:52,400 --> 00:23:54,000
the fact that if you're if you're doing

721
00:23:54,000 --> 00:23:57,600
a file write with the file access api it

722
00:23:57,600 --> 00:23:59,600
will ask you to prompt and it's a single

723
00:23:59,600 --> 00:24:02,000
file right not a folder access right

724
00:24:02,000 --> 00:24:03,520
as opposed to a download it will prompt

725
00:24:03,520 --> 00:24:07,120
you to fill in the full name of the file

726
00:24:07,120 --> 00:24:08,880
and it also won't allow you to edit your

727
00:24:08,880 --> 00:24:10,480
extension so you could look for those

728
00:24:10,480 --> 00:24:12,080
two signs to say

729
00:24:12,080 --> 00:24:13,600
you know make that make that stick in

730
00:24:13,600 --> 00:24:16,159
your mind hey after i save this this

731
00:24:16,159 --> 00:24:17,919
webpage will continue to have right

732
00:24:17,919 --> 00:24:19,679
access to it until i close the webpage

733
00:24:19,679 --> 00:24:22,640
in all of its windows

734
00:24:22,960 --> 00:24:23,840
other

735
00:24:23,840 --> 00:24:26,400
other actions to avoid are things like

736
00:24:26,400 --> 00:24:28,240
downloading without

737
00:24:28,240 --> 00:24:30,840
double checking what's in that

738
00:24:30,840 --> 00:24:34,720
file uh before before running it or like

739
00:24:34,720 --> 00:24:36,159
we've seen how that can be bypassed

740
00:24:36,159 --> 00:24:38,240
especially before closing the tabs

741
00:24:38,240 --> 00:24:41,679
that's the biggest takeaway here is that

742
00:24:41,679 --> 00:24:44,000
once you close that tab that web page no

743
00:24:44,000 --> 00:24:45,440
longer has access to those files and

744
00:24:45,440 --> 00:24:47,200
can't mess with things so what you want

745
00:24:47,200 --> 00:24:49,120
to do is you want to be able to do that

746
00:24:49,120 --> 00:24:50,799
first before messing with any of the

747
00:24:50,799 --> 00:24:52,960
files that a page has written

748
00:24:52,960 --> 00:24:53,919
and also

749
00:24:53,919 --> 00:24:56,320
be careful about running any programs

750
00:24:56,320 --> 00:24:58,880
which may have dll preloading

751
00:24:58,880 --> 00:25:01,039
vulnerabilities or issues

752
00:25:01,039 --> 00:25:03,440
so i don't know that i would necessarily

753
00:25:03,440 --> 00:25:04,640
say that was

754
00:25:04,640 --> 00:25:06,400
for sure a vulnerability i know a lot of

755
00:25:06,400 --> 00:25:08,559
those are called that the authors of

756
00:25:08,559 --> 00:25:10,480
that software might just say hey if

757
00:25:10,480 --> 00:25:12,480
you're opening a project you have to

758
00:25:12,480 --> 00:25:14,240
trust the directory that it's in it's

759
00:25:14,240 --> 00:25:15,520
one of those situations where you know

760
00:25:15,520 --> 00:25:17,600
the browser maker can say no it's your

761
00:25:17,600 --> 00:25:19,039
fault for

762
00:25:19,039 --> 00:25:20,960
loading dlls from random directories and

763
00:25:20,960 --> 00:25:22,960
the programming maker can say no it's

764
00:25:22,960 --> 00:25:24,799
your fault browser for allowing the

765
00:25:24,799 --> 00:25:26,320
website to write a dll to a random

766
00:25:26,320 --> 00:25:28,240
directory i'm not taking a side on who's

767
00:25:28,240 --> 00:25:29,520
right i'm just saying from the

768
00:25:29,520 --> 00:25:31,440
perspective of a user

769
00:25:31,440 --> 00:25:33,440
maybe maybe you should be warned about

770
00:25:33,440 --> 00:25:34,880
that and look for any of those which

771
00:25:34,880 --> 00:25:36,720
have been in folders which you've

772
00:25:36,720 --> 00:25:39,679
granted a website access to write to

773
00:25:39,679 --> 00:25:41,039
having said that at the browser level

774
00:25:41,039 --> 00:25:42,480
the browser did want to stop it they

775
00:25:42,480 --> 00:25:43,279
could

776
00:25:43,279 --> 00:25:46,159
block access to writing dlls just like

777
00:25:46,159 --> 00:25:47,600
they've blocked access to writing link

778
00:25:47,600 --> 00:25:49,039
files

779
00:25:49,039 --> 00:25:51,120
some other things that they could do are

780
00:25:51,120 --> 00:25:54,159
blocking script files like batches from

781
00:25:54,159 --> 00:25:58,240
being executed that would also stop the

782
00:25:58,240 --> 00:26:00,640
swapping attack there it could also lock

783
00:26:00,640 --> 00:26:02,640
the file for the entire duration of

784
00:26:02,640 --> 00:26:04,400
potential access so it doesn't release a

785
00:26:04,400 --> 00:26:06,400
lock and then allow you to regain that

786
00:26:06,400 --> 00:26:09,360
file lock and edit it again

787
00:26:09,360 --> 00:26:10,400
another thing you could do would be

788
00:26:10,400 --> 00:26:12,720
adding user approval prompt for

789
00:26:12,720 --> 00:26:14,720
read write access like we had instead of

790
00:26:14,720 --> 00:26:16,720
that file download looking

791
00:26:16,720 --> 00:26:18,159
essentially the same as a normal file

792
00:26:18,159 --> 00:26:20,080
download that file write access would

793
00:26:20,080 --> 00:26:21,679
have a different

794
00:26:21,679 --> 00:26:23,520
prompt like that blue button we saw

795
00:26:23,520 --> 00:26:24,720
earlier that's something that could be

796
00:26:24,720 --> 00:26:27,200
done or it could prompt again if you

797
00:26:27,200 --> 00:26:28,640
re-request access maybe it doesn't

798
00:26:28,640 --> 00:26:30,960
prompt the first time you request access

799
00:26:30,960 --> 00:26:32,320
another thing they could do is a visual

800
00:26:32,320 --> 00:26:34,080
indication for ongoing access so we've

801
00:26:34,080 --> 00:26:36,480
all seen this if you've used a web page

802
00:26:36,480 --> 00:26:37,919
which requests access to your video or

803
00:26:37,919 --> 00:26:39,760
microphone there will be a recording

804
00:26:39,760 --> 00:26:41,760
indicator visible that shows hey this

805
00:26:41,760 --> 00:26:43,360
website still has some sensitive access

806
00:26:43,360 --> 00:26:44,720
to your system

807
00:26:44,720 --> 00:26:47,120
something like that could be done for

808
00:26:47,120 --> 00:26:49,360
the file access that we've seen and

809
00:26:49,360 --> 00:26:50,960
maybe that would be another hint that

810
00:26:50,960 --> 00:26:52,720
would that would help out the user so

811
00:26:52,720 --> 00:26:54,080
that's another option that browser

812
00:26:54,080 --> 00:26:57,120
makers might be able to do

813
00:26:57,120 --> 00:26:59,520
so with that i'm going to wrap up and

814
00:26:59,520 --> 00:27:02,720
leave a few minutes for

815
00:27:02,720 --> 00:27:06,200
for any questions

