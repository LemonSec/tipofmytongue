1
00:00:01,130 --> 00:00:10,939
[Music]

2
00:00:12,559 --> 00:00:14,880
welcome to securing open source software

3
00:00:14,880 --> 00:00:17,119
end to end at massive scale together my

4
00:00:17,119 --> 00:00:18,560
name is jennifer furnik and i'm joined

5
00:00:18,560 --> 00:00:21,920
by my colleague christopher robinson

6
00:00:21,920 --> 00:00:23,680
in this presentation we'll be speaking

7
00:00:23,680 --> 00:00:26,160
about securing the open source ecosystem

8
00:00:26,160 --> 00:00:27,599
so to begin we'll share a little bit

9
00:00:27,599 --> 00:00:29,359
about ourselves myself from the

10
00:00:29,359 --> 00:00:31,519
perspective of a security researcher and

11
00:00:31,519 --> 00:00:33,760
as someone who in a past life

12
00:00:33,760 --> 00:00:35,600
design and ran cryptographic systems

13
00:00:35,600 --> 00:00:37,440
that protect tens of billions of dollars

14
00:00:37,440 --> 00:00:39,760
in daily transactions and crop from the

15
00:00:39,760 --> 00:00:41,440
perspective of someone who helped

16
00:00:41,440 --> 00:00:43,120
coordinate some of the most impactful

17
00:00:43,120 --> 00:00:44,719
vulnerability disclosures in our

18
00:00:44,719 --> 00:00:46,800
industry over the last seven to eight

19
00:00:46,800 --> 00:00:49,520
years we'll also share lessons learned

20
00:00:49,520 --> 00:00:51,600
from these experiences in coordinating

21
00:00:51,600 --> 00:00:53,680
vulnerability disclosure we'll talk

22
00:00:53,680 --> 00:00:55,520
about why securing the open source

23
00:00:55,520 --> 00:00:58,480
ecosystem matters will share several

24
00:00:58,480 --> 00:01:00,239
challenges to securing open source

25
00:01:00,239 --> 00:01:02,079
software at scale and we'll offer a

26
00:01:02,079 --> 00:01:03,600
threat model of the open source

27
00:01:03,600 --> 00:01:05,680
ecosystem because securing open source

28
00:01:05,680 --> 00:01:07,520
software is way more than preventing

29
00:01:07,520 --> 00:01:09,680
malicious commits we'll also talk about

30
00:01:09,680 --> 00:01:11,600
why we believe that the insecurity of

31
00:01:11,600 --> 00:01:13,200
the open source ecosystem is

32
00:01:13,200 --> 00:01:15,840
accelerating based on things like the

33
00:01:15,840 --> 00:01:17,759
speed at which new vulnerabilities are

34
00:01:17,759 --> 00:01:19,520
exploited in the wild

35
00:01:19,520 --> 00:01:21,040
the increased use of supply chain

36
00:01:21,040 --> 00:01:23,280
attacks and advances in computer science

37
00:01:23,280 --> 00:01:25,280
that make exploitation

38
00:01:25,280 --> 00:01:27,520
faster and easier than ever finally

39
00:01:27,520 --> 00:01:29,439
we'll discuss techniques for reducing

40
00:01:29,439 --> 00:01:31,280
vulnerabilities at scale

41
00:01:31,280 --> 00:01:33,280
the status quo for coordinated work to

42
00:01:33,280 --> 00:01:34,960
improve the security of the open source

43
00:01:34,960 --> 00:01:37,360
ecosystem and share how the open source

44
00:01:37,360 --> 00:01:39,439
security foundation is scaling the

45
00:01:39,439 --> 00:01:42,079
efforts of security researchers as well

46
00:01:42,079 --> 00:01:43,360
as share a bit about some of the

47
00:01:43,360 --> 00:01:45,119
resources and opportunities to get

48
00:01:45,119 --> 00:01:47,439
involved with us

49
00:01:47,439 --> 00:01:49,680
um so my name is jennifer fernick as

50
00:01:49,680 --> 00:01:51,200
mentioned i'm the global head of

51
00:01:51,200 --> 00:01:52,880
research at the security research and

52
00:01:52,880 --> 00:01:55,520
consulting firm ncc group i'm also one

53
00:01:55,520 --> 00:01:57,520
of the co-founding board and technical

54
00:01:57,520 --> 00:01:59,280
advisory committee members of the open

55
00:01:59,280 --> 00:02:01,280
source security foundation

56
00:02:01,280 --> 00:02:03,280
in a past life i was a cryptographer and

57
00:02:03,280 --> 00:02:05,439
a quantum computer scientist and

58
00:02:05,439 --> 00:02:07,360
previously was the security architect

59
00:02:07,360 --> 00:02:08,399
and later

60
00:02:08,399 --> 00:02:10,959
led a large security team at a global

61
00:02:10,959 --> 00:02:13,520
bank and my background academically is

62
00:02:13,520 --> 00:02:15,599
in quantum computing systems engineering

63
00:02:15,599 --> 00:02:19,119
and artificial intelligence

64
00:02:19,840 --> 00:02:22,080
thanks jennifer i'm krobe i've had the

65
00:02:22,080 --> 00:02:23,680
great privilege to work within open

66
00:02:23,680 --> 00:02:25,520
source and security for a great many

67
00:02:25,520 --> 00:02:26,560
years

68
00:02:26,560 --> 00:02:28,319
i've had the

69
00:02:28,319 --> 00:02:30,879
honor of working on a lot of high

70
00:02:30,879 --> 00:02:33,360
profile critical coordinations within

71
00:02:33,360 --> 00:02:35,200
the community and within

72
00:02:35,200 --> 00:02:37,680
the larger technology industry

73
00:02:37,680 --> 00:02:39,200
i've worked with red hat product

74
00:02:39,200 --> 00:02:41,680
security for six years before i came

75
00:02:41,680 --> 00:02:44,480
here to the intel corporation

76
00:02:44,480 --> 00:02:46,239
i currently am the working group leader

77
00:02:46,239 --> 00:02:47,760
for the vulnerability disclosure working

78
00:02:47,760 --> 00:02:49,440
group and the developer best practices

79
00:02:49,440 --> 00:02:52,160
working group part of open sss and i've

80
00:02:52,160 --> 00:02:54,800
you know done some stuff i've seen some

81
00:02:54,800 --> 00:02:55,920
things

82
00:02:55,920 --> 00:02:57,200
crazy crazy and we're going to share

83
00:02:57,200 --> 00:02:59,200
some of that insight today

84
00:02:59,200 --> 00:03:03,040
the open ssf is a assembly of

85
00:03:03,040 --> 00:03:05,760
very prestigious and very humble folks

86
00:03:05,760 --> 00:03:07,519
great and small organizations big and

87
00:03:07,519 --> 00:03:09,680
small we've all come together focused on

88
00:03:09,680 --> 00:03:11,440
the mission of securing open source

89
00:03:11,440 --> 00:03:13,840
software for the larger community

90
00:03:13,840 --> 00:03:15,920
benefit

91
00:03:15,920 --> 00:03:18,560
we're going to start off today where i'd

92
00:03:18,560 --> 00:03:22,480
like you to imagine a world

93
00:03:22,480 --> 00:03:24,480
imagine a world where there's a security

94
00:03:24,480 --> 00:03:27,519
researcher they find what they feel is a

95
00:03:27,519 --> 00:03:29,040
critical bug in an open source

96
00:03:29,040 --> 00:03:31,440
cryptographic library and they want to

97
00:03:31,440 --> 00:03:35,120
see it get fixed they feel

98
00:03:35,120 --> 00:03:36,879
greatly that they need to participate in

99
00:03:36,879 --> 00:03:38,319
a process called coordinated

100
00:03:38,319 --> 00:03:40,000
vulnerability disclosure

101
00:03:40,000 --> 00:03:42,159
so they search around the internet

102
00:03:42,159 --> 00:03:44,080
looking to try to find the developer or

103
00:03:44,080 --> 00:03:46,799
the maintainer and there is it's not

104
00:03:46,799 --> 00:03:49,599
very easy there's no website there's not

105
00:03:49,599 --> 00:03:51,200
any centralized place where this

106
00:03:51,200 --> 00:03:52,799
development team

107
00:03:52,799 --> 00:03:55,360
hangs out eventually the researcher

108
00:03:55,360 --> 00:03:58,720
finds out that there's a github repo

109
00:03:58,720 --> 00:04:00,400
that unfortunately hasn't been updated

110
00:04:00,400 --> 00:04:02,640
in about three years

111
00:04:02,640 --> 00:04:04,080
not deterred

112
00:04:04,080 --> 00:04:06,000
uh they continue searching and they find

113
00:04:06,000 --> 00:04:09,120
on a mailing server a mailing list that

114
00:04:09,120 --> 00:04:10,959
another project is using that same

115
00:04:10,959 --> 00:04:12,879
cryptographic library's name in some of

116
00:04:12,879 --> 00:04:14,560
their posts so they reach out to those

117
00:04:14,560 --> 00:04:16,720
developers and they find out yes indeed

118
00:04:16,720 --> 00:04:19,759
this team forked that original project

119
00:04:19,759 --> 00:04:21,279
they found a lot of good value in it

120
00:04:21,279 --> 00:04:22,960
unfortunately these folks they aren't

121
00:04:22,960 --> 00:04:25,040
security people

122
00:04:25,040 --> 00:04:27,040
they know some people that do security

123
00:04:27,040 --> 00:04:28,240
but they're not security people

124
00:04:28,240 --> 00:04:29,840
themselves so they ask can we include

125
00:04:29,840 --> 00:04:32,400
some extra people they reach out in irc

126
00:04:32,400 --> 00:04:34,400
in their mailing list to try to find

127
00:04:34,400 --> 00:04:36,240
additional people to kind of help out

128
00:04:36,240 --> 00:04:38,240
figure out this problem

129
00:04:38,240 --> 00:04:41,360
now on that mailing list happens to be a

130
00:04:41,360 --> 00:04:42,600
group called

131
00:04:42,600 --> 00:04:45,600
megacorporation megacorporation sells a

132
00:04:45,600 --> 00:04:47,440
commercial security package that uses

133
00:04:47,440 --> 00:04:49,600
this library and they're very excited

134
00:04:49,600 --> 00:04:51,440
that the reporter found this issue and

135
00:04:51,440 --> 00:04:53,520
they want to work with them on you know

136
00:04:53,520 --> 00:04:55,360
vetting out the proof of concept kind of

137
00:04:55,360 --> 00:04:57,759
triaging what the impact is

138
00:04:57,759 --> 00:05:00,400
they will get issue a cve for this it's

139
00:05:00,400 --> 00:05:01,680
going to be great

140
00:05:01,680 --> 00:05:03,759
so they say give us a little bit of time

141
00:05:03,759 --> 00:05:05,840
we'll get back to you

142
00:05:05,840 --> 00:05:09,360
the researcher waits and waits and waits

143
00:05:09,360 --> 00:05:10,400
and

144
00:05:10,400 --> 00:05:12,080
they reach back out and eventually

145
00:05:12,080 --> 00:05:15,120
megacorp says yeah you know

146
00:05:15,120 --> 00:05:17,120
this is an issue we acknowledge it's

147
00:05:17,120 --> 00:05:18,880
pretty bad but unfortunately we have a

148
00:05:18,880 --> 00:05:20,720
new product release coming up within the

149
00:05:20,720 --> 00:05:22,479
next six months we can't issue the

150
00:05:22,479 --> 00:05:25,680
release today can we wait until uh that

151
00:05:25,680 --> 00:05:27,360
product's release kind of coordinated

152
00:05:27,360 --> 00:05:28,800
around then

153
00:05:28,800 --> 00:05:31,520
researcher isn't super happy about that

154
00:05:31,520 --> 00:05:33,759
but uh you know they agree and then mega

155
00:05:33,759 --> 00:05:35,199
corp also mentions that there are

156
00:05:35,199 --> 00:05:36,720
several other major vendors they're

157
00:05:36,720 --> 00:05:38,479
aware of the uses library that they want

158
00:05:38,479 --> 00:05:40,320
to include in kind of the eventual

159
00:05:40,320 --> 00:05:43,039
remediation

160
00:05:43,759 --> 00:05:46,160
at the same time around this time that

161
00:05:46,160 --> 00:05:48,160
fork developer that original development

162
00:05:48,160 --> 00:05:50,560
team they had some free time and a lot

163
00:05:50,560 --> 00:05:52,000
of coffee and they said hey you know

164
00:05:52,000 --> 00:05:54,160
we've figured out the fix we've posted

165
00:05:54,160 --> 00:05:56,720
it upstream everything's great kind of

166
00:05:56,720 --> 00:05:59,360
ruining the not ruining but you know

167
00:05:59,360 --> 00:06:01,280
stepping over the kind of agreed-upon

168
00:06:01,280 --> 00:06:03,440
disclosure timeline and this is where

169
00:06:03,440 --> 00:06:05,039
things start to spiral out of control

170
00:06:05,039 --> 00:06:06,479
the internet starts reporting that there

171
00:06:06,479 --> 00:06:08,960
are exploits of several major vendors

172
00:06:08,960 --> 00:06:10,720
that use this a couple of them actually

173
00:06:10,720 --> 00:06:13,360
seem to pick it up in a major container

174
00:06:13,360 --> 00:06:15,759
platform and that image was downloaded

175
00:06:15,759 --> 00:06:18,160
thousands of times in the last month and

176
00:06:18,160 --> 00:06:20,080
you know a domestic telecommunications

177
00:06:20,080 --> 00:06:22,400
company picked that up and now they are

178
00:06:22,400 --> 00:06:24,319
being reported as vulnerable

179
00:06:24,319 --> 00:06:26,319
a huge internet

180
00:06:26,319 --> 00:06:27,759
uh

181
00:06:27,759 --> 00:06:28,880
magazine

182
00:06:28,880 --> 00:06:31,520
puts out a headline cracked crypto

183
00:06:31,520 --> 00:06:34,240
creatively crumbled by boffins for mega

184
00:06:34,240 --> 00:06:37,440
headaches the internet's on fire

185
00:06:37,440 --> 00:06:39,039
it seems to gotten pretty bad pretty

186
00:06:39,039 --> 00:06:40,479
quick

187
00:06:40,479 --> 00:06:41,360
or

188
00:06:41,360 --> 00:06:43,440
another scenario is

189
00:06:43,440 --> 00:06:45,440
that researcher never was able to find

190
00:06:45,440 --> 00:06:47,840
anyone to report that flaw to

191
00:06:47,840 --> 00:06:51,199
they try they eventually post the their

192
00:06:51,199 --> 00:06:53,759
exploit into their get repository they

193
00:06:53,759 --> 00:06:56,000
write a blog about it and you know they

194
00:06:56,000 --> 00:06:58,160
get a prime talking spot at a major

195
00:06:58,160 --> 00:07:01,039
security conference let's call it

196
00:07:01,039 --> 00:07:04,000
hat black for example because at the end

197
00:07:04,000 --> 00:07:07,280
of the day no one was able to help them

198
00:07:07,280 --> 00:07:09,199
and you know that's where we're here to

199
00:07:09,199 --> 00:07:10,639
talk about today

200
00:07:10,639 --> 00:07:14,160
while this was all kind of based in

201
00:07:14,160 --> 00:07:16,560
a thought experiment it really

202
00:07:16,560 --> 00:07:18,240
a lot of this stuff happens more

203
00:07:18,240 --> 00:07:19,759
frequently than you think

204
00:07:19,759 --> 00:07:23,120
back in 2018 there was a

205
00:07:23,120 --> 00:07:26,560
developer of uh open source library and

206
00:07:26,560 --> 00:07:28,400
essentially you know they

207
00:07:28,400 --> 00:07:30,400
didn't see a lot

208
00:07:30,400 --> 00:07:32,720
of value in continuing to maintain it

209
00:07:32,720 --> 00:07:33,840
and some

210
00:07:33,840 --> 00:07:35,840
random stranger on the internet said hey

211
00:07:35,840 --> 00:07:38,080
you know i'd like to help out i'll

212
00:07:38,080 --> 00:07:40,000
pick up maintaining this and the

213
00:07:40,000 --> 00:07:41,680
developer said you know what this guy

214
00:07:41,680 --> 00:07:44,000
mailed me i don't get anything for

215
00:07:44,000 --> 00:07:46,080
maintaining this module and i don't even

216
00:07:46,080 --> 00:07:47,680
use it anymore have him for years so he

217
00:07:47,680 --> 00:07:49,520
let this complete stranger

218
00:07:49,520 --> 00:07:51,680
start to maintain it and at first

219
00:07:51,680 --> 00:07:53,919
everything seemed fine but over a series

220
00:07:53,919 --> 00:07:55,120
of commits

221
00:07:55,120 --> 00:07:55,919
this

222
00:07:55,919 --> 00:07:58,319
maintained this new maintainer was found

223
00:07:58,319 --> 00:08:01,120
out that they were secretly baking in a

224
00:08:01,120 --> 00:08:04,639
back door to do bitcoin mining as for

225
00:08:04,639 --> 00:08:06,960
users of this module

226
00:08:06,960 --> 00:08:09,440
so this incidence these types of things

227
00:08:09,440 --> 00:08:11,759
can happen a lot more than you think

228
00:08:11,759 --> 00:08:13,680
let's reflect back to the granddaddy of

229
00:08:13,680 --> 00:08:15,520
them all heartbleed it was a very

230
00:08:15,520 --> 00:08:17,759
popular open source library

231
00:08:17,759 --> 00:08:18,879
and

232
00:08:18,879 --> 00:08:21,919
still to this day is and it's basically

233
00:08:21,919 --> 00:08:23,520
it helps with cryptography on the

234
00:08:23,520 --> 00:08:25,759
internet

235
00:08:25,759 --> 00:08:26,960
uh

236
00:08:26,960 --> 00:08:29,039
you know at the time this

237
00:08:29,039 --> 00:08:32,399
researcher found this problem and there

238
00:08:32,399 --> 00:08:34,320
were something like half a million

239
00:08:34,320 --> 00:08:35,519
servers on the internet that were

240
00:08:35,519 --> 00:08:37,279
potentially vulnerable so the public

241
00:08:37,279 --> 00:08:40,719
disclosure happened on april 7 2014

242
00:08:40,719 --> 00:08:43,120
and just a couple months later in june

243
00:08:43,120 --> 00:08:45,680
there only were 300 and there's still

244
00:08:45,680 --> 00:08:48,959
300 and 900 000 of these devices that

245
00:08:48,959 --> 00:08:50,720
were potentially vulnerable

246
00:08:50,720 --> 00:08:52,720
flash forward three years after that

247
00:08:52,720 --> 00:08:55,680
that number dropped to 144 000

248
00:08:55,680 --> 00:08:58,240
and even just a few years ago in july of

249
00:08:58,240 --> 00:09:01,920
2019 over 91 000 devices were still

250
00:09:01,920 --> 00:09:03,680
vulnerable to this

251
00:09:03,680 --> 00:09:05,200
very public

252
00:09:05,200 --> 00:09:06,839
very severe

253
00:09:06,839 --> 00:09:09,680
problem and kind of thinking about the

254
00:09:09,680 --> 00:09:11,839
issue

255
00:09:11,839 --> 00:09:12,959
at the time

256
00:09:12,959 --> 00:09:14,800
about half a million of these secure

257
00:09:14,800 --> 00:09:17,839
servers that ran internet banking online

258
00:09:17,839 --> 00:09:18,880
commerce

259
00:09:18,880 --> 00:09:20,320
were potentially vulnerable to having

260
00:09:20,320 --> 00:09:22,640
their servers private keys or session

261
00:09:22,640 --> 00:09:25,360
cookies or passwords taken

262
00:09:25,360 --> 00:09:27,519
and to think about it the root cause of

263
00:09:27,519 --> 00:09:30,480
the issue was you had two incredibly

264
00:09:30,480 --> 00:09:32,800
skilled open source developers that

265
00:09:32,800 --> 00:09:35,279
worked kind of full time on this project

266
00:09:35,279 --> 00:09:37,680
and that was it and you had thousands

267
00:09:37,680 --> 00:09:40,320
upon thousands of downstream consumers

268
00:09:40,320 --> 00:09:42,240
that were leveraging this work

269
00:09:42,240 --> 00:09:44,160
but these you had two folks that were

270
00:09:44,160 --> 00:09:45,920
basically responsible to develop

271
00:09:45,920 --> 00:09:48,160
maintain test and review about half a

272
00:09:48,160 --> 00:09:50,720
million lines of code more work than is

273
00:09:50,720 --> 00:09:52,399
feasible for a team of two that really

274
00:09:52,399 --> 00:09:53,680
they

275
00:09:53,680 --> 00:09:56,880
weren't paid to do it and that is the

276
00:09:56,880 --> 00:09:58,480
kind of the crux of a lot of our

277
00:09:58,480 --> 00:09:59,920
problems here

278
00:09:59,920 --> 00:10:02,079
the security of open source our theory

279
00:10:02,079 --> 00:10:03,839
here is the security of open source is

280
00:10:03,839 --> 00:10:06,720
the security of everything

281
00:10:06,720 --> 00:10:08,560
a lot of research has happened over the

282
00:10:08,560 --> 00:10:11,360
last several years to show that free and

283
00:10:11,360 --> 00:10:13,519
open source software

284
00:10:13,519 --> 00:10:16,880
has a substantial impact on

285
00:10:16,880 --> 00:10:19,440
the global technology landscape anywhere

286
00:10:19,440 --> 00:10:21,600
between 80 and 90 percent of modern

287
00:10:21,600 --> 00:10:23,200
software uses

288
00:10:23,200 --> 00:10:24,880
open source

289
00:10:24,880 --> 00:10:26,959
looking at those things

290
00:10:26,959 --> 00:10:29,519
a report recently found about 84 percent

291
00:10:29,519 --> 00:10:31,360
of these code bases had at least one

292
00:10:31,360 --> 00:10:33,360
vulnerability with the average being

293
00:10:33,360 --> 00:10:36,959
about 158 depending on those larger code

294
00:10:36,959 --> 00:10:38,399
bases

295
00:10:38,399 --> 00:10:40,720
and thinking about it the average age of

296
00:10:40,720 --> 00:10:42,720
some of these libraries in between when

297
00:10:42,720 --> 00:10:45,040
they were they had updates was over two

298
00:10:45,040 --> 00:10:47,040
and a half years

299
00:10:47,040 --> 00:10:48,240
looking at the

300
00:10:48,240 --> 00:10:51,200
cve population over a period of 10 years

301
00:10:51,200 --> 00:10:55,120
it quadrupled in volume in just 10 years

302
00:10:55,120 --> 00:10:56,720
that's the amount of issues that were

303
00:10:56,720 --> 00:10:59,200
found and hopefully fixed in that time

304
00:10:59,200 --> 00:11:00,560
frame

305
00:11:00,560 --> 00:11:02,560
and looking at when you think about the

306
00:11:02,560 --> 00:11:04,480
problem with open source a lot of times

307
00:11:04,480 --> 00:11:06,320
you have an issue with indirect

308
00:11:06,320 --> 00:11:07,839
dependencies

309
00:11:07,839 --> 00:11:10,160
and you know when you report an issue to

310
00:11:10,160 --> 00:11:12,079
the project sometimes these issues can

311
00:11:12,079 --> 00:11:13,680
go for

312
00:11:13,680 --> 00:11:16,800
over 218 weeks one study found

313
00:11:16,800 --> 00:11:18,480
and once it's reported to that

314
00:11:18,480 --> 00:11:20,800
development team it can take four weeks

315
00:11:20,800 --> 00:11:23,200
to resolve if it's ever resolved

316
00:11:23,200 --> 00:11:27,040
a lot a lot of stuff going on there

317
00:11:27,040 --> 00:11:28,959
so what are the challenges of securing

318
00:11:28,959 --> 00:11:32,399
open source software at scale

319
00:11:32,399 --> 00:11:34,240
what makes open source development

320
00:11:34,240 --> 00:11:36,480
models so impactful is also what makes

321
00:11:36,480 --> 00:11:38,560
them so difficult to secure

322
00:11:38,560 --> 00:11:40,240
so we can think about you know the

323
00:11:40,240 --> 00:11:42,880
various things where open source differs

324
00:11:42,880 --> 00:11:45,120
from other types of software development

325
00:11:45,120 --> 00:11:47,519
models so to begin we have this the

326
00:11:47,519 --> 00:11:49,760
obfuscated public-facing source code

327
00:11:49,760 --> 00:11:51,839
which is reducing the barrier to entry

328
00:11:51,839 --> 00:11:53,839
and that attackers need not reverse

329
00:11:53,839 --> 00:11:55,680
engineer the binaries

330
00:11:55,680 --> 00:11:57,680
there's also this distributed community

331
00:11:57,680 --> 00:11:59,440
driven development model where

332
00:11:59,440 --> 00:12:01,760
contributions can come from many sources

333
00:12:01,760 --> 00:12:03,680
and at times even from unknown third

334
00:12:03,680 --> 00:12:04,800
parties

335
00:12:04,800 --> 00:12:07,120
um at times as well i think that

336
00:12:07,120 --> 00:12:10,800
security and privacy folks are sometimes

337
00:12:10,800 --> 00:12:12,560
we give in to this tragedy of the

338
00:12:12,560 --> 00:12:15,760
commons where we have thought that just

339
00:12:15,760 --> 00:12:18,240
because someone has looked at the code

340
00:12:18,240 --> 00:12:20,160
that they necessarily have looked at the

341
00:12:20,160 --> 00:12:22,720
code but in practice this may very well

342
00:12:22,720 --> 00:12:24,720
not be the case

343
00:12:24,720 --> 00:12:26,800
so we start to see this lack of

344
00:12:26,800 --> 00:12:29,200
consistently deployed security standards

345
00:12:29,200 --> 00:12:31,760
reviews and tooling across open source

346
00:12:31,760 --> 00:12:33,680
resulting in weaknesses at various

347
00:12:33,680 --> 00:12:35,120
points in the secure software

348
00:12:35,120 --> 00:12:37,360
development life cycle even where easy

349
00:12:37,360 --> 00:12:39,680
wins for security could have actually

350
00:12:39,680 --> 00:12:40,959
happened

351
00:12:40,959 --> 00:12:43,200
so this is somewhat related to this idea

352
00:12:43,200 --> 00:12:44,720
that people may not have always looked

353
00:12:44,720 --> 00:12:46,079
at the code

354
00:12:46,079 --> 00:12:48,000
and we extend upon this by thinking

355
00:12:48,000 --> 00:12:50,320
about the fact that in many cases open

356
00:12:50,320 --> 00:12:51,839
source projects have a decreased

357
00:12:51,839 --> 00:12:54,880
capacity for vulnerability remediation

358
00:12:54,880 --> 00:12:57,839
so writing the patches and even worse

359
00:12:57,839 --> 00:13:00,480
for incident response particularly for

360
00:13:00,480 --> 00:13:02,079
smaller projects and those without a

361
00:13:02,079 --> 00:13:04,320
mature security program but as we've

362
00:13:04,320 --> 00:13:06,320
seen historically and up to the present

363
00:13:06,320 --> 00:13:07,279
day

364
00:13:07,279 --> 00:13:09,279
even this is true for many of the larger

365
00:13:09,279 --> 00:13:11,200
projects as well

366
00:13:11,200 --> 00:13:12,959
on top of this and we'll talk about this

367
00:13:12,959 --> 00:13:14,959
a bit more later there are entirely

368
00:13:14,959 --> 00:13:17,839
different economic incentives for open

369
00:13:17,839 --> 00:13:20,560
source developers and maintainers

370
00:13:20,560 --> 00:13:22,880
compared to enterprise developers and

371
00:13:22,880 --> 00:13:24,320
maintainers

372
00:13:24,320 --> 00:13:27,200
compared to the attackers

373
00:13:27,200 --> 00:13:30,320
both security researchers and

374
00:13:30,320 --> 00:13:31,600
threat actors

375
00:13:31,600 --> 00:13:33,760
so we have all of these different

376
00:13:33,760 --> 00:13:36,240
competing factors that are

377
00:13:36,240 --> 00:13:38,160
bringing together this challenge in

378
00:13:38,160 --> 00:13:40,639
securing open source and in spite of all

379
00:13:40,639 --> 00:13:42,880
of this we have these incredibly high

380
00:13:42,880 --> 00:13:45,040
value targets that are foundational to

381
00:13:45,040 --> 00:13:47,279
many of the technologies that power our

382
00:13:47,279 --> 00:13:50,560
world and the internet itself

383
00:13:50,560 --> 00:13:53,040
so let's think a little bit about threat

384
00:13:53,040 --> 00:13:54,320
modeling

385
00:13:54,320 --> 00:13:56,320
open source security is about way more

386
00:13:56,320 --> 00:13:58,000
than just vulnerabilities and source

387
00:13:58,000 --> 00:14:00,240
code and there's also a breadth of ways

388
00:14:00,240 --> 00:14:02,079
we can think about how these

389
00:14:02,079 --> 00:14:04,160
vulnerabilities could get introduced so

390
00:14:04,160 --> 00:14:06,079
we have this broad attack surface that

391
00:14:06,079 --> 00:14:08,320
begins before any code is written it

392
00:14:08,320 --> 00:14:10,720
extends to every individual developer's

393
00:14:10,720 --> 00:14:13,040
local machine and network and all of the

394
00:14:13,040 --> 00:14:14,560
way through this broader project

395
00:14:14,560 --> 00:14:16,639
infrastructure out to even the package

396
00:14:16,639 --> 00:14:19,120
management ecosystem and beyond so in

397
00:14:19,120 --> 00:14:21,519
the ideation phase or the concept phase

398
00:14:21,519 --> 00:14:23,120
we have to think about the risks of the

399
00:14:23,120 --> 00:14:25,680
entire tech stack we also have to focus

400
00:14:25,680 --> 00:14:28,079
especially on areas of enhanced risk

401
00:14:28,079 --> 00:14:30,720
like cryptography and secrets management

402
00:14:30,720 --> 00:14:33,040
operating system kernels anything around

403
00:14:33,040 --> 00:14:35,760
container orchestration um when we think

404
00:14:35,760 --> 00:14:38,399
about the actual development environment

405
00:14:38,399 --> 00:14:39,920
we have to think about the maintainers

406
00:14:39,920 --> 00:14:42,399
machine and interest that an attacker

407
00:14:42,399 --> 00:14:44,639
may have in making malicious commits to

408
00:14:44,639 --> 00:14:47,600
a repo or to preview forthcoming changes

409
00:14:47,600 --> 00:14:49,440
or otherwise exfiltrate sensitive

410
00:14:49,440 --> 00:14:52,720
information so we've seen for example

411
00:14:52,720 --> 00:14:54,480
malware which sought to exfiltrated

412
00:14:54,480 --> 00:14:57,360
developers and pm access tokens or the

413
00:14:57,360 --> 00:14:59,279
xcode ghost supply chain attack dating

414
00:14:59,279 --> 00:15:02,639
back to 2015 in which malicious versions

415
00:15:02,639 --> 00:15:04,639
of apple's xcode development environment

416
00:15:04,639 --> 00:15:06,240
were distributed

417
00:15:06,240 --> 00:15:08,079
so we can move beyond

418
00:15:08,079 --> 00:15:09,760
not just thinking about the developers

419
00:15:09,760 --> 00:15:11,199
local environment which could be

420
00:15:11,199 --> 00:15:13,120
compromised in many ways beyond the

421
00:15:13,120 --> 00:15:15,279
couple of examples that i've given but

422
00:15:15,279 --> 00:15:16,720
let's extend this to think about the

423
00:15:16,720 --> 00:15:19,440
infrastructure or the project itself so

424
00:15:19,440 --> 00:15:21,279
there can just be mistakes in code that

425
00:15:21,279 --> 00:15:23,680
a developer didn't mean to introduce but

426
00:15:23,680 --> 00:15:25,360
happen to be there

427
00:15:25,360 --> 00:15:26,480
this could be

428
00:15:26,480 --> 00:15:28,720
resulting from copy pasting insecure

429
00:15:28,720 --> 00:15:30,880
code from stack overflow or just in

430
00:15:30,880 --> 00:15:33,120
general using insecure software

431
00:15:33,120 --> 00:15:36,160
development practices just by mistake

432
00:15:36,160 --> 00:15:38,800
it could involve committing secrets or

433
00:15:38,800 --> 00:15:41,920
to source code or to packages and it

434
00:15:41,920 --> 00:15:43,759
could also involve leaving debug

435
00:15:43,759 --> 00:15:46,480
functionality open such that it can be

436
00:15:46,480 --> 00:15:49,839
abused as a backdoor by a threat actor

437
00:15:49,839 --> 00:15:51,519
we can also think about external

438
00:15:51,519 --> 00:15:54,079
contributions so contributors who may

439
00:15:54,079 --> 00:15:56,399
introduce malicious code either

440
00:15:56,399 --> 00:15:58,399
independently themselves or through the

441
00:15:58,399 --> 00:16:00,399
compromise of a legitimate developer's

442
00:16:00,399 --> 00:16:02,560
contributions so this can have to do

443
00:16:02,560 --> 00:16:04,399
with identity and access management of

444
00:16:04,399 --> 00:16:07,279
developers it can relate to insecure ci

445
00:16:07,279 --> 00:16:10,000
cd pipelines and in which a range of

446
00:16:10,000 --> 00:16:13,199
attacks can occur it can be compromises

447
00:16:13,199 --> 00:16:15,600
to build systems um even though there's

448
00:16:15,600 --> 00:16:16,959
been some great work over the last

449
00:16:16,959 --> 00:16:20,000
several years around build pipelines

450
00:16:20,000 --> 00:16:22,160
and verification especially things like

451
00:16:22,160 --> 00:16:23,839
reproducible builds and binary

452
00:16:23,839 --> 00:16:26,160
transparency which can solve some but

453
00:16:26,160 --> 00:16:28,800
certainly not all of the problems here

454
00:16:28,800 --> 00:16:30,399
these problems are amplified by a lack

455
00:16:30,399 --> 00:16:32,720
of pipeline security tooling static

456
00:16:32,720 --> 00:16:34,480
analysis fuzzing

457
00:16:34,480 --> 00:16:36,639
as well as in instances where there's a

458
00:16:36,639 --> 00:16:39,279
lack of platform security or operating

459
00:16:39,279 --> 00:16:41,440
system level protections or runtime

460
00:16:41,440 --> 00:16:43,680
protections it's really this defense in

461
00:16:43,680 --> 00:16:46,160
depth together that can help make things

462
00:16:46,160 --> 00:16:47,360
more secure

463
00:16:47,360 --> 00:16:49,360
if we go beyond this there's also also

464
00:16:49,360 --> 00:16:51,839
the package ecosystem itself so

465
00:16:51,839 --> 00:16:54,160
individuals may typo squat to insert

466
00:16:54,160 --> 00:16:56,560
malicious packages there may be a direct

467
00:16:56,560 --> 00:16:59,040
compromise of legitimate packages and

468
00:16:59,040 --> 00:17:00,639
they may also introduce things like

469
00:17:00,639 --> 00:17:02,880
malicious dependencies there's much more

470
00:17:02,880 --> 00:17:04,799
beyond this but even if we want to think

471
00:17:04,799 --> 00:17:07,039
about these particular problems and

472
00:17:07,039 --> 00:17:09,520
extend it to vulnerability disclosure

473
00:17:09,520 --> 00:17:11,599
there can be inaccurate security contact

474
00:17:11,599 --> 00:17:13,520
information a project may go

475
00:17:13,520 --> 00:17:15,839
unmaintained the maintainer may not see

476
00:17:15,839 --> 00:17:18,240
the bug as a vulnerability to security

477
00:17:18,240 --> 00:17:21,119
or be unable to write the patch

478
00:17:21,119 --> 00:17:22,319
there also may be insecure

479
00:17:22,319 --> 00:17:24,880
communications methods including

480
00:17:24,880 --> 00:17:26,400
projects that would like you to report

481
00:17:26,400 --> 00:17:28,160
security vulnerabilities as public

482
00:17:28,160 --> 00:17:30,480
issues and patching in public mail out

483
00:17:30,480 --> 00:17:32,720
for the reverse engineering in advance

484
00:17:32,720 --> 00:17:35,360
of forthcoming patches to infer not yet

485
00:17:35,360 --> 00:17:37,840
public vulnerabilities so there's much

486
00:17:37,840 --> 00:17:39,600
more we could talk about but probably in

487
00:17:39,600 --> 00:17:41,280
the interest of time today i would

488
00:17:41,280 --> 00:17:43,200
direct the interested listener to the

489
00:17:43,200 --> 00:17:45,840
threats risk and mitigations in the open

490
00:17:45,840 --> 00:17:48,000
source ecosystem paper published by

491
00:17:48,000 --> 00:17:50,160
michael scoveta of microsoft and several

492
00:17:50,160 --> 00:17:53,919
collaborators from openssf

493
00:17:54,400 --> 00:17:56,480
so let's talk about vulnerabilities in

494
00:17:56,480 --> 00:17:58,799
the open source ecosystem

495
00:17:58,799 --> 00:18:00,640
ultimately open source security keeps

496
00:18:00,640 --> 00:18:02,720
getting worse on average it's taking

497
00:18:02,720 --> 00:18:04,720
years to detect a typical vulnerability

498
00:18:04,720 --> 00:18:07,280
in open source software for example

499
00:18:07,280 --> 00:18:09,360
data from github last year said that the

500
00:18:09,360 --> 00:18:11,360
average vulnerability on github goes

501
00:18:11,360 --> 00:18:13,520
undetected for four years and even

502
00:18:13,520 --> 00:18:15,200
critical vulnerabilities take more than

503
00:18:15,200 --> 00:18:17,679
two and a half years to get disclosed

504
00:18:17,679 --> 00:18:19,200
what's more exploitation of

505
00:18:19,200 --> 00:18:20,960
vulnerabilities in the wild is happening

506
00:18:20,960 --> 00:18:23,360
faster than ever before this is true for

507
00:18:23,360 --> 00:18:25,360
both open source and proprietary

508
00:18:25,360 --> 00:18:27,919
software a number of reports have stated

509
00:18:27,919 --> 00:18:30,000
that the number of days has dropped from

510
00:18:30,000 --> 00:18:32,160
weeks down to just on average about

511
00:18:32,160 --> 00:18:34,240
three days between a vulnerability being

512
00:18:34,240 --> 00:18:36,320
publicly disclosed and exploitation

513
00:18:36,320 --> 00:18:38,080
being observed in the wild

514
00:18:38,080 --> 00:18:39,760
and this has happened over just the last

515
00:18:39,760 --> 00:18:41,919
few years and this is true for both

516
00:18:41,919 --> 00:18:44,480
proprietary and open source software

517
00:18:44,480 --> 00:18:46,000
ultimately threat actors don't really

518
00:18:46,000 --> 00:18:48,960
care what licenses our software uses

519
00:18:48,960 --> 00:18:52,000
however reporting from rand corporation

520
00:18:52,000 --> 00:18:53,600
has even further

521
00:18:53,600 --> 00:18:56,799
demonstrated this point by stating that

522
00:18:56,799 --> 00:18:58,720
it was found that exploitation of

523
00:18:58,720 --> 00:19:00,400
vulnerabilities of open source in the

524
00:19:00,400 --> 00:19:03,360
wild do not actually die off faster than

525
00:19:03,360 --> 00:19:06,400
those for proprietary software

526
00:19:06,400 --> 00:19:08,640
now why is this happening part of it is

527
00:19:08,640 --> 00:19:10,320
developers seem not to be getting any

528
00:19:10,320 --> 00:19:12,480
better at writing secure code

529
00:19:12,480 --> 00:19:15,840
github used their tool codeql to study

530
00:19:15,840 --> 00:19:17,679
several thousand popular github

531
00:19:17,679 --> 00:19:18,960
libraries

532
00:19:18,960 --> 00:19:20,640
and the rate of vulnerabilities being

533
00:19:20,640 --> 00:19:22,240
introduced to them between the years of

534
00:19:22,240 --> 00:19:24,400
2016 and 2020

535
00:19:24,400 --> 00:19:25,840
ultimately the results were not very

536
00:19:25,840 --> 00:19:27,919
promising and i quote

537
00:19:27,919 --> 00:19:30,880
a line of code written in 2020 is just

538
00:19:30,880 --> 00:19:32,559
as likely to introduce a security

539
00:19:32,559 --> 00:19:35,039
vulnerability as a line of code written

540
00:19:35,039 --> 00:19:38,000
in 2016. so things are not getting

541
00:19:38,000 --> 00:19:40,320
better and on top of this applications

542
00:19:40,320 --> 00:19:42,720
are growing in complexity

543
00:19:42,720 --> 00:19:45,440
so software complexity can derive in

544
00:19:45,440 --> 00:19:46,960
part from

545
00:19:46,960 --> 00:19:49,440
both direct and transitive dependencies

546
00:19:49,440 --> 00:19:51,200
which compounds the risks of these

547
00:19:51,200 --> 00:19:52,880
dependencies the more and more

548
00:19:52,880 --> 00:19:55,039
dependencies there are in the dependency

549
00:19:55,039 --> 00:19:57,120
chain so let's go a little deeper about

550
00:19:57,120 --> 00:19:59,918
what that means

551
00:20:02,480 --> 00:20:05,360
okay so transitive dependency risk even

552
00:20:05,360 --> 00:20:09,039
if your code is in the rare instance uh

553
00:20:09,039 --> 00:20:11,600
free of vulnerabilities your code itself

554
00:20:11,600 --> 00:20:13,280
probably depends on something which

555
00:20:13,280 --> 00:20:15,280
itself is full of voles so we can

556
00:20:15,280 --> 00:20:17,600
imagine it phones on phones on phones

557
00:20:17,600 --> 00:20:19,280
all the way down

558
00:20:19,280 --> 00:20:20,880
and what is the data that really backs

559
00:20:20,880 --> 00:20:24,240
this up we know from recent reports that

560
00:20:24,240 --> 00:20:26,080
open source projects have an average of

561
00:20:26,080 --> 00:20:28,799
180 package dependencies some of them

562
00:20:28,799 --> 00:20:31,600
have even up to a thousand we also know

563
00:20:31,600 --> 00:20:33,600
that the 50 open source projects with

564
00:20:33,600 --> 00:20:36,240
the most projects depending upon them

565
00:20:36,240 --> 00:20:39,360
had an average of 3.6 million downstream

566
00:20:39,360 --> 00:20:40,960
dependents

567
00:20:40,960 --> 00:20:43,840
we we further know to really amplify why

568
00:20:43,840 --> 00:20:45,840
this matters that vulnerabilities in

569
00:20:45,840 --> 00:20:47,360
open source software have been central

570
00:20:47,360 --> 00:20:48,960
to major breaches

571
00:20:48,960 --> 00:20:51,120
so if we think about the equifax breach

572
00:20:51,120 --> 00:20:53,360
of 2017 it was based upon a

573
00:20:53,360 --> 00:20:55,600
vulnerability in apache struts an open

574
00:20:55,600 --> 00:20:57,039
source framework

575
00:20:57,039 --> 00:21:00,000
and we also know that they are often not

576
00:21:00,000 --> 00:21:01,919
found until decades after their creation

577
00:21:01,919 --> 00:21:03,280
at times

578
00:21:03,280 --> 00:21:05,120
so every year we write more and more

579
00:21:05,120 --> 00:21:07,520
lines of source code than ever before in

580
00:21:07,520 --> 00:21:10,080
2020 60 million new repositories were

581
00:21:10,080 --> 00:21:12,240
created on github with around 1.9

582
00:21:12,240 --> 00:21:14,320
billion contributions

583
00:21:14,320 --> 00:21:16,559
we also know that vulnerabilities seem

584
00:21:16,559 --> 00:21:18,559
to scale proportionately with lines of

585
00:21:18,559 --> 00:21:20,480
code even if you don't want to measure

586
00:21:20,480 --> 00:21:22,320
the size of software or the complexity

587
00:21:22,320 --> 00:21:24,159
of software based on lines of code

588
00:21:24,159 --> 00:21:26,240
you'll see similar patterns around the

589
00:21:26,240 --> 00:21:27,520
scaling of the introduction of

590
00:21:27,520 --> 00:21:29,120
vulnerabilities

591
00:21:29,120 --> 00:21:30,799
we also see that the number of reported

592
00:21:30,799 --> 00:21:32,480
vulnerabilities in open source code

593
00:21:32,480 --> 00:21:34,559
bases is growing each year and

594
00:21:34,559 --> 00:21:36,480
furthermore we have reasons to believe

595
00:21:36,480 --> 00:21:38,400
that um the number of volumes being

596
00:21:38,400 --> 00:21:40,960
reported is radically lower than the

597
00:21:40,960 --> 00:21:43,200
total actual number of exploitable

598
00:21:43,200 --> 00:21:46,159
vulnerabilities in the wild

599
00:21:46,159 --> 00:21:48,240
so we might ask ourselves if we stay on

600
00:21:48,240 --> 00:21:50,240
our current trajectory will the security

601
00:21:50,240 --> 00:21:51,840
of open source software get better or

602
00:21:51,840 --> 00:21:52,720
worse

603
00:21:52,720 --> 00:21:55,280
and without serious and coordinated

604
00:21:55,280 --> 00:21:58,000
intervention i think it will get worse

605
00:21:58,000 --> 00:21:59,600
the number of vulnerabilities in the

606
00:21:59,600 --> 00:22:01,679
wild outpaces the speed at which the

607
00:22:01,679 --> 00:22:04,240
security community can patch or even

608
00:22:04,240 --> 00:22:06,640
identify those vulnerabilities and each

609
00:22:06,640 --> 00:22:08,640
day the world gets more lines of source

610
00:22:08,640 --> 00:22:11,120
code than it ever has before

611
00:22:11,120 --> 00:22:13,280
as a consequence the generally

612
00:22:13,280 --> 00:22:15,200
inadvertent create creation of

613
00:22:15,200 --> 00:22:17,600
potentially exploitable vulnerabilities

614
00:22:17,600 --> 00:22:19,679
increasingly outpaces the rate at which

615
00:22:19,679 --> 00:22:21,919
we can search for and remediate them and

616
00:22:21,919 --> 00:22:23,679
this problem is only getting worse with

617
00:22:23,679 --> 00:22:26,400
time so ultimately we have this problem

618
00:22:26,400 --> 00:22:28,480
that the security the security as it is

619
00:22:28,480 --> 00:22:30,799
practiced now does not scale at the rate

620
00:22:30,799 --> 00:22:33,039
needed to keep up with things um to make

621
00:22:33,039 --> 00:22:35,200
them at least as secure just as they

622
00:22:35,200 --> 00:22:37,280
were yesterday and what's worse than

623
00:22:37,280 --> 00:22:39,120
that is that we have compelling reasons

624
00:22:39,120 --> 00:22:41,360
to expect this to get even worse for

625
00:22:41,360 --> 00:22:42,880
defenders

626
00:22:42,880 --> 00:22:44,559
so in this slide i'm going to introduce

627
00:22:44,559 --> 00:22:46,000
two points

628
00:22:46,000 --> 00:22:48,480
the first of these points is that the

629
00:22:48,480 --> 00:22:50,720
economics of exploitation for threat

630
00:22:50,720 --> 00:22:53,039
actors offer them a considerable

631
00:22:53,039 --> 00:22:55,600
advantage compared to the economics of

632
00:22:55,600 --> 00:22:57,679
patching for defenders and this is

633
00:22:57,679 --> 00:23:00,159
especially true for open source software

634
00:23:00,159 --> 00:23:02,080
so threat actors don't generally have to

635
00:23:02,080 --> 00:23:04,400
care about things like policy or law or

636
00:23:04,400 --> 00:23:06,000
cfaa

637
00:23:06,000 --> 00:23:08,720
unlike patching exploiting open source

638
00:23:08,720 --> 00:23:10,960
software bones does not actually require

639
00:23:10,960 --> 00:23:13,440
multi-stakeholder coordination

640
00:23:13,440 --> 00:23:15,039
on top of that if we think just about

641
00:23:15,039 --> 00:23:16,880
incentives threat actors are

642
00:23:16,880 --> 00:23:18,640
incentivized to successfully exploit

643
00:23:18,640 --> 00:23:20,960
vulnerabilities but in contrast security

644
00:23:20,960 --> 00:23:22,480
researchers are not generally

645
00:23:22,480 --> 00:23:24,320
incentivized to write patches and

646
00:23:24,320 --> 00:23:26,640
neither are open source maintainers so

647
00:23:26,640 --> 00:23:28,799
threat actor's number one priority is to

648
00:23:28,799 --> 00:23:31,039
exploit volumes but in contrast open

649
00:23:31,039 --> 00:23:33,280
source maintainers number one priority

650
00:23:33,280 --> 00:23:34,799
is the core functionality of their

651
00:23:34,799 --> 00:23:37,600
project not writing or applying patches

652
00:23:37,600 --> 00:23:39,360
or making sure that they're ready for

653
00:23:39,360 --> 00:23:41,200
enterprise consumers or people that are

654
00:23:41,200 --> 00:23:43,120
working with different threat models

655
00:23:43,120 --> 00:23:44,960
in addition to this the economics of

656
00:23:44,960 --> 00:23:47,600
open source compared to closed source

657
00:23:47,600 --> 00:23:50,000
software differ while with enterprise

658
00:23:50,000 --> 00:23:52,159
kind of proprietary software we have

659
00:23:52,159 --> 00:23:53,760
certain expectations of software

660
00:23:53,760 --> 00:23:55,919
maintenance and security open source is

661
00:23:55,919 --> 00:23:57,760
at your own risk with the understanding

662
00:23:57,760 --> 00:23:59,840
that the developers of these code bases

663
00:23:59,840 --> 00:24:02,159
may not have the same goals threat model

664
00:24:02,159 --> 00:24:05,039
or priorities that you do as a result of

665
00:24:05,039 --> 00:24:07,600
all of these interrelated factors we see

666
00:24:07,600 --> 00:24:09,279
a decreasing length of time between

667
00:24:09,279 --> 00:24:11,760
vulnerability discovery and exploitation

668
00:24:11,760 --> 00:24:13,840
as well as between vulnerability

669
00:24:13,840 --> 00:24:17,199
patching and exploitation

670
00:24:17,760 --> 00:24:19,679
so the second point that i want to make

671
00:24:19,679 --> 00:24:21,360
is that we have yet to see the true

672
00:24:21,360 --> 00:24:23,520
potential for of techniques for finding

673
00:24:23,520 --> 00:24:25,360
vulnerabilities at scale

674
00:24:25,360 --> 00:24:27,600
what's simultaneously exciting and

675
00:24:27,600 --> 00:24:29,360
terrifying to me is that the

676
00:24:29,360 --> 00:24:31,120
technologies that can be used to hunt

677
00:24:31,120 --> 00:24:33,600
vulnerabilities at scale are dual use in

678
00:24:33,600 --> 00:24:36,400
nature they can be used by the defenders

679
00:24:36,400 --> 00:24:38,880
or they can be used by our adversaries

680
00:24:38,880 --> 00:24:41,360
and as the cliche goes within our fields

681
00:24:41,360 --> 00:24:44,400
it is our adversaries um only have to

682
00:24:44,400 --> 00:24:46,960
get it right once so the uncomfortable

683
00:24:46,960 --> 00:24:49,520
truth is that scalable finding helps our

684
00:24:49,520 --> 00:24:51,520
adversaries too

685
00:24:51,520 --> 00:24:53,279
so what are the different ways that we

686
00:24:53,279 --> 00:24:54,880
can think about these scalable bug

687
00:24:54,880 --> 00:24:56,240
hunting methods

688
00:24:56,240 --> 00:24:57,679
these certainly include you know

689
00:24:57,679 --> 00:24:59,440
large-scale fuzzing projects

690
00:24:59,440 --> 00:25:01,919
vulnerability discovery query languages

691
00:25:01,919 --> 00:25:03,360
like codeql

692
00:25:03,360 --> 00:25:05,120
various flavors of innovations in

693
00:25:05,120 --> 00:25:06,880
program analysis

694
00:25:06,880 --> 00:25:08,480
sometimes applications of machine

695
00:25:08,480 --> 00:25:10,720
learning to identifying particular

696
00:25:10,720 --> 00:25:13,200
examples of bug classes

697
00:25:13,200 --> 00:25:15,600
and all methods by which attackers will

698
00:25:15,600 --> 00:25:18,640
be able to scale their findings as

699
00:25:18,640 --> 00:25:20,159
quickly as we will

700
00:25:20,159 --> 00:25:22,720
i think that this is compounded however

701
00:25:22,720 --> 00:25:24,799
by recent work over the last five to

702
00:25:24,799 --> 00:25:26,799
eight years i would say in automated

703
00:25:26,799 --> 00:25:28,720
exploit generation where we're seeing

704
00:25:28,720 --> 00:25:31,760
that even for small poorly incentivized

705
00:25:31,760 --> 00:25:34,080
academic studies that there has been

706
00:25:34,080 --> 00:25:36,400
considerable progress in automating the

707
00:25:36,400 --> 00:25:39,440
chaining of exploits or the chaining of

708
00:25:39,440 --> 00:25:42,480
an ultimate attack so i mean even if you

709
00:25:42,480 --> 00:25:44,960
don't buy into the idea that computer

710
00:25:44,960 --> 00:25:46,640
science will eventually have a

711
00:25:46,640 --> 00:25:48,960
sufficiently advanced

712
00:25:48,960 --> 00:25:51,520
scalable automated exploit generation in

713
00:25:51,520 --> 00:25:53,760
the near term even with the most

714
00:25:53,760 --> 00:25:56,159
restrained version of our hypothesis

715
00:25:56,159 --> 00:25:58,000
namely that there are at least some

716
00:25:58,000 --> 00:26:00,080
level of efficiency gains possible for

717
00:26:00,080 --> 00:26:02,480
vulnerability exploitation this is

718
00:26:02,480 --> 00:26:04,400
nevertheless concerning

719
00:26:04,400 --> 00:26:06,000
furthermore we have reasons to believe

720
00:26:06,000 --> 00:26:08,640
that large language models like gpt-3

721
00:26:08,640 --> 00:26:10,400
which have shown themselves to be very

722
00:26:10,400 --> 00:26:12,799
good at learning um not just from a

723
00:26:12,799 --> 00:26:15,520
corpus of internet text

724
00:26:15,520 --> 00:26:17,840
that they've been able to be generative

725
00:26:17,840 --> 00:26:20,720
so even when asking these models to

726
00:26:20,720 --> 00:26:23,120
generate novel things be they images or

727
00:26:23,120 --> 00:26:25,919
stories with particular natural language

728
00:26:25,919 --> 00:26:27,679
descriptors we've seen that they're

729
00:26:27,679 --> 00:26:32,080
capable of generating novel code as well

730
00:26:33,279 --> 00:26:34,080
so

731
00:26:34,080 --> 00:26:35,919
how do we reduce vulnerabilities at

732
00:26:35,919 --> 00:26:38,320
scale to solve this problem i think we

733
00:26:38,320 --> 00:26:40,799
need to just not have security research

734
00:26:40,799 --> 00:26:43,520
but security research at internet scale

735
00:26:43,520 --> 00:26:45,520
traditional vulnerability research and

736
00:26:45,520 --> 00:26:48,000
the ongoing whack-a-mole defined cves

737
00:26:48,000 --> 00:26:50,640
can only take us so far and ultimately

738
00:26:50,640 --> 00:26:52,480
it makes its highest impact when we

739
00:26:52,480 --> 00:26:54,880
prioritize for the criticality of the

740
00:26:54,880 --> 00:26:57,039
target system either because it is

741
00:26:57,039 --> 00:26:59,440
inherently foundational to the internet

742
00:26:59,440 --> 00:27:02,000
or to enterprise software or because it

743
00:27:02,000 --> 00:27:04,080
is an upstream dependency to those core

744
00:27:04,080 --> 00:27:06,880
pieces of infrastructure or because it

745
00:27:06,880 --> 00:27:09,039
presents subtleties of implementation

746
00:27:09,039 --> 00:27:11,520
that make it particularly hard to secure

747
00:27:11,520 --> 00:27:13,120
so we might see this in cryptographic

748
00:27:13,120 --> 00:27:15,120
libraries or things with like low-level

749
00:27:15,120 --> 00:27:16,400
machine code

750
00:27:16,400 --> 00:27:18,559
else maybe because it puts a targeted

751
00:27:18,559 --> 00:27:21,039
population ecosystem or other single

752
00:27:21,039 --> 00:27:22,480
point of failure in the internet

753
00:27:22,480 --> 00:27:26,159
infrastructure at risk

754
00:27:27,120 --> 00:27:29,600
so this is thus the motivation for this

755
00:27:29,600 --> 00:27:32,080
entire talk particularly here at black

756
00:27:32,080 --> 00:27:34,000
hat among security researchers of a

757
00:27:34,000 --> 00:27:35,520
broader range

758
00:27:35,520 --> 00:27:37,679
set of technical subspecialties and

759
00:27:37,679 --> 00:27:40,000
particularly within the community track

760
00:27:40,000 --> 00:27:41,440
because we believe that it is only

761
00:27:41,440 --> 00:27:44,399
through coordinated and strategic effort

762
00:27:44,399 --> 00:27:46,480
that security researchers can attempt to

763
00:27:46,480 --> 00:27:48,480
outpace the in the wild exploitation of

764
00:27:48,480 --> 00:27:52,159
vulnerabilities in open source so how do

765
00:27:52,159 --> 00:27:56,080
we reduce vulnerabilities at scale

766
00:27:56,240 --> 00:27:59,840
right jennifer now so our challenge is

767
00:27:59,840 --> 00:28:01,679
how do we reduce these vulnerabilities

768
00:28:01,679 --> 00:28:03,520
at scale

769
00:28:03,520 --> 00:28:06,000
that there are a traditional kind of

770
00:28:06,000 --> 00:28:08,480
cyber security framework find

771
00:28:08,480 --> 00:28:11,760
prevent prevent find and detect is a way

772
00:28:11,760 --> 00:28:14,080
to handle this but we need to figure out

773
00:28:14,080 --> 00:28:18,159
ways to eliminate whole classes of bugs

774
00:28:18,159 --> 00:28:19,840
doing individual vulnerability

775
00:28:19,840 --> 00:28:22,480
whack-a-mole onesie 2z one at a time

776
00:28:22,480 --> 00:28:24,559
does not work will not get us to the

777
00:28:24,559 --> 00:28:26,320
space we need to be in we need to be

778
00:28:26,320 --> 00:28:28,559
able to eliminate whole classes of

779
00:28:28,559 --> 00:28:31,440
problems like sql injection or

780
00:28:31,440 --> 00:28:33,760
cross-site scripting or remote code

781
00:28:33,760 --> 00:28:35,120
execution be able to eliminate these

782
00:28:35,120 --> 00:28:37,760
things whole swaths of you know hundreds

783
00:28:37,760 --> 00:28:39,600
of vulnerabilities at once

784
00:28:39,600 --> 00:28:41,600
we need to understand and take a look at

785
00:28:41,600 --> 00:28:44,240
the threat model of open source is

786
00:28:44,240 --> 00:28:46,960
most modern software today isn't a

787
00:28:46,960 --> 00:28:49,760
monolithic code base it's a composed app

788
00:28:49,760 --> 00:28:51,200
where you're borrowing little bits and

789
00:28:51,200 --> 00:28:53,360
pieces of software here and there and a

790
00:28:53,360 --> 00:28:55,520
lot of it trends towards microservices

791
00:28:55,520 --> 00:28:57,679
where things are hosted randomly all

792
00:28:57,679 --> 00:29:00,640
over the globe and that threat model and

793
00:29:00,640 --> 00:29:02,640
that attack service needs to be analyzed

794
00:29:02,640 --> 00:29:04,640
and understood by the end

795
00:29:04,640 --> 00:29:06,640
uh consumers and implementers of this

796
00:29:06,640 --> 00:29:07,760
software

797
00:29:07,760 --> 00:29:09,600
and we need you know as a group like

798
00:29:09,600 --> 00:29:11,440
openssf we need to concentrate our

799
00:29:11,440 --> 00:29:13,919
resources on critical libraries critical

800
00:29:13,919 --> 00:29:16,159
components and projects to help provide

801
00:29:16,159 --> 00:29:17,919
the most bang for the buck

802
00:29:17,919 --> 00:29:19,440
there are a lot of different tools

803
00:29:19,440 --> 00:29:20,880
available and we'll talk a little bit

804
00:29:20,880 --> 00:29:21,919
about some of the things the

805
00:29:21,919 --> 00:29:24,399
foundation's doing about that but

806
00:29:24,399 --> 00:29:27,279
static analysis fuzzing peer code review

807
00:29:27,279 --> 00:29:28,960
these kind of traditional

808
00:29:28,960 --> 00:29:30,880
software engineering practices need to

809
00:29:30,880 --> 00:29:33,200
be you know more fully adopted within

810
00:29:33,200 --> 00:29:34,559
the community

811
00:29:34,559 --> 00:29:36,799
and we need to perform kind of enhanced

812
00:29:36,799 --> 00:29:38,799
testing that's where that that manual

813
00:29:38,799 --> 00:29:40,320
code review and that's we have a project

814
00:29:40,320 --> 00:29:41,600
we're partnering with an organization

815
00:29:41,600 --> 00:29:43,279
called ostiff where we're going to go

816
00:29:43,279 --> 00:29:45,760
through and do code reviews of specific

817
00:29:45,760 --> 00:29:47,760
high critical projects

818
00:29:47,760 --> 00:29:49,039
and then you know kind of thinking

819
00:29:49,039 --> 00:29:51,279
forward we need to participate more in

820
00:29:51,279 --> 00:29:52,840
things like coordinated vulnerability

821
00:29:52,840 --> 00:29:54,960
disclosure the

822
00:29:54,960 --> 00:29:57,919
open source ecosystem is broad and

823
00:29:57,919 --> 00:29:59,520
diverse but

824
00:29:59,520 --> 00:30:02,000
we can provide some simple rules some

825
00:30:02,000 --> 00:30:03,679
simple guidelines and templates that

826
00:30:03,679 --> 00:30:06,320
people can refer to and use and help

827
00:30:06,320 --> 00:30:08,399
educate the value of coordinated

828
00:30:08,399 --> 00:30:10,159
vulnerability disclosure to reduce the

829
00:30:10,159 --> 00:30:12,559
end risk for those end consumers and

830
00:30:12,559 --> 00:30:14,880
things like software bill of materials

831
00:30:14,880 --> 00:30:18,080
helps you describe what's inside that

832
00:30:18,080 --> 00:30:19,279
piece of software you're just

833
00:30:19,279 --> 00:30:21,919
downloading that container you're using

834
00:30:21,919 --> 00:30:23,520
that you know that

835
00:30:23,520 --> 00:30:24,880
pull request you just made kind of

836
00:30:24,880 --> 00:30:26,480
what's in there and there's also

837
00:30:26,480 --> 00:30:27,440
improvements we're making with the

838
00:30:27,440 --> 00:30:30,480
larger cve community to help improve the

839
00:30:30,480 --> 00:30:33,840
speed and ease of use of you know

840
00:30:33,840 --> 00:30:35,600
getting these vulnerabilities identified

841
00:30:35,600 --> 00:30:37,520
and communicated out

842
00:30:37,520 --> 00:30:39,840
but at the end of the day the tldr of it

843
00:30:39,840 --> 00:30:42,799
is what actually helps open source

844
00:30:42,799 --> 00:30:44,880
be more secure

845
00:30:44,880 --> 00:30:46,080
i'm going to give you a groundbreaking

846
00:30:46,080 --> 00:30:47,760
idea give you a minute i'm going to blow

847
00:30:47,760 --> 00:30:50,919
your mind

848
00:30:51,360 --> 00:30:52,960
if you use

849
00:30:52,960 --> 00:30:54,720
software for a project

850
00:30:54,720 --> 00:30:57,360
maybe on some level you can contribute

851
00:30:57,360 --> 00:31:00,080
back to that project to help them

852
00:31:00,080 --> 00:31:01,279
help them

853
00:31:01,279 --> 00:31:03,120
improve the quality of their software

854
00:31:03,120 --> 00:31:04,640
help them perform

855
00:31:04,640 --> 00:31:06,960
improve the speed of their delivery the

856
00:31:06,960 --> 00:31:08,880
quality of their overall product i know

857
00:31:08,880 --> 00:31:09,840
it just

858
00:31:09,840 --> 00:31:12,080
blew your mind it's an amazing novel

859
00:31:12,080 --> 00:31:13,519
concept

860
00:31:13,519 --> 00:31:14,240
so

861
00:31:14,240 --> 00:31:15,519
kind of what we can do i mentioned i

862
00:31:15,519 --> 00:31:17,120
touched on it very briefly threat

863
00:31:17,120 --> 00:31:20,000
modeling understanding kind of where and

864
00:31:20,000 --> 00:31:22,640
how a project can be compromised both at

865
00:31:22,640 --> 00:31:24,799
a software level you know these

866
00:31:24,799 --> 00:31:27,120
engineering perspective this is how this

867
00:31:27,120 --> 00:31:29,200
coding mistake is why that's there and

868
00:31:29,200 --> 00:31:31,120
how to eliminate it but also thinking

869
00:31:31,120 --> 00:31:33,360
about how that project works where is

870
00:31:33,360 --> 00:31:35,279
their repository how do they what's

871
00:31:35,279 --> 00:31:37,760
their ci cd pipeline look like think

872
00:31:37,760 --> 00:31:39,519
about how that can be compromised by a

873
00:31:39,519 --> 00:31:42,080
bad actor you know we need to help work

874
00:31:42,080 --> 00:31:43,840
to identify the most critical open

875
00:31:43,840 --> 00:31:46,399
source projects and invest time and

876
00:31:46,399 --> 00:31:49,200
resources to help them

877
00:31:49,200 --> 00:31:52,720
do better to help improve the overall

878
00:31:52,720 --> 00:31:54,640
ecosystem for everybody

879
00:31:54,640 --> 00:31:56,559
and again things like preventing

880
00:31:56,559 --> 00:31:58,080
vulnerabilities in the first place using

881
00:31:58,080 --> 00:32:00,399
tools like depend-abot to help as you're

882
00:32:00,399 --> 00:32:02,720
checking in code or downloading code

883
00:32:02,720 --> 00:32:04,000
you're able to see kind of what the

884
00:32:04,000 --> 00:32:05,600
dependencies are or doing automated

885
00:32:05,600 --> 00:32:07,360
vulnerability scanning before even using

886
00:32:07,360 --> 00:32:10,240
something and implementing sdlc like

887
00:32:10,240 --> 00:32:12,000
practices across the board whether for

888
00:32:12,000 --> 00:32:14,399
big projects and small projects

889
00:32:14,399 --> 00:32:16,880
it all kind of boils down to there's

890
00:32:16,880 --> 00:32:19,360
a lot of potential inherited security

891
00:32:19,360 --> 00:32:22,320
debt here when you are using software

892
00:32:22,320 --> 00:32:24,240
that you didn't write yourself

893
00:32:24,240 --> 00:32:26,000
from unknown sources you know that

894
00:32:26,000 --> 00:32:27,679
there's

895
00:32:27,679 --> 00:32:30,880
an aspect of risk that you need to think

896
00:32:30,880 --> 00:32:33,519
through and understand how can you help

897
00:32:33,519 --> 00:32:35,279
protect yourself how can you help

898
00:32:35,279 --> 00:32:37,919
protect that project tools like the cii

899
00:32:37,919 --> 00:32:39,919
best practices badge help give you a

900
00:32:39,919 --> 00:32:41,919
list these are these are projects that

901
00:32:41,919 --> 00:32:44,080
have been vetted and meet expected

902
00:32:44,080 --> 00:32:45,600
criteria on

903
00:32:45,600 --> 00:32:47,039
varying levels

904
00:32:47,039 --> 00:32:48,559
you know there are investments that we

905
00:32:48,559 --> 00:32:51,840
made in tooling to help bug hunting you

906
00:32:51,840 --> 00:32:54,240
know scale up more and help remediation

907
00:32:54,240 --> 00:32:55,919
happen more it's great to find a lot of

908
00:32:55,919 --> 00:32:58,320
problems your boggle is you don't have

909
00:32:58,320 --> 00:33:00,000
you have more people finding problems

910
00:33:00,000 --> 00:33:01,519
than you have people fixing the problem

911
00:33:01,519 --> 00:33:05,200
so how can we help fix the problems

912
00:33:05,200 --> 00:33:06,399
we need to invest in things like

913
00:33:06,399 --> 00:33:08,720
security reviews we need to have

914
00:33:08,720 --> 00:33:10,240
coordinated patching and incident

915
00:33:10,240 --> 00:33:12,799
response if one project fix something

916
00:33:12,799 --> 00:33:14,799
somewhere and there are other related

917
00:33:14,799 --> 00:33:16,640
projects that don't get the fix that's

918
00:33:16,640 --> 00:33:18,880
still a failing there's a gap there in

919
00:33:18,880 --> 00:33:20,799
that model we need to figure out how we

920
00:33:20,799 --> 00:33:23,200
can help make sure everyone gets aware

921
00:33:23,200 --> 00:33:24,559
that there's a vulnerability and there's

922
00:33:24,559 --> 00:33:26,240
something that needs done and those that

923
00:33:26,240 --> 00:33:29,039
can contribute have that ability

924
00:33:29,039 --> 00:33:31,360
we need to have that more

925
00:33:31,360 --> 00:33:33,519
thorough more consistent vulnerability

926
00:33:33,519 --> 00:33:36,240
disclosure process when a user of open

927
00:33:36,240 --> 00:33:38,240
source software is using a project they

928
00:33:38,240 --> 00:33:40,080
need to understand how that project

929
00:33:40,080 --> 00:33:42,480
works how they handle vulnerability

930
00:33:42,480 --> 00:33:44,799
intake how they fix stuff who else they

931
00:33:44,799 --> 00:33:46,480
might include

932
00:33:46,480 --> 00:33:49,039
and again i think where we can have

933
00:33:49,039 --> 00:33:51,679
coordinated and impact prioritized

934
00:33:51,679 --> 00:33:54,000
funding for these improvements audits

935
00:33:54,000 --> 00:33:56,240
and further research and how we can help

936
00:33:56,240 --> 00:33:58,880
model going forward

937
00:33:58,880 --> 00:34:01,200
thinking back there has you know this is

938
00:34:01,200 --> 00:34:02,960
not the first time in history people

939
00:34:02,960 --> 00:34:05,679
have invented you know come together to

940
00:34:05,679 --> 00:34:08,159
help solve the open source problem

941
00:34:08,159 --> 00:34:09,520
thinking back

942
00:34:09,520 --> 00:34:10,719
uh

943
00:34:10,719 --> 00:34:12,000
to

944
00:34:12,000 --> 00:34:14,000
you know the the dawn of time you know

945
00:34:14,000 --> 00:34:16,719
back in 1988 we had the morris software

946
00:34:16,719 --> 00:34:18,639
worm that kind of got people to realize

947
00:34:18,639 --> 00:34:20,639
hey there's a problem on the internet

948
00:34:20,639 --> 00:34:22,000
and all these things are connected and

949
00:34:22,000 --> 00:34:24,560
bad stuff can happen in the early 90s

950
00:34:24,560 --> 00:34:27,679
you know linux was created yay

951
00:34:27,679 --> 00:34:29,520
you know around the year 2000 there was

952
00:34:29,520 --> 00:34:32,000
a little problem called y2k that the

953
00:34:32,000 --> 00:34:34,399
whole world was going to end in december

954
00:34:34,399 --> 00:34:36,639
31st 1999

955
00:34:36,639 --> 00:34:38,480
spoiler it didn't but that was again

956
00:34:38,480 --> 00:34:39,839
there's another area where people

957
00:34:39,839 --> 00:34:41,520
realize there was a problem with

958
00:34:41,520 --> 00:34:43,520
computer software they got together and

959
00:34:43,520 --> 00:34:45,119
helped to try to fix it

960
00:34:45,119 --> 00:34:47,359
our friends over at owasp got together

961
00:34:47,359 --> 00:34:49,520
in 2001 and started initially focusing

962
00:34:49,520 --> 00:34:51,760
on web application security but over the

963
00:34:51,760 --> 00:34:53,918
years they've branched out to be broader

964
00:34:53,918 --> 00:34:56,399
just application security

965
00:34:56,399 --> 00:34:58,800
remember i mentioned back in 2014 we had

966
00:34:58,800 --> 00:35:00,560
heartbleed that kind of woke a lot of

967
00:35:00,560 --> 00:35:03,040
open source people up and later that

968
00:35:03,040 --> 00:35:05,040
month there was a project created called

969
00:35:05,040 --> 00:35:07,200
the core infrastructure initiative that

970
00:35:07,200 --> 00:35:09,359
started to fund

971
00:35:09,359 --> 00:35:12,160
people and resources and tooling to help

972
00:35:12,160 --> 00:35:15,119
assist projects like openssl but then

973
00:35:15,119 --> 00:35:17,520
again we were reinforced you know kind

974
00:35:17,520 --> 00:35:19,760
of the ubiquity of open source in that

975
00:35:19,760 --> 00:35:21,440
september when we had shell shock which

976
00:35:21,440 --> 00:35:23,280
was a bash vulnerability

977
00:35:23,280 --> 00:35:24,160
uh

978
00:35:24,160 --> 00:35:26,000
our friends over at owasp created a

979
00:35:26,000 --> 00:35:26,880
great

980
00:35:26,880 --> 00:35:30,720
uh kind of a testing tool zap 2015

981
00:35:30,720 --> 00:35:32,480
uh folks over at google started a

982
00:35:32,480 --> 00:35:35,599
project called oss fuzz in 2016. uh we

983
00:35:35,599 --> 00:35:38,160
have dependable that came out in 2017.

984
00:35:38,160 --> 00:35:39,920
the open source security foundation came

985
00:35:39,920 --> 00:35:41,599
together in 2020 and we're partnering

986
00:35:41,599 --> 00:35:44,320
with organizations like ostif and others

987
00:35:44,320 --> 00:35:46,960
to help improve the overall quality of

988
00:35:46,960 --> 00:35:49,359
open source ecosystem and who knows

989
00:35:49,359 --> 00:35:50,400
where we're going to go in the future

990
00:35:50,400 --> 00:35:52,160
when we're all wearing silver spacesuits

991
00:35:52,160 --> 00:35:54,160
and flying around our cars it's going to

992
00:35:54,160 --> 00:35:56,720
be awesome

993
00:35:56,960 --> 00:36:00,320
so you know how can we help

994
00:36:00,320 --> 00:36:03,680
you can help today by participating

995
00:36:03,680 --> 00:36:04,560
there's

996
00:36:04,560 --> 00:36:06,640
great ways you know there's many

997
00:36:06,640 --> 00:36:09,040
different groups that you can join in

998
00:36:09,040 --> 00:36:10,880
you can contribute your knowledge with

999
00:36:10,880 --> 00:36:13,200
by writing software by providing

1000
00:36:13,200 --> 00:36:15,680
comments helping with documentation it's

1001
00:36:15,680 --> 00:36:17,280
you have to remember we're all in this

1002
00:36:17,280 --> 00:36:19,839
together it's an ecosystem sharing is

1003
00:36:19,839 --> 00:36:22,160
caring we all use the software let's all

1004
00:36:22,160 --> 00:36:24,160
try to find ways we can help to improve

1005
00:36:24,160 --> 00:36:25,599
it

1006
00:36:25,599 --> 00:36:27,440
thinking about how the open ssf

1007
00:36:27,440 --> 00:36:29,680
specifically is working on this problem

1008
00:36:29,680 --> 00:36:32,079
we have six different working groups

1009
00:36:32,079 --> 00:36:33,839
today we have identifying security

1010
00:36:33,839 --> 00:36:36,480
threats securing critical projects

1011
00:36:36,480 --> 00:36:38,720
digital identity attestation security

1012
00:36:38,720 --> 00:36:41,040
tooling my favorite working group the

1013
00:36:41,040 --> 00:36:43,119
developer best practices working group

1014
00:36:43,119 --> 00:36:44,880
and then my favorite working group the

1015
00:36:44,880 --> 00:36:47,040
vulnerability disclosures working group

1016
00:36:47,040 --> 00:36:49,040
and we have a lot of different projects

1017
00:36:49,040 --> 00:36:50,640
we're working on these are things these

1018
00:36:50,640 --> 00:36:52,560
are tangible items that people can

1019
00:36:52,560 --> 00:36:54,800
participate in active development that's

1020
00:36:54,800 --> 00:36:58,079
going on so for example we have uh

1021
00:36:58,079 --> 00:36:59,920
projects like uh

1022
00:36:59,920 --> 00:37:02,960
the metrics or the badges or things like

1023
00:37:02,960 --> 00:37:07,040
skf or cre that we the the or oss fuzz

1024
00:37:07,040 --> 00:37:09,280
that you know the foundation is working

1025
00:37:09,280 --> 00:37:11,839
on we have members working on we do some

1026
00:37:11,839 --> 00:37:13,440
academic stuff like we have a listing of

1027
00:37:13,440 --> 00:37:15,839
personas and persona pain points we have

1028
00:37:15,839 --> 00:37:17,280
white papers

1029
00:37:17,280 --> 00:37:19,599
we also work with industry groups you

1030
00:37:19,599 --> 00:37:21,040
know there are several things that are

1031
00:37:21,040 --> 00:37:23,520
affiliated things like in the developer

1032
00:37:23,520 --> 00:37:24,640
identity

1033
00:37:24,640 --> 00:37:26,960
space like you have key lime and toto

1034
00:37:26,960 --> 00:37:28,720
and sig store that aren't part of the

1035
00:37:28,720 --> 00:37:30,079
foundation but are affiliated and

1036
00:37:30,079 --> 00:37:31,920
they're working towards enhancing a

1037
00:37:31,920 --> 00:37:33,760
pedigree and providence of open source

1038
00:37:33,760 --> 00:37:35,760
software so people that use open source

1039
00:37:35,760 --> 00:37:37,680
software have assurance that you know

1040
00:37:37,680 --> 00:37:39,359
some of the it's coming from the right

1041
00:37:39,359 --> 00:37:41,280
place and wasn't changed

1042
00:37:41,280 --> 00:37:42,880
um and then you know we were working

1043
00:37:42,880 --> 00:37:45,920
towards creating best practices

1044
00:37:45,920 --> 00:37:48,400
for the ecosystem on you know here's

1045
00:37:48,400 --> 00:37:51,440
tooling that is great options for open

1046
00:37:51,440 --> 00:37:53,520
source project to use if you use these

1047
00:37:53,520 --> 00:37:55,599
languages here's secure coding guides we

1048
00:37:55,599 --> 00:37:57,520
can help you refer to so that you can

1049
00:37:57,520 --> 00:37:59,680
write better quality software and that

1050
00:37:59,680 --> 00:38:02,800
whole all-important cvd here's what cbd

1051
00:38:02,800 --> 00:38:04,880
is here's how you can do it and how you

1052
00:38:04,880 --> 00:38:06,400
can participate resources that are

1053
00:38:06,400 --> 00:38:09,200
available to you to get vulnerabilities

1054
00:38:09,200 --> 00:38:11,599
documented and if you need help doing it

1055
00:38:11,599 --> 00:38:13,599
we can help provide you resources to

1056
00:38:13,599 --> 00:38:15,520
help find out how to do that

1057
00:38:15,520 --> 00:38:16,960
and then thinking about the larger

1058
00:38:16,960 --> 00:38:19,920
ecosystem we partner with organizations

1059
00:38:19,920 --> 00:38:23,839
like cert cc there's a vulnerability

1060
00:38:23,839 --> 00:38:25,839
reporting platform called vince we're

1061
00:38:25,839 --> 00:38:27,599
working with them on to open source and

1062
00:38:27,599 --> 00:38:29,280
then they'll think about the larger

1063
00:38:29,280 --> 00:38:31,280
efforts like the ntia's s-bomb software

1064
00:38:31,280 --> 00:38:33,359
build materials effort the foundation is

1065
00:38:33,359 --> 00:38:34,800
involved in a lot of these different

1066
00:38:34,800 --> 00:38:37,440
things and you know there's always room

1067
00:38:37,440 --> 00:38:39,359
for improvement but there's also always

1068
00:38:39,359 --> 00:38:41,440
room for your participation your

1069
00:38:41,440 --> 00:38:43,680
feedback and your collaboration

1070
00:38:43,680 --> 00:38:45,119
and i'm gonna

1071
00:38:45,119 --> 00:38:47,119
pass it over to jennifer

1072
00:38:47,119 --> 00:38:49,599
to take us home here

1073
00:38:49,599 --> 00:38:51,280
we currently have six working groups

1074
00:38:51,280 --> 00:38:52,880
that are working on things like building

1075
00:38:52,880 --> 00:38:54,560
scalable tooling for open source

1076
00:38:54,560 --> 00:38:56,240
software in general including the

1077
00:38:56,240 --> 00:38:58,320
development of scorecards to help users

1078
00:38:58,320 --> 00:38:59,760
better understand the security

1079
00:38:59,760 --> 00:39:02,640
properties of a given repo or package

1080
00:39:02,640 --> 00:39:04,320
improving coordinated disclosure for

1081
00:39:04,320 --> 00:39:06,720
open source software developing security

1082
00:39:06,720 --> 00:39:08,720
guidelines for open source developers

1083
00:39:08,720 --> 00:39:10,880
combined with tooling like the cii best

1084
00:39:10,880 --> 00:39:12,800
practices badge to encourage projects to

1085
00:39:12,800 --> 00:39:14,320
reach a certain minimum level of

1086
00:39:14,320 --> 00:39:16,320
security standard and perhaps most

1087
00:39:16,320 --> 00:39:18,720
interestingly our securing critical

1088
00:39:18,720 --> 00:39:20,800
projects group which seeks to define the

1089
00:39:20,800 --> 00:39:22,800
most critical projects on the internet

1090
00:39:22,800 --> 00:39:24,800
for the targeted investment of time and

1091
00:39:24,800 --> 00:39:27,520
other resources for things like research

1092
00:39:27,520 --> 00:39:29,680
development of tooling partial rewrites

1093
00:39:29,680 --> 00:39:32,000
of code in safer programming languages

1094
00:39:32,000 --> 00:39:35,520
and third-party security audits

1095
00:39:35,520 --> 00:39:36,960
thank you for listening

1096
00:39:36,960 --> 00:39:39,800
please join us by visiting

1097
00:39:39,800 --> 00:39:42,960
openssf.org get involved and we will now

1098
00:39:42,960 --> 00:39:45,200
share further details about our work and

1099
00:39:45,200 --> 00:39:48,680
take any questions

