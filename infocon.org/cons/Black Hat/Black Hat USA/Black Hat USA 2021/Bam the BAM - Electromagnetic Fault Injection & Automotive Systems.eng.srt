1
00:00:01,130 --> 00:00:13,759
[Music]

2
00:00:13,759 --> 00:00:16,079
hi i'm colin o'flynn and i'm presenting

3
00:00:16,079 --> 00:00:17,600
the session to you bam the bam

4
00:00:17,600 --> 00:00:19,199
electromagnetic fault injection and

5
00:00:19,199 --> 00:00:21,119
automotive systems so in this talk i'm

6
00:00:21,119 --> 00:00:22,640
going to talk a little bit about some

7
00:00:22,640 --> 00:00:24,800
work i did looking at a

8
00:00:24,800 --> 00:00:27,279
engine ecu from a fairly recent at the

9
00:00:27,279 --> 00:00:28,400
time anyway

10
00:00:28,400 --> 00:00:30,160
vehicle and how we can use

11
00:00:30,160 --> 00:00:31,760
electromagnetic fault injection to gain

12
00:00:31,760 --> 00:00:34,399
access to it but more generally

13
00:00:34,399 --> 00:00:35,760
i'm not going to concentrate just on

14
00:00:35,760 --> 00:00:37,840
that specific device but on how these

15
00:00:37,840 --> 00:00:40,399
types of attacks are relevant to

16
00:00:40,399 --> 00:00:42,079
automotive and embedded systems in

17
00:00:42,079 --> 00:00:43,360
general

18
00:00:43,360 --> 00:00:45,520
um so i'm coming to you from halifax on

19
00:00:45,520 --> 00:00:47,280
the east coast of canada

20
00:00:47,280 --> 00:00:48,960
um somewhere over here i'm not

21
00:00:48,960 --> 00:00:50,320
unfortunate meeting with everyone in

22
00:00:50,320 --> 00:00:51,680
person like we would normally get the

23
00:00:51,680 --> 00:00:54,960
chance to do um so some people might say

24
00:00:54,960 --> 00:00:56,399
we know where is that there's not as

25
00:00:56,399 --> 00:00:59,280
much around tech wise but it's been not

26
00:00:59,280 --> 00:01:01,359
a terrible place to spend at the last

27
00:01:01,359 --> 00:01:03,600
year and a bit that has been a lot of

28
00:01:03,600 --> 00:01:05,360
time without travel

29
00:01:05,360 --> 00:01:07,520
professionally though i'm normally known

30
00:01:07,520 --> 00:01:09,439
for a tool called chip whisper

31
00:01:09,439 --> 00:01:11,360
which i've presented originally a black

32
00:01:11,360 --> 00:01:13,119
app and then also some work i've done

33
00:01:13,119 --> 00:01:14,400
with it

34
00:01:14,400 --> 00:01:17,040
it was or part of it is this open source

35
00:01:17,040 --> 00:01:19,200
hardware capture and fault injection

36
00:01:19,200 --> 00:01:21,280
tooling since then there's all sorts of

37
00:01:21,280 --> 00:01:23,280
tools that have developed around it

38
00:01:23,280 --> 00:01:24,400
so i'm going to be using something

39
00:01:24,400 --> 00:01:26,799
called chip charter i developed as well

40
00:01:26,799 --> 00:01:28,320
parts of the tooling are open source

41
00:01:28,320 --> 00:01:30,159
parts of it are not so depending on on

42
00:01:30,159 --> 00:01:31,840
where we get into

43
00:01:31,840 --> 00:01:33,759
there's some various you know legal for

44
00:01:33,759 --> 00:01:35,200
a chip sharder i'll be talking about

45
00:01:35,200 --> 00:01:36,960
this high voltage tool that required us

46
00:01:36,960 --> 00:01:38,799
to get safety testing

47
00:01:38,799 --> 00:01:40,159
so there's a lot of pretty interest you

48
00:01:40,159 --> 00:01:42,320
know not just technical side to this

49
00:01:42,320 --> 00:01:43,360
that

50
00:01:43,360 --> 00:01:45,520
is a topic for another presentation

51
00:01:45,520 --> 00:01:47,280
but i also work on a lot of educational

52
00:01:47,280 --> 00:01:49,280
resources so there's a lot of tutorials

53
00:01:49,280 --> 00:01:50,399
i'm going to link to that are just

54
00:01:50,399 --> 00:01:52,720
freely available um talking about fault

55
00:01:52,720 --> 00:01:54,479
and direction power analysis things like

56
00:01:54,479 --> 00:01:55,280
that

57
00:01:55,280 --> 00:01:56,880
more recently too actually for the past

58
00:01:56,880 --> 00:01:59,520
few years i've been in release with a

59
00:01:59,520 --> 00:02:01,360
book with a colleague jasper

60
00:02:01,360 --> 00:02:03,040
who works with a company riscure who

61
00:02:03,040 --> 00:02:05,759
also does um various tooling at an even

62
00:02:05,759 --> 00:02:07,759
sort of a really high level

63
00:02:07,759 --> 00:02:09,119
of engagement

64
00:02:09,119 --> 00:02:10,399
and so there's this book that should be

65
00:02:10,399 --> 00:02:12,480
available that was actually cover some

66
00:02:12,480 --> 00:02:14,720
of this electromagnetic fault injection

67
00:02:14,720 --> 00:02:16,160
work i'm talking about so if you're

68
00:02:16,160 --> 00:02:17,920
curious that's another great resource

69
00:02:17,920 --> 00:02:20,319
i'm going to plug of course now

70
00:02:20,319 --> 00:02:22,080
but what got me interested in this

71
00:02:22,080 --> 00:02:24,879
basically i was you know someone had

72
00:02:24,879 --> 00:02:26,800
sent me this this article this was a

73
00:02:26,800 --> 00:02:28,720
while back so this project really did

74
00:02:28,720 --> 00:02:31,760
start in start of 2019 um

75
00:02:31,760 --> 00:02:33,840
and it was the gm had this this ecu that

76
00:02:33,840 --> 00:02:35,280
was unhackable right which is of course

77
00:02:35,280 --> 00:02:38,080
like a risky thing to put out there um

78
00:02:38,080 --> 00:02:41,200
at the time i found one of the ecu's on

79
00:02:41,200 --> 00:02:43,360
this e99 ecu

80
00:02:43,360 --> 00:02:45,040
and it was actually tuned so the

81
00:02:45,040 --> 00:02:46,800
interesting thing i want to mention is

82
00:02:46,800 --> 00:02:48,080
that you know there's a lot of interest

83
00:02:48,080 --> 00:02:49,599
for unlocking these from a tuner

84
00:02:49,599 --> 00:02:50,879
perspective

85
00:02:50,879 --> 00:02:54,239
this particular device did already have

86
00:02:54,239 --> 00:02:55,760
someone had gained access to it of

87
00:02:55,760 --> 00:02:57,360
course this is all proprietary so no

88
00:02:57,360 --> 00:02:58,959
one's going to tell you anything about

89
00:02:58,959 --> 00:03:00,959
it so i wanted to build up you know what

90
00:03:00,959 --> 00:03:02,959
would be the steps to actually getting

91
00:03:02,959 --> 00:03:04,480
access to it and how might they have

92
00:03:04,480 --> 00:03:06,239
done it so i don't know exactly what

93
00:03:06,239 --> 00:03:09,120
happened um but this is sort of my

94
00:03:09,120 --> 00:03:12,159
journey to to understand that i changed

95
00:03:12,159 --> 00:03:14,080
a little bit the ecu and you so i

96
00:03:14,080 --> 00:03:17,440
started with mentioning this e99 ecu i

97
00:03:17,440 --> 00:03:19,680
switched to this e41 so this is a

98
00:03:19,680 --> 00:03:22,720
slightly older uh generation one the

99
00:03:22,720 --> 00:03:25,360
main difference is this main chip here

100
00:03:25,360 --> 00:03:27,680
is different so there's going to be some

101
00:03:27,680 --> 00:03:29,680
differences about it

102
00:03:29,680 --> 00:03:32,080
the reason i use the e41 was in part at

103
00:03:32,080 --> 00:03:34,480
the time it was more available

104
00:03:34,480 --> 00:03:36,560
i knew i need to get a few of them it

105
00:03:36,560 --> 00:03:37,920
turns out right now there's this big

106
00:03:37,920 --> 00:03:39,440
part shortage if you're not familiar

107
00:03:39,440 --> 00:03:40,959
with all the manufacturing issues so i

108
00:03:40,959 --> 00:03:42,080
don't even know if you can get them

109
00:03:42,080 --> 00:03:43,360
right now

110
00:03:43,360 --> 00:03:44,319
but

111
00:03:44,319 --> 00:03:46,400
at the time this was the case um they

112
00:03:46,400 --> 00:03:48,159
were supposed to be a similar generation

113
00:03:48,159 --> 00:03:51,040
so the e41 ecu was supposed to have

114
00:03:51,040 --> 00:03:52,959
pretty good security so people talked

115
00:03:52,959 --> 00:03:55,040
about it using secure boot i don't know

116
00:03:55,040 --> 00:03:57,040
exactly if that's true or not

117
00:03:57,040 --> 00:03:59,519
but basically it was not as tuned as

118
00:03:59,519 --> 00:04:01,120
other devices so

119
00:04:01,120 --> 00:04:03,360
older ecu's tons of tools support them

120
00:04:03,360 --> 00:04:05,599
this one at the time there was only like

121
00:04:05,599 --> 00:04:07,599
one tool that supported it

122
00:04:07,599 --> 00:04:09,200
and it was very unclear you know how

123
00:04:09,200 --> 00:04:10,959
they did it so this is kind of was also

124
00:04:10,959 --> 00:04:12,720
a really interesting

125
00:04:12,720 --> 00:04:15,360
target um the other thing i'll point you

126
00:04:15,360 --> 00:04:16,639
to is i

127
00:04:16,639 --> 00:04:17,519
you know i'm giving you this

128
00:04:17,519 --> 00:04:20,000
presentation in 20 30 minutes i'm gonna

129
00:04:20,000 --> 00:04:22,479
talk about a lot of different work that

130
00:04:22,479 --> 00:04:24,880
happened um often

131
00:04:24,880 --> 00:04:26,240
you want to know the process you're

132
00:04:26,240 --> 00:04:27,680
curious how you actually might get into

133
00:04:27,680 --> 00:04:30,240
that um so i have these four youtube

134
00:04:30,240 --> 00:04:32,479
videos that i'm releasing associated

135
00:04:32,479 --> 00:04:34,639
with this and basically they go over you

136
00:04:34,639 --> 00:04:35,680
know like

137
00:04:35,680 --> 00:04:38,800
um hey i took the chip off in the end to

138
00:04:38,800 --> 00:04:40,479
reverse engineer the pin out and so you

139
00:04:40,479 --> 00:04:43,360
can actually watch me do quasi live some

140
00:04:43,360 --> 00:04:45,120
of it's you know cut down for time but

141
00:04:45,120 --> 00:04:47,520
for the most part it's pretty raw

142
00:04:47,520 --> 00:04:49,520
um so if you're curious to see hey how

143
00:04:49,520 --> 00:04:51,280
could you do that one of the other

144
00:04:51,280 --> 00:04:53,360
things i want to point out is that quite

145
00:04:53,360 --> 00:04:55,520
a bit of information i've tried to put

146
00:04:55,520 --> 00:04:57,360
out there beyond just the classic sort

147
00:04:57,360 --> 00:04:59,759
of paper presentation stuff so

148
00:04:59,759 --> 00:05:01,360
take a look at that if you're if you're

149
00:05:01,360 --> 00:05:03,840
interested

150
00:05:04,720 --> 00:05:07,520
um so really briefly these devices if

151
00:05:07,520 --> 00:05:09,840
you haven't looked at the power pc

152
00:05:09,840 --> 00:05:12,800
devices before this 5000 series is quite

153
00:05:12,800 --> 00:05:14,720
popular in automotive um it was actually

154
00:05:14,720 --> 00:05:16,720
jointly developed so by at the time by

155
00:05:16,720 --> 00:05:19,280
motorola and st micro motorola game

156
00:05:19,280 --> 00:05:21,520
freescale nxp

157
00:05:21,520 --> 00:05:24,080
um due to acquisition so a few name

158
00:05:24,080 --> 00:05:27,600
changes there um basically there's a

159
00:05:27,600 --> 00:05:29,039
number of these devices that will have

160
00:05:29,039 --> 00:05:30,720
kind of the same core

161
00:05:30,720 --> 00:05:32,160
and different peripherals from each

162
00:05:32,160 --> 00:05:33,520
manufacturer

163
00:05:33,520 --> 00:05:35,840
the part numbers are different

164
00:05:35,840 --> 00:05:38,240
normally the core like bootloader and

165
00:05:38,240 --> 00:05:40,320
some of that is very similar between

166
00:05:40,320 --> 00:05:41,680
them

167
00:05:41,680 --> 00:05:43,919
so you have to be a bit careful because

168
00:05:43,919 --> 00:05:46,960
there's actually a lot of variations

169
00:05:46,960 --> 00:05:49,600
of kind of the part generations

170
00:05:49,600 --> 00:05:51,199
within nxp

171
00:05:51,199 --> 00:05:53,440
and then between nxp and st for example

172
00:05:53,440 --> 00:05:54,800
so if you're if you're looking at

173
00:05:54,800 --> 00:05:57,520
different devices just be aware

174
00:05:57,520 --> 00:06:01,039
that there is quite a few variations

175
00:06:01,039 --> 00:06:03,199
as an example

176
00:06:03,199 --> 00:06:05,880
i'm looking at two of these from nxp the

177
00:06:05,880 --> 00:06:09,440
mpc55 and mpc56 series and then

178
00:06:09,440 --> 00:06:13,600
comparing it to the mpc57 series

179
00:06:13,600 --> 00:06:16,880
the first two are basically very similar

180
00:06:16,880 --> 00:06:18,880
they're slight differences

181
00:06:18,880 --> 00:06:20,160
and they're very similar in how you

182
00:06:20,160 --> 00:06:22,000
program them which is interesting to us

183
00:06:22,000 --> 00:06:23,600
because they have this boot assist

184
00:06:23,600 --> 00:06:25,600
module so that's the first bam

185
00:06:25,600 --> 00:06:27,600
um and that's

186
00:06:27,600 --> 00:06:29,120
they called in rom i don't know if it's

187
00:06:29,120 --> 00:06:30,880
flash or not right and it basically

188
00:06:30,880 --> 00:06:32,560
brings the part up and passes control to

189
00:06:32,560 --> 00:06:34,639
the user

190
00:06:34,639 --> 00:06:37,520
the other thing it has is special boot

191
00:06:37,520 --> 00:06:39,199
pins that allow us to control some of

192
00:06:39,199 --> 00:06:41,520
the boot mode

193
00:06:41,520 --> 00:06:43,919
the other version of it so this one was

194
00:06:43,919 --> 00:06:46,720
used in the e99 if you remember

195
00:06:46,720 --> 00:06:48,479
this one here

196
00:06:48,479 --> 00:06:50,880
actually has the same sort of options

197
00:06:50,880 --> 00:06:53,520
but it also has an ability to ignore

198
00:06:53,520 --> 00:06:55,919
external pins so it's a little harder to

199
00:06:55,919 --> 00:06:57,520
experiment with that was the other

200
00:06:57,520 --> 00:06:59,360
reason that i i've started with these

201
00:06:59,360 --> 00:07:00,720
devices

202
00:07:00,720 --> 00:07:01,919
and there turned out to be quite a bit

203
00:07:01,919 --> 00:07:03,440
of interesting information about you

204
00:07:03,440 --> 00:07:05,599
know this first device enough to really

205
00:07:05,599 --> 00:07:07,280
dive into it so

206
00:07:07,280 --> 00:07:08,639
that's actually what this talk is all

207
00:07:08,639 --> 00:07:09,919
about

208
00:07:09,919 --> 00:07:12,720
um so the boot assist module the bam it

209
00:07:12,720 --> 00:07:14,319
gives you this really nice flowchart so

210
00:07:14,319 --> 00:07:15,680
you don't have to reverse engineer the

211
00:07:15,680 --> 00:07:17,840
code or anything right so there's this

212
00:07:17,840 --> 00:07:20,880
boot config and if we get into the right

213
00:07:20,880 --> 00:07:23,440
settings we end up in serial boot um in

214
00:07:23,440 --> 00:07:24,479
here

215
00:07:24,479 --> 00:07:26,800
and in serial boot right they know that

216
00:07:26,800 --> 00:07:28,960
people could use this to do things they

217
00:07:28,960 --> 00:07:30,800
don't want to have happen

218
00:07:30,800 --> 00:07:32,240
so they basically have this serial

219
00:07:32,240 --> 00:07:33,280
protocol

220
00:07:33,280 --> 00:07:35,280
of importance you'll notice this

221
00:07:35,280 --> 00:07:37,280
password transaction so basically what

222
00:07:37,280 --> 00:07:39,680
you do you start you send a password to

223
00:07:39,680 --> 00:07:41,199
the device

224
00:07:41,199 --> 00:07:42,720
if the device likes the password it

225
00:07:42,720 --> 00:07:44,400
continues to accept data

226
00:07:44,400 --> 00:07:46,479
you send it data that it downloads and

227
00:07:46,479 --> 00:07:48,720
then it just runs whatever you download

228
00:07:48,720 --> 00:07:49,440
it

229
00:07:49,440 --> 00:07:50,879
so you've got to make so this is just

230
00:07:50,879 --> 00:07:52,240
like a first stage bootloader you have

231
00:07:52,240 --> 00:07:53,919
to make your own second stage bootloader

232
00:07:53,919 --> 00:07:55,599
to actually do anything

233
00:07:55,599 --> 00:07:57,680
right all it does is run code from ram

234
00:07:57,680 --> 00:07:58,879
for you

235
00:07:58,879 --> 00:08:01,840
if it accepts the password um so what

236
00:08:01,840 --> 00:08:03,840
we'll need to do the the kind of point

237
00:08:03,840 --> 00:08:05,919
of this talk is mostly about this is

238
00:08:05,919 --> 00:08:07,919
that password how that comparison works

239
00:08:07,919 --> 00:08:10,879
and how you could bypass it um it turns

240
00:08:10,879 --> 00:08:13,759
out this is a nice attack because it's

241
00:08:13,759 --> 00:08:16,720
pretty um low level so no matter what

242
00:08:16,720 --> 00:08:18,160
people do at a higher level wouldn't no

243
00:08:18,160 --> 00:08:19,840
matter what the ecu manufacturers are

244
00:08:19,840 --> 00:08:21,759
doing this ends up being sort of a

245
00:08:21,759 --> 00:08:23,840
problem for them because this gives you

246
00:08:23,840 --> 00:08:27,840
access to the core memory itself

247
00:08:28,400 --> 00:08:30,800
how that password is handled depends on

248
00:08:30,800 --> 00:08:32,559
some configuration

249
00:08:32,559 --> 00:08:34,159
so i go into more detail on the paper

250
00:08:34,159 --> 00:08:36,159
but really briefly i want to cover this

251
00:08:36,159 --> 00:08:37,679
idea that you know

252
00:08:37,679 --> 00:08:39,519
they call it censorship so you'll see

253
00:08:39,519 --> 00:08:42,240
this name censorship on these devices

254
00:08:42,240 --> 00:08:44,080
with the censorship control it basically

255
00:08:44,080 --> 00:08:46,880
controls if you have a password or not

256
00:08:46,880 --> 00:08:47,760
that's

257
00:08:47,760 --> 00:08:49,600
used if that password is what they call

258
00:08:49,600 --> 00:08:51,519
public which is known

259
00:08:51,519 --> 00:08:54,240
or this flash password which is a

260
00:08:54,240 --> 00:08:57,680
password that the customer sets up

261
00:08:57,680 --> 00:08:59,440
right so the customer being the ecu

262
00:08:59,440 --> 00:09:02,080
manufacturer so if there's that customer

263
00:09:02,080 --> 00:09:04,959
specific password um we can't easily

264
00:09:04,959 --> 00:09:07,920
access the device and on these devices

265
00:09:07,920 --> 00:09:11,200
on these ecu's the password is unique

266
00:09:11,200 --> 00:09:14,320
per uh device so that's that's very good

267
00:09:14,320 --> 00:09:15,519
okay so what's the first thing we're

268
00:09:15,519 --> 00:09:17,279
going to do the first thing i'm actually

269
00:09:17,279 --> 00:09:18,480
going to do is use something called

270
00:09:18,480 --> 00:09:20,640
power analysis so power analysis that's

271
00:09:20,640 --> 00:09:22,080
part of what i've talked about a bunch

272
00:09:22,080 --> 00:09:23,680
before with with chip whisperer and in

273
00:09:23,680 --> 00:09:25,760
that hardware hacking handbook

274
00:09:25,760 --> 00:09:28,320
basically it lets us actually understand

275
00:09:28,320 --> 00:09:31,120
the program flow you know without having

276
00:09:31,120 --> 00:09:32,880
other debug access so i don't need a

277
00:09:32,880 --> 00:09:34,320
debugger or anything like that because

278
00:09:34,320 --> 00:09:36,000
that's all going to be closed off in the

279
00:09:36,000 --> 00:09:38,000
bootloader

280
00:09:38,000 --> 00:09:39,279
and i'm using

281
00:09:39,279 --> 00:09:41,040
just this chip whisperer system i'll

282
00:09:41,040 --> 00:09:43,600
show you a demo of that in a second here

283
00:09:43,600 --> 00:09:45,600
to compare what i want to compare is

284
00:09:45,600 --> 00:09:47,040
like what happens if i send the right

285
00:09:47,040 --> 00:09:49,680
versus wrong password right so

286
00:09:49,680 --> 00:09:51,519
to do this comparison what we do is i

287
00:09:51,519 --> 00:09:53,600
have a custom board and you can get the

288
00:09:53,600 --> 00:09:56,080
the design files at that link there and

289
00:09:56,080 --> 00:09:59,279
i've taken the power rail for the device

290
00:09:59,279 --> 00:10:01,200
i've not put what would normally have

291
00:10:01,200 --> 00:10:03,360
decoupling capacitors on it

292
00:10:03,360 --> 00:10:05,839
and i use a shunt and this shunt

293
00:10:05,839 --> 00:10:07,440
basically means that there's currents

294
00:10:07,440 --> 00:10:09,600
going to flow through this shunt

295
00:10:09,600 --> 00:10:11,600
as the current changes it changes the

296
00:10:11,600 --> 00:10:13,519
voltage right and we measure that

297
00:10:13,519 --> 00:10:15,120
voltage

298
00:10:15,120 --> 00:10:16,800
it actually turns out that the power

299
00:10:16,800 --> 00:10:19,839
being used by a device does vary

300
00:10:19,839 --> 00:10:22,640
depending on what it's doing um so if

301
00:10:22,640 --> 00:10:24,320
it's just sitting there in a no op loop

302
00:10:24,320 --> 00:10:26,320
doing nothing uh it tends to have a

303
00:10:26,320 --> 00:10:27,760
different signature than if it's like

304
00:10:27,760 --> 00:10:29,760
you know using the ur

305
00:10:29,760 --> 00:10:31,440
reading from flash reading from ram all

306
00:10:31,440 --> 00:10:32,560
that stuff

307
00:10:32,560 --> 00:10:33,680
and so

308
00:10:33,680 --> 00:10:37,680
what i do here is i plot over time

309
00:10:37,680 --> 00:10:39,519
an incorrect and a correct password and

310
00:10:39,519 --> 00:10:41,440
then i see what the power usage looks

311
00:10:41,440 --> 00:10:44,079
like so the correct password is in green

312
00:10:44,079 --> 00:10:46,959
here the incorrect one is in red and

313
00:10:46,959 --> 00:10:48,880
this is measured at a point some point

314
00:10:48,880 --> 00:10:52,720
after i send the password to the device

315
00:10:52,720 --> 00:10:54,240
right so what's interesting is right

316
00:10:54,240 --> 00:10:56,959
here they're perfectly overlapping

317
00:10:56,959 --> 00:10:59,360
and then eventually they kind of diverge

318
00:10:59,360 --> 00:11:02,399
right like it splits off um they no

319
00:11:02,399 --> 00:11:05,200
longer overlap so perfectly and that

320
00:11:05,200 --> 00:11:06,720
means at some point in time the code

321
00:11:06,720 --> 00:11:08,959
path actually changed so so what does

322
00:11:08,959 --> 00:11:11,040
that look like you're probably

323
00:11:11,040 --> 00:11:13,440
kind of curious right so this is like an

324
00:11:13,440 --> 00:11:15,440
example so normally i'm using this this

325
00:11:15,440 --> 00:11:18,480
jupiter um notebook thing and what i

326
00:11:18,480 --> 00:11:20,720
have physically great is i'm i love

327
00:11:20,720 --> 00:11:22,880
doing live demos by the way so i

328
00:11:22,880 --> 00:11:24,399
didn't want to pre-record it even though

329
00:11:24,399 --> 00:11:26,000
i'm recording everything

330
00:11:26,000 --> 00:11:28,320
is i have that target board i showed you

331
00:11:28,320 --> 00:11:30,480
a second ago um and so i have this

332
00:11:30,480 --> 00:11:31,920
target board here

333
00:11:31,920 --> 00:11:33,839
and then i'm measuring the power with

334
00:11:33,839 --> 00:11:36,480
the chip whisperer device here um and at

335
00:11:36,480 --> 00:11:39,120
the same point we can control

336
00:11:39,120 --> 00:11:40,560
you know we're gonna send in passwords

337
00:11:40,560 --> 00:11:43,279
to it um so

338
00:11:43,279 --> 00:11:45,040
this code here is just setting up you

339
00:11:45,040 --> 00:11:47,200
know the the the password so it

340
00:11:47,200 --> 00:11:48,800
implements that protocol and then checks

341
00:11:48,800 --> 00:11:51,279
it get ever gets a response

342
00:11:51,279 --> 00:11:54,000
um and i can basically send one of two

343
00:11:54,000 --> 00:11:55,680
different passwords so i'm going to use

344
00:11:55,680 --> 00:11:57,680
the public password this device is just

345
00:11:57,680 --> 00:11:59,360
configured with that

346
00:11:59,360 --> 00:12:01,839
and either the first byte is correct so

347
00:12:01,839 --> 00:12:04,079
it's the right password in red

348
00:12:04,079 --> 00:12:06,639
or the first byte is incorrect so it's

349
00:12:06,639 --> 00:12:08,720
the wrong password in blue right so if

350
00:12:08,720 --> 00:12:11,600
we plot these two

351
00:12:11,600 --> 00:12:13,440
you sort of see

352
00:12:13,440 --> 00:12:15,200
um and

353
00:12:15,200 --> 00:12:16,720
we could make it you know let's make it

354
00:12:16,720 --> 00:12:19,519
match the slide so green and red

355
00:12:19,519 --> 00:12:20,959
i told you i was doing this live so i

356
00:12:20,959 --> 00:12:22,320
didn't even think of that

357
00:12:22,320 --> 00:12:23,920
so now you can see that red right like

358
00:12:23,920 --> 00:12:25,279
right here this is actually where it's

359
00:12:25,279 --> 00:12:27,519
going into that that infinite loop um

360
00:12:27,519 --> 00:12:29,600
there's a bit of a time mismatch don't

361
00:12:29,600 --> 00:12:31,760
read too much into that i'll show you in

362
00:12:31,760 --> 00:12:33,519
a second why

363
00:12:33,519 --> 00:12:35,519
right because

364
00:12:35,519 --> 00:12:38,720
what we're seeing here right is that the

365
00:12:38,720 --> 00:12:40,480
red

366
00:12:40,480 --> 00:12:42,240
line so it's continuing the comparison

367
00:12:42,240 --> 00:12:44,240
or something and then eventually we do

368
00:12:44,240 --> 00:12:47,120
see it actually split down into this

369
00:12:47,120 --> 00:12:49,440
smaller loop here and what's what's the

370
00:12:49,440 --> 00:12:51,120
smaller consumption

371
00:12:51,120 --> 00:12:53,040
i actually know that the device just

372
00:12:53,040 --> 00:12:54,560
waits for a watchdog reset when the

373
00:12:54,560 --> 00:12:55,839
password's wrong so that's what you're

374
00:12:55,839 --> 00:12:56,800
seeing right there you're seeing the

375
00:12:56,800 --> 00:13:00,240
device waiting um if we send the same

376
00:13:00,240 --> 00:13:02,160
like so just as a reference if i send

377
00:13:02,160 --> 00:13:04,959
both of these the exact same incorrect

378
00:13:04,959 --> 00:13:08,320
you can see they're a tiny bit you know

379
00:13:08,320 --> 00:13:09,760
they don't match up perfectly so there's

380
00:13:09,760 --> 00:13:11,200
some jitter here

381
00:13:11,200 --> 00:13:13,200
but you can see that the the overall you

382
00:13:13,200 --> 00:13:16,320
know flow of these look very similar

383
00:13:16,320 --> 00:13:18,480
and we can try like a different but yet

384
00:13:18,480 --> 00:13:21,120
still incorrect password

385
00:13:21,120 --> 00:13:23,040
and see again a little bit of jitter

386
00:13:23,040 --> 00:13:24,240
there so that's what i was saying when

387
00:13:24,240 --> 00:13:26,000
you know don't read too much into the

388
00:13:26,000 --> 00:13:28,160
fact there's a time difference um there

389
00:13:28,160 --> 00:13:30,079
may be a timing attack available that

390
00:13:30,079 --> 00:13:32,240
would let you brute force it the issue

391
00:13:32,240 --> 00:13:35,519
is that it's a 64-bit um password

392
00:13:35,519 --> 00:13:37,839
you're you have a limited baud rate so

393
00:13:37,839 --> 00:13:41,839
it's 24 kilobits this this serial um

394
00:13:41,839 --> 00:13:43,440
console is running at basically it's

395
00:13:43,440 --> 00:13:44,399
fixed

396
00:13:44,399 --> 00:13:46,800
uh you have a 64-bit and it's a pure

397
00:13:46,800 --> 00:13:48,240
it's not just ascii you know you can

398
00:13:48,240 --> 00:13:49,760
actually send any password you want

399
00:13:49,760 --> 00:13:51,199
almost

400
00:13:51,199 --> 00:13:53,040
so you have quite a big search space so

401
00:13:53,040 --> 00:13:54,639
if you were to brute force this this is

402
00:13:54,639 --> 00:13:57,279
not super trivial to brute force

403
00:13:57,279 --> 00:13:59,519
if there's a per byte timing attack you

404
00:13:59,519 --> 00:14:00,959
may actually have something more useful

405
00:14:00,959 --> 00:14:03,440
there so i didn't explore that too much

406
00:14:03,440 --> 00:14:05,279
because what i was really interested in

407
00:14:05,279 --> 00:14:07,440
is can i target that point in time so if

408
00:14:07,440 --> 00:14:11,680
i look at that point in time can i say

409
00:14:11,680 --> 00:14:13,920
let's use electromagnetic fault

410
00:14:13,920 --> 00:14:15,120
injection

411
00:14:15,120 --> 00:14:16,800
to

412
00:14:16,800 --> 00:14:18,480
take make the code path divert so with

413
00:14:18,480 --> 00:14:21,199
electromagnetic fault injection what we

414
00:14:21,199 --> 00:14:23,760
have is we have a small coil so there's

415
00:14:23,760 --> 00:14:26,480
a coil that we put a pulse into you put

416
00:14:26,480 --> 00:14:28,160
the pulse into that

417
00:14:28,160 --> 00:14:29,600
coil

418
00:14:29,600 --> 00:14:31,440
and it can actually disrupt the

419
00:14:31,440 --> 00:14:34,800
execution of code on the device so as a

420
00:14:34,800 --> 00:14:37,360
little demo here so i previously did a

421
00:14:37,360 --> 00:14:39,519
talk on a trezor wallet where i was

422
00:14:39,519 --> 00:14:41,120
using electromagnetic fault injection

423
00:14:41,120 --> 00:14:42,240
for that

424
00:14:42,240 --> 00:14:44,480
at the time so i disclosed it to

425
00:14:44,480 --> 00:14:46,399
treasure so they could patch the the

426
00:14:46,399 --> 00:14:48,240
problem um and they gave me a bitcoin

427
00:14:48,240 --> 00:14:50,240
which i put on one of their wallets as a

428
00:14:50,240 --> 00:14:52,560
reward um at the time you know that was

429
00:14:52,560 --> 00:14:55,120
like 10k and so i did a live demo using

430
00:14:55,120 --> 00:14:56,720
it so this one here i don't actually

431
00:14:56,720 --> 00:14:58,959
have a bitcoin on it anymore

432
00:14:58,959 --> 00:15:00,959
but what we can do is i can show you you

433
00:15:00,959 --> 00:15:03,760
know just as a kind of quick rehash

434
00:15:03,760 --> 00:15:05,519
of what that looks like so i'm just

435
00:15:05,519 --> 00:15:06,880
gonna move that

436
00:15:06,880 --> 00:15:10,800
other stuff out of the way a little bit

437
00:15:10,800 --> 00:15:12,720
and we have our um

438
00:15:12,720 --> 00:15:16,079
right so we have your treasure

439
00:15:16,560 --> 00:15:18,000
zoom in on that

440
00:15:18,000 --> 00:15:19,760
um so it's just yeah i haven't really

441
00:15:19,760 --> 00:15:21,839
set it up um yet so

442
00:15:21,839 --> 00:15:24,160
what we're going to do now is i'm going

443
00:15:24,160 --> 00:15:26,560
to use a fault injection tool

444
00:15:26,560 --> 00:15:28,800
so this thing here is just basically

445
00:15:28,800 --> 00:15:30,720
charging a voltage that it's putting

446
00:15:30,720 --> 00:15:31,680
into

447
00:15:31,680 --> 00:15:33,680
this tip and so when it goes into the

448
00:15:33,680 --> 00:15:35,920
tip we'll put this over the device and

449
00:15:35,920 --> 00:15:37,199
you'll see

450
00:15:37,199 --> 00:15:39,279
um sort of incorrect you know so we can

451
00:15:39,279 --> 00:15:42,399
crop memory it can do all sorts of stuff

452
00:15:42,399 --> 00:15:44,160
so

453
00:15:44,160 --> 00:15:46,240
it's going to be a very straightforward

454
00:15:46,240 --> 00:15:48,560
demo

455
00:15:50,480 --> 00:15:52,959
and i'm just going to kind of hold it

456
00:15:52,959 --> 00:15:55,040
over this when i hit it

457
00:15:55,040 --> 00:15:58,160
right and what you'll see

458
00:15:58,959 --> 00:16:00,639
is that you might see various you'll see

459
00:16:00,639 --> 00:16:02,160
you normally see the device like reboot

460
00:16:02,160 --> 00:16:04,399
and stuff like that um but you may also

461
00:16:04,399 --> 00:16:06,079
see right so like there you have this

462
00:16:06,079 --> 00:16:07,920
stack smashing detected so we've

463
00:16:07,920 --> 00:16:10,240
actually tripped some of the um

464
00:16:10,240 --> 00:16:12,000
the protection in it so you'll see all

465
00:16:12,000 --> 00:16:13,680
sorts of faults inserted

466
00:16:13,680 --> 00:16:15,839
um and so some of this can be like her

467
00:16:15,839 --> 00:16:17,680
fault you know some of this can be

468
00:16:17,680 --> 00:16:19,839
memory corruption code flow corruption

469
00:16:19,839 --> 00:16:21,040
there's all sorts of effects you can

470
00:16:21,040 --> 00:16:23,040
have so it's it's not

471
00:16:23,040 --> 00:16:25,680
incredibly scientific a lot of the time

472
00:16:25,680 --> 00:16:27,199
but it turns out that it's highly

473
00:16:27,199 --> 00:16:29,199
effective and i'll show you the being

474
00:16:29,199 --> 00:16:31,040
highly effective on this type of device

475
00:16:31,040 --> 00:16:32,800
too

476
00:16:32,800 --> 00:16:34,399
so basically what i did is i used that

477
00:16:34,399 --> 00:16:36,160
setup i just showed you so i used the

478
00:16:36,160 --> 00:16:38,160
chip shutter tool

479
00:16:38,160 --> 00:16:40,160
put it over top of a chip sent the

480
00:16:40,160 --> 00:16:42,480
password at the time i got the password

481
00:16:42,480 --> 00:16:43,759
and i kind of had that timing from the

482
00:16:43,759 --> 00:16:46,639
power analysis insert a fault

483
00:16:46,639 --> 00:16:48,800
and what you want to see is did it

484
00:16:48,800 --> 00:16:51,199
accept so if i take the wrong code path

485
00:16:51,199 --> 00:16:52,880
it actually accepts that password so

486
00:16:52,880 --> 00:16:54,959
even though the password was incorrect

487
00:16:54,959 --> 00:16:57,759
it thinks it's correct um and we were

488
00:16:57,759 --> 00:16:59,680
happy right that's exactly what we want

489
00:16:59,680 --> 00:17:00,720
to do

490
00:17:00,720 --> 00:17:02,880
so i compared this so i use that first

491
00:17:02,880 --> 00:17:05,520
that board that i was showing you um a

492
00:17:05,520 --> 00:17:07,039
moment ago right that way i was doing

493
00:17:07,039 --> 00:17:08,640
power analysis on this is my own dev

494
00:17:08,640 --> 00:17:11,199
board designed for this work but the

495
00:17:11,199 --> 00:17:12,559
sort of interesting thing is not just

496
00:17:12,559 --> 00:17:14,959
you know can we do it at all a can we do

497
00:17:14,959 --> 00:17:16,959
it on like an off-the-shelf dev board so

498
00:17:16,959 --> 00:17:19,119
i also compared this on the dev board

499
00:17:19,119 --> 00:17:21,359
provided by nxp

500
00:17:21,359 --> 00:17:22,720
this is interesting because this would

501
00:17:22,720 --> 00:17:24,959
mean this is like the type of board that

502
00:17:24,959 --> 00:17:27,199
a developer would use

503
00:17:27,199 --> 00:17:31,440
we also had the actual ecu so this is

504
00:17:31,440 --> 00:17:33,679
the ecu

505
00:17:33,679 --> 00:17:35,200
pull you know from a car so you can see

506
00:17:35,200 --> 00:17:37,919
the microcontrollers on there and i kind

507
00:17:37,919 --> 00:17:39,919
of have some test points attached to it

508
00:17:39,919 --> 00:17:41,360
right

509
00:17:41,360 --> 00:17:43,280
various spots so i basically have like

510
00:17:43,280 --> 00:17:46,240
the serial console goes to a chip so i

511
00:17:46,240 --> 00:17:47,760
click off that

512
00:17:47,760 --> 00:17:49,280
there's some pads with the reset pins

513
00:17:49,280 --> 00:17:51,280
and stuff like that

514
00:17:51,280 --> 00:17:53,200
and finally i compare the success rate

515
00:17:53,200 --> 00:17:54,240
on

516
00:17:54,240 --> 00:17:56,760
a similar device the

517
00:17:56,760 --> 00:17:59,200
mpc5566 so it's similar not the exact

518
00:17:59,200 --> 00:18:01,200
same device because the other question

519
00:18:01,200 --> 00:18:03,200
is i mentioned earlier right these have

520
00:18:03,200 --> 00:18:06,080
a lot of variations you know even within

521
00:18:06,080 --> 00:18:08,640
the the same family so how well does

522
00:18:08,640 --> 00:18:10,640
this attack translate between different

523
00:18:10,640 --> 00:18:11,679
devices

524
00:18:11,679 --> 00:18:12,880
um because they don't just want to show

525
00:18:12,880 --> 00:18:14,640
you hey it's you know it's cool i can

526
00:18:14,640 --> 00:18:17,280
attack one device great but what does

527
00:18:17,280 --> 00:18:18,880
that tell you to someone designing it

528
00:18:18,880 --> 00:18:21,120
someone evaluating a system so i tried

529
00:18:21,120 --> 00:18:23,600
to evaluate this across many devices to

530
00:18:23,600 --> 00:18:25,280
give you a better feel for how

531
00:18:25,280 --> 00:18:28,080
repeatable these results were

532
00:18:28,080 --> 00:18:29,760
and we could basically break down the

533
00:18:29,760 --> 00:18:32,000
results into a few different classes so

534
00:18:32,000 --> 00:18:33,600
i mentioned that bootloader protocol

535
00:18:33,600 --> 00:18:35,679
before so we can detect stuff because of

536
00:18:35,679 --> 00:18:37,440
that protocol

537
00:18:37,440 --> 00:18:39,360
really simply like the device reset so

538
00:18:39,360 --> 00:18:40,559
if i see it

539
00:18:40,559 --> 00:18:42,799
is in looking for the initial

540
00:18:42,799 --> 00:18:45,440
synchronization i know it reset

541
00:18:45,440 --> 00:18:47,280
normal means it did not accept the wrong

542
00:18:47,280 --> 00:18:48,480
password

543
00:18:48,480 --> 00:18:51,120
we have some protocol and other errors

544
00:18:51,120 --> 00:18:53,120
so protocol errors mean something got

545
00:18:53,120 --> 00:18:55,200
corrupted on the transfer which we we

546
00:18:55,200 --> 00:18:56,559
don't want because then you know we're

547
00:18:56,559 --> 00:18:59,039
not able to download it um the other one

548
00:18:59,039 --> 00:18:59,760
that

549
00:18:59,760 --> 00:19:02,000
has some overlap is what i call run fail

550
00:19:02,000 --> 00:19:04,080
where it looks like it works but it

551
00:19:04,080 --> 00:19:05,679
didn't work in the end right so like the

552
00:19:05,679 --> 00:19:07,440
code didn't run

553
00:19:07,440 --> 00:19:09,600
or the code ran but it wasn't able to

554
00:19:09,600 --> 00:19:11,440
read the internal flash memory which is

555
00:19:11,440 --> 00:19:13,520
what we really want

556
00:19:13,520 --> 00:19:15,440
so these could be corruption these could

557
00:19:15,440 --> 00:19:17,360
be like the device wasn't as

558
00:19:17,360 --> 00:19:19,520
wasn't unlocked like i planned so

559
00:19:19,520 --> 00:19:21,760
finally we get success where it download

560
00:19:21,760 --> 00:19:23,120
it accepts the password the code

561
00:19:23,120 --> 00:19:24,960
downloads the code runs and it has

562
00:19:24,960 --> 00:19:27,200
access to the internal flash memory

563
00:19:27,200 --> 00:19:30,240
um so in the the full paper which i'll

564
00:19:30,240 --> 00:19:32,799
link i also go through you know it's

565
00:19:32,799 --> 00:19:34,400
easy to get false positives where the

566
00:19:34,400 --> 00:19:36,160
code does download but it doesn't

567
00:19:36,160 --> 00:19:37,840
actually execute

568
00:19:37,840 --> 00:19:39,440
so you have to be a bit careful to make

569
00:19:39,440 --> 00:19:41,760
sure you are getting a success like you

570
00:19:41,760 --> 00:19:43,600
think

571
00:19:43,600 --> 00:19:45,679
so here's the results across

572
00:19:45,679 --> 00:19:49,039
i mentioned those four devices so

573
00:19:49,039 --> 00:19:50,640
the

574
00:19:50,640 --> 00:19:54,240
308 is that custom dev kit the 5676 is

575
00:19:54,240 --> 00:19:57,200
that off-the-shelf dev kit um and all of

576
00:19:57,200 --> 00:19:58,559
these and there's some variations

577
00:19:58,559 --> 00:20:00,320
between what password i tried to send to

578
00:20:00,320 --> 00:20:02,320
see if that mattered you're like one to

579
00:20:02,320 --> 00:20:04,000
two percent success rate right which

580
00:20:04,000 --> 00:20:05,760
maybe doesn't sound like a lot but if

581
00:20:05,760 --> 00:20:08,159
you think i can send 100 tries you know

582
00:20:08,159 --> 00:20:09,200
if i send

583
00:20:09,200 --> 00:20:10,720
one it takes about a second or two

584
00:20:10,720 --> 00:20:13,280
seconds um you can basically get a

585
00:20:13,280 --> 00:20:15,440
success pretty quickly right so so these

586
00:20:15,440 --> 00:20:17,600
are pretty reasonable success rates

587
00:20:17,600 --> 00:20:20,320
um the other one is there's a series of

588
00:20:20,320 --> 00:20:22,720
information on the e41 so this is where

589
00:20:22,720 --> 00:20:25,120
i had the real ecu

590
00:20:25,120 --> 00:20:26,720
and so the difference

591
00:20:26,720 --> 00:20:29,200
here is i actually had an interesting uh

592
00:20:29,200 --> 00:20:32,320
result where i got zero successes at

593
00:20:32,320 --> 00:20:33,600
first

594
00:20:33,600 --> 00:20:36,080
with the same coil that was used on the

595
00:20:36,080 --> 00:20:38,000
dev kit so when you're doing emfi

596
00:20:38,000 --> 00:20:39,520
there's a lot of different

597
00:20:39,520 --> 00:20:40,720
variables

598
00:20:40,720 --> 00:20:42,080
one of them if i go back to you know

599
00:20:42,080 --> 00:20:44,320
what is the emf i there's actually the

600
00:20:44,320 --> 00:20:46,480
direction of this this coil winding so

601
00:20:46,480 --> 00:20:48,640
this impacts the polarity of the pulse

602
00:20:48,640 --> 00:20:51,280
that gets inserted into the device

603
00:20:51,280 --> 00:20:52,400
so

604
00:20:52,400 --> 00:20:54,159
it turned out that that mattered more

605
00:20:54,159 --> 00:20:56,640
than i thought because what i was seeing

606
00:20:56,640 --> 00:20:57,840
is that

607
00:20:57,840 --> 00:21:00,559
on the dev kits it worked just fine on

608
00:21:00,559 --> 00:21:02,480
the real board it didn't work and it

609
00:21:02,480 --> 00:21:04,320
came down to actually needed the

610
00:21:04,320 --> 00:21:07,200
opposite polarity so another point sort

611
00:21:07,200 --> 00:21:09,039
of take home here is to show that you

612
00:21:09,039 --> 00:21:10,799
know it is important to evaluate these

613
00:21:10,799 --> 00:21:12,799
devices across kind of a wide variety of

614
00:21:12,799 --> 00:21:14,400
settings

615
00:21:14,400 --> 00:21:17,600
finally i use the the similar the 5566

616
00:21:17,600 --> 00:21:19,679
device um again another sort of

617
00:21:19,679 --> 00:21:22,000
interesting result here was that um it

618
00:21:22,000 --> 00:21:23,919
was highly successful for one of the

619
00:21:23,919 --> 00:21:26,400
password configurations um so i tried

620
00:21:26,400 --> 00:21:28,559
sending different incorrect passwords um

621
00:21:28,559 --> 00:21:30,159
so it was highly successful for one of

622
00:21:30,159 --> 00:21:31,919
them but not successful for the other

623
00:21:31,919 --> 00:21:34,799
and that was not the case on you know

624
00:21:34,799 --> 00:21:36,400
the ecu

625
00:21:36,400 --> 00:21:38,880
for the ecu it was actually pretty

626
00:21:38,880 --> 00:21:41,679
similar between the two of them um right

627
00:21:41,679 --> 00:21:42,720
so

628
00:21:42,720 --> 00:21:45,520
for the ecu i sent this one one two to a

629
00:21:45,520 --> 00:21:48,320
private password and that would work

630
00:21:48,320 --> 00:21:50,000
for the ecu i could also send the public

631
00:21:50,000 --> 00:21:52,000
password incorrectly that would work

632
00:21:52,000 --> 00:21:54,400
for this 5566 only sending the public

633
00:21:54,400 --> 00:21:55,760
password when it shouldn't accept it

634
00:21:55,760 --> 00:21:58,240
seemed to work so

635
00:21:58,240 --> 00:21:59,520
this is you know one of the really

636
00:21:59,520 --> 00:22:00,960
interesting things with fault direction

637
00:22:00,960 --> 00:22:03,679
is it's not perhaps as scientific

638
00:22:03,679 --> 00:22:05,360
so it's really important to sort of

639
00:22:05,360 --> 00:22:07,120
figure out what your search space is and

640
00:22:07,120 --> 00:22:08,559
make sure you're trying to cover that

641
00:22:08,559 --> 00:22:10,880
because if i had only tried one coil

642
00:22:10,880 --> 00:22:13,039
winding on the e41 ecu and hadn't tried

643
00:22:13,039 --> 00:22:14,880
the dev kits i might have thought you

644
00:22:14,880 --> 00:22:16,480
know hey this is actually not going to

645
00:22:16,480 --> 00:22:18,400
work at all but it turns out it works

646
00:22:18,400 --> 00:22:19,520
really well

647
00:22:19,520 --> 00:22:21,120
so that's sort of one of the the other

648
00:22:21,120 --> 00:22:23,360
take homes here

649
00:22:23,360 --> 00:22:25,280
the other thing i wanted to experiment

650
00:22:25,280 --> 00:22:26,640
with was

651
00:22:26,640 --> 00:22:28,240
well okay this is great i'm using that

652
00:22:28,240 --> 00:22:30,559
jupiter notebook like i showed you um

653
00:22:30,559 --> 00:22:32,799
what if what's the real threat here the

654
00:22:32,799 --> 00:22:35,600
real threat is people like cartooners

655
00:22:35,600 --> 00:22:38,480
you know garages that are using this um

656
00:22:38,480 --> 00:22:40,799
they probably aren't going to want a you

657
00:22:40,799 --> 00:22:43,919
know uh sorry a uh jupiter-powered

658
00:22:43,919 --> 00:22:46,799
python script so i wanted to show this

659
00:22:46,799 --> 00:22:49,679
with a more sort of standalone setup um

660
00:22:49,679 --> 00:22:51,760
and to do this i i also wanted to

661
00:22:51,760 --> 00:22:53,440
demonstrate it's you know not incredibly

662
00:22:53,440 --> 00:22:55,200
complex the most expensive part of

663
00:22:55,200 --> 00:22:56,159
course

664
00:22:56,159 --> 00:22:58,880
is the emfi tool there are open source

665
00:22:58,880 --> 00:23:02,640
and other emfi tools like bad fat um

666
00:23:02,640 --> 00:23:04,320
have been presented there's a few few

667
00:23:04,320 --> 00:23:06,640
different ones now so that's

668
00:23:06,640 --> 00:23:08,080
really you know the by far the most

669
00:23:08,080 --> 00:23:10,240
expensive part not the controller but

670
00:23:10,240 --> 00:23:11,679
the controller doesn't have to be very

671
00:23:11,679 --> 00:23:14,159
complicated so i use an arduino it

672
00:23:14,159 --> 00:23:15,919
understands that protocol so that boot

673
00:23:15,919 --> 00:23:18,320
loader protocol i showed you

674
00:23:18,320 --> 00:23:21,280
it can talk to the ecu send a password

675
00:23:21,280 --> 00:23:23,760
generate a pulse to trigger the mfi the

676
00:23:23,760 --> 00:23:25,760
timing wasn't super specific

677
00:23:25,760 --> 00:23:27,039
so it would actually work really well it

678
00:23:27,039 --> 00:23:29,200
can give you some feedback and when it

679
00:23:29,200 --> 00:23:31,200
successfully executes it reads the

680
00:23:31,200 --> 00:23:34,799
password back as it's printed out

681
00:23:34,799 --> 00:23:36,640
i took that a little step further so i

682
00:23:36,640 --> 00:23:38,799
also made this um

683
00:23:38,799 --> 00:23:40,559
this set up here and so you basically

684
00:23:40,559 --> 00:23:42,880
have uh in so this was also some in

685
00:23:42,880 --> 00:23:44,799
progress work on like this chip shower

686
00:23:44,799 --> 00:23:47,679
this xy table so there's a controller

687
00:23:47,679 --> 00:23:49,600
you can see it's like half open because

688
00:23:49,600 --> 00:23:51,120
i'm still working on it

689
00:23:51,120 --> 00:23:52,880
there but basically you have like a

690
00:23:52,880 --> 00:23:54,720
similar idea but even slightly more

691
00:23:54,720 --> 00:23:57,039
advanced so if we switch back to this

692
00:23:57,039 --> 00:23:58,480
other camera here

693
00:23:58,480 --> 00:24:01,360
i can show you here i left it

694
00:24:01,360 --> 00:24:02,480
connected

695
00:24:02,480 --> 00:24:04,240
i'm not going to run at all because you

696
00:24:04,240 --> 00:24:06,480
know it takes a little bit

697
00:24:06,480 --> 00:24:07,919
to run this thing

698
00:24:07,919 --> 00:24:10,000
then i can show you that you basically

699
00:24:10,000 --> 00:24:12,880
have like a setup where we have a ecu

700
00:24:12,880 --> 00:24:14,640
that can be kind of mounted

701
00:24:14,640 --> 00:24:16,720
right i have an arduino controlling it

702
00:24:16,720 --> 00:24:18,400
so we can go ahead and

703
00:24:18,400 --> 00:24:21,039
plug that guy in

704
00:24:21,039 --> 00:24:22,799
so we'll power up

705
00:24:22,799 --> 00:24:25,840
right and so it'll talk to the ecu try

706
00:24:25,840 --> 00:24:28,159
to detect if it's running or not

707
00:24:28,159 --> 00:24:29,840
on the flip side so in this case what i

708
00:24:29,840 --> 00:24:31,120
was doing actually is i found the

709
00:24:31,120 --> 00:24:32,880
positioning wasn't

710
00:24:32,880 --> 00:24:35,440
super specific um but you can set this

711
00:24:35,440 --> 00:24:38,000
up of course to like

712
00:24:38,000 --> 00:24:39,440
scan across

713
00:24:39,440 --> 00:24:41,360
the surface so there's obviously lots

714
00:24:41,360 --> 00:24:42,240
more

715
00:24:42,240 --> 00:24:44,080
we can do here

716
00:24:44,080 --> 00:24:45,840
that's kind of one of the the other in

717
00:24:45,840 --> 00:24:47,360
progress

718
00:24:47,360 --> 00:24:49,520
so yeah that's like a really fast

719
00:24:49,520 --> 00:24:51,840
overview of how this attack worked um

720
00:24:51,840 --> 00:24:53,200
how the

721
00:24:53,200 --> 00:24:54,640
uh

722
00:24:54,640 --> 00:24:56,400
how the fault injection on this device

723
00:24:56,400 --> 00:24:57,919
worked how the bootloader works and how

724
00:24:57,919 --> 00:25:00,080
i actually discovered some of this so if

725
00:25:00,080 --> 00:25:02,080
you're curious i've i've got a lot of

726
00:25:02,080 --> 00:25:04,159
resources here for you

727
00:25:04,159 --> 00:25:06,000
so the video links that i showed earlier

728
00:25:06,000 --> 00:25:08,000
go over some of my process

729
00:25:08,000 --> 00:25:09,840
there's a link to my blog post where i

730
00:25:09,840 --> 00:25:11,200
talk about this

731
00:25:11,200 --> 00:25:13,200
and i have a longer paper explaining

732
00:25:13,200 --> 00:25:14,720
some of the timings and other stuff as

733
00:25:14,720 --> 00:25:16,799
well so i've linked that below

734
00:25:16,799 --> 00:25:19,039
um general related material so if you're

735
00:25:19,039 --> 00:25:20,480
kind of curious you know about fault

736
00:25:20,480 --> 00:25:22,240
injection power analysis

737
00:25:22,240 --> 00:25:24,720
um the chip whisperer repo has several

738
00:25:24,720 --> 00:25:27,679
tutorials that go over this topic

739
00:25:27,679 --> 00:25:29,200
the upcoming book of course i'm going to

740
00:25:29,200 --> 00:25:31,840
plug that as much as i can now

741
00:25:31,840 --> 00:25:33,919
and finally there's this other app note

742
00:25:33,919 --> 00:25:35,679
i wrote here that might be sort of

743
00:25:35,679 --> 00:25:37,120
interesting this also talks a bit about

744
00:25:37,120 --> 00:25:38,799
safety testing

745
00:25:38,799 --> 00:25:40,480
but it's looking at emfi and actually

746
00:25:40,480 --> 00:25:42,720
how it relates to

747
00:25:42,720 --> 00:25:44,240
fault injection that is actually

748
00:25:44,240 --> 00:25:46,080
commonly used for safety testing

749
00:25:46,080 --> 00:25:47,520
automotive so if you're coming from an

750
00:25:47,520 --> 00:25:49,679
automotive environment um you might

751
00:25:49,679 --> 00:25:51,120
actually already be familiar with some

752
00:25:51,120 --> 00:25:52,960
of the terms used it's just been wrapped

753
00:25:52,960 --> 00:25:54,640
a different way so this white paper goes

754
00:25:54,640 --> 00:25:57,520
over some of those combinations but

755
00:25:57,520 --> 00:25:59,279
thanks so much hopefully we have some

756
00:25:59,279 --> 00:26:02,080
time now for questions and you can reach

757
00:26:02,080 --> 00:26:04,320
out to me also on twitter afterwards if

758
00:26:04,320 --> 00:26:05,600
you have other

759
00:26:05,600 --> 00:26:09,719
questions that i didn't cover here

