1
00:00:01,130 --> 00:00:14,690
[Music]

2
00:00:14,960 --> 00:00:17,440
all right let's start the presentation

3
00:00:17,440 --> 00:00:19,520
thank you for attending my talk i am

4
00:00:19,520 --> 00:00:21,840
xung han and very pleased to share my

5
00:00:21,840 --> 00:00:24,560
research at black usa

6
00:00:24,560 --> 00:00:26,960
in this presentation i'm going to talk

7
00:00:26,960 --> 00:00:30,000
about my new tool alcatraz that prevents

8
00:00:30,000 --> 00:00:33,600
escapes from the kvm qemu and kvm based

9
00:00:33,600 --> 00:00:36,000
micro vms

10
00:00:36,000 --> 00:00:37,920
i am a senior skill researcher at the

11
00:00:37,920 --> 00:00:40,559
affiliated institute of etri

12
00:00:40,559 --> 00:00:42,559
i'm a review board member of blackhead

13
00:00:42,559 --> 00:00:45,360
asia and kimchicon conference

14
00:00:45,360 --> 00:00:47,360
i was a speaker at several conferences

15
00:00:47,360 --> 00:00:49,920
like eugenic security like acr and

16
00:00:49,920 --> 00:00:52,480
europe again the boxing conference and

17
00:00:52,480 --> 00:00:53,840
more

18
00:00:53,840 --> 00:00:55,600
additionally i'm a debian linux

19
00:00:55,600 --> 00:00:56,960
maintainer

20
00:00:56,960 --> 00:00:58,879
and have been taking care of packages

21
00:00:58,879 --> 00:01:00,719
related to cpu

22
00:01:00,719 --> 00:01:03,039
and advanced configuration and power

23
00:01:03,039 --> 00:01:04,400
interface

24
00:01:04,400 --> 00:01:06,640
i have contributed several linux kernel

25
00:01:06,640 --> 00:01:09,360
patches too

26
00:01:09,439 --> 00:01:11,600
goal of this talk is that

27
00:01:11,600 --> 00:01:14,400
i present

28
00:01:14,400 --> 00:01:17,920
escape paths of kvm qmu and kvm based

29
00:01:17,920 --> 00:01:19,759
micro vms

30
00:01:19,759 --> 00:01:22,320
kvm based hypervisors are

31
00:01:22,320 --> 00:01:25,759
widely used from vms to containers but

32
00:01:25,759 --> 00:01:28,799
kvm has higher privilege than the corner

33
00:01:28,799 --> 00:01:32,960
and the attacker can use it for its case

34
00:01:32,960 --> 00:01:35,759
so i made a new tool alcatraz

35
00:01:35,759 --> 00:01:38,640
and introduced it to prevent escapes it

36
00:01:38,640 --> 00:01:42,000
downgrades kvm's privilege to the guest

37
00:01:42,000 --> 00:01:43,280
hypervisor

38
00:01:43,280 --> 00:01:45,680
it makes a sandbox for

39
00:01:45,680 --> 00:01:48,159
the kpm and monitored system course to

40
00:01:48,159 --> 00:01:51,200
prevent escapes such as unauthorized

41
00:01:51,200 --> 00:01:52,799
process creation counter code

42
00:01:52,799 --> 00:01:55,730
modification and privilege escalation

43
00:01:55,730 --> 00:01:57,680
[Music]

44
00:01:57,680 --> 00:01:59,119
before the talk

45
00:01:59,119 --> 00:02:01,759
i would like to tell you a short story

46
00:02:01,759 --> 00:02:03,439
related to this presentation and

47
00:02:03,439 --> 00:02:04,880
research

48
00:02:04,880 --> 00:02:07,439
once upon a time there was a young skit

49
00:02:07,439 --> 00:02:08,639
researcher

50
00:02:08,639 --> 00:02:12,160
uh i said just young secret researcher

51
00:02:12,160 --> 00:02:13,360
that means

52
00:02:13,360 --> 00:02:16,160
he was not ceo or cto

53
00:02:16,160 --> 00:02:17,840
and

54
00:02:17,840 --> 00:02:20,840
not even new cso or managers

55
00:02:20,840 --> 00:02:23,520
yeah he was just a young secret

56
00:02:23,520 --> 00:02:27,120
researcher so he was over there and just

57
00:02:27,120 --> 00:02:30,160
enjoyed his hacking life

58
00:02:30,160 --> 00:02:33,040
in those days all cloud platforms were

59
00:02:33,040 --> 00:02:35,599
based on virtual machine technology

60
00:02:35,599 --> 00:02:36,640
however

61
00:02:36,640 --> 00:02:39,760
devops and serverless architectures

62
00:02:39,760 --> 00:02:43,440
immersed and the cloud platforms had to

63
00:02:43,440 --> 00:02:46,879
support new container based technology

64
00:02:46,879 --> 00:02:49,680
to meet these needs amazon microsoft

65
00:02:49,680 --> 00:02:52,720
google provided container services and

66
00:02:52,720 --> 00:02:54,560
service functions like

67
00:02:54,560 --> 00:02:57,200
amazon lambda azure function and google

68
00:02:57,200 --> 00:02:59,920
cloud function

69
00:02:59,920 --> 00:03:01,200
wow

70
00:03:01,200 --> 00:03:03,920
it seemed like a new era of cloud

71
00:03:03,920 --> 00:03:05,760
platform had come

72
00:03:05,760 --> 00:03:08,319
so he thought the container would load

73
00:03:08,319 --> 00:03:11,920
the flat pump soon

74
00:03:13,200 --> 00:03:16,400
wait a second but how

75
00:03:16,400 --> 00:03:18,560
maybe we need to check virtual machine

76
00:03:18,560 --> 00:03:20,480
architecture and container architecture

77
00:03:20,480 --> 00:03:23,680
before we go further to history

78
00:03:23,680 --> 00:03:25,920
the wrapped site is a virtual motion

79
00:03:25,920 --> 00:03:27,120
architecture

80
00:03:27,120 --> 00:03:30,080
it has a hypervisor and hypervisor max

81
00:03:30,080 --> 00:03:31,840
vms

82
00:03:31,840 --> 00:03:33,440
make

83
00:03:33,440 --> 00:03:36,159
their they have their own os as well as

84
00:03:36,159 --> 00:03:40,159
guest os applications learn on it

85
00:03:40,159 --> 00:03:43,360
in contrast the container architecture

86
00:03:43,360 --> 00:03:46,159
only has supporting files and long time

87
00:03:46,159 --> 00:03:47,760
for each container

88
00:03:47,760 --> 00:03:50,400
applications loan on them with a shared

89
00:03:50,400 --> 00:03:52,720
link scanner

90
00:03:52,720 --> 00:03:54,000
the differences

91
00:03:54,000 --> 00:03:56,720
are available one thing is the isolation

92
00:03:56,720 --> 00:03:58,159
technique

93
00:03:58,159 --> 00:04:02,000
the other is the execution environment

94
00:04:02,000 --> 00:04:03,920
let's see more details

95
00:04:03,920 --> 00:04:06,400
vm architecture uses virtual motion

96
00:04:06,400 --> 00:04:08,400
monitor as well as

97
00:04:08,400 --> 00:04:10,319
a high provider

98
00:04:10,319 --> 00:04:12,480
vm architecture provides strong

99
00:04:12,480 --> 00:04:15,840
isolation with the hypervisor however

100
00:04:15,840 --> 00:04:17,680
full operating system is needed and

101
00:04:17,680 --> 00:04:19,918
performance overhead is high

102
00:04:19,918 --> 00:04:22,479
it also has its own execution

103
00:04:22,479 --> 00:04:26,080
environment such as corner and airspace

104
00:04:26,080 --> 00:04:28,960
in contrast container architecture uses

105
00:04:28,960 --> 00:04:31,600
namespace and c group features of linux

106
00:04:31,600 --> 00:04:34,479
corner container architecture provides

107
00:04:34,479 --> 00:04:37,440
weak isolation so just supporting

108
00:04:37,440 --> 00:04:39,360
files are needed and performance

109
00:04:39,360 --> 00:04:42,240
overhead is low

110
00:04:42,240 --> 00:04:44,000
it means that

111
00:04:44,000 --> 00:04:47,360
if an attacker has a counter pre control

112
00:04:47,360 --> 00:04:49,840
vulnerability

113
00:04:49,840 --> 00:04:52,880
he or she can escape from the container

114
00:04:52,880 --> 00:04:56,320
and also separate the hosts and other

115
00:04:56,320 --> 00:04:58,880
containers

116
00:04:58,880 --> 00:05:02,400
all right let's go back to history

117
00:05:02,400 --> 00:05:05,039
cloud vendors and researchers including

118
00:05:05,039 --> 00:05:07,919
him also knew the problem of container

119
00:05:07,919 --> 00:05:10,720
technology but containers were

120
00:05:10,720 --> 00:05:13,840
indispensable and strong isolation was

121
00:05:13,840 --> 00:05:17,520
needed to prevent escapes

122
00:05:18,080 --> 00:05:21,199
to overcome the problem they mixed

123
00:05:21,199 --> 00:05:24,800
container technology and hypervisor then

124
00:05:24,800 --> 00:05:27,280
new things were born

125
00:05:27,280 --> 00:05:29,199
they were containers but had a

126
00:05:29,199 --> 00:05:30,880
hypervisor

127
00:05:30,880 --> 00:05:32,000
it meant

128
00:05:32,000 --> 00:05:36,080
they were some hybrid things

129
00:05:36,080 --> 00:05:38,720
the young and poor security searcher was

130
00:05:38,720 --> 00:05:40,240
confused

131
00:05:40,240 --> 00:05:41,360
and

132
00:05:41,360 --> 00:05:44,160
even he didn't know how to call them

133
00:05:44,160 --> 00:05:46,720
correctly

134
00:05:46,720 --> 00:05:48,400
he thought about it

135
00:05:48,400 --> 00:05:51,360
all day and night and he finally

136
00:05:51,360 --> 00:05:54,160
found out that

137
00:05:55,759 --> 00:05:59,919
to be a container or not to be a

138
00:05:59,919 --> 00:06:01,360
container

139
00:06:01,360 --> 00:06:04,319
that's not the question

140
00:06:04,319 --> 00:06:06,400
the real question is

141
00:06:06,400 --> 00:06:10,799
how can we prevent this case

142
00:06:11,600 --> 00:06:12,880
after that

143
00:06:12,880 --> 00:06:15,600
he started his long and painful journey

144
00:06:15,600 --> 00:06:18,240
to find the answer as you guess

145
00:06:18,240 --> 00:06:21,840
the skill researcher is me and this is

146
00:06:21,840 --> 00:06:24,080
my

147
00:06:24,319 --> 00:06:27,120
exciting journey

148
00:06:28,240 --> 00:06:30,479
this is content

149
00:06:30,479 --> 00:06:33,039
and background

150
00:06:33,039 --> 00:06:35,919
before explaining my new tool alcatraz

151
00:06:35,919 --> 00:06:38,080
let's check the hybrid technology the

152
00:06:38,080 --> 00:06:40,800
first one is kata container kata

153
00:06:40,800 --> 00:06:43,199
container has a simple architecture it

154
00:06:43,199 --> 00:06:46,639
uses vms to make secure containers it

155
00:06:46,639 --> 00:06:49,919
learns a container on the vm so it has

156
00:06:49,919 --> 00:06:52,400
strong isolation and high performance

157
00:06:52,400 --> 00:06:54,000
overhead

158
00:06:54,000 --> 00:06:57,440
cutter container can support various vms

159
00:06:57,440 --> 00:07:00,960
such as qemu amazon firecracker and

160
00:07:00,960 --> 00:07:03,199
inter-cloud hypervisor

161
00:07:03,199 --> 00:07:05,840
the important point is that kvm is the

162
00:07:05,840 --> 00:07:07,840
core

163
00:07:07,840 --> 00:07:10,800
amazons firecracker is a new open source

164
00:07:10,800 --> 00:07:13,440
hypervisor specialized for servers

165
00:07:13,440 --> 00:07:17,360
workloads and containers it replaces qem

166
00:07:17,360 --> 00:07:20,880
new and makes a new type vm called micro

167
00:07:20,880 --> 00:07:21,919
vm

168
00:07:21,919 --> 00:07:25,680
micro vm has its own device model and

169
00:07:25,680 --> 00:07:27,520
has minimal setup

170
00:07:27,520 --> 00:07:29,440
the customized corner and loot bar

171
00:07:29,440 --> 00:07:31,680
system

172
00:07:31,680 --> 00:07:34,080
as you see firecracker also leverages

173
00:07:34,080 --> 00:07:35,919
kvm

174
00:07:35,919 --> 00:07:38,560
google gfixers is an application corner

175
00:07:38,560 --> 00:07:41,520
for containers it limits the host corner

176
00:07:41,520 --> 00:07:45,599
surface accessible to the application

177
00:07:45,599 --> 00:07:48,400
g by just corner sentry provides corner

178
00:07:48,400 --> 00:07:52,080
services to the application but it runs

179
00:07:52,080 --> 00:07:54,639
as a user process and has

180
00:07:54,639 --> 00:07:56,080
many more setup

181
00:07:56,080 --> 00:07:58,720
corner and fire services

182
00:07:58,720 --> 00:08:02,560
gvisor uses kbm to intercept system core

183
00:08:02,560 --> 00:08:06,000
requests of the application

184
00:08:06,000 --> 00:08:08,800
as i mentioned before all hybrid

185
00:08:08,800 --> 00:08:11,599
architectures are leveraged kvm and this

186
00:08:11,599 --> 00:08:14,639
is the architecture

187
00:08:14,639 --> 00:08:15,840
there are

188
00:08:15,840 --> 00:08:18,319
some strange points like

189
00:08:18,319 --> 00:08:20,960
host corner has link zero privilege

190
00:08:20,960 --> 00:08:23,440
however kvm has a ring minus one

191
00:08:23,440 --> 00:08:27,360
privilege and it means kvm has more

192
00:08:27,360 --> 00:08:30,000
power than the corner even though it is

193
00:08:30,000 --> 00:08:32,399
a corner module

194
00:08:32,399 --> 00:08:35,599
the more important point is kvm connects

195
00:08:35,599 --> 00:08:38,080
with vm software directly because of

196
00:08:38,080 --> 00:08:41,519
supporting vm services but vms can be

197
00:08:41,519 --> 00:08:45,200
subverted by attacker if they lend or

198
00:08:45,200 --> 00:08:49,440
purchase the vms from the cloud vendors

199
00:08:49,440 --> 00:08:50,640
so

200
00:08:50,640 --> 00:08:53,040
i felt something suspicious

201
00:08:53,040 --> 00:08:57,519
yeah totally something suspicious

202
00:08:57,519 --> 00:09:00,240
the hybrid technology leveraged kvm as a

203
00:09:00,240 --> 00:09:02,959
hypervisor to get strong isolation

204
00:09:02,959 --> 00:09:07,279
however kvm attaches vms tightly and has

205
00:09:07,279 --> 00:09:09,760
ring minus a privilege

206
00:09:09,760 --> 00:09:12,080
it means that the attacker can still

207
00:09:12,080 --> 00:09:13,839
escape from the

208
00:09:13,839 --> 00:09:16,560
vm with the kvm vulnerability and

209
00:09:16,560 --> 00:09:19,200
subvert the system

210
00:09:19,200 --> 00:09:22,240
fortunately i was not the only one who

211
00:09:22,240 --> 00:09:24,080
was worried about the excessive

212
00:09:24,080 --> 00:09:26,480
privilege of a high provider

213
00:09:26,480 --> 00:09:27,760
yeah

214
00:09:27,760 --> 00:09:30,000
there were some researchers and previous

215
00:09:30,000 --> 00:09:31,279
workers that

216
00:09:31,279 --> 00:09:34,720
were already worried about it

217
00:09:34,720 --> 00:09:36,880
these works are related to tracking

218
00:09:36,880 --> 00:09:39,839
hypervisor integrity of our hypervisor

219
00:09:39,839 --> 00:09:42,560
modulator hypersensory hyperguard

220
00:09:42,560 --> 00:09:45,600
deepwatch and hypersec

221
00:09:45,600 --> 00:09:48,399
and here are their core architectures

222
00:09:48,399 --> 00:09:50,720
because of the time limit i should

223
00:09:50,720 --> 00:09:53,600
explain them freely

224
00:09:53,600 --> 00:09:56,399
hypercentric used a system management

225
00:09:56,399 --> 00:09:59,519
mode of formula and baseboard management

226
00:09:59,519 --> 00:10:01,360
controller to check the integrity of

227
00:10:01,360 --> 00:10:03,680
hypervisor because the attacker could

228
00:10:03,680 --> 00:10:05,360
subvert it

229
00:10:05,360 --> 00:10:09,279
hyperguard also used smm to monitor the

230
00:10:09,279 --> 00:10:11,920
integrity of the hypervisor

231
00:10:11,920 --> 00:10:14,399
deepwatch was slightly uh different from

232
00:10:14,399 --> 00:10:16,959
others it aimed to detect hypervisor

233
00:10:16,959 --> 00:10:19,680
level malware and used an embedded

234
00:10:19,680 --> 00:10:22,399
controller and its formula however it

235
00:10:22,399 --> 00:10:24,240
was worried about the excessive

236
00:10:24,240 --> 00:10:27,600
privilege of a hypervisor like others

237
00:10:27,600 --> 00:10:31,519
hyperset retrofitted kvm arm to enhance

238
00:10:31,519 --> 00:10:33,760
the security of kvm

239
00:10:33,760 --> 00:10:36,240
it aimed to reduce geotech surface of

240
00:10:36,240 --> 00:10:38,160
kvm arm

241
00:10:38,160 --> 00:10:40,320
as you know formula multiplication

242
00:10:40,320 --> 00:10:44,000
required special devices and signing

243
00:10:44,000 --> 00:10:45,279
keys

244
00:10:45,279 --> 00:10:48,160
hypervisor retrofit didn't need them but

245
00:10:48,160 --> 00:10:51,920
i didn't want to reinvent the field

246
00:10:51,920 --> 00:10:55,600
so i realized that i have i had no

247
00:10:55,600 --> 00:10:58,560
friends like me

248
00:10:58,560 --> 00:10:59,440
so

249
00:10:59,440 --> 00:11:02,480
i have to find a more more practical

250
00:11:02,480 --> 00:11:04,959
solution

251
00:11:05,040 --> 00:11:07,200
after considering various architectures

252
00:11:07,200 --> 00:11:09,600
and mechanisms i finally got the

253
00:11:09,600 --> 00:11:12,880
solution however unlike others i don't

254
00:11:12,880 --> 00:11:14,399
take a higher ground

255
00:11:14,399 --> 00:11:16,880
instead i downgrade

256
00:11:16,880 --> 00:11:19,040
the kvm's privilege to a guest

257
00:11:19,040 --> 00:11:22,720
hypervisor and make a center box with my

258
00:11:22,720 --> 00:11:25,839
pico hypervisor hyperbox hyperbox

259
00:11:25,839 --> 00:11:29,279
protects host corner and kvm it also

260
00:11:29,279 --> 00:11:32,160
emulates virtual motion extensions or

261
00:11:32,160 --> 00:11:36,079
vmx instructions of kvm so escapes can

262
00:11:36,079 --> 00:11:39,120
be prevented like this

263
00:11:39,120 --> 00:11:41,600
after getting the solution i named it

264
00:11:41,600 --> 00:11:42,880
alcatraz

265
00:11:42,880 --> 00:11:45,600
the rock sensor and the c are mean

266
00:11:45,600 --> 00:11:49,360
hyperbox that prevents escapes

267
00:11:49,360 --> 00:11:51,920
the prison means a sandbox that monitors

268
00:11:51,920 --> 00:11:54,079
kvm

269
00:11:54,079 --> 00:11:56,720
analysis of critical paths of

270
00:11:56,720 --> 00:12:00,240
escape this case

271
00:12:00,720 --> 00:12:03,920
here are cves related to

272
00:12:03,920 --> 00:12:07,839
kvm and qnu since 2013.

273
00:12:07,839 --> 00:12:10,800
there were more than 200 including code

274
00:12:10,800 --> 00:12:13,839
executions privileges collisions denial

275
00:12:13,839 --> 00:12:16,240
of services and

276
00:12:16,240 --> 00:12:17,600
information leaks

277
00:12:17,600 --> 00:12:20,720
but i filtered out those and information

278
00:12:20,720 --> 00:12:23,680
links because they were not related to

279
00:12:23,680 --> 00:12:25,839
ice caves

280
00:12:25,839 --> 00:12:28,480
i'd like to explain them one by one for

281
00:12:28,480 --> 00:12:31,120
you however if then you might be

282
00:12:31,120 --> 00:12:32,560
confused

283
00:12:32,560 --> 00:12:34,160
unfortunately

284
00:12:34,160 --> 00:12:36,880
i and unfortunately i have not enough

285
00:12:36,880 --> 00:12:38,560
time for that

286
00:12:38,560 --> 00:12:39,600
so

287
00:12:39,600 --> 00:12:43,210
i categorized cves into four parts

288
00:12:43,210 --> 00:12:44,480
[Music]

289
00:12:44,480 --> 00:12:46,959
the first one is called execution with a

290
00:12:46,959 --> 00:12:48,800
kvm vulnerability

291
00:12:48,800 --> 00:12:53,600
it executes called outside of a vm

292
00:12:53,600 --> 00:12:55,920
smart shortcut is used for creating a

293
00:12:55,920 --> 00:12:59,040
load process of a host and escalating

294
00:12:59,040 --> 00:13:01,120
privileges

295
00:13:01,120 --> 00:13:03,760
it is also possible to modify color or

296
00:13:03,760 --> 00:13:06,720
kvm code but disabling security features

297
00:13:06,720 --> 00:13:08,800
are needed

298
00:13:08,800 --> 00:13:10,959
the second one is called execution with

299
00:13:10,959 --> 00:13:13,920
a vm software vulnerability it also

300
00:13:13,920 --> 00:13:16,959
executes code outside of a vm

301
00:13:16,959 --> 00:13:19,120
a vm software

302
00:13:19,120 --> 00:13:21,519
has lots of code

303
00:13:21,519 --> 00:13:24,160
for services and hardware emulations

304
00:13:24,160 --> 00:13:27,279
especially for featured vms like qemu

305
00:13:27,279 --> 00:13:30,399
has a large codebase

306
00:13:30,399 --> 00:13:31,839
others have

307
00:13:31,839 --> 00:13:33,600
smaller ones

308
00:13:33,600 --> 00:13:36,639
but it doesn't mean vulnerability free

309
00:13:36,639 --> 00:13:39,120
summer shortcut is used for creating a

310
00:13:39,120 --> 00:13:41,440
user process of a host

311
00:13:41,440 --> 00:13:43,920
the third one is privilege escalation

312
00:13:43,920 --> 00:13:46,560
with a kvm vulnerability

313
00:13:46,560 --> 00:13:51,120
it elevates the privilege of a vm a vm

314
00:13:51,120 --> 00:13:53,680
is a process and learns in the cast

315
00:13:53,680 --> 00:13:55,519
privilege of a host

316
00:13:55,519 --> 00:13:56,399
but

317
00:13:56,399 --> 00:13:59,600
in proper handling such as page table

318
00:13:59,600 --> 00:14:02,800
interrupts and registers give host

319
00:14:02,800 --> 00:14:04,800
privilege to the vm

320
00:14:04,800 --> 00:14:06,399
it is

321
00:14:06,399 --> 00:14:08,959
possible to create a load process of a

322
00:14:08,959 --> 00:14:12,000
host and modify color code

323
00:14:12,000 --> 00:14:14,160
the last one is local privilege

324
00:14:14,160 --> 00:14:16,800
escalation with a kvm and vm software

325
00:14:16,800 --> 00:14:20,240
vulnerability it elevates the privilege

326
00:14:20,240 --> 00:14:22,480
of a local process

327
00:14:22,480 --> 00:14:25,199
some kvm vulnerabilities can be

328
00:14:25,199 --> 00:14:26,959
exploited through

329
00:14:26,959 --> 00:14:28,880
the kvm and

330
00:14:28,880 --> 00:14:31,360
used for escalation

331
00:14:31,360 --> 00:14:34,079
some vm software vulnerabilities also

332
00:14:34,079 --> 00:14:37,120
can be used for privilege escalation if

333
00:14:37,120 --> 00:14:40,079
the vm or related demons learning soft

334
00:14:40,079 --> 00:14:42,399
loot privilege

335
00:14:42,399 --> 00:14:45,920
but vm usually learns in user privilege

336
00:14:45,920 --> 00:14:49,279
first reasons as you know

337
00:14:49,279 --> 00:14:52,240
for now let's check the previous works

338
00:14:52,240 --> 00:14:55,199
and where they did focus

339
00:14:55,199 --> 00:14:57,519
these are well-known researches

340
00:14:57,519 --> 00:14:58,800
and they

341
00:14:58,800 --> 00:15:00,959
concentrate on vm software

342
00:15:00,959 --> 00:15:03,120
vulnerabilities

343
00:15:03,120 --> 00:15:05,360
maybe several reasons

344
00:15:05,360 --> 00:15:08,560
for that i guess vm software has a huge

345
00:15:08,560 --> 00:15:11,760
code base and user level are more

346
00:15:11,760 --> 00:15:14,320
familiar than the corner level

347
00:15:14,320 --> 00:15:15,680
research

348
00:15:15,680 --> 00:15:17,440
it means

349
00:15:17,440 --> 00:15:19,839
we still have the chance to be a black

350
00:15:19,839 --> 00:15:24,320
speaker with kvm vulnerabilities

351
00:15:24,639 --> 00:15:27,440
all right let's summarize four cases for

352
00:15:27,440 --> 00:15:29,759
escapes

353
00:15:29,759 --> 00:15:32,560
kvm vulnerabilities can be used for code

354
00:15:32,560 --> 00:15:34,880
execution vm to host privilege

355
00:15:34,880 --> 00:15:36,800
escalation and local privilege

356
00:15:36,800 --> 00:15:38,839
escalation

357
00:15:38,839 --> 00:15:43,440
right code execution can do vm to host

358
00:15:43,440 --> 00:15:45,040
process creation

359
00:15:45,040 --> 00:15:48,160
host corner called modification and host

360
00:15:48,160 --> 00:15:51,839
user to root privilege escalation

361
00:15:51,839 --> 00:15:54,959
vm to host previous escalation also can

362
00:15:54,959 --> 00:15:58,399
do all three behaviors

363
00:15:58,399 --> 00:16:01,199
local privilege escalation only can do

364
00:16:01,199 --> 00:16:02,880
host user through root privilege

365
00:16:02,880 --> 00:16:04,399
escalation

366
00:16:04,399 --> 00:16:07,040
in contrast vm software vulnerability

367
00:16:07,040 --> 00:16:10,000
can be used for code execution and local

368
00:16:10,000 --> 00:16:12,480
privilege escalation

369
00:16:12,480 --> 00:16:14,880
code execution of the vm software

370
00:16:14,880 --> 00:16:17,519
vulnerability only can do process

371
00:16:17,519 --> 00:16:21,759
creation because it has a user privilege

372
00:16:21,759 --> 00:16:23,839
local

373
00:16:23,839 --> 00:16:27,279
privilege escalation is possible to host

374
00:16:27,279 --> 00:16:29,600
privilege escalation

375
00:16:29,600 --> 00:16:32,240
as you know the left side is about a

376
00:16:32,240 --> 00:16:35,040
vulnerability disclosure so no one knows

377
00:16:35,040 --> 00:16:38,560
until the vulnerability is revealed or

378
00:16:38,560 --> 00:16:40,720
you have to find it before somebody

379
00:16:40,720 --> 00:16:42,800
exploits it

380
00:16:42,800 --> 00:16:46,079
however the right side is a result or

381
00:16:46,079 --> 00:16:47,120
aim of

382
00:16:47,120 --> 00:16:49,120
exploitation

383
00:16:49,120 --> 00:16:52,800
fortunately it has apparent symptoms and

384
00:16:52,800 --> 00:16:55,120
we can detect them with monitoring

385
00:16:55,120 --> 00:16:57,120
system course

386
00:16:57,120 --> 00:17:01,040
yes right i got the answer finally

387
00:17:01,040 --> 00:17:03,759
from now i will show you how i design

388
00:17:03,759 --> 00:17:05,900
and implement the mechanisms

389
00:17:05,900 --> 00:17:08,000
[Music]

390
00:17:08,000 --> 00:17:11,919
design and implementation of alcatraz

391
00:17:11,919 --> 00:17:14,959
what is alcatraz ecatres is a practical

392
00:17:14,959 --> 00:17:18,079
hypervisor sandbox to prevent this case

393
00:17:18,079 --> 00:17:20,480
it doesn't need smm

394
00:17:20,480 --> 00:17:23,919
or and retrofits of the hypervisor it

395
00:17:23,919 --> 00:17:26,880
downgrades kvm's privilege and makes a

396
00:17:26,880 --> 00:17:29,600
sandbox with intel vt

397
00:17:29,600 --> 00:17:32,000
mac address consists of hyperbox and

398
00:17:32,000 --> 00:17:34,480
tailored linux scanner hyperbox is a

399
00:17:34,480 --> 00:17:37,600
peak hypervisor made from scratch and

400
00:17:37,600 --> 00:17:40,400
has core mechanisms for preventing

401
00:17:40,400 --> 00:17:41,440
escapes

402
00:17:41,440 --> 00:17:44,160
tailored in scanner has only one system

403
00:17:44,160 --> 00:17:47,280
called interface for x64 and the

404
00:17:47,280 --> 00:17:50,320
narrowest geotech surface and monitoring

405
00:17:50,320 --> 00:17:52,480
points

406
00:17:52,480 --> 00:17:54,559
hyperbox makes a center box with the

407
00:17:54,559 --> 00:17:55,600
memory

408
00:17:55,600 --> 00:17:58,160
and laser protection technique it

409
00:17:58,160 --> 00:17:59,679
reverses

410
00:17:59,679 --> 00:18:03,360
the extended page table or ept of intel

411
00:18:03,360 --> 00:18:04,720
vt

412
00:18:04,720 --> 00:18:07,360
if it translates guest physical address

413
00:18:07,360 --> 00:18:11,039
to host physical address and can prevent

414
00:18:11,039 --> 00:18:14,160
code and read-only data modifications

415
00:18:14,160 --> 00:18:16,799
it also protects security related fields

416
00:18:16,799 --> 00:18:19,840
of control registers such as light

417
00:18:19,840 --> 00:18:24,240
protect of cr0 and supervisor mode

418
00:18:24,240 --> 00:18:27,039
execution protection of cr4

419
00:18:27,039 --> 00:18:29,360
hyperbox monitors system cores and

420
00:18:29,360 --> 00:18:32,559
prevents unauthorized behaviors it sets

421
00:18:32,559 --> 00:18:34,720
hardware break points to the

422
00:18:34,720 --> 00:18:36,480
system currently point

423
00:18:36,480 --> 00:18:37,600
work

424
00:18:37,600 --> 00:18:40,160
exit and credit functions

425
00:18:40,160 --> 00:18:42,799
it prevents unusualized behaviors with

426
00:18:42,799 --> 00:18:44,880
them

427
00:18:44,880 --> 00:18:48,320
hyperbox emulates vmx instructions for

428
00:18:48,320 --> 00:18:50,480
nested virtualization

429
00:18:50,480 --> 00:18:53,280
it downgrades kvn's privilege to our

430
00:18:53,280 --> 00:18:56,480
guest hypervisor so it has to

431
00:18:56,480 --> 00:19:00,160
emulate vmx instructions of kvm because

432
00:19:00,160 --> 00:19:03,520
ring zero cannot execute them however

433
00:19:03,520 --> 00:19:06,480
matrices the methods is a performance

434
00:19:06,480 --> 00:19:07,520
overhead

435
00:19:07,520 --> 00:19:10,320
hyperbox uses vt features to reduce

436
00:19:10,320 --> 00:19:11,919
performance overhead

437
00:19:11,919 --> 00:19:13,440
it uses

438
00:19:13,440 --> 00:19:16,559
virtual motion control structure or vmcs

439
00:19:16,559 --> 00:19:19,600
shadowing vmcs shadowing allows a gas

440
00:19:19,600 --> 00:19:22,320
hypervisor to execute vmx instruction

441
00:19:22,320 --> 00:19:25,600
direct directly so emulations or

442
00:19:25,600 --> 00:19:27,440
interventions are

443
00:19:27,440 --> 00:19:30,880
reduced while nested virtualization

444
00:19:30,880 --> 00:19:34,240
it also uses a virtual process id or

445
00:19:34,240 --> 00:19:35,679
ppid

446
00:19:35,679 --> 00:19:39,600
vpid gives unique id to voter cpu and

447
00:19:39,600 --> 00:19:42,480
translation leukocyte buffer or

448
00:19:42,480 --> 00:19:43,760
tlb

449
00:19:43,760 --> 00:19:47,360
vpid prevents tlp flosses when vm access

450
00:19:47,360 --> 00:19:49,520
occurs and reduces

451
00:19:49,520 --> 00:19:53,000
performance overhead

452
00:19:54,240 --> 00:19:55,840
wow

453
00:19:55,840 --> 00:19:58,240
i know that the architecture of alcatraz

454
00:19:58,240 --> 00:20:01,600
is so complicated and you may feel a

455
00:20:01,600 --> 00:20:05,360
little dizzy or confused

456
00:20:05,360 --> 00:20:09,120
so i prepared additional slides for you

457
00:20:09,120 --> 00:20:11,679
and they are full of diagrams not the

458
00:20:11,679 --> 00:20:12,720
text

459
00:20:12,720 --> 00:20:14,480
i hope you like it

460
00:20:14,480 --> 00:20:17,440
let's move on to the next page

461
00:20:17,440 --> 00:20:19,679
this page shows how to prevent and

462
00:20:19,679 --> 00:20:22,480
authorize code modification if it is the

463
00:20:22,480 --> 00:20:24,159
core of preventing another light's

464
00:20:24,159 --> 00:20:26,080
called modification

465
00:20:26,080 --> 00:20:28,880
hyperbox makes a center box for the

466
00:20:28,880 --> 00:20:31,679
corner and the kvm with intel feed

467
00:20:31,679 --> 00:20:35,120
technology it means the corner uses cast

468
00:20:35,120 --> 00:20:37,200
logical address and guest physical

469
00:20:37,200 --> 00:20:39,679
address not the host address

470
00:20:39,679 --> 00:20:42,640
and the guest physical pages are mapped

471
00:20:42,640 --> 00:20:46,240
linearly to the host physical pages with

472
00:20:46,240 --> 00:20:49,840
evd table the important point is ept

473
00:20:49,840 --> 00:20:53,520
table has its own access rights and the

474
00:20:53,520 --> 00:20:55,679
hypervisor protects them

475
00:20:55,679 --> 00:20:56,960
so

476
00:20:56,960 --> 00:20:59,280
if an attacker changes the page table of

477
00:20:59,280 --> 00:21:01,280
the sandbox

478
00:21:01,280 --> 00:21:04,720
he or she can in fact called page 1 like

479
00:21:04,720 --> 00:21:06,159
this

480
00:21:06,159 --> 00:21:09,200
however if it still has read-only and

481
00:21:09,200 --> 00:21:10,640
executable

482
00:21:10,640 --> 00:21:13,120
access light so the code modification

483
00:21:13,120 --> 00:21:15,440
attack is prevented

484
00:21:15,440 --> 00:21:17,280
this page shows how to prevent

485
00:21:17,280 --> 00:21:19,600
unauthorized process creation

486
00:21:19,600 --> 00:21:23,039
the stock marks are hardware breakpoints

487
00:21:23,039 --> 00:21:25,120
in normal process creation

488
00:21:25,120 --> 00:21:28,320
an application or a

489
00:21:28,320 --> 00:21:29,440
vm

490
00:21:29,440 --> 00:21:31,919
cores4 system core

491
00:21:31,919 --> 00:21:34,400
then vm axis occurs

492
00:21:34,400 --> 00:21:36,720
at the system entry point because of the

493
00:21:36,720 --> 00:21:39,200
hardware breakpoint then hyperbox

494
00:21:39,200 --> 00:21:42,960
handles uh the vm exit events and save a

495
00:21:42,960 --> 00:21:45,919
system call number with pid

496
00:21:45,919 --> 00:21:49,039
it also checks if the privileges of

497
00:21:49,039 --> 00:21:52,080
corner and hyper box are the same and

498
00:21:52,080 --> 00:21:55,520
reasons system could process

499
00:21:55,520 --> 00:21:57,760
the rings corner continues to execute

500
00:21:57,760 --> 00:22:00,640
the fork system core and vm exit events

501
00:22:00,640 --> 00:22:03,120
occurs again because of the hardware

502
00:22:03,120 --> 00:22:05,520
break point

503
00:22:05,520 --> 00:22:08,480
hyperbox handles the event and it checks

504
00:22:08,480 --> 00:22:12,559
this is the system called number is fork

505
00:22:12,559 --> 00:22:15,679
in this case the system called was work

506
00:22:15,679 --> 00:22:16,720
so

507
00:22:16,720 --> 00:22:17,760
process

508
00:22:17,760 --> 00:22:20,799
information is created in hyper box and

509
00:22:20,799 --> 00:22:24,639
the corner also creates a process

510
00:22:25,039 --> 00:22:28,640
uh this page shows a preventative

511
00:22:28,640 --> 00:22:31,200
process creation

512
00:22:31,200 --> 00:22:34,880
if the attacker tries to exploit with io

513
00:22:34,880 --> 00:22:37,280
controller

514
00:22:37,280 --> 00:22:40,159
vmx is occurs and hyperbox save system

515
00:22:40,159 --> 00:22:43,679
call number io control with pid

516
00:22:43,679 --> 00:22:44,720
then

517
00:22:44,720 --> 00:22:48,240
it checks the privileges and resumes the

518
00:22:48,240 --> 00:22:50,960
dio control system core

519
00:22:50,960 --> 00:22:53,360
while processing io control the attacker

520
00:22:53,360 --> 00:22:56,000
hijacks the control flow and

521
00:22:56,000 --> 00:22:59,520
cause fork function to escape

522
00:22:59,520 --> 00:23:02,640
when fork function is executed vm exit

523
00:23:02,640 --> 00:23:05,200
occurs while by the hardware breaker

524
00:23:05,200 --> 00:23:09,120
point and hyperbox checks the sabred

525
00:23:09,120 --> 00:23:11,600
seasonal number

526
00:23:11,600 --> 00:23:13,760
as you know the second number was io

527
00:23:13,760 --> 00:23:16,640
controller not fork so the escape is

528
00:23:16,640 --> 00:23:19,280
detected and prevented

529
00:23:19,280 --> 00:23:21,200
this page also shows preventing

530
00:23:21,200 --> 00:23:24,080
unusualized process creation but in this

531
00:23:24,080 --> 00:23:27,039
case i assume that the attacker detoured

532
00:23:27,039 --> 00:23:30,480
my checkpoints and created a malicious

533
00:23:30,480 --> 00:23:32,400
process successfully

534
00:23:32,400 --> 00:23:36,320
but as you know the system is the air

535
00:23:36,320 --> 00:23:38,640
for applications and there is no

536
00:23:38,640 --> 00:23:41,600
exception for malware

537
00:23:41,600 --> 00:23:45,840
random malware pid 102 occurs socket or

538
00:23:45,840 --> 00:23:48,320
some other system cores

539
00:23:48,320 --> 00:23:53,120
hyperbox intercepts it through vm exit

540
00:23:53,120 --> 00:23:56,480
then it finds out that

541
00:23:56,480 --> 00:23:59,039
it doesn't have information about pid

542
00:23:59,039 --> 00:24:01,840
102 because moderator detoured the

543
00:24:01,840 --> 00:24:03,520
hardware breakpoint

544
00:24:03,520 --> 00:24:08,240
so this case is also prevented

545
00:24:08,240 --> 00:24:10,240
this is an additional page about a

546
00:24:10,240 --> 00:24:13,279
preventing process creation this page

547
00:24:13,279 --> 00:24:16,240
has only guide information so please

548
00:24:16,240 --> 00:24:20,880
check it with my presentation file later

549
00:24:20,880 --> 00:24:23,440
from now i will show you how to prevent

550
00:24:23,440 --> 00:24:26,799
an authorized privilege escalation

551
00:24:26,799 --> 00:24:31,279
in normal case an application or a vm vm

552
00:24:31,279 --> 00:24:32,880
cores

553
00:24:32,880 --> 00:24:36,559
senuid or related system cores to change

554
00:24:36,559 --> 00:24:38,320
privilege

555
00:24:38,320 --> 00:24:42,320
then vm exit occurs and hyperbox saves

556
00:24:42,320 --> 00:24:45,279
the standard number with pid

557
00:24:45,279 --> 00:24:47,840
compares probabilities

558
00:24:47,840 --> 00:24:50,400
and resumes the system core

559
00:24:50,400 --> 00:24:52,960
while processing nu id commit

560
00:24:52,960 --> 00:24:55,919
class function is called

561
00:24:55,919 --> 00:24:58,400
vm access occurs again

562
00:24:58,400 --> 00:25:00,640
after that hyperbox checks if the system

563
00:25:00,640 --> 00:25:05,679
call number is previously related and

564
00:25:05,679 --> 00:25:08,559
it updates effective uid in it and

565
00:25:08,559 --> 00:25:09,760
resumes

566
00:25:09,760 --> 00:25:13,360
then the suspended system core

567
00:25:13,360 --> 00:25:15,120
is resumed

568
00:25:15,120 --> 00:25:16,080
and

569
00:25:16,080 --> 00:25:18,640
update effective uid

570
00:25:18,640 --> 00:25:21,760
this is normal case and there is no

571
00:25:21,760 --> 00:25:24,159
abnormal behaviors

572
00:25:24,159 --> 00:25:26,000
in this case the attacker tries to

573
00:25:26,000 --> 00:25:28,960
exploit and escalate

574
00:25:28,960 --> 00:25:30,720
privilege

575
00:25:30,720 --> 00:25:32,799
the attacker calls io controller to

576
00:25:32,799 --> 00:25:34,960
exploit

577
00:25:34,960 --> 00:25:38,000
then vmaxis occurs and hyperbox saves io

578
00:25:38,000 --> 00:25:40,240
control with pid

579
00:25:40,240 --> 00:25:43,039
compares privileges and resumes the

580
00:25:43,039 --> 00:25:45,279
system core

581
00:25:45,279 --> 00:25:48,159
while processing io control the attacker

582
00:25:48,159 --> 00:25:50,799
hijacks the control flow and executes

583
00:25:50,799 --> 00:25:52,720
comic class function or

584
00:25:52,720 --> 00:25:54,080
for

585
00:25:54,080 --> 00:25:56,159
previous escalation

586
00:25:56,159 --> 00:26:00,240
then vmx is occurred again and hyperbox

587
00:26:00,240 --> 00:26:03,039
checks to save the system call number

588
00:26:03,039 --> 00:26:05,760
the number was io controller not senior

589
00:26:05,760 --> 00:26:09,039
id or related system force so the escape

590
00:26:09,039 --> 00:26:11,679
is prevented

591
00:26:11,679 --> 00:26:14,480
as i mentioned before my checkpoints can

592
00:26:14,480 --> 00:26:17,360
be detoured and the attacker can get

593
00:26:17,360 --> 00:26:20,959
loot privilege successfully

594
00:26:21,360 --> 00:26:22,720
however

595
00:26:22,720 --> 00:26:25,840
hyperbox has all process information and

596
00:26:25,840 --> 00:26:29,360
can detect and prevent it

597
00:26:29,360 --> 00:26:33,360
when the malware pid 101 calls socket or

598
00:26:33,360 --> 00:26:35,520
summary system cores

599
00:26:35,520 --> 00:26:39,440
hyperbox handles it with vmax it

600
00:26:39,440 --> 00:26:40,480
then

601
00:26:40,480 --> 00:26:43,120
it checks privileges and

602
00:26:43,120 --> 00:26:44,640
finds the

603
00:26:44,640 --> 00:26:46,799
the abnormal privilege escalation like

604
00:26:46,799 --> 00:26:49,039
this

605
00:26:49,120 --> 00:26:51,840
from this page i would like to show you

606
00:26:51,840 --> 00:26:54,480
a nested virtualization feature

607
00:26:54,480 --> 00:26:57,840
without hyperbox kvm can do anything

608
00:26:57,840 --> 00:27:02,000
related to vms like creating vmcs vlogs

609
00:27:02,000 --> 00:27:05,120
or and executing vmx instructions and so

610
00:27:05,120 --> 00:27:09,919
on so when kvm executes vmx on

611
00:27:09,919 --> 00:27:12,559
the privilege of the corner and kvn

612
00:27:12,559 --> 00:27:14,960
changes to ring -1

613
00:27:14,960 --> 00:27:18,799
then kvm executes vmx instructions to

614
00:27:18,799 --> 00:27:23,520
create vmcs connecting with vm1

615
00:27:23,520 --> 00:27:27,440
when vmx is occurs from vm1

616
00:27:27,440 --> 00:27:30,720
kvm handles it

617
00:27:31,039 --> 00:27:33,279
yeah vm2 is the same

618
00:27:33,279 --> 00:27:37,840
it's very simple and clear right

619
00:27:37,840 --> 00:27:40,320
the problem starts here

620
00:27:40,320 --> 00:27:43,840
hyperbox starts ahead of kvm and makes a

621
00:27:43,840 --> 00:27:47,360
sandbox with vmcs 0 for the corner and

622
00:27:47,360 --> 00:27:51,279
the kvm from now vmcs0 controls corner

623
00:27:51,279 --> 00:27:54,880
and kvn and the host machine works like

624
00:27:54,880 --> 00:27:57,600
guest machine because of it the

625
00:27:57,600 --> 00:28:00,720
privilege of kvm is also downgraded to

626
00:28:00,720 --> 00:28:04,720
ring zero and kvm can't execute vmx

627
00:28:04,720 --> 00:28:07,279
instructions directly

628
00:28:07,279 --> 00:28:10,880
when kvm executes vmx on

629
00:28:10,880 --> 00:28:13,520
vm access occurs and hyperbox handles it

630
00:28:13,520 --> 00:28:14,960
instead

631
00:28:14,960 --> 00:28:18,320
after resuming the sandbox kvm executes

632
00:28:18,320 --> 00:28:21,600
vmx instructions to create vm1 and

633
00:28:21,600 --> 00:28:24,640
hyperbox emulates all vmx instructions

634
00:28:24,640 --> 00:28:27,360
with vm exit

635
00:28:27,360 --> 00:28:30,640
then on vm1

636
00:28:30,640 --> 00:28:32,559
vm2 is the same

637
00:28:32,559 --> 00:28:35,919
the key point is that hyperbox hooks a

638
00:28:35,919 --> 00:28:38,000
vm hall start ip

639
00:28:38,000 --> 00:28:39,919
and rsp

640
00:28:39,919 --> 00:28:43,279
to hyperboxes once i'm going to tell you

641
00:28:43,279 --> 00:28:46,640
the reason on the next page

642
00:28:46,640 --> 00:28:49,840
when vm access occurs the event is

643
00:28:49,840 --> 00:28:53,200
handled by hyperbox because

644
00:28:53,200 --> 00:28:57,360
vm hosts rip and rsp were hooked by it

645
00:28:57,360 --> 00:29:00,880
then hyperbox retrieves original rsv and

646
00:29:00,880 --> 00:29:02,480
rip

647
00:29:02,480 --> 00:29:05,039
from the data list and

648
00:29:05,039 --> 00:29:10,240
changes vmcs 0's guest rip and rsp

649
00:29:10,240 --> 00:29:13,039
finally hyperbox learns a center box

650
00:29:13,039 --> 00:29:17,120
with vmcs 0 and kvm's vmx the handler

651
00:29:17,120 --> 00:29:19,760
handles dband of vm2

652
00:29:19,760 --> 00:29:22,720
this is the reason why i hooked host rip

653
00:29:22,720 --> 00:29:24,000
and rsp

654
00:29:24,000 --> 00:29:25,120
as you know

655
00:29:25,120 --> 00:29:27,840
the center box is made by hyperbox

656
00:29:27,840 --> 00:29:32,159
uh if vm2's vm exit event goes to kvm

657
00:29:32,159 --> 00:29:35,520
directly the center box is unavailable

658
00:29:35,520 --> 00:29:36,480
so

659
00:29:36,480 --> 00:29:39,279
all vm access

660
00:29:39,279 --> 00:29:42,000
exits have to be handled the hyperbox

661
00:29:42,000 --> 00:29:44,799
first and then hyperbox has to run the

662
00:29:44,799 --> 00:29:47,520
center box

663
00:29:47,840 --> 00:29:48,640
but

664
00:29:48,640 --> 00:29:51,200
the mechanisms

665
00:29:51,200 --> 00:29:53,120
has a problem

666
00:29:53,120 --> 00:29:55,679
that is performance overhead let's see

667
00:29:55,679 --> 00:29:58,080
what happened while vmx instructions are

668
00:29:58,080 --> 00:29:59,679
executed

669
00:29:59,679 --> 00:30:03,440
whenever vm kvm learns then

670
00:30:03,440 --> 00:30:05,520
hyperbox intercepts them

671
00:30:05,520 --> 00:30:06,640
and

672
00:30:06,640 --> 00:30:08,960
tlb is flushed

673
00:30:08,960 --> 00:30:09,760
and

674
00:30:09,760 --> 00:30:11,919
here is the burst period

675
00:30:11,919 --> 00:30:15,200
to handle a vm vm read and vm write are

676
00:30:15,200 --> 00:30:17,520
frequently needed

677
00:30:17,520 --> 00:30:20,399
after that rpm runs and

678
00:30:20,399 --> 00:30:23,520
this flows is limited until the vm shuts

679
00:30:23,520 --> 00:30:25,520
down

680
00:30:25,520 --> 00:30:29,279
however this overhead can be reduced by

681
00:30:29,279 --> 00:30:32,320
enabling vmcs shadowing and vpid

682
00:30:32,320 --> 00:30:33,760
features

683
00:30:33,760 --> 00:30:36,480
after enabling them there is no tlb

684
00:30:36,480 --> 00:30:40,320
flashing when vm exit occurs

685
00:30:40,320 --> 00:30:43,840
and if vmcs link vtr is set like this

686
00:30:43,840 --> 00:30:47,440
there is no burst period

687
00:30:47,440 --> 00:30:51,840
and others are the same as previous

688
00:30:52,480 --> 00:30:53,679
wow

689
00:30:53,679 --> 00:30:56,480
it's really amazing right

690
00:30:56,480 --> 00:30:59,840
the only differences are ppid value and

691
00:30:59,840 --> 00:31:02,480
vmcs link ptr value

692
00:31:02,480 --> 00:31:03,600
they make

693
00:31:03,600 --> 00:31:06,720
hyperbox more complicated

694
00:31:06,720 --> 00:31:09,760
complicated or sorry complicated uh but

695
00:31:09,760 --> 00:31:13,200
it is worth using them

696
00:31:13,200 --> 00:31:15,679
i implemented extras following the

697
00:31:15,679 --> 00:31:18,000
design hyperbox is a lot of kernel

698
00:31:18,000 --> 00:31:20,880
modules so it can be loaded any time

699
00:31:20,880 --> 00:31:23,120
before you start vms

700
00:31:23,120 --> 00:31:24,240
tailored

701
00:31:24,240 --> 00:31:26,399
linux kernel is just a recompiled

702
00:31:26,399 --> 00:31:29,840
version and i removed some options so

703
00:31:29,840 --> 00:31:31,440
there is no

704
00:31:31,440 --> 00:31:36,000
system core interface for legacies

705
00:31:36,559 --> 00:31:39,760
evaluations and demo

706
00:31:39,760 --> 00:31:41,360
for benchmarks

707
00:31:41,360 --> 00:31:43,519
i prepared the server environment like

708
00:31:43,519 --> 00:31:45,600
this

709
00:31:45,600 --> 00:31:48,399
this is a micro benchmark result the

710
00:31:48,399 --> 00:31:50,720
values are normalized

711
00:31:50,720 --> 00:31:51,600
and

712
00:31:51,600 --> 00:31:57,199
they are various from 1.27 to

713
00:31:57,519 --> 00:32:00,519
8.1

714
00:32:02,000 --> 00:32:04,480
it looks like performance overhead is so

715
00:32:04,480 --> 00:32:06,159
high

716
00:32:06,159 --> 00:32:07,679
but it is

717
00:32:07,679 --> 00:32:09,200
natural because

718
00:32:09,200 --> 00:32:12,320
this is just a micro benchmark and

719
00:32:12,320 --> 00:32:15,600
hyperbox intercepts or system cores

720
00:32:15,600 --> 00:32:19,439
let's see the real-world benchmark

721
00:32:19,679 --> 00:32:21,120
this result

722
00:32:21,120 --> 00:32:24,640
shows a color compare benchmark

723
00:32:24,640 --> 00:32:26,720
the values are

724
00:32:26,720 --> 00:32:28,399
also normalized

725
00:32:28,399 --> 00:32:31,799
or ecotrade although ecatras has about

726
00:32:31,799 --> 00:32:34,880
800 percent overhead in the micro

727
00:32:34,880 --> 00:32:36,799
benchmark however

728
00:32:36,799 --> 00:32:38,320
it has only

729
00:32:38,320 --> 00:32:40,480
10 overhead in the corner compilation

730
00:32:40,480 --> 00:32:42,159
benchmark

731
00:32:42,159 --> 00:32:43,919
and

732
00:32:43,919 --> 00:32:46,640
in the case of a cast machine it has

733
00:32:46,640 --> 00:32:50,799
only one percent overhead so i can say

734
00:32:50,799 --> 00:32:54,480
it has reasonable overhead

735
00:32:54,480 --> 00:32:56,720
all right demo time

736
00:32:56,720 --> 00:33:00,720
i prepared a short demo for you

737
00:33:05,039 --> 00:33:07,760
the first case is an escape from a kvm

738
00:33:07,760 --> 00:33:09,760
vulnerability

739
00:33:09,760 --> 00:33:12,559
the operating system is open to 20.4 and

740
00:33:12,559 --> 00:33:16,600
the control version is 5.8.18.

741
00:33:19,440 --> 00:33:23,480
monitoring system loads

742
00:33:25,519 --> 00:33:26,399
and

743
00:33:26,399 --> 00:33:28,480
starting is operative

744
00:33:28,480 --> 00:33:30,880
vm

745
00:33:35,440 --> 00:33:39,120
the attacker is trying to exploit

746
00:33:39,120 --> 00:33:42,399
and backdoor is open

747
00:33:46,240 --> 00:33:48,240
the attacker got loot

748
00:33:48,240 --> 00:33:51,480
like this

749
00:33:56,320 --> 00:34:00,840
all right let's start extras

750
00:34:07,200 --> 00:34:08,320
and

751
00:34:08,320 --> 00:34:12,639
starting i separated vm again

752
00:34:13,760 --> 00:34:16,399
the article is trying to exploit but

753
00:34:16,399 --> 00:34:20,320
alcatraz prevented it

754
00:34:20,320 --> 00:34:24,720
there is no response from the shell

755
00:34:26,000 --> 00:34:28,719
the second case is an escape from

756
00:34:28,719 --> 00:34:31,918
vm software vulnerability

757
00:34:31,918 --> 00:34:34,560
monitoring logs

758
00:34:34,560 --> 00:34:35,679
starting

759
00:34:35,679 --> 00:34:38,720
a separated vm

760
00:34:41,599 --> 00:34:45,119
attacker is trying to exploit

761
00:34:45,359 --> 00:34:49,239
yeah factory is opened

762
00:34:52,320 --> 00:34:55,119
the attacker

763
00:34:55,599 --> 00:34:58,000
cut user privilege

764
00:34:58,000 --> 00:35:01,160
like this

765
00:35:02,160 --> 00:35:05,359
let's start echo trace

766
00:35:09,520 --> 00:35:13,440
starting the separated vm again

767
00:35:14,320 --> 00:35:17,359
the attacker is trying to exploit again

768
00:35:17,359 --> 00:35:19,839
and then

769
00:35:22,400 --> 00:35:25,839
alcatraz prevented it

770
00:35:25,839 --> 00:35:29,320
there is no response

771
00:35:32,880 --> 00:35:35,359
like this

772
00:35:37,760 --> 00:35:39,760
the last one is privilege escalation

773
00:35:39,760 --> 00:35:43,480
with a kvm vulnerability

774
00:35:44,640 --> 00:35:47,839
monitoring system logs

775
00:35:48,640 --> 00:35:49,839
starting

776
00:35:49,839 --> 00:35:52,960
as opportunity and

777
00:35:54,000 --> 00:35:58,760
qem new has a user level

778
00:36:10,560 --> 00:36:14,640
but now because of the exploit

779
00:36:14,720 --> 00:36:18,160
qm has loot

780
00:36:23,760 --> 00:36:27,640
let's start the echo dress

781
00:36:32,480 --> 00:36:36,240
starting the separate vm again

782
00:36:39,280 --> 00:36:42,880
the attacker is trying to exploit

783
00:36:43,359 --> 00:36:45,680
then

784
00:36:45,839 --> 00:36:46,880
yeah

785
00:36:46,880 --> 00:36:50,000
i could rest prevented it

786
00:36:50,000 --> 00:36:53,160
like this

787
00:36:56,079 --> 00:36:59,359
conclusion and black sound divide

788
00:36:59,359 --> 00:37:00,720
firstly

789
00:37:00,720 --> 00:37:01,839
container

790
00:37:01,839 --> 00:37:05,440
containers vms and micro vms suffer from

791
00:37:05,440 --> 00:37:06,800
escapes

792
00:37:06,800 --> 00:37:08,640
the hypervisor can provide strong

793
00:37:08,640 --> 00:37:11,839
isolation but it has the excessive

794
00:37:11,839 --> 00:37:15,440
privilege and connects with vms tightly

795
00:37:15,440 --> 00:37:18,480
secondly taking a higher ground is not

796
00:37:18,480 --> 00:37:21,119
always the answer

797
00:37:21,119 --> 00:37:23,520
the higher privilege we get the more

798
00:37:23,520 --> 00:37:25,440
constraints we have

799
00:37:25,440 --> 00:37:27,599
lastly

800
00:37:27,599 --> 00:37:30,800
ecatras is a practical hypervisor

801
00:37:30,800 --> 00:37:32,320
center box

802
00:37:32,320 --> 00:37:35,200
to prevent escapes it downgrades kvm's

803
00:37:35,200 --> 00:37:37,920
privilege and makers and bugs it also

804
00:37:37,920 --> 00:37:40,400
has reasonable overhead so

805
00:37:40,400 --> 00:37:43,200
please try it

806
00:37:43,839 --> 00:37:45,359
alright

807
00:37:45,359 --> 00:37:48,160
this is the last page of my presentation

808
00:37:48,160 --> 00:37:49,520
as you know

809
00:37:49,520 --> 00:37:51,760
there was a skill researcher and nothing

810
00:37:51,760 --> 00:37:54,800
has changed except he became a speaker

811
00:37:54,800 --> 00:37:57,200
at black usa

812
00:37:57,200 --> 00:37:58,240
oh

813
00:37:58,240 --> 00:37:59,440
i heard

814
00:37:59,440 --> 00:38:00,480
one thing

815
00:38:00,480 --> 00:38:03,680
that he moved to another place near the

816
00:38:03,680 --> 00:38:06,320
ceo because he became a senior skate

817
00:38:06,320 --> 00:38:08,000
researcher

818
00:38:08,000 --> 00:38:09,440
well

819
00:38:09,440 --> 00:38:11,760
here are my first link and in my other

820
00:38:11,760 --> 00:38:15,119
address uh so source code

821
00:38:15,119 --> 00:38:18,640
source code and demos are in the link

822
00:38:18,640 --> 00:38:20,720
and if you have any questions please

823
00:38:20,720 --> 00:38:23,040
contact me with them

824
00:38:23,040 --> 00:38:24,720
thank you for listening and thank you

825
00:38:24,720 --> 00:38:28,520
for your precious time

