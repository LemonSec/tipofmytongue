1
00:00:01,130 --> 00:00:14,320
[Music]

2
00:00:14,320 --> 00:00:16,560
hi everyone welcome to our talk how are

3
00:00:16,560 --> 00:00:18,640
you jason digitalization zero day to

4
00:00:18,640 --> 00:00:20,640
steal money on the blockchain i'm

5
00:00:20,640 --> 00:00:22,960
rolling and my co-speaker uzokai will be

6
00:00:22,960 --> 00:00:25,599
present at part two we are from tencent

7
00:00:25,599 --> 00:00:27,599
security shin lab our resource fields

8
00:00:27,599 --> 00:00:29,840
include android web iot browser

9
00:00:29,840 --> 00:00:32,719
blockchain etc and our xeon lab offers

10
00:00:32,719 --> 00:00:34,559
many outstanding achievements that are

11
00:00:34,559 --> 00:00:36,800
bad channel

12
00:00:36,800 --> 00:00:39,120
here is outline of our talk

13
00:00:39,120 --> 00:00:41,040
first of all i will introduce first

14
00:00:41,040 --> 00:00:43,520
jason briefly

15
00:00:43,520 --> 00:00:45,600
for jason is a widely used open source

16
00:00:45,600 --> 00:00:48,480
json password with 23 thousand hundred

17
00:00:48,480 --> 00:00:49,520
thousand

18
00:00:49,520 --> 00:00:51,920
stars on github it's known for faster

19
00:00:51,920 --> 00:00:53,280
passing speed

20
00:00:53,280 --> 00:00:54,280
there are

21
00:00:54,280 --> 00:00:57,520
3600 artifacts using

22
00:00:57,520 --> 00:00:59,840
subjection on the movement as a basic

23
00:00:59,840 --> 00:01:02,480
model of countless jail web service it

24
00:01:02,480 --> 00:01:06,560
serves hundreds of millions of users

25
00:01:06,560 --> 00:01:07,920
in this part i will detail the

26
00:01:07,920 --> 00:01:10,159
digitalization process and security

27
00:01:10,159 --> 00:01:11,680
check in the frustration and the

28
00:01:11,680 --> 00:01:14,640
vulnerability to bypass this hike

29
00:01:14,640 --> 00:01:15,759
first of all

30
00:01:15,759 --> 00:01:19,040
there is a demo for json serializer and

31
00:01:19,040 --> 00:01:21,840
deserializer

32
00:01:22,240 --> 00:01:24,320
first of all there is a demo for json

33
00:01:24,320 --> 00:01:26,479
serialize and deserialize using first

34
00:01:26,479 --> 00:01:29,840
json at the left side there is a java

35
00:01:29,840 --> 00:01:32,240
being named user with a stream field

36
00:01:32,240 --> 00:01:33,520
name name

37
00:01:33,520 --> 00:01:36,000
and the getter and center for name on

38
00:01:36,000 --> 00:01:38,560
the right new user object and set name

39
00:01:38,560 --> 00:01:39,360
to

40
00:01:39,360 --> 00:01:42,560
using method json.jstring

41
00:01:42,560 --> 00:01:45,040
with flag serializer

42
00:01:45,040 --> 00:01:48,000
feature dot red class name to serialize

43
00:01:48,000 --> 00:01:50,799
the user object to json stream and you

44
00:01:50,799 --> 00:01:52,560
can see the output json

45
00:01:52,560 --> 00:01:54,799
the key ad type has value user that is

46
00:01:54,799 --> 00:01:56,960
the class name of the object and the

47
00:01:56,960 --> 00:01:59,200
following is the field name

48
00:01:59,200 --> 00:02:00,719
and then

49
00:02:00,719 --> 00:02:03,360
use method set auto types file to enable

50
00:02:03,360 --> 00:02:05,280
our type feature

51
00:02:05,280 --> 00:02:06,520
then using

52
00:02:06,520 --> 00:02:09,758
json.pass method to

53
00:02:09,758 --> 00:02:12,560
deserialize this json string to a user

54
00:02:12,560 --> 00:02:15,440
object with name 4.

55
00:02:15,440 --> 00:02:18,400
take note of this line of code of code

56
00:02:18,400 --> 00:02:20,800
password config set auto type spot auto

57
00:02:20,800 --> 00:02:22,720
tab is a very important feature of

58
00:02:22,720 --> 00:02:24,720
fascism digitalization

59
00:02:24,720 --> 00:02:26,800
it's the flag about whether physician

60
00:02:26,800 --> 00:02:29,040
can destroy any

61
00:02:29,040 --> 00:02:32,000
non-principled

62
00:02:32,000 --> 00:02:34,720
non-presupposed

63
00:02:34,720 --> 00:02:37,120
classes automatically without

64
00:02:37,120 --> 00:02:38,959
other configuration

65
00:02:38,959 --> 00:02:40,640
it's false if default

66
00:02:40,640 --> 00:02:42,959
if you don't enable auto type message

67
00:02:42,959 --> 00:02:45,440
json path will also adjust an exception

68
00:02:45,440 --> 00:02:47,280
about auto type ignore support where

69
00:02:47,280 --> 00:02:49,599
you'll pass to json with x type user

70
00:02:49,599 --> 00:02:51,519
class

71
00:02:51,519 --> 00:02:54,239
next i will detail the visualization

72
00:02:54,239 --> 00:02:56,879
process inside the first json

73
00:02:56,879 --> 00:02:59,040
when the scanner catches the token key i

74
00:02:59,040 --> 00:03:00,000
type

75
00:03:00,000 --> 00:03:01,360
the serialized

76
00:03:01,360 --> 00:03:03,599
process will be started

77
00:03:03,599 --> 00:03:05,840
first the target class name

78
00:03:05,840 --> 00:03:08,480
will be checked by the method check auto

79
00:03:08,480 --> 00:03:11,040
type if the check is passed

80
00:03:11,040 --> 00:03:13,200
method get digitalizer will written the

81
00:03:13,200 --> 00:03:15,120
digitalization constructor the

82
00:03:15,120 --> 00:03:16,879
digitalizer will be selected by the

83
00:03:16,879 --> 00:03:19,599
target type and finally use the method

84
00:03:19,599 --> 00:03:21,440
create instance of the object

85
00:03:21,440 --> 00:03:23,760
digitalizer to get object from json

86
00:03:23,760 --> 00:03:25,760
fields

87
00:03:25,760 --> 00:03:29,040
next let's focus on the default method

88
00:03:29,040 --> 00:03:31,040
check auto type and how to bypass it to

89
00:03:31,040 --> 00:03:34,879
visualize archery classes

90
00:03:34,879 --> 00:03:36,879
the message check auto tab has three

91
00:03:36,879 --> 00:03:39,680
perma parameters parameter type name is

92
00:03:39,680 --> 00:03:40,879
the target class you want to

93
00:03:40,879 --> 00:03:42,000
decentralize

94
00:03:42,000 --> 00:03:43,599
the you can

95
00:03:43,599 --> 00:03:46,040
you can specify it

96
00:03:46,040 --> 00:03:49,280
explicitly in the json for example i'll

97
00:03:49,280 --> 00:03:50,799
type user

98
00:03:50,799 --> 00:03:53,200
the parameter expect class is the super

99
00:03:53,200 --> 00:03:55,519
class or interface of the tagged class

100
00:03:55,519 --> 00:03:57,760
and again it can be none

101
00:03:57,760 --> 00:04:01,040
and the last parameter feature in the

102
00:04:01,040 --> 00:04:04,000
serialized flag it always defaults

103
00:04:04,000 --> 00:04:06,000
before we start detailing the check

104
00:04:06,000 --> 00:04:08,239
process inside the check auto type we

105
00:04:08,239 --> 00:04:10,480
need to know how to input a parameter of

106
00:04:10,480 --> 00:04:12,720
type class as the

107
00:04:12,720 --> 00:04:16,000
second parameter expect class

108
00:04:16,000 --> 00:04:18,720
as we said the express class means

109
00:04:18,720 --> 00:04:20,478
inheritance

110
00:04:20,478 --> 00:04:22,320
there are two forms of inheritance in

111
00:04:22,320 --> 00:04:25,360
the first json the first one is is

112
00:04:25,360 --> 00:04:26,320
is

113
00:04:26,320 --> 00:04:28,479
explicit inheritance

114
00:04:28,479 --> 00:04:30,560
you can start adjusting object string

115
00:04:30,560 --> 00:04:33,199
with two edge type key the first attack

116
00:04:33,199 --> 00:04:35,280
value is the express class and the

117
00:04:35,280 --> 00:04:37,280
second one following is the subclass

118
00:04:37,280 --> 00:04:40,240
which inherits from the express class

119
00:04:40,240 --> 00:04:42,160
and the third following are the

120
00:04:42,160 --> 00:04:43,759
properties of the

121
00:04:43,759 --> 00:04:45,199
subclass

122
00:04:45,199 --> 00:04:48,880
another form is implicit inheritance

123
00:04:48,880 --> 00:04:51,600
there is a demo class user had a field

124
00:04:51,600 --> 00:04:53,759
id with interface 4

125
00:04:53,759 --> 00:04:56,800
and the class 4 import implements the

126
00:04:56,800 --> 00:04:59,680
interface form so you can set the id to

127
00:04:59,680 --> 00:05:02,080
adjust an object with tab

128
00:05:02,080 --> 00:05:04,160
tab 4 import

129
00:05:04,160 --> 00:05:06,880
that will trigger the implicit

130
00:05:06,880 --> 00:05:10,160
inheritance the interface 4 is the

131
00:05:10,160 --> 00:05:13,120
expect class and the full import in the

132
00:05:13,120 --> 00:05:15,680
subclass

133
00:05:15,759 --> 00:05:17,680
go back to the check auto type

134
00:05:17,680 --> 00:05:19,600
this section i will detail the control

135
00:05:19,600 --> 00:05:21,600
flow of the method check auto tab and

136
00:05:21,600 --> 00:05:23,680
show you how to bypass it

137
00:05:23,680 --> 00:05:25,440
the first layer is the function

138
00:05:25,440 --> 00:05:28,240
prototype first if the target class is

139
00:05:28,240 --> 00:05:30,960
in the waitlist or in the digitalizer

140
00:05:30,960 --> 00:05:33,280
cache

141
00:05:33,919 --> 00:05:35,759
all has the

142
00:05:35,759 --> 00:05:38,560
json annotation json type

143
00:05:38,560 --> 00:05:41,199
it will be it will pass the check the

144
00:05:41,199 --> 00:05:43,199
target class will be returned and saved

145
00:05:43,199 --> 00:05:46,160
to the digitalizer cache next if not if

146
00:05:46,160 --> 00:05:49,520
the target class is in the blacklist or

147
00:05:49,520 --> 00:05:51,680
inherit from

148
00:05:51,680 --> 00:05:54,560
json circle rule site data source or

149
00:05:54,560 --> 00:05:56,080
class loader

150
00:05:56,080 --> 00:05:59,120
the method will also error and

151
00:05:59,120 --> 00:06:01,520
exit

152
00:06:02,000 --> 00:06:04,720
if not if the incoming in parameter

153
00:06:04,720 --> 00:06:06,800
expect class is not now and it's not

154
00:06:06,800 --> 00:06:10,319
those tabs object uh serializable clones

155
00:06:10,319 --> 00:06:11,360
ball

156
00:06:11,360 --> 00:06:14,800
uh a clone ball closeable

157
00:06:14,800 --> 00:06:17,520
event listener collection and the target

158
00:06:17,520 --> 00:06:20,880
class is assembled from expect class

159
00:06:20,880 --> 00:06:24,160
it will pass the check return and cache

160
00:06:24,160 --> 00:06:27,199
if not finally it can't pass the check

161
00:06:27,199 --> 00:06:29,600
unless the global flag auto type support

162
00:06:29,600 --> 00:06:32,080
is true but is always false in the

163
00:06:32,080 --> 00:06:35,719
default configuration

164
00:06:36,800 --> 00:06:38,800
to intuitively

165
00:06:38,800 --> 00:06:41,120
observe the kisses passed auto type

166
00:06:41,120 --> 00:06:42,000
check

167
00:06:42,000 --> 00:06:44,960
i list them as follows

168
00:06:44,960 --> 00:06:47,759
first enable the auto type support flag

169
00:06:47,759 --> 00:06:52,319
is a rare situation next classes with an

170
00:06:52,319 --> 00:06:55,440
analytician just in type

171
00:06:55,440 --> 00:06:58,000
those classes in non-universal we can't

172
00:06:58,000 --> 00:06:59,759
use them anywhere

173
00:06:59,759 --> 00:07:02,400
next classes in the waitlist what is

174
00:07:02,400 --> 00:07:05,840
initialized as a final static hashcode

175
00:07:05,840 --> 00:07:06,880
list

176
00:07:06,880 --> 00:07:09,520
with about 60 classes which are mainly

177
00:07:09,520 --> 00:07:12,080
related to java abstract window toolkit

178
00:07:12,080 --> 00:07:13,360
and spring

179
00:07:13,360 --> 00:07:14,639
framework

180
00:07:14,639 --> 00:07:17,039
those classes in weightless and at high

181
00:07:17,039 --> 00:07:18,000
level

182
00:07:18,000 --> 00:07:19,840
which are not easy to be

183
00:07:19,840 --> 00:07:21,120
exceeding

184
00:07:21,120 --> 00:07:23,599
to be extended

185
00:07:23,599 --> 00:07:26,560
so the first three cases are not our

186
00:07:26,560 --> 00:07:28,960
first choice for bypass

187
00:07:28,960 --> 00:07:33,440
next classes in the visualization

188
00:07:33,440 --> 00:07:36,000
in the digitalizer cache

189
00:07:36,000 --> 00:07:38,080
the last one the second parameter of

190
00:07:38,080 --> 00:07:40,479
check auto type expect class and the

191
00:07:40,479 --> 00:07:41,759
subclass of

192
00:07:41,759 --> 00:07:42,880
it

193
00:07:42,880 --> 00:07:46,000
especially note that the expect class is

194
00:07:46,000 --> 00:07:48,560
a parameter with tab class instead of

195
00:07:48,560 --> 00:07:50,960
type of string that means the expat

196
00:07:50,960 --> 00:07:53,039
class has already passed the autotype

197
00:07:53,039 --> 00:07:55,759
check is converted from string type name

198
00:07:55,759 --> 00:07:59,280
to a target class so the source the

199
00:07:59,280 --> 00:08:01,840
source of express class are the classes

200
00:08:01,840 --> 00:08:02,800
in the

201
00:08:02,800 --> 00:08:07,199
workplace and the digitalizer cache

202
00:08:09,360 --> 00:08:11,919
so we focus on the distributor cache the

203
00:08:11,919 --> 00:08:15,360
cache is named tab utils mappings

204
00:08:15,360 --> 00:08:17,360
it's initialized in the method type

205
00:08:17,360 --> 00:08:20,160
utils and base class mappings for

206
00:08:20,160 --> 00:08:22,879
preloading the digitalizer of basic tabs

207
00:08:22,879 --> 00:08:25,199
at the right it's a part of source code

208
00:08:25,199 --> 00:08:27,520
you can see the class byte into boolean

209
00:08:27,520 --> 00:08:29,840
early class object and interface clone

210
00:08:29,840 --> 00:08:34,080
ball are added to the cache mappings

211
00:08:34,080 --> 00:08:36,880
although there are many low level class

212
00:08:36,880 --> 00:08:38,640
and database in the cache

213
00:08:38,640 --> 00:08:41,039
the tabs have their own specified

214
00:08:41,039 --> 00:08:43,919
visualizer for example

215
00:08:43,919 --> 00:08:47,120
class is exception and the class error

216
00:08:47,120 --> 00:08:50,560
will handle by syllable digitalizer a

217
00:08:50,560 --> 00:08:52,800
class hash map and hash table will be

218
00:08:52,800 --> 00:08:55,760
handled by map digitalizer

219
00:08:55,760 --> 00:08:56,800
but

220
00:08:56,800 --> 00:08:59,600
except the two types

221
00:08:59,600 --> 00:09:02,399
java util bitsight and java long auto

222
00:09:02,399 --> 00:09:03,920
cloudable

223
00:09:03,920 --> 00:09:06,320
but json will create a default java

224
00:09:06,320 --> 00:09:10,399
industrializer for them so

225
00:09:10,560 --> 00:09:13,600
any classes extend beside our auto cloud

226
00:09:13,600 --> 00:09:16,000
board can

227
00:09:16,000 --> 00:09:18,080
bypass the auto type check and create an

228
00:09:18,080 --> 00:09:20,560
instance friendly

229
00:09:20,560 --> 00:09:22,720
so we can inherit from those classes to

230
00:09:22,720 --> 00:09:25,040
bypass the autotype check and auto

231
00:09:25,040 --> 00:09:27,360
cloudball is a very low level interface

232
00:09:27,360 --> 00:09:29,040
says jdk7

233
00:09:29,040 --> 00:09:31,440
it's the super interface of the most of

234
00:09:31,440 --> 00:09:34,000
stream classes channel classes and the

235
00:09:34,000 --> 00:09:37,040
connection classes etc the picture at

236
00:09:37,040 --> 00:09:41,040
the bottom is the sub interfaces and

237
00:09:41,040 --> 00:09:43,680
implementing classes listed in the jdk

238
00:09:43,680 --> 00:09:44,800
document

239
00:09:44,800 --> 00:09:47,040
those classes provide us with a broad

240
00:09:47,040 --> 00:09:48,720
search space

241
00:09:48,720 --> 00:09:52,320
to derive our guidance chain so finally

242
00:09:52,320 --> 00:09:54,880
we bypass the auto tape check by java

243
00:09:54,880 --> 00:09:58,000
long auto close evo

244
00:10:01,120 --> 00:10:03,200
this is a port for the bug adjacent

245
00:10:03,200 --> 00:10:05,440
string with two f keys the first one is

246
00:10:05,440 --> 00:10:07,440
the expect class auto type

247
00:10:07,440 --> 00:10:10,320
auto close ball and the second one is

248
00:10:10,320 --> 00:10:11,920
the target class

249
00:10:11,920 --> 00:10:14,560
java io reader because reader is higher

250
00:10:14,560 --> 00:10:17,120
from auto close ball so it will pass the

251
00:10:17,120 --> 00:10:19,839
check

252
00:10:20,000 --> 00:10:22,800
in the previous section i detailed how

253
00:10:22,800 --> 00:10:25,360
to bypass the security check by auto

254
00:10:25,360 --> 00:10:27,519
crossbow in the next section i will

255
00:10:27,519 --> 00:10:29,600
detail how to find some interesting

256
00:10:29,600 --> 00:10:31,519
guides to achievement

257
00:10:31,519 --> 00:10:34,720
to achieve remote code

258
00:10:34,720 --> 00:10:36,079
executed

259
00:10:36,079 --> 00:10:39,120
execute and more

260
00:10:40,640 --> 00:10:42,480
now we need to find out which classes we

261
00:10:42,480 --> 00:10:44,320
can derive and what we can do about

262
00:10:44,320 --> 00:10:46,640
those classes the second question can be

263
00:10:46,640 --> 00:10:48,000
described as

264
00:10:48,000 --> 00:10:49,279
which method

265
00:10:49,279 --> 00:10:52,000
can be called during visualization

266
00:10:52,000 --> 00:10:55,839
we call those methods magic magic method

267
00:10:55,839 --> 00:10:57,519
the method create java being

268
00:10:57,519 --> 00:10:59,920
deteriorated in the main process of

269
00:10:59,920 --> 00:11:02,880
visualization and inside it

270
00:11:02,880 --> 00:11:05,920
the main method of creating digitalizer

271
00:11:05,920 --> 00:11:08,480
is java being infobuilt

272
00:11:08,480 --> 00:11:10,720
the parameter is the target class and

273
00:11:10,720 --> 00:11:11,519
type

274
00:11:11,519 --> 00:11:14,399
first in this method it will select the

275
00:11:14,399 --> 00:11:16,720
contracture by the two method get

276
00:11:16,720 --> 00:11:18,959
default constructor and the get creator

277
00:11:18,959 --> 00:11:20,800
constructor the order of choosing

278
00:11:20,800 --> 00:11:24,160
constructor is as following

279
00:11:24,399 --> 00:11:27,920
after constructor publishation will

280
00:11:27,920 --> 00:11:30,000
iterate and call all the central

281
00:11:30,000 --> 00:11:33,200
messages of the target class and next

282
00:11:33,200 --> 00:11:35,839
there are some gator methods will be

283
00:11:35,839 --> 00:11:37,279
called automatically during

284
00:11:37,279 --> 00:11:39,200
initialization depends on the return

285
00:11:39,200 --> 00:11:41,279
type

286
00:11:41,279 --> 00:11:43,200
now we can answer the first question

287
00:11:43,200 --> 00:11:45,519
about derivation

288
00:11:45,519 --> 00:11:47,920
except directly inherit from the

289
00:11:47,920 --> 00:11:49,920
interface autocrossboard there are four

290
00:11:49,920 --> 00:11:52,320
cases that classes will be added to the

291
00:11:52,320 --> 00:11:56,079
cache during the digitalization

292
00:11:56,079 --> 00:11:58,880
first the class itself second the tabs

293
00:11:58,880 --> 00:11:59,920
of the

294
00:11:59,920 --> 00:12:03,360
selected constructors parameters

295
00:12:03,360 --> 00:12:06,079
next the types of the parameters of the

296
00:12:06,079 --> 00:12:08,399
center message including the types of

297
00:12:08,399 --> 00:12:11,040
public fields and the last a part of

298
00:12:11,040 --> 00:12:14,399
written types of getters

299
00:12:14,399 --> 00:12:18,320
there is a very flexible feature named

300
00:12:18,320 --> 00:12:20,880
json pass in the first json you can use

301
00:12:20,880 --> 00:12:23,839
it as an object query language and

302
00:12:23,839 --> 00:12:26,399
what's even more amazing is that you can

303
00:12:26,399 --> 00:12:28,399
use it in the digitalization by the

304
00:12:28,399 --> 00:12:31,120
token key dollar reference following is

305
00:12:31,120 --> 00:12:34,079
a demo json the key username has a value

306
00:12:34,079 --> 00:12:36,959
with key reference which is dollar dot

307
00:12:36,959 --> 00:12:39,600
user object dot name the dollar means

308
00:12:39,600 --> 00:12:42,480
the root element is the in intelligence

309
00:12:42,480 --> 00:12:45,839
object itself so your user object is the

310
00:12:45,839 --> 00:12:48,480
first key and the name is

311
00:12:48,480 --> 00:12:52,320
the field name in the use object it will

312
00:12:52,320 --> 00:12:54,800
call the get method get name to get the

313
00:12:54,800 --> 00:12:58,319
value from the used object

314
00:12:59,440 --> 00:13:01,839
so jsonpath

315
00:13:01,839 --> 00:13:04,399
not only allows us to get actually

316
00:13:04,399 --> 00:13:05,680
getters

317
00:13:05,680 --> 00:13:08,160
to call actually getters but also allows

318
00:13:08,160 --> 00:13:10,639
us to cross-reference and access their

319
00:13:10,639 --> 00:13:13,600
properties on multiple generate

320
00:13:13,600 --> 00:13:15,519
instances when dura

321
00:13:15,519 --> 00:13:18,000
when contracting objects during json

322
00:13:18,000 --> 00:13:20,160
passing

323
00:13:20,160 --> 00:13:22,880
this feature greatly

324
00:13:22,880 --> 00:13:27,120
expands our magic method space

325
00:13:27,360 --> 00:13:29,440
there are some conditions for

326
00:13:29,440 --> 00:13:31,040
gadget classes

327
00:13:31,040 --> 00:13:32,320
first

328
00:13:32,320 --> 00:13:36,480
it must be derived it must be

329
00:13:36,480 --> 00:13:39,199
derived from autoclausable second it

330
00:13:39,199 --> 00:13:41,360
must have default constructor or

331
00:13:41,360 --> 00:13:43,680
constructor with symbols otherwise it

332
00:13:43,680 --> 00:13:45,760
can't be in

333
00:13:45,760 --> 00:13:49,680
extension it clicked correctly

334
00:13:49,680 --> 00:13:54,160
and third it must not in the blacklist

335
00:13:55,040 --> 00:13:57,760
in addition to the necessary conditions

336
00:13:57,760 --> 00:14:00,000
we also have some quality requirements

337
00:14:00,000 --> 00:14:02,240
for gadgets the gate instrument called

338
00:14:02,240 --> 00:14:03,920
rce

339
00:14:03,920 --> 00:14:05,839
actually fail

340
00:14:05,839 --> 00:14:08,320
read and write or other high risk

341
00:14:08,320 --> 00:14:10,079
effects

342
00:14:10,079 --> 00:14:12,160
and the dependence of goddess should be

343
00:14:12,160 --> 00:14:15,279
in native jdk or in the widely used

344
00:14:15,279 --> 00:14:17,920
third party libraries

345
00:14:17,920 --> 00:14:20,000
there are almost hundreds of

346
00:14:20,000 --> 00:14:22,240
third-party packages used

347
00:14:22,240 --> 00:14:25,040
widely used in the java ee and we need

348
00:14:25,040 --> 00:14:27,120
to search get it in nearly a million

349
00:14:27,120 --> 00:14:30,079
classes it's impossible to peel

350
00:14:30,079 --> 00:14:33,920
to pure manual search so i write a

351
00:14:33,920 --> 00:14:36,160
tool based on the reflection to search

352
00:14:36,160 --> 00:14:37,199
the

353
00:14:37,199 --> 00:14:39,760
derivation of classic space

354
00:14:39,760 --> 00:14:41,760
i rewrite the fabrication digitalization

355
00:14:41,760 --> 00:14:43,600
process to check the derivation

356
00:14:43,600 --> 00:14:46,560
conditions and create a graph about

357
00:14:46,560 --> 00:14:49,279
derivation relations between classes

358
00:14:49,279 --> 00:14:51,360
it's helpful when you reverse the chart

359
00:14:51,360 --> 00:14:53,120
from the sync class

360
00:14:53,120 --> 00:14:56,800
and in addition the tool can search

361
00:14:56,800 --> 00:14:58,480
available

362
00:14:58,480 --> 00:15:00,639
guidance classes in the jdk and the

363
00:15:00,639 --> 00:15:04,480
specified set of jazz and i crawl and i

364
00:15:04,480 --> 00:15:08,079
crawl common third party libraries

365
00:15:08,079 --> 00:15:09,839
from women

366
00:15:09,839 --> 00:15:11,180
from

367
00:15:11,180 --> 00:15:13,600
[Music]

368
00:15:13,600 --> 00:15:16,320
as input

369
00:15:17,440 --> 00:15:19,760
there is a video shows how it gen

370
00:15:19,760 --> 00:15:22,880
generates almost five thousand classes

371
00:15:22,880 --> 00:15:25,360
from the interface autoclave at the

372
00:15:25,360 --> 00:15:27,360
beginning the yellow node is the

373
00:15:27,360 --> 00:15:29,440
interface autoclavable and the green

374
00:15:29,440 --> 00:15:32,800
node is class jdk natural url reader

375
00:15:32,800 --> 00:15:35,680
the oral and lan means derivation

376
00:15:35,680 --> 00:15:38,320
relation and you can see the url reader

377
00:15:38,320 --> 00:15:41,199
inherit from auto global

378
00:15:41,199 --> 00:15:43,360
and then start searching

379
00:15:43,360 --> 00:15:46,959
there are many colors of nodes

380
00:15:46,959 --> 00:15:49,680
different colors

381
00:15:49,680 --> 00:15:52,880
represent different types the green node

382
00:15:52,880 --> 00:15:56,000
is class the blue node is interface the

383
00:15:56,000 --> 00:15:58,000
peak node is

384
00:15:58,000 --> 00:16:00,480
abstract class the proper node is member

385
00:16:00,480 --> 00:16:02,800
class

386
00:16:06,560 --> 00:16:08,639
here are some high-risk gadgets we found

387
00:16:08,639 --> 00:16:11,600
in the third party in packages by the

388
00:16:11,600 --> 00:16:12,880
tool

389
00:16:12,880 --> 00:16:14,720
such as use

390
00:16:14,720 --> 00:16:17,120
the circle connector to rce

391
00:16:17,120 --> 00:16:19,680
use a patch comp io to read and write

392
00:16:19,680 --> 00:16:23,279
files you'll get jetty to ssri etc

393
00:16:23,279 --> 00:16:25,360
i will detail the gadget's comments i o

394
00:16:25,360 --> 00:16:27,600
read and write files in the next section

395
00:16:27,600 --> 00:16:31,199
about exploited the block channels

396
00:16:31,199 --> 00:16:33,040
there are some fertilizing pillows to

397
00:16:33,040 --> 00:16:35,279
your json connector to rce

398
00:16:35,279 --> 00:16:37,360
due to the difference between versions

399
00:16:37,360 --> 00:16:39,680
and the limitation of blacklist you need

400
00:16:39,680 --> 00:16:41,600
to use different gadgets of our

401
00:16:41,600 --> 00:16:45,120
different method conversions

402
00:16:46,560 --> 00:16:50,320
now we can control many important

403
00:16:50,320 --> 00:16:52,800
websites and affect millions of users by

404
00:16:52,800 --> 00:16:55,600
the json vulnerability let's make more

405
00:16:55,600 --> 00:16:58,639
let's let's make leg makes things more

406
00:16:58,639 --> 00:17:01,120
interesting we found that

407
00:17:01,120 --> 00:17:03,199
this fascism vulnerability affect a

408
00:17:03,199 --> 00:17:05,679
public child with multi-billion dollar

409
00:17:05,679 --> 00:17:08,240
market value and we are detailed i see

410
00:17:08,240 --> 00:17:10,000
on the sovereign nodes of blockchain

411
00:17:10,000 --> 00:17:12,400
tron is next

412
00:17:12,400 --> 00:17:15,119
torn is a public blockchain with a

413
00:17:15,119 --> 00:17:17,280
little crypto

414
00:17:17,280 --> 00:17:20,799
currency known as trx the max value of

415
00:17:20,799 --> 00:17:24,640
trx is 5 billion dollars and it have 14

416
00:17:24,640 --> 00:17:27,319
million holders besides

417
00:17:27,319 --> 00:17:30,240
1400 of the apps are on the troll

418
00:17:30,240 --> 00:17:32,640
network with a daily transaction

419
00:17:32,640 --> 00:17:34,400
over

420
00:17:34,400 --> 00:17:37,840
volume of over 12 million dollars

421
00:17:37,840 --> 00:17:39,919
and the java trend is the java

422
00:17:39,919 --> 00:17:42,160
implementation of the public blockchain

423
00:17:42,160 --> 00:17:45,039
protocol launched by tron it analyzes

424
00:17:45,039 --> 00:17:47,600
all the decentralized applications in

425
00:17:47,600 --> 00:17:50,480
the torrent ecosystem

426
00:17:50,480 --> 00:17:52,160
it's an open source java application

427
00:17:52,160 --> 00:17:55,120
with two services that's on github

428
00:17:55,120 --> 00:17:57,840
java torrent can enable html service on

429
00:17:57,840 --> 00:17:59,760
the torrent nodes to allow users and

430
00:17:59,760 --> 00:18:02,799
developers to interact with the

431
00:18:02,799 --> 00:18:04,480
blockchain

432
00:18:04,480 --> 00:18:06,400
we will detail the java troll in the

433
00:18:06,400 --> 00:18:08,240
next section in this section we just

434
00:18:08,240 --> 00:18:09,840
need to know

435
00:18:09,840 --> 00:18:12,960
its http service using facilitation to

436
00:18:12,960 --> 00:18:17,120
pass json post data

437
00:18:17,360 --> 00:18:19,679
now we have a vulnerability can see or

438
00:18:19,679 --> 00:18:22,799
read and write any file on the

439
00:18:22,799 --> 00:18:24,880
on some conditions but those conditions

440
00:18:24,880 --> 00:18:27,679
are not always made first of all there

441
00:18:27,679 --> 00:18:30,480
is no remote jdbc driver in the java

442
00:18:30,480 --> 00:18:31,520
toronto

443
00:18:31,520 --> 00:18:33,520
so we can't use the gadget's message

444
00:18:33,520 --> 00:18:35,600
connector and there are some problems

445
00:18:35,600 --> 00:18:38,559
need to be sold for exploited by read

446
00:18:38,559 --> 00:18:40,799
and write file

447
00:18:40,799 --> 00:18:44,320
gadgets the javascript is an independent

448
00:18:44,320 --> 00:18:46,320
spring boot factor

449
00:18:46,320 --> 00:18:49,120
so we can't write a web shell directly

450
00:18:49,120 --> 00:18:51,360
we should think about what to write

451
00:18:51,360 --> 00:18:54,960
and the jar can run with actual uh

452
00:18:54,960 --> 00:18:56,720
upfront user with

453
00:18:56,720 --> 00:18:58,880
network permission so we should think

454
00:18:58,880 --> 00:19:01,840
about where are readable paths

455
00:19:01,840 --> 00:19:04,480
and the java turn using fast json to

456
00:19:04,480 --> 00:19:07,919
decode the post in the http api request

457
00:19:07,919 --> 00:19:10,640
however there is no direct response by

458
00:19:10,640 --> 00:19:14,240
http but broadcast on p2p network the

459
00:19:14,240 --> 00:19:16,640
http response just only shows the state

460
00:19:16,640 --> 00:19:17,360
of

461
00:19:17,360 --> 00:19:18,640
the state of

462
00:19:18,640 --> 00:19:20,480
api request so

463
00:19:20,480 --> 00:19:21,840
if we read

464
00:19:21,840 --> 00:19:23,200
read files

465
00:19:23,200 --> 00:19:25,120
from server node how to get contents

466
00:19:25,120 --> 00:19:27,439
written

467
00:19:28,799 --> 00:19:30,480
furthermore the blockchain is

468
00:19:30,480 --> 00:19:33,600
decentralized is decentralized

469
00:19:33,600 --> 00:19:35,200
it is decentralized

470
00:19:35,200 --> 00:19:37,280
that means you take over

471
00:19:37,280 --> 00:19:39,039
models you get more control of the

472
00:19:39,039 --> 00:19:42,160
blockchain so our exploit should rely on

473
00:19:42,160 --> 00:19:46,080
as few preconditions as possible

474
00:19:46,080 --> 00:19:48,480
there are some common uh there are some

475
00:19:48,480 --> 00:19:50,559
common ways to get shell on the spring

476
00:19:50,559 --> 00:19:52,720
foot put faster

477
00:19:52,720 --> 00:19:56,880
when you can read fill a red file

478
00:19:56,880 --> 00:19:58,160
for example

479
00:19:58,160 --> 00:20:01,200
you can override system leaves or write

480
00:20:01,200 --> 00:20:02,480
class

481
00:20:02,480 --> 00:20:05,039
file in the gvm class path

482
00:20:05,039 --> 00:20:06,799
such as a

483
00:20:06,799 --> 00:20:08,400
charset gel

484
00:20:08,400 --> 00:20:10,480
but as i said above

485
00:20:10,480 --> 00:20:12,960
root formation is not required those

486
00:20:12,960 --> 00:20:16,400
fill those files can only be already

487
00:20:16,400 --> 00:20:19,120
or written by root

488
00:20:19,120 --> 00:20:21,679
the operating system or jvm lab is

489
00:20:21,679 --> 00:20:26,080
dangerous without the exact version

490
00:20:26,640 --> 00:20:29,600
there is a feature of gni in the

491
00:20:29,600 --> 00:20:31,039
java package

492
00:20:31,039 --> 00:20:33,360
the binary library files

493
00:20:33,360 --> 00:20:35,280
this should be released to the file

494
00:20:35,280 --> 00:20:37,520
system before it can be loaded

495
00:20:37,520 --> 00:20:40,400
this operation is usually in the static

496
00:20:40,400 --> 00:20:43,360
block triggered when the class is loaded

497
00:20:43,360 --> 00:20:44,720
for the first time

498
00:20:44,720 --> 00:20:46,320
and the binary library is always

499
00:20:46,320 --> 00:20:49,280
released to the directory uh

500
00:20:49,280 --> 00:20:51,919
specified by the system property

501
00:20:51,919 --> 00:20:54,880
java io type directory and the java

502
00:20:54,880 --> 00:20:57,840
method system load will load the gi iso

503
00:20:57,840 --> 00:21:00,960
file by function dr open so or writing

504
00:21:00,960 --> 00:21:03,440
the gene iso file will be the first

505
00:21:03,440 --> 00:21:05,840
choice

506
00:21:08,720 --> 00:21:10,000
java trolling

507
00:21:10,000 --> 00:21:13,039
used level db as the local storage

508
00:21:13,039 --> 00:21:16,159
driver for blockchain data

509
00:21:16,159 --> 00:21:18,880
ldb is the first key value storage

510
00:21:18,880 --> 00:21:22,159
library and is used by bitcoin therefore

511
00:21:22,159 --> 00:21:25,600
it's inherited by many public chain

512
00:21:25,600 --> 00:21:28,400
level dbc with a block chain metadata

513
00:21:28,400 --> 00:21:30,480
with which needed to

514
00:21:30,480 --> 00:21:32,960
pull in frequently for reading and

515
00:21:32,960 --> 00:21:33,919
writing

516
00:21:33,919 --> 00:21:37,200
so javatron use the gi driver

517
00:21:37,200 --> 00:21:41,039
other side jfile needs to extract

518
00:21:41,039 --> 00:21:44,240
to extract gene elaborate level dbgi

519
00:21:44,240 --> 00:21:47,120
extracts the iso library in the method

520
00:21:47,120 --> 00:21:49,840
library extract and load and it drags

521
00:21:49,840 --> 00:21:53,840
the gene iso file to with a random

522
00:21:53,840 --> 00:21:54,799
suffix

523
00:21:54,799 --> 00:21:56,240
to the

524
00:21:56,240 --> 00:21:58,400
temp directory

525
00:21:58,400 --> 00:21:59,200
so

526
00:21:59,200 --> 00:22:03,039
if we want to override the jni iso at

527
00:22:03,039 --> 00:22:05,600
runtime we need to get random

528
00:22:05,600 --> 00:22:10,080
file name extracted by the java

529
00:22:10,080 --> 00:22:13,039
the motor directory of the most direct

530
00:22:13,039 --> 00:22:16,559
way is to list the temp directory but we

531
00:22:16,559 --> 00:22:18,320
don't want those information to be

532
00:22:18,320 --> 00:22:22,240
broadcast on the p2p network

533
00:22:22,240 --> 00:22:24,880
and the last problem is that we need to

534
00:22:24,880 --> 00:22:27,280
write binary bytes instead of

535
00:22:27,280 --> 00:22:30,159
a string with coding there are two

536
00:22:30,159 --> 00:22:32,720
things called can called coding

537
00:22:32,720 --> 00:22:35,840
confusion the input json is read as a

538
00:22:35,840 --> 00:22:38,320
string with encoding instead of byte and

539
00:22:38,320 --> 00:22:40,400
the output stream and the fill writer

540
00:22:40,400 --> 00:22:43,440
should use base

541
00:22:44,080 --> 00:22:46,320
we finally solved those problems by the

542
00:22:46,320 --> 00:22:48,960
gadgets of patch commons io this gadget

543
00:22:48,960 --> 00:22:52,480
chain can be combined with other classes

544
00:22:52,480 --> 00:22:55,840
to not only write but also read file

545
00:22:55,840 --> 00:22:59,039
let's start with red file get this red

546
00:22:59,039 --> 00:23:01,760
file gadget is more clear

547
00:23:01,760 --> 00:23:04,400
look at the left side the class comes i

548
00:23:04,400 --> 00:23:07,440
will input boom input stream inherit

549
00:23:07,440 --> 00:23:10,240
from autoclavable so it can bypass the

550
00:23:10,240 --> 00:23:12,640
autotype check it has three parameters

551
00:23:12,640 --> 00:23:15,440
in the constructor input stream delegate

552
00:23:15,440 --> 00:23:18,240
boolean input include and a wearable

553
00:23:18,240 --> 00:23:20,320
parameters of class

554
00:23:20,320 --> 00:23:22,880
type order mark

555
00:23:22,880 --> 00:23:24,880
booms

556
00:23:24,880 --> 00:23:27,200
there is a getter method for field boom

557
00:23:27,200 --> 00:23:28,240
in the

558
00:23:28,240 --> 00:23:31,120
bomb input stream get bomb will call the

559
00:23:31,120 --> 00:23:33,039
delegate read

560
00:23:33,039 --> 00:23:35,520
we can set the field delegate to the

561
00:23:35,520 --> 00:23:38,640
class commons io input

562
00:23:38,640 --> 00:23:40,400
t input stream

563
00:23:40,400 --> 00:23:42,880
the method read of t input stream will

564
00:23:42,880 --> 00:23:45,039
write the input bytes to the field

565
00:23:45,039 --> 00:23:47,760
branch the field branch can be set to an

566
00:23:47,760 --> 00:23:51,520
output stream in the constructor

567
00:23:51,520 --> 00:23:54,640
so using the class com i o input

568
00:23:54,640 --> 00:23:57,760
commands i o boom input stream we can

569
00:23:57,760 --> 00:24:00,080
choose proper input and output stream

570
00:24:00,080 --> 00:24:02,559
classes to achieve red

571
00:24:02,559 --> 00:24:05,360
red file for writing

572
00:24:05,360 --> 00:24:07,679
encoding string we can follow those

573
00:24:07,679 --> 00:24:09,679
gadgets just in the comments arrow

574
00:24:09,679 --> 00:24:11,120
package

575
00:24:11,120 --> 00:24:14,080
set the source input stream field input

576
00:24:14,080 --> 00:24:15,279
to

577
00:24:15,279 --> 00:24:16,799
charging

578
00:24:16,799 --> 00:24:19,279
chart synchronous input stream and set

579
00:24:19,279 --> 00:24:21,760
the field cs to the input stream which

580
00:24:21,760 --> 00:24:25,039
you want to write to fail

581
00:24:26,000 --> 00:24:28,720
and set the output stream failed

582
00:24:28,720 --> 00:24:30,090
field branch to

583
00:24:30,090 --> 00:24:31,840
[Music]

584
00:24:31,840 --> 00:24:34,400
output stream with class

585
00:24:34,400 --> 00:24:37,679
failure with encoding

586
00:24:37,679 --> 00:24:40,960
as for writing binary bytes besides a

587
00:24:40,960 --> 00:24:43,520
patch com io we need to use two other

588
00:24:43,520 --> 00:24:46,880
packages in the geotron

589
00:24:46,880 --> 00:24:49,919
set the field input of in t input stream

590
00:24:49,919 --> 00:24:53,919
to call to apache commons codec binary

591
00:24:53,919 --> 00:24:54,960
uh

592
00:24:54,960 --> 00:24:57,760
basically a base 6 for input stream

593
00:24:57,760 --> 00:25:00,640
which input of red in string and output

594
00:25:00,640 --> 00:25:02,720
advice

595
00:25:02,720 --> 00:25:05,279
and set the third branch of boom input

596
00:25:05,279 --> 00:25:08,440
stream to eclipse internal

597
00:25:08,440 --> 00:25:11,520
low-cost.file upstream which is from

598
00:25:11,520 --> 00:25:15,000
expect joy

599
00:25:16,000 --> 00:25:18,640
next this is how to use a patch combs i

600
00:25:18,640 --> 00:25:20,240
o to read files

601
00:25:20,240 --> 00:25:21,039
the

602
00:25:21,039 --> 00:25:23,760
entry of guided is also the class boom

603
00:25:23,760 --> 00:25:25,840
input stream and it's getting messed up

604
00:25:25,840 --> 00:25:27,679
getting boom

605
00:25:27,679 --> 00:25:29,200
it costs

606
00:25:29,200 --> 00:25:32,799
it cause methyl matches in the gut bone

607
00:25:32,799 --> 00:25:35,520
the methodic matches will iterate the

608
00:25:35,520 --> 00:25:38,799
filled bones and compare every bone with

609
00:25:38,799 --> 00:25:39,600
the

610
00:25:39,600 --> 00:25:40,480
bite

611
00:25:40,480 --> 00:25:42,880
with the base read from the

612
00:25:42,880 --> 00:25:45,440
input stream delegate if there is one

613
00:25:45,440 --> 00:25:47,600
boom is same as the best read from

614
00:25:47,600 --> 00:25:49,919
delegate it will return the symbol

615
00:25:49,919 --> 00:25:51,919
otherwise it will it's none

616
00:25:51,919 --> 00:25:53,840
so that

617
00:25:53,840 --> 00:25:56,880
so that will let us get the

618
00:25:56,880 --> 00:25:59,360
read content according to the different

619
00:25:59,360 --> 00:26:00,799
written states

620
00:26:00,799 --> 00:26:04,000
it's a way of blend read

621
00:26:04,000 --> 00:26:06,559
there is a pillow for reading the temp

622
00:26:06,559 --> 00:26:09,360
directory to get random file name first

623
00:26:09,360 --> 00:26:12,000
look at the number one at the right side

624
00:26:12,000 --> 00:26:14,720
we use the class jdk natural url reader

625
00:26:14,720 --> 00:26:17,919
as the input stream the parameter url a

626
00:26:17,919 --> 00:26:19,520
support file

627
00:26:19,520 --> 00:26:21,360
scheme for a folder and listing

628
00:26:21,360 --> 00:26:23,600
directory the number three

629
00:26:23,600 --> 00:26:26,480
the field boom is set to multiple bias

630
00:26:26,480 --> 00:26:30,320
blocks to be compared with reader output

631
00:26:30,320 --> 00:26:32,880
and the number four you just pass

632
00:26:32,880 --> 00:26:36,640
reference dollar dot abc dot boom to

633
00:26:36,640 --> 00:26:38,880
call the gather message get bomb of the

634
00:26:38,880 --> 00:26:40,720
object abc

635
00:26:40,720 --> 00:26:43,520
which is the first field

636
00:26:43,520 --> 00:26:46,159
in the json with the class bomb input

637
00:26:46,159 --> 00:26:49,840
stream as number five let this reference

638
00:26:49,840 --> 00:26:52,640
reference value be the field address and

639
00:26:52,640 --> 00:26:55,600
send this json post data to the java

640
00:26:55,600 --> 00:26:58,080
training api wallet

641
00:26:58,080 --> 00:27:00,799
while data address and if the address is

642
00:27:00,799 --> 00:27:02,559
known it will read nothing if the

643
00:27:02,559 --> 00:27:05,200
address is bad format it will return

644
00:27:05,200 --> 00:27:07,760
well it is a failed message

645
00:27:07,760 --> 00:27:10,400
so we can use apache comsio to read the

646
00:27:10,400 --> 00:27:13,520
temp directory by byte and finally get

647
00:27:13,520 --> 00:27:17,039
the random file name of gn library

648
00:27:17,039 --> 00:27:18,840
now we can all read

649
00:27:18,840 --> 00:27:22,080
the gni library at runtime

650
00:27:22,080 --> 00:27:24,000
the last question is how to hijack

651
00:27:24,000 --> 00:27:25,679
pointer

652
00:27:25,679 --> 00:27:28,480
the gel channel will register a timer

653
00:27:28,480 --> 00:27:31,840
task for level db red right on

654
00:27:31,840 --> 00:27:34,240
initialization

655
00:27:34,240 --> 00:27:36,640
the message dbright will call the gene

656
00:27:36,640 --> 00:27:37,919
and method

657
00:27:37,919 --> 00:27:40,159
little buffer gene and malloc

658
00:27:40,159 --> 00:27:42,399
so we can inject shellcode to the

659
00:27:42,399 --> 00:27:45,120
outside address of gmaillog when the

660
00:27:45,120 --> 00:27:49,760
timer test winder when the timer task is

661
00:27:49,760 --> 00:27:53,679
a executed pun

662
00:27:58,240 --> 00:28:00,480
this is the fun process of

663
00:28:00,480 --> 00:28:03,520
exploit and the last step is recovering

664
00:28:03,520 --> 00:28:06,000
the program contest to

665
00:28:06,000 --> 00:28:09,760
prevent the crash and for the sixth step

666
00:28:09,760 --> 00:28:11,120
in post

667
00:28:11,120 --> 00:28:13,760
penetration for real money

668
00:28:13,760 --> 00:28:17,840
return to michael speaker with a kai

669
00:28:19,200 --> 00:28:21,919
next i will introduce a post-penetration

670
00:28:21,919 --> 00:28:24,559
exploit method that affects the security

671
00:28:24,559 --> 00:28:27,760
of blockchain user size

672
00:28:27,760 --> 00:28:30,159
after we successfully rce on toronto's

673
00:28:30,159 --> 00:28:32,880
http node we need to test whether it

674
00:28:32,880 --> 00:28:36,960
will cut losses to the user's size

675
00:28:37,039 --> 00:28:39,279
for the blockchain the first approach we

676
00:28:39,279 --> 00:28:41,919
think of is a 51 percent tag

677
00:28:41,919 --> 00:28:45,039
a 51 percent tag is attack or blockchain

678
00:28:45,039 --> 00:28:47,200
by a group of minors who control more

679
00:28:47,200 --> 00:28:49,360
than fifty percent of the network's many

680
00:28:49,360 --> 00:28:50,720
hashtags

681
00:28:50,720 --> 00:28:53,200
attackers with with majority control of

682
00:28:53,200 --> 00:28:55,360
the network can interrupt the recording

683
00:28:55,360 --> 00:28:57,360
of new blocks by preventing other

684
00:28:57,360 --> 00:29:00,799
manners from completing blocks

685
00:29:00,799 --> 00:29:02,799
and joint use the super representative

686
00:29:02,799 --> 00:29:04,000
mechanism

687
00:29:04,000 --> 00:29:06,559
any account can apply to become a super

688
00:29:06,559 --> 00:29:08,880
representative candidate

689
00:29:08,880 --> 00:29:10,559
every account can vote for super

690
00:29:10,559 --> 00:29:12,640
representative candidates

691
00:29:12,640 --> 00:29:15,039
the top 27 candidates with the most

692
00:29:15,039 --> 00:29:17,919
awards are super representative

693
00:29:17,919 --> 00:29:20,480
super representatives generate blocks

694
00:29:20,480 --> 00:29:22,799
package transactions and get blocked and

695
00:29:22,799 --> 00:29:24,320
voting rewards

696
00:29:24,320 --> 00:29:27,120
therefore we need to rce and at least

697
00:29:27,120 --> 00:29:29,039
one half of the super representative

698
00:29:29,039 --> 00:29:33,279
nodes to cover 51 percent tag

699
00:29:33,279 --> 00:29:34,960
but actual rotation is somewhat

700
00:29:34,960 --> 00:29:36,480
unexpected

701
00:29:36,480 --> 00:29:38,720
not all nodes have a http service

702
00:29:38,720 --> 00:29:41,679
enabled in other words we can't attack

703
00:29:41,679 --> 00:29:43,679
owners of tron

704
00:29:43,679 --> 00:29:46,080
this picture shows the location ip of

705
00:29:46,080 --> 00:29:49,039
all the nodes of the troll network this

706
00:29:49,039 --> 00:29:51,799
date is provided by the

707
00:29:51,799 --> 00:29:55,360
trussgun.org website

708
00:29:55,360 --> 00:29:57,840
as shown by choicegun.org

709
00:29:57,840 --> 00:29:59,640
trolling has

710
00:29:59,640 --> 00:30:02,159
1332 nodes in total

711
00:30:02,159 --> 00:30:04,720
with guns of ips and found that only a

712
00:30:04,720 --> 00:30:06,880
quarter of the nodes can be accessed

713
00:30:06,880 --> 00:30:09,120
through the http service

714
00:30:09,120 --> 00:30:10,159
therefore

715
00:30:10,159 --> 00:30:12,240
there is no guarantee that more than

716
00:30:12,240 --> 00:30:14,640
half of the super representatives have

717
00:30:14,640 --> 00:30:17,279
enabled http service

718
00:30:17,279 --> 00:30:19,279
unfortunately we can't use this

719
00:30:19,279 --> 00:30:22,000
vulnerability to cost of 51 percent tag

720
00:30:22,000 --> 00:30:23,760
of the troll network

721
00:30:23,760 --> 00:30:25,679
we need to find another way

722
00:30:25,679 --> 00:30:28,799
now let's focus on the h2on http node

723
00:30:28,799 --> 00:30:31,679
itself a study with those http node

724
00:30:31,679 --> 00:30:35,200
placed in the short network

725
00:30:35,679 --> 00:30:38,080
the trolling http node has a variety of

726
00:30:38,080 --> 00:30:40,480
api cards to allow users to interact

727
00:30:40,480 --> 00:30:42,480
with the blockchain

728
00:30:42,480 --> 00:30:44,320
some of the api cards serve as

729
00:30:44,320 --> 00:30:46,559
standalone requests to getting wider

730
00:30:46,559 --> 00:30:48,399
pieces of information

731
00:30:48,399 --> 00:30:50,240
the most important thing is that there

732
00:30:50,240 --> 00:30:53,039
are also many api cards which modify the

733
00:30:53,039 --> 00:30:56,880
user trs wallet resulting a need to sign

734
00:30:56,880 --> 00:30:59,279
and broadcast transaction

735
00:30:59,279 --> 00:31:02,320
remaining we mainly focus on the second

736
00:31:02,320 --> 00:31:03,760
type of

737
00:31:03,760 --> 00:31:05,519
of api

738
00:31:05,519 --> 00:31:08,480
this apis will be used on user trade of

739
00:31:08,480 --> 00:31:11,039
blockchain

740
00:31:11,519 --> 00:31:14,080
the user wants to send some trx tokens

741
00:31:14,080 --> 00:31:16,880
to other users in the tool network

742
00:31:16,880 --> 00:31:18,960
three steps are required

743
00:31:18,960 --> 00:31:21,600
first of all the user needs to make a

744
00:31:21,600 --> 00:31:23,600
transaction

745
00:31:23,600 --> 00:31:25,279
and conquer the wallet create

746
00:31:25,279 --> 00:31:28,240
transaction api to compare the website

747
00:31:28,240 --> 00:31:30,159
the http node will return a low

748
00:31:30,159 --> 00:31:32,480
transaction in json format

749
00:31:32,480 --> 00:31:34,399
the fixed step is to find the

750
00:31:34,399 --> 00:31:37,039
transaction the user can call the wallet

751
00:31:37,039 --> 00:31:39,120
get transaction sign api

752
00:31:39,120 --> 00:31:41,360
the ap the http node will use the

753
00:31:41,360 --> 00:31:43,760
private key provided by the user to find

754
00:31:43,760 --> 00:31:45,519
the raw transaction

755
00:31:45,519 --> 00:31:47,200
the last step is to broadcast the

756
00:31:47,200 --> 00:31:49,760
transaction the user can call the wallet

757
00:31:49,760 --> 00:31:51,919
broadcast transaction api

758
00:31:51,919 --> 00:31:54,880
the http node will broadcast the defined

759
00:31:54,880 --> 00:31:56,880
transaction to the blockchain

760
00:31:56,880 --> 00:31:58,000
therefore

761
00:31:58,000 --> 00:32:00,559
after we are the http node

762
00:32:00,559 --> 00:32:02,880
if the user use http node to make a

763
00:32:02,880 --> 00:32:04,080
transaction

764
00:32:04,080 --> 00:32:06,799
we can return a folder transaction

765
00:32:06,799 --> 00:32:09,760
which will be execute executed after the

766
00:32:09,760 --> 00:32:12,880
user science and broadcast calculate

767
00:32:12,880 --> 00:32:15,360
if the user use the http node to find

768
00:32:15,360 --> 00:32:16,559
the transaction

769
00:32:16,559 --> 00:32:19,360
we can steal the user's private key

770
00:32:19,360 --> 00:32:22,159
if user only use http nodes to broadcast

771
00:32:22,159 --> 00:32:23,519
the transaction

772
00:32:23,519 --> 00:32:25,519
it seems that we can only prevent

773
00:32:25,519 --> 00:32:27,679
transactions from being broadcast to

774
00:32:27,679 --> 00:32:29,279
cast us

775
00:32:29,279 --> 00:32:32,399
obviously stealing private keys is more

776
00:32:32,399 --> 00:32:34,559
harmful than photo transactions and

777
00:32:34,559 --> 00:32:36,320
further transactions are more helpful

778
00:32:36,320 --> 00:32:38,799
than dof

779
00:32:38,799 --> 00:32:40,320
in the short network

780
00:32:40,320 --> 00:32:43,200
almost all users use wallet programs for

781
00:32:43,200 --> 00:32:44,640
transactions

782
00:32:44,640 --> 00:32:47,120
channelling is firstly launched as

783
00:32:47,120 --> 00:32:50,080
choice official website and backed by

784
00:32:50,080 --> 00:32:51,760
foundation

785
00:32:51,760 --> 00:32:53,039
it is the

786
00:32:53,039 --> 00:32:55,360
wallet with most users

787
00:32:55,360 --> 00:32:57,519
channeling has three versions including

788
00:32:57,519 --> 00:33:00,880
chrome voltage extension ls and android

789
00:33:00,880 --> 00:33:03,519
among them cumulative extension alone

790
00:33:03,519 --> 00:33:07,760
has more than 300 000 users

791
00:33:09,039 --> 00:33:11,279
after testing the three versions of

792
00:33:11,279 --> 00:33:12,720
troll link wallet

793
00:33:12,720 --> 00:33:14,720
we found that all three

794
00:33:14,720 --> 00:33:17,360
wallets use http nodes to broadcast the

795
00:33:17,360 --> 00:33:18,559
transactions

796
00:33:18,559 --> 00:33:20,880
in addition current knowledge extension

797
00:33:20,880 --> 00:33:22,960
also used http nodes to make traffic

798
00:33:22,960 --> 00:33:26,320
actions and directly find and broadcast

799
00:33:26,320 --> 00:33:28,080
the transaction without checking the

800
00:33:28,080 --> 00:33:30,320
return to draw transaction

801
00:33:30,320 --> 00:33:33,120
so we can try to attack the wallet by

802
00:33:33,120 --> 00:33:37,200
return link for the transactions

803
00:33:37,200 --> 00:33:39,039
when the wireless sender requests to

804
00:33:39,039 --> 00:33:41,600
make a transaction to the http node

805
00:33:41,600 --> 00:33:42,799
control

806
00:33:42,799 --> 00:33:45,440
we return our further transaction

807
00:33:45,440 --> 00:33:47,200
then the validator finds the transaction

808
00:33:47,200 --> 00:33:49,760
locally and finally broadcasters send

809
00:33:49,760 --> 00:33:52,960
the transaction to the blockchain

810
00:33:52,960 --> 00:33:55,360
we recorded a video to demonstrate it

811
00:33:55,360 --> 00:34:00,600
with my active attack method

812
00:34:16,879 --> 00:34:19,440
first selection shift normally and are

813
00:34:19,440 --> 00:34:24,520
less than 100 urs tokens to bob

814
00:34:51,520 --> 00:34:53,760
after that the attacker actually

815
00:34:53,760 --> 00:34:56,800
exploits program

816
00:34:59,680 --> 00:35:03,839
and successfully rc is http node

817
00:35:06,320 --> 00:35:08,800
and run some leisure's program of the

818
00:35:08,800 --> 00:35:11,119
port

819
00:35:14,960 --> 00:35:19,480
select him with transaction okay

820
00:35:32,400 --> 00:35:34,880
and the attacker returned the first row

821
00:35:34,880 --> 00:35:37,880
transaction

822
00:35:54,560 --> 00:35:58,240
finally the tiger received qrx tokens

823
00:35:58,240 --> 00:36:01,118
instead of bob

824
00:36:08,960 --> 00:36:11,359
the tag is not over yet let's think

825
00:36:11,359 --> 00:36:13,839
about it why can't wallet extension have

826
00:36:13,839 --> 00:36:17,040
different behavior from ls and android

827
00:36:17,040 --> 00:36:18,880
after analyzing the source code of

828
00:36:18,880 --> 00:36:21,359
chromolytic extension we found that it

829
00:36:21,359 --> 00:36:24,320
used the tone wipe library

830
00:36:24,320 --> 00:36:27,359
tone wipe is to deliver a unified

831
00:36:27,359 --> 00:36:29,760
seamless development experience in

832
00:36:29,760 --> 00:36:32,320
experience influenced by ethereum's web

833
00:36:32,320 --> 00:36:34,160
three implementation

834
00:36:34,160 --> 00:36:36,240
turn live use the troll live

835
00:36:36,240 --> 00:36:39,119
trans transaction builders builder those

836
00:36:39,119 --> 00:36:42,400
center x method to make transactions

837
00:36:42,400 --> 00:36:45,599
which will request http nodes

838
00:36:45,599 --> 00:36:47,680
as you can see in the source code when

839
00:36:47,680 --> 00:36:49,920
calling this method the wallet

840
00:36:49,920 --> 00:36:52,480
transaction api of the http node will be

841
00:36:52,480 --> 00:36:55,920
requested to make a transaction

842
00:36:55,920 --> 00:36:57,920
we realized that the total web library

843
00:36:57,920 --> 00:36:59,599
would be a key point

844
00:36:59,599 --> 00:37:02,720
so we investigated a very variety of

845
00:37:02,720 --> 00:37:04,880
tolerance related applications and made

846
00:37:04,880 --> 00:37:06,800
some new discoveries

847
00:37:06,800 --> 00:37:08,960
we found that in addition to channeling

848
00:37:08,960 --> 00:37:10,880
chrome volatility extension some

849
00:37:10,880 --> 00:37:12,960
multi-currency voltage and

850
00:37:12,960 --> 00:37:15,839
index also use the tone wipe library

851
00:37:15,839 --> 00:37:17,760
and we also didn't check the raw

852
00:37:17,760 --> 00:37:22,320
transaction returned by the http node

853
00:37:22,320 --> 00:37:24,480
multi-currency wallet is a wallet that

854
00:37:24,480 --> 00:37:26,880
supports multiple crypto currency

855
00:37:26,880 --> 00:37:28,480
transactions

856
00:37:28,480 --> 00:37:31,280
m token is a multi multi-currency wallet

857
00:37:31,280 --> 00:37:32,800
that supports a choice

858
00:37:32,800 --> 00:37:35,280
m token has 12 million users and is your

859
00:37:35,280 --> 00:37:37,839
search on web library

860
00:37:37,839 --> 00:37:40,560
after testing we found that when i'm

861
00:37:40,560 --> 00:37:43,839
token knowledge generates choice related

862
00:37:43,839 --> 00:37:46,720
perfections it does request the

863
00:37:46,720 --> 00:37:49,839
http node as you can see in the picture

864
00:37:49,839 --> 00:37:52,160
we've carefully first returned

865
00:37:52,160 --> 00:37:54,880
transaction replacing to a drive with

866
00:37:54,880 --> 00:37:57,200
another address and then find and

867
00:37:57,200 --> 00:38:00,960
broadcast the photo transaction

868
00:38:00,960 --> 00:38:03,359
that is a computer application that runs

869
00:38:03,359 --> 00:38:05,520
on a distributed computing system like

870
00:38:05,520 --> 00:38:06,640
blockchain

871
00:38:06,640 --> 00:38:11,440
as of december 17 2020 1400

872
00:38:11,440 --> 00:38:13,359
steps have been created on strong

873
00:38:13,359 --> 00:38:16,079
network with a daily transaction volume

874
00:38:16,079 --> 00:38:18,400
of over 12 million dollars

875
00:38:18,400 --> 00:38:20,960
for developer depth is a combination of

876
00:38:20,960 --> 00:38:23,280
front end smart contrast

877
00:38:23,280 --> 00:38:26,560
john pro has 12 wires for front-end

878
00:38:26,560 --> 00:38:28,880
developer

879
00:38:28,880 --> 00:38:32,160
take a poll next step as an example

880
00:38:32,160 --> 00:38:34,720
winterized token absent in this

881
00:38:34,720 --> 00:38:35,760
step

882
00:38:35,760 --> 00:38:38,079
it will request hdp notes to make a

883
00:38:38,079 --> 00:38:39,359
transaction

884
00:38:39,359 --> 00:38:41,359
we also successfully for the return

885
00:38:41,359 --> 00:38:43,839
transaction replacing two address with

886
00:38:43,839 --> 00:38:46,000
another address and then signed and

887
00:38:46,000 --> 00:38:48,960
broadcasted for the transaction

888
00:38:48,960 --> 00:38:51,119
in summary the trolling link chrome

889
00:38:51,119 --> 00:38:53,520
wallet extension with more than 300

890
00:38:53,520 --> 00:38:55,280
thousand users

891
00:38:55,280 --> 00:38:57,760
the total the trolling part of the mem

892
00:38:57,760 --> 00:39:00,640
token multi-currency knowledge with 12

893
00:39:00,640 --> 00:39:01,920
million users

894
00:39:01,920 --> 00:39:03,839
and the death with a daily transaction

895
00:39:03,839 --> 00:39:06,480
volume of over 12 million

896
00:39:06,480 --> 00:39:09,680
will all be affected

897
00:39:09,680 --> 00:39:12,560
finally we make conclusion

898
00:39:12,560 --> 00:39:14,880
also distributed and decentralized

899
00:39:14,880 --> 00:39:16,960
structure improves the gravity

900
00:39:16,960 --> 00:39:19,440
credibility and fault tolerance of the

901
00:39:19,440 --> 00:39:20,640
system

902
00:39:20,640 --> 00:39:23,760
blockchain is notable bullet proof to

903
00:39:23,760 --> 00:39:25,520
securely vulnerability

904
00:39:25,520 --> 00:39:27,440
and we hope our work

905
00:39:27,440 --> 00:39:29,280
our work can notify blockchain

906
00:39:29,280 --> 00:39:31,599
developers and users to more careful

907
00:39:31,599 --> 00:39:33,520
about security

908
00:39:33,520 --> 00:39:36,240
our research on the future of blockchain

909
00:39:36,240 --> 00:39:38,000
security will include

910
00:39:38,000 --> 00:39:40,800
traditional web security cloud and age

911
00:39:40,800 --> 00:39:42,880
computing and the poster penetration

912
00:39:42,880 --> 00:39:44,800
exploit

913
00:39:44,800 --> 00:39:48,640
here is a vulnerability timeline

914
00:39:49,520 --> 00:39:51,920
special thanks to songkai told you your

915
00:39:51,920 --> 00:39:54,160
women in the uil

916
00:39:54,160 --> 00:39:57,160
thanks

