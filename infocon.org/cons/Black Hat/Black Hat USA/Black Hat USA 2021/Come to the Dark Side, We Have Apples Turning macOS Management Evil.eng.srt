1
00:00:01,130 --> 00:00:14,639
[Music]

2
00:00:14,639 --> 00:00:16,720
well first and foremost uh hello black

3
00:00:16,720 --> 00:00:19,279
cat usa uh thank you for tuning in to

4
00:00:19,279 --> 00:00:21,520
listen to luke and i speak today we're

5
00:00:21,520 --> 00:00:23,119
going to be looking into some mac os

6
00:00:23,119 --> 00:00:24,960
management attacks kind of attacking

7
00:00:24,960 --> 00:00:27,279
kind of enterprise mac os estates and

8
00:00:27,279 --> 00:00:28,640
and how we might do this i'm working on

9
00:00:28,640 --> 00:00:30,400
a corporate level

10
00:00:30,400 --> 00:00:31,920
a little bit of an introduction as to

11
00:00:31,920 --> 00:00:34,399
who we are i'm cam hall i work within

12
00:00:34,399 --> 00:00:36,800
the security team over at github as a

13
00:00:36,800 --> 00:00:38,960
security engineer formerly used to work

14
00:00:38,960 --> 00:00:41,200
in a past life at secure consulting

15
00:00:41,200 --> 00:00:42,800
where you might have seen some of her

16
00:00:42,800 --> 00:00:45,200
research in the past and i'm luke i'm

17
00:00:45,200 --> 00:00:46,559
currently a red team at actually

18
00:00:46,559 --> 00:00:47,920
research and like callum i used to work

19
00:00:47,920 --> 00:00:49,680
at sq

20
00:00:49,680 --> 00:00:51,760
so quickly diving into it not wasting

21
00:00:51,760 --> 00:00:54,239
too much time um can a quick agenda for

22
00:00:54,239 --> 00:00:56,480
today we are going to give a brief

23
00:00:56,480 --> 00:00:59,120
introduction into apple's mdm solution

24
00:00:59,120 --> 00:01:01,039
as well as the jamf device management

25
00:01:01,039 --> 00:01:03,120
platform we're going to talk about how

26
00:01:03,120 --> 00:01:05,280
these kind of platforms can be abused

27
00:01:05,280 --> 00:01:07,680
and either for kind of c2 access or

28
00:01:07,680 --> 00:01:10,000
sorry c2 communications or kind of

29
00:01:10,000 --> 00:01:12,640
initial access vectors there now

30
00:01:12,640 --> 00:01:13,920
inevitably we are going to get

31
00:01:13,920 --> 00:01:16,240
distracted during this presentation and

32
00:01:16,240 --> 00:01:18,560
start talking uh about some function

33
00:01:18,560 --> 00:01:20,560
hooking as a kind of brief introduction

34
00:01:20,560 --> 00:01:22,240
and we promise this does make sense

35
00:01:22,240 --> 00:01:24,240
we're going to tie it all back in later

36
00:01:24,240 --> 00:01:25,680
when we start talking about kind of

37
00:01:25,680 --> 00:01:27,600
stealing secrets from sip protected

38
00:01:27,600 --> 00:01:29,600
processes now for those of you not

39
00:01:29,600 --> 00:01:32,159
familiar with the apple ecosystem and

40
00:01:32,159 --> 00:01:34,400
sip is one of the core principles on

41
00:01:34,400 --> 00:01:36,720
devices that can prevent users from

42
00:01:36,720 --> 00:01:38,240
being able to perform kind of

43
00:01:38,240 --> 00:01:40,079
unnecessary actions for a legitimate

44
00:01:40,079 --> 00:01:42,640
user things like hooking processes and

45
00:01:42,640 --> 00:01:45,040
dumping processes or accessing kind of

46
00:01:45,040 --> 00:01:48,640
restricted areas of the device

47
00:01:48,640 --> 00:01:50,320
so it's probably worth calling out right

48
00:01:50,320 --> 00:01:51,360
off the bat

49
00:01:51,360 --> 00:01:53,040
everything that we talk about here today

50
00:01:53,040 --> 00:01:54,720
we are going to be releasing uh there's

51
00:01:54,720 --> 00:01:56,399
no need for taking screenshots midway

52
00:01:56,399 --> 00:01:58,320
through our talk uh we'll be releasing

53
00:01:58,320 --> 00:02:00,399
everything kind of open source on github

54
00:02:00,399 --> 00:02:02,479
and this will all be released through

55
00:02:02,479 --> 00:02:04,640
the alias the mac pack which is where

56
00:02:04,640 --> 00:02:06,719
looking eye are going to be um releasing

57
00:02:06,719 --> 00:02:08,639
all of our future research and just kind

58
00:02:08,639 --> 00:02:10,639
of keep an eye on that space there uh

59
00:02:10,639 --> 00:02:12,080
we're also going to be releasing two

60
00:02:12,080 --> 00:02:14,319
mythic agents and for those of you that

61
00:02:14,319 --> 00:02:16,480
aren't overly familiar with mythic

62
00:02:16,480 --> 00:02:18,879
mythic is a c2 framework developed by

63
00:02:18,879 --> 00:02:20,959
cody thomas and some of his colleagues

64
00:02:20,959 --> 00:02:23,200
over at spectre ops and pretty awesome

65
00:02:23,200 --> 00:02:24,800
framework you might know from a past

66
00:02:24,800 --> 00:02:27,680
life as apfel and which is the mac os

67
00:02:27,680 --> 00:02:30,879
specific um kind of agent for the mythic

68
00:02:30,879 --> 00:02:32,959
platform however it's far greater than

69
00:02:32,959 --> 00:02:34,879
that now it's now kind of windows linux

70
00:02:34,879 --> 00:02:38,000
kind of extends to everything

71
00:02:38,000 --> 00:02:40,000
so to answer the kind of why behind this

72
00:02:40,000 --> 00:02:42,239
presentation why luca and i are so kind

73
00:02:42,239 --> 00:02:45,599
of focused on mac os enterprise security

74
00:02:45,599 --> 00:02:48,319
when we talk about um enterprises we

75
00:02:48,319 --> 00:02:50,480
often think of kind of windows estates

76
00:02:50,480 --> 00:02:52,239
and but in recent times we've seen more

77
00:02:52,239 --> 00:02:54,239
of a push towards either kind of

78
00:02:54,239 --> 00:02:56,160
traditional companies allowing people to

79
00:02:56,160 --> 00:02:58,480
use mac os devices and as well as things

80
00:02:58,480 --> 00:03:00,400
like startup companies that are pure mac

81
00:03:00,400 --> 00:03:02,560
houses where that's all their end users

82
00:03:02,560 --> 00:03:04,959
are kind of using and now whenever you

83
00:03:04,959 --> 00:03:08,159
have a mac os devices or any kind of um

84
00:03:08,159 --> 00:03:09,840
platform being used within a corporate

85
00:03:09,840 --> 00:03:11,680
environment you want to have some sort

86
00:03:11,680 --> 00:03:14,480
of management in place so something to

87
00:03:14,480 --> 00:03:16,720
allow your administrators to configure

88
00:03:16,720 --> 00:03:19,200
devices kind of uniform throughout all

89
00:03:19,200 --> 00:03:21,280
your employees or to

90
00:03:21,280 --> 00:03:22,720
kind of enforce certain security

91
00:03:22,720 --> 00:03:24,159
restrictions kind of allowed

92
00:03:24,159 --> 00:03:26,239
applications and whether it's remotely

93
00:03:26,239 --> 00:03:28,239
administering these devices as well

94
00:03:28,239 --> 00:03:30,239
there needs to be something to permit

95
00:03:30,239 --> 00:03:31,920
that to be enabled within that kind of

96
00:03:31,920 --> 00:03:33,760
corporate environment

97
00:03:33,760 --> 00:03:35,360
so the examples we're going to be

98
00:03:35,360 --> 00:03:37,360
looking at today are apple's mdm

99
00:03:37,360 --> 00:03:39,840
solution as well as the jam pro device

100
00:03:39,840 --> 00:03:42,159
management solution um however that's

101
00:03:42,159 --> 00:03:43,680
just because it's what we run into the

102
00:03:43,680 --> 00:03:45,120
most it's kind of most common for

103
00:03:45,120 --> 00:03:47,120
ourselves but there are plenty more as

104
00:03:47,120 --> 00:03:49,200
you can see out there on the screen just

105
00:03:49,200 --> 00:03:51,440
now

106
00:03:52,799 --> 00:03:54,640
cool thanks carl the next section is

107
00:03:54,640 --> 00:03:57,120
going to be an introduction to mdm

108
00:03:57,120 --> 00:03:59,760
so first of all what is mdm or more what

109
00:03:59,760 --> 00:04:01,920
it isn't it's not a product you can't go

110
00:04:01,920 --> 00:04:03,840
to apple and say can i have your mdm

111
00:04:03,840 --> 00:04:06,080
solution please um it's more of a spec

112
00:04:06,080 --> 00:04:08,400
or a protocol that a third-party vendor

113
00:04:08,400 --> 00:04:09,599
can implement

114
00:04:09,599 --> 00:04:10,959
now these third-party vendors are a

115
00:04:10,959 --> 00:04:12,959
little bit bound by what apple says you

116
00:04:12,959 --> 00:04:15,519
can do over the mdm platform

117
00:04:15,519 --> 00:04:18,238
and as such they kind of often implement

118
00:04:18,238 --> 00:04:20,000
their own capabilities above and beyond

119
00:04:20,000 --> 00:04:21,120
this spec

120
00:04:21,120 --> 00:04:23,040
and that tradition well usually involves

121
00:04:23,040 --> 00:04:25,360
running an agent on an end point um and

122
00:04:25,360 --> 00:04:26,800
that'll be relevant a little bit later

123
00:04:26,800 --> 00:04:28,720
on for some of our attacks

124
00:04:28,720 --> 00:04:30,880
um to start with a very summary very

125
00:04:30,880 --> 00:04:33,360
high level summary of the mdm solution

126
00:04:33,360 --> 00:04:35,360
um so step one you need to enroll your

127
00:04:35,360 --> 00:04:37,919
device in the mdm platform

128
00:04:37,919 --> 00:04:39,040
and

129
00:04:39,040 --> 00:04:41,360
this gives the mdm solution some kind of

130
00:04:41,360 --> 00:04:44,240
uh privilege of your device it lets

131
00:04:44,240 --> 00:04:46,320
it like push notifications and give

132
00:04:46,320 --> 00:04:47,360
commands

133
00:04:47,360 --> 00:04:49,680
and once that's been enrolled

134
00:04:49,680 --> 00:04:50,960
it then

135
00:04:50,960 --> 00:04:52,400
communicates over the apple push

136
00:04:52,400 --> 00:04:54,479
notification service the apple push

137
00:04:54,479 --> 00:04:57,040
notification service is a kind of piece

138
00:04:57,040 --> 00:04:59,280
of infrastructure managed by apple and

139
00:04:59,280 --> 00:05:01,680
essentially one giant message queue

140
00:05:01,680 --> 00:05:03,280
after you've sent that notification the

141
00:05:03,280 --> 00:05:05,039
device can pick it up and it will then

142
00:05:05,039 --> 00:05:07,919
reach out to the mdm solution over https

143
00:05:07,919 --> 00:05:09,600
for commands and queries and publishing

144
00:05:09,600 --> 00:05:11,840
the results

145
00:05:11,840 --> 00:05:13,280
so we're going to dive into enrollment

146
00:05:13,280 --> 00:05:15,919
in a little bit more detail and so

147
00:05:15,919 --> 00:05:17,759
there's two ways of enrolling a device

148
00:05:17,759 --> 00:05:19,840
one is using the device enrollment

149
00:05:19,840 --> 00:05:21,919
program which is apple solution for

150
00:05:21,919 --> 00:05:23,759
businesses such that you get your brand

151
00:05:23,759 --> 00:05:25,600
new macbook you open it up and it's all

152
00:05:25,600 --> 00:05:27,440
automatically enrolled in your mdm

153
00:05:27,440 --> 00:05:29,280
server already we're going to look at

154
00:05:29,280 --> 00:05:30,880
the other side of this which is manually

155
00:05:30,880 --> 00:05:32,800
doing it and that involves running a

156
00:05:32,800 --> 00:05:35,120
mobile config file on the device so

157
00:05:35,120 --> 00:05:37,440
these are plist files which are apple's

158
00:05:37,440 --> 00:05:39,199
xml flavor

159
00:05:39,199 --> 00:05:40,880
and when you click on it it will open a

160
00:05:40,880 --> 00:05:42,400
box something like this on the right

161
00:05:42,400 --> 00:05:43,680
with a lot of red text saying that

162
00:05:43,680 --> 00:05:45,280
you're giving this

163
00:05:45,280 --> 00:05:47,280
organization the ability to erase your

164
00:05:47,280 --> 00:05:48,880
device and configure all of your

165
00:05:48,880 --> 00:05:50,080
settings

166
00:05:50,080 --> 00:05:52,000
if you push install and put in the

167
00:05:52,000 --> 00:05:54,160
administrator password and we'll then

168
00:05:54,160 --> 00:05:56,560
kick off a series of messages

169
00:05:56,560 --> 00:05:58,319
the first or one of the first messages

170
00:05:58,319 --> 00:06:00,319
is a token update message and this

171
00:06:00,319 --> 00:06:02,080
provides the mdm solution with any

172
00:06:02,080 --> 00:06:03,840
authentication material that's required

173
00:06:03,840 --> 00:06:05,520
to communicate over the apple push

174
00:06:05,520 --> 00:06:07,520
notification service

175
00:06:07,520 --> 00:06:09,120
and this will happen whenever these

176
00:06:09,120 --> 00:06:12,000
pieces of authentication material change

177
00:06:12,000 --> 00:06:14,319
so what are they so the first one is a

178
00:06:14,319 --> 00:06:16,479
token this is generated by the apple

179
00:06:16,479 --> 00:06:18,400
push notification service and given to

180
00:06:18,400 --> 00:06:21,520
the device and the second one is a push

181
00:06:21,520 --> 00:06:24,240
magic this is generated by the device

182
00:06:24,240 --> 00:06:25,840
and then these two together are sent

183
00:06:25,840 --> 00:06:28,960
over to the mdm solution

184
00:06:29,680 --> 00:06:31,759
so let's look at more of an end to end

185
00:06:31,759 --> 00:06:34,319
of how you can like do the full flow of

186
00:06:34,319 --> 00:06:36,160
running a command on a device so in this

187
00:06:36,160 --> 00:06:38,639
scenario we're going to task um the

188
00:06:38,639 --> 00:06:40,160
device with sending us a list of

189
00:06:40,160 --> 00:06:41,840
installed applications

190
00:06:41,840 --> 00:06:44,240
so step one the mdm solution will

191
00:06:44,240 --> 00:06:46,560
communicate over the apn service it will

192
00:06:46,560 --> 00:06:48,160
send the notification and the device

193
00:06:48,160 --> 00:06:50,000
will pick that up and this will happen

194
00:06:50,000 --> 00:06:51,440
in pretty much near real time as the

195
00:06:51,440 --> 00:06:53,280
device maintains a persistent connection

196
00:06:53,280 --> 00:06:55,680
to the apn service

197
00:06:55,680 --> 00:06:57,199
when the device wakes up it receives the

198
00:06:57,199 --> 00:06:59,120
notification and that's an instruction

199
00:06:59,120 --> 00:07:01,520
to check into the mdm solution and say

200
00:07:01,520 --> 00:07:03,199
what have you got for me

201
00:07:03,199 --> 00:07:06,240
the mdm solution will reply and say

202
00:07:06,240 --> 00:07:08,000
here's what i want you to do

203
00:07:08,000 --> 00:07:09,759
in this particular case

204
00:07:09,759 --> 00:07:11,919
we're going to ask for a list of

205
00:07:11,919 --> 00:07:14,319
installed applications

206
00:07:14,319 --> 00:07:16,400
and finally after the device is kind of

207
00:07:16,400 --> 00:07:18,720
computed the command got all the results

208
00:07:18,720 --> 00:07:20,479
together it then publishes them back

209
00:07:20,479 --> 00:07:23,199
over the same channel

210
00:07:23,199 --> 00:07:25,039
so what can we actually do and there's a

211
00:07:25,039 --> 00:07:26,479
whole bunch of things we can do some of

212
00:07:26,479 --> 00:07:28,240
them are really interesting to us like

213
00:07:28,240 --> 00:07:29,680
being able to

214
00:07:29,680 --> 00:07:32,080
install configuration profiles and these

215
00:07:32,080 --> 00:07:33,919
are kind of the mac equivalent of a

216
00:07:33,919 --> 00:07:36,000
windows gpo like editing settings on the

217
00:07:36,000 --> 00:07:38,240
device we have a whole bunch of query

218
00:07:38,240 --> 00:07:40,880
information we can erase the device and

219
00:07:40,880 --> 00:07:43,280
shut it down and we can kind of install

220
00:07:43,280 --> 00:07:45,919
applications um from the app store or

221
00:07:45,919 --> 00:07:48,240
from an enterprise application if we can

222
00:07:48,240 --> 00:07:49,840
sign it legitimately

223
00:07:49,840 --> 00:07:51,360
um and then lots of stuff to do with

224
00:07:51,360 --> 00:07:53,840
accounts and encryption keys and some

225
00:07:53,840 --> 00:07:55,039
stuff that's absolutely not relevant

226
00:07:55,039 --> 00:07:58,240
like installing books

227
00:07:58,240 --> 00:07:59,919
cool so now we know a little bit about

228
00:07:59,919 --> 00:08:01,919
mdm we're going to cover our first major

229
00:08:01,919 --> 00:08:05,360
topic which is abusing it for c2

230
00:08:05,360 --> 00:08:07,440
so what's the general premise we want to

231
00:08:07,440 --> 00:08:09,520
set up our own mdm server and we want to

232
00:08:09,520 --> 00:08:11,919
maliciously enroll devices to gain some

233
00:08:11,919 --> 00:08:14,000
control within the bounds of how mdm

234
00:08:14,000 --> 00:08:16,240
works so why are we interested in this

235
00:08:16,240 --> 00:08:18,960
well mdm client is an apple signed

236
00:08:18,960 --> 00:08:21,759
trusted application it doing things like

237
00:08:21,759 --> 00:08:24,000
installing profiles or applications it's

238
00:08:24,000 --> 00:08:26,240
probably not very weird when it comes to

239
00:08:26,240 --> 00:08:27,520
detection

240
00:08:27,520 --> 00:08:29,840
and it doesn't beacon as we've kind of

241
00:08:29,840 --> 00:08:31,120
covered in the infrastructure side of

242
00:08:31,120 --> 00:08:33,440
things it's only going to check in

243
00:08:33,440 --> 00:08:35,919
over https when we tell it to over the

244
00:08:35,919 --> 00:08:38,479
apple push notification service and this

245
00:08:38,479 --> 00:08:40,640
is kind of not true it will do it

246
00:08:40,640 --> 00:08:42,320
occasionally when we let open the device

247
00:08:42,320 --> 00:08:43,599
and turn it on for the first time and

248
00:08:43,599 --> 00:08:46,399
things like that um but largely there's

249
00:08:46,399 --> 00:08:48,080
no beacon behavior

250
00:08:48,080 --> 00:08:50,000
and it's automatic persistence just by

251
00:08:50,000 --> 00:08:52,560
the nature of what mdm is

252
00:08:52,560 --> 00:08:53,600
um

253
00:08:53,600 --> 00:08:56,399
an interesting tidbit from late 2020 mdm

254
00:08:56,399 --> 00:08:57,760
client was on the content filter

255
00:08:57,760 --> 00:08:59,839
exclusion list and this was an update

256
00:08:59,839 --> 00:09:02,480
push to catalina that excluded certain

257
00:09:02,480 --> 00:09:05,120
apple products or apple processes from

258
00:09:05,120 --> 00:09:07,680
being intercepted by um network

259
00:09:07,680 --> 00:09:10,080
monitoring tools on the device and which

260
00:09:10,080 --> 00:09:12,320
made this traffic very hard to actually

261
00:09:12,320 --> 00:09:14,640
inspect and from a defensive perspective

262
00:09:14,640 --> 00:09:16,480
and this was reverted after community

263
00:09:16,480 --> 00:09:19,839
outcry a couple months later

264
00:09:19,839 --> 00:09:21,680
so this brings us on to the first kind

265
00:09:21,680 --> 00:09:23,760
of operational challenge of doing this

266
00:09:23,760 --> 00:09:26,240
um apple quite rightly so restrict who

267
00:09:26,240 --> 00:09:28,000
can use the apple push notification

268
00:09:28,000 --> 00:09:29,360
service you need a series of

269
00:09:29,360 --> 00:09:31,680
certificates to do so um

270
00:09:31,680 --> 00:09:34,839
specifically a push

271
00:09:34,839 --> 00:09:37,200
certificate now this push difficult can

272
00:09:37,200 --> 00:09:39,680
be obtained from apple if you submit a

273
00:09:39,680 --> 00:09:43,040
signed push certificate csr

274
00:09:43,040 --> 00:09:45,920
this certificate sorry this csr needs to

275
00:09:45,920 --> 00:09:49,279
be signed by a legitimate mdm vendor

276
00:09:49,279 --> 00:09:50,560
with their certificate that they

277
00:09:50,560 --> 00:09:52,000
obtained from apple using the apple

278
00:09:52,000 --> 00:09:53,839
developer program it's a little bit of a

279
00:09:53,839 --> 00:09:56,080
process and we first looked at trying to

280
00:09:56,080 --> 00:09:58,080
get this first certificate to do so we

281
00:09:58,080 --> 00:09:59,920
need to pay apple some money and also

282
00:09:59,920 --> 00:10:01,120
kind of prove to them that we're a

283
00:10:01,120 --> 00:10:03,600
legitimate business

284
00:10:03,600 --> 00:10:05,440
um we didn't really want to do that we

285
00:10:05,440 --> 00:10:06,959
wanted to run our mdm server we didn't

286
00:10:06,959 --> 00:10:09,600
really want to pay anybody um or like an

287
00:10:09,600 --> 00:10:11,680
actual vendor for a real service

288
00:10:11,680 --> 00:10:12,800
um

289
00:10:12,800 --> 00:10:15,120
so to solve this we look at a tool

290
00:10:15,120 --> 00:10:17,360
called micromdm and this is open source

291
00:10:17,360 --> 00:10:19,120
it's on github it's very very cool

292
00:10:19,120 --> 00:10:21,279
project and it lets us spin up our own

293
00:10:21,279 --> 00:10:23,839
mdm server and kind of interact with it

294
00:10:23,839 --> 00:10:25,839
and play with the internals but we still

295
00:10:25,839 --> 00:10:27,279
need to get our push notification

296
00:10:27,279 --> 00:10:28,959
certificate

297
00:10:28,959 --> 00:10:31,120
now to get this um we use a public

298
00:10:31,120 --> 00:10:34,240
service called mdmcert.download

299
00:10:34,240 --> 00:10:35,600
and

300
00:10:35,600 --> 00:10:37,920
this service um is offered by a company

301
00:10:37,920 --> 00:10:40,480
that is letting you use their uh like

302
00:10:40,480 --> 00:10:42,480
vendor signing certificate to sign your

303
00:10:42,480 --> 00:10:44,640
own csrs and then submit them to apple

304
00:10:44,640 --> 00:10:46,959
to get your push difficults

305
00:10:46,959 --> 00:10:48,720
whether this is in breach of the apple

306
00:10:48,720 --> 00:10:50,320
terms of service is a little bit hand

307
00:10:50,320 --> 00:10:53,760
wavy um they've spoke to apple um apple

308
00:10:53,760 --> 00:10:56,399
haven't replied on the topic um

309
00:10:56,399 --> 00:10:57,920
but it's still up there and it's usable

310
00:10:57,920 --> 00:10:59,600
and it definitely works and there's a

311
00:10:59,600 --> 00:11:01,600
few restrictions around

312
00:11:01,600 --> 00:11:02,959
signing up with different emails so if

313
00:11:02,959 --> 00:11:04,320
you sign up with like a public email

314
00:11:04,320 --> 00:11:06,399
they won't accept you if you do one with

315
00:11:06,399 --> 00:11:09,760
a custom domain name then they will um

316
00:11:09,760 --> 00:11:11,760
and this is to kind of restrict

317
00:11:11,760 --> 00:11:14,160
individuals from using this which is

318
00:11:14,160 --> 00:11:15,519
definitely in breach of the apple terms

319
00:11:15,519 --> 00:11:18,000
of service

320
00:11:18,160 --> 00:11:20,399
and with all of our certificates solved

321
00:11:20,399 --> 00:11:21,920
then we can now communicate with the apn

322
00:11:21,920 --> 00:11:24,079
service we now look at operational

323
00:11:24,079 --> 00:11:25,519
challenge number two

324
00:11:25,519 --> 00:11:27,440
and this is all about getting code

325
00:11:27,440 --> 00:11:28,880
execution so

326
00:11:28,880 --> 00:11:30,560
there's lots of things in the mdm spec

327
00:11:30,560 --> 00:11:32,000
that are quite interesting especially

328
00:11:32,000 --> 00:11:33,200
from an information gathering

329
00:11:33,200 --> 00:11:35,839
perspective but what we really want to

330
00:11:35,839 --> 00:11:38,000
do is execute code on the device and

331
00:11:38,000 --> 00:11:40,000
there's not a command that makes that

332
00:11:40,000 --> 00:11:41,760
incredibly simple

333
00:11:41,760 --> 00:11:43,120
the closest thing we've got is the

334
00:11:43,120 --> 00:11:45,279
install enterprise application command

335
00:11:45,279 --> 00:11:46,959
and this will allow us to execute a

336
00:11:46,959 --> 00:11:48,880
signed package file that's hosted on the

337
00:11:48,880 --> 00:11:51,360
mdm server

338
00:11:51,360 --> 00:11:53,680
however the package must be signed by a

339
00:11:53,680 --> 00:11:55,440
valid developer certificate and to go

340
00:11:55,440 --> 00:11:56,639
through this process you need to speak

341
00:11:56,639 --> 00:11:59,680
to apple you need to get a um

342
00:11:59,680 --> 00:12:00,959
sign up with them pay them some money

343
00:12:00,959 --> 00:12:03,360
and a few checks to take place as well

344
00:12:03,360 --> 00:12:04,959
um but luckily

345
00:12:04,959 --> 00:12:06,480
there's actually a way around this so

346
00:12:06,480 --> 00:12:08,399
when we enroll the device in the mdm

347
00:12:08,399 --> 00:12:11,200
solution for the first time and the ssl

348
00:12:11,200 --> 00:12:13,760
tls certificate of the web server will

349
00:12:13,760 --> 00:12:15,839
be installed as a trusted certificate

350
00:12:15,839 --> 00:12:18,320
authority um on the device

351
00:12:18,320 --> 00:12:20,639
and using this we can

352
00:12:20,639 --> 00:12:22,399
run whatever code we want if we sign it

353
00:12:22,399 --> 00:12:23,519
with that certificate which kind of

354
00:12:23,519 --> 00:12:25,200
alleviates that problem which is quite

355
00:12:25,200 --> 00:12:27,519
nice

356
00:12:27,839 --> 00:12:29,760
put all this together it introduces

357
00:12:29,760 --> 00:12:31,920
authoris which is our first major tool

358
00:12:31,920 --> 00:12:34,240
drop of this talk and it's a mythic

359
00:12:34,240 --> 00:12:36,959
agent nc2 profile uses mdm and all the

360
00:12:36,959 --> 00:12:38,880
stuff we spoke about previously

361
00:12:38,880 --> 00:12:40,560
and when you generate a payload it will

362
00:12:40,560 --> 00:12:42,560
give you a mobile config file

363
00:12:42,560 --> 00:12:45,680
you do need admin um to install this

364
00:12:45,680 --> 00:12:47,600
it ends up not being too much of a

365
00:12:47,600 --> 00:12:50,079
problem um like actually operationally

366
00:12:50,079 --> 00:12:52,160
because mac users are often roots on

367
00:12:52,160 --> 00:12:53,760
their own devices anyway and it's kind

368
00:12:53,760 --> 00:12:55,360
of compounded by the fact that a lot of

369
00:12:55,360 --> 00:12:57,120
the typical user base for a mac is a

370
00:12:57,120 --> 00:12:59,440
developer and as we all know they uh

371
00:12:59,440 --> 00:13:00,959
they often require local app in on their

372
00:13:00,959 --> 00:13:03,360
devices

373
00:13:03,360 --> 00:13:08,160
so a quick demo so

374
00:13:08,160 --> 00:13:10,959
this is mythic it has authoris installed

375
00:13:10,959 --> 00:13:12,720
we're going to start by

376
00:13:12,720 --> 00:13:14,639
generating ourself a mobile config file

377
00:13:14,639 --> 00:13:17,040
and specifying the server

378
00:13:17,040 --> 00:13:19,200
you'll notice that when we generate this

379
00:13:19,200 --> 00:13:20,959
and we download it it's going to open

380
00:13:20,959 --> 00:13:23,360
automatically inside profiles this is

381
00:13:23,360 --> 00:13:25,519
thanks to safari auto opening some known

382
00:13:25,519 --> 00:13:28,639
file types which is uh which is lovely

383
00:13:28,639 --> 00:13:30,399
one last step for the user

384
00:13:30,399 --> 00:13:33,200
this will pop up and a lot of the

385
00:13:33,200 --> 00:13:34,160
information displayed here is

386
00:13:34,160 --> 00:13:36,480
customizable click install give it the

387
00:13:36,480 --> 00:13:38,560
admin password and it will install the

388
00:13:38,560 --> 00:13:39,680
profile and it will do all the

389
00:13:39,680 --> 00:13:41,600
authentication exchanges that we spoke

390
00:13:41,600 --> 00:13:43,600
about previously we can see in the top

391
00:13:43,600 --> 00:13:45,680
right we now have that callback and we

392
00:13:45,680 --> 00:13:49,120
can start interacting with our implant

393
00:13:49,120 --> 00:13:52,079
if we start issuing commands here

394
00:13:52,079 --> 00:13:55,199
we can um

395
00:13:55,199 --> 00:13:56,800
get for example information back about

396
00:13:56,800 --> 00:13:58,480
the device but you'll notice that it's

397
00:13:58,480 --> 00:14:00,720
not going to check it it won't check in

398
00:14:00,720 --> 00:14:03,600
until we tell it to explicitly

399
00:14:03,600 --> 00:14:05,839
so we'll issue a force call back command

400
00:14:05,839 --> 00:14:07,120
and this will use the apple push

401
00:14:07,120 --> 00:14:08,720
notification service to actually send

402
00:14:08,720 --> 00:14:10,800
that message it will check in give us

403
00:14:10,800 --> 00:14:13,519
all of our information

404
00:14:13,519 --> 00:14:16,399
and we can execute our command okay

405
00:14:16,399 --> 00:14:18,079
brilliant so we're going to step away

406
00:14:18,079 --> 00:14:20,480
from mdm for a little bit and partially

407
00:14:20,480 --> 00:14:23,519
i should say and jump into the world of

408
00:14:23,519 --> 00:14:24,480
jamf

409
00:14:24,480 --> 00:14:25,600
now for those of you that aren't

410
00:14:25,600 --> 00:14:26,880
familiar with jamf at all it's

411
00:14:26,880 --> 00:14:29,040
absolutely fine um jamf is a device

412
00:14:29,040 --> 00:14:31,120
management platform often used to manage

413
00:14:31,120 --> 00:14:35,040
mac os estates it is a an agent-based

414
00:14:35,040 --> 00:14:36,959
platform now what that means i think

415
00:14:36,959 --> 00:14:38,800
look kind of touched on earlier but

416
00:14:38,800 --> 00:14:40,480
quite often with these device management

417
00:14:40,480 --> 00:14:43,120
platforms um administrators want some

418
00:14:43,120 --> 00:14:45,040
way to perform kind of custom actions on

419
00:14:45,040 --> 00:14:46,959
devices and and perhaps some actions

420
00:14:46,959 --> 00:14:49,120
that we can't achieve um through kind of

421
00:14:49,120 --> 00:14:52,000
apple's uh native mdm stuff

422
00:14:52,000 --> 00:14:54,800
and hence we have a kind of model where

423
00:14:54,800 --> 00:14:56,240
you'll see on the top here where we have

424
00:14:56,240 --> 00:14:58,639
the java pro server and we have jam from

425
00:14:58,639 --> 00:15:00,800
road devices that have that

426
00:15:00,800 --> 00:15:02,720
jamf agent running there kind of

427
00:15:02,720 --> 00:15:04,560
executing any instructions that the jam

428
00:15:04,560 --> 00:15:06,880
pro server instructs it to

429
00:15:06,880 --> 00:15:09,360
um now the main benefit of this is jamf

430
00:15:09,360 --> 00:15:10,959
allows you to customize a lot of things

431
00:15:10,959 --> 00:15:12,880
that you want to do on that device

432
00:15:12,880 --> 00:15:14,720
however this also provides us a lot of

433
00:15:14,720 --> 00:15:16,959
kind of interesting aspects to look at

434
00:15:16,959 --> 00:15:18,800
when we start investigating the jamf

435
00:15:18,800 --> 00:15:20,720
platform

436
00:15:20,720 --> 00:15:22,800
now at the kind of core of jamf we have

437
00:15:22,800 --> 00:15:25,440
the java pro server now the jump rope

438
00:15:25,440 --> 00:15:27,360
server is the heart of everything uh

439
00:15:27,360 --> 00:15:29,680
within a jamf estate it is effectively

440
00:15:29,680 --> 00:15:31,440
what administrators can use to enroll

441
00:15:31,440 --> 00:15:33,440
devices what they can use to manage

442
00:15:33,440 --> 00:15:35,600
those devices and what they can use to

443
00:15:35,600 --> 00:15:37,920
kind of specify instructions to execute

444
00:15:37,920 --> 00:15:40,320
on their devices so to execute code in

445
00:15:40,320 --> 00:15:42,160
their devices you can go to the jack pro

446
00:15:42,160 --> 00:15:44,160
server kind of scope the devices you

447
00:15:44,160 --> 00:15:46,240
want to target and then perform whatever

448
00:15:46,240 --> 00:15:49,120
action you feel necessary

449
00:15:49,120 --> 00:15:51,360
um in terms of the actual payloads that

450
00:15:51,360 --> 00:15:53,279
jamf can kind of deliver in order to

451
00:15:53,279 --> 00:15:55,120
execute it's kind of required

452
00:15:55,120 --> 00:15:57,839
instructions we have custom scripts

453
00:15:57,839 --> 00:16:00,160
which when you break it down in reality

454
00:16:00,160 --> 00:16:02,000
is just a bash script that an

455
00:16:02,000 --> 00:16:04,240
administrator can kind of tell a device

456
00:16:04,240 --> 00:16:06,959
to execute using the jamf agent

457
00:16:06,959 --> 00:16:09,920
and we have native payloads and we also

458
00:16:09,920 --> 00:16:12,959
have mdm now those last two payloads are

459
00:16:12,959 --> 00:16:14,320
what we're really going to be looking at

460
00:16:14,320 --> 00:16:16,720
here today and the reason we find them

461
00:16:16,720 --> 00:16:19,440
particularly interesting is that unlike

462
00:16:19,440 --> 00:16:21,519
custom scripts which are often dropped

463
00:16:21,519 --> 00:16:23,920
onto the device and the native payloads

464
00:16:23,920 --> 00:16:26,079
and the mdm side of things tend to be a

465
00:16:26,079 --> 00:16:28,320
bit more obfuscated from the user so

466
00:16:28,320 --> 00:16:30,160
they kind of tend to be held in memory

467
00:16:30,160 --> 00:16:32,000
within either the kind of jamf agent

468
00:16:32,000 --> 00:16:37,440
binary um or from the mdm agent itself

469
00:16:37,440 --> 00:16:39,680
so to kind of give a bit of idea of how

470
00:16:39,680 --> 00:16:41,600
the kind of trust model works between

471
00:16:41,600 --> 00:16:43,759
the java pro server and enrolled jamf

472
00:16:43,759 --> 00:16:46,880
agent device are jamf enrolled devices

473
00:16:46,880 --> 00:16:49,040
um when a device is first enrolled

474
00:16:49,040 --> 00:16:51,040
within a java platform the first thing

475
00:16:51,040 --> 00:16:54,079
it does is generates a rsa key pair

476
00:16:54,079 --> 00:16:56,320
now it generates this key pair sends the

477
00:16:56,320 --> 00:16:59,199
public key over to the java pro server

478
00:16:59,199 --> 00:17:01,600
the java pro server then creates a

479
00:17:01,600 --> 00:17:03,920
device certificate for that enrolled

480
00:17:03,920 --> 00:17:06,559
device and that certificate is then

481
00:17:06,559 --> 00:17:08,559
stored within the java pro server and

482
00:17:08,559 --> 00:17:10,640
kind of assigned to being that device's

483
00:17:10,640 --> 00:17:13,520
certificate and it then encrypts that

484
00:17:13,520 --> 00:17:15,280
certificate with the public key

485
00:17:15,280 --> 00:17:17,520
previously sent by the device and it

486
00:17:17,520 --> 00:17:19,119
sends it back to the

487
00:17:19,119 --> 00:17:21,119
device that's just enrolled

488
00:17:21,119 --> 00:17:23,199
now the device that's just enrolled then

489
00:17:23,199 --> 00:17:25,119
stores that device certificate within

490
00:17:25,119 --> 00:17:27,520
what is called the jamf key chain now i

491
00:17:27,520 --> 00:17:28,799
want you to kind of hold that in the

492
00:17:28,799 --> 00:17:30,720
back of your mains for a minute and

493
00:17:30,720 --> 00:17:32,240
because we're going to jump back to that

494
00:17:32,240 --> 00:17:33,440
in a second

495
00:17:33,440 --> 00:17:35,760
um now this device certificate you're

496
00:17:35,760 --> 00:17:38,400
probably wondering what it's used for

497
00:17:38,400 --> 00:17:41,200
any kind of future request and that that

498
00:17:41,200 --> 00:17:43,200
enrolled device makes to the javpro

499
00:17:43,200 --> 00:17:45,520
server it will sign the body of the

500
00:17:45,520 --> 00:17:46,400
request

501
00:17:46,400 --> 00:17:48,160
with this device certificate and then

502
00:17:48,160 --> 00:17:50,000
can provide that signature within the

503
00:17:50,000 --> 00:17:51,120
request

504
00:17:51,120 --> 00:17:53,840
and now that enables the jam pro server

505
00:17:53,840 --> 00:17:56,160
to verify that any sign

506
00:17:56,160 --> 00:17:57,600
any message that then comes from that

507
00:17:57,600 --> 00:18:00,240
device has indeed been signed and as

508
00:18:00,240 --> 00:18:02,559
such uh as a legitimate and hasn't kind

509
00:18:02,559 --> 00:18:05,280
of been intercepted along the way

510
00:18:05,280 --> 00:18:06,880
now what this looks like in the reality

511
00:18:06,880 --> 00:18:08,640
of things you'll see here we have the

512
00:18:08,640 --> 00:18:10,799
kind of basic xml body and then we can

513
00:18:10,799 --> 00:18:13,760
see the device a jam device signature

514
00:18:13,760 --> 00:18:17,440
highlighted in green on the screen here

515
00:18:17,520 --> 00:18:19,600
now i i asked you to keep in mind the

516
00:18:19,600 --> 00:18:21,520
jam key chain and i mentioned we'd be

517
00:18:21,520 --> 00:18:23,760
going back to it now luke and i found

518
00:18:23,760 --> 00:18:25,520
the jam keychain pretty interesting

519
00:18:25,520 --> 00:18:27,280
because we noticed it was within every

520
00:18:27,280 --> 00:18:29,440
kind of jam from road device we'd seen

521
00:18:29,440 --> 00:18:31,679
and we noticed that we at no point had

522
00:18:31,679 --> 00:18:34,320
ever configured any password for it and

523
00:18:34,320 --> 00:18:35,840
nor have we seen any configuration

524
00:18:35,840 --> 00:18:37,679
settings anywhere to configure this

525
00:18:37,679 --> 00:18:39,760
password and so we did a little bit of

526
00:18:39,760 --> 00:18:42,480
reverse engineering and we performed

527
00:18:42,480 --> 00:18:44,000
some kind of dialogue injection that

528
00:18:44,000 --> 00:18:46,160
we'll talk about a little bit later

529
00:18:46,160 --> 00:18:48,960
and we found that the jamf agent itself

530
00:18:48,960 --> 00:18:51,520
contained the secret to unlock this

531
00:18:51,520 --> 00:18:53,760
keychain now keychain is effectively

532
00:18:53,760 --> 00:18:56,080
just a storage place that apple uses to

533
00:18:56,080 --> 00:18:57,679
contain things like certificates and

534
00:18:57,679 --> 00:18:59,760
credentials and things like that

535
00:18:59,760 --> 00:19:01,520
and now what we found particularly

536
00:19:01,520 --> 00:19:04,320
interesting is we looked for this um

537
00:19:04,320 --> 00:19:05,840
shared secret or we looked for this

538
00:19:05,840 --> 00:19:08,000
secret within the jams binary within

539
00:19:08,000 --> 00:19:10,080
every jamf environment that we touched

540
00:19:10,080 --> 00:19:12,240
as soon as we kind of found the secret

541
00:19:12,240 --> 00:19:14,160
out in the first place and we found that

542
00:19:14,160 --> 00:19:16,160
every single jamf environment had the

543
00:19:16,160 --> 00:19:18,000
same shared secret within the jamf

544
00:19:18,000 --> 00:19:20,240
binary now to kind of

545
00:19:20,240 --> 00:19:22,080
emphasize that point you see up at the

546
00:19:22,080 --> 00:19:24,000
top we actually pulled down the jamf

547
00:19:24,000 --> 00:19:27,039
binary for apple's retail and so for

548
00:19:27,039 --> 00:19:28,400
those of you that aren't familiar and

549
00:19:28,400 --> 00:19:31,360
apple stores the display and products

550
00:19:31,360 --> 00:19:32,720
that you can see they're all enrolled

551
00:19:32,720 --> 00:19:35,120
with jam for management purposes and

552
00:19:35,120 --> 00:19:38,160
we're able even able to pull the binary

553
00:19:38,160 --> 00:19:40,000
down from there look for the certificate

554
00:19:40,000 --> 00:19:41,919
within or sorry look for the secret key

555
00:19:41,919 --> 00:19:43,600
within that's used to unlock that jam

556
00:19:43,600 --> 00:19:44,640
key chain

557
00:19:44,640 --> 00:19:46,960
and again it was the same as we'd

558
00:19:46,960 --> 00:19:48,960
previously seen so we kind of confirmed

559
00:19:48,960 --> 00:19:51,039
that this was shared secret and that we

560
00:19:51,039 --> 00:19:53,280
could pull it from any um jamf binary

561
00:19:53,280 --> 00:19:56,240
within any estate would picture

562
00:19:56,240 --> 00:19:57,840
now to kind of give you an idea of

563
00:19:57,840 --> 00:20:00,400
jamf's capabilities and we can perform

564
00:20:00,400 --> 00:20:02,480
code execution on our devices through

565
00:20:02,480 --> 00:20:04,640
kind of everything you can see on screen

566
00:20:04,640 --> 00:20:06,559
and policy scripts is the main one that

567
00:20:06,559 --> 00:20:08,320
we see as well as kind of packages being

568
00:20:08,320 --> 00:20:09,520
deployed

569
00:20:09,520 --> 00:20:11,440
and in terms of camera command and

570
00:20:11,440 --> 00:20:14,480
control capabilities jamf by very nature

571
00:20:14,480 --> 00:20:17,679
is designed to check in so jamf the jamf

572
00:20:17,679 --> 00:20:19,600
agent checks into the jump pro server

573
00:20:19,600 --> 00:20:22,480
every 15 minutes um as well as the kind

574
00:20:22,480 --> 00:20:24,000
of custom triggers that you can see on

575
00:20:24,000 --> 00:20:26,720
screen just now so start up and log in

576
00:20:26,720 --> 00:20:29,120
that kind of thing

577
00:20:29,120 --> 00:20:30,880
and persistence wise if you're an

578
00:20:30,880 --> 00:20:32,640
administrator you wouldn't be too happy

579
00:20:32,640 --> 00:20:34,799
if your jamf agent stops communicating

580
00:20:34,799 --> 00:20:37,120
and by nature it needs to always be

581
00:20:37,120 --> 00:20:38,799
persisting on the device it always needs

582
00:20:38,799 --> 00:20:41,120
to be running and so we can see this

583
00:20:41,120 --> 00:20:42,960
launch demon that will always keep that

584
00:20:42,960 --> 00:20:45,200
jamf binary alive and it will keep it

585
00:20:45,200 --> 00:20:46,880
alive and it will start as soon as the

586
00:20:46,880 --> 00:20:50,240
device is kind of started

587
00:20:50,240 --> 00:20:52,000
so we've talked a little bit about what

588
00:20:52,000 --> 00:20:54,240
jamf does in some of its capabilities

589
00:20:54,240 --> 00:20:55,760
and at this point you're probably

590
00:20:55,760 --> 00:20:57,760
thinking that jamf looks as if it was

591
00:20:57,760 --> 00:21:00,960
designed to be a c2 and profile or c2

592
00:21:00,960 --> 00:21:02,640
framework and we're going to look at how

593
00:21:02,640 --> 00:21:03,919
we can actually make that happen a

594
00:21:03,919 --> 00:21:04,799
little bit

595
00:21:04,799 --> 00:21:08,000
so this is just a standard kind of scene

596
00:21:08,000 --> 00:21:09,520
that you would see a standard setup

597
00:21:09,520 --> 00:21:11,679
where we have an enrolled jam device

598
00:21:11,679 --> 00:21:13,760
periodically checking in sending device

599
00:21:13,760 --> 00:21:16,080
information to the java server and

600
00:21:16,080 --> 00:21:18,480
receiving and executing any instructions

601
00:21:18,480 --> 00:21:21,120
from the legitimate jam server now we

602
00:21:21,120 --> 00:21:22,880
want to get a little bit interesting and

603
00:21:22,880 --> 00:21:24,640
we want to get in the middle of this and

604
00:21:24,640 --> 00:21:26,960
and see how we could potentially um use

605
00:21:26,960 --> 00:21:29,360
this to our own advantage um and so

606
00:21:29,360 --> 00:21:30,960
we're going to get in the middle here

607
00:21:30,960 --> 00:21:32,720
we're going to get in between the two

608
00:21:32,720 --> 00:21:34,400
we're going to cut the jam server out

609
00:21:34,400 --> 00:21:36,240
and we're going to get that device to

610
00:21:36,240 --> 00:21:38,480
start communicating with ourselves

611
00:21:38,480 --> 00:21:41,120
now we can act like a java pro server we

612
00:21:41,120 --> 00:21:43,120
can send the request so the jamf agent

613
00:21:43,120 --> 00:21:45,360
is going to be expecting and now this

614
00:21:45,360 --> 00:21:47,280
allows us to do things like receive that

615
00:21:47,280 --> 00:21:48,960
device information that the jam from

616
00:21:48,960 --> 00:21:51,039
road device is sending out and also

617
00:21:51,039 --> 00:21:53,039
allows us to then execute

618
00:21:53,039 --> 00:21:55,120
like instructions through the jamf agent

619
00:21:55,120 --> 00:21:57,280
we can kind of abuse the functionality

620
00:21:57,280 --> 00:21:59,760
is built into that agent itself

621
00:21:59,760 --> 00:22:00,559
now

622
00:22:00,559 --> 00:22:02,720
how would we go about kind of getting

623
00:22:02,720 --> 00:22:04,400
that set up making that happen in the

624
00:22:04,400 --> 00:22:05,919
first place

625
00:22:05,919 --> 00:22:09,440
well the jamf agent listens and acts

626
00:22:09,440 --> 00:22:11,360
based on the contents of the jamf

627
00:22:11,360 --> 00:22:13,840
configuration file so you'll see the the

628
00:22:13,840 --> 00:22:15,280
kind of location in the bottom right

629
00:22:15,280 --> 00:22:17,200
here of the column jam software

630
00:22:17,200 --> 00:22:19,760
java.plist file this is just a property

631
00:22:19,760 --> 00:22:21,840
list that kind of points the jamf agent

632
00:22:21,840 --> 00:22:25,120
to the right and jamf pro server or jss

633
00:22:25,120 --> 00:22:26,400
url

634
00:22:26,400 --> 00:22:28,320
and now what if we change this

635
00:22:28,320 --> 00:22:30,720
configuration if with that single plus

636
00:22:30,720 --> 00:22:32,400
what happens if we change that and point

637
00:22:32,400 --> 00:22:34,960
it to own malicious server

638
00:22:34,960 --> 00:22:36,960
well i'll let you get creative to how we

639
00:22:36,960 --> 00:22:38,799
might do that and one example we've

640
00:22:38,799 --> 00:22:40,880
thought of and as potentially pushing a

641
00:22:40,880 --> 00:22:43,360
malicious package that when opened kind

642
00:22:43,360 --> 00:22:45,760
of deploys this and peers file to the

643
00:22:45,760 --> 00:22:48,559
default location and that jamf looks for

644
00:22:48,559 --> 00:22:50,080
its configuration

645
00:22:50,080 --> 00:22:51,679
and at which point we can change the

646
00:22:51,679 --> 00:22:54,240
contents of that configuration and cause

647
00:22:54,240 --> 00:22:56,240
the jamf agent to communicate with our

648
00:22:56,240 --> 00:22:58,559
server or whatever we want to to kind of

649
00:22:58,559 --> 00:23:01,120
imitate it as

650
00:23:01,120 --> 00:23:04,559
and so we have our second um mythic seto

651
00:23:04,559 --> 00:23:06,000
profiling agent that we're going to be

652
00:23:06,000 --> 00:23:08,080
releasing today and now introducing

653
00:23:08,080 --> 00:23:11,039
typhon and typhon is effectively

654
00:23:11,039 --> 00:23:14,240
imitating the native behavior of a jamf

655
00:23:14,240 --> 00:23:16,720
pro server now the payload itself is

656
00:23:16,720 --> 00:23:18,960
pretty simple it is a jam configuration

657
00:23:18,960 --> 00:23:20,799
file that comes in a p list

658
00:23:20,799 --> 00:23:22,400
as we've said you can deliver that

659
00:23:22,400 --> 00:23:24,240
however you like or you can customize it

660
00:23:24,240 --> 00:23:26,559
however you like and all we really need

661
00:23:26,559 --> 00:23:28,400
to do here is get that jamf agent

662
00:23:28,400 --> 00:23:30,720
pointing to our mythic profile which

663
00:23:30,720 --> 00:23:32,400
will then be able to handle all the

664
00:23:32,400 --> 00:23:34,640
incoming requests and effectively

665
00:23:34,640 --> 00:23:37,520
imitate a legitimate jam server

666
00:23:37,520 --> 00:23:39,440
so a quick example as to how this might

667
00:23:39,440 --> 00:23:40,400
look

668
00:23:40,400 --> 00:23:42,400
and we've got our typhon agent here on

669
00:23:42,400 --> 00:23:44,880
screen as you can see um we're going to

670
00:23:44,880 --> 00:23:46,559
kind of skip through the halo creation

671
00:23:46,559 --> 00:23:48,080
we've seen this before we're just

672
00:23:48,080 --> 00:23:50,320
creating a mac os payload and the

673
00:23:50,320 --> 00:23:52,400
typhoon agent we're going to point it to

674
00:23:52,400 --> 00:23:54,159
our mythic server that's going to be

675
00:23:54,159 --> 00:23:56,000
acting as the jam server

676
00:23:56,000 --> 00:23:58,720
and we are then going to rename the

677
00:23:58,720 --> 00:24:00,400
plist that's going to be created to the

678
00:24:00,400 --> 00:24:01,840
same name as the default jam

679
00:24:01,840 --> 00:24:03,440
configuration file

680
00:24:03,440 --> 00:24:05,840
and and we're then just going to kind of

681
00:24:05,840 --> 00:24:07,360
export it we're just going to add in an

682
00:24:07,360 --> 00:24:09,520
example command just now

683
00:24:09,520 --> 00:24:11,200
so accept that risk down the page

684
00:24:11,200 --> 00:24:13,520
download payload and we're then going to

685
00:24:13,520 --> 00:24:15,360
we've pre-packaged just to save time

686
00:24:15,360 --> 00:24:18,400
here a package containing that p list

687
00:24:18,400 --> 00:24:20,320
once the user enters their password that

688
00:24:20,320 --> 00:24:22,320
package is going to drop that jam

689
00:24:22,320 --> 00:24:24,320
configuration file into the right place

690
00:24:24,320 --> 00:24:26,240
for jump would expect it

691
00:24:26,240 --> 00:24:27,919
and you can see here if we look at the

692
00:24:27,919 --> 00:24:30,080
contents you can see that's the string

693
00:24:30,080 --> 00:24:31,919
we just entered there which is our

694
00:24:31,919 --> 00:24:33,600
mythic server

695
00:24:33,600 --> 00:24:35,760
so if we clear that we're now going to

696
00:24:35,760 --> 00:24:38,080
manually get jamf to check in and we

697
00:24:38,080 --> 00:24:40,080
could wait 15 minutes or so for it to

698
00:24:40,080 --> 00:24:42,159
check in itself however this for the

699
00:24:42,159 --> 00:24:43,679
sake of the demonstration is a lot

700
00:24:43,679 --> 00:24:46,000
easier and we can see we've now got a

701
00:24:46,000 --> 00:24:47,279
call back

702
00:24:47,279 --> 00:24:49,360
if we go and look at the callback and

703
00:24:49,360 --> 00:24:52,159
you'll see that we have a nice callback

704
00:24:52,159 --> 00:24:53,919
from the jump and roll device we've just

705
00:24:53,919 --> 00:24:56,080
kind of changed the configuration off

706
00:24:56,080 --> 00:24:57,600
so we're going to execute a script here

707
00:24:57,600 --> 00:24:59,279
and you can pass either a full script

708
00:24:59,279 --> 00:25:01,120
here or you can pass just the command as

709
00:25:01,120 --> 00:25:03,039
i have and so we're just going to call

710
00:25:03,039 --> 00:25:05,600
ifconfig just to see what the interface

711
00:25:05,600 --> 00:25:08,000
uh looks like and we're going to cause

712
00:25:08,000 --> 00:25:09,919
the jamf agent to check back in again

713
00:25:09,919 --> 00:25:11,600
and as you can see it's now processing

714
00:25:11,600 --> 00:25:14,400
the request and returning the content

715
00:25:14,400 --> 00:25:17,520
from the jam and old device

716
00:25:17,520 --> 00:25:19,679
okay so we've now covered everything

717
00:25:19,679 --> 00:25:22,240
we've got on c2 and abusing these

718
00:25:22,240 --> 00:25:23,600
frameworks we're not going to move on

719
00:25:23,600 --> 00:25:25,279
something slightly different and but

720
00:25:25,279 --> 00:25:26,480
before we do get into the kind of the

721
00:25:26,480 --> 00:25:27,679
meat of this we need a little bit of

722
00:25:27,679 --> 00:25:30,240
prerequisites on function hooking

723
00:25:30,240 --> 00:25:32,640
specifically in objective c

724
00:25:32,640 --> 00:25:34,799
so the why why would we look at

725
00:25:34,799 --> 00:25:36,880
something like this well it allows us to

726
00:25:36,880 --> 00:25:38,480
instrument a

727
00:25:38,480 --> 00:25:40,480
pre-built binary with our own code we

728
00:25:40,480 --> 00:25:42,159
can change the functionality we can add

729
00:25:42,159 --> 00:25:43,760
debug messages

730
00:25:43,760 --> 00:25:45,360
and just generally play with the

731
00:25:45,360 --> 00:25:46,640
internals

732
00:25:46,640 --> 00:25:49,360
so to do this we use the command um at

733
00:25:49,360 --> 00:25:50,960
the bottom of the screen here so the

734
00:25:50,960 --> 00:25:52,720
dialid insert libraries environment

735
00:25:52,720 --> 00:25:55,120
variable will load a dialog that's

736
00:25:55,120 --> 00:25:57,919
specified here and into whatever

737
00:25:57,919 --> 00:25:59,440
application we run

738
00:25:59,440 --> 00:26:02,080
at runtime

739
00:26:02,080 --> 00:26:03,440
so

740
00:26:03,440 --> 00:26:06,480
on a fully protected mac os system by

741
00:26:06,480 --> 00:26:08,960
default this will not be possible so i'm

742
00:26:08,960 --> 00:26:10,159
calm alluded to it at the start of the

743
00:26:10,159 --> 00:26:12,720
presentation but sip is a mac os control

744
00:26:12,720 --> 00:26:14,960
and that enforces the hardened runtime

745
00:26:14,960 --> 00:26:17,600
which is something that you can compile

746
00:26:17,600 --> 00:26:19,600
as a compilation flag that you can

747
00:26:19,600 --> 00:26:22,240
compile into an application and this

748
00:26:22,240 --> 00:26:24,799
protects the runtime integrity of any

749
00:26:24,799 --> 00:26:27,039
process where it's enabled and that

750
00:26:27,039 --> 00:26:29,760
includes things like code injection and

751
00:26:29,760 --> 00:26:31,679
dll injection like we need to do for a

752
00:26:31,679 --> 00:26:33,919
lot of the concepts um discussed in this

753
00:26:33,919 --> 00:26:36,159
section so for this section um you can

754
00:26:36,159 --> 00:26:38,400
turn sip off just to kind of have a play

755
00:26:38,400 --> 00:26:40,640
with these things and we'll show you how

756
00:26:40,640 --> 00:26:42,559
we kind of get around this problem um in

757
00:26:42,559 --> 00:26:45,440
the last couple of sections

758
00:26:45,440 --> 00:26:47,039
so for this toy example we're going to

759
00:26:47,039 --> 00:26:49,360
look at calculator app and specifically

760
00:26:49,360 --> 00:26:50,960
we're really interested in this function

761
00:26:50,960 --> 00:26:53,600
here the set lcd string value function

762
00:26:53,600 --> 00:26:54,559
and this is the function that's

763
00:26:54,559 --> 00:26:56,400
responsible for taking a string and for

764
00:26:56,400 --> 00:26:57,760
outputting it as the result on the

765
00:26:57,760 --> 00:26:59,760
calculator application so usually this

766
00:26:59,760 --> 00:27:00,960
would be kind of the result of your

767
00:27:00,960 --> 00:27:03,360
equation

768
00:27:03,440 --> 00:27:05,039
so we're going to do something here

769
00:27:05,039 --> 00:27:06,799
called swizzling now i wish i made this

770
00:27:06,799 --> 00:27:08,880
termite myself because it's great but

771
00:27:08,880 --> 00:27:10,320
this is an actual

772
00:27:10,320 --> 00:27:12,720
real term that's uh well before we

773
00:27:12,720 --> 00:27:14,159
started looking at this i mean it's

774
00:27:14,159 --> 00:27:15,440
something that actual objective c

775
00:27:15,440 --> 00:27:16,960
developers use

776
00:27:16,960 --> 00:27:19,200
um and it's all about

777
00:27:19,200 --> 00:27:22,240
the association between selector and

778
00:27:22,240 --> 00:27:24,720
implementation of that function and so

779
00:27:24,720 --> 00:27:26,559
what does this actually look like when

780
00:27:26,559 --> 00:27:28,640
we inject our dialog it's going to call

781
00:27:28,640 --> 00:27:30,320
the load function which is going to

782
00:27:30,320 --> 00:27:32,159
start excusing our code

783
00:27:32,159 --> 00:27:33,919
inside of this we're going to get a

784
00:27:33,919 --> 00:27:36,000
handle to the our target method we're

785
00:27:36,000 --> 00:27:39,919
going to add a new method to the class

786
00:27:39,919 --> 00:27:42,000
we're going to get a handle to add the

787
00:27:42,000 --> 00:27:43,360
swizzle method the new one that we've

788
00:27:43,360 --> 00:27:45,039
added and then we're going to call

789
00:27:45,039 --> 00:27:46,480
method underscore exchange

790
00:27:46,480 --> 00:27:49,679
implementations which is a c

791
00:27:49,679 --> 00:27:52,080
objective c runtime function

792
00:27:52,080 --> 00:27:54,480
that will swap these and the

793
00:27:54,480 --> 00:27:56,880
implementations of these two functions

794
00:27:56,880 --> 00:27:58,720
so what does that actually do under the

795
00:27:58,720 --> 00:27:59,760
hood

796
00:27:59,760 --> 00:28:00,880
so

797
00:28:00,880 --> 00:28:02,320
to understand this we need to know a

798
00:28:02,320 --> 00:28:04,000
little bit about objective how objective

799
00:28:04,000 --> 00:28:06,640
c works so a selector is what we've got

800
00:28:06,640 --> 00:28:09,679
in the top left here um and it's a

801
00:28:09,679 --> 00:28:11,520
string that identifies a function in a

802
00:28:11,520 --> 00:28:14,840
class so the set lcd string value inputs

803
00:28:14,840 --> 00:28:17,919
selector and points to a

804
00:28:17,919 --> 00:28:20,399
implementation natural function code um

805
00:28:20,399 --> 00:28:22,640
for our objective c binary and that's

806
00:28:22,640 --> 00:28:24,559
stored in memory uh in the structure

807
00:28:24,559 --> 00:28:26,000
that you can see in the bottom left here

808
00:28:26,000 --> 00:28:28,720
so tying that value to our actual

809
00:28:28,720 --> 00:28:31,279
function code and the method we called

810
00:28:31,279 --> 00:28:33,200
to exchange the implementations here

811
00:28:33,200 --> 00:28:35,039
very simply just takes both of these

812
00:28:35,039 --> 00:28:37,200
selectors and it swaps those two

813
00:28:37,200 --> 00:28:39,520
indentations so they point at each other

814
00:28:39,520 --> 00:28:41,279
and what this means in practice is that

815
00:28:41,279 --> 00:28:43,120
when that original function is called it

816
00:28:43,120 --> 00:28:45,120
will actually call our custom code that

817
00:28:45,120 --> 00:28:47,520
we've put into the binary

818
00:28:47,520 --> 00:28:49,600
so what custom code can that be and well

819
00:28:49,600 --> 00:28:50,880
it can pretty much be anything we want

820
00:28:50,880 --> 00:28:52,240
you know if we want to add more

821
00:28:52,240 --> 00:28:54,480
information in terms of output or kind

822
00:28:54,480 --> 00:28:56,320
of change functionality

823
00:28:56,320 --> 00:28:57,600
and

824
00:28:57,600 --> 00:28:58,799
people that are paying attention will

825
00:28:58,799 --> 00:29:00,559
look at this and say that's not valid

826
00:29:00,559 --> 00:29:02,000
code you can't do that

827
00:29:02,000 --> 00:29:03,679
um

828
00:29:03,679 --> 00:29:05,279
but actually those that pay even more

829
00:29:05,279 --> 00:29:07,679
attention will notice that or will

830
00:29:07,679 --> 00:29:09,120
remember that we've actually swapped the

831
00:29:09,120 --> 00:29:11,200
implementation of these functions so the

832
00:29:11,200 --> 00:29:14,320
swizzle understore underscore set lcd

833
00:29:14,320 --> 00:29:16,480
string value function actually points to

834
00:29:16,480 --> 00:29:18,080
our original function so this is

835
00:29:18,080 --> 00:29:20,559
perfectly valid code

836
00:29:20,559 --> 00:29:22,799
so putting all of this together what do

837
00:29:22,799 --> 00:29:26,399
we have and we have a calculator that we

838
00:29:26,399 --> 00:29:28,320
control some of the code

839
00:29:28,320 --> 00:29:30,320
so we give our secret value and we get

840
00:29:30,320 --> 00:29:33,279
our secret output

841
00:29:33,760 --> 00:29:36,000
okay so i did promise you that we would

842
00:29:36,000 --> 00:29:37,600
get distracted at some point during this

843
00:29:37,600 --> 00:29:39,279
and however i also promised that we

844
00:29:39,279 --> 00:29:41,200
would get back on track and tell you why

845
00:29:41,200 --> 00:29:43,039
this all mattered so we're going to

846
00:29:43,039 --> 00:29:44,720
start looking at how we can get past

847
00:29:44,720 --> 00:29:46,159
some of the restrictions that look

848
00:29:46,159 --> 00:29:48,559
mentioned that sip kind of enforces on

849
00:29:48,559 --> 00:29:50,799
devices so we're going to try stealing

850
00:29:50,799 --> 00:29:52,240
some secrets from set protected

851
00:29:52,240 --> 00:29:54,960
processes now you may be wondering what

852
00:29:54,960 --> 00:29:56,480
kind of secrets we're after and the

853
00:29:56,480 --> 00:29:58,640
answer is all of them and it's not a

854
00:29:58,640 --> 00:30:00,480
good hacking presentation unless you you

855
00:30:00,480 --> 00:30:02,399
manage to get your hands on everything

856
00:30:02,399 --> 00:30:04,000
and we've been frustrated in the past

857
00:30:04,000 --> 00:30:05,760
about certain areas that seemed a little

858
00:30:05,760 --> 00:30:07,679
bit um off boundaries so we're gonna

859
00:30:07,679 --> 00:30:09,919
have a look at how we can gain access to

860
00:30:09,919 --> 00:30:11,200
things like management account

861
00:30:11,200 --> 00:30:13,120
credentials as well as potentially uh

862
00:30:13,120 --> 00:30:14,960
kind of active directory credentials as

863
00:30:14,960 --> 00:30:16,720
well

864
00:30:16,720 --> 00:30:18,559
so the big question is where are these

865
00:30:18,559 --> 00:30:20,720
secrets um unfortunately the answer

866
00:30:20,720 --> 00:30:23,120
isn't one place we've shown in previous

867
00:30:23,120 --> 00:30:24,960
talks that we can gain access to custom

868
00:30:24,960 --> 00:30:26,720
scripts and any credentials or secrets

869
00:30:26,720 --> 00:30:28,960
in there and we're now going to look at

870
00:30:28,960 --> 00:30:31,039
those last two kind of java payloads i

871
00:30:31,039 --> 00:30:33,520
talked about earlier the native payloads

872
00:30:33,520 --> 00:30:36,480
and the mdm payloads themselves

873
00:30:36,480 --> 00:30:38,799
so as i mentioned we broke custom

874
00:30:38,799 --> 00:30:40,720
scripts last year objective by the sea

875
00:30:40,720 --> 00:30:44,480
version 3 and 2020 and this is as the

876
00:30:44,480 --> 00:30:46,880
two summer guys in the middle uh that

877
00:30:46,880 --> 00:30:49,120
you can see there and the long and short

878
00:30:49,120 --> 00:30:51,279
of this presentation was any secrets

879
00:30:51,279 --> 00:30:52,880
that you pass within kind of scripts

880
00:30:52,880 --> 00:30:54,559
whether it's in the body or whether it's

881
00:30:54,559 --> 00:30:57,440
in the parameter we can get access to so

882
00:30:57,440 --> 00:30:59,600
just no no don't put secrets and scripts

883
00:30:59,600 --> 00:31:01,840
that are going to end up on user devices

884
00:31:01,840 --> 00:31:04,159
um as a kind of sore point for ourselves

885
00:31:04,159 --> 00:31:06,320
just to reinforce this is still not

886
00:31:06,320 --> 00:31:08,559
acceptable um it's still not a secure

887
00:31:08,559 --> 00:31:10,880
implementation of encrypting things but

888
00:31:10,880 --> 00:31:12,480
then putting the encryption keys within

889
00:31:12,480 --> 00:31:15,279
the body of the script and it might have

890
00:31:15,279 --> 00:31:16,799
some benefits but it still doesn't

891
00:31:16,799 --> 00:31:19,360
qualify as secure so end of that run and

892
00:31:19,360 --> 00:31:22,080
i'm sure we can move on from there

893
00:31:22,080 --> 00:31:23,600
so we're going to talk about some new

894
00:31:23,600 --> 00:31:25,279
research though uh we're going to talk

895
00:31:25,279 --> 00:31:26,399
about something that luke and i have

896
00:31:26,399 --> 00:31:28,320
been calling and device impersonation

897
00:31:28,320 --> 00:31:29,519
attacks

898
00:31:29,519 --> 00:31:31,440
now we're going to just kind of set the

899
00:31:31,440 --> 00:31:34,159
scene uh we have got onto a device

900
00:31:34,159 --> 00:31:35,440
that's enrolled within a jamf

901
00:31:35,440 --> 00:31:37,039
environment we've compromised that

902
00:31:37,039 --> 00:31:38,720
user's device their uh local

903
00:31:38,720 --> 00:31:41,919
administrator and on that device and we

904
00:31:41,919 --> 00:31:43,519
effectively want to either escalate or

905
00:31:43,519 --> 00:31:44,640
privilege

906
00:31:44,640 --> 00:31:47,120
privileges or gain some information that

907
00:31:47,120 --> 00:31:48,720
will allow us to to laterally move

908
00:31:48,720 --> 00:31:50,720
within the network

909
00:31:50,720 --> 00:31:51,600
now

910
00:31:51,600 --> 00:31:53,279
we mentioned that kind of a device

911
00:31:53,279 --> 00:31:55,679
authentication model that jamf has with

912
00:31:55,679 --> 00:31:56,960
its devices

913
00:31:56,960 --> 00:31:58,960
and the the kind of java keychain and

914
00:31:58,960 --> 00:32:00,720
and the kind of process we walk through

915
00:32:00,720 --> 00:32:03,600
there and now for that full process to

916
00:32:03,600 --> 00:32:06,640
work to fully um authenticate to jamf

917
00:32:06,640 --> 00:32:08,159
and demonstrate you are who you say you

918
00:32:08,159 --> 00:32:10,399
are jamf requires that you have first

919
00:32:10,399 --> 00:32:13,360
the device certificate and secondly the

920
00:32:13,360 --> 00:32:15,679
hardware uuid that can be gained with

921
00:32:15,679 --> 00:32:18,320
the command on the screen there

922
00:32:18,320 --> 00:32:20,320
now we can quite easily get access to

923
00:32:20,320 --> 00:32:22,000
all this information as we previously

924
00:32:22,000 --> 00:32:24,480
discussed so we're now in the scenario

925
00:32:24,480 --> 00:32:26,080
where we're going to steal the device

926
00:32:26,080 --> 00:32:28,000
certificate and the jammed keychain from

927
00:32:28,000 --> 00:32:29,360
the device

928
00:32:29,360 --> 00:32:32,159
and we're also going to steal the uuid

929
00:32:32,159 --> 00:32:34,000
now if we take that information over to

930
00:32:34,000 --> 00:32:36,080
our actual device the device where we're

931
00:32:36,080 --> 00:32:38,240
sitting on and we can then start

932
00:32:38,240 --> 00:32:40,320
communicating with the java pro server

933
00:32:40,320 --> 00:32:43,440
so we can say hello i am one of your

934
00:32:43,440 --> 00:32:45,519
legitimate devices i want you to send me

935
00:32:45,519 --> 00:32:48,159
all the policies and specifically i want

936
00:32:48,159 --> 00:32:50,559
you to configure my local admin account

937
00:32:50,559 --> 00:32:52,720
so the jamf management account

938
00:32:52,720 --> 00:32:54,880
now we can provide

939
00:32:54,880 --> 00:32:56,720
jump with the necessary information is

940
00:32:56,720 --> 00:32:58,880
to verify we are who we say we are we

941
00:32:58,880 --> 00:33:01,440
can provide the uuid uh we can ride the

942
00:33:01,440 --> 00:33:03,600
jam certificate or sorry the jump key

943
00:33:03,600 --> 00:33:05,279
chain which contains our device

944
00:33:05,279 --> 00:33:07,519
certificate and as such jamf has no

945
00:33:07,519 --> 00:33:09,919
reason not to trust we are who we say we

946
00:33:09,919 --> 00:33:10,960
are

947
00:33:10,960 --> 00:33:12,799
now you're probably wondering why would

948
00:33:12,799 --> 00:33:15,200
we want to act as another device from

949
00:33:15,200 --> 00:33:17,679
our attacker machine well as we

950
00:33:17,679 --> 00:33:19,440
discussed earlier apple has a lot of

951
00:33:19,440 --> 00:33:21,519
inbuilt security controls such as sip

952
00:33:21,519 --> 00:33:23,360
that may prevent us from performing

953
00:33:23,360 --> 00:33:25,279
certain attacks such as interacting with

954
00:33:25,279 --> 00:33:26,480
processes

955
00:33:26,480 --> 00:33:28,720
however if we're able to interact with

956
00:33:28,720 --> 00:33:31,200
jamf as another device within our

957
00:33:31,200 --> 00:33:33,760
machine we get to set the playing field

958
00:33:33,760 --> 00:33:35,760
so we get to see what security controls

959
00:33:35,760 --> 00:33:37,919
are enabled and what restrictions may

960
00:33:37,919 --> 00:33:39,679
prevent any of our kind of future

961
00:33:39,679 --> 00:33:40,720
attacks

962
00:33:40,720 --> 00:33:43,440
and so namely here we want to

963
00:33:43,440 --> 00:33:45,679
be able to disable sip communicate with

964
00:33:45,679 --> 00:33:48,080
jamf and as such directly interact with

965
00:33:48,080 --> 00:33:50,240
the jamf agent and to pull out any

966
00:33:50,240 --> 00:33:52,720
secrets that might be in there

967
00:33:52,720 --> 00:33:55,440
so how does this work in reality um well

968
00:33:55,440 --> 00:33:58,320
if we steal the hardware uuid and we can

969
00:33:58,320 --> 00:34:00,480
then set that within a virtual machine

970
00:34:00,480 --> 00:34:02,640
we can then drop the jam con key chain

971
00:34:02,640 --> 00:34:04,399
file into where jump would expect to

972
00:34:04,399 --> 00:34:07,360
look for it and we can hook the jamf

973
00:34:07,360 --> 00:34:09,119
agent as we don't have those kind of

974
00:34:09,119 --> 00:34:11,440
protections offered by sip

975
00:34:11,440 --> 00:34:13,199
now what is the kind of use case of this

976
00:34:13,199 --> 00:34:15,440
why is this useful well picture those

977
00:34:15,440 --> 00:34:16,800
credentials that have been pushed to the

978
00:34:16,800 --> 00:34:19,280
device imagine we get our hands on those

979
00:34:19,280 --> 00:34:21,199
credentials as the kind of plain text

980
00:34:21,199 --> 00:34:23,760
thing what happens if that credential as

981
00:34:23,760 --> 00:34:25,359
we've discussed in the past is shared

982
00:34:25,359 --> 00:34:27,599
across all of the jamf devices enrolled

983
00:34:27,599 --> 00:34:29,199
within that estate

984
00:34:29,199 --> 00:34:31,359
and we also see things like distribution

985
00:34:31,359 --> 00:34:33,918
points which are the shares in which um

986
00:34:33,918 --> 00:34:36,239
jamf will tell a device to go and pull

987
00:34:36,239 --> 00:34:38,320
certain packages from if we can gain

988
00:34:38,320 --> 00:34:40,079
access to the full contents of those

989
00:34:40,079 --> 00:34:42,239
shares by accessing the distribution

990
00:34:42,239 --> 00:34:43,760
point credentials

991
00:34:43,760 --> 00:34:46,159
and lastly is local jump into in a bit

992
00:34:46,159 --> 00:34:49,119
and we often see devices being binded

993
00:34:49,119 --> 00:34:51,520
with active directory using kind of

994
00:34:51,520 --> 00:34:53,599
active directory bind credentials so

995
00:34:53,599 --> 00:34:54,960
there's the potential for lateral

996
00:34:54,960 --> 00:34:57,119
movement there

997
00:34:57,119 --> 00:34:59,440
so now we know a little bit about how to

998
00:34:59,440 --> 00:35:01,119
get all these secrets inside the jump

999
00:35:01,119 --> 00:35:03,680
platform we're going to extend this to

1000
00:35:03,680 --> 00:35:05,359
mdm and one kind of

1001
00:35:05,359 --> 00:35:07,599
a last tree on this presentation

1002
00:35:07,599 --> 00:35:08,720
so

1003
00:35:08,720 --> 00:35:10,079
jamf has the ability to push

1004
00:35:10,079 --> 00:35:12,560
configuration profiles over mdm

1005
00:35:12,560 --> 00:35:14,800
um and include within the mdm spec is

1006
00:35:14,800 --> 00:35:17,359
the ability to bind to active directory

1007
00:35:17,359 --> 00:35:19,760
and the scenario that we were in um was

1008
00:35:19,760 --> 00:35:21,200
that we'd compromise pretty much every

1009
00:35:21,200 --> 00:35:22,960
other credential but we really wanted to

1010
00:35:22,960 --> 00:35:25,359
pivot into the ads state and this is the

1011
00:35:25,359 --> 00:35:27,599
credential that we wanted to do

1012
00:35:27,599 --> 00:35:28,560
so

1013
00:35:28,560 --> 00:35:30,160
a bit of background on this so to buy

1014
00:35:30,160 --> 00:35:32,160
into active directory you need an

1015
00:35:32,160 --> 00:35:34,320
account to do so and these credentials

1016
00:35:34,320 --> 00:35:36,160
are just used once like fire and forget

1017
00:35:36,160 --> 00:35:38,079
and to create the computer object and

1018
00:35:38,079 --> 00:35:39,839
kind of set things up

1019
00:35:39,839 --> 00:35:41,760
um

1020
00:35:41,760 --> 00:35:44,079
the privilege required for this account

1021
00:35:44,079 --> 00:35:45,040
um

1022
00:35:45,040 --> 00:35:46,079
is

1023
00:35:46,079 --> 00:35:48,400
more so than would be required in a

1024
00:35:48,400 --> 00:35:50,160
normal windows environment so there's no

1025
00:35:50,160 --> 00:35:51,839
like a machine account quota there's an

1026
00:35:51,839 --> 00:35:54,400
apply here and you need to have missions

1027
00:35:54,400 --> 00:35:55,680
to create the object and a few other

1028
00:35:55,680 --> 00:35:56,640
things

1029
00:35:56,640 --> 00:35:59,280
um for that reason the account put here

1030
00:35:59,280 --> 00:36:01,200
is often very privileged and this

1031
00:36:01,200 --> 00:36:03,520
particular um

1032
00:36:03,520 --> 00:36:05,280
piece of text here is from the apple

1033
00:36:05,280 --> 00:36:07,680
official documentation and

1034
00:36:07,680 --> 00:36:09,040
i guess it could be taken a few weeks

1035
00:36:09,040 --> 00:36:10,400
but at least when i read this for the

1036
00:36:10,400 --> 00:36:12,320
first time it says you know the active

1037
00:36:12,320 --> 00:36:13,920
directory domain administrator might

1038
00:36:13,920 --> 00:36:15,599
need to give you a name and password

1039
00:36:15,599 --> 00:36:16,880
that suggests to me that there's a lot

1040
00:36:16,880 --> 00:36:18,960
of da creds sitting around in these ad

1041
00:36:18,960 --> 00:36:21,200
bind profiles

1042
00:36:21,200 --> 00:36:23,200
so what can we do well

1043
00:36:23,200 --> 00:36:25,119
step one we exploit the same device

1044
00:36:25,119 --> 00:36:27,119
impersonation against the target

1045
00:36:27,119 --> 00:36:29,359
step two and we need to configure the

1046
00:36:29,359 --> 00:36:31,200
mdm daemon to load our dialog and

1047
00:36:31,200 --> 00:36:32,480
there's a few things here we need to do

1048
00:36:32,480 --> 00:36:34,079
to weaken this slightly

1049
00:36:34,079 --> 00:36:35,359
and but i'll go on to say that in a

1050
00:36:35,359 --> 00:36:37,440
second and then step three we're going

1051
00:36:37,440 --> 00:36:39,680
to run the jamf mdm command and this is

1052
00:36:39,680 --> 00:36:42,079
going to set us up with a jam

1053
00:36:42,079 --> 00:36:44,960
sorry with an mdm profile and sync all

1054
00:36:44,960 --> 00:36:46,400
of the policies to us and all of the

1055
00:36:46,400 --> 00:36:48,240
profiles to us

1056
00:36:48,240 --> 00:36:50,720
and in doing so we'll get all of the

1057
00:36:50,720 --> 00:36:53,040
policies and profiles down to the device

1058
00:36:53,040 --> 00:36:54,720
and including the ad bind one we're

1059
00:36:54,720 --> 00:36:56,960
after and that dialogue is going to dump

1060
00:36:56,960 --> 00:37:00,160
all of the credentials that pass through

1061
00:37:00,160 --> 00:37:03,200
so what does this look like in practice

1062
00:37:03,200 --> 00:37:05,680
well the scenario here um we've already

1063
00:37:05,680 --> 00:37:07,280
done the device impersonation so that's

1064
00:37:07,280 --> 00:37:09,839
the hardware uid that's been spoofed

1065
00:37:09,839 --> 00:37:10,800
and

1066
00:37:10,800 --> 00:37:12,960
no profiles are installed at the moment

1067
00:37:12,960 --> 00:37:14,640
and you'll see here we've got the jamf

1068
00:37:14,640 --> 00:37:16,000
keychain

1069
00:37:16,000 --> 00:37:17,760
installed in the jamf application

1070
00:37:17,760 --> 00:37:20,079
support directory

1071
00:37:20,079 --> 00:37:21,359
so we're all set up from a jam

1072
00:37:21,359 --> 00:37:22,800
perspective

1073
00:37:22,800 --> 00:37:24,880
um but what about from an mdm client

1074
00:37:24,880 --> 00:37:26,880
perspective so we need to weaken the

1075
00:37:26,880 --> 00:37:29,359
configuration of the mdm client here so

1076
00:37:29,359 --> 00:37:31,520
that we can load down malicious dialog

1077
00:37:31,520 --> 00:37:33,839
so we start by unloading the system mdm

1078
00:37:33,839 --> 00:37:34,720
client

1079
00:37:34,720 --> 00:37:37,839
and this is uh sorry and then we copy

1080
00:37:37,839 --> 00:37:39,839
this to our own user writeable location

1081
00:37:39,839 --> 00:37:42,000
and this is the case because the uh

1082
00:37:42,000 --> 00:37:44,000
launch daemon configuration for mdm

1083
00:37:44,000 --> 00:37:46,400
clients just normally um lives on a

1084
00:37:46,400 --> 00:37:48,800
read-only file system so we copy it to a

1085
00:37:48,800 --> 00:37:50,400
place where we can write it

1086
00:37:50,400 --> 00:37:52,320
and we start playing with the launch

1087
00:37:52,320 --> 00:37:54,560
daemon config so there's a key called

1088
00:37:54,560 --> 00:37:56,720
environment variables as you've probably

1089
00:37:56,720 --> 00:37:58,400
guessed we're going to use dialog insert

1090
00:37:58,400 --> 00:38:01,599
libraries to load our daily here

1091
00:38:01,599 --> 00:38:03,440
and we'll pop these keys in and then

1092
00:38:03,440 --> 00:38:05,599
we'll save this

1093
00:38:05,599 --> 00:38:08,640
we'll now load this um

1094
00:38:08,640 --> 00:38:09,920
so that launch

1095
00:38:09,920 --> 00:38:13,680
d picks it up as a new launch daemon

1096
00:38:13,680 --> 00:38:15,440
and then from an mdm client perspective

1097
00:38:15,440 --> 00:38:17,920
we're sorted here and also to note we've

1098
00:38:17,920 --> 00:38:20,480
disabled sip and we've also disabled

1099
00:38:20,480 --> 00:38:22,320
library validation here as well which we

1100
00:38:22,320 --> 00:38:24,560
can see with the uh with the one coming

1101
00:38:24,560 --> 00:38:27,200
back from that

1102
00:38:27,359 --> 00:38:28,240
so

1103
00:38:28,240 --> 00:38:29,760
uh dialog is going to be loaded we're

1104
00:38:29,760 --> 00:38:32,480
all set up with jamf so we run jamf mdm

1105
00:38:32,480 --> 00:38:34,480
this is going to sync our profile we can

1106
00:38:34,480 --> 00:38:37,760
see that the mdm client starts running

1107
00:38:37,760 --> 00:38:38,560
and

1108
00:38:38,560 --> 00:38:40,079
we're going to skip a few steps here

1109
00:38:40,079 --> 00:38:41,119
just well let's give a little bit of

1110
00:38:41,119 --> 00:38:42,720
time while we wait for the policies to

1111
00:38:42,720 --> 00:38:44,480
be synced um

1112
00:38:44,480 --> 00:38:47,119
but alas our dialup is loaded we get all

1113
00:38:47,119 --> 00:38:48,960
our information and we can see in the

1114
00:38:48,960 --> 00:38:50,480
output that we've got our active

1115
00:38:50,480 --> 00:38:52,560
directory credentials and from here we

1116
00:38:52,560 --> 00:38:55,280
can pivot into the idea state and uh uh

1117
00:38:55,280 --> 00:38:57,920
wreak some havoc there as well

1118
00:38:57,920 --> 00:38:59,440
so how bad is it

1119
00:38:59,440 --> 00:39:00,960
so most of these attacks cannot be

1120
00:39:00,960 --> 00:39:02,560
mitigated by configuration they're

1121
00:39:02,560 --> 00:39:04,079
absolutely fundamental to the way these

1122
00:39:04,079 --> 00:39:05,440
platforms work

1123
00:39:05,440 --> 00:39:07,040
and but the good news is that the

1124
00:39:07,040 --> 00:39:08,880
follow-on attacks can be mitigated so

1125
00:39:08,880 --> 00:39:10,560
for example not having shared local

1126
00:39:10,560 --> 00:39:12,800
admin and putting your lowest

1127
00:39:12,800 --> 00:39:14,480
permissions possible on your ad bind

1128
00:39:14,480 --> 00:39:15,920
account

1129
00:39:15,920 --> 00:39:16,640
so

1130
00:39:16,640 --> 00:39:18,800
that's it that's all we've got for you

1131
00:39:18,800 --> 00:39:20,720
and if there's any questions you can

1132
00:39:20,720 --> 00:39:23,760
contact us on twitter

1133
00:39:23,760 --> 00:39:26,400
underscore callum hall and ruku

1134
00:39:26,400 --> 00:39:28,720
underscore we also on bloodhound gang

1135
00:39:28,720 --> 00:39:30,800
slack and keep an eye on those links for

1136
00:39:30,800 --> 00:39:31,920
some good stuff coming in the next

1137
00:39:31,920 --> 00:39:33,680
couple of months thank you very much for

1138
00:39:33,680 --> 00:39:37,640
listening thanks everyone

