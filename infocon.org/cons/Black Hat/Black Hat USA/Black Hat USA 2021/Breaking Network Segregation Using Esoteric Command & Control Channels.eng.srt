1
00:00:01,130 --> 00:00:14,480
[Music]

2
00:00:14,480 --> 00:00:16,320
hello and welcome to our talk breaking

3
00:00:16,320 --> 00:00:18,640
network segregation using esoteric

4
00:00:18,640 --> 00:00:20,880
commander control channels

5
00:00:20,880 --> 00:00:22,720
a quick introduction my name is james

6
00:00:22,720 --> 00:00:24,320
coote i'm a senior consultant at

7
00:00:24,320 --> 00:00:26,800
f-secure here in the uk and likewise i'm

8
00:00:26,800 --> 00:00:28,160
matthew champion and i too am a senior

9
00:00:28,160 --> 00:00:29,760
consultant

10
00:00:29,760 --> 00:00:31,039
we've got quite a packed agenda for you

11
00:00:31,039 --> 00:00:32,399
today so we're going to jump into the

12
00:00:32,399 --> 00:00:34,559
technical details quite quickly first

13
00:00:34,559 --> 00:00:36,320
we're going to quickly talk about

14
00:00:36,320 --> 00:00:38,160
why care about esoteric commander

15
00:00:38,160 --> 00:00:39,680
control i'm going to be talking about

16
00:00:39,680 --> 00:00:41,360
this from both the perspective of a blue

17
00:00:41,360 --> 00:00:43,040
team and a red team i'm going to

18
00:00:43,040 --> 00:00:44,719
introduce you to the lab environment

19
00:00:44,719 --> 00:00:46,399
we've created to contextualize these

20
00:00:46,399 --> 00:00:49,440
techniques and also introduce you to c3

21
00:00:49,440 --> 00:00:51,199
which is f-secure's command control

22
00:00:51,199 --> 00:00:52,320
framework

23
00:00:52,320 --> 00:00:53,360
and then we'll be going through four

24
00:00:53,360 --> 00:00:56,960
channels today vmware using vmware tools

25
00:00:56,960 --> 00:00:59,520
printers or specifically print jobs rdp

26
00:00:59,520 --> 00:01:01,680
map drives and then ldap attributes all

27
00:01:01,680 --> 00:01:03,520
to transfer archery data between two

28
00:01:03,520 --> 00:01:05,360
hosts we'll be looking at both the

29
00:01:05,360 --> 00:01:07,119
operational considerations so as a red

30
00:01:07,119 --> 00:01:08,479
team what we're going to be doing and

31
00:01:08,479 --> 00:01:10,880
then blue team as well um kind of things

32
00:01:10,880 --> 00:01:12,560
we might be able to detect upon

33
00:01:12,560 --> 00:01:14,240
in terms of why we care about this blue

34
00:01:14,240 --> 00:01:15,920
team perspective ultimately what we're

35
00:01:15,920 --> 00:01:17,360
trying to do here today is challenge

36
00:01:17,360 --> 00:01:19,360
some of those assumptions around network

37
00:01:19,360 --> 00:01:21,119
boundaries where we think there are um

38
00:01:21,119 --> 00:01:22,960
some really tightly segregated networks

39
00:01:22,960 --> 00:01:24,880
that maybe there are shared services or

40
00:01:24,880 --> 00:01:27,200
boundary systems um that could be used

41
00:01:27,200 --> 00:01:29,280
to pivot through those networks and

42
00:01:29,280 --> 00:01:31,119
achieve as we'll see here peer-to-peer

43
00:01:31,119 --> 00:01:33,520
and c2 communication and for a red team

44
00:01:33,520 --> 00:01:35,280
obviously we want to keep our tradecraft

45
00:01:35,280 --> 00:01:36,799
up to date we're going to bypass this

46
00:01:36,799 --> 00:01:38,560
network segregation and ultimately

47
00:01:38,560 --> 00:01:39,920
achieve our objective whilst evading

48
00:01:39,920 --> 00:01:42,400
detection

49
00:01:42,799 --> 00:01:44,799
so very briefly then the lab environment

50
00:01:44,799 --> 00:01:47,439
we've got a single forest mwr.com and a

51
00:01:47,439 --> 00:01:48,799
single child within that forest

52
00:01:48,799 --> 00:01:50,399
uk.mwl.com

53
00:01:50,399 --> 00:01:51,840
we've got two workstations within that

54
00:01:51,840 --> 00:01:54,880
domain workstation one workstation two

55
00:01:54,880 --> 00:01:55,759
and

56
00:01:55,759 --> 00:01:58,399
these are virtualized assets on an esxi

57
00:01:58,399 --> 00:02:01,119
server that's managed by vcenter and

58
00:02:01,119 --> 00:02:02,680
this is joined to this the

59
00:02:02,680 --> 00:02:05,040
uk.underwear.com domain and relies on

60
00:02:05,040 --> 00:02:06,840
that for authentication and

61
00:02:06,840 --> 00:02:08,720
authorization to make this a bit more

62
00:02:08,720 --> 00:02:11,200
realistic we're going to be using c3s

63
00:02:11,200 --> 00:02:14,239
slack external c2 channel um so we're

64
00:02:14,239 --> 00:02:15,599
going to have a foothold on workstation

65
00:02:15,599 --> 00:02:17,680
one it's going to be talking via slack

66
00:02:17,680 --> 00:02:20,400
back to the c3 infrastructure hosted on

67
00:02:20,400 --> 00:02:24,480
aws and connected to c3 is going to be a

68
00:02:24,480 --> 00:02:26,160
cobalt strike team server so using

69
00:02:26,160 --> 00:02:28,959
cobalt strikes external t2

70
00:02:28,959 --> 00:02:30,560
and then from a detection standpoint

71
00:02:30,560 --> 00:02:31,840
we're going to be using a few things so

72
00:02:31,840 --> 00:02:33,200
firstly sysmon

73
00:02:33,200 --> 00:02:34,400
and that's going to be using the swift

74
00:02:34,400 --> 00:02:36,080
on security configuration in the link at

75
00:02:36,080 --> 00:02:37,040
the bottom

76
00:02:37,040 --> 00:02:38,319
and we're also going to be using uh

77
00:02:38,319 --> 00:02:40,720
ruben boone and silk etw to uh to get

78
00:02:40,720 --> 00:02:41,920
some additional telemetry from our

79
00:02:41,920 --> 00:02:43,840
endpoints and then all of that is going

80
00:02:43,840 --> 00:02:46,080
to make its way into helk roberto

81
00:02:46,080 --> 00:02:48,560
rodriguez the elastic and cabana

82
00:02:48,560 --> 00:02:50,560
instance there so we can look through

83
00:02:50,560 --> 00:02:52,000
and query the data that we're collecting

84
00:02:52,000 --> 00:02:53,760
there

85
00:02:53,760 --> 00:02:56,800
so very briefly then c3 is f-secure's

86
00:02:56,800 --> 00:02:58,560
command-control framework

87
00:02:58,560 --> 00:03:00,560
it supports integration with kerbal

88
00:03:00,560 --> 00:03:03,040
strike beacons and covenant grunts and

89
00:03:03,040 --> 00:03:05,599
allows you to stage those respectively

90
00:03:05,599 --> 00:03:07,599
through

91
00:03:07,599 --> 00:03:08,640
your

92
00:03:08,640 --> 00:03:10,000
the relays

93
00:03:10,000 --> 00:03:12,640
so c3 operates on some arbitrary sort of

94
00:03:12,640 --> 00:03:15,599
c2 medium so this externally could be

95
00:03:15,599 --> 00:03:18,000
slack it could be dropbox etcetera

96
00:03:18,000 --> 00:03:19,440
internally it could be any of the

97
00:03:19,440 --> 00:03:20,959
channels that we're going to describe

98
00:03:20,959 --> 00:03:22,319
today

99
00:03:22,319 --> 00:03:24,400
in c3 land you have this concept of

100
00:03:24,400 --> 00:03:26,400
relays so these are the payloads

101
00:03:26,400 --> 00:03:27,599
essentially and this is what

102
00:03:27,599 --> 00:03:30,080
communicates from the target to the c2

103
00:03:30,080 --> 00:03:31,280
medium

104
00:03:31,280 --> 00:03:34,239
right to pack it to this this medium

105
00:03:34,239 --> 00:03:36,799
c3 will then pick that up interpret it

106
00:03:36,799 --> 00:03:38,560
write a response back to the medium

107
00:03:38,560 --> 00:03:40,560
where the relay will then pick it up

108
00:03:40,560 --> 00:03:42,720
in the scenario where you've commanded

109
00:03:42,720 --> 00:03:45,440
your relay to stage a beacon you'll then

110
00:03:45,440 --> 00:03:47,200
get the beacon appear in your

111
00:03:47,200 --> 00:03:49,519
cobblestrike team server from the target

112
00:03:49,519 --> 00:03:51,840
machine

113
00:03:52,159 --> 00:03:53,760
we'll quickly grasp as we go through

114
00:03:53,760 --> 00:03:55,200
these techniques and what we've

115
00:03:55,200 --> 00:03:57,120
experienced like operationally when we

116
00:03:57,120 --> 00:03:59,519
when we've been doing our red teams

117
00:03:59,519 --> 00:04:00,560
etcetera

118
00:04:00,560 --> 00:04:02,959
if you can read write and delete to an

119
00:04:02,959 --> 00:04:04,720
arbitrary service the chances are you

120
00:04:04,720 --> 00:04:06,959
can leverage it for command and control

121
00:04:06,959 --> 00:04:08,799
there's a few operational considerations

122
00:04:08,799 --> 00:04:12,159
like api rate limiting etc but largely

123
00:04:12,159 --> 00:04:13,840
read write and delete that's enough for

124
00:04:13,840 --> 00:04:15,680
commander control

125
00:04:15,680 --> 00:04:17,759
so let's dive into our first technique

126
00:04:17,759 --> 00:04:19,839
so this is vmware so this is how we're

127
00:04:19,839 --> 00:04:23,759
using vcenter's api to upload download

128
00:04:23,759 --> 00:04:26,320
files and execute arbitrary commands

129
00:04:26,320 --> 00:04:28,000
inside a virtual machine managed by

130
00:04:28,000 --> 00:04:30,240
vcenter when we have no network

131
00:04:30,240 --> 00:04:32,720
connectivity that target machine or

132
00:04:32,720 --> 00:04:34,479
indeed that target machine doesn't even

133
00:04:34,479 --> 00:04:36,800
necessarily need to have any network

134
00:04:36,800 --> 00:04:38,639
connectivity at all or even a network

135
00:04:38,639 --> 00:04:40,800
adapter

136
00:04:40,800 --> 00:04:43,120
so the scenarios workstation one has no

137
00:04:43,120 --> 00:04:44,080
direct

138
00:04:44,080 --> 00:04:46,880
network connectivity to workstation two

139
00:04:46,880 --> 00:04:48,320
however we've been able to compromise

140
00:04:48,320 --> 00:04:50,639
legitimate credentials to the vcenter

141
00:04:50,639 --> 00:04:53,919
server where workstation two

142
00:04:53,919 --> 00:04:55,680
is a virtualized it's a virtual machine

143
00:04:55,680 --> 00:04:58,880
managed by that vcenter

144
00:04:58,880 --> 00:05:00,320
there's a couple of limitations before

145
00:05:00,320 --> 00:05:02,720
we jump into um you know how to actually

146
00:05:02,720 --> 00:05:04,560
use this in practice you need to have

147
00:05:04,560 --> 00:05:06,400
valid credentials and a certain number

148
00:05:06,400 --> 00:05:08,240
of guest operations privileges within

149
00:05:08,240 --> 00:05:11,680
vcenter to interact with the guest os

150
00:05:11,680 --> 00:05:13,280
you also need to have valid credentials

151
00:05:13,280 --> 00:05:16,000
unfortunately for the target vm so they

152
00:05:16,000 --> 00:05:17,280
don't necessarily need to be an

153
00:05:17,280 --> 00:05:19,759
administrator but any account no if

154
00:05:19,759 --> 00:05:21,199
you're sitting physically in front of

155
00:05:21,199 --> 00:05:22,240
that machine

156
00:05:22,240 --> 00:05:23,840
you could you could log in so this can

157
00:05:23,840 --> 00:05:26,400
be local or domain credentials and the

158
00:05:26,400 --> 00:05:28,400
tiger vm also needs vmware tools because

159
00:05:28,400 --> 00:05:30,320
this is how the upload and downloaded

160
00:05:30,320 --> 00:05:32,560
files and the arbitrary code execution

161
00:05:32,560 --> 00:05:35,039
actually happens

162
00:05:35,039 --> 00:05:37,520
the data flow relies not just for the

163
00:05:37,520 --> 00:05:39,039
vmware for actually most of the channels

164
00:05:39,039 --> 00:05:41,680
we're going to talk about on c3's unc

165
00:05:41,680 --> 00:05:44,880
share file channel so at its core this

166
00:05:44,880 --> 00:05:48,080
involves writing files to a shared

167
00:05:48,080 --> 00:05:50,160
network drive so both workstation 1

168
00:05:50,160 --> 00:05:53,120
workstation 2 uses the same arbitrary

169
00:05:53,120 --> 00:05:56,080
network share to read and write c3

170
00:05:56,080 --> 00:05:57,759
packets

171
00:05:57,759 --> 00:05:59,280
we're going to be using in a slightly

172
00:05:59,280 --> 00:06:01,199
unintended scenario

173
00:06:01,199 --> 00:06:03,680
where workstation one workstation two

174
00:06:03,680 --> 00:06:06,080
will be reading and writing these c3

175
00:06:06,080 --> 00:06:08,880
files to its own local directory so

176
00:06:08,880 --> 00:06:10,400
we're choosing cuse as public but it

177
00:06:10,400 --> 00:06:12,000
could be any arbitrary file on that file

178
00:06:12,000 --> 00:06:14,240
system any directory rather where you've

179
00:06:14,240 --> 00:06:16,880
got read and write privileges

180
00:06:16,880 --> 00:06:18,240
and we're going to use a tool that i've

181
00:06:18,240 --> 00:06:20,240
written called sharpsphere to sit in the

182
00:06:20,240 --> 00:06:23,840
middle and manually transfer c3 packets

183
00:06:23,840 --> 00:06:26,479
from workstation 1 to workstation 2 and

184
00:06:26,479 --> 00:06:28,080
vice versa

185
00:06:28,080 --> 00:06:30,319
so in practice what this looks like

186
00:06:30,319 --> 00:06:33,039
you execute your relay and workstation 2

187
00:06:33,039 --> 00:06:34,720
that's going to write a packet to its

188
00:06:34,720 --> 00:06:36,880
own c users public sharp 2 is going to

189
00:06:36,880 --> 00:06:38,720
grab that move it across the workstation

190
00:06:38,720 --> 00:06:40,319
1 where it's going to get interpreted by

191
00:06:40,319 --> 00:06:42,880
c3 response generated and written to

192
00:06:42,880 --> 00:06:45,600
workstation 1. see use the public

193
00:06:45,600 --> 00:06:46,960
sharpshow is then going to take that

194
00:06:46,960 --> 00:06:50,000
file move it across to workstation 2

195
00:06:50,000 --> 00:06:52,240
where it's going to be interpreted on

196
00:06:52,240 --> 00:06:54,160
workstation 2. so the rough workflow is

197
00:06:54,160 --> 00:06:56,319
you find a vcenter great channel to see

198
00:06:56,319 --> 00:06:57,680
through and download and relay for that

199
00:06:57,680 --> 00:06:58,639
channel

200
00:06:58,639 --> 00:07:00,560
upload it to target so this is

201
00:07:00,560 --> 00:07:02,639
workstation 2. so you need sharp sphere

202
00:07:02,639 --> 00:07:03,599
for this

203
00:07:03,599 --> 00:07:05,520
execute the relay again you need sharp

204
00:07:05,520 --> 00:07:07,520
sphere to execute the arbitrary commands

205
00:07:07,520 --> 00:07:10,000
within workstation 2 and then lastly you

206
00:07:10,000 --> 00:07:12,560
use sharp sphere's c2 functionality to

207
00:07:12,560 --> 00:07:15,919
establish that command control channel

208
00:07:15,919 --> 00:07:17,840
just a quick note to find the vcenter

209
00:07:17,840 --> 00:07:19,919
you can obviously use any internal wiki

210
00:07:19,919 --> 00:07:23,440
pages sharepoint asset lists all of that

211
00:07:23,440 --> 00:07:25,280
in our experience we've also had some

212
00:07:25,280 --> 00:07:27,360
success with ldap crews so if they're

213
00:07:27,360 --> 00:07:29,919
using vcenter appliance operating system

214
00:07:29,919 --> 00:07:31,440
service pack would be unknown so you can

215
00:07:31,440 --> 00:07:33,840
use that to filter results and also the

216
00:07:33,840 --> 00:07:37,840
name can be vcenter virtual center vcsa

217
00:07:37,840 --> 00:07:39,520
variations on the above so you know we

218
00:07:39,520 --> 00:07:42,319
have some success with that

219
00:07:42,319 --> 00:07:43,919
the first thing you want to do is create

220
00:07:43,919 --> 00:07:45,440
a channel i appreciate this is probably

221
00:07:45,440 --> 00:07:47,919
the first time many of you have seen c3

222
00:07:47,919 --> 00:07:49,680
which is on the right hand side so this

223
00:07:49,680 --> 00:07:51,759
is what the c3 web ui looks like and

224
00:07:51,759 --> 00:07:53,680
this is what's hosted in your attacker

225
00:07:53,680 --> 00:07:55,919
controlled infrastructure and you'll see

226
00:07:55,919 --> 00:07:59,199
our existing slack relay with an

227
00:07:59,199 --> 00:08:01,440
associated cobble strike beacon hanging

228
00:08:01,440 --> 00:08:04,240
off the the side of that relay

229
00:08:04,240 --> 00:08:06,080
so what we're going to do is create this

230
00:08:06,080 --> 00:08:08,879
unc share file and we're going to tell

231
00:08:08,879 --> 00:08:10,479
it so this is workstation one this is

232
00:08:10,479 --> 00:08:12,639
what executed on workstation one so

233
00:08:12,639 --> 00:08:14,879
we're going to tell it to use c uses

234
00:08:14,879 --> 00:08:16,639
public as its

235
00:08:16,639 --> 00:08:17,599
uh

236
00:08:17,599 --> 00:08:19,039
arbitrary directory to read and write

237
00:08:19,039 --> 00:08:20,879
data from make sure you take a note of

238
00:08:20,879 --> 00:08:22,479
the input and output ideas you'll need

239
00:08:22,479 --> 00:08:26,120
that for a later step

240
00:08:26,240 --> 00:08:28,560
what we then want to do is use

241
00:08:28,560 --> 00:08:29,759
the

242
00:08:29,759 --> 00:08:32,640
sharp sphere aggressor script to list

243
00:08:32,640 --> 00:08:34,320
the virtual machines

244
00:08:34,320 --> 00:08:37,599
so the vcenter api so you know you found

245
00:08:37,599 --> 00:08:39,519
your vcenter you're going to use the

246
00:08:39,519 --> 00:08:41,360
vcenter url

247
00:08:41,360 --> 00:08:44,480
to query the api to retrieve a list of

248
00:08:44,480 --> 00:08:46,080
all of the virtual machines that that

249
00:08:46,080 --> 00:08:48,880
vcenter manages so we're hoping in these

250
00:08:48,880 --> 00:08:51,839
responses to see workstation 2 as a

251
00:08:51,839 --> 00:08:54,800
managed virtual asset you'll see here as

252
00:08:54,800 --> 00:08:56,320
well i've just done a quick check-in

253
00:08:56,320 --> 00:08:58,399
because of the way c3 works and the way

254
00:08:58,399 --> 00:09:00,720
the beacon receives its output sometimes

255
00:09:00,720 --> 00:09:02,160
you just need to do a quick check-in to

256
00:09:02,160 --> 00:09:03,680
get the full results

257
00:09:03,680 --> 00:09:06,720
so you'll see there workstation two so

258
00:09:06,720 --> 00:09:08,240
just make a note of this ip address

259
00:09:08,240 --> 00:09:09,360
because this is the machine that we're

260
00:09:09,360 --> 00:09:11,360
actually going to target for subsequent

261
00:09:11,360 --> 00:09:13,760
steps

262
00:09:14,240 --> 00:09:16,080
so once you've got your relay you've

263
00:09:16,080 --> 00:09:19,120
generated your relay executable we we

264
00:09:19,120 --> 00:09:21,279
now need to upload that to the target

265
00:09:21,279 --> 00:09:22,720
host so again you're going to use

266
00:09:22,720 --> 00:09:25,920
sharpsphere and and sharps is just using

267
00:09:25,920 --> 00:09:28,399
the vsphere apis the legitimate

268
00:09:28,399 --> 00:09:30,240
functionality within the api to upload

269
00:09:30,240 --> 00:09:32,399
this file so source file upload

270
00:09:32,399 --> 00:09:34,320
destination

271
00:09:34,320 --> 00:09:35,760
pretty self-explanatory the guest

272
00:09:35,760 --> 00:09:37,279
username password so these are

273
00:09:37,279 --> 00:09:39,920
credentials that have legitimate access

274
00:09:39,920 --> 00:09:40,720
to

275
00:09:40,720 --> 00:09:43,279
workstation 2. so these are the local or

276
00:09:43,279 --> 00:09:44,880
domain credentials

277
00:09:44,880 --> 00:09:46,640
the source file is respective to

278
00:09:46,640 --> 00:09:48,880
workstation 1 and the destination file

279
00:09:48,880 --> 00:09:50,640
is where you want to place that on

280
00:09:50,640 --> 00:09:53,120
workstation 2. so for simplicity's sake

281
00:09:53,120 --> 00:09:54,560
we just put it all

282
00:09:54,560 --> 00:09:56,320
um

283
00:09:56,320 --> 00:09:57,839
in c user public

284
00:09:57,839 --> 00:09:59,680
um so that we know where to reference it

285
00:09:59,680 --> 00:10:01,279
from later

286
00:10:01,279 --> 00:10:03,200
and so all being well you'll see

287
00:10:03,200 --> 00:10:04,800
sharpsville telling you this uploaded

288
00:10:04,800 --> 00:10:07,120
the file to a certain destination so

289
00:10:07,120 --> 00:10:08,560
just worth making a note of where it's

290
00:10:08,560 --> 00:10:11,360
uploaded to so that in this next step

291
00:10:11,360 --> 00:10:14,160
where we execute the relay you know what

292
00:10:14,160 --> 00:10:16,399
you're trying to execute so using the

293
00:10:16,399 --> 00:10:18,480
aggressive script again

294
00:10:18,480 --> 00:10:21,040
fill in all the relevant details and the

295
00:10:21,040 --> 00:10:22,320
command

296
00:10:22,320 --> 00:10:24,640
is the relay executable that you just

297
00:10:24,640 --> 00:10:26,399
uploaded this is going to start the

298
00:10:26,399 --> 00:10:29,200
relay on workstation 2 and this relay is

299
00:10:29,200 --> 00:10:31,680
going to be continually polling sea uses

300
00:10:31,680 --> 00:10:32,560
public

301
00:10:32,560 --> 00:10:34,320
for

302
00:10:34,320 --> 00:10:38,399
files associated with c3

303
00:10:38,399 --> 00:10:40,399
what's worth pointing out is

304
00:10:40,399 --> 00:10:41,839
that's not going to get anywhere at the

305
00:10:41,839 --> 00:10:44,240
moment because it's just referencing its

306
00:10:44,240 --> 00:10:45,680
local directory and nothing else can

307
00:10:45,680 --> 00:10:47,760
talk to it so we need something in the

308
00:10:47,760 --> 00:10:50,240
middle we need sharp sphere to actually

309
00:10:50,240 --> 00:10:52,880
transfer those files across

310
00:10:52,880 --> 00:10:54,800
so just to note in the beacon output

311
00:10:54,800 --> 00:10:56,800
you'll see that the process has started

312
00:10:56,800 --> 00:10:58,800
and has returned you the period of the

313
00:10:58,800 --> 00:11:00,720
running process so you're reasonably

314
00:11:00,720 --> 00:11:02,720
confident that relay is now running on

315
00:11:02,720 --> 00:11:05,600
workstation two

316
00:11:05,680 --> 00:11:07,920
the last step then is to establish the

317
00:11:07,920 --> 00:11:10,240
commander control so again with sharp

318
00:11:10,240 --> 00:11:13,760
sphere you want to do c2

319
00:11:13,760 --> 00:11:16,079
fill in the relevant details put in the

320
00:11:16,079 --> 00:11:18,160
input id and the output id that you made

321
00:11:18,160 --> 00:11:20,160
a note of before the local file

322
00:11:20,160 --> 00:11:22,320
directory and the remote the guest file

323
00:11:22,320 --> 00:11:26,160
directory is see uses public so this is

324
00:11:26,160 --> 00:11:28,240
what c3 is using on workstation one and

325
00:11:28,240 --> 00:11:31,120
workstation two respectively as its

326
00:11:31,120 --> 00:11:32,320
uh

327
00:11:32,320 --> 00:11:34,000
local directory to read and write c3

328
00:11:34,000 --> 00:11:36,079
packets too

329
00:11:36,079 --> 00:11:38,399
all being well that sharps will just

330
00:11:38,399 --> 00:11:41,279
stay in the background as a as a running

331
00:11:41,279 --> 00:11:43,120
process to

332
00:11:43,120 --> 00:11:45,040
transfer those files manually and you'll

333
00:11:45,040 --> 00:11:48,160
see that it's now checked in within c3

334
00:11:48,160 --> 00:11:49,600
so at this point commander controls

335
00:11:49,600 --> 00:11:50,880
established

336
00:11:50,880 --> 00:11:52,720
from an operator's perspective you know

337
00:11:52,720 --> 00:11:54,240
it's probably not as usable as it could

338
00:11:54,240 --> 00:11:56,000
be at this point so we're just going to

339
00:11:56,000 --> 00:11:58,880
stage a beacon through the relay that's

340
00:11:58,880 --> 00:12:02,240
running on workstation 2.

341
00:12:02,240 --> 00:12:03,440
sharpshooter is still running in the

342
00:12:03,440 --> 00:12:06,160
background so workstation 1 is going to

343
00:12:06,160 --> 00:12:08,160
put its files in to see you as a public

344
00:12:08,160 --> 00:12:10,320
sharksville is going to copy that across

345
00:12:10,320 --> 00:12:11,600
workstations who's going to receive it

346
00:12:11,600 --> 00:12:13,040
it's going to keep doing that and you

347
00:12:13,040 --> 00:12:16,320
can see the beacon is now checked in

348
00:12:16,320 --> 00:12:18,320
so from an operator's perspective this

349
00:12:18,320 --> 00:12:20,399
is quite a seamless experience

350
00:12:20,399 --> 00:12:22,480
and you can use the

351
00:12:22,480 --> 00:12:23,519
the beacon

352
00:12:23,519 --> 00:12:25,360
as you would normally

353
00:12:25,360 --> 00:12:27,519
so from a prevention perspective before

354
00:12:27,519 --> 00:12:28,959
we move on detection

355
00:12:28,959 --> 00:12:31,200
restricted network access to vcenter to

356
00:12:31,200 --> 00:12:32,880
your known admin host so if you've got

357
00:12:32,880 --> 00:12:34,880
privileged access workstations limit

358
00:12:34,880 --> 00:12:37,120
access to any of those machines

359
00:12:37,120 --> 00:12:38,880
vcenter supports quite granular

360
00:12:38,880 --> 00:12:40,560
permission levels so implement the

361
00:12:40,560 --> 00:12:42,639
principle of least privilege

362
00:12:42,639 --> 00:12:44,160
there's been some research in the link

363
00:12:44,160 --> 00:12:46,320
below about disabling specific api

364
00:12:46,320 --> 00:12:47,360
methods you know if you still need

365
00:12:47,360 --> 00:12:49,600
access to the api legitimately perhaps

366
00:12:49,600 --> 00:12:50,720
just disable the ones that you don't

367
00:12:50,720 --> 00:12:51,600
need

368
00:12:51,600 --> 00:12:53,440
and also when you come to install vmware

369
00:12:53,440 --> 00:12:55,519
tools uh perhaps remove the

370
00:12:55,519 --> 00:12:59,600
non-essential parts of vmware tools

371
00:12:59,600 --> 00:13:00,639
that would allow this sort of

372
00:13:00,639 --> 00:13:04,320
functionality to take place

373
00:13:04,320 --> 00:13:07,600
awesome thanks so detection then how can

374
00:13:07,600 --> 00:13:09,360
we see this it's quite a convoluted

375
00:13:09,360 --> 00:13:10,800
channel i think end-to-end so let's take

376
00:13:10,800 --> 00:13:12,399
a look at how we might see this taking

377
00:13:12,399 --> 00:13:13,600
place there's a few different areas we

378
00:13:13,600 --> 00:13:14,639
can look at

379
00:13:14,639 --> 00:13:16,320
as we go through this not just this one

380
00:13:16,320 --> 00:13:17,360
but the other channels as well we're

381
00:13:17,360 --> 00:13:18,880
going to be looking at both a tool

382
00:13:18,880 --> 00:13:21,200
specific detection and then more broadly

383
00:13:21,200 --> 00:13:23,040
around the technique as well to kind of

384
00:13:23,040 --> 00:13:26,000
give a bit of a balance there so tooling

385
00:13:26,000 --> 00:13:27,839
wise we're looking at obviously.net post

386
00:13:27,839 --> 00:13:30,720
exploitation tooling sharpsphere running

387
00:13:30,720 --> 00:13:32,880
in memory has to run continuously to

388
00:13:32,880 --> 00:13:34,399
shuttle those files and kind of

389
00:13:34,399 --> 00:13:36,880
synchronize the two directions as we saw

390
00:13:36,880 --> 00:13:38,560
and we can use a yara rule such as that

391
00:13:38,560 --> 00:13:40,000
on the right hand side and the strings

392
00:13:40,000 --> 00:13:41,760
that are present within short sphere to

393
00:13:41,760 --> 00:13:44,079
identify it running within memory

394
00:13:44,079 --> 00:13:46,399
we can also make use of etw there so you

395
00:13:46,399 --> 00:13:47,839
can see the microsoft

396
00:13:47,839 --> 00:13:50,399
runtime provider and then quite clearly

397
00:13:50,399 --> 00:13:53,199
we can see run dll32 quite anonymously

398
00:13:53,199 --> 00:13:55,199
um loading the shout out program into

399
00:13:55,199 --> 00:13:56,720
memory there and there's just a snippet

400
00:13:56,720 --> 00:13:59,199
um to use with silk utw as i mentioned

401
00:13:59,199 --> 00:14:03,519
um to facilitate this etw logging

402
00:14:03,519 --> 00:14:05,440
c3 usage there's a couple of things here

403
00:14:05,440 --> 00:14:07,600
both as a binary and in memory firstly

404
00:14:07,600 --> 00:14:09,760
the the lower um yara rule you can see

405
00:14:09,760 --> 00:14:12,320
there for identifying c3 binaries

406
00:14:12,320 --> 00:14:14,079
including the dlls that kind of make the

407
00:14:14,079 --> 00:14:16,079
magic happen as it were and on the right

408
00:14:16,079 --> 00:14:18,079
hand side we can see another yara rule

409
00:14:18,079 --> 00:14:20,240
that detects the specific strings that

410
00:14:20,240 --> 00:14:21,920
are part of the reflected dll loading

411
00:14:21,920 --> 00:14:24,079
that c3 uses for its shell code so you

412
00:14:24,079 --> 00:14:27,600
can also detect that in memory as well

413
00:14:27,600 --> 00:14:28,800
network connections are probably one of

414
00:14:28,800 --> 00:14:30,399
the most anomalous features here aside

415
00:14:30,399 --> 00:14:33,040
from the vcenter apis so here we can see

416
00:14:33,040 --> 00:14:34,160
our

417
00:14:34,160 --> 00:14:35,440
net

418
00:14:35,440 --> 00:14:37,040
sharp sphere here is loaded within run

419
00:14:37,040 --> 00:14:39,680
dll32 and that is making a series of

420
00:14:39,680 --> 00:14:41,519
network connections to the known ip

421
00:14:41,519 --> 00:14:43,519
address of a vcenter server

422
00:14:43,519 --> 00:14:45,680
on 443 so we can see that as well

423
00:14:45,680 --> 00:14:47,760
obviously with the beacon running within

424
00:14:47,760 --> 00:14:49,920
our relay that is spawning our what is

425
00:14:49,920 --> 00:14:51,680
called a spawn two process within cobalt

426
00:14:51,680 --> 00:14:53,440
strike and that is run dll and that's

427
00:14:53,440 --> 00:14:56,000
making those connections

428
00:14:56,000 --> 00:14:58,320
process creations then for the execution

429
00:14:58,320 --> 00:15:00,079
step there so whenever we execute a

430
00:15:00,079 --> 00:15:02,000
command through sharpsphere like our

431
00:15:02,000 --> 00:15:03,839
relay or any other command

432
00:15:03,839 --> 00:15:05,760
we're using a very specific command line

433
00:15:05,760 --> 00:15:07,600
argument and it's all spawning from vm

434
00:15:07,600 --> 00:15:09,199
tools d so you can see within the code

435
00:15:09,199 --> 00:15:11,199
there at the bottom um we've got a

436
00:15:11,199 --> 00:15:13,040
hard-coded path to see users public and

437
00:15:13,040 --> 00:15:15,120
a randomized file name so we end up with

438
00:15:15,120 --> 00:15:16,480
something along the lines of as you can

439
00:15:16,480 --> 00:15:18,560
see there cmd c the command we're

440
00:15:18,560 --> 00:15:20,480
running so who am i and then it will be

441
00:15:20,480 --> 00:15:22,000
put into public and then cleared up

442
00:15:22,000 --> 00:15:23,600
afterwards kind of similar to something

443
00:15:23,600 --> 00:15:25,199
like impact it's wmi exec if you're

444
00:15:25,199 --> 00:15:26,720
familiar with that

445
00:15:26,720 --> 00:15:29,360
where we have no um output required so

446
00:15:29,360 --> 00:15:31,519
example when james is running his relay

447
00:15:31,519 --> 00:15:33,360
um we can see the exact same thing here

448
00:15:33,360 --> 00:15:35,600
the cmd slash c and then the command

449
00:15:35,600 --> 00:15:37,680
itself but then we won't have any file

450
00:15:37,680 --> 00:15:39,360
rights as a result of that but still any

451
00:15:39,360 --> 00:15:42,079
anomalous and child processes of vmtools

452
00:15:42,079 --> 00:15:43,279
d dot actually is gonna be worth

453
00:15:43,279 --> 00:15:45,040
investigating

454
00:15:45,040 --> 00:15:46,880
and then the api usage logs if we turn

455
00:15:46,880 --> 00:15:48,800
our attention to the actual code for

456
00:15:48,800 --> 00:15:50,480
sharpsville we can see

457
00:15:50,480 --> 00:15:52,639
the execution of commands is achieved

458
00:15:52,639 --> 00:15:54,880
through starting a program on the host

459
00:15:54,880 --> 00:15:57,120
listing process ids until the process id

460
00:15:57,120 --> 00:15:59,279
is is is removed i.e the process has

461
00:15:59,279 --> 00:16:01,440
finished executing

462
00:16:01,440 --> 00:16:03,199
we download the output file we put in to

463
00:16:03,199 --> 00:16:04,800
see users public and then we delete the

464
00:16:04,800 --> 00:16:06,720
file to clean up afterwards

465
00:16:06,720 --> 00:16:08,480
looking within the at the api logs on

466
00:16:08,480 --> 00:16:11,920
the vcenter server so this is vpxd.log

467
00:16:11,920 --> 00:16:13,519
you can see quite clearly the initial

468
00:16:13,519 --> 00:16:14,639
login

469
00:16:14,639 --> 00:16:17,199
and we can find our vm by ip as we saw

470
00:16:17,199 --> 00:16:18,240
james do

471
00:16:18,240 --> 00:16:19,920
and we authenticate to our guest and

472
00:16:19,920 --> 00:16:21,839
start our program but be that relay or

473
00:16:21,839 --> 00:16:24,079
who am i or otherwise and then we list

474
00:16:24,079 --> 00:16:26,000
our processes repeatedly until that that

475
00:16:26,000 --> 00:16:27,600
we've seen what we need in our process

476
00:16:27,600 --> 00:16:30,000
is terminated and then obviously we

477
00:16:30,000 --> 00:16:31,600
initiate the file transfer to retrieve

478
00:16:31,600 --> 00:16:33,839
the output and then delete it afterwards

479
00:16:33,839 --> 00:16:34,959
what you'll notice is there's no

480
00:16:34,959 --> 00:16:36,959
indication here of who is performing

481
00:16:36,959 --> 00:16:39,040
this activity nor from where

482
00:16:39,040 --> 00:16:40,720
what we can do is take the gui there

483
00:16:40,720 --> 00:16:42,560
that's provided if you look through each

484
00:16:42,560 --> 00:16:44,160
line of that api

485
00:16:44,160 --> 00:16:46,320
log you'll see the same guide present

486
00:16:46,320 --> 00:16:48,079
for all of them that's essentially a

487
00:16:48,079 --> 00:16:50,000
session id and if we look into another

488
00:16:50,000 --> 00:16:52,079
log on the vcenter server with vpxt

489
00:16:52,079 --> 00:16:54,160
profiler.log you can see that that

490
00:16:54,160 --> 00:16:56,720
corresponds um to the administrator

491
00:16:56,720 --> 00:16:58,160
account there the local administrator

492
00:16:58,160 --> 00:17:00,079
account and it's coming from the dot 200

493
00:17:00,079 --> 00:17:04,000
address which is our workstation one

494
00:17:04,000 --> 00:17:06,160
c2 very similar stories a different set

495
00:17:06,160 --> 00:17:07,839
of ips here so you can see the initial

496
00:17:07,839 --> 00:17:10,640
login find ip but then list files is the

497
00:17:10,640 --> 00:17:12,000
api call that's effectively our

498
00:17:12,000 --> 00:17:14,240
beaconing functionality that sharpsphere

499
00:17:14,240 --> 00:17:16,240
reaching out to the vcenter api to say

500
00:17:16,240 --> 00:17:17,359
what's in this directory is there

501
00:17:17,359 --> 00:17:18,880
anything i need to start shuttling back

502
00:17:18,880 --> 00:17:22,000
and forth um to facilitate c2

503
00:17:22,000 --> 00:17:24,079
and then the file rights themselves that

504
00:17:24,079 --> 00:17:26,480
are the unc share file in action so we

505
00:17:26,480 --> 00:17:28,400
can see firstly our workstation one is

506
00:17:28,400 --> 00:17:30,160
writing files to a given location i'm

507
00:17:30,160 --> 00:17:31,440
using downloads folder here but

508
00:17:31,440 --> 00:17:34,320
obviously public is just as relevant

509
00:17:34,320 --> 00:17:37,039
workstation 2 we see vm tools is the one

510
00:17:37,039 --> 00:17:38,480
that's actually producing those files on

511
00:17:38,480 --> 00:17:40,559
the workstation 2 endpoint

512
00:17:40,559 --> 00:17:42,240
we can then see our other relay on

513
00:17:42,240 --> 00:17:44,480
workstation 2 is writing in response to

514
00:17:44,480 --> 00:17:46,559
those files and then we can see on

515
00:17:46,559 --> 00:17:48,000
workstation one

516
00:17:48,000 --> 00:17:50,400
our run dll32 which of course is is

517
00:17:50,400 --> 00:17:53,200
sharp sphere in memory and is then

518
00:17:53,200 --> 00:17:54,880
producing files as well

519
00:17:54,880 --> 00:17:56,480
back from the workstation two back to

520
00:17:56,480 --> 00:17:59,200
the originating source

521
00:17:59,200 --> 00:18:01,120
and then finally windows event logs

522
00:18:01,120 --> 00:18:02,160
obviously

523
00:18:02,160 --> 00:18:04,480
this api is performing a series of calls

524
00:18:04,480 --> 00:18:07,679
to facilitate c2 and there's no stateful

525
00:18:07,679 --> 00:18:09,200
connection here so every time we make an

526
00:18:09,200 --> 00:18:10,480
api call

527
00:18:10,480 --> 00:18:12,080
we're logging in again essentially we're

528
00:18:12,080 --> 00:18:14,240
authenticating authenticating again to

529
00:18:14,240 --> 00:18:16,400
the workstation so here you can see over

530
00:18:16,400 --> 00:18:20,000
a period of um kind of maybe a second

531
00:18:20,000 --> 00:18:21,919
there's four or five different instances

532
00:18:21,919 --> 00:18:23,760
of authentication so our four six two

533
00:18:23,760 --> 00:18:25,200
fours and our four six five ratios we

534
00:18:25,200 --> 00:18:27,280
connect with a batch logon type

535
00:18:27,280 --> 00:18:28,720
interestingly at the bottom if you don't

536
00:18:28,720 --> 00:18:30,240
have the ability to log on with a batch

537
00:18:30,240 --> 00:18:32,799
log on type you will also see a 4625 as

538
00:18:32,799 --> 00:18:34,400
it tries to do that initial connection

539
00:18:34,400 --> 00:18:36,240
so worth bearing in mind the volume of

540
00:18:36,240 --> 00:18:37,280
log on events that you're going to

541
00:18:37,280 --> 00:18:38,320
produce

542
00:18:38,320 --> 00:18:40,320
now onto printers great thank you so

543
00:18:40,320 --> 00:18:42,559
that's the biggest one biggest channel

544
00:18:42,559 --> 00:18:43,520
out the way

545
00:18:43,520 --> 00:18:45,919
we're now going to move on to number two

546
00:18:45,919 --> 00:18:47,760
of four and this is using arbitrary

547
00:18:47,760 --> 00:18:50,000
network printers for command control so

548
00:18:50,000 --> 00:18:52,320
a lot simpler conceptually as well

549
00:18:52,320 --> 00:18:54,240
similar scenario workstation one no

550
00:18:54,240 --> 00:18:56,480
network connectivity to workstation 2

551
00:18:56,480 --> 00:18:58,640
but it does however both have

552
00:18:58,640 --> 00:19:00,880
network connectivity to a shared printer

553
00:19:00,880 --> 00:19:02,720
so mx470

554
00:19:02,720 --> 00:19:04,799
in this case and we can use print jobs

555
00:19:04,799 --> 00:19:06,160
to transfer

556
00:19:06,160 --> 00:19:08,240
data between the two

557
00:19:08,240 --> 00:19:09,760
a couple of limitations on this one as

558
00:19:09,760 --> 00:19:10,559
well

559
00:19:10,559 --> 00:19:12,640
both sides need network access to the

560
00:19:12,640 --> 00:19:15,280
same print server so smb

561
00:19:15,280 --> 00:19:17,039
also ideally they both be executing

562
00:19:17,039 --> 00:19:18,559
under the context of the same user

563
00:19:18,559 --> 00:19:21,360
account on both sides or at least one of

564
00:19:21,360 --> 00:19:23,120
them needs to be an administrator this

565
00:19:23,120 --> 00:19:24,720
is so that it can delete print jobs that

566
00:19:24,720 --> 00:19:27,679
were started by another user

567
00:19:27,679 --> 00:19:29,200
you'll see in the ui unlimited print

568
00:19:29,200 --> 00:19:31,280
jobs are supported operationally for us

569
00:19:31,280 --> 00:19:33,440
this has been slightly less stable so

570
00:19:33,440 --> 00:19:35,679
i'd suggest limiting print jobs to one

571
00:19:35,679 --> 00:19:37,600
slightly less throughput but much more

572
00:19:37,600 --> 00:19:39,200
stable

573
00:19:39,200 --> 00:19:40,640
each print job as well because we're

574
00:19:40,640 --> 00:19:42,640
storing the the data in the print job

575
00:19:42,640 --> 00:19:45,120
name uh can support a transfer size of

576
00:19:45,120 --> 00:19:48,000
one megabyte so it's not huge but

577
00:19:48,000 --> 00:19:51,280
operationally it's still enough to

578
00:19:51,280 --> 00:19:53,520
to perform what you need to do unless

579
00:19:53,520 --> 00:19:56,799
massive data excel is necessary

580
00:19:56,799 --> 00:19:59,039
so the workflow is is pretty basic

581
00:19:59,039 --> 00:20:01,600
workstation one has direct network

582
00:20:01,600 --> 00:20:03,919
connectivity to mx470 and it's going to

583
00:20:03,919 --> 00:20:05,840
read and write

584
00:20:05,840 --> 00:20:08,720
packets via print jobs and workstation 2

585
00:20:08,720 --> 00:20:11,760
is going to be doing the same thing

586
00:20:11,760 --> 00:20:13,520
first of all we need to find a

587
00:20:13,520 --> 00:20:16,960
target printer so you can use ldap here

588
00:20:16,960 --> 00:20:18,559
you can also use powershell to query a

589
00:20:18,559 --> 00:20:20,400
remote machine or if you want to find a

590
00:20:20,400 --> 00:20:21,520
princess for

591
00:20:21,520 --> 00:20:23,600
the machine for instance workstation one

592
00:20:23,600 --> 00:20:26,480
you can use wmic as well to to list the

593
00:20:26,480 --> 00:20:28,080
the local printers already mapped to

594
00:20:28,080 --> 00:20:29,840
that machine once you've found that

595
00:20:29,840 --> 00:20:32,159
printer the next step is to create the

596
00:20:32,159 --> 00:20:34,240
channel within c3 so there's a

597
00:20:34,240 --> 00:20:35,760
particular channel type called channel

598
00:20:35,760 --> 00:20:36,640
print

599
00:20:36,640 --> 00:20:39,360
you can leave everything default except

600
00:20:39,360 --> 00:20:41,120
printer address which is the printer

601
00:20:41,120 --> 00:20:43,200
that you identified in the previous step

602
00:20:43,200 --> 00:20:45,760
and the outbound job limit print number

603
00:20:45,760 --> 00:20:48,320
of print jobs to create so default zero

604
00:20:48,320 --> 00:20:50,400
i'd suggest setting it to one

605
00:20:50,400 --> 00:20:53,360
just for stability

606
00:20:53,600 --> 00:20:55,760
you then need to execute that relay so

607
00:20:55,760 --> 00:20:57,280
we're assuming for this scenario that

608
00:20:57,280 --> 00:20:59,840
you've got some out of band execution

609
00:20:59,840 --> 00:21:02,400
path and for us we've got remote desktop

610
00:21:02,400 --> 00:21:04,080
up in the top right hand side

611
00:21:04,080 --> 00:21:06,400
so this is the workstation two so we can

612
00:21:06,400 --> 00:21:08,240
execute the reload and workstation two

613
00:21:08,240 --> 00:21:09,440
and you'll see in the bottom left hand

614
00:21:09,440 --> 00:21:12,080
side the print queue so you'll see jobs

615
00:21:12,080 --> 00:21:14,559
being created in a pause state and then

616
00:21:14,559 --> 00:21:17,679
deleted as they're processed

617
00:21:17,679 --> 00:21:20,320
and you'll see this continue happen as

618
00:21:20,320 --> 00:21:22,720
workstation 1 and workstation 2 transfer

619
00:21:22,720 --> 00:21:25,039
data and then you'll see your relay

620
00:21:25,039 --> 00:21:26,960
check in so at this point command and

621
00:21:26,960 --> 00:21:28,799
control has been established despite

622
00:21:28,799 --> 00:21:30,559
workstation 1 and workstation 2 having

623
00:21:30,559 --> 00:21:33,120
no direct network connectivity with each

624
00:21:33,120 --> 00:21:34,159
other

625
00:21:34,159 --> 00:21:36,640
we can then stage a beacon through this

626
00:21:36,640 --> 00:21:38,159
and because a beacon is typically larger

627
00:21:38,159 --> 00:21:40,799
than one megabyte you'll see

628
00:21:40,799 --> 00:21:42,159
in the print queue in the bottom

629
00:21:42,159 --> 00:21:43,679
left-hand side

630
00:21:43,679 --> 00:21:45,679
multiple print jobs being created so

631
00:21:45,679 --> 00:21:47,600
print job we create in a pause state be

632
00:21:47,600 --> 00:21:49,520
interpreted then deleted and then

633
00:21:49,520 --> 00:21:51,679
another one will be created as well

634
00:21:51,679 --> 00:21:54,080
and you'll see actually what this looks

635
00:21:54,080 --> 00:21:55,760
like in practice because we're storing

636
00:21:55,760 --> 00:21:57,520
in the document name the way c3

637
00:21:57,520 --> 00:21:59,919
transfers its data is it will encrypt

638
00:21:59,919 --> 00:22:02,799
the packet and then base64 encode it and

639
00:22:02,799 --> 00:22:04,400
that's what you're seeing in the

640
00:22:04,400 --> 00:22:05,679
document name

641
00:22:05,679 --> 00:22:07,440
and there you can see the beacon

642
00:22:07,440 --> 00:22:10,000
checking in and we can begin to use that

643
00:22:10,000 --> 00:22:11,919
operationally as we would normally with

644
00:22:11,919 --> 00:22:14,720
any other beacon type

645
00:22:14,720 --> 00:22:16,240
awesome thank you

646
00:22:16,240 --> 00:22:18,799
so detection opportunities so there's a

647
00:22:18,799 --> 00:22:20,080
little bit a little bit different here

648
00:22:20,080 --> 00:22:21,600
so there's less of that obviously the

649
00:22:21,600 --> 00:22:23,840
net and post exploitation totally needed

650
00:22:23,840 --> 00:22:25,039
for this obviously we're just using our

651
00:22:25,039 --> 00:22:26,960
relays directly to talk to the printer

652
00:22:26,960 --> 00:22:28,320
but we still have a series of things

653
00:22:28,320 --> 00:22:30,000
that we can look at here first thing to

654
00:22:30,000 --> 00:22:30,960
bear in mind actually is quite an

655
00:22:30,960 --> 00:22:32,720
interesting one is the endpoint ui the

656
00:22:32,720 --> 00:22:34,400
way you're interacting with it so if

657
00:22:34,400 --> 00:22:36,159
you're running in the context of a

658
00:22:36,159 --> 00:22:38,480
user's session and you interact with a

659
00:22:38,480 --> 00:22:40,240
printer that has low ink low paper

660
00:22:40,240 --> 00:22:41,679
there's a jam the printer's offline

661
00:22:41,679 --> 00:22:43,200
something like that

662
00:22:43,200 --> 00:22:45,200
typically those areas will be presented

663
00:22:45,200 --> 00:22:47,360
to the user as a balloon notification as

664
00:22:47,360 --> 00:22:48,720
you can see there

665
00:22:48,720 --> 00:22:50,960
so if they're not doing any print jobs

666
00:22:50,960 --> 00:22:51,919
it might be something that raises

667
00:22:51,919 --> 00:22:53,200
suspicion that could potentially burn

668
00:22:53,200 --> 00:22:55,039
the whole operation there you can

669
00:22:55,039 --> 00:22:56,799
disable those notifications with some of

670
00:22:56,799 --> 00:22:58,240
the registry entries there as i've

671
00:22:58,240 --> 00:23:00,159
listed but just worth bearing in mind of

672
00:23:00,159 --> 00:23:01,360
course the the operational

673
00:23:01,360 --> 00:23:02,559
considerations that they could have as

674
00:23:02,559 --> 00:23:04,320
well

675
00:23:04,320 --> 00:23:05,840
i think the best place to see this

676
00:23:05,840 --> 00:23:07,600
taking place as a defender to alert upon

677
00:23:07,600 --> 00:23:09,440
it is using our print server event log

678
00:23:09,440 --> 00:23:11,200
so here you can see on the left hand

679
00:23:11,200 --> 00:23:13,520
side we can enable um the job name being

680
00:23:13,520 --> 00:23:15,120
present in the event log and on the

681
00:23:15,120 --> 00:23:16,960
right hand side and just zoom in a bit

682
00:23:16,960 --> 00:23:18,000
you can see

683
00:23:18,000 --> 00:23:20,799
that very long base64 encoded file name

684
00:23:20,799 --> 00:23:22,640
which is of course the data itself and

685
00:23:22,640 --> 00:23:24,559
we can see that in a series of 308 which

686
00:23:24,559 --> 00:23:26,240
is queuing the job and the 310 which is

687
00:23:26,240 --> 00:23:27,679
the job being deleted in quick

688
00:23:27,679 --> 00:23:29,679
succession as that file transfer or the

689
00:23:29,679 --> 00:23:31,679
data transfer takes place

690
00:23:31,679 --> 00:23:34,159
similarly module loads here so to

691
00:23:34,159 --> 00:23:35,760
facilitate the interaction with the

692
00:23:35,760 --> 00:23:38,720
printers as a series of dlls we're using

693
00:23:38,720 --> 00:23:40,400
most notably every time we're queuing

694
00:23:40,400 --> 00:23:42,960
adding a job um the print workflow proxy

695
00:23:42,960 --> 00:23:45,039
dll and the print folder dll are both

696
00:23:45,039 --> 00:23:47,120
being loaded each time

697
00:23:47,120 --> 00:23:48,799
one thing to note actually on the top

698
00:23:48,799 --> 00:23:50,480
right you can see me attempting to print

699
00:23:50,480 --> 00:23:52,480
through microsoft word interactively

700
00:23:52,480 --> 00:23:54,240
with the ui and the dialog boxes that

701
00:23:54,240 --> 00:23:55,279
come up

702
00:23:55,279 --> 00:23:57,200
when you're using this programmatically

703
00:23:57,200 --> 00:23:58,720
there's no ui it's all done through the

704
00:23:58,720 --> 00:24:01,039
relay and its apis you won't see that

705
00:24:01,039 --> 00:24:02,720
print ui dlr coming up so it's probably

706
00:24:02,720 --> 00:24:04,880
worth investigating other instances of

707
00:24:04,880 --> 00:24:08,559
that programmatic printing taking place

708
00:24:08,559 --> 00:24:10,240
network connections as we've already

709
00:24:10,240 --> 00:24:11,600
seen there has to be some kind of

710
00:24:11,600 --> 00:24:13,679
beaconing taking place to facilitate

711
00:24:13,679 --> 00:24:15,039
this connection how do i know when

712
00:24:15,039 --> 00:24:16,159
there's jobs for me and read them and

713
00:24:16,159 --> 00:24:18,320
then subsequently obviously reply as a

714
00:24:18,320 --> 00:24:20,720
response and this smb connection here to

715
00:24:20,720 --> 00:24:22,320
the spool service name pipe using the

716
00:24:22,320 --> 00:24:23,840
open printer x

717
00:24:23,840 --> 00:24:26,000
api call is what achieves that and that

718
00:24:26,000 --> 00:24:27,520
is our beaconing behavior again and

719
00:24:27,520 --> 00:24:29,279
again over time and to check if there's

720
00:24:29,279 --> 00:24:31,440
any jobs destined for our relay

721
00:24:31,440 --> 00:24:32,640
you go off the deep end and start

722
00:24:32,640 --> 00:24:34,640
looking at rpc and there's a couple of

723
00:24:34,640 --> 00:24:36,559
rpc methods here the enum jobs and the

724
00:24:36,559 --> 00:24:38,400
ad job which is optin on 4 and 24

725
00:24:38,400 --> 00:24:40,640
respectively and if we start logging

726
00:24:40,640 --> 00:24:41,440
this

727
00:24:41,440 --> 00:24:43,679
we do get some as you might expect well

728
00:24:43,679 --> 00:24:45,360
high volume telemetry and also some

729
00:24:45,360 --> 00:24:46,480
really good granularity here which

730
00:24:46,480 --> 00:24:49,440
allows us to see the process id so which

731
00:24:49,440 --> 00:24:50,880
process is actually initiating these

732
00:24:50,880 --> 00:24:52,960
jobs and we can see them interacting

733
00:24:52,960 --> 00:24:54,720
with the print service there using the

734
00:24:54,720 --> 00:24:56,640
the interface uid and then lastly we can

735
00:24:56,640 --> 00:24:58,159
see the op number to say it's this

736
00:24:58,159 --> 00:25:00,960
process that's interacting with the ms

737
00:25:00,960 --> 00:25:04,159
rprn interface and to add print jobs

738
00:25:04,159 --> 00:25:07,279
and delete and obviously list as well

739
00:25:07,279 --> 00:25:08,640
cool rdp

740
00:25:08,640 --> 00:25:11,600
great so on to our third of four

741
00:25:11,600 --> 00:25:14,240
channels so this is using remote desktop

742
00:25:14,240 --> 00:25:16,960
map drives for commander control so

743
00:25:16,960 --> 00:25:18,960
conceptually this is even even simpler

744
00:25:18,960 --> 00:25:20,559
than the previous two

745
00:25:20,559 --> 00:25:23,279
workstation one has only inbound three

746
00:25:23,279 --> 00:25:25,039
three at nine so remote desktop access

747
00:25:25,039 --> 00:25:26,720
to workstation two there's no other

748
00:25:26,720 --> 00:25:28,880
network connectivity so we need to use

749
00:25:28,880 --> 00:25:30,720
some functionality of remote desktop in

750
00:25:30,720 --> 00:25:34,559
order for command control to take place

751
00:25:34,559 --> 00:25:36,960
a couple of limitations here

752
00:25:36,960 --> 00:25:38,559
you obviously need map drives to be

753
00:25:38,559 --> 00:25:40,960
enabled so by default it is but we have

754
00:25:40,960 --> 00:25:42,640
worked on some restrictive environments

755
00:25:42,640 --> 00:25:44,559
where it's explicitly disabled by group

756
00:25:44,559 --> 00:25:46,880
policy so worth checking that

757
00:25:46,880 --> 00:25:48,720
and also for this

758
00:25:48,720 --> 00:25:50,960
example in the scenario and most likely

759
00:25:50,960 --> 00:25:53,840
operationally you'll be using sharp rdp

760
00:25:53,840 --> 00:25:55,919
to do everything through a beacon if you

761
00:25:55,919 --> 00:25:57,679
are using sharp rdp it's got a couple of

762
00:25:57,679 --> 00:25:59,840
limitations so the target's keyboard

763
00:25:59,840 --> 00:26:02,000
must be set to us english and also there

764
00:26:02,000 --> 00:26:03,520
can't be any special characters in the

765
00:26:03,520 --> 00:26:06,000
command you're executing so the the

766
00:26:06,000 --> 00:26:08,000
default relay name has underscores so

767
00:26:08,000 --> 00:26:09,919
you just need to change your relay name

768
00:26:09,919 --> 00:26:11,360
if you're doing this hands-on keyboard

769
00:26:11,360 --> 00:26:13,279
like manually through a remote desktop

770
00:26:13,279 --> 00:26:15,600
session these restrictions don't apply

771
00:26:15,600 --> 00:26:17,039
but it's worth bearing in mind as

772
00:26:17,039 --> 00:26:20,320
chances are you will be using sharp idp

773
00:26:20,320 --> 00:26:22,159
the data flow is quite simple so

774
00:26:22,159 --> 00:26:25,840
workstation one will be using uh c users

775
00:26:25,840 --> 00:26:28,000
public so it's again it's using the unc

776
00:26:28,000 --> 00:26:30,000
share file channel that we talked about

777
00:26:30,000 --> 00:26:31,679
before so it's going to be reading and

778
00:26:31,679 --> 00:26:34,240
writing packets to see users public

779
00:26:34,240 --> 00:26:36,159
workstation 2 is also going to be

780
00:26:36,159 --> 00:26:38,320
reading writing to see users public

781
00:26:38,320 --> 00:26:39,520
except from the perspective of

782
00:26:39,520 --> 00:26:41,840
workstation 2 the network path is

783
00:26:41,840 --> 00:26:43,760
slightly different so it's the terminal

784
00:26:43,760 --> 00:26:46,240
of services client backslash c backslash

785
00:26:46,240 --> 00:26:48,799
users access to public

786
00:26:48,799 --> 00:26:50,000
so it's reading right in the same

787
00:26:50,000 --> 00:26:52,400
directory but just bear in mind that the

788
00:26:52,400 --> 00:26:54,799
the target directory

789
00:26:54,799 --> 00:26:56,240
is slightly different when you're

790
00:26:56,240 --> 00:26:59,279
generating the relay

791
00:26:59,840 --> 00:27:01,760
so first thing to do is create the

792
00:27:01,760 --> 00:27:03,600
channel so you can see here we're using

793
00:27:03,600 --> 00:27:06,080
the book standard unc share file and

794
00:27:06,080 --> 00:27:07,840
we're specifying c users public so

795
00:27:07,840 --> 00:27:09,279
workstation one is going to use that

796
00:27:09,279 --> 00:27:11,360
directory we'll need to download the

797
00:27:11,360 --> 00:27:13,440
relay and we can keep everything the

798
00:27:13,440 --> 00:27:17,279
same except the target directory so from

799
00:27:17,279 --> 00:27:19,039
the perspective of workstation 2 this is

800
00:27:19,039 --> 00:27:22,080
again the the ts client see users public

801
00:27:22,080 --> 00:27:23,919
so it's going to use the map drive that

802
00:27:23,919 --> 00:27:26,080
sharp idp is going to create

803
00:27:26,080 --> 00:27:28,559
to to expose see users public on

804
00:27:28,559 --> 00:27:32,799
workstation one two workstation two

805
00:27:33,600 --> 00:27:36,320
so to execute the relay we can also make

806
00:27:36,320 --> 00:27:38,480
use of sharp idp we don't actually need

807
00:27:38,480 --> 00:27:41,520
to upload the the payload to workstation

808
00:27:41,520 --> 00:27:44,320
2 we can put it in the map drive and we

809
00:27:44,320 --> 00:27:45,840
can execute command there with two

810
00:27:45,840 --> 00:27:47,760
really important flags so

811
00:27:47,760 --> 00:27:49,760
connect drive equal true

812
00:27:49,760 --> 00:27:51,360
so this is going to connect the map

813
00:27:51,360 --> 00:27:53,039
drive and allow you to access that

814
00:27:53,039 --> 00:27:56,480
payload and ultimately access cs public

815
00:27:56,480 --> 00:27:58,399
to transfer the files

816
00:27:58,399 --> 00:28:01,440
and x equals force so this tells sharp

817
00:28:01,440 --> 00:28:03,440
rdp that once you've successfully

818
00:28:03,440 --> 00:28:05,760
executed this relay keep the session

819
00:28:05,760 --> 00:28:08,480
alive don't exit so this is going to

820
00:28:08,480 --> 00:28:10,080
keep that map drive exposed to

821
00:28:10,080 --> 00:28:12,399
workstation 2. so once we've done that

822
00:28:12,399 --> 00:28:14,080
you can see that it's already checked in

823
00:28:14,080 --> 00:28:16,799
in c3 on the right hand side so we can

824
00:28:16,799 --> 00:28:19,600
now stage a beacon as we've done before

825
00:28:19,600 --> 00:28:20,799
through this

826
00:28:20,799 --> 00:28:22,080
and

827
00:28:22,080 --> 00:28:23,760
this is going to be

828
00:28:23,760 --> 00:28:26,000
writing its files to c users public

829
00:28:26,000 --> 00:28:27,919
which is already exposed because sharp

830
00:28:27,919 --> 00:28:30,559
idp is still running in the beacon

831
00:28:30,559 --> 00:28:32,320
and you can see

832
00:28:32,320 --> 00:28:34,880
hopefully the

833
00:28:34,880 --> 00:28:36,799
b can check in c3 on the right hand side

834
00:28:36,799 --> 00:28:41,120
and also in the team server on the left

835
00:28:42,960 --> 00:28:46,399
nice cool so from a detection angle then

836
00:28:46,399 --> 00:28:48,159
so of course we've got our relay process

837
00:28:48,159 --> 00:28:50,080
in the the workstation one

838
00:28:50,080 --> 00:28:51,679
and that's going to be using.net tooling

839
00:28:51,679 --> 00:28:53,840
just as we saw from saw from sharpsphere

840
00:28:53,840 --> 00:28:56,320
in this case sharp rdp ox13's post

841
00:28:56,320 --> 00:28:58,000
exploitation tooling is now running in

842
00:28:58,000 --> 00:29:00,559
our spawn to process run dlr32

843
00:29:00,559 --> 00:29:02,240
that's making network connections over

844
00:29:02,240 --> 00:29:04,240
onto our workstation two where we have

845
00:29:04,240 --> 00:29:06,320
our new relay running and then both of

846
00:29:06,320 --> 00:29:08,480
those relays are then communicating back

847
00:29:08,480 --> 00:29:10,159
effectively to see users public on

848
00:29:10,159 --> 00:29:12,399
workstation one so what can we look for

849
00:29:12,399 --> 00:29:14,080
here well a series of different things

850
00:29:14,080 --> 00:29:16,159
really let's take a look

851
00:29:16,159 --> 00:29:17,760
firstly dot net tooling we've seen this

852
00:29:17,760 --> 00:29:20,320
kind of principle before using ecw we

853
00:29:20,320 --> 00:29:21,840
can see our assembly loads within run

854
00:29:21,840 --> 00:29:24,000
dl32 so we can see quite clearly sharp

855
00:29:24,000 --> 00:29:26,320
rdp is running and we can also see some

856
00:29:26,320 --> 00:29:27,919
of the dlls that actually facilitate

857
00:29:27,919 --> 00:29:29,200
this as well

858
00:29:29,200 --> 00:29:31,600
so using our effectively headless rdp

859
00:29:31,600 --> 00:29:34,279
session we're making use of the dll

860
00:29:34,279 --> 00:29:36,480
mstscax.dll which is the activex client

861
00:29:36,480 --> 00:29:38,320
rdp dll

862
00:29:38,320 --> 00:29:40,159
using etw or you can see in process

863
00:29:40,159 --> 00:29:41,760
hacker for example we can see that that

864
00:29:41,760 --> 00:29:44,080
dll has been loaded obviously as james

865
00:29:44,080 --> 00:29:45,600
says that needs to be running to

866
00:29:45,600 --> 00:29:47,279
initiate the connection

867
00:29:47,279 --> 00:29:48,799
and then map the drive and allow that to

868
00:29:48,799 --> 00:29:50,000
stay open so that's what we're seeing

869
00:29:50,000 --> 00:29:51,440
there we can see that the the module

870
00:29:51,440 --> 00:29:53,360
load taking place

871
00:29:53,360 --> 00:29:55,120
and then of course just as we saw before

872
00:29:55,120 --> 00:29:57,520
i run dll32 our spawn two process is

873
00:29:57,520 --> 00:29:59,600
making a very anomalous connection to

874
00:29:59,600 --> 00:30:01,679
our second workstation on 3389 to

875
00:30:01,679 --> 00:30:04,159
actually establish our rdp session

876
00:30:04,159 --> 00:30:05,360
um

877
00:30:05,360 --> 00:30:07,440
also here just as a note and when we're

878
00:30:07,440 --> 00:30:09,039
doing that beacon staging we're going to

879
00:30:09,039 --> 00:30:11,120
see a burst of package with a larger

880
00:30:11,120 --> 00:30:12,640
size there those udp packets that are

881
00:30:12,640 --> 00:30:14,559
actually going to enable us to transfer

882
00:30:14,559 --> 00:30:16,480
that data over and achieve

883
00:30:16,480 --> 00:30:18,559
the beacon running within workstation

884
00:30:18,559 --> 00:30:19,919
2's relay

885
00:30:19,919 --> 00:30:22,559
and finally elder brilliant so the last

886
00:30:22,559 --> 00:30:23,760
channel we're going to talk about is

887
00:30:23,760 --> 00:30:26,960
ldap so this is using ldap attributes to

888
00:30:26,960 --> 00:30:28,640
transmit data between workstation 1 and

889
00:30:28,640 --> 00:30:30,640
workstation 2 ultimately for command

890
00:30:30,640 --> 00:30:33,440
control scenario workstation 1 has again

891
00:30:33,440 --> 00:30:35,360
no network connectivity to workstation

892
00:30:35,360 --> 00:30:38,080
2. however they can both talk ldap to

893
00:30:38,080 --> 00:30:40,240
the same domain controller and so we can

894
00:30:40,240 --> 00:30:42,399
use these ldap attributes to transfer

895
00:30:42,399 --> 00:30:44,080
data between the two

896
00:30:44,080 --> 00:30:45,679
there's a couple of limitations and i

897
00:30:45,679 --> 00:30:47,200
would highly encourage you to check out

898
00:30:47,200 --> 00:30:49,200
the references listed below because all

899
00:30:49,200 --> 00:30:51,279
of this channel is entirely built on the

900
00:30:51,279 --> 00:30:53,200
research from from these two in

901
00:30:53,200 --> 00:30:55,279
particular uh

902
00:30:55,279 --> 00:30:56,399
so

903
00:30:56,399 --> 00:30:58,320
please please check them out um you know

904
00:30:58,320 --> 00:30:59,279
kudos to them this wouldn't have

905
00:30:59,279 --> 00:31:01,200
happened without the research they put

906
00:31:01,200 --> 00:31:01,919
out

907
00:31:01,919 --> 00:31:04,080
so both sides need to communicate with

908
00:31:04,080 --> 00:31:05,919
the same domain controller ideally

909
00:31:05,919 --> 00:31:08,240
otherwise it becomes operationally um

910
00:31:08,240 --> 00:31:09,440
very restrictive because you have to

911
00:31:09,440 --> 00:31:10,880
wait for the attributes to sync across

912
00:31:10,880 --> 00:31:12,399
the main controllers

913
00:31:12,399 --> 00:31:13,840
both sides need to be able to modify the

914
00:31:13,840 --> 00:31:16,240
same user's attributes

915
00:31:16,240 --> 00:31:19,200
and you're also limited by the the

916
00:31:19,200 --> 00:31:20,880
target attribute that you choose so the

917
00:31:20,880 --> 00:31:22,640
size of data type and again in those

918
00:31:22,640 --> 00:31:24,640
references there's some research which

919
00:31:24,640 --> 00:31:26,559
data which attributes are appropriate to

920
00:31:26,559 --> 00:31:29,039
use uh and we've simply used that use

921
00:31:29,039 --> 00:31:30,840
that research already

922
00:31:30,840 --> 00:31:33,360
so from a data flow perspective it's

923
00:31:33,360 --> 00:31:36,080
very similar to before

924
00:31:36,080 --> 00:31:37,200
except there's a difference but there's

925
00:31:37,200 --> 00:31:39,360
a lock attribute and a data attribute so

926
00:31:39,360 --> 00:31:41,200
these are the two different ldap

927
00:31:41,200 --> 00:31:43,600
attributes that you are you are reading

928
00:31:43,600 --> 00:31:45,279
and writing to so

929
00:31:45,279 --> 00:31:47,039
workstation one is going to use the lock

930
00:31:47,039 --> 00:31:49,039
attribute to set

931
00:31:49,039 --> 00:31:51,519
the destination id that the data

932
00:31:51,519 --> 00:31:53,279
attribute should be read by so

933
00:31:53,279 --> 00:31:55,279
workstation one is gonna write to the

934
00:31:55,279 --> 00:31:56,720
lock attribute

935
00:31:56,720 --> 00:31:57,840
that

936
00:31:57,840 --> 00:31:58,720
the

937
00:31:58,720 --> 00:32:00,799
information in the data attribute is

938
00:32:00,799 --> 00:32:02,960
destined for workstation 2 right so it's

939
00:32:02,960 --> 00:32:04,000
going to write to the lock attribute

940
00:32:04,000 --> 00:32:06,080
first and it's going to write the actual

941
00:32:06,080 --> 00:32:08,159
data to the data attribute you've

942
00:32:08,159 --> 00:32:09,440
specified

943
00:32:09,440 --> 00:32:11,120
workstation 2 is going to check what's

944
00:32:11,120 --> 00:32:12,960
in the lock attribute and say is it

945
00:32:12,960 --> 00:32:15,200
destined for me great it is

946
00:32:15,200 --> 00:32:16,640
so it's going to take that and it's

947
00:32:16,640 --> 00:32:18,559
going to clear both attributes ready to

948
00:32:18,559 --> 00:32:21,600
be used again by another relay

949
00:32:21,600 --> 00:32:23,279
so we're going to create a channel and

950
00:32:23,279 --> 00:32:26,080
there's a channel ldap in c3 just to

951
00:32:26,080 --> 00:32:28,000
drive a bit deeper into what each one of

952
00:32:28,000 --> 00:32:29,120
these means

953
00:32:29,120 --> 00:32:30,640
the data attribute so this is where the

954
00:32:30,640 --> 00:32:32,640
bulk of the data is stored

955
00:32:32,640 --> 00:32:34,799
we use msmq science certificates there

956
00:32:34,799 --> 00:32:36,159
are others available if you check out

957
00:32:36,159 --> 00:32:38,080
that research that we linked before

958
00:32:38,080 --> 00:32:40,159
but msmq science certificates mean you

959
00:32:40,159 --> 00:32:41,279
can

960
00:32:41,279 --> 00:32:43,519
any domain users can modify their own

961
00:32:43,519 --> 00:32:44,720
attribute here

962
00:32:44,720 --> 00:32:46,559
and it can also support one makeup data

963
00:32:46,559 --> 00:32:48,720
so it gets the best throughput block

964
00:32:48,720 --> 00:32:50,480
attribute is less important that's just

965
00:32:50,480 --> 00:32:52,320
where you're storing the

966
00:32:52,320 --> 00:32:53,679
where the data attribute is actually

967
00:32:53,679 --> 00:32:55,440
destined for

968
00:32:55,440 --> 00:32:57,120
maximum packet size

969
00:32:57,120 --> 00:32:58,320
if you're not changing it don't need to

970
00:32:58,320 --> 00:33:00,000
worry about it if you are check out the

971
00:33:00,000 --> 00:33:01,919
research because not all of them support

972
00:33:01,919 --> 00:33:04,159
this much data

973
00:33:04,159 --> 00:33:06,080
username and password that's for an

974
00:33:06,080 --> 00:33:08,080
account that has the ability to or the

975
00:33:08,080 --> 00:33:09,840
permissions to modify the target

976
00:33:09,840 --> 00:33:11,600
attributes if you're running under the

977
00:33:11,600 --> 00:33:14,640
context of the user here

978
00:33:14,640 --> 00:33:16,799
who owns the attribute then you don't

979
00:33:16,799 --> 00:33:18,320
need to worry about this but if you need

980
00:33:18,320 --> 00:33:19,760
to operate it under a different user's

981
00:33:19,760 --> 00:33:21,679
context you'll need to specify the

982
00:33:21,679 --> 00:33:24,799
username and password explicitly

983
00:33:24,799 --> 00:33:25,679
so

984
00:33:25,679 --> 00:33:26,799
in practice

985
00:33:26,799 --> 00:33:28,000
on workstation 2 you've got your

986
00:33:28,000 --> 00:33:30,080
outbound connection you can execute your

987
00:33:30,080 --> 00:33:32,000
relay

988
00:33:32,000 --> 00:33:34,480
this is going to start writing data to

989
00:33:34,480 --> 00:33:37,279
the data and the lock attributes

990
00:33:37,279 --> 00:33:39,039
and

991
00:33:39,039 --> 00:33:41,840
all being well you should see uh in your

992
00:33:41,840 --> 00:33:44,720
c3 on the right hand side your relay

993
00:33:44,720 --> 00:33:46,159
should check in

994
00:33:46,159 --> 00:33:48,399
as it uses those attributes for for

995
00:33:48,399 --> 00:33:51,399
transfer

996
00:33:54,399 --> 00:33:56,640
there we go you can see that the relay

997
00:33:56,640 --> 00:33:58,880
is checked in so commando control via

998
00:33:58,880 --> 00:34:00,799
those attributes has been established

999
00:34:00,799 --> 00:34:03,440
and again we can add a peripheral beacon

1000
00:34:03,440 --> 00:34:06,679
as before

1001
00:34:07,360 --> 00:34:08,879
nice thanks

1002
00:34:08,879 --> 00:34:10,960
so last one then detection opportunities

1003
00:34:10,960 --> 00:34:11,918
here well

1004
00:34:11,918 --> 00:34:13,440
there's there's several here again

1005
00:34:13,440 --> 00:34:15,280
obviously the old app queries network

1006
00:34:15,280 --> 00:34:17,760
connections and the windows event logs

1007
00:34:17,760 --> 00:34:18,879
that are servicing from our domain

1008
00:34:18,879 --> 00:34:20,800
controllers as well so let's take a look

1009
00:34:20,800 --> 00:34:23,040
firstly network connections just as we

1010
00:34:23,040 --> 00:34:24,320
saw there needs to be some kind of

1011
00:34:24,320 --> 00:34:26,480
constructive beaconing taking place here

1012
00:34:26,480 --> 00:34:28,399
and as we can see in our in this case

1013
00:34:28,399 --> 00:34:30,560
plain text ldap implementation we can

1014
00:34:30,560 --> 00:34:33,119
see this continuous polling against the

1015
00:34:33,119 --> 00:34:35,440
isdn number um attribute which is our

1016
00:34:35,440 --> 00:34:36,480
lock attribute to see if there's

1017
00:34:36,480 --> 00:34:38,480
anything there that's destined for us

1018
00:34:38,480 --> 00:34:40,879
and our relay

1019
00:34:40,879 --> 00:34:42,399
if we like take a little bit of a dive

1020
00:34:42,399 --> 00:34:44,079
into the code here we can see how the

1021
00:34:44,079 --> 00:34:45,199
receiving

1022
00:34:45,199 --> 00:34:47,359
logic looks firstly we check the lock

1023
00:34:47,359 --> 00:34:49,199
attribute is it destined for us is this

1024
00:34:49,199 --> 00:34:51,040
stuff that we should care about if not

1025
00:34:51,040 --> 00:34:52,879
no further action

1026
00:34:52,879 --> 00:34:54,960
if it's us writing to the channel we

1027
00:34:54,960 --> 00:34:56,239
check the lock attribute again but this

1028
00:34:56,239 --> 00:34:57,839
time just to make sure it's clear we're

1029
00:34:57,839 --> 00:34:59,200
not going to be overwriting some other

1030
00:34:59,200 --> 00:35:00,720
packets and start interrupting other

1031
00:35:00,720 --> 00:35:02,400
communications

1032
00:35:02,400 --> 00:35:03,599
and then when we're happy there we've

1033
00:35:03,599 --> 00:35:05,040
written to that we can then write to our

1034
00:35:05,040 --> 00:35:06,720
data attribute with the data that's then

1035
00:35:06,720 --> 00:35:08,960
going to be passed on to our destination

1036
00:35:08,960 --> 00:35:11,599
again using etw for the ldap queries

1037
00:35:11,599 --> 00:35:12,960
here there's a little snippet there for

1038
00:35:12,960 --> 00:35:14,320
the config

1039
00:35:14,320 --> 00:35:15,520
we can take a look at that and quite

1040
00:35:15,520 --> 00:35:18,079
clearly we can see our two relays making

1041
00:35:18,079 --> 00:35:19,440
these queries to the primary

1042
00:35:19,440 --> 00:35:21,280
international sdn number and to the

1043
00:35:21,280 --> 00:35:23,839
scientific attribute as well

1044
00:35:23,839 --> 00:35:26,000
interestingly we can use um directory

1045
00:35:26,000 --> 00:35:28,560
service change events so 5136 and this

1046
00:35:28,560 --> 00:35:30,480
is surface through the use of a sacl or

1047
00:35:30,480 --> 00:35:32,560
a sacko against those attributes as well

1048
00:35:32,560 --> 00:35:34,480
so every time they're changed we will

1049
00:35:34,480 --> 00:35:35,760
see um

1050
00:35:35,760 --> 00:35:38,880
the surface of 5.36 and here you can see

1051
00:35:38,880 --> 00:35:41,119
on the very right hand side

1052
00:35:41,119 --> 00:35:43,440
that unique attribute value being set

1053
00:35:43,440 --> 00:35:44,960
and then further down you can see

1054
00:35:44,960 --> 00:35:47,280
another attribute and the the same

1055
00:35:47,280 --> 00:35:49,200
attribute set with a different value

1056
00:35:49,200 --> 00:35:50,560
another another value there and if we

1057
00:35:50,560 --> 00:35:52,160
take a look in c3 and kind of compare

1058
00:35:52,160 --> 00:35:54,240
them side by side we can see that these

1059
00:35:54,240 --> 00:35:56,079
values actually match up with the output

1060
00:35:56,079 --> 00:35:59,520
id and the input id for their respective

1061
00:35:59,520 --> 00:36:01,119
relay so just as james described what

1062
00:36:01,119 --> 00:36:03,040
we're doing here is writing to this and

1063
00:36:03,040 --> 00:36:05,599
say this is destined for this relay and

1064
00:36:05,599 --> 00:36:07,440
this is destined in response to that as

1065
00:36:07,440 --> 00:36:09,119
well

1066
00:36:09,119 --> 00:36:11,599
and then as well as that we can also see

1067
00:36:11,599 --> 00:36:13,040
the sign certificates actually being

1068
00:36:13,040 --> 00:36:15,200
changed as well with bike content which

1069
00:36:15,200 --> 00:36:16,800
is of course is the contents of our data

1070
00:36:16,800 --> 00:36:18,880
that's being sent

1071
00:36:18,880 --> 00:36:20,960
then we can also use access events

1072
00:36:20,960 --> 00:36:22,400
directory service access event so this

1073
00:36:22,400 --> 00:36:24,320
is 4662

1074
00:36:24,320 --> 00:36:25,520
this is a little bit different and

1075
00:36:25,520 --> 00:36:28,000
obviously by design more noisy basically

1076
00:36:28,000 --> 00:36:29,599
and because rather than just the change

1077
00:36:29,599 --> 00:36:30,800
events we're looking at every time a

1078
00:36:30,800 --> 00:36:33,280
user accesses this attribute as well um

1079
00:36:33,280 --> 00:36:34,640
if we look at the object properties

1080
00:36:34,640 --> 00:36:36,560
there you can see these guides and using

1081
00:36:36,560 --> 00:36:38,640
the microsoft documentation we can relay

1082
00:36:38,640 --> 00:36:40,640
that back um to the relevant attributes

1083
00:36:40,640 --> 00:36:42,320
so the science certificates attributes

1084
00:36:42,320 --> 00:36:44,320
um and the primary international isdn

1085
00:36:44,320 --> 00:36:46,800
number as well there and quite usefully

1086
00:36:46,800 --> 00:36:49,040
we can see the access mask as well there

1087
00:36:49,040 --> 00:36:51,119
so you can see read property and right

1088
00:36:51,119 --> 00:36:52,400
property are being used there so we can

1089
00:36:52,400 --> 00:36:53,920
kind of infer what's happening where

1090
00:36:53,920 --> 00:36:55,839
we're writing and reading from those as

1091
00:36:55,839 --> 00:36:58,960
we need to to achieve um c2 so finally

1092
00:36:58,960 --> 00:37:00,480
conclusions

1093
00:37:00,480 --> 00:37:02,240
brilliant thank you so if you made it

1094
00:37:02,240 --> 00:37:04,320
this far then well done uh if there was

1095
00:37:04,320 --> 00:37:05,680
three things i want you to walk away

1096
00:37:05,680 --> 00:37:07,359
from this talk with right it's the

1097
00:37:07,359 --> 00:37:08,560
importance of reviewing the trust

1098
00:37:08,560 --> 00:37:10,480
boundaries between critical networks you

1099
00:37:10,480 --> 00:37:12,320
know confirm that are they really as

1100
00:37:12,320 --> 00:37:14,320
air-gapped as you think

1101
00:37:14,320 --> 00:37:16,160
look for possible data flows that could

1102
00:37:16,160 --> 00:37:18,000
be exploited in this sort of fashion and

1103
00:37:18,000 --> 00:37:19,119
then also look at how they could be

1104
00:37:19,119 --> 00:37:20,960
mitigated so can i completely be

1105
00:37:20,960 --> 00:37:23,520
eliminated or can you include the the

1106
00:37:23,520 --> 00:37:24,960
prevention and detection controls that

1107
00:37:24,960 --> 00:37:26,000
we've

1108
00:37:26,000 --> 00:37:28,320
discussed here to

1109
00:37:28,320 --> 00:37:29,839
prevent an attacker abusing these

1110
00:37:29,839 --> 00:37:32,400
channels and more broadly can you

1111
00:37:32,400 --> 00:37:34,400
preemptively reduce your attack surface

1112
00:37:34,400 --> 00:37:36,640
by looking at the internal external

1113
00:37:36,640 --> 00:37:39,280
services that could be used and abused

1114
00:37:39,280 --> 00:37:42,480
for c2 and preemptively blocking them

1115
00:37:42,480 --> 00:37:44,320
yeah absolutely and then just one last

1116
00:37:44,320 --> 00:37:45,920
thing to say the link in the bottom

1117
00:37:45,920 --> 00:37:47,760
there is to the c3

1118
00:37:47,760 --> 00:37:49,440
tooling on github it's open source

1119
00:37:49,440 --> 00:37:50,960
openly available so please do check it

1120
00:37:50,960 --> 00:37:51,680
out

1121
00:37:51,680 --> 00:37:53,520
and then also we're we're very active on

1122
00:37:53,520 --> 00:37:54,960
bloodhound slack as well in the c3

1123
00:37:54,960 --> 00:37:56,640
channel so if you want to talk to us uh

1124
00:37:56,640 --> 00:37:58,160
or indeed the developers that maintain

1125
00:37:58,160 --> 00:38:00,320
c3 um then please join there and we can

1126
00:38:00,320 --> 00:38:01,599
we can have a chat but otherwise thank

1127
00:38:01,599 --> 00:38:02,880
you and thanks for joining thanks

1128
00:38:02,880 --> 00:38:05,839
everyone

