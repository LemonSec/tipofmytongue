1
00:00:01,130 --> 00:00:14,690
[Music]

2
00:00:15,280 --> 00:00:18,000
hi everyone welcome to our talk dabbing

3
00:00:18,000 --> 00:00:21,119
into supporter discovery discovering lp

4
00:00:21,119 --> 00:00:22,960
and rc vulnerabilities in windows

5
00:00:22,960 --> 00:00:24,400
printer

6
00:00:24,400 --> 00:00:26,400
this is sherfoni i'm a security

7
00:00:26,400 --> 00:00:29,119
researcher of sample force research team

8
00:00:29,119 --> 00:00:31,439
this research is a joint work with dr

9
00:00:31,439 --> 00:00:33,520
jin lampong and luis lee

10
00:00:33,520 --> 00:00:35,600
dr jinpong is a principal security

11
00:00:35,600 --> 00:00:38,079
researcher of sample force

12
00:00:38,079 --> 00:00:40,719
lewis lee is a security researcher of

13
00:00:40,719 --> 00:00:43,040
sample force research team

14
00:00:43,040 --> 00:00:45,360
it's our pleasure to hear to share

15
00:00:45,360 --> 00:00:47,039
research

16
00:00:47,039 --> 00:00:48,960
in the past year we have found the most

17
00:00:48,960 --> 00:00:52,480
fun several lp and rc bugs in windows

18
00:00:52,480 --> 00:00:53,520
printer

19
00:00:53,520 --> 00:00:55,440
in this presentation we'll disclosure

20
00:00:55,440 --> 00:00:58,000
the sparks and our exploring approach

21
00:00:58,000 --> 00:00:59,520
for them

22
00:00:59,520 --> 00:01:01,760
here is our agenda in the past year we

23
00:01:01,760 --> 00:01:03,760
have conducted some research on the

24
00:01:03,760 --> 00:01:05,360
printer's pool

25
00:01:05,360 --> 00:01:06,560
in this talk

26
00:01:06,560 --> 00:01:09,439
we will introduce some lp and rc

27
00:01:09,439 --> 00:01:11,680
vulnerabilities our printer's puller and

28
00:01:11,680 --> 00:01:13,920
the shell and the share always is

29
00:01:13,920 --> 00:01:16,640
deployed approach for them

30
00:01:16,640 --> 00:01:17,439
and

31
00:01:17,439 --> 00:01:19,680
now how could we bypass the patch or

32
00:01:19,680 --> 00:01:22,080
microsoft choose to explore this box

33
00:01:22,080 --> 00:01:24,399
again

34
00:01:25,520 --> 00:01:28,560
the primary component of printing

35
00:01:28,560 --> 00:01:31,280
interface is a princess product the

36
00:01:31,280 --> 00:01:33,119
print scroller is an

37
00:01:33,119 --> 00:01:35,280
executable file that manages the

38
00:01:35,280 --> 00:01:37,119
printing process

39
00:01:37,119 --> 00:01:40,720
it is exposed the functionality for add

40
00:01:40,720 --> 00:01:43,680
or remove a new printer

41
00:01:43,680 --> 00:01:45,759
and allow user to configure the new

42
00:01:45,759 --> 00:01:46,960
printer

43
00:01:46,960 --> 00:01:49,360
support high level function course into

44
00:01:49,360 --> 00:01:51,920
your print job

45
00:01:51,920 --> 00:01:54,000
receive printer jobs and schedule the

46
00:01:54,000 --> 00:01:56,159
printer job for printing

47
00:01:56,159 --> 00:01:57,680
as we know

48
00:01:57,680 --> 00:02:01,280
window printer is based on our pc model

49
00:02:01,280 --> 00:02:04,159
by using the xposed rpc interface we can

50
00:02:04,159 --> 00:02:06,479
add a new printer and we will fully

51
00:02:06,479 --> 00:02:08,639
control the printer then we can

52
00:02:08,639 --> 00:02:11,038
configure this printer create some

53
00:02:11,038 --> 00:02:13,360
printer jobs print bring the jobs to

54
00:02:13,360 --> 00:02:15,680
print the port and manage these printer

55
00:02:15,680 --> 00:02:17,440
jobs

56
00:02:17,440 --> 00:02:19,840
all of the bombs are accompanied by the

57
00:02:19,840 --> 00:02:23,360
high level privilege privilege process

58
00:02:23,360 --> 00:02:26,239
support sv esc

59
00:02:26,239 --> 00:02:29,680
the main component of the rpc core is

60
00:02:29,680 --> 00:02:31,519
its local spl

61
00:02:31,519 --> 00:02:32,560
dell

62
00:02:32,560 --> 00:02:34,879
the client can choose to interact with

63
00:02:34,879 --> 00:02:37,680
the school locally or mostly

64
00:02:37,680 --> 00:02:40,400
which provides us with a local and

65
00:02:40,400 --> 00:02:43,599
remote attempt service

66
00:02:43,599 --> 00:02:45,599
we are not going to talk tomorrow too

67
00:02:45,599 --> 00:02:48,480
much about the basics of school

68
00:02:48,480 --> 00:02:50,800
there have been a lot of public research

69
00:02:50,800 --> 00:02:52,080
about this

70
00:02:52,080 --> 00:02:55,599
you can read them by yourself

71
00:02:55,920 --> 00:02:57,360
so let's go straight for the

72
00:02:57,360 --> 00:02:59,440
vulnerabilities

73
00:02:59,440 --> 00:03:01,920
our journey of poland security research

74
00:03:01,920 --> 00:03:03,120
begins with

75
00:03:03,120 --> 00:03:04,640
cve

76
00:03:04,640 --> 00:03:07,680
2020 10 48

77
00:03:07,680 --> 00:03:09,680
also called the printer daemon

78
00:03:09,680 --> 00:03:11,519
it's a logical bug

79
00:03:11,519 --> 00:03:14,239
you can inspire this spark to white

80
00:03:14,239 --> 00:03:16,080
to write arbitrary

81
00:03:16,080 --> 00:03:18,400
content into arbitrary files

82
00:03:18,400 --> 00:03:20,560
the vulnerability is in the printing

83
00:03:20,560 --> 00:03:21,840
process

84
00:03:21,840 --> 00:03:23,920
let's quickly review the exporting

85
00:03:23,920 --> 00:03:25,760
process of the

86
00:03:25,760 --> 00:03:27,280
vulnerability

87
00:03:27,280 --> 00:03:29,440
the first thing you should add a printed

88
00:03:29,440 --> 00:03:32,080
job to pin the driver the driver must be

89
00:03:32,080 --> 00:03:34,560
a known printed driver in your computer

90
00:03:34,560 --> 00:03:36,560
such as

91
00:03:36,560 --> 00:03:37,920
generic

92
00:03:37,920 --> 00:03:40,080
slash text only

93
00:03:40,080 --> 00:03:43,120
then you should add a new printed port

94
00:03:43,120 --> 00:03:45,680
a printer port can be a file port the

95
00:03:45,680 --> 00:03:46,959
file pass

96
00:03:46,959 --> 00:03:50,159
can be a protected protected position

97
00:03:50,159 --> 00:03:52,640
for median user such as

98
00:03:52,640 --> 00:03:53,360
c

99
00:03:53,360 --> 00:03:56,319
band slash windows backslash season 32

100
00:03:56,319 --> 00:03:59,760
backslash one dose txt

101
00:03:59,760 --> 00:04:02,080
your printer will then output the

102
00:04:02,080 --> 00:04:05,360
contents of the printer job to this port

103
00:04:05,360 --> 00:04:07,599
after you have added the printer driver

104
00:04:07,599 --> 00:04:09,439
and the printer port you can add a new

105
00:04:09,439 --> 00:04:11,120
printer called printer dma in your

106
00:04:11,120 --> 00:04:13,760
computer and specify the printer driver

107
00:04:13,760 --> 00:04:16,000
and the printer port for your printer

108
00:04:16,000 --> 00:04:18,560
then you can either add a printer job to

109
00:04:18,560 --> 00:04:20,798
your printer and specify what need will

110
00:04:20,798 --> 00:04:22,960
need to be printed

111
00:04:22,960 --> 00:04:25,600
the key step of the exploitation is

112
00:04:25,600 --> 00:04:27,440
starting smaller while starting your

113
00:04:27,440 --> 00:04:28,560
computer

114
00:04:28,560 --> 00:04:31,280
this state lead to the logical bug after

115
00:04:31,280 --> 00:04:33,840
you force the supporter service to start

116
00:04:33,840 --> 00:04:36,320
to restart you can resume the printer

117
00:04:36,320 --> 00:04:37,840
job and then

118
00:04:37,840 --> 00:04:40,800
the content of the printer job will be

119
00:04:40,800 --> 00:04:44,320
written to the printer port you specify

120
00:04:44,320 --> 00:04:45,440
here is

121
00:04:45,440 --> 00:04:47,680
see back slash windows backslash

122
00:04:47,680 --> 00:04:50,479
system32 backslash one

123
00:04:50,479 --> 00:04:53,120
dot tst

124
00:04:53,120 --> 00:04:56,479
so what's why the spark happens when

125
00:04:56,479 --> 00:04:58,880
user add printer drops to local printer

126
00:04:58,880 --> 00:04:59,680
queue

127
00:04:59,680 --> 00:05:01,680
spooler will save the information of the

128
00:05:01,680 --> 00:05:03,840
printer jobs to lock disk

129
00:05:03,840 --> 00:05:05,759
and those silver printer jobs are called

130
00:05:05,759 --> 00:05:07,120
shadow jobs

131
00:05:07,120 --> 00:05:10,000
usually user will start this printer job

132
00:05:10,000 --> 00:05:12,320
immediately and this puller will

133
00:05:12,320 --> 00:05:14,479
impersonate the user and

134
00:05:14,479 --> 00:05:17,120
write the printer job to printer port

135
00:05:17,120 --> 00:05:20,080
so even if media users have specified

136
00:05:20,080 --> 00:05:22,479
the printer port to a protected position

137
00:05:22,479 --> 00:05:23,600
such as

138
00:05:23,600 --> 00:05:26,960
c by slash windows slash system32 and

139
00:05:26,960 --> 00:05:29,759
slash one dot l

140
00:05:29,759 --> 00:05:31,680
median user can still cannot abuse

141
00:05:31,680 --> 00:05:34,400
spooler to output to output

142
00:05:34,400 --> 00:05:36,800
output output printer job to the

143
00:05:36,800 --> 00:05:38,800
protected position

144
00:05:38,800 --> 00:05:42,560
this is a normal printing process

145
00:05:42,560 --> 00:05:44,880
but something terrible would happen when

146
00:05:44,880 --> 00:05:49,440
people do not follow the normal process

147
00:05:49,680 --> 00:05:52,080
when user added add adder printer job to

148
00:05:52,080 --> 00:05:54,479
print the queue but he forgot to zoom

149
00:05:54,479 --> 00:05:56,400
the printer job and then restart his

150
00:05:56,400 --> 00:05:58,800
computer the shutter job in the printer

151
00:05:58,800 --> 00:06:00,720
queue won't be deleted

152
00:06:00,720 --> 00:06:02,800
if a user resumes this print this

153
00:06:02,800 --> 00:06:05,280
printer job support service cannot fund

154
00:06:05,280 --> 00:06:08,960
the credit user to killing personnel

155
00:06:08,960 --> 00:06:12,240
by imposing himself the system user

156
00:06:12,240 --> 00:06:14,880
and then output the printer job to user

157
00:06:14,880 --> 00:06:16,720
controllable printer port with system

158
00:06:16,720 --> 00:06:18,000
privilege

159
00:06:18,000 --> 00:06:20,639
this will cause an arbitrary file

160
00:06:20,639 --> 00:06:24,960
writing issue and a little lpe

161
00:06:24,960 --> 00:06:28,080
so how did microsoft fix this spark as

162
00:06:28,080 --> 00:06:30,400
we know to support this part you need to

163
00:06:30,400 --> 00:06:32,479
specify the printer port to the

164
00:06:32,479 --> 00:06:35,360
protected position because there is no

165
00:06:35,360 --> 00:06:37,360
check on the printer port you can

166
00:06:37,360 --> 00:06:40,000
specify the printer port to any position

167
00:06:40,000 --> 00:06:42,240
so microsoft adder function called port

168
00:06:42,240 --> 00:06:44,639
is valid to check if the user

169
00:06:44,639 --> 00:06:45,440
has

170
00:06:45,440 --> 00:06:48,000
right permission to the printer port

171
00:06:48,000 --> 00:06:49,919
what print what product is valid and

172
00:06:49,919 --> 00:06:52,960
that is to call create a file while

173
00:06:52,960 --> 00:06:55,840
impersonating the user to check if the

174
00:06:55,840 --> 00:06:58,960
printer port is user controllable

175
00:06:58,960 --> 00:07:01,440
if media users specify a protected

176
00:07:01,440 --> 00:07:04,240
position this function must return fail

177
00:07:04,240 --> 00:07:06,960
but if you are format for many of

178
00:07:06,960 --> 00:07:08,240
familiar with

179
00:07:08,240 --> 00:07:10,240
pass redirection attack in windows

180
00:07:10,240 --> 00:07:11,440
system

181
00:07:11,440 --> 00:07:13,280
you should realize this patch is an

182
00:07:13,280 --> 00:07:15,680
incomplete fix

183
00:07:15,680 --> 00:07:18,479
here we provide to you an approach to

184
00:07:18,479 --> 00:07:21,120
bypass the patch firstly let's focus on

185
00:07:21,120 --> 00:07:23,680
the case one of the case one our main

186
00:07:23,680 --> 00:07:26,400
idea is to use device symbol links here

187
00:07:26,400 --> 00:07:29,039
we can use file test to do it let's look

188
00:07:29,039 --> 00:07:31,840
at the picture what we need to do is to

189
00:07:31,840 --> 00:07:34,639
fill the links source and the target

190
00:07:34,639 --> 00:07:36,720
the source is the empty path of state

191
00:07:36,720 --> 00:07:39,840
driver and the target in the device path

192
00:07:39,840 --> 00:07:41,680
of d driver

193
00:07:41,680 --> 00:07:43,599
after clicking the button to create

194
00:07:43,599 --> 00:07:44,400
simulink

195
00:07:44,400 --> 00:07:47,280
our c driver will be redirect to d

196
00:07:47,280 --> 00:07:49,360
driver

197
00:07:49,360 --> 00:07:51,919
but it was nothing that this symbolic is

198
00:07:51,919 --> 00:07:54,639
only valid for the current user after

199
00:07:54,639 --> 00:07:57,680
creating the device symbolic

200
00:07:57,680 --> 00:07:59,680
for the server running with system

201
00:07:59,680 --> 00:08:02,400
privilege if the server impersonates the

202
00:08:02,400 --> 00:08:03,599
client

203
00:08:03,599 --> 00:08:07,039
c backslash windows backslash oneplus

204
00:08:07,039 --> 00:08:11,039
tft will be reduced redirected to

205
00:08:11,039 --> 00:08:14,560
d backslash windows bank slash one dose

206
00:08:14,560 --> 00:08:19,280
tst otherwise if server runs in system

207
00:08:19,280 --> 00:08:22,160
privilege and open this file the pass

208
00:08:22,160 --> 00:08:25,120
reduction won't occur

209
00:08:25,120 --> 00:08:27,759
so how to respond this spark first

210
00:08:27,759 --> 00:08:30,400
create a device simulink from

211
00:08:30,400 --> 00:08:33,440
c driver to d driver and then excuse the

212
00:08:33,440 --> 00:08:35,360
powershell command to create the printer

213
00:08:35,360 --> 00:08:38,799
ports in a protected protected location

214
00:08:38,799 --> 00:08:40,559
which will trigger the server

215
00:08:40,559 --> 00:08:42,479
impersonator client and then cross the

216
00:08:42,479 --> 00:08:44,480
positive body the function to check

217
00:08:44,480 --> 00:08:46,640
whether the port is body due to the

218
00:08:46,640 --> 00:08:48,399
device simulink

219
00:08:48,399 --> 00:08:51,440
the actual check pass will be directly

220
00:08:51,440 --> 00:08:53,920
directed to the backslash windows

221
00:08:53,920 --> 00:08:57,519
backslash system 32 backslash one dose

222
00:08:57,519 --> 00:09:01,279
tst and z pass is user controllable then

223
00:09:01,279 --> 00:09:04,320
the check is passed

224
00:09:05,040 --> 00:09:07,440
then let's talk about

225
00:09:07,440 --> 00:09:08,880
the other

226
00:09:08,880 --> 00:09:11,760
approach using junction we first excuse

227
00:09:11,760 --> 00:09:14,320
the portion command on the client side

228
00:09:14,320 --> 00:09:16,640
and specified a user controllable path

229
00:09:16,640 --> 00:09:17,760
as a port

230
00:09:17,760 --> 00:09:21,279
such as c backslash 1 backslash

231
00:09:21,279 --> 00:09:24,399
tst obviously this path can bypass the

232
00:09:24,399 --> 00:09:26,959
server process is a valid check after

233
00:09:26,959 --> 00:09:28,800
passing the check

234
00:09:28,800 --> 00:09:30,240
we create

235
00:09:30,240 --> 00:09:33,200
c and slash one link to

236
00:09:33,200 --> 00:09:35,519
c backslash windows

237
00:09:35,519 --> 00:09:37,600
slash system32

238
00:09:37,600 --> 00:09:40,160
then when using the port to audible to

239
00:09:40,160 --> 00:09:42,560
output multiple printed jobs

240
00:09:42,560 --> 00:09:46,000
the pass actually used will be redirect

241
00:09:46,000 --> 00:09:48,160
redirected to the

242
00:09:48,160 --> 00:09:51,519
save slash windows backslash system32

243
00:09:51,519 --> 00:09:54,560
this can still lead to arbitrary failed

244
00:09:54,560 --> 00:09:56,720
writing

245
00:09:56,720 --> 00:09:59,920
unfilled after we report reported this

246
00:09:59,920 --> 00:10:01,680
vulnerability to

247
00:10:01,680 --> 00:10:04,480
microsoft the reason they released a new

248
00:10:04,480 --> 00:10:07,040
patch but unfortunately the past deal

249
00:10:07,040 --> 00:10:08,880
cannot completely

250
00:10:08,880 --> 00:10:10,959
fix this vulnerability

251
00:10:10,959 --> 00:10:14,399
in the patch microsoft made two changes

252
00:10:14,399 --> 00:10:17,040
the first is either a check for passive

253
00:10:17,040 --> 00:10:19,839
direction attack when checking the port

254
00:10:19,839 --> 00:10:22,320
the key point is the pos

255
00:10:22,320 --> 00:10:25,040
is a link function this function is

256
00:10:25,040 --> 00:10:27,760
added to the positive valid function and

257
00:10:27,760 --> 00:10:30,480
it takes the fair handle returned by

258
00:10:30,480 --> 00:10:33,600
create file and the source path

259
00:10:33,600 --> 00:10:35,680
as the parameter

260
00:10:35,680 --> 00:10:37,600
in this function the file path

261
00:10:37,600 --> 00:10:40,240
corresponding to the handle is

262
00:10:40,240 --> 00:10:42,640
obtained through the git final pass name

263
00:10:42,640 --> 00:10:44,240
handle

264
00:10:44,240 --> 00:10:47,120
and the source pass

265
00:10:47,120 --> 00:10:48,399
and the

266
00:10:48,399 --> 00:10:51,040
actual fail pass can be compiled to

267
00:10:51,040 --> 00:10:52,079
check

268
00:10:52,079 --> 00:10:53,440
whether a

269
00:10:53,440 --> 00:10:57,120
pass reduction attack has occurred

270
00:10:57,120 --> 00:10:59,360
and the other change is adding a passive

271
00:10:59,360 --> 00:11:01,360
reduction check when using the printer

272
00:11:01,360 --> 00:11:04,959
port the newly added function is still

273
00:11:04,959 --> 00:11:07,120
is porter link differently this function

274
00:11:07,120 --> 00:11:08,880
is added into

275
00:11:08,880 --> 00:11:10,480
lcm start

276
00:11:10,480 --> 00:11:12,800
dlc port to check whether the printer

277
00:11:12,800 --> 00:11:15,839
post is valid

278
00:11:15,839 --> 00:11:19,360
unfortunately well the patch fix

279
00:11:19,360 --> 00:11:23,440
fits fixed the cv 2020

280
00:11:23,440 --> 00:11:26,640
or 1337

281
00:11:26,640 --> 00:11:28,959
it brings the new bug we found the

282
00:11:28,959 --> 00:11:31,360
arbitrary file deletion back the problem

283
00:11:31,360 --> 00:11:33,120
occurs in lcm

284
00:11:33,120 --> 00:11:35,120
dlc port

285
00:11:35,120 --> 00:11:37,519
after the is puzzling function is

286
00:11:37,519 --> 00:11:39,680
execute executed

287
00:11:39,680 --> 00:11:41,680
if the printer port is checked to be

288
00:11:41,680 --> 00:11:44,079
illegal so this this file function will

289
00:11:44,079 --> 00:11:46,560
be called to try to delete the printer

290
00:11:46,560 --> 00:11:49,120
port due to the passive redirection the

291
00:11:49,120 --> 00:11:52,240
finally deletion deleted file is the

292
00:11:52,240 --> 00:11:54,800
junction target see

293
00:11:54,800 --> 00:11:57,279
slash windows backslash system32

294
00:11:57,279 --> 00:12:01,519
backslash one dot txt

295
00:12:01,600 --> 00:12:02,560
we notice

296
00:12:02,560 --> 00:12:04,959
we noticed that james first shell

297
00:12:04,959 --> 00:12:07,120
provides another trick to bypass the

298
00:12:07,120 --> 00:12:08,639
check of of

299
00:12:08,639 --> 00:12:10,480
his puzzle possibling function and

300
00:12:10,480 --> 00:12:13,600
finally is point printer daemon again

301
00:12:13,600 --> 00:12:15,279
let's have a look let's look at the

302
00:12:15,279 --> 00:12:18,000
implementation of its puzzle link again

303
00:12:18,000 --> 00:12:19,760
the call of the function is get final

304
00:12:19,760 --> 00:12:22,639
pass name by handle which receives file

305
00:12:22,639 --> 00:12:24,880
handle as a parameter and retest the

306
00:12:24,880 --> 00:12:27,760
path of the fair handle in the past year

307
00:12:27,760 --> 00:12:28,959
attacks

308
00:12:28,959 --> 00:12:31,760
using symbol links are very common and

309
00:12:31,760 --> 00:12:34,000
microsoft has widely used

310
00:12:34,000 --> 00:12:37,040
get final personal handle to mitigate

311
00:12:37,040 --> 00:12:40,560
symbolic attackers

312
00:12:41,120 --> 00:12:43,760
so what's the behavior of get final

313
00:12:43,760 --> 00:12:45,519
possible handle

314
00:12:45,519 --> 00:12:48,000
in different situations first sibling

315
00:12:48,000 --> 00:12:53,040
from c band slash one by slash one dose

316
00:12:54,480 --> 00:12:56,639
system 32 backslash

317
00:12:56,639 --> 00:13:00,160
one dot tnt we use create a file to get

318
00:13:00,160 --> 00:13:04,560
the file handle of the source path

319
00:13:04,959 --> 00:13:09,120
c by slash one backslash one dot t and

320
00:13:09,120 --> 00:13:11,600
then use the handle and the parameter or

321
00:13:11,600 --> 00:13:13,440
forget the final possibility by handle

322
00:13:13,440 --> 00:13:15,760
to get the real fair pass we can follow

323
00:13:15,760 --> 00:13:16,639
the

324
00:13:16,639 --> 00:13:18,800
initial path must be different with the

325
00:13:18,800 --> 00:13:22,160
final pass but for the hard link

326
00:13:22,160 --> 00:13:24,399
the two mark to the two parts must be

327
00:13:24,399 --> 00:13:27,519
the same obviously how link can be used

328
00:13:27,519 --> 00:13:29,760
used to bypass get phenomenal personally

329
00:13:29,760 --> 00:13:32,720
by handle but unfortunately ma

330
00:13:32,720 --> 00:13:35,760
microsoft has released a mitigation for

331
00:13:35,760 --> 00:13:38,720
hiring almost two years ago you must

332
00:13:38,720 --> 00:13:41,120
have write permission for your hiring

333
00:13:41,120 --> 00:13:43,519
target

334
00:13:43,519 --> 00:13:46,160
then let's look at the handling of the

335
00:13:46,160 --> 00:13:49,920
unc pass when we talk about the unc pass

336
00:13:49,920 --> 00:13:52,399
we have to measure

337
00:13:52,399 --> 00:13:54,480
the administrative sales

338
00:13:54,480 --> 00:13:56,639
in windows 10 there are three default

339
00:13:56,639 --> 00:13:58,639
shares c dollar

340
00:13:58,639 --> 00:14:01,440
ipc dollar or the mean dollar

341
00:14:01,440 --> 00:14:03,760
they represent special resource on

342
00:14:03,760 --> 00:14:06,240
windows system usually usually you

343
00:14:06,240 --> 00:14:09,040
usually used in remote access

344
00:14:09,040 --> 00:14:12,079
whereas the dollar represents c

345
00:14:12,079 --> 00:14:13,440
driver

346
00:14:13,440 --> 00:14:16,639
ipc dollar is used in nato pipe other

347
00:14:16,639 --> 00:14:18,480
mean

348
00:14:18,480 --> 00:14:23,199
dollar represents system rules directory

349
00:14:23,199 --> 00:14:25,600
let's again consider the case of

350
00:14:25,600 --> 00:14:28,720
simulink from c backslash

351
00:14:28,720 --> 00:14:32,880
test backslash one dot tst to c

352
00:14:32,880 --> 00:14:36,000
backslash windows slash system 32

353
00:14:36,000 --> 00:14:39,680
backslash 1.10 this time we use the unc

354
00:14:39,680 --> 00:14:40,880
pass

355
00:14:40,880 --> 00:14:44,560
unc backslash localhost backslash c

356
00:14:44,560 --> 00:14:48,240
dollar backslash test one both tft and

357
00:14:48,240 --> 00:14:50,720
the input as the input parameter of

358
00:14:50,720 --> 00:14:52,639
cruise file

359
00:14:52,639 --> 00:14:56,079
unc backslash localhost backslash c

360
00:14:56,079 --> 00:14:59,199
dollar slash

361
00:14:59,440 --> 00:15:01,279
tst is a unc

362
00:15:01,279 --> 00:15:02,639
represent

363
00:15:02,639 --> 00:15:05,519
representative for representation of the

364
00:15:05,519 --> 00:15:06,880
plus

365
00:15:06,880 --> 00:15:12,160
c backslash test backslash 1.10

366
00:15:12,160 --> 00:15:14,639
when then we when we use the retainer

367
00:15:14,639 --> 00:15:16,480
file handle as the parameter of get

368
00:15:16,480 --> 00:15:18,959
final plus neighbor handle we will also

369
00:15:18,959 --> 00:15:21,120
be surprised to find that the retainer

370
00:15:21,120 --> 00:15:24,160
pass is consistent with the

371
00:15:24,160 --> 00:15:26,399
simulink source but different from the

372
00:15:26,399 --> 00:15:29,519
simulink target which means with the unc

373
00:15:29,519 --> 00:15:31,519
path we can easily bypass again final

374
00:15:31,519 --> 00:15:34,000
pass name and handle the print demon can

375
00:15:34,000 --> 00:15:37,120
be supported again

376
00:15:37,759 --> 00:15:39,920
at the end of the story microsoft

377
00:15:39,920 --> 00:15:42,959
finally decided to fix the root cause of

378
00:15:42,959 --> 00:15:44,720
the vulnerability by adding the function

379
00:15:44,720 --> 00:15:46,959
is polar impersonating to check various

380
00:15:46,959 --> 00:15:50,720
polar is is impersonating itself there

381
00:15:50,720 --> 00:15:54,079
by mitigating the vulnerability

382
00:15:54,079 --> 00:15:55,920
next we will introduce another

383
00:15:55,920 --> 00:15:57,199
vulnerability

384
00:15:57,199 --> 00:15:59,360
another vulnerability we found in polar

385
00:15:59,360 --> 00:16:01,920
service this vulnerability is easier to

386
00:16:01,920 --> 00:16:04,959
use to respond than print dna and do not

387
00:16:04,959 --> 00:16:06,959
require restarting the scroller or

388
00:16:06,959 --> 00:16:09,440
computer because it's vulnerability evil

389
00:16:09,440 --> 00:16:11,040
copy file event

390
00:16:11,040 --> 00:16:13,040
the vulnerability occurs in the process

391
00:16:13,040 --> 00:16:16,160
of configuring printers normal user can

392
00:16:16,160 --> 00:16:18,560
create a printer of their own so the

393
00:16:18,560 --> 00:16:20,720
partial command and the printer by

394
00:16:20,720 --> 00:16:22,560
checking the security

395
00:16:22,560 --> 00:16:25,040
attributes of the printer we created we

396
00:16:25,040 --> 00:16:27,279
can find that we have or the mini

397
00:16:27,279 --> 00:16:30,800
strategy privilege for the

398
00:16:30,800 --> 00:16:33,440
printer which means we can configure our

399
00:16:33,440 --> 00:16:35,199
printer

400
00:16:35,199 --> 00:16:37,279
to configure our printer you can use the

401
00:16:37,279 --> 00:16:40,240
printer api seed printer data x which is

402
00:16:40,240 --> 00:16:42,720
exposed by microsoft

403
00:16:42,720 --> 00:16:45,440
the implementation of this api can be

404
00:16:45,440 --> 00:16:48,480
found as a local spl.

405
00:16:48,480 --> 00:16:52,480
spl set printer data x

406
00:16:53,040 --> 00:16:54,079
through

407
00:16:54,079 --> 00:16:56,880
zero sets printer data x you can set the

408
00:16:56,880 --> 00:16:59,360
attributes of your printer for different

409
00:16:59,360 --> 00:17:00,959
attributes the smaller has a

410
00:17:00,959 --> 00:17:02,800
corresponding handler to handle the

411
00:17:02,800 --> 00:17:04,959
attributes content

412
00:17:04,959 --> 00:17:06,799
those handles will take the user

413
00:17:06,799 --> 00:17:09,439
controllable content and parameter which

414
00:17:09,439 --> 00:17:11,439
means this handler provides the test

415
00:17:11,439 --> 00:17:14,959
service for us to hunt for bugs

416
00:17:14,959 --> 00:17:17,039
after some reverse engineering work we

417
00:17:17,039 --> 00:17:19,679
found an interesting handler called

418
00:17:19,679 --> 00:17:22,000
spl copy file event

419
00:17:22,000 --> 00:17:23,679
by observing the implementation of the

420
00:17:23,679 --> 00:17:25,599
function we found that there is a

421
00:17:25,599 --> 00:17:26,799
function called

422
00:17:26,799 --> 00:17:30,000
spl load library the copy file model

423
00:17:30,000 --> 00:17:31,840
this function take a user controllable

424
00:17:31,840 --> 00:17:34,480
string and parameter and it looks like

425
00:17:34,480 --> 00:17:36,080
we will load the library and then call

426
00:17:36,080 --> 00:17:38,880
the exposure function support copy file

427
00:17:38,880 --> 00:17:41,120
event

428
00:17:41,120 --> 00:17:42,880
let's take a look at the implementation

429
00:17:42,880 --> 00:17:46,320
of spl load library the copy file model

430
00:17:46,320 --> 00:17:47,360
the core

431
00:17:47,360 --> 00:17:49,840
pseudocode can be shown as below

432
00:17:49,840 --> 00:17:51,760
this function will firstly

433
00:17:51,760 --> 00:17:53,200
call maker

434
00:17:53,200 --> 00:17:54,480
connect

435
00:17:54,480 --> 00:17:56,880
connect nicole pass to normalize your

436
00:17:56,880 --> 00:17:59,200
file path stream by calling the friend

437
00:17:59,200 --> 00:18:01,440
personally by handle and then it will

438
00:18:01,440 --> 00:18:04,400
call is model file path loaded with your

439
00:18:04,400 --> 00:18:06,799
pass and parameter if this function

440
00:18:06,799 --> 00:18:08,640
returns true it will load the library

441
00:18:08,640 --> 00:18:11,200
from the password specified so if we can

442
00:18:11,200 --> 00:18:13,600
bypass the check of reason model file

443
00:18:13,600 --> 00:18:16,320
pass loaded we cannot upload arbitrary

444
00:18:16,320 --> 00:18:19,918
library with system privilege

445
00:18:20,240 --> 00:18:22,799
after the risk engineering of his model

446
00:18:22,799 --> 00:18:25,280
file path loading i made a summary of

447
00:18:25,280 --> 00:18:27,919
the path loaded by the function and

448
00:18:27,919 --> 00:18:31,039
divided them into two into two types the

449
00:18:31,039 --> 00:18:33,679
case one sd file path is under the c

450
00:18:33,679 --> 00:18:36,320
backslash windows backslash c732

451
00:18:36,320 --> 00:18:39,520
backslash support backslash drivers

452
00:18:39,520 --> 00:18:41,840
which means sd file path can be in the

453
00:18:41,840 --> 00:18:44,400
root directory of this path

454
00:18:44,400 --> 00:18:47,200
or in the subdirectory of the

455
00:18:47,200 --> 00:18:49,520
of this directory

456
00:18:49,520 --> 00:18:52,559
and for the case 2 sd file path is under

457
00:18:52,559 --> 00:18:54,799
the root directory of c

458
00:18:54,799 --> 00:18:57,760
backslash windows bank slash system32

459
00:18:57,760 --> 00:18:59,840
which means as the file pass can be in

460
00:18:59,840 --> 00:19:02,400
the root directory of c backslash

461
00:19:02,400 --> 00:19:06,000
windows c slash system 32 directory but

462
00:19:06,000 --> 00:19:09,360
not in the subdirectories of the

463
00:19:09,360 --> 00:19:12,160
c backslash windows backslash system32

464
00:19:12,160 --> 00:19:14,000
directory

465
00:19:14,000 --> 00:19:16,559
so how after figuring out the legal file

466
00:19:16,559 --> 00:19:19,039
path for its model fair pass unloading

467
00:19:19,039 --> 00:19:21,200
let's talk about the exploitation for

468
00:19:21,200 --> 00:19:25,280
the case one both c bar windows system32

469
00:19:25,280 --> 00:19:27,280
supporter driver

470
00:19:27,280 --> 00:19:29,520
of support backslash driver and its

471
00:19:29,520 --> 00:19:31,120
subdirectory

472
00:19:31,120 --> 00:19:32,799
they are

473
00:19:32,799 --> 00:19:35,039
they are not medial user writable

474
00:19:35,039 --> 00:19:38,080
relatable so we cannot put our dell into

475
00:19:38,080 --> 00:19:39,840
this directory and the first product to

476
00:19:39,840 --> 00:19:40,799
load it

477
00:19:40,799 --> 00:19:42,799
the case 2 will now pass but under the

478
00:19:42,799 --> 00:19:45,600
root directory of c band slash windows

479
00:19:45,600 --> 00:19:48,000
president season 32 and this directory

480
00:19:48,000 --> 00:19:49,120
must be

481
00:19:49,120 --> 00:19:52,240
unrelatable by median user we know that

482
00:19:52,240 --> 00:19:54,960
c backslash windows backslash

483
00:19:54,960 --> 00:19:58,480
season 32 backslash task are writtable

484
00:19:58,480 --> 00:20:00,880
by median user but is illegal here

485
00:20:00,880 --> 00:20:03,039
judging from the existing condition we

486
00:20:03,039 --> 00:20:04,159
seem

487
00:20:04,159 --> 00:20:07,039
to be unable to exploit this

488
00:20:07,039 --> 00:20:09,360
vulnerability but we must focus

489
00:20:09,360 --> 00:20:11,600
something

490
00:20:11,600 --> 00:20:15,039
windows use ntfs as a default default

491
00:20:15,039 --> 00:20:17,520
file system and the ntfs supports a

492
00:20:17,520 --> 00:20:20,559
special feature called ntfs auto

493
00:20:20,559 --> 00:20:23,919
alternate data stream also called nads

494
00:20:23,919 --> 00:20:26,880
ads is a file attribute only found in

495
00:20:26,880 --> 00:20:28,880
ntfs file system

496
00:20:28,880 --> 00:20:32,840
adfs allows user to create substring for

497
00:20:32,840 --> 00:20:37,919
file or directory by using separator

498
00:20:37,919 --> 00:20:39,039
colon

499
00:20:39,039 --> 00:20:41,520
because the data server in the file or

500
00:20:41,520 --> 00:20:44,880
directory ads cannot be read directly by

501
00:20:44,880 --> 00:20:48,400
user so it's rather use abuse abuse to

502
00:20:48,400 --> 00:20:51,360
write hiding data from malware

503
00:20:51,360 --> 00:20:52,400
files

504
00:20:52,400 --> 00:20:53,600
or in

505
00:20:53,600 --> 00:20:56,320
an example can be shown as below

506
00:20:56,320 --> 00:20:59,360
for the file c backslash one backslash

507
00:20:59,360 --> 00:21:00,840
aaa

508
00:21:00,840 --> 00:21:05,120
clone bbb aaa is a file or the directory

509
00:21:05,120 --> 00:21:05,919
name

510
00:21:05,919 --> 00:21:10,240
bbb is an ads on aaa

511
00:21:10,880 --> 00:21:12,960
back to the vulnerability

512
00:21:12,960 --> 00:21:15,679
we are currently discussing because c

513
00:21:15,679 --> 00:21:18,080
slash windows backslash

514
00:21:18,080 --> 00:21:21,840
system32 psls task is writable by medium

515
00:21:21,840 --> 00:21:25,600
user so we can also add ada ads to this

516
00:21:25,600 --> 00:21:28,000
directory such as

517
00:21:28,000 --> 00:21:31,200
see backslash windows slash system 32

518
00:21:31,200 --> 00:21:34,559
backslash task

519
00:21:34,960 --> 00:21:36,240
colon

520
00:21:36,240 --> 00:21:39,679
esp dot dell and this file plus must

521
00:21:39,679 --> 00:21:42,240
meet the condition of case 1

522
00:21:42,240 --> 00:21:43,120
so

523
00:21:43,120 --> 00:21:45,280
we can force puller to load arbitrary

524
00:21:45,280 --> 00:21:49,280
down with the special file path

525
00:21:49,280 --> 00:21:52,080
exploiting this part is very simple we

526
00:21:52,080 --> 00:21:54,880
only need to call set printer data x

527
00:21:54,880 --> 00:21:57,679
twice with the evo coffee attributes and

528
00:21:57,679 --> 00:21:59,840
put all their parts into it

529
00:21:59,840 --> 00:22:02,240
observing the process monitor log file

530
00:22:02,240 --> 00:22:04,720
we can see that odell our dev was

531
00:22:04,720 --> 00:22:06,320
successfully loaded

532
00:22:06,320 --> 00:22:09,200
that part is rc box we found in spool

533
00:22:09,200 --> 00:22:12,080
let's hand over to luis

534
00:22:12,080 --> 00:22:14,000
okay thank you stephanie for your

535
00:22:14,000 --> 00:22:16,480
speaking this is luis i'm going to talk

536
00:22:16,480 --> 00:22:20,000
about the rce vulnerabilities reflect

537
00:22:20,000 --> 00:22:23,360
besides logic box shifung just talked we

538
00:22:23,360 --> 00:22:26,240
also found three memory corruption box

539
00:22:26,240 --> 00:22:30,400
here i will focus on the cve 221 2408 of

540
00:22:30,400 --> 00:22:32,720
spooler the other two vulnerabilities in

541
00:22:32,720 --> 00:22:34,960
facts are similar

542
00:22:34,960 --> 00:22:38,000
spooler provides api enum jobs to

543
00:22:38,000 --> 00:22:40,960
retrieve print jobs stored in a specific

544
00:22:40,960 --> 00:22:42,320
printer

545
00:22:42,320 --> 00:22:44,880
it will copy a set of jobs into a user

546
00:22:44,880 --> 00:22:47,840
supply buffer the buffer and its size is

547
00:22:47,840 --> 00:22:50,480
specified by the parameter p drop and cb

548
00:22:50,480 --> 00:22:51,280
buff

549
00:22:51,280 --> 00:22:53,600
the root cause of this vulnerability is

550
00:22:53,600 --> 00:22:56,720
in the function enum jobs in local queue

551
00:22:56,720 --> 00:22:58,880
before copying the job into the date

552
00:22:58,880 --> 00:23:01,360
into the buffer smoother will check if

553
00:23:01,360 --> 00:23:04,400
total job size is smaller than the user

554
00:23:04,400 --> 00:23:06,880
supply buffer size and when counting the

555
00:23:06,880 --> 00:23:08,799
total job size the function uses a

556
00:23:08,799 --> 00:23:11,760
dewalt variable without overflow check

557
00:23:11,760 --> 00:23:14,799
which leads to an integer overflow

558
00:23:14,799 --> 00:23:17,679
dance puller will copy the jobs into the

559
00:23:17,679 --> 00:23:19,840
user supply buffer p job

560
00:23:19,840 --> 00:23:22,080
the job structure member can be simply

561
00:23:22,080 --> 00:23:24,640
divided into two types data and string

562
00:23:24,640 --> 00:23:26,080
pointers

563
00:23:26,080 --> 00:23:28,640
since it is an rpc call the function

564
00:23:28,640 --> 00:23:31,280
needs to copy not only the job structure

565
00:23:31,280 --> 00:23:33,520
but also the string pointed by the

566
00:23:33,520 --> 00:23:34,960
string pointer

567
00:23:34,960 --> 00:23:36,880
into the buffer

568
00:23:36,880 --> 00:23:38,559
there are two pointers

569
00:23:38,559 --> 00:23:41,039
stop and end which points to the start

570
00:23:41,039 --> 00:23:42,799
and end of the buffer

571
00:23:42,799 --> 00:23:45,600
then scooter will copy jump structure to

572
00:23:45,600 --> 00:23:47,440
the start of the buffer

573
00:23:47,440 --> 00:23:49,919
when you encounter a string it will copy

574
00:23:49,919 --> 00:23:52,159
the string data into the end of the

575
00:23:52,159 --> 00:23:54,720
buffer and make string pointer pointer

576
00:23:54,720 --> 00:23:57,039
while copying the drops

577
00:23:57,039 --> 00:23:59,279
the start pointer will increase and the

578
00:23:59,279 --> 00:24:01,840
end pointer will decrease

579
00:24:01,840 --> 00:24:04,880
when finish the copy the

580
00:24:04,880 --> 00:24:06,880
function will mushroom the buffer and

581
00:24:06,880 --> 00:24:08,960
send it back to the client

582
00:24:08,960 --> 00:24:11,760
but here because of the integer overflow

583
00:24:11,760 --> 00:24:14,320
the strings will underflow and override

584
00:24:14,320 --> 00:24:17,200
the job data pointers and even memories

585
00:24:17,200 --> 00:24:20,000
above the date the buffer

586
00:24:20,000 --> 00:24:23,200
meanwhile when we create a job structure

587
00:24:23,200 --> 00:24:25,600
there's a job member doc name we can

588
00:24:25,600 --> 00:24:26,880
control

589
00:24:26,880 --> 00:24:28,960
so the job size and

590
00:24:28,960 --> 00:24:32,000
the content is under our control but

591
00:24:32,000 --> 00:24:33,840
here's a problem

592
00:24:33,840 --> 00:24:37,279
as we need to overflow a dwarf arrival

593
00:24:37,279 --> 00:24:38,720
so the total

594
00:24:38,720 --> 00:24:41,120
size of the job will be larger than 4

595
00:24:41,120 --> 00:24:43,360
gigabytes normally it will trigger a

596
00:24:43,360 --> 00:24:44,960
crash

597
00:24:44,960 --> 00:24:47,919
but thanks to the overvolt check in the

598
00:24:47,919 --> 00:24:49,600
pack strings function

599
00:24:49,600 --> 00:24:51,679
if the start pointer surpasses the end

600
00:24:51,679 --> 00:24:54,240
pointer the pack strings function will

601
00:24:54,240 --> 00:24:59,200
return 0 and set the end pointer to none

602
00:24:59,200 --> 00:25:02,240
this will prevent the spooler to copy

603
00:25:02,240 --> 00:25:03,919
the remaining jobs

604
00:25:03,919 --> 00:25:06,640
so we can abuse this to control the size

605
00:25:06,640 --> 00:25:09,279
up and content of an underflow in the

606
00:25:09,279 --> 00:25:11,600
heap

607
00:25:11,679 --> 00:25:14,640
so we have a hip overflow underflow

608
00:25:14,640 --> 00:25:17,919
with controlled size and control content

609
00:25:17,919 --> 00:25:20,960
i'm sure it is not hard to fully exploit

610
00:25:20,960 --> 00:25:23,520
this vulnerability if we have a stable

611
00:25:23,520 --> 00:25:25,120
involved

612
00:25:25,120 --> 00:25:28,240
here we are now going to further discuss

613
00:25:28,240 --> 00:25:30,000
the exploit and

614
00:25:30,000 --> 00:25:31,600
the other similar

615
00:25:31,600 --> 00:25:35,440
to vulnerabilities in facts

616
00:25:35,440 --> 00:25:37,679
and then we will talk about the print

617
00:25:37,679 --> 00:25:40,320
nightmare

618
00:25:40,799 --> 00:25:42,720
prince nightmare is a very hot

619
00:25:42,720 --> 00:25:44,720
vulnerability recently

620
00:25:44,720 --> 00:25:46,799
but there is no patch for you when we're

621
00:25:46,799 --> 00:25:49,279
recording this video so we will not dive

622
00:25:49,279 --> 00:25:52,000
into the technical details here but we

623
00:25:52,000 --> 00:25:53,919
can talk about the story

624
00:25:53,919 --> 00:25:55,919
we found prince nightmare earlier this

625
00:25:55,919 --> 00:25:57,840
year and want to save it for future

626
00:25:57,840 --> 00:26:00,720
security contest but in june microsoft

627
00:26:00,720 --> 00:26:05,400
released a patch for spooler cbe211675

628
00:26:05,600 --> 00:26:08,080
which was classified as being only lp by

629
00:26:08,080 --> 00:26:11,440
microsoft however it's been changed into

630
00:26:11,440 --> 00:26:14,559
rc on 21st june after analysis and

631
00:26:14,559 --> 00:26:17,039
testing we believe that print nightmare

632
00:26:17,039 --> 00:26:20,960
was fixed by the patch for cbe211675

633
00:26:20,960 --> 00:26:23,720
one of the credit reporter of cve

634
00:26:23,720 --> 00:26:26,559
cve121675 notified us that he's right up

635
00:26:26,559 --> 00:26:28,960
about this vulnerability and is

636
00:26:28,960 --> 00:26:31,360
different with print nightmare

637
00:26:31,360 --> 00:26:34,240
since peter madory and jeep hall report

638
00:26:34,240 --> 00:26:35,919
an lp

639
00:26:35,919 --> 00:26:36,960
and

640
00:26:36,960 --> 00:26:39,600
hai zhang report and rc

641
00:26:39,600 --> 00:26:42,320
but microsoft merged them all in cve 12

642
00:26:42,320 --> 00:26:44,159
1 1 6 7 5.

643
00:26:44,159 --> 00:26:47,760
this creates a misunderstanding as it

644
00:26:47,760 --> 00:26:49,919
actually affects print nightmare only in

645
00:26:49,919 --> 00:26:52,720
some version of windows but not all of

646
00:26:52,720 --> 00:26:55,919
them including the latest windows dc

647
00:26:55,919 --> 00:26:58,640
unfortunately we did not fully test our

648
00:26:58,640 --> 00:27:00,880
plc against some environments before

649
00:27:00,880 --> 00:27:02,400
publishing it

650
00:27:02,400 --> 00:27:04,320
after that microsoft assigned cve 121

651
00:27:04,320 --> 00:27:07,320
cv12134527

652
00:27:07,360 --> 00:27:10,559
for prince nightmare

653
00:27:10,799 --> 00:27:13,600
it was never our intention to disclosure

654
00:27:13,600 --> 00:27:16,400
a zero-day vulnerability vulnerability

655
00:27:16,400 --> 00:27:19,520
we should have done more to verify that

656
00:27:19,520 --> 00:27:22,720
the patch completely mitigated the

657
00:27:22,720 --> 00:27:24,399
vulnerability

658
00:27:24,399 --> 00:27:26,559
we are extremely sorry

659
00:27:26,559 --> 00:27:29,279
we recommend that users should disable

660
00:27:29,279 --> 00:27:31,440
print spooler service in your domain

661
00:27:31,440 --> 00:27:32,559
controller

662
00:27:32,559 --> 00:27:35,919
until a new patch is released to prevent

663
00:27:35,919 --> 00:27:39,120
print nightmare from being exploited

664
00:27:39,120 --> 00:27:40,320
again

665
00:27:40,320 --> 00:27:43,039
we are truly sorry for our error and any

666
00:27:43,039 --> 00:27:46,640
impact it may have caused

667
00:27:46,799 --> 00:27:48,960
in this talk we introduced several

668
00:27:48,960 --> 00:27:51,760
vulnerabilities in spooler both logic

669
00:27:51,760 --> 00:27:54,080
and memory corruption bugs it turned out

670
00:27:54,080 --> 00:27:56,240
that spooler is a really dangerous

671
00:27:56,240 --> 00:27:58,799
surface aldo's blood has been through

672
00:27:58,799 --> 00:28:01,600
years of vulnerabilities disclosure it's

673
00:28:01,600 --> 00:28:04,640
still a good attack surface

674
00:28:04,640 --> 00:28:07,039
disable your spooler if you don't need

675
00:28:07,039 --> 00:28:09,120
it

676
00:28:09,440 --> 00:28:11,200
thanks for your listening this is our

677
00:28:11,200 --> 00:28:15,919
talk and then is the qa section

