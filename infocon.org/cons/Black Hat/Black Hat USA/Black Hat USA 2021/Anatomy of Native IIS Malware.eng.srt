1
00:00:01,130 --> 00:00:13,840
[Music]

2
00:00:13,840 --> 00:00:15,839
hello everyone and thank you for joining

3
00:00:15,839 --> 00:00:17,520
me for this session

4
00:00:17,520 --> 00:00:19,680
my name is suzanna and i work for eset

5
00:00:19,680 --> 00:00:22,800
as a malware researcher and today i will

6
00:00:22,800 --> 00:00:25,439
guide you through the topic of anatomy

7
00:00:25,439 --> 00:00:28,560
of native iis malware

8
00:00:28,560 --> 00:00:31,599
for those not familiar iis here stands

9
00:00:31,599 --> 00:00:34,239
for internet information services which

10
00:00:34,239 --> 00:00:36,800
is microsoft web server software

11
00:00:36,800 --> 00:00:38,800
and this software has a modular

12
00:00:38,800 --> 00:00:41,600
architecture so the developers can

13
00:00:41,600 --> 00:00:44,480
create and add modules to extend the

14
00:00:44,480 --> 00:00:47,120
functionality of this software

15
00:00:47,120 --> 00:00:48,879
but we are going to look at the case

16
00:00:48,879 --> 00:00:51,600
where malicious thread actors misuse

17
00:00:51,600 --> 00:00:54,719
this same extensibility so we will cover

18
00:00:54,719 --> 00:00:58,160
the topic of malicious iis modules and

19
00:00:58,160 --> 00:01:01,199
how we can dissect them

20
00:01:01,199 --> 00:01:03,600
by the way the word native hearing the

21
00:01:03,600 --> 00:01:07,040
title refers to native iis modules which

22
00:01:07,040 --> 00:01:10,000
is one of the types supported by the iis

23
00:01:10,000 --> 00:01:12,400
software but we will get to those

24
00:01:12,400 --> 00:01:15,360
specifics later so let's start with some

25
00:01:15,360 --> 00:01:18,880
broader context and explain why this is

26
00:01:18,880 --> 00:01:22,080
a relevant topic worth studying

27
00:01:22,080 --> 00:01:24,640
so some facts first and the first time

28
00:01:24,640 --> 00:01:26,560
you probably already know

29
00:01:26,560 --> 00:01:30,000
that iis is not the most popular web

30
00:01:30,000 --> 00:01:32,640
server software out there

31
00:01:32,640 --> 00:01:34,880
it's estimated that four to seven

32
00:01:34,880 --> 00:01:38,079
percent of websites use this software

33
00:01:38,079 --> 00:01:39,920
and these numbers are based on the

34
00:01:39,920 --> 00:01:42,960
recent netcraft web survey and also the

35
00:01:42,960 --> 00:01:46,399
recent w3 text survey

36
00:01:46,399 --> 00:01:49,200
but even though iis is not the most

37
00:01:49,200 --> 00:01:51,920
widely used web server software you can

38
00:01:51,920 --> 00:01:54,159
still find it running at interesting

39
00:01:54,159 --> 00:01:55,600
places

40
00:01:55,600 --> 00:01:58,479
remember this is microsoft software so

41
00:01:58,479 --> 00:02:00,880
running in microsoft servers

42
00:02:00,880 --> 00:02:03,920
such as microsoft exchange servers with

43
00:02:03,920 --> 00:02:06,320
owa enabled

44
00:02:06,320 --> 00:02:10,160
so this owa is running on iis

45
00:02:10,160 --> 00:02:14,080
and that makes is malware a particularly

46
00:02:14,080 --> 00:02:16,959
interesting tool when you want to spy on

47
00:02:16,959 --> 00:02:18,959
these servers

48
00:02:18,959 --> 00:02:22,400
and we know that owa service is pretty

49
00:02:22,400 --> 00:02:25,200
common especially these days where a lot

50
00:02:25,200 --> 00:02:27,440
of people are working from home so they

51
00:02:27,440 --> 00:02:31,280
need to access their email via the web

52
00:02:31,280 --> 00:02:33,920
but just to get the idea we ran a

53
00:02:33,920 --> 00:02:36,640
showdown query to find out or to

54
00:02:36,640 --> 00:02:39,280
estimate the number of such public

55
00:02:39,280 --> 00:02:43,120
facing exchange servers with owa running

56
00:02:43,120 --> 00:02:45,360
and the number is in the hundreds of

57
00:02:45,360 --> 00:02:48,239
thousands so plenty of opportunities to

58
00:02:48,239 --> 00:02:51,120
deploy is malware

59
00:02:51,120 --> 00:02:53,519
and one real world example this is

60
00:02:53,519 --> 00:02:55,840
exactly what the tridectors have been

61
00:02:55,840 --> 00:02:58,879
doing so uh this year after the

62
00:02:58,879 --> 00:03:00,959
disclosure of the proxy logon

63
00:03:00,959 --> 00:03:03,200
vulnerability chain at least five

64
00:03:03,200 --> 00:03:05,280
distinct trade actors used this

65
00:03:05,280 --> 00:03:09,360
vulnerability to deploy iis backdoors

66
00:03:09,360 --> 00:03:11,840
and a lot of organizations were affected

67
00:03:11,840 --> 00:03:14,640
uh among them government organizations

68
00:03:14,640 --> 00:03:17,519
in free southeast asian countries but

69
00:03:17,519 --> 00:03:18,480
also

70
00:03:18,480 --> 00:03:21,280
dozens of private companies in a wide

71
00:03:21,280 --> 00:03:24,720
range of industries in the us in canada

72
00:03:24,720 --> 00:03:27,280
and in other countries

73
00:03:27,280 --> 00:03:29,519
and this prox slogan case is just one

74
00:03:29,519 --> 00:03:32,400
example but it's good to illustrate how

75
00:03:32,400 --> 00:03:35,360
you would normally get compromised by is

76
00:03:35,360 --> 00:03:39,680
malware so through server exploitation

77
00:03:39,680 --> 00:03:42,400
and also this case was about is

78
00:03:42,400 --> 00:03:44,799
backdoors but if we look at the whole

79
00:03:44,799 --> 00:03:47,519
class of these threats is not just about

80
00:03:47,519 --> 00:03:50,640
backdoors or just about espionage you

81
00:03:50,640 --> 00:03:53,519
can also find ies malware which is

82
00:03:53,519 --> 00:03:55,920
stealing credit card information from

83
00:03:55,920 --> 00:03:58,319
e-commerce sites or ones which is

84
00:03:58,319 --> 00:04:01,760
serving adware or turning the compromise

85
00:04:01,760 --> 00:04:04,959
server into cnc infrastructure

86
00:04:04,959 --> 00:04:07,200
and each of itself would be an

87
00:04:07,200 --> 00:04:10,239
interesting story to tell but we decided

88
00:04:10,239 --> 00:04:12,400
to round this app and to look at the

89
00:04:12,400 --> 00:04:14,879
whole class of these threats with one

90
00:04:14,879 --> 00:04:17,440
shared aspect that they are implemented

91
00:04:17,440 --> 00:04:20,560
as iis modules

92
00:04:20,560 --> 00:04:23,040
and there have been some malicious ies

93
00:04:23,040 --> 00:04:26,080
modules reported in the past so let's

94
00:04:26,080 --> 00:04:29,520
quickly look at this well 2007 that's

95
00:04:29,520 --> 00:04:32,960
when is first introduced its modular

96
00:04:32,960 --> 00:04:34,320
architecture

97
00:04:34,320 --> 00:04:37,120
and then the first malicious is modules

98
00:04:37,120 --> 00:04:40,000
was reported in 2013

99
00:04:40,000 --> 00:04:41,840
by trustwave

100
00:04:41,840 --> 00:04:44,720
and then in the following years other

101
00:04:44,720 --> 00:04:49,199
reports were published by unit 42 by

102
00:04:49,199 --> 00:04:53,040
segbules d5 and my colleagues here at

103
00:04:53,040 --> 00:04:54,240
eset

104
00:04:54,240 --> 00:04:56,479
so these were the known ies malware

105
00:04:56,479 --> 00:04:58,800
families at the time

106
00:04:58,800 --> 00:05:01,039
but even though these were all useful

107
00:05:01,039 --> 00:05:03,360
resources to learn more about these

108
00:05:03,360 --> 00:05:05,919
particular families none of these

109
00:05:05,919 --> 00:05:08,479
reports focused primarily on the topic

110
00:05:08,479 --> 00:05:11,680
of ies malware and how you can analyze

111
00:05:11,680 --> 00:05:14,160
it so there is no comprehensive guide

112
00:05:14,160 --> 00:05:15,680
for that

113
00:05:15,680 --> 00:05:18,240
and this is where our research comes in

114
00:05:18,240 --> 00:05:20,560
so this was our goal to take a

115
00:05:20,560 --> 00:05:23,039
systematic approach to this topic and

116
00:05:23,039 --> 00:05:25,759
then to build a comprehensive guide for

117
00:05:25,759 --> 00:05:29,039
you to analyze dissect these malicious

118
00:05:29,039 --> 00:05:31,680
ies modules and to help everyone

119
00:05:31,680 --> 00:05:35,360
understand this class of threads better

120
00:05:35,360 --> 00:05:38,560
we focused on malicious native iis

121
00:05:38,560 --> 00:05:41,120
modules which are those written as c

122
00:05:41,120 --> 00:05:43,039
plus plus libraries

123
00:05:43,039 --> 00:05:45,199
then there is another category of ies

124
00:05:45,199 --> 00:05:47,840
modules supported by that software and

125
00:05:47,840 --> 00:05:50,479
that's managed modules which are dotnet

126
00:05:50,479 --> 00:05:51,759
assemblies

127
00:05:51,759 --> 00:05:54,720
but that's a topic for another day

128
00:05:54,720 --> 00:05:57,440
so during our research we have collected

129
00:05:57,440 --> 00:06:01,440
over 80 samples of native iis malware

130
00:06:01,440 --> 00:06:03,360
and then we studied and categorized

131
00:06:03,360 --> 00:06:06,479
these into 14 malware families

132
00:06:06,479 --> 00:06:08,319
10 of them were never previously

133
00:06:08,319 --> 00:06:10,080
documented

134
00:06:10,080 --> 00:06:12,000
but i'm not going into the details of

135
00:06:12,000 --> 00:06:14,720
these 14 malware families today you can

136
00:06:14,720 --> 00:06:17,199
find all the detailed analyses and other

137
00:06:17,199 --> 00:06:19,600
information in the white paper which is

138
00:06:19,600 --> 00:06:21,520
going to be released together with this

139
00:06:21,520 --> 00:06:22,560
session

140
00:06:22,560 --> 00:06:24,479
so make sure to grab a copy from the

141
00:06:24,479 --> 00:06:27,600
blackhead website after this session

142
00:06:27,600 --> 00:06:29,120
and today

143
00:06:29,120 --> 00:06:31,759
rather than focus on any particular

144
00:06:31,759 --> 00:06:34,639
trade actor or particular malware family

145
00:06:34,639 --> 00:06:37,199
we are going to discuss the common

146
00:06:37,199 --> 00:06:39,680
features extracted from all these

147
00:06:39,680 --> 00:06:42,960
families so what these is malicious

148
00:06:42,960 --> 00:06:45,280
modules have in common and

149
00:06:45,280 --> 00:06:47,199
most importantly the practical

150
00:06:47,199 --> 00:06:51,120
information on how you can analyze them

151
00:06:51,120 --> 00:06:54,400
and that brings me to today's agenda so

152
00:06:54,400 --> 00:06:56,319
first what we're gonna do is we will

153
00:06:56,319 --> 00:06:58,880
explain the architecture and the

154
00:06:58,880 --> 00:07:01,759
mechanisms behind the iis server in

155
00:07:01,759 --> 00:07:02,800
general

156
00:07:02,800 --> 00:07:05,440
and then also the is malware

157
00:07:05,440 --> 00:07:08,080
and then we will discuss how we can

158
00:07:08,080 --> 00:07:11,840
analyze such is malicious modules so

159
00:07:11,840 --> 00:07:14,639
this will be the practical part for the

160
00:07:14,639 --> 00:07:17,520
reversers in the audience

161
00:07:17,520 --> 00:07:20,000
and then the next section will cover the

162
00:07:20,000 --> 00:07:23,919
techniques used by iis malware so here

163
00:07:23,919 --> 00:07:26,400
we will show you what these trajectories

164
00:07:26,400 --> 00:07:28,880
are up to when they are using ies

165
00:07:28,880 --> 00:07:31,360
malware so this will be a more

166
00:07:31,360 --> 00:07:33,759
high-level part with the demonstration

167
00:07:33,759 --> 00:07:37,120
so even if you don't plan to analyze any

168
00:07:37,120 --> 00:07:40,080
is malware anytime soon hopefully this

169
00:07:40,080 --> 00:07:43,280
part will be interesting for you as well

170
00:07:43,280 --> 00:07:46,000
and then finally we will quickly look at

171
00:07:46,000 --> 00:07:49,199
the defense side for some tips on how

172
00:07:49,199 --> 00:07:52,240
you can detect remove and avoid these

173
00:07:52,240 --> 00:07:53,840
threats

174
00:07:53,840 --> 00:07:56,639
so this is our plan for today and let's

175
00:07:56,639 --> 00:08:00,560
get started with the architecture

176
00:08:00,560 --> 00:08:03,520
so in this section we will introduce

177
00:08:03,520 --> 00:08:07,039
some iis terminology and we will explain

178
00:08:07,039 --> 00:08:10,080
how the server operates and also

179
00:08:10,080 --> 00:08:13,039
when is it that the malware fits in

180
00:08:13,039 --> 00:08:15,680
so some basics first well we already

181
00:08:15,680 --> 00:08:17,759
mentioned that iis has a modular

182
00:08:17,759 --> 00:08:19,919
architecture but there is more to it

183
00:08:19,919 --> 00:08:21,840
than just these modules

184
00:08:21,840 --> 00:08:25,360
other components include is services

185
00:08:25,360 --> 00:08:28,160
which are by default configured to run

186
00:08:28,160 --> 00:08:30,720
at each system start and then there is

187
00:08:30,720 --> 00:08:34,320
the iis worker process which handles all

188
00:08:34,320 --> 00:08:36,799
the requests received by the server so

189
00:08:36,799 --> 00:08:38,958
this one is very important

190
00:08:38,958 --> 00:08:42,080
and this process will load all the iis

191
00:08:42,080 --> 00:08:44,240
modules which are configured on the

192
00:08:44,240 --> 00:08:46,959
server and usually there are dozen or

193
00:08:46,959 --> 00:08:49,040
more of these modules so it's a pretty

194
00:08:49,040 --> 00:08:51,519
standard mechanism that there are some

195
00:08:51,519 --> 00:08:54,000
some of these extensions so this is well

196
00:08:54,000 --> 00:08:56,240
the where the main functionality of the

197
00:08:56,240 --> 00:08:58,880
server will be implemented

198
00:08:58,880 --> 00:09:01,040
and in our case we are talking about a

199
00:09:01,040 --> 00:09:03,839
malicious ios module right so imagine

200
00:09:03,839 --> 00:09:06,160
that among those dozens of modules on

201
00:09:06,160 --> 00:09:08,000
the server there is one which is

202
00:09:08,000 --> 00:09:09,440
malicious

203
00:09:09,440 --> 00:09:11,839
so when we look at this malicious module

204
00:09:11,839 --> 00:09:13,839
well it doesn't really need to do

205
00:09:13,839 --> 00:09:16,800
anything special for persistence or

206
00:09:16,800 --> 00:09:19,600
execution because as long as it's

207
00:09:19,600 --> 00:09:22,080
configured as an is module it gets

208
00:09:22,080 --> 00:09:25,519
loaded by the is worker process and

209
00:09:25,519 --> 00:09:29,920
while is is persistent in itself so

210
00:09:29,920 --> 00:09:32,560
that's one advantage to the persistent

211
00:09:32,560 --> 00:09:35,680
sis module then another advantage for

212
00:09:35,680 --> 00:09:39,200
the malware is that once it's loaded by

213
00:09:39,200 --> 00:09:42,399
the is worker process it will see all

214
00:09:42,399 --> 00:09:44,800
the traffic coming through the iis

215
00:09:44,800 --> 00:09:47,200
server and it will also be able to

216
00:09:47,200 --> 00:09:50,399
affect the request processing so the

217
00:09:50,399 --> 00:09:52,240
request processing is something that we

218
00:09:52,240 --> 00:09:54,959
will look at next so

219
00:09:54,959 --> 00:09:56,560
how does that work

220
00:09:56,560 --> 00:09:59,200
well whenever there is a new http

221
00:09:59,200 --> 00:10:02,800
request coming to the iis server it

222
00:10:02,800 --> 00:10:05,200
enters a so-called request processing

223
00:10:05,200 --> 00:10:08,079
pipeline which is basically a series of

224
00:10:08,079 --> 00:10:10,399
steps called events

225
00:10:10,399 --> 00:10:13,519
of steps such as authentication logging

226
00:10:13,519 --> 00:10:16,240
and so on and these steps are taken one

227
00:10:16,240 --> 00:10:19,600
after another until the server persister

228
00:10:19,600 --> 00:10:21,760
processes the request and sends the

229
00:10:21,760 --> 00:10:25,200
appropriate http response

230
00:10:25,200 --> 00:10:26,959
and on a deeper level

231
00:10:26,959 --> 00:10:29,360
what really happens is that each of

232
00:10:29,360 --> 00:10:31,600
these events generates an even

233
00:10:31,600 --> 00:10:34,720
notification which is then handled by an

234
00:10:34,720 --> 00:10:37,279
event handler which is implemented in

235
00:10:37,279 --> 00:10:39,600
the iis modules

236
00:10:39,600 --> 00:10:42,959
so for example the authorization event

237
00:10:42,959 --> 00:10:44,880
will generate a notification which is

238
00:10:44,880 --> 00:10:48,000
handled by the unauthorized request

239
00:10:48,000 --> 00:10:49,440
handler

240
00:10:49,440 --> 00:10:51,839
and after that event the server will

241
00:10:51,839 --> 00:10:54,640
also generate a second notification so

242
00:10:54,640 --> 00:10:56,480
it's just after the event that's why

243
00:10:56,480 --> 00:10:59,680
it's called post event notification and

244
00:10:59,680 --> 00:11:02,160
again that one is handled by another

245
00:11:02,160 --> 00:11:05,440
handler in those ies modules

246
00:11:05,440 --> 00:11:07,920
but honestly if you are just here to

247
00:11:07,920 --> 00:11:10,880
learn about how to analyze is malware

248
00:11:10,880 --> 00:11:12,880
you don't really have to distinguish

249
00:11:12,880 --> 00:11:14,959
between these event and post even

250
00:11:14,959 --> 00:11:16,720
notifications

251
00:11:16,720 --> 00:11:19,120
you do want to know which events are

252
00:11:19,120 --> 00:11:21,600
handled by the malware so in which part

253
00:11:21,600 --> 00:11:24,399
of the request processing it interferes

254
00:11:24,399 --> 00:11:26,399
but you don't have to pay attention to

255
00:11:26,399 --> 00:11:28,560
these events

256
00:11:28,560 --> 00:11:30,720
so just know that uh the events which

257
00:11:30,720 --> 00:11:33,279
can be handled by that by the malware

258
00:11:33,279 --> 00:11:35,200
are first of all these which are listed

259
00:11:35,200 --> 00:11:37,920
here so that's uh events tied to the

260
00:11:37,920 --> 00:11:40,000
request processing but then there are

261
00:11:40,000 --> 00:11:43,360
other events such as on send response

262
00:11:43,360 --> 00:11:46,000
send response event which is handled by

263
00:11:46,000 --> 00:11:49,200
the onsen response handler and that one

264
00:11:49,200 --> 00:11:51,440
is not listed here because it can occur

265
00:11:51,440 --> 00:11:53,839
in any place of the pipeline so it

266
00:11:53,839 --> 00:11:55,920
doesn't have a fixed place but it can

267
00:11:55,920 --> 00:11:57,920
also be handled by the malware so it's

268
00:11:57,920 --> 00:12:01,040
also where the malware can interfere

269
00:12:01,040 --> 00:12:03,200
and then there are also other events

270
00:12:03,200 --> 00:12:04,160
which are

271
00:12:04,160 --> 00:12:06,480
occurring on the global level so not

272
00:12:06,480 --> 00:12:08,880
tied to the request processing and these

273
00:12:08,880 --> 00:12:13,040
can also be handled by any is module

274
00:12:13,040 --> 00:12:16,399
and how do these even handlers work well

275
00:12:16,399 --> 00:12:18,320
these event handlers are actually

276
00:12:18,320 --> 00:12:21,920
methods of module classes so whenever

277
00:12:21,920 --> 00:12:25,279
you analyze an is malware you will

278
00:12:25,279 --> 00:12:27,839
always see a class either inheriting

279
00:12:27,839 --> 00:12:32,160
from c http module or c global module so

280
00:12:32,160 --> 00:12:33,760
one of them

281
00:12:33,760 --> 00:12:36,959
handles the request level events another

282
00:12:36,959 --> 00:12:39,680
the global events and there can be one

283
00:12:39,680 --> 00:12:43,839
or both in any malicious ies module

284
00:12:43,839 --> 00:12:45,680
and then these event handlers

285
00:12:45,680 --> 00:12:48,079
implemented here are the most important

286
00:12:48,079 --> 00:12:50,880
part of any is module because this is

287
00:12:50,880 --> 00:12:52,720
where the main functionality will be

288
00:12:52,720 --> 00:12:53,920
hidden

289
00:12:53,920 --> 00:12:56,639
so if you are looking at a suspicious

290
00:12:56,639 --> 00:12:59,440
ies module and you want to check if it's

291
00:12:59,440 --> 00:13:02,000
malicious well this is where you will be

292
00:13:02,000 --> 00:13:04,720
looking at these even handlers

293
00:13:04,720 --> 00:13:06,639
and usually not all of them will be

294
00:13:06,639 --> 00:13:08,959
implemented by is malware so it can be

295
00:13:08,959 --> 00:13:10,720
tour free

296
00:13:10,720 --> 00:13:12,639
and this is not a rule

297
00:13:12,639 --> 00:13:13,360
but

298
00:13:13,360 --> 00:13:15,440
from those malware families that we

299
00:13:15,440 --> 00:13:17,839
analyzed it seems like some of these

300
00:13:17,839 --> 00:13:20,720
email handlers are more popular than the

301
00:13:20,720 --> 00:13:23,600
others so for example

302
00:13:23,600 --> 00:13:26,399
the on begging beating request or the

303
00:13:26,399 --> 00:13:29,120
onsen respawn handlers are usually

304
00:13:29,120 --> 00:13:31,680
handled by the malware well basically

305
00:13:31,680 --> 00:13:34,880
the malware wants to step in whenever

306
00:13:34,880 --> 00:13:37,120
there is a new http request coming to

307
00:13:37,120 --> 00:13:40,000
the server and also just before the http

308
00:13:40,000 --> 00:13:43,040
response is sent but as i said that's

309
00:13:43,040 --> 00:13:44,720
not the rule

310
00:13:44,720 --> 00:13:47,120
and then there are also other handlers

311
00:13:47,120 --> 00:13:50,079
handled by the malicious iis modules

312
00:13:50,079 --> 00:13:53,040
such as on log request and this one can

313
00:13:53,040 --> 00:13:56,480
be used to make sure that no malicious

314
00:13:56,480 --> 00:13:58,959
activity is locked on the server and we

315
00:13:58,959 --> 00:14:01,839
have seen such case

316
00:14:01,839 --> 00:14:05,199
well in any case uh this is uh how the

317
00:14:05,199 --> 00:14:07,440
event handlers are important for the

318
00:14:07,440 --> 00:14:10,160
malware but one more mechanism that they

319
00:14:10,160 --> 00:14:12,160
need to mention is how these event

320
00:14:12,160 --> 00:14:14,839
handlers register for these even

321
00:14:14,839 --> 00:14:16,399
notifications

322
00:14:16,399 --> 00:14:18,880
and that's implemented in the

323
00:14:18,880 --> 00:14:22,240
dll export called register module so all

324
00:14:22,240 --> 00:14:25,199
of these native is modules are dll

325
00:14:25,199 --> 00:14:27,920
libraries so they all export the same

326
00:14:27,920 --> 00:14:31,199
function called register module and this

327
00:14:31,199 --> 00:14:33,199
is where the initialization will take

328
00:14:33,199 --> 00:14:34,320
place

329
00:14:34,320 --> 00:14:37,199
so two things will be implemented in any

330
00:14:37,199 --> 00:14:39,199
register module function

331
00:14:39,199 --> 00:14:41,519
the first one is that the function will

332
00:14:41,519 --> 00:14:45,600
create instances of the core classes

333
00:14:45,600 --> 00:14:48,160
and then the second step is that it will

334
00:14:48,160 --> 00:14:50,639
call the set request notifications

335
00:14:50,639 --> 00:14:52,959
method and this is to specify which

336
00:14:52,959 --> 00:14:56,800
event should be handled by this module

337
00:14:56,800 --> 00:14:59,920
so in this example we can see uh that

338
00:14:59,920 --> 00:15:02,800
there is the rq send response constant

339
00:15:02,800 --> 00:15:05,920
that just tells us that this module will

340
00:15:05,920 --> 00:15:10,399
handle the onsen response event

341
00:15:10,399 --> 00:15:13,199
and optionally the register module

342
00:15:13,199 --> 00:15:16,160
function can also set the priority for

343
00:15:16,160 --> 00:15:19,040
the module or do other initialization

344
00:15:19,040 --> 00:15:21,440
steps but these are the two which are

345
00:15:21,440 --> 00:15:24,800
always implemented there

346
00:15:24,959 --> 00:15:28,160
all right so this is how the is server

347
00:15:28,160 --> 00:15:30,880
components interact with each other and

348
00:15:30,880 --> 00:15:33,519
what are the main mechanisms and now

349
00:15:33,519 --> 00:15:35,920
let's look at the reversing side so

350
00:15:35,920 --> 00:15:39,199
let's quickly go over four steps that

351
00:15:39,199 --> 00:15:42,639
you can take to kick start any analysis

352
00:15:42,639 --> 00:15:45,920
of a malicious is module

353
00:15:45,920 --> 00:15:49,279
so at first i recommend to import the

354
00:15:49,279 --> 00:15:51,440
relevant interfaces into your favorite

355
00:15:51,440 --> 00:15:54,480
disassembler as listed here they'll all

356
00:15:54,480 --> 00:15:58,320
implement it in is car.dll

357
00:15:58,320 --> 00:16:00,720
and you will need those because uh the

358
00:16:00,720 --> 00:16:04,240
is modules rely heavily on iis c plus

359
00:16:04,240 --> 00:16:07,040
plus api calls so you will need them to

360
00:16:07,040 --> 00:16:09,759
interpret all the virtual function calls

361
00:16:09,759 --> 00:16:12,320
across the module

362
00:16:12,320 --> 00:16:15,040
then as a second step start analyzing

363
00:16:15,040 --> 00:16:17,759
from the register module export

364
00:16:17,759 --> 00:16:19,199
usually it's very simple and

365
00:16:19,199 --> 00:16:21,360
straightforward as i said that there are

366
00:16:21,360 --> 00:16:23,519
those two steps which are implemented

367
00:16:23,519 --> 00:16:24,399
here

368
00:16:24,399 --> 00:16:26,720
so you usually want to use it to find

369
00:16:26,720 --> 00:16:29,040
out which handlers are implemented in

370
00:16:29,040 --> 00:16:30,399
the module

371
00:16:30,399 --> 00:16:33,120
but in some cases the function can be

372
00:16:33,120 --> 00:16:36,079
much more complex there can be some

373
00:16:36,079 --> 00:16:38,399
structural initialization or string

374
00:16:38,399 --> 00:16:41,519
decryption and so on so definitely don't

375
00:16:41,519 --> 00:16:43,680
overlook this export because it's not

376
00:16:43,680 --> 00:16:46,959
always so short and simple

377
00:16:46,959 --> 00:16:49,440
and here just as a side note you may

378
00:16:49,440 --> 00:16:52,000
notice these small green icons popping

379
00:16:52,000 --> 00:16:54,639
up in the rest of the presentation and

380
00:16:54,639 --> 00:16:56,800
that's just a reference for you for

381
00:16:56,800 --> 00:16:58,800
where you can find more information in

382
00:16:58,800 --> 00:17:01,120
the paper but definitely you don't need

383
00:17:01,120 --> 00:17:04,160
to read those small notes now

384
00:17:04,160 --> 00:17:07,280
anyway back to the reversing so the

385
00:17:07,280 --> 00:17:10,079
third step you will take is to identify

386
00:17:10,079 --> 00:17:12,400
the actual implemented handlers in the

387
00:17:12,400 --> 00:17:13,599
code

388
00:17:13,599 --> 00:17:15,839
and this one is easy because you will

389
00:17:15,839 --> 00:17:18,319
immediately know when some handler was

390
00:17:18,319 --> 00:17:21,199
not implemented it will look like this

391
00:17:21,199 --> 00:17:23,919
you can see there are some debug strings

392
00:17:23,919 --> 00:17:26,480
so you can disregard those and use that

393
00:17:26,480 --> 00:17:29,280
as a guide to find those handlers which

394
00:17:29,280 --> 00:17:31,360
are actually implemented

395
00:17:31,360 --> 00:17:33,919
so these we will mark and we will start

396
00:17:33,919 --> 00:17:36,160
analyzing them which will not be that

397
00:17:36,160 --> 00:17:39,280
easy as finding them

398
00:17:39,280 --> 00:17:41,840
but just know that not all the

399
00:17:41,840 --> 00:17:44,320
implemented handlers are necessarily

400
00:17:44,320 --> 00:17:47,120
malicious handlers so for example we

401
00:17:47,120 --> 00:17:49,039
analyzed one family which was a

402
00:17:49,039 --> 00:17:51,679
trojanized version of a legitimate iis

403
00:17:51,679 --> 00:17:54,240
module so of course in that case some of

404
00:17:54,240 --> 00:17:56,000
the handlers were taken from the

405
00:17:56,000 --> 00:17:58,640
original module so those were benign and

406
00:17:58,640 --> 00:18:00,720
then there was one malicious handler

407
00:18:00,720 --> 00:18:02,559
added on top

408
00:18:02,559 --> 00:18:05,200
and the design of these ies modules

409
00:18:05,200 --> 00:18:07,840
makes this very easy to do it this way

410
00:18:07,840 --> 00:18:09,679
so just know that

411
00:18:09,679 --> 00:18:11,840
not all the handlers are necessarily

412
00:18:11,840 --> 00:18:14,240
part of the malware

413
00:18:14,240 --> 00:18:16,720
but anyway once you have your handlers

414
00:18:16,720 --> 00:18:18,799
identified

415
00:18:18,799 --> 00:18:20,640
this is where you will spend the most

416
00:18:20,640 --> 00:18:23,840
time analyzing so for that i link here

417
00:18:23,840 --> 00:18:26,960
the native code api reference which you

418
00:18:26,960 --> 00:18:30,559
will need for the analysis

419
00:18:31,280 --> 00:18:33,919
and as another guide for the analysis

420
00:18:33,919 --> 00:18:36,160
you need to know what you can expect in

421
00:18:36,160 --> 00:18:39,360
those handlers so here in our next part

422
00:18:39,360 --> 00:18:42,480
we will look at how to understand these

423
00:18:42,480 --> 00:18:45,760
iis modules this is malware so what kind

424
00:18:45,760 --> 00:18:48,080
of techniques it uses and what are their

425
00:18:48,080 --> 00:18:49,760
objectives

426
00:18:49,760 --> 00:18:52,640
as the key feature to understand uh you

427
00:18:52,640 --> 00:18:55,280
should know that all these is malware

428
00:18:55,280 --> 00:18:58,080
modules will process http requests

429
00:18:58,080 --> 00:19:00,000
coming to the server

430
00:19:00,000 --> 00:19:02,240
so the question is which requests are

431
00:19:02,240 --> 00:19:04,720
processed and which are ignored and also

432
00:19:04,720 --> 00:19:07,440
how are they processed

433
00:19:07,440 --> 00:19:10,559
and we identified four or five main

434
00:19:10,559 --> 00:19:14,320
types of ies malware so let's introduce

435
00:19:14,320 --> 00:19:17,200
these five types

436
00:19:17,200 --> 00:19:20,160
so the first group is is backdoors and

437
00:19:20,160 --> 00:19:22,559
these backdoors are usually used by

438
00:19:22,559 --> 00:19:25,039
attackers to control the server remotely

439
00:19:25,039 --> 00:19:27,280
execute commands

440
00:19:27,280 --> 00:19:29,840
and these iis backdoors are passive

441
00:19:29,840 --> 00:19:32,480
implants so it's not the standard case

442
00:19:32,480 --> 00:19:35,280
where the malware contacts the cnc

443
00:19:35,280 --> 00:19:37,840
server but in this case it's the

444
00:19:37,840 --> 00:19:40,640
attacker who initiates the connection by

445
00:19:40,640 --> 00:19:44,000
sending a special http request

446
00:19:44,000 --> 00:19:45,760
and then this request can have some

447
00:19:45,760 --> 00:19:48,320
vector command embedded which the server

448
00:19:48,320 --> 00:19:50,160
will execute and then

449
00:19:50,160 --> 00:19:52,799
it can optionally embed some command

450
00:19:52,799 --> 00:19:55,039
output or other data in the http

451
00:19:55,039 --> 00:19:57,039
response

452
00:19:57,039 --> 00:19:58,720
as for the commands

453
00:19:58,720 --> 00:20:00,480
well from the malware families that we

454
00:20:00,480 --> 00:20:03,840
analyzed there wasn't any special

455
00:20:03,840 --> 00:20:06,880
iis special backdoor comment so it's the

456
00:20:06,880 --> 00:20:10,799
usual download upload files or execute

457
00:20:10,799 --> 00:20:12,080
comments

458
00:20:12,080 --> 00:20:14,080
but what i want to discuss in more

459
00:20:14,080 --> 00:20:18,400
detail are these attacker http requests

460
00:20:18,400 --> 00:20:20,559
so we need to

461
00:20:20,559 --> 00:20:23,200
we need to understand that these iis

462
00:20:23,200 --> 00:20:25,520
modules will see all the requests coming

463
00:20:25,520 --> 00:20:27,600
to the iis server

464
00:20:27,600 --> 00:20:29,600
the request from the legitimate visitors

465
00:20:29,600 --> 00:20:31,440
but also the request from the attacker

466
00:20:31,440 --> 00:20:33,600
in this case so they need to distinguish

467
00:20:33,600 --> 00:20:35,760
between those so there needs to be some

468
00:20:35,760 --> 00:20:38,880
mechanism on how to mark these attacker

469
00:20:38,880 --> 00:20:41,600
requests so that the is malware can

470
00:20:41,600 --> 00:20:43,120
recognize them

471
00:20:43,120 --> 00:20:44,960
and this can be implemented in different

472
00:20:44,960 --> 00:20:48,000
ways for example the attacker can embed

473
00:20:48,000 --> 00:20:51,200
some spec specific http header in their

474
00:20:51,200 --> 00:20:53,919
request or there can be a hard-coded

475
00:20:53,919 --> 00:20:57,039
password in the header or in the url or

476
00:20:57,039 --> 00:20:58,799
in the request body

477
00:20:58,799 --> 00:21:00,880
but there are also other cases which are

478
00:21:00,880 --> 00:21:04,080
more complex so this is one such example

479
00:21:04,080 --> 00:21:06,640
where this malware family doesn't look

480
00:21:06,640 --> 00:21:10,080
for a specific password in the request

481
00:21:10,080 --> 00:21:12,880
but it looks for a specific relationship

482
00:21:12,880 --> 00:21:15,919
between the url and then the host and

483
00:21:15,919 --> 00:21:18,080
cookie header so the malware will

484
00:21:18,080 --> 00:21:21,280
calculate ndp hashes of these values and

485
00:21:21,280 --> 00:21:23,919
it will rearrange them and compare them

486
00:21:23,919 --> 00:21:26,320
in a certain way to make sure that this

487
00:21:26,320 --> 00:21:29,600
is indeed the attacker request

488
00:21:29,600 --> 00:21:33,039
and uh interestingly this is more uh

489
00:21:33,039 --> 00:21:34,720
difficult to

490
00:21:34,720 --> 00:21:36,640
find in the logs or more difficult to

491
00:21:36,640 --> 00:21:38,960
fingerprint for the defenders so that's

492
00:21:38,960 --> 00:21:41,200
probably the reasons why they did it

493
00:21:41,200 --> 00:21:43,520
this way so when we compare it to

494
00:21:43,520 --> 00:21:46,320
another malware families another

495
00:21:46,320 --> 00:21:47,679
backdoors

496
00:21:47,679 --> 00:21:50,320
which have a hard-coded password or

497
00:21:50,320 --> 00:21:52,720
which have some specific header well you

498
00:21:52,720 --> 00:21:55,760
can more easily find this in the locks

499
00:21:55,760 --> 00:21:58,480
as a defender but in this case it's not

500
00:21:58,480 --> 00:22:00,720
so straightforward so that's an

501
00:22:00,720 --> 00:22:03,679
anti-detection technique

502
00:22:03,679 --> 00:22:05,440
and then let's move on to the next

503
00:22:05,440 --> 00:22:08,720
category of is malware and that's is

504
00:22:08,720 --> 00:22:11,840
info stealers and these steal data from

505
00:22:11,840 --> 00:22:14,400
legitimate visitors so they're listening

506
00:22:14,400 --> 00:22:15,440
to the

507
00:22:15,440 --> 00:22:18,400
traffic coming to the server and then

508
00:22:18,400 --> 00:22:19,360
they

509
00:22:19,360 --> 00:22:21,600
lock and exfiltrate some information

510
00:22:21,600 --> 00:22:24,840
such as credit card information or

511
00:22:24,840 --> 00:22:27,760
credentials so in this one example this

512
00:22:27,760 --> 00:22:30,000
malware family will listen to all the

513
00:22:30,000 --> 00:22:32,720
incoming traffic and then once there is

514
00:22:32,720 --> 00:22:36,960
a http request coming to a specific uri

515
00:22:36,960 --> 00:22:39,760
such as a request such as checkout or

516
00:22:39,760 --> 00:22:40,880
payment

517
00:22:40,880 --> 00:22:43,280
then this request is identified and the

518
00:22:43,280 --> 00:22:45,280
malware locks it

519
00:22:45,280 --> 00:22:47,280
and mower doesn't do anything with the

520
00:22:47,280 --> 00:22:50,320
http response so the user will not be

521
00:22:50,320 --> 00:22:51,919
aware

522
00:22:51,919 --> 00:22:53,840
and then the attacker can also contact

523
00:22:53,840 --> 00:22:56,080
the same server by sending a special

524
00:22:56,080 --> 00:22:57,919
attacker request just like in the

525
00:22:57,919 --> 00:23:00,240
backdoor case and on this special

526
00:23:00,240 --> 00:23:02,320
request the malware will exfiltrate the

527
00:23:02,320 --> 00:23:04,960
collected data

528
00:23:04,960 --> 00:23:08,159
of course https doesn't help the user

529
00:23:08,159 --> 00:23:10,480
here in any way because the malware runs

530
00:23:10,480 --> 00:23:12,720
on the server so it will see the

531
00:23:12,720 --> 00:23:16,400
decrypted version of the data

532
00:23:16,400 --> 00:23:19,200
now let's have a quick demonstration so

533
00:23:19,200 --> 00:23:20,400
let's look at

534
00:23:20,400 --> 00:23:23,440
at an example of how

535
00:23:23,440 --> 00:23:26,960
this is infostiller can work so

536
00:23:26,960 --> 00:23:28,960
what we have here is a

537
00:23:28,960 --> 00:23:32,400
clean installation of iis server

538
00:23:32,400 --> 00:23:35,360
but with an added module which is

539
00:23:35,360 --> 00:23:38,240
both an infosteeler and backdoor so now

540
00:23:38,240 --> 00:23:41,120
we are opening ies manager which is a

541
00:23:41,120 --> 00:23:43,360
tool where you can see the server

542
00:23:43,360 --> 00:23:46,080
configuration and we are opening it to

543
00:23:46,080 --> 00:23:49,120
show you the list of the modules and in

544
00:23:49,120 --> 00:23:51,200
that list of modules you will see one

545
00:23:51,200 --> 00:23:54,159
called is backdoor so we name it this

546
00:23:54,159 --> 00:23:56,080
way just to make it more obvious but

547
00:23:56,080 --> 00:23:57,760
that wouldn't happen in the real world

548
00:23:57,760 --> 00:23:59,279
case

549
00:23:59,279 --> 00:24:00,799
and what we're going to do is we are

550
00:24:00,799 --> 00:24:02,799
going to interact with this server by

551
00:24:02,799 --> 00:24:06,000
sending it http request using the python

552
00:24:06,000 --> 00:24:07,760
request library

553
00:24:07,760 --> 00:24:09,840
so the first request will be just the

554
00:24:09,840 --> 00:24:12,559
standard request just to see what kind

555
00:24:12,559 --> 00:24:14,799
of response the server would normally

556
00:24:14,799 --> 00:24:17,520
send back to a user just pay attention

557
00:24:17,520 --> 00:24:19,760
to the headers which is important to

558
00:24:19,760 --> 00:24:22,799
this particular malware

559
00:24:22,799 --> 00:24:25,279
and then in our next step we will send a

560
00:24:25,279 --> 00:24:28,000
request as a standard legitimate visitor

561
00:24:28,000 --> 00:24:30,400
of this server who tries to authenticate

562
00:24:30,400 --> 00:24:32,559
so we include some kind of password in

563
00:24:32,559 --> 00:24:35,120
the http request body

564
00:24:35,120 --> 00:24:37,919
and from the response we can see it's

565
00:24:37,919 --> 00:24:41,440
the same as in the standard case nothing

566
00:24:41,440 --> 00:24:43,679
nothing special in the headers

567
00:24:43,679 --> 00:24:45,440
and that's because this is the is

568
00:24:45,440 --> 00:24:48,159
infostealer so it's mostly listening and

569
00:24:48,159 --> 00:24:50,640
logging it doesn't really interfere with

570
00:24:50,640 --> 00:24:54,400
the response sent to legitimate user

571
00:24:54,400 --> 00:24:57,840
and we know that what kind of log file

572
00:24:57,840 --> 00:25:00,960
this malware is using so we can look at

573
00:25:00,960 --> 00:25:04,799
inside this log file and we can see that

574
00:25:04,799 --> 00:25:07,679
indeed the same password was locked

575
00:25:07,679 --> 00:25:10,400
because it was

576
00:25:10,400 --> 00:25:13,440
founded in that request from the user uh

577
00:25:13,440 --> 00:25:15,440
there's an interesting string password

578
00:25:15,440 --> 00:25:17,600
so the malware log that

579
00:25:17,600 --> 00:25:20,080
and this will happen in any

580
00:25:20,080 --> 00:25:23,440
case where the string password is in the

581
00:25:23,440 --> 00:25:25,520
http request from the user because this

582
00:25:25,520 --> 00:25:28,880
is how that malware was written

583
00:25:28,880 --> 00:25:31,120
and now uh for the interesting part we

584
00:25:31,120 --> 00:25:34,080
will switch heads and we will act as the

585
00:25:34,080 --> 00:25:36,240
attacker now so we will send another

586
00:25:36,240 --> 00:25:38,799
request but this time it's a special

587
00:25:38,799 --> 00:25:41,440
attacker request so see there are two

588
00:25:41,440 --> 00:25:44,159
special headers included in the request

589
00:25:44,159 --> 00:25:46,720
one of them is with the password that we

590
00:25:46,720 --> 00:25:49,840
change from the original to demo

591
00:25:49,840 --> 00:25:52,480
and then the other header is with the

592
00:25:52,480 --> 00:25:54,640
backdoor command

593
00:25:54,640 --> 00:25:56,880
so this special headers

594
00:25:56,880 --> 00:25:59,520
name is xcom variations and remember

595
00:25:59,520 --> 00:26:00,320
that

596
00:26:00,320 --> 00:26:02,640
so now we send the request and we can

597
00:26:02,640 --> 00:26:05,679
see the response headers and we can see

598
00:26:05,679 --> 00:26:07,200
that the same

599
00:26:07,200 --> 00:26:10,480
special http header is included in the

600
00:26:10,480 --> 00:26:14,400
response from server from the malware

601
00:26:14,400 --> 00:26:17,520
so what is sent in this header

602
00:26:17,520 --> 00:26:20,000
we can see it's some kind of base64

603
00:26:20,000 --> 00:26:22,080
encoded string

604
00:26:22,080 --> 00:26:25,120
so let's decode it and let's see our

605
00:26:25,120 --> 00:26:28,400
answer for our backdoor command

606
00:26:28,400 --> 00:26:30,960
and we can see this is the content of

607
00:26:30,960 --> 00:26:34,480
the log file so these are all data

608
00:26:34,480 --> 00:26:37,360
collected and locked by the malware

609
00:26:37,360 --> 00:26:39,279
by the infostiller so it's all the

610
00:26:39,279 --> 00:26:41,760
credentials so this is the main

611
00:26:41,760 --> 00:26:44,799
mechanism behind an is infosphere and

612
00:26:44,799 --> 00:26:46,960
how it can look like in real world

613
00:26:46,960 --> 00:26:48,400
conditions

614
00:26:48,400 --> 00:26:51,679
and we will come back to this example

615
00:26:51,679 --> 00:26:54,400
but we still have three more malware

616
00:26:54,400 --> 00:26:57,200
types to cover so let's continue with

617
00:26:57,200 --> 00:26:59,840
the third category and that's is

618
00:26:59,840 --> 00:27:01,840
infostealers

619
00:27:01,840 --> 00:27:04,080
so this type of malware

620
00:27:04,080 --> 00:27:06,400
is also targeting legitimate users of

621
00:27:06,400 --> 00:27:08,000
the servers whenever there is a

622
00:27:08,000 --> 00:27:09,840
legitimate visitor

623
00:27:09,840 --> 00:27:12,720
it looks at its request but this time

624
00:27:12,720 --> 00:27:15,039
the request is not locked but it's

625
00:27:15,039 --> 00:27:17,600
relayed to the server to obtain a

626
00:27:17,600 --> 00:27:19,919
configuration from the server and the

627
00:27:19,919 --> 00:27:22,799
configuration is then used to modify the

628
00:27:22,799 --> 00:27:26,320
http response from for the user so

629
00:27:26,320 --> 00:27:28,080
unlike infosteelers we're actively

630
00:27:28,080 --> 00:27:30,080
modifying the response

631
00:27:30,080 --> 00:27:32,960
and this is used to serve some malware

632
00:27:32,960 --> 00:27:35,840
or adware or redirect the user to

633
00:27:35,840 --> 00:27:39,120
another website so to actively

634
00:27:39,120 --> 00:27:42,960
serve malicious content to that user

635
00:27:42,960 --> 00:27:46,559
and then our next category is is proxies

636
00:27:46,559 --> 00:27:48,399
and that's very different from these

637
00:27:48,399 --> 00:27:50,720
other cases because this malware is

638
00:27:50,720 --> 00:27:54,320
usually used as part of a larger malware

639
00:27:54,320 --> 00:27:56,880
infrastructure and it's used to relay

640
00:27:56,880 --> 00:28:00,159
traffic between some compromised host

641
00:28:00,159 --> 00:28:03,120
and its cnc server

642
00:28:03,120 --> 00:28:06,159
so whenever a compromise host contacts

643
00:28:06,159 --> 00:28:08,799
this is server it just relays the

644
00:28:08,799 --> 00:28:11,440
request to the cnc server and it's doing

645
00:28:11,440 --> 00:28:14,240
the same the other way around

646
00:28:14,240 --> 00:28:17,440
and the malware actors are usually using

647
00:28:17,440 --> 00:28:19,600
this technique to conceal the real

648
00:28:19,600 --> 00:28:22,080
location of the cnc server so the

649
00:28:22,080 --> 00:28:24,720
compromise host which of course doesn't

650
00:28:24,720 --> 00:28:26,720
know about the communication doesn't

651
00:28:26,720 --> 00:28:28,640
communicate with the real synthesizer

652
00:28:28,640 --> 00:28:31,039
but the compromised proxy

653
00:28:31,039 --> 00:28:33,360
and the threat actors can

654
00:28:33,360 --> 00:28:36,000
chain multiple such proxies one after

655
00:28:36,000 --> 00:28:39,360
another to make it more obscure to find

656
00:28:39,360 --> 00:28:41,840
the real cnc server

657
00:28:41,840 --> 00:28:43,600
another reason why they are doing it

658
00:28:43,600 --> 00:28:46,320
like this is well that compromised

659
00:28:46,320 --> 00:28:48,240
server can have a good reputation so

660
00:28:48,240 --> 00:28:50,320
maybe they will be able to bypass

661
00:28:50,320 --> 00:28:53,840
firewall or other detection mechanisms

662
00:28:53,840 --> 00:28:57,120
but in any case these is proxies are

663
00:28:57,120 --> 00:29:00,000
only used to relay this kind of traffic

664
00:29:00,000 --> 00:29:02,080
but when there is a request from a

665
00:29:02,080 --> 00:29:05,360
legitimate visitor of the iis server

666
00:29:05,360 --> 00:29:07,679
this request would get ignored by this

667
00:29:07,679 --> 00:29:10,000
malware so that's unlike the is

668
00:29:10,000 --> 00:29:12,399
infostealers and injectors where that

669
00:29:12,399 --> 00:29:14,880
legitimate users or visitors would be

670
00:29:14,880 --> 00:29:16,880
directly affected

671
00:29:16,880 --> 00:29:19,120
their request here will still get

672
00:29:19,120 --> 00:29:21,840
handled by the iis server is just that

673
00:29:21,840 --> 00:29:25,279
this malware will ignore them

674
00:29:25,279 --> 00:29:27,440
and then there is the last category that

675
00:29:27,440 --> 00:29:31,039
we named seo fraud and in this category

676
00:29:31,039 --> 00:29:31,919
the

677
00:29:31,919 --> 00:29:34,399
real visitors of the server are also

678
00:29:34,399 --> 00:29:37,520
ignored so it has a low impact on the

679
00:29:37,520 --> 00:29:39,840
legitimate visitors but i still want to

680
00:29:39,840 --> 00:29:41,840
mention this category because it's used

681
00:29:41,840 --> 00:29:43,919
in a criminal scheme

682
00:29:43,919 --> 00:29:46,559
so what's going on the purpose of this

683
00:29:46,559 --> 00:29:49,600
malware is to manipulate content served

684
00:29:49,600 --> 00:29:52,960
to search engine crawlers to boost seo

685
00:29:52,960 --> 00:29:56,320
for some third-party websites

686
00:29:56,320 --> 00:29:58,640
so this is not the case where admin

687
00:29:58,640 --> 00:30:01,120
would install such malware such

688
00:30:01,120 --> 00:30:03,840
functionality by themselves because it's

689
00:30:03,840 --> 00:30:06,640
not to boost their seo it reaches

690
00:30:06,640 --> 00:30:08,480
techniques you may know under the name

691
00:30:08,480 --> 00:30:11,520
blackhead seo but in this case it's the

692
00:30:11,520 --> 00:30:14,000
malware that communicates with its cnc

693
00:30:14,000 --> 00:30:17,039
server to get the configuration as to

694
00:30:17,039 --> 00:30:19,600
which third-party website should be

695
00:30:19,600 --> 00:30:20,960
promoted

696
00:30:20,960 --> 00:30:23,440
so the compromise iis server is just

697
00:30:23,440 --> 00:30:25,120
misused here

698
00:30:25,120 --> 00:30:27,840
and all the websites can be promoted by

699
00:30:27,840 --> 00:30:30,080
various techniques such as keywords

700
00:30:30,080 --> 00:30:32,320
stuffing or injecting lists of backlinks

701
00:30:32,320 --> 00:30:35,520
or other techniques but in general uh

702
00:30:35,520 --> 00:30:38,799
the uh purpose is to fool these

703
00:30:38,799 --> 00:30:41,360
algorithms and this malware doesn't care

704
00:30:41,360 --> 00:30:44,960
about the real visitors of this server

705
00:30:44,960 --> 00:30:48,000
okay so these were the five main types

706
00:30:48,000 --> 00:30:51,279
of ies malware and here you can see the

707
00:30:51,279 --> 00:30:54,320
distribution of these types among those

708
00:30:54,320 --> 00:30:57,840
14 malware families that we analyzed

709
00:30:57,840 --> 00:31:00,240
and as you can see oftentimes there were

710
00:31:00,240 --> 00:31:02,880
several functionalities combined in one

711
00:31:02,880 --> 00:31:04,480
malware family

712
00:31:04,480 --> 00:31:07,200
proxy with seo fraud or backdoor with

713
00:31:07,200 --> 00:31:08,720
info stealer

714
00:31:08,720 --> 00:31:11,519
but more info on that in the paper

715
00:31:11,519 --> 00:31:15,039
because now i still want to cover some

716
00:31:15,039 --> 00:31:18,080
basics about what i as administrators

717
00:31:18,080 --> 00:31:21,440
can do about these threats

718
00:31:21,440 --> 00:31:24,159
so the first question is how you can

719
00:31:24,159 --> 00:31:27,360
find such a malicious nativis module on

720
00:31:27,360 --> 00:31:30,159
your iis server and there are several

721
00:31:30,159 --> 00:31:33,120
ways how you can do it uh well the first

722
00:31:33,120 --> 00:31:36,080
is to use this is manager tool that we

723
00:31:36,080 --> 00:31:38,080
used in our example

724
00:31:38,080 --> 00:31:40,399
so you can use this tool to list all the

725
00:31:40,399 --> 00:31:42,880
configured modules on the server and

726
00:31:42,880 --> 00:31:44,880
from the list of modules you can get

727
00:31:44,880 --> 00:31:47,360
these actual files and you can check

728
00:31:47,360 --> 00:31:50,320
whether those dll files are legitimate

729
00:31:50,320 --> 00:31:52,399
so either that they're

730
00:31:52,399 --> 00:31:54,880
signed by a trusted provider or that it

731
00:31:54,880 --> 00:31:57,679
was you who installed these modules

732
00:31:57,679 --> 00:31:59,519
but this is not the only way you can

733
00:31:59,519 --> 00:32:00,399
also

734
00:32:00,399 --> 00:32:03,120
use the command line tool

735
00:32:03,120 --> 00:32:05,840
app cmd.exe which is also building on

736
00:32:05,840 --> 00:32:08,320
the server or you can just inspect the

737
00:32:08,320 --> 00:32:11,600
configuration file manually

738
00:32:11,600 --> 00:32:13,679
then additional source of information

739
00:32:13,679 --> 00:32:17,440
can be is locks and again you can see

740
00:32:17,440 --> 00:32:20,320
the location of these logs using iis

741
00:32:20,320 --> 00:32:22,960
manager just be aware that these logs

742
00:32:22,960 --> 00:32:25,360
will not be hundred percent reliable

743
00:32:25,360 --> 00:32:27,600
well not everything gets locked but more

744
00:32:27,600 --> 00:32:31,039
importantly the is malware can also

745
00:32:31,039 --> 00:32:33,360
interfere with logging as we have seen

746
00:32:33,360 --> 00:32:35,360
even today

747
00:32:35,360 --> 00:32:38,320
and finally you can use the yara rules

748
00:32:38,320 --> 00:32:41,360
to scan for these 40 nonmalware families

749
00:32:41,360 --> 00:32:43,600
so we have put together these arrows and

750
00:32:43,600 --> 00:32:46,399
extracted the iocs and you can find that

751
00:32:46,399 --> 00:32:49,279
in our github repository

752
00:32:49,279 --> 00:32:50,799
and then if you do

753
00:32:50,799 --> 00:32:54,080
identify a successful compromise and you

754
00:32:54,080 --> 00:32:56,960
want to get rid of it well the first

755
00:32:56,960 --> 00:32:59,679
option too is to reinstall the server

756
00:32:59,679 --> 00:33:02,240
but if you don't plan to do that

757
00:33:02,240 --> 00:33:04,399
then at least this is how you can get

758
00:33:04,399 --> 00:33:07,200
rid of that particular module so let's

759
00:33:07,200 --> 00:33:09,760
come back to our example with that

760
00:33:09,760 --> 00:33:13,200
backdoor plus info stealer and what we

761
00:33:13,200 --> 00:33:14,960
are going to do going to do is we will

762
00:33:14,960 --> 00:33:18,720
use that command line tool app cmd.xz

763
00:33:18,720 --> 00:33:21,919
to remove that one malicious module

764
00:33:21,919 --> 00:33:24,000
so this would be when we already know

765
00:33:24,000 --> 00:33:26,000
the name of the module so where it's

766
00:33:26,000 --> 00:33:28,960
installed so in our case it's this is

767
00:33:28,960 --> 00:33:30,159
backdoor

768
00:33:30,159 --> 00:33:32,720
and you need to be admin uh to remove

769
00:33:32,720 --> 00:33:35,360
such native is module but you don't need

770
00:33:35,360 --> 00:33:37,919
to reboot the server afterwards so it's

771
00:33:37,919 --> 00:33:40,399
really just this one command

772
00:33:40,399 --> 00:33:43,200
so let's check the list of the modules

773
00:33:43,200 --> 00:33:45,200
and we can see that this backdoor is no

774
00:33:45,200 --> 00:33:46,720
longer there

775
00:33:46,720 --> 00:33:50,000
and one more check we want to do is

776
00:33:50,000 --> 00:33:52,240
check whether this malware is not

777
00:33:52,240 --> 00:33:54,240
running somewhere in the background so

778
00:33:54,240 --> 00:33:57,039
we will use that same attacker request

779
00:33:57,039 --> 00:33:59,679
that we sent previously and we'll check

780
00:33:59,679 --> 00:34:03,120
the response for that special header

781
00:34:03,120 --> 00:34:05,120
and we have the response from the server

782
00:34:05,120 --> 00:34:06,559
where we can see that there is no

783
00:34:06,559 --> 00:34:09,440
special handler embedded so indeed this

784
00:34:09,440 --> 00:34:13,119
malware was successfully removed

785
00:34:13,119 --> 00:34:15,280
uh you probably still want to check the

786
00:34:15,280 --> 00:34:17,839
server for any additional malware and

787
00:34:17,839 --> 00:34:20,639
make sure to pass your os and software

788
00:34:20,639 --> 00:34:22,800
and change your admin passwords just to

789
00:34:22,800 --> 00:34:26,399
make sure you won't get reinfected again

790
00:34:26,399 --> 00:34:29,599
but these were the basics and

791
00:34:29,599 --> 00:34:32,320
finally here are some thoughts on how

792
00:34:32,320 --> 00:34:34,639
you can prevent being compromised with

793
00:34:34,639 --> 00:34:37,520
such malware so one thing you should

794
00:34:37,520 --> 00:34:40,159
know is that the attackers also need

795
00:34:40,159 --> 00:34:42,879
admin rights to install native is

796
00:34:42,879 --> 00:34:44,879
malware just like we needed it to

797
00:34:44,879 --> 00:34:47,679
uninstall it so together with the fact

798
00:34:47,679 --> 00:34:50,239
that these are server threats that

799
00:34:50,239 --> 00:34:52,800
narrows down the candidates for initial

800
00:34:52,800 --> 00:34:54,399
compromise

801
00:34:54,399 --> 00:34:55,918
so we're not talking about phishing

802
00:34:55,918 --> 00:34:58,400
emails here but what we are trying to

803
00:34:58,400 --> 00:35:02,000
prevent are scenarios such as server

804
00:35:02,000 --> 00:35:05,359
exploitation or installing trojanized

805
00:35:05,359 --> 00:35:08,800
iis modules or just rope modules in

806
00:35:08,800 --> 00:35:10,400
general

807
00:35:10,400 --> 00:35:13,680
so try to prevent your exploitation by

808
00:35:13,680 --> 00:35:16,320
keeping your server up to date and also

809
00:35:16,320 --> 00:35:18,560
by keeping separate accounts for

810
00:35:18,560 --> 00:35:22,079
administration with strong passwords

811
00:35:22,079 --> 00:35:24,480
consider using a web application

812
00:35:24,480 --> 00:35:27,040
firewall or endpoint security solution

813
00:35:27,040 --> 00:35:28,480
on the server

814
00:35:28,480 --> 00:35:30,960
because still a lot of is servers don't

815
00:35:30,960 --> 00:35:33,280
use any security solution and

816
00:35:33,280 --> 00:35:35,440
unfortunately that helps the attackers

817
00:35:35,440 --> 00:35:38,800
to stay under cover for longer

818
00:35:38,800 --> 00:35:41,040
but even if you don't use any security

819
00:35:41,040 --> 00:35:43,920
solution at least make sure to only ever

820
00:35:43,920 --> 00:35:49,040
install ios modules from trusted sources

821
00:35:49,359 --> 00:35:51,200
and that brings me to the end of this

822
00:35:51,200 --> 00:35:53,760
session so let's summarize it quickly

823
00:35:53,760 --> 00:35:56,839
and let's leave you with some useful

824
00:35:56,839 --> 00:35:58,720
resources

825
00:35:58,720 --> 00:36:01,839
so first of all as we discussed is

826
00:36:01,839 --> 00:36:04,320
malware may be outside of the public

827
00:36:04,320 --> 00:36:06,960
interest but it's very much active and

828
00:36:06,960 --> 00:36:10,839
it's used for both cyber crime and cyber

829
00:36:10,839 --> 00:36:13,680
espionage we have put together a guide

830
00:36:13,680 --> 00:36:16,480
that you can use to reverse engineer and

831
00:36:16,480 --> 00:36:19,520
understand malicious ios modules and

832
00:36:19,520 --> 00:36:21,839
that paper will soon be available at the

833
00:36:21,839 --> 00:36:24,400
blackhead website so make sure to grab a

834
00:36:24,400 --> 00:36:26,800
copy if you're interested in the topic

835
00:36:26,800 --> 00:36:30,240
or if you ever need to analyze any is

836
00:36:30,240 --> 00:36:31,680
malware

837
00:36:31,680 --> 00:36:34,640
and finally we have shared year rules to

838
00:36:34,640 --> 00:36:37,520
detect those 14 malware families that we

839
00:36:37,520 --> 00:36:40,240
analyze and also the iocs so if you're a

840
00:36:40,240 --> 00:36:42,560
defender you can obtain these from our

841
00:36:42,560 --> 00:36:45,520
github repository

842
00:36:45,520 --> 00:36:47,680
and with that thank you very much for

843
00:36:47,680 --> 00:36:50,079
watching today and this is the time

844
00:36:50,079 --> 00:36:52,000
where i will answer your questions if

845
00:36:52,000 --> 00:36:53,760
you have any

846
00:36:53,760 --> 00:36:56,400
thank you

