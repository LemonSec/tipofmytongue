1
00:00:01,130 --> 00:00:14,320
[Music]

2
00:00:14,320 --> 00:00:17,840
hello blackett usa 2021 uh

3
00:00:17,840 --> 00:00:19,760
today we're going to talk about mfang

4
00:00:19,760 --> 00:00:22,560
dan mfabel protecting off system core

5
00:00:22,560 --> 00:00:24,800
secrets so thank you for being here my

6
00:00:24,800 --> 00:00:28,080
name is tal berry and i'm co-founder for

7
00:00:28,080 --> 00:00:30,800
xango and i'm families and i'm a

8
00:00:30,800 --> 00:00:33,360
cryptography researcher at xango

9
00:00:33,360 --> 00:00:34,719
okay so

10
00:00:34,719 --> 00:00:37,200
xango is a easy and secure crypto

11
00:00:37,200 --> 00:00:40,160
experience a mobile application

12
00:00:40,160 --> 00:00:41,840
you can download from

13
00:00:41,840 --> 00:00:43,440
your mobile stores

14
00:00:43,440 --> 00:00:44,399
and

15
00:00:44,399 --> 00:00:47,039
the special thing about xango we are

16
00:00:47,039 --> 00:00:49,600
operating and putting to use some

17
00:00:49,600 --> 00:00:52,000
advanced cryptographic

18
00:00:52,000 --> 00:00:55,920
protocols uh novel ones that are very

19
00:00:55,920 --> 00:00:58,640
much relevant to the topic of this talk

20
00:00:58,640 --> 00:01:00,640
and we'll show you how

21
00:01:00,640 --> 00:01:02,320
so what are we going to talk about today

22
00:01:02,320 --> 00:01:04,879
we'll start with sunburst incident give

23
00:01:04,879 --> 00:01:06,560
some context

24
00:01:06,560 --> 00:01:08,880
to it and then move quickly to the

25
00:01:08,880 --> 00:01:11,680
golden summer persistent attack

26
00:01:11,680 --> 00:01:13,920
will start don't worry if you don't know

27
00:01:13,920 --> 00:01:16,159
how someone works we will talk about

28
00:01:16,159 --> 00:01:18,080
that you will know how someone works and

29
00:01:18,080 --> 00:01:20,799
then we'll talk about how attackers can

30
00:01:20,799 --> 00:01:23,119
abuse that uh

31
00:01:23,119 --> 00:01:24,960
summon functionality to create the

32
00:01:24,960 --> 00:01:27,759
golden samuel persistent attack then

33
00:01:27,759 --> 00:01:30,320
we'll talk about solving golder summer

34
00:01:30,320 --> 00:01:33,119
we'll start with the detailing

35
00:01:33,119 --> 00:01:34,400
the

36
00:01:34,400 --> 00:01:36,640
mfa multi-factor authentication which we

37
00:01:36,640 --> 00:01:38,240
think is a good reference for a good

38
00:01:38,240 --> 00:01:41,040
solution we will great we'll show the

39
00:01:41,040 --> 00:01:43,360
current solution for the problem and

40
00:01:43,360 --> 00:01:45,280
they'll talk about their limitation and

41
00:01:45,280 --> 00:01:48,159
then suggest our novel solution based on

42
00:01:48,159 --> 00:01:50,479
that advanced cryptographic techniques

43
00:01:50,479 --> 00:01:52,640
that we use in our crypto wallet then

44
00:01:52,640 --> 00:01:54,880
matan will show you our exact solution

45
00:01:54,880 --> 00:01:56,960
including a demo so stay for that and

46
00:01:56,960 --> 00:01:59,119
we'll conclude with some takeaway and q

47
00:01:59,119 --> 00:02:01,600
a so sunburst it seems like every year

48
00:02:01,600 --> 00:02:04,640
it has its flagship bridge security

49
00:02:04,640 --> 00:02:08,000
incident so this year this was sunburst

50
00:02:08,000 --> 00:02:10,959
and in sunburst and an advanced

51
00:02:10,959 --> 00:02:12,480
persistent threat according to white

52
00:02:12,480 --> 00:02:13,360
house

53
00:02:13,360 --> 00:02:15,440
russian intelligence services targeted

54
00:02:15,440 --> 00:02:18,239
high-profile u.s government agency

55
00:02:18,239 --> 00:02:21,280
while most focus on the advanced aspect

56
00:02:21,280 --> 00:02:22,720
of the

57
00:02:22,720 --> 00:02:25,440
of this attack the a in apt the supply

58
00:02:25,440 --> 00:02:28,160
chain compromise on a solar winds that

59
00:02:28,160 --> 00:02:30,800
gave the attack its name sunburst want

60
00:02:30,800 --> 00:02:33,519
to focus on another aspect of it of it

61
00:02:33,519 --> 00:02:35,120
being persistent

62
00:02:35,120 --> 00:02:38,080
so what does it mean persistence uh we

63
00:02:38,080 --> 00:02:40,080
often think only of the attacker is

64
00:02:40,080 --> 00:02:41,519
persistent

65
00:02:41,519 --> 00:02:44,319
this is the p in apt however

66
00:02:44,319 --> 00:02:47,760
often apt attackers meet apt target at

67
00:02:47,760 --> 00:02:49,519
one persistent target both sides are

68
00:02:49,519 --> 00:02:51,760
advanced they have the budget

69
00:02:51,760 --> 00:02:52,720
they have

70
00:02:52,720 --> 00:02:54,640
the knowledge and both sides are

71
00:02:54,640 --> 00:02:57,040
persistent uh

72
00:02:57,040 --> 00:02:59,040
for all the foreseeable future we can

73
00:02:59,040 --> 00:03:00,239
assume that

74
00:03:00,239 --> 00:03:02,319
russian services will continue to be

75
00:03:02,319 --> 00:03:04,319
interested in what certain u.s

76
00:03:04,319 --> 00:03:06,480
government agencies are doing and the

77
00:03:06,480 --> 00:03:09,040
youth government agencies the same one

78
00:03:09,040 --> 00:03:10,800
are aware that

79
00:03:10,800 --> 00:03:13,519
there are some attackers targeting them

80
00:03:13,519 --> 00:03:16,239
but they need to keep on working and

81
00:03:16,239 --> 00:03:17,360
need to

82
00:03:17,360 --> 00:03:20,319
find these intrusions and deflect them

83
00:03:20,319 --> 00:03:22,800
and this game of catamounts goes on and

84
00:03:22,800 --> 00:03:25,840
on the game is never over

85
00:03:25,840 --> 00:03:27,519
and so what does it mean for the

86
00:03:27,519 --> 00:03:29,920
attacker they know from the get-go that

87
00:03:29,920 --> 00:03:32,319
they're going to be exposed yet they

88
00:03:32,319 --> 00:03:35,599
need to return to the same target and

89
00:03:35,599 --> 00:03:37,840
mitra defined this

90
00:03:37,840 --> 00:03:40,159
persistence as a tactic

91
00:03:40,159 --> 00:03:42,799
a higher hierarchy that includes all

92
00:03:42,799 --> 00:03:44,560
kind of

93
00:03:44,560 --> 00:03:46,400
techniques so persistence consists of

94
00:03:46,400 --> 00:03:48,480
techniques that other cells use to keep

95
00:03:48,480 --> 00:03:50,879
access to system and a popular way for

96
00:03:50,879 --> 00:03:53,680
attackers to maintain that persistence

97
00:03:53,680 --> 00:03:56,239
is by targeting the targets long-term

98
00:03:56,239 --> 00:03:59,200
secrets so in the past was mostly single

99
00:03:59,200 --> 00:04:01,200
factor password

100
00:04:01,200 --> 00:04:03,040
because attackers

101
00:04:03,040 --> 00:04:04,159
while they're

102
00:04:04,159 --> 00:04:06,560
installing malware on the infected on

103
00:04:06,560 --> 00:04:08,879
the victim environment they try to grab

104
00:04:08,879 --> 00:04:09,760
also

105
00:04:09,760 --> 00:04:12,159
plaintext password because they know

106
00:04:12,159 --> 00:04:14,400
that when they get discovered the

107
00:04:14,400 --> 00:04:16,639
malware will be wiped out it could be

108
00:04:16,639 --> 00:04:18,880
that the password will would remain so

109
00:04:18,880 --> 00:04:21,440
this enables them maybe to get access

110
00:04:21,440 --> 00:04:23,440
again because they can use the remote

111
00:04:23,440 --> 00:04:25,600
access of that company let's say they

112
00:04:25,600 --> 00:04:28,400
have vpn to get back or even if it's not

113
00:04:28,400 --> 00:04:31,120
possible once the attackers regain a

114
00:04:31,120 --> 00:04:33,759
foothold within that environment they

115
00:04:33,759 --> 00:04:35,919
are able to return quickly return to the

116
00:04:35,919 --> 00:04:39,120
assets that they once had the access to

117
00:04:39,120 --> 00:04:41,360
and not start from a

118
00:04:41,360 --> 00:04:44,479
square one using this password however

119
00:04:44,479 --> 00:04:46,479
this

120
00:04:46,479 --> 00:04:49,120
attack vector was largely mitigated by

121
00:04:49,120 --> 00:04:50,400
the use of the multi-factor

122
00:04:50,400 --> 00:04:53,040
authentication again it's not present in

123
00:04:53,040 --> 00:04:55,919
every victim but we can assume that in

124
00:04:55,919 --> 00:04:58,960
advances target that or they already

125
00:04:58,960 --> 00:05:00,960
deployed mfa

126
00:05:00,960 --> 00:05:01,919
and

127
00:05:01,919 --> 00:05:03,440
as a result

128
00:05:03,440 --> 00:05:06,240
this is no longer a valid persistent

129
00:05:06,240 --> 00:05:08,160
method for the attacker so they need to

130
00:05:08,160 --> 00:05:09,199
come up with something more

131
00:05:09,199 --> 00:05:11,120
sophisticated and of course because

132
00:05:11,120 --> 00:05:12,960
they're advanced and persistent they do

133
00:05:12,960 --> 00:05:14,479
and so such

134
00:05:14,479 --> 00:05:16,320
so they target keys you

135
00:05:16,320 --> 00:05:18,479
that are used by the victim to generate

136
00:05:18,479 --> 00:05:20,240
access token so

137
00:05:20,240 --> 00:05:22,479
one example is the kerberos captivity

138
00:05:22,479 --> 00:05:24,400
and the golden ticket attack and another

139
00:05:24,400 --> 00:05:26,160
example that we are going to focus on

140
00:05:26,160 --> 00:05:27,919
today is the summer private key and the

141
00:05:27,919 --> 00:05:30,160
golden summon attack so let's talk about

142
00:05:30,160 --> 00:05:31,680
golden summer

143
00:05:31,680 --> 00:05:33,440
and before we talk about golden summon

144
00:05:33,440 --> 00:05:35,600
we have to understand how summer works

145
00:05:35,600 --> 00:05:37,680
so modern corporate environment are

146
00:05:37,680 --> 00:05:40,160
comprised of many web services served by

147
00:05:40,160 --> 00:05:42,160
different vendors for example we use

148
00:05:42,160 --> 00:05:45,440
github for to manage our code and we use

149
00:05:45,440 --> 00:05:47,840
jira to manage our project and g suite

150
00:05:47,840 --> 00:05:50,479
for email and so on and so forth and

151
00:05:50,479 --> 00:05:52,479
each service has its own authentication

152
00:05:52,479 --> 00:05:55,440
solution which creates a huge a headache

153
00:05:55,440 --> 00:05:57,360
for the id and security department

154
00:05:57,360 --> 00:05:59,440
because let's say we have 20 different

155
00:05:59,440 --> 00:06:02,240
services so for every new user

156
00:06:02,240 --> 00:06:04,800
it has to uh

157
00:06:04,800 --> 00:06:07,919
to create 20 different accounts in every

158
00:06:07,919 --> 00:06:09,600
service and then

159
00:06:09,600 --> 00:06:12,400
create passwords so you will create a

160
00:06:12,400 --> 00:06:15,199
unique password or we reuse password

161
00:06:15,199 --> 00:06:17,039
both options and has their own

162
00:06:17,039 --> 00:06:19,120
limitation what happens if we want to

163
00:06:19,120 --> 00:06:22,160
update someone someone changed it all or

164
00:06:22,160 --> 00:06:25,840
got fired etc so it's a big headache and

165
00:06:25,840 --> 00:06:29,440
in order to solve that problem uh

166
00:06:29,440 --> 00:06:30,800
organization

167
00:06:30,800 --> 00:06:32,720
had to agree on a standard

168
00:06:32,720 --> 00:06:35,280
called saml which is security assertion

169
00:06:35,280 --> 00:06:38,800
markup language that enables

170
00:06:38,800 --> 00:06:41,199
to extract that functionality of user

171
00:06:41,199 --> 00:06:43,680
management out of the service providers

172
00:06:43,680 --> 00:06:46,560
the sps for example as we said jira

173
00:06:46,560 --> 00:06:50,160
github and g suite and so on and put in

174
00:06:50,160 --> 00:06:52,479
a centralized place in an identity

175
00:06:52,479 --> 00:06:53,680
provider

176
00:06:53,680 --> 00:06:54,560
and

177
00:06:54,560 --> 00:06:56,240
just to give you a test

178
00:06:56,240 --> 00:06:58,639
of some analogies i hope it will be

179
00:06:58,639 --> 00:07:01,360
helpful maybe you are aware as a user of

180
00:07:01,360 --> 00:07:04,720
the signing with functionality that

181
00:07:04,720 --> 00:07:06,560
enables you for example instead of

182
00:07:06,560 --> 00:07:08,560
creating a new account in

183
00:07:08,560 --> 00:07:10,880
for a new service you can just reuse

184
00:07:10,880 --> 00:07:11,680
your

185
00:07:11,680 --> 00:07:13,680
credentials from

186
00:07:13,680 --> 00:07:14,800
from

187
00:07:14,800 --> 00:07:17,520
google and sign in with a google or

188
00:07:17,520 --> 00:07:20,319
facebook and so on so this is it's not

189
00:07:20,319 --> 00:07:21,840
the same standard it's different

190
00:07:21,840 --> 00:07:24,960
standard but kind of the same motivation

191
00:07:24,960 --> 00:07:28,000
or if you're coming from a it security

192
00:07:28,000 --> 00:07:30,479
and on-prem security and i.t you can

193
00:07:30,479 --> 00:07:32,160
think of saml as the web version of

194
00:07:32,160 --> 00:07:33,680
kerberos so i hope one of these

195
00:07:33,680 --> 00:07:36,479
analogies work for you but if not let's

196
00:07:36,479 --> 00:07:38,720
explain explicitly what is summer so

197
00:07:38,720 --> 00:07:39,599
let's

198
00:07:39,599 --> 00:07:42,000
say we have someone configured

199
00:07:42,000 --> 00:07:43,280
and i'm

200
00:07:43,280 --> 00:07:44,479
i use my

201
00:07:44,479 --> 00:07:47,759
corporate email talentzengo.com

202
00:07:47,759 --> 00:07:50,960
in order to log into github so because

203
00:07:50,960 --> 00:07:51,599
of

204
00:07:51,599 --> 00:07:53,840
my it administrator i'd already

205
00:07:53,840 --> 00:07:56,720
configured summer for a github then

206
00:07:56,720 --> 00:08:00,319
github recognized that i'm coming from a

207
00:08:00,319 --> 00:08:03,520
from xango based on my domain and

208
00:08:03,520 --> 00:08:06,000
instead of showing me

209
00:08:06,000 --> 00:08:08,720
the password

210
00:08:08,720 --> 00:08:10,840
text box it

211
00:08:10,840 --> 00:08:15,360
uh it goes to the summer definitions uh

212
00:08:15,360 --> 00:08:18,800
that my administrator had pre-configured

213
00:08:18,800 --> 00:08:20,400
it also

214
00:08:20,400 --> 00:08:22,160
pre-configured a public key that we'll

215
00:08:22,160 --> 00:08:24,319
talk about and that now redirects my

216
00:08:24,319 --> 00:08:27,120
browser directly to my idp my identity

217
00:08:27,120 --> 00:08:29,919
provider so in the database provider it

218
00:08:29,919 --> 00:08:31,759
can take

219
00:08:31,759 --> 00:08:34,559
decisions about my authentication based

220
00:08:34,559 --> 00:08:35,360
on

221
00:08:35,360 --> 00:08:38,080
the rules that the it administrator had

222
00:08:38,080 --> 00:08:40,159
created for example let's say github is

223
00:08:40,159 --> 00:08:42,000
a very sensitive system so i need to do

224
00:08:42,000 --> 00:08:44,480
a three factor authentication however it

225
00:08:44,480 --> 00:08:47,120
sees that i just connected

226
00:08:47,120 --> 00:08:49,600
two minutes ago to jira and performed

227
00:08:49,600 --> 00:08:52,240
that mfa as a three factor

228
00:08:52,240 --> 00:08:54,640
authentication so maybe i can it can be

229
00:08:54,640 --> 00:08:57,040
reused and i don't need to do it anyway

230
00:08:57,040 --> 00:08:59,040
once i pass the

231
00:08:59,040 --> 00:09:00,880
authentication phase

232
00:09:00,880 --> 00:09:03,279
the idp generates sml token which is a

233
00:09:03,279 --> 00:09:05,120
fancy name for xml with security

234
00:09:05,120 --> 00:09:07,440
assertion that will show you some

235
00:09:07,440 --> 00:09:09,519
screenshots of it on the next slide and

236
00:09:09,519 --> 00:09:12,480
it includes all kind of details uh about

237
00:09:12,480 --> 00:09:16,240
my name my email oh and the roles i use

238
00:09:16,240 --> 00:09:18,399
everything that the sp the service

239
00:09:18,399 --> 00:09:20,720
provider needs in order to

240
00:09:20,720 --> 00:09:22,720
show me the site correctly

241
00:09:22,720 --> 00:09:25,920
and then the idp signs the summer with

242
00:09:25,920 --> 00:09:28,800
its private key to prove it on

243
00:09:28,800 --> 00:09:30,720
authenticity and we'll talk about that

244
00:09:30,720 --> 00:09:33,600
in detail in the rest of this uh talk

245
00:09:33,600 --> 00:09:35,600
then send the summon token to the user

246
00:09:35,600 --> 00:09:38,800
or more exactly precisely to

247
00:09:38,800 --> 00:09:41,519
my browser and redirect me back to the

248
00:09:41,519 --> 00:09:43,519
sp back to github

249
00:09:43,519 --> 00:09:45,680
and so before i go to github i'll just

250
00:09:45,680 --> 00:09:48,640
show you some xml examples or this this

251
00:09:48,640 --> 00:09:50,480
summer as you can see it's an xml

252
00:09:50,480 --> 00:09:52,320
something it's there the upper

253
00:09:52,320 --> 00:09:54,560
screenshot is the signature and the low

254
00:09:54,560 --> 00:09:57,440
part is some attributes on my user for

255
00:09:57,440 --> 00:10:00,000
example i'm a member and student in some

256
00:10:00,000 --> 00:10:00,959
system

257
00:10:00,959 --> 00:10:03,200
and when github the service provider

258
00:10:03,200 --> 00:10:05,760
gets back that summer served by my

259
00:10:05,760 --> 00:10:09,120
browser then it first verifies the

260
00:10:09,120 --> 00:10:11,120
signature based on the pre-configured

261
00:10:11,120 --> 00:10:12,560
public key of

262
00:10:12,560 --> 00:10:15,279
my domain and then acts according to the

263
00:10:15,279 --> 00:10:17,040
security assertion let's say i'm a

264
00:10:17,040 --> 00:10:19,200
student and i'm a member

265
00:10:19,200 --> 00:10:22,000
so in a high level let's sum it up a

266
00:10:22,000 --> 00:10:24,560
summer token can be likened to a permit

267
00:10:24,560 --> 00:10:27,519
and the idp has a stamp and one is once

268
00:10:27,519 --> 00:10:28,880
it stems

269
00:10:28,880 --> 00:10:31,680
the that permit then

270
00:10:31,680 --> 00:10:34,800
as a user i can present it to my

271
00:10:34,800 --> 00:10:37,040
sps my service providers and get access

272
00:10:37,040 --> 00:10:38,480
to

273
00:10:38,480 --> 00:10:40,640
and as we saw like

274
00:10:40,640 --> 00:10:43,360
what enables saml to do all this good

275
00:10:43,360 --> 00:10:46,800
stuff it's the decoupling of removing

276
00:10:46,800 --> 00:10:49,680
some certain functionality out of sps

277
00:10:49,680 --> 00:10:51,680
and putting it in

278
00:10:51,680 --> 00:10:54,560
in the idp that enable us single sign-on

279
00:10:54,560 --> 00:10:56,880
multi-factor authentication mfa user

280
00:10:56,880 --> 00:10:59,680
details in one place so it can be easily

281
00:10:59,680 --> 00:11:02,399
updateable and also sp and idp do not

282
00:11:02,399 --> 00:11:05,680
talk directly only via the user browser

283
00:11:05,680 --> 00:11:08,640
so again less coupling we can change

284
00:11:08,640 --> 00:11:11,120
each of them in a very easy way

285
00:11:11,120 --> 00:11:13,760
and the only thing that glues

286
00:11:13,760 --> 00:11:17,519
sps and idp together is is the keeper

287
00:11:17,519 --> 00:11:20,959
the private key that is hold in

288
00:11:20,959 --> 00:11:22,480
held in the idp

289
00:11:22,480 --> 00:11:23,360
and

290
00:11:23,360 --> 00:11:25,200
the private key in the idp and the

291
00:11:25,200 --> 00:11:26,959
public key in the service provider so

292
00:11:26,959 --> 00:11:29,040
what happens if attackers steal the

293
00:11:29,040 --> 00:11:31,680
private key so in one sentence

294
00:11:31,680 --> 00:11:34,640
bad things happen very bad things so if

295
00:11:34,640 --> 00:11:37,040
attacker is able to

296
00:11:37,040 --> 00:11:39,440
attack the idp and steal the private key

297
00:11:39,440 --> 00:11:42,480
now they become a rogue idp and they can

298
00:11:42,480 --> 00:11:44,640
sign permits and stamp them however they

299
00:11:44,640 --> 00:11:48,240
want so they can log into any service

300
00:11:48,240 --> 00:11:50,800
services that the victim is using any

301
00:11:50,800 --> 00:11:54,880
sps as any role as any user but it's not

302
00:11:54,880 --> 00:11:56,480
just stopping there

303
00:11:56,480 --> 00:11:58,639
it also there are some more subtle

304
00:11:58,639 --> 00:12:01,200
advantages for the attackers in doing so

305
00:12:01,200 --> 00:12:02,880
by doing so they totally bypass the

306
00:12:02,880 --> 00:12:05,279
original idp security policies so they

307
00:12:05,279 --> 00:12:08,720
but effectively they bypassed mfa

308
00:12:08,720 --> 00:12:12,240
and all of the fancy mfa we have to stop

309
00:12:12,240 --> 00:12:14,880
attackers are not are rendered pretty

310
00:12:14,880 --> 00:12:17,760
much useless because this permit

311
00:12:17,760 --> 00:12:22,000
issuance happens after that stage so

312
00:12:22,000 --> 00:12:24,000
all these fancy ub keys fingerprint

313
00:12:24,000 --> 00:12:27,120
scanning useless to stop the attackers

314
00:12:27,120 --> 00:12:30,160
and also the compensating controls such

315
00:12:30,160 --> 00:12:33,200
as access monitoring uh

316
00:12:33,200 --> 00:12:36,079
if we if as defenders we use the idp

317
00:12:36,079 --> 00:12:39,120
logs to see who connected to where when

318
00:12:39,120 --> 00:12:41,360
and finally is there we wouldn't see the

319
00:12:41,360 --> 00:12:44,160
attacker activity at all there because

320
00:12:44,160 --> 00:12:46,720
it's done after the idp so the idp is

321
00:12:46,720 --> 00:12:48,959
completely blind to it so it adds

322
00:12:48,959 --> 00:12:51,519
stealthness to the attacker's

323
00:12:51,519 --> 00:12:52,399
attack

324
00:12:52,399 --> 00:12:54,880
and the term from this attack

325
00:12:54,880 --> 00:12:57,600
golden summer was coined by cybora

326
00:12:57,600 --> 00:12:59,440
almost four years ago

327
00:12:59,440 --> 00:13:00,480
however

328
00:13:00,480 --> 00:13:02,480
sunburst is the first publicly known use

329
00:13:02,480 --> 00:13:05,360
of the technique in the world

330
00:13:05,360 --> 00:13:07,760
so let's move on to solving golden

331
00:13:07,760 --> 00:13:09,600
summer

332
00:13:09,600 --> 00:13:11,279
before we start solving we have to be

333
00:13:11,279 --> 00:13:13,279
very crisp about the problem definition

334
00:13:13,279 --> 00:13:15,440
we want to solve go that summer which is

335
00:13:15,440 --> 00:13:17,680
a persistent technique want to solve the

336
00:13:17,680 --> 00:13:20,720
offline use of the idp private key in

337
00:13:20,720 --> 00:13:22,800
which attacker gets a time limited

338
00:13:22,800 --> 00:13:24,399
access to idp

339
00:13:24,399 --> 00:13:27,839
and but gets a long term access to a

340
00:13:27,839 --> 00:13:29,839
victim services

341
00:13:29,839 --> 00:13:31,279
by

342
00:13:31,279 --> 00:13:33,519
creating some rock sample token with

343
00:13:33,519 --> 00:13:35,120
this private key

344
00:13:35,120 --> 00:13:37,680
what is autoscope is solving online

345
00:13:37,680 --> 00:13:39,519
integ on idp

346
00:13:39,519 --> 00:13:40,480
if

347
00:13:40,480 --> 00:13:43,680
there is currently a malware on your idp

348
00:13:43,680 --> 00:13:46,560
or attacker's head has some hands-on

349
00:13:46,560 --> 00:13:49,279
keyboard on on that in fact it's an

350
00:13:49,279 --> 00:13:50,880
easier problem that should be solved

351
00:13:50,880 --> 00:13:53,680
with our usual bag of tricks to treat

352
00:13:53,680 --> 00:13:55,519
such kind of problem

353
00:13:55,519 --> 00:13:58,160
all kinds of endpoint security xdr

354
00:13:58,160 --> 00:14:01,360
process whitelist and so on so forth

355
00:14:01,360 --> 00:14:04,639
and as lazy engineers

356
00:14:04,639 --> 00:14:05,440
and

357
00:14:05,440 --> 00:14:08,000
and the lazy engineer is a good engineer

358
00:14:08,000 --> 00:14:09,120
when we are

359
00:14:09,120 --> 00:14:12,399
facing a new problem we try to find like

360
00:14:12,399 --> 00:14:14,560
a reference for it a good reference for

361
00:14:14,560 --> 00:14:16,880
it a good solution that work and as we

362
00:14:16,880 --> 00:14:19,680
saw earlier mfa largely solved password

363
00:14:19,680 --> 00:14:21,839
as persistent mechanism if we want we

364
00:14:21,839 --> 00:14:24,560
can believe in microsoft research they

365
00:14:24,560 --> 00:14:26,800
said it solves 99

366
00:14:26,800 --> 00:14:30,160
99.9 of account compromise with password

367
00:14:30,160 --> 00:14:32,320
or we can just take a look at apta

368
00:14:32,320 --> 00:14:34,000
action and see if they are bothered

369
00:14:34,000 --> 00:14:35,920
enough with mfa that they need to find a

370
00:14:35,920 --> 00:14:36,720
way

371
00:14:36,720 --> 00:14:38,639
some ways to bypass it for example

372
00:14:38,639 --> 00:14:41,760
golden summer so what made mfa a good

373
00:14:41,760 --> 00:14:43,360
solution we think there are four

374
00:14:43,360 --> 00:14:44,639
different elements first is the

375
00:14:44,639 --> 00:14:47,040
composability password is no longer a

376
00:14:47,040 --> 00:14:48,959
single point of failure

377
00:14:48,959 --> 00:14:51,839
secondly the orthogonality the extra

378
00:14:51,839 --> 00:14:55,120
factors are actually different if mfa

379
00:14:55,120 --> 00:14:57,600
was like let's to do

380
00:14:57,600 --> 00:14:59,519
two passwords or three passwords it

381
00:14:59,519 --> 00:15:01,199
would be just more of the same and it

382
00:15:01,199 --> 00:15:03,760
wouldn't be effective scalability

383
00:15:03,760 --> 00:15:05,519
because we know the attackers will keep

384
00:15:05,519 --> 00:15:07,519
coming back we need a way to set the

385
00:15:07,519 --> 00:15:09,440
degree of difficulty and set it higher

386
00:15:09,440 --> 00:15:12,880
if we like so mfa is not about a single

387
00:15:12,880 --> 00:15:15,120
factor we can as defenders we can add

388
00:15:15,120 --> 00:15:16,959
multiple factors multiple different

389
00:15:16,959 --> 00:15:19,680
factors so if one additional is not

390
00:15:19,680 --> 00:15:22,560
enough we can do two or three or change

391
00:15:22,560 --> 00:15:25,199
them so this is scalability and also

392
00:15:25,199 --> 00:15:27,600
short-lived the de facto

393
00:15:27,600 --> 00:15:29,360
value keeps rotating for example if we

394
00:15:29,360 --> 00:15:31,839
take totp like you have in google

395
00:15:31,839 --> 00:15:36,079
authenticator or rsscq id then

396
00:15:36,079 --> 00:15:38,720
this code it changes every

397
00:15:38,720 --> 00:15:40,720
30 seconds so even if attacker gets a

398
00:15:40,720 --> 00:15:43,600
hold of it it gets access for 30 seconds

399
00:15:43,600 --> 00:15:44,720
and no more

400
00:15:44,720 --> 00:15:46,000
so can we

401
00:15:46,000 --> 00:15:48,560
apply this mfa principle to solve the

402
00:15:48,560 --> 00:15:52,240
golden summer can we mfa the un mfabel

403
00:15:52,240 --> 00:15:55,759
as the title of our talk says

404
00:15:55,759 --> 00:15:56,800
but we

405
00:15:56,800 --> 00:15:59,839
before we go into the solu the good

406
00:15:59,839 --> 00:16:02,079
solution that we propose let's uh

407
00:16:02,079 --> 00:16:04,720
consider current solution so sisa the

408
00:16:04,720 --> 00:16:07,279
cyber security agency

409
00:16:07,279 --> 00:16:09,920
in their advisory about uh

410
00:16:09,920 --> 00:16:11,839
detecting

411
00:16:11,839 --> 00:16:13,759
such abuse

412
00:16:13,759 --> 00:16:15,759
directly uh

413
00:16:15,759 --> 00:16:18,079
as a result of a sunburst attack and the

414
00:16:18,079 --> 00:16:19,759
recommendation was

415
00:16:19,759 --> 00:16:22,399
to install an h7 to say an hsm and

416
00:16:22,399 --> 00:16:24,000
cursively updated makes it very

417
00:16:24,000 --> 00:16:25,199
difficult for actors who have

418
00:16:25,199 --> 00:16:26,720
compromised the system to steal the

419
00:16:26,720 --> 00:16:28,720
private key and use them outside of the

420
00:16:28,720 --> 00:16:31,360
network so in theory hsn can solve that

421
00:16:31,360 --> 00:16:32,959
because

422
00:16:32,959 --> 00:16:35,839
hsm can sign

423
00:16:35,839 --> 00:16:38,800
our summer token so it works yet prevent

424
00:16:38,800 --> 00:16:40,880
direct access to the private key there

425
00:16:40,880 --> 00:16:43,360
is no api to get

426
00:16:43,360 --> 00:16:46,639
to get the key it's buried in in the

427
00:16:46,639 --> 00:16:49,440
hardware in theory attackers cannot

428
00:16:49,440 --> 00:16:51,279
take that and use that in an offline

429
00:16:51,279 --> 00:16:53,759
manner so let's grade that

430
00:16:53,759 --> 00:16:55,759
solution based on the criteria we

431
00:16:55,759 --> 00:16:58,079
derived from mfa so composability

432
00:16:58,079 --> 00:17:00,560
private key is still a single point

433
00:17:00,560 --> 00:17:02,959
of failure and if attacker steals that

434
00:17:02,959 --> 00:17:06,640
from the hardware they again become a

435
00:17:06,640 --> 00:17:08,959
rogue idp and nothing

436
00:17:08,959 --> 00:17:11,679
can stop them autogonality

437
00:17:11,679 --> 00:17:13,199
well that's how they were residing in

438
00:17:13,199 --> 00:17:16,079
the same compromise environment as

439
00:17:16,079 --> 00:17:18,720
the idp provide enough resistance

440
00:17:18,720 --> 00:17:20,959
even cisa don't truly believe that they

441
00:17:20,959 --> 00:17:22,480
say you have to

442
00:17:22,480 --> 00:17:24,880
aggressively update

443
00:17:24,880 --> 00:17:27,439
your hsm system because advanced

444
00:17:27,439 --> 00:17:30,080
attackers living in the same environment

445
00:17:30,080 --> 00:17:32,480
as your hsn solution we'll see that the

446
00:17:32,480 --> 00:17:34,320
solution and probably will find

447
00:17:34,320 --> 00:17:37,679
vulnerabilities in in that as ledger

448
00:17:37,679 --> 00:17:40,960
showed in blackhead just two years ago

449
00:17:40,960 --> 00:17:43,919
scalability the solution does not scale

450
00:17:43,919 --> 00:17:47,440
uh if with move the

451
00:17:47,440 --> 00:17:49,600
uh the secret the private key from

452
00:17:49,600 --> 00:17:50,799
software

453
00:17:50,799 --> 00:17:52,799
to hardware okay

454
00:17:52,799 --> 00:17:55,840
this is a good step but if what if it's

455
00:17:55,840 --> 00:17:56,960
not enough

456
00:17:56,960 --> 00:17:59,120
what would be our next step is the how

457
00:17:59,120 --> 00:18:01,600
the world yeah i don't think so so it's

458
00:18:01,600 --> 00:18:03,520
kind of one and done and it's not

459
00:18:03,520 --> 00:18:05,120
suitable for this

460
00:18:05,120 --> 00:18:07,679
cat and mouse games that we have between

461
00:18:07,679 --> 00:18:10,240
attackers and the defenders

462
00:18:10,240 --> 00:18:12,799
and shortly still this is the same

463
00:18:12,799 --> 00:18:15,840
private key as before so it's as long

464
00:18:15,840 --> 00:18:17,760
lived as it was before so it didn't help

465
00:18:17,760 --> 00:18:20,240
with that so i would rate this solution

466
00:18:20,240 --> 00:18:22,640
as a barely passing

467
00:18:22,640 --> 00:18:23,919
solution

468
00:18:23,919 --> 00:18:25,840
it's it's a

469
00:18:25,840 --> 00:18:27,919
it's an improvement but it's not where

470
00:18:27,919 --> 00:18:30,160
we want to be so what would be an ideal

471
00:18:30,160 --> 00:18:31,919
solution what if we can have multiple

472
00:18:31,919 --> 00:18:34,080
signals where each token needs to be

473
00:18:34,080 --> 00:18:36,000
signed by multiple parties and these

474
00:18:36,000 --> 00:18:39,120
parties will be orthogonal for example

475
00:18:39,120 --> 00:18:41,120
one is in the customer network and the

476
00:18:41,120 --> 00:18:43,360
other one in a third-party vendor that

477
00:18:43,360 --> 00:18:45,200
there is no access between this

478
00:18:45,200 --> 00:18:48,080
environment and so let's talk

479
00:18:48,080 --> 00:18:49,840
examine that from the same success

480
00:18:49,840 --> 00:18:51,840
criteria we defined

481
00:18:51,840 --> 00:18:53,600
so compassibility there is no single

482
00:18:53,600 --> 00:18:55,919
point of failure even if attacker steals

483
00:18:55,919 --> 00:18:57,919
one of the private key

484
00:18:57,919 --> 00:19:00,559
does not have access to the others

485
00:19:00,559 --> 00:19:02,640
autogonality environments are totally

486
00:19:02,640 --> 00:19:04,799
orthogonal they are not connected

487
00:19:04,799 --> 00:19:07,520
scalability at scales if

488
00:19:07,520 --> 00:19:08,400
one

489
00:19:08,400 --> 00:19:10,000
if two parties are not enough we can

490
00:19:10,000 --> 00:19:12,160
extend to three parties four parties we

491
00:19:12,160 --> 00:19:14,720
can set the degree of difficulty the way

492
00:19:14,720 --> 00:19:17,919
we want it short-lived well we didn't do

493
00:19:17,919 --> 00:19:20,000
much in that but if it was the only

494
00:19:20,000 --> 00:19:22,559
problem then this was a would have been

495
00:19:22,559 --> 00:19:24,480
a good solution however there is a

496
00:19:24,480 --> 00:19:25,760
problem

497
00:19:25,760 --> 00:19:28,080
and the problem is that that change

498
00:19:28,080 --> 00:19:30,480
requires changes so of course changing

499
00:19:30,480 --> 00:19:32,799
requiring requires changes however we

500
00:19:32,799 --> 00:19:34,880
want the changes to be limited only for

501
00:19:34,880 --> 00:19:38,320
the idp why because in the idp we have

502
00:19:38,320 --> 00:19:41,120
as defenders we have a way to

503
00:19:41,120 --> 00:19:44,000
upgrade it it only depends on us so we

504
00:19:44,000 --> 00:19:46,080
can invest in the resources and we have

505
00:19:46,080 --> 00:19:48,960
the motivation to do so however if we

506
00:19:48,960 --> 00:19:51,200
change a

507
00:19:51,200 --> 00:19:53,039
from a single server to multiple signers

508
00:19:53,039 --> 00:19:54,720
it means we need to change the standard

509
00:19:54,720 --> 00:19:57,280
and modules importantly

510
00:19:57,280 --> 00:19:59,600
make every service provider respect this

511
00:19:59,600 --> 00:20:01,840
new version of the standard which will

512
00:20:01,840 --> 00:20:04,159
take probably many years so it's not

513
00:20:04,159 --> 00:20:07,200
a practical solution so the question is

514
00:20:07,200 --> 00:20:09,840
we have that great theoretical solution

515
00:20:09,840 --> 00:20:12,720
can we have that solution but change

516
00:20:12,720 --> 00:20:14,480
only the idp

517
00:20:14,480 --> 00:20:17,039
and here comes uh some

518
00:20:17,039 --> 00:20:19,679
with modern cryptography magic with

519
00:20:19,679 --> 00:20:22,159
threshold signature scheme tss we can do

520
00:20:22,159 --> 00:20:24,400
that so in tss private key is created in

521
00:20:24,400 --> 00:20:26,240
a truly distributed manner and something

522
00:20:26,240 --> 00:20:28,320
is done in truly distributed manner and

523
00:20:28,320 --> 00:20:30,320
when i say a truly distributed manner

524
00:20:30,320 --> 00:20:32,240
what i mean it means that we're not

525
00:20:32,240 --> 00:20:36,080
creating the key in one single place and

526
00:20:36,080 --> 00:20:37,840
then sending it

527
00:20:37,840 --> 00:20:39,200
splitting it and setting it to the

528
00:20:39,200 --> 00:20:40,799
multiple parties and when they need to

529
00:20:40,799 --> 00:20:43,280
sign they send it back again and reunite

530
00:20:43,280 --> 00:20:45,919
because this wouldn't help because in

531
00:20:45,919 --> 00:20:48,480
certain point of time the private key

532
00:20:48,480 --> 00:20:50,080
will be in one place and attacker can

533
00:20:50,080 --> 00:20:52,960
steal that from that from that place

534
00:20:52,960 --> 00:20:55,600
truly distributed manner means that each

535
00:20:55,600 --> 00:20:57,840
party create their own secret their own

536
00:20:57,840 --> 00:21:00,320
share in tss lingo

537
00:21:00,320 --> 00:21:03,760
and never send it outside of that

538
00:21:03,760 --> 00:21:07,200
environment so uh kegen is probably key

539
00:21:07,200 --> 00:21:09,360
generation is truly distributed and also

540
00:21:09,360 --> 00:21:11,440
signing is done with some kind of

541
00:21:11,440 --> 00:21:13,440
interactive protocol between the parties

542
00:21:13,440 --> 00:21:15,840
that does not involve them

543
00:21:15,840 --> 00:21:19,200
revealing the secrets to one another

544
00:21:19,200 --> 00:21:21,520
and the magic here is although that we

545
00:21:21,520 --> 00:21:22,320
change

546
00:21:22,320 --> 00:21:24,799
key generation assigning the public in

547
00:21:24,799 --> 00:21:27,200
single verification remains the same so

548
00:21:27,200 --> 00:21:29,280
we achieved our goal we only need to

549
00:21:29,280 --> 00:21:31,919
upgrade the idp to support tss however

550
00:21:31,919 --> 00:21:34,640
sps remains the same and we don't need

551
00:21:34,640 --> 00:21:36,480
to change no

552
00:21:36,480 --> 00:21:37,600
not this

553
00:21:37,600 --> 00:21:39,919
the standard neither the

554
00:21:39,919 --> 00:21:43,840
sps implementation and to explain how

555
00:21:43,840 --> 00:21:45,760
it's actually done in the cryptography

556
00:21:45,760 --> 00:21:49,120
level tss for ecdsa which is the uh

557
00:21:49,120 --> 00:21:50,480
elliptical

558
00:21:50,480 --> 00:21:53,520
digital signal signature algorithm that

559
00:21:53,520 --> 00:21:56,480
we use in saml and also in

560
00:21:56,480 --> 00:21:59,039
our cryptocurrency wallet this will take

561
00:21:59,039 --> 00:22:02,159
a few more blackett talks so i included

562
00:22:02,159 --> 00:22:04,799
some reference there for your future for

563
00:22:04,799 --> 00:22:06,799
future reading if you like

564
00:22:06,799 --> 00:22:07,600
uh

565
00:22:07,600 --> 00:22:09,840
however i wanted to

566
00:22:09,840 --> 00:22:11,760
give you some taste and this is inspired

567
00:22:11,760 --> 00:22:14,320
by the late dan kaminsky so i want to

568
00:22:14,320 --> 00:22:17,919
mention him he passed away just a few

569
00:22:17,919 --> 00:22:19,840
months ago in april

570
00:22:19,840 --> 00:22:21,520
and dan kaminski was a prominent

571
00:22:21,520 --> 00:22:23,760
security researcher that most of you

572
00:22:23,760 --> 00:22:25,679
know a lot of contribution to dns

573
00:22:25,679 --> 00:22:28,080
security also but also bitcoin security

574
00:22:28,080 --> 00:22:30,799
and other things and that really

575
00:22:30,799 --> 00:22:32,799
load bearing analogies and specifically

576
00:22:32,799 --> 00:22:34,720
the analogy that i'm going to present to

577
00:22:34,720 --> 00:22:37,120
you so i hope it will be helpful for you

578
00:22:37,120 --> 00:22:40,240
and if not well this one is for you then

579
00:22:40,240 --> 00:22:42,640
so let's talk about easy dlp elliptic

580
00:22:42,640 --> 00:22:45,200
curve discrete discrete log problem

581
00:22:45,200 --> 00:22:47,679
because every asymmetric cryptosystem

582
00:22:47,679 --> 00:22:49,440
requires a heart problem

583
00:22:49,440 --> 00:22:51,120
what we mean in half problem how to

584
00:22:51,120 --> 00:22:53,280
solve without the private key the sk

585
00:22:53,280 --> 00:22:55,200
easy to solve with the private key it

586
00:22:55,200 --> 00:22:57,600
can be verified with the public key so

587
00:22:57,600 --> 00:23:01,280
this is ideal for signing because if we

588
00:23:01,280 --> 00:23:04,240
somehow tie our message to that

589
00:23:04,240 --> 00:23:07,200
a hub problem designer can

590
00:23:07,200 --> 00:23:10,720
solve the problem because they have the

591
00:23:10,720 --> 00:23:13,120
private key and everybody can verify

592
00:23:13,120 --> 00:23:14,720
that because they have the public key

593
00:23:14,720 --> 00:23:16,640
however no one else can solve that

594
00:23:16,640 --> 00:23:18,799
problem because they don't have the

595
00:23:18,799 --> 00:23:21,200
private key and this problem is called

596
00:23:21,200 --> 00:23:24,240
the elliptic curve discrete log problem

597
00:23:24,240 --> 00:23:25,760
and

598
00:23:25,760 --> 00:23:26,480
in

599
00:23:26,480 --> 00:23:28,880
the formula for it is public key equals

600
00:23:28,880 --> 00:23:32,240
a secret key cross product g where g is

601
00:23:32,240 --> 00:23:35,840
a point on the curve

602
00:23:35,840 --> 00:23:37,840
let's try to give that intuition that

603
00:23:37,840 --> 00:23:39,679
load bearing analogy

604
00:23:39,679 --> 00:23:40,400
so

605
00:23:40,400 --> 00:23:42,640
nick sullivan from

606
00:23:42,640 --> 00:23:45,520
cloudflare likened the

607
00:23:45,520 --> 00:23:50,320
crypt a elliptical algebra to be a weird

608
00:23:50,320 --> 00:23:52,799
bizarre billiards game because as you

609
00:23:52,799 --> 00:23:55,360
see in the gif on the right hand side

610
00:23:55,360 --> 00:23:58,720
uh when we add point a to bond b it's

611
00:23:58,720 --> 00:24:01,279
like a billiards game in which we start

612
00:24:01,279 --> 00:24:04,000
shoot the put the ball on point a shoot

613
00:24:04,000 --> 00:24:07,200
towards point b and where it hits the

614
00:24:07,200 --> 00:24:08,480
curve

615
00:24:08,480 --> 00:24:11,039
it bounces back from the edges of this

616
00:24:11,039 --> 00:24:13,279
billiard table of the elliptic curve and

617
00:24:13,279 --> 00:24:14,640
where it hits

618
00:24:14,640 --> 00:24:17,120
the curve again this is the result

619
00:24:17,120 --> 00:24:20,159
and so we can think so to take this

620
00:24:20,159 --> 00:24:22,960
analogy forward icdlp can be considered

621
00:24:22,960 --> 00:24:24,799
as a bizarre billiards game the ball is

622
00:24:24,799 --> 00:24:26,400
placed on point g

623
00:24:26,400 --> 00:24:28,640
and the ball is shot sk time private key

624
00:24:28,640 --> 00:24:30,960
times and ends on point p

625
00:24:30,960 --> 00:24:33,200
and the hardness of the problem

626
00:24:33,200 --> 00:24:35,360
uh assures that no one can tell how many

627
00:24:35,360 --> 00:24:37,279
times the ball was shot

628
00:24:37,279 --> 00:24:39,360
the secret key sk the private key

629
00:24:39,360 --> 00:24:40,400
although

630
00:24:40,400 --> 00:24:42,240
everyone knows the starting point g and

631
00:24:42,240 --> 00:24:45,279
the end point p so the question here is

632
00:24:45,279 --> 00:24:46,480
can we

633
00:24:46,480 --> 00:24:48,880
make it this problem to be distributed

634
00:24:48,880 --> 00:24:51,840
can we have two players or three players

635
00:24:51,840 --> 00:24:52,799
uh

636
00:24:52,799 --> 00:24:54,960
in this game and the answer we can make

637
00:24:54,960 --> 00:24:58,080
it a doubles game how we make a

638
00:24:58,080 --> 00:25:00,799
bizarro uh

639
00:25:00,799 --> 00:25:02,000
elliptical

640
00:25:02,000 --> 00:25:04,480
periodic game doubles game so we start

641
00:25:04,480 --> 00:25:06,400
as in before the ball is placed on point

642
00:25:06,400 --> 00:25:09,279
g the ball shot sk one times and ends on

643
00:25:09,279 --> 00:25:13,120
point the p1 so up until this point it

644
00:25:13,120 --> 00:25:15,039
is exactly the same now enters the

645
00:25:15,039 --> 00:25:17,679
second player and the second because

646
00:25:17,679 --> 00:25:19,679
this is a hard problem the

647
00:25:19,679 --> 00:25:22,240
second player cannot know what is sk1

648
00:25:22,240 --> 00:25:24,320
although we see the static point and the

649
00:25:24,320 --> 00:25:27,039
ending point and then this player starts

650
00:25:27,039 --> 00:25:30,400
shooting from that point onward sk2 time

651
00:25:30,400 --> 00:25:32,960
and as we can see in this formula it

652
00:25:32,960 --> 00:25:35,760
actually comes down that

653
00:25:35,760 --> 00:25:39,360
now the new public ep is actually equals

654
00:25:39,360 --> 00:25:42,880
sk1 times sk2 cost product

655
00:25:42,880 --> 00:25:44,640
with a g

656
00:25:44,640 --> 00:25:48,080
which effectively means that each

657
00:25:48,080 --> 00:25:50,159
party each player has their own private

658
00:25:50,159 --> 00:25:51,840
key however

659
00:25:51,840 --> 00:25:54,960
we have equivalent private key private

660
00:25:54,960 --> 00:25:56,559
key

661
00:25:56,559 --> 00:26:00,240
sk that is the multiplication of sk1 and

662
00:26:00,240 --> 00:26:01,679
sk2

663
00:26:01,679 --> 00:26:05,039
and i hope you are convinced the or you

664
00:26:05,039 --> 00:26:06,960
have the intuition why acdrp is still

665
00:26:06,960 --> 00:26:08,799
out of a multiple player

666
00:26:08,799 --> 00:26:11,600
and we can get a very nice feature out

667
00:26:11,600 --> 00:26:13,039
of this

668
00:26:13,039 --> 00:26:16,159
construction because now sk is not

669
00:26:16,159 --> 00:26:18,720
atomic is the multiplication of

670
00:26:18,720 --> 00:26:21,279
these two sure sk1 and sk2 so as

671
00:26:21,279 --> 00:26:24,000
defenders we can change sk1 for example

672
00:26:24,000 --> 00:26:27,120
multiply it by factor of a and multiply

673
00:26:27,120 --> 00:26:28,000
uh

674
00:26:28,000 --> 00:26:30,320
the second fact the second chart sk2 by

675
00:26:30,320 --> 00:26:32,720
the inverse of it and still maintain the

676
00:26:32,720 --> 00:26:36,080
same equivalent private key and the same

677
00:26:36,080 --> 00:26:38,640
equivalent of course publicly however

678
00:26:38,640 --> 00:26:40,960
the representation of this shares are

679
00:26:40,960 --> 00:26:44,159
changed so if attackers

680
00:26:44,159 --> 00:26:46,960
get a hold of sk1

681
00:26:46,960 --> 00:26:50,159
once we rotate it's no longer valid

682
00:26:50,159 --> 00:26:54,080
within the system so the secrets become

683
00:26:54,080 --> 00:26:55,600
short-lived

684
00:26:55,600 --> 00:26:57,360
and how do we know that all of this

685
00:26:57,360 --> 00:27:00,000
works and it's not just you know crypto

686
00:27:00,000 --> 00:27:02,559
theory we know that because it's backed

687
00:27:02,559 --> 00:27:04,240
in into a product that is used by

688
00:27:04,240 --> 00:27:06,640
hundreds of thousands of users every day

689
00:27:06,640 --> 00:27:09,200
to send millions of dollars off of

690
00:27:09,200 --> 00:27:11,440
cryptocurrency and we've been doing that

691
00:27:11,440 --> 00:27:12,880
for the last uh

692
00:27:12,880 --> 00:27:15,200
three years and that enablers are used

693
00:27:15,200 --> 00:27:16,960
to buy stock trade than our crypto in a

694
00:27:16,960 --> 00:27:19,039
tab so we know it works we know it work

695
00:27:19,039 --> 00:27:21,679
well well it works securely and

696
00:27:21,679 --> 00:27:24,000
we know it's efficient and we are

697
00:27:24,000 --> 00:27:26,880
in the construction of our wallet uh

698
00:27:26,880 --> 00:27:28,640
because as you know

699
00:27:28,640 --> 00:27:31,120
cryptocurrency requires uh

700
00:27:31,120 --> 00:27:33,120
that each

701
00:27:33,120 --> 00:27:35,600
new customer of the wallet has its own

702
00:27:35,600 --> 00:27:38,880
private key and so we created in the tss

703
00:27:38,880 --> 00:27:41,679
threshold signature way in which one

704
00:27:41,679 --> 00:27:43,760
share is created on the

705
00:27:43,760 --> 00:27:45,679
customer device and the other share is

706
00:27:45,679 --> 00:27:48,640
cut is created on our own server and we

707
00:27:48,640 --> 00:27:51,200
solve all the practical uh solution

708
00:27:51,200 --> 00:27:53,279
around that and it worked perfectly for

709
00:27:53,279 --> 00:27:56,559
the last three years so to sum up summer

710
00:27:56,559 --> 00:28:00,080
flow original summer flow is one step

711
00:28:00,080 --> 00:28:03,200
on a permit that is provided to service

712
00:28:03,200 --> 00:28:04,399
providers

713
00:28:04,399 --> 00:28:08,000
now with tss we were able to distribute

714
00:28:08,000 --> 00:28:11,120
that stamp into multiple stamps however

715
00:28:11,120 --> 00:28:12,960
the result the signatures looks the same

716
00:28:12,960 --> 00:28:15,200
to the outside world to sp so we can

717
00:28:15,200 --> 00:28:17,520
have multiple signers without changing

718
00:28:17,520 --> 00:28:19,120
the standard and without changing the

719
00:28:19,120 --> 00:28:21,520
sps only the idp so

720
00:28:21,520 --> 00:28:24,159
let's give a score to our solution so

721
00:28:24,159 --> 00:28:25,600
composability private key becomes

722
00:28:25,600 --> 00:28:27,679
decentralized and no longer a single

723
00:28:27,679 --> 00:28:29,200
point of failure

724
00:28:29,200 --> 00:28:30,960
orthogonality it shall reside on a

725
00:28:30,960 --> 00:28:32,559
totally different environment

726
00:28:32,559 --> 00:28:34,559
scalability number of parts is scalable

727
00:28:34,559 --> 00:28:36,960
if two are not enough for you why not

728
00:28:36,960 --> 00:28:40,159
three or four we can set the difficulty

729
00:28:40,159 --> 00:28:42,000
the way we like it and shortly because

730
00:28:42,000 --> 00:28:43,760
shares can be rotated without changing

731
00:28:43,760 --> 00:28:45,679
the main secret they become short-lived

732
00:28:45,679 --> 00:28:48,880
so this is indeed an excellent solution

733
00:28:48,880 --> 00:28:51,200
in the sense of the criteria we are

734
00:28:51,200 --> 00:28:54,799
derived from mfa so with that i want to

735
00:28:54,799 --> 00:28:57,279
invite matan to stay to show you the

736
00:28:57,279 --> 00:28:58,640
exact solution

737
00:28:58,640 --> 00:29:00,880
and the demo for it so matan the floor

738
00:29:00,880 --> 00:29:01,919
is yours

739
00:29:01,919 --> 00:29:03,520
thank you dal

740
00:29:03,520 --> 00:29:05,840
so thank you dal for uh introducing the

741
00:29:05,840 --> 00:29:07,840
problem and the solution

742
00:29:07,840 --> 00:29:10,640
for the problem uh what i would like to

743
00:29:10,640 --> 00:29:13,120
do next is present you the actual demo

744
00:29:13,120 --> 00:29:16,480
that implements the suggested solution

745
00:29:16,480 --> 00:29:18,720
great so the demo architecture is

746
00:29:18,720 --> 00:29:20,559
composed of three parts well the first

747
00:29:20,559 --> 00:29:22,480
part is the identity provider and the

748
00:29:22,480 --> 00:29:24,720
second part is the service provider that

749
00:29:24,720 --> 00:29:27,679
is agnostic practically to the tss

750
00:29:27,679 --> 00:29:29,360
nature of the signature

751
00:29:29,360 --> 00:29:31,200
and the last part will be our

752
00:29:31,200 --> 00:29:33,279
implementation of the threshold

753
00:29:33,279 --> 00:29:36,080
signature for the ecdsa signature

754
00:29:36,080 --> 00:29:37,760
great so

755
00:29:37,760 --> 00:29:40,399
the first two parts we are just were

756
00:29:40,399 --> 00:29:43,360
just taken out of the simple saml php

757
00:29:43,360 --> 00:29:46,799
project which as its name suggests just

758
00:29:46,799 --> 00:29:49,279
implements the saml protocol

759
00:29:49,279 --> 00:29:51,440
with the php language

760
00:29:51,440 --> 00:29:52,799
um

761
00:29:52,799 --> 00:29:55,919
great so what we contributed to its code

762
00:29:55,919 --> 00:29:59,120
base was supporting the ecdsa sha-256

763
00:29:59,120 --> 00:30:02,159
algorithm for the signature algorithm

764
00:30:02,159 --> 00:30:04,320
xml element

765
00:30:04,320 --> 00:30:06,159
in the idp code base

766
00:30:06,159 --> 00:30:07,120
now

767
00:30:07,120 --> 00:30:09,279
the handler for this signature algorithm

768
00:30:09,279 --> 00:30:11,919
at the idp calls for the multi-party

769
00:30:11,919 --> 00:30:15,600
signing routine when uh when

770
00:30:15,600 --> 00:30:17,679
we try to generate a signature for the

771
00:30:17,679 --> 00:30:18,799
assertion

772
00:30:18,799 --> 00:30:22,240
and the idp and the sp will actually in

773
00:30:22,240 --> 00:30:25,279
our demo run in two different containers

774
00:30:25,279 --> 00:30:28,240
each running its own copy of the simple

775
00:30:28,240 --> 00:30:30,240
sample php code base

776
00:30:30,240 --> 00:30:32,799
each with its appropriate configuration

777
00:30:32,799 --> 00:30:34,799
great so with that being said

778
00:30:34,799 --> 00:30:37,440
the next part is the threshold signature

779
00:30:37,440 --> 00:30:39,440
ecdsa implementation

780
00:30:39,440 --> 00:30:42,559
implemented by xango x team on github

781
00:30:42,559 --> 00:30:44,880
you can check it out

782
00:30:44,880 --> 00:30:46,799
more specifically we use the three out

783
00:30:46,799 --> 00:30:49,520
of three signature scheme in our demo

784
00:30:49,520 --> 00:30:52,720
and the signature scheme used is called

785
00:30:52,720 --> 00:30:53,520
uh

786
00:30:53,520 --> 00:30:56,559
by after a general engulfed

787
00:30:56,559 --> 00:30:59,760
known as a gg18

788
00:30:59,760 --> 00:31:03,120
so in our demo as said each signer will

789
00:31:03,120 --> 00:31:05,279
in the threshold the signature scheme

790
00:31:05,279 --> 00:31:08,000
will run on a separate container

791
00:31:08,000 --> 00:31:08,799
uh

792
00:31:08,799 --> 00:31:11,120
and each con one of those containers of

793
00:31:11,120 --> 00:31:13,679
the cosigners is controlled by the idp

794
00:31:13,679 --> 00:31:15,279
the rest of them are assumed to be

795
00:31:15,279 --> 00:31:18,720
independent and thus uh add value to the

796
00:31:18,720 --> 00:31:20,159
orthogonality

797
00:31:20,159 --> 00:31:23,600
measure as mentioned by ital

798
00:31:23,600 --> 00:31:25,120
it's important to mention that while on

799
00:31:25,120 --> 00:31:27,440
the demo we run all the containers on

800
00:31:27,440 --> 00:31:29,200
the same pc

801
00:31:29,200 --> 00:31:31,360
a real demo a real world implementation

802
00:31:31,360 --> 00:31:33,840
of this will compose different cosigners

803
00:31:33,840 --> 00:31:35,440
running in different

804
00:31:35,440 --> 00:31:38,880
orthogonal independent environments so

805
00:31:38,880 --> 00:31:40,960
just that being said

806
00:31:40,960 --> 00:31:43,600
the demo actually includes also the

807
00:31:43,600 --> 00:31:46,159
distributed key generation

808
00:31:46,159 --> 00:31:47,600
as part of

809
00:31:47,600 --> 00:31:51,279
of our code contribution great

810
00:31:51,279 --> 00:31:54,320
so the demo is composed of two parts the

811
00:31:54,320 --> 00:31:57,039
first part is the setup phase

812
00:31:57,039 --> 00:31:58,799
and the second part would be an actual

813
00:31:58,799 --> 00:32:01,440
signing phase so in the setup phase we

814
00:32:01,440 --> 00:32:04,080
start all the signing containers each of

815
00:32:04,080 --> 00:32:07,039
them will take part in our distributed

816
00:32:07,039 --> 00:32:09,279
key generation algorithm for creating a

817
00:32:09,279 --> 00:32:11,679
three out of three

818
00:32:11,679 --> 00:32:13,679
private key

819
00:32:13,679 --> 00:32:16,640
for the ecdsa threshold signature scheme

820
00:32:16,640 --> 00:32:19,039
out of the generated

821
00:32:19,039 --> 00:32:20,880
public key

822
00:32:20,880 --> 00:32:22,799
one of the one of the cosigners will

823
00:32:22,799 --> 00:32:24,880
also generate an

824
00:32:24,880 --> 00:32:26,399
a certificate

825
00:32:26,399 --> 00:32:28,880
that will be automatically transferred

826
00:32:28,880 --> 00:32:31,679
to the service provider in our demo so

827
00:32:31,679 --> 00:32:33,279
with that certificate the service

828
00:32:33,279 --> 00:32:35,919
provider can actually verify the signed

829
00:32:35,919 --> 00:32:38,799
assertions being correct

830
00:32:38,799 --> 00:32:40,000
uh great

831
00:32:40,000 --> 00:32:41,360
so

832
00:32:41,360 --> 00:32:43,919
this is just uh

833
00:32:43,919 --> 00:32:45,600
like uh

834
00:32:45,600 --> 00:32:48,320
the the part of uh explaining how

835
00:32:48,320 --> 00:32:51,360
the signing phase works in diagram

836
00:32:51,360 --> 00:32:52,640
so the first

837
00:32:52,640 --> 00:32:55,039
uh part of signing is

838
00:32:55,039 --> 00:32:56,480
the user agent

839
00:32:56,480 --> 00:32:59,120
requesting the service provider

840
00:32:59,120 --> 00:33:00,799
a certain service at this point the

841
00:33:00,799 --> 00:33:03,919
service provider will discover an idp in

842
00:33:03,919 --> 00:33:06,320
our case in our demo what will happen is

843
00:33:06,320 --> 00:33:08,240
that the user will manually just pick an

844
00:33:08,240 --> 00:33:11,120
idp the single idp in our demo

845
00:33:11,120 --> 00:33:13,600
the second part will be redirecting the

846
00:33:13,600 --> 00:33:16,880
demo redirecting the user to

847
00:33:16,880 --> 00:33:18,720
the single sign on service which is the

848
00:33:18,720 --> 00:33:20,159
idp

849
00:33:20,159 --> 00:33:21,760
when the user will be redirected to the

850
00:33:21,760 --> 00:33:23,360
idp

851
00:33:23,360 --> 00:33:27,760
it will request the idp to be identified

852
00:33:27,760 --> 00:33:30,080
and input some sort of credentials in a

853
00:33:30,080 --> 00:33:32,640
form given by the idp

854
00:33:32,640 --> 00:33:34,399
at that point when the verification

855
00:33:34,399 --> 00:33:36,320
succeeds and

856
00:33:36,320 --> 00:33:39,919
the the idp verifies that

857
00:33:39,919 --> 00:33:41,840
the credentials provided by the user are

858
00:33:41,840 --> 00:33:43,200
actually correct

859
00:33:43,200 --> 00:33:44,880
uh a new

860
00:33:44,880 --> 00:33:47,200
uh signature will be generated for the

861
00:33:47,200 --> 00:33:49,279
assertion that the user was verified

862
00:33:49,279 --> 00:33:51,120
alongside some of the attributes of that

863
00:33:51,120 --> 00:33:53,519
user and at this point the attributes

864
00:33:53,519 --> 00:33:56,000
will be returned back to the user

865
00:33:56,000 --> 00:33:57,039
with the

866
00:33:57,039 --> 00:33:59,760
signed assertion and the user will

867
00:33:59,760 --> 00:34:02,159
be redirected back to the service

868
00:34:02,159 --> 00:34:03,440
provider

869
00:34:03,440 --> 00:34:05,200
giving him the

870
00:34:05,200 --> 00:34:07,120
signed assertion

871
00:34:07,120 --> 00:34:11,440
and signing in to the requested service

872
00:34:11,440 --> 00:34:15,599
great so let's take a look at our demo

873
00:34:15,599 --> 00:34:17,839
great

874
00:34:19,520 --> 00:34:22,560
i'll just turn that on

875
00:34:22,560 --> 00:34:24,000
wait so

876
00:34:24,000 --> 00:34:25,760
i'm just starting running the demo and

877
00:34:25,760 --> 00:34:28,000
at this point you can see that many of

878
00:34:28,000 --> 00:34:29,520
the

879
00:34:29,520 --> 00:34:32,239
containers are firing up

880
00:34:32,239 --> 00:34:34,320
when they finish firing up at the right

881
00:34:34,320 --> 00:34:36,000
side of the screen you will see three

882
00:34:36,000 --> 00:34:38,000
sub-windows three panes

883
00:34:38,000 --> 00:34:40,639
each of them is one of the co-signers

884
00:34:40,639 --> 00:34:42,320
at the left side of the terminal you

885
00:34:42,320 --> 00:34:43,440
will see

886
00:34:43,440 --> 00:34:45,760
an output of the certificate for the idp

887
00:34:45,760 --> 00:34:47,440
which will be moved later on to the

888
00:34:47,440 --> 00:34:49,440
service provider

889
00:34:49,440 --> 00:34:52,159
great so the containers are up and on

890
00:34:52,159 --> 00:34:53,599
the right side as i said you can see the

891
00:34:53,599 --> 00:34:55,440
three cosigners

892
00:34:55,440 --> 00:34:56,960
so if you take a look at what the first

893
00:34:56,960 --> 00:34:58,320
cosigner does

894
00:34:58,320 --> 00:35:00,960
it basically

895
00:35:00,960 --> 00:35:03,440
starts our key generation client

896
00:35:03,440 --> 00:35:05,760
which distributively generates a private

897
00:35:05,760 --> 00:35:06,880
key

898
00:35:06,880 --> 00:35:11,280
um and sen sets up a server with which

899
00:35:11,280 --> 00:35:14,160
all of the parties communicate

900
00:35:14,160 --> 00:35:17,359
this enables us to securely transfer

901
00:35:17,359 --> 00:35:19,359
messages between the parties

902
00:35:19,359 --> 00:35:21,440
as you can see we have three parties and

903
00:35:21,440 --> 00:35:23,040
a threshold of two which means that we

904
00:35:23,040 --> 00:35:24,960
need more than two

905
00:35:24,960 --> 00:35:27,920
cosigners to generate a signature

906
00:35:27,920 --> 00:35:28,720
so

907
00:35:28,720 --> 00:35:30,480
this is the first cosigner joining the

908
00:35:30,480 --> 00:35:33,280
party and down below you can see all the

909
00:35:33,280 --> 00:35:34,880
transferred messages

910
00:35:34,880 --> 00:35:37,200
in the key generation algorithm

911
00:35:37,200 --> 00:35:39,119
and when the key generation is done

912
00:35:39,119 --> 00:35:42,560
we move to generating a certificate

913
00:35:42,560 --> 00:35:43,599
and

914
00:35:43,599 --> 00:35:44,720
when the

915
00:35:44,720 --> 00:35:47,119
this certificate is later on moved to

916
00:35:47,119 --> 00:35:50,480
the service provider

917
00:35:54,320 --> 00:35:56,320
great so the second the cosigner does

918
00:35:56,320 --> 00:35:59,520
practically the same thing

919
00:35:59,520 --> 00:36:00,960
it joins the

920
00:36:00,960 --> 00:36:04,079
co-signing event ceremony

921
00:36:04,079 --> 00:36:05,599
with the

922
00:36:05,599 --> 00:36:07,839
server and

923
00:36:07,839 --> 00:36:09,280
exchanges

924
00:36:09,280 --> 00:36:11,359
multiple messages

925
00:36:11,359 --> 00:36:12,720
and

926
00:36:12,720 --> 00:36:15,440
gains its own share of the private key

927
00:36:15,440 --> 00:36:16,960
and without going too much detail the

928
00:36:16,960 --> 00:36:20,000
third cosigner does exactly the same

929
00:36:20,000 --> 00:36:21,359
if you take a look at the generated

930
00:36:21,359 --> 00:36:23,040
certificate

931
00:36:23,040 --> 00:36:24,560
you can see

932
00:36:24,560 --> 00:36:27,200
multiple properties well the first is

933
00:36:27,200 --> 00:36:29,200
that the certificate is generated for

934
00:36:29,200 --> 00:36:32,240
idp xango saml which is the domain of

935
00:36:32,240 --> 00:36:34,240
our idp

936
00:36:34,240 --> 00:36:36,480
certificate is generated for the ecdsa

937
00:36:36,480 --> 00:36:39,920
shuttle 56 algorithm over the secp 256

938
00:36:39,920 --> 00:36:43,520
k1 elliptic curve

939
00:36:44,800 --> 00:36:47,520
great so let's move into actually

940
00:36:47,520 --> 00:36:49,200
browsing our service provider which is

941
00:36:49,200 --> 00:36:51,440
sb.xengo.summon

942
00:36:51,440 --> 00:36:53,440
since this is a self-signed certificate

943
00:36:53,440 --> 00:36:56,079
we get this warning message

944
00:36:56,079 --> 00:36:58,640
and this is our service provider wait so

945
00:36:58,640 --> 00:37:02,560
we press the authentication tab

946
00:37:04,320 --> 00:37:06,960
and we select our demo idp

947
00:37:06,960 --> 00:37:08,560
at this point we are redirected to the

948
00:37:08,560 --> 00:37:12,240
idp xango saml website

949
00:37:12,240 --> 00:37:14,560
we are given a form to input our

950
00:37:14,560 --> 00:37:17,560
credentials

951
00:37:22,960 --> 00:37:24,560
we hit login and when we'll hit login

952
00:37:24,560 --> 00:37:26,079
you can see on the right

953
00:37:26,079 --> 00:37:26,800
that

954
00:37:26,800 --> 00:37:30,320
multiple cosigners will take part of the

955
00:37:30,320 --> 00:37:34,000
signature generation algorithm

956
00:37:34,000 --> 00:37:35,599
they all wait for an incoming message at

957
00:37:35,599 --> 00:37:37,839
this point

958
00:37:40,560 --> 00:37:42,880
so let's hit login and you can see them

959
00:37:42,880 --> 00:37:44,320
actually working on generating the

960
00:37:44,320 --> 00:37:46,800
signature

961
00:37:48,640 --> 00:37:50,800
and when they're done we are redirected

962
00:37:50,800 --> 00:37:52,880
back to the service provider with a

963
00:37:52,880 --> 00:37:54,800
message that notifies us of the success

964
00:37:54,800 --> 00:37:56,960
of our login

965
00:37:56,960 --> 00:37:58,960
and as you can see down the page we have

966
00:37:58,960 --> 00:38:00,880
the assertion

967
00:38:00,880 --> 00:38:05,280
that was generated by the idp with

968
00:38:05,280 --> 00:38:06,880
some of the attributes of the sign-in

969
00:38:06,880 --> 00:38:10,320
users such as member and student

970
00:38:10,320 --> 00:38:12,480
great so

971
00:38:12,480 --> 00:38:15,599
this is the end of our demo

972
00:38:16,000 --> 00:38:19,040
back to utah

973
00:38:19,040 --> 00:38:19,920
so

974
00:38:19,920 --> 00:38:22,079
thank you matan yeah you can stay it's

975
00:38:22,079 --> 00:38:24,480
like we have two slides

976
00:38:24,480 --> 00:38:28,640
so let's conclude with some takeaways

977
00:38:28,640 --> 00:38:29,520
so

978
00:38:29,520 --> 00:38:32,480
apgs are targeting long-term secrets for

979
00:38:32,480 --> 00:38:34,480
persistence for example condensable

980
00:38:34,480 --> 00:38:36,480
advantages target

981
00:38:36,480 --> 00:38:37,760
muscle

982
00:38:37,760 --> 00:38:39,440
current hardware solutions are not

983
00:38:39,440 --> 00:38:42,440
perfect as we showed but using modern

984
00:38:42,440 --> 00:38:46,160
cryptography tss threshold signature

985
00:38:46,160 --> 00:38:47,920
we together with it's very important to

986
00:38:47,920 --> 00:38:49,839
know that with the relevant architecture

987
00:38:49,839 --> 00:38:51,680
because threshold signatures by

988
00:38:51,680 --> 00:38:53,359
themselves are not enough we need to

989
00:38:53,359 --> 00:38:55,920
build also these orthogonal

990
00:38:55,920 --> 00:38:57,200
vendors

991
00:38:57,200 --> 00:39:00,400
that will be the parties in the tss in

992
00:39:00,400 --> 00:39:03,200
the distributed designing process

993
00:39:03,200 --> 00:39:04,400
but

994
00:39:04,400 --> 00:39:07,119
these two together another much better

995
00:39:07,119 --> 00:39:08,400
solution

996
00:39:08,400 --> 00:39:10,079
and i think there's even a greater

997
00:39:10,079 --> 00:39:12,800
lesson more general lesson that infosec

998
00:39:12,800 --> 00:39:14,880
should love cryptocurrency because

999
00:39:14,880 --> 00:39:16,960
cryptocurrency are solving high security

1000
00:39:16,960 --> 00:39:18,000
problems

1001
00:39:18,000 --> 00:39:21,040
and the infosec community should embrace

1002
00:39:21,040 --> 00:39:23,119
that and i think it was

1003
00:39:23,119 --> 00:39:26,960
greatly expressed in dino daisovi

1004
00:39:26,960 --> 00:39:29,359
tweet about the importance of the

1005
00:39:29,359 --> 00:39:32,160
security community community to take a

1006
00:39:32,160 --> 00:39:34,400
look at what's on the all the innovation

1007
00:39:34,400 --> 00:39:36,800
that's happening in cryptocurrency

1008
00:39:36,800 --> 00:39:40,000
project so with that we conclude and

1009
00:39:40,000 --> 00:39:41,680
thank you for your time and if you have

1010
00:39:41,680 --> 00:39:42,400
questions

1011
00:39:42,400 --> 00:39:46,599
now is the time thank you

