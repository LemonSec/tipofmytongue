1
00:00:01,130 --> 00:00:14,690
[Music]

2
00:00:14,719 --> 00:00:17,279
hey everyone today we present to you our

3
00:00:17,279 --> 00:00:19,680
research on the course account aws

4
00:00:19,680 --> 00:00:21,039
vulnerabilities

5
00:00:21,039 --> 00:00:23,199
my name is jill and i lead the research

6
00:00:23,199 --> 00:00:25,680
in the research team at with the cloud

7
00:00:25,680 --> 00:00:28,240
security company with me on the stage is

8
00:00:28,240 --> 00:00:31,199
amy ludwig the cto of wisdom

9
00:00:31,199 --> 00:00:33,520
thank you it's really great to be here

10
00:00:33,520 --> 00:00:35,920
so just a bit of background about the

11
00:00:35,920 --> 00:00:38,000
risk research team so it's a team of

12
00:00:38,000 --> 00:00:40,480
highly experienced researchers many of

13
00:00:40,480 --> 00:00:42,399
us coming from the microsoft cloud

14
00:00:42,399 --> 00:00:44,640
security group and the goal of the team

15
00:00:44,640 --> 00:00:47,280
is to do groundbreaking cloud research

16
00:00:47,280 --> 00:00:48,800
focused on finding

17
00:00:48,800 --> 00:00:51,760
new and unknown vulnerabilities risks

18
00:00:51,760 --> 00:00:54,079
and attack vectors into cloud

19
00:00:54,079 --> 00:00:56,160
environments

20
00:00:56,160 --> 00:00:58,399
so the goal of this research was to

21
00:00:58,399 --> 00:01:00,960
answer maybe one of the most basic

22
00:01:00,960 --> 00:01:03,359
questions that any virtual system has

23
00:01:03,359 --> 00:01:05,438
when we build a virtual system we have

24
00:01:05,438 --> 00:01:07,680
multiple virtual instances running on

25
00:01:07,680 --> 00:01:10,400
the same shared infra and one of the

26
00:01:10,400 --> 00:01:13,680
most basic premises of virtualization

27
00:01:13,680 --> 00:01:15,360
is isolation

28
00:01:15,360 --> 00:01:17,600
and in the context of cloud environment

29
00:01:17,600 --> 00:01:20,320
the question is if i'm a user

30
00:01:20,320 --> 00:01:22,720
with no permissions to the environment

31
00:01:22,720 --> 00:01:25,280
no network access to the environment

32
00:01:25,280 --> 00:01:27,360
can i learn anything about the

33
00:01:27,360 --> 00:01:29,439
environment can i know what's being what

34
00:01:29,439 --> 00:01:31,040
services are being used

35
00:01:31,040 --> 00:01:31,920
maybe i

36
00:01:31,920 --> 00:01:35,040
can read data write data run code is

37
00:01:35,040 --> 00:01:38,400
there any way to break the isolation of

38
00:01:38,400 --> 00:01:41,200
cloud environments specifically aws

39
00:01:41,200 --> 00:01:43,040
environments that was the research

40
00:01:43,040 --> 00:01:45,520
question that we started from

41
00:01:45,520 --> 00:01:48,000
and before we dive into the details

42
00:01:48,000 --> 00:01:48,960
let's

43
00:01:48,960 --> 00:01:51,680
look at the specific

44
00:01:51,680 --> 00:01:53,680
way that cloud is deployed just to

45
00:01:53,680 --> 00:01:56,240
understand why isolation is so critical

46
00:01:56,240 --> 00:01:58,719
especially for those specific customers

47
00:01:58,719 --> 00:02:00,799
that use the cloud in this manner so

48
00:02:00,799 --> 00:02:03,439
it's the deployment model that i wanted

49
00:02:03,439 --> 00:02:04,880
to

50
00:02:04,880 --> 00:02:07,759
take a deeper look at is called cloud as

51
00:02:07,759 --> 00:02:10,000
an extension to the on-premise data

52
00:02:10,000 --> 00:02:12,400
center in that deployment model the

53
00:02:12,400 --> 00:02:15,360
cloud is completely isolated from the

54
00:02:15,360 --> 00:02:18,560
outside world the cloud environment has

55
00:02:18,560 --> 00:02:20,400
some kind of a vpn connection to their

56
00:02:20,400 --> 00:02:22,720
own premise but the company didn't

57
00:02:22,720 --> 00:02:25,040
change their strategy there is a

58
00:02:25,040 --> 00:02:26,480
corporate

59
00:02:26,480 --> 00:02:27,680
perimeter

60
00:02:27,680 --> 00:02:30,319
that is protected by a gateway and the

61
00:02:30,319 --> 00:02:32,959
concept and the basic security strategy

62
00:02:32,959 --> 00:02:35,760
the company has is that all traffic

63
00:02:35,760 --> 00:02:38,640
going outside of the company must go

64
00:02:38,640 --> 00:02:41,360
through the gateway and that is how they

65
00:02:41,360 --> 00:02:43,519
make sure that no one is able to leak

66
00:02:43,519 --> 00:02:45,680
data from the organization

67
00:02:45,680 --> 00:02:48,000
imagine that this kind of company or the

68
00:02:48,000 --> 00:02:50,480
cloud is there but it's an isolated

69
00:02:50,480 --> 00:02:52,000
instance and they assume that there is

70
00:02:52,000 --> 00:02:53,040
no way

71
00:02:53,040 --> 00:02:54,959
to leak data from the cloud what if we

72
00:02:54,959 --> 00:02:57,040
found a way to read data from that

73
00:02:57,040 --> 00:02:58,879
environment that would think that that

74
00:02:58,879 --> 00:03:00,560
would allow an attacker

75
00:03:00,560 --> 00:03:03,120
to leak data to inextricate data from

76
00:03:03,120 --> 00:03:05,440
the environment without actually going

77
00:03:05,440 --> 00:03:06,480
through

78
00:03:06,480 --> 00:03:08,879
the gateway essentially breaking their

79
00:03:08,879 --> 00:03:10,080
security

80
00:03:10,080 --> 00:03:11,840
strategy

81
00:03:11,840 --> 00:03:14,400
so we wanted to look into a cloud-native

82
00:03:14,400 --> 00:03:17,120
mechanism that may break that isolation

83
00:03:17,120 --> 00:03:19,040
obviously we started looking into

84
00:03:19,040 --> 00:03:21,599
identity

85
00:03:23,440 --> 00:03:24,959
so we've been researching cloud

86
00:03:24,959 --> 00:03:27,760
identities for a long time now and we're

87
00:03:27,760 --> 00:03:30,080
familiar with most configurations aws

88
00:03:30,080 --> 00:03:31,840
allow users to open cloud resources for

89
00:03:31,840 --> 00:03:33,519
identities within and outside the

90
00:03:33,519 --> 00:03:35,519
organization as well as various aws

91
00:03:35,519 --> 00:03:38,560
services with a specific configuration

92
00:03:38,560 --> 00:03:41,680
any s3 bucket or aws lambda and dozen

93
00:03:41,680 --> 00:03:43,599
further services can be accessed from

94
00:03:43,599 --> 00:03:45,680
different type of identities so three

95
00:03:45,680 --> 00:03:47,040
main type

96
00:03:47,040 --> 00:03:48,879
and types of access

97
00:03:48,879 --> 00:03:51,120
one public sharing the resource can be

98
00:03:51,120 --> 00:03:53,040
publicly exposed and anyone on the

99
00:03:53,040 --> 00:03:55,280
internet can use and access the resource

100
00:03:55,280 --> 00:03:56,560
the other option

101
00:03:56,560 --> 00:03:59,519
is to allow access to a specific user

102
00:03:59,519 --> 00:04:01,439
resource or account

103
00:04:01,439 --> 00:04:03,519
this can be users or accounts of the

104
00:04:03,519 --> 00:04:06,000
same account and this can be users of

105
00:04:06,000 --> 00:04:07,599
other accounts

106
00:04:07,599 --> 00:04:09,360
and the third option is to provide

107
00:04:09,360 --> 00:04:11,680
access to various aws services that can

108
00:04:11,680 --> 00:04:14,959
perform relations on the resource in aws

109
00:04:14,959 --> 00:04:16,798
the mechanism the mechanism defining the

110
00:04:16,798 --> 00:04:18,639
access permissions for cloud resources

111
00:04:18,639 --> 00:04:20,560
is called resource policy

112
00:04:20,560 --> 00:04:22,639
resource policy is a textual policy that

113
00:04:22,639 --> 00:04:24,639
allows users to define who can access

114
00:04:24,639 --> 00:04:26,479
which resource and what action can be

115
00:04:26,479 --> 00:04:29,840
taken on them

116
00:04:29,840 --> 00:04:32,080
in this research we focused on the flow

117
00:04:32,080 --> 00:04:34,479
that always integrate us

118
00:04:34,479 --> 00:04:36,639
what does it mean to grant permissions

119
00:04:36,639 --> 00:04:38,479
to an aws service

120
00:04:38,479 --> 00:04:42,400
doesn't aws if all the access needs

121
00:04:42,400 --> 00:04:43,680
does it

122
00:04:43,680 --> 00:04:45,520
matter what permissions i give in aws

123
00:04:45,520 --> 00:04:46,560
service

124
00:04:46,560 --> 00:04:49,600
can anything go wrong

125
00:04:50,560 --> 00:04:51,759
it makes a lot of sense to grant

126
00:04:51,759 --> 00:04:54,639
permissions to internal aws services for

127
00:04:54,639 --> 00:04:55,680
those who aren't familiar with

128
00:04:55,680 --> 00:04:57,280
cloudtrail this is a service that

129
00:04:57,280 --> 00:04:59,600
collects almost all platform events it

130
00:04:59,600 --> 00:05:01,520
is excellent for monitoring controlling

131
00:05:01,520 --> 00:05:03,199
and securing the environment

132
00:05:03,199 --> 00:05:04,800
you can imagine that the amount of

133
00:05:04,800 --> 00:05:06,639
information that cloud will collect is

134
00:05:06,639 --> 00:05:08,960
insane and users must export it to an

135
00:05:08,960 --> 00:05:10,880
srip storage bucket

136
00:05:10,880 --> 00:05:12,960
a user who wants to export cloudy lobs

137
00:05:12,960 --> 00:05:14,960
to an s3 bucket can simply configure

138
00:05:14,960 --> 00:05:17,440
cloud to do so this saves a lot of code

139
00:05:17,440 --> 00:05:19,840
writing and many api calls

140
00:05:19,840 --> 00:05:22,479
in this case as we see in the slide the

141
00:05:22,479 --> 00:05:24,800
s3 bucket must grant access to cloud

142
00:05:24,800 --> 00:05:27,039
rail for it to be able to write to the

143
00:05:27,039 --> 00:05:29,039
bucket this configuration is defined

144
00:05:29,039 --> 00:05:32,720
within the bucket's resource policy

145
00:05:32,720 --> 00:05:34,639
from that moment on cloudera will be

146
00:05:34,639 --> 00:05:36,560
able to write the logs to the s3 bucket

147
00:05:36,560 --> 00:05:39,840
without any user intervention

148
00:05:40,479 --> 00:05:42,880
nowadays cloud users are taking a

149
00:05:42,880 --> 00:05:44,720
multi-account approach and managing

150
00:05:44,720 --> 00:05:46,560
multiple cloud accounts

151
00:05:46,560 --> 00:05:48,479
for ease of management amazon allows

152
00:05:48,479 --> 00:05:50,080
some of its services to work course

153
00:05:50,080 --> 00:05:52,240
account this means that if i want to

154
00:05:52,240 --> 00:05:54,560
collect logs for my entire environment

155
00:05:54,560 --> 00:05:56,479
instead of setting up a login bucket in

156
00:05:56,479 --> 00:05:58,800
each and each account cloud allows me to

157
00:05:58,800 --> 00:06:01,199
export all logs from all accounts to one

158
00:06:01,199 --> 00:06:03,520
account

159
00:06:03,759 --> 00:06:06,560
for me as a cloud user

160
00:06:06,560 --> 00:06:08,639
it's enough to set up one three bucket

161
00:06:08,639 --> 00:06:10,960
that cloud rail can lie to and now all

162
00:06:10,960 --> 00:06:13,360
my cloud well can export their logs to

163
00:06:13,360 --> 00:06:16,000
my account and that's very cool

164
00:06:16,000 --> 00:06:17,360
this feature is great for large

165
00:06:17,360 --> 00:06:19,280
environments as it enables easy

166
00:06:19,280 --> 00:06:20,720
management and improved centralized

167
00:06:20,720 --> 00:06:22,319
security

168
00:06:22,319 --> 00:06:23,840
but wait

169
00:06:23,840 --> 00:06:25,520
i learned from this behavior that

170
00:06:25,520 --> 00:06:28,800
cloud12 can write to resources that are

171
00:06:28,800 --> 00:06:32,000
owned and managed in other accounts and

172
00:06:32,000 --> 00:06:34,400
for me the security researcher trades a

173
00:06:34,400 --> 00:06:35,759
concern

174
00:06:35,759 --> 00:06:37,520
at this point i was very curious about

175
00:06:37,520 --> 00:06:39,600
the cost account mechanism let's see how

176
00:06:39,600 --> 00:06:42,000
it works

177
00:06:42,880 --> 00:06:45,199
this is how the default resource policy

178
00:06:45,199 --> 00:06:47,280
of their free bucket looks like

179
00:06:47,280 --> 00:06:49,520
the policies specified that cloud cell

180
00:06:49,520 --> 00:06:51,520
service is allowed to perform put object

181
00:06:51,520 --> 00:06:52,800
operation

182
00:06:52,800 --> 00:06:54,560
as we can see in the principle and

183
00:06:54,560 --> 00:06:56,000
action fields

184
00:06:56,000 --> 00:06:58,000
put object permission grant cloudtrail

185
00:06:58,000 --> 00:06:59,759
the ability to wide

186
00:06:59,759 --> 00:07:01,680
objects to the bucket

187
00:07:01,680 --> 00:07:03,280
so this policy allows clutter to write

188
00:07:03,280 --> 00:07:05,520
objects yeah but

189
00:07:05,520 --> 00:07:06,960
actually wait

190
00:07:06,960 --> 00:07:08,560
what we're seeing here

191
00:07:08,560 --> 00:07:11,120
is a very basic and simple resource

192
00:07:11,120 --> 00:07:13,759
policy that we see all the time in aws

193
00:07:13,759 --> 00:07:16,800
right we see here a service cloud trade

194
00:07:16,800 --> 00:07:19,199
that has access who dropped it into the

195
00:07:19,199 --> 00:07:21,520
bucket so if i want crowdfund right into

196
00:07:21,520 --> 00:07:23,919
my pocket makes sense that i would put

197
00:07:23,919 --> 00:07:26,080
the principal cloud trail and the action

198
00:07:26,080 --> 00:07:27,440
put object

199
00:07:27,440 --> 00:07:28,880
but so

200
00:07:28,880 --> 00:07:30,400
what's missing here maybe we can let the

201
00:07:30,400 --> 00:07:32,240
audience say think about it for for a

202
00:07:32,240 --> 00:07:35,039
second what's missing in this resource

203
00:07:35,039 --> 00:07:38,000
policy i gave the cloud thread service

204
00:07:38,000 --> 00:07:40,880
access to my bucket what's the problem

205
00:07:40,880 --> 00:07:42,400
but i mean

206
00:07:42,400 --> 00:07:44,879
we said that you can it can write across

207
00:07:44,879 --> 00:07:47,599
different accounts how how how does it

208
00:07:47,599 --> 00:07:48,960
how does it know

209
00:07:48,960 --> 00:07:50,960
if it's my account right into the bucket

210
00:07:50,960 --> 00:07:53,759
or your account is right into the bucket

211
00:07:53,759 --> 00:07:57,720
i don't understand how this works

212
00:07:58,240 --> 00:08:00,960
let's check it out

213
00:08:01,680 --> 00:08:04,319
so we log into our aws console

214
00:08:04,319 --> 00:08:06,160
and we created a new trail and specify

215
00:08:06,160 --> 00:08:09,759
an s3 bucket of another account

216
00:08:10,560 --> 00:08:12,879
we know that the s3 bucket was designed

217
00:08:12,879 --> 00:08:14,960
to store cloud records and the bucket

218
00:08:14,960 --> 00:08:18,560
granted cloudtrail write permissions

219
00:08:18,639 --> 00:08:19,599
um

220
00:08:19,599 --> 00:08:21,440
you can see in the slide that cloudell

221
00:08:21,440 --> 00:08:24,879
keeps the records in the prefix aws logs

222
00:08:24,879 --> 00:08:26,879
slash the account id

223
00:08:26,879 --> 00:08:28,960
we have no control of the over the path

224
00:08:28,960 --> 00:08:31,599
but it does not seems to be an issue

225
00:08:31,599 --> 00:08:33,200
we clicked save and ready to see what

226
00:08:33,200 --> 00:08:35,360
happens

227
00:08:35,360 --> 00:08:37,519
it did not work no file is created in

228
00:08:37,519 --> 00:08:40,559
the bucket and it remains empty in an

229
00:08:40,559 --> 00:08:42,240
attempt to understand why we went back

230
00:08:42,240 --> 00:08:45,279
to the resource policy

231
00:08:46,399 --> 00:08:48,320
at a second look at the resource policy

232
00:08:48,320 --> 00:08:50,000
it can be seen that the bucket allows

233
00:08:50,000 --> 00:08:51,600
cloudville to write only to a very

234
00:08:51,600 --> 00:08:52,880
specific path

235
00:08:52,880 --> 00:08:54,959
which is probably why our cloud fell to

236
00:08:54,959 --> 00:08:57,040
white to the target bucket

237
00:08:57,040 --> 00:09:00,000
but wait we can bypass it easily when

238
00:09:00,000 --> 00:09:02,640
defining logs exporting cloud rail one

239
00:09:02,640 --> 00:09:04,959
can specify a prefix to which the logs

240
00:09:04,959 --> 00:09:06,399
will be written

241
00:09:06,399 --> 00:09:08,640
maybe if we enter the permissioned path

242
00:09:08,640 --> 00:09:12,880
in the policy it will be able to write

243
00:09:13,040 --> 00:09:16,320
so we went we went back to the console

244
00:09:16,320 --> 00:09:17,680
and to the cultural console and

245
00:09:17,680 --> 00:09:19,600
specified the round path as in the

246
00:09:19,600 --> 00:09:21,680
policy into the prefix field

247
00:09:21,680 --> 00:09:25,680
the aws logs slash the target account id

248
00:09:25,680 --> 00:09:28,399
now cloud must write our logs to the

249
00:09:28,399 --> 00:09:30,800
correct path and it should work

250
00:09:30,800 --> 00:09:32,720
we click submit

251
00:09:32,720 --> 00:09:34,640
and yeah the logs were written to the

252
00:09:34,640 --> 00:09:36,880
bucket we managed to get cloudtrail to

253
00:09:36,880 --> 00:09:39,360
write and to write to bucket of another

254
00:09:39,360 --> 00:09:42,320
account and this is really cool

255
00:09:42,320 --> 00:09:44,560
in the slide you can see that you can

256
00:09:44,560 --> 00:09:46,800
see the outcomes of our actions

257
00:09:46,800 --> 00:09:49,519
a bucket owned by another account with

258
00:09:49,519 --> 00:09:53,360
crowded records from our environment

259
00:09:53,839 --> 00:09:56,080
we were really excited about this find

260
00:09:56,080 --> 00:09:57,920
we had no idea that it was possible to

261
00:09:57,920 --> 00:10:00,320
manipulate services in aws to perform

262
00:10:00,320 --> 00:10:03,519
operations on other accounts we wonder

263
00:10:03,519 --> 00:10:06,160
if this is a unique unusual event

264
00:10:06,160 --> 00:10:08,640
or if there is a pattern here that can

265
00:10:08,640 --> 00:10:11,200
be repeated with other services

266
00:10:11,200 --> 00:10:12,399
and if so

267
00:10:12,399 --> 00:10:14,800
what other services we could manipulate

268
00:10:14,800 --> 00:10:16,800
and what we could get them to do

269
00:10:16,800 --> 00:10:19,839
so we continued the research

270
00:10:20,240 --> 00:10:22,959
we discovered that aws config just like

271
00:10:22,959 --> 00:10:25,680
cloud can export findings to an s3

272
00:10:25,680 --> 00:10:26,640
bucket

273
00:10:26,640 --> 00:10:28,560
aws config is a service that allows

274
00:10:28,560 --> 00:10:30,560
customers to assess and evaluate the

275
00:10:30,560 --> 00:10:32,880
configuration of the cloud resources and

276
00:10:32,880 --> 00:10:35,519
just like cloud it also writes the

277
00:10:35,519 --> 00:10:38,079
configuration findings to an s3 bucket

278
00:10:38,079 --> 00:10:39,920
with a path that can be changed with the

279
00:10:39,920 --> 00:10:41,279
prefix field

280
00:10:41,279 --> 00:10:42,880
the same vulnerability we found in

281
00:10:42,880 --> 00:10:45,360
cloudrail also worked for us in aws

282
00:10:45,360 --> 00:10:47,360
config and allowed us to write service

283
00:10:47,360 --> 00:10:52,000
findings to buckets owned by other users

284
00:10:52,000 --> 00:10:53,680
what other services

285
00:10:53,680 --> 00:10:56,000
what other services could be vulnerable

286
00:10:56,000 --> 00:10:57,440
can we find a service that will also

287
00:10:57,440 --> 00:11:00,560
allow us to reap data we were looking

288
00:11:00,560 --> 00:11:02,399
for another services which support

289
00:11:02,399 --> 00:11:04,800
cross-account functionality which means

290
00:11:04,800 --> 00:11:07,760
these services can accept resources from

291
00:11:07,760 --> 00:11:10,560
other accounts

292
00:11:11,120 --> 00:11:12,880
while continuing the research

293
00:11:12,880 --> 00:11:14,640
we came across a service called

294
00:11:14,640 --> 00:11:16,399
serverless repository

295
00:11:16,399 --> 00:11:18,560
serverless repository allow customers to

296
00:11:18,560 --> 00:11:20,480
manage serverless applications

297
00:11:20,480 --> 00:11:22,399
you can imagine a private library of

298
00:11:22,399 --> 00:11:24,480
applications very similar to a private

299
00:11:24,480 --> 00:11:27,440
docker registry only that instead of

300
00:11:27,440 --> 00:11:29,680
storing containers images it stores

301
00:11:29,680 --> 00:11:31,200
lambda functions

302
00:11:31,200 --> 00:11:33,760
at first glance it does not seems like a

303
00:11:33,760 --> 00:11:34,880
service that

304
00:11:34,880 --> 00:11:37,440
performed course account operations

305
00:11:37,440 --> 00:11:39,440
but after using it for a bit we noticed

306
00:11:39,440 --> 00:11:40,959
that creating a new repository in the

307
00:11:40,959 --> 00:11:43,120
service requires to supply the

308
00:11:43,120 --> 00:11:45,279
application as well as other resources

309
00:11:45,279 --> 00:11:48,000
like redmi file and license file from an

310
00:11:48,000 --> 00:11:50,720
s3 bucket

311
00:11:51,200 --> 00:11:52,959
for the service to load our application

312
00:11:52,959 --> 00:11:55,279
image in its readme license file it

313
00:11:55,279 --> 00:11:57,440
needs permission to death free bucket

314
00:11:57,440 --> 00:11:59,120
the bucket must grant the service rate

315
00:11:59,120 --> 00:12:01,680
permissions and this is what the service

316
00:12:01,680 --> 00:12:04,880
resource policy looks like

317
00:12:05,680 --> 00:12:07,279
this is the official policy from the

318
00:12:07,279 --> 00:12:09,040
amazon documentation

319
00:12:09,040 --> 00:12:10,720
it allows the serverless repository

320
00:12:10,720 --> 00:12:13,200
service as we see in the principle field

321
00:12:13,200 --> 00:12:15,040
to perform get objects and basically

322
00:12:15,040 --> 00:12:17,279
read any object in the bucket

323
00:12:17,279 --> 00:12:19,200
sure wait

324
00:12:19,200 --> 00:12:21,040
i know the audience here is a there are

325
00:12:21,040 --> 00:12:23,680
a lot of hackers here so i let them

326
00:12:23,680 --> 00:12:26,160
think about the problem here

327
00:12:26,160 --> 00:12:28,160
knowing that we've already talked about

328
00:12:28,160 --> 00:12:30,399
the problem of culture a few minutes ago

329
00:12:30,399 --> 00:12:32,959
so we have here again a resource policy

330
00:12:32,959 --> 00:12:35,360
that looks really great we have a

331
00:12:35,360 --> 00:12:37,760
service service repo we have an action

332
00:12:37,760 --> 00:12:39,600
this time you get object it's more

333
00:12:39,600 --> 00:12:41,360
interesting actually because it allows

334
00:12:41,360 --> 00:12:43,600
us to read data right

335
00:12:43,600 --> 00:12:46,240
so we have a bucket and we allow servers

336
00:12:46,240 --> 00:12:48,639
repo to read from our bracket

337
00:12:48,639 --> 00:12:49,839
it's great

338
00:12:49,839 --> 00:12:51,519
but

339
00:12:51,519 --> 00:12:54,399
what's the problem what's missing and

340
00:12:54,399 --> 00:12:56,079
it's a very similar problem to what we

341
00:12:56,079 --> 00:12:59,599
talked just a few minutes ago

342
00:13:01,360 --> 00:13:04,000
i have a clue yeah maybe

343
00:13:04,000 --> 00:13:07,279
as we saw in the cloud rail policy

344
00:13:07,279 --> 00:13:08,320
maybe

345
00:13:08,320 --> 00:13:09,120
it

346
00:13:09,120 --> 00:13:11,040
doesn't know which

347
00:13:11,040 --> 00:13:13,200
service is hiding which account is right

348
00:13:13,200 --> 00:13:14,560
maybe anyone

349
00:13:14,560 --> 00:13:18,160
can use the server as repository service

350
00:13:18,160 --> 00:13:20,959
and make it perform little operations on

351
00:13:20,959 --> 00:13:22,720
other customers or is this coping you're

352
00:13:22,720 --> 00:13:23,680
right like

353
00:13:23,680 --> 00:13:26,160
we don't see any scoping on this policy

354
00:13:26,160 --> 00:13:28,000
how does it know how does the bucket

355
00:13:28,000 --> 00:13:29,120
know

356
00:13:29,120 --> 00:13:31,279
which service repo should be reading

357
00:13:31,279 --> 00:13:32,240
from it

358
00:13:32,240 --> 00:13:33,279
and which

359
00:13:33,279 --> 00:13:37,519
should not it doesn't say can it be

360
00:13:37,519 --> 00:13:39,519
so as we learned from the cloudtrail

361
00:13:39,519 --> 00:13:41,360
example there is no scoping or

362
00:13:41,360 --> 00:13:43,519
restriction conditions to scope which

363
00:13:43,519 --> 00:13:45,519
account is authorized

364
00:13:45,519 --> 00:13:47,440
in fact serverless repository is

365
00:13:47,440 --> 00:13:48,800
authorized to access buckets of

366
00:13:48,800 --> 00:13:50,480
thousands of customers who use the

367
00:13:50,480 --> 00:13:52,880
server repository service every user of

368
00:13:52,880 --> 00:13:54,800
the service must provided permission to

369
00:13:54,800 --> 00:13:56,320
pull the application image from the

370
00:13:56,320 --> 00:13:57,519
market

371
00:13:57,519 --> 00:13:59,360
due to the nature of the service the

372
00:13:59,360 --> 00:14:01,519
buckets usually store

373
00:14:01,519 --> 00:14:04,240
highly sensitive data such as source

374
00:14:04,240 --> 00:14:06,639
code artifacts and sometimes also

375
00:14:06,639 --> 00:14:08,959
secrets

376
00:14:08,959 --> 00:14:10,399
and here

377
00:14:10,399 --> 00:14:11,839
we suspect

378
00:14:11,839 --> 00:14:14,160
a malicious actor could take advantage

379
00:14:14,160 --> 00:14:16,240
of the service to access other users

380
00:14:16,240 --> 00:14:17,760
confidential files

381
00:14:17,760 --> 00:14:20,639
so let's check it out

382
00:14:21,120 --> 00:14:24,320
we created a new repository called test

383
00:14:24,320 --> 00:14:27,279
and we use the aws command line tool to

384
00:14:27,279 --> 00:14:29,760
update it and specify a new path from

385
00:14:29,760 --> 00:14:32,320
which the readme file should be pulled

386
00:14:32,320 --> 00:14:34,160
as you can see in the slide we are

387
00:14:34,160 --> 00:14:36,240
asking the server's repository to pull

388
00:14:36,240 --> 00:14:38,399
the readme file from another user's

389
00:14:38,399 --> 00:14:39,680
pocket

390
00:14:39,680 --> 00:14:42,079
serverless repo app number 10

391
00:14:42,079 --> 00:14:44,560
is a isolated bucket owned by another

392
00:14:44,560 --> 00:14:45,519
account

393
00:14:45,519 --> 00:14:48,480
and we will try to read from it

394
00:14:48,480 --> 00:14:51,440
let's go for a demo

395
00:14:54,160 --> 00:14:58,000
so as you can see in my console

396
00:14:58,000 --> 00:15:00,240
using the aws command line tool

397
00:15:00,240 --> 00:15:02,880
to perform update application operation

398
00:15:02,880 --> 00:15:05,680
on my repository

399
00:15:05,680 --> 00:15:07,360
named test

400
00:15:07,360 --> 00:15:10,480
we will specify the ribbon url in which

401
00:15:10,480 --> 00:15:13,600
the serverless repo will pull

402
00:15:13,600 --> 00:15:16,240
our redmi file and i will specify

403
00:15:16,240 --> 00:15:19,519
another bucket bucket that i don't own

404
00:15:19,519 --> 00:15:22,160
called several slip-on app number 10

405
00:15:22,160 --> 00:15:24,320
and we will try to fetch

406
00:15:24,320 --> 00:15:27,120
the config.yaml file

407
00:15:27,120 --> 00:15:30,000
let's give it a try

408
00:15:31,360 --> 00:15:32,959
as you can see in the response the

409
00:15:32,959 --> 00:15:34,639
operation succeed

410
00:15:34,639 --> 00:15:37,600
and now we have a readme file in our

411
00:15:37,600 --> 00:15:40,079
repository

412
00:15:40,079 --> 00:15:42,160
that if everything works fine it was

413
00:15:42,160 --> 00:15:45,279
copied from our target bucket

414
00:15:45,279 --> 00:15:49,439
let's use curl to fetch this file

415
00:15:50,240 --> 00:15:52,720
wow this is amazing we managed to read

416
00:15:52,720 --> 00:15:54,639
the config yaml file

417
00:15:54,639 --> 00:15:55,839
from

418
00:15:55,839 --> 00:15:58,560
the target bucket and this is a cst file

419
00:15:58,560 --> 00:16:00,560
that could contain sensitive information

420
00:16:00,560 --> 00:16:02,399
like this one which contains docker

421
00:16:02,399 --> 00:16:05,360
registry credentials

422
00:16:05,360 --> 00:16:09,279
if we go to the buckets we will see this

423
00:16:09,279 --> 00:16:11,519
is the bucket in another account

424
00:16:11,519 --> 00:16:13,199
we can see that the

425
00:16:13,199 --> 00:16:15,600
bucket objects are not public

426
00:16:15,600 --> 00:16:17,120
as aws states

427
00:16:17,120 --> 00:16:18,560
and also all the

428
00:16:18,560 --> 00:16:20,320
block

429
00:16:20,320 --> 00:16:22,320
block public access features are turned

430
00:16:22,320 --> 00:16:24,000
on

431
00:16:24,000 --> 00:16:25,680
the market also have

432
00:16:25,680 --> 00:16:27,279
the resource policy that allows

433
00:16:27,279 --> 00:16:29,920
serverless repo to perform get object on

434
00:16:29,920 --> 00:16:32,399
the packet

435
00:16:32,720 --> 00:16:35,040
i enabled the logs and monitoring of the

436
00:16:35,040 --> 00:16:38,240
bucket and

437
00:16:38,240 --> 00:16:39,680
pull it all to

438
00:16:39,680 --> 00:16:41,199
aws antenna

439
00:16:41,199 --> 00:16:43,120
here we can see the logs

440
00:16:43,120 --> 00:16:45,040
of our operations

441
00:16:45,040 --> 00:16:46,480
and as you can see

442
00:16:46,480 --> 00:16:48,800
the serverless the requester of the

443
00:16:48,800 --> 00:16:51,120
operation was the serverless repository

444
00:16:51,120 --> 00:16:52,079
service

445
00:16:52,079 --> 00:16:54,240
and it has no ip address

446
00:16:54,240 --> 00:16:56,320
which will be very hard to track it

447
00:16:56,320 --> 00:16:59,360
looks like a very innocent operation

448
00:16:59,360 --> 00:17:01,360
and

449
00:17:01,360 --> 00:17:05,160
this is a very unique thing

450
00:17:08,959 --> 00:17:11,199
so this is insane performing get object

451
00:17:11,199 --> 00:17:13,359
of get object operations on any

452
00:17:13,359 --> 00:17:15,039
serverless repository bucket is

453
00:17:15,039 --> 00:17:17,199
definitely not intended and this proves

454
00:17:17,199 --> 00:17:19,760
that there is a pattern here

455
00:17:19,760 --> 00:17:22,000
a several supposedly buckets may contain

456
00:17:22,000 --> 00:17:23,679
sensitive information that should never

457
00:17:23,679 --> 00:17:25,359
leave the organization

458
00:17:25,359 --> 00:17:26,720
source code leakage can expose

459
00:17:26,720 --> 00:17:28,559
intellectual property internal

460
00:17:28,559 --> 00:17:30,640
architecture code vulnerabilities and

461
00:17:30,640 --> 00:17:32,240
sometimes even hard-coded secrets and

462
00:17:32,240 --> 00:17:33,280
password

463
00:17:33,280 --> 00:17:34,799
and the buckets may have other users

464
00:17:34,799 --> 00:17:35,919
besides storing the serverless

465
00:17:35,919 --> 00:17:37,840
application and may contain other

466
00:17:37,840 --> 00:17:39,360
sensitive data

467
00:17:39,360 --> 00:17:41,039
however in order to exploit the

468
00:17:41,039 --> 00:17:43,039
vulnerability on a real target the

469
00:17:43,039 --> 00:17:44,720
attacker will need to know the names of

470
00:17:44,720 --> 00:17:46,480
the objects they wanted to read the

471
00:17:46,480 --> 00:17:48,480
names can be anything and requires pure

472
00:17:48,480 --> 00:17:49,840
knowledge of the target

473
00:17:49,840 --> 00:17:51,520
or to combine a vulnerability with

474
00:17:51,520 --> 00:17:53,840
additional techniques

475
00:17:53,840 --> 00:17:55,600
there is a high risk of such

476
00:17:55,600 --> 00:17:56,880
vulnerabilities

477
00:17:56,880 --> 00:17:59,200
that they allow exfiltration of data out

478
00:17:59,200 --> 00:18:00,400
of the organization

479
00:18:00,400 --> 00:18:02,400
without any incrementing in the

480
00:18:02,400 --> 00:18:03,679
indicators

481
00:18:03,679 --> 00:18:05,280
as we've seen the logs the data

482
00:18:05,280 --> 00:18:07,039
exploration is done by the serverless

483
00:18:07,039 --> 00:18:08,960
repository itself and looks like a

484
00:18:08,960 --> 00:18:11,200
routine and innocent activity

485
00:18:11,200 --> 00:18:13,280
everyone trusts amazon services and such

486
00:18:13,280 --> 00:18:15,840
an action will not be revealed even in

487
00:18:15,840 --> 00:18:19,760
the most isolated organizations

488
00:18:22,960 --> 00:18:24,080
so

489
00:18:24,080 --> 00:18:25,840
why we've seen so far

490
00:18:25,840 --> 00:18:28,480
basically we broke the isolation

491
00:18:28,480 --> 00:18:30,640
we showed you here three vulnerabilities

492
00:18:30,640 --> 00:18:32,400
in three different services that we were

493
00:18:32,400 --> 00:18:35,360
able to write and read data and we have

494
00:18:35,360 --> 00:18:37,280
several more vulnerabilities currently

495
00:18:37,280 --> 00:18:38,960
in disclosure process some of them even

496
00:18:38,960 --> 00:18:41,039
allowing to run code

497
00:18:41,039 --> 00:18:42,960
now these are just the services that we

498
00:18:42,960 --> 00:18:45,280
looked at but this is just the tip of

499
00:18:45,280 --> 00:18:47,600
the iceberg there's hundreds of services

500
00:18:47,600 --> 00:18:49,679
in address and many of them are getting

501
00:18:49,679 --> 00:18:51,840
more and more cross-account capabilities

502
00:18:51,840 --> 00:18:53,919
because cross-account is the main

503
00:18:53,919 --> 00:18:56,480
strategy today for organizations using

504
00:18:56,480 --> 00:18:58,880
aws so the attack surface is just

505
00:18:58,880 --> 00:19:01,360
growing and what we understood is that

506
00:19:01,360 --> 00:19:04,160
any service that performs cross-account

507
00:19:04,160 --> 00:19:05,280
actions

508
00:19:05,280 --> 00:19:07,679
might be in the risk to be manipulated

509
00:19:07,679 --> 00:19:11,120
by an attacker to perform actions on the

510
00:19:11,120 --> 00:19:13,280
isolated customer account

511
00:19:13,280 --> 00:19:16,720
so this is really in our view a new

512
00:19:16,720 --> 00:19:18,240
class of probabilities across account

513
00:19:18,240 --> 00:19:20,240
vulnerabilities that

514
00:19:20,240 --> 00:19:23,360
there will be many many more in

515
00:19:23,360 --> 00:19:27,918
coming as we look into more services

516
00:19:28,880 --> 00:19:30,880
so now i want to take you

517
00:19:30,880 --> 00:19:33,679
to the second part of this talk

518
00:19:33,679 --> 00:19:36,160
what we learned about the process of

519
00:19:36,160 --> 00:19:38,240
fixing cloud vulnerabilities what works

520
00:19:38,240 --> 00:19:39,919
about it and what is completely

521
00:19:39,919 --> 00:19:42,080
problematic so let's take you through

522
00:19:42,080 --> 00:19:43,360
the timeline

523
00:19:43,360 --> 00:19:45,520
let's start from the time we actually

524
00:19:45,520 --> 00:19:47,200
sent the report so this was around

525
00:19:47,200 --> 00:19:48,400
november

526
00:19:48,400 --> 00:19:51,360
and address team worked with us fix this

527
00:19:51,360 --> 00:19:53,360
really quickly so around

528
00:19:53,360 --> 00:19:55,200
generally all of the vulnerabilities

529
00:19:55,200 --> 00:19:56,880
were completely fixed

530
00:19:56,880 --> 00:19:59,120
and they responded they notified

531
00:19:59,120 --> 00:20:02,559
customers everything went as planned

532
00:20:02,559 --> 00:20:05,200
basically they the rest in fixed and

533
00:20:05,200 --> 00:20:07,679
completely closed aws config and cloud

534
00:20:07,679 --> 00:20:10,080
trail vulnerabilities how did they do it

535
00:20:10,080 --> 00:20:13,360
so we used a way to use the prefix in

536
00:20:13,360 --> 00:20:17,360
order to bypass the aws logs and ability

537
00:20:17,360 --> 00:20:19,840
of a cloud trail to write into a

538
00:20:19,840 --> 00:20:22,000
specific folder so what they did is

539
00:20:22,000 --> 00:20:24,240
basically they blocked the ability to

540
00:20:24,240 --> 00:20:27,200
have advanced logs inside this prefix

541
00:20:27,200 --> 00:20:29,919
and that closes the vulnerability image

542
00:20:29,919 --> 00:20:31,600
was sent to customers and also

543
00:20:31,600 --> 00:20:34,159
notifications sent in a personal health

544
00:20:34,159 --> 00:20:36,240
dashboard so seems like this

545
00:20:36,240 --> 00:20:38,400
vulnerability was completely closed

546
00:20:38,400 --> 00:20:40,880
there we should say it was closed only

547
00:20:40,880 --> 00:20:43,679
for customers to really really go and

548
00:20:43,679 --> 00:20:46,000
actually take the documentation from aws

549
00:20:46,000 --> 00:20:48,640
and do exactly as it says right because

550
00:20:48,640 --> 00:20:50,480
many customers

551
00:20:50,480 --> 00:20:52,799
close their vulnerability for this but

552
00:20:52,799 --> 00:20:54,960
if they just did cloud trade and they

553
00:20:54,960 --> 00:20:56,559
gave access cloud turned to an entire

554
00:20:56,559 --> 00:20:58,400
packet what we've seen many customers

555
00:20:58,400 --> 00:21:00,640
did it because again we trust cert

556
00:21:00,640 --> 00:21:01,760
awareness

557
00:21:01,760 --> 00:21:03,840
then they're still susceptible to this

558
00:21:03,840 --> 00:21:06,480
vulnerability

559
00:21:06,960 --> 00:21:09,679
this is the kind of notifications abs

560
00:21:09,679 --> 00:21:12,400
sent customers that this kind of a

561
00:21:12,400 --> 00:21:14,240
prefix at the best logs will not be

562
00:21:14,240 --> 00:21:16,960
available after this date

563
00:21:16,960 --> 00:21:19,360
so now to the second one of it that was

564
00:21:19,360 --> 00:21:21,360
fixed that's even more interesting so

565
00:21:21,360 --> 00:21:23,600
everybody else did hear exactly what you

566
00:21:23,600 --> 00:21:26,400
would expect the problem was coping so

567
00:21:26,400 --> 00:21:28,480
they added a scoping condition

568
00:21:28,480 --> 00:21:31,120
so you can actually say you can access

569
00:21:31,120 --> 00:21:33,280
this bucket from servers repo but only

570
00:21:33,280 --> 00:21:35,280
from a specific source account that's

571
00:21:35,280 --> 00:21:38,240
great they also send users notifications

572
00:21:38,240 --> 00:21:40,400
and they also send notifications in the

573
00:21:40,400 --> 00:21:42,480
personality of dashboard perfect and

574
00:21:42,480 --> 00:21:44,960
also the fix looks great this is exactly

575
00:21:44,960 --> 00:21:46,559
what you would expect you would expect

576
00:21:46,559 --> 00:21:49,120
this now we have a condition that

577
00:21:49,120 --> 00:21:52,240
specifies the source target so if i am

578
00:21:52,240 --> 00:21:54,480
using service repo i need to state

579
00:21:54,480 --> 00:21:56,880
exactly which account is allowed to

580
00:21:56,880 --> 00:21:59,120
access the bucket so

581
00:21:59,120 --> 00:22:01,440
everything at this point looked great we

582
00:22:01,440 --> 00:22:03,919
found a few abilities edibles fixed them

583
00:22:03,919 --> 00:22:05,679
and we thought it's over

584
00:22:05,679 --> 00:22:08,240
then what happened

585
00:22:08,240 --> 00:22:10,559
is that we looked after a few months in

586
00:22:10,559 --> 00:22:11,600
the

587
00:22:11,600 --> 00:22:13,120
that we can survey

588
00:22:13,120 --> 00:22:14,880
and we try to see what is the current

589
00:22:14,880 --> 00:22:15,919
status

590
00:22:15,919 --> 00:22:19,440
and there we were completely surprised

591
00:22:19,440 --> 00:22:21,919
five months after those vulnerabilities

592
00:22:21,919 --> 00:22:23,440
were closed

593
00:22:23,440 --> 00:22:25,600
majority of customers were still

594
00:22:25,600 --> 00:22:28,400
vulnerable in fact the our server showed

595
00:22:28,400 --> 00:22:29,760
that 90

596
00:22:29,760 --> 00:22:32,080
of the servers repository buckets were

597
00:22:32,080 --> 00:22:34,080
still vulnerable to the vulnerability

598
00:22:34,080 --> 00:22:37,280
that we found 90 percent how can that be

599
00:22:37,280 --> 00:22:39,360
it was all fixed the interesting act

600
00:22:39,360 --> 00:22:41,760
quickly send notifications how can that

601
00:22:41,760 --> 00:22:44,400
be that the vulnerability is still there

602
00:22:44,400 --> 00:22:46,960
so we started thinking about it

603
00:22:46,960 --> 00:22:48,559
and the more we thought about it we

604
00:22:48,559 --> 00:22:51,360
understood that the entire process of

605
00:22:51,360 --> 00:22:53,600
handling cloud vulnerabilities

606
00:22:53,600 --> 00:22:56,080
is completely broken we looked into that

607
00:22:56,080 --> 00:22:57,600
we looked at the environments what we

608
00:22:57,600 --> 00:23:00,640
understood is that the users even though

609
00:23:00,640 --> 00:23:02,640
some of them got emails the users are

610
00:23:02,640 --> 00:23:05,039
responsible to fix this vulnerability

611
00:23:05,039 --> 00:23:07,280
aws cannot fix it if they could they

612
00:23:07,280 --> 00:23:08,640
would have fixed it on their own but

613
00:23:08,640 --> 00:23:11,039
they can't because they cannot know what

614
00:23:11,039 --> 00:23:12,480
was the source

615
00:23:12,480 --> 00:23:15,039
account that you made as a user so the

616
00:23:15,039 --> 00:23:17,919
users need to fix this vulnerability and

617
00:23:17,919 --> 00:23:19,520
the problem is that

618
00:23:19,520 --> 00:23:21,840
they simply don't they're not they lack

619
00:23:21,840 --> 00:23:24,240
awareness the security teams don't even

620
00:23:24,240 --> 00:23:26,000
know the vulnerability exists because

621
00:23:26,000 --> 00:23:27,760
the security teams are not getting those

622
00:23:27,760 --> 00:23:29,919
emails imagine you are a security team

623
00:23:29,919 --> 00:23:31,360
and you have hundreds of different

624
00:23:31,360 --> 00:23:33,200
accounts usually you don't even have

625
00:23:33,200 --> 00:23:34,640
permissions to the account how can you

626
00:23:34,640 --> 00:23:36,640
know there is an email waiting for one

627
00:23:36,640 --> 00:23:38,240
of the account managers and how many

628
00:23:38,240 --> 00:23:39,760
emails are being sent how do you know

629
00:23:39,760 --> 00:23:41,760
this is an important fix to do and this

630
00:23:41,760 --> 00:23:44,240
is the reason that those fixes didn't

631
00:23:44,240 --> 00:23:45,520
actually occur

632
00:23:45,520 --> 00:23:47,279
and the more we thought about it the

633
00:23:47,279 --> 00:23:49,200
more we understood this is a big big

634
00:23:49,200 --> 00:23:51,919
problem so

635
00:23:51,919 --> 00:23:54,400
we had two main takeaways

636
00:23:54,400 --> 00:23:56,159
the first takeaway related to the

637
00:23:56,159 --> 00:23:58,960
research that we've done on across every

638
00:23:58,960 --> 00:24:00,720
success is that

639
00:24:00,720 --> 00:24:04,640
service access is a new type of cloud

640
00:24:04,640 --> 00:24:07,440
exposure risk whenever we give access to

641
00:24:07,440 --> 00:24:08,799
a service

642
00:24:08,799 --> 00:24:11,520
until now i thought it's okay i trusted

643
00:24:11,520 --> 00:24:12,640
the gls

644
00:24:12,640 --> 00:24:14,640
so i trusted the web services so i can

645
00:24:14,640 --> 00:24:16,640
give them any access that they want

646
00:24:16,640 --> 00:24:19,200
but that's not true if you give access

647
00:24:19,200 --> 00:24:20,640
to a service

648
00:24:20,640 --> 00:24:23,039
an attacker as we saw here and again we

649
00:24:23,039 --> 00:24:24,799
saw just a few examples an attacker

650
00:24:24,799 --> 00:24:27,279
might be able to manipulate the service

651
00:24:27,279 --> 00:24:29,600
in order to access your resources so the

652
00:24:29,600 --> 00:24:31,760
new way to think about service access is

653
00:24:31,760 --> 00:24:33,760
that service access is a type of cloud

654
00:24:33,760 --> 00:24:35,919
exposure and needs to be handled like

655
00:24:35,919 --> 00:24:37,360
cloud exposure

656
00:24:37,360 --> 00:24:39,360
what permissions are we giving the

657
00:24:39,360 --> 00:24:42,480
service why can we scope it did we scope

658
00:24:42,480 --> 00:24:45,520
it did we give any service access that

659
00:24:45,520 --> 00:24:48,080
wasn't supposed to be given now this is

660
00:24:48,080 --> 00:24:50,320
great as a high level recommendation but

661
00:24:50,320 --> 00:24:52,240
the reality is this is really hard

662
00:24:52,240 --> 00:24:54,480
because each service has a different way

663
00:24:54,480 --> 00:24:56,880
to scope as we saw cloudtrail is using a

664
00:24:56,880 --> 00:25:00,159
tef and srs report has the condition and

665
00:25:00,159 --> 00:25:02,080
some services don't even support those

666
00:25:02,080 --> 00:25:03,760
conditions yet

667
00:25:03,760 --> 00:25:06,080
and what we saw is that it's not only

668
00:25:06,080 --> 00:25:08,400
about the complexity of the services

669
00:25:08,400 --> 00:25:09,760
that some of the vulnerabilities we

670
00:25:09,760 --> 00:25:12,880
found they persisted because we actually

671
00:25:12,880 --> 00:25:15,279
found github projects that still contain

672
00:25:15,279 --> 00:25:17,440
the code that was before the condition

673
00:25:17,440 --> 00:25:19,679
was added right so it's vulnerable code

674
00:25:19,679 --> 00:25:22,799
and users keep using them so they the

675
00:25:22,799 --> 00:25:25,360
problem may arise from different

676
00:25:25,360 --> 00:25:27,200
templates and code infrastructures score

677
00:25:27,200 --> 00:25:28,480
that you're using that still has

678
00:25:28,480 --> 00:25:30,640
vulnerable code it's even worse than

679
00:25:30,640 --> 00:25:32,880
that

680
00:25:32,960 --> 00:25:35,919
every few weeks a new course account

681
00:25:35,919 --> 00:25:38,240
service gets new permissions like you

682
00:25:38,240 --> 00:25:40,799
see different blogs by aws about cloud

683
00:25:40,799 --> 00:25:43,200
cloudtrade about glue and there was slew

684
00:25:43,200 --> 00:25:45,919
getting cross-account access to kinesis

685
00:25:45,919 --> 00:25:47,600
or could be getting cross-account

686
00:25:47,600 --> 00:25:49,360
capabilities or scs getting

687
00:25:49,360 --> 00:25:51,039
cross-counter capabilities

688
00:25:51,039 --> 00:25:54,000
any of these services a day before this

689
00:25:54,000 --> 00:25:57,600
was announced the same resource policy

690
00:25:57,600 --> 00:25:58,880
was not

691
00:25:58,880 --> 00:26:01,200
vulnerable once it becomes pros account

692
00:26:01,200 --> 00:26:03,120
it becomes more of it how can i track

693
00:26:03,120 --> 00:26:04,880
all of that so there's infrastructure as

694
00:26:04,880 --> 00:26:06,559
code there's new services there's

695
00:26:06,559 --> 00:26:08,880
different conditions it's impossible to

696
00:26:08,880 --> 00:26:10,960
treat that how am i able to expect the

697
00:26:10,960 --> 00:26:14,480
users the security teams to track

698
00:26:14,480 --> 00:26:16,240
all of those notifications

699
00:26:16,240 --> 00:26:17,760
and that led us

700
00:26:17,760 --> 00:26:20,480
to the second takeaway and i think

701
00:26:20,480 --> 00:26:22,720
this takeaway is probably

702
00:26:22,720 --> 00:26:24,640
bigger than the specific research that

703
00:26:24,640 --> 00:26:26,000
we did

704
00:26:26,000 --> 00:26:28,880
this is around cloud vulnerabilities

705
00:26:28,880 --> 00:26:30,080
the process

706
00:26:30,080 --> 00:26:31,279
is broken

707
00:26:31,279 --> 00:26:34,080
even notifications are definitely not

708
00:26:34,080 --> 00:26:37,360
the solution we cannot expect a security

709
00:26:37,360 --> 00:26:39,919
team that to track even notifications

710
00:26:39,919 --> 00:26:42,159
usually don't even get them and there is

711
00:26:42,159 --> 00:26:44,000
hundreds of changes in cloud providers

712
00:26:44,000 --> 00:26:45,840
every day they don't even know the

713
00:26:45,840 --> 00:26:48,159
security implication how can we expect

714
00:26:48,159 --> 00:26:50,159
the security teams to trick that and

715
00:26:50,159 --> 00:26:53,440
even more than that we are with a cloud

716
00:26:53,440 --> 00:26:55,200
security company we found a few

717
00:26:55,200 --> 00:26:57,039
vulnerabilities and i want to notify

718
00:26:57,039 --> 00:26:58,720
customers what am i supposed to tell

719
00:26:58,720 --> 00:27:00,880
them hey you have share vulnerability

720
00:27:00,880 --> 00:27:02,080
number one and share vulnerability

721
00:27:02,080 --> 00:27:04,080
number two but how do i tell them their

722
00:27:04,080 --> 00:27:06,400
vulnerability and even more than that i

723
00:27:06,400 --> 00:27:07,919
want to share their abilities that we

724
00:27:07,919 --> 00:27:10,000
found with the industry with

725
00:27:10,000 --> 00:27:12,080
practitioners with other cloud security

726
00:27:12,080 --> 00:27:14,640
companies how am i supposed to do that

727
00:27:14,640 --> 00:27:16,880
what's the format to do that

728
00:27:16,880 --> 00:27:18,720
it feels like there's a bigger problem

729
00:27:18,720 --> 00:27:20,640
here that we need to fix there is a

730
00:27:20,640 --> 00:27:22,720
maturity problem here and as the more we

731
00:27:22,720 --> 00:27:24,240
looked into it the more we talked with

732
00:27:24,240 --> 00:27:27,120
people from the industry we understood

733
00:27:27,120 --> 00:27:30,559
the same problem was already fixed

734
00:27:30,559 --> 00:27:32,799
in a different domain

735
00:27:32,799 --> 00:27:35,840
20 years ago in 1999

736
00:27:35,840 --> 00:27:38,559
the cve system was born why did we

737
00:27:38,559 --> 00:27:41,440
invent the cve system cpe

738
00:27:41,440 --> 00:27:44,320
was a way to identify and create a

739
00:27:44,320 --> 00:27:46,480
central database for all vulnerabilities

740
00:27:46,480 --> 00:27:48,880
in code because before we had the cve

741
00:27:48,880 --> 00:27:52,080
system every vendor and every customer

742
00:27:52,080 --> 00:27:54,159
were managing code vulnerabilities in

743
00:27:54,159 --> 00:27:56,159
their own separate databases so you

744
00:27:56,159 --> 00:27:58,480
could never understand exactly what

745
00:27:58,480 --> 00:28:00,000
vulnerabilities you have and what

746
00:28:00,000 --> 00:28:03,679
workflow was fixed cbe system solved the

747
00:28:03,679 --> 00:28:06,080
three key problems that we face today in

748
00:28:06,080 --> 00:28:08,399
california abilities number one

749
00:28:08,399 --> 00:28:10,399
identification

750
00:28:10,399 --> 00:28:12,159
instead of having shear vulnerability

751
00:28:12,159 --> 00:28:13,760
number one and share vulnerability

752
00:28:13,760 --> 00:28:17,679
number two we should have cloud cve 2021

753
00:28:17,679 --> 00:28:20,320
532 we should have a shared naming

754
00:28:20,320 --> 00:28:22,000
system so we can identify the

755
00:28:22,000 --> 00:28:23,760
vulnerabilities that we found and when

756
00:28:23,760 --> 00:28:24,480
we

757
00:28:24,480 --> 00:28:26,000
found those vulnerabilities we should

758
00:28:26,000 --> 00:28:29,520
submit it to someone right and get a cve

759
00:28:29,520 --> 00:28:32,399
a cloud cve id the second problem that

760
00:28:32,399 --> 00:28:35,279
the cbe system solves is the severity

761
00:28:35,279 --> 00:28:37,440
today you get an email notification but

762
00:28:37,440 --> 00:28:39,440
you don't know how severe severe it is

763
00:28:39,440 --> 00:28:41,760
maybe shares vulnerabilities here would

764
00:28:41,760 --> 00:28:44,799
get maybe a 6 out of ten because they're

765
00:28:44,799 --> 00:28:47,120
not easy to exploit and the impact is

766
00:28:47,120 --> 00:28:49,120
limited right so

767
00:28:49,120 --> 00:28:51,760
once we have a clear severity mechanism

768
00:28:51,760 --> 00:28:53,919
it allows the the security

769
00:28:53,919 --> 00:28:56,559
teams to prioritize or to fix and what

770
00:28:56,559 --> 00:28:58,960
is not and less urgent to fix so

771
00:28:58,960 --> 00:29:00,399
identity

772
00:29:00,399 --> 00:29:02,320
prioritization and severity and the

773
00:29:02,320 --> 00:29:04,880
third which is not less important is

774
00:29:04,880 --> 00:29:06,559
tracking systems

775
00:29:06,559 --> 00:29:07,760
tools

776
00:29:07,760 --> 00:29:09,760
that allow you to understand exactly

777
00:29:09,760 --> 00:29:11,360
what probabilities you have what you

778
00:29:11,360 --> 00:29:13,919
don't have it cannot depend on the fact

779
00:29:13,919 --> 00:29:15,840
that hey in which we found three

780
00:29:15,840 --> 00:29:17,440
vulnerabilities and there's other

781
00:29:17,440 --> 00:29:18,720
customer knows about two other

782
00:29:18,720 --> 00:29:20,799
vulnerabilities no we need a center

783
00:29:20,799 --> 00:29:22,960
database and we need tools that tell you

784
00:29:22,960 --> 00:29:24,880
exactly which vulnerabilities and what

785
00:29:24,880 --> 00:29:27,039
severity you have just like we have when

786
00:29:27,039 --> 00:29:28,960
we scan container images and i get a

787
00:29:28,960 --> 00:29:31,200
report and we get the same report from

788
00:29:31,200 --> 00:29:32,880
all tools these are the vulnerabilities

789
00:29:32,880 --> 00:29:34,640
you have these are critical these are

790
00:29:34,640 --> 00:29:36,080
high these are medium and this is what

791
00:29:36,080 --> 00:29:39,600
you have to fix we should do that for

792
00:29:39,600 --> 00:29:42,080
cloud cvs as well

793
00:29:42,080 --> 00:29:42,799
and

794
00:29:42,799 --> 00:29:45,360
we want to leverage this stock

795
00:29:45,360 --> 00:29:48,080
as a call for action to the industry we

796
00:29:48,080 --> 00:29:50,080
believe this is the time

797
00:29:50,080 --> 00:29:52,559
for the cloud security to become more

798
00:29:52,559 --> 00:29:56,000
mature it's time to create the cloud cve

799
00:29:56,000 --> 00:30:00,000
database and we twist in the cloud

800
00:30:00,000 --> 00:30:02,399
research team and the company we want to

801
00:30:02,399 --> 00:30:05,440
cooperate with anyone with practitioners

802
00:30:05,440 --> 00:30:07,840
with other organizations that are

803
00:30:07,840 --> 00:30:10,880
willing to build this cross cloud

804
00:30:10,880 --> 00:30:12,720
vulnerability database and again i'm

805
00:30:12,720 --> 00:30:14,399
saying cross cloud because this is not

806
00:30:14,399 --> 00:30:17,760
an aws problem aws our security work

807
00:30:17,760 --> 00:30:19,279
with us they they fix their

808
00:30:19,279 --> 00:30:21,440
vulnerabilities they keep thinking about

809
00:30:21,440 --> 00:30:24,159
new ways to notify customers they

810
00:30:24,159 --> 00:30:26,640
recently created the access analyzer

811
00:30:26,640 --> 00:30:27,679
that will have this kind of

812
00:30:27,679 --> 00:30:29,600
notifications as well but this is not

813
00:30:29,600 --> 00:30:30,880
enough

814
00:30:30,880 --> 00:30:33,120
the problem is cross-cloud and this is

815
00:30:33,120 --> 00:30:34,880
an industry problem and we need to solve

816
00:30:34,880 --> 00:30:37,679
it as an industry and i think it is time

817
00:30:37,679 --> 00:30:39,760
so we would love to partner with any

818
00:30:39,760 --> 00:30:42,559
company organization or practitioner

819
00:30:42,559 --> 00:30:44,880
that wants to build this shared

820
00:30:44,880 --> 00:30:47,120
availability database and for me this is

821
00:30:47,120 --> 00:30:50,480
the most important takeaway from this

822
00:30:50,480 --> 00:30:52,720
talk

823
00:30:57,760 --> 00:30:59,679
so and now i would like to talk about

824
00:30:59,679 --> 00:31:01,919
further research both on the other side

825
00:31:01,919 --> 00:31:03,360
and also

826
00:31:03,360 --> 00:31:05,039
on the community side

827
00:31:05,039 --> 00:31:07,919
and mapping aws services that have

828
00:31:07,919 --> 00:31:10,480
consequent features takes a lot of time

829
00:31:10,480 --> 00:31:12,720
and amazon has more than 200 services

830
00:31:12,720 --> 00:31:14,159
and it's very difficult to figure which

831
00:31:14,159 --> 00:31:15,519
service have crossed account

832
00:31:15,519 --> 00:31:17,279
functionality and which not

833
00:31:17,279 --> 00:31:19,679
for us what worked best was to govern

834
00:31:19,679 --> 00:31:21,519
resource policies in our environment and

835
00:31:21,519 --> 00:31:23,840
re-database documentations i want to

836
00:31:23,840 --> 00:31:25,919
encourage the research community to

837
00:31:25,919 --> 00:31:28,240
continue this research in parallel to us

838
00:31:28,240 --> 00:31:29,840
and help the community uncover more

839
00:31:29,840 --> 00:31:32,159
problematic cost account functionality

840
00:31:32,159 --> 00:31:34,000
in addition we believe that cost account

841
00:31:34,000 --> 00:31:36,399
vulnerabilities based on identity issues

842
00:31:36,399 --> 00:31:37,840
can also be found in other cloud

843
00:31:37,840 --> 00:31:40,640
providers and there is so much more

844
00:31:40,640 --> 00:31:43,360
research to be done in the field

845
00:31:43,360 --> 00:31:45,279
those of you would like to research the

846
00:31:45,279 --> 00:31:48,080
subjects or in general anyone with

847
00:31:48,080 --> 00:31:50,000
questions or idea please feel free to

848
00:31:50,000 --> 00:31:51,600
contact us we would love to hear from

849
00:31:51,600 --> 00:31:52,960
you

850
00:31:52,960 --> 00:31:56,200
thank you

