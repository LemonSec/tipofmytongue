1
00:00:01,130 --> 00:00:14,690
[Music]

2
00:00:16,000 --> 00:00:16,880
hello

3
00:00:16,880 --> 00:00:19,840
my name is maya schulman i lead the

4
00:00:19,840 --> 00:00:22,720
cyber security analytics and defenses

5
00:00:22,720 --> 00:00:26,080
department at franofa sit institute in

6
00:00:26,080 --> 00:00:28,640
the german national research center for

7
00:00:28,640 --> 00:00:32,640
applied cybersecurity atina

8
00:00:32,640 --> 00:00:34,640
in this presentation i will talk about

9
00:00:34,640 --> 00:00:37,200
the ownership validation in the internet

10
00:00:37,200 --> 00:00:39,680
and specifically the new distributed

11
00:00:39,680 --> 00:00:42,399
domain validation procedure deployed by

12
00:00:42,399 --> 00:00:43,760
let's encrypt

13
00:00:43,760 --> 00:00:46,719
i will show you that two central design

14
00:00:46,719 --> 00:00:48,320
issues of the distributed domain

15
00:00:48,320 --> 00:00:50,559
validation of let's encrypt make it

16
00:00:50,559 --> 00:00:53,199
vulnerable to downgraded tanks

17
00:00:53,199 --> 00:00:55,280
first the vantage points are selected

18
00:00:55,280 --> 00:00:56,800
from a fixed

19
00:00:56,800 --> 00:00:58,480
and a small set

20
00:00:58,480 --> 00:01:00,879
and second the way the vantage points

21
00:01:00,879 --> 00:01:03,120
select the name servers when they

22
00:01:03,120 --> 00:01:04,879
perform domain validation in the target

23
00:01:04,879 --> 00:01:08,080
domain can be manipulated by a remote

24
00:01:08,080 --> 00:01:10,240
adversary

25
00:01:10,240 --> 00:01:12,159
i will show you how these two

26
00:01:12,159 --> 00:01:14,080
observations can be used to launch

27
00:01:14,080 --> 00:01:16,159
downgrade attacks which can then be

28
00:01:16,159 --> 00:01:18,799
exploited for issuing fraudulent

29
00:01:18,799 --> 00:01:21,119
certificates

30
00:01:21,119 --> 00:01:24,159
so let's quickly look at ownership

31
00:01:24,159 --> 00:01:26,640
validation over domains focusing on the

32
00:01:26,640 --> 00:01:28,400
most popular procedure for verifying

33
00:01:28,400 --> 00:01:30,560
ownership over domains we then move on

34
00:01:30,560 --> 00:01:32,720
to explain the downgrade attacks against

35
00:01:32,720 --> 00:01:35,520
domain validation and we'll show you our

36
00:01:35,520 --> 00:01:37,680
two-sided experimental evaluation for

37
00:01:37,680 --> 00:01:39,840
issuing fraudulent certificates and

38
00:01:39,840 --> 00:01:41,439
finally we discuss

39
00:01:41,439 --> 00:01:42,799
countermeasures

40
00:01:42,799 --> 00:01:44,399
so it is important to protect

41
00:01:44,399 --> 00:01:46,240
communication to services from

42
00:01:46,240 --> 00:01:48,240
eavesdropping adversaries for this

43
00:01:48,240 --> 00:01:50,560
purpose we use the public key

44
00:01:50,560 --> 00:01:53,119
infrastructure or pki to identify the

45
00:01:53,119 --> 00:01:54,880
target server and use its keys to

46
00:01:54,880 --> 00:01:56,960
establish a secure communication to the

47
00:01:56,960 --> 00:01:58,079
server

48
00:01:58,079 --> 00:02:00,320
the certificate that the server sends

49
00:02:00,320 --> 00:02:02,640
says who the owner of the domain is

50
00:02:02,640 --> 00:02:04,399
establishing the correct identity of the

51
00:02:04,399 --> 00:02:06,079
server is critical imagine you create

52
00:02:06,079 --> 00:02:08,160
cryptographic keys and you use a tls to

53
00:02:08,160 --> 00:02:10,720
connect over a secure channel to some

54
00:02:10,720 --> 00:02:12,720
server but it is the wrong host for

55
00:02:12,720 --> 00:02:14,640
instance one that is controlled by an

56
00:02:14,640 --> 00:02:16,879
adversary so establishing the correct

57
00:02:16,879 --> 00:02:18,720
identity is therefore critical step to

58
00:02:18,720 --> 00:02:21,280
protecting our communication to services

59
00:02:21,280 --> 00:02:22,400
on the internet

60
00:02:22,400 --> 00:02:24,640
it essentially should protect criminals

61
00:02:24,640 --> 00:02:26,560
from obtaining fraudulent certificates

62
00:02:26,560 --> 00:02:30,000
for domains that they do not own

63
00:02:30,000 --> 00:02:30,720
so

64
00:02:30,720 --> 00:02:32,879
there are a number of ways for verifying

65
00:02:32,879 --> 00:02:35,200
ownership over domains

66
00:02:35,200 --> 00:02:37,680
and we focus on domain validation

67
00:02:37,680 --> 00:02:41,440
since it is supported by most cas

68
00:02:41,440 --> 00:02:42,879
these cas

69
00:02:42,879 --> 00:02:44,800
collectively control more than 95

70
00:02:44,800 --> 00:02:46,480
percent of the

71
00:02:46,480 --> 00:02:48,160
certificates market

72
00:02:48,160 --> 00:02:49,920
and the reason for such popularity of

73
00:02:49,920 --> 00:02:51,840
domain validation is that it is

74
00:02:51,840 --> 00:02:54,720
automated fast and cheap sometimes even

75
00:02:54,720 --> 00:02:56,239
free

76
00:02:56,239 --> 00:02:58,159
so how does it work

77
00:02:58,159 --> 00:02:59,920
before issuing certificates the

78
00:02:59,920 --> 00:03:02,159
certificate authorities run domain

79
00:03:02,159 --> 00:03:04,400
validation against services

80
00:03:04,400 --> 00:03:07,120
in a domain that is to be certified

81
00:03:07,120 --> 00:03:09,200
this is used to verify that the domain

82
00:03:09,200 --> 00:03:13,200
owner defacto controls the domain

83
00:03:13,200 --> 00:03:15,680
to verify control aca generates a

84
00:03:15,680 --> 00:03:18,000
challenge which the domain owner should

85
00:03:18,000 --> 00:03:20,159
integrate into the selected service in a

86
00:03:20,159 --> 00:03:21,120
domain

87
00:03:21,120 --> 00:03:23,599
for instance add the challenger the txt

88
00:03:23,599 --> 00:03:25,599
record to the zone file of the domain or

89
00:03:25,599 --> 00:03:28,239
add the challenge to a directory on the

90
00:03:28,239 --> 00:03:31,120
website in the domain

91
00:03:31,120 --> 00:03:32,879
and the ca then checks the present of

92
00:03:32,879 --> 00:03:34,720
the presence of the challenge by

93
00:03:34,720 --> 00:03:36,400
querying the selected service in the

94
00:03:36,400 --> 00:03:37,840
target domain

95
00:03:37,840 --> 00:03:39,519
since the challenge was sent to the

96
00:03:39,519 --> 00:03:40,560
domain

97
00:03:40,560 --> 00:03:43,920
a genuine owner can receive it and hence

98
00:03:43,920 --> 00:03:47,280
can respond correctly however an offbus

99
00:03:47,280 --> 00:03:49,120
adversary that does not control the

100
00:03:49,120 --> 00:03:50,959
domain cannot receive the challenge and

101
00:03:50,959 --> 00:03:52,560
therefore it should not be able to

102
00:03:52,560 --> 00:03:54,799
respond correctly and that is the basic

103
00:03:54,799 --> 00:03:58,400
idea which underlies domain validation

104
00:03:58,400 --> 00:04:03,519
now simple and cheap unfortunately it is

105
00:04:03,519 --> 00:04:06,400
not secure because um two

106
00:04:06,400 --> 00:04:08,080
recent projects which

107
00:04:08,080 --> 00:04:10,319
were published in independently in

108
00:04:10,319 --> 00:04:12,959
papers one and usenix 2018 and one in

109
00:04:12,959 --> 00:04:14,879
ccs demonstrated two different

110
00:04:14,879 --> 00:04:17,358
approaches for off-pass attacks against

111
00:04:17,358 --> 00:04:19,279
domain validation

112
00:04:19,279 --> 00:04:22,000
of popular cas the idea is that the

113
00:04:22,000 --> 00:04:23,919
attacker hijacks the challenge sent by

114
00:04:23,919 --> 00:04:26,840
the ca to the domain during the domain

115
00:04:26,840 --> 00:04:29,040
validation and this allows the attacker

116
00:04:29,040 --> 00:04:30,720
to respond with the correct challenge

117
00:04:30,720 --> 00:04:32,960
and demonstrate control over domain that

118
00:04:32,960 --> 00:04:35,440
it doesn't legitimately own

119
00:04:35,440 --> 00:04:36,960
and that's a really

120
00:04:36,960 --> 00:04:39,680
significant issue of course

121
00:04:39,680 --> 00:04:43,320
because um

122
00:04:44,400 --> 00:04:47,280
pki is such a significant

123
00:04:47,280 --> 00:04:48,479
block

124
00:04:48,479 --> 00:04:51,120
building block in the internet

125
00:04:51,120 --> 00:04:53,600
so let's encrypt was the first ca to

126
00:04:53,600 --> 00:04:55,120
react quickly to the disclosed

127
00:04:55,120 --> 00:04:56,880
vulnerabilities let's encrypt is one of

128
00:04:56,880 --> 00:04:59,919
the fastest growing cas in the pki

129
00:04:59,919 --> 00:05:01,280
ecosystem

130
00:05:01,280 --> 00:05:04,080
it has already issued over a billion

131
00:05:04,080 --> 00:05:07,280
certificates and serves over 2

132
00:05:07,280 --> 00:05:10,240
100 million websites

133
00:05:10,240 --> 00:05:12,240
so let's encrypt initiated efforts to

134
00:05:12,240 --> 00:05:13,600
enhance the security of domain

135
00:05:13,600 --> 00:05:15,440
validation even

136
00:05:15,440 --> 00:05:17,680
against own paths men in the middle

137
00:05:17,680 --> 00:05:19,199
adversaries

138
00:05:19,199 --> 00:05:20,880
so it is important to understand that a

139
00:05:20,880 --> 00:05:22,560
deployment

140
00:05:22,560 --> 00:05:24,479
by a certificate's market leader such as

141
00:05:24,479 --> 00:05:26,240
latin crypt is a huge step towards

142
00:05:26,240 --> 00:05:27,600
improving the security of domain

143
00:05:27,600 --> 00:05:30,240
validation and in 2020 let's encrypt

144
00:05:30,240 --> 00:05:32,240
deployed in the production environment

145
00:05:32,240 --> 00:05:35,039
mechanism called multiva domain

146
00:05:35,039 --> 00:05:37,759
validation from multiple validation

147
00:05:37,759 --> 00:05:39,120
authorities

148
00:05:39,120 --> 00:05:41,440
or vantage points

149
00:05:41,440 --> 00:05:43,600
and here on the left side you can see

150
00:05:43,600 --> 00:05:46,400
single validation authority

151
00:05:46,400 --> 00:05:48,160
which performs the main validation it

152
00:05:48,160 --> 00:05:49,840
selects one of the name servers and it

153
00:05:49,840 --> 00:05:51,680
sends the requests and communication

154
00:05:51,680 --> 00:05:53,840
with this name server on the right side

155
00:05:53,840 --> 00:05:57,120
however you see the multi-va domain

156
00:05:57,120 --> 00:06:00,160
validation and you you see

157
00:06:00,160 --> 00:06:01,919
um

158
00:06:01,919 --> 00:06:04,479
you see every validation authority sends

159
00:06:04,479 --> 00:06:06,880
the validation requests to a name server

160
00:06:06,880 --> 00:06:10,800
that it independently selected

161
00:06:10,800 --> 00:06:13,600
and there are many name servers

162
00:06:13,600 --> 00:06:14,560
and

163
00:06:14,560 --> 00:06:17,199
many validation authorities

164
00:06:17,199 --> 00:06:20,880
so currently let's encrypt users for

165
00:06:20,880 --> 00:06:22,800
validation authorities

166
00:06:22,800 --> 00:06:25,039
each runs a dns resolver software for

167
00:06:25,039 --> 00:06:27,440
looking up resources and domains and for

168
00:06:27,440 --> 00:06:30,800
validating control over domains

169
00:06:30,800 --> 00:06:33,919
when a request for a certificate arrives

170
00:06:33,919 --> 00:06:36,000
the four validation authorities perform

171
00:06:36,000 --> 00:06:36,960
lookup

172
00:06:36,960 --> 00:06:39,280
of the target domain by sending queries

173
00:06:39,280 --> 00:06:41,199
to the name servers which they select

174
00:06:41,199 --> 00:06:43,199
independently and current concurrently

175
00:06:43,199 --> 00:06:46,080
validate control over the domain

176
00:06:46,080 --> 00:06:47,840
now the

177
00:06:47,840 --> 00:06:49,120
idea

178
00:06:49,120 --> 00:06:50,319
is that

179
00:06:50,319 --> 00:06:52,880
even strong on-pass adversaries have

180
00:06:52,880 --> 00:06:57,039
limited capabilities in practice

181
00:06:57,039 --> 00:07:00,240
yeah so imagine on the left side if an

182
00:07:00,240 --> 00:07:02,400
adversary hijacks the validation

183
00:07:02,400 --> 00:07:03,520
authority

184
00:07:03,520 --> 00:07:06,000
then it hijacks all the communication

185
00:07:06,000 --> 00:07:07,440
right

186
00:07:07,440 --> 00:07:10,639
but on the right this is not so so

187
00:07:10,639 --> 00:07:12,720
the multiva assumes that the adversary

188
00:07:12,720 --> 00:07:14,160
may be able to hijack communication

189
00:07:14,160 --> 00:07:16,160
between some of the va's some of the

190
00:07:16,160 --> 00:07:18,880
name servers but not all of them

191
00:07:18,880 --> 00:07:21,120
so

192
00:07:22,160 --> 00:07:24,479
this even if you hijack some of the va's

193
00:07:24,479 --> 00:07:26,000
or some of the name servers it does not

194
00:07:26,000 --> 00:07:28,479
suffice to foil the entire domain

195
00:07:28,479 --> 00:07:30,960
validation since each validation

196
00:07:30,960 --> 00:07:32,960
authority independently selects the name

197
00:07:32,960 --> 00:07:34,880
server to which a query is sent

198
00:07:34,880 --> 00:07:37,199
so to impersonate ownership during the

199
00:07:37,199 --> 00:07:38,880
domain validation the adversary would

200
00:07:38,880 --> 00:07:40,400
need to hijack

201
00:07:40,400 --> 00:07:42,400
all the possible pairs of validation

202
00:07:42,400 --> 00:07:44,800
authorities and name servers

203
00:07:44,800 --> 00:07:46,720
and here's an interesting question

204
00:07:46,720 --> 00:07:50,919
how are the names that were selected

205
00:07:58,960 --> 00:07:59,919
so

206
00:07:59,919 --> 00:08:01,280
the selection of the name service

207
00:08:01,280 --> 00:08:03,599
considers performance yeah to ensure

208
00:08:03,599 --> 00:08:05,680
performance as well as to balance the

209
00:08:05,680 --> 00:08:08,080
load of queries among the name servers

210
00:08:08,080 --> 00:08:10,560
the dns software implementations use

211
00:08:10,560 --> 00:08:12,400
different logic for selecting the name

212
00:08:12,400 --> 00:08:14,479
service in the target domain

213
00:08:14,479 --> 00:08:16,560
domains typically use multiple name

214
00:08:16,560 --> 00:08:17,520
servers

215
00:08:17,520 --> 00:08:20,160
um on average three but a bit more than

216
00:08:20,160 --> 00:08:22,479
three but sometimes up to even 20 and

217
00:08:22,479 --> 00:08:24,319
more

218
00:08:24,319 --> 00:08:26,560
and how does the dns software select

219
00:08:26,560 --> 00:08:28,000
your name sorry in a domain to which a

220
00:08:28,000 --> 00:08:29,360
query is sent

221
00:08:29,360 --> 00:08:32,159
the implementations typically prefer

222
00:08:32,159 --> 00:08:35,519
least latent and most available servers

223
00:08:35,519 --> 00:08:37,919
to select the server the dns resolver

224
00:08:37,919 --> 00:08:40,080
monitors the performance of each name

225
00:08:40,080 --> 00:08:42,240
server in a domain and applies

226
00:08:42,240 --> 00:08:44,240
computation over the responsiveness of

227
00:08:44,240 --> 00:08:46,160
individual name servers as well as the

228
00:08:46,160 --> 00:08:47,680
latency

229
00:08:47,680 --> 00:08:50,399
and how do the vas of let's encrypt

230
00:08:50,399 --> 00:08:52,000
select the name service

231
00:08:52,000 --> 00:08:54,000
to analyze this we perform an experiment

232
00:08:54,000 --> 00:08:55,760
where we set up domains with name

233
00:08:55,760 --> 00:08:57,680
servers and we trigger queries to our

234
00:08:57,680 --> 00:08:58,959
domains

235
00:08:58,959 --> 00:09:00,560
our findings show that the queries are

236
00:09:00,560 --> 00:09:02,560
distributed among the name source

237
00:09:02,560 --> 00:09:04,800
independent of the geolocation and of

238
00:09:04,800 --> 00:09:06,080
the network block on which the

239
00:09:06,080 --> 00:09:07,760
nameservers are placed

240
00:09:07,760 --> 00:09:09,279
each vac

241
00:09:09,279 --> 00:09:11,680
sends a query to each name server with

242
00:09:11,680 --> 00:09:13,680
equal probability and

243
00:09:13,680 --> 00:09:15,519
each of the name servers receives

244
00:09:15,519 --> 00:09:17,279
roughly an equivalent portion of the

245
00:09:17,279 --> 00:09:19,360
queries from hva

246
00:09:19,360 --> 00:09:21,600
so what happens when we introduce losses

247
00:09:21,600 --> 00:09:24,320
or high latency we observed that the vas

248
00:09:24,320 --> 00:09:26,480
distribute the queries among the name

249
00:09:26,480 --> 00:09:29,279
servers which have latency below 400

250
00:09:29,279 --> 00:09:32,160
milliseconds uniformly at random

251
00:09:32,160 --> 00:09:35,360
but we also saw that vase avoid coring

252
00:09:35,360 --> 00:09:37,360
querying latent name servers or

253
00:09:37,360 --> 00:09:39,680
nameservers with latency above 400

254
00:09:39,680 --> 00:09:42,480
milliseconds as well as nameservers from

255
00:09:42,480 --> 00:09:44,959
which ava experienced two to three

256
00:09:44,959 --> 00:09:47,519
consecutive packet losses

257
00:09:47,519 --> 00:09:50,399
these name servers are avoided even for

258
00:09:50,399 --> 00:09:52,399
a period such a long period like 15

259
00:09:52,399 --> 00:09:54,320
minutes

260
00:09:54,320 --> 00:09:57,440
so afterwards the vas will probe this

261
00:09:57,440 --> 00:09:59,279
name service again to see if the

262
00:09:59,279 --> 00:10:01,279
performance improved but 15 minutes it

263
00:10:01,279 --> 00:10:03,440
is blocked

264
00:10:03,440 --> 00:10:05,839
we found this behavior to be identical

265
00:10:05,839 --> 00:10:08,800
to unbound dns software

266
00:10:08,800 --> 00:10:10,640
and that is the software that is used by

267
00:10:10,640 --> 00:10:13,040
let's encrypt so this slide you can see

268
00:10:13,040 --> 00:10:15,120
the behavior of different dns software

269
00:10:15,120 --> 00:10:18,079
when responses are lost or arrive after

270
00:10:18,079 --> 00:10:20,000
high latency

271
00:10:20,000 --> 00:10:22,240
we see that all the dns software

272
00:10:22,240 --> 00:10:24,399
actually try to avoid poor performing

273
00:10:24,399 --> 00:10:25,839
name servers

274
00:10:25,839 --> 00:10:28,800
and they all block

275
00:10:28,800 --> 00:10:30,480
name servers which

276
00:10:30,480 --> 00:10:32,640
lose responses

277
00:10:32,640 --> 00:10:33,600
um

278
00:10:33,600 --> 00:10:36,720
into some periods of time

279
00:10:36,720 --> 00:10:38,959
so uses using this observation we

280
00:10:38,959 --> 00:10:42,720
develop a downgrade attack to force the

281
00:10:42,720 --> 00:10:44,880
vas to query a specific attack a

282
00:10:44,880 --> 00:10:47,680
selected name server

283
00:10:47,680 --> 00:10:49,760
this allows us to reduce the domain

284
00:10:49,760 --> 00:10:54,800
validation again to just a single point

285
00:10:54,880 --> 00:10:56,800
so our downgrade attack is carried out

286
00:10:56,800 --> 00:10:57,839
by

287
00:10:57,839 --> 00:10:59,680
reducing the number of available name

288
00:10:59,680 --> 00:11:01,760
servers each va

289
00:11:01,760 --> 00:11:04,079
each va of let's encrypt can query

290
00:11:04,079 --> 00:11:06,480
leaving just a single name server that

291
00:11:06,480 --> 00:11:09,040
all the vas will query

292
00:11:09,040 --> 00:11:11,680
the attacker uses start bot to request a

293
00:11:11,680 --> 00:11:13,680
certificate this is how we start the

294
00:11:13,680 --> 00:11:15,360
experiment

295
00:11:15,360 --> 00:11:17,120
this triggers lookups from the dns

296
00:11:17,120 --> 00:11:19,120
resolvers at the four va's of let's

297
00:11:19,120 --> 00:11:20,720
encrypt to the name servers in the

298
00:11:20,720 --> 00:11:22,399
target domain

299
00:11:22,399 --> 00:11:24,880
the attacker causes the requests

300
00:11:24,880 --> 00:11:27,440
to all the name servers except one to

301
00:11:27,440 --> 00:11:29,200
timeout

302
00:11:29,200 --> 00:11:31,760
following a timeout dbas go into

303
00:11:31,760 --> 00:11:34,240
exponential back off

304
00:11:34,240 --> 00:11:36,160
and

305
00:11:36,160 --> 00:11:39,600
this exponential backup depends on

306
00:11:39,600 --> 00:11:41,040
the length of the exponential backup

307
00:11:41,040 --> 00:11:42,959
depends on the uh

308
00:11:42,959 --> 00:11:45,360
dns software implementation so dns

309
00:11:45,360 --> 00:11:47,600
requests for vian unbound are

310
00:11:47,600 --> 00:11:50,160
retransmitted after rto retransmission

311
00:11:50,160 --> 00:11:51,440
timeout

312
00:11:51,440 --> 00:11:54,720
and in case of an unbound this is 376

313
00:11:54,720 --> 00:11:56,639
milliseconds

314
00:11:56,639 --> 00:11:58,560
you can see this on this

315
00:11:58,560 --> 00:11:59,680
slide

316
00:11:59,680 --> 00:12:02,639
how the attacker uses the exponential

317
00:12:02,639 --> 00:12:06,240
back of intervals to repeat the attack

318
00:12:06,240 --> 00:12:08,320
now the attacker repeats the attack

319
00:12:08,320 --> 00:12:11,360
every rto and then the query after its

320
00:12:11,360 --> 00:12:13,839
timeout is retransmitted to the next

321
00:12:13,839 --> 00:12:16,800
name server by the dns software however

322
00:12:16,800 --> 00:12:19,040
after two consecutive losses the name

323
00:12:19,040 --> 00:12:21,040
server is moved to infra cache and its

324
00:12:21,040 --> 00:12:23,920
infrared ttl is set to 900 seconds which

325
00:12:23,920 --> 00:12:26,480
is 15 minutes

326
00:12:26,480 --> 00:12:27,600
and

327
00:12:27,600 --> 00:12:28,639
this

328
00:12:28,639 --> 00:12:30,560
the attacker applies

329
00:12:30,560 --> 00:12:31,440
to

330
00:12:31,440 --> 00:12:32,959
all the vas and

331
00:12:32,959 --> 00:12:35,360
all the name servers except one causing

332
00:12:35,360 --> 00:12:37,839
all the ways to block all but one name

333
00:12:37,839 --> 00:12:39,839
server this is the only name server to

334
00:12:39,839 --> 00:12:41,600
which then the queries

335
00:12:41,600 --> 00:12:44,320
will be sent

336
00:12:44,320 --> 00:12:47,120
so what is interesting is how to block

337
00:12:47,120 --> 00:12:49,120
losses in reality

338
00:12:49,120 --> 00:12:51,200
it's not so how to cause losses in

339
00:12:51,200 --> 00:12:53,360
reality it's not so easy

340
00:12:53,360 --> 00:12:55,360
it is of course easy to do with an

341
00:12:55,360 --> 00:12:57,760
on-pass adversary say a compromised

342
00:12:57,760 --> 00:13:01,120
router which selectively drops packets

343
00:13:01,120 --> 00:13:02,800
but can this be done with an off-pass

344
00:13:02,800 --> 00:13:04,480
adversary

345
00:13:04,480 --> 00:13:07,279
that which the packets do not traverse

346
00:13:07,279 --> 00:13:09,120
and indeed we develop techniques which

347
00:13:09,120 --> 00:13:11,279
allow this also with an off-pass

348
00:13:11,279 --> 00:13:12,639
adversary

349
00:13:12,639 --> 00:13:14,800
these techniques introduce packet losses

350
00:13:14,800 --> 00:13:16,560
into the communication between the name

351
00:13:16,560 --> 00:13:19,519
servers and the vas the last packets

352
00:13:19,519 --> 00:13:22,160
signal to the dns software the va

353
00:13:22,160 --> 00:13:24,480
connectivity problems at the name server

354
00:13:24,480 --> 00:13:26,800
the nameserver is then blocked by the va

355
00:13:26,800 --> 00:13:30,240
for 900 seconds 15 minutes

356
00:13:30,240 --> 00:13:33,279
so i'll show you three methodologies

357
00:13:33,279 --> 00:13:35,920
to do that one methodology is low rate

358
00:13:35,920 --> 00:13:38,320
elimination it is generic and applies to

359
00:13:38,320 --> 00:13:40,320
any domain and all name service without

360
00:13:40,320 --> 00:13:42,560
assuming any properties so it is

361
00:13:42,560 --> 00:13:44,560
illustrated on the right

362
00:13:44,560 --> 00:13:46,560
of this slide

363
00:13:46,560 --> 00:13:49,519
the idea is to send best to the router

364
00:13:49,519 --> 00:13:51,040
that connects the network of the name

365
00:13:51,040 --> 00:13:52,720
server to the internet

366
00:13:52,720 --> 00:13:54,240
the traffic bursts

367
00:13:54,240 --> 00:13:56,560
never reach the name server network

368
00:13:56,560 --> 00:13:57,760
and

369
00:13:57,760 --> 00:14:00,320
they are they arrive at the router they

370
00:14:00,320 --> 00:14:01,760
fill the buffer

371
00:14:01,760 --> 00:14:06,399
and they cause the packets to be dropped

372
00:14:06,399 --> 00:14:08,959
subsequent packets so if the attacker

373
00:14:08,959 --> 00:14:10,880
synchronizes the burst

374
00:14:10,880 --> 00:14:14,000
with the query of the vas it will cause

375
00:14:14,000 --> 00:14:16,240
the router to simply drop the query of

376
00:14:16,240 --> 00:14:18,880
the vas

377
00:14:19,680 --> 00:14:20,399
we

378
00:14:20,399 --> 00:14:23,040
could not evaluate this methodology in

379
00:14:23,040 --> 00:14:24,720
the internet because it causes packet

380
00:14:24,720 --> 00:14:26,800
loss but we evaluate it ethically in a

381
00:14:26,800 --> 00:14:29,760
controlled environment that we set up

382
00:14:29,760 --> 00:14:31,600
we developed two other methodologies as

383
00:14:31,600 --> 00:14:33,279
well which do not require so much

384
00:14:33,279 --> 00:14:34,399
traffic

385
00:14:34,399 --> 00:14:35,920
one

386
00:14:35,920 --> 00:14:38,399
is assumes that the name servers

387
00:14:38,399 --> 00:14:40,800
fragment the responses the other

388
00:14:40,800 --> 00:14:42,720
requires that the name service enforce

389
00:14:42,720 --> 00:14:46,240
rate limiting on inbound dns requests

390
00:14:46,240 --> 00:14:48,399
so let's start with the fragmentation

391
00:14:48,399 --> 00:14:50,320
fragment misassociation technique

392
00:14:50,320 --> 00:14:52,959
exploits fragmentation it is illustrated

393
00:14:52,959 --> 00:14:54,320
on the left side

394
00:14:54,320 --> 00:14:57,920
the attacker injects a spoofed fragment

395
00:14:57,920 --> 00:15:00,959
which the ipd fragmentation cache

396
00:15:00,959 --> 00:15:04,160
at the va reassembles with a genuine

397
00:15:04,160 --> 00:15:05,680
fragment which arrives from the name

398
00:15:05,680 --> 00:15:08,079
server so the name server sends

399
00:15:08,079 --> 00:15:10,480
a response which is fragmented let's say

400
00:15:10,480 --> 00:15:12,959
in two fragments once the first fragment

401
00:15:12,959 --> 00:15:14,959
arrives it is reassembled with the

402
00:15:14,959 --> 00:15:16,560
fragment of the adversary which is

403
00:15:16,560 --> 00:15:19,199
waiting in the ipd fragmentation cache

404
00:15:19,199 --> 00:15:22,160
and it goes then up to the transport

405
00:15:22,160 --> 00:15:25,279
layer now we want this packet to be

406
00:15:25,279 --> 00:15:26,560
discarded

407
00:15:26,560 --> 00:15:28,800
so we want to combine it as such

408
00:15:28,800 --> 00:15:30,240
constructed in such a way that the

409
00:15:30,240 --> 00:15:32,399
operating system will discard it

410
00:15:32,399 --> 00:15:33,600
what we do

411
00:15:33,600 --> 00:15:36,320
is we create a wrong checksum we simply

412
00:15:36,320 --> 00:15:38,880
do not try to match the checksum as a

413
00:15:38,880 --> 00:15:40,320
result the reassembled packet is

414
00:15:40,320 --> 00:15:42,320
discarded by the va

415
00:15:42,320 --> 00:15:44,079
the genuine second fragment from the

416
00:15:44,079 --> 00:15:46,079
name server does not have a matching

417
00:15:46,079 --> 00:15:48,160
first fragment and hence it is discarded

418
00:15:48,160 --> 00:15:50,720
after a timeout of 30 seconds

419
00:15:50,720 --> 00:15:53,199
so but the point is that there is no

420
00:15:53,199 --> 00:15:55,759
response from the nameserver the va

421
00:15:55,759 --> 00:15:58,320
itself reassembled it incorrectly and

422
00:15:58,320 --> 00:16:00,880
discarded this causes the pending query

423
00:16:00,880 --> 00:16:03,279
to timeout and is perceived by the dns

424
00:16:03,279 --> 00:16:07,440
software on the va as a loss event

425
00:16:07,440 --> 00:16:09,920
the other technique

426
00:16:09,920 --> 00:16:11,279
loss via

427
00:16:11,279 --> 00:16:13,680
excess query rate exploits rate limiting

428
00:16:13,680 --> 00:16:15,440
and name servers it is illustrated in

429
00:16:15,440 --> 00:16:17,600
the middle here on the slide

430
00:16:17,600 --> 00:16:20,079
the adversary sends multiple requests to

431
00:16:20,079 --> 00:16:22,720
the target name server using a spoofed

432
00:16:22,720 --> 00:16:24,639
ip address this time of the victim

433
00:16:24,639 --> 00:16:25,920
resolver

434
00:16:25,920 --> 00:16:28,560
now the rate limiting on the name server

435
00:16:28,560 --> 00:16:31,680
starts filtering of the incoming packets

436
00:16:31,680 --> 00:16:33,519
the adversary issues requests for a

437
00:16:33,519 --> 00:16:35,440
certificate from let's encrypt when the

438
00:16:35,440 --> 00:16:38,000
request from the dns

439
00:16:38,000 --> 00:16:39,519
outlets encrypt arrives at the

440
00:16:39,519 --> 00:16:42,320
nameserver it is filtered

441
00:16:42,320 --> 00:16:44,880
now the weak team dns resolver perceives

442
00:16:44,880 --> 00:16:47,040
this lack of responses as an indication

443
00:16:47,040 --> 00:16:48,800
of poor performance of the name server

444
00:16:48,800 --> 00:16:49,600
and

445
00:16:49,600 --> 00:16:51,920
eventually avoids clearing it

446
00:16:51,920 --> 00:16:54,560
we found that 4000 queries distributed

447
00:16:54,560 --> 00:16:56,560
over a second

448
00:16:56,560 --> 00:16:58,720
suffice to trigger rate limiting in

449
00:16:58,720 --> 00:17:01,440
servers that support rate limiting

450
00:17:01,440 --> 00:17:03,600
and then the rate limiting is applied

451
00:17:03,600 --> 00:17:07,039
over the cadr 24 block

452
00:17:07,039 --> 00:17:09,520
so we also experimentally evaluated

453
00:17:09,520 --> 00:17:12,160
these methodologies

454
00:17:12,160 --> 00:17:13,439
against

455
00:17:13,439 --> 00:17:15,919
the two methodologies which can be

456
00:17:15,919 --> 00:17:17,679
evaluated in the internet we evaluated

457
00:17:17,679 --> 00:17:20,799
against our data set of domains we found

458
00:17:20,799 --> 00:17:22,559
that they apply to 24 percent of let's

459
00:17:22,559 --> 00:17:24,240
encrypt certified domains

460
00:17:24,240 --> 00:17:26,079
and 20 of

461
00:17:26,079 --> 00:17:30,000
almost 1 million top alexa domains

462
00:17:31,200 --> 00:17:33,200
so to identify domains which are

463
00:17:33,200 --> 00:17:34,960
vulnerable to this two methodologies we

464
00:17:34,960 --> 00:17:36,480
perform the following

465
00:17:36,480 --> 00:17:37,840
we

466
00:17:37,840 --> 00:17:39,679
let's start with fragmentation to find

467
00:17:39,679 --> 00:17:41,360
name servers that return fragmented

468
00:17:41,360 --> 00:17:43,440
responses will reduce them to you of the

469
00:17:43,440 --> 00:17:47,840
name servers using an icmp error message

470
00:17:47,840 --> 00:17:51,760
where icmp type three code for

471
00:17:51,760 --> 00:17:55,039
the this is fragmentation needed message

472
00:17:55,039 --> 00:17:56,480
the adversary needs to cause the

473
00:17:56,480 --> 00:17:58,480
nameserver to fragment so that at least

474
00:17:58,480 --> 00:18:01,280
one byte is in the second fragment

475
00:18:01,280 --> 00:18:03,360
we found that

476
00:18:03,360 --> 00:18:05,280
almost two percent of let's encrypt

477
00:18:05,280 --> 00:18:08,000
certified domains and four percent a bit

478
00:18:08,000 --> 00:18:09,760
more than four percent of

479
00:18:09,760 --> 00:18:12,080
um eight hundred fifty seven thousand

480
00:18:12,080 --> 00:18:14,880
top alexa domains fragment responses and

481
00:18:14,880 --> 00:18:18,320
have also predictable ipid allocation

482
00:18:18,320 --> 00:18:19,760
this means that the adversary

483
00:18:19,760 --> 00:18:22,240
essentially can easily match a spoof

484
00:18:22,240 --> 00:18:24,080
spoofed second fragment that would be

485
00:18:24,080 --> 00:18:26,640
reassembled with a genuine first

486
00:18:26,640 --> 00:18:29,440
fragment from the name server

487
00:18:29,440 --> 00:18:31,280
now to find servers that apply rate

488
00:18:31,280 --> 00:18:33,600
limiting we perform experiments sending

489
00:18:33,600 --> 00:18:35,679
4000 queries distributed over a period

490
00:18:35,679 --> 00:18:38,000
of one second this is roughly equivalent

491
00:18:38,000 --> 00:18:40,799
to 2.5 megabits per second

492
00:18:40,799 --> 00:18:42,720
now we find that the rate limit is

493
00:18:42,720 --> 00:18:44,720
typically reached within a second and is

494
00:18:44,720 --> 00:18:46,080
enforced

495
00:18:46,080 --> 00:18:46,960
and the

496
00:18:46,960 --> 00:18:49,120
subsequent 50 seconds

497
00:18:49,120 --> 00:18:52,320
so even with this modest rate of 4k

498
00:18:52,320 --> 00:18:54,640
packet per second we find that more than

499
00:18:54,640 --> 00:18:56,400
24 percent of the name service and

500
00:18:56,400 --> 00:18:58,960
top-level domains and 23 percent of name

501
00:18:58,960 --> 00:19:00,240
source and let's encrypt certified

502
00:19:00,240 --> 00:19:02,160
domains and 16 percent of the

503
00:19:02,160 --> 00:19:04,320
nameservers and alexa are vulnerable to

504
00:19:04,320 --> 00:19:05,760
elimination

505
00:19:05,760 --> 00:19:09,360
and names are elimination attack

506
00:19:09,360 --> 00:19:12,000
now finally the generic methodology that

507
00:19:12,000 --> 00:19:14,480
applies to any domain we could not test

508
00:19:14,480 --> 00:19:17,039
in the wild because of the performance

509
00:19:17,039 --> 00:19:19,360
downgrade that it would introduce so we

510
00:19:19,360 --> 00:19:21,280
perform experiments in a controlled

511
00:19:21,280 --> 00:19:23,600
environment using popular routing

512
00:19:23,600 --> 00:19:24,720
platforms

513
00:19:24,720 --> 00:19:27,120
and we use the default buffers

514
00:19:27,120 --> 00:19:30,559
which these routing platforms have

515
00:19:30,559 --> 00:19:32,720
our results are listed in

516
00:19:32,720 --> 00:19:34,559
this table on the slide

517
00:19:34,559 --> 00:19:35,760
and in

518
00:19:35,760 --> 00:19:37,919
you can see what is the burst side that

519
00:19:37,919 --> 00:19:39,679
should be sent to cause losses for

520
00:19:39,679 --> 00:19:41,760
different routers

521
00:19:41,760 --> 00:19:43,360
some of these routers for instance they

522
00:19:43,360 --> 00:19:45,360
are on the backbones are pretty pretty

523
00:19:45,360 --> 00:19:46,559
large

524
00:19:46,559 --> 00:19:47,440
and

525
00:19:47,440 --> 00:19:49,120
in reality actually the burst can be

526
00:19:49,120 --> 00:19:50,720
even smaller

527
00:19:50,720 --> 00:19:52,720
than what is listed in the

528
00:19:52,720 --> 00:19:54,400
table this is for instance due to

529
00:19:54,400 --> 00:19:56,080
processing and context switches and

530
00:19:56,080 --> 00:19:58,320
hardware contact switching in hardware

531
00:19:58,320 --> 00:20:01,360
which in introduced load on the router

532
00:20:01,360 --> 00:20:02,400
um

533
00:20:02,400 --> 00:20:04,880
also in reality the operators often

534
00:20:04,880 --> 00:20:07,919
resize the buffers to smaller sizes

535
00:20:07,919 --> 00:20:10,240
and finally another issue is that there

536
00:20:10,240 --> 00:20:11,440
is traffic

537
00:20:11,440 --> 00:20:12,960
in the internet there is also traffic

538
00:20:12,960 --> 00:20:15,440
from other sources which also fills the

539
00:20:15,440 --> 00:20:17,760
queue on the routers in our experiment

540
00:20:17,760 --> 00:20:20,240
we used clean slate so we only sent our

541
00:20:20,240 --> 00:20:21,520
traffic

542
00:20:21,520 --> 00:20:23,280
therefore our evaluation pushes of

543
00:20:23,280 --> 00:20:25,280
course an upper bound in reality the

544
00:20:25,280 --> 00:20:29,280
adversary can send much smaller bursts

545
00:20:29,280 --> 00:20:31,919
so now what we will do is we will

546
00:20:31,919 --> 00:20:35,679
combine our off-pass downgrade attack

547
00:20:35,679 --> 00:20:38,720
with bgp sub-prefix i checks to issue

548
00:20:38,720 --> 00:20:41,280
fraudulent certificates of let's encrypt

549
00:20:41,280 --> 00:20:43,200
for victim domains

550
00:20:43,200 --> 00:20:45,120
to launch our attacks against real

551
00:20:45,120 --> 00:20:47,840
internet targets we develop an ethical

552
00:20:47,840 --> 00:20:50,320
two-sided evaluation methodology first

553
00:20:50,320 --> 00:20:52,720
we launch our attacks

554
00:20:52,720 --> 00:20:54,559
we launch our combined attack to issue

555
00:20:54,559 --> 00:20:56,640
fraudulent certificates

556
00:20:56,640 --> 00:20:58,960
with let's encrypt for our own victim

557
00:20:58,960 --> 00:21:01,200
domains which we register and set up for

558
00:21:01,200 --> 00:21:02,640
that purpose

559
00:21:02,640 --> 00:21:03,919
we

560
00:21:03,919 --> 00:21:05,679
use

561
00:21:05,679 --> 00:21:07,360
the setup that is illustrated in this

562
00:21:07,360 --> 00:21:09,360
figure and the adversaries on

563
00:21:09,360 --> 00:21:11,840
uh 1as let's encrypt vantage points on

564
00:21:11,840 --> 00:21:13,520
another nameservers of the victim

565
00:21:13,520 --> 00:21:16,640
domains are just also on different ess

566
00:21:16,640 --> 00:21:18,799
and in the first step

567
00:21:18,799 --> 00:21:20,240
the adversary applies names or

568
00:21:20,240 --> 00:21:22,640
elimination methodologies to force all

569
00:21:22,640 --> 00:21:24,799
the va's of let's encrypt to perform

570
00:21:24,799 --> 00:21:26,400
lookups

571
00:21:26,400 --> 00:21:28,400
and domain validation against just one

572
00:21:28,400 --> 00:21:31,360
specific name server of its choice

573
00:21:31,360 --> 00:21:33,919
as an example we select name servers on

574
00:21:33,919 --> 00:21:36,400
networks which can be sub prefix hijack

575
00:21:36,400 --> 00:21:38,000
because this is the

576
00:21:38,000 --> 00:21:40,000
um vulnerability which we exploited in

577
00:21:40,000 --> 00:21:41,520
this work but this could be anything

578
00:21:41,520 --> 00:21:43,200
this could be a name server is a zero

579
00:21:43,200 --> 00:21:45,039
day for instance

580
00:21:45,039 --> 00:21:46,000
so

581
00:21:46,000 --> 00:21:47,120
um

582
00:21:47,120 --> 00:21:49,200
focusing on our name servers which can

583
00:21:49,200 --> 00:21:50,480
be site prefix

584
00:21:50,480 --> 00:21:52,320
sub prefix hijacked we

585
00:21:52,320 --> 00:21:56,240
found that actually

586
00:21:56,720 --> 00:21:58,960
more than 10 percent of let's encrypt

587
00:21:58,960 --> 00:22:01,120
certified domains on 11 percent of alexa

588
00:22:01,120 --> 00:22:04,719
domains are vulnerable to the attacks

589
00:22:04,960 --> 00:22:08,159
and for them it is possible to issue

590
00:22:08,159 --> 00:22:10,400
fraudulent certificates

591
00:22:10,400 --> 00:22:12,880
now uh when we run evaluations against

592
00:22:12,880 --> 00:22:14,640
our own domain

593
00:22:14,640 --> 00:22:16,880
which is um

594
00:22:16,880 --> 00:22:19,440
using this name servers on

595
00:22:19,440 --> 00:22:21,600
illustrated and figure left on figure

596
00:22:21,600 --> 00:22:24,240
left we select name server 1 and s1 on

597
00:22:24,240 --> 00:22:25,600
prefix 2 2

598
00:22:25,600 --> 00:22:27,760
16. this is the network which you own

599
00:22:27,760 --> 00:22:29,039
and control

600
00:22:29,039 --> 00:22:30,720
and

601
00:22:30,720 --> 00:22:33,520
in second step the advisory then uses

602
00:22:33,520 --> 00:22:35,200
third bot submits requests for a

603
00:22:35,200 --> 00:22:37,440
certificate for our victim domain

604
00:22:37,440 --> 00:22:40,000
and the attacker launches prefix bjp

605
00:22:40,000 --> 00:22:41,760
prefix hijack to redirect the dns

606
00:22:41,760 --> 00:22:44,320
packets to the attacker network which is

607
00:22:44,320 --> 00:22:46,400
as6

608
00:22:46,400 --> 00:22:48,720
the attacker concludes this validation

609
00:22:48,720 --> 00:22:50,320
and receives the fraudulent certificate

610
00:22:50,320 --> 00:22:51,840
for our domain

611
00:22:51,840 --> 00:22:53,840
this allows us to evaluate the attack

612
00:22:53,840 --> 00:22:56,480
the complete attack against our domain

613
00:22:56,480 --> 00:22:58,559
between let's encrypt in our domain

614
00:22:58,559 --> 00:23:01,200
and we run multiple execution of these

615
00:23:01,200 --> 00:23:03,200
attacks against our victim domains and

616
00:23:03,200 --> 00:23:04,960
we plot the duration of the attack and

617
00:23:04,960 --> 00:23:07,440
figure on figure on this

618
00:23:07,440 --> 00:23:08,400
slide

619
00:23:08,400 --> 00:23:10,480
as you can see that 99 of the

620
00:23:10,480 --> 00:23:12,000
evaluations

621
00:23:12,000 --> 00:23:14,480
uh complete within two seconds

622
00:23:14,480 --> 00:23:16,400
now this plot measures the time from the

623
00:23:16,400 --> 00:23:18,080
issuance of a hijacked

624
00:23:18,080 --> 00:23:20,400
a hijacking pgp announcement and until

625
00:23:20,400 --> 00:23:23,200
the fraudulent certificate is received

626
00:23:23,200 --> 00:23:25,039
now the question is of course are real

627
00:23:25,039 --> 00:23:26,720
domains in the internet vulnerable to

628
00:23:26,720 --> 00:23:28,480
our name survey elimination techniques

629
00:23:28,480 --> 00:23:29,760
and to

630
00:23:29,760 --> 00:23:31,600
issuing fraudulent certificates do they

631
00:23:31,600 --> 00:23:33,919
have the required properties so that was

632
00:23:33,919 --> 00:23:36,320
the first step what i just showed you of

633
00:23:36,320 --> 00:23:38,320
evaluation between our domains and let's

634
00:23:38,320 --> 00:23:40,480
encrypt and now you see the second step

635
00:23:40,480 --> 00:23:43,760
which is evaluation between

636
00:23:43,760 --> 00:23:45,840
the real victim domains

637
00:23:45,840 --> 00:23:48,840
and sca which we control

638
00:23:48,840 --> 00:23:50,480
so

639
00:23:50,480 --> 00:23:53,600
we in this evaluation we use our data

640
00:23:53,600 --> 00:23:55,600
set of domains and these are real

641
00:23:55,600 --> 00:23:58,000
domains yeah so we want to evaluate them

642
00:23:58,000 --> 00:24:00,640
ethically we reproduce the exact setup

643
00:24:00,640 --> 00:24:02,080
of let's encrypt in a controlled

644
00:24:02,080 --> 00:24:03,200
environment

645
00:24:03,200 --> 00:24:05,919
set up by us we create our own ca we

646
00:24:05,919 --> 00:24:08,159
issue certificates in for domains in our

647
00:24:08,159 --> 00:24:10,080
data set with rcas

648
00:24:10,080 --> 00:24:12,640
and we then launch the combined attack

649
00:24:12,640 --> 00:24:15,039
to obtain fraudulent certificates signed

650
00:24:15,039 --> 00:24:17,600
by rca for those domains

651
00:24:17,600 --> 00:24:19,919
this allows us to identify domains with

652
00:24:19,919 --> 00:24:22,240
which the vas of let's encrypt can be

653
00:24:22,240 --> 00:24:24,159
forced to query a server of attacker's

654
00:24:24,159 --> 00:24:25,360
choice

655
00:24:25,360 --> 00:24:27,360
so that the name sorry can be sub-prefix

656
00:24:27,360 --> 00:24:29,840
hijacked by the attacker

657
00:24:29,840 --> 00:24:31,919
the hijacking bgp announcements are sent

658
00:24:31,919 --> 00:24:34,000
locally only to the router that connects

659
00:24:34,000 --> 00:24:36,799
the network with rca to the internet and

660
00:24:36,799 --> 00:24:38,640
are not distributed in the internet to

661
00:24:38,640 --> 00:24:42,799
avoid impacting the global routing

662
00:24:44,400 --> 00:24:45,360
we

663
00:24:45,360 --> 00:24:47,120
evaluate

664
00:24:47,120 --> 00:24:49,439
this

665
00:24:49,520 --> 00:24:52,080
attack and you can see on the slides the

666
00:24:52,080 --> 00:24:53,279
number of

667
00:24:53,279 --> 00:24:54,960
vulnerable domains

668
00:24:54,960 --> 00:24:57,679
that we found

669
00:24:59,039 --> 00:25:01,520
so what about the other cas

670
00:25:01,520 --> 00:25:04,240
we evaluate our attack methodologies

671
00:25:04,240 --> 00:25:06,080
also with other cas

672
00:25:06,080 --> 00:25:08,240
for a successful domain validation

673
00:25:08,240 --> 00:25:09,840
actually only let's encrypt requires

674
00:25:09,840 --> 00:25:12,000
that multiple vantage points receive the

675
00:25:12,000 --> 00:25:14,000
same responses

676
00:25:14,000 --> 00:25:16,880
from multiple to multiple

677
00:25:16,880 --> 00:25:19,120
multiple vantage points

678
00:25:19,120 --> 00:25:22,080
however other cas even when they select

679
00:25:22,080 --> 00:25:24,559
an iph is from a large prefix such as

680
00:25:24,559 --> 00:25:26,000
google for instance they perform the

681
00:25:26,000 --> 00:25:28,640
validation using a single ap edges

682
00:25:28,640 --> 00:25:31,039
so all of our blocking methodologies

683
00:25:31,039 --> 00:25:33,279
apply to other cas as well and we only

684
00:25:33,279 --> 00:25:35,200
needed to apply slight modifications

685
00:25:35,200 --> 00:25:36,880
according to the behavior of the dns

686
00:25:36,880 --> 00:25:38,960
software at hca for instance the number

687
00:25:38,960 --> 00:25:40,880
of the required timeouts differs you can

688
00:25:40,880 --> 00:25:43,919
see this in the timeouts column as well

689
00:25:43,919 --> 00:25:46,559
as the length of the blocking interval

690
00:25:46,559 --> 00:25:48,720
this is the block column

691
00:25:48,720 --> 00:25:51,279
during which the dns software avoids

692
00:25:51,279 --> 00:25:53,840
avoid squaring the blocked name server

693
00:25:53,840 --> 00:25:56,559
so essentially we show you that all the

694
00:25:56,559 --> 00:25:58,080
cas are vulnerable to name server

695
00:25:58,080 --> 00:25:59,919
elimination which exposes them to

696
00:25:59,919 --> 00:26:02,400
effective off-pass attacks

697
00:26:02,400 --> 00:26:04,720
now there are a number of things

698
00:26:04,720 --> 00:26:08,000
which cas can do to prevent our attacks

699
00:26:08,000 --> 00:26:10,159
most importantly is an unpredictable

700
00:26:10,159 --> 00:26:12,159
selection of vantage points this would

701
00:26:12,159 --> 00:26:13,840
prevent our attack since the adversary

702
00:26:13,840 --> 00:26:16,000
would not know in advance which vantage

703
00:26:16,000 --> 00:26:17,919
points will be selected to perform the

704
00:26:17,919 --> 00:26:20,320
validation if the set of vantage points

705
00:26:20,320 --> 00:26:22,000
is sufficiently large the adversary will

706
00:26:22,000 --> 00:26:23,679
not be able to attack them all in

707
00:26:23,679 --> 00:26:24,559
advance

708
00:26:24,559 --> 00:26:25,760
efficiently

709
00:26:25,760 --> 00:26:27,360
now we also recommend that the name

710
00:26:27,360 --> 00:26:29,440
servers selection procedure is made

711
00:26:29,440 --> 00:26:31,760
resilient by acquiring also poor

712
00:26:31,760 --> 00:26:33,440
performing names so as this additional

713
00:26:33,440 --> 00:26:35,440
latency will not be significant

714
00:26:35,440 --> 00:26:37,520
in issuance of certificates

715
00:26:37,520 --> 00:26:39,360
finally the attack would be made more

716
00:26:39,360 --> 00:26:42,000
difficult if you turn off the caches

717
00:26:42,000 --> 00:26:43,440
this is not critical for issuing

718
00:26:43,440 --> 00:26:44,720
certificates

719
00:26:44,720 --> 00:26:45,600
um

720
00:26:45,600 --> 00:26:47,520
preventing our specific attacks is

721
00:26:47,520 --> 00:26:50,480
sub-prefix sidecheck you can

722
00:26:50,480 --> 00:26:53,440
protect bgp bgpus rpki this of course

723
00:26:53,440 --> 00:26:55,360
doesn't prevent other attacks

724
00:26:55,360 --> 00:26:58,080
and also it's also

725
00:26:58,080 --> 00:27:00,159
helpful to try to detect fraudulent

726
00:27:00,159 --> 00:27:01,360
certificates with certificate

727
00:27:01,360 --> 00:27:03,679
transparency not all the monitors

728
00:27:03,679 --> 00:27:05,840
however reported our fraudulent

729
00:27:05,840 --> 00:27:07,360
certificates

730
00:27:07,360 --> 00:27:11,679
this is important to note so to conclude

731
00:27:11,679 --> 00:27:13,279
domain validation is critical for

732
00:27:13,279 --> 00:27:15,039
bootstrapping cryptography on the

733
00:27:15,039 --> 00:27:17,360
internet after validating control over a

734
00:27:17,360 --> 00:27:20,080
domain aca generates a certificate which

735
00:27:20,080 --> 00:27:21,840
can be used to establish cryptographic

736
00:27:21,840 --> 00:27:24,000
material and protect communication

737
00:27:24,000 --> 00:27:26,240
between the clients and the server

738
00:27:26,240 --> 00:27:28,399
in contrast to other means for verifying

739
00:27:28,399 --> 00:27:30,640
control over a domain domain validation

740
00:27:30,640 --> 00:27:33,760
is automated and fast and cheap so this

741
00:27:33,760 --> 00:27:35,600
benefits made domain validation very

742
00:27:35,600 --> 00:27:36,880
popular

743
00:27:36,880 --> 00:27:38,559
however the benefits of domain

744
00:27:38,559 --> 00:27:40,880
validation also coupled with insecurity

745
00:27:40,880 --> 00:27:43,679
and attacks in 2018 demonstrated that

746
00:27:43,679 --> 00:27:44,720
single

747
00:27:44,720 --> 00:27:47,440
mva domain validation is vulnerable to

748
00:27:47,440 --> 00:27:48,960
off-pass attacks

749
00:27:48,960 --> 00:27:51,279
now in this work we showed that

750
00:27:51,279 --> 00:27:52,880
distributed domain validation that lets

751
00:27:52,880 --> 00:27:54,880
encrypt deployed to ensure security even

752
00:27:54,880 --> 00:27:57,279
against on-pass adversaries

753
00:27:57,279 --> 00:27:59,360
is still vulnerable even against the

754
00:27:59,360 --> 00:28:01,760
weaker of past adversaries

755
00:28:01,760 --> 00:28:04,080
we developed oauthbus downgraded tags to

756
00:28:04,080 --> 00:28:05,760
reduce the domain validation to be

757
00:28:05,760 --> 00:28:07,600
performed against the single attack a

758
00:28:07,600 --> 00:28:09,200
selected server

759
00:28:09,200 --> 00:28:10,880
and in our case we use the server which

760
00:28:10,880 --> 00:28:12,880
can be sub prefix hijack

761
00:28:12,880 --> 00:28:14,559
now after forcing the va's of let's

762
00:28:14,559 --> 00:28:16,399
encrypt to query a single name server

763
00:28:16,399 --> 00:28:18,720
that resides on a network vulnerable to

764
00:28:18,720 --> 00:28:21,120
sub prefix hijacks we carried out a text

765
00:28:21,120 --> 00:28:23,679
that and successfully

766
00:28:23,679 --> 00:28:25,919
issued fraudulent certificates for 10 of

767
00:28:25,919 --> 00:28:28,159
the domains in our data set

768
00:28:28,159 --> 00:28:31,279
our work shows that domain validation

769
00:28:31,279 --> 00:28:34,080
although simple is not yet a resolved

770
00:28:34,080 --> 00:28:35,520
problem

771
00:28:35,520 --> 00:28:37,919
now this presentation is based on a

772
00:28:37,919 --> 00:28:40,240
paper that is going to be published at

773
00:28:40,240 --> 00:28:43,600
ccs 2021 with my co-authors mikhail

774
00:28:43,600 --> 00:28:45,840
veidna and tianxian

775
00:28:45,840 --> 00:28:46,640
dai

776
00:28:46,640 --> 00:28:48,880
it is called let's downgrade let's

777
00:28:48,880 --> 00:28:50,159
encrypt

778
00:28:50,159 --> 00:28:52,799
thank you

