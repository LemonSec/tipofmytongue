1
00:00:01,130 --> 00:00:14,079
[Music]

2
00:00:14,080 --> 00:00:15,280
hi everyone

3
00:00:15,280 --> 00:00:17,039
my name is ben ceri i'm the vp of

4
00:00:17,039 --> 00:00:18,640
research at armist

5
00:00:18,640 --> 00:00:21,119
talking with me today is barack haddad

6
00:00:21,119 --> 00:00:23,119
black is a security researcher and a

7
00:00:23,119 --> 00:00:24,960
team leader on my team

8
00:00:24,960 --> 00:00:26,640
both of us work at a company called

9
00:00:26,640 --> 00:00:29,119
armis armrest is an agentless iot

10
00:00:29,119 --> 00:00:31,199
security company focused on securing

11
00:00:31,199 --> 00:00:33,600
securing iot devices and advanced

12
00:00:33,600 --> 00:00:36,960
devices and actually anything embedded

13
00:00:36,960 --> 00:00:39,120
in enterprise industrial and medical

14
00:00:39,120 --> 00:00:40,480
organizations

15
00:00:40,480 --> 00:00:42,480
in the last year we've focused our

16
00:00:42,480 --> 00:00:44,239
efforts on analyzing critical

17
00:00:44,239 --> 00:00:46,399
infrastructure systems used by large

18
00:00:46,399 --> 00:00:48,160
healthcare facilities

19
00:00:48,160 --> 00:00:49,760
we became familiar with the system that

20
00:00:49,760 --> 00:00:52,000
is not known to most but is nevertheless

21
00:00:52,000 --> 00:00:53,680
a critical building block in the daily

22
00:00:53,680 --> 00:00:56,239
operation of all hospitals pneumatic

23
00:00:56,239 --> 00:00:57,600
tube systems

24
00:00:57,600 --> 00:00:59,440
this research resulted in discovery of

25
00:00:59,440 --> 00:01:01,600
non-critical availabilities in swiss log

26
00:01:01,600 --> 00:01:03,760
pneumatic tube systems this is the most

27
00:01:03,760 --> 00:01:05,760
permanent vendor of pneumatic cube

28
00:01:05,760 --> 00:01:08,080
systems in north america and today we're

29
00:01:08,080 --> 00:01:10,640
going to talk about what we found

30
00:01:10,640 --> 00:01:12,640
and what is pneumatic tube systems so

31
00:01:12,640 --> 00:01:14,640
requiring this research paul piper i

32
00:01:14,640 --> 00:01:16,080
hope you can appreciate the obvious

33
00:01:16,080 --> 00:01:17,360
reference

34
00:01:17,360 --> 00:01:19,439
but before we get into the research uh

35
00:01:19,439 --> 00:01:21,520
let's back up a bit

36
00:01:21,520 --> 00:01:23,280
pneumatic tube systems

37
00:01:23,280 --> 00:01:25,200
some of you might be puzzled this was

38
00:01:25,200 --> 00:01:27,600
once a thing and is surprisingly still a

39
00:01:27,600 --> 00:01:29,119
thing today

40
00:01:29,119 --> 00:01:31,600
simply put these systems are pressurized

41
00:01:31,600 --> 00:01:33,759
tube networks that transfer physical

42
00:01:33,759 --> 00:01:36,640
carriers through them

43
00:01:36,640 --> 00:01:38,400
the concept was first invented more than

44
00:01:38,400 --> 00:01:40,159
200 years ago and is probably the first

45
00:01:40,159 --> 00:01:42,560
prototype of packet switching networks

46
00:01:42,560 --> 00:01:44,240
in the early days it was mainly used to

47
00:01:44,240 --> 00:01:46,320
transfer letters partials and even cash

48
00:01:46,320 --> 00:01:48,079
in some applications

49
00:01:48,079 --> 00:01:50,159
the new york mail system made use of

50
00:01:50,159 --> 00:01:52,079
pneumatic tubes as shown here in this

51
00:01:52,079 --> 00:01:55,759
1987 drawing

52
00:01:55,759 --> 00:01:58,479
in 1867 they even believed pneumatic

53
00:01:58,479 --> 00:02:00,560
tubes would become the future of public

54
00:02:00,560 --> 00:02:02,000
transportation

55
00:02:02,000 --> 00:02:04,560
and built an experimental 95 meter tubes

56
00:02:04,560 --> 00:02:07,920
subway line under broadway in manhattan

57
00:02:07,920 --> 00:02:12,000
something really that looks far-fetched

58
00:02:12,239 --> 00:02:14,319
moving people with air pressure is still

59
00:02:14,319 --> 00:02:16,800
something that certain people

60
00:02:16,800 --> 00:02:20,080
believe is in the future today

61
00:02:21,200 --> 00:02:24,080
so eventually pneumatic tubes evolved to

62
00:02:24,080 --> 00:02:26,080
certain niche cases for example before

63
00:02:26,080 --> 00:02:27,280
the internet

64
00:02:27,280 --> 00:02:30,319
they used the fast used them as fast

65
00:02:30,319 --> 00:02:33,680
inter-office messaging solutions

66
00:02:33,680 --> 00:02:36,080
nasa even had one mission control center

67
00:02:36,080 --> 00:02:37,680
back in the apollo missions you can see

68
00:02:37,680 --> 00:02:38,879
one

69
00:02:38,879 --> 00:02:40,720
of the containers there in their

70
00:02:40,720 --> 00:02:43,200
control center

71
00:02:43,200 --> 00:02:45,040
and there are also few applications

72
00:02:45,040 --> 00:02:47,040
today in which pneumatic tubes are

73
00:02:47,040 --> 00:02:48,640
developed and used

74
00:02:48,640 --> 00:02:50,800
to be the future for example in certain

75
00:02:50,800 --> 00:02:53,840
ways disposal disposal systems maybe in

76
00:02:53,840 --> 00:02:55,840
the future these will become more

77
00:02:55,840 --> 00:02:58,000
popular

78
00:02:58,000 --> 00:03:00,480
however probably the most widespread use

79
00:03:00,480 --> 00:03:02,400
of pneumatic tubes nowadays is in

80
00:03:02,400 --> 00:03:04,640
hospitals and actually in hospitals

81
00:03:04,640 --> 00:03:06,159
these systems are critical

82
00:03:06,159 --> 00:03:07,519
infrastructure

83
00:03:07,519 --> 00:03:10,159
hospitals use them on a daily basis

84
00:03:10,159 --> 00:03:11,280
maybe

85
00:03:11,280 --> 00:03:14,400
on an hourly basis every time there is

86
00:03:14,400 --> 00:03:16,000
blood to collect there are samples to

87
00:03:16,000 --> 00:03:18,560
collect they the user system to transfer

88
00:03:18,560 --> 00:03:20,239
samples specimens

89
00:03:20,239 --> 00:03:21,440
from various departments in the

90
00:03:21,440 --> 00:03:24,080
hospitals to central laboratories

91
00:03:24,080 --> 00:03:25,440
and even

92
00:03:25,440 --> 00:03:27,519
to take medicine from the pharmacy and

93
00:03:27,519 --> 00:03:29,440
it's really distributed to all

94
00:03:29,440 --> 00:03:30,640
departments

95
00:03:30,640 --> 00:03:32,720
so this system has to have

96
00:03:32,720 --> 00:03:35,519
uptime of nearly 100 percent and it is

97
00:03:35,519 --> 00:03:38,799
in use in those types of numbers

98
00:03:38,799 --> 00:03:41,200
so it's a critical infrastructure

99
00:03:41,200 --> 00:03:43,680
um however it isn't being researched uh

100
00:03:43,680 --> 00:03:45,680
in that the same

101
00:03:45,680 --> 00:03:47,760
way

102
00:03:47,760 --> 00:03:51,120
so before we get again to what we found

103
00:03:51,120 --> 00:03:52,879
and understand better

104
00:03:52,879 --> 00:03:55,120
pts systems and what they're made of

105
00:03:55,120 --> 00:03:58,080
let's just set our agenda for today

106
00:03:58,080 --> 00:03:59,120
um

107
00:03:59,120 --> 00:04:01,280
a bit about what is the architecture of

108
00:04:01,280 --> 00:04:04,560
this system what are the components that

109
00:04:04,560 --> 00:04:05,439
uh

110
00:04:05,439 --> 00:04:07,840
that comprise the system

111
00:04:07,840 --> 00:04:09,599
and then we are talking to specifically

112
00:04:09,599 --> 00:04:11,599
about swiss logs swisslock is the vendor

113
00:04:11,599 --> 00:04:13,439
that we've researched and it's actually

114
00:04:13,439 --> 00:04:16,160
a very prominent vendor that is by far

115
00:04:16,160 --> 00:04:19,440
the largest one in north america

116
00:04:19,440 --> 00:04:21,440
mostly using hull in hospitals north

117
00:04:21,440 --> 00:04:22,560
america

118
00:04:22,560 --> 00:04:24,080
uh then barack is going to walk you

119
00:04:24,080 --> 00:04:26,639
through the whole piece that we found

120
00:04:26,639 --> 00:04:28,720
some of the challenges and how we were

121
00:04:28,720 --> 00:04:30,800
able to exploit them

122
00:04:30,800 --> 00:04:32,720
and then obviously we want to show you a

123
00:04:32,720 --> 00:04:36,960
demo of this and some final thoughts

124
00:04:37,280 --> 00:04:38,240
so

125
00:04:38,240 --> 00:04:40,560
just to begin the overview of what did

126
00:04:40,560 --> 00:04:43,040
we actually find so we found nine

127
00:04:43,040 --> 00:04:44,479
vulnerabilities

128
00:04:44,479 --> 00:04:46,240
in the swisslog translogic pneumatic

129
00:04:46,240 --> 00:04:47,600
tube system

130
00:04:47,600 --> 00:04:49,520
and these are critical vulnerabilities

131
00:04:49,520 --> 00:04:52,160
that were found in the nexus station

132
00:04:52,160 --> 00:04:53,840
the nexus station is a prominent

133
00:04:53,840 --> 00:04:56,720
pneumatic tube station by swiss log it

134
00:04:56,720 --> 00:04:57,840
has

135
00:04:57,840 --> 00:04:59,840
unfortunately nine vulnerabilities that

136
00:04:59,840 --> 00:05:02,000
we found and these span from different

137
00:05:02,000 --> 00:05:04,000
types of vulnerabilities we were able to

138
00:05:04,000 --> 00:05:05,919
find some of the most basic types of

139
00:05:05,919 --> 00:05:08,160
vulnerabilities hard coded passwords

140
00:05:08,160 --> 00:05:10,240
privileged escalation from very simple

141
00:05:10,240 --> 00:05:11,440
errors

142
00:05:11,440 --> 00:05:13,440
even a design flaw in which the

143
00:05:13,440 --> 00:05:16,000
framework is not secured not

144
00:05:16,000 --> 00:05:18,400
encrypted and not signed

145
00:05:18,400 --> 00:05:20,560
and then a couple of memory corruption

146
00:05:20,560 --> 00:05:23,360
vulnerabilities uh four of these can

147
00:05:23,360 --> 00:05:25,600
lead to remote code execution and an

148
00:05:25,600 --> 00:05:26,960
analysis and the denial of service

149
00:05:26,960 --> 00:05:28,160
mobility

150
00:05:28,160 --> 00:05:29,680
unfortunately all of these model views

151
00:05:29,680 --> 00:05:31,360
can be triggered via unauthenticated

152
00:05:31,360 --> 00:05:33,600
network brackets and then and they do

153
00:05:33,600 --> 00:05:35,680
not require any user interaction

154
00:05:35,680 --> 00:05:37,680
so simply having access to a network

155
00:05:37,680 --> 00:05:40,320
when where these devices exist can allow

156
00:05:40,320 --> 00:05:42,639
an attacker full remarkable execution

157
00:05:42,639 --> 00:05:45,840
full taker takeover of these devices

158
00:05:45,840 --> 00:05:48,639
and we've obviously done a security

159
00:05:48,639 --> 00:05:50,639
disclosure with syslog on this

160
00:05:50,639 --> 00:05:51,440
and

161
00:05:51,440 --> 00:05:53,199
a security advisory has been released a

162
00:05:53,199 --> 00:05:55,039
few days ago

163
00:05:55,039 --> 00:05:57,680
and our detailed blog from armies about

164
00:05:57,680 --> 00:06:01,039
this has also been published

165
00:06:03,199 --> 00:06:04,840
okay

166
00:06:04,840 --> 00:06:08,400
so um let's talk about about swiss log

167
00:06:08,400 --> 00:06:10,720
swiss log is the leading magic tube

168
00:06:10,720 --> 00:06:12,080
system in the market

169
00:06:12,080 --> 00:06:14,400
it's installing over 2 300 hospitals in

170
00:06:14,400 --> 00:06:16,720
north america and 3 000 hospitals

171
00:06:16,720 --> 00:06:18,000
worldwide

172
00:06:18,000 --> 00:06:19,520
the majority of hospitals in northern

173
00:06:19,520 --> 00:06:21,680
florida actually use swiss dog

174
00:06:21,680 --> 00:06:24,000
the ones that use the magic to

175
00:06:24,000 --> 00:06:25,759
solutions the large ones

176
00:06:25,759 --> 00:06:27,280
and translogic is probably the most

177
00:06:27,280 --> 00:06:29,199
advanced pneumatic tube systems that

178
00:06:29,199 --> 00:06:31,199
exist in the market worldwide it

179
00:06:31,199 --> 00:06:34,400
supports advanced features it can

180
00:06:34,400 --> 00:06:36,720
sustain high load of

181
00:06:36,720 --> 00:06:39,360
transactions it's very reliable and it

182
00:06:39,360 --> 00:06:41,680
even has some physical security features

183
00:06:41,680 --> 00:06:44,880
uh baked into it

184
00:06:45,759 --> 00:06:48,240
pneumatic tube systems are these complex

185
00:06:48,240 --> 00:06:50,560
network of analog components

186
00:06:50,560 --> 00:06:52,560
so they come from a time before the

187
00:06:52,560 --> 00:06:55,120
internet right they're supposed to

188
00:06:55,120 --> 00:06:57,680
give these networks to transfer

189
00:06:57,680 --> 00:06:59,680
letters and mail and stuff like that

190
00:06:59,680 --> 00:07:00,639
and

191
00:07:00,639 --> 00:07:03,120
and some of that design is still in

192
00:07:03,120 --> 00:07:04,880
place today

193
00:07:04,880 --> 00:07:07,680
so there are a complex of these tubes

194
00:07:07,680 --> 00:07:11,280
blowers transfer units these are some

195
00:07:11,280 --> 00:07:13,280
you know some some components that are

196
00:07:13,280 --> 00:07:15,440
like routers inside the systems and

197
00:07:15,440 --> 00:07:17,039
eventually stations

198
00:07:17,039 --> 00:07:19,520
the endpoints of the system where you

199
00:07:19,520 --> 00:07:21,280
receive carriers or you can send

200
00:07:21,280 --> 00:07:23,680
carriers

201
00:07:23,680 --> 00:07:26,319
however today this system is not as

202
00:07:26,319 --> 00:07:29,120
analog and it's completely managed over

203
00:07:29,120 --> 00:07:33,039
ip over ethernet by a central server

204
00:07:33,039 --> 00:07:34,880
and the central server today is a

205
00:07:34,880 --> 00:07:36,400
windows device

206
00:07:36,400 --> 00:07:38,240
and for many of these systems this

207
00:07:38,240 --> 00:07:40,720
device is connected to the internet

208
00:07:40,720 --> 00:07:43,280
and this allows various features

209
00:07:43,280 --> 00:07:44,879
for the system we'll talk about that in

210
00:07:44,879 --> 00:07:47,280
a bit but it's also

211
00:07:47,280 --> 00:07:49,440
essentially an attack surface through

212
00:07:49,440 --> 00:07:51,440
which attackers can come in through that

213
00:07:51,440 --> 00:07:53,360
internet connectivity

214
00:07:53,360 --> 00:07:55,120
and all of these components

215
00:07:55,120 --> 00:07:56,800
uh the stations the transporters the

216
00:07:56,800 --> 00:07:58,879
blowers they connect

217
00:07:58,879 --> 00:08:01,199
through the land to the central server

218
00:08:01,199 --> 00:08:03,120
again that in this state server has

219
00:08:03,120 --> 00:08:05,680
access to the internet

220
00:08:05,680 --> 00:08:08,479
the possible effects of cyber attacks

221
00:08:08,479 --> 00:08:10,160
on the pneumatic tube systems is quite

222
00:08:10,160 --> 00:08:12,160
severe so again this is a critical

223
00:08:12,160 --> 00:08:13,280
infrastructure it's something that the

224
00:08:13,280 --> 00:08:15,440
hospital uses on a daily basis all the

225
00:08:15,440 --> 00:08:16,960
time

226
00:08:16,960 --> 00:08:18,479
so even the knowledge of service attack

227
00:08:18,479 --> 00:08:20,479
on this network can be really harmful to

228
00:08:20,479 --> 00:08:21,919
the hospital

229
00:08:21,919 --> 00:08:24,000
there is no real back-up plan to the

230
00:08:24,000 --> 00:08:26,319
hospital if the system were to be taken

231
00:08:26,319 --> 00:08:27,840
offline

232
00:08:27,840 --> 00:08:29,599
but there are other attack vectors in

233
00:08:29,599 --> 00:08:31,360
this attack

234
00:08:31,360 --> 00:08:32,958
possibilities

235
00:08:32,958 --> 00:08:35,200
in this type of system the system does

236
00:08:35,200 --> 00:08:38,159
integrate with other hospital and

237
00:08:38,159 --> 00:08:40,799
infrastructures hospital

238
00:08:40,799 --> 00:08:42,880
staff records for example are for the

239
00:08:42,880 --> 00:08:44,480
credential of the staff

240
00:08:44,480 --> 00:08:47,120
uh so information leak of this type of

241
00:08:47,120 --> 00:08:50,240
data can be also quite severe

242
00:08:50,240 --> 00:08:53,120
and lastly maybe a little bit uh fringe

243
00:08:53,120 --> 00:08:56,160
case but still theoretically possible an

244
00:08:56,160 --> 00:08:58,320
attacker can use this system to carry

245
00:08:58,320 --> 00:09:00,560
out a sophisticated transformer attack a

246
00:09:00,560 --> 00:09:02,480
sort of sabotage attack

247
00:09:02,480 --> 00:09:05,600
so we can take over this system and then

248
00:09:05,600 --> 00:09:06,640
use it

249
00:09:06,640 --> 00:09:07,440
to

250
00:09:07,440 --> 00:09:09,040
sabotage the operation of the hospital

251
00:09:09,040 --> 00:09:11,279
reroute carriers and derail the

252
00:09:11,279 --> 00:09:13,760
operations office hospital without

253
00:09:13,760 --> 00:09:15,680
the staff necessarily understanding that

254
00:09:15,680 --> 00:09:18,720
the system does not work as intended

255
00:09:18,720 --> 00:09:21,120
so that's the theoretical risk and that

256
00:09:21,120 --> 00:09:23,200
is a good reason why we should look at

257
00:09:23,200 --> 00:09:25,120
these systems and understand whether

258
00:09:25,120 --> 00:09:27,360
that risk is there whether attacks can

259
00:09:27,360 --> 00:09:30,160
actually take place

260
00:09:30,160 --> 00:09:33,120
so now i'll hand it over to barack he

261
00:09:33,120 --> 00:09:35,040
will talk about the system

262
00:09:35,040 --> 00:09:36,480
design and structure and about the

263
00:09:36,480 --> 00:09:39,519
vulnerabilities that we found

264
00:09:42,000 --> 00:09:44,480
hi so let's talk a bit about the design

265
00:09:44,480 --> 00:09:47,200
and structure of the pts system so the

266
00:09:47,200 --> 00:09:49,120
user facing part of the system is the

267
00:09:49,120 --> 00:09:51,920
stations that's where capsules go in and

268
00:09:51,920 --> 00:09:54,160
out when a capsule is sent the station

269
00:09:54,160 --> 00:09:56,959
door closes the blower is activated and

270
00:09:56,959 --> 00:09:58,720
the capsule is pushed to the nearest

271
00:09:58,720 --> 00:10:01,680
diverter at that point the diverter is

272
00:10:01,680 --> 00:10:02,880
instructed

273
00:10:02,880 --> 00:10:05,440
to connect to the correct path and the

274
00:10:05,440 --> 00:10:08,079
capsule is travels to its destination

275
00:10:08,079 --> 00:10:11,599
using the correct pipe

276
00:10:12,160 --> 00:10:14,640
each station has a number after safely

277
00:10:14,640 --> 00:10:16,640
instead inserting the capsule the target

278
00:10:16,640 --> 00:10:19,200
station number is entered and the staff

279
00:10:19,200 --> 00:10:21,519
can also mention if the transfer should

280
00:10:21,519 --> 00:10:24,160
be slow that's used for

281
00:10:24,160 --> 00:10:26,640
sensitive samples or things that need to

282
00:10:26,640 --> 00:10:29,600
go very steadily through the system and

283
00:10:29,600 --> 00:10:31,200
the capsule is sent throughout the

284
00:10:31,200 --> 00:10:35,279
system and out of the station

285
00:10:36,240 --> 00:10:38,800
and next we have the blowers and these

286
00:10:38,800 --> 00:10:40,800
devices just control the pressure in the

287
00:10:40,800 --> 00:10:44,480
tubes pushing or pulling the capsules

288
00:10:44,480 --> 00:10:47,120
and then we have the diverter diverters

289
00:10:47,120 --> 00:10:48,800
and these are the swift the switches of

290
00:10:48,800 --> 00:10:50,399
the system much like

291
00:10:50,399 --> 00:10:52,959
switches in packet networks and these

292
00:10:52,959 --> 00:10:55,200
are physical switches and they divert

293
00:10:55,200 --> 00:10:57,279
the capsules to the correct tube on the

294
00:10:57,279 --> 00:11:00,720
path to its destination

295
00:11:00,720 --> 00:11:03,200
um orchestrating all of that there's the

296
00:11:03,200 --> 00:11:05,200
central management server

297
00:11:05,200 --> 00:11:08,800
called the sec and this orchestrates all

298
00:11:08,800 --> 00:11:10,560
of the operation telling the blowers

299
00:11:10,560 --> 00:11:13,040
when to act and telling the diverters

300
00:11:13,040 --> 00:11:16,240
and station when they should send the

301
00:11:16,240 --> 00:11:19,040
capsule or just weight and

302
00:11:19,040 --> 00:11:19,920
just

303
00:11:19,920 --> 00:11:23,040
making sure the capsule travels safely

304
00:11:23,040 --> 00:11:25,760
throughout the hospital

305
00:11:25,760 --> 00:11:28,640
all of that interconnects to one zone

306
00:11:28,640 --> 00:11:30,399
the blower controls the air pressure in

307
00:11:30,399 --> 00:11:32,480
the tube and using the diverters the

308
00:11:32,480 --> 00:11:34,000
central server

309
00:11:34,000 --> 00:11:36,880
directs the capsule to the desired

310
00:11:36,880 --> 00:11:38,399
destination

311
00:11:38,399 --> 00:11:40,720
one capsule can pass through a zone at a

312
00:11:40,720 --> 00:11:43,600
time but zones can be interconnected

313
00:11:43,600 --> 00:11:46,560
using an inter zone diverter much like a

314
00:11:46,560 --> 00:11:50,160
router compared to a switch

315
00:11:51,120 --> 00:11:54,079
swisslog has some advanced features that

316
00:11:54,079 --> 00:11:56,160
are not trivial for pneumatic tube

317
00:11:56,160 --> 00:11:59,440
systems um like secure transfers where

318
00:11:59,440 --> 00:12:02,000
the sender os evo and need to use some

319
00:12:02,000 --> 00:12:04,959
rfid or a password to get the capsule

320
00:12:04,959 --> 00:12:07,519
and there's also transfer speed control

321
00:12:07,519 --> 00:12:08,240
for

322
00:12:08,240 --> 00:12:10,399
slow speed sensitive cargo

323
00:12:10,399 --> 00:12:12,480
and an alert system

324
00:12:12,480 --> 00:12:15,279
for staff notifications uh when a

325
00:12:15,279 --> 00:12:17,920
capsule that is destined to them arrives

326
00:12:17,920 --> 00:12:19,360
and or

327
00:12:19,360 --> 00:12:21,120
the notifications can be sent using

328
00:12:21,120 --> 00:12:25,200
various methods like email sms etc

329
00:12:25,200 --> 00:12:27,440
this system requires requires internet

330
00:12:27,440 --> 00:12:30,320
connectivity from the central server

331
00:12:30,320 --> 00:12:33,200
and lastly swiss log offers to maintain

332
00:12:33,200 --> 00:12:35,200
the server on behalf of the client by

333
00:12:35,200 --> 00:12:37,519
remo remote monitoring the central

334
00:12:37,519 --> 00:12:40,320
server from swiss load cloud again using

335
00:12:40,320 --> 00:12:43,360
internet connectivity

336
00:12:44,240 --> 00:12:46,399
there are several generations

337
00:12:46,399 --> 00:12:48,959
of the translogic system early systems

338
00:12:48,959 --> 00:12:50,959
were based on serial connection with the

339
00:12:50,959 --> 00:12:52,480
central server

340
00:12:52,480 --> 00:12:54,639
iq stations were the first

341
00:12:54,639 --> 00:12:56,639
to have ethernet connectivity and these

342
00:12:56,639 --> 00:13:00,959
are still widely used in hospitals today

343
00:13:00,959 --> 00:13:03,519
examining the iq station board it has an

344
00:13:03,519 --> 00:13:06,720
ethernet connector it uses a 16 bit mcu

345
00:13:06,720 --> 00:13:08,639
and the file and the firmware is

346
00:13:08,639 --> 00:13:10,399
installed on an external flash

347
00:13:10,399 --> 00:13:13,920
unencrypted and unsigned

348
00:13:13,920 --> 00:13:16,959
looking in the iq station manual there

349
00:13:16,959 --> 00:13:19,279
is a dip switch that needs to be set in

350
00:13:19,279 --> 00:13:22,000
order to execute a firmware upgrade

351
00:13:22,000 --> 00:13:24,079
on one hand this makes the upgrade

352
00:13:24,079 --> 00:13:27,040
operation tedious and almost impractical

353
00:13:27,040 --> 00:13:27,920
for

354
00:13:27,920 --> 00:13:30,639
critical systems on the other hand this

355
00:13:30,639 --> 00:13:33,200
does safeguard the system from unwanted

356
00:13:33,200 --> 00:13:36,639
malicious firmware updates

357
00:13:40,000 --> 00:13:41,120
the latest

358
00:13:41,120 --> 00:13:44,160
station by swiss log is the next station

359
00:13:44,160 --> 00:13:46,160
it has a touchscreen and supports

360
00:13:46,160 --> 00:13:48,880
advanced features like rfid this system

361
00:13:48,880 --> 00:13:52,240
runs over 32 bits arm architecture and

362
00:13:52,240 --> 00:13:54,880
runs a very old linux kernel

363
00:13:54,880 --> 00:13:56,639
there are two interesting processes in

364
00:13:56,639 --> 00:14:00,320
the system both named hmi3 the first one

365
00:14:00,320 --> 00:14:02,480
is an elf file responsible for the low

366
00:14:02,480 --> 00:14:04,480
level operation of the station like

367
00:14:04,480 --> 00:14:06,720
communicating with the management server

368
00:14:06,720 --> 00:14:09,519
the rfid reader and the station door

369
00:14:09,519 --> 00:14:11,839
the second one is a java app mainly

370
00:14:11,839 --> 00:14:13,920
responsible for the gui of this data of

371
00:14:13,920 --> 00:14:18,160
this device and logical operations

372
00:14:18,160 --> 00:14:21,519
looking at hmi3 there are no mitigations

373
00:14:21,519 --> 00:14:23,760
of any kind the elf is not position

374
00:14:23,760 --> 00:14:25,839
independent code it is compiled with

375
00:14:25,839 --> 00:14:27,839
debug symbols and there are no stack

376
00:14:27,839 --> 00:14:30,560
canaries all that makes it a convenient

377
00:14:30,560 --> 00:14:32,480
target for exploitation once we find a

378
00:14:32,480 --> 00:14:35,199
vulnerability

379
00:14:35,680 --> 00:14:37,360
connecting the system and looking at the

380
00:14:37,360 --> 00:14:39,839
protocol the first thing that pops is

381
00:14:39,839 --> 00:14:41,839
that there is a magic

382
00:14:41,839 --> 00:14:44,880
header containing the letters tlpu

383
00:14:44,880 --> 00:14:47,040
we guessed it stands for

384
00:14:47,040 --> 00:14:49,519
translogic pneumatic universe

385
00:14:49,519 --> 00:14:50,959
after the marker

386
00:14:50,959 --> 00:14:52,959
there is a sequence number

387
00:14:52,959 --> 00:14:55,120
operation type and the actual request

388
00:14:55,120 --> 00:14:57,440
request data

389
00:14:57,440 --> 00:14:58,959
and the device has multiple attack

390
00:14:58,959 --> 00:15:01,519
surfaces the first is the physical one

391
00:15:01,519 --> 00:15:03,680
the firmware is saved unencrypted and

392
00:15:03,680 --> 00:15:06,639
unsigned on an attached attached sd card

393
00:15:06,639 --> 00:15:08,560
an attacker could simply swap the sd

394
00:15:08,560 --> 00:15:10,399
card loading an attacker controlled

395
00:15:10,399 --> 00:15:12,480
firmware

396
00:15:12,480 --> 00:15:14,320
looking at the network interface we

397
00:15:14,320 --> 00:15:17,760
found this in the manual it says it says

398
00:15:17,760 --> 00:15:20,480
the rest of the system is not vulnerable

399
00:15:20,480 --> 00:15:22,399
to attacks because the system and

400
00:15:22,399 --> 00:15:24,639
equipment uses a language that only the

401
00:15:24,639 --> 00:15:27,600
sec can understand thereby eliminating

402
00:15:27,600 --> 00:15:29,839
any network security concerns for the

403
00:15:29,839 --> 00:15:33,040
other pts devices

404
00:15:33,920 --> 00:15:35,519
the management server connects to the

405
00:15:35,519 --> 00:15:37,600
internet for license checks alerts

406
00:15:37,600 --> 00:15:40,079
notifications remote monitoring and

407
00:15:40,079 --> 00:15:42,560
maintenance any vulnerability found in

408
00:15:42,560 --> 00:15:44,480
its proprietary code can lead an

409
00:15:44,480 --> 00:15:45,600
attacker

410
00:15:45,600 --> 00:15:47,920
from the internet to the control to

411
00:15:47,920 --> 00:15:50,480
control the entire pts system

412
00:15:50,480 --> 00:15:54,000
inside the hospital

413
00:15:54,000 --> 00:15:56,160
we decided to investigate the nexus

414
00:15:56,160 --> 00:15:59,040
station since since it's the latest and

415
00:15:59,040 --> 00:16:01,680
most sophisticated station it is both

416
00:16:01,680 --> 00:16:04,079
user-facing and server-facing and

417
00:16:04,079 --> 00:16:06,320
controls the source and destination of

418
00:16:06,320 --> 00:16:09,839
all the transactions in the system

419
00:16:10,000 --> 00:16:12,800
so vulnerability one and two are

420
00:16:12,800 --> 00:16:15,759
actually hard out coded passwords and

421
00:16:15,759 --> 00:16:17,920
apparently the device has an open telnet

422
00:16:17,920 --> 00:16:20,399
server and we took the shadow file of

423
00:16:20,399 --> 00:16:22,880
the system gave it to john the ripper

424
00:16:22,880 --> 00:16:24,880
and found a hard-coded password for the

425
00:16:24,880 --> 00:16:27,120
user user and there is also an

426
00:16:27,120 --> 00:16:29,600
hard-coded password for the user root

427
00:16:29,600 --> 00:16:32,079
that we weren't able to crack so using

428
00:16:32,079 --> 00:16:34,720
the user user an attacker can get a

429
00:16:34,720 --> 00:16:39,040
linux shell with user privileges

430
00:16:39,040 --> 00:16:41,360
to solve the privilege problem we found

431
00:16:41,360 --> 00:16:42,720
that the

432
00:16:42,720 --> 00:16:46,320
hmi run file is a user writable bash

433
00:16:46,320 --> 00:16:49,519
script that's executed on startup on

434
00:16:49,519 --> 00:16:51,279
system startup so

435
00:16:51,279 --> 00:16:53,839
you can just

436
00:16:53,839 --> 00:16:55,759
so in order to get root privileges an

437
00:16:55,759 --> 00:16:58,240
attacker just needs to connect to the

438
00:16:58,240 --> 00:17:01,839
telnet server change the hmi run script

439
00:17:01,839 --> 00:17:04,400
and reboot using any one of the memory

440
00:17:04,400 --> 00:17:05,919
corruption vulnerabilities we are about

441
00:17:05,919 --> 00:17:08,319
to talk

442
00:17:09,359 --> 00:17:11,280
the next vulnerability is a classic

443
00:17:11,280 --> 00:17:13,280
missing boundary check

444
00:17:13,280 --> 00:17:15,760
the udp rx thread is the main thread

445
00:17:15,760 --> 00:17:18,079
analyzing incoming commands for the

446
00:17:18,079 --> 00:17:20,240
translogic protocol

447
00:17:20,240 --> 00:17:23,599
reclaim is the size of the incoming

448
00:17:23,599 --> 00:17:25,760
incoming packet making it an attacker

449
00:17:25,760 --> 00:17:27,760
controlled unsigned short

450
00:17:27,760 --> 00:17:31,679
a q buff is a buffer of length 180 hex

451
00:17:31,679 --> 00:17:34,080
from the custom internal hip

452
00:17:34,080 --> 00:17:36,080
if the received buffer is shorter than

453
00:17:36,080 --> 00:17:38,880
20 bytes data lan will underflow to 64

454
00:17:38,880 --> 00:17:41,280
kilobytes there is also an underflow in

455
00:17:41,280 --> 00:17:43,039
the call to mem copy

456
00:17:43,039 --> 00:17:45,440
that should have copied four gigabyte

457
00:17:45,440 --> 00:17:47,120
leading this vulnerability to be a dos

458
00:17:47,120 --> 00:17:49,600
vulnerability denial of service however

459
00:17:49,600 --> 00:17:51,360
there is a known vulnerability in the

460
00:17:51,360 --> 00:17:54,559
leap c version used by this device

461
00:17:54,559 --> 00:17:56,960
so according to this vulnerability

462
00:17:56,960 --> 00:17:58,960
the implementation of vm copy

463
00:17:58,960 --> 00:18:02,080
specifically for arm header bug that the

464
00:18:02,080 --> 00:18:04,160
length field was treated as a signed

465
00:18:04,160 --> 00:18:05,120
integer

466
00:18:05,120 --> 00:18:07,200
you can see in the snippet that the

467
00:18:07,200 --> 00:18:09,760
unsigned length is being cast to a

468
00:18:09,760 --> 00:18:12,080
signed integer causing the mem copy to

469
00:18:12,080 --> 00:18:14,160
copy only a small amount of bytes

470
00:18:14,160 --> 00:18:16,240
instead of 4 gigabyte which would have

471
00:18:16,240 --> 00:18:19,360
led to a seg fault

472
00:18:19,360 --> 00:18:21,440
looking back at the code

473
00:18:21,440 --> 00:18:24,240
the mem copy will not crash the process

474
00:18:24,240 --> 00:18:26,240
after this function the buffer is sent

475
00:18:26,240 --> 00:18:28,400
to other threads in the process which

476
00:18:28,400 --> 00:18:30,799
use the handle flowed unsigned 16 bit

477
00:18:30,799 --> 00:18:31,679
length

478
00:18:31,679 --> 00:18:33,679
this leads to an exploitable hip

479
00:18:33,679 --> 00:18:35,760
corruption that can reach a remote code

480
00:18:35,760 --> 00:18:38,080
execution

481
00:18:38,080 --> 00:18:40,160
next up is another missing boundary

482
00:18:40,160 --> 00:18:41,039
check

483
00:18:41,039 --> 00:18:43,440
certain udp packets will be processed by

484
00:18:43,440 --> 00:18:45,840
the sec process message function shown

485
00:18:45,840 --> 00:18:49,200
here and a1 is the incoming packet

486
00:18:49,200 --> 00:18:52,799
a1 data n is the received data length if

487
00:18:52,799 --> 00:18:56,320
data at offset 0 equals 90 hex the data

488
00:18:56,320 --> 00:18:59,200
is copied without the first byte but

489
00:18:59,200 --> 00:19:01,200
there is no boundary check so data lan

490
00:19:01,200 --> 00:19:02,799
can be zero

491
00:19:02,799 --> 00:19:04,160
and cause

492
00:19:04,160 --> 00:19:07,120
an overflow you may ask yourself how can

493
00:19:07,120 --> 00:19:10,559
you set data at offset 0 and if the data

494
00:19:10,559 --> 00:19:13,520
length is zero and the answer is that

495
00:19:13,520 --> 00:19:16,720
the buffers are not initialized between

496
00:19:16,720 --> 00:19:19,440
usages so an attacker could easily just

497
00:19:19,440 --> 00:19:22,080
spray the buffers with data at offset 0

498
00:19:22,080 --> 00:19:22,960
equal

499
00:19:22,960 --> 00:19:26,400
to 90 hex there are only 59 buffers in

500
00:19:26,400 --> 00:19:28,799
those queues so that's fairly easy and

501
00:19:28,799 --> 00:19:30,960
after that send a buffer with data land

502
00:19:30,960 --> 00:19:34,000
equals to zero and get the 90 hex byte

503
00:19:34,000 --> 00:19:36,840
from the uninitialized

504
00:19:36,840 --> 00:19:40,640
data okay vulnerability 6 is of a

505
00:19:40,640 --> 00:19:42,480
different kind

506
00:19:42,480 --> 00:19:45,200
when the hmi process starts it waits for

507
00:19:45,200 --> 00:19:47,840
the java gui to connect to it to do so

508
00:19:47,840 --> 00:19:50,160
it opens a listening tcp socket that

509
00:19:50,160 --> 00:19:52,400
accepts one connection and one

510
00:19:52,400 --> 00:19:54,480
connection only unfortunately that

511
00:19:54,480 --> 00:19:57,039
socket is bound to all interfaces and

512
00:19:57,039 --> 00:19:58,799
not just localhost

513
00:19:58,799 --> 00:20:01,360
if an attacker is able to cause a reboot

514
00:20:01,360 --> 00:20:03,840
there might be a window to take over

515
00:20:03,840 --> 00:20:05,919
this tcp connection before degree

516
00:20:05,919 --> 00:20:06,960
connects

517
00:20:06,960 --> 00:20:09,120
let's see how long does it take for the

518
00:20:09,120 --> 00:20:11,679
java app to connect and can we win the

519
00:20:11,679 --> 00:20:12,799
race

520
00:20:12,799 --> 00:20:14,720
the process writes waiting for tcp

521
00:20:14,720 --> 00:20:17,679
connection when it starts accepting and

522
00:20:17,679 --> 00:20:20,080
ccp accepted tcp socket when a

523
00:20:20,080 --> 00:20:22,080
connection is made so we just need to

524
00:20:22,080 --> 00:20:24,879
look at the log

525
00:20:25,039 --> 00:20:28,240
the first log is printed after 34

526
00:20:28,240 --> 00:20:29,280
seconds

527
00:20:29,280 --> 00:20:31,120
from wood and the second after a full

528
00:20:31,120 --> 00:20:33,280
minute that means that an attacker has

529
00:20:33,280 --> 00:20:35,919
approximately 25 seconds to win the race

530
00:20:35,919 --> 00:20:38,000
which is more than enough we were able

531
00:20:38,000 --> 00:20:39,919
to do this manually

532
00:20:39,919 --> 00:20:41,200
using one of the memory corruption

533
00:20:41,200 --> 00:20:43,679
vulnerabilities to trigger a reboot and

534
00:20:43,679 --> 00:20:46,799
win the race on startup at that point

535
00:20:46,799 --> 00:20:49,120
the gui cannot connect to the back end

536
00:20:49,120 --> 00:20:51,440
since it accepts only one connection

537
00:20:51,440 --> 00:20:53,280
so the attacker can send any gui

538
00:20:53,280 --> 00:20:55,600
commands as if it was a physical user

539
00:20:55,600 --> 00:20:57,760
using the station you can

540
00:20:57,760 --> 00:21:00,240
act as if you've pushed a virtual

541
00:21:00,240 --> 00:21:03,280
button on the screen and the user can't

542
00:21:03,280 --> 00:21:06,320
do nothing about it

543
00:21:06,720 --> 00:21:09,280
next is another missing boundary check

544
00:21:09,280 --> 00:21:11,520
this function passes the messages coming

545
00:21:11,520 --> 00:21:13,520
from the previously message mentioned

546
00:21:13,520 --> 00:21:14,960
tcp socket

547
00:21:14,960 --> 00:21:16,720
this one livability is similar to the

548
00:21:16,720 --> 00:21:19,039
last memory vulnerability when a message

549
00:21:19,039 --> 00:21:21,760
is sent to the hmitcp socket

550
00:21:21,760 --> 00:21:23,600
which we've hijacked using the previous

551
00:21:23,600 --> 00:21:26,960
vulnerability it is forwarded to the hmi

552
00:21:26,960 --> 00:21:29,360
process message a function through the

553
00:21:29,360 --> 00:21:32,400
pending queue since the data length is

554
00:21:32,400 --> 00:21:34,480
taken from the received packet an

555
00:21:34,480 --> 00:21:37,120
attacker could set it to zero making it

556
00:21:37,120 --> 00:21:39,520
underflow in the hmi process message

557
00:21:39,520 --> 00:21:40,480
function

558
00:21:40,480 --> 00:21:45,039
we can set data at offset 0 to 30 33 hex

559
00:21:45,039 --> 00:21:47,039
using the same spray technique we used

560
00:21:47,039 --> 00:21:49,520
for the last backbone boundary check

561
00:21:49,520 --> 00:21:51,520
just spray many messages with data

562
00:21:51,520 --> 00:21:55,039
offset 0 equals to 33 x and then send a

563
00:21:55,039 --> 00:21:57,039
packet with data length

564
00:21:57,039 --> 00:22:00,080
set to zero

565
00:22:04,559 --> 00:22:06,400
the next vulnerability is the trickiest

566
00:22:06,400 --> 00:22:08,640
of them all it's an off by three stack

567
00:22:08,640 --> 00:22:11,440
overflow so bear with me it happens when

568
00:22:11,440 --> 00:22:14,000
a message that is sent to the udp thread

569
00:22:14,000 --> 00:22:16,559
is ultimately forwarded to the java

570
00:22:16,559 --> 00:22:20,240
process via the tcp socket

571
00:22:20,640 --> 00:22:23,120
we start by sending a buffer of length

572
00:22:23,120 --> 00:22:24,640
370

573
00:22:24,640 --> 00:22:26,960
to the udp alex thread that's the

574
00:22:26,960 --> 00:22:30,240
maximum received length

575
00:22:32,480 --> 00:22:35,440
then the 20 bytes header is omitted

576
00:22:35,440 --> 00:22:38,320
leaving us with 350 bytes that are

577
00:22:38,320 --> 00:22:40,400
copied to a buffer on the hip

578
00:22:40,400 --> 00:22:43,039
that buffer is sent to the worker thread

579
00:22:43,039 --> 00:22:46,960
for pulsing over a queue

580
00:22:48,400 --> 00:22:50,400
the worker thread gets the buffer out of

581
00:22:50,400 --> 00:22:53,440
the queue and processes it using the scc

582
00:22:53,440 --> 00:22:55,039
process message function that we've

583
00:22:55,039 --> 00:22:57,760
mentioned before

584
00:22:58,960 --> 00:23:02,000
if the first byte of the data equals

585
00:23:02,000 --> 00:23:05,840
the 37x command the message is forwarded

586
00:23:05,840 --> 00:23:08,720
to the hmi still containing a buffer of

587
00:23:08,720 --> 00:23:12,360
length 350.

588
00:23:13,840 --> 00:23:16,000
forward to hmi copies the buffer to

589
00:23:16,000 --> 00:23:17,840
another buffer and sends the copied

590
00:23:17,840 --> 00:23:22,760
buffer to the tcp tx thread

591
00:23:23,679 --> 00:23:26,880
the dcptx thread copies the data

592
00:23:26,880 --> 00:23:28,720
from the input buffer to a stack

593
00:23:28,720 --> 00:23:32,320
allocated buffer of length 352 but the

594
00:23:32,320 --> 00:23:35,120
copy offset is three so the last byte of

595
00:23:35,120 --> 00:23:38,640
the buffer is written to offset 352

596
00:23:38,640 --> 00:23:41,760
resulting in an off by one

597
00:23:41,760 --> 00:23:45,200
but wait there's more

598
00:23:46,880 --> 00:23:50,320
after the mem copy edclc a crc to the

599
00:23:50,320 --> 00:23:53,200
end of the buffer they use a 2 byte crc

600
00:23:53,200 --> 00:23:54,320
resulting in two more

601
00:23:54,320 --> 00:23:56,640
attacker-controlled bytes hence the off

602
00:23:56,640 --> 00:23:59,840
by 3 stack overflow this overflow can

603
00:23:59,840 --> 00:24:01,919
lead to remote code execution as well we

604
00:24:01,919 --> 00:24:05,679
will show how in a few slides

605
00:24:05,679 --> 00:24:07,520
the last vulnerability

606
00:24:07,520 --> 00:24:09,120
we'll talk about is actually a

607
00:24:09,120 --> 00:24:11,679
fundamental fundamental design flow in

608
00:24:11,679 --> 00:24:13,760
all turns logic stations in which the

609
00:24:13,760 --> 00:24:16,559
firmware is unencrypted and unsigned

610
00:24:16,559 --> 00:24:18,559
similar to the legacy translogic

611
00:24:18,559 --> 00:24:20,480
stations there is a remote firmware

612
00:24:20,480 --> 00:24:22,320
upgrade process with no firmware

613
00:24:22,320 --> 00:24:24,960
validation but unlike the old stations

614
00:24:24,960 --> 00:24:26,799
the nexus station supports firmware

615
00:24:26,799 --> 00:24:28,960
upgrades via the unauthenticated

616
00:24:28,960 --> 00:24:32,080
unencrypted udp protocol at all times so

617
00:24:32,080 --> 00:24:34,720
there's no need for spatial special

618
00:24:34,720 --> 00:24:36,159
download mode

619
00:24:36,159 --> 00:24:38,080
deep switch or any kind

620
00:24:38,080 --> 00:24:40,240
of thing like that the only validation

621
00:24:40,240 --> 00:24:42,960
is a simple clc after the validation the

622
00:24:42,960 --> 00:24:46,320
newly downloaded app is copied to hmi3

623
00:24:46,320 --> 00:24:48,799
new and on reboot that executable

624
00:24:48,799 --> 00:24:51,679
becomes the new hmi3 an attacker abusing

625
00:24:51,679 --> 00:24:54,720
this security lacking mechanism gains

626
00:24:54,720 --> 00:24:56,640
both remote code execution and

627
00:24:56,640 --> 00:24:58,880
persistence over the system in one

628
00:24:58,880 --> 00:25:01,840
vulnerability

629
00:25:01,919 --> 00:25:03,600
that's all fun and games let's talk

630
00:25:03,600 --> 00:25:05,919
about exploiting all of that generally

631
00:25:05,919 --> 00:25:09,440
speaking we have two options

632
00:25:09,440 --> 00:25:12,000
the easy way we can upload a malicious

633
00:25:12,000 --> 00:25:15,760
firmware of or just use the default user

634
00:25:15,760 --> 00:25:17,679
and the privilege escalation

635
00:25:17,679 --> 00:25:19,600
however we believe that the memory

636
00:25:19,600 --> 00:25:21,440
corruption vulnerabilities might be

637
00:25:21,440 --> 00:25:23,440
inherent to the code base parsing the

638
00:25:23,440 --> 00:25:25,840
translogic protocol so we took them as

639
00:25:25,840 --> 00:25:28,000
an exercise to see whether they could be

640
00:25:28,000 --> 00:25:32,159
exploited to gain an rce as well

641
00:25:32,720 --> 00:25:35,440
we are going to use the off by 3 stack

642
00:25:35,440 --> 00:25:38,159
overflow buffer descent is right after

643
00:25:38,159 --> 00:25:41,039
buff so the overflow rights to the three

644
00:25:41,039 --> 00:25:43,440
least significant bytes of the buffer to

645
00:25:43,440 --> 00:25:45,600
send pointer this pointer is then

646
00:25:45,600 --> 00:25:48,320
returned to the free q which leads to a

647
00:25:48,320 --> 00:25:51,279
hip corruption the plan is

648
00:25:51,279 --> 00:25:54,159
we move buffer to send to the global

649
00:25:54,159 --> 00:25:56,159
offset table section where there are

650
00:25:56,159 --> 00:25:57,840
many function pointers that we can

651
00:25:57,840 --> 00:26:00,000
overwrite then we send another udp

652
00:26:00,000 --> 00:26:02,400
packet that will trigger the use of the

653
00:26:02,400 --> 00:26:04,799
moved buffer this will overwrite the

654
00:26:04,799 --> 00:26:07,360
address of mem copy and set it to point

655
00:26:07,360 --> 00:26:11,120
to a shell code in the hip

656
00:26:11,120 --> 00:26:13,600
we will start by examining by examining

657
00:26:13,600 --> 00:26:16,480
the custom process hip there are 59

658
00:26:16,480 --> 00:26:19,279
fixed size pre-allocated hip blocks that

659
00:26:19,279 --> 00:26:20,880
are moved around between the different

660
00:26:20,880 --> 00:26:22,400
threads and cues

661
00:26:22,400 --> 00:26:24,400
the blocks are sequential in memory

662
00:26:24,400 --> 00:26:26,640
the first two d words of each block are

663
00:26:26,640 --> 00:26:28,880
the next and prev pointers used by the

664
00:26:28,880 --> 00:26:32,960
queues the blocks are assigned too

665
00:26:34,480 --> 00:26:36,480
the blocks are constantly moved around

666
00:26:36,480 --> 00:26:37,919
between the different queues of the

667
00:26:37,919 --> 00:26:39,120
process

668
00:26:39,120 --> 00:26:41,600
and by diff and by different threads

669
00:26:41,600 --> 00:26:43,679
it's important to note that the block

670
00:26:43,679 --> 00:26:46,559
data is never wiped between usages and

671
00:26:46,559 --> 00:26:48,480
only the pref and next pointers are

672
00:26:48,480 --> 00:26:49,600
overwritten

673
00:26:49,600 --> 00:26:53,120
when the blocks are moved around

674
00:26:53,120 --> 00:26:55,279
now that we know the hip structure let's

675
00:26:55,279 --> 00:26:57,120
examine what happens when the

676
00:26:57,120 --> 00:26:59,360
vulnerability is triggered the mem copy

677
00:26:59,360 --> 00:27:02,799
is copying one byte too much and the crc

678
00:27:02,799 --> 00:27:05,520
adds two more bytes since buffer to send

679
00:27:05,520 --> 00:27:07,440
is right after buff and this is little

680
00:27:07,440 --> 00:27:10,559
indian arm it means that an attacker can

681
00:27:10,559 --> 00:27:12,720
control the three least significant

682
00:27:12,720 --> 00:27:16,000
bytes of buffer to send

683
00:27:19,039 --> 00:27:21,760
so now we can point buffer to send to

684
00:27:21,760 --> 00:27:24,240
wherever we want even outside of the

685
00:27:24,240 --> 00:27:26,080
block structure this can become an

686
00:27:26,080 --> 00:27:28,240
effective write what where primitive and

687
00:27:28,240 --> 00:27:30,880
gaining code execution via a primitive

688
00:27:30,880 --> 00:27:32,880
of this nature can be done in various

689
00:27:32,880 --> 00:27:35,760
ways one way is to use the to use the

690
00:27:35,760 --> 00:27:38,080
global offset table the got

691
00:27:38,080 --> 00:27:40,559
to overwrite function pointers that will

692
00:27:40,559 --> 00:27:42,480
later lead to execution of controlled

693
00:27:42,480 --> 00:27:44,960
code let's examine the memory layout of

694
00:27:44,960 --> 00:27:47,279
the process

695
00:27:47,279 --> 00:27:49,440
as you recall the main binary is not

696
00:27:49,440 --> 00:27:52,720
aslr capable so the section addresses

697
00:27:52,720 --> 00:27:54,240
are predictable

698
00:27:54,240 --> 00:27:56,799
the hip blocks are in the bss section

699
00:27:56,799 --> 00:27:59,200
and both the bss and the global offset

700
00:27:59,200 --> 00:28:00,159
table

701
00:28:00,159 --> 00:28:02,720
sections share the same msb bytes most

702
00:28:02,720 --> 00:28:03,840
significant

703
00:28:03,840 --> 00:28:06,559
byte another important thing to mention

704
00:28:06,559 --> 00:28:08,720
is that as you can see for some reason

705
00:28:08,720 --> 00:28:11,600
the bss section is also executable

706
00:28:11,600 --> 00:28:13,679
connecting the dots we can set the new

707
00:28:13,679 --> 00:28:15,919
buffer to send address to be somewhere

708
00:28:15,919 --> 00:28:19,279
inside the got table using our overflow

709
00:28:19,279 --> 00:28:21,200
and lead a function pointer there to

710
00:28:21,200 --> 00:28:24,159
point to a hip buffer with a shell code

711
00:28:24,159 --> 00:28:27,120
since the hip is also executable a call

712
00:28:27,120 --> 00:28:30,000
to function pointer in the got will lead

713
00:28:30,000 --> 00:28:32,559
to a shell code execution in the hip we

714
00:28:32,559 --> 00:28:34,480
just need to find a good place in the

715
00:28:34,480 --> 00:28:37,279
got section

716
00:28:40,080 --> 00:28:42,159
when a buffer is added to the free queue

717
00:28:42,159 --> 00:28:44,720
the first two d words are overwritten

718
00:28:44,720 --> 00:28:46,960
with the next and prep pointers in the

719
00:28:46,960 --> 00:28:49,279
following address in the got we can

720
00:28:49,279 --> 00:28:51,279
overwrite the first two d words since

721
00:28:51,279 --> 00:28:54,320
stl to unsigned long and p thread create

722
00:28:54,320 --> 00:28:56,320
are used only in the initialization of

723
00:28:56,320 --> 00:28:57,440
the process

724
00:28:57,440 --> 00:28:59,840
once buffer to send is overwritten to

725
00:28:59,840 --> 00:29:02,399
point to this got address the block is

726
00:29:02,399 --> 00:29:04,720
added back to the free queue so now we

727
00:29:04,720 --> 00:29:06,399
have a block in the queue that is

728
00:29:06,399 --> 00:29:08,240
actually in the global offset table

729
00:29:08,240 --> 00:29:09,200
section

730
00:29:09,200 --> 00:29:11,279
sending multiple udp packets will

731
00:29:11,279 --> 00:29:13,919
ultimately trigger the use of

732
00:29:13,919 --> 00:29:17,200
our new got block which will lead to an

733
00:29:17,200 --> 00:29:18,960
override of the mam copy function

734
00:29:18,960 --> 00:29:21,200
pointer

735
00:29:21,200 --> 00:29:24,240
when the got block is allocated

736
00:29:24,240 --> 00:29:26,640
by the udprx thread the vam copy

737
00:29:26,640 --> 00:29:28,960
function pointer will be overwritten

738
00:29:28,960 --> 00:29:30,960
with the sequence number from the

739
00:29:30,960 --> 00:29:33,840
incoming packet

740
00:29:34,000 --> 00:29:36,480
we can set the sequence number to be the

741
00:29:36,480 --> 00:29:38,880
address of a shell code in the heap

742
00:29:38,880 --> 00:29:41,120
which we should spray before exploiting

743
00:29:41,120 --> 00:29:43,520
the overflow this means that when mem

744
00:29:43,520 --> 00:29:46,320
copy is called just a few lines later it

745
00:29:46,320 --> 00:29:48,000
is actually a call to a shell code in

746
00:29:48,000 --> 00:29:49,200
the hip

747
00:29:49,200 --> 00:29:53,120
taken from a previously sent packet

748
00:29:53,120 --> 00:29:55,840
so let's sum this all up we start by

749
00:29:55,840 --> 00:29:57,200
heat spraying

750
00:29:57,200 --> 00:29:59,120
with the shell code in the right place

751
00:29:59,120 --> 00:30:01,520
then we trigger the off by three volt

752
00:30:01,520 --> 00:30:03,679
vulnerability to move one block of the

753
00:30:03,679 --> 00:30:07,360
hip to the got section where mem copy is

754
00:30:07,360 --> 00:30:10,000
after that we spray again with the

755
00:30:10,000 --> 00:30:12,640
address of the shell code in the

756
00:30:12,640 --> 00:30:14,799
sequence number so that mem copy will

757
00:30:14,799 --> 00:30:17,120
point to the shell code once the got

758
00:30:17,120 --> 00:30:20,000
block is used the mam copy pointer

759
00:30:20,000 --> 00:30:20,799
will

760
00:30:20,799 --> 00:30:22,880
point to the shell code and then the

761
00:30:22,880 --> 00:30:25,760
show code will be triggered and that's

762
00:30:25,760 --> 00:30:26,480
it

763
00:30:26,480 --> 00:30:28,799
it's demo time i will now give the stage

764
00:30:28,799 --> 00:30:32,960
back to ben for the demo demonstration

765
00:30:35,520 --> 00:30:36,720
all right

766
00:30:36,720 --> 00:30:38,399
so

767
00:30:38,399 --> 00:30:39,840
um

768
00:30:39,840 --> 00:30:40,960
barack

769
00:30:40,960 --> 00:30:42,399
went through the wrong reasons that we

770
00:30:42,399 --> 00:30:44,399
found and like you saw it was some very

771
00:30:44,399 --> 00:30:46,159
basic vulnerabilities

772
00:30:46,159 --> 00:30:47,279
um

773
00:30:47,279 --> 00:30:49,360
and then we got to the point

774
00:30:49,360 --> 00:30:51,279
on how we are going to demo this and we

775
00:30:51,279 --> 00:30:53,360
really like this subreddit called really

776
00:30:53,360 --> 00:30:57,120
one doom and the short answer is it will

777
00:30:57,120 --> 00:30:59,279
um so i'll walk you through this demo

778
00:30:59,279 --> 00:31:00,559
essentially we

779
00:31:00,559 --> 00:31:02,000
exploited this off by three stack

780
00:31:02,000 --> 00:31:05,120
overflow turned into heap overflow

781
00:31:05,120 --> 00:31:07,600
and got the code execution on the swiss

782
00:31:07,600 --> 00:31:09,679
log nexus control panel

783
00:31:09,679 --> 00:31:12,399
let's go through it

784
00:31:13,039 --> 00:31:15,039
so we first see barack playing with the

785
00:31:15,039 --> 00:31:16,960
station which is fully operational at

786
00:31:16,960 --> 00:31:19,840
this point

787
00:31:22,799 --> 00:31:24,480
now we start the attack by spraying the

788
00:31:24,480 --> 00:31:27,360
heap to fill it with shellcode buffers

789
00:31:27,360 --> 00:31:30,080
this is the first step and then

790
00:31:30,080 --> 00:31:31,919
we trigger the overflow to overwrite the

791
00:31:31,919 --> 00:31:33,200
buffer to send

792
00:31:33,200 --> 00:31:35,200
pointer so it will point to the got

793
00:31:35,200 --> 00:31:37,760
section lastly we send multiple packets

794
00:31:37,760 --> 00:31:40,159
so the tainted got block will be used

795
00:31:40,159 --> 00:31:42,240
and the shell will be called and we can

796
00:31:42,240 --> 00:31:43,919
already see that the shelter was called

797
00:31:43,919 --> 00:31:46,399
and reverse shell was initiated and we

798
00:31:46,399 --> 00:31:48,879
have doom

799
00:31:52,000 --> 00:31:54,720
finally we can see barack

800
00:31:54,720 --> 00:31:56,320
playing mad

801
00:31:56,320 --> 00:31:57,360
madly

802
00:31:57,360 --> 00:32:01,020
against the medic doom station

803
00:32:01,020 --> 00:32:19,360
[Music]

804
00:32:19,360 --> 00:32:20,960
okay

805
00:32:20,960 --> 00:32:22,000
so

806
00:32:22,000 --> 00:32:24,960
some final thoughts

807
00:32:25,840 --> 00:32:28,080
pneumatic cube systems require much more

808
00:32:28,080 --> 00:32:30,240
research it's obvious from what we were

809
00:32:30,240 --> 00:32:32,960
able to find and it's also obvious just

810
00:32:32,960 --> 00:32:35,200
by the fact that these are critical

811
00:32:35,200 --> 00:32:37,200
infrastructure systems

812
00:32:37,200 --> 00:32:39,600
like electricity like elevators this

813
00:32:39,600 --> 00:32:41,679
systems can't be taken

814
00:32:41,679 --> 00:32:43,679
off offline

815
00:32:43,679 --> 00:32:44,960
they have to have

816
00:32:44,960 --> 00:32:47,440
100 of up time hospitals really rely on

817
00:32:47,440 --> 00:32:49,679
them so much more research is needed

818
00:32:49,679 --> 00:32:51,919
here

819
00:32:51,919 --> 00:32:53,919
and i think what is also interesting in

820
00:32:53,919 --> 00:32:56,559
this in this research is just the case

821
00:32:56,559 --> 00:32:58,799
of swiss dog as a company as a product

822
00:32:58,799 --> 00:33:00,880
manufacturer

823
00:33:00,880 --> 00:33:02,399
the case of them

824
00:33:02,399 --> 00:33:05,279
using embedded devices and how that was

825
00:33:05,279 --> 00:33:07,279
done poorly

826
00:33:07,279 --> 00:33:08,960
traditionally

827
00:33:08,960 --> 00:33:10,399
companies that created invalidic tube

828
00:33:10,399 --> 00:33:11,679
systems you can think of them as

829
00:33:11,679 --> 00:33:14,000
somebody that create hardware analog

830
00:33:14,000 --> 00:33:16,480
systems stuff that doesn't have to be

831
00:33:16,480 --> 00:33:18,000
secure because it's

832
00:33:18,000 --> 00:33:19,279
all analog

833
00:33:19,279 --> 00:33:22,080
but then they moved and they want it to

834
00:33:22,080 --> 00:33:23,919
be more sophisticated added more

835
00:33:23,919 --> 00:33:25,039
features

836
00:33:25,039 --> 00:33:27,679
their first stations that were uh

837
00:33:27,679 --> 00:33:29,679
connected to the network and they were

838
00:33:29,679 --> 00:33:32,000
very limited in their capabilities to

839
00:33:32,000 --> 00:33:33,919
upgrade them you would have to to change

840
00:33:33,919 --> 00:33:35,840
a physical switch and that actually

841
00:33:35,840 --> 00:33:38,240
created some security to them inherent

842
00:33:38,240 --> 00:33:40,559
security by the fact that they were

843
00:33:40,559 --> 00:33:42,640
very limited in capabilities

844
00:33:42,640 --> 00:33:45,200
once they moved to using linux as their

845
00:33:45,200 --> 00:33:48,240
operating system with all that it got in

846
00:33:48,240 --> 00:33:51,440
it by default telnet server

847
00:33:51,440 --> 00:33:53,200
different credentials

848
00:33:53,200 --> 00:33:54,720
stuff that really

849
00:33:54,720 --> 00:33:56,159
is um

850
00:33:56,159 --> 00:33:58,480
good in you know other places but not

851
00:33:58,480 --> 00:34:00,159
good in embedded devices that are not

852
00:34:00,159 --> 00:34:01,760
managed

853
00:34:01,760 --> 00:34:04,320
then it became a problem and so this

854
00:34:04,320 --> 00:34:06,720
really illustrates a bigger picture

855
00:34:06,720 --> 00:34:10,000
how certain types of systems when they

856
00:34:10,000 --> 00:34:12,399
go through this evolution of

857
00:34:12,399 --> 00:34:15,119
from hardware to software from

858
00:34:15,119 --> 00:34:18,399
analog to to embedded devices they have

859
00:34:18,399 --> 00:34:20,719
to have security

860
00:34:20,719 --> 00:34:21,679
put

861
00:34:21,679 --> 00:34:23,280
brought into that

862
00:34:23,280 --> 00:34:26,079
process in that consideration

863
00:34:26,079 --> 00:34:28,480
so having said that again more research

864
00:34:28,480 --> 00:34:31,520
is needed in these type of systems

865
00:34:31,520 --> 00:34:33,520
and i think in the meantime it's very

866
00:34:33,520 --> 00:34:35,119
important to develop robust security

867
00:34:35,119 --> 00:34:37,119
mitigations to safeguard these types of

868
00:34:37,119 --> 00:34:38,159
systems

869
00:34:38,159 --> 00:34:41,040
patching these systems is difficult but

870
00:34:41,040 --> 00:34:42,800
mitigating the risk of these types of

871
00:34:42,800 --> 00:34:44,480
abilities from a network standpoint

872
00:34:44,480 --> 00:34:47,839
that's not that difficult it's possible

873
00:34:47,839 --> 00:34:50,879
lastly i think it's very important

874
00:34:50,879 --> 00:34:52,960
that doom is added to pneumatic tube

875
00:34:52,960 --> 00:34:55,280
systems any hospital visit would be much

876
00:34:55,280 --> 00:34:57,680
more interesting if doom was

877
00:34:57,680 --> 00:35:00,079
available on his systems

878
00:35:00,079 --> 00:35:02,960
and we offer swiss log a week they can

879
00:35:02,960 --> 00:35:04,800
use our code it's very

880
00:35:04,800 --> 00:35:06,800
much ready to be deployed into

881
00:35:06,800 --> 00:35:08,320
production

882
00:35:08,320 --> 00:35:11,599
but uh seriously um it was uh

883
00:35:11,599 --> 00:35:13,040
very fun to do this research i think

884
00:35:13,040 --> 00:35:16,320
it's very important to follow up on it

885
00:35:16,320 --> 00:35:18,000
and if you have any questions we'd be

886
00:35:18,000 --> 00:35:20,000
happy to answer in the q a there is more

887
00:35:20,000 --> 00:35:22,000
information on our website

888
00:35:22,000 --> 00:35:24,960
armrest.com forward slash pondpiper

889
00:35:24,960 --> 00:35:26,800
and thank you for

890
00:35:26,800 --> 00:35:30,280
listening to us

