1
00:00:01,130 --> 00:00:14,239
[Music]

2
00:00:14,240 --> 00:00:16,800
hi everyone thank you for coming to our

3
00:00:16,800 --> 00:00:19,199
session today we are going to talk about

4
00:00:19,199 --> 00:00:22,160
how to use ikea to explain security

5
00:00:22,160 --> 00:00:23,359
product

6
00:00:23,359 --> 00:00:26,000
this is a joint work with kylian xinyu

7
00:00:26,000 --> 00:00:28,320
and the

8
00:00:28,400 --> 00:00:30,960
and i will start with the motivation to

9
00:00:30,960 --> 00:00:33,520
explain how we come up with our idea and

10
00:00:33,520 --> 00:00:36,320
why we want to conduct this research

11
00:00:36,320 --> 00:00:38,160
as it shows in the title of our

12
00:00:38,160 --> 00:00:39,600
presentation

13
00:00:39,600 --> 00:00:41,440
explain explainable artificial

14
00:00:41,440 --> 00:00:45,440
intelligence or xai is to solve the

15
00:00:45,440 --> 00:00:47,840
common issue in machine learning field

16
00:00:47,840 --> 00:00:50,559
which is even a designer of the model

17
00:00:50,559 --> 00:00:53,440
failed to explain why the model arrived

18
00:00:53,440 --> 00:00:57,199
at a specific decision for a given input

19
00:00:57,199 --> 00:01:00,000
the academic field in the atomic field

20
00:01:00,000 --> 00:01:02,000
researchers proposed

21
00:01:02,000 --> 00:01:03,760
multiple approaches to break this

22
00:01:03,760 --> 00:01:06,400
barrier and make the model not black box

23
00:01:06,400 --> 00:01:07,439
anymore

24
00:01:07,439 --> 00:01:09,920
in this presentation our main focus is

25
00:01:09,920 --> 00:01:11,040
to use

26
00:01:11,040 --> 00:01:14,320
ai to explain security product

27
00:01:14,320 --> 00:01:17,040
indeed our work is not the first one to

28
00:01:17,040 --> 00:01:18,640
explore this field

29
00:01:18,640 --> 00:01:21,200
several works had already demonstrated

30
00:01:21,200 --> 00:01:23,360
the benefit of explaining security

31
00:01:23,360 --> 00:01:24,560
product

32
00:01:24,560 --> 00:01:27,040
inspired by those amazing works and

33
00:01:27,040 --> 00:01:28,159
combined

34
00:01:28,159 --> 00:01:31,280
by the experience uh in our in our daily

35
00:01:31,280 --> 00:01:32,079
job

36
00:01:32,079 --> 00:01:34,000
we found out that there's still a big

37
00:01:34,000 --> 00:01:36,479
gap between academic research in its

38
00:01:36,479 --> 00:01:38,400
field and the demandings in the

39
00:01:38,400 --> 00:01:41,280
industrial world we will share our

40
00:01:41,280 --> 00:01:44,640
experience to try to fill this gap and

41
00:01:44,640 --> 00:01:45,680
share

42
00:01:45,680 --> 00:01:47,119
share it in the rest of this

43
00:01:47,119 --> 00:01:49,439
presentation

44
00:01:49,439 --> 00:01:52,159
there are multiple cases for the

45
00:01:52,159 --> 00:01:55,680
uh for us to use xai to explain security

46
00:01:55,680 --> 00:01:56,640
product

47
00:01:56,640 --> 00:01:59,280
the most common one is the

48
00:01:59,280 --> 00:02:03,280
is for the security companies to use xai

49
00:02:03,280 --> 00:02:06,000
to explain their own security product

50
00:02:06,000 --> 00:02:08,959
to either provide more insight of the

51
00:02:08,959 --> 00:02:12,000
detection result to customers or help

52
00:02:12,000 --> 00:02:14,959
their engineer team to improve their

53
00:02:14,959 --> 00:02:18,000
production based on the explanation

54
00:02:18,000 --> 00:02:20,720
the majority of the icr work

55
00:02:20,720 --> 00:02:22,400
targeting this scenario

56
00:02:22,400 --> 00:02:24,560
basically they obviously assume the

57
00:02:24,560 --> 00:02:26,800
model can be treated as a white box

58
00:02:26,800 --> 00:02:30,080
which means the tools is able to analyze

59
00:02:30,080 --> 00:02:34,080
each layer inside the model and also

60
00:02:34,080 --> 00:02:36,560
to access the whole training on the data

61
00:02:36,560 --> 00:02:38,319
side

62
00:02:38,319 --> 00:02:40,640
in addition to this common scenario

63
00:02:40,640 --> 00:02:43,840
there's another uh demandings from the

64
00:02:43,840 --> 00:02:45,760
industrial world is that

65
00:02:45,760 --> 00:02:47,840
the customer of those wonder awareness

66
00:02:47,840 --> 00:02:50,400
product or potential buyers

67
00:02:50,400 --> 00:02:53,519
they can leverage sai to evaluate the

68
00:02:53,519 --> 00:02:56,640
product in order to help them making the

69
00:02:56,640 --> 00:02:58,560
purchasing decision

70
00:02:58,560 --> 00:03:01,120
usually is conducted by the company's

71
00:03:01,120 --> 00:03:02,560
security team

72
00:03:02,560 --> 00:03:04,640
so currently like the hearing community

73
00:03:04,640 --> 00:03:07,120
will deploy the wonders product

74
00:03:07,120 --> 00:03:09,680
to the company's testing framework and

75
00:03:09,680 --> 00:03:11,920
the feed malicious and the binaural

76
00:03:11,920 --> 00:03:15,120
samples uh to the to the environment

77
00:03:15,120 --> 00:03:17,519
and the measure the first volume and the

78
00:03:17,519 --> 00:03:20,319
phosphonative rate to evaluate

79
00:03:20,319 --> 00:03:22,480
the product

80
00:03:22,480 --> 00:03:23,920
they but

81
00:03:23,920 --> 00:03:26,879
with the x ai they are able to

82
00:03:26,879 --> 00:03:28,239
further peak

83
00:03:28,239 --> 00:03:30,560
inside the machine learning-based

84
00:03:30,560 --> 00:03:34,400
security product by checking whether

85
00:03:34,400 --> 00:03:36,480
the model's detection result is

86
00:03:36,480 --> 00:03:37,920
reasonable or not

87
00:03:37,920 --> 00:03:40,400
so basically they can generate the

88
00:03:40,400 --> 00:03:43,519
explanation of certain samples

89
00:03:43,519 --> 00:03:45,280
and evaluate

90
00:03:45,280 --> 00:03:49,680
whether the wonders model capture the

91
00:03:49,680 --> 00:03:53,280
essential of those type of attack in the

92
00:03:53,280 --> 00:03:55,599
samples and then

93
00:03:55,599 --> 00:03:58,239
it gives the security team a higher

94
00:03:58,239 --> 00:03:59,519
confidence

95
00:03:59,519 --> 00:04:00,560
to

96
00:04:00,560 --> 00:04:04,159
make the purchasing division

97
00:04:04,159 --> 00:04:05,280
moreover

98
00:04:05,280 --> 00:04:07,519
we can also extend the scenario to the

99
00:04:07,519 --> 00:04:10,640
to the to to the case that attacker

100
00:04:10,640 --> 00:04:12,319
leverage sai

101
00:04:12,319 --> 00:04:15,840
to generate to launch certain type of

102
00:04:15,840 --> 00:04:18,399
attack against the commercial

103
00:04:18,399 --> 00:04:19,600
security

104
00:04:19,600 --> 00:04:22,720
product as well

105
00:04:22,720 --> 00:04:23,600
so

106
00:04:23,600 --> 00:04:27,680
with our plantation we hope the audience

107
00:04:27,680 --> 00:04:28,639
can

108
00:04:28,639 --> 00:04:31,680
understand what is sa and how it works

109
00:04:31,680 --> 00:04:34,320
in the high level and also from our

110
00:04:34,320 --> 00:04:36,000
shared library

111
00:04:36,000 --> 00:04:37,520
we we

112
00:04:37,520 --> 00:04:39,759
we want to the audience is able to

113
00:04:39,759 --> 00:04:41,120
actually

114
00:04:41,120 --> 00:04:44,639
use sei to evaluate security products in

115
00:04:44,639 --> 00:04:46,320
their daily job

116
00:04:46,320 --> 00:04:48,960
and also

117
00:04:48,960 --> 00:04:52,000
since we propose a new gap between the

118
00:04:52,000 --> 00:04:54,560
academic research and the industrial

119
00:04:54,560 --> 00:04:55,440
world

120
00:04:55,440 --> 00:04:56,400
we hope

121
00:04:56,400 --> 00:04:57,680
this can

122
00:04:57,680 --> 00:04:58,960
inspire

123
00:04:58,960 --> 00:05:02,000
researchers to further fill the gap in

124
00:05:02,000 --> 00:05:02,880
their

125
00:05:02,880 --> 00:05:05,199
future work

126
00:05:05,199 --> 00:05:07,039
and

127
00:05:07,039 --> 00:05:09,759
although xai is a very hot topic in the

128
00:05:09,759 --> 00:05:12,720
past few years but not everyone are

129
00:05:12,720 --> 00:05:14,400
familiar with it

130
00:05:14,400 --> 00:05:18,960
we will briefly explain the few common

131
00:05:18,960 --> 00:05:21,280
tools

132
00:05:22,800 --> 00:05:25,039
available here so most of them are

133
00:05:25,039 --> 00:05:28,000
modern agnostic by model agnostic we

134
00:05:28,000 --> 00:05:30,000
refer the approach to treat the model

135
00:05:30,000 --> 00:05:34,240
supply box so basically the model expose

136
00:05:34,240 --> 00:05:36,560
only the function the prediction

137
00:05:36,560 --> 00:05:39,759
functionality to the xar2

138
00:05:39,759 --> 00:05:43,280
and the things in the in our scenario

139
00:05:43,280 --> 00:05:45,759
when we evaluate a oneness product the

140
00:05:45,759 --> 00:05:47,759
vendor

141
00:05:47,759 --> 00:05:50,960
will never release their

142
00:05:50,960 --> 00:05:54,240
uh design detail like what model they

143
00:05:54,240 --> 00:05:56,720
use how what the training standard is

144
00:05:56,720 --> 00:05:59,520
and how they extract the feature

145
00:05:59,520 --> 00:06:00,960
so basically

146
00:06:00,960 --> 00:06:03,440
this this type of uh

147
00:06:03,440 --> 00:06:06,639
model of knowledge tool is a perfect fit

148
00:06:06,639 --> 00:06:09,759
to our setup

149
00:06:09,919 --> 00:06:12,800
one of the most popular sar tools called

150
00:06:12,800 --> 00:06:15,840
line which refers to local interpretable

151
00:06:15,840 --> 00:06:18,400
model or gnostic explanation

152
00:06:18,400 --> 00:06:20,400
the idea of this approach is quite

153
00:06:20,400 --> 00:06:23,120
intuitive so basically it's leveraging

154
00:06:23,120 --> 00:06:25,600
random permutation to generate a large

155
00:06:25,600 --> 00:06:28,400
number of samples around the original

156
00:06:28,400 --> 00:06:29,600
instance

157
00:06:29,600 --> 00:06:32,160
then it invoked the target model to get

158
00:06:32,160 --> 00:06:34,319
a prediction result of those random

159
00:06:34,319 --> 00:06:36,160
samples

160
00:06:36,160 --> 00:06:37,520
and then

161
00:06:37,520 --> 00:06:41,919
lam trains a local surrogate model such

162
00:06:41,919 --> 00:06:44,880
as a regression model to approximate the

163
00:06:44,880 --> 00:06:48,319
original sample in its local area at

164
00:06:48,319 --> 00:06:51,120
last the lamp also

165
00:06:51,120 --> 00:06:53,520
assigned different ways to the random

166
00:06:53,520 --> 00:06:55,840
samples based on how close they are to

167
00:06:55,840 --> 00:06:57,840
the original instance

168
00:06:57,840 --> 00:07:00,800
so with this local

169
00:07:00,800 --> 00:07:04,639
model lam can generate explanation by

170
00:07:04,639 --> 00:07:07,919
interpreting the local model on on this

171
00:07:07,919 --> 00:07:09,120
specific

172
00:07:09,120 --> 00:07:11,120
sample

173
00:07:11,120 --> 00:07:14,319
the lamp to the library provides

174
00:07:14,319 --> 00:07:16,560
extensions for different type of data

175
00:07:16,560 --> 00:07:19,039
including the image tabular and text

176
00:07:19,039 --> 00:07:20,080
which is

177
00:07:20,080 --> 00:07:22,639
cover the majority of the cases

178
00:07:22,639 --> 00:07:25,120
so in addition because lam does not

179
00:07:25,120 --> 00:07:27,199
leverage the feature extracted from the

180
00:07:27,199 --> 00:07:29,120
original sample site

181
00:07:29,120 --> 00:07:31,199
but the princess of the other side of

182
00:07:31,199 --> 00:07:34,000
the of the entity in the original

183
00:07:34,000 --> 00:07:37,120
instance so it's extremely valuable to

184
00:07:37,120 --> 00:07:39,599
explain the model which is trained with

185
00:07:39,599 --> 00:07:40,639
nine

186
00:07:40,639 --> 00:07:43,199
interpretable features for example

187
00:07:43,199 --> 00:07:45,440
common lp tasks

188
00:07:45,440 --> 00:07:46,879
so although

189
00:07:46,879 --> 00:07:49,280
lan library seems to be promising it

190
00:07:49,280 --> 00:07:52,400
also have a feel this disadvantage the

191
00:07:52,400 --> 00:07:54,639
first concern is that this tool has an

192
00:07:54,639 --> 00:07:57,520
issue to provide consistent explanation

193
00:07:57,520 --> 00:08:00,800
for the same sample this is because it

194
00:08:00,800 --> 00:08:03,520
it use one random permutation to

195
00:08:03,520 --> 00:08:06,960
generate the samples so so it is common

196
00:08:06,960 --> 00:08:07,919
that

197
00:08:07,919 --> 00:08:09,680
giving a same

198
00:08:09,680 --> 00:08:11,520
original instance

199
00:08:11,520 --> 00:08:15,280
the the line will generate different

200
00:08:15,280 --> 00:08:16,800
random samples

201
00:08:16,800 --> 00:08:20,000
uh if you run the rhino tools uh

202
00:08:20,000 --> 00:08:22,400
repeatedly and which leads to the

203
00:08:22,400 --> 00:08:25,120
different explanation to the same input

204
00:08:25,120 --> 00:08:26,319
on the same

205
00:08:26,319 --> 00:08:27,759
model

206
00:08:27,759 --> 00:08:30,000
the second concern is this sampling

207
00:08:30,000 --> 00:08:32,799
process so basically the line just use

208
00:08:32,799 --> 00:08:35,200
the gaussian distribution to

209
00:08:35,200 --> 00:08:38,240
to generate those samples and ignore all

210
00:08:38,240 --> 00:08:40,880
the correlations between the features

211
00:08:40,880 --> 00:08:43,599
this leads the problem

212
00:08:43,599 --> 00:08:44,880
uh that

213
00:08:44,880 --> 00:08:47,839
the the data point is highly unlikely to

214
00:08:47,839 --> 00:08:50,720
be seen in the training set which which

215
00:08:50,720 --> 00:08:51,839
means that

216
00:08:51,839 --> 00:08:52,640
uh

217
00:08:52,640 --> 00:08:55,040
one the uh

218
00:08:55,040 --> 00:08:56,320
the model

219
00:08:56,320 --> 00:08:59,839
the prediction output from the model to

220
00:08:59,839 --> 00:09:02,399
those are likely seeing samples is not

221
00:09:02,399 --> 00:09:05,440
reliable which is also compromise the

222
00:09:05,440 --> 00:09:07,920
quality of the information generated by

223
00:09:07,920 --> 00:09:09,920
the line

224
00:09:09,920 --> 00:09:12,399
another step are the model of gnostic

225
00:09:12,399 --> 00:09:14,320
tool is called shop

226
00:09:14,320 --> 00:09:18,080
and this is these two was is inspired by

227
00:09:18,080 --> 00:09:20,480
the sharply value concept from the game

228
00:09:20,480 --> 00:09:23,680
theory and it calculates the

229
00:09:23,680 --> 00:09:25,760
contribution of each feature to the

230
00:09:25,760 --> 00:09:27,680
prediction output

231
00:09:27,680 --> 00:09:29,519
so similar to the random perpetrator

232
00:09:29,519 --> 00:09:31,680
step in line a sharp

233
00:09:31,680 --> 00:09:33,920
gets the sharply

234
00:09:33,920 --> 00:09:36,480
value of a feature i

235
00:09:36,480 --> 00:09:38,160
took by

236
00:09:38,160 --> 00:09:40,880
calculating the weighted sum over all

237
00:09:40,880 --> 00:09:42,880
the possible feature value

238
00:09:42,880 --> 00:09:44,959
combination other than i

239
00:09:44,959 --> 00:09:47,200
so the but the majority difference to

240
00:09:47,200 --> 00:09:49,680
lime is is is how they measure the

241
00:09:49,680 --> 00:09:51,120
weight

242
00:09:51,120 --> 00:09:53,760
of those random samples when training

243
00:09:53,760 --> 00:09:55,440
the

244
00:09:55,440 --> 00:09:57,839
generate the explanation

245
00:09:57,839 --> 00:10:00,320
lime use the distance

246
00:10:00,320 --> 00:10:04,640
as the weight but sharp use the

247
00:10:05,279 --> 00:10:07,600
collision vector so

248
00:10:07,600 --> 00:10:10,720
the larger smaller value will get the

249
00:10:10,720 --> 00:10:13,519
largest weight

250
00:10:13,839 --> 00:10:16,880
based on our high level introductions of

251
00:10:16,880 --> 00:10:18,720
xia tools

252
00:10:18,720 --> 00:10:21,040
i hope most audience here are able to

253
00:10:21,040 --> 00:10:24,720
capture the rough idea on how xlr works

254
00:10:24,720 --> 00:10:27,120
now we are going to evaluate

255
00:10:27,120 --> 00:10:29,600
different type of security product using

256
00:10:29,600 --> 00:10:31,200
those tools

257
00:10:31,200 --> 00:10:32,800
theoretically

258
00:10:32,800 --> 00:10:35,600
since we use modern agnostic approach

259
00:10:35,600 --> 00:10:38,160
we should able to explain our type of

260
00:10:38,160 --> 00:10:39,839
security product

261
00:10:39,839 --> 00:10:42,959
the only limitation is the input tab

262
00:10:42,959 --> 00:10:45,519
because not all the security products

263
00:10:45,519 --> 00:10:48,640
come with the numerical feature some of

264
00:10:48,640 --> 00:10:51,360
them use the non-newmarket feature

265
00:10:51,360 --> 00:10:52,800
which is

266
00:10:52,800 --> 00:10:56,240
make it harder to explain

267
00:10:57,040 --> 00:10:58,959
the first security product we would like

268
00:10:58,959 --> 00:11:02,079
to explain is the malicious http request

269
00:11:02,079 --> 00:11:04,079
detector

270
00:11:04,079 --> 00:11:06,720
it can be used to analyze the traffic

271
00:11:06,720 --> 00:11:09,600
and identify the malicious or suspicious

272
00:11:09,600 --> 00:11:11,040
activities

273
00:11:11,040 --> 00:11:13,360
the attackers are able to craft a

274
00:11:13,360 --> 00:11:16,320
request with malicious code embedded in

275
00:11:16,320 --> 00:11:19,360
unit either as a plain text or encoded

276
00:11:19,360 --> 00:11:20,480
format

277
00:11:20,480 --> 00:11:23,360
so that they can launch a text such as

278
00:11:23,360 --> 00:11:25,360
cover inject command injection sql

279
00:11:25,360 --> 00:11:28,320
injection or cross-site scripting our

280
00:11:28,320 --> 00:11:31,360
goal is is quite also quite simple

281
00:11:31,360 --> 00:11:33,519
we generate the explanation

282
00:11:33,519 --> 00:11:35,839
of those product

283
00:11:35,839 --> 00:11:38,480
on several virtual headers

284
00:11:38,480 --> 00:11:41,279
and check whether the product identifies

285
00:11:41,279 --> 00:11:44,240
the injector code section by making the

286
00:11:44,240 --> 00:11:45,920
prediction result

287
00:11:45,920 --> 00:11:49,440
ideally a good model should assign

288
00:11:49,440 --> 00:11:51,760
higher weight on those

289
00:11:51,760 --> 00:11:54,160
injector code section

290
00:11:54,160 --> 00:11:54,880
in

291
00:11:54,880 --> 00:11:57,040
in their explanation

292
00:11:57,040 --> 00:12:00,160
another thing we want to emphasize

293
00:12:00,160 --> 00:12:03,600
of this type of product is because i

294
00:12:03,600 --> 00:12:05,120
like the majority of the security

295
00:12:05,120 --> 00:12:06,880
products which leverage numerical

296
00:12:06,880 --> 00:12:08,800
features as input

297
00:12:08,800 --> 00:12:11,360
the input of this product is the raw sap

298
00:12:11,360 --> 00:12:14,240
header which is in the text format

299
00:12:14,240 --> 00:12:16,880
so the product may need to leverage as

300
00:12:16,880 --> 00:12:19,839
nlp technique to convert

301
00:12:19,839 --> 00:12:22,639
the text to a latent and binding before

302
00:12:22,639 --> 00:12:24,880
feeding it into the model

303
00:12:24,880 --> 00:12:27,120
this makes the explanation process a

304
00:12:27,120 --> 00:12:29,600
little bit different and we use lime

305
00:12:29,600 --> 00:12:33,519
text module here to explain this model

306
00:12:33,519 --> 00:12:36,160
in the official lab library users just

307
00:12:36,160 --> 00:12:38,720
need to pass models prediction function

308
00:12:38,720 --> 00:12:40,480
and then the library will invoke this

309
00:12:40,480 --> 00:12:43,040
function to get the prediction result

310
00:12:43,040 --> 00:12:46,000
of each random generated permutation

311
00:12:46,000 --> 00:12:47,120
samples

312
00:12:47,120 --> 00:12:49,519
however there is no such a prediction

313
00:12:49,519 --> 00:12:52,079
function exposed by the real security

314
00:12:52,079 --> 00:12:53,279
product

315
00:12:53,279 --> 00:12:55,839
in order to get the prediction score we

316
00:12:55,839 --> 00:12:59,120
have to craft a real xp header

317
00:12:59,120 --> 00:13:01,440
and generate the traffic by sending

318
00:13:01,440 --> 00:13:04,959
those contacts to the network interface

319
00:13:04,959 --> 00:13:07,519
monitor the by the product and retrieve

320
00:13:07,519 --> 00:13:09,600
the result from the product's log or

321
00:13:09,600 --> 00:13:10,880
dashboard

322
00:13:10,880 --> 00:13:13,760
therefore we customize the lamp library

323
00:13:13,760 --> 00:13:15,200
to make it work

324
00:13:15,200 --> 00:13:17,360
firstly we implement

325
00:13:17,360 --> 00:13:20,079
a multiple adapters to convert the

326
00:13:20,079 --> 00:13:23,600
permutation samples to a real object

327
00:13:23,600 --> 00:13:26,000
it depends on the different type of

328
00:13:26,000 --> 00:13:28,240
product inputs in this case it's the

329
00:13:28,240 --> 00:13:31,040
network activity but in other cases it

330
00:13:31,040 --> 00:13:34,959
could be binary files even cloud service

331
00:13:34,959 --> 00:13:36,639
api calls

332
00:13:36,639 --> 00:13:39,440
we also redesign the current lab library

333
00:13:39,440 --> 00:13:41,600
to support this type of prediction

334
00:13:41,600 --> 00:13:42,959
function flaw

335
00:13:42,959 --> 00:13:44,399
since those

336
00:13:44,399 --> 00:13:46,959
things comparing to the traditional way

337
00:13:46,959 --> 00:13:49,120
this type of flaw takes a much longer

338
00:13:49,120 --> 00:13:50,000
time

339
00:13:50,000 --> 00:13:50,800
and

340
00:13:50,800 --> 00:13:54,160
we divide the library into two different

341
00:13:54,160 --> 00:13:57,040
parts so that we can achieve this like

342
00:13:57,040 --> 00:13:59,760
the asynchronous way to generate the

343
00:13:59,760 --> 00:14:02,320
explanation

344
00:14:02,320 --> 00:14:04,639
besides that there is a another thing we

345
00:14:04,639 --> 00:14:07,199
want to emphasize using this example is

346
00:14:07,199 --> 00:14:08,160
that

347
00:14:08,160 --> 00:14:10,399
remember that we mentioned the

348
00:14:10,399 --> 00:14:11,839
disadvantage

349
00:14:11,839 --> 00:14:15,120
of the sampling process using valid line

350
00:14:15,120 --> 00:14:16,560
basically just

351
00:14:16,560 --> 00:14:19,279
ignore the correlation between features

352
00:14:19,279 --> 00:14:23,519
and randomly generate the samples

353
00:14:23,519 --> 00:14:26,160
in in the in our case the security

354
00:14:26,160 --> 00:14:28,000
products input

355
00:14:28,000 --> 00:14:30,639
is highly structured taking the hcp

356
00:14:30,639 --> 00:14:33,199
header as an example so the header need

357
00:14:33,199 --> 00:14:35,040
to need to be

358
00:14:35,040 --> 00:14:35,839
uh

359
00:14:35,839 --> 00:14:37,120
be valid

360
00:14:37,120 --> 00:14:40,399
uh in order to feed several uh several

361
00:14:40,399 --> 00:14:42,839
different kind of restrictions

362
00:14:42,839 --> 00:14:44,720
and but

363
00:14:44,720 --> 00:14:47,440
when we use the original lime library it

364
00:14:47,440 --> 00:14:49,519
just randomly generates

365
00:14:49,519 --> 00:14:52,320
the samples and the majority of them are

366
00:14:52,320 --> 00:14:56,639
not even violated for example it can be

367
00:14:56,639 --> 00:15:00,240
the case like the header is missing some

368
00:15:00,240 --> 00:15:03,760
headed field is missing even even the uh

369
00:15:03,760 --> 00:15:06,160
the request the get requests come with

370
00:15:06,160 --> 00:15:08,880
someone request a payload which is all

371
00:15:08,880 --> 00:15:11,040
the invited headers

372
00:15:11,040 --> 00:15:13,120
things those headers those invalid

373
00:15:13,120 --> 00:15:16,160
headers are rarely seen in the

374
00:15:16,160 --> 00:15:18,079
uh training set

375
00:15:18,079 --> 00:15:19,440
so the

376
00:15:19,440 --> 00:15:22,079
so the eval prediction uh

377
00:15:22,079 --> 00:15:24,560
result come with the model is not

378
00:15:24,560 --> 00:15:26,320
reliable

379
00:15:26,320 --> 00:15:28,639
and which is compromise

380
00:15:28,639 --> 00:15:30,600
uh the our

381
00:15:30,600 --> 00:15:32,120
experiment

382
00:15:32,120 --> 00:15:35,440
explanation as well

383
00:15:35,440 --> 00:15:38,480
so to mitigate this issue we extend the

384
00:15:38,480 --> 00:15:41,040
lab library by adding the module to

385
00:15:41,040 --> 00:15:42,720
replace the random

386
00:15:42,720 --> 00:15:45,199
sampling process with the structure of

387
00:15:45,199 --> 00:15:47,040
awareness sampling

388
00:15:47,040 --> 00:15:49,360
so as a result us

389
00:15:49,360 --> 00:15:51,839
our customization not only improve the

390
00:15:51,839 --> 00:15:54,000
speed of the tool but also the quality

391
00:15:54,000 --> 00:15:56,160
of the explanation

392
00:15:56,160 --> 00:15:58,480
and this idea can also be applied to

393
00:15:58,480 --> 00:16:01,199
other type of input like a binary file

394
00:16:01,199 --> 00:16:06,079
or the a cloud service api call

395
00:16:06,079 --> 00:16:08,079
so let's move into the actual

396
00:16:08,079 --> 00:16:09,360
explanation

397
00:16:09,360 --> 00:16:12,639
we generated from this model

398
00:16:12,639 --> 00:16:15,680
and the first test case is

399
00:16:15,680 --> 00:16:17,279
the malicious header

400
00:16:17,279 --> 00:16:20,079
come with the

401
00:16:20,560 --> 00:16:22,639
crosstalk scrivener attack which i'm

402
00:16:22,639 --> 00:16:24,000
binding the

403
00:16:24,000 --> 00:16:25,920
encode the

404
00:16:25,920 --> 00:16:29,120
script into the base64 format

405
00:16:29,120 --> 00:16:31,519
so from the evaluation here you can see

406
00:16:31,519 --> 00:16:32,480
that

407
00:16:32,480 --> 00:16:34,079
the

408
00:16:34,079 --> 00:16:36,639
the prediction result is cracked and

409
00:16:36,639 --> 00:16:38,399
also this

410
00:16:38,399 --> 00:16:40,880
payload versus payload

411
00:16:40,880 --> 00:16:43,360
also have a higher score contributed to

412
00:16:43,360 --> 00:16:46,240
the malicious score so basically we

413
00:16:46,240 --> 00:16:49,759
using this using this example we can we

414
00:16:49,759 --> 00:16:52,880
we have a higher confidence to believe

415
00:16:52,880 --> 00:16:54,399
the model

416
00:16:54,399 --> 00:16:55,279
uh

417
00:16:55,279 --> 00:16:57,600
capture the essential of this type of

418
00:16:57,600 --> 00:17:00,000
attack

419
00:17:00,240 --> 00:17:02,560
another case is the sql injection

420
00:17:02,560 --> 00:17:05,359
basically from the domain knowledge

421
00:17:05,359 --> 00:17:08,160
uh we can say we know that this is all

422
00:17:08,160 --> 00:17:11,039
one equal to one is the malicious part

423
00:17:11,039 --> 00:17:13,839
and the prediction result is is correct

424
00:17:13,839 --> 00:17:15,199
and

425
00:17:15,199 --> 00:17:16,959
but

426
00:17:16,959 --> 00:17:18,720
the highest the weight of the

427
00:17:18,720 --> 00:17:21,199
installation is now this around one

428
00:17:21,199 --> 00:17:24,160
equal to one part although it's still be

429
00:17:24,160 --> 00:17:26,160
part of the malaysia's uh country it

430
00:17:26,160 --> 00:17:28,240
contributes to the malicious score but

431
00:17:28,240 --> 00:17:30,720
this this case is weaker than the

432
00:17:30,720 --> 00:17:33,120
previous case basically

433
00:17:33,120 --> 00:17:36,480
uh the it's just okay for the this model

434
00:17:36,480 --> 00:17:38,880
to capture this kind of a sql injection

435
00:17:38,880 --> 00:17:41,039
attack

436
00:17:41,039 --> 00:17:43,039
and the third the third example is the

437
00:17:43,039 --> 00:17:46,480
cross-scripting with the plain text

438
00:17:46,480 --> 00:17:48,000
javascript code

439
00:17:48,000 --> 00:17:49,760
and this job piece of java cloud

440
00:17:49,760 --> 00:17:51,360
adjuster will

441
00:17:51,360 --> 00:17:52,799
invoke

442
00:17:52,799 --> 00:17:55,840
the document.write function and inject

443
00:17:55,840 --> 00:17:57,360
the iframe

444
00:17:57,360 --> 00:17:58,559
and

445
00:17:58,559 --> 00:18:02,160
so the model predicts this uh

446
00:18:02,160 --> 00:18:05,039
header correctly market and malicious

447
00:18:05,039 --> 00:18:07,039
but the highest the weight is the

448
00:18:07,039 --> 00:18:11,120
request the payload heider field is not

449
00:18:11,120 --> 00:18:12,160
actually

450
00:18:12,160 --> 00:18:14,799
the uh the part of the code the

451
00:18:14,799 --> 00:18:17,120
javascript code so even the document

452
00:18:17,120 --> 00:18:19,679
part of this code is it contributed to

453
00:18:19,679 --> 00:18:21,760
the to the binaural score

454
00:18:21,760 --> 00:18:22,480
so

455
00:18:22,480 --> 00:18:25,280
i so uh so this kind of evaluation can

456
00:18:25,280 --> 00:18:26,320
tell us

457
00:18:26,320 --> 00:18:29,200
this model or this security product

458
00:18:29,200 --> 00:18:32,080
is not not quite able to capture this

459
00:18:32,080 --> 00:18:33,600
type of attack

460
00:18:33,600 --> 00:18:37,280
and the last attack is the x exe device

461
00:18:37,280 --> 00:18:39,600
attack and the unit server

462
00:18:39,600 --> 00:18:40,480
and

463
00:18:40,480 --> 00:18:42,400
also we put the

464
00:18:42,400 --> 00:18:43,840
messages

465
00:18:43,840 --> 00:18:46,640
code into the request payload

466
00:18:46,640 --> 00:18:49,200
and in this type of attack similar to

467
00:18:49,200 --> 00:18:51,360
the previous example

468
00:18:51,360 --> 00:18:54,000
some part of the code even be

469
00:18:54,000 --> 00:18:56,799
contributed to the to the be now skull

470
00:18:56,799 --> 00:18:58,960
and which which

471
00:18:58,960 --> 00:19:00,000
makes us

472
00:19:00,000 --> 00:19:02,960
uh kind of a suspicious to how this uh

473
00:19:02,960 --> 00:19:04,080
this model

474
00:19:04,080 --> 00:19:06,640
uh capture the essential of this type of

475
00:19:06,640 --> 00:19:08,480
attack

476
00:19:08,480 --> 00:19:11,200
uh so that is the first model so

477
00:19:11,200 --> 00:19:13,840
so with the same type of uh

478
00:19:13,840 --> 00:19:16,559
tool or technique we are able to uh

479
00:19:16,559 --> 00:19:19,440
detect our other type of attack and

480
00:19:19,440 --> 00:19:22,799
this cover can is also captured

481
00:19:22,799 --> 00:19:27,679
by the different academic work of work

482
00:19:27,679 --> 00:19:30,720
next kylian will prevent other interest

483
00:19:30,720 --> 00:19:34,320
findings during our research

484
00:19:34,880 --> 00:19:37,440
so as a secure product buyer

485
00:19:37,440 --> 00:19:39,360
they are not only interested in know the

486
00:19:39,360 --> 00:19:42,400
performance report of the secret product

487
00:19:42,400 --> 00:19:44,480
they also want to know

488
00:19:44,480 --> 00:19:45,840
whether the secure product they are

489
00:19:45,840 --> 00:19:47,360
going to buy they are going to solve the

490
00:19:47,360 --> 00:19:49,039
problem that they care about

491
00:19:49,039 --> 00:19:51,280
so we think instead of explaining the

492
00:19:51,280 --> 00:19:53,360
individual example

493
00:19:53,360 --> 00:19:55,520
so we should provide a concept level

494
00:19:55,520 --> 00:19:57,360
explanation that

495
00:19:57,360 --> 00:20:00,640
better evaluate the secure product

496
00:20:00,640 --> 00:20:02,400
so in this presentation we're going to

497
00:20:02,400 --> 00:20:04,159
use the mirror detection model using

498
00:20:04,159 --> 00:20:06,960
system code to explain our

499
00:20:06,960 --> 00:20:08,799
point

500
00:20:08,799 --> 00:20:11,520
so system call mirror detection

501
00:20:11,520 --> 00:20:14,240
collect the system call usage off from

502
00:20:14,240 --> 00:20:17,440
the in video process

503
00:20:17,440 --> 00:20:20,320
then they fit all this usage to the ml

504
00:20:20,320 --> 00:20:21,360
model

505
00:20:21,360 --> 00:20:23,679
to detect whether the usage has any

506
00:20:23,679 --> 00:20:26,559
malicious pattern

507
00:20:28,480 --> 00:20:29,840
to

508
00:20:29,840 --> 00:20:32,320
to basically

509
00:20:32,320 --> 00:20:35,360
illustrate a point we

510
00:20:35,360 --> 00:20:38,960
manually crafted two global concept

511
00:20:38,960 --> 00:20:40,960
secure injection and the command

512
00:20:40,960 --> 00:20:42,080
injection

513
00:20:42,080 --> 00:20:44,720
for the sql injection we think it has

514
00:20:44,720 --> 00:20:46,000
the following

515
00:20:46,000 --> 00:20:49,760
usage pattern first it has high file

516
00:20:49,760 --> 00:20:53,120
usage second it should have high memory

517
00:20:53,120 --> 00:20:56,720
usage the third is it has high

518
00:20:56,720 --> 00:20:59,039
network throughput

519
00:20:59,039 --> 00:21:00,880
for the command injection

520
00:21:00,880 --> 00:21:06,960
it has high the esc ex ecve usage

521
00:21:06,960 --> 00:21:09,039
so we use a tool called

522
00:21:09,039 --> 00:21:11,919
tcav to

523
00:21:11,919 --> 00:21:16,159
elevate our concept on one

524
00:21:16,159 --> 00:21:18,559
the system core security

525
00:21:18,559 --> 00:21:20,879
product

526
00:21:21,840 --> 00:21:24,960
and as you can see from this example

527
00:21:24,960 --> 00:21:28,640
the system call have significant

528
00:21:28,640 --> 00:21:30,640
the score

529
00:21:30,640 --> 00:21:33,200
for this secure product

530
00:21:33,200 --> 00:21:34,000
and

531
00:21:34,000 --> 00:21:38,080
the command injection has very low scope

532
00:21:38,080 --> 00:21:39,919
from this output

533
00:21:39,919 --> 00:21:41,360
although both

534
00:21:41,360 --> 00:21:44,000
concepts receive very high performance

535
00:21:44,000 --> 00:21:46,799
usage you can see that in reality

536
00:21:46,799 --> 00:21:49,919
there's uh for the command injection

537
00:21:49,919 --> 00:21:52,240
it has a strong gap between the human

538
00:21:52,240 --> 00:21:54,240
knowledge and what actually the machine

539
00:21:54,240 --> 00:21:58,360
learning model is learning from

540
00:21:58,720 --> 00:22:01,200
so by doing this evaluation we also

541
00:22:01,200 --> 00:22:03,919
realized that the research in the market

542
00:22:03,919 --> 00:22:06,880
and we did not find the concept level

543
00:22:06,880 --> 00:22:09,440
the xai tool that can

544
00:22:09,440 --> 00:22:12,640
work on the blackbox model and using

545
00:22:12,640 --> 00:22:16,400
these tcavs we have to fit this as a

546
00:22:16,400 --> 00:22:18,720
black box model and need to know the

547
00:22:18,720 --> 00:22:21,280
layer information

548
00:22:21,280 --> 00:22:24,640
so we think that this could be a gap

549
00:22:24,640 --> 00:22:27,200
that a future academic work trying to

550
00:22:27,200 --> 00:22:29,760
fill in to work on

551
00:22:29,760 --> 00:22:32,400
the black box model for concept level

552
00:22:32,400 --> 00:22:33,760
explanation

553
00:22:33,760 --> 00:22:36,159
next we're going to shift our angle to

554
00:22:36,159 --> 00:22:38,080
be an attacker

555
00:22:38,080 --> 00:22:42,000
so as attacker we're going to achieve um

556
00:22:42,000 --> 00:22:43,760
the following goals

557
00:22:43,760 --> 00:22:47,120
first i'm going to use x ai to craft a

558
00:22:47,120 --> 00:22:48,880
diverse example

559
00:22:48,880 --> 00:22:51,120
and second we're going to use xai to

560
00:22:51,120 --> 00:22:55,719
leak information from the secure product

561
00:22:56,240 --> 00:23:00,400
so to craft a address for example

562
00:23:01,039 --> 00:23:03,520
so the the traditional approach to mint

563
00:23:03,520 --> 00:23:06,000
is to minimize the distance between the

564
00:23:06,000 --> 00:23:09,440
adversarial example and the actual

565
00:23:09,440 --> 00:23:13,600
the label that the attacker trying to

566
00:23:13,600 --> 00:23:14,720
get

567
00:23:14,720 --> 00:23:17,200
and there's many two type of approach

568
00:23:17,200 --> 00:23:18,320
white box

569
00:23:18,320 --> 00:23:19,679
attack

570
00:23:19,679 --> 00:23:23,840
which is trying to um get the weight of

571
00:23:23,840 --> 00:23:25,440
the

572
00:23:25,440 --> 00:23:27,520
model and train in order to calculate

573
00:23:27,520 --> 00:23:29,120
the gradients

574
00:23:29,120 --> 00:23:31,520
and the black box model which creates a

575
00:23:31,520 --> 00:23:33,520
celeron model

576
00:23:33,520 --> 00:23:35,520
and the second model is similar to the

577
00:23:35,520 --> 00:23:36,880
actual

578
00:23:36,880 --> 00:23:39,120
security model

579
00:23:39,120 --> 00:23:41,200
however to train the server model it

580
00:23:41,200 --> 00:23:43,279
requires tons of data

581
00:23:43,279 --> 00:23:46,000
so we think both of the attack is not

582
00:23:46,000 --> 00:23:49,200
practical for us to exploit the security

583
00:23:49,200 --> 00:23:51,360
production

584
00:23:51,360 --> 00:23:52,320
because

585
00:23:52,320 --> 00:23:54,640
we don't have we cannot extract the

586
00:23:54,640 --> 00:23:58,080
weight from the security product

587
00:23:58,080 --> 00:24:01,039
the ai model as well as we don't have

588
00:24:01,039 --> 00:24:02,480
tons of data

589
00:24:02,480 --> 00:24:04,480
to train a sergeant model for the secure

590
00:24:04,480 --> 00:24:06,080
product

591
00:24:06,080 --> 00:24:08,320
so the restriction for us to generate

592
00:24:08,320 --> 00:24:10,000
the adversarial example

593
00:24:10,000 --> 00:24:12,559
is to satisfy the structural information

594
00:24:12,559 --> 00:24:15,279
structural requirement that can still be

595
00:24:15,279 --> 00:24:17,760
fit into the secure product as well as a

596
00:24:17,760 --> 00:24:22,080
need to be keep the meshes behavior

597
00:24:23,840 --> 00:24:26,320
we use the intrusion

598
00:24:26,320 --> 00:24:28,159
protection system to

599
00:24:28,159 --> 00:24:30,080
illustrate our point

600
00:24:30,080 --> 00:24:33,200
so this is the one example in one http

601
00:24:33,200 --> 00:24:35,679
request and then we found out

602
00:24:35,679 --> 00:24:37,279
although the

603
00:24:37,279 --> 00:24:38,400
ml

604
00:24:38,400 --> 00:24:40,960
the secure product protect this as a

605
00:24:40,960 --> 00:24:42,159
correct

606
00:24:42,159 --> 00:24:43,440
um

607
00:24:43,440 --> 00:24:46,799
malicious query but it does not actually

608
00:24:46,799 --> 00:24:50,080
learn the right places

609
00:24:50,080 --> 00:24:53,279
so it did not learn the actual um the cq

610
00:24:53,279 --> 00:24:55,360
injection pattern

611
00:24:55,360 --> 00:24:59,279
so we think that we can leverage um this

612
00:24:59,279 --> 00:25:01,039
um

613
00:25:01,039 --> 00:25:03,919
this example to generate our

614
00:25:03,919 --> 00:25:05,679
anniversary example

615
00:25:05,679 --> 00:25:08,000
here's how we do it

616
00:25:08,000 --> 00:25:11,279
so we find one um

617
00:25:11,279 --> 00:25:14,080
not malicious and basically the benign

618
00:25:14,080 --> 00:25:15,200
behavior

619
00:25:15,200 --> 00:25:18,720
from the example endo

620
00:25:18,720 --> 00:25:22,320
but the model protects us malicious and

621
00:25:22,320 --> 00:25:25,200
we just modified that field to be a

622
00:25:25,200 --> 00:25:28,679
benign pattern

623
00:25:28,799 --> 00:25:31,760
and we find out that

624
00:25:31,760 --> 00:25:34,640
by simply changing uh

625
00:25:34,640 --> 00:25:36,320
the high weight

626
00:25:36,320 --> 00:25:37,360
uh

627
00:25:37,360 --> 00:25:38,640
patterns

628
00:25:38,640 --> 00:25:41,120
then we can get uh

629
00:25:41,120 --> 00:25:44,240
adversarial examples then can pass

630
00:25:44,240 --> 00:25:46,159
the

631
00:25:46,159 --> 00:25:47,520
ips

632
00:25:47,520 --> 00:25:50,320
the detection

633
00:25:54,000 --> 00:25:57,679
here is another example that we use xai

634
00:25:57,679 --> 00:26:00,080
to leak information from the hypersecure

635
00:26:00,080 --> 00:26:01,200
product

636
00:26:01,200 --> 00:26:03,440
as a hypersecurity product

637
00:26:03,440 --> 00:26:06,720
it is mainly the high level idea is to

638
00:26:06,720 --> 00:26:08,640
using a

639
00:26:08,640 --> 00:26:11,360
list of heuristic rules plus the ai

640
00:26:11,360 --> 00:26:13,120
models

641
00:26:13,120 --> 00:26:16,719
to protect the secure behavior

642
00:26:19,120 --> 00:26:21,279
so we intendedly

643
00:26:21,279 --> 00:26:24,720
modify one secure product to include

644
00:26:24,720 --> 00:26:26,080
heuristic

645
00:26:26,080 --> 00:26:27,200
rules

646
00:26:27,200 --> 00:26:29,679
all one equal to one which is a

647
00:26:29,679 --> 00:26:32,480
secure injection pattern

648
00:26:32,480 --> 00:26:35,200
and what we found out is the

649
00:26:35,200 --> 00:26:37,279
alarm tools can

650
00:26:37,279 --> 00:26:40,080
stabilize and accurately

651
00:26:40,080 --> 00:26:42,480
identify this out

652
00:26:42,480 --> 00:26:45,520
with more we tried multiple times and

653
00:26:45,520 --> 00:26:48,240
every time it can give us a very high

654
00:26:48,240 --> 00:26:51,200
confident scope for these rules so we

655
00:26:51,200 --> 00:26:52,720
consider

656
00:26:52,720 --> 00:26:56,080
as attacker if they can learn the rule

657
00:26:56,080 --> 00:26:58,640
from the skill product it is

658
00:26:58,640 --> 00:27:01,279
a information leakage and the attacker

659
00:27:01,279 --> 00:27:03,360
can leverage them at the end of the

660
00:27:03,360 --> 00:27:05,679
presentation i want to appreciate all

661
00:27:05,679 --> 00:27:07,279
your attentions

662
00:27:07,279 --> 00:27:09,679
if you have any questions please feel

663
00:27:09,679 --> 00:27:13,799
free to ask in this part

