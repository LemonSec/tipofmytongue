1
00:00:01,130 --> 00:00:14,690
[Music]

2
00:00:16,000 --> 00:00:17,600
hello everyone and thank you for

3
00:00:17,600 --> 00:00:21,199
attending our talk on hp ilo 5 security

4
00:00:21,199 --> 00:00:23,119
so first let's introduce ourselves so

5
00:00:23,119 --> 00:00:25,279
with me alexandre who is a security

6
00:00:25,279 --> 00:00:27,519
engineer in airbus security lab he is

7
00:00:27,519 --> 00:00:29,679
also the co-author of the practical

8
00:00:29,679 --> 00:00:31,359
reverse engineering book

9
00:00:31,359 --> 00:00:32,960
and i'm fabian perrigo i'm the reverse

10
00:00:32,960 --> 00:00:34,559
engineering team technical lead at

11
00:00:34,559 --> 00:00:36,480
scenic team i'm also a vulnerability

12
00:00:36,480 --> 00:00:38,320
researcher and a ctf and security

13
00:00:38,320 --> 00:00:40,000
challenge enthusiast

14
00:00:40,000 --> 00:00:41,680
our third partner in crime jeffrey

15
00:00:41,680 --> 00:00:43,360
charney couldn't attend the recording of

16
00:00:43,360 --> 00:00:45,520
this video

17
00:00:45,520 --> 00:00:48,559
so let's talk about silo so ilo is a

18
00:00:48,559 --> 00:00:50,800
full system running on a dedicated

19
00:00:50,800 --> 00:00:53,039
hardware in every hp

20
00:00:53,039 --> 00:00:55,840
servers in the world so it allows system

21
00:00:55,840 --> 00:00:58,000
administrators to be able to perform

22
00:00:58,000 --> 00:00:59,680
various administrative tasks on the

23
00:00:59,680 --> 00:01:01,920
server as if they were physically close

24
00:01:01,920 --> 00:01:02,879
to them

25
00:01:02,879 --> 00:01:04,479
so it

26
00:01:04,479 --> 00:01:06,640
for example they can recover values

27
00:01:06,640 --> 00:01:08,720
information such as the temperature

28
00:01:08,720 --> 00:01:11,439
graph you can see on the image but also

29
00:01:11,439 --> 00:01:14,240
uh have all the features of an

30
00:01:14,240 --> 00:01:16,960
ipk vm such as rebooting the server to

31
00:01:16,960 --> 00:01:20,000
boot on another media etc

32
00:01:20,000 --> 00:01:22,640
so ilo is a technology we already know

33
00:01:22,640 --> 00:01:26,080
we did a deep dive analysis of hp ilo4

34
00:01:26,080 --> 00:01:29,360
and ilo 5 back in 2018 so we found

35
00:01:29,360 --> 00:01:31,520
various vulnerabilities such as a

36
00:01:31,520 --> 00:01:34,560
pre-authentication rce on ilo4

37
00:01:34,560 --> 00:01:37,680
to a full secure boot bypass on ilo 5

38
00:01:37,680 --> 00:01:40,479
and we also abused the gma feature to be

39
00:01:40,479 --> 00:01:42,399
able to compromise the host operating

40
00:01:42,399 --> 00:01:46,960
system by executing code on ilo

41
00:01:46,960 --> 00:01:49,840
so how did this new study started

42
00:01:49,840 --> 00:01:52,640
back in early 2020 new ilo 5 firmware

43
00:01:52,640 --> 00:01:55,439
versions appeared versions2.x

44
00:01:55,439 --> 00:01:57,840
when we downloaded this new firmware

45
00:01:57,840 --> 00:01:59,280
versions we thought that they were in

46
00:01:59,280 --> 00:02:01,920
fact high entropy data blobs so it seems

47
00:02:01,920 --> 00:02:04,320
that these new updates were encrypted

48
00:02:04,320 --> 00:02:06,079
while looking at the installation notes

49
00:02:06,079 --> 00:02:08,000
we saw that to be able to upgrade to

50
00:02:08,000 --> 00:02:09,360
these new versions

51
00:02:09,360 --> 00:02:11,840
we first had to install ilo 5 version

52
00:02:11,840 --> 00:02:15,440
1.4 x so it seems that these

53
00:02:15,440 --> 00:02:17,200
firmware versions were transitional

54
00:02:17,200 --> 00:02:18,959
versions and fortunately they are

55
00:02:18,959 --> 00:02:21,520
unencrypted so we can start studying

56
00:02:21,520 --> 00:02:24,640
them to understand the new format

57
00:02:24,640 --> 00:02:27,040
okay so right now our objective is to

58
00:02:27,040 --> 00:02:29,280
understand where the firmware are

59
00:02:29,280 --> 00:02:32,319
decrypted by the io system

60
00:02:32,319 --> 00:02:34,319
and of course we want to

61
00:02:34,319 --> 00:02:36,319
hopefully re-implement that mechanism

62
00:02:36,319 --> 00:02:37,760
and update your firmware analysis

63
00:02:37,760 --> 00:02:40,239
toolbox

64
00:02:40,239 --> 00:02:42,400
our first guess was that the decryption

65
00:02:42,400 --> 00:02:44,239
will be implemented quite early in the

66
00:02:44,239 --> 00:02:46,720
boot process of the ilo 5 systems

67
00:02:46,720 --> 00:02:48,640
possibly in one of the first two

68
00:02:48,640 --> 00:02:51,519
bootloaders secure microboot or neba 9

69
00:02:51,519 --> 00:02:54,319
or possibly within the kernel however if

70
00:02:54,319 --> 00:02:56,560
we compared versions from

71
00:02:56,560 --> 00:03:00,239
firmware 1.3x and version 1.4x the

72
00:03:00,239 --> 00:03:02,560
versions were actually exactly the same

73
00:03:02,560 --> 00:03:05,040
there was no change so the decryption

74
00:03:05,040 --> 00:03:07,280
mechanism is not implemented during that

75
00:03:07,280 --> 00:03:11,120
stage of the boot stages

76
00:03:11,360 --> 00:03:12,400
the next

77
00:03:12,400 --> 00:03:15,200
hypothesis we made was that it could be

78
00:03:15,200 --> 00:03:17,440
in the username image and more

79
00:03:17,440 --> 00:03:20,000
specifically in one of the username

80
00:03:20,000 --> 00:03:22,640
tasks that we know very well which is

81
00:03:22,640 --> 00:03:26,080
the firmware update manager or fume

82
00:03:26,080 --> 00:03:28,799
this task is responsible to verify the

83
00:03:28,799 --> 00:03:32,239
cryptographic signature of the new

84
00:03:32,239 --> 00:03:35,040
firmware update file and if the check is

85
00:03:35,040 --> 00:03:37,920
successful to write that firmware update

86
00:03:37,920 --> 00:03:40,640
within the spy flash memory

87
00:03:40,640 --> 00:03:43,200
and indeed if we give quickly two

88
00:03:43,200 --> 00:03:45,120
versions of this user on task we

89
00:03:45,120 --> 00:03:48,959
discovered the decryption mechanism

90
00:03:48,959 --> 00:03:51,680
so to give you a quick overview

91
00:03:51,680 --> 00:03:53,599
what is used is called envelope

92
00:03:53,599 --> 00:03:54,640
encryption

93
00:03:54,640 --> 00:03:57,280
it relies upon open cell primitives

94
00:03:57,280 --> 00:03:58,239
and

95
00:03:58,239 --> 00:04:00,080
an authenticated symmetric ciphering of

96
00:04:00,080 --> 00:04:03,280
the data is used an an algorithm is a

97
00:04:03,280 --> 00:04:06,799
aes in galway counter mode or gcm

98
00:04:06,799 --> 00:04:08,959
and the symmetric key of the ies

99
00:04:08,959 --> 00:04:11,760
algorithm is actually sealed by

100
00:04:11,760 --> 00:04:13,920
an asymmetric encryption algorithm and

101
00:04:13,920 --> 00:04:16,959
erasa is used

102
00:04:17,040 --> 00:04:19,440
if you want to open the envelope or

103
00:04:19,440 --> 00:04:22,880
unsealed the symmetry key you have to

104
00:04:22,880 --> 00:04:26,320
use and access the rsr private key

105
00:04:26,320 --> 00:04:28,240
so now we are looking for this private

106
00:04:28,240 --> 00:04:31,040
key we quickly located this key private

107
00:04:31,040 --> 00:04:33,840
key in the data in the resource of the

108
00:04:33,840 --> 00:04:35,520
user on task

109
00:04:35,520 --> 00:04:38,560
it is in format pkcs8 and the rsi

110
00:04:38,560 --> 00:04:40,880
private key is protected by a passphrase

111
00:04:40,880 --> 00:04:42,960
again it

112
00:04:42,960 --> 00:04:44,960
the code relies upon

113
00:04:44,960 --> 00:04:47,040
open the cell primitive and in this in

114
00:04:47,040 --> 00:04:49,759
this time must be specifically pm read

115
00:04:49,759 --> 00:04:51,680
bio errors private key

116
00:04:51,680 --> 00:04:54,080
and actually there is a callback

117
00:04:54,080 --> 00:04:56,320
function that feeds the passphrase to

118
00:04:56,320 --> 00:04:59,120
this open cell primitive

119
00:04:59,120 --> 00:05:03,120
so if we pursue her analysis and we

120
00:05:03,120 --> 00:05:05,520
look at how this callback function is

121
00:05:05,520 --> 00:05:08,000
implemented we have named it pm password

122
00:05:08,000 --> 00:05:08,880
cb

123
00:05:08,880 --> 00:05:10,960
what we observe is that the buffer

124
00:05:10,960 --> 00:05:15,120
renamed hw secret is actually built from

125
00:05:15,120 --> 00:05:18,080
very specific memory ranges that we knew

126
00:05:18,080 --> 00:05:20,880
from our previous research on the topics

127
00:05:20,880 --> 00:05:23,120
and these memory ranges actually are

128
00:05:23,120 --> 00:05:26,000
configuration registers from the ilo 5

129
00:05:26,000 --> 00:05:29,440
system chip the processor itself so kind

130
00:05:29,440 --> 00:05:31,759
of hardware registers mapped into the

131
00:05:31,759 --> 00:05:34,479
virtual memory of the user on task

132
00:05:34,479 --> 00:05:37,440
so that means that the aw secret buffer

133
00:05:37,440 --> 00:05:38,400
is actually

134
00:05:38,400 --> 00:05:41,759
kind of a hardware key

135
00:05:41,759 --> 00:05:42,800
so

136
00:05:42,800 --> 00:05:45,360
we have an understanding of the global

137
00:05:45,360 --> 00:05:47,919
picture here our objective is to gain

138
00:05:47,919 --> 00:05:50,639
access to the ilo 5 system to read these

139
00:05:50,639 --> 00:05:52,720
stock registers and hopefully extract

140
00:05:52,720 --> 00:05:53,919
the key

141
00:05:53,919 --> 00:05:55,759
the simplest way to do that is to

142
00:05:55,759 --> 00:05:57,520
exploit the vulnerability on the idler 5

143
00:05:57,520 --> 00:05:59,280
system

144
00:05:59,280 --> 00:06:01,840
at this step we were very pragmatic

145
00:06:01,840 --> 00:06:04,639
we reused an exploit released an

146
00:06:04,639 --> 00:06:06,400
availability released in

147
00:06:06,400 --> 00:06:08,960
2018 by nicolios

148
00:06:08,960 --> 00:06:12,560
it impacted hilo ilo 4 and 5.

149
00:06:12,560 --> 00:06:14,639
it is a remote execution of arbitrary

150
00:06:14,639 --> 00:06:15,520
code

151
00:06:15,520 --> 00:06:16,800
in

152
00:06:16,800 --> 00:06:19,520
the proprietary ssh restricted shell

153
00:06:19,520 --> 00:06:22,160
the vulnerability is a type of

154
00:06:22,160 --> 00:06:24,479
type format string and a nicola released

155
00:06:24,479 --> 00:06:27,280
expectation code for ilo 4 so what we

156
00:06:27,280 --> 00:06:29,360
did was to port the first stage of this

157
00:06:29,360 --> 00:06:32,639
exploit to ilo 5.

158
00:06:33,360 --> 00:06:35,520
in order to do so we encounter a couple

159
00:06:35,520 --> 00:06:37,440
of difficulties the first one is that

160
00:06:37,440 --> 00:06:40,000
the vulnerability is located within the

161
00:06:40,000 --> 00:06:42,160
task on app cli which is the

162
00:06:42,160 --> 00:06:44,240
implementation of the restricted shell

163
00:06:44,240 --> 00:06:46,400
and within this task the stock secret

164
00:06:46,400 --> 00:06:48,880
the stock registers are not mapped

165
00:06:48,880 --> 00:06:50,080
the second

166
00:06:50,080 --> 00:06:52,080
difficulty is that

167
00:06:52,080 --> 00:06:54,560
with the format string of vulnerability

168
00:06:54,560 --> 00:06:58,479
we obtain a read write memory primitive

169
00:06:58,479 --> 00:06:59,919
however there is there are some

170
00:06:59,919 --> 00:07:01,039
constraints

171
00:07:01,039 --> 00:07:02,880
first of all addresses with null bytes

172
00:07:02,880 --> 00:07:05,440
are forbidden as well as some

173
00:07:05,440 --> 00:07:07,360
special characters in the addresses

174
00:07:07,360 --> 00:07:10,319
again like backslash or backlasher

175
00:07:10,319 --> 00:07:11,120
to

176
00:07:11,120 --> 00:07:13,599
bypass these difficulties we had to

177
00:07:13,599 --> 00:07:16,000
implement a couple of tricks so to solve

178
00:07:16,000 --> 00:07:18,479
the first issue we used a hook of a

179
00:07:18,479 --> 00:07:20,479
function pointer in

180
00:07:20,479 --> 00:07:22,000
the memory of the user on task to

181
00:07:22,000 --> 00:07:24,960
actually call a primitive exposed by the

182
00:07:24,960 --> 00:07:27,440
operating system that is quite close to

183
00:07:27,440 --> 00:07:29,680
a map function i will come back on it

184
00:07:29,680 --> 00:07:31,199
just after

185
00:07:31,199 --> 00:07:34,000
for the second difficulty we use a

186
00:07:34,000 --> 00:07:36,080
double mapping kind of double mapping

187
00:07:36,080 --> 00:07:37,919
trick to remove null bytes from

188
00:07:37,919 --> 00:07:40,000
addresses

189
00:07:40,000 --> 00:07:41,120
so

190
00:07:41,120 --> 00:07:42,639
back to the

191
00:07:42,639 --> 00:07:45,120
map equivalent function so it is kind of

192
00:07:45,120 --> 00:07:47,919
on request memory mapping it is uh what

193
00:07:47,919 --> 00:07:50,400
we are the function we have named it map

194
00:07:50,400 --> 00:07:53,039
it is a high level high level wrapper

195
00:07:53,039 --> 00:07:54,800
upon kernel primitives

196
00:07:54,800 --> 00:07:57,120
but what is really interesting is that

197
00:07:57,120 --> 00:07:58,960
the behavior of this function depends

198
00:07:58,960 --> 00:08:01,440
upon structures that are defined within

199
00:08:01,440 --> 00:08:03,680
the username task

200
00:08:03,680 --> 00:08:06,560
in the memory of the user on task

201
00:08:06,560 --> 00:08:08,639
and more specifically if you look at the

202
00:08:08,639 --> 00:08:11,280
top left of the slide you can observe

203
00:08:11,280 --> 00:08:13,759
that the structures are defined in a

204
00:08:13,759 --> 00:08:16,639
readable and writable memory area of the

205
00:08:16,639 --> 00:08:18,800
username task

206
00:08:18,800 --> 00:08:21,039
so each one of these structures is

207
00:08:21,039 --> 00:08:23,440
really simple it's kind of a mapping

208
00:08:23,440 --> 00:08:25,599
descriptor it this

209
00:08:25,599 --> 00:08:28,720
we guess that it describes some devices

210
00:08:28,720 --> 00:08:30,639
that can be mapped within the username

211
00:08:30,639 --> 00:08:32,479
task for example it's not possible to

212
00:08:32,479 --> 00:08:34,000
directly map

213
00:08:34,000 --> 00:08:35,519
the full memory of the kernel in the

214
00:08:35,519 --> 00:08:37,039
username task it could have been too

215
00:08:37,039 --> 00:08:38,719
simple

216
00:08:38,719 --> 00:08:42,240
so each structure is a kind of a mapping

217
00:08:42,240 --> 00:08:44,080
between physical memory and virtual

218
00:08:44,080 --> 00:08:46,399
memory and we also have what we have

219
00:08:46,399 --> 00:08:48,560
called a mask that is used to tell to

220
00:08:48,560 --> 00:08:50,720
the api which

221
00:08:50,720 --> 00:08:53,519
which memory range you want to uh to map

222
00:08:53,519 --> 00:08:54,560
into memory

223
00:08:54,560 --> 00:08:56,560
and yes the

224
00:08:56,560 --> 00:08:58,240
these structures are defined in a

225
00:08:58,240 --> 00:09:02,320
readable and writable memory of the task

226
00:09:02,560 --> 00:09:04,800
so as you can guess we have abused this

227
00:09:04,800 --> 00:09:06,640
fact for example we have patched one of

228
00:09:06,640 --> 00:09:09,040
the descriptors to make sure that

229
00:09:09,040 --> 00:09:11,120
one physical memory which was of

230
00:09:11,120 --> 00:09:12,959
specific interest for us because that's

231
00:09:12,959 --> 00:09:14,480
where the

232
00:09:14,480 --> 00:09:16,640
hardware registers are

233
00:09:16,640 --> 00:09:19,279
mapped we have used this descriptor to

234
00:09:19,279 --> 00:09:22,480
map it at another virtual memory virtual

235
00:09:22,480 --> 00:09:23,519
addresses

236
00:09:23,519 --> 00:09:24,480
where

237
00:09:24,480 --> 00:09:26,480
actually to remove the new null bytes

238
00:09:26,480 --> 00:09:28,480
from the addresses so it's all one of

239
00:09:28,480 --> 00:09:30,800
four difficulties

240
00:09:30,800 --> 00:09:33,200
so at the end we actually quickly

241
00:09:33,200 --> 00:09:34,640
managed to

242
00:09:34,640 --> 00:09:36,880
extract the key from

243
00:09:36,880 --> 00:09:38,480
the ilo files from the memory of the

244
00:09:38,480 --> 00:09:41,839
allo 5 system performing as a

245
00:09:41,839 --> 00:09:43,519
key extraction using a format string

246
00:09:43,519 --> 00:09:45,440
over the vpn over vpn because those

247
00:09:45,440 --> 00:09:47,600
servers were located elsewhere and very

248
00:09:47,600 --> 00:09:51,120
quickly we were successfully decrypting

249
00:09:51,120 --> 00:09:54,279
the firmware.2x

250
00:09:54,560 --> 00:09:55,279
so

251
00:09:55,279 --> 00:09:58,920
what do we have new in this firmware in

252
00:09:58,920 --> 00:10:01,200
version.2. xory

253
00:10:01,200 --> 00:10:03,839
what is really new is that we know we

254
00:10:03,839 --> 00:10:06,240
have three username images

255
00:10:06,240 --> 00:10:08,959
there used to be only two

256
00:10:08,959 --> 00:10:11,440
main image where all the idler firmware

257
00:10:11,440 --> 00:10:14,640
will be located and a recovery image

258
00:10:14,640 --> 00:10:16,399
only

259
00:10:16,399 --> 00:10:19,040
now we have three images like i said

260
00:10:19,040 --> 00:10:21,680
what we observe is that there is a new

261
00:10:21,680 --> 00:10:24,720
kind of image and it is very very small

262
00:10:24,720 --> 00:10:26,160
it is

263
00:10:26,160 --> 00:10:28,399
actually even smaller than the recovery

264
00:10:28,399 --> 00:10:31,040
image and what is really important it

265
00:10:31,040 --> 00:10:33,839
what used to be the main image

266
00:10:33,839 --> 00:10:36,399
the biggest one i would say no it is

267
00:10:36,399 --> 00:10:38,640
again encrypted

268
00:10:38,640 --> 00:10:41,040
so we have a new images very small that

269
00:10:41,040 --> 00:10:43,040
is not encrypted and that will be your

270
00:10:43,040 --> 00:10:46,240
lead to understand what happened

271
00:10:46,240 --> 00:10:48,399
and that's exactly the feeling we had at

272
00:10:48,399 --> 00:10:50,800
that time that the princess was indeed

273
00:10:50,800 --> 00:10:53,120
in another castle

274
00:10:53,120 --> 00:10:55,360
so quite quickly we

275
00:10:55,360 --> 00:10:57,200
come to the conclusion that there is a

276
00:10:57,200 --> 00:10:59,360
second encryption layer and

277
00:10:59,360 --> 00:11:01,519
again our objective will be to extract

278
00:11:01,519 --> 00:11:03,519
the encryption key and hopefully

279
00:11:03,519 --> 00:11:05,519
re-implement all the stuff in our

280
00:11:05,519 --> 00:11:08,320
firmware analysis toolbox

281
00:11:08,320 --> 00:11:09,360
so

282
00:11:09,360 --> 00:11:11,920
if we dissect a little the new very

283
00:11:11,920 --> 00:11:14,880
small use of an image that we find in

284
00:11:14,880 --> 00:11:19,200
the new firmware we observe that it is

285
00:11:19,200 --> 00:11:21,920
it only embeds three shared modules

286
00:11:21,920 --> 00:11:23,920
three libraries the first one is limited

287
00:11:23,920 --> 00:11:26,480
gritty so lim integrity sorry so

288
00:11:26,480 --> 00:11:27,839
basically the interface with the

289
00:11:27,839 --> 00:11:30,240
operating system we have the ellipsi and

290
00:11:30,240 --> 00:11:32,959
libopen ssl so we as you can guess we

291
00:11:32,959 --> 00:11:34,959
will have cryptography involved

292
00:11:34,959 --> 00:11:37,360
if we look at the list of tasks this

293
00:11:37,360 --> 00:11:40,320
image is a single task image so the only

294
00:11:40,320 --> 00:11:43,279
task that runs is name key manager key

295
00:11:43,279 --> 00:11:44,959
or kmgr

296
00:11:44,959 --> 00:11:49,680
and we will name this image kmjr as well

297
00:11:49,680 --> 00:11:52,240
so to give you again an overview of what

298
00:11:52,240 --> 00:11:55,279
is at stack here actually we have a kind

299
00:11:55,279 --> 00:11:57,279
of an augmented blue chain

300
00:11:57,279 --> 00:11:58,800
instead of

301
00:11:58,800 --> 00:12:01,200
the kernel jumps directly to the main

302
00:12:01,200 --> 00:12:03,519
images we have now what we have called

303
00:12:03,519 --> 00:12:06,000
stager that is key manager and key

304
00:12:06,000 --> 00:12:08,560
manager is responsible for loading and

305
00:12:08,560 --> 00:12:12,000
decrypting in memory the new secure main

306
00:12:12,000 --> 00:12:14,399
image and i use the route secure because

307
00:12:14,399 --> 00:12:16,800
it is encrypted

308
00:12:16,800 --> 00:12:17,680
okay

309
00:12:17,680 --> 00:12:20,320
so now we want to extract the key from

310
00:12:20,320 --> 00:12:21,760
the key manager we are looking for the

311
00:12:21,760 --> 00:12:24,320
committee

312
00:12:24,320 --> 00:12:25,920
so the new

313
00:12:25,920 --> 00:12:28,560
main new zealand image are encrypted

314
00:12:28,560 --> 00:12:30,639
with the same envelope encryption

315
00:12:30,639 --> 00:12:33,519
mechanism is used however instead of

316
00:12:33,519 --> 00:12:36,720
using rsa for the asymmetric part

317
00:12:36,720 --> 00:12:38,959
some cryptography over elliptic curve is

318
00:12:38,959 --> 00:12:39,839
used

319
00:12:39,839 --> 00:12:41,839
what happens is that when key manager

320
00:12:41,839 --> 00:12:44,639
starts very early in its boot

321
00:12:44,639 --> 00:12:46,160
a private key

322
00:12:46,160 --> 00:12:47,920
is reconstructed

323
00:12:47,920 --> 00:12:50,959
this private key is combined with some

324
00:12:50,959 --> 00:12:55,200
public part located in the header of the

325
00:12:55,200 --> 00:12:57,279
new encrypted username image and

326
00:12:57,279 --> 00:12:59,440
basically what is used is a definement

327
00:12:59,440 --> 00:13:01,920
algorithm over the ap curve to derive a

328
00:13:01,920 --> 00:13:04,880
shared secret and this shared secret is

329
00:13:04,880 --> 00:13:06,399
later used to derive

330
00:13:06,399 --> 00:13:07,760
the aes

331
00:13:07,760 --> 00:13:10,480
encryption key the symmetric encryption

332
00:13:10,480 --> 00:13:14,320
used for zis in gcm mode

333
00:13:14,720 --> 00:13:16,000
so

334
00:13:16,000 --> 00:13:17,680
the reverse engineering of key manager

335
00:13:17,680 --> 00:13:19,920
was already a great challenge especially

336
00:13:19,920 --> 00:13:22,480
because we had a new unknown factor new

337
00:13:22,480 --> 00:13:25,120
x factor that was totally unknown to us

338
00:13:25,120 --> 00:13:27,120
at the beginning of this study which is

339
00:13:27,120 --> 00:13:29,440
a hardware crypto processor

340
00:13:29,440 --> 00:13:31,360
regarding this crypto processor this

341
00:13:31,360 --> 00:13:33,440
hardware element we had absolutely no

342
00:13:33,440 --> 00:13:35,600
specification no developer documentation

343
00:13:35,600 --> 00:13:36,800
or anything

344
00:13:36,800 --> 00:13:38,880
so we were really

345
00:13:38,880 --> 00:13:41,120
kind of blind at the beginning

346
00:13:41,120 --> 00:13:43,440
quickly we realized that only three

347
00:13:43,440 --> 00:13:45,680
operations were used from this crypto

348
00:13:45,680 --> 00:13:48,880
processor the first one is a sha-384

349
00:13:48,880 --> 00:13:50,560
primitive

350
00:13:50,560 --> 00:13:53,760
and we have an aes in counter mode and

351
00:13:53,760 --> 00:13:55,920
another ies in galway countermode so

352
00:13:55,920 --> 00:13:58,479
authenticated

353
00:13:59,440 --> 00:14:01,519
the private key is reconstructed

354
00:14:01,519 --> 00:14:03,279
regularly in the boot of kiev manager

355
00:14:03,279 --> 00:14:05,519
there are two main steps the first one

356
00:14:05,519 --> 00:14:07,600
is the derivation of a seed from

357
00:14:07,600 --> 00:14:09,120
hardware values

358
00:14:09,120 --> 00:14:11,680
so on the top left of

359
00:14:11,680 --> 00:14:14,079
the schema schematic and on the top

360
00:14:14,079 --> 00:14:15,600
right we have the key scheduling

361
00:14:15,600 --> 00:14:17,839
function that is fed by the seed that is

362
00:14:17,839 --> 00:14:19,920
the right first

363
00:14:19,920 --> 00:14:21,360
so

364
00:14:21,360 --> 00:14:23,120
if we go back on the derivation of a

365
00:14:23,120 --> 00:14:26,000
seed there there are actually two inputs

366
00:14:26,000 --> 00:14:28,880
value the first one that we name boot

367
00:14:28,880 --> 00:14:29,760
ash

368
00:14:29,760 --> 00:14:32,560
is actually we understand that

369
00:14:32,560 --> 00:14:34,560
thanks to our knowledge of the system

370
00:14:34,560 --> 00:14:36,639
actually it is an artifact

371
00:14:36,639 --> 00:14:39,600
of the verification of the signature of

372
00:14:39,600 --> 00:14:43,680
the first bootloader by the boot rom of

373
00:14:43,680 --> 00:14:46,079
located on the processor itself

374
00:14:46,079 --> 00:14:48,720
so we have kind of a

375
00:14:48,720 --> 00:14:51,440
residual context that stays on the

376
00:14:51,440 --> 00:14:53,839
output buffer of the cryptoprocessor and

377
00:14:53,839 --> 00:14:56,399
it is used as input value for the

378
00:14:56,399 --> 00:14:59,040
derivation of the initial seed

379
00:14:59,040 --> 00:15:01,279
the second input

380
00:15:01,279 --> 00:15:03,760
that we named hardware key

381
00:15:03,760 --> 00:15:07,199
is actually a buffer made from uh again

382
00:15:07,199 --> 00:15:11,199
hardware registers from the ilo 5

383
00:15:11,199 --> 00:15:14,800
sock so you combine boot ash and advert

384
00:15:14,800 --> 00:15:17,360
key using a derivation steps based on

385
00:15:17,360 --> 00:15:21,360
char 384 and you got the duration seed

386
00:15:21,360 --> 00:15:23,600
this derivation seed is then proceeded

387
00:15:23,600 --> 00:15:27,279
to the key scheduling function

388
00:15:27,279 --> 00:15:30,000
the key scheduling is kind of really

389
00:15:30,000 --> 00:15:32,800
complex so we will not enter into every

390
00:15:32,800 --> 00:15:35,120
details here but you can find all the

391
00:15:35,120 --> 00:15:37,199
information in the paper that we

392
00:15:37,199 --> 00:15:38,800
published on the github of the project

393
00:15:38,800 --> 00:15:41,680
as well today we will just speak about

394
00:15:41,680 --> 00:15:42,480
two

395
00:15:42,480 --> 00:15:44,399
key elements i would say the first one

396
00:15:44,399 --> 00:15:46,560
is what we have called commands they are

397
00:15:46,560 --> 00:15:49,120
like wrapper over the crypto processor

398
00:15:49,120 --> 00:15:51,920
kind of derivation steps based again on

399
00:15:51,920 --> 00:15:53,839
the charts 384

400
00:15:53,839 --> 00:15:56,079
and this deviation step is parameterized

401
00:15:56,079 --> 00:15:58,800
by a key you have commands like key

402
00:15:58,800 --> 00:16:03,440
schedule drive kx or drgb seed lb

403
00:16:03,440 --> 00:16:05,680
the second very important point is

404
00:16:05,680 --> 00:16:07,839
do you generate a deterministic key

405
00:16:07,839 --> 00:16:10,320
because key manager use open ssl

406
00:16:10,320 --> 00:16:12,800
primitive like ec key generate key and

407
00:16:12,800 --> 00:16:14,560
if you use that in your code on your

408
00:16:14,560 --> 00:16:16,399
machine it will generate for you a

409
00:16:16,399 --> 00:16:19,040
perfectly random

410
00:16:19,040 --> 00:16:21,600
private key over the ap curve

411
00:16:21,600 --> 00:16:23,759
what kim manager does actually is that

412
00:16:23,759 --> 00:16:25,440
it replaces

413
00:16:25,440 --> 00:16:28,959
the default prng used by openssl and it

414
00:16:28,959 --> 00:16:32,880
replaced it by a custom i would say prng

415
00:16:32,880 --> 00:16:35,040
and this paren g is initialized or

416
00:16:35,040 --> 00:16:37,279
seeded with a deterministic seed so of

417
00:16:37,279 --> 00:16:39,120
course it will have a deterministic

418
00:16:39,120 --> 00:16:41,600
output and that thus we will produce a

419
00:16:41,600 --> 00:16:43,440
deterministic key

420
00:16:43,440 --> 00:16:45,279
the deterministic seed is actually the

421
00:16:45,279 --> 00:16:48,399
output of the common derived kx

422
00:16:48,399 --> 00:16:50,320
so we have this complex key scheduling

423
00:16:50,320 --> 00:16:52,480
function that will actually generate

424
00:16:52,480 --> 00:16:55,759
three private keys over the

425
00:16:55,759 --> 00:16:58,160
elliptic curve however only the first

426
00:16:58,160 --> 00:17:01,680
one will be used by q manager

427
00:17:01,839 --> 00:17:04,720
so we have a good understanding of the

428
00:17:04,720 --> 00:17:07,280
all the calibration steps and we

429
00:17:07,280 --> 00:17:09,679
hopefully what we want to do is to

430
00:17:09,679 --> 00:17:12,000
perform an offline generation of this

431
00:17:12,000 --> 00:17:12,799
key

432
00:17:12,799 --> 00:17:14,959
that is without the need of relying on

433
00:17:14,959 --> 00:17:16,880
the ido 5 hardware

434
00:17:16,880 --> 00:17:19,599
so we need a complete annotation in c to

435
00:17:19,599 --> 00:17:22,079
be uh quite close to what is actually

436
00:17:22,079 --> 00:17:23,359
implemented

437
00:17:23,359 --> 00:17:25,760
uh in the original firmware based on our

438
00:17:25,760 --> 00:17:28,559
static analysis we extracted again the

439
00:17:28,559 --> 00:17:31,280
hardware register's value using again

440
00:17:31,280 --> 00:17:32,480
the 1d

441
00:17:32,480 --> 00:17:34,640
format string vulnerability

442
00:17:34,640 --> 00:17:37,120
and combining all of that it was a

443
00:17:37,120 --> 00:17:38,960
complete failure we failed to decrypt

444
00:17:38,960 --> 00:17:41,440
the user a news user and image so we

445
00:17:41,440 --> 00:17:43,120
needed to have more information we

446
00:17:43,120 --> 00:17:45,200
needed to escalate to analysis and

447
00:17:45,200 --> 00:17:47,039
possibly to interface with the crypto

448
00:17:47,039 --> 00:17:49,280
processor to understand and validate

449
00:17:49,280 --> 00:17:52,000
step by step all the value stages of the

450
00:17:52,000 --> 00:17:53,280
key scheduling function and key

451
00:17:53,280 --> 00:17:55,840
direction

452
00:17:56,080 --> 00:17:57,039
so

453
00:17:57,039 --> 00:17:58,400
we want to

454
00:17:58,400 --> 00:18:00,080
talk to the crypto processor because we

455
00:18:00,080 --> 00:18:03,039
need to interface directly with it

456
00:18:03,039 --> 00:18:05,440
to do that you what we observe what we

457
00:18:05,440 --> 00:18:07,520
are reverse engineering is that there is

458
00:18:07,520 --> 00:18:10,640
an interface made of again mapped

459
00:18:10,640 --> 00:18:12,480
hardware registers that are mapped

460
00:18:12,480 --> 00:18:14,960
inside the virtual memory of the task

461
00:18:14,960 --> 00:18:17,120
so we'll describe a bit the interface

462
00:18:17,120 --> 00:18:18,720
with the crypto processor

463
00:18:18,720 --> 00:18:21,760
so at offset 0 we will have a register

464
00:18:21,760 --> 00:18:22,799
that is

465
00:18:22,799 --> 00:18:25,919
that we have named control flags one can

466
00:18:25,919 --> 00:18:28,400
place specific flags to control the

467
00:18:28,400 --> 00:18:30,000
various operations of the crypto

468
00:18:30,000 --> 00:18:31,840
processor for example if you want to

469
00:18:31,840 --> 00:18:33,760
start the computation of your digest to

470
00:18:33,760 --> 00:18:36,720
add more data to end the computation or

471
00:18:36,720 --> 00:18:39,440
to reset the output buffer

472
00:18:39,440 --> 00:18:40,640
at offset

473
00:18:40,640 --> 00:18:43,840
zero dot

474
00:18:44,160 --> 00:18:47,520
10 sorry we have a register that we have

475
00:18:47,520 --> 00:18:49,760
named offset it is actually

476
00:18:49,760 --> 00:18:52,000
automatically i mean in hardware

477
00:18:52,000 --> 00:18:54,480
incremented as soon as you write some

478
00:18:54,480 --> 00:18:56,799
data inside the input buffer

479
00:18:56,799 --> 00:18:59,120
and it contains the size of the input

480
00:18:59,120 --> 00:19:00,960
data in bits

481
00:19:00,960 --> 00:19:02,600
at offset

482
00:19:02,600 --> 00:19:05,919
0x40 we have the output buffer

483
00:19:05,919 --> 00:19:07,400
and out of set

484
00:19:07,400 --> 00:19:11,840
0x80 we have the input buffer

485
00:19:12,320 --> 00:19:13,840
so to interface with the credit

486
00:19:13,840 --> 00:19:15,919
processor we only need to read and write

487
00:19:15,919 --> 00:19:17,840
the task virtual memory we can do that

488
00:19:17,840 --> 00:19:19,039
with the one day format string

489
00:19:19,039 --> 00:19:21,200
vulnerability and we will

490
00:19:21,200 --> 00:19:23,520
use this primitive to interface with the

491
00:19:23,520 --> 00:19:25,840
crypto processor

492
00:19:25,840 --> 00:19:28,400
we started doing so and quite quickly we

493
00:19:28,400 --> 00:19:31,120
discovered some unexpected bugs in the

494
00:19:31,120 --> 00:19:32,880
use of the interface by schema by key

495
00:19:32,880 --> 00:19:34,480
manager

496
00:19:34,480 --> 00:19:36,240
the first one of these bugs

497
00:19:36,240 --> 00:19:38,640
is related to the flag that we have

498
00:19:38,640 --> 00:19:41,919
named uh chas384 digest more data

499
00:19:41,919 --> 00:19:44,960
its semantics is quite close to an

500
00:19:44,960 --> 00:19:47,440
update flag basically the expected

501
00:19:47,440 --> 00:19:49,440
behavior is that

502
00:19:49,440 --> 00:19:52,320
when you position this flag it the

503
00:19:52,320 --> 00:19:54,400
internal state of the crypto processor

504
00:19:54,400 --> 00:19:56,880
the internal state of the digest will be

505
00:19:56,880 --> 00:19:59,360
updated with the current content of the

506
00:19:59,360 --> 00:20:02,720
input buffer however what we observed

507
00:20:02,720 --> 00:20:05,200
is that if the input buffer has not been

508
00:20:05,200 --> 00:20:07,039
fully filled

509
00:20:07,039 --> 00:20:10,240
then the data are discarded or ignored

510
00:20:10,240 --> 00:20:12,720
so to give you an example we start an

511
00:20:12,720 --> 00:20:15,679
operation on the crypto on the yes the

512
00:20:15,679 --> 00:20:16,960
credit processor

513
00:20:16,960 --> 00:20:19,360
so we write the boot hash buffer with

514
00:20:19,360 --> 00:20:20,640
input buffer

515
00:20:20,640 --> 00:20:23,840
we place the flag update

516
00:20:23,840 --> 00:20:25,760
then we write a new buffer in the input

517
00:20:25,760 --> 00:20:28,400
buffer we write the hardware key buffer

518
00:20:28,400 --> 00:20:32,320
and we place the data end flags

519
00:20:32,320 --> 00:20:35,120
what we would have expected is to uh

520
00:20:35,120 --> 00:20:37,360
that the final digest is the

521
00:20:37,360 --> 00:20:39,600
concatenation the actual digest of the

522
00:20:39,600 --> 00:20:42,000
concatenation of boot ash with hardware

523
00:20:42,000 --> 00:20:45,200
key however what we observed is that

524
00:20:45,200 --> 00:20:47,679
bootage buffer is actually discarded and

525
00:20:47,679 --> 00:20:49,919
the crypto processor will wrap simply

526
00:20:49,919 --> 00:20:52,880
wrap over the hardware key buffer

527
00:20:52,880 --> 00:20:53,679
so

528
00:20:53,679 --> 00:20:55,440
we have a very different digest of

529
00:20:55,440 --> 00:20:59,039
course than what we would have expected

530
00:20:59,039 --> 00:21:01,039
what it means in practice

531
00:21:01,039 --> 00:21:02,880
if you remember what we said regarding

532
00:21:02,880 --> 00:21:03,840
the

533
00:21:03,840 --> 00:21:06,480
derivation of the initial seed there are

534
00:21:06,480 --> 00:21:09,679
two inputs boot ash and adwar key and in

535
00:21:09,679 --> 00:21:12,320
practice actually boot ash buffer is

536
00:21:12,320 --> 00:21:13,760
discarded

537
00:21:13,760 --> 00:21:15,679
due to this bug in the interface with

538
00:21:15,679 --> 00:21:18,480
the cryptoprocessor

539
00:21:18,480 --> 00:21:20,159
the second bug

540
00:21:20,159 --> 00:21:21,760
we observed

541
00:21:21,760 --> 00:21:24,000
is related to non-contiguous write in

542
00:21:24,000 --> 00:21:25,679
the input buffer

543
00:21:25,679 --> 00:21:27,919
like we said again regarding the offset

544
00:21:27,919 --> 00:21:30,400
registers it is it is

545
00:21:30,400 --> 00:21:32,799
automatically incremented in hardware

546
00:21:32,799 --> 00:21:35,520
with the number of bits that is written

547
00:21:35,520 --> 00:21:37,120
in the input buffer however it is

548
00:21:37,120 --> 00:21:39,600
incremented without any consideration

549
00:21:39,600 --> 00:21:41,360
for the position of the write in the

550
00:21:41,360 --> 00:21:44,080
input buffer that's really important

551
00:21:44,080 --> 00:21:45,520
and however

552
00:21:45,520 --> 00:21:47,919
again internally in hardware the offset

553
00:21:47,919 --> 00:21:50,240
the value of the offset registers is

554
00:21:50,240 --> 00:21:52,320
used by the cryptoprocessor to read the

555
00:21:52,320 --> 00:21:55,360
data linearly or continuously

556
00:21:55,360 --> 00:21:58,240
so that means that if you write a first

557
00:21:58,240 --> 00:22:00,720
buffer leaves a small gap then write a

558
00:22:00,720 --> 00:22:03,280
new buffer

559
00:22:03,440 --> 00:22:06,240
then when you compute the

560
00:22:06,240 --> 00:22:07,840
digest of

561
00:22:07,840 --> 00:22:10,080
these two

562
00:22:10,080 --> 00:22:11,440
these two buffers

563
00:22:11,440 --> 00:22:13,679
you will have a result that is different

564
00:22:13,679 --> 00:22:16,080
that what could have been expected

565
00:22:16,080 --> 00:22:18,159
not all the data will be taken into

566
00:22:18,159 --> 00:22:21,440
consideration in the digest

567
00:22:21,679 --> 00:22:22,480
so

568
00:22:22,480 --> 00:22:23,280
we

569
00:22:23,280 --> 00:22:25,600
adapted our code to reflect these two

570
00:22:25,600 --> 00:22:28,000
bugs we discovered and

571
00:22:28,000 --> 00:22:30,080
it was actually a new total epic failure

572
00:22:30,080 --> 00:22:32,960
because the key we computed was still

573
00:22:32,960 --> 00:22:34,960
invalid

574
00:22:34,960 --> 00:22:37,280
so now what we wanted to do was to find

575
00:22:37,280 --> 00:22:39,919
some debug information to understand

576
00:22:39,919 --> 00:22:42,799
where we failed in our implementation

577
00:22:42,799 --> 00:22:45,280
so while debugging the key manager task

578
00:22:45,280 --> 00:22:47,360
we saw that there were some debug

579
00:22:47,360 --> 00:22:50,080
messages present for example there's an

580
00:22:50,080 --> 00:22:52,559
intermediary state in an early stage of

581
00:22:52,559 --> 00:22:55,039
the key derivation which is outputted on

582
00:22:55,039 --> 00:22:58,080
the standard output after being a base64

583
00:22:58,080 --> 00:22:59,120
encoded

584
00:22:59,120 --> 00:23:01,919
and also the final computed public key

585
00:23:01,919 --> 00:23:05,360
is displayed also on the standard output

586
00:23:05,360 --> 00:23:07,440
so we know that the standard output is

587
00:23:07,440 --> 00:23:09,840
in fact printed on the uart output of

588
00:23:09,840 --> 00:23:13,120
the server so we started probing some

589
00:23:13,120 --> 00:23:15,760
pins on the server motherboard to find

590
00:23:15,760 --> 00:23:18,159
the url and we finally found it

591
00:23:18,159 --> 00:23:21,600
so when we booted the server we can now

592
00:23:21,600 --> 00:23:24,400
see that these debug messages

593
00:23:24,400 --> 00:23:26,799
so what we did was uh in our

594
00:23:26,799 --> 00:23:29,360
implementation we re-implemented the

595
00:23:29,360 --> 00:23:32,159
base64 encoding of this intermediary

596
00:23:32,159 --> 00:23:33,039
state

597
00:23:33,039 --> 00:23:35,600
and we saw that the two values were

598
00:23:35,600 --> 00:23:38,880
totally different so it means that

599
00:23:38,880 --> 00:23:41,520
we have a failure very early in the

600
00:23:41,520 --> 00:23:43,039
derivation process

601
00:23:43,039 --> 00:23:45,520
which is a good news

602
00:23:45,520 --> 00:23:48,960
so here is where the the failure

603
00:23:48,960 --> 00:23:51,279
should be so there's the initial

604
00:23:51,279 --> 00:23:55,279
derivation seed as well as an early step

605
00:23:55,279 --> 00:23:58,240
in the final key derivation

606
00:23:58,240 --> 00:24:00,559
so now we had a new theory which was

607
00:24:00,559 --> 00:24:01,919
that the

608
00:24:01,919 --> 00:24:04,320
values of the hardware registers may

609
00:24:04,320 --> 00:24:06,960
have changed between firmware versions

610
00:24:06,960 --> 00:24:08,880
1.x and 2.x

611
00:24:08,880 --> 00:24:11,440
so we need better debugging capabilities

612
00:24:11,440 --> 00:24:14,159
to be able to read these values on a 2.x

613
00:24:14,159 --> 00:24:16,640
firmware

614
00:24:16,720 --> 00:24:18,400
so we wanted to use some hardware

615
00:24:18,400 --> 00:24:21,039
debugging so we we wanted to find a

616
00:24:21,039 --> 00:24:23,039
debug port on the motherboard and be

617
00:24:23,039 --> 00:24:25,279
able to use it to read these hardware

618
00:24:25,279 --> 00:24:27,520
registers values

619
00:24:27,520 --> 00:24:29,600
when we looked at the

620
00:24:29,600 --> 00:24:32,559
photographies of the hp micro server

621
00:24:32,559 --> 00:24:35,520
gen10 motherboard on hpe website we saw

622
00:24:35,520 --> 00:24:37,440
there were there was a

623
00:24:37,440 --> 00:24:40,320
port labeled as ilo debug it's a miktor

624
00:24:40,320 --> 00:24:41,919
port which is well known in the arm

625
00:24:41,919 --> 00:24:43,919
world and it should allow us to do some

626
00:24:43,919 --> 00:24:46,159
jtag debugging

627
00:24:46,159 --> 00:24:48,640
so we started soldering wires to be able

628
00:24:48,640 --> 00:24:51,200
to interface with the with this port

629
00:24:51,200 --> 00:24:54,799
but finally we bought a correct adapter

630
00:24:54,799 --> 00:24:57,520
in the end we were able to enumerate the

631
00:24:57,520 --> 00:24:59,760
jtag chain so we saw there were two

632
00:24:59,760 --> 00:25:02,640
processors on the chain but we had some

633
00:25:02,640 --> 00:25:05,440
problem with the the jtag input the tdi

634
00:25:05,440 --> 00:25:07,919
pin and we didn't find the solution to

635
00:25:07,919 --> 00:25:10,000
fix it so we gave up we are software

636
00:25:10,000 --> 00:25:12,559
guys so we wanted to find a software

637
00:25:12,559 --> 00:25:16,240
solution to be able to do the same

638
00:25:16,480 --> 00:25:19,360
so what we did was uh looking for a new

639
00:25:19,360 --> 00:25:22,000
vulnerability in a firmware version 2.x

640
00:25:22,000 --> 00:25:24,159
to be able to read the stock registers

641
00:25:24,159 --> 00:25:26,559
values

642
00:25:26,640 --> 00:25:30,159
so our target are 2.x firmwares we had a

643
00:25:30,159 --> 00:25:32,320
look at the specific attack surface we

644
00:25:32,320 --> 00:25:33,600
already know which is the chief

645
00:25:33,600 --> 00:25:36,559
interface this is an interface to

646
00:25:36,559 --> 00:25:38,480
to perform communication between the

647
00:25:38,480 --> 00:25:41,600
host operating system and the ilo system

648
00:25:41,600 --> 00:25:44,080
so from there several tasks running on

649
00:25:44,080 --> 00:25:46,240
ilo are reachable from the host

650
00:25:46,240 --> 00:25:47,679
operating system

651
00:25:47,679 --> 00:25:49,760
and one of them is the black box task

652
00:25:49,760 --> 00:25:52,240
and it's really interesting because this

653
00:25:52,240 --> 00:25:54,480
task is also present in the recovery

654
00:25:54,480 --> 00:25:57,200
image which is unencrypted so we can

655
00:25:57,200 --> 00:26:00,000
open it in iodide and start studying it

656
00:26:00,000 --> 00:26:02,559
so the black box task handles many

657
00:26:02,559 --> 00:26:04,320
comments and one of these commands

658
00:26:04,320 --> 00:26:07,840
commands 5 is a kind of debug menu in

659
00:26:07,840 --> 00:26:09,520
expecting some commands in text mode

660
00:26:09,520 --> 00:26:12,240
just like if we were in a terminal

661
00:26:12,240 --> 00:26:14,960
and when it handles a command it will

662
00:26:14,960 --> 00:26:16,240
output the

663
00:26:16,240 --> 00:26:18,240
the results on the uart for example

664
00:26:18,240 --> 00:26:21,520
there's a bbf dump command taking a file

665
00:26:21,520 --> 00:26:24,000
as argument and it will exit the file on

666
00:26:24,000 --> 00:26:26,320
the uart

667
00:26:26,320 --> 00:26:29,840
when we started uh looking at the the

668
00:26:29,840 --> 00:26:31,840
handler of this command it was like in

669
00:26:31,840 --> 00:26:34,799
the 19 so there were buffer overflows

670
00:26:34,799 --> 00:26:36,640
everywhere massive usage of dangerous

671
00:26:36,640 --> 00:26:39,440
functions such as printf string copy

672
00:26:39,440 --> 00:26:42,400
without verifying the the destination

673
00:26:42,400 --> 00:26:45,039
buffer size

674
00:26:45,279 --> 00:26:46,320
um

675
00:26:46,320 --> 00:26:48,960
as a reminder on ilo 5 there are no

676
00:26:48,960 --> 00:26:51,919
modern mitigations so no nx no eslr no

677
00:26:51,919 --> 00:26:55,279
stack cookies so exploiting this kind of

678
00:26:55,279 --> 00:26:57,440
vulnerability is kind of easy so we

679
00:26:57,440 --> 00:27:00,000
targeted one of these command handler

680
00:27:00,000 --> 00:27:02,799
which is the fvu command it will perform

681
00:27:02,799 --> 00:27:05,600
an sprintf on a fixed style stack buffer

682
00:27:05,600 --> 00:27:06,960
without checking

683
00:27:06,960 --> 00:27:09,440
the size

684
00:27:09,919 --> 00:27:12,000
so how did we exploit it

685
00:27:12,000 --> 00:27:14,880
we first wrote a small shell code a

686
00:27:14,880 --> 00:27:16,640
trampoline shell code in the data

687
00:27:16,640 --> 00:27:18,559
section of the

688
00:27:18,559 --> 00:27:21,039
of the task using another command which

689
00:27:21,039 --> 00:27:23,039
is a chdr

690
00:27:23,039 --> 00:27:24,640
and uh

691
00:27:24,640 --> 00:27:27,200
this shell code was simply grabbing the

692
00:27:27,200 --> 00:27:29,679
current stack pointer value and then

693
00:27:29,679 --> 00:27:32,159
jumping back into the into the stack

694
00:27:32,159 --> 00:27:33,279
where our

695
00:27:33,279 --> 00:27:35,440
final shell code lies

696
00:27:35,440 --> 00:27:36,720
so we could

697
00:27:36,720 --> 00:27:39,360
in fact put an arbitrary side shell code

698
00:27:39,360 --> 00:27:41,919
in the stack and jump to it

699
00:27:41,919 --> 00:27:43,840
a little discretion here while

700
00:27:43,840 --> 00:27:45,840
exploiting this very narrow ability we

701
00:27:45,840 --> 00:27:48,080
also implemented the recovery of

702
00:27:48,080 --> 00:27:50,799
usernames and cleartext password on ilo

703
00:27:50,799 --> 00:27:52,960
which will be useful in retest in red

704
00:27:52,960 --> 00:27:55,120
teams

705
00:27:55,120 --> 00:27:57,039
so back to our business using the

706
00:27:57,039 --> 00:27:59,679
vulnerability we were able to read again

707
00:27:59,679 --> 00:28:00,880
the

708
00:28:00,880 --> 00:28:03,200
hardware register values and all the

709
00:28:03,200 --> 00:28:05,120
values we weared were exactly the same

710
00:28:05,120 --> 00:28:07,039
as in older firmwares

711
00:28:07,039 --> 00:28:09,840
so what we did next was uh directly

712
00:28:09,840 --> 00:28:12,080
ripping code from keymanager so we

713
00:28:12,080 --> 00:28:14,399
splitted the

714
00:28:14,399 --> 00:28:17,279
the code in two blocks and we executed

715
00:28:17,279 --> 00:28:19,679
it through the vulnerability and finally

716
00:28:19,679 --> 00:28:22,399
we dumped the uh cryptoprocessor output

717
00:28:22,399 --> 00:28:25,520
buffer to compare the values with our

718
00:28:25,520 --> 00:28:27,440
implementation

719
00:28:27,440 --> 00:28:31,600
and values were exactly the same

720
00:28:31,600 --> 00:28:34,000
so now we had a new theory which was

721
00:28:34,000 --> 00:28:36,799
that um our execution context when

722
00:28:36,799 --> 00:28:38,960
exploiting the vulnerability was in fact

723
00:28:38,960 --> 00:28:41,440
different from the key manager context

724
00:28:41,440 --> 00:28:44,399
so we now have to kind of instrument key

725
00:28:44,399 --> 00:28:47,760
manager to understand where we failed

726
00:28:47,760 --> 00:28:49,279
to do so

727
00:28:49,279 --> 00:28:52,320
we in fact reused our secure boot bypass

728
00:28:52,320 --> 00:28:55,279
we we found earlier so the goal was to

729
00:28:55,279 --> 00:28:57,360
create a modified vmwares and add some

730
00:28:57,360 --> 00:29:00,799
hooks to understand our mistakes

731
00:29:00,799 --> 00:29:03,440
the security bypass

732
00:29:03,440 --> 00:29:06,080
in fact allows us to load a modified

733
00:29:06,080 --> 00:29:08,320
userland image using

734
00:29:08,320 --> 00:29:11,120
an older vulnerable blue chain so

735
00:29:11,120 --> 00:29:13,840
including the the bootloaders and an

736
00:29:13,840 --> 00:29:16,320
older kernel so the plan was to load a

737
00:29:16,320 --> 00:29:18,000
modified key manager with an old

738
00:29:18,000 --> 00:29:19,760
vulnerable kernel

739
00:29:19,760 --> 00:29:21,360
so when we first

740
00:29:21,360 --> 00:29:23,360
built this firmware

741
00:29:23,360 --> 00:29:24,720
we used

742
00:29:24,720 --> 00:29:27,520
an unmodified key manager and the the

743
00:29:27,520 --> 00:29:30,880
ilo 5 booted and displayed the same key

744
00:29:30,880 --> 00:29:32,720
schedule validation as in a normal boot

745
00:29:32,720 --> 00:29:34,080
which is very good

746
00:29:34,080 --> 00:29:36,159
and if we apply some minor modifications

747
00:29:36,159 --> 00:29:37,840
to the task for example modifying a

748
00:29:37,840 --> 00:29:40,080
string it will still boot so we are now

749
00:29:40,080 --> 00:29:42,640
able to uh modify the task to understand

750
00:29:42,640 --> 00:29:45,360
where we failed

751
00:29:45,600 --> 00:29:46,480
um

752
00:29:46,480 --> 00:29:49,039
how can we flash an arbitrary firmware

753
00:29:49,039 --> 00:29:51,279
nylo we have two solutions either with a

754
00:29:51,279 --> 00:29:53,200
vulnerability in the

755
00:29:53,200 --> 00:29:56,559
in the firmware uh but it will need us

756
00:29:56,559 --> 00:29:58,559
to reflash a valid firmware each time we

757
00:29:58,559 --> 00:30:00,720
wanted to flash a modified one either

758
00:30:00,720 --> 00:30:02,480
through hardware in fact we can directly

759
00:30:02,480 --> 00:30:05,120
interface with the spi flash and write

760
00:30:05,120 --> 00:30:07,440
our firmware so that's what we did it

761
00:30:07,440 --> 00:30:10,799
was easier and faster for us

762
00:30:11,760 --> 00:30:13,520
about the hook

763
00:30:13,520 --> 00:30:17,200
we in fact just put a simple printf in

764
00:30:17,200 --> 00:30:20,000
the middle of the derivation

765
00:30:20,000 --> 00:30:22,960
derivation scheme uh so

766
00:30:22,960 --> 00:30:24,960
how our oak

767
00:30:24,960 --> 00:30:27,360
was placed just after the derivations

768
00:30:27,360 --> 00:30:29,120
was computed and just before the first

769
00:30:29,120 --> 00:30:31,919
stage of the key schedule uh

770
00:30:31,919 --> 00:30:34,240
the key scheduling algorithm

771
00:30:34,240 --> 00:30:37,200
and we jumped the uh derivation sheet

772
00:30:37,200 --> 00:30:40,320
value encoded in by 64 on the uart so

773
00:30:40,320 --> 00:30:42,159
when we booted the server we get this

774
00:30:42,159 --> 00:30:44,240
string on the uart

775
00:30:44,240 --> 00:30:46,799
so we were able to compare it to our

776
00:30:46,799 --> 00:30:49,120
implementation

777
00:30:49,120 --> 00:30:51,520
and when we performed the comparison we

778
00:30:51,520 --> 00:30:54,000
saw that only four bytes were changing

779
00:30:54,000 --> 00:30:56,480
which is very well because this value is

780
00:30:56,480 --> 00:31:00,720
supposed to be a sha 384 hash and when

781
00:31:00,720 --> 00:31:02,320
only a few bytes change in a hash

782
00:31:02,320 --> 00:31:05,440
there's something really weird

783
00:31:05,440 --> 00:31:08,399
so we looked closer at the key manager

784
00:31:08,399 --> 00:31:11,039
code and we saw that in fact

785
00:31:11,039 --> 00:31:13,200
when computing the final digest there

786
00:31:13,200 --> 00:31:15,519
were no use of a synchronization

787
00:31:15,519 --> 00:31:18,320
mechanism between ilo and its crypto

788
00:31:18,320 --> 00:31:21,039
processor which means that the copy loop

789
00:31:21,039 --> 00:31:23,679
starts before in fact before the crypto

790
00:31:23,679 --> 00:31:26,480
processor ends is hash computing so it

791
00:31:26,480 --> 00:31:29,120
starts coping some values from an

792
00:31:29,120 --> 00:31:31,519
intermediary state

793
00:31:31,519 --> 00:31:34,480
we could check this theory by using a

794
00:31:34,480 --> 00:31:36,720
shy implementation in python and by

795
00:31:36,720 --> 00:31:39,519
adding a print of the intermediary state

796
00:31:39,519 --> 00:31:41,760
just before the final digest and we can

797
00:31:41,760 --> 00:31:44,399
see that we the first four bytes of the

798
00:31:44,399 --> 00:31:46,399
intermediary state are the bytes we

799
00:31:46,399 --> 00:31:50,239
found in uh in the buffer with them

800
00:31:50,480 --> 00:31:52,960
so we got our final bug and then we

801
00:31:52,960 --> 00:31:55,279
implemented it in our decryption tool

802
00:31:55,279 --> 00:31:58,399
and then it worked so now we are able to

803
00:31:58,399 --> 00:32:00,080
decrypt the first envelope of the

804
00:32:00,080 --> 00:32:02,720
firmware but also the user land image

805
00:32:02,720 --> 00:32:05,519
and then we analyzed quickly this

806
00:32:05,519 --> 00:32:07,760
useless image were four new tasks and

807
00:32:07,760 --> 00:32:09,919
only a few differences so we were like

808
00:32:09,919 --> 00:32:11,840
well that for this

809
00:32:11,840 --> 00:32:14,080
but anyway the tool is now available on

810
00:32:14,080 --> 00:32:16,640
our github repository and the community

811
00:32:16,640 --> 00:32:18,640
could start using it to

812
00:32:18,640 --> 00:32:22,159
check new new ilo versions

813
00:32:22,159 --> 00:32:23,600
yeah so we spent so much time

814
00:32:23,600 --> 00:32:25,279
understanding this last bug that we are

815
00:32:25,279 --> 00:32:27,760
still quite happy and very happy to

816
00:32:27,760 --> 00:32:29,600
restore our balance to the force

817
00:32:29,600 --> 00:32:31,679
and more seriously we really believe

818
00:32:31,679 --> 00:32:34,880
that we all rocks nikolai's work and the

819
00:32:34,880 --> 00:32:37,600
works of many users have helped to

820
00:32:37,600 --> 00:32:39,200
increase the security level and

821
00:32:39,200 --> 00:32:42,159
awareness about il5 system

822
00:32:42,159 --> 00:32:43,840
so that's why the firmware analysis

823
00:32:43,840 --> 00:32:45,840
capability is really important for the

824
00:32:45,840 --> 00:32:47,120
community

825
00:32:47,120 --> 00:32:49,519
regarding the firmware encryption itself

826
00:32:49,519 --> 00:32:52,159
it has in our opinion an unclear added

827
00:32:52,159 --> 00:32:54,640
value for the end users because as we

828
00:32:54,640 --> 00:32:57,519
showed here attackers are able to

829
00:32:57,519 --> 00:33:01,200
extract the keys exactly like we did

830
00:33:01,200 --> 00:33:03,120
the implementation is particularly

831
00:33:03,120 --> 00:33:06,159
complex we find for something that is

832
00:33:06,159 --> 00:33:07,039
not

833
00:33:07,039 --> 00:33:09,200
that should be much more simpler there

834
00:33:09,200 --> 00:33:12,399
is no use of a real secure element and

835
00:33:12,399 --> 00:33:16,000
the buggy usage of the cryptoprocessor

836
00:33:16,000 --> 00:33:18,399
we can only make the hypothesis that the

837
00:33:18,399 --> 00:33:20,320
exact same bugs have been

838
00:33:20,320 --> 00:33:22,640
implemented in the hpe

839
00:33:22,640 --> 00:33:25,039
firmware production pipeline

840
00:33:25,039 --> 00:33:27,279
now if we speak more about the ilo5

841
00:33:27,279 --> 00:33:30,640
system and in itself we find again the

842
00:33:30,640 --> 00:33:33,120
same interesting weaknesses

843
00:33:33,120 --> 00:33:35,440
first of all the os primitives are two

844
00:33:35,440 --> 00:33:37,840
permissives exactly like the one we

845
00:33:37,840 --> 00:33:41,360
abused for regarding the memory mapping

846
00:33:41,360 --> 00:33:44,240
the seeker boot is broken we reused or

847
00:33:44,240 --> 00:33:45,840
exploit from

848
00:33:45,840 --> 00:33:48,240
2018 to build a frackenstein firmware

849
00:33:48,240 --> 00:33:50,159
which was perfectly functional to gain

850
00:33:50,159 --> 00:33:52,720
debug capabilities on the systems

851
00:33:52,720 --> 00:33:55,039
and also the complete lack of modern

852
00:33:55,039 --> 00:33:57,840
mitigation techniques

853
00:33:57,840 --> 00:34:00,240
make it simple by expecting a single

854
00:34:00,240 --> 00:34:02,240
variability to perform a complete

855
00:34:02,240 --> 00:34:06,600
takeover of the ilo5 systems

856
00:34:06,720 --> 00:34:09,440
we would like to remind you that ido 5

857
00:34:09,440 --> 00:34:11,520
systems are really critical systems so

858
00:34:11,520 --> 00:34:13,599
please keep them up to date

859
00:34:13,599 --> 00:34:15,918
make sure they are

860
00:34:15,918 --> 00:34:16,879
as

861
00:34:16,879 --> 00:34:19,599
not exposed too much isolate as much as

862
00:34:19,599 --> 00:34:20,560
possible

863
00:34:20,560 --> 00:34:23,040
and monitor them

864
00:34:23,040 --> 00:34:24,960
regarding the new vulnerability that we

865
00:34:24,960 --> 00:34:27,280
have talked about

866
00:34:27,280 --> 00:34:29,359
within this briefing there is an

867
00:34:29,359 --> 00:34:31,679
available fix by hpe which has been

868
00:34:31,679 --> 00:34:35,520
released in march 2021 and you can have

869
00:34:35,520 --> 00:34:36,960
more information in the security

870
00:34:36,960 --> 00:34:40,320
building that is rated as critical

871
00:34:40,320 --> 00:34:42,239
so before we close this talk we would

872
00:34:42,239 --> 00:34:43,599
like to thank

873
00:34:43,599 --> 00:34:47,280
mark mancus and hold the hpe psrt for

874
00:34:47,280 --> 00:34:49,119
their activity

875
00:34:49,119 --> 00:34:51,199
we would like also to thank our teams at

876
00:34:51,199 --> 00:34:53,440
synaptive and airbus for their very

877
00:34:53,440 --> 00:34:55,839
valuable feedbacks during this research

878
00:34:55,839 --> 00:34:57,839
nikolayos as well for presenting his

879
00:34:57,839 --> 00:35:01,040
work and publishing his its tools

880
00:35:01,040 --> 00:35:02,640
failing xavier for the help with the

881
00:35:02,640 --> 00:35:05,839
server initial move

882
00:35:06,079 --> 00:35:07,839
so thank you very much for attending

883
00:35:07,839 --> 00:35:09,119
this briefing

884
00:35:09,119 --> 00:35:10,960
we'll be very happy to join you for the

885
00:35:10,960 --> 00:35:12,240
q a session

886
00:35:12,240 --> 00:35:15,799
thank you for your attention

