1
00:00:00,000 --> 00:00:05,130
okay we'll go ahead get started good

2
00:00:02,639 --> 00:00:07,949
morning I'm Greg panty this is Sergei

3
00:00:05,130 --> 00:00:10,530
brightest and we've been taking<font color="#CCCCCC"> very</font>

4
00:00:07,950 --> 00:00:13,410
hard look at inside binaries inside

5
00:00:10,530 --> 00:00:17,189
binary objects whether they be memory

6
00:00:13,410 --> 00:00:19,350
memory dumps files file systems anywhere

7
00:00:17,190 --> 00:00:21,359
we find zeros and ones and what we found

8
00:00:19,350 --> 00:00:24,480
is a great deal structure a great

9
00:00:21,359 --> 00:00:27,300
diversity of binary species and I think

10
00:00:24,480 --> 00:00:28,680
<font color="#CCCCCC">the understanding</font><font color="#E5E5E5"> of that will help you</font>

11
00:00:27,300 --> 00:00:32,369
whether your forensics engineer

12
00:00:28,680 --> 00:00:34,469
<font color="#CCCCCC">reverse-engineer a fuzzer or security</font>

13
00:00:32,369 --> 00:00:37,440
researcher in general understanding the

14
00:00:34,469 --> 00:00:39,600
mood the building blocks of of these

15
00:00:37,440 --> 00:00:42,329
binary objects something that's between

16
00:00:39,600 --> 00:00:44,879
the data type you know in sand lungs and

17
00:00:42,329 --> 00:00:47,160
cars and<font color="#E5E5E5"> all that and the object itself</font>

18
00:00:44,879 --> 00:00:50,399
you know<font color="#CCCCCC"> a word document a binary word</font>

19
00:00:47,160 --> 00:00:52,739
document or something so we're<font color="#E5E5E5"> going to</font>

20
00:00:50,399 --> 00:00:54,690
focus we've tried<font color="#CCCCCC"> to document as many of</font>

21
00:00:52,739 --> 00:00:57,449
these types as possible put them into

22
00:00:54,690 --> 00:01:00,059
categories we have ways in the talk to

23
00:00:57,449 --> 00:01:03,210
visually identify them as well as

24
00:01:00,059 --> 00:01:07,140
statistically to identify them so<font color="#E5E5E5"> it can</font>

25
00:01:03,210 --> 00:01:08,580
ideally be up automated and the<font color="#CCCCCC"> ultimate</font>

26
00:01:07,140 --> 00:01:11,369
<font color="#E5E5E5">goal is to help you do your your jobs</font>

27
00:01:08,580 --> 00:01:14,220
better speed speed analysis gain insight

28
00:01:11,369 --> 00:01:17,460
well I have a<font color="#CCCCCC"> bit of a personal history</font>

29
00:01:14,220 --> 00:01:23,039
here greg<font color="#E5E5E5"> was the one who</font><font color="#CCCCCC"> put me up to</font>

30
00:01:17,460 --> 00:01:27,089
it he got me<font color="#CCCCCC"> interested in visualization</font>

31
00:01:23,040 --> 00:01:29,640
in leveraging the power of just the

32
00:01:27,090 --> 00:01:33,509
naked eye when looking<font color="#CCCCCC"> at the bits</font>

33
00:01:29,640 --> 00:01:35,310
because when you get to see those<font color="#E5E5E5"> bits</font>

34
00:01:33,509 --> 00:01:37,470
flying while scrolling by on the screen

35
00:01:35,310 --> 00:01:39,270
you<font color="#E5E5E5"> is sort of kind of see the patterns</font>

36
00:01:37,470 --> 00:01:41,640
and you<font color="#CCCCCC"> actually get to recognize the</font>

37
00:01:39,270 --> 00:01:44,460
patterns and if you shift<font color="#E5E5E5"> the data</font>

38
00:01:41,640 --> 00:01:47,820
around then you<font color="#E5E5E5"> see the patterns in the</font>

39
00:01:44,460 --> 00:01:50,669
shifting but all<font color="#CCCCCC"> of</font><font color="#E5E5E5"> this is</font>

40
00:01:47,820 --> 00:01:53,669
tantalizingly close and yet really hard

41
00:01:50,670 --> 00:01:57,420
to actually use so what we're<font color="#CCCCCC"> trying to</font>

42
00:01:53,670 --> 00:02:00,420
present today is a ways<font color="#CCCCCC"> to actually make</font>

43
00:01:57,420 --> 00:02:04,079
it simpler and isolate a few visual

44
00:02:00,420 --> 00:02:08,670
primitives that will hopefully tell

45
00:02:04,079 --> 00:02:12,030
something useful about a piece of a

46
00:02:08,669 --> 00:02:12,929
<font color="#E5E5E5">binary at the glance and give you a</font>

47
00:02:12,030 --> 00:02:16,469
reference

48
00:02:12,930 --> 00:02:18,390
as to what this thing might be you know

49
00:02:16,469 --> 00:02:21,060
it's not something<font color="#CCCCCC"> that you wouldn't be</font>

50
00:02:18,390 --> 00:02:24,599
<font color="#E5E5E5">able</font><font color="#CCCCCC"> to do with more advanced tools or</font>

51
00:02:21,060 --> 00:02:26,549
special scripts<font color="#E5E5E5"> but those things will</font>

52
00:02:24,599 --> 00:02:28,619
cost you those things<font color="#E5E5E5"> will cost you at</font>

53
00:02:26,549 --> 00:02:31,290
the time to run them the time to

54
00:02:28,620 --> 00:02:34,500
<font color="#CCCCCC">pre-process the data here the idea is to</font>

55
00:02:31,290 --> 00:02:38,010
<font color="#CCCCCC">have a visual cue that's just right</font>

56
00:02:34,500 --> 00:02:41,760
there and to switch between those visual

57
00:02:38,010 --> 00:02:43,260
cues very very<font color="#CCCCCC"> fast okay good</font><font color="#E5E5E5"> for bonus</font>

58
00:02:41,760 --> 00:02:46,980
points who's the who's the picture the

59
00:02:43,260 --> 00:02:50,429
bug-eyed man in the picture Charles

60
00:02:46,980 --> 00:02:53,010
Darwin very good they had some<font color="#E5E5E5"> great</font>

61
00:02:50,430 --> 00:02:57,239
photographs so this is<font color="#CCCCCC"> my disclaimer</font>

62
00:02:53,010 --> 00:02:58,950
does anyone read rot13 natively I know

63
00:02:57,239 --> 00:03:03,480
no one reads it anyway<font color="#E5E5E5"> so I thought I'd</font>

64
00:02:58,950 --> 00:03:06,030
make it rot13 a it does<font color="#E5E5E5"> Matt kit so</font>

65
00:03:03,480 --> 00:03:07,048
anyway we're<font color="#CCCCCC"> here as free citizens and</font>

66
00:03:06,030 --> 00:03:10,139
not the representatives of their

67
00:03:07,049 --> 00:03:13,200
employers so we're going<font color="#E5E5E5"> to be using</font>

68
00:03:10,139 --> 00:03:16,290
<font color="#E5E5E5">several visualizations this one most of</font>

69
00:03:13,200 --> 00:03:20,459
all if you think of any binary object

70
00:03:16,290 --> 00:03:23,849
whether it be memory network flow a file

71
00:03:20,459 --> 00:03:26,519
file system it consists of<font color="#E5E5E5"> number zeros</font>

72
00:03:23,849 --> 00:03:28,228
and ones or bytes so<font color="#CCCCCC"> if you think</font><font color="#E5E5E5"> of</font>

73
00:03:26,519 --> 00:03:33,870
<font color="#E5E5E5">that sequence of bytes in this example</font>

74
00:03:28,229 --> 00:03:37,169
25 510 842 on and you plot those into a

75
00:03:33,870 --> 00:03:38,729
graphical a window from left to right so

76
00:03:37,169 --> 00:03:40,949
the first byte in the files the<font color="#E5E5E5"> top left</font>

77
00:03:38,729 --> 00:03:43,889
corner<font color="#E5E5E5"> the second bite in the file is</font>

78
00:03:40,949 --> 00:03:46,709
the next bite to the right and the third

79
00:03:43,889 --> 00:03:49,109
bite and so on and what we've done is

80
00:03:46,709 --> 00:03:53,310
mapped the color for<font color="#E5E5E5"> the gray scale to</font>

81
00:03:49,109 --> 00:03:54,930
the byte value so 0 is black 255 is

82
00:03:53,310 --> 00:03:57,540
bright white other byte values<font color="#E5E5E5"> are</font>

83
00:03:54,930 --> 00:03:58,709
shades in between and the<font color="#CCCCCC"> advantage</font>

84
00:03:57,540 --> 00:04:00,750
there's you can play with<font color="#E5E5E5"> these color</font>

85
00:03:58,709 --> 00:04:02,849
mappings and do all sorts<font color="#CCCCCC"> of things but</font>

86
00:04:00,750 --> 00:04:05,579
the idea is this allows you when you

87
00:04:02,849 --> 00:04:08,189
compare a hex editors window to a

88
00:04:05,579 --> 00:04:10,650
graphical window you you can see about

89
00:04:08,189 --> 00:04:12,720
three hundred times more information at

90
00:04:10,650 --> 00:04:16,380
least in a graphical way<font color="#E5E5E5"> obviously</font>

91
00:04:12,720 --> 00:04:18,029
excited or shows in a textual I but that

92
00:04:16,380 --> 00:04:19,589
allows you to<font color="#E5E5E5"> see the structure so let's</font>

93
00:04:18,029 --> 00:04:23,369
take a look so this<font color="#CCCCCC"> is a Word document</font>

94
00:04:19,589 --> 00:04:24,440
I've snipped out ten MiG's in the middle

95
00:04:23,370 --> 00:04:28,460
because

96
00:04:24,440 --> 00:04:31,130
it's well<font color="#E5E5E5"> I'll walk through so at the</font>

97
00:04:28,460 --> 00:04:34,070
top that's where a word 2003 document

98
00:04:31,130 --> 00:04:37,010
that's<font color="#E5E5E5"> what ASCII text looks like the</font>

99
00:04:34,070 --> 00:04:38,990
next region is a data structure and then

100
00:04:37,010 --> 00:04:42,440
the the<font color="#CCCCCC"> white noise area in the middle</font>

101
00:04:38,990 --> 00:04:45,230
<font color="#CCCCCC">is the Newton several compressed images</font>

102
00:04:42,440 --> 00:04:47,180
and if you<font color="#E5E5E5"> look where that black line in</font>

103
00:04:45,230 --> 00:04:48,560
the middle<font color="#E5E5E5"> the actual header the data</font>

104
00:04:47,180 --> 00:04:51,200
structure that's the header for each

105
00:04:48,560 --> 00:04:53,390
embedded image is is visible between

106
00:04:51,200 --> 00:04:55,940
them and then at the<font color="#CCCCCC"> end you see other</font>

107
00:04:53,390 --> 00:04:57,860
structure and for example<font color="#CCCCCC"> that there's</font>

108
00:04:55,940 --> 00:04:59,960
table of<font color="#E5E5E5"> Unicode URLs that are in the</font>

109
00:04:57,860 --> 00:05:03,230
document and other data structures in

110
00:04:59,960 --> 00:05:04,310
there the idea being and it goes<font color="#CCCCCC"> back to</font>

111
00:05:03,230 --> 00:05:06,470
<font color="#CCCCCC">what I</font><font color="#E5E5E5"> said beginning that there's</font>

112
00:05:04,310 --> 00:05:08,570
integers and Long's and cars<font color="#E5E5E5"> and then</font>

113
00:05:06,470 --> 00:05:10,340
there's word documents but really these

114
00:05:08,570 --> 00:05:15,320
things these jar files these other these

115
00:05:10,340 --> 00:05:17,150
executables are all built upon these

116
00:05:15,320 --> 00:05:18,830
primitive fragments these primitive

117
00:05:17,150 --> 00:05:21,020
types that's what we're calling them

118
00:05:18,830 --> 00:05:23,599
things that<font color="#E5E5E5"> are bigger than the basic</font>

119
00:05:21,020 --> 00:05:27,740
programming data type but smaller than

120
00:05:23,600 --> 00:05:32,900
say a container object and let's<font color="#CCCCCC"> just</font>

121
00:05:27,740 --> 00:05:34,550
look at an example so this tool should

122
00:05:32,900 --> 00:05:37,640
be on we submitted it should be on your

123
00:05:34,550 --> 00:05:41,510
<font color="#E5E5E5">CD although we have not checked and it</font>

124
00:05:37,640 --> 00:05:43,700
allows you to load the file and and

125
00:05:41,510 --> 00:05:48,320
bring it<font color="#E5E5E5"> up so here this is shell32.dll</font>

126
00:05:43,700 --> 00:05:50,990
and you can adjust the width as you see

127
00:05:48,320 --> 00:05:52,880
fit and it'll it'll resize it so because

128
00:05:50,990 --> 00:05:55,820
so if you can get<font color="#CCCCCC"> to like an offset that</font>

129
00:05:52,880 --> 00:05:58,490
makes or a window<font color="#E5E5E5"> size that makes sense</font>

130
00:05:55,820 --> 00:05:59,960
like the different data structures in

131
00:05:58,490 --> 00:06:02,600
there and then you can play through it

132
00:05:59,960 --> 00:06:04,460
and see<font color="#CCCCCC"> the various structures at this</font>

133
00:06:02,600 --> 00:06:06,320
point<font color="#E5E5E5"> in the talk don't worry</font><font color="#CCCCCC"> about what</font>

134
00:06:04,460 --> 00:06:08,840
<font color="#E5E5E5">these structures are we're going to go</font>

135
00:06:06,320 --> 00:06:10,669
through through that but the idea being

136
00:06:08,840 --> 00:06:15,080
just that there are numerous structures

137
00:06:10,669 --> 00:06:16,430
inside inside a file and it's good don't

138
00:06:15,080 --> 00:06:19,159
know<font color="#E5E5E5"> what they are and know what they</font>

139
00:06:16,430 --> 00:06:22,430
look<font color="#E5E5E5"> like and so on and then you can</font>

140
00:06:19,160 --> 00:06:24,200
scroll through and so on so<font color="#E5E5E5"> anyway yes</font>

141
00:06:22,430 --> 00:06:28,010
<font color="#E5E5E5">okay so if I may jump in at this point</font>

142
00:06:24,200 --> 00:06:30,740
<font color="#E5E5E5">um it's really</font><font color="#CCCCCC"> interesting how the</font>

143
00:06:28,010 --> 00:06:33,560
structure of binary files is being

144
00:06:30,740 --> 00:06:36,000
completely ignored everywhere you<font color="#E5E5E5"> go to</font>

145
00:06:33,560 --> 00:06:40,410
get an<font color="#E5E5E5"> undergrad</font><font color="#CCCCCC"> UCS education</font>

146
00:06:36,000 --> 00:06:43,830
so how many different<font color="#E5E5E5"> sections do you</font>

147
00:06:40,410 --> 00:06:47,670
expect to<font color="#CCCCCC"> find in your typical unix</font>

148
00:06:43,830 --> 00:06:52,200
utility which one two three four<font color="#E5E5E5"> five</font>

149
00:06:47,670 --> 00:06:59,730
you<font color="#E5E5E5"> meet alpha right oh yeah um let's</font>

150
00:06:52,200 --> 00:07:03,960
let's say<font color="#E5E5E5"> elf right ah 32 thank you</font>

151
00:06:59,730 --> 00:07:10,710
<font color="#CCCCCC">Sergey to these are 32 so obviously</font>

152
00:07:03,960 --> 00:07:15,210
there is text and data and some sort of

153
00:07:10,710 --> 00:07:17,940
<font color="#E5E5E5">a header right so you can find</font><font color="#CCCCCC"> for quite</font>

154
00:07:15,210 --> 00:07:20,400
easily but in fact if you look from

155
00:07:17,940 --> 00:07:23,100
section to section if you look<font color="#E5E5E5"> at</font><font color="#CCCCCC"> the</font>

156
00:07:20,400 --> 00:07:25,979
section table in the modern 32 bit mushy

157
00:07:23,100 --> 00:07:29,040
for bit machine you<font color="#E5E5E5"> will find about</font>

158
00:07:25,980 --> 00:07:32,250
thirty two sections in there some of

159
00:07:29,040 --> 00:07:36,120
those are symbol tables the<font color="#E5E5E5"> dynamic</font>

160
00:07:32,250 --> 00:07:38,400
symbol tables account for at least<font color="#E5E5E5"> 10</font><font color="#CCCCCC"> of</font>

161
00:07:36,120 --> 00:07:40,800
those sections all the sections<font color="#E5E5E5"> that</font>

162
00:07:38,400 --> 00:07:43,799
work together to give the dynamic linker

163
00:07:40,800 --> 00:07:46,470
that which it uses to link in the

164
00:07:43,800 --> 00:07:49,950
<font color="#E5E5E5">libraries the symbol table the string</font>

165
00:07:46,470 --> 00:07:51,780
table so some of the<font color="#CCCCCC"> ASCII that you see</font>

166
00:07:49,950 --> 00:07:55,440
as<font color="#CCCCCC"> you're scrolling there and as you</font>

167
00:07:51,780 --> 00:07:59,460
will see with the bin<font color="#E5E5E5"> viz tool then</font>

168
00:07:55,440 --> 00:08:02,880
possibly even a hash table for low cops

169
00:07:59,460 --> 00:08:04,830
but there are 32 different kinds<font color="#E5E5E5"> of data</font>

170
00:08:02,880 --> 00:08:09,000
that<font color="#CCCCCC"> are different</font><font color="#E5E5E5"> enough semantically</font>

171
00:08:04,830 --> 00:08:10,380
that they have a an entry into the table

172
00:08:09,000 --> 00:08:15,150
<font color="#E5E5E5">for their own just think about that</font>

173
00:08:10,380 --> 00:08:17,640
right<font color="#E5E5E5"> and they are well some of them are</font>

174
00:08:15,150 --> 00:08:20,190
code some of them are code that only

175
00:08:17,640 --> 00:08:21,840
works with this little bit of<font color="#E5E5E5"> data like</font>

176
00:08:20,190 --> 00:08:24,210
the procedure linkage table that works

177
00:08:21,840 --> 00:08:27,330
with the global of sub table and the

178
00:08:24,210 --> 00:08:31,109
dynamic linker stitches us up when one

179
00:08:27,330 --> 00:08:34,559
<font color="#E5E5E5">called but there is a lot of diversity</font>

180
00:08:31,110 --> 00:08:38,070
even within a single executable file

181
00:08:34,559 --> 00:08:40,859
there will<font color="#E5E5E5"> be even more in the memory</font>

182
00:08:38,070 --> 00:08:45,570
image when<font color="#E5E5E5"> that file is loaded and</font>

183
00:08:40,860 --> 00:08:48,330
executing so just have some other

184
00:08:45,570 --> 00:08:49,560
examples this is a jar file and again

185
00:08:48,330 --> 00:08:51,390
don't<font color="#CCCCCC"> worry about</font><font color="#E5E5E5"> the what</font>

186
00:08:49,560 --> 00:08:55,199
<font color="#CCCCCC">the structures are just note that there</font>

187
00:08:51,390 --> 00:08:56,819
<font color="#CCCCCC">are different ones this is an executable</font>

188
00:08:55,200 --> 00:08:58,830
that<font color="#E5E5E5"> Sergei was just</font><font color="#CCCCCC"> asked us we can</font>

189
00:08:56,820 --> 00:09:03,000
actually<font color="#E5E5E5"> see we can actually see some of</font>

190
00:08:58,830 --> 00:09:08,940
<font color="#E5E5E5">those sections right here so this is the</font>

191
00:09:03,000 --> 00:09:13,620
<font color="#E5E5E5">elf header what comes next is the</font>

192
00:09:08,940 --> 00:09:17,850
section table it's right<font color="#E5E5E5"> there in and</font>

193
00:09:13,620 --> 00:09:21,360
it's uh well its offsets into the file a

194
00:09:17,850 --> 00:09:24,900
pack close together then you will see

195
00:09:21,360 --> 00:09:26,760
you will<font color="#E5E5E5"> see a code and you will see</font>

196
00:09:24,900 --> 00:09:29,040
data and hopefully<font color="#CCCCCC"> you know most</font><font color="#E5E5E5"> of this</font>

197
00:09:26,760 --> 00:09:33,420
is code but there<font color="#E5E5E5"> are there</font><font color="#CCCCCC"> are also</font>

198
00:09:29,040 --> 00:09:35,819
strings that go into dynamically linking

199
00:09:33,420 --> 00:09:38,250
the file and there are all sorts of

200
00:09:35,820 --> 00:09:40,890
versioning information and if your

201
00:09:38,250 --> 00:09:43,020
executable is not stripped then there

202
00:09:40,890 --> 00:09:43,949
<font color="#E5E5E5">are a symbol there is a symbol table and</font>

203
00:09:43,020 --> 00:09:46,710
other kind<font color="#E5E5E5"> of debugging information</font>

204
00:09:43,950 --> 00:09:49,560
closer to the end but all<font color="#E5E5E5"> of those</font>

205
00:09:46,710 --> 00:09:52,770
things<font color="#E5E5E5"> I mean these are these 32 32</font>

206
00:09:49,560 --> 00:09:56,910
sections laid out and you can<font color="#E5E5E5"> actually</font>

207
00:09:52,770 --> 00:09:58,650
<font color="#E5E5E5">make them out very easily and you can</font>

208
00:09:56,910 --> 00:10:02,310
actually<font color="#CCCCCC"> make them out even more easily</font>

209
00:09:58,650 --> 00:10:05,189
before the file has<font color="#E5E5E5"> been linked together</font>

210
00:10:02,310 --> 00:10:06,780
because you've got<font color="#E5E5E5"> e runs of zeros where</font>

211
00:10:05,190 --> 00:10:13,710
the addresses of the functions would go

212
00:10:06,780 --> 00:10:15,510
so and in the same goes for system

213
00:10:13,710 --> 00:10:18,089
memory this is from<font color="#CCCCCC"> the</font><font color="#E5E5E5"> digital</font>

214
00:10:15,510 --> 00:10:20,400
forensics we research workshop data set

215
00:10:18,089 --> 00:10:22,470
that they released this year it's a sony

216
00:10:20,400 --> 00:10:25,680
ericsson k800 it's just a snippet from

217
00:10:22,470 --> 00:10:27,690
memory and even network traffic right so

218
00:10:25,680 --> 00:10:29,640
<font color="#E5E5E5">this is a bite plot but except that it</font>

219
00:10:27,690 --> 00:10:31,530
only showed it shows one packet per line

220
00:10:29,640 --> 00:10:33,360
and kind<font color="#E5E5E5"> of does a carriage return so</font>

221
00:10:31,530 --> 00:10:35,490
the long lines were large packets the

222
00:10:33,360 --> 00:10:39,959
short lines or small packets but<font color="#E5E5E5"> again</font>

223
00:10:35,490 --> 00:10:41,910
this structure exists and that we argue

224
00:10:39,959 --> 00:10:43,589
the current tools things like<font color="#CCCCCC"> grape and</font>

225
00:10:41,910 --> 00:10:46,199
strings hex editors for this general

226
00:10:43,589 --> 00:10:47,610
purpose problem just<font color="#E5E5E5"> there insufficient</font>

227
00:10:46,200 --> 00:10:51,150
we can do better<font color="#E5E5E5"> and that's what we're</font>

228
00:10:47,610 --> 00:10:52,410
trying<font color="#E5E5E5"> to get at and alluded to this at</font>

229
00:10:51,150 --> 00:10:54,779
the beginning that you're going<font color="#E5E5E5"> to</font>

230
00:10:52,410 --> 00:10:56,850
encounter unknown unfamiliar structures

231
00:10:54,779 --> 00:11:00,150
typically you'll be looking at them in

232
00:10:56,850 --> 00:11:01,920
text and what we're trying<font color="#CCCCCC"> to do by</font>

233
00:11:00,150 --> 00:11:03,390
getting our arms<font color="#E5E5E5"> around all the various</font>

234
00:11:01,920 --> 00:11:05,550
types of<font color="#E5E5E5"> building blocks perimeter</font>

235
00:11:03,390 --> 00:11:08,310
types out there we can help facilitate

236
00:11:05,550 --> 00:11:10,380
<font color="#E5E5E5">deep understanding help you as a</font>

237
00:11:08,310 --> 00:11:13,079
<font color="#CCCCCC">reverser</font><font color="#E5E5E5"> as a fuzzer as a forensics</font>

238
00:11:10,380 --> 00:11:15,480
analyst and we're working<font color="#E5E5E5"> on something</font>

239
00:11:13,080 --> 00:11:17,550
called memory<font color="#E5E5E5"> mapping and the idea is if</font>

240
00:11:15,480 --> 00:11:20,160
you can<font color="#E5E5E5"> take if you can programmatically</font>

241
00:11:17,550 --> 00:11:21,870
identify each of these primitive types

242
00:11:20,160 --> 00:11:25,860
then you can<font color="#E5E5E5"> write a program that dumps</font>

243
00:11:21,870 --> 00:11:29,130
out and here's an example this is a

244
00:11:25,860 --> 00:11:31,680
memory map<font color="#E5E5E5"> not not say not the binary</font>

245
00:11:29,130 --> 00:11:38,100
mapping for bonus points what is this

246
00:11:31,680 --> 00:11:40,349
the memory map of Commodore I heard

247
00:11:38,100 --> 00:11:42,330
Commodore 64 this<font color="#CCCCCC"> Commodore 64 memory</font>

248
00:11:40,350 --> 00:11:48,810
map but it was<font color="#E5E5E5"> the intuition where youth</font>

249
00:11:42,330 --> 00:11:50,850
club a bit yes so the<font color="#CCCCCC"> odd</font><font color="#E5E5E5"> idea though</font>

250
00:11:48,810 --> 00:11:53,099
and are just so from that memory map to

251
00:11:50,850 --> 00:11:54,600
this<font color="#CCCCCC"> idea of binary mapping that if you</font>

252
00:11:53,100 --> 00:11:56,460
have the ability then if you understand

253
00:11:54,600 --> 00:11:58,500
what these fragment types are our

254
00:11:56,460 --> 00:12:01,410
primitive types are you can identify

255
00:11:58,500 --> 00:12:03,420
where they begin an end within a file

256
00:12:01,410 --> 00:12:05,610
and from there<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> toggle them on</font>

257
00:12:03,420 --> 00:12:07,979
and off<font color="#CCCCCC"> and say only show me text or I</font>

258
00:12:05,610 --> 00:12:10,350
<font color="#E5E5E5">don't care about text or show me</font><font color="#CCCCCC"> only</font>

259
00:12:07,980 --> 00:12:12,660
code or I don't<font color="#CCCCCC"> care about codons and</font>

260
00:12:10,350 --> 00:12:14,430
slice through<font color="#E5E5E5"> the file removing a layer</font>

261
00:12:12,660 --> 00:12:16,410
at a time of this unknown thing you're

262
00:12:14,430 --> 00:12:19,890
<font color="#E5E5E5">trying to analyze that's the idea</font>

263
00:12:16,410 --> 00:12:21,390
another idea is that you<font color="#E5E5E5"> can embed you</font>

264
00:12:19,890 --> 00:12:23,730
know we<font color="#E5E5E5"> get our arms around this we can</font>

265
00:12:21,390 --> 00:12:25,890
embed it in things like a hex editor or

266
00:12:23,730 --> 00:12:28,680
mocked up what you know there's a

267
00:12:25,890 --> 00:12:30,300
strings tab within within<font color="#E5E5E5"> Ida you could</font>

268
00:12:28,680 --> 00:12:32,550
have a compressed tab and encoded tab

269
00:12:30,300 --> 00:12:39,180
bitmap audio as you have this ability<font color="#E5E5E5"> to</font>

270
00:12:32,550 --> 00:12:41,609
identify these things this is a taxonomy

271
00:12:39,180 --> 00:12:44,520
it's the tree of programming languages

272
00:12:41,610 --> 00:12:45,990
<font color="#E5E5E5">and I thought it was very useful to just</font>

273
00:12:44,520 --> 00:12:47,819
show that we this thing could grow

274
00:12:45,990 --> 00:12:50,520
without bounds there's many many

275
00:12:47,820 --> 00:12:53,790
<font color="#E5E5E5">different interpretations or variations</font>

276
00:12:50,520 --> 00:12:55,829
of binary of primitive types so the<font color="#E5E5E5"> idea</font>

277
00:12:53,790 --> 00:12:57,510
then is we had to draw our arms<font color="#CCCCCC"> around</font>

278
00:12:55,830 --> 00:12:59,790
it in kind of scope what we did

279
00:12:57,510 --> 00:13:02,700
otherwise it would spiral off into this

280
00:12:59,790 --> 00:13:04,050
incredibly unsolvable problem so what

281
00:13:02,700 --> 00:13:06,690
we've done is<font color="#E5E5E5"> kind of defined the root</font>

282
00:13:04,050 --> 00:13:09,810
of the tree and of things that you're

283
00:13:06,690 --> 00:13:11,700
likely to encounter and went<font color="#CCCCCC"> into a</font>

284
00:13:09,810 --> 00:13:13,739
<font color="#E5E5E5">certain level of depth here and more</font>

285
00:13:11,700 --> 00:13:21,630
depth<font color="#CCCCCC"> in the white paper that we release</font>

286
00:13:13,740 --> 00:13:26,310
so<font color="#E5E5E5"> I would like to make a disclaimer</font>

287
00:13:21,630 --> 00:13:29,430
it's impossible by looking at a run of

288
00:13:26,310 --> 00:13:32,790
<font color="#E5E5E5">bytes to tell what those runs of by what</font>

289
00:13:29,430 --> 00:13:35,489
those bites are what they do what format

290
00:13:32,790 --> 00:13:38,189
they belong to<font color="#E5E5E5"> it's really really very</font>

291
00:13:35,490 --> 00:13:45,780
very<font color="#E5E5E5"> hard and you know it's probably</font>

292
00:13:38,190 --> 00:13:48,630
hard<font color="#E5E5E5"> okay however most of the time we</font>

293
00:13:45,780 --> 00:13:51,720
<font color="#CCCCCC">are not looking at those incredibly</font>

294
00:13:48,630 --> 00:13:53,790
disguised things such as shell code that

295
00:13:51,720 --> 00:13:55,860
is supposed to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> the English text such</font>

296
00:13:53,790 --> 00:14:01,740
a<font color="#E5E5E5"> thing has been done won't mention it</font>

297
00:13:55,860 --> 00:14:03,930
as we bow out but most of the time I you

298
00:14:01,740 --> 00:14:05,730
want to know what<font color="#CCCCCC"> the hell is it that</font>

299
00:14:03,930 --> 00:14:09,359
you're looking at is that<font color="#E5E5E5"> a compressed</font>

300
00:14:05,730 --> 00:14:12,330
stretch of bytes is that<font color="#E5E5E5"> something that</font>

301
00:14:09,360 --> 00:14:15,450
might be<font color="#E5E5E5"> a media is that something</font>

302
00:14:12,330 --> 00:14:18,000
that's likely to be code so you<font color="#CCCCCC"> know one</font>

303
00:14:15,450 --> 00:14:22,890
of the great things about Ida is that

304
00:14:18,000 --> 00:14:28,950
well its interactive right you get some

305
00:14:22,890 --> 00:14:33,390
heuristics to actually try to<font color="#E5E5E5"> guess what</font>

306
00:14:28,950 --> 00:14:37,500
a segment is and then if you didn't

307
00:14:33,390 --> 00:14:42,810
guess right you can annotate it as a

308
00:14:37,500 --> 00:14:46,260
code and you will have a disassembler

309
00:14:42,810 --> 00:14:48,329
run over it and do the smart thing but

310
00:14:46,260 --> 00:14:52,200
wouldn't<font color="#CCCCCC"> it be nice if you could</font><font color="#E5E5E5"> say</font>

311
00:14:48,330 --> 00:15:00,630
here is a something<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I think is</font>

312
00:14:52,200 --> 00:15:03,570
compressed with a gzip or with oh this

313
00:15:00,630 --> 00:15:05,970
or that a compressor or here is

314
00:15:03,570 --> 00:15:11,610
<font color="#E5E5E5">something that's just likely to be</font>

315
00:15:05,970 --> 00:15:14,580
encoded text can we detect the

316
00:15:11,610 --> 00:15:17,970
boundaries of that and so on and so

317
00:15:14,580 --> 00:15:25,380
forth and so it's really<font color="#CCCCCC"> just</font><font color="#E5E5E5"> about this</font>

318
00:15:17,970 --> 00:15:27,420
before we<font color="#CCCCCC"> got the DNA as the foundation</font>

319
00:15:25,380 --> 00:15:31,350
for classifying species

320
00:15:27,420 --> 00:15:35,069
all that an explorer could do was go out

321
00:15:31,350 --> 00:15:41,130
<font color="#E5E5E5">there catch an animal you</font><font color="#CCCCCC"> know check</font>

322
00:15:35,070 --> 00:15:46,680
it's a check it's a fruit or tail or

323
00:15:41,130 --> 00:15:49,770
beak and drag enough of those animals

324
00:15:46,680 --> 00:15:52,109
<font color="#E5E5E5">deck and tries to systematize what the</font>

325
00:15:49,770 --> 00:15:54,210
hell they were I mean<font color="#CCCCCC"> the whole idea of</font>

326
00:15:52,110 --> 00:15:56,970
the species started before Charles

327
00:15:54,210 --> 00:16:00,540
Darwin with carlos salinas and others

328
00:15:56,970 --> 00:16:02,790
but a very idea<font color="#CCCCCC"> that you know some of</font>

329
00:16:00,540 --> 00:16:08,370
those<font color="#E5E5E5"> things were not like the others</font>

330
00:16:02,790 --> 00:16:10,530
and yet similar so a descriptive nature

331
00:16:08,370 --> 00:16:14,760
of biology a descriptive nature of

332
00:16:10,530 --> 00:16:18,089
classifying species that<font color="#E5E5E5"> a playtest roll</font>

333
00:16:14,760 --> 00:16:22,290
it was useful it helped us understand

334
00:16:18,090 --> 00:16:24,690
deeper things about the species so here

335
00:16:22,290 --> 00:16:27,599
we<font color="#CCCCCC"> are right we've got all of those</font>

336
00:16:24,690 --> 00:16:30,360
<font color="#E5E5E5">little creatures some of them slimy some</font>

337
00:16:27,600 --> 00:16:33,930
of them warming is some of them you know

338
00:16:30,360 --> 00:16:36,330
with little arms and legs and<font color="#E5E5E5"> they're</font>

339
00:16:33,930 --> 00:16:40,439
crawling around in the binder ease and

340
00:16:36,330 --> 00:16:43,650
you pick one up and you look at<font color="#CCCCCC"> it right</font>

341
00:16:40,440 --> 00:16:46,710
and like what is<font color="#CCCCCC"> it how can you try to</font>

342
00:16:43,650 --> 00:16:49,560
classify quickly what it is now if

343
00:16:46,710 --> 00:16:53,100
you're a biologist right and you've

344
00:16:49,560 --> 00:16:55,920
caught yourself an animal well you know

345
00:16:53,100 --> 00:16:57,540
to go for the hooves right that will

346
00:16:55,920 --> 00:17:00,449
give you a large part of the

347
00:16:57,540 --> 00:17:03,930
<font color="#E5E5E5">classification already then you look at</font>

348
00:17:00,450 --> 00:17:07,290
the wealth not really not the tail then

349
00:17:03,930 --> 00:17:09,359
you look at some other distinguishing

350
00:17:07,290 --> 00:17:18,089
features and finally are you know I put

351
00:17:09,359 --> 00:17:21,419
myself a<font color="#E5E5E5"> camara but so you think</font><font color="#CCCCCC"> that</font>

352
00:17:18,089 --> 00:17:24,899
will enable this development we believe

353
00:17:21,420 --> 00:17:30,270
is a classification a dictionary of

354
00:17:24,900 --> 00:17:32,280
types and then you know once we assemble

355
00:17:30,270 --> 00:17:35,400
that<font color="#E5E5E5"> and with whole we have a whole</font>

356
00:17:32,280 --> 00:17:37,740
bunch of binary fragments from a whole

357
00:17:35,400 --> 00:17:40,850
bunch of<font color="#E5E5E5"> different types of files that</font>

358
00:17:37,740 --> 00:17:43,610
we think are

359
00:17:40,850 --> 00:17:48,530
a reasonable<font color="#E5E5E5"> first cut at such a</font>

360
00:17:43,610 --> 00:17:52,219
classification then we can apply<font color="#E5E5E5"> very</font>

361
00:17:48,530 --> 00:17:56,120
simple visual checks how many wings what

362
00:17:52,220 --> 00:18:00,799
<font color="#E5E5E5">length the beak split hoof or or wood</font>

363
00:17:56,120 --> 00:18:04,010
right so that is<font color="#E5E5E5"> the purpose</font><font color="#CCCCCC"> of what we</font>

364
00:18:00,799 --> 00:18:07,520
are going to<font color="#E5E5E5"> do and for that we need to</font>

365
00:18:04,010 --> 00:18:10,549
come to an agreement what<font color="#E5E5E5"> the primitive</font>

366
00:18:07,520 --> 00:18:15,500
type is so not something very wrong uh

367
00:18:10,549 --> 00:18:17,960
not something very short right not<font color="#CCCCCC"> just</font>

368
00:18:15,500 --> 00:18:19,460
your basic integer because how do you

369
00:18:17,960 --> 00:18:21,440
visually recognize an integer can

370
00:18:19,460 --> 00:18:24,590
visually recognize a small integer you

371
00:18:21,440 --> 00:18:26,299
can search for structs and memory that

372
00:18:24,590 --> 00:18:28,459
are known to contain small integers if

373
00:18:26,299 --> 00:18:31,400
you're<font color="#E5E5E5"> looking for your</font><font color="#CCCCCC"> proc structures</font>

374
00:18:28,460 --> 00:18:34,909
or you're a process structure in<font color="#CCCCCC"> the</font>

375
00:18:31,400 --> 00:18:39,710
<font color="#E5E5E5">windows kernel memory to locate your</font>

376
00:18:34,909 --> 00:18:43,039
rootkit right this is to locate process

377
00:18:39,710 --> 00:18:45,740
structures that shouldn't be there but

378
00:18:43,039 --> 00:18:48,379
that's<font color="#E5E5E5"> a different thing these things</font>

379
00:18:45,740 --> 00:18:51,799
are quite large they may be kilobytes

380
00:18:48,380 --> 00:18:54,230
large we want<font color="#E5E5E5"> something smaller on the</font>

381
00:18:51,799 --> 00:18:56,418
other hand we don't want to say that the

382
00:18:54,230 --> 00:18:59,030
dog that the doc file is a primitive

383
00:18:56,419 --> 00:19:02,659
type gosh<font color="#E5E5E5"> no that thing can contain</font>

384
00:18:59,030 --> 00:19:05,178
everything in the kitchen<font color="#E5E5E5"> sink we can't</font>

385
00:19:02,659 --> 00:19:07,340
say that AP file<font color="#CCCCCC"> and elf file is a</font>

386
00:19:05,179 --> 00:19:11,870
primitive type because again that<font color="#E5E5E5"> thing</font>

387
00:19:07,340 --> 00:19:15,439
is made out of many many parts so we

388
00:19:11,870 --> 00:19:18,020
need to make a design decision here so I

389
00:19:15,440 --> 00:19:19,460
think<font color="#CCCCCC"> Sergey alluded to it what we had</font>

390
00:19:18,020 --> 00:19:23,360
to do is come<font color="#CCCCCC"> up with</font><font color="#E5E5E5"> a reasonable</font>

391
00:19:19,460 --> 00:19:25,700
approximation of or what it's too what

392
00:19:23,360 --> 00:19:27,678
is too small what is too large and we'll

393
00:19:25,700 --> 00:19:29,870
show you as the decisions as we went

394
00:19:27,679 --> 00:19:32,210
along the way but one thing to think

395
00:19:29,870 --> 00:19:33,979
about if you think of a simple file

396
00:19:32,210 --> 00:19:36,049
there's usually an image file may have a

397
00:19:33,980 --> 00:19:37,820
header and then<font color="#E5E5E5"> a payload we consider</font>

398
00:19:36,049 --> 00:19:39,650
those two different things for<font color="#E5E5E5"> example</font>

399
00:19:37,820 --> 00:19:42,289
<font color="#CCCCCC">the header we consider a data structure</font>

400
00:19:39,650 --> 00:19:44,179
because maybe you want to know what be

401
00:19:42,289 --> 00:19:46,429
able find data structures within a file

402
00:19:44,179 --> 00:19:50,179
and then the payload maybe a bitmap it

403
00:19:46,429 --> 00:19:52,640
may be a compressed image and that's

404
00:19:50,179 --> 00:19:54,470
their distinct the header and payload

405
00:19:52,640 --> 00:19:57,410
and also we had to come to grips with

406
00:19:54,470 --> 00:19:59,990
that many types of encryption

407
00:19:57,410 --> 00:20:02,660
compression and encoding occur in this

408
00:19:59,990 --> 00:20:04,550
this<font color="#E5E5E5"> binary jungle that's out there zoo</font>

409
00:20:02,660 --> 00:20:06,500
that's<font color="#E5E5E5"> out there and how do we</font>

410
00:20:04,550 --> 00:20:08,629
incorporate that into thinking about

411
00:20:06,500 --> 00:20:11,060
<font color="#E5E5E5">this problem as well as potentially</font>

412
00:20:08,630 --> 00:20:12,650
artifacts like in an<font color="#E5E5E5"> image file in a</font>

413
00:20:11,060 --> 00:20:14,480
compression scheme there may be markers

414
00:20:12,650 --> 00:20:16,580
or something embedded very closely very

415
00:20:14,480 --> 00:20:19,640
small markers are they considered part

416
00:20:16,580 --> 00:20:21,080
of the that that image or that

417
00:20:19,640 --> 00:20:24,290
<font color="#E5E5E5">compressed block are they something else</font>

418
00:20:21,080 --> 00:20:26,750
so there<font color="#E5E5E5"> is a disclaimer here again you</font>

419
00:20:24,290 --> 00:20:28,340
can bring it on any custom

420
00:20:26,750 --> 00:20:30,800
transformation that will completely

421
00:20:28,340 --> 00:20:33,409
disguise the nature of<font color="#E5E5E5"> the file however</font>

422
00:20:30,800 --> 00:20:36,260
<font color="#E5E5E5">I mean you can pack a virtual machine</font>

423
00:20:33,410 --> 00:20:39,020
that actually regenerates your file that

424
00:20:36,260 --> 00:20:41,690
just the same<font color="#E5E5E5"> your your actual content</font>

425
00:20:39,020 --> 00:20:46,610
just<font color="#CCCCCC"> the same way as a dwarf does in</font>

426
00:20:41,690 --> 00:20:49,100
many<font color="#E5E5E5"> of the things that does but again</font>

427
00:20:46,610 --> 00:20:51,290
your typical shellcode doesn't usually

428
00:20:49,100 --> 00:20:55,399
come with a virtual<font color="#E5E5E5"> machine most of the</font>

429
00:20:51,290 --> 00:21:01,490
<font color="#E5E5E5">time it</font><font color="#CCCCCC"> comes in acts or obfuscated or a</font>

430
00:20:55,400 --> 00:21:04,910
you know edit has the same number or you

431
00:21:01,490 --> 00:21:07,670
know the same to bite or four byte

432
00:21:04,910 --> 00:21:09,470
integer added to each word of the

433
00:21:07,670 --> 00:21:12,350
shellcode so through those

434
00:21:09,470 --> 00:21:16,520
transformations we should be able to see

435
00:21:12,350 --> 00:21:18,919
and we can<font color="#CCCCCC"> okay so in the paper we go</font>

436
00:21:16,520 --> 00:21:20,600
into lower levels but<font color="#CCCCCC"> the highest</font><font color="#E5E5E5"> level</font>

437
00:21:18,920 --> 00:21:22,970
of this categorization is what you see

438
00:21:20,600 --> 00:21:24,949
on the<font color="#CCCCCC"> left the idea that these</font>

439
00:21:22,970 --> 00:21:26,990
<font color="#E5E5E5">primitive types and to think about this</font>

440
00:21:24,950 --> 00:21:29,810
problem we looked at the my media

441
00:21:26,990 --> 00:21:33,080
extensions there's several registered

442
00:21:29,810 --> 00:21:35,300
the<font color="#CCCCCC"> IIA na iono registered immediate</font>

443
00:21:33,080 --> 00:21:38,030
immediate types some analytic tools have

444
00:21:35,300 --> 00:21:40,460
binary templates and then container file

445
00:21:38,030 --> 00:21:42,470
formats and the like so<font color="#E5E5E5"> we took a hard</font>

446
00:21:40,460 --> 00:21:44,510
look at those this is the highest level

447
00:21:42,470 --> 00:21:46,430
again the paper goes into significantly

448
00:21:44,510 --> 00:21:48,350
more detail below each of these you<font color="#E5E5E5"> can</font>

449
00:21:46,430 --> 00:21:50,030
envision text getting into<font color="#E5E5E5"> different</font>

450
00:21:48,350 --> 00:21:52,429
encoding schemes on each of those being

451
00:21:50,030 --> 00:21:56,600
different human languages for example

452
00:21:52,430 --> 00:21:58,250
and this the general<font color="#E5E5E5"> approach we suggest</font>

453
00:21:56,600 --> 00:21:59,770
in trying to<font color="#CCCCCC"> identify these things</font>

454
00:21:58,250 --> 00:22:02,830
alluding to the

455
00:21:59,770 --> 00:22:05,830
identifying a camera the we have at the

456
00:22:02,830 --> 00:22:07,659
<font color="#E5E5E5">bite plot view which we showed obviously</font>

457
00:22:05,830 --> 00:22:09,490
looking at hex and<font color="#E5E5E5"> ascii and we also</font>

458
00:22:07,660 --> 00:22:11,170
present<font color="#E5E5E5"> to other you</font><font color="#CCCCCC"> know the idea of</font>

459
00:22:09,490 --> 00:22:14,080
looking at a frequency histogram of the

460
00:22:11,170 --> 00:22:16,870
<font color="#E5E5E5">bytes and the digraphs the two letter</font>

461
00:22:14,080 --> 00:22:19,330
sequences to<font color="#CCCCCC"> care to value sequences</font>

462
00:22:16,870 --> 00:22:22,540
appearing in the<font color="#E5E5E5"> file and then comparing</font>

463
00:22:19,330 --> 00:22:25,480
those two dictionary of other similar

464
00:22:22,540 --> 00:22:27,490
structures and this is the analytic

465
00:22:25,480 --> 00:22:29,140
approach but we also suggest you will

466
00:22:27,490 --> 00:22:31,240
fight you will gain insights and with

467
00:22:29,140 --> 00:22:33,190
those insights you're going to find like

468
00:22:31,240 --> 00:22:35,560
statistical outliers or ways these

469
00:22:33,190 --> 00:22:38,710
things stick out and with those you can

470
00:22:35,560 --> 00:22:45,159
find automated ways to identify them so

471
00:22:38,710 --> 00:22:47,350
think of it as a bunch of antique of

472
00:22:45,160 --> 00:22:49,990
magnifying glasses so you're on<font color="#CCCCCC"> the</font>

473
00:22:47,350 --> 00:22:52,780
Beagle you know I you you've just

474
00:22:49,990 --> 00:22:54,880
acquired this creature you bring them

475
00:22:52,780 --> 00:22:57,490
out and you look at<font color="#CCCCCC"> it through</font><font color="#E5E5E5"> this one</font>

476
00:22:54,880 --> 00:22:59,860
looking glass and<font color="#E5E5E5"> say oh doesn't</font><font color="#CCCCCC"> look</font>

477
00:22:57,490 --> 00:23:01,840
<font color="#E5E5E5">like anything I know take out another</font>

478
00:22:59,860 --> 00:23:04,060
one very quickly again look at<font color="#E5E5E5"> it</font>

479
00:23:01,840 --> 00:23:06,970
through<font color="#E5E5E5"> that one and say who you know</font>

480
00:23:04,060 --> 00:23:10,120
all I can<font color="#E5E5E5"> see through that Looking Glass</font>

481
00:23:06,970 --> 00:23:13,030
is the hoop or a part of the tail or

482
00:23:10,120 --> 00:23:15,639
that strange glowing bit but I know what

483
00:23:13,030 --> 00:23:17,800
that<font color="#E5E5E5"> looks like because I've</font><font color="#CCCCCC"> seen that</font>

484
00:23:15,640 --> 00:23:19,600
sort of thing before so it's really

485
00:23:17,800 --> 00:23:23,320
about the visual transformations of

486
00:23:19,600 --> 00:23:25,330
those primitive pieces that you some or

487
00:23:23,320 --> 00:23:29,080
almost all of the structure out of what

488
00:23:25,330 --> 00:23:31,960
you are viewing but make the rest look

489
00:23:29,080 --> 00:23:35,050
familiar make the rest look recognizable

490
00:23:31,960 --> 00:23:38,050
and by plots and digraphs in particular

491
00:23:35,050 --> 00:23:39,909
will be very<font color="#E5E5E5"> helpful so as we go through</font>

492
00:23:38,050 --> 00:23:42,490
the examples I ask you<font color="#E5E5E5"> to think about</font>

493
00:23:39,910 --> 00:23:44,110
<font color="#CCCCCC">okay we're looking at visually how what</font>

494
00:23:42,490 --> 00:23:45,550
stands out but think about how<font color="#CCCCCC"> it could</font>

495
00:23:44,110 --> 00:23:48,520
be done algorithmic really because

496
00:23:45,550 --> 00:23:50,080
ultimately the future lies in this the

497
00:23:48,520 --> 00:23:51,879
people in this room<font color="#E5E5E5"> don't scale all that</font>

498
00:23:50,080 --> 00:23:53,949
well so if<font color="#E5E5E5"> we can capture your insights</font>

499
00:23:51,880 --> 00:23:55,270
an automated way then that's there's the

500
00:23:53,950 --> 00:23:59,230
real<font color="#E5E5E5"> power and that can be handed off to</font>

501
00:23:55,270 --> 00:24:01,870
machines to do the grunt work so even in

502
00:23:59,230 --> 00:24:04,180
the text category you can see see and

503
00:24:01,870 --> 00:24:07,479
with these again just recognize that the

504
00:24:04,180 --> 00:24:08,800
structure<font color="#CCCCCC"> is different and that you know</font>

505
00:24:07,480 --> 00:24:09,910
<font color="#E5E5E5">everyone in this room many people in</font>

506
00:24:08,800 --> 00:24:11,649
this room could write little scripts

507
00:24:09,910 --> 00:24:13,570
that could identify these

508
00:24:11,650 --> 00:24:15,370
because there's nice makes it the

509
00:24:13,570 --> 00:24:18,250
handles that you can get your arms

510
00:24:15,370 --> 00:24:21,639
around and but again<font color="#E5E5E5"> within the text</font>

511
00:24:18,250 --> 00:24:23,860
arena great deal of diversity so what

512
00:24:21,640 --> 00:24:26,230
we're going to introduce here is the

513
00:24:23,860 --> 00:24:28,179
idea of<font color="#CCCCCC"> the diagraph view so thinking</font>

514
00:24:26,230 --> 00:24:30,400
<font color="#CCCCCC">about that if you take</font><font color="#E5E5E5"> the word black</font>

515
00:24:28,180 --> 00:24:33,100
hat the digraphs are the first two

516
00:24:30,400 --> 00:24:36,490
letters BL<font color="#E5E5E5"> the next diagraph is la the</font>

517
00:24:33,100 --> 00:24:40,000
next<font color="#E5E5E5"> i graph is AC and so BL is</font>

518
00:24:36,490 --> 00:24:43,870
lowercase B L is 98 in 108 and us-ascii

519
00:24:40,000 --> 00:24:45,910
and then la is<font color="#E5E5E5"> 108 97 and so you get</font>

520
00:24:43,870 --> 00:24:48,250
these pairings these these pairs of

521
00:24:45,910 --> 00:24:51,520
values and by applauding these pairs of

522
00:24:48,250 --> 00:24:53,920
values you gain a quick insight into the

523
00:24:51,520 --> 00:24:55,660
contents of a given file or a sliding

524
00:24:53,920 --> 00:24:59,920
window within a file and that's what we

525
00:24:55,660 --> 00:25:02,890
do which will which we'll get to in a

526
00:24:59,920 --> 00:25:04,780
second so for you language aficionados

527
00:25:02,890 --> 00:25:08,560
programming languages that aficionados

528
00:25:04,780 --> 00:25:12,639
out there this is simply a bigram model

529
00:25:08,560 --> 00:25:17,139
of the language that<font color="#E5E5E5"> is the</font><font color="#CCCCCC"> binary so</font>

530
00:25:12,640 --> 00:25:19,690
you can<font color="#CCCCCC"> think</font><font color="#E5E5E5"> of modeling a language as</font>

531
00:25:17,140 --> 00:25:21,370
recording which word follows which word

532
00:25:19,690 --> 00:25:24,310
which bites and which bite in this

533
00:25:21,370 --> 00:25:29,770
particular case follows which bite and

534
00:25:24,310 --> 00:25:32,200
you can have a table<font color="#E5E5E5"> of such pairs that</font>

535
00:25:29,770 --> 00:25:34,900
you observe their cook by grams I and

536
00:25:32,200 --> 00:25:37,600
you can actually<font color="#CCCCCC"> generate pseudo English</font>

537
00:25:34,900 --> 00:25:40,090
or something very<font color="#E5E5E5"> close at the first</font>

538
00:25:37,600 --> 00:25:43,300
<font color="#E5E5E5">glance or the first well at the first</font>

539
00:25:40,090 --> 00:25:45,820
hearing probably I don't know if I start

540
00:25:43,300 --> 00:25:47,440
sputtering gibberish you know that that

541
00:25:45,820 --> 00:25:51,429
that's sort of a circuit switched on in

542
00:25:47,440 --> 00:25:56,110
my brain so the dissociated press in

543
00:25:51,430 --> 00:25:58,870
<font color="#E5E5E5">Emacs the mark of models of natural</font>

544
00:25:56,110 --> 00:26:01,300
language that is the same idea so you

545
00:25:58,870 --> 00:26:08,469
record<font color="#E5E5E5"> other tuples you record the by</font>

546
00:26:01,300 --> 00:26:10,629
grams so just looking at<font color="#E5E5E5"> ASCII text so</font>

547
00:26:08,470 --> 00:26:12,940
this is<font color="#CCCCCC"> the top right is this part is</font>

548
00:26:10,630 --> 00:26:15,010
<font color="#CCCCCC">just a picture</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> it that's the</font>

549
00:26:12,940 --> 00:26:17,800
histogram and you can see the the large

550
00:26:15,010 --> 00:26:20,290
values in the near the middle that's the

551
00:26:17,800 --> 00:26:21,730
lowercase characters the the long

552
00:26:20,290 --> 00:26:23,770
vertical line reaching all the way to

553
00:26:21,730 --> 00:26:24,610
the tops the space character we started

554
00:26:23,770 --> 00:26:25,809
<font color="#E5E5E5">off a text because</font>

555
00:26:24,610 --> 00:26:28,030
I think everybody can<font color="#E5E5E5"> kind of get their</font>

556
00:26:25,809 --> 00:26:30,160
head around that pretty readily and then

557
00:26:28,030 --> 00:26:35,290
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the Biograph plot I'm sure this</font>

558
00:26:30,160 --> 00:26:37,150
diagraph so this plot this is what this

559
00:26:35,290 --> 00:26:38,770
is what ASCII text looks like this is

560
00:26:37,150 --> 00:26:40,120
where it falls into what do you think

561
00:26:38,770 --> 00:26:44,470
that bright region in the bottom right

562
00:26:40,120 --> 00:26:46,540
corner is yeah lowercase characters so

563
00:26:44,470 --> 00:26:48,549
that's lower case characters sequence of

564
00:26:46,540 --> 00:26:50,470
pairs of lowercase characters and then

565
00:26:48,549 --> 00:26:52,510
but you'll get to the left you'll get

566
00:26:50,470 --> 00:26:54,280
upper case and in a lower case so you're

567
00:26:52,510 --> 00:26:55,540
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to see essentially that's</font><font color="#E5E5E5"> a very</font>

568
00:26:54,280 --> 00:26:57,100
distinct signature and when you're

569
00:26:55,540 --> 00:27:08,230
<font color="#E5E5E5">looking at a binary this will pop out at</font>

570
00:26:57,100 --> 00:27:20,860
you when you hit text and<font color="#CCCCCC"> Unicode ok yes</font>

571
00:27:08,230 --> 00:27:22,570
this just says presence<font color="#E5E5E5"> on the left yeah</font>

572
00:27:20,860 --> 00:27:25,360
and you could do that<font color="#CCCCCC"> you could color</font>

573
00:27:22,570 --> 00:27:26,889
code it the<font color="#CCCCCC"> web for this</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> just on or</font>

574
00:27:25,360 --> 00:27:29,830
off and you have to<font color="#E5E5E5"> make a decision like</font>

575
00:27:26,890 --> 00:27:31,240
how<font color="#E5E5E5"> far ahead do you look do you run the</font>

576
00:27:29,830 --> 00:27:33,939
entire file through this then you'd have

577
00:27:31,240 --> 00:27:37,120
different fragment types overlapping so

578
00:27:33,940 --> 00:27:38,980
we took a sliding window approach yes in

579
00:27:37,120 --> 00:27:41,020
fact<font color="#E5E5E5"> we do have a frequency</font><font color="#CCCCCC"> of</font>

580
00:27:38,980 --> 00:27:46,270
occurrence a later for a different

581
00:27:41,020 --> 00:27:51,129
method so I'm just loading a<font color="#E5E5E5"> text file</font>

582
00:27:46,270 --> 00:27:52,960
now and not all that interesting but<font color="#E5E5E5"> you</font>

583
00:27:51,130 --> 00:27:55,900
can see it's got this is<font color="#CCCCCC"> just a</font><font color="#E5E5E5"> large</font>

584
00:27:52,960 --> 00:27:58,990
<font color="#E5E5E5">project gutenberg text file one thing</font>

585
00:27:55,900 --> 00:28:01,090
<font color="#CCCCCC">that we also have in the tool is an</font>

586
00:27:58,990 --> 00:28:03,490
entropy entropy plot so it plots

587
00:28:01,090 --> 00:28:06,100
alongside the entropy so you can see

588
00:28:03,490 --> 00:28:08,080
<font color="#CCCCCC">that the entropy of</font><font color="#E5E5E5"> English text and it</font>

589
00:28:06,100 --> 00:28:10,629
corresponds with the line at the same

590
00:28:08,080 --> 00:28:12,460
level is about 4.2 something like that

591
00:28:10,630 --> 00:28:16,620
zero to<font color="#CCCCCC"> eight bytes eight being</font><font color="#E5E5E5"> the most</font>

592
00:28:12,460 --> 00:28:16,620
random or most unpredictable

593
00:28:19,110 --> 00:28:26,070
and then bitmaps so that bitmaps can

594
00:28:24,750 --> 00:28:27,390
exist<font color="#E5E5E5"> on a file although they're</font>

595
00:28:26,070 --> 00:28:30,000
uncommon typically they're compressed

596
00:28:27,390 --> 00:28:32,610
importantly though they can exist in

597
00:28:30,000 --> 00:28:34,740
memory and when a program loads a

598
00:28:32,610 --> 00:28:36,899
compressed file<font color="#E5E5E5"> in memory typically it</font>

599
00:28:34,740 --> 00:28:38,070
decompresses it and we've got looked at

600
00:28:36,900 --> 00:28:40,470
memory dumps and things like that<font color="#E5E5E5"> you</font>

601
00:28:38,070 --> 00:28:42,899
can see the bitmaps residing in there

602
00:28:40,470 --> 00:28:44,790
now the problem with bitmaps is that

603
00:28:42,900 --> 00:28:46,590
there where text it's a very tight<font color="#CCCCCC"> knot</font>

604
00:28:44,790 --> 00:28:48,809
of what<font color="#CCCCCC"> you can expect statistically</font>

605
00:28:46,590 --> 00:28:51,418
bitmaps can be anything you could have<font color="#CCCCCC"> a</font>

606
00:28:48,809 --> 00:28:53,668
bitmap of white noise or you could<font color="#E5E5E5"> have</font>

607
00:28:51,419 --> 00:28:55,830
a bitmap of a black square so when

608
00:28:53,669 --> 00:28:56,880
you're<font color="#CCCCCC"> doing this though common bitmaps</font>

609
00:28:55,830 --> 00:29:00,389
and that's where we<font color="#E5E5E5"> have to go to</font>

610
00:28:56,880 --> 00:29:06,929
commonly what will you run into<font color="#E5E5E5"> you that</font>

611
00:29:00,390 --> 00:29:08,880
those show those standouts yes we have a

612
00:29:06,929 --> 00:29:10,799
steganography example in<font color="#CCCCCC"> here i would</font>

613
00:29:08,880 --> 00:29:13,980
say it'll work with some where there's

614
00:29:10,799 --> 00:29:16,559
some very like certain naive little

615
00:29:13,980 --> 00:29:19,710
example we have flips lower bit bits at

616
00:29:16,559 --> 00:29:21,660
least significant bits that shows up but

617
00:29:19,710 --> 00:29:30,059
<font color="#CCCCCC">there's some very subtle techniques in</font>

618
00:29:21,660 --> 00:29:32,880
<font color="#CCCCCC">currents tag sure okay so the top right</font>

619
00:29:30,059 --> 00:29:34,139
is a bitmap now that's not the looking

620
00:29:32,880 --> 00:29:36,299
at with an image viewer that's looking

621
00:29:34,140 --> 00:29:38,700
at as a bite<font color="#E5E5E5"> flop plot so because the</font>

622
00:29:36,299 --> 00:29:42,210
the window the bite plot doesn't exactly

623
00:29:38,700 --> 00:29:43,380
represent doesn't exactly<font color="#CCCCCC"> it's I image</font>

624
00:29:42,210 --> 00:29:45,090
review or it's looking at<font color="#E5E5E5"> the raw bytes</font>

625
00:29:43,380 --> 00:29:48,690
in the file that's what it'll look like

626
00:29:45,090 --> 00:29:51,689
or chem that's the histogram for that

627
00:29:48,690 --> 00:29:53,669
particular bitmap but the digraphs

628
00:29:51,690 --> 00:29:55,980
particularly in you know normal

629
00:29:53,669 --> 00:29:59,850
photographs normal images will often

630
00:29:55,980 --> 00:30:01,830
look like fireworks in the digraph and

631
00:29:59,850 --> 00:30:04,379
you can see<font color="#CCCCCC"> the structure which is very</font>

632
00:30:01,830 --> 00:30:08,220
different from<font color="#E5E5E5"> what it was in for the in</font>

633
00:30:04,380 --> 00:30:11,309
case of the text even if this works or

634
00:30:08,220 --> 00:30:12,630
encoded or shifted in some way the

635
00:30:11,309 --> 00:30:17,160
picture would look the<font color="#CCCCCC"> same it would</font>

636
00:30:12,630 --> 00:30:18,929
just shift around in that view and<font color="#E5E5E5"> that</font>

637
00:30:17,160 --> 00:30:21,210
is<font color="#E5E5E5"> the power of a simple visualization</font>

638
00:30:18,929 --> 00:30:24,690
<font color="#E5E5E5">are primitive so that's your you know</font>

639
00:30:21,210 --> 00:30:26,309
antique<font color="#CCCCCC"> lens number one so here we're</font>

640
00:30:24,690 --> 00:30:29,820
<font color="#CCCCCC">looking at three the bottom left corner</font>

641
00:30:26,309 --> 00:30:30,970
if<font color="#E5E5E5"> I get it right you</font><font color="#CCCCCC"> can kind of you</font>

642
00:30:29,820 --> 00:30:35,110
can start kind of seeing

643
00:30:30,970 --> 00:30:38,919
so the<font color="#CCCCCC"> bottom this under here this part</font>

644
00:30:35,110 --> 00:30:49,178
is the the digraph view off here to this

645
00:30:38,919 --> 00:30:52,390
side is the entropy view at yes it's<font color="#CCCCCC"> a</font>

646
00:30:49,179 --> 00:30:56,350
<font color="#E5E5E5">one entropy reading per line so in and</font>

647
00:30:52,390 --> 00:30:59,650
right<font color="#CCCCCC"> now it's fixed to the default so</font>

648
00:30:56,350 --> 00:31:03,219
here it comes<font color="#E5E5E5"> out at 640 by 480 in the</font>

649
00:30:59,650 --> 00:31:05,500
bite plot view so each line of this bite

650
00:31:03,220 --> 00:31:08,799
plot equates to the<font color="#E5E5E5"> the location of the</font>

651
00:31:05,500 --> 00:31:10,570
entropy if you resize this the bite plot

652
00:31:08,799 --> 00:31:12,850
view the entropy doesn't resize<font color="#E5E5E5"> along</font>

653
00:31:10,570 --> 00:31:14,649
with it yeah for entropy you need a

654
00:31:12,850 --> 00:31:15,760
distribution so you<font color="#E5E5E5"> just decided on the</font>

655
00:31:14,650 --> 00:31:18,820
window in which you take that

656
00:31:15,760 --> 00:31:19,900
distribution and in yeah I mean<font color="#E5E5E5"> there</font>

657
00:31:18,820 --> 00:31:21,789
are many ways<font color="#E5E5E5"> you could do it you can</font>

658
00:31:19,900 --> 00:31:23,320
add tuning knobs to all of these things

659
00:31:21,789 --> 00:31:25,870
but then as you go through the file you

660
00:31:23,320 --> 00:31:29,918
<font color="#CCCCCC">can see that this you know the changes</font>

661
00:31:25,870 --> 00:31:32,559
as<font color="#E5E5E5"> you go and</font><font color="#CCCCCC"> again this is just one</font>

662
00:31:29,919 --> 00:31:33,880
example but what we found we've looked

663
00:31:32,559 --> 00:31:35,289
at a lot of examples and what we're

664
00:31:33,880 --> 00:31:38,169
showing you are things that we've seen a

665
00:31:35,289 --> 00:31:40,090
pair<font color="#E5E5E5"> of time and time again so we're</font><font color="#CCCCCC"> not</font>

666
00:31:38,169 --> 00:31:41,470
suggesting these weird one-off examples

667
00:31:40,090 --> 00:31:44,230
unless we tell you it's a weird one off

668
00:31:41,470 --> 00:31:49,330
example here's a weird one off example

669
00:31:44,230 --> 00:31:52,780
to the left is yet to the left is a

670
00:31:49,330 --> 00:31:54,340
picture<font color="#E5E5E5"> and it inside that picture and</font>

671
00:31:52,780 --> 00:31:56,980
<font color="#E5E5E5">the two least significant</font><font color="#CCCCCC"> bytes is</font>

672
00:31:54,340 --> 00:31:59,049
another picture<font color="#CCCCCC"> all right so of a cat</font>

673
00:31:56,980 --> 00:32:03,130
and all cats are named mr. jingles so

674
00:31:59,049 --> 00:32:07,900
that's mr. jingles and here's the view

675
00:32:03,130 --> 00:32:11,140
so what do you notice about it actually

676
00:32:07,900 --> 00:32:14,230
let me make it<font color="#E5E5E5"> bigger okay you can see</font>

677
00:32:11,140 --> 00:32:16,090
something<font color="#CCCCCC"> weird going on here so for the</font>

678
00:32:14,230 --> 00:32:18,610
person asked the<font color="#CCCCCC"> stag question you know</font>

679
00:32:16,090 --> 00:32:21,220
manipulating lower order bits if you've

680
00:32:18,610 --> 00:32:23,530
<font color="#E5E5E5">got two levels of things yeah it may</font>

681
00:32:21,220 --> 00:32:24,490
very well show up it depends<font color="#E5E5E5"> on again it</font>

682
00:32:23,530 --> 00:32:27,010
depends how<font color="#E5E5E5"> much you're putting in there</font>

683
00:32:24,490 --> 00:32:28,539
and how similar things are but<font color="#E5E5E5"> it you've</font>

684
00:32:27,010 --> 00:32:31,240
got a good chance yeah so it's a

685
00:32:28,539 --> 00:32:33,460
familiar beak but it also is something

686
00:32:31,240 --> 00:32:38,590
else it can<font color="#E5E5E5"> probably open beer bottles</font>

687
00:32:33,460 --> 00:32:40,090
and there's in but there's many

688
00:32:38,590 --> 00:32:41,379
different image formats so there's me

689
00:32:40,090 --> 00:32:43,209
there's<font color="#E5E5E5"> a great deal of depth as you</font>

690
00:32:41,380 --> 00:32:44,630
think through this of ways images can be

691
00:32:43,210 --> 00:32:46,190
if you<font color="#CCCCCC"> want to identify</font>

692
00:32:44,630 --> 00:32:47,720
them programmatically for example or try

693
00:32:46,190 --> 00:32:49,220
to there's different ways<font color="#CCCCCC"> that are</font>

694
00:32:47,720 --> 00:32:51,380
encoded so you have to<font color="#CCCCCC"> think those</font>

695
00:32:49,220 --> 00:32:53,570
through audio is another good example

696
00:32:51,380 --> 00:32:55,010
again it<font color="#E5E5E5"> can be compressed but it could</font>

697
00:32:53,570 --> 00:32:58,010
it has to be uncompressed at some point

698
00:32:55,010 --> 00:33:02,420
to actually typically be used so here's

699
00:32:58,010 --> 00:33:05,090
an<font color="#E5E5E5"> example this is a WAV file notice the</font>

700
00:33:02,420 --> 00:33:09,440
u-shaped<font color="#E5E5E5"> the very distinct high and low</font>

701
00:33:05,090 --> 00:33:12,379
bytes for a WAV file and this is a 44

702
00:33:09,440 --> 00:33:16,700
kilohertz 16 bit per channel PCM encoded

703
00:33:12,380 --> 00:33:26,420
audio and here the diagraph very

704
00:33:16,700 --> 00:33:28,520
distinct this is<font color="#E5E5E5"> Sweet Home Alabama and</font>

705
00:33:26,420 --> 00:33:30,260
sadly when you press the play button on

706
00:33:28,520 --> 00:33:35,000
<font color="#E5E5E5">this it doesn't actually play</font><font color="#CCCCCC"> the song</font>

707
00:33:30,260 --> 00:33:37,879
<font color="#CCCCCC">okay so you can</font><font color="#E5E5E5"> see there</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> structure</font>

708
00:33:35,000 --> 00:33:39,080
it's a<font color="#E5E5E5"> different structure you know</font>

709
00:33:37,880 --> 00:33:42,320
you're<font color="#E5E5E5"> not going to get a picture</font>

710
00:33:39,080 --> 00:33:44,030
emerged but and then the entropy doesn't

711
00:33:42,320 --> 00:33:49,010
change but I'm<font color="#E5E5E5"> gonna hit play here and</font>

712
00:33:44,030 --> 00:33:51,560
actually I'll pry speed this up see it

713
00:33:49,010 --> 00:33:53,660
changes pretty significantly as you go

714
00:33:51,560 --> 00:33:55,909
through<font color="#E5E5E5"> so the idea is with these</font>

715
00:33:53,660 --> 00:33:57,380
insights how can you programmatically

716
00:33:55,910 --> 00:34:00,920
identify these things now we know the

717
00:33:57,380 --> 00:34:02,750
diagraph has that characteristic and you

718
00:34:00,920 --> 00:34:04,220
can see the<font color="#E5E5E5"> entropy as well now these</font>

719
00:34:02,750 --> 00:34:05,750
are pure fragment so we're not<font color="#E5E5E5"> looking</font>

720
00:34:04,220 --> 00:34:08,179
at mix we're looking at individual

721
00:34:05,750 --> 00:34:10,429
primitive types here essentially but you

722
00:34:08,179 --> 00:34:13,129
could take a sample out<font color="#CCCCCC"> of a larger file</font>

723
00:34:10,429 --> 00:34:15,560
and quickly categorize those samples

724
00:34:13,129 --> 00:34:20,089
even if the file work for<font color="#CCCCCC"> example sort</font>

725
00:34:15,560 --> 00:34:21,679
yes or the the the bin biz tool will

726
00:34:20,090 --> 00:34:24,530
allow you can just slide to that offset

727
00:34:21,679 --> 00:34:25,760
and take a look compressed audio and

728
00:34:24,530 --> 00:34:28,580
this is a theme you're<font color="#E5E5E5"> going to see you</font>

729
00:34:25,760 --> 00:34:31,250
<font color="#E5E5E5">again and again compressed audio and</font>

730
00:34:28,580 --> 00:34:33,830
encrypted and random numbers typically

731
00:34:31,250 --> 00:34:35,480
exhibit very<font color="#E5E5E5"> little structure as they as</font>

732
00:34:33,830 --> 00:34:37,549
their intended but if you<font color="#CCCCCC"> think about</font>

733
00:34:35,480 --> 00:34:40,850
<font color="#E5E5E5">the nature of each of those categories</font>

734
00:34:37,550 --> 00:34:43,040
compression<font color="#E5E5E5"> typically wants to be</font>

735
00:34:40,850 --> 00:34:46,850
reversed right it's a it's a reversible

736
00:34:43,040 --> 00:34:49,070
process encryption wasn't designed to be

737
00:34:46,850 --> 00:34:50,989
a<font color="#CCCCCC"> random number generator so there are</font>

738
00:34:49,070 --> 00:34:52,800
<font color="#E5E5E5">perhaps some statistical characteristics</font>

739
00:34:50,989 --> 00:34:57,120
that distinguish it from

740
00:34:52,800 --> 00:34:59,220
from random numbers themselves and just

741
00:34:57,120 --> 00:35:03,750
<font color="#E5E5E5">taking a look now at this mp3 there is</font>

742
00:34:59,220 --> 00:35:05,310
some structure there and the looking<font color="#E5E5E5"> at</font>

743
00:35:03,750 --> 00:35:07,440
it and<font color="#E5E5E5"> this is a view I just want to</font>

744
00:35:05,310 --> 00:35:09,840
<font color="#E5E5E5">touch on briefly it's a</font><font color="#CCCCCC"> dan kaminsky</font>

745
00:35:07,440 --> 00:35:11,700
used it's called the dot plot the link

746
00:35:09,840 --> 00:35:14,040
to the original paper and then<font color="#CCCCCC"> Dan</font>

747
00:35:11,700 --> 00:35:15,600
<font color="#CCCCCC">Kaminski's talk there but the basic idea</font>

748
00:35:14,040 --> 00:35:17,850
is it's a measure of self similarity

749
00:35:15,600 --> 00:35:20,670
measure of structure within a file and

750
00:35:17,850 --> 00:35:23,400
if you take<font color="#E5E5E5"> a sequence of values byte</font>

751
00:35:20,670 --> 00:35:26,310
values or words here to be or not to be

752
00:35:23,400 --> 00:35:30,060
and you plot them on the horizontal and

753
00:35:26,310 --> 00:35:31,770
vertical axes where they coincide where

754
00:35:30,060 --> 00:35:33,720
<font color="#CCCCCC">two appears in you know the same word</font>

755
00:35:31,770 --> 00:35:36,420
appears on both axes you plot a point

756
00:35:33,720 --> 00:35:39,689
that's the<font color="#E5E5E5"> basic idea so just like the</font>

757
00:35:36,420 --> 00:35:42,990
digraphs are a measure of<font color="#E5E5E5"> by grams this</font>

758
00:35:39,690 --> 00:35:44,940
is a measure of self-similarity and this

759
00:35:42,990 --> 00:35:47,100
is the mp3 and you see there is

760
00:35:44,940 --> 00:35:48,720
structure in there you<font color="#E5E5E5"> might not notice</font>

761
00:35:47,100 --> 00:35:50,250
<font color="#E5E5E5">that the visit that with I you almost</font>

762
00:35:48,720 --> 00:35:53,250
certainly won't recognize it with a hex

763
00:35:50,250 --> 00:35:55,320
editor or you might not so anyway these

764
00:35:53,250 --> 00:35:57,090
are just again once you've found that

765
00:35:55,320 --> 00:35:58,260
you say well what caused<font color="#CCCCCC"> that and you</font>

766
00:35:57,090 --> 00:35:59,940
can kind of narrow it down and<font color="#E5E5E5"> then</font>

767
00:35:58,260 --> 00:36:04,080
maybe find a way to use that to your

768
00:35:59,940 --> 00:36:06,750
advantage video is essentially sequence

769
00:36:04,080 --> 00:36:09,360
uncompressed video full frame<font color="#E5E5E5"> video just</font>

770
00:36:06,750 --> 00:36:13,470
is Davey I for<font color="#E5E5E5"> it's just image after</font>

771
00:36:09,360 --> 00:36:16,590
image like a flipbook compressed images

772
00:36:13,470 --> 00:36:19,529
often will have a key frame which is<font color="#CCCCCC"> the</font>

773
00:36:16,590 --> 00:36:21,570
<font color="#CCCCCC">a full frame and then followed by some</font>

774
00:36:19,530 --> 00:36:23,610
sequence of frames that just showed the

775
00:36:21,570 --> 00:36:25,170
difference followed<font color="#E5E5E5"> by the key</font><font color="#CCCCCC"> frame so</font>

776
00:36:23,610 --> 00:36:28,440
this is just looking inside a compressed

777
00:36:25,170 --> 00:36:29,730
<font color="#CCCCCC">AVI and again it's useful to see</font><font color="#E5E5E5"> these</font>

778
00:36:28,440 --> 00:36:31,110
pictures so as you're<font color="#CCCCCC"> looking</font><font color="#E5E5E5"> at these</font>

779
00:36:29,730 --> 00:36:37,770
<font color="#E5E5E5">things you can't really tell this from a</font>

780
00:36:31,110 --> 00:36:39,840
hex editor windows PE file now this we

781
00:36:37,770 --> 00:36:41,100
won't<font color="#E5E5E5"> say the same primitive type in</font>

782
00:36:39,840 --> 00:36:44,610
there I<font color="#E5E5E5"> mean if you look at the text</font>

783
00:36:41,100 --> 00:36:46,740
region at the bottom there's a table<font color="#CCCCCC"> of</font>

784
00:36:44,610 --> 00:36:49,170
strings so mixed with<font color="#CCCCCC"> the code at the</font>

785
00:36:46,740 --> 00:36:51,930
top so the text at the top is what code

786
00:36:49,170 --> 00:36:55,020
looks like typically and then the in the

787
00:36:51,930 --> 00:36:56,160
resource section r sr c section has your

788
00:36:55,020 --> 00:36:58,950
bitmaps<font color="#E5E5E5"> and other different types of</font>

789
00:36:56,160 --> 00:37:00,210
structure embedded so there but it's

790
00:36:58,950 --> 00:37:02,430
<font color="#CCCCCC">useful to i thought i'd</font><font color="#E5E5E5"> be interesting</font>

791
00:37:00,210 --> 00:37:03,840
<font color="#E5E5E5">to actually see what the sections look</font>

792
00:37:02,430 --> 00:37:04,879
like<font color="#E5E5E5"> because you spend a lot</font><font color="#CCCCCC"> of your</font>

793
00:37:03,840 --> 00:37:07,850
time<font color="#E5E5E5"> in those</font>

794
00:37:04,880 --> 00:37:13,160
and then looking at<font color="#E5E5E5"> this command exe as</font>

795
00:37:07,850 --> 00:37:16,520
well so now looking specifically at

796
00:37:13,160 --> 00:37:18,109
<font color="#E5E5E5">machine code we looked at</font><font color="#CCCCCC"> a lot we have</font>

797
00:37:16,520 --> 00:37:20,270
some statistical analyses at the end

798
00:37:18,110 --> 00:37:24,110
this<font color="#E5E5E5"> is just one example but you get the</font>

799
00:37:20,270 --> 00:37:25,790
histogram or<font color="#E5E5E5"> a digraph plot that looks</font>

800
00:37:24,110 --> 00:37:27,230
<font color="#E5E5E5">kind of like a grid so if you're going</font>

801
00:37:25,790 --> 00:37:30,590
<font color="#E5E5E5">through this file and you see that grid</font>

802
00:37:27,230 --> 00:37:32,180
appear that that tells you that it may

803
00:37:30,590 --> 00:37:34,550
<font color="#E5E5E5">be machine</font><font color="#CCCCCC"> cut because we</font><font color="#E5E5E5"> found that</font>

804
00:37:32,180 --> 00:37:36,560
there's not<font color="#E5E5E5"> all that many common</font>

805
00:37:34,550 --> 00:37:37,580
primitive types out there that you once

806
00:37:36,560 --> 00:37:39,140
you get a handle of what they look like

807
00:37:37,580 --> 00:37:41,350
you<font color="#E5E5E5"> can start identifying them on the</font>

808
00:37:39,140 --> 00:37:41,350
fly

809
00:37:48,220 --> 00:37:54,669
so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the ever-popular calc see</font>

810
00:37:51,130 --> 00:38:02,980
probably the<font color="#E5E5E5"> most analyzed program in</font>

811
00:37:54,670 --> 00:38:08,830
the world<font color="#E5E5E5"> okay so at the top so as we</font>

812
00:38:02,980 --> 00:38:10,450
play this note so this is<font color="#CCCCCC"> the grid that</font>

813
00:38:08,830 --> 00:38:12,220
<font color="#CCCCCC">I was discussing you'll see that grid in</font>

814
00:38:10,450 --> 00:38:14,529
to type this top part the top half of

815
00:38:12,220 --> 00:38:16,180
the files essentially all grid and you

816
00:38:14,530 --> 00:38:18,700
can see that's what it looks like and

817
00:38:16,180 --> 00:38:21,730
then as you<font color="#E5E5E5"> transition you'll see it</font>

818
00:38:18,700 --> 00:38:23,740
popped briefly when it<font color="#CCCCCC"> hits strings yeah</font>

819
00:38:21,730 --> 00:38:26,680
by the way you<font color="#E5E5E5"> just saw it as a piece of</font>

820
00:38:23,740 --> 00:38:27,819
text which<font color="#CCCCCC"> is the year okay let's the</font>

821
00:38:26,680 --> 00:38:29,649
string table then you get into<font color="#E5E5E5"> the</font>

822
00:38:27,820 --> 00:38:30,940
images<font color="#CCCCCC"> that look like fireworks all</font>

823
00:38:29,650 --> 00:38:40,720
<font color="#CCCCCC">right so you get the fireworks kind of</font>

824
00:38:30,940 --> 00:38:42,820
at the<font color="#CCCCCC"> end you all in this is as we said</font>

825
00:38:40,720 --> 00:38:44,379
<font color="#E5E5E5">bitmaps could be anything data</font>

826
00:38:42,820 --> 00:38:46,869
structures<font color="#E5E5E5"> typically you know them when</font>

827
00:38:44,380 --> 00:38:48,940
you see them often times they'll be

828
00:38:46,869 --> 00:38:50,710
<font color="#E5E5E5">blank search that they have a great deal</font>

829
00:38:48,940 --> 00:38:54,040
<font color="#E5E5E5">of structure</font><font color="#CCCCCC"> Parliament program the pun</font>

830
00:38:50,710 --> 00:38:56,619
<font color="#CCCCCC">but they're visually very recognizable</font>

831
00:38:54,040 --> 00:38:59,619
but they could theoretically contain you

832
00:38:56,619 --> 00:39:01,330
know<font color="#E5E5E5"> random numbers so they kind of but</font>

833
00:38:59,619 --> 00:39:03,280
in common practice they look like this

834
00:39:01,330 --> 00:39:04,630
so what are<font color="#E5E5E5"> the statistical signatures</font>

835
00:39:03,280 --> 00:39:06,700
like is there a way that you can<font color="#E5E5E5"> pull</font>

836
00:39:04,630 --> 00:39:08,980
out data structures and as you'll note

837
00:39:06,700 --> 00:39:12,819
that we're not<font color="#E5E5E5"> talking about knowing a</font>

838
00:39:08,980 --> 00:39:15,339
priority the file format in advance the

839
00:39:12,820 --> 00:39:17,320
<font color="#E5E5E5">or</font><font color="#CCCCCC"> already</font><font color="#E5E5E5"> we're not assuming any</font>

840
00:39:15,339 --> 00:39:18,490
knowledge you can<font color="#CCCCCC"> combine that with a</font>

841
00:39:17,320 --> 00:39:19,750
certain knowledge if<font color="#CCCCCC"> you know a file</font>

842
00:39:18,490 --> 00:39:21,879
format what's it what should be expected

843
00:39:19,750 --> 00:39:25,030
at a given spot but we're<font color="#E5E5E5"> not assuming</font>

844
00:39:21,880 --> 00:39:28,030
that and again random numbers look like

845
00:39:25,030 --> 00:39:29,830
random numbers the flip side<font color="#E5E5E5"> of random</font>

846
00:39:28,030 --> 00:39:33,970
numbers padding repeating values and

847
00:39:29,830 --> 00:39:35,710
like arguing but you do see that so

848
00:39:33,970 --> 00:39:38,410
included that in<font color="#E5E5E5"> our thinking about this</font>

849
00:39:35,710 --> 00:39:40,150
problem and then there's the idea of

850
00:39:38,410 --> 00:39:42,700
transformation so we've largely looked

851
00:39:40,150 --> 00:39:44,530
at how the raw the base primitive types

852
00:39:42,700 --> 00:39:47,348
but they can undergo many many

853
00:39:44,530 --> 00:39:49,330
transformations some encryption

854
00:39:47,349 --> 00:39:51,730
compression and coding being the most

855
00:39:49,330 --> 00:39:54,250
common and if you think<font color="#CCCCCC"> about an image</font>

856
00:39:51,730 --> 00:39:56,050
an image on<font color="#E5E5E5"> a camera maybe an</font>

857
00:39:54,250 --> 00:39:58,869
uncompressed image a tiff file or

858
00:39:56,050 --> 00:40:00,339
<font color="#E5E5E5">something like that and you load it onto</font>

859
00:39:58,869 --> 00:40:02,469
your<font color="#E5E5E5"> computer you load into em</font>

860
00:40:00,339 --> 00:40:04,119
<font color="#CCCCCC">jeder you edit it</font><font color="#E5E5E5"> you save it as a</font>

861
00:40:02,469 --> 00:40:06,700
compressed version that compressed

862
00:40:04,119 --> 00:40:09,249
version may be sent over a protocol that

863
00:40:06,700 --> 00:40:11,410
uses encoding text encoding so these

864
00:40:09,249 --> 00:40:13,569
transformations occur when that when

865
00:40:11,410 --> 00:40:15,879
that compressed image is loaded into

866
00:40:13,569 --> 00:40:18,069
memory<font color="#CCCCCC"> its uncompressed so the it's</font>

867
00:40:15,880 --> 00:40:19,420
going to what one thing will like at

868
00:40:18,069 --> 00:40:21,369
different points in this game will<font color="#CCCCCC"> be</font>

869
00:40:19,420 --> 00:40:23,890
<font color="#CCCCCC">different but</font><font color="#E5E5E5"> oftentimes the city you</font>

870
00:40:21,369 --> 00:40:27,339
can find some signatures will often pop

871
00:40:23,890 --> 00:40:29,799
through so this<font color="#E5E5E5"> is just a</font><font color="#CCCCCC"> Windows PE</font>

872
00:40:27,339 --> 00:40:32,140
file that's base64 encoded and you can

873
00:40:29,799 --> 00:40:35,559
see the the text region at the top still

874
00:40:32,140 --> 00:40:38,710
is visual visible and also the the

875
00:40:35,559 --> 00:40:43,539
vertical lines they are yeah you see

876
00:40:38,710 --> 00:40:47,349
that as a common artifact within base64

877
00:40:43,539 --> 00:40:49,839
encoded files sometimes other artifacts

878
00:40:47,349 --> 00:40:51,339
like this this trunk here I drew

879
00:40:49,839 --> 00:40:53,109
diagonal lines on the top and<font color="#E5E5E5"> then</font>

880
00:40:51,339 --> 00:40:54,670
there's a mirror image on the bottom

881
00:40:53,109 --> 00:40:55,960
that<font color="#CCCCCC"> there may be artifacts in there</font>

882
00:40:54,670 --> 00:41:00,999
that you didn't know and that you can

883
00:40:55,960 --> 00:41:02,680
<font color="#CCCCCC">use to your advantage</font><font color="#E5E5E5"> yupi this is a upx</font>

884
00:41:00,999 --> 00:41:06,519
file<font color="#CCCCCC"> I think it compressed file i think</font>

885
00:41:02,680 --> 00:41:09,430
<font color="#E5E5E5">it's cmd.exe and at the top though it by</font>

886
00:41:06,519 --> 00:41:11,348
default<font color="#CCCCCC"> it only compressed the code</font>

887
00:41:09,430 --> 00:41:14,229
region and the other structures there so

888
00:41:11,349 --> 00:41:16,479
you can see a kind of certain time

889
00:41:14,229 --> 00:41:18,700
structure pops through and this code

890
00:41:16,479 --> 00:41:20,919
would not look like the code in the

891
00:41:18,700 --> 00:41:23,558
white book yeah it would look like<font color="#CCCCCC"> a</font>

892
00:41:20,920 --> 00:41:26,440
compressed more like the white noise the

893
00:41:23,559 --> 00:41:29,589
<font color="#E5E5E5">starfield kind of look and then</font>

894
00:41:26,440 --> 00:41:30,999
encrypted looks a lot like random and

895
00:41:29,589 --> 00:41:35,078
then it's also useful to<font color="#CCCCCC"> think in terms</font>

896
00:41:30,999 --> 00:41:36,819
<font color="#CCCCCC">of the observation techniques people</font>

897
00:41:35,079 --> 00:41:38,650
will do within their code and<font color="#E5E5E5"> there's a</font>

898
00:41:36,819 --> 00:41:40,029
wide variety people can use we've chosen

899
00:41:38,650 --> 00:41:44,890
just a couple of<font color="#E5E5E5"> examples to illustrate</font>

900
00:41:40,029 --> 00:41:47,859
if you know adding and subtracting a

901
00:41:44,890 --> 00:41:49,538
constant it looking at a hex editor you

902
00:41:47,859 --> 00:41:52,328
know things will look look different

903
00:41:49,539 --> 00:41:53,829
right but other properties shine through

904
00:41:52,329 --> 00:41:56,049
with the right magnifying glass right

905
00:41:53,829 --> 00:41:58,930
window so here's one that we've shifted

906
00:41:56,049 --> 00:42:02,410
each by 150 and wraps around if it

907
00:41:58,930 --> 00:42:04,180
exceeded 255 and by adding<font color="#CCCCCC"> a constant</font>

908
00:42:02,410 --> 00:42:06,848
<font color="#CCCCCC">it's it's useful to think of that</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> a</font>

909
00:42:04,180 --> 00:42:10,029
shift cipher right that you're<font color="#E5E5E5"> just</font>

910
00:42:06,849 --> 00:42:11,829
shifting to<font color="#CCCCCC"> alphabet side-by-side but</font><font color="#E5E5E5"> in</font>

911
00:42:10,029 --> 00:42:12,910
the frequency distribution still in the

912
00:42:11,829 --> 00:42:18,910
same order it's just

913
00:42:12,910 --> 00:42:21,879
lid and you just shifted it and the same

914
00:42:18,910 --> 00:42:23,680
<font color="#CCCCCC">thing like if X or in a file</font><font color="#E5E5E5"> X soaring</font>

915
00:42:21,880 --> 00:42:25,570
value so you've<font color="#CCCCCC"> got a Kia randomly</font>

916
00:42:23,680 --> 00:42:29,109
chosen key that your ex<font color="#E5E5E5"> roaring with you</font>

917
00:42:25,570 --> 00:42:32,440
ever evaluate bit x or yields a set of

918
00:42:29,110 --> 00:42:34,810
values and but depend on the key<font color="#CCCCCC"> you</font>

919
00:42:32,440 --> 00:42:36,430
choose it there can be any mapping

920
00:42:34,810 --> 00:42:38,770
between the plane and<font color="#E5E5E5"> cipher so this</font>

921
00:42:36,430 --> 00:42:41,649
8-bit key is really the equivalent of a

922
00:42:38,770 --> 00:42:44,050
monoalphabetic substitution cipher but

923
00:42:41,650 --> 00:42:46,030
still structure pops through that

924
00:42:44,050 --> 00:42:48,280
because even with a limited with a

925
00:42:46,030 --> 00:42:50,380
limited number with one key like at it

926
00:42:48,280 --> 00:42:53,710
there's a reason<font color="#CCCCCC"> why one-time pads have</font>

927
00:42:50,380 --> 00:42:56,110
<font color="#E5E5E5">an infinite or have a key applied a</font>

928
00:42:53,710 --> 00:42:58,390
random value X sword with every value in

929
00:42:56,110 --> 00:43:02,170
a file because otherwise structure pops

930
00:42:58,390 --> 00:43:07,660
through so anyway thinking<font color="#E5E5E5"> from 8-bit</font>

931
00:43:02,170 --> 00:43:09,160
<font color="#E5E5E5">XOR to 16-bit XOR you you have a 16-bit</font>

932
00:43:07,660 --> 00:43:12,160
so the first eight bits is key one

933
00:43:09,160 --> 00:43:14,200
applied to bite one and apply the second

934
00:43:12,160 --> 00:43:16,480
date goes two by two and then you reuse

935
00:43:14,200 --> 00:43:20,230
the keys and essentially what you've got

936
00:43:16,480 --> 00:43:25,750
is a to alphabet polyalphabetic poly uh

937
00:43:20,230 --> 00:43:27,460
mazuma mano y a polyalphabetic they've

938
00:43:25,750 --> 00:43:31,450
got a to alphabet polyalphabetic cipher

939
00:43:27,460 --> 00:43:33,730
<font color="#E5E5E5">and if you've done a 32-bit XOR you have</font>

940
00:43:31,450 --> 00:43:35,080
four bytes essentially and you keep

941
00:43:33,730 --> 00:43:37,000
using or four keys and you're reusing

942
00:43:35,080 --> 00:43:41,200
those so essentially have four alphabets

943
00:43:37,000 --> 00:43:43,540
so what you'll see on the diagram for

944
00:43:41,200 --> 00:43:47,589
example is that<font color="#E5E5E5"> your you'll be seeing</font>

945
00:43:43,540 --> 00:43:49,960
double or quadruple of the<font color="#E5E5E5"> usual picture</font>

946
00:43:47,590 --> 00:43:51,700
but it will still be<font color="#E5E5E5"> the usual picture</font>

947
00:43:49,960 --> 00:43:54,220
because neither of those methods

948
00:43:51,700 --> 00:43:56,470
actually destroys your by grams it

949
00:43:54,220 --> 00:43:58,060
transforms them makes them into

950
00:43:56,470 --> 00:44:03,730
<font color="#CCCCCC">different diagrams but does Lotus</font>

951
00:43:58,060 --> 00:44:05,500
destroy them entirely and then as I

952
00:44:03,730 --> 00:44:07,840
mentioned before that if your number of

953
00:44:05,500 --> 00:44:10,240
keys go all the way up so that it match

954
00:44:07,840 --> 00:44:12,010
<font color="#CCCCCC">the number of</font><font color="#E5E5E5"> bytes if</font><font color="#CCCCCC"> your then you</font><font color="#E5E5E5"> hit</font>

955
00:44:10,240 --> 00:44:13,419
a one-time pad so that what you're

956
00:44:12,010 --> 00:44:14,830
talking about those those that has

957
00:44:13,420 --> 00:44:18,580
<font color="#E5E5E5">become more and more diffused as you</font>

958
00:44:14,830 --> 00:44:24,940
increase the size<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the key I think</font>

959
00:44:18,580 --> 00:44:26,350
so demo time now<font color="#CCCCCC"> let's see that okay so</font>

960
00:44:24,940 --> 00:44:33,880
<font color="#E5E5E5">I'm not going to</font><font color="#CCCCCC"> tell you what these are</font>

961
00:44:26,350 --> 00:44:38,380
so you have to tell me<font color="#E5E5E5"> what they're ok</font>

962
00:44:33,880 --> 00:44:41,980
so the bite plot what does that look

963
00:44:38,380 --> 00:44:44,770
like it looks kind of text like okay and

964
00:44:41,980 --> 00:44:47,440
I'll get so that is correct and then if

965
00:44:44,770 --> 00:44:49,960
you adjust<font color="#E5E5E5"> the size you get lined up</font>

966
00:44:47,440 --> 00:44:51,850
right what do<font color="#E5E5E5"> you see in the middle yeah</font>

967
00:44:49,960 --> 00:44:53,680
you can see vertical bars but look at

968
00:44:51,850 --> 00:44:55,330
the digraph plot remember if it was all

969
00:44:53,680 --> 00:44:56,980
uppercase in all lower case you should

970
00:44:55,330 --> 00:44:58,900
<font color="#E5E5E5">just have the lower right block being</font>

971
00:44:56,980 --> 00:45:01,450
the<font color="#E5E5E5"> other common digraphs but we're</font>

972
00:44:58,900 --> 00:45:05,620
seeing diagraphs of many pairs within

973
00:45:01,450 --> 00:45:09,270
the printable ascii range being good

974
00:45:05,620 --> 00:45:09,270
this is base 64 encoding

975
00:45:18,860 --> 00:45:27,530
<font color="#E5E5E5">okay so the first part is you see what</font>

976
00:45:25,400 --> 00:45:32,090
does<font color="#E5E5E5"> this indicate the the digraph view</font>

977
00:45:27,530 --> 00:45:34,850
indicates what yeah it now we're<font color="#E5E5E5"> doing</font>

978
00:45:32,090 --> 00:45:37,730
something here though<font color="#CCCCCC"> and actually</font><font color="#E5E5E5"> let</font>

979
00:45:34,850 --> 00:45:42,770
me let me still have to do this okay as

980
00:45:37,730 --> 00:45:46,610
<font color="#E5E5E5">I slide through</font><font color="#CCCCCC"> the file</font><font color="#E5E5E5"> it's shifting</font>

981
00:45:42,770 --> 00:45:48,020
so think back to the add-ins adding and

982
00:45:46,610 --> 00:45:51,290
subtracting a constant is a simple

983
00:45:48,020 --> 00:45:54,530
encoding technique so here we've added<font color="#E5E5E5"> 0</font>

984
00:45:51,290 --> 00:45:56,840
if you go through the file like saying

985
00:45:54,530 --> 00:45:59,390
this bottom right corner we've added 255

986
00:45:56,840 --> 00:46:03,050
to every value so it's done is shifted

987
00:45:59,390 --> 00:46:05,060
it all the way<font color="#E5E5E5"> to the right so again</font>

988
00:46:03,050 --> 00:46:06,830
this shows you that just simply adding

989
00:46:05,060 --> 00:46:09,350
or subtracting a value to its<font color="#E5E5E5"> kind of</font>

990
00:46:06,830 --> 00:46:12,650
<font color="#E5E5E5">like a known plaintext attack right you</font>

991
00:46:09,350 --> 00:46:17,150
know its ASCII text going in if you try

992
00:46:12,650 --> 00:46:18,680
and obscure it with just a simple adding

993
00:46:17,150 --> 00:46:21,410
or subtracting<font color="#CCCCCC"> a constant remember shift</font>

994
00:46:18,680 --> 00:46:23,629
cipher<font color="#E5E5E5"> it's it just shifts literally</font>

995
00:46:21,410 --> 00:46:25,430
shifts the<font color="#CCCCCC"> digraph something here is a</font>

996
00:46:23,630 --> 00:46:27,260
lookingglass that sees<font color="#E5E5E5"> through that up</font>

997
00:46:25,430 --> 00:46:28,580
the station yeah and<font color="#E5E5E5"> then as</font><font color="#CCCCCC"> you slide</font>

998
00:46:27,260 --> 00:46:29,930
you can notice that you go<font color="#E5E5E5"> to the file</font>

999
00:46:28,580 --> 00:46:31,279
gets brighter and brighter because it's

1000
00:46:29,930 --> 00:46:33,620
getting<font color="#E5E5E5"> higher and higher order bits</font>

1001
00:46:31,280 --> 00:46:40,180
until it wraps around and then back down

1002
00:46:33,620 --> 00:46:40,180
<font color="#E5E5E5">okay</font>

1003
00:46:44,090 --> 00:46:50,900
so what we've done<font color="#CCCCCC"> here is you see this</font>

1004
00:46:47,270 --> 00:46:54,920
rainbow effect we've applied in a key to

1005
00:46:50,900 --> 00:46:56,810
each of those an 8-bit key 8-bit X or so

1006
00:46:54,920 --> 00:46:59,930
we've we've chosen a random 8-bit key

1007
00:46:56,810 --> 00:47:02,150
and applied it to I think it's 20 lines

1008
00:46:59,930 --> 00:47:04,160
at a time so you can<font color="#E5E5E5"> see this rainbow</font>

1009
00:47:02,150 --> 00:47:07,370
effect where it's chosen<font color="#E5E5E5"> to X or a</font>

1010
00:47:04,160 --> 00:47:09,470
different range but as you play this you

1011
00:47:07,370 --> 00:47:13,430
can see that<font color="#CCCCCC"> that the structure still is</font>

1012
00:47:09,470 --> 00:47:15,230
there you've done 8-bit XOR and<font color="#CCCCCC"> it's</font>

1013
00:47:13,430 --> 00:47:16,640
still regardless of the key where this

1014
00:47:15,230 --> 00:47:18,020
is<font color="#E5E5E5"> like exhaustively going through the</font>

1015
00:47:16,640 --> 00:47:20,180
entire key space and you can see<font color="#CCCCCC"> that</font>

1016
00:47:18,020 --> 00:47:22,130
each of the<font color="#CCCCCC"> potential keys still has a</font>

1017
00:47:20,180 --> 00:47:25,640
distinct structure shining through and

1018
00:47:22,130 --> 00:47:29,510
<font color="#E5E5E5">part of it is this there's that one</font>

1019
00:47:25,640 --> 00:47:31,069
region that that darker block that you

1020
00:47:29,510 --> 00:47:32,630
know here it's in the top left that you

1021
00:47:31,070 --> 00:47:34,910
that<font color="#CCCCCC"> you can think</font><font color="#E5E5E5"> about that given the</font>

1022
00:47:32,630 --> 00:47:38,240
key that was<font color="#E5E5E5"> chosen the input was very</font>

1023
00:47:34,910 --> 00:47:40,069
high in a certain range 32 to 127 but

1024
00:47:38,240 --> 00:47:42,529
actually probably lower case letters

1025
00:47:40,070 --> 00:47:52,100
that that range is what shines through

1026
00:47:42,530 --> 00:47:54,260
and then<font color="#E5E5E5"> even if you do 16-bit X or so</font>

1027
00:47:52,100 --> 00:47:57,049
it's<font color="#E5E5E5"> just to alphabets right so when the</font>

1028
00:47:54,260 --> 00:47:58,940
out<font color="#E5E5E5"> one the keys that you can see the</font>

1029
00:47:57,050 --> 00:48:06,380
two alphabets here popping through in

1030
00:47:58,940 --> 00:48:08,180
this attractor I'm sorry so you can see

1031
00:48:06,380 --> 00:48:09,890
the the<font color="#CCCCCC"> 21</font><font color="#E5E5E5"> key had the effect of</font>

1032
00:48:08,180 --> 00:48:12,680
shifting here the other key put it down

1033
00:48:09,890 --> 00:48:13,850
the lower left quadrant and then as<font color="#CCCCCC"> you</font>

1034
00:48:12,680 --> 00:48:16,100
play through and different keys are

1035
00:48:13,850 --> 00:48:18,710
chosen they show up in different<font color="#E5E5E5"> places</font>

1036
00:48:16,100 --> 00:48:23,540
so this<font color="#E5E5E5"> is an indicator of texts being</font>

1037
00:48:18,710 --> 00:48:24,980
xorg with a you know 16-bit key yeah you

1038
00:48:23,540 --> 00:48:27,830
would<font color="#E5E5E5"> get</font><font color="#CCCCCC"> the same</font><font color="#E5E5E5"> effect if you</font>

1039
00:48:24,980 --> 00:48:32,600
composed two very different languages

1040
00:48:27,830 --> 00:48:34,279
that have their own natural digraph

1041
00:48:32,600 --> 00:48:36,920
structure<font color="#CCCCCC"> and that</font><font color="#E5E5E5"> natural by Graham</font>

1042
00:48:34,280 --> 00:48:38,930
structure but they<font color="#E5E5E5"> just simply don't</font>

1043
00:48:36,920 --> 00:48:44,090
mesh either that or you're seeing double

1044
00:48:38,930 --> 00:48:47,480
so this one's a little different when<font color="#E5E5E5"> I</font>

1045
00:48:44,090 --> 00:48:49,430
<font color="#E5E5E5">coded it I I forgot to do one thing so I</font>

1046
00:48:47,480 --> 00:48:52,130
when I wrote this I intended<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> this</font>

1047
00:48:49,430 --> 00:48:56,970
can be 32 bit x or but as it turns out i

1048
00:48:52,130 --> 00:48:58,980
only made its really<font color="#E5E5E5"> 24-bit</font><font color="#CCCCCC"> x</font>

1049
00:48:56,970 --> 00:49:01,290
or in the last key the third<font color="#CCCCCC"> the fourth</font>

1050
00:48:58,980 --> 00:49:04,440
value was 0 so what you see then are

1051
00:49:01,290 --> 00:49:06,390
these vertical lines here<font color="#E5E5E5"> All</font><font color="#CCCCCC"> Right see</font>

1052
00:49:04,440 --> 00:49:08,820
<font color="#E5E5E5">the vertical lines that's because every</font>

1053
00:49:06,390 --> 00:49:10,348
<font color="#E5E5E5">fourth byte value is</font><font color="#CCCCCC"> zero and</font><font color="#E5E5E5"> I confirm</font>

1054
00:49:08,820 --> 00:49:11,700
that by looking at it but anyway it

1055
00:49:10,349 --> 00:49:13,650
showed you something was a mess that

1056
00:49:11,700 --> 00:49:15,480
even we play this though this is

1057
00:49:13,650 --> 00:49:17,040
essentially<font color="#CCCCCC"> 24-bit XO you</font><font color="#E5E5E5"> can see the</font>

1058
00:49:15,480 --> 00:49:19,619
different<font color="#CCCCCC"> alpha pets still popping</font>

1059
00:49:17,040 --> 00:49:22,830
through the key they're popping through

1060
00:49:19,619 --> 00:49:25,050
the obfuscation technique and it might

1061
00:49:22,830 --> 00:49:26,549
<font color="#CCCCCC">be hard to see but the digraph if you</font>

1062
00:49:25,050 --> 00:49:31,200
think about one if one of the keys is

1063
00:49:26,550 --> 00:49:32,790
<font color="#E5E5E5">zero you've got</font><font color="#CCCCCC"> diagraphs here then so</font>

1064
00:49:31,200 --> 00:49:36,598
I'm sorry enough one the keys is<font color="#E5E5E5"> zero</font>

1065
00:49:32,790 --> 00:49:38,670
yeah you get digraphs of<font color="#CCCCCC"> light yeah the</font>

1066
00:49:36,599 --> 00:49:46,290
bite sticky at the top and at the bottom

1067
00:49:38,670 --> 00:49:53,400
<font color="#E5E5E5">okay I think that was it for</font><font color="#CCCCCC"> these okay</font>

1068
00:49:46,290 --> 00:49:55,170
so<font color="#E5E5E5"> I think guys going yeah so we've</font>

1069
00:49:53,400 --> 00:49:57,720
shown you visually what this looks like

1070
00:49:55,170 --> 00:50:01,320
and now we've done now each of<font color="#E5E5E5"> these</font>

1071
00:49:57,720 --> 00:50:03,569
lines is a thousand samples as pure as

1072
00:50:01,320 --> 00:50:06,839
we could make them of that<font color="#E5E5E5"> given type so</font>

1073
00:50:03,570 --> 00:50:09,450
at the top we have random examples<font color="#CCCCCC"> and</font>

1074
00:50:06,839 --> 00:50:12,509
<font color="#CCCCCC">cryptic examples compressed examples and</font>

1075
00:50:09,450 --> 00:50:16,169
the left red box is average byte value

1076
00:50:12,510 --> 00:50:20,430
the right that a line or<font color="#E5E5E5"> a right box is</font>

1077
00:50:16,170 --> 00:50:24,599
the entropy Shannon entropy so what we

1078
00:50:20,430 --> 00:50:26,940
have is so you see high entropy you know

1079
00:50:24,599 --> 00:50:28,260
can this cluster and then but you notice

1080
00:50:26,940 --> 00:50:29,970
<font color="#CCCCCC">that there's statistically difference</font>

1081
00:50:28,260 --> 00:50:32,520
difference<font color="#E5E5E5"> between the encoded version</font>

1082
00:50:29,970 --> 00:50:35,040
still high entropy we encoded zip files

1083
00:50:32,520 --> 00:50:37,619
but the average byte values are

1084
00:50:35,040 --> 00:50:41,369
significantly different machine code

1085
00:50:37,619 --> 00:50:44,130
against significantly different bitmaps

1086
00:50:41,369 --> 00:50:45,119
but with bitmaps from recall though they

1087
00:50:44,130 --> 00:50:47,790
could be anything so they're very

1088
00:50:45,119 --> 00:50:49,859
diverse in our samples and the<font color="#E5E5E5"> standard</font>

1089
00:50:47,790 --> 00:50:51,570
deviation there are 69 which is huge

1090
00:50:49,859 --> 00:50:55,410
which means it's all over the<font color="#E5E5E5"> place and</font>

1091
00:50:51,570 --> 00:50:58,680
then text again a pretty consistent view

1092
00:50:55,410 --> 00:51:00,690
so we plotted those one entropy<font color="#E5E5E5"> versus</font>

1093
00:50:58,680 --> 00:51:01,710
byte value and the idea is there's

1094
00:51:00,690 --> 00:51:03,510
intuition here that we can

1095
00:51:01,710 --> 00:51:05,460
programmatically detect some of these

1096
00:51:03,510 --> 00:51:07,470
things you've got now the high entropy

1097
00:51:05,460 --> 00:51:09,170
cluster it's<font color="#E5E5E5"> really hard that's a</font>

1098
00:51:07,470 --> 00:51:11,629
non-trivial problem to to pull the

1099
00:51:09,170 --> 00:51:14,329
apart but as a unit the idea<font color="#E5E5E5"> of you know</font>

1100
00:51:11,630 --> 00:51:16,819
high entropy that can be<font color="#E5E5E5"> detected pretty</font>

1101
00:51:14,329 --> 00:51:19,280
<font color="#E5E5E5">straightforward pulling out the base64</font>

1102
00:51:16,819 --> 00:51:21,290
encoding and<font color="#CCCCCC"> you you encoding pretty</font>

1103
00:51:19,280 --> 00:51:22,460
straightforward from our experiments<font color="#E5E5E5"> of</font>

1104
00:51:21,290 --> 00:51:23,299
course there's gonna be noise and

1105
00:51:22,460 --> 00:51:25,849
there's going<font color="#E5E5E5"> to be things you done</font>

1106
00:51:23,299 --> 00:51:29,480
anticipated things machine code stands

1107
00:51:25,849 --> 00:51:32,030
out ascii text and bitmaps and it would

1108
00:51:29,480 --> 00:51:34,069
be interesting in the future to draw

1109
00:51:32,030 --> 00:51:35,690
these boxes based on the standard

1110
00:51:34,069 --> 00:51:37,400
deviations you know kind of<font color="#E5E5E5"> get a feel</font>

1111
00:51:35,690 --> 00:51:39,380
for how big each region is it's a<font color="#E5E5E5"> little</font>

1112
00:51:37,400 --> 00:51:41,780
bit bigger or smaller than the the

1113
00:51:39,380 --> 00:51:45,589
marker that<font color="#E5E5E5"> we've used so and these are</font>

1114
00:51:41,780 --> 00:51:47,089
only two these are<font color="#E5E5E5"> only two possible</font>

1115
00:51:45,589 --> 00:51:50,000
statistics that you can throw it<font color="#CCCCCC"> the</font>

1116
00:51:47,089 --> 00:51:51,890
thing they're really and they're really

1117
00:51:50,000 --> 00:51:54,440
well known well understood<font color="#CCCCCC"> and simple</font>

1118
00:51:51,890 --> 00:51:58,339
now imagine what you can do if<font color="#E5E5E5"> you take</font>

1119
00:51:54,440 --> 00:52:00,950
an aggregate of 10 or more statistics

1120
00:51:58,339 --> 00:52:03,319
what kind of clusters would emerge some

1121
00:52:00,950 --> 00:52:07,490
of those actually<font color="#CCCCCC"> do catch the artifacts</font>

1122
00:52:03,319 --> 00:52:09,500
of compression and of particular kinds

1123
00:52:07,490 --> 00:52:12,348
of encryption especially if the key<font color="#CCCCCC"> is</font>

1124
00:52:09,500 --> 00:52:14,540
not<font color="#E5E5E5"> chosen wisely and if proper padding</font>

1125
00:52:12,349 --> 00:52:17,210
is not applied so you might actually<font color="#E5E5E5"> be</font>

1126
00:52:14,540 --> 00:52:19,819
<font color="#CCCCCC">able to visually detect decrypt</font>

1127
00:52:17,210 --> 00:52:23,630
encryption with a key that wasn't chosen

1128
00:52:19,819 --> 00:52:26,359
properly or with the key with or where

1129
00:52:23,630 --> 00:52:31,339
the right padding scale a scheme was not

1130
00:52:26,359 --> 00:52:35,750
used now let's do something else let's

1131
00:52:31,339 --> 00:52:39,920
try<font color="#E5E5E5"> to see visually how some things are</font>

1132
00:52:35,750 --> 00:52:42,380
like the others and others<font color="#E5E5E5"> are not the</font>

1133
00:52:39,920 --> 00:52:44,690
inspiration here is this wonderful

1134
00:52:42,380 --> 00:52:48,200
wonderful work done by two physicists

1135
00:52:44,690 --> 00:52:51,349
who managed to<font color="#E5E5E5"> reproduce almost entirely</font>

1136
00:52:48,200 --> 00:52:53,029
the phila genetic tree of languages by

1137
00:52:51,349 --> 00:52:55,280
taking<font color="#CCCCCC"> the universal declaration of</font>

1138
00:52:53,030 --> 00:52:58,309
human rights in<font color="#E5E5E5"> every language in which</font>

1139
00:52:55,280 --> 00:53:03,140
in which it was<font color="#E5E5E5"> written and compressing</font>

1140
00:52:58,309 --> 00:53:06,559
those files<font color="#E5E5E5"> together and separately and</font>

1141
00:53:03,140 --> 00:53:08,720
noticing how much better they actually

1142
00:53:06,559 --> 00:53:10,849
compressed together the idea being that

1143
00:53:08,720 --> 00:53:13,910
<font color="#E5E5E5">while you're compressing one file you</font>

1144
00:53:10,849 --> 00:53:16,880
are<font color="#E5E5E5"> already working up a string table</font>

1145
00:53:13,910 --> 00:53:19,700
and that string string table helps you

1146
00:53:16,880 --> 00:53:22,289
compress the other file better and so

1147
00:53:19,700 --> 00:53:26,160
this<font color="#E5E5E5"> is what we did to binary fragments</font>

1148
00:53:22,289 --> 00:53:29,309
and you<font color="#E5E5E5"> get those</font><font color="#CCCCCC"> a bathroom tile kind</font>

1149
00:53:26,160 --> 00:53:31,709
of pictures where you have many

1150
00:53:29,309 --> 00:53:37,410
fragments of different types you group

1151
00:53:31,709 --> 00:53:40,469
them and then you see how<font color="#E5E5E5"> well or what</font>

1152
00:53:37,410 --> 00:53:46,169
the compressed file would look like so

1153
00:53:40,469 --> 00:53:51,239
in this<font color="#CCCCCC"> bite plot I'm taking a linux x86</font>

1154
00:53:46,169 --> 00:53:56,249
executable and compressing it with the

1155
00:53:51,239 --> 00:54:00,869
rest<font color="#E5E5E5"> of the x86</font><font color="#CCCCCC"> Linux executables so</font>

1156
00:53:56,249 --> 00:54:04,468
it's home team so to say<font color="#E5E5E5"> and instead</font><font color="#CCCCCC"> of</font>

1157
00:54:00,869 --> 00:54:07,319
collapsing the strings that are in my

1158
00:54:04,469 --> 00:54:08,640
string table for compression just how

1159
00:54:07,319 --> 00:54:11,640
the one positive compression works

1160
00:54:08,640 --> 00:54:15,629
instead<font color="#E5E5E5"> of collapsing them I collar them</font>

1161
00:54:11,640 --> 00:54:22,199
in their entirety with the color that

1162
00:54:15,630 --> 00:54:25,890
the darker is the darker it<font color="#CCCCCC"> is the more</font>

1163
00:54:22,199 --> 00:54:27,719
frequent that strength and the more

1164
00:54:25,890 --> 00:54:31,049
frequently that<font color="#E5E5E5"> string is known to</font>

1165
00:54:27,719 --> 00:54:35,189
appear in that corpus and say you see

1166
00:54:31,049 --> 00:54:39,569
that there are pretty long runs of fog

1167
00:54:35,189 --> 00:54:42,509
of strings that were found so those are

1168
00:54:39,569 --> 00:54:46,558
verbatim<font color="#CCCCCC"> are repeated in the other files</font>

1169
00:54:42,509 --> 00:54:50,400
like that whereas<font color="#E5E5E5"> if I config-if a</font>

1170
00:54:46,559 --> 00:54:53,579
compress it with my bunch of bitmaps it

1171
00:54:50,400 --> 00:54:57,179
doesn't<font color="#E5E5E5"> look so good in fact i get i</font>

1172
00:54:53,579 --> 00:54:59,579
don't get long blocks at all<font color="#CCCCCC"> i get short</font>

1173
00:54:57,179 --> 00:55:05,309
blocks and some of those are<font color="#E5E5E5"> just bites</font>

1174
00:54:59,579 --> 00:55:08,969
which means<font color="#CCCCCC"> i ran out of my string table</font>

1175
00:55:05,309 --> 00:55:11,969
and<font color="#CCCCCC"> i am</font><font color="#E5E5E5"> not seeing the same strings</font>

1176
00:55:08,969 --> 00:55:17,189
that<font color="#E5E5E5"> i was seeing when i was generating</font>

1177
00:55:11,969 --> 00:55:19,439
the string table now some<font color="#E5E5E5"> of those</font>

1178
00:55:17,189 --> 00:55:21,449
things<font color="#E5E5E5"> are more like the others this is</font>

1179
00:55:19,439 --> 00:55:25,949
the executable code<font color="#E5E5E5"> of compressed with</font>

1180
00:55:21,449 --> 00:55:29,279
music and you see certain periodic

1181
00:55:25,949 --> 00:55:32,819
structure these things actually occur in

1182
00:55:29,279 --> 00:55:35,790
code as well but they're not long and

1183
00:55:32,819 --> 00:55:39,750
their distribution is strange

1184
00:55:35,790 --> 00:55:43,529
so these<font color="#CCCCCC"> are the those triples that you</font>

1185
00:55:39,750 --> 00:55:46,590
know could be executable code so I'm

1186
00:55:43,530 --> 00:55:48,570
going<font color="#CCCCCC"> to show that with luck I'm going</font>

1187
00:55:46,590 --> 00:55:53,250
<font color="#E5E5E5">to show that life during have to do we</font>

1188
00:55:48,570 --> 00:55:55,950
have the time couple of minutes let's

1189
00:55:53,250 --> 00:56:07,470
see if<font color="#E5E5E5"> this works if if this doesn't</font>

1190
00:55:55,950 --> 00:56:10,040
then we'll give you the demo<font color="#CCCCCC"> okay we</font>

1191
00:56:07,470 --> 00:56:10,040
attempt this

1192
00:56:10,520 --> 00:56:21,788
all right<font color="#E5E5E5"> great</font>

1193
00:56:15,849 --> 00:56:26,920
right oh right<font color="#E5E5E5"> okay ah this is a very</font>

1194
00:56:21,789 --> 00:56:32,769
<font color="#E5E5E5">visual</font><font color="#CCCCCC"> cat bogglingly the winery's sorry</font>

1195
00:56:26,920 --> 00:56:36,729
<font color="#E5E5E5">alright so here is a particular a bit of</font>

1196
00:56:32,769 --> 00:56:40,479
binary code compressed with<font color="#CCCCCC"> its a</font><font color="#E5E5E5"> native</font>

1197
00:56:36,729 --> 00:56:42,759
data set here is the bitmap that we've

1198
00:56:40,479 --> 00:56:46,598
seen how does it look when<font color="#CCCCCC"> I compress it</font>

1199
00:56:42,759 --> 00:56:50,920
with be zipped text well again not so

1200
00:56:46,599 --> 00:56:57,309
good what happens if<font color="#E5E5E5"> I compress it with</font>

1201
00:56:50,920 --> 00:57:00,549
encrypted text samples again you<font color="#E5E5E5"> don't</font>

1202
00:56:57,309 --> 00:57:04,180
see any long blocks here and so you<font color="#E5E5E5"> can</font>

1203
00:57:00,549 --> 00:57:07,809
go through<font color="#E5E5E5"> the different kinds and see</font>

1204
00:57:04,180 --> 00:57:10,720
where you're getting longer runs that

1205
00:57:07,809 --> 00:57:14,170
are common to that data set let's look

1206
00:57:10,720 --> 00:57:16,359
at the windows so it's not<font color="#E5E5E5"> quite the</font>

1207
00:57:14,170 --> 00:57:19,479
home<font color="#E5E5E5"> team but not</font><font color="#CCCCCC"> quite the antagonist</font>

1208
00:57:16,359 --> 00:57:23,680
and you actually see a little bit of

1209
00:57:19,479 --> 00:57:26,950
similarity here some of those<font color="#E5E5E5"> you know</font>

1210
00:57:23,680 --> 00:57:29,019
<font color="#E5E5E5">the sum of those by trans generated by</font>

1211
00:57:26,950 --> 00:57:33,098
the compiler are like the others and

1212
00:57:29,019 --> 00:57:36,848
some are not<font color="#CCCCCC"> and so you can this is a</font>

1213
00:57:33,099 --> 00:57:39,700
little<font color="#E5E5E5"> processing application this is</font>

1214
00:57:36,849 --> 00:57:42,549
the music<font color="#E5E5E5"> example and so it goes</font>

1215
00:57:39,700 --> 00:57:45,279
compressing things together with random

1216
00:57:42,549 --> 00:57:47,200
files does not help much because you

1217
00:57:45,279 --> 00:57:54,130
don't get to<font color="#CCCCCC"> see much of the similarity</font>

1218
00:57:47,200 --> 00:58:01,899
right so that way you can very quickly

1219
00:57:54,130 --> 00:58:06,430
sport sharing of substrings bite

1220
00:58:01,900 --> 00:58:10,420
substrings between two files so and<font color="#E5E5E5"> this</font>

1221
00:58:06,430 --> 00:58:14,109
is nothing<font color="#CCCCCC"> but a very simple impulsive a</font>

1222
00:58:10,420 --> 00:58:16,299
compression with counting of the

1223
00:58:14,109 --> 00:58:18,279
currency the frequency of the

1224
00:58:16,299 --> 00:58:23,670
occurrences of<font color="#E5E5E5"> the strings on</font><font color="#CCCCCC"> the table</font>

1225
00:58:18,279 --> 00:58:30,180
and let's go<font color="#E5E5E5"> back to</font><font color="#CCCCCC"> a</font>

1226
00:58:23,670 --> 00:58:32,549
<font color="#E5E5E5">okay good so we just kind of recap we</font>

1227
00:58:30,180 --> 00:58:35,009
know we showed you the insight that<font color="#CCCCCC"> we</font>

1228
00:58:32,549 --> 00:58:37,799
saw visually the statistical outliers

1229
00:58:35,010 --> 00:58:40,440
and then the<font color="#E5E5E5"> the fact that there are</font>

1230
00:58:37,799 --> 00:58:42,960
just statistical differences and you can

1231
00:58:40,440 --> 00:58:45,540
use statistical signatures you can use

1232
00:58:42,960 --> 00:58:48,119
what<font color="#CCCCCC"> Sergei</font><font color="#E5E5E5"> basically is a compression</font>

1233
00:58:45,540 --> 00:58:51,150
based classifier<font color="#E5E5E5"> and other techniques up</font>

1234
00:58:48,119 --> 00:58:52,559
so thinking about<font color="#E5E5E5"> this it is we move</font>

1235
00:58:51,150 --> 00:58:54,839
forward obviously<font color="#E5E5E5"> there's the bitmap</font>

1236
00:58:52,559 --> 00:58:56,730
diversity and data struc data structure

1237
00:58:54,839 --> 00:58:58,740
diversity problem that they could be

1238
00:58:56,730 --> 00:59:02,760
anything but we believe in practice they

1239
00:58:58,740 --> 00:59:04,919
typically<font color="#E5E5E5"> aren't very enough similarity</font>

1240
00:59:02,760 --> 00:59:07,980
there that they could be identified<font color="#E5E5E5"> that</font>

1241
00:59:04,920 --> 00:59:09,930
cluster of high entropy types it's<font color="#E5E5E5"> it's</font>

1242
00:59:07,980 --> 00:59:12,630
hard to separate those particularly in

1243
00:59:09,930 --> 00:59:15,210
small sizes I think we've<font color="#E5E5E5"> gotten a</font>

1244
00:59:12,630 --> 00:59:17,700
reason the following<font color="#E5E5E5"> things is</font><font color="#CCCCCC"> there</font>

1245
00:59:15,210 --> 00:59:19,950
transformed sometimes the transfer of

1246
00:59:17,700 --> 00:59:21,839
transformations so severe nothing really

1247
00:59:19,950 --> 00:59:24,058
shows through other times it does like

1248
00:59:21,839 --> 00:59:26,250
<font color="#E5E5E5">come our examples and also like to</font>

1249
00:59:24,059 --> 00:59:32,190
actually you're going to comment<font color="#CCCCCC"> on</font><font color="#E5E5E5"> yes</font>

1250
00:59:26,250 --> 00:59:35,760
yes so it is<font color="#E5E5E5"> a the</font><font color="#CCCCCC"> technique it is well</font>

1251
00:59:32,190 --> 00:59:39,960
known that you can disguise things so my

1252
00:59:35,760 --> 00:59:42,630
favorite disguising too early disguising

1253
00:59:39,960 --> 00:59:45,869
<font color="#E5E5E5">too is generic sense dissembler which</font>

1254
00:59:42,630 --> 00:59:48,329
takes a shellcode and translates it into

1255
00:59:45,869 --> 00:59:53,250
ask you only shellcode so that the byte

1256
00:59:48,329 --> 00:59:56,490
codes are just printable asking recently

1257
00:59:53,250 --> 00:59:58,619
that a similar<font color="#E5E5E5"> thing but with an</font>

1258
00:59:56,490 --> 01:00:00,839
<font color="#CCCCCC">enormous amount of overkill has been</font>

1259
00:59:58,619 --> 01:00:04,650
done by this academic group they

1260
01:00:00,839 --> 01:00:08,130
<font color="#E5E5E5">actually not only</font><font color="#CCCCCC"> made it</font><font color="#E5E5E5"> printable they</font>

1261
01:00:04,650 --> 01:00:13,500
made that sort of indistinguishable from

1262
01:00:08,130 --> 01:00:16,290
English text by assembling those

1263
01:00:13,500 --> 01:00:19,410
printable instructions into words

1264
01:00:16,290 --> 01:00:21,329
english words then compensating for the

1265
01:00:19,410 --> 01:00:27,210
side effects of those instructions and

1266
01:00:21,329 --> 01:00:30,900
the whole<font color="#E5E5E5"> thing took hours many hours on</font>

1267
01:00:27,210 --> 01:00:32,049
a cluster to fit the purpose of that

1268
01:00:30,900 --> 01:00:34,029
shell code and in the

1269
01:00:32,049 --> 01:00:35,769
and you have a short essay that kind of

1270
01:00:34,029 --> 01:00:38,589
sorta makes well no it doesn't make

1271
01:00:35,769 --> 01:00:43,299
<font color="#CCCCCC">sense yes it does actually</font><font color="#E5E5E5"> well it's</font>

1272
01:00:38,589 --> 01:00:44,619
more<font color="#CCCCCC"> like a postmodern thing but it is</font>

1273
01:00:43,299 --> 01:00:48,400
actually a round the<font color="#CCCCCC"> bowl shell code</font>

1274
01:00:44,619 --> 01:00:54,880
which blunders in doing what<font color="#E5E5E5"> it does but</font>

1275
01:00:48,400 --> 01:00:56,739
gets there so you can make data look

1276
01:00:54,880 --> 01:00:59,349
like you can make code look like data

1277
01:00:56,739 --> 01:01:01,059
you can make data look like code if<font color="#E5E5E5"> you</font>

1278
01:00:59,349 --> 01:01:06,039
have to<font color="#E5E5E5"> throw if you</font><font color="#CCCCCC"> throw enough</font>

1279
01:01:01,059 --> 01:01:08,859
computational power at it it's possible

1280
01:01:06,039 --> 01:01:15,279
<font color="#CCCCCC">to obfuscate things to hell but</font>

1281
01:01:08,859 --> 01:01:19,808
nevertheless normal code normal data

1282
01:01:15,279 --> 01:01:23,439
that even even mail code of that is in

1283
01:01:19,809 --> 01:01:28,569
commercial production<font color="#E5E5E5"> doesn't have to do</font>

1284
01:01:23,439 --> 01:01:30,368
that<font color="#E5E5E5"> as an engineering necessity and you</font>

1285
01:01:28,569 --> 01:01:35,439
know you look at the<font color="#E5E5E5"> shell code out</font>

1286
01:01:30,369 --> 01:01:38,319
there<font color="#E5E5E5"> you don't see</font><font color="#CCCCCC"> that much of a very</font>

1287
01:01:35,439 --> 01:01:42,189
very deep obfuscation there as well so

1288
01:01:38,319 --> 01:01:51,670
<font color="#E5E5E5">it's not all sore but it's certainly a</font>

1289
01:01:42,189 --> 01:01:54,729
lot of sore so we have this talk<font color="#CCCCCC"> a</font><font color="#E5E5E5"> way</font>

1290
01:01:51,670 --> 01:01:57,819
of the underlying classification in this

1291
01:01:54,729 --> 01:02:00,069
paper<font color="#E5E5E5"> all this is really something of an</font>

1292
01:01:57,819 --> 01:02:02,949
academic paper you<font color="#CCCCCC"> will find it on your</font>

1293
01:02:00,069 --> 01:02:06,819
CDs as our white paper to go with<font color="#E5E5E5"> our</font>

1294
01:02:02,949 --> 01:02:08,709
talk and we try<font color="#CCCCCC"> to go a lot deeper into</font>

1295
01:02:06,819 --> 01:02:13,599
the classification of those binary

1296
01:02:08,709 --> 01:02:16,390
fragments and we try to distinguish them

1297
01:02:13,599 --> 01:02:19,779
by simple transformations that discard

1298
01:02:16,390 --> 01:02:22,150
all but the most<font color="#E5E5E5"> showing of that</font>

1299
01:02:19,779 --> 01:02:25,630
structure as we you know those looking

1300
01:02:22,150 --> 01:02:30,429
glasses those magnifying glasses that

1301
01:02:25,630 --> 01:02:34,070
we've tried<font color="#CCCCCC"> to convince</font><font color="#E5E5E5"> you work and</font>

1302
01:02:30,429 --> 01:02:37,970
then for the future

1303
01:02:34,070 --> 01:02:39,410
so again we just kind of the theme<font color="#CCCCCC"> that</font>

1304
01:02:37,970 --> 01:02:42,020
there's the potential here then for

1305
01:02:39,410 --> 01:02:43,580
automated identification the idea of

1306
01:02:42,020 --> 01:02:45,110
using classification techniques

1307
01:02:43,580 --> 01:02:46,670
clustering<font color="#CCCCCC"> tucking state of mind</font>

1308
01:02:45,110 --> 01:02:48,830
techniques combining all that to combine

1309
01:02:46,670 --> 01:02:52,460
some way to to probably have automation

1310
01:02:48,830 --> 01:02:54,590
helpful you could incorporate new

1311
01:02:52,460 --> 01:02:56,780
knowledge about<font color="#E5E5E5"> what comes before some</font>

1312
01:02:54,590 --> 01:02:58,970
probabilistic knowledge like<font color="#CCCCCC"> when you</font>

1313
01:02:56,780 --> 01:03:00,620
<font color="#E5E5E5">know data type typically follows and one</font>

1314
01:02:58,970 --> 01:03:03,169
primitive type typically<font color="#E5E5E5"> follows another</font>

1315
01:03:00,620 --> 01:03:05,900
primitive type or it known offsets in a

1316
01:03:03,170 --> 01:03:09,020
file format it'd be nice to extend the

1317
01:03:05,900 --> 01:03:10,970
set and I like<font color="#CCCCCC"> the idea of memory map a</font>

1318
01:03:09,020 --> 01:03:13,400
tool that you can just pour any binary

1319
01:03:10,970 --> 01:03:15,169
at and it'll give you its best guess of

1320
01:03:13,400 --> 01:03:17,720
what the map is preferably with a

1321
01:03:15,170 --> 01:03:19,190
plug-in architecture so we're gonna<font color="#E5E5E5"> be</font>

1322
01:03:17,720 --> 01:03:22,759
wandering<font color="#E5E5E5"> around black hat and DEF CON</font>

1323
01:03:19,190 --> 01:03:24,200
welcome we welcome<font color="#E5E5E5"> feedback it I think</font>

1324
01:03:22,760 --> 01:03:25,940
<font color="#CCCCCC">it'd</font><font color="#E5E5E5"> be interesting some of those people</font>

1325
01:03:24,200 --> 01:03:27,830
have obfuscating shellcode like those

1326
01:03:25,940 --> 01:03:29,900
English shellcode I think it'd be fun to

1327
01:03:27,830 --> 01:03:32,270
<font color="#CCCCCC">see what</font><font color="#E5E5E5"> that looks like I haven't done</font>

1328
01:03:29,900 --> 01:03:34,520
<font color="#E5E5E5">that but I bet it would show kindness</font>

1329
01:03:32,270 --> 01:03:37,970
this hybrid characteristic of the

1330
01:03:34,520 --> 01:03:39,320
machine code view and the in what ascii

1331
01:03:37,970 --> 01:03:41,029
looks like so it could be<font color="#E5E5E5"> it could be</font>

1332
01:03:39,320 --> 01:03:45,470
interesting<font color="#E5E5E5"> for someone you want to take</font>

1333
01:03:41,030 --> 01:03:46,670
a<font color="#E5E5E5"> look at</font><font color="#CCCCCC"> that so if what we paint the</font>

1334
01:03:45,470 --> 01:03:48,830
white paper we actually put a lot of

1335
01:03:46,670 --> 01:03:50,630
thought and effort into that so if it

1336
01:03:48,830 --> 01:03:52,160
should be on the CD if not what we're

1337
01:03:50,630 --> 01:03:55,220
happy to get it<font color="#E5E5E5"> to have it up on the web</font>

1338
01:03:52,160 --> 01:03:57,020
shortly and<font color="#E5E5E5"> then there's some our set of</font>

1339
01:03:55,220 --> 01:04:00,589
cds you know again should<font color="#E5E5E5"> be on the wet</font>

1340
01:03:57,020 --> 01:04:02,210
on the<font color="#CCCCCC"> disc that</font><font color="#E5E5E5"> has the slide so you</font>

1341
01:04:00,590 --> 01:04:03,320
have to copy it down but we have<font color="#CCCCCC"> Cod</font>

1342
01:04:02,210 --> 01:04:04,550
we've been working this theme for a

1343
01:04:03,320 --> 01:04:06,140
couple of years now and this is<font color="#E5E5E5"> the</font>

1344
01:04:04,550 --> 01:04:07,610
latest evolution of where it is so

1345
01:04:06,140 --> 01:04:10,009
there's some previous work that might be

1346
01:04:07,610 --> 01:04:12,650
interesting the bin<font color="#E5E5E5"> viz tool that we</font>

1347
01:04:10,010 --> 01:04:15,230
used the source code<font color="#E5E5E5"> and executable</font>

1348
01:04:12,650 --> 01:04:17,330
should be on your<font color="#E5E5E5"> CD if not we'll have</font>

1349
01:04:15,230 --> 01:04:19,520
it up on the web shortly and I want<font color="#CCCCCC"> to</font>

1350
01:04:17,330 --> 01:04:21,950
<font color="#E5E5E5">point out</font><font color="#CCCCCC"> that merius and</font><font color="#E5E5E5"> I can't</font>

1351
01:04:19,520 --> 01:04:24,590
pronounce his last name wish he has done

1352
01:04:21,950 --> 01:04:26,930
some work extending bin<font color="#E5E5E5"> vis an earlier</font>

1353
01:04:24,590 --> 01:04:30,140
version of it as a google<font color="#E5E5E5"> code project</font>

1354
01:04:26,930 --> 01:04:31,910
the soda<font color="#E5E5E5"> work cross-platform was that</font>

1355
01:04:30,140 --> 01:04:33,680
was his intent<font color="#CCCCCC"> I'm not</font><font color="#E5E5E5"> sure</font><font color="#CCCCCC"> where it</font>

1356
01:04:31,910 --> 01:04:35,420
stands and I haven't personally used it

1357
01:04:33,680 --> 01:04:38,720
but<font color="#E5E5E5"> I did want to tell you this out</font>

1358
01:04:35,420 --> 01:04:42,950
there we also like to thank our

1359
01:04:38,720 --> 01:04:44,759
co-authors on<font color="#E5E5E5"> the white paper and with</font>

1360
01:04:42,950 --> 01:05:00,049
that did you want

1361
01:04:44,760 --> 01:05:00,050
ok let's go<font color="#CCCCCC"> ahead</font><font color="#E5E5E5"> take questions yep</font>

1362
01:05:04,820 --> 01:05:07,420
now

1363
01:05:10,510 --> 01:05:13,830
sure

1364
01:05:17,480 --> 01:05:33,470
this is a typo

1365
01:05:23,960 --> 01:05:36,440
that's<font color="#E5E5E5"> quite possible</font><font color="#CCCCCC"> yes we try</font><font color="#E5E5E5"> to</font>

1366
01:05:33,470 --> 01:05:40,368
isolate the purest what we judge to be

1367
01:05:36,440 --> 01:05:42,950
the purest examples but certainly as

1368
01:05:40,369 --> 01:05:45,290
with your typical biological

1369
01:05:42,950 --> 01:05:47,029
classification as it used to be done

1370
01:05:45,290 --> 01:05:50,570
before<font color="#E5E5E5"> you could actually sequence DNA</font>

1371
01:05:47,030 --> 01:05:52,910
the boundaries<font color="#CCCCCC"> are blurry and you can</font>

1372
01:05:50,570 --> 01:05:54,920
find you can define subspecies in fact

1373
01:05:52,910 --> 01:05:56,720
you can get in the fight with other

1374
01:05:54,920 --> 01:06:00,950
biologists over whether this is a

1375
01:05:56,720 --> 01:06:04,430
subspecies or just a local variety so

1376
01:06:00,950 --> 01:06:08,598
what we wanted to do was to basically

1377
01:06:04,430 --> 01:06:10,460
give you the tools to try looking at

1378
01:06:08,599 --> 01:06:14,300
whatever the data you<font color="#CCCCCC"> are working with</font>

1379
01:06:10,460 --> 01:06:18,380
so that you would develop this intuition

1380
01:06:14,300 --> 01:06:21,710
for what the basic types are and what

1381
01:06:18,380 --> 01:06:23,930
they look like<font color="#E5E5E5"> in those plots that</font>

1382
01:06:21,710 --> 01:06:25,670
suppress out most of their structure but

1383
01:06:23,930 --> 01:06:28,279
keep something<font color="#E5E5E5"> that's characteristic of</font>

1384
01:06:25,670 --> 01:06:32,710
that particular type like the digraph or

1385
01:06:28,280 --> 01:06:32,710
like the zip thing yes

1386
01:06:38,080 --> 01:07:03,730
uh yes so I know so this is<font color="#CCCCCC"> a wonderful</font>

1387
01:06:59,290 --> 01:07:08,380
question it has finally a propagated to

1388
01:07:03,730 --> 01:07:13,180
the you know large to the larger

1389
01:07:08,380 --> 01:07:16,570
academic mindset that much of the code

1390
01:07:13,180 --> 01:07:20,770
that<font color="#E5E5E5"> is written now is actually written</font>

1391
01:07:16,570 --> 01:07:24,310
<font color="#CCCCCC">by mutation of existing code and all the</font>

1392
01:07:20,770 --> 01:07:28,570
couch has a<font color="#E5E5E5"> really nice article in the</font>

1393
01:07:24,310 --> 01:07:32,529
usenix<font color="#CCCCCC"> logan on programming with ritual</font>

1394
01:07:28,570 --> 01:07:37,450
and alchemy which a wonderful name which

1395
01:07:32,530 --> 01:07:40,120
<font color="#CCCCCC">is basically you know you</font><font color="#E5E5E5"> get some code</font>

1396
01:07:37,450 --> 01:07:43,839
off of the web as an example you paste

1397
01:07:40,120 --> 01:07:46,270
it in it kind of works you go<font color="#E5E5E5"> on the web</font>

1398
01:07:43,840 --> 01:07:49,660
<font color="#E5E5E5">for example for for how to fix it so</font>

1399
01:07:46,270 --> 01:07:52,000
<font color="#CCCCCC">that it actually does work and this</font><font color="#E5E5E5"> is</font>

1400
01:07:49,660 --> 01:07:54,040
as removed from good practices as

1401
01:07:52,000 --> 01:07:55,780
possible this is as removed from what

1402
01:07:54,040 --> 01:07:58,120
people<font color="#E5E5E5"> actually teaches good practices</font>

1403
01:07:55,780 --> 01:08:00,760
as possible however he found himself

1404
01:07:58,120 --> 01:08:03,130
doing that with a particular<font color="#E5E5E5"> version of</font>

1405
01:08:00,760 --> 01:08:05,980
Hadoop that they wanted for<font color="#E5E5E5"> a research</font>

1406
01:08:03,130 --> 01:08:08,680
paper and so hence the programming with

1407
01:08:05,980 --> 01:08:11,200
ritual and alchemy so there is quite a

1408
01:08:08,680 --> 01:08:14,410
lot of code floating around and there

1409
01:08:11,200 --> 01:08:18,250
are better metrics than just you know

1410
01:08:14,410 --> 01:08:23,170
mutual compression to throw it in fact<font color="#E5E5E5"> i</font>

1411
01:08:18,250 --> 01:08:25,180
<font color="#E5E5E5">think i know a thesis that is looking of</font>

1412
01:08:23,170 --> 01:08:30,700
a student who<font color="#CCCCCC"> is looking</font><font color="#E5E5E5"> into this and</font>

1413
01:08:25,180 --> 01:08:34,060
his thesis so<font color="#E5E5E5"> i'm not</font><font color="#CCCCCC"> sure how much I</font>

1414
01:08:30,700 --> 01:08:36,519
can say but if you are<font color="#CCCCCC"> interested in</font>

1415
01:08:34,060 --> 01:08:39,490
this please contact me<font color="#E5E5E5"> I'll put you in</font>

1416
01:08:36,520 --> 01:08:42,790
contact with<font color="#E5E5E5"> them but definitely there</font>

1417
01:08:39,490 --> 01:08:46,029
is a lot of there is a lot of mutation

1418
01:08:42,790 --> 01:08:48,779
of code going on through us cut and

1419
01:08:46,029 --> 01:08:48,779
pasting humans

1420
01:08:49,330 --> 01:09:05,219
like

1421
01:08:56,069 --> 01:09:08,400
well what we've done is up to 24 bits

1422
01:09:05,219 --> 01:09:10,770
plotting well there's a view in<font color="#E5E5E5"> there</font>

1423
01:09:08,399 --> 01:09:15,028
red green and blue to given so a lot of

1424
01:09:10,770 --> 01:09:17,609
for the first of the first eight bits is

1425
01:09:15,029 --> 01:09:19,770
to the red second offense is too green

1426
01:09:17,609 --> 01:09:22,829
and then plastic bits we haven't tried

1427
01:09:19,770 --> 01:09:25,259
above that but<font color="#CCCCCC"> I think ideally we right</font>

1428
01:09:22,828 --> 01:09:27,328
I think<font color="#CCCCCC"> where we're heading I think</font><font color="#E5E5E5"> just</font>

1429
01:09:25,259 --> 01:09:30,899
I<font color="#E5E5E5"> think where we're heading with this is</font>

1430
01:09:27,328 --> 01:09:33,719
something<font color="#E5E5E5"> that can handle anything from</font>

1431
01:09:30,899 --> 01:09:35,429
one bit up to n bytes right and you can

1432
01:09:33,719 --> 01:09:38,339
<font color="#E5E5E5">change the views to look at whatever</font>

1433
01:09:35,429 --> 01:09:41,730
layer you want and because everything it

1434
01:09:38,339 --> 01:09:44,309
isn't in a bit boundary world and it

1435
01:09:41,729 --> 01:09:45,689
would be<font color="#E5E5E5"> nice to be able to you know set</font>

1436
01:09:44,310 --> 01:09:48,199
arbitrary boundaries as you explore

1437
01:09:45,689 --> 01:09:48,198
these things

1438
01:09:49,870 --> 01:10:03,940
like the<font color="#E5E5E5"> petition like my god numerical</font>

1439
01:09:55,150 --> 01:10:05,920
value of that yes yes so we were looking

1440
01:10:03,940 --> 01:10:09,730
into<font color="#E5E5E5"> this and we're looking into off</font>

1441
01:10:05,920 --> 01:10:14,080
into what<font color="#CCCCCC"> may be offsets as well we</font>

1442
01:10:09,730 --> 01:10:16,629
applied<font color="#E5E5E5"> this to captured memory of a ton</font>

1443
01:10:14,080 --> 01:10:20,769
<font color="#E5E5E5">Solaris as it happened because of</font><font color="#CCCCCC"> DTrace</font>

1444
01:10:16,630 --> 01:10:24,760
it's very fun and there are definitely

1445
01:10:20,770 --> 01:10:27,070
structures there it's they are not the

1446
01:10:24,760 --> 01:10:32,890
primitive structures in that they're not

1447
01:10:27,070 --> 01:10:35,290
local there you<font color="#E5E5E5"> know it's so it's hard</font>

1448
01:10:32,890 --> 01:10:38,800
to<font color="#E5E5E5"> just take a snapshot of a piece of</font>

1449
01:10:35,290 --> 01:10:41,350
memory a small piece<font color="#CCCCCC"> of memory and</font>

1450
01:10:38,800 --> 01:10:43,600
suppress it down to something like<font color="#E5E5E5"> the</font>

1451
01:10:41,350 --> 01:10:45,760
digraph and see them but there is<font color="#E5E5E5"> there</font>

1452
01:10:43,600 --> 01:10:50,470
is definitely a structure and you can

1453
01:10:45,760 --> 01:10:58,810
see heaps for example they stand out you

1454
01:10:50,470 --> 01:11:01,840
can see slabs they stand out let's see I

1455
01:10:58,810 --> 01:11:04,330
should<font color="#E5E5E5"> have given i will put the pointer</font>

1456
01:11:01,840 --> 01:11:06,040
to that project to that student again as

1457
01:11:04,330 --> 01:11:08,470
a student project i will put that

1458
01:11:06,040 --> 01:11:12,760
project pointer to the project online so

1459
01:11:08,470 --> 01:11:16,630
yeah it's we hesitated to bring that

1460
01:11:12,760 --> 01:11:19,990
here because<font color="#E5E5E5"> first of all it doesn't</font>

1461
01:11:16,630 --> 01:11:23,380
really fit with the binary with a

1462
01:11:19,990 --> 01:11:27,130
primitive fragments kind of thing and

1463
01:11:23,380 --> 01:11:31,090
secondly there<font color="#CCCCCC"> are other people like</font>

1464
01:11:27,130 --> 01:11:35,350
Danny<font color="#CCCCCC"> Quist looking at grass per se so</font>

1465
01:11:31,090 --> 01:11:38,620
<font color="#CCCCCC">if you look at</font><font color="#E5E5E5"> his recon talk</font><font color="#CCCCCC"> where his</font>

1466
01:11:35,350 --> 01:11:44,170
his previous recon talk or his talk here

1467
01:11:38,620 --> 01:11:46,750
he<font color="#E5E5E5"> used the hypervisor to look at graph</font>

1468
01:11:44,170 --> 01:11:50,320
structures that you get to<font color="#E5E5E5"> see at that</font>

1469
01:11:46,750 --> 01:11:52,740
run time and then pointers actually do

1470
01:11:50,320 --> 01:11:52,740
play a role

1471
01:11:54,510 --> 01:12:13,440
I'll write to them well um yes so that

1472
01:12:10,920 --> 01:12:20,849
would be the<font color="#E5E5E5"> rainfall visualization that</font>

1473
01:12:13,440 --> 01:12:23,848
Greg came up with yes so we have done

1474
01:12:20,849 --> 01:12:25,860
this for Network packets as well the

1475
01:12:23,849 --> 01:12:30,269
<font color="#E5E5E5">project's older so it was the roommate</font>

1476
01:12:25,860 --> 01:12:31,829
tool or um int has a view that will

1477
01:12:30,269 --> 01:12:34,559
allow that's where that one picture was

1478
01:12:31,829 --> 01:12:36,539
generated it has probably about 20

1479
01:12:34,559 --> 01:12:39,389
different views I haven't worked<font color="#E5E5E5"> on</font><font color="#CCCCCC"> it</font>

1480
01:12:36,539 --> 01:12:41,130
<font color="#CCCCCC">about two years but</font><font color="#E5E5E5"> it'll handle well I</font>

1481
01:12:39,389 --> 01:12:43,289
<font color="#E5E5E5">switched from</font><font color="#CCCCCC"> Network packets over to</font>

1482
01:12:41,130 --> 01:12:44,400
binaries is kind of is so<font color="#CCCCCC"> in kind</font><font color="#E5E5E5"> of</font>

1483
01:12:43,289 --> 01:12:46,440
evolved from there<font color="#E5E5E5"> and went down this</font>

1484
01:12:44,400 --> 01:12:49,259
binary path but it's out there and the

1485
01:12:46,440 --> 01:12:53,280
source codes out there too and it has a

1486
01:12:49,260 --> 01:12:55,860
variety<font color="#CCCCCC"> of different windows in there so</font>

1487
01:12:53,280 --> 01:12:58,409
the<font color="#CCCCCC"> problem there is that with the</font>

1488
01:12:55,860 --> 01:13:02,130
<font color="#E5E5E5">packet it's hard to determine what the</font>

1489
01:12:58,409 --> 01:13:04,079
peer group is so for entropy measures to

1490
01:13:02,130 --> 01:13:08,190
work for example<font color="#CCCCCC"> you need to take a</font>

1491
01:13:04,079 --> 01:13:10,230
distribution so taking a distribution

1492
01:13:08,190 --> 01:13:13,348
over a single packet doesn't seem to

1493
01:13:10,230 --> 01:13:15,299
work so well so you need<font color="#E5E5E5"> to get some</font>

1494
01:13:13,349 --> 01:13:16,650
idea of the session but you know in fact

1495
01:13:15,300 --> 01:13:18,780
you're trying to discover what the

1496
01:13:16,650 --> 01:13:20,759
session is and so it's a little bit more

1497
01:13:18,780 --> 01:13:22,530
tricky but it's we're definitely

1498
01:13:20,760 --> 01:13:24,750
planning to do something along these

1499
01:13:22,530 --> 01:13:29,039
lines later let's see how successful

1500
01:13:24,750 --> 01:13:32,130
<font color="#CCCCCC">we'll</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> alright</font><font color="#E5E5E5"> what we're out of time</font>

1501
01:13:29,039 --> 01:13:34,110
if<font color="#E5E5E5"> you are interested in a graduate</font>

1502
01:13:32,130 --> 01:13:36,360
degree that disguises hacking as

1503
01:13:34,110 --> 01:13:40,348
research as academic research consider

1504
01:13:36,360 --> 01:13:44,480
Dartmouth consider our lab at Dartmouth

1505
01:13:40,349 --> 01:13:44,480
well here<font color="#E5E5E5"> we go</font>

