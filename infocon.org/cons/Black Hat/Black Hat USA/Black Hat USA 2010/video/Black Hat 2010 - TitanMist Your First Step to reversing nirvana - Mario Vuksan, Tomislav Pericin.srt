1
00:00:00,000 --> 00:00:05,460
hi everyone<font color="#E5E5E5"> my name is Mario</font><font color="#CCCCCC"> cookson and</font>

2
00:00:03,629 --> 00:00:07,620
I am one of the founders of reversing

3
00:00:05,460 --> 00:00:09,150
labs yes Thomas<font color="#E5E5E5"> la</font><font color="#CCCCCC"> Parisienne who is</font>

4
00:00:07,620 --> 00:00:10,860
another founder of reversing labs and

5
00:00:09,150 --> 00:00:15,960
another team member of ours Mario's

6
00:00:10,860 --> 00:00:17,520
<font color="#CCCCCC">Wyatts and we are a company that pretty</font>

7
00:00:15,960 --> 00:00:21,060
much works on reversing tools and

8
00:00:17,520 --> 00:00:23,820
produces both open source free and

9
00:00:21,060 --> 00:00:27,840
closed source components and today we

10
00:00:23,820 --> 00:00:31,260
are here to<font color="#CCCCCC"> talk</font><font color="#E5E5E5"> about a new open source</font>

11
00:00:27,840 --> 00:00:33,120
project that is going to be very

12
00:00:31,260 --> 00:00:35,730
accessible and very useful to really

13
00:00:33,120 --> 00:00:38,430
wide audience of you know both

14
00:00:35,730 --> 00:00:40,620
researchers and companies and it's

15
00:00:38,430 --> 00:00:44,519
called<font color="#E5E5E5"> Titan missed our goal for this</font>

16
00:00:40,620 --> 00:00:48,419
tool for over next several years is

17
00:00:44,520 --> 00:00:50,399
really to be<font color="#E5E5E5"> a part of your daily life</font>

18
00:00:48,420 --> 00:00:52,590
you know and as we want to call it you

19
00:00:50,399 --> 00:00:54,449
know something that's going to bring the

20
00:00:52,590 --> 00:00:56,760
<font color="#E5E5E5">peace you know to you know or some sort</font>

21
00:00:54,449 --> 00:01:00,030
of calm you know to your reversing

22
00:00:56,760 --> 00:01:04,019
activities anyhow so let me just you

23
00:01:00,030 --> 00:01:07,560
know give you a sense of what we're

24
00:01:04,019 --> 00:01:08,729
going to talk about you know order for

25
00:01:07,560 --> 00:01:11,189
one<font color="#E5E5E5"> you know we definitely want to</font>

26
00:01:08,729 --> 00:01:13,950
explain why<font color="#E5E5E5"> you know we wanted to put</font>

27
00:01:11,189 --> 00:01:17,369
<font color="#CCCCCC">together tighten list what sort of the</font>

28
00:01:13,950 --> 00:01:21,180
problems it's trying to solve and really

29
00:01:17,369 --> 00:01:22,650
<font color="#E5E5E5">it's its effect on the under what</font><font color="#CCCCCC"> we</font>

30
00:01:21,180 --> 00:01:25,770
call human aspect of the security

31
00:01:22,650 --> 00:01:28,439
industry all the issues and problems and

32
00:01:25,770 --> 00:01:31,199
and things we're dealing and how

33
00:01:28,439 --> 00:01:34,408
hopefully Titan list will be able<font color="#CCCCCC"> to</font>

34
00:01:31,200 --> 00:01:36,360
make some some difference<font color="#E5E5E5"> after that</font>

35
00:01:34,409 --> 00:01:38,759
<font color="#CCCCCC">you've got</font><font color="#E5E5E5"> to really you know go deeper</font>

36
00:01:36,360 --> 00:01:41,340
into the dynamic analysis unpacking file

37
00:01:38,759 --> 00:01:43,770
<font color="#CCCCCC">formats and give you a thorough overview</font>

38
00:01:41,340 --> 00:01:46,140
of Titan missed what's our

39
00:01:43,770 --> 00:01:49,949
infrastructure it requires what it takes

40
00:01:46,140 --> 00:01:55,560
to modify it<font color="#CCCCCC"> its code base and obviously</font>

41
00:01:49,950 --> 00:01:58,020
collaborative parts that this project is

42
00:01:55,560 --> 00:02:01,880
all about and then finally<font color="#E5E5E5"> going to look</font>

43
00:01:58,020 --> 00:02:01,880
at our knowledge base of

44
00:02:01,900 --> 00:02:09,640
file formats that are intrinsic part of

45
00:02:06,970 --> 00:02:11,800
this project so anyhow let me just worry

46
00:02:09,639 --> 00:02:15,250
for a few minutes about the server is a

47
00:02:11,800 --> 00:02:17,260
<font color="#E5E5E5">high level motivations behind us and it</font>

48
00:02:15,250 --> 00:02:22,000
really sort of boils down to to the

49
00:02:17,260 --> 00:02:24,220
individual that's that's operating in in

50
00:02:22,000 --> 00:02:26,110
various facets of security today<font color="#E5E5E5"> doing</font>

51
00:02:24,220 --> 00:02:29,020
malware analysis reverse engineering and

52
00:02:26,110 --> 00:02:34,270
you know or penetration testing we're

53
00:02:29,020 --> 00:02:36,400
obviously skills are paramount element

54
00:02:34,270 --> 00:02:38,380
nothing you can<font color="#CCCCCC"> really learn in a school</font>

55
00:02:36,400 --> 00:02:41,950
be educated it's really all the stuff

56
00:02:38,380 --> 00:02:43,990
that<font color="#E5E5E5"> we ourselves had to pick up and you</font>

57
00:02:41,950 --> 00:02:46,420
know you're never<font color="#E5E5E5"> really sure you know</font>

58
00:02:43,990 --> 00:02:49,240
if you really know everything that it

59
00:02:46,420 --> 00:02:51,429
takes to deal with the problems at hand

60
00:02:49,240 --> 00:02:53,020
and then<font color="#E5E5E5"> obviously at the same time you</font>

61
00:02:51,430 --> 00:02:55,600
know you<font color="#E5E5E5"> want to have in a toolbox you</font>

62
00:02:53,020 --> 00:03:00,790
know with<font color="#E5E5E5"> you</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> blocks of things that</font>

63
00:02:55,600 --> 00:03:02,980
can help you complete the job and when

64
00:03:00,790 --> 00:03:06,790
it<font color="#E5E5E5"> comes to two boxes or tools they</font>

65
00:03:02,980 --> 00:03:09,880
generally come up in two<font color="#E5E5E5"> very disparate</font>

66
00:03:06,790 --> 00:03:11,679
categories<font color="#E5E5E5"> they're either very expensive</font>

67
00:03:09,880 --> 00:03:15,070
commercial products you know geared

68
00:03:11,680 --> 00:03:17,320
towards larger organizations not really

69
00:03:15,070 --> 00:03:21,400
targeted towards smaller researchers

70
00:03:17,320 --> 00:03:24,280
independent analysts or others or are

71
00:03:21,400 --> 00:03:26,470
there<font color="#E5E5E5"> they're free or open source tools</font>

72
00:03:24,280 --> 00:03:28,600
that have been produced for a conference

73
00:03:26,470 --> 00:03:30,760
or two maybe they lived for a year and

74
00:03:28,600 --> 00:03:33,160
<font color="#CCCCCC">then abandoned I mean generally poorly</font>

75
00:03:30,760 --> 00:03:35,769
supported granted there are some really

76
00:03:33,160 --> 00:03:37,750
notable exceptions you know holy all the

77
00:03:35,769 --> 00:03:40,810
debug and<font color="#CCCCCC"> metasploit being you know</font>

78
00:03:37,750 --> 00:03:43,840
definitely examples that you know we

79
00:03:40,810 --> 00:03:45,640
ourselves you know want<font color="#E5E5E5"> to live up to</font>

80
00:03:43,840 --> 00:03:49,150
and you know<font color="#E5E5E5"> be with</font><font color="#CCCCCC"> Titan miss dinner</font>

81
00:03:45,640 --> 00:03:51,609
for a year and try to have you<font color="#CCCCCC"> know as</font>

82
00:03:49,150 --> 00:03:52,930
many people collaborating<font color="#CCCCCC"> for the</font>

83
00:03:51,610 --> 00:03:55,780
obviously the benefits of the everyone

84
00:03:52,930 --> 00:04:00,370
else and when<font color="#CCCCCC"> we're really talking</font><font color="#E5E5E5"> about</font>

85
00:03:55,780 --> 00:04:03,040
working together just what a sorting to

86
00:04:00,370 --> 00:04:04,840
take back and say you know that industry

87
00:04:03,040 --> 00:04:07,000
hasn't really been collaborating on

88
00:04:04,840 --> 00:04:10,030
research very much in<font color="#CCCCCC"> the past but with</font>

89
00:04:07,000 --> 00:04:13,030
the growing problems growing numbers of

90
00:04:10,030 --> 00:04:14,490
<font color="#E5E5E5">all types there's more and more</font>

91
00:04:13,030 --> 00:04:16,200
researchers investigated

92
00:04:14,490 --> 00:04:20,220
and<font color="#E5E5E5"> especially security companies</font>

93
00:04:16,200 --> 00:04:23,159
exchanging data collaborating informing

94
00:04:20,220 --> 00:04:26,610
various closed or open lists you know

95
00:04:23,160 --> 00:04:29,340
for for shipping data so but is<font color="#CCCCCC"> that you</font>

96
00:04:26,610 --> 00:04:31,350
know the number of data sets is growing

97
00:04:29,340 --> 00:04:33,270
so are the sample collections that come

98
00:04:31,350 --> 00:04:37,230
in with whatever analysis you have made

99
00:04:33,270 --> 00:04:40,020
<font color="#E5E5E5">and with expanding collections come the</font>

100
00:04:37,230 --> 00:04:41,820
problems you know so you<font color="#CCCCCC"> know how do we</font>

101
00:04:40,020 --> 00:04:43,650
compare the stuff that I got so if I

102
00:04:41,820 --> 00:04:45,690
worked on Stuxnet and another person

103
00:04:43,650 --> 00:04:48,390
worked on<font color="#CCCCCC"> that how do we compare the</font>

104
00:04:45,690 --> 00:04:50,190
samples our notes you know what are

105
00:04:48,390 --> 00:04:52,560
these samples where they came from you

106
00:04:50,190 --> 00:04:55,590
know how do you get a baseline with them

107
00:04:52,560 --> 00:04:57,270
so obviously for anti-malware stuff it

108
00:04:55,590 --> 00:04:59,400
<font color="#CCCCCC">really starts with naming and behavior</font>

109
00:04:57,270 --> 00:05:02,250
conventions all problem you know the

110
00:04:59,400 --> 00:05:04,020
really bad stuff you know that which

111
00:05:02,250 --> 00:05:06,330
gets<font color="#E5E5E5"> only more complicated we start</font>

112
00:05:04,020 --> 00:05:08,969
<font color="#CCCCCC">looking and underlying you know packing</font>

113
00:05:06,330 --> 00:05:10,979
and protection formats and then finally

114
00:05:08,970 --> 00:05:12,600
<font color="#CCCCCC">I meaning the people when they compare</font>

115
00:05:10,980 --> 00:05:15,570
things start looking at you know you

116
00:05:12,600 --> 00:05:17,760
know where'd you get is a sample try to

117
00:05:15,570 --> 00:05:22,860
unpack it is this unpacking variant is

118
00:05:17,760 --> 00:05:25,380
it replicated you know did that run and

119
00:05:22,860 --> 00:05:28,290
then finally you know if you send me<font color="#CCCCCC"> a</font>

120
00:05:25,380 --> 00:05:30,180
report with your collection<font color="#E5E5E5"> really what</font>

121
00:05:28,290 --> 00:05:32,070
<font color="#E5E5E5">did</font><font color="#CCCCCC"> you use to identify the samples with</font>

122
00:05:30,180 --> 00:05:34,620
you know if you use PID what set of

123
00:05:32,070 --> 00:05:35,490
signatures did<font color="#E5E5E5"> you used along with it</font>

124
00:05:34,620 --> 00:05:38,010
you know there's nothing<font color="#E5E5E5"> really</font>

125
00:05:35,490 --> 00:05:39,270
standardized there's really no revision

126
00:05:38,010 --> 00:05:41,490
version that we could use<font color="#CCCCCC"> just to</font>

127
00:05:39,270 --> 00:05:44,010
compare the notes<font color="#E5E5E5"> and be able to compare</font>

128
00:05:41,490 --> 00:05:45,600
what we have on what we don't have so

129
00:05:44,010 --> 00:05:48,870
hence it becomes very<font color="#E5E5E5"> difficult to</font>

130
00:05:45,600 --> 00:05:50,280
really compare the submissions or or

131
00:05:48,870 --> 00:05:51,720
collaborative data from lots of

132
00:05:50,280 --> 00:05:54,359
different<font color="#CCCCCC"> the resources because there is</font>

133
00:05:51,720 --> 00:05:57,510
no you know standards the golden

134
00:05:54,360 --> 00:05:59,520
standard on what these things are and

135
00:05:57,510 --> 00:06:01,320
obviously unpacking is another<font color="#E5E5E5"> thing you</font>

136
00:05:59,520 --> 00:06:03,630
try to unpack it with one of the eight

137
00:06:01,320 --> 00:06:06,780
hundred freely free<font color="#CCCCCC"> scripts are you</font><font color="#E5E5E5"> know</font>

138
00:06:03,630 --> 00:06:08,340
any or any of the AV tools it's a very

139
00:06:06,780 --> 00:06:10,590
difficult<font color="#E5E5E5"> you know to really compare</font>

140
00:06:08,340 --> 00:06:12,570
what version or what has happened

141
00:06:10,590 --> 00:06:16,049
depending on the protection methods used

142
00:06:12,570 --> 00:06:19,500
by<font color="#E5E5E5"> attacker protected so you</font><font color="#CCCCCC"> know to</font>

143
00:06:16,050 --> 00:06:23,640
sort<font color="#E5E5E5"> of cut</font><font color="#CCCCCC"> the real you</font><font color="#E5E5E5"> know story</font>

144
00:06:19,500 --> 00:06:27,210
shorter we envision tightness to be a

145
00:06:23,640 --> 00:06:28,560
unified unpacking solution because you

146
00:06:27,210 --> 00:06:30,539
know we believe people<font color="#CCCCCC"> deafen</font>

147
00:06:28,560 --> 00:06:32,430
we need better tools they need tools

148
00:06:30,540 --> 00:06:35,760
that are<font color="#E5E5E5"> integrated we really want to</font>

149
00:06:32,430 --> 00:06:37,710
put together<font color="#E5E5E5"> the PID lots of you know</font>

150
00:06:35,760 --> 00:06:40,080
all the scripts you know all sorts of

151
00:06:37,710 --> 00:06:42,419
other little tools into one thing<font color="#CCCCCC"> that</font>

152
00:06:40,080 --> 00:06:45,419
you<font color="#E5E5E5"> can download you</font><font color="#CCCCCC"> can rely on have a</font>

153
00:06:42,419 --> 00:06:47,700
version on it and you<font color="#CCCCCC"> know a tool that</font>

154
00:06:45,419 --> 00:06:49,530
will identify sort of disparate

155
00:06:47,700 --> 00:06:52,020
functionalities of uniform

156
00:06:49,530 --> 00:06:55,049
identification analysis and then

157
00:06:52,020 --> 00:06:57,659
obviously unpacking and you know<font color="#E5E5E5"> this</font>

158
00:06:55,050 --> 00:06:59,130
has to be alternative to commercial

159
00:06:57,660 --> 00:07:00,330
solutions because you know II you<font color="#CCCCCC"> know</font>

160
00:06:59,130 --> 00:07:02,550
there is<font color="#E5E5E5"> really no guarantee that</font>

161
00:07:00,330 --> 00:07:05,250
everybody can have the same commercial

162
00:07:02,550 --> 00:07:08,040
solution beat and AV product or being

163
00:07:05,250 --> 00:07:09,570
one of the commercial sandboxes it's

164
00:07:08,040 --> 00:07:11,250
very important that<font color="#E5E5E5"> we have an open free</font>

165
00:07:09,570 --> 00:07:14,040
enter you know let's say

166
00:07:11,250 --> 00:07:16,020
vendor-independent solution and as such

167
00:07:14,040 --> 00:07:18,300
for example<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know we</font><font color="#E5E5E5"> are</font>

168
00:07:16,020 --> 00:07:21,479
collaborating with the I Triple E<font color="#E5E5E5"> mal</font>

169
00:07:18,300 --> 00:07:23,370
<font color="#E5E5E5">mal working group where a dad</font>

170
00:07:21,479 --> 00:07:26,250
organization for the<font color="#E5E5E5"> benefit of the</font>

171
00:07:23,370 --> 00:07:30,090
vendor collaboration will add one more

172
00:07:26,250 --> 00:07:32,400
module to tighten missed<font color="#E5E5E5"> it's the</font><font color="#CCCCCC"> form</font>

173
00:07:30,090 --> 00:07:35,070
identification a library<font color="#CCCCCC"> that was</font>

174
00:07:32,400 --> 00:07:38,789
developed<font color="#CCCCCC"> by</font><font color="#E5E5E5"> Peter ferry of Microsoft</font>

175
00:07:35,070 --> 00:07:41,190
that they're still clearing the

176
00:07:38,789 --> 00:07:44,010
licensing issues to release<font color="#CCCCCC"> that you</font>

177
00:07:41,190 --> 00:07:45,840
know into public and we have already

178
00:07:44,010 --> 00:07:47,940
<font color="#E5E5E5">asked you know if we could</font><font color="#CCCCCC"> potentially</font>

179
00:07:45,840 --> 00:07:50,340
include this part for<font color="#E5E5E5"> the general public</font>

180
00:07:47,940 --> 00:07:52,860
but<font color="#CCCCCC"> you know we do expect</font><font color="#E5E5E5"> that you know</font>

181
00:07:50,340 --> 00:07:58,200
at least to be<font color="#E5E5E5"> integrated with tightness</font>

182
00:07:52,860 --> 00:08:00,660
in the short term and hopefully given to

183
00:07:58,200 --> 00:08:03,180
everybody not just vendors who

184
00:08:00,660 --> 00:08:09,990
participate in it<font color="#CCCCCC"> I Tripoli</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> workgroup</font>

185
00:08:03,180 --> 00:08:12,180
anyhow<font color="#E5E5E5"> so the just a second half yeah so</font>

186
00:08:09,990 --> 00:08:15,090
the bottom line of<font color="#CCCCCC"> this thing is is that</font>

187
00:08:12,180 --> 00:08:17,070
you know we have pretty<font color="#CCCCCC"> much two sets of</font>

188
00:08:15,090 --> 00:08:18,510
goals 11 our technological goals and

189
00:08:17,070 --> 00:08:21,060
other one our community goals you know

190
00:08:18,510 --> 00:08:23,940
so we want faster analysis for different

191
00:08:21,060 --> 00:08:26,190
use cases beat malware cracked software

192
00:08:23,940 --> 00:08:28,469
vulnerable applications whether you're

193
00:08:26,190 --> 00:08:31,440
<font color="#CCCCCC">interested in</font><font color="#E5E5E5"> the removal of association</font>

194
00:08:28,470 --> 00:08:33,570
or building of better heuristic systems

195
00:08:31,440 --> 00:08:35,400
and then<font color="#E5E5E5"> obviously we want this thing to</font>

196
00:08:33,570 --> 00:08:38,099
be you know you know highly accessible

197
00:08:35,400 --> 00:08:39,809
so the full install not just source code

198
00:08:38,099 --> 00:08:41,810
that you have to compile and you know

199
00:08:39,809 --> 00:08:46,069
<font color="#E5E5E5">and deal with but you know</font>

200
00:08:41,809 --> 00:08:48,859
something that easily reachable open and

201
00:08:46,070 --> 00:08:51,890
free and then on another on<font color="#E5E5E5"> the</font>

202
00:08:48,860 --> 00:08:54,350
community side we want really to be have

203
00:08:51,890 --> 00:08:58,640
a global open solution not only for

204
00:08:54,350 --> 00:09:01,070
<font color="#E5E5E5">antivirus labs but you know also for the</font>

205
00:08:58,640 --> 00:09:02,839
general public you know that cannot

206
00:09:01,070 --> 00:09:04,640
afford specialized and expensive tool

207
00:09:02,839 --> 00:09:06,950
sets that is looking for open and free

208
00:09:04,640 --> 00:09:10,370
alternatives and something<font color="#CCCCCC"> that's</font>

209
00:09:06,950 --> 00:09:14,330
actually well supported so we will have

210
00:09:10,370 --> 00:09:16,670
forums<font color="#CCCCCC"> knowledge base and thomas level</font>

211
00:09:14,330 --> 00:09:18,620
will tell you more about it and the main

212
00:09:16,670 --> 00:09:20,689
point being you know let's try to have

213
00:09:18,620 --> 00:09:23,540
multiple authors around one single

214
00:09:20,690 --> 00:09:25,460
distribution that we could agree on as I

215
00:09:23,540 --> 00:09:28,910
serve the reference point in our

216
00:09:25,460 --> 00:09:31,580
information exchanges and then<font color="#E5E5E5"> obviously</font>

217
00:09:28,910 --> 00:09:34,610
the the website itself you know<font color="#E5E5E5"> is</font>

218
00:09:31,580 --> 00:09:39,890
hoping<font color="#CCCCCC"> to be one place for 44 different</font>

219
00:09:34,610 --> 00:09:43,220
comments and information about the

220
00:09:39,890 --> 00:09:48,980
formats and components of tightness

221
00:09:43,220 --> 00:09:52,250
right so with that I will pass the baton

222
00:09:48,980 --> 00:09:59,150
to Tommy<font color="#E5E5E5"> Slava to give you a deeper dive</font>

223
00:09:52,250 --> 00:10:00,800
into tightness<font color="#CCCCCC"> ok it works</font><font color="#E5E5E5"> now hello</font>

224
00:09:59,150 --> 00:10:02,449
<font color="#E5E5E5">everyone my</font><font color="#CCCCCC"> name is Thomas la virgen i'm</font>

225
00:10:00,800 --> 00:10:04,160
one of the founders of reversing Labs

226
00:10:02,450 --> 00:10:06,290
Corporation and I'm here today to tell

227
00:10:04,160 --> 00:10:09,170
you all the nuts and bolts up behind the

228
00:10:06,290 --> 00:10:10,849
tightness project so if you remember

229
00:10:09,170 --> 00:10:12,439
from the<font color="#CCCCCC"> last year we were here at</font><font color="#E5E5E5"> the</font>

230
00:10:10,850 --> 00:10:15,110
same place<font color="#E5E5E5"> and we gave a presentation</font>

231
00:10:12,440 --> 00:10:16,790
about the<font color="#E5E5E5"> Titan engine project and the</font>

232
00:10:15,110 --> 00:10:19,100
Titan engine project is an open source

233
00:10:16,790 --> 00:10:20,540
library with about 400 functions that

234
00:10:19,100 --> 00:10:23,210
enables you to create<font color="#E5E5E5"> your own</font>

235
00:10:20,540 --> 00:10:26,319
linebackers now it<font color="#CCCCCC"> is the</font><font color="#E5E5E5"> Titan engine</font>

236
00:10:23,210 --> 00:10:26,320
on the<font color="#E5E5E5"> witch this</font>

237
00:10:26,390 --> 00:10:33,290
okay sorry it is the title engine on

238
00:10:31,280 --> 00:10:38,240
which this project has been<font color="#E5E5E5"> built and</font>

239
00:10:33,290 --> 00:10:41,630
you can basically basically think about

240
00:10:38,240 --> 00:10:44,780
the think about<font color="#E5E5E5"> the title based project</font>

241
00:10:41,630 --> 00:10:48,230
as the database around the Titan engine

242
00:10:44,780 --> 00:10:51,770
so that's the basic idea behind the

243
00:10:48,230 --> 00:10:54,410
title mess so in the basic introduction

244
00:10:51,770 --> 00:10:56,300
you have<font color="#CCCCCC"> a title</font><font color="#E5E5E5"> missed as there yes it</font>

245
00:10:54,410 --> 00:10:59,150
has its own key features and that's a

246
00:10:56,300 --> 00:11:02,839
tool for format identification and tool

247
00:10:59,150 --> 00:11:04,730
for specific unpacking so in a way we

248
00:11:02,840 --> 00:11:06,650
created a database that<font color="#E5E5E5"> connects both in</font>

249
00:11:04,730 --> 00:11:11,390
a vacation and I'm backing in a single

250
00:11:06,650 --> 00:11:13,160
layer so all the information<font color="#E5E5E5"> about the</font>

251
00:11:11,390 --> 00:11:15,140
<font color="#E5E5E5">formats that are currently is aborted</font>

252
00:11:13,160 --> 00:11:16,819
and<font color="#E5E5E5"> that are going to be supported is</font>

253
00:11:15,140 --> 00:11:19,069
going to be available freely in the

254
00:11:16,820 --> 00:11:20,990
<font color="#E5E5E5">public database that with public</font>

255
00:11:19,070 --> 00:11:22,760
knowledge base we just talked about<font color="#E5E5E5"> and</font>

256
00:11:20,990 --> 00:11:25,310
that's going<font color="#E5E5E5"> to be a Wikipedia like</font>

257
00:11:22,760 --> 00:11:26,990
website which is online right now and

258
00:11:25,310 --> 00:11:29,989
you can go to our website and check it

259
00:11:26,990 --> 00:11:32,690
out so the<font color="#E5E5E5"> idea behind the project is</font>

260
00:11:29,990 --> 00:11:35,030
<font color="#CCCCCC">that the project is itself is easily</font>

261
00:11:32,690 --> 00:11:37,220
extendable example and the community

262
00:11:35,030 --> 00:11:39,439
supported and of<font color="#CCCCCC"> course since we added</font>

263
00:11:37,220 --> 00:11:41,660
an update feature to the tightness

264
00:11:39,440 --> 00:11:43,190
project tightness project is always up

265
00:11:41,660 --> 00:11:44,870
to date<font color="#E5E5E5"> so we're always up to date your</font>

266
00:11:43,190 --> 00:11:47,960
signatures and<font color="#E5E5E5"> am backers directly from</font>

267
00:11:44,870 --> 00:11:49,190
our<font color="#CCCCCC"> website so as people contribute the</font>

268
00:11:47,960 --> 00:11:50,960
different solutions to different

269
00:11:49,190 --> 00:11:54,290
problems that<font color="#E5E5E5"> will be available as soon</font>

270
00:11:50,960 --> 00:11:56,600
<font color="#E5E5E5">as possible so</font><font color="#CCCCCC"> the infrastructure behind</font>

271
00:11:54,290 --> 00:11:58,520
the item is project is really<font color="#E5E5E5"> simple so</font>

272
00:11:56,600 --> 00:12:00,110
the<font color="#CCCCCC"> titan list unify its potent if</font>

273
00:11:58,520 --> 00:12:02,750
occasion and<font color="#CCCCCC"> i'm packing in a single</font>

274
00:12:00,110 --> 00:12:04,460
layer and it has an update feature and

275
00:12:02,750 --> 00:12:06,230
at the back end has acknowledged

276
00:12:04,460 --> 00:12:08,870
knowledge base that serves as a

277
00:12:06,230 --> 00:12:11,150
reference point for further research so

278
00:12:08,870 --> 00:12:14,300
the the knowledge base is just back in

279
00:12:11,150 --> 00:12:16,520
information for your<font color="#E5E5E5"> research and just</font>

280
00:12:14,300 --> 00:12:20,060
have some samples and whatever<font color="#E5E5E5"> you need</font>

281
00:12:16,520 --> 00:12:22,699
<font color="#CCCCCC">to conduct your research so the basic</font>

282
00:12:20,060 --> 00:12:26,660
layout<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the database is as follows on</font>

283
00:12:22,700 --> 00:12:28,640
<font color="#CCCCCC">the screen</font><font color="#E5E5E5"> so in a nutshell it's an xml</font>

284
00:12:26,660 --> 00:12:32,270
database which has

285
00:12:28,640 --> 00:12:36,770
which<font color="#CCCCCC"> has the following</font><font color="#E5E5E5"> features so for</font>

286
00:12:32,270 --> 00:12:38,090
<font color="#E5E5E5">example it doesn't work</font><font color="#CCCCCC"> you can we</font>

287
00:12:36,770 --> 00:12:57,620
switch them on the regular Mike yeah

288
00:12:38,090 --> 00:13:05,060
because<font color="#E5E5E5"> this video is working yeah okay</font>

289
00:12:57,620 --> 00:13:07,340
testing<font color="#CCCCCC"> all right ok so the database</font>

290
00:13:05,060 --> 00:13:09,469
looks like this it's basically an XML

291
00:13:07,340 --> 00:13:10,790
file which has all the signatures and

292
00:13:09,470 --> 00:13:14,570
all the patterns you need to identify

293
00:13:10,790 --> 00:13:17,150
files so if you<font color="#E5E5E5"> look at the sample xml</font>

294
00:13:14,570 --> 00:13:21,530
output it's basically a database of

295
00:13:17,150 --> 00:13:25,400
entries and my entry mean we mean one or

296
00:13:21,530 --> 00:13:27,260
<font color="#E5E5E5">more signatures that connect that entry</font>

297
00:13:25,400 --> 00:13:29,689
to a specific format so you<font color="#E5E5E5"> can have</font>

298
00:13:27,260 --> 00:13:32,000
signatures multiple signatures for a

299
00:13:29,690 --> 00:13:34,220
single single format so one entry would

300
00:13:32,000 --> 00:13:36,260
<font color="#E5E5E5">be lets say you PX and you can have</font>

301
00:13:34,220 --> 00:13:39,320
multiple signatures for the upx file

302
00:13:36,260 --> 00:13:40,850
format and correlate it to that you have

303
00:13:39,320 --> 00:13:42,410
em packers which you can have multiple

304
00:13:40,850 --> 00:13:46,070
types of them and we're going to<font color="#E5E5E5"> talk</font>

305
00:13:42,410 --> 00:13:49,610
about<font color="#E5E5E5"> that a bit later and once you have</font>

306
00:13:46,070 --> 00:13:52,130
the match the available<font color="#CCCCCC"> n</font><font color="#E5E5E5"> backers can be</font>

307
00:13:49,610 --> 00:13:54,410
called so the process<font color="#CCCCCC"> of unpacking is</font>

308
00:13:52,130 --> 00:13:56,030
automatic you have some<font color="#CCCCCC"> other fields</font>

309
00:13:54,410 --> 00:13:57,860
that describe the file formats you have

310
00:13:56,030 --> 00:14:00,319
the name<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the format which in the u.p</font>

311
00:13:57,860 --> 00:14:02,630
<font color="#CCCCCC">access case would be upx you have a URL</font>

312
00:14:00,320 --> 00:14:05,360
which is a link<font color="#E5E5E5"> to our website the</font>

313
00:14:02,630 --> 00:14:07,400
<font color="#E5E5E5">knowledge base and that will hold all</font>

314
00:14:05,360 --> 00:14:10,490
the information<font color="#E5E5E5"> about the format have</font>

315
00:14:07,400 --> 00:14:12,380
the version<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the of the format that's</font>

316
00:14:10,490 --> 00:14:15,800
global<font color="#E5E5E5"> and you can also have a version</font>

317
00:14:12,380 --> 00:14:17,450
<font color="#E5E5E5">for each of the signatures and you have</font>

318
00:14:15,800 --> 00:14:19,189
the priority but we'll talk about that a

319
00:14:17,450 --> 00:14:21,290
bit later and have the author of the

320
00:14:19,190 --> 00:14:23,390
packer so that's the<font color="#E5E5E5"> basic information</font>

321
00:14:21,290 --> 00:14:25,400
that's been held in the<font color="#E5E5E5"> database at all</font>

322
00:14:23,390 --> 00:14:28,189
times now you have a default database

323
00:14:25,400 --> 00:14:30,140
with<font color="#CCCCCC"> the program</font><font color="#E5E5E5"> itself which is loaded</font>

324
00:14:28,190 --> 00:14:31,880
each time it start fightin list or you

325
00:14:30,140 --> 00:14:33,800
can create<font color="#CCCCCC"> your own database and just</font>

326
00:14:31,880 --> 00:14:38,720
use that database as your reference

327
00:14:33,800 --> 00:14:41,240
point now identification part is first

328
00:14:38,720 --> 00:14:42,450
part of<font color="#E5E5E5"> the title based project and it</font>

329
00:14:41,240 --> 00:14:44,310
is very important because

330
00:14:42,450 --> 00:14:46,260
since we are building a specific<font color="#E5E5E5"> am</font>

331
00:14:44,310 --> 00:14:48,750
<font color="#E5E5E5">packer for a specific file format we</font>

332
00:14:46,260 --> 00:14:51,960
need to know which format it is and know

333
00:14:48,750 --> 00:14:54,330
which version it<font color="#E5E5E5"> is so these signatures</font>

334
00:14:51,960 --> 00:14:56,850
<font color="#CCCCCC">are laid out in the database and they</font>

335
00:14:54,330 --> 00:14:58,800
can be<font color="#E5E5E5"> both simple and complex they are</font>

336
00:14:56,850 --> 00:15:00,390
grouped<font color="#E5E5E5"> into entries so as I said you</font>

337
00:14:58,800 --> 00:15:02,430
can<font color="#CCCCCC"> have multiple signatures for a</font>

338
00:15:00,390 --> 00:15:03,930
single file format because there are

339
00:15:02,430 --> 00:15:06,180
different<font color="#CCCCCC"> versions and packers of all</font>

340
00:15:03,930 --> 00:15:09,030
over time and the detection is either

341
00:15:06,180 --> 00:15:11,160
global by the entries we have one

342
00:15:09,030 --> 00:15:13,920
version for the air for<font color="#CCCCCC"> the entry and</font>

343
00:15:11,160 --> 00:15:17,550
you can have specific detection for the

344
00:15:13,920 --> 00:15:20,280
signature as well and the entries are

345
00:15:17,550 --> 00:15:22,709
linked to the am<font color="#E5E5E5"> packers which are</font>

346
00:15:20,280 --> 00:15:25,170
called once you tell the title<font color="#E5E5E5"> misto and</font>

347
00:15:22,710 --> 00:15:26,730
<font color="#CCCCCC">pack the file your you're interested in</font>

348
00:15:25,170 --> 00:15:30,750
<font color="#E5E5E5">and they are both link to the online</font>

349
00:15:26,730 --> 00:15:34,170
knowledgebase so when we started coding

350
00:15:30,750 --> 00:15:35,640
<font color="#E5E5E5">this project we asked ourselves what are</font>

351
00:15:34,170 --> 00:15:37,740
the reference points from which we have

352
00:15:35,640 --> 00:15:39,120
to start our pattern matching so we have

353
00:15:37,740 --> 00:15:40,410
a couple<font color="#CCCCCC"> of these so we</font><font color="#E5E5E5"> can start the</font>

354
00:15:39,120 --> 00:15:43,230
pattern matching from the start of the

355
00:15:40,410 --> 00:15:44,400
file and that can<font color="#E5E5E5"> be useful many</font>

356
00:15:43,230 --> 00:15:46,590
situations we're going to talk about

357
00:15:44,400 --> 00:15:48,990
<font color="#E5E5E5">that bit later as well and</font><font color="#CCCCCC"> we have the</font>

358
00:15:46,590 --> 00:15:51,030
standard you notification which starts

359
00:15:48,990 --> 00:15:53,040
from the entry point of the file which

360
00:15:51,030 --> 00:15:54,839
<font color="#CCCCCC">is in the stop and we also added</font><font color="#E5E5E5"> a</font>

361
00:15:53,040 --> 00:15:56,670
<font color="#E5E5E5">something that could</font><font color="#CCCCCC"> be useful in the</font>

362
00:15:54,840 --> 00:15:58,920
future<font color="#E5E5E5"> and that's pattern matching from</font>

363
00:15:56,670 --> 00:16:01,050
the overlay so those<font color="#CCCCCC"> are the</font><font color="#E5E5E5"> basic</font>

364
00:15:58,920 --> 00:16:04,020
pattern matching options you have for

365
00:16:01,050 --> 00:16:05,969
each of the signatures<font color="#CCCCCC"> so the</font>

366
00:16:04,020 --> 00:16:07,590
identification can start from the entry

367
00:16:05,970 --> 00:16:09,840
<font color="#E5E5E5">point and these are the default settings</font>

368
00:16:07,590 --> 00:16:12,300
listed so for the entry point default is

369
00:16:09,840 --> 00:16:14,460
match a pattern for the overlay<font color="#E5E5E5"> its a</font>

370
00:16:12,300 --> 00:16:16,380
<font color="#E5E5E5">math but the</font><font color="#CCCCCC"> major</font><font color="#E5E5E5"> pattern as well for</font>

371
00:16:14,460 --> 00:16:18,060
the beginning<font color="#E5E5E5"> of the file is also</font>

372
00:16:16,380 --> 00:16:20,730
matching but you also have a switch that

373
00:16:18,060 --> 00:16:23,489
enables you to scan the entire file for

374
00:16:20,730 --> 00:16:24,930
the selected pattern now since these are

375
00:16:23,490 --> 00:16:26,430
<font color="#CCCCCC">the default values that can be</font>

376
00:16:24,930 --> 00:16:28,949
overwritten so each and every one of

377
00:16:26,430 --> 00:16:30,930
<font color="#E5E5E5">these patterns can be a switch to seek</font>

378
00:16:28,950 --> 00:16:34,290
which means just search<font color="#CCCCCC"> for the</font><font color="#E5E5E5"> pattern</font>

379
00:16:30,930 --> 00:16:36,449
from that reference point now the simple

380
00:16:34,290 --> 00:16:38,730
patterns if you use<font color="#E5E5E5"> PID before it has</font>

381
00:16:36,450 --> 00:16:40,590
the user database which contains lots of

382
00:16:38,730 --> 00:16:43,170
these signatures and the<font color="#E5E5E5"> most basic</font>

383
00:16:40,590 --> 00:16:45,720
<font color="#E5E5E5">signature type is</font><font color="#CCCCCC"> the one we refer to as</font>

384
00:16:43,170 --> 00:16:48,449
a simple one<font color="#E5E5E5"> and it enables you to</font>

385
00:16:45,720 --> 00:16:50,700
create a simple pattern that identifies

386
00:16:48,450 --> 00:16:54,030
the format so we can have wild cards

387
00:16:50,700 --> 00:16:55,710
which match any bite in the<font color="#E5E5E5"> sequence or</font>

388
00:16:54,030 --> 00:16:56,130
you can have bit masking that either

389
00:16:55,710 --> 00:16:59,340
match

390
00:16:56,130 --> 00:17:00,870
the high or the low bit so for<font color="#E5E5E5"> example</font>

391
00:16:59,340 --> 00:17:04,410
if<font color="#E5E5E5"> you</font><font color="#CCCCCC"> look at the screen that's the</font>

392
00:17:00,870 --> 00:17:07,199
simple upx pattern that has wild cards

393
00:17:04,410 --> 00:17:11,010
for the<font color="#E5E5E5"> boat bite and the a bit masking</font>

394
00:17:07,199 --> 00:17:13,560
options now<font color="#CCCCCC"> we look we looked at this</font>

395
00:17:11,010 --> 00:17:15,180
and said okay<font color="#E5E5E5"> this is fine but we have</font>

396
00:17:13,560 --> 00:17:17,970
to improve this<font color="#E5E5E5"> if we're going to have</font>

397
00:17:15,180 --> 00:17:22,319
more complex patterns that can identify

398
00:17:17,970 --> 00:17:24,540
formats better so to improve<font color="#CCCCCC"> this we</font>

399
00:17:22,319 --> 00:17:26,699
first identify the problems and<font color="#CCCCCC"> the</font>

400
00:17:24,540 --> 00:17:28,500
problem number one we identified and if

401
00:17:26,699 --> 00:17:30,870
you look at the<font color="#E5E5E5"> code that's basically</font>

402
00:17:28,500 --> 00:17:33,420
just my you p example and that's the

403
00:17:30,870 --> 00:17:36,149
entry point of the upx tub so the

404
00:17:33,420 --> 00:17:38,730
highlight is part shows a random number

405
00:17:36,150 --> 00:17:41,280
of knob<font color="#CCCCCC"> bites</font><font color="#E5E5E5"> which is just an</font><font color="#CCCCCC"> ops lied</font>

406
00:17:38,730 --> 00:17:44,010
and four different versions there are

407
00:17:41,280 --> 00:17:45,960
different<font color="#CCCCCC"> numbers of these</font><font color="#E5E5E5"> bites so in</font>

408
00:17:44,010 --> 00:17:48,870
order not to have too many signatures

409
00:17:45,960 --> 00:17:50,520
for just upx we have the wild<font color="#E5E5E5"> card to</font>

410
00:17:48,870 --> 00:17:52,649
our pattern matching which looks like

411
00:17:50,520 --> 00:17:56,490
<font color="#CCCCCC">this</font><font color="#E5E5E5"> so our complex pattern matching</font>

412
00:17:52,650 --> 00:18:00,930
would look like<font color="#E5E5E5"> star than the than our</font>

413
00:17:56,490 --> 00:18:03,030
pattern and then in<font color="#CCCCCC"> D in the</font><font color="#E5E5E5"> part</font>

414
00:18:00,930 --> 00:18:06,360
assists you will have divided which

415
00:18:03,030 --> 00:18:08,490
repeats indefinite amount of time so for

416
00:18:06,360 --> 00:18:12,090
the previous<font color="#E5E5E5"> sample that would match an</font>

417
00:18:08,490 --> 00:18:13,980
<font color="#E5E5E5">op or x value</font><font color="#CCCCCC"> 94 as long as there are</font>

418
00:18:12,090 --> 00:18:16,320
knobs and after that<font color="#CCCCCC"> if we'll just</font>

419
00:18:13,980 --> 00:18:17,970
continue pattern matching so this solves

420
00:18:16,320 --> 00:18:19,889
a couple of problems<font color="#E5E5E5"> this solves a</font>

421
00:18:17,970 --> 00:18:22,500
problem where<font color="#CCCCCC"> we have bites that I</font>

422
00:18:19,890 --> 00:18:24,660
repeat each other but we don't know<font color="#CCCCCC"> the</font>

423
00:18:22,500 --> 00:18:27,300
exact number<font color="#CCCCCC"> of repetitions and this</font>

424
00:18:24,660 --> 00:18:30,510
solves the problem of having<font color="#CCCCCC"> two long</font>

425
00:18:27,300 --> 00:18:32,040
signatures in our in our<font color="#E5E5E5"> database so</font>

426
00:18:30,510 --> 00:18:34,020
that's<font color="#E5E5E5"> the first problem we try to solve</font>

427
00:18:32,040 --> 00:18:36,840
and that's how you apply<font color="#E5E5E5"> it to the</font>

428
00:18:34,020 --> 00:18:38,430
previous sample so the problem number

429
00:18:36,840 --> 00:18:43,740
two we saw the problem number<font color="#E5E5E5"> two</font>

430
00:18:38,430 --> 00:18:46,110
identified to<font color="#E5E5E5"> the to the random bytes</font>

431
00:18:43,740 --> 00:18:47,700
that can be used as well so if you<font color="#E5E5E5"> look</font>

432
00:18:46,110 --> 00:18:50,610
at<font color="#E5E5E5"> the highlighted part that's a jump</font>

433
00:18:47,700 --> 00:18:52,470
and throughout<font color="#CCCCCC"> the versions of upx that</font>

434
00:18:50,610 --> 00:18:57,570
jump can have certain values so it can

435
00:18:52,470 --> 00:19:00,450
increase or decrease in jump in jump

436
00:18:57,570 --> 00:19:02,159
blanked so that in<font color="#E5E5E5"> order to</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> a</font>

437
00:19:00,450 --> 00:19:04,110
simple signature that's not just going

438
00:19:02,160 --> 00:19:07,770
to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> a bet masking for the value of the</font>

439
00:19:04,110 --> 00:19:08,939
jump we added ranges so if you<font color="#E5E5E5"> look at</font>

440
00:19:07,770 --> 00:19:11,520
<font color="#E5E5E5">the signature now</font>

441
00:19:08,940 --> 00:19:13,830
there's a there's another piece of the

442
00:19:11,520 --> 00:19:15,990
<font color="#CCCCCC">it which is highlighted</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> it's</font>

443
00:19:13,830 --> 00:19:18,899
indicates the range in which that

444
00:19:15,990 --> 00:19:21,390
particular byte is so if the range is in

445
00:19:18,900 --> 00:19:23,520
between 0 0 and 7 f that<font color="#E5E5E5"> bite is always</font>

446
00:19:21,390 --> 00:19:24,960
going<font color="#E5E5E5"> to be in that jump is always going</font>

447
00:19:23,520 --> 00:19:26,580
<font color="#E5E5E5">to be in the positive direction so you</font>

448
00:19:24,960 --> 00:19:29,610
can indicate that as well<font color="#E5E5E5"> and you can</font>

449
00:19:26,580 --> 00:19:31,860
make<font color="#E5E5E5"> these rules as you</font><font color="#CCCCCC"> like now this</font>

450
00:19:29,610 --> 00:19:34,530
solves<font color="#CCCCCC"> a bit more problems not just</font>

451
00:19:31,860 --> 00:19:36,270
jumps it solves the problem of register

452
00:19:34,530 --> 00:19:38,460
permutation as well because you can

453
00:19:36,270 --> 00:19:41,460
<font color="#E5E5E5">select a range in which the registers</font>

454
00:19:38,460 --> 00:19:44,310
are present inside the instruction so

455
00:19:41,460 --> 00:19:47,580
you can indicate that as the part of the

456
00:19:44,310 --> 00:19:49,830
pattern as well so another problem<font color="#CCCCCC"> that</font>

457
00:19:47,580 --> 00:19:53,159
we<font color="#CCCCCC"> noticed while working on backers is</font>

458
00:19:49,830 --> 00:19:55,889
the problem of that certain code can be

459
00:19:53,160 --> 00:19:57,870
there<font color="#E5E5E5"> just in certain certain cases so</font>

460
00:19:55,890 --> 00:20:00,240
for this particular example and this is

461
00:19:57,870 --> 00:20:02,010
upx as well and this is a dynamic link

462
00:20:00,240 --> 00:20:04,140
library so the first<font color="#E5E5E5"> two instructions</font>

463
00:20:02,010 --> 00:20:06,330
that are highlighted<font color="#E5E5E5"> are only there if</font>

464
00:20:04,140 --> 00:20:08,070
the file is a dynamic link library so

465
00:20:06,330 --> 00:20:10,500
the<font color="#E5E5E5"> rest of the signature would apply</font>

466
00:20:08,070 --> 00:20:13,290
which we just written would be<font color="#E5E5E5"> would</font>

467
00:20:10,500 --> 00:20:15,750
apply<font color="#CCCCCC"> to this as well if there weren't</font>

468
00:20:13,290 --> 00:20:18,120
for these two instructions in<font color="#E5E5E5"> front so</font>

469
00:20:15,750 --> 00:20:20,310
what we did is we<font color="#E5E5E5"> added an optional a</font>

470
00:20:18,120 --> 00:20:23,189
part of the pattern so<font color="#E5E5E5"> in the</font>

471
00:20:20,310 --> 00:20:25,770
highlighted part says that only if the

472
00:20:23,190 --> 00:20:28,950
entire piece of the pattern is present

473
00:20:25,770 --> 00:20:31,139
that piece of<font color="#E5E5E5"> the pattern is valid so if</font>

474
00:20:28,950 --> 00:20:32,820
the piece<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the pattern is present the</font>

475
00:20:31,140 --> 00:20:35,670
pattern matching will continue from

476
00:20:32,820 --> 00:20:37,679
about 60 and if it's not present<font color="#E5E5E5"> that</font>

477
00:20:35,670 --> 00:20:40,620
the optional part will just be skipped

478
00:20:37,680 --> 00:20:42,810
and this solves all sorts of problems as

479
00:20:40,620 --> 00:20:44,699
<font color="#CCCCCC">well this sort solves the problem of</font>

480
00:20:42,810 --> 00:20:46,200
optional instructions as we just saw at

481
00:20:44,700 --> 00:20:49,020
the entry point but that can be in

482
00:20:46,200 --> 00:20:50,520
either place in the file and this solves

483
00:20:49,020 --> 00:20:52,440
the multiple signatures problem because

484
00:20:50,520 --> 00:20:54,930
now we don't<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to have two signatures</font>

485
00:20:52,440 --> 00:20:58,830
one for the<font color="#CCCCCC"> DLL and 140 executive all</font>

486
00:20:54,930 --> 00:21:03,180
for the upx now another problem we saw

487
00:20:58,830 --> 00:21:05,340
is this example is me w packer and it

488
00:21:03,180 --> 00:21:07,410
has a jump at the entry point which

489
00:21:05,340 --> 00:21:09,000
leads to the specific location inside

490
00:21:07,410 --> 00:21:13,020
the portable executive all header and

491
00:21:09,000 --> 00:21:15,420
that the statical statical address in

492
00:21:13,020 --> 00:21:17,250
the header<font color="#E5E5E5"> you have the code which</font><font color="#CCCCCC"> is an</font>

493
00:21:15,420 --> 00:21:21,030
entire stock for that particular<font color="#E5E5E5"> Packer</font>

494
00:21:17,250 --> 00:21:22,230
so what we did is we<font color="#E5E5E5"> added the following</font>

495
00:21:21,030 --> 00:21:26,250
complex pattern

496
00:21:22,230 --> 00:21:28,260
which enables you to jump skip so if we

497
00:21:26,250 --> 00:21:29,940
<font color="#E5E5E5">set the pattern matching from the</font>

498
00:21:28,260 --> 00:21:32,250
beginning of<font color="#E5E5E5"> the file and we matched it</font>

499
00:21:29,940 --> 00:21:34,590
to first two<font color="#E5E5E5"> bytes which is just an MZ</font>

500
00:21:32,250 --> 00:21:37,020
for the header and we say okay jump the

501
00:21:34,590 --> 00:21:41,010
certain number of bytes that will be 152

502
00:21:37,020 --> 00:21:42,750
in the me wks so that's hexadecimal<font color="#CCCCCC"> and</font>

503
00:21:41,010 --> 00:21:44,250
then we can just<font color="#E5E5E5"> continue our pattern</font>

504
00:21:42,750 --> 00:21:46,860
matching so this will compact our

505
00:21:44,250 --> 00:21:50,610
signature we don't have to have I 152

506
00:21:46,860 --> 00:21:53,820
hexadecimal decimal wild cards because

507
00:21:50,610 --> 00:21:55,830
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> really no</font><font color="#CCCCCC"> need for this and this</font>

508
00:21:53,820 --> 00:21:57,629
jumping can go either way so we can<font color="#E5E5E5"> jump</font>

509
00:21:55,830 --> 00:21:59,909
in either positive or the negative

510
00:21:57,630 --> 00:22:03,750
direction which makes our signature is

511
00:21:59,910 --> 00:22:06,030
nonlinear in comparison to PID because

512
00:22:03,750 --> 00:22:07,830
PID signatures are linear and they have

513
00:22:06,030 --> 00:22:10,620
to have one bite after another because

514
00:22:07,830 --> 00:22:12,780
<font color="#E5E5E5">now you can jump and backwards those</font>

515
00:22:10,620 --> 00:22:15,239
signatures cannot be they can't be

516
00:22:12,780 --> 00:22:17,070
nonlinear as well so we can match a

517
00:22:15,240 --> 00:22:18,870
certain point of the of the pattern and

518
00:22:17,070 --> 00:22:22,379
then jump<font color="#E5E5E5"> back to confirm it or do</font>

519
00:22:18,870 --> 00:22:24,330
whatever so of<font color="#CCCCCC"> course this also solves</font>

520
00:22:22,380 --> 00:22:26,100
many problems it solves the problem of

521
00:22:24,330 --> 00:22:27,840
increasing the size of the bite pattern

522
00:22:26,100 --> 00:22:31,620
and<font color="#E5E5E5"> it solves the problem of patterns</font>

523
00:22:27,840 --> 00:22:33,720
having to be linear now the next<font color="#E5E5E5"> problem</font>

524
00:22:31,620 --> 00:22:36,209
is also<font color="#E5E5E5"> very interesting and this</font><font color="#CCCCCC"> is a</font>

525
00:22:33,720 --> 00:22:37,980
<font color="#CCCCCC">pea compact and if you see at the</font><font color="#E5E5E5"> entry</font>

526
00:22:36,210 --> 00:22:41,400
point of PE compact we have the first

527
00:22:37,980 --> 00:22:43,020
layer and the first layer only does the

528
00:22:41,400 --> 00:22:44,910
initialization of the structured

529
00:22:43,020 --> 00:22:47,610
exemption handler<font color="#E5E5E5"> and you have the</font>

530
00:22:44,910 --> 00:22:50,490
string that identifies that as the<font color="#CCCCCC"> P</font>

531
00:22:47,610 --> 00:22:52,649
compact following this now<font color="#CCCCCC"> for the PID</font>

532
00:22:50,490 --> 00:22:54,660
classical PID signature which just

533
00:22:52,650 --> 00:22:56,850
matches the entry point that signature

534
00:22:54,660 --> 00:22:59,160
would<font color="#CCCCCC"> be way too short so</font><font color="#E5E5E5"> that can</font><font color="#CCCCCC"> be</font>

535
00:22:56,850 --> 00:23:01,379
spoofed and easily spooked so what we

536
00:22:59,160 --> 00:23:04,260
said is wouldn't<font color="#E5E5E5"> wouldn't it be</font><font color="#CCCCCC"> nice if</font>

537
00:23:01,380 --> 00:23:06,210
<font color="#E5E5E5">we could just follow the value of movie</font>

538
00:23:04,260 --> 00:23:08,010
ax and just continue our pattern

539
00:23:06,210 --> 00:23:11,250
matching there because that's<font color="#E5E5E5"> the second</font>

540
00:23:08,010 --> 00:23:14,820
layer level of the packer and everything

541
00:23:11,250 --> 00:23:16,919
we need to to have to have this better

542
00:23:14,820 --> 00:23:20,939
kind of pattern matching is right there

543
00:23:16,919 --> 00:23:23,520
so why<font color="#E5E5E5"> not do that this is a combination</font>

544
00:23:20,940 --> 00:23:26,130
of<font color="#CCCCCC"> the previous feature and this one so</font>

545
00:23:23,520 --> 00:23:28,110
this pattern matching enables<font color="#CCCCCC"> the</font>

546
00:23:26,130 --> 00:23:31,500
identification<font color="#E5E5E5"> of PE compact in the</font>

547
00:23:28,110 --> 00:23:33,990
first layer so if you see the the<font color="#E5E5E5"> bytes</font>

548
00:23:31,500 --> 00:23:35,370
until the first highlighted part that's

549
00:23:33,990 --> 00:23:37,440
the first layer and then

550
00:23:35,370 --> 00:23:39,270
jump back as I said<font color="#E5E5E5"> we can jump back as</font>

551
00:23:37,440 --> 00:23:41,400
well so we jump<font color="#CCCCCC"> back to</font><font color="#E5E5E5"> the beginning of</font>

552
00:23:39,270 --> 00:23:43,889
the pattern and we match<font color="#E5E5E5"> be eight again</font>

553
00:23:41,400 --> 00:23:46,110
and say<font color="#E5E5E5"> okay follow that D word and</font>

554
00:23:43,890 --> 00:23:48,360
we'll end up in the second layer of the

555
00:23:46,110 --> 00:23:50,100
pattern of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> packer and just continue</font>

556
00:23:48,360 --> 00:23:52,050
our pattern matching there now this<font color="#E5E5E5"> is</font>

557
00:23:50,100 --> 00:23:55,770
<font color="#CCCCCC">the</font><font color="#E5E5E5"> way we can have complex patterns</font>

558
00:23:52,050 --> 00:24:00,210
which enables us to have better quality

559
00:23:55,770 --> 00:24:02,639
pattern matching and b.o.b sure that the

560
00:24:00,210 --> 00:24:04,890
<font color="#E5E5E5">pattern we have matched is really that</font>

561
00:24:02,640 --> 00:24:06,540
signature<font color="#E5E5E5"> because as I said if we only</font>

562
00:24:04,890 --> 00:24:09,270
managed the first part this would be way

563
00:24:06,540 --> 00:24:11,399
too short and way too easily spoofed so

564
00:24:09,270 --> 00:24:12,750
this also solves a problem of patterns

565
00:24:11,400 --> 00:24:14,700
not being linear because now you can

566
00:24:12,750 --> 00:24:16,830
just follow d words anywhere<font color="#E5E5E5"> you want</font>

567
00:24:14,700 --> 00:24:22,470
and<font color="#E5E5E5"> you can just continue anywhere you</font>

568
00:24:16,830 --> 00:24:24,960
<font color="#E5E5E5">want and the next problem is related to</font>

569
00:24:22,470 --> 00:24:26,940
the<font color="#E5E5E5"> previous one and we said okay if we</font>

570
00:24:24,960 --> 00:24:29,460
can follow d words why not follow calls

571
00:24:26,940 --> 00:24:32,160
as well so<font color="#E5E5E5"> because this is a nonlinear</font>

572
00:24:29,460 --> 00:24:34,260
signature now we can follow calls and

573
00:24:32,160 --> 00:24:36,720
continue<font color="#CCCCCC"> our pattern matching inside</font>

574
00:24:34,260 --> 00:24:38,760
them so this<font color="#CCCCCC"> is this is an example of</font>

575
00:24:36,720 --> 00:24:40,740
shrink warp and it has a couple<font color="#E5E5E5"> of calls</font>

576
00:24:38,760 --> 00:24:42,629
that follow into each other and we said

577
00:24:40,740 --> 00:24:45,960
why not<font color="#E5E5E5"> have a pattern</font><font color="#CCCCCC"> that can identify</font>

578
00:24:42,630 --> 00:24:47,670
this so this<font color="#E5E5E5"> is how it looks like first</font>

579
00:24:45,960 --> 00:24:50,550
<font color="#E5E5E5">bite is of course the identification for</font>

580
00:24:47,670 --> 00:24:54,030
<font color="#E5E5E5">Cole that's EA and the following that is</font>

581
00:24:50,550 --> 00:24:56,730
our pattern that indicates that that<font color="#E5E5E5"> e8</font>

582
00:24:54,030 --> 00:24:59,370
<font color="#E5E5E5">is actually a call and it's</font><font color="#CCCCCC"> five bytes</font>

583
00:24:56,730 --> 00:25:01,170
in length<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> plus means that it's</font>

584
00:24:59,370 --> 00:25:03,659
always in<font color="#CCCCCC"> the plus direction so it's</font>

585
00:25:01,170 --> 00:25:06,809
jumping down in the code<font color="#E5E5E5"> that's also</font><font color="#CCCCCC"> one</font>

586
00:25:03,660 --> 00:25:10,230
of the parameters we check for so if we

587
00:25:06,809 --> 00:25:11,910
have a<font color="#E5E5E5"> EA bite which is followed by four</font>

588
00:25:10,230 --> 00:25:15,840
bytes of course because it's that's a

589
00:25:11,910 --> 00:25:17,610
that's a call and it's always if it's in

590
00:25:15,840 --> 00:25:19,800
<font color="#E5E5E5">the plus direction we can just follow</font>

591
00:25:17,610 --> 00:25:22,409
<font color="#CCCCCC">that and continue pattern matching from</font>

592
00:25:19,800 --> 00:25:24,090
the first<font color="#E5E5E5"> byte inside a call and as you</font>

593
00:25:22,410 --> 00:25:26,040
can see there<font color="#CCCCCC"> are some other calls</font>

594
00:25:24,090 --> 00:25:29,730
inside the pattern as well that we just

595
00:25:26,040 --> 00:25:32,159
<font color="#E5E5E5">follow so this also solves problems to</font>

596
00:25:29,730 --> 00:25:35,160
the bipod patterns not being linear and

597
00:25:32,160 --> 00:25:37,500
the problems of having way too big bite

598
00:25:35,160 --> 00:25:39,960
patterns as<font color="#CCCCCC"> well so if we were just to</font>

599
00:25:37,500 --> 00:25:42,809
have a bite pattern that takes into

600
00:25:39,960 --> 00:25:46,140
account all the<font color="#CCCCCC"> bytes in between this</font>

601
00:25:42,809 --> 00:25:48,160
and the ending the call where it starts

602
00:25:46,140 --> 00:25:52,120
we would have way too big of a pattern

603
00:25:48,160 --> 00:25:54,190
now the last problem we saw and this is

604
00:25:52,120 --> 00:25:56,830
the problem<font color="#E5E5E5"> of sliding pieces of code</font>

605
00:25:54,190 --> 00:25:59,110
now this<font color="#CCCCCC"> is a code which can be located</font>

606
00:25:56,830 --> 00:26:01,210
<font color="#CCCCCC">anywhere inside code and this is ass</font>

607
00:25:59,110 --> 00:26:04,240
back and that particular piece of<font color="#E5E5E5"> code</font>

608
00:26:01,210 --> 00:26:06,370
does importer construction so that's a

609
00:26:04,240 --> 00:26:11,320
call to get proc address somewhere in

610
00:26:06,370 --> 00:26:13,300
there yeah<font color="#CCCCCC"> cold okay so what we said</font>

611
00:26:11,320 --> 00:26:15,490
okay there's different versions of<font color="#CCCCCC"> a</font>

612
00:26:13,300 --> 00:26:17,919
<font color="#CCCCCC">spec and this</font><font color="#E5E5E5"> is never at the static</font>

613
00:26:15,490 --> 00:26:19,450
location so if we<font color="#CCCCCC"> have a static</font>

614
00:26:17,920 --> 00:26:21,820
signature which is long enough to

615
00:26:19,450 --> 00:26:24,550
identify<font color="#E5E5E5"> ass back why not have another</font>

616
00:26:21,820 --> 00:26:27,189
signature inside it which validates that

617
00:26:24,550 --> 00:26:29,139
our unpacker will actually work so what

618
00:26:27,190 --> 00:26:32,080
we did is we added searches to our

619
00:26:29,140 --> 00:26:34,090
patterns so inside a specific range and

620
00:26:32,080 --> 00:26:35,860
you see the highlighted parts so inside

621
00:26:34,090 --> 00:26:38,620
the range which goes in the plus

622
00:26:35,860 --> 00:26:41,770
direction behind the matched pattern

623
00:26:38,620 --> 00:26:44,409
says if it's<font color="#E5E5E5"> inside</font><font color="#CCCCCC"> the range of 300 x</font>

624
00:26:41,770 --> 00:26:46,000
decimal and if there's this pattern then

625
00:26:44,410 --> 00:26:48,250
you just continue pattern matching from

626
00:26:46,000 --> 00:26:51,730
there from the point where it's the<font color="#E5E5E5"> last</font>

627
00:26:48,250 --> 00:26:54,370
bite<font color="#E5E5E5"> of you your match so if you have a</font>

628
00:26:51,730 --> 00:26:57,250
couple<font color="#E5E5E5"> of these searches we can just</font>

629
00:26:54,370 --> 00:26:59,229
match if they're all if we<font color="#E5E5E5"> have all the</font>

630
00:26:57,250 --> 00:27:02,290
patterns we need to actually unpack this

631
00:26:59,230 --> 00:27:04,420
file so now the identification and

632
00:27:02,290 --> 00:27:06,639
unpacking are related because if this is

633
00:27:04,420 --> 00:27:09,730
a single layer<font color="#CCCCCC"> packer which aspect is</font>

634
00:27:06,640 --> 00:27:12,400
you can just match those patterns you

635
00:27:09,730 --> 00:27:14,560
need for the unpacking<font color="#E5E5E5"> to work inside</font>

636
00:27:12,400 --> 00:27:16,150
identification process itself so you

637
00:27:14,560 --> 00:27:17,919
know that<font color="#E5E5E5"> you're</font><font color="#CCCCCC"> on Packer will work</font>

638
00:27:16,150 --> 00:27:20,350
before<font color="#CCCCCC"> you actually start the unpacking</font>

639
00:27:17,920 --> 00:27:22,750
process and that's<font color="#E5E5E5"> now the part of the</font>

640
00:27:20,350 --> 00:27:24,520
unification so that solves problems as

641
00:27:22,750 --> 00:27:26,680
well that's all the problems of<font color="#CCCCCC"> x</font>

642
00:27:24,520 --> 00:27:28,270
pattern not matching because as<font color="#CCCCCC"> i said</font>

643
00:27:26,680 --> 00:27:31,180
this could be at random positions in the

644
00:27:28,270 --> 00:27:33,850
file and it enables us to embed

645
00:27:31,180 --> 00:27:38,020
unpacking patterns inside identification

646
00:27:33,850 --> 00:27:39,850
so last but not least we recognize the

647
00:27:38,020 --> 00:27:43,480
fact that there are some<font color="#CCCCCC"> packers out</font>

648
00:27:39,850 --> 00:27:45,850
there that it can sign the file falsely

649
00:27:43,480 --> 00:27:51,130
so we have this pattern which is called

650
00:27:45,850 --> 00:27:53,649
<font color="#CCCCCC">msl r l RL h and it has an option of</font>

651
00:27:51,130 --> 00:27:56,620
inserting fake signatures for those

652
00:27:53,650 --> 00:28:00,070
basic format such as you p x and f SG so

653
00:27:56,620 --> 00:28:01,479
we said why<font color="#CCCCCC"> not check for these these by</font>

654
00:28:00,070 --> 00:28:04,030
patterns first

655
00:28:01,480 --> 00:28:06,549
at the top layer and if<font color="#CCCCCC"> we are</font><font color="#E5E5E5"> sure that</font>

656
00:28:04,030 --> 00:28:08,500
these signatures are not faked and we

657
00:28:06,549 --> 00:28:12,790
can<font color="#E5E5E5"> just check for the regular upx and</font>

658
00:28:08,500 --> 00:28:15,880
be sure that this the match we got<font color="#E5E5E5"> isn't</font>

659
00:28:12,790 --> 00:28:18,190
a fake one so you can layer out the

660
00:28:15,880 --> 00:28:20,830
signatures in our database by priority

661
00:28:18,190 --> 00:28:22,780
and<font color="#E5E5E5"> I said earlier that's the thing</font>

662
00:28:20,830 --> 00:28:25,750
we're going to<font color="#E5E5E5"> talk about so layering</font>

663
00:28:22,780 --> 00:28:27,428
out means<font color="#E5E5E5"> that the top priority</font>

664
00:28:25,750 --> 00:28:29,950
signatures get scanned first you have

665
00:28:27,429 --> 00:28:32,620
free priority levels so we can use

666
00:28:29,950 --> 00:28:34,630
priority level free for the ones that

667
00:28:32,620 --> 00:28:37,000
creates fake signatures so so this

668
00:28:34,630 --> 00:28:39,040
particular format that creates fake

669
00:28:37,000 --> 00:28:41,980
signatures will have top priority and

670
00:28:39,040 --> 00:28:44,710
the upx would have the least priority so

671
00:28:41,980 --> 00:28:47,500
priority number one or you just<font color="#E5E5E5"> don't</font>

672
00:28:44,710 --> 00:28:51,820
use priority inside the databases at all

673
00:28:47,500 --> 00:28:53,650
and<font color="#CCCCCC"> that will</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> the lowest priority so</font>

674
00:28:51,820 --> 00:28:56,770
what are<font color="#CCCCCC"> your future plans for</font><font color="#E5E5E5"> this we</font>

675
00:28:53,650 --> 00:28:59,799
can extend these spider matching even

676
00:28:56,770 --> 00:29:01,750
better we<font color="#CCCCCC"> can say</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> some-some Packers</font>

677
00:28:59,799 --> 00:29:04,330
cannot pack dynamic link library some

678
00:29:01,750 --> 00:29:06,790
Packers cannot put back a 64-bit file

679
00:29:04,330 --> 00:29:09,549
some Packers cannot pack dotnet files so

680
00:29:06,790 --> 00:29:11,590
if your input file is one<font color="#E5E5E5"> of those and</font>

681
00:29:09,549 --> 00:29:13,299
your pecker doesn't support it then you

682
00:29:11,590 --> 00:29:15,850
<font color="#E5E5E5">really don't have to match that pattern</font>

683
00:29:13,299 --> 00:29:17,710
to that particular<font color="#E5E5E5"> Packer because it</font>

684
00:29:15,850 --> 00:29:20,590
cannot be matched because<font color="#CCCCCC"> that Packer</font>

685
00:29:17,710 --> 00:29:24,190
cannot pack those kind<font color="#E5E5E5"> of files and we</font>

686
00:29:20,590 --> 00:29:26,830
can also filter the files by the import

687
00:29:24,190 --> 00:29:29,710
table content so we know the specific

688
00:29:26,830 --> 00:29:32,350
Packers such as FSG and the<font color="#E5E5E5"> Packers like</font>

689
00:29:29,710 --> 00:29:35,290
that have specific imports that<font color="#E5E5E5"> they</font>

690
00:29:32,350 --> 00:29:37,449
always<font color="#E5E5E5"> import so for example most of</font>

691
00:29:35,290 --> 00:29:39,820
them<font color="#CCCCCC"> just imports kernel32 with a couple</font>

692
00:29:37,450 --> 00:29:42,490
of imports from then from there so if we

693
00:29:39,820 --> 00:29:45,189
say okay just check for the import table

694
00:29:42,490 --> 00:29:47,740
as<font color="#CCCCCC"> well as</font><font color="#E5E5E5"> app as a part of validation</font>

695
00:29:45,190 --> 00:29:50,140
process of our pattern matching just

696
00:29:47,740 --> 00:29:53,230
check if those imports are there if they

697
00:29:50,140 --> 00:29:56,260
are<font color="#CCCCCC"> there then we are</font><font color="#E5E5E5"> correct and we can</font>

698
00:29:53,230 --> 00:29:59,470
also combine our patterns with logic so

699
00:29:56,260 --> 00:30:02,620
we can have end or or in between our

700
00:29:59,470 --> 00:30:07,450
patterns so that can give<font color="#CCCCCC"> us more power</font>

701
00:30:02,620 --> 00:30:09,280
to have better pattern matching because

702
00:30:07,450 --> 00:30:12,610
we can have multiple conditions that

703
00:30:09,280 --> 00:30:14,110
apply to the same signature so in

704
00:30:12,610 --> 00:30:16,479
comparison to<font color="#CCCCCC"> the PID</font>

705
00:30:14,110 --> 00:30:18,520
<font color="#CCCCCC">e here is the comparison just between</font>

706
00:30:16,480 --> 00:30:20,559
<font color="#CCCCCC">the identification parts between the</font>

707
00:30:18,520 --> 00:30:22,389
<font color="#CCCCCC">Titan missed and the PID of course this</font>

708
00:30:20,559 --> 00:30:25,240
only relates to the user database

709
00:30:22,390 --> 00:30:26,860
because PID is a program it has<font color="#CCCCCC"> its own</font>

710
00:30:25,240 --> 00:30:30,100
internal database which has its own

711
00:30:26,860 --> 00:30:34,178
rules so it's far more complex<font color="#E5E5E5"> than the</font>

712
00:30:30,100 --> 00:30:37,120
user database a user can<font color="#E5E5E5"> actually extend</font>

713
00:30:34,179 --> 00:30:39,520
so we are just comparing the<font color="#E5E5E5"> databases</font>

714
00:30:37,120 --> 00:30:43,030
so for the title missed you can have

715
00:30:39,520 --> 00:30:44,470
complex patterns and for the epad you

716
00:30:43,030 --> 00:30:47,379
can only have<font color="#E5E5E5"> the simple ones which are</font>

717
00:30:44,470 --> 00:30:49,299
just wild cards<font color="#E5E5E5"> and bit masking for the</font>

718
00:30:47,380 --> 00:30:51,790
PID you have only single<font color="#E5E5E5"> direction</font>

719
00:30:49,299 --> 00:30:53,410
patterns and for the title missed as we

720
00:30:51,790 --> 00:30:57,460
saw we can go either direction we can

721
00:30:53,410 --> 00:30:59,410
follow<font color="#E5E5E5"> up calls or do anything now for</font>

722
00:30:57,460 --> 00:31:01,510
the PID you only have one starting point

723
00:30:59,410 --> 00:31:04,750
that's the original entry point and<font color="#E5E5E5"> we</font>

724
00:31:01,510 --> 00:31:06,760
can follow and we can search for our

725
00:31:04,750 --> 00:31:07,929
patterns anywhere in the file but<font color="#E5E5E5"> we</font>

726
00:31:06,760 --> 00:31:10,000
said that's<font color="#E5E5E5"> not good enough</font><font color="#CCCCCC"> because</font>

727
00:31:07,929 --> 00:31:11,590
files can be big in size and we don't

728
00:31:10,000 --> 00:31:13,540
want to waste our time scanning the

729
00:31:11,590 --> 00:31:16,510
entire file that's why<font color="#E5E5E5"> we added more</font>

730
00:31:13,540 --> 00:31:18,790
starting points for a signatures<font color="#CCCCCC"> so we</font>

731
00:31:16,510 --> 00:31:21,549
can either seek or match patterns with

732
00:31:18,790 --> 00:31:23,740
the<font color="#E5E5E5"> title missed we have variable</font><font color="#CCCCCC"> bite</font>

733
00:31:21,549 --> 00:31:25,690
patterns we can<font color="#E5E5E5"> skip some bites we have</font>

734
00:31:23,740 --> 00:31:28,780
optional patterns we<font color="#CCCCCC"> can follow</font><font color="#E5E5E5"> the code</font>

735
00:31:25,690 --> 00:31:30,340
flow and we have signature priority so

736
00:31:28,780 --> 00:31:32,320
that's the difference between our

737
00:31:30,340 --> 00:31:35,590
project and what's publicly available

738
00:31:32,320 --> 00:31:37,330
now so<font color="#CCCCCC"> of course that</font><font color="#E5E5E5"> was the</font>

739
00:31:35,590 --> 00:31:39,760
identification part<font color="#E5E5E5"> title missed also</font>

740
00:31:37,330 --> 00:31:42,250
has embedded in<font color="#CCCCCC"> packers and packers in</font>

741
00:31:39,760 --> 00:31:44,590
<font color="#E5E5E5">there in there so the tightness and</font>

742
00:31:42,250 --> 00:31:47,080
<font color="#CCCCCC">Packers are automated that means no user</font>

743
00:31:44,590 --> 00:31:50,439
interference whatsoever so you don't

744
00:31:47,080 --> 00:31:52,750
have to click around<font color="#E5E5E5"> follow just input</font>

745
00:31:50,440 --> 00:31:54,940
some fields or whatever the am packers

746
00:31:52,750 --> 00:31:56,890
are automatic so they can be written

747
00:31:54,940 --> 00:31:59,200
into any kind<font color="#E5E5E5"> of language so</font><font color="#CCCCCC"> they can be</font>

748
00:31:56,890 --> 00:32:02,110
written in C C++ Microsoft assembler

749
00:31:59,200 --> 00:32:04,480
<font color="#CCCCCC">Delphie</font><font color="#E5E5E5"> Lua biotin and Titan script so</font>

750
00:32:02,110 --> 00:32:06,370
this only refers to the am packers that

751
00:32:04,480 --> 00:32:08,679
are written based on the Titan engine

752
00:32:06,370 --> 00:32:10,540
because you can plug in any kind of

753
00:32:08,679 --> 00:32:13,750
vampire to this kind<font color="#E5E5E5"> of project you can</font>

754
00:32:10,540 --> 00:32:16,000
rate rig right the<font color="#CCCCCC"> unpacker</font><font color="#E5E5E5"> in any kind</font>

755
00:32:13,750 --> 00:32:18,250
<font color="#CCCCCC">or programming language or any kind</font><font color="#E5E5E5"> of</font>

756
00:32:16,000 --> 00:32:19,929
framework but<font color="#E5E5E5"> since we created the Titan</font>

757
00:32:18,250 --> 00:32:22,690
engine we<font color="#E5E5E5"> based our project on top of</font>

758
00:32:19,929 --> 00:32:25,450
that now the Titan script the Titan

759
00:32:22,690 --> 00:32:27,330
script is our version of folly script

760
00:32:25,450 --> 00:32:30,570
now all the script is a very

761
00:32:27,330 --> 00:32:33,899
a tool between with<font color="#E5E5E5"> reverse engineers we</font>

762
00:32:30,570 --> 00:32:35,220
know about<font color="#E5E5E5"> 800 different scripts that do</font>

763
00:32:33,900 --> 00:32:37,440
<font color="#E5E5E5">I'm packing for different kind of</font>

764
00:32:35,220 --> 00:32:41,010
formats have some duplications of course

765
00:32:37,440 --> 00:32:43,020
but there's obviously a good user base

766
00:32:41,010 --> 00:32:44,550
for that and that's why<font color="#CCCCCC"> we edit the</font>

767
00:32:43,020 --> 00:32:46,889
support for that as well now the

768
00:32:44,550 --> 00:32:48,960
<font color="#CCCCCC">difference between</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Titan script and</font>

769
00:32:46,890 --> 00:32:51,510
the olive script is that the Titan

770
00:32:48,960 --> 00:32:53,520
script runs inside the Titan engine so

771
00:32:51,510 --> 00:32:56,970
it's based on our automated unpacking

772
00:32:53,520 --> 00:32:59,040
tools and it also enables you to use all

773
00:32:56,970 --> 00:33:01,080
of the Titan engine features directly

774
00:32:59,040 --> 00:33:04,620
from the script language so you<font color="#E5E5E5"> can use</font>

775
00:33:01,080 --> 00:33:06,600
specific you can<font color="#CCCCCC"> easily write and</font>

776
00:33:04,620 --> 00:33:08,459
Packers with the Titan script if you

777
00:33:06,600 --> 00:33:10,230
know the Titan engine or if you don't

778
00:33:08,460 --> 00:33:12,150
you<font color="#E5E5E5"> can use the all the script</font>

779
00:33:10,230 --> 00:33:14,910
instructions and we're going to<font color="#E5E5E5"> see</font><font color="#CCCCCC"> how</font>

780
00:33:12,150 --> 00:33:17,550
<font color="#E5E5E5">you can convert one of those</font><font color="#CCCCCC"> a packers</font>

781
00:33:14,910 --> 00:33:23,790
easily from the college trip to tighten

782
00:33:17,550 --> 00:33:25,919
script now now here is<font color="#CCCCCC"> how</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> mist and</font>

783
00:33:23,790 --> 00:33:27,629
<font color="#CCCCCC">Packers look like you have</font><font color="#E5E5E5"> 90 ones which</font>

784
00:33:25,920 --> 00:33:30,090
can be both static and dynamic in nature

785
00:33:27,630 --> 00:33:32,370
it depends on the end backer itself you

786
00:33:30,090 --> 00:33:35,550
can<font color="#CCCCCC"> have the script</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> Packers that's</font>

787
00:33:32,370 --> 00:33:37,500
Python<font color="#E5E5E5"> Lua and tighten script and pipe</font>

788
00:33:35,550 --> 00:33:39,240
<font color="#E5E5E5">Python</font><font color="#CCCCCC"> Elua and they can</font><font color="#E5E5E5"> be both static</font>

789
00:33:37,500 --> 00:33:41,490
and dynamic it depends<font color="#E5E5E5"> on your coding</font>

790
00:33:39,240 --> 00:33:43,380
style and for the<font color="#CCCCCC"> Titan script there</font>

791
00:33:41,490 --> 00:33:45,510
there<font color="#E5E5E5"> are only dynamic am packers</font>

792
00:33:43,380 --> 00:33:48,840
because all this trip was created to be

793
00:33:45,510 --> 00:33:51,390
assistance during manual analysis of<font color="#CCCCCC"> the</font>

794
00:33:48,840 --> 00:33:54,000
file so once you load the file in only

795
00:33:51,390 --> 00:33:56,430
<font color="#CCCCCC">you start the old script and it will get</font>

796
00:33:54,000 --> 00:33:57,750
you to<font color="#CCCCCC"> the entry point that's why with</font>

797
00:33:56,430 --> 00:34:00,180
the<font color="#E5E5E5"> Titan scrip you can only write</font>

798
00:33:57,750 --> 00:34:01,980
dynamic hamburgers now currently there's

799
00:34:00,180 --> 00:34:06,240
no Gail support but with the next

800
00:34:01,980 --> 00:34:08,490
release there will be one so how you

801
00:34:06,240 --> 00:34:10,800
create an<font color="#CCCCCC"> Packers I can</font><font color="#E5E5E5"> create both</font>

802
00:34:08,489 --> 00:34:13,589
static and dynamic and Packers as<font color="#E5E5E5"> I said</font>

803
00:34:10,800 --> 00:34:15,660
but the process of creating them has the

804
00:34:13,590 --> 00:34:17,700
same steps of as the manual analysis

805
00:34:15,659 --> 00:34:20,009
which is debugging the file till the

806
00:34:17,699 --> 00:34:22,290
entry point<font color="#E5E5E5"> tamping that memory to disk</font>

807
00:34:20,010 --> 00:34:24,690
collecting all the data you need for

808
00:34:22,290 --> 00:34:27,150
import and relocation relocation

809
00:34:24,690 --> 00:34:29,400
reconstruction and then<font color="#CCCCCC"> you apply custom</font>

810
00:34:27,150 --> 00:34:31,050
fixes for the all of the protection

811
00:34:29,400 --> 00:34:33,690
options that are available today such as

812
00:34:31,050 --> 00:34:35,970
cold slices and<font color="#E5E5E5"> two point of Fisk Asians</font>

813
00:34:33,690 --> 00:34:38,010
stolen entry points and whatever the

814
00:34:35,969 --> 00:34:39,580
protection options are available inside

815
00:34:38,010 --> 00:34:41,800
the format you are unpacking

816
00:34:39,580 --> 00:34:44,830
so the static am packin also has the

817
00:34:41,800 --> 00:34:47,530
same steps you always must decrypt or

818
00:34:44,830 --> 00:34:49,420
decompress the memory content and then

819
00:34:47,530 --> 00:34:52,690
reconstruct the import table and the

820
00:34:49,420 --> 00:34:54,580
original<font color="#E5E5E5"> entry point now that's all up</font>

821
00:34:52,690 --> 00:34:56,770
to<font color="#E5E5E5"> an</font><font color="#CCCCCC"> packers whoever writes the am</font>

822
00:34:54,580 --> 00:34:58,630
<font color="#E5E5E5">packers have</font><font color="#CCCCCC"> to deal with</font><font color="#E5E5E5"> all all</font><font color="#CCCCCC"> of</font>

823
00:34:56,770 --> 00:35:01,990
this but there<font color="#E5E5E5"> are some shortcuts we can</font>

824
00:34:58,630 --> 00:35:04,180
talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> that so if you are familiar</font>

825
00:35:01,990 --> 00:35:05,770
with this slide is because this slide is

826
00:35:04,180 --> 00:35:08,109
from the last year<font color="#CCCCCC"> citing engine and</font>

827
00:35:05,770 --> 00:35:09,730
this describes how you write and<font color="#E5E5E5"> Packers</font>

828
00:35:08,110 --> 00:35:12,280
dynamic and Packers with the<font color="#E5E5E5"> Titan</font>

829
00:35:09,730 --> 00:35:14,080
engine so what you do is you read the

830
00:35:12,280 --> 00:35:16,240
data from the file and then you

831
00:35:14,080 --> 00:35:18,549
initialize the debugging process setting

832
00:35:16,240 --> 00:35:20,649
some break points which collect all the

833
00:35:18,550 --> 00:35:22,900
data about import fixing relocation

834
00:35:20,650 --> 00:35:25,750
fixing and at the end entry point as<font color="#CCCCCC"> the</font>

835
00:35:22,900 --> 00:35:28,060
final break point which finalizes the

836
00:35:25,750 --> 00:35:29,980
unpacking process so for import data

837
00:35:28,060 --> 00:35:32,350
gathering here would place a break point

838
00:35:29,980 --> 00:35:35,380
on the<font color="#CCCCCC"> pieces of code inside the Packer</font>

839
00:35:32,350 --> 00:35:37,660
which calls load library to load<font color="#E5E5E5"> and</font>

840
00:35:35,380 --> 00:35:39,700
<font color="#E5E5E5">unite dynamic link libraries needed by</font>

841
00:35:37,660 --> 00:35:42,100
the<font color="#CCCCCC"> packed file so once you are there</font>

842
00:35:39,700 --> 00:35:44,259
you<font color="#CCCCCC"> collect the data</font><font color="#E5E5E5"> and that's just the</font>

843
00:35:42,100 --> 00:35:46,930
string the name of dynamic link library

844
00:35:44,260 --> 00:35:48,580
which is<font color="#E5E5E5"> being loaded that information</font>

845
00:35:46,930 --> 00:35:50,830
is passed passed to the Titan engine

846
00:35:48,580 --> 00:35:53,259
it's important module which uses that to

847
00:35:50,830 --> 00:35:54,520
reconstruct the import table later so

848
00:35:53,260 --> 00:35:56,590
the same goes for the getprocaddress

849
00:35:54,520 --> 00:35:59,020
which is the function inside windows

850
00:35:56,590 --> 00:36:01,630
with which finds<font color="#E5E5E5"> the functions inside</font>

851
00:35:59,020 --> 00:36:03,610
the loaded libraries so that<font color="#CCCCCC"> in that</font>

852
00:36:01,630 --> 00:36:05,890
information as well it's<font color="#E5E5E5"> past the Titan</font>

853
00:36:03,610 --> 00:36:07,660
engine which at the entry point at the

854
00:36:05,890 --> 00:36:09,700
final point<font color="#E5E5E5"> of impact in a file</font>

855
00:36:07,660 --> 00:36:12,220
reconstructs everything by using that

856
00:36:09,700 --> 00:36:15,040
data you collect it same goes for

857
00:36:12,220 --> 00:36:16,839
locations now there's a shortcut because

858
00:36:15,040 --> 00:36:18,550
relocations can be tricky to fix we

859
00:36:16,840 --> 00:36:21,430
created a shortcut which is just

860
00:36:18,550 --> 00:36:24,460
<font color="#E5E5E5">creating two snapshots one before the</font>

861
00:36:21,430 --> 00:36:27,490
actual relocations occur and one<font color="#E5E5E5"> dressed</font>

862
00:36:24,460 --> 00:36:29,980
just<font color="#E5E5E5"> after relocation occurs so once we</font>

863
00:36:27,490 --> 00:36:32,350
compared two snapshots we get the valid

864
00:36:29,980 --> 00:36:35,590
relocation table and that's an easy way

865
00:36:32,350 --> 00:36:39,009
<font color="#E5E5E5">to fix dynamic link libraries which one</font>

866
00:36:35,590 --> 00:36:40,810
when they have a valid a relocation

867
00:36:39,010 --> 00:36:43,000
table they can be<font color="#CCCCCC"> loaded on different</font>

868
00:36:40,810 --> 00:36:46,090
image basis and that<font color="#CCCCCC"> means that they're</font>

869
00:36:43,000 --> 00:36:48,250
valid files for later on analysis so at

870
00:36:46,090 --> 00:36:51,730
the entry point<font color="#E5E5E5"> this is the final step</font>

871
00:36:48,250 --> 00:36:53,210
we have<font color="#E5E5E5"> to dump the process to this can</font>

872
00:36:51,730 --> 00:36:55,730
of course we can use

873
00:36:53,210 --> 00:36:57,560
use an option to recover the<font color="#CCCCCC"> damaged p</font>

874
00:36:55,730 --> 00:37:00,530
<font color="#CCCCCC">Heather if you like that goes before</font>

875
00:36:57,560 --> 00:37:02,720
that the process dumping and after that

876
00:37:00,530 --> 00:37:05,480
we<font color="#E5E5E5"> just add a couple of sections one for</font>

877
00:37:02,720 --> 00:37:08,270
the import address table and 140

878
00:37:05,480 --> 00:37:10,190
relocations after which the file has val

879
00:37:08,270 --> 00:37:12,680
is valid on the<font color="#E5E5E5"> disk but we still need</font>

880
00:37:10,190 --> 00:37:15,470
<font color="#E5E5E5">to realign it which makes it as compact</font>

881
00:37:12,680 --> 00:37:18,049
as possible and make sure<font color="#CCCCCC"> that all the</font>

882
00:37:15,470 --> 00:37:20,209
sections are in the right place<font color="#E5E5E5"> so once</font>

883
00:37:18,050 --> 00:37:22,550
we finish that we just<font color="#E5E5E5"> stop the</font>

884
00:37:20,210 --> 00:37:24,020
debugging process because we are done so

885
00:37:22,550 --> 00:37:26,300
that's the whole philosophy and it's

886
00:37:24,020 --> 00:37:30,530
pretty<font color="#E5E5E5"> easy steps into unpacking</font>

887
00:37:26,300 --> 00:37:32,240
anything with the Titan engine now as we

888
00:37:30,530 --> 00:37:34,190
said you can create native and packers

889
00:37:32,240 --> 00:37:36,680
and<font color="#E5E5E5"> I just talked about how you can use</font>

890
00:37:34,190 --> 00:37:39,350
<font color="#E5E5E5">title engine to do this but you can also</font>

891
00:37:36,680 --> 00:37:41,270
<font color="#E5E5E5">create script and backers as well and to</font>

892
00:37:39,350 --> 00:37:43,490
create script and backers you can use

893
00:37:41,270 --> 00:37:47,030
Titan script now<font color="#E5E5E5"> Python script as we</font>

894
00:37:43,490 --> 00:37:49,279
said is our version of folly dbg script

895
00:37:47,030 --> 00:37:51,470
so it has<font color="#CCCCCC"> the same syntax but it also</font>

896
00:37:49,280 --> 00:37:55,430
enables you to use the existing Titan

897
00:37:51,470 --> 00:37:57,620
engine functions now now all<font color="#CCCCCC"> these</font>

898
00:37:55,430 --> 00:38:00,680
scripts that are existing in<font color="#CCCCCC"> the wild I</font>

899
00:37:57,620 --> 00:38:02,509
said there are<font color="#E5E5E5"> 700 difference or 800</font>

900
00:38:00,680 --> 00:38:05,060
different scripts we know about<font color="#E5E5E5"> you can</font>

901
00:38:02,510 --> 00:38:07,520
easily reuse them but you can either

902
00:38:05,060 --> 00:38:11,000
<font color="#E5E5E5">Rico them or add some instructions to</font>

903
00:38:07,520 --> 00:38:13,160
them to make them a valid automated

904
00:38:11,000 --> 00:38:15,290
unpacker because all<font color="#E5E5E5"> these scripts are</font>

905
00:38:13,160 --> 00:38:17,359
not full blown on baggers that will<font color="#E5E5E5"> only</font>

906
00:38:15,290 --> 00:38:19,550
fix the file and get you<font color="#E5E5E5"> to the entry</font>

907
00:38:17,360 --> 00:38:21,770
point at that particular time you have

908
00:38:19,550 --> 00:38:23,420
<font color="#CCCCCC">to dump the memory yourself and fix fix</font>

909
00:38:21,770 --> 00:38:26,690
the import table with additional tools

910
00:38:23,420 --> 00:38:28,370
now the<font color="#CCCCCC"> Titan script enables you to</font>

911
00:38:26,690 --> 00:38:31,850
create automated<font color="#E5E5E5"> n packers so those</font>

912
00:38:28,370 --> 00:38:34,430
scripts are full blown and backers now

913
00:38:31,850 --> 00:38:38,299
as I said we can either recode all<font color="#E5E5E5"> the</font>

914
00:38:34,430 --> 00:38:40,190
scripts to match the Titan engine and

915
00:38:38,300 --> 00:38:41,660
layout or we can add a couple of

916
00:38:40,190 --> 00:38:43,700
instructions now first instruction we

917
00:38:41,660 --> 00:38:46,100
can add and this is really<font color="#E5E5E5"> easy it's</font>

918
00:38:43,700 --> 00:38:48,259
called dumping facts so it does what it

919
00:38:46,100 --> 00:38:50,029
says once you<font color="#E5E5E5"> are at the entry point</font>

920
00:38:48,260 --> 00:38:52,160
with your script you just dump and fix

921
00:38:50,030 --> 00:38:55,040
the file to<font color="#E5E5E5"> disk and that's all you do</font>

922
00:38:52,160 --> 00:38:56,660
<font color="#E5E5E5">and if there are some errors during am</font>

923
00:38:55,040 --> 00:38:58,580
packing because this is an automated

924
00:38:56,660 --> 00:39:00,440
tool and it needs to know if your actual

925
00:38:58,580 --> 00:39:02,810
unpacking has succeeded or not you can

926
00:39:00,440 --> 00:39:06,620
set just<font color="#E5E5E5"> say</font><font color="#CCCCCC"> okay error this Sam backer</font>

927
00:39:02,810 --> 00:39:07,009
didn't<font color="#E5E5E5"> work so here is an example of the</font>

928
00:39:06,620 --> 00:39:09,890
script

929
00:39:07,010 --> 00:39:11,330
the left<font color="#CCCCCC"> one is all</font><font color="#E5E5E5"> is stripped and the</font>

930
00:39:09,890 --> 00:39:13,670
right one is Titan script and there's

931
00:39:11,330 --> 00:39:15,830
<font color="#E5E5E5">just one instruction we added and this</font>

932
00:39:13,670 --> 00:39:18,500
script is a new PX example so what this

933
00:39:15,830 --> 00:39:21,440
script does in way too<font color="#E5E5E5"> many lines of</font>

934
00:39:18,500 --> 00:39:23,840
code is it finds<font color="#CCCCCC"> the paw pad at the end</font>

935
00:39:21,440 --> 00:39:26,960
of the upx stop places a hardware

936
00:39:23,840 --> 00:39:30,200
breakpoint there once it breaks it

937
00:39:26,960 --> 00:39:32,420
clears it and then steps over at and

938
00:39:30,200 --> 00:39:34,129
it's at the entry<font color="#E5E5E5"> point now the Titan</font>

939
00:39:32,420 --> 00:39:36,440
script that would do<font color="#CCCCCC"> the same thing is</font>

940
00:39:34,130 --> 00:39:37,970
<font color="#CCCCCC">exactly the</font><font color="#E5E5E5"> same</font><font color="#CCCCCC"> as this one so since we</font>

941
00:39:36,440 --> 00:39:39,140
are converting all the scripted Titan

942
00:39:37,970 --> 00:39:40,730
script we just need to<font color="#E5E5E5"> add one</font>

943
00:39:39,140 --> 00:39:42,920
instruction so once we<font color="#CCCCCC"> all read the</font>

944
00:39:40,730 --> 00:39:45,050
entry point just before return the end

945
00:39:42,920 --> 00:39:48,320
of the script just<font color="#E5E5E5"> say dumpin fix and</font>

946
00:39:45,050 --> 00:39:50,030
that particular script will be executed

947
00:39:48,320 --> 00:39:51,620
till that<font color="#CCCCCC"> point and once you're at the</font>

948
00:39:50,030 --> 00:39:53,300
<font color="#E5E5E5">entry point everything will everything</font>

949
00:39:51,620 --> 00:39:58,940
from memory will be dumped<font color="#E5E5E5"> two disc and</font>

950
00:39:53,300 --> 00:40:01,310
fixed by the<font color="#E5E5E5"> Titan engine that missed so</font>

951
00:39:58,940 --> 00:40:04,790
since all of the am packing we do is

952
00:40:01,310 --> 00:40:06,710
either statical or dynamic but we want

953
00:40:04,790 --> 00:40:09,980
<font color="#CCCCCC">to rely on dynamic am packing more</font>

954
00:40:06,710 --> 00:40:11,960
because it's a more resilient form of am

955
00:40:09,980 --> 00:40:14,480
packing that yields couple of problems

956
00:40:11,960 --> 00:40:16,730
that<font color="#CCCCCC"> yields a problem of damaged and</font>

957
00:40:14,480 --> 00:40:18,710
broken files that cannot be unpacked

958
00:40:16,730 --> 00:40:20,000
because they cannot be started in

959
00:40:18,710 --> 00:40:22,550
<font color="#E5E5E5">Windows we're going to show</font><font color="#CCCCCC"> that a bit</font>

960
00:40:20,000 --> 00:40:24,470
later so we also have problems with

961
00:40:22,550 --> 00:40:26,750
files that have missing dependencies

962
00:40:24,470 --> 00:40:28,310
which cannot be unpacked so if you have

963
00:40:26,750 --> 00:40:30,590
a file which is loading a file which

964
00:40:28,310 --> 00:40:33,170
dynamic link library which isn't on your

965
00:40:30,590 --> 00:40:34,850
system if<font color="#E5E5E5"> you are to unpack that file</font>

966
00:40:33,170 --> 00:40:37,460
dynamically you cannot<font color="#E5E5E5"> do that because</font>

967
00:40:34,850 --> 00:40:40,160
windows cannot find it and there's a

968
00:40:37,460 --> 00:40:43,160
problem with some<font color="#E5E5E5"> Packers which are not</font>

969
00:40:40,160 --> 00:40:45,290
data execution protection compatible so

970
00:40:43,160 --> 00:40:47,569
those cannot be unpacked as well that

971
00:40:45,290 --> 00:40:49,130
goes for the<font color="#E5E5E5"> Packers that store their</font>

972
00:40:47,570 --> 00:40:52,520
code inside the portable executable

973
00:40:49,130 --> 00:40:54,620
headers so that's FSG and there are more

974
00:40:52,520 --> 00:40:56,750
examples of this but there are<font color="#E5E5E5"> some good</font>

975
00:40:54,620 --> 00:40:59,240
<font color="#E5E5E5">news their solution to all of these</font>

976
00:40:56,750 --> 00:41:01,880
problems<font color="#E5E5E5"> we can repair the damaged files</font>

977
00:40:59,240 --> 00:41:04,129
and we can simulate the missing

978
00:41:01,880 --> 00:41:06,530
dependencies so the system thinks that

979
00:41:04,130 --> 00:41:08,330
the files are there<font color="#E5E5E5"> so it only gets us</font>

980
00:41:06,530 --> 00:41:10,040
through the packing layer and that's all

981
00:41:08,330 --> 00:41:12,830
we are interested in once we see the

982
00:41:10,040 --> 00:41:14,150
code we can analyze it further and<font color="#E5E5E5"> if</font><font color="#CCCCCC"> we</font>

983
00:41:12,830 --> 00:41:16,009
<font color="#CCCCCC">are into</font><font color="#E5E5E5"> Melbourne analysis you can</font>

984
00:41:14,150 --> 00:41:18,800
<font color="#CCCCCC">determine if</font><font color="#E5E5E5"> the file is malicious or</font>

985
00:41:16,010 --> 00:41:19,960
not and we can just<font color="#E5E5E5"> work around data</font>

986
00:41:18,800 --> 00:41:22,540
execution prevention or

987
00:41:19,960 --> 00:41:25,780
say we totally now with the<font color="#E5E5E5"> Titan engine</font>

988
00:41:22,540 --> 00:41:27,880
if you follow a blog we did some series

989
00:41:25,780 --> 00:41:30,280
of logs that describe how we created

990
00:41:27,880 --> 00:41:32,500
this<font color="#CCCCCC"> plug-in which counters all of these</font>

991
00:41:30,280 --> 00:41:34,780
problems of dynamic and<font color="#E5E5E5"> allowed that</font>

992
00:41:32,500 --> 00:41:37,510
dynamical analysis or dynamic unpacking

993
00:41:34,780 --> 00:41:39,280
so what we included this inside the

994
00:41:37,510 --> 00:41:41,410
tight on this project so if you come

995
00:41:39,280 --> 00:41:43,000
across a file which is damaged<font color="#E5E5E5"> or broken</font>

996
00:41:41,410 --> 00:41:46,359
you can just<font color="#CCCCCC"> use this</font><font color="#E5E5E5"> plug-in</font>

997
00:41:43,000 --> 00:41:50,950
automatically to unpack the files which

998
00:41:46,359 --> 00:41:53,650
I do other ways<font color="#CCCCCC"> cannot be unpacked now</font>

999
00:41:50,950 --> 00:41:56,710
the<font color="#CCCCCC"> Nexus</font><font color="#E5E5E5"> plugin fixes broken files</font>

1000
00:41:53,650 --> 00:41:59,140
because<font color="#CCCCCC"> validation is a crucial point</font>

1001
00:41:56,710 --> 00:42:01,480
for any kind<font color="#E5E5E5"> of am packing especially</font>

1002
00:41:59,140 --> 00:42:04,060
dynamic am packing so<font color="#E5E5E5"> before any dynamic</font>

1003
00:42:01,480 --> 00:42:05,770
am packing is performed you really want

1004
00:42:04,060 --> 00:42:07,900
<font color="#CCCCCC">to do a validation and validation will</font>

1005
00:42:05,770 --> 00:42:10,000
tell you if<font color="#E5E5E5"> the files are broken and if</font>

1006
00:42:07,900 --> 00:42:12,970
they they<font color="#CCCCCC"> are broken if they can be</font>

1007
00:42:10,000 --> 00:42:14,740
fixed now as I said<font color="#E5E5E5"> Nexus plugin is</font>

1008
00:42:12,970 --> 00:42:16,240
included with the<font color="#E5E5E5"> Titan list and all of</font>

1009
00:42:14,740 --> 00:42:20,618
<font color="#E5E5E5">this validation and repair is done</font>

1010
00:42:16,240 --> 00:42:23,049
automatically now the Nexus also solves

1011
00:42:20,619 --> 00:42:25,690
the problem missing the dependencies now

1012
00:42:23,050 --> 00:42:27,369
some files low the namek<font color="#E5E5E5"> link libraries</font>

1013
00:42:25,690 --> 00:42:29,320
through the import<font color="#E5E5E5"> table so those files</font>

1014
00:42:27,369 --> 00:42:33,010
cannot be started at all while others

1015
00:42:29,320 --> 00:42:35,260
can load load dynamic link libraries on

1016
00:42:33,010 --> 00:42:36,970
the run time and some<font color="#E5E5E5"> of them can</font>

1017
00:42:35,260 --> 00:42:39,970
actually get through the packing layer

1018
00:42:36,970 --> 00:42:43,029
automatically so<font color="#CCCCCC"> fhe for example if it</font>

1019
00:42:39,970 --> 00:42:45,250
doesn't find the dynamic link library

1020
00:42:43,030 --> 00:42:47,290
will just continue running and that's

1021
00:42:45,250 --> 00:42:49,089
bad<font color="#CCCCCC"> because the programs can crash if</font>

1022
00:42:47,290 --> 00:42:51,910
they're packed with that kind of packer

1023
00:42:49,089 --> 00:42:55,450
others are better at this<font color="#E5E5E5"> and when they</font>

1024
00:42:51,910 --> 00:42:58,540
don't<font color="#E5E5E5"> find library they just exit so to</font>

1025
00:42:55,450 --> 00:43:00,399
counter this<font color="#E5E5E5"> we can fake the presence of</font>

1026
00:42:58,540 --> 00:43:02,320
dynamic link libraries<font color="#CCCCCC"> post statically</font>

1027
00:43:00,400 --> 00:43:04,119
on disk just by creating<font color="#CCCCCC"> the file so</font>

1028
00:43:02,320 --> 00:43:05,950
they are physically<font color="#E5E5E5"> there and they have</font>

1029
00:43:04,119 --> 00:43:09,220
all<font color="#CCCCCC"> the important exports that are</font>

1030
00:43:05,950 --> 00:43:12,220
needed by the application or we can just

1031
00:43:09,220 --> 00:43:17,919
hook some functions inside the pack

1032
00:43:12,220 --> 00:43:19,839
process and return fake values to to

1033
00:43:17,920 --> 00:43:21,970
tell the<font color="#CCCCCC"> packer that the necessary</font>

1034
00:43:19,839 --> 00:43:25,210
dynamic link library and the functions

1035
00:43:21,970 --> 00:43:27,879
are actually there so we can do either

1036
00:43:25,210 --> 00:43:29,170
of<font color="#CCCCCC"> those but to the Nexus does both of</font>

1037
00:43:27,880 --> 00:43:30,940
those because there are different models

1038
00:43:29,170 --> 00:43:32,059
<font color="#E5E5E5">for different Packers and we want to</font>

1039
00:43:30,940 --> 00:43:35,660
support<font color="#E5E5E5"> everything</font>

1040
00:43:32,059 --> 00:43:37,969
now that brings us to<font color="#CCCCCC"> our demo now we're</font>

1041
00:43:35,660 --> 00:43:40,788
going to show the demo and<font color="#E5E5E5"> going to show</font>

1042
00:43:37,969 --> 00:43:44,239
how<font color="#E5E5E5"> to tighten ms title miss tightness</font>

1043
00:43:40,789 --> 00:43:46,400
works we gave our sacrifice the demo

1044
00:43:44,239 --> 00:43:48,619
goats so I'm hoping they're not going to

1045
00:43:46,400 --> 00:43:51,410
<font color="#E5E5E5">abandon us now so we have some samples</font>

1046
00:43:48,619 --> 00:43:53,689
there<font color="#E5E5E5"> I have one file which is broken we</font>

1047
00:43:51,410 --> 00:43:55,430
have files the data pack with different

1048
00:43:53,689 --> 00:43:58,160
kind of Packers which we have Alex

1049
00:43:55,430 --> 00:44:00,739
protector we have a spec we have eggsy

1050
00:43:58,160 --> 00:44:04,219
far we have te la have your decrypter we

1051
00:44:00,739 --> 00:44:06,829
have unpack upx and have some<font color="#E5E5E5"> other</font>

1052
00:44:04,219 --> 00:44:08,900
settings with the upx as well so this

1053
00:44:06,829 --> 00:44:10,759
file for example and<font color="#CCCCCC"> I just talked about</font>

1054
00:44:08,900 --> 00:44:14,959
the<font color="#E5E5E5"> nexus plug in this file for example</font>

1055
00:44:10,759 --> 00:44:16,519
doesn't load because it<font color="#E5E5E5"> it has missing</font>

1056
00:44:14,959 --> 00:44:18,618
<font color="#E5E5E5">and I make link libraries and we can</font>

1057
00:44:16,519 --> 00:44:21,709
<font color="#E5E5E5">just see</font><font color="#CCCCCC"> that if we place a breakpoint</font>

1058
00:44:18,619 --> 00:44:23,930
at the load library call and just see

1059
00:44:21,709 --> 00:44:26,328
how<font color="#CCCCCC"> it works so the first</font><font color="#E5E5E5"> one kernel is</font>

1060
00:44:23,930 --> 00:44:29,509
found and then we<font color="#CCCCCC"> just scroll till we</font>

1061
00:44:26,329 --> 00:44:37,759
found<font color="#E5E5E5"> the one which is missing so that's</font>

1062
00:44:29,509 --> 00:44:40,009
going to be<font color="#CCCCCC"> zero and it ends so we can</font>

1063
00:44:37,759 --> 00:44:42,709
unpack<font color="#E5E5E5"> that file with the help of the</font>

1064
00:44:40,009 --> 00:44:45,589
<font color="#CCCCCC">Nexus plugin so this is</font><font color="#E5E5E5"> the title missed</font>

1065
00:44:42,709 --> 00:44:47,959
it's a console application that you can

1066
00:44:45,589 --> 00:44:49,880
call certain<font color="#CCCCCC"> parameters first one is the</font>

1067
00:44:47,959 --> 00:44:51,859
input parameter which tells it which

1068
00:44:49,880 --> 00:44:54,049
file you want to<font color="#E5E5E5"> analyze so Peter</font>

1069
00:44:51,859 --> 00:44:56,479
started I've missed and say<font color="#E5E5E5"> okay the</font>

1070
00:44:54,049 --> 00:44:59,779
scanner file and samples and we can scan

1071
00:44:56,479 --> 00:45:01,249
any of these<font color="#E5E5E5"> files and say just just</font>

1072
00:44:59,779 --> 00:45:03,589
match it will give you the information

1073
00:45:01,249 --> 00:45:05,569
<font color="#E5E5E5">about the file format so we'll give you</font>

1074
00:45:03,589 --> 00:45:08,209
the<font color="#E5E5E5"> name</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the file format which is in</font>

1075
00:45:05,569 --> 00:45:11,420
this case<font color="#CCCCCC"> Exe fault to get the diversion</font>

1076
00:45:08,209 --> 00:45:13,189
so the exact version and it will<font color="#E5E5E5"> give</font>

1077
00:45:11,420 --> 00:45:14,329
you the author of the packer you can

1078
00:45:13,189 --> 00:45:16,879
also give you a link to<font color="#CCCCCC"> our website</font>

1079
00:45:14,329 --> 00:45:18,140
which<font color="#CCCCCC"> you can follow and on which</font>

1080
00:45:16,880 --> 00:45:20,420
there's some additional information

1081
00:45:18,140 --> 00:45:23,058
<font color="#CCCCCC">about this format so you'll have the</font>

1082
00:45:20,420 --> 00:45:24,650
information that's available here you

1083
00:45:23,059 --> 00:45:27,319
also have protection options that's

1084
00:45:24,650 --> 00:45:29,269
inside a packer as well and you'll<font color="#E5E5E5"> have</font>

1085
00:45:27,319 --> 00:45:33,259
some samples and additional<font color="#E5E5E5"> on packers</font>

1086
00:45:29,269 --> 00:45:36,379
you can use now if<font color="#E5E5E5"> we were to unpack the</font>

1087
00:45:33,259 --> 00:45:38,479
file we will just call the same which<font color="#CCCCCC"> is</font>

1088
00:45:36,380 --> 00:45:41,299
called tightness<font color="#CCCCCC"> and say</font><font color="#E5E5E5"> okay just</font>

1089
00:45:38,479 --> 00:45:43,399
output<font color="#E5E5E5"> this to a file for me and it will</font>

1090
00:45:41,299 --> 00:45:45,590
show you a log of what just happened so

1091
00:45:43,400 --> 00:45:47,270
since this is a dynamic am<font color="#CCCCCC"> packer</font>

1092
00:45:45,590 --> 00:45:49,670
epilogue all the information it

1093
00:45:47,270 --> 00:45:51,470
collected during<font color="#E5E5E5"> run time so for example</font>

1094
00:45:49,670 --> 00:45:53,180
it will show you<font color="#E5E5E5"> the dynamic link</font>

1095
00:45:51,470 --> 00:45:56,149
libraries which the biker is loading

1096
00:45:53,180 --> 00:45:57,980
will show you the functions that are

1097
00:45:56,150 --> 00:45:59,630
required and<font color="#CCCCCC"> the address is</font><font color="#E5E5E5"> where they</font>

1098
00:45:57,980 --> 00:46:00,830
are<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> be written and at the</font><font color="#CCCCCC"> end</font>

1099
00:45:59,630 --> 00:46:03,800
it's going<font color="#E5E5E5"> to tell you the entry point</font>

1100
00:46:00,830 --> 00:46:06,290
so once this is done the output file is

1101
00:46:03,800 --> 00:46:08,870
the valid portable executable file which

1102
00:46:06,290 --> 00:46:11,150
you can just run because it smell<font color="#CCCCCC"> it and</font>

1103
00:46:08,870 --> 00:46:13,009
you can just analyze it further and

1104
00:46:11,150 --> 00:46:14,690
because all of the<font color="#E5E5E5"> packing leaders have</font>

1105
00:46:13,010 --> 00:46:17,360
been stripped so he look at this this is

1106
00:46:14,690 --> 00:46:21,560
just a simple visual c++ application you

1107
00:46:17,360 --> 00:46:23,240
can analyze further if you like so we

1108
00:46:21,560 --> 00:46:25,820
can<font color="#E5E5E5"> do the same thing for all sorts of</font>

1109
00:46:23,240 --> 00:46:27,830
formats as I said some of these am

1110
00:46:25,820 --> 00:46:30,800
<font color="#E5E5E5">packers which are linked with the</font>

1111
00:46:27,830 --> 00:46:33,319
signatures<font color="#CCCCCC"> are dynamic estamos static so</font>

1112
00:46:30,800 --> 00:46:36,170
we can<font color="#CCCCCC"> just</font><font color="#E5E5E5"> test one of these which</font>

1113
00:46:33,320 --> 00:46:43,880
works as the<font color="#E5E5E5"> Titan script so that would</font>

1114
00:46:36,170 --> 00:46:46,100
be a spec for example so aspect we do

1115
00:46:43,880 --> 00:46:48,560
the unification it tells us it's aspect

1116
00:46:46,100 --> 00:46:52,759
tells us who wrote it<font color="#E5E5E5"> and we can go to</font>

1117
00:46:48,560 --> 00:46:55,580
<font color="#E5E5E5">the website as well so we can just tell</font>

1118
00:46:52,760 --> 00:46:59,000
<font color="#CCCCCC">it to unpack itself and it will load the</font>

1119
00:46:55,580 --> 00:47:00,440
<font color="#E5E5E5">Titan script now the Titan script this</font>

1120
00:46:59,000 --> 00:47:03,440
<font color="#E5E5E5">particular one doesn't</font><font color="#CCCCCC"> have any logging</font>

1121
00:47:00,440 --> 00:47:05,690
but you can use that as well it GM

1122
00:47:03,440 --> 00:47:07,310
packing succeeded and we can<font color="#CCCCCC"> just open</font>

1123
00:47:05,690 --> 00:47:09,740
that application as well again and

1124
00:47:07,310 --> 00:47:11,150
analyze it further is the same file so

1125
00:47:09,740 --> 00:47:14,359
that's why the entry point looks the

1126
00:47:11,150 --> 00:47:17,000
same we can do<font color="#E5E5E5"> that as well for the</font><font color="#CCCCCC"> tea</font>

1127
00:47:14,360 --> 00:47:21,140
lock for the<font color="#E5E5E5"> tea lock we have a native</font>

1128
00:47:17,000 --> 00:47:24,200
dynamic dynamic love for<font color="#E5E5E5"> native then I</font>

1129
00:47:21,140 --> 00:47:30,200
have a cam<font color="#CCCCCC"> packer yes so T lock this is</font>

1130
00:47:24,200 --> 00:47:32,390
it wrong parameter so identification it

1131
00:47:30,200 --> 00:47:34,700
gives us a that it's a tea lock and<font color="#CCCCCC"> you</font>

1132
00:47:32,390 --> 00:47:38,540
go to our website<font color="#E5E5E5"> read more about it or</font>

1133
00:47:34,700 --> 00:47:41,020
we can<font color="#E5E5E5"> just and pack it normally so out</font>

1134
00:47:38,540 --> 00:47:41,020
exe

1135
00:47:41,970 --> 00:47:46,529
and it works it's a<font color="#E5E5E5"> different</font>

1136
00:47:44,820 --> 00:47:48,570
application this<font color="#CCCCCC"> is the bell fee</font>

1137
00:47:46,530 --> 00:47:50,670
application now we can do the same<font color="#E5E5E5"> for</font>

1138
00:47:48,570 --> 00:47:52,380
<font color="#E5E5E5">dynamic link libraries as well so</font><font color="#CCCCCC"> all</font>

1139
00:47:50,670 --> 00:47:55,470
the files we have impact us now have

1140
00:47:52,380 --> 00:47:58,680
been executables so we can do<font color="#CCCCCC"> the</font><font color="#E5E5E5"> same</font>

1141
00:47:55,470 --> 00:48:01,740
<font color="#CCCCCC">for the dynamic link libraries now</font>

1142
00:47:58,680 --> 00:48:04,200
there's a small trick you can use now if

1143
00:48:01,740 --> 00:48:07,470
you look at this this is the upx file

1144
00:48:04,200 --> 00:48:09,330
now the full time<font color="#E5E5E5"> packer for you p x is</font>

1145
00:48:07,470 --> 00:48:13,020
Titan script now since Titan script

1146
00:48:09,330 --> 00:48:14,759
doesn't support unpacking of dynamic

1147
00:48:13,020 --> 00:48:19,680
link libraries yet you can just say

1148
00:48:14,760 --> 00:48:22,380
after this to output dll but use the loo

1149
00:48:19,680 --> 00:48:24,598
unpacker which is also available now

1150
00:48:22,380 --> 00:48:27,000
that's will load the<font color="#E5E5E5"> Lua framework and</font>

1151
00:48:24,599 --> 00:48:29,460
<font color="#CCCCCC">the</font><font color="#E5E5E5"> lower will unpack this file entirely</font>

1152
00:48:27,000 --> 00:48:31,349
because the low unpacker relies on the

1153
00:48:29,460 --> 00:48:32,609
Titan engine and it both supports

1154
00:48:31,349 --> 00:48:35,040
executive<font color="#E5E5E5"> balls and dynamic link</font>

1155
00:48:32,609 --> 00:48:37,230
libraries now if we<font color="#E5E5E5"> do that the output</font>

1156
00:48:35,040 --> 00:48:40,529
some information and<font color="#E5E5E5"> the output file</font>

1157
00:48:37,230 --> 00:48:42,599
will<font color="#CCCCCC"> be provided and it's also a valid</font>

1158
00:48:40,530 --> 00:48:44,700
executable you can just<font color="#CCCCCC"> it's dynamic</font>

1159
00:48:42,599 --> 00:48:49,530
link library written in<font color="#CCCCCC"> Delphi as well</font>

1160
00:48:44,700 --> 00:48:51,839
which you can analyze further now if you

1161
00:48:49,530 --> 00:48:54,030
<font color="#E5E5E5">don't know</font><font color="#CCCCCC"> that this unpacker doesn't</font>

1162
00:48:51,839 --> 00:48:57,240
work with the Titan script you can<font color="#E5E5E5"> just</font>

1163
00:48:54,030 --> 00:49:00,480
tell<font color="#CCCCCC"> it to try all the am</font><font color="#E5E5E5"> packers which</font>

1164
00:48:57,240 --> 00:49:05,520
are listed for<font color="#CCCCCC"> the specified format and</font>

1165
00:49:00,480 --> 00:49:07,830
we do this as<font color="#E5E5E5"> X which which is force so</font>

1166
00:49:05,520 --> 00:49:10,470
it will<font color="#E5E5E5"> try the am packers</font><font color="#CCCCCC"> in a row</font>

1167
00:49:07,830 --> 00:49:14,009
until it finds one which is<font color="#E5E5E5"> provided in</font>

1168
00:49:10,470 --> 00:49:17,009
the database which works so it started

1169
00:49:14,010 --> 00:49:18,480
the the Titan script first it so it

1170
00:49:17,010 --> 00:49:21,780
didn't work and then it<font color="#CCCCCC"> started lelu</font>

1171
00:49:18,480 --> 00:49:26,070
automatically which provides an output

1172
00:49:21,780 --> 00:49:28,260
file so we have as<font color="#E5E5E5"> I said we have the</font>

1173
00:49:26,070 --> 00:49:30,030
update feature as well so if we<font color="#E5E5E5"> just</font>

1174
00:49:28,260 --> 00:49:31,830
called Titan missed with the updates

1175
00:49:30,030 --> 00:49:34,560
switch it will connect to<font color="#E5E5E5"> our website</font>

1176
00:49:31,830 --> 00:49:36,810
download<font color="#CCCCCC"> the new database and it will</font>

1177
00:49:34,560 --> 00:49:41,940
download all the new and packers as well

1178
00:49:36,810 --> 00:49:46,740
with it so the last thing we have to

1179
00:49:41,940 --> 00:49:50,400
show for the for the item is demo is the

1180
00:49:46,740 --> 00:49:52,229
use of the<font color="#CCCCCC"> nexus plugin so we have a</font>

1181
00:49:50,400 --> 00:49:54,740
broken file which doesn't work if I just

1182
00:49:52,230 --> 00:49:56,780
started so it is<font color="#CCCCCC"> broken</font>

1183
00:49:54,740 --> 00:50:02,240
so if we just start our Titan list and

1184
00:49:56,780 --> 00:50:04,700
say broken is the<font color="#E5E5E5"> input file and we tell</font>

1185
00:50:02,240 --> 00:50:08,118
it to output it through the output exe

1186
00:50:04,700 --> 00:50:11,868
<font color="#CCCCCC">@mulad</font><font color="#E5E5E5"> brooke says unpacking failed</font>

1187
00:50:08,119 --> 00:50:13,820
because because the file is broken but

1188
00:50:11,869 --> 00:50:16,130
if<font color="#E5E5E5"> we tell it to start it and use the</font>

1189
00:50:13,820 --> 00:50:17,690
<font color="#CCCCCC">Nexus plugin that's the end switch it</font>

1190
00:50:16,130 --> 00:50:19,460
will automatically repair the file on

1191
00:50:17,690 --> 00:50:21,440
the disk and it will monitor the

1192
00:50:19,460 --> 00:50:23,450
application for the missing dynamic link

1193
00:50:21,440 --> 00:50:25,820
libraries as well so if we<font color="#E5E5E5"> just started</font>

1194
00:50:23,450 --> 00:50:28,069
it will tell you that<font color="#E5E5E5"> the unpacking has</font>

1195
00:50:25,820 --> 00:50:30,320
succeeded and the<font color="#CCCCCC"> output file is of</font>

1196
00:50:28,070 --> 00:50:32,360
course yet again<font color="#CCCCCC"> the a valid portable</font>

1197
00:50:30,320 --> 00:50:35,510
executable which you can start the

1198
00:50:32,360 --> 00:50:37,820
debugger or normally and analyze so you

1199
00:50:35,510 --> 00:50:40,340
can try<font color="#CCCCCC"> that and to make sure</font><font color="#E5E5E5"> that the</font>

1200
00:50:37,820 --> 00:50:42,920
reason why<font color="#E5E5E5"> this is failing is because</font>

1201
00:50:40,340 --> 00:50:45,380
the application is broken we've included

1202
00:50:42,920 --> 00:50:49,070
the file the<font color="#CCCCCC"> application called PE</font>

1203
00:50:45,380 --> 00:50:52,070
validate and PE validate was just scan

1204
00:50:49,070 --> 00:50:54,380
the application and tell you all<font color="#E5E5E5"> about</font>

1205
00:50:52,070 --> 00:50:57,020
it if it's valid<font color="#E5E5E5"> if it will say it it's</font>

1206
00:50:54,380 --> 00:50:58,880
valid and if it's not<font color="#E5E5E5"> valid it will give</font>

1207
00:50:57,020 --> 00:51:04,730
you a<font color="#CCCCCC"> detailed report while this is</font>

1208
00:50:58,880 --> 00:51:06,680
<font color="#E5E5E5">broken</font><font color="#CCCCCC"> okay so demagogues that didn't</font>

1209
00:51:04,730 --> 00:51:10,910
listen to<font color="#E5E5E5"> me it says the file as</font><font color="#CCCCCC"> well as</font>

1210
00:51:06,680 --> 00:51:13,069
well<font color="#CCCCCC"> okay and that's the Nexus plugin it</font>

1211
00:51:10,910 --> 00:51:15,500
will repair the damaged files yeah

1212
00:51:13,070 --> 00:51:17,630
because because the file<font color="#E5E5E5"> has been</font>

1213
00:51:15,500 --> 00:51:21,560
<font color="#E5E5E5">repaired so if you just restore that</font>

1214
00:51:17,630 --> 00:51:30,440
then it will say why it is<font color="#CCCCCC"> broken of</font>

1215
00:51:21,560 --> 00:51:33,830
course or not doesn't matter it does

1216
00:51:30,440 --> 00:51:36,380
work so the<font color="#CCCCCC"> problem we addressed with</font>

1217
00:51:33,830 --> 00:51:37,640
this is the damaged damaged files and we

1218
00:51:36,380 --> 00:51:39,470
also have files which are missing

1219
00:51:37,640 --> 00:51:41,569
dynamic link<font color="#CCCCCC"> libraries so this</font>

1220
00:51:39,470 --> 00:51:44,149
particular file is missing a dynamic

1221
00:51:41,570 --> 00:51:46,070
link library which is realigned of dll

1222
00:51:44,150 --> 00:51:48,859
and this is why it cannot start so we

1223
00:51:46,070 --> 00:51:50,990
can use<font color="#CCCCCC"> Nexus again and just tell it</font>

1224
00:51:48,859 --> 00:51:57,470
tell it to unpack the file which<font color="#CCCCCC"> is</font>

1225
00:51:50,990 --> 00:52:00,649
called XP a lister just how to put<font color="#CCCCCC"> it to</font>

1226
00:51:57,470 --> 00:52:03,470
output txt and tell it to use the<font color="#CCCCCC"> nexus</font>

1227
00:52:00,650 --> 00:52:05,060
plugin<font color="#E5E5E5"> and it will unpack it entirely</font>

1228
00:52:03,470 --> 00:52:06,770
because you see it created additional

1229
00:52:05,060 --> 00:52:10,549
file on the system

1230
00:52:06,770 --> 00:52:13,280
which just suppose the spokes d<font color="#CCCCCC"> Packer</font>

1231
00:52:10,550 --> 00:52:16,790
into thinking it is there so the output

1232
00:52:13,280 --> 00:52:18,860
file as well needs that that import as

1233
00:52:16,790 --> 00:52:20,750
well you<font color="#E5E5E5"> can see the tree line is in the</font>

1234
00:52:18,860 --> 00:52:22,460
import table as well<font color="#E5E5E5"> but the file has</font>

1235
00:52:20,750 --> 00:52:25,070
been unpacked you can just load it

1236
00:52:22,460 --> 00:52:27,320
inside the debugger or disassembler

1237
00:52:25,070 --> 00:52:31,100
whatever if<font color="#CCCCCC"> I</font><font color="#E5E5E5"> move it here then sure it</font>

1238
00:52:27,320 --> 00:52:38,390
should work at home but you can

1239
00:52:31,100 --> 00:52:40,490
disassemble it as well<font color="#E5E5E5"> so yes you can do</font>

1240
00:52:38,390 --> 00:52:42,410
<font color="#E5E5E5">all sorts of things</font><font color="#CCCCCC"> with Titan missed</font>

1241
00:52:40,490 --> 00:52:46,669
and that I believe we show you

1242
00:52:42,410 --> 00:52:51,980
everything that<font color="#CCCCCC"> the tightness can do for</font>

1243
00:52:46,670 --> 00:52:53,360
<font color="#CCCCCC">now as the demo for everyone every entry</font>

1244
00:52:51,980 --> 00:52:55,370
in the database you can look at the

1245
00:52:53,360 --> 00:52:57,920
<font color="#CCCCCC">database once you download the tool you</font>

1246
00:52:55,370 --> 00:52:59,660
have a linked link to our website put

1247
00:52:57,920 --> 00:53:01,370
which gives you an information about the

1248
00:52:59,660 --> 00:53:03,770
file formats you have basic information

1249
00:53:01,370 --> 00:53:05,660
you have extensive format analysis which

1250
00:53:03,770 --> 00:53:07,610
tells you how the format really works

1251
00:53:05,660 --> 00:53:08,960
gives you the protection options gives

1252
00:53:07,610 --> 00:53:10,940
you a title may stand back and for<font color="#CCCCCC"> that</font>

1253
00:53:08,960 --> 00:53:13,730
and it<font color="#E5E5E5"> gives you some sample files as</font>

1254
00:53:10,940 --> 00:53:15,920
well now we're going to release this

1255
00:53:13,730 --> 00:53:18,890
stool<font color="#E5E5E5"> I'm going to release it with the</font>

1256
00:53:15,920 --> 00:53:20,900
support for these<font color="#E5E5E5"> 20 formats so we have</font>

1257
00:53:18,890 --> 00:53:23,000
some native<font color="#CCCCCC"> am</font><font color="#E5E5E5"> packers most of them work</font>

1258
00:53:20,900 --> 00:53:25,160
statically some of them work dynamically

1259
00:53:23,000 --> 00:53:27,140
such as te lock I don't have<font color="#E5E5E5"> some script</font>

1260
00:53:25,160 --> 00:53:32,060
I'm Packers and that script and packers

1261
00:53:27,140 --> 00:53:34,549
which are listed only refer to D the

1262
00:53:32,060 --> 00:53:36,290
Titan script and packers we include a

1263
00:53:34,550 --> 00:53:37,760
ton of them so you can<font color="#E5E5E5"> just look at them</font>

1264
00:53:36,290 --> 00:53:40,310
and see<font color="#CCCCCC"> how the Titan script probably</font>

1265
00:53:37,760 --> 00:53:42,110
works because we want Titan script to<font color="#CCCCCC"> be</font>

1266
00:53:40,310 --> 00:53:44,870
one of<font color="#CCCCCC"> the key features of this product</font>

1267
00:53:42,110 --> 00:53:46,550
and<font color="#E5E5E5"> you can heavily rely on it because</font>

1268
00:53:44,870 --> 00:53:49,250
those and backers are really easy to

1269
00:53:46,550 --> 00:53:53,180
write and we can show you one right now

1270
00:53:49,250 --> 00:53:55,700
so and packers<font color="#E5E5E5"> as</font><font color="#CCCCCC"> I said you can</font><font color="#E5E5E5"> have</font>

1271
00:53:53,180 --> 00:53:58,640
Lua native or Python or titan script

1272
00:53:55,700 --> 00:54:04,069
they are all linked to our database

1273
00:53:58,640 --> 00:54:06,529
which looks like this so here's the

1274
00:54:04,070 --> 00:54:10,070
database and as<font color="#E5E5E5"> I said it's a exam it's</font>

1275
00:54:06,530 --> 00:54:11,930
an XML file and for the new PX as you

1276
00:54:10,070 --> 00:54:13,580
can see you<font color="#CCCCCC"> have</font><font color="#E5E5E5"> free and backers one is</font>

1277
00:54:11,930 --> 00:54:16,190
the Titan strip on is<font color="#E5E5E5"> Python and one is</font>

1278
00:54:13,580 --> 00:54:17,840
lower you can<font color="#E5E5E5"> use either of those and as</font>

1279
00:54:16,190 --> 00:54:19,040
you see the default<font color="#E5E5E5"> one is set to the</font>

1280
00:54:17,840 --> 00:54:20,660
<font color="#E5E5E5">Titan script</font>

1281
00:54:19,040 --> 00:54:23,390
these are the signatures we created for

1282
00:54:20,660 --> 00:54:25,069
these formats 20 different<font color="#E5E5E5"> Packer</font>

1283
00:54:23,390 --> 00:54:27,350
families are supported for both

1284
00:54:25,070 --> 00:54:30,770
<font color="#E5E5E5">identification and unpacking you can</font>

1285
00:54:27,350 --> 00:54:33,259
also have signatures inside its database

1286
00:54:30,770 --> 00:54:34,700
that only refer to identification<font color="#E5E5E5"> so you</font>

1287
00:54:33,260 --> 00:54:37,190
don't have<font color="#E5E5E5"> to</font><font color="#CCCCCC"> have an unpacking can only</font>

1288
00:54:34,700 --> 00:54:38,899
use this you can<font color="#E5E5E5"> use this for both am</font>

1289
00:54:37,190 --> 00:54:41,120
packing identification but<font color="#E5E5E5"> you can only</font>

1290
00:54:38,900 --> 00:54:44,360
<font color="#E5E5E5">also use it just for them to find</font>

1291
00:54:41,120 --> 00:54:45,890
purposes so as<font color="#E5E5E5"> you can see these</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> the</font>

1292
00:54:44,360 --> 00:54:49,820
complex signatures we talked<font color="#E5E5E5"> about and</font>

1293
00:54:45,890 --> 00:54:51,980
for TM<font color="#CCCCCC"> Packers you can have</font><font color="#E5E5E5"> Lua native</font>

1294
00:54:49,820 --> 00:54:53,360
Python or<font color="#E5E5E5"> Titan script and for the</font><font color="#CCCCCC"> Titan</font>

1295
00:54:51,980 --> 00:54:56,480
script we're just going to load one of

1296
00:54:53,360 --> 00:54:58,310
those and<font color="#E5E5E5"> to show how it works so it</font>

1297
00:54:56,480 --> 00:55:00,500
does look like<font color="#E5E5E5"> Titan engine because as I</font>

1298
00:54:58,310 --> 00:55:03,710
said we recoded this to feed the Titan

1299
00:55:00,500 --> 00:55:05,270
engine profile and use use some title

1300
00:55:03,710 --> 00:55:08,360
enter features such as reading the data

1301
00:55:05,270 --> 00:55:10,490
from the file then use the<font color="#E5E5E5"> oly script</font>

1302
00:55:08,360 --> 00:55:12,710
functions to find the patterns inside<font color="#CCCCCC"> a</font>

1303
00:55:10,490 --> 00:55:14,569
<font color="#E5E5E5">file and place on break points there so</font>

1304
00:55:12,710 --> 00:55:16,520
once you place a<font color="#CCCCCC"> breakpoint</font><font color="#E5E5E5"> for example</font>

1305
00:55:14,570 --> 00:55:19,010
at the<font color="#E5E5E5"> load library you would read the</font>

1306
00:55:16,520 --> 00:55:21,080
string which is<font color="#E5E5E5"> held at eax there and</font>

1307
00:55:19,010 --> 00:55:23,450
that's<font color="#E5E5E5"> the name of</font><font color="#CCCCCC"> the library and you</font>

1308
00:55:21,080 --> 00:55:26,900
just pass that to the<font color="#CCCCCC"> Titan engine same</font>

1309
00:55:23,450 --> 00:55:28,399
goes for the getprocaddress just read

1310
00:55:26,900 --> 00:55:30,290
the string or the ordinal number and

1311
00:55:28,400 --> 00:55:32,270
pass that to the engine and<font color="#E5E5E5"> at the end</font>

1312
00:55:30,290 --> 00:55:34,279
you have<font color="#CCCCCC"> a static part of the script</font>

1313
00:55:32,270 --> 00:55:36,500
<font color="#E5E5E5">which will probably never change that</font>

1314
00:55:34,280 --> 00:55:39,740
all this<font color="#E5E5E5"> does is dumb as the file to</font>

1315
00:55:36,500 --> 00:55:42,290
disk exports the import able to it and

1316
00:55:39,740 --> 00:55:43,370
makes<font color="#E5E5E5"> it a valid file so this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the</font>

1317
00:55:42,290 --> 00:55:45,860
part<font color="#E5E5E5"> of the script which will probably</font>

1318
00:55:43,370 --> 00:55:47,600
never change for any of the scripts and

1319
00:55:45,860 --> 00:55:50,510
of course if<font color="#E5E5E5"> there's an error</font><font color="#CCCCCC"> you're</font>

1320
00:55:47,600 --> 00:55:53,089
just returned error so that's how one<font color="#CCCCCC"> of</font>

1321
00:55:50,510 --> 00:55:55,790
the am<font color="#E5E5E5"> packers for the Titan</font><font color="#CCCCCC"> scripts</font>

1322
00:55:53,090 --> 00:55:58,730
<font color="#E5E5E5">looks like I said we ship 20 of those</font>

1323
00:55:55,790 --> 00:56:00,920
<font color="#E5E5E5">today there are no version numbers we</font>

1324
00:55:58,730 --> 00:56:04,280
support almost<font color="#CCCCCC"> every version of every</font>

1325
00:56:00,920 --> 00:56:07,190
<font color="#CCCCCC">Packer but for the easy ones such as FSG</font>

1326
00:56:04,280 --> 00:56:09,710
and believe ass back we've intentionally

1327
00:56:07,190 --> 00:56:11,150
left some older versions unsupported

1328
00:56:09,710 --> 00:56:12,920
because we want<font color="#E5E5E5"> to compute it to start</font>

1329
00:56:11,150 --> 00:56:15,800
with something easy so again they can

1330
00:56:12,920 --> 00:56:19,070
just extend the existing framework from

1331
00:56:15,800 --> 00:56:23,530
that starting point and that's<font color="#E5E5E5"> it for</font>

1332
00:56:19,070 --> 00:56:23,530
this item s project some questions

1333
00:56:24,600 --> 00:56:37,080
yeah well as you heard just now the

1334
00:56:33,480 --> 00:56:38,790
<font color="#CCCCCC">Titan</font><font color="#E5E5E5"> miss project is a database and you</font>

1335
00:56:37,080 --> 00:56:41,160
can extend that so if you come across

1336
00:56:38,790 --> 00:56:43,620
something that<font color="#E5E5E5"> we don't support yet you</font>

1337
00:56:41,160 --> 00:56:45,690
can<font color="#CCCCCC"> easily add a signature for that and</font>

1338
00:56:43,620 --> 00:56:47,759
create an<font color="#E5E5E5"> ant</font><font color="#CCCCCC"> packer we can just meal as</font>

1339
00:56:45,690 --> 00:56:49,320
a sample<font color="#E5E5E5"> and will happily take a look at</font>

1340
00:56:47,760 --> 00:56:57,240
it if it's something<font color="#CCCCCC"> of interest we can</font>

1341
00:56:49,320 --> 00:56:59,910
add that<font color="#CCCCCC"> ourselves of course this this</font>

1342
00:56:57,240 --> 00:57:02,189
<font color="#E5E5E5">isn't a generic</font><font color="#CCCCCC"> am</font><font color="#E5E5E5"> packer so this isn't</font>

1343
00:56:59,910 --> 00:57:04,589
a one click solution we wanted to

1344
00:57:02,190 --> 00:57:06,450
contribute we wanted<font color="#CCCCCC"> to</font><font color="#E5E5E5"> have community</font>

1345
00:57:04,590 --> 00:57:08,100
contributing to this<font color="#E5E5E5"> because we know</font>

1346
00:57:06,450 --> 00:57:10,169
<font color="#E5E5E5">that there are talented reverse</font>

1347
00:57:08,100 --> 00:57:11,819
engineers all over the world which are

1348
00:57:10,170 --> 00:57:14,340
happy to work at this we know the

1349
00:57:11,820 --> 00:57:16,920
existence of 800 scripts and these guys

1350
00:57:14,340 --> 00:57:19,260
<font color="#E5E5E5">have</font><font color="#CCCCCC"> been working over the past few</font>

1351
00:57:16,920 --> 00:57:21,270
years in this so this<font color="#E5E5E5"> is a</font><font color="#CCCCCC"> community</font>

1352
00:57:19,260 --> 00:57:23,550
project which has targeted<font color="#CCCCCC"> I'm backing</font>

1353
00:57:21,270 --> 00:57:25,200
this isn't generic solution because we

1354
00:57:23,550 --> 00:57:28,020
<font color="#E5E5E5">we can't really rely on generic</font>

1355
00:57:25,200 --> 00:57:30,359
solutions to handle each and every one

1356
00:57:28,020 --> 00:57:34,020
<font color="#CCCCCC">of those</font><font color="#E5E5E5"> cases that's why the target</font>

1357
00:57:30,360 --> 00:57:36,350
that one is the<font color="#CCCCCC"> way to go anybody</font><font color="#E5E5E5"> else</font>

1358
00:57:34,020 --> 00:57:36,350
yes

1359
00:57:52,240 --> 00:57:56,470
yeah well we did some<font color="#E5E5E5"> within some</font>

1360
00:57:55,120 --> 00:57:58,569
performance testing for a last

1361
00:57:56,470 --> 00:58:01,359
presentation that was Carol workshop and

1362
00:57:58,570 --> 00:58:02,980
Nelson key and the numbers we came up

1363
00:58:01,360 --> 00:58:05,260
with and these are pretty accurate is

1364
00:58:02,980 --> 00:58:08,260
for dynamic am packing it takes<font color="#E5E5E5"> about</font>

1365
00:58:05,260 --> 00:58:11,230
250 milliseconds that's a round number

1366
00:58:08,260 --> 00:58:13,510
about<font color="#E5E5E5"> 4d files for under</font><font color="#CCCCCC"> 1 megabyte to</font>

1367
00:58:11,230 --> 00:58:16,570
be unpacked and that's as fast as they

1368
00:58:13,510 --> 00:58:19,600
are executing so there's this<font color="#E5E5E5"> little too</font>

1369
00:58:16,570 --> 00:58:21,640
little to none performance penalty for

1370
00:58:19,600 --> 00:58:23,529
dynamic and<font color="#CCCCCC"> Packers for the static ones</font>

1371
00:58:21,640 --> 00:58:26,440
that they can go even faster because

1372
00:58:23,530 --> 00:58:29,380
they only<font color="#E5E5E5"> the only the only penalty they</font>

1373
00:58:26,440 --> 00:58:31,030
have is the speed of the algorithm for

1374
00:58:29,380 --> 00:58:33,730
the decompression but that's also for

1375
00:58:31,030 --> 00:58:35,350
the packer so static ones can go faster

1376
00:58:33,730 --> 00:58:41,490
<font color="#CCCCCC">than the</font><font color="#E5E5E5"> actual execution it depends on</font>

1377
00:58:35,350 --> 00:58:41,490
<font color="#E5E5E5">the file format of course yes</font>

1378
00:58:47,830 --> 00:58:52,270
<font color="#E5E5E5">okay yeah well the</font><font color="#CCCCCC"> Titan engine can</font>

1379
00:58:50,590 --> 00:58:55,420
handle all of that it just<font color="#E5E5E5"> depends on</font>

1380
00:58:52,270 --> 00:58:57,850
how you create your<font color="#CCCCCC"> own Packer so all of</font>

1381
00:58:55,420 --> 00:58:59,920
the exceptions that that shown that you

1382
00:58:57,850 --> 00:59:01,779
are handled by the Titan engine that

1383
00:58:59,920 --> 00:59:03,400
doesn't matter but if there are<font color="#E5E5E5"> some</font>

1384
00:59:01,780 --> 00:59:05,290
protection options and you're referring

1385
00:59:03,400 --> 00:59:07,570
<font color="#CCCCCC">to that as well you</font><font color="#E5E5E5"> can handle</font><font color="#CCCCCC"> that</font>

1386
00:59:05,290 --> 00:59:09,340
yourself it depends on the file format

1387
00:59:07,570 --> 00:59:10,510
so because you are writing the am<font color="#CCCCCC"> Packer</font>

1388
00:59:09,340 --> 00:59:12,970
for the format you have to

1389
00:59:10,510 --> 00:59:15,040
reverse-engineer it and a counter

1390
00:59:12,970 --> 00:59:17,109
everything it throws at you but it has

1391
00:59:15,040 --> 00:59:19,240
built-in functions to hide the debugger

1392
00:59:17,110 --> 00:59:26,920
and do the standard stuffs that's not

1393
00:59:19,240 --> 00:59:28,419
stuff we do<font color="#E5E5E5"> today so</font><font color="#CCCCCC"> thank you well if</font>

1394
00:59:26,920 --> 00:59:32,080
you write a<font color="#E5E5E5"> number for that will be</font>

1395
00:59:28,420 --> 00:59:35,800
happy to include it no as I said we have

1396
00:59:32,080 --> 00:59:37,450
<font color="#E5E5E5">20 formats and those are it and you</font><font color="#CCCCCC"> know</font>

1397
00:59:35,800 --> 00:59:39,460
tomayto is a pretty complex and<font color="#CCCCCC"> Packer</font>

1398
00:59:37,450 --> 00:59:42,580
if we just<font color="#E5E5E5"> gave that free people would</font>

1399
00:59:39,460 --> 00:59:44,800
use this tool to break in factual

1400
00:59:42,580 --> 00:59:48,069
property which is protected by tomayto

1401
00:59:44,800 --> 00:59:49,510
and we really don't want to do that so

1402
00:59:48,070 --> 00:59:51,370
in<font color="#CCCCCC"> your lab you can create your</font><font color="#E5E5E5"> own</font>

1403
00:59:49,510 --> 00:59:55,210
<font color="#E5E5E5">Packer for tamiya and use it we do that</font>

1404
00:59:51,370 --> 01:00:03,609
we do that as well anybody else<font color="#CCCCCC"> yes</font><font color="#E5E5E5"> you</font>

1405
00:59:55,210 --> 01:00:05,920
<font color="#E5E5E5">okay yeah yes the Titan engine supports</font>

1406
01:00:03,610 --> 01:00:07,930
multiple unpacking instances so you can

1407
01:00:05,920 --> 01:00:09,940
just detach these processes and continue

1408
01:00:07,930 --> 01:00:11,740
on back in that process as I said<font color="#CCCCCC"> it</font>

1409
01:00:09,940 --> 01:00:13,870
depends on<font color="#E5E5E5"> how you create your your own</font>

1410
01:00:11,740 --> 01:00:16,750
unpacker this is isn't a one click

1411
01:00:13,870 --> 01:00:18,700
solution so a for the<font color="#E5E5E5"> titans script it</font>

1412
01:00:16,750 --> 01:00:21,040
only supports single process and backers

1413
01:00:18,700 --> 01:00:22,899
but there's about 200<font color="#E5E5E5"> a packer families</font>

1414
01:00:21,040 --> 01:00:26,380
which can be supported by this so I'm

1415
01:00:22,900 --> 01:00:27,730
<font color="#E5E5E5">taking this is good enough and for the</font>

1416
01:00:26,380 --> 01:00:29,650
rest you can just write your own native

1417
01:00:27,730 --> 01:00:45,250
am<font color="#E5E5E5"> packer which will easily be plugged</font>

1418
01:00:29,650 --> 01:00:46,960
into the system anywhere else see ya the

1419
01:00:45,250 --> 01:00:49,540
<font color="#CCCCCC">Titan engine has some functions in it</font>

1420
01:00:46,960 --> 01:00:52,390
which enables statical the compression

1421
01:00:49,540 --> 01:00:55,750
so if there are some noms statical

1422
01:00:52,390 --> 01:00:57,910
compressions such as<font color="#E5E5E5"> Z</font><font color="#CCCCCC"> lib</font><font color="#E5E5E5"> I think and a</font>

1423
01:00:55,750 --> 01:00:59,470
plebe and lzma that's supported by the

1424
01:00:57,910 --> 01:01:01,029
engine could just give it a pointer and

1425
01:00:59,470 --> 01:01:07,109
it will depress that memory for you and

1426
01:01:01,030 --> 01:01:07,110
then you do what do<font color="#E5E5E5"> you want put it yes</font>

1427
01:01:08,880 --> 01:01:15,450
yes the form is on our website and we

1428
01:01:12,150 --> 01:01:18,150
will create a much better Q&A kind of

1429
01:01:15,450 --> 01:01:20,009
website in<font color="#CCCCCC"> the days to follow so we can</font>

1430
01:01:18,150 --> 01:01:22,140
ask questions and<font color="#E5E5E5"> have them answered</font>

1431
01:01:20,009 --> 01:01:23,789
faster so if you think<font color="#E5E5E5"> of stack overflow</font>

1432
01:01:22,140 --> 01:01:25,618
and<font color="#E5E5E5"> websites like that it's going to be</font>

1433
01:01:23,789 --> 01:01:32,420
like<font color="#E5E5E5"> that because that that's easier</font><font color="#CCCCCC"> to</font>

1434
01:01:25,619 --> 01:01:32,420
monitor QA anybody else

1435
01:01:39,790 --> 01:01:52,630
organization

1436
01:01:42,130 --> 01:01:54,880
well<font color="#CCCCCC"> reverse-engineered community is</font>

1437
01:01:52,630 --> 01:01:57,069
quite large and most of<font color="#E5E5E5"> them already</font>

1438
01:01:54,880 --> 01:01:59,440
follow what we do since last year when

1439
01:01:57,069 --> 01:02:01,690
<font color="#CCCCCC">we did the</font><font color="#E5E5E5"> Titan engine project and they</font>

1440
01:01:59,440 --> 01:02:03,880
are happy to see what we do today they

1441
01:02:01,690 --> 01:02:07,240
also have some people<font color="#CCCCCC"> that are creating</font>

1442
01:02:03,880 --> 01:02:08,829
their own did their own unpacking tools

1443
01:02:07,240 --> 01:02:10,990
which are similar to tighten missed

1444
01:02:08,829 --> 01:02:22,539
based<font color="#E5E5E5"> on the Titan engine framework as</font>

1445
01:02:10,990 --> 01:02:25,049
well anybody<font color="#CCCCCC"> else if</font><font color="#E5E5E5"> not that's all we</font>

1446
01:02:22,539 --> 01:02:25,049
have thank<font color="#E5E5E5"> you</font>

