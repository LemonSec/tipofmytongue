1
00:00:00,000 --> 00:00:03,750
all right<font color="#CCCCCC"> this talks called the black</font>

2
00:00:01,469 --> 00:00:06,089
art of binary hack hijacking just try to

3
00:00:03,750 --> 00:00:07,290
<font color="#E5E5E5">come up with a clever title it's not</font>

4
00:00:06,089 --> 00:00:09,450
<font color="#E5E5E5">really a black card it's fairly</font>

5
00:00:07,290 --> 00:00:11,670
straightforward but something that

6
00:00:09,450 --> 00:00:12,809
hasn't been particularly automated in

7
00:00:11,670 --> 00:00:15,929
the past and<font color="#E5E5E5"> that's what I'm trying</font><font color="#CCCCCC"> to</font>

8
00:00:12,809 --> 00:00:17,520
accomplish here so first off I'm<font color="#E5E5E5"> going</font>

9
00:00:15,929 --> 00:00:18,930
to talk<font color="#E5E5E5"> about a little bit the overview</font>

10
00:00:17,520 --> 00:00:21,210
of persistence techniques how Mauer

11
00:00:18,930 --> 00:00:23,189
stays persistent or how a pen tester

12
00:00:21,210 --> 00:00:25,050
would essentially get something to be

13
00:00:23,189 --> 00:00:26,460
persistent on a network if it was that's

14
00:00:25,050 --> 00:00:28,859
what<font color="#E5E5E5"> he's trying</font><font color="#CCCCCC"> to do</font><font color="#E5E5E5"> I'll talk about</font>

15
00:00:26,460 --> 00:00:31,500
<font color="#E5E5E5">the binge act tool which is basically my</font>

16
00:00:28,859 --> 00:00:33,360
approach to automating persistence

17
00:00:31,500 --> 00:00:36,329
through binary hijacking specifically

18
00:00:33,360 --> 00:00:37,649
and I'll go<font color="#E5E5E5"> through some</font><font color="#CCCCCC"> of the major</font>

19
00:00:36,329 --> 00:00:38,790
techniques that supports that actually

20
00:00:37,649 --> 00:00:40,890
supports quite a few other things that

21
00:00:38,790 --> 00:00:42,690
<font color="#E5E5E5">I'm</font><font color="#CCCCCC"> not going to talk about but you can</font>

22
00:00:40,890 --> 00:00:45,120
download it<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> know run</font><font color="#E5E5E5"> the tool</font>

23
00:00:42,690 --> 00:00:48,089
with the<font color="#E5E5E5"> dash H option and see some of</font>

24
00:00:45,120 --> 00:00:49,828
the other<font color="#CCCCCC"> things that supports it</font>

25
00:00:48,090 --> 00:00:51,480
supports a few different<font color="#E5E5E5"> process</font>

26
00:00:49,829 --> 00:00:54,059
injections style parasites<font color="#E5E5E5"> I'll talk</font>

27
00:00:51,480 --> 00:00:56,099
<font color="#CCCCCC">about those and since I'm on the topic</font>

28
00:00:54,059 --> 00:00:57,839
of process injection parasites<font color="#E5E5E5"> I'll talk</font>

29
00:00:56,100 --> 00:01:00,149
<font color="#E5E5E5">about</font><font color="#CCCCCC"> a new method for process injection</font>

30
00:00:57,840 --> 00:01:01,710
that will be implemented soon in the

31
00:01:00,149 --> 00:01:03,570
tool there's already space for it in the

32
00:01:01,710 --> 00:01:07,680
command line option so it's not quite

33
00:01:03,570 --> 00:01:09,689
ready for prime time yet<font color="#CCCCCC"> all right so</font>

34
00:01:07,680 --> 00:01:13,229
persistence mechanisms on a<font color="#CCCCCC"> Windows</font>

35
00:01:09,689 --> 00:01:14,399
system the most easy is the the<font color="#E5E5E5"> startup</font>

36
00:01:13,229 --> 00:01:16,259
folders of course all you have to do is

37
00:01:14,400 --> 00:01:18,299
copy a file over there very easy to

38
00:01:16,259 --> 00:01:20,670
detect same with the registry run keys

39
00:01:18,299 --> 00:01:22,890
as you move on down this list<font color="#E5E5E5"> you can</font>

40
00:01:20,670 --> 00:01:24,750
see kind of<font color="#E5E5E5"> the level of difficulty</font>

41
00:01:22,890 --> 00:01:26,700
required to install something is pretty

42
00:01:24,750 --> 00:01:30,090
much matches how difficult it is to

43
00:01:26,700 --> 00:01:32,100
detect the very last one on the list is

44
00:01:30,090 --> 00:01:34,560
what<font color="#CCCCCC"> I call dll search order hijacking</font>

45
00:01:32,100 --> 00:01:37,140
it's still very easy to install very

46
00:01:34,560 --> 00:01:38,790
very very<font color="#E5E5E5"> difficult to detect this is</font>

47
00:01:37,140 --> 00:01:41,460
not what this talk is about we have a

48
00:01:38,790 --> 00:01:42,689
blog post about that that I wrote a week

49
00:01:41,460 --> 00:01:44,939
and a half two weeks ago<font color="#CCCCCC"> or so i</font>

50
00:01:42,689 --> 00:01:47,429
recommend going out to the mandiant blog

51
00:01:44,939 --> 00:01:48,779
if you haven't read that<font color="#E5E5E5"> blog</font><font color="#CCCCCC"> post but</font>

52
00:01:47,430 --> 00:01:51,030
anyway the next lowest one down on this

53
00:01:48,780 --> 00:01:52,439
list here is binary hijacking still

54
00:01:51,030 --> 00:01:55,590
pretty difficult to detect from<font color="#E5E5E5"> a</font>

55
00:01:52,439 --> 00:01:58,110
forensic perspective this basically

56
00:01:55,590 --> 00:02:00,030
<font color="#E5E5E5">involves you know just taking a binary</font>

57
00:01:58,110 --> 00:02:01,829
that does something already that is

58
00:02:00,030 --> 00:02:07,320
loaded with the system boots and just

59
00:02:01,829 --> 00:02:08,639
adding functionality to it<font color="#E5E5E5"> all right so</font>

60
00:02:07,320 --> 00:02:11,879
with inject is it's a pretty simple

61
00:02:08,639 --> 00:02:13,609
command-line interface tool you just run

62
00:02:11,879 --> 00:02:17,810
it only has a few command line off

63
00:02:13,610 --> 00:02:19,160
really hard to mess up but it does a lot

64
00:02:17,810 --> 00:02:21,620
of functionality and really the the

65
00:02:19,160 --> 00:02:23,150
<font color="#E5E5E5">tools and the impetus</font><font color="#CCCCCC"> for me writing</font>

66
00:02:21,620 --> 00:02:24,620
this tool is<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I've</font><font color="#E5E5E5"> been writing</font>

67
00:02:23,150 --> 00:02:26,660
these techniques and individual little

68
00:02:24,620 --> 00:02:29,240
one-off programs for the last I don't

69
00:02:26,660 --> 00:02:31,190
know four<font color="#CCCCCC"> years or</font><font color="#E5E5E5"> so and I finally</font><font color="#CCCCCC"> just</font>

70
00:02:29,240 --> 00:02:33,920
decided to consolidate them all and make

71
00:02:31,190 --> 00:02:36,320
one kind of all you need to infect

72
00:02:33,920 --> 00:02:37,790
binaries kind of tool and<font color="#E5E5E5"> this isn't</font>

73
00:02:36,320 --> 00:02:39,410
necessarily just malicious like I said

74
00:02:37,790 --> 00:02:41,060
we I'll<font color="#E5E5E5"> talk about some legitimate uses</font>

75
00:02:39,410 --> 00:02:45,170
of some of the stuff in a minute but

76
00:02:41,060 --> 00:02:46,580
anyway one<font color="#E5E5E5"> of things</font><font color="#CCCCCC"> I can do is the</font>

77
00:02:45,170 --> 00:02:48,530
most basic<font color="#CCCCCC"> claims just add new sections</font>

78
00:02:46,580 --> 00:02:50,510
to a binary nothing particularly

79
00:02:48,530 --> 00:02:53,000
groundbreaking about that it does<font color="#CCCCCC"> have a</font>

80
00:02:50,510 --> 00:02:55,220
very good algorithm for adding sections

81
00:02:53,000 --> 00:02:56,930
and I'll if we have time at<font color="#CCCCCC"> the very end</font>

82
00:02:55,220 --> 00:02:58,880
and<font color="#E5E5E5"> I can pull up p give you and show</font>

83
00:02:56,930 --> 00:03:00,920
you<font color="#E5E5E5"> some examples I can show you where</font>

84
00:02:58,880 --> 00:03:03,920
my tool succeeds and other tools fail

85
00:03:00,920 --> 00:03:06,619
but if you just wanted<font color="#E5E5E5"> to add data</font>

86
00:03:03,920 --> 00:03:08,570
inside a binary you know too I don't

87
00:03:06,620 --> 00:03:12,500
know very crude stag or something like

88
00:03:08,570 --> 00:03:14,450
that the tool supports it basic entry

89
00:03:12,500 --> 00:03:16,400
whoops basic entry point redirections so

90
00:03:14,450 --> 00:03:18,079
if you add on a new piece of<font color="#E5E5E5"> data you</font>

91
00:03:16,400 --> 00:03:19,310
can specify the the permissions of that

92
00:03:18,080 --> 00:03:21,950
section so<font color="#E5E5E5"> you can say you want it to be</font>

93
00:03:19,310 --> 00:03:23,570
<font color="#CCCCCC">an executable section and we can very</font>

94
00:03:21,950 --> 00:03:25,730
easily just redirect the entry point of

95
00:03:23,570 --> 00:03:27,380
the binary to that section so now when

96
00:03:25,730 --> 00:03:29,450
this binary starts up its going to start

97
00:03:27,380 --> 00:03:34,370
executing your code instead of the real

98
00:03:29,450 --> 00:03:35,929
code that's<font color="#E5E5E5"> just what I call entry point</font>

99
00:03:34,370 --> 00:03:37,790
redirection now so it also supports

100
00:03:35,930 --> 00:03:39,110
entry point hooking which would be

101
00:03:37,790 --> 00:03:42,230
something like this this<font color="#CCCCCC"> is an entry</font>

102
00:03:39,110 --> 00:03:43,850
point hook stub for a dll so when you

103
00:03:42,230 --> 00:03:46,010
have a deal out<font color="#E5E5E5"> the problem with a dll</font>

104
00:03:43,850 --> 00:03:47,660
is it's<font color="#E5E5E5"> going to be loaded anywhere in</font>

105
00:03:46,010 --> 00:03:49,370
memory you don't have any real way to

106
00:03:47,660 --> 00:03:52,609
guarantee where that<font color="#CCCCCC"> dll is going to be</font>

107
00:03:49,370 --> 00:03:55,040
loaded and with<font color="#E5E5E5"> a hook and entry point</font>

108
00:03:52,610 --> 00:03:56,930
hook we want our code to run first<font color="#E5E5E5"> and</font>

109
00:03:55,040 --> 00:03:58,970
then at some point jump back to<font color="#CCCCCC"> the</font>

110
00:03:56,930 --> 00:04:02,959
original code so that the dll works as

111
00:03:58,970 --> 00:04:04,489
intended so<font color="#CCCCCC"> i just</font><font color="#E5E5E5"> prepend this little</font>

112
00:04:02,959 --> 00:04:06,290
sequence of instructions here what I

113
00:04:04,489 --> 00:04:09,920
basically do is I take the Delta which

114
00:04:06,290 --> 00:04:11,209
is the difference<font color="#E5E5E5"> between the memory</font>

115
00:04:09,920 --> 00:04:13,369
address right after the call instruction

116
00:04:11,209 --> 00:04:15,019
and where the original entry point is

117
00:04:13,370 --> 00:04:17,060
and using<font color="#CCCCCC"> this sequence I'm actually</font>

118
00:04:15,019 --> 00:04:18,769
able to build up a real pointer in

119
00:04:17,060 --> 00:04:20,839
memory and push it on the<font color="#E5E5E5"> top of the</font>

120
00:04:18,769 --> 00:04:22,130
stack to your shellcode so we have to do

121
00:04:20,839 --> 00:04:25,310
is<font color="#E5E5E5"> make sure your shellcode will take</font>

122
00:04:22,130 --> 00:04:26,600
basically<font color="#CCCCCC"> a parameter and you can use</font>

123
00:04:25,310 --> 00:04:28,700
that you can jump back<font color="#E5E5E5"> to it at the</font>

124
00:04:26,600 --> 00:04:31,250
and<font color="#CCCCCC"> we just do the return instruction in</font>

125
00:04:28,700 --> 00:04:32,750
the<font color="#E5E5E5"> return will actually jump back by</font>

126
00:04:31,250 --> 00:04:35,120
default to whatever's on the top<font color="#CCCCCC"> of the</font>

127
00:04:32,750 --> 00:04:38,360
stack so pretty simple system here for

128
00:04:35,120 --> 00:04:41,360
doing entry point redirection that's

129
00:04:38,360 --> 00:04:44,570
very basic feature here's the<font color="#E5E5E5"> feature we</font>

130
00:04:41,360 --> 00:04:46,460
use more<font color="#E5E5E5"> often in our line of work entry</font>

131
00:04:44,570 --> 00:04:48,620
point table poisoning so<font color="#E5E5E5"> I'm at have the</font>

132
00:04:46,460 --> 00:04:52,489
ability to modify the import table to

133
00:04:48,620 --> 00:04:53,750
add on imports this technology<font color="#CCCCCC"> has been</font>

134
00:04:52,490 --> 00:04:56,270
around for<font color="#E5E5E5"> a</font><font color="#CCCCCC"> while particularly with the</font>

135
00:04:53,750 --> 00:04:58,370
Microsoft detours library however there

136
00:04:56,270 --> 00:05:00,799
the detour library will add<font color="#CCCCCC"> it I think</font>

137
00:04:58,370 --> 00:05:02,990
by default to<font color="#CCCCCC"> the very end I don't not</font>

138
00:05:00,800 --> 00:05:05,780
sure if there's a way to to modify that

139
00:05:02,990 --> 00:05:08,030
behavior so when a binary loads it

140
00:05:05,780 --> 00:05:09,590
basically walks through the import list

141
00:05:08,030 --> 00:05:12,140
of all the<font color="#CCCCCC"> DLLs loaded and it'll load</font>

142
00:05:09,590 --> 00:05:14,450
them in that order so that<font color="#E5E5E5"> the trick of</font>

143
00:05:12,140 --> 00:05:16,159
<font color="#E5E5E5">mine is that whenever you say you want a</font>

144
00:05:14,450 --> 00:05:19,340
specific dll to be loaded<font color="#E5E5E5"> will actually</font>

145
00:05:16,160 --> 00:05:21,080
load first and not last this is we use

146
00:05:19,340 --> 00:05:22,280
this system for kind of an<font color="#E5E5E5"> internal</font>

147
00:05:21,080 --> 00:05:24,919
project where we<font color="#E5E5E5"> want to do some</font>

148
00:05:22,280 --> 00:05:26,390
behavioral analysis on malware so we

149
00:05:24,920 --> 00:05:28,970
want some some of our code to execute

150
00:05:26,390 --> 00:05:30,740
inside the process first before the

151
00:05:28,970 --> 00:05:33,950
malware execute so all<font color="#CCCCCC"> we do is we</font>

152
00:05:30,740 --> 00:05:36,980
packaged our code inside of a DLL and we

153
00:05:33,950 --> 00:05:39,229
use the entry point or the import table

154
00:05:36,980 --> 00:05:41,120
poisoning to force the binary no matter

155
00:05:39,230 --> 00:05:43,010
how<font color="#CCCCCC"> its launched to be launched as a</font>

156
00:05:41,120 --> 00:05:44,810
service or whatever no matter how<font color="#CCCCCC"> its</font>

157
00:05:43,010 --> 00:05:46,730
launched its going to execute our dll

158
00:05:44,810 --> 00:05:50,360
before it does anything else in the

159
00:05:46,730 --> 00:05:51,950
process even the entry point it<font color="#CCCCCC"> dll's</font>

160
00:05:50,360 --> 00:05:55,640
get loaded and executed before the entry

161
00:05:51,950 --> 00:05:57,860
<font color="#E5E5E5">point so another thing we got happened</font>

162
00:05:55,640 --> 00:05:59,780
here is the automated installation of

163
00:05:57,860 --> 00:06:01,850
TLS callbacks some of you might be

164
00:05:59,780 --> 00:06:04,340
familiar with this kind<font color="#E5E5E5"> of one of those</font>

165
00:06:01,850 --> 00:06:07,400
somewhat malicious techniques<font color="#E5E5E5"> used out</font>

166
00:06:04,340 --> 00:06:09,739
<font color="#E5E5E5">there not all that common though it's</font>

167
00:06:07,400 --> 00:06:10,849
initially a thread part<font color="#CCCCCC"> of the whole</font>

168
00:06:09,740 --> 00:06:12,530
thread system you know you can have

169
00:06:10,850 --> 00:06:13,880
threads that have their own<font color="#CCCCCC"> unique</font>

170
00:06:12,530 --> 00:06:15,440
pieces of memory and you can have

171
00:06:13,880 --> 00:06:17,960
callback functions<font color="#CCCCCC"> that can initialize</font>

172
00:06:15,440 --> 00:06:20,150
them but<font color="#E5E5E5"> basically the why this is</font>

173
00:06:17,960 --> 00:06:22,370
useful from<font color="#E5E5E5"> an attacker perspective as</font>

174
00:06:20,150 --> 00:06:24,739
TLS callbacks execute before the<font color="#E5E5E5"> entry</font>

175
00:06:22,370 --> 00:06:27,020
point of a binary so if you attack a

176
00:06:24,740 --> 00:06:30,350
<font color="#E5E5E5">attach a little piece of malicious code</font>

177
00:06:27,020 --> 00:06:31,909
to a TLS call back in a binary you have

178
00:06:30,350 --> 00:06:34,520
full<font color="#E5E5E5"> access to do anything to that</font>

179
00:06:31,910 --> 00:06:37,220
process before anything in the binary

180
00:06:34,520 --> 00:06:39,810
runs so if you wanted like<font color="#CCCCCC"> to have some</font>

181
00:06:37,220 --> 00:06:42,990
anti<font color="#E5E5E5"> VMware or anti debugger detection</font>

182
00:06:39,810 --> 00:06:45,120
TLS callbacks are a pretty novel place

183
00:06:42,990 --> 00:06:46,590
to put that data because when you open

184
00:06:45,120 --> 00:06:48,780
it up<font color="#E5E5E5"> an ollie debug with default</font>

185
00:06:46,590 --> 00:06:51,388
settings the TLS callback is already

186
00:06:48,780 --> 00:06:52,950
executed you don't have you know it's

187
00:06:51,389 --> 00:06:54,540
not automatically going to pause at that

188
00:06:52,950 --> 00:06:59,550
location you can<font color="#E5E5E5"> configure it to pause</font>

189
00:06:54,540 --> 00:07:02,370
but it's not the default behavior and

190
00:06:59,550 --> 00:07:05,790
this is<font color="#CCCCCC"> of course</font><font color="#E5E5E5"> if user32.dll is</font>

191
00:07:02,370 --> 00:07:07,380
loaded something in the user 32 dll call

192
00:07:05,790 --> 00:07:11,460
chain actually forces<font color="#E5E5E5"> these things to be</font>

193
00:07:07,380 --> 00:07:14,280
loaded and as I was saying this is a

194
00:07:11,460 --> 00:07:16,710
fairly<font color="#CCCCCC"> easy to</font><font color="#E5E5E5"> use program so all you</font>

195
00:07:14,280 --> 00:07:19,080
have<font color="#E5E5E5"> to do to force a TLS call back to</font>

196
00:07:16,710 --> 00:07:20,159
be created with your code your shellcode

197
00:07:19,080 --> 00:07:22,200
that you could have generated with

198
00:07:20,160 --> 00:07:24,120
metasploit is<font color="#E5E5E5"> this simple little command</font>

199
00:07:22,200 --> 00:07:27,630
line down here<font color="#CCCCCC"> at the bottom been jacked</font>

200
00:07:24,120 --> 00:07:30,780
I you give it a clean executable dash<font color="#E5E5E5"> 0</font>

201
00:07:27,630 --> 00:07:33,090
you give it an output executable dash D

202
00:07:30,780 --> 00:07:36,450
you specify your data which in this case

203
00:07:33,090 --> 00:07:38,700
would be<font color="#E5E5E5"> shellcode and you just say dash</font>

204
00:07:36,450 --> 00:07:42,030
T or dash dash TLS and it's going<font color="#CCCCCC"> to</font>

205
00:07:38,700 --> 00:07:46,409
<font color="#E5E5E5">install that block</font><font color="#CCCCCC"> of data as a TLS call</font>

206
00:07:42,030 --> 00:07:50,219
back there's some other utility wrapping

207
00:07:46,410 --> 00:07:52,110
functionality right now I<font color="#CCCCCC"> have the basic</font>

208
00:07:50,220 --> 00:07:53,340
command line wrapping so this tool the

209
00:07:52,110 --> 00:07:55,350
whole idea of this tool is we want to

210
00:07:53,340 --> 00:07:58,440
<font color="#E5E5E5">add functionality to an existing binary</font>

211
00:07:55,350 --> 00:08:01,590
a compiled binary there's lots<font color="#E5E5E5"> of you</font>

212
00:07:58,440 --> 00:08:03,419
<font color="#E5E5E5">know</font><font color="#CCCCCC"> somewhat malicious or behavioral</font>

213
00:08:01,590 --> 00:08:05,820
analysis type<font color="#E5E5E5"> uses for that but I also</font>

214
00:08:03,419 --> 00:08:08,609
have<font color="#E5E5E5"> some basic command line uses for</font>

215
00:08:05,820 --> 00:08:10,229
that one of them being I have a binary

216
00:08:08,610 --> 00:08:11,700
and I just wanted<font color="#CCCCCC"> to</font><font color="#E5E5E5"> have a fixed</font>

217
00:08:10,229 --> 00:08:12,930
command line so all I can just

218
00:08:11,700 --> 00:08:15,240
<font color="#E5E5E5">double-click it and it's always going to</font>

219
00:08:12,930 --> 00:08:17,850
run with this specific set of arguments

220
00:08:15,240 --> 00:08:21,750
so here's an example<font color="#CCCCCC"> of wrapping you</font>

221
00:08:17,850 --> 00:08:23,880
know netcat<font color="#CCCCCC"> dutch</font><font color="#E5E5E5"> there netcat exe to</font>

222
00:08:21,750 --> 00:08:25,020
make it a persistent a back door that

223
00:08:23,880 --> 00:08:27,150
only all you have to do is make sure

224
00:08:25,020 --> 00:08:28,770
netcat gets launched and it's<font color="#E5E5E5"> always</font>

225
00:08:27,150 --> 00:08:30,840
going<font color="#E5E5E5"> to get launched to create a</font>

226
00:08:28,770 --> 00:08:33,539
reverse shell this reverse shell will

227
00:08:30,840 --> 00:08:35,848
connect out to fake<font color="#E5E5E5"> calm on a certain</font>

228
00:08:33,539 --> 00:08:39,779
port and launch command show connected

229
00:08:35,849 --> 00:08:42,060
to it eventually<font color="#E5E5E5"> I also like to get a</font>

230
00:08:39,779 --> 00:08:43,890
function put in here to attach you know

231
00:08:42,059 --> 00:08:46,739
a fixed set of standard input to a

232
00:08:43,890 --> 00:08:48,300
binary that sort of thing and<font color="#E5E5E5"> this the</font>

233
00:08:46,740 --> 00:08:50,160
whole thing works via entry point

234
00:08:48,300 --> 00:08:52,709
redirection so<font color="#E5E5E5"> I redirect the entry</font>

235
00:08:50,160 --> 00:08:54,750
point before the process starts

236
00:08:52,710 --> 00:08:57,600
I get all this stuff set up I change

237
00:08:54,750 --> 00:08:59,790
around the the command line arguments

238
00:08:57,600 --> 00:09:04,350
and all that<font color="#CCCCCC"> stuff in memory it works</font>

239
00:08:59,790 --> 00:09:06,270
pretty pretty well so this<font color="#E5E5E5"> is it that's</font>

240
00:09:04,350 --> 00:09:07,770
the basic functionality just you have a

241
00:09:06,270 --> 00:09:09,300
piece of shell code or something like

242
00:09:07,770 --> 00:09:12,210
that<font color="#E5E5E5"> you wrote completely from scratch</font>

243
00:09:09,300 --> 00:09:14,069
it does everything you<font color="#E5E5E5"> want it</font><font color="#CCCCCC"> to do</font><font color="#E5E5E5"> so</font>

244
00:09:12,210 --> 00:09:15,540
any any more advanced functionality you

245
00:09:14,070 --> 00:09:17,700
would have to write on your<font color="#E5E5E5"> own at that</font>

246
00:09:15,540 --> 00:09:18,930
with those features I do have<font color="#E5E5E5"> the</font>

247
00:09:17,700 --> 00:09:21,000
ability<font color="#CCCCCC"> to</font><font color="#E5E5E5"> add in some pre-made</font>

248
00:09:18,930 --> 00:09:22,439
parasites so for example<font color="#E5E5E5"> we had some</font>

249
00:09:21,000 --> 00:09:24,690
shell code or something that we wanted

250
00:09:22,440 --> 00:09:26,580
<font color="#E5E5E5">to actually not just run before the</font>

251
00:09:24,690 --> 00:09:28,500
binary but we wanted to actually be you

252
00:09:26,580 --> 00:09:31,140
know process injected into something

253
00:09:28,500 --> 00:09:32,760
else so if I have piece<font color="#E5E5E5"> of shell code I</font>

254
00:09:31,140 --> 00:09:36,810
wanted to be process injected into

255
00:09:32,760 --> 00:09:41,160
services exe I can use there's a couple

256
00:09:36,810 --> 00:09:42,270
different methods<font color="#E5E5E5"> for that but first</font>

257
00:09:41,160 --> 00:09:44,310
thing you have to do in your<font color="#CCCCCC"> process</font>

258
00:09:42,270 --> 00:09:45,510
injecting is you have to allocate memory

259
00:09:44,310 --> 00:09:47,069
in<font color="#E5E5E5"> the process then you have to write</font>

260
00:09:45,510 --> 00:09:49,260
your data over there with<font color="#E5E5E5"> the these two</font>

261
00:09:47,070 --> 00:09:50,460
function calls normally getting the code

262
00:09:49,260 --> 00:09:54,600
to execute there's a couple different

263
00:09:50,460 --> 00:09:56,340
methods<font color="#CCCCCC"> for it the first most common one</font>

264
00:09:54,600 --> 00:09:58,020
is you know create remote thread this

265
00:09:56,340 --> 00:09:59,940
<font color="#E5E5E5">will basically force another process to</font>

266
00:09:58,020 --> 00:10:01,890
start executing at a location of your

267
00:09:59,940 --> 00:10:03,960
choosing once you've allocated memory

268
00:10:01,890 --> 00:10:06,240
there you've written your code there

269
00:10:03,960 --> 00:10:07,620
doesn't take<font color="#CCCCCC"> a rocket scientist to</font>

270
00:10:06,240 --> 00:10:11,460
figure out that<font color="#E5E5E5"> this could be</font>

271
00:10:07,620 --> 00:10:12,900
potentially malicious as well this

272
00:10:11,460 --> 00:10:16,590
pretty<font color="#E5E5E5"> much always works great remote</font>

273
00:10:12,900 --> 00:10:18,449
thread there's some cases now with

274
00:10:16,590 --> 00:10:20,250
windows 7<font color="#E5E5E5"> and above where they're</font>

275
00:10:18,450 --> 00:10:23,010
starting to restrict the usefulness of

276
00:10:20,250 --> 00:10:25,560
this but for the<font color="#E5E5E5"> most time it always</font>

277
00:10:23,010 --> 00:10:27,180
<font color="#E5E5E5">works other techniques like</font><font color="#CCCCCC"> Q user a</font><font color="#E5E5E5"> PC</font>

278
00:10:25,560 --> 00:10:28,229
there's not much documentation out there

279
00:10:27,180 --> 00:10:31,800
on<font color="#E5E5E5"> them they're not very popular</font>

280
00:10:28,230 --> 00:10:34,410
techniques q user<font color="#E5E5E5"> a pc will force a</font>

281
00:10:31,800 --> 00:10:36,150
process that supports a<font color="#CCCCCC"> pc which is</font>

282
00:10:34,410 --> 00:10:37,949
asynchronous procedure calls it will

283
00:10:36,150 --> 00:10:40,020
basically which<font color="#CCCCCC"> is a basically a queue</font>

284
00:10:37,950 --> 00:10:42,360
of functions that that process<font color="#CCCCCC"> is</font><font color="#E5E5E5"> going</font>

285
00:10:40,020 --> 00:10:46,710
<font color="#E5E5E5">to execute whenever it works on this a</font>

286
00:10:42,360 --> 00:10:52,260
<font color="#CCCCCC">pc mechanism not all processes do</font>

287
00:10:46,710 --> 00:10:54,330
there's some key key processes that do

288
00:10:52,260 --> 00:10:56,880
use a<font color="#CCCCCC"> PC for example services that exe</font>

289
00:10:54,330 --> 00:10:58,860
uses<font color="#E5E5E5"> a synchronous procedure calls so</font>

290
00:10:56,880 --> 00:11:01,950
you can use<font color="#CCCCCC"> Q user a PC to force</font>

291
00:10:58,860 --> 00:11:03,330
services dot exe to execute something of

292
00:11:01,950 --> 00:11:05,800
your choosing so it's<font color="#E5E5E5"> pretty effective</font>

293
00:11:03,330 --> 00:11:09,910
in that case it wouldn't be effective

294
00:11:05,800 --> 00:11:11,560
<font color="#CCCCCC">and say like you couldn't q user</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> PC</font>

295
00:11:09,910 --> 00:11:13,420
against netcat it's just it doesn't use

296
00:11:11,560 --> 00:11:14,829
a<font color="#CCCCCC"> PC it doesn't</font><font color="#E5E5E5"> make those function</font>

297
00:11:13,420 --> 00:11:17,140
calls so it's never<font color="#E5E5E5"> going to process an</font>

298
00:11:14,830 --> 00:11:23,019
APC function that's<font color="#E5E5E5"> its added to its</font><font color="#CCCCCC"> q</font>

299
00:11:17,140 --> 00:11:25,060
another technique<font color="#E5E5E5"> it's not fully</font>

300
00:11:23,019 --> 00:11:26,320
implemented in my tool yet so I went

301
00:11:25,060 --> 00:11:28,540
ahead<font color="#E5E5E5"> and posted the the</font>

302
00:11:26,320 --> 00:11:31,240
<font color="#CCCCCC">proof-of-concept</font><font color="#E5E5E5"> code on my website</font>

303
00:11:28,540 --> 00:11:33,610
along with the tool so you can at<font color="#E5E5E5"> least</font>

304
00:11:31,240 --> 00:11:34,899
see how the how I'm doing this technique

305
00:11:33,610 --> 00:11:37,360
and it<font color="#E5E5E5"> will</font><font color="#CCCCCC"> eventually be make its way</font>

306
00:11:34,899 --> 00:11:38,740
<font color="#CCCCCC">into been checked as well so there's</font>

307
00:11:37,360 --> 00:11:42,130
here's another technique instead of

308
00:11:38,740 --> 00:11:44,950
create remote thread and to user<font color="#E5E5E5"> a</font><font color="#CCCCCC"> PC in</font>

309
00:11:42,130 --> 00:11:48,130
order to get code to execute in that

310
00:11:44,950 --> 00:11:49,540
process at our specific location this

311
00:11:48,130 --> 00:11:53,350
basically<font color="#E5E5E5"> techniques called thread</font>

312
00:11:49,540 --> 00:11:54,640
hijacking what<font color="#CCCCCC"> I do is</font><font color="#E5E5E5"> that find a</font>

313
00:11:53,350 --> 00:11:56,079
thread that I want to<font color="#E5E5E5"> hijack which would</font>

314
00:11:54,640 --> 00:11:58,120
typically be like the main thread of a

315
00:11:56,079 --> 00:11:59,920
process so if I find services that exe

316
00:11:58,120 --> 00:12:02,680
oh that was gonna<font color="#E5E5E5"> be kind of dangerous</font>

317
00:11:59,920 --> 00:12:07,839
but I would find may be explored<font color="#CCCCCC"> I DXE</font>

318
00:12:02,680 --> 00:12:09,849
we suspend the main thread<font color="#E5E5E5"> I do a gift</font>

319
00:12:07,839 --> 00:12:12,790
thread context to save off all the

320
00:12:09,850 --> 00:12:14,770
register context then<font color="#CCCCCC"> I allocate space</font>

321
00:12:12,790 --> 00:12:16,839
for my new code and the key difference

322
00:12:14,770 --> 00:12:18,160
here is I<font color="#CCCCCC"> also allocate a new stack so</font>

323
00:12:16,839 --> 00:12:21,070
I'm<font color="#E5E5E5"> going to make a completely new stack</font>

324
00:12:18,160 --> 00:12:22,180
completely new area from my code what's

325
00:12:21,070 --> 00:12:24,190
not in the slides here is that<font color="#E5E5E5"> I</font>

326
00:12:22,180 --> 00:12:27,279
actually<font color="#E5E5E5"> do kind of a loop with they get</font>

327
00:12:24,190 --> 00:12:29,890
thread context I'm basically checking to

328
00:12:27,279 --> 00:12:32,050
see if I'm executing inside of NT dll if

329
00:12:29,890 --> 00:12:34,300
I'm executing inside of NT dll chances

330
00:12:32,050 --> 00:12:37,120
are i could be waiting for an operating

331
00:12:34,300 --> 00:12:38,859
system function to return it gets

332
00:12:37,120 --> 00:12:41,079
problematic when you try to resume after

333
00:12:38,860 --> 00:12:42,820
you've cleared out your malicious code

334
00:12:41,079 --> 00:12:45,219
if you're<font color="#E5E5E5"> waiting for that to resume</font>

335
00:12:42,820 --> 00:12:47,589
that can be you<font color="#E5E5E5"> can get a lot of crashes</font>

336
00:12:45,220 --> 00:12:50,140
that<font color="#E5E5E5"> way so I actually execute in a loop</font>

337
00:12:47,589 --> 00:12:53,440
with<font color="#E5E5E5"> get thread context waiting for</font><font color="#CCCCCC"> eip</font>

338
00:12:50,140 --> 00:12:55,600
to be outside of inti dll that that's a

339
00:12:53,440 --> 00:12:58,510
side note though so all you<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to do</font>

340
00:12:55,600 --> 00:13:01,149
is save off that thread context allocate

341
00:12:58,510 --> 00:13:03,819
your new code your new stack set thread

342
00:13:01,149 --> 00:13:05,709
context to set<font color="#CCCCCC"> eip to the new code and</font>

343
00:13:03,820 --> 00:13:08,079
set the stack pointer to the new stack

344
00:13:05,709 --> 00:13:11,319
then you can just resumed the thread and

345
00:13:08,079 --> 00:13:12,489
that new the new code that you allocated

346
00:13:11,320 --> 00:13:15,670
in that process<font color="#E5E5E5"> is going to start</font>

347
00:13:12,490 --> 00:13:17,110
executing which is pretty neat that in

348
00:13:15,670 --> 00:13:18,490
and of itself is somewhat useful but

349
00:13:17,110 --> 00:13:19,030
then you've just broken the entire

350
00:13:18,490 --> 00:13:21,250
original

351
00:13:19,030 --> 00:13:22,839
process that's not<font color="#E5E5E5"> cool especially if</font>

352
00:13:21,250 --> 00:13:24,100
<font color="#E5E5E5">it's explored on</font><font color="#CCCCCC"> exe you know they're</font>

353
00:13:22,840 --> 00:13:26,800
going<font color="#E5E5E5"> to kill the process pretty quickly</font>

354
00:13:24,100 --> 00:13:28,750
so<font color="#E5E5E5"> the difference</font><font color="#CCCCCC"> here is now we're</font>

355
00:13:26,800 --> 00:13:30,880
<font color="#E5E5E5">going to actually whatever shellcode you</font>

356
00:13:28,750 --> 00:13:32,890
inject it over there it has to basically

357
00:13:30,880 --> 00:13:35,320
suspend itself when it's done just call

358
00:13:32,890 --> 00:13:38,650
suspend thread and and call it a day

359
00:13:35,320 --> 00:13:42,400
once you've suspended yourself the

360
00:13:38,650 --> 00:13:45,220
<font color="#E5E5E5">actual whatever process is doing the</font>

361
00:13:42,400 --> 00:13:46,900
hijacking can then set<font color="#E5E5E5"> thread context</font>

362
00:13:45,220 --> 00:13:48,730
back to the original context<font color="#E5E5E5"> and then</font>

363
00:13:46,900 --> 00:13:50,410
call resume thread so what we've done is

364
00:13:48,730 --> 00:13:51,790
<font color="#E5E5E5">we've taken a thread which is normally</font>

365
00:13:50,410 --> 00:13:53,949
would just keep executing whatever<font color="#CCCCCC"> it</font>

366
00:13:51,790 --> 00:13:55,780
once we've stopped it we've hijacked it

367
00:13:53,950 --> 00:13:57,670
for a period of time and<font color="#CCCCCC"> then set it</font>

368
00:13:55,780 --> 00:13:59,439
back to the original so in<font color="#E5E5E5"> that period</font>

369
00:13:57,670 --> 00:14:00,939
of<font color="#E5E5E5"> time it actually continues going as</font>

370
00:13:59,440 --> 00:14:03,250
if nothing ever happened it has no

371
00:14:00,940 --> 00:14:05,350
knowledge that<font color="#E5E5E5"> it was ever taken over</font>

372
00:14:03,250 --> 00:14:14,050
and hijacked for any length of time at

373
00:14:05,350 --> 00:14:15,880
all so some notes on that why in the

374
00:14:14,050 --> 00:14:17,349
heck would anybody ever do that a little

375
00:14:15,880 --> 00:14:18,610
<font color="#E5E5E5">bit of</font><font color="#CCCCCC"> a less of a memory forensic</font>

376
00:14:17,350 --> 00:14:22,360
residue there are some traces that

377
00:14:18,610 --> 00:14:25,570
threads might have been launched via

378
00:14:22,360 --> 00:14:27,070
create remote thread and certainly a PC

379
00:14:25,570 --> 00:14:29,440
function calls would have<font color="#CCCCCC"> their residue</font>

380
00:14:27,070 --> 00:14:32,680
as well if we if we<font color="#CCCCCC"> hijacked the main</font>

381
00:14:29,440 --> 00:14:34,540
thread and launched malicious and

382
00:14:32,680 --> 00:14:35,500
launched a new thread from there the

383
00:14:34,540 --> 00:14:38,650
thread start address would be

384
00:14:35,500 --> 00:14:40,600
originating from you know<font color="#CCCCCC"> some place</font>

385
00:14:38,650 --> 00:14:43,329
that it would be or originating from

386
00:14:40,600 --> 00:14:51,010
within that process as opposed to being

387
00:14:43,330 --> 00:14:52,570
obviously a remote thread start and so

388
00:14:51,010 --> 00:14:55,900
in my<font color="#CCCCCC"> website we can get</font><font color="#E5E5E5"> this stuff is</font>

389
00:14:52,570 --> 00:15:00,220
by<font color="#CCCCCC"> our ni chris off-net it's</font><font color="#E5E5E5"> not</font>

390
00:14:55,900 --> 00:15:08,050
<font color="#CCCCCC">microsoft it's me let's take</font><font color="#E5E5E5"> a quick</font>

391
00:15:00,220 --> 00:15:09,400
peek at the binary to<font color="#E5E5E5"> mt so</font><font color="#CCCCCC"> i'm just</font>

392
00:15:08,050 --> 00:15:12,040
<font color="#E5E5E5">going to run been checked here with a</font>

393
00:15:09,400 --> 00:15:14,699
dash h should we make this a<font color="#E5E5E5"> little bit</font>

394
00:15:12,040 --> 00:15:14,699
bigger<font color="#CCCCCC"> i forgot</font>

395
00:15:16,360 --> 00:15:25,810
<font color="#E5E5E5">I said I want to ran it with the dash H</font>

396
00:15:24,670 --> 00:15:28,599
option you can see<font color="#CCCCCC"> all the</font><font color="#E5E5E5"> different</font>

397
00:15:25,810 --> 00:15:30,609
command line parameters it takes I

398
00:15:28,600 --> 00:15:33,550
didn't<font color="#E5E5E5"> talk about every single one of</font>

399
00:15:30,610 --> 00:15:35,560
these but you get the idea what I have

400
00:15:33,550 --> 00:15:37,209
in this directory is a little block of

401
00:15:35,560 --> 00:15:38,890
shell code which<font color="#CCCCCC"> is just</font><font color="#E5E5E5"> going to pop up</font>

402
00:15:37,209 --> 00:15:44,949
a message box and I<font color="#E5E5E5"> have notepad.exe</font>

403
00:15:38,890 --> 00:15:46,689
here when i run this notepad.exe you

404
00:15:44,950 --> 00:15:49,089
know it just runs it does<font color="#CCCCCC"> its normal</font>

405
00:15:46,690 --> 00:15:52,870
notepad stuff that's kind<font color="#E5E5E5"> of cool I can</font>

406
00:15:49,089 --> 00:15:59,950
use been checked I can say I notepad.exe

407
00:15:52,870 --> 00:16:02,050
desh Oh hacked notepad.exe just a dash D

408
00:15:59,950 --> 00:16:04,720
and give it<font color="#E5E5E5"> my message box shellcode</font>

409
00:16:02,050 --> 00:16:07,149
what I'm going to do now<font color="#CCCCCC"> is give it that</font>

410
00:16:04,720 --> 00:16:09,220
dash<font color="#CCCCCC"> T switch this is going to force the</font>

411
00:16:07,149 --> 00:16:12,670
message box shellcode to be a TLS call

412
00:16:09,220 --> 00:16:14,140
back and it just runs it doesn't spit

413
00:16:12,670 --> 00:16:17,140
out anything like said very simple

414
00:16:14,140 --> 00:16:19,630
easy-to-use tool now when I run hack

415
00:16:17,140 --> 00:16:21,579
notepad first thing<font color="#E5E5E5"> that pops up is this</font>

416
00:16:19,630 --> 00:16:25,420
you<font color="#E5E5E5"> know low black hat I'm in your</font>

417
00:16:21,579 --> 00:16:26,680
process and then notepad runs that's

418
00:16:25,420 --> 00:16:28,479
pretty<font color="#E5E5E5"> cool</font><font color="#CCCCCC"> but you could have achieved</font>

419
00:16:26,680 --> 00:16:30,519
the same functionality there with an

420
00:16:28,480 --> 00:16:37,390
entry point redirect let's actually take

421
00:16:30,519 --> 00:16:40,660
a look at the at the binary now pull it

422
00:16:37,390 --> 00:16:42,189
<font color="#E5E5E5">up real quickly in PE view you see what</font>

423
00:16:40,660 --> 00:16:44,079
<font color="#E5E5E5">it did was add a section called Nick</font>

424
00:16:42,190 --> 00:16:46,600
down here at the bottom and inside of

425
00:16:44,079 --> 00:16:48,579
that is our TLS directory and we have a

426
00:16:46,600 --> 00:16:50,140
TLS callback pointer sitting right here

427
00:16:48,579 --> 00:16:51,519
so it's it's done all this stuff it's

428
00:16:50,140 --> 00:16:53,380
made the section it's set<font color="#CCCCCC"> up the</font>

429
00:16:51,519 --> 00:16:54,820
callbacks and every<font color="#E5E5E5"> piece of data in</font>

430
00:16:53,380 --> 00:16:57,519
here that will actually make this thing

431
00:16:54,820 --> 00:17:04,990
work and inside of that callback is of

432
00:16:57,519 --> 00:17:07,839
course our malicious code and you pull

433
00:17:04,990 --> 00:17:09,640
<font color="#CCCCCC">this up in ida the first thing you're</font>

434
00:17:07,839 --> 00:17:11,889
looking<font color="#E5E5E5"> at the entry point itself is</font>

435
00:17:09,640 --> 00:17:16,270
completely unchanged this is the normal

436
00:17:11,890 --> 00:17:17,740
entry point of notepad.exe so it's a

437
00:17:16,270 --> 00:17:23,040
little<font color="#CCCCCC"> bit stealthier than an entry</font>

438
00:17:17,740 --> 00:17:25,109
point redirection right there so

439
00:17:23,040 --> 00:17:26,220
another kind of advantage of been jack

440
00:17:25,109 --> 00:17:28,500
and i think i mentioned something about

441
00:17:26,220 --> 00:17:30,330
it earlier<font color="#CCCCCC"> about being has a pretty good</font>

442
00:17:28,500 --> 00:17:32,580
algorithm for actually adding sections

443
00:17:30,330 --> 00:17:34,110
to a binary what a lot of people do when

444
00:17:32,580 --> 00:17:38,970
they try to add sections to a binary

445
00:17:34,110 --> 00:17:41,250
it's just they blindly they see<font color="#CCCCCC"> okay my</font>

446
00:17:38,970 --> 00:17:43,800
section headers are here it's an array

447
00:17:41,250 --> 00:17:45,540
<font color="#CCCCCC">I'm</font><font color="#E5E5E5"> just going to go</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> next offset</font>

448
00:17:43,800 --> 00:17:47,010
and add another section header and

449
00:17:45,540 --> 00:17:48,030
everything will be magic<font color="#E5E5E5"> because it's</font>

450
00:17:47,010 --> 00:17:48,900
always going to be nulls there there's

451
00:17:48,030 --> 00:17:51,149
always going to be plenty<font color="#CCCCCC"> of padding</font>

452
00:17:48,900 --> 00:17:52,290
there's no problem problem is you're not

453
00:17:51,150 --> 00:17:54,870
<font color="#E5E5E5">always going to have plenty of padding</font>

454
00:17:52,290 --> 00:17:56,580
and notepad.exe is one of<font color="#CCCCCC"> the specific</font>

455
00:17:54,870 --> 00:17:58,800
examples where you do<font color="#CCCCCC"> not have</font><font color="#E5E5E5"> enough</font>

456
00:17:56,580 --> 00:18:00,510
padding I have enough padding for one

457
00:17:58,800 --> 00:18:02,370
section maybe<font color="#E5E5E5"> but I think in this</font>

458
00:18:00,510 --> 00:18:04,410
particular example if<font color="#E5E5E5"> I had two sections</font>

459
00:18:02,370 --> 00:18:07,139
I'm actually going to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> over writing</font>

460
00:18:04,410 --> 00:18:20,340
part of my import table that's going<font color="#E5E5E5"> to</font>

461
00:18:07,140 --> 00:18:21,660
<font color="#E5E5E5">be bad news so inject oh so here I</font><font color="#CCCCCC"> just</font>

462
00:18:20,340 --> 00:18:24,780
ran been<font color="#CCCCCC"> jacked to create another new</font>

463
00:18:21,660 --> 00:18:27,330
notepad.exe i'm just going to rerun this

464
00:18:24,780 --> 00:18:30,450
command again with the<font color="#CCCCCC"> input being</font>

465
00:18:27,330 --> 00:18:33,149
itself and<font color="#E5E5E5"> i'm going</font><font color="#CCCCCC"> to just keep doing</font>

466
00:18:30,450 --> 00:18:35,730
this<font color="#E5E5E5"> over and over and over when I make</font>

467
00:18:33,150 --> 00:18:41,190
a bunch of sections now going to PE view

468
00:18:35,730 --> 00:18:43,320
that<font color="#CCCCCC"> you can see of</font><font color="#E5E5E5"> course it made a</font>

469
00:18:41,190 --> 00:18:45,870
whole bunch<font color="#E5E5E5"> of sections here so clearly</font>

470
00:18:43,320 --> 00:18:48,360
I've exhausted what I could have

471
00:18:45,870 --> 00:18:50,850
achieved using the slack space in a in

472
00:18:48,360 --> 00:18:54,750
the header section of this PE binary so

473
00:18:50,850 --> 00:18:55,980
what it's<font color="#CCCCCC"> actually done if</font><font color="#E5E5E5"> I notice the</font>

474
00:18:54,750 --> 00:18:57,780
the first<font color="#E5E5E5"> section of this binary</font>

475
00:18:55,980 --> 00:19:01,230
actually begins at the offset 600

476
00:18:57,780 --> 00:19:02,520
instead of<font color="#E5E5E5"> the original 400 so wut bin</font>

477
00:19:01,230 --> 00:19:04,530
Jack does is actually<font color="#E5E5E5"> completely</font>

478
00:19:02,520 --> 00:19:06,540
restructures the binary if it needs to

479
00:19:04,530 --> 00:19:08,879
if it is able<font color="#CCCCCC"> to detect</font><font color="#E5E5E5"> that it doesn't</font>

480
00:19:06,540 --> 00:19:10,440
have enough slack space left in the end

481
00:19:08,880 --> 00:19:12,270
of that headers it detects that there's

482
00:19:10,440 --> 00:19:14,490
<font color="#E5E5E5">something there like the import table</font>

483
00:19:12,270 --> 00:19:16,080
it's<font color="#E5E5E5"> actually going to restructure the</font>

484
00:19:14,490 --> 00:19:19,260
binary such that it can actually<font color="#E5E5E5"> make</font>

485
00:19:16,080 --> 00:19:22,110
space if it needs to so it's pretty well

486
00:19:19,260 --> 00:19:23,580
done in that perspective and a lot of

487
00:19:22,110 --> 00:19:25,770
<font color="#E5E5E5">these basic features like the adding the</font>

488
00:19:23,580 --> 00:19:27,389
import<font color="#CCCCCC"> DLLs and stuff like that are</font>

489
00:19:25,770 --> 00:19:29,310
pretty hardened because we were using

490
00:19:27,390 --> 00:19:30,840
them been<font color="#CCCCCC"> using them for a while and</font>

491
00:19:29,310 --> 00:19:33,360
internal projects so that they work very

492
00:19:30,840 --> 00:19:35,070
well anything that's edgy might not be

493
00:19:33,360 --> 00:19:36,039
as as flushed out and you might get bugs

494
00:19:35,070 --> 00:19:38,168
and crashes but

495
00:19:36,039 --> 00:19:43,960
some of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> stuff is pretty pretty good</font>

496
00:19:38,169 --> 00:19:48,850
so any questions it's deer in headlights

497
00:19:43,960 --> 00:19:53,739
<font color="#E5E5E5">okay all right well thanks once again</font>

498
00:19:48,850 --> 00:19:55,629
here's<font color="#E5E5E5"> my information Nick Harvard and</font>

499
00:19:53,739 --> 00:19:57,580
and the tool they've been checked and

500
00:19:55,629 --> 00:19:59,619
the<font color="#E5E5E5"> proof of concept for the new process</font>

501
00:19:57,580 --> 00:20:02,408
injection technique is on my website you

502
00:19:59,619 --> 00:20:06,449
can download it whatever give me your

503
00:20:02,409 --> 00:20:06,450
<font color="#CCCCCC">thoughts and thank you</font>

