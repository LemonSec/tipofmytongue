1
00:00:00,000 --> 00:00:05,069
ok welcome this is the web app track

2
00:00:02,040 --> 00:00:07,410
this<font color="#E5E5E5"> is a Stefan</font><font color="#CCCCCC"> s ur talking about</font>

3
00:00:05,069 --> 00:00:09,570
utilizing code reuse a return oriented

4
00:00:07,410 --> 00:00:22,529
programming in PHP application exploits

5
00:00:09,570 --> 00:00:25,050
<font color="#CCCCCC">ok hello welcome to utilizing code reuse</font>

6
00:00:22,529 --> 00:00:30,269
and return<font color="#E5E5E5"> Orion programming in PHP</font>

7
00:00:25,050 --> 00:00:33,420
application x boys<font color="#CCCCCC"> i will skip my</font>

8
00:00:30,269 --> 00:00:36,269
introduction so<font color="#E5E5E5"> i just want to tell</font><font color="#CCCCCC"> you</font>

9
00:00:33,420 --> 00:00:39,450
<font color="#E5E5E5">what the talks about today i want to</font>

10
00:00:36,270 --> 00:00:42,210
speak<font color="#E5E5E5"> about something like return</font>

11
00:00:39,450 --> 00:00:48,059
oriented programming for PHP

12
00:00:42,210 --> 00:00:50,160
applications so i want<font color="#E5E5E5"> to take return</font>

13
00:00:48,059 --> 00:00:52,410
return oriented programming to the PHP

14
00:00:50,160 --> 00:00:54,360
level this will be the<font color="#E5E5E5"> first part of the</font>

15
00:00:52,410 --> 00:00:56,519
presentation and the second<font color="#E5E5E5"> part of the</font>

16
00:00:54,360 --> 00:00:59,340
presentation will be<font color="#E5E5E5"> i will demonstrate</font>

17
00:00:56,520 --> 00:01:02,190
a vulnerability and then PHP that can be

18
00:00:59,340 --> 00:01:06,869
exploited with traditional return

19
00:01:02,190 --> 00:01:09,689
oriented programming methods so during

20
00:01:06,869 --> 00:01:11,610
<font color="#E5E5E5">the last day they were already several</font>

21
00:01:09,689 --> 00:01:14,070
presentations about return oriented

22
00:01:11,610 --> 00:01:19,080
programming or return around programming

23
00:01:14,070 --> 00:01:20,490
style topics so<font color="#CCCCCC"> i just will give a short</font>

24
00:01:19,080 --> 00:01:22,920
introduction was returning the

25
00:01:20,490 --> 00:01:24,509
programming is all about so the basic

26
00:01:22,920 --> 00:01:26,970
idea of return oriented programming is

27
00:01:24,509 --> 00:01:31,320
that you instead<font color="#E5E5E5"> of injecting your</font>

28
00:01:26,970 --> 00:01:35,520
shellcode into an application you will

29
00:01:31,320 --> 00:01:38,309
inject some kind of data that redirects

30
00:01:35,520 --> 00:01:41,369
the applications code flow and<font color="#E5E5E5"> your the</font>

31
00:01:38,310 --> 00:01:43,979
idea is<font color="#CCCCCC"> to</font><font color="#E5E5E5"> not inject code but to use</font>

32
00:01:41,369 --> 00:01:45,720
the already existing code and the

33
00:01:43,979 --> 00:01:47,880
general idea is that when you have

34
00:01:45,720 --> 00:01:50,850
pieces of already existing code in an

35
00:01:47,880 --> 00:01:53,579
application you can rearrange them in a

36
00:01:50,850 --> 00:01:57,539
way that there will be useful for your

37
00:01:53,579 --> 00:01:58,919
attacker at least you hope so<font color="#E5E5E5"> but when</font>

38
00:01:57,540 --> 00:02:03,149
the application is big enough you

39
00:01:58,920 --> 00:02:06,299
usually will find something so in the

40
00:02:03,149 --> 00:02:07,740
past people always analyze to return

41
00:02:06,299 --> 00:02:13,050
oriented programming and culture your

42
00:02:07,740 --> 00:02:17,700
topic on consumer architectures like x86

43
00:02:13,050 --> 00:02:20,010
amd64 spark<font color="#E5E5E5"> powerpc the</font><font color="#CCCCCC"> ARM architecture</font>

44
00:02:17,700 --> 00:02:24,209
<font color="#E5E5E5">because of all the mobile devices and</font>

45
00:02:20,010 --> 00:02:26,250
when you saw the talk yesterday since<font color="#CCCCCC"> an</font>

46
00:02:24,210 --> 00:02:28,770
<font color="#E5E5E5">amex guys are applying return oriented</font>

47
00:02:26,250 --> 00:02:30,480
programming today<font color="#E5E5E5"> I reverse engineering</font>

48
00:02:28,770 --> 00:02:33,360
intermediate language which is called

49
00:02:30,480 --> 00:02:34,980
rail and last year there was also paper

50
00:02:33,360 --> 00:02:37,620
about people using return oriented

51
00:02:34,980 --> 00:02:40,649
programming again selection of voting

52
00:02:37,620 --> 00:02:42,420
system but so far there is no real

53
00:02:40,650 --> 00:02:45,690
research on the turn oriented

54
00:02:42,420 --> 00:02:50,010
programming or code reuse for<font color="#CCCCCC"> PHP or</font><font color="#E5E5E5"> web</font>

55
00:02:45,690 --> 00:02:53,130
applications so when you look at

56
00:02:50,010 --> 00:02:55,620
co-produced techniques you can classify

57
00:02:53,130 --> 00:03:00,120
them and usually cover uses like the

58
00:02:55,620 --> 00:03:02,100
topic the the major team and when you

59
00:03:00,120 --> 00:03:04,950
<font color="#CCCCCC">look at it</font><font color="#E5E5E5"> return oriented programming</font>

60
00:03:02,100 --> 00:03:08,130
is just subset of code reuse techniques

61
00:03:04,950 --> 00:03:10,859
techniques and when you<font color="#CCCCCC"> look at this a</font>

62
00:03:08,130 --> 00:03:15,000
subset of return oriented programming is

63
00:03:10,860 --> 00:03:17,100
returned to lipsy and on the<font color="#CCCCCC"> other side</font>

64
00:03:15,000 --> 00:03:19,140
there's something most people don't

65
00:03:17,100 --> 00:03:21,329
speak about but code reuse is usually

66
00:03:19,140 --> 00:03:25,260
bigger so<font color="#E5E5E5"> I put in the big question mark</font>

67
00:03:21,330 --> 00:03:27,090
<font color="#CCCCCC">for now so when</font><font color="#E5E5E5"> you look at</font><font color="#CCCCCC"> a return</font>

68
00:03:25,260 --> 00:03:31,230
oriented programming on the low-level

69
00:03:27,090 --> 00:03:33,360
side of maybe x86 you see that all these

70
00:03:31,230 --> 00:03:35,790
techniques returner<font color="#E5E5E5"> and brimming and</font>

71
00:03:33,360 --> 00:03:37,920
<font color="#E5E5E5">return</font><font color="#CCCCCC"> to lipsy based on the fact that</font>

72
00:03:35,790 --> 00:03:40,560
you somehow<font color="#E5E5E5"> hijack the call stack of the</font>

73
00:03:37,920 --> 00:03:42,660
application and<font color="#CCCCCC"> you usually try to</font>

74
00:03:40,560 --> 00:03:45,810
manipulate the call stack in a way that

75
00:03:42,660 --> 00:03:47,880
<font color="#E5E5E5">the return instructions that are present</font>

76
00:03:45,810 --> 00:03:52,650
in the application will return to code

77
00:03:47,880 --> 00:03:55,470
you wanted<font color="#E5E5E5"> to execute and</font><font color="#CCCCCC"> the code you</font>

78
00:03:52,650 --> 00:03:57,360
would usually execute is most of<font color="#E5E5E5"> the</font>

79
00:03:55,470 --> 00:04:00,120
<font color="#E5E5E5">times some useful instructions for you</font>

80
00:03:57,360 --> 00:04:01,440
and then followed by<font color="#E5E5E5"> the return and in</font>

81
00:04:00,120 --> 00:04:05,220
order<font color="#E5E5E5"> to do this you need to full</font>

82
00:04:01,440 --> 00:04:07,079
control over the stack the example<font color="#CCCCCC"> just</font>

83
00:04:05,220 --> 00:04:08,580
shows one<font color="#CCCCCC"> of the possible stack frames</font>

84
00:04:07,080 --> 00:04:10,890
that it could be<font color="#E5E5E5"> used to return around</font>

85
00:04:08,580 --> 00:04:16,080
programming in this<font color="#E5E5E5"> case is some kind of</font>

86
00:04:10,890 --> 00:04:17,969
system call that is executed and yeah so

87
00:04:16,079 --> 00:04:20,789
when you apply this technique directly

88
00:04:17,970 --> 00:04:22,910
<font color="#E5E5E5">to PHP you will realize that that's not</font>

89
00:04:20,790 --> 00:04:27,470
possible in PHP

90
00:04:22,910 --> 00:04:28,820
the reason<font color="#CCCCCC"> for that is there's not</font><font color="#E5E5E5"> a</font>

91
00:04:27,470 --> 00:04:31,820
single<font color="#E5E5E5"> call stack that you could</font>

92
00:04:28,820 --> 00:04:33,980
overwrite the the PHP application<font color="#CCCCCC"> called</font>

93
00:04:31,820 --> 00:04:35,570
stack is actually on three levels a part

94
00:04:33,980 --> 00:04:38,720
of it is stored in<font color="#E5E5E5"> the real stack and</font>

95
00:04:35,570 --> 00:04:40,580
the program<font color="#E5E5E5"> stack a part of it is in in</font>

96
00:04:38,720 --> 00:04:42,620
allocated heap structures that is most

97
00:04:40,580 --> 00:04:45,590
probably randomized on modern systems

98
00:04:42,620 --> 00:04:47,240
and also<font color="#CCCCCC"> the data segment contains</font>

99
00:04:45,590 --> 00:04:51,859
pointers that are used by the executed

100
00:04:47,240 --> 00:04:53,870
x2 to change the execution so um a

101
00:04:51,860 --> 00:04:55,460
traditional<font color="#E5E5E5"> returner and programming</font>

102
00:04:53,870 --> 00:04:58,280
attack is not possible because<font color="#E5E5E5"> you</font>

103
00:04:55,460 --> 00:05:00,710
usually can only override one piece of

104
00:04:58,280 --> 00:05:02,630
memory but you cannot override three or

105
00:05:00,710 --> 00:05:06,620
four<font color="#CCCCCC"> at</font><font color="#E5E5E5"> the same time especially if you</font>

106
00:05:02,630 --> 00:05:08,330
don't know the addresses so the other

107
00:05:06,620 --> 00:05:10,520
thing is<font color="#E5E5E5"> when you want to return to</font><font color="#CCCCCC"> pge</font>

108
00:05:08,330 --> 00:05:12,109
by code for example PHP by code is

109
00:05:10,520 --> 00:05:14,359
always allocated on the heap so it will

110
00:05:12,110 --> 00:05:18,470
be<font color="#E5E5E5"> in completely random positions on</font>

111
00:05:14,360 --> 00:05:22,730
modern linear systems so return<font color="#CCCCCC"> aerial</font>

112
00:05:18,470 --> 00:05:25,430
priming seems impossible for PHP but if

113
00:05:22,730 --> 00:05:28,340
you remember this<font color="#E5E5E5"> picture there's a big</font>

114
00:05:25,430 --> 00:05:30,080
question mark on the side and we want to

115
00:05:28,340 --> 00:05:33,619
fill those big question mark with a new

116
00:05:30,080 --> 00:05:38,690
technique which<font color="#E5E5E5"> I call property oriented</font>

117
00:05:33,620 --> 00:05:42,080
programming Charlie's pop so<font color="#E5E5E5"> what is</font>

118
00:05:38,690 --> 00:05:45,650
property oriented programming the idea

119
00:05:42,080 --> 00:05:48,080
<font color="#E5E5E5">is that instead of</font><font color="#CCCCCC"> overwriting</font><font color="#E5E5E5"> some call</font>

120
00:05:45,650 --> 00:05:51,950
stack or manipulating a call stack you

121
00:05:48,080 --> 00:05:54,560
try to exchange the the objects used in

122
00:05:51,950 --> 00:05:57,080
an application<font color="#E5E5E5"> so normally when you have</font>

123
00:05:54,560 --> 00:06:00,350
objects they have properties and these

124
00:05:57,080 --> 00:06:02,270
objects call other methods<font color="#CCCCCC"> of other</font>

125
00:06:00,350 --> 00:06:04,490
objects stored in their properties and

126
00:06:02,270 --> 00:06:06,799
now the idea is that I replace the

127
00:06:04,490 --> 00:06:11,330
objects stored in the new properties and

128
00:06:06,800 --> 00:06:15,770
so I can redirect the coleslaw this

129
00:06:11,330 --> 00:06:18,440
graphic shows like the circles are just

130
00:06:15,770 --> 00:06:19,849
random objects and you see one object is

131
00:06:18,440 --> 00:06:23,390
calling the other in the<font color="#CCCCCC"> method of</font>

132
00:06:19,850 --> 00:06:25,520
another object<font color="#CCCCCC"> and so on and basically</font>

133
00:06:23,390 --> 00:06:27,229
if I can override the<font color="#E5E5E5"> objects or the</font>

134
00:06:25,520 --> 00:06:30,919
properties of the objects<font color="#E5E5E5"> and I can</font>

135
00:06:27,230 --> 00:06:33,330
choose which object is executed next the

136
00:06:30,919 --> 00:06:37,620
only thing that's<font color="#CCCCCC"> maybe static is which</font>

137
00:06:33,330 --> 00:06:40,229
method is called<font color="#E5E5E5"> okay when you go down</font>

138
00:06:37,620 --> 00:06:43,050
to<font color="#CCCCCC"> the x86 level this</font><font color="#E5E5E5"> is not that</font><font color="#CCCCCC"> easy</font>

139
00:06:40,229 --> 00:06:46,378
but<font color="#E5E5E5"> this is just a general concept and</font>

140
00:06:43,050 --> 00:06:49,740
in<font color="#E5E5E5"> Peach Pit words like this so just</font>

141
00:06:46,379 --> 00:06:52,889
believe me like<font color="#E5E5E5"> I know so when you look</font>

142
00:06:49,740 --> 00:06:54,990
at peach speed the problem is this

143
00:06:52,889 --> 00:06:57,689
technique has some limitations because

144
00:06:54,990 --> 00:06:59,819
an x86 and returning<font color="#E5E5E5"> to program</font>

145
00:06:57,689 --> 00:07:02,219
programming usually can jump anywhere in

146
00:06:59,819 --> 00:07:04,020
the binary but in PHP you cannot jump

147
00:07:02,219 --> 00:07:06,840
anywhere in the binary<font color="#E5E5E5"> you can only jump</font>

148
00:07:04,020 --> 00:07:09,539
two starts of methods so this will

149
00:07:06,840 --> 00:07:14,219
limitation and compare them to other

150
00:07:09,539 --> 00:07:16,199
experts um the other thing<font color="#CCCCCC"> is you</font>

151
00:07:14,219 --> 00:07:19,020
usually cannot just overwrite some

152
00:07:16,199 --> 00:07:22,169
objects in memory because the objects<font color="#E5E5E5"> in</font>

153
00:07:19,020 --> 00:07:25,409
memory are in random positions and yeah

154
00:07:22,169 --> 00:07:28,289
so that's<font color="#E5E5E5"> not another way to go normally</font>

155
00:07:25,409 --> 00:07:31,770
so what you need usually is a way<font color="#E5E5E5"> to</font>

156
00:07:28,289 --> 00:07:34,650
create objects from remote and to fill

157
00:07:31,770 --> 00:07:37,500
their properties and in PHP that's

158
00:07:34,650 --> 00:07:42,750
usually done by the uncivilized function

159
00:07:37,500 --> 00:07:46,259
I will go<font color="#E5E5E5"> on that now so answer</font><font color="#CCCCCC"> your</font>

160
00:07:42,750 --> 00:07:49,500
lies is a function<font color="#CCCCCC"> of PHP that is used</font>

161
00:07:46,259 --> 00:07:53,759
to yeah deserialize previously

162
00:07:49,500 --> 00:07:56,310
serialized data it supports nearly all

163
00:07:53,759 --> 00:07:58,110
of peach pits data types the only data

164
00:07:56,310 --> 00:08:00,569
type that's<font color="#E5E5E5"> not support its resources</font>

165
00:07:58,110 --> 00:08:03,990
but all the normal things like integers

166
00:08:00,569 --> 00:08:07,349
floating points bullion's arrays strings

167
00:08:03,990 --> 00:08:11,039
objects and even references are can<font color="#CCCCCC"> be</font>

168
00:08:07,349 --> 00:08:12,750
civilized and uncivilized and when you

169
00:08:11,039 --> 00:08:14,909
<font color="#CCCCCC">look at PHP applications you will see</font>

170
00:08:12,750 --> 00:08:17,580
that they are often this expose this

171
00:08:14,909 --> 00:08:19,229
function to user input and when you<font color="#CCCCCC"> look</font>

172
00:08:17,580 --> 00:08:21,779
at the history of the function you see

173
00:08:19,229 --> 00:08:23,729
that there<font color="#CCCCCC"> are a lot of vulnerabilities</font>

174
00:08:21,779 --> 00:08:28,979
in the parlor in the answer lies padded

175
00:08:23,729 --> 00:08:30,839
cell phonee in the history so what we

176
00:08:28,979 --> 00:08:33,958
want to<font color="#E5E5E5"> do is like create arbitrary</font>

177
00:08:30,839 --> 00:08:36,659
objects so the<font color="#E5E5E5"> good singer of unser</font>

178
00:08:33,958 --> 00:08:39,359
Eliza's it allows<font color="#CCCCCC"> us to create objects</font>

179
00:08:36,659 --> 00:08:40,419
and to fill all their properties the

180
00:08:39,360 --> 00:08:41,769
problem you usually

181
00:08:40,419 --> 00:08:43,088
when you have lots of<font color="#E5E5E5"> vulnerabilities</font>

182
00:08:41,769 --> 00:08:45,790
that allows you<font color="#E5E5E5"> to create an object this</font>

183
00:08:43,089 --> 00:08:47,980
that you can only overwrite the public

184
00:08:45,790 --> 00:08:50,230
properties but<font color="#E5E5E5"> was uncivilized you can</font>

185
00:08:47,980 --> 00:08:53,829
override each property the public the

186
00:08:50,230 --> 00:08:56,110
private all protected ones but don't

187
00:08:53,829 --> 00:08:58,359
mistake that for like a full uncivilized

188
00:08:56,110 --> 00:09:01,660
of objects you can only answer lies in

189
00:08:58,360 --> 00:09:03,610
instance of a class that already exists

190
00:09:01,660 --> 00:09:05,860
so you cannot just inject a<font color="#CCCCCC"> new or</font>

191
00:09:03,610 --> 00:09:07,360
method that here with with bytecode so

192
00:09:05,860 --> 00:09:10,000
you<font color="#E5E5E5"> cannot just inject code that gets</font>

193
00:09:07,360 --> 00:09:12,699
executed that's not possible however

194
00:09:10,000 --> 00:09:14,949
whenever you answer eyes not check

195
00:09:12,699 --> 00:09:16,990
<font color="#CCCCCC">Petrie will check if this object has a</font>

196
00:09:14,949 --> 00:09:19,269
wake up method in its class definition

197
00:09:16,990 --> 00:09:22,240
if it has a wake up method it will

198
00:09:19,269 --> 00:09:25,779
execute it and the other<font color="#CCCCCC"> thing that's</font>

199
00:09:22,240 --> 00:09:30,160
<font color="#E5E5E5">new and php5 although php5 is already</font>

200
00:09:25,779 --> 00:09:32,620
old but<font color="#CCCCCC"> um in PHP 5 the whole object</font>

201
00:09:30,160 --> 00:09:36,310
model was restructured and so now

202
00:09:32,620 --> 00:09:38,290
objects have real destructors so the

203
00:09:36,310 --> 00:09:40,750
thing<font color="#CCCCCC"> is when you uncivilized an object</font>

204
00:09:38,290 --> 00:09:42,399
and you could literally destroy it the

205
00:09:40,750 --> 00:09:46,240
destructor will be called in pitch

206
00:09:42,399 --> 00:09:48,040
before nothing like this happened so

207
00:09:46,240 --> 00:09:50,649
this means when you answer lies not

208
00:09:48,040 --> 00:09:52,420
checked at existing an application there

209
00:09:50,649 --> 00:09:54,190
are two possibilities where directly

210
00:09:52,420 --> 00:09:55,990
code will be executed either it's a wake

211
00:09:54,190 --> 00:10:01,329
up method all the destructor will be

212
00:09:55,990 --> 00:10:03,730
executed<font color="#CCCCCC"> as very strong so to show you</font>

213
00:10:01,329 --> 00:10:06,310
the internal working of ants your life I

214
00:10:03,730 --> 00:10:07,870
have for a<font color="#E5E5E5"> little example one thing</font>

215
00:10:06,310 --> 00:10:11,500
that's very important<font color="#CCCCCC"> for the second</font>

216
00:10:07,870 --> 00:10:13,630
<font color="#CCCCCC">part of the presentation is on the right</font>

217
00:10:11,500 --> 00:10:16,329
side<font color="#E5E5E5"> you see a variable table this is an</font>

218
00:10:13,630 --> 00:10:19,329
internal table of answer your lies that

219
00:10:16,329 --> 00:10:21,069
keeps track<font color="#CCCCCC"> of all the variables created</font>

220
00:10:19,329 --> 00:10:22,750
by the uncivilized powder during the

221
00:10:21,070 --> 00:10:25,660
answer lies during the single call of

222
00:10:22,750 --> 00:10:29,860
uncivilized and the idea of<font color="#E5E5E5"> that is our</font>

223
00:10:25,660 --> 00:10:32,319
when you want to answer lies a reference

224
00:10:29,860 --> 00:10:34,839
you need to know which variable you want

225
00:10:32,319 --> 00:10:36,880
to reference to so what happens is that

226
00:10:34,839 --> 00:10:38,589
answer lies creates a variable table

227
00:10:36,880 --> 00:10:41,199
where every variable it creates is

228
00:10:38,589 --> 00:10:43,180
inserted<font color="#CCCCCC"> all right pointer to the</font>

229
00:10:41,199 --> 00:10:45,819
variables inserted and later when you

230
00:10:43,180 --> 00:10:49,000
like creating reference to the third

231
00:10:45,819 --> 00:10:50,300
slot then<font color="#E5E5E5"> answer lies will look into the</font>

232
00:10:49,000 --> 00:10:55,070
variable table and

233
00:10:50,300 --> 00:10:57,319
get the variable from there so this

234
00:10:55,070 --> 00:10:59,750
example starts with an serializing in an

235
00:10:57,320 --> 00:11:02,660
array this array is supposed to have six

236
00:10:59,750 --> 00:11:06,410
elements and so you see PHP creates an

237
00:11:02,660 --> 00:11:09,709
array with six elements learning

238
00:11:06,410 --> 00:11:12,020
continues and creates all the content of

239
00:11:09,710 --> 00:11:14,450
the array the first thing<font color="#CCCCCC"> is the</font><font color="#E5E5E5"> key is</font>

240
00:11:12,020 --> 00:11:16,640
a 0 and integer 0 and the value is an

241
00:11:14,450 --> 00:11:18,980
integer 0 so<font color="#E5E5E5"> it will insert it in the</font>

242
00:11:16,640 --> 00:11:20,569
first slot of<font color="#CCCCCC"> the array and you see that</font>

243
00:11:18,980 --> 00:11:23,990
the variable table is already filling

244
00:11:20,570 --> 00:11:27,680
with the array and appointed to the the

245
00:11:23,990 --> 00:11:30,500
first entry and this continues<font color="#CCCCCC"> to like a</font>

246
00:11:27,680 --> 00:11:34,910
floating point to burn through a string

247
00:11:30,500 --> 00:11:37,400
ABCD and now we<font color="#E5E5E5"> get a</font><font color="#CCCCCC"> reference and now</font>

248
00:11:34,910 --> 00:11:39,890
it's a reference<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the third slot so</font>

249
00:11:37,400 --> 00:11:43,340
PHP<font color="#E5E5E5"> will go to the third slot and see oh</font>

250
00:11:39,890 --> 00:11:45,439
it's a pointer to the the<font color="#CCCCCC"> floating point</font>

251
00:11:43,340 --> 00:11:50,750
<font color="#CCCCCC">to point zero so this will be reference</font>

252
00:11:45,440 --> 00:11:53,420
to the cook to 10 and the next<font color="#E5E5E5"> element</font>

253
00:11:50,750 --> 00:11:55,850
<font color="#E5E5E5">should be like in any class i call it my</font>

254
00:11:53,420 --> 00:12:00,410
class in<font color="#E5E5E5"> this time it could</font><font color="#CCCCCC"> be any class</font>

255
00:11:55,850 --> 00:12:04,130
and you can see that<font color="#E5E5E5"> this has two</font>

256
00:12:00,410 --> 00:12:05,839
properties a and<font color="#CCCCCC"> B and PHP will now</font>

257
00:12:04,130 --> 00:12:08,870
continue to answer lies each property

258
00:12:05,840 --> 00:12:14,900
which again will be a reference to<font color="#E5E5E5"> the</font>

259
00:12:08,870 --> 00:12:17,450
class itself and a null value again you

260
00:12:14,900 --> 00:12:20,449
see everytime variables created<font color="#E5E5E5"> it's in</font>

261
00:12:17,450 --> 00:12:22,250
certain very good table and now we have

262
00:12:20,450 --> 00:12:24,260
answer<font color="#E5E5E5"> eyes the whole object and what</font>

263
00:12:22,250 --> 00:12:27,830
happens now is PHP will attempt to

264
00:12:24,260 --> 00:12:29,540
execute the wake up if there's a wake up

265
00:12:27,830 --> 00:12:31,310
it will be executed otherwise it will

266
00:12:29,540 --> 00:12:34,969
just continue until lighting rest in

267
00:12:31,310 --> 00:12:38,810
this case it will create an internal PHP

268
00:12:34,970 --> 00:12:41,510
object of type SPL object storage we go

269
00:12:38,810 --> 00:12:45,079
to this later and yeah after that it

270
00:12:41,510 --> 00:12:47,270
will be<font color="#E5E5E5"> finished</font><font color="#CCCCCC"> okay that's how an</font>

271
00:12:45,080 --> 00:12:50,300
serialize works and already told you

272
00:12:47,270 --> 00:12:53,840
that<font color="#CCCCCC"> putting user input anuncios it's</font>

273
00:12:50,300 --> 00:12:56,030
maybe not a good<font color="#CCCCCC"> idea so what actually</font>

274
00:12:53,840 --> 00:12:58,610
is required for an application<font color="#E5E5E5"> to be</font>

275
00:12:56,030 --> 00:12:59,439
<font color="#E5E5E5">vulnerable so that we can do a property</font>

276
00:12:58,610 --> 00:13:05,740
or rental program

277
00:12:59,440 --> 00:13:07,150
attacking and of<font color="#E5E5E5"> course the most</font><font color="#CCCCCC"> obvious</font>

278
00:13:05,740 --> 00:13:09,370
way that application can be vulnerable

279
00:13:07,150 --> 00:13:15,490
<font color="#E5E5E5">to this is if it puts user input</font>

280
00:13:09,370 --> 00:13:17,020
directly<font color="#E5E5E5"> into answer your lies but when</font>

281
00:13:15,490 --> 00:13:19,480
<font color="#E5E5E5">you look at PHP applications you will</font>

282
00:13:17,020 --> 00:13:21,819
see that uncivilized is used in very

283
00:13:19,480 --> 00:13:23,770
many different places and<font color="#E5E5E5"> not always its</font>

284
00:13:21,820 --> 00:13:25,990
user inputted put into interior lines

285
00:13:23,770 --> 00:13:28,360
and when you look<font color="#CCCCCC"> at all the different</font>

286
00:13:25,990 --> 00:13:30,130
types of verification vulnerabilities

287
00:13:28,360 --> 00:13:32,920
you will see that there are<font color="#E5E5E5"> other kind</font>

288
00:13:30,130 --> 00:13:38,650
<font color="#E5E5E5">of vulnerability classes that can be</font>

289
00:13:32,920 --> 00:13:40,300
leveraged to attack answer<font color="#E5E5E5"> your lies so</font>

290
00:13:38,650 --> 00:13:43,209
<font color="#E5E5E5">I will</font><font color="#CCCCCC"> go through each of the classes</font>

291
00:13:40,300 --> 00:13:45,729
now so the<font color="#E5E5E5"> first ones what I repeated</font>

292
00:13:43,210 --> 00:13:48,820
several times now you just answer lies

293
00:13:45,730 --> 00:13:51,520
user input directly why would<font color="#E5E5E5"> you do</font>

294
00:13:48,820 --> 00:13:53,980
that PHP application developers are

295
00:13:51,520 --> 00:13:57,730
usually lazy and it's the easiest way to

296
00:13:53,980 --> 00:14:01,690
transfer bigger amounts of data between

297
00:13:57,730 --> 00:14:04,930
for example<font color="#E5E5E5"> the client in the server so</font>

298
00:14:01,690 --> 00:14:07,300
every time<font color="#CCCCCC"> a PHP application and has to</font>

299
00:14:04,930 --> 00:14:11,439
transfer a whole array to decline and

300
00:14:07,300 --> 00:14:12,760
back the PHP application developers to

301
00:14:11,440 --> 00:14:15,460
choose a way to do that and

302
00:14:12,760 --> 00:14:17,170
<font color="#E5E5E5">traditionally they were all lazy and</font>

303
00:14:15,460 --> 00:14:19,690
just used serialize and uncivilized so

304
00:14:17,170 --> 00:14:22,329
they put the array to area to serialize

305
00:14:19,690 --> 00:14:24,460
and just use<font color="#E5E5E5"> a string for example for</font><font color="#CCCCCC"> a</font>

306
00:14:22,330 --> 00:14:27,190
hidden form field and this is the most

307
00:14:24,460 --> 00:14:30,670
most of the time<font color="#E5E5E5"> you see uncivilized and</font>

308
00:14:27,190 --> 00:14:36,160
civilized content in hidden HTML form

309
00:14:30,670 --> 00:14:38,920
fields or in the cookie actually this is

310
00:14:36,160 --> 00:14:41,530
an example<font color="#CCCCCC"> from tikiwiki and take a wiki</font>

311
00:14:38,920 --> 00:14:47,349
is even more nice it<font color="#CCCCCC"> just not it just</font>

312
00:14:41,530 --> 00:14:50,079
uncivilized to request variables which

313
00:14:47,350 --> 00:14:53,920
is a<font color="#E5E5E5"> collection of pages that are</font>

314
00:14:50,080 --> 00:14:56,500
supposed to be printed<font color="#CCCCCC"> and it will do</font>

315
00:14:53,920 --> 00:14:58,750
some modification of this data and later

316
00:14:56,500 --> 00:15:01,089
the modified data is serialized again

317
00:14:58,750 --> 00:15:03,700
and given<font color="#E5E5E5"> back to you though this is a</font>

318
00:15:01,089 --> 00:15:07,510
very good for phone attack and then

319
00:15:03,700 --> 00:15:09,730
you'll see later why so why do people do

320
00:15:07,510 --> 00:15:11,630
that the reason<font color="#E5E5E5"> for that is PHP code is</font>

321
00:15:09,730 --> 00:15:13,730
usually very old and<font color="#E5E5E5"> they all learn</font>

322
00:15:11,630 --> 00:15:16,820
<font color="#CCCCCC">I mean peach be four days and in peach</font>

323
00:15:13,730 --> 00:15:19,640
before it was not so dangerous<font color="#E5E5E5"> to use</font>

324
00:15:16,820 --> 00:15:22,550
uncivilized because there were no

325
00:15:19,640 --> 00:15:25,550
destructors so there was no unintended

326
00:15:22,550 --> 00:15:27,500
he called execution and wake up methods

327
00:15:25,550 --> 00:15:29,750
were very very very seldom and you have

328
00:15:27,500 --> 00:15:32,630
to program<font color="#E5E5E5"> you're on your own so usually</font>

329
00:15:29,750 --> 00:15:35,720
no one used wake up so there was no

330
00:15:32,630 --> 00:15:37,490
danger at all except for vulnerabilities

331
00:15:35,720 --> 00:15:42,710
in the answer<font color="#CCCCCC"> lies powder and we had a</font>

332
00:15:37,490 --> 00:15:44,960
<font color="#E5E5E5">lot of them</font><font color="#CCCCCC"> in the past so the</font><font color="#E5E5E5"> next</font>

333
00:15:42,710 --> 00:15:50,360
thing you would see in modern PHP

334
00:15:44,960 --> 00:15:53,180
applications is that they<font color="#E5E5E5"> always use</font>

335
00:15:50,360 --> 00:15:55,310
some kind of caching because they are

336
00:15:53,180 --> 00:15:58,699
<font color="#CCCCCC">usually too slow so leakage a lot in</font>

337
00:15:55,310 --> 00:16:00,619
memory in<font color="#CCCCCC"> the database or in files and</font>

338
00:15:58,700 --> 00:16:04,730
of course the<font color="#E5E5E5"> files are still the most</font>

339
00:16:00,620 --> 00:16:07,790
often using to store big data arrays so

340
00:16:04,730 --> 00:16:10,580
<font color="#CCCCCC">you will see</font><font color="#E5E5E5"> that a lot of PHP</font>

341
00:16:07,790 --> 00:16:14,420
applications store serialized data in

342
00:16:10,580 --> 00:16:16,730
files what does this mean this means

343
00:16:14,420 --> 00:16:18,680
first<font color="#E5E5E5"> of all when you when you the</font>

344
00:16:16,730 --> 00:16:20,120
<font color="#CCCCCC">application</font><font color="#E5E5E5"> is able to store see release</font>

345
00:16:18,680 --> 00:16:22,130
<font color="#CCCCCC">data</font><font color="#E5E5E5"> and files this means there must be</font>

346
00:16:20,120 --> 00:16:24,830
some directory on the<font color="#E5E5E5"> web server that is</font>

347
00:16:22,130 --> 00:16:31,460
writable because otherwise it can cannot

348
00:16:24,830 --> 00:16:35,480
<font color="#E5E5E5">be cashed it's not necessary that this</font>

349
00:16:31,460 --> 00:16:36,920
is inside the document root that can be

350
00:16:35,480 --> 00:16:38,450
anywhere on the server<font color="#E5E5E5"> maybe the temp</font>

351
00:16:36,920 --> 00:16:41,209
directory and subject of the temp

352
00:16:38,450 --> 00:16:43,760
directly but there must be a single

353
00:16:41,210 --> 00:16:45,680
<font color="#E5E5E5">directory that's why durable so this</font>

354
00:16:43,760 --> 00:16:47,930
<font color="#E5E5E5">also means when there's a fine up of</font>

355
00:16:45,680 --> 00:16:49,699
vulnerability in the application there

356
00:16:47,930 --> 00:16:51,349
must be a single<font color="#E5E5E5"> directory that's may be</font>

357
00:16:49,700 --> 00:16:55,070
writable for the file upload and

358
00:16:51,350 --> 00:16:57,980
normally<font color="#E5E5E5"> when you can like upload</font>

359
00:16:55,070 --> 00:16:59,690
something in a temporary directory yeah

360
00:16:57,980 --> 00:17:01,730
and the a temporary directory is not

361
00:16:59,690 --> 00:17:04,010
accessible that's usually not a problem

362
00:17:01,730 --> 00:17:06,770
for an application<font color="#E5E5E5"> so it's a file upload</font>

363
00:17:04,010 --> 00:17:10,910
vulnerability maybe but it's not ranked

364
00:17:06,770 --> 00:17:13,369
so high in severity because you cannot

365
00:17:10,910 --> 00:17:15,829
do anything with it but<font color="#CCCCCC"> when you take</font>

366
00:17:13,369 --> 00:17:18,619
the casing files into considerations now

367
00:17:15,829 --> 00:17:20,990
when you<font color="#E5E5E5"> can run an upload and fire to</font>

368
00:17:18,619 --> 00:17:23,399
<font color="#E5E5E5">this temperature you can upload maybe a</font>

369
00:17:20,990 --> 00:17:25,560
case file that is used later and unser

370
00:17:23,400 --> 00:17:31,920
so you can enter a tech<font color="#E5E5E5"> unsterilized</font>

371
00:17:25,560 --> 00:17:33,929
again so the next<font color="#E5E5E5"> part where you see</font>

372
00:17:31,920 --> 00:17:37,230
answer lies in<font color="#CCCCCC"> seara is very often is</font>

373
00:17:33,930 --> 00:17:41,640
when you when you look at the web

374
00:17:37,230 --> 00:17:45,090
application programming interface the

375
00:17:41,640 --> 00:17:48,030
web<font color="#CCCCCC"> appy many peach p style web</font>

376
00:17:45,090 --> 00:17:51,270
applications will provide civilized and

377
00:17:48,030 --> 00:17:54,810
uncivilized way to maybe talk rest they

378
00:17:51,270 --> 00:18:00,450
don't use<font color="#CCCCCC"> jayden they use civilized</font>

379
00:17:54,810 --> 00:18:03,419
uncivilized the most popular application

380
00:18:00,450 --> 00:18:05,310
like this is<font color="#E5E5E5"> WordPress so when you have</font>

381
00:18:03,420 --> 00:18:08,880
<font color="#CCCCCC">a wordpress blog it will talk from time</font>

382
00:18:05,310 --> 00:18:12,060
to time with<font color="#E5E5E5"> a pedo wordpress.org in PHP</font>

383
00:18:08,880 --> 00:18:15,480
<font color="#E5E5E5">serialized unsterilized form and the</font>

384
00:18:12,060 --> 00:18:17,460
problem here is<font color="#E5E5E5"> it's talking HTTP so any</font>

385
00:18:15,480 --> 00:18:22,290
kind of HTTP men in the middle attack

386
00:18:17,460 --> 00:18:25,860
can inject malicious serialized data

387
00:18:22,290 --> 00:18:29,730
into your answer lies on your blog and

388
00:18:25,860 --> 00:18:34,919
actually this example is really taken

389
00:18:29,730 --> 00:18:37,020
from<font color="#E5E5E5"> WordPress so you see it will send</font>

390
00:18:34,920 --> 00:18:39,090
some requests to the<font color="#E5E5E5"> wordpress</font><font color="#CCCCCC"> happy and</font>

391
00:18:37,020 --> 00:18:42,690
check if there's a new version of

392
00:18:39,090 --> 00:18:47,639
plucking and then will unseal<font color="#CCCCCC"> why's the</font>

393
00:18:42,690 --> 00:18:50,820
code and yeah and if work press would

394
00:18:47,640 --> 00:18:51,870
have interesting objects this will be a

395
00:18:50,820 --> 00:18:54,600
<font color="#CCCCCC">wrong remote code execution</font>

396
00:18:51,870 --> 00:18:56,969
vulnerability but luckily<font color="#CCCCCC"> there is no</font>

397
00:18:54,600 --> 00:18:58,500
such object so only<font color="#E5E5E5"> if you have a</font>

398
00:18:56,970 --> 00:19:03,330
vulnerability<font color="#E5E5E5"> in</font><font color="#CCCCCC"> a parcel you can maybe</font>

399
00:18:58,500 --> 00:19:07,230
attack wordpress the next thing where

400
00:19:03,330 --> 00:19:10,110
you find uncivilized is with databases

401
00:19:07,230 --> 00:19:14,520
and there are a lot of PHP applications

402
00:19:10,110 --> 00:19:17,010
that store settings or sessions in a

403
00:19:14,520 --> 00:19:18,840
serialized form in the database this

404
00:19:17,010 --> 00:19:21,690
means if you have a SQL injection

405
00:19:18,840 --> 00:19:26,159
vulnerability in PHP application you

406
00:19:21,690 --> 00:19:29,850
maybe can modify the field that is

407
00:19:26,160 --> 00:19:32,580
serialized with all our PHP applications

408
00:19:29,850 --> 00:19:35,159
that was very tricky because you cannot

409
00:19:32,580 --> 00:19:39,300
stack queries with my squirrel

410
00:19:35,160 --> 00:19:41,190
in early pitch p versions but nowadays

411
00:19:39,300 --> 00:19:44,940
especially all these<font color="#CCCCCC"> sent framework</font>

412
00:19:41,190 --> 00:19:48,360
applications they use pto mysql<font color="#CCCCCC"> to</font>

413
00:19:44,940 --> 00:19:50,520
access the<font color="#CCCCCC"> medical database and PDL</font>

414
00:19:48,360 --> 00:19:52,500
mysql has no protection against tech

415
00:19:50,520 --> 00:19:55,920
queries so<font color="#CCCCCC"> when you</font><font color="#E5E5E5"> have an</font><font color="#CCCCCC"> application</font>

416
00:19:52,500 --> 00:19:59,760
with PDO mysql you can inject the usual

417
00:19:55,920 --> 00:20:01,800
semicolon drop drop tables and this is

418
00:19:59,760 --> 00:20:03,720
was not possible previously but now you

419
00:20:01,800 --> 00:20:07,020
can do that with modern applications and

420
00:20:03,720 --> 00:20:08,610
so you can modify all the database<font color="#CCCCCC"> okay</font>

421
00:20:07,020 --> 00:20:09,930
when you can modify all the database

422
00:20:08,610 --> 00:20:11,550
maybe you can do other interesting

423
00:20:09,930 --> 00:20:16,470
things but you can still attack

424
00:20:11,550 --> 00:20:20,190
uncivilized and actually<font color="#CCCCCC"> I didn't audit</font>

425
00:20:16,470 --> 00:20:23,760
for our sister company<font color="#E5E5E5"> mayflower who</font>

426
00:20:20,190 --> 00:20:26,640
develops<font color="#CCCCCC"> pH project I</font><font color="#E5E5E5"> did this in</font>

427
00:20:23,760 --> 00:20:28,830
February a sink and they had on they

428
00:20:26,640 --> 00:20:30,870
have unsterilized of database<font color="#CCCCCC"> and</font>

429
00:20:28,830 --> 00:20:33,179
<font color="#E5E5E5">content and they're also had a SQL</font>

430
00:20:30,870 --> 00:20:39,030
injection so<font color="#CCCCCC"> I was able to</font><font color="#E5E5E5"> answer lies</font>

431
00:20:33,180 --> 00:20:41,610
something and execute arbitrary code the

432
00:20:39,030 --> 00:20:45,149
last thing<font color="#E5E5E5"> I want to get into is a</font>

433
00:20:41,610 --> 00:20:47,610
vulnerability<font color="#E5E5E5"> I disclosed during the</font>

434
00:20:45,150 --> 00:20:50,670
month of peach peace security and may it

435
00:20:47,610 --> 00:20:54,780
was actually the<font color="#CCCCCC"> last one on the last</font>

436
00:20:50,670 --> 00:20:58,290
day and the thing<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> there is a</font>

437
00:20:54,780 --> 00:21:01,139
problem in<font color="#E5E5E5"> the session deserializer and</font>

438
00:20:58,290 --> 00:21:04,920
the problem<font color="#E5E5E5"> is whenever a session key</font>

439
00:21:01,140 --> 00:21:09,120
starts with<font color="#CCCCCC"> the ! this deserializer gets</font>

440
00:21:04,920 --> 00:21:14,250
confused and so if you<font color="#CCCCCC"> answer have an</font>

441
00:21:09,120 --> 00:21:17,100
application that allows you<font color="#CCCCCC"> to put</font>

442
00:21:14,250 --> 00:21:19,590
arbitrary keys into a session or two to

443
00:21:17,100 --> 00:21:21,510
have a prefix arbiter prefix for session

444
00:21:19,590 --> 00:21:25,379
variables which sometimes happens you

445
00:21:21,510 --> 00:21:26,550
see some examples down there when

446
00:21:25,380 --> 00:21:29,340
something<font color="#CCCCCC"> like this</font><font color="#E5E5E5"> exists in your</font>

447
00:21:26,550 --> 00:21:33,750
application then you can more<font color="#E5E5E5"> or less in</font>

448
00:21:29,340 --> 00:21:37,409
inject ! keys with arbitrary values and

449
00:21:33,750 --> 00:21:40,710
now the problem is when this gets

450
00:21:37,410 --> 00:21:42,850
deserialized during the session load<font color="#E5E5E5"> it</font>

451
00:21:40,710 --> 00:21:45,160
<font color="#E5E5E5">will confuse the deserializer and</font>

452
00:21:42,850 --> 00:21:48,010
you can inject arbitrary serialized data

453
00:21:45,160 --> 00:21:49,810
into this session<font color="#E5E5E5"> okay if if</font><font color="#CCCCCC"> the</font>

454
00:21:48,010 --> 00:21:51,310
application allows to put anything in

455
00:21:49,810 --> 00:21:55,090
the session then you can put anything in

456
00:21:51,310 --> 00:21:57,010
but these<font color="#E5E5E5"> are always strings but due to</font>

457
00:21:55,090 --> 00:21:58,990
this vulnerability you can put anything

458
00:21:57,010 --> 00:22:01,420
serialize in there so you can attack

459
00:21:58,990 --> 00:22:03,400
uncivilized or you can<font color="#E5E5E5"> just create our</font>

460
00:22:01,420 --> 00:22:05,680
rhetoric objects anyway in the

461
00:22:03,400 --> 00:22:07,660
intersection<font color="#E5E5E5"> may be a valid</font><font color="#CCCCCC"> user object</font>

462
00:22:05,680 --> 00:22:10,030
normally you can just inject a string

463
00:22:07,660 --> 00:22:13,780
but with this vulnerability you can

464
00:22:10,030 --> 00:22:16,450
inject an arbitrary user object if your

465
00:22:13,780 --> 00:22:18,129
application<font color="#CCCCCC"> has something like that so</font>

466
00:22:16,450 --> 00:22:19,810
these were the vulnerability classes

467
00:22:18,130 --> 00:22:23,890
that could allow a text against answer

468
00:22:19,810 --> 00:22:27,340
your eyes but to do property oriented

469
00:22:23,890 --> 00:22:29,920
programming you need more<font color="#CCCCCC"> you need first</font>

470
00:22:27,340 --> 00:22:32,080
<font color="#E5E5E5">of all you need this</font><font color="#CCCCCC"> deserialising of</font>

471
00:22:29,920 --> 00:22:36,280
malicious input but you also need

472
00:22:32,080 --> 00:22:37,960
classes that are usable for your pot

473
00:22:36,280 --> 00:22:40,810
<font color="#E5E5E5">change your property oriented</font>

474
00:22:37,960 --> 00:22:44,530
programming chain and a class is usable

475
00:22:40,810 --> 00:22:48,129
for the pub chain if it's can start the

476
00:22:44,530 --> 00:22:49,480
pop chain okay first<font color="#E5E5E5"> of all the class</font>

477
00:22:48,130 --> 00:22:51,310
must be available<font color="#CCCCCC"> and you're in the</font>

478
00:22:49,480 --> 00:22:53,320
application and at the time of the

479
00:22:51,310 --> 00:22:55,300
anterior uncivilized then you<font color="#E5E5E5"> need</font>

480
00:22:53,320 --> 00:22:56,590
something to<font color="#E5E5E5"> start the pop chain you</font>

481
00:22:55,300 --> 00:22:59,169
need<font color="#E5E5E5"> something to transfer the control</font>

482
00:22:56,590 --> 00:23:02,110
from one object to the other and in the

483
00:22:59,170 --> 00:23:04,540
<font color="#E5E5E5">end you need some object with</font>

484
00:23:02,110 --> 00:23:10,530
interesting operations are we go on this

485
00:23:04,540 --> 00:23:10,530
later so first of all class availability

486
00:23:12,990 --> 00:23:18,540
when an application<font color="#CCCCCC"> uncie or something</font>

487
00:23:15,540 --> 00:23:21,450
and it creates objects then you can only

488
00:23:18,540 --> 00:23:24,690
create the objects that PHP knows about

489
00:23:21,450 --> 00:23:27,240
at this moment so this means if you

490
00:23:24,690 --> 00:23:30,600
answer lies an object<font color="#CCCCCC"> called X a b c d</font>

491
00:23:27,240 --> 00:23:32,640
then<font color="#E5E5E5"> peach p will check if this object</font>

492
00:23:30,600 --> 00:23:35,280
is available<font color="#E5E5E5"> in this class</font><font color="#CCCCCC"> is available</font>

493
00:23:32,640 --> 00:23:37,920
<font color="#E5E5E5">and if it's not available as will create</font>

494
00:23:35,280 --> 00:23:39,870
a so-called incomplete class which is

495
00:23:37,920 --> 00:23:46,230
<font color="#CCCCCC">nothing more like a dummy object with</font>

496
00:23:39,870 --> 00:23:48,629
properties so this is<font color="#CCCCCC"> not usable so</font>

497
00:23:46,230 --> 00:23:51,570
basically this means you can only use

498
00:23:48,630 --> 00:23:53,460
<font color="#E5E5E5">classes for your attack that are already</font>

499
00:23:51,570 --> 00:23:58,050
<font color="#E5E5E5">included at the moment of the answer</font>

500
00:23:53,460 --> 00:24:00,540
lies this limits very much<font color="#E5E5E5"> the amount of</font>

501
00:23:58,050 --> 00:24:04,889
classes you can use for the attack on

502
00:24:00,540 --> 00:24:07,020
<font color="#E5E5E5">the other hand modern PHP applications</font>

503
00:24:04,890 --> 00:24:09,150
after possibility to reduce<font color="#CCCCCC"> the so</font>

504
00:24:07,020 --> 00:24:11,700
<font color="#CCCCCC">called auto load function which is the</font>

505
00:24:09,150 --> 00:24:13,290
class autoloader so in the case peach<font color="#CCCCCC"> P</font>

506
00:24:11,700 --> 00:24:15,750
doesn't<font color="#E5E5E5"> find the object it will first</font>

507
00:24:13,290 --> 00:24:17,850
call the autoloader and the autoloader

508
00:24:15,750 --> 00:24:19,290
can check if it snows the class or knows

509
00:24:17,850 --> 00:24:23,580
how to load the class or create the

510
00:24:19,290 --> 00:24:26,428
class so a modern application you

511
00:24:23,580 --> 00:24:28,949
sometimes are able to instance every

512
00:24:26,429 --> 00:24:31,140
single object of the application because

513
00:24:28,950 --> 00:24:39,660
the autoloader we'll just load the right

514
00:24:31,140 --> 00:24:41,940
object the right time so<font color="#CCCCCC"> I already</font><font color="#E5E5E5"> said</font>

515
00:24:39,660 --> 00:24:43,890
you are really limited in how your pop

516
00:24:41,940 --> 00:24:46,559
chain will look like and what method you

517
00:24:43,890 --> 00:24:49,559
can use so the<font color="#CCCCCC"> problem in peach PS you</font>

518
00:24:46,559 --> 00:24:54,090
have to find a way to<font color="#E5E5E5"> start the chain at</font>

519
00:24:49,559 --> 00:24:56,550
all so and<font color="#E5E5E5"> this means your unsterilized</font>

520
00:24:54,090 --> 00:24:58,770
must somehow or the<font color="#E5E5E5"> code afterwards must</font>

521
00:24:56,550 --> 00:25:02,490
somehow trigger execution of the objects

522
00:24:58,770 --> 00:25:04,020
you you<font color="#E5E5E5"> just created and</font><font color="#CCCCCC"> I already</font>

523
00:25:02,490 --> 00:25:06,870
<font color="#E5E5E5">mentioned there is wake</font><font color="#CCCCCC"> up and there's</font>

524
00:25:04,020 --> 00:25:08,639
distract the most obvious ways to start

525
00:25:06,870 --> 00:25:10,860
a pop chain but there<font color="#E5E5E5"> are some other</font>

526
00:25:08,640 --> 00:25:13,350
magic methods in PHP that might allow

527
00:25:10,860 --> 00:25:15,780
you to startup option also this is a

528
00:25:13,350 --> 00:25:17,939
two-string so every time you<font color="#E5E5E5"> have an</font>

529
00:25:15,780 --> 00:25:20,460
object and gets concatenated to a string

530
00:25:17,940 --> 00:25:23,270
it will call the<font color="#CCCCCC"> two string so maybe</font>

531
00:25:20,460 --> 00:25:27,020
you'll find a<font color="#E5E5E5"> usable two string method</font>

532
00:25:23,270 --> 00:25:28,940
when method is called an object and the

533
00:25:27,020 --> 00:25:32,090
method is<font color="#E5E5E5"> not known then</font><font color="#CCCCCC"> it will try to</font>

534
00:25:28,940 --> 00:25:35,180
find the call magic method if it exists

535
00:25:32,090 --> 00:25:39,290
and it will execute that and get in said

536
00:25:35,180 --> 00:25:43,850
are for magic properties so that getter

537
00:25:39,290 --> 00:25:46,790
and setter in real world so far i only

538
00:25:43,850 --> 00:25:51,020
started pop change with wake up and

539
00:25:46,790 --> 00:25:52,730
<font color="#E5E5E5">destruct so the others</font><font color="#CCCCCC"> i'm theoretically</font>

540
00:25:51,020 --> 00:25:54,260
possible but so far I haven't<font color="#E5E5E5"> found</font>

541
00:25:52,730 --> 00:25:58,370
application that is vulnerable<font color="#CCCCCC"> to this</font>

542
00:25:54,260 --> 00:26:00,560
and the<font color="#E5E5E5"> example just shows you have a</font>

543
00:25:58,370 --> 00:26:03,110
class i call it pop starter and it has a

544
00:26:00,560 --> 00:26:05,090
destructor so when you answer like this

545
00:26:03,110 --> 00:26:07,250
cars and if we get destroyed the

546
00:26:05,090 --> 00:26:08,959
<font color="#E5E5E5">distract will be executed in this case</font>

547
00:26:07,250 --> 00:26:16,160
there's nothing in there so nothing

548
00:26:08,960 --> 00:26:19,250
would<font color="#CCCCCC"> be able so the</font><font color="#E5E5E5"> next thing you</font>

549
00:26:16,160 --> 00:26:23,510
always need in in a pub chain is a way

550
00:26:19,250 --> 00:26:26,240
to transfer control from wrong object to

551
00:26:23,510 --> 00:26:28,640
another to the<font color="#E5E5E5"> method of another because</font>

552
00:26:26,240 --> 00:26:30,620
you usually will not find the destructor

553
00:26:28,640 --> 00:26:32,420
that does<font color="#E5E5E5"> something very interesting for</font>

554
00:26:30,620 --> 00:26:35,000
you and the past you could find these

555
00:26:32,420 --> 00:26:37,160
structures they were deleting files so

556
00:26:35,000 --> 00:26:39,440
you<font color="#E5E5E5"> could delete a file immediately or</font>

557
00:26:37,160 --> 00:26:41,660
you find something<font color="#CCCCCC"> that writes a log</font>

558
00:26:39,440 --> 00:26:45,260
file so<font color="#E5E5E5"> you could write a fire to the</font>

559
00:26:41,660 --> 00:26:49,040
<font color="#E5E5E5">disk but most of the time the destructor</font>

560
00:26:45,260 --> 00:26:52,879
will do nothing else then call like

561
00:26:49,040 --> 00:26:56,899
another method<font color="#E5E5E5"> of another object so you</font>

562
00:26:52,880 --> 00:26:59,150
need a way to transfer the control from

563
00:26:56,900 --> 00:27:01,340
one object to the other the most obvious

564
00:26:59,150 --> 00:27:03,440
thing is<font color="#E5E5E5"> that you have a property that</font>

565
00:27:01,340 --> 00:27:06,139
gets dereferenced and the method of

566
00:27:03,440 --> 00:27:08,900
these<font color="#CCCCCC"> are these new objects is executed</font>

567
00:27:06,140 --> 00:27:11,930
you see this an example the property<font color="#CCCCCC"> to</font>

568
00:27:08,900 --> 00:27:14,570
is used as object and the method<font color="#CCCCCC"> b is</font>

569
00:27:11,930 --> 00:27:18,800
executed on<font color="#CCCCCC"> the property on</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> other</font>

570
00:27:14,570 --> 00:27:21,439
object another way would be<font color="#E5E5E5"> that</font>

571
00:27:18,800 --> 00:27:25,430
property<font color="#CCCCCC"> 3 is also</font><font color="#E5E5E5"> not checked and the</font>

572
00:27:21,440 --> 00:27:27,830
data property is assigned<font color="#CCCCCC"> from value</font><font color="#E5E5E5"> so</font>

573
00:27:25,430 --> 00:27:31,170
you<font color="#E5E5E5"> maybe can hit a magic setter and</font>

574
00:27:27,830 --> 00:27:34,470
another object and the third thing is

575
00:27:31,170 --> 00:27:36,990
a property is appended to a string so

576
00:27:34,470 --> 00:27:39,390
you<font color="#E5E5E5"> could hit an two string method of</font>

577
00:27:36,990 --> 00:27:41,550
another object so this always transfers

578
00:27:39,390 --> 00:27:46,830
execution from one object to<font color="#E5E5E5"> any other</font>

579
00:27:41,550 --> 00:27:49,290
and usually want to chain many of them

580
00:27:46,830 --> 00:27:52,710
<font color="#E5E5E5">until</font><font color="#CCCCCC"> you reach a method that is usual</font>

581
00:27:49,290 --> 00:27:54,870
for you and this all six the end of pop

582
00:27:52,710 --> 00:27:57,150
chains are usually classes with

583
00:27:54,870 --> 00:28:00,629
interesting methods this means an

584
00:27:57,150 --> 00:28:04,230
interesting operation is a you can see

585
00:28:00,630 --> 00:28:07,890
<font color="#E5E5E5">this file access database access access</font>

586
00:28:04,230 --> 00:28:11,130
to this session to access to the mail

587
00:28:07,890 --> 00:28:14,220
function sometimes you even get the

588
00:28:11,130 --> 00:28:19,170
execution of PHP code or inclusion of

589
00:28:14,220 --> 00:28:22,590
PHP code and in this example this would

590
00:28:19,170 --> 00:28:26,430
<font color="#E5E5E5">allow this would allow to load an</font>

591
00:28:22,590 --> 00:28:28,860
arbitrary file in memory mail it to any

592
00:28:26,430 --> 00:28:32,820
email address and in the<font color="#CCCCCC"> end attempt to</font>

593
00:28:28,860 --> 00:28:36,389
delete the file so if you find this

594
00:28:32,820 --> 00:28:39,480
somewhere in the application you can

595
00:28:36,390 --> 00:28:42,360
completely control what it does because

596
00:28:39,480 --> 00:28:45,690
you have control of all the properties

597
00:28:42,360 --> 00:28:49,649
and all the properties are required to

598
00:28:45,690 --> 00:28:52,110
do what you want so you can choose any

599
00:28:49,650 --> 00:28:56,070
file because you can set the temp file

600
00:28:52,110 --> 00:28:59,010
property you can choose the two of the

601
00:28:56,070 --> 00:29:02,280
email the subject of the email and yeah

602
00:28:59,010 --> 00:29:03,990
most of the x files you want<font color="#CCCCCC"> to steal</font>

603
00:29:02,280 --> 00:29:07,110
are not writable anyway so the unlink

604
00:29:03,990 --> 00:29:09,510
will just arrow and you see this<font color="#E5E5E5"> is</font>

605
00:29:07,110 --> 00:29:11,310
implemented in<font color="#CCCCCC"> the method B so you would</font>

606
00:29:09,510 --> 00:29:16,050
have to combine it with<font color="#E5E5E5"> the previously</font>

607
00:29:11,310 --> 00:29:19,379
found code flow transfer object that

608
00:29:16,050 --> 00:29:22,139
called and that called the method B of

609
00:29:19,380 --> 00:29:24,330
property<font color="#CCCCCC"> to and because you</font><font color="#E5E5E5"> also have</font>

610
00:29:22,140 --> 00:29:27,060
control about property to you can just

611
00:29:24,330 --> 00:29:32,250
tell property to to be an<font color="#CCCCCC"> object of type</font>

612
00:29:27,060 --> 00:29:35,010
operation so to make this more clear<font color="#E5E5E5"> I</font>

613
00:29:32,250 --> 00:29:36,650
will give an example the example is<font color="#CCCCCC"> P</font>

614
00:29:35,010 --> 00:29:40,910
week

615
00:29:36,650 --> 00:29:44,150
p<font color="#CCCCCC"> wig is a very popular open source user</font>

616
00:29:40,910 --> 00:29:47,660
tracking system it's<font color="#CCCCCC"> supposed to</font><font color="#E5E5E5"> be very</font>

617
00:29:44,150 --> 00:29:49,760
<font color="#CCCCCC">similar to</font><font color="#E5E5E5"> Google Analytics and I don't</font>

618
00:29:47,660 --> 00:29:51,740
know about America but in Germany it's

619
00:29:49,760 --> 00:29:56,270
used in many many many<font color="#E5E5E5"> many places and</font>

620
00:29:51,740 --> 00:30:00,410
all the major<font color="#E5E5E5"> German political parties</font>

621
00:29:56,270 --> 00:30:03,050
have installed on their website all the

622
00:30:00,410 --> 00:30:05,330
smaller banks have it installed on<font color="#E5E5E5"> their</font>

623
00:30:03,050 --> 00:30:07,460
website because<font color="#E5E5E5"> all the smaller banks</font>

624
00:30:05,330 --> 00:30:10,159
are powered<font color="#CCCCCC"> by two companies and these</font>

625
00:30:07,460 --> 00:30:12,980
two<font color="#CCCCCC"> companies both use pedic so this</font>

626
00:30:10,160 --> 00:30:17,000
renders all the<font color="#CCCCCC"> bank's vulnerable and</font>

627
00:30:12,980 --> 00:30:20,390
you will<font color="#E5E5E5"> find ironically security</font>

628
00:30:17,000 --> 00:30:22,760
companies that use<font color="#CCCCCC"> P big like the</font><font color="#E5E5E5"> German</font>

629
00:30:20,390 --> 00:30:25,940
safer shopping which is supposed to be a

630
00:30:22,760 --> 00:30:29,120
certificate for shops to be secure which

631
00:30:25,940 --> 00:30:32,300
usually is not they<font color="#E5E5E5"> are not and also</font>

632
00:30:29,120 --> 00:30:34,699
<font color="#E5E5E5">many popular open source projects have</font>

633
00:30:32,300 --> 00:30:38,540
it on their<font color="#E5E5E5"> website for example to pour</font>

634
00:30:34,700 --> 00:30:40,160
dry which is the yeah at least in

635
00:30:38,540 --> 00:30:43,639
<font color="#E5E5E5">Germany the most prominent content</font>

636
00:30:40,160 --> 00:30:48,050
management system<font color="#E5E5E5"> and in the past KDE</font>

637
00:30:43,640 --> 00:30:52,220
dot org and so on they all had<font color="#CCCCCC"> P big and</font>

638
00:30:48,050 --> 00:30:54,740
a vulnerability that was unsure lysing

639
00:30:52,220 --> 00:30:56,960
user input and especially the cookie and

640
00:30:54,740 --> 00:30:59,000
a lot remote code execution was

641
00:30:56,960 --> 00:31:02,480
disclosed by me and december two

642
00:30:59,000 --> 00:31:05,840
thousand mine and now we will look<font color="#E5E5E5"> at</font>

643
00:31:02,480 --> 00:31:09,140
this vulnerability and the first thing

644
00:31:05,840 --> 00:31:12,139
is when you look at<font color="#CCCCCC"> it now seven months</font>

645
00:31:09,140 --> 00:31:14,750
<font color="#CCCCCC">later you will maybe thing always old</font>

646
00:31:12,140 --> 00:31:17,540
news<font color="#CCCCCC"> is fixed but</font><font color="#E5E5E5"> the problem here is</font>

647
00:31:14,750 --> 00:31:21,230
PHP developers always<font color="#CCCCCC"> know think better</font>

648
00:31:17,540 --> 00:31:24,379
so my recommendation to remove the

649
00:31:21,230 --> 00:31:26,750
answer lies was ignored to how to fix<font color="#E5E5E5"> it</font>

650
00:31:24,380 --> 00:31:28,910
<font color="#E5E5E5">and so what</font><font color="#CCCCCC"> I did is they used to answer</font>

651
00:31:26,750 --> 00:31:31,490
lies still and<font color="#CCCCCC"> just put in a blacklist</font>

652
00:31:28,910 --> 00:31:33,470
<font color="#E5E5E5">and we all know that black lists are the</font>

653
00:31:31,490 --> 00:31:37,820
most effective way to ensure security

654
00:31:33,470 --> 00:31:43,700
and after looking at it again and again

655
00:31:37,820 --> 00:31:46,909
<font color="#E5E5E5">and</font><font color="#CCCCCC"> looking at the uncivilized powder in</font>

656
00:31:43,700 --> 00:31:48,930
detail it was<font color="#E5E5E5"> very obvious that the</font>

657
00:31:46,910 --> 00:31:53,010
blacklist is ineffective

658
00:31:48,930 --> 00:31:56,250
so I I won't tell<font color="#CCCCCC"> you</font><font color="#E5E5E5"> how it works it</font>

659
00:31:53,010 --> 00:31:58,110
correctly but if you prepare the ante

660
00:31:56,250 --> 00:32:00,600
ala the civilized string in a special

661
00:31:58,110 --> 00:32:02,429
way you can bypass all the<font color="#E5E5E5"> blacklists</font>

662
00:32:00,600 --> 00:32:04,409
this means the vulnerability I disclosed

663
00:32:02,430 --> 00:32:09,240
seven months<font color="#E5E5E5"> ago is still exploitable</font>

664
00:32:04,410 --> 00:32:10,620
and it's not yet fixed so<font color="#E5E5E5"> I will not</font>

665
00:32:09,240 --> 00:32:13,350
give you<font color="#E5E5E5"> the</font><font color="#CCCCCC"> decides how to manipulate</font>

666
00:32:10,620 --> 00:32:16,169
but if you can read source code and can

667
00:32:13,350 --> 00:32:20,520
compare patters to blacklist you<font color="#E5E5E5"> maybe</font>

668
00:32:16,170 --> 00:32:24,330
find out how to exploit it so when you

669
00:32:20,520 --> 00:32:30,150
want to exploit pivot and you need as

670
00:32:24,330 --> 00:32:31,710
always a start of a pop chain so what

671
00:32:30,150 --> 00:32:35,010
you do is you take the<font color="#E5E5E5"> source code take</font>

672
00:32:31,710 --> 00:32:36,810
your favorite text editor or ide and you

673
00:32:35,010 --> 00:32:38,760
would such search for wake up and

674
00:32:36,810 --> 00:32:40,649
destroyed I really do<font color="#E5E5E5"> that with pubic</font>

675
00:32:38,760 --> 00:32:42,330
you'll see that there are eight classes

676
00:32:40,650 --> 00:32:44,190
from the<font color="#E5E5E5"> sent from work because</font><font color="#CCCCCC"> P</font>

677
00:32:42,330 --> 00:32:46,290
becomes with a small subset of the zend

678
00:32:44,190 --> 00:32:49,380
framework eight classes of the same

679
00:32:46,290 --> 00:32:52,470
framework come with wake up 11 classes

680
00:32:49,380 --> 00:32:54,570
can with distract and<font color="#CCCCCC"> 11 classes from</font>

681
00:32:52,470 --> 00:32:58,140
the pivot core classes also come with

682
00:32:54,570 --> 00:32:59,970
destruct so what you would do now is you

683
00:32:58,140 --> 00:33:03,810
would go through all the classes<font color="#E5E5E5"> and</font>

684
00:32:59,970 --> 00:33:05,850
check the the method in detail and<font color="#CCCCCC"> so</font>

685
00:33:03,810 --> 00:33:07,500
check what they do<font color="#E5E5E5"> I can tell you with</font>

686
00:33:05,850 --> 00:33:09,600
<font color="#CCCCCC">the wake up's you will</font><font color="#E5E5E5"> most of the time</font>

687
00:33:07,500 --> 00:33:13,230
<font color="#E5E5E5">will see that they're either empty and</font>

688
00:33:09,600 --> 00:33:15,570
setting some properties calling<font color="#CCCCCC"> their</font>

689
00:33:13,230 --> 00:33:17,580
parents wake up<font color="#E5E5E5"> or doing something else</font>

690
00:33:15,570 --> 00:33:19,889
that is not so interesting so we can

691
00:33:17,580 --> 00:33:24,510
just keep wake up most of<font color="#CCCCCC"> the time the</font>

692
00:33:19,890 --> 00:33:30,480
destructors on the other hand do more

693
00:33:24,510 --> 00:33:32,280
complex things but the singers<font color="#E5E5E5"> I will</font>

694
00:33:30,480 --> 00:33:35,460
only go into<font color="#E5E5E5"> the center in book one this</font>

695
00:33:32,280 --> 00:33:38,940
time in December I show<font color="#CCCCCC"> that the P big</font>

696
00:33:35,460 --> 00:33:40,590
core comes with a config object and this

697
00:33:38,940 --> 00:33:42,210
context object can directly be used to

698
00:33:40,590 --> 00:33:44,280
write arbitrary files to the hard disk

699
00:33:42,210 --> 00:33:48,240
but i will use the<font color="#E5E5E5"> other the more</font>

700
00:33:44,280 --> 00:33:50,970
complicated<font color="#E5E5E5"> way</font><font color="#CCCCCC"> no so i did a</font><font color="#E5E5E5"> lot of</font>

701
00:33:48,240 --> 00:33:52,680
research in San framework last year so<font color="#E5E5E5"> I</font>

702
00:33:50,970 --> 00:33:55,920
already<font color="#E5E5E5"> know which of the classes are</font>

703
00:33:52,680 --> 00:33:59,910
usable for pop chains so I will just

704
00:33:55,920 --> 00:34:03,450
<font color="#E5E5E5">tell you which one my most from</font>

705
00:33:59,910 --> 00:34:06,570
primum the most usable one is a scent

706
00:34:03,450 --> 00:34:09,270
<font color="#E5E5E5">lok you see the destructor is not doing</font>

707
00:34:06,570 --> 00:34:11,909
very much the destructor just go<font color="#E5E5E5"> through</font>

708
00:34:09,270 --> 00:34:14,850
all the writers properties and for each

709
00:34:11,909 --> 00:34:19,350
writer property it will call the shuttle

710
00:34:14,850 --> 00:34:21,509
method so no interesting operation<font color="#E5E5E5"> just</font>

711
00:34:19,350 --> 00:34:23,909
transfer from of control from one object

712
00:34:21,510 --> 00:34:25,860
to the other of course because you unser

713
00:34:23,909 --> 00:34:28,199
like this you have<font color="#E5E5E5"> full control of the</font>

714
00:34:25,860 --> 00:34:30,660
writers so you can put any object in

715
00:34:28,199 --> 00:34:32,819
there that you want for the next thing

716
00:34:30,659 --> 00:34:34,949
you<font color="#E5E5E5"> want to do is</font><font color="#CCCCCC"> you need to scan the</font>

717
00:34:32,820 --> 00:34:39,120
source code again for something that has

718
00:34:34,949 --> 00:34:41,850
a shutdown method luckily this time you

719
00:34:39,120 --> 00:34:44,940
only have<font color="#CCCCCC"> 6 hits</font><font color="#E5E5E5"> in inside the same</font>

720
00:34:41,850 --> 00:34:49,080
framework and only one of<font color="#E5E5E5"> them is</font>

721
00:34:44,940 --> 00:34:52,440
interesting yes I just ya doing

722
00:34:49,080 --> 00:34:55,469
completely useless things like closing a

723
00:34:52,440 --> 00:34:58,620
file<font color="#CCCCCC"> that was not open previously or</font>

724
00:34:55,469 --> 00:35:00,180
delete some property so the only

725
00:34:58,620 --> 00:35:03,029
<font color="#E5E5E5">interesting one</font><font color="#CCCCCC"> is the scent log writer</font>

726
00:35:00,180 --> 00:35:09,450
mail and this is actually<font color="#CCCCCC"> a very</font>

727
00:35:03,030 --> 00:35:12,600
complicated method all it does<font color="#E5E5E5"> is</font><font color="#CCCCCC"> it</font>

728
00:35:09,450 --> 00:35:15,899
basically checks if it has events to

729
00:35:12,600 --> 00:35:19,470
mail and if it<font color="#E5E5E5"> has invents to mail then</font>

730
00:35:15,900 --> 00:35:22,890
it will ya call the mail class usually

731
00:35:19,470 --> 00:35:26,009
and create<font color="#CCCCCC"> the text section of the email</font>

732
00:35:22,890 --> 00:35:28,470
and later create the the HTML section of

733
00:35:26,010 --> 00:35:32,100
the email<font color="#E5E5E5"> and what you don't see after</font>

734
00:35:28,470 --> 00:35:35,549
that it will mail the mail so what you

735
00:35:32,100 --> 00:35:38,400
can do here is actually you can spam

736
00:35:35,550 --> 00:35:41,040
anyone with any text you want<font color="#E5E5E5"> it's</font>

737
00:35:38,400 --> 00:35:42,960
utilizing and using this two classes I

738
00:35:41,040 --> 00:35:44,310
just<font color="#E5E5E5"> showed</font><font color="#CCCCCC"> you if you just</font><font color="#E5E5E5"> combine</font>

739
00:35:42,960 --> 00:35:48,660
these two classes you can send emails

740
00:35:44,310 --> 00:35:50,430
but we want to have more you want<font color="#E5E5E5"> to</font>

741
00:35:48,660 --> 00:35:54,899
<font color="#E5E5E5">have more control we want to have a code</font>

742
00:35:50,430 --> 00:35:57,330
execution so we continue so what we have

743
00:35:54,900 --> 00:35:59,070
to<font color="#CCCCCC"> do now is we have to find for each of</font>

744
00:35:57,330 --> 00:36:02,100
the properties that<font color="#E5E5E5"> is usable which is</font>

745
00:35:59,070 --> 00:36:06,330
male and lay<font color="#CCCCCC"> out in</font><font color="#E5E5E5"> this case we have to</font>

746
00:36:02,100 --> 00:36:08,730
put in fitting objects for the<font color="#E5E5E5"> male</font>

747
00:36:06,330 --> 00:36:10,020
property is very simple because there's

748
00:36:08,730 --> 00:36:12,000
<font color="#E5E5E5">only the sent mail</font>

749
00:36:10,020 --> 00:36:13,980
they both fit so<font color="#E5E5E5"> you just</font><font color="#CCCCCC"> pull it</font><font color="#E5E5E5"> in</font>

750
00:36:12,000 --> 00:36:15,420
<font color="#E5E5E5">there on the other</font><font color="#CCCCCC"> end there's the</font>

751
00:36:13,980 --> 00:36:17,670
render method of the layout proper

752
00:36:15,420 --> 00:36:24,900
property and the render method is in

753
00:36:17,670 --> 00:36:27,720
many many many classes of pubic so in 14

754
00:36:24,900 --> 00:36:30,660
classes of pubic score in six classes of

755
00:36:27,720 --> 00:36:32,970
<font color="#CCCCCC">the HTML Peele library and in 21 classes</font>

756
00:36:30,660 --> 00:36:36,750
of<font color="#CCCCCC"> the zend framework and even one pivot</font>

757
00:36:32,970 --> 00:36:40,709
plugin so you have up to<font color="#CCCCCC"> log through a</font>

758
00:36:36,750 --> 00:36:41,910
lot a lot<font color="#CCCCCC"> of classes and I don't want to</font>

759
00:36:40,710 --> 00:36:45,360
do that because we<font color="#E5E5E5"> don't have the time</font>

760
00:36:41,910 --> 00:36:52,230
so I just tell you pubic viewers the

761
00:36:45,360 --> 00:36:55,320
most interesting<font color="#CCCCCC"> one p week view is</font>

762
00:36:52,230 --> 00:36:59,340
actually the render method is a large

763
00:36:55,320 --> 00:37:01,890
piece of code and most of<font color="#E5E5E5"> it</font><font color="#CCCCCC"> is wrapped</font>

764
00:36:59,340 --> 00:37:03,690
in try catch blocks so actually<font color="#CCCCCC"> you can</font>

765
00:37:01,890 --> 00:37:06,660
<font color="#CCCCCC">ignore nearly everything of this and</font>

766
00:37:03,690 --> 00:37:09,570
only<font color="#E5E5E5"> the last line is very interesting</font>

767
00:37:06,660 --> 00:37:13,680
because it uses the property smarty and

768
00:37:09,570 --> 00:37:15,090
calls the fetch method and you also see

769
00:37:13,680 --> 00:37:17,279
that the parameter to the fetch method

770
00:37:15,090 --> 00:37:21,660
it's the template property so you

771
00:37:17,280 --> 00:37:23,460
control balls and obviously when it's

772
00:37:21,660 --> 00:37:26,730
<font color="#E5E5E5">already called smarty than its supposed</font>

773
00:37:23,460 --> 00:37:29,160
to be a smart object and we<font color="#CCCCCC"> go through</font>

774
00:37:26,730 --> 00:37:31,110
<font color="#CCCCCC">this now faster and it's really</font><font color="#E5E5E5"> a smart</font>

775
00:37:29,160 --> 00:37:33,450
object you want to have in there because

776
00:37:31,110 --> 00:37:36,120
when you know smarty you will know that

777
00:37:33,450 --> 00:37:39,390
smarty allows you to have templates and

778
00:37:36,120 --> 00:37:40,890
execute code and so on so when you look

779
00:37:39,390 --> 00:37:43,109
at the fetch me that<font color="#CCCCCC"> you will see that</font>

780
00:37:40,890 --> 00:37:44,670
it's a lot of cold<font color="#E5E5E5"> and at some point it</font>

781
00:37:43,110 --> 00:37:47,430
will check if the resources already

782
00:37:44,670 --> 00:37:49,410
compiled on<font color="#CCCCCC"> its already mackage so it</font><font color="#E5E5E5"> we</font>

783
00:37:47,430 --> 00:37:52,589
call the is compiled method and you see

784
00:37:49,410 --> 00:37:55,740
down there it will call the fetch

785
00:37:52,590 --> 00:37:58,620
response info and fetch resource info

786
00:37:55,740 --> 00:38:04,200
will pass a resource name that you<font color="#CCCCCC"> gave</font>

787
00:37:58,620 --> 00:38:06,450
it with your property and yeah and what

788
00:38:04,200 --> 00:38:09,450
you<font color="#E5E5E5"> see</font><font color="#CCCCCC"> here is that the path resource</font>

789
00:38:06,450 --> 00:38:12,000
name we'll split the resource name you

790
00:38:09,450 --> 00:38:17,819
give it and spread it into a resource

791
00:38:12,000 --> 00:38:20,670
type and resource name and then for

792
00:38:17,820 --> 00:38:23,099
every resource type that is defined

793
00:38:20,670 --> 00:38:24,720
it's<font color="#CCCCCC"> possible</font><font color="#E5E5E5"> to define a call back then</font>

794
00:38:23,099 --> 00:38:26,940
it gets called on the on the name and

795
00:38:24,720 --> 00:38:29,160
because we have complete control of the

796
00:38:26,940 --> 00:38:31,920
properties of the sumantti object we can

797
00:38:29,160 --> 00:38:34,770
<font color="#E5E5E5">just put in an arbitrary results we call</font>

798
00:38:31,920 --> 00:38:38,190
<font color="#CCCCCC">X pl4 exploit and you say that the</font>

799
00:38:34,770 --> 00:38:43,410
callback is this which is a<font color="#E5E5E5"> smartie</font>

800
00:38:38,190 --> 00:38:46,440
class and the evil property method so

801
00:38:43,410 --> 00:38:49,558
<font color="#E5E5E5">actually when</font><font color="#CCCCCC"> it splits the resource</font>

802
00:38:46,440 --> 00:38:52,589
name and<font color="#CCCCCC"> we'll take</font><font color="#E5E5E5"> the X PL as type and</font>

803
00:38:49,559 --> 00:38:55,020
everything after that will be<font color="#CCCCCC"> what it</font>

804
00:38:52,589 --> 00:38:58,230
will pass<font color="#E5E5E5"> to this call back so we can</font>

805
00:38:55,020 --> 00:39:01,650
<font color="#E5E5E5">execute arbitrary PHP code and now you</font>

806
00:38:58,230 --> 00:39:02,880
just<font color="#E5E5E5"> need to set this together and when</font>

807
00:39:01,650 --> 00:39:05,520
you see realize that you will get

808
00:39:02,880 --> 00:39:10,829
something like this<font color="#E5E5E5"> and then down below</font>

809
00:39:05,520 --> 00:39:14,339
and yeah when you uncivilized this from

810
00:39:10,829 --> 00:39:16,859
within p week it will execute the PHP

811
00:39:14,339 --> 00:39:18,540
info function in<font color="#E5E5E5"> this case but by just</font>

812
00:39:16,859 --> 00:39:21,089
changing what kind of coat you want to

813
00:39:18,540 --> 00:39:23,940
execute you can change it to whatever

814
00:39:21,089 --> 00:39:27,390
you like<font color="#E5E5E5"> you see in the pic view there</font>

815
00:39:23,940 --> 00:39:30,900
is a template a property and you just

816
00:39:27,390 --> 00:39:34,589
say it's ex PL for the X PL resource you

817
00:39:30,900 --> 00:39:37,079
just injected double point and then the

818
00:39:34,589 --> 00:39:42,450
code you want to execute and you can put

819
00:39:37,079 --> 00:39:45,990
anything you want in there so<font color="#E5E5E5"> okay this</font>

820
00:39:42,450 --> 00:39:48,149
is pubic the problem is<font color="#E5E5E5"> I told you like</font>

821
00:39:45,990 --> 00:39:49,770
there are some applications that

822
00:39:48,150 --> 00:39:52,920
unsterilized user input like<font color="#CCCCCC"> WordPress</font>

823
00:39:49,770 --> 00:39:56,069
but they don't have interesting object

824
00:39:52,920 --> 00:39:58,799
so they have no<font color="#CCCCCC"> distracters no way cups</font>

825
00:39:56,069 --> 00:40:01,020
and so you cannot exploit them with the

826
00:39:58,799 --> 00:40:03,180
property oriented programming way you

827
00:40:01,020 --> 00:40:05,640
need another way and<font color="#E5E5E5"> what you need is a</font>

828
00:40:03,180 --> 00:40:09,569
winner Bertie and the answer lies father

829
00:40:05,640 --> 00:40:11,460
itself and when I show you some use of

830
00:40:09,569 --> 00:40:17,009
the free one ability in the<font color="#E5E5E5"> SPL object</font>

831
00:40:11,460 --> 00:40:20,609
storage class of peach p and this

832
00:40:17,010 --> 00:40:21,860
actually was zero day until like one

833
00:40:20,609 --> 00:40:27,620
months ago and

834
00:40:21,860 --> 00:40:31,130
one week<font color="#E5E5E5"> ago it was fixed so it</font><font color="#CCCCCC"> will not</font>

835
00:40:27,620 --> 00:40:33,680
work on the most neon on the new<font color="#E5E5E5"> pitch</font>

836
00:40:31,130 --> 00:40:38,420
people<font color="#E5E5E5"> but no one is using the latest</font>

837
00:40:33,680 --> 00:40:41,450
Petrie version anyway so the<font color="#E5E5E5"> idea of the</font>

838
00:40:38,420 --> 00:40:44,210
back is that<font color="#E5E5E5"> SPL objects objects stories</font>

839
00:40:41,450 --> 00:40:46,520
is the object map so<font color="#E5E5E5"> you can put objects</font>

840
00:40:44,210 --> 00:40:50,150
into there and map some accelerator to

841
00:40:46,520 --> 00:40:55,009
it so for<font color="#CCCCCC"> example you</font><font color="#E5E5E5"> can put 1 2 3 as</font>

842
00:40:50,150 --> 00:40:58,370
extra data for the<font color="#E5E5E5"> Alpha object and you</font>

843
00:40:55,010 --> 00:41:01,430
put<font color="#CCCCCC"> 54 56</font><font color="#E5E5E5"> for the better object as</font>

844
00:40:58,370 --> 00:41:05,540
accelerator but what<font color="#E5E5E5"> you can also do is</font>

845
00:41:01,430 --> 00:41:09,379
put two different<font color="#CCCCCC"> kinds</font><font color="#E5E5E5"> of data for the</font>

846
00:41:05,540 --> 00:41:12,590
same object so this means you first put

847
00:41:09,380 --> 00:41:15,170
in<font color="#E5E5E5"> 1 2 3 and then 4 5 6 for the same</font>

848
00:41:12,590 --> 00:41:17,900
object what will happen<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> SP</font>

849
00:41:15,170 --> 00:41:21,590
object storage will delete<font color="#CCCCCC"> the old value</font>

850
00:41:17,900 --> 00:41:24,680
in this<font color="#CCCCCC"> guy's</font><font color="#E5E5E5"> one two three so why could</font>

851
00:41:21,590 --> 00:41:27,740
it be a problem a problem is because you

852
00:41:24,680 --> 00:41:30,470
can also inject this inside uncivilized

853
00:41:27,740 --> 00:41:32,540
so you can<font color="#E5E5E5"> use uncivilized to to answer</font>

854
00:41:30,470 --> 00:41:37,549
your lies some SPL object storage thing

855
00:41:32,540 --> 00:41:42,170
and use the same object as key two times

856
00:41:37,550 --> 00:41:45,440
<font color="#E5E5E5">you can do that by using references or</font>

857
00:41:42,170 --> 00:41:47,450
because the actual type of the variable

858
00:41:45,440 --> 00:41:49,760
was not checked in previous PHP version

859
00:41:47,450 --> 00:41:53,779
you can<font color="#E5E5E5"> choose the same integer to two</font>

860
00:41:49,760 --> 00:41:57,530
times what will happen is that in peach

861
00:41:53,780 --> 00:42:04,130
p53 the extra data that was<font color="#E5E5E5"> previously</font>

862
00:41:57,530 --> 00:42:08,390
at the<font color="#E5E5E5"> same key will be deleted so this</font>

863
00:42:04,130 --> 00:42:10,910
<font color="#E5E5E5">is not a problem at all but the deletion</font>

864
00:42:08,390 --> 00:42:13,490
is done inside the<font color="#CCCCCC"> SP object object</font>

865
00:42:10,910 --> 00:42:16,399
storage so uncivilized doesn't know

866
00:42:13,490 --> 00:42:17,870
about it<font color="#E5E5E5"> and uncivilized you remember</font>

867
00:42:16,400 --> 00:42:20,090
there was this variable table that's

868
00:42:17,870 --> 00:42:21,710
used<font color="#E5E5E5"> to</font><font color="#CCCCCC"> reference us and so until</font><font color="#E5E5E5"> eyes</font>

869
00:42:20,090 --> 00:42:27,530
<font color="#E5E5E5">it's still pointed to this variable that</font>

870
00:42:21,710 --> 00:42:30,200
was just freed so when you<font color="#E5E5E5"> now until it</font>

871
00:42:27,530 --> 00:42:33,470
continues to answer your lies and use a

872
00:42:30,200 --> 00:42:35,450
reference to the extra data that was

873
00:42:33,470 --> 00:42:37,850
<font color="#E5E5E5">already freed</font><font color="#CCCCCC"> it's</font>

874
00:42:35,450 --> 00:42:39,350
quickly possible because answer lies

875
00:42:37,850 --> 00:42:41,270
doesn't know<font color="#CCCCCC"> that this variable doesn't</font>

876
00:42:39,350 --> 00:42:43,670
exist anymore<font color="#CCCCCC"> so you can put</font><font color="#E5E5E5"> in</font>

877
00:42:41,270 --> 00:42:48,290
references<font color="#CCCCCC"> to already deleted objects or</font>

878
00:42:43,670 --> 00:42:51,860
classes or whatever arrays<font color="#CCCCCC"> or strings or</font>

879
00:42:48,290 --> 00:42:53,390
anything and now we'll show you<font color="#E5E5E5"> how you</font>

880
00:42:51,860 --> 00:42:58,760
<font color="#CCCCCC">can use this for info leagues and code</font>

881
00:42:53,390 --> 00:43:03,170
execution first of all I remember you of

882
00:42:58,760 --> 00:43:06,080
Tiki Wicki you can have code execution

883
00:43:03,170 --> 00:43:08,360
if the application uncie arises but if

884
00:43:06,080 --> 00:43:10,430
you want like a really<font color="#E5E5E5"> good exploit you</font>

885
00:43:08,360 --> 00:43:12,710
need that the application until eyes it

886
00:43:10,430 --> 00:43:14,480
modifies its see realises again and

887
00:43:12,710 --> 00:43:17,960
gives it you're<font color="#CCCCCC"> giving give us back to</font>

888
00:43:14,480 --> 00:43:23,720
<font color="#CCCCCC">you this worked in</font><font color="#E5E5E5"> this case and take a</font>

889
00:43:17,960 --> 00:43:25,910
wiki this will<font color="#E5E5E5"> also work in</font><font color="#CCCCCC"> pubic or the</font>

890
00:43:23,720 --> 00:43:27,529
old version of pubic that is not

891
00:43:25,910 --> 00:43:29,930
exploitable with property or in the

892
00:43:27,530 --> 00:43:32,120
programming but through this back and it

893
00:43:29,930 --> 00:43:40,430
should also be<font color="#E5E5E5"> possible with up makes</font>

894
00:43:32,120 --> 00:43:42,049
the<font color="#CCCCCC"> most prominent at software so we</font>

895
00:43:40,430 --> 00:43:44,810
will do<font color="#CCCCCC"> league after three attacks um</font>

896
00:43:42,050 --> 00:43:48,560
the basic idea<font color="#CCCCCC"> of league after three</font>

897
00:43:44,810 --> 00:43:51,529
taxes that you<font color="#E5E5E5"> give the application some</font>

898
00:43:48,560 --> 00:43:53,450
serialized data it will uncivilized it

899
00:43:51,530 --> 00:43:57,380
and the uncivilized ation will trigger

900
00:43:53,450 --> 00:43:58,939
the exploit some back somehow and<font color="#CCCCCC"> what</font>

901
00:43:57,380 --> 00:44:01,250
you want to<font color="#E5E5E5"> do is you</font><font color="#CCCCCC"> want to</font><font color="#E5E5E5"> create</font>

902
00:43:58,940 --> 00:44:04,130
some variables in<font color="#CCCCCC"> on serialize and then</font>

903
00:44:01,250 --> 00:44:06,080
free them so there are<font color="#CCCCCC"> a lot of pointers</font>

904
00:44:04,130 --> 00:44:09,410
in the world table that point to non

905
00:44:06,080 --> 00:44:13,610
existing variables and all these

906
00:44:09,410 --> 00:44:17,210
variables are put to the memory cache

907
00:44:13,610 --> 00:44:19,040
the free memory cache the next thing you

908
00:44:17,210 --> 00:44:22,070
want<font color="#E5E5E5"> to do in the uncivilized is to</font>

909
00:44:19,040 --> 00:44:25,370
create a string variable of<font color="#CCCCCC"> the same</font>

910
00:44:22,070 --> 00:44:27,740
length as the<font color="#CCCCCC"> internal data structure</font>

911
00:44:25,370 --> 00:44:31,819
used by PHP to keep track of variables

912
00:44:27,740 --> 00:44:33,500
which is called set value and if you

913
00:44:31,820 --> 00:44:35,510
create a string inside the answer lies

914
00:44:33,500 --> 00:44:37,970
that looks like a fake said well it's

915
00:44:35,510 --> 00:44:41,240
theoretically possible to use it and

916
00:44:37,970 --> 00:44:42,980
because<font color="#CCCCCC"> of the memory cage it will be</font>

917
00:44:41,240 --> 00:44:46,669
allocated<font color="#CCCCCC"> in the same spot as the</font>

918
00:44:42,980 --> 00:44:47,620
previously freight variable and what you

919
00:44:46,670 --> 00:44:50,410
cannot do now

920
00:44:47,620 --> 00:44:52,720
is you can<font color="#E5E5E5"> use the reference in Lance</font>

921
00:44:50,410 --> 00:44:55,390
your lies to create<font color="#CCCCCC"> a reference</font><font color="#E5E5E5"> to the</font>

922
00:44:52,720 --> 00:44:57,790
already freed variable and because

923
00:44:55,390 --> 00:45:00,220
instead of the variable there's no your

924
00:44:57,790 --> 00:45:02,200
string you have<font color="#E5E5E5"> full control about the</font>

925
00:45:00,220 --> 00:45:05,770
the variable that is created inside of

926
00:45:02,200 --> 00:45:07,180
PHP because you have<font color="#E5E5E5"> you actually have</font>

927
00:45:05,770 --> 00:45:09,070
the you can change the binary

928
00:45:07,180 --> 00:45:14,500
representation of the variable in memory

929
00:45:09,070 --> 00:45:16,750
yeah so all<font color="#CCCCCC"> the league after feel text</font>

930
00:45:14,500 --> 00:45:19,420
will work like this and in the end<font color="#E5E5E5"> we</font>

931
00:45:16,750 --> 00:45:23,470
<font color="#E5E5E5">just read real civilized result back and</font>

932
00:45:19,420 --> 00:45:25,510
yeah so what we want<font color="#E5E5E5"> to do first is we</font>

933
00:45:23,470 --> 00:45:28,480
want<font color="#E5E5E5"> to leak arbitrary places in memory</font>

934
00:45:25,510 --> 00:45:31,360
and we can do that with them with the

935
00:45:28,480 --> 00:45:36,160
kind<font color="#E5E5E5"> of attack what we do is we create a</font>

936
00:45:31,360 --> 00:45:38,440
fake string variable inside PHP a string

937
00:45:36,160 --> 00:45:40,390
variable inside PHP<font color="#E5E5E5"> consists of a string</font>

938
00:45:38,440 --> 00:45:44,230
pointer followed by the string length

939
00:45:40,390 --> 00:45:47,770
followed by a reference counter followed

940
00:45:44,230 --> 00:45:50,230
by<font color="#E5E5E5"> the bite 6 which says this is a</font>

941
00:45:47,770 --> 00:45:52,300
string and then followed by<font color="#CCCCCC"> a bite of 0</font>

942
00:45:50,230 --> 00:45:59,890
which says this is<font color="#CCCCCC"> not a copy on write</font>

943
00:45:52,300 --> 00:46:05,380
variable so what we have<font color="#CCCCCC"> here is</font><font color="#E5E5E5"> we have</font>

944
00:45:59,890 --> 00:46:09,879
told PHP that just obviously a string

945
00:46:05,380 --> 00:46:13,660
variable in memory starting at<font color="#CCCCCC"> B 734</font><font color="#E5E5E5"> 21</font>

946
00:46:09,880 --> 00:46:16,420
<font color="#E5E5E5">18 which is a pointer 32-bit quarter and</font>

947
00:46:13,660 --> 00:46:18,640
our page people believe<font color="#CCCCCC"> that if it sees</font>

948
00:46:16,420 --> 00:46:21,340
this variable and the<font color="#E5E5E5"> reference to this</font>

949
00:46:18,640 --> 00:46:23,049
variable and when it modifies now the

950
00:46:21,340 --> 00:46:25,180
uncivilized data and gives you the

951
00:46:23,050 --> 00:46:26,710
serialized form back it will go<font color="#E5E5E5"> to the</font>

952
00:46:25,180 --> 00:46:30,549
string and<font color="#E5E5E5"> see oh yeah I have to take</font>

953
00:46:26,710 --> 00:46:37,570
the two 1024 bytes from this piece of

954
00:46:30,550 --> 00:46:40,840
memory and give<font color="#CCCCCC"> it back</font><font color="#E5E5E5"> to him so to</font>

955
00:46:37,570 --> 00:46:43,870
actually achieve the the attack you just

956
00:46:40,840 --> 00:46:46,870
have to send this little piece of cereal

957
00:46:43,870 --> 00:46:49,960
I stator and what it<font color="#E5E5E5"> does it first it</font>

958
00:46:46,870 --> 00:46:53,259
creates an array of integers then it

959
00:46:49,960 --> 00:46:56,350
frees the the integers freecell race and

960
00:46:53,260 --> 00:46:58,180
distress or the integers this means you

961
00:46:56,350 --> 00:47:00,220
<font color="#E5E5E5">have a lot of free variables right now</font>

962
00:46:58,180 --> 00:47:02,859
and a lot of references

963
00:47:00,220 --> 00:47:07,419
in the bar table<font color="#E5E5E5"> that are pointing to</font>

964
00:47:02,859 --> 00:47:12,670
not allocated memory and now you put up

965
00:47:07,420 --> 00:47:14,230
your<font color="#CCCCCC"> fake set wall and because of the</font>

966
00:47:12,670 --> 00:47:16,090
memory<font color="#E5E5E5"> cages will be allocated in the</font>

967
00:47:14,230 --> 00:47:18,280
same spot of one of the in previously

968
00:47:16,090 --> 00:47:21,099
integer variables and when you then

969
00:47:18,280 --> 00:47:23,680
<font color="#E5E5E5">create a reference to the right variable</font>

970
00:47:21,099 --> 00:47:27,010
to the<font color="#E5E5E5"> right slot of the of the</font><font color="#CCCCCC"> freight</font>

971
00:47:23,680 --> 00:47:29,230
<font color="#CCCCCC">variables then you suddenly have food</font>

972
00:47:27,010 --> 00:47:34,090
PHP that there's a string in memory at

973
00:47:29,230 --> 00:47:35,770
the<font color="#CCCCCC"> data you supplied and when you sent</font>

974
00:47:34,090 --> 00:47:37,450
this<font color="#E5E5E5"> to Tiki Wicki ticket Ricky will</font>

975
00:47:35,770 --> 00:47:40,630
give you something<font color="#CCCCCC"> civilized back and</font>

976
00:47:37,450 --> 00:47:43,598
<font color="#CCCCCC">this</font><font color="#E5E5E5"> will look</font><font color="#CCCCCC"> like this and you see</font>

977
00:47:40,630 --> 00:47:45,369
that there's a lot of garbage but

978
00:47:43,599 --> 00:47:48,550
actually<font color="#CCCCCC"> this is the memory content and</font>

979
00:47:45,369 --> 00:47:51,430
this I think<font color="#CCCCCC"> that</font><font color="#E5E5E5"> was the code segment</font>

980
00:47:48,550 --> 00:47:55,330
it<font color="#CCCCCC"> was yeah it was a code segment of PHP</font>

981
00:47:51,430 --> 00:47:58,149
in this case and of course<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is just</font>

982
00:47:55,330 --> 00:48:00,759
garbage usually get the real<font color="#E5E5E5"> thing so</font>

983
00:47:58,150 --> 00:48:06,339
you have the real bites and you just

984
00:48:00,760 --> 00:48:08,080
have leaked 1024 bytes of the memory the

985
00:48:06,339 --> 00:48:09,670
problem here is of course when you do

986
00:48:08,080 --> 00:48:11,770
when you put in this point on I just

987
00:48:09,670 --> 00:48:14,020
showed you most probably your system

988
00:48:11,770 --> 00:48:17,020
will<font color="#E5E5E5"> crash because your PHP will not be</font>

989
00:48:14,020 --> 00:48:22,000
at the same place so you need a way to

990
00:48:17,020 --> 00:48:24,790
start where to look for and this can be

991
00:48:22,000 --> 00:48:27,640
done with a more complicated way again

992
00:48:24,790 --> 00:48:29,710
you create a fake string but this<font color="#CCCCCC"> time</font>

993
00:48:27,640 --> 00:48:32,618
<font color="#CCCCCC">you put in any pointer you</font><font color="#E5E5E5"> want you</font>

994
00:48:29,710 --> 00:48:35,380
<font color="#E5E5E5">don't care in this case it's 41 41 41 41</font>

995
00:48:32,619 --> 00:48:37,359
and you will do more or less the same

996
00:48:35,380 --> 00:48:41,800
attack it's not<font color="#CCCCCC"> just a little bit more</font>

997
00:48:37,359 --> 00:48:43,810
<font color="#E5E5E5">complicated the idea now is you have</font>

998
00:48:41,800 --> 00:48:46,900
first<font color="#E5E5E5"> to create an array of integers</font>

999
00:48:43,810 --> 00:48:50,770
just to allocate something to make the

1000
00:48:46,900 --> 00:48:52,810
memory cage empty then you again create

1001
00:48:50,770 --> 00:48:54,849
an array of integers that you free

1002
00:48:52,810 --> 00:48:57,009
immediately again so you have all these

1003
00:48:54,849 --> 00:49:04,200
empty spots in the variable table and

1004
00:48:57,010 --> 00:49:04,200
then you create an array that contains

1005
00:49:05,390 --> 00:49:16,069
your fake string and the empty object in

1006
00:49:08,150 --> 00:49:18,440
alternating sequence and then you freed

1007
00:49:16,070 --> 00:49:21,470
it again and this<font color="#CCCCCC"> is very</font><font color="#E5E5E5"> important you</font>

1008
00:49:18,440 --> 00:49:24,380
freeze it again and then you create the

1009
00:49:21,470 --> 00:49:27,410
reference to<font color="#CCCCCC"> two</font><font color="#E5E5E5"> already free thing the</font>

1010
00:49:24,380 --> 00:49:31,010
idea here is the moment<font color="#CCCCCC"> you free the</font>

1011
00:49:27,410 --> 00:49:33,080
fake integer the fake string the first

1012
00:49:31,010 --> 00:49:35,090
four<font color="#E5E5E5"> bytes will be overwritten by the</font>

1013
00:49:33,080 --> 00:49:40,130
memory<font color="#E5E5E5"> cache with a pointer to the</font>

1014
00:49:35,090 --> 00:49:42,620
previously freed memory so you have just

1015
00:49:40,130 --> 00:49:45,680
created the string variables into heap

1016
00:49:42,620 --> 00:49:47,270
because<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have just</font><font color="#E5E5E5"> let the memory</font>

1017
00:49:45,680 --> 00:49:51,169
cage fill out the pointer that you

1018
00:49:47,270 --> 00:49:52,490
wanted for for your for you in an aside

1019
00:49:51,170 --> 00:49:53,840
from that the attack is the<font color="#E5E5E5"> same when</font>

1020
00:49:52,490 --> 00:49:57,109
you send this to Tiki Wicki you get

1021
00:49:53,840 --> 00:49:59,480
<font color="#E5E5E5">something back and this time you will</font>

1022
00:49:57,110 --> 00:50:02,270
take this memory and scan for it you

1023
00:49:59,480 --> 00:50:05,930
will scan for object in there<font color="#E5E5E5"> because</font>

1024
00:50:02,270 --> 00:50:07,640
you<font color="#E5E5E5"> had all the</font><font color="#CCCCCC"> object in memory what</font>

1025
00:50:05,930 --> 00:50:10,700
you will search for us like<font color="#E5E5E5"> four times</font>

1026
00:50:07,640 --> 00:50:13,339
<font color="#E5E5E5">zero followed by five followed by zero</font>

1027
00:50:10,700 --> 00:50:18,770
because this is the the pattern that you

1028
00:50:13,340 --> 00:50:20,990
they will<font color="#E5E5E5"> help you to find empty no</font>

1029
00:50:18,770 --> 00:50:24,500
already<font color="#E5E5E5"> freed objects because reference</font>

1030
00:50:20,990 --> 00:50:26,600
count is 0 so and it's an object so when

1031
00:50:24,500 --> 00:50:29,300
you find this in memory you assume that

1032
00:50:26,600 --> 00:50:31,700
<font color="#E5E5E5">the four bytes before our pointer to the</font>

1033
00:50:29,300 --> 00:50:34,520
object<font color="#E5E5E5"> handlers and the object handlers</font>

1034
00:50:31,700 --> 00:50:37,520
is a table usually in the data<font color="#E5E5E5"> segment</font>

1035
00:50:34,520 --> 00:50:39,380
especially for peach p internal object

1036
00:50:37,520 --> 00:50:44,240
is always in the<font color="#E5E5E5"> PHP data segment and</font>

1037
00:50:39,380 --> 00:50:46,910
yeah so I just going<font color="#E5E5E5"> through the memory</font>

1038
00:50:44,240 --> 00:50:49,069
just leaked you can find out where the

1039
00:50:46,910 --> 00:50:50,810
data<font color="#CCCCCC"> segment</font><font color="#E5E5E5"> of peach peers at least on</font>

1040
00:50:49,070 --> 00:50:54,830
the the one<font color="#CCCCCC"> struck</font><font color="#E5E5E5"> that you are</font>

1041
00:50:50,810 --> 00:50:57,200
interested we now and it's a previously

1042
00:50:54,830 --> 00:50:59,330
<font color="#CCCCCC">attack that allows you to to leak</font>

1043
00:50:57,200 --> 00:51:02,210
anything you can just grab the memory at

1044
00:50:59,330 --> 00:51:04,100
this place read in the<font color="#CCCCCC"> hunter table and</font>

1045
00:51:02,210 --> 00:51:07,520
in the<font color="#CCCCCC"> end the table you have a lot of</font>

1046
00:51:04,100 --> 00:51:10,790
pointers in the code segment of PHP so

1047
00:51:07,520 --> 00:51:13,220
what you<font color="#CCCCCC"> have now is you know where some</font>

1048
00:51:10,790 --> 00:51:16,730
places of PHP I'm memory

1049
00:51:13,220 --> 00:51:17,868
the code<font color="#E5E5E5"> segment in the data segment the</font>

1050
00:51:16,730 --> 00:51:21,530
code the code segment is more

1051
00:51:17,869 --> 00:51:24,349
interesting because once you have the

1052
00:51:21,530 --> 00:51:27,440
code segment the pointer inside the code

1053
00:51:24,349 --> 00:51:30,770
segment of PHP you can just go backward

1054
00:51:27,440 --> 00:51:34,730
page by page until you<font color="#CCCCCC"> hit the</font>

1055
00:51:30,770 --> 00:51:37,190
executable header in case of Linux it

1056
00:51:34,730 --> 00:51:38,450
will be an e LF header and we're in

1057
00:51:37,190 --> 00:51:41,240
windows will build a portable executable

1058
00:51:38,450 --> 00:51:43,040
header but<font color="#E5E5E5"> from now we concentrate on</font>

1059
00:51:41,240 --> 00:51:45,740
Linux so it will<font color="#CCCCCC"> be a kneeler fed up and</font>

1060
00:51:43,040 --> 00:51:48,020
you can just read the header because you

1061
00:51:45,740 --> 00:51:50,270
can leak anything so<font color="#E5E5E5"> you can leak all</font>

1062
00:51:48,020 --> 00:51:52,790
these structures inside the LF header

1063
00:51:50,270 --> 00:51:55,940
and you can<font color="#E5E5E5"> actually steal the whole</font>

1064
00:51:52,790 --> 00:51:59,240
binary remotely you can just grab every

1065
00:51:55,940 --> 00:52:02,300
piece of the<font color="#CCCCCC"> binary and get it through</font>

1066
00:51:59,240 --> 00:52:03,799
tikiwiki on your own your server and of

1067
00:52:02,300 --> 00:52:05,720
<font color="#E5E5E5">course when you have a binary you can</font>

1068
00:52:03,800 --> 00:52:07,940
look up all these<font color="#E5E5E5"> symbols in memory you</font>

1069
00:52:05,720 --> 00:52:11,270
can you know where which function of PHP

1070
00:52:07,940 --> 00:52:15,200
is and you<font color="#CCCCCC"> can also go through other</font>

1071
00:52:11,270 --> 00:52:17,270
modules for example PHP is linked<font color="#E5E5E5"> to the</font>

1072
00:52:15,200 --> 00:52:19,790
<font color="#CCCCCC">Apache modules so you can find the</font>

1073
00:52:17,270 --> 00:52:22,070
Apache core and with the Apache core you

1074
00:52:19,790 --> 00:52:24,320
can<font color="#CCCCCC"> find the other loaded Apache modules</font>

1075
00:52:22,070 --> 00:52:26,900
for example mod ssl and from there<font color="#CCCCCC"> you</font>

1076
00:52:24,320 --> 00:52:29,630
can steal the private ssl key from

1077
00:52:26,900 --> 00:52:33,050
memory but you can also use<font color="#E5E5E5"> this</font>

1078
00:52:29,630 --> 00:52:39,920
information to create a code execution

1079
00:52:33,050 --> 00:52:46,099
exploit<font color="#CCCCCC"> I will show you that now so the</font>

1080
00:52:39,920 --> 00:52:48,530
ideas yeah the idea is to<font color="#E5E5E5"> do the code</font>

1081
00:52:46,099 --> 00:52:51,320
execution exploiters you first need to

1082
00:52:48,530 --> 00:52:52,880
know the<font color="#CCCCCC"> location of the</font><font color="#E5E5E5"> stack we have</font>

1083
00:52:51,320 --> 00:52:55,099
steak is usually completely randomized

1084
00:52:52,880 --> 00:52:57,410
even more than all the other things so

1085
00:52:55,099 --> 00:52:59,780
it's really hard to find the stack but

1086
00:52:57,410 --> 00:53:01,730
you can already look up any symbol in

1087
00:52:59,780 --> 00:53:04,220
PHP so what you do is you look up<font color="#CCCCCC"> the</font>

1088
00:53:01,730 --> 00:53:06,859
executor<font color="#CCCCCC"> Global's and the executor</font>

1089
00:53:04,220 --> 00:53:09,109
<font color="#E5E5E5">executor</font><font color="#CCCCCC"> Global's</font><font color="#E5E5E5"> like I think its</font>

1090
00:53:06,859 --> 00:53:11,839
biggest no second biggest struct inside

1091
00:53:09,109 --> 00:53:15,770
of PHP and one of these entries is to

1092
00:53:11,839 --> 00:53:19,369
jump off the jump off is the data used

1093
00:53:15,770 --> 00:53:23,750
by set jump and long jump and PHP uses

1094
00:53:19,369 --> 00:53:24,800
for a<font color="#E5E5E5"> Malaysian of try-catch at the sea</font>

1095
00:53:23,750 --> 00:53:27,950
level

1096
00:53:24,800 --> 00:53:29,810
and all you<font color="#E5E5E5"> can do is you can find the</font>

1097
00:53:27,950 --> 00:53:32,540
<font color="#CCCCCC">jump-off pointer and this jump of</font>

1098
00:53:29,810 --> 00:53:33,770
pointer is stolen a stack so if you find

1099
00:53:32,540 --> 00:53:36,140
<font color="#CCCCCC">a jump-off point that you have an</font>

1100
00:53:33,770 --> 00:53:37,790
address in the stack and of course from

1101
00:53:36,140 --> 00:53:40,970
<font color="#E5E5E5">there you can leak up and down as much</font>

1102
00:53:37,790 --> 00:53:44,690
as<font color="#E5E5E5"> you want</font><font color="#CCCCCC"> okay until you hit like a</font>

1103
00:53:40,970 --> 00:53:46,549
page that<font color="#E5E5E5"> is not allocated the second</font>

1104
00:53:44,690 --> 00:53:49,130
<font color="#E5E5E5">thing is you want to know to have</font>

1105
00:53:46,550 --> 00:53:50,900
control<font color="#E5E5E5"> of the stack because you want to</font>

1106
00:53:49,130 --> 00:53:54,530
put some data structure on the stack

1107
00:53:50,900 --> 00:53:56,300
that you can use for your attack and PHP

1108
00:53:54,530 --> 00:53:58,760
is actually very simple to get<font color="#E5E5E5"> control</font>

1109
00:53:56,300 --> 00:54:01,730
of some piece of the stack because you

1110
00:53:58,760 --> 00:54:06,560
can<font color="#E5E5E5"> send in a special type of post</font>

1111
00:54:01,730 --> 00:54:08,570
request which is the RFC 1867 multi-part

1112
00:54:06,560 --> 00:54:12,770
form data which is<font color="#E5E5E5"> used</font><font color="#CCCCCC"> for file uploads</font>

1113
00:54:08,570 --> 00:54:14,870
and when you do an upload like this the

1114
00:54:12,770 --> 00:54:17,120
plaza will use<font color="#CCCCCC"> some stack buffers and</font>

1115
00:54:14,870 --> 00:54:22,970
the stack ruffles are very big and

1116
00:54:17,120 --> 00:54:26,509
they're in a way on<font color="#E5E5E5"> the stack that the</font>

1117
00:54:22,970 --> 00:54:28,759
functions coming afterwards<font color="#E5E5E5"> will not</font>

1118
00:54:26,510 --> 00:54:30,440
completely<font color="#E5E5E5"> over</font><font color="#CCCCCC"> write them because the</font>

1119
00:54:28,760 --> 00:54:32,900
function afterwards we'll also have big

1120
00:54:30,440 --> 00:54:36,290
stack Parker buffers so there is<font color="#CCCCCC"> always</font>

1121
00:54:32,900 --> 00:54:39,320
a big slot that is never over<font color="#CCCCCC"> written so</font>

1122
00:54:36,290 --> 00:54:40,790
if you can find<font color="#E5E5E5"> it and put an arbitrary</font>

1123
00:54:39,320 --> 00:54:42,620
data in there you have injected

1124
00:54:40,790 --> 00:54:46,759
arbitrary data to a known location on

1125
00:54:42,620 --> 00:54:49,160
the stack so what you do is you put in

1126
00:54:46,760 --> 00:54:52,520
like a post request with a special

1127
00:54:49,160 --> 00:54:55,220
layout and put in your pattern and then

1128
00:54:52,520 --> 00:54:57,080
you search just<font color="#E5E5E5"> a pattern in your we are</font>

1129
00:54:55,220 --> 00:54:59,480
the leaking and then you know the

1130
00:54:57,080 --> 00:55:03,290
<font color="#CCCCCC">address of this stack buffer and because</font>

1131
00:54:59,480 --> 00:55:07,430
in PHP module it's all forked from

1132
00:55:03,290 --> 00:55:08,690
Apache in<font color="#CCCCCC"> the non thread way and the</font>

1133
00:55:07,430 --> 00:55:14,810
stick will always be<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> same</font><font color="#CCCCCC"> place</font>

1134
00:55:08,690 --> 00:55:16,490
so all<font color="#E5E5E5"> you do not how would you have</font>

1135
00:55:14,810 --> 00:55:19,460
known as you have to you have a known

1136
00:55:16,490 --> 00:55:23,450
location on the stack that contains<font color="#CCCCCC"> your</font>

1137
00:55:19,460 --> 00:55:25,940
data and what you want to<font color="#E5E5E5"> do now</font><font color="#CCCCCC"> is you</font>

1138
00:55:23,450 --> 00:55:27,890
want to<font color="#E5E5E5"> create a fake object you saw how</font>

1139
00:55:25,940 --> 00:55:30,770
we created fake string fake objects are

1140
00:55:27,890 --> 00:55:32,089
well that's the same and once you have

1141
00:55:30,770 --> 00:55:34,550
created a fake objects you want to

1142
00:55:32,090 --> 00:55:36,640
destroy<font color="#CCCCCC"> it the reason for that</font><font color="#E5E5E5"> is when</font>

1143
00:55:34,550 --> 00:55:39,250
variable is destroyed that

1144
00:55:36,640 --> 00:55:42,578
call this set Baldy to a funk in the<font color="#E5E5E5"> end</font>

1145
00:55:39,250 --> 00:55:45,130
and in case<font color="#CCCCCC"> of objects it will go to the</font>

1146
00:55:42,579 --> 00:55:47,140
object<font color="#E5E5E5"> handle table and uses the second</font>

1147
00:55:45,130 --> 00:55:52,779
handler<font color="#CCCCCC"> the dell ref</font><font color="#E5E5E5"> handler and will</font>

1148
00:55:47,140 --> 00:55:55,629
delete<font color="#CCCCCC"> it when</font><font color="#E5E5E5"> you look at the assembly</font>

1149
00:55:52,779 --> 00:56:01,000
you will see that when this is called

1150
00:55:55,630 --> 00:56:03,670
<font color="#E5E5E5">the</font><font color="#CCCCCC"> e SI ya es</font><font color="#E5E5E5"> i read registers actually</font>

1151
00:56:01,000 --> 00:56:05,589
pointing to your fake object and the<font color="#CCCCCC"> eax</font>

1152
00:56:03,670 --> 00:56:08,799
register is pointing to the handful

1153
00:56:05,589 --> 00:56:13,480
table so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the table in stack that</font>

1154
00:56:08,799 --> 00:56:15,849
you control so the idea<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the exploit</font>

1155
00:56:13,480 --> 00:56:17,289
is very simple you<font color="#CCCCCC"> have an object</font>

1156
00:56:15,849 --> 00:56:20,140
entered table which is actually your

1157
00:56:17,289 --> 00:56:23,289
data on the stack and the second entry

1158
00:56:20,140 --> 00:56:26,348
is your<font color="#E5E5E5"> del ref handler and you will put</font>

1159
00:56:23,289 --> 00:56:30,700
the dell revenge on to an exchange<font color="#E5E5E5"> eax</font>

1160
00:56:26,349 --> 00:56:33,010
asp followed by a red you<font color="#CCCCCC"> can search</font>

1161
00:56:30,700 --> 00:56:34,960
that by leaking the code<font color="#E5E5E5"> segment of PHP</font>

1162
00:56:33,010 --> 00:56:40,630
remotely so you can find it<font color="#E5E5E5"> in memory</font>

1163
00:56:34,960 --> 00:56:44,890
and because the handler table is pointed

1164
00:56:40,630 --> 00:56:47,920
to by<font color="#CCCCCC"> eax the exchange x ESP will change</font>

1165
00:56:44,890 --> 00:56:50,440
the stack pointer into your buffer and

1166
00:56:47,920 --> 00:56:55,750
from there<font color="#CCCCCC"> you can just do the normal</font>

1167
00:56:50,440 --> 00:56:57,970
return oriented programming so let's

1168
00:56:55,750 --> 00:57:02,529
will look like this<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have a</font><font color="#E5E5E5"> fake</font>

1169
00:56:57,970 --> 00:57:05,919
variable in this case it's an object an

1170
00:57:02,529 --> 00:57:08,710
object is identified by the five not 26

1171
00:57:05,920 --> 00:57:13,450
x 25 you put in the reference count of

1172
00:57:08,710 --> 00:57:15,490
minus<font color="#CCCCCC"> 1 so that it will be afraid you</font>

1173
00:57:13,450 --> 00:57:17,680
put in the<font color="#CCCCCC"> object handlers pointer will</font>

1174
00:57:15,490 --> 00:57:21,220
be appointed to the stack location you

1175
00:57:17,680 --> 00:57:25,299
just leaked and controlled and the

1176
00:57:21,220 --> 00:57:27,098
object handle can<font color="#CCCCCC"> be anything and what</font>

1177
00:57:25,299 --> 00:57:31,180
you do now is actually you do the same

1178
00:57:27,099 --> 00:57:33,640
attack justjust time you don't put in a

1179
00:57:31,180 --> 00:57:35,950
string a fake string you use the<font color="#E5E5E5"> same</font>

1180
00:57:33,640 --> 00:57:38,740
code just to put in the<font color="#CCCCCC"> object</font><font color="#E5E5E5"> you just</font>

1181
00:57:35,950 --> 00:57:44,649
replace a string and you can use the the

1182
00:57:38,740 --> 00:57:48,189
previously shown buffers for that so

1183
00:57:44,650 --> 00:57:51,250
what will happen<font color="#CCCCCC"> now is at the end of</font>

1184
00:57:48,190 --> 00:57:53,349
the lifetime of this data structure you

1185
00:57:51,250 --> 00:58:00,579
created with unsterilized this object

1186
00:57:53,349 --> 00:58:02,950
will be destroyed and the instructor we

1187
00:58:00,579 --> 00:58:05,980
go to<font color="#E5E5E5"> the object handful table which is</font>

1188
00:58:02,950 --> 00:58:10,450
your stack buffer and take the second

1189
00:58:05,980 --> 00:58:14,380
data entry and we'll call it you see

1190
00:58:10,450 --> 00:58:17,169
what we do is we just have an address

1191
00:58:14,380 --> 00:58:19,720
there that points to exchange<font color="#E5E5E5"> eax ESP</font>

1192
00:58:17,170 --> 00:58:22,660
and the rat so after<font color="#E5E5E5"> the after the</font>

1193
00:58:19,720 --> 00:58:25,868
exchange ESP the<font color="#CCCCCC"> stack pointer will be</font>

1194
00:58:22,660 --> 00:58:30,519
<font color="#E5E5E5">the firt pointing to the first slot of</font>

1195
00:58:25,869 --> 00:58:33,640
your buffing so what you do there is you

1196
00:58:30,519 --> 00:58:35,439
put something more in there you want to

1197
00:58:33,640 --> 00:58:37,480
have a normal return<font color="#CCCCCC"> rental programming</font>

1198
00:58:35,440 --> 00:58:40,630
thing here so<font color="#CCCCCC"> what you need to do now is</font>

1199
00:58:37,480 --> 00:58:43,839
adjust the stack pointer and you just do

1200
00:58:40,630 --> 00:58:47,740
that<font color="#CCCCCC"> by returning into a pop and rat</font>

1201
00:58:43,839 --> 00:58:50,890
which is very easy to find because it's

1202
00:58:47,740 --> 00:58:57,368
<font color="#E5E5E5">all over the colon PHP and after that</font>

1203
00:58:50,890 --> 00:59:01,058
you will actually<font color="#CCCCCC"> return to the code</font>

1204
00:58:57,369 --> 00:59:03,430
stored in the third slot to<font color="#CCCCCC"> the to the</font>

1205
00:59:01,059 --> 00:59:06,519
point of stolen<font color="#E5E5E5"> asserts lot and what we</font>

1206
00:59:03,430 --> 00:59:10,598
do is<font color="#E5E5E5"> we will put in the address</font><font color="#CCCCCC"> I'll</font>

1207
00:59:06,519 --> 00:59:12,758
send<font color="#E5E5E5"> evil string and this is just a</font>

1208
00:59:10,599 --> 00:59:17,109
normal return to lipsy way to call a

1209
00:59:12,759 --> 00:59:19,420
function and the<font color="#E5E5E5"> sender will string at</font>

1210
00:59:17,109 --> 00:59:21,069
three parameters the first one is the

1211
00:59:19,420 --> 00:59:24,099
actual peach peacoat it's supposed to be

1212
00:59:21,069 --> 00:59:28,210
<font color="#CCCCCC">evaluated the second one is a null</font>

1213
00:59:24,099 --> 00:59:30,250
pointer in this case but because it

1214
00:59:28,210 --> 00:59:32,619
should be the pointer pointing to the

1215
00:59:30,250 --> 00:59:37,450
return value but we don't need to return

1216
00:59:32,619 --> 00:59:39,279
value so you put in null and yet the

1217
00:59:37,450 --> 00:59:41,200
third one must<font color="#E5E5E5"> be a pointer to reachable</font>

1218
00:59:39,279 --> 00:59:44,650
memory and we just put<font color="#CCCCCC"> in the same point</font>

1219
00:59:41,200 --> 00:59:48,700
at the peach p.m. for string and again

1220
00:59:44,650 --> 00:59:50,710
this all<font color="#E5E5E5"> is in the region</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> stack</font>

1221
00:59:48,700 --> 00:59:51,078
you completely know everything about you

1222
00:59:50,710 --> 00:59:54,259
<font color="#CCCCCC">know</font>

1223
00:59:51,079 --> 00:59:56,359
the start address and the end of this so

1224
00:59:54,259 --> 01:00:00,650
you know where the<font color="#CCCCCC"> PHP info string is</font>

1225
00:59:56,359 --> 01:00:04,098
and this all only because you have put

1226
01:00:00,650 --> 01:00:06,349
it with the post data powder in the

1227
01:00:04,099 --> 01:00:09,680
right spot and the other thing<font color="#E5E5E5"> is null</font>

1228
01:00:06,349 --> 01:00:10,999
boys are no problem here because you can

1229
01:00:09,680 --> 01:00:14,899
also put another book<font color="#CCCCCC"> no bites</font><font color="#E5E5E5"> in the</font>

1230
01:00:10,999 --> 01:00:17,180
opposed request yeah and<font color="#E5E5E5"> for</font>

1231
01:00:14,900 --> 01:00:21,079
completeness what you would do put in<font color="#E5E5E5"> an</font>

1232
01:00:17,180 --> 01:00:24,019
empty slot is the<font color="#CCCCCC"> same payload function</font>

1233
01:00:21,079 --> 01:00:26,150
so that when you return from the

1234
01:00:24,019 --> 01:00:28,609
executor PHP code you would end up and

1235
01:00:26,150 --> 01:00:36,229
send bailed anyway this would crash

1236
01:00:28,609 --> 01:00:40,880
because the address this is in a place

1237
01:00:36,229 --> 01:00:43,189
where I told you<font color="#CCCCCC"> about the jump off</font><font color="#E5E5E5"> the</font>

1238
01:00:40,880 --> 01:00:45,680
<font color="#CCCCCC">jump off</font><font color="#E5E5E5"> is a</font><font color="#CCCCCC"> try-catch around all the</font>

1239
01:00:43,190 --> 01:00:47,719
execution of PHP and Winston bear all

1240
01:00:45,680 --> 01:00:50,479
those<font color="#CCCCCC"> curves called</font><font color="#E5E5E5"> it reduces started</font>

1241
01:00:47,719 --> 01:00:53,719
to jump off<font color="#E5E5E5"> to</font><font color="#CCCCCC"> to restore the</font><font color="#E5E5E5"> indus tech</font>

1242
01:00:50,479 --> 01:00:55,578
value and the problem here<font color="#E5E5E5"> is that we</font>

1243
01:00:53,719 --> 01:01:01,849
are<font color="#CCCCCC"> in a way in a place of the stack</font>

1244
01:00:55,579 --> 01:01:04,759
that's already above the jump<font color="#E5E5E5"> off so the</font>

1245
01:01:01,849 --> 01:01:07,219
jump up gonna work what will happen is

1246
01:01:04,759 --> 01:01:09,170
the PHP code will be executed and after

1247
01:01:07,219 --> 01:01:11,630
<font color="#E5E5E5">all</font><font color="#CCCCCC"> it will crash you can of course</font>

1248
01:01:09,170 --> 01:01:13,489
right make the<font color="#E5E5E5"> computer the expert more</font>

1249
01:01:11,630 --> 01:01:15,829
complicated to move it back down words

1250
01:01:13,489 --> 01:01:18,739
to the stack so that you don't overwrite

1251
01:01:15,829 --> 01:01:20,269
the jump off with the PHP code but this

1252
01:01:18,739 --> 01:01:26,539
the easy way your code will be executed

1253
01:01:20,269 --> 01:01:28,399
by<font color="#E5E5E5"> the end of</font><font color="#CCCCCC"> the crash so there was a</font>

1254
01:01:26,539 --> 01:01:31,150
talk for now so i will<font color="#E5E5E5"> show you</font><font color="#CCCCCC"> in this</font>

1255
01:01:28,400 --> 01:01:31,150
simple demo

1256
01:01:35,040 --> 01:01:46,529
actually it's not so spectacular<font color="#E5E5E5"> because</font>

1257
01:01:40,530 --> 01:01:49,770
so the first thing<font color="#E5E5E5"> I show you is how i</font>

1258
01:01:46,530 --> 01:01:51,510
create these exploits for return

1259
01:01:49,770 --> 01:01:55,170
oriented pro property oriented

1260
01:01:51,510 --> 01:02:01,320
programming what<font color="#CCCCCC"> I do</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> I will select</font>

1261
01:01:55,170 --> 01:02:06,240
the<font color="#CCCCCC"> classes I wanted to use I told</font><font color="#E5E5E5"> you I</font>

1262
01:02:01,320 --> 01:02:08,280
use a scent Lok i will create all the

1263
01:02:06,240 --> 01:02:10,560
properties in the class with<font color="#CCCCCC"> the same</font>

1264
01:02:08,280 --> 01:02:12,930
accessory structions as in the original

1265
01:02:10,560 --> 01:02:14,640
class because must be up the same time

1266
01:02:12,930 --> 01:02:16,109
otherwise the answer<font color="#E5E5E5"> lies will not</font>

1267
01:02:14,640 --> 01:02:20,970
overwrite the rights of property and

1268
01:02:16,110 --> 01:02:23,010
then<font color="#CCCCCC"> I will fill the constructor with ya</font>

1269
01:02:20,970 --> 01:02:25,230
with something<font color="#CCCCCC"> that fills the properties</font>

1270
01:02:23,010 --> 01:02:27,840
in a way that the<font color="#E5E5E5"> exploit works in this</font>

1271
01:02:25,230 --> 01:02:30,060
case we remember the writers property it

1272
01:02:27,840 --> 01:02:34,650
has to be filled with a list of writers

1273
01:02:30,060 --> 01:02:37,470
and in this case I just<font color="#E5E5E5"> instant this</font>

1274
01:02:34,650 --> 01:02:39,150
class which i defined here and again<font color="#E5E5E5"> i</font>

1275
01:02:37,470 --> 01:02:41,730
have put in the properties i want to

1276
01:02:39,150 --> 01:02:45,270
have in the<font color="#E5E5E5"> constructor i create the</font>

1277
01:02:41,730 --> 01:02:48,360
specific objects or put in the right

1278
01:02:45,270 --> 01:02:49,920
data and again the sent mail class

1279
01:02:48,360 --> 01:02:51,780
doesn't need to any property at all in

1280
01:02:49,920 --> 01:02:55,020
this case because<font color="#CCCCCC"> i just want a dummy</font>

1281
01:02:51,780 --> 01:02:57,090
class so in just an empty class but the

1282
01:02:55,020 --> 01:03:00,000
<font color="#E5E5E5">pubic view again define the template in</font>

1283
01:02:57,090 --> 01:03:02,760
a smart and the<font color="#E5E5E5"> smarty object you see</font><font color="#CCCCCC"> i</font>

1284
01:03:00,000 --> 01:03:05,100
create a<font color="#CCCCCC"> smarty object and in the temple</font>

1285
01:03:02,760 --> 01:03:07,020
i put in the PHP code and in this case I

1286
01:03:05,100 --> 01:03:10,110
was very lazy and put in the global

1287
01:03:07,020 --> 01:03:12,030
variable pitch peacoat in there and yeah

1288
01:03:10,110 --> 01:03:13,740
<font color="#E5E5E5">this part in the smarty again will</font>

1289
01:03:12,030 --> 01:03:18,510
define<font color="#CCCCCC"> the properties that</font><font color="#E5E5E5"> are required</font>

1290
01:03:13,740 --> 01:03:20,189
to hit the code and<font color="#E5E5E5"> yeah in the</font>

1291
01:03:18,510 --> 01:03:22,860
constructor<font color="#E5E5E5"> I will just create this</font>

1292
01:03:20,190 --> 01:03:26,160
special resource XP<font color="#CCCCCC"> l and set the output</font>

1293
01:03:22,860 --> 01:03:27,870
filter to to an empty array because<font color="#CCCCCC"> i</font>

1294
01:03:26,160 --> 01:03:35,190
don't want an elevator right now and

1295
01:03:27,870 --> 01:03:38,609
here<font color="#E5E5E5"> just tell the the</font><font color="#CCCCCC"> callback for the</font>

1296
01:03:35,190 --> 01:03:43,140
XP<font color="#CCCCCC"> el resource is this object which is</font>

1297
01:03:38,610 --> 01:03:47,190
piglets<font color="#CCCCCC"> marty and the evil net method</font>

1298
01:03:43,140 --> 01:03:50,160
here and then i can define the PHP code

1299
01:03:47,190 --> 01:03:55,770
<font color="#CCCCCC">i want in this case it's PHP f 0 and</font>

1300
01:03:50,160 --> 01:03:59,100
then i initiate the<font color="#E5E5E5"> scent Lok put this</font>

1301
01:03:55,770 --> 01:04:01,350
all into an array the first element will

1302
01:03:59,100 --> 01:04:03,960
be<font color="#E5E5E5"> the</font><font color="#CCCCCC"> the payload and the second</font>

1303
01:04:01,350 --> 01:04:09,000
element will be<font color="#CCCCCC"> our just any value</font><font color="#E5E5E5"> I</font>

1304
01:04:03,960 --> 01:04:12,000
will see<font color="#E5E5E5"> realize it and then there's a</font>

1305
01:04:09,000 --> 01:04:17,340
little trick<font color="#E5E5E5"> I replace the serialized</font>

1306
01:04:12,000 --> 01:04:20,520
999 with a<font color="#CCCCCC"> zero the idea here is I</font>

1307
01:04:17,340 --> 01:04:23,100
already<font color="#E5E5E5"> have a zero which</font><font color="#CCCCCC"> is on my</font>

1308
01:04:20,520 --> 01:04:25,770
payload and if I put a net another zero

1309
01:04:23,100 --> 01:04:30,509
in there and that will get uncivilized

1310
01:04:25,770 --> 01:04:32,850
then it will answer lies all the payload

1311
01:04:30,510 --> 01:04:34,200
and in the end<font color="#E5E5E5"> it will put in the second</font>

1312
01:04:32,850 --> 01:04:36,569
element to the array and the second

1313
01:04:34,200 --> 01:04:40,140
element will also be key 0 so it<font color="#E5E5E5"> will</font>

1314
01:04:36,570 --> 01:04:42,600
delete the<font color="#E5E5E5"> first one so I can ensure by</font>

1315
01:04:40,140 --> 01:04:44,100
manipulating the<font color="#E5E5E5"> 0s data here that at</font>

1316
01:04:42,600 --> 01:04:47,160
the end of the<font color="#CCCCCC"> answer lies all the</font>

1317
01:04:44,100 --> 01:04:50,549
<font color="#E5E5E5">payload is distracted and this is</font>

1318
01:04:47,160 --> 01:04:53,850
sometimes<font color="#E5E5E5"> required because otherwise you</font>

1319
01:04:50,550 --> 01:04:57,780
made my might hit a fatal error or an

1320
01:04:53,850 --> 01:05:02,130
exception and this will end up in peach

1321
01:04:57,780 --> 01:05:04,710
p terminating the request in unsafe way

1322
01:05:02,130 --> 01:05:07,530
and so your<font color="#CCCCCC"> district will never be</font>

1323
01:05:04,710 --> 01:05:10,020
called so you have to ensure<font color="#CCCCCC"> that the</font>

1324
01:05:07,530 --> 01:05:11,910
destructors call in the end<font color="#E5E5E5"> here and</font>

1325
01:05:10,020 --> 01:05:14,370
then because<font color="#E5E5E5"> I was</font><font color="#CCCCCC"> very lazy at this</font>

1326
01:05:11,910 --> 01:05:19,410
time I<font color="#E5E5E5"> just create a get request</font><font color="#CCCCCC"> i</font>

1327
01:05:14,370 --> 01:05:22,950
<font color="#CCCCCC">equals ours the hostess t-test system in</font>

1328
01:05:19,410 --> 01:05:29,720
this case the cookie public off which is

1329
01:05:22,950 --> 01:05:29,720
<font color="#E5E5E5">x</font><font color="#CCCCCC"> equals the base64</font><font color="#E5E5E5"> encoded exploit</font>

1330
01:05:30,140 --> 01:05:36,379
yeah and actually I ensure i patched my

1331
01:05:34,730 --> 01:05:37,970
pubic it's the latest version but I

1332
01:05:36,380 --> 01:05:40,970
patched it back to not half of the

1333
01:05:37,970 --> 01:05:42,529
<font color="#E5E5E5">blacklist so all the expert here will</font>

1334
01:05:40,970 --> 01:05:45,618
not tell<font color="#CCCCCC"> you anything how to bypass the</font>

1335
01:05:42,529 --> 01:05:47,539
blacklist<font color="#CCCCCC"> you would have</font><font color="#E5E5E5"> to do something</font>

1336
01:05:45,619 --> 01:05:50,029
to the<font color="#E5E5E5"> serialize string afterward after</font>

1337
01:05:47,539 --> 01:05:51,829
this year so you have to like three or

1338
01:05:50,029 --> 01:05:58,990
four modifications when you do that it

1339
01:05:51,829 --> 01:05:58,990
was the work but<font color="#E5E5E5"> I don't show you so</font>

1340
01:06:03,849 --> 01:06:05,849
uh

1341
01:06:06,030 --> 01:06:12,870
you shouldn't see that clear so what I

1342
01:06:10,770 --> 01:06:15,600
do is I<font color="#E5E5E5"> will show you when I just</font>

1343
01:06:12,870 --> 01:06:17,790
execute the exploit it will create<font color="#CCCCCC"> the</font>

1344
01:06:15,600 --> 01:06:24,569
header which is all the serialized data

1345
01:06:17,790 --> 01:06:27,810
and yeah and now<font color="#E5E5E5"> I will just use</font><font color="#CCCCCC"> net cut</font>

1346
01:06:24,570 --> 01:06:30,570
to pipe it to net cut and you will see

1347
01:06:27,810 --> 01:06:32,549
<font color="#E5E5E5">oh it executed when you when you know</font>

1348
01:06:30,570 --> 01:06:34,890
PHP use you know<font color="#E5E5E5"> that this looks very</font>

1349
01:06:32,550 --> 01:06:37,680
<font color="#E5E5E5">much where's the mouse it looks</font><font color="#CCCCCC"> very</font>

1350
01:06:34,890 --> 01:06:41,069
much like a PHP info and yeah it is a

1351
01:06:37,680 --> 01:06:44,370
PHP info so we executed PHP info on the

1352
01:06:41,070 --> 01:06:53,100
target<font color="#E5E5E5"> system and now I would just go</font>

1353
01:06:44,370 --> 01:06:57,200
back to<font color="#CCCCCC"> the source code</font><font color="#E5E5E5"> and change the</font>

1354
01:06:53,100 --> 01:06:57,200
decode that is executed

1355
01:06:59,630 --> 01:07:07,430
yeah again I do the pivot export which

1356
01:07:04,820 --> 01:07:11,720
will be this time a different string and

1357
01:07:07,430 --> 01:07:14,960
now I<font color="#CCCCCC"> pipe it again and you see it</font>

1358
01:07:11,720 --> 01:07:20,330
executed system comment you name a and

1359
01:07:14,960 --> 01:07:21,830
use urban ID and by<font color="#CCCCCC"> just changing this</font>

1360
01:07:20,330 --> 01:07:24,230
thing you can execute anything you want

1361
01:07:21,830 --> 01:07:27,440
and of course sometimes you may be hit a

1362
01:07:24,230 --> 01:07:30,410
web so I always<font color="#E5E5E5"> PHP safe mode and so on</font>

1363
01:07:27,440 --> 01:07:32,420
or<font color="#CCCCCC"> basedir so you would just take the</font>

1364
01:07:30,410 --> 01:07:36,109
research i presented last year at black

1365
01:07:32,420 --> 01:07:38,300
hat and create a anti safe mode expert

1366
01:07:36,110 --> 01:07:42,830
on the open basedir export and just put

1367
01:07:38,300 --> 01:07:45,740
it<font color="#E5E5E5"> in the serialized data yeah this was</font>

1368
01:07:42,830 --> 01:07:47,690
the return the property oriented

1369
01:07:45,740 --> 01:07:50,720
programming thing now<font color="#CCCCCC"> there's another</font>

1370
01:07:47,690 --> 01:07:57,290
<font color="#E5E5E5">second example which it will be last one</font>

1371
01:07:50,720 --> 01:08:01,160
yes it's a<font color="#E5E5E5"> little python script</font><font color="#CCCCCC"> i wrote</font>

1372
01:07:57,290 --> 01:08:05,150
<font color="#CCCCCC">to exploit the eunseo wise use of the</font>

1373
01:08:01,160 --> 01:08:07,310
free back if you saw something about my

1374
01:08:05,150 --> 01:08:09,020
sis<font color="#CCCCCC"> can't talk you will see that i</font>

1375
01:08:07,310 --> 01:08:10,940
<font color="#E5E5E5">already posted something like this but</font>

1376
01:08:09,020 --> 01:08:12,740
actually if you compare it to the sis

1377
01:08:10,940 --> 01:08:15,380
<font color="#CCCCCC">can't talk you will see that all</font><font color="#E5E5E5"> the</font>

1378
01:08:12,740 --> 01:08:17,330
second half of the exploit how to

1379
01:08:15,380 --> 01:08:19,010
achieve code execution is completely

1380
01:08:17,330 --> 01:08:22,100
different from what I present at<font color="#E5E5E5"> Siskin</font>

1381
01:08:19,010 --> 01:08:26,120
because<font color="#E5E5E5"> people told me I let their brain</font>

1382
01:08:22,100 --> 01:08:27,530
explode with<font color="#CCCCCC"> the other method so um this</font>

1383
01:08:26,120 --> 01:08:31,069
<font color="#E5E5E5">one was actually far more simple than</font>

1384
01:08:27,529 --> 01:08:33,439
the previous one so<font color="#E5E5E5"> i'm okay i execute</font>

1385
01:08:31,069 --> 01:08:35,359
it<font color="#E5E5E5"> and oh actually it's really fast this</font>

1386
01:08:33,439 --> 01:08:37,250
time and when i try this in my hotel

1387
01:08:35,359 --> 01:08:41,269
room it was endlessly slow<font color="#E5E5E5"> i don't know</font>

1388
01:08:37,250 --> 01:08:43,250
why same vmware so what what is

1389
01:08:41,270 --> 01:08:46,010
<font color="#E5E5E5">happening here it will first send some</font>

1390
01:08:43,250 --> 01:08:48,350
<font color="#CCCCCC">civilized data and determine the size of</font>

1391
01:08:46,010 --> 01:08:50,780
the ninta juror<font color="#CCCCCC"> and so on and what PHP</font>

1392
01:08:48,350 --> 01:08:52,640
version that is I didn't show this today

1393
01:08:50,779 --> 01:08:54,080
because I don't<font color="#E5E5E5"> have the</font><font color="#CCCCCC"> time but</font><font color="#E5E5E5"> if you</font>

1394
01:08:52,640 --> 01:08:57,710
look at<font color="#CCCCCC"> the siskind slides you can see</font>

1395
01:08:54,080 --> 01:09:00,800
how this<font color="#CCCCCC"> is possible and then it will</font>

1396
01:08:57,710 --> 01:09:04,160
leak the address of<font color="#CCCCCC"> the object</font><font color="#E5E5E5"> hunters</font>

1397
01:09:00,800 --> 01:09:06,590
we leak the object handles will optimize

1398
01:09:04,160 --> 01:09:08,649
it to a better<font color="#E5E5E5"> address and scan backward</font>

1399
01:09:06,590 --> 01:09:11,679
<font color="#CCCCCC">in memory it will find the year</font>

1400
01:09:08,649 --> 01:09:14,620
feder retrieve all the headers the

1401
01:09:11,679 --> 01:09:16,420
program Heather's<font color="#CCCCCC"> the string table then</font>

1402
01:09:14,620 --> 01:09:18,278
it will look up some symbols<font color="#E5E5E5"> the</font>

1403
01:09:16,420 --> 01:09:21,100
<font color="#E5E5E5">executor Global's snd volt string and</font>

1404
01:09:18,279 --> 01:09:23,080
then search the<font color="#E5E5E5"> jump-off inside the</font>

1405
01:09:21,100 --> 01:09:26,109
executor<font color="#E5E5E5"> Global's it finds a stack</font>

1406
01:09:23,080 --> 01:09:28,960
address and now this will take a while

1407
01:09:26,109 --> 01:09:32,980
it<font color="#E5E5E5"> searched all the code segment for</font>

1408
01:09:28,960 --> 01:09:37,540
exchange<font color="#CCCCCC"> eggs ESP followed by return</font>

1409
01:09:32,979 --> 01:09:39,488
this takes a while<font color="#E5E5E5"> and my hotel movement</font>

1410
01:09:37,540 --> 01:09:42,060
took like two minutes but I hope it's

1411
01:09:39,488 --> 01:09:42,059
fast as know

1412
01:09:51,649 --> 01:09:58,969
maybe it will never end<font color="#CCCCCC"> a what should</font>

1413
01:09:57,199 --> 01:10:01,549
happen no is it first searches this

1414
01:09:58,969 --> 01:10:04,100
gadget and after<font color="#CCCCCC"> that it searches the</font>

1415
01:10:01,550 --> 01:10:08,300
<font color="#CCCCCC">pop red gadget which will be done in</font>

1416
01:10:04,100 --> 01:10:15,860
less than a second oh there it is and it

1417
01:10:08,300 --> 01:10:19,699
sent over the the actual it sent over

1418
01:10:15,860 --> 01:10:21,679
the yeah it searches on<font color="#CCCCCC"> the stack for</font>

1419
01:10:19,699 --> 01:10:23,989
the<font color="#E5E5E5"> data we the pattern we put in you</font>

1420
01:10:21,679 --> 01:10:26,000
see it found a pattern at some address

1421
01:10:23,989 --> 01:10:28,159
on the stack and then it creates a fake

1422
01:10:26,000 --> 01:10:31,850
object with exactly this address as

1423
01:10:28,159 --> 01:10:33,889
object hangers and then<font color="#CCCCCC"> it creates the</font>

1424
01:10:31,850 --> 01:10:37,610
requested uses this object and destroys

1425
01:10:33,890 --> 01:10:41,900
it and what it<font color="#E5E5E5"> does it returns into some</font>

1426
01:10:37,610 --> 01:10:45,559
PHP code that actually spawns a shell on

1427
01:10:41,900 --> 01:10:48,980
44 44 which is the peach pit shell I

1428
01:10:45,560 --> 01:10:51,710
just already connected to it here it's a

1429
01:10:48,980 --> 01:10:53,870
nothing out then<font color="#CCCCCC"> just to sing that</font>

1430
01:10:51,710 --> 01:10:55,310
receives data and<font color="#CCCCCC"> Eve else what you</font>

1431
01:10:53,870 --> 01:10:58,790
<font color="#CCCCCC">would you send it</font><font color="#E5E5E5"> and give you back what</font>

1432
01:10:55,310 --> 01:11:03,590
it does so you can just<font color="#E5E5E5"> put in PHP</font>

1433
01:10:58,790 --> 01:11:08,090
called PHP info and you have PHP info

1434
01:11:03,590 --> 01:11:17,390
again or you put in system you name a

1435
01:11:08,090 --> 01:11:24,290
you see it's a<font color="#E5E5E5"> federal and the last one</font>

1436
01:11:17,390 --> 01:11:28,940
to prove<font color="#CCCCCC"> that we are patchy use urban ID</font>

1437
01:11:24,290 --> 01:11:32,090
<font color="#E5E5E5">and and you</font><font color="#CCCCCC"> see we are patchy I hope you</font>

1438
01:11:28,940 --> 01:11:35,089
can see that from behind we are Apache

1439
01:11:32,090 --> 01:11:50,240
and yeah there was a demonstration

1440
01:11:35,090 --> 01:12:02,000
finished actually I<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> know any</font>

1441
01:11:50,240 --> 01:12:07,670
questions am what I presented<font color="#E5E5E5"> at sis can</font>

1442
01:12:02,000 --> 01:12:09,290
would be protected<font color="#E5E5E5"> by the sewage in this</font>

1443
01:12:07,670 --> 01:12:11,390
time when I use the<font color="#E5E5E5"> object destructor</font>

1444
01:12:09,290 --> 01:12:15,680
<font color="#E5E5E5">way that would not be protected but</font>

1445
01:12:11,390 --> 01:12:19,580
solution<font color="#CCCCCC"> would make leaking the place</font>

1446
01:12:15,680 --> 01:12:22,520
where you are in memory harder because

1447
01:12:19,580 --> 01:12:23,809
right now solution will<font color="#E5E5E5"> I showed you</font>

1448
01:12:22,520 --> 01:12:25,190
that when you free some memories of

1449
01:12:23,810 --> 01:12:27,680
first bites will be overwritten with the

1450
01:12:25,190 --> 01:12:30,290
previous block but with the latest

1451
01:12:27,680 --> 01:12:32,870
tuition version this is obfuscated the

1452
01:12:30,290 --> 01:12:36,260
pointer so what you would receive would

1453
01:12:32,870 --> 01:12:38,870
be an office cated pointer and when this

1454
01:12:36,260 --> 01:12:41,390
is reused as a string it will be some

1455
01:12:38,870 --> 01:12:43,160
garbage because the string will use a

1456
01:12:41,390 --> 01:12:47,390
real pointer but it will<font color="#CCCCCC"> be of a</font><font color="#E5E5E5"> skater</font>

1457
01:12:43,160 --> 01:12:49,760
<font color="#E5E5E5">pointer so I really good oh yeah so yeah</font>

1458
01:12:47,390 --> 01:12:53,120
and when you<font color="#CCCCCC"> have</font><font color="#E5E5E5"> swishing patch the</font>

1459
01:12:49,760 --> 01:12:55,550
latest one<font color="#E5E5E5"> a will not work like this it</font>

1460
01:12:53,120 --> 01:12:59,540
will be possible somehow to get around

1461
01:12:55,550 --> 01:13:04,040
this<font color="#E5E5E5"> but yeah it's a lot harder with</font>

1462
01:12:59,540 --> 01:13:06,670
sushi yeah no more questions<font color="#CCCCCC"> I saw my</font>

1463
01:13:04,040 --> 01:13:06,670
expected that

