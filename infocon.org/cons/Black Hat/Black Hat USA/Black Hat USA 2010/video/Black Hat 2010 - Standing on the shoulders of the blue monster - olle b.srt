1
00:00:00,000 --> 00:00:04,799
we're<font color="#E5E5E5"> going to get started here today's</font>

2
00:00:02,129 --> 00:00:06,869
talk is about hardening<font color="#CCCCCC"> windows</font>

3
00:00:04,799 --> 00:00:07,620
applications and this is<font color="#CCCCCC"> Ollie be he's</font>

4
00:00:06,870 --> 00:00:13,110
going to give you a<font color="#E5E5E5"> little bit of</font>

5
00:00:07,620 --> 00:00:14,849
background on where he's from afternoon

6
00:00:13,110 --> 00:00:17,640
everyone glad to see so many people

7
00:00:14,849 --> 00:00:19,710
showed up I know there are lots of good

8
00:00:17,640 --> 00:00:22,320
talks going on at this time slot so I'm

9
00:00:19,710 --> 00:00:26,070
not<font color="#E5E5E5"> surprised I wouldn't</font><font color="#CCCCCC"> be here either</font>

10
00:00:22,320 --> 00:00:27,960
anyway I have to<font color="#CCCCCC"> be here so I just</font><font color="#E5E5E5"> do a</font>

11
00:00:26,070 --> 00:00:29,640
quick introduction of myself first my

12
00:00:27,960 --> 00:00:32,009
name is all<font color="#E5E5E5"> Allah or you call me ollie</font>

13
00:00:29,640 --> 00:00:34,770
if that's easier<font color="#E5E5E5"> to pronounce from</font>

14
00:00:32,009 --> 00:00:36,510
Sweden and today i'm<font color="#CCCCCC"> here representing</font>

15
00:00:34,770 --> 00:00:39,090
the tool crib group which is basically a

16
00:00:36,510 --> 00:00:44,640
small group of researchers from

17
00:00:39,090 --> 00:00:47,640
<font color="#E5E5E5">scandinavian countries mostly we do</font>

18
00:00:44,640 --> 00:00:53,010
basically defensive research in OS

19
00:00:47,640 --> 00:00:54,989
technologies and network security and we

20
00:00:53,010 --> 00:00:58,140
<font color="#E5E5E5">publish some stuff on our website which</font>

21
00:00:54,989 --> 00:01:02,730
<font color="#CCCCCC">is in the</font><font color="#E5E5E5"> slights ww2 crypto</font><font color="#CCCCCC"> or to pimp</font>

22
00:00:58,140 --> 00:01:05,760
that<font color="#E5E5E5"> up by day I work for</font><font color="#CCCCCC"> the Swedish</font>

23
00:01:02,730 --> 00:01:10,200
<font color="#E5E5E5">government the swoosh armed forces also</font>

24
00:01:05,760 --> 00:01:12,659
doing defensive system security so

25
00:01:10,200 --> 00:01:14,490
what's this talk all about well the

26
00:01:12,659 --> 00:01:16,530
agenda<font color="#CCCCCC"> for today is I'm going</font><font color="#E5E5E5"> to give</font>

27
00:01:14,490 --> 00:01:19,080
you brief introduction for those of you

28
00:01:16,530 --> 00:01:20,790
<font color="#E5E5E5">who aren't really up to speed</font><font color="#CCCCCC"> on the</font>

29
00:01:19,080 --> 00:01:23,490
<font color="#CCCCCC">windows security model and the security</font>

30
00:01:20,790 --> 00:01:25,259
how security works in feet in<font color="#CCCCCC"> Windows</font>

31
00:01:23,490 --> 00:01:29,280
and then we're going to<font color="#E5E5E5"> go through</font><font color="#CCCCCC"> some</font>

32
00:01:25,259 --> 00:01:31,170
interesting features<font color="#E5E5E5"> of Windows that can</font>

33
00:01:29,280 --> 00:01:34,079
be used to<font color="#E5E5E5"> enhance the security of your</font>

34
00:01:31,170 --> 00:01:36,960
applications and we're going<font color="#E5E5E5"> to finish</font>

35
00:01:34,079 --> 00:01:40,048
off with section on strategies for

36
00:01:36,960 --> 00:01:41,610
making more secure<font color="#CCCCCC"> Windows applications</font>

37
00:01:40,049 --> 00:01:44,520
by employing some of these<font color="#E5E5E5"> technologies</font>

38
00:01:41,610 --> 00:01:47,189
that we've talked about so let's just

39
00:01:44,520 --> 00:01:49,530
breathe into this that before i actually

40
00:01:47,189 --> 00:01:54,029
do are there any developers here today

41
00:01:49,530 --> 00:01:56,219
oh there are interesting it's always

42
00:01:54,030 --> 00:02:02,759
<font color="#E5E5E5">nice to hear to get developers coming to</font>

43
00:01:56,219 --> 00:02:06,929
security conferences right so the

44
00:02:02,759 --> 00:02:08,250
windows security mall is there's the

45
00:02:06,930 --> 00:02:11,009
central part of the windows security

46
00:02:08,250 --> 00:02:13,380
model is built on security descriptors

47
00:02:11,008 --> 00:02:20,880
which are basically

48
00:02:13,380 --> 00:02:23,400
a<font color="#E5E5E5"> sorry up oh I won't get ahead of</font>

49
00:02:20,880 --> 00:02:25,890
myself before we go to security

50
00:02:23,400 --> 00:02:29,670
descriptors who<font color="#E5E5E5"> hasn't heard of us said</font>

51
00:02:25,890 --> 00:02:31,290
everybody knows what<font color="#CCCCCC"> a sit is right so</font>

52
00:02:29,670 --> 00:02:33,000
I'll skip through this slide because

53
00:02:31,290 --> 00:02:35,670
it's<font color="#CCCCCC"> just there if nobody knew what it</font>

54
00:02:33,000 --> 00:02:39,840
was a security descriptor is basically

55
00:02:35,670 --> 00:02:42,510
what<font color="#E5E5E5"> label you put on a system resource</font>

56
00:02:39,840 --> 00:02:44,160
and operating system<font color="#E5E5E5"> resource that</font>

57
00:02:42,510 --> 00:02:46,530
controls the security access to that

58
00:02:44,160 --> 00:02:52,650
resource so in the security descriptor

59
00:02:46,530 --> 00:02:56,910
data structure you will<font color="#CCCCCC"> have some fields</font>

60
00:02:52,650 --> 00:02:58,740
like the owner of the object the group

61
00:02:56,910 --> 00:03:01,680
of the object basically just used for

62
00:02:58,740 --> 00:03:04,200
posix because<font color="#E5E5E5"> in</font><font color="#CCCCCC"> UNIX systems we have an</font>

63
00:03:01,680 --> 00:03:07,110
owner on a group<font color="#E5E5E5"> we can set permissions</font>

64
00:03:04,200 --> 00:03:09,690
for but not really<font color="#E5E5E5"> used in the windows</font>

65
00:03:07,110 --> 00:03:12,330
world and there are some access control

66
00:03:09,690 --> 00:03:14,370
lists there's a discretionary access

67
00:03:12,330 --> 00:03:17,040
control list which<font color="#CCCCCC"> is used to grant or</font>

68
00:03:14,370 --> 00:03:18,990
deny access to the system resource and

69
00:03:17,040 --> 00:03:20,519
there's<font color="#CCCCCC"> the system access control list</font>

70
00:03:18,990 --> 00:03:26,640
which<font color="#CCCCCC"> is used for among other</font><font color="#E5E5E5"> things</font>

71
00:03:20,520 --> 00:03:29,190
auditing we'll<font color="#E5E5E5"> get to that later oops so</font>

72
00:03:26,640 --> 00:03:31,470
access<font color="#E5E5E5"> control lists basically built up</font>

73
00:03:29,190 --> 00:03:36,420
of it's<font color="#E5E5E5"> just a list of access control</font>

74
00:03:31,470 --> 00:03:40,560
entries and access control entries are

75
00:03:36,420 --> 00:03:43,589
of a certain type so you have one type

76
00:03:40,560 --> 00:03:46,500
for example controlling auditing of

77
00:03:43,590 --> 00:03:49,980
access<font color="#CCCCCC"> to system resources and that's</font>

78
00:03:46,500 --> 00:03:53,100
only used in the system access control

79
00:03:49,980 --> 00:03:55,739
list or the<font color="#E5E5E5"> cycle I'll keep referring to</font>

80
00:03:53,100 --> 00:03:59,310
these as<font color="#CCCCCC"> dakal in circles so it's much</font>

81
00:03:55,740 --> 00:04:02,040
easier<font color="#E5E5E5"> to say we have some flags in each</font>

82
00:03:59,310 --> 00:04:04,050
<font color="#E5E5E5">year access control entry flags</font>

83
00:04:02,040 --> 00:04:08,010
controlling for example inheritance for

84
00:04:04,050 --> 00:04:11,490
example in a file system you can set a

85
00:04:08,010 --> 00:04:13,350
tackle on a directory the will propagate

86
00:04:11,490 --> 00:04:17,970
through two sub directories and things

87
00:04:13,350 --> 00:04:20,040
like that and<font color="#E5E5E5"> an access mask and then</font>

88
00:04:17,970 --> 00:04:23,990
the access mask is basically what you

89
00:04:20,040 --> 00:04:29,240
match

90
00:04:23,990 --> 00:04:32,509
the access<font color="#E5E5E5"> that's being asked from a</font>

91
00:04:29,240 --> 00:04:35,449
system user to a specific resource to

92
00:04:32,509 --> 00:04:37,430
<font color="#CCCCCC">the access control</font><font color="#E5E5E5"> list that gives to</font>

93
00:04:35,449 --> 00:04:39,680
the grants the use of the access and

94
00:04:37,430 --> 00:04:41,360
I'll explain a little bit more<font color="#CCCCCC"> about</font>

95
00:04:39,680 --> 00:04:44,000
<font color="#E5E5E5">that and of course there's</font><font color="#CCCCCC"> acid that</font>

96
00:04:41,360 --> 00:04:46,160
identifies the trustee or the user

97
00:04:44,000 --> 00:04:49,759
that's granted this access so the access

98
00:04:46,160 --> 00:04:52,460
mask can for example be read access only

99
00:04:49,759 --> 00:05:00,740
and that would set a<font color="#E5E5E5"> number of bits in</font>

100
00:04:52,460 --> 00:05:04,430
this bit field now resources in windows

101
00:05:00,740 --> 00:05:08,060
are mostly most of the time<font color="#E5E5E5"> they're</font>

102
00:05:04,430 --> 00:05:10,069
represented by objects so called object

103
00:05:08,060 --> 00:05:11,720
<font color="#CCCCCC">in the colonel this has</font><font color="#E5E5E5"> nothing to do</font>

104
00:05:10,069 --> 00:05:12,919
with object-oriented programming or

105
00:05:11,720 --> 00:05:17,509
anything like that they're just<font color="#E5E5E5"> called</font>

106
00:05:12,919 --> 00:05:21,318
objects and these live in the colonel so

107
00:05:17,509 --> 00:05:23,030
they're not accessible to use land

108
00:05:21,319 --> 00:05:28,130
applications of course because they

109
00:05:23,030 --> 00:05:30,770
could be manipulated and a kernel object

110
00:05:28,130 --> 00:05:32,750
basically<font color="#E5E5E5"> I'm going to skip through this</font>

111
00:05:30,770 --> 00:05:37,280
<font color="#E5E5E5">because I'm I think it's mostly obvious</font>

112
00:05:32,750 --> 00:05:39,050
to people who actually here<font color="#E5E5E5"> today most</font>

113
00:05:37,280 --> 00:05:41,030
of them contain a security descriptor

114
00:05:39,050 --> 00:05:42,800
that controls the access to the actual

115
00:05:41,030 --> 00:05:46,729
system resource represented by this

116
00:05:42,800 --> 00:05:49,460
object so how do the applications then

117
00:05:46,729 --> 00:05:51,710
get access to these system resources

118
00:05:49,460 --> 00:05:54,620
well basically they ask for access to<font color="#E5E5E5"> a</font>

119
00:05:51,710 --> 00:05:58,280
named object for example or some other

120
00:05:54,620 --> 00:06:00,740
object that they want access<font color="#CCCCCC"> to and a</font>

121
00:05:58,280 --> 00:06:05,809
kernel function call<font color="#CCCCCC"> SE axis check</font>

122
00:06:00,740 --> 00:06:08,030
compares the<font color="#CCCCCC"> vakil in the security</font>

123
00:06:05,810 --> 00:06:09,860
descriptor line by line or access

124
00:06:08,030 --> 00:06:12,859
controller to buy access control entry

125
00:06:09,860 --> 00:06:15,380
from the<font color="#E5E5E5"> start to the from top to the</font>

126
00:06:12,860 --> 00:06:18,680
bottom of the list against a access

127
00:06:15,380 --> 00:06:23,240
token that the current that<font color="#E5E5E5"> the calling</font>

128
00:06:18,680 --> 00:06:24,889
thread or process is running under so

129
00:06:23,240 --> 00:06:27,139
for<font color="#E5E5E5"> example if I haven't a process</font>

130
00:06:24,889 --> 00:06:30,770
running as a standard user on my desktop

131
00:06:27,139 --> 00:06:34,099
it would compare that the<font color="#CCCCCC"> CID of that</font>

132
00:06:30,770 --> 00:06:36,780
user for example to each access<font color="#E5E5E5"> control</font>

133
00:06:34,099 --> 00:06:39,750
list entry in turn

134
00:06:36,780 --> 00:06:42,150
and once it finds a said that matches it

135
00:06:39,750 --> 00:06:46,110
would compare the access mask in the

136
00:06:42,150 --> 00:06:48,659
access control entry to the<font color="#E5E5E5"> access is</font>

137
00:06:46,110 --> 00:06:52,050
being asked to be granted<font color="#E5E5E5"> and if those</font>

138
00:06:48,660 --> 00:06:55,110
match or rather if the requested access

139
00:06:52,050 --> 00:06:56,430
is a subset<font color="#E5E5E5"> of the access in the access</font>

140
00:06:55,110 --> 00:06:58,470
<font color="#CCCCCC">must specified in the access control</font>

141
00:06:56,430 --> 00:07:01,680
<font color="#E5E5E5">list access</font><font color="#CCCCCC"> would be</font><font color="#E5E5E5"> granted now there</font>

142
00:06:58,470 --> 00:07:05,280
are other access control entries of

143
00:07:01,680 --> 00:07:08,940
course of other types I said there's for

144
00:07:05,280 --> 00:07:10,979
example<font color="#CCCCCC"> a access control entry type to</font>

145
00:07:08,940 --> 00:07:12,660
deny access as<font color="#CCCCCC"> well as brand</font><font color="#E5E5E5"> access and</font>

146
00:07:10,980 --> 00:07:17,070
that's really important<font color="#E5E5E5"> to the security</font>

147
00:07:12,660 --> 00:07:20,700
model now<font color="#E5E5E5"> these objects are basically</font>

148
00:07:17,070 --> 00:07:23,099
granted access to<font color="#E5E5E5"> and a</font><font color="#CCCCCC"> opac value</font>

149
00:07:20,700 --> 00:07:26,039
called a handle has returned to<font color="#E5E5E5"> the user</font>

150
00:07:23,100 --> 00:07:28,320
and<font color="#E5E5E5"> the user land and basically for each</font>

151
00:07:26,040 --> 00:07:32,250
process there's in the<font color="#CCCCCC"> kernel table of</font>

152
00:07:28,320 --> 00:07:34,050
system resources that are that have been

153
00:07:32,250 --> 00:07:37,290
granted<font color="#E5E5E5"> access to that have been issued</font>

154
00:07:34,050 --> 00:07:41,040
a handle to some thread in this

155
00:07:37,290 --> 00:07:42,690
particular<font color="#E5E5E5"> process basically that's a</font>

156
00:07:41,040 --> 00:07:44,520
lookup table where this handle is

157
00:07:42,690 --> 00:07:46,560
basically an index into the lookup table

158
00:07:44,520 --> 00:07:50,580
which gives you a pointer<font color="#E5E5E5"> to the actual</font>

159
00:07:46,560 --> 00:07:52,500
<font color="#CCCCCC">Colonel object and since the list sorry</font>

160
00:07:50,580 --> 00:07:54,990
the table lives in<font color="#E5E5E5"> kernel and it's not</font>

161
00:07:52,500 --> 00:07:57,180
so susceptible to manipulation by user

162
00:07:54,990 --> 00:07:59,640
learnt processes so that's how how the

163
00:07:57,180 --> 00:08:01,680
security works so the important thing<font color="#CCCCCC"> to</font>

164
00:07:59,640 --> 00:08:03,690
<font color="#CCCCCC">remember about this is once</font><font color="#E5E5E5"> you get</font>

165
00:08:01,680 --> 00:08:06,270
granted access to<font color="#CCCCCC"> a resource once</font>

166
00:08:03,690 --> 00:08:08,310
somebody some piece of code in a process

167
00:08:06,270 --> 00:08:10,650
gets granted access to<font color="#CCCCCC"> a system resource</font>

168
00:08:08,310 --> 00:08:14,430
that gets added to the handle table of

169
00:08:10,650 --> 00:08:16,679
this process<font color="#E5E5E5"> and from then on until the</font>

170
00:08:14,430 --> 00:08:19,650
handle is closed<font color="#E5E5E5"> and it's get it gets</font>

171
00:08:16,680 --> 00:08:21,450
taken off<font color="#E5E5E5"> the table every</font><font color="#CCCCCC"> code in that</font>

172
00:08:19,650 --> 00:08:23,700
process all running code in that process

173
00:08:21,450 --> 00:08:31,890
has access to that particular resource

174
00:08:23,700 --> 00:08:34,770
now tokens I mentioned an access token

175
00:08:31,890 --> 00:08:38,909
before and an access token is basically

176
00:08:34,770 --> 00:08:41,429
the data structure<font color="#CCCCCC"> that contains</font><font color="#E5E5E5"> all the</font>

177
00:08:38,909 --> 00:08:43,500
context secur security context

178
00:08:41,429 --> 00:08:45,839
information that's relevant to a

179
00:08:43,500 --> 00:08:47,190
particular thread<font color="#CCCCCC"> or process so when we</font>

180
00:08:45,839 --> 00:08:49,080
say that a process is running as a

181
00:08:47,190 --> 00:08:49,740
specific<font color="#E5E5E5"> user what we really mean is</font>

182
00:08:49,080 --> 00:08:53,430
that there

183
00:08:49,740 --> 00:08:56,430
specific said in the primary token of

184
00:08:53,430 --> 00:08:58,380
that process so a token looks something

185
00:08:56,430 --> 00:09:00,599
like that there's loads of fields in

186
00:08:58,380 --> 00:09:05,370
there<font color="#CCCCCC"> I'd try to list some of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> other</font>

187
00:09:00,600 --> 00:09:07,170
ones one is a list of privileges and

188
00:09:05,370 --> 00:09:11,850
we'll get into<font color="#E5E5E5"> what privileges are in a</font>

189
00:09:07,170 --> 00:09:16,079
bit and there's a list of users and

190
00:09:11,850 --> 00:09:17,940
<font color="#CCCCCC">groups so basically if</font><font color="#E5E5E5"> I'm logged in as</font>

191
00:09:16,080 --> 00:09:21,899
a standard user that list would contain

192
00:09:17,940 --> 00:09:24,959
my unique user identity and form of us

193
00:09:21,899 --> 00:09:27,420
it and it would probably contain the<font color="#CCCCCC"> cid</font>

194
00:09:24,959 --> 00:09:28,800
of the standard users group or the

195
00:09:27,420 --> 00:09:31,800
domain users group or<font color="#CCCCCC"> something like</font>

196
00:09:28,800 --> 00:09:33,870
that<font color="#E5E5E5"> and there's also information about</font>

197
00:09:31,800 --> 00:09:40,170
the what's called<font color="#CCCCCC"> an impersonation level</font>

198
00:09:33,870 --> 00:09:42,990
so<font color="#E5E5E5"> I said before that a process gets</font>

199
00:09:40,170 --> 00:09:44,880
assigned a token or a process has a

200
00:09:42,990 --> 00:09:47,790
primary token when a process gets

201
00:09:44,880 --> 00:09:49,950
started it's get it gets assigned by<font color="#E5E5E5"> the</font>

202
00:09:47,790 --> 00:09:55,920
system eight primary token and this is

203
00:09:49,950 --> 00:09:59,640
the access<font color="#E5E5E5"> token that basically controls</font>

204
00:09:55,920 --> 00:10:02,610
or controls access to system resources

205
00:09:59,640 --> 00:10:06,810
except in the case when a thread in the

206
00:10:02,610 --> 00:10:09,779
<font color="#E5E5E5">process has called something called an</font>

207
00:10:06,810 --> 00:10:11,520
impersonation or a delegation and what

208
00:10:09,779 --> 00:10:15,540
<font color="#E5E5E5">that means is that you can actually take</font>

209
00:10:11,520 --> 00:10:17,279
a new token containing some completely

210
00:10:15,540 --> 00:10:21,000
<font color="#E5E5E5">different information and temporarily</font>

211
00:10:17,279 --> 00:10:23,730
make it the access token for that

212
00:10:21,000 --> 00:10:25,950
particular threat which is very

213
00:10:23,730 --> 00:10:28,470
important for example with your<font color="#E5E5E5"> writing</font>

214
00:10:25,950 --> 00:10:31,829
server software and you have users

215
00:10:28,470 --> 00:10:34,110
connect you'd<font color="#E5E5E5"> really like to have access</font>

216
00:10:31,829 --> 00:10:36,779
control being taken care of by the

217
00:10:34,110 --> 00:10:41,880
system<font color="#E5E5E5"> and not being having to compare</font>

218
00:10:36,779 --> 00:10:44,640
or keep track of access to for example

219
00:10:41,880 --> 00:10:48,000
all files in a file directory or

220
00:10:44,640 --> 00:10:50,160
directory structure so you<font color="#E5E5E5"> must rather</font>

221
00:10:48,000 --> 00:10:52,290
offload that<font color="#E5E5E5"> to</font><font color="#CCCCCC"> windows so what you</font>

222
00:10:50,160 --> 00:10:56,730
could<font color="#E5E5E5"> do then is once a user is</font>

223
00:10:52,290 --> 00:10:59,250
authenticated himself you impersonate

224
00:10:56,730 --> 00:11:02,339
that user which basically assigns a

225
00:10:59,250 --> 00:11:06,569
temporary impersonation

226
00:11:02,339 --> 00:11:10,350
token to that specific thread and every

227
00:11:06,569 --> 00:11:12,120
access control request is made by<font color="#CCCCCC"> that</font>

228
00:11:10,350 --> 00:11:14,040
thread will then be compared to<font color="#E5E5E5"> the</font>

229
00:11:12,120 --> 00:11:24,059
information<font color="#E5E5E5"> within that impersonation</font>

230
00:11:14,040 --> 00:11:31,589
token so what are privileges what

231
00:11:24,059 --> 00:11:34,529
privileges are basically more privileges

232
00:11:31,589 --> 00:11:36,749
that you can assign to either a user or

233
00:11:34,529 --> 00:11:40,019
a group in the system and<font color="#E5E5E5"> they control</font>

234
00:11:36,749 --> 00:11:48,569
access to certain functions within the

235
00:11:40,019 --> 00:11:52,740
system certain you could<font color="#E5E5E5"> call it stuff</font>

236
00:11:48,569 --> 00:11:54,449
like debugging the processes or getting

237
00:11:52,740 --> 00:11:56,730
access to the memory space of processes

238
00:11:54,449 --> 00:11:59,189
of another user for example is something

239
00:11:56,730 --> 00:12:02,100
that you don't<font color="#E5E5E5"> want anybody to do so</font>

240
00:11:59,189 --> 00:12:09,990
that's it granted by specific<font color="#E5E5E5"> privileges</font>

241
00:12:02,100 --> 00:12:14,459
and there's a lot<font color="#CCCCCC"> of these that can't</font><font color="#E5E5E5"> be</font>

242
00:12:09,990 --> 00:12:16,709
<font color="#CCCCCC">controlled by regular buckles in a</font>

243
00:12:14,459 --> 00:12:21,899
security descriptor are controlled by

244
00:12:16,709 --> 00:12:23,459
privileges so these privileges are

245
00:12:21,899 --> 00:12:26,370
stored in<font color="#CCCCCC"> a list</font><font color="#E5E5E5"> on the token as I said</font>

246
00:12:23,459 --> 00:12:28,050
and by<font color="#E5E5E5"> default they are disabled so</font>

247
00:12:26,370 --> 00:12:30,779
<font color="#E5E5E5">before it privilege gets used you</font>

248
00:12:28,050 --> 00:12:33,479
actually have to go in and manipulate

249
00:12:30,779 --> 00:12:36,779
the token to enable the<font color="#CCCCCC"> privilege before</font>

250
00:12:33,480 --> 00:12:39,179
it can be used<font color="#CCCCCC"> as kind of a safeguard to</font>

251
00:12:36,779 --> 00:12:40,499
make sure that<font color="#E5E5E5"> you're actually you want</font>

252
00:12:39,179 --> 00:12:43,529
<font color="#E5E5E5">to use that privilege at the specific</font>

253
00:12:40,499 --> 00:12:47,129
time<font color="#CCCCCC"> that you using it</font><font color="#E5E5E5"> in your code so</font>

254
00:12:43,529 --> 00:12:49,050
there is it isn't used so<font color="#CCCCCC"> it doesn't</font>

255
00:12:47,129 --> 00:12:51,089
have an unwanted side effect should your

256
00:12:49,050 --> 00:12:59,459
code be run by a user that<font color="#CCCCCC"> has specific</font>

257
00:12:51,089 --> 00:13:02,069
privilege<font color="#CCCCCC"> okay so hopefully my sorry I'm</font>

258
00:12:59,459 --> 00:13:04,829
very just like<font color="#E5E5E5"> hopefully my ramblings on</font>

259
00:13:02,069 --> 00:13:07,529
security model have been somewhat<font color="#CCCCCC"> clear</font>

260
00:13:04,829 --> 00:13:10,050
to you or if you already knew<font color="#CCCCCC"> it I'm</font>

261
00:13:07,529 --> 00:13:12,120
happy<font color="#CCCCCC"> for you</font><font color="#E5E5E5"> so we'll move on to the</font>

262
00:13:10,050 --> 00:13:13,439
actual<font color="#E5E5E5"> meat of the talk which is going</font>

263
00:13:12,120 --> 00:13:15,030
through some security related features

264
00:13:13,439 --> 00:13:17,400
in<font color="#E5E5E5"> Windows</font>

265
00:13:15,030 --> 00:13:18,990
and we're<font color="#CCCCCC"> going to try to discuss how</font>

266
00:13:17,400 --> 00:13:22,020
these can be used by third-party

267
00:13:18,990 --> 00:13:26,040
application developers to increase the

268
00:13:22,020 --> 00:13:27,600
bar against attack so first of all

269
00:13:26,040 --> 00:13:29,579
there's this lovely feature called a

270
00:13:27,600 --> 00:13:32,640
restricted token that's been in the

271
00:13:29,580 --> 00:13:35,310
<font color="#CCCCCC">Windows OS</font><font color="#E5E5E5"> since 2000 since the two</font>

272
00:13:32,640 --> 00:13:38,580
windows 2000 release and<font color="#E5E5E5"> basically what</font>

273
00:13:35,310 --> 00:13:41,849
you can do is you can remove certain

274
00:13:38,580 --> 00:13:45,090
privileges or remove certain SIDS from

275
00:13:41,850 --> 00:13:47,880
the list of users<font color="#CCCCCC"> and groups within a</font>

276
00:13:45,090 --> 00:13:51,720
certain token and that token can then be

277
00:13:47,880 --> 00:13:54,570
used<font color="#CCCCCC"> to either as an impersonation token</font>

278
00:13:51,720 --> 00:13:57,600
or more interestingly it can be used to

279
00:13:54,570 --> 00:14:00,210
<font color="#E5E5E5">create a new process using this token</font>

280
00:13:57,600 --> 00:14:03,270
and<font color="#E5E5E5"> this is really</font><font color="#CCCCCC"> interesting if you're</font>

281
00:14:00,210 --> 00:14:05,520
for example if you want to sandbox off a

282
00:14:03,270 --> 00:14:09,270
piece of<font color="#E5E5E5"> code that</font><font color="#CCCCCC"> you want</font><font color="#E5E5E5"> to run with</font>

283
00:14:05,520 --> 00:14:12,840
lower privileges then what<font color="#E5E5E5"> the user</font>

284
00:14:09,270 --> 00:14:14,939
normally has so for<font color="#E5E5E5"> example if you're</font>

285
00:14:12,840 --> 00:14:20,700
not if you don't trust that code or if

286
00:14:14,940 --> 00:14:22,620
that code is parsing input that is

287
00:14:20,700 --> 00:14:26,310
untrusted that comes<font color="#E5E5E5"> from my the network</font>

288
00:14:22,620 --> 00:14:29,010
or a file or<font color="#CCCCCC"> something like that the you</font>

289
00:14:26,310 --> 00:14:32,400
might<font color="#E5E5E5"> want to break that off into a</font>

290
00:14:29,010 --> 00:14:35,160
separate<font color="#E5E5E5"> process and make sure that that</font>

291
00:14:32,400 --> 00:14:38,939
<font color="#E5E5E5">process runs with as few privileges as</font>

292
00:14:35,160 --> 00:14:40,050
possible so you<font color="#E5E5E5"> can do a number</font><font color="#CCCCCC"> of</font>

293
00:14:38,940 --> 00:14:42,600
<font color="#E5E5E5">different things with the create</font>

294
00:14:40,050 --> 00:14:46,140
restrict to restrict a token call where

295
00:14:42,600 --> 00:14:47,100
you<font color="#CCCCCC"> can both prevent SIDS from granting</font>

296
00:14:46,140 --> 00:14:50,340
access so you're basically making

297
00:14:47,100 --> 00:14:52,650
certain SIDS<font color="#E5E5E5"> in the list restricted</font>

298
00:14:50,340 --> 00:14:55,860
which means that they can only be<font color="#CCCCCC"> used</font>

299
00:14:52,650 --> 00:14:58,290
<font color="#E5E5E5">to deny access so when you're walking</font>

300
00:14:55,860 --> 00:15:01,320
the access control entries in the in the

301
00:14:58,290 --> 00:15:03,689
<font color="#CCCCCC">dakal for the resource through you've</font>

302
00:15:01,320 --> 00:15:09,960
requested access to it will basically

303
00:15:03,690 --> 00:15:12,030
skip or the access granting access

304
00:15:09,960 --> 00:15:15,420
control entries and only process the

305
00:15:12,030 --> 00:15:17,760
deny access control entries you can also

306
00:15:15,420 --> 00:15:21,060
remove stuff from this list and create a

307
00:15:17,760 --> 00:15:22,920
smaller list and you can<font color="#E5E5E5"> actually add</font>

308
00:15:21,060 --> 00:15:24,359
stuff to that list as well that wasn't

309
00:15:22,920 --> 00:15:26,520
there from the start which is<font color="#E5E5E5"> very</font>

310
00:15:24,360 --> 00:15:27,990
interesting<font color="#CCCCCC"> and it's actually fortunate</font>

311
00:15:26,520 --> 00:15:31,800
that you can because

312
00:15:27,990 --> 00:15:33,779
it it's the only<font color="#CCCCCC"> way actually to deny</font>

313
00:15:31,800 --> 00:15:38,279
access to certain system right resources

314
00:15:33,779 --> 00:15:41,910
for this sandbox process so when you've

315
00:15:38,279 --> 00:15:44,279
got a token for example the primary

316
00:15:41,910 --> 00:15:46,410
token of your process and you've

317
00:15:44,279 --> 00:15:48,420
restricted it removed all the privileges

318
00:15:46,410 --> 00:15:51,449
that you don't want to be there<font color="#E5E5E5"> you've</font>

319
00:15:48,420 --> 00:15:54,360
perhaps added or subtracted from<font color="#E5E5E5"> the CID</font>

320
00:15:51,450 --> 00:15:57,209
list you can<font color="#E5E5E5"> take that restricted token</font>

321
00:15:54,360 --> 00:15:59,160
<font color="#E5E5E5">and pass it in as the first parameter to</font>

322
00:15:57,209 --> 00:16:02,160
create process as user and create

323
00:15:59,160 --> 00:16:05,610
processes user is normally used by the

324
00:16:02,160 --> 00:16:09,329
system only<font color="#E5E5E5"> to create new processes and</font>

325
00:16:05,610 --> 00:16:11,010
<font color="#CCCCCC">it's assigns make sure that the primary</font>

326
00:16:09,330 --> 00:16:13,649
token of the new process is assigned

327
00:16:11,010 --> 00:16:16,649
accordingly that's actually controlled

328
00:16:13,649 --> 00:16:18,570
by a system privilege so if you don't

329
00:16:16,649 --> 00:16:20,339
<font color="#CCCCCC">have</font><font color="#E5E5E5"> the se tocan privilege you can't</font>

330
00:16:18,570 --> 00:16:24,120
assign a new primary token to a new

331
00:16:20,339 --> 00:16:26,130
process or to any process but create

332
00:16:24,120 --> 00:16:27,899
process as a user called with a

333
00:16:26,130 --> 00:16:30,600
restricted token will actually allow you

334
00:16:27,899 --> 00:16:33,180
to start a<font color="#CCCCCC"> new process with an arbitrary</font>

335
00:16:30,600 --> 00:16:36,450
token as long as it's a<font color="#E5E5E5"> restricted token</font>

336
00:16:33,180 --> 00:16:37,949
of the primary token that is created

337
00:16:36,450 --> 00:16:41,700
from the<font color="#E5E5E5"> primary token of the calling</font>

338
00:16:37,950 --> 00:16:43,980
<font color="#E5E5E5">thread or sorry the calling process so</font>

339
00:16:41,700 --> 00:16:46,740
which<font color="#CCCCCC"> means that it's a nice way for you</font>

340
00:16:43,980 --> 00:16:50,190
to actually spawn off a new process from

341
00:16:46,740 --> 00:16:52,170
your application that dropped all<font color="#CCCCCC"> the</font>

342
00:16:50,190 --> 00:16:55,079
privileges<font color="#CCCCCC"> the user might have had so</font>

343
00:16:52,170 --> 00:16:56,520
for example on<font color="#E5E5E5"> XP if it was an admin</font>

344
00:16:55,079 --> 00:16:59,160
user you could drop the domain admins

345
00:16:56,520 --> 00:17:00,569
group from the<font color="#E5E5E5"> CID list you could drop</font>

346
00:16:59,160 --> 00:17:03,000
all the privileges that he might<font color="#E5E5E5"> have</font>

347
00:17:00,570 --> 00:17:05,579
been granted<font color="#E5E5E5"> from the restricted soakin</font>

348
00:17:03,000 --> 00:17:08,220
and then start a new process with those

349
00:17:05,579 --> 00:17:09,688
lower privileges so basically making

350
00:17:08,220 --> 00:17:14,280
sure that he doesn't<font color="#E5E5E5"> have access to</font>

351
00:17:09,689 --> 00:17:19,020
something that that could compromise

352
00:17:14,280 --> 00:17:22,859
security so<font color="#E5E5E5"> that's a very nice feature</font>

353
00:17:19,020 --> 00:17:25,109
<font color="#E5E5E5">to have it's basically the under what</font>

354
00:17:22,859 --> 00:17:27,510
what's underpinning<font color="#E5E5E5"> sandboxing in</font>

355
00:17:25,109 --> 00:17:29,309
<font color="#E5E5E5">Windows is the restricted token but</font>

356
00:17:27,510 --> 00:17:33,840
there are<font color="#CCCCCC"> other</font><font color="#E5E5E5"> things are the</font><font color="#CCCCCC"> resources</font>

357
00:17:29,309 --> 00:17:37,710
that<font color="#E5E5E5"> we need</font><font color="#CCCCCC"> to to consider when</font>

358
00:17:33,840 --> 00:17:40,350
<font color="#E5E5E5">sandboxing for example untrusted code so</font>

359
00:17:37,710 --> 00:17:41,140
one thing that's interesting to look at

360
00:17:40,350 --> 00:17:43,659
is

361
00:17:41,140 --> 00:17:47,440
the<font color="#CCCCCC"> gooey model and the going model is</font>

362
00:17:43,660 --> 00:17:49,750
built up of securable objects objects

363
00:17:47,440 --> 00:17:52,360
with security descriptors<font color="#E5E5E5"> and they go</font>

364
00:17:49,750 --> 00:17:57,490
from the user session which is created

365
00:17:52,360 --> 00:18:00,399
at login and within a session there can

366
00:17:57,490 --> 00:18:02,380
be one<font color="#CCCCCC"> or more windows stations and by</font>

367
00:18:00,400 --> 00:18:05,920
<font color="#E5E5E5">default there's only one called windows</font>

368
00:18:02,380 --> 00:18:07,600
station 0 windstar 0 and this window

369
00:18:05,920 --> 00:18:09,490
station can all window stations can

370
00:18:07,600 --> 00:18:11,770
contain one or<font color="#E5E5E5"> more desktops by default</font>

371
00:18:09,490 --> 00:18:16,690
<font color="#E5E5E5">there are a couple of desktops created</font>

372
00:18:11,770 --> 00:18:18,370
<font color="#E5E5E5">and the need wins wins 20 instance for</font>

373
00:18:16,690 --> 00:18:20,740
example there's the interactive desktop

374
00:18:18,370 --> 00:18:24,340
that you get logged into essentially and

375
00:18:20,740 --> 00:18:25,990
there's also the log on desktop which is

376
00:18:24,340 --> 00:18:28,030
where<font color="#CCCCCC"> you enter your credentials of the</font>

377
00:18:25,990 --> 00:18:34,390
login<font color="#E5E5E5"> prompt and also where you get sent</font>

378
00:18:28,030 --> 00:18:36,730
to when you press<font color="#E5E5E5"> ctrl</font><font color="#CCCCCC"> Alt Delete now</font>

379
00:18:34,390 --> 00:18:38,560
processes belong to a window station so

380
00:18:36,730 --> 00:18:40,450
<font color="#E5E5E5">they kind of map at that level but</font>

381
00:18:38,560 --> 00:18:44,230
threads can<font color="#E5E5E5"> be assigned to different</font>

382
00:18:40,450 --> 00:18:47,560
desktop within that window station and

383
00:18:44,230 --> 00:18:49,030
the desktop object is kind of

384
00:18:47,560 --> 00:18:52,090
interesting<font color="#E5E5E5"> because it's kind of the</font>

385
00:18:49,030 --> 00:18:55,540
<font color="#E5E5E5">lowest security sorry the lowest level</font>

386
00:18:52,090 --> 00:18:57,939
securable object that we have in the<font color="#E5E5E5"> GUI</font>

387
00:18:55,540 --> 00:18:59,500
model which means that the desktop

388
00:18:57,940 --> 00:19:02,890
contains all the<font color="#CCCCCC"> GUI objects all the</font>

389
00:18:59,500 --> 00:19:06,100
windows on<font color="#CCCCCC"> your desktop message queues</font>

390
00:19:02,890 --> 00:19:08,740
for those windows and all the other GUI

391
00:19:06,100 --> 00:19:11,620
elements but<font color="#E5E5E5"> within this desktop there</font>

392
00:19:08,740 --> 00:19:13,600
is no access control whatsoever so

393
00:19:11,620 --> 00:19:16,989
basically two processes that have

394
00:19:13,600 --> 00:19:18,580
windows open<font color="#E5E5E5"> on the same desktop have a</font>

395
00:19:16,990 --> 00:19:20,680
way of talking to each other without

396
00:19:18,580 --> 00:19:24,189
there being any security involved<font color="#CCCCCC"> at all</font>

397
00:19:20,680 --> 00:19:26,080
so they can for example post messages to

398
00:19:24,190 --> 00:19:29,500
each other's message queues and these

399
00:19:26,080 --> 00:19:32,770
<font color="#CCCCCC">messages can be quite nasty if you look</font>

400
00:19:29,500 --> 00:19:34,840
up what's<font color="#E5E5E5"> called a shatter attack you</font>

401
00:19:32,770 --> 00:19:38,980
can see what<font color="#CCCCCC"> happens</font><font color="#E5E5E5"> when a process</font>

402
00:19:34,840 --> 00:19:41,080
posts messages to the message queue of a

403
00:19:38,980 --> 00:19:42,730
another process that might have high

404
00:19:41,080 --> 00:19:44,939
privileges you can get it to their nasty

405
00:19:42,730 --> 00:19:44,940
stuff

406
00:19:48,440 --> 00:19:56,780
with the<font color="#CCCCCC"> 2,000 terminal server release</font>

407
00:19:52,910 --> 00:19:58,190
there was a new concept introduced in

408
00:19:56,780 --> 00:20:00,860
<font color="#CCCCCC">the</font><font color="#E5E5E5"> windows security model which is</font>

409
00:19:58,190 --> 00:20:03,230
called a job object and the job object

410
00:20:00,860 --> 00:20:06,649
is basically introduced to be able<font color="#E5E5E5"> to</font>

411
00:20:03,230 --> 00:20:09,230
set limits resource limits on processes

412
00:20:06,650 --> 00:20:11,810
so for example in a terminal services

413
00:20:09,230 --> 00:20:16,550
environment we have several users that

414
00:20:11,810 --> 00:20:19,040
<font color="#CCCCCC">login and you want to set caps on for</font>

415
00:20:16,550 --> 00:20:23,120
example CPU usage or memory usage so

416
00:20:19,040 --> 00:20:24,770
that one user wouldn't be able to hog

417
00:20:23,120 --> 00:20:27,199
system resources and degrade the

418
00:20:24,770 --> 00:20:30,440
experience of others other system users

419
00:20:27,200 --> 00:20:32,540
so what Microsoft<font color="#E5E5E5"> did was implement</font>

420
00:20:30,440 --> 00:20:34,220
what's called a job object which you can

421
00:20:32,540 --> 00:20:37,820
create and you can assign processes to

422
00:20:34,220 --> 00:20:40,580
it and the job object can set a number

423
00:20:37,820 --> 00:20:43,760
<font color="#CCCCCC">of different limits so we can set limits</font>

424
00:20:40,580 --> 00:20:47,810
as i said<font color="#CCCCCC"> on cpu use memory usage run</font>

425
00:20:43,760 --> 00:20:49,730
time of application to prohibit hung

426
00:20:47,810 --> 00:20:52,669
applications or runaway applications<font color="#CCCCCC"> I</font>

427
00:20:49,730 --> 00:20:55,580
can<font color="#CCCCCC"> print a bit access to certain gooey</font>

428
00:20:52,670 --> 00:20:58,610
objects that are above the<font color="#E5E5E5"> desk top</font>

429
00:20:55,580 --> 00:21:02,689
level such as the clipboard and prohibit

430
00:20:58,610 --> 00:21:05,120
access to sensitive<font color="#CCCCCC"> ap</font><font color="#E5E5E5"> is that might be</font>

431
00:21:02,690 --> 00:21:12,500
used<font color="#E5E5E5"> to compromise other processes you</font>

432
00:21:05,120 --> 00:21:16,010
<font color="#E5E5E5">can use it also to prevent access to new</font>

433
00:21:12,500 --> 00:21:20,210
granting new handles to<font color="#CCCCCC"> you UI objects</font>

434
00:21:16,010 --> 00:21:31,100
of other processes but that's not that

435
00:21:20,210 --> 00:21:33,560
<font color="#CCCCCC">doesn't</font><font color="#E5E5E5"> give you very much in Windows</font>

436
00:21:31,100 --> 00:21:36,620
<font color="#E5E5E5">Vista there were a couple of interesting</font>

437
00:21:33,560 --> 00:21:42,649
developments you've probably<font color="#E5E5E5"> all heard</font>

438
00:21:36,620 --> 00:21:45,379
of protected mode ie or protected mode

439
00:21:42,650 --> 00:21:48,290
<font color="#E5E5E5">ie is basically running</font><font color="#CCCCCC"> the whole of</font>

440
00:21:45,380 --> 00:21:56,870
<font color="#E5E5E5">windows internet explorer in a somewhat</font>

441
00:21:48,290 --> 00:21:59,510
sandbox mode where the windows sorry the

442
00:21:56,870 --> 00:22:02,360
internet explorer process has been

443
00:21:59,510 --> 00:22:04,850
prohibited from accessing

444
00:22:02,360 --> 00:22:08,870
writing to system resources even though

445
00:22:04,850 --> 00:22:12,290
it's running as the standard user thats

446
00:22:08,870 --> 00:22:14,330
logged in so for<font color="#E5E5E5"> example if you were to</font>

447
00:22:12,290 --> 00:22:17,480
subvert the<font color="#CCCCCC"> internet explorer process</font>

448
00:22:14,330 --> 00:22:20,389
using a exploiting<font color="#E5E5E5"> a vulnerability you</font>

449
00:22:17,480 --> 00:22:21,920
wouldn't be able to<font color="#E5E5E5"> write to the startup</font>

450
00:22:20,390 --> 00:22:24,620
key in the registry for example or

451
00:22:21,920 --> 00:22:27,500
something like that<font color="#E5E5E5"> and you wouldn't be</font>

452
00:22:24,620 --> 00:22:30,080
able to<font color="#E5E5E5"> write executables to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> disk</font>

453
00:22:27,500 --> 00:22:31,400
outside<font color="#E5E5E5"> of a certain temporary internet</font>

454
00:22:30,080 --> 00:22:33,290
folders and temporary<font color="#E5E5E5"> internet files</font>

455
00:22:31,400 --> 00:22:35,660
folder or something like that<font color="#E5E5E5"> and this</font>

456
00:22:33,290 --> 00:22:37,610
is controlled by<font color="#E5E5E5"> something new concept</font>

457
00:22:35,660 --> 00:22:42,140
called mandatory integrity control and

458
00:22:37,610 --> 00:22:45,770
this is mandatory in such a way that

459
00:22:42,140 --> 00:22:49,070
it's always checked when granting out

460
00:22:45,770 --> 00:22:54,230
before granting access<font color="#E5E5E5"> to a new system</font>

461
00:22:49,070 --> 00:22:55,760
resource and it's implemented in such a

462
00:22:54,230 --> 00:22:57,410
way that there's a new access<font color="#E5E5E5"> control</font>

463
00:22:55,760 --> 00:23:01,580
entry in the system access control list

464
00:22:57,410 --> 00:23:03,470
which<font color="#CCCCCC"> is called a mandatory label access</font>

465
00:23:01,580 --> 00:23:05,659
control entry and the<font color="#E5E5E5"> mandatory we label</font>

466
00:23:03,470 --> 00:23:07,940
this<font color="#CCCCCC"> SID if you remember in the access</font>

467
00:23:05,660 --> 00:23:09,530
control entry the<font color="#CCCCCC"> SID and the mandatory</font>

468
00:23:07,940 --> 00:23:12,020
label axis control entry doesn't

469
00:23:09,530 --> 00:23:13,940
identify a user or group that actually

470
00:23:12,020 --> 00:23:16,460
identifies what's called an integrity

471
00:23:13,940 --> 00:23:21,110
level and this integrity<font color="#E5E5E5"> level is</font>

472
00:23:16,460 --> 00:23:23,240
basically a number from<font color="#CCCCCC"> zero to whatever</font>

473
00:23:21,110 --> 00:23:28,760
and there are a number of<font color="#CCCCCC"> different</font>

474
00:23:23,240 --> 00:23:34,010
default assigned numbers with names such

475
00:23:28,760 --> 00:23:41,330
as low medium pink Ian plus<font color="#CCCCCC"> high system</font>

476
00:23:34,010 --> 00:23:43,340
and so and so<font color="#E5E5E5"> on and the type oh sorry</font>

477
00:23:41,330 --> 00:23:46,520
the attributes in the access control

478
00:23:43,340 --> 00:23:49,429
entry<font color="#CCCCCC"> specify policy there can be one of</font>

479
00:23:46,520 --> 00:23:52,129
<font color="#E5E5E5">know right up no read up or no xq up in</font>

480
00:23:49,430 --> 00:23:58,010
Internet Explorer protect mode Internet

481
00:23:52,130 --> 00:24:04,220
Explorer it only used uses the<font color="#CCCCCC"> know</font>

482
00:23:58,010 --> 00:24:06,770
right up policy which means<font color="#CCCCCC"> that this</font>

483
00:24:04,220 --> 00:24:11,270
process running under a lower integrity

484
00:24:06,770 --> 00:24:14,340
level cannot write two objects that have

485
00:24:11,270 --> 00:24:18,179
been tagged<font color="#E5E5E5"> with a higher security as</font>

486
00:24:14,340 --> 00:24:20,309
higher integrity level than low which is

487
00:24:18,179 --> 00:24:22,980
what internet protect mode<font color="#CCCCCC"> Internet</font>

488
00:24:20,309 --> 00:24:26,399
<font color="#CCCCCC">Explorer is running is so most</font>

489
00:24:22,980 --> 00:24:30,480
systematic resources are by default

490
00:24:26,400 --> 00:24:33,960
tagged with the integrity level of

491
00:24:30,480 --> 00:24:36,539
medium rather if there isn't an access

492
00:24:33,960 --> 00:24:38,700
control entry with military label in the

493
00:24:36,539 --> 00:24:43,650
system access control<font color="#E5E5E5"> list or cycle for</font>

494
00:24:38,700 --> 00:24:47,100
in a specific resource it will be

495
00:24:43,650 --> 00:24:50,700
interpreted<font color="#CCCCCC"> as being of integrity level</font>

496
00:24:47,100 --> 00:24:53,399
medium with the no reader policy except

497
00:24:50,700 --> 00:24:56,130
<font color="#E5E5E5">for processes which will be interpreted</font>

498
00:24:53,399 --> 00:25:00,360
<font color="#E5E5E5">as integral medium with an no read up</font>

499
00:24:56,130 --> 00:25:03,480
and no right up sorry I got that wrong

500
00:25:00,360 --> 00:25:06,059
no right up no read up for processes for

501
00:25:03,480 --> 00:25:10,590
every other object it's no right up of

502
00:25:06,059 --> 00:25:13,620
course same as the water Cydonia and<font color="#CCCCCC"> the</font>

503
00:25:10,590 --> 00:25:16,439
reason why processes also have the no

504
00:25:13,620 --> 00:25:19,678
reader policy is to prevent a low

505
00:25:16,440 --> 00:25:21,990
integrity process from reading sensitive

506
00:25:19,679 --> 00:25:24,840
memory from a higher integrity love

507
00:25:21,990 --> 00:25:28,320
process such as maybe<font color="#E5E5E5"> password stored in</font>

508
00:25:24,840 --> 00:25:33,570
memory or something<font color="#CCCCCC"> like that</font><font color="#E5E5E5"> and</font>

509
00:25:28,320 --> 00:25:36,750
anybody can set a lower integrity level

510
00:25:33,570 --> 00:25:39,720
on a system resource<font color="#E5E5E5"> anybody they can</font>

511
00:25:36,750 --> 00:25:41,279
<font color="#E5E5E5">actually set permissions on resource can</font>

512
00:25:39,720 --> 00:25:43,799
set a lower integrity level then they

513
00:25:41,279 --> 00:25:47,730
they that process<font color="#CCCCCC"> or thread themselves</font>

514
00:25:43,799 --> 00:25:50,340
is running as to actually raise the

515
00:25:47,730 --> 00:25:54,390
integrity level of resource or process

516
00:25:50,340 --> 00:25:59,879
you'd need a specific as he real able

517
00:25:54,390 --> 00:26:01,950
privilege to do that so this<font color="#CCCCCC"> is</font>

518
00:25:59,880 --> 00:26:08,279
something you can be used to strengthen

519
00:26:01,950 --> 00:26:10,649
the sandboxing of your processes running

520
00:26:08,279 --> 00:26:14,340
untrusted code or rather parsing

521
00:26:10,649 --> 00:26:18,059
untrusted input to make sure that if

522
00:26:14,340 --> 00:26:20,549
somebody<font color="#E5E5E5"> were to gain execution within</font>

523
00:26:18,059 --> 00:26:23,668
that process they wouldn't<font color="#CCCCCC"> be</font><font color="#E5E5E5"> able to</font>

524
00:26:20,549 --> 00:26:26,908
for example right<font color="#E5E5E5"> to system resources or</font>

525
00:26:23,669 --> 00:26:27,700
whatever policy that you've chosen<font color="#E5E5E5"> to</font>

526
00:26:26,909 --> 00:26:33,010
implement

527
00:26:27,700 --> 00:26:36,250
another thing<font color="#CCCCCC"> that you probably all</font>

528
00:26:33,010 --> 00:26:38,679
pretty familiar with<font color="#E5E5E5"> at this</font><font color="#CCCCCC"> point is</font>

529
00:26:36,250 --> 00:26:42,159
user<font color="#CCCCCC"> act user account control which was</font>

530
00:26:38,679 --> 00:26:44,440
<font color="#E5E5E5">also introduced in Windows Vista and the</font>

531
00:26:42,159 --> 00:26:46,269
idea with the UAC I'm not<font color="#E5E5E5"> going to talk</font>

532
00:26:44,440 --> 00:26:48,309
too<font color="#E5E5E5"> much about this because it's not</font>

533
00:26:46,269 --> 00:26:50,590
<font color="#E5E5E5">really relevant to application security</font>

534
00:26:48,309 --> 00:26:52,960
more than that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> need to be aware</font><font color="#CCCCCC"> of</font>

535
00:26:50,590 --> 00:26:56,049
it as an application developer the idea

536
00:26:52,960 --> 00:26:58,179
is the admin users before<font color="#CCCCCC"> it always be</font>

537
00:26:56,049 --> 00:27:01,059
basically logged in and had<font color="#CCCCCC"> all their</font>

538
00:26:58,179 --> 00:27:03,909
privileges all of their domain admin

539
00:27:01,059 --> 00:27:07,269
groups and everything enabled in their

540
00:27:03,909 --> 00:27:09,820
access token and as you might imagine

541
00:27:07,269 --> 00:27:12,010
people were surfing the web as domain

542
00:27:09,820 --> 00:27:14,408
admin accounts and stuff like that home

543
00:27:12,010 --> 00:27:16,240
<font color="#E5E5E5">users were logging in as dumb as local</font>

544
00:27:14,409 --> 00:27:19,149
administrators and stuff like that so

545
00:27:16,240 --> 00:27:22,899
<font color="#E5E5E5">that that wasn't a very</font><font color="#CCCCCC"> good idea since</font>

546
00:27:19,149 --> 00:27:25,750
any exploit in a web browser or email

547
00:27:22,899 --> 00:27:29,110
application or whatever could then use

548
00:27:25,750 --> 00:27:33,610
those privileges to take up<font color="#E5E5E5"> the computer</font>

549
00:27:29,110 --> 00:27:37,299
so what Microsoft ride to do is force

550
00:27:33,610 --> 00:27:39,639
third-party<font color="#E5E5E5"> developers to not assume</font>

551
00:27:37,299 --> 00:27:42,668
that the user would have these admin

552
00:27:39,639 --> 00:27:45,639
privileges so for<font color="#E5E5E5"> example not assume</font>

553
00:27:42,669 --> 00:27:47,710
like that you're on<font color="#CCCCCC"> Windows 95</font><font color="#E5E5E5"> or</font>

554
00:27:45,639 --> 00:27:49,600
whatever and start writing configuration

555
00:27:47,710 --> 00:27:53,769
files in the program files directory and

556
00:27:49,600 --> 00:27:56,980
stuff like that<font color="#CCCCCC"> but</font><font color="#E5E5E5"> actually use the</font>

557
00:27:53,769 --> 00:28:00,789
user profile and the H key current user

558
00:27:56,980 --> 00:28:04,419
type of the registry to store those

559
00:28:00,789 --> 00:28:07,779
things and it's interesting<font color="#CCCCCC"> at least to</font>

560
00:28:04,419 --> 00:28:12,220
mention how<font color="#CCCCCC"> they did that they</font>

561
00:28:07,779 --> 00:28:15,820
introduced in the token something called

562
00:28:12,220 --> 00:28:17,500
<font color="#E5E5E5">a link token and basically what that</font>

563
00:28:15,820 --> 00:28:20,710
means is that a token can have a flag

564
00:28:17,500 --> 00:28:25,539
set that says that this token has is

565
00:28:20,710 --> 00:28:28,419
basically a<font color="#E5E5E5"> lower level token of an</font>

566
00:28:25,539 --> 00:28:33,190
administrator or something like that<font color="#CCCCCC"> so</font>

567
00:28:28,419 --> 00:28:34,750
it would set a bit in a bit field flag

568
00:28:33,190 --> 00:28:37,000
field and it was set a pointer to

569
00:28:34,750 --> 00:28:39,669
another token that is the actual token

570
00:28:37,000 --> 00:28:41,860
of the system administrator with the

571
00:28:39,669 --> 00:28:47,290
privileges<font color="#CCCCCC"> of the system at ministry</font>

572
00:28:41,860 --> 00:28:51,459
that been restricted and as you remember

573
00:28:47,290 --> 00:28:55,330
the process count itself change its

574
00:28:51,460 --> 00:28:57,580
primary token so they also introduced a

575
00:28:55,330 --> 00:28:58,928
new service running with system

576
00:28:57,580 --> 00:29:05,260
privileges called the app info service

577
00:28:58,929 --> 00:29:10,090
that is triggered<font color="#CCCCCC"> by the</font><font color="#E5E5E5"> windows GUI or</font>

578
00:29:05,260 --> 00:29:12,460
the windows shell when it for example

579
00:29:10,090 --> 00:29:14,620
<font color="#CCCCCC">sees that this might be a setup</font><font color="#E5E5E5"> program</font>

580
00:29:12,460 --> 00:29:16,870
that you're<font color="#E5E5E5"> running or you're trying to</font>

581
00:29:14,620 --> 00:29:21,699
copy files to a directory where which

582
00:29:16,870 --> 00:29:25,479
you're not<font color="#CCCCCC"> allowed to write to and the</font>

583
00:29:21,700 --> 00:29:27,309
windows shell or<font color="#CCCCCC"> windows UI components</font>

584
00:29:25,480 --> 00:29:29,380
would then call<font color="#E5E5E5"> into this up info</font>

585
00:29:27,309 --> 00:29:31,480
service saying we need to request

586
00:29:29,380 --> 00:29:33,669
elevation for this<font color="#E5E5E5"> particular threat</font>

587
00:29:31,480 --> 00:29:35,500
that wants to copy files to protect the

588
00:29:33,669 --> 00:29:38,049
directory or something like that and the

589
00:29:35,500 --> 00:29:40,929
app info service would then first of all

590
00:29:38,049 --> 00:29:44,679
switch to the log on desktop protected

591
00:29:40,929 --> 00:29:47,679
desktop and display the credential

592
00:29:44,679 --> 00:29:49,630
prompt and for a logged-in administrator

593
00:29:47,679 --> 00:29:53,799
this would actually not be a credential

594
00:29:49,630 --> 00:29:56,590
prompt it would be a consent prompt that

595
00:29:53,799 --> 00:29:58,900
you've all seen if you've<font color="#E5E5E5"> run as admin</font>

596
00:29:56,590 --> 00:30:04,750
on vista which has a continued in a

597
00:29:58,900 --> 00:30:07,090
cancel button if you're if you've got an

598
00:30:04,750 --> 00:30:08,860
application<font color="#CCCCCC"> that actually needs admin</font>

599
00:30:07,090 --> 00:30:10,689
privileges such as a set of application

600
00:30:08,860 --> 00:30:13,449
or something like that then there's a

601
00:30:10,690 --> 00:30:16,210
<font color="#CCCCCC">method of requesting the admin rights to</font>

602
00:30:13,450 --> 00:30:19,780
be enabled so basically triggering this

603
00:30:16,210 --> 00:30:23,980
elevation process and that's controlled

604
00:30:19,780 --> 00:30:31,360
<font color="#CCCCCC">by a key in the manifest of the</font>

605
00:30:23,980 --> 00:30:34,450
executable by the way all this<font color="#CCCCCC"> material</font>

606
00:30:31,360 --> 00:30:35,949
is written up in a far more eloquent

607
00:30:34,450 --> 00:30:38,260
manner than I can present today being

608
00:30:35,950 --> 00:30:40,929
<font color="#E5E5E5">Jeff like</font><font color="#CCCCCC"> more in the white paper that</font>

609
00:30:38,260 --> 00:30:43,480
you'll find<font color="#E5E5E5"> both on the conference DVD</font>

610
00:30:40,929 --> 00:30:45,190
and hopefully as well on the conference

611
00:30:43,480 --> 00:30:46,660
website after the conference so I

612
00:30:45,190 --> 00:30:54,210
encourage<font color="#E5E5E5"> you all to go read that</font>

613
00:30:46,660 --> 00:31:00,450
afterwards so enough about<font color="#E5E5E5"> that</font>

614
00:30:54,210 --> 00:31:03,900
as a side effect of UAC we now have

615
00:31:00,450 --> 00:31:11,160
processes running on the same desktop

616
00:31:03,900 --> 00:31:13,260
that might have different access tokens

617
00:31:11,160 --> 00:31:15,090
of different privilege levels so you

618
00:31:13,260 --> 00:31:18,810
might have some that are running as a

619
00:31:15,090 --> 00:31:21,240
standard user and some<font color="#E5E5E5"> that have been</font>

620
00:31:18,810 --> 00:31:23,730
elevated the running as death domain

621
00:31:21,240 --> 00:31:25,050
admins on the same desktop and if these

622
00:31:23,730 --> 00:31:28,620
processes have windows on<font color="#CCCCCC"> the same</font>

623
00:31:25,050 --> 00:31:30,120
desktop they can also post messages to

624
00:31:28,620 --> 00:31:33,360
each other's<font color="#CCCCCC"> Windows message queues</font>

625
00:31:30,120 --> 00:31:35,909
which I as i said earlier can lead to

626
00:31:33,360 --> 00:31:38,100
some security problems for example there

627
00:31:35,910 --> 00:31:40,650
are some messages that when handled by

628
00:31:38,100 --> 00:31:43,889
the default handler basically are

629
00:31:40,650 --> 00:31:46,050
treated as<font color="#E5E5E5"> a function pointer and</font>

630
00:31:43,890 --> 00:31:51,720
redirect execution to an arbitrary

631
00:31:46,050 --> 00:31:55,290
memory address which is<font color="#E5E5E5"> quite nasty and</font>

632
00:31:51,720 --> 00:32:01,050
to try<font color="#E5E5E5"> to mitigate this problem</font>

633
00:31:55,290 --> 00:32:03,300
microsoft introduced a feature called

634
00:32:01,050 --> 00:32:07,110
you ipi or user interface<font color="#E5E5E5"> privilege</font>

635
00:32:03,300 --> 00:32:10,649
isolation and it implements a kind<font color="#E5E5E5"> of</font>

636
00:32:07,110 --> 00:32:14,340
filter of approved windows messages that

637
00:32:10,650 --> 00:32:16,800
can be<font color="#E5E5E5"> sent between windows are</font>

638
00:32:14,340 --> 00:32:20,669
different integrity levels so for

639
00:32:16,800 --> 00:32:24,120
<font color="#E5E5E5">example if I were to exploit a</font>

640
00:32:20,670 --> 00:32:26,220
vulnerability in internet explorer or<font color="#E5E5E5"> a</font>

641
00:32:24,120 --> 00:32:30,629
<font color="#E5E5E5">plug-in of Internet Explorer and get</font>

642
00:32:26,220 --> 00:32:33,450
<font color="#E5E5E5">access to that process of course I have</font>

643
00:32:30,630 --> 00:32:36,750
a window open on the users desktop where

644
00:32:33,450 --> 00:32:38,880
he might have<font color="#E5E5E5"> some other applications</font>

645
00:32:36,750 --> 00:32:42,360
that's been elevated to domain admin

646
00:32:38,880 --> 00:32:44,340
privileges but<font color="#E5E5E5"> since the protector mode</font>

647
00:32:42,360 --> 00:32:49,379
Internet Explorer is running as low I

648
00:32:44,340 --> 00:32:52,949
out I can't send anything but benign

649
00:32:49,380 --> 00:32:54,600
messages there on this white list<font color="#E5E5E5"> to</font>

650
00:32:52,950 --> 00:32:57,420
other processes of higher integrity club

651
00:32:54,600 --> 00:33:01,740
and this message filter can actually be

652
00:32:57,420 --> 00:33:04,140
changed using change windows message

653
00:33:01,740 --> 00:33:08,250
filter oddly<font color="#CCCCCC"> enough</font>

654
00:33:04,140 --> 00:33:11,640
but of course processes that are at or

655
00:33:08,250 --> 00:33:15,810
at low integrity level or below that

656
00:33:11,640 --> 00:33:18,210
level you can't use this API so it's

657
00:33:15,810 --> 00:33:20,730
it's it's interesting to know<font color="#CCCCCC"> that it's</font>

658
00:33:18,210 --> 00:33:23,400
there<font color="#E5E5E5"> it does give you some kind of</font>

659
00:33:20,730 --> 00:33:30,720
protection if you're using mandatory

660
00:33:23,400 --> 00:33:33,540
levels to to restrict a low privilege

661
00:33:30,720 --> 00:33:35,490
process from tampering with the rest of

662
00:33:33,540 --> 00:33:42,300
<font color="#E5E5E5">the system but otherwise it's not that</font>

663
00:33:35,490 --> 00:33:48,180
<font color="#CCCCCC">interesting right before</font><font color="#E5E5E5"> I go on to</font>

664
00:33:42,300 --> 00:33:50,970
specific counter exploitation measures

665
00:33:48,180 --> 00:33:54,330
the<font color="#E5E5E5"> Microsoft has developed during years</font>

666
00:33:50,970 --> 00:33:55,560
I<font color="#E5E5E5"> just put in this slide here just to</font>

667
00:33:54,330 --> 00:33:56,909
make sure that<font color="#CCCCCC"> everybody knows have</font>

668
00:33:55,560 --> 00:34:00,899
memory protection works on<font color="#E5E5E5"> Windows</font>

669
00:33:56,910 --> 00:34:04,230
basically your Intel<font color="#CCCCCC"> Hardware can</font>

670
00:34:00,900 --> 00:34:08,370
enforce access permissions on a memory

671
00:34:04,230 --> 00:34:12,750
page basis so next<font color="#E5E5E5"> 8 x86</font><font color="#CCCCCC"> and memory</font>

672
00:34:08,370 --> 00:34:17,759
pages<font color="#E5E5E5"> 4k and each 4k physical memory</font>

673
00:34:12,750 --> 00:34:19,380
page has a bit filled with basically

674
00:34:17,760 --> 00:34:22,980
<font color="#E5E5E5">three bits controlling access to that</font>

675
00:34:19,380 --> 00:34:28,770
page saying is this page allowed to be

676
00:34:22,980 --> 00:34:31,620
read written or executed and the CPU

677
00:34:28,770 --> 00:34:34,139
will check these bits before reading

678
00:34:31,620 --> 00:34:38,489
writing or executing<font color="#CCCCCC"> putting data from</font>

679
00:34:34,139 --> 00:34:42,690
this<font color="#E5E5E5"> page and if these permissions are</font>

680
00:34:38,489 --> 00:34:44,250
if rather you try to read from a rewrite

681
00:34:42,690 --> 00:34:46,260
only page will write from a read-only

682
00:34:44,250 --> 00:34:48,989
page where we try to execute from pages

683
00:34:46,260 --> 00:34:53,340
doesn't have the X bit so that it will

684
00:34:48,989 --> 00:34:55,020
raise a page page fault for the system

685
00:34:53,340 --> 00:34:56,490
to take care<font color="#E5E5E5"> of and then windows can</font>

686
00:34:55,020 --> 00:34:58,470
step in and say well you've done

687
00:34:56,489 --> 00:35:02,759
something wrong<font color="#E5E5E5"> and in the old days and</font>

688
00:34:58,470 --> 00:35:06,330
you have the infamous<font color="#CCCCCC"> gpf and</font>

689
00:35:02,760 --> 00:35:07,500
these days you<font color="#E5E5E5"> get an exception and if</font>

690
00:35:06,330 --> 00:35:11,130
the exception isn't handled by<font color="#E5E5E5"> the</font>

691
00:35:07,500 --> 00:35:15,990
application then<font color="#E5E5E5"> dr. Watson steps in you</font>

692
00:35:11,130 --> 00:35:19,920
get the Microsoft<font color="#E5E5E5"> crash under these</font>

693
00:35:15,990 --> 00:35:23,220
memory protections are set when you

694
00:35:19,920 --> 00:35:24,600
allocate memory and usually you're

695
00:35:23,220 --> 00:35:26,730
probably using some kind of the heap

696
00:35:24,600 --> 00:35:28,920
handler to allocate memory but it all

697
00:35:26,730 --> 00:35:36,360
boils down to these functions virtual a

698
00:35:28,920 --> 00:35:41,340
lock which is which allocates memory on

699
00:35:36,360 --> 00:35:42,660
a page page by page basis and when you

700
00:35:41,340 --> 00:35:45,030
call virtual I like you can also specify

701
00:35:42,660 --> 00:35:47,879
<font color="#E5E5E5">the page permissions for that particular</font>

702
00:35:45,030 --> 00:35:50,790
chunk of memory that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> are located and</font>

703
00:35:47,880 --> 00:35:57,060
you can also change page permissions for

704
00:35:50,790 --> 00:36:02,940
an arbitrary range of pages you know

705
00:35:57,060 --> 00:36:04,799
using<font color="#CCCCCC"> the virtual protect call right no</font>

706
00:36:02,940 --> 00:36:08,340
more about that let's get<font color="#E5E5E5"> to exploit</font>

707
00:36:04,800 --> 00:36:11,940
mitigations since the trustworthy

708
00:36:08,340 --> 00:36:14,790
computing memo Bill Gates back in 2002 i

709
00:36:11,940 --> 00:36:18,150
think it was<font color="#CCCCCC"> microsoft's worked very</font>

710
00:36:14,790 --> 00:36:21,450
hard at both<font color="#E5E5E5"> improving the security of</font>

711
00:36:18,150 --> 00:36:27,390
their code but also improving the

712
00:36:21,450 --> 00:36:29,700
resilience to exploitation so some of

713
00:36:27,390 --> 00:36:33,509
the mitigations they put in place<font color="#CCCCCC"> in</font>

714
00:36:29,700 --> 00:36:38,160
their tool chain and in windows are

715
00:36:33,510 --> 00:36:40,020
interesting to application developers

716
00:36:38,160 --> 00:36:42,029
because some of them you actually<font color="#E5E5E5"> get a</font>

717
00:36:40,020 --> 00:36:44,580
lot of<font color="#E5E5E5"> protection for free without doing</font>

718
00:36:42,030 --> 00:36:47,580
anything some of<font color="#E5E5E5"> them you</font><font color="#CCCCCC"> actually have</font>

719
00:36:44,580 --> 00:36:49,319
to be aware of and you make use of<font color="#E5E5E5"> and</font>

720
00:36:47,580 --> 00:36:53,940
enable yourself for them to be

721
00:36:49,320 --> 00:36:57,930
effectively<font color="#CCCCCC"> presenting</font><font color="#E5E5E5"> your process so</font>

722
00:36:53,940 --> 00:37:00,060
we'll<font color="#E5E5E5"> start with</font><font color="#CCCCCC"> the GS / TS</font><font color="#E5E5E5"> or stack</font>

723
00:36:57,930 --> 00:37:01,830
over<font color="#CCCCCC"> eye protection</font><font color="#E5E5E5"> this is one of the</font>

724
00:37:00,060 --> 00:37:05,430
first exploit mitigations<font color="#E5E5E5"> of</font><font color="#CCCCCC"> microsoft</font>

725
00:37:01,830 --> 00:37:08,310
<font color="#CCCCCC">put in place and</font><font color="#E5E5E5"> it's developed quite a</font>

726
00:37:05,430 --> 00:37:10,140
lot during the years so with each<font color="#CCCCCC"> new</font>

727
00:37:08,310 --> 00:37:12,170
release<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> toolchain with visual</font>

728
00:37:10,140 --> 00:37:12,170
studio

729
00:37:12,539 --> 00:37:20,669
it gets<font color="#E5E5E5"> better and better and harder to</font>

730
00:37:16,019 --> 00:37:23,189
circumvent and it basically works by

731
00:37:20,669 --> 00:37:25,288
pushing in a cookie value in the<font color="#E5E5E5"> state</font>

732
00:37:23,189 --> 00:37:27,029
<font color="#E5E5E5">in each stack frame</font><font color="#CCCCCC"> and making sure that</font>

733
00:37:25,289 --> 00:37:30,479
<font color="#E5E5E5">when you return from a function that</font>

734
00:37:27,029 --> 00:37:32,249
<font color="#CCCCCC">this cookie value is in fact that it</font>

735
00:37:30,479 --> 00:37:35,879
hasn't been overwritten by for example a

736
00:37:32,249 --> 00:37:38,098
stack over stack buffer overflow so it

737
00:37:35,880 --> 00:37:39,719
protects the return address from a

738
00:37:38,099 --> 00:37:43,229
standard stack buffer overflow

739
00:37:39,719 --> 00:37:44,849
vulnerability and it's also protects of

740
00:37:43,229 --> 00:37:47,279
writing stack variables so if you've got

741
00:37:44,849 --> 00:37:50,249
<font color="#CCCCCC">a memory pointer on the stack for</font>

742
00:37:47,279 --> 00:37:53,459
example that could be manipulated<font color="#CCCCCC"> by a</font>

743
00:37:50,249 --> 00:37:55,948
buffer overrun that could<font color="#E5E5E5"> be protected</font>

744
00:37:53,459 --> 00:37:57,779
as well and this<font color="#E5E5E5"> has been</font><font color="#CCCCCC"> a default</font>

745
00:37:55,949 --> 00:37:59,549
compiler option actually since visual

746
00:37:57,779 --> 00:38:01,679
studio to thousands free so if you're

747
00:37:59,549 --> 00:38:03,779
using latest version<font color="#CCCCCC"> Visual Studio</font>

748
00:38:01,679 --> 00:38:06,989
<font color="#E5E5E5">latest version of the Microsoft tool</font>

749
00:38:03,779 --> 00:38:09,479
chain you'll probably you probably

750
00:38:06,989 --> 00:38:16,199
<font color="#CCCCCC">already protected by this if you haven't</font>

751
00:38:09,479 --> 00:38:17,848
switched off that is but buffers can not

752
00:38:16,199 --> 00:38:20,339
only be on the stack larger buffers are

753
00:38:17,849 --> 00:38:22,979
often more often that allocated on the

754
00:38:20,339 --> 00:38:25,499
heap<font color="#CCCCCC"> and there have been a lot of talks</font>

755
00:38:22,979 --> 00:38:29,009
recently a recent black egg conventions

756
00:38:25,499 --> 00:38:37,439
about exploiting heap buffer overflows

757
00:38:29,009 --> 00:38:39,839
so just as with the<font color="#E5E5E5"> slash GS protections</font>

758
00:38:37,439 --> 00:38:41,609
in the tool chain in<font color="#CCCCCC"> Windows and them in</font>

759
00:38:39,839 --> 00:38:45,719
the default<font color="#E5E5E5"> he panda myself to have</font>

760
00:38:41,609 --> 00:38:53,880
implemented some exploit mitigations to

761
00:38:45,719 --> 00:38:56,429
try to prevent<font color="#E5E5E5"> a buffer overflow on a</font>

762
00:38:53,880 --> 00:38:58,409
heap allocated buffer from becoming a

763
00:38:56,429 --> 00:39:00,150
large security problem so the first

764
00:38:58,409 --> 00:39:02,939
<font color="#CCCCCC">thing</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> they did</font><font color="#E5E5E5"> was implement</font>

765
00:39:00,150 --> 00:39:05,969
checking of forward and backward links

766
00:39:02,939 --> 00:39:09,509
when unlinking chunks or allocated

767
00:39:05,969 --> 00:39:11,189
regions in heap so basically<font color="#E5E5E5"> in a</font>

768
00:39:09,509 --> 00:39:15,689
standard heap and manager you would have

769
00:39:11,189 --> 00:39:17,339
linked lists of blocks of memory<font color="#CCCCCC"> there</font>

770
00:39:15,689 --> 00:39:19,019
<font color="#CCCCCC">are either on</font><font color="#E5E5E5"> the free list waiting to</font>

771
00:39:17,339 --> 00:39:22,469
be<font color="#CCCCCC"> allocated</font><font color="#E5E5E5"> or on the advocated list</font>

772
00:39:19,019 --> 00:39:25,049
and when you call free they're taken<font color="#E5E5E5"> out</font>

773
00:39:22,469 --> 00:39:26,460
of the allocating list and when they're

774
00:39:25,049 --> 00:39:28,259
done<font color="#E5E5E5"> when you're doing that you're</font>

775
00:39:26,460 --> 00:39:30,930
basically just unlinking it from an

776
00:39:28,260 --> 00:39:32,099
<font color="#E5E5E5">omelet from a doubly linked list so</font>

777
00:39:30,930 --> 00:39:37,290
you've got forward and backward links

778
00:39:32,099 --> 00:39:39,990
<font color="#E5E5E5">they are spliced in it too and if you</font>

779
00:39:37,290 --> 00:39:43,080
can overwrite this metadata on<font color="#E5E5E5"> the heat</font>

780
00:39:39,990 --> 00:39:47,368
then you can actually use<font color="#CCCCCC"> that to write</font>

781
00:39:43,080 --> 00:39:51,210
arbitrary values over aight arbitrary

782
00:39:47,369 --> 00:39:54,210
values in memory and an easy<font color="#E5E5E5"> check is</font>

783
00:39:51,210 --> 00:39:55,770
just to check<font color="#E5E5E5"> that the forward and</font>

784
00:39:54,210 --> 00:39:58,320
<font color="#E5E5E5">backward links are actually pointing to</font>

785
00:39:55,770 --> 00:40:01,230
two chunks that are pointing back to the

786
00:39:58,320 --> 00:40:04,589
original chunk to make sure that the

787
00:40:01,230 --> 00:40:07,349
links you<font color="#E5E5E5"> following are being forged and</font>

788
00:40:04,589 --> 00:40:10,049
that was implemented<font color="#E5E5E5"> in XP so it's back</font>

789
00:40:07,349 --> 00:40:13,080
to but there<font color="#E5E5E5"> are more advanced</font>

790
00:40:10,050 --> 00:40:15,720
protections in place in<font color="#E5E5E5"> vista for</font>

791
00:40:13,080 --> 00:40:20,759
example later versions<font color="#E5E5E5"> such as</font>

792
00:40:15,720 --> 00:40:24,390
encrypting or rather obscure ting

793
00:40:20,760 --> 00:40:27,720
metadata and using<font color="#E5E5E5"> check sums to</font>

794
00:40:24,390 --> 00:40:29,339
validate the integrity of metadata other

795
00:40:27,720 --> 00:40:33,000
than<font color="#E5E5E5"> just the forward and backward links</font>

796
00:40:29,339 --> 00:40:40,349
and these<font color="#E5E5E5"> are you actually need</font><font color="#CCCCCC"> to</font>

797
00:40:33,000 --> 00:40:42,330
enable because they well Nathan aren't

798
00:40:40,349 --> 00:40:49,170
enabled by default you have to set with

799
00:40:42,330 --> 00:40:50,609
<font color="#CCCCCC">the heap set information</font><font color="#E5E5E5"> API call and</font>

800
00:40:49,170 --> 00:40:55,200
the heap enable termination<font color="#E5E5E5"> on</font>

801
00:40:50,609 --> 00:40:57,598
corruption information class you can

802
00:40:55,200 --> 00:41:00,270
enable these protections so that when

803
00:40:57,599 --> 00:41:03,000
heap corruption is detected by these

804
00:41:00,270 --> 00:41:05,369
exploit mitigations your process will

805
00:41:03,000 --> 00:41:07,050
die instead<font color="#CCCCCC"> of being</font><font color="#E5E5E5"> taken over by an</font>

806
00:41:05,369 --> 00:41:10,770
attacker which is<font color="#E5E5E5"> infinitely more</font>

807
00:41:07,050 --> 00:41:12,839
preferable to our security<font color="#CCCCCC"> people so</font>

808
00:41:10,770 --> 00:41:14,609
there's<font color="#E5E5E5"> something you need to be aware</font>

809
00:41:12,839 --> 00:41:17,130
of as an development as a developer<font color="#CCCCCC"> that</font>

810
00:41:14,609 --> 00:41:18,990
each process needs to<font color="#E5E5E5"> in its</font>

811
00:41:17,130 --> 00:41:22,440
initialization routines call this API

812
00:41:18,990 --> 00:41:25,500
call to enable these protections and of

813
00:41:22,440 --> 00:41:27,450
course don't use<font color="#E5E5E5"> your own malik don't</font>

814
00:41:25,500 --> 00:41:29,430
use<font color="#E5E5E5"> your own</font><font color="#CCCCCC"> malcolm entation don't use</font>

815
00:41:27,450 --> 00:41:33,930
your<font color="#E5E5E5"> own he panda because you won't be</font>

816
00:41:29,430 --> 00:41:36,960
protected by these exploit mitigations

817
00:41:33,930 --> 00:41:39,000
in the default<font color="#E5E5E5"> Windows heap under so for</font>

818
00:41:36,960 --> 00:41:39,630
example<font color="#E5E5E5"> I Adobe got bitten by this in</font>

819
00:41:39,000 --> 00:41:43,290
flat

820
00:41:39,630 --> 00:41:45,120
shortly they had their own old Malik

821
00:41:43,290 --> 00:41:48,240
implementation statically linked in

822
00:41:45,120 --> 00:41:50,100
which had all these which had none<font color="#CCCCCC"> of</font>

823
00:41:48,240 --> 00:41:53,399
these<font color="#E5E5E5"> features rather and was wide open</font>

824
00:41:50,100 --> 00:41:56,880
to exploitation whereas have they just

825
00:41:53,400 --> 00:41:58,530
used a compatibility layer that

826
00:41:56,880 --> 00:41:59,970
forwarded all this<font color="#E5E5E5"> done to the default</font>

827
00:41:58,530 --> 00:42:04,980
Windows heap handler<font color="#CCCCCC"> on the platform</font>

828
00:41:59,970 --> 00:42:06,779
they were using at least people using

829
00:42:04,980 --> 00:42:08,190
modern operating systems would have been

830
00:42:06,780 --> 00:42:14,340
protected from some of these exploits

831
00:42:08,190 --> 00:42:18,540
another<font color="#E5E5E5"> popular exploitation technique</font>

832
00:42:14,340 --> 00:42:25,740
is overwriting<font color="#E5E5E5"> XP sorry overwriting</font>

833
00:42:18,540 --> 00:42:29,250
exception handling exception handler<font color="#E5E5E5"> in</font>

834
00:42:25,740 --> 00:42:31,020
function pointers on the stack so for

835
00:42:29,250 --> 00:42:32,580
example<font color="#E5E5E5"> if</font><font color="#CCCCCC"> you've got a stack buffer</font>

836
00:42:31,020 --> 00:42:36,150
overflow instead of overwriting the

837
00:42:32,580 --> 00:42:38,850
return address you could write a

838
00:42:36,150 --> 00:42:40,830
function pointer that got pushed<font color="#CCCCCC"> onto</font>

839
00:42:38,850 --> 00:42:46,380
<font color="#CCCCCC">the stack when you entered into a block</font>

840
00:42:40,830 --> 00:42:47,549
protected by an exception hunter and

841
00:42:46,380 --> 00:42:50,790
learn a couple of mitigations that

842
00:42:47,550 --> 00:42:53,790
windows is that can help you with this

843
00:42:50,790 --> 00:42:56,400
the first one which has been a lot a

844
00:42:53,790 --> 00:43:00,300
rope around for a long time is called

845
00:42:56,400 --> 00:43:03,120
safe seh and safety seh basically uses

846
00:43:00,300 --> 00:43:06,540
the<font color="#CCCCCC"> tool chain to insert a table of</font>

847
00:43:03,120 --> 00:43:09,750
known good export sorry XP exception

848
00:43:06,540 --> 00:43:12,150
handlers within<font color="#CCCCCC"> every module so when</font>

849
00:43:09,750 --> 00:43:14,850
<font color="#E5E5E5">windows gets an exception and picks up</font>

850
00:43:12,150 --> 00:43:16,110
the pointer to the exception handler

851
00:43:14,850 --> 00:43:17,819
from the stack it can verify that

852
00:43:16,110 --> 00:43:20,010
<font color="#E5E5E5">against</font><font color="#CCCCCC"> the table to see that it's</font>

853
00:43:17,820 --> 00:43:23,040
<font color="#E5E5E5">actually a known good exception handler</font>

854
00:43:20,010 --> 00:43:24,720
before it jumps to it and this is

855
00:43:23,040 --> 00:43:29,550
controlled by the or<font color="#E5E5E5"> you can actually</font>

856
00:43:24,720 --> 00:43:31,740
<font color="#CCCCCC">use the safe seh linker option to make</font>

857
00:43:29,550 --> 00:43:36,240
sure that your modules do have this

858
00:43:31,740 --> 00:43:42,569
table of<font color="#E5E5E5"> known exception handlers within</font>

859
00:43:36,240 --> 00:43:45,720
the module this has been<font color="#E5E5E5"> around forever</font>

860
00:43:42,570 --> 00:43:48,720
as well but<font color="#E5E5E5"> not everybody make</font><font color="#CCCCCC"> sure that</font>

861
00:43:45,720 --> 00:43:51,720
they<font color="#E5E5E5"> actually do have it in place and if</font>

862
00:43:48,720 --> 00:43:53,129
you as an application developer don't

863
00:43:51,720 --> 00:43:55,078
have this in place we

864
00:43:53,130 --> 00:43:57,299
they're all modules of your application

865
00:43:55,079 --> 00:44:02,309
then the user<font color="#E5E5E5"> won't benefit from the</font>

866
00:43:57,299 --> 00:44:05,788
exploit mitigations in windows vista

867
00:44:02,309 --> 00:44:08,099
service pack 1 and later operating

868
00:44:05,789 --> 00:44:11,009
systems there's an even better exploit

869
00:44:08,099 --> 00:44:14,069
mitigation for SCH overwrites which is

870
00:44:11,009 --> 00:44:17,279
called<font color="#CCCCCC"> su hop or seh over eye protection</font>

871
00:44:14,069 --> 00:44:19,079
which actually check checks the

872
00:44:17,279 --> 00:44:21,000
integrity of the whole chain of

873
00:44:19,079 --> 00:44:26,309
exception handlers all the way back down

874
00:44:21,000 --> 00:44:29,789
to the<font color="#E5E5E5"> default exception handler which</font>

875
00:44:26,309 --> 00:44:35,880
is much stronger and to date so there

876
00:44:29,789 --> 00:44:42,119
hasn't been any practical ways to

877
00:44:35,880 --> 00:44:45,690
circumvent this protection unfortunately

878
00:44:42,119 --> 00:44:48,509
in<font color="#E5E5E5"> Vista and client systems this isn't</font>

879
00:44:45,690 --> 00:44:51,210
enabled by default so as an application

880
00:44:48,509 --> 00:44:53,099
developer it it's hard to make use of

881
00:44:51,210 --> 00:44:56,220
this because<font color="#E5E5E5"> it actually has to be</font>

882
00:44:53,099 --> 00:44:58,079
<font color="#E5E5E5">enabled on each client platform on</font>

883
00:44:56,220 --> 00:45:01,288
servers this is enabled so if you're

884
00:44:58,079 --> 00:45:03,390
writing server applications then you

885
00:45:01,289 --> 00:45:06,299
probably will benefit from<font color="#E5E5E5"> that</font>

886
00:45:03,390 --> 00:45:08,609
protection but a lot of client systems

887
00:45:06,299 --> 00:45:15,299
<font color="#E5E5E5">today on hardened to the level that</font>

888
00:45:08,609 --> 00:45:17,220
<font color="#E5E5E5">they've enabled these features to other</font>

889
00:45:15,299 --> 00:45:20,400
features that<font color="#E5E5E5"> you probably heard of</font>

890
00:45:17,220 --> 00:45:21,450
already but worth mentioning because you

891
00:45:20,400 --> 00:45:24,480
need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be aware</font><font color="#CCCCCC"> of them as an</font>

892
00:45:21,450 --> 00:45:27,390
application developer<font color="#CCCCCC"> are d'Epinay islam</font>

893
00:45:24,480 --> 00:45:29,789
now dedicate execution prevention is

894
00:45:27,390 --> 00:45:30,868
basically making use of the page

895
00:45:29,789 --> 00:45:35,759
permissions that we talked<font color="#E5E5E5"> about earlier</font>

896
00:45:30,869 --> 00:45:38,970
to make sure that the for example<font color="#CCCCCC"> the</font>

897
00:45:35,759 --> 00:45:43,079
pages containing the stack cannot be

898
00:45:38,970 --> 00:45:46,500
executed<font color="#E5E5E5"> so you can no longer it insert</font>

899
00:45:43,079 --> 00:45:49,559
shellcode and your buffer overflow in in

900
00:45:46,500 --> 00:45:55,140
the buffer that overflows the buffer on

901
00:45:49,559 --> 00:45:59,460
<font color="#E5E5E5">the stack so it basically sets the</font>

902
00:45:55,140 --> 00:46:04,019
executable bit only<font color="#CCCCCC"> on memory pages that</font>

903
00:45:59,460 --> 00:46:06,900
contain executable code unfortunately

904
00:46:04,019 --> 00:46:10,740
for backwards compatibility reasons

905
00:46:06,900 --> 00:46:12,569
this isn't enabled on all systems so

906
00:46:10,740 --> 00:46:16,470
client system still doesn't have<font color="#E5E5E5"> this</font>

907
00:46:12,569 --> 00:46:19,049
enabled for every process so i won't go

908
00:46:16,470 --> 00:46:20,640
through which systems have which policy

909
00:46:19,049 --> 00:46:22,980
but there are different policies like

910
00:46:20,640 --> 00:46:24,930
opt-in opt-out always on always off

911
00:46:22,980 --> 00:46:28,770
always on always offer self-explanatory

912
00:46:24,930 --> 00:46:33,359
opt-in means that a process needs to be

913
00:46:28,770 --> 00:46:37,440
<font color="#CCCCCC">DEP</font><font color="#E5E5E5"> aware and say I support this please</font>

914
00:46:33,359 --> 00:46:40,319
enable that from my process opt-out

915
00:46:37,440 --> 00:46:42,359
means that it's used for all processes

916
00:46:40,319 --> 00:46:48,750
except<font color="#E5E5E5"> for certain processes are on</font>

917
00:46:42,359 --> 00:46:51,029
exclusion list there is a way for<font color="#E5E5E5"> you as</font>

918
00:46:48,750 --> 00:46:53,970
an application developer to actually

919
00:46:51,029 --> 00:46:56,279
enable this for your process on all

920
00:46:53,970 --> 00:46:59,578
systems except the always off systems of

921
00:46:56,279 --> 00:47:05,190
course which<font color="#CCCCCC"> is by calling set process</font>

922
00:46:59,579 --> 00:47:09,240
debt policy API and that's basically a

923
00:47:05,190 --> 00:47:11,789
<font color="#E5E5E5">one-time call that you can do in your</font>

924
00:47:09,240 --> 00:47:14,069
initialization routines that will enable

925
00:47:11,789 --> 00:47:15,720
debt for the<font color="#E5E5E5"> whole process and will make</font>

926
00:47:14,069 --> 00:47:17,490
<font color="#E5E5E5">it impossible to turn off that for that</font>

927
00:47:15,720 --> 00:47:21,390
process as well so you can't call it

928
00:47:17,490 --> 00:47:26,939
again to turn it<font color="#E5E5E5"> off</font><font color="#CCCCCC"> for example as</font>

929
00:47:21,390 --> 00:47:29,819
<font color="#CCCCCC">stepping an attack you also</font><font color="#E5E5E5"> need to be</font>

930
00:47:26,940 --> 00:47:32,400
aware<font color="#E5E5E5"> of the NX compat linker option</font>

931
00:47:29,819 --> 00:47:34,710
which you should<font color="#CCCCCC"> be using to make sure</font>

932
00:47:32,400 --> 00:47:40,200
that the modules that<font color="#E5E5E5"> you produce</font>

933
00:47:34,710 --> 00:47:44,010
indicate that there are def compatible

934
00:47:40,200 --> 00:47:45,868
the other feature a of Solara which

935
00:47:44,010 --> 00:47:49,380
which is<font color="#CCCCCC"> new to vista and later</font>

936
00:47:45,869 --> 00:47:57,390
operating systems<font color="#E5E5E5"> complements debt by</font>

937
00:47:49,380 --> 00:48:00,960
making it harder to work<font color="#E5E5E5"> around or</font>

938
00:47:57,390 --> 00:48:03,420
circumvent<font color="#CCCCCC"> dep one of the easiest ways</font>

939
00:48:00,960 --> 00:48:08,069
of circumventing debt from start was

940
00:48:03,420 --> 00:48:11,789
using something called a return to

941
00:48:08,069 --> 00:48:14,609
return to lipsy style attack basically

942
00:48:11,789 --> 00:48:17,849
overwriting a for example<font color="#CCCCCC"> a return</font>

943
00:48:14,609 --> 00:48:20,700
address forging a stack frame before it

944
00:48:17,849 --> 00:48:24,180
that will be<font color="#E5E5E5"> interpreted as</font>

945
00:48:20,700 --> 00:48:26,939
parameters to the<font color="#CCCCCC"> function that you are</font>

946
00:48:24,180 --> 00:48:31,470
diverting execution to so then<font color="#E5E5E5"> you could</font>

947
00:48:26,940 --> 00:48:37,560
divert into for example<font color="#E5E5E5"> the virtual</font>

948
00:48:31,470 --> 00:48:40,140
protect function and using that turn on

949
00:48:37,560 --> 00:48:41,940
the execution bit for<font color="#CCCCCC"> the memory pages</font>

950
00:48:40,140 --> 00:48:47,009
where your shellcode lived before you

951
00:48:41,940 --> 00:48:51,240
jump to them and to make that harder

952
00:48:47,010 --> 00:48:55,500
<font color="#CCCCCC">aslr randomizes the memory addresses</font>

953
00:48:51,240 --> 00:49:00,868
<font color="#E5E5E5">we're all executable modules are loaded</font>

954
00:48:55,500 --> 00:49:02,880
on on different systems so<font color="#CCCCCC"> I think</font>

955
00:49:00,869 --> 00:49:07,140
there's<font color="#E5E5E5"> about a bite of entropy in there</font>

956
00:49:02,880 --> 00:49:09,599
so about 256 different places where your

957
00:49:07,140 --> 00:49:11,759
module could end up in memory which

958
00:49:09,599 --> 00:49:15,720
makes it much much harder to make and

959
00:49:11,760 --> 00:49:21,060
reliable exploit that<font color="#CCCCCC"> circumvent</font><font color="#E5E5E5"> step</font>

960
00:49:15,720 --> 00:49:23,669
like I said available in Vista and you

961
00:49:21,060 --> 00:49:28,020
need to be<font color="#E5E5E5"> linking all your modules with</font>

962
00:49:23,670 --> 00:49:39,599
the dynamic<font color="#E5E5E5"> bass linker switch to make</font>

963
00:49:28,020 --> 00:49:44,369
sure that you can use s la<font color="#CCCCCC"> revista right</font>

964
00:49:39,599 --> 00:49:46,500
I hope that<font color="#CCCCCC"> was somewhat clear if it's</font>

965
00:49:44,369 --> 00:49:51,510
<font color="#E5E5E5">not please go</font><font color="#CCCCCC"> read the white paper like</font>

966
00:49:46,500 --> 00:49:53,040
I said<font color="#CCCCCC"> I spent at least reasonable</font>

967
00:49:51,510 --> 00:49:54,569
amount of time making sure that the

968
00:49:53,040 --> 00:49:57,720
<font color="#CCCCCC">information the white paper is correct</font>

969
00:49:54,569 --> 00:50:02,730
and it's easier to read and understand

970
00:49:57,720 --> 00:50:04,410
them what I'm presenting here today this

971
00:50:02,730 --> 00:50:08,430
is actually the the heart of the talk

972
00:50:04,410 --> 00:50:13,200
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> what got me started in in making</font>

973
00:50:08,430 --> 00:50:16,589
this presentation a lot<font color="#E5E5E5"> of the big</font>

974
00:50:13,200 --> 00:50:19,109
vendors today like<font color="#E5E5E5"> obviously Microsoft</font>

975
00:50:16,589 --> 00:50:22,589
but a lot<font color="#CCCCCC"> of the big third-party vendors</font>

976
00:50:19,109 --> 00:50:24,720
like Adobe have been targeted with a lot

977
00:50:22,589 --> 00:50:27,750
of attacks and are feeling the need to

978
00:50:24,720 --> 00:50:29,910
step up<font color="#E5E5E5"> their game a bit and are</font>

979
00:50:27,750 --> 00:50:31,260
starting to use<font color="#E5E5E5"> these features that</font>

980
00:50:29,910 --> 00:50:33,660
Microsoft themselves have implemented

981
00:50:31,260 --> 00:50:36,750
into windows into<font color="#CCCCCC"> the tool change</font>

982
00:50:33,660 --> 00:50:41,069
to secure windows and microsoft

983
00:50:36,750 --> 00:50:43,200
applications and making use of those to

984
00:50:41,069 --> 00:50:48,660
secure their own applications so for

985
00:50:43,200 --> 00:50:51,720
<font color="#E5E5E5">example the kind of sandboxing</font><font color="#CCCCCC"> i was</font>

986
00:50:48,660 --> 00:50:54,029
talking<font color="#E5E5E5"> about</font><font color="#CCCCCC"> earlier where you use a</font>

987
00:50:51,720 --> 00:50:55,649
for example of restricted token to spawn

988
00:50:54,030 --> 00:50:58,170
off the new process with low privileges

989
00:50:55,650 --> 00:51:02,970
is something that<font color="#CCCCCC"> Microsoft's have used</font>

990
00:50:58,170 --> 00:51:06,359
in office 2010 and<font color="#CCCCCC"> Adobe in their new</font>

991
00:51:02,970 --> 00:51:10,200
Adobe Reader 10.0 will actually

992
00:51:06,359 --> 00:51:11,788
implement these features sandboxing

993
00:51:10,200 --> 00:51:14,220
features and<font color="#E5E5E5"> will sandbox off that PDF</font>

994
00:51:11,789 --> 00:51:16,410
passer so though it will run with low

995
00:51:14,220 --> 00:51:18,450
privileges and hopefully mitigate a lot

996
00:51:16,410 --> 00:51:25,078
of the PDF exploits that we're seeing

997
00:51:18,450 --> 00:51:28,680
today so what can<font color="#CCCCCC"> we</font><font color="#E5E5E5"> learn basically</font>

998
00:51:25,079 --> 00:51:37,020
from Microsoft's almost<font color="#CCCCCC"> ten years</font>

999
00:51:28,680 --> 00:51:38,250
<font color="#E5E5E5">journey into trusted computing well we</font>

1000
00:51:37,020 --> 00:51:40,170
can start to<font color="#E5E5E5"> use these exploit</font>

1001
00:51:38,250 --> 00:51:43,079
mitigations are available to us both in

1002
00:51:40,170 --> 00:51:44,339
the tool chain and in windows which

1003
00:51:43,079 --> 00:51:46,200
means that<font color="#E5E5E5"> we need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> aware of them</font>

1004
00:51:44,339 --> 00:51:48,808
and how they<font color="#CCCCCC"> work and how we need</font><font color="#E5E5E5"> to in</font>

1005
00:51:46,200 --> 00:51:51,750
some cases enable them for our apps and

1006
00:51:48,809 --> 00:51:53,430
always build with<font color="#CCCCCC"> the latest tool chain</font>

1007
00:51:51,750 --> 00:51:56,069
if we're not using the latest version<font color="#E5E5E5"> of</font>

1008
00:51:53,430 --> 00:51:57,750
visual studio for example the<font color="#E5E5E5"> slash gear</font>

1009
00:51:56,069 --> 00:52:00,150
stack of<font color="#CCCCCC"> write protection</font><font color="#E5E5E5"> will be</font>

1010
00:51:57,750 --> 00:52:01,950
significantly weaker than<font color="#CCCCCC"> it would be if</font>

1011
00:52:00,150 --> 00:52:05,039
we're<font color="#E5E5E5"> using the latest version so always</font>

1012
00:52:01,950 --> 00:52:07,410
make sure that even old modules that you

1013
00:52:05,039 --> 00:52:09,990
might not have not changed actually get

1014
00:52:07,410 --> 00:52:14,220
rebuilt with the<font color="#E5E5E5"> latest version of the</font>

1015
00:52:09,990 --> 00:52:17,520
tool chain in for each release we'd also

1016
00:52:14,220 --> 00:52:21,029
read the Microsoft stl and adopt certain

1017
00:52:17,520 --> 00:52:26,549
practices from it<font color="#CCCCCC"> that</font><font color="#E5E5E5"> make sense</font><font color="#CCCCCC"> in our</font>

1018
00:52:21,029 --> 00:52:28,859
development environments one thing<font color="#CCCCCC"> that</font>

1019
00:52:26,549 --> 00:52:32,549
I'm particularly fond of is actually

1020
00:52:28,859 --> 00:52:34,710
doing<font color="#E5E5E5"> architecture review and looking at</font>

1021
00:52:32,549 --> 00:52:39,660
your application not as an<font color="#E5E5E5"> application</font>

1022
00:52:34,710 --> 00:52:44,670
as a whole but as interconnected modules

1023
00:52:39,660 --> 00:52:46,950
that each have an<font color="#E5E5E5"> interface to</font><font color="#CCCCCC"> the rest</font>

1024
00:52:44,670 --> 00:52:47,460
of<font color="#E5E5E5"> the application basically breaking it</font>

1025
00:52:46,950 --> 00:52:49,710
down in

1026
00:52:47,460 --> 00:52:54,090
manageable chunks that we can look at

1027
00:52:49,710 --> 00:52:57,750
and say what are the inputs to this and

1028
00:52:54,090 --> 00:53:00,210
and and how do<font color="#CCCCCC"> I</font><font color="#E5E5E5"> secure it they're also</font>

1029
00:52:57,750 --> 00:53:02,430
interesting guidelines for secure coding

1030
00:53:00,210 --> 00:53:06,630
in the stl for example there's a list of

1031
00:53:02,430 --> 00:53:09,600
banned IP banned api's such as<font color="#CCCCCC"> stow copy</font>

1032
00:53:06,630 --> 00:53:13,590
and mem copy<font color="#E5E5E5"> api's and stuff like that</font>

1033
00:53:09,600 --> 00:53:15,750
and of<font color="#CCCCCC"> course secure or more safe</font><font color="#E5E5E5"> I</font>

1034
00:53:13,590 --> 00:53:18,480
should<font color="#E5E5E5"> say more safe counterparts that</font>

1035
00:53:15,750 --> 00:53:20,460
<font color="#CCCCCC">you should use</font><font color="#E5E5E5"> instead so try to try to</font>

1036
00:53:18,480 --> 00:53:22,590
learn<font color="#CCCCCC"> from Microsoft in that respect</font>

1037
00:53:20,460 --> 00:53:25,890
<font color="#CCCCCC">they they've also developed some</font>

1038
00:53:22,590 --> 00:53:27,570
interesting libraries and<font color="#E5E5E5"> C++ templates</font>

1039
00:53:25,890 --> 00:53:29,879
over the years that you can also use<font color="#CCCCCC"> in</font>

1040
00:53:27,570 --> 00:53:34,020
<font color="#E5E5E5">your applications so for example there's</font>

1041
00:53:29,880 --> 00:53:37,560
a C++ template library called safeand

1042
00:53:34,020 --> 00:53:41,280
that can be<font color="#E5E5E5"> used to basically get rid of</font>

1043
00:53:37,560 --> 00:53:44,520
integer arithmetic errors so for example

1044
00:53:41,280 --> 00:53:47,220
integer<font color="#CCCCCC"> overflow is where you've</font><font color="#E5E5E5"> got two</font>

1045
00:53:44,520 --> 00:53:49,440
values that you add together and the

1046
00:53:47,220 --> 00:53:52,080
value is too large to fit into an

1047
00:53:49,440 --> 00:53:54,840
integer and it wraps around leading to

1048
00:53:52,080 --> 00:53:56,610
for example incorrect calculations for

1049
00:53:54,840 --> 00:53:59,670
allocations of buffers or copying a

1050
00:53:56,610 --> 00:54:02,160
memory and stuff like that there's also

1051
00:53:59,670 --> 00:54:07,920
a<font color="#E5E5E5"> sea variant of that called the N safe</font>

1052
00:54:02,160 --> 00:54:09,480
h which<font color="#CCCCCC"> is in in the windows sdk and as</font>

1053
00:54:07,920 --> 00:54:11,700
I said<font color="#E5E5E5"> the list of banned api's is</font>

1054
00:54:09,480 --> 00:54:13,410
interesting it's integrated into<font color="#E5E5E5"> Visual</font>

1055
00:54:11,700 --> 00:54:15,720
<font color="#E5E5E5">Studio so visual studio will now set</font>

1056
00:54:13,410 --> 00:54:17,940
tell you that this is deprecated you

1057
00:54:15,720 --> 00:54:20,370
shouldn't be<font color="#E5E5E5"> using this and there's</font>

1058
00:54:17,940 --> 00:54:22,980
actually<font color="#E5E5E5"> if you're lucky enough to be</font>

1059
00:54:20,370 --> 00:54:24,990
able to compile your code using the C++

1060
00:54:22,980 --> 00:54:26,790
compiler there's something<font color="#E5E5E5"> called secure</font>

1061
00:54:24,990 --> 00:54:29,850
template<font color="#E5E5E5"> over lobe which can actually</font>

1062
00:54:26,790 --> 00:54:33,390
take your stir copy mem copy calls and

1063
00:54:29,850 --> 00:54:36,480
directly translate that source code when

1064
00:54:33,390 --> 00:54:37,859
compiling into the safer counterparts<font color="#E5E5E5"> so</font>

1065
00:54:36,480 --> 00:54:39,390
you don't actually have<font color="#CCCCCC"> to go in</font><font color="#E5E5E5"> and fix</font>

1066
00:54:37,860 --> 00:54:41,250
all your coat it can do that

1067
00:54:39,390 --> 00:54:45,180
automatically for you something<font color="#CCCCCC"> to check</font>

1068
00:54:41,250 --> 00:54:47,880
out as<font color="#E5E5E5"> well something that I wasn't</font><font color="#CCCCCC"> a</font>

1069
00:54:45,180 --> 00:54:50,759
very aware about until quite recently

1070
00:54:47,880 --> 00:54:52,080
pointed out to me by a friend who said

1071
00:54:50,760 --> 00:54:53,460
oh you're talking<font color="#E5E5E5"> about exploit</font>

1072
00:54:52,080 --> 00:54:57,210
mitigations you should check<font color="#CCCCCC"> it Emmett</font>

1073
00:54:53,460 --> 00:54:59,370
<font color="#CCCCCC">and I</font><font color="#E5E5E5"> said what</font><font color="#CCCCCC"> what's him it</font><font color="#E5E5E5"> and I was</font>

1074
00:54:57,210 --> 00:55:00,049
actually fortunate enough to speak to

1075
00:54:59,370 --> 00:55:02,900
one of the developer

1076
00:55:00,049 --> 00:55:07,459
earlier<font color="#E5E5E5"> on today it's pretty cool</font>

1077
00:55:02,900 --> 00:55:09,799
admittedly it's something that might<font color="#E5E5E5"> not</font>

1078
00:55:07,459 --> 00:55:11,448
<font color="#CCCCCC">be very</font><font color="#E5E5E5"> useful to third-party developers</font>

1079
00:55:09,799 --> 00:55:15,529
but you<font color="#E5E5E5"> should</font><font color="#CCCCCC"> at least</font><font color="#E5E5E5"> check it out</font>

1080
00:55:11,449 --> 00:55:17,809
it's very interesting<font color="#CCCCCC"> Emmet has taken</font>

1081
00:55:15,529 --> 00:55:19,579
some<font color="#CCCCCC"> of these mitigation techniques that</font>

1082
00:55:17,809 --> 00:55:25,309
we've talked about<font color="#CCCCCC"> that are available on</font>

1083
00:55:19,579 --> 00:55:28,400
<font color="#CCCCCC">Vista own above and ported them for</font>

1084
00:55:25,309 --> 00:55:30,650
<font color="#CCCCCC">example</font><font color="#E5E5E5"> sese hop that's only available</font>

1085
00:55:28,400 --> 00:55:36,349
on later operating systems and ported it

1086
00:55:30,650 --> 00:55:43,339
into something that's compatible on XP

1087
00:55:36,349 --> 00:55:46,489
as well and also there are<font color="#E5E5E5"> some features</font>

1088
00:55:43,339 --> 00:55:49,279
in emmett that can enable for example a

1089
00:55:46,489 --> 00:55:51,229
SLR<font color="#E5E5E5"> in depth for your processes without</font>

1090
00:55:49,279 --> 00:55:52,400
you actually having<font color="#CCCCCC"> to do all this be</font>

1091
00:55:51,229 --> 00:55:56,239
aware of all the stuff that I've<font color="#E5E5E5"> been</font>

1092
00:55:52,400 --> 00:56:03,410
talking<font color="#E5E5E5"> about before so it kind of for</font>

1093
00:55:56,239 --> 00:56:05,150
example force modules to use a SLR even

1094
00:56:03,410 --> 00:56:07,279
though there haven't been compiled with

1095
00:56:05,150 --> 00:56:11,660
the<font color="#E5E5E5"> dynamic bass linker flag and stuff</font>

1096
00:56:07,279 --> 00:56:13,549
like that as I said not very interesting

1097
00:56:11,660 --> 00:56:17,420
to most application developers because

1098
00:56:13,549 --> 00:56:19,249
it actually requires you to convince

1099
00:56:17,420 --> 00:56:22,309
your customers to install this software

1100
00:56:19,249 --> 00:56:24,439
because it is a software<font color="#E5E5E5"> package</font><font color="#CCCCCC"> that</font>

1101
00:56:22,309 --> 00:56:30,170
you install in<font color="#E5E5E5"> Windows that applies all</font>

1102
00:56:24,439 --> 00:56:31,519
these extra mitigation routines eMeter

1103
00:56:30,170 --> 00:56:35,089
is<font color="#E5E5E5"> actually coming out with a new</font>

1104
00:56:31,519 --> 00:56:37,640
release in a new release later in<font color="#E5E5E5"> August</font>

1105
00:56:35,089 --> 00:56:39,259
so<font color="#E5E5E5"> check it out then it will</font><font color="#CCCCCC"> have</font>

1106
00:56:37,640 --> 00:56:41,118
several more anti exploitation

1107
00:56:39,259 --> 00:56:43,670
techniques that will break existing

1108
00:56:41,119 --> 00:56:46,339
standard shell code for example were

1109
00:56:43,670 --> 00:56:48,589
working war must be rewritten so a lot

1110
00:56:46,339 --> 00:56:51,890
of old exploits and stuff like

1111
00:56:48,589 --> 00:56:55,339
<font color="#CCCCCC">metasploit won't work anymore which is</font>

1112
00:56:51,890 --> 00:56:57,019
<font color="#E5E5E5">quite interesting those are the</font><font color="#CCCCCC"> URLs</font>

1113
00:56:55,339 --> 00:56:59,929
usually check out you can google Emmet

1114
00:56:57,019 --> 00:57:01,939
and Microsoft and you'll probably<font color="#E5E5E5"> get</font>

1115
00:56:59,929 --> 00:57:04,969
those same URLs actually that's how I

1116
00:57:01,939 --> 00:57:09,078
got them but there's a training video

1117
00:57:04,969 --> 00:57:11,929
there that the developer guys to explain

1118
00:57:09,079 --> 00:57:13,940
how it<font color="#CCCCCC"> works</font><font color="#E5E5E5"> and there's also the</font>

1119
00:57:11,929 --> 00:57:18,560
download link on the bottom

1120
00:57:13,940 --> 00:57:21,260
before<font color="#CCCCCC"> I got</font><font color="#E5E5E5"> into that brief digression</font>

1121
00:57:18,560 --> 00:57:23,690
I was<font color="#E5E5E5"> talking about modularizing your</font>

1122
00:57:21,260 --> 00:57:25,490
application that's<font color="#E5E5E5"> one thing that I</font>

1123
00:57:23,690 --> 00:57:27,260
<font color="#CCCCCC">think is really</font><font color="#E5E5E5"> important for people to</font>

1124
00:57:25,490 --> 00:57:30,950
understand is that once your application

1125
00:57:27,260 --> 00:57:33,380
grows from a simple tool into

1126
00:57:30,950 --> 00:57:35,899
full-fledged app there is no way you're

1127
00:57:33,380 --> 00:57:37,369
going<font color="#E5E5E5"> to be able to look at it as a</font>

1128
00:57:35,900 --> 00:57:39,530
whole and understand all the

1129
00:57:37,369 --> 00:57:42,470
interconnections between different parts

1130
00:57:39,530 --> 00:57:44,569
<font color="#CCCCCC">of the code so what you really</font><font color="#E5E5E5"> need to</font>

1131
00:57:42,470 --> 00:57:45,828
<font color="#E5E5E5">do as an application developers look at</font>

1132
00:57:44,569 --> 00:57:47,690
how can we break this down into

1133
00:57:45,829 --> 00:57:52,190
different<font color="#E5E5E5"> components different parts</font>

1134
00:57:47,690 --> 00:57:54,500
that we can look at in isolation so if

1135
00:57:52,190 --> 00:57:57,440
if we can take<font color="#E5E5E5"> our application and break</font>

1136
00:57:54,500 --> 00:58:02,390
it down into several different<font color="#E5E5E5"> parts and</font>

1137
00:57:57,440 --> 00:58:04,700
specify in documentation the all the

1138
00:58:02,390 --> 00:58:06,440
interactions between that module and the

1139
00:58:04,700 --> 00:58:07,549
rest of<font color="#E5E5E5"> the application then we can</font>

1140
00:58:06,440 --> 00:58:10,069
actually<font color="#CCCCCC"> start to</font><font color="#E5E5E5"> look at that</font>

1141
00:58:07,550 --> 00:58:13,579
particular module in isolation look at

1142
00:58:10,069 --> 00:58:15,619
those interfaces and do threat modeling

1143
00:58:13,579 --> 00:58:17,690
perhaps according to the<font color="#E5E5E5"> sdl why</font>

1144
00:58:15,619 --> 00:58:19,730
Microsoft or in another style that

1145
00:58:17,690 --> 00:58:21,500
<font color="#CCCCCC">you're</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> comfortable with but at</font>

1146
00:58:19,730 --> 00:58:23,210
least looking at these in<font color="#E5E5E5"> bite-sized</font>

1147
00:58:21,500 --> 00:58:25,069
chunks that you can understand what the

1148
00:58:23,210 --> 00:58:31,849
code is doing<font color="#E5E5E5"> with the inputs and</font>

1149
00:58:25,069 --> 00:58:36,529
outputs and another<font color="#CCCCCC"> thing that you can</font>

1150
00:58:31,849 --> 00:58:38,420
do when we're talking about application

1151
00:58:36,530 --> 00:58:40,310
boundaries of course boundaries between

1152
00:58:38,420 --> 00:58:42,980
different modules in the code but also

1153
00:58:40,310 --> 00:58:48,049
boundaries between the application and

1154
00:58:42,980 --> 00:58:50,030
the OS you<font color="#E5E5E5"> can start to look at every in</font>

1155
00:58:48,050 --> 00:58:51,980
every<font color="#E5E5E5"> case where we create a system</font>

1156
00:58:50,030 --> 00:58:55,670
resource for example if we create<font color="#E5E5E5"> a file</font>

1157
00:58:51,980 --> 00:58:59,569
if we<font color="#E5E5E5"> create a pipe if we create a</font>

1158
00:58:55,670 --> 00:59:03,200
something as simple as an<font color="#E5E5E5"> event flag or</font>

1159
00:58:59,569 --> 00:59:07,099
something like that that we<font color="#E5E5E5"> apply a safe</font>

1160
00:59:03,200 --> 00:59:09,049
for daca on that object so<font color="#CCCCCC"> that we're</font>

1161
00:59:07,099 --> 00:59:12,050
<font color="#CCCCCC">not creating for example a semaphore</font>

1162
00:59:09,050 --> 00:59:14,210
this wide open<font color="#CCCCCC"> for anybody to gain</font>

1163
00:59:12,050 --> 00:59:17,150
access to and start flipping around and

1164
00:59:14,210 --> 00:59:18,770
potentially harming the or potentially

1165
00:59:17,150 --> 00:59:24,319
changing the execution flow of our

1166
00:59:18,770 --> 00:59:26,280
application this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> especially important</font>

1167
00:59:24,319 --> 00:59:28,590
if you've got colonel

1168
00:59:26,280 --> 00:59:31,800
code in your application if you've<font color="#E5E5E5"> got</font>

1169
00:59:28,590 --> 00:59:34,590
code in<font color="#E5E5E5"> New Zealand that</font><font color="#CCCCCC"> needs to</font>

1170
00:59:31,800 --> 00:59:41,850
communicate<font color="#E5E5E5"> with the colonel component</font>

1171
00:59:34,590 --> 00:59:45,150
using for example what's called a named

1172
00:59:41,850 --> 00:59:46,560
driver entry or something like that<font color="#E5E5E5"> it's</font>

1173
00:59:45,150 --> 00:59:51,210
see it's very<font color="#CCCCCC"> important to make sure</font>

1174
00:59:46,560 --> 00:59:52,529
that you've got<font color="#E5E5E5"> safe decals on the kind</font>

1175
00:59:51,210 --> 00:59:57,180
of components so that somebody<font color="#E5E5E5"> else</font>

1176
00:59:52,530 --> 00:59:58,920
can't go in and and start talking

1177
00:59:57,180 --> 01:00:01,230
directly to your<font color="#E5E5E5"> kind of code because</font>

1178
00:59:58,920 --> 01:00:05,340
that opens up a lot of<font color="#E5E5E5"> attack surfaces</font>

1179
01:00:01,230 --> 01:00:07,620
you don't want to be exposing right so

1180
01:00:05,340 --> 01:00:10,500
when you've compartment sorry went once

1181
01:00:07,620 --> 01:00:12,299
you've componentized your coat<font color="#CCCCCC"> pocket</font>

1182
01:00:10,500 --> 01:00:15,240
<font color="#E5E5E5">down into different components that are</font>

1183
01:00:12,300 --> 01:00:17,280
manageable then you can also start to

1184
01:00:15,240 --> 01:00:21,509
<font color="#E5E5E5">look at which of these components</font><font color="#CCCCCC"> are</font>

1185
01:00:17,280 --> 01:00:24,630
actually possible to run with low

1186
01:00:21,510 --> 01:00:26,400
privileges for example can I<font color="#E5E5E5"> take for</font>

1187
01:00:24,630 --> 01:00:28,770
example this file format parser and

1188
01:00:26,400 --> 01:00:30,840
break it off spawn it off<font color="#E5E5E5"> into a</font>

1189
01:00:28,770 --> 01:00:34,020
different process because I've got easy

1190
01:00:30,840 --> 01:00:36,990
input and output from it I got an input

1191
01:00:34,020 --> 01:00:39,090
of a file or file handle or a file path

1192
01:00:36,990 --> 01:00:41,370
to it and I've got an output of a past

1193
01:00:39,090 --> 01:00:45,750
data structure that's<font color="#E5E5E5"> pretty</font><font color="#CCCCCC"> easy for me</font>

1194
01:00:41,370 --> 01:00:49,950
to partition off and compartmentalize so

1195
01:00:45,750 --> 01:00:53,400
that that code which might<font color="#CCCCCC"> be doing some</font>

1196
01:00:49,950 --> 01:01:00,270
heavy stuff passes always are difficult

1197
01:00:53,400 --> 01:01:02,550
can I run that in a lower integrity

1198
01:01:00,270 --> 01:01:06,630
level process with a<font color="#E5E5E5"> restricted token</font>

1199
01:01:02,550 --> 01:01:08,610
and all of these mitigations that we've

1200
01:01:06,630 --> 01:01:12,420
talked<font color="#CCCCCC"> about or security features as</font>

1201
01:01:08,610 --> 01:01:14,400
I've call them if you're<font color="#CCCCCC"> going this</font>

1202
01:01:12,420 --> 01:01:18,180
route and<font color="#CCCCCC"> some boxing stuff check out</font>

1203
01:01:14,400 --> 01:01:20,880
the<font color="#E5E5E5"> blog series by david blanc from 2007</font>

1204
01:01:18,180 --> 01:01:26,640
called practical windows unboxing that's

1205
01:01:20,880 --> 01:01:29,970
kind of the it documents<font color="#CCCCCC"> how they kind</font>

1206
01:01:26,640 --> 01:01:31,950
of went about developing their own Sam

1207
01:01:29,970 --> 01:01:34,950
boxing techniques for office and<font color="#E5E5E5"> it's</font>

1208
01:01:31,950 --> 01:01:39,060
<font color="#E5E5E5">kind of the start of or rather adobe has</font>

1209
01:01:34,950 --> 01:01:40,000
has built on that<font color="#E5E5E5"> work with</font><font color="#CCCCCC"> the new or</font><font color="#E5E5E5"> w</font>

1210
01:01:39,060 --> 01:01:44,350
read a<font color="#CCCCCC"> ten-point</font>

1211
01:01:40,000 --> 01:01:47,440
so have a look<font color="#CCCCCC"> at that because it does</font>

1212
01:01:44,350 --> 01:01:51,279
bring<font color="#E5E5E5"> up some important points that</font><font color="#CCCCCC"> you</font>

1213
01:01:47,440 --> 01:01:58,660
need to be<font color="#CCCCCC"> aware of when Sam boxing low</font>

1214
01:01:51,280 --> 01:02:00,880
privileges processes also when<font color="#E5E5E5"> you're</font>

1215
01:01:58,660 --> 01:02:02,319
looking at these components make<font color="#CCCCCC"> sure</font>

1216
01:02:00,880 --> 01:02:03,850
that these interfaces this should

1217
01:02:02,320 --> 01:02:05,320
actually be a part of<font color="#CCCCCC"> your threat</font>

1218
01:02:03,850 --> 01:02:07,089
modeling if you haven't already done it

1219
01:02:05,320 --> 01:02:09,880
<font color="#E5E5E5">make sure</font><font color="#CCCCCC"> that they're simple</font><font color="#E5E5E5"> and clear</font>

1220
01:02:07,090 --> 01:02:11,890
<font color="#CCCCCC">that they're not ambiguous that you</font>

1221
01:02:09,880 --> 01:02:15,880
understand the inputs and outputs and

1222
01:02:11,890 --> 01:02:19,600
how that relates<font color="#CCCCCC"> to other components in</font>

1223
01:02:15,880 --> 01:02:21,790
the system and<font color="#E5E5E5"> a private apply the</font>

1224
01:02:19,600 --> 01:02:24,700
principle<font color="#E5E5E5"> of least privilege doesn't if</font>

1225
01:02:21,790 --> 01:02:27,190
if these components don't actually need

1226
01:02:24,700 --> 01:02:29,020
access to system resources then that

1227
01:02:27,190 --> 01:02:34,510
code doesn't actually have to be<font color="#E5E5E5"> running</font>

1228
01:02:29,020 --> 01:02:36,670
<font color="#E5E5E5">as as a standard user and if these</font>

1229
01:02:34,510 --> 01:02:38,980
components are too complex or require

1230
01:02:36,670 --> 01:02:41,470
too much too many<font color="#E5E5E5"> privileges you should</font>

1231
01:02:38,980 --> 01:02:43,630
perhaps look at refactoring them and

1232
01:02:41,470 --> 01:02:45,640
changing them and making the interfaces

1233
01:02:43,630 --> 01:02:47,560
cleaner and simpler to make it easier

1234
01:02:45,640 --> 01:02:49,240
for you to understand the implications

1235
01:02:47,560 --> 01:02:53,529
do threat modeling and stuff like that

1236
01:02:49,240 --> 01:02:56,259
in a perfect<font color="#CCCCCC"> world basically only</font><font color="#E5E5E5"> the UI</font>

1237
01:02:53,530 --> 01:02:58,750
layer of your computer plication would

1238
01:02:56,260 --> 01:03:01,150
need to run with a full privileged set

1239
01:02:58,750 --> 01:03:04,090
of the user and perhaps<font color="#E5E5E5"> not even that</font>

1240
01:03:01,150 --> 01:03:06,280
that's not<font color="#E5E5E5"> going to happen for most</font>

1241
01:03:04,090 --> 01:03:09,970
application developers but you should

1242
01:03:06,280 --> 01:03:11,830
really strive to look at component<font color="#CCCCCC"> Eliza</font>

1243
01:03:09,970 --> 01:03:13,930
ng and compartmentalizing those

1244
01:03:11,830 --> 01:03:17,620
components within your application make

1245
01:03:13,930 --> 01:03:21,129
sure<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you're</font><font color="#CCCCCC"> using all of these</font>

1246
01:03:17,620 --> 01:03:23,470
features<font color="#E5E5E5"> you can be using in</font><font color="#CCCCCC"> windows to</font>

1247
01:03:21,130 --> 01:03:26,770
make<font color="#E5E5E5"> it harder to attack your</font>

1248
01:03:23,470 --> 01:03:30,490
application and basically a lot of these

1249
01:03:26,770 --> 01:03:32,530
features<font color="#E5E5E5"> can be bypassed I</font><font color="#CCCCCC"> taught about</font>

1250
01:03:30,490 --> 01:03:34,839
/ GS being easy to bypass if you're

1251
01:03:32,530 --> 01:03:38,170
using an older version for example if

1252
01:03:34,840 --> 01:03:44,620
you're using visual studio 2003 still

1253
01:03:38,170 --> 01:03:48,770
and what I want<font color="#E5E5E5"> to convey to you is that</font>

1254
01:03:44,620 --> 01:03:50,569
that<font color="#E5E5E5"> doesn't matter to</font><font color="#CCCCCC"> you</font>

1255
01:03:48,770 --> 01:03:52,850
if you can use enough of these

1256
01:03:50,570 --> 01:03:55,910
mitigation techniques and security

1257
01:03:52,850 --> 01:03:56,870
features then they will overlap to such

1258
01:03:55,910 --> 01:03:58,759
a degree that it will make it

1259
01:03:56,870 --> 01:04:01,100
<font color="#E5E5E5">significantly harder for somebody to</font>

1260
01:03:58,760 --> 01:04:03,110
exploit your owner ability when your

1261
01:04:01,100 --> 01:04:07,310
software that you would have<font color="#CCCCCC"> won so much</font>

1262
01:04:03,110 --> 01:04:08,750
by<font color="#CCCCCC"> just doing these simple steps there</font>

1263
01:04:07,310 --> 01:04:11,930
are no silver<font color="#E5E5E5"> bullets application</font>

1264
01:04:08,750 --> 01:04:15,500
security but if we can<font color="#CCCCCC"> just raise the</font>

1265
01:04:11,930 --> 01:04:19,940
bar enough that an attacker with either

1266
01:04:15,500 --> 01:04:22,130
go after some other company or if we can

1267
01:04:19,940 --> 01:04:28,340
raise<font color="#CCCCCC"> a bar to such</font><font color="#E5E5E5"> a degree that it's</font>

1268
01:04:22,130 --> 01:04:30,800
making<font color="#E5E5E5"> it making the attacker invest a</font>

1269
01:04:28,340 --> 01:04:33,740
lot<font color="#E5E5E5"> of time</font><font color="#CCCCCC"> effort and money into making</font>

1270
01:04:30,800 --> 01:04:35,540
the exploit for<font color="#CCCCCC"> a Pacific particular</font>

1271
01:04:33,740 --> 01:04:38,089
vulnerability we will have protected our

1272
01:04:35,540 --> 01:04:40,730
customers that much more so we need to

1273
01:04:38,090 --> 01:04:43,490
<font color="#E5E5E5">build securities in security as</font>

1274
01:04:40,730 --> 01:04:45,500
overlapping layers so even if one of

1275
01:04:43,490 --> 01:04:47,149
these layers isn't perfect there will be

1276
01:04:45,500 --> 01:04:51,980
<font color="#E5E5E5">another one underneath and another one</font>

1277
01:04:47,150 --> 01:04:55,340
and hopefully either an<font color="#E5E5E5"> attacker won't</font>

1278
01:04:51,980 --> 01:04:57,650
get through or all of them or it will<font color="#CCCCCC"> be</font>

1279
01:04:55,340 --> 01:05:02,060
at least<font color="#CCCCCC"> very costly for them to do so</font>

1280
01:04:57,650 --> 01:05:05,240
look at each component that in isolation

1281
01:05:02,060 --> 01:05:08,930
make sure<font color="#CCCCCC"> that it's responsible for</font>

1282
01:05:05,240 --> 01:05:12,379
upholding the security of itself by

1283
01:05:08,930 --> 01:05:16,279
verifying its inputs and making sure it

1284
01:05:12,380 --> 01:05:19,250
produces safe output as well assume

1285
01:05:16,280 --> 01:05:21,110
<font color="#CCCCCC">nothing but validate everything so it's</font>

1286
01:05:19,250 --> 01:05:23,090
<font color="#E5E5E5">better to</font><font color="#CCCCCC"> have several components within</font>

1287
01:05:21,110 --> 01:05:28,400
your application actually verifying the

1288
01:05:23,090 --> 01:05:30,650
same data several<font color="#CCCCCC"> times over then just</font>

1289
01:05:28,400 --> 01:05:32,120
verifying hoping you verified everything

1290
01:05:30,650 --> 01:05:33,980
when you've read it from disk for

1291
01:05:32,120 --> 01:05:36,319
example and<font color="#E5E5E5"> then just trusting the data</font>

1292
01:05:33,980 --> 01:05:38,510
from<font color="#E5E5E5"> there on in the application to make</font>

1293
01:05:36,320 --> 01:05:43,430
sure that each component that you

1294
01:05:38,510 --> 01:05:47,270
isolated and when you're doing<font color="#E5E5E5"> threat</font>

1295
01:05:43,430 --> 01:05:48,919
modeling make sure<font color="#CCCCCC"> that it doesn't</font>

1296
01:05:47,270 --> 01:05:52,690
assume anything of its input that it

1297
01:05:48,920 --> 01:05:52,690
validates everything before it uses it

1298
01:05:53,700 --> 01:06:04,649
so to summarize<font color="#E5E5E5"> a bit build security in</font>

1299
01:06:02,100 --> 01:06:07,740
your applications by piling on

1300
01:06:04,650 --> 01:06:09,120
everything that<font color="#CCCCCC"> you can of this that we</font>

1301
01:06:07,740 --> 01:06:11,189
talked about<font color="#E5E5E5"> all the exploit mitigations</font>

1302
01:06:09,120 --> 01:06:14,130
that you can enable please enable them

1303
01:06:11,190 --> 01:06:18,540
<font color="#E5E5E5">on operating system levels that support</font>

1304
01:06:14,130 --> 01:06:23,010
them all the toolchain features that you

1305
01:06:18,540 --> 01:06:26,910
can use please make sure that they are

1306
01:06:23,010 --> 01:06:29,100
enabled and it can be<font color="#E5E5E5"> hard because</font>

1307
01:06:26,910 --> 01:06:31,529
<font color="#CCCCCC">sometimes you have to depend on</font>

1308
01:06:29,100 --> 01:06:33,990
<font color="#CCCCCC">third-party</font><font color="#E5E5E5"> libraries that for example</font>

1309
01:06:31,530 --> 01:06:38,220
<font color="#E5E5E5">aren't that well or don't support a solo</font>

1310
01:06:33,990 --> 01:06:40,620
but if you've got a lot<font color="#CCCCCC"> of problems with</font>

1311
01:06:38,220 --> 01:06:48,899
<font color="#E5E5E5">that and you can't address it by</font>

1312
01:06:40,620 --> 01:06:53,580
demanding from your third-party software

1313
01:06:48,900 --> 01:06:57,840
software vendor to fix it look at for

1314
01:06:53,580 --> 01:07:01,319
<font color="#CCCCCC">example Emmet's or something else as a</font>

1315
01:06:57,840 --> 01:07:03,900
workaround architecture in components

1316
01:07:01,320 --> 01:07:06,570
make sure<font color="#CCCCCC"> that your application is</font><font color="#E5E5E5"> in a</font>

1317
01:07:03,900 --> 01:07:08,640
monolithic application but actually does

1318
01:07:06,570 --> 01:07:10,230
<font color="#CCCCCC">make sense when it's broken</font><font color="#E5E5E5"> down into</font>

1319
01:07:08,640 --> 01:07:13,680
separate pieces that might<font color="#E5E5E5"> even be</font>

1320
01:07:10,230 --> 01:07:16,290
developed by different teams internally

1321
01:07:13,680 --> 01:07:18,120
and review them in isolation to make

1322
01:07:16,290 --> 01:07:20,550
sure that they<font color="#CCCCCC"> actually do what they're</font>

1323
01:07:18,120 --> 01:07:23,549
supposed to do that they can stand on

1324
01:07:20,550 --> 01:07:27,030
their own when confronted<font color="#CCCCCC"> with arbitrary</font>

1325
01:07:23,550 --> 01:07:30,660
inputs and stuff like that<font color="#CCCCCC"> and once</font>

1326
01:07:27,030 --> 01:07:33,480
you've done that try<font color="#E5E5E5"> to partition your</font>

1327
01:07:30,660 --> 01:07:39,480
application and put components that

1328
01:07:33,480 --> 01:07:40,950
don't need privileges in two separate

1329
01:07:39,480 --> 01:07:44,370
sandbox process or something like that

1330
01:07:40,950 --> 01:07:46,439
<font color="#CCCCCC">and use the other windows features to</font>

1331
01:07:44,370 --> 01:07:48,540
raise the bar for<font color="#CCCCCC"> the attacker so if</font>

1332
01:07:46,440 --> 01:07:49,800
your son boxing something off into

1333
01:07:48,540 --> 01:07:51,330
another process don't just put a

1334
01:07:49,800 --> 01:07:54,990
restricted token on and hope for the

1335
01:07:51,330 --> 01:07:56,850
best loan from Microsoft check out the

1336
01:07:54,990 --> 01:07:59,459
practical windows unboxing article

1337
01:07:56,850 --> 01:08:01,680
series and pile on all of<font color="#E5E5E5"> these features</font>

1338
01:07:59,460 --> 01:08:04,980
to<font color="#CCCCCC"> make sure that the sandbox is tight</font>

1339
01:08:01,680 --> 01:08:07,109
look at for<font color="#CCCCCC"> example the google chrome</font>

1340
01:08:04,980 --> 01:08:10,200
sandbox that they use

1341
01:08:07,109 --> 01:08:14,190
they've done exactly that they've try to

1342
01:08:10,200 --> 01:08:16,049
use all of these windows technologies to

1343
01:08:14,190 --> 01:08:19,770
sandbox off all of the rendering and

1344
01:08:16,049 --> 01:08:26,100
HTML processing in<font color="#CCCCCC"> the browser into a</font>

1345
01:08:19,770 --> 01:08:31,020
separate process and also<font color="#E5E5E5"> look at the</font>

1346
01:08:26,100 --> 01:08:33,089
<font color="#E5E5E5">Microsoft stl there's a document I'm not</font>

1347
01:08:31,020 --> 01:08:35,909
<font color="#CCCCCC">sure if I'm getting</font><font color="#E5E5E5"> the name correct but</font>

1348
01:08:33,089 --> 01:08:38,729
i think it's referred<font color="#CCCCCC"> to as a simplified</font>

1349
01:08:35,908 --> 01:08:41,790
SDM and you<font color="#E5E5E5"> shouldn't be confused by the</font>

1350
01:08:38,729 --> 01:08:43,919
name is basically the<font color="#CCCCCC"> sdl process</font>

1351
01:08:41,790 --> 01:08:45,689
documents that have been stripped<font color="#E5E5E5"> from</font>

1352
01:08:43,920 --> 01:08:51,779
everything microsoft specific and

1353
01:08:45,689 --> 01:08:56,250
specifically made to be able to view as

1354
01:08:51,779 --> 01:08:59,400
a publication development team to adopt

1355
01:08:56,250 --> 01:09:00,988
basically straight off because all the

1356
01:08:59,399 --> 01:09:05,099
microsoft specific parts have been

1357
01:09:00,988 --> 01:09:06,629
edited out so look at that and adopt the

1358
01:09:05,100 --> 01:09:19,339
parts at least that makes<font color="#E5E5E5"> sense</font><font color="#CCCCCC"> to you</font>

1359
01:09:06,630 --> 01:09:19,339
any<font color="#E5E5E5"> questions anything yeah</font>

1360
01:09:24,988 --> 01:09:42,718
yeah yeah so<font color="#CCCCCC"> just to repeat the question</font>

1361
01:09:37,920 --> 01:09:45,599
for the camera if we've got all of<font color="#CCCCCC"> these</font>

1362
01:09:42,719 --> 01:09:46,739
lovely exploitation mitigation features

1363
01:09:45,599 --> 01:09:48,150
and everything in Windows and then

1364
01:09:46,738 --> 01:09:50,278
toolchain why are we still seeing so

1365
01:09:48,149 --> 01:09:52,858
much so many attacks against windows

1366
01:09:50,279 --> 01:09:55,050
applications well if if you look at

1367
01:09:52,859 --> 01:09:57,030
Microsoft and their applications and

1368
01:09:55,050 --> 01:10:00,119
windows in general which is a large coat

1369
01:09:57,030 --> 01:10:03,059
large code base they've done pretty well

1370
01:10:00,119 --> 01:10:05,039
<font color="#E5E5E5">recently because they are using all of</font>

1371
01:10:03,059 --> 01:10:08,340
these features so<font color="#CCCCCC"> I would say it</font>

1372
01:10:05,039 --> 01:10:10,469
wouldn't be too far of a leap to say

1373
01:10:08,340 --> 01:10:13,019
that third-party developers aren't and

1374
01:10:10,469 --> 01:10:16,559
that's<font color="#E5E5E5"> probably why they are having or</font>

1375
01:10:13,019 --> 01:10:18,210
<font color="#E5E5E5">are getting targeted rather because</font>

1376
01:10:16,559 --> 01:10:21,780
there is an easier target for attackers

1377
01:10:18,210 --> 01:10:26,130
so if I was to<font color="#E5E5E5"> attack a system today I</font>

1378
01:10:21,780 --> 01:10:27,960
<font color="#E5E5E5">wouldn't be attacking ie I wouldn't be</font>

1379
01:10:26,130 --> 01:10:33,360
attacking outlook I would be attacking

1380
01:10:27,960 --> 01:10:38,340
the<font color="#E5E5E5"> Java son the Oracle Java cheer JRE</font>

1381
01:10:33,360 --> 01:10:39,960
I'd be attacking the adobe reader 9.3

1382
01:10:38,340 --> 01:10:42,659
that isn't fully patched yet I'd be

1383
01:10:39,960 --> 01:10:45,449
attacking those those kind of things or

1384
01:10:42,659 --> 01:10:48,749
the flash plugin in the browser or

1385
01:10:45,449 --> 01:10:50,159
something like that<font color="#E5E5E5"> and that's what</font>

1386
01:10:48,749 --> 01:10:51,539
we're seeing today as well in the wild

1387
01:10:50,159 --> 01:10:56,219
is that the attackers are going for the

1388
01:10:51,539 --> 01:11:00,300
easy stuff which is until now those

1389
01:10:56,219 --> 01:11:03,989
large<font color="#E5E5E5"> third-party vendors that have a</font>

1390
01:11:00,300 --> 01:11:05,999
large installed base and haven't adopted

1391
01:11:03,989 --> 01:11:11,789
all of these mitigation techniques yet a

1392
01:11:05,999 --> 01:11:14,369
more questions or comments or anything

1393
01:11:11,789 --> 01:11:17,489
corrections if I've got anything wrong I

1394
01:11:14,369 --> 01:11:19,289
probably have but read the white paper

1395
01:11:17,489 --> 01:11:24,299
and send me feedback<font color="#E5E5E5"> on that instead</font>

1396
01:11:19,289 --> 01:11:27,059
<font color="#E5E5E5">okay if there's nothing else then thank</font>

1397
01:11:24,300 --> 01:11:31,949
you<font color="#E5E5E5"> for listening to me all five of you</font>

1398
01:11:27,059 --> 01:11:33,179
these are my contact details<font color="#E5E5E5"> I'll be</font>

1399
01:11:31,949 --> 01:11:34,710
around the rest of the week if you want

1400
01:11:33,179 --> 01:11:40,219
to come talk to me I'd love<font color="#E5E5E5"> to speak to</font>

1401
01:11:34,710 --> 01:11:40,219
you otherwise I'm done thank you

