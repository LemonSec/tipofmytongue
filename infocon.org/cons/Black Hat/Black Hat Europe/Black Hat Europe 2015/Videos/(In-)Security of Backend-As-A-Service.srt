1
00:00:00,000 --> 00:00:06,150
ok well over 1 I'm secret and this is
Steven and today we will talk about

2
00:00:06,150 --> 00:00:11,050
insecurity of paganism service and this
was joint work together with our

3
00:00:11,050 --> 00:00:20,260
students and Robert and next our advisor
about ourselves and secret I'm a third

4
00:00:20,260 --> 00:00:25,930
year PhD student at you mean you
dumpster in germany my main research

5
00:00:25,930 --> 00:00:30,480
focuses on static and dynamic code
analysis especially in the context of

6
00:00:30,480 --> 00:00:36,790
security mobile security and security
like riding analysis for detecting

7
00:00:36,790 --> 00:00:42,120
vulnerabilities or malicious
applications during did research we

8
00:00:42,120 --> 00:00:47,780
found in various areas P exploits and
also security vulnerabilities we

9
00:00:47,780 --> 00:00:52,079
presented most of the stuff it academic
conferences and very reasonably be

10
00:00:52,079 --> 00:00:56,800
started coming to industry and giving
talks at industry conferences and so far

11
00:00:56,800 --> 00:01:00,078
I have to say really prefer industry
conferences because the food is much

12
00:01:00,079 --> 00:01:05,890
better as an academic conferences and
Stephen I'm steven has already said I'm

13
00:01:05,890 --> 00:01:10,750
also from the academic world also 30
appeared to you soon too damn shot I

14
00:01:10,750 --> 00:01:14,850
mainly work on static program analysis
and for those of you have already taken

15
00:01:14,850 --> 00:01:19,100
a look at academic tools incentive
program no losses you might know Sudan

16
00:01:19,100 --> 00:01:23,240
flow droid both of which on the
maintainer at the moment and I like to

17
00:01:23,240 --> 00:01:27,580
play all the things and see if there are
vulnerabilities and cool stuff that

18
00:01:27,580 --> 00:01:35,140
wasn't intended by the original
developer you guys here because cracking

19
00:01:35,140 --> 00:01:40,710
on their banks you're here to learn
something how easy it is to have full

20
00:01:40,710 --> 00:01:46,189
access to more than 56 million
non-public data in a database in the

21
00:01:46,189 --> 00:01:51,548
cloud you will learn something how easy
it is to do remote code execution Amazon

22
00:01:51,549 --> 00:01:57,649
Services LLC will learn how easy it is
to have full control on Amazon Services

23
00:01:57,649 --> 00:02:04,100
were you not the owner of this stuff
before coming to the point

24
00:02:04,100 --> 00:02:07,479
the presentation will be slightly poring
over dual short introduction about

25
00:02:07,479 --> 00:02:13,000
making a service and then we come to the
party will talk about this

26
00:02:13,000 --> 00:02:16,750
good let's talk a little bit about clout

27
00:02:16,750 --> 00:02:23,910
three services probably all work very
well known of one is infrastructure as a

28
00:02:23,910 --> 00:02:28,430
service but a cloud operator provides an
infrastructure as you as a developer and

29
00:02:28,430 --> 00:02:32,390
then you have to maintain all the stuff
we have to run UPMC have to care about

30
00:02:32,390 --> 00:02:36,750
everything and a lot of maintenance work
for you

31
00:02:36,750 --> 00:02:42,550
Platform as a Service is a different
approach they offer your platform is the

32
00:02:42,550 --> 00:02:46,390
name says and then you have to your
application and you have to care about

33
00:02:46,390 --> 00:02:50,700
you applications right and then there is
no further so is the smallest one was

34
00:02:50,700 --> 00:02:56,310
basically the only ones of you interact
with the software usually represent or

35
00:02:56,310 --> 00:03:01,360
whatever and when we think about this
whole concept here just different cloud

36
00:03:01,360 --> 00:03:05,950
services and we think this from mobile
prospect for mobile developers

37
00:03:05,950 --> 00:03:12,030
perspective it doesn't really fit into
him because mobile developer wants to

38
00:03:12,030 --> 00:03:16,269
have doesn't want to care about so much
about maintenance in the back and

39
00:03:16,269 --> 00:03:19,859
because he wants to care about the
mobile application development he

40
00:03:19,859 --> 00:03:25,040
doesn't want to whatever maintain it and
set up of him he wants to have very easy

41
00:03:25,040 --> 00:03:31,200
access to the database and with is and
therefore some guys invented a new

42
00:03:31,200 --> 00:03:36,119
password which is called now back and as
a service which will be this talk about

43
00:03:36,120 --> 00:03:43,900
good so this is a service president
basically roughly started in 2011 in

44
00:03:43,900 --> 00:03:49,730
Silicon Valley a few guys startups
figured out that this is some new stuff

45
00:03:49,730 --> 00:03:53,470
we should do and what we should
implement make it for developer much

46
00:03:53,470 --> 00:03:58,930
easier to do a basic a client-server
communication there were a lot of

47
00:03:58,930 --> 00:04:02,209
startups and they grow very fast and
then you look into this different

48
00:04:02,209 --> 00:04:07,390
products you see a lot of similarities
in the code in order to stuff and other

49
00:04:07,390 --> 00:04:11,078
big players figured out that this might
be a good business for us like Amazon

50
00:04:11,079 --> 00:04:16,940
and but since this startup things
started quickly very quickly too

51
00:04:16,940 --> 00:04:23,010
come to market we thought out there
these guys care about security right so

52
00:04:23,010 --> 00:04:28,990
did the implement security in a good way
and this is talk about we will focus on

53
00:04:28,990 --> 00:04:33,140
to back and as a service providers
because they are one of the biggest or

54
00:04:33,140 --> 00:04:34,270
the biggest

55
00:04:34,270 --> 00:04:39,039
its parts which is owned by Facebook and
it is almost always has a plaque and a

56
00:04:39,040 --> 00:04:45,620
service in talk during a talk with will
switch both examples we will see some

57
00:04:45,620 --> 00:04:49,750
culture of it from Amazon which is
impossible for parts but in general it's

58
00:04:49,750 --> 00:04:55,690
always the same you can take a nap other
one and it's always the same so what

59
00:04:55,690 --> 00:04:59,840
will we do so now we would be a little
bit deeper into this mechanism is a

60
00:04:59,840 --> 00:05:04,229
given introduction then we will talk
about security they would talk about our

61
00:05:04,230 --> 00:05:08,480
findings and then I will hand over to
Stephen and Steven will talk a little

62
00:05:08,480 --> 00:05:12,910
bit about the controversial sport can
develop to now offer this talk the

63
00:05:12,910 --> 00:05:20,570
WishList and a conclusion ok so they're
gonna service how does this work you as

64
00:05:20,570 --> 00:05:25,890
an app developer setup or register to
back into the service provider for

65
00:05:25,890 --> 00:05:31,419
instance parse whatever and with a few
clicks you have a complete database you

66
00:05:31,419 --> 00:05:37,159
have facing a default database there in
order to communicate so in the back and

67
00:05:37,160 --> 00:05:41,790
as a service provider also besides the
pack and offers you an SDK or library

68
00:05:41,790 --> 00:05:46,550
which you have to get into your
application and if this Labor Day lot of

69
00:05:46,550 --> 00:05:51,930
API's in it which makes it very easy to
communicate database like to read and

70
00:05:51,930 --> 00:05:55,800
write in stores and data in a database
with only a few lines of code and that's

71
00:05:55,800 --> 00:06:00,290
the principle to make it as easy as
possible for developers to communicate

72
00:06:00,290 --> 00:06:03,540
with the database for instance

73
00:06:03,540 --> 00:06:08,970
besides the Android road is of course
also libraries or esta case for iOS

74
00:06:08,970 --> 00:06:13,590
JavaScript Python windows and so on and
so forth but the principle is always the

75
00:06:13,590 --> 00:06:17,590
same for you have these libraries
included in Europe so in europe programs

76
00:06:17,590 --> 00:06:21,940
and then you can communicate and
synchronized global database basically

77
00:06:21,940 --> 00:06:27,410
so you can have two at one end and when
I was there basically can synchronize

78
00:06:27,410 --> 00:06:34,100
data so far only talked about data
storage but these guys are back into the

79
00:06:34,100 --> 00:06:39,560
service guys to start upstart developers
usually baltimore is just storage so

80
00:06:39,560 --> 00:06:43,670
they also would like to have a push
notification mechanism rights or $0.02

81
00:06:43,670 --> 00:06:47,890
push notification to the clients and for
push notification inter-clan liked

82
00:06:47,890 --> 00:06:52,340
mobile app and the server writers ever
since the push notifications the client

83
00:06:52,340 --> 00:06:56,299
and the client can happen so they
already pre installed a pre-development

84
00:06:56,300 --> 00:07:01,310
stuff so it's for USA developments very
easy to use this only a few clicks and

85
00:07:01,310 --> 00:07:06,020
then you have this in the library
contains all the code for the push for

86
00:07:06,020 --> 00:07:10,760
receiving the Push Notification the same
values administration when you develop

87
00:07:10,760 --> 00:07:16,020
an app usually would like to have some
user registration and already again set

88
00:07:16,020 --> 00:07:17,390
it up for you

89
00:07:17,390 --> 00:07:24,690
very simple API to make this the package
is already created to host the users and

90
00:07:24,690 --> 00:07:28,350
then social network as well so you can
very easily access Facebook or Twitter

91
00:07:28,350 --> 00:07:32,940
information interact with a few lines of
code you can whatever at Facebook

92
00:07:32,940 --> 00:07:38,300
profile of course if the user's not in
but again everything is very easy so

93
00:07:38,300 --> 00:07:43,760
let's take a little bit more interviews
SDK and let's focus on database right so

94
00:07:43,760 --> 00:07:47,810
how does the database communications
work so in this case it took we took the

95
00:07:47,810 --> 00:07:54,290
Amazon example but in parse tree looks
similar so in order to just communicate

96
00:07:54,290 --> 00:07:59,830
or to connect to the database to the
cloud database in MS one example is its

97
00:07:59,830 --> 00:08:04,520
only actually one line of code and then
you're connected its Amazon but in this

98
00:08:04,520 --> 00:08:09,669
case an object Amazon s3 client in the
new basic AWS credentials it has two

99
00:08:09,670 --> 00:08:12,310
keys one is called Texas kiid

100
00:08:12,310 --> 00:08:20,090
and the other one is called secret so
let's look a little bit into this to the

101
00:08:20,090 --> 00:08:25,890
first of all why do you need two keys to
initialize or to connect to database so

102
00:08:25,890 --> 00:08:29,500
what are these two kissed and you looked
a little bit into the documentation and

103
00:08:29,500 --> 00:08:35,700
documentation basically says this two
keys are used and now for identifying

104
00:08:35,700 --> 00:08:40,420
application for identifying application
to the package so that the back and

105
00:08:40,419 --> 00:08:44,360
those ideas this application so I should
grant access to this and that for

106
00:08:44,360 --> 00:08:49,550
instance but interesting is anyone who
has your exes kids has the same level of

107
00:08:49,550 --> 00:08:55,520
exercise to AWS resources that you do
but this looks little bit interesting

108
00:08:55,520 --> 00:09:01,380
there will be did because we were really
not we didn't really understand until

109
00:09:01,380 --> 00:09:05,860
now we are not a hundred percent sure
what these two kids are because why do

110
00:09:05,860 --> 00:09:09,980
you need to kiss for identifying
something usually you need to kiss for

111
00:09:09,980 --> 00:09:13,800
or a username and password for
authentication them look further into it

112
00:09:13,800 --> 00:09:20,250
and there was one quote saying the AWS
SDK use your exes kiss to signed request

113
00:09:20,250 --> 00:09:25,100
that you don't have to handle the
signing process by yourself so signing

114
00:09:25,100 --> 00:09:29,670
authentication body is it and then we
found another quote it's not really

115
00:09:29,670 --> 00:09:30,990
clear what it is

116
00:09:30,990 --> 00:09:34,600
some point they write this some point
that authentication and then we found

117
00:09:34,600 --> 00:09:40,340
that the secret key the second key
secret keys as the name implies secret

118
00:09:40,340 --> 00:09:45,590
like to pair search for this basically
means for instance is a username and

119
00:09:45,590 --> 00:09:49,950
password but why would you put a
username and password into Europe which

120
00:09:49,950 --> 00:09:55,440
is basically public if you reverse
engineer you can access both kids and is

121
00:09:55,440 --> 00:10:01,880
interesting so let's come to address
security class 101 and we have Peter the

122
00:10:01,880 --> 00:10:07,080
client and we have to serve the what are
you doing so when Peter wants to

123
00:10:07,080 --> 00:10:12,660
identify change himself says yes hi I am
Peter right when Peter wants to

124
00:10:12,660 --> 00:10:16,589
authenticate basically transmitted
something that only you know like a

125
00:10:16,590 --> 00:10:19,980
passport or whatever and my password is
seeking 12

126
00:10:19,980 --> 00:10:26,200
34 and authorization means OK hi I'm
allowed to exercise only this and the

127
00:10:26,200 --> 00:10:30,770
data so what does this mean and
respecting the service principal interim

128
00:10:30,770 --> 00:10:38,030
board we understood so identification is
hello with the first key ideas for the

129
00:10:38,030 --> 00:10:43,150
first idea hi I met with application
ideas for the first one and the second

130
00:10:43,150 --> 00:10:48,709
one is some refused all the occasion I
secretly put it in the air so it is

131
00:10:48,710 --> 00:10:52,570
really strange for us we think that the
summer mixed up identification

132
00:10:52,570 --> 00:10:58,940
authentication and but why our
assumption is that the packing as a

133
00:10:58,940 --> 00:11:04,150
Service principles board already used in
the web world where you have a server

134
00:11:04,150 --> 00:11:07,949
but you have to protect your server and
where you can put you secret key in the

135
00:11:07,950 --> 00:11:12,180
server but right now the world changed
hands a nap and everyone has access to

136
00:11:12,180 --> 00:11:18,089
the epic can extract both keys good so
just to make this more clear so we have

137
00:11:18,090 --> 00:11:23,870
now peter and Howard and from this
perspective the server does not

138
00:11:23,870 --> 00:11:29,540
differentiate between both because it's
only identification of and not of the

139
00:11:29,540 --> 00:11:35,160
user so this means that the developer
has to put on top of this if for

140
00:11:35,160 --> 00:11:39,780
instance and Peter put some secret in a
database has to care about the security

141
00:11:39,780 --> 00:11:47,459
stuff and has to put additional effort
to security and this is interesting so

142
00:11:47,460 --> 00:11:51,530
they looked a little bit into what did
developers understand this correctly

143
00:11:51,530 --> 00:11:57,189
this principle here because we are not a
hundred percent sure and the one

144
00:11:57,190 --> 00:12:02,810
developer road on state overflow the app
secretly should be kept private so I

145
00:12:02,810 --> 00:12:07,579
have to encrypted so we can see here
that they really don't understand this

146
00:12:07,580 --> 00:12:14,500
again these two kids are basic care are
supposed to be public and you as a

147
00:12:14,500 --> 00:12:19,490
developer have two steps to secure the
pack and in order to to make this secure

148
00:12:19,490 --> 00:12:24,470
and then the funny thing is so he got
some replies from the audience from from

149
00:12:24,470 --> 00:12:28,630
stable before he didn't get like know
you got to strong you have to put

150
00:12:28,630 --> 00:12:31,010
additional security know another

151
00:12:31,010 --> 00:12:35,530
software engineer said yeah you
definitely should keep these two things

152
00:12:35,530 --> 00:12:40,980
private I have four suggestible you the
first one was keep your secrets on some

153
00:12:40,980 --> 00:12:45,660
services put this to kiss on the server
and during runtime load them so a

154
00:12:45,660 --> 00:12:52,319
reverse engineer cannot exercise right
because it only does the second one put

155
00:12:52,320 --> 00:12:56,670
you secrets in Chennai because nobody
really understands chain and its super

156
00:12:56,670 --> 00:13:02,150
hard to reverse and I use obvious
skaters of course in my favorite one is

157
00:13:02,150 --> 00:13:06,829
put it into the last picture of your
image this information not steganography

158
00:13:06,830 --> 00:13:10,170
would we have put in a previous talking
like just putting their and read from

159
00:13:10,170 --> 00:13:15,069
there you can see that these guys really
did not understand what's going on and

160
00:13:15,070 --> 00:13:20,960
they used security by obscurity which is
not a security mechanism so let's look a

161
00:13:20,960 --> 00:13:25,650
little bit into the security analysis
now what we did the first that what we

162
00:13:25,650 --> 00:13:30,520
did was ran on the powers back side they
mentioned a lot of windows were would

163
00:13:30,520 --> 00:13:34,829
use the past library and we found one
application we took it and then we

164
00:13:34,830 --> 00:13:38,620
loaded into our own reverse engineer
into a cold cold inspect but you can use

165
00:13:38,620 --> 00:13:46,640
any arbitrary wasn't sure if you would
like to know and then we found these

166
00:13:46,640 --> 00:13:52,360
line and the pin parse it's not an
object in this case it's basically

167
00:13:52,360 --> 00:13:56,070
initialize method called initialized but
again it's you have to get these two

168
00:13:56,070 --> 00:13:59,970
kids into the initialize method not a
surprise that you find this and these

169
00:13:59,970 --> 00:14:03,880
two kiss on the first $1 aswan
especially application idea what we have

170
00:14:03,880 --> 00:14:08,820
learned and the dollar is to basically
do the secret key or part call it

171
00:14:08,820 --> 00:14:17,460
ClientID a secret he opposed and then
what we did we develop our own app you

172
00:14:17,460 --> 00:14:23,260
downloaded from the prospect side the
library and then we also ruled parts

173
00:14:23,260 --> 00:14:28,160
initialized added this to kids and
positive special because they do is when

174
00:14:28,160 --> 00:14:32,899
you set everything up there is a default
users table

175
00:14:32,899 --> 00:14:35,980
there for you and you can use it as a
developer if you want most of the

176
00:14:35,980 --> 00:14:40,259
developers to this interesting
information like email addresses and so

177
00:14:40,259 --> 00:14:45,999
on so we did implemented this we talked
and then to frustrate the first one we

178
00:14:45,999 --> 00:14:53,149
had access to $100,000 email addresses
and why relat because they are so nice

179
00:14:53,149 --> 00:14:57,249
cars today's column say is valid for the
very fired already for us so we don't

180
00:14:57,249 --> 00:15:02,670
have to verify this and this this is why
this was shocking to us and then will be

181
00:15:02,670 --> 00:15:06,399
invested to this is all men right now
and then we investigate further and we

182
00:15:06,399 --> 00:15:10,839
took a couple of more abstract whatever
511 be looked into a tree to understand

183
00:15:10,839 --> 00:15:16,240
what's going on here and then the result
of this analysis was all records were

184
00:15:16,240 --> 00:15:21,309
basically publicly available if you want
and only a few developers really only a

185
00:15:21,309 --> 00:15:25,100
few use the principle of security by
obscurity they tried to protect these

186
00:15:25,100 --> 00:15:31,709
turkeys the rest didn't at all so now we
are ready for a mass analysis so we

187
00:15:31,709 --> 00:15:36,029
really would want to understand what's
the impact here and how big is this

188
00:15:36,029 --> 00:15:43,379
thing so we developed a framework for
this and the framework takes any airport

189
00:15:43,379 --> 00:15:47,569
you want whatever like to download from
the place to be had like 1,000,000 EPS

190
00:15:47,569 --> 00:15:51,269
11 laying around you don't know if there
is any pop any bitterness over Islamic

191
00:15:51,269 --> 00:15:57,509
it says the first of course you have to
identify if it's the library or not you

192
00:15:57,509 --> 00:16:01,899
can do this very easily by looking at
the package name for instance because

193
00:16:01,899 --> 00:16:06,429
usually its like men since chrome part
in the past world of course if these

194
00:16:06,429 --> 00:16:12,949
guys use occupational then we used some
very simple heuristics same for instance

195
00:16:12,949 --> 00:16:22,079
in this initialize example we have seen
the KGB up then you can look at the

196
00:16:22,079 --> 00:16:26,508
department is the type of the parameter
in the initialize method it was and the

197
00:16:26,509 --> 00:16:30,899
context and two strings and you can
simply hurry of course if the use

198
00:16:30,899 --> 00:16:34,959
reflection to hide this but none of them
so this was really enough it's very easy

199
00:16:34,959 --> 00:16:40,170
to identify the library as a next step
you would like to fully automatic text

200
00:16:40,170 --> 00:16:43,630
like this two-piece ride and what I call
it kiss

201
00:16:43,630 --> 00:16:50,380
both is a good idea lucky ecologies here
and in a few cases the table names

202
00:16:50,380 --> 00:16:55,570
though the big question is how can we
expect specific information from an

203
00:16:55,570 --> 00:17:01,110
application for instance strings
intelligence so again so this was the

204
00:17:01,110 --> 00:17:04,940
example we have seen previous leaders
like a running example so the first step

205
00:17:04,940 --> 00:17:10,740
but you have to do you have to identify
basically initialize method for what you

206
00:17:10,740 --> 00:17:13,300
would look so you would like your
interest in the second and the third

207
00:17:13,300 --> 00:17:18,530
argument against dollar $1 is too
because these are the two keys the first

208
00:17:18,530 --> 00:17:23,740
half the identified you can do it for
instance with this method signature this

209
00:17:23,740 --> 00:17:28,810
is a notation is here to implementation
our own motivation of your

210
00:17:28,810 --> 00:17:34,100
representations or miss but it's very
easy to read the second step you would

211
00:17:34,100 --> 00:17:38,230
like to expect this information for
dollars $1 too and there are different

212
00:17:38,230 --> 00:17:43,500
ways to do this one way is israel no
static analysis for instance you can

213
00:17:43,500 --> 00:17:49,300
start it is Paris initialize method the
second argument that is dollars to and

214
00:17:49,300 --> 00:17:52,899
then you can do a packed water analysis
so called back what's drink propagation

215
00:17:52,900 --> 00:17:57,660
if you want and then you go backwards
and industry or dollar is 1234 blah blah

216
00:17:57,660 --> 00:18:00,950
blah and then you're done if there's
another Simon you have to go continuing

217
00:18:00,950 --> 00:18:05,370
continue this is this is not hard to
implement but of course if these guys

218
00:18:05,370 --> 00:18:10,270
use applications all we all know that
setting analysis might not be the best

219
00:18:10,270 --> 00:18:14,450
case but for what we have seen that
didn't so it's an average is a very good

220
00:18:14,450 --> 00:18:20,560
and easy way to do this of course you
can do it all in a dynamic way so how

221
00:18:20,560 --> 00:18:24,220
can you do this they're different ways
to burn copies for instance you could

222
00:18:24,220 --> 00:18:28,930
instrument the bytecode with the new
locker which basically looks your your

223
00:18:28,930 --> 00:18:33,010
information before this party initialize
method you can instrument a new line

224
00:18:33,010 --> 00:18:37,680
which blocks the second and the third
argument for you and when deprecated

225
00:18:37,680 --> 00:18:41,720
then you run the application code and
once it hits this point and you see it

226
00:18:41,720 --> 00:18:47,930
in a log output of course you can also
use function hooking and you hope the

227
00:18:47,930 --> 00:18:52,450
initialize method and once the method is
hit then you have basically both kids

228
00:18:52,450 --> 00:18:54,830
would you like to extract but

229
00:18:54,830 --> 00:18:58,590
as you're not as you know probably in
dynamic analysis it always has

230
00:18:58,590 --> 00:19:03,240
limitation of code coverage of this
means you first have to hit the point in

231
00:19:03,240 --> 00:19:09,190
order to extract in order to things like
this there's also leverages ok instead

232
00:19:09,190 --> 00:19:13,769
what we did use the hybrid analysis
which basically combines both static and

233
00:19:13,769 --> 00:19:18,710
dynamic analysis and you can you take
the best out of post and put it into

234
00:19:18,710 --> 00:19:22,809
this hybrid one and this is basically
best thing a few versa because this is

235
00:19:22,809 --> 00:19:27,190
not the main part his other paper would
be published

236
00:19:27,190 --> 00:19:33,190
we will publish soon and is a technical
report our truth squad harvester and in

237
00:19:33,190 --> 00:19:38,850
a nutshell what it does it extracts
runtime information at any position in

238
00:19:38,850 --> 00:19:42,289
the culture reference and for the sparse
initialize you say I'm interested in the

239
00:19:42,289 --> 00:19:46,340
second argument please give me the
runtime values and you don't have to

240
00:19:46,340 --> 00:19:50,740
interact with the two because you static
analysis basically so-called pact was

241
00:19:50,740 --> 00:19:56,970
studied beckwith slicing to cut out to
identify all the instructions which can

242
00:19:56,970 --> 00:20:01,909
influence this value and once you have
this directly executed so you don't have

243
00:20:01,909 --> 00:20:06,590
to interesting click on the stuff to
extract this information but again for

244
00:20:06,590 --> 00:20:12,139
more information refer to the paper this
is not the main part here so at some

245
00:20:12,139 --> 00:20:16,279
point then you have all this information
So You plans and have two kids or the

246
00:20:16,279 --> 00:20:22,899
idea historian external up for parts
they are some you need to have the table

247
00:20:22,899 --> 00:20:27,768
names you can expect the table names in
the same way for MSN you don't need this

248
00:20:27,769 --> 00:20:33,590
and in but it really depends on it it's
not a big issue and then what you do

249
00:20:33,590 --> 00:20:38,100
should go on unpacking is a service you
going to pride you download the SDK and

250
00:20:38,100 --> 00:20:41,870
then you basically right you can you
possibly have something then you facing

251
00:20:41,870 --> 00:20:45,399
scripted a little bit at all the
information as you would do as a

252
00:20:45,399 --> 00:20:50,299
developer right at the two kids and the
table name for instance and then you try

253
00:20:50,299 --> 00:20:53,940
to access the database and this is
really like five or four lines of code

254
00:20:53,940 --> 00:20:59,429
it's not a big deal to do so and then we
did this and and then let's talk later

255
00:20:59,429 --> 00:21:01,290
about findings

256
00:21:01,290 --> 00:21:07,010
the first thing so we took all the
absolute be headed into a framework and

257
00:21:07,010 --> 00:21:12,240
then we analyzed based on all fours four
post for the Facebook we had excess

258
00:21:12,240 --> 00:21:21,360
potential access access to more than 56
million sensitive records but we have to

259
00:21:21,360 --> 00:21:24,959
think about this they're different apps
in different categories in this

260
00:21:24,960 --> 00:21:29,530
different categories used his pecker
service mechanism so this means frances

261
00:21:29,530 --> 00:21:34,470
was born airport which stored accident
information so when the accident

262
00:21:34,470 --> 00:21:38,700
happened you can even order liquid his
say blah blah blah something happened he

263
00:21:38,700 --> 00:21:43,920
was blah blah blah and then you can
store location information you can stop

264
00:21:43,920 --> 00:21:45,340
everything you can imagine

265
00:21:45,340 --> 00:21:49,510
of course everything is in the making
and of course everything is publicly

266
00:21:49,510 --> 00:21:53,990
available because these guys did not
protect this thing they thought that

267
00:21:53,990 --> 00:21:58,990
they are good by default know but I have
to put additional effort and the worst

268
00:21:58,990 --> 00:22:03,260
injuries it's not only readable you can
also write your did you can override to

269
00:22:03,260 --> 00:22:10,560
data so if you want and what they notify
rarity have pictures you that entering

270
00:22:10,560 --> 00:22:11,210
location

271
00:22:11,210 --> 00:22:16,570
lot of email address because this uses
table was in all cases there are a lot

272
00:22:16,570 --> 00:22:21,970
of email addresses phone numbers contact
later purchased a dozen we know where it

273
00:22:21,970 --> 00:22:27,240
is at present information I always me
whatever 10 bucks something different is

274
00:22:27,240 --> 00:22:32,730
stored there so he transmitted back to
me and also there was a need for

275
00:22:32,730 --> 00:22:36,790
whatever reason the Facebook information
which taught stored information about my

276
00:22:36,790 --> 00:22:41,320
friends in order the French were blocked
which is usually not public information

277
00:22:41,320 --> 00:22:48,189
but since this app stores in addition in
the back and you know who does not like

278
00:22:48,190 --> 00:22:54,310
besides this stuff which is a very
serious also the bad guys figured out

279
00:22:54,310 --> 00:22:58,290
that this analysis service might be
interesting for us replicas very easy to

280
00:22:58,290 --> 00:23:04,800
set up and we don't have to carry we
found 2 meta families that stored stolen

281
00:23:04,800 --> 00:23:09,870
data there so this was a banking Trojan
so to banking Trojan measures

282
00:23:09,870 --> 00:23:14,770
and they stored intercepted SMS messages
there and leaked data from the victim

283
00:23:14,770 --> 00:23:19,500
everything is step again everything is
public body fight if you want the

284
00:23:19,500 --> 00:23:26,040
coolest thing or not cool is that they
used Facebook sparse labor is a command

285
00:23:26,040 --> 00:23:30,899
controls over so they're stored all the
commands what they will attack next time

286
00:23:30,900 --> 00:23:34,750
you so basically three days they will
attack victim double-blind they will

287
00:23:34,750 --> 00:23:40,940
send him a command like whatever till 5
$5 something so this is very serious

288
00:23:40,940 --> 00:23:45,910
stuff this is another publication which
gave a target Virus Bulletin and there

289
00:23:45,910 --> 00:23:51,640
will be a paper about this paper 2050
good so let's talk a bit about

290
00:23:51,640 --> 00:23:55,610
responsible disclosure because we are
the good guys and again this is serious

291
00:23:55,610 --> 00:24:02,309
stuff before 28th of April we had access
to like roughly hundred tables and

292
00:24:02,309 --> 00:24:06,178
partial access to 32 table so why
partial exercise because a few columns

293
00:24:06,179 --> 00:24:12,559
were actually blocked so there was no no
read permission there and roughly it was

294
00:24:12,559 --> 00:24:17,760
more than 56 million records because we
somehow it counted and 28th of April to

295
00:24:17,760 --> 00:24:24,670
conduct a stupid for Facebook is owned
by Facebook verified it and they asked

296
00:24:24,670 --> 00:24:27,620
for more data because we send them only
a few that they understand what's going

297
00:24:27,620 --> 00:24:33,830
on here and then we provided every day
but we have some mess analysis basically

298
00:24:33,830 --> 00:24:39,199
all the applications that could
potentially everybody could potentially

299
00:24:39,200 --> 00:24:45,550
exercise stayed up so from our internet
went maples Facebook forward everything

300
00:24:45,550 --> 00:24:50,379
to the parts team and then they had to
reach out to developers because again it

301
00:24:50,380 --> 00:24:54,429
is not directly to fall of the bag is
not a problem of the back into the

302
00:24:54,429 --> 00:24:59,000
service providers it is a problem of the
developer tools to develop it does not

303
00:24:59,000 --> 00:25:02,119
put additional security here and then

304
00:25:02,119 --> 00:25:06,789
couple of days ago because we were
curious we scan it again and how many

305
00:25:06,789 --> 00:25:12,330
days do you think are still accessible

306
00:25:12,330 --> 00:25:16,220
exactly here

307
00:25:16,220 --> 00:25:21,460
99 tables and 33 papers or partial
exercise of you don't know probably its

308
00:25:21,460 --> 00:25:26,390
future development process but thought
about that there are more data we did

309
00:25:26,390 --> 00:25:31,159
not counted but of course since there
were three more months or a couple of

310
00:25:31,159 --> 00:25:37,029
more month after this again this data is
still accessible and it is very easy and

311
00:25:37,029 --> 00:25:41,360
we are here not to say that the Black
Cats we would like to reach out to

312
00:25:41,360 --> 00:25:44,500
developers because it somehow did not
break to send them an email

313
00:25:44,500 --> 00:25:48,399
really care about the state because it's
sensitive state and you have to protect

314
00:25:48,399 --> 00:25:52,389
it and listen to stephen was even will
say cause then you know how to protect

315
00:25:52,389 --> 00:25:58,289
good so few words about Amazon Amazon
it's slightly different because Emerson

316
00:25:58,289 --> 00:26:03,450
Electric Company and has a lot more
stuff to visit is something called ec2

317
00:26:03,450 --> 00:26:08,419
thing where you can whatever rent
virtual machines something called

318
00:26:08,419 --> 00:26:12,679
elastic beans but you also can whatever
run run scripts there and again these

319
00:26:12,679 --> 00:26:18,909
two things also accessible to keep and
if you did not protecting if you put the

320
00:26:18,909 --> 00:26:25,380
root key or this to root kids are always
cold he and IDs there you can also have

321
00:26:25,380 --> 00:26:35,899
access to the ends of course then we had
access to server backups complete p.m.

322
00:26:35,899 --> 00:26:39,518
server backups and again read and write
permission if you want

323
00:26:39,519 --> 00:26:44,830
well we are exes babe ruth bader various
things that stuff you know a lot of

324
00:26:44,830 --> 00:26:51,750
images in a lot of a lot of content of
your baby's thing a lot of photos and

325
00:26:51,750 --> 00:26:56,570
similar to the posting all this data
private messages Log treated very funny

326
00:26:56,570 --> 00:27:03,428
situation changed lawyers but a web page
content so complete webpage web service

327
00:27:03,429 --> 00:27:08,700
since you have access to this web
service you can rely upon it there if

328
00:27:08,700 --> 00:27:09,269
you want

329
00:27:09,269 --> 00:27:10,900
and again only

330
00:27:10,900 --> 00:27:16,380
you need only these two keys and it's
very easy to extract them so now how can

331
00:27:16,380 --> 00:27:21,560
you protect this stuff and head over to
Stephen explain you how to protect ok so

332
00:27:21,560 --> 00:27:25,389
there are a couple of developers who
probably don't want to give away all

333
00:27:25,390 --> 00:27:29,110
that it offers free all the BM's for
free so there are a couple of things you

334
00:27:29,110 --> 00:27:34,540
can do to a secret already said it's
it's not originally the fault of these

335
00:27:34,540 --> 00:27:38,850
back into service providers because many
of them do offer countermeasures just

336
00:27:38,850 --> 00:27:43,510
know once using them will look into why
a bit later but let me just first show

337
00:27:43,510 --> 00:27:46,879
what you can do but let me first return
to you

338
00:27:46,880 --> 00:27:52,420
security 101 I know most of you know but
apparently developers don't know what

339
00:27:52,420 --> 00:27:56,960
you originally want is you want to have
some distinction between two Users of

340
00:27:56,960 --> 00:28:00,610
the app if there's Peter Ryan Howard you
want to say okay it's fine that Peter

341
00:28:00,610 --> 00:28:04,760
access peter stuff inside the app but
you don't want her to access peter stuff

342
00:28:04,760 --> 00:28:09,980
or Peter to access Howard stuff so those
two is really what you don't want and

343
00:28:09,980 --> 00:28:15,710
this doesn't really fit into this this
authentication model because if there is

344
00:28:15,710 --> 00:28:20,730
just the up that authenticates or
identifies against the server then for

345
00:28:20,730 --> 00:28:25,080
the server there is no way to find out
whether the the guy sitting behind the

346
00:28:25,080 --> 00:28:32,240
app is actually Peter Howard or some
script that summit echo road so what you

347
00:28:32,240 --> 00:28:37,730
instead need to differentiate is to use
such models of a nap so there is the the

348
00:28:37,730 --> 00:28:43,480
authenticated user model where you have
a person sitting in front of the EPS

349
00:28:43,480 --> 00:28:49,980
touring they don't misuse up kind of has
identified authenticate against the end

350
00:28:49,980 --> 00:28:54,230
you have the second model which is an
anonymous mall just thought the app and

351
00:28:54,230 --> 00:29:00,300
that's it so and of course in the in the
anonymous model I can only really work

352
00:29:00,300 --> 00:29:04,550
with public data if I have an app that
opens up a newspaper for instance when

353
00:29:04,550 --> 00:29:07,720
the enemy most cases because I don't
care whether you're reading the same

354
00:29:07,720 --> 00:29:14,880
newspaper as I do and then it's fine to
only say okay I identify as the news

355
00:29:14,880 --> 00:29:18,770
reader app and I don't really care who
is sitting in front of it but as soon as

356
00:29:18,770 --> 00:29:22,350
you want to have the authenticated user
modeling you want to stop private

357
00:29:22,350 --> 00:29:26,949
you have to authenticate the user all
the way through to the back end and this

358
00:29:26,950 --> 00:29:32,600
is what most developers don't get so my
personal assumption is that since more

359
00:29:32,600 --> 00:29:36,418
and more people start writing Epson it's
really easy with these frameworks there

360
00:29:36,419 --> 00:29:41,360
are so many people who haven't heard
about security you or makes a basic

361
00:29:41,360 --> 00:29:44,809
concepts and this is why they're kind of
end up in the wrong model what they

362
00:29:44,809 --> 00:29:50,080
compare this private about what they end
up with the animals use them all and

363
00:29:50,080 --> 00:29:56,289
then they thinly stuff something on top
of it like look for an idea and the the

364
00:29:56,289 --> 00:30:02,970
whole back is public these these began
as a service providers they offer uac

365
00:30:02,970 --> 00:30:09,039
else as a means of providing security
but again with these AC else you have an

366
00:30:09,039 --> 00:30:13,539
authorization will you cannot switch
between the two scenarios ride if you

367
00:30:13,539 --> 00:30:18,590
have authenticated users you can put it
on the back and on these users if your

368
00:30:18,590 --> 00:30:22,309
animals you can put AC else on the
animals user

369
00:30:22,309 --> 00:30:25,200
this is something you can do you
consider new most may not access peter

370
00:30:25,200 --> 00:30:32,500
and Howard stuff but this means that to
to realize this you need to distinguish

371
00:30:32,500 --> 00:30:36,980
the animals guy from Howard and Peter
this is something that you must carry

372
00:30:36,980 --> 00:30:41,770
the back end and not try to solve
locally on the smartphone what most

373
00:30:41,770 --> 00:30:48,980
developers tried to do so how can we do
this how can we carry this security

374
00:30:48,980 --> 00:30:54,500
through to the back out if you just read
the the first entry you get when you

375
00:30:54,500 --> 00:30:59,330
google for the Amazon Web Services
documentation you find essentially this

376
00:30:59,330 --> 00:31:04,149
model you have your rep you have your
idea in secret key and you have the

377
00:31:04,150 --> 00:31:08,630
Amazon back end and this is of course
the the animals model right because I

378
00:31:08,630 --> 00:31:14,140
only have some identification
authentication between and beckoned but

379
00:31:14,140 --> 00:31:18,100
if you google a bit more and you bother
to read all of the documentation which

380
00:31:18,100 --> 00:31:22,240
is a hell of a lot of paper you find
that there is actually a key hierarchy

381
00:31:22,240 --> 00:31:27,659
because when you sign up for for Amazon
Web Services they give you a radical and

382
00:31:27,659 --> 00:31:31,160
and for this you can generate a key

383
00:31:31,160 --> 00:31:35,710
which is a bad idea what you can instead
do is you can do rival comments from

384
00:31:35,710 --> 00:31:42,370
this you can say I do arrive on a conf
01 and an account rep to generate keys

385
00:31:42,370 --> 00:31:47,330
for the news then you can already have
them all that says okay that one can

386
00:31:47,330 --> 00:31:51,020
only access data that has something to
do with that warmed up to can only

387
00:31:51,020 --> 00:31:54,920
sustain something to do with up to so
that's a bit better and you can see

388
00:31:54,920 --> 00:31:59,590
neither F one or two should be able to
start and stop BM's because this is

389
00:31:59,590 --> 00:32:03,720
something that only route probably wants
to do so we were already a bit better

390
00:32:03,720 --> 00:32:08,970
but we can also derive new keys from the
f1 and up to account we can derive an

391
00:32:08,970 --> 00:32:13,630
account repeater for Howard and generate
keys for them which then allows us to

392
00:32:13,630 --> 00:32:18,410
actually say hey how r contacts us peter
stuff in and on you must contact us and

393
00:32:18,410 --> 00:32:24,380
you so so much for theory the problem is
if you're an app developer you have to

394
00:32:24,380 --> 00:32:29,030
implement the stuff some home and I'll
start with one technique that has been

395
00:32:29,030 --> 00:32:34,840
around for quite a while and which was
kind of the the old way of doing it and

396
00:32:34,840 --> 00:32:41,530
then I'll show you a very modern with
artists like came out this year but let

397
00:32:41,530 --> 00:32:45,020
me start with the old one for us because
applications that have been around for

398
00:32:45,020 --> 00:32:51,930
longer than a couple of months probably
to use this and you're not supposed to

399
00:32:51,930 --> 00:32:56,630
actually be able to read this slide what
I want to show here is that it was not

400
00:32:56,630 --> 00:33:01,440
the concept of a so-called Tobin vending
machine so the idea is to access some

401
00:33:01,440 --> 00:33:06,130
service and this service does you'll
authentication for you and gives you big

402
00:33:06,130 --> 00:33:12,800
temporary and key and with that i dnt
you go to the back and ride and this is

403
00:33:12,800 --> 00:33:18,320
an excess limited idea and key when
other guy looks in he gets a different

404
00:33:18,320 --> 00:33:23,909
idea in key from the kind of middleman
the problem is to implement this you

405
00:33:23,910 --> 00:33:31,060
need to have a client and server side
and in the SDK there are samples on how

406
00:33:31,060 --> 00:33:34,980
to create a decline side and how to
create the service side but these are

407
00:33:34,980 --> 00:33:39,530
samples and you had to implement the
real deal on your own so if you're just

408
00:33:39,530 --> 00:33:44,418
an app developer you suddenly had to
understand the concert

409
00:33:44,419 --> 00:33:50,049
you had to find a way to actually host
the server side which kind of totally

410
00:33:50,049 --> 00:33:53,609
kills of the business model seeing as I
have developed you only care about

411
00:33:53,609 --> 00:33:58,289
Europe and we ought to all the better
for you and issue a developer that is

412
00:33:58,289 --> 00:34:02,619
looking except for this and you see this
documentation and this ok you get a

413
00:34:02,619 --> 00:34:06,689
dumbass over page here and you have to
have hosted on Tomcat or or unless it

414
00:34:06,690 --> 00:34:10,369
means talk service will probably run out
of the door and say ok what should I do

415
00:34:10,369 --> 00:34:14,879
this because my networks s fine if I
just put the routine he right where

416
00:34:14,879 --> 00:34:19,969
should I try to go for this effort it
just works at this doesn't get any

417
00:34:19,969 --> 00:34:27,348
customer next thing is I've been in
security for a couple of years now and

418
00:34:27,349 --> 00:34:31,839
actually show me it was a bit hard to
read the Amazon documentation because

419
00:34:31,839 --> 00:34:37,489
let's look at this also also you will
need to use your AWS account credentials

420
00:34:37,489 --> 00:34:41,399
to deploy the TVM we recommend that you
do not want the TVM under your abs

421
00:34:41,399 --> 00:34:46,379
account instead create and configure the
TVM to use the credentials of this a and

422
00:34:46,379 --> 00:34:53,109
user which we call the TV music problem
with this is ok you want to store stuff

423
00:34:53,109 --> 00:34:58,140
in 30 which means that you have to
understand s3 something called the TVM

424
00:34:58,140 --> 00:35:02,299
something I M something called Elastic
Beanstalk for hosting the stuff and do

425
00:35:02,299 --> 00:35:12,390
not confuse that with the TV Musa just
so you might already see their

426
00:35:12,390 --> 00:35:20,250
documentation as a part of the problem
next story is ok no let's let's assume

427
00:35:20,250 --> 00:35:24,119
we went through all of that effort and
we have actually be found a way to

428
00:35:24,119 --> 00:35:28,619
authenticate Peter and Howard and now we
want to put a ceiling on top and say ok

429
00:35:28,619 --> 00:35:36,069
Peter shouldn't exceed our stuff and
restarted from the TVM samples so should

430
00:35:36,069 --> 00:35:44,500
be fairly easy to implement its yeltsin
top right to think that is good because

431
00:35:44,500 --> 00:35:49,760
actually the documentation says you need
to modify the provided samples in order

432
00:35:49,760 --> 00:35:55,609
to implement these use a specific policy
objects so these samples they provide

433
00:35:55,609 --> 00:35:56,700
for authenticating you

434
00:35:56,700 --> 00:36:04,740
others they don't even support its heels
of course you can do all of that but

435
00:36:04,740 --> 00:36:10,209
again then you're spending at least the
week it's a week on week to implement

436
00:36:10,210 --> 00:36:15,720
stuff that doesn't help you with selling
your app stuff that you

437
00:36:15,720 --> 00:36:20,828
changes he do to your app that doesn't
increase customer value customer

438
00:36:20,829 --> 00:36:25,130
satisfaction distribution of the air for
most developers that's wasted week right

439
00:36:25,130 --> 00:36:29,450
they want spending because the a bronze

440
00:36:29,450 --> 00:36:35,430
blaming I wasn't there is a new service
called now that nato that makes things a

441
00:36:35,430 --> 00:36:39,190
lot easier so essentially they they now
have an SDK for what used to be the

442
00:36:39,190 --> 00:36:45,079
client side of the TVM they have a
proper back and implementation for the

443
00:36:45,079 --> 00:36:50,890
service side of the TV am and you don't
have to care about that much anymore you

444
00:36:50,890 --> 00:36:53,578
don't see that often in real-world EPS
because it's rather than your thing

445
00:36:53,579 --> 00:36:58,970
there is there are there's an
interesting concept we talked about

446
00:36:58,970 --> 00:37:03,379
users and authenticating users usually
people they want to pull this month from

447
00:37:03,380 --> 00:37:07,810
from the pocket store nap and just use
it right because people don't want to

448
00:37:07,810 --> 00:37:13,509
type in some polls would every time so
how can you authenticated user if the

449
00:37:13,510 --> 00:37:17,849
user actually doesn't want to
authenticate this is something that is

450
00:37:17,849 --> 00:37:22,099
called on members identities so when you
install the air or start for the first

451
00:37:22,099 --> 00:37:28,280
time the kind of create a fake college
and stories in the form of course if the

452
00:37:28,280 --> 00:37:32,300
user loses his film that's it then the
data is gone because the the account

453
00:37:32,300 --> 00:37:35,280
details are gone they're not known to
the user they just some fake data on the

454
00:37:35,280 --> 00:37:40,220
phone but it's still better than than
just don't using any authentication or

455
00:37:40,220 --> 00:37:49,540
any entities that you can use for access
control ok so let's just try to to use

456
00:37:49,540 --> 00:37:55,329
the court needles service once again
something from the documentation let me

457
00:37:55,329 --> 00:38:00,400
just read the note if you created your
identity pool before February 2015 you

458
00:38:00,400 --> 00:38:04,160
will need to rely so she ate your rules
with your identity pool in order to use

459
00:38:04,160 --> 00:38:07,640
this constructor with all the roles as a
parameter to do so

460
00:38:07,640 --> 00:38:09,609
need to consult selected

461
00:38:09,609 --> 00:38:17,009
to pool blah blah ok when two men were
created that I think I have to look into

462
00:38:17,009 --> 00:38:24,529
my notes so the I really like the the
Amazon Web Services it's great you can

463
00:38:24,529 --> 00:38:29,799
do tons of things with it and they have
tons of security concepts and the they

464
00:38:29,799 --> 00:38:33,970
are really great and someone did a great
job designing all those things but the

465
00:38:33,970 --> 00:38:37,788
problem is that most developers they
just want to get the reps lying they

466
00:38:37,789 --> 00:38:42,809
want to get out to market and if you
overloaded with security concepts for

467
00:38:42,809 --> 00:38:48,329
developers that kind of they are what
they are about your by profession but

468
00:38:48,329 --> 00:38:52,509
they create Epson their spare time then
you can expect them to to understand

469
00:38:52,509 --> 00:38:58,670
high-flying security concepts or assume
that they like professional developers

470
00:38:58,670 --> 00:39:03,440
that's what we saw in the examples that
people just didn't use stuff that was

471
00:39:03,440 --> 00:39:09,759
all there just to show you that this is
actually pretty well designed let me let

472
00:39:09,759 --> 00:39:16,069
me say that old so instead of just
having standard IGN key for accessing

473
00:39:16,069 --> 00:39:17,230
the backend

474
00:39:17,230 --> 00:39:23,869
thing does it accesses using other Users
provide credentials or nothing in case

475
00:39:23,869 --> 00:39:29,430
of the stuff stored on the device that
gets injected by the security you get

476
00:39:29,430 --> 00:39:33,549
back you temporary credentials like
temporary idea temporary key with their

477
00:39:33,549 --> 00:39:38,650
to go on to it to a storage like s3 such
a picture in the documentation would

478
00:39:38,650 --> 00:39:44,880
have helped a great deal noting that
more people would have used it so let's

479
00:39:44,880 --> 00:39:49,970
look at what you can do if you're using
parts so also has AC else you can

480
00:39:49,970 --> 00:39:54,279
configure that through web interface
funny enough most people didn't even do

481
00:39:54,279 --> 00:39:59,609
that so actually I don't have an excuse
for that because there is pretty easy to

482
00:39:59,609 --> 00:40:02,288
use

483
00:40:02,289 --> 00:40:10,319
also has has an enormous identities so
the same story you store staff on

484
00:40:10,319 --> 00:40:17,920
on the device that is then used for
credentials and the SDK automatically

485
00:40:17,920 --> 00:40:23,779
inject your your credentials

486
00:40:23,779 --> 00:40:27,569
same story again I think that this might
also be a reason why it was some people

487
00:40:27,569 --> 00:40:31,029
don't don't really want to use these
animals identities and rather go without

488
00:40:31,029 --> 00:40:35,799
any authentication because if these
credentials are stored on the device on

489
00:40:35,799 --> 00:40:40,930
the user loses his device then there's
it's really hard to get the data and

490
00:40:40,930 --> 00:40:46,209
probably the worst thing is since these
are fake identities if I lose my device

491
00:40:46,209 --> 00:40:51,288
denominator still stored on the server I
get a new devised and I trade your

492
00:40:51,289 --> 00:40:55,609
records on the service so you end up
with a lot of orson data that is not

493
00:40:55,609 --> 00:41:01,729
reduced by anyone anymore but that's
sitting around on your disk there's no

494
00:41:01,729 --> 00:41:06,078
real countermeasure for their parts
charges you for disk space so there's

495
00:41:06,079 --> 00:41:08,160
there's a small cave in to the story

496
00:41:08,160 --> 00:41:10,828
get your dedication wrong and you
actually pay for it because the

497
00:41:10,829 --> 00:41:18,819
disgraceful 11 other great example of
this back and a service providers make

498
00:41:18,819 --> 00:41:26,299
it easy to do things wrong but hard to
do things right is this one so things to

499
00:41:26,299 --> 00:41:29,309
get an error message when you try to
access a table in the back and that

500
00:41:29,309 --> 00:41:36,499
doesn't exist no one thinks it or
everyone's asleep ok but what parts will

501
00:41:36,499 --> 00:41:40,479
do if you get this option wrong is it
will just silently create the table for

502
00:41:40,479 --> 00:41:44,078
you you mistyped able to get a new
version of the table with that miss

503
00:41:44,079 --> 00:41:52,609
typename so this is great because what
you can do it you can extract the the

504
00:41:52,609 --> 00:41:57,190
keys from a nap you just create a new
table but just specify a different

505
00:41:57,190 --> 00:42:01,799
parameter in the code your free disk
space so whatever your disk run school

506
00:42:01,799 --> 00:42:05,859
you go to the place where you look for
EPS that you'll see Paris

507
00:42:05,859 --> 00:42:11,699
extract the key is and will create a
table and you're not paying for it the

508
00:42:11,699 --> 00:42:16,809
guy who did wrong place for it i mean
this this is something you would expect

509
00:42:16,809 --> 00:42:19,740
that these features are totally insane

510
00:42:19,740 --> 00:42:24,149
but they implemented them deliberately
to make it easy for developers they

511
00:42:24,150 --> 00:42:28,280
didn't want to develop a to have to go
to the configuration system and create

512
00:42:28,280 --> 00:42:33,300
tables so they just said write the code
and will create the table on the fly and

513
00:42:33,300 --> 00:42:38,700
this is this is a mindset that many of
us will think it's insane but was kind

514
00:42:38,700 --> 00:42:42,250
of created due to ease of use

515
00:42:42,250 --> 00:42:49,070
so the question now is will soon be
Christmas let us assume that santa claus

516
00:42:49,070 --> 00:42:53,280
is coming back and a service providers
what what should they put on their wish

517
00:42:53,280 --> 00:42:58,330
list to get this whole thing sorted out
so first of all improve the

518
00:42:58,330 --> 00:43:06,690
documentation showing a few accepts from
from the Amazon AWS documentation this

519
00:43:06,690 --> 00:43:10,990
needs improvement in his work make it
easier for those people who haven't had

520
00:43:10,990 --> 00:43:14,509
an education in computer science
alrighty security to actually understand

521
00:43:14,510 --> 00:43:18,230
what's going on because these are the
people that write apps I mean it's

522
00:43:18,230 --> 00:43:21,040
absolutely super if you have a
professional development that gets

523
00:43:21,040 --> 00:43:25,529
everything right but all those apps that
stole millions of email addresses all

524
00:43:25,530 --> 00:43:29,680
that store health records or car crash
records a lot of reading though they

525
00:43:29,680 --> 00:43:36,000
were credible just someone and this guy
when he doesn't understand it you'll go

526
00:43:36,000 --> 00:43:43,000
for the simple way of the simple way is
your way next thing is checks and alerts

527
00:43:43,000 --> 00:43:48,550
so we've seen the the Amazon kehoe rocky
road so there is in general there is

528
00:43:48,550 --> 00:43:52,510
absolutely no reason for anyone to ever
put his route keys inside a nap

529
00:43:52,510 --> 00:43:57,350
absolutely zero but the problem is you
can do it and your epic an

530
00:43:57,350 --> 00:44:00,859
authentication towards the back and
using the root key at the back and will

531
00:44:00,859 --> 00:44:07,109
not complain some measures have been
taken so for instance if you try to dr.

532
00:44:07,109 --> 00:44:11,440
applaud your effort to the to the Amazon
Appstore they will check whether there

533
00:44:11,440 --> 00:44:17,550
are keys in there and give you an alert
double check this Google was supposed to

534
00:44:17,550 --> 00:44:21,710
do something similar we haven't seen it
yet maybe it's all coming but anyways

535
00:44:21,710 --> 00:44:25,640
why doesn't the back and say whenever
someone with the route to connect

536
00:44:25,640 --> 00:44:29,788
I'll give better warning I'll say he
probably don't want this and if

537
00:44:29,789 --> 00:44:34,240
developers during the testing they see a
big message flashing up a this probably

538
00:44:34,240 --> 00:44:37,598
secure they will not ship the up like
this because at the youth side they

539
00:44:37,599 --> 00:44:42,910
don't want this pop up so this would be
a way to kind of force people into more

540
00:44:42,910 --> 00:44:46,180
secure but on the other hand this might
actually scare away developers because

541
00:44:46,180 --> 00:44:52,578
they arrived to deal with and it's
always a trade off between getting

542
00:44:52,579 --> 00:44:56,660
people who are not developers to code
and then getting them to do dried

543
00:44:56,660 --> 00:45:05,288
lasting legal aspect I'm not a lawyer
he's not a lawyer but from what we have

544
00:45:05,289 --> 00:45:10,599
understood so far there is no real
responsibility for for data breaches so

545
00:45:10,599 --> 00:45:17,720
no one of those guys has actually said
you should know where we're facing legal

546
00:45:17,720 --> 00:45:22,149
challenges because we have made data
publicly available because we have

547
00:45:22,150 --> 00:45:27,289
actually given all its highly sensitive
user information it's just like maybe we

548
00:45:27,289 --> 00:45:33,710
should maybe tomorrow so there should be
some more pressure to actually properly

549
00:45:33,710 --> 00:45:41,369
handle userdata ok we're nearing the end
of the talk as you take away messages so

550
00:45:41,369 --> 00:45:47,039
if you don't remember anything from
their talk there are three things you

551
00:45:47,039 --> 00:45:52,640
would like you to remember first one is
security in the cloud doesn't come for

552
00:45:52,640 --> 00:45:58,618
free please provide us the the
advertised like just purchase or rent or

553
00:45:58,619 --> 00:46:02,319
closed space you only write direct we
take care of the rest

554
00:46:02,319 --> 00:46:06,369
but this is not how security works
security works by you as a developer

555
00:46:06,369 --> 00:46:11,279
sitting down and actually thinking of
what needs to be protected and what does

556
00:46:11,279 --> 00:46:15,990
it mean so is this a public record isn't
as a private record this is nothing you

557
00:46:15,990 --> 00:46:23,578
can offload 22 a provider of course you
can but you will fail and then if you

558
00:46:23,579 --> 00:46:28,349
get this wrong and people get this wrong
detects a free and almost effortless you

559
00:46:28,349 --> 00:46:33,619
just put the map into small you'd run
away with the key in most cases and you

560
00:46:33,619 --> 00:46:35,120
you got your taxes

561
00:46:35,120 --> 00:46:42,690
to some AWS and the mitigation
techniques they're all there but we need

562
00:46:42,690 --> 00:46:47,410
to get people use them and the last one
is a bit over over like a newspaper

563
00:46:47,410 --> 00:46:52,069
headline security personnel were all
there well we're not actually hackers

564
00:46:52,070 --> 00:46:56,890
were university researchers but I think
that that the bad guys already know

565
00:46:56,890 --> 00:47:01,359
about this because they are not stupid
and so it's it's a good idea to actually

566
00:47:01,360 --> 00:47:07,820
see cure stuff and start securing your
stuff no oK so that's it from our side

567
00:47:07,820 --> 00:47:11,730
if you have any questions we've got some
time to take questions and I'll be happy

568
00:47:11,730 --> 00:47:20,980
to hear them

569
00:47:20,980 --> 00:47:46,600
explain all these findings the question
for the for the recording have we

570
00:47:46,600 --> 00:47:51,089
contacted Amazon with the list of top 10
things to do or all wishlist

571
00:47:51,090 --> 00:47:56,480
well we had a telco and we've told them
about the problem but you have to say

572
00:47:56,480 --> 00:48:02,330
that the general problem has developed a
problem so in the end Amazon can just go

573
00:48:02,330 --> 00:48:07,200
to the development say please get this
right they will not start and for

574
00:48:07,200 --> 00:48:12,868
instance deactivate root access or
access with root keys because then they

575
00:48:12,869 --> 00:48:16,810
will break existing apps and they will
hold their business model of course we

576
00:48:16,810 --> 00:48:20,750
told them hey documentation isn't so
grade and I think they're working on it

577
00:48:20,750 --> 00:48:24,710
but for a for ultimate solutions you
have to contact the guy who wrote the

578
00:48:24,710 --> 00:48:29,720
code the guy who kind of owns the data
and especially for four parts though

579
00:48:29,720 --> 00:48:33,629
conferences say they have a free
subscription free basic subscription so

580
00:48:33,630 --> 00:48:38,170
you even have apps that are no longer on
the Play Store because the guy who died

581
00:48:38,170 --> 00:48:42,830
or whatever I don't know but the data is
still there and no one actually feels a

582
00:48:42,830 --> 00:48:47,640
responsibility to deleted parse cannot
because it's a free service they don't

583
00:48:47,640 --> 00:48:52,200
even know what this guy still live
around and the guy of course he doesn't

584
00:48:52,200 --> 00:48:55,839
care anymore he's ever seen the store
anymore he's gone probably to be

585
00:48:55,840 --> 00:49:13,690
something else but what about this data
is free for everyone

586
00:49:13,690 --> 00:50:06,400
56 million records did not like whatever
records because we didn't actually do

587
00:50:06,400 --> 00:50:15,260
what we did is we looked at AC else they
were defined we looked at schemes like

588
00:50:15,260 --> 00:50:19,630
which calms the week system that table
we had some phone apps we played around

589
00:50:19,630 --> 00:50:25,490
with to better understand the system but
we don't have a data dump all that data

590
00:50:25,490 --> 00:50:30,890
right because they would be highly
unethical but they these findings were

591
00:50:30,890 --> 00:50:34,770
confirmed just to clarify this by a
Muslim parcel it's real data were

592
00:50:34,770 --> 00:50:52,620
talking about because the providers they
actually looked into into the data

593
00:50:52,620 --> 00:51:15,650
credentials or only the credentials so
the application idea and the key to

594
00:51:15,650 --> 00:51:32,800
check from those what you already know
if it's still possible so the question

595
00:51:32,800 --> 00:51:40,010
was if faced with the Facebook app was
implemented wrong so the parse back in

596
00:51:40,010 --> 00:51:45,190
as a service which was started in the
beginning or sport by Facebook and other

597
00:51:45,190 --> 00:51:49,800
parts beckoned thing is owned by
Facebook it's not the Facebook app it's

598
00:51:49,800 --> 00:51:56,110
like whatever any arbitrary the business
services like Facebook I guess they

599
00:51:56,110 --> 00:51:58,540
don't have the biggest

600
00:51:58,540 --> 00:52:02,620
it's all for the Facebook data that
wanna be included what they did is they

601
00:52:02,620 --> 00:52:07,210
they allow you to sign in with your
Facebook account and then kind of use

602
00:52:07,210 --> 00:52:11,630
Facebook features but for some reason
they trip they took some of the data

603
00:52:11,630 --> 00:52:17,350
from Facebook and duplicated it into
their own back into service tables so

604
00:52:17,350 --> 00:52:21,370
actually when you type in your Facebook
credentials they you gave them the

605
00:52:21,370 --> 00:52:25,470
possibility to dump part of the stuff
you had access to this stuff will then

606
00:52:25,470 --> 00:52:35,410
stored in secure

607
00:52:35,410 --> 00:52:42,680
how many apps did we test and how many
EPS did have taken as a service so we

608
00:52:42,680 --> 00:52:47,970
tested a roughly like two million
applications in total and there are some

609
00:52:47,970 --> 00:52:51,779
statistics for parts I can tell you
those districts because their public

610
00:52:51,780 --> 00:52:56,559
it's only five percent of the apps have
began as a service and retain this 5%

611
00:52:56,559 --> 00:53:02,140
we're talking about this later so
because they are so many days because

612
00:53:02,140 --> 00:53:09,359
usually despite percent are like
top-rated absolutely going to have time

613
00:53:09,359 --> 00:53:17,808
for one more question ok doesn't seem
like there is any question anymore we're

614
00:53:17,809 --> 00:53:21,869
still around the country and so feel
free to approach or after the conference

615
00:53:21,869 --> 00:53:25,089
contact us by email if you have any
further questions and have a great day

616
00:53:25,089 --> 00:53:25,490
at the conference

