1
00:00:00,000 --> 00:00:06,730
this is Jeff Sharmarke I'm currently in
that case security engineer at

2
00:00:06,730 --> 00:00:11,460
Salesforce I was with NCC group until
about a month ago so that's a recent

3
00:00:11,460 --> 00:00:16,619
change for me but I do a lot of rules
were done some modules related to rails

4
00:00:16,619 --> 00:00:19,820
and couple other things will break man
and whatnot

5
00:00:19,820 --> 00:00:24,130
yeah and you sort with me and Chicago
office so I we've got that flying up

6
00:00:24,130 --> 00:00:28,698
there is a brief outline about what
we're gonna talk about today I'm gonna

7
00:00:28,699 --> 00:00:33,059
go into an introduction to Rails just
kind of the important parts that you

8
00:00:33,059 --> 00:00:36,940
need to know for this talk to pass it
over to Jeff will talk about

9
00:00:36,940 --> 00:00:41,589
authentication and then back to me for
authorization and a new tool called

10
00:00:41,590 --> 00:00:47,670
boiler man we really is jumping straight
into add this to command that you run

11
00:00:47,670 --> 00:00:51,699
when you want to build a new rails out
so you say rails new sample app and then

12
00:00:51,699 --> 00:00:56,390
this is the directory structure that
starts to get bildt's so the first three

13
00:00:56,390 --> 00:01:00,730
folders we see here are the models of
use and the controllers so the models

14
00:01:00,730 --> 00:01:06,140
are kind of the or a player at eyes
objects to database rows we've got the

15
00:01:06,140 --> 00:01:11,549
views this is Dr be usually templating
engine so this is gonna be with the

16
00:01:11,549 --> 00:01:16,450
client actually sees and runners in
front of them the controllers are the

17
00:01:16,450 --> 00:01:21,970
kind of the glue to glue the models and
have used together so the controllers

18
00:01:21,970 --> 00:01:26,509
just gather up the data and get ready
for the presentation layer in the

19
00:01:26,509 --> 00:01:30,820
configuration directory of a file called
routes that are being so this is the

20
00:01:30,820 --> 00:01:35,798
file that pretty much defines all of the
public-facing routes in your application

21
00:01:35,799 --> 00:01:39,770
and we're gonna go into this a little
bit later to kind of see what the

22
00:01:39,770 --> 00:01:44,100
structure of that file looks like and we
have two files called Gemfile and Jen

23
00:01:44,100 --> 00:01:48,640
filed out lock so Jen files pretty much
here are all the list of external

24
00:01:48,640 --> 00:01:54,020
dependencies and Ruby are called James
and Jen filed out lock is when you run

25
00:01:54,020 --> 00:01:58,470
bundle install it installs all your jams
those are gonna be there

26
00:01:58,470 --> 00:02:01,679
it's going to contain the version
numbers of all the gems are installed so

27
00:02:01,680 --> 00:02:05,300
if you're looking for vulnerable
vulnerabilities in specific jams you're

28
00:02:05,300 --> 00:02:12,010
going to want to look into that file to
see what version they're running so the

29
00:02:12,010 --> 00:02:17,530
rails community has this notion of the
rails way this is kind of DHA show

30
00:02:17,530 --> 00:02:23,000
created rails calls it a mi casa so it's
more he kind of puts the menu together

31
00:02:23,000 --> 00:02:30,100
for you and leaves little to the choice
so this problem was that all of the kind

32
00:02:30,100 --> 00:02:34,310
of web frameworks out there we're all
card software environments so you have

33
00:02:34,310 --> 00:02:37,940
to kind of pick and choose and put all
these pieces together so what he wanted

34
00:02:37,940 --> 00:02:39,490
to do was say here's

35
00:02:39,490 --> 00:02:43,600
convention over configuration here's
what you gettin here's how we think that

36
00:02:43,600 --> 00:02:49,690
you know should look so nectar record
this is kind of the model error you're

37
00:02:49,690 --> 00:02:52,329
getting a lot of things by the fall they
seek protection

38
00:02:52,330 --> 00:02:57,220
there's a lot of ways that that can go
wrong but you kind of have to go out of

39
00:02:57,220 --> 00:03:01,240
your way for that to happen we have
linked up here to Rails SQL I dot org

40
00:03:01,240 --> 00:03:05,980
it's research we use pretty regularly to
make sure that when we're assessing code

41
00:03:05,980 --> 00:03:10,060
you know these are the possible ways
that can go wrong and if things that we

42
00:03:10,060 --> 00:03:14,920
look for action view is to view layer so
you're gonna get things by default like

43
00:03:14,920 --> 00:03:19,649
HDMI output encoding so you should have
access as protection and there are ways

44
00:03:19,650 --> 00:03:24,330
to kind of shoot yourself in the foot so
those are things that we look for an

45
00:03:24,330 --> 00:03:28,620
action controllers control earlier so
when you build a new application will go

46
00:03:28,620 --> 00:03:32,080
into this little bit later but you get
things like cross-site request forgery

47
00:03:32,080 --> 00:03:42,750
protection by the fall protection for
drying method so yes so this taco

48
00:03:42,750 --> 00:03:45,560
focuses on some of the things that are
really built into the framework

49
00:03:45,560 --> 00:03:48,640
specifically authentication
authorization and that's where we're

50
00:03:48,640 --> 00:03:53,579
going to go off the rails a little bit
so the first point to make is that

51
00:03:53,580 --> 00:03:58,060
authentication authorization or two
distinctly separate processes a lot of

52
00:03:58,060 --> 00:04:01,680
times people love them together just
think in terms of author and that

53
00:04:01,680 --> 00:04:03,360
mindset is oftentimes

54
00:04:03,360 --> 00:04:08,700
Matic of problems down the road it
really helps in the security model to

55
00:04:08,700 --> 00:04:11,989
think of things that separate with
authentication focusing solely on

56
00:04:11,990 --> 00:04:17,690
identifying the user an authorization
determining what you know privileges

57
00:04:17,690 --> 00:04:22,219
they have in the application in both
cases there's not a lot of support

58
00:04:22,220 --> 00:04:29,000
built-in rails natively on
authentication problem only HTTP HTTP

59
00:04:29,000 --> 00:04:34,400
basic and I just are needed we supported
out of the box on authorization there's

60
00:04:34,400 --> 00:04:38,349
really no date of facility in both of
these cases are some helper methods in

61
00:04:38,350 --> 00:04:42,790
things that can help in building these
that will talk about it when it comes to

62
00:04:42,790 --> 00:04:47,000
authentication we've got two options
essentially of how we're going to handle

63
00:04:47,000 --> 00:04:51,600
that her application and the first is to
roll our own and just write our own

64
00:04:51,600 --> 00:04:58,360
authentication framework the risks here
are the kind of reinventing the real and

65
00:04:58,360 --> 00:05:02,860
you're likely to make a lot of mistakes
that others have already made and

66
00:05:02,860 --> 00:05:06,020
corrected in in writing authentication
systems

67
00:05:06,020 --> 00:05:09,349
there's a lot more to authentication
than just checking and storing passwords

68
00:05:09,350 --> 00:05:14,229
the obvious thing that people think
about and then in the in the Rails

69
00:05:14,229 --> 00:05:18,050
framework there's a helper method called
has secure password that's been

70
00:05:18,050 --> 00:05:22,500
available since version 312 that
something that built into the framework

71
00:05:22,500 --> 00:05:26,180
that can help us to build an
authentication system securely in and

72
00:05:26,180 --> 00:05:31,960
we'll see a little bit more about that
the second option is to use an off the

73
00:05:31,960 --> 00:05:35,880
shelf job that's one of these
third-party libraries there are some

74
00:05:35,880 --> 00:05:37,390
risks here as well

75
00:05:37,390 --> 00:05:41,890
vulnerabilities in Johnstown to be more
attractive to attackers because you can

76
00:05:41,890 --> 00:05:47,210
compromise a wider number of
applications so you might have a little

77
00:05:47,210 --> 00:05:52,590
bit more exposure for that reason you
know you need to pay real close

78
00:05:52,590 --> 00:05:56,929
attention to ongoing updates and
maintenance to incorporate fixes and

79
00:05:56,930 --> 00:06:02,190
improvements over time that's really
true about you know any library code but

80
00:06:02,190 --> 00:06:06,969
certainly something as security
sensitive as authentication we want to

81
00:06:06,970 --> 00:06:10,750
be careful and then of course there's
still some work that you have to do to

82
00:06:10,750 --> 00:06:12,120
integrate your application

83
00:06:12,120 --> 00:06:16,500
and hand glued logic together and I
could be a little bit tricky but on the

84
00:06:16,500 --> 00:06:20,930
plus side the core code is generally
pretty well that ends well reviewed by

85
00:06:20,930 --> 00:06:24,690
the community there's a lot of people
depending on the on the common big

86
00:06:24,690 --> 00:06:29,960
players in an authentication and for
that reason it tends to benefit from the

87
00:06:29,960 --> 00:06:35,270
community experience and you know
improvements over time as as new

88
00:06:35,270 --> 00:06:40,669
discoveries are made so let's talk about
some of the common authentication jams

89
00:06:40,669 --> 00:06:45,669
at the top of the list here we've got
device that's far and away the most

90
00:06:45,669 --> 00:06:50,130
popular means of doing authentication
and Rails apps it's built on a

91
00:06:50,130 --> 00:06:54,949
middleware layer called warden the next
one on the list that we have here is on

92
00:06:54,949 --> 00:07:00,190
Yahoo and that's primarily is a walk to
John so what you're doing

93
00:07:00,190 --> 00:07:05,500
third-party authentication with Facebook
or Google or something like that it

94
00:07:05,500 --> 00:07:10,690
makes that really easy Thurs callbacks
in devised to support on yachts so the

95
00:07:10,690 --> 00:07:15,500
two work together in some cases you can
have devised for your usual username and

96
00:07:15,500 --> 00:07:19,260
password authentication but that if the
user chooses to authenticate by Ola

97
00:07:19,260 --> 00:07:24,320
it'll just call back into devised
doorkeeper is a little bit different

98
00:07:24,320 --> 00:07:28,680
that turns your application internet
provider so that you can provide

99
00:07:28,680 --> 00:07:32,599
authentication services to other
applications we see this a lot of times

100
00:07:32,599 --> 00:07:38,349
with API 10 points things like that and
the last one that we have here and this

101
00:07:38,349 --> 00:07:43,610
is not an exhaustive list this is really
just kind of the larger players is off

102
00:07:43,610 --> 00:07:50,330
logic logic is not nearly as common but
it has a little bit of a unique model

103
00:07:50,330 --> 00:07:54,180
that makes it kind of interesting of
blending sessions and authentication

104
00:07:54,180 --> 00:07:58,990
whereas most times we think about that
occasion being implemented in the in the

105
00:07:58,990 --> 00:08:05,660
user model on the other hand there's
some arguments in favor of writing jobs

106
00:08:05,660 --> 00:08:11,250
are hard writing your own authentication
system what we have here is a quote from

107
00:08:11,250 --> 00:08:17,840
the Ruby on Rails tutorial it's
published book as well as an online book

108
00:08:17,840 --> 00:08:21,060
that's freely available that's really

109
00:08:21,060 --> 00:08:25,030
you know the way a lot of people get
started in building Rails applications

110
00:08:25,030 --> 00:08:29,940
the key points here are things that we
hear developers say over and over again

111
00:08:29,940 --> 00:08:34,349
the parts that I bolded that
authentication requires extensive

112
00:08:34,349 --> 00:08:39,020
customization and modifying a third
party product is often more work than

113
00:08:39,020 --> 00:08:44,560
writing your own an off the shelf
systems can be black boxes I don't

114
00:08:44,560 --> 00:08:48,390
entirely agree with this logic
authentication does require some

115
00:08:48,390 --> 00:08:53,370
customization I think that statement is
probably more true of authorization

116
00:08:53,370 --> 00:08:55,900
which is going to be a little bit more
tied to your business logic

117
00:08:55,900 --> 00:09:00,770
authentication tends to be you know
pretty similar form application

118
00:09:00,770 --> 00:09:03,990
application so I don't know that there's
a ton of customization but there's

119
00:09:03,990 --> 00:09:08,160
certainly a little bit of work to be
done modifying at the product

120
00:09:08,160 --> 00:09:12,829
third-party product being more work
again I don't really believe the best

121
00:09:12,830 --> 00:09:16,440
the case if you consider all the little
ancillary features that you needed an

122
00:09:16,440 --> 00:09:21,339
authentication system and then the last
point that off the shelf systems can be

123
00:09:21,339 --> 00:09:28,240
black boxes of course true of any third
party you know code that you use but I

124
00:09:28,240 --> 00:09:31,420
could be just as true love of the
realest framework itself if you don't

125
00:09:31,420 --> 00:09:37,469
take the time to educate yourself and
learn how it how it operates so I I

126
00:09:37,470 --> 00:09:41,190
don't think we entirely agree with this
point but these are the things people

127
00:09:41,190 --> 00:09:48,700
say when they when they want to talk a
little bit about how we might do that I

128
00:09:48,700 --> 00:09:53,190
mentioned this has secure password help
her before and we have to an example

129
00:09:53,190 --> 00:09:59,080
where we have a simple user model that
has a database came up with two columns

130
00:09:59,080 --> 00:10:03,680
both strings name and password I just
and we just call that helped her in the

131
00:10:03,680 --> 00:10:09,319
model that gives us is some
functionality like this where we can do

132
00:10:09,320 --> 00:10:15,709
you their new setup password and a
password confirmation argument and it'll

133
00:10:15,709 --> 00:10:16,469
go ahead and

134
00:10:16,470 --> 00:10:21,530
and securely store that password does
that using decrypt so it's a it's a

135
00:10:21,530 --> 00:10:25,880
reasonably secure password storage
scheme a while back I wrote a really

136
00:10:25,880 --> 00:10:30,660
long blog post with some of my thoughts
on the password storage problem but

137
00:10:30,660 --> 00:10:36,910
overall I think pretty much everybody's
happy with with the crypt the other

138
00:10:36,910 --> 00:10:41,189
thing that gives you is some
authentication methods so you can call

139
00:10:41,190 --> 00:10:45,660
up indicating passive password if it's
not the correct password the function

140
00:10:45,660 --> 00:10:49,060
just returns false if you pass the
correct password it returns the user

141
00:10:49,060 --> 00:10:52,750
ought to be interesting point here is
that all of this is just provided by

142
00:10:52,750 --> 00:10:57,510
this by this helper that mixes into your
model so you don't have to write a whole

143
00:10:57,510 --> 00:11:01,790
lot of code and you've got a pretty
basic authentication function that's

144
00:11:01,790 --> 00:11:06,829
backed by equipped with secure password
storage passwords are are digested and

145
00:11:06,830 --> 00:11:11,310
stored has been gripped I just in that
password I just ring but we can just

146
00:11:11,310 --> 00:11:15,729
handle them as you know password and
password confer attributes on our model

147
00:11:15,730 --> 00:11:21,850
so it's kind of nice but what we have
here is really just a an authentication

148
00:11:21,850 --> 00:11:26,180
function it's not really an
authentication system and there's a lot

149
00:11:26,180 --> 00:11:31,189
more that we need to do their stories
credentials and having an authentication

150
00:11:31,190 --> 00:11:33,540
function is really just the start

151
00:11:33,540 --> 00:11:36,730
there's a lot of other things that we
need to think about like you know how

152
00:11:36,730 --> 00:11:40,680
we're gonna integrate that with our
session management logic or do we want

153
00:11:40,680 --> 00:11:45,380
to implement any sort of password
complexity requirements the third point

154
00:11:45,380 --> 00:11:46,939
there is a big one

155
00:11:46,940 --> 00:11:50,710
what we gonna do when the user loses or
forgets their password that's something

156
00:11:50,710 --> 00:11:54,790
that almost every applications going to
need to account for its often something

157
00:11:54,790 --> 00:11:59,719
that we see problems with and then
lastly you've got you know some other

158
00:11:59,720 --> 00:12:03,710
cases depending on the nature of your
application you might need the ability

159
00:12:03,710 --> 00:12:09,840
to login with an API token multi-factor
two factor auth things like that we we

160
00:12:09,840 --> 00:12:14,170
touched on a little bit more so let's
talk a little bit about about some of

161
00:12:14,170 --> 00:12:18,620
these points are not gonna go into all
of them just in the interest of time but

162
00:12:18,620 --> 00:12:22,890
let's start with session management
succession management is just the idea

163
00:12:22,890 --> 00:12:26,850
of this process that identifies the user
throughout

164
00:12:26,850 --> 00:12:31,190
interaction with the application so the
first step is just exchanging their

165
00:12:31,190 --> 00:12:35,870
credentials for a quickie that's really
the initial authentication and then in

166
00:12:35,870 --> 00:12:41,529
subsequent requests identifying user
based on the value of that cookie the

167
00:12:41,529 --> 00:12:45,240
third such as you know in validating
that session when when necessary either

168
00:12:45,240 --> 00:12:50,190
when the user logs out when a timeout or
some other event occurs and under some

169
00:12:50,190 --> 00:12:55,970
options and rails about where we store
session state as a as it goes between

170
00:12:55,970 --> 00:13:02,870
room was so we talked about session
state a little bit so we have here you

171
00:13:02,870 --> 00:13:04,240
know simple login form

172
00:13:04,240 --> 00:13:10,250
username password Sign In button user
comes to the application and enters

173
00:13:10,250 --> 00:13:16,130
their username they provide their
password and click the Sign In button at

174
00:13:16,130 --> 00:13:19,980
which point we're going to see a call
like this which is pretty similar to

175
00:13:19,980 --> 00:13:24,300
what we saw when we are we're talking
about the secure password just looking

176
00:13:24,300 --> 00:13:29,380
up the user in the database by there I D
authenticating with their password in

177
00:13:29,380 --> 00:13:33,610
this case it's correct so the user
objects returned and the server create

178
00:13:33,610 --> 00:13:37,779
such an object server-side know this is
where things differ little bit between

179
00:13:37,779 --> 00:13:42,790
between some of these options in the
current default what's gonna happen is

180
00:13:42,790 --> 00:13:49,759
that session object on the server will
be serialized and and signed and

181
00:13:49,759 --> 00:13:53,699
encrypted and then returned to the user
and that actually makes up their their

182
00:13:53,699 --> 00:13:59,079
session so on future visits the
application later page requests 13

183
00:13:59,079 --> 00:14:04,709
prevent that present that signs he
realized session object as their session

184
00:14:04,709 --> 00:14:09,739
identifier the server down will verify
the signature decrypted deserialize it

185
00:14:09,740 --> 00:14:15,339
and recover the session state from that
from that value another option is

186
00:14:15,339 --> 00:14:21,620
database back sessions so in this case
we have a similar low user provides the

187
00:14:21,620 --> 00:14:26,329
user name and password but the server
now has has a database working actively

188
00:14:26,329 --> 00:14:32,029
store information so the same deal user
is authenticated assuming its successful

189
00:14:32,029 --> 00:14:36,870
a session object is created in the
database now in this case we generate a

190
00:14:36,870 --> 00:14:38,889
random value

191
00:14:38,889 --> 00:14:44,470
needs to be cryptographically random so
that is not the new verbal or adjustable

192
00:14:44,470 --> 00:14:51,059
that value is stored in the database
alongside the session object and then

193
00:14:51,059 --> 00:14:57,129
that's provided to the user as their
cookie value so I'm subsequent requests

194
00:14:57,129 --> 00:15:01,379
the user provides that random value in
their cookie the server looks set up in

195
00:15:01,379 --> 00:15:05,279
the database and retrieves the session
object from the database that's you know

196
00:15:05,279 --> 00:15:11,790
that's associated with that user so
there is me

197
00:15:11,790 --> 00:15:16,660
yeah there's some pros and cons of each
of these approaches and this is just a

198
00:15:16,660 --> 00:15:21,419
table 2 summarizes it as we go through
this time I've highlighted the ones that

199
00:15:21,419 --> 00:15:26,970
I think are are a win for each type so
right off the bat

200
00:15:26,970 --> 00:15:32,410
the cookie value that's provided with
database options is random with the

201
00:15:32,410 --> 00:15:36,988
cookie based options it's you know it's
encrypted serialized object so I see

202
00:15:36,989 --> 00:15:40,069
that as a win for database options
because there is no less attack surface

203
00:15:40,069 --> 00:15:43,719
little less network overhead because
it's a smaller value things like that

204
00:15:43,720 --> 00:15:51,850
when it comes to revoking the session
again I see that as a win for database

205
00:15:51,850 --> 00:15:56,209
options I was a little bit easier to
enforce maximum lifetime I her sessions

206
00:15:56,209 --> 00:16:02,618
when stored in a database you can easily
enforce a limitation on the number of

207
00:16:02,619 --> 00:16:07,499
concurrent sessions just by ensuring
that you'll meet record a maximum of one

208
00:16:07,499 --> 00:16:13,519
per user and then revoking it is a lot
easier to just delete this action from

209
00:16:13,519 --> 00:16:17,290
your database when you increase the
value in giving the user you really

210
00:16:17,290 --> 00:16:25,610
can't propose yet cuz they now have that
value this is the this is really the one

211
00:16:25,610 --> 00:16:30,689
that says it all to me the attack
surface is completely different database

212
00:16:30,689 --> 00:16:35,819
sessions really the only option to
compromise that that such an is to steal

213
00:16:35,819 --> 00:16:40,649
or enumerate that random value them
talked about I'm cooking sessions you

214
00:16:40,649 --> 00:16:44,669
still have that you also have the
possibility of cryptographic attacks

215
00:16:44,669 --> 00:16:49,459
session reuse can be a big problem if
I'm storing

216
00:16:49,459 --> 00:16:54,339
you know session state and I'm not
validating that its validating it

217
00:16:54,339 --> 00:16:58,649
appropriately you might have things like
you know account balance the stored in

218
00:16:58,649 --> 00:17:02,559
the session and I might be able to make
a purchase and then replace an older

219
00:17:02,559 --> 00:17:08,049
session token still valid and it shows
my balance being unchanged selected your

220
00:17:08,049 --> 00:17:13,639
problem longer internet live sessions
can be more common because again the

221
00:17:13,640 --> 00:17:17,990
replication is little harder you can
just delete it and you also had the idea

222
00:17:17,990 --> 00:17:24,260
of encryption key exposures you know if
that encryption key is over expose the

223
00:17:24,260 --> 00:17:29,200
user through a verbose error message
something along those lines that it

224
00:17:29,200 --> 00:17:33,590
attacker can just create a session that
identifies them as whoever you know

225
00:17:33,590 --> 00:17:42,010
they'd like to be in the last point is
to think about the overhead here on the

226
00:17:42,010 --> 00:17:47,779
database side there's a bit more
overhead because I need request I gotta

227
00:17:47,779 --> 00:17:53,760
do I look up to the database to retrieve
the session caching can help there's

228
00:17:53,760 --> 00:17:57,580
also some some jobs that are similar to
you you know to the traditional

229
00:17:57,580 --> 00:18:04,408
ActiveRecord sessions the back instead
with things like righteous man cashed so

230
00:18:04,409 --> 00:18:08,390
you know those can be a little more
performance as well

231
00:18:08,390 --> 00:18:13,390
cookie such ends your overhead is is
basically cryptographic with the

232
00:18:13,390 --> 00:18:17,679
validation of signatures and encryption
process and reduce your application

233
00:18:17,679 --> 00:18:24,270
process with the the overhead here on
database sessions has led the Royals

234
00:18:24,270 --> 00:18:29,000
team to remove support or database
sessions from core rails in recent

235
00:18:29,000 --> 00:18:34,070
versions it still available as a as an
external jam but they're concerned about

236
00:18:34,070 --> 00:18:38,889
the the scalability of the performance
had led them to remove it it really

237
00:18:38,890 --> 00:18:43,070
wasn't their fault for a long time but
I'm kind of disappointed that it was

238
00:18:43,070 --> 00:18:47,870
actually removed from the framework
entirely because I think in in a large

239
00:18:47,870 --> 00:18:52,039
you know in the majority case the
performance issues really aren't that

240
00:18:52,039 --> 00:18:57,600
significant so it's unfortunate but you
can still enabled database sessions if

241
00:18:57,600 --> 00:18:58,469
you used

242
00:18:58,470 --> 00:19:05,400
so the the type of such as you have is
is configured by this value in

243
00:19:05,400 --> 00:19:10,640
configuration was their session store so
here we had it that you could restore

244
00:19:10,640 --> 00:19:17,690
the key value there this is a really the
cryptographic you this is the the key

245
00:19:17,690 --> 00:19:21,780
for the key-value pair in the cookie so
it's really just the name of the cookie

246
00:19:21,780 --> 00:19:27,539
I've also bowled there the expire after
two hours that's not configured by

247
00:19:27,539 --> 00:19:28,299
default

248
00:19:28,299 --> 00:19:31,918
regardless obsession type that you
choose you have to manually configure

249
00:19:31,919 --> 00:19:36,970
your session has sold out of house will
see that people don't do this and add up

250
00:19:36,970 --> 00:19:44,350
the sessions that are honored and
potentially so that can be available if

251
00:19:44,350 --> 00:19:46,178
you want to do database options

252
00:19:46,179 --> 00:19:50,370
change that to a club record store again
you have to include the you know the

253
00:19:50,370 --> 00:19:55,580
ActiveRecord sort you know there's other
other third parties Young's available to

254
00:19:55,580 --> 00:20:04,158
all so on the cookie sessions the
encryption key is stored in big secrets

255
00:20:04,159 --> 00:20:09,169
broken down by environment so if you
have production development staging and

256
00:20:09,169 --> 00:20:17,070
so on and that is defined as secret
Cubase now if you have a value called

257
00:20:17,070 --> 00:20:22,780
secret token instead of Citigroup a
secret Cubase what you get is a

258
00:20:22,780 --> 00:20:28,760
serialize base 64 encoded and signed
cooking so the difference there is that

259
00:20:28,760 --> 00:20:32,940
it's it's still signs so you can tamper
with it unless you know the key but you

260
00:20:32,940 --> 00:20:37,039
can be coded in view its contents so
that could be a problem if there's ever

261
00:20:37,039 --> 00:20:41,260
any sensitive data stored in session
objects that kind of a bad pattern

262
00:20:41,260 --> 00:20:45,539
anyhow you usually want to just or
references to objects and look them up

263
00:20:45,539 --> 00:20:50,260
in the database rather than storing the
entire object but we do see that arise

264
00:20:50,260 --> 00:20:54,510
from time to time where you'll be able
to get you back and credentials API's to

265
00:20:54,510 --> 00:20:58,490
you you know if you like use to back-end
systems things like that might be

266
00:20:58,490 --> 00:21:02,210
exposed through that you know through
that value so don't put secrets in your

267
00:21:02,210 --> 00:21:08,610
interceptions the next point to talk
about his his house that's realization

268
00:21:08,610 --> 00:21:11,959
process works in the config initializer

269
00:21:11,960 --> 00:21:18,910
session store the cookie serializer
parameter defines how sections are

270
00:21:18,910 --> 00:21:25,500
serial rapist in versions of rails for
one in greater it defaults to using JSON

271
00:21:25,500 --> 00:21:32,520
serialization less than 41 you're gonna
get marshall sessions and anybody who

272
00:21:32,520 --> 00:21:37,030
follows real security is gonna remember
the body serialization vulnerabilities

273
00:21:37,030 --> 00:21:46,629
in 2013 with Gamal over XML and JSON
that was a was due to marshall et

274
00:21:46,630 --> 00:21:52,830
réalisation so Marshall when it loads
will allow you to rule to deserialize

275
00:21:52,830 --> 00:21:58,129
any arbitrary class that the application
knows about and in some cases certain

276
00:21:58,130 --> 00:22:02,870
classes on these realization will allow
you to execute arbitrary code the other

277
00:22:02,870 --> 00:22:10,139
setting their hybrid is kind of a
compatibility migrations so when when an

278
00:22:10,140 --> 00:22:11,350
application to begin with

279
00:22:11,350 --> 00:22:15,959
with hybrid serialization what happens
is the server will issue JSON serializer

280
00:22:15,960 --> 00:22:21,390
sections but it will honor either JSON
at war marshal cereal I just so again

281
00:22:21,390 --> 00:22:27,310
you've got the possibility of a remote
code execution if I know I can create a

282
00:22:27,310 --> 00:22:32,240
session and that's kind of interesting
because you might not notice it if

283
00:22:32,240 --> 00:22:36,370
you're black box testing because you're
gonna see you JSON serialize sessions

284
00:22:36,370 --> 00:22:42,030
but those the application will honor it
if you have a lifetime configured on her

285
00:22:42,030 --> 00:22:45,510
session in you really only need to have
a hybrid mode configured for that

286
00:22:45,510 --> 00:22:50,600
lifetime because beyond nine you know
all of your older Marshall serialization

287
00:22:50,600 --> 00:22:54,889
should have expired and you should never
see them but it's something to be aware

288
00:22:54,890 --> 00:22:56,850
of

289
00:22:56,850 --> 00:23:03,459
ok so lost and forgotten passwords this
is a really big one

290
00:23:03,460 --> 00:23:08,130
there's a ton of different approaches to
this people like 20 questions you know

291
00:23:08,130 --> 00:23:13,610
your favor color your mother's maiden
name those also some applications

292
00:23:13,610 --> 00:23:16,780
generator password and email it to you
but then you have your password sitting

293
00:23:16,780 --> 00:23:20,620
in clear text and email that's not good
you know there's there's all kinds of

294
00:23:20,620 --> 00:23:24,479
bad approaches the approach that we like
to see

295
00:23:24,480 --> 00:23:28,870
how does a little bit more like this you
know generate a cryptographically secure

296
00:23:28,870 --> 00:23:33,959
random joke in his store it in your
database associate with the user ID and

297
00:23:33,960 --> 00:23:38,470
story time stamp on it was generated
transmit that to the user out of band

298
00:23:38,470 --> 00:23:42,820
somehow emails most comment you
sometimes see awesome things like that

299
00:23:42,820 --> 00:23:48,780
the user visits the site presents that
talk in case they're probably just gonna

300
00:23:48,780 --> 00:23:53,960
click the link in the email it says come
here to reset your password when they do

301
00:23:53,960 --> 00:23:57,679
that the application looks up the user
who is associated with that Tolkien

302
00:23:57,679 --> 00:24:01,510
verifies the expiration date that's
important

303
00:24:01,510 --> 00:24:07,090
we don't want these tokens that would
forever couple hours maybe a day longer

304
00:24:07,090 --> 00:24:13,040
than that is just potentially a problem
and then go ahead and change the

305
00:24:13,040 --> 00:24:17,428
password and then the last up there are
one that people often overlook is to

306
00:24:17,429 --> 00:24:22,140
delete the Tolkien was sold at value
that sitting there in mailboxes is no

307
00:24:22,140 --> 00:24:28,299
longer valid so let's talk a little bit
about the visor going to switch gears

308
00:24:28,299 --> 00:24:29,360
here

309
00:24:29,360 --> 00:24:33,129
devises really realistically the way in
most applications are due to deal with

310
00:24:33,130 --> 00:24:38,809
you know with the occasion so here we've
got a simple user model of this enabled

311
00:24:38,809 --> 00:24:42,309
by devised devised actually generated
this model for us it doesn't hurt to try

312
00:24:42,309 --> 00:24:46,240
to turn it on and I modeled it doesn't
exist and this is what you get by

313
00:24:46,240 --> 00:24:51,360
default so it just loads devised and
passes all these different modules to it

314
00:24:51,360 --> 00:24:55,510
siege these modules turns on different
different bits of functionality on and

315
00:24:55,510 --> 00:24:59,900
off you know register able to come in
and provide your email and create an

316
00:24:59,900 --> 00:25:02,780
account they'll be different things

317
00:25:02,780 --> 00:25:08,928
the ones that are are disabled their off
time out

318
00:25:08,929 --> 00:25:13,440
account walking email confirmation in
those are enabled by default but it's

319
00:25:13,440 --> 00:25:19,090
it's a simple flag attorney Don within
the relative file about that time i

320
00:25:19,090 --> 00:25:24,220
convention maps URLs do controller so we
really just this one line and just

321
00:25:24,220 --> 00:25:28,450
called this device for help her and tell
us that we want to be heard on our user

322
00:25:28,450 --> 00:25:34,330
object if we do rake routes we see that
one line actually gives us a whole bunch

323
00:25:34,330 --> 00:25:37,740
of different mappings two controllers
from devised

324
00:25:37,740 --> 00:25:42,040
now again this is in the default is
going to vary depending on what modules

325
00:25:42,040 --> 00:25:46,530
we had turned on and off but you'll see
that this gives us things like a sign in

326
00:25:46,530 --> 00:25:50,720
page as I now page password change
password reset it and so on

327
00:25:50,720 --> 00:25:57,150
when it comes to actually using devised
in our application the way we do that is

328
00:25:57,150 --> 00:26:01,309
through some filters and helpers that
are available through our controllers

329
00:26:01,309 --> 00:26:06,870
control air filter there it's about more
action call back so it can run before

330
00:26:06,870 --> 00:26:11,409
the controller action and it simply
authenticate the user or determine their

331
00:26:11,410 --> 00:26:14,500
identities stores that as he has a
current user

332
00:26:14,500 --> 00:26:20,220
this is often put in the application
controller told Michael touch on the

333
00:26:20,220 --> 00:26:24,770
inheritance of controllers little bit
but that way all the controllers cross

334
00:26:24,770 --> 00:26:28,760
the application will inherit that
dependency you require authentication

335
00:26:28,760 --> 00:26:33,610
and west it's explicitly disabled for a
given to children need to be available

336
00:26:33,610 --> 00:26:39,169
anonymously so that's a good patter done
within the controller we have these

337
00:26:39,170 --> 00:26:43,150
helpers that can let us check on the
state of our authentication user signed

338
00:26:43,150 --> 00:26:47,830
and returned a true false based on
whether you're signed in current user is

339
00:26:47,830 --> 00:26:52,300
really the important one cause that
returns the actual user object of the

340
00:26:52,300 --> 00:26:56,040
current user and the user session a
similar returns that are

341
00:26:56,040 --> 00:27:03,780
device has a bit of a security history
these are you know just going through

342
00:27:03,780 --> 00:27:08,520
the changelogs looking at things that
are our security relevant in most of

343
00:27:08,520 --> 00:27:12,620
these are pretty minor you know there's
an unreleased commit that allows you to

344
00:27:12,620 --> 00:27:17,530
send password change notifications so if
my passwords changed it gives me and you

345
00:27:17,530 --> 00:27:20,700
know it just says hey someone change
your password if that wasn't you what's

346
00:27:20,700 --> 00:27:28,010
up over the years we've had things like
disabling tokens their outstanding for

347
00:27:28,010 --> 00:27:32,920
password reset when the user changes the
email or password there was an email

348
00:27:32,920 --> 00:27:38,340
enumeration bug a little while ago and
3100 I got this bolded they no longer

349
00:27:38,340 --> 00:27:43,889
story cytokines as plain text each pack
of the token which is something that's

350
00:27:43,890 --> 00:27:47,850
that's really good if you end up with a
sequel injection vulnerability or

351
00:27:47,850 --> 00:27:50,629
something like that where I can read the
contents of the database

352
00:27:50,630 --> 00:27:54,920
there's no longer a token there that
will allow me to recite the user's

353
00:27:54,920 --> 00:27:59,480
password in plain text cuz its doors in
HVAC that's a big improvement and that's

354
00:27:59,480 --> 00:28:04,030
not something that can be really easy to
overlook what we had these Password

355
00:28:04,030 --> 00:28:08,290
Reset tokens flying around that helps to
think of them as credentials because

356
00:28:08,290 --> 00:28:13,290
they really are you access the account
and so we need to secure them in in

357
00:28:13,290 --> 00:28:17,649
similar ways that we would secure actual
credentials

358
00:28:17,650 --> 00:28:23,520
CSIR vulnerability in what was a token
fixation vulnerability that allowed

359
00:28:23,520 --> 00:28:26,770
procedure but then back in two to three
years

360
00:28:26,770 --> 00:28:31,129
type confusion and this one is really
interesting and we're going to spend a

361
00:28:31,130 --> 00:28:36,090
couple of slides talking about this
vulnerability this was disclosed by your

362
00:28:36,090 --> 00:28:43,560
enchanting back in February of 2013 so
let's talk about how this works because

363
00:28:43,560 --> 00:28:48,480
it's it's an older vulnerability but
it's kind of indicative of the sorts of

364
00:28:48,480 --> 00:28:53,830
things that can easily go wrong with
with password reset closed the main

365
00:28:53,830 --> 00:28:56,370
point with the slide is that there's
been all these changes but if you look

366
00:28:56,370 --> 00:29:00,669
at a lot of them are these really subtle
things that you know can be really easy

367
00:29:00,670 --> 00:29:05,810
to overlook and I i kinda see the slide
is a win for devised that they're

368
00:29:05,810 --> 00:29:09,800
they're improving things in addressing
these little subtle flaws that you know

369
00:29:09,800 --> 00:29:14,200
that would be easy to overlook and
they're the sorts of things that people

370
00:29:14,200 --> 00:29:19,670
introduced in in custom code all the
time so this password reset

371
00:29:19,670 --> 00:29:24,230
vulnerability this is pseudocode the
kind of gives you an idea of how the

372
00:29:24,230 --> 00:29:28,650
password reset blow and devise works in
the paper I go into detail Teresa

373
00:29:28,650 --> 00:29:33,180
through like all the all the various
classes that are called in and it boils

374
00:29:33,180 --> 00:29:38,800
down to something like this you got
reset controller that you know reads the

375
00:29:38,800 --> 00:29:41,399
password reset tool kit from the
requests looks up the user object

376
00:29:41,400 --> 00:29:46,150
associate with that if there's a user
there then it goes ahead and change

377
00:29:46,150 --> 00:29:50,970
their password to the values that the
user provided so pretty straightforward

378
00:29:50,970 --> 00:29:57,650
right but there's a catch here and it
comes from my seat bicycles got some

379
00:29:57,650 --> 00:30:02,520
really unexpected behavior with with
some of the quality operators so the

380
00:30:02,520 --> 00:30:08,300
first one here we've got a simple query
that returns you know where one equals

381
00:30:08,300 --> 00:30:13,820
one string so notice that the first one
is an integer and the second is a string

382
00:30:13,820 --> 00:30:19,490
that begins with the number one when my
signal does this shit type casts the

383
00:30:19,490 --> 00:30:25,250
string to an integer does Paris in and
since one equals one thinks that one

384
00:30:25,250 --> 00:30:34,080
equals one string and returns true
that's kind of unexpected similarly the

385
00:30:34,080 --> 00:30:39,540
integer 0 will match any strain the
dozen returned with a tender and that

386
00:30:39,540 --> 00:30:44,290
doesn't begin with an integer not null
return true as well so what does this

387
00:30:44,290 --> 00:30:51,970
mean two rails and into that house for
research fellow usually in Rails the

388
00:30:51,970 --> 00:30:57,030
params hashes as a hash of you know the
parameters of the user provide her with

389
00:30:57,030 --> 00:31:02,460
a request these are usually strength as
a developer sometimes think that there

390
00:31:02,460 --> 00:31:08,730
are always strings so we look at some
examples of our physical bodies we get

391
00:31:08,730 --> 00:31:13,890
you know we get a key-value pair with
those values if we passengers food

392
00:31:13,890 --> 00:31:18,490
equals 1 physicals to we still get back
strain representations of those integers

393
00:31:18,490 --> 00:31:22,520
if they're just get parameters but
there's some some behaviors in Rails

394
00:31:22,520 --> 00:31:30,300
that'll let us manipulate these types
prior to 40 rails with except the bodies

395
00:31:30,300 --> 00:31:31,550
and posts

396
00:31:31,550 --> 00:31:36,990
that's no longer the case partly because
it accidentally serialization but it can

397
00:31:36,990 --> 00:31:42,590
be enabled by including an external
power surge on Form action back it's

398
00:31:42,590 --> 00:31:48,419
still accept JSON parse those bodies
automatically indict cast according to

399
00:31:48,420 --> 00:31:55,540
those formats so in the external case if
we pass it is with a type of integer and

400
00:31:55,540 --> 00:32:00,720
give it a wine you'll see you then the
params hash this is now the integer so

401
00:32:00,720 --> 00:32:08,130
that allow us to two passengers 2%
occurs similarly with JSON we could do

402
00:32:08,130 --> 00:32:09,140
something like this

403
00:32:09,140 --> 00:32:10,680
passes a JSON body

404
00:32:10,680 --> 00:32:16,940
setup password reset password or
confirmation the bold admit their recent

405
00:32:16,940 --> 00:32:24,970
past we're talking 0 so if you remember
to them icicle comparisons if the reset

406
00:32:24,970 --> 00:32:29,700
password talk in 20 it's going to match
a string and that begins with an integer

407
00:32:29,700 --> 00:32:39,940
so we're gonna end up with a query that
looks like this in real code we're doing

408
00:32:39,940 --> 00:32:45,060
a lookup of the user object based on
that token 0 which ultimately gives us a

409
00:32:45,060 --> 00:32:50,290
select we're talking two goals in order
0 and as a result that code that i

410
00:32:50,290 --> 00:32:54,510
showed earlier is going to reset the
password of the first user that has an

411
00:32:54,510 --> 00:32:58,650
outstanding talk a little bit simplified
because it's going to be the first

412
00:32:58,650 --> 00:33:04,270
outstanding talk into doesn't begin with
an integer but you know generally can

413
00:33:04,270 --> 00:33:11,750
think of it as as the first outstanding
token so I wrote about a model for this

414
00:33:11,750 --> 00:33:17,070
again this is back in in 2013 the way
this works is kind of interesting

415
00:33:17,070 --> 00:33:20,500
because you still can't targeted since
all your providing as the token you're

416
00:33:20,500 --> 00:33:26,340
not providing an account I D so I just
loop through outstanding tickets to

417
00:33:26,340 --> 00:33:30,340
monitor the response code and just keep
sending recent requests and resetting

418
00:33:30,340 --> 00:33:33,860
passwords until you get a value back the
size that there's no outstanding talking

419
00:33:33,860 --> 00:33:40,010
that matches once you do that you can
request a password change for a targeted

420
00:33:40,010 --> 00:33:40,620
user

421
00:33:40,620 --> 00:33:45,219
you know oftentimes you're gonna want to
be administrative user or something like

422
00:33:45,220 --> 00:33:50,580
that once you know that that user has an
outstanding Tolkien you can loop through

423
00:33:50,580 --> 00:33:55,389
try 0 first and you know that doesn't
work maybe they're talking begins with

424
00:33:55,390 --> 00:33:59,890
one that's when we're going to begin
with to you and so on and eventually

425
00:33:59,890 --> 00:34:04,770
you'll you'll hit that Tolkien and and
reset that password is it really

426
00:34:04,770 --> 00:34:09,580
affected the only downside is that
legitimate user will get an email you

427
00:34:09,580 --> 00:34:13,710
know when you issued a password reset
request that will contain it ok

428
00:34:13,710 --> 00:34:17,250
you know saying oh you tried to reset
your password

429
00:34:17,250 --> 00:34:24,409
but a lot of people are going to
suspicions that so this is patched and

430
00:34:24,409 --> 00:34:29,220
devise an undisclosed back 22 2013 so
there's this number

431
00:34:29,219 --> 00:34:34,949
the you know their specific versions
that are patched the patches kind of

432
00:34:34,949 --> 00:34:38,609
interesting to think back to that
pseudocode where they're reading the

433
00:34:38,609 --> 00:34:42,649
recent token from the params hash all
they really do is just typecast to a

434
00:34:42,649 --> 00:34:45,719
string so that way they know when
they're looking up in the database it's

435
00:34:45,719 --> 00:34:51,719
always a string and and it's going to
behave as expected the core

436
00:34:51,719 --> 00:34:56,129
vulnerability here though with my simple
type confusion exposed through Active

437
00:34:56,129 --> 00:35:01,640
Record thanks a lot more than justifies
so we found almost this exact same

438
00:35:01,640 --> 00:35:06,750
vulnerability in you know in first party
code where people have written their own

439
00:35:06,750 --> 00:35:12,430
authentication could also arise when you
have the title can logic really any kind

440
00:35:12,430 --> 00:35:18,790
of token authentication the history of
the fix on Rails is kind of interesting

441
00:35:18,790 --> 00:35:24,380
that rolled out a fix in three to 12
that would build the queries based on

442
00:35:24,380 --> 00:35:29,130
the type of the the database column that
was looking at off on so instead of

443
00:35:29,130 --> 00:35:33,520
allowing my signal to do typecasting
rails were record we try to do the

444
00:35:33,520 --> 00:35:39,250
typecasting appropriately with 16 32 12
kind of an incomplete fix there's still

445
00:35:39,250 --> 00:35:43,830
some ways to exploit that that that
Joran pointed out he just wrote a paper

446
00:35:43,830 --> 00:35:48,819
for frac the talked about all kinds of
rails

447
00:35:48,820 --> 00:35:54,880
abilities and this is one of them where
you can pass raised and still get you'll

448
00:35:54,880 --> 00:36:00,859
still get you know editors through the
the pics entry to 12 was actually

449
00:36:00,859 --> 00:36:06,460
reverted in 32 13 because it broke some
other functionality so 32 ActiveRecord

450
00:36:06,460 --> 00:36:11,440
will still allow you to both Koreas like
tired it's fixed in divides but you know

451
00:36:11,440 --> 00:36:17,349
other applications can can still perform
that on the floor and higher branch it's

452
00:36:17,349 --> 00:36:21,960
not until 42 that they started
typecasting queries by default you note

453
00:36:21,960 --> 00:36:24,590
I do this

454
00:36:24,590 --> 00:36:28,900
even when that's the case you still have
things like this where rather than using

455
00:36:28,900 --> 00:36:33,370
ActiveRecord find by user might use a
WHERE clause and even though it's

456
00:36:33,370 --> 00:36:37,339
parameterize does not get the ball
rolling sequin Jackson in this case I

457
00:36:37,340 --> 00:36:42,220
can still set to you the type of that of
that Tolkien I can still exploit this

458
00:36:42,220 --> 00:36:46,870
year that you've another even a fixed
version of rails against you know you

459
00:36:46,870 --> 00:36:52,259
can pass tokens as you know as a raise
and still getting typecast so it's still

460
00:36:52,260 --> 00:36:58,080
kinda has some life even though it's
even though it's an old vulnerability so

461
00:36:58,080 --> 00:37:05,790
what that tell mexicana talk about
authorization of it alright another

462
00:37:05,790 --> 00:37:12,050
we've kind of authenticated the user
let's see what what can they do so when

463
00:37:12,050 --> 00:37:16,340
we're looking at authorization this test
to be tied to the concept of roles and I

464
00:37:16,340 --> 00:37:20,770
like to kind of split into two groups to
have this notion of vertical

465
00:37:20,770 --> 00:37:25,520
authorization so here we have kind of a
list of example rose roles you might

466
00:37:25,520 --> 00:37:29,220
have a site admin at the very top has
full access to everything

467
00:37:29,220 --> 00:37:33,709
an organization ad man that might just
have access full access to the subset of

468
00:37:33,710 --> 00:37:37,930
data that belong to that organization
you know a regular user that might have

469
00:37:37,930 --> 00:37:42,160
limited read access local right access
to the right there user profile and an

470
00:37:42,160 --> 00:37:47,180
unauthenticated then you have this
notion of horizontal authorization so

471
00:37:47,180 --> 00:37:53,279
this is users from organization and one
should never be able to get data from

472
00:37:53,280 --> 00:37:58,740
organizations you for example or within
an organization one within an

473
00:37:58,740 --> 00:37:59,879
organization

474
00:37:59,880 --> 00:38:03,830
1 users shouldn't have access to another
user's data so does this look like

475
00:38:03,830 --> 00:38:08,470
within rails and very co-author is Asian
tends to be implemented through the use

476
00:38:08,470 --> 00:38:12,859
of what are called before actions so
this is just a notion that you know here

477
00:38:12,860 --> 00:38:16,730
we have an example controller called the
post controller the before action just

478
00:38:16,730 --> 00:38:21,660
says you know for looking at the first
line here for require admin says run the

479
00:38:21,660 --> 00:38:27,060
method require admin only on the create
organization action or looking at the

480
00:38:27,060 --> 00:38:31,640
last one it says require an organization
user for every single action except

481
00:38:31,640 --> 00:38:36,200
public pose for a horizontal
authorization

482
00:38:36,200 --> 00:38:41,700
tends to get implemented to the use of
associations so three models you can

483
00:38:41,700 --> 00:38:45,598
connect so you can connect models and
create these associations between models

484
00:38:45,599 --> 00:38:50,560
so here we have a current user called .
organization to get the organization

485
00:38:50,560 --> 00:38:55,328
that they belong to and then called
outpost son that so when this gets

486
00:38:55,329 --> 00:38:59,619
converted to the database query in the
back and you're only clearing the subset

487
00:38:59,619 --> 00:39:06,000
of posts up along to that user ID so
jumping into controller routing we

488
00:39:06,000 --> 00:39:10,190
previously talked about the routes file
so this is going to be an example right

489
00:39:10,190 --> 00:39:14,390
that you'll see in routes that are being
pretty straightforward you're giving

490
00:39:14,390 --> 00:39:20,270
them the HTTP method in the past that a
user would actually navigate to and then

491
00:39:20,270 --> 00:39:26,910
what controller and action points do so
here we have an example post controller

492
00:39:26,910 --> 00:39:31,910
with an index action and then the post
model were calling . all gathering all

493
00:39:31,910 --> 00:39:36,089
the post putting an end to this post
variable which is going to get used by

494
00:39:36,089 --> 00:39:39,420
reviewed actually presented

495
00:39:39,420 --> 00:39:43,480
have not even looked at the controller
looks aight let's talk about the

496
00:39:43,480 --> 00:39:47,410
controller hierarchy here for a second
so for looking at this is the

497
00:39:47,410 --> 00:39:51,129
application controller so when you
actually generate a new application

498
00:39:51,130 --> 00:39:55,420
either one of the controllers I could
generated by default and this is going

499
00:39:55,420 --> 00:40:00,079
to be the application control against
inherited by all other controllers by

500
00:40:00,079 --> 00:40:04,369
default right so if you run rails
generate controller you give it some

501
00:40:04,369 --> 00:40:08,050
parameters it's going to inherit from
application controller and this get some

502
00:40:08,050 --> 00:40:12,940
nice things by the fall which is a
protection for jury hear that ultimately

503
00:40:12,940 --> 00:40:15,200
what that's going to do is run the

504
00:40:15,200 --> 00:40:20,939
verify authenticity token before every
single action so you can see serve beer

505
00:40:20,940 --> 00:40:25,890
here we just have an example before
action says authorized user and so this

506
00:40:25,890 --> 00:40:29,900
is going to get right on every single
action inside of your application by the

507
00:40:29,900 --> 00:40:35,190
fall so if we're looking at the post
controller inheriting from application

508
00:40:35,190 --> 00:40:40,050
controller and that itself and Harrison
application based in a kind of goes up

509
00:40:40,050 --> 00:40:43,630
the chain but I think the important
thing to remember here is the further up

510
00:40:43,630 --> 00:40:47,500
you go it starts stripping this
functionality right so if you have some

511
00:40:47,500 --> 00:40:51,349
lightweight controllers may be in here
from application control base you might

512
00:40:51,349 --> 00:40:56,589
lose some stuff then we'll talk about
that later so without authorization

513
00:40:56,589 --> 00:41:01,049
being implemented to the use of these
before actions were gonna dive into that

514
00:41:01,050 --> 00:41:04,530
a little bit because ultimately three
types of callbacks you have before

515
00:41:04,530 --> 00:41:09,810
around and after but because you want to
authorize the user before you do any

516
00:41:09,810 --> 00:41:14,339
actions most of the authorization act
I'd say all of it really is going to be

517
00:41:14,339 --> 00:41:16,290
implemented through the use of these
before

518
00:41:16,290 --> 00:41:20,810
filters so you're gonna see this in a
few different flavors these are some of

519
00:41:20,810 --> 00:41:25,410
the most common and as we go down this
list that last comment you can get flags

520
00:41:25,410 --> 00:41:34,950
to say only specific actions except
where you can say if a last second

521
00:41:34,950 --> 00:41:40,200
actually give it a method to call it
that returns TRUE FALSE then before

522
00:41:40,200 --> 00:41:45,899
actually get run you can say skip it for
action so and the application controller

523
00:41:45,900 --> 00:41:47,390
we had that authorized user

524
00:41:47,390 --> 00:41:52,460
that's gonna get run by defaulting every
action you would use this to say you

525
00:41:52,460 --> 00:41:56,670
know if you have a public controller for
example say skip the authorized user

526
00:41:56,670 --> 00:42:01,250
action also get products which are just
like blocks of code that can get run

527
00:42:01,250 --> 00:42:07,150
this is your not gonna see this very
often so like devised there are few

528
00:42:07,150 --> 00:42:12,760
authorization that are available for
rails and pundit and can can can

529
00:42:12,760 --> 00:42:20,619
formally can can are the two probably
authorization John's so funny when you

530
00:42:20,619 --> 00:42:26,190
kind of look at it both content and can
can can

531
00:42:26,190 --> 00:42:30,220
try to centralize all the authorization
roles in a single place over can can

532
00:42:30,220 --> 00:42:35,240
that's in the abilities file for pundits
their policy files but ultimately you're

533
00:42:35,240 --> 00:42:38,390
still going to kind of get the same
thing with senior controller actions

534
00:42:38,390 --> 00:42:43,100
here you'll see that were called by the
authorized user error and so that'll

535
00:42:43,100 --> 00:42:48,190
take the current user thats logged and
make sure that they're authorized that's

536
00:42:48,190 --> 00:42:55,600
not it also an exception and the control
action among complete so there's an

537
00:42:55,600 --> 00:42:58,500
interesting things here we're in the
pundit documentation and says

538
00:42:58,500 --> 00:43:04,130
after-action verify authorised and this
is kind of the reason we talked a little

539
00:43:04,130 --> 00:43:08,760
bit before but you don't want to put any
authorization code and after actions

540
00:43:08,760 --> 00:43:12,820
because this is going to get run after
the controller action occurs if you have

541
00:43:12,820 --> 00:43:17,180
any state changing creates or destroys
that's gonna get run that's going to

542
00:43:17,180 --> 00:43:20,279
change the database and then an
exception is gonna get thrown which is

543
00:43:20,280 --> 00:43:26,060
kind of useless in a sense of actual
authorization funded this is meant to

544
00:43:26,060 --> 00:43:29,170
just be used for the developer to say
like hey this is gonna throw an

545
00:43:29,170 --> 00:43:33,600
exception you should look at this and
call authorized account can count is

546
00:43:33,600 --> 00:43:38,750
very similar based off of the abilities
file you can call authorize it does the

547
00:43:38,750 --> 00:43:43,090
same thing where it looks for a current
user objects take site user and see if

548
00:43:43,090 --> 00:43:55,610
they can read a post for example so lets
things to be on the lookout for so the

549
00:43:55,610 --> 00:44:00,130
first one is going to be calling fine by
methods directly in the model so here we

550
00:44:00,130 --> 00:44:05,570
have an example for saying let's take
posts by author and pass an email so

551
00:44:05,570 --> 00:44:10,850
this is going to actually carry the
entire subset of post application or

552
00:44:10,850 --> 00:44:17,310
portfolios are comes and so with that
you tend to just provide any arbitrary

553
00:44:17,310 --> 00:44:21,400
idea email and get some good data that
they potentially aren't supposed to

554
00:44:21,400 --> 00:44:26,960
access so we like saying associations I
would touch on before this is gonna

555
00:44:26,960 --> 00:44:34,280
clear only the subset of data that
belongs to do so

556
00:44:34,280 --> 00:44:36,640
whitelisting when

557
00:44:36,640 --> 00:44:44,328
when using before actions so this is so
in the only in disarray you're saying

558
00:44:44,329 --> 00:44:47,859
for the update destroying creative
methods all the authorized user method

559
00:44:47,859 --> 00:44:51,839
but then you have a developer that might
come and add a new action to the post

560
00:44:51,839 --> 00:44:56,779
controller and they forget to add their
action to this array so that's going to

561
00:44:56,779 --> 00:45:03,490
create an authorization flaw we prefer
to use these kind of accept this is

562
00:45:03,490 --> 00:45:07,578
gonna save by default running on every
single action in the post controller

563
00:45:07,579 --> 00:45:12,319
accepted this method and so we go back
to that scenario a developer adds a new

564
00:45:12,319 --> 00:45:16,308
controller action it's gonna throwing
error by Sports is going to force them

565
00:45:16,309 --> 00:45:20,289
to look into this before action and see
whether or not they actually need to run

566
00:45:20,289 --> 00:45:26,279
it so lightweight controllers here we
have two examples we've seen before

567
00:45:26,279 --> 00:45:30,279
action controller base an extra
controller metal on metal we have

568
00:45:30,279 --> 00:45:33,839
actually seen before but action
controller basis pretty pretty comment

569
00:45:33,839 --> 00:45:37,660
and so what's going to happen there is
if you have a controller that skips the

570
00:45:37,660 --> 00:45:42,220
application controller and just
inherited directly from action

571
00:45:42,220 --> 00:45:45,629
controller based which doesn't have sea
surge protection or doesn't have all of

572
00:45:45,630 --> 00:45:50,799
the authorization filters that you want
to run by default then you're gonna have

573
00:45:50,799 --> 00:45:54,170
not only sees potential as an
authorization and authentication

574
00:45:54,170 --> 00:45:59,579
bypasses here so if you see you and
inheriting standard from application

575
00:45:59,579 --> 00:46:04,390
controllers you should be in a
relatively good position authorization

576
00:46:04,390 --> 00:46:10,210
logic and views so and if used correctly
checking whether or not you know

577
00:46:10,210 --> 00:46:15,019
someone's an admin and are going to hide
and show functionality but the back and

578
00:46:15,019 --> 00:46:18,689
you know there's nothing stopping an
attacker from just making that request

579
00:46:18,690 --> 00:46:22,950
directly to the server and the control
signal processor just fine so he's just

580
00:46:22,950 --> 00:46:26,439
want to ensure that the applications
also verifying the promotions and rolls

581
00:46:26,440 --> 00:46:32,660
and control actions that corresponds to
the links are the buns in these views

582
00:46:32,660 --> 00:46:38,470
skipping of filters this is something
that I it's one of the first things I

583
00:46:38,470 --> 00:46:44,450
look for you know pretty much grabbing
first it before actions before filter

584
00:46:44,450 --> 00:46:46,910
and assessing why are they doing

585
00:46:46,910 --> 00:46:51,270
like today actually mean to do it was
like kind of lazy coding I think of an

586
00:46:51,270 --> 00:46:56,809
example of a developer wants to test
their application using curl right and

587
00:46:56,809 --> 00:47:00,059
so they're gonna have to skip before
action verify authenticity to the CSIR

588
00:47:00,059 --> 00:47:04,950
tokens being annoying they forget to
take it out and then I have an entire

589
00:47:04,950 --> 00:47:12,390
controllers available to serve real
scaffolding will actually the real

590
00:47:12,390 --> 00:47:17,799
scaffolding lets you generate you know
models use controllers really quickly so

591
00:47:17,799 --> 00:47:22,670
here are saying rails generate scaffold
a bank account model and then we passed

592
00:47:22,670 --> 00:47:28,480
some parameters to say you know what are
going to be the columns and the model to

593
00:47:28,480 --> 00:47:34,109
hear you got nice things slide the
controllers the views and then the

594
00:47:34,109 --> 00:47:37,420
models and that all gets generated you
migrate it and you have a form that you

595
00:47:37,420 --> 00:47:38,670
can use really quickly

596
00:47:38,670 --> 00:47:45,799
the problem comes in with these JBuilder
files so one of the things that generate

597
00:47:45,799 --> 00:47:52,980
this JBuilder file which if you request
. JSON extension it'll return this kind

598
00:47:52,980 --> 00:47:57,220
of view but what will happen is that
every single parameters that you pass

599
00:47:57,220 --> 00:48:01,740
into the scaffold command will get added
to this and these are files that

600
00:48:01,740 --> 00:48:06,439
developer sometimes don't really look
into or don't really use and so if you

601
00:48:06,440 --> 00:48:10,839
have any sensitive attributes on your
model this is gonna get added and those

602
00:48:10,839 --> 00:48:16,900
are going to be available at something
to look into it also will add all those

603
00:48:16,900 --> 00:48:24,619
parameters to the permit message for
mass assignment so automatically all of

604
00:48:24,619 --> 00:48:30,329
your attributes on the model that you
specified are going to be assignable so

605
00:48:30,329 --> 00:48:37,400
looking at boiler man before boiler man
you have to audit every single

606
00:48:37,400 --> 00:48:40,720
controller manually not only every
controller but you have to track the

607
00:48:40,720 --> 00:48:44,348
inheritance you know there's a base
controller there's an API controller to

608
00:48:44,349 --> 00:48:50,359
go into that and I kind of think about
where is this potential gonna go so well

609
00:48:50,359 --> 00:48:52,058
armed and tries to help with that

610
00:48:52,059 --> 00:48:55,620
by dynamically resolving call backs to
the inheritance chain

611
00:48:55,620 --> 00:49:00,000
and ultimately what it's doing is giving
you a nice list of all the controllers

612
00:49:00,000 --> 00:49:04,230
and actions in the Rails application and
giving you a list of all the filters

613
00:49:04,230 --> 00:49:10,390
that are being around so I how it works

614
00:49:10,390 --> 00:49:14,890
dynamic analysis tools so it has to plug
into an existing rails application and

615
00:49:14,890 --> 00:49:21,680
it runs as an engine so at the very
least you need rails console access

616
00:49:21,680 --> 00:49:27,250
sometimes this is impossible with a
suspends its gonna kick off our

617
00:49:27,250 --> 00:49:30,790
something I would highly recommend
getting rails console access because

618
00:49:30,790 --> 00:49:34,830
even outside of this tool is extremely
powerful a pretty much gives you a

619
00:49:34,830 --> 00:49:38,950
scripting interface for the entire
application and I that's kind of the

620
00:49:38,950 --> 00:49:59,919
concept that I used to make this tool to
go into a demo here really quick

621
00:49:59,920 --> 00:50:04,630
so here I am using Rails code which is
an intentional vulnerable rails out by a

622
00:50:04,630 --> 00:50:12,410
complete full application and so here
I've got a man already installed so once

623
00:50:12,410 --> 00:50:15,290
you actually have the gem install and
run the generator you can just go to

624
00:50:15,290 --> 00:50:21,140
further forward slash boiler man and
he's going to be the view that you're

625
00:50:21,140 --> 00:50:24,660
gonna see so you're gonna have a filter
list at the top and then here's the

626
00:50:24,660 --> 00:50:28,250
thing that's going to be the main kind
of meat of the tool here this is all of

627
00:50:28,250 --> 00:50:32,200
the controllers and application of the
column for every single action and every

628
00:50:32,200 --> 00:50:37,549
filter that's being run so I don't know
anybody who has experienced assessing

629
00:50:37,550 --> 00:50:41,190
rails out but if we're looking at the
filters on some of these controllers

630
00:50:41,190 --> 00:50:45,980
there should be something that you might
be noticing not being run on every

631
00:50:45,980 --> 00:50:50,530
single action that should be and that's
going to be a parent here that's going

632
00:50:50,530 --> 00:50:54,960
to be the verify authenticity token so
we kind of look into the application

633
00:50:54,960 --> 00:51:02,370
control of the application at the top
here what you would expect this comment

634
00:51:02,370 --> 00:51:09,299
about the protection for jury with some
note about see surfing but here in terms

635
00:51:09,300 --> 00:51:13,490
of office so if we start looking at some
of these filters start noticing the use

636
00:51:13,490 --> 00:51:18,569
of this authenticated filter so I might
add this to the list to say show me all

637
00:51:18,570 --> 00:51:27,880
of the controllers that don't aren't
running authenticated for example

638
00:51:27,880 --> 00:51:36,910
create actions for users so these are
going to require authentication cuz you

639
00:51:36,910 --> 00:51:41,330
wanna either create a new session or
create a new user but if we start

640
00:51:41,330 --> 00:51:48,590
looking down here they start saying that
the API do not call authenticated and we

641
00:51:48,590 --> 00:51:51,850
go through this list here we do see that
they are calling about API token so

642
00:51:51,850 --> 00:51:55,750
there's a different authentication
scheme being run here so I'm looking at

643
00:51:55,750 --> 00:52:03,430
the API's I might say show me all of the
API controllers now show me all the ones

644
00:52:03,430 --> 00:52:08,589
that don't run dpi to see here we start
to see that the mobile controller

645
00:52:08,590 --> 00:52:13,080
actually is not running this method so
if we look at some of the routes that

646
00:52:13,080 --> 00:52:13,240
are

647
00:52:13,240 --> 00:52:18,549
available for the mobile controller
which are right here and we look into

648
00:52:18,550 --> 00:52:22,980
that the actual mobile controller code
we see that ok we have before filter

649
00:52:22,980 --> 00:52:26,990
here we're skipping authenticated cuz
it's an API but we're not seeing any

650
00:52:26,990 --> 00:52:31,759
call to validate API token so we should
be able to access all these actions

651
00:52:31,760 --> 00:52:53,809
without authentication so if we go to
the index action for example

652
00:52:53,809 --> 00:52:58,309
reading an object or we would normally
expect an HTTP authorization if we look

653
00:52:58,309 --> 00:53:03,150
into the index action we're saying it
takes a parameter of class turns it into

654
00:53:03,150 --> 00:53:08,809
a class constant eyes and I'm calls .
call and renders it as to JSON so we

655
00:53:08,809 --> 00:53:28,809
should be able to just say hi sequels
user an authenticated session and well I

656
00:53:28,809 --> 00:53:43,430
think I may not have run ins

657
00:53:43,430 --> 00:53:53,779
the database with all tokens so yeah
when it comes down to it if you have a

658
00:53:53,780 --> 00:53:57,089
suspect as application before I'm kind
of see that list of all the controller

659
00:53:57,089 --> 00:54:00,970
and action breakdowns it's a really nice
to have it makes assessing authorization

660
00:54:00,970 --> 00:54:09,509
rules just so much quicker yeah that's
that's pretty much all of it just run

661
00:54:09,510 --> 00:54:12,240
gem install boiler man put into the
Gemfile

662
00:54:12,240 --> 00:54:17,140
the takeaways rails console super
powerful always ask for it if you can

663
00:54:17,140 --> 00:54:21,799
during Roza suspends you try to use for
the app adding some d3 visualisations

664
00:54:21,800 --> 00:54:27,300
source clearing so when we looked at
London can can just being able to say

665
00:54:27,300 --> 00:54:32,410
give me all of the controller actions
that don't call authorized so it should

666
00:54:32,410 --> 00:54:57,348
be a pretty soon hopefully we have time
ok ok questions questions

667
00:54:57,349 --> 00:55:03,279
yeah so it's 44 break man for example
that's a static analysis tool that

668
00:55:03,279 --> 00:55:08,019
actually runs over the code and the
static analysis over it will remain in

669
00:55:08,019 --> 00:55:12,749
the background is actually clearing the
application as it's running so it's

670
00:55:12,749 --> 00:55:16,919
actually running as if you're running
rails console and dynamically as the

671
00:55:16,920 --> 00:55:21,509
apps running checking water filters are
being run on the controller actions so

672
00:55:21,509 --> 00:55:34,000
in that sense it's dynamic

673
00:55:34,000 --> 00:55:46,150
sure

674
00:55:46,150 --> 00:55:51,510
security standpoint like there's there's
obviously performance benefits and you

675
00:55:51,510 --> 00:55:53,039
don't keep state of the server

676
00:55:53,039 --> 00:55:57,490
you know it scales motocross larger
clusters things like that

677
00:55:57,490 --> 00:56:07,939
security standpoint yeah it definitely
favor having such as persistent servers

678
00:56:07,940 --> 00:56:29,030
well that's good point I was cleared up
there's two options depending on which

679
00:56:29,030 --> 00:56:33,400
version of rails and how you define your
key whether it's that that secret base

680
00:56:33,400 --> 00:56:38,910
or or what's the other I don't remember
the exact name but yes so on the one

681
00:56:38,910 --> 00:56:44,560
option you get just you know plain talk
serialize base 64 encoded sign so you

682
00:56:44,560 --> 00:56:48,430
still can tamper with it which can can
view it where is you know it in more

683
00:56:48,430 --> 00:56:53,470
recent health is encrypted and you know
I'm not aware of any other buildings in

684
00:56:53,470 --> 00:56:59,430
the encryption but you know it's still
kind of you I think it's still best

685
00:56:59,430 --> 00:57:03,460
practice not to put sensitive
information in that session also from

686
00:57:03,460 --> 00:57:07,070
things like you know that the ability to
replace session tokens and things like

687
00:57:07,070 --> 00:57:10,590
that it's going to make it less likely
that those issues are going to arise it

688
00:57:10,590 --> 00:57:16,280
kind of middle lies what you're storing
your session state you know so far Lake

689
00:57:16,280 --> 00:57:21,460
Dr the user identity you maybe wanna
have their I D and then you can look up

690
00:57:21,460 --> 00:57:23,220
there I D later on

691
00:57:23,220 --> 00:57:29,890
versus you know having a whole actual
object that you know so it's not as big

692
00:57:29,890 --> 00:57:35,190
a concern unencrypted cookies because
it's not as likely to be exposed but it

693
00:57:35,190 --> 00:57:39,720
just kind of it enforces good practices
for for other reasons to you know to

694
00:57:39,720 --> 00:57:53,359
keep your sessions pretty thin

695
00:57:53,359 --> 00:58:03,308
that's one of the takeaway you know
there's a lot of little subtleties that

696
00:58:03,309 --> 00:58:08,920
can be hard to get right so you know if
you're using more popular code you know

697
00:58:08,920 --> 00:58:14,359
you're probably gonna be better off than
most cases re-write things you know a

698
00:58:14,359 --> 00:58:18,619
lot of time and thought into it with
that we're out of time if anybody has

699
00:58:18,619 --> 00:58:22,420
any other questions you know will be
around and be happy to chat so thanks a

700
00:58:22,420 --> 00:58:25,630
lot everyone for common especially so
early morning preciate it

