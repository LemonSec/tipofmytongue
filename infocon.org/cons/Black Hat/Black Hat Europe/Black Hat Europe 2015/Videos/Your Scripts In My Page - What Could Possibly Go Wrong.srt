1
00:00:00,000 --> 00:00:05,240
thanks so much for a stick around as
long and coming to our talk money to

2
00:00:05,240 --> 00:00:10,070
spend on a recent graduate of the
University yelling no posts tagged in

3
00:00:10,070 --> 00:00:15,599
Indiana University in the great pleasure
to give the talk today with my

4
00:00:15,599 --> 00:00:21,640
colleagues at the University at Buffalo
and that their personality was actually

5
00:00:21,640 --> 00:00:26,199
wanting was not able to make it to you
but he was still part of this this

6
00:00:26,199 --> 00:00:30,619
project so what's the project that we
will talk to you about or give you a

7
00:00:30,619 --> 00:00:34,550
brief agenda of what's to come to first
we gotta talk about the same origin

8
00:00:34,550 --> 00:00:40,129
policy which most of the people might
probably know but still it's important

9
00:00:40,129 --> 00:00:44,269
technical background that we will talk
about the concept of what we call a

10
00:00:44,270 --> 00:00:49,510
cross-site scripting solutions and then
we would erase this generalized this

11
00:00:49,510 --> 00:00:53,960
kind of attack and under must and will
talk about the period of study we

12
00:00:53,960 --> 00:00:58,730
conducted on the web and then talk with
the conclusion that sold the same origin

13
00:00:58,730 --> 00:01:02,930
policy is the most basic security policy
on the on the web

14
00:01:02,930 --> 00:01:06,990
let's assume for the sake of the
argument that we have an attack that has

15
00:01:06,990 --> 00:01:12,830
successfully lured victims resided in on
this page where you can obviously

16
00:01:12,830 --> 00:01:18,539
because it's under control you can also
retrieve HTML but also he can host some

17
00:01:18,540 --> 00:01:25,070
javascript in August tries to gain
access to a remote domain in this case

18
00:01:25,070 --> 00:01:29,880
gmail.com and one very important thing
to note in this cases that since its

19
00:01:29,880 --> 00:01:34,030
founding in your browser if you have
cookies that are valid for gmail.com in

20
00:01:34,030 --> 00:01:38,810
your browser will attach these cookies
to the outgoing request to gmail.com the

21
00:01:38,810 --> 00:01:44,110
reply will come in and this would
obviously be really big security problem

22
00:01:44,110 --> 00:01:47,280
right because in this case as an
attacker could simply read all your

23
00:01:47,280 --> 00:01:51,399
emails from gmail that is exactly where
the same origin policy kicks in and

24
00:01:51,399 --> 00:01:54,610
stops into action because the states
that only resources which sharing

25
00:01:54,610 --> 00:02:01,840
analogy is hereby defined protocol the
hostname or IP address and the port may

26
00:02:01,840 --> 00:02:05,880
interact with one another and this this
is not the case then the same origin

27
00:02:05,880 --> 00:02:09,579
policy actually drops this connection or
just as excess

28
00:02:09,580 --> 00:02:16,500
gmail emails safe however it's slightly
different from JavaScript so if you

29
00:02:16,500 --> 00:02:23,580
think about you often think about jQuery
jQuery but a lot of the multiple

30
00:02:23,580 --> 00:02:28,990
vehicles to themselves but rather have
for example hosted so there needs to be

31
00:02:28,990 --> 00:02:33,180
a way for your browser to include script
content from a different domain

32
00:02:33,180 --> 00:02:37,790
it's also often the case with
advertising because of advertising that

33
00:02:37,790 --> 00:02:40,350
running on your side you don't want to
force the JavaScript itself but rather

34
00:02:40,350 --> 00:02:45,359
have the and therefore the same origin
policy somewhat reelect for scripting

35
00:02:45,360 --> 00:02:48,980
commands so it's perfectly okay to use
scripts for us

36
00:02:48,980 --> 00:02:52,690
remote domain and your browser will
actually fetch till steps and then

37
00:02:52,690 --> 00:02:57,470
execute them in your page and one very
important factor in these cases that

38
00:02:57,470 --> 00:03:03,010
included cold inherits the origin of the
including side that means I have to take

39
00:03:03,010 --> 00:03:08,739
a lot of work and I route something from
si.com then the cold running in a

40
00:03:08,739 --> 00:03:15,489
technical or both run on the same cold
it's cold and why this has security

41
00:03:15,489 --> 00:03:19,790
implications if the availabilities in
the third party code as we will see in

42
00:03:19,790 --> 00:03:24,000
the stalker had also some security
implications the other way around

43
00:03:24,000 --> 00:03:30,790
so let's go back and will be to 2006
gmail was hosting a file

44
00:03:30,790 --> 00:03:36,310
context of Jason would actually have the
context context story of the user who is

45
00:03:36,310 --> 00:03:41,790
currently locked in this case I we see
this John Doe and Jane Austen's contact

46
00:03:41,790 --> 00:03:46,840
and what it could do is he could have
his own website and then to the

47
00:03:46,840 --> 00:03:51,689
following so you would do a script
source of gmail.com / contact Jason but

48
00:03:51,689 --> 00:03:55,459
this doesn't look like the JavaScript
code words

49
00:03:55,459 --> 00:04:03,720
executing anything however there was
back then which would actually allow you

50
00:04:03,720 --> 00:04:09,090
to override the era con structure that
means in this case the fire would be

51
00:04:09,090 --> 00:04:13,519
included and then the jaws capacity
would say this is a new era when I have

52
00:04:13,519 --> 00:04:19,478
to invoke the instructor and their guy
in here you could easily steal this this

53
00:04:19,478 --> 00:04:27,190
secret a time there were a number of
attacks for example with us we're

54
00:04:27,190 --> 00:04:31,340
basically the JavaScript engine would
interpret things as it should interpret

55
00:04:31,340 --> 00:04:38,349
because it looked like JavaScript or
even in one case you wouldn't executed

56
00:04:38,349 --> 00:04:42,030
but it would give you an error message
that would say some variable not defined

57
00:04:42,030 --> 00:04:49,340
whatever you could lead the content of
these of these felt however inclusion is

58
00:04:49,340 --> 00:04:56,320
basically an attack that is a little bit
more widely defined the previous attacks

59
00:04:56,320 --> 00:05:00,979
as I said before with this reconstruct
other issues related to the

60
00:05:00,979 --> 00:05:06,760
implementation of the browser via text
so doing that now will not work anymore

61
00:05:06,760 --> 00:05:13,310
however but we would have to kind of see
is are there are other ways to leak like

62
00:05:13,310 --> 00:05:17,789
private and one thing that all these
attacks have in common is that they are

63
00:05:17,789 --> 00:05:23,130
you a script source and then included
some content that looked like a script

64
00:05:23,130 --> 00:05:27,800
but no one's afraid she looked at what
happens if I try to look at just hope

65
00:05:27,800 --> 00:05:31,260
that is actually be a regular pages to
stick to that is

66
00:05:31,260 --> 00:05:36,289
maybe some dynamic nature to those found
so I only static or is there some

67
00:05:36,290 --> 00:05:44,010
dynamic duration and if that is the case
it is actually some dynamic component in

68
00:05:44,010 --> 00:05:48,980
there is there any sensitive userdata
increase this script that might be

69
00:05:48,980 --> 00:05:52,880
dynamically generated on the southern
side and then last but not least whether

70
00:05:52,880 --> 00:05:59,880
it's actually possible for her to get
this kind of information over the way to

71
00:05:59,880 --> 00:06:05,500
my colleagues of us a little bit about
the methodology and the abilities

72
00:06:05,500 --> 00:06:12,920
thinking then yes we are looking for
JavaScript process and we are

73
00:06:12,920 --> 00:06:16,970
specifically interested in JavaScript
routes that are generated by the sober

74
00:06:16,970 --> 00:06:23,950
and we also addressed in the userdata
userdata is usually somehow connected to

75
00:06:23,950 --> 00:06:27,830
a user session so basically we're
looking for JavaScript files that are

76
00:06:27,830 --> 00:06:33,440
generated based on the user's
authenticated session and it just me and

77
00:06:33,440 --> 00:06:37,790
for this purpose we build a system that
were detected script and just report

78
00:06:37,790 --> 00:06:43,160
them to us and with this system we don't
conducted an empirical study to see

79
00:06:43,160 --> 00:06:47,130
whether we find scented if you had a $10
goodbyes and whether we can leave them

80
00:06:47,130 --> 00:06:53,280
across the main boundary similar to the
attack that just showed so let's have a

81
00:06:53,280 --> 00:06:58,559
look at the detection system for so this
will be billed as about extension so

82
00:06:58,560 --> 00:07:03,260
here we with with a normal browser we
just visited website which we are called

83
00:07:03,260 --> 00:07:07,800
the outcome and this will not come might
have the legitimate script that this

84
00:07:07,800 --> 00:07:13,300
site uses to to provide some
functionality and what we would like to

85
00:07:13,300 --> 00:07:18,840
find out is if this group is dynamically
generated and has used it in sight so we

86
00:07:18,840 --> 00:07:22,690
built about extension that runs in the
browser and while he battles will not

87
00:07:22,690 --> 00:07:28,280
calm it would fetch all the scripts from
the page and it would try to find out

88
00:07:28,280 --> 00:07:32,049
whether there is some state dependent
generation going on so what the

89
00:07:32,050 --> 00:07:37,970
attention didn't it requested the script
twice in one stated with cookies so with

90
00:07:37,970 --> 00:07:43,370
the India authentication context of the
user and runs without cookies so we got

91
00:07:43,370 --> 00:07:47,789
to two different so sorry Mr Jobs
prosthetic we get basically the same

92
00:07:47,789 --> 00:07:51,789
trial back into somehow dynamically
generated based on the user's

93
00:07:51,789 --> 00:07:56,909
authentication state we should see some
some difference in the script and that's

94
00:07:56,909 --> 00:08:01,229
exactly what we tried to find out by
dishing the two different responses so

95
00:08:01,229 --> 00:08:06,250
whenever we see a diff that there is
like a change we we know this javascript

96
00:08:06,250 --> 00:08:14,069
might somehow depend on the user's state
so what did then is we went to the Alexa

97
00:08:14,069 --> 00:08:20,610
top 500 websites and we registered
accounts for the first 150 sides that

98
00:08:20,610 --> 00:08:26,719
allowed us to register counts so they
had to have a registration form it

99
00:08:26,719 --> 00:08:31,500
should have it it had to be possible to
register free of charge without paying

100
00:08:31,500 --> 00:08:36,479
money and also the registration had to
be possible for us so some sites

101
00:08:36,479 --> 00:08:39,899
required social security numbers of
countries that we weren't able to get

102
00:08:39,899 --> 00:08:46,709
and so we just reached registered to
those sides that it has that and then we

103
00:08:46,709 --> 00:08:50,410
went to those sites and manually see
that the sides with you the data so we

104
00:08:50,410 --> 00:08:54,219
were interested in whether scripts might
contain userdata so we need to put the

105
00:08:54,220 --> 00:08:58,680
user dating to the application process
so we went to all the sides and for

106
00:08:58,680 --> 00:09:03,250
example in a in a shopping application
we put things into a shopping cart we

107
00:09:03,250 --> 00:09:09,000
created wish lists in a social media
source social networking site we created

108
00:09:09,000 --> 00:09:14,360
an account and sent messages or interest
or two away

109
00:09:14,360 --> 00:09:20,670
or something so so that we get some
private data into it and afterwards we

110
00:09:20,670 --> 00:09:24,740
use our extension to browse the site
again and he was a different kind of

111
00:09:24,740 --> 00:09:29,370
functionalities and to all the pages and
like interact with the site and Encanto

112
00:09:29,370 --> 00:09:34,300
all the different scripts to decide
where he was and always tension reported

113
00:09:34,300 --> 00:09:39,859
all the scripts that were dynamically
generated and these are the results that

114
00:09:39,860 --> 00:09:45,970
we found so we investigated 150 pages
and we found that 49 of the pages had

115
00:09:45,970 --> 00:09:51,140
some kind of dynamic generation of
scripts so dependent on the user session

116
00:09:51,140 --> 00:09:56,250
state and we manually look at these
forty nine trials and we found out that

117
00:09:56,250 --> 00:10:02,760
34 of those types contained unique
identifiers of the users so there was an

118
00:10:02,760 --> 00:10:07,200
email address or an account I D Onofrio
name and birthdate something that

119
00:10:07,200 --> 00:10:14,070
uniquely identifies you as a user with
entrant at 15:50 script pages have

120
00:10:14,070 --> 00:10:19,100
scripts that contained other personal
information like your street address I

121
00:10:19,100 --> 00:10:23,390
don't know you're maybe your shopping
shopping cart entry your email address

122
00:10:23,390 --> 00:10:29,850
email us your banking information and we
even from seven pages that had seized of

123
00:10:29,850 --> 00:10:35,630
token authentication tokens in scripts
and so it seems to be a lot of diverse

124
00:10:35,630 --> 00:10:41,089
groups that are dynamically generated $1
comprise contain very sensitive data so

125
00:10:41,089 --> 00:10:46,360
the question is now can read the data
somehow like the attacks that appeared

126
00:10:46,360 --> 00:10:53,980
to 2006 and for this I quickly want to
reiterate on the on the attack model so

127
00:10:53,980 --> 00:10:59,699
what we've had is we have a set of
renewable websites we have tried that we

128
00:10:59,699 --> 00:11:04,250
control here its attack of the door and
we we assume that means some are able to

129
00:11:04,250 --> 00:11:07,610
drive uses to their websites so by
sending out links by email

130
00:11:07,610 --> 00:11:12,430
or contact your child or something and
in this website we can include the

131
00:11:12,430 --> 00:11:17,290
script that dynamically generated from
will not calm and this would generate a

132
00:11:17,290 --> 00:11:24,240
request with users and based on this
cookie the runner combo to generate some

133
00:11:24,240 --> 00:11:29,170
kind of service I'd hoped would run some
kind of server-side script and generate

134
00:11:29,170 --> 00:11:34,130
the JavaScript code then it would send
that generated code back to the to

135
00:11:34,130 --> 00:11:38,220
deposit the browser will just say ok
this is a jobs proposal executed and

136
00:11:38,220 --> 00:11:43,700
basically what we're trying to do is we
tried to poison this environment so as

137
00:11:43,700 --> 00:11:48,990
we learned this script here this runs in
the origin of a decade or so basically

138
00:11:48,990 --> 00:11:52,970
uses the global scope of attack dog and
we are trying to come up with him some

139
00:11:52,970 --> 00:11:58,690
javascript that would poison the global
the global space and the global

140
00:11:58,690 --> 00:12:03,620
functions that are winnable in in that
website so to make this script leaked

141
00:12:03,620 --> 00:12:09,390
the data to that functions and basically
I will only present the most obvious

142
00:12:09,390 --> 00:12:13,670
ones because of timing reasons we found
at five different methods to lead global

143
00:12:13,670 --> 00:12:18,130
and local variables and so on but I
don't have time for all of them so the

144
00:12:18,130 --> 00:12:24,230
first message is obvious so description
I just have global variables so here are

145
00:12:24,230 --> 00:12:29,510
three different kinds of global variable
declarations and JavaScript and it might

146
00:12:29,510 --> 00:12:32,769
be just generate a variable that is
called first name and contains to use

147
00:12:32,769 --> 00:12:38,180
his first name or email address and
Twitter status very easy so the attack

148
00:12:38,180 --> 00:12:43,099
includes descriptive in a technology and
then after executing the script

149
00:12:43,100 --> 00:12:45,220
the global variable BB

150
00:12:45,220 --> 00:12:50,370
herbal in the global space so the attack
again just exit sub I just with aiding

151
00:12:50,370 --> 00:12:55,160
attacked or the attacker can learn who
you actually are looking at the Scripps

152
00:12:55,160 --> 00:13:00,829
of the pages did you actually looked
into the second approach is also very

153
00:13:00,829 --> 00:13:06,519
very obvious so what be resized at work
sites usually split up the functionality

154
00:13:06,519 --> 00:13:10,399
so they have like a base library that
contains all the common functionality

155
00:13:10,399 --> 00:13:14,149
and then they have like some business
logic that would you still common

156
00:13:14,149 --> 00:13:19,339
functions and so on and usually the base
libraries including this one script and

157
00:13:19,339 --> 00:13:23,149
the business functionalities in to read
the second script so what he can do is

158
00:13:23,149 --> 00:13:27,449
an attacker instead of like including
the that the common base library you

159
00:13:27,449 --> 00:13:31,969
just write your own base library with it
the same set of function names all the

160
00:13:31,970 --> 00:13:35,750
functions are available to the script
and then you just include the script

161
00:13:35,750 --> 00:13:42,750
which will pass some sensitive user data
into this this library function here and

162
00:13:42,750 --> 00:13:47,939
if you set it up correctly you will be
able to receive data detect until we

163
00:13:47,939 --> 00:13:52,519
concede so the attacker would just in
this javascript declare his own library

164
00:13:52,519 --> 00:13:57,139
it would set up that the function that
has the same name as the script and then

165
00:13:57,139 --> 00:14:02,100
you can just exercise whatever data
dinner so these are the most obvious

166
00:14:02,100 --> 00:14:06,500
once we have also some some methods
where you can read local variables that

167
00:14:06,500 --> 00:14:11,519
are not passed a global functions but
that's too complicated for justice 25

168
00:14:11,519 --> 00:14:16,529
minutes talk so we then tested all these
methodologies against the scripts that

169
00:14:16,529 --> 00:14:22,800
we actually find these are the results
so after 39 scripts or 49 domains to be

170
00:14:22,800 --> 00:14:23,589
found

171
00:14:23,589 --> 00:14:28,379
we were able to exploit forty of the
domains and the reason for not being

172
00:14:28,379 --> 00:14:31,550
able to exploit the other nine is that
for these 90

173
00:14:31,550 --> 00:14:36,089
able to guess the URL of the script so
the script that was dynamically

174
00:14:36,089 --> 00:14:40,589
generated had some kind of token in
there for example a few websites he was

175
00:14:40,589 --> 00:14:44,800
a session IDs passed in the Urals and we
were not able to guess he's taken so we

176
00:14:44,800 --> 00:14:50,060
were not able to like include the
scripts within our page and I think this

177
00:14:50,060 --> 00:14:55,050
was near a coincidence that we were not
able to do I think what developers are

178
00:14:55,050 --> 00:14:58,849
not aware of all of this issue and
nobody protect against it I think it was

179
00:14:58,850 --> 00:15:04,100
just quit and basically what we would be
wary between chief is from the Saudi for

180
00:15:04,100 --> 00:15:09,970
domains that had a unique identifiers we
were able to meet this identifies of 28

181
00:15:09,970 --> 00:15:15,390
pages so basically this enables us to do
DNA methylation by getting it is added

182
00:15:15,390 --> 00:15:19,670
to our page we were able to tell his
email address or his name and so on and

183
00:15:19,670 --> 00:15:25,810
so forth from the 15 occasions where we
had personal data personalized a time

184
00:15:25,810 --> 00:15:29,579
the script we were able to exploit 11
and we found all kinds of things we

185
00:15:29,579 --> 00:15:33,920
found phone numbers email addresses we
found banking data credit card numbers

186
00:15:33,920 --> 00:15:39,630
and so on and support from the seven
scripts that contained see-saw

187
00:15:39,630 --> 00:15:43,410
stockman's we were able to exploit for
us and I would present a few of them

188
00:15:43,410 --> 00:15:51,279
soon so now I would like to go away
little demo that we prepared and I hope

189
00:15:51,279 --> 00:15:58,839
it works he actually do this because the
poorest posture and then the network

190
00:15:58,839 --> 00:16:04,110
here and more stable so you can exceed
but that's actually browser window its

191
00:16:04,110 --> 00:16:08,700
website that we set up a website and we
control and I'm not going to show the

192
00:16:08,700 --> 00:16:13,100
source code of this website because
these actual winner abilities so we

193
00:16:13,100 --> 00:16:16,510
contacted all of those forty websites
and told them hey you have a problem

194
00:16:16,510 --> 00:16:22,430
there we got three responses of suicides
and two of them fixed it and one of them

195
00:16:22,430 --> 00:16:25,089
didn't understand the first level
support in understand

196
00:16:25,089 --> 00:16:32,189
rented from them and he just dropped the
case so we have plenty of examples so

197
00:16:32,189 --> 00:16:35,899
let me quickly we had stayed December
times we have three different things and

198
00:16:35,899 --> 00:16:39,059
this will actually be pulled from
different sites so this could just be an

199
00:16:39,059 --> 00:16:43,480
arbitrary web site that you visit to the
first one is quite interesting so now we

200
00:16:43,480 --> 00:16:49,379
did it gets the script I hope it works
yes it works so it includes this script

201
00:16:49,379 --> 00:16:53,649
from another page that I'm not going to
disclose it found in a script the name

202
00:16:53,649 --> 00:17:00,139
is our testing account of this user and
it actually found the phone number of

203
00:17:00,139 --> 00:17:04,620
this user and this because on the side
you had to provide a valid phone number

204
00:17:04,619 --> 00:17:10,658
then an extra pick someplace from
shopping side so the shopping site

205
00:17:10,659 --> 00:17:15,730
allows you to create wish lists on the
shopping side and just wish this was

206
00:17:15,730 --> 00:17:19,490
shown like in the budget on the page and
they used to dynamically generated

207
00:17:19,490 --> 00:17:24,520
script to get the data to the page so
let's requested and waiting for some

208
00:17:24,520 --> 00:17:32,190
time it takes awhile because it's really
slow so he is the wish lists of the big

209
00:17:32,190 --> 00:17:38,100
quite popular shopping site and you can
see what do you think you could like

210
00:17:38,100 --> 00:17:43,059
crazy like a result page where you are
you offer these items to the person just

211
00:17:43,059 --> 00:17:48,399
visiting your website because he's
likely to buy these things and then the

212
00:17:48,399 --> 00:17:53,418
date the other one is pretty interesting
so this is from any provider and

213
00:17:53,419 --> 00:17:58,090
enterprise has a small ridges on it on
his web page and shows there in five

214
00:17:58,090 --> 00:18:03,490
latest emails budget and teammates were
actually contained in in a dynamic

215
00:18:03,490 --> 00:18:13,940
script so we can just click and wait yes
there is you can scroll imported now it

216
00:18:13,940 --> 00:18:16,160
doesn't really well you can see

217
00:18:16,160 --> 00:18:19,860
the first email so you can see there was
an email from this person and you can

218
00:18:19,860 --> 00:18:23,219
see the subject you can see the date of
the you know and you can also fueled

219
00:18:23,220 --> 00:18:27,610
technical information about the
urologists in to see the content but I

220
00:18:27,610 --> 00:18:32,219
think the subject is already like and I
think and you can also see how many

221
00:18:32,220 --> 00:18:39,890
unread emails he has in his account so
there's also an interesting fact ok I

222
00:18:39,890 --> 00:18:49,780
need to go back to the slights now
interesting examples are too complex to

223
00:18:49,780 --> 00:18:55,090
demonstrate so we'll go with all over to
other examples and this was a very

224
00:18:55,090 --> 00:19:01,010
interesting one so we found a news
website and its not swept side had a

225
00:19:01,010 --> 00:19:06,160
CSRF protection there was nothing not
really anything of interest in a new

226
00:19:06,160 --> 00:19:13,570
side but you could lead off the new site
so we used this exercise attack to steal

227
00:19:13,570 --> 00:19:20,120
and isn't allowed us to protect and
nurture its a news I didn't have

228
00:19:20,120 --> 00:19:23,939
anything interesting but we figured out
that in the profile page of this inside

229
00:19:23,940 --> 00:19:28,480
there is a cross-site scripting the
crisis gripping is only explainable by

230
00:19:28,480 --> 00:19:32,230
the user himself by changing his profile
in putting a cross-site scripting

231
00:19:32,230 --> 00:19:37,080
payload and salt only a page that only
the user himself concedes but well we

232
00:19:37,080 --> 00:19:42,000
have a sea surf token so we can just
send profile change requests so we did

233
00:19:42,000 --> 00:19:50,820
that and then you are a bit of timing
and we executed in payload and from the

234
00:19:50,820 --> 00:19:55,490
process in pale beer able to read the
Facebook or token that they had because

235
00:19:55,490 --> 00:19:59,010
they're like this Facebook integration
we were able to login so we were able to

236
00:19:59,010 --> 00:20:02,590
access the user's Facebook account and
we were able to post in its name for

237
00:20:02,590 --> 00:20:08,060
example this Canadian for example to
create a warm and pretty girl

238
00:20:08,060 --> 00:20:11,260
service of this was the most senior
thing that we thought we saw on the side

239
00:20:11,260 --> 00:20:16,520
holster and 50 said like a very agents
driven WI you could also all kinds of

240
00:20:16,520 --> 00:20:24,300
Sense UI interactions and to put up the
CIA is hosting provider dynamic

241
00:20:24,300 --> 00:20:28,419
JavaScript to pass the Australian from
the back and the front and so you weigh

242
00:20:28,420 --> 00:20:33,390
between 30th open and with the obstacle
you able to talk to you today PRI

243
00:20:33,390 --> 00:20:36,970
able to do everything we were able to
reach files to write files to delete

244
00:20:36,970 --> 00:20:42,870
files and as an interesting fact this
file hosting provider had multiple other

245
00:20:42,870 --> 00:20:50,340
services so they had emailed calendars
and so on an unusual one API token of

246
00:20:50,340 --> 00:20:54,879
another service and authenticated to the
service as well so we were able to still

247
00:20:54,880 --> 00:21:01,020
lost open and then take over all the all
the services company provided to use its

248
00:21:01,020 --> 00:21:07,879
ok I will quickly go over how to be an
easy winner abilities in the first place

249
00:21:07,880 --> 00:21:14,840
so as opposed to the attacks that have
been shown in 2006 cent and other years

250
00:21:14,840 --> 00:21:20,510
our taxes are not based on prozac works
so you cannot easily remove an era

251
00:21:20,510 --> 00:21:24,890
construct a call or something but is
based on standard jobs computers and

252
00:21:24,890 --> 00:21:29,610
that's why we cannot extend above sea
level and basically because of the other

253
00:21:29,610 --> 00:21:34,419
taxable Honda died in prison it's very
hard to craft a dynamic script that is

254
00:21:34,420 --> 00:21:40,950
not leaking any data so what we what we
do as a recommendation is that you

255
00:21:40,950 --> 00:21:45,830
should and prevent script files from
being included by third parties and you

256
00:21:45,830 --> 00:21:51,199
can I do this by strictly for checking
which is very helpful or by using secret

257
00:21:51,200 --> 00:21:57,040
opens in the USA that they did that
identical cannot include your script in

258
00:21:57,040 --> 00:22:02,070
the pitch but this is only a step that
you should only do when you read

259
00:22:02,070 --> 00:22:05,620
we need to have this dynamic scripts
powerful for whatever reason what you

260
00:22:05,620 --> 00:22:10,360
really should do it you should separate
your JavaScript code from your sensitive

261
00:22:10,360 --> 00:22:15,240
user data so you should have studied
javascript and have a data provisioning

262
00:22:15,240 --> 00:22:21,240
service that is not like handed to the
browser as a script file and that we

263
00:22:21,240 --> 00:22:27,790
protected will be protected by the same
origin policy and last but not least I

264
00:22:27,790 --> 00:22:33,040
want to talk about one other topic which
is why the security people and about the

265
00:22:33,040 --> 00:22:37,800
content security policy so the kind of
security policies is a new mechanism

266
00:22:37,800 --> 00:22:43,960
basically white preventing access by
whitelisting JavaScript and like in

267
00:22:43,960 --> 00:22:48,370
high-level point of view it requires you
to externalize all your online scripts

268
00:22:48,370 --> 00:22:54,439
to external sites too late on white list
to host and what we will be selling our

269
00:22:54,440 --> 00:22:58,940
investigation and study instead a lot of
easy line scripts are dynamically

270
00:22:58,940 --> 00:23:04,230
generated and contain sensitive
information and usually unless goods are

271
00:23:04,230 --> 00:23:09,410
not prone to our tack because it cannot
easily include any night script into an

272
00:23:09,410 --> 00:23:14,710
attack a page and if you introduce
content security policy and you blindly

273
00:23:14,710 --> 00:23:18,620
move out all your lunch groups to
external files then you will get prone

274
00:23:18,620 --> 00:23:23,300
to this attack and I think security
policy in this case will make this issue

275
00:23:23,300 --> 00:23:30,450
a little bit more widespread ok let's
come to the conclusion so we

276
00:23:30,450 --> 00:23:35,560
investigated the security of dynamically
generated JavaScript files we found that

277
00:23:35,560 --> 00:23:41,460
about one-third of the most 150 popular
websites used to dynamically generated

278
00:23:41,460 --> 00:23:46,430
JavaScript and most of these dynamically
generated files contain sensitive user

279
00:23:46,430 --> 00:23:52,100
date and we showed some ways to delete
this data and we found out that we were

280
00:23:52,100 --> 00:23:56,620
able to lead a town about 80 percent of
all the cases so far the forty nine

281
00:23:56,620 --> 00:24:03,030
domains we're able to exploit 40th them
and the consequences can can range from

282
00:24:03,030 --> 00:24:08,730
simple privacy issues where you get on
myspace web is adding a website

283
00:24:08,730 --> 00:24:12,960
up to full account hijacking whole
account gets taken over by an attacker

284
00:24:12,960 --> 00:24:19,650
and injured introduction of CSP might
make this problem worse with that I

285
00:24:19,650 --> 00:24:23,580
would like to thank you for your
attention and feel free to ask any

286
00:24:23,580 --> 00:24:46,658
questions

287
00:24:46,659 --> 00:25:36,090
we didn't want to do that

288
00:25:36,090 --> 00:25:47,309
popular content management systems or
other software the answer is no we just

289
00:25:47,309 --> 00:25:54,559
stick to 150 pages because it was a huge
effort to do that just because seating

290
00:25:54,559 --> 00:25:58,720
we we had to see all these pages read we
had to put all the different user data

291
00:25:58,720 --> 00:26:02,539
can imagine that being such an
application and we had to find all the

292
00:26:02,539 --> 00:26:07,700
scripts we had to manually click all the
functionalities and so on so we decided

293
00:26:07,700 --> 00:26:13,380
to limit the same people study to do
this website because we spent weeks

294
00:26:13,380 --> 00:26:17,059
making websites and creating a tones and
so on

295
00:26:17,059 --> 00:26:24,440
immediately videos kind of happened and
we will start to really interact with

296
00:26:24,440 --> 00:26:30,010
with basically MediaWiki which is
running on didn't find anything they are

297
00:26:30,010 --> 00:26:33,350
from what I record and there's nothing
you could actually deployed it was

298
00:26:33,350 --> 00:26:40,350
interesting and the second question do
we have any plans to open source too

299
00:26:40,350 --> 00:26:45,980
tall I think currently we don't have any
any plans of the tool is really simple

300
00:26:45,980 --> 00:26:54,240
so I think it's really like a hundred
lines of code so you can created from

301
00:26:54,240 --> 00:27:00,410
scratch really easily in like half an
hour according

302
00:27:00,410 --> 00:27:13,230
we we we had a Chrome extension and if
you look to the debugger API in Chrome

303
00:27:13,230 --> 00:27:17,340
it was hella web script whether request
was coming from so we looked at this

304
00:27:17,340 --> 00:27:22,689
type and there's a type script which
came from strip that has gripped in

305
00:27:22,690 --> 00:27:27,740
there that's what we looked at you might
have an interior might have liked X hrs

306
00:27:27,740 --> 00:27:33,140
which are used to retrieve this but then
again if you can actually crossed many

307
00:27:33,140 --> 00:27:38,420
boundaries read at least not but I think
as I said I sense that I think there was

308
00:27:38,420 --> 00:27:46,610
another way we ought adopted it using
the mutation Server API so basically

309
00:27:46,610 --> 00:27:49,879
would inject according to the paper
itself and every time a script element

310
00:27:49,880 --> 00:28:10,020
whatever then we looked at the US

311
00:28:10,020 --> 00:28:22,760
a little bit

