1
00:00:00,000 --> 00:00:03,570
all right we're gonna get started thanks
for coming out his last session of the

2
00:00:03,570 --> 00:00:04,080
day

3
00:00:04,080 --> 00:00:08,929
preciate or being here so real quick
before I get sorry let me just introduce

4
00:00:08,929 --> 00:00:15,000
myself my name is in Haken I'm currently
a security researcher synopsis working

5
00:00:15,000 --> 00:00:20,650
on Coverity static analysis tool and
other application security tools prior

6
00:00:20,650 --> 00:00:25,448
to synopsis I got my PhD UC berkeley
mathematics and I've also been a

7
00:00:25,449 --> 00:00:30,170
professional software developer for
about nine years after the talk he does

8
00:00:30,170 --> 00:00:34,340
when you get in touch with me on Twitter
and old fashioned email works as well

9
00:00:34,340 --> 00:00:39,540
should be easy at all so today we're
talking about full disk encryption so

10
00:00:39,540 --> 00:00:43,379
for anyone that doesn't know exactly
what that means that is exactly what it

11
00:00:43,379 --> 00:00:48,129
sounds like it's encrypting an entire
disk or volume and it's usually handle

12
00:00:48,129 --> 00:00:53,289
that a very low level with a driver or
the operating system level so that it

13
00:00:53,289 --> 00:00:57,870
will transparently decrypt all of the
drive contents for all the applications

14
00:00:57,870 --> 00:01:04,250
and services the services are usually
totally unaware that the drive itself is

15
00:01:04,250 --> 00:01:08,920
actually encrypted so this isn't meant
to protect against remote attacks by the

16
00:01:08,920 --> 00:01:13,869
time any application that sending out
data remotely sees it it's already in

17
00:01:13,869 --> 00:01:20,140
clear text so this is specifically meant
to protect against threats of physical

18
00:01:20,140 --> 00:01:24,580
access so this talk is very specifically
going to be about how you can attack

19
00:01:24,580 --> 00:01:29,048
full disk encryption assuming that you
have access whether that means that

20
00:01:29,049 --> 00:01:35,180
there is a stolen laptop laptop that's
been lost or someone is picking up a

21
00:01:35,180 --> 00:01:39,130
laptop that's been left in a hotel room
it we're going to assume that the

22
00:01:39,130 --> 00:01:44,070
attacker has access to the device so
this talk specifically is about

23
00:01:44,070 --> 00:01:48,029
Microsoft BitLocker which is Microsoft's
proprietary full disk encryption

24
00:01:48,030 --> 00:01:53,320
solution has been built into all
versions of Windows since this and it's

25
00:01:53,320 --> 00:01:57,339
basically been built into the
Professional and Enterprise versions and

26
00:01:57,340 --> 00:02:02,250
it is been built to use the Trusted
Platform Module that's available on lots

27
00:02:02,250 --> 00:02:07,829
of devices and that is something that
i'm gonna go into detail in a second but

28
00:02:07,829 --> 00:02:12,350
the PPM in this case is used to store
that master encryption key

29
00:02:12,350 --> 00:02:16,579
so this physical chip that lives on the
device is what's responsible for keeping

30
00:02:16,580 --> 00:02:23,580
us secrets so the TPM is an open
specification for an API that can do a

31
00:02:23,580 --> 00:02:26,760
lot of different things and if you're
interested in Trusted Computing there's

32
00:02:26,760 --> 00:02:31,660
a lot of sort of very cool and
specialized applications but it's sort

33
00:02:31,660 --> 00:02:36,350
of a fairly general API where you can do
a lot of things with it but in our case

34
00:02:36,350 --> 00:02:40,489
what we're really interested in is how
the TPM can be used to store secrets and

35
00:02:40,490 --> 00:02:46,630
specifically in this case disk
encryption key so I T p.m. has a number

36
00:02:46,630 --> 00:02:51,890
of platform configuration registers
called PCR and the specification has

37
00:02:51,890 --> 00:02:58,420
like 24 of them and myself a locker uses
about 4 by default and so I can go into

38
00:02:58,420 --> 00:03:02,399
the specifics too much on what each one
is used for but the idea is that you can

39
00:03:02,400 --> 00:03:07,220
load in information tease registers
about the configuration and status of

40
00:03:07,220 --> 00:03:13,440
the device and each stage of the boot
process is responsible for making some

41
00:03:13,440 --> 00:03:17,359
hash of the next stage whether that's
the master boot record or the bootloader

42
00:03:17,360 --> 00:03:24,080
and putting a value into a PCR and so
when a machine is first booted up

43
00:03:24,080 --> 00:03:30,020
initially has the euro in all of these
registers and whenever any API call

44
00:03:30,020 --> 00:03:34,740
assent to the TPM to update the value it
never sets the values directly it always

45
00:03:34,740 --> 00:03:37,880
takes the old value concatenate sit with
the new one

46
00:03:37,880 --> 00:03:42,810
hashes that implies that result in to
the PCR and this is really important and

47
00:03:42,810 --> 00:03:48,050
this is a very critical to how the TPM
is able to store secret safely because

48
00:03:48,050 --> 00:03:52,530
you can't set arbitrary values of the
PCR even if you like colonel level

49
00:03:52,530 --> 00:03:58,030
access to the device TPM just doesn't
expose the functionality to set a value

50
00:03:58,030 --> 00:04:04,310
directly so only be so after a value is
already set in there you can't send new

51
00:04:04,310 --> 00:04:08,780
ones only the original boo process where
each piece is responsible for hashing

52
00:04:08,780 --> 00:04:13,830
the next time putting that in the PCR
can reproduce those same values in the

53
00:04:13,830 --> 00:04:20,440
PCR so when the TPM is told to store a
secret in this case are disk encryption

54
00:04:20,440 --> 00:04:25,150
key you have the option of sealing it
and when you do that you specify some of

55
00:04:25,150 --> 00:04:25,760
the PCR

56
00:04:25,760 --> 00:04:30,920
be used as parameters to that ceiling
operation and after ricky is sealed by

57
00:04:30,920 --> 00:04:37,180
the TPM it's only going to be unsealed a
key if the same PCR values exist as one

58
00:04:37,180 --> 00:04:41,890
it was originally settled so when
BitLocker is setting itself up and

59
00:04:41,890 --> 00:04:46,490
forcing tripping the drive and looks at
the current values in the PC ours and

60
00:04:46,490 --> 00:04:50,690
then only when the machine has been
rebooted through these same boot process

61
00:04:50,690 --> 00:04:56,620
will unlock that she so effectively what
this means is even if you have physical

62
00:04:56,620 --> 00:05:01,910
access of a device if you boot into some
attacker controlled operating system it

63
00:05:01,910 --> 00:05:07,920
cannot ask the TPM Tru the key that's
been sealed and that's a very powerful

64
00:05:07,920 --> 00:05:12,800
feature of the way this disk encryption
works and is also going to be sort of

65
00:05:12,800 --> 00:05:19,050
just important to understand that points
that this allows you to securely keep a

66
00:05:19,050 --> 00:05:22,970
secret in the TPM without actually
having to specify password because it is

67
00:05:22,970 --> 00:05:28,190
just looking at these PCR values to
believe that it is the original boot

68
00:05:28,190 --> 00:05:34,810
process asking for the key back so Bill
Walker has the option of using either a

69
00:05:34,810 --> 00:05:41,710
pin or a key saves on a USB Drive but
these are optional if you're using a TPM

70
00:05:41,710 --> 00:05:46,810
because they can't just rely on those
PCR values to verify that it is

71
00:05:46,810 --> 00:05:51,620
BitLocker asking for the key so in its
recommended configuration BitLocker

72
00:05:51,620 --> 00:05:56,070
works transparently you don't need to
put in any sort of password or PIN and

73
00:05:56,070 --> 00:05:59,120
you can just turn on the machine that's
been encrypted and it will decrypt the

74
00:05:59,120 --> 00:06:05,440
drive on boot and start serving up clear
tax to Windows so if you have been

75
00:06:05,440 --> 00:06:08,940
unable to sway you might not even
realize that disk encryption has been

76
00:06:08,940 --> 00:06:12,360
unable because it's happening completely
transparently when you turn the machine

77
00:06:12,360 --> 00:06:17,370
so the picture of what those boots
process looks like is something like

78
00:06:17,370 --> 00:06:17,870
this

79
00:06:17,870 --> 00:06:22,040
send again this is sort of a simplified
thing because the details here or in two

80
00:06:22,040 --> 00:06:26,420
important for where I'm going but the
first part of the boot process the bio

81
00:06:26,420 --> 00:06:31,660
said the EFI will read in the next part
of the boot stage hash that and put it

82
00:06:31,660 --> 00:06:36,880
in a PCR in the TPM it then passes off
control and this is going to happen a

83
00:06:36,880 --> 00:06:39,100
few times down the chain of control

84
00:06:39,100 --> 00:06:42,970
boots but eventually when you get to
last part of the boot process it's going

85
00:06:42,970 --> 00:06:48,330
to ask the TPM to unseal the key and is
going to put that key in the RAM so that

86
00:06:48,330 --> 00:06:52,380
the operating system and the future can
transparently encrypt and decrypt data

87
00:06:52,380 --> 00:06:57,920
often the physical drive so once that he
has been pulled out of the TPR than

88
00:06:57,920 --> 00:07:01,440
their hands off control to the regular
operating system which then begins

89
00:07:01,440 --> 00:07:07,370
running as usual so in this picture if
you're interested in attacking full disk

90
00:07:07,370 --> 00:07:11,490
encryption there's sort of three
different boxes that I think that you

91
00:07:11,490 --> 00:07:17,430
could potentially attack so one is the
early stages of the boot process either

92
00:07:17,430 --> 00:07:22,250
the BIOS at the AFI are one of these
early parts of the boot system there are

93
00:07:22,250 --> 00:07:26,450
potentially bugs and there where you
could cause it to do something it's not

94
00:07:26,450 --> 00:07:33,340
meant to do St platform isn't set up to
require signed firmware you can put your

95
00:07:33,340 --> 00:07:38,640
own firmware on there and do something
malicious there's the physical hardware

96
00:07:38,640 --> 00:07:43,400
that you can tension manipulate so
there's potential to do a cold boot

97
00:07:43,400 --> 00:07:48,070
attack on the RAM there's also been
known attacks on TPM and also a bit more

98
00:07:48,070 --> 00:07:52,450
about that in a second and then there's
the operating system obviously the

99
00:07:52,450 --> 00:07:56,430
operating system is the biggest thing
here it's not a very large attack

100
00:07:56,430 --> 00:08:02,940
surface so that's where I'm going to
find out targeting this attack this is

101
00:08:02,940 --> 00:08:06,200
saying a lot of the same things but
there have been known attacks on the

102
00:08:06,200 --> 00:08:12,280
hardware so I mentioned cold boot has
previously known attack where if you

103
00:08:12,280 --> 00:08:17,929
lower the rant I'm sure to Savannah low
temperature it's not going to lose its

104
00:08:17,930 --> 00:08:24,570
memory across a reboot so since the TPM
has already released his key Andy and

105
00:08:24,570 --> 00:08:28,390
BitLocker has put that in the RAM you
could potentially reboot into an

106
00:08:28,390 --> 00:08:33,280
attacker controlled operating system and
dumped out those RAM values before they

107
00:08:33,280 --> 00:08:38,659
get clear from memory so that's a known
attack that people have shown is

108
00:08:38,659 --> 00:08:44,159
somewhat effective there was also a
vulnerability discovered in all versions

109
00:08:44,159 --> 00:08:48,380
of the TPM specification where you could
actually ground some of the pins on the

110
00:08:48,380 --> 00:08:52,580
physical chip and it would cause the PCR
registers to get

111
00:08:52,580 --> 00:08:57,560
go back to zero and then a malicious
operating system could then spoof other

112
00:08:57,560 --> 00:09:03,430
PCR values and you can ask it to unseal
key modern versions and a TPM spec have

113
00:09:03,430 --> 00:09:10,770
fixed that flaw but sort of all I'm
saying here is that it's not warranted

114
00:09:10,770 --> 00:09:16,130
to worry about other potential hardware
issues but as I said where I'm going

115
00:09:16,130 --> 00:09:20,910
with this is we're going to attack the
operating system itself so if bill

116
00:09:20,910 --> 00:09:25,180
locker is setup to boot in this
transparent way then you turn on the

117
00:09:25,180 --> 00:09:29,689
machine and it boots up to a logon
screen so it's gonna look something like

118
00:09:29,690 --> 00:09:35,880
this so that means that logging in to
the Windows machine is then our attack

119
00:09:35,880 --> 00:09:39,340
surface if you can get through this
screen then you are logged in as the

120
00:09:39,340 --> 00:09:43,910
user and you have access to that users
so we're going to attack Windows

121
00:09:43,910 --> 00:09:48,610
authentication so to do that i'm gonna
talk a little bit about how Windows

122
00:09:48,610 --> 00:09:53,950
authentication works so the thing to
note from this screen where you're about

123
00:09:53,950 --> 00:09:57,550
to log in is that there's something that
you probably recognize here which is

124
00:09:57,550 --> 00:10:03,010
that it is showing a login for a user on
a domain and that means that this

125
00:10:03,010 --> 00:10:06,580
machine is going to try to talk to a
domain controller and ask for that

126
00:10:06,580 --> 00:10:10,890
domain controller to supply credentials
to authorize logging into this machine

127
00:10:10,890 --> 00:10:14,970
so I means that again there is some
complexity involved in there is an

128
00:10:14,970 --> 00:10:20,000
attack surface for us to try to get
through this log so Windows

129
00:10:20,000 --> 00:10:24,400
authentication as having handled by the
Local Security Authority and that

130
00:10:24,400 --> 00:10:28,209
delegates' its authentication procedure
to different security subsystem

131
00:10:28,210 --> 00:10:33,280
providers and one of those is used for a
client domain authentication and it uses

132
00:10:33,280 --> 00:10:39,329
the Kerberos protocol so when attacking
full disk encryption we're assuming that

133
00:10:39,330 --> 00:10:44,490
we have physical access the device so if
I'm carrying this laptop that's been

134
00:10:44,490 --> 00:10:50,880
encrypted I can plug it into my own
network and run my own domain controller

135
00:10:50,880 --> 00:10:54,360
on that network and force the login
process to talk to that domain

136
00:10:54,360 --> 00:11:00,490
controller so when you log into a
workstation that's connected to a domain

137
00:11:00,490 --> 00:11:03,020
the first thing that's going to happen

138
00:11:03,020 --> 00:11:07,740
is the machine is going to request for
what's called the ticket granting take

139
00:11:07,740 --> 00:11:13,460
it from the domain controller this is
part of the Kerberos protocol and the

140
00:11:13,460 --> 00:11:16,800
ticket grading take it that the domain
controller will respond with is

141
00:11:16,800 --> 00:11:21,670
basically a session token that's going
to last a lifetime without login and

142
00:11:21,670 --> 00:11:25,860
this is what's used as part of this sort
of single sign-on on Windows domains

143
00:11:25,860 --> 00:11:28,710
that you don't have to type in your
password when you log into any other

144
00:11:28,710 --> 00:11:33,610
services and was returned with that
taken granting take it is also a secret

145
00:11:33,610 --> 00:11:38,030
that's been encrypted with the user's
password to assume that both that the

146
00:11:38,030 --> 00:11:42,630
domain controller has a hash of the
user's password and when you type in the

147
00:11:42,630 --> 00:11:46,330
password to local computer then there's
also a copy of that passwords

148
00:11:46,330 --> 00:11:51,810
temporarily on a computer so the domain
controllers going to respond with his

149
00:11:51,810 --> 00:11:55,319
secret that's been encrypted with the
user password and then the local machine

150
00:11:55,320 --> 00:11:59,380
will verify that it can decrypt that
secret using the password you just typed

151
00:11:59,380 --> 00:12:04,760
it so this is something that we can
completely reproduce with our mock

152
00:12:04,760 --> 00:12:08,950
domain controller we can set whatever
password we want on the domain

153
00:12:08,950 --> 00:12:12,290
controller to use for encrypting the
secret and we can tighten that same

154
00:12:12,290 --> 00:12:16,709
thing right here with this device I were
physically in front moves so we can use

155
00:12:16,710 --> 00:12:20,440
the same house where both places and
there's nothing wrong with reproducing

156
00:12:20,440 --> 00:12:24,730
this part of the login process but
there's a second part of this Kerberos

157
00:12:24,730 --> 00:12:29,740
protocol that allows you to actually
authenticate they have permission to log

158
00:12:29,740 --> 00:12:34,610
into this particular machine so after
you have that taken granting take it and

159
00:12:34,610 --> 00:12:39,250
the secret you don't need to request for
an actual service take it that gives you

160
00:12:39,250 --> 00:12:43,910
permission to log into that machine so
you send the ticket granting take it and

161
00:12:43,910 --> 00:12:47,339
something encrypt with that secret asked
to the domain controller the domain

162
00:12:47,340 --> 00:12:52,150
controller doesn't work and send back a
take it and then the local machine has

163
00:12:52,150 --> 00:12:55,090
to verify that that is a valid ticket

164
00:12:55,090 --> 00:12:58,560
allowing this user to log into this
machine and again this is something that

165
00:12:58,560 --> 00:13:03,030
we can try and reproduce with our mock
domain controller but there's a

166
00:13:03,030 --> 00:13:08,140
complication and thats machine passwords
so just like your user account has a

167
00:13:08,140 --> 00:13:12,330
password every machine that's registered
with the domain controller also has a

168
00:13:12,330 --> 00:13:16,520
password associated with that machine so
when you first join

169
00:13:16,520 --> 00:13:22,870
the network with Wendy Machin joins the
domain it generates a secret key and

170
00:13:22,870 --> 00:13:27,730
exchanges that key with the domain
controller so as so just like your user

171
00:13:27,730 --> 00:13:30,490
account has a shared secret in the form
of your password

172
00:13:30,490 --> 00:13:35,950
each machine also has a shared secrets
and because this device is encrypted we

173
00:13:35,950 --> 00:13:40,950
don't know what that secret is we can't
just read it off the hard drive and so

174
00:13:40,950 --> 00:13:45,240
we can set up our domain controller
without same secret so we can try and

175
00:13:45,240 --> 00:13:49,280
generate this service ticket tea but I
suppose to be signed with his machine

176
00:13:49,280 --> 00:13:54,180
password and so if we sends a service
take it that isn't signed with the right

177
00:13:54,180 --> 00:13:58,560
machine passwords you get this error
message when I try to login and you

178
00:13:58,560 --> 00:14:02,250
can't really read it there but that says
is the trust relationship between this

179
00:14:02,250 --> 00:14:07,200
workstation and the primary domain has
failed so if you try to set up your

180
00:14:07,200 --> 00:14:11,820
domain controller you said any sort of
arbitrary machine password this is

181
00:14:11,820 --> 00:14:16,250
what's gonna happen so this isn't going
to get you through the login screen but

182
00:14:16,250 --> 00:14:19,950
the thing I haven't described yet is
what happens when the domain controller

183
00:14:19,950 --> 00:14:24,430
isn't available let's say you're at a
conference in using a laptop during

184
00:14:24,430 --> 00:14:29,010
someone's talk you can still log in with
your domain passwords and that's because

185
00:14:29,010 --> 00:14:35,980
whenever the Kerberos SSP verifies that
you've logged into the machine will cash

186
00:14:35,980 --> 00:14:40,360
those credentials and allow you to log
in using the same credentials and the

187
00:14:40,360 --> 00:14:46,040
future if it can authenticate with the
domain controller so thats local cache

188
00:14:46,040 --> 00:14:50,750
has to be updated anytime your password
has potentially changed so anytime it

189
00:14:50,750 --> 00:14:54,840
sees a valid authentication or any time
it seems that your password has been

190
00:14:54,840 --> 00:15:00,910
changed it will update its cash so if we
could change the password from the login

191
00:15:00,910 --> 00:15:05,459
screen that would allow us to poison the
cash with a different attacker known

192
00:15:05,460 --> 00:15:11,560
passwords so if we can only change the
password on the login screen

193
00:15:11,560 --> 00:15:15,359
well fortunately there's a situation
where that becomes possible if the

194
00:15:15,360 --> 00:15:19,030
domain controller tells you that your
password has expired

195
00:15:19,030 --> 00:15:23,770
it will then prompt you to change your
password and after that password change

196
00:15:23,770 --> 00:15:28,780
has been completed that local cash gets
poisons and you can log in with a new

197
00:15:28,780 --> 00:15:29,920
password

198
00:15:29,920 --> 00:15:33,959
so you are through the login screen and
you have access to all of that users

199
00:15:33,959 --> 00:15:39,969
data so what do you do after that while
I mean you're logged in if you have

200
00:15:39,970 --> 00:15:46,610
local administrative rights and dump the
locker key out of kernel memory although

201
00:15:46,610 --> 00:15:50,889
it's kind of dude at this point already
have access to all the users data so you

202
00:15:50,889 --> 00:15:55,829
can dig through whatever data is on
there you can drop in malware if this

203
00:15:55,829 --> 00:16:01,189
was just temporarily accessing someone's
device you can basically do whatever you

204
00:16:01,190 --> 00:16:10,399
wants so now let's try to do a demo so
missus my encrypted machine I don't know

205
00:16:10,399 --> 00:16:16,740
the password on it if I just try and
login it's not going to let me so I'm

206
00:16:16,740 --> 00:16:21,050
going to set up my mock domain
controller using this super cool

207
00:16:21,050 --> 00:16:42,660
packaging may never heard of called
Samba I think I know just because I

208
00:16:42,660 --> 00:16:44,269
haven't actually configured it yet

209
00:16:44,269 --> 00:16:52,130
alright so it's configure it to be a
domain controller it is so I've already

210
00:16:52,130 --> 00:16:56,680
said this in so that the defaults will
match the domain that you can just read

211
00:16:56,680 --> 00:17:02,779
off the login screen and then I'm
sending an admin password on this new

212
00:17:02,779 --> 00:17:11,290
domain it doesn't matter what it is and
does a lot of work apparently domains

213
00:17:11,290 --> 00:17:21,260
are complicated so then I'm going to
restart my mama service and then set a

214
00:17:21,260 --> 00:17:26,000
password for this user accounts in a way
is that it will show up as being expired

215
00:17:26,000 --> 00:17:31,740
so here's the big long demanded to its
sign noting the current date time

216
00:17:31,740 --> 00:17:37,330
setting the date to 2001 a password on a
new account and then I set the date back

217
00:17:37,330 --> 00:17:39,549
to normal

218
00:17:39,549 --> 00:17:40,580
they're startin

219
00:17:40,580 --> 00:17:46,570
alright so there's my expired user
accounts and let me connect this machine

220
00:17:46,570 --> 00:17:51,779
to the network where it will discover
that the due de mis katana domain

221
00:17:51,779 --> 00:17:58,320
controllers on the network and try to
contact it to log n and I didn't

222
00:17:58,320 --> 00:18:04,029
actually spell password correctly as
tried again so I'm logging in with that

223
00:18:04,029 --> 00:18:08,010
password I just sat on the command line
my passwords expired let's change it to

224
00:18:08,010 --> 00:18:18,500
something else like password 122 it is
alright my password has been changed

225
00:18:18,500 --> 00:18:22,370
awesome I still can't log in cause
there's no computer account for this

226
00:18:22,370 --> 00:18:26,629
work station on the domain controller
which is true I didn't actually set up a

227
00:18:26,630 --> 00:18:30,970
machine account for this workstation but
I'm just gonna take it back off the

228
00:18:30,970 --> 00:18:38,789
network so that it uses the cash and
there's that new password I just set and

229
00:18:38,789 --> 00:18:47,389
it

230
00:18:47,389 --> 00:18:55,779
whenever the user has gone there you can
read it so what does this apply to so

231
00:18:55,779 --> 00:18:59,609
like I said this applies to a bit longer
if you don't have to reboot

232
00:18:59,609 --> 00:19:05,539
authentication enabled so as long as you
didn't set a pin or USB key on it you

233
00:19:05,539 --> 00:19:09,959
can beat up to login screen and you can
run this attack obviously this assumes

234
00:19:09,959 --> 00:19:13,419
that there is a domain account on that
machine that you're logging in as Sony's

235
00:19:13,419 --> 00:19:18,369
me attach your domain you have to log
into a before without accounts if you're

236
00:19:18,369 --> 00:19:22,329
talking about like a laptop this is
pretty likely that this is the way it up

237
00:19:22,329 --> 00:19:26,489
I tested this on every version of
Windows that's currently out there I

238
00:19:26,489 --> 00:19:31,209
even tested on XP and Windows 2000
witches sort of a moot because BitLocker

239
00:19:31,209 --> 00:19:36,099
was an added until messed up but the
point is that this is in the

240
00:19:36,099 --> 00:19:43,589
authentication protocol has always been
there so obviously this is a bypass to

241
00:19:43,589 --> 00:19:47,089
authentication this isn't really
BitLocker specific but is really

242
00:19:47,089 --> 00:19:50,889
interesting in the context where
BitLocker is enabled because if their

243
00:19:50,889 --> 00:19:54,998
locker isn't enabled then you could just
boot into an attacker OS and reset

244
00:19:54,999 --> 00:20:00,339
passwords anyway but it does potentially
have other valid attack scenario so

245
00:20:00,339 --> 00:20:04,059
someone's lock their computer and walked
away from it and looking for an attack

246
00:20:04,059 --> 00:20:07,539
that gets he passed the lockscreen a
little faster than rebooting into your

247
00:20:07,539 --> 00:20:12,759
own operating system you can execute
this attack in a matter of seconds you

248
00:20:12,759 --> 00:20:16,399
know sort of I had the setup I had to
read off the domain of the login screen

249
00:20:16,399 --> 00:20:21,369
that's not my thing up but the domain
and the username is all transmitted in

250
00:20:21,369 --> 00:20:26,799
clear text so you can set up a dome or a
piece of software that will act as a

251
00:20:26,799 --> 00:20:30,099
domain controller and just automatically
reply as though is that domain

252
00:20:30,099 --> 00:20:35,658
controller you don't have to run a full
song tracks executes Davis so

253
00:20:35,659 --> 00:20:40,289
medications you could use some form a
preview talk that occasion holidays

254
00:20:40,289 --> 00:20:42,329
advice and use a pin

255
00:20:42,329 --> 00:20:47,609
personally if on my machine I like using
previous authentication I like that

256
00:20:47,609 --> 00:20:52,009
added security but deploying this
corporation wide so if you're talking

257
00:20:52,009 --> 00:20:55,759
about like eight enterprise corporate
network where there's thousands of

258
00:20:55,759 --> 00:20:58,550
laptops in the system that is something
that is

259
00:20:58,550 --> 00:21:04,560
really hard to sell this is from some
quotes from Microsoft's TechNet

260
00:21:04,560 --> 00:21:09,050
documentation basically explaining why
it's a hard sell to have prevalent

261
00:21:09,050 --> 00:21:13,210
authentication you physically have to be
at machines to reboot them and said

262
00:21:13,210 --> 00:21:20,480
you're talking about remote workstations
servers as opposed to laptops if you

263
00:21:20,480 --> 00:21:24,090
rebooted someone has to go into the data
center to enter a PIN that's not really

264
00:21:24,090 --> 00:21:29,439
acceptable and even if you're talking
about someone's laptop if they forget

265
00:21:29,440 --> 00:21:33,750
their pain in the middle of a trip like
they can reset it until they get back on

266
00:21:33,750 --> 00:21:38,830
the domain network to get a recovery key
from the domain controller so microsoft

267
00:21:38,830 --> 00:21:45,149
recommends not using authentication so
the good news is that microsoft has

268
00:21:45,150 --> 00:21:51,640
released a patch to fix this bypass it
landed three days ago so update your

269
00:21:51,640 --> 00:21:57,310
workstations the patch requires that
after it does the old password reset

270
00:21:57,310 --> 00:22:02,040
protocol it does a full authentication
with the machine password to make sure

271
00:22:02,040 --> 00:22:06,930
that the domain controller also is
giving you access machine before a place

272
00:22:06,930 --> 00:22:10,300
to crash so I do want to give an
acknowledgement to the Microsoft

273
00:22:10,300 --> 00:22:15,080
Security Response Center who are really
proactive about working with me to get a

274
00:22:15,080 --> 00:22:20,990
patch out for this issue so in just a
few minutes I have last I also want to

275
00:22:20,990 --> 00:22:26,350
just kind of reflect on why this attack
works like I said this bypass works even

276
00:22:26,350 --> 00:22:30,370
in Windows 2000 this is something that's
always been part of the protocol and the

277
00:22:30,370 --> 00:22:36,629
way it works and when this thing was
designed back in to thousands

278
00:22:36,630 --> 00:22:43,610
physical access was total access full
disk encryption wasn't commonplace and I

279
00:22:43,610 --> 00:22:47,379
don't think this kind of a threat model
existed as part of the protocol design

280
00:22:47,380 --> 00:22:51,940
where you can physically access key
workstation and the network and you

281
00:22:51,940 --> 00:22:55,860
control the DEC and somehow you're still
attacking the local machine that wasn't

282
00:22:55,860 --> 00:23:02,060
part of the threat model but as I said
in the keynote yesterday we need to

283
00:23:02,060 --> 00:23:07,450
reexamine all truth threat models change
and this is a perfect example where old

284
00:23:07,450 --> 00:23:10,540
assumptions don't apply anymore so

285
00:23:10,540 --> 00:23:16,149
so I think that's just a good lesson in
this context and others to remember so

286
00:23:16,150 --> 00:23:23,420
these are the black hat sound bites for
the talk there is a defects in Windows

287
00:23:23,420 --> 00:23:27,580
domain authentication which means bit
longer under the right conditions can be

288
00:23:27,580 --> 00:23:32,560
totally bypassed all these protections
gone but there is an update that fixes

289
00:23:32,560 --> 00:23:37,490
this so Pacha machines that's always
remember security right

290
00:23:37,490 --> 00:23:43,460
deploy updates and then the last point
that models change so you need to

291
00:23:43,460 --> 00:23:47,620
constantly be re-evaluating all
decisions and I think that's also anyway

292
00:23:47,620 --> 00:23:50,879
good news for us cuz I think it means
that we're never going to be done with

293
00:23:50,880 --> 00:23:56,160
our work so there's always a job for us
so that's it there's about five minutes

294
00:23:56,160 --> 00:24:05,539
for questions if you guys have them
thank you for coming

295
00:24:05,539 --> 00:24:27,119
local cash and yes it is that means that
you have to contact the domain

296
00:24:27,119 --> 00:24:31,320
controller so it means that there is no
way to take a laptop to a coffee shop

297
00:24:31,320 --> 00:24:35,470
and then be able to log into its you can
take it to a conference standing on a

298
00:24:35,470 --> 00:24:51,330
trip so it is possible but most people
don't because of that reason yes there's

299
00:24:51,330 --> 00:24:55,309
any special consideration for setting up
the domain controller other than the

300
00:24:55,309 --> 00:25:00,408
domain name and the Katie SERO matching
know you just have to type in those

301
00:25:00,409 --> 00:25:06,729
right things that you sort of yeah user
account domain has to match that's it I

302
00:25:06,729 --> 00:25:10,950
didn't have to patch songbird all when I
first started down this project I was

303
00:25:10,950 --> 00:25:14,289
patching sama all over the place it
always reply yeah that's right password

304
00:25:14,289 --> 00:25:18,299
yeah you got it right and then I found
out that in have to do any of that it is

305
00:25:18,299 --> 00:25:28,279
a completely off the shelf are you
saying I don't see any other questions

306
00:25:28,279 --> 00:25:35,660
I'm gonna be around if there's one yes

307
00:25:35,660 --> 00:25:48,270
see if I can break the door now now they
know about the issue so gonna be harder

308
00:25:48,270 --> 00:25:51,379
I'm gonna be around if people have other
questions

