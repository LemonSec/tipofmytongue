1
00:00:00,000 --> 00:00:04,759
hi and thank you for attending the last
session so I'm sure they're very

2
00:00:04,759 --> 00:00:09,830
courageous to stay on till the end of
the conference doesn't show very well

3
00:00:09,830 --> 00:00:13,129
but it's supposed to be the zeroing
picture that initiated this famous man

4
00:00:13,130 --> 00:00:20,550
but ok you can guess what it is so this
is what we're gonna cover to them its

5
00:00:20,550 --> 00:00:24,630
2013 @ talk I'll try to leave some room
for a question

6
00:00:24,630 --> 00:00:28,109
questions and this is what we're going
to address basically I'm gonna introduce

7
00:00:28,109 --> 00:00:32,870
myself very quickly recap what route
means you know on the number of devices

8
00:00:32,870 --> 00:00:37,019
and we did you know they're lightweight
reverse engineering and we'll go through

9
00:00:37,020 --> 00:00:43,469
the talks we used to do that research
and will present her findings and little

10
00:00:43,469 --> 00:00:49,590
tool that we build for us to help us
analyze these these applications so this

11
00:00:49,590 --> 00:00:52,980
is a drawing paper between me and my
other colleagues at Symantec research

12
00:00:52,980 --> 00:00:58,519
labs we've been involved mostly an
academic conference

13
00:00:58,520 --> 00:01:04,290
our first publication of black hat and
yeah we're involved in you know cloud

14
00:01:04,290 --> 00:01:08,880
security binary dynamic analysis
technology is all the good things that's

15
00:01:08,880 --> 00:01:15,509
what we do in our daily work so the
context of this presentation is how many

16
00:01:15,509 --> 00:01:22,040
of you are using personal devices for
corporate use and while less than

17
00:01:22,040 --> 00:01:29,530
expected but it's it seems to be a very
big trend especially you know iOS and I

18
00:01:29,530 --> 00:01:33,090
mean specially on Android iOS is still
not the first citizen corporate

19
00:01:33,090 --> 00:01:37,549
environment that's going there and if
you look at the market research that's

20
00:01:37,549 --> 00:01:41,360
not my number they said that about 70%
of the devices are running under it so

21
00:01:41,360 --> 00:01:47,340
that's that's kind of a big market to
address and somehow ruth has a bad

22
00:01:47,340 --> 00:01:51,880
reputation and if you've read the news
the last I think those two weeks ago or

23
00:01:51,880 --> 00:01:55,890
last week look out but there's something
about new malware that we're leveraging

24
00:01:55,890 --> 00:02:00,619
route exploits to you know inserted
themselves so deep in the system that

25
00:02:00,619 --> 00:02:05,659
one of their condition was buying you
devised to show it was pretty funny

26
00:02:05,659 --> 00:02:11,980
so ruth has a bad reputation for you
know that it resumes and when we started

27
00:02:11,980 --> 00:02:16,849
to look at it we asked ourselves these
questions so what does it do you know

28
00:02:16,849 --> 00:02:20,980
how many applications actually check for
root of course you have you know candy

29
00:02:20,980 --> 00:02:24,369
crush maybe or you know other types of
games that are worried that you're going

30
00:02:24,370 --> 00:02:30,120
to hike their inhabits is probably not
the most interesting use case for us

31
00:02:30,120 --> 00:02:35,530
because we wanted to see you know we we
thought that the guys better position

32
00:02:35,530 --> 00:02:39,430
best position to address and and look
for roots traces on the phone would be

33
00:02:39,430 --> 00:02:45,079
security vendors and you're not aware we
are security vendor as well

34
00:02:45,079 --> 00:02:53,049
small one and wanted to see how good
this checks we're so and after that we

35
00:02:53,049 --> 00:02:57,340
wanted to see ok now that we know how
these checks word how easy is it to

36
00:02:57,340 --> 00:03:01,780
subvert these checks and to make an
application believe that your device is

37
00:03:01,780 --> 00:03:06,519
not rooted while it in fact is and the
way we looked at it we wanted to compare

38
00:03:06,519 --> 00:03:12,200
security vendors so I think about AV
Solutions and most of these vendors they

39
00:03:12,200 --> 00:03:15,958
also provide the bring-your-own-device
solution that is the corporate version

40
00:03:15,959 --> 00:03:21,010
or the enterprise and wanted to compare
this to products ideally from the same

41
00:03:21,010 --> 00:03:25,399
company and see if they do the same
thing they have the same concerns if

42
00:03:25,400 --> 00:03:30,160
they do something more complicated than
a month and of course wanted to see

43
00:03:30,160 --> 00:03:35,168
we're very curious to see how people
were doing it so the way we started this

44
00:03:35,169 --> 00:03:40,660
work is we looked at our own product the
consumer product and we saw the checks

45
00:03:40,660 --> 00:03:47,560
they were doing we are a bit surprised
and we decided to check the state of the

46
00:03:47,560 --> 00:03:52,400
industry we were wondering if we were
only did you know that student or if

47
00:03:52,400 --> 00:03:58,980
everybody was doing same luckily for us
you'll see that we're not doing so so

48
00:03:58,980 --> 00:04:04,629
device you guys are Windows user it's
the administrator there it's a super it

49
00:04:04,629 --> 00:04:08,179
stands for superuser and the way it
works and under it so if you have your

50
00:04:08,180 --> 00:04:11,620
Linux system you just involve the school
you know superuser binary you get your

51
00:04:11,620 --> 00:04:16,959
prompt with a sharp and then you can go
crazy from there on that varied slightly

52
00:04:16,959 --> 00:04:18,940
different so personal

53
00:04:18,940 --> 00:04:23,280
root your device that process basically
means you're gonna have an exploit this

54
00:04:23,280 --> 00:04:26,440
sucks blood is going to basically
dropped a superuser by nerdy compulsory

55
00:04:26,440 --> 00:04:30,530
architecture put it at the right place
for exporters in your path environment

56
00:04:30,530 --> 00:04:34,859
variable that you can access it from
anywhere and the way you invoke it is

57
00:04:34,860 --> 00:04:38,950
it's tied to a route management
application and so it's a six-step

58
00:04:38,950 --> 00:04:42,880
process that's a pretty complex process
with command of the root user on

59
00:04:42,880 --> 00:04:46,790
underage so basically you have an
application that invokes the superuser

60
00:04:46,790 --> 00:04:53,160
binary and the superuser battery
basically will send the requested time

61
00:04:53,160 --> 00:04:57,320
because an underage everything is intent
that's basically a glorified APC

62
00:04:57,320 --> 00:05:01,200
communication and management application
is going to register a broadcast

63
00:05:01,200 --> 00:05:06,870
receiver and that is going to verify
police you whether you allow this

64
00:05:06,870 --> 00:05:11,500
application to execute a command as root
user and then it's going to you know

65
00:05:11,500 --> 00:05:15,390
tell you yes or no and Indian the
command is going to be forwarded to us

66
00:05:15,390 --> 00:05:19,120
with a man and his demon executive
comment for you and returns back to

67
00:05:19,120 --> 00:05:22,870
results last part of Pseudomonas
something new that has been introduced

68
00:05:22,870 --> 00:05:30,370
for a rooted device is after I think it
capped or 4.1% for many ways so that

69
00:05:30,370 --> 00:05:36,850
that's basically how rooted devices and
the route command that's how it works so

70
00:05:36,850 --> 00:05:41,600
before we go a little bit you know the
results we have to go quickly over

71
00:05:41,600 --> 00:05:47,169
what's an application of course we don't
have access to the source code of all

72
00:05:47,169 --> 00:05:52,070
the security vendors besides ours and we
decided to basically pull up information

73
00:05:52,070 --> 00:05:54,800
from the Android Marketplace and look at
it

74
00:05:54,800 --> 00:06:01,190
reverse engineering and luckily for us I
mean under it is very easy to reverse

75
00:06:01,190 --> 00:06:06,870
you have several layers but basically
it's it's it's java-based it's compiled

76
00:06:06,870 --> 00:06:11,630
into a set of classes and you have
resources and all the classes get back

77
00:06:11,630 --> 00:06:15,690
edge into a text format that gets
interpreted by adopting the end it's

78
00:06:15,690 --> 00:06:22,890
basically story apk container that is
again a glorified format you can just

79
00:06:22,890 --> 00:06:26,460
unzip it and you can see the content of
the file and the analogy if you're

80
00:06:26,460 --> 00:06:30,359
running iOS that would be an ipa file

81
00:06:30,360 --> 00:06:36,830
so the good thing is that you get a job
has been there for a long time and

82
00:06:36,830 --> 00:06:42,090
there's a lot of tools that can be used
on July code and the way and rebuilds

83
00:06:42,090 --> 00:06:45,810
its they basically say change a little
bit the semantics of the bytecode and it

84
00:06:45,810 --> 00:06:51,590
tells us to use most of the existing
tools for Java so that's when you end up

85
00:06:51,590 --> 00:06:57,400
an application for a hundred that's what
you get and so you have the manifest

86
00:06:57,400 --> 00:07:01,299
file you have the the classes that
contains a package contains all the set

87
00:07:01,300 --> 00:07:04,710
of classes that are going to be used by
the application you have the resources

88
00:07:04,710 --> 00:07:08,000
think about like you know the
application it's to run on multiple

89
00:07:08,000 --> 00:07:11,919
screen multiple resolutions whether he
will be stored in there and then you

90
00:07:11,919 --> 00:07:15,770
have a bunch of you know signatures and
hashes to make sure that the integrity

91
00:07:15,770 --> 00:07:20,378
of the application is still maintained
when you install an executive and

92
00:07:20,379 --> 00:07:25,650
sometimes you will see this folder so
this new poll there is using wu's

93
00:07:25,650 --> 00:07:32,029
compiled code that would be a difficult
C C++ and that will be in there and you

94
00:07:32,029 --> 00:07:35,529
can have several folders for different
architectures that the application

95
00:07:35,529 --> 00:07:42,409
supposed to support so this is just want
to stress that it's not rocket science

96
00:07:42,409 --> 00:07:47,360
so these are the tools that we use for
our investigation and so the first one

97
00:07:47,360 --> 00:07:52,020
converts the underwritten by could put
another format that is the Java archive

98
00:07:52,020 --> 00:07:56,270
format the reason we do that is to be
able to leverage the second tool that is

99
00:07:56,270 --> 00:08:02,650
Jay décor that basically recovers you
know these Java archive format basically

100
00:08:02,650 --> 00:08:07,250
by code into source code and that's a
good thing that's a good thing jedis

101
00:08:07,250 --> 00:08:16,219
strange manipulation but in cases where
we couldn't recover the full source code

102
00:08:16,219 --> 00:08:22,330
we basically use a potato and apk tool
gives you these intermediate format that

103
00:08:22,330 --> 00:08:27,878
is smelly which is only for Java very
high-level assembly but you can play

104
00:08:27,879 --> 00:08:34,550
with her just above use and all the good
stuff you do with somebody and of course

105
00:08:34,549 --> 00:08:39,000
we we are very lazy want the computer at
work for us so we build a lot of lube

106
00:08:39,000 --> 00:08:43,789
codes so these are the custom scripts
that that do all the processing for us

107
00:08:43,789 --> 00:08:54,220
so now we're gonna go into the into the
the results of our analysis we pulled a

108
00:08:54,220 --> 00:08:59,290
bunch of Apeejay we're gonna go through
all the applications that we downloaded

109
00:08:59,290 --> 00:09:04,319
and the vendors we we looked at so the
first one is presence of files you

110
00:09:04,320 --> 00:09:12,170
remember what I told you that basically
when you when your super user when you

111
00:09:12,170 --> 00:09:16,540
your devices would you will have the
superuser binary some wire and some

112
00:09:16,540 --> 00:09:22,490
people realize that yeah I must exploits
like the oral route all the big exploits

113
00:09:22,490 --> 00:09:29,190
the basically just the superuser binary
into system being or ex being and that's

114
00:09:29,190 --> 00:09:33,250
where it is and some people actually
just look whether the banner is in there

115
00:09:33,250 --> 00:09:38,839
and the issue of course that command and
this they assume that your device is

116
00:09:38,839 --> 00:09:45,290
obviously you just move the binary
somewhere else and that's a device is

117
00:09:45,290 --> 00:09:51,560
not going to some people realize that
there are some smart people out there

118
00:09:51,560 --> 00:09:57,649
that would use that I mean so sure under
normal operating system you have

119
00:09:57,649 --> 00:10:01,610
environment you know we will have a set
of environment variable that you can

120
00:10:01,610 --> 00:10:06,329
call from anywhere you know during your
current path and this is what these guys

121
00:10:06,329 --> 00:10:10,680
are doing that basically check all the
environment variable in your system and

122
00:10:10,680 --> 00:10:16,589
they took it over each of these paths
and they open the port / superuser and

123
00:10:16,589 --> 00:10:20,660
for each of these paths they check
whether you have the superuser buying

124
00:10:20,660 --> 00:10:27,319
again that's very naive way to to use it
because you could just not export the

125
00:10:27,320 --> 00:10:30,870
superuser binary because you don't feel
like you need it everytime everywhere

126
00:10:30,870 --> 00:10:35,010
from you know everyone in your system
and you could just woke up with the full

127
00:10:35,010 --> 00:10:40,490
but yourself and that's what these guys
are actually checking for some people

128
00:10:40,490 --> 00:10:45,120
when the laser on this young that it's a
Linux system so you have this wonderful

129
00:10:45,120 --> 00:10:47,910
which command that basically tells you
which

130
00:10:47,910 --> 00:10:52,790
which minor you're actually running by
giving you returning to the full path if

131
00:10:52,790 --> 00:10:56,439
you get a few spy pond and you didn't
use you know the way to fight an

132
00:10:56,440 --> 00:10:57,900
ombudsman under environment

133
00:10:57,900 --> 00:11:02,310
views which a lot of time to
differentiate between Python 2.7 and

134
00:11:02,310 --> 00:11:08,579
three point X and some people were given
you know they weren't even simpler that

135
00:11:08,580 --> 00:11:13,060
basically just run the superuser binary
and they check the return code of the

136
00:11:13,060 --> 00:11:20,020
subprocess so if it was able to run then
they assume that your devices and again

137
00:11:20,020 --> 00:11:24,640
this is the same as checking if it's in
the environment variable and some people

138
00:11:24,640 --> 00:11:29,220
realize that if you go back again to the
first pitcher that will have a device

139
00:11:29,220 --> 00:11:34,830
rooted you up in general you need you
know the route management application

140
00:11:34,830 --> 00:11:41,310
and they actually checking for one of
them are checking for superuser apk and

141
00:11:41,310 --> 00:11:45,189
they're checking if you have that you're
definitely route which is again a very

142
00:11:45,190 --> 00:11:48,970
involved check because any of you
without having your device radio

143
00:11:48,970 --> 00:11:53,260
absolutely install this application you
could download it you're not going to do

144
00:11:53,260 --> 00:11:56,250
anything with it but you're gonna have
it and they will detect that your

145
00:11:56,250 --> 00:12:03,820
devices so some people they're checking
for binaries with this said the said the

146
00:12:03,820 --> 00:12:08,860
new idea which again you can have you
can have minor is that have this bit set

147
00:12:08,860 --> 00:12:12,070
but that doesn't mean your device is
rooted you could have it for other

148
00:12:12,070 --> 00:12:18,600
reasons but again doesn't mean your
device and some people they check so

149
00:12:18,600 --> 00:12:21,610
that the first one to check for the
route management applications they're

150
00:12:21,610 --> 00:12:27,330
doing it by looking at the Pats and some
people are using the API so underrated

151
00:12:27,330 --> 00:12:32,050
the SDK provides you an API that you can
call and this API can return your the

152
00:12:32,050 --> 00:12:36,589
set of you know the packages that you
have installed on your system and the

153
00:12:36,590 --> 00:12:39,690
check you have one of them you
definitely worth it

154
00:12:39,690 --> 00:12:45,130
which again not true and some people
there you know an underage you can exact

155
00:12:45,130 --> 00:12:49,270
you can execute command shell commands
and you have these p.m. least I can just

156
00:12:49,270 --> 00:12:52,790
that cool you know if you run the
terminology message to your phone you

157
00:12:52,790 --> 00:12:55,530
can run that in the tells you the list
of applications that you have installed

158
00:12:55,530 --> 00:12:59,640
and that's that's how some people are
doing

159
00:12:59,640 --> 00:13:04,170
that's what we call general do I said
thanks

160
00:13:04,170 --> 00:13:08,300
some people are verifying what testes or
what she's are you have in your

161
00:13:08,300 --> 00:13:12,240
environment so we have a bunch of
strings like the kernel version the

162
00:13:12,240 --> 00:13:16,730
kernel name and all of that and people
are checking whether you have these skis

163
00:13:16,730 --> 00:13:23,470
and if you have this test is your
potential but again that as it is you

164
00:13:23,470 --> 00:13:26,830
have released you could have a release
yourself if you build your own version

165
00:13:26,830 --> 00:13:29,750
of underage you could sign we could
release keys and you could have the

166
00:13:29,750 --> 00:13:34,070
superuser banner in there doesn't mean
you know doesn't mean you're not relate

167
00:13:34,070 --> 00:13:38,750
so again these are very freaky shit
checks that these people are doing and

168
00:13:38,750 --> 00:13:41,550
you have another bunch of strings that
you can get from hundreds specifically

169
00:13:41,550 --> 00:13:48,520
like the version of the OS two have and
if you have custom wrongs which you've

170
00:13:48,520 --> 00:13:55,230
installed cyanogen people are checking
basically the checks that we encounter

171
00:13:55,230 --> 00:14:04,800
in the wild they were checking on the
for the presence of this specific 400 so

172
00:14:04,800 --> 00:14:09,870
that's that's slightly more interesting
because now we've encountered all of

173
00:14:09,870 --> 00:14:15,720
these were pretty easy checks nothing
really rocket signs some people are

174
00:14:15,720 --> 00:14:22,000
doing some things slightly smarter and
if you remember when you have when you

175
00:14:22,000 --> 00:14:27,270
root your device you need to drop the
battery somewhere and the preffered you

176
00:14:27,270 --> 00:14:34,010
know the preferred path to put it would
be in system or systems so that happened

177
00:14:34,010 --> 00:14:37,640
your exploit need to be able to mount
the partition as read write draw the

178
00:14:37,640 --> 00:14:42,770
banner in there and usually they will
return back the permission to read only

179
00:14:42,770 --> 00:14:49,449
but some people figure in that sometimes
you may have the partition as wanted as

180
00:14:49,450 --> 00:14:57,120
as Read Write again my experience not
not really a very good check and some

181
00:14:57,120 --> 00:15:01,560
people they don't even check the results
of the month that some people check

182
00:15:01,560 --> 00:15:04,219
their result of the month to month some
people just tried to create the file in

183
00:15:04,220 --> 00:15:08,680
there just to see if it you know if it
works and it works obviously you have

184
00:15:08,680 --> 00:15:12,790
access to the system partition and
obviously that's that's an indication

185
00:15:12,790 --> 00:15:21,630
devise another checks that that we've
encountered was the check for the user

186
00:15:21,630 --> 00:15:26,550
IDs so under Linux everything is so you
have a user aidid the user ID of the

187
00:15:26,550 --> 00:15:30,540
Lord more privileged and obviously
people were checking if you had the user

188
00:15:30,540 --> 00:15:37,780
IDs 0 under there's a very complicated
execution process if you wanna run

189
00:15:37,780 --> 00:15:42,689
application on the command line but
yourself you have like millions of

190
00:15:42,690 --> 00:15:46,750
arguments to be able to launch desire
growth as I got is going to the process

191
00:15:46,750 --> 00:15:50,390
you have the app process so and
basically every time you run the

192
00:15:50,390 --> 00:15:55,090
application gets a new user idea
randomized user ID that is never closed

193
00:15:55,090 --> 00:16:03,390
20 even if your route that so again very
curious check out and I must admit that

194
00:16:03,390 --> 00:16:08,770
I've only played with weave under a
four-under both so maybe in Gingerbread

195
00:16:08,770 --> 00:16:16,560
that was a thing about but maybe so
anyway this is this is pretty much the

196
00:16:16,560 --> 00:16:22,160
check that we've encountered and all of
that without doing any dynamic analysis

197
00:16:22,160 --> 00:16:28,459
so all of that was doing static analysis
is pulling the apks be compiling doing

198
00:16:28,460 --> 00:16:33,840
some smart search for a bunch of strings
that would be in their most of them are

199
00:16:33,840 --> 00:16:43,350
not obligated or very likely so now
these are the results of this is where

200
00:16:43,350 --> 00:16:49,330
the industry standard these days I'm not
I'm not speak for not gonna bash much

201
00:16:49,330 --> 00:16:54,490
the other companies but paying for
ourselves we were very surprised that we

202
00:16:54,490 --> 00:17:00,440
were just checking for the superuser
binary in a very specific by so at least

203
00:17:00,440 --> 00:17:06,020
we got 11 check so that the number of
the column and there doesn't represent

204
00:17:06,020 --> 00:17:11,920
the number of checks exactly it's the
number of type of checks so we're doing

205
00:17:11,920 --> 00:17:17,150
on the one type of check checking if the
batteries in the specific role there

206
00:17:17,150 --> 00:17:25,530
and this is for the consumer versions of
these products so you can see that some

207
00:17:25,530 --> 00:17:31,270
people some companies they don't bother
to check this room that cares if you

208
00:17:31,270 --> 00:17:36,310
rooted you probably wanted it so it's
not very important and I have to say

209
00:17:36,310 --> 00:17:39,139
that some people are doing a better job
than others

210
00:17:39,140 --> 00:17:45,590
Kaspersky for example we're checking for
they were taking their parolee what

211
00:17:45,590 --> 00:17:54,169
people were doing so but but there was
an interesting bit i think is is that

212
00:17:54,170 --> 00:17:58,960
there was a you know that there's a
company that decided that you know what

213
00:17:58,960 --> 00:18:03,160
you did well as well give you a new
features and other sexually leverages

214
00:18:03,160 --> 00:18:07,320
the route future to provide you a
personal firewall switch installed on

215
00:18:07,320 --> 00:18:11,590
your phone you can have the firewall and
the way it works guys I've tried to

216
00:18:11,590 --> 00:18:17,750
build a VPN osorio you know the firewall
on Android it's pretty nasty so you have

217
00:18:17,750 --> 00:18:23,020
to find you know your own VPN interface
redirect all the traffic to this local

218
00:18:23,020 --> 00:18:27,430
VPN interface and you have to have the
mapping we've done process you know

219
00:18:27,430 --> 00:18:31,910
process IDM socket file descriptors and
then you need to recreate the IP headers

220
00:18:31,910 --> 00:18:39,040
and you just how I P table so now I
understand why they do it pretty pretty

221
00:18:39,040 --> 00:18:45,470
easy saves your life we are very
disappointed because nobody was using

222
00:18:45,470 --> 00:18:50,650
nature's code for the detection nobody
in the consumer versions of their

223
00:18:50,650 --> 00:18:57,400
product and our framework so they're
called root clock and I think that using

224
00:18:57,400 --> 00:19:03,170
exposed and basically decent this
application allows you to cloak the

225
00:19:03,170 --> 00:19:08,150
state of your device to pretend that
your device is not true that and all the

226
00:19:08,150 --> 00:19:11,210
application out there you could run
route clock and pretend that your device

227
00:19:11,210 --> 00:19:17,740
was not approved it so interesting thing
we've Kaspersky check swear that they

228
00:19:17,740 --> 00:19:22,420
were actually doing we had to review the
results are manually because they were

229
00:19:22,420 --> 00:19:27,460
they were using reflection so we had to
dig a little bit deeper to identify what

230
00:19:27,460 --> 00:19:28,510
kind of checks that were doing

231
00:19:28,510 --> 00:19:35,030
so and then when we saw that we're
pretty disappointed and we figured that

232
00:19:35,030 --> 00:19:37,970
must be the consumer version there's no
money to make their some people are

233
00:19:37,970 --> 00:19:41,650
actually you know focusing on the very
hard problem of protecting corporate

234
00:19:41,650 --> 00:19:48,260
data not really if you look at the
results you still have provided bring

235
00:19:48,260 --> 00:19:54,160
your own device solutions that do not
check whether your devices at all that's

236
00:19:54,160 --> 00:19:58,010
pretty scary if you think about you
having or corporate email your device is

237
00:19:58,010 --> 00:20:01,540
rooted whether you chose to root your
device or not but you cannot ensure

238
00:20:01,540 --> 00:20:07,149
integrity of something that is on the
device when and you don't even check it

239
00:20:07,150 --> 00:20:10,130
out so some solution would basically
check if your device is rooted and then

240
00:20:10,130 --> 00:20:17,290
put you out of the network or won't
allow you to connect to VPN and so again

241
00:20:17,290 --> 00:20:25,590
pretty disappointing results for the
whole industry and the US have some self

242
00:20:25,590 --> 00:20:29,709
introspection we're doing also check her
doing the exact same check on the

243
00:20:29,710 --> 00:20:35,530
consumer version and the Enterprise
version yummy I'm not nothing really

244
00:20:35,530 --> 00:20:39,370
stand out in there except IBM IBM we're
doing very very good checks they're

245
00:20:39,370 --> 00:20:46,949
checking for every possible cases
however they're doing in your texts were

246
00:20:46,950 --> 00:20:52,170
doing it in Java so you can have read
the section mechanism but if anybody can

247
00:20:52,170 --> 00:20:59,860
reverse it is not that good so only to
companies that were actually using

248
00:20:59,860 --> 00:21:07,459
medical so watch was using they had
their nvm agenda if you open you know

249
00:21:07,460 --> 00:21:09,850
should come by the application and your
own pocket

250
00:21:09,850 --> 00:21:15,689
you could see that there was a shared
object and arm chair object in the one

251
00:21:15,690 --> 00:21:19,590
we looked at however there's no string
up his station there's no packing

252
00:21:19,590 --> 00:21:24,340
there's no you could not even like
integrity checking on the banner itself

253
00:21:24,340 --> 00:21:29,030
so you could just not some sections and
the buyer would would run fine and the

254
00:21:29,030 --> 00:21:33,030
bulk of the checks were in the get
device state method that gets reported

255
00:21:33,030 --> 00:21:39,350
back to a to the mothership assume again
they're easy to reverse the other the

256
00:21:39,350 --> 00:21:40,830
other one was excited there

257
00:21:40,830 --> 00:21:48,029
they had a library as well you know you
open the binary in either operand in

258
00:21:48,029 --> 00:21:56,090
like five minutes you can find the check
for them there's no checks ok there's

259
00:21:56,090 --> 00:21:59,428
only one where its controversial because
I've been on their website and they

260
00:21:59,429 --> 00:22:04,799
claimed they do have a way to check for
jailbroken devices which I assume they

261
00:22:04,799 --> 00:22:11,029
would do also 404 rooted devices is that
these the way these solutions work is

262
00:22:11,029 --> 00:22:14,370
that they have a backend that the
administrator provision with a set of

263
00:22:14,370 --> 00:22:17,760
policies and maybe there's a way to
provision the policy where you could

264
00:22:17,760 --> 00:22:23,010
likely slattery's or indicator of
compromise again IBM did a very good job

265
00:22:23,010 --> 00:22:29,309
application at all even on the job on
the native code so fairly trivial to

266
00:22:29,309 --> 00:22:37,850
recover the content so as I told you we
we did most of that study but except for

267
00:22:37,850 --> 00:22:43,939
Kaspersky where we had to actually look
why sometimes where you know we didn't

268
00:22:43,940 --> 00:22:49,279
see what we expected so we we basically
need to to to to do some dynamic

269
00:22:49,279 --> 00:22:55,789
analysis and we use this tool in other
in another context so we build a tool

270
00:22:55,789 --> 00:23:01,110
that's basically you build a library you
inject it and if you think about Linux

271
00:23:01,110 --> 00:23:07,330
that's that's how it works you can you
can inject the library and symbol that

272
00:23:07,330 --> 00:23:10,730
is in this library will be called first
before going to sleep sees what you

273
00:23:10,730 --> 00:23:16,500
think about printf print that gets
patched into leap seeing that in our

274
00:23:16,500 --> 00:23:20,330
case we shall be pre-loaded fellows our
symbol to be first and then we could

275
00:23:20,330 --> 00:23:28,320
hook printf and other functions so the
way it works on Android as I told you to

276
00:23:28,320 --> 00:23:32,460
launch an application it's a bit of a
nightmare to do it manually so you have

277
00:23:32,460 --> 00:23:36,279
this this set of you know that
properties said prob and you can set

278
00:23:36,279 --> 00:23:41,409
properties for different packages and
here we basically said the property to

279
00:23:41,409 --> 00:23:46,710
have led preloaded on our application
that runs our shared object built for

280
00:23:46,710 --> 00:23:48,710
the platform and again

281
00:23:48,710 --> 00:23:53,970
library who can fairly easy so basically
you have a pointer to the real function

282
00:23:53,970 --> 00:23:58,480
that is stored in the obscene and then
you create your own implementation you

283
00:23:58,480 --> 00:24:03,180
do what you want and then you return the
results of your implementation or you

284
00:24:03,180 --> 00:24:08,740
can return the result and call actually
the real implementation BBC and here we

285
00:24:08,740 --> 00:24:16,040
did something very simple we check if if
open concerns the superuser binary and

286
00:24:16,040 --> 00:24:20,230
if it's if it tries to open it we say no
it doesn't exist

287
00:24:20,230 --> 00:24:23,890
believe it or not that's very simple but
that that can be shipped a lot of a lot

288
00:24:23,890 --> 00:24:31,320
of checks again we are used this tool
for a different purpose just to show you

289
00:24:31,320 --> 00:24:35,040
that you know you're interested library
who can you still still alive it's an

290
00:24:35,040 --> 00:24:39,370
old technique but it still working on
underage and you can have fun we we came

291
00:24:39,370 --> 00:24:43,229
across not in this project across binary
that they're doing self-protection

292
00:24:43,230 --> 00:24:49,850
verifying if they're not being traced or
being debugged or modified so the way

293
00:24:49,850 --> 00:24:54,219
you do it at least the ones we've
encountered in the wild again they're

294
00:24:54,220 --> 00:24:58,580
basically tried to protecting the
process of being traced them the wait is

295
00:24:58,580 --> 00:25:02,080
on Linux you can basically each process

296
00:25:02,080 --> 00:25:09,250
exposed some information like memory
pages memory allocation stock values and

297
00:25:09,250 --> 00:25:14,050
then you have the stressor p value that
tells you the PID of the process that is

298
00:25:14,050 --> 00:25:18,720
tracing you obviously want to see zero
so that means nobody's tracing you so

299
00:25:18,720 --> 00:25:23,360
what we need to do because it's you know
we need to identify the file descriptor

300
00:25:23,360 --> 00:25:28,459
of the status file for your process and
then every time we encounter a call or

301
00:25:28,460 --> 00:25:33,480
not been called for at least 40 suffer
the script there remains a key override

302
00:25:33,480 --> 00:25:37,810
the value of the tracer bid 20 to say
that you know that processes funds not

303
00:25:37,810 --> 00:25:42,409
being traced so

304
00:25:42,410 --> 00:25:53,520
this is for some question but that was
pretty well for us and that's that's why

305
00:25:53,520 --> 00:26:00,230
you know the type of the presentation
but really it seems like the whole

306
00:26:00,230 --> 00:26:03,990
industry is doing a poor job at
verifying whether devices with it and

307
00:26:03,990 --> 00:26:09,430
and it's it's a very big concern so some
people have no checks on their consumer

308
00:26:09,430 --> 00:26:15,120
version but they had to check on their
enterprise version semantics and

309
00:26:15,120 --> 00:26:19,929
Kaspersky we have the exact same checks
but I think he had a different bill

310
00:26:19,930 --> 00:26:24,590
system because on the which is hardly
enough in the consumer version they used

311
00:26:24,590 --> 00:26:30,939
reflection they you know the impact this
text files on the fly at runtime and it

312
00:26:30,940 --> 00:26:35,020
was already unpacked under the
Enterprise version so probably a

313
00:26:35,020 --> 00:26:38,260
different build system or some something
or somebody screwed up at some point

314
00:26:38,260 --> 00:26:44,420
some other company had absolutely no
root checks and must have the solutions

315
00:26:44,420 --> 00:26:48,240
that we've seen out there they're
they're vulnerable to root clock and the

316
00:26:48,240 --> 00:26:53,740
exposed framework and of course we you
know we benchmark out where you know our

317
00:26:53,740 --> 00:26:59,270
solution because our tool is an 80
events and replug basically is that the

318
00:26:59,270 --> 00:27:04,389
middleware level with injects dark
glasses and who dis functions but that's

319
00:27:04,390 --> 00:27:08,390
as soon as you know gnite native
interface call you can you cannot

320
00:27:08,390 --> 00:27:13,750
interpose on that so I worked all those
at the lower level hence the results

321
00:27:13,750 --> 00:27:20,990
ok now you have to believe me that we
learned a lot from that investigation

322
00:27:20,990 --> 00:27:25,410
and obviously we you know we stepped up
our name and we we made a lot of

323
00:27:25,410 --> 00:27:28,460
improvement in our room protection if
you don't believe me in a few months you

324
00:27:28,460 --> 00:27:32,610
can download the new consumer version of
you know one of our product and

325
00:27:32,610 --> 00:27:36,830
obviously the the checks are going to be
much better but on top of that instead

326
00:27:36,830 --> 00:27:41,300
of just doing the checks need to believe
that is you know making the reverser

327
00:27:41,300 --> 00:27:46,389
life a little bit harder you still need
to this by now you've heard the name so

328
00:27:46,390 --> 00:27:50,910
if you do packing and less using a very
custom you know very known packer like

329
00:27:50,910 --> 00:27:55,540
UPX and everybody can just click a
button and i cant that's that's making

330
00:27:55,540 --> 00:27:55,860
it the

331
00:27:55,860 --> 00:28:01,189
little bit harder you should do a string
encryption again you know the number of

332
00:28:01,190 --> 00:28:04,920
people that can do it it's much harder
and if you do software self check

333
00:28:04,920 --> 00:28:09,650
something yeah it's still I think
there's some research that prove that

334
00:28:09,650 --> 00:28:14,429
its defeat the ball but it's it's it's
pretty hard and it's it's a few specific

335
00:28:14,429 --> 00:28:21,260
because it needs to its playing with a
TLD cash you know shadow pages anyway so

336
00:28:21,260 --> 00:28:29,740
we did we did a good job we improved our
solutions and hopefully we hope that the

337
00:28:29,740 --> 00:28:32,320
whole industry is going to do a better
job of protecting their customers

338
00:28:32,320 --> 00:28:36,889
because that's that's scary and I run a
rooted device as well so I'm I feel

339
00:28:36,890 --> 00:28:42,750
concern and we we actually did the same
kind of investigation using machine

340
00:28:42,750 --> 00:28:46,510
learning because our solution that sits
on your phone

341
00:28:46,510 --> 00:28:52,450
collects data and send it back we
actually explore new way basically just

342
00:28:52,450 --> 00:28:57,210
analyzing the data to identify with the
set of features we have about seventy

343
00:28:57,210 --> 00:29:00,400
features and we're using ensemble
machine learning and we're able to

344
00:29:00,400 --> 00:29:05,419
detect that a divisive roberta not we're
publishing that work and maybe trust

345
00:29:05,419 --> 00:29:08,850
fund is another way to go forward
because even though you have software

346
00:29:08,850 --> 00:29:13,409
self check timing you still running on
an untrusted platform and arm provides

347
00:29:13,410 --> 00:29:18,530
your way to basically run things into a
secure online and think about 2 p.m. for

348
00:29:18,530 --> 00:29:25,149
mobile so that I'm done and if you guys
have any questions

349
00:29:25,150 --> 00:29:29,440
go ahead yes

350
00:29:29,440 --> 00:30:13,870
that's a very very tough game that's why
I think that might be solutions we've

351
00:30:13,870 --> 00:30:19,549
tried that and we looked into it but the
API and the limitation of trust on makes

352
00:30:19,549 --> 00:30:26,970
it harder I think you know doesn't
provide a wider API maybe but I really

353
00:30:26,970 --> 00:30:31,360
believe that having a secure company and
is the way to ensure maximum integrity

354
00:30:31,360 --> 00:30:35,070
because currently it's gonna be a
workaround it's going to make it harder

355
00:30:35,070 --> 00:30:51,668
but one more question with a lot of it
but I don't think we can disclose it

356
00:30:51,669 --> 00:30:57,519
right now because I am trying

