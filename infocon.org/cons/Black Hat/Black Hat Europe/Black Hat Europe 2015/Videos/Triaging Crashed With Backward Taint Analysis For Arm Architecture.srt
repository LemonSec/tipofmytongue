1
00:00:00,000 --> 00:00:06,750
good afternoon everyone i'm sorry for
being late so we have developed a set of

2
00:00:06,750 --> 00:00:12,620
tools for a crash analysis of usual
level applications on architecture I'm

3
00:00:12,620 --> 00:00:19,600
going to talk about it I have divided my
talked into five main parts firstly I

4
00:00:19,600 --> 00:00:24,939
will tell you why we started this worry
secondly we'll take a look at the

5
00:00:24,939 --> 00:00:29,830
related to worry and disorderly I will
introduce our approach to build our

6
00:00:29,830 --> 00:00:35,629
tools and then we'll see a little detail
of implementation and finally I will

7
00:00:35,630 --> 00:00:41,710
finish my presentation with a brief
summary before starting I will simply

8
00:00:41,710 --> 00:00:49,110
introduce progenitor as far as to how
you came and he is Kim we are students

9
00:00:49,110 --> 00:00:56,640
from South Korea claims looked very
similar to you but we are not real

10
00:00:56,640 --> 00:01:05,930
brothers thank you let's get down to the
business we want to find the remote code

11
00:01:05,930 --> 00:01:12,540
execution vulnerabilities of the real
world and the readouts targets are that

12
00:01:12,540 --> 00:01:18,470
consumed by the data like five broader
and we are especially interested in

13
00:01:18,470 --> 00:01:26,689
native code they can create that they
can make crash so it's not a big deal to

14
00:01:26,689 --> 00:01:33,939
make targets get crashed by sympathizing
but the problem is death is a very

15
00:01:33,939 --> 00:01:38,729
time-consuming task to analyze crashes
to determine its profitability

16
00:01:38,729 --> 00:01:47,850
let's take a look at across the sample
share price point in order to determine

17
00:01:47,850 --> 00:01:54,048
its credibility we need to find an
instruction after Chris points which can

18
00:01:54,049 --> 00:02:00,969
change the program counter in this case
to register at the press point is under

19
00:02:00,969 --> 00:02:02,000
control

20
00:02:02,000 --> 00:02:07,960
manipulates the program counter to the
show called the next step is to figure

21
00:02:07,960 --> 00:02:12,569
out that out to register is affected by
that user inputs

22
00:02:12,569 --> 00:02:22,170
it is usually performed by a person
manually which takes a long time so we

23
00:02:22,170 --> 00:02:26,589
needed something that can let us know
whether the opportunities effective by

24
00:02:26,590 --> 00:02:33,180
the user input in an automated manner so
we tried to take advantage of any tools

25
00:02:33,180 --> 00:02:38,169
for its but unfortunately there was
nothing that we can use for our proposed

26
00:02:38,169 --> 00:02:48,450
architecture so we have decided to build
our own tools analyses based on dynamic

27
00:02:48,450 --> 00:02:57,168
binary instrumentation our tools should
be easy to use both Android emulator and

28
00:02:57,169 --> 00:03:06,780
device once I what tools to answer these
questions there are two related to the

29
00:03:06,780 --> 00:03:13,579
first one is clean and t he was
presented in 2009 this is for crash

30
00:03:13,579 --> 00:03:20,220
analyses of usual applications on
Windows platform it makes use of paint

31
00:03:20,220 --> 00:03:29,560
analyses it works like this at first it
makes us look first and then performs

32
00:03:29,560 --> 00:03:37,269
backward paint analyses yet whether the
operant

33
00:03:37,269 --> 00:03:42,030
affected by the user inputs or not

34
00:03:42,030 --> 00:03:50,090
consists of two parts we get a tracer
and Frieda ttyl really tracer has been

35
00:03:50,090 --> 00:03:57,310
developed as an extension of windy but
takes advantage of things we need for

36
00:03:57,310 --> 00:04:03,449
staging Tracy Loew into a flyer
including register context of each

37
00:04:03,449 --> 00:04:07,079
instruction

38
00:04:07,079 --> 00:04:14,000
analyses program that takes in the trace
log file and shows a list of

39
00:04:14,000 --> 00:04:23,240
instructions and it allows a user to
choose an instruction to see it comes

40
00:04:23,240 --> 00:04:25,170
from the user inputs

41
00:04:25,170 --> 00:04:31,060
if it turns out that in Potrero operan

42
00:04:31,060 --> 00:04:37,190
shows the instruction change that is
engaged in the data transfer the

43
00:04:37,190 --> 00:04:42,290
drawback we did he is that our user has
to manually figure out the memory or

44
00:04:42,290 --> 00:04:49,840
threats where the input data is loaded
into and enter the range of the program

45
00:04:49,840 --> 00:04:56,119
even though it is just a prototype for a
crash analysis of you just 11

46
00:04:56,120 --> 00:05:03,430
applications on Windows platform we were
inspired by we need t so we consider it

47
00:05:03,430 --> 00:05:13,740
we need to be as our mother the next two
related to eat three it was presented in

48
00:05:13,740 --> 00:05:23,530
2013 and this is also a crash analysis
of user-level applications the principle

49
00:05:23,530 --> 00:05:29,289
of operation is almost as saying we need
to but a clean debt you can support

50
00:05:29,290 --> 00:05:38,100
various architectures three is a program
of IDA Pro so he's entirely based on Ida

51
00:05:38,100 --> 00:05:43,610
and since I dot has the capability of
seeing the stepping on various

52
00:05:43,610 --> 00:05:57,880
architectures 3 just it takes advantage
of teachers read about in the book takes

53
00:05:57,880 --> 00:06:05,820
advantage of single snapping off but I
cannot provide stable instruction

54
00:06:05,820 --> 00:06:12,990
tracing in multithreaded environments on
architecture so three had a limitation

55
00:06:12,990 --> 00:06:21,140
to apply to real targets since there are
no appropriate tools for instruction

56
00:06:21,140 --> 00:06:27,500
tracing in architecture we intended to
build a DVI toll on the scratch there

57
00:06:27,500 --> 00:06:34,250
are two types of TBI the left one works
on our books on the same context of the

58
00:06:34,250 --> 00:06:38,750
target program you can provide
relatively fast instrument

59
00:06:38,750 --> 00:06:44,420
nations but it's not appropriate for
crash analysis because it may produce

60
00:06:44,420 --> 00:06:50,330
unexpected we just in case of memory
access violation on the other hand the

61
00:06:50,330 --> 00:06:56,349
bright line can preserve their target
context so even though it has high

62
00:06:56,350 --> 00:07:05,810
overhead is appropriate for crash on our
analyses so our choices the right one

63
00:07:05,810 --> 00:07:12,430
overview of power tools power tools
consists of two parts on tracer and I'm

64
00:07:12,430 --> 00:07:16,660
in a larger bill rose exactly the same
we need t

65
00:07:16,660 --> 00:07:24,960
picture but there are some challenges in
instruction tracing because

66
00:07:24,960 --> 00:07:31,969
does not support does not support on
those not provide hardware support for

67
00:07:31,970 --> 00:07:40,590
seniors tapping our is known for a trap
black so we have implemented with BBM

68
00:07:40,590 --> 00:07:44,830
that stands for a debug breakpoints
mechanism it requires various

69
00:07:44,830 --> 00:07:51,690
considerations which are not necessary
in intellect picture such as calculating

70
00:07:51,690 --> 00:07:56,219
next PC and handling diagnose a
multithreaded environment and handling

71
00:07:56,220 --> 00:08:04,390
instructions sequence 04 Tony operation
they will be explained later in case of

72
00:08:04,390 --> 00:08:08,849
the lighter is not a simple job to
identify antique so

73
00:08:08,850 --> 00:08:16,330
instructions and distinguish their
syntax in terms of data propagation and

74
00:08:16,330 --> 00:08:22,570
seeing the instructions that is very
annoying because it handles one single

75
00:08:22,570 --> 00:08:35,468
instruction and it has its own register
bank ok we'll we'll see a little detail

76
00:08:35,469 --> 00:08:42,469
of implementation of 13 surprised as I
mentioned we used a DBA for instruction

77
00:08:42,469 --> 00:08:44,020
tracing

78
00:08:44,020 --> 00:08:51,110
architecture it replaces on original
instruction after target program

79
00:08:51,110 --> 00:08:57,260
breakpoint instruction at one time in
order to make exception right after the

80
00:08:57,260 --> 00:09:08,600
exception of course tracer can take
control of their target process to do we

81
00:09:08,600 --> 00:09:14,420
have to determine the next PC step one
we have to determine the next to PC it's

82
00:09:14,420 --> 00:09:22,319
at the break points by analyzing the
current instruction why start next PC is

83
00:09:22,320 --> 00:09:27,910
determined that we have to we need to
see if their instruction at the next PC

84
00:09:27,910 --> 00:09:34,949
before replacing it with the break point
and then continue to target then that

85
00:09:34,950 --> 00:09:40,980
target list of break points we have to
replace restored instruction and then

86
00:09:40,980 --> 00:09:49,690
restore the instruction and then
determine the next occasion to set a

87
00:09:49,690 --> 00:09:58,110
breakpoint again this is repeatedly
profound but the important thing is that

88
00:09:58,110 --> 00:10:03,190
a breakpoint instruction should be
different according to the instruction

89
00:10:03,190 --> 00:10:08,310
states as you may know there are two
types of instruction states in

90
00:10:08,310 --> 00:10:15,829
architecture I'm states and some states
they have a different instructions signs

91
00:10:15,830 --> 00:10:22,959
so if we do not set the proper break
points according to states that I get

92
00:10:22,959 --> 00:10:29,050
context so we have to be careful of the
state change which is called into work

93
00:10:29,050 --> 00:10:39,390
can happen by PDX and the attacks
instructions determine the next PC in

94
00:10:39,390 --> 00:10:46,330
most cases we can just increased to 40
bytes according to the States but there

95
00:10:46,330 --> 00:10:51,380
are some instructions dick can directly
change the program counter so we have to

96
00:10:51,380 --> 00:10:57,030
identify and operant in case of these
instructions

97
00:10:57,030 --> 00:11:00,410
we have to address

98
00:11:00,410 --> 00:11:07,680
interference by other threads since
every thread Charest code section of the

99
00:11:07,680 --> 00:11:12,449
threads also keep the breakpoints they
said only further threat

100
00:11:12,450 --> 00:11:22,320
yeah we have to carefully handled as
seeing those caused by break points to

101
00:11:22,320 --> 00:11:31,010
guarantee all deference to run properly
otherwise you may lose control of their

102
00:11:31,010 --> 00:11:42,140
target problem caused by DBM this is
about instruction sequence for atomic

103
00:11:42,140 --> 00:11:49,660
operation does not provide single atomic
operation a single atomic instruction

104
00:11:49,660 --> 00:11:56,719
instead it provides instruction sequence
for its so important in his death the

105
00:11:56,720 --> 00:12:02,140
sequence if the sequence is interviewed
by the ATM and make us anything it's a

106
00:12:02,140 --> 00:12:11,420
group so we have to identify why is this
happening we have to identify the

107
00:12:11,420 --> 00:12:18,319
sequence and handle it now we are ready
to powerful instructions to cart racing

108
00:12:18,320 --> 00:12:24,070
in architecture we can start tracing
from the good point where the input file

109
00:12:24,070 --> 00:12:32,440
is loaded and we need to previous law
for the analyses that these points are

110
00:12:32,440 --> 00:12:38,190
being designate a specific threat as a
target threats which opens amplifier

111
00:12:38,190 --> 00:12:48,400
which opens fire in addition that we can
automatically figure out the menu

112
00:12:48,400 --> 00:12:57,030
addressed me and she finally celebrities
by checking open and read functions when

113
00:12:57,030 --> 00:13:02,430
you say if the context of each
instruction we have to filter out

114
00:13:02,430 --> 00:13:09,760
instructions that are not be executed
because they can mess up tracking data

115
00:13:09,760 --> 00:13:10,279
probe

116
00:13:10,279 --> 00:13:32,069
nation in the larger picture

117
00:13:32,069 --> 00:13:38,229
instruction is always fast and execute
ease if he does not be specified

118
00:13:38,230 --> 00:13:46,529
condition of CBS construction is
replaced by processor we've no operation

119
00:13:46,529 --> 00:13:53,970
coat before being executed so we have to
compare the condition flags between

120
00:13:53,970 --> 00:14:01,550
instruction and CPS before saving and in
general the thermostat instructions have

121
00:14:01,550 --> 00:14:07,979
no condition flex but a deal is an
exceptional case I think instruction of

122
00:14:07,980 --> 00:14:15,350
thumb to instruction set provides
conditional execution the principle of

123
00:14:15,350 --> 00:14:20,680
operation is different from the state
instruction but anyway we have to also

124
00:14:20,680 --> 00:14:28,569
have to appeal to all instructions not
their security in I T block now I will

125
00:14:28,569 --> 00:14:36,399
introduce a military briefly curious
trace entry form it generated by tracer

126
00:14:36,399 --> 00:14:44,319
and I'm delighted to a person each entry
it identifies insurgency in text-based

127
00:14:44,319 --> 00:14:51,610
under this assembly for disassembling we
make use of cats reaches a lightweight

128
00:14:51,610 --> 00:15:02,509
disassembly and I'm analyzer identifies
objects operations like registered

129
00:15:02,509 --> 00:15:10,559
address are we have classified
instructions in terms of their

130
00:15:10,559 --> 00:15:16,779
propagation based on reference manual as
a result we selected 277 instruction

131
00:15:16,779 --> 00:15:23,529
says are targets of 170 and so we
implemented all of those

132
00:15:23,529 --> 00:15:28,680
target instructions and we also
implemented some instructions as well

133
00:15:28,680 --> 00:15:40,559
for future would seem that the last
instructions to crash points when a user

134
00:15:40,559 --> 00:15:47,370
two years are 38 register of source to
see it comes from a particular it works

135
00:15:47,370 --> 00:15:48,100
like this

136
00:15:48,100 --> 00:15:52,230
inside a larger

137
00:15:52,230 --> 00:15:58,769
finds it worse rules for any instruction
that has our story register as

138
00:15:58,769 --> 00:16:05,430
destination so you do find this one and
choose the source objects of their

139
00:16:05,430 --> 00:16:12,209
instruction and then we'll find out of
one and its actual address again and

140
00:16:12,209 --> 00:16:26,839
again and again until their search
finishes to see how you was fully deeds

141
00:16:26,839 --> 00:16:32,870
so we generated crashes many crashes
against apologies office which is widely

142
00:16:32,870 --> 00:16:34,689
used Android

143
00:16:34,689 --> 00:16:40,569
document five brothers and we chose
seven crashes that looks very

144
00:16:40,569 --> 00:16:47,309
interesting like this if we have a
controller 3 register me finally many

145
00:16:47,309 --> 00:16:54,189
plates a program counter and exclusion
for a weekend change the schedule 40 so

146
00:16:54,189 --> 00:17:03,199
we put them into all the tools at first
we tried to get tracie lows with tracer

147
00:17:03,199 --> 00:17:10,619
we started tracing if you execute its
over 10 million and instructions so we

148
00:17:10,619 --> 00:17:18,059
got four of them on a 3G and execute and
seven million instructions and it takes

149
00:17:18,059 --> 00:17:20,809
about 25 minutes of respectively

150
00:17:20,809 --> 00:17:29,030
we analyzed to portray soros we've
analyzer to reach out so we found a

151
00:17:29,030 --> 00:17:33,790
two-week screw it up to exploit precious

152
00:17:33,790 --> 00:17:40,870
region to region came out within 15
seconds into the first mode means it

153
00:17:40,870 --> 00:17:48,969
into its active addressed only of source
on the other hand takes a lot of time I

154
00:17:48,970 --> 00:17:58,340
think we need to improve departments so
then what time he's going to show a demo

155
00:17:58,340 --> 00:19:16,120
que captured top returning fire because
so many pension originale e train five

156
00:19:16,120 --> 00:19:18,239
minutes

157
00:19:18,240 --> 00:19:26,650
the number of instructions sees about
seven million and the tracer fire

158
00:19:26,650 --> 00:19:43,460
science itself out one game by now
through crystal fire her we're given

159
00:19:43,460 --> 00:19:46,440
2005 yeah

160
00:19:46,440 --> 00:20:32,710
and I da and DA points and the branch
instruction Press remembered up here in

161
00:20:32,710 --> 00:20:35,559
the fire

162
00:20:35,559 --> 00:21:21,730
instruction change in potato range comes
from the upset and I don't change a

163
00:21:21,730 --> 00:21:24,980
thing

164
00:21:24,980 --> 00:22:19,770
cover to cover a 10 year trend during a
press row price point shot clear

165
00:22:19,770 --> 00:22:33,580
check out our sorry we're just about
this time for sure

166
00:22:33,580 --> 00:22:49,120
me as I can't say that I've modified and
the fire which means that we can

167
00:22:49,120 --> 00:23:08,370
manipulate the program counter to the
Chicago ok we have to crash analysis

168
00:23:08,370 --> 00:23:17,300
applications and I'm architecture we
tested in real-world Android device and

169
00:23:17,300 --> 00:23:24,330
as we told them we founded to explore a
little precious I B four we are going to

170
00:23:24,330 --> 00:23:29,790
release our tools we get the source code
after some allegiance actually the US

171
00:23:29,790 --> 00:23:37,720
and 20 bucks till i plz participants in
improving our tools does about this all

172
00:23:37,720 --> 00:23:44,120
about my presentation and you have any
questions so I actually I preferred to

173
00:23:44,120 --> 00:23:48,760
personally I'm a shy guy thank you

