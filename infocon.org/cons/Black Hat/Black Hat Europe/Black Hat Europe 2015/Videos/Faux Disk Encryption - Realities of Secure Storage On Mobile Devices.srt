1
00:00:00,000 --> 00:00:04,200
thanks for coming to our talk everyone
will talk about full description and the

2
00:00:04,200 --> 00:00:08,170
realities of secure storage on mobile
devices I'm going on here

3
00:00:08,170 --> 00:00:13,610
principal consultant with C&C group
based out of Chicago I'm off on iOS guy

4
00:00:13,610 --> 00:00:17,730
from experience and written a tool that
some of you have may be used on hold a

5
00:00:17,730 --> 00:00:23,990
baby with this was for I was interesting
and talk together with his that's very

6
00:00:23,990 --> 00:00:30,198
true I'm a senior security consultant
with NCC is also research director of a

7
00:00:30,199 --> 00:00:35,469
sign of my projects built the would give
for the device exploits and directions

8
00:00:35,469 --> 00:00:44,739
on how to use support to new devices are
unlocked devices so just in case you're

9
00:00:44,739 --> 00:00:49,288
not familiar with the group is a
consultancy but we also do suppress grow

10
00:00:49,289 --> 00:00:53,420
and testing services they're basing that
in the UK but we are all from aus

11
00:00:53,420 --> 00:00:57,969
actually right so we give a brief
introduction to the topic first and then

12
00:00:57,969 --> 00:01:02,820
we'll talk about iOS and Android
separate exciting that the ISI and

13
00:01:02,820 --> 00:01:06,950
talking about it secure storage
facilities that are there is any gaps

14
00:01:06,950 --> 00:01:10,570
and how you can use how you can use them
properly and I'm gonna get over to

15
00:01:10,570 --> 00:01:14,820
Android and CEO and that compares to
that and show you how the entire would

16
00:01:14,820 --> 00:01:18,220
change everything is actually relevant
for secure storage and we give you on a

17
00:01:18,220 --> 00:01:22,689
demo next level of developed a show you
how failure to do so will result in

18
00:01:22,689 --> 00:01:28,820
disasters potentially and then give
somebody in the apt so what makes AB

19
00:01:28,820 --> 00:01:32,589
specials everybody knows that mobile
apps on mobile phones seem to be the

20
00:01:32,590 --> 00:01:36,380
primary baby use the internet these days
and if you look at how people use the

21
00:01:36,380 --> 00:01:40,960
mobile devices there is actually the
majority of people are using apps on

22
00:01:40,960 --> 00:01:46,130
mobile devices don't use as much and the
problem with this is that if you're

23
00:01:46,130 --> 00:01:50,360
thinking from from a company standpoint
where you're from our privacy standpoint

24
00:01:50,360 --> 00:01:54,729
traditionally all your data is somewhere
in your server somewhere it's contained

25
00:01:54,729 --> 00:01:58,548
and you can protect controls on it but
as soon as you put data on on the mobile

26
00:01:58,549 --> 00:02:03,119
device it's very difficult to enforce
any controlled anymore because it is

27
00:02:03,119 --> 00:02:06,159
being carried around everywhere you
don't have access to control the network

28
00:02:06,159 --> 00:02:10,149
very well even with mobile device
management this is still not an easy

29
00:02:10,149 --> 00:02:15,280
problem to solve necessarily so on why
is this a problem but there's three

30
00:02:15,280 --> 00:02:20,319
challengers come based on that between
identify the first one is that since

31
00:02:20,319 --> 00:02:24,929
2007 carried around there being lost or
stolen so I'm very often

32
00:02:24,930 --> 00:02:30,959
numbers from the USS Ponce 1.4 million
pounds lost 2013 3.1 million phone

33
00:02:30,959 --> 00:02:34,360
stolen while not all of those may
actually go up to the date on there it

34
00:02:34,360 --> 00:02:38,220
may definitely not be in your best
interest to get your data lost by just

35
00:02:38,220 --> 00:02:42,280
getting the phone lost or stolen so we
need to protect it on the device somehow

36
00:02:42,280 --> 00:02:47,280
but at the same time we obviously need
to enable people to use it and have data

37
00:02:47,280 --> 00:02:51,340
accessible on those devices so we have
either locally cached data from an

38
00:02:51,340 --> 00:02:54,849
application return it up accessible
online or somewhere to get quick access

39
00:02:54,849 --> 00:02:58,840
to or at the very least there some sort
of access to open or potential official

40
00:02:58,840 --> 00:03:04,010
cash that you don't have to relocate
into every service every time you know

41
00:03:04,010 --> 00:03:08,079
when we do those two things we also have
to keep in mind that users need to be

42
00:03:08,080 --> 00:03:14,099
able to do this in a way because
otherwise they will not use the system

43
00:03:14,099 --> 00:03:20,079
or they will rebel against us as the s80
people so if we make it too complicated

44
00:03:20,080 --> 00:03:26,170
to do to get access to the data then we
may end up with a usability nightmare

45
00:03:26,170 --> 00:03:33,679
like this when I don't you can read it
yet and talk about it more about what it

46
00:03:33,680 --> 00:03:40,450
means to security surveillance heard
there's no such thing as absolute

47
00:03:40,450 --> 00:03:45,970
security but we we're interested in and
finding out who were concerned about in

48
00:03:45,970 --> 00:03:51,739
terms of the date on our devices and and
who were concerned about looking at and

49
00:03:51,739 --> 00:03:57,480
that sort of thing so if we go through
some of the actors here we have remote

50
00:03:57,480 --> 00:04:02,629
actor somebody who will connect your
device remotely coffee shop attackers

51
00:04:02,629 --> 00:04:07,260
somebody who may be set up a wifi
hotspot of their own or takes over a

52
00:04:07,260 --> 00:04:12,359
poorly secured one in the area and want
to say about poorly secured

53
00:04:12,360 --> 00:04:17,310
traffic we have the casual thief who
probably doesn't care about the day on

54
00:04:17,310 --> 00:04:19,530
your phone at all he probably just wants
to

55
00:04:19,529 --> 00:04:27,080
the hardware 22 flippin sell to somebody
we moved to targeted attacks which are a

56
00:04:27,080 --> 00:04:31,550
lot of time and effort and targeted very
specific person and Tobias most likely

57
00:04:31,550 --> 00:04:37,370
and then we have nation states which
have a much larger budget and time in

58
00:04:37,370 --> 00:04:42,389
order to craft an attack against a
particular user so we kind of put these

59
00:04:42,389 --> 00:04:47,600
on a graph of the security effort to
defend against as well as the

60
00:04:47,600 --> 00:04:53,520
sophistication needed for these attacks
can kind of see here obviously the cop

61
00:04:53,520 --> 00:04:58,590
shop attackers very easy to do and very
unsophisticated attack we will follow up

62
00:04:58,590 --> 00:05:05,469
to nation states so we talk a little bit
more in depth now about mobile data

63
00:05:05,470 --> 00:05:12,260
security and a quick word I'm full disk
encryption this will both of these

64
00:05:12,260 --> 00:05:16,169
models are transparently decrypt the
data when it's needed for reading and

65
00:05:16,169 --> 00:05:21,859
will transparently encrypted data for
writing and really when we talk about

66
00:05:21,860 --> 00:05:26,560
full disk encryption the protection is
when the devices off and the key is no

67
00:05:26,560 --> 00:05:31,150
longer a resident memory or its Dana
will talk about little more on iOS there

68
00:05:31,150 --> 00:05:35,549
some more flexibility here but we need
more fine-grained control them this and

69
00:05:35,550 --> 00:05:43,670
so they're not introduce those concepts
for I was here

70
00:05:43,670 --> 00:05:50,610
so I look at a West the court granted
retreat how here is that Apple controls

71
00:05:50,610 --> 00:05:55,270
both hardware and software so they can
build support for security features such

72
00:05:55,270 --> 00:05:59,960
as the situation cliff and other parts
such a DNC on and they can right away

73
00:05:59,960 --> 00:06:03,500
build software of its just interfacing
with that and can you see you so

74
00:06:03,500 --> 00:06:07,800
speeches right away as he lay down and
write a little bit more complicated on

75
00:06:07,800 --> 00:06:13,920
that side and was able to do is that
they have signed from the ground up so

76
00:06:13,920 --> 00:06:17,640
whenever the device starts putting the
boot loader checks at the next eight

77
00:06:17,640 --> 00:06:22,700
bulldozer and everything coming from is
actually signed by Apple CA and then

78
00:06:22,700 --> 00:06:25,979
there's no no code can be objective
notification which can be made without

79
00:06:25,980 --> 00:06:31,270
being detected and in addition to that
once the operating system is running if

80
00:06:31,270 --> 00:06:35,880
you install updates they also have to be
signed papo in order to update the

81
00:06:35,880 --> 00:06:40,610
system and get the latest security fixes
things which annoys people potentially

82
00:06:40,610 --> 00:06:44,980
is that you cannot downgrade but the
reason for not having downgrades is that

83
00:06:44,980 --> 00:06:49,660
they claimed and it's the reason but
they're putting out there is that we

84
00:06:49,660 --> 00:06:52,760
don't new security features along the
way she had a certain degree of security

85
00:06:52,760 --> 00:06:57,060
they don't want people to revert back so
they have everybody on the latest we can

86
00:06:57,060 --> 00:07:00,980
take advantage of all the latest
features and bug fixes potentially

87
00:07:00,980 --> 00:07:04,890
from a security standpoint that that may
actually be a good thing then the code

88
00:07:04,890 --> 00:07:08,580
running on the operating systems also
signed so you can hear it too hard to

89
00:07:08,580 --> 00:07:12,760
get code on an iOS device which is not
signed especially if it's not jailbroken

90
00:07:12,760 --> 00:07:17,280
talk about that in a second so
everything is running on the device is

91
00:07:17,280 --> 00:07:23,719
somewhat trusted or comes from a source
rates know where it's coming from now if

92
00:07:23,720 --> 00:07:28,560
you have to think about encrypting
something you're after something that is

93
00:07:28,560 --> 00:07:33,200
not stored on the device if you were to
simply to encrypt data on the device and

94
00:07:33,200 --> 00:07:36,940
you have a key you need to put the key
somewhere and if you own the device then

95
00:07:36,940 --> 00:07:40,580
we basically back where we started with
our problem so that the way this works

96
00:07:40,580 --> 00:07:46,500
on most devices and most systems is a
key from a passcode on the passcode and

97
00:07:46,500 --> 00:07:49,720
then there's a cryptographic key being
derived from the pass code which is then

98
00:07:49,720 --> 00:07:57,169
used to encrypt 80 and you can you can
buy from memory and and the data

99
00:07:57,169 --> 00:08:00,878
anymore so you cannot move from having
the full disk encryption paradigm where

100
00:08:00,879 --> 00:08:06,340
your health data always something where
is protected until you unlock the device

101
00:08:06,340 --> 00:08:11,169
actually the problem with this is that
users are because of usability reasons

102
00:08:11,169 --> 00:08:14,960
to choose early because coats and then
you have the problem that you can do i

103
00:08:14,960 --> 00:08:20,229
text you can copy data off the devious
boutros a pin number there and then you

104
00:08:20,229 --> 00:08:24,758
would be able to bypass this mechanism
so anyway how to secure protect against

105
00:08:24,759 --> 00:08:28,960
this is to leverage hardware and there
is a hybrid of trust secure enclaves

106
00:08:28,960 --> 00:08:35,419
which is in all latest iOS devices and
they can be used to hold an encryption

107
00:08:35,419 --> 00:08:38,929
key you it does hold an encryption key
in hardware and every encryption

108
00:08:38,929 --> 00:08:41,588
decryption operation has to go through
that piece of hardware in order to

109
00:08:41,589 --> 00:08:46,480
succeed and there's no way to retake key
if you don't have to if you dont from

110
00:08:46,480 --> 00:08:50,600
the operation on the device itself and
there is no way to get the key out and

111
00:08:50,600 --> 00:08:56,420
do not attack you two doing a
brute-force attack on the device and

112
00:08:56,420 --> 00:09:01,300
with that you have Harper patrols which
can prevent you from doing this and lock

113
00:09:01,300 --> 00:09:07,040
your and delete the entire key after a
certain amount of time or attempts so

114
00:09:07,040 --> 00:09:11,870
let's see how this ties into featured a
respirator for developers to security so

115
00:09:11,870 --> 00:09:15,100
everything which is stored on the you
ever use the data stored on the device

116
00:09:15,100 --> 00:09:20,410
and I have to say it's encrypted file TV
to specific to each file and that he is

117
00:09:20,410 --> 00:09:24,939
store with a metadata on the filesystem
know as I mentioned this doesn't help us

118
00:09:24,940 --> 00:09:30,390
much because if it does the key on the
filesystem encryption doesn't help us so

119
00:09:30,390 --> 00:09:33,560
what comes into play here is the the
heartbreak of its case this piece of

120
00:09:33,560 --> 00:09:37,910
data to the hardware as they happen
burned into the chip manufacturing time

121
00:09:37,910 --> 00:09:43,040
which is only on the device that is used
to encrypt the file system he will talk

122
00:09:43,040 --> 00:09:46,670
about the role of that yes I can and
then that sound system he is used to

123
00:09:46,670 --> 00:09:50,660
encrypt the file he said no we have all
the files being tight with the device

124
00:09:50,660 --> 00:09:54,209
and you can decrypt them off the device
but if you get to get access to it you

125
00:09:54,209 --> 00:09:58,619
can still perform any encryption
decryption operation as you'd like to

126
00:09:58,620 --> 00:10:03,760
try to prevent that any time in the past
we have over here

127
00:10:03,760 --> 00:10:08,630
the of this actually really poorly
visible this is supposed to be a

128
00:10:08,630 --> 00:10:15,030
passcode screen and so from this wheel
driving driving that the past but keep

129
00:10:15,030 --> 00:10:19,100
using a variation of function and then
that has cookies used to the heart the

130
00:10:19,100 --> 00:10:23,160
key to get additional eviction case
about what about a second and then those

131
00:10:23,160 --> 00:10:28,380
keys are used to the actual trial he's
which are stored in the file system so

132
00:10:28,380 --> 00:10:31,640
now we're in a position where we have
something that is coming from the use of

133
00:10:31,640 --> 00:10:34,580
it does not sit on the device and
whenever the user likes the device is

134
00:10:34,580 --> 00:10:39,280
not actually on there and something that
is tied to hardware so it became not to

135
00:10:39,280 --> 00:10:42,900
a land tax and encrypt data and we'll
talk about and second how you can get

136
00:10:42,900 --> 00:10:46,630
more fine-grained control so the
filesystem key up there is actually just

137
00:10:46,630 --> 00:10:50,840
used to it you can quickly iPad devices
you want to do but the device here you

138
00:10:50,840 --> 00:10:55,260
can just blow that away and then you
don't have access to any of the data on

139
00:10:55,260 --> 00:10:58,580
the device anymore so you don't have to
worry about wiping every single file key

140
00:10:58,580 --> 00:11:02,140
or things like that

141
00:11:02,140 --> 00:11:08,630
class he's a little bit more ease up
into different parts here we see that we

142
00:11:08,630 --> 00:11:15,480
have the protection glasses as they are
called the first one senator protection

143
00:11:15,480 --> 00:11:18,730
on which is only tied to the hardware
but it's not incorporating two key

144
00:11:18,730 --> 00:11:22,930
material from the passport at all and
the other two are using both that tied

145
00:11:22,930 --> 00:11:28,420
into the hardware and that I tend to the
past so those are used to protect data

146
00:11:28,420 --> 00:11:33,120
in the first instance until first user
authentication which is equivalent to

147
00:11:33,120 --> 00:11:38,220
political corruption so when you turn on
the past for the first time till you

148
00:11:38,220 --> 00:11:41,440
enter the password the first time they
don't they'll stay encrypted but once

149
00:11:41,440 --> 00:11:44,080
you unlock the device to keep the
remaining memory and will be accessible

150
00:11:44,080 --> 00:11:49,090
while the second one the NFL protection
complete actually wipe sticky every time

151
00:11:49,090 --> 00:11:52,080
you lock the device from memory and it
gives you a much much stronger

152
00:11:52,080 --> 00:11:57,850
protection will tell you actually used
data after unlocking the phone so as a

153
00:11:57,850 --> 00:12:01,050
developer you have the option of
choosing these obviously for most cases

154
00:12:01,050 --> 00:12:05,890
you would like to choose to complete one
so that you can protect the only

155
00:12:05,890 --> 00:12:09,310
downside is that you can use our product
line operations of your death date over

156
00:12:09,310 --> 00:12:13,109
to need to be accessible when you have
your block to the background jobs then

157
00:12:13,110 --> 00:12:15,560
you can activate this undersea can hold
a dead end

158
00:12:15,560 --> 00:12:21,670
very well you're running so we talked
about the the file encryption there's a

159
00:12:21,670 --> 00:12:27,290
second mechanism ISI CAS keychain but
you probably heard about this is like a

160
00:12:27,290 --> 00:12:31,810
structured data story true you can store
list of the race of data dictionaries

161
00:12:31,810 --> 00:12:37,300
things like that and internally this
database restored on the health system

162
00:12:37,300 --> 00:12:41,770
simply and the interesting thing here is
that the database is not encrypted as a

163
00:12:41,770 --> 00:12:47,199
whole but every row in the database is
encrypted so you as a as a user can as a

164
00:12:47,200 --> 00:12:50,560
developer when you started in the
kitchen and you can choose how you want

165
00:12:50,560 --> 00:12:53,770
it to be encrypted and you can choose
how it with protection you would like to

166
00:12:53,770 --> 00:12:59,050
have our talk and second which classes
are there but the main problem with the

167
00:12:59,050 --> 00:13:03,609
keychain is that it never gets deleted
or something so using a certain

168
00:13:03,610 --> 00:13:08,230
application you enter username and
password and that a band Salt Lake

169
00:13:08,230 --> 00:13:13,870
stories the chain you uninstall the app
still on the keychain if you reinstall

170
00:13:13,870 --> 00:13:17,750
the app it made us pick it back up and
continue using it but if it didn't

171
00:13:17,750 --> 00:13:20,850
detect it properly and you sell your
phone in the future and you don't buy

172
00:13:20,850 --> 00:13:24,650
properly then somebody else may get all
your credentials for all your secret

173
00:13:24,650 --> 00:13:30,530
over to store their look at the
different options for storing data

174
00:13:30,530 --> 00:13:33,430
indicate chain they're very much
equivalent to what we've seen for the

175
00:13:33,430 --> 00:13:38,630
file system there's senator protection
none but we've talked about it is not an

176
00:13:38,630 --> 00:13:43,210
encryption based on the passcode and
then for the keychain there some way in

177
00:13:43,210 --> 00:13:47,250
which the name rings so there may be a
bit easier to understand it's always

178
00:13:47,250 --> 00:13:52,150
accessible it always accessible off the
first unlock or accessible when I talked

179
00:13:52,150 --> 00:13:56,920
and that's basically cleland to talk
about four miles and then the last step

180
00:13:56,920 --> 00:14:02,680
is it is accessible when asked what set
and that means that you have to have a

181
00:14:02,680 --> 00:14:07,069
passport on the device in order to store
data with the setting so if you if

182
00:14:07,070 --> 00:14:10,570
you're a developer and you want to start
it and the keychain you may not know if

183
00:14:10,570 --> 00:14:14,000
the user has a passcode on the device so
they don't have a passcode even if you

184
00:14:14,000 --> 00:14:18,380
use when i unlock setting there is no
passport to take advantage of the data

185
00:14:18,380 --> 00:14:22,850
was still the always accessible and in
order to give the user the developer

186
00:14:22,850 --> 00:14:26,270
some sort of way to save all the only
one to store data can actually do so

187
00:14:26,270 --> 00:14:27,260
securely

188
00:14:27,260 --> 00:14:28,550
option when

189
00:14:28,550 --> 00:14:33,199
and if you use that if there is no
passcode US refused to store the data so

190
00:14:33,200 --> 00:14:37,620
you can use that to verify whether there
is a path but on the device or not and

191
00:14:37,620 --> 00:14:44,279
that has just been introduced in iOS 829
you may wonder why all these different

192
00:14:44,279 --> 00:14:49,350
classes and why don't you always protect
data to unlock or even stronger

193
00:14:49,350 --> 00:14:53,880
well the reason is that some data must
be accessible at all times so we think

194
00:14:53,880 --> 00:14:57,230
about all waste if you look at the
default output on the phone

195
00:14:57,230 --> 00:15:00,060
there's a lot of them but you always
accessible because when you turn on your

196
00:15:00,060 --> 00:15:03,739
phone you expect to get phone calls so
you expect that you can locate your

197
00:15:03,740 --> 00:15:07,500
phone data related to that needs to be
always accessible even if you never

198
00:15:07,500 --> 00:15:11,180
unlock the device and this other day
which you can protect a bit more

199
00:15:11,180 --> 00:15:16,870
strictly credentials or email
credentials or your Facebook things like

200
00:15:16,870 --> 00:15:21,519
that those are all protected until the
unlock the start of the phone you will

201
00:15:21,519 --> 00:15:25,000
not be able to use those services in the
background until you unlock the phone at

202
00:15:25,000 --> 00:15:30,990
least once to unlock that a deferred and
then other things such as the Home

203
00:15:30,990 --> 00:15:36,079
Sharing or Safari your iTunes backups
all of those are protected even stronger

204
00:15:36,079 --> 00:15:39,410
told when unlocked because you don't
need to have your safari perseverance

205
00:15:39,410 --> 00:15:42,110
available in the background because
you're not using Safari so you can

206
00:15:42,110 --> 00:15:45,980
protect those more strictly and you can
use the same kind of thinking for for

207
00:15:45,980 --> 00:15:49,360
your own apps and websites you're
looking at some data cannot be protected

208
00:15:49,360 --> 00:15:53,070
longer because you need to have it in
the background

209
00:15:53,070 --> 00:15:58,320
and this important topic in the end

210
00:15:58,320 --> 00:16:02,730
issue 12 have the passcode being used
and you want to have strong passcode

211
00:16:02,730 --> 00:16:07,710
said how do we do this or that you have
the ability for users because if they

212
00:16:07,710 --> 00:16:10,730
need to type in a long strong password
every time they want to unlock the

213
00:16:10,730 --> 00:16:16,540
device that's usually not happening you
supported coat and forces you to have

214
00:16:16,540 --> 00:16:21,599
600 the least but they also introduced
at the beginning when it came out the

215
00:16:21,600 --> 00:16:25,250
security community logo we can just
lifting of friends and unlock phones

216
00:16:25,250 --> 00:16:29,720
that's probably true but I think it's
more monumental usability feature and

217
00:16:29,720 --> 00:16:33,440
its strong and that that it encourages
people to use it because you can use

218
00:16:33,440 --> 00:16:37,330
Apple paying you can use it to pay in
the App Store you can you can you do a

219
00:16:37,330 --> 00:16:40,730
lot of things but if you want to do and
at the same time it forces them to set a

220
00:16:40,730 --> 00:16:43,930
password on the basis of the number of
people which only have passed goes on

221
00:16:43,930 --> 00:16:48,829
the device is probably increase quite a
bit and every one of those can actually

222
00:16:48,830 --> 00:16:52,920
take here or advantage of these increase
storage heaters we just talked about

223
00:16:52,920 --> 00:16:59,699
internally is actually just a wrapper
around the the passcode so they are

224
00:16:59,700 --> 00:17:02,940
still encrypted under the passcode
that's why when you turn on your iPhone

225
00:17:02,940 --> 00:17:06,560
the first time after it was and always
ask you to enter the passcode first

226
00:17:06,560 --> 00:17:10,688
because of the encryption key from that
and there will be stored in secure

227
00:17:10,689 --> 00:17:14,070
enclosed in the park for the Teddy
whenever you put your finger print on

228
00:17:14,069 --> 00:17:18,139
archival verify that it's your finger
and I'm like that key and release it to

229
00:17:18,140 --> 00:17:23,790
that you can decrypt it again there's
another feature related to the

230
00:17:23,790 --> 00:17:28,230
fingerprint scanner which is pretty
interesting actually it's called user

231
00:17:28,230 --> 00:17:32,880
presence and it's also been introduced
in 2008 I believe the idea here is that

232
00:17:32,880 --> 00:17:39,910
from protected until the device has been
turned on when the device unlocked with

233
00:17:39,910 --> 00:17:44,730
the talk about and now they have as a
way to protect it until you actually

234
00:17:44,730 --> 00:17:48,110
need it so you can if you have your
phone lying on the table and somebody

235
00:17:48,110 --> 00:17:52,139
grabs it and opens in a very sensitive
and were trying to access something this

236
00:17:52,140 --> 00:17:56,280
will need to get the data from the
keychain and if it has a certain flags

237
00:17:56,280 --> 00:18:00,399
will require the user to react indicated
that point so that point on you when you

238
00:18:00,400 --> 00:18:02,830
read the data but ask you please put
your finger on

239
00:18:02,830 --> 00:18:06,668
here please enter your password again
and only then will you get access to

240
00:18:06,669 --> 00:18:12,620
them so we getting more fine-grained
control to Windows actually accessible I

241
00:18:12,620 --> 00:18:16,689
want to mention here there's also a
local authentication API which is

242
00:18:16,690 --> 00:18:23,980
something that its not back the hardware
and it's not tied into the secure anglo

243
00:18:23,980 --> 00:18:28,799
directly but it allows users to
developers to say I want to authenticate

244
00:18:28,799 --> 00:18:31,980
the user at this point and then go to
pop up a question too heavy so time to

245
00:18:31,980 --> 00:18:37,620
coat and your operating system will then
told the app yesterday was not the

246
00:18:37,620 --> 00:18:41,428
problem is if you have a different
device you can simply bypass that you

247
00:18:41,429 --> 00:18:45,549
can hope that operates operating system
call and tell you there was a right

248
00:18:45,549 --> 00:18:46,668
finger here

249
00:18:46,669 --> 00:18:51,240
well the other protection but actually
stores data encrypted protected but he

250
00:18:51,240 --> 00:18:54,559
cannot be bypassed when you have a
jailbroken device and actually need to

251
00:18:54,559 --> 00:19:00,629
know the passcode or have the extra
point and that actually brings us to

252
00:19:00,630 --> 00:19:03,720
that what can you do when you jailbreak
your device and maybe a question you may

253
00:19:03,720 --> 00:19:04,200
have

254
00:19:04,200 --> 00:19:08,450
jailbreak stuff we do allow me to
execute unsigned code I mentioned before

255
00:19:08,450 --> 00:19:13,720
there is the verification and things
which can you cannot run code which has

256
00:19:13,720 --> 00:19:19,070
not been signed by Apple issued a break
your device you can I'm running on time

257
00:19:19,070 --> 00:19:24,309
code and you can bet that mechanism and
a few other also legal protections

258
00:19:24,309 --> 00:19:28,710
cannot do is it does not disable
sandboxing perhaps to apps so everything

259
00:19:28,710 --> 00:19:31,529
which started from the App Store will
still be some parks and protected so

260
00:19:31,529 --> 00:19:35,350
it's not like every option then suddenly
read all the NFL's assume that's not the

261
00:19:35,350 --> 00:19:38,580
case now but what's your story

262
00:19:38,580 --> 00:19:44,139
well first of all the passcode on a
device prevents you from day breaking

263
00:19:44,139 --> 00:19:48,059
into ice if you have a broken anything
with the public jailbreak you know they

264
00:19:48,059 --> 00:19:52,070
always ask you to unlock the device to
reboot issue times and you can't do that

265
00:19:52,070 --> 00:19:57,309
on the passcode maybe non-public
jailbreak switch work without doing this

266
00:19:57,309 --> 00:20:02,559
but in general public jailbreaks for the
majority of people being targeted by

267
00:20:02,559 --> 00:20:07,620
this potentially that's probably not not
a big issue

268
00:20:07,620 --> 00:20:11,360
you you can also then get access to all
data over just not protected by the

269
00:20:11,360 --> 00:20:14,719
passcode simply by reading for it

270
00:20:14,720 --> 00:20:20,440
reading it as mentioned before you
cannot bypass data over to take the time

271
00:20:20,440 --> 00:20:28,050
to actually know what other security
threats 100 a broken devices

272
00:20:28,050 --> 00:20:34,040
well it kind of limited on to quite a
bit to respond is over from malicious

273
00:20:34,040 --> 00:20:37,870
application asking for permission so
people are really conditions that allow

274
00:20:37,870 --> 00:20:41,510
you to use this app now it is going to
click Allow and all these prompts and

275
00:20:41,510 --> 00:20:45,220
popups so that's definitely one of the
things we have seen a lot of people

276
00:20:45,220 --> 00:20:50,320
falling to that the other one is after
taking apps that the only way to really

277
00:20:50,320 --> 00:20:56,970
interact with an app on iOS is using URL
schemes so there is a lot of exposure to

278
00:20:56,970 --> 00:21:02,380
UL schemes and trusted 801 a band which
may be called upon the operating system

279
00:21:02,380 --> 00:21:06,940
so there may be a minimal issues are you
installed it may take another aw else

280
00:21:06,940 --> 00:21:11,390
that's really the only way I can talk to
each other unless you have some sort of

281
00:21:11,390 --> 00:21:18,429
sent box break out and then you should
talk with me and finally even made

282
00:21:18,429 --> 00:21:21,160
Senate acts of which will be really
relevant for the introduction of this

283
00:21:21,160 --> 00:21:24,990
talk show you could potentially daybreak
the devious backdoor it all back to a

284
00:21:24,990 --> 00:21:28,780
nap on the device and then give it back
to a user and then you can watch what

285
00:21:28,780 --> 00:21:34,470
they're doing more access to the data
and Google Talk Android in the next

286
00:21:34,470 --> 00:21:40,860
section and he will talk about the
attacks a bit more as well

287
00:21:40,860 --> 00:21:46,299
thanks so let's look at how ended tackle
some of these same problems that we just

288
00:21:46,299 --> 00:21:51,309
like that on the US side so we put
together sort of the evolutionary of

289
00:21:51,309 --> 00:21:55,540
Android security the different versions
are listed in and sort of when these new

290
00:21:55,540 --> 00:22:00,040
security features are added goes along
with the wind blew that pertain

291
00:22:00,040 --> 00:22:03,920
specifically to the stock but left the
other ones just for general information

292
00:22:03,920 --> 00:22:11,320
talk quickly about a few of these the
key store in Cuse I start we'll talk

293
00:22:11,320 --> 00:22:12,918
more in depth about that

294
00:22:12,919 --> 00:22:18,640
however forcing crypt was something that
Google tried to roll out with lollipop

295
00:22:18,640 --> 00:22:25,070
and this means that the normally
user-selectable user data encryption was

296
00:22:25,070 --> 00:22:28,760
forced on you which is a kind of a win
for security

297
00:22:28,760 --> 00:22:33,220
unfortunately the OEM partners of Google
were not ready for this and so they

298
00:22:33,220 --> 00:22:39,010
quietly removed that requirement for a
lollipop and so let's see what happens

299
00:22:39,010 --> 00:22:42,929
with with marshmallow I think they're
gonna try that again but the main point

300
00:22:42,929 --> 00:22:49,150
is that not every device even sell right
now comes with with corruption on by the

301
00:22:49,150 --> 00:22:54,140
fall that something you have to manually
turn on yourself

302
00:22:54,140 --> 00:23:01,520
graph of the users of Android we can
kind of look at really the the

303
00:23:01,520 --> 00:23:04,070
fragmentation of everyone through
familiar with and really like the

304
00:23:04,070 --> 00:23:08,710
complex problem that application
developers have as you can see the

305
00:23:08,710 --> 00:23:14,110
majority of people on Android right now
are not on the newest version we are on

306
00:23:14,110 --> 00:23:19,299
a two year old version of Android at
this point I'll talk more about why that

307
00:23:19,299 --> 00:23:24,470
is coming up here but if we kind of
contrast that with iOS adoption and we

308
00:23:24,470 --> 00:23:28,260
can see that the vast majority of users
are already on the latest version of the

309
00:23:28,260 --> 00:23:31,710
operating system which means they have
all the way to security features and bug

310
00:23:31,710 --> 00:23:36,900
fixes and things that users will have to
wait years if ever to get pushed to

311
00:23:36,900 --> 00:23:41,590
their hand side depending on the model
you have and the sounds pretty serious

312
00:23:41,590 --> 00:23:46,220
impact on application developers because
there is an immense code complexity

313
00:23:46,220 --> 00:23:50,490
problem in that in order to target the
latest you know security API is

314
00:23:50,490 --> 00:23:51,320
available

315
00:23:51,320 --> 00:23:56,139
you have to sort of like if your code it
considerably to say well if we're on for

316
00:23:56,140 --> 00:24:00,830
about four and we should use this
facility if you know i three you to fall

317
00:24:00,830 --> 00:24:05,620
back to this and you know a lot of
people just default to the failed to

318
00:24:05,620 --> 00:24:09,600
like the the most simple option mcaleese
secure option in that case because they

319
00:24:09,600 --> 00:24:14,429
want their out to run properly on on all
versions of the platform and they

320
00:24:14,430 --> 00:24:17,910
mentioned access to the more secure
functionality just isn't realistic for

321
00:24:17,910 --> 00:24:24,970
all users of Android and this is the
comp a problem of solitaire over the air

322
00:24:24,970 --> 00:24:30,840
updates and this is you know a talking
itself but to paraphrase 42 briefly

323
00:24:30,840 --> 00:24:36,780
summarize rather you know maybe a patch
comes out today from Google for a bug

324
00:24:36,780 --> 00:24:41,260
but that patch will take a long time to
actually make it to your handset because

325
00:24:41,260 --> 00:24:45,660
the OEM the Google partners with all
like to customize Android considerably

326
00:24:45,660 --> 00:24:50,790
and it's usually not the case where you
can just directly applied at Pats so

327
00:24:50,790 --> 00:24:54,639
they have to rework it for their act up
version of Android and then once that's

328
00:24:54,640 --> 00:24:59,140
done enough to go to the carriers at
least in the USS for the carriers to let

329
00:24:59,140 --> 00:25:03,000
the build and then eventually allow the
update to get pushed out so in a lot of

330
00:25:03,000 --> 00:25:08,170
cases this increases the time that she
would you know how to get the actual up

331
00:25:08,170 --> 00:25:11,760
dead and these carriers are in the
business of selling you a new phone

332
00:25:11,760 --> 00:25:18,620
Castalia so there's really no you know
pushing factor for them to walk him to

333
00:25:18,620 --> 00:25:21,969
do this update 3 especially like years
after you purchase the device they would

334
00:25:21,970 --> 00:25:26,160
rather you just buy something new so
what we basically end up with the end of

335
00:25:26,160 --> 00:25:30,380
this is a lot of devices that will be
forever boerboel until you purchase

336
00:25:30,380 --> 00:25:36,680
something new so let's take a quick look
about how the internal corruption works

337
00:25:36,680 --> 00:25:42,360
here as we saw in the US side we have a
similar model here and I'll briefly

338
00:25:42,360 --> 00:25:48,870
explain how all these work at a very
high level Google uses a S 120 and CBC

339
00:25:48,870 --> 00:25:56,178
mode to encrypt each sector of the disc
there's a SIV shot 256

340
00:25:56,179 --> 00:26:01,369
for each sector initialization vector
and there's the concept of the device

341
00:26:01,369 --> 00:26:07,619
encryption key which is generated when
you enable encryption for the first time

342
00:26:07,619 --> 00:26:12,178
it goes through and encrypts all the
sectors without key the problem with

343
00:26:12,179 --> 00:26:17,809
having just this device key is that it's
you need to have a passcode on top of

344
00:26:17,809 --> 00:26:22,908
that and so what what they've done to
solve this issue is to have a cat or key

345
00:26:22,909 --> 00:26:27,490
encryption key and this is actually what
wraps the device encryption key that is

346
00:26:27,490 --> 00:26:32,230
sort of the static he so that if you do
you update your passcode you don't have

347
00:26:32,230 --> 00:26:37,950
to go through them we encrypt the entire
drive so this genus key encryption key

348
00:26:37,950 --> 00:26:42,759
and then I V are stored in what we
called the encrypted deck which will

349
00:26:42,759 --> 00:26:46,499
talk about a little bit more of this is
usually a crypto folder at the end of

350
00:26:46,499 --> 00:26:51,649
the the end of the user data partition
or some models it's a dedicated

351
00:26:51,649 --> 00:27:01,258
partition for this metadata so we have a
key derivation function very hard to see

352
00:27:01,259 --> 00:27:06,350
that screen I'm sorry but this is a lock
screen you can use up in the pattern or

353
00:27:06,350 --> 00:27:12,580
password on Android as you may know if
you use Android Google used PBK tf2 up

354
00:27:12,580 --> 00:27:17,449
until mid cap and then they split switch
to a script to protects against brute

355
00:27:17,450 --> 00:27:24,039
force attacks and we see that the house
where kids what generates here and then

356
00:27:24,039 --> 00:27:30,330
additionally in 5.0 Google introduced
with lollipop inability to sign the ski

357
00:27:30,330 --> 00:27:36,629
with hardware and so this is a feature
that is relatively new but it it

358
00:27:36,629 --> 00:27:41,070
basically prevents heart attacks at this
point because similar to iOS there is a

359
00:27:41,070 --> 00:27:44,970
component of the cryptography that make
them to hardware that you need to

360
00:27:44,970 --> 00:27:49,139
actually execute on the hardware so you
can't throw a ton of ramen and things

361
00:27:49,139 --> 00:27:53,240
that the problem anymore to try and
brute force you have to rely on running

362
00:27:53,240 --> 00:27:56,809
on the actual device at this point

363
00:27:56,809 --> 00:28:03,330
what we talked about for this conclusion
it's kind of a misnomer especially on

364
00:28:03,330 --> 00:28:06,720
Android because there's a single
partition out of all the many that you

365
00:28:06,720 --> 00:28:11,360
have on your device and that's the user
data partition and at the very end of it

366
00:28:11,360 --> 00:28:16,678
is the script for that I mentioned this
easily 16 kilobytes the card at IBM for

367
00:28:16,679 --> 00:28:21,990
all but two men today that story here
and as I mentioned sometimes more modern

368
00:28:21,990 --> 00:28:26,730
devices there's a dedicated partition
for this and the master key is stored

369
00:28:26,730 --> 00:28:31,309
here as I mentioned before if you're
familiar with lots its looks like but

370
00:28:31,309 --> 00:28:32,029
not quite

371
00:28:32,029 --> 00:28:37,049
because the water on the houseboat slot
available which is why you can't have

372
00:28:37,049 --> 00:28:41,340
separate boot and lock screen passengers
on the internet without using a custom

373
00:28:41,340 --> 00:28:49,499
ROM or something like that so we entered
credential store bpm keys asymmetric use

374
00:28:49,499 --> 00:28:52,990
wifi cues and things like that it's
encrypted by a key derived from the

375
00:28:52,990 --> 00:28:57,720
user's Pasco it can be hard we're back I
wanna models these days come with

376
00:28:57,720 --> 00:29:01,080
hardware about crypto storage which
means that the private views are not

377
00:29:01,080 --> 00:29:05,168
extractable from the device even if
you've written your hands up and it

378
00:29:05,169 --> 00:29:09,759
requires the use of the device in the
attack as I mentioned however there's

379
00:29:09,759 --> 00:29:13,779
some pretty serious problems with
keystore up until marshmallow which came

380
00:29:13,779 --> 00:29:18,509
out a month ago there's very
inconsistent protections applied and

381
00:29:18,509 --> 00:29:23,399
available to developers who use keystore
keystore really didn't become a very

382
00:29:23,399 --> 00:29:29,158
realistic option in my opinion until
$104 three anyway but there's there's a

383
00:29:29,159 --> 00:29:33,659
lot of issues with developers having
their keys just wiped from from the

384
00:29:33,659 --> 00:29:38,220
device and a lot of issues filed on
Google's code base on why this is

385
00:29:38,220 --> 00:29:42,490
happening and you know not being able to
even reproduce the same steps that cause

386
00:29:42,490 --> 00:29:45,799
these keys to be deleted so
unfortunately a lot of the apps we

387
00:29:45,799 --> 00:29:49,779
review the feedback from the developers
as well we can't trust the key source of

388
00:29:49,779 --> 00:29:53,490
we're just gonna do it ourself and look
this leads to the obvious problems with

389
00:29:53,490 --> 00:29:58,999
trying to do to secure score stories
outside of the platform luckily with

390
00:29:58,999 --> 00:30:03,499
marshmallow they've improved the scaly
there's very clearly defines results and

391
00:30:03,499 --> 00:30:05,810
expectations for using the keystore and

392
00:30:05,810 --> 00:30:11,899
and dimension excuse me earlier on the
slide with the the secret keys they

393
00:30:11,900 --> 00:30:15,930
cannot be stored in the keystore this
was only possible before using like an

394
00:30:15,930 --> 00:30:20,180
undocumented epi but now it's fully
supported so you can store arbitrary

395
00:30:20,180 --> 00:30:26,010
application secrets in the keystore as
well and not just a symmetric kids so

396
00:30:26,010 --> 00:30:29,970
very quickly we'll look at some changes
that marshmallows brought out as I

397
00:30:29,970 --> 00:30:36,270
mentioned earlier was introduced in 48
44 the Pasco but now we have her passing

398
00:30:36,270 --> 00:30:41,250
the unlock passcodes values are stored
in memory and this replaces the weaker

399
00:30:41,250 --> 00:30:46,290
shop 195 asking combination that they
used to use and as I mentioned that

400
00:30:46,290 --> 00:30:50,840
additional improvements we can start the
metric is now and we have additional

401
00:30:50,840 --> 00:30:57,620
properties turkeys so you can actually
say you can use the ECB you know you

402
00:30:57,620 --> 00:31:00,889
cannot have a pic diameter certain
meditative perimeter so you can enforce

403
00:31:00,890 --> 00:31:08,360
now with the key types and Nexus imprint
similar to touch idea this is relatively

404
00:31:08,360 --> 00:31:09,000
new

405
00:31:09,000 --> 00:31:14,550
came out with the new Nexus line a few
om so how to fingerprint scanner in the

406
00:31:14,550 --> 00:31:19,070
past but now there's sort of a unified
Android Open Source project version of

407
00:31:19,070 --> 00:31:23,320
this functionality and had through his
anal mentioned this allows for a much

408
00:31:23,320 --> 00:31:27,490
better passwords because now you only
really have to type your long Marley

409
00:31:27,490 --> 00:31:33,140
password one time when you boot and then
you can use the fingerprint on mark each

410
00:31:33,140 --> 00:31:37,380
time so if you get a new email you sit
there and type like 14 character passers

411
00:31:37,380 --> 00:31:42,000
time so hopefully that improves security
in the sense that it's much more usable

412
00:31:42,000 --> 00:31:46,110
now and people like to see just like
better passwords and it's something you

413
00:31:46,110 --> 00:31:50,429
have to enroll a password with to you so
you know just like I was gonna mention

414
00:31:50,430 --> 00:31:55,340
this this is a whimper security and it's
useful things like secure payments and

415
00:31:55,340 --> 00:32:02,480
repay the phone obviously you can
indicate similar to mention and this

416
00:32:02,480 --> 00:32:07,470
information is stored securely stored
and a trusted execution environment and

417
00:32:07,470 --> 00:32:11,600
hardware so this is again not
extractable even if you read your hands

418
00:32:11,600 --> 00:32:12,090
up

419
00:32:12,090 --> 00:32:16,070
and I think this really sucks that
define standards for other OEMs to

420
00:32:16,070 --> 00:32:22,100
follow now so I think this is a win in
terms of security but talking about

421
00:32:22,100 --> 00:32:25,850
Google in their own partners this is
where we start to get off the rails

422
00:32:25,850 --> 00:32:32,439
little bit here and unfortunately and
fortunately Android is a very diverse

423
00:32:32,440 --> 00:32:36,350
platform that allows to run on like the
most bare-bones hardware possible or

424
00:32:36,350 --> 00:32:40,129
like the highest and flagship but
unfortunately with that flexibility

425
00:32:40,130 --> 00:32:45,450
comes wildly inconsistent behavior in
terms of how these things are built the

426
00:32:45,450 --> 00:32:50,330
bill of security is totally different on
a lot of devices we may or may not have

427
00:32:50,330 --> 00:32:53,270
hardware about crypto storage
capabilities based on the price of the

428
00:32:53,270 --> 00:32:57,690
device in may or may not have a trust so
nor trusted execution environment

429
00:32:57,690 --> 00:33:02,140
component and even the boot image type
can be agreed upon we have differences

430
00:33:02,140 --> 00:33:08,690
in how even these devices boot up and
decides to protect things differently

431
00:33:08,690 --> 00:33:13,590
and so we have different protection
schemes and play some OEM like HTC will

432
00:33:13,590 --> 00:33:17,889
and you know employees right protection
on the MMC so even if you achieve buried

433
00:33:17,890 --> 00:33:21,919
in the operating system and you try to
override a partition will silently

434
00:33:21,919 --> 00:33:27,510
discard the right because the protective
the hardware level we also have some OEM

435
00:33:27,510 --> 00:33:32,110
doing boot image signature verification
which is great and a lot of fun but do

436
00:33:32,110 --> 00:33:36,428
not do that which is very bad and we
also even have different bootloader

437
00:33:36,429 --> 00:33:39,490
types so we have ones that are
completely locked and have no

438
00:33:39,490 --> 00:33:43,710
possibility of being opened unless you
find the next week for them we have

439
00:33:43,710 --> 00:33:48,990
locked but unlockable which is becoming
more popular about the Nexus model

440
00:33:48,990 --> 00:33:53,919
that's also things that HTC and Sony
have a developer programs that by

441
00:33:53,919 --> 00:33:57,559
default week unlocked but you're still
there's a way to to get a key to unlock

442
00:33:57,559 --> 00:34:01,100
that so that you can run custom firmware
and then we have permits and by default

443
00:34:01,100 --> 00:34:08,330
we're just didn't care to fix this or or
enforce any sort of security here but

444
00:34:08,330 --> 00:34:13,098
unfortunately this is a very difficult
problem solver Google and it's it's

445
00:34:13,099 --> 00:34:18,649
challenging for dual to mandate certain
protections on their OEM partners and as

446
00:34:18,649 --> 00:34:21,440
a no mention that Apple has a very
distinct advantage here and that they

447
00:34:21,440 --> 00:34:26,168
control the entire stack so from top to
bottom they've designed it so that it's

448
00:34:26,168 --> 00:34:30,549
secure about to fall on Android it
really depends on the model and even the

449
00:34:30,550 --> 00:34:34,149
same model sold on different carriers in
different markets may have different

450
00:34:34,149 --> 00:34:40,899
protection so it's very nuanced problem
here so let's look at the importance of

451
00:34:40,899 --> 00:34:46,270
boot security so the ones and green I've
highlighted as being this is relatively

452
00:34:46,270 --> 00:34:50,139
secure the military has multiple chains
of trust and needs to pass off to

453
00:34:50,139 --> 00:34:53,089
secondary bootloader so I'm messing with
any of these is going to cause your

454
00:34:53,089 --> 00:34:57,560
device to basically break without doing
some sort of low-level Fox and then we

455
00:34:57,560 --> 00:35:02,619
have user data at the user has chosen to
actually wow this is very hard during

456
00:35:02,619 --> 00:35:08,480
this is a bit over this is user data
partition we're assuming that these are

457
00:35:08,480 --> 00:35:13,099
secure based on like the best
configurations possible however there's

458
00:35:13,099 --> 00:35:19,010
there's two problems in the setup to
boot image itself is vulnerable and

459
00:35:19,010 --> 00:35:22,570
whilst there is some image signing
verification in the bootloader because

460
00:35:22,570 --> 00:35:28,180
this is not encrypted and can be
overridden in many cases and the system

461
00:35:28,180 --> 00:35:32,960
partition which is where andrade like
coro US lives is vulnerable in the sense

462
00:35:32,960 --> 00:35:37,640
that it is read only when he booted up
in the in the operating system but there

463
00:35:37,640 --> 00:35:41,900
is no encryption protection or
verification here without something like

464
00:35:41,900 --> 00:35:46,099
diem varity which is a relatively new
thing that Google has rolled out with

465
00:35:46,099 --> 00:35:50,230
marshmallows on the Nexus line there
remains to be seen if other partners are

466
00:35:50,230 --> 00:35:57,150
gonna pick this up but this is important
because you know as they don't mention

467
00:35:57,150 --> 00:36:01,619
all of these things are signed on on
this is not really the case on Android

468
00:36:01,619 --> 00:36:05,770
and so let's look at some specific
reasons why we can modify some of those

469
00:36:05,770 --> 00:36:11,000
things and so let's talk now about
download so many people here have but

470
00:36:11,000 --> 00:36:18,070
Samsung devices quite a few ok so you as
you may or may not know simpson ships

471
00:36:18,070 --> 00:36:22,230
all their devices with the specific
blood or interface called Odin mode or

472
00:36:22,230 --> 00:36:27,180
download mode and this is a special boot
mode that you access by what we call the

473
00:36:27,180 --> 00:36:31,848
group of death which is notable key
presses at the same time and a certain

474
00:36:31,849 --> 00:36:37,569
scenario will beat you into this this
mode internally Samsung uses a tool

475
00:36:37,569 --> 00:36:41,580
called out in to interface with us this
is primarily used to flash firmware

476
00:36:41,580 --> 00:36:44,848
images directly to partitions on the MMC
itself

477
00:36:44,849 --> 00:36:50,760
unfortunately this is a close source
windows on the application and it's also

478
00:36:50,760 --> 00:36:55,609
a very terrible piece of software in my
opinion however a guy called been double

479
00:36:55,609 --> 00:36:59,660
from australia has created a product
called heimdal which is a cross-platform

480
00:36:59,660 --> 00:37:03,390
open-source version of the stool so if
you're interested in these things I

481
00:37:03,390 --> 00:37:06,680
would definitely recommend that you can
download it and bill yourself and

482
00:37:06,680 --> 00:37:13,040
running on any platform you desire for
Samsung this is a very overly permissive

483
00:37:13,040 --> 00:37:19,000
if you know about this mode and on very
on almost all of their devices you can

484
00:37:19,000 --> 00:37:23,560
directly right for more to device if you
have physical access to it there are

485
00:37:23,560 --> 00:37:30,109
some exceptions on us' carriers
specifically Verizon and AT&T enforce

486
00:37:30,109 --> 00:37:35,080
boot image verification on their devices
on their network on most of the Samsung

487
00:37:35,080 --> 00:37:41,880
devices they sell but internationally
and other us' carriers this protection

488
00:37:41,880 --> 00:37:46,180
is not enabled us to carry requests it
so you have a situation where you can

489
00:37:46,180 --> 00:37:48,098
rate for more directly to the device

490
00:37:48,099 --> 00:37:55,720
let's look at another example little
kernel boot loader which is called arms

491
00:37:55,720 --> 00:38:00,230
open source pillar there's been even
many issues with this and a lot of these

492
00:38:00,230 --> 00:38:05,050
stem from the fact that most of the code
is open source however each had their

493
00:38:05,050 --> 00:38:09,150
own sort of secret sauce to this when
they built it and don't always do this

494
00:38:09,150 --> 00:38:10,299
properly so

495
00:38:10,299 --> 00:38:15,529
there's a few CDs we called out that
would allow you to override bool images

496
00:38:15,529 --> 00:38:19,979
on your device if you if you could the
first one they just forgot to check

497
00:38:19,979 --> 00:38:24,569
whether fastboot boot the ability to
boot image so you could just be an

498
00:38:24,569 --> 00:38:28,579
arbitrary image on the device a single
time used that to root or do whatever

499
00:38:28,579 --> 00:38:33,359
you want to it the second one was a bug
in the signature parts and that all

500
00:38:33,359 --> 00:38:37,949
objects spoof your own signature so that
you can sign your own food image and the

501
00:38:37,949 --> 00:38:43,640
last one is relatively new in that when
you flash images usually with a spoon

502
00:38:43,640 --> 00:38:47,359
and per system their sparse bundle
images and they didn't really check

503
00:38:47,359 --> 00:38:51,799
where the end of the sparse bundle was
your system so if you often something

504
00:38:51,799 --> 00:38:56,299
sneaky you could override the boundary
of the system partition and potentially

505
00:38:56,299 --> 00:39:00,489
override other parts of the other
devices in the US and lastly the

506
00:39:00,489 --> 00:39:05,469
newcomer laugh which is aptly titled
because this is basically a hilarious

507
00:39:05,469 --> 00:39:11,630
back door unlocked LG devices shipped
you boot into it some other time you

508
00:39:11,630 --> 00:39:17,469
reboot into download mode on a Samsung
device and then use a single binary and

509
00:39:17,469 --> 00:39:21,829
provide the comport the devices plugged
into a near dropped into regional and so

510
00:39:21,829 --> 00:39:26,719
from there you can do all sorts of
terrible things to device / new images

511
00:39:26,719 --> 00:39:31,829
show anything you like they attempted to
fix this but they didn't really do it

512
00:39:31,829 --> 00:39:38,349
very well in the sense that they they
sort of protected the specific partition

513
00:39:38,349 --> 00:39:44,099
themselves and not the root of my so if
you use DVD and seek and cleverly rape

514
00:39:44,099 --> 00:39:49,170
the image you cannot overwrite you know
blocks 0 and still over at damage he

515
00:39:49,170 --> 00:39:55,910
wanted to take advantage of us so let's
revisit the idea that full disk

516
00:39:55,910 --> 00:40:00,069
encryption protects the device when it's
turned off we are suggesting that this

517
00:40:00,069 --> 00:40:05,299
is not always the case and so we'd like
to introduce Rosie are evil and evil

518
00:40:05,299 --> 00:40:12,469
made this exploit spermicide waters on
many handsets basically created a

519
00:40:12,469 --> 00:40:17,460
woman's using the open source GPL
version of the kernel from the OEM

520
00:40:17,460 --> 00:40:22,880
install the back door and in less than
two minutes we can completely back

521
00:40:22,880 --> 00:40:27,080
toward by sear the ideas that you do
this and give it back to the user

522
00:40:27,080 --> 00:40:32,250
they enter their decryption key and then
are our back door starts to work so you

523
00:40:32,250 --> 00:40:35,690
can actually grab the key itself you can
use the stored data exfiltration

524
00:40:35,690 --> 00:40:41,280
anything you can dream up so they're not
going to talk a little bit more about

525
00:40:41,280 --> 00:40:45,750
the specifics of how we do this

526
00:40:45,750 --> 00:40:51,710
thanks so first thing when we develop
this the first thing to do is to get

527
00:40:51,710 --> 00:40:55,310
into download mode and to flash on a
custom recovery

528
00:40:55,310 --> 00:41:01,029
custom recovery just allows us to put
into a secure and non-secure but in the

529
00:41:01,030 --> 00:41:06,030
environment but will not be able to
destroy them be fleshing help lessen our

530
00:41:06,030 --> 00:41:09,830
main operating system so just take a
small the lowest you can put into and

531
00:41:09,830 --> 00:41:14,560
you can perform like to buy and flashing
off code over there so the first thing

532
00:41:14,560 --> 00:41:19,740
we did and then as a second step we
develop our own or cuddle now if you can

533
00:41:19,740 --> 00:41:23,270
read this year but the editor could
affect or to simply by downloading the

534
00:41:23,270 --> 00:41:27,810
open source code is available for all
devices because of the delay just

535
00:41:27,810 --> 00:41:32,580
download the open source at a custom
kernel modules which remote ourselves at

536
00:41:32,580 --> 00:41:37,970
the show the condo compilat and then
after we had that we simply have tested

537
00:41:37,970 --> 00:41:43,098
it compiled it flashed equated it would
damage from that and would into the

538
00:41:43,099 --> 00:41:47,180
recovery flash it on their tried it out
and rinse and repeat until he found

539
00:41:47,180 --> 00:41:52,660
found everything was working now once
this is all done the only thing we need

540
00:41:52,660 --> 00:41:58,740
to do is go is flesh the enmity how so
the next the next level show you a video

541
00:41:58,740 --> 00:42:03,279
demo this and I hope the screen will
show that's probably where we will walk

542
00:42:03,280 --> 00:42:06,460
you through what's happening there

543
00:42:06,460 --> 00:42:15,250
so this is just a device is working here
we're turning it off and shot clock

544
00:42:15,250 --> 00:42:19,099
counter will start on the bottom of when
the device is fully off until the time

545
00:42:19,099 --> 00:42:24,109
it's actually pullback toward so you can
see me entering the permissibility here

546
00:42:24,109 --> 00:42:32,589
and saying a custom OS may cause issues
about Daniel here is loading car boot

547
00:42:32,589 --> 00:42:38,440
image into the flashing tour we click
flats and very quickly we can see it

548
00:42:38,440 --> 00:42:45,700
turns green top and now we're done so
that I suspect at this point and we're

549
00:42:45,700 --> 00:42:50,819
rebooting the device and then we'll talk
about what happens after that yes a

550
00:42:50,820 --> 00:42:54,810
little proof of concept rebuild its just
chipping office open file to a cloud

551
00:42:54,810 --> 00:42:59,880
provider so he does have a good listener
running somewhere on the cloud instance

552
00:42:59,880 --> 00:43:05,359
on a certain part and then we wait until
the user interest their credentials and

553
00:43:05,359 --> 00:43:12,690
eli has unlocked and then I'll off to
our server just to get the right saved

554
00:43:12,690 --> 00:43:18,430
you can't really see is listening on the
server and the leftist ideas but I take

555
00:43:18,430 --> 00:43:38,910
a few seconds

556
00:43:38,910 --> 00:43:50,509
here and I'm probably can't be because
the current classes are for opening it

557
00:43:50,510 --> 00:43:54,660
up to seek related debates of the
security council I believe which really

558
00:43:54,660 --> 00:44:00,230
not accessible to a regular user does
anybody into the device after this to

559
00:44:00,230 --> 00:44:07,480
show you a TV show and you try to access
the file you get an access denied so

560
00:44:07,480 --> 00:44:10,460
it's definitely a file that is not
accessible to the regular user and the

561
00:44:10,460 --> 00:44:13,319
device is not rooted there's no word on
this device is just our back door

562
00:44:13,319 --> 00:44:17,170
running and it's running in the car also
had running with elevated privileges and

563
00:44:17,170 --> 00:44:27,240
can grab whatever it once so where does
that leave us well this is possible on a

564
00:44:27,240 --> 00:44:32,500
number of selected the device shown
anything which allows us to flesh things

565
00:44:32,500 --> 00:44:35,430
I goldwater bilities true has been
talking about for all of those devices

566
00:44:35,430 --> 00:44:39,808
you can do this and it kind of put a new
picture on the Obama devices often

567
00:44:39,809 --> 00:44:42,609
nobody can do something to it well if
you leave it out of sight somebody may

568
00:44:42,609 --> 00:44:45,869
actually be able to Victoria and then
have a permanent foothold on your device

569
00:44:45,869 --> 00:44:51,599
because there's no water medication a
lot of these devices on a new problem in

570
00:44:51,599 --> 00:44:55,089
using this to flash custom firmware on
their devices for quite a while and

571
00:44:55,089 --> 00:44:59,319
that's also the reason why this may be a
teacher and who has some opinions on

572
00:44:59,319 --> 00:45:04,400
that and then now if you look at Marsh
mellow and other things there's

573
00:45:04,400 --> 00:45:07,289
definitely a mechanism to prevent this
first of all there is a way to verify

574
00:45:07,289 --> 00:45:13,510
that would change if you choose to also
since marshmallow snowmen dating that

575
00:45:13,510 --> 00:45:20,230
are acquiring and an opt-in to have this
feature so you need to put into the

576
00:45:20,230 --> 00:45:24,359
device locked with a passcode if you
have one and then say I want to allow

577
00:45:24,359 --> 00:45:29,190
the flashing firmware for images and
only then you can do that and so till

578
00:45:29,190 --> 00:45:32,680
then we all finally a marshmallow
virtual cleanup happening quite a while

579
00:45:32,680 --> 00:45:37,720
that may not be an issue anymore that's
a painted a similar attacks a possible

580
00:45:37,720 --> 00:45:41,259
iOS but they were obviously requires
jailbreaking which may be equally tricky

581
00:45:41,260 --> 00:45:45,230
because he may need to go to that

582
00:45:45,230 --> 00:45:54,190
so called Russo boxer I think by the
fall we want to see secured

583
00:45:54,190 --> 00:45:58,390
configurations I want to see that these
two letters are walked by the fall and

584
00:45:58,390 --> 00:46:03,330
not just locked but have a responsible
on my capability because one of the best

585
00:46:03,330 --> 00:46:06,420
things about Android and the reason I
got into security begin with this

586
00:46:06,420 --> 00:46:10,260
because of hacking on interest in
learning how things worked I wouldn't be

587
00:46:10,260 --> 00:46:14,450
able to do that at my door was locked
and i dont wanna run dangerous exploits

588
00:46:14,450 --> 00:46:18,720
to have to do that but I don't know what
they're doing to my device so in

589
00:46:18,720 --> 00:46:22,759
addition to having secure but we should
have a responsible I mark and I think

590
00:46:22,760 --> 00:46:27,050
clearly documented security guarantees
from OEM would be very helpful because

591
00:46:27,050 --> 00:46:31,109
as we mentioned you really don't know
when you're purchasing a device like

592
00:46:31,109 --> 00:46:34,670
what protections that has because
they're so vastly different even the

593
00:46:34,670 --> 00:46:38,200
model we showed in the demo there's like
five or six variants of that device

594
00:46:38,200 --> 00:46:41,299
which each have different productions
applied to it so it's not even like you

595
00:46:41,300 --> 00:46:45,310
can go buy a salesman and you really
have to know what to look for and that

596
00:46:45,310 --> 00:46:49,609
shouldn't be the case if we don't think
mostly just consistency among Google's

597
00:46:49,609 --> 00:46:54,960
OEM partners what's decide on 12 curable
other configuration that everyone

598
00:46:54,960 --> 00:47:02,369
acknowledges an axon and uses and not
have this wild master of we're different

599
00:47:02,369 --> 00:47:08,790
variations that we have right now so
we're quickly couple alternative supply

600
00:47:08,790 --> 00:47:14,220
for security if you don't trust either
Google or Apple here what can we do this

601
00:47:14,220 --> 00:47:19,490
just very briefly what do you do when
you don't have a spot on the device in

602
00:47:19,490 --> 00:47:25,229
either case on iOS or Android well what
most applications to think of good or

603
00:47:25,230 --> 00:47:29,119
any other mobile iron ore to suffer like
this but they do their own custom

604
00:47:29,119 --> 00:47:32,880
sandbox for the data and the same
mechanism at the operating system is a

605
00:47:32,880 --> 00:47:36,660
self-professed code that you have a key
from the past coat and then they used to

606
00:47:36,660 --> 00:47:41,230
encrypt the data on the device because
the same same process before you close

607
00:47:41,230 --> 00:47:46,210
the app that will be picky and you have
similar process to what the operating

608
00:47:46,210 --> 00:47:50,130
system provides the main problem has
number 12 is hard

609
00:47:50,130 --> 00:47:53,319
so it's really hard to get get this
right and do not make any mistakes

610
00:47:53,319 --> 00:47:56,920
implementing these kind of things and
then the second one is that there's no

611
00:47:56,920 --> 00:47:59,720
hard core banking recruiters protections
in this case because there's nothing

612
00:47:59,720 --> 00:48:03,558
which takes it to the device may be able
to integrate like an online step for the

613
00:48:03,559 --> 00:48:07,400
talking to a server and it's a sober
part and we can build something like

614
00:48:07,400 --> 00:48:11,779
this but if you need to access to the
data almost impossible to build probably

615
00:48:11,779 --> 00:48:17,019
precipitation could also just consider
not storing data plan but that's

616
00:48:17,019 --> 00:48:20,979
obviously also very difficult if it's
highly sensitive data just drop back to

617
00:48:20,980 --> 00:48:24,000
the old paradigm to just pulled it on
demand and don't stored on the device

618
00:48:24,000 --> 00:48:29,359
but at least log-in credentials will
probably still be story because

619
00:48:29,359 --> 00:48:33,038
otherwise you will need to log in every
single time and maybe a banking up or

620
00:48:33,039 --> 00:48:38,740
something which people care about a lot
this will not be acceptable so where

621
00:48:38,740 --> 00:48:43,649
does this leave us well we think for
developers for users who will talk about

622
00:48:43,650 --> 00:48:48,009
some best practices here obviously the
the passcode is for you this is really

623
00:48:48,009 --> 00:48:52,490
important factor sensitize into so many
parts of the ecosystem and it ties into

624
00:48:52,490 --> 00:48:58,470
how it works and when Davis protect them
and it's not by Wes and maybe trouble

625
00:48:58,470 --> 00:49:01,930
for you to enable typing of the device
that somebody can

626
00:49:01,930 --> 00:49:08,690
on device could force things YouTube
videos on Android you will have some

627
00:49:08,690 --> 00:49:13,529
sort of mentioned choose your phone
wisely

628
00:49:13,529 --> 00:49:17,009
this is something that unfortunately
right now is very much something you

629
00:49:17,009 --> 00:49:22,220
have to research yourself and and figure
out what the best devices and what the

630
00:49:22,220 --> 00:49:27,279
most secure devices for whatever needs
you have for data storage and as I

631
00:49:27,279 --> 00:49:31,269
mentioned user data encryption is is
unelectable feature still at this point

632
00:49:31,269 --> 00:49:36,828
so encrypt your device take the extra
step and even though we've shown how

633
00:49:36,829 --> 00:49:41,539
sometimes you can get around that you're
so protecting yourself in a way that is

634
00:49:41,539 --> 00:49:45,390
reasonable and for developers

635
00:49:45,390 --> 00:49:49,109
you know in general as we mentioned
determine if you really have to store

636
00:49:49,109 --> 00:49:52,690
this data locally obviously this is a
case-by-case situation in which a

637
00:49:52,690 --> 00:49:56,269
blanket statement is not great poor but
something to think about when you're

638
00:49:56,269 --> 00:49:59,669
developing an application doing really
have to store this or can I just pulled

639
00:49:59,670 --> 00:50:00,820
us each time I need it

640
00:50:00,820 --> 00:50:05,450
on Android I think that we've shown that
rely on popcorn security can be

641
00:50:05,450 --> 00:50:08,649
challenging because of the various
different versions of Android out there

642
00:50:08,650 --> 00:50:12,860
and all the different protections they
have and you know sort of a discussion

643
00:50:12,860 --> 00:50:17,380
point for afterwards as is at what point
do we stop supporting over into Mandarin

644
00:50:17,380 --> 00:50:21,240
as developers and software developers is
there a point where we say it's not

645
00:50:21,240 --> 00:50:27,629
worth the security risk for the app for
the iOS I also use some protection class

646
00:50:27,630 --> 00:50:31,270
that incorporates the passcode and
storing data sensitive data at least on

647
00:50:31,270 --> 00:50:34,870
the file system or in the keychain and
other you can test whether there's a

648
00:50:34,870 --> 00:50:40,049
passcode said using some of the new API
is either one the user that they did not

649
00:50:40,050 --> 00:50:44,190
take you to store it or refused to store
it or do something that the user at

650
00:50:44,190 --> 00:50:47,190
least have some insight into what
they're doing to themselves if they

651
00:50:47,190 --> 00:50:56,180
don't like that so looking forward the
road ahead what we think is take the

652
00:50:56,180 --> 00:50:59,529
next make some of the next things which
we definitely should tackle you seen

653
00:50:59,530 --> 00:51:04,650
that we need something beyond passwords
whole tragedy and the new Nexus Nexus

654
00:51:04,650 --> 00:51:08,720
features are definitely right step in
the right direction to make his ability

655
00:51:08,720 --> 00:51:13,259
easier and at the same time improve
security because they having encouraging

656
00:51:13,260 --> 00:51:18,340
people to use security she chose by then
on the developer site we need more

657
00:51:18,340 --> 00:51:22,210
consistency and that's probably more of
an Android thing that it is an iOS

658
00:51:22,210 --> 00:51:27,720
things but even the iOS documentation
and all these things are hard to follow

659
00:51:27,720 --> 00:51:31,109
and accepts very difficult to figure out
what protections which of these things

660
00:51:31,110 --> 00:51:34,370
actually giving you and in the end right
side there's a passenger front

661
00:51:34,370 --> 00:51:38,830
inconsistencies between platforms and
default settings which are not very sane

662
00:51:38,830 --> 00:51:42,880
so may be helpful to improve those

663
00:51:42,880 --> 00:51:47,559
so are our takeaways we hope you got
from the presentation security control

664
00:51:47,559 --> 00:51:51,089
should be balanced with data sensitivity
and the threat model you're worried

665
00:51:51,089 --> 00:51:57,009
about protecting data until access is
actually needed and Lesley secure

666
00:51:57,009 --> 00:52:01,430
storage relies on the entire stack being
secured not just one small part of it as

667
00:52:01,430 --> 00:52:06,819
we've demonstrated here in the demo so
here's some references free to read up

668
00:52:06,819 --> 00:52:10,460
on some of the bugs that we've talked
about or are some of the tools reviews

669
00:52:10,460 --> 00:52:15,329
and thanks everyone this is Twitter
information and the slide action be

670
00:52:15,329 --> 00:52:23,859
available here and probably 20 minutes
or so afterwards

671
00:52:23,859 --> 00:53:20,220
it stored in the securing clip in the
component is not accessible from the

672
00:53:20,220 --> 00:53:23,859
main processor directly so when you
unlock the device the first time after

673
00:53:23,859 --> 00:53:27,450
you booted up in the air right the key
and store it and then it will be

674
00:53:27,450 --> 00:53:31,399
protected by the Dutch city so when you
put the fingerprint on it will release

675
00:53:31,400 --> 00:53:36,339
the key outside of the securing clay 44
the secret love to be used to decrypt

676
00:53:36,339 --> 00:53:45,440
things so it's stored in the secure part
of the CPU us put it that way you can

677
00:53:45,440 --> 00:53:49,859
get it off it's just like the operating
system for all we know we can get it off

678
00:53:49,859 --> 00:53:54,980
the operating system of stella is key to
decrypt this data and decrypted but you

679
00:53:54,980 --> 00:53:59,720
can't actually get the key to do
something with it and run on the next

680
00:53:59,720 --> 00:54:04,140
important stuff least for the latest
Nexus devices that have come out this is

681
00:54:04,140 --> 00:54:08,190
all backed by a trusted execution of
armored truck so sort of components or

682
00:54:08,190 --> 00:54:12,259
somewhere to how Apple handles this it's
in hardware and it's not extractable

683
00:54:12,259 --> 00:54:17,400
even as route from the platform so at
least right now that's that's the

684
00:54:17,400 --> 00:54:22,370
guarantee we have on it

685
00:54:22,370 --> 00:54:53,960
yes I used to have that right that you
can say it has to be fingerprinted or it

686
00:54:53,960 --> 00:54:58,170
has to be the passcode and now the
access control to now have a future

687
00:54:58,170 --> 00:55:02,980
where you can require one or the other
but that's only in the next 10 you can

688
00:55:02,980 --> 00:55:07,060
say when you read something on the
keychain you require user authentication

689
00:55:07,060 --> 00:55:10,390
at that point that you put your finger
on or you type in the passcode you can

690
00:55:10,390 --> 00:55:46,859
say that you want to finger yes

691
00:55:46,859 --> 00:56:05,619
do something so it's your testimony
specifically targeting you and wants to

692
00:56:05,619 --> 00:56:09,170
get your phone yet they can do that but
he sure just want to protect against

693
00:56:09,170 --> 00:56:12,660
somebody stealing your phone and not
being that sophisticated to actually

694
00:56:12,660 --> 00:56:15,819
follow you and lift a fingerprint done
it's probably better than having no

695
00:56:15,819 --> 00:56:21,089
passcode on the ice and it's not a thing
upon itself to store their data which is

696
00:56:21,089 --> 00:56:25,160
all that data derived from your
fingerprint that you can reconstruct the

697
00:56:25,160 --> 00:56:28,930
fingerprint from their data kind of like
it's not only by the test the same

698
00:56:28,930 --> 00:56:34,740
property that you can we were so
basically just on that point

699
00:56:34,740 --> 00:56:40,009
Google actually call that out of Ceresco
using the Nexus implying that it may be

700
00:56:40,010 --> 00:56:46,089
possible to recover fingerprints so it's
something that if someone's attacking

701
00:56:46,089 --> 00:56:54,820
you specifically about yeah that's not
possible

702
00:56:54,820 --> 00:56:57,160
but yes

