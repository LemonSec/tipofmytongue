1
00:00:00,000 --> 00:00:09,469
are we okay to start ok well so you know
everyone my name is Francisco this talk

2
00:00:09,469 --> 00:00:16,650
is called exploiting adobe flash player
in the iran-contra ProGuard so first

3
00:00:16,650 --> 00:00:22,560
mandatory interaction my name is
Francisco I am an expert writer for

4
00:00:22,560 --> 00:00:29,419
security I'm from Argentina on i mean
they're stupid stuff such as minority

5
00:00:29,420 --> 00:00:35,969
research exploitation reverse
engineering and that kind of stuff so

6
00:00:35,969 --> 00:00:41,370
this is the agenda for this stock would
start with a leader overview of

7
00:00:41,370 --> 00:00:45,890
controversial guard then we'll see a
quick overview of the series

8
00:00:45,890 --> 00:00:53,500
2015 03 11 which was a use after free
vulnerability affecting Flash Player

9
00:00:53,500 --> 00:00:59,760
which was the starting point for this
research then we'll move on to see how

10
00:00:59,760 --> 00:01:04,679
to leverage the just-in-time compiler of
flash in order to bypass the CFG

11
00:01:04,680 --> 00:01:09,640
mitigation and also we'll see how I
don't be disheartened the just-in-time

12
00:01:09,640 --> 00:01:15,950
compiler of flash the second part of the
talk is about the only attacks and we

13
00:01:15,950 --> 00:01:20,049
are going to see to see three they'd
only attacks against for Flash Player

14
00:01:20,049 --> 00:01:25,080
they are how to gain unauthorized access
to the camera and microphone for the

15
00:01:25,080 --> 00:01:30,039
user how to gain unauthorized access to
a local file system of the user I'm

16
00:01:30,040 --> 00:01:35,500
finally how to execute arbitrary code
without using shellcode northrup and

17
00:01:35,500 --> 00:01:43,200
we'll have the most likely most of these
three day down the attacks so let's

18
00:01:43,200 --> 00:01:48,640
start with a quick overview of control
program controversial guard is one of

19
00:01:48,640 --> 00:01:53,840
the latest exploitation mitigations
implemented by Microsoft and this

20
00:01:53,840 --> 00:01:58,219
mediation focuses on making harder to
exploit memory corruption vulnerability

21
00:01:58,219 --> 00:02:05,339
is specifically those cases in which the
attacker is able to encode execution by

22
00:02:05,340 --> 00:02:10,170
providing a function pointer that these
later called through an indirect call

23
00:02:10,169 --> 00:02:15,049
that is typically the case of memory
corruption vulnerabilities when the

24
00:02:15,050 --> 00:02:20,410
attacker to operate a function pointer
or use of the free one and abilities in

25
00:02:20,410 --> 00:02:26,549
which the attacker can craft chamber for
a free ball shaped that kind of

26
00:02:26,550 --> 00:02:34,140
vulnerabilities so what does control
program do was controversial guard works

27
00:02:34,140 --> 00:02:40,160
by checking that the targeted areas of
injury up call one of the other cities

28
00:02:40,160 --> 00:02:46,290
identified us money at compile time and
this medication needs support from both

29
00:02:46,290 --> 00:02:51,739
the compiler and the operating system
from the compiler side it is supported

30
00:02:51,739 --> 00:02:58,670
by the latest visual studio version that
is we should studio 2015 and on the

31
00:02:58,670 --> 00:03:04,530
operating system side it is supported by
Windows ignored 13 which was released

32
00:03:04,530 --> 00:03:12,030
one year ago in November 2014 and also
on Windows time since its technical

33
00:03:12,030 --> 00:03:18,850
preview so one interesting thing about
the Flash Player plugin for Internet

34
00:03:18,850 --> 00:03:24,730
Explorer is that starting from Windows
side and including Windows I don't want

35
00:03:24,730 --> 00:03:30,488
and we understand this Flash Player
plugin for Internet Explorer is now part

36
00:03:30,489 --> 00:03:35,010
of the operating system its integrated
into windows and microsoft is providing

37
00:03:35,010 --> 00:03:41,390
the security patches for it and this
integrated version of Flash is being

38
00:03:41,390 --> 00:03:48,029
compiled using the latest measures to
your compiler which is CFG aware if you

39
00:03:48,030 --> 00:03:52,569
really want to know about the internals
of this medication I can recommend you

40
00:03:52,569 --> 00:03:57,089
these two papers the first one is called
Windows 10 controversial guard internals

41
00:03:57,090 --> 00:04:03,090
by researcher and J 00 11 which was
presented at the power of community

42
00:04:03,090 --> 00:04:10,420
conference last year and also exploring
control program in Windows turn by shut

43
00:04:10,420 --> 00:04:13,170
down from turn micro

44
00:04:13,170 --> 00:04:20,469
so under 40 guard protects indirect
caused by voting culture evaluation

45
00:04:20,470 --> 00:04:27,889
function before indirect costs and this
is a screen capture from either pro

46
00:04:27,889 --> 00:04:34,250
showing that in the Flash Player binary
for Windows a dot one controversial

47
00:04:34,250 --> 00:04:43,669
guard is protecting more than 29,000
indirect costs so let's move on to a

48
00:04:43,669 --> 00:04:50,780
leader overview of the CBE 2015 or 311
vulnerability which was in use of the

49
00:04:50,780 --> 00:04:56,239
free one and only affecting Flash Player
this work was fine was found exploited

50
00:04:56,240 --> 00:05:01,300
in the wild in Charlotte this year and
this was the starting point for this

51
00:05:01,300 --> 00:05:08,229
research this one is textbook you
software free affecting flash the

52
00:05:08,229 --> 00:05:13,760
vulnerable function is called uncompress
we are celebrating this vulnerability

53
00:05:13,760 --> 00:05:20,870
happens when the compressing about our I
containing corrupted celeb data these

54
00:05:20,870 --> 00:05:26,090
mega function will free buffer while
keeping a reference while it's possible

55
00:05:26,090 --> 00:05:29,039
to keep a reference to it in the domain
memory

56
00:05:29,039 --> 00:05:36,140
lower property which is a property of
ActionScript so the expectation plan is

57
00:05:36,140 --> 00:05:42,610
the regular one for use of the freeman
inability once the once the free has

58
00:05:42,610 --> 00:05:49,320
happened we need to feel that memory
hole with some other object and typical

59
00:05:49,320 --> 00:05:55,979
way in flash was to allocate a better
option in that memory hole so the domain

60
00:05:55,979 --> 00:06:00,300
mom they're the main memory brother
property is supposed to point to an

61
00:06:00,300 --> 00:06:05,720
array of bytes but instead now it's
pointing to a better option that we

62
00:06:05,720 --> 00:06:13,900
managed to put in that memory hole so
let's see this in a way this is the

63
00:06:13,900 --> 00:06:22,020
normal state of the domain memory
property pointing to a plane flights but

64
00:06:22,020 --> 00:06:27,680
after the use of the Freak after the
free Skype and the main memory constant

65
00:06:27,680 --> 00:06:33,039
reference that buffer and we managed to
occupy dart memory hole with a better

66
00:06:33,039 --> 00:06:38,818
option so we are occupying that memory
hole with a better option which contains

67
00:06:38,819 --> 00:06:43,159
an element of the web stores but also
the mythology of the better I'm that

68
00:06:43,159 --> 00:06:49,770
contains a pointer to the table and also
the length of the vector and visitor

69
00:06:49,770 --> 00:06:55,930
object was really useful for upgradation
purposes because we can corrupt this

70
00:06:55,930 --> 00:07:03,380
length field and if we operated with a
really high guy you like a thought we

71
00:07:03,380 --> 00:07:09,319
can go in arbitrary of reason right
memory access to the whole memory

72
00:07:09,319 --> 00:07:15,550
process process number sorry so what was
the expectation approach before the

73
00:07:15,550 --> 00:07:21,129
existence of control program for example
on Windows seven while the first

74
00:07:21,129 --> 00:07:25,530
expedition step was to operate the
length of the website or in order to

75
00:07:25,530 --> 00:07:30,789
gain of which are you read and write
memory access the second step is to

76
00:07:30,789 --> 00:07:36,039
override the beat a member of the Better
filled with the address of corruption

77
00:07:36,039 --> 00:07:41,680
and finally we need to call you Tom a
thought on that corrupted better option

78
00:07:41,680 --> 00:07:48,020
in order to start our up change so
what's different when we have control

79
00:07:48,020 --> 00:07:55,599
program enabled for example on Windows 8
2013 while the difference is in the last

80
00:07:55,599 --> 00:07:59,880
step when calling bill thomas of the
corruptor object for example the

81
00:07:59,880 --> 00:08:05,800
toString method in that case contraflow
guard will detect that we are trying to

82
00:08:05,800 --> 00:08:11,009
hijack the normal execution flow when we
are trying to call our first problem

83
00:08:11,009 --> 00:08:17,279
shit because it is not marked as invalid
address so application will detect the

84
00:08:17,279 --> 00:08:24,020
security friend or exit immediately
before we can get code execution at the

85
00:08:24,020 --> 00:08:25,750
winery level this is

86
00:08:25,750 --> 00:08:30,220
the part of the cold where we can gain
code execution in a partial flash

87
00:08:30,220 --> 00:08:36,770
without CFG it the references the
material of the object then it grabs the

88
00:08:36,770 --> 00:08:42,370
second function pointer from the image
over and then it calls it that coal

89
00:08:42,370 --> 00:08:48,750
India instruction which is an indirect
and there is where we start our up

90
00:08:48,750 --> 00:08:55,350
change for example on Windows seven this
is the very same part of the cold with

91
00:08:55,350 --> 00:09:02,500
CFD and I i gettin yellow you can see a
call to the card check i'd call pointer

92
00:09:02,500 --> 00:09:09,900
that disappointed to the CFG valuation
function so you can see before doing the

93
00:09:09,900 --> 00:09:13,890
indirect or in this case design call

94
00:09:13,890 --> 00:09:19,850
instruction it caused evaluation
function that one will detect that we

95
00:09:19,850 --> 00:09:26,480
are trying to execute an invalid address
so it will terminate immediately when

96
00:09:26,480 --> 00:09:30,880
contraflow guard protects according to
an invalid address it will execute that

97
00:09:30,880 --> 00:09:36,420
interruption 29 which means that they
always has found a security failure so

98
00:09:36,420 --> 00:09:45,030
execution stops immediately so let's see
if you approaches on how we can try to

99
00:09:45,030 --> 00:09:49,370
bypass this controversial guard
mediation

100
00:09:49,370 --> 00:09:54,800
this is just a note for the rest of the
talk I'm only talking a lot about

101
00:09:54,800 --> 00:10:00,620
reinvite memory primitives in this case
explained before against these

102
00:10:00,620 --> 00:10:06,839
primitives by overwriting the length of
a better but you probably could use any

103
00:10:06,839 --> 00:10:14,910
other memory primitives Union as long as
you obtain them so this is a list of

104
00:10:14,910 --> 00:10:19,689
ideas on how to approach the FG this is
not comprehensive but all because there

105
00:10:19,690 --> 00:10:24,350
are a lot more ideas these are a few
things I tried when trying to spread

106
00:10:24,350 --> 00:10:29,600
this Wendy s to overwrite a return
address on the stock because return

107
00:10:29,600 --> 00:10:36,420
addresses are not protected by the FG
however I wasn't able to determine the

108
00:10:36,420 --> 00:10:41,130
others of the threads stock from my
starting point so that I didn't work for

109
00:10:41,130 --> 00:10:46,920
me another idea is to take advantage of
another module loaded in the same

110
00:10:46,920 --> 00:10:54,400
process which may be compiled with no
CFG support but this is not the case

111
00:10:54,400 --> 00:11:00,839
Internet Explorer because every model is
compiled using CFG another approach may

112
00:11:00,839 --> 00:11:06,410
be to find indirect costs which for some
reason we're not protected by control

113
00:11:06,410 --> 00:11:09,630
program let's focus on this idea

114
00:11:09,630 --> 00:11:17,990
ideally we need an indirect corn which
is not protected by sea of gene that we

115
00:11:17,990 --> 00:11:24,110
can call in a straightforward way and
even better if at the time the indirect

116
00:11:24,110 --> 00:11:30,410
coleus execute we have a CBE register
pointing to us so it's easier for us to

117
00:11:30,410 --> 00:11:38,290
be bought the stock on starts were up
chain so I said before when describing

118
00:11:38,290 --> 00:11:43,610
contraflow guard controversial guard
protects interrupt 'cause that could be

119
00:11:43,610 --> 00:11:49,620
identified at compile time so the
question here is are there any indirect

120
00:11:49,620 --> 00:11:54,510
costs in Flash Player which are not
protected sorry which are not generated

121
00:11:54,510 --> 00:12:02,500
at runtime compliant I'm sorry and the
answer is yes there are so here it comes

122
00:12:02,500 --> 00:12:07,380
this just-in-time compiler of rush to
the rescue the code generated by the

123
00:12:07,380 --> 00:12:13,320
just-in-time compiler fresh does contain
indirect costs and since this code is

124
00:12:13,320 --> 00:12:19,740
generated a grand time it is not
protected by controversial guard so

125
00:12:19,740 --> 00:12:24,240
serious historical note this
just-in-time compiler of russia has been

126
00:12:24,240 --> 00:12:29,010
proved useful for expedition purposes in
the past in order to bypass mediations

127
00:12:29,010 --> 00:12:33,860
for example you can take a look at these
two papers this was the first one is

128
00:12:33,860 --> 00:12:37,290
called pointer in France and
just-in-time spraying by the

129
00:12:37,290 --> 00:12:42,349
universities and the second one by fair
means or not which is called for us

130
00:12:42,350 --> 00:12:46,740
rush just in time spraying in Pollock
options

131
00:12:46,740 --> 00:12:51,740
so let's see how to leverage this
just-in-time compiler of trash in order

132
00:12:51,740 --> 00:12:58,089
to bypass controversial guard from our
action script code we can create a byte

133
00:12:58,089 --> 00:13:04,410
array containing our chain if we take a
look at the internal representation of

134
00:13:04,410 --> 00:13:11,089
these rights are adoption we can see
that offset eight pointer to be table

135
00:13:11,089 --> 00:13:17,050
options and then I'm off these classes
are taking from the ABM + source code

136
00:13:17,050 --> 00:13:22,310
which is an open source release of the
action script Builder mission it is

137
00:13:22,310 --> 00:13:28,260
available on github so if you are
working on trust you you might find it

138
00:13:28,260 --> 00:13:34,230
useful so I posted of our by Tom right
we have a pointer to admit table options

139
00:13:34,230 --> 00:13:40,450
let's follow it on here we have the
retail object which contains a lot of

140
00:13:40,450 --> 00:13:47,750
pointers to objects of type massive and
let's focus on the matter of emotion

141
00:13:47,750 --> 00:13:58,350
address is the story at Oxford OXF
before production

142
00:13:58,350 --> 00:14:12,060
so this is set to suppress is stored at
offset OSD for of Libya tabor not again

143
00:14:12,060 --> 00:14:20,339
so the second a world of this method
that's it thank you

144
00:14:20,340 --> 00:14:26,090
so the second award of this method a
mortgage debt is a function pointer that

145
00:14:26,090 --> 00:14:34,230
is the second one whose value is 61 C
0:17 dysfunction points are is really

146
00:14:34,230 --> 00:14:39,960
interesting because it's called through
on anger and indirect call from code

147
00:14:39,960 --> 00:14:47,150
generated by the show since I'm compiler
fresh look this piece of code is called

148
00:14:47,150 --> 00:14:50,800
the generated at the wrong time by the
shutdown compiler so it's located

149
00:14:50,800 --> 00:14:57,370
somewhere on the hip first we can see
the comments it grabs the address of the

150
00:14:57,370 --> 00:15:01,650
voter ID card shipped it the references
the other side of the beach every object

151
00:15:01,650 --> 00:15:08,050
from offset it then it grabs the method
of shock from offset differ of the table

152
00:15:08,050 --> 00:15:15,420
and it rubs the function pointer located
at offset for of the method option and

153
00:15:15,420 --> 00:15:19,199
finally it cause it through that
indirect costs which is the call

154
00:15:19,200 --> 00:15:24,910
EAX instruction so it's calling a
function pointer with an indirect call

155
00:15:24,910 --> 00:15:32,270
there's no controversial guard here even
better this code can be easily triggered

156
00:15:32,270 --> 00:15:37,750
by calling the testing method on our
bikes are options concerning our

157
00:15:37,750 --> 00:15:44,740
obtained so so far we know how to
trigger in his truck driver was

158
00:15:44,740 --> 00:15:51,370
uninjured call which is not protected by
CFG what we need to do is to put a

159
00:15:51,370 --> 00:15:58,080
pointer to affect metal object of said
OSD for Debbie table options on the

160
00:15:58,080 --> 00:16:01,100
senate version of benefits are due time
.

161
00:16:01,100 --> 00:16:08,400
EAX instruction is execute we have an
exploiter pointing to a word they die so

162
00:16:08,400 --> 00:16:15,660
the stock is really see from there let's
explain this in a way which would be

163
00:16:15,660 --> 00:16:21,329
easier they are we have our byte array
of options this is its internal

164
00:16:21,330 --> 00:16:26,600
representation it contains a pointer to
a buffer option which in turn contains a

165
00:16:26,600 --> 00:16:33,230
pointer to the actual data of the IRA
but will focus on the right side of the

166
00:16:33,230 --> 00:16:39,660
screen out of sorts of the right time we
we come see a pointer to the table

167
00:16:39,660 --> 00:16:45,630
options and I've said before their
support for to DeMatha shipped right

168
00:16:45,630 --> 00:16:51,090
there and you can see the function
pointer that is called through the

169
00:16:51,090 --> 00:16:57,520
unprotected indirect court so by using
our freedom right primitives the idea is

170
00:16:57,520 --> 00:17:00,079
to modify that state

171
00:17:00,080 --> 00:17:08,540
override the pointer at offset differ of
the Chamber's so it looks like this you

172
00:17:08,540 --> 00:17:10,060
got it out now

173
00:17:10,060 --> 00:17:17,909
whichever works before we have a point
or two were obtained so our option will

174
00:17:17,910 --> 00:17:23,580
be interpreted us . method involves
shipped so when we called twist ring on

175
00:17:23,579 --> 00:17:34,570
this modified I will get on a protected
card to the second the work of change so

176
00:17:34,570 --> 00:17:40,629
implementing this idea from ActionScript
looks ladies first assuming that would

177
00:17:40,630 --> 00:17:44,620
have read and write primitives first we
need to determine the address of the big

178
00:17:44,620 --> 00:17:49,709
table options that is about calculating
the address of biochar a blast it and

179
00:17:49,710 --> 00:17:55,100
the target address for the overwrite
will be the other software retailer last

180
00:17:55,100 --> 00:18:01,600
before and then we just need to override
Dr dress with the others were obtained

181
00:18:01,600 --> 00:18:06,480
just us on implementation note you can
see that I'm storing the other software

182
00:18:06,480 --> 00:18:11,640
up change if the three times to the
right and that is because there is no

183
00:18:11,640 --> 00:18:17,500
prob chain is a parable of type int
which internally is represented us

184
00:18:17,500 --> 00:18:18,269
shifted

185
00:18:18,269 --> 00:18:26,489
three times to left so I'm this way I'm
storing it the way I need it so finally

186
00:18:26,489 --> 00:18:31,940
we need to call the twisting metal on
the corrupted by direct object this is

187
00:18:31,940 --> 00:18:38,509
as simple as these this way we start our
rupturing and we bypass control program

188
00:18:38,509 --> 00:18:45,009
so you may be asking what's the current
status of this technique while I don't

189
00:18:45,009 --> 00:18:55,159
be killed it in Flash version 1000 . 194
which was published in June this year on

190
00:18:55,159 --> 00:18:56,409
the suicide note

191
00:18:56,409 --> 00:19:01,499
Google+ card and the better option in
July this year with additional

192
00:19:01,499 --> 00:19:07,589
improvements in August this year so if
you're looking to obtain freedom wrote

193
00:19:07,589 --> 00:19:12,958
produced you may need to find another
way because the better our technique

194
00:19:12,959 --> 00:19:21,899
will not work anymore so I said I don't
be killed this CFG bypass technique

195
00:19:21,899 --> 00:19:24,289
let's see how they did it

196
00:19:24,289 --> 00:19:34,119
this but I told you about hardening of
ash released on June shown this year

197
00:19:34,119 --> 00:19:39,599
contains two main hardening measures for
the shower scenes on compiler flush the

198
00:19:39,599 --> 00:19:44,939
first one is one just in time code is
this source of an indirect corn on the

199
00:19:44,940 --> 00:19:51,119
second one is when just-in-time code is
the destination of indirect course hour

200
00:19:51,119 --> 00:19:56,089
by bus technique is cleared the first
way that is when just in time code

201
00:19:56,089 --> 00:20:02,200
contains an indirect cause now what they
are doing is to be made according to the

202
00:20:02,200 --> 00:20:07,649
CFTC valuation function before indirect
cause in the code generated at runtime

203
00:20:07,649 --> 00:20:14,579
in the second case they are using new
memory management flags which are based

204
00:20:14,579 --> 00:20:18,950
are made in Mali them based on Get Smart
that a new memory memory management

205
00:20:18,950 --> 00:20:23,239
functions like said process but it's
called targets which is a new windows

206
00:20:23,239 --> 00:20:27,490
turn ABI so regarding the

207
00:20:27,490 --> 00:20:32,470
first part that is protecting when the
shuttle time code is this source of

208
00:20:32,470 --> 00:20:38,550
India call this is what they are doing
there are no more indirect course

209
00:20:38,550 --> 00:20:44,090
interesting time called missus what they
are doing to kill this technique as you

210
00:20:44,090 --> 00:20:47,870
can see there's an indirect called there
at the call

211
00:20:47,870 --> 00:20:56,100
instruction however you cannot hear i
gettin ready now there's according to

212
00:20:56,100 --> 00:21:03,879
the CFG valuation function so the
technique is now dead so let's see the

213
00:21:03,880 --> 00:21:11,940
other part that these sorry well just in
time code is the destination of indirect

214
00:21:11,940 --> 00:21:17,860
costs so if you take a look at this
article called memory protection

215
00:21:17,860 --> 00:21:25,110
constants in MSDN you can see that when
you called built a log in order to

216
00:21:25,110 --> 00:21:30,928
allocate memory region with execute
permissions all locations within that

217
00:21:30,929 --> 00:21:37,090
memory region will be marked us ballad
called targets for CFG on in a similar

218
00:21:37,090 --> 00:21:42,050
way if you could better protect in order
to change the permissions of animal

219
00:21:42,050 --> 00:21:47,639
origin to execute permissions undermines
basic secured rail station execute

220
00:21:47,640 --> 00:21:55,140
retried page execute breathe right copy
I don't remember the exact name every

221
00:21:55,140 --> 00:22:00,890
location within that memory region will
be marked as political target for CFG

222
00:22:00,890 --> 00:22:09,480
why is this well this is the pseudocode
of just-in-time compilers which are not

223
00:22:09,480 --> 00:22:15,030
aware of CFU first usually they're
shutting down compiler will start by

224
00:22:15,030 --> 00:22:21,280
creating a new memory region with read
and write permissions then they shutting

225
00:22:21,280 --> 00:22:27,800
compiler will meet you called tried that
called to the new memory region it will

226
00:22:27,800 --> 00:22:32,730
give the newly generated code executes
and read permissions so now it's ready

227
00:22:32,730 --> 00:22:37,220
to court that newly generated code

228
00:22:37,220 --> 00:22:44,120
but let's see what is fresh by your
doing regarding just in time sorry we

229
00:22:44,120 --> 00:22:47,399
are being controversial guard in Windows
time for example where they have

230
00:22:47,400 --> 00:22:52,780
additional protections while when the
Sun introduced junior reproduction

231
00:22:52,780 --> 00:22:58,080
constants for bill to allow you to
protect and this constant sarpanch

232
00:22:58,080 --> 00:23:03,010
targets invalid on page targets no
updates and they value is the same

233
00:23:03,010 --> 00:23:08,570
because they do almost the same right so

234
00:23:08,570 --> 00:23:13,990
targets in Mali is supposed to be used
with beautiful oak it should be combined

235
00:23:13,990 --> 00:23:20,970
with execute protections and using this
flag will mark all the locations in the

236
00:23:20,970 --> 00:23:28,950
new memory region are symbolic targets
for CFG on the other hand range target

237
00:23:28,950 --> 00:23:33,409
snow up there should be used with beer
to protect and it should be combined

238
00:23:33,409 --> 00:23:38,740
with execute permissions this frog will
indicate that the controversy regarding

239
00:23:38,740 --> 00:23:44,539
information should not be change when
assigning the new member protections

240
00:23:44,539 --> 00:23:51,390
they are also using this new memory
management function which is subprocess

241
00:23:51,390 --> 00:23:58,900
political targets this function is new
in Windows time remembered the first

242
00:23:58,900 --> 00:24:02,539
part of the talk I said that
controversial guard protects indirect

243
00:24:02,539 --> 00:24:08,600
costs which could be identified at
compile time while this new windows

244
00:24:08,600 --> 00:24:15,549
function allows to provide new control
program information at runtime that is

245
00:24:15,549 --> 00:24:20,530
my calling this function you can't
provide see if she information with a

246
00:24:20,530 --> 00:24:27,918
list of new body or invalid Corps
targets so this is like IDR to use with

247
00:24:27,919 --> 00:24:33,530
just-in-time compilers which are
generating new code may be removing them

248
00:24:33,530 --> 00:24:39,928
them so they need to mark them are
somalian so what the just-in-time

249
00:24:39,929 --> 00:24:44,059
compiler of rash is doing now for
example on Windows 10 I'm taking

250
00:24:44,059 --> 00:24:49,379
advantage of these new memory protection
concerns on memory management function

251
00:24:49,380 --> 00:24:55,050
looks like this first this just-in-time
compiler starts by allocating new memory

252
00:24:55,050 --> 00:25:00,710
region with read and write permissions
by using premium right permissions every

253
00:25:00,710 --> 00:25:08,170
location in that memory sharon is a
symbolic target for CFG then this is the

254
00:25:08,170 --> 00:25:12,900
just-in-time compiler will generate new
code and runtime and rented to the

255
00:25:12,900 --> 00:25:17,790
memory region on here it comes the
difference they're shutting down

256
00:25:17,790 --> 00:25:23,560
computer with gorbachev protect with
execute and repair missions but also

257
00:25:23,560 --> 00:25:29,770
using the new flood that is based
targets no update highlighted in this

258
00:25:29,770 --> 00:25:35,030
way they are giving the whole memory
region execute permissions but by using

259
00:25:35,030 --> 00:25:39,980
this new flag Dr about adding that every
location in the memory sharon is marked

260
00:25:39,980 --> 00:25:47,030
so instead they are using the new memory
management function that is suppose as

261
00:25:47,030 --> 00:25:51,270
well of course targets so they are
making us believe target for see if she

262
00:25:51,270 --> 00:25:57,750
shows the address of the newly generated
function so that these they are using a

263
00:25:57,750 --> 00:26:00,720
good run levity so they knew

264
00:26:00,720 --> 00:26:06,460
is only marked as well if not the whole
memory region so that looks really good

265
00:26:06,460 --> 00:26:16,480
so that's how I don't be banished to
kill the technique and also protect

266
00:26:16,480 --> 00:26:23,010
against future attacks that is my
liberation the the fact that will try a

267
00:26:23,010 --> 00:26:28,879
lot better protect mark every location
especially when giving its executable

268
00:26:28,880 --> 00:26:37,060
permissions so the second part of the
talk is about alternative payments so

269
00:26:37,060 --> 00:26:43,810
the question here is what if I shutting
the execution of the problem becomes

270
00:26:43,810 --> 00:26:51,970
really really hard because of
medications such as control program

271
00:26:51,970 --> 00:27:00,070
while we still have data on the attacks
here we are ruling out gaining code

272
00:27:00,070 --> 00:27:06,030
execution by injecting chokehold or
using grub instead we are focusing on

273
00:27:06,030 --> 00:27:10,810
cutting the program by modifying its
data that is by modifying its entire

274
00:27:10,810 --> 00:27:18,179
state if you are interested in this type
of data on it thanks you can take a look

275
00:27:18,180 --> 00:27:24,780
at these related war the all of them are
previous presentations from black hat

276
00:27:24,780 --> 00:27:30,660
including issue local Windows kernel
expectation by CSR cerullo right ones

277
00:27:30,660 --> 00:27:32,050
found anywhere

278
00:27:32,050 --> 00:27:37,810
also known as they backed up on strike
by researcher top keeper and they'd only

279
00:27:37,810 --> 00:27:47,980
power running Windows kernel that one by
one or so there'd only attacks we are

280
00:27:47,980 --> 00:27:53,240
going to discuss in this section are
three first how to gain unauthorized

281
00:27:53,240 --> 00:27:59,970
access to the camera and microphone of
the user also how to s College the

282
00:27:59,970 --> 00:28:05,120
privileges of our fresh price that is
escalating from the rescue to promote

283
00:28:05,120 --> 00:28:09,770
some books to their privilege to local
charities some books in order to gain

284
00:28:09,770 --> 00:28:14,730
unauthorized access to the local faces
some of the user and the third attack

285
00:28:14,730 --> 00:28:19,480
will be how to execute arbitrary
commands without shedding show called

286
00:28:19,480 --> 00:28:28,100
nor using group so flash player holds an
object which IHOP called the security

287
00:28:28,100 --> 00:28:33,090
settings object I don't know what's the
real name and this option is somewhere

288
00:28:33,090 --> 00:28:39,100
on the hip this object contains some
interesting freelance for example of set

289
00:28:39,100 --> 00:28:45,189
for it contains the word indicating the
current some books and at offset 0 recs

290
00:28:45,190 --> 00:28:51,580
49 it contains a single by indicating if
the camera is activated or not that is

291
00:28:51,580 --> 00:28:57,399
if the user has granted access to the
camera or not be subject is somewhere on

292
00:28:57,400 --> 00:29:03,590
the hip but fortunately we can obtain
its hard rose by following a chain of

293
00:29:03,590 --> 00:29:05,399
pointers using the other

294
00:29:05,400 --> 00:29:10,130
official added object which is on a
transcript object as the starting point

295
00:29:10,130 --> 00:29:16,380
so let's see how to locate this the
settings objects in memory

296
00:29:16,380 --> 00:29:20,740
the first step from our ActionScript
code is great

297
00:29:20,740 --> 00:29:27,590
is to create a shared object which is
unnatural skip I'm by using our red

298
00:29:27,590 --> 00:29:33,080
premium to let's assume that we have one
we need to link the other end of this

299
00:29:33,080 --> 00:29:40,210
shader clock shipped on the second step
is using the address of these share

300
00:29:40,210 --> 00:29:45,470
above the starting point when it to
follow a chain of pointers that this

301
00:29:45,470 --> 00:29:52,630
other software adoption done with
reference to the point of $0.18 Iran C

302
00:29:52,630 --> 00:29:59,990
nine C sharp the other areas of our
security settings but note that if you

303
00:29:59,990 --> 00:30:05,740
are trying to support these two maybe a
different version of Flash or different

304
00:30:05,740 --> 00:30:10,560
operating system that is Windows aidid 1
vs windows 10 or different architecture

305
00:30:10,560 --> 00:30:18,409
that is 32 minutes vs 64 bits you may
need to check that if these offsets

306
00:30:18,410 --> 00:30:23,310
remained the same I'm not sure maybe
they chain they change across different

307
00:30:23,310 --> 00:30:32,040
versions of Flash so you may need to do
some reverse engineering so so far we

308
00:30:32,040 --> 00:30:36,399
know how to locate these security
settings objects in memory

309
00:30:36,400 --> 00:30:41,010
let's see how we can abuse it in order
to gain unauthorized access to the

310
00:30:41,010 --> 00:30:47,820
camera and microphone for the user so
when i flash file tries to access your

311
00:30:47,820 --> 00:30:54,230
coming or your microphone / we'll show
you this security dialogue here flash is

312
00:30:54,230 --> 00:31:01,860
warning you that this site is requesting
access and that militias flash file

313
00:31:01,860 --> 00:31:07,139
could attempt to record you so it's up
to you if you decide to click on a low

314
00:31:07,140 --> 00:31:15,030
or deny but as long as you don't click
on the iRobot on the camera remains not

315
00:31:15,030 --> 00:31:18,840
activated so our goal here in the state

316
00:31:18,840 --> 00:31:23,780
on the attack will be to turn on the
camera without user interaction that is

317
00:31:23,780 --> 00:31:28,460
when the user sees that and doesn't
click on any but on the camera will

318
00:31:28,460 --> 00:31:35,890
still channel so taking a look at the
recommendation of the camera class from

319
00:31:35,890 --> 00:31:40,510
the ActionScript recommendation we can
see that the camera class contains a

320
00:31:40,510 --> 00:31:46,200
property called muted this is a boolean
value indicating whether the user has

321
00:31:46,200 --> 00:31:47,820
denied or other out

322
00:31:47,820 --> 00:31:54,860
access to the camera if we start afresh
binary for the coming out . mutant

323
00:31:54,860 --> 00:32:00,580
strain which is they are there is no
come out that muted strings and here we

324
00:32:00,580 --> 00:32:05,710
come out top army had to strain on
before that they're sick are highlighted

325
00:32:05,710 --> 00:32:11,020
in yellow which is called to a function
that I have called is commemorated on

326
00:32:11,020 --> 00:32:16,690
this function will just check the value
of the bite out of 600 X 49 of the

327
00:32:16,690 --> 00:32:23,640
security settings object so the steps to
activate the camera without user

328
00:32:23,640 --> 00:32:29,420
authorization are a symbol of this first
we need to find the security settings

329
00:32:29,420 --> 00:32:35,590
object in memory and Jen would need to
set the bar at offset 0 recs 49 of the

330
00:32:35,590 --> 00:32:41,720
security settings 21 and operating the
camera will also grant access to the

331
00:32:41,720 --> 00:32:50,410
microphone so implementing this idea
from ActionScript code looks like this

332
00:32:50,410 --> 00:32:57,180
here again we are assuming that we have
read and write primitive derivative

333
00:32:57,180 --> 00:33:03,130
should be arbitrary so we can read from
arbitrary other cities and the right

334
00:33:03,130 --> 00:33:09,300
primitive is maybe it should it maybe
not so powerful as long as we can change

335
00:33:09,300 --> 00:33:16,029
value from 0 to 1 it should work

336
00:33:16,029 --> 00:33:26,299
first we need to obtain the address of
shaded object then we need to follow the

337
00:33:26,299 --> 00:33:32,279
chain of pointers that these are
starting from the shared object we read

338
00:33:32,279 --> 00:33:37,879
the point out of set 18 then the point
where I see several see then the

339
00:33:37,879 --> 00:33:43,299
opposite 9 si aan den they are we have
shared option sorry best security

340
00:33:43,299 --> 00:33:49,539
settings object finally we just need to
set the bite out of sight 49201 by using

341
00:33:49,539 --> 00:33:57,908
our right to bring into so once we have
done this we are ready to start

342
00:33:57,909 --> 00:34:03,769
capturing friends from the camera and we
may upload it to our server for example

343
00:34:03,769 --> 00:34:11,639
this is just standard action script code
to access the camera this is there's

344
00:34:11,639 --> 00:34:17,929
nothing special here it's it's just hard
tags French from the camera and it will

345
00:34:17,929 --> 00:34:23,639
use their you are a request class in
order to upload the captures to a remote

346
00:34:23,639 --> 00:34:30,889
server so let's go with their first demo

347
00:34:30,889 --> 00:34:36,369
Windows 8 2013

348
00:34:36,369 --> 00:34:45,539
shame with Internet Explorer 11 this
Windows 8 machine is running vulnerable

349
00:34:45,539 --> 00:34:47,260
version of Flash

350
00:34:47,260 --> 00:34:53,799
in fact it is vulnerable to the to the
CBE 2015 03 11 I told you at the

351
00:34:53,799 --> 00:35:03,380
beginning of the talk so usually one
when you try to flash fried rice to

352
00:35:03,380 --> 00:35:09,630
access the camera you'll see something
like this this is just a test flash

353
00:35:09,630 --> 00:35:18,140
application I did to test that there's a
camera so you usually see this as long

354
00:35:18,140 --> 00:35:23,160
as you don't click on below the flash
file is not able to access their webcam

355
00:35:23,160 --> 00:35:27,250
which I have here right so

356
00:35:27,250 --> 00:35:34,150
I chose you live demonstration of this
technique to gain unauthorized access to

357
00:35:34,150 --> 00:35:39,440
the camera this is a showcase of my age

358
00:35:39,440 --> 00:35:48,420
tomorrow skills pretty nice right so I
click on this web cam Dima link and it

359
00:35:48,420 --> 00:35:56,150
will show the normal screen of the
camera I I want click on the audio

360
00:35:56,150 --> 00:36:03,260
button and anyways the camera will
activate so I did here so I put in my

361
00:36:03,260 --> 00:36:11,920
hands here as you can see nothing
slinging anything I now hear this so now

362
00:36:11,920 --> 00:36:19,840
you can even though the diet security
dialogue is there but the flash file has

363
00:36:19,840 --> 00:36:23,670
access to the camera so right now it
could be capturing friends aren't

364
00:36:23,670 --> 00:36:42,960
sending them anywhere from their remote
restricted sandbox to the privilege to

365
00:36:42,960 --> 00:36:51,120
local charities some books / FlashPlayer
loads different flash files into

366
00:36:51,120 --> 00:36:55,930
different Sun boxes according to their
origin there are four different some

367
00:36:55,930 --> 00:37:02,310
boxes there the less privileged is
called that remote some books this flash

368
00:37:02,310 --> 00:37:07,500
files loaded into a web browser our road
into this remote some books which is the

369
00:37:07,500 --> 00:37:13,100
less privileged one and then we had to
intermediate some boxes which are called

370
00:37:13,100 --> 00:37:18,779
local with network on Google with five
system would not work means that the

371
00:37:18,780 --> 00:37:25,730
file is loaded from a local resource and
it has access to the network but it

372
00:37:25,730 --> 00:37:31,080
won't have access to the recovery system
this is like this before because if

373
00:37:31,080 --> 00:37:36,990
militias flash file has both access to
the network onto the front system it

374
00:37:36,990 --> 00:37:39,930
would try to steal our files and upload

375
00:37:39,930 --> 00:37:44,859
to a remote server in the same way
there's a local with my system some

376
00:37:44,860 --> 00:37:49,780
books in which flash fires have access
to the local funds file system but they

377
00:37:49,780 --> 00:37:55,800
cannot create network connections on top
of that we have the locals rotten sound

378
00:37:55,800 --> 00:38:01,680
box which is the most the more previous
one flash files loaded here have access

379
00:38:01,680 --> 00:38:07,799
to both the network on the file system
so our goal here is to mob from the

380
00:38:07,800 --> 00:38:13,120
remote sandbox where fresh where our
fresh finally slowed this all the way up

381
00:38:13,120 --> 00:38:20,609
to the local charities some books so the
current some bugs in which our fresh

382
00:38:20,610 --> 00:38:25,150
file is loaded can be queried from
ActionScript by accessing the same box

383
00:38:25,150 --> 00:38:30,980
type property of their security class if
we searched the front the fresh binary

384
00:38:30,980 --> 00:38:39,050
for the names of these some boxes that
is trusted network etc we can find that

385
00:38:39,050 --> 00:38:44,350
those names are referenced here I'm not
sure if you can see it but the name

386
00:38:44,350 --> 00:38:51,670
serafin secure its local trusted local
would not work with fire and highlighted

387
00:38:51,670 --> 00:38:57,410
in yellow we can see that this cold is
reading The Sun box type field from the

388
00:38:57,410 --> 00:39:04,980
office at four of the security settings
object so this field can contain for

389
00:39:04,980 --> 00:39:11,870
different values meaning for different
subtypes 20 mins remote one is local

390
00:39:11,870 --> 00:39:19,080
with my system to is it would not work
on three East local trusted so our goal

391
00:39:19,080 --> 00:39:24,319
is to override these DWORD located at
offset for of the security settings

392
00:39:24,320 --> 00:39:33,200
object value number three right so
moving from their limited remote some

393
00:39:33,200 --> 00:39:39,100
books to the privilege to block out some
books is a simple as this first we need

394
00:39:39,100 --> 00:39:44,460
to locate the security settings object
in memory and explain how to do that by

395
00:39:44,460 --> 00:39:49,390
following a chain of pointers using a
shared object at this time sorry as the

396
00:39:49,390 --> 00:39:50,810
starting point

397
00:39:50,810 --> 00:39:56,740
under we just need to use memory
corruption in order to set that they

398
00:39:56,740 --> 00:40:06,879
were offset for of the security settings
23 so implementing this idea in order to

399
00:40:06,880 --> 00:40:12,470
escalate our people issues from a
transcript will select this first we

400
00:40:12,470 --> 00:40:17,750
obtained the address of our shared
object object by using our agreement

401
00:40:17,750 --> 00:40:26,720
then we follow the chain of pointers
that is the point of set 18 2009 C and

402
00:40:26,720 --> 00:40:32,299
finally we use our right primitive in
order to overwrite the deal were offset

403
00:40:32,300 --> 00:40:39,920
for the security settings option with a
three way we are escalating our

404
00:40:39,920 --> 00:40:45,140
privileges to their local justice some
books so escalating to the local trusted

405
00:40:45,140 --> 00:40:50,200
some books means that our fresh file now
has access to both the local file system

406
00:40:50,200 --> 00:41:00,490
and to the network so we can still file
and upload them to our server so once we

407
00:41:00,490 --> 00:41:08,169
have overwritten the same box type that
is dubstep wish I can start reading

408
00:41:08,170 --> 00:41:13,370
arbitrary files from the local phone
system of the user here I'm trying to

409
00:41:13,370 --> 00:41:19,950
steal a file called secret dot dot X
from the documents for their and in

410
00:41:19,950 --> 00:41:25,569
order to do that I'm using the five
protocol as you can see the top together

411
00:41:25,570 --> 00:41:31,960
with the URL lower-class this way once
we get the contents of the file we are

412
00:41:31,960 --> 00:41:37,630
ready to upload them to our server and
this is just stand there a transcript

413
00:41:37,630 --> 00:41:46,320
code to send data to a server by using
the URL request class so let's go with

414
00:41:46,320 --> 00:41:55,790
their second demo in this case I tried
to read the contents of this flag fire

415
00:41:55,790 --> 00:42:00,259
which is located on the desktop

416
00:42:00,260 --> 00:42:09,520
this takes over 10 2015 let's shoot
something I say say say a phrase or word

417
00:42:09,520 --> 00:42:23,850
I know you write so

418
00:42:23,850 --> 00:42:31,390
some books tomorrow it will create
specially crafted fresh trial which will

419
00:42:31,390 --> 00:42:35,810
overwrite there some box type of the
security settings object in order to

420
00:42:35,810 --> 00:42:41,270
escalate privileges to local charities
some books and read the contents of that

421
00:42:41,270 --> 00:42:58,790
of the prize in the next time so I click
on it so there it is so once I have read

422
00:42:58,790 --> 00:43:03,400
the contents of the file you can do
whatever I want for example uploaded to

423
00:43:03,400 --> 00:43:14,160
a remote server or whatever in order to
exclude right or which artifice

424
00:43:14,160 --> 00:43:21,509
so they don't attack how to execute
arbitrary commands without using show

425
00:43:21,510 --> 00:43:29,060
called nor drop so I said at the
beginning of a talk contract rose garden

426
00:43:29,060 --> 00:43:33,520
checks that the target of an indirect
corn is one of the other cities

427
00:43:33,520 --> 00:43:41,270
identified and it is possible to
legitimate or several occasions to do

428
00:43:41,270 --> 00:43:46,480
something useful from Douglas
perspective for example you when you see

429
00:43:46,480 --> 00:43:52,820
it in order to execute commands without
resorting to use show called or let me

430
00:43:52,820 --> 00:43:58,750
say that there was on overriding in in
the discovery of this technique with

431
00:43:58,750 --> 00:44:04,840
researcher with which presented here
yesterday and he presented this week

432
00:44:04,840 --> 00:44:15,670
first assistant 2015 conference so kudos
to him so what functions identified as

433
00:44:15,670 --> 00:44:21,590
valid during compilation time is the
function which belongs to the caramel 32

434
00:44:21,590 --> 00:44:28,170
DLL nothing will stop us from replacing
David Taylor of an option will affect me

435
00:44:28,170 --> 00:44:32,600
chamber containing a pointer to the
function because this function is

436
00:44:32,600 --> 00:44:39,370
totally legitimate for indirect course
so if we are able to either control or

437
00:44:39,370 --> 00:44:45,549
overrides the first argument is passed
to the midterm a thought being booked we

438
00:44:45,550 --> 00:44:55,900
can craft a call to win except with on
orbit restoring its parameter so I you

439
00:44:55,900 --> 00:45:00,580
should be able to implement this in a
lot of ways but I don't you about the

440
00:45:00,580 --> 00:45:07,799
particular implementation I did of this
technique I found out that when calling

441
00:45:07,800 --> 00:45:10,360
the twisting method on a better option

442
00:45:10,360 --> 00:45:17,300
their second function of its be table is
called and it receives did the board's

443
00:45:17,300 --> 00:45:24,670
tort of age of the vector US its first
argument so by using right to bring me

444
00:45:24,670 --> 00:45:27,109
to we could try to override

445
00:45:27,109 --> 00:45:32,259
the memory appointed by better process
eight with the strength of the command

446
00:45:32,259 --> 00:45:36,180
we want to execute for example for
demonstration purposes

447
00:45:36,180 --> 00:45:43,149
wright also by using a real primitive we
can calculate the address of the one

448
00:45:43,150 --> 00:45:49,460
exception and we need to store it as the
second function pointer of our favorite

449
00:45:49,460 --> 00:45:56,859
ever so then we need to use again right
primitive in order to replace there is a

450
00:45:56,859 --> 00:46:02,098
reporter of the better with the address
of our thing we table which contains the

451
00:46:02,099 --> 00:46:07,630
other cell phone except its second
function pointer and finally we need to

452
00:46:07,630 --> 00:46:13,239
invoke that testing method on this
corrupted but corruption in order to

453
00:46:13,239 --> 00:46:19,930
craft a car to win except receiving the
cult steering its argument on this way

454
00:46:19,930 --> 00:46:28,419
we are executing code without injecting
chokehold nor using drop so let's

455
00:46:28,420 --> 00:46:31,059
explain this expedition idea

456
00:46:31,059 --> 00:46:35,849
graphical way again here we have a
better option which contains the

457
00:46:35,849 --> 00:46:41,849
elements of the vector at the bottom and
also the better metadata in the metro a

458
00:46:41,849 --> 00:46:47,170
time we can find offsets ate a pointer
pointing somewhere on the hip and

459
00:46:47,170 --> 00:46:52,640
actually I don't know what they are in
memory of its point or somewhere on the

460
00:46:52,640 --> 00:46:58,650
hip and I want to override that memory
there with the car

461
00:46:58,650 --> 00:47:04,739
string which is what I want to execute
on so there's a pointer to a retainer

462
00:47:04,739 --> 00:47:10,749
and this is the original be table of the
vector and the second function pointer

463
00:47:10,749 --> 00:47:15,140
highlighted in red is the one being
invoked when we called to a string on

464
00:47:15,140 --> 00:47:21,210
this backdrop shocked so the
exploitation idea he's

465
00:47:21,210 --> 00:47:28,960
to create this state by using our right
we are riding this spring we want to

466
00:47:28,960 --> 00:47:34,550
execute that these college plus their
terminating known and also we are

467
00:47:34,550 --> 00:47:39,900
operating debatable point so now it
points to our favorite a burr under our

468
00:47:39,900 --> 00:47:45,070
fragment chamber at offset for that is
its second element contains the address

469
00:47:45,070 --> 00:47:51,410
of the win except function so after
corrupting the corruption this way when

470
00:47:51,410 --> 00:47:56,190
we called to a string on this vector
object that will result in a court to

471
00:47:56,190 --> 00:48:05,160
win except with us its argument so let's
go with a live demonstration of these

472
00:48:05,160 --> 00:48:13,339
last talked

473
00:48:13,339 --> 00:48:23,979
so of course I try to execute a
calculator so I think on it if

474
00:48:23,979 --> 00:48:53,828
everything goes well we can see a lot of
egregious because one is not enough

475
00:48:53,829 --> 00:49:05,529
of exploiting memory corruption
vulnerability is instead of just

476
00:49:05,529 --> 00:49:12,509
starting to rub chain now we need to
spend time and effort in trying to

477
00:49:12,509 --> 00:49:18,269
bypass it that these before control
guard once we gained code execution that

478
00:49:18,269 --> 00:49:25,140
this one we got once we can hijack do
not wish I needed to modify the

479
00:49:25,140 --> 00:49:31,589
execution flow in order to start our
first and now it stops us so we need to

480
00:49:31,589 --> 00:49:37,369
spend audition for additional time in
order to first by bus if she and Jen

481
00:49:37,369 --> 00:49:43,599
trying to do something about it so I
think that just-in-time compilers are

482
00:49:43,599 --> 00:49:48,950
likely to undermine the effectiveness of
control program in other software unless

483
00:49:48,950 --> 00:49:54,879
people points special effort into
hardening them that is into protecting

484
00:49:54,880 --> 00:49:58,160
the code generated at runtime because

485
00:49:58,160 --> 00:50:05,348
mission studio that is the employer does
a great work at identifying targets on

486
00:50:05,349 --> 00:50:09,690
targets however on culture didn't run
time it's different

487
00:50:09,690 --> 00:50:14,829
the developer needs to use the new
memory management France and then your

488
00:50:14,829 --> 00:50:21,160
memory management functions so I think
that I will be with Internet Explorer

489
00:50:21,160 --> 00:50:25,839
the world that is they are probably
protecting now the just-in-time compiler

490
00:50:25,839 --> 00:50:31,180
but any other software embedding for
example JavaScript and jeans which

491
00:50:31,180 --> 00:50:37,089
contain just-in-time compilers or just
about whatever contentious in time they

492
00:50:37,089 --> 00:50:42,920
may end up undermining the effectiveness
of the CFG if they are not special

493
00:50:42,920 --> 00:50:48,829
protective and finally they don't
attacks are really hard to detect or

494
00:50:48,829 --> 00:50:54,799
prevent here we are not interrupting
show called we are not doing drop we are

495
00:50:54,799 --> 00:50:59,420
just modifying maybe single by ordeal
words that these the internal state of

496
00:50:59,420 --> 00:51:05,690
the program in order to obtain some
advantage and I think that we may see an

497
00:51:05,690 --> 00:51:07,069
increase in this car

498
00:51:07,069 --> 00:51:12,719
of data only attacks us modifying the
normal execution of programs becomes

499
00:51:12,719 --> 00:51:17,170
crowd there are hard they're due to
medications like control program for

500
00:51:17,170 --> 00:51:25,069
example so that's it thank you very much
for attending this presentation so do

501
00:51:25,069 --> 00:51:46,210
you have any questions yes

502
00:51:46,210 --> 00:51:59,480
to some way determined when except for
example are you already have a read

503
00:51:59,480 --> 00:52:05,790
primitive so it was really scary chrome
or once we once I was able to lead a

504
00:52:05,790 --> 00:52:11,700
points are belonging to colonel 32 I was
able to calculate the tires on the

505
00:52:11,700 --> 00:52:27,669
second part of the question was said
both hezbollah targets I think it should

506
00:52:27,670 --> 00:52:33,250
be possible to do it if you are able to
to provide the arguments for these new

507
00:52:33,250 --> 00:52:37,869
function which are fiber that is it's a
little bit harder than when except which

508
00:52:37,869 --> 00:52:43,440
has takes one but I think that it should
work if you are able to craft a call to

509
00:52:43,440 --> 00:52:53,430
a Boolean function it should work I
think yes

510
00:52:53,430 --> 00:53:13,379
no i didnt but I'm pretty sure that out
unless they are doing something like an

511
00:53:13,380 --> 00:53:19,000
abrupt boy maybe they are not properly
protecting the code generated runtime

512
00:53:19,000 --> 00:53:28,890
even this is pretty new flash started
hardening the just-in-time compiler

513
00:53:28,890 --> 00:53:35,430
shots in June this year so I think that
other shutting down home buyers may be

514
00:53:35,430 --> 00:53:42,640
unprotected I guess I'm there are not
just web browsers for example I know

515
00:53:42,640 --> 00:53:51,950
MongoDB US / sorry hard shell script and
sheen so maybe does not even protected

516
00:53:51,950 --> 00:54:00,220
on I know how many obligations are using
just-in-time compilers I guess a lot so

517
00:54:00,220 --> 00:54:04,259
many questions don't be shy

518
00:54:04,260 --> 00:54:21,570
yes

519
00:54:21,570 --> 00:54:35,570
so you now know where those who need to
it's like a challenge you need to find

520
00:54:35,570 --> 00:54:43,950
another way to to get your Real Madrid
plaintiffs are you know words that the

521
00:54:43,950 --> 00:54:49,620
current technique to talk to him really
primitives it probably should be doable

522
00:54:49,620 --> 00:54:57,160
but I don't know how to do it right now

523
00:54:57,160 --> 00:55:03,279
challenging at least the approaching the
day zero waste that is overriding the

524
00:55:03,280 --> 00:55:09,250
length of better type so you can index
anything in the memory was like three me

525
00:55:09,250 --> 00:55:13,690
on so I think they are going to the
right choice that is the least they are

526
00:55:13,690 --> 00:55:19,840
learning the ways probably we have
enough work you should be able to obtain

527
00:55:19,840 --> 00:55:24,810
new memory primitives but I think they
are going the right way that is

528
00:55:24,810 --> 00:55:32,180
hardening the tastiest once and they
said before probably you don't need an

529
00:55:32,180 --> 00:55:38,299
arbitrary right primitive even having a
restricted on 14 December increment by 1

530
00:55:38,300 --> 00:55:43,160
I'm worried about this may work for you
or something like that for example

531
00:55:43,160 --> 00:55:49,370
returning 0 into one may be enough to
turn on William are you so the problem

532
00:55:49,370 --> 00:55:55,660
because the difference so I think that
you need a powerful red primitive right

533
00:55:55,660 --> 00:56:10,839
primitive maybe less powerful any other
question yes

534
00:56:10,840 --> 00:56:22,480
are you asking if it's possible to
protect against this in order to protect

535
00:56:22,480 --> 00:56:35,810
against their own attacks

536
00:56:35,810 --> 00:56:46,250
riordan they regarding doubt I think
that protecting against they don't even

537
00:56:46,250 --> 00:56:50,880
know if it's possible I don't want to
say it's impossible odds it's really

538
00:56:50,880 --> 00:56:57,650
hard there's always something about come
between your thumb be operating on the

539
00:56:57,650 --> 00:57:01,330
behavior of the program will be
different

540
00:57:01,330 --> 00:57:09,430
my guess is that using isolated heaps
would not change that but that's where I

541
00:57:09,430 --> 00:57:15,940
think I'm not really sure there's always
something that eventually you can modify

542
00:57:15,940 --> 00:57:23,630
are in order to modify the behavior of
the problem and the other question

