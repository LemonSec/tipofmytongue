1
00:00:00,040 --> 00:00:03,439
arm tell everybody and thanks for
staying here until the end

2
00:00:03,439 --> 00:00:08,540
harm my name is rushing to release and
the title of my top two days right to do

3
00:00:08,540 --> 00:00:11,849
deconstruct internal isolation and this
is joint work with

4
00:00:11,849 --> 00:00:16,460
I am high school for 9790 was kermit is
my colleagues from our Colombian verse

5
00:00:16,460 --> 00:00:19,740
so before starting some stuff but myself

6
00:00:19,740 --> 00:00:23,240
I'm a PhD candidate at Columbia
University I am

7
00:00:23,240 --> 00:00:27,250
a member of the network security love
their I have done workin by security

8
00:00:27,250 --> 00:00:27,820
fields

9
00:00:27,820 --> 00:00:31,279
I have published it made me mainly now
academic conferences

10
00:00:31,279 --> 00:00:34,520
lately I'm working on operating system
security and

11
00:00:34,520 --> 00:00:38,200
specifically on nocturnal some
self-protection arm

12
00:00:38,200 --> 00:00:41,390
and I also do some I'll fed stuff and

13
00:00:41,390 --> 00:00:45,700
the stock is part of this kind of work
show

14
00:00:45,700 --> 00:00:50,360
arm this is the agenda for today read to
do is a kennel extradition technique

15
00:00:50,360 --> 00:00:54,379
so I'm gonna start by giving an
introduction of how can a patchwork

16
00:00:54,379 --> 00:00:57,660
and what what exactly would try to do
with this

17
00:00:57,660 --> 00:01:00,699
with this technique then I'm gonna move
on

18
00:01:00,699 --> 00:01:05,070
to how rate to do works and how can be
used to bypass virus can protection

19
00:01:05,070 --> 00:01:05,640
mechanisms

20
00:01:05,640 --> 00:01:10,330
and then I'm going to conclude by
summarizing our findings so let's start

21
00:01:10,330 --> 00:01:13,350
on so there is an increased focus

22
00:01:13,350 --> 00:01:17,610
island girl exploitation nowadays so
can't let that are becoming more and

23
00:01:17,610 --> 00:01:18,270
more common

24
00:01:18,270 --> 00:01:21,799
and this is mainly due to three reasons
for civil

25
00:01:21,799 --> 00:01:25,450
the exploitation of five years /url on
privilege processes has become much

26
00:01:25,450 --> 00:01:26,040
harder

27
00:01:26,040 --> 00:01:29,200
throughout the years we had farce
techniques I

28
00:01:29,200 --> 00:01:32,810
some of them provided by up the
operating systems some other

29
00:01:32,810 --> 00:01:35,880
are provided by compilers or a
combination of

30
00:01:35,880 --> 00:01:40,840
those two I which made their way I into
most of the Oasis these days

31
00:01:40,840 --> 00:01:44,159
and airy the resulting to hardening
applications

32
00:01:44,159 --> 00:01:47,560
I against exploits which leads

33
00:01:47,560 --> 00:01:50,909
into moving the targeting to

34
00:01:50,909 --> 00:01:54,600
you know different a different coed
three piece of code in the software

35
00:01:54,600 --> 00:01:55,159
stack

36
00:01:55,159 --> 00:01:58,590
and the kennel is an important piece of
code because it's privileged

37
00:01:58,590 --> 00:02:03,020
so it makes sense for somebody to go ok
to go after it and not only that people

38
00:02:03,020 --> 00:02:03,689
so how's

39
00:02:03,689 --> 00:02:06,740
a huge attack surface arm there

40
00:02:06,740 --> 00:02:10,129
there's a constant stream of a new
features and optimizations

41
00:02:10,129 --> 00:02:12,550
about getting to these part of cold

42
00:02:12,550 --> 00:02:16,590
which is supposedly the one that the
responsible for the integrity of all the

43
00:02:16,590 --> 00:02:17,630
security mechanisms

44
00:02:17,630 --> 00:02:21,160
in in the operating system and

45
00:02:21,160 --> 00:02:24,750
some so because of the three reasons I'm
we have

46
00:02:24,750 --> 00:02:28,910
we see that the Packers are trying more
and more to go against the kernel

47
00:02:28,910 --> 00:02:33,320
instead of trying to find want
privileged I use our process

48
00:02:33,320 --> 00:02:36,570
and exploited and then go after got go
around

49
00:02:36,570 --> 00:02:40,400
are all these I'm you know protection
mechanisms

50
00:02:40,400 --> 00:02:43,590
lot are deployed there arm

51
00:02:43,590 --> 00:02:47,770
so although of the on the one how hard
we have the so I'm

52
00:02:47,770 --> 00:02:52,000
you know interest on more Kindle
exploration but the atty arm

53
00:02:52,000 --> 00:02:55,910
what the colonel what r kernels do I in
terms of

54
00:02:55,910 --> 00:03:00,280
of of box below their beaks okay so what
do you see here in this graph

55
00:03:00,280 --> 00:03:05,570
he's the distinct number the distinct
big number of %ah box of CV

56
00:03:05,570 --> 00:03:09,170
numbers specifically assigned to Carol
box throughout the years

57
00:03:09,170 --> 00:03:12,470
for all the kernels and we're talking
about commodity operating system kernels

58
00:03:12,470 --> 00:03:12,750
here

59
00:03:12,750 --> 00:03:16,410
like Linux Windows to be as these and so
on so forth so you can see there is an

60
00:03:16,410 --> 00:03:17,250
increasing trend

61
00:03:17,250 --> 00:03:20,720
so not only attackers go after the
kennel but they also have a lot of

62
00:03:20,720 --> 00:03:24,070
arm County to to play with I'm

63
00:03:24,070 --> 00:03:27,959
now if we take a look at the one
particular operating system

64
00:03:27,959 --> 00:03:31,570
because Linux you see that the same
trend more or less exists here as well

65
00:03:31,570 --> 00:03:36,690
and the question is why do we see that
Kate did it happen that after 2003 we

66
00:03:36,690 --> 00:03:37,650
became

67
00:03:37,650 --> 00:03:40,840
terrible in writing kernel code or is it
something else

68
00:03:40,840 --> 00:03:44,360
I while as I said the beginning

69
00:03:44,360 --> 00:03:48,260
there is more interesting kernel exploit
this so we have more guys

70
00:03:48,260 --> 00:03:51,280
auditing the cold or fighting the cold
and trying to

71
00:03:51,280 --> 00:03:55,760
to to exploit it and on this way they
found some polar bodies and they

72
00:03:55,760 --> 00:03:58,000
reported children's more interest so

73
00:03:58,000 --> 00:04:01,020
more reported bucks all the other hand
though

74
00:04:01,020 --> 00:04:04,140
I the number all of our

75
00:04:04,140 --> 00:04:08,190
lines of code that gets into kleenex has
increased a lot

76
00:04:08,190 --> 00:04:11,269
but the same trend also applies it to
other breeding systems

77
00:04:11,269 --> 00:04:16,320
so you can see here were comparing 26
2.6 not eleven we fell 32

78
00:04:16,320 --> 00:04:21,520
10 two conversions one of them was are
released in 2005 and the other one is

79
00:04:21,520 --> 00:04:22,190
too fucking

80
00:04:22,190 --> 00:04:23,470
2013

81
00:04:23,470 --> 00:04:26,400
and you can see that the developing days
for these two versions has more or less

82
00:04:26,400 --> 00:04:27,050
the same

83
00:04:27,050 --> 00:04:31,070
but the number of boxes that were pushed
in the same or less the same development

84
00:04:31,070 --> 00:04:31,870
cycle

85
00:04:31,870 --> 00:04:35,070
in there cannell was much higher

86
00:04:35,070 --> 00:04:39,180
from 3.6 I'll thousand part is we have

87
00:04:39,180 --> 00:04:43,300
in in their first version we have for
our 13.38

88
00:04:43,300 --> 00:04:47,919
in the 3.2 10 which means that we'll go
from

89
00:04:47,919 --> 00:04:51,250
roughly two changes per hour to paint
into 9

90
00:04:51,250 --> 00:04:54,990
changes per hour so we have increased
the law the number of changes

91
00:04:54,990 --> 00:04:59,070
in kernel code and remember the see the
part of your call dot

92
00:04:59,070 --> 00:05:02,960
guarantees all more less or the
integrity of all the security

93
00:05:02,960 --> 00:05:06,289
our protections that you have in his lap
get

94
00:05:06,289 --> 00:05:09,419
so arm

95
00:05:09,419 --> 00:05:13,090
to give you um ever before her view of

96
00:05:13,090 --> 00:05:16,639
what what what colonel attacks falling
to

97
00:05:16,639 --> 00:05:20,600
I have two categories here arm the first
one is privilege escalation

98
00:05:20,600 --> 00:05:25,100
so here what while we're talking about
these

99
00:05:25,100 --> 00:05:28,400
I docks where the attacker

100
00:05:28,400 --> 00:05:31,580
already has some presents on the
operating system he can run something

101
00:05:31,580 --> 00:05:35,940
like a process or he has already manage
to latee

102
00:05:35,940 --> 00:05:39,020
take control of particular process in
the operating system and the goal there

103
00:05:39,020 --> 00:05:40,220
is to escalate privileges

104
00:05:40,220 --> 00:05:44,190
K become brutality the other type of
attacks

105
00:05:44,190 --> 00:05:48,550
off-putting to the second category which
is a persistent foot there the attacker

106
00:05:48,550 --> 00:05:51,990
affects the kernel for up for a
different purpose the purpose

107
00:05:51,990 --> 00:05:55,830
there east to he already has access root
access to the machine

108
00:05:55,830 --> 00:06:00,710
and he needs to hold that access gay so
we're talking about rootkits things like

109
00:06:00,710 --> 00:06:01,060
that

110
00:06:01,060 --> 00:06:04,669
so in this talk whenever right I talk
about an attack I'm

111
00:06:04,669 --> 00:06:08,760
talking about the first class K the
model of the attack is that we consider

112
00:06:08,760 --> 00:06:09,370
here

113
00:06:09,370 --> 00:06:13,820
heats somebody who has already our local
access to the machine

114
00:06:13,820 --> 00:06:16,849
not privilege accessed simple user
access he

115
00:06:16,849 --> 00:06:20,440
he's able to invoke and interact with
the can also system call source

116
00:06:20,440 --> 00:06:22,580
or through come

117
00:06:22,580 --> 00:06:25,940
some other API which is available and
his goal is to escalate privileges

118
00:06:25,940 --> 00:06:30,130
now nerd in most cases in order to do
that arm

119
00:06:30,130 --> 00:06:34,360
what he needs to do is to achieve what
we call our arbitrary code execution

120
00:06:34,360 --> 00:06:37,950
be it being able to run code with the
privileges of the kernel

121
00:06:37,950 --> 00:06:41,360
because the sparkle the code is the most
privilege on in the software stack

122
00:06:41,360 --> 00:06:45,380
arm and in order to do that

123
00:06:45,380 --> 00:06:50,150
he more and more cases Inc no case
actually what what happens is out

124
00:06:50,150 --> 00:06:53,360
there is a bag and memory corruption
vulnerability in Carroll code

125
00:06:53,360 --> 00:06:57,520
arm the same or less the same types of
bugs that we have unusual and we have

126
00:06:57,520 --> 00:06:57,810
them

127
00:06:57,810 --> 00:07:02,860
also in in kernel are we have use after
free their sinus error cedar overflows

128
00:07:02,860 --> 00:07:07,090
a wild rights off by one of my to you
know all these things that we finding

129
00:07:07,090 --> 00:07:10,110
is a lot of where they exist in the
kennel as well so

130
00:07:10,110 --> 00:07:13,220
these things can be abused in order to
corrupt memory and

131
00:07:13,220 --> 00:07:17,180
the end goal east to exit code now other
the case with

132
00:07:17,180 --> 00:07:20,690
I I use a process when we exploit them

133
00:07:20,690 --> 00:07:23,730
I we typically do that either my code
injection

134
00:07:23,730 --> 00:07:28,300
K this is what we used to do the past we
inject some daytime the process address

135
00:07:28,300 --> 00:07:29,620
space and then we crop

136
00:07:29,620 --> 00:07:32,910
control de ta such as a function pointer
or return address

137
00:07:32,910 --> 00:07:36,630
pointing it into that code and we
executed now this thing doesn't work

138
00:07:36,630 --> 00:07:37,310
anymore

139
00:07:37,310 --> 00:07:41,080
because of the defense is that get
deployed I in

140
00:07:41,080 --> 00:07:44,760
are most populous day such as
non-executive a memory or a Salar

141
00:07:44,760 --> 00:07:49,330
so what we do is the same thing but
instead of injecting called we inject

142
00:07:49,330 --> 00:07:50,210
control data

143
00:07:50,210 --> 00:07:53,570
and perform the exploitation in Europe
under okay

144
00:07:53,570 --> 00:07:57,600
now Carol experts don't work like that

145
00:07:57,600 --> 00:08:00,740
K there have been colonel experts were
code injection

146
00:08:00,740 --> 00:08:05,490
n roll has been used but in most cases
and i'm talking about the vast majority

147
00:08:05,490 --> 00:08:06,180
here

148
00:08:06,180 --> 00:08:10,550
arm what we do is a different type of
attack which I call returned to

149
00:08:10,550 --> 00:08:11,250
userspace

150
00:08:11,250 --> 00:08:15,190
depict so let's see what these attacks
are and how they work

151
00:08:15,190 --> 00:08:18,910
these actually work against operating
system kernels that have a shared kennel

152
00:08:18,910 --> 00:08:20,320
user a space layout

153
00:08:20,320 --> 00:08:23,650
K and the way they work is by over IP
kernel code

154
00:08:23,650 --> 00:08:28,570
or data pointers with userspace
addresses now the payload whether the

155
00:08:28,570 --> 00:08:29,570
Seas CEL code

156
00:08:29,570 --> 00:08:32,860
auto payload tampered with data
structures depending on the exploit

157
00:08:32,860 --> 00:08:35,539
depending on the vulnerability that were
exploiting

158
00:08:35,539 --> 00:08:40,019
heat is placed in userspace bought the
is executed or referenced from the

159
00:08:40,019 --> 00:08:40,849
general context

160
00:08:40,849 --> 00:08:44,899
and as I said this has been the de facto
Carol exploitation picnic

161
00:08:44,899 --> 00:08:48,679
I'm there are exploit exploit to be from

162
00:08:48,679 --> 00:08:52,519
2003 got the use this technique and

163
00:08:52,519 --> 00:08:55,519
the last one but I found some days ago
was released into

164
00:08:55,519 --> 00:08:58,959
this year and still uses the same
technique I am

165
00:08:58,959 --> 00:09:02,660
so you can see here the way the whole
thing works

166
00:09:02,660 --> 00:09:06,730
is by as I said hosting the payload in
userspace so in other words we don't

167
00:09:06,730 --> 00:09:07,920
need to inject anything

168
00:09:07,920 --> 00:09:11,519
in inside the kennel because it is
already there it's already there in the

169
00:09:11,519 --> 00:09:13,119
outer space that the kernel sees

170
00:09:13,119 --> 00:09:16,839
and if we can trick it into reference it
or executed then we we

171
00:09:16,839 --> 00:09:21,429
okay so why do they work they work
because the separation between Caroline

172
00:09:21,429 --> 00:09:22,660
user space is weak

173
00:09:22,660 --> 00:09:25,879
K when we designed our kennels we put
kernel space

174
00:09:25,879 --> 00:09:29,769
along with user space inside the same
address space for performance reasons

175
00:09:29,769 --> 00:09:34,009
k every time every process doesn't do
anything by Telford always call the

176
00:09:34,009 --> 00:09:35,579
operating system to do something useful

177
00:09:35,579 --> 00:09:39,939
care at the trial open a connection does
not do something like that so you always

178
00:09:39,939 --> 00:09:43,730
need to call the kernel and in order to
do that fast you put

179
00:09:43,730 --> 00:09:47,369
we designed our all are colonels so I
was that they have this thing inside the

180
00:09:47,369 --> 00:09:47,749
same

181
00:09:47,749 --> 00:09:52,169
these two I'm pieces inside the same
address pesos to be able

182
00:09:52,169 --> 00:09:55,899
to go from userspace to tell space only
by doing amo treats

183
00:09:55,899 --> 00:09:59,549
of course we could have designed a
different in some ways to do that

184
00:09:59,549 --> 00:10:02,989
the game can reside in a totally
different outer space but then every

185
00:10:02,989 --> 00:10:03,410
band

186
00:10:03,410 --> 00:10:06,709
you need to call the kernel you need to
do a complete call a complete caught the

187
00:10:06,709 --> 00:10:07,199
treats

188
00:10:07,199 --> 00:10:10,389
which is much much more expensive now

189
00:10:10,389 --> 00:10:14,269
in this model they can always protected
from userland K you cannot write

190
00:10:14,269 --> 00:10:18,369
or read kennel memory the memory
management unit will give your fault

191
00:10:18,369 --> 00:10:22,379
case we have how hardware support for
that the problem is that the opposite

192
00:10:22,379 --> 00:10:25,839
with the opposite direction okay when
the camera is running it has complete an

193
00:10:25,839 --> 00:10:26,989
unrestricted access

194
00:10:26,989 --> 00:10:30,809
to the club to space and if you think
about it he needs that access

195
00:10:30,809 --> 00:10:34,939
right if you do read calling you provide
a buffer the cable reads dot

196
00:10:34,939 --> 00:10:38,709
you know feels like buffer with the
content or for five or or so cat or

197
00:10:38,709 --> 00:10:39,209
whatever

198
00:10:39,209 --> 00:10:42,720
so it needs to have access to user space
and that's why we designed the whole

199
00:10:42,720 --> 00:10:43,129
thing

200
00:10:43,129 --> 00:10:46,410
like this K now the problem is that

201
00:10:46,410 --> 00:10:48,930
part of the userspace that the kernel
sees

202
00:10:48,930 --> 00:10:53,170
it completely controlled by the attack
keep both in terms of content

203
00:10:53,170 --> 00:10:56,970
& permissions now to deal with this
issue

204
00:10:56,970 --> 00:11:00,410
week we there are fire you stop
protections

205
00:11:00,410 --> 00:11:03,620
and defenses arm the first got to

206
00:11:03,620 --> 00:11:08,200
where proposed by a and implemented by
Cox its current executive chef

207
00:11:08,200 --> 00:11:11,550
boxes author at a set of third party
links parties

208
00:11:11,550 --> 00:11:14,770
and they they implement peace

209
00:11:14,770 --> 00:11:19,020
what they do is that they try to isolate
the two right when the kernel is running

210
00:11:19,020 --> 00:11:22,540
they tried to make to restrict what are
the

211
00:11:22,540 --> 00:11:26,180
userspace areas that the kernel has
access to K

212
00:11:26,180 --> 00:11:29,780
so hard with how do they do that the
next 86 the user shouldn't Asian unit

213
00:11:29,780 --> 00:11:33,130
so when the girl gets called the reload
I

214
00:11:33,130 --> 00:11:38,200
the segment registers CSS SDS and yes so
as to restrict the can confine the

215
00:11:38,200 --> 00:11:38,670
kernel

216
00:11:38,670 --> 00:11:41,700
internal space in the upper Park so

217
00:11:41,700 --> 00:11:45,840
every reference of the top and cold
arbitrageurs Prince

218
00:11:45,840 --> 00:11:49,010
in userspace will result in a fault from
the segmentation unit

219
00:11:49,010 --> 00:11:52,800
in x86 64 seeing some

220
00:11:52,800 --> 00:11:56,550
segmental decided to are more or less

221
00:11:56,550 --> 00:12:00,680
make the segmentation unit the Texans at
the end in the segment registers

222
00:12:00,680 --> 00:12:04,020
I ineffective they implemented the same
thing differently

223
00:12:04,020 --> 00:12:07,090
arm you dear forks biting mopping

224
00:12:07,090 --> 00:12:11,630
I userspace so every time the girl gets
called the tweak the page tables

225
00:12:11,630 --> 00:12:15,150
soldiers chose to make sure that your
space is not accessible directly

226
00:12:15,150 --> 00:12:19,660
arm and fork and exec what they do is
that the instrument the code

227
00:12:19,660 --> 00:12:24,570
arm essentially the when they compile
the kernel

228
00:12:24,570 --> 00:12:28,400
they insert text so as to make sure that
you cannot Bronx and execute something

229
00:12:28,400 --> 00:12:29,210
from userspace

230
00:12:29,210 --> 00:12:33,140
K dard is a system that I build Arbor
tries to

231
00:12:33,140 --> 00:12:37,410
arm deal with the same problem I in more
than one platform

232
00:12:37,410 --> 00:12:41,370
so to cross-platform solution it also
leverages the compiler and

233
00:12:41,370 --> 00:12:45,420
again use instrumentation and what we do
there is that we

234
00:12:45,420 --> 00:12:49,740
instrument the code in and and inject a
bunch of text to make sure that

235
00:12:49,740 --> 00:12:52,990
whenever a function pointer or a return
address

236
00:12:52,990 --> 00:12:57,070
our order 10 destruction or or a jump
instruction gets called it will never

237
00:12:57,070 --> 00:12:58,210
branch to your space

238
00:12:58,210 --> 00:12:59,690
K

239
00:12:59,690 --> 00:13:02,470
arm so finally into an arm

240
00:13:02,470 --> 00:13:05,580
implemented arm two features

241
00:13:05,580 --> 00:13:09,770
arm intel has actually to use them as my
penis mop

242
00:13:09,770 --> 00:13:13,950
I an arm pics n weeks do more or less
the same thing

243
00:13:13,950 --> 00:13:17,140
Bakkies but but by but by leveraging
hardware

244
00:13:17,140 --> 00:13:21,180
okay so how the work is buying on

245
00:13:21,180 --> 00:13:26,900
in but by a who leveraging the
information packet already there in the

246
00:13:26,900 --> 00:13:27,600
page table

247
00:13:27,600 --> 00:13:31,000
showing the page table we have
information that tells us if the page

248
00:13:31,000 --> 00:13:32,910
belongs to the Carol or to userspace

249
00:13:32,910 --> 00:13:36,940
okay so what these things do is not the
trigger a fault

250
00:13:36,940 --> 00:13:40,910
if your are running in Carroll mode and
you try to execute something

251
00:13:40,910 --> 00:13:44,610
from a page that belongs to userspace I

252
00:13:44,610 --> 00:13:48,630
this is what this map & pics and us and
this mop does the same thing but for the

253
00:13:48,630 --> 00:13:49,300
tax

254
00:13:49,300 --> 00:13:52,310
K so to summarize

255
00:13:52,310 --> 00:13:55,460
what I'm trying to say I is a fully

256
00:13:55,460 --> 00:13:59,090
arm can exact a guard s my pic BX N

257
00:13:59,090 --> 00:14:03,650
effectively block arm

258
00:14:03,650 --> 00:14:07,530
the coat pointer from pointing

259
00:14:07,530 --> 00:14:11,820
into IOC coding userspace so every time

260
00:14:11,820 --> 00:14:16,090
these techniques every time a function
pointer gets called in that pack some

261
00:14:16,090 --> 00:14:18,410
point or points to userspace you will
get ahold

262
00:14:18,410 --> 00:14:21,640
immediately and as I say this my pics &

263
00:14:21,640 --> 00:14:25,620
are do it using hardware the others
using software or hardware

264
00:14:25,620 --> 00:14:29,540
im just gonna checking now 32-bit and
social for now you the ref

265
00:14:29,540 --> 00:14:33,040
is the same thing but for data pointers
shown

266
00:14:33,040 --> 00:14:37,170
if you have a data pointer and you
corrupted by abusing it

267
00:14:37,170 --> 00:14:40,650
kernel-based op you know member
corruption bag

268
00:14:40,650 --> 00:14:44,020
you cannot point make it pointing to
userspace you can overwrite it with a

269
00:14:44,020 --> 00:14:46,360
value with the userspace by you but when
you trigger it

270
00:14:46,360 --> 00:14:50,000
either through the hardware or because
the pay the user space is not

271
00:14:50,000 --> 00:14:53,610
it's not there anymore in case of your f
you will get a fault and these

272
00:14:53,610 --> 00:14:54,350
techniques will

273
00:14:54,350 --> 00:14:58,290
confine essentially the control flow in
the dataflow in the upper part

274
00:14:58,290 --> 00:15:01,600
internal space game so

275
00:15:01,600 --> 00:15:04,870
in the stock we focus on these
techniques arm

276
00:15:04,870 --> 00:15:08,260
I call them regular defense is because
they prevent the previous

277
00:15:08,260 --> 00:15:11,800
exploitation picnic jumping back to
userspace in executing

278
00:15:11,800 --> 00:15:15,690
the the the so-called or referencing
payload from userspace

279
00:15:15,690 --> 00:15:19,980
and what we want answers to to questions
the first one is whether we can subvert

280
00:15:19,980 --> 00:15:20,470
them

281
00:15:20,470 --> 00:15:25,190
putting whether we can force the kernel
to execute or axes User Control Data

282
00:15:25,190 --> 00:15:28,830
because if you recall these things were
put in place in order to make sure that

283
00:15:28,830 --> 00:15:32,390
the kennel cannot go to your space and
taxes whatever date are there or execute

284
00:15:32,390 --> 00:15:32,980
code

285
00:15:32,980 --> 00:15:37,900
K and second question is whether there
are conflicting design choices

286
00:15:37,900 --> 00:15:38,850
organizations

287
00:15:38,850 --> 00:15:42,720
that we can the ship with the strong
separation but these features try to

288
00:15:42,720 --> 00:15:43,160
achieve

289
00:15:43,160 --> 00:15:47,730
K in the first place the return to use
our attacks exist because we chose to

290
00:15:47,730 --> 00:15:48,550
put Carol

291
00:15:48,550 --> 00:15:52,470
can space in your space inside the same
under space k so it was a design choice

292
00:15:52,470 --> 00:15:56,440
so here we wanna see he's a colonel have
following

293
00:15:56,440 --> 00:15:59,779
certain design patterns but still we can
this abrasion

294
00:15:59,779 --> 00:16:03,360
even though we have these defenses in
place this is not a question that will

295
00:16:03,360 --> 00:16:06,600
1 answer so it to do is this

296
00:16:06,600 --> 00:16:11,100
the on is the new technique that i'm
gonna talk about

297
00:16:11,100 --> 00:16:15,240
its call return to direct not memory it
an attack that can be applied

298
00:16:15,240 --> 00:16:19,940
against hardened kennels everything that
you're gonna see here is against Linux

299
00:16:19,940 --> 00:16:21,730
we focused on Linux because

300
00:16:21,730 --> 00:16:25,820
all the previous defenses were available
there so it was a very good test but for

301
00:16:25,820 --> 00:16:26,260
us

302
00:16:26,260 --> 00:16:29,279
and at the same time I

303
00:16:29,279 --> 00:16:32,279
it's an operating system that runs and
drives millions of machines

304
00:16:32,279 --> 00:16:37,000
so the impact there it's much higher and
depending on the exploit

305
00:16:37,000 --> 00:16:41,060
on the farm now baby actually about that
I get exploited in most cases

306
00:16:41,060 --> 00:16:45,190
for every turn to use our exploit that
gets blocked by

307
00:16:45,190 --> 00:16:49,339
one of these protections it will be
possible to convert it into a ride to

308
00:16:49,339 --> 00:16:50,130
get approval in

309
00:16:50,130 --> 00:16:53,900
that bypasses so this is the technique
that i'm gonna

310
00:16:53,900 --> 00:16:59,680
are present in the next I hope the stock
so before getting into the details of

311
00:16:59,680 --> 00:17:00,750
how exactly it works

312
00:17:00,750 --> 00:17:04,079
let me start with the Carol space layout

313
00:17:04,079 --> 00:17:08,270
k so as is the case with userspace the
kernel space is organized

314
00:17:08,270 --> 00:17:11,420
I in some way and I'm

315
00:17:11,420 --> 00:17:15,199
this the way that it's get organized
it's different among different platforms

316
00:17:15,199 --> 00:17:17,329
but for for every instance of the same
platform

317
00:17:17,329 --> 00:17:22,310
it remains the same K so here you have
the layouts all farm

318
00:17:22,310 --> 00:17:26,439
he knocks in x86 and x86-64 so

319
00:17:26,439 --> 00:17:31,080
we have region stop a hospital Li mobs
the modules

320
00:17:31,080 --> 00:17:35,260
arm you know free my locks and stuff
like that what's interesting for us

321
00:17:35,260 --> 00:17:38,410
is a region which is called Christmas
this popular region

322
00:17:38,410 --> 00:17:43,620
Patrick is inside kennel space and what
he does is that he directly mops

323
00:17:43,620 --> 00:17:46,620
all physical memory you want one minor

324
00:17:46,620 --> 00:17:50,910
okay so this region if you go to these
particular virtual address that this

325
00:17:50,910 --> 00:17:52,850
region to region start on your
references

326
00:17:52,850 --> 00:17:56,850
you're gonna get the sense in the
context the contents of the first page

327
00:17:56,850 --> 00:17:57,500
frame

328
00:17:57,500 --> 00:18:01,300
in Rome if you go to page about about
them to get the content on the second

329
00:18:01,300 --> 00:18:01,860
page from

330
00:18:01,860 --> 00:18:05,980
and so on so forth now in 64-bit systems

331
00:18:05,980 --> 00:18:10,130
arm this region is big enough to more or
less

332
00:18:10,130 --> 00:18:13,470
I mopped the whole ROM k so in

333
00:18:13,470 --> 00:18:18,620
now I x86/x64 links for instance this
region the sixty four terabytes

334
00:18:18,620 --> 00:18:22,390
and change in most cases you're not
gonna find machines with sixty four

335
00:18:22,390 --> 00:18:23,470
terabytes from

336
00:18:23,470 --> 00:18:27,290
the whole around was gonna fit inside
that region in 32-bit systems

337
00:18:27,290 --> 00:18:32,140
are you have less space showing the most
typical scenario where you skate

338
00:18:32,140 --> 00:18:36,679
the address space I in such a way where
you assign one gigabyte in Carolyn three

339
00:18:36,679 --> 00:18:37,350
gigabytes

340
00:18:37,350 --> 00:18:41,940
in userspace then because of other stuff
but also rely not want to go by

341
00:18:41,940 --> 00:18:45,330
of the kennel outer space you end up
with roughly

342
00:18:45,330 --> 00:18:50,460
891 megabytes dot direct him up physical
memory

343
00:18:50,460 --> 00:18:54,540
so if your physical memories two
gigabytes the first 800 will be directly

344
00:18:54,540 --> 00:18:58,540
up there if you're and the rest are not
if you're

345
00:18:58,540 --> 00:19:02,280
in the rare case where you have like 512
megabytes the whole ROM again

346
00:19:02,280 --> 00:19:05,940
fit inside that region and it's there I

347
00:19:05,940 --> 00:19:09,429
so what is the I roll a fucking

348
00:19:09,429 --> 00:19:13,470
why do we have it well team's top are
the things very important

349
00:19:13,470 --> 00:19:17,200
for the kernel it's a fundamental
building block of dynamic kernel memory

350
00:19:17,200 --> 00:19:21,610
because it allows us to allocate memory
without altering page tables

351
00:19:21,610 --> 00:19:25,419
more or less so this means that we have
many more late in seeing

352
00:19:25,419 --> 00:19:29,380
fast of operations so if we do it came
out looking side

353
00:19:29,380 --> 00:19:33,440
interrupt service routine we can get
them we can get memory without

354
00:19:33,440 --> 00:19:35,740
without touching page tables without
invalidating

355
00:19:35,740 --> 00:19:40,190
passes without doing all these things I
it also reflects less still be pressure

356
00:19:40,190 --> 00:19:43,670
with we don't need to close the deal be
how the other benefit

357
00:19:43,670 --> 00:19:47,920
of that design is that virtually
contiguous memory it's guaranteed to be

358
00:19:47,920 --> 00:19:49,370
physically contiguous as well

359
00:19:49,370 --> 00:19:53,220
so if we do it came out ok and we think
about memory and we assign it to a

360
00:19:53,220 --> 00:19:54,490
device to do the MA

361
00:19:54,490 --> 00:19:57,500
we don't have to Warri about whether you
know

362
00:19:57,500 --> 00:20:01,260
our frames which are sequential in
virtual memory are not sequential India

363
00:20:01,260 --> 00:20:01,700
may

364
00:20:01,700 --> 00:20:04,940
so when the device gets the MA these
things will have to go all over the

365
00:20:04,940 --> 00:20:05,950
place and then we do

366
00:20:05,950 --> 00:20:09,440
we need to do is come together to get
them back in place in so on so forth

367
00:20:09,440 --> 00:20:14,480
I'm and of course we under such a scheme
the page from accounting super easy

368
00:20:14,480 --> 00:20:18,570
okay if I give you ever told aides if I
give you a page from number

369
00:20:18,570 --> 00:20:21,990
you can get the virtual address inside
that region very easily he just

370
00:20:21,990 --> 00:20:24,590
multiplied by the page eyes and you up

371
00:20:24,590 --> 00:20:28,000
the offset that this thing starts from
and the opposite these out when you get

372
00:20:28,000 --> 00:20:30,360
a virtual address you can get the bed
frame number

373
00:20:30,360 --> 00:20:34,880
just by subtracting the the offset of
the region and then dividing by the

374
00:20:34,880 --> 00:20:35,530
Patriots

375
00:20:35,530 --> 00:20:40,250
so it's very the Colonel Glenn can do
very quickly go from a virtual address

376
00:20:40,250 --> 00:20:43,270
to the pain train more from patron to
her tell others and this is something

377
00:20:43,270 --> 00:20:44,630
that happens a lot in type

378
00:20:44,630 --> 00:20:49,350
the kennel sorry arm solid team

379
00:20:49,350 --> 00:20:53,140
arm some properties of this region K so
as I said

380
00:20:53,140 --> 00:20:57,160
I the starting of sick of this region
differ skin virus or two pictures

381
00:20:57,160 --> 00:21:00,679
and also differs depending on the
configuration are between

382
00:21:00,679 --> 00:21:05,540
be of the not the configuration actually
the split between Carroll user space in

383
00:21:05,540 --> 00:21:06,870
various architectures

384
00:21:06,870 --> 00:21:12,000
I'll which also affect the size of this
region showing x86 bring something the

385
00:21:12,000 --> 00:21:13,809
most people scenario where you have

386
00:21:13,809 --> 00:21:18,220
three to go by to userspace in one
gigabyte internal space it starts from

387
00:21:18,220 --> 00:21:21,840
see your 0000 you know the sundress

388
00:21:21,840 --> 00:21:25,990
arm the size of this thing is 891
megabytes

389
00:21:25,990 --> 00:21:30,360
and if you go to different states you
have a different starting address and

390
00:21:30,360 --> 00:21:31,260
more size and

391
00:21:31,260 --> 00:21:35,020
Chanchal for harm now what's important
to note is that these things

392
00:21:35,020 --> 00:21:38,650
are not affected by 8k Salar so even
though you

393
00:21:38,650 --> 00:21:42,890
you may have kennel space kennel address
space layout randomization

394
00:21:42,890 --> 00:21:47,840
starting offset of these will remain the
same K what gets movies the kernel text

395
00:21:47,840 --> 00:21:48,720
area and that

396
00:21:48,720 --> 00:21:52,809
Karel De tying you know these these
things were the region the pixmap region

397
00:21:52,809 --> 00:21:53,809
will remain there

398
00:21:53,809 --> 00:21:56,880
and it will always start from this
affects the

399
00:21:56,880 --> 00:22:00,039
in hot it's also

400
00:22:00,039 --> 00:22:04,549
I interesting to see what are the
protection are beating the page tables

401
00:22:04,549 --> 00:22:08,380
the pay table entries for this
particular region in x86

402
00:22:08,380 --> 00:22:13,030
this region is mopped Renn writeable arm

403
00:22:13,030 --> 00:22:16,640
bucking the other architects are some
fortunately are the permission bits of

404
00:22:16,640 --> 00:22:18,330
that region are not in the same state

405
00:22:18,330 --> 00:22:22,179
K arm the last I'll conversion that I am

406
00:22:22,179 --> 00:22:25,190
I x86-64 kernel version that

407
00:22:25,190 --> 00:22:29,720
arm how deep execute a blue laws
everything below 3.9

408
00:22:29,720 --> 00:22:32,830
so there you have it readable Rinn
executable

409
00:22:32,830 --> 00:22:36,320
everything I'm after that it only harm

410
00:22:36,320 --> 00:22:41,049
read/write on same thing for 32-bit ARM

411
00:22:41,049 --> 00:22:44,850
four versions before of 3.4 offer teen

412
00:22:44,850 --> 00:22:49,690
and last time I checked I it was still
execute agreed writeable inexcusable

413
00:22:49,690 --> 00:22:53,690
in the 64-bit ARM now

414
00:22:53,690 --> 00:22:58,049
remember that we're going to use it
later arm so what r threat model

415
00:22:58,049 --> 00:23:01,190
the threat model but we arm we assume
here

416
00:23:01,190 --> 00:23:04,370
he is that we have other a baby that
allows us to override

417
00:23:04,370 --> 00:23:07,789
I carolco data pointers with user
controlled by use

418
00:23:07,789 --> 00:23:11,400
and this is not something arm

419
00:23:11,400 --> 00:23:16,360
this is not a strong assumption we have
a lot of boxing ok lot of not but nobody

420
00:23:16,360 --> 00:23:17,799
is that we can leverage to do that

421
00:23:17,799 --> 00:23:22,190
and we also so much hardened can k we
assume the kernel that gets

422
00:23:22,190 --> 00:23:25,299
arm strong user

423
00:23:25,299 --> 00:23:29,679
are Carol separation through one of the
the protections or meant more than one

424
00:23:29,679 --> 00:23:33,260
are but I talked about before so we
cannot do they returned to use our

425
00:23:33,260 --> 00:23:34,600
attack that we could do before

426
00:23:34,600 --> 00:23:38,570
K so let's see how it works

427
00:23:38,570 --> 00:23:44,130
King now we have the physical or recall
that we have the physical drum directly

428
00:23:44,130 --> 00:23:45,230
markets had that region

429
00:23:45,230 --> 00:23:48,870
okay now whenever we get from userspace

430
00:23:48,870 --> 00:23:53,250
whenever users based gets physical
memory heat getting lazy minor

431
00:23:53,250 --> 00:23:56,450
K through page fault you allocate the
big chunk of

432
00:23:56,450 --> 00:24:00,220
memory his arse page in userspace say
through em up

433
00:24:00,220 --> 00:24:03,360
but this doesn't mean that you got it
immediately you need to start writing in

434
00:24:03,360 --> 00:24:04,740
those regions shows to

435
00:24:04,740 --> 00:24:07,799
cause page fault and then get physical
memory from the OS

436
00:24:07,799 --> 00:24:11,220
get now the problem with this approach
is that ok

437
00:24:11,220 --> 00:24:15,179
because of the existence of a smoke we
get weary is

438
00:24:15,179 --> 00:24:20,370
we end up with undersea and using K we
end up with more than one addresses

439
00:24:20,370 --> 00:24:23,580
pointing to the same physical patron K

440
00:24:23,580 --> 00:24:27,460
so hard how we do that right so in the
beginning everything is inside for a

441
00:24:27,460 --> 00:24:27,880
smoke

442
00:24:27,880 --> 00:24:31,840
so there is a kennel address got mops
into that particular page for him

443
00:24:31,840 --> 00:24:35,760
when the patron get allocated to
userspace another virtual address

444
00:24:35,760 --> 00:24:39,070
a userspace virtual address no maps to
the same page frame

445
00:24:39,070 --> 00:24:44,230
so we have to now and this is the whole
thing this is the basis of this attack

446
00:24:44,230 --> 00:24:47,350
so and we have to assy Inc

447
00:24:47,350 --> 00:24:50,470
and the problem is that these indices
are relying to do different

448
00:24:50,470 --> 00:24:54,720
I lie actually in two diff into two
different protection domains one kernel

449
00:24:54,720 --> 00:24:56,000
space in one user space

450
00:24:56,000 --> 00:24:59,480
what we can do is that we can use a
userspace address

451
00:24:59,480 --> 00:25:03,470
to call be our payload whatever that
these

452
00:25:03,470 --> 00:25:06,779
cellco drop a note tampered with data
structures wherever

453
00:25:06,779 --> 00:25:10,630
somewhere to physical memory this means
that BP's directly accessible

454
00:25:10,630 --> 00:25:15,010
through it seen on him in the peace map
region and then when we go

455
00:25:15,010 --> 00:25:18,330
ahead and corrupt the colder it a call
carolco pointer

456
00:25:18,330 --> 00:25:21,820
Oracle Oracle data pointer instead of
corrupting it

457
00:25:21,820 --> 00:25:25,029
with the userspace address we can
corrupt those pointers

458
00:25:25,029 --> 00:25:28,320
and overwrite them with the scene no
names of those addresses increase mop

459
00:25:28,320 --> 00:25:31,580
and bypass all previous protection
mechanisms because

460
00:25:31,580 --> 00:25:34,820
all of them rely on identifying user
addresses

461
00:25:34,820 --> 00:25:39,750
more or less what when using different
techniques K

462
00:25:39,750 --> 00:25:43,200
so let's see how would he do that

463
00:25:43,200 --> 00:25:46,340
arm we have ours problems to deal with
here

464
00:25:46,340 --> 00:25:49,679
k the first one used to pinpoint of
course the exact location

465
00:25:49,679 --> 00:25:52,799
of a synonym of user control data

466
00:25:52,799 --> 00:25:56,700
in the fiscal period K suppose a copy
something here in userspace

467
00:25:56,700 --> 00:26:01,409
as I said this thing getting to freeze
my as well I need to know the exact

468
00:26:01,409 --> 00:26:05,000
address inside fish map because when I
got a corrupt something like a data

469
00:26:05,000 --> 00:26:05,590
pointer

470
00:26:05,590 --> 00:26:08,700
in his in Carrollton Carroll space I
need to corrupted

471
00:26:08,700 --> 00:26:12,139
and overwrite it with the exact address
I

472
00:26:12,139 --> 00:26:13,720
inside peace map that the two senior

473
00:26:13,720 --> 00:26:19,090
him of of the userspace so the first
problem is to know the exact location of

474
00:26:19,090 --> 00:26:22,950
user control data in the fish might
bridge second problem that we have to

475
00:26:22,950 --> 00:26:23,530
deal with

476
00:26:23,530 --> 00:26:27,060
he's that in some cases arm

477
00:26:27,060 --> 00:26:30,130
as I said before you don't have the
complete ROM the complete

478
00:26:30,130 --> 00:26:33,970
physical memory it's mopped inside the
peace pipe region I

479
00:26:33,970 --> 00:26:37,660
this is a I actually keep calling 32-bit
architecture because as he sought before

480
00:26:37,660 --> 00:26:38,550
it only in

481
00:26:38,550 --> 00:26:42,590
I 891 megabytes directly mapped so there

482
00:26:42,590 --> 00:26:45,640
the problem is that we need to force the
scene on him

483
00:26:45,640 --> 00:26:49,730
to emerge inside the pic material in
other words we need to force the

484
00:26:49,730 --> 00:26:51,610
allocator to give us to

485
00:26:51,610 --> 00:26:55,560
two mA per user IOC to mop User Content
into a page frame

486
00:26:55,560 --> 00:26:59,650
but false inside that region which
housing units I

487
00:26:59,650 --> 00:27:02,790
and the last problem is that sometimes
we have

488
00:27:02,790 --> 00:27:06,180
payloads that dot don't fit into on I

489
00:27:06,180 --> 00:27:10,240
one single page Davis on more than one
paid pages which are

490
00:27:10,240 --> 00:27:13,330
feet which are virtually continues in
userspace

491
00:27:13,330 --> 00:27:16,570
doesn't mean that they're gonna be
physically contiguous as well

492
00:27:16,570 --> 00:27:21,130
and this means that they're not gonna be
continues inside fishman so the problem

493
00:27:21,130 --> 00:27:23,690
but we need to Solaris how can we
construct

494
00:27:23,690 --> 00:27:27,800
arm you know regions which are

495
00:27:27,800 --> 00:27:31,350
continues inside fish mop and then put
our payload they're supposed to be

496
00:27:31,350 --> 00:27:32,040
contagious

497
00:27:32,040 --> 00:27:37,390
when the I can reference it solitude
which one of them separately so sup with

498
00:27:37,390 --> 00:27:39,570
the first one the first one is the most
important one right

499
00:27:39,570 --> 00:27:43,300
and the centuries the how I can answer
this question

500
00:27:43,300 --> 00:27:47,420
given a kansas-based virtual address see
you up how can I find

501
00:27:47,420 --> 00:27:50,470
the kennel space address we should which
essentially much the same content

502
00:27:50,470 --> 00:27:53,790
now to do that we turn to the usual
suspect

503
00:27:53,790 --> 00:27:58,540
the professional system starting with
the version to 625

504
00:27:58,540 --> 00:28:02,050
arm there's a new interface that was I
didn't type rock

505
00:28:02,050 --> 00:28:06,210
to allow page table examination from
userspace for debugging purposes

506
00:28:06,210 --> 00:28:09,640
so what you can do with this thing is
that you can't go into prague

507
00:28:09,640 --> 00:28:13,590
PA beware the ides the opera say deal
for one particular

508
00:28:13,590 --> 00:28:17,830
process open the file contains mop and
then

509
00:28:17,830 --> 00:28:22,000
this fight easy next by the virtual page
for don't buy virtual page number

510
00:28:22,000 --> 00:28:24,970
K so if what you have if I have a user
address

511
00:28:24,970 --> 00:28:28,490
and get from that use our other address
the bear virtual paid

512
00:28:28,490 --> 00:28:31,840
number just my divided by arm

513
00:28:31,840 --> 00:28:35,980
debate ice and seek into that fight into
the appropriate

514
00:28:35,980 --> 00:28:39,650
I location and read eight bytes what I'm
gonna have

515
00:28:39,650 --> 00:28:44,090
he's some flux which tell me whether
whether they're paid is present or not

516
00:28:44,090 --> 00:28:45,070
and stuff like that

517
00:28:45,070 --> 00:28:49,270
but the most important thing is that I
could also have been tied up that number

518
00:28:49,270 --> 00:28:53,030
arm those eight bytes the page frame
number

519
00:28:53,030 --> 00:28:56,350
where these particular user space ritual
others marched

520
00:28:56,350 --> 00:28:59,800
day so in other words

521
00:28:59,800 --> 00:29:03,030
I can open this fight and even a
userspace address I can get the patron

522
00:29:03,030 --> 00:29:03,720
number is that

523
00:29:03,720 --> 00:29:06,910
which all others K seitz patron number

524
00:29:06,910 --> 00:29:10,690
11 now given that I know

525
00:29:10,690 --> 00:29:14,010
got to face map mops physical memory

526
00:29:14,010 --> 00:29:18,180
you want one minor he fight have the
page frame number for a particular user

527
00:29:18,180 --> 00:29:21,550
address what I can do is that I can
multiply that by the page size

528
00:29:21,550 --> 00:29:26,130
and add the fish mobile offset we turn
up which I know that it's constant for

529
00:29:26,130 --> 00:29:26,760
different

530
00:29:26,760 --> 00:29:29,800
are combinations of pretty pictures and

531
00:29:29,800 --> 00:29:34,540
and you know configurations and it's not
affected by a spatial are

532
00:29:34,540 --> 00:29:38,160
and then I can get key under the thing
that I want

533
00:29:38,160 --> 00:29:41,430
now in certain cases I the

534
00:29:41,430 --> 00:29:45,670
first patron number happens to be
something different from zero

535
00:29:45,670 --> 00:29:49,170
so there I just have to do smart
obstruction arm

536
00:29:49,170 --> 00:29:54,250
I just up truck I'll the mean patron
number from the one day to get

537
00:29:54,250 --> 00:29:57,760
then I supply type: multiplied by page
eyes and and I are built

538
00:29:57,760 --> 00:30:01,680
K so the way it works is the following

539
00:30:01,680 --> 00:30:04,740
I use you object to mop something in
physical memory

540
00:30:04,740 --> 00:30:09,220
then I do a lookup in page map I get the
bed frame number I stick it into that

541
00:30:09,220 --> 00:30:10,990
formula and then I have k other

542
00:30:10,990 --> 00:30:14,000
and now what what what I do is that I
corn crop

543
00:30:14,000 --> 00:30:17,000
coda I camcorder data pointers with K
other

544
00:30:17,000 --> 00:30:21,610
and now when the kennels gonna trigger
that thing it will never branch to

545
00:30:21,610 --> 00:30:23,420
userspace but will reference

546
00:30:23,420 --> 00:30:27,860
and execute or or a reference data are
but were controlled by me

547
00:30:27,860 --> 00:30:33,080
I put them there in pain that physical
memory location

548
00:30:33,080 --> 00:30:36,710
okie arm so this is how I I deal with
the first from

549
00:30:36,710 --> 00:30:40,480
led to the second one I in 32-bit
systems has a said

550
00:30:40,480 --> 00:30:44,500
you have the problem but only part of
the physical memory gets mapped inside

551
00:30:44,500 --> 00:30:44,870
first

552
00:30:44,870 --> 00:30:49,410
arm as a said many times in the most
people setting you have

553
00:30:49,410 --> 00:30:53,350
only eight hundred megabytes K so what
happens in that case it what

554
00:30:53,350 --> 00:30:56,850
what happens is that you have there
maybe keep their the actually there

555
00:30:56,850 --> 00:31:00,090
gonna be many cases where particularly
where

556
00:31:00,090 --> 00:31:03,320
where certain users base address don't
have seen on to Facebook

557
00:31:03,320 --> 00:31:06,700
why because they don't reside in the
first eight hundred megabytes

558
00:31:06,700 --> 00:31:10,670
of their own K so in order to deal with
this

559
00:31:10,670 --> 00:31:13,680
arm we have for said to tell you how to

560
00:31:13,680 --> 00:31:17,050
to tell you how our solution works we
need to talk a little bit about

561
00:31:17,050 --> 00:31:20,660
how Linux I modest physical memory

562
00:31:20,660 --> 00:31:24,750
K so physical memory he is divided into
certain regions

563
00:31:24,750 --> 00:31:27,850
or zones and clean

564
00:31:27,850 --> 00:31:31,640
we have his own called on the main this
zone maps the first 16

565
00:31:31,640 --> 00:31:35,850
megabytes or physical RAM so all the
page frames of the first sixteen

566
00:31:35,850 --> 00:31:36,490
megabytes

567
00:31:36,490 --> 00:31:40,770
falling to something which is called on
the main then we have so normal

568
00:31:40,770 --> 00:31:44,000
so normal contains all the paint reams
not start

569
00:31:44,000 --> 00:31:47,740
after the first sixteen megabytes and
they go up either to the size of this

570
00:31:47,740 --> 00:31:49,150
month or the size from

571
00:31:49,150 --> 00:31:52,820
whichever is the minimum here and then
we have

572
00:31:52,820 --> 00:31:56,690
sondheim K sondheim house all the other
Patriots

573
00:31:56,690 --> 00:32:00,270
so you have let's say system 32 bit
system with four you go back to from

574
00:32:00,270 --> 00:32:04,240
for sixteen megabytes a physical RAM
goat is on the main

575
00:32:04,240 --> 00:32:09,540
everything between sixteen megabytes in
891 megabytes going to zone normal

576
00:32:09,540 --> 00:32:13,610
and all the rest go to Sondheim K

577
00:32:13,610 --> 00:32:16,850
so also are there is an ordering their

578
00:32:16,850 --> 00:32:20,060
so whenever userspace get spades frames

579
00:32:20,060 --> 00:32:23,580
it always gets the page frames first
problems on time

580
00:32:23,580 --> 00:32:29,140
he's all the page paintings on time are
depleted then you try so normal

581
00:32:29,140 --> 00:32:33,370
if all the prints dreams there are
depleted then tries does on Demi

582
00:32:33,370 --> 00:32:36,960
K why does not because the first two
zones

583
00:32:36,960 --> 00:32:40,770
they are they contain the the page
frames that are

584
00:32:40,770 --> 00:32:45,299
you know other those page frame sweet
are used for the Carroll

585
00:32:45,299 --> 00:32:49,409
I to for the camera itself when it meets
our dynamic memory

586
00:32:49,409 --> 00:32:53,220
right so the kennel tries to preserve
that region for dynamic

587
00:32:53,220 --> 00:32:58,049
I internal memory requests from itself
and first tries to give

588
00:32:58,049 --> 00:33:02,760
to serve user space using time K so the
question here is whether we can force

589
00:33:02,760 --> 00:33:06,630
the allocator zone alligator which is a
particular piece inside the kernel that

590
00:33:06,630 --> 00:33:07,840
manages the patrons

591
00:33:07,840 --> 00:33:11,470
to provide are something in userspace

592
00:33:11,470 --> 00:33:14,830
from a train in userspace either from so
normal

593
00:33:14,830 --> 00:33:19,820
Corazon de mi if we do that then it
means that the speech frame will have a

594
00:33:19,820 --> 00:33:20,400
scene on

595
00:33:20,400 --> 00:33:23,460
and we can use a previous technique 20
to get its I

596
00:33:23,460 --> 00:33:27,270
seen in months so how do you do that arm

597
00:33:27,270 --> 00:33:31,059
the way that the hog written works as a
fully

598
00:33:31,059 --> 00:33:35,059
we allocate to be type of memory is our
space King we can take

599
00:33:35,059 --> 00:33:40,679
and mop SHM not wherever and then for
every page they're we together at fort

600
00:33:40,679 --> 00:33:44,510
every time we to get at fault it means
about the bait

601
00:33:44,510 --> 00:33:48,409
the kernel we'll allocate a physical
page frame to this particular

602
00:33:48,409 --> 00:33:53,880
userspace address the trigger the fort K
for every page inside that region then

603
00:33:53,880 --> 00:33:56,980
we take the bed frame number using

604
00:33:56,980 --> 00:34:00,270
com page what if not paid frame number

605
00:34:00,270 --> 00:34:04,429
he is less than PFN mocks where PFN max
is the maximum patron number in the

606
00:34:04,429 --> 00:34:05,299
peace pipe region

607
00:34:05,299 --> 00:34:08,480
arm what we found bed frame with

608
00:34:08,480 --> 00:34:13,169
which has a synonym gay now watch what
I'm saying here I'm

609
00:34:13,169 --> 00:34:16,409
I'm just using paid him up again took we

610
00:34:16,409 --> 00:34:20,679
and to to do a query and get the patron
number and take if that patron number

611
00:34:20,679 --> 00:34:22,109
fourteen side the first

612
00:34:22,109 --> 00:34:26,649
800 921 megabytes if it does it means
that it's there is a synonym for that

613
00:34:26,649 --> 00:34:27,020
thing

614
00:34:27,020 --> 00:34:30,050
inside the prison if not I

615
00:34:30,050 --> 00:34:33,149
keep doing the same thing again and
again and again why

616
00:34:33,149 --> 00:34:37,210
because as I'm doing that I'm allocating
more and more frames

617
00:34:37,210 --> 00:34:41,669
right the pleadings on time and then at
some point where

618
00:34:41,669 --> 00:34:45,359
no other frames are available in so high
my will trigger the kennel

619
00:34:45,359 --> 00:34:49,339
in to give me giving me a bed frame for
the other two from the other two zones

620
00:34:49,339 --> 00:34:53,669
which have synonyms get now 32-bit

621
00:34:53,669 --> 00:34:57,190
I machines you only have in depending on
the configuration

622
00:34:57,190 --> 00:35:02,079
arm that says how many I gigabytes of
RAM you have for users based on how many

623
00:35:02,079 --> 00:35:03,119
have internal space

624
00:35:03,119 --> 00:35:06,980
I you may need to do to spawn additional
processes to do that

625
00:35:06,980 --> 00:35:10,790
K showing the most difficult when are
you have as I said before three go by

626
00:35:10,790 --> 00:35:11,500
two from

627
00:35:11,500 --> 00:35:14,569
available per process for the userspace
Park right

628
00:35:14,569 --> 00:35:17,760
sought most you can deplete 3 gigabytes
of memory

629
00:35:17,760 --> 00:35:21,220
if you have 8 you may need to to spawn
additional processes

630
00:35:21,220 --> 00:35:24,609
all of them are breast are doing this
thing and at some point one of them

631
00:35:24,609 --> 00:35:28,369
I will get the page frame but falls
inside the region that we want

632
00:35:28,369 --> 00:35:33,810
once we found out I particular bed frame
we can kill every everything else we can

633
00:35:33,810 --> 00:35:34,240
do

634
00:35:34,240 --> 00:35:38,589
use hemlock to locate the main memory
and compute the kennel address using the

635
00:35:38,589 --> 00:35:39,380
previous form

636
00:35:39,380 --> 00:35:43,359
K now something to note here is that
memory pressure helps

637
00:35:43,359 --> 00:35:46,569
K if he if other processes are running
in the system

638
00:35:46,569 --> 00:35:50,470
and they are arm up be using memory

639
00:35:50,470 --> 00:35:54,099
and they use a lot of memory this is
this helps us okay

640
00:35:54,099 --> 00:35:57,260
this makes the sport work easier because

641
00:35:57,260 --> 00:36:00,670
instead of having to spawn all these
additional processes to waste that

642
00:36:00,670 --> 00:36:02,400
memory somebody else has already done

643
00:36:02,400 --> 00:36:07,420
but for us now look to the third problem
with her problem these

644
00:36:07,420 --> 00:36:12,420
to of force seen in pages to be
contiguous inside 50 okay

645
00:36:12,420 --> 00:36:17,470
arm the way the state the way we deal
with this problem is similar to how we

646
00:36:17,470 --> 00:36:18,500
deal with the previous one

647
00:36:18,500 --> 00:36:22,990
we allocate the big chunk of memory in
userspace for every page we trigger a

648
00:36:22,990 --> 00:36:23,650
page fault

649
00:36:23,650 --> 00:36:27,140
and then what we do is that is that we
try to find two different pages

650
00:36:27,140 --> 00:36:31,690
whose page frame numbers differ by one
day

651
00:36:31,690 --> 00:36:35,420
so we do the query again music page mop
and we try to see

652
00:36:35,420 --> 00:36:40,510
if I can find find PI BJ pages whose bed
frame numbers are different by one

653
00:36:40,510 --> 00:36:44,670
if I find them then it means throughout
the scene on names of those pages

654
00:36:44,670 --> 00:36:48,170
are contiguous interest not great

655
00:36:48,170 --> 00:36:51,270
so to give you an example if I have the
addresses feed

656
00:36:51,270 --> 00:36:54,569
and beef K and suppose that these I

657
00:36:54,569 --> 00:36:59,430
addresses arm Happy Tree number study
for only by one

658
00:36:59,430 --> 00:37:03,140
although these rich although the
although these two different

659
00:37:03,140 --> 00:37:06,630
virtual pages are 64 megabytes apart in
userspace

660
00:37:06,630 --> 00:37:10,560
they're seen an entire continues in
facebook so what I can do that I can

661
00:37:10,560 --> 00:37:15,000
take my pain old split it into the pin
to to into these two pages

662
00:37:15,000 --> 00:37:19,090
and then reference 8 using their
synonyms inside fishman their synonyms

663
00:37:19,090 --> 00:37:20,210
are gonna become tedious

664
00:37:20,210 --> 00:37:25,190
arm so

665
00:37:25,190 --> 00:37:29,920
next question what if page so all the
previous our problems I sold them by

666
00:37:29,920 --> 00:37:33,460
essentially leaking some information
regarding patron numbers

667
00:37:33,460 --> 00:37:37,110
from page mock okay so what if patron
the formation is not available

668
00:37:37,110 --> 00:37:42,460
so you can take that you know I G as you
already might assume which very easy to

669
00:37:42,460 --> 00:37:45,600
block access to this particular
interface and not then

670
00:37:45,600 --> 00:37:49,900
the question is are all these attacks
gonna go away well unfortunately

671
00:37:49,900 --> 00:37:53,070
the answer is No arm the previous

672
00:37:53,070 --> 00:37:56,600
the previous techniques are all
deterministic K so if you follow them

673
00:37:56,600 --> 00:37:59,270
for every user address you can find
deterministically

674
00:37:59,270 --> 00:38:02,950
the kernel address which is a synonym
for userspace address and then

675
00:38:02,950 --> 00:38:07,340
do the attack that we if you don't have
that information you can stay do the

676
00:38:07,340 --> 00:38:09,170
same thing but in a probabilistic way

677
00:38:09,170 --> 00:38:12,500
K so we call these fish much strain

678
00:38:12,500 --> 00:38:17,040
and it's very similar to how he spring
works so the idea here is to

679
00:38:17,040 --> 00:38:20,390
essentially take optometry smoke

680
00:38:20,390 --> 00:38:25,690
with aligned copies of the exploit
payload so as to maximize the footprint

681
00:38:25,690 --> 00:38:29,970
of your content inside face mop and then
what we do is that we pick an arbitrary

682
00:38:29,970 --> 00:38:32,360
Pagerank Christmas address and we use
lap

683
00:38:32,360 --> 00:38:36,150
INR exploit K depending on how much

684
00:38:36,150 --> 00:38:40,790
I how many pages we have managed to cope
your payload inside fish mop

685
00:38:40,790 --> 00:38:44,010
I'll weeklies are probably the two rates
one of them

686
00:38:44,010 --> 00:38:48,300
about has a the payload and not
something else harm

687
00:38:48,300 --> 00:38:51,750
so the way it works is by as I said by
copying the pain loading 2n

688
00:38:51,750 --> 00:38:54,980
resident office my president pages okay

689
00:38:54,980 --> 00:38:58,080
and the probability of succeeding is
essentially and

690
00:38:58,080 --> 00:39:01,530
over the size official app k so what we
tried to do here is essentially

691
00:39:01,530 --> 00:39:02,880
maximizes probably

692
00:39:02,880 --> 00:39:05,890
and maximize it we either maximize and
or

693
00:39:05,890 --> 00:39:10,010
minimize I did nominate so

694
00:39:10,010 --> 00:39:13,620
to maximize n again it's more or less
the same thing

695
00:39:13,620 --> 00:39:17,270
we allocate memory in userspace we
trigger page fault

696
00:39:17,270 --> 00:39:21,630
and we copy the payload into the memory
that we acquired

697
00:39:21,630 --> 00:39:22,380
K

698
00:39:22,380 --> 00:39:26,630
now here we cannot use them look because
and look can only outcome on locking pin

699
00:39:26,630 --> 00:39:27,570
point in memory

700
00:39:27,570 --> 00:39:31,230
some killer by two from here we wanna
you know more less

701
00:39:31,230 --> 00:39:34,250
deplete the whole ROM with a land copies
of our payload

702
00:39:34,250 --> 00:39:37,570
right so since we cannot do that what we
do is that we come

703
00:39:37,570 --> 00:39:40,590
stock to settle background threads that
repeatedly

704
00:39:40,590 --> 00:39:43,840
mark pages as their day by typing let a
single bite

705
00:39:43,840 --> 00:39:48,700
okay which will cause the kennel which
will prevent the colonel from

706
00:39:48,700 --> 00:39:51,810
activating shopping it will think that
these pages are hot

707
00:39:51,810 --> 00:39:55,510
so it will say okay I'm not gonna that's
not and would go to another process

708
00:39:55,510 --> 00:40:00,020
and find another victim process to start
doing the shopping from that point 20

709
00:40:00,020 --> 00:40:03,260
and as we do that we take the resident
set size

710
00:40:03,260 --> 00:40:06,660
which is essentially how many physical
arm

711
00:40:06,660 --> 00:40:10,590
how many Beijing in physical memory

712
00:40:10,590 --> 00:40:13,630
this process has and as we do that

713
00:40:13,630 --> 00:40:17,980
if that value goes up it means that we
acquire more and more physical memory

714
00:40:17,980 --> 00:40:21,520
so we maximize are foothold inside face
mop

715
00:40:21,520 --> 00:40:24,930
at the moment this thing will start
going down it means that we're it's a

716
00:40:24,930 --> 00:40:25,480
pic

717
00:40:25,480 --> 00:40:29,180
and from now on we cannot allocate
anymore because

718
00:40:29,180 --> 00:40:33,290
either we have depleted the whole ROM or
shopping site has started getting mean

719
00:40:33,290 --> 00:40:36,290
and shops out our own stuff so peaceful

720
00:40:36,290 --> 00:40:39,980
at this point we stop and we do the
attack in a probabilistic way

721
00:40:39,980 --> 00:40:43,840
and we will succeed depending on how
depending on how many pages we've

722
00:40:43,840 --> 00:40:45,840
managed to copy or exploit payload

723
00:40:45,840 --> 00:40:50,650
inside the prison a prison K and out was
the case in the previous some

724
00:40:50,650 --> 00:40:54,170
scenario again here we may need to spawn
additional processes to do that thing

725
00:40:54,170 --> 00:40:57,640
K if we are in 32 bit system and we can
only

726
00:40:57,640 --> 00:41:01,280
I deplete like three gigabytes of RAM of
course we know

727
00:41:01,280 --> 00:41:04,820
we need to to use many processes to do
that thing we cannot do it only with one

728
00:41:04,820 --> 00:41:10,220
arm now the other clever thing that we
can do is that we come

729
00:41:10,220 --> 00:41:14,240
instead of considering all the pages
inside face map as Miley targets

730
00:41:14,240 --> 00:41:18,220
what we can do is that we can have
something which called for it which we

731
00:41:18,220 --> 00:41:22,090
called him up signatures essentially we
did use the target page issue inside

732
00:41:22,090 --> 00:41:25,150
this map this way arm we know

733
00:41:25,150 --> 00:41:28,500
lot certain regions in physical memory
have content

734
00:41:28,500 --> 00:41:31,960
that this never gonna be allocates have
content

735
00:41:31,960 --> 00:41:33,460
n this means

736
00:41:33,460 --> 00:41:38,510
from forest let's say for are use but
from the BIOS for from the car itself

737
00:41:38,510 --> 00:41:40,700
which means that the Carroll will never
eat

738
00:41:40,700 --> 00:41:43,820
you know supply that paid training
userspace

739
00:41:43,820 --> 00:41:49,080
K so week we know all the speed train so
we can exclude them from our selection

740
00:41:49,080 --> 00:41:52,340
and essentially we can increase are
probably going to in to succeed

741
00:41:52,340 --> 00:41:56,070
day for instance we know where the
kernel taxis and

742
00:41:56,070 --> 00:41:59,210
all we know that the fresh spate remy is
used by bias

743
00:41:59,210 --> 00:42:03,730
so there's never you know it's it's it's
never going to be the case that the

744
00:42:03,730 --> 00:42:05,260
patron 0 its gonna have

745
00:42:05,260 --> 00:42:08,770
Konkan controlled by userspace so we
don't call

746
00:42:08,770 --> 00:42:12,570
compute got when we do our arm you know
randoms

747
00:42:12,570 --> 00:42:16,260
be randomly select something so

748
00:42:16,260 --> 00:42:19,500
arm to to give you an overview of

749
00:42:19,500 --> 00:42:23,440
everything can how the holotype works
I'll try to

750
00:42:23,440 --> 00:42:28,480
do a walk-through using a team i really
wanna be think

751
00:42:28,480 --> 00:42:32,160
here I'm using I'm CV 2013

752
00:42:32,160 --> 00:42:36,140
2094 to bug in the arm

753
00:42:36,140 --> 00:42:41,190
he knocks prevents subsystem so you can
secure the vulnerable function

754
00:42:41,190 --> 00:42:45,680
is perfe is Wnt me heat since I can only
bend score

755
00:42:45,680 --> 00:42:49,570
and what does is out it takes a
particular

756
00:42:49,570 --> 00:42:53,030
data pointer to a data structure and
then

757
00:42:53,030 --> 00:42:57,730
it extracts a particular field stores it
into a local variable and so on so forth

758
00:42:57,730 --> 00:43:01,150
so the problem he is out the local
viable

759
00:43:01,150 --> 00:43:04,540
harm that the field gets talked to is an
integer

760
00:43:04,540 --> 00:43:08,640
where is the feeling that he's an
unsigned 64-bit our field

761
00:43:08,640 --> 00:43:11,960
so this means that are and the next

762
00:43:11,960 --> 00:43:16,130
I at some point later there is a check
to make sure that since this thing is

763
00:43:16,130 --> 00:43:17,640
going to be used as an index

764
00:43:17,640 --> 00:43:21,010
into an array there is a check to make
sure that we won't go

765
00:43:21,010 --> 00:43:24,520
over the bond of the array now the
problem is that

766
00:43:24,520 --> 00:43:27,590
when config gets converted

767
00:43:27,590 --> 00:43:30,720
into an integer right arm

768
00:43:30,720 --> 00:43:34,210
we may end up with something lot heat
negative on you

769
00:43:34,210 --> 00:43:37,960
and the check their only text the upper
bunk model or about

770
00:43:37,960 --> 00:43:41,070
right shown that's the

771
00:43:41,070 --> 00:43:45,280
Dutch oven are beating so we'll we'll
see how we can use this thing

772
00:43:45,280 --> 00:43:48,060
arm this is the

773
00:43:48,060 --> 00:43:51,070
I internal structure all farm

774
00:43:51,070 --> 00:43:55,010
the prevent data structure it has three
fields

775
00:43:55,010 --> 00:43:58,420
harm enabled and two pointers

776
00:43:58,420 --> 00:44:02,280
enabled 1 ease essentially counter arm

777
00:44:02,280 --> 00:44:05,690
its anatomic I its value which gets
increase the comically

778
00:44:05,690 --> 00:44:09,070
and the size of the state the structure
is 24

779
00:44:09,070 --> 00:44:12,099
bites in 64-bit systems and 12 bytes

780
00:44:12,099 --> 00:44:15,530
in 32-bit systems K so and all

781
00:44:15,530 --> 00:44:19,690
arm that all all but about this function
does this low-key

782
00:44:19,690 --> 00:44:23,090
the stop a key slow Inc does is that it
takes

783
00:44:23,090 --> 00:44:26,450
the first big enabled and increases that
free by one

784
00:44:26,450 --> 00:44:29,660
k so that's that's what peace

785
00:44:29,660 --> 00:44:33,820
arm this part of the code us so let's
see how we can

786
00:44:33,820 --> 00:44:38,300
we can a music harm here I'm gonna

787
00:44:38,300 --> 00:44:41,770
talk by assuming that we have arm

788
00:44:41,770 --> 00:44:45,330
we running mobutu 12.04 I

789
00:44:45,330 --> 00:44:49,170
the appears version and the kernel
version is 3.8 .0

790
00:44:49,170 --> 00:44:53,680
armed us 19 does generic gate this thing
has been patched

791
00:44:53,680 --> 00:44:57,700
are so it's not there anymore but you
can always install the previous version

792
00:44:57,700 --> 00:45:00,790
and you will see that all these things
are there and you can play with it

793
00:45:00,790 --> 00:45:04,800
harm so what we have here is that true
the

794
00:45:04,800 --> 00:45:08,210
address of the per of RA the perfe

795
00:45:08,210 --> 00:45:11,730
SW event unable they re he somewhere
inside the kernel data

796
00:45:11,730 --> 00:45:15,140
and the kernel data are in the terribly
much a region

797
00:45:15,140 --> 00:45:18,230
okay after article image of course

798
00:45:18,230 --> 00:45:22,690
so our strategy here is that given the
vulnerability

799
00:45:22,690 --> 00:45:25,940
we can go and reference memory booo

800
00:45:25,940 --> 00:45:29,790
the RA right we can go we cannot go
after the re- because there is a tech

801
00:45:29,790 --> 00:45:30,339
their

802
00:45:30,339 --> 00:45:34,180
are the tix the upper bound of the re-
but if we provide a negative value

803
00:45:34,180 --> 00:45:37,320
we can go to memory addresses before the
re into your bikes

804
00:45:37,320 --> 00:45:41,520
forget so our strategy is to find a
function pointer

805
00:45:41,520 --> 00:45:44,869
which belong seem to use a curling
months and specifically to the data

806
00:45:44,869 --> 00:45:45,460
section

807
00:45:45,460 --> 00:45:49,660
because it needs to be I double tours to
overwrite it with something and

808
00:45:49,660 --> 00:45:54,490
moreover the difference between the
obvious about function pointer

809
00:45:54,490 --> 00:45:58,390
and the address of RA needs to be
multiple

810
00:45:58,390 --> 00:46:01,849
of 24 in that particular case because
it's a 64-bit Edition

811
00:46:01,849 --> 00:46:06,390
right and if you recall the size of the
data structure was

812
00:46:06,390 --> 00:46:09,930
24 and 64 bit so we can only crop

813
00:46:09,930 --> 00:46:13,390
the first of the the first but the first
eight

814
00:46:13,390 --> 00:46:17,190
we take the first eight bytes of the 24
by 10 we can only increase it by one

815
00:46:17,190 --> 00:46:20,569
so this is what these things about arm

816
00:46:20,569 --> 00:46:24,130
so if we do or we do our arm

817
00:46:24,130 --> 00:46:28,319
now sitting that girl we can find out
but this particular function pointer

818
00:46:28,319 --> 00:46:31,480
harm the function pointer SHM underscore
8

819
00:46:31,480 --> 00:46:35,559
to mark is located at this address weeks
arm

820
00:46:35,559 --> 00:46:40,480
wheaties I in the lower address from my
mouth ERA

821
00:46:40,480 --> 00:46:45,220
and it's a multiple of 24 the difference
of those two addresses multiple of 24

822
00:46:45,220 --> 00:46:48,569
so this is the function pointer that
we're gonna crops into K

823
00:46:48,569 --> 00:46:52,579
so how we do not well we provide this

824
00:46:52,579 --> 00:46:56,220
by your negative value as index in the
array okay

825
00:46:56,220 --> 00:46:59,970
and by doing that we go

826
00:46:59,970 --> 00:47:03,380
from essentially from here down to

827
00:47:03,380 --> 00:47:07,170
this particular address here which is a
function pointer that we need to corrupt

828
00:47:07,170 --> 00:47:11,329
okay now this function pointer initially
point

829
00:47:11,329 --> 00:47:14,869
into a function called cop SHM SHM up

830
00:47:14,869 --> 00:47:19,750
K this is in inside the text our region
of the cattle K

831
00:47:19,750 --> 00:47:23,180
this is it now every time we

832
00:47:23,180 --> 00:47:27,430
provide this invalid index into the
array

833
00:47:27,430 --> 00:47:32,339
can we call the static you slowly Inc we
increase the function pointer

834
00:47:32,339 --> 00:47:35,410
by one now the problem is that about

835
00:47:35,410 --> 00:47:39,230
the conch if I do alt all the things
that I said before

836
00:47:39,230 --> 00:47:42,470
the content that I managed to control
these inside if it's not region

837
00:47:42,470 --> 00:47:45,680
my so-called latee K I hear it

838
00:47:45,680 --> 00:47:48,759
64-bit machine if you call in this
particular vision

839
00:47:48,759 --> 00:47:52,430
the smoke is executable try copy
something users facing become sexy

840
00:47:52,430 --> 00:47:53,279
capable code

841
00:47:53,279 --> 00:47:56,410
in kernel Inside Facebook J but this
thing

842
00:47:56,410 --> 00:48:00,789
he's a floral dresses than my where my
function pointer pointer

843
00:48:00,789 --> 00:48:03,500
right every time I do the

844
00:48:03,500 --> 00:48:06,780
the paper meant I go to hire addresses

845
00:48:06,780 --> 00:48:10,660
I don't go back down here K so this is a
problem this is a problem right

846
00:48:10,660 --> 00:48:14,330
so how do we deal with it well by doing
lead with code reuse

847
00:48:14,330 --> 00:48:17,360
hom if we

848
00:48:17,360 --> 00:48:21,890
see all the instructions from starting
from coppice a Tennessee team up

849
00:48:21,890 --> 00:48:25,670
and upwards we can find instructions
called call our site

850
00:48:25,670 --> 00:48:29,250
K and this instruction

851
00:48:29,250 --> 00:48:33,060
he doc many bites like a happy I'll

852
00:48:33,060 --> 00:48:36,180
I 2007 to sim 21

853
00:48:36,180 --> 00:48:39,370
170 1,538 bikes

854
00:48:39,370 --> 00:48:43,280
I head of the original function pointer
harm

855
00:48:43,280 --> 00:48:46,890
what's important for this why the
important thing of these got to tease

856
00:48:46,890 --> 00:48:47,300
out

857
00:48:47,300 --> 00:48:51,810
are it calls into a location pointed by
the artist I register

858
00:48:51,810 --> 00:48:54,970
K now when I call peace

859
00:48:54,970 --> 00:48:59,660
system go here it's a 10-month what will
happen is that

860
00:48:59,660 --> 00:49:03,560
the corrupted function pointer will get
invoked

861
00:49:03,560 --> 00:49:09,610
K so up our morris et te Mike SHM
underscores a two-month will get invoked

862
00:49:09,610 --> 00:49:13,670
and then I also control the

863
00:49:13,670 --> 00:49:17,700
content of the iris I register because
our site happens to have

864
00:49:17,700 --> 00:49:21,720
the second argument about called K

865
00:49:21,720 --> 00:49:25,830
so how it works I

866
00:49:25,830 --> 00:49:29,580
a mock my pain loading userspace using
the techniques that I said

867
00:49:29,580 --> 00:49:33,320
talked about in the beginning which will
make them available in kernel space as

868
00:49:33,320 --> 00:49:33,800
well

869
00:49:33,800 --> 00:49:36,950
day so these to address is essentially
are synonyms

870
00:49:36,950 --> 00:49:40,140
right then what I do is that I call

871
00:49:40,140 --> 00:49:43,380
the vulnerable system call we

872
00:49:43,380 --> 00:49:48,310
the negative index here right

873
00:49:48,310 --> 00:49:51,610
that many times so as to make sure

874
00:49:51,610 --> 00:49:56,870
that my function pointer will point now
from the original function to call our

875
00:49:56,870 --> 00:49:57,320
site

876
00:49:57,320 --> 00:50:00,580
and then I call this a to mock

877
00:50:00,580 --> 00:50:04,180
with the scene on the Madras of my
payload internal space

878
00:50:04,180 --> 00:50:08,190
what will happen here he's not not be
more yet

879
00:50:08,190 --> 00:50:13,070
so what will happen here is that SAT
mite will branch to call a sigh and

880
00:50:13,070 --> 00:50:16,400
colourless I will branch to my so-called
here

881
00:50:16,400 --> 00:50:21,020
and this is how it executed now keep in
mind I never wrote something here

882
00:50:21,020 --> 00:50:24,490
that's the most important part I wrote
it in

883
00:50:24,490 --> 00:50:27,670
the userspace address which was a scene
on you or something

884
00:50:27,670 --> 00:50:31,690
and then by using a little bit of code
reuse I managed to branch there and

885
00:50:31,690 --> 00:50:32,270
executed

886
00:50:32,270 --> 00:50:37,020
so this is how we this is how the fuck
works in this is how we do it

887
00:50:37,020 --> 00:50:40,390
now next question and

888
00:50:40,390 --> 00:50:44,830
I'm gonna wrap up hom is what happens if
you smoke is not attributable

889
00:50:44,830 --> 00:50:49,440
okay in 32-bit systems the smoke is not
executable and it's very easy

890
00:50:49,440 --> 00:50:52,860
in the latest colonels to fix that thing
and have everything not executed

891
00:50:52,860 --> 00:50:57,060
Cape arm here I'm using 32-bit

892
00:50:57,060 --> 00:51:00,370
I I'll Linux

893
00:51:00,370 --> 00:51:04,470
arm boon to 12.04 LTS again

894
00:51:04,470 --> 00:51:08,590
different kernel com it's a shame on RB

895
00:51:08,590 --> 00:51:12,020
so the symbols that you see here are the
same that I used before

896
00:51:12,020 --> 00:51:15,440
here we have the data structure that we
try to exploit has a

897
00:51:15,440 --> 00:51:19,760
has a size of 12 so again with what we
need to have to find here is a function

898
00:51:19,760 --> 00:51:20,400
pointer

899
00:51:20,400 --> 00:51:25,040
at the lower address from RA and the
difference between a function pointer

900
00:51:25,040 --> 00:51:28,030
the others with the function pointer and
the original array should be a multiple

901
00:51:28,030 --> 00:51:28,810
of 12

902
00:51:28,810 --> 00:51:33,110
here we find a different one before
security office a tendency to not

903
00:51:33,110 --> 00:51:38,620
K the layout as you can see is a little
bit different and what we do is that we

904
00:51:38,620 --> 00:51:40,980
do we're gonna do the same attack using
pure top

905
00:51:40,980 --> 00:51:45,930
K so where I'm trying to get to show you
here is that the same

906
00:51:45,930 --> 00:51:49,250
the great to do is a is a way to
essentially make

907
00:51:49,250 --> 00:51:53,840
content available inside kernel space K
depending on the vulnerability that

908
00:51:53,840 --> 00:51:56,410
you're exploiting and depending on the
permission beats

909
00:51:56,410 --> 00:52:00,340
on the page tables office mop you can
either inject something which is cell

910
00:52:00,340 --> 00:52:00,830
code

911
00:52:00,830 --> 00:52:04,950
or you can inject some something else
which is a row payload or tampered with

912
00:52:04,950 --> 00:52:06,370
data structures and wherever

913
00:52:06,370 --> 00:52:11,030
so the picnic itself the only thing that
allows you to do is to make sure that

914
00:52:11,030 --> 00:52:12,440
User Control content

915
00:52:12,440 --> 00:52:16,720
is inside kernel space hot what comp is
gonna be that and how you're gonna use

916
00:52:16,720 --> 00:52:16,970
it

917
00:52:16,930 --> 00:52:20,160
it depends on the exploit on the
vulnerability that you're trying to

918
00:52:20,160 --> 00:52:20,650
exploit

919
00:52:20,650 --> 00:52:25,030
K so here for instance it's a shame on a
beating but since it's not executable

920
00:52:25,030 --> 00:52:28,330
what we do is that we do the same thing

921
00:52:28,330 --> 00:52:31,610
the payload that where injecting it's
not so-called

922
00:52:31,610 --> 00:52:35,440
it said ok payload okay I'm here again

923
00:52:35,440 --> 00:52:38,990
I'm using a different I negative index
to crop

924
00:52:38,990 --> 00:52:41,950
it's more like the same thing right we
have the original function pointer

925
00:52:41,950 --> 00:52:42,520
pointing

926
00:52:42,520 --> 00:52:46,720
here then I call paid use a different I
just use a different

927
00:52:46,720 --> 00:52:49,920
I negative index i corrupted many times
and

928
00:52:49,920 --> 00:52:54,100
every time a corrupted it goes up one
value until I read two different got it

929
00:52:54,100 --> 00:52:57,990
in this particular case the cot the got
it up I read to this one

930
00:52:57,990 --> 00:53:01,280
okay and when I call the system call

931
00:53:01,280 --> 00:53:05,010
then I'm gonna control the DX get so

932
00:53:05,010 --> 00:53:08,870
as I said this time I inject at all
payload

933
00:53:08,870 --> 00:53:11,990
K arm they're all payload let's say

934
00:53:11,990 --> 00:53:15,400
let's suppose a beat up here to this is
not cold

935
00:53:15,400 --> 00:53:18,500
it only addresses of God its

936
00:53:18,500 --> 00:53:22,690
from inside take the pic segment of the
kernel so when I call it what's gonna

937
00:53:22,690 --> 00:53:24,900
happen is that it's gonna go to

938
00:53:24,900 --> 00:53:28,170
arm these police particular address here

939
00:53:28,170 --> 00:53:31,370
the first read the first got it and

940
00:53:31,370 --> 00:53:35,800
start their apps a quince so how it
works is that

941
00:53:35,800 --> 00:53:41,250
again the same thing I use the technique
to mop something in Carrel space

942
00:53:41,250 --> 00:53:44,480
these are the synonyms in this
particular scenario

943
00:53:44,480 --> 00:53:48,710
K this is your Street address this is
the equivalent in on inside Carol space

944
00:53:48,710 --> 00:53:52,120
I call the vulnerable system call with
the arm

945
00:53:52,120 --> 00:53:55,180
with this argument that many times this
means that up

946
00:53:55,180 --> 00:53:59,340
at that point that up corrupted my
function pointer to pointing to the got

947
00:53:59,340 --> 00:54:00,170
it I want

948
00:54:00,170 --> 00:54:03,360
and then by invoking the vulnerable

949
00:54:03,360 --> 00:54:07,650
system call we the scene on the Madras I
we stock my rope chain

950
00:54:07,650 --> 00:54:11,510
and what they robbed us he's a little
bit of stock people think

951
00:54:11,510 --> 00:54:16,480
the beginning arm this will bring the
stock up here

952
00:54:16,480 --> 00:54:20,190
and then we will start executing those
got it

953
00:54:20,190 --> 00:54:23,970
these are all addresses from the kennel
tech segment which will essentially

954
00:54:23,970 --> 00:54:26,690
call commit crimes with the other
something idk read and elevate the

955
00:54:26,690 --> 00:54:28,650
privileges of the running process to
root

956
00:54:28,650 --> 00:54:33,140
and then what we doing some cleanup to
make sure that the whole thing is gonna

957
00:54:33,140 --> 00:54:34,090
continue running

958
00:54:34,090 --> 00:54:38,109
en route one cross the kernel K

959
00:54:38,109 --> 00:54:41,169
and that it so

960
00:54:41,169 --> 00:54:47,189
they also have a demo before closing I'm
gonna dem I'm gonna show you how the

961
00:54:47,189 --> 00:54:50,979
harm of first one first expert works

962
00:54:50,979 --> 00:54:57,029
so it as you can see to 64 bit system
here

963
00:54:57,029 --> 00:55:01,399
arm and it runs the vulnerable Carol but
I so do you before

964
00:55:01,399 --> 00:55:04,779
arm the user that I'm using his route

965
00:55:04,779 --> 00:55:08,899
it's a simple user doesn't have any
proof up you know special privileges

966
00:55:08,899 --> 00:55:12,419
arm and this is the exploit

967
00:55:12,419 --> 00:55:15,499
nothing as your ID or something you know

968
00:55:15,499 --> 00:55:21,669
weird here so yeah

969
00:55:21,669 --> 00:55:25,729
let started so the way it works is out
as a present in the beginning it finds

970
00:55:25,729 --> 00:55:27,390
the others his own party symbols

971
00:55:27,390 --> 00:55:31,019
and then what it does is that it calls I

972
00:55:31,019 --> 00:55:34,619
the vulnerable system call as many times
as it won't

973
00:55:34,619 --> 00:55:39,099
that many times so as to be able to
corrupt the of function pointer that I

974
00:55:39,099 --> 00:55:39,799
talked about

975
00:55:39,799 --> 00:55:44,189
the most important part he's this one
okay

976
00:55:44,189 --> 00:55:48,659
this is the userspace address which is
also can warm up here

977
00:55:48,659 --> 00:55:52,999
so after corrupting everything I use
this address to put the whole code

978
00:55:52,999 --> 00:55:56,819
and the sundress to reference it this is
happening in this park called

979
00:55:56,819 --> 00:56:00,179
so-called fitting then I'm just figuring
it and

980
00:56:00,179 --> 00:56:07,179
I elevated privilege to it that it

981
00:56:12,860 --> 00:56:13,470
harm

982
00:56:13,470 --> 00:56:16,960
so we're running out of time so I'm
gonna be super super quick

983
00:56:16,960 --> 00:56:20,580
hum we did the same thing to other
experts as well

984
00:56:20,580 --> 00:56:24,540
what we did was that we'd go went to
exploit db2 Clark his exploits

985
00:56:24,540 --> 00:56:29,140
tested those explodes into protected
colonels I'm we checked out the

986
00:56:29,140 --> 00:56:33,020
all those exploits got prevented them
then we went and modified to them

987
00:56:33,020 --> 00:56:37,510
using this technique and run them again
in all cases we managed to bypass the

988
00:56:37,510 --> 00:56:38,560
deployed protections

989
00:56:38,560 --> 00:56:41,940
a note here when I say bypassed

990
00:56:41,940 --> 00:56:45,570
doesn't really mean that these
protections have some think there's

991
00:56:45,570 --> 00:56:47,020
something but with those protections

992
00:56:47,020 --> 00:56:51,000
K these are good and we should have them
there the problem is that the kennel

993
00:56:51,000 --> 00:56:54,240
is having Christmas regions K it's a
design issue

994
00:56:54,240 --> 00:56:57,790
the kernel has a region but directly
much memory and create

995
00:56:57,790 --> 00:57:01,340
alice is in the senate is also arm you
know

996
00:57:01,340 --> 00:57:05,690
harm relapse relying to do different
protection domains userspace internal

997
00:57:05,690 --> 00:57:06,080
specs

998
00:57:06,080 --> 00:57:09,560
docs the most important our problem here

999
00:57:09,560 --> 00:57:13,190
there's nothing wrong with those
protections it's just that the kernel

1000
00:57:13,190 --> 00:57:13,620
has

1001
00:57:13,620 --> 00:57:17,050
made a design choice that we can exploit
it to go around

1002
00:57:17,050 --> 00:57:21,240
are those protections home one final
thing before closing

1003
00:57:21,240 --> 00:57:25,410
if we do arm you may wonder what's the

1004
00:57:25,410 --> 00:57:28,430
probably go succeeding when we don't do
that up

1005
00:57:28,430 --> 00:57:32,810
you know deterministic attack but we do
it probably sickly what I have here ease

1006
00:57:32,810 --> 00:57:36,550
arm in this graph weaver I the physical
memory

1007
00:57:36,550 --> 00:57:40,120
and on the x-axis on the y-axis you can
fight you can see the success

1008
00:57:40,120 --> 00:57:41,700
probability for various

1009
00:57:41,700 --> 00:57:45,280
arm different scenarios and idle system

1010
00:57:45,280 --> 00:57:48,990
a system where we browse and a system
where we do a candle built

1011
00:57:48,990 --> 00:57:52,850
as you can see even even the when the

1012
00:57:52,850 --> 00:57:55,640
the amount of memories only want to go
back so there's a lot of contention

1013
00:57:55,640 --> 00:57:56,860
between all the processes

1014
00:57:56,860 --> 00:58:01,760
we're on I can all be in the background
when we do the attack we have

1015
00:58:01,760 --> 00:58:05,890
0.65% to $0.68 success probably now

1016
00:58:05,890 --> 00:58:12,080
as we move to higher at 22 systems with
more physical memory this can go up to

1017
00:58:12,080 --> 00:58:16,840
point 95 which means something that case
we have more or less minutes to

1018
00:58:16,840 --> 00:58:20,890
copy the payload in every more list
every page frame

1019
00:58:20,890 --> 00:58:26,520
so when we Brandon Yip select one we
always succeed arm

1020
00:58:26,520 --> 00:58:29,940
you go to the song

1021
00:58:29,940 --> 00:58:33,450
before closing if you go to the site
your old here we have prepared a bunch

1022
00:58:33,450 --> 00:58:34,140
of VM's

1023
00:58:34,140 --> 00:58:38,700
these BM's come ready with virus can
also which are vulnerable to

1024
00:58:38,700 --> 00:58:42,100
arm the exploits that I should quickly
before in my table

1025
00:58:42,100 --> 00:58:45,590
and the same every VM's have protected
kennels

1026
00:58:45,590 --> 00:58:49,010
and they contain the source code of the
original exploit

1027
00:58:49,010 --> 00:58:52,680
and a modified once so you can go take
them download them

1028
00:58:52,680 --> 00:58:57,050
and you can try and combination you want
you can get the regional exploits

1029
00:58:57,050 --> 00:59:00,270
see that they are they don't work on a
protected can all plan run

1030
00:59:00,270 --> 00:59:03,760
our visitors to see how we bypassed them
and songs before

1031
00:59:03,760 --> 00:59:10,760
and without I can take questions

1032
00:59:21,010 --> 00:59:22,760
so yeah you're right

1033
00:59:22,760 --> 00:59:26,630
I'm I'm not 100 percent sure but I don't
think that you have

1034
00:59:26,630 --> 00:59:31,590
exactly the same thing the thing is that
you have other stuff that the resulting

1035
00:59:31,590 --> 00:59:33,250
to more or less something equivalent

1036
00:59:33,250 --> 00:59:36,920
so all operating systems have the notion
of a page cuss day

1037
00:59:36,920 --> 00:59:40,840
the paint cuss is a region acts as a
casa every time you do I owe

1038
00:59:40,840 --> 00:59:45,370
K so you have a fiery when you execute
it you do I owe you bring those pages

1039
00:59:45,370 --> 00:59:46,790
somewhere in physical memory

1040
00:59:46,790 --> 00:59:49,920
and then every time you need to access
the same

1041
00:59:49,920 --> 00:59:53,540
file again you don't need to do the i/o
again right the thing is that

1042
00:59:53,540 --> 00:59:56,980
this thing essentially will resulting to
a free smoke like

1043
00:59:56,980 --> 01:00:00,420
region again because you have content
where you control

1044
01:00:00,420 --> 01:00:03,980
and get injected inside the girl under
space so instead of

1045
01:00:03,980 --> 01:00:09,150
using free smart as it is right now you
can use the page gaskin operating system

1046
01:00:09,150 --> 01:00:09,910
that doesn't have

1047
01:00:09,910 --> 01:00:16,910
is my bridge people

1048
01:00:18,970 --> 01:00:21,690
yeah I don't know

1049
01:00:21,690 --> 01:00:28,690
be a we don't know

1050
01:00:39,540 --> 01:00:41,890
from so depends on the situation right

1051
01:00:41,890 --> 01:00:46,010
I corrected read to do it can work

1052
01:00:46,010 --> 01:00:49,120
assuming that you have it's not its own

1053
01:00:49,120 --> 01:00:52,400
not something that we but will will
allow you to exploit something that was

1054
01:00:52,400 --> 01:00:53,760
not exploitable erected

1055
01:00:53,760 --> 01:00:58,420
to user sonar K so if you have a right
to use our scenario that has a way to go

1056
01:00:58,420 --> 01:00:59,580
around k Salar

1057
01:00:59,580 --> 01:01:03,300
if it has a memory his clothes are gonna
be good for example that it's amusing

1058
01:01:03,300 --> 01:01:10,300
who will use the same thing again to do
this thing

1059
01:01:20,990 --> 01:01:27,990
here yeah actually I didn't say that
there's no way but

1060
01:01:28,580 --> 01:01:34,160
um yet the thing is that the wait is
designed it allows you to go around

1061
01:01:34,160 --> 01:01:37,200
a particular a particular set of
mechanisms that was deployed there

1062
01:01:37,200 --> 01:01:40,410
two separate colonel in userspace are
the things that

1063
01:01:40,410 --> 01:01:44,650
arm we see that this thing is a is a
design pattern

1064
01:01:44,650 --> 01:01:48,859
it is also used in other operating
systems I haven't checked windows but a

1065
01:01:48,859 --> 01:01:49,670
large has it

1066
01:01:49,670 --> 01:01:54,410
are the beers this have it as well and
I'm pretty sure that

1067
01:01:54,410 --> 01:01:58,210
others you know if we take others were
gonna find similar stuff there as well

1068
01:01:58,210 --> 01:02:02,320
I know if you take our white paper I'll
we have a defense for that

1069
01:02:02,320 --> 01:02:06,710
I'm it's not perfect but it's something
that you can start

1070
01:02:06,710 --> 01:02:09,990
you know if you're interested you can
start without and then maybe somebody

1071
01:02:09,990 --> 01:02:11,160
else can kick in

1072
01:02:11,160 --> 01:02:14,210
arm you know joined the effort and pick
it even better

1073
01:02:14,210 --> 01:02:21,210
another question

1074
01:02:23,160 --> 01:02:23,410
okay

