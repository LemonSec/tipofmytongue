1
00:00:00,030 --> 00:00:02,939
so thanks for coming by fellas and today

2
00:00:02,939 --> 00:00:05,790
we are going to introduce a new

3
00:00:05,790 --> 00:00:08,880
exploitation I mean a new technique by

4
00:00:08,880 --> 00:00:11,040
attacking Windows by windows and my name

5
00:00:11,040 --> 00:00:13,740
is Lee Joe and this is my colleague in

6
00:00:13,740 --> 00:00:14,940
Leon hi everybody

7
00:00:14,940 --> 00:00:17,490
okay well clothes from the tents and

8
00:00:17,490 --> 00:00:20,699
pitching manager so this is an outline

9
00:00:20,699 --> 00:00:23,070
of today's presentation first of all we

10
00:00:23,070 --> 00:00:24,300
are going to introduce about this

11
00:00:24,300 --> 00:00:26,310
ourselves our teams and then we are

12
00:00:26,310 --> 00:00:28,949
going to have a brief view of the

13
00:00:28,949 --> 00:00:31,289
old-school stylez to explore the Windows

14
00:00:31,289 --> 00:00:33,180
kernel and then we are going to talk

15
00:00:33,180 --> 00:00:36,930
about the Windows 10 limitations and I'm

16
00:00:36,930 --> 00:00:38,579
going to introduce the zero to one

17
00:00:38,579 --> 00:00:41,399
exploitation and my colleague in here

18
00:00:41,399 --> 00:00:43,020
will introduce the one to zero

19
00:00:43,020 --> 00:00:46,710
exploitation okay so first of all being

20
00:00:46,710 --> 00:00:50,160
will introduce the team okay Jairo madam

21
00:00:50,160 --> 00:00:52,410
is a debugger and damn well the

22
00:00:52,410 --> 00:00:55,530
neighbors in the Senate what the article

23
00:00:55,530 --> 00:00:58,680
is just having to introduce our team we

24
00:00:58,680 --> 00:01:01,469
have several members she is our team

25
00:01:01,469 --> 00:01:05,069
leader good days idolizing flash on the

26
00:01:05,069 --> 00:01:08,100
PDF in memory allocation created me and

27
00:01:08,100 --> 00:01:10,170
I'm responsible for find the windows

28
00:01:10,170 --> 00:01:13,140
color very rapidity and the writing is

29
00:01:13,140 --> 00:01:17,280
point microSD 14 PDFs clearly and the

30
00:01:17,280 --> 00:01:19,740
way I are doing five jobs road miles

31
00:01:19,740 --> 00:01:23,700
doing a accommodation traveler ability

32
00:01:23,700 --> 00:01:27,390
expectation in photo in 2016 we call the

33
00:01:27,390 --> 00:01:30,030
system privilege by hiking Adobe Flash

34
00:01:30,030 --> 00:01:32,520
in unity three seconds and I want the

35
00:01:32,520 --> 00:01:35,250
title mask of vampire tunes a high score

36
00:01:35,250 --> 00:01:39,720
with kimchi also we call this privilege

37
00:01:39,720 --> 00:01:43,110
and achieve the price in Japan by

38
00:01:43,110 --> 00:01:45,869
hacking Swiss for for ye all on one

39
00:01:45,869 --> 00:01:52,170
second in 2016 we received 14 six

40
00:01:52,170 --> 00:01:54,740
acknowledgments for Microsoft and Adobe

41
00:01:54,740 --> 00:01:57,899
today we will show the techniques of

42
00:01:57,899 --> 00:02:00,810
winners color is coach when we use the

43
00:02:00,810 --> 00:02:04,070
important and kicked on should we start

44
00:02:04,070 --> 00:02:07,619
okay so I'm going to introduce the first

45
00:02:07,619 --> 00:02:11,700
zero to one so basically if we want to

46
00:02:11,700 --> 00:02:13,180
exploit

47
00:02:13,180 --> 00:02:15,609
if we want to attack the programs in

48
00:02:15,609 --> 00:02:18,519
userspace or the programs in the kernel

49
00:02:18,519 --> 00:02:20,170
space we have to deal with three

50
00:02:20,170 --> 00:02:22,930
problems right so the first one is where

51
00:02:22,930 --> 00:02:25,180
to write a second one is what to write

52
00:02:25,180 --> 00:02:27,400
and third wise what can we do right now

53
00:02:27,400 --> 00:02:29,379
so for the first question I think

54
00:02:29,379 --> 00:02:32,109
everyone knows that we should interrupt

55
00:02:32,109 --> 00:02:35,019
the normal procedure of your process and

56
00:02:35,019 --> 00:02:37,420
force it to jump into our shellcode and

57
00:02:37,420 --> 00:02:40,379
then what to write actually we want to

58
00:02:40,379 --> 00:02:43,989
you make use of the abnormal T and make

59
00:02:43,989 --> 00:02:46,629
use of them and the third one is after

60
00:02:46,629 --> 00:02:49,780
we alter the data what can we do to

61
00:02:49,780 --> 00:02:51,430
reach the final destination like

62
00:02:51,430 --> 00:02:54,909
escalate the privileges to the system

63
00:02:54,909 --> 00:02:57,959
privilege and all gain whatever we want

64
00:02:57,959 --> 00:03:01,150
so in the old days we want to attack

65
00:03:01,150 --> 00:03:04,510
Windows XP or Windows 7 so these three

66
00:03:04,510 --> 00:03:07,419
questions are quite simple so we need to

67
00:03:07,419 --> 00:03:10,120
focus on a structure that is called hell

68
00:03:10,120 --> 00:03:13,239
dispatch table we can call a pair

69
00:03:13,239 --> 00:03:15,370
function that is anti curious system

70
00:03:15,370 --> 00:03:18,519
information to get the loading addresses

71
00:03:18,519 --> 00:03:22,510
of all the kernel modules and we add

72
00:03:22,510 --> 00:03:26,349
some offset and we can finally get get

73
00:03:26,349 --> 00:03:28,510
the hell dispatch table so this hell

74
00:03:28,510 --> 00:03:30,729
dispatch table is kind of a function

75
00:03:30,729 --> 00:03:33,370
distributor there's a lot of functions

76
00:03:33,370 --> 00:03:35,439
starting address in this hell dispatch

77
00:03:35,439 --> 00:03:38,650
table so what we need to do right now is

78
00:03:38,650 --> 00:03:42,519
to replace one or many of them many of

79
00:03:42,519 --> 00:03:45,129
the starting address with our shellcode

80
00:03:45,129 --> 00:03:48,549
address in the user space so then when

81
00:03:48,549 --> 00:03:50,739
we call the function int curing interval

82
00:03:50,739 --> 00:03:53,139
profile which has the kernel version of

83
00:03:53,139 --> 00:03:56,169
the insecure interval internal profile

84
00:03:56,169 --> 00:03:59,019
and the kernel version will find the

85
00:03:59,019 --> 00:04:02,409
address of the starting address of in

86
00:04:02,409 --> 00:04:04,840
the house dispatch table which now is

87
00:04:04,840 --> 00:04:06,639
our shellcode address in the user space

88
00:04:06,639 --> 00:04:10,299
and execute the our shellcode so it is

89
00:04:10,299 --> 00:04:14,859
very easy for out school days but I

90
00:04:14,859 --> 00:04:18,488
think the the Microsoft security

91
00:04:18,488 --> 00:04:21,159
engineers are quite smart right so they

92
00:04:21,159 --> 00:04:24,219
create to several of the protections to

93
00:04:24,219 --> 00:04:26,410
fit in this action

94
00:04:26,410 --> 00:04:29,140
so I think there are two most effective

95
00:04:29,140 --> 00:04:31,930
ways so the first one is the integrity

96
00:04:31,930 --> 00:04:34,030
verification and the second line is at

97
00:04:34,030 --> 00:04:37,660
MEP so for the integrity verification

98
00:04:37,660 --> 00:04:41,440
the system well we both know the process

99
00:04:41,440 --> 00:04:44,290
has many attributes so that integrity is

100
00:04:44,290 --> 00:04:49,210
one of its attribute so so so the

101
00:04:49,210 --> 00:04:50,800
windows will check whether the process

102
00:04:50,800 --> 00:04:54,130
is a high integrity user or a low

103
00:04:54,130 --> 00:04:56,950
integrity user if it is that it is a low

104
00:04:56,950 --> 00:04:58,720
integrity user when we call the function

105
00:04:58,720 --> 00:05:01,390
ng Kure system information to get the

106
00:05:01,390 --> 00:05:03,730
loading base address of the kernel

107
00:05:03,730 --> 00:05:05,920
modules then what we have right now is

108
00:05:05,920 --> 00:05:12,730
only a set status access denied so some

109
00:05:12,730 --> 00:05:14,740
of the hacking teams they create some

110
00:05:14,740 --> 00:05:17,290
ways to do to you know to buy passage

111
00:05:17,290 --> 00:05:19,090
because they found some of the

112
00:05:19,090 --> 00:05:21,580
information leaking vulnerabilities so

113
00:05:21,580 --> 00:05:24,040
this information leaking vulnerabilities

114
00:05:24,040 --> 00:05:26,500
will give us the information about the

115
00:05:26,500 --> 00:05:30,010
loading address but you know this is

116
00:05:30,010 --> 00:05:32,470
another vulnerability so we have we have

117
00:05:32,470 --> 00:05:35,350
to use two vulnerability to you know to

118
00:05:35,350 --> 00:05:37,840
gain our final reach our final

119
00:05:37,840 --> 00:05:40,630
destination the other protection is

120
00:05:40,630 --> 00:05:43,110
called SME P which refers to the

121
00:05:43,110 --> 00:05:46,570
supervisor mode execution protection so

122
00:05:46,570 --> 00:05:49,540
basically the list protection will

123
00:05:49,540 --> 00:05:53,350
forbidden the CPU or the system to

124
00:05:53,350 --> 00:05:57,550
execute the code in the user space so

125
00:05:57,550 --> 00:06:02,290
what if we if we just round the code if

126
00:06:02,290 --> 00:06:04,780
we just do like the old school days we

127
00:06:04,780 --> 00:06:08,680
replace the share code address to the to

128
00:06:08,680 --> 00:06:10,180
the address in the hell dispatch table

129
00:06:10,180 --> 00:06:12,669
and execute it then what we have right

130
00:06:12,669 --> 00:06:15,310
now is a Blueskin right there we go

131
00:06:15,310 --> 00:06:19,300
nothing from right so some of the

132
00:06:19,300 --> 00:06:21,010
hacking teams are very smart so they

133
00:06:21,010 --> 00:06:23,140
came up with the ideas of the RO

134
00:06:23,140 --> 00:06:26,110
keychain I think everyone knows it's ROP

135
00:06:26,110 --> 00:06:28,870
chains they use the ROP chains to remove

136
00:06:28,870 --> 00:06:32,680
the SM EP protection but in order to do

137
00:06:32,680 --> 00:06:35,039
so the firstly they also need a

138
00:06:35,039 --> 00:06:38,350
information leaking vulnerability to get

139
00:06:38,350 --> 00:06:41,320
the loading base address of the win32 k

140
00:06:41,320 --> 00:06:45,280
driver and then use the ROP chain to

141
00:06:45,280 --> 00:06:48,280
close to close the protection so

142
00:06:48,280 --> 00:06:51,760
basically we need two vulnerabilities we

143
00:06:51,760 --> 00:06:53,979
need the ROP chain and we both know

144
00:06:53,979 --> 00:06:56,110
creating or constructing this kind of

145
00:06:56,110 --> 00:06:59,050
ROP chain is very difficult or very

146
00:06:59,050 --> 00:07:03,880
annoyed so everybody is upset so this is

147
00:07:03,880 --> 00:07:08,410
going to be our new exploit method so

148
00:07:08,410 --> 00:07:11,470
our method has many advantages we can

149
00:07:11,470 --> 00:07:13,870
use it on all windows operating system

150
00:07:13,870 --> 00:07:17,470
no matter it is x86 or x64

151
00:07:17,470 --> 00:07:20,289
we only need to trigger one time we can

152
00:07:20,289 --> 00:07:20,800
bypass

153
00:07:20,800 --> 00:07:24,760
SM EP we do not have to create any of

154
00:07:24,760 --> 00:07:28,390
the ROP chain we just only change one

155
00:07:28,390 --> 00:07:31,479
beat in the kernel space and we can

156
00:07:31,479 --> 00:07:35,710
bypass the kar SR and now I'm going to

157
00:07:35,710 --> 00:07:38,470
introduce the details of it so back to

158
00:07:38,470 --> 00:07:42,300
the three questions where to write

159
00:07:42,810 --> 00:07:46,180
things Microsoft does not allow us to

160
00:07:46,180 --> 00:07:48,940
use the empty curious system information

161
00:07:48,940 --> 00:07:52,960
to get the loading address but there's

162
00:07:52,960 --> 00:07:55,630
something that they did not you know

163
00:07:55,630 --> 00:07:58,750
they do not fine so this is a key shared

164
00:07:58,750 --> 00:08:01,990
infrastructure actually you can see the

165
00:08:01,990 --> 00:08:04,479
two share info structure has a kernel

166
00:08:04,479 --> 00:08:07,479
map is in the kernel space but if you

167
00:08:07,479 --> 00:08:10,330
loading the user 32 dot DL a other

168
00:08:10,330 --> 00:08:13,360
dynamic a dynamic link library so this

169
00:08:13,360 --> 00:08:15,400
kind of memory will be mapped into our

170
00:08:15,400 --> 00:08:19,180
user space automatically by the function

171
00:08:19,180 --> 00:08:22,960
MN of view of section mm map view of

172
00:08:22,960 --> 00:08:24,940
section by that function so basically

173
00:08:24,940 --> 00:08:29,590
that the data in the GTR info are mapped

174
00:08:29,590 --> 00:08:32,440
into the user space so this is a kind of

175
00:08:32,440 --> 00:08:35,469
information leaking vulnerability but

176
00:08:35,469 --> 00:08:38,789
Microsoft did not regard it as a

177
00:08:38,789 --> 00:08:40,059
vulnerability

178
00:08:40,059 --> 00:08:42,429
maybe they were fix it in Windows 11

179
00:08:42,429 --> 00:08:43,780
wins 12 I don't know

180
00:08:43,780 --> 00:08:47,520
so as you can see that we had

181
00:08:47,520 --> 00:08:50,940
the P hat the P hat is a is a member of

182
00:08:50,940 --> 00:08:54,450
the hen hen reentry's handle entries so

183
00:08:54,450 --> 00:08:57,000
this P hat will point to a window object

184
00:08:57,000 --> 00:09:01,080
also it can point to a menu object so

185
00:09:01,080 --> 00:09:04,790
I'm going to focus on the window object

186
00:09:04,790 --> 00:09:08,790
so basically what we need to write is in

187
00:09:08,790 --> 00:09:12,480
the window object so what's in the

188
00:09:12,480 --> 00:09:14,640
window object there's a very very

189
00:09:14,640 --> 00:09:16,800
important structure that is called tag

190
00:09:16,800 --> 00:09:21,470
window object so window is the basic I

191
00:09:21,470 --> 00:09:24,330
think is a basic objecting windows we

192
00:09:24,330 --> 00:09:26,910
always use create window API to create a

193
00:09:26,910 --> 00:09:31,020
window and then in the kernel the kernel

194
00:09:31,020 --> 00:09:34,890
will create a tag window structure so in

195
00:09:34,890 --> 00:09:36,510
this tag window structure it has many

196
00:09:36,510 --> 00:09:39,510
important information like the the

197
00:09:39,510 --> 00:09:42,630
parent window like the window process

198
00:09:42,630 --> 00:09:45,470
like the name of the window like the

199
00:09:45,470 --> 00:09:52,140
window extra data so what should we do

200
00:09:52,140 --> 00:09:55,200
right now I think we should focus on the

201
00:09:55,200 --> 00:09:58,260
windows extra data let's look at the

202
00:09:58,260 --> 00:10:01,920
structure of the tag window so you can

203
00:10:01,920 --> 00:10:04,380
see there's a member called Phoebe

204
00:10:04,380 --> 00:10:07,140
window extra what is CB and window extra

205
00:10:07,140 --> 00:10:09,660
Phoebe window extra is actually the size

206
00:10:09,660 --> 00:10:12,360
of the window extra data section as you

207
00:10:12,360 --> 00:10:15,090
can see at the bottom of this structure

208
00:10:15,090 --> 00:10:20,850
so we could use two API to control the

209
00:10:20,850 --> 00:10:22,680
tag window structure the first API is a

210
00:10:22,680 --> 00:10:24,660
set window long and the second one is

211
00:10:24,660 --> 00:10:27,720
get window long but there's two parent

212
00:10:27,720 --> 00:10:30,900
that it is strangest index what is a

213
00:10:30,900 --> 00:10:34,470
index actually we can regard the window

214
00:10:34,470 --> 00:10:37,860
extra data section as a array as ad word

215
00:10:37,860 --> 00:10:40,770
array so basically the egg index is the

216
00:10:40,770 --> 00:10:44,190
index in the window extra data so what

217
00:10:44,190 --> 00:10:46,650
we need to do what we could do right now

218
00:10:46,650 --> 00:10:49,890
is to use that window long to write

219
00:10:49,890 --> 00:10:51,870
something in the window extra data and

220
00:10:51,870 --> 00:10:54,180
we we can also use get window long to

221
00:10:54,180 --> 00:10:55,800
read the word in the we

222
00:10:55,800 --> 00:11:03,230
extra data by using the n index param so

223
00:11:03,230 --> 00:11:07,170
so this is a case that it's a normal

224
00:11:07,170 --> 00:11:10,980
case so so we can see that we have two

225
00:11:10,980 --> 00:11:12,959
windows the window one and the window

226
00:11:12,959 --> 00:11:14,579
two and between them there are other

227
00:11:14,579 --> 00:11:18,989
objects so in window one we have the

228
00:11:18,989 --> 00:11:21,989
Seabee window extra the value is hex

229
00:11:21,989 --> 00:11:24,629
eight and we can see that this is a

230
00:11:24,629 --> 00:11:29,179
binary formation of the CB window extra

231
00:11:29,179 --> 00:11:32,670
in the position three there is there is

232
00:11:32,670 --> 00:11:37,379
a one and the others are both zeros so

233
00:11:37,379 --> 00:11:42,809
what if we change we change the high

234
00:11:42,809 --> 00:11:48,449
speed to one what do we do so yes we

235
00:11:48,449 --> 00:11:51,449
just change the AK window extra size

236
00:11:51,449 --> 00:11:54,269
from a very tiny size to a very huge

237
00:11:54,269 --> 00:11:58,799
size so in our case the original science

238
00:11:58,799 --> 00:12:01,470
is eight right and now we change it to

239
00:12:01,470 --> 00:12:04,529
two gigabytes so as you can see right

240
00:12:04,529 --> 00:12:07,470
there so basically the data just behind

241
00:12:07,470 --> 00:12:10,679
just right behind the tag window of

242
00:12:10,679 --> 00:12:14,369
window one becomes our extra data so we

243
00:12:14,369 --> 00:12:20,249
could use the set window long to modify

244
00:12:20,249 --> 00:12:22,170
the data right to modify the data are

245
00:12:22,170 --> 00:12:26,339
just a regard these this stuff as our

246
00:12:26,339 --> 00:12:29,629
data so we can use that API to change it

247
00:12:29,629 --> 00:12:31,920
what what we can change it whatever we

248
00:12:31,920 --> 00:12:37,339
want we can change the data into the our

249
00:12:37,339 --> 00:12:40,290
you know future for our future

250
00:12:40,290 --> 00:12:44,819
exploitation so how can we read from the

251
00:12:44,819 --> 00:12:48,449
kernel space okay since now we have

252
00:12:48,449 --> 00:12:51,419
changed the window extra data size from

253
00:12:51,419 --> 00:12:54,269
eight bytes to two gigabytes so that

254
00:12:54,269 --> 00:12:58,799
means the window 2 is probably by by

255
00:12:58,799 --> 00:13:01,709
modified to the extra data of window 1

256
00:13:01,709 --> 00:13:06,449
so now let's focus on a member that is

257
00:13:06,449 --> 00:13:08,120
called string name

258
00:13:08,120 --> 00:13:10,279
name has three members the lens the

259
00:13:10,279 --> 00:13:12,890
maximum dense and popper so this offer

260
00:13:12,890 --> 00:13:15,770
actually contains the character of the

261
00:13:15,770 --> 00:13:18,800
window - but now we can change the data

262
00:13:18,800 --> 00:13:21,500
in the window - right so basically we

263
00:13:21,500 --> 00:13:25,370
can set the buffer to the place we want

264
00:13:25,370 --> 00:13:29,000
to read and then we call internal get

265
00:13:29,000 --> 00:13:33,350
window text to read whatever we want in

266
00:13:33,350 --> 00:13:35,240
the kernel space is that amazing

267
00:13:35,240 --> 00:13:40,520
so the thing we can also write something

268
00:13:40,520 --> 00:13:45,440
to somewhere by using the API MT user

269
00:13:45,440 --> 00:13:48,529
depth set text what we need to do right

270
00:13:48,529 --> 00:13:51,950
now is to set the buffer to the place we

271
00:13:51,950 --> 00:13:55,820
want to write and then we call this API

272
00:13:55,820 --> 00:13:58,400
function and you know our data are

273
00:13:58,400 --> 00:14:02,089
written to the position we assigned so

274
00:14:02,089 --> 00:14:05,810
basically we can call the set window

275
00:14:05,810 --> 00:14:07,940
long for many times we can reset the

276
00:14:07,940 --> 00:14:10,760
buffer address for many times and we can

277
00:14:10,760 --> 00:14:15,670
you know read and write anywhere we want

278
00:14:16,570 --> 00:14:21,200
okay so now how to access callate our

279
00:14:21,200 --> 00:14:23,420
privilege from the normal user to the

280
00:14:23,420 --> 00:14:26,150
system user basically we just reverse

281
00:14:26,150 --> 00:14:28,940
engineer wizard to reverse engineering

282
00:14:28,940 --> 00:14:31,490
of the get windows thread process ID and

283
00:14:31,490 --> 00:14:34,670
we found a relationship between the tag

284
00:14:34,670 --> 00:14:37,790
window structure and the process at the

285
00:14:37,790 --> 00:14:41,180
write the process structure so as you

286
00:14:41,180 --> 00:14:43,610
can see in the window attack window

287
00:14:43,610 --> 00:14:45,650
structure also a member called PTI the

288
00:14:45,650 --> 00:14:49,400
PTI points to a tax read info structure

289
00:14:49,400 --> 00:14:52,070
and textile infrastructure point to the

290
00:14:52,070 --> 00:14:55,130
case read structure and at the offset

291
00:14:55,130 --> 00:14:58,730
220 in case tread structure it points to

292
00:14:58,730 --> 00:15:00,410
Delta member called process and it

293
00:15:00,410 --> 00:15:04,910
points to the process structure and the

294
00:15:04,910 --> 00:15:07,040
English process structure those are

295
00:15:07,040 --> 00:15:10,240
talking those are talking of our process

296
00:15:10,240 --> 00:15:15,230
but the windows help us why because if

297
00:15:15,230 --> 00:15:18,260
we do not set our parent window to our

298
00:15:18,260 --> 00:15:21,260
window windows will force the desktop

299
00:15:21,260 --> 00:15:21,830
window

300
00:15:21,830 --> 00:15:24,650
as our parent window so basically we can

301
00:15:24,650 --> 00:15:28,310
use this phone with parents in our tag

302
00:15:28,310 --> 00:15:31,630
window to find the desktop window and

303
00:15:31,630 --> 00:15:34,250
through the same procedure we can

304
00:15:34,250 --> 00:15:39,080
finally reach the CSRs SDXC the system

305
00:15:39,080 --> 00:15:42,620
process and at the same offset we can

306
00:15:42,620 --> 00:15:45,410
get the system talking what we need to

307
00:15:45,410 --> 00:15:50,690
do right now is to use these two API use

308
00:15:50,690 --> 00:15:53,090
this two API set window and a get window

309
00:15:53,090 --> 00:15:56,390
to read the talk and from the system

310
00:15:56,390 --> 00:15:59,720
talking and then we write it to our

311
00:15:59,720 --> 00:16:03,590
talking position so this is going to be

312
00:16:03,590 --> 00:16:08,390
our escalation process so this is a real

313
00:16:08,390 --> 00:16:13,130
case the CVE 2016 zero one seven four at

314
00:16:13,130 --> 00:16:16,280
first we load a font into the kernel and

315
00:16:16,280 --> 00:16:18,860
the kernel will create a PFF object and

316
00:16:18,860 --> 00:16:22,310
then with free the PFF object but

317
00:16:22,310 --> 00:16:24,800
actually in the kernel somewhere stores

318
00:16:24,800 --> 00:16:27,620
the reference of the PFF object and then

319
00:16:27,620 --> 00:16:30,530
we immediately reallocate the same size

320
00:16:30,530 --> 00:16:32,960
of the memory and we you know this is a

321
00:16:32,960 --> 00:16:35,420
definitely I use after free right and

322
00:16:35,420 --> 00:16:37,820
then we free the phone to again and

323
00:16:37,820 --> 00:16:41,480
finally reach the step reach the Step

324
00:16:41,480 --> 00:16:45,170
five step five is the assembly code yeah

325
00:16:45,170 --> 00:16:48,620
it's right there so our X the Registrar

326
00:16:48,620 --> 00:16:52,190
X is actually controlled by us we can

327
00:16:52,190 --> 00:16:55,400
let the rx point to the at the tag

328
00:16:55,400 --> 00:16:58,550
window as the offset DF at the tag

329
00:16:58,550 --> 00:17:01,640
window and then plus they're a hex 3

330
00:17:01,640 --> 00:17:05,119
plus taxi and we will reach at the

331
00:17:05,119 --> 00:17:07,880
highest bit of the CB window extra and

332
00:17:07,880 --> 00:17:10,970
now what we need to do now is to execute

333
00:17:10,970 --> 00:17:14,209
the assembly assembly code that is or

334
00:17:14,209 --> 00:17:19,160
the war PDR our X and plus hex Eve and -

335
00:17:19,160 --> 00:17:23,359
and we can change the size of the CPU

336
00:17:23,359 --> 00:17:26,810
window extra to from zero to two six

337
00:17:26,810 --> 00:17:31,520
zeros so in the part phone we are

338
00:17:31,520 --> 00:17:35,370
attacking the flash and we are using

339
00:17:35,370 --> 00:17:38,400
the flesh to execute anywhere in the at

340
00:17:38,400 --> 00:17:42,540
windows edge and we escalate the Aja's

341
00:17:42,540 --> 00:17:45,030
process the privilege of the edge

342
00:17:45,030 --> 00:17:47,670
process to the system process privilege

343
00:17:47,670 --> 00:17:51,120
and then we escaped from the sandbox we

344
00:17:51,120 --> 00:17:54,059
complete this word you know we complete

345
00:17:54,059 --> 00:17:57,030
this job in three seconds and we won't

346
00:17:57,030 --> 00:18:00,360
the 50,000 reward and the surface pro 4

347
00:18:00,360 --> 00:18:04,880
so in other case there are two assembly

348
00:18:04,880 --> 00:18:08,370
code right there yes as you can see

349
00:18:08,370 --> 00:18:10,830
reserved basically what we need to do

350
00:18:10,830 --> 00:18:13,290
right now is to make the SEBI window

351
00:18:13,290 --> 00:18:15,960
extra as large as possible so that we

352
00:18:15,960 --> 00:18:18,179
can control all the data just right

353
00:18:18,179 --> 00:18:22,080
behind it so if you do if you get it and

354
00:18:22,080 --> 00:18:25,340
you will make a success so in summation

355
00:18:25,340 --> 00:18:28,890
where to write we need to write the CB

356
00:18:28,890 --> 00:18:31,980
window extra so what to write actually

357
00:18:31,980 --> 00:18:34,950
we just change one bit of the SEBI

358
00:18:34,950 --> 00:18:37,080
window extra and make it make it as a

359
00:18:37,080 --> 00:18:40,200
very large size so what can we do right

360
00:18:40,200 --> 00:18:43,740
now after we do that stuff we can read

361
00:18:43,740 --> 00:18:45,960
from anywhere we can write any value to

362
00:18:45,960 --> 00:18:49,110
anywhere and we can steal the chocolate

363
00:18:49,110 --> 00:18:52,080
of the system process to our process

364
00:18:52,080 --> 00:18:54,900
that is a whole procedure of our

365
00:18:54,900 --> 00:18:57,960
exploitation from zero to one okay so

366
00:18:57,960 --> 00:19:01,290
now and my colleague in will introduce

367
00:19:01,290 --> 00:19:03,780
another technique which refers to one to

368
00:19:03,780 --> 00:19:08,000
zero and how do experiments color

369
00:19:08,000 --> 00:19:11,820
benefit from the Oratory won't the

370
00:19:11,820 --> 00:19:14,400
previous presentation give us the answer

371
00:19:14,400 --> 00:19:17,250
now we have a new question if we come up

372
00:19:17,250 --> 00:19:21,210
our beach form 1 to 0 how can we do the

373
00:19:21,210 --> 00:19:25,440
same job let's have a brief view of the

374
00:19:25,440 --> 00:19:28,500
function and TDD arkad part unicode

375
00:19:28,500 --> 00:19:31,260
enrages this function calls from at once

376
00:19:31,260 --> 00:19:34,770
and the return at first its course gie

377
00:19:34,770 --> 00:19:38,520
get Forge unicode arranges the first

378
00:19:38,520 --> 00:19:41,220
korean HTC is the hand of our device

379
00:19:41,220 --> 00:19:44,429
context our font has been selected into

380
00:19:44,429 --> 00:19:47,340
the device context before releases the

381
00:19:47,340 --> 00:19:47,730
second

382
00:19:47,730 --> 00:19:51,750
RMT banana we will get the range size of

383
00:19:51,750 --> 00:19:54,750
the photo only then decide is Scylla to

384
00:19:54,750 --> 00:19:58,140
indicate free tobacco and we will get

385
00:19:58,140 --> 00:20:01,410
our temporal memory buffer we call GI

386
00:20:01,410 --> 00:20:03,210
you get quarter equivalent radius of the

387
00:20:03,210 --> 00:20:05,610
end since the Purim to use a memory

388
00:20:05,610 --> 00:20:08,790
buffer so that is the rich data would be

389
00:20:08,790 --> 00:20:11,640
rich into it we deliver the data from

390
00:20:11,640 --> 00:20:13,560
one color to user space and the

391
00:20:13,560 --> 00:20:17,070
frigerator bottle and one two three four

392
00:20:17,070 --> 00:20:22,130
five of steps is seems to be very simple

393
00:20:22,130 --> 00:20:25,320
however it is no security in the same

394
00:20:25,320 --> 00:20:28,110
force sometimes UMI's look this may be a

395
00:20:28,110 --> 00:20:31,020
winner of energy let's consider a

396
00:20:31,020 --> 00:20:34,170
situation where her chip has of what one

397
00:20:34,170 --> 00:20:37,350
got small ranges suppose is that is one

398
00:20:37,350 --> 00:20:40,590
the other got not religious suppose is

399
00:20:40,590 --> 00:20:44,100
said is 10-under we have to straight so

400
00:20:44,100 --> 00:20:46,170
the a and s really be they are both

401
00:20:46,170 --> 00:20:49,440
doing infinite loop so the a cross then

402
00:20:49,440 --> 00:20:52,130
P GDR get partially decoded ranges

403
00:20:52,130 --> 00:20:55,350
excuses the thumb steps so the B do the

404
00:20:55,350 --> 00:20:59,070
same do days to they can job is we are

405
00:20:59,070 --> 00:21:01,650
layers more and a large point we must

406
00:21:01,650 --> 00:21:03,840
have a person agrees so the B is

407
00:21:03,840 --> 00:21:05,340
negative small radius

408
00:21:05,340 --> 00:21:08,490
points on into DC so it equals GRE get

409
00:21:08,490 --> 00:21:10,590
point of a decoder ranges for function

410
00:21:10,590 --> 00:21:13,980
and get the small side one-third is

411
00:21:13,980 --> 00:21:16,770
adequate on memory power which is only

412
00:21:16,770 --> 00:21:19,950
one part then serve is negative energy

413
00:21:19,950 --> 00:21:22,860
religious function G DC so there we are

414
00:21:22,860 --> 00:21:25,950
should a called gie catalytic arranges

415
00:21:25,950 --> 00:21:28,790
again with the mom bytebuffer

416
00:21:28,790 --> 00:21:31,950
lawsuit a we office the Nigerian watch

417
00:21:31,950 --> 00:21:35,580
so turn by veggies data is going to be

418
00:21:35,580 --> 00:21:37,710
written through one page plan for what

419
00:21:37,710 --> 00:21:40,320
will happen we will catch all overflow

420
00:21:40,320 --> 00:21:44,520
so this is the civil year 2016 is 3 3 5

421
00:21:44,520 --> 00:21:49,450
5 they hope for this we already happen

422
00:21:49,450 --> 00:21:53,049
with one second we are tied John my

423
00:21:53,049 --> 00:21:57,639
computer my procedure Nagar I said

424
00:21:57,639 --> 00:22:02,229
before question and not they need a

425
00:22:02,229 --> 00:22:05,320
system right fourth so and not to sit

426
00:22:05,320 --> 00:22:07,570
and let them do you reckon condition

427
00:22:07,570 --> 00:22:11,440
after all the headers I could control

428
00:22:11,440 --> 00:22:14,889
the ar-15 register then with the help of

429
00:22:14,889 --> 00:22:18,099
this awesome code and ar-15 register I

430
00:22:18,099 --> 00:22:21,219
cannot buy one bit of angular chain it

431
00:22:21,219 --> 00:22:24,239
from one to zero just make field

432
00:22:24,239 --> 00:22:29,859
position to now we have the floor and

433
00:22:29,859 --> 00:22:33,609
the ar-15 but how could we avoid what

434
00:22:33,609 --> 00:22:37,049
about to be extra as we mission before

435
00:22:37,049 --> 00:22:40,899
we could turn four to zero or his

436
00:22:40,899 --> 00:22:43,899
fourteen to his ten but it seems to be

437
00:22:43,899 --> 00:22:46,479
useless we re still cannot modify the

438
00:22:46,479 --> 00:22:48,309
next tag of destruction

439
00:22:48,309 --> 00:22:50,859
what about a flight there is a lot of

440
00:22:50,859 --> 00:22:54,940
flags in title in the structure we

441
00:22:54,940 --> 00:22:57,039
control some of the flag with beat from

442
00:22:57,039 --> 00:23:00,039
one to zero but I didn't find any

443
00:23:00,039 --> 00:23:03,639
perfect when you appreciate is for it

444
00:23:03,639 --> 00:23:06,579
let's record to show you pour in handle

445
00:23:06,579 --> 00:23:10,329
infrastructure the opposite his 10 is be

446
00:23:10,329 --> 00:23:13,659
type it show us the type of objects

447
00:23:13,659 --> 00:23:17,320
pointed by Pete if you think the object

448
00:23:17,320 --> 00:23:22,029
is a clip data if you see the producer

449
00:23:22,029 --> 00:23:26,229
is a monster if we clear with the four

450
00:23:26,229 --> 00:23:29,769
from the six and twenty two two three

451
00:23:29,769 --> 00:23:32,440
four the clip data objects to the menu

452
00:23:32,440 --> 00:23:38,109
object so we have our type confusion

453
00:23:38,109 --> 00:23:40,570
whether of energy I can control the

454
00:23:40,570 --> 00:23:42,700
printers in the menu object and the

455
00:23:42,700 --> 00:23:44,469
modifier other memory

456
00:23:44,469 --> 00:23:47,529
it sounds good and actually our words

457
00:23:47,529 --> 00:23:51,219
are who for the who exploit based on the

458
00:23:51,219 --> 00:23:54,429
ticker technique before however this is

459
00:23:54,429 --> 00:23:56,950
not a general solution what if we need

460
00:23:56,950 --> 00:24:00,009
to modify the position zero oppositional

461
00:24:00,009 --> 00:24:03,040
three so I started to find out why

462
00:24:03,040 --> 00:24:07,810
there is a more general report the

463
00:24:07,810 --> 00:24:12,510
answer is the rabbit Court in each race

464
00:24:12,510 --> 00:24:19,150
32 km yes they were like tag event tag

465
00:24:19,150 --> 00:24:21,130
Emmanuel tiger monitor the results in

466
00:24:21,130 --> 00:24:24,190
occur objects memorize offices eight it

467
00:24:24,190 --> 00:24:26,860
means the river count of the object if

468
00:24:26,860 --> 00:24:30,670
some other objects report and there is a

469
00:24:30,670 --> 00:24:33,340
reference counter eight one in the color

470
00:24:33,340 --> 00:24:35,770
there are two functions which can be

471
00:24:35,770 --> 00:24:39,220
used to modify the naka budget what is

472
00:24:39,220 --> 00:24:42,790
it an SMS knock it's a it is used for

473
00:24:42,790 --> 00:24:45,460
increasing the reference card the other

474
00:24:45,460 --> 00:24:47,530
function is a general statement and not

475
00:24:47,530 --> 00:24:50,230
it is used for decrease in the reference

476
00:24:50,230 --> 00:24:53,050
code if we could destroy window or

477
00:24:53,050 --> 00:24:57,130
destroy menu the function is an mark

478
00:24:57,130 --> 00:25:00,640
objects destroy will be involved it will

479
00:25:00,640 --> 00:25:02,590
check whether the roof counter is there

480
00:25:02,590 --> 00:25:05,230
or not if it is not the object we are

481
00:25:05,230 --> 00:25:07,780
not be destroyed if I zero the object

482
00:25:07,780 --> 00:25:12,160
will be freed let's have a look at

483
00:25:12,160 --> 00:25:15,040
another physical object in Windows menu

484
00:25:15,040 --> 00:25:18,100
we can cope with minor API to create our

485
00:25:18,100 --> 00:25:21,130
menu at the same time the color courage

486
00:25:21,130 --> 00:25:25,660
or title menu structure we can call a

487
00:25:25,660 --> 00:25:28,330
pendant menu appear to open down menu

488
00:25:28,330 --> 00:25:31,810
onto another one right here request to -

489
00:25:31,810 --> 00:25:35,290
menu a and the melody and the call open

490
00:25:35,290 --> 00:25:37,300
the menu of all photons the data

491
00:25:37,300 --> 00:25:39,580
structure in the color is showing us

492
00:25:39,580 --> 00:25:43,630
here at menu 8rg items furniture array

493
00:25:43,630 --> 00:25:47,080
and the three items educates the account

494
00:25:47,080 --> 00:25:50,230
of the members in the array in our case

495
00:25:50,230 --> 00:25:54,730
there are four items and the P sub menu

496
00:25:54,730 --> 00:25:57,580
all welcome to might be so the reference

497
00:25:57,580 --> 00:26:01,540
code of MIDI is 4 which is right here in

498
00:26:01,540 --> 00:26:04,060
the scenic object since there is no

499
00:26:04,060 --> 00:26:07,240
other manual pending chairman B we could

500
00:26:07,240 --> 00:26:09,420
see it is a signal at

501
00:26:09,420 --> 00:26:14,390
is thorough and agitance points to none

502
00:26:14,390 --> 00:26:17,550
if we call the to a manual to destroy

503
00:26:17,550 --> 00:26:20,490
maybe we will be failed because the

504
00:26:20,490 --> 00:26:23,040
scenic object of many P is for the

505
00:26:23,040 --> 00:26:26,430
system reveals us to do so with the help

506
00:26:26,430 --> 00:26:30,600
of a floor and our 15 register we can

507
00:26:30,600 --> 00:26:33,510
translate knowledge of the melody to be

508
00:26:33,510 --> 00:26:34,620
zero

509
00:26:34,620 --> 00:26:37,110
what can we do you know so we can't

510
00:26:37,110 --> 00:26:39,960
destroy many freedom memory of many be

511
00:26:39,960 --> 00:26:43,530
to be notice that the piece of manuals

512
00:26:43,530 --> 00:26:45,690
they are pointing human be so afraid

513
00:26:45,690 --> 00:26:52,170
object after destroy might be we have to

514
00:26:52,170 --> 00:26:55,290
call until the deficit text immediately

515
00:26:55,290 --> 00:26:58,920
to set our name for window if the window

516
00:26:58,920 --> 00:27:00,990
a slowly the our memory would be

517
00:27:00,990 --> 00:27:04,350
educated from desktop heap for storing

518
00:27:04,350 --> 00:27:06,660
the name string what happened even the

519
00:27:06,660 --> 00:27:09,030
name inside the same as might be the

520
00:27:09,030 --> 00:27:11,400
system we are educated in might be

521
00:27:11,400 --> 00:27:15,120
memory files which we just destroyed I

522
00:27:15,120 --> 00:27:17,970
can see the lemon stream to be any data

523
00:27:17,970 --> 00:27:20,520
so I can still the many base content

524
00:27:20,520 --> 00:27:22,980
that you be elevated against it is a

525
00:27:22,980 --> 00:27:26,520
point of many P to Engler many beetles

526
00:27:26,520 --> 00:27:29,730
to be afraid memory so in turns to be a

527
00:27:29,730 --> 00:27:31,380
fakir menu

528
00:27:31,380 --> 00:27:34,710
so right now HP submenu appoints to your

529
00:27:34,710 --> 00:27:40,260
fake memories what we do now is to make

530
00:27:40,260 --> 00:27:43,680
a simple fake menu which is the three

531
00:27:43,680 --> 00:27:47,940
items to one and nature as items points

532
00:27:47,940 --> 00:27:51,060
to your memory we control in that memory

533
00:27:51,060 --> 00:27:55,200
we fix our item structure and so there

534
00:27:55,200 --> 00:27:58,380
is P sub menu member to your document

535
00:27:58,380 --> 00:28:02,700
with opposite hits 18 you know my

536
00:28:02,700 --> 00:28:05,670
situation let's be several menu appoints

537
00:28:05,670 --> 00:28:08,400
to our tag menu structure now we've put

538
00:28:08,400 --> 00:28:10,470
each point you're tagging the structure

539
00:28:10,470 --> 00:28:13,860
in the middle we regarded as our tag

540
00:28:13,860 --> 00:28:16,620
menu structure which we rip your bottom

541
00:28:16,620 --> 00:28:19,470
menu what we care is the CV when the

542
00:28:19,470 --> 00:28:21,810
extra which is also deep

543
00:28:21,810 --> 00:28:28,080
no manual data in the water menu now

544
00:28:28,080 --> 00:28:31,170
let's presume no together we can state

545
00:28:31,170 --> 00:28:33,930
information of our manual bacon insert

546
00:28:33,930 --> 00:28:37,260
menu import EPA there are two marks

547
00:28:37,260 --> 00:28:40,800
which we are interested in when we

548
00:28:40,800 --> 00:28:42,690
specify the malleus mask

549
00:28:42,690 --> 00:28:45,510
in my menu data we will see the

550
00:28:45,510 --> 00:28:49,020
development data of the title menu we

551
00:28:49,020 --> 00:28:52,110
will specify the mask mm applied to sub

552
00:28:52,110 --> 00:28:54,990
menus we will associate the data with

553
00:28:54,990 --> 00:28:57,540
many data of the submenu one after

554
00:28:57,540 --> 00:28:58,460
another

555
00:28:58,460 --> 00:29:01,860
let's look at the picture we rebuild our

556
00:29:01,860 --> 00:29:06,420
chair before manually sub Amir some men

557
00:29:06,420 --> 00:29:09,450
used to be many B now it becomes a

558
00:29:09,450 --> 00:29:12,000
freaking manual which is control valve

559
00:29:12,000 --> 00:29:14,850
the effect of menus submenu is the water

560
00:29:14,850 --> 00:29:17,490
manual which point to your takamina

561
00:29:17,490 --> 00:29:18,950
structure in the middle

562
00:29:18,950 --> 00:29:22,980
Maurice versus artistry mask we will

563
00:29:22,980 --> 00:29:25,770
finally set the virtual menus DW

564
00:29:25,770 --> 00:29:28,800
metadata that means we are finally set

565
00:29:28,800 --> 00:29:32,790
the CP window extra window one we could

566
00:29:32,790 --> 00:29:35,610
resonate the Previn digital system as we

567
00:29:35,610 --> 00:29:38,550
said before to be notice that the three

568
00:29:38,550 --> 00:29:42,060
atoms of the water manual is zero so the

569
00:29:42,060 --> 00:29:44,580
operation of the city sub menus data

570
00:29:44,580 --> 00:29:45,900
will be stopped

571
00:29:45,900 --> 00:29:51,450
the watching menu the action and ggd

572
00:29:51,450 --> 00:29:53,400
acted for generally couldn't register is

573
00:29:53,400 --> 00:29:59,690
ad data you - mm SP - it has 15 years

574
00:29:59,690 --> 00:30:02,550
privacy's to encode and also nobody

575
00:30:02,550 --> 00:30:05,430
notices and the microsoft dinner changed

576
00:30:05,430 --> 00:30:09,270
the code of the function for - mm oh

577
00:30:09,270 --> 00:30:13,940
dear - one from will of 2002 will stun

578
00:30:13,940 --> 00:30:18,060
from symmetry B's 216 for pete's sake

579
00:30:18,060 --> 00:30:20,700
for Caesar remains the same what the

580
00:30:20,700 --> 00:30:22,500
deal is with getting the instead post

581
00:30:22,500 --> 00:30:25,530
and as a educating memory so again is a

582
00:30:25,530 --> 00:30:28,740
data or the same so this vulnerability

583
00:30:28,740 --> 00:30:32,610
exists in all the windows you can see in

584
00:30:32,610 --> 00:30:35,280
the export and mission before I

585
00:30:35,280 --> 00:30:37,980
use the window and the menu those are

586
00:30:37,980 --> 00:30:41,610
the basic objects in windows and SEO for

587
00:30:41,610 --> 00:30:44,220
be administered in GPS travel I can

588
00:30:44,220 --> 00:30:46,590
match the attack and get decision

589
00:30:46,590 --> 00:30:50,130
privilege by any user the update shows

590
00:30:50,130 --> 00:30:53,430
show in the PowerPoint with the unit 10

591
00:30:53,430 --> 00:30:59,490
15 11 16 forbid if you want to your taxi

592
00:30:59,490 --> 00:31:01,410
other windows you know only needed to

593
00:31:01,410 --> 00:31:04,890
adjust the offset now needs the justice

594
00:31:04,890 --> 00:31:10,380
Rosa mode let's take our summary how to

595
00:31:10,380 --> 00:31:13,200
import window scroll up a tiny bit from

596
00:31:13,200 --> 00:31:16,380
1 to 0 the answer is the writing's arrow

597
00:31:16,380 --> 00:31:19,470
to toggle menu screen lock object so we

598
00:31:19,470 --> 00:31:21,150
create another user out of green

599
00:31:21,150 --> 00:31:23,370
whatever finish because Tecna mean you

600
00:31:23,370 --> 00:31:25,740
and the resist is living with the extra

601
00:31:25,740 --> 00:31:28,710
port a comment I use the manual objects

602
00:31:28,710 --> 00:31:32,250
for the job you could appear another one

603
00:31:32,250 --> 00:31:35,280
if the object has pointers and you can

604
00:31:35,280 --> 00:31:41,100
rotate her to the 40 dosages all set

605
00:31:41,100 --> 00:31:42,690
always thank you for the coming any

606
00:31:42,690 --> 00:31:45,290
questions

607
00:31:49,990 --> 00:31:52,859
[Applause]

