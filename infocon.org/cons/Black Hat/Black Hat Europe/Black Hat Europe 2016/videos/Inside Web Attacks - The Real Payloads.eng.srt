1
00:00:00,030 --> 00:00:02,399
okay good afternoon everyone my name is

2
00:00:02,399 --> 00:00:04,170
Chris branch I'm a systems engineer

3
00:00:04,170 --> 00:00:05,879
working for CloudFlare which is an

4
00:00:05,879 --> 00:00:07,770
internet security and performance

5
00:00:07,770 --> 00:00:11,190
company I'm substituting for John Graham

6
00:00:11,190 --> 00:00:13,170
coming who couldn't be here today here's

7
00:00:13,170 --> 00:00:16,650
a CTO of CloudFlare and my diet bot I

8
00:00:16,650 --> 00:00:19,289
normally focus on the implementation so

9
00:00:19,289 --> 00:00:21,330
as far as I see web attacks there are

10
00:00:21,330 --> 00:00:22,529
ways to prevent the botnet getting

11
00:00:22,529 --> 00:00:24,359
bigger but we felt it would be

12
00:00:24,359 --> 00:00:26,340
interesting to show you some of the

13
00:00:26,340 --> 00:00:28,859
things that people actually do given an

14
00:00:28,859 --> 00:00:31,590
arbitrary code execution vulnerability

15
00:00:31,590 --> 00:00:33,210
what do people actually do with that

16
00:00:33,210 --> 00:00:34,829
power is it just shell codes or is it

17
00:00:34,829 --> 00:00:37,160
something more

18
00:00:37,940 --> 00:00:40,350
so cloud flow is in the unique position

19
00:00:40,350 --> 00:00:42,450
of being alpha see all these attacks as

20
00:00:42,450 --> 00:00:45,090
it stops them flare flow is one is

21
00:00:45,090 --> 00:00:47,340
largest DNS server and caching reverse

22
00:00:47,340 --> 00:00:49,860
proxy deployments worldwide an important

23
00:00:49,860 --> 00:00:53,010
part of our security is the West the Web

24
00:00:53,010 --> 00:00:55,500
Application Firewall it blocks attacks

25
00:00:55,500 --> 00:00:57,379
that match a particular type atom and

26
00:00:57,379 --> 00:00:59,430
prevent them from reaching the origin

27
00:00:59,430 --> 00:01:01,760
server and prevent it from compromised

28
00:01:01,760 --> 00:01:04,619
we see a lots of attacks from attack

29
00:01:04,619 --> 00:01:06,570
assem attacking to have some frequency

30
00:01:06,570 --> 00:01:09,540
blocker we also see a lot of people

31
00:01:09,540 --> 00:01:11,729
trying old attacks as well as the newest

32
00:01:11,729 --> 00:01:15,450
ones that we see CBS 4 so today we're

33
00:01:15,450 --> 00:01:16,950
going to talk about two particularly

34
00:01:16,950 --> 00:01:18,750
high profile attacks one from two years

35
00:01:18,750 --> 00:01:21,330
ago which is shell shop and one from

36
00:01:21,330 --> 00:01:22,890
nifty earlier this year which is image

37
00:01:22,890 --> 00:01:23,460
tragic

38
00:01:23,460 --> 00:01:25,560
they're both arbitrary code execution

39
00:01:25,560 --> 00:01:27,689
vulnerabilities so it's come from

40
00:01:27,689 --> 00:01:29,280
trusting user input when they shouldn't

41
00:01:29,280 --> 00:01:31,590
do but there isn't a high profile is

42
00:01:31,590 --> 00:01:33,000
because they're extremely easy to

43
00:01:33,000 --> 00:01:35,460
exploit and a lot software is vulnerable

44
00:01:35,460 --> 00:01:38,790
in the shell shock its own lines because

45
00:01:38,790 --> 00:01:42,409
it affects the bash bourne-again shell

46
00:01:42,409 --> 00:01:45,689
it's actually a very old bug but the

47
00:01:45,689 --> 00:01:47,670
implications were only probably diseased

48
00:01:47,670 --> 00:01:49,220
about two years ago

49
00:01:49,220 --> 00:01:52,020
it's caused by a fairly obscure feature

50
00:01:52,020 --> 00:01:54,030
in bash which lets you export functions

51
00:01:54,030 --> 00:01:56,009
as environment variables they can be

52
00:01:56,009 --> 00:01:59,880
executed by a child process this command

53
00:01:59,880 --> 00:02:01,770
line here will show you if you're

54
00:02:01,770 --> 00:02:04,079
vulnerable wires to shell shock and if

55
00:02:04,079 --> 00:02:06,540
you're vulnerable it will execute the

56
00:02:06,540 --> 00:02:08,098
echo vulnerable and put in volleyball

57
00:02:08,098 --> 00:02:10,020
before execute the actual commands you

58
00:02:10,020 --> 00:02:13,009
intend to execute

59
00:02:13,140 --> 00:02:15,820
normally you export an exsisting

60
00:02:15,820 --> 00:02:17,710
function definition in bash fires and

61
00:02:17,710 --> 00:02:19,780
the export commands you say export - f

62
00:02:19,780 --> 00:02:20,920
and then the name of an existing

63
00:02:20,920 --> 00:02:23,620
function but environment variable was

64
00:02:23,620 --> 00:02:26,470
ultimately just strings so nothing stops

65
00:02:26,470 --> 00:02:27,940
you from crossing a function definition

66
00:02:27,940 --> 00:02:30,960
in the exact same way that flash does

67
00:02:30,960 --> 00:02:33,790
when bash the sex the photo shoot an

68
00:02:33,790 --> 00:02:35,140
environment variable that looks like a

69
00:02:35,140 --> 00:02:37,360
function definition such as one at the

70
00:02:37,360 --> 00:02:39,910
top it will execute the environment

71
00:02:39,910 --> 00:02:43,060
variable as a command line and when bash

72
00:02:43,060 --> 00:02:44,710
does it that's fine because the only

73
00:02:44,710 --> 00:02:46,030
thing that in that environment variable

74
00:02:46,030 --> 00:02:47,970
is a function definition nothing

75
00:02:47,970 --> 00:02:51,760
afterwards so no side-effects but as the

76
00:02:51,760 --> 00:02:53,620
human use mash we can do more than that

77
00:02:53,620 --> 00:02:56,920
we can append arbitrary commands to it

78
00:02:56,920 --> 00:03:00,190
as in the second case and then when you

79
00:03:00,190 --> 00:03:02,410
execute bash bash you'll look for

80
00:03:02,410 --> 00:03:04,150
environment variables that look like

81
00:03:04,150 --> 00:03:06,100
function definitions and execute this

82
00:03:06,100 --> 00:03:11,020
command line and then we're not good and

83
00:03:11,020 --> 00:03:13,390
caused by trusting user input when it

84
00:03:13,390 --> 00:03:16,480
probably shouldn't have done now how

85
00:03:16,480 --> 00:03:18,010
does it affect the web the examples

86
00:03:18,010 --> 00:03:20,890
before you already has show access you

87
00:03:20,890 --> 00:03:22,450
could execute in mind yourself if you

88
00:03:22,450 --> 00:03:25,660
wanted but imagine if it was if the

89
00:03:25,660 --> 00:03:27,100
environment was passed and more

90
00:03:27,100 --> 00:03:29,410
privileged process like you each ones do

91
00:03:29,410 --> 00:03:32,709
do or if you got to remote server to

92
00:03:32,709 --> 00:03:35,290
execute the function to an environment

93
00:03:35,290 --> 00:03:38,080
variable unfortunately for us this is

94
00:03:38,080 --> 00:03:40,450
exactly what the CGI specification does

95
00:03:40,450 --> 00:03:43,420
it passes HTTP request headers as

96
00:03:43,420 --> 00:03:46,180
environment variables things like user

97
00:03:46,180 --> 00:03:49,959
agents refer content type so as soon as

98
00:03:49,959 --> 00:03:52,209
you run a shell from the CGI scripts

99
00:03:52,209 --> 00:03:54,280
that's in heavens the parent environment

100
00:03:54,280 --> 00:03:57,520
you are vulnerable to shell shock things

101
00:03:57,520 --> 00:03:59,830
spawn abilities include but are not

102
00:03:59,830 --> 00:04:01,959
limited to remotely ejecting the DVD on

103
00:04:01,959 --> 00:04:04,420
their web server this is a natural

104
00:04:04,420 --> 00:04:07,180
request that CloudFlare some blocks but

105
00:04:07,180 --> 00:04:10,060
you can imagine much more evil exploit

106
00:04:10,060 --> 00:04:15,580
from happen so when the CD is released

107
00:04:15,580 --> 00:04:17,140
we rolled out to west wall for our

108
00:04:17,140 --> 00:04:20,709
paying customers so they were Emilia

109
00:04:20,709 --> 00:04:22,630
text from Michelle shop if even if they

110
00:04:22,630 --> 00:04:23,520
hadn't catch

111
00:04:23,520 --> 00:04:26,490
and once we established it the rules

112
00:04:26,490 --> 00:04:27,900
good sweet fun is it to our free

113
00:04:27,900 --> 00:04:30,289
customers to better protect the internet

114
00:04:30,289 --> 00:04:32,669
at the same time you also measure the

115
00:04:32,669 --> 00:04:35,610
amount of attack attempts we saw trying

116
00:04:35,610 --> 00:04:37,669
to exploit the shell shop from ability

117
00:04:37,669 --> 00:04:40,380
as soon as we turned on we saw tens of

118
00:04:40,380 --> 00:04:42,150
fifteen facts per second with occasional

119
00:04:42,150 --> 00:04:44,130
bursts of activity as a specific website

120
00:04:44,130 --> 00:04:46,889
was targeted even survey 30 years later

121
00:04:46,889 --> 00:04:51,020
is typically around five attacks a day

122
00:04:51,020 --> 00:04:54,090
so the subject what the reactions what

123
00:04:54,090 --> 00:04:55,680
do we actually see what did people do

124
00:04:55,680 --> 00:04:59,099
with our three code execution well apart

125
00:04:59,099 --> 00:05:00,810
from injecting CD drive and other

126
00:05:00,810 --> 00:05:03,720
physical strengths lots of things like

127
00:05:03,720 --> 00:05:06,990
data exfiltration so guessing accesses

128
00:05:06,990 --> 00:05:09,360
nobody or subs WIB laser is one thing

129
00:05:09,360 --> 00:05:11,099
but you want to try and find a root user

130
00:05:11,099 --> 00:05:14,490
and exploit system that way the hope

131
00:05:14,490 --> 00:05:16,169
here in the first command is that the

132
00:05:16,169 --> 00:05:19,169
standardout will contain the password

133
00:05:19,169 --> 00:05:22,440
file somewhere in the HTTP response not

134
00:05:22,440 --> 00:05:23,639
everyone was confident about like

135
00:05:23,639 --> 00:05:25,590
working so they opted to email

136
00:05:25,590 --> 00:05:30,419
themselves data instead many attacks

137
00:05:30,419 --> 00:05:31,949
that we see are simple reconnaissance

138
00:05:31,949 --> 00:05:34,050
and the attacker will make a victim

139
00:05:34,050 --> 00:05:35,610
server contact the server under their

140
00:05:35,610 --> 00:05:37,770
control with a stream identifying the

141
00:05:37,770 --> 00:05:38,360
web science

142
00:05:38,360 --> 00:05:41,520
so this first attack uses pink and

143
00:05:41,520 --> 00:05:44,820
encodes a payload in the ICMP packet the

144
00:05:44,820 --> 00:05:48,030
second uses a usually HTTP request in

145
00:05:48,030 --> 00:05:49,650
either case the attacker will look

146
00:05:49,650 --> 00:05:52,080
through the logs and correlate IP

147
00:05:52,080 --> 00:05:54,199
address making these requests with the

148
00:05:54,199 --> 00:05:58,889
websites that were attacked this is a

149
00:05:58,889 --> 00:06:00,569
particular problem for a service by

150
00:06:00,569 --> 00:06:03,300
CloudFlare um the way the reverse

151
00:06:03,300 --> 00:06:05,520
caching proxy works is we send the

152
00:06:05,520 --> 00:06:07,469
request to us which obscures the origin

153
00:06:07,469 --> 00:06:10,349
IP address if the origin IP address is

154
00:06:10,349 --> 00:06:12,509
revealed then our deal off session could

155
00:06:12,509 --> 00:06:14,159
be circumvented by attacking the origin

156
00:06:14,159 --> 00:06:16,710
directly so we can only hope these were

157
00:06:16,710 --> 00:06:18,780
more innocuous white hats attempt to

158
00:06:18,780 --> 00:06:22,889
identify site and depending on the setup

159
00:06:22,889 --> 00:06:25,259
of the web server this particular

160
00:06:25,259 --> 00:06:26,969
example where we sleep sophistical

161
00:06:26,969 --> 00:06:28,669
minutes could be a denial service

162
00:06:28,669 --> 00:06:30,990
imagine if you will you have an old

163
00:06:30,990 --> 00:06:33,270
Apache version with a fix workup or

164
00:06:33,270 --> 00:06:34,950
processes

165
00:06:34,950 --> 00:06:36,780
if you block the request by speaking for

166
00:06:36,780 --> 00:06:38,910
a minute then after a few requests you

167
00:06:38,910 --> 00:06:41,160
can completely exhaust the poor work

168
00:06:41,160 --> 00:06:42,930
processes and deny service to anyone

169
00:06:42,930 --> 00:06:47,550
else it could also be just out spam way

170
00:06:47,550 --> 00:06:49,290
of determining if the server responds or

171
00:06:49,290 --> 00:06:51,420
not by seeing if the request one is

172
00:06:51,420 --> 00:06:53,720
lower than normal

173
00:06:53,720 --> 00:06:56,160
look why limit yourself to one come on

174
00:06:56,160 --> 00:06:58,220
she'll go to what we all expecting and

175
00:06:58,220 --> 00:07:00,240
but there's more than one way to skin

176
00:07:00,240 --> 00:07:03,750
again most people was playfully assumed

177
00:07:03,750 --> 00:07:05,340
that pole is going to be installed on

178
00:07:05,340 --> 00:07:07,500
any web server probably right especially

179
00:07:07,500 --> 00:07:10,590
if there's a second CGI a more

180
00:07:10,590 --> 00:07:12,360
interesting attack we saw was someone

181
00:07:12,360 --> 00:07:14,700
trying to masquerade as the prime IV of

182
00:07:14,700 --> 00:07:18,510
data service the irony is versus admin

183
00:07:18,510 --> 00:07:20,790
scene is in their list of processes is

184
00:07:20,790 --> 00:07:22,380
they might not choose to close it

185
00:07:22,380 --> 00:07:23,580
because they want to make sure they're

186
00:07:23,580 --> 00:07:25,680
protected by antivirus menacing when

187
00:07:25,680 --> 00:07:29,420
actually just like and malware

188
00:07:30,290 --> 00:07:34,260
so the path passes that we commonly saw

189
00:07:34,260 --> 00:07:36,000
attacked or the route which makes sense

190
00:07:36,000 --> 00:07:38,670
and we also see some more specific

191
00:07:38,670 --> 00:07:41,220
patterns you actually see if you search

192
00:07:41,220 --> 00:07:44,040
for some of these as shellshock malware

193
00:07:44,040 --> 00:07:45,480
which is packaged in that to the attack

194
00:07:45,480 --> 00:07:48,570
sees past as well which is probably what

195
00:07:48,570 --> 00:07:52,770
the common types mail but these paths

196
00:07:52,770 --> 00:07:55,320
match pretty closely to the Barracuda

197
00:07:55,320 --> 00:07:57,240
firewall appliance and cpanel

198
00:07:57,240 --> 00:08:00,570
installations the danger that we have

199
00:08:00,570 --> 00:08:03,600
two years on from the initial

200
00:08:03,600 --> 00:08:05,310
vulnerability when hopefully everyone is

201
00:08:05,310 --> 00:08:07,560
patched is hardware prices might not be

202
00:08:07,560 --> 00:08:09,810
patched if you plug in the science that

203
00:08:09,810 --> 00:08:11,160
is made two years ago and you have an

204
00:08:11,160 --> 00:08:12,510
updates that yet then there's a little

205
00:08:12,510 --> 00:08:14,370
possibility that it gets compromised by

206
00:08:14,370 --> 00:08:16,800
shell shock and as assuming you even

207
00:08:16,800 --> 00:08:21,420
have a way to update it so let's move on

208
00:08:21,420 --> 00:08:22,710
to a more recent foldability

209
00:08:22,710 --> 00:08:27,120
english tragic the author's felt the you

210
00:08:27,120 --> 00:08:28,740
your bugs wouldn't be taken seriously

211
00:08:28,740 --> 00:08:30,470
and as it had a cool name and logo

212
00:08:30,470 --> 00:08:34,950
probably ryan and when it was revealed

213
00:08:34,950 --> 00:08:38,429
the similarities to shell shock were as

214
00:08:38,429 --> 00:08:40,140
widespread

215
00:08:40,140 --> 00:08:42,450
the reason is similar is the ubiquity of

216
00:08:42,450 --> 00:08:44,400
the compromised software many web

217
00:08:44,400 --> 00:08:46,230
applications use image magic for image

218
00:08:46,230 --> 00:08:48,390
processing it has bindings to pop

219
00:08:48,390 --> 00:08:51,690
the languages and frameworks and because

220
00:08:51,690 --> 00:08:53,820
it is another example of an arbitrary

221
00:08:53,820 --> 00:08:56,550
code execution it may not be as simple

222
00:08:56,550 --> 00:08:59,580
with sending a specially crafted HTTP

223
00:08:59,580 --> 00:09:02,370
header you have to find delete an HTML

224
00:09:02,370 --> 00:09:04,170
form and upload it and hope the

225
00:09:04,170 --> 00:09:06,020
application will insert it as an image

226
00:09:06,020 --> 00:09:09,060
but that's still not too difficult to

227
00:09:09,060 --> 00:09:13,520
achieve as long as you've got a payload

228
00:09:14,510 --> 00:09:18,450
so a common way that you might exploit a

229
00:09:18,450 --> 00:09:21,510
website is by looking at open source

230
00:09:21,510 --> 00:09:23,160
software that actually uses image magic

231
00:09:23,160 --> 00:09:25,770
and there's a large class of software's

232
00:09:25,770 --> 00:09:29,340
up fallens blogs CMS's and obviously

233
00:09:29,340 --> 00:09:33,660
photo uploading sites so the what makes

234
00:09:33,660 --> 00:09:35,220
is easy for the attacker is they can

235
00:09:35,220 --> 00:09:36,870
craft an exploit for a particular

236
00:09:36,870 --> 00:09:39,090
software package and once they've done

237
00:09:39,090 --> 00:09:41,130
that some hundreds and thousands

238
00:09:41,130 --> 00:09:45,300
websites are vulnerable so how does it

239
00:09:45,300 --> 00:09:46,140
actually happen

240
00:09:46,140 --> 00:09:48,180
the problem is introduced by image

241
00:09:48,180 --> 00:09:51,000
magics magic if versus this file was

242
00:09:51,000 --> 00:09:53,820
using the external commands it defines

243
00:09:53,820 --> 00:09:55,730
the commands that are used for different

244
00:09:55,730 --> 00:09:58,440
codecs in an external file core

245
00:09:58,440 --> 00:10:02,960
delegates that XML to dreams fine

246
00:10:03,110 --> 00:10:05,490
unfortunately because these are actual

247
00:10:05,490 --> 00:10:06,840
command strings you have to be quite

248
00:10:06,840 --> 00:10:08,580
careful in much the same way that you

249
00:10:08,580 --> 00:10:10,080
have to be careful when constructing

250
00:10:10,080 --> 00:10:13,230
sequel queries in this particular HTTP

251
00:10:13,230 --> 00:10:15,930
codec we weren't careful the % parameter

252
00:10:15,930 --> 00:10:17,760
was not adequately quoted double quotes

253
00:10:17,760 --> 00:10:21,120
format escapes so this allows you to

254
00:10:21,120 --> 00:10:23,580
break out imagine you starts off with a

255
00:10:23,580 --> 00:10:27,510
legit looking URL and then append your

256
00:10:27,510 --> 00:10:32,160
own custom code here's an example of a

257
00:10:32,160 --> 00:10:34,530
malicious as you please starts off

258
00:10:34,530 --> 00:10:37,230
innocuously but here in verse we have

259
00:10:37,230 --> 00:10:39,990
the image type which references an

260
00:10:39,990 --> 00:10:42,900
external resource effort not quite at

261
00:10:42,900 --> 00:10:46,710
the ends we break out of the quoting and

262
00:10:46,710 --> 00:10:51,000
we list become a directory content if

263
00:10:51,000 --> 00:10:53,940
you copy that and save it to a file try

264
00:10:53,940 --> 00:10:55,980
to run it through image magic you'll see

265
00:10:55,980 --> 00:10:58,530
this it will list the current directory

266
00:10:58,530 --> 00:11:02,660
content as well as convert your file

267
00:11:02,930 --> 00:11:06,329
many of the problems were not SVG they

268
00:11:06,329 --> 00:11:08,759
were actually caused by MVG which are

269
00:11:08,759 --> 00:11:10,800
magic crates or graphics now this is a

270
00:11:10,800 --> 00:11:12,750
language designed by the image magic

271
00:11:12,750 --> 00:11:15,690
implementers used to generate images in

272
00:11:15,690 --> 00:11:17,220
a more convenient way on the command

273
00:11:17,220 --> 00:11:19,889
line or in the file unfortunately they

274
00:11:19,889 --> 00:11:21,779
have a lot of capabilities which have

275
00:11:21,779 --> 00:11:26,100
not suitable for user inputs so one more

276
00:11:26,100 --> 00:11:28,529
example is it can download arbitrary

277
00:11:28,529 --> 00:11:31,139
files off the internet not great can

278
00:11:31,139 --> 00:11:32,519
also call it server side request

279
00:11:32,519 --> 00:11:35,459
forgeries it also has a few custom

280
00:11:35,459 --> 00:11:38,310
schemes so here we have one for having a

281
00:11:38,310 --> 00:11:39,899
sentry file what do you do after

282
00:11:39,899 --> 00:11:44,910
assembly file you delete it not good you

283
00:11:44,910 --> 00:11:47,730
can also use it to read files so if you

284
00:11:47,730 --> 00:11:49,500
have a text file you want to output it

285
00:11:49,500 --> 00:11:51,060
as you take seems convenient

286
00:11:51,060 --> 00:11:53,100
unless that text file is a list of all

287
00:11:53,100 --> 00:11:57,779
your usernames we designed a way to

288
00:11:57,779 --> 00:12:01,110
block this in our way here is the rate

289
00:12:01,110 --> 00:12:03,410
expression and it's easier to digest

290
00:12:03,410 --> 00:12:07,829
state machine form essentially what we

291
00:12:07,829 --> 00:12:11,220
try to do is block both SVG and nvg so

292
00:12:11,220 --> 00:12:14,420
the first first two lines will block

293
00:12:14,420 --> 00:12:18,060
HTTP requests using the official mp3 and

294
00:12:18,060 --> 00:12:19,410
a second to revenge the data

295
00:12:19,410 --> 00:12:20,880
exfiltration and deletion

296
00:12:20,880 --> 00:12:27,750
vulnerabilities apply only here's the

297
00:12:27,750 --> 00:12:30,029
most popular payload you saw using MV g

298
00:12:30,029 --> 00:12:33,569
and not s teaching it is similar to the

299
00:12:33,569 --> 00:12:35,430
reconnaissance attacks used in the show

300
00:12:35,430 --> 00:12:39,630
shop vulnerability the image didn't

301
00:12:39,630 --> 00:12:42,750
exist so if you actually try to run this

302
00:12:42,750 --> 00:12:45,449
as a MV g I convert this mu G it would

303
00:12:45,449 --> 00:12:47,639
look like the file it was reference X X

304
00:12:47,639 --> 00:12:50,160
it would also make a callback to the

305
00:12:50,160 --> 00:12:54,930
attackers the main the second favorite

306
00:12:54,930 --> 00:12:58,050
was actually SVG because it's kept this

307
00:12:58,050 --> 00:12:59,670
possible view table

308
00:12:59,670 --> 00:13:01,769
codecs which you don't use for example

309
00:13:01,769 --> 00:13:03,389
in v3

310
00:13:03,389 --> 00:13:05,670
there's probably more access from using

311
00:13:05,670 --> 00:13:07,740
SVG which is less likely to be rejected

312
00:13:07,740 --> 00:13:09,779
by the application layer above the image

313
00:13:09,779 --> 00:13:12,439
logic magic

314
00:13:14,240 --> 00:13:15,860
here's another more interesting one

315
00:13:15,860 --> 00:13:17,660
which merely downloads files that

316
00:13:17,660 --> 00:13:20,300
doesn't do anything further with it we

317
00:13:20,300 --> 00:13:22,300
suspect this part of the larger attack

318
00:13:22,300 --> 00:13:25,399
or perhaps as a way to not draw

319
00:13:25,399 --> 00:13:28,520
attention to the attack sector that the

320
00:13:28,520 --> 00:13:33,740
effect was using and this one of course

321
00:13:33,740 --> 00:13:37,250
paralyzed the shell and just wanted to

322
00:13:37,250 --> 00:13:39,680
use in Python the source code was

323
00:13:39,680 --> 00:13:41,750
actually available and we're going to

324
00:13:41,750 --> 00:13:45,950
have a look at it right now so here we

325
00:13:45,950 --> 00:13:49,190
see we have a FN user always a fan of

326
00:13:49,190 --> 00:13:52,550
mine and if any notice this happening

327
00:13:52,550 --> 00:13:55,730
the size to inspect what this what

328
00:13:55,730 --> 00:13:57,709
this code is doing they see in a process

329
00:13:57,709 --> 00:13:59,810
list they wonder what happens they can

330
00:13:59,810 --> 00:14:01,700
feel relaxed because it was with

331
00:14:01,700 --> 00:14:03,410
somebody Google's security team I mean

332
00:14:03,410 --> 00:14:05,930
you all know they can't be evil so you

333
00:14:05,930 --> 00:14:07,930
can feel happy about that and

334
00:14:07,930 --> 00:14:09,800
surprisingly is quite well written it

335
00:14:09,800 --> 00:14:13,160
has a sniff you the arguments even

336
00:14:13,160 --> 00:14:14,690
though the only person using it should

337
00:14:14,690 --> 00:14:18,680
possibly know what it does but the code

338
00:14:18,680 --> 00:14:21,520
itself is pretty simple it's nothing

339
00:14:21,520 --> 00:14:24,680
particularly spectacular isn't even had

340
00:14:24,680 --> 00:14:27,589
lower handling five elided some of the

341
00:14:27,589 --> 00:14:29,930
environment sets up and particular where

342
00:14:29,930 --> 00:14:32,390
we create a pseudo seats for life

343
00:14:32,390 --> 00:14:37,100
plays pretty straightforward so why stop

344
00:14:37,100 --> 00:14:38,810
there why not have some Michelle go tell

345
00:14:38,810 --> 00:14:42,079
coach coach golf this one is pipes or

346
00:14:42,079 --> 00:14:44,180
into the single line and we actually

347
00:14:44,180 --> 00:14:46,459
generate the file and then excuses

348
00:14:46,459 --> 00:14:50,690
prices by about this one where we

349
00:14:50,690 --> 00:14:53,570
actually we don't even bother trying to

350
00:14:53,570 --> 00:14:55,940
have an image we just create a new batch

351
00:14:55,940 --> 00:15:00,529
session and redirects it to the TCP this

352
00:15:00,529 --> 00:15:02,000
is a bit more robust because now we're

353
00:15:02,000 --> 00:15:05,320
not scientific child parent process and

354
00:15:05,320 --> 00:15:07,459
nothing will be complete without using

355
00:15:07,459 --> 00:15:09,850
the duct tape or the internet NZ and

356
00:15:09,850 --> 00:15:12,380
here we actually do have a good ascent

357
00:15:12,380 --> 00:15:14,149
to hide what you're doing using the

358
00:15:14,149 --> 00:15:15,860
Ridgid image and the command line is

359
00:15:15,860 --> 00:15:17,810
possibly the shortest but definitely my

360
00:15:17,810 --> 00:15:22,640
favorite attack method so in conclusion

361
00:15:22,640 --> 00:15:24,500
people do a lot of interesting things

362
00:15:24,500 --> 00:15:26,839
but the main takeaway is that if you

363
00:15:26,839 --> 00:15:28,030
don't patch you probably will get

364
00:15:28,030 --> 00:15:31,480
act when an exploit is easy to create a

365
00:15:31,480 --> 00:15:33,100
shell shock an image tragic art it's a

366
00:15:33,100 --> 00:15:34,540
matter of hours before your site gets

367
00:15:34,540 --> 00:15:36,970
canned lots of people were trying lots

368
00:15:36,970 --> 00:15:39,130
of different things if it was a

369
00:15:39,130 --> 00:15:40,600
difficult exploit people would just use

370
00:15:40,600 --> 00:15:42,160
the proof of concept or the first one

371
00:15:42,160 --> 00:15:44,260
that's release and not go any further so

372
00:15:44,260 --> 00:15:47,620
that's always a scary prospect if you

373
00:15:47,620 --> 00:15:49,300
like patch if you're like me the worst

374
00:15:49,300 --> 00:15:51,070
thing that will happen is your CD Drive

375
00:15:51,070 --> 00:15:52,690
will just pop out one day and you're not

376
00:15:52,690 --> 00:15:55,930
know why if you're not lucky or even

377
00:15:55,930 --> 00:15:57,820
worse you happen to be in the wrong time

378
00:15:57,820 --> 00:15:59,110
zone and be asleep when the

379
00:15:59,110 --> 00:16:01,450
vulnerability is released you might wake

380
00:16:01,450 --> 00:16:04,420
up to a nicely supplied so even if you

381
00:16:04,420 --> 00:16:05,950
think you properly femicides your inputs

382
00:16:05,950 --> 00:16:08,890
third-party dependencies might not the

383
00:16:08,890 --> 00:16:10,300
show shot vulnerability and imagemagick

384
00:16:10,300 --> 00:16:12,010
vulnerability were not caused by bad

385
00:16:12,010 --> 00:16:13,900
application code is caused by bad

386
00:16:13,900 --> 00:16:16,240
library code or just something so basic

387
00:16:16,240 --> 00:16:17,620
in a system that you don't think about

388
00:16:17,620 --> 00:16:21,760
it one way to solve it is to obviously

389
00:16:21,760 --> 00:16:23,650
patch your systems but if you don't

390
00:16:23,650 --> 00:16:26,370
cause you can't or if you have a old

391
00:16:26,370 --> 00:16:28,720
system or Hardware pipes the car be

392
00:16:28,720 --> 00:16:30,850
patched then just try to block it

393
00:16:30,850 --> 00:16:36,280
otherwise using the RAF or similar if

394
00:16:36,280 --> 00:16:39,209
anyone have any questions

395
00:16:40,500 --> 00:16:45,090
if do we have a microphone

396
00:17:03,649 --> 00:17:09,398
ah I guess not I either listening

