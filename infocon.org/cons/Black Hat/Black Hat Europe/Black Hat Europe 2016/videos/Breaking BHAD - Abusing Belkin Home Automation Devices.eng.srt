1
00:00:00,060 --> 00:00:02,399
welcome everybody this is Breaking Bad

2
00:00:02,399 --> 00:00:04,430
abusing Vulcan home automation devices

3
00:00:04,430 --> 00:00:06,480
before we begin I want to give a little

4
00:00:06,480 --> 00:00:08,700
intro to ourselves my name is Scott I'll

5
00:00:08,700 --> 00:00:10,500
be the software guy for the drained of

6
00:00:10,500 --> 00:00:12,990
remainder of the presentation I'm a

7
00:00:12,990 --> 00:00:14,160
security researcher I've been in the

8
00:00:14,160 --> 00:00:16,079
business about 15 years currently I'm a

9
00:00:16,079 --> 00:00:18,449
research director and Vincey labs most

10
00:00:18,449 --> 00:00:19,980
of what I focus on is new novel

11
00:00:19,980 --> 00:00:21,420
offensive and defensive cyber

12
00:00:21,420 --> 00:00:24,810
capabilities I'm Joe Tannen I'm the

13
00:00:24,810 --> 00:00:26,699
hardware guy I'm a lead research

14
00:00:26,699 --> 00:00:29,070
engineer I primarily work in mobile and

15
00:00:29,070 --> 00:00:30,810
embedded systems so customizing and

16
00:00:30,810 --> 00:00:32,159
securing Android and other embedded

17
00:00:32,159 --> 00:00:35,820
Linux platforms so a little background

18
00:00:35,820 --> 00:00:37,530
about us in our company um mmm

19
00:00:37,530 --> 00:00:38,940
in Vincey labs there's a lot of work

20
00:00:38,940 --> 00:00:40,350
with a bed of devices we both create

21
00:00:40,350 --> 00:00:42,270
them secure them as joe was talking

22
00:00:42,270 --> 00:00:43,800
about with mobile devices and we also

23
00:00:43,800 --> 00:00:46,710
break them by specialty so and we do

24
00:00:46,710 --> 00:00:48,090
this all for a lot of long-term R&D

25
00:00:48,090 --> 00:00:50,370
programs looking at next generation

26
00:00:50,370 --> 00:00:51,750
kinds of embedded devices so we thought

27
00:00:51,750 --> 00:00:53,399
you know obviously we take our skill set

28
00:00:53,399 --> 00:00:55,260
and apply it to this new IOT realm and

29
00:00:55,260 --> 00:00:58,500
see what we could find so we're gonna

30
00:00:58,500 --> 00:01:00,690
talk to about today in particular as the

31
00:01:00,690 --> 00:01:02,250
security of the Wemo platform and

32
00:01:02,250 --> 00:01:04,530
specifically awareness disclosed to

33
00:01:04,530 --> 00:01:06,540
zero-day vulnerabilities one of which

34
00:01:06,540 --> 00:01:08,189
allows us to remote route access to any

35
00:01:08,189 --> 00:01:10,979
Wemo device and the other one is

36
00:01:10,979 --> 00:01:12,570
effectively what we call cross-site

37
00:01:12,570 --> 00:01:14,159
scripting vulnerability it allows us to

38
00:01:14,159 --> 00:01:16,890
inject code into the android Wemo app

39
00:01:16,890 --> 00:01:19,259
and run it in the context of the app

40
00:01:19,259 --> 00:01:21,060
along the way we're also going to

41
00:01:21,060 --> 00:01:23,310
present two new techniques one of them

42
00:01:23,310 --> 00:01:24,540
is a hardware authentication bypass

43
00:01:24,540 --> 00:01:26,250
technique that Joe's going to talk about

44
00:01:26,250 --> 00:01:27,720
which we think is more generalizable

45
00:01:27,720 --> 00:01:30,030
than to just Wemo devices that's why

46
00:01:30,030 --> 00:01:31,860
we're presenting it to you and the other

47
00:01:31,860 --> 00:01:33,360
one is a Seco as a way to leverage

48
00:01:33,360 --> 00:01:34,860
sequel injection vulnerabilities into

49
00:01:34,860 --> 00:01:36,570
sequel like databases that we also think

50
00:01:36,570 --> 00:01:38,130
is more generalizable and other pen

51
00:01:38,130 --> 00:01:39,810
testers and vulnerability research might

52
00:01:39,810 --> 00:01:42,479
be able to use so to start off this talk

53
00:01:42,479 --> 00:01:45,630
about what we mo is we Mo's belkin's

54
00:01:45,630 --> 00:01:47,250
line of home automation devices that

55
00:01:47,250 --> 00:01:50,130
came out in 2012 but mid 2012 the idea

56
00:01:50,130 --> 00:01:52,170
was to be simple and easy to use hooks

57
00:01:52,170 --> 00:01:53,670
up to equipment you already have you'll

58
00:01:53,670 --> 00:01:55,049
need to buy special hub or any other

59
00:01:55,049 --> 00:01:57,420
special gear just the device they start

60
00:01:57,420 --> 00:01:58,890
off with we see in the top left corner

61
00:01:58,890 --> 00:02:00,560
there which is the Wemo switch

62
00:02:00,560 --> 00:02:02,250
effectively allows you to turn any

63
00:02:02,250 --> 00:02:03,570
device that plugs into it on and off

64
00:02:03,570 --> 00:02:05,759
with your phone they've since obviously

65
00:02:05,759 --> 00:02:07,920
expand their line to roughly 20

66
00:02:07,920 --> 00:02:09,660
different devices to clear everything

67
00:02:09,660 --> 00:02:12,080
from mr. coffee pot a crock pot

68
00:02:12,080 --> 00:02:13,860
humidifier room heater

69
00:02:13,860 --> 00:02:16,740
etc they all work roughly the same way

70
00:02:16,740 --> 00:02:19,200
as I said before you hook the device up

71
00:02:19,200 --> 00:02:21,930
to your home Wi-Fi and then with the

72
00:02:21,930 --> 00:02:24,030
smartphone app either locally on the

73
00:02:24,030 --> 00:02:26,040
same network beyond sama have you used

74
00:02:26,040 --> 00:02:27,570
that local Wi-Fi network to communicate

75
00:02:27,570 --> 00:02:29,700
with the device or if you're outside of

76
00:02:29,700 --> 00:02:33,000
that network uses the cloud to connect

77
00:02:33,000 --> 00:02:34,260
to that device of course the device

78
00:02:34,260 --> 00:02:35,820
connects to the cloud through your Wi-Fi

79
00:02:35,820 --> 00:02:39,720
pretty standard for any IOT setup and

80
00:02:39,720 --> 00:02:41,610
the reason we're interested in an Wemo

81
00:02:41,610 --> 00:02:43,320
devices are threefold one of them is

82
00:02:43,320 --> 00:02:45,270
because of this number from the end of

83
00:02:45,270 --> 00:02:47,430
2015 that says they get a 1.5 million

84
00:02:47,430 --> 00:02:49,320
devices deployed it's a pretty good

85
00:02:49,320 --> 00:02:51,450
number another reason is that people

86
00:02:51,450 --> 00:02:52,890
seem to like them I mean other than that

87
00:02:52,890 --> 00:02:54,630
number they've won a bunch of awards

88
00:02:54,630 --> 00:02:56,850
pretty usable pretty user friendly

89
00:02:56,850 --> 00:02:59,220
people seem to like them but the other

90
00:02:59,220 --> 00:03:00,989
reason is because you might remember

91
00:03:00,989 --> 00:03:04,160
seeing this headline from back in 2013

92
00:03:04,160 --> 00:03:08,610
or this one in 2014 both of which caused

93
00:03:08,610 --> 00:03:11,459
Belkin in 2015 to kind of put a stake in

94
00:03:11,459 --> 00:03:12,959
the sand and say okay we're gonna look

95
00:03:12,959 --> 00:03:14,280
at this secure these devices really

96
00:03:14,280 --> 00:03:15,570
gonna patch things up we're gonna get

97
00:03:15,570 --> 00:03:17,430
better at this now before we get into

98
00:03:17,430 --> 00:03:20,459
what we found with devices today wanna

99
00:03:20,459 --> 00:03:22,590
kind of talk about these these prior

100
00:03:22,590 --> 00:03:25,560
headlines so the first one from 2013 is

101
00:03:25,560 --> 00:03:26,940
by the it's independent researcher named

102
00:03:26,940 --> 00:03:29,430
attest and Johnny but effectively what

103
00:03:29,430 --> 00:03:31,380
he found out is that he looked at a

104
00:03:31,380 --> 00:03:33,660
bunch of devices but with the Belkin

105
00:03:33,660 --> 00:03:35,790
Wemo baby monitor he found that there's

106
00:03:35,790 --> 00:03:36,870
an authentication token that's being

107
00:03:36,870 --> 00:03:38,459
sent in the clear over the Internet

108
00:03:38,459 --> 00:03:40,650
anybody sniffing on a from the local

109
00:03:40,650 --> 00:03:41,970
network out through the internet could

110
00:03:41,970 --> 00:03:43,920
grab that authentication token and reuse

111
00:03:43,920 --> 00:03:46,440
it to log into your your baby monitor

112
00:03:46,440 --> 00:03:49,200
remotely not a good thing the second

113
00:03:49,200 --> 00:03:51,570
headline you saw was from 2014 and that

114
00:03:51,570 --> 00:03:53,250
was an advisory released by ioactive

115
00:03:53,250 --> 00:03:54,450
probably the thing you're most familiar

116
00:03:54,450 --> 00:03:55,950
with you've heard about security of Wemo

117
00:03:55,950 --> 00:03:57,480
devices and they found a whole bunch of

118
00:03:57,480 --> 00:03:59,400
stuff everything from hard-coded crypto

119
00:03:59,400 --> 00:04:00,930
keys you can use to sign your own

120
00:04:00,930 --> 00:04:03,000
firmware all the way down to just

121
00:04:03,000 --> 00:04:05,880
command injection type stuff now around

122
00:04:05,880 --> 00:04:07,620
the same time that last headline came

123
00:04:07,620 --> 00:04:10,019
out there was a blog article by this guy

124
00:04:10,019 --> 00:04:12,780
named Brian Hart and what he found was a

125
00:04:12,780 --> 00:04:14,700
very simple command injection

126
00:04:14,700 --> 00:04:16,649
vulnerability if you've ever done

127
00:04:16,649 --> 00:04:19,290
anything with IOT or Delta security of

128
00:04:19,290 --> 00:04:21,570
IOT this is sort of the low-hanging

129
00:04:21,570 --> 00:04:24,660
fruit of IOT right effectively in the

130
00:04:24,660 --> 00:04:27,710
the element in this XML field here

131
00:04:27,710 --> 00:04:29,389
being used as a parameter to a command

132
00:04:29,389 --> 00:04:31,280
that's being run with the system call

133
00:04:31,280 --> 00:04:32,990
right so it's just running a command and

134
00:04:32,990 --> 00:04:35,360
using the value of this an XML entity as

135
00:04:35,360 --> 00:04:37,580
one of the parameters of course if you

136
00:04:37,580 --> 00:04:39,319
just put back ticks around that as he's

137
00:04:39,319 --> 00:04:40,880
done here it'll actually run that

138
00:04:40,880 --> 00:04:42,889
command before the command it's supposed

139
00:04:42,889 --> 00:04:44,690
to be running and if actively all this

140
00:04:44,690 --> 00:04:47,509
does is turn on telnet and auto logs any

141
00:04:47,509 --> 00:04:49,099
connection into a root shell without

142
00:04:49,099 --> 00:04:51,410
authentication easy-peasy standard

143
00:04:51,410 --> 00:04:53,750
low-hanging fruit for IOT and that's

144
00:04:53,750 --> 00:04:57,860
still at the end of 2015 so much like

145
00:04:57,860 --> 00:04:59,660
the prior research we have the same

146
00:04:59,660 --> 00:05:01,880
attack scenario we presume that some

147
00:05:01,880 --> 00:05:03,949
malicious actor has gotten access to

148
00:05:03,949 --> 00:05:06,979
another machine on the same network as

149
00:05:06,979 --> 00:05:08,780
the Lemur device now this is your home

150
00:05:08,780 --> 00:05:10,430
PC isn't meant to be a home network of

151
00:05:10,430 --> 00:05:12,710
course we assume that's via fishing or

152
00:05:12,710 --> 00:05:14,150
drive-by download or something that

153
00:05:14,150 --> 00:05:15,770
compromised maybe your home PC and have

154
00:05:15,770 --> 00:05:16,910
gotten access to that and then they can

155
00:05:16,910 --> 00:05:18,680
communicate directly with with your Wemo

156
00:05:18,680 --> 00:05:20,870
device and the way you communicate with

157
00:05:20,870 --> 00:05:22,610
the Wemo devices over universal plug and

158
00:05:22,610 --> 00:05:25,610
play here's what happens you open up the

159
00:05:25,610 --> 00:05:28,159
app the absence of the broadcast UPnP

160
00:05:28,159 --> 00:05:29,599
message which is essentially just an

161
00:05:29,599 --> 00:05:32,750
HTTP message over UDP to a broadcast

162
00:05:32,750 --> 00:05:34,610
address it says hey where are all the

163
00:05:34,610 --> 00:05:38,300
Wemo devices Wemo devices respond with a

164
00:05:38,300 --> 00:05:40,729
unicast UDP message essentially another

165
00:05:40,729 --> 00:05:42,949
HTTP message and it says here's the

166
00:05:42,949 --> 00:05:44,919
location of my device description file

167
00:05:44,919 --> 00:05:47,360
now the device description file contains

168
00:05:47,360 --> 00:05:50,060
all the UPnP endpoints in it essentially

169
00:05:50,060 --> 00:05:52,099
URLs that you send messages to to

170
00:05:52,099 --> 00:05:54,590
communicate for example and then we want

171
00:05:54,590 --> 00:05:55,639
to switch case if you want to turn the

172
00:05:55,639 --> 00:05:57,229
switch on or off you click that on/off

173
00:05:57,229 --> 00:06:02,060
button you'll send a UPnP message an HT

174
00:06:02,060 --> 00:06:04,669
team s egde over TCP this time to the

175
00:06:04,669 --> 00:06:07,580
UPnP controls basic event one UPnP

176
00:06:07,580 --> 00:06:09,169
endpoint and then the message itself

177
00:06:09,169 --> 00:06:10,520
will actually be the set binary state

178
00:06:10,520 --> 00:06:13,099
command 1 or 0 on/off rights and the

179
00:06:13,099 --> 00:06:17,810
biter state pretty easy stuff ok so one

180
00:06:17,810 --> 00:06:19,070
of the other piece of functionality that

181
00:06:19,070 --> 00:06:20,659
we Moe has everybody seems to love is

182
00:06:20,659 --> 00:06:22,699
this idea of rules you can create rules

183
00:06:22,699 --> 00:06:25,580
to do simple things like if you have all

184
00:06:25,580 --> 00:06:27,289
your lights the lips plugged into these

185
00:06:27,289 --> 00:06:28,909
window switches and you go to bed at 10

186
00:06:28,909 --> 00:06:30,020
o'clock every night you don't forget to

187
00:06:30,020 --> 00:06:31,370
turn off the lights you can set a rule

188
00:06:31,370 --> 00:06:33,500
that turns off those lights every night

189
00:06:33,500 --> 00:06:36,110
at 10 p.m. if you have your crock pot on

190
00:06:36,110 --> 00:06:38,240
medium for 5 hours you want to set to

191
00:06:38,240 --> 00:06:39,760
low to keep your dinner warm

192
00:06:39,760 --> 00:06:41,530
not over overcook it while you're at

193
00:06:41,530 --> 00:06:43,240
work you can set a rule to do that too

194
00:06:43,240 --> 00:06:45,030
after let's say five hours go to low

195
00:06:45,030 --> 00:06:49,420
useful stuff what we found is that sorry

196
00:06:49,420 --> 00:06:52,060
the way these things work is you on the

197
00:06:52,060 --> 00:06:53,350
app you have this interface allows you

198
00:06:53,350 --> 00:06:54,430
to create these rules when you hit the

199
00:06:54,430 --> 00:06:56,560
Save button it adds that rule to a

200
00:06:56,560 --> 00:06:58,240
sequel like database if you don't know

201
00:06:58,240 --> 00:06:59,890
sequel is like a regular database just

202
00:06:59,890 --> 00:07:03,190
shrunk down into one file when you when

203
00:07:03,190 --> 00:07:04,600
you're done editing the rules for device

204
00:07:04,600 --> 00:07:06,400
it takes that one file sends it to the

205
00:07:06,400 --> 00:07:08,380
device and the device uses a set of

206
00:07:08,380 --> 00:07:10,240
sequel queries stored in the firmware to

207
00:07:10,240 --> 00:07:12,550
unpack it right and update the rules of

208
00:07:12,550 --> 00:07:14,710
memory what we found is that those rules

209
00:07:14,710 --> 00:07:16,720
are vulnerable to sequel injection and

210
00:07:16,720 --> 00:07:19,960
here's how this is the rule updating

211
00:07:19,960 --> 00:07:21,820
algorithm we reverse engineer the

212
00:07:21,820 --> 00:07:22,900
firmware and kind of came up with this

213
00:07:22,900 --> 00:07:25,810
is more to be seen as pseudocode than

214
00:07:25,810 --> 00:07:27,850
actual code first thing it runs is load

215
00:07:27,850 --> 00:07:30,250
rules into memory what that does is it

216
00:07:30,250 --> 00:07:32,680
is it queries the database the rules

217
00:07:32,680 --> 00:07:35,230
table for the type and the rule ID of

218
00:07:35,230 --> 00:07:37,770
all enabled rules or state equals one

219
00:07:37,770 --> 00:07:42,370
each one of those result rows they take

220
00:07:42,370 --> 00:07:44,770
the rule ID from that and send it to the

221
00:07:44,770 --> 00:07:46,510
fetched target device ID function of the

222
00:07:46,510 --> 00:07:48,180
bottom function on this slide that

223
00:07:48,180 --> 00:07:50,500
function uses the rule ID it got from

224
00:07:50,500 --> 00:07:52,810
the database to create yet another query

225
00:07:52,810 --> 00:07:55,030
and executed now I know you might be

226
00:07:55,030 --> 00:07:56,260
thinking how is this insecure because

227
00:07:56,260 --> 00:07:57,850
you're using SN printf we all know

228
00:07:57,850 --> 00:08:00,100
that's a secure version of s printf

229
00:08:00,100 --> 00:08:01,270
right so there's probably no way should

230
00:08:01,270 --> 00:08:03,220
here whatsoever so let's go through a

231
00:08:03,220 --> 00:08:06,460
couple examples in the benign case write

232
00:08:06,460 --> 00:08:07,900
a rule ID is supposed to be a number

233
00:08:07,900 --> 00:08:09,430
it's a primary key of the database so it

234
00:08:09,430 --> 00:08:11,470
supposed to be a number and we see in

235
00:08:11,470 --> 00:08:13,450
that when the at the top of slide you

236
00:08:13,450 --> 00:08:15,610
see that the rules table initially we

237
00:08:15,610 --> 00:08:17,700
have one rule in their rule idea of one

238
00:08:17,700 --> 00:08:19,750
after the first query runs we have one

239
00:08:19,750 --> 00:08:21,760
result back we see the rule idea there

240
00:08:21,760 --> 00:08:23,140
as well and I bowled it so you can kind

241
00:08:23,140 --> 00:08:24,610
of trace it through here and then the

242
00:08:24,610 --> 00:08:26,020
second query gets built as expected

243
00:08:26,020 --> 00:08:28,630
right we're going to select device ID

244
00:08:28,630 --> 00:08:31,180
where rule ID equals 1 easy peasy

245
00:08:31,180 --> 00:08:33,610
but the problem here is that sequel Lite

246
00:08:33,610 --> 00:08:35,679
does not enforce column type constraints

247
00:08:35,679 --> 00:08:37,630
okay so it doesn't have to be an energy

248
00:08:37,630 --> 00:08:38,950
you can put that as anything to be

249
00:08:38,950 --> 00:08:40,690
anything you want so let's say we did

250
00:08:40,690 --> 00:08:43,110
something like quote semicolon - - a

251
00:08:43,110 --> 00:08:47,230
typical textbook sequel injection it

252
00:08:47,230 --> 00:08:48,280
turns out if you trace this all the way

253
00:08:48,280 --> 00:08:50,050
down to the bottom what you end up doing

254
00:08:50,050 --> 00:08:53,030
is making a query with an empty

255
00:08:53,030 --> 00:08:55,580
rule I devalue semicolons gonna end that

256
00:08:55,580 --> 00:08:57,800
first sequel statement and then - dashes

257
00:08:57,800 --> 00:08:59,270
are gonna comment out everything else on

258
00:08:59,270 --> 00:09:02,120
that line mm-hmm again textbook sequel

259
00:09:02,120 --> 00:09:03,620
injection if you didn't know sequel

260
00:09:03,620 --> 00:09:06,710
injection before now you do now but

261
00:09:06,710 --> 00:09:08,600
that's great right now we can put stacks

262
00:09:08,600 --> 00:09:10,160
sequel queries together right we can put

263
00:09:10,160 --> 00:09:11,780
more things after that first semicolon

264
00:09:11,780 --> 00:09:13,370
other statements but what do we do with

265
00:09:13,370 --> 00:09:14,960
it now and that's the same question we

266
00:09:14,960 --> 00:09:17,060
had so we did what you would all do we

267
00:09:17,060 --> 00:09:19,790
googled it turns out the first result

268
00:09:19,790 --> 00:09:21,290
that Google throws back at us has an

269
00:09:21,290 --> 00:09:25,100
interesting thought some pen testers use

270
00:09:25,100 --> 00:09:26,750
it sequel injection to single out

271
00:09:26,750 --> 00:09:28,550
databases to do the following they use a

272
00:09:28,550 --> 00:09:31,220
tap the attach database syntax what

273
00:09:31,220 --> 00:09:32,900
that'll do is is if there's another

274
00:09:32,900 --> 00:09:34,760
sequel Lite database on the same file

275
00:09:34,760 --> 00:09:36,740
system that you're on you attach to it

276
00:09:36,740 --> 00:09:38,330
then you can query and pull data from

277
00:09:38,330 --> 00:09:39,710
that to use and your current set of

278
00:09:39,710 --> 00:09:41,180
queries or to put in your current

279
00:09:41,180 --> 00:09:42,340
database so when you already have open

280
00:09:42,340 --> 00:09:44,720
turns out though if the sequel idea is

281
00:09:44,720 --> 00:09:46,730
doesn't exist where you ask for it to

282
00:09:46,730 --> 00:09:48,680
you know will you try to open it it gets

283
00:09:48,680 --> 00:09:52,130
created there then you can create it

284
00:09:52,130 --> 00:09:54,500
image you can effect store data that you

285
00:09:54,500 --> 00:09:55,670
have from the current database into this

286
00:09:55,670 --> 00:09:57,290
new one you've created well let's say

287
00:09:57,290 --> 00:09:58,820
we've created something with the dot PHP

288
00:09:58,820 --> 00:10:00,730
extension the webservers root directory

289
00:10:00,730 --> 00:10:03,140
and then we added some text in there

290
00:10:03,140 --> 00:10:06,080
that looks suspiciously like PHP code

291
00:10:06,080 --> 00:10:08,150
well the PHP interpreter is so simple

292
00:10:08,150 --> 00:10:09,020
that all its going to do is search

293
00:10:09,020 --> 00:10:10,220
through that file looking for anything

294
00:10:10,220 --> 00:10:11,720
looks like PHP code oh and it finds it

295
00:10:11,720 --> 00:10:13,790
executes it right now this is an

296
00:10:13,790 --> 00:10:15,290
existing technique as I said we got from

297
00:10:15,290 --> 00:10:18,110
from googling around it seems like a

298
00:10:18,110 --> 00:10:20,030
good idea we'd love to use it problem is

299
00:10:20,030 --> 00:10:21,560
we don't have PHP in the system we're

300
00:10:21,560 --> 00:10:22,820
going too small a little embedded device

301
00:10:22,820 --> 00:10:25,130
that doesn't exist however it did video

302
00:10:25,130 --> 00:10:28,640
is a really interesting idea well we

303
00:10:28,640 --> 00:10:30,050
don't have the PHP command interpreter

304
00:10:30,050 --> 00:10:31,940
we are working in a system that's based

305
00:10:31,940 --> 00:10:33,560
off of open wrt

306
00:10:33,560 --> 00:10:35,530
I only know devices based on open wrt

307
00:10:35,530 --> 00:10:38,600
open wrt uses the busybox suite of

308
00:10:38,600 --> 00:10:40,940
embedded Linux tools right to implement

309
00:10:40,940 --> 00:10:43,850
all the basic Linux commands to include

310
00:10:43,850 --> 00:10:47,150
been SH and by default finished been SH

311
00:10:47,150 --> 00:10:50,690
is the a shell not bash but ash which is

312
00:10:50,690 --> 00:10:53,120
a very very simple version of batch

313
00:10:53,120 --> 00:10:56,240
effects so simple that really all it

314
00:10:56,240 --> 00:10:58,430
cares about when it's parsing input

315
00:10:58,430 --> 00:11:00,620
would it really cares about as new lines

316
00:11:00,620 --> 00:11:02,780
and parentheses because a new line is

317
00:11:02,780 --> 00:11:04,220
what happens when you hit return and

318
00:11:04,220 --> 00:11:06,410
parentheses essentially do sub shells

319
00:11:06,410 --> 00:11:06,840
right those

320
00:11:06,840 --> 00:11:08,280
backtick kind of things but in in a

321
00:11:08,280 --> 00:11:11,100
schvitz parentheses so we read okay this

322
00:11:11,100 --> 00:11:12,420
is a command interpreter a little bit

323
00:11:12,420 --> 00:11:14,670
more complicated than PHP but is there a

324
00:11:14,670 --> 00:11:16,230
way that we can maybe create a sequel

325
00:11:16,230 --> 00:11:18,930
life file and then with purely sequel

326
00:11:18,930 --> 00:11:21,080
statements make it executable by an -

327
00:11:21,080 --> 00:11:24,690
shell interpreter so boil it alert the

328
00:11:24,690 --> 00:11:27,870
answer's yes here's how we do it mm-hmm

329
00:11:27,870 --> 00:11:30,090
we care about that the whole newline

330
00:11:30,090 --> 00:11:30,960
thing right so you have to figure how to

331
00:11:30,960 --> 00:11:32,970
arbitrarily add new lines what we have

332
00:11:32,970 --> 00:11:34,860
here is a simple create table statement

333
00:11:34,860 --> 00:11:36,420
we're creating a table named echo it's

334
00:11:36,420 --> 00:11:39,150
got one column column name is echo you

335
00:11:39,150 --> 00:11:40,740
might be asking yourself why did you put

336
00:11:40,740 --> 00:11:42,480
those things on separate lines you can

337
00:11:42,480 --> 00:11:44,850
put that all on one line and the reason

338
00:11:44,850 --> 00:11:46,440
is because sequel Lite when you run that

339
00:11:46,440 --> 00:11:47,790
crazy Aemon actually preserves that

340
00:11:47,790 --> 00:11:50,400
newline character in other databases

341
00:11:50,400 --> 00:11:51,780
they would actually rid of it say it's

342
00:11:51,780 --> 00:11:53,250
an extraneous character we can save

343
00:11:53,250 --> 00:11:55,410
space not sequel like by default it

344
00:11:55,410 --> 00:11:57,840
preserves that newline character what

345
00:11:57,840 --> 00:11:59,010
happens in when you run that file

346
00:11:59,010 --> 00:12:02,580
through busy boxes a shell if you get

347
00:12:02,580 --> 00:12:03,960
this first error here it says sequel

348
00:12:03,960 --> 00:12:06,720
Lite not found that's happening because

349
00:12:06,720 --> 00:12:09,360
it's interpreting the first word in that

350
00:12:09,360 --> 00:12:11,400
file to be a command name and of course

351
00:12:11,400 --> 00:12:12,450
there's no sequel like command on the

352
00:12:12,450 --> 00:12:15,090
system but more importantly it's

353
00:12:15,090 --> 00:12:16,470
interpreting everything after the word

354
00:12:16,470 --> 00:12:19,020
sequel Lite up until that new line has

355
00:12:19,020 --> 00:12:21,240
the parameters for that command that it

356
00:12:21,240 --> 00:12:23,400
cannot execute effectively that means

357
00:12:23,400 --> 00:12:25,620
we've skipped a whole bunch of text we

358
00:12:25,620 --> 00:12:27,030
didn't want to deal with anyway or a

359
00:12:27,030 --> 00:12:28,470
bunch of bytes we didn't want to deal

360
00:12:28,470 --> 00:12:30,510
with anyway in that file that's good for

361
00:12:30,510 --> 00:12:32,190
us now we're gonna do is deal with a

362
00:12:32,190 --> 00:12:33,660
second error that says unterminated

363
00:12:33,660 --> 00:12:36,720
quoted string we do that by adding

364
00:12:36,720 --> 00:12:39,030
another new line so it turns out after a

365
00:12:39,030 --> 00:12:42,120
column definition and a create table

366
00:12:42,120 --> 00:12:43,920
statement you can put these words

367
00:12:43,920 --> 00:12:46,110
without row ID and I have no idea what

368
00:12:46,110 --> 00:12:47,940
they do but I know they can be put after

369
00:12:47,940 --> 00:12:49,650
the column definitions and they can be

370
00:12:49,650 --> 00:12:51,810
put on a new line which means that when

371
00:12:51,810 --> 00:12:53,910
we run this file again in busybox after

372
00:12:53,910 --> 00:12:56,370
doing that we get that first sequel Lite

373
00:12:56,370 --> 00:12:58,710
error but then we get the suspicious

374
00:12:58,710 --> 00:13:01,590
thing says none primary key what's going

375
00:13:01,590 --> 00:13:03,960
on here is that the echo column name is

376
00:13:03,960 --> 00:13:05,820
being treated as the echo command

377
00:13:05,820 --> 00:13:08,280
because it's on its own line there's a

378
00:13:08,280 --> 00:13:10,620
new line right before that parenthesis

379
00:13:10,620 --> 00:13:12,180
open paren and there's a new line right

380
00:13:12,180 --> 00:13:15,180
after the closed paren so the a shell

381
00:13:15,180 --> 00:13:16,530
interpreter is actually Trinette to be

382
00:13:16,530 --> 00:13:17,790
its own line it's enclosed in

383
00:13:17,790 --> 00:13:19,130
parentheses which

384
00:13:19,130 --> 00:13:21,740
that excuse as a sub command great we

385
00:13:21,740 --> 00:13:23,510
have command execution it's not

386
00:13:23,510 --> 00:13:26,090
arbitrary command execution because that

387
00:13:26,090 --> 00:13:28,280
column definition I can only put so many

388
00:13:28,280 --> 00:13:29,960
things after the other I can put random

389
00:13:29,960 --> 00:13:32,720
things so you get arbitrary command

390
00:13:32,720 --> 00:13:34,610
execution we take a page back from the

391
00:13:34,610 --> 00:13:37,220
PHP example right we insert some data

392
00:13:37,220 --> 00:13:39,980
into that table we just created and all

393
00:13:39,980 --> 00:13:41,510
we have to do is put a new line before

394
00:13:41,510 --> 00:13:43,490
and after the data we insert now we can

395
00:13:43,490 --> 00:13:44,840
run whatever the heck we want in this

396
00:13:44,840 --> 00:13:47,300
case LS slash and you see at the bottom

397
00:13:47,300 --> 00:13:49,220
there after a bunch of errors mm-hmm

398
00:13:49,220 --> 00:13:51,380
other things that couldn't be executed

399
00:13:51,380 --> 00:13:55,340
um we get the output of our command cool

400
00:13:55,340 --> 00:13:56,540
so now we have arbitrary command

401
00:13:56,540 --> 00:14:00,050
execution with ash so this is what the

402
00:14:00,050 --> 00:14:02,620
malicious database actually looks like

403
00:14:02,620 --> 00:14:05,870
we instead of it's usually the malicious

404
00:14:05,870 --> 00:14:09,380
rules table of the database so we we put

405
00:14:09,380 --> 00:14:10,850
two rows again the first one is going to

406
00:14:10,850 --> 00:14:12,410
create a file in a particular location

407
00:14:12,410 --> 00:14:13,970
I'm gonna go over why that location is

408
00:14:13,970 --> 00:14:16,130
important in a moment that's the first

409
00:14:16,130 --> 00:14:18,320
row this second row actually inserts the

410
00:14:18,320 --> 00:14:20,000
command to want to execute just like we

411
00:14:20,000 --> 00:14:22,610
just showed note that they both start

412
00:14:22,610 --> 00:14:24,830
with this double quote semicolon because

413
00:14:24,830 --> 00:14:26,480
they are actually injecting these

414
00:14:26,480 --> 00:14:28,220
statements and then the command you

415
00:14:28,220 --> 00:14:29,210
wanna run is the one we saw at the

416
00:14:29,210 --> 00:14:30,530
beginning that that other guy used in

417
00:14:30,530 --> 00:14:32,420
the the xml case right we just want to

418
00:14:32,420 --> 00:14:34,070
start up telling it to auto log us into

419
00:14:34,070 --> 00:14:37,010
a root shell okay so now we've been able

420
00:14:37,010 --> 00:14:39,470
to create a sequel and executable sequel

421
00:14:39,470 --> 00:14:42,500
like database right but we still need to

422
00:14:42,500 --> 00:14:44,570
put it somewhere so it will execute it

423
00:14:44,570 --> 00:14:46,130
is executable but we need to get it to

424
00:14:46,130 --> 00:14:48,410
execute so that's a two-step process

425
00:14:48,410 --> 00:14:49,970
but we started doing as you started

426
00:14:49,970 --> 00:14:51,860
looking through the NIT scripts right

427
00:14:51,860 --> 00:14:53,030
for all the different services that

428
00:14:53,030 --> 00:14:54,860
start in the system and in a networking

429
00:14:54,860 --> 00:14:56,510
mid strip we found this and this is in

430
00:14:56,510 --> 00:14:58,010
this similar syntax in some of the other

431
00:14:58,010 --> 00:14:59,330
init scripts so this is the easiest one

432
00:14:59,330 --> 00:15:01,850
to work with we saw this include slash

433
00:15:01,850 --> 00:15:03,170
loop slash network without that's

434
00:15:03,170 --> 00:15:05,720
interesting what that does for went and

435
00:15:05,720 --> 00:15:07,730
found that in Etsy function functions at

436
00:15:07,730 --> 00:15:10,250
SH and if you look at here at this code

437
00:15:10,250 --> 00:15:11,690
it's just it's just a simple loop all

438
00:15:11,690 --> 00:15:14,150
it's doing is its treating the parameter

439
00:15:14,150 --> 00:15:16,790
that you pass it as a directory reading

440
00:15:16,790 --> 00:15:19,870
all all of the files with a dot SH and

441
00:15:19,870 --> 00:15:22,400
sourcing them into the current file that

442
00:15:22,400 --> 00:15:25,430
dot space dollar sign file that's

443
00:15:25,430 --> 00:15:27,890
sourcing sourcing just means read all

444
00:15:27,890 --> 00:15:30,410
the lines and execute them that's really

445
00:15:30,410 --> 00:15:31,730
cool for us because it means we don't

446
00:15:31,730 --> 00:15:32,630
need execute from

447
00:15:32,630 --> 00:15:34,700
missions on the file we created because

448
00:15:34,700 --> 00:15:36,050
when we do a test database it doesn't

449
00:15:36,050 --> 00:15:37,880
give it to execute permissions but this

450
00:15:37,880 --> 00:15:40,040
will read all of that all the data in

451
00:15:40,040 --> 00:15:41,990
that file and try and execute it exactly

452
00:15:41,990 --> 00:15:45,350
what we want okay so now we we know

453
00:15:45,350 --> 00:15:46,790
where to put the file to make it to get

454
00:15:46,790 --> 00:15:47,930
it to xq but now how do we actually

455
00:15:47,930 --> 00:15:51,200
execute it well we essentially need the

456
00:15:51,200 --> 00:15:53,000
networking init scripts to run

457
00:15:53,000 --> 00:15:54,740
we got always you know unplug and plug

458
00:15:54,740 --> 00:15:56,330
the device back in but that's not

459
00:15:56,330 --> 00:15:57,740
terribly helpful if we want a remote

460
00:15:57,740 --> 00:16:00,530
attack right so instead what we found is

461
00:16:00,530 --> 00:16:02,450
that there is a particular UPnP endpoint

462
00:16:02,450 --> 00:16:05,120
called Wi-Fi setup one it's meant for

463
00:16:05,120 --> 00:16:07,790
when you initially pair the device with

464
00:16:07,790 --> 00:16:09,140
a Wi-Fi network so when these devices

465
00:16:09,140 --> 00:16:10,670
come up they create their own access

466
00:16:10,670 --> 00:16:12,920
point you connect to that access point

467
00:16:12,920 --> 00:16:14,660
and then tell it what network to be on

468
00:16:14,660 --> 00:16:17,810
the Wi-Fi setup endpoints is used for

469
00:16:17,810 --> 00:16:19,970
that purpose when you are already paired

470
00:16:19,970 --> 00:16:21,560
though that endpoint is still active we

471
00:16:21,560 --> 00:16:23,330
can still tell to do things in

472
00:16:23,330 --> 00:16:26,240
particularly we can say stop pair that

473
00:16:26,240 --> 00:16:28,640
means I've given it a new Wi-Fi name I

474
00:16:28,640 --> 00:16:29,960
want you to reboot all the networking

475
00:16:29,960 --> 00:16:31,580
stuff now literally restart the

476
00:16:31,580 --> 00:16:34,190
networking subsystem so it uses that new

477
00:16:34,190 --> 00:16:36,560
access point if we do that while it's

478
00:16:36,560 --> 00:16:37,310
already started

479
00:16:37,310 --> 00:16:39,140
it just restarts the networking things

480
00:16:39,140 --> 00:16:41,150
and everything comes back up right as it

481
00:16:41,150 --> 00:16:42,680
was supposed to so essentially when we

482
00:16:42,680 --> 00:16:44,060
do that restarting of the network stuff

483
00:16:44,060 --> 00:16:46,580
or the network and subsystem we

484
00:16:46,580 --> 00:16:50,450
effectively run our script which we're

485
00:16:50,450 --> 00:16:58,520
going to demo to you right now ok so we

486
00:16:58,520 --> 00:17:02,150
have a device we're going to just prove

487
00:17:02,150 --> 00:17:06,290
to you that it's up and running cool and

488
00:17:06,290 --> 00:17:08,209
I'm going to prove to you that we don't

489
00:17:08,209 --> 00:17:09,980
currently have till net running on the

490
00:17:09,980 --> 00:17:16,579
device ok it didn't work now we're going

491
00:17:16,579 --> 00:17:17,359
to run

492
00:17:17,359 --> 00:17:20,599
route SH we're done SH as you can see

493
00:17:20,599 --> 00:17:22,160
there's a couple of curl calls and then

494
00:17:22,160 --> 00:17:24,410
effectively throws a few messages that

495
00:17:24,410 --> 00:17:26,150
are generated by some Python scripts ok

496
00:17:26,150 --> 00:17:34,279
it's all it does ok

497
00:17:34,279 --> 00:17:36,539
so I'm gonna go over this in a second

498
00:17:36,539 --> 00:17:38,190
because we need to wait about a minute

499
00:17:38,190 --> 00:17:39,090
to a minute and a half for the

500
00:17:39,090 --> 00:17:40,620
networking subsystem to actually reboot

501
00:17:40,620 --> 00:17:42,450
but what's happened right now is we've

502
00:17:42,450 --> 00:17:44,220
thrown the rules file over there and

503
00:17:44,220 --> 00:17:45,630
then we kind of put in a sleep for 10

504
00:17:45,630 --> 00:17:47,279
seconds just to give the firmer it's a

505
00:17:47,279 --> 00:17:48,779
slow device right it's a particularly

506
00:17:48,779 --> 00:17:50,279
powerful processor the firmware chance

507
00:17:50,279 --> 00:17:52,529
to unpack it ok now we're sending the

508
00:17:52,529 --> 00:17:55,740
trigger so what we're gonna do is go

509
00:17:55,740 --> 00:17:59,450
back up and start pinging the device and

510
00:17:59,450 --> 00:18:01,500
then I'm gonna come back to the slides

511
00:18:01,500 --> 00:18:05,909
and explain to what's going on ok so

512
00:18:05,909 --> 00:18:07,980
this is the sort of anatomy of the

513
00:18:07,980 --> 00:18:11,519
attack when the first thing we need new

514
00:18:11,519 --> 00:18:13,230
once we have this rule this malicious

515
00:18:13,230 --> 00:18:15,090
rules file created those we need to set

516
00:18:15,090 --> 00:18:16,500
the device into a state to accept the

517
00:18:16,500 --> 00:18:17,880
rules this actually took us a long time

518
00:18:17,880 --> 00:18:19,500
to figure out didn't work every time we

519
00:18:19,500 --> 00:18:20,970
couldn't figure out why you need to do a

520
00:18:20,970 --> 00:18:23,130
certain set of calls that was those

521
00:18:23,130 --> 00:18:24,510
first two curl statements and then the

522
00:18:24,510 --> 00:18:27,480
first Python script to run that sets the

523
00:18:27,480 --> 00:18:28,710
device in the state that when we then

524
00:18:28,710 --> 00:18:30,779
send it the malicious database it'll

525
00:18:30,779 --> 00:18:32,909
actually properly unpack it and run our

526
00:18:32,909 --> 00:18:34,860
sequel injection that signal injection

527
00:18:34,860 --> 00:18:36,480
will write the file to the appropriate

528
00:18:36,480 --> 00:18:38,460
location the next thing we need to do

529
00:18:38,460 --> 00:18:39,990
which you saw in this is the trigger is

530
00:18:39,990 --> 00:18:42,000
sending that stop pair message and

531
00:18:42,000 --> 00:18:42,990
that's gonna restart the networking

532
00:18:42,990 --> 00:18:44,970
subsystem and the reason I'm showing you

533
00:18:44,970 --> 00:18:46,289
the slide right now is because again

534
00:18:46,289 --> 00:18:48,090
that takes about a minute to do so

535
00:18:48,090 --> 00:18:49,740
hopefully by the time I'm done talking

536
00:18:49,740 --> 00:18:51,299
about this we can go back into the last

537
00:18:51,299 --> 00:18:52,649
step which is telling it into the device

538
00:18:52,649 --> 00:18:55,769
and let's see if that's working

539
00:18:55,769 --> 00:19:02,389
that's far no not yet

540
00:19:16,990 --> 00:19:20,750
apologize about the dead air time I also

541
00:19:20,750 --> 00:19:22,220
apologize about the voice I got kind of

542
00:19:22,220 --> 00:19:25,190
a cold on the way over here worst thing

543
00:19:25,190 --> 00:19:26,480
to happen when you're doing a talk right

544
00:19:26,480 --> 00:19:29,170
mm-hmm

545
00:19:31,000 --> 00:19:33,530
also dead air time worst thing are you

546
00:19:33,530 --> 00:19:37,040
haven't during to talk right oh there we

547
00:19:37,040 --> 00:19:47,600
go all right so now look at that so we

548
00:19:47,600 --> 00:19:57,530
can type ID now and and then show they

549
00:19:57,530 --> 00:19:59,720
want a MIPS device here and then lastly

550
00:19:59,720 --> 00:20:03,910
we'll do cat the version of this device

551
00:20:09,220 --> 00:20:11,150
all right and show you that we are

552
00:20:11,150 --> 00:20:13,070
actually on they'll confirm we're right

553
00:20:13,070 --> 00:20:15,080
now about nothing we will firmware there

554
00:20:15,080 --> 00:20:15,530
we go

555
00:20:15,530 --> 00:20:17,330
that's how you would remotely route the

556
00:20:17,330 --> 00:20:26,270
lemo device okay okay so the takeaways

557
00:20:26,270 --> 00:20:28,580
from this um we obviously turn on tell

558
00:20:28,580 --> 00:20:30,080
that D here but we couldn't anything

559
00:20:30,080 --> 00:20:31,430
else we could have W ated some malware

560
00:20:31,430 --> 00:20:33,410
and executed it right and that was a

561
00:20:33,410 --> 00:20:34,850
common question we've gotten from other

562
00:20:34,850 --> 00:20:36,530
peoples what else okay so you trying to

563
00:20:36,530 --> 00:20:38,030
tell it what's the big deal obviously we

564
00:20:38,030 --> 00:20:39,170
demoed that to you guys because that's

565
00:20:39,170 --> 00:20:41,090
what the security community wants to see

566
00:20:41,090 --> 00:20:43,460
think Mirai we've easily run Mirai on

567
00:20:43,460 --> 00:20:46,580
this by default Mirai compiles to nips

568
00:20:46,580 --> 00:20:49,280
the interesting part about this is that

569
00:20:49,280 --> 00:20:51,230
the only real remediation is a firmware

570
00:20:51,230 --> 00:20:54,640
update so all these women devices have a

571
00:20:54,640 --> 00:20:57,080
factory reset button on them hold it

572
00:20:57,080 --> 00:20:58,910
down plug it in wait five seconds

573
00:20:58,910 --> 00:21:00,740
factory resets it that doesn't no

574
00:21:00,740 --> 00:21:02,330
remediate what we've done here at all

575
00:21:02,330 --> 00:21:04,280
the only thing you do is wait for the

576
00:21:04,280 --> 00:21:05,360
vendor to give you a firmware update

577
00:21:05,360 --> 00:21:06,740
which of course is not ideal because you

578
00:21:06,740 --> 00:21:08,990
don't get to choose that also the reason

579
00:21:08,990 --> 00:21:10,550
that's not ideal is that it is trivial

580
00:21:10,550 --> 00:21:12,380
to break their firmware update process

581
00:21:12,380 --> 00:21:14,060
it's just a shell script so we can

582
00:21:14,060 --> 00:21:16,670
easily break that and prevent you from

583
00:21:16,670 --> 00:21:18,320
ever updating your device effectively

584
00:21:18,320 --> 00:21:21,620
meaning its own forever this brings up

585
00:21:21,620 --> 00:21:23,510
sort of another issue that what we did

586
00:21:23,510 --> 00:21:26,750
here is that well Belkin had this sequel

587
00:21:26,750 --> 00:21:28,130
injection vulnerability they coded right

588
00:21:28,130 --> 00:21:30,020
that's not the reason we got

589
00:21:30,020 --> 00:21:31,640
that's not the entire reason there's

590
00:21:31,640 --> 00:21:33,230
this whole software open source software

591
00:21:33,230 --> 00:21:34,940
stack that this stuff is built on right

592
00:21:34,940 --> 00:21:37,400
so sequel I provided us a way to do an

593
00:21:37,400 --> 00:21:39,230
arbitrary write as root because

594
00:21:39,230 --> 00:21:40,850
everything is running as root ash

595
00:21:40,850 --> 00:21:42,500
provided us a way to execute some

596
00:21:42,500 --> 00:21:44,570
commands and then open to B or T the

597
00:21:44,570 --> 00:21:46,370
design of it itself and it's designed so

598
00:21:46,370 --> 00:21:47,929
you can download it and modify it custom

599
00:21:47,929 --> 00:21:49,880
for your device right that provides the

600
00:21:49,880 --> 00:21:51,559
actual trigger to execute putting it in

601
00:21:51,559 --> 00:21:52,790
a certain direction then restarting

602
00:21:52,790 --> 00:21:54,920
stuff so we need to start thinking about

603
00:21:54,920 --> 00:21:57,410
like the entire software stack that IOT

604
00:21:57,410 --> 00:21:59,390
is based on not just the stuff that we

605
00:21:59,390 --> 00:22:01,250
write and they it's important takeaway

606
00:22:01,250 --> 00:22:07,460
from this whole exercise so while Scott

607
00:22:07,460 --> 00:22:10,280
was developing the remote exploit he had

608
00:22:10,280 --> 00:22:12,400
very kind of coarse-grained feedback

609
00:22:12,400 --> 00:22:15,679
getting the LED blinking by doing

610
00:22:15,679 --> 00:22:17,809
something or putting a file in a very

611
00:22:17,809 --> 00:22:19,370
restricted location we could see that

612
00:22:19,370 --> 00:22:21,020
that kind of stuff was happening but we

613
00:22:21,020 --> 00:22:22,670
couldn't get deep into the guts of what

614
00:22:22,670 --> 00:22:25,070
all the processes were doing but the

615
00:22:25,070 --> 00:22:27,650
individual process log files were if we

616
00:22:27,650 --> 00:22:30,580
managed to crash anything and you know

617
00:22:30,580 --> 00:22:32,809
other things like maybe even Gd being

618
00:22:32,809 --> 00:22:34,040
into a process and these would all be

619
00:22:34,040 --> 00:22:35,690
things that we'd want to be able to do

620
00:22:35,690 --> 00:22:37,850
so we looked at getting a local root as

621
00:22:37,850 --> 00:22:39,650
well on the device so that we could get

622
00:22:39,650 --> 00:22:42,230
more fine-grained kind of introspection

623
00:22:42,230 --> 00:22:45,080
into what was going on so what we ended

624
00:22:45,080 --> 00:22:47,120
up doing was just popping the thing

625
00:22:47,120 --> 00:22:49,040
apart hunting around for ports

626
00:22:49,040 --> 00:22:51,200
connecting to them and seeing what we

627
00:22:51,200 --> 00:22:54,470
could get from there thankfully the open

628
00:22:54,470 --> 00:22:56,450
wrt community one that they get open wrt

629
00:22:56,450 --> 00:22:57,980
running on this device like a vanilla

630
00:22:57,980 --> 00:22:59,450
version then there are they done some of

631
00:22:59,450 --> 00:23:01,640
the legwork to find out what the ports

632
00:23:01,640 --> 00:23:03,830
do have a you know where the what the

633
00:23:03,830 --> 00:23:05,950
connector pinouts were things like that

634
00:23:05,950 --> 00:23:09,320
so thanks to those guys we cracked it

635
00:23:09,320 --> 00:23:09,650
open

636
00:23:09,650 --> 00:23:12,170
we removed the application board it's a

637
00:23:12,170 --> 00:23:14,000
high voltage relay so this is the switch

638
00:23:14,000 --> 00:23:16,040
used to turn whatever's plugged into it

639
00:23:16,040 --> 00:23:17,690
on and off we don't want to have a high

640
00:23:17,690 --> 00:23:19,429
voltage stuff in there we're poking

641
00:23:19,429 --> 00:23:20,630
around on that so it took that out

642
00:23:20,630 --> 00:23:22,490
unfortunately the power supply for that

643
00:23:22,490 --> 00:23:25,400
for the Wi-Fi board is on that

644
00:23:25,400 --> 00:23:27,620
application board so we made a connector

645
00:23:27,620 --> 00:23:29,780
that plugs into a benchtop power supply

646
00:23:29,780 --> 00:23:30,800
and that's what you see all the way on

647
00:23:30,800 --> 00:23:34,010
the left-hand side of the of the slide

648
00:23:34,010 --> 00:23:36,980
next to that is the console port the

649
00:23:36,980 --> 00:23:39,890
debug you are just tx/rx so we saw this

650
00:23:39,890 --> 00:23:41,929
on - that couldn't make a connector for

651
00:23:41,929 --> 00:23:43,520
it because those were just tests

652
00:23:43,520 --> 00:23:45,110
we're and all that over then to the

653
00:23:45,110 --> 00:23:47,230
breadboard you see on the far right and

654
00:23:47,230 --> 00:23:49,550
plugged in the USB viewer the doctor as

655
00:23:49,550 --> 00:23:51,080
well as our bench top power supply stuff

656
00:23:51,080 --> 00:23:52,940
it kind of kept it from being too flimsy

657
00:23:52,940 --> 00:23:56,330
and just falling apart all the time the

658
00:23:56,330 --> 00:23:58,100
serial console is just thirty seven six

659
00:23:58,100 --> 00:23:59,990
hundred eight and one I'll use the Linux

660
00:23:59,990 --> 00:24:01,670
screen commence and they connect up to

661
00:24:01,670 --> 00:24:05,420
it just got a a regular familiar looking

662
00:24:05,420 --> 00:24:08,120
prompt we when we boot the device we see

663
00:24:08,120 --> 00:24:10,130
the boot bugs kind of scroll through and

664
00:24:10,130 --> 00:24:11,990
then we get to a Linux console for

665
00:24:11,990 --> 00:24:14,030
logging in first we tried logging them

666
00:24:14,030 --> 00:24:15,740
with no password that didn't work then

667
00:24:15,740 --> 00:24:17,390
we tried logging it or no user rather

668
00:24:17,390 --> 00:24:18,680
than we tried logging in those root with

669
00:24:18,680 --> 00:24:21,770
no password that also didn't work and so

670
00:24:21,770 --> 00:24:23,600
they have guards on there to prevent you

671
00:24:23,600 --> 00:24:25,520
from just logging in we thought okay

672
00:24:25,520 --> 00:24:27,260
well what can we do now well we have of

673
00:24:27,260 --> 00:24:29,390
that firmware update that we picked

674
00:24:29,390 --> 00:24:31,520
apart and analyzed as part of our static

675
00:24:31,520 --> 00:24:33,470
analysis for the the remote exploit

676
00:24:33,470 --> 00:24:35,390
development and we have Etsy password

677
00:24:35,390 --> 00:24:37,910
which contains the all the users in

678
00:24:37,910 --> 00:24:39,620
their their hashes for their their

679
00:24:39,620 --> 00:24:41,720
credentials so we pulled that hash out

680
00:24:41,720 --> 00:24:44,210
we put it in our GPU farm nine days

681
00:24:44,210 --> 00:24:46,550
later someone else needed the GPU farm

682
00:24:46,550 --> 00:24:49,580
so it resisted pretty well our attempts

683
00:24:49,580 --> 00:24:51,140
to crack into it's a reasonably strong

684
00:24:51,140 --> 00:24:53,900
password so now what else can we do

685
00:24:53,900 --> 00:24:55,820
we're kind of stuck at this login prompt

686
00:24:55,820 --> 00:24:57,050
well if you look at all the boot

687
00:24:57,050 --> 00:24:59,570
messages you can see that you boot is

688
00:24:59,570 --> 00:25:01,610
booting up the Linux kernel and it

689
00:25:01,610 --> 00:25:03,140
actually provides you with a mechanism

690
00:25:03,140 --> 00:25:05,120
for breaking into the you boot console

691
00:25:05,120 --> 00:25:06,710
by spamming the four key while the

692
00:25:06,710 --> 00:25:09,320
device is booting so we got onto the you

693
00:25:09,320 --> 00:25:12,980
boot console using that to modify the

694
00:25:12,980 --> 00:25:14,750
Linux startup process through you boot

695
00:25:14,750 --> 00:25:16,970
you can do a number of things a lot of

696
00:25:16,970 --> 00:25:19,550
them can be set in different variables

697
00:25:19,550 --> 00:25:21,980
that are available on the system you can

698
00:25:21,980 --> 00:25:23,720
print these variables using print em set

699
00:25:23,720 --> 00:25:25,100
them using set them and persist them

700
00:25:25,100 --> 00:25:27,470
across reboots with save and and the

701
00:25:27,470 --> 00:25:28,610
weather there's kind of feed into the

702
00:25:28,610 --> 00:25:29,750
process of the kernel boot process

703
00:25:29,750 --> 00:25:32,300
things like where you load it to whether

704
00:25:32,300 --> 00:25:33,530
the arguments that you pass to the

705
00:25:33,530 --> 00:25:35,840
kernel unfortunately when we tried

706
00:25:35,840 --> 00:25:37,310
modifying that was it actually modified

707
00:25:37,310 --> 00:25:39,290
the variables but when we who did the

708
00:25:39,290 --> 00:25:41,960
kernel the version of you boot that

709
00:25:41,960 --> 00:25:43,250
belkin compiled

710
00:25:43,250 --> 00:25:45,800
has static boot parameters depending on

711
00:25:45,800 --> 00:25:48,080
some other configuration values so what

712
00:25:48,080 --> 00:25:50,630
our modifications didn't stick well you

713
00:25:50,630 --> 00:25:52,370
it runs in RAM so is there any way that

714
00:25:52,370 --> 00:25:54,900
we could modify this static

715
00:25:54,900 --> 00:25:57,510
turns out you can they left in the

716
00:25:57,510 --> 00:25:59,310
functionality for arbitrarily peeking

717
00:25:59,310 --> 00:26:03,240
and poking Ram so MD de B&M MV for peek

718
00:26:03,240 --> 00:26:05,520
and poke and since you boot runs in RAM

719
00:26:05,520 --> 00:26:07,710
we were able to kind of dump the area in

720
00:26:07,710 --> 00:26:09,510
flash or we think you boot lids it's

721
00:26:09,510 --> 00:26:11,280
typically at the end so it can load the

722
00:26:11,280 --> 00:26:12,900
kernel at the beginning and execute it

723
00:26:12,900 --> 00:26:16,650
nice and simply and we found the boot

724
00:26:16,650 --> 00:26:18,330
parameters for the kernel that it was

725
00:26:18,330 --> 00:26:23,160
using so we first tried to do things to

726
00:26:23,160 --> 00:26:25,110
annette some easy things like put the

727
00:26:25,110 --> 00:26:27,420
system in recovery mode single user mode

728
00:26:27,420 --> 00:26:30,150
by using arguments like one capital s

729
00:26:30,150 --> 00:26:31,740
single something like that that we get

730
00:26:31,740 --> 00:26:33,750
past to admit and say hey don't do your

731
00:26:33,750 --> 00:26:35,640
full boot sequence just give us a root

732
00:26:35,640 --> 00:26:39,630
show that didn't work so then we said

733
00:26:39,630 --> 00:26:42,090
okay well if the normal init process

734
00:26:42,090 --> 00:26:43,800
isn't gonna do what we want why don't we

735
00:26:43,800 --> 00:26:46,290
just send it to bin sh that actually did

736
00:26:46,290 --> 00:26:48,810
work kind of it would run been SH but

737
00:26:48,810 --> 00:26:50,550
the system looked like it was hung and

738
00:26:50,550 --> 00:26:52,140
the reason for this is that there's no

739
00:26:52,140 --> 00:26:54,360
dev console node me in the show file

740
00:26:54,360 --> 00:26:57,330
system for at when the kernel boots

741
00:26:57,330 --> 00:26:59,730
there is no another deer in it ram FS

742
00:26:59,730 --> 00:27:03,480
support built into this kernel so what

743
00:27:03,480 --> 00:27:05,070
ends up happening is after boot the

744
00:27:05,070 --> 00:27:07,290
normal init scripts create the dev node

745
00:27:07,290 --> 00:27:09,540
for the console but since we didn't have

746
00:27:09,540 --> 00:27:11,850
that at this point in time we tried non

747
00:27:11,850 --> 00:27:14,760
interactively creating that by using - C

748
00:27:14,760 --> 00:27:19,110
and passing us a command - bin sh we

749
00:27:19,110 --> 00:27:20,670
didn't get that working and we didn't

750
00:27:20,670 --> 00:27:21,990
have enough feedback to kind of figure

751
00:27:21,990 --> 00:27:23,250
it was going on so we decided to kind of

752
00:27:23,250 --> 00:27:24,810
defer that and move on to a different

753
00:27:24,810 --> 00:27:27,570
mechanism modifying the Linux file

754
00:27:27,570 --> 00:27:29,760
system like we saw you can put a script

755
00:27:29,760 --> 00:27:30,960
in the init script so that ends up

756
00:27:30,960 --> 00:27:32,670
starting up telnet is there anything

757
00:27:32,670 --> 00:27:34,020
else we can do we don't necessarily want

758
00:27:34,020 --> 00:27:35,790
to run telnet in our case here because

759
00:27:35,790 --> 00:27:37,170
we might want to get on the system

760
00:27:37,170 --> 00:27:39,780
before the network is up so look at

761
00:27:39,780 --> 00:27:41,670
doing something like removing that hash

762
00:27:41,670 --> 00:27:43,350
from that Etsy password file so that we

763
00:27:43,350 --> 00:27:45,810
don't need a password to log again how

764
00:27:45,810 --> 00:27:47,880
do we access the flash a lot of the

765
00:27:47,880 --> 00:27:49,370
times in you boot there are

766
00:27:49,370 --> 00:27:52,320
functionalities for manually reading and

767
00:27:52,320 --> 00:27:54,240
writing flash and sometimes even from

768
00:27:54,240 --> 00:27:56,130
out file systems from flash none of

769
00:27:56,130 --> 00:27:57,780
those were in this version of you boot

770
00:27:57,780 --> 00:28:00,420
so we couldn't arbitrarily access flash

771
00:28:00,420 --> 00:28:03,270
in the stock you boot we could try

772
00:28:03,270 --> 00:28:05,310
clipping onto the flash and the package

773
00:28:05,310 --> 00:28:07,440
on here is a small outline package sop

774
00:28:07,440 --> 00:28:07,920
pretty

775
00:28:07,920 --> 00:28:09,390
easy to clip on to an access with an

776
00:28:09,390 --> 00:28:11,510
external right there but some flashes

777
00:28:11,510 --> 00:28:13,890
notably once either like stacked up on

778
00:28:13,890 --> 00:28:15,600
kind of small like smaller method

779
00:28:15,600 --> 00:28:16,950
systems are difficult to get to they're

780
00:28:16,950 --> 00:28:19,230
like BGA where sometimes like you offend

781
00:28:19,230 --> 00:28:21,120
things like that so we wanted to try to

782
00:28:21,120 --> 00:28:22,830
see if we could just purely with

783
00:28:22,830 --> 00:28:24,720
software in the console axis we already

784
00:28:24,720 --> 00:28:26,400
had access to flash instead of

785
00:28:26,400 --> 00:28:29,010
physically clipping on to it you can

786
00:28:29,010 --> 00:28:31,440
actually do this you can use load B

787
00:28:31,440 --> 00:28:33,150
that's another way to get stuff into the

788
00:28:33,150 --> 00:28:34,920
memory and you move from something

789
00:28:34,920 --> 00:28:36,810
external in this case we used Kermit -

790
00:28:36,810 --> 00:28:39,390
you know ship something up with load B

791
00:28:39,390 --> 00:28:42,690
from the host and then that boot em

792
00:28:42,690 --> 00:28:43,920
process that it's used to boot the

793
00:28:43,920 --> 00:28:46,160
kernel uses those static arguments but

794
00:28:46,160 --> 00:28:48,750
and it actually pulls the kernel from a

795
00:28:48,750 --> 00:28:50,730
fixed place as well but you go we'll

796
00:28:50,730 --> 00:28:51,960
just execute whatever you tell it

797
00:28:51,960 --> 00:28:54,390
executes as long as it's properly

798
00:28:54,390 --> 00:28:56,370
formatted for you boot to be executed as

799
00:28:56,370 --> 00:28:57,870
an application like that

800
00:28:57,870 --> 00:28:59,280
so we developed a custom application

801
00:28:59,280 --> 00:29:01,290
that can talk to the flash of your spy

802
00:29:01,290 --> 00:29:04,080
and then talk back to the user with UART

803
00:29:04,080 --> 00:29:06,090
and just use that to interactively

804
00:29:06,090 --> 00:29:09,510
modify the flash so now that we can

805
00:29:09,510 --> 00:29:12,030
modify the flash what we add to it and I

806
00:29:12,030 --> 00:29:13,260
mentioned a little bit about we're gonna

807
00:29:13,260 --> 00:29:14,430
add so we're going to modify it's a

808
00:29:14,430 --> 00:29:16,380
password but how is the file system

809
00:29:16,380 --> 00:29:17,880
structured so how do we know where we're

810
00:29:17,880 --> 00:29:20,220
gonna put this thing there's two parts

811
00:29:20,220 --> 00:29:21,360
of the fastest and there's a dynamic

812
00:29:21,360 --> 00:29:24,270
part this is a ffs to partition and

813
00:29:24,270 --> 00:29:26,010
there's a static part to squash FS

814
00:29:26,010 --> 00:29:28,020
partition the dynamic part can be

815
00:29:28,020 --> 00:29:29,760
read/write the static part can only be

816
00:29:29,760 --> 00:29:31,980
read and these are kind of blended

817
00:29:31,980 --> 00:29:33,990
together with an overlay file system in

818
00:29:33,990 --> 00:29:36,590
this case mini flow newer versions of

819
00:29:36,590 --> 00:29:40,350
Wiimote use overlay FS but they still

820
00:29:40,350 --> 00:29:41,550
use some more semantics where they have

821
00:29:41,550 --> 00:29:43,610
a dynamic portion of the static portion

822
00:29:43,610 --> 00:29:49,200
so what we did then was we read the

823
00:29:49,200 --> 00:29:50,940
squash FS off the device we valid in

824
00:29:50,940 --> 00:29:53,280
that's the same one from our firmware

825
00:29:53,280 --> 00:29:55,650
update image just so you know we had

826
00:29:55,650 --> 00:29:57,990
some some backtracking there it was

827
00:29:57,990 --> 00:30:00,030
exactly the same we pulled that the Etsy

828
00:30:00,030 --> 00:30:02,850
password killed the hash and then

829
00:30:02,850 --> 00:30:05,850
mounted up that jmf has to block on our

830
00:30:05,850 --> 00:30:09,360
our hosts development machine you can't

831
00:30:09,360 --> 00:30:11,070
just use a regular block device for that

832
00:30:11,070 --> 00:30:13,650
because jf FS 2 expects a memory

833
00:30:13,650 --> 00:30:15,690
technology device and MTD underneath of

834
00:30:15,690 --> 00:30:17,460
it but there are ways to emulate that

835
00:30:17,460 --> 00:30:19,440
with Linux and so you can look in our

836
00:30:19,440 --> 00:30:20,810
source code for how to do that

837
00:30:20,810 --> 00:30:22,850
so we melted that up copied in the new

838
00:30:22,850 --> 00:30:25,310
Etsy password file unmounted it

839
00:30:25,310 --> 00:30:27,200
generated the patch which was just a

840
00:30:27,200 --> 00:30:30,020
binary diff between the original jmf s2

841
00:30:30,020 --> 00:30:32,600
chunk and the modified one and then we

842
00:30:32,600 --> 00:30:34,370
shifted that patch up to the device and

843
00:30:34,370 --> 00:30:37,700
flashed it using our application you can

844
00:30:37,700 --> 00:30:39,440
see that process here at the top we we

845
00:30:39,440 --> 00:30:42,230
load our program we load the patch we

846
00:30:42,230 --> 00:30:44,330
use the program to apply the patch and

847
00:30:44,330 --> 00:30:45,980
just an informative stuff in there we

848
00:30:45,980 --> 00:30:48,500
reboot the system snip out all the kind

849
00:30:48,500 --> 00:30:49,880
of boot bugs because they're kind of

850
00:30:49,880 --> 00:30:52,370
necessary type route and now we're in as

851
00:30:52,370 --> 00:30:56,300
we no password required so takeaways

852
00:30:56,300 --> 00:30:58,820
from this in a lot of cases people are

853
00:30:58,820 --> 00:31:00,890
trying to really lock down embedded

854
00:31:00,890 --> 00:31:03,710
systems they want to make things like

855
00:31:03,710 --> 00:31:05,420
mobile phones and very very secure so

856
00:31:05,420 --> 00:31:07,610
you can't poke around on them and muck

857
00:31:07,610 --> 00:31:09,020
about with them without having

858
00:31:09,020 --> 00:31:10,610
authorized firmware on them or

859
00:31:10,610 --> 00:31:12,950
decryption keys or whatever on these

860
00:31:12,950 --> 00:31:14,600
cheaper embedded systems that kind of

861
00:31:14,600 --> 00:31:16,790
stuff really isn't there

862
00:31:16,790 --> 00:31:18,320
they don't validate that what they're

863
00:31:18,320 --> 00:31:20,150
booting is something they're supposed to

864
00:31:20,150 --> 00:31:21,560
be booting they don't check to see if

865
00:31:21,560 --> 00:31:22,940
you've changed anything in ways that

866
00:31:22,940 --> 00:31:25,010
they might not want you to change it so

867
00:31:25,010 --> 00:31:26,870
kind of physical access in this case did

868
00:31:26,870 --> 00:31:28,490
equal root access and that's probably

869
00:31:28,490 --> 00:31:29,780
the case on a lot of these cheaper

870
00:31:29,780 --> 00:31:32,030
embedded systems engineers don't like

871
00:31:32,030 --> 00:31:34,070
removing their test points and all from

872
00:31:34,070 --> 00:31:36,350
from a PCB in production because that

873
00:31:36,350 --> 00:31:37,910
means that you have to make a new PCB

874
00:31:37,910 --> 00:31:39,530
and test it so they'll kind of just

875
00:31:39,530 --> 00:31:40,970
leave those ports on there and just not

876
00:31:40,970 --> 00:31:43,070
populate them so things like that are on

877
00:31:43,070 --> 00:31:45,920
these devices all the time and that that

878
00:31:45,920 --> 00:31:48,110
opened that overlay thing that I did to

879
00:31:48,110 --> 00:31:50,240
add the Etsy password then like I said

880
00:31:50,240 --> 00:31:52,460
the overlay kind of mechanism is used in

881
00:31:52,460 --> 00:31:54,980
open wrt and all the other Belkin

882
00:31:54,980 --> 00:31:57,050
devices so anything that's derived from

883
00:31:57,050 --> 00:31:59,390
open wrt is likely to use that sort of

884
00:31:59,390 --> 00:32:01,820
dynamic static filesystem mechanism and

885
00:32:01,820 --> 00:32:04,190
you should be able to modify it in a

886
00:32:04,190 --> 00:32:12,440
similar fashion okay so what we now see

887
00:32:12,440 --> 00:32:13,760
as we've seen two different ways to

888
00:32:13,760 --> 00:32:16,760
route a Wemo device before motely

889
00:32:16,760 --> 00:32:18,800
i and locally right but we have to

890
00:32:18,800 --> 00:32:20,330
remember that they attack servers of any

891
00:32:20,330 --> 00:32:21,980
IOT devices more than that right it's

892
00:32:21,980 --> 00:32:23,630
not just the device oftentimes you see

893
00:32:23,630 --> 00:32:25,460
especially online on blogs people like

894
00:32:25,460 --> 00:32:27,140
oh I got into this device that's great

895
00:32:27,140 --> 00:32:29,810
now but there's more than that there's

896
00:32:29,810 --> 00:32:31,880
the cloud that people have to connect

897
00:32:31,880 --> 00:32:32,960
and that's that's a whole idea of the

898
00:32:32,960 --> 00:32:34,470
IOT part and

899
00:32:34,470 --> 00:32:38,730
the eye part of IOT in this case Belkin

900
00:32:38,730 --> 00:32:40,650
expressly prohibits independent security

901
00:32:40,650 --> 00:32:42,539
researchers from from testing their

902
00:32:42,539 --> 00:32:44,039
cloud infrastructure can kinda

903
00:32:44,039 --> 00:32:45,750
understand why right this shared

904
00:32:45,750 --> 00:32:47,360
resource don't want to take that down

905
00:32:47,360 --> 00:32:49,200
but the other thing we do have in our

906
00:32:49,200 --> 00:32:50,429
possession that we can work with is a

907
00:32:50,429 --> 00:32:55,080
smartphone app so we Mo's Android app in

908
00:32:55,080 --> 00:32:57,419
particular is built with a

909
00:32:57,419 --> 00:32:59,010
cross-platform mobile development

910
00:32:59,010 --> 00:33:00,809
framework called Cordova from the Apache

911
00:33:00,809 --> 00:33:03,510
foundation if I show the idea of this is

912
00:33:03,510 --> 00:33:05,159
that you can create your interface in

913
00:33:05,159 --> 00:33:07,860
html5 and CSS and that obviously that

914
00:33:07,860 --> 00:33:10,559
can work on any mobile platform and then

915
00:33:10,559 --> 00:33:12,120
they have this JavaScript bridge that

916
00:33:12,120 --> 00:33:15,120
allows that interface to talk to or the

917
00:33:15,120 --> 00:33:16,500
other code and the native code to talk

918
00:33:16,500 --> 00:33:18,299
to the interface native code in this

919
00:33:18,299 --> 00:33:20,610
case would be obviously Java on on

920
00:33:20,610 --> 00:33:22,470
Android and then it would be objective-c

921
00:33:22,470 --> 00:33:26,340
or Swift on iOS devices also interesting

922
00:33:26,340 --> 00:33:28,169
with this is that if you just take the

923
00:33:28,169 --> 00:33:31,289
default project with Cordova and compile

924
00:33:31,289 --> 00:33:33,870
it compile it up you get these default

925
00:33:33,870 --> 00:33:35,280
permissions you get access to the camera

926
00:33:35,280 --> 00:33:38,880
contacts location the phone and any sort

927
00:33:38,880 --> 00:33:40,409
of shared storage on the device like an

928
00:33:40,409 --> 00:33:43,650
SD card and in fact the Wii in the Wemo

929
00:33:43,650 --> 00:33:45,330
case they have these permissions as well

930
00:33:45,330 --> 00:33:48,390
so we started looking at this one of the

931
00:33:48,390 --> 00:33:49,230
interesting pieces of functionality

932
00:33:49,230 --> 00:33:50,850
that's provided by the app is the

933
00:33:50,850 --> 00:33:52,830
ability to change the what they call the

934
00:33:52,830 --> 00:33:54,990
friendly name the name that shows up on

935
00:33:54,990 --> 00:33:56,820
the device excuse me on the app for all

936
00:33:56,820 --> 00:33:58,830
your devices this makes a lot of sense

937
00:33:58,830 --> 00:34:00,510
saved by five switches right and you

938
00:34:00,510 --> 00:34:01,860
want to plug different lamps into them

939
00:34:01,860 --> 00:34:03,030
in different parts of your home living

940
00:34:03,030 --> 00:34:05,130
room kitchen bedroom they all come with

941
00:34:05,130 --> 00:34:06,840
the name we most switch you obviously

942
00:34:06,840 --> 00:34:08,310
want to change that to something more

943
00:34:08,310 --> 00:34:11,190
relevant like kitchen lamp or bedroom

944
00:34:11,190 --> 00:34:13,800
lamp or whatever so you sent you use the

945
00:34:13,800 --> 00:34:15,780
UPP endpoint control basic event one and

946
00:34:15,780 --> 00:34:17,339
you send a message it looks like this

947
00:34:17,339 --> 00:34:19,469
with the friendly name changes unlike my

948
00:34:19,469 --> 00:34:21,210
switch what that'll end up doing is

949
00:34:21,210 --> 00:34:22,440
actually rewriting that device

950
00:34:22,440 --> 00:34:24,389
description file that's what you see in

951
00:34:24,389 --> 00:34:25,918
the bottom and sending that back to the

952
00:34:25,918 --> 00:34:29,070
phone with the change name the modified

953
00:34:29,070 --> 00:34:31,349
name now under the hood here's what's

954
00:34:31,349 --> 00:34:34,409
happening there in one of the Java

955
00:34:34,409 --> 00:34:37,589
classes that that Belkin wrote you can

956
00:34:37,589 --> 00:34:39,089
see here these two lines of code the

957
00:34:39,089 --> 00:34:41,339
first one just gets all the information

958
00:34:41,339 --> 00:34:42,810
that it knows about from the device

959
00:34:42,810 --> 00:34:44,040
right that I got from that device

960
00:34:44,040 --> 00:34:46,770
description file it then uses that it

961
00:34:46,770 --> 00:34:48,389
runs calls a two string method

962
00:34:48,389 --> 00:34:51,000
that to create this javascript string

963
00:34:51,000 --> 00:34:52,230
that's then going to send to the

964
00:34:52,230 --> 00:34:53,819
interface right so actually as you can

965
00:34:53,819 --> 00:34:55,469
see a very simple string concatenation

966
00:34:55,469 --> 00:34:58,170
to make that JavaScript string in

967
00:34:58,170 --> 00:34:59,549
particularly rich in what's what happens

968
00:34:59,549 --> 00:35:01,079
in that to string function and it turns

969
00:35:01,079 --> 00:35:02,490
out all that to string function does is

970
00:35:02,490 --> 00:35:04,049
concatenate together all the information

971
00:35:04,049 --> 00:35:06,150
knows about the device and one giant

972
00:35:06,150 --> 00:35:07,829
string to include as you see on the

973
00:35:07,829 --> 00:35:10,170
right the friendly name and result is

974
00:35:10,170 --> 00:35:12,990
they have this javascript string that is

975
00:35:12,990 --> 00:35:15,089
sent to the interface that looks like

976
00:35:15,089 --> 00:35:16,680
this and whatever we typed in as our

977
00:35:16,680 --> 00:35:19,559
name shows up there then that effect on

978
00:35:19,559 --> 00:35:21,150
the device itself is the device actually

979
00:35:21,150 --> 00:35:23,130
parses this JSON file that's to create

980
00:35:23,130 --> 00:35:25,200
gets created by all that stuff and as

981
00:35:25,200 --> 00:35:26,190
you see on the left there the friendly

982
00:35:26,190 --> 00:35:27,510
name is highlighted it's my switch and

983
00:35:27,510 --> 00:35:29,160
then you see my switch in the app right

984
00:35:29,160 --> 00:35:30,990
so we had an interesting thought like

985
00:35:30,990 --> 00:35:32,849
well what if that name wasn't quite as

986
00:35:32,849 --> 00:35:36,480
friendly it was a lot less friendly hmm

987
00:35:36,480 --> 00:35:38,190
so we put in what you do normally when

988
00:35:38,190 --> 00:35:39,720
you're testing a web app right we put in

989
00:35:39,720 --> 00:35:41,400
some some default cross-site scripting

990
00:35:41,400 --> 00:35:44,700
type stuff in particular we you know did

991
00:35:44,700 --> 00:35:46,980
the alert pwned message send that to

992
00:35:46,980 --> 00:35:49,619
device and much to our surprise it

993
00:35:49,619 --> 00:35:51,180
echoed the same thing back to us in the

994
00:35:51,180 --> 00:35:52,440
device description file the difference

995
00:35:52,440 --> 00:35:54,329
here is this HTML escaped right that's

996
00:35:54,329 --> 00:35:57,690
which is fine the Apple auto unescape

997
00:35:57,690 --> 00:35:59,700
that stuff but interestingly there was

998
00:35:59,700 --> 00:36:01,890
no sanitization that took place now if

999
00:36:01,890 --> 00:36:04,079
you tried to do the same thing on the

1000
00:36:04,079 --> 00:36:05,130
app if you tried to because obviously

1001
00:36:05,130 --> 00:36:06,599
there's an interface to change the

1002
00:36:06,599 --> 00:36:08,279
friendly name on the app it'll give you

1003
00:36:08,279 --> 00:36:09,990
two errors one it'll tell you that can

1004
00:36:09,990 --> 00:36:12,089
only be 30 characters long and two it'll

1005
00:36:12,089 --> 00:36:14,190
tell you that most of the characters

1006
00:36:14,190 --> 00:36:16,170
that I've typed in here are invalid you

1007
00:36:16,170 --> 00:36:17,670
do not get that error when you do this

1008
00:36:17,670 --> 00:36:19,650
by sending it a message directly to the

1009
00:36:19,650 --> 00:36:21,299
device it's probably also important to

1010
00:36:21,299 --> 00:36:23,069
note here at this point I didn't mention

1011
00:36:23,069 --> 00:36:24,150
it earlier we're talking about you can

1012
00:36:24,150 --> 00:36:26,160
pee all the communication with Wemo

1013
00:36:26,160 --> 00:36:27,930
devices are unencrypted and

1014
00:36:27,930 --> 00:36:29,730
unauthenticated when you're on that

1015
00:36:29,730 --> 00:36:31,529
local network right and that's something

1016
00:36:31,529 --> 00:36:32,400
that I showed we've seen some news

1017
00:36:32,400 --> 00:36:34,400
articles that kind of get that one wrong

1018
00:36:34,400 --> 00:36:36,839
so we can it's very easy for us to send

1019
00:36:36,839 --> 00:36:38,630
this message now what happens

1020
00:36:38,630 --> 00:36:41,430
fun enough as we get our standard alert

1021
00:36:41,430 --> 00:36:42,990
box that pops up and says oh okay that

1022
00:36:42,990 --> 00:36:45,089
ran if you look on the on the left here

1023
00:36:45,089 --> 00:36:46,529
I've kind of dissected well I'm the

1024
00:36:46,529 --> 00:36:47,970
string that we put in the militia string

1025
00:36:47,970 --> 00:36:49,440
and it's very much similar to the sequel

1026
00:36:49,440 --> 00:36:51,720
injection case right we close that

1027
00:36:51,720 --> 00:36:55,049
friendly name field then we close the

1028
00:36:55,049 --> 00:36:57,869
JSON the entire JSON message then we

1029
00:36:57,869 --> 00:37:00,809
close the current JavaScript statement

1030
00:37:00,809 --> 00:37:02,340
run ours in

1031
00:37:02,340 --> 00:37:03,960
stack statements one of them being our

1032
00:37:03,960 --> 00:37:06,030
alert box the other one being the

1033
00:37:06,030 --> 00:37:08,580
console.log message the reason we use

1034
00:37:08,580 --> 00:37:10,410
the console that log it's like the - -

1035
00:37:10,410 --> 00:37:12,390
in the CBI case effectively comments

1036
00:37:12,390 --> 00:37:13,650
everything else out it turns out if you

1037
00:37:13,650 --> 00:37:15,750
put the slash slash in there stuff

1038
00:37:15,750 --> 00:37:17,100
breaks so we had to come up with another

1039
00:37:17,100 --> 00:37:18,450
way and that's just what we came up with

1040
00:37:18,450 --> 00:37:20,280
Oh

1041
00:37:20,280 --> 00:37:23,190
the other thing to note is mmm we ended

1042
00:37:23,190 --> 00:37:24,420
the friendly name we didn't put a name

1043
00:37:24,420 --> 00:37:26,520
in there because we wanted to actually

1044
00:37:26,520 --> 00:37:28,200
see the effect if the alert box didn't

1045
00:37:28,200 --> 00:37:29,220
pop up we still want to know the

1046
00:37:29,220 --> 00:37:31,230
injection took place if you had put a

1047
00:37:31,230 --> 00:37:33,270
name in there and not put something that

1048
00:37:33,270 --> 00:37:34,860
popped up on the screen the user would

1049
00:37:34,860 --> 00:37:36,840
not know that anything changed right

1050
00:37:36,840 --> 00:37:37,920
they would just still see the friendly

1051
00:37:37,920 --> 00:37:39,210
name and the code or on the background

1052
00:37:39,210 --> 00:37:39,660
they wouldn't

1053
00:37:39,660 --> 00:37:41,640
there'd be no visible cue that we had

1054
00:37:41,640 --> 00:37:44,160
done anything which brings us to our

1055
00:37:44,160 --> 00:37:51,960
second demo ok we recorded this one

1056
00:37:51,960 --> 00:37:52,950
because there's a couple of things going

1057
00:37:52,950 --> 00:37:54,690
on and the left you see we have the

1058
00:37:54,690 --> 00:37:58,080
phone up the app up on the top screen on

1059
00:37:58,080 --> 00:38:00,060
the right there you're gonna see how our

1060
00:38:00,060 --> 00:38:02,010
actual attack on this and I've

1061
00:38:02,010 --> 00:38:03,720
enumerated the commander's chin see it's

1062
00:38:03,720 --> 00:38:05,130
very simple we're just running a script

1063
00:38:05,130 --> 00:38:06,330
and probably get to neck cut to get on

1064
00:38:06,330 --> 00:38:08,820
the device ok what you see there is the

1065
00:38:08,820 --> 00:38:10,320
result that echoes back while we put in

1066
00:38:10,320 --> 00:38:11,820
you can see we put in a whole bunch of

1067
00:38:11,820 --> 00:38:13,320
JavaScript this time particularly you

1068
00:38:13,320 --> 00:38:16,110
can see a URL callback now when we

1069
00:38:16,110 --> 00:38:18,090
refresh the device you'll see it pull

1070
00:38:18,090 --> 00:38:19,380
down what our JavaScript did that we

1071
00:38:19,380 --> 00:38:21,060
inject is actually we just asked it to

1072
00:38:21,060 --> 00:38:23,310
pull down another file pone right which

1073
00:38:23,310 --> 00:38:25,740
is a giant javascript file that contains

1074
00:38:25,740 --> 00:38:27,450
two pieces of functionality use that

1075
00:38:27,450 --> 00:38:29,850
happen there so the initial inject just

1076
00:38:29,850 --> 00:38:32,370
pulled down that file what that file

1077
00:38:32,370 --> 00:38:34,650
does is two things the first thing it

1078
00:38:34,650 --> 00:38:36,780
does is it reads all the pictures from

1079
00:38:36,780 --> 00:38:37,920
your camera any picture you've taken

1080
00:38:37,920 --> 00:38:39,660
with the camera and it downloads them to

1081
00:38:39,660 --> 00:38:41,670
us you just saw that show up in the

1082
00:38:41,670 --> 00:38:43,200
bottom half of the screen there and then

1083
00:38:43,200 --> 00:38:44,340
we're gonna we're going to show you now

1084
00:38:44,340 --> 00:38:45,660
that that in fact is a picture that

1085
00:38:45,660 --> 00:38:50,550
downloaded and it's a wonderful picture

1086
00:38:50,550 --> 00:38:53,460
of our hardware guy he didn't know I was

1087
00:38:53,460 --> 00:38:55,680
gonna take that picture by the way so

1088
00:38:55,680 --> 00:38:57,270
then as you see when I was going on and

1089
00:38:57,270 --> 00:38:58,260
she the second piece of functionality

1090
00:38:58,260 --> 00:39:00,600
happened if you look in the top screen

1091
00:39:00,600 --> 00:39:01,920
there it's actually beating back your

1092
00:39:01,920 --> 00:39:03,210
location there we go it shows up in the

1093
00:39:03,210 --> 00:39:04,650
bottom there as well so it's actually

1094
00:39:04,650 --> 00:39:06,330
doing your GPS location and sending it

1095
00:39:06,330 --> 00:39:08,940
back to us more interestingly as you see

1096
00:39:08,940 --> 00:39:11,100
in a moment when we hit the home button

1097
00:39:11,100 --> 00:39:12,930
on the Android device in the left pane

1098
00:39:12,930 --> 00:39:15,240
and we put the app into the background

1099
00:39:15,240 --> 00:39:17,160
we continue to get your location vegan

1100
00:39:17,160 --> 00:39:20,070
to us right so if you've switched and to

1101
00:39:20,070 --> 00:39:21,240
another app it'd be the same thing that

1102
00:39:21,240 --> 00:39:24,150
absalom the background so you turn off

1103
00:39:24,150 --> 00:39:26,220
your lights you hit the home button you

1104
00:39:26,220 --> 00:39:27,839
put in your pocket you go to the store

1105
00:39:27,839 --> 00:39:29,640
because your phone so connects to the

1106
00:39:29,640 --> 00:39:32,250
internet I still get the location where

1107
00:39:32,250 --> 00:39:33,660
you are I've just turned your phone in a

1108
00:39:33,660 --> 00:39:36,690
GPS tracker because you're IO T's app

1109
00:39:36,690 --> 00:39:39,950
was kind of insecure

1110
00:39:43,160 --> 00:39:46,410
okay so takeaways from that I mean first

1111
00:39:46,410 --> 00:39:49,710
and foremost this has nothing to do with

1112
00:39:49,710 --> 00:39:51,960
the previous two exploits right we did

1113
00:39:51,960 --> 00:39:53,400
not need a root to the device for this

1114
00:39:53,400 --> 00:39:55,500
we use the devices normal functionality

1115
00:39:55,500 --> 00:39:57,510
set the friendly name to set it to

1116
00:39:57,510 --> 00:39:59,670
something malicious okay you don't have

1117
00:39:59,670 --> 00:40:01,020
that root access device I think it's

1118
00:40:01,020 --> 00:40:03,210
really important to stress the second

1119
00:40:03,210 --> 00:40:04,920
thing is we want to talk about the

1120
00:40:04,920 --> 00:40:06,540
second and third order effects of IOT

1121
00:40:06,540 --> 00:40:07,740
that's what we're trying to call this

1122
00:40:07,740 --> 00:40:10,500
stuff so first order effect is I break

1123
00:40:10,500 --> 00:40:12,089
into a someone's devices where we focus

1124
00:40:12,089 --> 00:40:13,230
on and they put up on at there and it

1125
00:40:13,230 --> 00:40:15,510
DDoS as brian Krabs's website oh boy

1126
00:40:15,510 --> 00:40:17,550
that's terrible but these are the second

1127
00:40:17,550 --> 00:40:19,589
third order effects right why is it the

1128
00:40:19,589 --> 00:40:22,050
case that if I if I can do something to

1129
00:40:22,050 --> 00:40:23,970
your device I can turn your phone into a

1130
00:40:23,970 --> 00:40:26,609
GPS tracker right why is it the case

1131
00:40:26,609 --> 00:40:28,140
that an IOT device like a crock pot

1132
00:40:28,140 --> 00:40:30,619
could make this stuff less secure right

1133
00:40:30,619 --> 00:40:32,609
well I think of this particularly

1134
00:40:32,609 --> 00:40:34,080
interesting case where imagine I was

1135
00:40:34,080 --> 00:40:35,940
some bad guy and I had done this to your

1136
00:40:35,940 --> 00:40:38,099
device and I started downloading all the

1137
00:40:38,099 --> 00:40:39,660
pictures and I found that there was some

1138
00:40:39,660 --> 00:40:42,030
some pictures of you maybe cheating on

1139
00:40:42,030 --> 00:40:43,770
your spouse and that was bad guy oh this

1140
00:40:43,770 --> 00:40:45,240
is great this is great blackmail stuff

1141
00:40:45,240 --> 00:40:47,130
and I go back i blackmailing you got to

1142
00:40:47,130 --> 00:40:48,089
pay me all this money it's this

1143
00:40:48,089 --> 00:40:50,730
ridiculous scenario right all because

1144
00:40:50,730 --> 00:40:52,710
you wanted to have a crock-pot that

1145
00:40:52,710 --> 00:40:54,599
could connect to the internet right it

1146
00:40:54,599 --> 00:40:56,130
seems a little ridiculous right that we

1147
00:40:56,130 --> 00:40:57,420
now have to kind of put on the same

1148
00:40:57,420 --> 00:41:00,720
scale you know way the security of your

1149
00:41:00,720 --> 00:41:02,880
phone with having an Internet connected

1150
00:41:02,880 --> 00:41:04,320
crock-pot that doesn't seem like it

1151
00:41:04,320 --> 00:41:06,119
should be on the same scale we also

1152
00:41:06,119 --> 00:41:08,160
think that as time goes on and this

1153
00:41:08,160 --> 00:41:09,420
stuff gets more prolific you're gonna

1154
00:41:09,420 --> 00:41:10,859
see more and more the second and third

1155
00:41:10,859 --> 00:41:12,420
order effects this is just one and it's

1156
00:41:12,420 --> 00:41:14,190
the first instance that we know of that

1157
00:41:14,190 --> 00:41:15,720
many ways use an IOT device to kind of

1158
00:41:15,720 --> 00:41:17,130
hack into your phone and run arbitrary

1159
00:41:17,130 --> 00:41:22,050
code okay so disclosure timeline like

1160
00:41:22,050 --> 00:41:24,720
any good security researcher we disclose

1161
00:41:24,720 --> 00:41:26,760
these things to Belkin initial

1162
00:41:26,760 --> 00:41:28,059
disclosure happen

1163
00:41:28,059 --> 00:41:30,579
eleven they verified them same day I

1164
00:41:30,579 --> 00:41:31,749
think this is important one a stress

1165
00:41:31,749 --> 00:41:32,949
that you know one of the reasons we do

1166
00:41:32,949 --> 00:41:34,150
this is we also want to make their

1167
00:41:34,150 --> 00:41:35,319
products better right we want to have a

1168
00:41:35,319 --> 00:41:37,150
good relationship with vendors as good

1169
00:41:37,150 --> 00:41:38,319
security professionals we should be

1170
00:41:38,319 --> 00:41:40,539
doing that so the same day within an

1171
00:41:40,539 --> 00:41:42,009
hour they actually got back to us and

1172
00:41:42,009 --> 00:41:43,959
verified that all of our vulnerabilities

1173
00:41:43,959 --> 00:41:45,549
work on newer versions of software than

1174
00:41:45,549 --> 00:41:47,189
we had that's great

1175
00:41:47,189 --> 00:41:48,939
couple weeks later they actually came

1176
00:41:48,939 --> 00:41:51,699
out with the fix to the the app and on

1177
00:41:51,699 --> 00:41:52,749
the Play Store and gave us a nice little

1178
00:41:52,749 --> 00:41:56,319
credit there and then they finally

1179
00:41:56,319 --> 00:41:57,699
figured out how to ever want to fix the

1180
00:41:57,699 --> 00:41:59,499
sequel injection vulnerability a few few

1181
00:41:59,499 --> 00:42:01,239
weeks later and then just this week they

1182
00:42:01,239 --> 00:42:02,859
finally released the firmware update so

1183
00:42:02,859 --> 00:42:06,670
go and update your firmware mm-hmm so

1184
00:42:06,670 --> 00:42:08,079
last thing I want to note that all of

1185
00:42:08,079 --> 00:42:09,910
the code for how we did all this stuff

1186
00:42:09,910 --> 00:42:12,219
we're gonna release online it's not up

1187
00:42:12,219 --> 00:42:15,069
now but it will be also on our blog in

1188
00:42:15,069 --> 00:42:17,499
minseo labs comm we're gonna take these

1189
00:42:17,499 --> 00:42:18,699
are the three things we talked about

1190
00:42:18,699 --> 00:42:21,759
today and we will have blog articles up

1191
00:42:21,759 --> 00:42:24,910
there for them for the sequel Lite is a

1192
00:42:24,910 --> 00:42:26,349
shell script stuff that's also going to

1193
00:42:26,349 --> 00:42:27,789
be a separate blog because again we hope

1194
00:42:27,789 --> 00:42:28,930
that's something that the community can

1195
00:42:28,930 --> 00:42:32,199
reuse and if you have an IOT device

1196
00:42:32,199 --> 00:42:33,759
you're thinking of creating one and you

1197
00:42:33,759 --> 00:42:35,229
haven't talked to us or somebody like us

1198
00:42:35,229 --> 00:42:36,519
we think that's probably a good idea

1199
00:42:36,519 --> 00:42:38,259
that you do that because nobody wants

1200
00:42:38,259 --> 00:42:40,839
their device on this slide and with that

1201
00:42:40,839 --> 00:42:42,189
thank you for coming and we'll take any

1202
00:42:42,189 --> 00:42:44,699
questions you might have

1203
00:42:55,199 --> 00:43:09,279
no nobody for Belkin so the question was

1204
00:43:09,279 --> 00:43:11,349
how bad is it or how good is it for

1205
00:43:11,349 --> 00:43:12,819
Belkin in particular assume you're

1206
00:43:12,819 --> 00:43:16,539
asking oh so I think yeah

1207
00:43:16,539 --> 00:43:19,269
Belkin is probably better than a lot of

1208
00:43:19,269 --> 00:43:20,769
folks I mean as you saw from the

1209
00:43:20,769 --> 00:43:21,880
headlines at the beginning that had some

1210
00:43:21,880 --> 00:43:23,170
issues in the past they've done a lot to

1211
00:43:23,170 --> 00:43:25,359
try and fix those a lot of that low

1212
00:43:25,359 --> 00:43:27,069
hanging fruit stuff like those those

1213
00:43:27,069 --> 00:43:29,259
command injections with you know xml

1214
00:43:29,259 --> 00:43:30,400
elements weren't there

1215
00:43:30,400 --> 00:43:32,229
we actually had to work with this one

1216
00:43:32,229 --> 00:43:33,249
you saw this is a multi-step process

1217
00:43:33,249 --> 00:43:35,019
even though there was a signal injection

1218
00:43:35,019 --> 00:43:36,849
it took a lot more to get it to run as

1219
00:43:36,849 --> 00:43:38,349
joe told you they actually did a pretty

1220
00:43:38,349 --> 00:43:39,749
good job on the hardware side of things

1221
00:43:39,749 --> 00:43:41,600
you know there was a

1222
00:43:41,600 --> 00:43:43,790
where wasn't easily cracked they'd taken

1223
00:43:43,790 --> 00:43:44,960
a whole bunch of functionality out of

1224
00:43:44,960 --> 00:43:47,660
the bootloader yeah they left some test

1225
00:43:47,660 --> 00:43:49,550
points on and whatnot but but generally

1226
00:43:49,550 --> 00:43:50,690
I think that's probably better than the

1227
00:43:50,690 --> 00:43:52,670
average case IOT product and again

1228
00:43:52,670 --> 00:43:53,900
that's one of the reasons we did this is

1229
00:43:53,900 --> 00:43:55,670
that we didn't want to just say hey look

1230
00:43:55,670 --> 00:43:58,100
we found something you know on a trip

1231
00:43:58,100 --> 00:43:59,720
and bought it at the airport and turns

1232
00:43:59,720 --> 00:44:01,250
out that you know we can break into this

1233
00:44:01,250 --> 00:44:02,330
thing you know that seems kind of

1234
00:44:02,330 --> 00:44:03,650
obvious right I want to take somebody

1235
00:44:03,650 --> 00:44:04,850
that really cares about this stuff is

1236
00:44:04,850 --> 00:44:06,020
the main brand and consumer electronics

1237
00:44:06,020 --> 00:44:08,420
and we did find like at least another

1238
00:44:08,420 --> 00:44:11,090
device where on the user accessible GUI

1239
00:44:11,090 --> 00:44:12,950
thing on like a screen you could type

1240
00:44:12,950 --> 00:44:14,060
something in and that would do one of

1241
00:44:14,060 --> 00:44:15,980
those backtick type command executions

1242
00:44:15,980 --> 00:44:18,440
and and route the device so there are

1243
00:44:18,440 --> 00:44:20,120
there are that kind of glow hanging

1244
00:44:20,120 --> 00:44:24,190
fruit still in other production devices

1245
00:44:41,290 --> 00:44:43,640
so the question was what about IOT

1246
00:44:43,640 --> 00:44:45,020
devices that don't use Linux based

1247
00:44:45,020 --> 00:44:47,060
systems most of the ones we've looked at

1248
00:44:47,060 --> 00:44:49,970
do use some low space systems in fact

1249
00:44:49,970 --> 00:44:51,110
most some ones that I've even seen in

1250
00:44:51,110 --> 00:44:52,970
other conference presentations do use a

1251
00:44:52,970 --> 00:44:54,740
little space systems so I can't actually

1252
00:44:54,740 --> 00:44:56,540
talk about experience we've had with non

1253
00:44:56,540 --> 00:45:02,380
Linux based ones yes

1254
00:45:15,700 --> 00:45:19,460
so the hardware attacking me yeah okay

1255
00:45:19,460 --> 00:45:20,660
so the question was sorry let me repeat

1256
00:45:20,660 --> 00:45:21,920
it they don't seem to be checking their

1257
00:45:21,920 --> 00:45:23,839
firmware updates so would the signatures

1258
00:45:23,839 --> 00:45:26,300
on them so would our firmware attack

1259
00:45:26,300 --> 00:45:26,780
still work

1260
00:45:26,780 --> 00:45:28,010
one thing I'll note is they're in a

1261
00:45:28,010 --> 00:45:29,210
firmware update process we've looked

1262
00:45:29,210 --> 00:45:30,230
into it they actually are doing

1263
00:45:30,230 --> 00:45:32,390
signature checks when they download

1264
00:45:32,390 --> 00:45:34,280
stuff it's not encrypted but it is

1265
00:45:34,280 --> 00:45:35,599
signed so they will do that check and

1266
00:45:35,599 --> 00:45:37,250
not update if you don't have the correct

1267
00:45:37,250 --> 00:45:38,569
signature but let you talk about whether

1268
00:45:38,569 --> 00:45:39,619
it should still work on the hardware

1269
00:45:39,619 --> 00:45:41,119
side of things the hardware stuff

1270
00:45:41,119 --> 00:45:43,760
utilizes the bootloader and their update

1271
00:45:43,760 --> 00:45:45,559
process doesn't appear to modify the

1272
00:45:45,559 --> 00:45:47,420
bootloader at all so we should be able

1273
00:45:47,420 --> 00:45:49,849
to still get our local root and newer

1274
00:45:49,849 --> 00:45:51,380
versions of firmware unless they modify

1275
00:45:51,380 --> 00:45:53,240
the boot whether they're normal firmware

1276
00:45:53,240 --> 00:45:54,950
updates kind of an a/b process make it

1277
00:45:54,950 --> 00:45:57,170
safe you're running in B and then they

1278
00:45:57,170 --> 00:45:58,579
change a and then the bootloader

1279
00:45:58,579 --> 00:46:00,349
validates the a got done correctly and

1280
00:46:00,349 --> 00:46:02,540
then it switches to a but there's no

1281
00:46:02,540 --> 00:46:03,980
alternate place to put the boot weather

1282
00:46:03,980 --> 00:46:05,900
so if they were to you know if you were

1283
00:46:05,900 --> 00:46:07,280
the unplug it in the middle you brick

1284
00:46:07,280 --> 00:46:09,619
your device so they're probably gonna be

1285
00:46:09,619 --> 00:46:11,300
less likely to modify the bootloader

1286
00:46:11,300 --> 00:46:23,180
ever in an update so the question is

1287
00:46:23,180 --> 00:46:24,799
with the hardware attack we only read

1288
00:46:24,799 --> 00:46:26,930
with our own device and not anyone's

1289
00:46:26,930 --> 00:46:29,630
remotely on the cloud that's correct and

1290
00:46:29,630 --> 00:46:30,920
that was the intent we wanted to get

1291
00:46:30,920 --> 00:46:33,559
more introspection into our device so

1292
00:46:33,559 --> 00:46:35,720
that we could make a better remote

1293
00:46:35,720 --> 00:46:37,579
exploit make it more reliable or even

1294
00:46:37,579 --> 00:46:39,170
you know Scott actually figured it out

1295
00:46:39,170 --> 00:46:41,510
before I got the the local root but if

1296
00:46:41,510 --> 00:46:43,339
he hadn't then we could have used that

1297
00:46:43,339 --> 00:46:45,410
to try to help us see what we were doing

1298
00:46:45,410 --> 00:46:48,109
wrong yeah I mean so I think in that

1299
00:46:48,109 --> 00:46:49,609
case the hardware thing just became one

1300
00:46:49,609 --> 00:46:51,589
of those issues where well wait we have

1301
00:46:51,589 --> 00:46:53,569
the device physically obviously we can

1302
00:46:53,569 --> 00:46:54,770
get a root shell on the device because

1303
00:46:54,770 --> 00:46:56,450
we have it and it became a little

1304
00:46:56,450 --> 00:46:58,579
difficult one Chung said okay now we're

1305
00:46:58,579 --> 00:46:59,359
gonna make this happen

1306
00:46:59,359 --> 00:47:08,720
right any other questions so it took

1307
00:47:08,720 --> 00:47:10,790
I'll be honest it took actually I mean

1308
00:47:10,790 --> 00:47:11,569
of course when we're doing this

1309
00:47:11,569 --> 00:47:12,890
full-time right sort of nights and

1310
00:47:12,890 --> 00:47:14,299
weekends kind of work but it probably

1311
00:47:14,299 --> 00:47:16,760
took us a good two months and the reason

1312
00:47:16,760 --> 00:47:18,230
is is because as I said the sequel

1313
00:47:18,230 --> 00:47:20,240
injection itself doesn't give you a

1314
00:47:20,240 --> 00:47:22,599
whole lot right so

1315
00:47:22,599 --> 00:47:25,089
someone asked me before how long did it

1316
00:47:25,089 --> 00:47:26,920
take me to figure out the whole sequel

1317
00:47:26,920 --> 00:47:28,509
light as a shell script thing and that

1318
00:47:28,509 --> 00:47:30,579
was actually 2 hours it wasn't actually

1319
00:47:30,579 --> 00:47:32,410
that hard once you figured out what the

1320
00:47:32,410 --> 00:47:34,539
ash shell was gonna do now but getting

1321
00:47:34,539 --> 00:47:36,039
to the point where you're like what else

1322
00:47:36,039 --> 00:47:38,890
can I use besides PHP right to try and

1323
00:47:38,890 --> 00:47:40,420
do the same type of thing and that was

1324
00:47:40,420 --> 00:47:42,009
just an idea that we had maybe we could

1325
00:47:42,009 --> 00:47:44,589
do that took a while so it did take

1326
00:47:44,589 --> 00:47:46,089
quite a bit of time to figure out a game

1327
00:47:46,089 --> 00:47:48,039
execution just from that that simple

1328
00:47:48,039 --> 00:47:50,349
that simple vulnerability also we looked

1329
00:47:50,349 --> 00:47:51,400
at some other things we thought might be

1330
00:47:51,400 --> 00:47:55,059
vulnerable in that time okay so we're

1331
00:47:55,059 --> 00:47:56,229
gonna ask for just one more question

1332
00:47:56,229 --> 00:47:57,460
because we're about to run that at a

1333
00:47:57,460 --> 00:48:00,369
time unless there were any more

1334
00:48:00,369 --> 00:48:02,890
questions all right well thank you very

1335
00:48:02,890 --> 00:48:05,038
much

