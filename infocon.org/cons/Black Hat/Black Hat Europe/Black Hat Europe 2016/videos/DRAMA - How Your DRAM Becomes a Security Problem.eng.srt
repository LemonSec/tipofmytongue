1
00:00:00,030 --> 00:00:03,060
okay thank you very much for coming

2
00:00:03,060 --> 00:00:05,670
this presentation is drama how your dear

3
00:00:05,670 --> 00:00:08,099
M becomes a security problem it's a

4
00:00:08,099 --> 00:00:09,599
particular pleasure for me to be here

5
00:00:09,599 --> 00:00:11,849
today with Michael Michael and I did

6
00:00:11,849 --> 00:00:13,469
concurrent research meaning that we're

7
00:00:13,469 --> 00:00:15,030
actually competitors rather than

8
00:00:15,030 --> 00:00:17,400
co-operators and it's a bit weird

9
00:00:17,400 --> 00:00:19,109
standing here so an old hacker type for

10
00:00:19,109 --> 00:00:20,640
lack of a better word and be here with a

11
00:00:20,640 --> 00:00:23,730
young academic like Michael but I think

12
00:00:23,730 --> 00:00:25,140
it's a great thing we have sufficient

13
00:00:25,140 --> 00:00:26,820
mutual respect for each other that we

14
00:00:26,820 --> 00:00:29,010
can do this presentation together well

15
00:00:29,010 --> 00:00:30,720
anyways let's go on with the technical

16
00:00:30,720 --> 00:00:34,200
stuff this talk is about how leaks

17
00:00:34,200 --> 00:00:36,559
information across security boundaries

18
00:00:36,559 --> 00:00:39,510
what is not about is software it's often

19
00:00:39,510 --> 00:00:41,489
perceived that if we fix all the

20
00:00:41,489 --> 00:00:43,140
software box that we will have safe

21
00:00:43,140 --> 00:00:45,090
computing however if the underlying

22
00:00:45,090 --> 00:00:47,370
hardware is not inherited safe then we

23
00:00:47,370 --> 00:00:50,700
have an insecurity problem so we've

24
00:00:50,700 --> 00:00:53,010
found what we think is a design problem

25
00:00:53,010 --> 00:00:55,079
with DRM and we can use that as an

26
00:00:55,079 --> 00:00:58,590
attack vector the work design is chosen

27
00:00:58,590 --> 00:01:01,230
with intent here it's not a bug it's not

28
00:01:01,230 --> 00:01:02,219
like row hammer where you have a

29
00:01:02,219 --> 00:01:04,739
reliability problem in the production of

30
00:01:04,739 --> 00:01:07,350
DRAM it is very much to the way that DRM

31
00:01:07,350 --> 00:01:11,040
works instead so we will be focused on

32
00:01:11,040 --> 00:01:14,549
an intellect or the problem and we are

33
00:01:14,549 --> 00:01:17,100
to identify this in DRAM meaning that it

34
00:01:17,100 --> 00:01:19,020
applies to other platform as well so you

35
00:01:19,020 --> 00:01:21,060
should just keep that in mind going

36
00:01:21,060 --> 00:01:25,439
through this talk so the takeaways that

37
00:01:25,439 --> 00:01:26,729
we want you to have when you go is that

38
00:01:26,729 --> 00:01:29,909
DRM design is security relevant and

39
00:01:29,909 --> 00:01:32,090
specifically that DRM leaks information

40
00:01:32,090 --> 00:01:34,590
we can use this information to extract

41
00:01:34,590 --> 00:01:37,829
information cross VM across CPU we can

42
00:01:37,829 --> 00:01:41,009
spy another software and we can use the

43
00:01:41,009 --> 00:01:43,560
information that DRM leaks to enable

44
00:01:43,560 --> 00:01:44,970
efficient and targeted roll hammer

45
00:01:44,970 --> 00:01:49,079
attacks so we're gonna start right off

46
00:01:49,079 --> 00:01:53,009
with a demo and for the demo now we're

47
00:01:53,009 --> 00:01:55,500
gonna need a random number between 100

48
00:01:55,500 --> 00:01:57,240
and a thousand so if anybody who has a

49
00:01:57,240 --> 00:01:58,770
random number just scream it out

50
00:01:58,770 --> 00:02:01,020
otherwise take the last digits off your

51
00:02:01,020 --> 00:02:06,950
credit card anon shadow not nine one for

52
00:02:06,950 --> 00:02:11,090
sure to demo please yeah

53
00:02:11,090 --> 00:02:14,550
so what we can see here now is we have a

54
00:02:14,550 --> 00:02:16,890
virtual machine on the right side are

55
00:02:16,890 --> 00:02:19,440
running a normal Linux operating system

56
00:02:19,440 --> 00:02:22,110
with a shell in here and I can show you

57
00:02:22,110 --> 00:02:24,060
we don't have any access to the Internet

58
00:02:24,060 --> 00:02:26,100
we only have to duplicate apt and no

59
00:02:26,100 --> 00:02:28,710
internet connection on the left side we

60
00:02:28,710 --> 00:02:30,960
have Firefox running on our host system

61
00:02:30,960 --> 00:02:33,780
and that is of course connected to the

62
00:02:33,780 --> 00:02:36,450
Internet and our goal is to extract

63
00:02:36,450 --> 00:02:38,640
information from the virtual machine and

64
00:02:38,640 --> 00:02:40,770
send it to the browser so we can get it

65
00:02:40,770 --> 00:02:46,730
to the Internet and maturing i.docked

66
00:02:46,730 --> 00:02:49,709
javascript in the browser did some stuff

67
00:02:49,709 --> 00:02:53,640
and erm found vulnerabilities and then

68
00:02:53,640 --> 00:02:56,160
now I should be able I know I did the

69
00:02:56,160 --> 00:02:58,650
same in the virtual machine they have

70
00:02:58,650 --> 00:03:00,480
now a channel open and I should be able

71
00:03:00,480 --> 00:03:01,980
to get information out of the virtual

72
00:03:01,980 --> 00:03:04,650
machine to the browser so number was

73
00:03:04,650 --> 00:03:10,380
nine one four right so even submit and

74
00:03:10,380 --> 00:03:17,280
nine one it's not the fastest but it

75
00:03:17,280 --> 00:03:19,350
should be quite reliable and we can

76
00:03:19,350 --> 00:03:21,150
really see I type in the virtual machine

77
00:03:21,150 --> 00:03:24,209
and get the numbers out of the out of

78
00:03:24,209 --> 00:03:25,620
the virtual machine without any

79
00:03:25,620 --> 00:03:27,209
connection between the virtual machine

80
00:03:27,209 --> 00:03:30,480
and the host system on the outside and

81
00:03:30,480 --> 00:03:32,910
your credit card number or whatever it

82
00:03:32,910 --> 00:03:33,269
was

83
00:03:33,269 --> 00:03:36,239
you see Yui I don't know is now on the

84
00:03:36,239 --> 00:03:43,950
Internet good so switch back to the

85
00:03:43,950 --> 00:03:49,040
slides can we switch back to the slides

86
00:03:49,040 --> 00:03:51,640
yeah

87
00:03:51,640 --> 00:03:53,800
so what did you see here there were no

88
00:03:53,800 --> 00:03:56,140
software bugs we use zero software bugs

89
00:03:56,140 --> 00:03:59,020
for this demo and we had a real covered

90
00:03:59,020 --> 00:04:00,910
communication from the virtual machine

91
00:04:00,910 --> 00:04:03,730
to the Internet and we just had a

92
00:04:03,730 --> 00:04:05,410
JavaScript running on the host system no

93
00:04:05,410 --> 00:04:07,840
binary on the host system and this is

94
00:04:07,840 --> 00:04:10,480
magic and in the remaining talk we are

95
00:04:10,480 --> 00:04:12,250
going to present all the pack runs and

96
00:04:12,250 --> 00:04:14,830
what exactly we did here to make that

97
00:04:14,830 --> 00:04:19,720
work but first who are we my name is

98
00:04:19,720 --> 00:04:20,589
Maya Schwarz

99
00:04:20,589 --> 00:04:23,140
I'm a student a PhD student at Kass

100
00:04:23,140 --> 00:04:26,650
University of Technology you can find me

101
00:04:26,650 --> 00:04:28,419
on Twitter you can write me an email you

102
00:04:28,419 --> 00:04:30,790
can come to me afterwards so that we can

103
00:04:30,790 --> 00:04:32,290
if you have any questions want to talk

104
00:04:32,290 --> 00:04:36,550
and I'm part of a research team at cars

105
00:04:36,550 --> 00:04:39,310
University of Technology consisting of

106
00:04:39,310 --> 00:04:42,040
beta pestle Daniel calls comedian

107
00:04:42,040 --> 00:04:44,440
Maurice and Stefan mangas and together

108
00:04:44,440 --> 00:04:46,330
we did a lot of research and just erm

109
00:04:46,330 --> 00:04:49,330
stuff and also published paper for the

110
00:04:49,330 --> 00:04:51,760
first part of this all the backgrounds

111
00:04:51,760 --> 00:04:54,070
at the using security conference in

112
00:04:54,070 --> 00:04:57,040
August and this talk is then the

113
00:04:57,040 --> 00:04:59,290
extension of this paper with all the new

114
00:04:59,290 --> 00:05:04,030
cool features we have here so my name is

115
00:05:04,030 --> 00:05:05,770
anders fogh I'm a principal security

116
00:05:05,770 --> 00:05:07,900
researcher with GData advanced analytics

117
00:05:07,900 --> 00:05:10,750
and you can read reach me on Twitter and

118
00:05:10,750 --> 00:05:15,910
by email as well so usually we want to

119
00:05:15,910 --> 00:05:18,190
leak secrets there's nothing no nothing

120
00:05:18,190 --> 00:05:20,710
funny in leaking stuff that isn't secret

121
00:05:20,710 --> 00:05:22,960
and secrets are usually managed by

122
00:05:22,960 --> 00:05:26,500
software and computers so we need to

123
00:05:26,500 --> 00:05:28,810
find out how we go from software DRM and

124
00:05:28,810 --> 00:05:31,960
here our software is symbolized with a

125
00:05:31,960 --> 00:05:36,190
move instruction x86 instruction and DRM

126
00:05:36,190 --> 00:05:38,320
is symbolized by a capacitor if you're

127
00:05:38,320 --> 00:05:40,720
asking yourself why a capacitor well DRM

128
00:05:40,720 --> 00:05:43,870
stores data in capacitors there's a

129
00:05:43,870 --> 00:05:46,090
capacitor for each bit if the capacitor

130
00:05:46,090 --> 00:05:48,130
is charged the bit is 1 if it's

131
00:05:48,130 --> 00:05:50,740
discharged it's zero so we need to find

132
00:05:50,740 --> 00:05:52,300
out how we get from this mob instruction

133
00:05:52,300 --> 00:05:56,229
to these capacitors and the first thing

134
00:05:56,229 --> 00:05:58,540
that happens when we run this mob

135
00:05:58,540 --> 00:06:01,810
instruction is that we

136
00:06:01,810 --> 00:06:04,270
discovered that default 1.1 in the last

137
00:06:04,270 --> 00:06:05,860
slide is a virtual address of the

138
00:06:05,860 --> 00:06:08,200
current process however the CPU needs a

139
00:06:08,200 --> 00:06:10,080
physical address to talk to DRAM and

140
00:06:10,080 --> 00:06:11,980
consequently we need to do a bit of

141
00:06:11,980 --> 00:06:15,430
translation so why do we need to do

142
00:06:15,430 --> 00:06:17,530
translation well back in the late 80s

143
00:06:17,530 --> 00:06:18,310
early 90s

144
00:06:18,310 --> 00:06:20,230
indle decided it was a wonderful idea if

145
00:06:20,230 --> 00:06:22,060
we could run more than one process

146
00:06:22,060 --> 00:06:25,120
securely on a single CPU and the way

147
00:06:25,120 --> 00:06:26,830
they implemented this would was that

148
00:06:26,830 --> 00:06:28,660
they gave each application its own

149
00:06:28,660 --> 00:06:31,960
private virtual address space and then

150
00:06:31,960 --> 00:06:35,080
have a mapping for each process - from

151
00:06:35,080 --> 00:06:37,360
virtual memory to physical memory the

152
00:06:37,360 --> 00:06:39,100
exchange ability is that each process

153
00:06:39,100 --> 00:06:41,410
has its own that is when the operating

154
00:06:41,410 --> 00:06:43,090
system of kernel swaps process it will

155
00:06:43,090 --> 00:06:44,500
just swap the mapping and everything

156
00:06:44,500 --> 00:06:47,440
will work fine this also created creates

157
00:06:47,440 --> 00:06:48,729
a choke point where every memory

158
00:06:48,729 --> 00:06:50,770
instruction has to go through and this

159
00:06:50,770 --> 00:06:52,500
choke point can be used for checking

160
00:06:52,500 --> 00:06:54,669
privileges on memory access and this is

161
00:06:54,669 --> 00:06:57,010
what is happening the operating system

162
00:06:57,010 --> 00:07:00,090
usually takes care of these tables and

163
00:07:00,090 --> 00:07:02,650
if you have a hypervisor in your system

164
00:07:02,650 --> 00:07:04,419
it has a second go on new memory

165
00:07:04,419 --> 00:07:08,830
accesses what actually happens looks

166
00:07:08,830 --> 00:07:09,520
something like this

167
00:07:09,520 --> 00:07:11,979
in the upper left corner you have the

168
00:07:11,979 --> 00:07:14,860
cr3 register this is where the exchange

169
00:07:14,860 --> 00:07:17,110
ability comes in the operating systems

170
00:07:17,110 --> 00:07:19,570
uses differences to swap table every

171
00:07:19,570 --> 00:07:22,419
time it swaps the process down below you

172
00:07:22,419 --> 00:07:24,210
have the virtual address and you see the

173
00:07:24,210 --> 00:07:27,039
uppermost bits are going into this fall

174
00:07:27,039 --> 00:07:29,789
level translation table

175
00:07:29,789 --> 00:07:33,310
called the page tables only the upper

176
00:07:33,310 --> 00:07:34,720
bits are actually used to translate

177
00:07:34,720 --> 00:07:35,229
something

178
00:07:35,229 --> 00:07:37,060
so usually we translate to four

179
00:07:37,060 --> 00:07:39,370
kilobytes the rest of the bits are taken

180
00:07:39,370 --> 00:07:41,800
once too directly from the virtual

181
00:07:41,800 --> 00:07:43,090
address and added to the physical

182
00:07:43,090 --> 00:07:45,520
address so we're doing translation on a

183
00:07:45,520 --> 00:07:47,800
page level and pages are almost always

184
00:07:47,800 --> 00:07:49,690
four kilobyte large there are exceptions

185
00:07:49,690 --> 00:07:53,500
but almost always that is of course a

186
00:07:53,500 --> 00:07:55,870
bit quick for you me to summarize the

187
00:07:55,870 --> 00:07:58,330
paging operation of modern CPUs and

188
00:07:58,330 --> 00:08:00,700
operating systems so we have a summary

189
00:08:00,700 --> 00:08:02,650
slide here of what it's important for

190
00:08:02,650 --> 00:08:05,470
you to remember well what is important

191
00:08:05,470 --> 00:08:06,760
is the most significant bit of the

192
00:08:06,760 --> 00:08:09,130
virtual address determines the page the

193
00:08:09,130 --> 00:08:11,010
page is almost four kilobyte large and

194
00:08:11,010 --> 00:08:13,599
the least significant bits almost always

195
00:08:13,599 --> 00:08:14,750
twelve of them this

196
00:08:14,750 --> 00:08:19,100
offs it into the page only the page is

197
00:08:19,100 --> 00:08:23,090
translated and thus security checked so

198
00:08:23,090 --> 00:08:25,070
these are the facts that are going to

199
00:08:25,070 --> 00:08:27,500
turn into a violation of an assumption

200
00:08:27,500 --> 00:08:30,890
later on so I should also be mentioned

201
00:08:30,890 --> 00:08:33,890
that these page table this is the entire

202
00:08:33,890 --> 00:08:35,960
security check there is from memory on

203
00:08:35,960 --> 00:08:38,659
the x86 meaning that beyond this point

204
00:08:38,659 --> 00:08:41,390
the CPU will think that everything is

205
00:08:41,390 --> 00:08:43,370
good and dandy there will be no more

206
00:08:43,370 --> 00:08:48,380
security checks once we clear the page

207
00:08:48,380 --> 00:08:50,750
tables in security check we run into the

208
00:08:50,750 --> 00:08:54,200
data caches the story here is that DRM

209
00:08:54,200 --> 00:08:56,480
is relatively slow to modern CPUs and

210
00:08:56,480 --> 00:08:59,480
the idea with caches is that you store

211
00:08:59,480 --> 00:09:03,430
frequently used memory for the CPU and

212
00:09:03,430 --> 00:09:05,780
have every memory reference go through

213
00:09:05,780 --> 00:09:07,990
it the caches are so built that they are

214
00:09:07,990 --> 00:09:10,100
transparent to the operating systems and

215
00:09:10,100 --> 00:09:11,510
to programs and tybo slices and

216
00:09:11,510 --> 00:09:14,600
everything else we here as attackers

217
00:09:14,600 --> 00:09:16,640
have a problem with caches that is we

218
00:09:16,640 --> 00:09:18,320
want to talk to DRAM because that's

219
00:09:18,320 --> 00:09:22,100
where we have our problem so we need to

220
00:09:22,100 --> 00:09:23,690
bypass them we need to bypass this

221
00:09:23,690 --> 00:09:26,510
roadblock and we can do this in two ways

222
00:09:26,510 --> 00:09:29,570
the easy way is that indle provides the

223
00:09:29,570 --> 00:09:31,760
unprivileged instruction actually as two

224
00:09:31,760 --> 00:09:34,510
of them seal flush and she has floss up

225
00:09:34,510 --> 00:09:37,670
unprivileged for cash maintenance by

226
00:09:37,670 --> 00:09:39,230
applications we can use that to bypass

227
00:09:39,230 --> 00:09:41,870
the cache you saw javascript and the

228
00:09:41,870 --> 00:09:43,460
javascript we don't have access to any

229
00:09:43,460 --> 00:09:44,930
special instructions like the seal flush

230
00:09:44,930 --> 00:09:47,690
instructions so we need to use a

231
00:09:47,690 --> 00:09:50,810
technique called evict there is a paper

232
00:09:50,810 --> 00:09:53,360
by bruce maurice and manga on this

233
00:09:53,360 --> 00:09:55,640
subject called rule homogeneous that

234
00:09:55,640 --> 00:09:57,560
describes how we can evict stuff from

235
00:09:57,560 --> 00:10:00,260
the cache and thus bypass it we'll leave

236
00:10:00,260 --> 00:10:04,520
it at that there once we have passed the

237
00:10:04,520 --> 00:10:06,950
data caches we arrive in the memory

238
00:10:06,950 --> 00:10:09,290
controller the memory controller does a

239
00:10:09,290 --> 00:10:11,330
lot of stuff but the thing we are

240
00:10:11,330 --> 00:10:13,610
interested in here is it has a mapping

241
00:10:13,610 --> 00:10:15,740
function this is where the physical

242
00:10:15,740 --> 00:10:18,800
address is taken as input and through

243
00:10:18,800 --> 00:10:21,110
the map the capacitor stores the data we

244
00:10:21,110 --> 00:10:24,470
want to read is found which will take us

245
00:10:24,470 --> 00:10:27,920
to how is DRM actually organized so you

246
00:10:27,920 --> 00:10:28,540
have an

247
00:10:28,540 --> 00:10:33,280
how this map is used what you see here

248
00:10:33,280 --> 00:10:36,010
is dim this is what you buy if you go to

249
00:10:36,010 --> 00:10:41,680
a store and buy DRM and you can have one

250
00:10:41,680 --> 00:10:43,090
or more dim in your computer and they

251
00:10:43,090 --> 00:10:44,820
are connected to the CPU through

252
00:10:44,820 --> 00:10:49,360
channels and these that the dim house

253
00:10:49,360 --> 00:10:51,040
front side on the back side and these

254
00:10:51,040 --> 00:10:54,850
are called ranks and on the ranks we

255
00:10:54,850 --> 00:10:57,460
have a number of chips and if we open up

256
00:10:57,460 --> 00:10:59,980
the chips we'll see we have a number of

257
00:10:59,980 --> 00:11:03,010
banks inside each of these Bank have a

258
00:11:03,010 --> 00:11:04,840
row buffer we're gonna be talking a lot

259
00:11:04,840 --> 00:11:06,820
about the row buffer in a moment for now

260
00:11:06,820 --> 00:11:08,740
we'll just have a look what's inside one

261
00:11:08,740 --> 00:11:13,690
of these 30,000 32,000 rows of the bank

262
00:11:13,690 --> 00:11:15,730
and you probably guessed is this is

263
00:11:15,730 --> 00:11:17,590
where we have our capacitors the

264
00:11:17,590 --> 00:11:19,480
capacitors are part of a cell and a cell

265
00:11:19,480 --> 00:11:21,910
consists of a capacitor and a transistor

266
00:11:21,910 --> 00:11:24,490
each this means that each bit takes only

267
00:11:24,490 --> 00:11:25,990
two electronic components is to be

268
00:11:25,990 --> 00:11:28,240
stored the capacitor is there for

269
00:11:28,240 --> 00:11:29,680
control so that we actually get a chance

270
00:11:29,680 --> 00:11:34,480
to read and write the bit now here so

271
00:11:34,480 --> 00:11:35,710
that we don't bore you too long before

272
00:11:35,710 --> 00:11:38,380
it gets security-related this is the

273
00:11:38,380 --> 00:11:40,210
first end of trouble a row is 64

274
00:11:40,210 --> 00:11:42,880
thousand cells meaning it's eight

275
00:11:42,880 --> 00:11:45,700
kilobytes Lodge and security was checked

276
00:11:45,700 --> 00:11:49,000
for four kilobyte blocks so we have here

277
00:11:49,000 --> 00:11:50,200
first hint of trouble

278
00:11:50,200 --> 00:11:52,660
this means says security domains may end

279
00:11:52,660 --> 00:11:56,620
up sharing rows we're gonna talk about

280
00:11:56,620 --> 00:11:58,090
what about those who just didn't want to

281
00:11:58,090 --> 00:12:00,790
bore you so we're going to talk about

282
00:12:00,790 --> 00:12:03,070
how DRAM actually works how you read

283
00:12:03,070 --> 00:12:07,480
from DRAM and internally DRAM is only

284
00:12:07,480 --> 00:12:09,940
capable of reading entire rows this is a

285
00:12:09,940 --> 00:12:13,120
design decision so that you can maintain

286
00:12:13,120 --> 00:12:17,590
only two components for storing a bit

287
00:12:17,590 --> 00:12:19,660
meaning that the entire overhit are for

288
00:12:19,660 --> 00:12:22,920
a very large number of bits so

289
00:12:22,920 --> 00:12:26,370
internally it can only read entire rows

290
00:12:26,370 --> 00:12:30,850
also capacitors in cells discharged when

291
00:12:30,850 --> 00:12:32,860
you read the bits what I mean by that is

292
00:12:32,860 --> 00:12:34,540
if you take a capacitor and put a

293
00:12:34,540 --> 00:12:36,730
voltmeter on it if the capacitor is

294
00:12:36,730 --> 00:12:38,290
charged will see a strong spike and

295
00:12:38,290 --> 00:12:40,270
you'll never see anything again so

296
00:12:40,270 --> 00:12:41,779
reading DRAM actually

297
00:12:41,779 --> 00:12:45,649
stores the content of the cells and the

298
00:12:45,649 --> 00:12:47,480
solution is of course we read the bits

299
00:12:47,480 --> 00:12:49,579
out put them in a buffer and write them

300
00:12:49,579 --> 00:12:51,649
back when you're done and this is the

301
00:12:51,649 --> 00:12:54,939
row buffer this is why we have it here

302
00:12:54,939 --> 00:12:59,029
so say the CPU wants to read something

303
00:12:59,029 --> 00:13:01,279
in the yellow row here then it's the

304
00:13:01,279 --> 00:13:03,379
first rope and the Rope are first empty

305
00:13:03,379 --> 00:13:06,019
so the CPU

306
00:13:06,019 --> 00:13:07,879
tell us we need something from this row

307
00:13:07,879 --> 00:13:09,949
and then we activate it activated

308
00:13:09,949 --> 00:13:12,680
hi is nothing more than essentially

309
00:13:12,680 --> 00:13:14,540
copying the row to the row buffer

310
00:13:14,540 --> 00:13:16,850
nothing more just copy it to the row

311
00:13:16,850 --> 00:13:19,249
buffer and then we can extract the bits

312
00:13:19,249 --> 00:13:21,170
that we needed from the row and return

313
00:13:21,170 --> 00:13:25,550
to the CPU so now it becomes funny if

314
00:13:25,550 --> 00:13:28,009
the CPU immediately afterwards decides

315
00:13:28,009 --> 00:13:29,509
it needs to read some stuff from the

316
00:13:29,509 --> 00:13:31,129
same row again to maybe some other stuff

317
00:13:31,129 --> 00:13:33,709
in the row well now the row buffer is

318
00:13:33,709 --> 00:13:36,800
already full and the CPU can get it

319
00:13:36,800 --> 00:13:39,319
directly from here this is it sounds

320
00:13:39,319 --> 00:13:41,029
like it's less work and the question is

321
00:13:41,029 --> 00:13:42,949
is it faster in fact this very question

322
00:13:42,949 --> 00:13:45,379
was what got me into researching this

323
00:13:45,379 --> 00:13:49,250
stuff so what we did was we measured the

324
00:13:49,250 --> 00:13:52,370
latency of row hits that is when the

325
00:13:52,370 --> 00:13:53,839
information that we are trying to read

326
00:13:53,839 --> 00:13:57,410
is already in the row buffer and we got

327
00:13:57,410 --> 00:14:00,829
this nice graph and then we measure the

328
00:14:00,829 --> 00:14:03,199
latency of reading from memory when

329
00:14:03,199 --> 00:14:05,180
there's a row conflict or row miss that

330
00:14:05,180 --> 00:14:07,699
is when the data we're reading is not in

331
00:14:07,699 --> 00:14:09,649
the row buffer it has to activate the

332
00:14:09,649 --> 00:14:12,170
row before and if we put these two

333
00:14:12,170 --> 00:14:15,290
together we can see that there is a very

334
00:14:15,290 --> 00:14:17,660
nice threshold that half of them the

335
00:14:17,660 --> 00:14:20,269
green the row hits is almost always

336
00:14:20,269 --> 00:14:22,819
faster than the row misses meaning we're

337
00:14:22,819 --> 00:14:26,360
able to distinguish from outside if a

338
00:14:26,360 --> 00:14:31,069
row was in the row buffer or not so we

339
00:14:31,069 --> 00:14:33,129
can just summarize everything up to here

340
00:14:33,129 --> 00:14:35,000
security is typically checked for four

341
00:14:35,000 --> 00:14:38,540
kilobyte pages we can bypass the data

342
00:14:38,540 --> 00:14:42,379
caches to read from DRAM pages of

343
00:14:42,379 --> 00:14:43,730
different security domains can share

344
00:14:43,730 --> 00:14:46,699
bank's pages of different security

345
00:14:46,699 --> 00:14:49,579
domains can share rows and through

346
00:14:49,579 --> 00:14:51,290
timing we can establish row hits and

347
00:14:51,290 --> 00:14:52,970
misses across security boundaries and

348
00:14:52,970 --> 00:14:55,250
the total result is

349
00:14:55,250 --> 00:15:01,100
DRAM leaks information so now that we

350
00:15:01,100 --> 00:15:02,870
have a background on the theorem and we

351
00:15:02,870 --> 00:15:05,689
know how the theorem is organized we can

352
00:15:05,689 --> 00:15:08,660
do our first attack and do a reverse

353
00:15:08,660 --> 00:15:12,050
engineering of the CPU so you remember

354
00:15:12,050 --> 00:15:13,550
this slide we had that a few minutes ago

355
00:15:13,550 --> 00:15:16,129
in the background that's the mapping

356
00:15:16,129 --> 00:15:18,800
function of the memory controller so if

357
00:15:18,800 --> 00:15:21,379
you have data that has virtual address

358
00:15:21,379 --> 00:15:22,790
and then it translates to the physical

359
00:15:22,790 --> 00:15:25,370
address the physical address gets to the

360
00:15:25,370 --> 00:15:27,110
memory controller and the memory

361
00:15:27,110 --> 00:15:29,329
controller then uses a function to

362
00:15:29,329 --> 00:15:31,699
decide where in which location of the

363
00:15:31,699 --> 00:15:34,160
DIMM the data is actually stored this is

364
00:15:34,160 --> 00:15:36,529
this mapping function so this is a

365
00:15:36,529 --> 00:15:39,439
mapping function of skylake computer

366
00:15:39,439 --> 00:15:44,750
here and the problem is we don't know

367
00:15:44,750 --> 00:15:46,490
this mapping function so this is not

368
00:15:46,490 --> 00:15:48,649
documented there is a secret it'll keep

369
00:15:48,649 --> 00:15:50,329
the secret they don't want anyone to

370
00:15:50,329 --> 00:15:52,939
know this mapping function but we are

371
00:15:52,939 --> 00:15:54,230
really interested in this mapping

372
00:15:54,230 --> 00:15:56,509
function so we really want to know if we

373
00:15:56,509 --> 00:15:58,939
have a physical address where is this

374
00:15:58,939 --> 00:16:00,920
data stored in the action theorem in

375
00:16:00,920 --> 00:16:03,800
which bank in which channel in which a

376
00:16:03,800 --> 00:16:06,829
rank in which tip we really want to

377
00:16:06,829 --> 00:16:08,180
notice and that's why we need the

378
00:16:08,180 --> 00:16:10,250
mapping function and as it is

379
00:16:10,250 --> 00:16:12,529
undocumented we have to reverse engineer

380
00:16:12,529 --> 00:16:17,269
it and we want to do it only in software

381
00:16:17,269 --> 00:16:18,740
so we could do that with hardware

382
00:16:18,740 --> 00:16:20,420
measurements but we wanted to do it in

383
00:16:20,420 --> 00:16:22,759
software and we already know we have

384
00:16:22,759 --> 00:16:25,730
timing differences so we want to exploit

385
00:16:25,730 --> 00:16:27,740
those timing differences to really

386
00:16:27,740 --> 00:16:29,089
reverse-engineer the mapping function

387
00:16:29,089 --> 00:16:32,559
from the timing differences only and

388
00:16:32,559 --> 00:16:35,600
here's an animation about our approach

389
00:16:35,600 --> 00:16:39,110
so what we actually do so you can see

390
00:16:39,110 --> 00:16:42,740
here atom and it has two chips on it and

391
00:16:42,740 --> 00:16:46,160
we call each chip Bank and then we see

392
00:16:46,160 --> 00:16:47,720
that this is numbered rectangles in

393
00:16:47,720 --> 00:16:50,779
there that are the rows of this and

394
00:16:50,779 --> 00:16:53,930
after of the banks in the DRAM and then

395
00:16:53,930 --> 00:16:56,629
we just start with one random address

396
00:16:56,629 --> 00:16:58,939
with ristic one completely random

397
00:16:58,939 --> 00:17:00,559
address and this address will be

398
00:17:00,559 --> 00:17:03,050
somewhere in the DRAM and it will be in

399
00:17:03,050 --> 00:17:05,059
one bank we don't know which bank but it

400
00:17:05,059 --> 00:17:07,929
will be in some bank and then we select

401
00:17:07,929 --> 00:17:11,359
more random addresses so this the first

402
00:17:11,359 --> 00:17:13,099
one is our base address and then we

403
00:17:13,099 --> 00:17:15,500
select more random addresses and then we

404
00:17:15,500 --> 00:17:17,660
have Maddie's addresses so we access the

405
00:17:17,660 --> 00:17:19,730
base address and the other address and

406
00:17:19,730 --> 00:17:22,099
then again the base address the and the

407
00:17:22,099 --> 00:17:25,040
other address and so on and we measure

408
00:17:25,040 --> 00:17:27,079
the time it takes to hammer those

409
00:17:27,079 --> 00:17:29,830
addresses and if they are in different

410
00:17:29,830 --> 00:17:33,470
banks then it's quite fast because they

411
00:17:33,470 --> 00:17:35,300
don't influence the row before they each

412
00:17:35,300 --> 00:17:37,460
have their own row buffer it can be

413
00:17:37,460 --> 00:17:40,130
served in parallel so we see fast

414
00:17:40,130 --> 00:17:42,890
timings if we choose random addresses

415
00:17:42,890 --> 00:17:46,400
that are not in the same thing and if we

416
00:17:46,400 --> 00:17:48,470
find an address that maps to the same

417
00:17:48,470 --> 00:17:52,580
Bank in the dim then the timing is worse

418
00:17:52,580 --> 00:17:55,460
so it's much slower because now we have

419
00:17:55,460 --> 00:17:58,070
two addresses in the same Bank but in

420
00:17:58,070 --> 00:18:00,830
different rows and that means it always

421
00:18:00,830 --> 00:18:02,960
has to overwrite the row buffer you

422
00:18:02,960 --> 00:18:05,240
remember a row buffer from before if I

423
00:18:05,240 --> 00:18:07,400
access there the first address it gets

424
00:18:07,400 --> 00:18:08,990
copied to the row buffer if I access the

425
00:18:08,990 --> 00:18:11,059
second address it has to be copied over

426
00:18:11,059 --> 00:18:13,460
the row buffer so that will be slower

427
00:18:13,460 --> 00:18:18,080
and then we can see if addresses map to

428
00:18:18,080 --> 00:18:20,030
the same Bank or if they don't map to

429
00:18:20,030 --> 00:18:22,550
the same Bank and then we choose another

430
00:18:22,550 --> 00:18:26,179
random base address and do this again

431
00:18:26,179 --> 00:18:29,210
over and over and we again see addresses

432
00:18:29,210 --> 00:18:31,010
that map to the same Bank have high

433
00:18:31,010 --> 00:18:35,809
timing different Bank low timings and we

434
00:18:35,809 --> 00:18:37,700
can do that for all the banks you have

435
00:18:37,700 --> 00:18:39,320
in a dram which was random base

436
00:18:39,320 --> 00:18:41,870
addresses from every bank and then find

437
00:18:41,870 --> 00:18:44,330
addresses that map to the same thing

438
00:18:44,330 --> 00:18:47,870
using those timing differences and then

439
00:18:47,870 --> 00:18:50,320
we have for each Bank a set of addresses

440
00:18:50,320 --> 00:18:54,200
that map there and we can see that as a

441
00:18:54,200 --> 00:18:56,480
linear equation system so we have to

442
00:18:56,480 --> 00:18:59,330
physically address as the coefficients

443
00:18:59,330 --> 00:19:02,240
and we have the bank number as the right

444
00:19:02,240 --> 00:19:04,220
side of the equation and then we have a

445
00:19:04,220 --> 00:19:06,590
few equations and a few coefficients and

446
00:19:06,590 --> 00:19:09,590
we could solve that and if we solve that

447
00:19:09,590 --> 00:19:13,370
we get the mapping functions but as we

448
00:19:13,370 --> 00:19:15,980
were a bit lazy when doing that we

449
00:19:15,980 --> 00:19:16,670
didn't want

450
00:19:16,670 --> 00:19:19,280
an equation solver so we did brute force

451
00:19:19,280 --> 00:19:23,960
and that makes my sounds low but it was

452
00:19:23,960 --> 00:19:25,490
really fast to brute-force into the

453
00:19:25,490 --> 00:19:27,740
equation system you only have series or

454
00:19:27,740 --> 00:19:29,690
ones as coefficients and you only have

455
00:19:29,690 --> 00:19:33,380
up to 30 coefficients that's very fast

456
00:19:33,380 --> 00:19:35,210
so it was in the order of seconds to

457
00:19:35,210 --> 00:19:37,730
minutes depending on the computer the

458
00:19:37,730 --> 00:19:39,740
fastest resort for example on this

459
00:19:39,740 --> 00:19:42,710
computer was 6 seconds from starting the

460
00:19:42,710 --> 00:19:45,650
measurement until having the mapping

461
00:19:45,650 --> 00:19:48,560
function and this Lobot was the

462
00:19:48,560 --> 00:19:50,420
measurement so brute forcing the

463
00:19:50,420 --> 00:19:53,180
equation system took a fraction of a

464
00:19:53,180 --> 00:19:58,130
second and we did we developed a toolkit

465
00:19:58,130 --> 00:20:01,190
that does that fully automate it so we

466
00:20:01,190 --> 00:20:03,350
wanted to have to run a lot of computers

467
00:20:03,350 --> 00:20:06,500
so we did and fully automated tool kits

468
00:20:06,500 --> 00:20:09,160
to reverse-engineer the mapping and

469
00:20:09,160 --> 00:20:12,050
that's really fast depending on how much

470
00:20:12,050 --> 00:20:14,330
memory you have between seconds and

471
00:20:14,330 --> 00:20:18,260
minutes we open-source that tool so it's

472
00:20:18,260 --> 00:20:21,080
available on github and you can just

473
00:20:21,080 --> 00:20:24,050
right now pull the repository compile

474
00:20:24,050 --> 00:20:26,590
the program running on your computer and

475
00:20:26,590 --> 00:20:29,000
hopefully until the end of the talk you

476
00:20:29,000 --> 00:20:30,560
will have the map mapping function and

477
00:20:30,560 --> 00:20:32,660
you can compare to the ones we have in

478
00:20:32,660 --> 00:20:35,690
our paper and we did it for a few map

479
00:20:35,690 --> 00:20:38,150
machines so if you have the same machine

480
00:20:38,150 --> 00:20:39,890
you will hopefully get the same mapping

481
00:20:39,890 --> 00:20:41,930
function for new machines you get new

482
00:20:41,930 --> 00:20:43,460
mapping functions so you can really try

483
00:20:43,460 --> 00:20:45,320
that out you don't have to do anything

484
00:20:45,320 --> 00:20:51,410
just start a program and wait so what we

485
00:20:51,410 --> 00:20:54,290
now have is a toolkit that gives us the

486
00:20:54,290 --> 00:20:56,210
mapping function for every computer and

487
00:20:56,210 --> 00:20:59,960
we know which physically address maps to

488
00:20:59,960 --> 00:21:02,780
which part of the DRAM and we can do

489
00:21:02,780 --> 00:21:05,960
that everywhere fully automated and now

490
00:21:05,960 --> 00:21:08,600
we want to exploit that knowledge so we

491
00:21:08,600 --> 00:21:10,400
have that knowledge now now we want to

492
00:21:10,400 --> 00:21:14,740
exploit it with some attacks

493
00:21:16,670 --> 00:21:19,110
so the first thing you know we want to

494
00:21:19,110 --> 00:21:20,850
exploit here is we want to spy on other

495
00:21:20,850 --> 00:21:25,190
people's software through the DRAM and

496
00:21:25,190 --> 00:21:27,450
imagine this function it is really an

497
00:21:27,450 --> 00:21:29,370
imaginary function it's inspired from a

498
00:21:29,370 --> 00:21:30,840
real function that leaks a lot more

499
00:21:30,840 --> 00:21:32,760
information than this one does

500
00:21:32,760 --> 00:21:34,440
imagine you have a scan code from the

501
00:21:34,440 --> 00:21:36,510
keyboard coming in if it's uppercase it

502
00:21:36,510 --> 00:21:38,550
goes into a handle uppercase function if

503
00:21:38,550 --> 00:21:40,290
it's lowercase it goes into a handle

504
00:21:40,290 --> 00:21:43,680
lowercase function now functions are

505
00:21:43,680 --> 00:21:46,470
memory as well meaning that different

506
00:21:46,470 --> 00:21:48,090
memory will be touched if the handle

507
00:21:48,090 --> 00:21:49,680
uppercase function is called then when

508
00:21:49,680 --> 00:21:52,110
the handle lowercase function is called

509
00:21:52,110 --> 00:21:54,390
so we're going to see if we can figure

510
00:21:54,390 --> 00:21:56,190
out which of these two functions are

511
00:21:56,190 --> 00:21:56,490
called

512
00:21:56,490 --> 00:21:58,410
and whether your password uses uppercase

513
00:21:58,410 --> 00:22:01,590
letters or lowercase letters so here we

514
00:22:01,590 --> 00:22:03,030
won't remember handle uppercase and

515
00:22:03,030 --> 00:22:06,300
lowercase a different memory so we want

516
00:22:06,300 --> 00:22:08,490
to spy on the behavior of a victim and

517
00:22:08,490 --> 00:22:10,350
the victim actually won't know that

518
00:22:10,350 --> 00:22:11,880
we're spying on him because he will not

519
00:22:11,880 --> 00:22:13,440
be seeing that we're what we're doing in

520
00:22:13,440 --> 00:22:15,930
DRAM his software will run as always and

521
00:22:15,930 --> 00:22:17,160
he'll probably be in a different

522
00:22:17,160 --> 00:22:19,170
security domain and doesn't have no

523
00:22:19,170 --> 00:22:22,860
knowledge about what we're doing we can

524
00:22:22,860 --> 00:22:25,290
use row hits to get useful information

525
00:22:25,290 --> 00:22:28,920
about this and this is very much like

526
00:22:28,920 --> 00:22:30,660
cache attack so maybe some of you went

527
00:22:30,660 --> 00:22:33,210
to the talk earlier by Clementi Maurice

528
00:22:33,210 --> 00:22:35,490
and Mort slip about Armageddon cache

529
00:22:35,490 --> 00:22:38,340
attacks on arm computers it works pretty

530
00:22:38,340 --> 00:22:40,170
much the same way but it has an

531
00:22:40,170 --> 00:22:41,940
advantage over normal cache attacks on

532
00:22:41,940 --> 00:22:45,090
the x86 this is that DRAM is shared

533
00:22:45,090 --> 00:22:49,260
between CPUs on multi CPU systems so

534
00:22:49,260 --> 00:22:51,360
it's really shared across the board may

535
00:22:51,360 --> 00:22:55,020
need work across CPU as well so how does

536
00:22:55,020 --> 00:22:58,620
it work well we established before that

537
00:22:58,620 --> 00:23:01,380
you can have shared rows that is because

538
00:23:01,380 --> 00:23:03,990
the rows 8 kilobyte large and pages 4

539
00:23:03,990 --> 00:23:07,350
kilobyte large and and the operating

540
00:23:07,350 --> 00:23:10,320
system Maps in pages so how do we go

541
00:23:10,320 --> 00:23:12,660
about this well we start out by the spy

542
00:23:12,660 --> 00:23:15,570
picking a random row which is not really

543
00:23:15,570 --> 00:23:17,220
interested in in this case Rose Sarah

544
00:23:17,220 --> 00:23:20,370
and he accesses some data in it and it

545
00:23:20,370 --> 00:23:22,650
gets copied to the row buffer and the

546
00:23:22,650 --> 00:23:25,350
data gets returned from there the spy

547
00:23:25,350 --> 00:23:27,490
doesn't really care about the data or

548
00:23:27,490 --> 00:23:29,650
the actual row he just wants to know the

549
00:23:29,650 --> 00:23:31,840
state of the row buffer in this case he

550
00:23:31,840 --> 00:23:33,130
had established that the row buffer

551
00:23:33,130 --> 00:23:36,480
should be full with his own memory and

552
00:23:36,480 --> 00:23:40,120
now he activates the shared row that he

553
00:23:40,120 --> 00:23:41,140
shares with the victim

554
00:23:41,140 --> 00:23:43,630
this gets copied to the row buffer and

555
00:23:43,630 --> 00:23:47,410
returned and since the spy previously

556
00:23:47,410 --> 00:23:49,570
had his own memory in the row buffer

557
00:23:49,570 --> 00:23:51,580
from another row it'll take a long time

558
00:23:51,580 --> 00:23:53,350
he would expect it to be a high timing

559
00:23:53,350 --> 00:23:56,740
has a role conflict here however what if

560
00:23:56,740 --> 00:23:59,700
the victim access to shared row before

561
00:23:59,700 --> 00:24:03,730
the spy activated the shared row well

562
00:24:03,730 --> 00:24:06,309
the victim will activate the shared row

563
00:24:06,309 --> 00:24:07,720
it will get copied to the row buffer

564
00:24:07,720 --> 00:24:09,940
he'll get his data him that he wanted

565
00:24:09,940 --> 00:24:13,900
and now the spy activates it but this

566
00:24:13,900 --> 00:24:15,580
time it's in the row buffer he will

567
00:24:15,580 --> 00:24:18,790
retrieve the data fast and he will know

568
00:24:18,790 --> 00:24:24,880
that somebody else accessed this row so

569
00:24:24,880 --> 00:24:27,550
imagine if that was handled uppercase he

570
00:24:27,550 --> 00:24:29,350
will be able to tell that your password

571
00:24:29,350 --> 00:24:33,520
has an uppercase letter in it so this

572
00:24:33,520 --> 00:24:34,750
brings us to two important questions

573
00:24:34,750 --> 00:24:36,520
that are turns out to be very much

574
00:24:36,520 --> 00:24:38,710
related as what is the chance that we

575
00:24:38,710 --> 00:24:40,720
share a row with important victim data

576
00:24:40,720 --> 00:24:43,630
and the second question is what kind of

577
00:24:43,630 --> 00:24:46,450
spatial accuracy do we get I have to

578
00:24:46,450 --> 00:24:49,420
explain this spatial accuracy imagine

579
00:24:49,420 --> 00:24:51,610
that handle up a case and handle lower

580
00:24:51,610 --> 00:24:53,260
case are very small function lying

581
00:24:53,260 --> 00:24:55,630
directly next to each other that means

582
00:24:55,630 --> 00:24:57,340
they would fit in the same page in the

583
00:24:57,340 --> 00:24:58,990
same row and we would be unable to

584
00:24:58,990 --> 00:25:01,360
distinguish between them so the question

585
00:25:01,360 --> 00:25:03,580
here is how far do they have to be apart

586
00:25:03,580 --> 00:25:05,320
for us to be able to distinguish

587
00:25:05,320 --> 00:25:08,080
uppercase and lowercase functions in

588
00:25:08,080 --> 00:25:13,120
this case and well the smallest unit of

589
00:25:13,120 --> 00:25:15,429
physical memory is one page as I keep on

590
00:25:15,429 --> 00:25:17,980
saying it's four four kilobyte large and

591
00:25:17,980 --> 00:25:20,800
rows are still eight kilobyte large and

592
00:25:20,800 --> 00:25:22,990
we need the victim's address and our

593
00:25:22,990 --> 00:25:26,530
address to be in the same row so you are

594
00:25:26,530 --> 00:25:29,350
probably thinking well two pages share

595
00:25:29,350 --> 00:25:31,600
one row well you're not exactly right

596
00:25:31,600 --> 00:25:35,460
either if you think that and why well

597
00:25:35,460 --> 00:25:38,650
not the entire physical page must be in

598
00:25:38,650 --> 00:25:39,460
the same row

599
00:25:39,460 --> 00:25:42,549
and this happens when the mapping

600
00:25:42,549 --> 00:25:46,240
function tells the mapping function and

601
00:25:46,240 --> 00:25:48,460
the memory controller tells that the

602
00:25:48,460 --> 00:25:50,770
page should be distributed over multiple

603
00:25:50,770 --> 00:25:53,260
rows and this happens when the lower

604
00:25:53,260 --> 00:25:56,049
bits which are not translated the 0 to

605
00:25:56,049 --> 00:25:59,440
11 bits are used for this mapping on

606
00:25:59,440 --> 00:26:02,799
skylake for example there are two yield

607
00:26:02,799 --> 00:26:04,360
there are low bits that are used for

608
00:26:04,360 --> 00:26:06,070
selecting the channel and the bank group

609
00:26:06,070 --> 00:26:10,330
essentially the bank and thus the

610
00:26:10,330 --> 00:26:12,610
physical page gets distributed over four

611
00:26:12,610 --> 00:26:16,659
rows graphically it looks something like

612
00:26:16,659 --> 00:26:20,049
this you have on the left side now the

613
00:26:20,049 --> 00:26:22,960
page that we're interested in where I

614
00:26:22,960 --> 00:26:25,539
say where handle uppercases and if we

615
00:26:25,539 --> 00:26:27,970
have an address in that where the bits

616
00:26:27,970 --> 00:26:30,520
are set so that d bank selection the

617
00:26:30,520 --> 00:26:32,679
channel selection is both 0 we will end

618
00:26:32,679 --> 00:26:37,539
up in the green green row below and if

619
00:26:37,539 --> 00:26:40,450
one of the bits here the bank group it

620
00:26:40,450 --> 00:26:42,460
is set to 1 well we'll end up in the

621
00:26:42,460 --> 00:26:46,360
blue and so on and so forth another way

622
00:26:46,360 --> 00:26:49,990
to look at this is here in our bank here

623
00:26:49,990 --> 00:26:52,090
we have a Sandy Bridge with a single Tim

624
00:26:52,090 --> 00:26:55,000
and the mapping function does not have

625
00:26:55,000 --> 00:26:58,990
any bit of the low bits in the low I you

626
00:26:58,990 --> 00:27:01,299
does not use any of the bits in the low

627
00:27:01,299 --> 00:27:03,850
Elevens to map it meaning that we get

628
00:27:03,850 --> 00:27:04,929
the case that we have been talking about

629
00:27:04,929 --> 00:27:08,289
so far the two pages per row this means

630
00:27:08,289 --> 00:27:10,240
we have a spatial accuracy of one page

631
00:27:10,240 --> 00:27:14,559
that is 4096 bytes and our chance of

632
00:27:14,559 --> 00:27:16,360
getting co-located with important victim

633
00:27:16,360 --> 00:27:19,210
data is relatively small because we have

634
00:27:19,210 --> 00:27:22,000
to get exactly the other color or we

635
00:27:22,000 --> 00:27:25,840
don't I can't not see anything so this

636
00:27:25,840 --> 00:27:27,399
doesn't look very promising for spying

637
00:27:27,399 --> 00:27:29,950
but it turns out that IV prints with two

638
00:27:29,950 --> 00:27:33,159
DIMM modules have one bit in the lower

639
00:27:33,159 --> 00:27:36,850
level bit turning out to be four pages

640
00:27:36,850 --> 00:27:39,640
in a row this means that we now have

641
00:27:39,640 --> 00:27:41,110
three colors where we can get our own

642
00:27:41,110 --> 00:27:42,909
material in and then we share row with

643
00:27:42,909 --> 00:27:46,000
the victim it also means that the victim

644
00:27:46,000 --> 00:27:48,610
the the spatial accuracy is now a half

645
00:27:48,610 --> 00:27:51,370
page meaning that we're able to

646
00:27:51,370 --> 00:27:52,909
distinguish between Hanlin

647
00:27:52,909 --> 00:27:54,409
upper case and lower case if there are

648
00:27:54,409 --> 00:27:58,999
only 2048 bytes apart and on the latest

649
00:27:58,999 --> 00:28:01,519
generation of Intel CPUs it's much much

650
00:28:01,519 --> 00:28:03,049
better there are eight pages per row two

651
00:28:03,049 --> 00:28:05,690
bits such as all before meaning that you

652
00:28:05,690 --> 00:28:08,330
have seven colors you can pick fruits to

653
00:28:08,330 --> 00:28:10,220
get collocation with the victim and your

654
00:28:10,220 --> 00:28:11,869
spatial accuracy is just a quarter of a

655
00:28:11,869 --> 00:28:14,599
page and this sort of looks like a

656
00:28:14,599 --> 00:28:17,690
rainbow which is why I call my skylight

657
00:28:17,690 --> 00:28:18,379
computer

658
00:28:18,379 --> 00:28:21,019
Rainbow Dash Rainbow Dash is a character

659
00:28:21,019 --> 00:28:26,509
in the documentary the My Little Pony so

660
00:28:26,509 --> 00:28:28,549
in other words we can deduct behavior

661
00:28:28,549 --> 00:28:30,200
from memory axis much like cache

662
00:28:30,200 --> 00:28:33,080
side-channel attacks it works across VM

663
00:28:33,080 --> 00:28:35,179
costs if you even sandbox because

664
00:28:35,179 --> 00:28:37,369
everybody does memory accesses there's

665
00:28:37,369 --> 00:28:39,799
pretty much no way to avoid memory

666
00:28:39,799 --> 00:28:41,210
accesses no matter what kind of

667
00:28:41,210 --> 00:28:43,909
execution environment you have on the

668
00:28:43,909 --> 00:28:45,619
latest generation on personal computers

669
00:28:45,619 --> 00:28:47,749
we are very likely to be in the same row

670
00:28:47,749 --> 00:28:50,299
as a secret victim information we have

671
00:28:50,299 --> 00:28:53,029
spatial accuracy of 1,024 bytes which is

672
00:28:53,029 --> 00:28:54,739
pretty good it helped us handle

673
00:28:54,739 --> 00:28:55,879
uppercase don't have to be a pretty

674
00:28:55,879 --> 00:28:59,029
particularly big function to push and a

675
00:28:59,029 --> 00:29:00,379
lowercase out even if they are located

676
00:29:00,379 --> 00:29:03,409
directly beside each other in the code

677
00:29:03,409 --> 00:29:06,289
and it gets even better and multi CPU

678
00:29:06,289 --> 00:29:09,109
servers because often you have a third

679
00:29:09,109 --> 00:29:14,029
bit in the lower 11 we have been using

680
00:29:14,029 --> 00:29:16,729
this to spy on keyboard input to Firefox

681
00:29:16,729 --> 00:29:18,710
with just personally doing an example of

682
00:29:18,710 --> 00:29:19,909
what we can actually do with this stuff

683
00:29:19,909 --> 00:29:23,869
I should turn it over to Michael here so

684
00:29:23,869 --> 00:29:26,239
thank you so spying is a nice thing but

685
00:29:26,239 --> 00:29:29,149
that doesn't explain the demo yet so we

686
00:29:29,149 --> 00:29:31,759
have something else we did so another

687
00:29:31,759 --> 00:29:35,779
attack and it's a cover channel so DRM

688
00:29:35,779 --> 00:29:38,239
cover channel first of all we have to

689
00:29:38,239 --> 00:29:41,149
say okay what is the common channel so a

690
00:29:41,149 --> 00:29:43,009
common channel is if you have two

691
00:29:43,009 --> 00:29:44,720
programs and they would like to

692
00:29:44,720 --> 00:29:47,269
communicate with each other and that

693
00:29:47,269 --> 00:29:48,919
sounds pretty normal but in the case of

694
00:29:48,919 --> 00:29:50,779
a common channel they are not allowed to

695
00:29:50,779 --> 00:29:53,450
do so so what does mean they are not

696
00:29:53,450 --> 00:29:55,070
allowed to communicate with each others

697
00:29:55,070 --> 00:29:57,109
all the normal channels are either

698
00:29:57,109 --> 00:29:59,720
blocked or monitored so for example if

699
00:29:59,720 --> 00:30:01,519
you have two programs and they usually

700
00:30:01,519 --> 00:30:03,800
communicate over the Internet or

701
00:30:03,800 --> 00:30:05,930
using files or inter-process

702
00:30:05,930 --> 00:30:08,350
communication shared memory whatsoever

703
00:30:08,350 --> 00:30:11,720
that's either not available due to

704
00:30:11,720 --> 00:30:15,020
hardware or software limitations or it

705
00:30:15,020 --> 00:30:16,490
is monitored so that means you have a

706
00:30:16,490 --> 00:30:17,930
monitoring program running on your

707
00:30:17,930 --> 00:30:20,330
computer and if the monitor detects all

708
00:30:20,330 --> 00:30:22,010
these programs are do they want to

709
00:30:22,010 --> 00:30:24,740
communicate we abort them so there

710
00:30:24,740 --> 00:30:26,770
shouldn't be any communication possible

711
00:30:26,770 --> 00:30:29,870
so we have to exploit some side channels

712
00:30:29,870 --> 00:30:31,550
in order to get a communication running

713
00:30:31,550 --> 00:30:34,130
between those two programs and in our

714
00:30:34,130 --> 00:30:36,110
case the side channel is of course the

715
00:30:36,110 --> 00:30:41,210
DRM so in this animation we have again a

716
00:30:41,210 --> 00:30:44,420
DRM Bank and I'd like to explain what

717
00:30:44,420 --> 00:30:46,540
the primitive here is that we can use a

718
00:30:46,540 --> 00:30:49,130
communication through the DRM without

719
00:30:49,130 --> 00:30:53,150
anyone noticing it and if no chance to

720
00:30:53,150 --> 00:30:55,520
block that so we have a send and a

721
00:30:55,520 --> 00:30:59,330
receiver application and they agree on

722
00:30:59,330 --> 00:31:00,860
some DRM bank they can do that

723
00:31:00,860 --> 00:31:02,960
beforehand so it can be hard-coded in

724
00:31:02,960 --> 00:31:04,670
the application it doesn't matter that

725
00:31:04,670 --> 00:31:07,700
can also agree on that we don't care

726
00:31:07,700 --> 00:31:09,530
about how they do it it can just be

727
00:31:09,530 --> 00:31:13,040
hard-coded and they both the sender and

728
00:31:13,040 --> 00:31:16,640
the receiver use one row inside this DRM

729
00:31:16,640 --> 00:31:20,210
Bank so use different roles and the

730
00:31:20,210 --> 00:31:22,030
receiver does nothing else than just

731
00:31:22,030 --> 00:31:26,150
reading its data from one row of the DRM

732
00:31:26,150 --> 00:31:29,300
Bank and the receiver is not interested

733
00:31:29,300 --> 00:31:32,180
in the data at all just on in the excess

734
00:31:32,180 --> 00:31:35,090
times so at the first access this data

735
00:31:35,090 --> 00:31:37,040
will be copied to the row buffer the

736
00:31:37,040 --> 00:31:39,110
timing will be high we ignore the first

737
00:31:39,110 --> 00:31:41,330
reading but afterwards

738
00:31:41,330 --> 00:31:42,920
every time the receiver accesses data

739
00:31:42,920 --> 00:31:46,580
which maps into this dear M row it will

740
00:31:46,580 --> 00:31:49,100
always already be in a row buffer so the

741
00:31:49,100 --> 00:31:51,680
access is really fast and the receiver

742
00:31:51,680 --> 00:31:54,830
sees fast access times and knows it's

743
00:31:54,830 --> 00:31:59,390
data is in a row buffer and then the

744
00:31:59,390 --> 00:32:02,990
sender can access data in its row so

745
00:32:02,990 --> 00:32:04,670
what happens the rows are in the same

746
00:32:04,670 --> 00:32:06,200
Bank so they have the same row buffer

747
00:32:06,200 --> 00:32:09,320
and if the sender accesses data in its

748
00:32:09,320 --> 00:32:11,750
bank it will be copied to row buffer and

749
00:32:11,750 --> 00:32:14,860
the old row buffer is gone

750
00:32:14,860 --> 00:32:16,929
so the sign that just accesses this

751
00:32:16,929 --> 00:32:18,519
doesn't care about the data

752
00:32:18,519 --> 00:32:20,740
it's just interested in setting the row

753
00:32:20,740 --> 00:32:24,070
buffer to a defined state and if then

754
00:32:24,070 --> 00:32:26,769
the receiver again accesses the data in

755
00:32:26,769 --> 00:32:28,960
its row it has to be copied to the row

756
00:32:28,960 --> 00:32:30,789
buffer first because it was overwritten

757
00:32:30,789 --> 00:32:34,360
by the sender and this leads to a high

758
00:32:34,360 --> 00:32:37,419
access time so to send at the receiver

759
00:32:37,419 --> 00:32:39,309
ceased now it has a high excess time so

760
00:32:39,309 --> 00:32:41,769
the transmitter must have sent something

761
00:32:41,769 --> 00:32:46,630
by accessing its row and what is the

762
00:32:46,630 --> 00:32:49,330
scenario here so the scenario is we are

763
00:32:49,330 --> 00:32:51,220
trapped inside a virtual machine without

764
00:32:51,220 --> 00:32:53,409
network access as we have seen it in a

765
00:32:53,409 --> 00:32:55,350
demo at the beginning of the talk and

766
00:32:55,350 --> 00:32:57,279
there's absolutely no communication

767
00:32:57,279 --> 00:32:59,649
between the guest and the host so

768
00:32:59,649 --> 00:33:01,809
imagine you work at the company you get

769
00:33:01,809 --> 00:33:04,630
a virtual machine for manual analysis or

770
00:33:04,630 --> 00:33:06,760
with sensitive data in there and you

771
00:33:06,760 --> 00:33:08,590
really don't want to have data going

772
00:33:08,590 --> 00:33:12,279
from the VM to the internet so you have

773
00:33:12,279 --> 00:33:15,059
a isolated virtual machine no

774
00:33:15,059 --> 00:33:16,870
communication communication between

775
00:33:16,870 --> 00:33:19,419
guest and host and then you have a host

776
00:33:19,419 --> 00:33:24,700
system that is connected to the Internet

777
00:33:24,700 --> 00:33:27,010
but you're not allowed to run any

778
00:33:27,010 --> 00:33:28,690
binaries on the host system you're not

779
00:33:28,690 --> 00:33:30,610
allowed to install software there run

780
00:33:30,610 --> 00:33:32,769
something there with just a normal host

781
00:33:32,769 --> 00:33:36,669
system that is monitored and then you

782
00:33:36,669 --> 00:33:38,350
don't have any software packs so there

783
00:33:38,350 --> 00:33:40,659
are no parks in the host in the guest or

784
00:33:40,659 --> 00:33:43,330
in the virtualization software so

785
00:33:43,330 --> 00:33:46,059
absolutely no way to exploit something

786
00:33:46,059 --> 00:33:48,010
in software to get data out of the

787
00:33:48,010 --> 00:33:51,880
virtual machine and what is the solution

788
00:33:51,880 --> 00:33:54,309
here we can implement a coverage handle

789
00:33:54,309 --> 00:33:56,679
in Travis script so we have this house

790
00:33:56,679 --> 00:33:59,320
system and most of us would have a

791
00:33:59,320 --> 00:34:00,940
browser running on the host system if

792
00:34:00,940 --> 00:34:03,399
it's connected to internet and therefore

793
00:34:03,399 --> 00:34:06,070
we can also run JavaScript inside the

794
00:34:06,070 --> 00:34:08,739
browser which is considered to be safe

795
00:34:08,739 --> 00:34:11,909
and we can use the DRM as a side channel

796
00:34:11,909 --> 00:34:14,589
every computer will have DRM in there

797
00:34:14,589 --> 00:34:17,139
and the DRM is of course shared between

798
00:34:17,139 --> 00:34:18,869
the virtual machine and the host system

799
00:34:18,869 --> 00:34:21,609
so we have side-channel here we know the

800
00:34:21,609 --> 00:34:24,879
time differences and we have this travel

801
00:34:24,879 --> 00:34:26,469
script running on the host system inside

802
00:34:26,469 --> 00:34:27,510
the

803
00:34:27,510 --> 00:34:30,520
the only thing we have to do is get the

804
00:34:30,520 --> 00:34:32,830
victim to visit our page with this

805
00:34:32,830 --> 00:34:35,199
trauma script so we have also seen that

806
00:34:35,199 --> 00:34:37,239
in a demo at the beginning with this

807
00:34:37,239 --> 00:34:39,429
Firefox running with the JavaScript on

808
00:34:39,429 --> 00:34:42,280
the page and it was to receive a foreign

809
00:34:42,280 --> 00:34:46,690
information and we use this Romy's

810
00:34:46,690 --> 00:34:52,060
attack primitive we shout before so the

811
00:34:52,060 --> 00:34:54,280
only thing is we have descendant to

812
00:34:54,280 --> 00:34:55,659
receive I agree on a bank at the

813
00:34:55,659 --> 00:34:57,670
beginning so this is hard-coded in the

814
00:34:57,670 --> 00:34:59,740
application we can choose any of the

815
00:34:59,740 --> 00:35:03,430
banks and then inside the VM we have

816
00:35:03,430 --> 00:35:05,650
this binary running this malware or

817
00:35:05,650 --> 00:35:07,750
whatever that wants to exfiltrate the

818
00:35:07,750 --> 00:35:09,760
data from the virtual machine to the

819
00:35:09,760 --> 00:35:12,940
Internet and in the JavaScript we have

820
00:35:12,940 --> 00:35:15,400
this script running that just matches

821
00:35:15,400 --> 00:35:17,560
access time to the data we can match

822
00:35:17,560 --> 00:35:20,200
access time also in JavaScript and see

823
00:35:20,200 --> 00:35:22,930
if if there was a row conflict or not

824
00:35:22,930 --> 00:35:25,930
and if the sender inside the virtual

825
00:35:25,930 --> 00:35:28,450
machine wants to send data out it

826
00:35:28,450 --> 00:35:30,460
accesses its data inside the virtual

827
00:35:30,460 --> 00:35:33,700
machine to send a 1 and if it does

828
00:35:33,700 --> 00:35:35,770
nothing then that's interpreted by the

829
00:35:35,770 --> 00:35:37,660
JavaScript just a low access time as a

830
00:35:37,660 --> 00:35:41,800
zero and it looks something like that so

831
00:35:41,800 --> 00:35:43,330
that's an actual measurement from the

832
00:35:43,330 --> 00:35:47,380
JavaScript we see you can really see the

833
00:35:47,380 --> 00:35:50,890
differences between row conflicts and

834
00:35:50,890 --> 00:35:54,369
row hits so we have this low and high

835
00:35:54,369 --> 00:35:57,220
access times and we did always a few

836
00:35:57,220 --> 00:35:58,810
measurements for every bit so to be

837
00:35:58,810 --> 00:36:01,180
absolutely sure that's correct so in

838
00:36:01,180 --> 00:36:03,580
this case we did at 10 meter runs per

839
00:36:03,580 --> 00:36:06,280
bit we sent and we can do an overlay

840
00:36:06,280 --> 00:36:09,670
here use the average very simple see the

841
00:36:09,670 --> 00:36:12,010
0 and the 1 bits that are transmitted

842
00:36:12,010 --> 00:36:13,990
from the virtual machine to the

843
00:36:13,990 --> 00:36:17,290
javascript in the browser and the actual

844
00:36:17,290 --> 00:36:20,440
communication is based on packets we

845
00:36:20,440 --> 00:36:22,270
don't want to stream the data because if

846
00:36:22,270 --> 00:36:25,150
we lose one of bits or more bits then we

847
00:36:25,150 --> 00:36:27,400
are out of synchronization and the whole

848
00:36:27,400 --> 00:36:30,130
data is corrupted so we decided to use

849
00:36:30,130 --> 00:36:33,250
packets here with a two-bit preamble to

850
00:36:33,250 --> 00:36:35,619
see that there's a packet starting with

851
00:36:35,619 --> 00:36:37,480
an error detection codes because of

852
00:36:37,480 --> 00:36:39,310
course we sometimes have it flips 2g

853
00:36:39,310 --> 00:36:40,100
noise

854
00:36:40,100 --> 00:36:42,290
or scheduling interrupts so we have an

855
00:36:42,290 --> 00:36:43,760
error detection in there that detects

856
00:36:43,760 --> 00:36:46,130
this corrupt packets then of course we

857
00:36:46,130 --> 00:36:47,630
need a sequence number to have free

858
00:36:47,630 --> 00:36:50,300
transmission working and with that we

859
00:36:50,300 --> 00:36:53,840
can reliably transmit data so the demo

860
00:36:53,840 --> 00:36:55,790
at the beginning we have approximately

861
00:36:55,790 --> 00:36:59,180
11 bits per second that might not sound

862
00:36:59,180 --> 00:37:02,150
very fast but it's absolutely reliable

863
00:37:02,150 --> 00:37:04,280
you've seen it in the beginning we have

864
00:37:04,280 --> 00:37:07,850
zero percent errors and that can still

865
00:37:07,850 --> 00:37:10,640
be improved so we have multiple ways to

866
00:37:10,640 --> 00:37:13,970
improve that for example by using fewer

867
00:37:13,970 --> 00:37:16,400
retransmissions which means we have to

868
00:37:16,400 --> 00:37:18,800
somehow correct the errors we only have

869
00:37:18,800 --> 00:37:21,380
error detection in there that discards

870
00:37:21,380 --> 00:37:23,630
packets that are destroyed but we could

871
00:37:23,630 --> 00:37:25,670
go for error correction forward error

872
00:37:25,670 --> 00:37:28,280
correction and correct any bit flips we

873
00:37:28,280 --> 00:37:32,000
encounter and then we can also go for

874
00:37:32,000 --> 00:37:33,890
multi-threading the new JavaScript

875
00:37:33,890 --> 00:37:35,180
standard allows us to have

876
00:37:35,180 --> 00:37:37,340
multi-threading in the browser so we can

877
00:37:37,340 --> 00:37:39,500
transmit multiple multiple bits in

878
00:37:39,500 --> 00:37:43,550
parallel using different banks so we try

879
00:37:43,550 --> 00:37:46,430
to the native code and we get up to 500

880
00:37:46,430 --> 00:37:48,260
96 kilobits per second

881
00:37:48,260 --> 00:37:51,440
between CPUs and inside a virtual

882
00:37:51,440 --> 00:37:54,620
machine so that's pretty fast but still

883
00:37:54,620 --> 00:37:56,990
for stealing data from a virtual machine

884
00:37:56,990 --> 00:38:00,650
to the internet imagine credit cards or

885
00:38:00,650 --> 00:38:03,050
private keys 11 bits per second without

886
00:38:03,050 --> 00:38:07,730
any errors is still fast enough good and

887
00:38:07,730 --> 00:38:10,970
now that we had now that you know how

888
00:38:10,970 --> 00:38:13,760
the demo worked with another goodie that

889
00:38:13,760 --> 00:38:15,440
we can do with this DRM reverse

890
00:38:15,440 --> 00:38:19,400
engineering so many of you probably

891
00:38:19,400 --> 00:38:21,230
already thought this is somehow maps to

892
00:38:21,230 --> 00:38:23,570
row hammer especially if you were paying

893
00:38:23,570 --> 00:38:26,540
attention during the introduction and it

894
00:38:26,540 --> 00:38:28,850
does map quite well so let me just do a

895
00:38:28,850 --> 00:38:32,000
recap of how row hammer actually works

896
00:38:32,000 --> 00:38:34,550
the thing with capacitors is that they

897
00:38:34,550 --> 00:38:36,530
don't just lead charge when you read

898
00:38:36,530 --> 00:38:39,560
them out they leak charge over time all

899
00:38:39,560 --> 00:38:44,420
by themselves for this reason we need to

900
00:38:44,420 --> 00:38:46,490
refresh DRAM every once in a while and

901
00:38:46,490 --> 00:38:50,330
how we do that is we read the row into

902
00:38:50,330 --> 00:38:50,910
the robot

903
00:38:50,910 --> 00:38:52,650
for and right at back of the capacitors

904
00:38:52,650 --> 00:38:54,539
are all refreshed

905
00:38:54,539 --> 00:38:56,940
this happens every 64 milliseconds and

906
00:38:56,940 --> 00:39:03,930
normal computers all the time so the

907
00:39:03,930 --> 00:39:07,289
thing is that cells leaks faster upon

908
00:39:07,289 --> 00:39:09,000
proximate access that is if a

909
00:39:09,000 --> 00:39:12,869
neighboring cell is accessed the cell

910
00:39:12,869 --> 00:39:16,230
will leak faster and this means if we do

911
00:39:16,230 --> 00:39:19,500
enough proximate access bits will start

912
00:39:19,500 --> 00:39:22,200
to flip because capacitors will drain

913
00:39:22,200 --> 00:39:24,839
charge will no longer be charged and the

914
00:39:24,839 --> 00:39:30,809
bit will be zero afterwards so how do we

915
00:39:30,809 --> 00:39:32,880
do this in practice well we already know

916
00:39:32,880 --> 00:39:34,530
that we can activate a ro copied into

917
00:39:34,530 --> 00:39:36,270
the row buffer and return it to the CPU

918
00:39:36,270 --> 00:39:38,579
from there now because it's already in

919
00:39:38,579 --> 00:39:40,380
the row buffer we need to access another

920
00:39:40,380 --> 00:39:44,609
row to get proximate access so we pick

921
00:39:44,609 --> 00:39:46,230
the green row here our annex and stop

922
00:39:46,230 --> 00:39:48,420
and get copied to the row buffer we have

923
00:39:48,420 --> 00:39:50,640
our approximate axes and then we go back

924
00:39:50,640 --> 00:39:53,160
to the yellow green row yellow and bam

925
00:39:53,160 --> 00:39:57,960
we have bit flips so this is how ro

926
00:39:57,960 --> 00:40:01,819
hammer works in the two minute version

927
00:40:02,960 --> 00:40:08,250
the problem with ro hammer is where are

928
00:40:08,250 --> 00:40:09,900
the victim row and where are the

929
00:40:09,900 --> 00:40:12,869
neighboring rows having a gigabyte worth

930
00:40:12,869 --> 00:40:14,760
of memory gigabytes worth of memory in

931
00:40:14,760 --> 00:40:16,829
your computer you have have to search a

932
00:40:16,829 --> 00:40:18,329
long time to find actually something

933
00:40:18,329 --> 00:40:20,369
that really maps well to victim data

934
00:40:20,369 --> 00:40:22,740
because you don't want anything from the

935
00:40:22,740 --> 00:40:26,119
victim you want the important data and

936
00:40:26,119 --> 00:40:29,220
the first solution by se ponen do lien

937
00:40:29,220 --> 00:40:32,160
in their Google and blog post was

938
00:40:32,160 --> 00:40:35,069
spraying spraying some very old method

939
00:40:35,069 --> 00:40:36,420
that hackus has been using for a long

940
00:40:36,420 --> 00:40:39,299
time and it works by filling memory with

941
00:40:39,299 --> 00:40:41,819
security relevant information and just

942
00:40:41,819 --> 00:40:44,510
by poor chance rule it's something

943
00:40:44,510 --> 00:40:46,680
randomly if the memory is full of

944
00:40:46,680 --> 00:40:47,039
something

945
00:40:47,039 --> 00:40:50,039
security relevant what they did was page

946
00:40:50,039 --> 00:40:52,710
table entries you remember we discussed

947
00:40:52,710 --> 00:40:54,930
page table really shortly this is the

948
00:40:54,930 --> 00:40:57,480
entire security system for the memory

949
00:40:57,480 --> 00:41:00,299
subsystem of the Intel x86 meaning if

950
00:41:00,299 --> 00:41:02,670
you flip it in a page table weird things

951
00:41:02,670 --> 00:41:04,560
can happen and security can be

952
00:41:04,560 --> 00:41:07,740
so severely broken they also did an

953
00:41:07,740 --> 00:41:11,010
attack on the chrome sandbox the Native

954
00:41:11,010 --> 00:41:14,070
Client and here they did not spray page

955
00:41:14,070 --> 00:41:16,620
tables they sprayed sanity checking code

956
00:41:16,620 --> 00:41:20,250
so if somebody write and that plugin for

957
00:41:20,250 --> 00:41:22,140
a new Native Client in a malicious way

958
00:41:22,140 --> 00:41:23,970
there's lots and lots of sanity checking

959
00:41:23,970 --> 00:41:26,070
code in there and if you start flipping

960
00:41:26,070 --> 00:41:28,980
bits randomly Santa at some point in

961
00:41:28,980 --> 00:41:31,260
time you'll hit the sanity checking code

962
00:41:31,260 --> 00:41:33,270
and it will no longer check for sanity

963
00:41:33,270 --> 00:41:35,610
but for insanity and we have a security

964
00:41:35,610 --> 00:41:37,890
break and we can leave the Native Client

965
00:41:37,890 --> 00:41:41,910
sandbox a problem with this method is

966
00:41:41,910 --> 00:41:45,060
not everything can be sprayed imagine

967
00:41:45,060 --> 00:41:47,790
attacking a private key say you want to

968
00:41:47,790 --> 00:41:49,740
flip a bit in a private key so you can

969
00:41:49,740 --> 00:41:53,220
factor it afterwards well it's kind of

970
00:41:53,220 --> 00:41:54,510
hot to tell a victim that she should

971
00:41:54,510 --> 00:41:57,120
copy his private key all over the memory

972
00:41:57,120 --> 00:42:02,850
that life doesn't work that way so there

973
00:42:02,850 --> 00:42:06,840
was a talk here at blackhat Europe

974
00:42:06,840 --> 00:42:10,140
earlier flipping Shoei and what they

975
00:42:10,140 --> 00:42:12,860
figured out was to use deduplication

976
00:42:12,860 --> 00:42:15,600
deduplication is when an operating

977
00:42:15,600 --> 00:42:18,450
system or virtualizer is idle he starts

978
00:42:18,450 --> 00:42:20,820
searching for identical pages in

979
00:42:20,820 --> 00:42:23,670
physical memory once he find the

980
00:42:23,670 --> 00:42:26,160
identical pages in memory he uses the

981
00:42:26,160 --> 00:42:28,860
page table and system to map them into

982
00:42:28,860 --> 00:42:32,010
the same physical data so that each

983
00:42:32,010 --> 00:42:33,870
client access to fills the same physical

984
00:42:33,870 --> 00:42:37,710
data but have their own version of the

985
00:42:37,710 --> 00:42:41,880
data this actually turns out to leak

986
00:42:41,880 --> 00:42:44,250
physical addresses the way it works is

987
00:42:44,250 --> 00:42:46,170
you allocate a very large buffer you

988
00:42:46,170 --> 00:42:48,030
start hammering a random you see where

989
00:42:48,030 --> 00:42:50,910
your bit flips are then you modify the

990
00:42:50,910 --> 00:42:52,620
page to match that what you want to

991
00:42:52,620 --> 00:42:54,600
break in the attacker and then you sit

992
00:42:54,600 --> 00:42:56,880
around and wait for the deduplication to

993
00:42:56,880 --> 00:42:59,610
find your page merge the page with that

994
00:42:59,610 --> 00:43:03,030
of the victim and then you can start

995
00:43:03,030 --> 00:43:04,290
hammering on the same place as your

996
00:43:04,290 --> 00:43:06,510
Hemet before and you'll soon flip a bit

997
00:43:06,510 --> 00:43:09,720
in the victims context the problem with

998
00:43:09,720 --> 00:43:11,790
this method is that deduplication is

999
00:43:11,790 --> 00:43:15,750
turned off in any serious cloud the

1000
00:43:15,750 --> 00:43:18,380
series is in quotation marks I

1001
00:43:18,380 --> 00:43:20,000
really mean it quite literally I think

1002
00:43:20,000 --> 00:43:23,360
if you do not if you use deduplication

1003
00:43:23,360 --> 00:43:24,590
in your cloud you are not a serious

1004
00:43:24,590 --> 00:43:27,110
cloud provider now although it's default

1005
00:43:27,110 --> 00:43:28,760
off in most operating system not just

1006
00:43:28,760 --> 00:43:30,410
because of row hammer but because there

1007
00:43:30,410 --> 00:43:33,200
are there attacks and deduplication it's

1008
00:43:33,200 --> 00:43:35,950
just a bad idea

1009
00:43:35,950 --> 00:43:39,500
so this is where we come in we know the

1010
00:43:39,500 --> 00:43:41,780
mapping function meaning if we have

1011
00:43:41,780 --> 00:43:43,850
physical address addresses of the victim

1012
00:43:43,850 --> 00:43:46,280
data then we can actually calculate

1013
00:43:46,280 --> 00:43:48,950
where his stuff is in DRAM we can

1014
00:43:48,950 --> 00:43:51,770
calculate where the rows that we need to

1015
00:43:51,770 --> 00:43:53,960
attack the victim is we can calculate

1016
00:43:53,960 --> 00:43:57,250
everything and some other researchers

1017
00:43:57,250 --> 00:44:00,560
they are quoted here found out they

1018
00:44:00,560 --> 00:44:02,210
could actually use that to hit a private

1019
00:44:02,210 --> 00:44:04,760
key and flip a bit once you flip a bit

1020
00:44:04,760 --> 00:44:06,920
in our psyche you can actually factor it

1021
00:44:06,920 --> 00:44:09,800
and figure out what the real key was the

1022
00:44:09,800 --> 00:44:11,990
real problem here is for this attack to

1023
00:44:11,990 --> 00:44:15,819
work you need physical addresses

1024
00:44:16,210 --> 00:44:18,470
classically we have the prop pitch page

1025
00:44:18,470 --> 00:44:23,840
map but that is now privileged in part

1026
00:44:23,840 --> 00:44:27,800
due to row hammer however I co-authored

1027
00:44:27,800 --> 00:44:30,380
a paper recently that show that on most

1028
00:44:30,380 --> 00:44:31,880
operating system we are capable of

1029
00:44:31,880 --> 00:44:33,410
getting physical addresses from virtual

1030
00:44:33,410 --> 00:44:37,250
addresses even on privileged and there

1031
00:44:37,250 --> 00:44:39,020
are other kinds of leaks for example if

1032
00:44:39,020 --> 00:44:42,380
you Lee should you leave using not using

1033
00:44:42,380 --> 00:44:43,850
four kilobyte pages would start using

1034
00:44:43,850 --> 00:44:45,500
lot pages two megabyte or one gigabyte

1035
00:44:45,500 --> 00:44:48,230
pages then you leak a lot of bits of the

1036
00:44:48,230 --> 00:44:51,470
physical address as well and the way the

1037
00:44:51,470 --> 00:44:53,570
cache works actually turns out to leak

1038
00:44:53,570 --> 00:44:55,250
information about physical addresses as

1039
00:44:55,250 --> 00:44:57,770
well so knowing the mapping function

1040
00:44:57,770 --> 00:44:59,990
actually brings you very very far in

1041
00:44:59,990 --> 00:45:02,810
terms of figuring out where this stuff

1042
00:45:02,810 --> 00:45:05,780
is you want to row hammer there is a

1043
00:45:05,780 --> 00:45:09,020
very interesting application here yeah

1044
00:45:09,020 --> 00:45:12,260
it was once thought that only ddr3 RAM

1045
00:45:12,260 --> 00:45:13,820
was vulnerable to throw him a problem

1046
00:45:13,820 --> 00:45:16,790
because testing it did not turn off any

1047
00:45:16,790 --> 00:45:17,420
bit flips

1048
00:45:17,420 --> 00:45:19,550
turns out the ddr4 it's much more

1049
00:45:19,550 --> 00:45:21,170
resilient to row hammer but it doesn't

1050
00:45:21,170 --> 00:45:24,200
ruled it out however knowing the mapping

1051
00:45:24,200 --> 00:45:28,010
function we could as the first team do

1052
00:45:28,010 --> 00:45:30,980
bet bit flips and ddr4 Ram because we

1053
00:45:30,980 --> 00:45:31,790
could very

1054
00:45:31,790 --> 00:45:34,610
efficiently takut a row we could we know

1055
00:45:34,610 --> 00:45:36,350
the exact neighbors and we can just

1056
00:45:36,350 --> 00:45:37,610
start looking for them instead of

1057
00:45:37,610 --> 00:45:39,800
looking for stuff in the entire memory

1058
00:45:39,800 --> 00:45:42,590
and this is what enabled us to do the

1059
00:45:42,590 --> 00:45:46,430
first bit flips in ddr4 Ram so there's a

1060
00:45:46,430 --> 00:45:49,360
fourth solution and this goes back to

1061
00:45:49,360 --> 00:45:53,360
the spying stuff if we were able to

1062
00:45:53,360 --> 00:45:57,170
invoke victim code safe you can make him

1063
00:45:57,170 --> 00:45:58,790
use this private key by accessing his

1064
00:45:58,790 --> 00:46:01,790
website well then you can use the row

1065
00:46:01,790 --> 00:46:03,650
miss primitive to locate the bank

1066
00:46:03,650 --> 00:46:07,460
workers in and if you're very lucky you

1067
00:46:07,460 --> 00:46:10,930
get to get to be in the same row as the

1068
00:46:10,930 --> 00:46:13,640
know as the victim and then you can

1069
00:46:13,640 --> 00:46:15,710
locate the exact row where he is using

1070
00:46:15,710 --> 00:46:17,800
this buying method we saw a show before

1071
00:46:17,800 --> 00:46:21,260
of course this isn't perfect but it does

1072
00:46:21,260 --> 00:46:25,850
to actually improve accuracy if you

1073
00:46:25,850 --> 00:46:28,460
remember we're very likely that is very

1074
00:46:28,460 --> 00:46:30,170
very likely to be in the same Bank as

1075
00:46:30,170 --> 00:46:32,300
the victim because a bank is 265

1076
00:46:32,300 --> 00:46:34,490
megabytes meaning we're able to tell

1077
00:46:34,490 --> 00:46:39,950
what 265 megabytes the attacker the

1078
00:46:39,950 --> 00:46:43,370
victim important information is in and

1079
00:46:43,370 --> 00:46:45,380
that is a lot less than gigabytes worth

1080
00:46:45,380 --> 00:46:48,680
of memory also we can map our attack

1081
00:46:48,680 --> 00:46:50,810
aggressor rows very efficiently to the

1082
00:46:50,810 --> 00:46:54,860
same 256 megabytes and we could get

1083
00:46:54,860 --> 00:46:57,700
lucky and have row

1084
00:46:57,700 --> 00:47:01,760
colocation with the victim anyways that

1085
00:47:01,760 --> 00:47:06,200
is pretty much it for our talk today we

1086
00:47:06,200 --> 00:47:09,290
hope that we have made clear that we

1087
00:47:09,290 --> 00:47:10,760
think that DRM design is security

1088
00:47:10,760 --> 00:47:12,980
relevant we hope we have showed that we

1089
00:47:12,980 --> 00:47:15,140
can covertly actual trade information

1090
00:47:15,140 --> 00:47:17,150
that we can spy on other software and

1091
00:47:17,150 --> 00:47:19,340
that we can enable efficient and

1092
00:47:19,340 --> 00:47:21,860
targeted brohamer attacks so if there

1093
00:47:21,860 --> 00:47:23,600
are any questions we'll be happy to take

1094
00:47:23,600 --> 00:47:25,750
them

1095
00:47:43,890 --> 00:47:49,720
it's really difficult to to mitigate you

1096
00:47:49,720 --> 00:47:52,990
saw in the slides that they moved its

1097
00:47:52,990 --> 00:47:56,640
you put ever more bits into the lower 11

1098
00:47:56,640 --> 00:47:59,470
they do that to get more parallelism in

1099
00:47:59,470 --> 00:48:02,260
the ramp so you can read sequentially it

1100
00:48:02,260 --> 00:48:04,600
is really difficult there is one thing

1101
00:48:04,600 --> 00:48:07,600
the cache is in a way for much much much

1102
00:48:07,600 --> 00:48:08,950
of this stuff so if you don't have

1103
00:48:08,950 --> 00:48:10,300
access to the seal flush instruction

1104
00:48:10,300 --> 00:48:11,470
that gets much more difficult much

1105
00:48:11,470 --> 00:48:15,610
slower we lose accuracy we have to don't

1106
00:48:15,610 --> 00:48:18,130
have any really good medications you can

1107
00:48:18,130 --> 00:48:19,780
do stuff like detective with performance

1108
00:48:19,780 --> 00:48:21,340
counters but you're bound to round up

1109
00:48:21,340 --> 00:48:26,050
with false positives so it's it's a

1110
00:48:26,050 --> 00:48:28,480
difficult thing it's a design issue in

1111
00:48:28,480 --> 00:48:31,050
my opinion

1112
00:48:39,760 --> 00:48:41,890
not that I know of Michael do you know

1113
00:48:41,890 --> 00:48:43,720
something no not nothing off

1114
00:48:43,720 --> 00:48:46,840
no one should remember here it's not

1115
00:48:46,840 --> 00:48:48,849
really into this issue here the core

1116
00:48:48,849 --> 00:48:51,369
reason is dear M and into to my

1117
00:48:51,369 --> 00:48:54,550
knowledge does not produce dear M you

1118
00:48:54,550 --> 00:48:56,590
could probably reproduce these kinds of

1119
00:48:56,590 --> 00:48:59,500
tack on any processor it doesn't depend

1120
00:48:59,500 --> 00:49:05,200
on the processor it is about the DRAM so

1121
00:49:05,200 --> 00:49:07,660
we also did this attack on arm so it

1122
00:49:07,660 --> 00:49:10,330
works the same on smartphones and for

1123
00:49:10,330 --> 00:49:12,369
AMD for example they even release the

1124
00:49:12,369 --> 00:49:14,290
function so that's not really their

1125
00:49:14,290 --> 00:49:16,540
problem that and it'll doesn't make it

1126
00:49:16,540 --> 00:49:18,849
as secure by keeping this as a secret

1127
00:49:18,849 --> 00:49:21,820
it just manages tip step harder for us

1128
00:49:21,820 --> 00:49:23,530
because we had to reverse-engineer it

1129
00:49:23,530 --> 00:49:27,369
first on on into London arm but yeah I

1130
00:49:27,369 --> 00:49:31,800
don't think they see it as their problem

1131
00:49:51,930 --> 00:49:54,789
it turns out the D mapping of the Rose

1132
00:49:54,789 --> 00:49:59,109
is really primitive so we don't actually

1133
00:49:59,109 --> 00:50:03,819
do that but you but the mapping is

1134
00:50:03,819 --> 00:50:06,750
really primitive

1135
00:50:13,760 --> 00:50:16,870
any more questions

1136
00:50:21,410 --> 00:50:24,310
okay

1137
00:50:29,820 --> 00:50:37,230
yeah yeah you know where artists will be

1138
00:50:37,230 --> 00:50:40,080
hot with this one because I left office

1139
00:50:40,080 --> 00:50:42,900
back there Oh God

1140
00:50:42,900 --> 00:50:48,240
maybe you were just run over yeah if

1141
00:50:48,240 --> 00:50:49,290
there's any other questions

1142
00:50:49,290 --> 00:50:52,640
we can take them we won't meanwhile

1143
00:50:56,330 --> 00:51:00,319
Maikel slide number 30

