1
00:00:00,030 --> 00:00:02,129
okay oh good afternoon everyone does a

2
00:00:02,129 --> 00:00:04,080
sense for attending our session and

3
00:00:04,080 --> 00:00:06,569
we're going to talk about routine every

4
00:00:06,569 --> 00:00:08,670
Android from expectation exploitation

5
00:00:08,670 --> 00:00:10,950
which basically will be focusing on the

6
00:00:10,950 --> 00:00:13,440
security of the Android kernel in our

7
00:00:13,440 --> 00:00:15,030
stitching and first on brief

8
00:00:15,030 --> 00:00:18,420
introduction oh my name is Jane is

9
00:00:18,420 --> 00:00:23,070
decent and aka Remy we both work for the

10
00:00:23,070 --> 00:00:26,160
King lack of Tencent and we are really

11
00:00:26,160 --> 00:00:28,710
into the Android kernel security because

12
00:00:28,710 --> 00:00:31,019
we focusing on rooting all kinds of

13
00:00:31,019 --> 00:00:33,420
Android devices and our lab has been

14
00:00:33,420 --> 00:00:35,340
working on Android security and internal

15
00:00:35,340 --> 00:00:37,230
security for more than 50 years and

16
00:00:37,230 --> 00:00:39,770
there is a quota quite proud that we are

17
00:00:39,770 --> 00:00:42,809
contributed multiple no malicious

18
00:00:42,809 --> 00:00:44,040
routing solution which are quite

19
00:00:44,040 --> 00:00:47,129
welcomed by the communities including

20
00:00:47,129 --> 00:00:49,440
the pimple root which was released the

21
00:00:49,440 --> 00:00:51,600
last year to be one of the first the

22
00:00:51,600 --> 00:00:54,780
root utility released for the Galaxy s6

23
00:00:54,780 --> 00:00:58,680
and also the CVE 2015 AKO 5 which was

24
00:00:58,680 --> 00:01:01,379
released this year and actually project

25
00:01:01,379 --> 00:01:03,180
Google to reduce its first security

26
00:01:03,180 --> 00:01:05,760
advisory of Android during the history

27
00:01:05,760 --> 00:01:08,850
so these are two major general routine

28
00:01:08,850 --> 00:01:11,250
tools we worked on and also we release

29
00:01:11,250 --> 00:01:13,740
the multiple quite quite some device

30
00:01:13,740 --> 00:01:16,500
specific alerts which will also be

31
00:01:16,500 --> 00:01:19,170
discussed in today's session ok so

32
00:01:19,170 --> 00:01:21,750
here's the agenda audit of our session

33
00:01:21,750 --> 00:01:23,820
and today we are going to discuss a very

34
00:01:23,820 --> 00:01:25,830
interesting attack surface of the

35
00:01:25,830 --> 00:01:28,200
Android kernel which is named a wireless

36
00:01:28,200 --> 00:01:31,530
extension so this actually existed

37
00:01:31,530 --> 00:01:33,540
almost every Android device because most

38
00:01:33,540 --> 00:01:35,790
of the devices comes with a Wi-Fi chip

39
00:01:35,790 --> 00:01:38,549
step so during the session we are going

40
00:01:38,549 --> 00:01:40,770
to give you a general overview of how

41
00:01:40,770 --> 00:01:43,579
this interface looks like and what I

42
00:01:43,579 --> 00:01:47,640
what are the potential weakness spot and

43
00:01:47,640 --> 00:01:49,049
how we actually discovered on a very

44
00:01:49,049 --> 00:01:50,909
excited the following is that most of

45
00:01:50,909 --> 00:01:52,110
the time we're depending on three

46
00:01:52,110 --> 00:01:55,290
different cases they are affecting not

47
00:01:55,290 --> 00:01:58,649
just the different SOC but also coming

48
00:01:58,649 --> 00:02:00,210
with different types of vulnerabilities

49
00:02:00,210 --> 00:02:03,810
and a lot but not least we also mention

50
00:02:03,810 --> 00:02:05,850
Google's latest medication which helps

51
00:02:05,850 --> 00:02:08,459
reduce and mitigate the attacks from

52
00:02:08,459 --> 00:02:11,008
this attack service ok so first thing

53
00:02:11,008 --> 00:02:12,840
first let's get into the

54
00:02:12,840 --> 00:02:14,970
although the section so what is the

55
00:02:14,970 --> 00:02:17,849
Wi-Fi all called Wireless extension of

56
00:02:17,849 --> 00:02:20,819
Android we all know that beneath the

57
00:02:20,819 --> 00:02:23,129
Android he needs order order graphic

58
00:02:23,129 --> 00:02:25,200
stuff we still have any enough kernel

59
00:02:25,200 --> 00:02:27,780
there and for Linux kernel only a lot of

60
00:02:27,780 --> 00:02:29,640
contributions from different communities

61
00:02:29,640 --> 00:02:31,319
and the world of them that actually are

62
00:02:31,319 --> 00:02:34,260
well at extension which was just done by

63
00:02:34,260 --> 00:02:38,819
Jean he is a GP lab researcher I think

64
00:02:38,819 --> 00:02:43,069
whom main concern of research is

65
00:02:43,069 --> 00:02:45,870
communication and network protocols and

66
00:02:45,870 --> 00:02:48,269
logical stuff so he was quite concerned

67
00:02:48,269 --> 00:02:52,650
by the difference of different wireless

68
00:02:52,650 --> 00:02:55,200
drivers in early times of back in 1997

69
00:02:55,200 --> 00:02:58,769
so he would like to design a wellness a

70
00:02:58,769 --> 00:03:02,069
standard a neutral way that user can

71
00:03:02,069 --> 00:03:04,470
manipulate any well as networking device

72
00:03:04,470 --> 00:03:07,650
that they set in some standard for the

73
00:03:07,650 --> 00:03:10,200
wireless devices drivers for dizziness

74
00:03:10,200 --> 00:03:12,629
kernel so eventually key technologies

75
00:03:12,629 --> 00:03:15,480
wireless extension API which was

76
00:03:15,480 --> 00:03:18,359
implemented in almost all major wireless

77
00:03:18,359 --> 00:03:20,310
solution vendors by almost all the major

78
00:03:20,310 --> 00:03:23,340
West ocean vendors but well be replaced

79
00:03:23,340 --> 00:03:29,099
by CFG old 802 11 which should be a

80
00:03:29,099 --> 00:03:32,069
little newer but also still supplied to

81
00:03:32,069 --> 00:03:34,530
it backward compatibility so if there's

82
00:03:34,530 --> 00:03:37,170
some some issue in the implementation of

83
00:03:37,170 --> 00:03:39,450
the wild life extension it is still

84
00:03:39,450 --> 00:03:41,910
potentially can be attractive even the

85
00:03:41,910 --> 00:03:44,519
device come to it with the latter

86
00:03:44,519 --> 00:03:47,459
well expansion standard and also it

87
00:03:47,459 --> 00:03:51,239
doesn't mean that 52 802 element is more

88
00:03:51,239 --> 00:03:52,889
secure because we are also the

89
00:03:52,889 --> 00:03:53,760
invalidated

90
00:03:53,760 --> 00:03:56,280
discovered in the implementation of this

91
00:03:56,280 --> 00:03:59,459
API okay so let's look into the

92
00:03:59,459 --> 00:04:01,230
interface itself let's log into the

93
00:04:01,230 --> 00:04:03,000
wireless extension API and it actually

94
00:04:03,000 --> 00:04:06,690
comes in two major interfaces one of the

95
00:04:06,690 --> 00:04:08,519
interface actually is implemented at a

96
00:04:08,519 --> 00:04:11,790
progress note which just provides some

97
00:04:11,790 --> 00:04:14,459
features which we basically just just

98
00:04:14,459 --> 00:04:17,820
read that file that under prog net and

99
00:04:17,820 --> 00:04:20,579
wealth so just get the phone or seed

100
00:04:20,579 --> 00:04:22,770
some set some studies dictator of

101
00:04:22,770 --> 00:04:23,430
different

102
00:04:23,430 --> 00:04:26,190
well that interfaces which does not

103
00:04:26,190 --> 00:04:28,889
provide too many features here so this

104
00:04:28,889 --> 00:04:31,290
is not likely to be some kind of major

105
00:04:31,290 --> 00:04:33,330
attack surface of the weather attention

106
00:04:33,330 --> 00:04:36,030
the other one is almost everyone's

107
00:04:36,030 --> 00:04:38,010
favorite especially for Linux kernel

108
00:04:38,010 --> 00:04:39,810
resolution security assertions which is

109
00:04:39,810 --> 00:04:42,900
the i/o control interface so the our

110
00:04:42,900 --> 00:04:45,090
country interface will provide us that a

111
00:04:45,090 --> 00:04:49,199
group of commands and different

112
00:04:49,199 --> 00:04:51,750
functionalities which allows you to set

113
00:04:51,750 --> 00:04:53,910
or peripheral parameters for that device

114
00:04:53,910 --> 00:04:57,090
or we say may also issue commands to the

115
00:04:57,090 --> 00:04:58,560
device while important able certain

116
00:04:58,560 --> 00:05:00,539
weather features are turned off so it

117
00:05:00,539 --> 00:05:03,270
provides a very feature-rich interface

118
00:05:03,270 --> 00:05:06,180
which can be a potential attack surface

119
00:05:06,180 --> 00:05:08,760
by the way and let's take a look at how

120
00:05:08,760 --> 00:05:10,289
this all control interface was

121
00:05:10,289 --> 00:05:12,600
implemented so we all know that I'll

122
00:05:12,600 --> 00:05:14,760
control interfaces comma with command

123
00:05:14,760 --> 00:05:16,919
and it's actually reserved the southern

124
00:05:16,919 --> 00:05:21,240
command range from 8000 to ad FS they

125
00:05:21,240 --> 00:05:23,550
actually 256 commands are available in

126
00:05:23,550 --> 00:05:26,280
this range and they are they are

127
00:05:26,280 --> 00:05:29,970
actually just reserved just for the

128
00:05:29,970 --> 00:05:32,940
wildest extension commands so in theory

129
00:05:32,940 --> 00:05:34,740
dictates of the many many features

130
00:05:34,740 --> 00:05:37,410
implemented in this interface and

131
00:05:37,410 --> 00:05:39,479
actually the some kind of quite

132
00:05:39,479 --> 00:05:43,979
interesting you forget an assessment so

133
00:05:43,979 --> 00:05:46,590
it's the command comes with a odd number

134
00:05:46,590 --> 00:05:49,560
that will be a get operation or

135
00:05:49,560 --> 00:05:52,229
otherwise a drop the obsess operation

136
00:05:52,229 --> 00:05:54,900
just as defined in these two macros well

137
00:05:54,900 --> 00:05:57,570
this is quite quite clear but well this

138
00:05:57,570 --> 00:05:59,479
also call some kind of product will be

139
00:05:59,479 --> 00:06:03,030
this application trouble later in a case

140
00:06:03,030 --> 00:06:06,270
studies so besides this there are is

141
00:06:06,270 --> 00:06:08,630
nearly any kind of access control

142
00:06:08,630 --> 00:06:10,979
implemented on this our control command

143
00:06:10,979 --> 00:06:13,020
which also makes it a great attack

144
00:06:13,020 --> 00:06:15,120
interface and later there'll be a more

145
00:06:15,120 --> 00:06:17,940
detailed research and one more more more

146
00:06:17,940 --> 00:06:19,349
is not the important thing is that

147
00:06:19,349 --> 00:06:22,169
according to the documents of the Wi-Fi

148
00:06:22,169 --> 00:06:25,139
or wireless extension which is in in the

149
00:06:25,139 --> 00:06:27,840
in the comment of this header file said

150
00:06:27,840 --> 00:06:30,900
that this is not magic so almost every

151
00:06:30,900 --> 00:06:34,250
feature needs to be implemented by the

152
00:06:34,250 --> 00:06:37,090
SOC vendor for them that

153
00:06:37,090 --> 00:06:40,370
cheerful uniform implementation in front

154
00:06:40,370 --> 00:06:42,920
of everything them by the soft vendor so

155
00:06:42,920 --> 00:06:45,830
which means that they are more likely to

156
00:06:45,830 --> 00:06:47,420
be some issues in the code rather than

157
00:06:47,420 --> 00:06:53,000
just made life difficult so this is a

158
00:06:53,000 --> 00:06:56,360
this is a generic code path if you issue

159
00:06:56,360 --> 00:06:59,750
a io culture command on a socket which

160
00:06:59,750 --> 00:07:03,260
is open ie with write what will happen

161
00:07:03,260 --> 00:07:05,450
and we're pointing it out because this

162
00:07:05,450 --> 00:07:07,520
also describes the access control which

163
00:07:07,520 --> 00:07:10,430
is import by the Linux kernel where you

164
00:07:10,430 --> 00:07:12,950
actually issued in ultra gentlemen so

165
00:07:12,950 --> 00:07:14,750
starting from this our control we know

166
00:07:14,750 --> 00:07:16,310
that there is a lat them the

167
00:07:16,310 --> 00:07:17,690
identification module here which may

168
00:07:17,690 --> 00:07:20,750
actually put some enforcement on the

169
00:07:20,750 --> 00:07:22,460
operations which is a users with

170
00:07:22,460 --> 00:07:25,490
application can do and in our case for

171
00:07:25,490 --> 00:07:28,280
Android at 16 X so the SS policy is

172
00:07:28,280 --> 00:07:30,470
going to be important our own cultural

173
00:07:30,470 --> 00:07:33,230
command and if our hundreds not not

174
00:07:33,230 --> 00:07:35,660
allowed or for for this process it will

175
00:07:35,660 --> 00:07:37,940
be actually denied and going all the way

176
00:07:37,940 --> 00:07:40,610
down there there's almost no any kind of

177
00:07:40,610 --> 00:07:43,820
access control until before actually

178
00:07:43,820 --> 00:07:45,590
calling to the driver and the vendor

179
00:07:45,590 --> 00:07:48,430
specific code there is going to be a

180
00:07:48,430 --> 00:07:51,170
consent that they are going to check the

181
00:07:51,170 --> 00:07:53,570
actual project map and see whether this

182
00:07:53,570 --> 00:07:56,000
is actually a set object if it is set

183
00:07:56,000 --> 00:07:57,470
which means it is actually right

184
00:07:57,470 --> 00:07:59,480
operation and the NetID means the

185
00:07:59,480 --> 00:08:01,280
credibility of net administration is

186
00:08:01,280 --> 00:08:04,310
going to be enforced and there will be a

187
00:08:04,310 --> 00:08:06,740
sort of normal users with audio

188
00:08:06,740 --> 00:08:08,090
scalability will not be able to operate

189
00:08:08,090 --> 00:08:10,400
on that socket twist at the

190
00:08:10,400 --> 00:08:13,220
specification document so as you can see

191
00:08:13,220 --> 00:08:15,850
from this diagram basically get almost

192
00:08:15,850 --> 00:08:19,550
no other access control is applied on

193
00:08:19,550 --> 00:08:23,510
this so um we can see that this is

194
00:08:23,510 --> 00:08:26,630
actually a great service to to play with

195
00:08:26,630 --> 00:08:29,390
so we'll be looking into three major

196
00:08:29,390 --> 00:08:32,750
wireless weather Wi-Fi device vendors

197
00:08:32,750 --> 00:08:35,179
which was pursuant to welcome the

198
00:08:35,179 --> 00:08:37,250
filament court on a third was immediate

199
00:08:37,250 --> 00:08:39,890
expertise also covered most of the Wi-Fi

200
00:08:39,890 --> 00:08:41,870
chips which is being used in the Android

201
00:08:41,870 --> 00:08:44,570
devices nowadays on market so if we can

202
00:08:44,570 --> 00:08:46,550
find one big is being opened and

203
00:08:46,550 --> 00:08:49,580
basically we can route of the devices

204
00:08:49,580 --> 00:08:51,800
and our first case will be a

205
00:08:51,800 --> 00:08:53,600
vulnerability that calls LeBonheur

206
00:08:53,600 --> 00:08:56,660
dating in Qualcomm what vaccination okay

207
00:08:56,660 --> 00:08:59,000
so this model is it was reported I buy a

208
00:08:59,000 --> 00:09:02,360
anonymous source which in the in the

209
00:09:02,360 --> 00:09:05,240
boyfriend was translated as in Jeju

210
00:09:05,240 --> 00:09:07,040
which is actually lewodan Jack means

211
00:09:07,040 --> 00:09:09,620
anonymous in Chinese pretty interesting

212
00:09:09,620 --> 00:09:15,500
as I know is a CV number 20 2015 5 70

213
00:09:15,500 --> 00:09:19,400
and in the advisory released by Qualcomm

214
00:09:19,400 --> 00:09:22,070
so it is also notable that it picks

215
00:09:22,070 --> 00:09:24,470
something which is caused by the odd I

216
00:09:24,470 --> 00:09:26,960
will control number rules we mentioned

217
00:09:26,960 --> 00:09:30,560
earlier which is add some specific

218
00:09:30,560 --> 00:09:36,320
controls atoms with specific chests in

219
00:09:36,320 --> 00:09:40,190
the control handles themselves adhere so

220
00:09:40,190 --> 00:09:42,710
actually we can see that this rule this

221
00:09:42,710 --> 00:09:46,850
odd number rule is not being a well

222
00:09:46,850 --> 00:09:48,980
respected of all the well-known by the

223
00:09:48,980 --> 00:09:53,060
vendors so we implemented it way

224
00:09:53,060 --> 00:09:54,740
implementing those our control commands

225
00:09:54,740 --> 00:09:56,840
they are not actually strictly for the

226
00:09:56,840 --> 00:10:00,200
other set command into even numbers and

227
00:10:00,200 --> 00:10:02,900
order commander second as into odd

228
00:10:02,900 --> 00:10:05,960
numbers and a get commands into even

229
00:10:05,960 --> 00:10:07,820
numbers so this actually cost some kind

230
00:10:07,820 --> 00:10:10,670
of privacy League in those devices so we

231
00:10:10,670 --> 00:10:13,880
have to enforce certain access control

232
00:10:13,880 --> 00:10:16,100
in the code itself instead of relying on

233
00:10:16,100 --> 00:10:18,590
the original access control designed by

234
00:10:18,590 --> 00:10:21,830
the wireless accession so I decide that

235
00:10:21,830 --> 00:10:24,650
more importantly is a stack overflow

236
00:10:24,650 --> 00:10:28,070
vulnerability 16 this advisory but just

237
00:10:28,070 --> 00:10:30,490
one problem here so we all know that

238
00:10:30,490 --> 00:10:32,840
stack poor texture has been widely

239
00:10:32,840 --> 00:10:35,330
enforced in most of Android the kernels

240
00:10:35,330 --> 00:10:38,180
I mean in the recent was three years so

241
00:10:38,180 --> 00:10:40,520
why that a stack overflow vulnerability

242
00:10:40,520 --> 00:10:43,820
still survives in a well at exchanging

243
00:10:43,820 --> 00:10:45,740
driver because there should be a

244
00:10:45,740 --> 00:10:49,790
security but the fact is that the stack

245
00:10:49,790 --> 00:10:52,910
protector compiler extension is not as

246
00:10:52,910 --> 00:10:56,000
good as we thought it actually misses a

247
00:10:56,000 --> 00:10:57,920
lot of functions which actually demoniac

248
00:10:57,920 --> 00:11:00,440
certain level of protection according to

249
00:11:00,440 --> 00:11:03,230
some statistics file I think

250
00:11:03,230 --> 00:11:06,860
by Google it only cost like 2% of all

251
00:11:06,860 --> 00:11:09,290
the functions but among the many of them

252
00:11:09,290 --> 00:11:12,020
actually demand protection because they

253
00:11:12,020 --> 00:11:14,540
have certain buffers on the stack which

254
00:11:14,540 --> 00:11:18,350
user may write into and in this case

255
00:11:18,350 --> 00:11:23,630
actually stack protector that protector

256
00:11:23,630 --> 00:11:27,110
strong was being recommended by Qualcomm

257
00:11:27,110 --> 00:11:29,930
and Google both of them after this model

258
00:11:29,930 --> 00:11:31,460
was addressed that it should be used to

259
00:11:31,460 --> 00:11:35,570
by the by by the kernel if they ever

260
00:11:35,570 --> 00:11:37,220
want to compile the kernel instead of

261
00:11:37,220 --> 00:11:38,720
the step protector because after

262
00:11:38,720 --> 00:11:40,550
interested some issues in or just

263
00:11:40,550 --> 00:11:43,310
architecture and also this stack process

264
00:11:43,310 --> 00:11:45,980
to strong functioning requests GCC 4.9

265
00:11:45,980 --> 00:11:50,480
or later version which is a certain

266
00:11:50,480 --> 00:11:53,300
recent version of the GCC so the volar

267
00:11:53,300 --> 00:11:55,280
is the vulnerability sauce is sitting

268
00:11:55,280 --> 00:11:57,830
the functioning of WLAN HDD that filter

269
00:11:57,830 --> 00:11:59,200
and we can see on the right side that

270
00:11:59,200 --> 00:12:01,490
this data structure actually contains

271
00:12:01,490 --> 00:12:06,620
certain certain char are released and

272
00:12:06,620 --> 00:12:13,780
highlighted so it contains two agrees

273
00:12:13,780 --> 00:12:16,850
with the size of 8 bytes and if you

274
00:12:16,850 --> 00:12:18,860
check the stock protected code what you

275
00:12:18,860 --> 00:12:20,930
will be aware that actually advises the

276
00:12:20,930 --> 00:12:24,500
limit I mean any any buffer equal to or

277
00:12:24,500 --> 00:12:26,180
bigger than 8 bytes are going to be

278
00:12:26,180 --> 00:12:28,280
protected by the stop protector but the

279
00:12:28,280 --> 00:12:30,470
problem here is that this structure is

280
00:12:30,470 --> 00:12:33,590
actually nested in another structure as

281
00:12:33,590 --> 00:12:36,950
a remember and this actually traded

282
00:12:36,950 --> 00:12:38,720
above in the GCC which this original

283
00:12:38,720 --> 00:12:41,050
that protects that does not check method

284
00:12:41,050 --> 00:12:43,190
structure thing I agree

285
00:12:43,190 --> 00:12:44,990
so it's all these buffers are being

286
00:12:44,990 --> 00:12:47,150
overlooked so ders that's why does that

287
00:12:47,150 --> 00:12:49,670
carry does not apply and eventually

288
00:12:49,670 --> 00:12:51,020
leads to the vulnerability we are

289
00:12:51,020 --> 00:12:54,350
talking about this in decision and here

290
00:12:54,350 --> 00:12:57,920
are just the code which causes the stack

291
00:12:57,920 --> 00:12:59,990
overflow it's very straightforward

292
00:12:59,990 --> 00:13:02,390
lack of chat on the length when being

293
00:13:02,390 --> 00:13:04,520
when the arguments are being passed

294
00:13:04,520 --> 00:13:07,910
eternal from the user space so on the

295
00:13:07,910 --> 00:13:09,980
other words the user actually has a

296
00:13:09,980 --> 00:13:13,070
direct control over those events and the

297
00:13:13,070 --> 00:13:15,020
contents so a perfect

298
00:13:15,020 --> 00:13:17,630
overflow vulnerability and also the

299
00:13:17,630 --> 00:13:19,940
trick is reverse very very thing which

300
00:13:19,940 --> 00:13:22,940
is over overflow the stack and override

301
00:13:22,940 --> 00:13:26,690
the LR and try to get the PC control

302
00:13:26,690 --> 00:13:29,390
over the whole process but just the one

303
00:13:29,390 --> 00:13:31,730
thing to mention here that actually on

304
00:13:31,730 --> 00:13:35,060
on TP for devices it's quite hard to

305
00:13:35,060 --> 00:13:37,010
exploit it because if you are

306
00:13:37,010 --> 00:13:40,670
controlling the X 29 X 19 registering

307
00:13:40,670 --> 00:13:42,110
sort of the instead of the conventional

308
00:13:42,110 --> 00:13:45,800
ones usually X 0 X 1 X 2 will be easier

309
00:13:45,800 --> 00:13:48,589
to make a GOG chain to actually achieve

310
00:13:48,589 --> 00:13:52,490
the DDD target of root so we actually

311
00:13:52,490 --> 00:13:55,190
use a modified version earlier version

312
00:13:55,190 --> 00:13:57,050
of dropper I miss combo package on that

313
00:13:57,050 --> 00:14:00,350
and to find a pirate budget first to

314
00:14:00,350 --> 00:14:04,130
transfer the at 19 and X 29 control to 0

315
00:14:04,130 --> 00:14:06,800
and X x1 and then there will be 2

316
00:14:06,800 --> 00:14:09,080
Commission of rejecting which then we

317
00:14:09,080 --> 00:14:13,010
can use to actually achieve the goal of

318
00:14:13,010 --> 00:14:15,860
leaking the stack pointer and eventually

319
00:14:15,860 --> 00:14:18,470
override ad litem so we can gain kind of

320
00:14:18,470 --> 00:14:22,190
read and write after that okay so this

321
00:14:22,190 --> 00:14:23,899
is the first case and you can see that

322
00:14:23,899 --> 00:14:25,940
actually a stack overflow vulnerability

323
00:14:25,940 --> 00:14:28,700
can still exist in modern devices along

324
00:14:28,700 --> 00:14:30,709
with the compiler expansion of that

325
00:14:30,709 --> 00:14:33,700
protection and literally let me well

326
00:14:33,700 --> 00:14:36,399
introduced to other more interesting

327
00:14:36,399 --> 00:14:39,430
creases which are tracked into different

328
00:14:39,430 --> 00:14:42,079
wireless vendors and also he will

329
00:14:42,079 --> 00:14:43,550
conclude with the Google's latest

330
00:14:43,550 --> 00:14:49,670
modification of this issue compensation

331
00:14:49,670 --> 00:14:52,700
case the discovery of that common

332
00:14:52,700 --> 00:14:54,440
ability put our attention focused on

333
00:14:54,440 --> 00:14:57,709
stability and so I continue the unusual

334
00:14:57,709 --> 00:14:59,180
work and find some other vulnerabilities

335
00:14:59,180 --> 00:15:02,149
Omega tax whe and the Broadcom WT

336
00:15:02,149 --> 00:15:06,290
and this part is a different section

337
00:15:06,290 --> 00:15:08,510
overflow and it's obviously of its photo

338
00:15:08,510 --> 00:15:11,060
so I just finished exporting those parts

339
00:15:11,060 --> 00:15:12,890
in two days without any hard coding

340
00:15:12,890 --> 00:15:15,410
single address and a lot of detail

341
00:15:15,410 --> 00:15:17,630
reporting to Google yet but taking into

342
00:15:17,630 --> 00:15:20,240
account last is very easy to find this

343
00:15:20,240 --> 00:15:22,760
vulnerability by coding so am not very

344
00:15:22,760 --> 00:15:23,340
spry

345
00:15:23,340 --> 00:15:25,440
that another researcher from Google

346
00:15:25,440 --> 00:15:27,870
traductor Auto reported to Google at

347
00:15:27,870 --> 00:15:30,300
December 2015

348
00:15:30,300 --> 00:15:32,940
so the three number of the second case

349
00:15:32,940 --> 00:15:37,740
is CVE 2016 and 0h 20 HP affected or

350
00:15:37,740 --> 00:15:42,480
MIDI track devices actually it's a very

351
00:15:42,480 --> 00:15:47,460
classic copy from user issue and the whe

352
00:15:47,460 --> 00:15:49,470
handle or coffee into backward from the

353
00:15:49,470 --> 00:15:51,330
user space to the data traction without

354
00:15:51,330 --> 00:15:53,730
verifying that the sides of include

355
00:15:53,730 --> 00:15:55,560
buffer is less than the sides of aqua

356
00:15:55,560 --> 00:15:58,650
buffer so leading to the introduction

357
00:15:58,650 --> 00:16:02,400
over towards the destination address is

358
00:16:02,400 --> 00:16:04,950
a you see OID path and I am going to

359
00:16:04,950 --> 00:16:12,630
highlight and is it is a 4050 a 96 bytes

360
00:16:12,630 --> 00:16:15,300
in data fraction and the one of our code

361
00:16:15,300 --> 00:16:16,890
has been shown on the slide so you can

362
00:16:16,890 --> 00:16:18,720
see that the data length is provided by

363
00:16:18,720 --> 00:16:22,470
user and can be any value so in this way

364
00:16:22,470 --> 00:16:23,850
we got a chance to overwrite other

365
00:16:23,850 --> 00:16:26,250
arrivals just behind a UC or any path

366
00:16:26,250 --> 00:16:30,690
and in the data section so how to

367
00:16:30,690 --> 00:16:33,600
exploit a tactical idea to achieve

368
00:16:33,600 --> 00:16:35,490
canonical execution is or writing a

369
00:16:35,490 --> 00:16:38,730
global function puncher located behind a

370
00:16:38,730 --> 00:16:45,360
UCI debug and so I'm going to highlight

371
00:16:45,360 --> 00:16:48,510
and I'm going to override this function

372
00:16:48,510 --> 00:16:51,870
pointer and in this case I'm going to

373
00:16:51,870 --> 00:16:55,770
try to hours over either PFW then remove

374
00:16:55,770 --> 00:16:58,560
to remove actually to avoid or chrono

375
00:16:58,560 --> 00:17:00,900
crash I better not rush other unrelated

376
00:17:00,900 --> 00:17:04,260
global variables in gray so I better

377
00:17:04,260 --> 00:17:06,690
know the data of this unrelated

378
00:17:06,690 --> 00:17:09,300
variables and I also I have to know the

379
00:17:09,300 --> 00:17:13,650
relative of start to the AUC or a deeper

380
00:17:13,650 --> 00:17:16,800
so I need to know the author here so

381
00:17:16,800 --> 00:17:19,770
another one ability which is linking the

382
00:17:19,770 --> 00:17:21,359
value of this value are about is

383
00:17:21,359 --> 00:17:26,670
necessary so fortunately another command

384
00:17:26,670 --> 00:17:29,010
completely classical property there is

385
00:17:29,010 --> 00:17:31,050
no function on the red shark will call

386
00:17:31,050 --> 00:17:33,780
the 22 user so we just can't the value

387
00:17:33,780 --> 00:17:36,130
of this variables be handled

388
00:17:36,130 --> 00:17:43,510
you see I'm going to highlight here the

389
00:17:43,510 --> 00:17:46,900
two you sleep of debug shows this were

390
00:17:46,900 --> 00:17:50,260
ever it's just behind this looks

391
00:17:50,260 --> 00:17:52,210
miserable is just behind the aut

392
00:17:52,210 --> 00:17:55,270
valuable in this reaction as we turn out

393
00:17:55,270 --> 00:17:57,580
to copy the bikini team arrivals to the

394
00:17:57,580 --> 00:18:00,850
user space so elected so all its variety

395
00:18:00,850 --> 00:18:03,280
can be lived so Microsoft will not

396
00:18:03,280 --> 00:18:07,270
rational anymore so now it's time to

397
00:18:07,270 --> 00:18:09,550
allocate on pages in you displayed and

398
00:18:09,550 --> 00:18:11,170
copy the shellcode to this video and

399
00:18:11,170 --> 00:18:13,900
learn as a direct-mapped address of

400
00:18:13,900 --> 00:18:16,090
dispute internal it's also known as the

401
00:18:16,090 --> 00:18:18,810
return to direct mapped memory which is

402
00:18:18,810 --> 00:18:23,080
presidency by materials summer camel is

403
00:18:23,080 --> 00:18:25,030
as black as bureau of two years ago I

404
00:18:25,030 --> 00:18:27,970
really admire his work and please also

405
00:18:27,970 --> 00:18:30,550
note these pages are useful internal

406
00:18:30,550 --> 00:18:33,610
space magic activities so that I can

407
00:18:33,610 --> 00:18:36,190
exclude the kernel code without any Gog

408
00:18:36,190 --> 00:18:38,440
or our key cadence or hard-coded cannot

409
00:18:38,440 --> 00:18:40,420
see borders they just excused sheltered

410
00:18:40,420 --> 00:18:44,710
in the kernel then I will since I have

411
00:18:44,710 --> 00:18:46,720
already authorized the PF doubler

412
00:18:46,720 --> 00:18:48,790
removed with the address of the

413
00:18:48,790 --> 00:18:51,730
shellcode and so finally I will call a

414
00:18:51,730 --> 00:18:55,180
Java API which is start Wi-Fi enabled so

415
00:18:55,180 --> 00:18:57,790
large in this way system process which

416
00:18:57,790 --> 00:19:01,150
is empty k WM key which is provided by

417
00:19:01,150 --> 00:19:05,830
the empty calendar will call the TFW and

418
00:19:05,830 --> 00:19:10,050
remove to excuse shellcode eternal space

419
00:19:10,140 --> 00:19:13,270
so finally we will gain route privilege

420
00:19:13,270 --> 00:19:15,250
and reach out after that we will recover

421
00:19:15,250 --> 00:19:19,570
a modified global variables so that's

422
00:19:19,570 --> 00:19:23,350
the second let's the second case so here

423
00:19:23,350 --> 00:19:25,300
come the final case and I think the

424
00:19:25,300 --> 00:19:27,610
previous two changes are kind of warning

425
00:19:27,610 --> 00:19:29,530
us because the sort of exploitations is

426
00:19:29,530 --> 00:19:31,450
much complicated than the previous two

427
00:19:31,450 --> 00:19:33,790
case so firstly it is a user perforate

428
00:19:33,790 --> 00:19:36,520
you to the risk condition and the noted

429
00:19:36,520 --> 00:19:38,890
problem is the window is very small so I

430
00:19:38,890 --> 00:19:41,110
need to refill the period objecting a

431
00:19:41,110 --> 00:19:43,060
very short time this is the biggest

432
00:19:43,060 --> 00:19:46,210
challenge of this case and we also

433
00:19:46,210 --> 00:19:48,370
introduced two separated issue the first

434
00:19:48,370 --> 00:19:49,360
one is a lack of

435
00:19:49,360 --> 00:19:51,610
really check we're protecting the TT

436
00:19:51,610 --> 00:19:55,270
Alfonso so that you can any local

437
00:19:55,270 --> 00:19:58,270
application can call the WCW FTL console

438
00:19:58,270 --> 00:19:58,929
to the

439
00:19:58,929 --> 00:20:02,770
Broadcom driver and attack it the second

440
00:20:02,770 --> 00:20:04,929
line is the user preference for the WL

441
00:20:04,929 --> 00:20:10,720
enjoyed by PI off concurrently so this

442
00:20:10,720 --> 00:20:12,880
one ability will affected all premium

443
00:20:12,880 --> 00:20:15,250
and and joyful at Samsung Galaxy stories

444
00:20:15,250 --> 00:20:18,820
and valley materials and also a Google

445
00:20:18,820 --> 00:20:23,260
Nexus 6p and many other my other phones

446
00:20:23,260 --> 00:20:29,309
with a high price and before I introduce

447
00:20:29,309 --> 00:20:32,559
how the how the vulnerability is going

448
00:20:32,559 --> 00:20:35,710
and how to exploit there is another

449
00:20:35,710 --> 00:20:37,419
interesting fact is that the token

450
00:20:37,419 --> 00:20:39,460
usually is covered by running some test

451
00:20:39,460 --> 00:20:42,250
code while pressing the Wi-Fi part

452
00:20:42,250 --> 00:20:43,720
turning on and off repeatedly and

453
00:20:43,720 --> 00:20:46,030
crediting and then the kernel crash and

454
00:20:46,030 --> 00:20:48,910
current under crash is reproducible so

455
00:20:48,910 --> 00:20:50,860
after analyzing the crash I realized I

456
00:20:50,860 --> 00:20:52,600
have found the user user profit by or

457
00:20:52,600 --> 00:20:56,919
accidentally so by analyzing the crash

458
00:20:56,919 --> 00:20:58,840
message from Colonel you tell Zilla the

459
00:20:58,840 --> 00:21:01,540
name of process who triggered a crash is

460
00:21:01,540 --> 00:21:04,870
throughout 128 it means that it's a

461
00:21:04,870 --> 00:21:06,549
vendor's to LP belongs to the same

462
00:21:06,549 --> 00:21:08,290
server assistance or is a whole process

463
00:21:08,290 --> 00:21:11,169
of Android running in user space and it

464
00:21:11,169 --> 00:21:13,720
has several working motors watch you

465
00:21:13,720 --> 00:21:15,850
handle the Thunder apathy request from

466
00:21:15,850 --> 00:21:18,700
other applications and by analyzing the

467
00:21:18,700 --> 00:21:21,210
code stack of the crash you can see that

468
00:21:21,210 --> 00:21:24,640
it is pressed while calling the whe

469
00:21:24,640 --> 00:21:33,610
outrun show and so this crosstalk belong

470
00:21:33,610 --> 00:21:37,799
to the direct e l function handler so

471
00:21:37,799 --> 00:21:40,540
after that by reproducing and debugging

472
00:21:40,540 --> 00:21:42,160
the issues again again finally I

473
00:21:42,160 --> 00:21:44,049
realized life is values afraid you to

474
00:21:44,049 --> 00:21:46,150
the risk condition between attack first

475
00:21:46,150 --> 00:21:48,790
our control requests and v servers our

476
00:21:48,790 --> 00:21:51,130
control request handled by the Box

477
00:21:51,130 --> 00:21:57,340
integrity so adjusted that there are

478
00:21:57,340 --> 00:21:59,200
there will be two separated issue the

479
00:21:59,200 --> 00:22:01,900
first usually is civilly 2016

480
00:22:01,900 --> 00:22:06,430
and to four thousand five the WL and

481
00:22:06,430 --> 00:22:08,440
Royal previously empty is able to be

482
00:22:08,440 --> 00:22:10,720
called with insufficient privilege it

483
00:22:10,720 --> 00:22:12,700
means that any local application can

484
00:22:12,700 --> 00:22:15,070
also call this function to change the

485
00:22:15,070 --> 00:22:18,100
status of our achieved a directory so in

486
00:22:18,100 --> 00:22:20,320
that image you can still add the DHD l

487
00:22:20,320 --> 00:22:23,730
control will be processed will process

488
00:22:23,730 --> 00:22:31,630
this command which is abyssal which is a

489
00:22:31,630 --> 00:22:38,620
kayo C DV private plus one and but there

490
00:22:38,620 --> 00:22:40,450
is another permission charge just be

491
00:22:40,450 --> 00:22:43,270
founded is over there but it's too late

492
00:22:43,270 --> 00:22:45,970
the the the left out of our control

493
00:22:45,970 --> 00:22:47,770
comma has already be handled without any

494
00:22:47,770 --> 00:22:50,680
permission check so that's why it is a

495
00:22:50,680 --> 00:22:55,900
issue and so it just go into that WL

496
00:22:55,900 --> 00:22:58,840
Android pre command in this function a

497
00:22:58,840 --> 00:23:01,240
large number of commands will be

498
00:23:01,240 --> 00:23:03,310
programs will be progress without any

499
00:23:03,310 --> 00:23:05,680
permission check and the most attractive

500
00:23:05,680 --> 00:23:11,950
to me the CMB starts and CMD stop here

501
00:23:11,950 --> 00:23:18,250
and here so you got listen with these

502
00:23:18,250 --> 00:23:20,460
commands will trigger the UF bug and

503
00:23:20,460 --> 00:23:24,190
after all authorized is if to swat

504
00:23:24,190 --> 00:23:27,280
disabling the Wi-Fi concurrently is why

505
00:23:27,280 --> 00:23:33,160
the UAF happened and okay so d here's

506
00:23:33,160 --> 00:23:35,380
some the second usually it just has no

507
00:23:35,380 --> 00:23:37,150
Stevie number and never appeared in

508
00:23:37,150 --> 00:23:38,920
Android security balaton but it's

509
00:23:38,920 --> 00:23:41,620
absolutely it's possible as a part it's

510
00:23:41,620 --> 00:23:43,210
quite simple it just remove one line

511
00:23:43,210 --> 00:23:52,780
code here oh sorry the slides crust just

512
00:23:52,780 --> 00:23:55,290
wait a second

513
00:24:03,870 --> 00:24:08,680
so let me jump to the slides I'm talking

514
00:24:08,680 --> 00:24:10,710
about

515
00:24:16,110 --> 00:24:18,030
perhaps I found another one ability

516
00:24:18,030 --> 00:24:30,990
accidentally Oh a thing is here okay

517
00:24:30,990 --> 00:24:33,110
so the patch just remove this line and

518
00:24:33,110 --> 00:24:37,080
it means that in case PCIe part already

519
00:24:37,080 --> 00:24:39,450
down it should not disabling that it

520
00:24:39,450 --> 00:24:41,610
should not disabled are killed calling

521
00:24:41,610 --> 00:24:43,590
anymore because when the part is done

522
00:24:43,590 --> 00:24:45,810
lots of resources and objects have been

523
00:24:45,810 --> 00:24:49,050
freed and to remove code will steal

524
00:24:49,050 --> 00:24:52,170
references resort it an object so it

525
00:24:52,170 --> 00:24:58,520
will trigger use after free bug but I

526
00:24:58,520 --> 00:25:01,200
found about accidentally but how can

527
00:25:01,200 --> 00:25:04,080
write how can I write a POC to trigger

528
00:25:04,080 --> 00:25:06,780
the UF bug so according to the analyze

529
00:25:06,780 --> 00:25:08,880
of Chrono Cross assaults the flowchart

530
00:25:08,880 --> 00:25:10,200
of use of a fluid should be like this

531
00:25:10,200 --> 00:25:13,410
and if two threads called the WL enjoyed

532
00:25:13,410 --> 00:25:16,290
by PI off simultaneously and at first

533
00:25:16,290 --> 00:25:18,600
the past age its apps so the first one

534
00:25:18,600 --> 00:25:20,760
will go through the yellow branch and my

535
00:25:20,760 --> 00:25:25,620
freezer as I in for here to a slice this

536
00:25:25,620 --> 00:25:27,360
function after ID touch feel free will

537
00:25:27,360 --> 00:25:30,690
free the actual info and finally in will

538
00:25:30,690 --> 00:25:33,390
start the backstage return so after that

539
00:25:33,390 --> 00:25:35,730
soon after the second story will go

540
00:25:35,730 --> 00:25:37,290
through the green branch because the

541
00:25:37,290 --> 00:25:39,710
birthdays has already been done here so

542
00:25:39,710 --> 00:25:42,960
it will call the college function and

543
00:25:42,960 --> 00:25:45,420
finally it will call the aside for racks

544
00:25:45,420 --> 00:25:52,160
to trigger the you topper freak but but

545
00:25:52,160 --> 00:25:54,960
unfortunately in fact we can't do that

546
00:25:54,960 --> 00:25:58,050
because if we want to call that function

547
00:25:58,050 --> 00:26:01,080
concurrently we need to call a DHD our

548
00:26:01,080 --> 00:26:03,750
control entry but this function is

549
00:26:03,750 --> 00:26:06,450
locked you can see a lock here so we

550
00:26:06,450 --> 00:26:09,120
conquer we can't call it concurrently so

551
00:26:09,120 --> 00:26:10,560
we need to find another solution because

552
00:26:10,560 --> 00:26:13,560
finally we which we are going to call it

553
00:26:13,560 --> 00:26:15,540
function card concurrently maybe you can

554
00:26:15,540 --> 00:26:17,670
find another way not wire HDL control

555
00:26:17,670 --> 00:26:22,890
but use another function to call it so

556
00:26:22,890 --> 00:26:25,290
fortunately the WL Android of a pair of

557
00:26:25,290 --> 00:26:28,890
AutoCAD be hardwired the tht stop

558
00:26:28,890 --> 00:26:32,500
the tasty sauce is here and by calling

559
00:26:32,500 --> 00:26:36,610
the TV nygel control with a command code

560
00:26:36,610 --> 00:26:39,670
which is as IOC SIF

561
00:26:39,670 --> 00:26:44,350
flags and but calling this function need

562
00:26:44,350 --> 00:26:46,960
requires the caps next meaning

563
00:26:46,960 --> 00:26:48,760
privileged wishes which we don't have

564
00:26:48,760 --> 00:26:52,870
because we are local applications only

565
00:26:52,870 --> 00:26:55,480
root user have this privilege but we can

566
00:26:55,480 --> 00:26:58,630
use another Java method to ask its

567
00:26:58,630 --> 00:27:01,090
server to do the favor so if we call the

568
00:27:01,090 --> 00:27:03,310
parameter which is set by first date and

569
00:27:03,310 --> 00:27:07,270
the tip server will help us to to call

570
00:27:07,270 --> 00:27:09,850
it L control and in the been destroyed

571
00:27:09,850 --> 00:27:11,980
and finally it will call the WL enjoyed

572
00:27:11,980 --> 00:27:14,740
myself so in this way we can call that

573
00:27:14,740 --> 00:27:18,520
function concurrently so here is a real

574
00:27:18,520 --> 00:27:20,920
flow chance of the UF attacker should

575
00:27:20,920 --> 00:27:23,980
create a thread to call the W error

576
00:27:23,980 --> 00:27:26,760
enjoy repel off to three large objects

577
00:27:26,760 --> 00:27:29,650
so he will create us right here and

578
00:27:29,650 --> 00:27:31,690
finally it will call the aside attached

579
00:27:31,690 --> 00:27:35,800
to free the SI info object after that he

580
00:27:35,800 --> 00:27:40,330
will call the field Java API from wired

581
00:27:40,330 --> 00:27:43,630
panel apt so the Installer will help us

582
00:27:43,630 --> 00:27:46,390
to call the WL Android well enjoyed

583
00:27:46,390 --> 00:27:50,200
Wi-Fi off concurrency so finally to add

584
00:27:50,200 --> 00:27:55,030
sugar the user for free so the physics

585
00:27:55,030 --> 00:27:56,920
of call so that's how we can control the

586
00:27:56,920 --> 00:28:00,040
code flow when you stop or happened if

587
00:28:00,040 --> 00:28:01,750
the refute object meets several

588
00:28:01,750 --> 00:28:05,830
requirements it will reach reach reach

589
00:28:05,830 --> 00:28:07,870
and macro here but before that we need

590
00:28:07,870 --> 00:28:12,280
to make sure that the path carafe is not

591
00:28:12,280 --> 00:28:16,210
equal to the tools for effects and the

592
00:28:16,210 --> 00:28:20,890
at all as the s ol ci5 should not much

593
00:28:20,890 --> 00:28:24,130
equal to Liza over CIP and the back type

594
00:28:24,130 --> 00:28:28,450
should not be either of them this

595
00:28:28,450 --> 00:28:30,700
variables are all the members of the

596
00:28:30,700 --> 00:28:33,160
fridge objects as I info so we can

597
00:28:33,160 --> 00:28:37,200
control that if we can review review the

598
00:28:37,200 --> 00:28:38,830
free object

599
00:28:38,830 --> 00:28:41,460
so finally we will reach

600
00:28:41,460 --> 00:28:44,039
crow here and you can see that fi is the

601
00:28:44,039 --> 00:28:46,289
freight object that you can control so

602
00:28:46,289 --> 00:28:49,320
here is a function pointer and here is

603
00:28:49,320 --> 00:28:51,600
the first argument both of them can be

604
00:28:51,600 --> 00:28:53,789
controlled by the tracker so in this way

605
00:28:53,789 --> 00:28:56,190
we can control the code flow and if

606
00:28:56,190 --> 00:29:00,899
killed Colonel code so since it's a user

607
00:29:00,899 --> 00:29:03,809
Africa tourist conditions so we need to

608
00:29:03,809 --> 00:29:05,880
care about the window you can see that

609
00:29:05,880 --> 00:29:08,460
the window is small I have already asked

610
00:29:08,460 --> 00:29:10,500
some print a loads in the kernel so it

611
00:29:10,500 --> 00:29:12,179
can tell you will object

612
00:29:12,179 --> 00:29:15,720
what's frayed and when it was reused in

613
00:29:15,720 --> 00:29:19,260
fact attacker only has point zero two

614
00:29:19,260 --> 00:29:22,590
seconds Yuri free to review the objects

615
00:29:22,590 --> 00:29:23,970
and excuse coding colonel

616
00:29:23,970 --> 00:29:26,039
so the objects refueling is a big

617
00:29:26,039 --> 00:29:31,620
challenge so let's talk about raising an

618
00:29:31,620 --> 00:29:33,929
object refueling if the reason failed

619
00:29:33,929 --> 00:29:35,490
nothing will be happy nothing will be

620
00:29:35,490 --> 00:29:38,370
happen except an error returns it laptop

621
00:29:38,370 --> 00:29:41,159
logic ok but if reading succeeds but

622
00:29:41,159 --> 00:29:44,490
refueling failed kernel crash so we have

623
00:29:44,490 --> 00:29:46,409
to find a way to spray the kernel heat

624
00:29:46,409 --> 00:29:49,890
efficiently and quickly and also in this

625
00:29:49,890 --> 00:29:51,840
case with natural cooling can show the

626
00:29:51,840 --> 00:29:54,390
data and the length of the refuel refuel

627
00:29:54,390 --> 00:29:57,450
objects so normally I will use the send

628
00:29:57,450 --> 00:29:59,370
a message to spread chronology and this

629
00:29:59,370 --> 00:30:04,890
come is still working ok so how to spray

630
00:30:04,890 --> 00:30:07,710
the chrono heat by Sun message

631
00:30:07,710 --> 00:30:10,770
firstly you I will create to process

632
00:30:10,770 --> 00:30:12,840
observer and trance and cleanse you

633
00:30:12,840 --> 00:30:17,480
standpipe over the TCP connection and

634
00:30:17,480 --> 00:30:20,850
using the term message but server should

635
00:30:20,850 --> 00:30:22,620
not respond lat

636
00:30:22,620 --> 00:30:25,020
just like the coins just like the

637
00:30:25,020 --> 00:30:28,730
message center you can see that here

638
00:30:28,730 --> 00:30:31,620
maybe the message header and in this

639
00:30:31,620 --> 00:30:34,320
structure you need to lock this function

640
00:30:34,320 --> 00:30:36,419
pointer message control point to the

641
00:30:36,419 --> 00:30:38,850
concepts you want to spray and act just

642
00:30:38,850 --> 00:30:41,340
as the server never responded symmetric

643
00:30:41,340 --> 00:30:43,049
request from trans the kernel buffer of

644
00:30:43,049 --> 00:30:44,640
thematic control will be fermenting

645
00:30:44,640 --> 00:30:47,700
permanently stay in the kernel heat so

646
00:30:47,700 --> 00:30:50,639
to spray to spray thieves in the kernel

647
00:30:50,639 --> 00:30:53,380
just create many pairs of server and

648
00:30:53,380 --> 00:31:01,300
and to the above step in this way we it

649
00:31:01,300 --> 00:31:04,990
has a 90% success rate to refill the

650
00:31:04,990 --> 00:31:08,800
field of charging in the point zero two

651
00:31:08,800 --> 00:31:11,470
seconds and the data and the length of

652
00:31:11,470 --> 00:31:13,570
the breed object can be freakin sold

653
00:31:13,570 --> 00:31:16,510
unfortunately the 3d object which is are

654
00:31:16,510 --> 00:31:20,070
trying info its allocated in came a log

655
00:31:20,070 --> 00:31:24,400
with the size 256 this approach will not

656
00:31:24,400 --> 00:31:26,410
will will be not working if the object

657
00:31:26,410 --> 00:31:32,770
is larger example object is 512 this

658
00:31:32,770 --> 00:31:35,740
will be filled because apricot so

659
00:31:35,740 --> 00:31:38,140
message will allocate each other's same

660
00:31:38,140 --> 00:31:41,050
size objects as an interference or with

661
00:31:41,050 --> 00:31:48,970
a spring so finally with with with

662
00:31:48,970 --> 00:31:52,150
approach we have talking about value

663
00:31:52,150 --> 00:31:53,590
will go to a kernel Constitution but

664
00:31:53,590 --> 00:31:55,540
after that you still have lots lots of

665
00:31:55,540 --> 00:31:59,620
works to do since the reactor

666
00:31:59,620 --> 00:32:01,660
restrictions you need to build the GOG

667
00:32:01,660 --> 00:32:04,030
gardens to perfect the restriction and

668
00:32:04,030 --> 00:32:06,100
the skill code in the kernel after that

669
00:32:06,100 --> 00:32:07,510
the first thing you need to do is

670
00:32:07,510 --> 00:32:09,910
manipulate the credential of your tax in

671
00:32:09,910 --> 00:32:12,850
other words you need to change your UID

672
00:32:12,850 --> 00:32:17,500
to 0 and change your security ID to 1 or

673
00:32:17,500 --> 00:32:20,830
2 the ID belong which is belong to the

674
00:32:20,830 --> 00:32:23,700
you need process so you need to you can

675
00:32:23,700 --> 00:32:25,990
you can but you can't you have had some

676
00:32:25,990 --> 00:32:28,900
active inequalities and you can also

677
00:32:28,900 --> 00:32:31,090
just the to actually disable the

678
00:32:31,090 --> 00:32:33,400
epidemics in the kernel so in this way

679
00:32:33,400 --> 00:32:35,200
you don't need to care about resetting

680
00:32:35,200 --> 00:32:39,220
poverty but after that you still need to

681
00:32:39,220 --> 00:32:41,790
bypass some modules plastic mitigations

682
00:32:41,790 --> 00:32:45,520
the most famous one is some socks and we

683
00:32:45,520 --> 00:32:48,400
have already disclosed how we pass the

684
00:32:48,400 --> 00:32:52,120
sentinels on galaxy s6 and apparently

685
00:32:52,120 --> 00:32:53,620
not too distant future we'll also

686
00:32:53,620 --> 00:32:57,490
introduce how to perfect the today's

687
00:32:57,490 --> 00:33:00,570
special comes on walks in the galaxy s7

688
00:33:00,570 --> 00:33:03,250
but knowledge can be called the yoga

689
00:33:03,250 --> 00:33:05,410
nobility are still not be fixed and

690
00:33:05,410 --> 00:33:11,920
maybe later so after we found so many

691
00:33:11,920 --> 00:33:14,530
well abilities and develop so many

692
00:33:14,530 --> 00:33:17,890
exploit about the WFT Google also

693
00:33:17,890 --> 00:33:18,850
realized Lots

694
00:33:18,850 --> 00:33:20,830
the WFD is a big potential attack

695
00:33:20,830 --> 00:33:23,830
surface I enjoyed so a new mitigation

696
00:33:23,830 --> 00:33:25,990
has been applied things to life and join

697
00:33:25,990 --> 00:33:28,120
security public in this year and the

698
00:33:28,120 --> 00:33:33,100
discovery of the CVE 2015 and zero 570

699
00:33:33,100 --> 00:33:35,440
which is the first case with

700
00:33:35,440 --> 00:33:37,480
transmissions put researchers and

701
00:33:37,480 --> 00:33:39,340
attention to the diversity but the

702
00:33:39,340 --> 00:33:42,580
second case just chose Google to reduce

703
00:33:42,580 --> 00:33:44,290
the sake they'll control formations

704
00:33:44,290 --> 00:33:48,640
filter you can see the lytic is the

705
00:33:48,640 --> 00:33:51,550
cache which this is a search for the

706
00:33:51,550 --> 00:33:54,130
mitigation and the district user has a

707
00:33:54,130 --> 00:33:56,710
same variety with the second case so I'm

708
00:33:56,710 --> 00:33:58,900
sure that's just the second our second

709
00:33:58,900 --> 00:34:00,670
case study just joke will go to reduce

710
00:34:00,670 --> 00:34:04,480
it to reduce the Chronos to reduce sake

711
00:34:04,480 --> 00:34:09,460
del tronto formation so in the latest

712
00:34:09,460 --> 00:34:12,510
exceeding exposure see now only a

713
00:34:12,510 --> 00:34:15,429
limited side of socket our controls can

714
00:34:15,429 --> 00:34:16,659
be a start by improving these

715
00:34:16,659 --> 00:34:19,360
applications and I'm not surprised that

716
00:34:19,360 --> 00:34:22,179
the private wtl controls artists a lot

717
00:34:22,179 --> 00:34:24,730
right now so if you want to call the

718
00:34:24,730 --> 00:34:29,260
Pyrates wtl control on updating Nexus

719
00:34:29,260 --> 00:34:31,840
device devices I'm afraid you will catch

720
00:34:31,840 --> 00:34:35,399
a b c t9 error from the turn on and

721
00:34:35,399 --> 00:34:41,069
light just like this

722
00:34:43,830 --> 00:34:51,250
so so finally is a conclusion so after

723
00:34:51,250 --> 00:34:53,050
we use three thought mentioned about

724
00:34:53,050 --> 00:34:55,270
roots large number of devotees with

725
00:34:55,270 --> 00:34:57,700
cocom magitek and the brought on by by

726
00:34:57,700 --> 00:34:59,800
cheap stocks i believed as the wrt

727
00:34:59,800 --> 00:35:04,510
private l control it was once also

728
00:35:04,510 --> 00:35:08,620
attack surface on Android kernel and the

729
00:35:08,620 --> 00:35:10,900
normal code in relief curl is really

730
00:35:10,900 --> 00:35:14,560
safe because it has in long time and so

731
00:35:14,560 --> 00:35:15,970
many researchers are working on large

732
00:35:15,970 --> 00:35:17,980
part the vineyard holder still is still

733
00:35:17,980 --> 00:35:22,060
buggy so but google reality though good

734
00:35:22,060 --> 00:35:25,450
job on surface protection in in this

735
00:35:25,450 --> 00:35:29,410
year because it is allowing the WSDL

736
00:35:29,410 --> 00:35:30,760
control is just one of their

737
00:35:30,760 --> 00:35:32,470
contributions also to some other works

738
00:35:32,470 --> 00:35:35,770
use to reduce the more and more attack

739
00:35:35,770 --> 00:35:38,590
surface on this kernel so you can check

740
00:35:38,590 --> 00:35:41,760
these blocks which which the article is

741
00:35:41,760 --> 00:35:44,500
producting and joy with more external

742
00:35:44,500 --> 00:35:47,560
differences for more details and but in

743
00:35:47,560 --> 00:35:50,140
summary for us routing and choice is

744
00:35:50,140 --> 00:35:52,270
becoming more and more challenging to

745
00:35:52,270 --> 00:35:55,240
route you enjoyed us again in futures we

746
00:35:55,240 --> 00:35:57,370
can try to fund some attack service

747
00:35:57,370 --> 00:35:59,550
little knowing just like regular tea or

748
00:35:59,550 --> 00:36:02,170
just discover another universal when

749
00:36:02,170 --> 00:36:05,020
ability in the january 6th all activity

750
00:36:05,020 --> 00:36:07,900
2015 and a ginger in the repair which is

751
00:36:07,900 --> 00:36:09,820
the AWACS are overrun because it

752
00:36:09,820 --> 00:36:13,780
happened in generated class or israel in

753
00:36:13,780 --> 00:36:16,270
fact it all enjoy automatic and maybe

754
00:36:16,270 --> 00:36:18,100
some of you have already heard that the

755
00:36:18,100 --> 00:36:20,410
dirty cow because it's really amazing

756
00:36:20,410 --> 00:36:24,820
and it's incredible for me but first we

757
00:36:24,820 --> 00:36:27,640
are good at finding the merit russian

758
00:36:27,640 --> 00:36:33,010
parks the not like the logical but so

759
00:36:33,010 --> 00:36:35,710
forth I enjoyed work is actually if we

760
00:36:35,710 --> 00:36:39,540
want to disable the uplink totally and

761
00:36:39,540 --> 00:36:42,910
we still need an exploitation but

762
00:36:42,910 --> 00:36:45,190
logical only can bypass track links but

763
00:36:45,190 --> 00:36:48,040
you cannot get the kernel memory of

764
00:36:48,040 --> 00:36:51,100
writing so I think it's not good for two

765
00:36:51,100 --> 00:36:54,850
writer to write or exploit with the

766
00:36:54,850 --> 00:36:56,330
recall

767
00:36:56,330 --> 00:36:59,320
so forest we still need to find another

768
00:36:59,320 --> 00:37:04,040
another kernel exploit in the future and

769
00:37:04,040 --> 00:37:06,410
the final way there's another way which

770
00:37:06,410 --> 00:37:09,080
is compromising the pre-tribulation

771
00:37:09,080 --> 00:37:11,630
process first and after that you can

772
00:37:11,630 --> 00:37:14,620
access some travelers you cannot be full

773
00:37:14,620 --> 00:37:17,720
so after that you can attacking the

774
00:37:17,720 --> 00:37:19,970
drivers which only acceptable to the

775
00:37:19,970 --> 00:37:21,860
privileged process this is another

776
00:37:21,860 --> 00:37:26,450
option but exploit but compromise a user

777
00:37:26,450 --> 00:37:28,940
user mode user mode process on Android

778
00:37:28,940 --> 00:37:31,460
is pretty hard I think it's just another

779
00:37:31,460 --> 00:37:35,300
hard work so ok that's all for our

780
00:37:35,300 --> 00:37:37,880
presentations thank you for attending

781
00:37:37,880 --> 00:37:40,430
and we really appreciate that so if you

782
00:37:40,430 --> 00:37:43,010
have questions you can ask not be happy

783
00:37:43,010 --> 00:38:01,460
to answer the question and a quick

784
00:38:01,460 --> 00:38:03,740
question about the hip spring method is

785
00:38:03,740 --> 00:38:07,490
to say that you're putting the quantity

786
00:38:07,490 --> 00:38:10,700
to spray in message control right what

787
00:38:10,700 --> 00:38:13,100
design yeah yeah yeah message so as far

788
00:38:13,100 --> 00:38:15,500
as I know isn't message control it goes

789
00:38:15,500 --> 00:38:18,020
through a sanitation check and when you

790
00:38:18,020 --> 00:38:21,200
send it via send a message for like so I

791
00:38:21,200 --> 00:38:26,590
descriptors and any kind of this in data

792
00:38:26,590 --> 00:38:29,450
so talking about the various and powder

793
00:38:29,450 --> 00:38:30,980
can be implemented when actually the

794
00:38:30,980 --> 00:38:33,260
send message is issued by the abusers

795
00:38:33,260 --> 00:38:36,590
based applications so we are talking

796
00:38:36,590 --> 00:38:40,160
that these any study advisor and I mean

797
00:38:40,160 --> 00:38:42,410
it when you use message control for hip

798
00:38:42,410 --> 00:38:45,650
spraying yeah usually it goes through a

799
00:38:45,650 --> 00:38:48,650
valley input type citation for file

800
00:38:48,650 --> 00:38:50,690
descriptors because this is the filters

801
00:38:50,690 --> 00:38:53,090
usually is used to transfer file script

802
00:38:53,090 --> 00:38:55,670
roles and special data for specific

803
00:38:55,670 --> 00:38:58,430
protocols so as far as say you know and

804
00:38:58,430 --> 00:39:00,440
I might be wrong it goes through a

805
00:39:00,440 --> 00:39:03,860
sanitation check and therefore it does

806
00:39:03,860 --> 00:39:06,350
get allocated but then it is immediately

807
00:39:06,350 --> 00:39:08,040
freed because the

808
00:39:08,040 --> 00:39:10,050
tension-filled unless your spring data

809
00:39:10,050 --> 00:39:12,900
matches exactly the phallus Kryptos are

810
00:39:12,900 --> 00:39:17,640
a indicate enriches unlikely first think

811
00:39:17,640 --> 00:39:19,230
that the cases we are talking here is

812
00:39:19,230 --> 00:39:20,850
actually not just the photos fall

813
00:39:20,850 --> 00:39:22,440
discourses it's just some kind of

814
00:39:22,440 --> 00:39:24,900
generic message exchange but this a

815
00:39:24,900 --> 00:39:26,790
misogynist I don't see any sense either

816
00:39:26,790 --> 00:39:29,810
in this mechanism yet so basically POA

817
00:39:29,810 --> 00:39:31,830
actually the sender message is also

818
00:39:31,830 --> 00:39:36,900
using our ATO 5.3 2015 85 the vector

819
00:39:36,900 --> 00:39:40,050
over ruin exploitation to actually count

820
00:39:40,050 --> 00:39:43,200
a concept another piece of our vector

821
00:39:43,200 --> 00:39:45,570
early after the one which we are going

822
00:39:45,570 --> 00:39:47,580
to over into and I have volume controls

823
00:39:47,580 --> 00:39:48,300
okay

824
00:39:48,300 --> 00:39:50,190
data so essentially in the single

825
00:39:50,190 --> 00:39:59,070
Jalalabad anyone know thank you John

826
00:39:59,070 --> 00:40:00,900
thank you guys

827
00:40:00,900 --> 00:40:05,889
[Applause]

