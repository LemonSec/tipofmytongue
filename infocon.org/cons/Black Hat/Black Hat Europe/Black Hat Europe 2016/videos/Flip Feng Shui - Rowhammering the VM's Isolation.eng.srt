1
00:00:00,030 --> 00:00:03,480
hello everyone welcome to one of the

2
00:00:03,480 --> 00:00:05,759
first briefings of this year's black hat

3
00:00:05,759 --> 00:00:09,269
and we're going to talk to you about

4
00:00:09,269 --> 00:00:11,849
three punctuate it's a new exploitations

5
00:00:11,849 --> 00:00:14,519
back sir that we've come up with and a

6
00:00:14,519 --> 00:00:17,070
PD stock you will know how you could use

7
00:00:17,070 --> 00:00:19,740
three Fung Shui to break VM isolation

8
00:00:19,740 --> 00:00:22,859
using raw hammer before we start I'm

9
00:00:22,859 --> 00:00:25,320
going to briefly mention who we are so

10
00:00:25,320 --> 00:00:26,490
my name is kava

11
00:00:26,490 --> 00:00:29,400
here is been grass and we're security

12
00:00:29,400 --> 00:00:31,769
researchers in academia and this is a

13
00:00:31,769 --> 00:00:33,120
photo of us that you can see this is

14
00:00:33,120 --> 00:00:35,910
right after we submitted the flip

15
00:00:35,910 --> 00:00:38,129
function work to use explore the first

16
00:00:38,129 --> 00:00:40,290
time and soon you're going to realize

17
00:00:40,290 --> 00:00:41,850
why we are so happy it's after a few

18
00:00:41,850 --> 00:00:45,539
weeks of work and yeah and so we are a

19
00:00:45,539 --> 00:00:48,390
part of a larger security group in

20
00:00:48,390 --> 00:00:50,520
Amsterdam in about 20 people or so and

21
00:00:50,520 --> 00:00:53,160
we publish offensive and defensive

22
00:00:53,160 --> 00:00:54,690
security research and also sometimes

23
00:00:54,690 --> 00:00:57,780
software reliability and sometimes they

24
00:00:57,780 --> 00:00:59,940
think okay the attacks that we do or

25
00:00:59,940 --> 00:01:01,289
defenses that we do might actually

26
00:01:01,289 --> 00:01:03,449
interest people in industry and this

27
00:01:03,449 --> 00:01:05,339
seems this we think is one of them we

28
00:01:05,339 --> 00:01:06,960
hope that you think so too at the end of

29
00:01:06,960 --> 00:01:10,619
this talk all right so you should if you

30
00:01:10,619 --> 00:01:12,420
were here last year in Amsterdam you

31
00:01:12,420 --> 00:01:14,189
might remember me I was here with

32
00:01:14,189 --> 00:01:16,229
Antonio sitting there and we're talking

33
00:01:16,229 --> 00:01:18,780
about memory deduplication and how you

34
00:01:18,780 --> 00:01:21,210
could use it as a read primitive to

35
00:01:21,210 --> 00:01:24,000
select read information from a victim vm

36
00:01:24,000 --> 00:01:25,650
that is on the same horse running with

37
00:01:25,650 --> 00:01:27,479
you and we told you how you can use it

38
00:01:27,479 --> 00:01:30,119
to break a SLR we are back again this

39
00:01:30,119 --> 00:01:31,650
time it's memory deduplication but this

40
00:01:31,650 --> 00:01:34,140
time is physical we're going to show you

41
00:01:34,140 --> 00:01:36,020
how you can use memory deduplication to

42
00:01:36,020 --> 00:01:38,939
manipulate physical memory of a victim

43
00:01:38,939 --> 00:01:41,189
vm so it could make targeted raw hammer

44
00:01:41,189 --> 00:01:42,720
bit flips and we'll show you how you

45
00:01:42,720 --> 00:01:46,579
could use this to compromise OpenSSH so

46
00:01:46,579 --> 00:01:48,720
there are a bunch of things that you're

47
00:01:48,720 --> 00:01:49,799
going to show you we're going to show

48
00:01:49,799 --> 00:01:52,490
you as I said and OpenSSH compromise

49
00:01:52,490 --> 00:01:54,329
we're going to show you how you could

50
00:01:54,329 --> 00:01:57,570
use this pip function method to to

51
00:01:57,570 --> 00:01:59,490
compromise apt-get and for GPG signature

52
00:01:59,490 --> 00:02:01,649
so that you know everything vm could

53
00:02:01,649 --> 00:02:03,719
install packages without without it

54
00:02:03,719 --> 00:02:06,060
being border that it is not a package

55
00:02:06,060 --> 00:02:08,220
that you should install and all of these

56
00:02:08,220 --> 00:02:09,239
things that we are going to show you

57
00:02:09,239 --> 00:02:11,400
they don't rely on any software box

58
00:02:11,400 --> 00:02:13,500
they only rely on a hardware

59
00:02:13,500 --> 00:02:16,350
and they all rely on weak assumptions so

60
00:02:16,350 --> 00:02:18,720
basically if you have a vulnerable team

61
00:02:18,720 --> 00:02:21,210
which seems to be quite common about 90%

62
00:02:21,210 --> 00:02:22,980
of the themes that are sold today are

63
00:02:22,980 --> 00:02:25,260
vulnerable to raw hammer as shown by the

64
00:02:25,260 --> 00:02:27,060
original raw hammer research and if you

65
00:02:27,060 --> 00:02:28,920
have memory deduplication turned on then

66
00:02:28,920 --> 00:02:30,270
you're already vulnerable to flip

67
00:02:30,270 --> 00:02:33,390
punctuate and and we have been contacted

68
00:02:33,390 --> 00:02:35,220
by many companies that are worried about

69
00:02:35,220 --> 00:02:36,570
this because they are using memory

70
00:02:36,570 --> 00:02:38,670
duplication and finally we're going to

71
00:02:38,670 --> 00:02:40,440
show you a demo we have actually

72
00:02:40,440 --> 00:02:42,240
implemented three punctuate on multiple

73
00:02:42,240 --> 00:02:43,470
instances and we're going to show you a

74
00:02:43,470 --> 00:02:45,959
demo of one all right this I would like

75
00:02:45,959 --> 00:02:47,790
to give floor to Ben who's going to tell

76
00:02:47,790 --> 00:02:49,670
you more about top lip function works

77
00:02:49,670 --> 00:02:51,989
great thank you very much Gary hello

78
00:02:51,989 --> 00:02:54,150
everyone okay let me tell you a little

79
00:02:54,150 --> 00:02:56,430
bit about the outliner for the rest of

80
00:02:56,430 --> 00:02:58,920
this talk so then the first phase is

81
00:02:58,920 --> 00:03:00,930
going to be let's forget about how it

82
00:03:00,930 --> 00:03:03,510
actually works and the exact technical

83
00:03:03,510 --> 00:03:04,650
details of how it works but let's just

84
00:03:04,650 --> 00:03:07,709
say once it does work what how does this

85
00:03:07,709 --> 00:03:09,750
primitive work we've already been told

86
00:03:09,750 --> 00:03:12,060
we can flip it you can we can corrupt

87
00:03:12,060 --> 00:03:14,910
memory in a co-hosted victim VM but what

88
00:03:14,910 --> 00:03:16,020
exactly are the conditions under which

89
00:03:16,020 --> 00:03:17,820
it works is what how does this right

90
00:03:17,820 --> 00:03:20,580
primitive work as we're calling it how

91
00:03:20,580 --> 00:03:22,709
does it work and what do I need to know

92
00:03:22,709 --> 00:03:26,130
to do it okay so once we know that let's

93
00:03:26,130 --> 00:03:29,100
go into detail about how it works

94
00:03:29,100 --> 00:03:30,989
exactly so which techniques have to come

95
00:03:30,989 --> 00:03:32,730
together to make flippin sure you work

96
00:03:32,730 --> 00:03:38,100
and and how come it works that way once

97
00:03:38,100 --> 00:03:40,170
that so once we understand how it works

98
00:03:40,170 --> 00:03:42,060
and how we can apply it we're going to

99
00:03:42,060 --> 00:03:44,370
show you a whole bunch of interesting

100
00:03:44,370 --> 00:03:46,380
demonstration attacks the first is going

101
00:03:46,380 --> 00:03:49,079
to be OpenSSH and we are going to be

102
00:03:49,079 --> 00:03:52,290
able to login using open search into a

103
00:03:52,290 --> 00:03:55,560
victim VM given that we know the public

104
00:03:55,560 --> 00:03:57,900
key of the target we're going to be able

105
00:03:57,900 --> 00:03:59,340
to generate our own private key and

106
00:03:59,340 --> 00:04:00,750
login you know totally according to the

107
00:04:00,750 --> 00:04:03,120
rules SH go and let us in because that's

108
00:04:03,120 --> 00:04:04,380
what it's supposed to do when it's

109
00:04:04,380 --> 00:04:07,590
presented with the right key and once

110
00:04:07,590 --> 00:04:08,820
we're in going to show a couple of

111
00:04:08,820 --> 00:04:10,440
example attacks of how could we then

112
00:04:10,440 --> 00:04:12,600
assuming that we're not root in the in

113
00:04:12,600 --> 00:04:14,880
the first instance how could we elevate

114
00:04:14,880 --> 00:04:16,649
our privilege higher and what are the

115
00:04:16,649 --> 00:04:18,450
what are a number of possible attacks

116
00:04:18,450 --> 00:04:20,700
that we could do to do this also using

117
00:04:20,700 --> 00:04:23,970
flipping shuri of course and a final

118
00:04:23,970 --> 00:04:27,030
attack is a the

119
00:04:27,030 --> 00:04:30,600
apt-get subversion demo so the apt is

120
00:04:30,600 --> 00:04:32,550
apt as in the package management system

121
00:04:32,550 --> 00:04:36,150
not as in the threat but its we're going

122
00:04:36,150 --> 00:04:37,230
to show you how we're going to be able

123
00:04:37,230 --> 00:04:39,900
to generate a GPG signature that apt-get

124
00:04:39,900 --> 00:04:42,510
will fully accept as a legitimate

125
00:04:42,510 --> 00:04:45,660
signature on a on upgraded package

126
00:04:45,660 --> 00:04:46,950
that's going to the victims going to

127
00:04:46,950 --> 00:04:48,450
install it just like it was a normal day

128
00:04:48,450 --> 00:04:50,970
and all of this we're going to use

129
00:04:50,970 --> 00:04:52,740
accomplished without a software bug but

130
00:04:52,740 --> 00:04:53,910
just using this memory corruption

131
00:04:53,910 --> 00:04:55,520
primitives that we can tell you about

132
00:04:55,520 --> 00:05:02,930
okay Oh finally finally how what is the

133
00:05:02,930 --> 00:05:05,370
disclosure what is the reception bin for

134
00:05:05,370 --> 00:05:06,810
this work that was the disclosure bin

135
00:05:06,810 --> 00:05:09,000
like and what do we think the takeaway

136
00:05:09,000 --> 00:05:13,500
conclusion should be from this talk okay

137
00:05:13,500 --> 00:05:16,320
number one flippin should we add work so

138
00:05:16,320 --> 00:05:18,419
let's forget about how it works for a

139
00:05:18,419 --> 00:05:20,640
second and tell you about what are the

140
00:05:20,640 --> 00:05:22,830
conditions that you that need to be true

141
00:05:22,830 --> 00:05:25,889
for it to work and then and what can you

142
00:05:25,889 --> 00:05:27,750
do with it okay so what we're assuming

143
00:05:27,750 --> 00:05:31,860
is that you are and you are two VMs one

144
00:05:31,860 --> 00:05:36,690
is the attacker this is you and one is

145
00:05:36,690 --> 00:05:39,330
the victim and we're on the same machine

146
00:05:39,330 --> 00:05:41,010
and we're assuming that memory

147
00:05:41,010 --> 00:05:43,050
deduplication is turned on in the host

148
00:05:43,050 --> 00:05:45,140
and we're going to talk about that later

149
00:05:45,140 --> 00:05:47,550
so what you are going to be able to do

150
00:05:47,550 --> 00:05:51,510
is if you know the contents of a target

151
00:05:51,510 --> 00:05:54,630
page in the target VM you're going to be

152
00:05:54,630 --> 00:05:57,479
able to flip one bit almost any bits in

153
00:05:57,479 --> 00:06:00,960
that target page so it's a one bit right

154
00:06:00,960 --> 00:06:03,390
primitive in a page you know the

155
00:06:03,390 --> 00:06:08,310
contents of so this goes some way to

156
00:06:08,310 --> 00:06:10,530
explaining the name thing she is a

157
00:06:10,530 --> 00:06:12,870
reference to the ancient Chinese

158
00:06:12,870 --> 00:06:14,130
philosophy of the harmonious

159
00:06:14,130 --> 00:06:17,760
organization of objects the modern

160
00:06:17,760 --> 00:06:21,440
correspondent of Lovette for us is

161
00:06:21,440 --> 00:06:23,970
organizing physical memory so that the

162
00:06:23,970 --> 00:06:25,470
ro hammer glitch will occur exactly

163
00:06:25,470 --> 00:06:28,560
where and when we wanted to win for that

164
00:06:28,560 --> 00:06:30,150
we use this memory organization

165
00:06:30,150 --> 00:06:33,200
technique in this case in this case a

166
00:06:33,200 --> 00:06:36,240
memory duplication and the flip is

167
00:06:36,240 --> 00:06:37,979
referenced to the rhymer glitch which

168
00:06:37,979 --> 00:06:39,639
flips a single bit

169
00:06:39,639 --> 00:06:42,550
so this right primitive is capable as

170
00:06:42,550 --> 00:06:44,409
you can see in this diagram of breaking

171
00:06:44,409 --> 00:06:48,610
the isolation of virtualization of the

172
00:06:48,610 --> 00:06:51,090
strongest possible virtualization

173
00:06:51,090 --> 00:06:53,830
available to us today isolation this

174
00:06:53,830 --> 00:06:57,639
hardware virtualization so that is one

175
00:06:57,639 --> 00:06:59,139
of the significant outcomes of this work

176
00:06:59,139 --> 00:07:00,520
so to take away from the slide should be

177
00:07:00,520 --> 00:07:03,219
if you know the contents of a target

178
00:07:03,219 --> 00:07:07,750
page in a victim VM you can write a

179
00:07:07,750 --> 00:07:09,909
single bit to it change a single bits so

180
00:07:09,909 --> 00:07:12,150
it may be interesting exercise for you

181
00:07:12,150 --> 00:07:14,199
given that you want to subvert the

182
00:07:14,199 --> 00:07:17,500
security of a victim vm what is the

183
00:07:17,500 --> 00:07:19,000
cleverest technique and the easiest

184
00:07:19,000 --> 00:07:20,469
technique you can think of you know

185
00:07:20,469 --> 00:07:22,150
which which pays you know the contents

186
00:07:22,150 --> 00:07:23,860
of and which bit can I change that will

187
00:07:23,860 --> 00:07:26,069
help me with subverting this security

188
00:07:26,069 --> 00:07:29,680
now we have plenty of nice examples of

189
00:07:29,680 --> 00:07:31,300
that but maybe you can think of a better

190
00:07:31,300 --> 00:07:37,050
one how does it work so how does it work

191
00:07:37,050 --> 00:07:39,279
we're assuming with two VMs on the same

192
00:07:39,279 --> 00:07:41,080
machine we're assuming that memory

193
00:07:41,080 --> 00:07:42,789
deduplication is turned on in the host

194
00:07:42,789 --> 00:07:44,229
so that we can share we were going to

195
00:07:44,229 --> 00:07:46,810
share physical memory we assuming that

196
00:07:46,810 --> 00:07:49,300
Rho hammer works so going to tell you

197
00:07:49,300 --> 00:07:50,860
about how this memory duplication worked

198
00:07:50,860 --> 00:07:53,169
how does how does Rho hammer work how

199
00:07:53,169 --> 00:07:56,349
and why you know and we're going to tell

200
00:07:56,349 --> 00:07:58,270
you the basics about the RSA

201
00:07:58,270 --> 00:08:00,009
cryptosystem which is not relevant to

202
00:08:00,009 --> 00:08:02,979
flipping shuri but is very relevant to

203
00:08:02,979 --> 00:08:05,110
the exam of the example attacks that we

204
00:08:05,110 --> 00:08:11,830
have later specifically SSH and GPG so

205
00:08:11,830 --> 00:08:16,089
firstly firstly what is memory -

206
00:08:16,089 --> 00:08:18,400
duplication and how does it work and why

207
00:08:18,400 --> 00:08:20,139
would given do it so let's say that we

208
00:08:20,139 --> 00:08:22,870
are again two VMs and we're both backed

209
00:08:22,870 --> 00:08:25,210
by the say by different our own private

210
00:08:25,210 --> 00:08:28,300
memory so yeah so imagine that this is

211
00:08:28,300 --> 00:08:30,009
the virtual address space of one VM this

212
00:08:30,009 --> 00:08:31,990
turbocharger space of the other VM these

213
00:08:31,990 --> 00:08:33,490
errors might indicate a virtual memory

214
00:08:33,490 --> 00:08:35,440
mapping from virtual to physical memory

215
00:08:35,440 --> 00:08:38,078
and so this is the physical backing

216
00:08:38,078 --> 00:08:40,419
memory of the attacker VM this is the

217
00:08:40,419 --> 00:08:42,519
physical backing memory of the victim VM

218
00:08:42,519 --> 00:08:44,890
and they're totally literally isolated

219
00:08:44,890 --> 00:08:48,279
every possible way now imagine we both

220
00:08:48,279 --> 00:08:51,250
store a copy of the Mona Lisa in memory

221
00:08:51,250 --> 00:08:53,350
it's one let's say it's one page

222
00:08:53,350 --> 00:08:55,180
on leases there and we both have a copy

223
00:08:55,180 --> 00:08:57,430
of Mona Lisa also in our physical memory

224
00:08:57,430 --> 00:08:59,200
now the host could realize this and

225
00:08:59,200 --> 00:09:03,970
without any harm to anyone yet it can

226
00:09:03,970 --> 00:09:05,950
duplicate this page that which both

227
00:09:05,950 --> 00:09:07,990
sharing the same physical instance of

228
00:09:07,990 --> 00:09:10,540
the Mona Lisa so we both the point all

229
00:09:10,540 --> 00:09:12,070
references to the Mona Lisa to the same

230
00:09:12,070 --> 00:09:14,830
single physical page nobody's the wiser

231
00:09:14,830 --> 00:09:17,200
but we've saved memory so many VM

232
00:09:17,200 --> 00:09:18,850
hosting providers do this to save memory

233
00:09:18,850 --> 00:09:20,050
because you know there are many of the

234
00:09:20,050 --> 00:09:21,760
same pages if many of the same VMs are

235
00:09:21,760 --> 00:09:23,560
running the same operating system we can

236
00:09:23,560 --> 00:09:25,480
save memory and get more customers on

237
00:09:25,480 --> 00:09:29,860
the same machine so how do we want to

238
00:09:29,860 --> 00:09:33,670
use this well this is going to help us

239
00:09:33,670 --> 00:09:35,050
organize physical memories that we can

240
00:09:35,050 --> 00:09:38,850
use ro hammer to target the damage

241
00:09:38,850 --> 00:09:42,400
however so to make no duplication

242
00:09:42,400 --> 00:09:44,230
semantically sound we have to trap

243
00:09:44,230 --> 00:09:46,690
writes because if one of those owners of

244
00:09:46,690 --> 00:09:48,100
the page says oh right you know say I

245
00:09:48,100 --> 00:09:49,690
want to write the curly mustache on

246
00:09:49,690 --> 00:09:52,300
Melissa the victim may not see this of

247
00:09:52,300 --> 00:09:53,290
course because he has not done the right

248
00:09:53,290 --> 00:09:55,360
so would not be semantically sound so we

249
00:09:55,360 --> 00:09:57,100
have to redo placate this page the

250
00:09:57,100 --> 00:10:00,790
attacker I get the Mona Lisa my uncle

251
00:10:00,790 --> 00:10:03,070
his manly side has a mustache the victim

252
00:10:03,070 --> 00:10:05,080
does not did not do the right search is

253
00:10:05,080 --> 00:10:07,420
the original and that's we call this

254
00:10:07,420 --> 00:10:09,959
copy-on-write

255
00:10:10,020 --> 00:10:12,730
so that's the important part of how to

256
00:10:12,730 --> 00:10:18,630
keep memory deduplication sound ok

257
00:10:18,630 --> 00:10:25,900
brohamer so real hammer is a widely

258
00:10:25,900 --> 00:10:31,450
occurring glitch in dim modules if so

259
00:10:31,450 --> 00:10:33,670
let's see about these cells these cells

260
00:10:33,670 --> 00:10:37,090
are all this is the way memory is

261
00:10:37,090 --> 00:10:40,810
organized in DRAM chips all of these

262
00:10:40,810 --> 00:10:43,210
little balls represent cells they're all

263
00:10:43,210 --> 00:10:45,550
a single bit they represent a single bit

264
00:10:45,550 --> 00:10:47,080
and they're in hardware they're just a

265
00:10:47,080 --> 00:10:51,580
capacitor and in transistor and the

266
00:10:51,580 --> 00:10:52,930
capacitor stores charge and the charge

267
00:10:52,930 --> 00:10:55,450
represents whether the bit is a 0 or a 1

268
00:10:55,450 --> 00:10:57,970
now whenever and they're organized this

269
00:10:57,970 --> 00:11:00,760
way in rows and whenever whenever the

270
00:11:00,760 --> 00:11:03,730
RAM controller wants to read from this

271
00:11:03,730 --> 00:11:06,820
DRAM it has to be a row at a time and

272
00:11:06,820 --> 00:11:07,320
the source

273
00:11:07,320 --> 00:11:09,030
row is going to be copied to the road

274
00:11:09,030 --> 00:11:10,500
buffer and that's where the memory

275
00:11:10,500 --> 00:11:12,360
controller can read the can read the

276
00:11:12,360 --> 00:11:15,990
data from as a side effect of this and

277
00:11:15,990 --> 00:11:17,790
because the because the capacitors are

278
00:11:17,790 --> 00:11:20,070
so small they are leaking all the time

279
00:11:20,070 --> 00:11:21,150
and that's why they have to be refreshed

280
00:11:21,150 --> 00:11:22,080
all the time you may have heard of this

281
00:11:22,080 --> 00:11:24,450
DRAM refresh time that's what it's doing

282
00:11:24,450 --> 00:11:27,510
you have to keep the bits on right now

283
00:11:27,510 --> 00:11:30,630
as a side effect of copying this road to

284
00:11:30,630 --> 00:11:33,210
the road buffer the this the source row

285
00:11:33,210 --> 00:11:34,620
is electrically emptied has to be

286
00:11:34,620 --> 00:11:37,220
recharged and as a side effect the

287
00:11:37,220 --> 00:11:39,720
neighboring rows also leak a little bit

288
00:11:39,720 --> 00:11:42,450
more than otherwise now if you try to

289
00:11:42,450 --> 00:11:45,030
maximize this if you try to maximize

290
00:11:45,030 --> 00:11:47,370
this by let's say you know Mona Lisa is

291
00:11:47,370 --> 00:11:52,050
stored in the middle row row I and we're

292
00:11:52,050 --> 00:11:54,420
reading from the row above the Mona Lisa

293
00:11:54,420 --> 00:11:56,280
and the row below the Mona Lisa like

294
00:11:56,280 --> 00:11:57,870
this then a little bit of charge is

295
00:11:57,870 --> 00:12:00,090
going to leak from them on Lisa row see

296
00:12:00,090 --> 00:12:01,770
from the middle row so if you do this

297
00:12:01,770 --> 00:12:03,950
over and over and over and over again

298
00:12:03,950 --> 00:12:06,930
very quickly faster than the Refresh can

299
00:12:06,930 --> 00:12:09,240
happen then it could be that eventually

300
00:12:09,240 --> 00:12:11,100
so much charge will leak from the middle

301
00:12:11,100 --> 00:12:13,860
row that a bit will actually change from

302
00:12:13,860 --> 00:12:15,420
zero to one because so much charge is

303
00:12:15,420 --> 00:12:17,280
leaked we're interpreting that as a

304
00:12:17,280 --> 00:12:19,350
different bit now and then this happens

305
00:12:19,350 --> 00:12:23,010
oh my goodness so the model is has been

306
00:12:23,010 --> 00:12:26,460
displaced by this bit flip right now row

307
00:12:26,460 --> 00:12:28,500
hammer is an unpredictable thing you

308
00:12:28,500 --> 00:12:29,880
don't know when and where it will happen

309
00:12:29,880 --> 00:12:31,890
but we have found that it's quite

310
00:12:31,890 --> 00:12:33,720
repeatable it's quite deterministic so

311
00:12:33,720 --> 00:12:37,200
if it happens in one place in a

312
00:12:37,200 --> 00:12:38,700
particular way if we do it again the

313
00:12:38,700 --> 00:12:40,320
same thing will happen the same bit is

314
00:12:40,320 --> 00:12:41,850
likely to flip and this depends on the

315
00:12:41,850 --> 00:12:43,250
physical part of memory it's sort of

316
00:12:43,250 --> 00:12:46,380
positioned a space dependent phenomenon

317
00:12:46,380 --> 00:12:49,620
so we find that if we go to a new piece

318
00:12:49,620 --> 00:12:51,420
of physical memory we are now in a new

319
00:12:51,420 --> 00:12:52,620
piece of physical memory will do the

320
00:12:52,620 --> 00:12:55,260
same row hammer operation let's see you

321
00:12:55,260 --> 00:12:56,430
know what kind of damage is going to

322
00:12:56,430 --> 00:13:00,000
occur now and it's the second bit flip

323
00:13:00,000 --> 00:13:01,140
in the Mona Lisa's defaced in a

324
00:13:01,140 --> 00:13:03,150
different way no the row is caused a

325
00:13:03,150 --> 00:13:05,070
different kind of damage and this is the

326
00:13:05,070 --> 00:13:07,530
interpretation of Mona Lisa now imagine

327
00:13:07,530 --> 00:13:09,420
that we want a specific kind of damage

328
00:13:09,420 --> 00:13:11,250
to occur which is the curly mustache

329
00:13:11,250 --> 00:13:14,820
that we saw earlier now let's go to yet

330
00:13:14,820 --> 00:13:17,220
another piece of physical memory we

331
00:13:17,220 --> 00:13:18,780
tried the relevant operation in the same

332
00:13:18,780 --> 00:13:20,149
time

333
00:13:20,149 --> 00:13:23,120
the same way and then we get the curly

334
00:13:23,120 --> 00:13:24,709
mustache that we wanted so now we know

335
00:13:24,709 --> 00:13:26,059
that if you want to cause this kind of

336
00:13:26,059 --> 00:13:28,579
damage we have to do right hammer on

337
00:13:28,579 --> 00:13:30,079
this part of physical memory we call

338
00:13:30,079 --> 00:13:33,110
this templating we can't be forward but

339
00:13:33,110 --> 00:13:35,180
flip happens but we can find so many

340
00:13:35,180 --> 00:13:37,240
different candidates that we can choose

341
00:13:37,240 --> 00:13:39,920
where the bit flip happens in within a

342
00:13:39,920 --> 00:13:41,269
page offset and that's the important

343
00:13:41,269 --> 00:13:42,800
thing here if we can find within a page

344
00:13:42,800 --> 00:13:44,480
offset the right bit slip offset then we

345
00:13:44,480 --> 00:13:46,610
can control where the flip will happen

346
00:13:46,610 --> 00:13:48,889
in the target VM and we and this is what

347
00:13:48,889 --> 00:13:50,899
we call in the later on this talk we're

348
00:13:50,899 --> 00:13:52,249
going to hit is probably more often we

349
00:13:52,249 --> 00:13:53,720
can't all we're looking for the right

350
00:13:53,720 --> 00:13:55,550
bit flip that's what we mean by looking

351
00:13:55,550 --> 00:13:56,689
for the right bit find the right

352
00:13:56,689 --> 00:13:58,699
physical memory where Rho hammer gives a

353
00:13:58,699 --> 00:14:02,269
corruption in the right page offset so

354
00:14:02,269 --> 00:14:04,040
let's how run my works now put the two

355
00:14:04,040 --> 00:14:05,449
together and you can start to see how

356
00:14:05,449 --> 00:14:10,329
flipping surely works if you've picked a

357
00:14:10,329 --> 00:14:13,339
target page in the victim VM and you've

358
00:14:13,339 --> 00:14:15,019
decided which bit you want to flip there

359
00:14:15,019 --> 00:14:16,910
then you find a piece of physical memory

360
00:14:16,910 --> 00:14:19,309
that produces the right bit flip with

361
00:14:19,309 --> 00:14:21,769
respect to a page offset and then force

362
00:14:21,769 --> 00:14:23,749
the victim VM to use that part of

363
00:14:23,749 --> 00:14:25,939
physical memory for his data and you can

364
00:14:25,939 --> 00:14:30,009
do this using memory deduplication

365
00:14:30,009 --> 00:14:32,329
that has happened here the victim is

366
00:14:32,329 --> 00:14:34,819
storing the Mona Lisa in the same

367
00:14:34,819 --> 00:14:38,179
physical page as the attacker is and

368
00:14:38,179 --> 00:14:40,490
we've been able to get we have forced a

369
00:14:40,490 --> 00:14:42,410
duplication to happen only after we've

370
00:14:42,410 --> 00:14:46,129
decided where we want the physical which

371
00:14:46,129 --> 00:14:48,170
physical memory we wanted to use and we

372
00:14:48,170 --> 00:14:50,059
tested this first with Rho hammer now

373
00:14:50,059 --> 00:14:51,709
they're using the same physical memory

374
00:14:51,709 --> 00:14:55,189
we do the attacker does Rho hammer in in

375
00:14:55,189 --> 00:14:58,069
his own VM and then you get the curly

376
00:14:58,069 --> 00:15:00,170
mustache and of course they're all the

377
00:15:00,170 --> 00:15:01,579
same instance so the physical memory

378
00:15:01,579 --> 00:15:03,860
also gets the curly mustache and also

379
00:15:03,860 --> 00:15:05,509
the victim therefore gets the query

380
00:15:05,509 --> 00:15:06,800
mustache and that's how you can have

381
00:15:06,800 --> 00:15:08,990
this reliable one bit right primitive

382
00:15:08,990 --> 00:15:10,990
using low hammer and memory duplication

383
00:15:10,990 --> 00:15:13,879
and as you can see flippin Sheree breaks

384
00:15:13,879 --> 00:15:15,860
copy-on-write this very important

385
00:15:15,860 --> 00:15:17,959
feature that was needed to make memory

386
00:15:17,959 --> 00:15:19,850
duplication semantically sound not to

387
00:15:19,850 --> 00:15:23,629
mention for security so there's those

388
00:15:23,629 --> 00:15:26,959
two things come together okay I would

389
00:15:26,959 --> 00:15:33,230
say I'll just recap the basics of RSA

390
00:15:33,230 --> 00:15:35,670
and show you how we're going to use it

391
00:15:35,670 --> 00:15:38,450
to cause mischief with urbanization gbg

392
00:15:38,450 --> 00:15:42,540
so RSA is a public key cryptosystem that

393
00:15:42,540 --> 00:15:46,950
means that whenever you have encryption

394
00:15:46,950 --> 00:15:50,070
and decryption you use one key to

395
00:15:50,070 --> 00:15:52,800
encrypt but that key can only encrypt

396
00:15:52,800 --> 00:15:54,780
and the other key that there in a pair

397
00:15:54,780 --> 00:15:57,480
the other care can only decrypt now the

398
00:15:57,480 --> 00:15:59,250
one the key that can encrypt you

399
00:15:59,250 --> 00:16:01,680
typically call the public key because

400
00:16:01,680 --> 00:16:03,540
the nice property is it's safe to make

401
00:16:03,540 --> 00:16:04,830
this encryption key public is very

402
00:16:04,830 --> 00:16:08,340
pleasant vapors property now the

403
00:16:08,340 --> 00:16:10,050
decryption key you keep private because

404
00:16:10,050 --> 00:16:11,280
this is the one that can unlock the

405
00:16:11,280 --> 00:16:12,780
secrets that people are sending you and

406
00:16:12,780 --> 00:16:15,900
vice versa you can sign things with a

407
00:16:15,900 --> 00:16:17,730
private key that can there that can be

408
00:16:17,730 --> 00:16:19,380
verified by everyone with the

409
00:16:19,380 --> 00:16:20,940
corresponding public key now that's also

410
00:16:20,940 --> 00:16:23,340
very pleasant property because it means

411
00:16:23,340 --> 00:16:24,960
that signing things is also a proof of

412
00:16:24,960 --> 00:16:26,430
identity because you're the only person

413
00:16:26,430 --> 00:16:28,700
you're supposed to have this private key

414
00:16:28,700 --> 00:16:32,160
now our se works using very big numbers

415
00:16:32,160 --> 00:16:36,390
there 2048 let's say it's the could 2048

416
00:16:36,390 --> 00:16:39,060
bit numbers let's say and you can be and

417
00:16:39,060 --> 00:16:40,890
you can compute the private key from a

418
00:16:40,890 --> 00:16:43,100
public key by knowing the public keys

419
00:16:43,100 --> 00:16:44,880
factorization now of course we normally

420
00:16:44,880 --> 00:16:46,890
don't know the factorization of 2000

421
00:16:46,890 --> 00:16:48,960
with numbers but during when we generate

422
00:16:48,960 --> 00:16:50,250
the key we just pick two very large

423
00:16:50,250 --> 00:16:52,080
primes model all together and then we

424
00:16:52,080 --> 00:16:53,610
have the factorization of the public key

425
00:16:53,610 --> 00:16:55,530
because that's how we generated we can

426
00:16:55,530 --> 00:16:57,180
very easily compute the corresponding

427
00:16:57,180 --> 00:16:58,800
private key we give the public key to

428
00:16:58,800 --> 00:17:01,830
the world go and encrypt and they they

429
00:17:01,830 --> 00:17:03,210
can't figure out the private key because

430
00:17:03,210 --> 00:17:04,440
they can't factorize it because we

431
00:17:04,440 --> 00:17:06,109
generated to be very hard to factorize

432
00:17:06,109 --> 00:17:08,550
but we know that between at the private

433
00:17:08,550 --> 00:17:11,459
key so that's the essence of our say the

434
00:17:11,459 --> 00:17:13,020
security rests in not being able to

435
00:17:13,020 --> 00:17:19,109
factorize public keys however if we

436
00:17:19,109 --> 00:17:20,130
corrupt

437
00:17:20,130 --> 00:17:22,440
a public key using flipping Shoei and

438
00:17:22,440 --> 00:17:24,599
one bit is what it takes then the whole

439
00:17:24,599 --> 00:17:27,869
world changes for RSA because we find

440
00:17:27,869 --> 00:17:30,960
here you see on the x-axis here is how

441
00:17:30,960 --> 00:17:32,520
many different variants of the same

442
00:17:32,520 --> 00:17:34,170
number can you find so how many bits

443
00:17:34,170 --> 00:17:35,820
flips and different locations can you

444
00:17:35,820 --> 00:17:38,580
give me to test then if you have 50

445
00:17:38,580 --> 00:17:40,350
different ones you're guaranteed for

446
00:17:40,350 --> 00:17:43,110
2048 bit keys you already guaranteed to

447
00:17:43,110 --> 00:17:44,700
be able to factorize at least one of

448
00:17:44,700 --> 00:17:46,300
them within an hour and one of them is

449
00:17:46,300 --> 00:17:53,290
takes we also find that that we can make

450
00:17:53,290 --> 00:17:55,300
this cut off for factorization much

451
00:17:55,300 --> 00:17:59,140
lower so here is another indication of

452
00:17:59,140 --> 00:18:02,500
trade off of so if you make the time at

453
00:18:02,500 --> 00:18:03,910
near sixty minutes then eventually

454
00:18:03,910 --> 00:18:06,150
you'll be able to factorize practically

455
00:18:06,150 --> 00:18:09,010
any any of the variants but if you make

456
00:18:09,010 --> 00:18:11,410
the curve much less then it could be it

457
00:18:11,410 --> 00:18:13,540
could be one minute or five minutes then

458
00:18:13,540 --> 00:18:16,090
you can also factorize practically all

459
00:18:16,090 --> 00:18:18,970
of them you just need more variance to

460
00:18:18,970 --> 00:18:22,000
to get to one of them that you can so

461
00:18:22,000 --> 00:18:24,370
this these experiments made us think

462
00:18:24,370 --> 00:18:26,050
well let's not bother too much for the

463
00:18:26,050 --> 00:18:27,220
factorization let's focus on getting

464
00:18:27,220 --> 00:18:29,050
many different bit tips and the key and

465
00:18:29,050 --> 00:18:31,390
eventually we'll get one that we can

466
00:18:31,390 --> 00:18:32,710
factorize and therefore generate the

467
00:18:32,710 --> 00:18:34,030
corresponding private key colors

468
00:18:34,030 --> 00:18:36,160
remember we get to choose which bit we

469
00:18:36,160 --> 00:18:38,590
flip that's the nice thing about that

470
00:18:38,590 --> 00:18:40,420
okay now that I've told you what about

471
00:18:40,420 --> 00:18:41,830
the background of how this flipping shoe

472
00:18:41,830 --> 00:18:44,320
is supposed to work and and the

473
00:18:44,320 --> 00:18:47,200
important basics of RSA let me hand the

474
00:18:47,200 --> 00:18:48,760
floor to Kovac who can tell you all

475
00:18:48,760 --> 00:18:50,980
about how to cause mischief in opening

476
00:18:50,980 --> 00:18:53,530
stage with this Thank You Ben all right

477
00:18:53,530 --> 00:18:56,380
so to recap now Ben told you all about

478
00:18:56,380 --> 00:18:59,620
sleep Fung Shui and and also told you

479
00:18:59,620 --> 00:19:01,990
about RSA that what happens to RSA if

480
00:19:01,990 --> 00:19:04,510
you do a bit flip now I want to briefly

481
00:19:04,510 --> 00:19:06,130
mention so we went through this thought

482
00:19:06,130 --> 00:19:08,050
process of what to what to attack right

483
00:19:08,050 --> 00:19:09,130
so there are lots of things that you

484
00:19:09,130 --> 00:19:10,450
could attack if you have a targeted bit

485
00:19:10,450 --> 00:19:13,270
sleep but but since we have two so like

486
00:19:13,270 --> 00:19:16,210
solo hammer doesn't happen so we can add

487
00:19:16,210 --> 00:19:18,880
them set to any beat any beat that we

488
00:19:18,880 --> 00:19:20,590
want so we have to wait to find it bleed

489
00:19:20,590 --> 00:19:22,570
a bit sleep that is exploitable for us

490
00:19:22,570 --> 00:19:25,510
so we can target we can say I want that

491
00:19:25,510 --> 00:19:27,520
it's asleep it's at that offset within a

492
00:19:27,520 --> 00:19:29,320
page and that's why we chose our essays

493
00:19:29,320 --> 00:19:31,750
because RSA if you if the public is

494
00:19:31,750 --> 00:19:33,790
largely not it's going to cover a big

495
00:19:33,790 --> 00:19:35,680
part of the page a physical page that

496
00:19:35,680 --> 00:19:36,970
would mean that we get lots of

497
00:19:36,970 --> 00:19:38,790
opportunities to be sleep if you have a

498
00:19:38,790 --> 00:19:42,490
probably key as our target all right

499
00:19:42,490 --> 00:19:45,220
with this in mind let me tell you how

500
00:19:45,220 --> 00:19:49,720
the OpenSSH attack works so if you have

501
00:19:49,720 --> 00:19:51,550
an open SSH server and typically

502
00:19:51,550 --> 00:19:52,930
probably many of you have done this

503
00:19:52,930 --> 00:19:54,790
right so you have an open SSH server and

504
00:19:54,790 --> 00:19:56,350
you want to login so you generate you

505
00:19:56,350 --> 00:19:58,720
have your public RSA key pair and you

506
00:19:58,720 --> 00:20:00,100
take the the DES public

507
00:20:00,100 --> 00:20:02,110
of the keypad is ours egg keeper and

508
00:20:02,110 --> 00:20:03,370
you're going to put it into this

509
00:20:03,370 --> 00:20:07,000
authorized key file of OpenSSH and every

510
00:20:07,000 --> 00:20:09,520
time you want to now login using SSH

511
00:20:09,520 --> 00:20:11,860
you're going to you're going to use your

512
00:20:11,860 --> 00:20:14,740
private key and then the OpenSSH server

513
00:20:14,740 --> 00:20:16,480
is going to do a challenge and response

514
00:20:16,480 --> 00:20:17,890
to make sure that you are indeed the

515
00:20:17,890 --> 00:20:20,260
owner of this public key one important

516
00:20:20,260 --> 00:20:21,940
thing that happens during this challenge

517
00:20:21,940 --> 00:20:23,799
and response is that the OpenSSH server

518
00:20:23,799 --> 00:20:25,900
is going to read this authorized key

519
00:20:25,900 --> 00:20:28,480
file from its file system and it's going

520
00:20:28,480 --> 00:20:30,130
to bring it into memory it's going to be

521
00:20:30,130 --> 00:20:31,929
giving to the page cache now there are a

522
00:20:31,929 --> 00:20:35,080
number of nice things about about this

523
00:20:35,080 --> 00:20:37,390
this property one of them is that now

524
00:20:37,390 --> 00:20:39,789
the authorized key files is in memory

525
00:20:39,789 --> 00:20:42,159
and which means that you can target it

526
00:20:42,159 --> 00:20:45,190
with three punctuate the other nice

527
00:20:45,190 --> 00:20:46,780
property is that page cache is

528
00:20:46,780 --> 00:20:48,760
oftentimes page aligned so we don't have

529
00:20:48,760 --> 00:20:50,679
to worry about the alignment of this

530
00:20:50,679 --> 00:20:53,440
public key so here you can see an

531
00:20:53,440 --> 00:20:55,510
example of a public key this is Ben's

532
00:20:55,510 --> 00:21:00,549
public key factor Isaac damaged and and

533
00:21:00,549 --> 00:21:03,730
and then it is base64 encoding so and

534
00:21:03,730 --> 00:21:06,159
then we notice that around 800 or 900

535
00:21:06,159 --> 00:21:07,510
which loops between a page becomes

536
00:21:07,510 --> 00:21:09,880
exploitable when it is when your public

537
00:21:09,880 --> 00:21:11,770
key which is a multiplication of two

538
00:21:11,770 --> 00:21:17,740
large number is stored in memory so now

539
00:21:17,740 --> 00:21:19,690
what the attack looks like is that the

540
00:21:19,690 --> 00:21:21,370
attacker is going to first the

541
00:21:21,370 --> 00:21:23,200
assumption is that we know this public

542
00:21:23,200 --> 00:21:25,510
key now you seem so how come you know

543
00:21:25,510 --> 00:21:28,510
the public key of victim VM well there

544
00:21:28,510 --> 00:21:30,220
are many possibilities for you to get

545
00:21:30,220 --> 00:21:31,600
this public key so you could for example

546
00:21:31,600 --> 00:21:33,850
give up provides this nice interface for

547
00:21:33,850 --> 00:21:35,950
you to probe for any public key that you

548
00:21:35,950 --> 00:21:37,390
want so this is one way to get a public

549
00:21:37,390 --> 00:21:40,510
key and then the attacker will take this

550
00:21:40,510 --> 00:21:41,890
public key and write it to its own

551
00:21:41,890 --> 00:21:44,080
memory and after a while the memory

552
00:21:44,080 --> 00:21:45,880
deduplication is going to see oh after a

553
00:21:45,880 --> 00:21:47,770
few minutes there is a duplicate of this

554
00:21:47,770 --> 00:21:49,809
information these pages as now try to

555
00:21:49,809 --> 00:21:52,030
merge them and if you put this public

556
00:21:52,030 --> 00:21:53,890
key in the right location in memory from

557
00:21:53,890 --> 00:21:55,480
the attacker point of view then this

558
00:21:55,480 --> 00:21:56,799
merging is going to put it in the

559
00:21:56,799 --> 00:21:58,270
location that we know there will be a

560
00:21:58,270 --> 00:22:00,280
bit sleep that would let us factorize

561
00:22:00,280 --> 00:22:02,919
this public key and and once we have

562
00:22:02,919 --> 00:22:05,679
done is this bit flip has been showed

563
00:22:05,679 --> 00:22:07,539
you with this nice graph it is going to

564
00:22:07,539 --> 00:22:09,340
be quite easy to factorize this public

565
00:22:09,340 --> 00:22:10,960
key and once you know the factors of

566
00:22:10,960 --> 00:22:12,610
this public key is a single mathematical

567
00:22:12,610 --> 00:22:13,610
operation

568
00:22:13,610 --> 00:22:15,830
to get a private key so now if you want

569
00:22:15,830 --> 00:22:18,380
to login with this with this privately

570
00:22:18,380 --> 00:22:20,960
new privacy the organization the OpenSSH

571
00:22:20,960 --> 00:22:22,700
server now this time is going to read

572
00:22:22,700 --> 00:22:24,410
from its page cache and it's going to

573
00:22:24,410 --> 00:22:27,380
see the corrupted RS RS a public key

574
00:22:27,380 --> 00:22:29,809
which corresponds to our generated

575
00:22:29,809 --> 00:22:32,559
privacy and then you can log in nicely

576
00:22:32,559 --> 00:22:34,549
so if you want to think about it

577
00:22:34,549 --> 00:22:36,799
conceptually so typically if you have so

578
00:22:36,799 --> 00:22:39,290
likely the public key the original

579
00:22:39,290 --> 00:22:41,299
public as a key so it's really really

580
00:22:41,299 --> 00:22:43,190
hard to open this because it requires

581
00:22:43,190 --> 00:22:45,140
immense computational power to factorize

582
00:22:45,140 --> 00:22:48,890
this public key to is to two primes but

583
00:22:48,890 --> 00:22:50,900
once we do this bit flip it becomes

584
00:22:50,900 --> 00:22:52,700
quite easy to open this lock so in a

585
00:22:52,700 --> 00:22:55,340
sense it becomes quite easy to open this

586
00:22:55,340 --> 00:22:57,770
lock and then you can easily log in so

587
00:22:57,770 --> 00:22:59,299
if you just replace the mona lisa

588
00:22:59,299 --> 00:23:00,890
picture that then was showing you from

589
00:23:00,890 --> 00:23:02,900
the beginning with this public key now

590
00:23:02,900 --> 00:23:04,460
the same attack the three function

591
00:23:04,460 --> 00:23:07,190
attack with word now you might think

592
00:23:07,190 --> 00:23:08,750
that you know this is like so like an

593
00:23:08,750 --> 00:23:11,390
academic attack and you know there are

594
00:23:11,390 --> 00:23:14,000
lots of pieces that need to work out for

595
00:23:14,000 --> 00:23:15,770
this attack so we actually went on and

596
00:23:15,770 --> 00:23:18,340
implemented this on OpenSSH so here is a

597
00:23:18,340 --> 00:23:20,840
success probability graph on the y-axis

598
00:23:20,840 --> 00:23:23,240
you can see like so we've implemented

599
00:23:23,240 --> 00:23:25,220
and we try this 200 times and on the

600
00:23:25,220 --> 00:23:26,929
y-axis you can see how many of these

601
00:23:26,929 --> 00:23:29,780
select attacks succeeded over time which

602
00:23:29,780 --> 00:23:32,360
is on the x-axis an important thing to

603
00:23:32,360 --> 00:23:34,309
notice is that you know after around 5

604
00:23:34,309 --> 00:23:36,950
minutes about around here about 50% of

605
00:23:36,950 --> 00:23:38,150
the the attacks

606
00:23:38,150 --> 00:23:39,799
successfully finish entrance we could

607
00:23:39,799 --> 00:23:42,169
login with our newly generated private

608
00:23:42,169 --> 00:23:44,630
key and and the reason for this is that

609
00:23:44,630 --> 00:23:46,669
it is not like it's not a zero to one

610
00:23:46,669 --> 00:23:47,780
because we try with many different

611
00:23:47,780 --> 00:23:49,850
public keys and depending on how lucky

612
00:23:49,850 --> 00:23:51,350
we are with the physical memory that we

613
00:23:51,350 --> 00:23:53,929
get allocated to then depending on these

614
00:23:53,929 --> 00:23:55,970
two factors we could do the entrance

615
00:23:55,970 --> 00:23:58,190
attack sooner or later another

616
00:23:58,190 --> 00:24:00,080
interesting thing is that around 12

617
00:24:00,080 --> 00:24:02,750
minutes you could see that around 85% of

618
00:24:02,750 --> 00:24:04,730
the attack finish successfully from this

619
00:24:04,730 --> 00:24:06,440
point on there is no more successful

620
00:24:06,440 --> 00:24:07,850
attacks there are some issues with draw

621
00:24:07,850 --> 00:24:09,350
hammer so sometimes so we have a

622
00:24:09,350 --> 00:24:11,540
reliability check that check for after 5

623
00:24:11,540 --> 00:24:13,549
bit slips it would then choose this as a

624
00:24:13,549 --> 00:24:15,950
target but sometimes we can't reproduce

625
00:24:15,950 --> 00:24:18,500
the bit slip so because we try again

626
00:24:18,500 --> 00:24:20,390
with a new piece of physical memory but

627
00:24:20,390 --> 00:24:21,740
they haven't implemented it so but we

628
00:24:21,740 --> 00:24:23,300
think that if you spend a little bit

629
00:24:23,300 --> 00:24:24,890
more time ID you could make this even

630
00:24:24,890 --> 00:24:27,380
more reliable but even so 80% of

631
00:24:27,380 --> 00:24:29,360
the 200 trials that is very successful

632
00:24:29,360 --> 00:24:31,370
so we think that it is quite the attack

633
00:24:31,370 --> 00:24:33,370
is quite real

634
00:24:33,370 --> 00:24:36,830
so no no we have done the OpenSSH attack

635
00:24:36,830 --> 00:24:39,590
and then we are in the in the vp VM and

636
00:24:39,590 --> 00:24:41,510
we're thinking okay what can we do with

637
00:24:41,510 --> 00:24:43,430
Lee Fong shui to escalate our privileges

638
00:24:43,430 --> 00:24:46,400
from a normal user to a root user and so

639
00:24:46,400 --> 00:24:48,590
we came up with a bunch of targets that

640
00:24:48,590 --> 00:24:50,720
I'm going to briefly describe for you so

641
00:24:50,720 --> 00:24:53,810
the first one was is based on flipping

642
00:24:53,810 --> 00:24:55,790
the page tables the keynote edge table

643
00:24:55,790 --> 00:24:58,070
pages that that basically map channel

644
00:24:58,070 --> 00:25:00,200
pages into the victims address space so

645
00:25:00,200 --> 00:25:02,270
if you could manipulate those then it

646
00:25:02,270 --> 00:25:04,850
becomes quite easy to basically modify

647
00:25:04,850 --> 00:25:07,040
channel memory and once you can easily

648
00:25:07,040 --> 00:25:08,960
modify channel memory from user space it

649
00:25:08,960 --> 00:25:10,790
becomes quite easy to escalate your

650
00:25:10,790 --> 00:25:13,310
privilege to route the other attack

651
00:25:13,310 --> 00:25:15,830
relies on on corrupting filesystem

652
00:25:15,830 --> 00:25:17,390
information so there are some PI system

653
00:25:17,390 --> 00:25:18,530
information and there are some security

654
00:25:18,530 --> 00:25:20,120
and sensitive data in there like for

655
00:25:20,120 --> 00:25:21,890
example the set UID bit if you could

656
00:25:21,890 --> 00:25:23,630
corrupt that bit then it also becomes

657
00:25:23,630 --> 00:25:26,150
quite easy to so like target flip

658
00:25:26,150 --> 00:25:28,970
punctuate to make binary set UID and

659
00:25:28,970 --> 00:25:31,340
then get through easily and more

660
00:25:31,340 --> 00:25:33,650
interestingly we think that the more

661
00:25:33,650 --> 00:25:35,570
interesting one is select corrupting

662
00:25:35,570 --> 00:25:38,600
machine code so if we can select corrupt

663
00:25:38,600 --> 00:25:40,190
machine code we could switch some

664
00:25:40,190 --> 00:25:41,840
instructions so that we could pack some

665
00:25:41,840 --> 00:25:43,730
security check so for example imagine

666
00:25:43,730 --> 00:25:45,560
that you have a pseudo binary at some

667
00:25:45,560 --> 00:25:47,270
point there's a machine code that gets

668
00:25:47,270 --> 00:25:49,190
executed that checks whether your

669
00:25:49,190 --> 00:25:51,560
password was successful or not and and

670
00:25:51,560 --> 00:25:53,900
here if you could patch that test then

671
00:25:53,900 --> 00:25:56,810
it becomes quite easy for us to login

672
00:25:56,810 --> 00:25:58,430
with a password which is not correct

673
00:25:58,430 --> 00:26:00,230
alright so I'm going to briefly go

674
00:26:00,230 --> 00:26:03,830
through these so so the first the first

675
00:26:03,830 --> 00:26:05,630
attacked with the page tables what what

676
00:26:05,630 --> 00:26:07,520
so remember that we three punctuate you

677
00:26:07,520 --> 00:26:09,080
need to know the content of the page

678
00:26:09,080 --> 00:26:10,940
that you want to target and one nice

679
00:26:10,940 --> 00:26:12,770
thing about Linux channel page tables is

680
00:26:12,770 --> 00:26:14,540
that they're quite their content is

681
00:26:14,540 --> 00:26:16,550
quite predictable so that during early

682
00:26:16,550 --> 00:26:18,680
boot cannot allocate some physical pages

683
00:26:18,680 --> 00:26:19,880
and this is something this is quite

684
00:26:19,880 --> 00:26:21,740
predictable and then it's going to put

685
00:26:21,740 --> 00:26:23,600
this information into this data

686
00:26:23,600 --> 00:26:24,830
structure that is used for mapping

687
00:26:24,830 --> 00:26:26,450
mutual addresses to physical addresses

688
00:26:26,450 --> 00:26:28,730
and its content since it is predictable

689
00:26:28,730 --> 00:26:31,010
it can be easily targeted by three

690
00:26:31,010 --> 00:26:33,770
punctuate so we will mimic a can on page

691
00:26:33,770 --> 00:26:36,410
table and and once we want the memory

692
00:26:36,410 --> 00:26:38,630
deduplication takes place we do a bit in

693
00:26:38,630 --> 00:26:40,450
a location within the page table

694
00:26:40,450 --> 00:26:42,070
if you look at the page if you open up

695
00:26:42,070 --> 00:26:43,269
the page tables there are a bunch of

696
00:26:43,269 --> 00:26:45,309
page table entries that map different

697
00:26:45,309 --> 00:26:47,409
locations we think that the between that

698
00:26:47,409 --> 00:26:49,210
virtual address to physical addresses

699
00:26:49,210 --> 00:26:51,190
now each of these vegetable entries have

700
00:26:51,190 --> 00:26:53,049
a bit is called the supervisor bit and

701
00:26:53,049 --> 00:26:56,470
so like decide which privilege ring you

702
00:26:56,470 --> 00:26:57,759
need to be to be able to manipulate

703
00:26:57,759 --> 00:26:59,649
these pages now if we believe that

704
00:26:59,649 --> 00:27:01,840
supervisor bit they become quite easy

705
00:27:01,840 --> 00:27:04,409
from any user process to basically

706
00:27:04,409 --> 00:27:07,720
manipulate channel data and also can

707
00:27:07,720 --> 00:27:09,190
mindful each channel data it becomes

708
00:27:09,190 --> 00:27:11,259
quite easy to get escalate your

709
00:27:11,259 --> 00:27:12,419
privileges

710
00:27:12,419 --> 00:27:15,970
the second attack relies on manipulating

711
00:27:15,970 --> 00:27:19,539
I nodes so if you if you think of five

712
00:27:19,539 --> 00:27:22,090
systems like X before the oftentimes has

713
00:27:22,090 --> 00:27:24,960
have this data structure that so like

714
00:27:24,960 --> 00:27:28,419
Maps has filed to a location between the

715
00:27:28,419 --> 00:27:30,669
block device so there is a pointer in

716
00:27:30,669 --> 00:27:32,049
there that says this file is at this

717
00:27:32,049 --> 00:27:33,759
location within the block device there

718
00:27:33,759 --> 00:27:35,200
are also some other information there's

719
00:27:35,200 --> 00:27:39,039
like access time like creation date like

720
00:27:39,039 --> 00:27:41,139
whether it's su ID permissions and

721
00:27:41,139 --> 00:27:42,340
things like that but these are all

722
00:27:42,340 --> 00:27:43,840
information that you can instantly get

723
00:27:43,840 --> 00:27:47,700
by doing a simple LS on a binary but the

724
00:27:47,700 --> 00:27:50,470
information that you don't know and you

725
00:27:50,470 --> 00:27:51,820
need to have to be able to do flee

726
00:27:51,820 --> 00:27:53,769
puncture is that pointer right and then

727
00:27:53,769 --> 00:27:55,659
we notice that if you do an installation

728
00:27:55,659 --> 00:27:59,320
of any Ubuntu or Debian system this

729
00:27:59,320 --> 00:28:01,029
location of these binaries are so like

730
00:28:01,029 --> 00:28:02,320
if you know the size of the disk which

731
00:28:02,320 --> 00:28:03,639
is also an information that you have a

732
00:28:03,639 --> 00:28:05,799
DF for example you know exactly where

733
00:28:05,799 --> 00:28:07,659
that file is going to end up so you can

734
00:28:07,659 --> 00:28:09,309
also fabricate an inode and once you

735
00:28:09,309 --> 00:28:11,049
have fabricated and I know there are

736
00:28:11,049 --> 00:28:13,480
there is like this set UID bits that you

737
00:28:13,480 --> 00:28:16,210
can sleep which would then allow your

738
00:28:16,210 --> 00:28:18,340
your application to execute things as

739
00:28:18,340 --> 00:28:21,009
root so if you don't know set UID is

740
00:28:21,009 --> 00:28:24,580
this unique mechanism of like

741
00:28:24,580 --> 00:28:27,789
implementing this privilege so that the

742
00:28:27,789 --> 00:28:29,169
applications that require routes only

743
00:28:29,169 --> 00:28:32,700
take this select privileged select

744
00:28:32,700 --> 00:28:35,080
access during a very short period of

745
00:28:35,080 --> 00:28:36,580
time so you don't trust the entire

746
00:28:36,580 --> 00:28:38,710
binary you only trust a very small part

747
00:28:38,710 --> 00:28:42,070
of this binary and programmers often

748
00:28:42,070 --> 00:28:44,289
times take extra care when writing is

749
00:28:44,289 --> 00:28:46,149
this part so that it wouldn't become

750
00:28:46,149 --> 00:28:49,149
vulnerable to to exploit now bit slap on

751
00:28:49,149 --> 00:28:51,159
with sleep punctuate we could take any

752
00:28:51,159 --> 00:28:53,649
almost any known binary and then we

753
00:28:53,649 --> 00:28:54,350
could sleep a bit

754
00:28:54,350 --> 00:28:55,820
make it set you I did not imagine if

755
00:28:55,820 --> 00:28:57,980
your VI is set UID what could you do can

756
00:28:57,980 --> 00:28:59,480
basically do and it's almost anything

757
00:28:59,480 --> 00:29:01,250
that you want and easily upgrade your

758
00:29:01,250 --> 00:29:04,880
local access finally we also came up

759
00:29:04,880 --> 00:29:06,650
with this interesting attack which is a

760
00:29:06,650 --> 00:29:08,960
bit flipping machine code so here is a

761
00:29:08,960 --> 00:29:11,240
sample source code that basically takes

762
00:29:11,240 --> 00:29:13,130
as an input a password and checks

763
00:29:13,130 --> 00:29:14,630
whether the password is correct or not

764
00:29:14,630 --> 00:29:16,789
in this very v function so if you

765
00:29:16,789 --> 00:29:20,419
provide secret as your password then the

766
00:29:20,419 --> 00:29:22,370
program is going to print okay if not

767
00:29:22,370 --> 00:29:24,620
it's going to say fail and this is the

768
00:29:24,620 --> 00:29:25,880
original authors of this program it's

769
00:29:25,880 --> 00:29:27,740
quite simple right if you use garbage

770
00:29:27,740 --> 00:29:29,419
it's going to save face but if you give

771
00:29:29,419 --> 00:29:31,070
it the correct password it's going to

772
00:29:31,070 --> 00:29:32,780
see it's going to say that it's all okay

773
00:29:32,780 --> 00:29:35,870
now let's look at the so like the binary

774
00:29:35,870 --> 00:29:37,970
representation of this this program and

775
00:29:37,970 --> 00:29:39,830
its disassembly so you're on the left

776
00:29:39,830 --> 00:29:42,020
side you're looking at the hex version

777
00:29:42,020 --> 00:29:44,299
of the binary and then here you're

778
00:29:44,299 --> 00:29:46,909
looking at the disassembly let's try to

779
00:29:46,909 --> 00:29:48,890
bid rip some of these bits so look at

780
00:29:48,890 --> 00:29:55,010
line 3 here and I'm going to do a bit

781
00:29:55,010 --> 00:29:57,320
flip now and suddenly you can see that

782
00:29:57,320 --> 00:29:58,520
the instruction is changing it's

783
00:29:58,520 --> 00:30:00,679
becoming an and now now let's do a

784
00:30:00,679 --> 00:30:02,929
little bit more so this isn't a select

785
00:30:02,929 --> 00:30:05,720
the opcode if you do a little bit more

786
00:30:05,720 --> 00:30:07,760
you can see that now the operands I

787
00:30:07,760 --> 00:30:09,620
start to change now most of these bits

788
00:30:09,620 --> 00:30:12,200
lips are not that good because because

789
00:30:12,200 --> 00:30:14,000
they either result in to incorrect

790
00:30:14,000 --> 00:30:15,559
behavior or they're going to lead to

791
00:30:15,559 --> 00:30:17,929
program crashes but there is this one

792
00:30:17,929 --> 00:30:21,250
here that if you manage to beat sleep it

793
00:30:21,250 --> 00:30:24,679
changes a Jay Z which is jump jump if 0

794
00:30:24,679 --> 00:30:26,630
the result of the test was 0 to jump if

795
00:30:26,630 --> 00:30:28,520
the result of the test was not 0 now

796
00:30:28,520 --> 00:30:30,200
this is corresponding to that verify

797
00:30:30,200 --> 00:30:32,150
function so basically if you do a bit

798
00:30:32,150 --> 00:30:34,549
flip at this opcode then suddenly we are

799
00:30:34,549 --> 00:30:37,070
reversing the condition of the test that

800
00:30:37,070 --> 00:30:39,409
was checking for this password now that

801
00:30:39,409 --> 00:30:40,669
would mean that if you have this bill

802
00:30:40,669 --> 00:30:42,500
it's only if we pass this secret that

803
00:30:42,500 --> 00:30:44,150
the original password is going to say

804
00:30:44,150 --> 00:30:46,520
same well if you pass the garbage is

805
00:30:46,520 --> 00:30:48,890
going to say ok so basically you could

806
00:30:48,890 --> 00:30:51,169
use this this primitive to be trip to

807
00:30:51,169 --> 00:30:52,970
patch many of these security sensitive

808
00:30:52,970 --> 00:30:54,440
tests that you have in your in your

809
00:30:54,440 --> 00:30:56,150
application and for example you could

810
00:30:56,150 --> 00:30:58,640
use it on sudo or other application like

811
00:30:58,640 --> 00:31:01,909
maybe even OpenSSH so like that bypass

812
00:31:01,909 --> 00:31:03,860
the security test and this is also not

813
00:31:03,860 --> 00:31:05,450
going to be so easy to fix because most

814
00:31:05,450 --> 00:31:06,919
of the other stuff we can probably fix

815
00:31:06,919 --> 00:31:08,120
by doing a checksum

816
00:31:08,120 --> 00:31:10,760
but this is binary getting executed by

817
00:31:10,760 --> 00:31:11,870
the processor and it becomes quite

818
00:31:11,870 --> 00:31:14,290
expensive to check this all the time

819
00:31:14,290 --> 00:31:17,270
alright so now I've told you about the

820
00:31:17,270 --> 00:31:18,440
openness to fetch attack and the

821
00:31:18,440 --> 00:31:20,930
privilege escalation attack but one of

822
00:31:20,930 --> 00:31:22,820
the requirements that they had and we

823
00:31:22,820 --> 00:31:25,010
didn't like was the fact that we needed

824
00:31:25,010 --> 00:31:26,390
to know that we needed to know the

825
00:31:26,390 --> 00:31:29,270
public key of of the victim VM and you

826
00:31:29,270 --> 00:31:30,740
might say that you don't always have

827
00:31:30,740 --> 00:31:32,960
this information the public key and may

828
00:31:32,960 --> 00:31:35,060
make the attack a little bit more

829
00:31:35,060 --> 00:31:37,490
impractical than than it needs to be so

830
00:31:37,490 --> 00:31:39,350
we were going through this exercise of

831
00:31:39,350 --> 00:31:41,390
thinking can we do an attack that is

832
00:31:41,390 --> 00:31:42,980
completely zero knowledge so if you

833
00:31:42,980 --> 00:31:45,410
don't know anything about the victim can

834
00:31:45,410 --> 00:31:47,030
you still use three punctuate to

835
00:31:47,030 --> 00:31:50,270
basically compromise it and when here is

836
00:31:50,270 --> 00:31:52,360
going to tell you about how this works

837
00:31:52,360 --> 00:31:59,420
thank you thank you okay so in these the

838
00:31:59,420 --> 00:32:02,530
the final example text we're gonna

839
00:32:02,530 --> 00:32:09,370
include including a video demo is a is

840
00:32:09,370 --> 00:32:11,750
going to have the goal is we're going to

841
00:32:11,750 --> 00:32:14,120
assume that our victim is running the

842
00:32:14,120 --> 00:32:16,100
apt-get package management system so

843
00:32:16,100 --> 00:32:17,000
let's say it's in the boot

844
00:32:17,000 --> 00:32:20,860
Debian machine or the buta machine and

845
00:32:20,860 --> 00:32:24,680
we assume that on a regular basis our

846
00:32:24,680 --> 00:32:26,990
victim does you have to get update and

847
00:32:26,990 --> 00:32:28,700
apt-get upgrade maybe it's even

848
00:32:28,700 --> 00:32:30,800
automatic nightly thing which i think is

849
00:32:30,800 --> 00:32:35,120
quite common so using in this scenario

850
00:32:35,120 --> 00:32:38,660
we want to make the victim go to our

851
00:32:38,660 --> 00:32:42,500
repository fetch the index file

852
00:32:42,500 --> 00:32:46,250
repository install our malicious not

853
00:32:46,250 --> 00:32:49,130
authentic package we're going to do core

854
00:32:49,130 --> 00:32:52,940
utils UN plus 1 backdoor LS and where I

855
00:32:52,940 --> 00:32:54,530
have installed and all of these checks

856
00:32:54,530 --> 00:32:56,750
are going to have to pass totally

857
00:32:56,750 --> 00:32:58,990
normally like it's a totally normal day

858
00:32:58,990 --> 00:33:04,700
so let's say let's talk about how how

859
00:33:04,700 --> 00:33:09,650
apt works a little bit so apt-get has an

860
00:33:09,650 --> 00:33:11,480
e-2c app source that list there's this

861
00:33:11,480 --> 00:33:16,280
list of repositories that it goes to two

862
00:33:16,280 --> 00:33:19,040
URLs it's a list of URLs of repositories

863
00:33:19,040 --> 00:33:21,620
where the package indexes are stored

864
00:33:21,620 --> 00:33:23,330
so whenever you do an app get update

865
00:33:23,330 --> 00:33:26,090
it's going to go through all those URLs

866
00:33:26,090 --> 00:33:27,830
to fetch all the new indexes and see

867
00:33:27,830 --> 00:33:29,630
what the new packages are or what new

868
00:33:29,630 --> 00:33:31,160
versions are referencing and then and

869
00:33:31,160 --> 00:33:33,470
then you can upgrade them or move them

870
00:33:33,470 --> 00:33:35,660
or whatever you want but this is where

871
00:33:35,660 --> 00:33:38,920
that's where the master lists are

872
00:33:39,970 --> 00:33:42,920
another important part of Apps get and

873
00:33:42,920 --> 00:33:44,660
an important part of its security is

874
00:33:44,660 --> 00:33:47,030
this keyring this et Cie apps trusted of

875
00:33:47,030 --> 00:33:50,330
GPG is a GPG keyring file that contains

876
00:33:50,330 --> 00:33:53,929
public keys that a p2p trusts to

877
00:33:53,929 --> 00:33:56,240
authenticate packages so it's a very

878
00:33:56,240 --> 00:33:58,520
nice end-to-end test that apt is

879
00:33:58,520 --> 00:34:00,980
built-in so it's test both of

880
00:34:00,980 --> 00:34:03,429
authenticity and of integrity because

881
00:34:03,429 --> 00:34:06,050
whenever a package would be produced by

882
00:34:06,050 --> 00:34:07,670
a malicious person they of course don't

883
00:34:07,670 --> 00:34:10,310
have a key that corresponds to any key

884
00:34:10,310 --> 00:34:11,899
in the keyring so they can't make a good

885
00:34:11,899 --> 00:34:14,530
signature and if the package were to be

886
00:34:14,530 --> 00:34:18,379
damaged in downloading then the things

887
00:34:18,379 --> 00:34:19,610
you would also not match that's a very

888
00:34:19,610 --> 00:34:21,290
good authenticity and integrity test

889
00:34:21,290 --> 00:34:24,590
that deeply is used for and so nice to

890
00:34:24,590 --> 00:34:25,429
end-to-end you know it doesn't matter

891
00:34:25,429 --> 00:34:27,199
where you got from you might have to

892
00:34:27,199 --> 00:34:29,030
test if the repository is trusted or not

893
00:34:29,030 --> 00:34:30,260
now you just test with and see the

894
00:34:30,260 --> 00:34:31,760
signatures trust or not so that makes it

895
00:34:31,760 --> 00:34:35,840
really nice and end-to-end however if

896
00:34:35,840 --> 00:34:37,668
you wanna subvert the security then

897
00:34:37,668 --> 00:34:40,699
we're going to have to do using flippin

898
00:34:40,699 --> 00:34:42,590
Cherie then we find that we can do two

899
00:34:42,590 --> 00:34:45,889
bit flips to subvert this security so

900
00:34:45,889 --> 00:34:49,340
number one we want to flip a bit in the

901
00:34:49,340 --> 00:34:53,330
sources that list file and and using

902
00:34:53,330 --> 00:34:54,860
just one bit we're going to able to

903
00:34:54,860 --> 00:34:57,590
steer the victim from the real

904
00:34:57,590 --> 00:34:59,450
repositories to our malicious repository

905
00:34:59,450 --> 00:35:04,040
so in the URL might say HTTP colon slash

906
00:35:04,040 --> 00:35:08,000
slash security boon TOCOM slash bla bla

907
00:35:08,000 --> 00:35:10,160
location and we're going to change that

908
00:35:10,160 --> 00:35:12,320
to exactly the same URL but a different

909
00:35:12,320 --> 00:35:14,660
domain name so all of these bit flips

910
00:35:14,660 --> 00:35:16,790
all of these domain names that are one

911
00:35:16,790 --> 00:35:20,570
bit fit away like boom 500 or something

912
00:35:20,570 --> 00:35:23,270
I think is one of them and boo-boo comm

913
00:35:23,270 --> 00:35:25,670
with registered them by the way just for

914
00:35:25,670 --> 00:35:27,740
any other precaution but never launch

915
00:35:27,740 --> 00:35:31,430
them so we are none of the real owners

916
00:35:31,430 --> 00:35:33,410
want them so we are starting an auction

917
00:35:33,410 --> 00:35:34,640
after this lesson

918
00:35:34,640 --> 00:35:37,040
half of this book for you know highest

919
00:35:37,040 --> 00:35:41,570
bidder gets them so we've we've

920
00:35:41,570 --> 00:35:43,550
registered you boo-boo comm if you find

921
00:35:43,550 --> 00:35:44,690
the right bit flip we can send the

922
00:35:44,690 --> 00:35:46,520
victim to Boone pure calm because we can

923
00:35:46,520 --> 00:35:48,590
change the Dominion that's looking for

924
00:35:48,590 --> 00:35:50,720
in the in the file system cache and we

925
00:35:50,720 --> 00:35:52,700
want to do it this way because then we

926
00:35:52,700 --> 00:35:54,110
don't have to write on any funny tricks

927
00:35:54,110 --> 00:35:55,940
like no DNS spoofing the connection

928
00:35:55,940 --> 00:35:58,130
hijacking no getting lucky with network

929
00:35:58,130 --> 00:35:59,840
interception it's just a totally normal

930
00:35:59,840 --> 00:36:02,480
DNS lookup totally legitimate DNS lookup

931
00:36:02,480 --> 00:36:04,670
to legitimate domain to our malicious

932
00:36:04,670 --> 00:36:06,980
repository and that's where they end up

933
00:36:06,980 --> 00:36:10,700
them now if we manage to end if we

934
00:36:10,700 --> 00:36:13,250
manage to send our victim to our

935
00:36:13,250 --> 00:36:14,990
malicious repository that we still can't

936
00:36:14,990 --> 00:36:18,050
trick them into inter fetching the

937
00:36:18,050 --> 00:36:19,640
malicious package because the GPG

938
00:36:19,640 --> 00:36:24,230
signature is not right so what we can do

939
00:36:24,230 --> 00:36:28,850
is also flip a bit in the transitive jpg

940
00:36:28,850 --> 00:36:31,370
file and just to remind you these files

941
00:36:31,370 --> 00:36:32,960
are stock installs right so we're

942
00:36:32,960 --> 00:36:34,370
assuming we can it's very easy to

943
00:36:34,370 --> 00:36:35,780
predict the contents of these things

944
00:36:35,780 --> 00:36:37,550
because they're all the same after

945
00:36:37,550 --> 00:36:38,270
installation

946
00:36:38,270 --> 00:36:40,250
that's why flipping shuri so applicable

947
00:36:40,250 --> 00:36:44,270
here and because it's easier to get the

948
00:36:44,270 --> 00:36:46,700
contents of these files now if we flip a

949
00:36:46,700 --> 00:36:49,340
bit in the public Keys listed in trusted

950
00:36:49,340 --> 00:36:53,330
GPG the 4096 bit keys but still so it's

951
00:36:53,330 --> 00:36:55,610
harder to factorize the nest h keys but

952
00:36:55,610 --> 00:36:57,980
still 5% of the all the possible bit

953
00:36:57,980 --> 00:37:01,340
flips we were able to factorize in the

954
00:37:01,340 --> 00:37:02,900
and gate and therefore get the

955
00:37:02,900 --> 00:37:04,880
corresponding private keys so if you

956
00:37:04,880 --> 00:37:06,860
flip if you manage the bits of any of

957
00:37:06,860 --> 00:37:09,860
those we can make a good signature that

958
00:37:09,860 --> 00:37:11,450
GPG will totally trust because it's

959
00:37:11,450 --> 00:37:14,360
supposed to because the corresponding

960
00:37:14,360 --> 00:37:17,030
public key is entrusted out GPG so

961
00:37:17,030 --> 00:37:19,460
that's how you can see no bugs of GPG or

962
00:37:19,460 --> 00:37:20,960
any other trickery we're involved it's

963
00:37:20,960 --> 00:37:23,210
all quite legitimate if you change these

964
00:37:23,210 --> 00:37:26,270
things so we can use this computer

965
00:37:26,270 --> 00:37:28,700
private key and and because we can we

966
00:37:28,700 --> 00:37:31,310
can pre-compute many of the

967
00:37:31,310 --> 00:37:33,200
factorizations because the because the

968
00:37:33,200 --> 00:37:35,930
public keys are stock stock installs are

969
00:37:35,930 --> 00:37:38,750
years old you know boo to archive

970
00:37:38,750 --> 00:37:41,690
signing keys and crafting so let me show

971
00:37:41,690 --> 00:37:44,810
you the video demo that well of this

972
00:37:44,810 --> 00:37:47,120
this is a video demo it's it was

973
00:37:47,120 --> 00:37:48,359
originally a 20 minutes

974
00:37:48,359 --> 00:37:51,930
long but answered down to two half

975
00:37:51,930 --> 00:37:53,690
minutes

976
00:37:53,690 --> 00:37:56,099
not because we play any tricks but just

977
00:37:56,099 --> 00:37:57,809
because treatments too long and we just

978
00:37:57,809 --> 00:37:58,890
could've won show you the interesting

979
00:37:58,890 --> 00:38:05,099
parts okay

980
00:38:05,099 --> 00:38:07,349
I'm going to occasionally interrupt this

981
00:38:07,349 --> 00:38:11,460
and talk over the talk over what's

982
00:38:11,460 --> 00:38:16,230
happening because it's quite free okay

983
00:38:16,230 --> 00:38:17,630
here we go

984
00:38:17,630 --> 00:38:20,999
okay can you see here this is the

985
00:38:20,999 --> 00:38:24,509
attacker he's doing all these he's doing

986
00:38:24,509 --> 00:38:26,759
row hammer this is the victim and the

987
00:38:26,759 --> 00:38:28,140
victim is doing totally normal victim

988
00:38:28,140 --> 00:38:30,210
things here apt-get update and apt-get

989
00:38:30,210 --> 00:38:32,160
upgrade and we're going to show you

990
00:38:32,160 --> 00:38:34,829
what's like before during and after the

991
00:38:34,829 --> 00:38:36,239
various bits clips that we're going to

992
00:38:36,239 --> 00:38:42,150
do ah there's requests to turn down the

993
00:38:42,150 --> 00:38:45,499
light step possible thank you

994
00:38:45,499 --> 00:38:50,999
is that better yeah okay okay okay so

995
00:38:50,999 --> 00:38:54,049
here's the victim so let's first see

996
00:38:54,049 --> 00:38:56,670
before we do any funny business we're

997
00:38:56,670 --> 00:39:01,319
going to make the victim do normal AB

998
00:39:01,319 --> 00:39:03,059
get update and apt-get upgrade and show

999
00:39:03,059 --> 00:39:04,410
you that there's nothing going on in the

1000
00:39:04,410 --> 00:39:05,579
malicious this is our malicious

1001
00:39:05,579 --> 00:39:07,650
repository this is the web server log of

1002
00:39:07,650 --> 00:39:09,569
the malicious repository so there's no

1003
00:39:09,569 --> 00:39:12,890
funny business going on

1004
00:39:14,160 --> 00:39:17,170
huh so this update happening

1005
00:39:17,170 --> 00:39:19,510
no activity here here little controller

1006
00:39:19,510 --> 00:39:24,520
sources properly assisted so the sort of

1007
00:39:24,520 --> 00:39:26,020
the list presenting admits that now that

1008
00:39:26,020 --> 00:39:27,970
means that the that the victim is going

1009
00:39:27,970 --> 00:39:30,670
to be able to be sent to our malicious

1010
00:39:30,670 --> 00:39:32,290
repository so let's see if that's going

1011
00:39:32,290 --> 00:39:32,890
to work

1012
00:39:32,890 --> 00:39:35,110
now the duplication is going to happen

1013
00:39:35,110 --> 00:39:37,780
with the first lift lift and then when

1014
00:39:37,780 --> 00:39:42,100
the duplication happens the source of

1015
00:39:42,100 --> 00:39:44,380
this file is changed so let's see what

1016
00:39:44,380 --> 00:39:48,000
happens when we do not get update

1017
00:39:48,420 --> 00:39:51,070
alright so now you have the DVD on our

1018
00:39:51,070 --> 00:39:54,010
religious repository great now GPG is

1019
00:39:54,010 --> 00:39:55,600
saying I'm not going I found a funny

1020
00:39:55,600 --> 00:39:57,610
package the see which is not right I'm

1021
00:39:57,610 --> 00:39:58,930
not going to install it for us to

1022
00:39:58,930 --> 00:40:03,370
upgrade and see what happens no package

1023
00:40:03,370 --> 00:40:05,290
to upgrade it's just as it's supposed to

1024
00:40:05,290 --> 00:40:09,550
do now the next step is been looking for

1025
00:40:09,550 --> 00:40:12,550
a bit the G key of the trusted DG

1026
00:40:12,550 --> 00:40:16,030
keyring because if you could do that to

1027
00:40:16,030 --> 00:40:17,410
find the right one then you can use one

1028
00:40:17,410 --> 00:40:18,880
of our pre computed private to use to

1029
00:40:18,880 --> 00:40:21,490
generate a signature we find a bit

1030
00:40:21,490 --> 00:40:23,560
deduplication is happening oh my

1031
00:40:23,560 --> 00:40:26,040
goodness

1032
00:40:28,940 --> 00:40:31,530
okay the Siletz actually happen now

1033
00:40:31,530 --> 00:40:34,130
so now we see that in the outfit here

1034
00:40:34,130 --> 00:40:38,190
you know which that has happened and we

1035
00:40:38,190 --> 00:40:39,990
select this bit flip here it's a page

1036
00:40:39,990 --> 00:40:42,390
offset so that our malicious repository

1037
00:40:42,390 --> 00:40:44,580
knows which private key to pick to sign

1038
00:40:44,580 --> 00:40:46,590
to sign the package and generate the

1039
00:40:46,590 --> 00:40:49,070
repository

1040
00:40:51,030 --> 00:40:53,940
oh my goodness so what happens when we

1041
00:40:53,940 --> 00:40:55,130
do the update now

1042
00:40:55,130 --> 00:40:57,700
[Music]

1043
00:40:57,700 --> 00:41:01,049
I don't know

1044
00:41:01,280 --> 00:41:03,560
but remember we're going to backdoor LS

1045
00:41:03,560 --> 00:41:05,150
and we're going back to our core utils

1046
00:41:05,150 --> 00:41:07,310
and specifically or less so let's show

1047
00:41:07,310 --> 00:41:09,560
you the normal behavior of SAS here's LS

1048
00:41:09,560 --> 00:41:12,020
I'm puking widows output let's just say

1049
00:41:12,020 --> 00:41:13,850
some bunch of random files in someone's

1050
00:41:13,850 --> 00:41:15,920
home directory but is it going to change

1051
00:41:15,920 --> 00:41:19,820
that through the upgrade upgrade happens

1052
00:41:19,820 --> 00:41:23,240
is then except for signature you know my

1053
00:41:23,240 --> 00:41:24,560
goodness it's good example signature and

1054
00:41:24,560 --> 00:41:26,180
now if it happens what happens LS its

1055
00:41:26,180 --> 00:41:40,220
back doors thank you very much ok so

1056
00:41:40,220 --> 00:41:43,960
that's a demonstration of the up get

1057
00:41:43,960 --> 00:41:49,130
attack video open search attack and of

1058
00:41:49,130 --> 00:41:51,770
enough this thing also also the unedited

1059
00:41:51,770 --> 00:41:53,450
version is available on the website

1060
00:41:53,450 --> 00:41:55,790
which I'll show you which I'll show you

1061
00:41:55,790 --> 00:42:01,540
later okay so how has the reception of

1062
00:42:01,540 --> 00:42:07,370
this work bin the reception the we have

1063
00:42:07,370 --> 00:42:10,670
been lucky enough that the NCSE is the

1064
00:42:10,670 --> 00:42:12,320
Dutch not a national cybersecurity

1065
00:42:12,320 --> 00:42:17,240
center has we have has done disclosure

1066
00:42:17,240 --> 00:42:18,530
first it is a very thorough professional

1067
00:42:18,530 --> 00:42:21,680
job they content they've contact their

1068
00:42:21,680 --> 00:42:23,990
counterparts in other countries and they

1069
00:42:23,990 --> 00:42:26,180
have notified a redhead Oracle's n

1070
00:42:26,180 --> 00:42:30,190
VMware DB n as the OS vendors sorry

1071
00:42:30,190 --> 00:42:32,420
redhead or Cosette and VMware as the

1072
00:42:32,420 --> 00:42:34,280
hypervisor vendors given and able to as

1073
00:42:34,280 --> 00:42:38,780
the West vendors and open stage and gbgs

1074
00:42:38,780 --> 00:42:41,090
application vendor so you can see this

1075
00:42:41,090 --> 00:42:43,280
kind of the software stack which are in

1076
00:42:43,280 --> 00:42:45,350
are affected by this work and are in the

1077
00:42:45,350 --> 00:42:48,530
position to do mitigation and GPG they

1078
00:42:48,530 --> 00:42:50,180
all of the vendors gave an appropriate

1079
00:42:50,180 --> 00:42:53,030
response before the time that this work

1080
00:42:53,030 --> 00:42:55,820
became public and gbg was the first to

1081
00:42:55,820 --> 00:42:57,920
respond with a mitigation commit so of

1082
00:42:57,920 --> 00:43:01,390
course we're very happy about that so

1083
00:43:04,450 --> 00:43:07,130
what should the conclusion be that we

1084
00:43:07,130 --> 00:43:08,120
think that you should take away from

1085
00:43:08,120 --> 00:43:11,630
this work so we see

1086
00:43:11,630 --> 00:43:14,800
that technique stop recruiting it breaks

1087
00:43:14,800 --> 00:43:17,870
harder the isolation that hardware-based

1088
00:43:17,870 --> 00:43:19,730
virtualization is supposed to offer us

1089
00:43:19,730 --> 00:43:24,130
because the in DRAM and not going to CPU

1090
00:43:24,130 --> 00:43:26,360
now we always knew we'd long known that

1091
00:43:26,360 --> 00:43:30,110
co-hosting VMs is risky just like how I

1092
00:43:30,110 --> 00:43:32,690
showed you in his in his talk last year

1093
00:43:32,690 --> 00:43:36,740
until we know about many side channels

1094
00:43:36,740 --> 00:43:39,290
deduplicated deduplication is a source

1095
00:43:39,290 --> 00:43:43,430
of a side channel CPU cache it acts as a

1096
00:43:43,430 --> 00:43:44,930
source of sake on that allow you to leak

1097
00:43:44,930 --> 00:43:47,540
very sensitive information even across

1098
00:43:47,540 --> 00:43:49,940
VM boundaries intercept VM conditions

1099
00:43:49,940 --> 00:43:51,260
but this is the first work that shows

1100
00:43:51,260 --> 00:43:54,440
that you can under these conditions do a

1101
00:43:54,440 --> 00:43:56,390
reliable have a reliable single bit

1102
00:43:56,390 --> 00:43:58,940
right primitive in a target VM with

1103
00:43:58,940 --> 00:44:02,270
which as you can see has a far-reaching

1104
00:44:02,270 --> 00:44:04,370
security consequences so of course we

1105
00:44:04,370 --> 00:44:07,790
are recommending that everyone stick to

1106
00:44:07,790 --> 00:44:08,960
the most straightforward mitigation

1107
00:44:08,960 --> 00:44:10,550
which is disabling memory deduplication

1108
00:44:10,550 --> 00:44:14,360
which a couple of Dutch at least that we

1109
00:44:14,360 --> 00:44:16,400
know of cloud providers have done as a

1110
00:44:16,400 --> 00:44:18,470
result of this work they weren't happy

1111
00:44:18,470 --> 00:44:20,030
about it but they take it seriously

1112
00:44:20,030 --> 00:44:23,180
enough that they did this now this is

1113
00:44:23,180 --> 00:44:25,730
the URL of our research group Lucic is

1114
00:44:25,730 --> 00:44:29,060
the free university system security

1115
00:44:29,060 --> 00:44:31,820
research group in Amsterdam and this URL

1116
00:44:31,820 --> 00:44:33,710
is the project page for this for this

1117
00:44:33,710 --> 00:44:35,240
particular project so there's lots of

1118
00:44:35,240 --> 00:44:37,220
backer information there an academic

1119
00:44:37,220 --> 00:44:39,970
paper many video demos one minute

1120
00:44:39,970 --> 00:44:43,850
introduction video and lots of links to

1121
00:44:43,850 --> 00:44:46,310
how the media has received this work so

1122
00:44:46,310 --> 00:44:47,980
take a look there if you're interested

1123
00:44:47,980 --> 00:44:49,940
that's all from us thank you for your

1124
00:44:49,940 --> 00:44:50,930
attention

1125
00:44:50,930 --> 00:44:55,828
[Applause]

1126
00:44:56,540 --> 00:45:01,290
we are available now for questions if

1127
00:45:01,290 --> 00:45:08,460
you wish you need to shout and repeat

1128
00:45:08,460 --> 00:45:10,080
the call yeah so unfortunately there's

1129
00:45:10,080 --> 00:45:14,270
no roving mic but please go ahead

1130
00:45:25,340 --> 00:45:28,820
it has tits the question that that the

1131
00:45:28,820 --> 00:45:31,640
victim has to do manually apt-get yes

1132
00:45:31,640 --> 00:45:33,440
absolutely so we are indeed relying on

1133
00:45:33,440 --> 00:45:35,090
the fact that the victim is doing the

1134
00:45:35,090 --> 00:45:39,260
app gets in its own in its own time and

1135
00:45:39,260 --> 00:45:41,660
gets a upgrade but we're assuming that

1136
00:45:41,660 --> 00:45:43,730
either we can predict this or we simply

1137
00:45:43,730 --> 00:45:45,980
do this this probing so often that

1138
00:45:45,980 --> 00:45:47,180
sooner or later we're going to catch it

1139
00:45:47,180 --> 00:45:49,010
we have lots of opportunity to do this

1140
00:45:49,010 --> 00:45:51,860
also like usually in the cron grunt is

1141
00:45:51,860 --> 00:45:54,440
often updating is run as a cron job so

1142
00:45:54,440 --> 00:45:56,510
we know already okay yeah it's going to

1143
00:45:56,510 --> 00:46:09,080
happen sooner or later yes please how

1144
00:46:09,080 --> 00:46:12,800
much time did it right how much time did

1145
00:46:12,800 --> 00:46:14,900
it take for companies to respond with

1146
00:46:14,900 --> 00:46:17,270
the fix to this adequately in the case

1147
00:46:17,270 --> 00:46:18,890
of GPG that were very fast they're just

1148
00:46:18,890 --> 00:46:22,700
a few weeks let me think some of the

1149
00:46:22,700 --> 00:46:24,020
cloud hosting providers they were also

1150
00:46:24,020 --> 00:46:25,280
quite fast in turning off the

1151
00:46:25,280 --> 00:46:27,770
duplication all of the hypervisor

1152
00:46:27,770 --> 00:46:31,460
vendors in the most in some cases they

1153
00:46:31,460 --> 00:46:33,200
said we've already warned our customers

1154
00:46:33,200 --> 00:46:34,460
about the danger we're not going to do

1155
00:46:34,460 --> 00:46:35,270
anything further

1156
00:46:35,270 --> 00:46:36,770
some of them update the documentation

1157
00:46:36,770 --> 00:46:40,130
say it's riskier it was risky already

1158
00:46:40,130 --> 00:46:43,940
now it's even riskier so for the most

1159
00:46:43,940 --> 00:46:45,350
part we did actually have any vendors

1160
00:46:45,350 --> 00:46:49,310
we've actually fixed it for real we the

1161
00:46:49,310 --> 00:46:51,380
hypervisor vendor response for the most

1162
00:46:51,380 --> 00:46:53,000
part has been change documentation and

1163
00:46:53,000 --> 00:46:55,520
the OS vendors have said may and

1164
00:46:55,520 --> 00:46:57,800
application vendors have said for the

1165
00:46:57,800 --> 00:46:59,810
most part also may so we're already

1166
00:46:59,810 --> 00:47:01,930
quite happy that they disabled the

1167
00:47:01,930 --> 00:47:04,700
basically they patched the the GPG to

1168
00:47:04,700 --> 00:47:07,190
fix it we wanted OpenSSH to also do this

1169
00:47:07,190 --> 00:47:18,580
but it didn't happen yes please yeah I

1170
00:47:26,110 --> 00:47:28,490
see what you mean I see what you mean

1171
00:47:28,490 --> 00:47:30,890
the question is with this templating you

1172
00:47:30,890 --> 00:47:32,600
can only do one bit of time but how far

1173
00:47:32,600 --> 00:47:35,090
can you get can you can you corrupt can

1174
00:47:35,090 --> 00:47:36,530
you completely change the page to

1175
00:47:36,530 --> 00:47:38,860
whatever you want

1176
00:47:38,860 --> 00:47:41,200
answer that is a it has with the

1177
00:47:41,200 --> 00:47:43,810
intricacies of because of the way the

1178
00:47:43,810 --> 00:47:45,820
duplication works after the duplication

1179
00:47:45,820 --> 00:47:48,730
happens once the physical address will

1180
00:47:48,730 --> 00:47:50,050
never change the physical picture will

1181
00:47:50,050 --> 00:47:51,370
never change again it ends up in the

1182
00:47:51,370 --> 00:47:53,740
case I'm stable tree and after that the

1183
00:47:53,740 --> 00:47:55,800
physical page will never change and

1184
00:47:55,800 --> 00:47:58,420
because of that that's the template

1185
00:47:58,420 --> 00:48:00,430
we're stuck with so that's why in this

1186
00:48:00,430 --> 00:48:03,940
particular implementation at least we

1187
00:48:03,940 --> 00:48:06,010
can only do per page we can only change

1188
00:48:06,010 --> 00:48:07,600
one way that's the only thing that we

1189
00:48:07,600 --> 00:48:10,090
rely on at least so but but the offset

1190
00:48:10,090 --> 00:48:12,070
is basically depends on how vulnerable

1191
00:48:12,070 --> 00:48:14,260
the DRAM is right so in one of the tests

1192
00:48:14,260 --> 00:48:15,700
that that we have been noticed that you

1193
00:48:15,700 --> 00:48:18,070
could almost like flip any bit within

1194
00:48:18,070 --> 00:48:24,610
the page after like an hour or so yeah

1195
00:48:24,610 --> 00:48:26,200
so it depends quite a bit on how

1196
00:48:26,200 --> 00:48:28,240
vulnerable the DRAM is in the sector

1197
00:48:28,240 --> 00:48:29,590
that we are running we could do like

1198
00:48:29,590 --> 00:48:32,710
28,000 Billups of the 32,000 so a page

1199
00:48:32,710 --> 00:48:36,010
is 4096 bytes 8 bits vector bytes or 32

1200
00:48:36,010 --> 00:48:38,440
thousand possibilities about 32 thousand

1201
00:48:38,440 --> 00:48:40,660
possibilities and we could do 28,000 in

1202
00:48:40,660 --> 00:48:42,640
this test but that we had but depending

1203
00:48:42,640 --> 00:48:44,110
on the vulnerability of the deem you

1204
00:48:44,110 --> 00:48:46,030
could get those much faster or you could

1205
00:48:46,030 --> 00:48:49,800
get them much much slower or not at all

1206
00:48:50,280 --> 00:48:53,430
yes please

1207
00:48:55,590 --> 00:49:08,530
that's right okay so the question so

1208
00:49:08,530 --> 00:49:12,670
this question is the template pinned on

1209
00:49:12,670 --> 00:49:16,120
where in physical memory you are right

1210
00:49:16,120 --> 00:49:18,880
and we wait hammer so how did you have

1211
00:49:18,880 --> 00:49:22,270
you predict where the template all right

1212
00:49:22,270 --> 00:49:24,760
so do you characterize all of the memory

1213
00:49:24,760 --> 00:49:28,270
NV in the in your own VM first or how do

1214
00:49:28,270 --> 00:49:29,530
you do that and the answer is indeed

1215
00:49:29,530 --> 00:49:32,500
that's that's what we did so we find as

1216
00:49:32,500 --> 00:49:34,600
soon as we know the page that we want to

1217
00:49:34,600 --> 00:49:35,920
corrupt and as soon as we know the

1218
00:49:35,920 --> 00:49:37,840
offset within that page the bit that we

1219
00:49:37,840 --> 00:49:40,840
want to corrupt then we go and do row

1220
00:49:40,840 --> 00:49:43,330
hammer in our own VM over over and over

1221
00:49:43,330 --> 00:49:46,960
and over just and so long as that so

1222
00:49:46,960 --> 00:49:48,670
long as we need until we find one of the

1223
00:49:48,670 --> 00:49:50,220
possible offsets

1224
00:49:50,220 --> 00:49:52,650
often times we want not one particular

1225
00:49:52,650 --> 00:49:56,190
one but a range of ones and we J we do

1226
00:49:56,190 --> 00:49:58,760
sort of make a meet in the middle of

1227
00:49:58,760 --> 00:50:01,110
here here all the bits became corrupt

1228
00:50:01,110 --> 00:50:02,580
here all the factorizations we can do

1229
00:50:02,580 --> 00:50:04,380
and as soon as we one meets the other

1230
00:50:04,380 --> 00:50:08,360
then we indicated OpenSSH we we have

1231
00:50:08,360 --> 00:50:11,630
your question satisfactory

1232
00:50:11,630 --> 00:50:14,370
so basically attack ourselves first to

1233
00:50:14,370 --> 00:50:16,470
see which fits exactly annoyed before

1234
00:50:16,470 --> 00:50:18,030
actually putting their target data their

1235
00:50:18,030 --> 00:50:22,080
application to measure do we have time

1236
00:50:22,080 --> 00:50:23,520
for more we have no time for more I

1237
00:50:23,520 --> 00:50:26,520
think is it right okay but you can come

1238
00:50:26,520 --> 00:50:29,550
across in private of course yes thank

1239
00:50:29,550 --> 00:50:31,000
you for your attention

1240
00:50:31,000 --> 00:50:34,780
[Applause]

