1
00:00:00,030 --> 00:00:03,689
all right so thanks for coming to my

2
00:00:03,689 --> 00:00:06,270
talk I just I was I couldn't wait to

3
00:00:06,270 --> 00:00:08,570
break this silence was too embarrassing

4
00:00:08,570 --> 00:00:12,620
so thanks for coming to my talk welcome

5
00:00:12,620 --> 00:00:14,910
today I'm going to be talking to you

6
00:00:14,910 --> 00:00:18,810
about our ransomware in my opinion as

7
00:00:18,810 --> 00:00:21,720
became a big change while it has made us

8
00:00:21,720 --> 00:00:24,330
such a big change and I'm going to be

9
00:00:24,330 --> 00:00:26,400
using the mobile use case because it's

10
00:00:26,400 --> 00:00:29,699
not commonly spoken about but most of

11
00:00:29,699 --> 00:00:31,349
the methodologies that I'm going to

12
00:00:31,349 --> 00:00:34,380
present are applicable as well in the

13
00:00:34,380 --> 00:00:39,120
non mobile cases shortly about myself I

14
00:00:39,120 --> 00:00:42,230
recently joined Trend Micro's SDR

15
00:00:42,230 --> 00:00:45,989
research team where we focus on various

16
00:00:45,989 --> 00:00:49,050
research topics we try to like we were

17
00:00:49,050 --> 00:00:51,750
best to to predict what will be the

18
00:00:51,750 --> 00:00:54,180
future like in a couple of years or

19
00:00:54,180 --> 00:00:55,739
isn't what are the future threats and

20
00:00:55,739 --> 00:00:58,399
risks and also we do lots of

21
00:00:58,399 --> 00:01:00,840
investigation on crime cases with law

22
00:01:00,840 --> 00:01:04,830
enforcement before joining friends six

23
00:01:04,830 --> 00:01:05,970
months ago I was an assistant professor

24
00:01:05,970 --> 00:01:08,430
at in academia was working for

25
00:01:08,430 --> 00:01:10,380
Politecnico di Milano partially this

26
00:01:10,380 --> 00:01:12,360
work has started there and then I

27
00:01:12,360 --> 00:01:15,420
continued over at Trend Micro I

28
00:01:15,420 --> 00:01:18,600
published some papers during my career I

29
00:01:18,600 --> 00:01:20,640
was invited here and there to give talks

30
00:01:20,640 --> 00:01:23,549
about them and I supervised a few

31
00:01:23,549 --> 00:01:26,210
students and some of which I'm happily

32
00:01:26,210 --> 00:01:30,210
seeing here in the audience I was um I

33
00:01:30,210 --> 00:01:33,060
mean the PC / review board or various

34
00:01:33,060 --> 00:01:34,759
conferences and works upon the world

35
00:01:34,759 --> 00:01:36,600
among which I would like to highlight

36
00:01:36,600 --> 00:01:39,180
the following ones ax ax is coming up

37
00:01:39,180 --> 00:01:42,079
next month in Hollywood it's a very good

38
00:01:42,079 --> 00:01:46,200
agenda hese CS we just extended the

39
00:01:46,200 --> 00:01:48,149
deadline of a couple of weeks so if you

40
00:01:48,149 --> 00:01:49,829
happen to have some cool research work

41
00:01:49,829 --> 00:01:52,259
please submit there and then the invert

42
00:01:52,259 --> 00:01:55,040
this year and previous year OS website

43
00:01:55,040 --> 00:01:57,860
qs4 in Europe and you're set

44
00:01:57,860 --> 00:02:01,049
alright so speaking about the content of

45
00:02:01,049 --> 00:02:03,240
this talk I'm going to be starting

46
00:02:03,240 --> 00:02:05,850
giving you a brief retrospective view of

47
00:02:05,850 --> 00:02:06,479
ransomware

48
00:02:06,479 --> 00:02:08,910
how we came up talking about mobile

49
00:02:08,910 --> 00:02:11,730
ransomware and then I will give you

50
00:02:11,730 --> 00:02:13,569
three for use

51
00:02:13,569 --> 00:02:17,200
like real use cases on a few families

52
00:02:17,200 --> 00:02:20,049
that are representative of the most

53
00:02:20,049 --> 00:02:22,060
interesting features of mobile rent

54
00:02:22,060 --> 00:02:25,389
summer and rent summer in general and

55
00:02:25,389 --> 00:02:27,519
then I will tell you how we can use a

56
00:02:27,519 --> 00:02:30,129
static analysis approach to detect those

57
00:02:30,129 --> 00:02:32,560
features in order to process like a

58
00:02:32,560 --> 00:02:35,980
large pool of applications and determine

59
00:02:35,980 --> 00:02:37,689
whether their which which of them at

60
00:02:37,689 --> 00:02:40,030
random or not and then I will conclude

61
00:02:40,030 --> 00:02:42,459
by presenting and releasing our tool

62
00:02:42,459 --> 00:02:45,099
which implements all of these features

63
00:02:45,099 --> 00:02:47,950
and then will draw my conclusion on an

64
00:02:47,950 --> 00:02:50,049
economics perspective of on rent

65
00:02:50,049 --> 00:02:51,879
somewhere there's a truly personal one

66
00:02:51,879 --> 00:02:55,090
all right so how we came about talking

67
00:02:55,090 --> 00:02:57,909
about mobile ransom where we started

68
00:02:57,909 --> 00:02:59,769
from crypto virology a term that

69
00:02:59,769 --> 00:03:02,829
appeared about 20 years ago this is a

70
00:03:02,829 --> 00:03:04,719
screenshot from a paper submitted at

71
00:03:04,719 --> 00:03:07,060
Auckland or actually security privacy

72
00:03:07,060 --> 00:03:09,849
symposium where the others define the

73
00:03:09,849 --> 00:03:13,870
concept of crypto biology as the use of

74
00:03:13,870 --> 00:03:16,359
cryptography with malicious purposes to

75
00:03:16,359 --> 00:03:18,759
mount extortion based attacks think of

76
00:03:18,759 --> 00:03:20,919
this as twenty years ago there was no

77
00:03:20,919 --> 00:03:24,340
notion almost no notion of of malware

78
00:03:24,340 --> 00:03:26,979
right as we have it today so I found it

79
00:03:26,979 --> 00:03:29,409
quite fascinating what I found even more

80
00:03:29,409 --> 00:03:31,239
fascinating is the fact that the

81
00:03:31,239 --> 00:03:34,329
author's have kind of predicted the role

82
00:03:34,329 --> 00:03:36,819
that electronic currency would have

83
00:03:36,819 --> 00:03:41,470
played in ransomware they say that this

84
00:03:41,470 --> 00:03:43,840
would translate directly into the into

85
00:03:43,840 --> 00:03:46,030
the loss of US dollars if electronic

86
00:03:46,030 --> 00:03:48,699
money is implemented I think still

87
00:03:48,699 --> 00:03:50,019
thinking about 20 years ago a

88
00:03:50,019 --> 00:03:52,030
specialized crypto virus could be

89
00:03:52,030 --> 00:03:54,189
designed to search for Emani nodes and

90
00:03:54,189 --> 00:03:56,169
encrypt them effectively old all the

91
00:03:56,169 --> 00:03:58,930
money are as well so this is kind of

92
00:03:58,930 --> 00:04:01,150
what happened right it's slightly

93
00:04:01,150 --> 00:04:02,979
different I mean we're not using

94
00:04:02,979 --> 00:04:05,709
electronic currency as the subject of

95
00:04:05,709 --> 00:04:07,659
ransomware but we're using electronic

96
00:04:07,659 --> 00:04:09,459
currency to pay for ransom or so this is

97
00:04:09,459 --> 00:04:11,650
kind of a fascinating to find something

98
00:04:11,650 --> 00:04:13,419
like this with such a not such an

99
00:04:13,419 --> 00:04:16,000
advanced time so if we stand forward to

100
00:04:16,000 --> 00:04:21,639
today about 15 years ago we start what

101
00:04:21,639 --> 00:04:23,590
we all know we start seeing cryptolocker

102
00:04:23,590 --> 00:04:25,779
and all the following families which

103
00:04:25,779 --> 00:04:26,580
turn

104
00:04:26,580 --> 00:04:29,610
to a millionaire a business for for the

105
00:04:29,610 --> 00:04:32,159
bad guys there were a couple of isolated

106
00:04:32,159 --> 00:04:34,770
cases in 2000 2004 of a couple of

107
00:04:34,770 --> 00:04:37,560
families that didn't really made any any

108
00:04:37,560 --> 00:04:40,650
any outbreak few few infections and that

109
00:04:40,650 --> 00:04:43,620
was it but then if things started to get

110
00:04:43,620 --> 00:04:47,550
very serious from 2013 2012 and it is

111
00:04:47,550 --> 00:04:50,789
where we introduced the little world I

112
00:04:50,789 --> 00:04:52,259
mean not so little in my opinion of

113
00:04:52,259 --> 00:04:58,069
mobile went somewhere in 2014 2014 2015

114
00:04:58,069 --> 00:05:00,810
I've started to notice a few families

115
00:05:00,810 --> 00:05:03,690
coming up specialized on doing malicious

116
00:05:03,690 --> 00:05:05,729
encryption for Android applications and

117
00:05:05,729 --> 00:05:08,430
as you can see here from the con from

118
00:05:08,430 --> 00:05:09,990
the number of families you can see that

119
00:05:09,990 --> 00:05:12,419
there is a quite a lot of activities in

120
00:05:12,419 --> 00:05:15,680
the development of mobile ransomware

121
00:05:15,680 --> 00:05:18,870
we also I also looked into the data that

122
00:05:18,870 --> 00:05:20,969
we have that I have at our disposal in

123
00:05:20,969 --> 00:05:24,029
trend and I found out that between 2015

124
00:05:24,029 --> 00:05:26,909
and 2016 there was a more than one art

125
00:05:26,909 --> 00:05:29,189
one order of magnitude increase in the

126
00:05:29,189 --> 00:05:30,690
number of brands more samples submitted

127
00:05:30,690 --> 00:05:32,719
to our systems it was kind of

128
00:05:32,719 --> 00:05:35,580
interesting to notice in certain areas

129
00:05:35,580 --> 00:05:37,740
such as Australia Singapore and other

130
00:05:37,740 --> 00:05:40,319
countries depending on on the client

131
00:05:40,319 --> 00:05:44,580
basis of course there are a good

132
00:05:44,580 --> 00:05:47,370
fraction of ransomware as part of the

133
00:05:47,370 --> 00:05:49,680
whole pool of mobile malware so this is

134
00:05:49,680 --> 00:05:53,339
quite quite interesting to me alright so

135
00:05:53,339 --> 00:05:55,919
now that we have scatter settle for the

136
00:05:55,919 --> 00:05:57,960
motivation of this work I'm going to

137
00:05:57,960 --> 00:06:00,150
give you a few concrete use cases on how

138
00:06:00,150 --> 00:06:07,800
mobile ransomware works in practice all

139
00:06:07,800 --> 00:06:09,810
right so I'm going to be starting with

140
00:06:09,810 --> 00:06:12,180
the locker family or Colo so-called

141
00:06:12,180 --> 00:06:14,969
simple Locker which one of which was one

142
00:06:14,969 --> 00:06:18,569
of the first one that appeared and it

143
00:06:18,569 --> 00:06:20,490
actually is specialized in screen

144
00:06:20,490 --> 00:06:23,520
locking we found a few samples doing

145
00:06:23,520 --> 00:06:26,250
encryption but there were isolated cases

146
00:06:26,250 --> 00:06:28,800
if you think that we've analyzed a few

147
00:06:28,800 --> 00:06:30,419
tens of thousands of them and we only

148
00:06:30,419 --> 00:06:34,199
found encryption in 50 of them there is

149
00:06:34,199 --> 00:06:37,289
then the variant that appeared last year

150
00:06:37,289 --> 00:06:39,960
it actually uses serious inquiry

151
00:06:39,960 --> 00:06:44,340
using third device key so and then as a

152
00:06:44,340 --> 00:06:47,430
curious fact it uses a tour or SMS is

153
00:06:47,430 --> 00:06:48,960
for cincy communication with the backend

154
00:06:48,960 --> 00:06:52,050
but as I said s Locker is famous because

155
00:06:52,050 --> 00:06:55,560
of its one of the first cases of screen

156
00:06:55,560 --> 00:06:57,810
locking applications for Android the

157
00:06:57,810 --> 00:07:00,300
technique that it uses I call it a soft

158
00:07:00,300 --> 00:07:02,759
button event i jacking and the way it

159
00:07:02,759 --> 00:07:05,460
works is if you're a group familiar with

160
00:07:05,460 --> 00:07:08,160
android know that if you want to hijack

161
00:07:08,160 --> 00:07:10,800
i mean if you want to handle the event

162
00:07:10,800 --> 00:07:13,139
that originates from the pressure of any

163
00:07:13,139 --> 00:07:15,240
of these buttons you know that you have

164
00:07:15,240 --> 00:07:18,509
to use an activity and override one of

165
00:07:18,509 --> 00:07:21,000
these methods such as the on key down

166
00:07:21,000 --> 00:07:24,509
and the respective one on key up so when

167
00:07:24,509 --> 00:07:26,220
you press and release the button that

168
00:07:26,220 --> 00:07:28,229
function get gets called and if your

169
00:07:28,229 --> 00:07:30,360
activity overrides any of these methods

170
00:07:30,360 --> 00:07:33,539
you can do your your process right so

171
00:07:33,539 --> 00:07:36,330
it's kind of a innocent-looking method

172
00:07:36,330 --> 00:07:40,500
but effectively the return value

173
00:07:40,500 --> 00:07:42,479
determines what happens next

174
00:07:42,479 --> 00:07:44,669
after the pressure of the of the button

175
00:07:44,669 --> 00:07:47,280
so as you can see from the documentation

176
00:07:47,280 --> 00:07:49,800
here you say you see if you handle the

177
00:07:49,800 --> 00:07:52,740
event return through if you want to

178
00:07:52,740 --> 00:07:54,720
allow the event to be handled further

179
00:07:54,720 --> 00:07:58,260
return false this means that if you

180
00:07:58,260 --> 00:08:00,979
return true you are effectively

181
00:08:00,979 --> 00:08:03,240
preventing any other handling of this

182
00:08:03,240 --> 00:08:06,720
event so it means that if you do like

183
00:08:06,720 --> 00:08:10,139
keep the view as it is as an effect of

184
00:08:10,139 --> 00:08:11,820
pressing a button and then you return

185
00:08:11,820 --> 00:08:14,940
true any other activity following up on

186
00:08:14,940 --> 00:08:16,919
this event will never get that event so

187
00:08:16,919 --> 00:08:19,020
you're actually actively men in the

188
00:08:19,020 --> 00:08:21,090
middling and denial of servicing the

189
00:08:21,090 --> 00:08:25,860
display of your phone right the other

190
00:08:25,860 --> 00:08:27,599
sample the other family I wanted to talk

191
00:08:27,599 --> 00:08:29,520
to you about is the color which is

192
00:08:29,520 --> 00:08:34,440
famous for for its threatening text in

193
00:08:34,440 --> 00:08:36,510
the sense that as you know that in a

194
00:08:36,510 --> 00:08:39,208
ransomware malware you have to have in

195
00:08:39,208 --> 00:08:41,159
addition to locking or encryption you

196
00:08:41,159 --> 00:08:43,110
need to have some threatening text so

197
00:08:43,110 --> 00:08:45,450
the text displayed to kind of convince

198
00:08:45,450 --> 00:08:47,880
you that your device has been being held

199
00:08:47,880 --> 00:08:50,370
for ransom and color is a good

200
00:08:50,370 --> 00:08:52,500
representative example because we

201
00:08:52,500 --> 00:08:55,650
we have seen lots of efforts in the

202
00:08:55,650 --> 00:08:58,260
development of the around the text so

203
00:08:58,260 --> 00:09:00,120
the text has been localized in 60

204
00:09:00,120 --> 00:09:03,050
languages if not more and beyond that

205
00:09:03,050 --> 00:09:07,740
there were even a very good effort that

206
00:09:07,740 --> 00:09:09,900
the developer has put into localizing

207
00:09:09,900 --> 00:09:13,170
not only the text but also the key you

208
00:09:13,170 --> 00:09:15,330
know key people in the key terminology

209
00:09:15,330 --> 00:09:18,960
to refer to law enforcement locally for

210
00:09:18,960 --> 00:09:21,210
each country so if you can find your

211
00:09:21,210 --> 00:09:22,770
country you'll find some familiar faces

212
00:09:22,770 --> 00:09:25,560
or familiar logos I think this is quite

213
00:09:25,560 --> 00:09:27,690
a quite an impressive effort for a

214
00:09:27,690 --> 00:09:31,890
mobile mobile malware so here you can

215
00:09:31,890 --> 00:09:33,600
see an example of a tightening text you

216
00:09:33,600 --> 00:09:35,990
might have seen something similar before

217
00:09:35,990 --> 00:09:39,120
I highlight some of the key terms you

218
00:09:39,120 --> 00:09:41,850
see that you know the malicious guy is

219
00:09:41,850 --> 00:09:44,640
trying to convince the the victim that

220
00:09:44,640 --> 00:09:46,620
the phone has been blocked because it

221
00:09:46,620 --> 00:09:50,390
has been seen using or accessing

222
00:09:50,390 --> 00:09:53,010
prohibited content that it has violated

223
00:09:53,010 --> 00:09:56,610
some articles of some criminal law in

224
00:09:56,610 --> 00:09:58,620
this case etcetera etcetera so this is

225
00:09:58,620 --> 00:10:03,390
kind of a classic locking screen third

226
00:10:03,390 --> 00:10:05,670
family that I wanted to talk to talk to

227
00:10:05,670 --> 00:10:07,589
you about because of these data

228
00:10:07,589 --> 00:10:11,210
encryption capability is the SD Fang

229
00:10:11,210 --> 00:10:14,720
family which started as a banking Trojan

230
00:10:14,720 --> 00:10:19,500
after after stealing about 1 million of

231
00:10:19,500 --> 00:10:22,260
US dollars in fraud the developer

232
00:10:22,260 --> 00:10:24,630
decided to switch switch to another kind

233
00:10:24,630 --> 00:10:26,790
of business and turned it into a ransom

234
00:10:26,790 --> 00:10:29,070
or family so it has a it's all victim

235
00:10:29,070 --> 00:10:33,450
victim user base and decided to to turn

236
00:10:33,450 --> 00:10:36,630
into a ransom so it's famous because of

237
00:10:36,630 --> 00:10:38,850
its encryption capability it uses a real

238
00:10:38,850 --> 00:10:40,470
encryption not as we have seen before

239
00:10:40,470 --> 00:10:43,110
and it does screen locking using a new

240
00:10:43,110 --> 00:10:45,510
technique that hasn't been that we

241
00:10:45,510 --> 00:10:47,550
haven't seen before that is the use the

242
00:10:47,550 --> 00:10:50,400
abused of the device administration API

243
00:10:50,400 --> 00:10:54,839
I will show you a example so for the

244
00:10:54,839 --> 00:10:58,290
encryption here there's the disassembled

245
00:10:58,290 --> 00:11:01,140
a significant part of the of the code

246
00:11:01,140 --> 00:11:03,959
you can see that it instantiates a

247
00:11:03,959 --> 00:11:05,840
cipher object

248
00:11:05,840 --> 00:11:08,120
and then it uses that here at the bottom

249
00:11:08,120 --> 00:11:12,800
and to perform an output outputs to

250
00:11:12,800 --> 00:11:14,420
write on an output stream that means

251
00:11:14,420 --> 00:11:17,930
that it's writing on the on the on the

252
00:11:17,930 --> 00:11:20,240
file to you know write the encrypted

253
00:11:20,240 --> 00:11:22,940
content this is a kind of a typical use

254
00:11:22,940 --> 00:11:25,120
of encryption in Android applications

255
00:11:25,120 --> 00:11:27,950
speaking of the device have mean ap I

256
00:11:27,950 --> 00:11:31,100
have used as I told you it's it can be

257
00:11:31,100 --> 00:11:33,490
used to for example lock the device

258
00:11:33,490 --> 00:11:36,170
here's what you see if you open if you

259
00:11:36,170 --> 00:11:39,680
open an application that is doing for

260
00:11:39,680 --> 00:11:41,840
legitimate or non legitimate purposes we

261
00:11:41,840 --> 00:11:43,760
don't know if it's doing a device

262
00:11:43,760 --> 00:11:45,470
administration so in the manifest you

263
00:11:45,470 --> 00:11:48,740
will see at least one receiver asking

264
00:11:48,740 --> 00:11:50,870
for this permission to bind device that

265
00:11:50,870 --> 00:11:53,150
means and this receiver will be entitled

266
00:11:53,150 --> 00:11:55,640
to do all the device administration

267
00:11:55,640 --> 00:12:00,590
stuff like locking the device wiping the

268
00:12:00,590 --> 00:12:02,780
device it's used for remote wiping if

269
00:12:02,780 --> 00:12:05,090
you have like if you're running pool of

270
00:12:05,090 --> 00:12:06,950
devices in a company you want to remote

271
00:12:06,950 --> 00:12:08,990
wipe them for security reasons that's

272
00:12:08,990 --> 00:12:11,330
the legitimate use case but of course it

273
00:12:11,330 --> 00:12:13,940
can be used also in in a malicious

274
00:12:13,940 --> 00:12:15,890
purpose and that's the case of one of

275
00:12:15,890 --> 00:12:19,400
the latest family September 2016 called

276
00:12:19,400 --> 00:12:23,740
lock droid which uses the reset password

277
00:12:23,740 --> 00:12:26,150
API which is part of the device

278
00:12:26,150 --> 00:12:27,980
administration API passing it through

279
00:12:27,980 --> 00:12:29,960
the random pass code so it generates app

280
00:12:29,960 --> 00:12:31,400
through the random password pet code

281
00:12:31,400 --> 00:12:34,010
sends it through to the C and C so that

282
00:12:34,010 --> 00:12:36,260
the bad guy know is knows it and then it

283
00:12:36,260 --> 00:12:38,240
calls the lock now that is press the

284
00:12:38,240 --> 00:12:39,050
power buttons

285
00:12:39,050 --> 00:12:41,810
so in some sense so in this case now the

286
00:12:41,810 --> 00:12:43,970
phone is completely locked and you are

287
00:12:43,970 --> 00:12:46,640
locked out because the system has

288
00:12:46,640 --> 00:12:48,770
changed the password in without your

289
00:12:48,770 --> 00:12:52,190
intervention fortunately Google put a

290
00:12:52,190 --> 00:12:54,800
patch in a very prompt way as to say in

291
00:12:54,800 --> 00:12:56,480
the upcoming version of Android you get

292
00:12:56,480 --> 00:12:58,370
you cannot do this anymore

293
00:12:58,370 --> 00:13:02,330
so there is no legit the even eliminated

294
00:13:02,330 --> 00:13:04,160
the legitimate use case you're not able

295
00:13:04,160 --> 00:13:08,240
to invoke the reset password only more

296
00:13:08,240 --> 00:13:10,460
than once so if you call it once to set

297
00:13:10,460 --> 00:13:13,100
the password or if the user has set the

298
00:13:13,100 --> 00:13:15,920
password for once if you call it another

299
00:13:15,920 --> 00:13:18,020
time it will raise a security exception

300
00:13:18,020 --> 00:13:19,130
so these are course break

301
00:13:19,130 --> 00:13:21,680
entirely the backward compatibility you

302
00:13:21,680 --> 00:13:23,780
won't be able to administrate a device

303
00:13:23,780 --> 00:13:26,060
by changing its passwords remotely which

304
00:13:26,060 --> 00:13:30,080
kind of I like it right but it breaks a

305
00:13:30,080 --> 00:13:32,990
completely benign use case for that it

306
00:13:32,990 --> 00:13:34,850
is also prevent ransomware from doing

307
00:13:34,850 --> 00:13:37,760
this great so now that we have kind of

308
00:13:37,760 --> 00:13:41,510
over viewed all the four main techniques

309
00:13:41,510 --> 00:13:44,570
for implementing typical features of

310
00:13:44,570 --> 00:13:46,580
ransomware application we're going to

311
00:13:46,580 --> 00:13:48,380
see how we can detect them one after

312
00:13:48,380 --> 00:13:51,740
another so ideally this is what we would

313
00:13:51,740 --> 00:13:53,660
like to come up with right we have our

314
00:13:53,660 --> 00:13:57,560
malware analysis pipeline we have as

315
00:13:57,560 --> 00:14:01,340
input a few apk is a day and then we

316
00:14:01,340 --> 00:14:04,250
want to pass through a few of mean some

317
00:14:04,250 --> 00:14:06,710
of these detectors to say whether or not

318
00:14:06,710 --> 00:14:09,170
we found a threatening text if we found

319
00:14:09,170 --> 00:14:11,720
out device locking implementation if we

320
00:14:11,720 --> 00:14:14,420
found the usage of data encryption or

321
00:14:14,420 --> 00:14:17,510
the abuse of the administration API and

322
00:14:17,510 --> 00:14:20,660
then based on the output of these we can

323
00:14:20,660 --> 00:14:23,180
determine whether it's ran somewhere

324
00:14:23,180 --> 00:14:25,220
where there is a simply scare where for

325
00:14:25,220 --> 00:14:27,440
example if it's only locking the device

326
00:14:27,440 --> 00:14:29,450
and and displaying some threatening text

327
00:14:29,450 --> 00:14:31,490
so it's probably single scary right and

328
00:14:31,490 --> 00:14:34,190
if none of these features are detected

329
00:14:34,190 --> 00:14:37,310
then it's probably only other malware or

330
00:14:37,310 --> 00:14:41,060
non ransomware generally so starting

331
00:14:41,060 --> 00:14:44,890
with the threatening text detection I

332
00:14:44,890 --> 00:14:48,110
hope that I mean from the example that I

333
00:14:48,110 --> 00:14:51,470
showed you we can conclude that the text

334
00:14:51,470 --> 00:14:55,220
that we see that the bad guys are

335
00:14:55,220 --> 00:14:57,830
displaying must be clear and somewhat

336
00:14:57,830 --> 00:15:00,290
convincing otherwise it will simply lose

337
00:15:00,290 --> 00:15:02,810
a victim right so the victim is not

338
00:15:02,810 --> 00:15:06,260
supposed to be an expert and on Android

339
00:15:06,260 --> 00:15:08,900
so what you want to have as from the bad

340
00:15:08,900 --> 00:15:10,400
guys perspective is something very

341
00:15:10,400 --> 00:15:12,320
direct and simple and clean to

342
00:15:12,320 --> 00:15:14,300
understand it's a completely different

343
00:15:14,300 --> 00:15:17,000
setting than spam if you want so you

344
00:15:17,000 --> 00:15:18,890
cannot introduce too many grammar errors

345
00:15:18,890 --> 00:15:21,770
you cannot introduce strange fonts right

346
00:15:21,770 --> 00:15:23,540
to escape detection

347
00:15:23,540 --> 00:15:25,760
so in addition to that we have seen also

348
00:15:25,760 --> 00:15:28,010
the use of several coercion techniques

349
00:15:28,010 --> 00:15:31,910
we've seen like accusations referring to

350
00:15:31,910 --> 00:15:34,400
our codes and things like this and of

351
00:15:34,400 --> 00:15:36,920
course you want to have detailed payment

352
00:15:36,920 --> 00:15:38,590
instructions this is key for

353
00:15:38,590 --> 00:15:42,230
implementing a good locking locking

354
00:15:42,230 --> 00:15:44,510
screen right you want your victim to

355
00:15:44,510 --> 00:15:47,510
easily find a way to pay otherwise the

356
00:15:47,510 --> 00:15:49,850
victim might just be confused bring the

357
00:15:49,850 --> 00:15:51,830
phone to the repair shop and maybe the

358
00:15:51,830 --> 00:15:54,260
repair guy issues our reset all the data

359
00:15:54,260 --> 00:15:56,780
is lost but also the victim is lost from

360
00:15:56,780 --> 00:15:58,550
the risk from the perspective of the bad

361
00:15:58,550 --> 00:16:02,770
guy so to analyze this text we use a

362
00:16:02,770 --> 00:16:06,020
natural language processing plus machine

363
00:16:06,020 --> 00:16:08,690
learning pipeline and we start by

364
00:16:08,690 --> 00:16:10,790
extracting the text that we want to

365
00:16:10,790 --> 00:16:12,950
analyze we have mainly three sources of

366
00:16:12,950 --> 00:16:16,070
text first we found that many families

367
00:16:16,070 --> 00:16:19,760
simply embed the text in plain and plain

368
00:16:19,760 --> 00:16:22,430
text into the string variables or into

369
00:16:22,430 --> 00:16:25,730
XML resource files in this case we

370
00:16:25,730 --> 00:16:27,770
simply disassembled the apk and we

371
00:16:27,770 --> 00:16:29,600
extract all the ASCII strings that we

372
00:16:29,600 --> 00:16:34,130
could find in other cases when we don't

373
00:16:34,130 --> 00:16:36,680
find anything in with this technique we

374
00:16:36,680 --> 00:16:39,170
simply run the sample in a sandbox for a

375
00:16:39,170 --> 00:16:41,810
few minutes and then from the network

376
00:16:41,810 --> 00:16:44,770
trace we decode what we can decode or we

377
00:16:44,770 --> 00:16:48,140
get directly on the API and we take out

378
00:16:48,140 --> 00:16:50,390
all the strings that we could find there

379
00:16:50,390 --> 00:16:54,080
and if even if this indicates even these

380
00:16:54,080 --> 00:16:56,600
fails we have the last resort technique

381
00:16:56,600 --> 00:16:58,700
that is we take a few screenshots during

382
00:16:58,700 --> 00:17:01,340
the execution and then we OCR them for

383
00:17:01,340 --> 00:17:05,450
four texts great so now we have a blob

384
00:17:05,450 --> 00:17:07,490
of text we want to determine whether it

385
00:17:07,490 --> 00:17:09,740
is frightening or not this also applies

386
00:17:09,740 --> 00:17:12,500
to is also applies to non-mobile

387
00:17:12,500 --> 00:17:14,660
ransomware this applies in general even

388
00:17:14,660 --> 00:17:18,170
to email filtering if you want so first

389
00:17:18,170 --> 00:17:20,960
thing that we do is we perform a simple

390
00:17:20,960 --> 00:17:22,609
language detection so we determine if

391
00:17:22,609 --> 00:17:26,000
it's French English or whatever and that

392
00:17:26,000 --> 00:17:30,050
is key because we need to apply several

393
00:17:30,050 --> 00:17:32,210
other techniques that are language

394
00:17:32,210 --> 00:17:34,670
dependent for example segmentation that

395
00:17:34,670 --> 00:17:38,090
is splitting devices into speakings text

396
00:17:38,090 --> 00:17:42,250
into sentences is language dependent

397
00:17:42,250 --> 00:17:45,260
stopped word removal that is removing

398
00:17:45,260 --> 00:17:47,420
non-interesting words is also language

399
00:17:47,420 --> 00:17:50,840
dependent there are dictionaries of stop

400
00:17:50,840 --> 00:17:53,180
words out there stemming is also

401
00:17:53,180 --> 00:17:54,920
language the temp them with dependent

402
00:17:54,920 --> 00:17:57,260
stemming means that we reduce every word

403
00:17:57,260 --> 00:18:00,980
to its basic form such as locked becomes

404
00:18:00,980 --> 00:18:04,730
lock safety becomes safe etc etc so at

405
00:18:04,730 --> 00:18:06,440
the end of the day we have a vector that

406
00:18:06,440 --> 00:18:09,170
encodes the presence or the absence of

407
00:18:09,170 --> 00:18:11,830
the words that we have analyzed so far

408
00:18:11,830 --> 00:18:14,840
and this create our training set for

409
00:18:14,840 --> 00:18:17,570
each application that we analyze we have

410
00:18:17,570 --> 00:18:20,660
a vector that encodes the content of the

411
00:18:20,660 --> 00:18:22,700
text in terms of words that are there

412
00:18:22,700 --> 00:18:25,730
and not there the training text the

413
00:18:25,730 --> 00:18:27,950
training set we actually partition this

414
00:18:27,950 --> 00:18:30,770
you actually label it so this is the

415
00:18:30,770 --> 00:18:32,780
first part of our custom machine

416
00:18:32,780 --> 00:18:35,240
learning part that is we have taken a

417
00:18:35,240 --> 00:18:37,070
few representative samples and we

418
00:18:37,070 --> 00:18:39,790
categorize the text into money-related

419
00:18:39,790 --> 00:18:41,390
law-related

420
00:18:41,390 --> 00:18:43,820
accusation related our other categories

421
00:18:43,820 --> 00:18:45,920
but for the sake of displaying here I'm

422
00:18:45,920 --> 00:18:47,900
only showing three but we have several

423
00:18:47,900 --> 00:18:52,010
categories that we look for so now we

424
00:18:52,010 --> 00:18:54,650
can create this lightweight machine

425
00:18:54,650 --> 00:18:56,210
learning classifier which is not yet a

426
00:18:56,210 --> 00:18:59,600
classifier asking which is the best

427
00:18:59,600 --> 00:19:01,930
category for this sentence or for this

428
00:19:01,930 --> 00:19:04,700
for this group of sentences right and we

429
00:19:04,700 --> 00:19:07,430
go on a world by word basis and then we

430
00:19:07,430 --> 00:19:11,210
average we average the results here is

431
00:19:11,210 --> 00:19:13,310
the scoring function and I don't want to

432
00:19:13,310 --> 00:19:14,930
go into the details it's simply a

433
00:19:14,930 --> 00:19:20,210
maximization of the similarity right so

434
00:19:20,210 --> 00:19:23,000
as us now we know which is the best

435
00:19:23,000 --> 00:19:26,000
category we know how close we are to

436
00:19:26,000 --> 00:19:28,070
equate it to Outlaws we are to that

437
00:19:28,070 --> 00:19:31,490
category so in order to take a decision

438
00:19:31,490 --> 00:19:36,290
whether which is the best category we

439
00:19:36,290 --> 00:19:38,390
use a series of thresholds that we set

440
00:19:38,390 --> 00:19:44,600
by setting as a limit based on unknown

441
00:19:44,600 --> 00:19:47,600
ransomware samples so on text appearing

442
00:19:47,600 --> 00:19:49,520
in no ransom our samples and on the

443
00:19:49,520 --> 00:19:51,170
other hand we don't want to confuse this

444
00:19:51,170 --> 00:19:54,110
text with good word text appearing for

445
00:19:54,110 --> 00:19:57,200
example in books or corpus of text that

446
00:19:57,200 --> 00:19:58,700
is not related to ransom

447
00:19:58,700 --> 00:20:01,430
so we took two quarters of of text one

448
00:20:01,430 --> 00:20:03,230
from ransomware and one from non

449
00:20:03,230 --> 00:20:05,180
ransomware and we set this threshold in

450
00:20:05,180 --> 00:20:07,880
order to to be able to separate so now

451
00:20:07,880 --> 00:20:09,530
we can use this classifier effectively

452
00:20:09,530 --> 00:20:14,630
and ask is this phrase best score the

453
00:20:14,630 --> 00:20:17,180
best represented by the term money by

454
00:20:17,180 --> 00:20:19,580
the category money yes then probably is

455
00:20:19,580 --> 00:20:22,190
likely to be ransomware is the best

456
00:20:22,190 --> 00:20:25,520
score in accusation or law but not money

457
00:20:25,520 --> 00:20:27,950
then then is probably scale where so we

458
00:20:27,950 --> 00:20:30,080
can use this in a custom way you can you

459
00:20:30,080 --> 00:20:31,670
can use your custom categories and use

460
00:20:31,670 --> 00:20:33,860
this lightweight technique to determine

461
00:20:33,860 --> 00:20:36,100
the category of each step of your text

462
00:20:36,100 --> 00:20:39,920
great so we're now done for the kind in

463
00:20:39,920 --> 00:20:42,050
text detection let's move to the device

464
00:20:42,050 --> 00:20:43,820
locking mechanism how do we detect

465
00:20:43,820 --> 00:20:47,120
whether the device is performing screen

466
00:20:47,120 --> 00:20:50,900
login so we have two broad techniques

467
00:20:50,900 --> 00:20:53,240
here I told you before about the

468
00:20:53,240 --> 00:20:55,960
hijacking of the on key up on key down

469
00:20:55,960 --> 00:21:00,290
soft keys we also have other techniques

470
00:21:00,290 --> 00:21:04,010
that are you can create a dialog and set

471
00:21:04,010 --> 00:21:07,130
that dialog to be non cancel but another

472
00:21:07,130 --> 00:21:10,370
another option which essentially makes

473
00:21:10,370 --> 00:21:14,120
the dialog known as capable but that's

474
00:21:14,120 --> 00:21:16,010
not super super common so we have

475
00:21:16,010 --> 00:21:17,690
implemented a detector for this but we

476
00:21:17,690 --> 00:21:19,640
haven't found it in in many samples what

477
00:21:19,640 --> 00:21:21,590
we found in the majority of samples is

478
00:21:21,590 --> 00:21:25,700
the abuse of the TI jackin capabilities

479
00:21:25,700 --> 00:21:27,800
and then the second broad category as I

480
00:21:27,800 --> 00:21:29,240
told you before is the device

481
00:21:29,240 --> 00:21:31,790
administration API abused but

482
00:21:31,790 --> 00:21:33,800
fortunately we have an upcoming fix in

483
00:21:33,800 --> 00:21:36,620
Android n so speaking of the first

484
00:21:36,620 --> 00:21:39,560
technique what we want to find out is if

485
00:21:39,560 --> 00:21:41,780
there is any activity in the application

486
00:21:41,780 --> 00:21:45,830
that overrides the these two methods

487
00:21:45,830 --> 00:21:49,250
each one so if we have detected that we

488
00:21:49,250 --> 00:21:53,450
go into the method that overrides this

489
00:21:53,450 --> 00:21:56,000
API method and we execute all the

490
00:21:56,000 --> 00:21:57,490
statements we have created a custom

491
00:21:57,490 --> 00:22:00,410
smiley simulator as Mali is a

492
00:22:00,410 --> 00:22:02,810
representation of the film of the

493
00:22:02,810 --> 00:22:05,600
bytecode in a readable form and we

494
00:22:05,600 --> 00:22:07,130
execute all the statements one by one

495
00:22:07,130 --> 00:22:09,800
you can think of it as assembly for for

496
00:22:09,800 --> 00:22:11,060
that big right

497
00:22:11,060 --> 00:22:12,530
so we execute all of them

498
00:22:12,530 --> 00:22:15,170
into the scope of these functions and we

499
00:22:15,170 --> 00:22:17,060
follow function calls if there are any

500
00:22:17,060 --> 00:22:19,940
and what we what we want to find out are

501
00:22:19,940 --> 00:22:22,580
two key elements first we want to find

502
00:22:22,580 --> 00:22:25,340
out if the input value that is the

503
00:22:25,340 --> 00:22:27,800
variable that encodes the key that has

504
00:22:27,800 --> 00:22:30,350
been pressed if there is we want to find

505
00:22:30,350 --> 00:22:33,950
out if this key variable holds one of

506
00:22:33,950 --> 00:22:37,370
the target values so we find out if for

507
00:22:37,370 --> 00:22:40,610
example it's receiving any value in the

508
00:22:40,610 --> 00:22:43,610
scope of three or four and to do that we

509
00:22:43,610 --> 00:22:45,440
look for conditions you can see here

510
00:22:45,440 --> 00:22:47,630
there is a register who is holding the

511
00:22:47,630 --> 00:22:50,090
value four and then this is compared

512
00:22:50,090 --> 00:22:53,960
with the first arguments being passed to

513
00:22:53,960 --> 00:22:55,850
the function this means that this guy

514
00:22:55,850 --> 00:22:58,820
here is try to compare if the target key

515
00:22:58,820 --> 00:23:01,820
is actually in this case was the back

516
00:23:01,820 --> 00:23:05,300
key so when the back key is escape this

517
00:23:05,300 --> 00:23:07,550
function does something on the other

518
00:23:07,550 --> 00:23:09,740
hand we want to find out all the output

519
00:23:09,740 --> 00:23:12,020
values told you before the interesting

520
00:23:12,020 --> 00:23:15,320
case is when a return value equal

521
00:23:15,320 --> 00:23:17,600
through is equal true is returned if

522
00:23:17,600 --> 00:23:20,090
that is the case then it means that the

523
00:23:20,090 --> 00:23:22,460
view will be unescapable so if the

524
00:23:22,460 --> 00:23:25,190
reason I passed a code path that goes

525
00:23:25,190 --> 00:23:27,440
into checking whether one of the target

526
00:23:27,440 --> 00:23:28,970
buttons has been pressed and then

527
00:23:28,970 --> 00:23:31,340
returning one then it means that this

528
00:23:31,340 --> 00:23:34,310
method is simply denying doing the

529
00:23:34,310 --> 00:23:36,620
narrow service of the ODE of the whole

530
00:23:36,620 --> 00:23:40,340
event chain awesome so now we know how

531
00:23:40,340 --> 00:23:45,530
to detect device locking sorry let's

532
00:23:45,530 --> 00:23:47,540
move to I'm going to skip encryption for

533
00:23:47,540 --> 00:23:49,400
for a second I want to move to the

534
00:23:49,400 --> 00:23:51,140
second most important device locking

535
00:23:51,140 --> 00:23:53,170
mechanism that is admin area views

536
00:23:53,170 --> 00:23:56,210
because we have seen it abused also in

537
00:23:56,210 --> 00:23:58,580
other in other families of malware

538
00:23:58,580 --> 00:24:01,760
outside outside ransomware

539
00:24:01,760 --> 00:24:04,820
gaining a lot of popularity so as I

540
00:24:04,820 --> 00:24:07,220
anticipated we need to find if the

541
00:24:07,220 --> 00:24:10,100
manifest defines the receiver which asks

542
00:24:10,100 --> 00:24:14,360
for the buying device admin oops I'm

543
00:24:14,360 --> 00:24:17,000
sorry and if that is the case that we

544
00:24:17,000 --> 00:24:18,440
also need to check whether there is a

545
00:24:18,440 --> 00:24:20,720
separate file in this case is the device

546
00:24:20,720 --> 00:24:23,810
that means sample XML file which is

547
00:24:23,810 --> 00:24:25,260
defining the

548
00:24:25,260 --> 00:24:27,570
policy that the application would like

549
00:24:27,570 --> 00:24:30,570
to comply to which I can implement in

550
00:24:30,570 --> 00:24:33,120
this case the policies are this is from

551
00:24:33,120 --> 00:24:35,670
the documentation so it lists all the

552
00:24:35,670 --> 00:24:38,670
possible options so some policies can

553
00:24:38,670 --> 00:24:41,250
implement for example password policies

554
00:24:41,250 --> 00:24:44,010
to limit the limit the collective set of

555
00:24:44,010 --> 00:24:47,100
passwords or it can do resetting your

556
00:24:47,100 --> 00:24:49,500
password forcing the lock as I told you

557
00:24:49,500 --> 00:24:51,960
before wiping the data exited exit the

558
00:24:51,960 --> 00:24:53,820
one that I highlighted are the ones

559
00:24:53,820 --> 00:24:55,700
which are of course important for our

560
00:24:55,700 --> 00:25:00,240
detection case so if we look at the code

561
00:25:00,240 --> 00:25:02,880
for example here I gave you the

562
00:25:02,880 --> 00:25:04,620
reference to the hash if you want to

563
00:25:04,620 --> 00:25:07,080
reverse this sample you will find out

564
00:25:07,080 --> 00:25:09,900
that at some point it's calling the lock

565
00:25:09,900 --> 00:25:12,030
now function that is effectively locking

566
00:25:12,030 --> 00:25:14,910
out these devices I told you before

567
00:25:14,910 --> 00:25:16,800
interesting I also found that this

568
00:25:16,800 --> 00:25:18,990
sample is is having an uninstallation

569
00:25:18,990 --> 00:25:21,840
feature that is remove active admin

570
00:25:21,840 --> 00:25:25,050
which means that is be installing it its

571
00:25:25,050 --> 00:25:27,720
admin capabilities for for releasing the

572
00:25:27,720 --> 00:25:31,260
device's engine great so starting from

573
00:25:31,260 --> 00:25:33,090
the money's from the manifest we would

574
00:25:33,090 --> 00:25:35,250
like to find out whether any of these

575
00:25:35,250 --> 00:25:37,770
dangerous methods here specified by

576
00:25:37,770 --> 00:25:40,530
these policies are invoked so what we do

577
00:25:40,530 --> 00:25:44,010
is we start from the receiver and on the

578
00:25:44,010 --> 00:25:45,990
other hand we have the control flow at

579
00:25:45,990 --> 00:25:49,950
hand I use a flow tried to create the

580
00:25:49,950 --> 00:25:53,040
CFG quite efficient and then we

581
00:25:53,040 --> 00:25:54,960
calculate all the entry points that we

582
00:25:54,960 --> 00:25:58,020
find in a CFG and we visit the CFG to

583
00:25:58,020 --> 00:26:00,600
see if we find that at some point there

584
00:26:00,600 --> 00:26:03,900
is a call to one of these dangerous

585
00:26:03,900 --> 00:26:06,870
functions the lock now for example so

586
00:26:06,870 --> 00:26:09,270
there are cases where nothing is found

587
00:26:09,270 --> 00:26:12,480
because some of these malware are

588
00:26:12,480 --> 00:26:15,210
obfuscated and also protected from the

589
00:26:15,210 --> 00:26:16,890
words engineering so they are using a

590
00:26:16,890 --> 00:26:20,580
lot of reflection so we try to to make

591
00:26:20,580 --> 00:26:23,040
an effort here to resolve the reflective

592
00:26:23,040 --> 00:26:25,440
calls reflective calls mean for example

593
00:26:25,440 --> 00:26:27,600
that instead of calling the method

594
00:26:27,600 --> 00:26:29,850
directly so you wouldn't see a path in

595
00:26:29,850 --> 00:26:32,970
the CFG you would see a virtual or

596
00:26:32,970 --> 00:26:35,990
dynamic path that is only known at

597
00:26:35,990 --> 00:26:38,970
execution time so what we do is with

598
00:26:38,970 --> 00:26:41,549
to find out if there are calls to the

599
00:26:41,549 --> 00:26:44,070
Java reflect Java reflection API for

600
00:26:44,070 --> 00:26:46,320
example the invoke and then we try to

601
00:26:46,320 --> 00:26:49,919
find out if the message if this is the

602
00:26:49,919 --> 00:26:51,840
string variable that is encoding the

603
00:26:51,840 --> 00:26:54,809
method name is somehow pointing to a

604
00:26:54,809 --> 00:26:57,900
known method that is also a node in the

605
00:26:57,900 --> 00:26:59,700
CSG graph and in that case you simply

606
00:26:59,700 --> 00:27:01,820
connect all the dots so it's kind of a

607
00:27:01,820 --> 00:27:04,799
materializing part of the dynamic

608
00:27:04,799 --> 00:27:07,130
component of the CFG right at front I'm

609
00:27:07,130 --> 00:27:11,370
sorry at analysis time so sometimes

610
00:27:11,370 --> 00:27:13,919
methods are I mean software protection

611
00:27:13,919 --> 00:27:17,039
are fairly good so sometimes the method

612
00:27:17,039 --> 00:27:19,830
name are not straightforward so believe

613
00:27:19,830 --> 00:27:22,740
me or not this string is holding the

614
00:27:22,740 --> 00:27:26,429
office cated name open so this is this

615
00:27:26,429 --> 00:27:28,470
sample here is trying to open the camera

616
00:27:28,470 --> 00:27:32,549
you can guess why and what we do here in

617
00:27:32,549 --> 00:27:35,039
order to find out which is the method

618
00:27:35,039 --> 00:27:38,429
that is being called reflectively we

619
00:27:38,429 --> 00:27:41,190
start from the bottom we start from the

620
00:27:41,190 --> 00:27:44,730
invocation of the of the reflection API

621
00:27:44,730 --> 00:27:47,669
we go back until we find the target

622
00:27:47,669 --> 00:27:49,980
object in this case the method the

623
00:27:49,980 --> 00:27:52,200
method object is the target one we go

624
00:27:52,200 --> 00:27:54,780
back until we find the allocation of the

625
00:27:54,780 --> 00:27:57,390
variable that holds the obfuscated

626
00:27:57,390 --> 00:28:00,840
version of of the method being called

627
00:28:00,840 --> 00:28:03,990
and what we would like to do now is to

628
00:28:03,990 --> 00:28:06,990
be able to execute in points that are

629
00:28:06,990 --> 00:28:10,230
executed in place to what is the value

630
00:28:10,230 --> 00:28:13,530
of the D associated object but of course

631
00:28:13,530 --> 00:28:14,880
we cannot do it because this would be

632
00:28:14,880 --> 00:28:17,250
known only at runtime so what we do is

633
00:28:17,250 --> 00:28:20,130
actually we use the reflection API to

634
00:28:20,130 --> 00:28:22,350
our advantage to take all of these

635
00:28:22,350 --> 00:28:25,559
methods and to execute them so we supply

636
00:28:25,559 --> 00:28:28,080
all the arguments that are known from

637
00:28:28,080 --> 00:28:30,600
the code and we execute using the

638
00:28:30,600 --> 00:28:33,179
reflection API one step to another from

639
00:28:33,179 --> 00:28:35,280
the definition of the variable if we

640
00:28:35,280 --> 00:28:39,390
find it up to the end of the flow that

641
00:28:39,390 --> 00:28:43,230
is the invoke method call so in this

642
00:28:43,230 --> 00:28:47,010
case by this point of execution here we

643
00:28:47,010 --> 00:28:49,350
would have known we would know which is

644
00:28:49,350 --> 00:28:51,090
the target method because we have access

645
00:28:51,090 --> 00:28:51,900
to the

646
00:28:51,900 --> 00:28:55,320
of the geophys skated variable so this

647
00:28:55,320 --> 00:28:57,480
doesn't work all the ways of course but

648
00:28:57,480 --> 00:28:59,460
in most of the cases it's a pretty

649
00:28:59,460 --> 00:29:03,660
lightweight and it works fine so now we

650
00:29:03,660 --> 00:29:05,700
are done with device of meaning API

651
00:29:05,700 --> 00:29:08,190
abuse and also I also gave you some some

652
00:29:08,190 --> 00:29:11,390
hints on how we can better be obfuscate

653
00:29:11,390 --> 00:29:15,180
obfuscated methods now as we want to

654
00:29:15,180 --> 00:29:20,700
conclude with data encryption so we've

655
00:29:20,700 --> 00:29:24,030
examined few hundreds of samples and we

656
00:29:24,030 --> 00:29:27,210
have seen that at the end of the day the

657
00:29:27,210 --> 00:29:29,580
encryption flow boils down to a loop

658
00:29:29,580 --> 00:29:31,080
that looks like this

659
00:29:31,080 --> 00:29:33,510
so it access to a list of files and

660
00:29:33,510 --> 00:29:35,670
there are several ways that an

661
00:29:35,670 --> 00:29:38,190
application can list files for example

662
00:29:38,190 --> 00:29:42,300
by accessing that the external storage

663
00:29:42,300 --> 00:29:45,450
and then going through through the file

664
00:29:45,450 --> 00:29:48,990
output by the list files function or the

665
00:29:48,990 --> 00:29:51,570
list function or by using the runtime

666
00:29:51,570 --> 00:29:53,640
execution and simply running LS or

667
00:29:53,640 --> 00:29:56,940
something like this and then from from

668
00:29:56,940 --> 00:29:59,760
this point one file after another we see

669
00:29:59,760 --> 00:30:01,800
the allocation of the file input stream

670
00:30:01,800 --> 00:30:05,070
or equivalent so we have a few we have a

671
00:30:05,070 --> 00:30:08,010
few target methods that we look for and

672
00:30:08,010 --> 00:30:10,380
then at the end of the day you see that

673
00:30:10,380 --> 00:30:13,500
the the flow is ending into a cipher

674
00:30:13,500 --> 00:30:15,480
object that is performing the actual

675
00:30:15,480 --> 00:30:17,970
encryption so generally this problem can

676
00:30:17,970 --> 00:30:19,590
be solved with the with the dataflow

677
00:30:19,590 --> 00:30:22,230
dataflow analysis and in particular we

678
00:30:22,230 --> 00:30:26,490
use paint analysis where our interesting

679
00:30:26,490 --> 00:30:28,590
sources include for example the file

680
00:30:28,590 --> 00:30:31,380
listing method and the sink which are

681
00:30:31,380 --> 00:30:35,520
the end of the flows include metals such

682
00:30:35,520 --> 00:30:38,550
as cipher blue final or cipher out to

683
00:30:38,550 --> 00:30:40,170
output stream we have a long list of

684
00:30:40,170 --> 00:30:43,590
interesting and configurable flows and

685
00:30:43,590 --> 00:30:45,960
of course we need to have a way to

686
00:30:45,960 --> 00:30:49,940
determine that whether these flows are

687
00:30:49,940 --> 00:30:53,160
UI initiated or not so for example if

688
00:30:53,160 --> 00:30:55,530
there is a an execution of this flow as

689
00:30:55,530 --> 00:30:59,070
a result of an event on the 80 on the UI

690
00:30:59,070 --> 00:31:01,620
so for instance if there is a button

691
00:31:01,620 --> 00:31:04,350
that is being pressed and as a result of

692
00:31:04,350 --> 00:31:06,149
that event this flow is

693
00:31:06,149 --> 00:31:08,189
that's not interesting for us because

694
00:31:08,189 --> 00:31:10,709
that's something that is user initiated

695
00:31:10,709 --> 00:31:12,959
somehow so we want to find if there are

696
00:31:12,959 --> 00:31:16,109
flows that are executed regardless of

697
00:31:16,109 --> 00:31:18,869
user intervention fortunately all of

698
00:31:18,869 --> 00:31:21,119
these nice features are already

699
00:31:21,119 --> 00:31:22,979
implemented in flow droid which are

700
00:31:22,979 --> 00:31:26,009
which also has the exclusion of the UI

701
00:31:26,009 --> 00:31:28,609
components from the flow analysis and

702
00:31:28,609 --> 00:31:31,909
what we do is what I hinted you before

703
00:31:31,909 --> 00:31:35,069
we track all the flows that originate

704
00:31:35,069 --> 00:31:38,249
from file listing operations and end up

705
00:31:38,249 --> 00:31:41,309
into cipher into the encryption API

706
00:31:41,309 --> 00:31:43,979
essentially we have to modify flow

707
00:31:43,979 --> 00:31:45,749
drawer is a little bit because flow

708
00:31:45,749 --> 00:31:49,439
droid doesn't propagate change labels

709
00:31:49,439 --> 00:31:54,299
through byte 2 byte arrays it's a it's

710
00:31:54,299 --> 00:31:58,049
kind of a limitation of the tool there

711
00:31:58,049 --> 00:31:59,969
is also the option of using implicit

712
00:31:59,969 --> 00:32:02,699
flows but that made that makes the

713
00:32:02,699 --> 00:32:04,349
number of states number of paths

714
00:32:04,349 --> 00:32:07,369
exploding very easily so we kind of

715
00:32:07,369 --> 00:32:09,569
customized the two little bits to

716
00:32:09,569 --> 00:32:11,789
propagate faint tinkling faint

717
00:32:11,789 --> 00:32:14,399
information only in the few cases that

718
00:32:14,399 --> 00:32:16,799
end up into byte arrays and then into

719
00:32:16,799 --> 00:32:21,029
some buffer variables great so now we

720
00:32:21,029 --> 00:32:23,129
have a we have our pipelines completed

721
00:32:23,129 --> 00:32:25,319
we know how to detect all of these

722
00:32:25,319 --> 00:32:27,479
features at least in the indicators that

723
00:32:27,479 --> 00:32:30,779
I've showed you before the only problem

724
00:32:30,779 --> 00:32:33,929
is that is that it takes time it takes a

725
00:32:33,929 --> 00:32:36,359
lot of time to run static analysis and

726
00:32:36,359 --> 00:32:38,999
flow analysis if you have done it before

727
00:32:38,999 --> 00:32:42,299
you know how expensive it could be and

728
00:32:42,299 --> 00:32:44,819
by expensive I mean 12 seconds on

729
00:32:44,819 --> 00:32:46,799
average which looks pretty fast with

730
00:32:46,799 --> 00:32:49,199
respect to manual reverse engineering

731
00:32:49,199 --> 00:32:52,259
but in certain cases we will we would

732
00:32:52,259 --> 00:32:55,499
see samples timing out our analysis for

733
00:32:55,499 --> 00:33:00,539
going above 5 minutes so depending on

734
00:33:00,539 --> 00:33:02,219
how the code is organized this can take

735
00:33:02,219 --> 00:33:05,969
a lot so if you want to run this at an

736
00:33:05,969 --> 00:33:09,599
app store scale kind of workload this is

737
00:33:09,599 --> 00:33:12,689
not applicable clearly so we decided to

738
00:33:12,689 --> 00:33:17,129
adopt a pre filtering approach and we

739
00:33:17,129 --> 00:33:19,650
move from these observation we

740
00:33:19,650 --> 00:33:22,790
observe that the majority of

741
00:33:22,790 --> 00:33:25,370
applications that are out there are

742
00:33:25,370 --> 00:33:28,290
fortunately good work so non interesting

743
00:33:28,290 --> 00:33:30,800
we don't want to spend analysis time

744
00:33:30,800 --> 00:33:33,540
expensive analysis time on these

745
00:33:33,540 --> 00:33:35,430
applications we would like to quickly

746
00:33:35,430 --> 00:33:37,740
filter them out and focus on the core

747
00:33:37,740 --> 00:33:40,260
focus on the suspicious files that are

748
00:33:40,260 --> 00:33:42,720
maybe malware or interesting for us

749
00:33:42,720 --> 00:33:45,990
ransomware right so these design

750
00:33:45,990 --> 00:33:47,580
principles these are the design

751
00:33:47,580 --> 00:33:49,500
principles that we adopted we want to

752
00:33:49,500 --> 00:33:52,800
have a very fast filter that is very

753
00:33:52,800 --> 00:33:55,140
good at detecting if we have a good

754
00:33:55,140 --> 00:33:59,220
we're so very precise on solving one of

755
00:33:59,220 --> 00:34:01,980
the two problems and it's perfectly okay

756
00:34:01,980 --> 00:34:04,110
if it makes some mistakes in the other

757
00:34:04,110 --> 00:34:07,590
direction so it's fine if it says oh I

758
00:34:07,590 --> 00:34:09,510
think this is suspicious but then in the

759
00:34:09,510 --> 00:34:11,760
end it turns out to be benign it's not

760
00:34:11,760 --> 00:34:13,770
fine if it says oh I think this is

761
00:34:13,770 --> 00:34:15,449
benign but at the end of the day is

762
00:34:15,449 --> 00:34:17,070
actually malicious we don't want to make

763
00:34:17,070 --> 00:34:19,409
that mistake we are ok making this

764
00:34:19,409 --> 00:34:21,469
mistake in the first in the first place

765
00:34:21,469 --> 00:34:25,290
so this translates to a machine learning

766
00:34:25,290 --> 00:34:26,909
technique called cost-sensitive

767
00:34:26,909 --> 00:34:29,250
classification with cost-sensitive

768
00:34:29,250 --> 00:34:34,040
classification you actually move the

769
00:34:34,040 --> 00:34:36,989
threshold the the decision threshold on

770
00:34:36,989 --> 00:34:39,870
one side of the problem you want to

771
00:34:39,870 --> 00:34:41,880
train the classifier on the fact that

772
00:34:41,880 --> 00:34:44,730
the cost of a false positive is much

773
00:34:44,730 --> 00:34:46,440
higher than the cost of a false negative

774
00:34:46,440 --> 00:34:49,080
so you are kind of biasing the

775
00:34:49,080 --> 00:34:51,300
classifier somehow you are telling hey

776
00:34:51,300 --> 00:34:55,350
it is very costly to confuse a malicious

777
00:34:55,350 --> 00:34:57,480
as benign much more costly than the

778
00:34:57,480 --> 00:34:59,820
opposite one and we set a set a

779
00:34:59,820 --> 00:35:02,340
parameter of about 15 times in our

780
00:35:02,340 --> 00:35:05,310
experiment and on top of these I mean

781
00:35:05,310 --> 00:35:07,740
below this sorry we use an example of

782
00:35:07,740 --> 00:35:10,200
classifiers we use three classifiers we

783
00:35:10,200 --> 00:35:13,800
use a j48 decision tree random forests

784
00:35:13,800 --> 00:35:15,660
and decision tables which are actually

785
00:35:15,660 --> 00:35:17,610
implementing the actual classification

786
00:35:17,610 --> 00:35:20,580
problem and in order to take a decision

787
00:35:20,580 --> 00:35:23,430
we use majority voting that is we take

788
00:35:23,430 --> 00:35:26,160
the the most common answer among these

789
00:35:26,160 --> 00:35:30,150
three speaking of features from the

790
00:35:30,150 --> 00:35:32,359
malware analysis literature the

791
00:35:32,359 --> 00:35:34,249
feature that the set of features to

792
00:35:34,249 --> 00:35:36,950
detect malware is is fairly it's fairly

793
00:35:36,950 --> 00:35:38,299
established so we didn't want to

794
00:35:38,299 --> 00:35:40,640
reinvent the wheel so we took

795
00:35:40,640 --> 00:35:42,410
inspiration from some of those features

796
00:35:42,410 --> 00:35:43,579
that have been proposed in the

797
00:35:43,579 --> 00:35:46,579
literature and we also added a few few

798
00:35:46,579 --> 00:35:49,099
noble ones of course we are not solving

799
00:35:49,099 --> 00:35:50,690
I want to stress that here we are not

800
00:35:50,690 --> 00:35:52,609
solving a malware detection problem here

801
00:35:52,609 --> 00:35:54,230
we are solving a Google detection

802
00:35:54,230 --> 00:35:54,710
problem

803
00:35:54,710 --> 00:35:57,109
so we are more focused on the precision

804
00:35:57,109 --> 00:35:59,180
on detecting good work we don't care

805
00:35:59,180 --> 00:36:00,769
about if we make a mistake on the

806
00:36:00,769 --> 00:36:01,759
opposite direction

807
00:36:01,759 --> 00:36:04,039
so speaking of features more completely

808
00:36:04,039 --> 00:36:06,589
what we have in our classifiers are

809
00:36:06,589 --> 00:36:08,839
features that encode the presence or the

810
00:36:08,839 --> 00:36:10,970
absence of permission of some

811
00:36:10,970 --> 00:36:14,029
permissions we have File statistics such

812
00:36:14,029 --> 00:36:17,239
as number of files number of permissions

813
00:36:17,239 --> 00:36:20,200
number of services size of the classes

814
00:36:20,200 --> 00:36:23,450
number of packages etc etc we also have

815
00:36:23,450 --> 00:36:25,640
some lightweight so-called behavioral

816
00:36:25,640 --> 00:36:29,269
features that encode the fact that some

817
00:36:29,269 --> 00:36:32,089
sensitive api's are present in the code

818
00:36:32,089 --> 00:36:34,460
so all these features together if you

819
00:36:34,460 --> 00:36:36,140
take them together they do a good job

820
00:36:36,140 --> 00:36:39,380
into detecting if an application is good

821
00:36:39,380 --> 00:36:40,970
well of course if you take them

822
00:36:40,970 --> 00:36:42,349
individually they don't make a lot of

823
00:36:42,349 --> 00:36:47,210
sense so it turns out that this choice

824
00:36:47,210 --> 00:36:49,339
these sorts of features and this choice

825
00:36:49,339 --> 00:36:51,019
of classification approach works fairly

826
00:36:51,019 --> 00:36:54,289
well from our experiments on hundreds of

827
00:36:54,289 --> 00:36:57,890
thousands of benign and malware samples

828
00:36:57,890 --> 00:37:00,559
the precision is fairly good and it's

829
00:37:00,559 --> 00:37:03,470
also quite fast you can see here we

830
00:37:03,470 --> 00:37:06,859
moved from 12 seconds on average to 1.25

831
00:37:06,859 --> 00:37:09,289
seconds on average which is about one

832
00:37:09,289 --> 00:37:12,589
order of magnitude so here you can see

833
00:37:12,589 --> 00:37:15,680
we also exposing this service as a as a

834
00:37:15,680 --> 00:37:18,410
web as a web service there are all the

835
00:37:18,410 --> 00:37:21,349
URL at the end of the presentation as

836
00:37:21,349 --> 00:37:25,220
output we give you the scoring data that

837
00:37:25,220 --> 00:37:26,839
is the output of the classifiers and

838
00:37:26,839 --> 00:37:28,970
also we give you the details on which

839
00:37:28,970 --> 00:37:31,989
features have been found in the sample

840
00:37:31,989 --> 00:37:34,839
so you will be able to use this service

841
00:37:34,839 --> 00:37:39,109
publicly so in addition to these expect

842
00:37:39,109 --> 00:37:41,420
to the experiments on the speed we also

843
00:37:41,420 --> 00:37:43,670
did some experiments on the detection

844
00:37:43,670 --> 00:37:45,170
accuracy of course the detection

845
00:37:45,170 --> 00:37:45,700
capability

846
00:37:45,700 --> 00:37:47,920
is of the whole pipeline which was that

847
00:37:47,920 --> 00:37:52,050
the most interesting part so we adopted

848
00:37:52,050 --> 00:37:57,010
two broad data sources one data source

849
00:37:57,010 --> 00:38:00,220
was composed basically by malware and

850
00:38:00,220 --> 00:38:02,080
good where so we have a few hundreds of

851
00:38:02,080 --> 00:38:05,080
thousands of samples in this bucket and

852
00:38:05,080 --> 00:38:07,810
we use this for detecting how many false

853
00:38:07,810 --> 00:38:11,230
positives our instrument is expanding so

854
00:38:11,230 --> 00:38:14,350
we want this to be very low of course on

855
00:38:14,350 --> 00:38:16,840
the other hand we have a set of selected

856
00:38:16,840 --> 00:38:17,620
ransomware

857
00:38:17,620 --> 00:38:19,900
when I see select when I say selected I

858
00:38:19,900 --> 00:38:24,310
mean that we manually analyze a few

859
00:38:24,310 --> 00:38:26,440
samples on these on this pool to make

860
00:38:26,440 --> 00:38:28,180
sure that they were actually doing

861
00:38:28,180 --> 00:38:30,130
around Samba because you know that you

862
00:38:30,130 --> 00:38:31,870
should go on by those total in query for

863
00:38:31,870 --> 00:38:34,570
screen Locker or ransom or families in

864
00:38:34,570 --> 00:38:35,950
general you might get some false

865
00:38:35,950 --> 00:38:37,720
positive that's a common a common

866
00:38:37,720 --> 00:38:39,580
problem that all the practitioners and

867
00:38:39,580 --> 00:38:42,700
researchers are aware of so we kind of

868
00:38:42,700 --> 00:38:45,610
did some random checking to see if we

869
00:38:45,610 --> 00:38:47,950
were actually targeting good samples and

870
00:38:47,950 --> 00:38:51,700
then we will we have a continuously

871
00:38:51,700 --> 00:38:53,290
running experiment of which we don't

872
00:38:53,290 --> 00:38:55,870
have any any ground truth that is we

873
00:38:55,870 --> 00:38:58,300
take the daily feed of the top I think

874
00:38:58,300 --> 00:39:02,560
top 100 top 500 probably samples from

875
00:39:02,560 --> 00:39:03,400
virustotal

876
00:39:03,400 --> 00:39:06,000
quitting from key to key family names

877
00:39:06,000 --> 00:39:08,440
and so far we have analyzed something

878
00:39:08,440 --> 00:39:10,990
like some some hundred some tens of

879
00:39:10,990 --> 00:39:14,020
thousands of samples the results are

880
00:39:14,020 --> 00:39:17,110
pretty satisfactory I'm very happy with

881
00:39:17,110 --> 00:39:19,570
the first positives there are a few

882
00:39:19,570 --> 00:39:22,530
corner cases that include for instance

883
00:39:22,530 --> 00:39:25,470
application that have large portion of

884
00:39:25,470 --> 00:39:28,630
text that is referring to copyright or

885
00:39:28,630 --> 00:39:31,360
law related terms that was kind of

886
00:39:31,360 --> 00:39:34,210
expected we probably have to buy us a

887
00:39:34,210 --> 00:39:36,340
little bit the decision on the other

888
00:39:36,340 --> 00:39:39,280
features for if this happened so we were

889
00:39:39,280 --> 00:39:42,280
thinking of removing these after after

890
00:39:42,280 --> 00:39:44,590
an output that says okay I think it's

891
00:39:44,590 --> 00:39:47,080
ransomware mostly related on the

892
00:39:47,080 --> 00:39:48,670
contribution of the text analysis

893
00:39:48,670 --> 00:39:50,560
probably we should remove the text

894
00:39:50,560 --> 00:39:52,630
analysis component rerun the analysis

895
00:39:52,630 --> 00:39:54,700
and see if the result changes or not

896
00:39:54,700 --> 00:39:58,210
right and then we also found six cases

897
00:39:58,210 --> 00:39:59,060
of benign

898
00:39:59,060 --> 00:40:03,260
vacations that we're using Anki up and

899
00:40:03,260 --> 00:40:06,260
onkeydown mechanism the mechanism to

900
00:40:06,260 --> 00:40:09,530
customize the user experience and also

901
00:40:09,530 --> 00:40:12,140
that was kind of kind of expected but on

902
00:40:12,140 --> 00:40:14,210
a basis of a few hundreds of thousands

903
00:40:14,210 --> 00:40:15,800
of sample that's that's pretty

904
00:40:15,800 --> 00:40:18,380
encouraging speaking of the detection

905
00:40:18,380 --> 00:40:21,440
rate that's also quite encouraging if we

906
00:40:21,440 --> 00:40:23,360
take out the forty nine samples that we

907
00:40:23,360 --> 00:40:25,550
found to be mislabeled so we took all

908
00:40:25,550 --> 00:40:28,040
the for all the the false negatives here

909
00:40:28,040 --> 00:40:30,380
and we analyzed them manually to see if

910
00:40:30,380 --> 00:40:32,270
they had actually malicious

911
00:40:32,270 --> 00:40:33,770
functionalities implemented and we

912
00:40:33,770 --> 00:40:36,020
couldn't find them so we concluded that

913
00:40:36,020 --> 00:40:38,420
they were mislabeled by by some of the

914
00:40:38,420 --> 00:40:40,880
vendors the interesting case that we

915
00:40:40,880 --> 00:40:44,270
found where eleven applications but that

916
00:40:44,270 --> 00:40:45,950
were eleven applications that were not

917
00:40:45,950 --> 00:40:47,960
detected because the language was

918
00:40:47,960 --> 00:40:49,340
unsupported in the sense that our

919
00:40:49,340 --> 00:40:52,040
classifier didn't have the information

920
00:40:52,040 --> 00:40:55,940
on the training on Spanish and Russian

921
00:40:55,940 --> 00:40:59,360
right so we say ok we could simply take

922
00:40:59,360 --> 00:41:01,970
these samples take the text found on

923
00:41:01,970 --> 00:41:04,790
this sample and then use it to train the

924
00:41:04,790 --> 00:41:06,020
classifier but that would be cheating

925
00:41:06,020 --> 00:41:08,480
because we already we have a query here

926
00:41:08,480 --> 00:41:10,700
that we want to run and we want to see

927
00:41:10,700 --> 00:41:12,950
if the the classifier is able to

928
00:41:12,950 --> 00:41:14,810
classify them without showing them the

929
00:41:14,810 --> 00:41:16,850
sample first otherwise it's you know

930
00:41:16,850 --> 00:41:19,070
complete cheating so what we did is

931
00:41:19,070 --> 00:41:21,260
since we didn't have any other samples

932
00:41:21,260 --> 00:41:23,630
localized in Spanish Immersion we took

933
00:41:23,630 --> 00:41:25,730
the samples that we had localized in

934
00:41:25,730 --> 00:41:27,830
English and we use an automated

935
00:41:27,830 --> 00:41:29,570
translator such as Google Translate to

936
00:41:29,570 --> 00:41:32,570
translate the sentences into the best

937
00:41:32,570 --> 00:41:35,500
approximation of Spanish version right

938
00:41:35,500 --> 00:41:37,550
so this was great because it was

939
00:41:37,550 --> 00:41:39,710
completely automatic right and you can

940
00:41:39,710 --> 00:41:42,470
use it even to sort of anticipate the

941
00:41:42,470 --> 00:41:45,560
spread of one family into another

942
00:41:45,560 --> 00:41:48,020
country of which you haven't seen any

943
00:41:48,020 --> 00:41:49,730
evidence yet so you don't need the

944
00:41:49,730 --> 00:41:52,040
actual sample to be able to detect the

945
00:41:52,040 --> 00:41:54,230
outbreak of a family in a country what

946
00:41:54,230 --> 00:41:57,140
you need is a few sentences coming from

947
00:41:57,140 --> 00:41:59,690
other applications localized in other

948
00:41:59,690 --> 00:42:02,060
languages so that's what was a pretty

949
00:42:02,060 --> 00:42:06,830
happy happy incident so as I said we

950
00:42:06,830 --> 00:42:10,450
will be releasing a tool

951
00:42:10,620 --> 00:42:12,960
in a few moments that will be pushing

952
00:42:12,960 --> 00:42:18,750
the source code onto this repository the

953
00:42:18,750 --> 00:42:21,510
service the service API is already

954
00:42:21,510 --> 00:42:24,720
opened I think it we opened it a year

955
00:42:24,720 --> 00:42:27,870
ago probably less than a year ago and

956
00:42:27,870 --> 00:42:29,130
it's available at this

957
00:42:29,130 --> 00:42:36,000
Ransome mobi address we use it as I told

958
00:42:36,000 --> 00:42:37,890
you before to analyze the daily feed

959
00:42:37,890 --> 00:42:39,750
coming from virustotal

960
00:42:39,750 --> 00:42:41,940
so we query virustotal and whatever we

961
00:42:41,940 --> 00:42:45,330
find containing significant labels we

962
00:42:45,330 --> 00:42:49,260
analyze it from this URL which is not

963
00:42:49,260 --> 00:42:52,950
public in the in the main page so you

964
00:42:52,950 --> 00:42:54,540
want to take note of it and it's not

965
00:42:54,540 --> 00:42:56,910
very creative in the name but you

966
00:42:56,910 --> 00:43:00,360
couldn't find it in any other source you

967
00:43:00,360 --> 00:43:03,120
will find the detailed analysis of each

968
00:43:03,120 --> 00:43:06,870
sample that we find so we divided we try

969
00:43:06,870 --> 00:43:09,000
to divide it by family of course there's

970
00:43:09,000 --> 00:43:10,800
going to be some overlapping because of

971
00:43:10,800 --> 00:43:14,930
the of the well-known labeling problem

972
00:43:14,930 --> 00:43:18,210
we show some statistics on the language

973
00:43:18,210 --> 00:43:20,730
we show some statistics on which

974
00:43:20,730 --> 00:43:24,480
families have sorry how many times in a

975
00:43:24,480 --> 00:43:27,240
certain family we see the detection of

976
00:43:27,240 --> 00:43:31,230
LOC techniques if we see the text the

977
00:43:31,230 --> 00:43:32,910
threatening text and which is the

978
00:43:32,910 --> 00:43:36,720
language and other other details are the

979
00:43:36,720 --> 00:43:39,630
aggregated details if you click on a

980
00:43:39,630 --> 00:43:43,470
family name at the top here you can go

981
00:43:43,470 --> 00:43:45,300
down in the details you will see all the

982
00:43:45,300 --> 00:43:47,520
samples being analyzed you can download

983
00:43:47,520 --> 00:43:49,980
the analysis result as a JSON file

984
00:43:49,980 --> 00:43:52,230
you'll also be able to download the

985
00:43:52,230 --> 00:43:54,390
sample but for that you need a password

986
00:43:54,390 --> 00:43:56,190
so you can write me an email if you need

987
00:43:56,190 --> 00:43:59,480
if you need access to to those samples

988
00:43:59,480 --> 00:44:02,760
you can also search you can also order

989
00:44:02,760 --> 00:44:05,010
the columns you can filter the column so

990
00:44:05,010 --> 00:44:07,620
we try to make it at least usable from a

991
00:44:07,620 --> 00:44:10,530
human and here is the output of the

992
00:44:10,530 --> 00:44:13,500
detection only for the ransomware part

993
00:44:13,500 --> 00:44:15,830
right I showed you before the

994
00:44:15,830 --> 00:44:18,000
pre-filtering this is not including the

995
00:44:18,000 --> 00:44:19,710
pickles and this is all only including

996
00:44:19,710 --> 00:44:23,160
the output of the detection sorry of the

997
00:44:23,160 --> 00:44:24,950
rainstorm of detection part

998
00:44:24,950 --> 00:44:28,200
and so speaking of the details we

999
00:44:28,200 --> 00:44:30,660
published a couple of papers one last

1000
00:44:30,660 --> 00:44:35,790
year at rate 2015 in Japan and one has

1001
00:44:35,790 --> 00:44:37,470
been published this year has been just

1002
00:44:37,470 --> 00:44:41,579
presented in China by my student and you

1003
00:44:41,579 --> 00:44:43,470
can find the PDF describing all the

1004
00:44:43,470 --> 00:44:46,290
implementation details on my webpage

1005
00:44:46,290 --> 00:44:50,700
here or on my my github repo to find all

1006
00:44:50,700 --> 00:44:53,190
the papers you'll also find the slides

1007
00:44:53,190 --> 00:44:55,710
I'll be publishing the slides on this

1008
00:44:55,710 --> 00:44:59,010
repo as well so in the first paper we

1009
00:44:59,010 --> 00:45:01,650
kind of set the overall ideas and the

1010
00:45:01,650 --> 00:45:03,420
second paper represented pre-filtering

1011
00:45:03,420 --> 00:45:05,880
plus the reflection enhancement that I

1012
00:45:05,880 --> 00:45:15,390
discussed before I'm sorry all right so

1013
00:45:15,390 --> 00:45:18,329
I promise I mean it's in the title of

1014
00:45:18,329 --> 00:45:20,160
the presentation I promised that I would

1015
00:45:20,160 --> 00:45:23,190
have given you my my personal conclusion

1016
00:45:23,190 --> 00:45:25,800
of why ransomware from an economical

1017
00:45:25,800 --> 00:45:28,710
perspective is so different actually in

1018
00:45:28,710 --> 00:45:30,900
general is different but I like it too

1019
00:45:30,900 --> 00:45:33,390
to give you also a spin on economics

1020
00:45:33,390 --> 00:45:35,760
even though I'm not an expert in

1021
00:45:35,760 --> 00:45:37,920
economics so beware what I'm saying is

1022
00:45:37,920 --> 00:45:39,300
there is anyone who is expert in

1023
00:45:39,300 --> 00:45:41,819
economics please come talk to me I spoke

1024
00:45:41,819 --> 00:45:43,619
with some of my friends and they say

1025
00:45:43,619 --> 00:45:45,750
they're what I said I mean it kind of

1026
00:45:45,750 --> 00:45:47,520
makes sense so I say well I'll be

1027
00:45:47,520 --> 00:45:52,440
included in my in my presentation so we

1028
00:45:52,440 --> 00:45:52,859
run

1029
00:45:52,859 --> 00:45:55,410
I mean trend was kind enough to run a

1030
00:45:55,410 --> 00:46:00,540
survey in the UK among about 300

1031
00:46:00,540 --> 00:46:03,150
companies having in the tech in the tech

1032
00:46:03,150 --> 00:46:06,050
manufacturing business having about

1033
00:46:06,050 --> 00:46:09,390
1,000 employees so not so small not so

1034
00:46:09,390 --> 00:46:13,079
large companies and they were asked what

1035
00:46:13,079 --> 00:46:16,380
was their posture on ransomware

1036
00:46:16,380 --> 00:46:20,430
infections so those who weren't infected

1037
00:46:20,430 --> 00:46:22,560
they were asked what would you do in

1038
00:46:22,560 --> 00:46:24,750
case of a ransom or a ransom or

1039
00:46:24,750 --> 00:46:27,780
infection and those were infected we're

1040
00:46:27,780 --> 00:46:30,810
asked what did you do once we knew that

1041
00:46:30,810 --> 00:46:33,420
you were infected and how is it turned

1042
00:46:33,420 --> 00:46:36,180
out how it worked out for from a data

1043
00:46:36,180 --> 00:46:37,620
recovery perspective

1044
00:46:37,620 --> 00:46:40,710
so the first question before infection

1045
00:46:40,710 --> 00:46:42,630
people are bullish they say I would

1046
00:46:42,630 --> 00:46:44,370
never pay I mean the majority of them is

1047
00:46:44,370 --> 00:46:46,590
a course they will never pay but then if

1048
00:46:46,590 --> 00:46:48,660
you ask the people who were hit by

1049
00:46:48,660 --> 00:46:51,030
ransomware the majority of them would

1050
00:46:51,030 --> 00:46:53,910
pay right more than 50 percent of them

1051
00:46:53,910 --> 00:46:57,480
would pay so you can see here how ransom

1052
00:46:57,480 --> 00:47:00,150
work I mean once you experience it it

1053
00:47:00,150 --> 00:47:02,070
changes everything can even change your

1054
00:47:02,070 --> 00:47:04,410
yoga pose

1055
00:47:04,410 --> 00:47:07,560
speaking of recovery there is a good

1056
00:47:07,560 --> 00:47:11,790
percentage of recovery rate there were

1057
00:47:11,790 --> 00:47:15,120
cases of companies not being able to

1058
00:47:15,120 --> 00:47:17,760
restore the data because the bad guys

1059
00:47:17,760 --> 00:47:20,690
simply ran away with a bunch of bitcoins

1060
00:47:20,690 --> 00:47:24,360
but I call that as an unfortunate

1061
00:47:24,360 --> 00:47:27,360
incident because most of the most of the

1062
00:47:27,360 --> 00:47:28,950
bad guys are actually good guys in this

1063
00:47:28,950 --> 00:47:32,310
respective in this in this and from this

1064
00:47:32,310 --> 00:47:35,190
perspective what they do is simply we

1065
00:47:35,190 --> 00:47:38,280
had a very low barrier at the entrance

1066
00:47:38,280 --> 00:47:40,140
so it is very easy to get into the

1067
00:47:40,140 --> 00:47:42,180
ransomware business but it is also very

1068
00:47:42,180 --> 00:47:44,160
easy to screw it up because if you want

1069
00:47:44,160 --> 00:47:46,170
to run a back-end to keep track of all

1070
00:47:46,170 --> 00:47:49,470
the private key and all the the release

1071
00:47:49,470 --> 00:47:52,170
of the of the private key is kind of

1072
00:47:52,170 --> 00:47:54,780
complicated so I think that this is this

1073
00:47:54,780 --> 00:47:57,510
thirty five percent of cases of simply

1074
00:47:57,510 --> 00:48:01,830
inexperienced attack ads so to speak so

1075
00:48:01,830 --> 00:48:04,830
we can at least I hope I convinced some

1076
00:48:04,830 --> 00:48:07,170
of you that we can agree on this point

1077
00:48:07,170 --> 00:48:09,360
why ransomware is different is first of

1078
00:48:09,360 --> 00:48:11,430
all because it changes everything like

1079
00:48:11,430 --> 00:48:14,670
it changed completely the approach to an

1080
00:48:14,670 --> 00:48:17,520
incident response case it is completely

1081
00:48:17,520 --> 00:48:21,030
destructive which if you think about mal

1082
00:48:21,030 --> 00:48:23,880
were twenty years ago ten years ago but

1083
00:48:23,880 --> 00:48:26,970
even five years ago we didn't know that

1084
00:48:26,970 --> 00:48:28,650
a mother could simply come and break

1085
00:48:28,650 --> 00:48:31,170
everything we were used to botnet kind

1086
00:48:31,170 --> 00:48:35,490
of malware which was all but noisy was

1087
00:48:35,490 --> 00:48:36,780
completely stealthy because the

1088
00:48:36,780 --> 00:48:38,720
objective of that malware was to keep

1089
00:48:38,720 --> 00:48:41,730
control the device under the hood

1090
00:48:41,730 --> 00:48:44,730
without showing off on the opposite side

1091
00:48:44,730 --> 00:48:47,610
malware has to show up it is the main

1092
00:48:47,610 --> 00:48:50,010
purpose of malware our sorry ransomware

1093
00:48:50,010 --> 00:48:51,300
has to show up

1094
00:48:51,300 --> 00:48:53,820
it is the main purpose of ransomware to

1095
00:48:53,820 --> 00:48:55,980
show up and say hey I'm healed I'm held

1096
00:48:55,980 --> 00:48:58,770
in your device as ransom you have to pay

1097
00:48:58,770 --> 00:49:02,010
if that doesn't occur if that noisy

1098
00:49:02,010 --> 00:49:04,170
behavior doesn't show up then the

1099
00:49:04,170 --> 00:49:06,360
ransomware is completely failed right

1100
00:49:06,360 --> 00:49:08,400
and the business model doesn't work so

1101
00:49:08,400 --> 00:49:12,540
no show no gold second it is a pure

1102
00:49:12,540 --> 00:49:15,180
profit kind of business there is a link

1103
00:49:15,180 --> 00:49:17,550
here to an analysis done by the data

1104
00:49:17,550 --> 00:49:20,490
gravity guys and they estimated that

1105
00:49:20,490 --> 00:49:24,900
last year the whole ransom er market was

1106
00:49:24,900 --> 00:49:27,540
more profitable than sixty eight point

1107
00:49:27,540 --> 00:49:30,210
seven percent of the companies in the

1108
00:49:30,210 --> 00:49:33,240
fourth mm top in the top Forbes 2000

1109
00:49:33,240 --> 00:49:35,550
which is kind of remarkable but if you

1110
00:49:35,550 --> 00:49:37,560
think about you don't need a lot of cost

1111
00:49:37,560 --> 00:49:40,980
time in direct costs to run to run

1112
00:49:40,980 --> 00:49:43,200
ransomware you need technical expertise

1113
00:49:43,200 --> 00:49:46,200
but once you set it you can you can

1114
00:49:46,200 --> 00:49:48,270
amortize that investment very easily so

1115
00:49:48,270 --> 00:49:51,720
it's mostly profit business and third

1116
00:49:51,720 --> 00:49:53,970
even if you see as we have seen some

1117
00:49:53,970 --> 00:49:57,180
cases of bad attackers it's a business

1118
00:49:57,180 --> 00:49:59,520
model that is backed by honesty right

1119
00:49:59,520 --> 00:50:02,970
the the bad guys have to be honest in

1120
00:50:02,970 --> 00:50:06,330
the majority of cases otherwise their

1121
00:50:06,330 --> 00:50:10,710
dishonesty will you know run we ruin the

1122
00:50:10,710 --> 00:50:12,780
business so more the business the guys

1123
00:50:12,780 --> 00:50:14,550
are the more the bad guys are harnessed

1124
00:50:14,550 --> 00:50:18,660
the more the the more the business model

1125
00:50:18,660 --> 00:50:23,100
works better so this created I mean

1126
00:50:23,100 --> 00:50:25,140
these three characteristics have created

1127
00:50:25,140 --> 00:50:27,720
a sort of a vicious circle if you want

1128
00:50:27,720 --> 00:50:30,870
the more the victim space the more the

1129
00:50:30,870 --> 00:50:34,740
attackers expectation increase and they

1130
00:50:34,740 --> 00:50:36,330
gain more confidence in the fact that

1131
00:50:36,330 --> 00:50:38,670
their business model works well and so

1132
00:50:38,670 --> 00:50:40,440
they increase the prices we have seen

1133
00:50:40,440 --> 00:50:43,560
cases of prices in getting higher and

1134
00:50:43,560 --> 00:50:45,960
higher and higher but also cases of

1135
00:50:45,960 --> 00:50:49,620
prices customized on a perfect engages

1136
00:50:49,620 --> 00:50:52,230
there was one case I think in a hospital

1137
00:50:52,230 --> 00:50:55,770
where the victim paid almost immediately

1138
00:50:55,770 --> 00:50:57,840
I mean agreed to pay almost immediately

1139
00:50:57,840 --> 00:50:59,640
and the weather guy say oh you know what

1140
00:50:59,640 --> 00:51:01,380
I doubled the price because it means

1141
00:51:01,380 --> 00:51:02,940
that you can afford it so if you can

1142
00:51:02,940 --> 00:51:04,980
afford 10,000 you can afford twenty-two

1143
00:51:04,980 --> 00:51:08,640
mm easy right and that that happened so

1144
00:51:08,640 --> 00:51:11,760
you can see from this center of the

1145
00:51:11,760 --> 00:51:13,230
vicious circle that there is a key

1146
00:51:13,230 --> 00:51:15,510
advantage here that the attackers are

1147
00:51:15,510 --> 00:51:18,830
are kind of exploiting and if we want to

1148
00:51:18,830 --> 00:51:23,520
like reverse the way of the visual

1149
00:51:23,520 --> 00:51:25,619
circle we will have to exploit it to the

1150
00:51:25,619 --> 00:51:27,480
key advantage here is how much can the

1151
00:51:27,480 --> 00:51:29,460
victim afford this is becoming a key

1152
00:51:29,460 --> 00:51:32,070
information for the attackers to succeed

1153
00:51:32,070 --> 00:51:36,619
in to making a very explosive business

1154
00:51:36,619 --> 00:51:39,000
compared to a mass a much kind of

1155
00:51:39,000 --> 00:51:41,730
attacks when you asked for $300 or $500

1156
00:51:41,730 --> 00:51:44,760
to every weekend right unfortunately

1157
00:51:44,760 --> 00:51:51,150
I've seen cases of vendors acting in

1158
00:51:51,150 --> 00:51:53,990
favor of the bad guys if you want I'm

1159
00:51:53,990 --> 00:51:56,760
quoting something that I found on a

1160
00:51:56,760 --> 00:52:00,480
website of a vendor that says we will

1161
00:52:00,480 --> 00:52:03,720
reimburse up to 1000 per endpoint I mean

1162
00:52:03,720 --> 00:52:05,550
this is saying it out loud on the

1163
00:52:05,550 --> 00:52:08,850
website or 1 million in ransom or

1164
00:52:08,850 --> 00:52:10,470
protection overall for the company

1165
00:52:10,470 --> 00:52:13,380
guarantee so this vendor is kind of

1166
00:52:13,380 --> 00:52:15,840
backing their technology with an

1167
00:52:15,840 --> 00:52:19,020
insurance which is kind of fine I mean I

1168
00:52:19,020 --> 00:52:20,400
can understand this as an agreement

1169
00:52:20,400 --> 00:52:22,530
between me and the client I would like

1170
00:52:22,530 --> 00:52:23,900
to offer some extra layer of protection

1171
00:52:23,900 --> 00:52:26,340
but I don't like the fact that this is

1172
00:52:26,340 --> 00:52:29,670
being made public and out loud to the

1173
00:52:29,670 --> 00:52:31,050
whole world because this is what the

1174
00:52:31,050 --> 00:52:33,180
attackers have been waiting for knowing

1175
00:52:33,180 --> 00:52:35,820
how much the customers of this vendor

1176
00:52:35,820 --> 00:52:39,480
can afford right and they make it even

1177
00:52:39,480 --> 00:52:42,180
worse I think they say it's time for

1178
00:52:42,180 --> 00:52:43,800
security companies to back their

1179
00:52:43,800 --> 00:52:46,109
technology and provide users with the

1180
00:52:46,109 --> 00:52:48,270
financial assurance that they deserve

1181
00:52:48,270 --> 00:52:51,330
against ransomware attack so they're

1182
00:52:51,330 --> 00:52:53,940
making it sound like a wake-up call like

1183
00:52:53,940 --> 00:52:56,940
a vendor's we should all do this

1184
00:52:56,940 --> 00:53:00,330
well my wake-up calls my wake-up call

1185
00:53:00,330 --> 00:53:02,640
for this vendor and other vendors that

1186
00:53:02,640 --> 00:53:04,410
are probably thinking about going into

1187
00:53:04,410 --> 00:53:06,450
this direction is to try to think for a

1188
00:53:06,450 --> 00:53:08,760
moment seriously

1189
00:53:08,760 --> 00:53:11,130
what could be the long-term effect if

1190
00:53:11,130 --> 00:53:13,800
this is adopted on a wide scale so think

1191
00:53:13,800 --> 00:53:16,080
of the money all the money flows in the

1192
00:53:16,080 --> 00:53:18,660
ransomware business and think how much

1193
00:53:18,660 --> 00:53:20,520
can acts as an amplifier of these

1194
00:53:20,520 --> 00:53:25,009
vicious circles thank you

1195
00:53:30,330 --> 00:53:33,230
[Applause]

