1
00:00:00,060 --> 00:00:02,879
great heroin so welcome to this our last

2
00:00:02,879 --> 00:00:05,310
session before lunch so it's third

3
00:00:05,310 --> 00:00:07,529
session someone taking from very long

4
00:00:07,529 --> 00:00:09,929
and today I'm going to be talking about

5
00:00:09,929 --> 00:00:12,809
on how you can change a spray attack

6
00:00:12,809 --> 00:00:15,870
from Linux on Berkeley packet filters

7
00:00:15,870 --> 00:00:19,050
and this work has done are been done in

8
00:00:19,050 --> 00:00:21,210
collaboration with my colleague Filippo

9
00:00:21,210 --> 00:00:23,460
who is sitting here clicking wave to

10
00:00:23,460 --> 00:00:25,380
people and then I was supervising

11
00:00:25,380 --> 00:00:27,689
professor Otto Kahn and you can see all

12
00:00:27,689 --> 00:00:29,550
our wireless oscillations and things in

13
00:00:29,550 --> 00:00:33,120
the slide aperture band back to here is

14
00:00:33,120 --> 00:00:35,489
that our so I'll give you a shorter E of

15
00:00:35,489 --> 00:00:37,620
people who don't know what is Berkley

16
00:00:37,620 --> 00:00:39,329
packet filter while supports during

17
00:00:39,329 --> 00:00:41,940
Telefilms Colonel what subject for this

18
00:00:41,940 --> 00:00:43,680
public purpose is a JIT compiler and

19
00:00:43,680 --> 00:00:46,559
they are sorted Berkeley packet filter

20
00:00:46,559 --> 00:00:48,539
and then we will take a look on this

21
00:00:48,539 --> 00:00:50,910
original disparate talk on which was

22
00:00:50,910 --> 00:00:53,730
done back in 2012 by Kevin McAllister

23
00:00:53,730 --> 00:00:55,500
it's very actually beautiful a target

24
00:00:55,500 --> 00:00:57,960
understand at the time and it deduced a

25
00:00:57,960 --> 00:00:59,940
couple of interesting tricks but it's a

26
00:00:59,940 --> 00:01:02,250
result of at a talk on an interlude to

27
00:01:02,250 --> 00:01:05,280
do which is Bret Hart convene our for

28
00:01:05,280 --> 00:01:07,170
the our Linux kernel a lot of his

29
00:01:07,170 --> 00:01:08,700
attackers control measures implemented

30
00:01:08,700 --> 00:01:10,710
and we're going to take a look on them

31
00:01:10,710 --> 00:01:13,170
and we will show how we can overcome

32
00:01:13,170 --> 00:01:15,210
this country measures done in the linux

33
00:01:15,210 --> 00:01:17,549
kernel to actually pretty much achieve

34
00:01:17,549 --> 00:01:20,100
the same a talk so on achieve full jet

35
00:01:20,100 --> 00:01:23,220
spray on we are modern food for linux

36
00:01:23,220 --> 00:01:25,470
kernel and i'm going to share some show

37
00:01:25,470 --> 00:01:27,780
demo and our little about also

38
00:01:27,780 --> 00:01:29,250
implemented more and implemented

39
00:01:29,250 --> 00:01:32,189
mitigation and i would like to tell

40
00:01:32,189 --> 00:01:34,049
about this work has been done as part of

41
00:01:34,049 --> 00:01:36,840
the our kernel in stone upstream so

42
00:01:36,840 --> 00:01:38,310
hardening project i don't know if you

43
00:01:38,310 --> 00:01:40,049
have heard about it but i'll have it

44
00:01:40,049 --> 00:01:41,460
slides to the end to show to tell a bit

45
00:01:41,460 --> 00:01:46,439
more about it so so what is this part in

46
00:01:46,439 --> 00:01:47,700
berkeley packet filter so if you're

47
00:01:47,700 --> 00:01:49,500
reading this definition from Wikipedia

48
00:01:49,500 --> 00:01:52,799
is from a target or you can say okay

49
00:01:52,799 --> 00:01:54,329
this is a kernel component so it

50
00:01:54,329 --> 00:01:56,579
survives in Linux kernel it allows the

51
00:01:56,579 --> 00:01:59,790
user space proces to supply program and

52
00:01:59,790 --> 00:02:01,920
get it executed in the kernel conduct

53
00:02:01,920 --> 00:02:03,780
which is like pretty pretty nice from

54
00:02:03,780 --> 00:02:05,159
the attacker point of view so you kind

55
00:02:05,159 --> 00:02:07,530
of have this internal virtual machine

56
00:02:07,530 --> 00:02:09,598
which can execute code for your code you

57
00:02:09,598 --> 00:02:09,959
want

58
00:02:09,959 --> 00:02:12,810
well not fully without you want but so

59
00:02:12,810 --> 00:02:13,740
where is this package

60
00:02:13,740 --> 00:02:15,540
the respective pocket filter you so

61
00:02:15,540 --> 00:02:17,670
obviously packet filtering so

62
00:02:17,670 --> 00:02:19,710
necessary how its original is introduced

63
00:02:19,710 --> 00:02:22,080
so we wanted to have a mechanism in the

64
00:02:22,080 --> 00:02:25,620
kernel to filter packages but for

65
00:02:25,620 --> 00:02:27,270
certain circuits for the user space we

66
00:02:27,270 --> 00:02:28,740
don't have to do context switch between

67
00:02:28,740 --> 00:02:32,010
user specific kernel and because always

68
00:02:32,010 --> 00:02:33,840
you'll have to take package delivered to

69
00:02:33,840 --> 00:02:35,730
users based computer data set ok here's

70
00:02:35,730 --> 00:02:37,620
the package users basic probes to take a

71
00:02:37,620 --> 00:02:39,390
look on it and most expected if it

72
00:02:39,390 --> 00:02:41,100
doesn't need so it will discouragements

73
00:02:41,100 --> 00:02:42,960
if you're not interested so for this

74
00:02:42,960 --> 00:02:44,610
point we wanted to have this filtering

75
00:02:44,610 --> 00:02:46,830
in place which you can supply program to

76
00:02:46,830 --> 00:02:48,300
the kernel service I'm only interested

77
00:02:48,300 --> 00:02:50,040
for all the packages coming from the

78
00:02:50,040 --> 00:02:51,450
socket I'm only just in this particular

79
00:02:51,450 --> 00:02:55,470
one and so that one it's really virtual

80
00:02:55,470 --> 00:02:58,200
machine so we have this BPF virtual

81
00:02:58,200 --> 00:02:58,710
machine

82
00:02:58,710 --> 00:03:00,720
they have our certain operations which

83
00:03:00,720 --> 00:03:02,340
when you write a program they shouldn't

84
00:03:02,340 --> 00:03:03,900
abrasions chill out you can fetch data

85
00:03:03,900 --> 00:03:05,520
from a packet or bishop to inspect some

86
00:03:05,520 --> 00:03:07,830
data you can do some arithmetic or grant

87
00:03:07,830 --> 00:03:10,020
or operators you can use the constants

88
00:03:10,020 --> 00:03:12,540
you can save it ok if some of this data

89
00:03:12,540 --> 00:03:14,970
is bigger or equal ordinal compared to

90
00:03:14,970 --> 00:03:17,690
this constant so all kinds of things so

91
00:03:17,690 --> 00:03:21,930
pretty powerful outside and they did of

92
00:03:21,930 --> 00:03:23,790
course think about security very Solars

93
00:03:23,790 --> 00:03:25,950
component called VPS verifier in it

94
00:03:25,950 --> 00:03:27,660
which or which will just I need to check

95
00:03:27,660 --> 00:03:29,550
the venue supplied program to Colonel

96
00:03:29,550 --> 00:03:31,320
David here's the program I want to get

97
00:03:31,320 --> 00:03:33,690
executed for myself head when we data

98
00:03:33,690 --> 00:03:36,120
comes it will try to verify the program

99
00:03:36,120 --> 00:03:37,980
is saying virtual checks about this

100
00:03:37,980 --> 00:03:40,110
since lengths correct our headers which

101
00:03:40,110 --> 00:03:42,180
you use correct language this PPF

102
00:03:42,180 --> 00:03:44,040
machine kind of instruction language and

103
00:03:44,040 --> 00:03:48,600
all this kind of thing so and our the

104
00:03:48,600 --> 00:03:50,880
next thing which this also very suggest

105
00:03:50,880 --> 00:03:52,380
compiler so the purpose of Shadid

106
00:03:52,380 --> 00:03:54,690
compiler is anything or we're talking

107
00:03:54,690 --> 00:03:56,250
about packet filtering so it has to be

108
00:03:56,250 --> 00:03:58,080
very fast when it works I mean it's not

109
00:03:58,080 --> 00:03:59,850
so important obviously for desktop sink

110
00:03:59,850 --> 00:04:01,890
liquid vertically on the network

111
00:04:01,890 --> 00:04:05,040
including tests have happen soft and in

112
00:04:05,040 --> 00:04:07,380
order to happen fast you can't write the

113
00:04:07,380 --> 00:04:09,480
code in the I don't see or anything so

114
00:04:09,480 --> 00:04:11,310
it has to be made of assembly to really

115
00:04:11,310 --> 00:04:12,240
execute it fast

116
00:04:12,240 --> 00:04:14,510
so let's going to introduce to our back

117
00:04:14,510 --> 00:04:17,760
with just-in-time compiler which are in

118
00:04:17,760 --> 00:04:20,399
front when you comply with programming

119
00:04:20,399 --> 00:04:22,620
SPDIF instructions it will update you

120
00:04:22,620 --> 00:04:24,120
will verify and everything is it will

121
00:04:24,120 --> 00:04:25,480
convert it to the native

122
00:04:25,480 --> 00:04:26,830
so if you're running on the intial

123
00:04:26,830 --> 00:04:29,410
processor is going to be x86 assembly

124
00:04:29,410 --> 00:04:31,390
are there many actually on many

125
00:04:31,390 --> 00:04:33,490
architectures head legit support for

126
00:04:33,490 --> 00:04:36,190
Brooks package Center and if you check

127
00:04:36,190 --> 00:04:37,720
out on your desktop like a bump or

128
00:04:37,720 --> 00:04:39,070
something the Street compiler is going

129
00:04:39,070 --> 00:04:40,660
to be turned off because you really

130
00:04:40,660 --> 00:04:43,090
don't do that much filtering but it's

131
00:04:43,090 --> 00:04:44,500
going to be turned on by default on all

132
00:04:44,500 --> 00:04:46,150
electrical equipment the cost is really

133
00:04:46,150 --> 00:04:47,730
important for them

134
00:04:47,730 --> 00:04:50,830
so to summarize the console works

135
00:04:50,830 --> 00:04:51,970
there's a simple diagram

136
00:04:51,970 --> 00:04:54,310
it's very simplified but it gives like

137
00:04:54,310 --> 00:04:56,350
computed introduction so we have a

138
00:04:56,350 --> 00:04:58,210
process which wants to have some

139
00:04:58,210 --> 00:05:00,010
filtering down in the socket so it'll

140
00:05:00,010 --> 00:05:02,230
create this PDF program it will write it

141
00:05:02,230 --> 00:05:05,080
in this VPS instructions language and it

142
00:05:05,080 --> 00:05:06,790
will it will create a socket write one

143
00:05:06,790 --> 00:05:08,350
just program to open for filter until

144
00:05:08,350 --> 00:05:11,290
happen it is not actually very cisco to

145
00:05:11,290 --> 00:05:13,600
touch this program to the socket and

146
00:05:13,600 --> 00:05:15,670
this is result of physical this program

147
00:05:15,670 --> 00:05:18,610
will get copied to a kernel space and it

148
00:05:18,610 --> 00:05:20,590
will first go from a verifier to do the

149
00:05:20,590 --> 00:05:22,390
checks and if it's doesn't pass the

150
00:05:22,390 --> 00:05:23,980
check for program is discarded into

151
00:05:23,980 --> 00:05:26,590
space gets an error thing didn't work

152
00:05:26,590 --> 00:05:29,170
and when are but if everything works and

153
00:05:29,170 --> 00:05:31,960
verify a proof program managed entity

154
00:05:31,960 --> 00:05:33,610
compilers enable it will go to g

155
00:05:33,610 --> 00:05:35,740
compiler which will convert this program

156
00:05:35,740 --> 00:05:37,540
and previously assembly

157
00:05:37,540 --> 00:05:39,670
arm i said the version of the program

158
00:05:39,670 --> 00:05:41,470
and this is what's going to be executed

159
00:05:41,470 --> 00:05:43,150
every time the database is first of it

160
00:05:43,150 --> 00:05:45,970
so pretty simple has been working for

161
00:05:45,970 --> 00:05:49,090
ages so what was done short kevin dean

162
00:05:49,090 --> 00:05:51,790
and 2012 is that she said it okay so you

163
00:05:51,790 --> 00:05:54,340
wanted to do is just prayer talk and she

164
00:05:54,340 --> 00:05:56,470
noticed that when you talk to Anna

165
00:05:56,470 --> 00:05:57,850
introduced to what kind of things you

166
00:05:57,850 --> 00:06:01,620
can do this we are in the VP of program

167
00:06:01,620 --> 00:06:03,970
you can use the code you can supply

168
00:06:03,970 --> 00:06:06,400
constants so they are to be tailored for

169
00:06:06,400 --> 00:06:08,230
example for comparison so you can load

170
00:06:08,230 --> 00:06:10,380
the constants in this machine

171
00:06:10,380 --> 00:06:13,750
instructions and you can actually supply

172
00:06:13,750 --> 00:06:15,550
payload instructions using this

173
00:06:15,550 --> 00:06:18,070
constants is sort of a key thing with a

174
00:06:18,070 --> 00:06:19,420
total course you use the number of

175
00:06:19,420 --> 00:06:21,010
different tricks to get it working like

176
00:06:21,010 --> 00:06:23,440
you needed to create it obviously Fujita

177
00:06:23,440 --> 00:06:25,450
prey to happen you need to create a lot

178
00:06:25,450 --> 00:06:27,490
of focus and since the limitation is

179
00:06:27,490 --> 00:06:29,410
that each circuit has can only have one

180
00:06:29,410 --> 00:06:31,990
filter attached so in order to spray

181
00:06:31,990 --> 00:06:34,660
your spray your space will sleep many

182
00:06:34,660 --> 00:06:36,280
many filters need to create many sockets

183
00:06:36,280 --> 00:06:37,520
various elements length

184
00:06:37,520 --> 00:06:39,470
unemployment circuits you can trade and

185
00:06:39,470 --> 00:06:41,240
he used receive deep passing trick which

186
00:06:41,240 --> 00:06:43,400
is like really nice trick to actually

187
00:06:43,400 --> 00:06:46,129
other commerce limitation and get enough

188
00:06:46,129 --> 00:06:49,220
circuits are actually 8000 focus he used

189
00:06:49,220 --> 00:06:51,530
that number it was no hard limit you can

190
00:06:51,530 --> 00:06:54,379
do even more or before before you run

191
00:06:54,379 --> 00:06:57,770
out of memory so but he used a thousand

192
00:06:57,770 --> 00:07:00,740
filters a thousand pocket and also have

193
00:07:00,740 --> 00:07:02,599
to refer you to our white paper so I'm

194
00:07:02,599 --> 00:07:04,639
not doesn't have time to go tough now

195
00:07:04,639 --> 00:07:06,590
also to have time to go for details it

196
00:07:06,590 --> 00:07:08,090
explained these details and wipe a

197
00:07:08,090 --> 00:07:10,610
friend get preferences so you can pick

198
00:07:10,610 --> 00:07:13,639
it up from there but I using this 8,000

199
00:07:13,639 --> 00:07:17,990
filters 8,000 sockets are he sprayed or

200
00:07:17,990 --> 00:07:20,240
she sprayed the memory various filters

201
00:07:20,240 --> 00:07:23,599
are loaded and he are we kind of how she

202
00:07:23,599 --> 00:07:25,310
try to make octopus very simple so she

203
00:07:25,310 --> 00:07:27,830
randomly get the page are from this

204
00:07:27,830 --> 00:07:30,319
black way she was expecting filter to be

205
00:07:30,319 --> 00:07:32,150
and I think is try to execute in

206
00:07:32,150 --> 00:07:33,979
beginning of a page and this is proof of

207
00:07:33,979 --> 00:07:36,259
concept to talk so it doesn't plug it it

208
00:07:36,259 --> 00:07:38,060
doesn't you know that I've really late

209
00:07:38,060 --> 00:07:39,469
ok we need to export from kernel

210
00:07:39,469 --> 00:07:41,690
vulnerability and get a jump to exact

211
00:07:41,690 --> 00:07:44,000
location you think your filter is or

212
00:07:44,000 --> 00:07:46,969
lucky hope your filter energy spring but

213
00:07:46,969 --> 00:07:50,330
are so for this purpose he didn't have

214
00:07:50,330 --> 00:07:52,099
he didn't have any vulnerability he just

215
00:07:52,099 --> 00:07:54,199
supplied his own kernel module which

216
00:07:54,199 --> 00:07:56,180
just run it stomach or anomalous this

217
00:07:56,180 --> 00:07:58,340
jump root system so just to make sure

218
00:07:58,340 --> 00:08:00,289
block this is not really because it's

219
00:08:00,289 --> 00:08:02,120
Easter demonstrated is free is not to

220
00:08:02,120 --> 00:08:03,650
demonstrate the kernel work mobility

221
00:08:03,650 --> 00:08:05,380
which unfortunately happen all the time

222
00:08:05,380 --> 00:08:08,419
so in order to show this the main part

223
00:08:08,419 --> 00:08:09,889
of the said this is how you passing

224
00:08:09,889 --> 00:08:13,430
payload using these are constants so you

225
00:08:13,430 --> 00:08:16,310
will see here left you have a 2d code so

226
00:08:16,310 --> 00:08:18,080
us October

227
00:08:18,080 --> 00:08:19,699
I mean developer you can just define

228
00:08:19,699 --> 00:08:21,349
this constants you can save it I want my

229
00:08:21,349 --> 00:08:23,840
constant you have this outside corn you

230
00:08:23,840 --> 00:08:25,969
have five by four constant you to define

231
00:08:25,969 --> 00:08:29,240
this constant to be this way and when

232
00:08:29,240 --> 00:08:31,069
everything is that when you pass this

233
00:08:31,069 --> 00:08:33,380
constant to it compiler it's just going

234
00:08:33,380 --> 00:08:35,390
to say okay I have to store it constant

235
00:08:35,390 --> 00:08:36,679
somewhere so I'm going to just move it

236
00:08:36,679 --> 00:08:38,839
to the ax so this is one of the default

237
00:08:38,839 --> 00:08:40,789
register so and it's going to generate

238
00:08:40,789 --> 00:08:42,589
this assembly instructions move this

239
00:08:42,589 --> 00:08:45,440
constant 3x and move another constant

240
00:08:45,440 --> 00:08:47,120
reaction this is code which is going to

241
00:08:47,120 --> 00:08:49,760
be actually and I mean it's a normal

242
00:08:49,760 --> 00:08:51,020
code it's nothing is wrong

243
00:08:51,020 --> 00:08:53,600
it's not malicious but there is nothing

244
00:08:53,600 --> 00:08:55,730
especially which is a very useful and

245
00:08:55,730 --> 00:08:57,110
excited six it's called unaligned

246
00:08:57,110 --> 00:09:00,920
execution so it's you can look up

247
00:09:00,920 --> 00:09:03,020
restore click statistics to start it

248
00:09:03,020 --> 00:09:04,730
from very small instructions women still

249
00:09:04,730 --> 00:09:06,350
support like this one byte instruction

250
00:09:06,350 --> 00:09:08,090
click notes and things like weather and

251
00:09:08,090 --> 00:09:09,920
some other interesting instructions but

252
00:09:09,920 --> 00:09:11,930
they support anything between one bites

253
00:09:11,930 --> 00:09:13,970
the fifteen vice so the instruction can

254
00:09:13,970 --> 00:09:17,150
be any size so it means that they have

255
00:09:17,150 --> 00:09:18,830
to support online instruction so you can

256
00:09:18,830 --> 00:09:21,130
start actual execution in any bite and

257
00:09:21,130 --> 00:09:23,600
if you see here in the example from

258
00:09:23,600 --> 00:09:25,850
right if you will start if you move flee

259
00:09:25,850 --> 00:09:27,680
if the additional instructions just

260
00:09:27,680 --> 00:09:30,230
throw one bite you get pretty different

261
00:09:30,230 --> 00:09:32,900
calm so you actually have three bites of

262
00:09:32,900 --> 00:09:34,790
instructions which is supplied for your

263
00:09:34,790 --> 00:09:36,440
payload which you can execute and you

264
00:09:36,440 --> 00:09:38,990
can freely choose and when you have

265
00:09:38,990 --> 00:09:41,150
these two instructions this is the eight

266
00:09:41,150 --> 00:09:44,030
left which are the B it comes from

267
00:09:44,030 --> 00:09:47,150
business on move so you can't control

268
00:09:47,150 --> 00:09:49,070
but if you wanted to put an age we

269
00:09:49,070 --> 00:09:51,380
defined ourselves here but it is it

270
00:09:51,380 --> 00:09:53,990
becomes just a simple test so it's a

271
00:09:53,990 --> 00:09:56,060
safe instruction you can walk over and

272
00:09:56,060 --> 00:09:57,350
you can get your tail out so you can

273
00:09:57,350 --> 00:09:59,480
have sellout instructions this place

274
00:09:59,480 --> 00:10:01,190
instructions a load instruction based

275
00:10:01,190 --> 00:10:02,900
instruction and you can keep going and

276
00:10:02,900 --> 00:10:04,640
building your payload so this is what

277
00:10:04,640 --> 00:10:07,970
what we've done in the past so anything

278
00:10:07,970 --> 00:10:10,550
is she got really crazy talk results and

279
00:10:10,550 --> 00:10:11,990
things like right so good community to

280
00:10:11,990 --> 00:10:15,560
respond and package past and two

281
00:10:15,560 --> 00:10:18,020
different responses so others some of

282
00:10:18,020 --> 00:10:19,610
you might knowledge share security which

283
00:10:19,610 --> 00:10:22,040
is no one upstream or Colonel hardening

284
00:10:22,040 --> 00:10:23,450
anything perhaps like many good

285
00:10:23,450 --> 00:10:26,240
different protections but as a result of

286
00:10:26,240 --> 00:10:27,680
with the talk well should release their

287
00:10:27,680 --> 00:10:30,200
own or protection to it so with and it

288
00:10:30,200 --> 00:10:32,690
was just saying but okay you can pass

289
00:10:32,690 --> 00:10:34,940
this payload or instruction is constant

290
00:10:34,940 --> 00:10:36,410
so let's just blend with courses

291
00:10:36,410 --> 00:10:38,720
logistics or it with some random garbage

292
00:10:38,720 --> 00:10:40,880
we generate random number to make sure

293
00:10:40,880 --> 00:10:42,620
you don't have this payload instructions

294
00:10:42,620 --> 00:10:44,330
and clear in your memory so your content

295
00:10:44,330 --> 00:10:46,910
appeared our upstream colonel ended a

296
00:10:46,910 --> 00:10:48,710
bit different way so I said with two K

297
00:10:48,710 --> 00:10:50,960
which is kind of form with this rubber

298
00:10:50,960 --> 00:10:52,900
complicate not not complicated but it

299
00:10:52,900 --> 00:10:55,640
makes the implemented pretty fast fix

300
00:10:55,640 --> 00:10:59,540
which was on so please talk when we

301
00:10:59,540 --> 00:11:02,120
looked here so it succeeded well because

302
00:11:02,120 --> 00:11:03,680
filter was always loaded in the

303
00:11:03,680 --> 00:11:04,460
beginning of space

304
00:11:04,460 --> 00:11:07,279
so it was just like just to wave it in

305
00:11:07,279 --> 00:11:08,990
the beginning so what we did now we said

306
00:11:08,990 --> 00:11:10,730
it okay let's not load filter in the

307
00:11:10,730 --> 00:11:12,710
beginning of a page let's choose random

308
00:11:12,710 --> 00:11:14,899
offset between the page the filter is

309
00:11:14,899 --> 00:11:17,180
going to be loaded so it's really chose

310
00:11:17,180 --> 00:11:18,920
tat the moment with memories alligators

311
00:11:18,920 --> 00:11:21,260
McCrone and let's fill everything

312
00:11:21,260 --> 00:11:23,529
outside of its filter let's feel versus

313
00:11:23,529 --> 00:11:26,649
or it's called a legal instructions

314
00:11:26,649 --> 00:11:28,880
architecture-specific legal instructions

315
00:11:28,880 --> 00:11:30,529
in case you see critics it's actually a

316
00:11:30,529 --> 00:11:32,270
very legal instruction it's 1 by 2 e 3

317
00:11:32,270 --> 00:11:34,930
instruction which is used for this on

318
00:11:34,930 --> 00:11:37,370
the back dropping so in if the buggy

319
00:11:37,370 --> 00:11:39,230
program more stuff you can you can get

320
00:11:39,230 --> 00:11:41,630
this interrupt entry interrupt so and

321
00:11:41,630 --> 00:11:43,970
and visit it this way so now it's

322
00:11:43,970 --> 00:11:45,890
actually much harder to do it I mean

323
00:11:45,890 --> 00:11:47,779
it's pretty hard to get where your

324
00:11:47,779 --> 00:11:49,310
filter is because you have to not just

325
00:11:49,310 --> 00:11:51,170
get the random page your filter is

326
00:11:51,170 --> 00:11:52,880
located but you'll have to get an offset

327
00:11:52,880 --> 00:11:55,100
and if you get wrongly you're going to

328
00:11:55,100 --> 00:11:57,260
be punished because our what happens

329
00:11:57,260 --> 00:11:59,300
when you execute in x86 case when you

330
00:11:59,300 --> 00:12:00,770
execute and three out of criminal

331
00:12:00,770 --> 00:12:03,140
context so if you get this interruption

332
00:12:03,140 --> 00:12:06,770
on entry saying okay it is a user space

333
00:12:06,770 --> 00:12:08,660
the program AC program is not ready to

334
00:12:08,660 --> 00:12:10,250
be it which is not the bugger a touch

335
00:12:10,250 --> 00:12:12,320
nothing probably just get killed and can

336
00:12:12,320 --> 00:12:14,480
continue but in current cases it's

337
00:12:14,480 --> 00:12:16,010
getting with interrupting and thinking

338
00:12:16,010 --> 00:12:18,650
okay I'm not bugging anything it's just

339
00:12:18,650 --> 00:12:20,839
results in kernel panic so so it means

340
00:12:20,839 --> 00:12:23,089
it like if you guessed wrongly kernel

341
00:12:23,089 --> 00:12:25,310
panic and you gamers or in a sense it of

342
00:12:25,310 --> 00:12:26,750
course the bashing will report and you

343
00:12:26,750 --> 00:12:29,600
can start guessing again but I mean you

344
00:12:29,600 --> 00:12:32,779
can't it's not very useful while doing

345
00:12:32,779 --> 00:12:34,670
it and upstream for that this is enough

346
00:12:34,670 --> 00:12:36,350
in a sense that I mean it's a good

347
00:12:36,350 --> 00:12:38,600
protection if you get to previous attack

348
00:12:38,600 --> 00:12:41,570
working and you you have fair amount of

349
00:12:41,570 --> 00:12:45,140
casing and everything to do and yeah and

350
00:12:45,140 --> 00:12:48,620
this is what what was done so then you

351
00:12:48,620 --> 00:12:50,329
started to work on our talk it was as

352
00:12:50,329 --> 00:12:52,010
much as we wanted to make an attack we

353
00:12:52,010 --> 00:12:53,870
worked partly this way also we worked

354
00:12:53,870 --> 00:12:57,050
within the protection project I work

355
00:12:57,050 --> 00:12:59,329
together with actually one of the BPF

356
00:12:59,329 --> 00:13:01,310
maintainer who was working on developing

357
00:13:01,310 --> 00:13:03,529
the similar solution basically share

358
00:13:03,529 --> 00:13:05,959
security solution and blinding constants

359
00:13:05,959 --> 00:13:07,760
but we wanted to make sure I don't know

360
00:13:07,760 --> 00:13:09,290
if any one of you try to get any

361
00:13:09,290 --> 00:13:10,880
security features an upstream Linux

362
00:13:10,880 --> 00:13:12,470
kernel usually when you try to kind of

363
00:13:12,470 --> 00:13:14,450
do anything with what you have to show

364
00:13:14,450 --> 00:13:16,190
this through okay so if you don't if you

365
00:13:16,190 --> 00:13:17,390
just say that or kind of your hairy

366
00:13:17,390 --> 00:13:18,000
sister

367
00:13:18,000 --> 00:13:19,770
the possibility of a talk we will kick

368
00:13:19,770 --> 00:13:21,720
you out and away with your coat

369
00:13:21,720 --> 00:13:23,820
but if you show it a talk is real but

370
00:13:23,820 --> 00:13:25,590
you took on a bit different so this was

371
00:13:25,590 --> 00:13:27,480
a point of our developing our talks who

372
00:13:27,480 --> 00:13:28,920
wanted to show what mrs. actually still

373
00:13:28,920 --> 00:13:30,390
real so we still need a better

374
00:13:30,390 --> 00:13:32,310
protection and let's help create a

375
00:13:32,310 --> 00:13:35,580
terrific work to make sure that they get

376
00:13:35,580 --> 00:13:36,930
the purchase and where needed

377
00:13:36,930 --> 00:13:39,450
so we when I started to Facebook at how

378
00:13:39,450 --> 00:13:41,490
they talked about since you know filters

379
00:13:41,490 --> 00:13:44,520
random and everything it's like entry so

380
00:13:44,520 --> 00:13:46,620
the further the p-value approach was oh

381
00:13:46,620 --> 00:13:49,170
let's just grow filter in because

382
00:13:49,170 --> 00:13:51,090
there's no very good limits on how much

383
00:13:51,090 --> 00:13:53,370
the filter this tentative program can be

384
00:13:53,370 --> 00:13:56,700
but it can easily grow a block over one

385
00:13:56,700 --> 00:13:58,770
page and when girls over one page you

386
00:13:58,770 --> 00:14:00,660
can see like the simplified where so you

387
00:14:00,660 --> 00:14:03,000
have the filters charging and beginning

388
00:14:03,000 --> 00:14:05,100
of a pages I mean if you blow for

389
00:14:05,100 --> 00:14:06,840
example just to she'll take a further

390
00:14:06,840 --> 00:14:08,610
program which is lesson two pages when

391
00:14:08,610 --> 00:14:10,590
you have a filter at least in - four

392
00:14:10,590 --> 00:14:14,160
cases or it's from beginning and like if

393
00:14:14,160 --> 00:14:16,980
you payload and like alignments and

394
00:14:16,980 --> 00:14:18,450
knobs and stuff you can you can play

395
00:14:18,450 --> 00:14:20,610
with your payload to get better or worse

396
00:14:20,610 --> 00:14:21,900
results but you can pretty safely

397
00:14:21,900 --> 00:14:23,550
disappear from the beginning of the page

398
00:14:23,550 --> 00:14:26,190
now so this is what you tried first so

399
00:14:26,190 --> 00:14:28,230
the gift a random page similarly but

400
00:14:28,230 --> 00:14:29,970
trying to institute the Somerset's in

401
00:14:29,970 --> 00:14:32,960
the beginning you can find details and

402
00:14:32,960 --> 00:14:35,670
it's going to actually work so this way

403
00:14:35,670 --> 00:14:37,760
you can actually get it working and

404
00:14:37,760 --> 00:14:40,500
unfortunately this success rate is not

405
00:14:40,500 --> 00:14:42,570
very high here because I mean they still

406
00:14:42,570 --> 00:14:45,030
have this half cases when when you jump

407
00:14:45,030 --> 00:14:48,360
to this entry and then things go badly

408
00:14:48,360 --> 00:14:51,240
so it's it wasn't working as good just

409
00:14:51,240 --> 00:14:54,120
like you would like a tour our second

410
00:14:54,120 --> 00:14:55,770
approach is totally different and this

411
00:14:55,770 --> 00:14:58,620
is what got us the best is also and I

412
00:14:58,620 --> 00:15:00,360
haven't I started to look how the filter

413
00:15:00,360 --> 00:15:02,010
is actually how the memory is allocated

414
00:15:02,010 --> 00:15:05,730
for the filter I don't know why but it

415
00:15:05,730 --> 00:15:08,700
was done in a way that it will start it

416
00:15:08,700 --> 00:15:10,950
will kind of and we have a code and they

417
00:15:10,950 --> 00:15:12,750
are paper and stuff you can take a look

418
00:15:12,750 --> 00:15:15,870
so so how to allocate it it will if you

419
00:15:15,870 --> 00:15:18,480
filter size is quite close to the page

420
00:15:18,480 --> 00:15:20,100
size it once the size memory doesn't

421
00:15:20,100 --> 00:15:21,930
want to waste kernel memory remember

422
00:15:21,930 --> 00:15:24,120
it's kind of not memory to be wasted so

423
00:15:24,120 --> 00:15:26,400
it wouldn't it will try to allocate

424
00:15:26,400 --> 00:15:28,560
researcher in a way that it will only

425
00:15:28,560 --> 00:15:30,430
perfect with 120

426
00:15:30,430 --> 00:15:32,920
random bytes in beginning at most of

427
00:15:32,920 --> 00:15:34,240
course it's too random so it's called

428
00:15:34,240 --> 00:15:37,839
zero to the 128 so if you allocate your

429
00:15:37,839 --> 00:15:40,420
filter the size of a spade size minus

430
00:15:40,420 --> 00:15:42,640
one hydrated - four visited fourth

431
00:15:42,640 --> 00:15:45,070
header wonderful header struct where

432
00:15:45,070 --> 00:15:47,680
so you can force the filter to be under

433
00:15:47,680 --> 00:15:49,810
one page and you force your size of your

434
00:15:49,810 --> 00:15:52,270
int hole so it's just random whole to be

435
00:15:52,270 --> 00:15:56,140
maximum of 100 32 bytes it's from 0 to 1

436
00:15:56,140 --> 00:15:58,959
how to 32 bytes but if you know Maxim

437
00:15:58,959 --> 00:16:01,750
you can easily jump forward and this is

438
00:16:01,750 --> 00:16:03,730
what we did so we just made our filter

439
00:16:03,730 --> 00:16:06,670
of the size of the field actually hole

440
00:16:06,670 --> 00:16:09,580
filters just note to make sure like you

441
00:16:09,580 --> 00:16:11,620
don't have to I mean you have when you

442
00:16:11,620 --> 00:16:13,209
jump you're pretty much always jump at

443
00:16:13,209 --> 00:16:14,709
the right place and you can execute well

444
00:16:14,709 --> 00:16:17,500
and and the jump is still the same thing

445
00:16:17,500 --> 00:16:19,480
we have 5,000 soldiers you can get

446
00:16:19,480 --> 00:16:22,060
random page to jump and you jump over

447
00:16:22,060 --> 00:16:25,690
the maximum mode always to any always

448
00:16:25,690 --> 00:16:27,459
safely landing with payload and this

449
00:16:27,459 --> 00:16:30,490
works extremely well and our maybe up

450
00:16:30,490 --> 00:16:36,490
and try to demonstrate this see I'll

451
00:16:36,490 --> 00:16:39,220
just bring this I have a VM running here

452
00:16:39,220 --> 00:16:47,320
so so this is just normal so I can see

453
00:16:47,320 --> 00:16:52,570
welcome here to here so this is just

454
00:16:52,570 --> 00:16:55,930
normal bunch of virtual machines so they

455
00:16:55,930 --> 00:16:59,050
are normal the other here so whatever is

456
00:16:59,050 --> 00:17:02,740
our milena and and have our program here

457
00:17:02,740 --> 00:17:08,140
just very simple please so they're going

458
00:17:08,140 --> 00:17:12,490
to do some one play step which is needed

459
00:17:12,490 --> 00:17:14,339
on I'll explain what's happening there

460
00:17:14,339 --> 00:17:17,800
so if you can see it well so I mentioned

461
00:17:17,800 --> 00:17:19,059
the traditional attack because it's

462
00:17:19,059 --> 00:17:20,500
proof of concept to talk so they're not

463
00:17:20,500 --> 00:17:22,569
actually using any exploit here so the

464
00:17:22,569 --> 00:17:23,949
funds were vulnerable it is so we need

465
00:17:23,949 --> 00:17:26,050
to still load our kernel module which is

466
00:17:26,050 --> 00:17:28,000
the only thing it does is just jump to

467
00:17:28,000 --> 00:17:31,120
the place or we asked its job and it can

468
00:17:31,120 --> 00:17:32,800
do an inspection it's really trying to

469
00:17:32,800 --> 00:17:35,500
simulate vulnerability and then another

470
00:17:35,500 --> 00:17:37,390
thing to do is between able the our

471
00:17:37,390 --> 00:17:41,530
treat so this BPF street enables just

472
00:17:41,530 --> 00:17:43,179
enable suited compiler because this is

473
00:17:43,179 --> 00:17:43,870
an typical

474
00:17:43,870 --> 00:17:45,430
bondo is disabled that kind of been able

475
00:17:45,430 --> 00:17:47,440
to network equipment and the last thing

476
00:17:47,440 --> 00:17:49,120
to do with this is a bit of cheating we

477
00:17:49,120 --> 00:17:51,520
kind of enable this keep enough many of

478
00:17:51,520 --> 00:17:54,250
you know but this key pto restrict this

479
00:17:54,250 --> 00:17:57,309
using so misused our kernel to hide the

480
00:17:57,309 --> 00:18:00,400
the location of kernel symbols but our

481
00:18:00,400 --> 00:18:02,740
video it is way here in the sense that

482
00:18:02,740 --> 00:18:05,559
we just just works like from runtime but

483
00:18:05,559 --> 00:18:07,630
are you can do a number of things to not

484
00:18:07,630 --> 00:18:10,260
to do this so first of all this our

485
00:18:10,260 --> 00:18:12,220
examples we were doing with such as

486
00:18:12,220 --> 00:18:14,050
beginning of this year you can still

487
00:18:14,050 --> 00:18:16,120
just view these addresses they don't

488
00:18:16,120 --> 00:18:17,679
change between vm so if you're running

489
00:18:17,679 --> 00:18:20,080
in typical vm typical thing typical

490
00:18:20,080 --> 00:18:21,820
kernel version and stuff you can just

491
00:18:21,820 --> 00:18:23,950
preview comes pre hard code you can

492
00:18:23,950 --> 00:18:25,900
query version in pre hard code with

493
00:18:25,900 --> 00:18:27,880
numbers and when for example this year's

494
00:18:27,880 --> 00:18:30,100
black hard to USA they have shown how

495
00:18:30,100 --> 00:18:32,860
you can even just by wirelessly such as

496
00:18:32,860 --> 00:18:34,240
this how you can just be to the gate

497
00:18:34,240 --> 00:18:36,730
location the same kernel symbol so there

498
00:18:36,730 --> 00:18:38,440
is a way and people know how to overcome

499
00:18:38,440 --> 00:18:40,240
this the kind of video this cheating

500
00:18:40,240 --> 00:18:41,770
because it's not so important for this

501
00:18:41,770 --> 00:18:43,000
attack we just want to show which in

502
00:18:43,000 --> 00:18:45,730
spray works but this is like this is the

503
00:18:45,730 --> 00:18:47,980
preparation for raid sort of damage

504
00:18:47,980 --> 00:18:50,830
preparation and enough half compiled the

505
00:18:50,830 --> 00:18:54,190
faculty as its compiled so we just start

506
00:18:54,190 --> 00:18:56,170
startup program it's going to create a

507
00:18:56,170 --> 00:18:59,679
socket so and it's getting and you can

508
00:18:59,679 --> 00:19:01,630
see is getting it pretty fast so you can

509
00:19:01,630 --> 00:19:04,059
see between ow the none on the root and

510
00:19:04,059 --> 00:19:07,090
there and I can actually be done in a

511
00:19:07,090 --> 00:19:07,780
way that I can

512
00:19:07,780 --> 00:19:09,670
after close the shell here it will kind

513
00:19:09,670 --> 00:19:11,110
of restart the whole thing from the

514
00:19:11,110 --> 00:19:13,840
beginning so and I can do it actually

515
00:19:13,840 --> 00:19:17,110
many times it's just look it's

516
00:19:17,110 --> 00:19:18,790
eventually hands because very still are

517
00:19:18,790 --> 00:19:22,770
way I mean you can still jump to the arm

518
00:19:22,770 --> 00:19:25,210
even will we make sure that the jump all

519
00:19:25,210 --> 00:19:26,710
of the entry section you can still jump

520
00:19:26,710 --> 00:19:28,240
to the page we just have our filter

521
00:19:28,240 --> 00:19:30,820
allocated tool and I'm in with some

522
00:19:30,820 --> 00:19:33,880
random an allocated garbage and but when

523
00:19:33,880 --> 00:19:35,679
I mean you can just mess up refer to

524
00:19:35,679 --> 00:19:37,030
store something simple acute something

525
00:19:37,030 --> 00:19:38,470
which is valid instruction this is

526
00:19:38,470 --> 00:19:40,390
actually invalid instruction manual

527
00:19:40,390 --> 00:19:42,340
quite okay because it can survive it but

528
00:19:42,340 --> 00:19:44,920
if it's on in wallet or is it valid

529
00:19:44,920 --> 00:19:46,330
instruction but messes up with some

530
00:19:46,330 --> 00:19:48,970
registers when when you might not get it

531
00:19:48,970 --> 00:19:50,860
so I can still keep doing this I mean

532
00:19:50,860 --> 00:19:53,740
item elevation honey but just to show

533
00:19:53,740 --> 00:19:55,360
with like let's hope you can serve as

534
00:19:55,360 --> 00:19:56,920
probability of a photographer is

535
00:19:56,920 --> 00:19:57,470
hundreds

536
00:19:57,470 --> 00:20:00,380
and also for what you can after running

537
00:20:00,380 --> 00:20:02,330
this for a while you get get it pretty

538
00:20:02,330 --> 00:20:04,070
fast and it dries it really goes through

539
00:20:04,070 --> 00:20:07,490
with all memory spaces kind of model

540
00:20:07,490 --> 00:20:09,740
memory mapping space where the filters

541
00:20:09,740 --> 00:20:11,690
are located and just tries to get around

542
00:20:11,690 --> 00:20:15,440
in companies it's pretty fun so we are

543
00:20:15,440 --> 00:20:17,299
now maybe since have only ten minutes

544
00:20:17,299 --> 00:20:20,570
left I will go back to finish the slide

545
00:20:20,570 --> 00:20:28,039
to do the tissue lagoon familiars see

546
00:20:28,039 --> 00:20:29,990
how much so we need occasion so of

547
00:20:29,990 --> 00:20:31,700
course as I said so we will work in

548
00:20:31,700 --> 00:20:33,049
collaboration with one of the VP of

549
00:20:33,049 --> 00:20:35,419
maintainer Daniel Bergman he has been

550
00:20:35,419 --> 00:20:38,150
extremely useful and we had really great

551
00:20:38,150 --> 00:20:39,740
discussions about how the filter works

552
00:20:39,740 --> 00:20:41,840
or how the Berkley packet filter works

553
00:20:41,840 --> 00:20:44,419
and how kind of to understand inside

554
00:20:44,419 --> 00:20:46,970
because it's not so I mean all core

555
00:20:46,970 --> 00:20:48,590
components are not easy but this one is

556
00:20:48,590 --> 00:20:50,480
not particularly easy to get accustomed

557
00:20:50,480 --> 00:20:53,150
if you're new and and this substance

558
00:20:53,150 --> 00:20:55,220
Lancome community is something which was

559
00:20:55,220 --> 00:20:57,470
it's just one of members a series of

560
00:20:57,470 --> 00:20:59,480
commands that you are done which make

561
00:20:59,480 --> 00:21:01,610
sure it's now blinding is done so you

562
00:21:01,610 --> 00:21:03,500
can't pass any more payload uses are

563
00:21:03,500 --> 00:21:06,530
using in constants and it's pretty safe

564
00:21:06,530 --> 00:21:10,970
now for this compiler so our it to us

565
00:21:10,970 --> 00:21:13,010
merged if I remember right and four

566
00:21:13,010 --> 00:21:16,429
point seven so or if you're using like

567
00:21:16,429 --> 00:21:17,809
refusing and you networking equipment

568
00:21:17,809 --> 00:21:19,159
with cheat so you want to make sure

569
00:21:19,159 --> 00:21:20,720
either you upgrade to the kernel on your

570
00:21:20,720 --> 00:21:22,909
back board whatever but because this is

571
00:21:22,909 --> 00:21:24,470
this is really important because you can

572
00:21:24,470 --> 00:21:26,360
save it and virtually all our code is

573
00:21:26,360 --> 00:21:26,960
released

574
00:21:26,960 --> 00:21:28,520
so perhaps represent your evenings

575
00:21:28,520 --> 00:21:30,200
between so you can see our code and

576
00:21:30,200 --> 00:21:31,070
anyone can do this

577
00:21:31,070 --> 00:21:34,070
unfortunately given with a finally

578
00:21:34,070 --> 00:21:35,330
vulnerability of exploitable

579
00:21:35,330 --> 00:21:36,740
vulnerability deserve a jump in the

580
00:21:36,740 --> 00:21:39,140
kernel but unfortunately this is pretty

581
00:21:39,140 --> 00:21:41,240
much coming over a year and not even one

582
00:21:41,240 --> 00:21:43,789
of them when another just knife six was

583
00:21:43,789 --> 00:21:45,679
was done also in beginning this year are

584
00:21:45,679 --> 00:21:48,200
I mentioned this trick which you can

585
00:21:48,200 --> 00:21:49,730
pass this file descriptors to go to

586
00:21:49,730 --> 00:21:51,650
overcome the limits so which is now

587
00:21:51,650 --> 00:21:53,809
fixed also so we're also one of the

588
00:21:53,809 --> 00:21:57,049
companies link we're on it doesn't fully

589
00:21:57,049 --> 00:21:58,820
mitigate it because we tried it on the

590
00:21:58,820 --> 00:22:01,070
our kernel which has this fix and you

591
00:22:01,070 --> 00:22:02,419
can only go up to seven hundred

592
00:22:02,419 --> 00:22:06,110
something 25 socket but it's actually

593
00:22:06,110 --> 00:22:07,880
pretty enough for approach to disagree

594
00:22:07,880 --> 00:22:10,330
as well so is it you don't need my name

595
00:22:10,330 --> 00:22:12,670
so but it's just nothing that it got six

596
00:22:12,670 --> 00:22:14,800
tentacles very small kernel address

597
00:22:14,800 --> 00:22:17,650
space organization coming which is some

598
00:22:17,650 --> 00:22:19,360
of us was ordering four point eight and

599
00:22:19,360 --> 00:22:22,390
work with going and are and it's going

600
00:22:22,390 --> 00:22:24,400
to help greatly and I wanted to mention

601
00:22:24,400 --> 00:22:26,710
this Colonel self-protection project to

602
00:22:26,710 --> 00:22:28,780
a tree of working and with work words as

603
00:22:28,780 --> 00:22:30,970
mailing list Viki I can go check and

604
00:22:30,970 --> 00:22:33,040
it's pretty nice because I mean many

605
00:22:33,040 --> 00:22:34,540
people like see another security

606
00:22:34,540 --> 00:22:35,410
conference they talk about

607
00:22:35,410 --> 00:22:38,170
vulnerabilities which I mean we say

608
00:22:38,170 --> 00:22:39,730
McIver found with vulnerability and

609
00:22:39,730 --> 00:22:41,350
random godsakes and when it slowly would

610
00:22:41,350 --> 00:22:42,760
stick somewhere else but they're going

611
00:22:42,760 --> 00:22:44,920
to come anyway so instead of just trying

612
00:22:44,920 --> 00:22:46,420
to fix vulnerabilities are trying to

613
00:22:46,420 --> 00:22:47,860
think of the measures which will prevent

614
00:22:47,860 --> 00:22:49,750
certain classes if explode from ever

615
00:22:49,750 --> 00:22:52,360
succeeding unless very important or when

616
00:22:52,360 --> 00:22:53,620
there are some other searchers were

617
00:22:53,620 --> 00:22:56,170
trying to say okay we please this sort

618
00:22:56,170 --> 00:22:58,000
of this kind of the road research paper

619
00:22:58,000 --> 00:23:00,100
white paper has proved comfortable with

620
00:23:00,100 --> 00:23:02,260
particular hardening mechanism but it's

621
00:23:02,260 --> 00:23:04,810
never good suction colonel so and this

622
00:23:04,810 --> 00:23:06,580
soup lately you can show up and discuss

623
00:23:06,580 --> 00:23:09,430
the ideas and show the code and show and

624
00:23:09,430 --> 00:23:11,530
if you're interesting writing on exploit

625
00:23:11,530 --> 00:23:13,270
for example you can also you can

626
00:23:13,270 --> 00:23:16,420
contribute for exploit also needed so I

627
00:23:16,420 --> 00:23:18,850
really urge you to check the our mailing

628
00:23:18,850 --> 00:23:20,620
list and it's happening right now and

629
00:23:20,620 --> 00:23:22,210
there plenty of interesting projects

630
00:23:22,210 --> 00:23:26,800
where so that's about all for today so

631
00:23:26,800 --> 00:23:29,380
again white paper has much more her for

632
00:23:29,380 --> 00:23:31,030
the five minutes left open compute your

633
00:23:31,030 --> 00:23:34,260
time so I can take what questions now

634
00:23:34,260 --> 00:23:40,630
for any hope works play the truck simply

635
00:23:40,630 --> 00:23:43,000
and also dated even if you never heard

636
00:23:43,000 --> 00:23:45,700
about this component that you can get

637
00:23:45,700 --> 00:23:48,130
high level understanding in female more

638
00:23:48,130 --> 00:23:50,350
details you can get it from a paper or

639
00:23:50,350 --> 00:23:52,990
from me links to happen code isn't read

640
00:23:52,990 --> 00:23:57,640
help so so so no more questions thank

641
00:23:57,640 --> 00:23:59,180
you

642
00:23:59,180 --> 00:24:04,869
[Applause]

