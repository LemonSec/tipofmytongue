1
00:00:00,000 --> 00:00:02,820
all right I guess we're beginning hi

2
00:00:02,820 --> 00:00:03,540
everybody

3
00:00:03,540 --> 00:00:05,700
before we start is there anybody from

4
00:00:05,700 --> 00:00:07,740
the NSO group in the audience can you

5
00:00:07,740 --> 00:00:08,550
raise your hand

6
00:00:08,550 --> 00:00:12,120
anybody all right just checking so my

7
00:00:12,120 --> 00:00:14,009
name is Seth and I'm here with my

8
00:00:14,009 --> 00:00:16,230
colleagues max and Andrew and we're part

9
00:00:16,230 --> 00:00:18,119
of the security research and response

10
00:00:18,119 --> 00:00:20,730
team at lookout and we led the team's

11
00:00:20,730 --> 00:00:22,710
investigation of what we're going to

12
00:00:22,710 --> 00:00:25,109
show you here today so my background is

13
00:00:25,109 --> 00:00:27,390
in analyzing targeted malware attacks

14
00:00:27,390 --> 00:00:29,369
looking at things like infrastructure

15
00:00:29,369 --> 00:00:31,920
and threat hunting max led the analysis

16
00:00:31,920 --> 00:00:34,850
of the Trident iOS exploits and

17
00:00:34,850 --> 00:00:36,480
determining the Associated

18
00:00:36,480 --> 00:00:38,790
vulnerabilities and Andrew took the lead

19
00:00:38,790 --> 00:00:40,829
on analysis of the iOS surveillance

20
00:00:40,829 --> 00:00:42,719
software called egg assist that we'll be

21
00:00:42,719 --> 00:00:46,680
talking about today to start just want

22
00:00:46,680 --> 00:00:49,320
to show a video of what this looks like

23
00:00:49,320 --> 00:00:53,370
in action here's an iOS device and we've

24
00:00:53,370 --> 00:00:56,879
made a check for some IO cs4 Pegasus and

25
00:00:56,879 --> 00:01:00,690
they are not present on the device we're

26
00:01:00,690 --> 00:01:01,949
going to show what the infection looks

27
00:01:01,949 --> 00:01:08,130
like on a standard iOS home so you get a

28
00:01:08,130 --> 00:01:11,070
text message with a link in it and you

29
00:01:11,070 --> 00:01:13,729
click on the link Safari comes up and

30
00:01:13,729 --> 00:01:16,140
something is going on what's going on we

31
00:01:16,140 --> 00:01:19,710
don't know Safari crashes so load it

32
00:01:19,710 --> 00:01:21,659
back up again and there's no evidence

33
00:01:21,659 --> 00:01:24,810
that anybody ever went to link but then

34
00:01:24,810 --> 00:01:27,020
if we go back to check for the IOC s

35
00:01:27,020 --> 00:01:29,430
they're all there the device has been

36
00:01:29,430 --> 00:01:31,619
completely compromised remote jailbreak

37
00:01:31,619 --> 00:01:33,869
without any indication that anything

38
00:01:33,869 --> 00:01:38,640
happened so what did happen

39
00:01:38,640 --> 00:01:41,220
that was just an iPhone being hit with

40
00:01:41,220 --> 00:01:43,439
the Trident exploits a collection of

41
00:01:43,439 --> 00:01:46,100
free zero-day previously exploits that

42
00:01:46,100 --> 00:01:48,829
were used to install a live copy of

43
00:01:48,829 --> 00:01:51,000
Pegasus surveillance software on the

44
00:01:51,000 --> 00:01:54,329
device so one click on that link is all

45
00:01:54,329 --> 00:01:54,750
it takes

46
00:01:54,750 --> 00:01:56,189
for your phone to be completely

47
00:01:56,189 --> 00:01:58,170
compromised and turn into a surveillance

48
00:01:58,170 --> 00:02:00,409
system

49
00:02:01,829 --> 00:02:05,369
and that's Pegasus by the NSO group

50
00:02:05,369 --> 00:02:07,229
which is why I asked before anybody is

51
00:02:07,229 --> 00:02:09,119
here please raise your hand

52
00:02:09,119 --> 00:02:11,099
but NSO isn't alone in making this kind

53
00:02:11,099 --> 00:02:12,930
of surveillance software you might have

54
00:02:12,930 --> 00:02:15,420
heard of some other software and the

55
00:02:15,420 --> 00:02:17,790
companies that make it in this area so

56
00:02:17,790 --> 00:02:20,310
there's finfisher by gamma RCS da Vinci

57
00:02:20,310 --> 00:02:23,340
Galileo by hacking team and the software

58
00:02:23,340 --> 00:02:25,680
sold is lawful intercept for use by

59
00:02:25,680 --> 00:02:27,959
governments law enforcement agencies

60
00:02:27,959 --> 00:02:29,670
performing legally authorized

61
00:02:29,670 --> 00:02:32,610
surveillance so this isn't new I mean

62
00:02:32,610 --> 00:02:34,829
FBI was doing magic lantern back in at

63
00:02:34,829 --> 00:02:37,380
least 2000 for example but it's a more

64
00:02:37,380 --> 00:02:39,810
recent development that independent

65
00:02:39,810 --> 00:02:41,280
software companies are selling

66
00:02:41,280 --> 00:02:42,989
surveillance software to any law

67
00:02:42,989 --> 00:02:44,870
enforcement or military organization

68
00:02:44,870 --> 00:02:47,069
including government's with well-known

69
00:02:47,069 --> 00:02:49,380
histories full of human rights abuses

70
00:02:49,380 --> 00:02:51,269
who don't hesitate to use this

71
00:02:51,269 --> 00:02:53,790
technology against activists journalists

72
00:02:53,790 --> 00:02:57,450
and human rights workers so that's a

73
00:02:57,450 --> 00:02:59,519
good lead-in to how we ended up with a

74
00:02:59,519 --> 00:03:01,950
copy of the Pegasus malware and the

75
00:03:01,950 --> 00:03:03,660
Trident exploits it used to install

76
00:03:03,660 --> 00:03:06,450
itself was it discovered as it was being

77
00:03:06,450 --> 00:03:09,329
used to spy on organized crime ring was

78
00:03:09,329 --> 00:03:11,190
it discovered when it was being used to

79
00:03:11,190 --> 00:03:14,040
track a terrorist threat unfortunately

80
00:03:14,040 --> 00:03:17,220
not quite meet ahmed mansour he's based

81
00:03:17,220 --> 00:03:19,200
in the UAE and he's known for his work

82
00:03:19,200 --> 00:03:21,569
as a human rights defender he's a

83
00:03:21,569 --> 00:03:23,069
recipient of the Martin annals award

84
00:03:23,069 --> 00:03:25,319
sometimes called the Nobel Prize for

85
00:03:25,319 --> 00:03:28,200
Human Rights and he's been arrested in

86
00:03:28,200 --> 00:03:30,480
jailed for being a supporting a

87
00:03:30,480 --> 00:03:32,849
pro-democracy petition in the UAE and

88
00:03:32,849 --> 00:03:35,849
he's banned from travel outside there on

89
00:03:35,849 --> 00:03:38,220
August 10 this year Mensa received a

90
00:03:38,220 --> 00:03:40,470
text message with a link claiming to

91
00:03:40,470 --> 00:03:42,389
have information on Emiratis being

92
00:03:42,389 --> 00:03:44,760
tortured in state prisons something

93
00:03:44,760 --> 00:03:46,950
that's pretty relevant to the work that

94
00:03:46,950 --> 00:03:49,709
he's doing and he received another text

95
00:03:49,709 --> 00:03:51,989
message the next day but he knew what to

96
00:03:51,989 --> 00:03:54,299
do fortunately on this is not the first

97
00:03:54,299 --> 00:03:58,769
time he was targeted and his citizen lab

98
00:03:58,769 --> 00:04:00,900
for this reason calls him the million

99
00:04:00,900 --> 00:04:03,269
dollar dissident so not only has he been

100
00:04:03,269 --> 00:04:06,750
targeted by Pegasus in 2012 he was

101
00:04:06,750 --> 00:04:11,250
targeted by hacking teams RCS in 2011 he

102
00:04:11,250 --> 00:04:13,259
was targeted by gammas finfisher and

103
00:04:13,259 --> 00:04:15,110
he's also been target

104
00:04:15,110 --> 00:04:18,140
goodbye extreme rat and spy net rat and

105
00:04:18,140 --> 00:04:21,890
NJ rat I think those are all 2013 so he

106
00:04:21,890 --> 00:04:24,170
gets a lot of this stuff somebody out

107
00:04:24,170 --> 00:04:26,480
there has it out for him and they're not

108
00:04:26,480 --> 00:04:28,580
afraid of throwing a lot of money at

109
00:04:28,580 --> 00:04:33,170
this problem to try to solve it the

110
00:04:33,170 --> 00:04:34,880
citizen lab I just mentioned is a

111
00:04:34,880 --> 00:04:36,530
research group at the Munk school of

112
00:04:36,530 --> 00:04:38,330
global affairs at the University of

113
00:04:38,330 --> 00:04:40,820
Toronto and focuses on the intersection

114
00:04:40,820 --> 00:04:43,010
of Technology and human rights a little

115
00:04:43,010 --> 00:04:44,420
bit of full disclosure I worked there

116
00:04:44,420 --> 00:04:46,220
doing research for four years primarily

117
00:04:46,220 --> 00:04:47,720
looking at politically motivated

118
00:04:47,720 --> 00:04:50,240
targeted attacks against human rights

119
00:04:50,240 --> 00:04:53,150
organizations and individuals men sort

120
00:04:53,150 --> 00:04:54,919
has worked previously with researchers

121
00:04:54,919 --> 00:04:57,380
at the citizen lab bill mark Zack and

122
00:04:57,380 --> 00:05:00,110
John Scott Railton so when he received

123
00:05:00,110 --> 00:05:02,210
those links he knew what to do and he

124
00:05:02,210 --> 00:05:05,000
sent them to citizen lab researchers for

125
00:05:05,000 --> 00:05:07,940
analysis bill and John wrote a really

126
00:05:07,940 --> 00:05:10,580
great report if you're interested just

127
00:05:10,580 --> 00:05:11,960
do a search for citizen lab

128
00:05:11,960 --> 00:05:14,120
million-dollar dissident and that

129
00:05:14,120 --> 00:05:15,740
provides very detailed background

130
00:05:15,740 --> 00:05:18,950
context and information on the command

131
00:05:18,950 --> 00:05:20,450
and control infrastructure used here and

132
00:05:20,450 --> 00:05:22,880
threat actor attribution where they

133
00:05:22,880 --> 00:05:25,100
identified Pegasus and the NSO group as

134
00:05:25,100 --> 00:05:27,710
a surveillance where vendor the research

135
00:05:27,710 --> 00:05:28,640
team would look out

136
00:05:28,640 --> 00:05:30,290
we received the link in the initial

137
00:05:30,290 --> 00:05:32,780
sample from citizen lab and we worked on

138
00:05:32,780 --> 00:05:34,700
a deep dive technical analysis of the

139
00:05:34,700 --> 00:05:36,890
vulnerabilities the exploits and the

140
00:05:36,890 --> 00:05:41,300
Pegasus malware itself so what did

141
00:05:41,300 --> 00:05:43,280
citizen lab find and how did they figure

142
00:05:43,280 --> 00:05:46,190
out that this is an SOS Pegasus you

143
00:05:46,190 --> 00:05:47,720
should go read their report but the

144
00:05:47,720 --> 00:05:49,580
quick version is that Bill and John had

145
00:05:49,580 --> 00:05:51,919
been working on another report into

146
00:05:51,919 --> 00:05:54,200
stealth Falcon which is what they call a

147
00:05:54,200 --> 00:05:56,750
threat actor targeting many UAE

148
00:05:56,750 --> 00:05:58,400
activists and dissidents including

149
00:05:58,400 --> 00:06:01,130
months or so and he was sieved those

150
00:06:01,130 --> 00:06:03,740
texts John and Bill scanned the internet

151
00:06:03,740 --> 00:06:06,050
for fingerprints of specific behaviors

152
00:06:06,050 --> 00:06:08,510
of the commanding control domain and

153
00:06:08,510 --> 00:06:12,020
they found over 200 matching IPS they

154
00:06:12,020 --> 00:06:14,990
found related domains and using a

155
00:06:14,990 --> 00:06:17,060
collection of techniques on that public

156
00:06:17,060 --> 00:06:18,890
information they linked those domains

157
00:06:18,890 --> 00:06:22,460
back to hosts on the NSO groups network

158
00:06:22,460 --> 00:06:26,800
looks like a mail server and a QA domain

159
00:06:26,800 --> 00:06:28,930
so it turns out that

160
00:06:28,930 --> 00:06:31,060
what system lab was doing before they

161
00:06:31,060 --> 00:06:32,620
even knew it they were mapping out an

162
00:06:32,620 --> 00:06:35,370
SOS mobile attack infrastructure and

163
00:06:35,370 --> 00:06:38,080
they found through it evidence of

164
00:06:38,080 --> 00:06:40,930
related targeted attacks in Mexico and

165
00:06:40,930 --> 00:06:43,360
in Kenya how do they figure out that

166
00:06:43,360 --> 00:06:46,630
this is actually Pegasus well it uses

167
00:06:46,630 --> 00:06:48,669
Pegasus in the software itself to

168
00:06:48,669 --> 00:06:51,550
describe itself and the sophistication

169
00:06:51,550 --> 00:06:53,620
and capabilities are consistent with

170
00:06:53,620 --> 00:06:55,479
information released from the hacking

171
00:06:55,479 --> 00:06:57,639
team link so we're pretty sure that this

172
00:06:57,639 --> 00:07:01,750
is the real deal as for the actor

173
00:07:01,750 --> 00:07:04,690
attribution who is stealth Falcon who is

174
00:07:04,690 --> 00:07:08,820
using NSO's malware to target Mansoor

175
00:07:08,820 --> 00:07:11,199
who would be targeting him and who would

176
00:07:11,199 --> 00:07:12,840
have the money to throw at the problem

177
00:07:12,840 --> 00:07:15,729
so sell Falcon has targeted other

178
00:07:15,729 --> 00:07:18,250
Emirati dissidents and critics they

179
00:07:18,250 --> 00:07:21,310
counted 27 people attacked over Twitter

180
00:07:21,310 --> 00:07:24,430
of whom 24 directly related to the UAE

181
00:07:24,430 --> 00:07:27,610
of those people six of them were either

182
00:07:27,610 --> 00:07:30,699
arrested by the UAE government or

183
00:07:30,699 --> 00:07:32,830
targeted for arrest and convicted in

184
00:07:32,830 --> 00:07:35,530
absentia here's a collection of the

185
00:07:35,530 --> 00:07:37,000
words that they've used in their tweets

186
00:07:37,000 --> 00:07:41,650
and links to malware okay I mean those

187
00:07:41,650 --> 00:07:44,229
topics are pretty interesting if you are

188
00:07:44,229 --> 00:07:44,889
an Emirati

189
00:07:44,889 --> 00:07:48,280
dissident or critic so take a look at

190
00:07:48,280 --> 00:07:50,349
citizen citizen labs report on stealth

191
00:07:50,349 --> 00:07:52,510
falcon it's got much more information

192
00:07:52,510 --> 00:07:55,599
and so if you're not able to connect the

193
00:07:55,599 --> 00:07:58,000
dots here you should read the report for

194
00:07:58,000 --> 00:07:59,919
a a clearer picture on who the threat

195
00:07:59,919 --> 00:08:04,630
actor likely is so with the background

196
00:08:04,630 --> 00:08:06,849
on how we found this let's talk about

197
00:08:06,849 --> 00:08:10,030
Pegasus what is it

198
00:08:10,030 --> 00:08:12,039
the simple answer is that it's high

199
00:08:12,039 --> 00:08:14,020
quality espionage software that's used

200
00:08:14,020 --> 00:08:16,380
for complete surveillance of a device

201
00:08:16,380 --> 00:08:18,250
there's nothing particularly

202
00:08:18,250 --> 00:08:21,310
groundbreaking here in functionality

203
00:08:21,310 --> 00:08:23,110
just the way they do it the

204
00:08:23,110 --> 00:08:25,720
sophistication and the quality this

205
00:08:25,720 --> 00:08:27,970
should all be familiar if you know about

206
00:08:27,970 --> 00:08:30,780
other malware such as RCS or finfisher

207
00:08:30,780 --> 00:08:33,549
it's everything from stealing your data

208
00:08:33,549 --> 00:08:36,279
to activating the camera taking video

209
00:08:36,279 --> 00:08:38,078
activating the microphone and listening

210
00:08:38,078 --> 00:08:40,360
in on you remotely without any

211
00:08:40,360 --> 00:08:43,029
that anything is happening and Andrew

212
00:08:43,029 --> 00:08:45,339
will talk more about Pegasus and its

213
00:08:45,339 --> 00:08:48,070
specific capabilities later I just want

214
00:08:48,070 --> 00:08:49,329
to highlight that normally this

215
00:08:49,329 --> 00:08:52,180
surveillance isn't possible on iOS the

216
00:08:52,180 --> 00:08:53,950
sandbox is supposed to prevent any app

217
00:08:53,950 --> 00:08:56,200
from looking at other apps data or for

218
00:08:56,200 --> 00:08:58,779
accessing Hardware in a low-level way so

219
00:08:58,779 --> 00:09:00,579
in order for Pegasus to work it means

220
00:09:00,579 --> 00:09:03,190
the first jailbreak the device this is

221
00:09:03,190 --> 00:09:04,720
where there's a big change from previous

222
00:09:04,720 --> 00:09:07,630
analysis of surveillance software the

223
00:09:07,630 --> 00:09:09,790
attack uses three exploits in a chain

224
00:09:09,790 --> 00:09:12,070
which we call Trident which gives

225
00:09:12,070 --> 00:09:13,959
Pegasus complete control of the device

226
00:09:13,959 --> 00:09:19,360
as well as persistence on the device how

227
00:09:19,360 --> 00:09:22,750
that operates a single use link like

228
00:09:22,750 --> 00:09:25,329
mentioned previously will exploit a

229
00:09:25,329 --> 00:09:28,450
safari use after free lock once on the

230
00:09:28,450 --> 00:09:31,839
device a colonel in Foley bypasses a SLR

231
00:09:31,839 --> 00:09:33,970
and it Colonel use after free will

232
00:09:33,970 --> 00:09:35,620
compromise the phone you get a full

233
00:09:35,620 --> 00:09:37,720
remote jailbreak the last stage is

234
00:09:37,720 --> 00:09:38,920
installing the surveillance software

235
00:09:38,920 --> 00:09:41,440
Pegasus itself and setting the device up

236
00:09:41,440 --> 00:09:44,079
so that it is regale broken on reboot

237
00:09:44,079 --> 00:09:46,420
and Max will talk about this in much

238
00:09:46,420 --> 00:09:49,170
more detail later on

239
00:09:49,170 --> 00:09:51,760
looking at the exploit chain these are

240
00:09:51,760 --> 00:09:54,130
the CDEs and we worked with citizen lab

241
00:09:54,130 --> 00:09:55,990
and Apple to responsibly disclose the

242
00:09:55,990 --> 00:09:57,730
vulnerabilities of course we burn them

243
00:09:57,730 --> 00:09:59,680
and work with them as they created the

244
00:09:59,680 --> 00:10:03,279
9:35 iOS release in just 10 days which

245
00:10:03,279 --> 00:10:05,829
is a really really short amount of time

246
00:10:05,829 --> 00:10:07,660
given the huge amount of work that it

247
00:10:07,660 --> 00:10:10,930
goes into making a new iOS release the

248
00:10:10,930 --> 00:10:12,720
amount of testing and the amount of

249
00:10:12,720 --> 00:10:15,040
verification of the bugs without

250
00:10:15,040 --> 00:10:18,370
introducing new bugs 10 days is amazing

251
00:10:18,370 --> 00:10:20,079
so this is how it should be done and

252
00:10:20,079 --> 00:10:23,339
thank you very much to Apple for that

253
00:10:23,339 --> 00:10:25,480
just to round out the introduction

254
00:10:25,480 --> 00:10:27,370
here's a partial list of apps that

255
00:10:27,370 --> 00:10:29,260
Pegasus targets for stealing data from

256
00:10:29,260 --> 00:10:31,690
and I'm really hoping that this doesn't

257
00:10:31,690 --> 00:10:33,940
sound like an advertisement for Pegasus

258
00:10:33,940 --> 00:10:35,529
like seriously governments out there if

259
00:10:35,529 --> 00:10:37,329
you're listening don't buy from them

260
00:10:37,329 --> 00:10:39,070
they're jerks who sell to oppressive

261
00:10:39,070 --> 00:10:41,350
regimes targeting human rights activists

262
00:10:41,350 --> 00:10:43,750
like how much worse can you get but this

263
00:10:43,750 --> 00:10:45,459
really is a comprehensive list of apps

264
00:10:45,459 --> 00:10:47,589
for stealing data from like it's look at

265
00:10:47,589 --> 00:10:49,990
that it's everything that you use Andrew

266
00:10:49,990 --> 00:10:51,819
we'll talk more later about how Pegasus

267
00:10:51,819 --> 00:10:53,199
steals data from these apps

268
00:10:53,199 --> 00:10:55,269
but for now what you're probably here

269
00:10:55,269 --> 00:10:57,699
for are the iOS vulnerabilities and

270
00:10:57,699 --> 00:11:00,189
exploits so I'll hand it over to max to

271
00:11:00,189 --> 00:11:07,149
talk about that success we have let's

272
00:11:07,149 --> 00:11:08,649
move to the technical analysis of

273
00:11:08,649 --> 00:11:11,319
Pegasus as you see the Pegasus uses

274
00:11:11,319 --> 00:11:13,179
three stages and exploit ride

275
00:11:13,179 --> 00:11:15,609
invulnerability to an each stage on a

276
00:11:15,609 --> 00:11:18,730
third stage into the CV 46:57 which is

277
00:11:18,730 --> 00:11:20,279
Safari web key to remote code execution

278
00:11:20,279 --> 00:11:22,869
then it jumps to stage number two which

279
00:11:22,869 --> 00:11:24,149
is CV

280
00:11:24,149 --> 00:11:29,529
26:55 46:56 one in sky memory in

281
00:11:29,529 --> 00:11:32,799
to bypass the guys SLR and 46:56 is a

282
00:11:32,799 --> 00:11:37,899
learn to use aggregate the one to use at

283
00:11:37,899 --> 00:11:40,209
a level code execution and finally the

284
00:11:40,209 --> 00:11:41,829
jump to stage three that install

285
00:11:41,829 --> 00:11:44,049
espionage software and use special trick

286
00:11:44,049 --> 00:11:46,239
to run a sand color education and

287
00:11:46,239 --> 00:11:48,939
achieve a gel requisite so I will check

288
00:11:48,939 --> 00:11:52,239
each stage more detail so first stage as

289
00:11:52,239 --> 00:11:55,119
if it contain a single use for fish oil

290
00:11:55,119 --> 00:11:56,949
that will be invalidated

291
00:11:56,949 --> 00:12:00,850
after first week and it contains a

292
00:12:00,850 --> 00:12:02,769
placated javascript the javascript

293
00:12:02,769 --> 00:12:05,589
checks for device type is it iPhone in

294
00:12:05,589 --> 00:12:09,549
the iPad check for processor type 6 64

295
00:12:09,549 --> 00:12:11,799
32 bit and weighs it on this information

296
00:12:11,799 --> 00:12:14,049
and downloads different types of stage 2

297
00:12:14,049 --> 00:12:19,029
and of course it's thanks use a remote

298
00:12:19,029 --> 00:12:20,499
product location vulnerability in a

299
00:12:20,499 --> 00:12:23,470
WebKit by downloading a shellcode from a

300
00:12:23,470 --> 00:12:26,649
stage 2 and overwrite it in a readable

301
00:12:26,649 --> 00:12:28,480
writable interval segment I will check

302
00:12:28,480 --> 00:12:32,230
it in a detail so Steven uses 46:57

303
00:12:32,230 --> 00:12:34,959
remote code education in a WebKit it

304
00:12:34,959 --> 00:12:36,519
exploits use of the free vulnerability

305
00:12:36,519 --> 00:12:39,579
that specially corrupted by using it to

306
00:12:39,579 --> 00:12:41,949
bugs and exploit that with seeds not

307
00:12:41,949 --> 00:12:43,929
that stable as its rely on the WebKit

308
00:12:43,929 --> 00:12:47,019
garbage collector so how it works the

309
00:12:47,019 --> 00:12:48,939
problem exists in the slow event method

310
00:12:48,939 --> 00:12:51,939
on the market argument buffer and it can

311
00:12:51,939 --> 00:12:54,339
be exploited by using a slow event in

312
00:12:54,339 --> 00:12:56,289
defiant properties map so the final

313
00:12:56,289 --> 00:12:59,499
properties is a method that can be used

314
00:12:59,499 --> 00:13:01,779
to define or modify properties directly

315
00:13:01,779 --> 00:13:06,129
on an object it use a few arguments one

316
00:13:06,129 --> 00:13:06,990
is the object

317
00:13:06,990 --> 00:13:09,360
for modifying or Idina properties and

318
00:13:09,360 --> 00:13:11,370
actually the properties object which

319
00:13:11,370 --> 00:13:14,520
owned in emerald properties instituted

320
00:13:14,520 --> 00:13:16,380
descriptors for a properties to be

321
00:13:16,380 --> 00:13:19,230
defining for modified it is a pretty

322
00:13:19,230 --> 00:13:21,450
simple algorithm intended to loops and

323
00:13:21,450 --> 00:13:23,760
the first loop it checked for a proper

324
00:13:23,760 --> 00:13:26,160
formatting official or the property

325
00:13:26,160 --> 00:13:28,140
descriptors and if it's a key it will

326
00:13:28,140 --> 00:13:29,760
append it to a property descriptor

327
00:13:29,760 --> 00:13:33,300
spectrum and to make sure this reference

328
00:13:33,300 --> 00:13:35,220
to properties people not became stale

329
00:13:35,220 --> 00:13:38,700
and the market argument buffer methods

330
00:13:38,700 --> 00:13:42,209
use it let make sure this reference will

331
00:13:42,209 --> 00:13:43,709
be not delegated during the negative

332
00:13:43,709 --> 00:13:47,220
collector cycle and here's the second

333
00:13:47,220 --> 00:13:50,279
loop so the second loop around after

334
00:13:50,279 --> 00:13:52,440
each property group has been validated

335
00:13:52,440 --> 00:13:55,080
and it's used to define our property

336
00:13:55,080 --> 00:13:57,000
method to associate the user-defined

337
00:13:57,000 --> 00:13:58,830
property with the target object and

338
00:13:58,830 --> 00:14:00,959
here's the problem here because the

339
00:14:00,959 --> 00:14:03,120
final property may be use it to call the

340
00:14:03,120 --> 00:14:05,970
user-defined pattern and if in one of

341
00:14:05,970 --> 00:14:07,620
these user defined methods the garbage

342
00:14:07,620 --> 00:14:09,690
collector cycle will be triggered it may

343
00:14:09,690 --> 00:14:12,390
lead to any and reference it object

344
00:14:12,390 --> 00:14:15,600
received to be delegated to more deeply

345
00:14:15,600 --> 00:14:17,339
understand the problem let's check how

346
00:14:17,339 --> 00:14:20,070
the market Paragon in buffer work so

347
00:14:20,070 --> 00:14:21,899
first of all few words about the

348
00:14:21,899 --> 00:14:24,630
JavaScript and core garbage collector

349
00:14:24,630 --> 00:14:26,640
collector responsible for allocating

350
00:14:26,640 --> 00:14:28,800
objects from a heap that are no longer

351
00:14:28,800 --> 00:14:34,440
referenced and it's running on a like

352
00:14:34,440 --> 00:14:36,930
different time spots it depends on a

353
00:14:36,930 --> 00:14:39,480
memory pressure and depends on a device

354
00:14:39,480 --> 00:14:42,690
that so basically to do it is chicken

355
00:14:42,690 --> 00:14:44,579
it's working through a market argument

356
00:14:44,579 --> 00:14:48,390
buffer stack and check with the is

357
00:14:48,390 --> 00:14:50,850
object have any references object

358
00:14:50,850 --> 00:14:52,860
reference alpha may exist on application

359
00:14:52,860 --> 00:14:55,800
heap in this case slower paint and will

360
00:14:55,800 --> 00:14:58,410
be use it the alternate method so market

361
00:14:58,410 --> 00:15:01,920
argument buffer use stack to to keep

362
00:15:01,920 --> 00:15:04,920
track object but starting from the ninth

363
00:15:04,920 --> 00:15:07,140
object will append it to market argument

364
00:15:07,140 --> 00:15:09,810
buffer it will move to a heap and here

365
00:15:09,810 --> 00:15:13,050
is another problem that running a slow

366
00:15:13,050 --> 00:15:15,420
event will expand the capacity and as

367
00:15:15,420 --> 00:15:18,060
you see on the code on the right when M

368
00:15:18,060 --> 00:15:19,589
size will be more or equal to M

369
00:15:19,589 --> 00:15:20,490
capacities

370
00:15:20,490 --> 00:15:22,830
and you'll be used so the problem here

371
00:15:22,830 --> 00:15:24,570
is you'll be running just once because

372
00:15:24,570 --> 00:15:26,400
time capacity will be expenditure I will

373
00:15:26,400 --> 00:15:29,520
share it more detail so the slope is the

374
00:15:29,520 --> 00:15:31,260
first thing it is doing it's moving all

375
00:15:31,260 --> 00:15:36,530
the objects from a stack to a heap and

376
00:15:36,530 --> 00:15:39,810
after that move objects are not

377
00:15:39,810 --> 00:15:41,430
automatically protecting from a garbage

378
00:15:41,430 --> 00:15:43,860
collector to make sure they do not

379
00:15:43,860 --> 00:15:46,590
delegate it the special heaps mechanism

380
00:15:46,590 --> 00:15:49,710
amaru aesthetics use it to make that the

381
00:15:49,710 --> 00:15:53,010
heap contacts acquire it and it's added

382
00:15:53,010 --> 00:15:56,370
to mark Milstead and here's the problem

383
00:15:56,370 --> 00:15:58,950
here as you see if there is not possible

384
00:15:58,950 --> 00:16:01,260
to acquire a hip index that will be not

385
00:16:01,260 --> 00:16:04,830
edit your mark left set and tell the hip

386
00:16:04,830 --> 00:16:06,120
context may be acquired

387
00:16:06,120 --> 00:16:08,670
it's called heap method on a heap class

388
00:16:08,670 --> 00:16:11,130
and the very first thing is doing it

389
00:16:11,130 --> 00:16:13,260
chicken is the underlying object is a

390
00:16:13,260 --> 00:16:17,070
JSL for this until is used it and it

391
00:16:17,070 --> 00:16:20,220
checking for underlying objects tag for

392
00:16:20,220 --> 00:16:22,260
a cell to fill the cell text but for

393
00:16:22,260 --> 00:16:25,320
primitive types like wooden integers the

394
00:16:25,320 --> 00:16:26,940
underlined take it will be different

395
00:16:26,940 --> 00:16:29,250
it's not a cell so it's sellable return

396
00:16:29,250 --> 00:16:32,010
false and the hip index return false

397
00:16:32,010 --> 00:16:34,050
this means we cannot acquire a hip

398
00:16:34,050 --> 00:16:37,350
conject for primitive webs and once

399
00:16:37,350 --> 00:16:40,470
again the problem in append the slope

400
00:16:40,470 --> 00:16:42,090
and will decode just once

401
00:16:42,090 --> 00:16:43,920
only when M sides of the equal to M

402
00:16:43,920 --> 00:16:45,900
capacity after that having M capacity

403
00:16:45,900 --> 00:16:48,300
will be explained how we can use all

404
00:16:48,300 --> 00:16:51,900
this information so first of all we can

405
00:16:51,900 --> 00:16:53,940
invent more than a trellis to market

406
00:16:53,940 --> 00:16:56,520
argument buffer to force it to move from

407
00:16:56,520 --> 00:17:00,570
a stick by the buffer to a heap and if

408
00:17:00,570 --> 00:17:02,850
the ninth while there will be a

409
00:17:02,850 --> 00:17:06,329
primitive type like blend on integer it

410
00:17:06,329 --> 00:17:08,730
will be not editor Marcus set and the

411
00:17:08,730 --> 00:17:10,980
problem that all the subsequent weather

412
00:17:10,980 --> 00:17:13,950
to do not edit on Marcus set let's leave

413
00:17:13,950 --> 00:17:16,500
that all well as on a heap will be not

414
00:17:16,500 --> 00:17:18,119
automatically protected from a garbage

415
00:17:18,119 --> 00:17:21,510
collector if somehow we can trigger a

416
00:17:21,510 --> 00:17:23,130
user-defined method let's remove our

417
00:17:23,130 --> 00:17:25,260
JavaScript references to this object the

418
00:17:25,260 --> 00:17:26,540
subject will be delicate

419
00:17:26,540 --> 00:17:30,810
so let's exploit all this information in

420
00:17:30,810 --> 00:17:32,370
order to achieve arbitrary code

421
00:17:32,370 --> 00:17:32,910
execution

422
00:17:32,910 --> 00:17:34,330
exploits you there

423
00:17:34,330 --> 00:17:37,450
five properties object that contains 12

424
00:17:37,450 --> 00:17:40,539
properties so first nine properties are

425
00:17:40,539 --> 00:17:42,940
like a simple type and number type and

426
00:17:42,940 --> 00:17:46,330
it will force market argument buffer to

427
00:17:46,330 --> 00:17:48,789
move from a specter hip and as we see

428
00:17:48,789 --> 00:17:52,600
the eight property it's a simple type it

429
00:17:52,600 --> 00:17:56,769
it will trigger a bug in a market

430
00:17:56,769 --> 00:18:00,070
argument buffer the vial is this fellow

431
00:18:00,070 --> 00:18:01,539
and all the corresponding values you'll

432
00:18:01,539 --> 00:18:04,289
be not market so this leads it's not

433
00:18:04,289 --> 00:18:08,320
number and array will be not protected

434
00:18:08,320 --> 00:18:10,750
by a garbage collector and when define

435
00:18:10,750 --> 00:18:12,460
own properties matters we'll be working

436
00:18:12,460 --> 00:18:15,399
through the props and trying to convert

437
00:18:15,399 --> 00:18:18,070
not number object to a number it will

438
00:18:18,070 --> 00:18:20,200
call the user define into strings that

439
00:18:20,200 --> 00:18:22,659
we see on the right what does this drink

440
00:18:22,659 --> 00:18:24,970
is doing it removed

441
00:18:24,970 --> 00:18:27,700
the JavaScript reference to array object

442
00:18:27,700 --> 00:18:33,190
and try to call the garbage collector by

443
00:18:33,190 --> 00:18:35,679
allocating a large amount of memory this

444
00:18:35,679 --> 00:18:37,860
will trigger a garbage collector the to

445
00:18:37,860 --> 00:18:40,210
delegate the array object from a heap

446
00:18:40,210 --> 00:18:42,159
and they all I think it is doing try to

447
00:18:42,159 --> 00:18:47,769
over I make a new allocation to overlap

448
00:18:47,769 --> 00:18:50,230
and the new GS array object on it on a

449
00:18:50,230 --> 00:18:53,590
stable one so using this special

450
00:18:53,590 --> 00:18:55,389
aptitude just a free and the shell code

451
00:18:55,389 --> 00:18:57,970
from a stage two and the packet is

452
00:18:57,970 --> 00:19:00,610
allowed to run a kernel exploit that I

453
00:19:00,610 --> 00:19:04,929
will talk next so stage 2 contain a

454
00:19:04,929 --> 00:19:06,880
payload which is a shield code in a

455
00:19:06,880 --> 00:19:08,919
compression data the shield so it uses

456
00:19:08,919 --> 00:19:10,630
for a kernel exploitation in in stuff re

457
00:19:10,630 --> 00:19:12,639
context and the compression data is just

458
00:19:12,639 --> 00:19:14,230
a loader the downloads of the group

459
00:19:14,230 --> 00:19:16,120
stage 3 and the configuration file which

460
00:19:16,120 --> 00:19:18,570
contain addresses and decryption keys

461
00:19:18,570 --> 00:19:20,860
one of the CVS uses is the

462
00:19:20,860 --> 00:19:25,200
46:55 is in folic and it can be used to

463
00:19:25,200 --> 00:19:27,730
bypass there is a lot of I liq internal

464
00:19:27,730 --> 00:19:29,830
addresses the problem here this they're

465
00:19:29,830 --> 00:19:32,200
missing bound chicken in s number

466
00:19:32,200 --> 00:19:34,350
constructor and OS unsterilized binary

467
00:19:34,350 --> 00:19:37,000
which leads the attacker can create is

468
00:19:37,000 --> 00:19:38,590
number object with a high number of it

469
00:19:38,590 --> 00:19:40,899
and trigger it from IR register and get

470
00:19:40,899 --> 00:19:43,000
property bite and unfortunately it can

471
00:19:43,000 --> 00:19:44,320
be triggered within the application

472
00:19:44,320 --> 00:19:46,990
sandbox let's check the problem more

473
00:19:46,990 --> 00:19:47,770
detail

474
00:19:47,770 --> 00:19:50,680
so I essentialized binary is a method to

475
00:19:50,680 --> 00:19:52,180
handle binary laser data

476
00:19:52,180 --> 00:19:54,250
it converts the binary format to basic

477
00:19:54,250 --> 00:19:55,210
kernel data

478
00:19:55,210 --> 00:19:58,270
it supports different container types

479
00:19:58,270 --> 00:20:00,850
like arrays dictionaries set object

480
00:20:00,850 --> 00:20:04,210
types number strings boolean's and the

481
00:20:04,210 --> 00:20:06,370
point of interesting here is OS number

482
00:20:06,370 --> 00:20:08,740
so as we see the ayat number constructor

483
00:20:08,740 --> 00:20:12,610
got call it without any input well as

484
00:20:12,610 --> 00:20:14,740
validation so just as number with number

485
00:20:14,740 --> 00:20:17,230
called what is doing its call it

486
00:20:17,230 --> 00:20:19,090
designated constructor is number in it

487
00:20:19,090 --> 00:20:21,640
again without any check for a length

488
00:20:21,640 --> 00:20:26,380
property and finally in it so we need

489
00:20:26,380 --> 00:20:29,020
blindly trust all the input arguments

490
00:20:29,020 --> 00:20:31,870
there method and other right run one of

491
00:20:31,870 --> 00:20:35,560
the object filled with new number of

492
00:20:35,560 --> 00:20:38,590
bits in this case the problem that the

493
00:20:38,590 --> 00:20:40,450
size variable will be overwritten and

494
00:20:40,450 --> 00:20:42,370
this size variable will be used in the

495
00:20:42,370 --> 00:20:44,650
other methods of the same object in this

496
00:20:44,650 --> 00:20:47,440
case for example number of bytes which

497
00:20:47,440 --> 00:20:49,510
leads its return value of number of

498
00:20:49,510 --> 00:20:50,770
bytes for the controller by attacker

499
00:20:50,770 --> 00:20:53,640
because we control a size

500
00:20:53,640 --> 00:20:57,010
how can we use it let's check who is who

501
00:20:57,010 --> 00:20:59,200
is running the number of bytes

502
00:20:59,200 --> 00:21:01,450
unfortunately are you register enter get

503
00:21:01,450 --> 00:21:04,120
property by it it's a coded handling and

504
00:21:04,120 --> 00:21:06,160
always numbers and it's used

505
00:21:06,160 --> 00:21:08,230
unfortunately it's use stick basic

506
00:21:08,230 --> 00:21:10,840
buffer to handle highest numbers and

507
00:21:10,840 --> 00:21:13,570
then copied from a stack kernel memory

508
00:21:13,570 --> 00:21:16,540
to a buffer to a heap buffer and return

509
00:21:16,540 --> 00:21:19,660
to userland and for that the d copies

510
00:21:19,660 --> 00:21:23,530
use it but as you see the d copy use Ln

511
00:21:23,530 --> 00:21:25,540
that gets calculated from number of

512
00:21:25,540 --> 00:21:27,580
bytes and we control the number of bytes

513
00:21:27,580 --> 00:21:30,910
which lead which attacker can control

514
00:21:30,910 --> 00:21:32,920
how many bytes can be copied from a

515
00:21:32,920 --> 00:21:34,840
kernel stack memory and return to user

516
00:21:34,840 --> 00:21:38,110
land how we can college

517
00:21:38,110 --> 00:21:39,220
first of all let's check how our

518
00:21:39,220 --> 00:21:40,990
register enter gate property by it can

519
00:21:40,990 --> 00:21:43,180
be use it it's not that hard because I

520
00:21:43,180 --> 00:21:45,130
already enter gate property can be call

521
00:21:45,130 --> 00:21:47,290
it from a user land and can be college

522
00:21:47,290 --> 00:21:50,410
even from application sandbox so this is

523
00:21:50,410 --> 00:21:52,810
how explored may look like first of all

524
00:21:52,810 --> 00:21:54,940
we create a dictionary objects that

525
00:21:54,940 --> 00:21:58,840
contain a number with height number of

526
00:21:58,840 --> 00:22:00,410
bits

527
00:22:00,410 --> 00:22:05,300
as a key and as a well and one of the

528
00:22:05,300 --> 00:22:08,060
property has as a key the next thing we

529
00:22:08,060 --> 00:22:10,040
do in our service up and extended it

530
00:22:10,040 --> 00:22:13,580
will spawn a user client and next we can

531
00:22:13,580 --> 00:22:15,440
call our register and to get properties

532
00:22:15,440 --> 00:22:17,540
on this user client so this will trigger

533
00:22:17,540 --> 00:22:20,960
ordinal ability and as we see that data

534
00:22:20,960 --> 00:22:24,530
buffer variable here it the two

535
00:22:24,530 --> 00:22:26,090
sophistic bytes of the kernel tech

536
00:22:26,090 --> 00:22:27,770
memory will be coated and returned as a

537
00:22:27,770 --> 00:22:30,290
data buffer the last step here is the

538
00:22:30,290 --> 00:22:32,960
determinate kernel base address from

539
00:22:32,960 --> 00:22:36,470
this stack memory which which we have

540
00:22:36,470 --> 00:22:39,200
here so after we get a can of eight

541
00:22:39,200 --> 00:22:43,250
address we can jump to next attack which

542
00:22:43,250 --> 00:22:46,460
is CV 46:56 it's use of the pre to gain

543
00:22:46,460 --> 00:22:49,550
kernel level code execution it explodes

544
00:22:49,550 --> 00:22:51,220
the problem that set at index microbe

545
00:22:51,220 --> 00:22:53,480
doesn't retain an object or doing any

546
00:22:53,480 --> 00:22:56,900
other memory management the trigger

547
00:22:56,900 --> 00:22:58,940
happens in the old friend is on

548
00:22:58,940 --> 00:23:02,000
sterilized binary and again enforcement

549
00:23:02,000 --> 00:23:03,410
can be triggered within the application

550
00:23:03,410 --> 00:23:06,290
ten books so I a centralized binary we

551
00:23:06,290 --> 00:23:09,410
just check it in a previous bug so it's

552
00:23:09,410 --> 00:23:11,570
it's a method that parse the binary

553
00:23:11,570 --> 00:23:14,530
coded values and return the subject

554
00:23:14,530 --> 00:23:18,350
support different container type like

555
00:23:18,350 --> 00:23:21,170
dictionary set arrays object types

556
00:23:21,170 --> 00:23:23,570
number symbols and series very special

557
00:23:23,570 --> 00:23:26,030
keys called the kayo sterilized object

558
00:23:26,030 --> 00:23:28,100
it allow us to create a reference to

559
00:23:28,100 --> 00:23:29,960
already the sterilized it object this is

560
00:23:29,960 --> 00:23:33,580
important and we will go for that next

561
00:23:33,580 --> 00:23:36,650
so in the process of the sterilizing and

562
00:23:36,650 --> 00:23:39,740
person object is naturalized binary

563
00:23:39,740 --> 00:23:43,280
create an object and keep track of all

564
00:23:43,280 --> 00:23:45,550
the objects by using set index

565
00:23:45,550 --> 00:23:48,530
what does citizen Z do is use the object

566
00:23:48,530 --> 00:23:51,770
array to keep track of objects and it

567
00:23:51,770 --> 00:23:54,920
just save a pointer to the sterilized

568
00:23:54,920 --> 00:23:56,870
that object as one of the array indexes

569
00:23:56,870 --> 00:23:59,950
and here is a big problem here because

570
00:23:59,950 --> 00:24:02,810
it doesn't retain an object or do any

571
00:24:02,810 --> 00:24:04,910
other memory management mechanism just

572
00:24:04,910 --> 00:24:08,120
save a pointer and unfortunately what's

573
00:24:08,120 --> 00:24:11,120
going next in a code that kept in RS

574
00:24:11,120 --> 00:24:14,200
drink to price symbol

575
00:24:14,200 --> 00:24:18,250
we're releasing a we call a release on

576
00:24:18,250 --> 00:24:20,559
object pointer which will lead to object

577
00:24:20,559 --> 00:24:22,779
allocation so the object is delegated by

578
00:24:22,779 --> 00:24:25,179
the object array still have a reference

579
00:24:25,179 --> 00:24:28,210
to it if you can somehow use it it will

580
00:24:28,210 --> 00:24:30,610
be used to free and here is our friend

581
00:24:30,610 --> 00:24:33,490
ki a sterilized object that we retain on

582
00:24:33,490 --> 00:24:36,159
an object that is save it in a red

583
00:24:36,159 --> 00:24:38,649
so basically object is delegated array

584
00:24:38,649 --> 00:24:40,419
still have a pointer to each and we call

585
00:24:40,419 --> 00:24:42,669
retain on this pointer it's classic use

586
00:24:42,669 --> 00:24:46,510
of the pre how we can exploit it first

587
00:24:46,510 --> 00:24:49,029
of all let's create a sterilized

588
00:24:49,029 --> 00:24:51,220
dictionary it will contain oystering

589
00:24:51,220 --> 00:24:53,789
that will lead the object delegation and

590
00:24:53,789 --> 00:24:58,570
as this OS drink object is 32 bytes in

591
00:24:58,570 --> 00:25:01,419
memory we need to do the next allocation

592
00:25:01,419 --> 00:25:04,110
to relegate our attacker control object

593
00:25:04,110 --> 00:25:06,850
for this purpose RS data is a perfect

594
00:25:06,850 --> 00:25:10,120
candidate OS data can be point into a

595
00:25:10,120 --> 00:25:12,399
buffer we can control the buffer size we

596
00:25:12,399 --> 00:25:14,799
can control the buffer content so what

597
00:25:14,799 --> 00:25:16,840
we do in would create a buffer size with

598
00:25:16,840 --> 00:25:19,210
the same size is a string object and

599
00:25:19,210 --> 00:25:21,909
this buffer will contain flake or a

600
00:25:21,909 --> 00:25:24,789
string object with fake we table the

601
00:25:24,789 --> 00:25:26,440
very last thing is the trigger use of

602
00:25:26,440 --> 00:25:28,149
the free by agent Kay a sterilized

603
00:25:28,149 --> 00:25:30,880
object to encoding so once again our

604
00:25:30,880 --> 00:25:32,679
strings will trigger object allocation

605
00:25:32,679 --> 00:25:35,740
is data will relegate the same memory

606
00:25:35,740 --> 00:25:38,260
with our attacker controller object with

607
00:25:38,260 --> 00:25:40,210
our fake we table and we will call just

608
00:25:40,210 --> 00:25:42,130
retain in this fake with table and

609
00:25:42,130 --> 00:25:45,429
gaining kernel level code execution so

610
00:25:45,429 --> 00:25:47,260
after that my castles have the kernel

611
00:25:47,260 --> 00:25:49,299
exploitation Pegasus make a few candle

612
00:25:49,299 --> 00:25:52,360
pages like set ready to easily escalate

613
00:25:52,360 --> 00:25:55,929
privileges out ramify get out of my way

614
00:25:55,929 --> 00:25:58,330
variable to disable imma fight and

615
00:25:58,330 --> 00:26:00,850
disable code silencer checks by page in

616
00:26:00,850 --> 00:26:03,730
CS enforcement disable and final page

617
00:26:03,730 --> 00:26:06,880
mac mount and quite wait volume manager

618
00:26:06,880 --> 00:26:09,519
to remount system partition as readable

619
00:26:09,519 --> 00:26:12,010
writable after system partition got

620
00:26:12,010 --> 00:26:15,039
amounted we can overwrite with stage 3

621
00:26:15,039 --> 00:26:19,059
loader and this tree loader will

622
00:26:19,059 --> 00:26:19,389
download

623
00:26:19,389 --> 00:26:23,830
stage 3 files which contain like 12 12

624
00:26:23,830 --> 00:26:26,170
files most of them are binaries

625
00:26:26,170 --> 00:26:27,910
here are three group of them for example

626
00:26:27,910 --> 00:26:30,220
the protest group like double install

627
00:26:30,220 --> 00:26:32,800
the watchdog or system D which is a main

628
00:26:32,800 --> 00:26:35,770
reporting model more detail the end

629
00:26:35,770 --> 00:26:37,810
result want to tell it about all the

630
00:26:37,810 --> 00:26:39,880
things there is a dollop groups which

631
00:26:39,880 --> 00:26:43,090
for example contain live data its mask

632
00:26:43,090 --> 00:26:45,090
is and rename its digestive trade

633
00:26:45,090 --> 00:26:47,860
framework so Pegasus is si just a phrase

634
00:26:47,860 --> 00:26:51,040
such a substrate to inject my dialect

635
00:26:51,040 --> 00:26:53,440
interpreters and install hooks and with

636
00:26:53,440 --> 00:26:55,480
this hooks intercept calls intercept

637
00:26:55,480 --> 00:26:58,750
method it's on and final ester group

638
00:26:58,750 --> 00:27:01,150
which contain calm Appalachian sturdy

639
00:27:01,150 --> 00:27:04,570
file which is a JavaScript file that use

640
00:27:04,570 --> 00:27:06,520
it for entire code execution on device

641
00:27:06,520 --> 00:27:10,990
reboot I will focus on this one so as I

642
00:27:10,990 --> 00:27:13,030
say it's a just group that it triggers

643
00:27:13,030 --> 00:27:14,590
the box that allows on time code

644
00:27:14,590 --> 00:27:18,130
execution in combination with LT buddy

645
00:27:18,130 --> 00:27:20,710
Dietrich it can be used to achieve a

646
00:27:20,710 --> 00:27:23,530
jailbreak persistence the problem is the

647
00:27:23,530 --> 00:27:25,500
bad casting set or Louella and

648
00:27:25,500 --> 00:27:27,730
fortunately in this case it's suitable

649
00:27:27,730 --> 00:27:31,360
only from GSD binary protest context so

650
00:27:31,360 --> 00:27:33,400
what is the problem the problem is

651
00:27:33,400 --> 00:27:37,090
insisted in pure Gator delegate binding

652
00:27:37,090 --> 00:27:39,400
which is bacon by function set in pure

653
00:27:39,400 --> 00:27:42,790
Gator delegate in C++ so what does it do

654
00:27:42,790 --> 00:27:45,820
it get two arguments the first is impure

655
00:27:45,820 --> 00:27:48,790
Gator and the second is any GS objects

656
00:27:48,790 --> 00:27:50,290
that that you'll be set it as this

657
00:27:50,290 --> 00:27:53,980
impure Gator do it and it call it set

658
00:27:53,980 --> 00:27:55,720
billing it what does it say that we do

659
00:27:55,720 --> 00:27:58,630
it's called set which call finally a set

660
00:27:58,630 --> 00:28:01,870
or Louella here's the problem here's a

661
00:28:01,870 --> 00:28:03,070
problem set or Louella

662
00:28:03,070 --> 00:28:06,130
as we see there is a rental fridge cast

663
00:28:06,130 --> 00:28:08,920
and there is no type checking for this

664
00:28:08,920 --> 00:28:11,770
cast which leaves it if any other object

665
00:28:11,770 --> 00:28:15,940
type will be pasted to the function

666
00:28:15,940 --> 00:28:18,430
you'll be improperly down acid to impure

667
00:28:18,430 --> 00:28:21,610
gator type who is more detailed

668
00:28:21,610 --> 00:28:23,620
explanation what happens here the

669
00:28:23,620 --> 00:28:26,260
decompile it's settle function set

670
00:28:26,260 --> 00:28:29,110
impure gator delegate and most of the

671
00:28:29,110 --> 00:28:31,690
might assign line in here and as we see

672
00:28:31,690 --> 00:28:33,970
after parsing two arguments it will

673
00:28:33,970 --> 00:28:37,450
otherwise base +16 with the pointer to a

674
00:28:37,450 --> 00:28:39,460
delegate so basically we can override

675
00:28:39,460 --> 00:28:39,970
one

676
00:28:39,970 --> 00:28:42,730
of the object fields with a pointer that

677
00:28:42,730 --> 00:28:46,210
we control on the right we see GS array

678
00:28:46,210 --> 00:28:48,640
buffer view class so the best object

679
00:28:48,640 --> 00:28:50,890
type J sorry buffer view it will

680
00:28:50,890 --> 00:28:53,380
overwrite M vector field with the

681
00:28:53,380 --> 00:28:56,940
delegate pointer which will lead to

682
00:28:56,940 --> 00:28:59,380
readable writable and even executable

683
00:28:59,380 --> 00:29:02,340
primitives how it can be exploited

684
00:29:02,340 --> 00:29:05,890
accessible we use a damning array buffer

685
00:29:05,890 --> 00:29:08,110
as a beckon vector for two data views

686
00:29:08,110 --> 00:29:13,480
and we will use a bad cat when set until

687
00:29:13,480 --> 00:29:15,370
get a delegate to overwrite one of the

688
00:29:15,370 --> 00:29:17,290
fields of third data view with the

689
00:29:17,290 --> 00:29:21,940
second data view and which SM vector of

690
00:29:21,940 --> 00:29:24,400
this third data views over region we can

691
00:29:24,400 --> 00:29:26,740
use set unit or get you Institute other

692
00:29:26,740 --> 00:29:30,160
right field on the second object what

693
00:29:30,160 --> 00:29:32,020
does it give us we can override the

694
00:29:32,020 --> 00:29:34,900
object array buffer address to be 0 and

695
00:29:34,900 --> 00:29:38,410
lens to be 4 gigabytes and type to be

696
00:29:38,410 --> 00:29:41,800
passed or 8 mode so what just happened

697
00:29:41,800 --> 00:29:45,070
and we overwrite data view to make it

698
00:29:45,070 --> 00:29:48,010
starting from 0 to map the entire

699
00:29:48,010 --> 00:29:50,050
process memory so basically we can get

700
00:29:50,050 --> 00:29:52,960
we can call set or get you Institute

701
00:29:52,960 --> 00:29:55,560
arbiter read/write in the entire process

702
00:29:55,560 --> 00:30:00,160
and execution primitive the same thing

703
00:30:00,160 --> 00:30:02,320
can be used but now we need to call set

704
00:30:02,320 --> 00:30:05,080
interrogator delegate twice and instead

705
00:30:05,080 --> 00:30:07,900
of exposing the entire process memory we

706
00:30:07,900 --> 00:30:11,080
can leak the object address if they can

707
00:30:11,080 --> 00:30:13,390
lick an object address we can create J's

708
00:30:13,390 --> 00:30:16,570
function object the to contain hundreds

709
00:30:16,570 --> 00:30:19,110
or thousands of empty try-catch blocks

710
00:30:19,110 --> 00:30:21,400
when you start just to execute them

711
00:30:21,400 --> 00:30:24,210
this will leave this GE t will try to

712
00:30:24,210 --> 00:30:27,190
compile and just group to a native code

713
00:30:27,190 --> 00:30:28,780
for this purpose readable writable

714
00:30:28,780 --> 00:30:32,140
executable segments will be allocated we

715
00:30:32,140 --> 00:30:33,910
can leave the address of this readable

716
00:30:33,910 --> 00:30:35,590
writable executable segment overwrite it

717
00:30:35,590 --> 00:30:37,540
with the shell code and call to

718
00:30:37,540 --> 00:30:39,910
overwrite to execute it so this is how

719
00:30:39,910 --> 00:30:42,250
kernel got three exploited on each

720
00:30:42,250 --> 00:30:45,340
device boot by using the JavaScript and

721
00:30:45,340 --> 00:30:47,620
the very last thing I want to talk is a

722
00:30:47,620 --> 00:30:51,370
persistent mechanism its Explorer

723
00:30:51,370 --> 00:30:53,710
exploit knowledge that

724
00:30:53,710 --> 00:30:55,090
since in the line charity by didi

725
00:30:55,090 --> 00:30:59,920
diamond with early boot argument and if

726
00:30:59,920 --> 00:31:01,900
you can copy the GC binary from

727
00:31:01,900 --> 00:31:02,680
javascriptcore

728
00:31:02,680 --> 00:31:04,600
which is silent viable rename it at

729
00:31:04,600 --> 00:31:07,240
everybody be the create a symlink

730
00:31:07,240 --> 00:31:09,540
name it early boot that will point to

731
00:31:09,540 --> 00:31:12,280
javascript file that contains shell code

732
00:31:12,280 --> 00:31:16,660
and this bad cast when system starts it

733
00:31:16,660 --> 00:31:19,030
tried to run everybody dearly boot and

734
00:31:19,030 --> 00:31:21,700
instead it will lines jesse with just

735
00:31:21,700 --> 00:31:25,600
exploit so this is the persistent tree

736
00:31:25,600 --> 00:31:30,160
and next i hope that's what andrew who

737
00:31:30,160 --> 00:31:31,990
will talk about espionage techniques use

738
00:31:31,990 --> 00:31:38,620
it in a pegasus thank you max yeah so

739
00:31:38,620 --> 00:31:41,230
we've talked about now the

740
00:31:41,230 --> 00:31:42,910
vulnerabilities how we jailbroken device

741
00:31:42,910 --> 00:31:44,230
and now kind of the end result of that

742
00:31:44,230 --> 00:31:46,000
is a lot of what we saw in stage three

743
00:31:46,000 --> 00:31:48,010
was essentially the SDN software the

744
00:31:48,010 --> 00:31:49,720
malware payload that actually gets

745
00:31:49,720 --> 00:31:51,550
installed and you know we talked about

746
00:31:51,550 --> 00:31:53,100
there's a lot of services that come down

747
00:31:53,100 --> 00:31:56,130
for spawning system services processes

748
00:31:56,130 --> 00:31:59,440
things like injecting being able to hook

749
00:31:59,440 --> 00:32:00,760
the applications we'll talk about in a

750
00:32:00,760 --> 00:32:02,110
moment and then all the dynamic

751
00:32:02,110 --> 00:32:03,880
libraries as well that are used involved

752
00:32:03,880 --> 00:32:05,680
to basically hook into the apps to

753
00:32:05,680 --> 00:32:08,770
provide hooking then kind of loans a

754
00:32:08,770 --> 00:32:10,180
little bit the technique that we found

755
00:32:10,180 --> 00:32:11,920
within this SP now software package

756
00:32:11,920 --> 00:32:13,540
that's there so a little bit of things

757
00:32:13,540 --> 00:32:16,990
to kind of avoid detection as best they

758
00:32:16,990 --> 00:32:19,480
can and analysis so every time one of

759
00:32:19,480 --> 00:32:20,710
those links that we receive that we

760
00:32:20,710 --> 00:32:22,180
found writes got from citizen lab or

761
00:32:22,180 --> 00:32:23,380
that we discovered through some crawling

762
00:32:23,380 --> 00:32:25,720
techniques there one time u s-- links so

763
00:32:25,720 --> 00:32:27,280
once you visit the link if you try to

764
00:32:27,280 --> 00:32:29,710
revisit it again basically you'll just

765
00:32:29,710 --> 00:32:31,420
get redirected to another site in most

766
00:32:31,420 --> 00:32:33,100
cases it was it was a redirect for

767
00:32:33,100 --> 00:32:34,600
google for whatever country the site was

768
00:32:34,600 --> 00:32:36,310
being served from in other cases it was

769
00:32:36,310 --> 00:32:37,720
other random news sites and things like

770
00:32:37,720 --> 00:32:39,580
that that were happening so that kind of

771
00:32:39,580 --> 00:32:40,900
defeats a little bit of trying to go

772
00:32:40,900 --> 00:32:42,610
back if you missed capturing the first

773
00:32:42,610 --> 00:32:44,460
set of the payload um in the first stage

774
00:32:44,460 --> 00:32:46,120
additional things we notice obviously

775
00:32:46,120 --> 00:32:47,500
within the different stages the first

776
00:32:47,500 --> 00:32:49,120
stage obviously is the javascript

777
00:32:49,120 --> 00:32:50,890
exploit because it comes down and we

778
00:32:50,890 --> 00:32:52,930
through the website link that gets run

779
00:32:52,930 --> 00:32:55,570
through Safari that JavaScript was

780
00:32:55,570 --> 00:32:58,720
heavily obfuscated the initially looked

781
00:32:58,720 --> 00:33:00,070
at it took about a day to look at what

782
00:33:00,070 --> 00:33:01,270
was going on took a few more days

783
00:33:01,270 --> 00:33:03,280
actually to really dissect different

784
00:33:03,280 --> 00:33:04,480
pieces that was going on and learning

785
00:33:04,480 --> 00:33:04,840
about

786
00:33:04,840 --> 00:33:06,909
what's happening in addition the other

787
00:33:06,909 --> 00:33:08,500
pieces of code like the Objective C code

788
00:33:08,500 --> 00:33:10,659
that's been in there as well on all

789
00:33:10,659 --> 00:33:12,580
heavily obviously beat all hiding common

790
00:33:12,580 --> 00:33:13,630
identifiers and things that you would

791
00:33:13,630 --> 00:33:15,820
try to figure out easily what's going on

792
00:33:15,820 --> 00:33:17,380
with that additionally there were other

793
00:33:17,380 --> 00:33:18,520
things that were going on with the

794
00:33:18,520 --> 00:33:20,260
payloads that came down so for example

795
00:33:20,260 --> 00:33:22,809
on stage two comes down as a compressed

796
00:33:22,809 --> 00:33:25,240
payload but then stage two acts and

797
00:33:25,240 --> 00:33:27,309
funny enough contains an encryption key

798
00:33:27,309 --> 00:33:29,679
which is used to decrypt the stage three

799
00:33:29,679 --> 00:33:31,179
which is the encrypted payload that we

800
00:33:31,179 --> 00:33:32,770
on that max talked about as well and

801
00:33:32,770 --> 00:33:34,510
actually funny enough with the actual

802
00:33:34,510 --> 00:33:37,059
password the encryption key that he

803
00:33:37,059 --> 00:33:39,220
actually rotates every time you visit a

804
00:33:39,220 --> 00:33:40,720
new length that's a different key every

805
00:33:40,720 --> 00:33:42,279
single time so they are rotating the key

806
00:33:42,279 --> 00:33:44,289
in every single arm sample that comes

807
00:33:44,289 --> 00:33:46,270
through that and then finally on the

808
00:33:46,270 --> 00:33:47,649
spyware component that we talked about

809
00:33:47,649 --> 00:33:49,000
and is maximally tuned as well with like

810
00:33:49,000 --> 00:33:52,330
the RT buddy D the the process season

811
00:33:52,330 --> 00:33:54,399
and application binaries are all hidden

812
00:33:54,399 --> 00:33:56,140
able to look like system services so

813
00:33:56,140 --> 00:33:57,850
that if you were able to staff some of

814
00:33:57,850 --> 00:33:59,260
these files and look at them you

815
00:33:59,260 --> 00:34:00,460
wouldn't really see much difference

816
00:34:00,460 --> 00:34:03,549
going on with from a base system so some

817
00:34:03,549 --> 00:34:04,750
of the techniques additionally we saw

818
00:34:04,750 --> 00:34:07,240
like on the device actually to you know

819
00:34:07,240 --> 00:34:09,849
avoid staying undetectable there were

820
00:34:09,849 --> 00:34:11,320
there was code in there that actually

821
00:34:11,320 --> 00:34:12,609
will go through and turn off the ability

822
00:34:12,609 --> 00:34:14,349
for the iOS system to actually go ahead

823
00:34:14,349 --> 00:34:15,969
and update so if a new iOS version came

824
00:34:15,969 --> 00:34:17,679
down it would prevent that from actually

825
00:34:17,679 --> 00:34:19,599
happening so that it can continue with

826
00:34:19,599 --> 00:34:21,790
persistence on the device additional

827
00:34:21,790 --> 00:34:23,230
things like we saw in the original video

828
00:34:23,230 --> 00:34:25,839
which is the you know it would clear

829
00:34:25,839 --> 00:34:27,460
mobile safaris history and caches to

830
00:34:27,460 --> 00:34:29,290
that who has been open to backup there's

831
00:34:29,290 --> 00:34:30,879
no indication of where you went or what

832
00:34:30,879 --> 00:34:32,469
happened so you really wouldn't be able

833
00:34:32,469 --> 00:34:33,969
to revisit the link at all what's going

834
00:34:33,969 --> 00:34:37,179
on with that and additionally they must

835
00:34:37,179 --> 00:34:38,349
of the communications we're going over

836
00:34:38,349 --> 00:34:40,300
the SIP protocol as well and the one of

837
00:34:40,300 --> 00:34:41,889
the things that was discovered where

838
00:34:41,889 --> 00:34:43,300
there's a separate module obviously for

839
00:34:43,300 --> 00:34:45,339
all the SIP communications as well as

840
00:34:45,339 --> 00:34:46,869
the root CA cert in order to communicate

841
00:34:46,869 --> 00:34:49,149
with a server correctly and then finally

842
00:34:49,149 --> 00:34:50,109
there was actually a variety of

843
00:34:50,109 --> 00:34:51,609
different self-destruct mechanisms that

844
00:34:51,609 --> 00:34:53,550
are involved with this right so there's

845
00:34:53,550 --> 00:34:55,929
within the the payload there's the

846
00:34:55,929 --> 00:34:58,570
ability to erase itself from the device

847
00:34:58,570 --> 00:35:00,430
remotely so if something gets discovered

848
00:35:00,430 --> 00:35:02,230
they want to terminate spying on a

849
00:35:02,230 --> 00:35:04,570
device they can remotely destructed an X

850
00:35:04,570 --> 00:35:07,720
to the remove itself from wishing to

851
00:35:07,720 --> 00:35:09,160
that there was actually mechanisms where

852
00:35:09,160 --> 00:35:10,660
if you were to an infected device with

853
00:35:10,660 --> 00:35:15,099
on Pegasus via trident the and the

854
00:35:15,099 --> 00:35:16,510
device doesn't actually able to check

855
00:35:16,510 --> 00:35:17,440
back in with the command and control

856
00:35:17,440 --> 00:35:18,430
service within about

857
00:35:18,430 --> 00:35:19,809
24 hours and actually will actively

858
00:35:19,809 --> 00:35:21,150
remove its up from the device as well

859
00:35:21,150 --> 00:35:23,380
even without having talked to the server

860
00:35:23,380 --> 00:35:24,579
so there is kind of a check-in system

861
00:35:24,579 --> 00:35:25,930
that goes on with that which is fairly

862
00:35:25,930 --> 00:35:29,020
interesting now in terms of the actual

863
00:35:29,020 --> 00:35:30,670
data that we saw its able to actually

864
00:35:30,670 --> 00:35:31,809
gather and stuff like that right

865
00:35:31,809 --> 00:35:33,040
obviously this is a lot of stuff that

866
00:35:33,040 --> 00:35:34,900
you'd expect espionage software to track

867
00:35:34,900 --> 00:35:36,700
down on but what we saw basically was

868
00:35:36,700 --> 00:35:38,230
the ability to return on and record the

869
00:35:38,230 --> 00:35:40,660
microphone at any point in time and

870
00:35:40,660 --> 00:35:41,980
additionally any sort of video or data

871
00:35:41,980 --> 00:35:43,660
or any video coming from the camera

872
00:35:43,660 --> 00:35:45,339
obviously it could record as well and

873
00:35:45,339 --> 00:35:46,770
send up to the command control servers

874
00:35:46,770 --> 00:35:49,089
it collects information like the SIM

875
00:35:49,089 --> 00:35:50,380
card you're using all sort of cell

876
00:35:50,380 --> 00:35:51,910
network neurons to kind of identify you

877
00:35:51,910 --> 00:35:53,980
and track you as well as your actual

878
00:35:53,980 --> 00:35:55,450
physical location when it can turn the

879
00:35:55,450 --> 00:35:58,240
GPS location on and then also finally

880
00:35:58,240 --> 00:35:59,859
what was interesting was on it will go

881
00:35:59,859 --> 00:36:03,010
into your on your iOS keychain and try

882
00:36:03,010 --> 00:36:04,390
to get out your password through your

883
00:36:04,390 --> 00:36:05,829
Wi-Fi network that you connected to any

884
00:36:05,829 --> 00:36:07,180
secure network you've been on it will

885
00:36:07,180 --> 00:36:08,530
pull those credentials out and send them

886
00:36:08,530 --> 00:36:10,540
up to the servers as well for a variety

887
00:36:10,540 --> 00:36:11,829
different reasons right so now now the

888
00:36:11,829 --> 00:36:13,569
house credentials to be able to log into

889
00:36:13,569 --> 00:36:14,500
your networks from wherever you are

890
00:36:14,500 --> 00:36:16,839
whether they're work home or in transit

891
00:36:16,839 --> 00:36:19,599
to be able to do that so in terms of

892
00:36:19,599 --> 00:36:20,829
some of the data collection that we

893
00:36:20,829 --> 00:36:21,970
talked about in terms of like we

894
00:36:21,970 --> 00:36:23,829
mentioned the term application hooking a

895
00:36:23,829 --> 00:36:25,809
lot right and as that's kind of alluded

896
00:36:25,809 --> 00:36:27,970
to typically you can't do this on a

897
00:36:27,970 --> 00:36:29,859
non-0 can iOS device the sandbox

898
00:36:29,859 --> 00:36:31,329
prevents you from spying on the other

899
00:36:31,329 --> 00:36:34,900
applications in the system however once

900
00:36:34,900 --> 00:36:36,190
you get a jailbroken device though you

901
00:36:36,190 --> 00:36:38,799
can use tools like Cydia substrate to

902
00:36:38,799 --> 00:36:40,390
essentially what's called hook the other

903
00:36:40,390 --> 00:36:42,040
at the applications functions and the

904
00:36:42,040 --> 00:36:43,089
thing so if they have a function that's

905
00:36:43,089 --> 00:36:45,640
like send or read messages you can hook

906
00:36:45,640 --> 00:36:47,109
that with this spyware and then

907
00:36:47,109 --> 00:36:48,790
basically be able to see and get all

908
00:36:48,790 --> 00:36:50,890
that information that's coming down from

909
00:36:50,890 --> 00:36:53,710
the framework layer and deliver it off

910
00:36:53,710 --> 00:36:54,880
to wherever you want basically your

911
00:36:54,880 --> 00:36:56,950
systems or ads basically act on that

912
00:36:56,950 --> 00:36:58,780
data that's happening so for example if

913
00:36:58,780 --> 00:36:59,799
you have apps that are using an

914
00:36:59,799 --> 00:37:01,510
encryption at some point that data has

915
00:37:01,510 --> 00:37:03,130
to be decoded for you to view it on your

916
00:37:03,130 --> 00:37:06,190
phone the malware will hook that pasta's

917
00:37:06,190 --> 00:37:07,540
words actually shown and then they can

918
00:37:07,540 --> 00:37:08,859
get the plaintext out without having to

919
00:37:08,859 --> 00:37:10,990
worry about the encryption piece that's

920
00:37:10,990 --> 00:37:12,430
all done through the city of substrate

921
00:37:12,430 --> 00:37:14,890
library that we discovered that's kind

922
00:37:14,890 --> 00:37:15,940
of at a high level what it looks like

923
00:37:15,940 --> 00:37:17,470
typically you wouldn't have the big red

924
00:37:17,470 --> 00:37:19,059
Pegasus lock there but once it's in

925
00:37:19,059 --> 00:37:21,069
everything kind of filters through for

926
00:37:21,069 --> 00:37:22,420
the apps that they've chosen to filter

927
00:37:22,420 --> 00:37:23,680
and hook through they can all filter it

928
00:37:23,680 --> 00:37:25,240
look at every single function and go

929
00:37:25,240 --> 00:37:28,480
from there you know we and we discovered

930
00:37:28,480 --> 00:37:29,650
a lot of different apps that were out

931
00:37:29,650 --> 00:37:31,420
there and the way we did this those are

932
00:37:31,420 --> 00:37:31,840
looking

933
00:37:31,840 --> 00:37:34,240
through the we're looking through the

934
00:37:34,240 --> 00:37:35,650
code and all the binaries and samples

935
00:37:35,650 --> 00:37:38,560
and there's a large large table of

936
00:37:38,560 --> 00:37:40,090
exported functions when we're looking

937
00:37:40,090 --> 00:37:42,340
through it and that list basically list

938
00:37:42,340 --> 00:37:43,540
every single applications they've

939
00:37:43,540 --> 00:37:44,860
written a hook or some sort of method

940
00:37:44,860 --> 00:37:47,620
for in order to tackle and it covers

941
00:37:47,620 --> 00:37:49,030
kind of the common ones that you find

942
00:37:49,030 --> 00:37:50,380
out there additionally what we

943
00:37:50,380 --> 00:37:52,360
discovered is that you know the spyware

944
00:37:52,360 --> 00:37:54,190
malware could could be packaged in a way

945
00:37:54,190 --> 00:37:55,810
where they depending on where you want

946
00:37:55,810 --> 00:37:57,850
to target different dialogues for the

947
00:37:57,850 --> 00:37:59,200
app hooking could be function so for

948
00:37:59,200 --> 00:38:01,750
example from the other earlier slides we

949
00:38:01,750 --> 00:38:03,100
had one that came down with vibrant

950
00:38:03,100 --> 00:38:05,440
modules what's that module and I believe

951
00:38:05,440 --> 00:38:07,420
another one for some data collection as

952
00:38:07,420 --> 00:38:10,330
well on for some apps but within looking

953
00:38:10,330 --> 00:38:11,710
at the other kind of functions and stuff

954
00:38:11,710 --> 00:38:13,420
there are lots of different export

955
00:38:13,420 --> 00:38:14,860
functions for hooking good variety

956
00:38:14,860 --> 00:38:16,150
different messages that are out there as

957
00:38:16,150 --> 00:38:18,190
well or applications out there as well

958
00:38:18,190 --> 00:38:20,290
so it's a very expensive list and all it

959
00:38:20,290 --> 00:38:22,030
takes is another in our list to go and

960
00:38:22,030 --> 00:38:23,530
add more hooks and function to further

961
00:38:23,530 --> 00:38:26,410
enhance the malware out there then

962
00:38:26,410 --> 00:38:27,280
provide a little bit of historical

963
00:38:27,280 --> 00:38:28,750
context in terms of why this is

964
00:38:28,750 --> 00:38:30,970
incredibly interesting and why we've got

965
00:38:30,970 --> 00:38:33,310
a lot of news is that you know typically

966
00:38:33,310 --> 00:38:35,320
you know there's been very few remote

967
00:38:35,320 --> 00:38:36,880
jailbreak that have made public out

968
00:38:36,880 --> 00:38:39,370
there that really require almost zeros

969
00:38:39,370 --> 00:38:41,710
one single click user interaction right

970
00:38:41,710 --> 00:38:43,120
this was simply just sent a link they

971
00:38:43,120 --> 00:38:44,290
click on the link and the device is

972
00:38:44,290 --> 00:38:46,750
exploited the last similar one that was

973
00:38:46,750 --> 00:38:48,850
actually public was probably about a

974
00:38:48,850 --> 00:38:51,520
jailbreak called JailbreakMe version 3

975
00:38:51,520 --> 00:38:54,010
actually where you would just go to a

976
00:38:54,010 --> 00:38:56,170
website jailbreak me and it would use a

977
00:38:56,170 --> 00:38:58,590
PDF or a font exploit in order to

978
00:38:58,590 --> 00:39:00,490
jailbreak the device remotely but in

979
00:39:00,490 --> 00:39:01,720
that case that was a public jailbreak

980
00:39:01,720 --> 00:39:03,250
the user opted in kyo break in their

981
00:39:03,250 --> 00:39:04,960
device in this case dis remotely

982
00:39:04,960 --> 00:39:06,190
jailbreak your device without actually

983
00:39:06,190 --> 00:39:07,360
accepting that you want this to happen

984
00:39:07,360 --> 00:39:09,820
essentially and also additionally with

985
00:39:09,820 --> 00:39:11,470
some of the bugs as max explained as

986
00:39:11,470 --> 00:39:14,680
well is that they can be triggered from

987
00:39:14,680 --> 00:39:16,270
an app sandbox as well so while while

988
00:39:16,270 --> 00:39:18,000
the method of delivery in this case was

989
00:39:18,000 --> 00:39:20,230
easier to do through just an SMS text

990
00:39:20,230 --> 00:39:22,510
message or via social networks for the

991
00:39:22,510 --> 00:39:24,610
clicking on the link if you were to get

992
00:39:24,610 --> 00:39:26,080
a malicious application installed on a

993
00:39:26,080 --> 00:39:28,090
device it could also exploit these

994
00:39:28,090 --> 00:39:29,620
vulnerabilities before they got patched

995
00:39:29,620 --> 00:39:32,740
and go through the process as well and

996
00:39:32,740 --> 00:39:34,930
so kind of the turn on finish up with a

997
00:39:34,930 --> 00:39:36,400
little bit of the work and observations

998
00:39:36,400 --> 00:39:38,080
that were going on is no remote

999
00:39:38,080 --> 00:39:39,700
jailbreak in the public are extremely

1000
00:39:39,700 --> 00:39:41,110
rare obviously five years ago with last

1001
00:39:41,110 --> 00:39:41,829
time we founded

1002
00:39:41,829 --> 00:39:44,170
um but this is another one we do there

1003
00:39:44,170 --> 00:39:45,609
we it's always believed that they were

1004
00:39:45,609 --> 00:39:47,079
out there in the private and this kind

1005
00:39:47,079 --> 00:39:48,219
of just proved the case that they are

1006
00:39:48,219 --> 00:39:50,289
there additionally it's rare to find

1007
00:39:50,289 --> 00:39:52,059
kind of this highly engineered piece of

1008
00:39:52,059 --> 00:39:53,440
spyware malware that we found in terms

1009
00:39:53,440 --> 00:39:55,989
of what we terms the comprehensiveness

1010
00:39:55,989 --> 00:39:57,819
of the hooks that were there the testing

1011
00:39:57,819 --> 00:39:59,499
process all digital features terms the

1012
00:39:59,499 --> 00:40:01,749
Haida Strax office Kate encrypted

1013
00:40:01,749 --> 00:40:03,400
different payloads cycling through

1014
00:40:03,400 --> 00:40:05,009
single-use links and stuff like that

1015
00:40:05,009 --> 00:40:08,229
very highly advanced of a you know very

1016
00:40:08,229 --> 00:40:09,880
big piece of software that's exist there

1017
00:40:09,880 --> 00:40:12,459
and this is a kind of differentiate this

1018
00:40:12,459 --> 00:40:14,349
between like this is commercially

1019
00:40:14,349 --> 00:40:15,459
developers to stuff that's kind of

1020
00:40:15,459 --> 00:40:16,869
homegrown on the side where there's a

1021
00:40:16,869 --> 00:40:18,700
lot of extra effort that was put into

1022
00:40:18,700 --> 00:40:20,650
building this sort of stuff as well and

1023
00:40:20,650 --> 00:40:21,969
then we're continuing to hunt down other

1024
00:40:21,969 --> 00:40:23,469
sorts of products like this as well out

1025
00:40:23,469 --> 00:40:25,150
of the ecosystem using a variety of

1026
00:40:25,150 --> 00:40:26,499
different data and sensor network that

1027
00:40:26,499 --> 00:40:29,410
we have out there and finally I want to

1028
00:40:29,410 --> 00:40:30,700
give thanks to all the people that were

1029
00:40:30,700 --> 00:40:32,259
involved is it wasn't just three of us

1030
00:40:32,259 --> 00:40:33,670
it was actually a lot of collaboration

1031
00:40:33,670 --> 00:40:35,079
with the citizen lab team out there

1032
00:40:35,079 --> 00:40:36,819
we had a large team at Lookout that

1033
00:40:36,819 --> 00:40:38,200
involved all those different binaries

1034
00:40:38,200 --> 00:40:39,219
that we showed everything ended

1035
00:40:39,219 --> 00:40:41,140
reverse-engineered understood so we had

1036
00:40:41,140 --> 00:40:42,819
our entire team jump on board with that

1037
00:40:42,819 --> 00:40:45,009
which is great we had a couple different

1038
00:40:45,009 --> 00:40:46,390
out that research organizations that

1039
00:40:46,390 --> 00:40:47,589
helped as well in terms of helping with

1040
00:40:47,589 --> 00:40:48,969
the technical writing and further

1041
00:40:48,969 --> 00:40:50,140
understanding of the vulnerability

1042
00:40:50,140 --> 00:40:52,930
analysis so that was extremely great and

1043
00:40:52,930 --> 00:40:54,160
then finally a bunch of links that you

1044
00:40:54,160 --> 00:40:55,930
can get from the slide deck as well the

1045
00:40:55,930 --> 00:40:58,359
citizen lab logs and we talked about the

1046
00:40:58,359 --> 00:41:00,190
initial bomb lookout blog and then

1047
00:41:00,190 --> 00:41:02,259
actually last night we published the the

1048
00:41:02,259 --> 00:41:03,489
full technical teardown it's about

1049
00:41:03,489 --> 00:41:06,190
40-plus pages PDF that explains very

1050
00:41:06,190 --> 00:41:08,109
clear detail how all the vulnerabilities

1051
00:41:08,109 --> 00:41:10,690
work that Maxis explained and all the

1052
00:41:10,690 --> 00:41:12,160
nuances of your interest in that you can

1053
00:41:12,160 --> 00:41:14,349
go and download that PDF as well get all

1054
00:41:14,349 --> 00:41:17,440
the details but with that thank you very

1055
00:41:17,440 --> 00:41:19,059
much and you can open it up for

1056
00:41:19,059 --> 00:41:19,420
questions

1057
00:41:19,420 --> 00:41:29,949
[Applause]

1058
00:41:40,530 --> 00:41:43,689
[Music]

1059
00:41:57,980 --> 00:42:00,690
yes the sim card data that was really

1060
00:42:00,690 --> 00:42:02,849
collected was kind of what was kind of

1061
00:42:02,849 --> 00:42:04,950
always the sim operator where it was

1062
00:42:04,950 --> 00:42:07,440
from what kind of a country of origin of

1063
00:42:07,440 --> 00:42:10,109
the operator of the sim card and where

1064
00:42:10,109 --> 00:42:11,730
was issued basically so that could be

1065
00:42:11,730 --> 00:42:13,349
used for tracking information in their

1066
00:42:13,349 --> 00:42:14,849
back-end at one point the additional

1067
00:42:14,849 --> 00:42:16,109
piece of information I have yeah

1068
00:42:16,109 --> 00:42:18,150
but we didn't see any notion at least in

1069
00:42:18,150 --> 00:42:19,609
the samples that we encountered for

1070
00:42:19,609 --> 00:42:21,810
further network based attack from that

1071
00:42:21,810 --> 00:42:22,980
but at this point they already

1072
00:42:22,980 --> 00:42:24,300
compromised your device so they can

1073
00:42:24,300 --> 00:42:27,470
launch it ever attack they want

1074
00:42:35,130 --> 00:42:42,520
okay oh hi I just I just saw did it did

1075
00:42:42,520 --> 00:42:44,800
you ask you sip to exfiltrate the data

1076
00:42:44,800 --> 00:42:47,470
is that were you saying I can repeat the

1077
00:42:47,470 --> 00:42:50,140
question just you said that it used sip

1078
00:42:50,140 --> 00:42:53,710
to transport the data so it's using sip

1079
00:42:53,710 --> 00:42:55,330
to exfiltrate the data off the divides

1080
00:42:55,330 --> 00:42:58,900
correct not so we're UDP of a sort of 50

1081
00:42:58,900 --> 00:43:05,680
60 so sort of using UDP over for 50 60

1082
00:43:05,680 --> 00:43:11,620
so the thing encrypted all the user like

1083
00:43:11,620 --> 00:43:13,540
their own certificate and embed the

1084
00:43:13,540 --> 00:43:14,200
octoroks

1085
00:43:14,200 --> 00:43:16,510
for communicating with stressed tip

1086
00:43:16,510 --> 00:43:30,820
protocol this high such a serious

1087
00:43:30,820 --> 00:43:33,850
product probably has an android support

1088
00:43:33,850 --> 00:43:39,070
and other platforms we see maybe did you

1089
00:43:39,070 --> 00:43:41,410
see anything yes so they are I mean if

1090
00:43:41,410 --> 00:43:42,670
you look if you look in the reports

1091
00:43:42,670 --> 00:43:45,160
actually they market additional products

1092
00:43:45,160 --> 00:43:47,910
for Android flat and blackberry as well

1093
00:43:47,910 --> 00:43:50,620
this study that we did was strictly the

1094
00:43:50,620 --> 00:43:52,780
iOS related piece but we do know that

1095
00:43:52,780 --> 00:43:54,160
there are other there's an Android

1096
00:43:54,160 --> 00:43:57,390
product out there as well for sure

1097
00:44:02,730 --> 00:44:06,039
if there are more you guys can catch us

1098
00:44:06,039 --> 00:44:17,710
you'll be around assume from since this

1099
00:44:17,710 --> 00:44:21,279
is under answered like the the operator

1100
00:44:21,279 --> 00:44:23,500
details like we see the trying to

1101
00:44:23,500 --> 00:44:26,319
capture like I'm a stoplight like all

1102
00:44:26,319 --> 00:44:29,589
that since it's the phone used to to

1103
00:44:29,589 --> 00:44:31,599
communicate with with the network I

1104
00:44:31,599 --> 00:44:33,519
guess as well as all the simply tales

1105
00:44:33,519 --> 00:44:39,400
that are available to is so their goal

1106
00:44:39,400 --> 00:44:41,170
is to get as much information about the

1107
00:44:41,170 --> 00:44:42,730
target as possible right so SIM card is

1108
00:44:42,730 --> 00:44:44,500
just one information of you know what

1109
00:44:44,500 --> 00:44:46,119
terrors are operating on where the

1110
00:44:46,119 --> 00:44:48,250
device is any sort of information they

1111
00:44:48,250 --> 00:44:49,779
can get in terms of that and then they

1112
00:44:49,779 --> 00:44:51,069
can use that once they have the

1113
00:44:51,069 --> 00:44:52,119
information then it's a matter of

1114
00:44:52,119 --> 00:44:53,920
whoever's using the product how they

1115
00:44:53,920 --> 00:44:55,089
want to use the information once it's

1116
00:44:55,089 --> 00:44:56,799
been received so this is another piece

1117
00:44:56,799 --> 00:44:58,839
of information gathering if there are

1118
00:44:58,839 --> 00:45:00,789
more details in a report like what

1119
00:45:00,789 --> 00:45:02,650
exactly what fields from assume

1120
00:45:02,650 --> 00:45:11,160
information their region and using okay

1121
00:45:11,160 --> 00:45:13,810
thank you very much thank you

1122
00:45:13,810 --> 00:45:17,969
[Applause]

