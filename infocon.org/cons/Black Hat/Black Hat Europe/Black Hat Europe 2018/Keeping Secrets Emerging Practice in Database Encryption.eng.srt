1
00:00:00,030 --> 00:00:06,899
all right coming in okay thanks everyone

2
00:00:04,350 --> 00:00:09,379
I appreciate a good turnout

3
00:00:06,899 --> 00:00:12,509
so today I'm going to be talking about

4
00:00:09,380 --> 00:00:14,429
kind of the intersection of Applied

5
00:00:12,509 --> 00:00:18,270
Security and a lot of developments have

6
00:00:14,429 --> 00:00:20,850
been going on with emerging encryption

7
00:00:18,270 --> 00:00:22,590
in databases this is a talk really

8
00:00:20,850 --> 00:00:25,980
geared towards architects and defenders

9
00:00:22,590 --> 00:00:27,869
this is not math heavy it's not you know

10
00:00:25,980 --> 00:00:30,830
any new crypto that's being introduced

11
00:00:27,869 --> 00:00:33,210
it's really trying to kind of bridge

12
00:00:30,830 --> 00:00:36,390
several different emerging areas where

13
00:00:33,210 --> 00:00:37,290
even among I think a lot of expert

14
00:00:36,390 --> 00:00:39,120
engineers there's a lot of

15
00:00:37,290 --> 00:00:41,160
misunderstanding both in terms of like

16
00:00:39,120 --> 00:00:42,930
commercial products open-source you know

17
00:00:41,160 --> 00:00:45,629
really popular databases as well as sort

18
00:00:42,930 --> 00:00:47,789
of what's practical and what companies

19
00:00:45,629 --> 00:00:49,890
and organizations are really adopting so

20
00:00:47,789 --> 00:00:52,860
hopefully yeah hopefully we'll come away

21
00:00:49,890 --> 00:00:57,420
with some understanding of those two

22
00:00:52,860 --> 00:00:59,550
insights kind of bridged oh I'm I'm Ken

23
00:00:57,420 --> 00:01:03,239
white this is a by the best way to pay

24
00:00:59,550 --> 00:01:05,700
me is on Twitter by way of background I

25
00:01:03,239 --> 00:01:09,950
think some folks know I've been involved

26
00:01:05,700 --> 00:01:13,080
in in large-scale global architecture

27
00:01:09,950 --> 00:01:17,640
safety critical systems for 20 years or

28
00:01:13,080 --> 00:01:18,990
so if you've you've taken any new drug

29
00:01:17,640 --> 00:01:20,460
compound that was developed in the last

30
00:01:18,990 --> 00:01:21,539
15 years there's a pretty good chance it

31
00:01:20,460 --> 00:01:24,559
went through one of the systems that I

32
00:01:21,540 --> 00:01:27,180
built so a lot of focus around

33
00:01:24,560 --> 00:01:27,780
protecting you know really sensitive

34
00:01:27,180 --> 00:01:32,640
workloads

35
00:01:27,780 --> 00:01:36,570
healthcare data clinical data some law

36
00:01:32,640 --> 00:01:39,750
enforcement work a little bit with with

37
00:01:36,570 --> 00:01:42,329
a homeland security and sort of on the

38
00:01:39,750 --> 00:01:44,280
community side some of you may know the

39
00:01:42,329 --> 00:01:45,898
work that we did through the open crypto

40
00:01:44,280 --> 00:01:49,350
audit project with the TrueCrypt audit

41
00:01:45,899 --> 00:01:52,200
with the Linux Foundation and with the

42
00:01:49,350 --> 00:01:53,640
open SSL audit so I come at this from

43
00:01:52,200 --> 00:01:55,920
kind of a different perspective my

44
00:01:53,640 --> 00:02:01,530
background is really more in signals

45
00:01:55,920 --> 00:02:03,590
engineering and most of the sort of you

46
00:02:01,530 --> 00:02:07,500
know applied encryption and and network

47
00:02:03,590 --> 00:02:08,959
security was sort of developed along the

48
00:02:07,500 --> 00:02:11,810
way it's I'm

49
00:02:08,959 --> 00:02:14,060
you know not a academic photographer

50
00:02:11,810 --> 00:02:16,689
anyway just recapping these are some of

51
00:02:14,060 --> 00:02:20,030
the goals in conversations I have with

52
00:02:16,689 --> 00:02:23,750
really really talented people with you

53
00:02:20,030 --> 00:02:26,709
know great insights and depth in their

54
00:02:23,750 --> 00:02:29,870
fields it's clear to me that there's

55
00:02:26,709 --> 00:02:31,370
there's there's really a lot of

56
00:02:29,870 --> 00:02:33,439
misunderstanding I think when people

57
00:02:31,370 --> 00:02:36,349
talk about encrypted databases and so

58
00:02:33,439 --> 00:02:39,019
hopefully what we can sort of break that

59
00:02:36,349 --> 00:02:40,790
down a little bit today I do want to

60
00:02:39,019 --> 00:02:42,799
look at some emerging methods we'll talk

61
00:02:40,790 --> 00:02:44,298
briefly about some academic things that

62
00:02:42,799 --> 00:02:46,989
are developing but I really want to

63
00:02:44,299 --> 00:02:50,629
focus more in sort of you know practical

64
00:02:46,989 --> 00:02:52,340
implications and and you know sort of

65
00:02:50,629 --> 00:02:54,739
success patterns that that we're seeing

66
00:02:52,340 --> 00:02:57,530
emerge and again this is really orient

67
00:02:54,739 --> 00:03:01,819
towards architects and defenders so

68
00:02:57,530 --> 00:03:04,730
let's take a quick tour down the history

69
00:03:01,819 --> 00:03:06,409
of database encryption almost every time

70
00:03:04,730 --> 00:03:08,149
there's a major breach with you know we

71
00:03:06,409 --> 00:03:10,790
saw this with anthem and with Equifax

72
00:03:08,150 --> 00:03:12,109
there's there's always some pundit that

73
00:03:10,790 --> 00:03:13,519
gets on and the headline reads something

74
00:03:12,109 --> 00:03:15,859
like if only the database was encrypted

75
00:03:13,519 --> 00:03:18,739
you know this wouldn't be a problem so

76
00:03:15,859 --> 00:03:22,549
and you sort of see that you know part

77
00:03:18,739 --> 00:03:25,159
of it through marketing and sort of

78
00:03:22,549 --> 00:03:27,909
product you know marketing and

79
00:03:25,159 --> 00:03:31,760
management I sort of understand that but

80
00:03:27,909 --> 00:03:33,739
it the when we talk about encryption

81
00:03:31,760 --> 00:03:37,220
it's one of the first question to ask is

82
00:03:33,739 --> 00:03:40,159
what are you encrypting you know but

83
00:03:37,220 --> 00:03:42,470
what layer so I think it's you know

84
00:03:40,159 --> 00:03:45,978
pretty common that most access from

85
00:03:42,470 --> 00:03:48,169
clients either native clients from

86
00:03:45,979 --> 00:03:50,180
developers or through web applications

87
00:03:48,169 --> 00:03:53,590
or these days hopefully connecting with

88
00:03:50,180 --> 00:03:55,819
secure transport in the early days

89
00:03:53,590 --> 00:04:00,979
Oracle and Microsoft sort of developed

90
00:03:55,819 --> 00:04:03,500
some native kind of quirky to ramada

91
00:04:00,979 --> 00:04:05,150
fication zuv of encryption over TCP but

92
00:04:03,500 --> 00:04:08,599
pretty much most of the primitives now

93
00:04:05,150 --> 00:04:11,870
under the hood are reasonably modern and

94
00:04:08,599 --> 00:04:14,599
properly constructed TLS so storage

95
00:04:11,870 --> 00:04:16,250
volume encryption this seems to me to be

96
00:04:14,599 --> 00:04:17,149
sort of a basic thing that there's a lot

97
00:04:16,250 --> 00:04:19,880
of misunderstanding

98
00:04:17,149 --> 00:04:21,229
almost every cloud database you know the

99
00:04:19,880 --> 00:04:23,960
major three that you know Amazon

100
00:04:21,230 --> 00:04:26,540
Google and Microsoft you'll see this all

101
00:04:23,960 --> 00:04:32,270
the time that your data are encrypted at

102
00:04:26,540 --> 00:04:34,880
rest but that's really useful for you

103
00:04:32,270 --> 00:04:36,950
know laptops and for desktops I guess

104
00:04:34,880 --> 00:04:38,570
with sensitive data but one of the

105
00:04:36,950 --> 00:04:41,000
points I want to make is that volume

106
00:04:38,570 --> 00:04:43,820
encryption kind of addresses the eBay

107
00:04:41,000 --> 00:04:46,010
and Craigslist attack ride so when

108
00:04:43,820 --> 00:04:47,180
servers are retired and their repurposes

109
00:04:46,010 --> 00:04:49,670
sit on a shelf for a few years and then

110
00:04:47,180 --> 00:04:51,050
eventually someone buys them and so like

111
00:04:49,670 --> 00:04:52,970
probably Social Security numbers credit

112
00:04:51,050 --> 00:04:55,790
card numbers and you know insurance

113
00:04:52,970 --> 00:04:59,390
records and things while it's true that

114
00:04:55,790 --> 00:05:03,350
it's an important control you know it

115
00:04:59,390 --> 00:05:06,130
prevents sort of petty theft and you

116
00:05:03,350 --> 00:05:09,260
know leaks that way it's only a tiny

117
00:05:06,130 --> 00:05:12,290
it's only a tiny step so so I'm assuming

118
00:05:09,260 --> 00:05:14,330
that for any deployed production

119
00:05:12,290 --> 00:05:16,640
database that that volume encryption is

120
00:05:14,330 --> 00:05:19,180
just a given and in you should to as

121
00:05:16,640 --> 00:05:21,800
defenders and architects that's

122
00:05:19,180 --> 00:05:23,900
definitely not always the case with with

123
00:05:21,800 --> 00:05:27,500
some of the mid-size cloud providers

124
00:05:23,900 --> 00:05:32,000
even I think it was two and a half years

125
00:05:27,500 --> 00:05:35,230
ago on a not big three and a bit of but

126
00:05:32,000 --> 00:05:38,360
a smaller tier but well known

127
00:05:35,230 --> 00:05:41,180
infrastructure service provider I was

128
00:05:38,360 --> 00:05:44,750
playing around with actually DM crypt

129
00:05:41,180 --> 00:05:49,010
and was trying to do some some sort of

130
00:05:44,750 --> 00:05:52,220
simple exercises and I just did a I just

131
00:05:49,010 --> 00:05:53,840
did a cat on the low you know on the raw

132
00:05:52,220 --> 00:05:58,480
fall um-- and I started getting all

133
00:05:53,840 --> 00:06:01,489
kinds of like classified ads and like

134
00:05:58,480 --> 00:06:04,430
sequel raw sequel statements and data

135
00:06:01,490 --> 00:06:08,750
and dating profiles and stuff well it

136
00:06:04,430 --> 00:06:10,310
turned out so this company used SSDs but

137
00:06:08,750 --> 00:06:12,890
they didn't they didn't wipe the disks

138
00:06:10,310 --> 00:06:15,020
between provisioning they didn't even

139
00:06:12,890 --> 00:06:16,400
encrypted and actually that's the other

140
00:06:15,020 --> 00:06:19,130
thing too is that you'll talk to some

141
00:06:16,400 --> 00:06:20,870
kind of more seasoned auditors sometimes

142
00:06:19,130 --> 00:06:23,630
and they people spend a lot of time

143
00:06:20,870 --> 00:06:26,360
sometimes about you know disk

144
00:06:23,630 --> 00:06:28,250
destruction it's kind of not an issue if

145
00:06:26,360 --> 00:06:30,560
the volume is encrypted if you destroy

146
00:06:28,250 --> 00:06:32,960
the key then it doesn't matter if you

147
00:06:30,560 --> 00:06:35,389
know you've done a ride over one time or

148
00:06:32,960 --> 00:06:37,729
you know however many times the to keep

149
00:06:35,389 --> 00:06:39,290
the auditors happy if you've got full

150
00:06:37,729 --> 00:06:41,449
volume encryption and the keys gone and

151
00:06:39,290 --> 00:06:47,150
the data are destroyed and increasingly

152
00:06:41,449 --> 00:06:48,530
the guidance from NIST and from you know

153
00:06:47,150 --> 00:06:54,440
the payment card industry I think is

154
00:06:48,530 --> 00:06:57,919
starting to reflect that so as sort of

155
00:06:54,440 --> 00:07:00,469
you know really mature davidís

156
00:06:57,919 --> 00:07:02,389
management systems kind of evolved one

157
00:07:00,470 --> 00:07:04,880
of the first things that that was

158
00:07:02,389 --> 00:07:06,560
developed is what sort of it's kind of

159
00:07:04,880 --> 00:07:08,479
confusing because it's a you can

160
00:07:06,560 --> 00:07:10,039
capitalize or not capitalize TDE but

161
00:07:08,479 --> 00:07:11,840
transparent data encryption so the idea

162
00:07:10,039 --> 00:07:14,870
is that okay you've encrypted the disk

163
00:07:11,840 --> 00:07:19,760
volume that you know we're data said but

164
00:07:14,870 --> 00:07:22,220
within that is there a way for a

165
00:07:19,760 --> 00:07:24,139
database administrator or people who do

166
00:07:22,220 --> 00:07:26,690
you know have some operational oversight

167
00:07:24,139 --> 00:07:30,530
to not be able to see application data

168
00:07:26,690 --> 00:07:33,289
and so you know there have been attempts

169
00:07:30,530 --> 00:07:35,479
that sort of multi key and some other

170
00:07:33,289 --> 00:07:40,130
schemes Oracle has like an encrypted

171
00:07:35,479 --> 00:07:44,659
wallet most of the commercial databases

172
00:07:40,130 --> 00:07:47,210
have ties into key management protocol

173
00:07:44,660 --> 00:07:51,139
for hardware security modules for HSMs

174
00:07:47,210 --> 00:07:53,388
for four keys but really you're you're

175
00:07:51,139 --> 00:07:56,690
not it's kind of a weak model because

176
00:07:53,389 --> 00:07:58,639
what what table level data encryption

177
00:07:56,690 --> 00:08:00,110
does it says okay we have to log into

178
00:07:58,639 --> 00:08:03,050
the database you have some access

179
00:08:00,110 --> 00:08:05,870
privileges within a database and then

180
00:08:03,050 --> 00:08:08,810
you can see the the plaintext okay well

181
00:08:05,870 --> 00:08:11,389
it's I you know that is one layer and

182
00:08:08,810 --> 00:08:15,320
maybe that's that's helpful for certain

183
00:08:11,389 --> 00:08:17,780
use cases but it's not you know it's not

184
00:08:15,320 --> 00:08:19,130
this strong as the the strongest type of

185
00:08:17,780 --> 00:08:22,820
encryption you can do is client side

186
00:08:19,130 --> 00:08:25,250
where from the application or the driver

187
00:08:22,820 --> 00:08:27,919
side data encrypted so what's seen

188
00:08:25,250 --> 00:08:30,080
centrally in the DB is this ciphertext

189
00:08:27,919 --> 00:08:33,348
right and these are just some examples

190
00:08:30,080 --> 00:08:37,728
of sort of popular databases that have

191
00:08:33,349 --> 00:08:40,760
those with Microsoft and they're sort of

192
00:08:37,729 --> 00:08:43,430
evolving models for sequel server

193
00:08:40,760 --> 00:08:46,880
they've over the last few years

194
00:08:43,429 --> 00:08:49,969
enabled a new feature I think sandy

195
00:08:46,880 --> 00:08:51,770
Kumar who's now at Brown was part of the

196
00:08:49,970 --> 00:08:54,130
team at Microsoft Research that that

197
00:08:51,770 --> 00:08:56,589
really helped kind of build some of this

198
00:08:54,130 --> 00:08:59,360
but transparent data encryption

199
00:08:56,589 --> 00:09:01,730
server-side as well as client-side so

200
00:08:59,360 --> 00:09:03,470
what that means is there's two sort of

201
00:09:01,730 --> 00:09:04,640
common modes that that you'll see out

202
00:09:03,470 --> 00:09:09,140
there once deterministic modes

203
00:09:04,640 --> 00:09:11,779
randomised deterministic is if my social

204
00:09:09,140 --> 00:09:14,630
security number is you know 673 then

205
00:09:11,779 --> 00:09:16,040
it's always going to encrypt to foo six

206
00:09:14,630 --> 00:09:17,570
seven threes four six seven three is

207
00:09:16,040 --> 00:09:20,060
four so every time that's encrypted it's

208
00:09:17,570 --> 00:09:21,770
the same ciphertext back and that's

209
00:09:20,060 --> 00:09:24,619
useful because then you can index it and

210
00:09:21,770 --> 00:09:26,420
you can do point queries and you can do

211
00:09:24,620 --> 00:09:29,810
others you know simple semantics to get

212
00:09:26,420 --> 00:09:31,400
those those data back the stronger form

213
00:09:29,810 --> 00:09:35,390
is what you traditionally think of an

214
00:09:31,400 --> 00:09:37,970
encryption which is regardless of what

215
00:09:35,390 --> 00:09:39,800
the plaintext looks like the ciphertext

216
00:09:37,970 --> 00:09:41,570
should look differently and so that's

217
00:09:39,800 --> 00:09:43,630
randomized encryption and the primitives

218
00:09:41,570 --> 00:09:47,779
were pre standard I mean this is a ES

219
00:09:43,630 --> 00:09:51,110
CBC construction from GCM the problem is

220
00:09:47,779 --> 00:09:52,700
if you index that then you you don't

221
00:09:51,110 --> 00:09:54,950
really have anything you can't your

222
00:09:52,700 --> 00:09:56,209
database isn't terribly usable so if for

223
00:09:54,950 --> 00:09:58,010
example you encrypt on social security

224
00:09:56,209 --> 00:10:01,339
number but you use traditional

225
00:09:58,010 --> 00:10:05,600
randomized like AES encryption and you

226
00:10:01,339 --> 00:10:08,240
say select blah blah from where Social

227
00:10:05,600 --> 00:10:09,709
Security number is X it doesn't work it

228
00:10:08,240 --> 00:10:11,330
would work if you did a full table scan

229
00:10:09,709 --> 00:10:12,800
and in tons of traffic back and forth

230
00:10:11,330 --> 00:10:14,630
but it doesn't work in the traditional

231
00:10:12,800 --> 00:10:15,949
sense because you can't index it because

232
00:10:14,630 --> 00:10:17,209
that's social security number if it's

233
00:10:15,950 --> 00:10:20,060
represent more than once it's going to

234
00:10:17,209 --> 00:10:22,660
be is gonna be encrypted in a different

235
00:10:20,060 --> 00:10:24,800
way and so the index doesn't work so

236
00:10:22,660 --> 00:10:28,160
strongest controls available a

237
00:10:24,800 --> 00:10:29,660
randomized encryption which means you

238
00:10:28,160 --> 00:10:32,199
know from a confidentiality perspective

239
00:10:29,660 --> 00:10:34,699
but the trade-off is you have to have

240
00:10:32,200 --> 00:10:36,170
you have to do a point query range

241
00:10:34,700 --> 00:10:40,400
towards things like that on other

242
00:10:36,170 --> 00:10:41,660
columns so sometimes their use cases

243
00:10:40,400 --> 00:10:44,209
that allow that you know if you've got a

244
00:10:41,660 --> 00:10:45,800
really rich set of tables and maybe only

245
00:10:44,209 --> 00:10:48,260
a couple of fields a couple of columns

246
00:10:45,800 --> 00:10:51,079
that that need that you know card date

247
00:10:48,260 --> 00:10:52,670
or something else that may be useful but

248
00:10:51,080 --> 00:10:54,430
but mostly people are turning on

249
00:10:52,670 --> 00:10:56,680
deterministic encryption

250
00:10:54,430 --> 00:10:58,540
and also Microsoft I don't know if

251
00:10:56,680 --> 00:11:04,500
people have followed this closely but

252
00:10:58,540 --> 00:11:08,829
the Intel SGX Enclave the built-in

253
00:11:04,500 --> 00:11:11,110
crypto module that on some of the newer

254
00:11:08,830 --> 00:11:13,990
Intel chips Microsoft is doing a beta

255
00:11:11,110 --> 00:11:15,940
version where you can you're essentially

256
00:11:13,990 --> 00:11:18,520
doing server-side encryption and you're

257
00:11:15,940 --> 00:11:20,440
delegating your key it's strongly

258
00:11:18,520 --> 00:11:23,290
sandbox it strongly contained within

259
00:11:20,440 --> 00:11:28,000
that SGX with some caveats there are

260
00:11:23,290 --> 00:11:29,620
some attacks including phoning home from

261
00:11:28,000 --> 00:11:33,490
Intel like a hardwired in the chip

262
00:11:29,620 --> 00:11:34,870
that's a different talk but but as far

263
00:11:33,490 --> 00:11:36,670
as I'm aware that's not sort of for

264
00:11:34,870 --> 00:11:39,430
general release yet it's it's something

265
00:11:36,670 --> 00:11:41,920
that is sort of still in preview and in

266
00:11:39,430 --> 00:11:46,719
any event it's it is a delegated key

267
00:11:41,920 --> 00:11:48,910
model something that is pretty promising

268
00:11:46,720 --> 00:11:51,370
and still exists to some extent in

269
00:11:48,910 --> 00:11:55,420
libraries and things this quick DB this

270
00:11:51,370 --> 00:11:58,240
was Poppa and several folks at MIT kind

271
00:11:55,420 --> 00:12:02,439
of developed this it's um it's kind of a

272
00:11:58,240 --> 00:12:05,920
mixed model where the some types of

273
00:12:02,440 --> 00:12:11,589
encryption is our randomized and others

274
00:12:05,920 --> 00:12:14,380
are deterministic and highly performant

275
00:12:11,589 --> 00:12:15,760
I think elements of that were used in

276
00:12:14,380 --> 00:12:18,120
some early versions of sequel server I'm

277
00:12:15,760 --> 00:12:20,830
not sure if that lineage still exists

278
00:12:18,120 --> 00:12:23,950
Google did some work with encrypted

279
00:12:20,830 --> 00:12:25,600
bigquery but again these are it was a

280
00:12:23,950 --> 00:12:28,060
proof-of-concept study as far as I'm

281
00:12:25,600 --> 00:12:29,500
aware and I I've been looking deeply and

282
00:12:28,060 --> 00:12:31,239
talking to Google product people as far

283
00:12:29,500 --> 00:12:35,140
as I'm aware there's not there's not a

284
00:12:31,240 --> 00:12:37,029
client-side encryption model now so

285
00:12:35,140 --> 00:12:39,880
there was an encrypted bigquery where

286
00:12:37,029 --> 00:12:42,520
data are encrypted plaintext before they

287
00:12:39,880 --> 00:12:44,079
go centrally but and it still exists on

288
00:12:42,520 --> 00:12:45,220
github but as far as I know no it's not

289
00:12:44,079 --> 00:12:47,620
a commercial offering I think it's

290
00:12:45,220 --> 00:12:50,730
because of performance but again in in

291
00:12:47,620 --> 00:12:52,839
the bigquery models that are sorry a

292
00:12:50,730 --> 00:12:54,730
services are available now it's custom

293
00:12:52,839 --> 00:12:58,839
range keys that are delegated to the

294
00:12:54,730 --> 00:13:02,770
cloud provider Oracle also both you know

295
00:12:58,839 --> 00:13:05,690
through through Amazon and in as well as

296
00:13:02,770 --> 00:13:07,340
work was cloud he allows you to do

297
00:13:05,690 --> 00:13:11,300
transparent data encryption at the

298
00:13:07,340 --> 00:13:15,290
column or or the table level with key

299
00:13:11,300 --> 00:13:16,490
delegation Postgres I'm hoping that

300
00:13:15,290 --> 00:13:17,990
there's gonna be some interesting

301
00:13:16,490 --> 00:13:19,640
developments in the next year too but

302
00:13:17,990 --> 00:13:21,980
because right now it's kind of

303
00:13:19,640 --> 00:13:23,600
roll-your-own it's you know there s

304
00:13:21,980 --> 00:13:26,540
decays and there are things that we use

305
00:13:23,600 --> 00:13:30,410
but but the docs basically say well just

306
00:13:26,540 --> 00:13:33,230
do PGP you know encryption and then you

307
00:13:30,410 --> 00:13:34,790
know built-in in your app and and that

308
00:13:33,230 --> 00:13:37,880
may work if you're starting Greenfield

309
00:13:34,790 --> 00:13:39,860
it may work for certain use cases the

310
00:13:37,880 --> 00:13:42,070
problem is you've got to do a pretty

311
00:13:39,860 --> 00:13:44,600
heavy amount of app application code

312
00:13:42,070 --> 00:13:46,070
modifying right - if you're if you're

313
00:13:44,600 --> 00:13:48,440
constantly putting helper functions in

314
00:13:46,070 --> 00:13:51,440
or calling special methods to encrypt

315
00:13:48,440 --> 00:13:53,960
decrypt in any event you're it's it's

316
00:13:51,440 --> 00:13:55,810
still gonna be server-side with with the

317
00:13:53,960 --> 00:13:58,400
techniques that are available today

318
00:13:55,810 --> 00:14:00,109
MongoDB a lot of people don't know this

319
00:13:58,400 --> 00:14:02,770
but there's a encrypted storage engine

320
00:14:00,110 --> 00:14:06,200
through the wired Tiger a storage engine

321
00:14:02,770 --> 00:14:09,260
that's a there's two flavors of that

322
00:14:06,200 --> 00:14:11,900
ones Enterprise the others they're cloud

323
00:14:09,260 --> 00:14:13,340
managed Atlas disclosure I think I had

324
00:14:11,900 --> 00:14:16,010
this in the background I'm on the

325
00:14:13,340 --> 00:14:18,770
product group at MongoDB so I have some

326
00:14:16,010 --> 00:14:20,810
insights into this the the current model

327
00:14:18,770 --> 00:14:24,530
is similar it's a customer delegated key

328
00:14:20,810 --> 00:14:26,959
it uses Amazon's kms or as yours key

329
00:14:24,530 --> 00:14:29,150
vault which upstream use hardware

330
00:14:26,960 --> 00:14:32,240
security modules but it is a delegated

331
00:14:29,150 --> 00:14:34,640
model the Enterprise Edition can do

332
00:14:32,240 --> 00:14:38,530
native integration with HSMs through the

333
00:14:34,640 --> 00:14:41,480
key management interface I don't know

334
00:14:38,530 --> 00:14:44,300
with Amazon you know that the speed of

335
00:14:41,480 --> 00:14:47,750
things that things are changing who

336
00:14:44,300 --> 00:14:49,400
knows but right now across there they're

337
00:14:47,750 --> 00:14:52,340
managed databases as far as I'm aware

338
00:14:49,400 --> 00:14:55,459
it's pretty much all server-side so

339
00:14:52,340 --> 00:14:58,760
delegated keys or you know purely Amazon

340
00:14:55,460 --> 00:15:00,620
manage keys to their credit Amazon has

341
00:14:58,760 --> 00:15:02,630
an incredible security team they have

342
00:15:00,620 --> 00:15:05,420
you know they've they've written her own

343
00:15:02,630 --> 00:15:10,370
native and formally verified you know

344
00:15:05,420 --> 00:15:14,329
crypto library that is you know gone

345
00:15:10,370 --> 00:15:17,460
through all kinds of reviews and testing

346
00:15:14,330 --> 00:15:18,600
but for client-side encryption your

347
00:15:17,460 --> 00:15:20,760
option right now is pretty much a

348
00:15:18,600 --> 00:15:21,570
software development kit and kind of you

349
00:15:20,760 --> 00:15:24,689
know rolling your own through your

350
00:15:21,570 --> 00:15:25,920
applications so I mentioned before one

351
00:15:24,690 --> 00:15:28,620
of the things that was kind of promising

352
00:15:25,920 --> 00:15:31,410
was this work out of MIT the Papa group

353
00:15:28,620 --> 00:15:35,960
of with DB let's talk about that for a

354
00:15:31,410 --> 00:15:38,610
second so well actually there's several

355
00:15:35,960 --> 00:15:42,920
there's several lines to this so as I

356
00:15:38,610 --> 00:15:46,500
mentioned before one of the models with

357
00:15:42,920 --> 00:15:50,459
centrally managed and in key delegated

358
00:15:46,500 --> 00:15:52,530
is I'm gonna limit what a DBA can do in

359
00:15:50,460 --> 00:15:54,270
almost every database system if you

360
00:15:52,530 --> 00:15:57,540
somewhere there's a root user somewhere

361
00:15:54,270 --> 00:16:01,079
there's a master god you know global

362
00:15:57,540 --> 00:16:04,530
cluster admin something so that that

363
00:16:01,080 --> 00:16:06,180
level of access can almost always create

364
00:16:04,530 --> 00:16:08,670
another user and then promote that user

365
00:16:06,180 --> 00:16:13,620
you know grant privileges so it's almost

366
00:16:08,670 --> 00:16:16,050
like a junior DBA versus a senior DBA it

367
00:16:13,620 --> 00:16:17,580
to be fair in some organizations their

368
00:16:16,050 --> 00:16:20,130
strict operational control so like these

369
00:16:17,580 --> 00:16:22,530
really large implementations of Oracle

370
00:16:20,130 --> 00:16:24,950
and sequel server you see this in

371
00:16:22,530 --> 00:16:28,350
healthcare and banking in the defense

372
00:16:24,950 --> 00:16:30,960
sort of world you literally have a group

373
00:16:28,350 --> 00:16:32,640
of DBAs their job is to patch you have

374
00:16:30,960 --> 00:16:34,620
another group that does application

375
00:16:32,640 --> 00:16:36,270
database administration you have another

376
00:16:34,620 --> 00:16:39,630
group that actually does like sysadmin

377
00:16:36,270 --> 00:16:41,160
kind of DBAs and i've seen in some

378
00:16:39,630 --> 00:16:44,700
implementations it's not unheard of to

379
00:16:41,160 --> 00:16:46,740
have OS level credentials and Kerberos

380
00:16:44,700 --> 00:16:48,210
credentials and application level

381
00:16:46,740 --> 00:16:51,090
credentials and then local DB

382
00:16:48,210 --> 00:16:52,050
credentials and all those have to be in

383
00:16:51,090 --> 00:16:55,200
sync with some of the middleware

384
00:16:52,050 --> 00:16:57,449
products it's not to mention the

385
00:16:55,200 --> 00:16:59,970
integration with you know key management

386
00:16:57,450 --> 00:17:02,520
systems whether it's hardware modules or

387
00:16:59,970 --> 00:17:04,170
otherwise so format preserving

388
00:17:02,520 --> 00:17:08,369
encryption we'll look at in a minute

389
00:17:04,170 --> 00:17:09,510
deterministic as well I I'm not sure

390
00:17:08,369 --> 00:17:12,719
folks are familiar with tokenization

391
00:17:09,510 --> 00:17:17,750
this is a commonly used in the payment

392
00:17:12,720 --> 00:17:17,750
industries of PCI data the idea is that

393
00:17:17,980 --> 00:17:22,750
it's not necessarily a cloud issue or a

394
00:17:20,510 --> 00:17:25,099
you know central administrator model

395
00:17:22,750 --> 00:17:27,980
issue but it's just that you don't want

396
00:17:25,099 --> 00:17:30,590
to store raw card data plain text and so

397
00:17:27,980 --> 00:17:32,900
it's it's tokenized there's you know

398
00:17:30,590 --> 00:17:34,550
consistent tokens in that sense it's

399
00:17:32,900 --> 00:17:35,030
it's pretty similar to deterministic

400
00:17:34,550 --> 00:17:38,300
encryption

401
00:17:35,030 --> 00:17:41,389
there's also cloud access brokers these

402
00:17:38,300 --> 00:17:43,430
are these are services sort of have some

403
00:17:41,390 --> 00:17:46,100
insight to how for example Salesforce

404
00:17:43,430 --> 00:17:47,660
works or particular application and

405
00:17:46,100 --> 00:17:49,939
they're and they're tightly integrated

406
00:17:47,660 --> 00:17:51,880
with that service provider and so they

407
00:17:49,940 --> 00:17:55,100
just sort of do on-the-fly proxy for

408
00:17:51,880 --> 00:17:56,870
encryption client side so that for

409
00:17:55,100 --> 00:17:59,330
example Salesforce or Google or whoever

410
00:17:56,870 --> 00:18:03,860
else essentially all they're getting is

411
00:17:59,330 --> 00:18:06,230
cypher text so what are the problems

412
00:18:03,860 --> 00:18:09,620
with trying to prevent one DBA from

413
00:18:06,230 --> 00:18:15,740
saying things that another DBA doesn't

414
00:18:09,620 --> 00:18:18,679
want them to say there's a there's a

415
00:18:15,740 --> 00:18:20,060
great blog if you're in the Oracle kind

416
00:18:18,680 --> 00:18:22,190
of architecture or security that's

417
00:18:20,060 --> 00:18:24,889
that's worth a read this guy Robert law

418
00:18:22,190 --> 00:18:27,020
card so he demonstrated this has been a

419
00:18:24,890 --> 00:18:29,620
couple years but but it's absolutely

420
00:18:27,020 --> 00:18:32,540
still true in most deployments now so

421
00:18:29,620 --> 00:18:34,639
I'll point you to the the create section

422
00:18:32,540 --> 00:18:36,590
so this is just an example this is one

423
00:18:34,640 --> 00:18:39,680
of these dummy data generators that

424
00:18:36,590 --> 00:18:41,840
creates fake names and big you know

425
00:18:39,680 --> 00:18:44,360
credit cards and so forth so this is no

426
00:18:41,840 --> 00:18:46,550
this is Israel data but anyway it's a

427
00:18:44,360 --> 00:18:50,600
simple construction so you know here's

428
00:18:46,550 --> 00:18:52,190
first name last name and so on and then

429
00:18:50,600 --> 00:18:55,129
you know here's what it looks like from

430
00:18:52,190 --> 00:18:56,540
Oracle speak so credit card number

431
00:18:55,130 --> 00:19:01,910
security number of those room cryptic

432
00:18:56,540 --> 00:19:04,040
columns unfortunately Oracle has this

433
00:19:01,910 --> 00:19:05,360
thing called histograms which which most

434
00:19:04,040 --> 00:19:08,750
databases have something like this it's

435
00:19:05,360 --> 00:19:12,409
a high performance statistical analysis

436
00:19:08,750 --> 00:19:14,540
that sort of helps with helps with load

437
00:19:12,410 --> 00:19:19,400
distribution helps with index creation

438
00:19:14,540 --> 00:19:21,290
so forth so the data are encrypted but

439
00:19:19,400 --> 00:19:22,850
the histograms are not it needs to be

440
00:19:21,290 --> 00:19:25,250
able to work on the histograms know for

441
00:19:22,850 --> 00:19:26,840
example that the person was the first

442
00:19:25,250 --> 00:19:29,270
social security numbers in four times or

443
00:19:26,840 --> 00:19:30,129
twenty times or whatever so by querying

444
00:19:29,270 --> 00:19:32,290
on the history

445
00:19:30,130 --> 00:19:35,980
rather than the underlying data you get

446
00:19:32,290 --> 00:19:37,930
plaintext back and then taking it one

447
00:19:35,980 --> 00:19:40,600
step further you get the entire record

448
00:19:37,930 --> 00:19:42,610
back this is having no idea what the key

449
00:19:40,600 --> 00:19:48,490
is no idea what the application was

450
00:19:42,610 --> 00:19:50,229
doing just give it to me format

451
00:19:48,490 --> 00:19:53,080
preserving encryption sometimes in

452
00:19:50,230 --> 00:19:57,040
legacy systems you've got really really

453
00:19:53,080 --> 00:20:00,610
deep investment in 10 15 20 million

454
00:19:57,040 --> 00:20:03,909
dollar applications that do some kind of

455
00:20:00,610 --> 00:20:06,129
processing or some kind of like service

456
00:20:03,910 --> 00:20:09,550
bus integration with a really really old

457
00:20:06,130 --> 00:20:12,490
legacy but sort of revenue crucial kind

458
00:20:09,550 --> 00:20:14,470
of interconnect and so sometimes

459
00:20:12,490 --> 00:20:15,880
architects have been challenged to say

460
00:20:14,470 --> 00:20:19,090
okay I need you to encrypt a credit card

461
00:20:15,880 --> 00:20:20,830
number but you can't have the the field

462
00:20:19,090 --> 00:20:23,709
any wider than the original credit card

463
00:20:20,830 --> 00:20:26,889
number okay that's kind of tricky right

464
00:20:23,710 --> 00:20:32,140
because you know encryption changes the

465
00:20:26,890 --> 00:20:35,910
size of the plain text so NIST put out a

466
00:20:32,140 --> 00:20:41,560
call and had sort of competition and

467
00:20:35,910 --> 00:20:44,440
invited feedback they created several

468
00:20:41,560 --> 00:20:48,070
models for this format preserving

469
00:20:44,440 --> 00:20:49,630
encryption ff1 and ff2 if it free MF if

470
00:20:48,070 --> 00:20:51,939
two didn't make it quite to the final

471
00:20:49,630 --> 00:20:54,790
round it they were just constructions

472
00:20:51,940 --> 00:20:58,600
they were do this with a yes and this

473
00:20:54,790 --> 00:21:01,960
with a hash and this kind of index and

474
00:20:58,600 --> 00:21:04,000
so forth and you know stand on your head

475
00:21:01,960 --> 00:21:06,340
and the sun's the right position then

476
00:21:04,000 --> 00:21:10,870
the width should be the same so this was

477
00:21:06,340 --> 00:21:13,689
March at 2016 April of 2017 no no it's a

478
00:21:10,870 --> 00:21:18,669
ff3 is broken let's let's not do that so

479
00:21:13,690 --> 00:21:22,450
this is a you know this this is tricky

480
00:21:18,670 --> 00:21:24,940
stuff there's there are there's some

481
00:21:22,450 --> 00:21:28,750
really interesting attacks against these

482
00:21:24,940 --> 00:21:35,560
and so you know this is very much an

483
00:21:28,750 --> 00:21:37,690
emerging field and it changes quickly so

484
00:21:35,560 --> 00:21:39,220
this line from one of the press releases

485
00:21:37,690 --> 00:21:40,470
this is another security vendor but I

486
00:21:39,220 --> 00:21:42,930
thought this was interesting

487
00:21:40,470 --> 00:21:45,720
so FFT didn't survive publication 1/5

488
00:21:42,930 --> 00:21:49,230
Ruiz been broken by researchers but in

489
00:21:45,720 --> 00:21:57,060
the span of a year so it's a tricky

490
00:21:49,230 --> 00:22:00,060
engineering challenge when I look at a

491
00:21:57,060 --> 00:22:02,370
lot of customer deployments this is kind

492
00:22:00,060 --> 00:22:03,899
of what I see right so I'm using an

493
00:22:02,370 --> 00:22:07,110
encrypted database but the keys are on

494
00:22:03,900 --> 00:22:11,280
the database or worse they're hard-coded

495
00:22:07,110 --> 00:22:13,919
yeah you know on that system I mean it's

496
00:22:11,280 --> 00:22:16,590
a joke but that's it really if you look

497
00:22:13,920 --> 00:22:19,770
at what the data flows are to return

498
00:22:16,590 --> 00:22:22,230
plaintext data this isn't too far from

499
00:22:19,770 --> 00:22:26,879
reality for a lot of implementations I'd

500
00:22:22,230 --> 00:22:31,550
argue most actually so let's go back for

501
00:22:26,880 --> 00:22:34,740
a second to look at that work from papa

502
00:22:31,550 --> 00:22:36,149
this is not an exaggeration so in the

503
00:22:34,740 --> 00:22:38,760
last couple years they've been attacks

504
00:22:36,150 --> 00:22:40,980
against deterministic encryption which

505
00:22:38,760 --> 00:22:43,410
again is the major mode of encryption

506
00:22:40,980 --> 00:22:45,750
for commercial the larger database

507
00:22:43,410 --> 00:22:47,820
products out there they effectively

508
00:22:45,750 --> 00:22:53,250
broke it with a technique that monks

509
00:22:47,820 --> 00:22:55,980
developed in the 800s so if you for

510
00:22:53,250 --> 00:22:58,710
example use deterministic encryption on

511
00:22:55,980 --> 00:23:00,390
a really large pool of credit card

512
00:22:58,710 --> 00:23:02,790
images so security numbers you're

513
00:23:00,390 --> 00:23:05,060
probably okay the histogram is flat and

514
00:23:02,790 --> 00:23:08,940
it's wide and there's not a lot of

515
00:23:05,060 --> 00:23:12,290
there's not a lot of there's not a lot

516
00:23:08,940 --> 00:23:18,020
of curve if on the other hand you take

517
00:23:12,290 --> 00:23:20,850
for example published Medicare data

518
00:23:18,020 --> 00:23:22,920
hospital hospitalization data you know

519
00:23:20,850 --> 00:23:25,649
millions and millions of records where

520
00:23:22,920 --> 00:23:28,230
there in fact are only a few not a few

521
00:23:25,650 --> 00:23:31,380
but there's a known universe of Social

522
00:23:28,230 --> 00:23:36,680
Security sorry zip codes of states of

523
00:23:31,380 --> 00:23:40,830
genders of you know pancreatic Stage two

524
00:23:36,680 --> 00:23:45,060
diagnosis codes icd-9 codes and so forth

525
00:23:40,830 --> 00:23:50,010
if you do that 60 to 80 percent of

526
00:23:45,060 --> 00:23:52,620
records can be decrypted purely based on

527
00:23:50,010 --> 00:23:53,990
some operatory information about

528
00:23:52,620 --> 00:23:56,779
population distribution

529
00:23:53,990 --> 00:23:59,990
right so if you have a gender field and

530
00:23:56,779 --> 00:24:03,730
it's mf3 values for you know whatever

531
00:23:59,990 --> 00:24:07,340
and you know that in a certain country

532
00:24:03,730 --> 00:24:09,679
the gender spread is a certain way then

533
00:24:07,340 --> 00:24:11,779
you can you can make inference attacks

534
00:24:09,679 --> 00:24:14,179
on what those encrypted values are even

535
00:24:11,779 --> 00:24:15,970
though you don't have any idea what you

536
00:24:14,179 --> 00:24:18,350
know what's actually there

537
00:24:15,970 --> 00:24:22,460
then if the database is using the same

538
00:24:18,350 --> 00:24:26,240
key across columns across tables you can

539
00:24:22,460 --> 00:24:29,450
similarly do deconstruction for those it

540
00:24:26,240 --> 00:24:33,320
turns out that that properties are sorry

541
00:24:29,450 --> 00:24:35,360
the fields that are not flat histograms

542
00:24:33,320 --> 00:24:37,760
are the majority of encrypted database

543
00:24:35,360 --> 00:24:39,469
is a certain lower in health care and in

544
00:24:37,760 --> 00:24:42,049
some of the financial systems that

545
00:24:39,470 --> 00:24:43,760
people looked at at the end of this if

546
00:24:42,049 --> 00:24:45,610
you're interested there's I've linked it

547
00:24:43,760 --> 00:24:48,140
to several talks from rural crypto and

548
00:24:45,610 --> 00:24:50,209
some academic papers but it's worth

549
00:24:48,140 --> 00:24:53,059
looking at I mean these were devastating

550
00:24:50,210 --> 00:24:56,059
up to eighty percent of these data could

551
00:24:53,059 --> 00:25:00,370
be could be reconstructed with with you

552
00:24:56,059 --> 00:25:01,720
know high assurance Grubbs risk apart

553
00:25:00,370 --> 00:25:04,459
samokov

554
00:25:01,720 --> 00:25:06,500
last year published a great paper called

555
00:25:04,460 --> 00:25:08,570
why your database is not secure highly

556
00:25:06,500 --> 00:25:09,770
recommend but one of their points was

557
00:25:08,570 --> 00:25:12,559
that okay

558
00:25:09,770 --> 00:25:15,440
a lot of the published academic papers

559
00:25:12,559 --> 00:25:18,879
talk about snapshot attacks do people

560
00:25:15,440 --> 00:25:22,279
know about vmware live motion or

561
00:25:18,880 --> 00:25:24,559
google's cross cloud live migration so

562
00:25:22,279 --> 00:25:28,340
the idea is that normally you know when

563
00:25:24,559 --> 00:25:30,710
you think of a vm backup you you take a

564
00:25:28,340 --> 00:25:32,809
snapshot of a running volume copy that

565
00:25:30,710 --> 00:25:35,720
somewhere else and then you know reboot

566
00:25:32,809 --> 00:25:38,779
the volume well vmware live motion does

567
00:25:35,720 --> 00:25:41,779
is also does memory snapshots so state

568
00:25:38,779 --> 00:25:43,960
of the discs state of buffers state of

569
00:25:41,779 --> 00:25:46,159
memory state of registers so you can

570
00:25:43,960 --> 00:25:48,020
literally take that instance and move it

571
00:25:46,159 --> 00:25:50,690
over the wire and bring it up somewhere

572
00:25:48,020 --> 00:25:53,059
else that's really interesting but it

573
00:25:50,690 --> 00:25:55,669
also it's a problem if you think about

574
00:25:53,059 --> 00:25:58,158
what's happened from an encrypted

575
00:25:55,669 --> 00:26:01,159
database perspective you've on disk

576
00:25:58,159 --> 00:26:03,380
stored encrypted structures but in

577
00:26:01,159 --> 00:26:05,630
memory that if it's server-side they've

578
00:26:03,380 --> 00:26:06,750
been decrypted or at the very least the

579
00:26:05,630 --> 00:26:10,140
keys are in memory

580
00:26:06,750 --> 00:26:12,150
and so the snapshot attacks a lot of a

581
00:26:10,140 --> 00:26:14,100
lot of encryption database encryption

582
00:26:12,150 --> 00:26:16,590
models were built to protect against

583
00:26:14,100 --> 00:26:19,649
those snapshot attacks and part of what

584
00:26:16,590 --> 00:26:22,080
Grubbs and companies showed is that yeah

585
00:26:19,650 --> 00:26:24,270
that's one viable attack but if

586
00:26:22,080 --> 00:26:25,918
somebody's that motivated they're either

587
00:26:24,270 --> 00:26:28,020
in your data center or they're at the

588
00:26:25,919 --> 00:26:31,620
cloud operator and they've got that kind

589
00:26:28,020 --> 00:26:35,340
of visibility into literally processes

590
00:26:31,620 --> 00:26:38,158
in memory maybe that's not as realistic

591
00:26:35,340 --> 00:26:40,649
as things like logs and diagnostics and

592
00:26:38,159 --> 00:26:42,659
in-memory structures and and so they

593
00:26:40,650 --> 00:26:46,289
sort of tear that apart anyway it's a

594
00:26:42,659 --> 00:26:48,809
great great read which brings us back to

595
00:26:46,289 --> 00:26:50,879
threat model driven design are we

596
00:26:48,809 --> 00:26:52,760
protecting against a disk being

597
00:26:50,880 --> 00:26:57,169
repurposed and showing up on Craigslist

598
00:26:52,760 --> 00:27:00,600
are we protecting against an insider DBA

599
00:26:57,169 --> 00:27:03,419
that's harder are we protecting against

600
00:27:00,600 --> 00:27:04,610
backups that were sort of miss applied

601
00:27:03,419 --> 00:27:09,059
and they're somewhere else

602
00:27:04,610 --> 00:27:11,580
are we thinking or have we not thought

603
00:27:09,059 --> 00:27:13,770
about a web application security right

604
00:27:11,580 --> 00:27:16,260
because you can have like post quantum

605
00:27:13,770 --> 00:27:19,080
Krypton the world but if your web app

606
00:27:16,260 --> 00:27:20,789
has you know full access into that and

607
00:27:19,080 --> 00:27:22,860
it has transparency into the key

608
00:27:20,789 --> 00:27:26,580
management system or it brokers all keys

609
00:27:22,860 --> 00:27:28,709
or worse you've got one key with full

610
00:27:26,580 --> 00:27:30,389
privileges and that's compromised

611
00:27:28,710 --> 00:27:31,409
because of a single ID because of a

612
00:27:30,390 --> 00:27:34,740
sequel injection or something like that

613
00:27:31,409 --> 00:27:35,970
then then you know maybe you're not

614
00:27:34,740 --> 00:27:39,620
think about this in the right way

615
00:27:35,970 --> 00:27:43,559
hardware security modules are used in

616
00:27:39,620 --> 00:27:46,289
cloud key management systems in a very

617
00:27:43,559 --> 00:27:49,370
particular way so the idea is that you

618
00:27:46,289 --> 00:27:54,770
have a small payload maybe a public key

619
00:27:49,370 --> 00:27:57,479
or a data encryption key and maybe a a

620
00:27:54,770 --> 00:28:00,539
key wrapping key it's called envelope

621
00:27:57,480 --> 00:28:03,570
encryption so that's handed off the

622
00:28:00,539 --> 00:28:05,340
cloud broker sort of with the hsm

623
00:28:03,570 --> 00:28:12,899
decrypting the hsm and the returns back

624
00:28:05,340 --> 00:28:15,928
so that's useful for lower scale you

625
00:28:12,900 --> 00:28:18,690
know key generation it's not really

626
00:28:15,929 --> 00:28:20,669
practical for high-volume you know data

627
00:28:18,690 --> 00:28:22,409
set returns in sequel

628
00:28:20,669 --> 00:28:26,639
actually for a lot of sequel semantics

629
00:28:22,409 --> 00:28:28,169
it's just it's it's a non-starter but it

630
00:28:26,639 --> 00:28:31,248
may also not matter right I mean a lot

631
00:28:28,169 --> 00:28:34,080
of the models assume that like there's

632
00:28:31,249 --> 00:28:36,629
individual users so every single user

633
00:28:34,080 --> 00:28:38,580
has a special key which that's sort of

634
00:28:36,629 --> 00:28:40,678
like a it's almost like a client-server

635
00:28:38,580 --> 00:28:43,350
kind of model and maybe that's the case

636
00:28:40,679 --> 00:28:46,019
but an awful lot of deployments in the

637
00:28:43,350 --> 00:28:49,469
world are web applications right and so

638
00:28:46,019 --> 00:28:51,629
the security of that entire structure

639
00:28:49,470 --> 00:28:54,119
that entire flow is only as you know

640
00:28:51,629 --> 00:28:56,219
strong as as the web app you know

641
00:28:54,119 --> 00:28:59,959
protects against and again Ram is the

642
00:28:56,220 --> 00:29:03,869
Achilles heel if if I've got encrypted

643
00:28:59,960 --> 00:29:06,210
central server side and I've got

644
00:29:03,869 --> 00:29:08,959
tablespace and down to the column level

645
00:29:06,210 --> 00:29:12,389
that's encrypted if I'm a sufficiently

646
00:29:08,960 --> 00:29:15,690
interested or bored sysadmin or DBA I

647
00:29:12,389 --> 00:29:20,850
can scrape memory I can you know look at

648
00:29:15,690 --> 00:29:25,769
other processes to you know to leak

649
00:29:20,850 --> 00:29:27,658
those keys one of erisa parts points

650
00:29:25,769 --> 00:29:29,220
with the snapshot attack is if

651
00:29:27,659 --> 00:29:31,080
somebody's gone to that much trouble

652
00:29:29,220 --> 00:29:32,580
there's probably 20 other ways to get in

653
00:29:31,080 --> 00:29:35,879
and if you're not thinking about those

654
00:29:32,580 --> 00:29:37,289
then then that's a problem there's a

655
00:29:35,879 --> 00:29:40,080
final school of thought that says it

656
00:29:37,289 --> 00:29:41,820
doesn't matter I don't care if it's a

657
00:29:40,080 --> 00:29:43,350
court order I don't care if it's a

658
00:29:41,820 --> 00:29:44,009
discovery motion I don't care if it's a

659
00:29:43,350 --> 00:29:46,139
nation-state

660
00:29:44,009 --> 00:29:48,059
I don't care if it's um I don't care I

661
00:29:46,139 --> 00:29:50,279
want the highest level of

662
00:29:48,059 --> 00:29:52,678
confidentiality from an app that's

663
00:29:50,279 --> 00:29:55,549
possible if that's the case that's

664
00:29:52,679 --> 00:29:59,340
client-side encryption with some type of

665
00:29:55,549 --> 00:30:01,529
homomorphic encryption unfortunately we

666
00:29:59,340 --> 00:30:04,369
don't really have focal morphic

667
00:30:01,529 --> 00:30:08,220
encryption in any kind of wide use today

668
00:30:04,369 --> 00:30:10,619
for the more popular databases it's

669
00:30:08,220 --> 00:30:12,720
certainly evolving quickly so we were

670
00:30:10,619 --> 00:30:13,678
speaking you know even two years ago in

671
00:30:12,720 --> 00:30:16,590
terms of minutes

672
00:30:13,679 --> 00:30:18,869
now we're talking milliseconds so those

673
00:30:16,590 --> 00:30:20,730
sorts of efficiencies but the problem

674
00:30:18,869 --> 00:30:23,730
with a lot of client-side encryption is

675
00:30:20,730 --> 00:30:26,159
that you have to build a lot of first of

676
00:30:23,730 --> 00:30:28,139
all you're not gonna bolt on to some

677
00:30:26,159 --> 00:30:30,269
existing legacy system right you're not

678
00:30:28,139 --> 00:30:31,560
gonna bolt on to a my sequel or mother

679
00:30:30,269 --> 00:30:36,330
Dior

680
00:30:31,560 --> 00:30:37,830
you know you know memcache or something

681
00:30:36,330 --> 00:30:40,230
like that it's just not gonna work you

682
00:30:37,830 --> 00:30:45,080
have to have deep insight into the

683
00:30:40,230 --> 00:30:49,500
semantics of data structures and also

684
00:30:45,080 --> 00:30:51,210
with what are pretty promising but but

685
00:30:49,500 --> 00:30:53,160
still the kind of nation technologies

686
00:30:51,210 --> 00:30:58,080
you've got to build indexes you got to

687
00:30:53,160 --> 00:31:00,420
build partial trees lots of sort of got

688
00:30:58,080 --> 00:31:03,060
some things on the client side and

689
00:31:00,420 --> 00:31:04,740
that's tricky in the case of a sequel

690
00:31:03,060 --> 00:31:07,230
server that I mentioned that always

691
00:31:04,740 --> 00:31:08,730
encrypted engine that only works for I

692
00:31:07,230 --> 00:31:11,100
think like three or four drivers and

693
00:31:08,730 --> 00:31:12,720
it's it's a fairly heavy load so the the

694
00:31:11,100 --> 00:31:15,209
client is taking a fair amount of the

695
00:31:12,720 --> 00:31:17,990
computation but that's what I mean by

696
00:31:15,210 --> 00:31:20,340
zero knowledge the idea is that there's

697
00:31:17,990 --> 00:31:22,080
some amount of heavy computation that

698
00:31:20,340 --> 00:31:23,580
can be done centrally maybe a cloud

699
00:31:22,080 --> 00:31:26,000
provider maybe somebody else in a data

700
00:31:23,580 --> 00:31:28,379
center right because a lot of like

701
00:31:26,000 --> 00:31:31,200
financial institutions and things of

702
00:31:28,380 --> 00:31:34,370
that sort we I worked with some mobile

703
00:31:31,200 --> 00:31:36,450
companies that have for example

704
00:31:34,370 --> 00:31:39,209
somewhere in the bowels of their

705
00:31:36,450 --> 00:31:43,470
organizations the systems that manage

706
00:31:39,210 --> 00:31:45,510
keys for millions and millions of cell

707
00:31:43,470 --> 00:31:49,200
phones right so that's not a matter of I

708
00:31:45,510 --> 00:31:50,970
don't trust someone or you know we don't

709
00:31:49,200 --> 00:31:53,730
have the right controls in place it's a

710
00:31:50,970 --> 00:31:56,130
this is a catastrophic end of the

711
00:31:53,730 --> 00:31:59,490
business if these data are breached so

712
00:31:56,130 --> 00:32:01,590
we have to have some tools where there's

713
00:31:59,490 --> 00:32:03,660
a zero knowledge model where the

714
00:32:01,590 --> 00:32:09,300
operator were that the database server

715
00:32:03,660 --> 00:32:10,530
side has zero visibility I think I've

716
00:32:09,300 --> 00:32:13,860
got it linked to there's a couple papers

717
00:32:10,530 --> 00:32:16,110
from Google and Amazon in terms of key

718
00:32:13,860 --> 00:32:17,879
rotation and what they sort of some of

719
00:32:16,110 --> 00:32:20,429
their lessons from scaling up their key

720
00:32:17,880 --> 00:32:22,200
management structure and all likelihood

721
00:32:20,430 --> 00:32:23,910
the vast majority of people in this room

722
00:32:22,200 --> 00:32:26,520
you don't have Google Amazon's

723
00:32:23,910 --> 00:32:28,520
you know volume but a lot of it lessons

724
00:32:26,520 --> 00:32:32,450
were really interesting in terms of

725
00:32:28,520 --> 00:32:37,650
where they originally hardened their

726
00:32:32,450 --> 00:32:39,840
their access points so you've you do the

727
00:32:37,650 --> 00:32:42,330
standard things you do rate limiting you

728
00:32:39,840 --> 00:32:46,889
do sane checks on

729
00:32:42,330 --> 00:32:48,419
you know single source IPS you've you

730
00:32:46,890 --> 00:32:51,030
know you have a rational permission

731
00:32:48,420 --> 00:32:52,770
model but all that you still got it's

732
00:32:51,030 --> 00:32:54,720
sort of Turtles down you've got there's

733
00:32:52,770 --> 00:32:57,030
bearer token somewhere in that stream if

734
00:32:54,720 --> 00:32:58,920
you've got a really well architected and

735
00:32:57,030 --> 00:33:01,830
constructed hardware security module but

736
00:32:58,920 --> 00:33:05,400
at some point has an API if that API is

737
00:33:01,830 --> 00:33:09,990
breached then you've effectively

738
00:33:05,400 --> 00:33:12,380
breached the HSM so again back to first

739
00:33:09,990 --> 00:33:16,650
principles same defenses rate-limiting

740
00:33:12,380 --> 00:33:18,090
segmentation real-time anomaly in

741
00:33:16,650 --> 00:33:20,580
detection so when you see these things

742
00:33:18,090 --> 00:33:23,520
as we did the other day from what was it

743
00:33:20,580 --> 00:33:26,879
two three four years insiders in the

744
00:33:23,520 --> 00:33:30,420
system before detection you know there's

745
00:33:26,880 --> 00:33:34,590
other things going on that are probably

746
00:33:30,420 --> 00:33:37,500
going to trump the the kind of you know

747
00:33:34,590 --> 00:33:43,199
those security models savage key

748
00:33:37,500 --> 00:33:46,710
segregation and by that I mean in in

749
00:33:43,200 --> 00:33:48,630
several server-side models and

750
00:33:46,710 --> 00:33:52,310
client-side models actually there are

751
00:33:48,630 --> 00:33:54,410
field level keys that are stored with

752
00:33:52,310 --> 00:33:57,690
envelope encryption with wrapper keys

753
00:33:54,410 --> 00:33:59,820
those have to be really really carefully

754
00:33:57,690 --> 00:34:02,340
guarded so if you're building systems or

755
00:33:59,820 --> 00:34:04,230
you're you're working on a control plane

756
00:34:02,340 --> 00:34:06,389
or you're involved with with sort of

757
00:34:04,230 --> 00:34:09,240
large-scale integration crucially an

758
00:34:06,390 --> 00:34:12,870
important to understand what that

759
00:34:09,239 --> 00:34:15,479
operator sort of visibility is right if

760
00:34:12,870 --> 00:34:18,089
you've got great hardware you've got

761
00:34:15,480 --> 00:34:20,850
really modern you know minimize surface

762
00:34:18,090 --> 00:34:23,280
but then there's there's some kind of

763
00:34:20,850 --> 00:34:27,500
orchestration layer that does all the

764
00:34:23,280 --> 00:34:29,550
you know in in chef terms you know bags

765
00:34:27,500 --> 00:34:31,830
you know vaults other things of this

766
00:34:29,550 --> 00:34:35,880
sort you you really have to think about

767
00:34:31,830 --> 00:34:37,668
what this exposure pads are and this

768
00:34:35,880 --> 00:34:40,500
really is the problem right

769
00:34:37,668 --> 00:34:42,299
cryptographers sort of of course you

770
00:34:40,500 --> 00:34:45,150
just came saying key management and

771
00:34:42,300 --> 00:34:46,919
identity policy but I can't tell you how

772
00:34:45,150 --> 00:34:48,000
many large fortune 50 s I walked in and

773
00:34:46,918 --> 00:34:51,210
that's the

774
00:34:48,000 --> 00:34:53,820
that's the that's the model right so one

775
00:34:51,210 --> 00:34:56,369
there once equal light injection sorry

776
00:34:53,820 --> 00:34:58,349
the sequel injection from complete

777
00:34:56,369 --> 00:35:01,320
compromise even though they have

778
00:34:58,349 --> 00:35:03,109
$100,000 hardware security module even

779
00:35:01,320 --> 00:35:09,119
though they have all the next-gen

780
00:35:03,109 --> 00:35:10,950
malware stuff or whatever it's crucial

781
00:35:09,119 --> 00:35:12,060
to model what those attack threats are

782
00:35:10,950 --> 00:35:13,980
and how realistic they are what the

783
00:35:12,060 --> 00:35:18,779
likelihood is and what the severity is

784
00:35:13,980 --> 00:35:21,000
if they're breached if you come or no

785
00:35:18,780 --> 00:35:25,260
other thing from this talk I hope this

786
00:35:21,000 --> 00:35:27,750
is this I it's it's obvious maybe to

787
00:35:25,260 --> 00:35:30,960
some security people but hard-coded

788
00:35:27,750 --> 00:35:33,900
credentials single point master control

789
00:35:30,960 --> 00:35:36,570
full access it happens all the time

790
00:35:33,900 --> 00:35:38,840
it happens with third party products it

791
00:35:36,570 --> 00:35:42,300
happens with integrations it happens

792
00:35:38,840 --> 00:35:45,330
everywhere so the stronger the

793
00:35:42,300 --> 00:35:47,460
segmentation you can make it for who has

794
00:35:45,330 --> 00:35:51,509
access to those keys or the data

795
00:35:47,460 --> 00:35:57,630
encryption keys the sorry the encryption

796
00:35:51,510 --> 00:36:00,089
encryption keys the better I have been

797
00:35:57,630 --> 00:36:02,280
involved in a pen test fairly recently

798
00:36:00,089 --> 00:36:04,980
where there were actually was a pretty

799
00:36:02,280 --> 00:36:07,980
good key management layer in place it

800
00:36:04,980 --> 00:36:10,440
was pretty good orchestration but there

801
00:36:07,980 --> 00:36:13,230
was a single point where it wasn't a DBA

802
00:36:10,440 --> 00:36:16,260
user but effectively web app might as

803
00:36:13,230 --> 00:36:18,119
well have been a DBA from that you know

804
00:36:16,260 --> 00:36:20,099
from that Vantage because when the

805
00:36:18,119 --> 00:36:21,599
application got popped and the entire

806
00:36:20,099 --> 00:36:27,660
database can you can do a select star

807
00:36:21,599 --> 00:36:28,910
and come back so that's some of the some

808
00:36:27,660 --> 00:36:32,569
of the things that are developing but

809
00:36:28,910 --> 00:36:35,339
maybe a lot of like bad news

810
00:36:32,570 --> 00:36:37,170
so so these are things that are merging

811
00:36:35,339 --> 00:36:40,190
that that do look promising and that I

812
00:36:37,170 --> 00:36:43,770
want to spend a minute talking about

813
00:36:40,190 --> 00:36:45,060
secure Enclave as I said it's not a it's

814
00:36:43,770 --> 00:36:48,650
not a cure-all it's not a silver bullet

815
00:36:45,060 --> 00:36:53,250
but it is another interesting level of

816
00:36:48,650 --> 00:36:55,320
key segregation within servers if the

817
00:36:53,250 --> 00:36:57,869
model is a key delegation model

818
00:36:55,320 --> 00:36:59,990
gyeo attestation this is something

819
00:36:57,869 --> 00:37:05,240
that's actually built into a lot of

820
00:36:59,990 --> 00:37:05,240
system boards now and with things like

821
00:37:05,780 --> 00:37:11,579
the I to instances that Amazon has sort

822
00:37:09,810 --> 00:37:13,200
of in rolling out you can do literally

823
00:37:11,579 --> 00:37:15,570
bare metal you can provision bare metal

824
00:37:13,200 --> 00:37:18,270
which means you can access the the VTX

825
00:37:15,570 --> 00:37:20,150
modules and the geolocation so that

826
00:37:18,270 --> 00:37:23,310
means for example you can actually say

827
00:37:20,150 --> 00:37:25,320
not just by IP but by public key

828
00:37:23,310 --> 00:37:27,990
attestation this is the only thing I

829
00:37:25,320 --> 00:37:30,329
allowed to talk to me temporary

830
00:37:27,990 --> 00:37:33,180
credentials instance-based identity this

831
00:37:30,329 --> 00:37:34,109
isn't it's not that has strictly

832
00:37:33,180 --> 00:37:36,598
speaking it's nothing to do with

833
00:37:34,109 --> 00:37:39,029
database encryption but temporary

834
00:37:36,599 --> 00:37:41,070
credentials and instance-based identity

835
00:37:39,030 --> 00:37:42,119
is a really powerful technique it's

836
00:37:41,070 --> 00:37:44,849
available to all the major cloud

837
00:37:42,119 --> 00:37:47,640
platforms as far as I'm aware they're

838
00:37:44,849 --> 00:37:50,940
they're solutions like that on VMware's

839
00:37:47,640 --> 00:37:52,470
control plane it takes a lot of the hard

840
00:37:50,940 --> 00:37:55,859
and heavy lifting out of your hands and

841
00:37:52,470 --> 00:37:57,118
it just works one of the caveats though

842
00:37:55,859 --> 00:37:59,730
is if you build up for example

843
00:37:57,119 --> 00:38:03,960
kubernetes cluster then everything

844
00:37:59,730 --> 00:38:06,599
running on that on that VM bears those

845
00:38:03,960 --> 00:38:09,810
temporary credentials tokens and so

846
00:38:06,599 --> 00:38:13,260
forth same full disk encryption

847
00:38:09,810 --> 00:38:15,839
I have literally seen support how to

848
00:38:13,260 --> 00:38:19,950
articles from database mid-sized

849
00:38:15,839 --> 00:38:23,339
companies that say put the key to the

850
00:38:19,950 --> 00:38:25,770
full disk encryption volume in whatever

851
00:38:23,339 --> 00:38:28,609
at sea and then just load it from there

852
00:38:25,770 --> 00:38:34,920
when the volume boots things alright

853
00:38:28,609 --> 00:38:37,500
that's wrong with homomorphic encryption

854
00:38:34,920 --> 00:38:39,900
as I said there's really promising work

855
00:38:37,500 --> 00:38:40,319
out of Brown University Microsoft

856
00:38:39,900 --> 00:38:44,280
Research

857
00:38:40,319 --> 00:38:46,140
I am already aware of several large tech

858
00:38:44,280 --> 00:38:51,089
companies that that you all would be

859
00:38:46,140 --> 00:38:52,740
familiar with that are using attribute

860
00:38:51,089 --> 00:38:56,940
base multi-party encryption so the idea

861
00:38:52,740 --> 00:39:00,598
is that thanks so the idea is that I'm a

862
00:38:56,940 --> 00:39:03,180
role of insurance adjuster in the

863
00:39:00,599 --> 00:39:05,190
eastern region or you know insurance

864
00:39:03,180 --> 00:39:06,690
adjuster in the eastern you know in

865
00:39:05,190 --> 00:39:08,670
Kentucky or something

866
00:39:06,690 --> 00:39:13,230
those two attributes together are enough

867
00:39:08,670 --> 00:39:15,030
for public key decryption I've got a

868
00:39:13,230 --> 00:39:18,420
link at the end on some of the work that

869
00:39:15,030 --> 00:39:22,410
Matt Groening company's been doing that

870
00:39:18,420 --> 00:39:25,050
is in the sort of early adopter phase

871
00:39:22,410 --> 00:39:26,460
now but it's I think we're gonna start

872
00:39:25,050 --> 00:39:30,960
to see a rollout into into bigger

873
00:39:26,460 --> 00:39:32,550
products so finally the takeaways most

874
00:39:30,960 --> 00:39:34,230
of the security models around the

875
00:39:32,550 --> 00:39:37,109
encrypt databases are either weak or

876
00:39:34,230 --> 00:39:40,589
they're under specified encrypted volume

877
00:39:37,109 --> 00:39:45,150
discs are great but they're it's like

878
00:39:40,589 --> 00:39:46,950
very basic you know table stakes and

879
00:39:45,150 --> 00:39:49,829
they're not protecting you from that

880
00:39:46,950 --> 00:39:51,569
Amazon Microsoft or Google they may

881
00:39:49,829 --> 00:39:52,740
protect you from their customers but I

882
00:39:51,569 --> 00:39:55,170
don't even think that's truly more I

883
00:39:52,740 --> 00:39:57,029
think that I think that all the major of

884
00:39:55,170 --> 00:39:59,130
three providers are not doing volume

885
00:39:57,030 --> 00:40:01,619
encryption by default now you may have

886
00:39:59,130 --> 00:40:03,810
to think about court order discovery far

887
00:40:01,619 --> 00:40:05,339
more likely probably from people in this

888
00:40:03,810 --> 00:40:07,680
room than you would sort of a

889
00:40:05,339 --> 00:40:11,220
nation-state attack right because court

890
00:40:07,680 --> 00:40:15,899
orders come to to a provider and they

891
00:40:11,220 --> 00:40:17,250
need to do preservation crucially you

892
00:40:15,900 --> 00:40:21,150
have to think about key surface

893
00:40:17,250 --> 00:40:23,010
exposures again the best the best

894
00:40:21,150 --> 00:40:24,810
technique technical measures and

895
00:40:23,010 --> 00:40:26,339
controls you can put in place or as good

896
00:40:24,810 --> 00:40:28,500
as those exposures for the keys

897
00:40:26,339 --> 00:40:30,180
have to think about apps AG have to

898
00:40:28,500 --> 00:40:33,839
think about a sequel injection bearer

899
00:40:30,180 --> 00:40:38,790
tokens API intercepts backups logs sis

900
00:40:33,839 --> 00:40:41,359
admins in the epa's alright that's it

901
00:40:38,790 --> 00:40:41,359
thank you

902
00:40:44,480 --> 00:40:51,200
I am happy to take any sort of dive in

903
00:40:48,859 --> 00:40:53,589
and more technical questions to it folks

904
00:40:51,200 --> 00:40:53,589
having

905
00:41:00,280 --> 00:41:06,980
anyway not a single question everybody's

906
00:41:03,859 --> 00:41:09,020
happy with their database encryption all

907
00:41:06,980 --> 00:41:11,060
right Bobby around the rest of the day

908
00:41:09,020 --> 00:41:12,950
and tomorrow so feel free to come to

909
00:41:11,060 --> 00:41:14,710
school iron and chat with me happy to

910
00:41:12,950 --> 00:41:17,629
talk Thanks

911
00:41:14,710 --> 00:41:17,630
[Applause]

