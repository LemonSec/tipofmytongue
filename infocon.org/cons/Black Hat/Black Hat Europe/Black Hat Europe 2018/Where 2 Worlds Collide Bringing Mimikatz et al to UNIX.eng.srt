1
00:00:00,030 --> 00:00:04,670
okay kyouda afternoon everybody hope you

2
00:00:02,370 --> 00:00:06,660
had a good lunch welcome to black

3
00:00:04,670 --> 00:00:08,330
welcome to London for those of you that

4
00:00:06,660 --> 00:00:12,000
are natives

5
00:00:08,330 --> 00:00:14,429
I'm Tim I work at Cisco and I've been

6
00:00:12,000 --> 00:00:18,060
looking at Active Directory and UNIX

7
00:00:14,429 --> 00:00:19,800
implementations they're off everyone

8
00:00:18,060 --> 00:00:21,180
always thinks Cisco is just a ruse is

9
00:00:19,800 --> 00:00:22,710
this which is company but I think at

10
00:00:21,180 --> 00:00:24,600
this day and age we we do all manner of

11
00:00:22,710 --> 00:00:27,630
things Active Directory obviously plays

12
00:00:24,600 --> 00:00:31,199
a part in some of those activities say

13
00:00:27,630 --> 00:00:32,940
by way of introduction I'm going to a

14
00:00:31,199 --> 00:00:34,710
quick TL DR what the talk is and what

15
00:00:32,940 --> 00:00:36,930
the talk isn't in cases anybody that

16
00:00:34,710 --> 00:00:39,300
thinks actually this isn't for me I had

17
00:00:36,930 --> 00:00:42,960
run through who I am and then outline

18
00:00:39,300 --> 00:00:44,730
what the talk covers say as a tldr ace

19
00:00:42,960 --> 00:00:46,620
is a work in progress

20
00:00:44,730 --> 00:00:48,989
I've spent probably the best part of

21
00:00:46,620 --> 00:00:51,328
nine months off and on looking at

22
00:00:48,989 --> 00:00:53,218
different aspects of this I'm currently

23
00:00:51,329 --> 00:00:54,780
up to three vendors and there are

24
00:00:53,219 --> 00:00:58,020
probably more vendors oil to be having a

25
00:00:54,780 --> 00:01:00,629
look at energy of course it's not

26
00:00:58,020 --> 00:01:04,439
LDAP it's not Kerberos it's not Active

27
00:01:00,629 --> 00:01:06,479
Directory per se it is however how UNIX

28
00:01:04,438 --> 00:01:09,240
Estate's integrate interactive directory

29
00:01:06,479 --> 00:01:11,130
the software that's used and the bug

30
00:01:09,240 --> 00:01:14,490
losses that you might reasonably expect

31
00:01:11,130 --> 00:01:17,339
to find on such a mistake and it's

32
00:01:14,490 --> 00:01:19,979
really about what happens if your UNIX

33
00:01:17,340 --> 00:01:23,460
boxes get compromised everybody always

34
00:01:19,979 --> 00:01:24,929
thinks the Active Directory gets

35
00:01:23,460 --> 00:01:27,630
compromised because somebody clicks on a

36
00:01:24,930 --> 00:01:28,979
link in an email etc well there are

37
00:01:27,630 --> 00:01:30,960
other ways to compromise in Active

38
00:01:28,979 --> 00:01:32,880
Directory and UNIX is one of them yeah

39
00:01:30,960 --> 00:01:35,548
we put we put an awful lot of emphasis

40
00:01:32,880 --> 00:01:37,920
on those those big boxes that's it in a

41
00:01:35,549 --> 00:01:39,960
data center and we don't always realize

42
00:01:37,920 --> 00:01:43,049
that they have trust relationships that

43
00:01:39,960 --> 00:01:46,649
extend potentially far further than the

44
00:01:43,049 --> 00:01:48,090
notice systems themselves so who I am

45
00:01:46,649 --> 00:01:50,759
and why I think I'm qualified to talk

46
00:01:48,090 --> 00:01:52,829
about this so I'm Tim I've got a

47
00:01:50,759 --> 00:01:56,159
background in telecoms and financial

48
00:01:52,829 --> 00:01:58,199
services and I've done the best part of

49
00:01:56,159 --> 00:02:00,119
20 years in various different security

50
00:01:58,200 --> 00:02:02,219
roles operational security first and

51
00:02:00,119 --> 00:02:03,719
foremost some time as a penetration

52
00:02:02,219 --> 00:02:06,270
tester at the moment I'm doing quite a

53
00:02:03,719 --> 00:02:11,549
lot of security engineering and I'd like

54
00:02:06,270 --> 00:02:13,859
to fly bugs I like to find bugs the

55
00:02:11,550 --> 00:02:15,080
scale it's no good find

56
00:02:13,860 --> 00:02:19,200
that one bug in that one application

57
00:02:15,080 --> 00:02:21,230
what I want to do is find Boxster open

58
00:02:19,200 --> 00:02:24,780
up doorways all over all over a network

59
00:02:21,230 --> 00:02:25,920
so the plan for this talk today is I'm

60
00:02:24,780 --> 00:02:27,300
gonna run through your background a

61
00:02:25,920 --> 00:02:28,350
little bit of the theory of Active

62
00:02:27,300 --> 00:02:29,880
Directory for those of you that perhaps

63
00:02:28,350 --> 00:02:30,840
haven't looked at it at all I'm gonna

64
00:02:29,880 --> 00:02:33,870
run through some of the estimate changes

65
00:02:30,840 --> 00:02:36,090
I've been working on what they look like

66
00:02:33,870 --> 00:02:39,420
in terms of practical attacks the

67
00:02:36,090 --> 00:02:41,160
mitigations the response because I think

68
00:02:39,420 --> 00:02:42,030
that's a key part and the vendors in

69
00:02:41,160 --> 00:02:44,459
this particular instance have been

70
00:02:42,030 --> 00:02:47,060
fantastic couldn't of what couldn't have

71
00:02:44,459 --> 00:02:49,800
asked to work with a better bunch of

72
00:02:47,060 --> 00:02:51,360
responders and then finally some

73
00:02:49,800 --> 00:02:53,220
conclusions and if you're dead

74
00:02:51,360 --> 00:02:54,540
interested at the end of it there is

75
00:02:53,220 --> 00:02:56,790
some bonus material which obviously be

76
00:02:54,540 --> 00:02:57,890
in the slides that go out publicly after

77
00:02:56,790 --> 00:03:03,570
this talk is concluded

78
00:02:57,890 --> 00:03:05,850
so the background over the last 15 years

79
00:03:03,570 --> 00:03:09,780
I've noticed a huge uptick in the amount

80
00:03:05,850 --> 00:03:11,970
of ad that is appearing on networks from

81
00:03:09,780 --> 00:03:14,010
a UNIX standpoint when I started 20

82
00:03:11,970 --> 00:03:17,220
years ago the bank we were using Tivoli

83
00:03:14,010 --> 00:03:19,320
we were pushing out users to essentially

84
00:03:17,220 --> 00:03:21,120
password files we were hoping that those

85
00:03:19,320 --> 00:03:22,320
files synced and when they didn't we

86
00:03:21,120 --> 00:03:24,420
were going to try to fit they're trying

87
00:03:22,320 --> 00:03:26,670
to fix those problems these days a lot

88
00:03:24,420 --> 00:03:28,109
of systems are ad connected and so

89
00:03:26,670 --> 00:03:29,839
what's actually happening is people are

90
00:03:28,110 --> 00:03:31,650
coming in with their normal corporate ID

91
00:03:29,840 --> 00:03:32,580
they're logging on to the Windows

92
00:03:31,650 --> 00:03:34,530
machine they're doing all of their

93
00:03:32,580 --> 00:03:36,030
Windows day-to-day when they drop across

94
00:03:34,530 --> 00:03:37,950
onto the UNIX infrastructure that they

95
00:03:36,030 --> 00:03:38,970
possibly might as part of their job they

96
00:03:37,950 --> 00:03:40,798
just log it with the same set of

97
00:03:38,970 --> 00:03:42,359
credentials and the reason that works is

98
00:03:40,799 --> 00:03:44,580
because of Active Directory so there's a

99
00:03:42,360 --> 00:03:48,060
compelling argument that Active

100
00:03:44,580 --> 00:03:52,489
Directory makes life easy but the

101
00:03:48,060 --> 00:03:55,890
problem is that with that you have to

102
00:03:52,489 --> 00:03:59,299
responsible parties neither of whom

103
00:03:55,890 --> 00:04:02,399
necessarily understand the capabilities

104
00:03:59,299 --> 00:04:04,830
the threat landscape of their opposing

105
00:04:02,400 --> 00:04:05,790
party you have your enterprise Athens so

106
00:04:04,830 --> 00:04:06,920
your enterprise that means are

107
00:04:05,790 --> 00:04:09,810
responsible for the Active Directory

108
00:04:06,920 --> 00:04:12,839
forest they're the guys that ultimately

109
00:04:09,810 --> 00:04:14,310
put put users on to us also on to Active

110
00:04:12,840 --> 00:04:17,820
Directory domains they're the guys that

111
00:04:14,310 --> 00:04:20,370
probably set the policies etc what they

112
00:04:17,820 --> 00:04:23,460
don't do is have a real real hard think

113
00:04:20,370 --> 00:04:25,410
about what happens when you deploy acted

114
00:04:23,460 --> 00:04:27,270
or if you onto UNIX and what pass what

115
00:04:25,410 --> 00:04:29,849
policies need to be applied there

116
00:04:27,270 --> 00:04:31,440
they don't necessarily have a good grasp

117
00:04:29,849 --> 00:04:33,270
of what the limitations of act are

118
00:04:31,440 --> 00:04:35,520
active directory on UNIX are from a

119
00:04:33,270 --> 00:04:36,870
group policy perspective so what you end

120
00:04:35,520 --> 00:04:38,460
up at is a situation where you might

121
00:04:36,870 --> 00:04:40,440
have say for example a SAP

122
00:04:38,460 --> 00:04:42,270
infrastructure sacrifice structure has

123
00:04:40,440 --> 00:04:44,669
four or five different environments

124
00:04:42,270 --> 00:04:49,440
ranging from dev 3 to production treated

125
00:04:44,669 --> 00:04:52,830
er you have maybe 10 15 boxes in each of

126
00:04:49,440 --> 00:04:54,569
those in farms and the view from the

127
00:04:52,830 --> 00:04:56,580
business is that the development if I'm

128
00:04:54,569 --> 00:04:57,870
probably not that important it's yeah

129
00:04:56,580 --> 00:04:59,490
it's where they do their development

130
00:04:57,870 --> 00:05:01,740
work it doesn't contain customer data it

131
00:04:59,490 --> 00:05:03,569
doesn't contain business data so that it

132
00:05:01,740 --> 00:05:04,949
doesn't get well-protected but this

133
00:05:03,569 --> 00:05:07,050
that's true interactive directory of

134
00:05:04,949 --> 00:05:09,630
stay not only do you have the ability if

135
00:05:07,050 --> 00:05:11,280
you compromise that system to go off to

136
00:05:09,630 --> 00:05:12,900
other posts as the of the Sacramento

137
00:05:11,280 --> 00:05:14,460
structure you also have the ability to

138
00:05:12,900 --> 00:05:16,770
go other after other bits of the

139
00:05:14,460 --> 00:05:18,180
enterprise infrastructure as a whole so

140
00:05:16,770 --> 00:05:19,669
the trust relationships are really quite

141
00:05:18,180 --> 00:05:24,360
interesting and they're not necessarily

142
00:05:19,669 --> 00:05:27,090
hugely well considered so as a case

143
00:05:24,360 --> 00:05:29,969
study this was patient zero if you will

144
00:05:27,090 --> 00:05:33,000
say we have a customer that uses vin

145
00:05:29,969 --> 00:05:35,099
teller and if you look at see ve details

146
00:05:33,000 --> 00:05:37,530
as a benchmark of what the maturity of

147
00:05:35,099 --> 00:05:38,849
the software is there's no bugs which

148
00:05:37,530 --> 00:05:40,919
means presumably it's great

149
00:05:38,849 --> 00:05:42,360
there's no no concerns for a runtime

150
00:05:40,919 --> 00:05:45,389
initiative perspective you can just go

151
00:05:42,360 --> 00:05:46,889
and deploy that wherever you like but we

152
00:05:45,389 --> 00:05:48,930
see it too in places like critical

153
00:05:46,889 --> 00:05:50,580
national infrastructure we see it across

154
00:05:48,930 --> 00:05:53,219
the financial services space we see it

155
00:05:50,580 --> 00:05:54,359
in lots of different places time and

156
00:05:53,219 --> 00:05:58,229
time again we're running into active

157
00:05:54,360 --> 00:06:04,050
directed joined UNIX systems so what

158
00:05:58,229 --> 00:06:05,880
does this actually mean we're expected

159
00:06:04,050 --> 00:06:10,259
to tell the customer when they've got it

160
00:06:05,880 --> 00:06:11,880
wrong interestingly turns out cisco use

161
00:06:10,259 --> 00:06:13,529
active directory on unix teeth so i

162
00:06:11,880 --> 00:06:16,199
started this conversation and start

163
00:06:13,529 --> 00:06:18,449
speaking to our internal teams about I

164
00:06:16,199 --> 00:06:20,069
need to go report this they came back

165
00:06:18,449 --> 00:06:24,569
and said actually we've we've got that

166
00:06:20,069 --> 00:06:26,310
software to say this is why it's working

167
00:06:24,569 --> 00:06:27,750
progresses because I've been patiently

168
00:06:26,310 --> 00:06:30,360
working through our internal

169
00:06:27,750 --> 00:06:33,840
stakeholders as well as the the software

170
00:06:30,360 --> 00:06:35,190
vendors etc but hopefully the research

171
00:06:33,840 --> 00:06:38,159
is going to be good in the long run for

172
00:06:35,190 --> 00:06:39,449
them for you guys in this room for the

173
00:06:38,159 --> 00:06:40,920
industry as a whole because at least

174
00:06:39,449 --> 00:06:45,060
we'll start to talk about this

175
00:06:40,920 --> 00:06:50,340
problem and what it looks like so the

176
00:06:45,060 --> 00:06:52,470
theory Active Directory Unix doesn't

177
00:06:50,340 --> 00:06:55,349
look a whole lot different from Active

178
00:06:52,470 --> 00:07:00,960
Directory or Windows if you imagine SSS

179
00:06:55,350 --> 00:07:04,590
D is your L SAS if you imagine the SSD

180
00:07:00,960 --> 00:07:08,099
talks to Linux VM or last similar to MSG

181
00:07:04,590 --> 00:07:09,989
know just because you're taking a photo

182
00:07:08,100 --> 00:07:12,050
it that's a Red Hat slide that's red

183
00:07:09,990 --> 00:07:15,030
hat's description or SSS D looks like

184
00:07:12,050 --> 00:07:21,330
but essentially in between that you have

185
00:07:15,030 --> 00:07:24,090
Kerberos you have DNS you have LDAP etc

186
00:07:21,330 --> 00:07:26,940
pretty pretty standard the key piece I

187
00:07:24,090 --> 00:07:28,679
guess from this slide two takeaways all

188
00:07:26,940 --> 00:07:31,860
of those policies pieces are being

189
00:07:28,680 --> 00:07:36,930
applied locally via CD also mount SC

190
00:07:31,860 --> 00:07:38,340
Linux etc unlike on a Windows box Active

191
00:07:36,930 --> 00:07:40,830
Directory isn't enforcing any of those

192
00:07:38,340 --> 00:07:42,719
policies over the network so that's your

193
00:07:40,830 --> 00:07:45,030
first payment would is that actually you

194
00:07:42,720 --> 00:07:46,560
might end up at a situation where you

195
00:07:45,030 --> 00:07:48,239
think you've got a great password policy

196
00:07:46,560 --> 00:07:50,850
but your password policy is only

197
00:07:48,240 --> 00:07:52,620
applying where it's where it's where

198
00:07:50,850 --> 00:07:54,330
it's enforced on your window systems

199
00:07:52,620 --> 00:07:56,250
it's not being applied to UNIX systems

200
00:07:54,330 --> 00:07:57,690
you think you've got auditing down pat

201
00:07:56,250 --> 00:07:59,910
you think you'll get gathering a right

202
00:07:57,690 --> 00:08:02,040
type of telemetry from your network well

203
00:07:59,910 --> 00:08:03,660
there's no guarantees that a Linux box

204
00:08:02,040 --> 00:08:07,080
is gathering the appropriate telemetry

205
00:08:03,660 --> 00:08:16,500
to tell you and so on spoken around say

206
00:08:07,080 --> 00:08:18,570
attack chains this is a threat model I

207
00:08:16,500 --> 00:08:20,370
put together for Vint Ella so this is a

208
00:08:18,570 --> 00:08:22,170
slightly more detailed look up the

209
00:08:20,370 --> 00:08:23,820
previous slide different vendor

210
00:08:22,170 --> 00:08:25,800
different different solution but it's

211
00:08:23,820 --> 00:08:27,930
the same problems so essentially you

212
00:08:25,800 --> 00:08:30,770
have a human user comes in over SSH

213
00:08:27,930 --> 00:08:33,600
comes in over SMB comes in over whatever

214
00:08:30,770 --> 00:08:37,770
UNIX authentication service you might

215
00:08:33,600 --> 00:08:39,630
have provide some credentials those

216
00:08:37,770 --> 00:08:42,090
credentials get passed into power

217
00:08:39,630 --> 00:08:44,700
Pam is the authentication module that

218
00:08:42,090 --> 00:08:47,880
the set of authentication modules that

219
00:08:44,700 --> 00:08:49,380
are used on most modern UNIX systems the

220
00:08:47,880 --> 00:08:52,660
will be older systems that don't but for

221
00:08:49,380 --> 00:08:55,930
the large part machine pam pam

222
00:08:52,660 --> 00:08:59,319
to explore a UNIX socket servoz D Vaz D

223
00:08:55,930 --> 00:09:01,989
being the Alsace equivalent and says got

224
00:08:59,319 --> 00:09:05,829
these credentials am i okay to let this

225
00:09:01,990 --> 00:09:07,300
guy in Vaz D can go and talk LDAP and

226
00:09:05,829 --> 00:09:09,519
Kerberos strategies directory to

227
00:09:07,300 --> 00:09:11,439
authenticate the user it can also hit a

228
00:09:09,519 --> 00:09:13,089
filesystem okay it can look at

229
00:09:11,440 --> 00:09:17,500
configuration files it can look at a

230
00:09:13,089 --> 00:09:19,329
sequel database and there lies part of

231
00:09:17,500 --> 00:09:21,160
the problem one the reasons it looks at

232
00:09:19,329 --> 00:09:22,899
the sequel database is because of cache

233
00:09:21,160 --> 00:09:25,930
credentials something we've had a

234
00:09:22,899 --> 00:09:27,910
Windows for what the most of our

235
00:09:25,930 --> 00:09:31,000
lifetime but something that we're

236
00:09:27,910 --> 00:09:34,569
gradually dealing with and mitigating

237
00:09:31,000 --> 00:09:36,639
the risks there off say I've talked

238
00:09:34,569 --> 00:09:39,639
about vin teller I've mentioned s SSD

239
00:09:36,639 --> 00:09:41,440
other vendors do exist as I said we're

240
00:09:39,639 --> 00:09:44,829
talking to three or four at the moment I

241
00:09:41,440 --> 00:09:46,149
haven't looked at their full unconscious

242
00:09:44,829 --> 00:09:47,469
that's probably a blind spot they spent

243
00:09:46,149 --> 00:09:48,279
in time but it's one I'd like to have a

244
00:09:47,470 --> 00:09:50,680
look at and see what their

245
00:09:48,279 --> 00:09:52,180
implementation looks like kind of hoping

246
00:09:50,680 --> 00:09:53,769
that it might be closer to the windows

247
00:09:52,180 --> 00:09:55,540
end of the spectrum than a Linux end of

248
00:09:53,769 --> 00:09:57,639
the spectrum in terms of maturity but

249
00:09:55,540 --> 00:10:00,430
yeah I guess what I look at it will

250
00:09:57,639 --> 00:10:02,439
figure about how so the fundamental

251
00:10:00,430 --> 00:10:05,439
traits and I just said Windows more

252
00:10:02,439 --> 00:10:07,060
mature off I'm a UNIX guy it nothing

253
00:10:05,439 --> 00:10:09,189
pains me more than to have to say that I

254
00:10:07,060 --> 00:10:12,489
I spent the last twenty years working

255
00:10:09,189 --> 00:10:14,050
with AIX Lorris hp-ux Dynex Red Hat

256
00:10:12,490 --> 00:10:16,180
pretty much every unix you can possibly

257
00:10:14,050 --> 00:10:19,779
imagine I'd be UNIX guy but Windows is a

258
00:10:16,180 --> 00:10:22,269
whole heap better UNIX is still stuck in

259
00:10:19,779 --> 00:10:23,949
the 70s you know we're still reliant

260
00:10:22,269 --> 00:10:26,079
upon your IDs and G IDs and that's

261
00:10:23,949 --> 00:10:29,380
pretty much the extent of most security

262
00:10:26,079 --> 00:10:31,029
boundaries on a on a UNIX box I know

263
00:10:29,380 --> 00:10:32,290
there are some exceptions but most of

264
00:10:31,029 --> 00:10:33,970
the time you find the customers who

265
00:10:32,290 --> 00:10:39,099
switch them off because it breaks the

266
00:10:33,970 --> 00:10:40,290
applications they need to use say by way

267
00:10:39,100 --> 00:10:43,420
of a refresher

268
00:10:40,290 --> 00:10:46,149
Windows has restricted a thin road for

269
00:10:43,420 --> 00:10:48,969
RDP it has LSA protection it has

270
00:10:46,149 --> 00:10:51,069
protected users it has TPM what does

271
00:10:48,970 --> 00:10:55,509
that mean well it means that you can't

272
00:10:51,069 --> 00:10:58,240
necessarily authenticate to a Windows

273
00:10:55,509 --> 00:11:00,160
domain join system with credentials

274
00:10:58,240 --> 00:11:03,339
unless you're in the right group it

275
00:11:00,160 --> 00:11:06,319
means that it's not possible even if

276
00:11:03,339 --> 00:11:08,510
you're privileged to directly interact

277
00:11:06,320 --> 00:11:10,220
with the files that contain the cash

278
00:11:08,510 --> 00:11:13,010
credentials or contain the configuration

279
00:11:10,220 --> 00:11:14,750
information it means that on in the case

280
00:11:13,010 --> 00:11:16,580
of TPM that the credentials the key

281
00:11:14,750 --> 00:11:19,340
secrets that are used to secure the

282
00:11:16,580 --> 00:11:23,390
system are kept outside of the main

283
00:11:19,340 --> 00:11:26,750
system in a separate offline chip and

284
00:11:23,390 --> 00:11:29,090
then if you get on to Windows 10 else

285
00:11:26,750 --> 00:11:30,470
Isis virtualized so elseis isn't even

286
00:11:29,090 --> 00:11:31,910
running in the same virtual machine as

287
00:11:30,470 --> 00:11:33,890
the rest of your window a view of your

288
00:11:31,910 --> 00:11:36,520
windows estate it is it is literally

289
00:11:33,890 --> 00:11:39,590
sitting there in a isolated container

290
00:11:36,520 --> 00:11:42,590
isolated at a hardware level and there

291
00:11:39,590 --> 00:11:45,290
is a slimmed-down set of IPC that allows

292
00:11:42,590 --> 00:11:46,790
you to talk to it to do the

293
00:11:45,290 --> 00:11:49,420
authentication factors you'd need to do

294
00:11:46,790 --> 00:11:55,400
but hopefully reduces the attack surface

295
00:11:49,420 --> 00:11:57,740
say sort of Baron what if I could get

296
00:11:55,400 --> 00:12:04,670
into your UNIX box and breach your

297
00:11:57,740 --> 00:12:07,030
domain as I've touched upon UNIX systems

298
00:12:04,670 --> 00:12:09,260
aren't necessarily quite so well secured

299
00:12:07,030 --> 00:12:11,089
technical debt is a big problem if you

300
00:12:09,260 --> 00:12:13,310
imagine your typical UNIX box it's

301
00:12:11,090 --> 00:12:14,600
probably running something like SAP or

302
00:12:13,310 --> 00:12:17,479
it's probably running something like

303
00:12:14,600 --> 00:12:19,910
Oracle these are systems that don't like

304
00:12:17,480 --> 00:12:22,820
downtime and the business doesn't like

305
00:12:19,910 --> 00:12:24,260
downtime because they're there the

306
00:12:22,820 --> 00:12:27,320
systems that allow you to make your

307
00:12:24,260 --> 00:12:28,819
money so you have technical death and of

308
00:12:27,320 --> 00:12:30,650
course what happens then is this that

309
00:12:28,820 --> 00:12:34,730
you're allowing people to log in over

310
00:12:30,650 --> 00:12:36,410
Active Directory and if we compromised

311
00:12:34,730 --> 00:12:38,360
that and we can extract the credentials

312
00:12:36,410 --> 00:12:41,360
then maybe we can use those credentials

313
00:12:38,360 --> 00:12:43,850
elsewhere that can be window systems you

314
00:12:41,360 --> 00:12:45,140
know there's nothing to stop me saying

315
00:12:43,850 --> 00:12:47,060
actually I've got these credentials for

316
00:12:45,140 --> 00:12:49,640
a UNIX box but actually go read your

317
00:12:47,060 --> 00:12:53,709
mail but it can also be other UNIX

318
00:12:49,640 --> 00:12:56,780
systems so practical attacks

319
00:12:53,710 --> 00:12:59,450
so I've classed these into four distinct

320
00:12:56,780 --> 00:13:01,459
areas there are some attacks that are

321
00:12:59,450 --> 00:13:03,680
possible against read has s SSD

322
00:13:01,460 --> 00:13:06,370
implementation there are some attacks

323
00:13:03,680 --> 00:13:08,630
that are possible against VIN teller

324
00:13:06,370 --> 00:13:10,370
there are some generic attacks that

325
00:13:08,630 --> 00:13:12,560
maybe you guys already know about that

326
00:13:10,370 --> 00:13:14,510
affect our life from Kerberos but anyway

327
00:13:12,560 --> 00:13:17,239
lacy to write through them and see what

328
00:13:14,510 --> 00:13:21,240
we can do so

329
00:13:17,240 --> 00:13:23,940
SSD is maintained by Retta it's open

330
00:13:21,240 --> 00:13:26,270
source and potential attacks there look

331
00:13:23,940 --> 00:13:29,370
like stealing hashes from a file system

332
00:13:26,270 --> 00:13:32,730
stealing plaintext from memory yeah the

333
00:13:29,370 --> 00:13:35,820
credentials live in the process of SSD

334
00:13:32,730 --> 00:13:37,560
for longer than is necessary so you can

335
00:13:35,820 --> 00:13:39,030
literally just potentially dump the

336
00:13:37,560 --> 00:13:41,670
memory and grab those to grab the

337
00:13:39,030 --> 00:13:44,579
plaintext values and you can mix with

338
00:13:41,670 --> 00:13:45,959
the IPC this becomes more interesting a

339
00:13:44,580 --> 00:13:48,900
couple of slides on but it's worth

340
00:13:45,960 --> 00:13:51,330
flagging out now and from a blue team

341
00:13:48,900 --> 00:13:52,650
perspective it runs as the route so in

342
00:13:51,330 --> 00:13:54,300
principle you shouldn't better get to it

343
00:13:52,650 --> 00:13:56,189
unless you love your user

344
00:13:54,300 --> 00:13:57,959
it does have some SELinux integration

345
00:13:56,190 --> 00:14:00,750
and it does have some compile time

346
00:13:57,960 --> 00:14:05,520
hardening so it's in this in the scheme

347
00:14:00,750 --> 00:14:08,700
of solutions perhaps more mature more

348
00:14:05,520 --> 00:14:13,620
question that in a second because it has

349
00:14:08,700 --> 00:14:15,240
a bit of a patchy track record say can

350
00:14:13,620 --> 00:14:17,610
you imagine a state of affairs where you

351
00:14:15,240 --> 00:14:19,650
could log onto a Windows box talk to a

352
00:14:17,610 --> 00:14:23,550
process and it give you character she's

353
00:14:19,650 --> 00:14:25,170
back well SSD at one stage rather had

354
00:14:23,550 --> 00:14:28,949
exactly that problem that wasn't so long

355
00:14:25,170 --> 00:14:30,599
ago that was 2017 I don't think they're

356
00:14:28,950 --> 00:14:32,460
any pocs available for the for these

357
00:14:30,600 --> 00:14:33,930
attacks but I think they're probably

358
00:14:32,460 --> 00:14:35,610
something I'd like to work on because

359
00:14:33,930 --> 00:14:38,250
like I say caching being what patching

360
00:14:35,610 --> 00:14:40,560
is this is the suspicion I have is that

361
00:14:38,250 --> 00:14:44,010
will be SSD in the wild where this

362
00:14:40,560 --> 00:14:47,849
vulnerability will exist say I've

363
00:14:44,010 --> 00:14:49,380
digress little these are the key

364
00:14:47,850 --> 00:14:50,580
artifacts whether you're blue team or

365
00:14:49,380 --> 00:14:52,830
red team these are the key things to

366
00:14:50,580 --> 00:14:55,320
worry about so you've got your database

367
00:14:52,830 --> 00:14:57,720
at the top you've got your ticket cache

368
00:14:55,320 --> 00:15:00,500
you've got some configuration files

369
00:14:57,720 --> 00:15:03,900
you've got unix sockets for the IPC

370
00:15:00,500 --> 00:15:06,120
you've got cached tickets for individual

371
00:15:03,900 --> 00:15:09,449
users and then you've got configuration

372
00:15:06,120 --> 00:15:11,700
and the host keys have etc key points

373
00:15:09,450 --> 00:15:13,550
from this slide the only thing that's

374
00:15:11,700 --> 00:15:17,190
accessible is a non privileged user is

375
00:15:13,550 --> 00:15:19,859
the thing in bold everything else all of

376
00:15:17,190 --> 00:15:22,560
the stuff in italic you need to be root

377
00:15:19,860 --> 00:15:24,930
for but that's not dissimilar from the

378
00:15:22,560 --> 00:15:26,099
situation in Windows in a sense that

379
00:15:24,930 --> 00:15:29,310
mimic acts requires administrative

380
00:15:26,100 --> 00:15:30,410
access so it's it's like for like in

381
00:15:29,310 --> 00:15:33,810
that regard

382
00:15:30,410 --> 00:15:36,390
if you've not got root there's not a

383
00:15:33,810 --> 00:15:39,540
huge rent you can do caveat being that

384
00:15:36,390 --> 00:15:42,180
as I said SSD has Apache record with IPC

385
00:15:39,540 --> 00:15:49,380
the IPC is exposed for it through those

386
00:15:42,180 --> 00:15:52,469
three days sockets contrast SSD with vin

387
00:15:49,380 --> 00:15:54,630
teller its proprietary its

388
00:15:52,470 --> 00:15:58,350
multi-platform has some similar classes

389
00:15:54,630 --> 00:16:01,350
of attacks from a blue team perspective

390
00:15:58,350 --> 00:16:03,120
it runs as a lower privileged user but

391
00:16:01,350 --> 00:16:05,100
it doesn't drop through so if you got

392
00:16:03,120 --> 00:16:07,260
code execution on it you can pivot it

393
00:16:05,100 --> 00:16:08,550
back up to view which then potentially

394
00:16:07,260 --> 00:16:11,180
puts you in a situation where you can

395
00:16:08,550 --> 00:16:13,649
grab the hashes through code execution

396
00:16:11,180 --> 00:16:15,899
it doesn't have compiled time hardening

397
00:16:13,649 --> 00:16:18,000
largely I suspect because being

398
00:16:15,899 --> 00:16:19,649
multi-platform the compile time

399
00:16:18,000 --> 00:16:22,800
hardening options that are available in

400
00:16:19,649 --> 00:16:24,300
AIX or Solaris are quite different from

401
00:16:22,800 --> 00:16:25,529
the compile time options that might be

402
00:16:24,300 --> 00:16:26,880
available on Linux and I think they've

403
00:16:25,529 --> 00:16:30,510
probably just gone for lowest common

404
00:16:26,880 --> 00:16:33,230
denominator and it has no integration

405
00:16:30,510 --> 00:16:36,569
with selinux so there's nothing beyond

406
00:16:33,230 --> 00:16:42,120
UID and GID that's protecting that

407
00:16:36,570 --> 00:16:44,550
solution so the artifacts for that look

408
00:16:42,120 --> 00:16:46,680
like this a little bit more interesting

409
00:16:44,550 --> 00:16:49,439
again in bold those are the things you

410
00:16:46,680 --> 00:16:51,510
can access as a non-provisional so you

411
00:16:49,440 --> 00:16:53,880
can access ad POSIX metadata and

412
00:16:51,510 --> 00:16:56,100
configuration files again you can't get

413
00:16:53,880 --> 00:16:58,890
to the hashes themselves or the ticket

414
00:16:56,100 --> 00:17:02,779
without being a previous user but as I

415
00:16:58,890 --> 00:17:02,779
said that's not dissimilar from Windows

416
00:17:03,740 --> 00:17:09,000
build up just a really straight because

417
00:17:07,140 --> 00:17:11,069
I think people are still using using

418
00:17:09,000 --> 00:17:13,829
that outside of Active Directory per se

419
00:17:11,069 --> 00:17:16,530
again you can steal hashes you can take

420
00:17:13,829 --> 00:17:18,599
plaintext or memory man-in-the-middle is

421
00:17:16,530 --> 00:17:22,230
an interesting one how many times have I

422
00:17:18,599 --> 00:17:25,079
seen Windows systems that have Active

423
00:17:22,230 --> 00:17:27,510
Directory talking over SSL all of the

424
00:17:25,079 --> 00:17:30,270
time how many times have I seen UNIX

425
00:17:27,510 --> 00:17:32,490
systems or systems in general which are

426
00:17:30,270 --> 00:17:34,230
accessible over a web interface for SSL

427
00:17:32,490 --> 00:17:36,240
how many times have I seen them

428
00:17:34,230 --> 00:17:43,140
correctly configure LDAP to go over SSL

429
00:17:36,240 --> 00:17:44,300
about zero and then finally Kerberos so

430
00:17:43,140 --> 00:17:46,430
even if you don't

431
00:17:44,300 --> 00:17:47,960
alaa back even if you don't have Active

432
00:17:46,430 --> 00:17:49,550
Directory Integration you might still

433
00:17:47,960 --> 00:17:54,980
have Kerberos it's used for things like

434
00:17:49,550 --> 00:17:56,990
NFS etc so the it is out there so that's

435
00:17:54,980 --> 00:17:58,550
the kind of things you can do what I

436
00:17:56,990 --> 00:18:00,790
wanted to do is get to the place where

437
00:17:58,550 --> 00:18:03,010
you can do these things not just

438
00:18:00,790 --> 00:18:05,240
pontificate that you can do these things

439
00:18:03,010 --> 00:18:08,510
so I figured I'd go away and write some

440
00:18:05,240 --> 00:18:13,870
tools and the first tool I write was

441
00:18:08,510 --> 00:18:16,970
linear casts as I've already indicated

442
00:18:13,870 --> 00:18:20,570
you need to be root to have the ability

443
00:18:16,970 --> 00:18:22,880
to use it but I think from an offensive

444
00:18:20,570 --> 00:18:26,600
perspective you can see the value that

445
00:18:22,880 --> 00:18:28,040
you go from a position of not having any

446
00:18:26,600 --> 00:18:30,020
access to the active directory of state

447
00:18:28,040 --> 00:18:31,490
potentially to having full access you

448
00:18:30,020 --> 00:18:34,280
have the ability to extract her shoes

449
00:18:31,490 --> 00:18:36,890
plaintext tickets for me it was worth

450
00:18:34,280 --> 00:18:37,700
the investment in time to go and figure

451
00:18:36,890 --> 00:18:39,500
out how it works

452
00:18:37,700 --> 00:18:42,260
given that it put me in this position

453
00:18:39,500 --> 00:18:46,280
with what with our customers with our

454
00:18:42,260 --> 00:18:52,310
internal systems long run so stealing

455
00:18:46,280 --> 00:18:54,740
hashes if you're running an IDI are on a

456
00:18:52,310 --> 00:18:56,510
Windows box the chances are the mimic

457
00:18:54,740 --> 00:18:59,000
house will be picked up when you drop it

458
00:18:56,510 --> 00:19:01,970
on that's great from a blue team

459
00:18:59,000 --> 00:19:04,760
perspective these attacks can all be

460
00:19:01,970 --> 00:19:07,850
performed on UNIX using pretty much the

461
00:19:04,760 --> 00:19:10,790
standard POSIX command set so find an CP

462
00:19:07,850 --> 00:19:12,260
I don't know how as a blue team person

463
00:19:10,790 --> 00:19:14,600
you're expected to spot when somebody's

464
00:19:12,260 --> 00:19:17,660
doing that maliciously versus using it

465
00:19:14,600 --> 00:19:19,629
legitimately but it takes a little bit

466
00:19:17,660 --> 00:19:22,180
more you work to actually use them

467
00:19:19,630 --> 00:19:25,310
predominantly because of the fact that

468
00:19:22,180 --> 00:19:27,170
this work hasn't been done before now

469
00:19:25,310 --> 00:19:28,610
when I publish the tools at the end of

470
00:19:27,170 --> 00:19:31,190
this presentation it should be dead easy

471
00:19:28,610 --> 00:19:33,439
you should be able to go away get access

472
00:19:31,190 --> 00:19:38,570
to Roo on a UNIX system and go away and

473
00:19:33,440 --> 00:19:40,040
knock yourselves out but hashes so I've

474
00:19:38,570 --> 00:19:46,669
looked at the hashes that are stored in

475
00:19:40,040 --> 00:19:50,930
both of Intelli and SSD SSD uses a stock

476
00:19:46,670 --> 00:19:54,500
sha-512 hunch from crypt so you can

477
00:19:50,930 --> 00:19:56,480
literally take your cache database apply

478
00:19:54,500 --> 00:19:58,220
a little bit of free processing to get

479
00:19:56,480 --> 00:20:01,760
out the that the shot

480
00:19:58,220 --> 00:20:04,340
five twelve hatch and parse it into John

481
00:20:01,760 --> 00:20:06,770
the Ripper I'm presuming that John the

482
00:20:04,340 --> 00:20:08,330
Ripper has an appropriate dictionary

483
00:20:06,770 --> 00:20:13,190
that you've configured the appropriate

484
00:20:08,330 --> 00:20:14,510
settings to apply parcel policy etc you

485
00:20:13,190 --> 00:20:16,750
should be let's just go around cracking

486
00:20:14,510 --> 00:20:18,800
those hashes it should be that simple

487
00:20:16,750 --> 00:20:20,960
incidentally that's the same way that

488
00:20:18,800 --> 00:20:23,360
you can attack Samba if you have Samba

489
00:20:20,960 --> 00:20:26,720
on a UNIX box even if it's not Active

490
00:20:23,360 --> 00:20:28,699
Directory joined that's using the center

491
00:20:26,720 --> 00:20:30,770
since essentially SSD is it's the same

492
00:20:28,700 --> 00:20:32,540
storage mechanism of Samba does so there

493
00:20:30,770 --> 00:20:34,580
will be an equivalent file for Samba for

494
00:20:32,540 --> 00:20:39,649
local users and you can go and dump

495
00:20:34,580 --> 00:20:42,199
those two so as SSD Vint Ella a bit more

496
00:20:39,650 --> 00:20:44,480
difficult for a start is a sequel like

497
00:20:42,200 --> 00:20:46,040
database that's easy once you realize

498
00:20:44,480 --> 00:20:48,080
it's a sequel like database but till you

499
00:20:46,040 --> 00:20:51,560
do it you're not quite sure what you're

500
00:20:48,080 --> 00:20:54,409
looking at it has its own bespoke

501
00:20:51,560 --> 00:20:56,570
hashing algorithms but the good news is

502
00:20:54,410 --> 00:20:57,710
the vin teller solution all of the

503
00:20:56,570 --> 00:21:01,010
symbols that were there on the binary

504
00:20:57,710 --> 00:21:05,270
files on the libraries etc so it wasn't

505
00:21:01,010 --> 00:21:10,070
too difficult to reverse engineer so vin

506
00:21:05,270 --> 00:21:11,720
teller has two formats three from the

507
00:21:10,070 --> 00:21:14,090
next release I think he's probably fair

508
00:21:11,720 --> 00:21:15,740
to say it has a legacy which I don't

509
00:21:14,090 --> 00:21:19,639
think I've actually seen in practice in

510
00:21:15,740 --> 00:21:22,220
the wild it has sha-256 using a bespoke

511
00:21:19,640 --> 00:21:24,530
implementation the bespoke

512
00:21:22,220 --> 00:21:28,220
implementation uses salting as UUID and

513
00:21:24,530 --> 00:21:29,660
has some other other characteristics so

514
00:21:28,220 --> 00:21:32,660
how hard was it for me to find this

515
00:21:29,660 --> 00:21:35,420
information out well from the point

516
00:21:32,660 --> 00:21:37,420
where I spotted the function it was less

517
00:21:35,420 --> 00:21:41,510
than a day probably a couple of hours

518
00:21:37,420 --> 00:21:43,760
and what did it look like little ax went

519
00:21:41,510 --> 00:21:44,930
like that so essentially when you log on

520
00:21:43,760 --> 00:21:48,350
to a vinta

521
00:21:44,930 --> 00:21:50,690
joined Active Directory system your

522
00:21:48,350 --> 00:21:55,310
password gets concatenated with a hash

523
00:21:50,690 --> 00:21:58,570
UUID and another constant and I sent you

524
00:21:55,310 --> 00:22:00,770
gets passed into it into sha-256 and

525
00:21:58,570 --> 00:22:04,129
that gets stored in the cache and that

526
00:22:00,770 --> 00:22:07,610
becomes your future access to the system

527
00:22:04,130 --> 00:22:09,500
I think the reasoning is pretty similar

528
00:22:07,610 --> 00:22:11,870
to it on Windows the idea that perhaps

529
00:22:09,500 --> 00:22:12,290
your system might become disconnected

530
00:22:11,870 --> 00:22:14,209
for

531
00:22:12,290 --> 00:22:18,110
therapy for some regard for some reason

532
00:22:14,210 --> 00:22:19,820
I can't imagine a situation where that's

533
00:22:18,110 --> 00:22:21,110
likely to happen in practice but that's

534
00:22:19,820 --> 00:22:26,840
the that's the rationale behind the

535
00:22:21,110 --> 00:22:28,820
caching so once you know what it looks

536
00:22:26,840 --> 00:22:32,590
like you can go away and you can write

537
00:22:28,820 --> 00:22:35,570
John the Ripper rule set to process it

538
00:22:32,590 --> 00:22:37,909
this will be up in in the git repo post

539
00:22:35,570 --> 00:22:40,790
talk so don't bother about scribbling it

540
00:22:37,910 --> 00:22:44,450
down there but essentially it says we

541
00:22:40,790 --> 00:22:46,399
have a hash it is a sha-256 it has both

542
00:22:44,450 --> 00:22:47,380
a username component actually that's the

543
00:22:46,400 --> 00:22:52,520
UUID

544
00:22:47,380 --> 00:22:55,190
and it has a salt and combine these

545
00:22:52,520 --> 00:23:00,650
things in the following form so constant

546
00:22:55,190 --> 00:23:02,240
one UUID constant - plaintext value and

547
00:23:00,650 --> 00:23:08,990
then use this as the base for cracking

548
00:23:02,240 --> 00:23:11,930
hashes so that's how she's done and

549
00:23:08,990 --> 00:23:17,570
dusted but we can also get the plaintext

550
00:23:11,930 --> 00:23:22,430
values back with that I mean if you

551
00:23:17,570 --> 00:23:24,590
dropped the core file for SSD vin teller

552
00:23:22,430 --> 00:23:26,960
or any of these other solutions the

553
00:23:24,590 --> 00:23:29,209
chances are the plaintext values or some

554
00:23:26,960 --> 00:23:30,880
people's passwords are likely to still

555
00:23:29,210 --> 00:23:33,580
be in the in the memory of the system

556
00:23:30,880 --> 00:23:36,320
SSD is particularly interesting because

557
00:23:33,580 --> 00:23:38,360
the way that it's stored is within a

558
00:23:36,320 --> 00:23:40,100
structure and so there's actually a

559
00:23:38,360 --> 00:23:42,350
piece of information is stored in a

560
00:23:40,100 --> 00:23:44,990
structure directly preceding the hash or

561
00:23:42,350 --> 00:23:46,790
the plaintext value I should say such

562
00:23:44,990 --> 00:23:48,860
that you can immediately identify where

563
00:23:46,790 --> 00:23:50,450
those plaintext values off rather than

564
00:23:48,860 --> 00:23:52,129
didn't Ella for example where

565
00:23:50,450 --> 00:23:55,280
essentially you strings the core dump

566
00:23:52,130 --> 00:23:57,850
and you have to guess what might be a

567
00:23:55,280 --> 00:24:00,710
password versus what what might not be

568
00:23:57,850 --> 00:24:02,209
but it's dead easy and again from a

569
00:24:00,710 --> 00:24:04,010
defense perspective how many people are

570
00:24:02,210 --> 00:24:06,050
really looking at wengie core gdb

571
00:24:04,010 --> 00:24:07,790
strings have been run on their systems i

572
00:24:06,050 --> 00:24:10,280
but i thought i think it's unlikely the

573
00:24:07,790 --> 00:24:14,629
last like gonna be the case so that's

574
00:24:10,280 --> 00:24:16,550
that's plaintext memory then we have

575
00:24:14,630 --> 00:24:18,110
tickets say tickets are the piece of

576
00:24:16,550 --> 00:24:20,060
information that means that once you've

577
00:24:18,110 --> 00:24:22,100
logged onto her system on running Active

578
00:24:20,060 --> 00:24:23,810
Directory you can then log on to other

579
00:24:22,100 --> 00:24:25,639
systems without necessarily needing to

580
00:24:23,810 --> 00:24:28,730
provide your credentials again

581
00:24:25,640 --> 00:24:31,160
and in the case of both vin teller SSD

582
00:24:28,730 --> 00:24:32,840
and Kerberos more generally those

583
00:24:31,160 --> 00:24:34,670
tickets for a UNIX perspective are

584
00:24:32,840 --> 00:24:37,580
stored in slash temp they have

585
00:24:34,670 --> 00:24:39,710
permissions that only the issued user

586
00:24:37,580 --> 00:24:42,080
should have access to them but they're

587
00:24:39,710 --> 00:24:43,970
there if your route in going crabbing

588
00:24:42,080 --> 00:24:47,360
we're quite easily and there are tools

589
00:24:43,970 --> 00:24:50,630
plant are plenty to leverage that fact s

590
00:24:47,360 --> 00:24:54,409
SMB client is likely to be on a UNIX

591
00:24:50,630 --> 00:24:56,090
system if its domain joined but that you

592
00:24:54,410 --> 00:24:57,380
could take those stays cache files you

593
00:24:56,090 --> 00:25:00,439
could run the mystery meerkats on your

594
00:24:57,380 --> 00:25:02,270
window system you could load them into

595
00:25:00,440 --> 00:25:04,940
wash or shark so you can look up for

596
00:25:02,270 --> 00:25:07,460
example the the encrypted traffic

597
00:25:04,940 --> 00:25:09,320
between the UNIX system and the domain

598
00:25:07,460 --> 00:25:11,440
controller means you therefore have got

599
00:25:09,320 --> 00:25:15,110
the ability to start compromising that

600
00:25:11,440 --> 00:25:17,270
and allegedly you can also load them

601
00:25:15,110 --> 00:25:18,830
into X free RDP I've not had that

602
00:25:17,270 --> 00:25:21,290
working and I'm a little bit skeptical

603
00:25:18,830 --> 00:25:23,418
because I don't think it should work but

604
00:25:21,290 --> 00:25:27,080
there is documentation indicates that it

605
00:25:23,419 --> 00:25:33,250
might open source documentation is

606
00:25:27,080 --> 00:25:35,629
always somewhat untrustworthy ticket

607
00:25:33,250 --> 00:25:37,220
that's how easy it is to miss you

608
00:25:35,630 --> 00:25:38,809
somebody's ticket so on the right hand

609
00:25:37,220 --> 00:25:41,600
side left hand side from your

610
00:25:38,809 --> 00:25:45,620
perspective you have an administrator

611
00:25:41,600 --> 00:25:48,740
they have a ticket david TGT a ticket

612
00:25:45,620 --> 00:25:52,969
granting ticket for the third party dot

613
00:25:48,740 --> 00:25:56,480
example.org domain and on the right hand

614
00:25:52,970 --> 00:25:58,760
side I'm copying that ticket to another

615
00:25:56,480 --> 00:26:02,299
file that's the bit where you need to be

616
00:25:58,760 --> 00:26:03,650
root I then log in to a separate account

617
00:26:02,299 --> 00:26:05,690
again the user account

618
00:26:03,650 --> 00:26:09,230
I set the appropriate environment

619
00:26:05,690 --> 00:26:11,660
variable to point at my copy ticket and

620
00:26:09,230 --> 00:26:13,840
now I'm an administrator really is that

621
00:26:11,660 --> 00:26:13,840
simple

622
00:26:15,610 --> 00:26:21,799
so miracast gets us a few things it gets

623
00:26:18,919 --> 00:26:23,540
this the ability to grab cash cashes it

624
00:26:21,799 --> 00:26:26,270
gives us the ability to scrape process

625
00:26:23,540 --> 00:26:28,940
memory in L it will allow us to locate

626
00:26:26,270 --> 00:26:31,700
quickly and efficiently Kerberos tickets

627
00:26:28,940 --> 00:26:34,419
and it will grab appropriate Active

628
00:26:31,700 --> 00:26:36,800
Directory meta data where available

629
00:26:34,419 --> 00:26:39,090
however that's not the end of the

630
00:26:36,800 --> 00:26:41,879
release say

631
00:26:39,090 --> 00:26:44,100
I wanted to make this as easy as

632
00:26:41,879 --> 00:26:46,469
possible for both sides so we have post

633
00:26:44,100 --> 00:26:47,820
exploitation modules for Metasploit we

634
00:26:46,470 --> 00:26:49,200
have the John the Ripper all set to a

635
00:26:47,820 --> 00:26:51,389
lady to go off the vin teller hashes and

636
00:26:49,200 --> 00:26:53,610
crack them quite happily we have all dit

637
00:26:51,389 --> 00:26:55,110
D policies so there's a chance to feel

638
00:26:53,610 --> 00:26:56,668
the blue team if you load these policies

639
00:26:55,110 --> 00:26:58,439
into your into your eunuchs estate you

640
00:26:56,669 --> 00:27:01,440
might actually spot the bad guys doing

641
00:26:58,440 --> 00:27:03,929
stuff and eventually I want to share

642
00:27:01,440 --> 00:27:05,870
everything I've been doing all my

643
00:27:03,929 --> 00:27:08,820
research all my father's etc I think

644
00:27:05,870 --> 00:27:10,408
nothing bugs me more than cases where

645
00:27:08,820 --> 00:27:11,700
people do a great talk talking about an

646
00:27:10,409 --> 00:27:13,379
awesome bug and then don't share

647
00:27:11,700 --> 00:27:15,360
anything and every really learns a huge

648
00:27:13,379 --> 00:27:18,689
amount afterwards so I'm going to be

649
00:27:15,360 --> 00:27:21,090
sharing everything I possibly can do so

650
00:27:18,690 --> 00:27:24,389
it's not up yet but that's where you'll

651
00:27:21,090 --> 00:27:26,999
be able to find it and as I said it's

652
00:27:24,389 --> 00:27:28,740
it's there to enable both the blue and

653
00:27:26,999 --> 00:27:30,299
the red team I don't want to be one of

654
00:27:28,740 --> 00:27:35,820
those guys that's playing for one side

655
00:27:30,299 --> 00:27:37,289
I'd like to see both sides improve so

656
00:27:35,820 --> 00:27:38,668
that's what the structure looks like as

657
00:27:37,289 --> 00:27:42,869
I said there's John the Ripper

658
00:27:38,669 --> 00:27:44,159
Metasploit or dit deed the data and the

659
00:27:42,869 --> 00:27:45,600
songs bit will probably be quite

660
00:27:44,159 --> 00:27:47,820
interesting for whatever anybody wants

661
00:27:45,600 --> 00:27:49,740
to take this research on and take you

662
00:27:47,820 --> 00:27:51,330
further because I think there's probably

663
00:27:49,740 --> 00:27:53,879
enough room for another 12 months of

664
00:27:51,330 --> 00:27:56,580
research with so many aspects I've been

665
00:27:53,879 --> 00:27:58,439
looking at anyway that's the bad news

666
00:27:56,580 --> 00:28:00,119
that's hell that's how we can we can

667
00:27:58,440 --> 00:28:03,029
breach an Active Directory stay from

668
00:28:00,119 --> 00:28:05,939
your unix perspective but no good talk

669
00:28:03,029 --> 00:28:08,429
is complete without a discussion about

670
00:28:05,940 --> 00:28:10,830
how you actually protect yourself the

671
00:28:08,429 --> 00:28:13,169
mitigations both investigations from our

672
00:28:10,830 --> 00:28:14,369
operator perspective you know you're the

673
00:28:13,169 --> 00:28:17,279
guard is just wonderful for the UNIX

674
00:28:14,369 --> 00:28:19,649
estate what do I do but also from the

675
00:28:17,279 --> 00:28:21,269
developers perspective I'm writing

676
00:28:19,649 --> 00:28:22,949
software to do this kind of thing how

677
00:28:21,269 --> 00:28:24,720
could I write it better next time so

678
00:28:22,950 --> 00:28:28,379
that this this kind of thing is less it

679
00:28:24,720 --> 00:28:29,759
easy to do say it's from a mitigations

680
00:28:28,379 --> 00:28:32,719
perspective so this is the things for

681
00:28:29,759 --> 00:28:34,619
the operators generic hardening

682
00:28:32,720 --> 00:28:38,190
restricting root access

683
00:28:34,619 --> 00:28:40,168
always a nice thing to do I think it's

684
00:28:38,190 --> 00:28:42,240
rare that we find boxes that are as well

685
00:28:40,169 --> 00:28:44,190
secured as we'd like them to be it's not

686
00:28:42,240 --> 00:28:46,490
the focus of this talk but I think

687
00:28:44,190 --> 00:28:49,500
there's more work to be done there

688
00:28:46,490 --> 00:28:51,869
SELinux it's a ask to switch on

689
00:28:49,500 --> 00:28:52,800
its ass to get running but we really

690
00:28:51,869 --> 00:28:56,040
need to take the time

691
00:28:52,800 --> 00:28:59,490
to get here working to get it used on on

692
00:28:56,040 --> 00:29:03,889
UNIX infrastructures reading the man

693
00:28:59,490 --> 00:29:07,770
pages is a super useful thing say

694
00:29:03,890 --> 00:29:12,600
generic hardening the cat cache feature

695
00:29:07,770 --> 00:29:15,960
on our UNIX box is on by default really

696
00:29:12,600 --> 00:29:18,090
ought not to be there is no good reason

697
00:29:15,960 --> 00:29:20,130
why UNIX box is ever going to find

698
00:29:18,090 --> 00:29:22,530
itself in a situation where it can't

699
00:29:20,130 --> 00:29:24,150
talk to the domain controller hardly

700
00:29:22,530 --> 00:29:25,710
hardly likely you're going to take your

701
00:29:24,150 --> 00:29:26,970
UNIX box home of the weekend and plug it

702
00:29:25,710 --> 00:29:30,060
in on your home network to get a little

703
00:29:26,970 --> 00:29:32,990
bit of extra work done uh-hum so turning

704
00:29:30,060 --> 00:29:36,899
it off will be a super useful first step

705
00:29:32,990 --> 00:29:38,430
we as attackers if we're working for

706
00:29:36,900 --> 00:29:40,770
organizations should be pointing this

707
00:29:38,430 --> 00:29:42,960
out to the organization's we're working

708
00:29:40,770 --> 00:29:45,120
for we should be identifying when we've

709
00:29:42,960 --> 00:29:47,850
got an active directory joined UNIX

710
00:29:45,120 --> 00:29:49,290
system in the scope of an assessment and

711
00:29:47,850 --> 00:29:50,879
we should be flagging it out sort of the

712
00:29:49,290 --> 00:29:55,290
they can the organizations could have a

713
00:29:50,880 --> 00:29:58,560
bit of a think about it if only it were

714
00:29:55,290 --> 00:30:02,010
that simple we should be patching our

715
00:29:58,560 --> 00:30:03,600
systems better yeah the resistance that

716
00:30:02,010 --> 00:30:06,800
I've seen that I haven't been passionate

717
00:30:03,600 --> 00:30:10,320
in two or three years as unacceptable

718
00:30:06,800 --> 00:30:13,020
and it's only a matter of time if that's

719
00:30:10,320 --> 00:30:14,730
the case for an organization before

720
00:30:13,020 --> 00:30:17,070
somebody bad would do something bad to

721
00:30:14,730 --> 00:30:19,200
your systems and we should be looking

722
00:30:17,070 --> 00:30:22,620
for privilege escalation attacks there

723
00:30:19,200 --> 00:30:25,320
in many cases there are dumb and easy

724
00:30:22,620 --> 00:30:27,750
ways to get root on large enterprise

725
00:30:25,320 --> 00:30:31,409
networks really we ought to be doing a

726
00:30:27,750 --> 00:30:36,090
better job of getting rid of those so

727
00:30:31,410 --> 00:30:37,710
specifics restricting access to P trace

728
00:30:36,090 --> 00:30:39,060
is a super useful thing to do from a

729
00:30:37,710 --> 00:30:40,680
generic perspective but in this

730
00:30:39,060 --> 00:30:44,700
particular instance any of the attacks

731
00:30:40,680 --> 00:30:46,560
that look at the cache memory saw the

732
00:30:44,700 --> 00:30:50,690
plain text or the hashes in memory is

733
00:30:46,560 --> 00:30:50,690
only possible because we can use gdb

734
00:30:50,720 --> 00:30:57,390
disabling the P trace capability using

735
00:30:53,730 --> 00:30:59,400
Yammer or selinux I'd suggest should be

736
00:30:57,390 --> 00:31:00,510
done at the very least you should have

737
00:30:59,400 --> 00:31:04,820
some monitoring in place so you know

738
00:31:00,510 --> 00:31:04,820
when it's being used and by whom

739
00:31:05,299 --> 00:31:12,658
protecting resources selinux

740
00:31:08,149 --> 00:31:17,518
interestingly both Intelli and SSS D

741
00:31:12,659 --> 00:31:19,799
have selinux policies in Vint Ellis case

742
00:31:17,519 --> 00:31:21,690
it's in a github repo which isn't

743
00:31:19,799 --> 00:31:23,309
clearly flagged out to anybody that's

744
00:31:21,690 --> 00:31:26,340
deploying it it's somewhere on the

745
00:31:23,309 --> 00:31:29,330
Internet in fairness it's in in one

746
00:31:26,340 --> 00:31:32,220
identity who owned vin tellers

747
00:31:29,330 --> 00:31:34,620
organizational project group but you're

748
00:31:32,220 --> 00:31:37,679
unlikely to find it by accident should

749
00:31:34,620 --> 00:31:39,928
we say so I guess if you're deploying

750
00:31:37,679 --> 00:31:43,669
VIN teller go away and grab that grab

751
00:31:39,929 --> 00:31:43,669
those SELinux policies and apply them

752
00:31:44,450 --> 00:31:49,500
order thing so most of what I've talked

753
00:31:47,580 --> 00:31:52,019
about so far in terms of mitigations has

754
00:31:49,500 --> 00:31:57,149
been around how you protect yourself

755
00:31:52,019 --> 00:32:00,990
before you get the breach auditing is a

756
00:31:57,149 --> 00:32:06,750
must from a prepare yourself for when

757
00:32:00,990 --> 00:32:09,690
you do get breached most people on UNIX

758
00:32:06,750 --> 00:32:10,860
systems appear to rely upon logging log

759
00:32:09,690 --> 00:32:13,649
in and order Singh have slightly

760
00:32:10,860 --> 00:32:15,928
different roles responsibilities log in

761
00:32:13,649 --> 00:32:20,610
is for developers order thing is for sis

762
00:32:15,929 --> 00:32:22,740
happens it's noticeable in the case of

763
00:32:20,610 --> 00:32:24,689
Intelli the order thing is developers

764
00:32:22,740 --> 00:32:26,879
because if you switch the debug level up

765
00:32:24,690 --> 00:32:28,409
high enough you get full packet captures

766
00:32:26,879 --> 00:32:29,969
of all of the IPC that's happening just

767
00:32:28,409 --> 00:32:33,720
super helpful when you're right the

768
00:32:29,970 --> 00:32:34,860
funds but I don't really think most

769
00:32:33,720 --> 00:32:36,330
administrators are going to want that

770
00:32:34,860 --> 00:32:38,729
information they're probably gonna wanna

771
00:32:36,330 --> 00:32:41,490
know when I'm touching the socket when

772
00:32:38,730 --> 00:32:46,320
I'm touching the cash caches when I'm

773
00:32:41,490 --> 00:32:49,669
reading the configuration files etc so

774
00:32:46,320 --> 00:32:54,509
the manual super useful place to look

775
00:32:49,669 --> 00:32:57,809
it's in there in plain sight there is an

776
00:32:54,509 --> 00:33:00,840
option to control the cached hashes

777
00:32:57,809 --> 00:33:03,120
there is an option to determine what

778
00:33:00,840 --> 00:33:05,699
encryption level is applied to Kerberos

779
00:33:03,120 --> 00:33:08,209
tickets it's all there just nobody's

780
00:33:05,700 --> 00:33:08,210
looking at it

781
00:33:10,290 --> 00:33:15,300
so this is an interesting one Kerberos

782
00:33:13,020 --> 00:33:18,270
is enabled as part of the Intel ahan as

783
00:33:15,300 --> 00:33:20,190
part of s SSD in many cases it probably

784
00:33:18,270 --> 00:33:22,139
doesn't need to be enabled at all

785
00:33:20,190 --> 00:33:25,470
there's no reason necessarily to grant

786
00:33:22,140 --> 00:33:28,140
tickets because most the time when you

787
00:33:25,470 --> 00:33:30,510
connect to a UNIX box you're on that

788
00:33:28,140 --> 00:33:33,060
UNIX box you're unlikely to start Rd

789
00:33:30,510 --> 00:33:35,940
peeing through a UNIX system you're

790
00:33:33,060 --> 00:33:39,360
unlikely unless there's this particular

791
00:33:35,940 --> 00:33:40,800
reason to use SMB to mattracks at other

792
00:33:39,360 --> 00:33:42,360
parts of the network so actually you

793
00:33:40,800 --> 00:33:44,790
could probably switch off the Kerberos

794
00:33:42,360 --> 00:33:47,340
bit entirely which means this if someone

795
00:33:44,790 --> 00:33:48,690
breaches your UNIX system they can't

796
00:33:47,340 --> 00:33:51,300
take your identity and misuse it

797
00:33:48,690 --> 00:33:52,560
anywhere else but they can they can take

798
00:33:51,300 --> 00:33:54,740
the hashes but they can't they can't

799
00:33:52,560 --> 00:33:58,830
take the Kerberos tickets and use them

800
00:33:54,740 --> 00:34:00,210
so go have a look so that's that's an

801
00:33:58,830 --> 00:34:04,980
operator's view of the kinds of things

802
00:34:00,210 --> 00:34:07,230
you need to be doing in terms of vendors

803
00:34:04,980 --> 00:34:10,100
because I think vendors had a little bit

804
00:34:07,230 --> 00:34:13,110
of a hard time digesting some of this

805
00:34:10,100 --> 00:34:16,489
harden your binaries as I said I've been

806
00:34:13,110 --> 00:34:16,490
fighting VIN teller and had some success

807
00:34:16,699 --> 00:34:20,850
it's going to be easier to explore it

808
00:34:19,050 --> 00:34:24,030
because they aren't hardened because

809
00:34:20,850 --> 00:34:27,210
there isn't any a s law because there

810
00:34:24,030 --> 00:34:36,210
isn't any additional checking around

811
00:34:27,210 --> 00:34:41,250
staff usage permissions drop on

812
00:34:36,210 --> 00:34:43,139
necessarily privileges parts of SSD VIN

813
00:34:41,250 --> 00:34:47,730
teller necessarily need to run as root

814
00:34:43,139 --> 00:34:50,940
other parts probably don't parts of the

815
00:34:47,730 --> 00:34:52,860
the artifacts needs to be accessible by

816
00:34:50,940 --> 00:34:55,440
normal users past it don't you know that

817
00:34:52,860 --> 00:34:57,660
metadata is a great example I don't know

818
00:34:55,440 --> 00:35:00,090
that there's a case for a user directly

819
00:34:57,660 --> 00:35:01,350
there to access that ad metadata despite

820
00:35:00,090 --> 00:35:03,000
the fact is they're in a sequel like

821
00:35:01,350 --> 00:35:05,360
database and anybody could go and have a

822
00:35:03,000 --> 00:35:05,360
look at it

823
00:35:08,890 --> 00:35:16,400
yeah cover that I think say cryptography

824
00:35:14,109 --> 00:35:18,288
one of the problems with the solutions

825
00:35:16,400 --> 00:35:20,329
that we've looked at so far is that the

826
00:35:18,289 --> 00:35:24,829
hashes aren't stored particularly well

827
00:35:20,329 --> 00:35:26,510
and actually the antenna Intelli one not

828
00:35:24,829 --> 00:35:29,809
one identity have been super useful in

829
00:35:26,510 --> 00:35:31,460
terms of working to resolve that but

830
00:35:29,809 --> 00:35:36,260
realistically we shouldn't be storing

831
00:35:31,460 --> 00:35:38,329
passwords as hashes these days if ever

832
00:35:36,260 --> 00:35:40,430
it's perhaps a bet is perhaps a caveat

833
00:35:38,329 --> 00:35:42,109
of our statement but you know there's

834
00:35:40,430 --> 00:35:44,470
enough good work being done on storing

835
00:35:42,109 --> 00:35:51,140
passwords in inappropriate fractions

836
00:35:44,470 --> 00:35:52,730
please stop using hashes so I've

837
00:35:51,140 --> 00:35:55,759
mentioned of Intelli were pretty

838
00:35:52,730 --> 00:35:57,380
awesome and that's just how olson they

839
00:35:55,760 --> 00:35:59,329
were so when we started speaking to them

840
00:35:57,380 --> 00:36:01,309
back in June their first thought was

841
00:35:59,329 --> 00:36:02,990
actually can we give you your our SDK so

842
00:36:01,309 --> 00:36:05,450
you can make your fuzzy more effective

843
00:36:02,990 --> 00:36:07,640
their second thought was great we'll get

844
00:36:05,450 --> 00:36:11,270
rid of the the SHA hashes will move

845
00:36:07,640 --> 00:36:14,180
across to be crypt their third thought

846
00:36:11,270 --> 00:36:15,740
was oh yes plain plain text in memory

847
00:36:14,180 --> 00:36:17,990
yeah we know why that is

848
00:36:15,740 --> 00:36:19,720
it's because we have to keep it there in

849
00:36:17,990 --> 00:36:22,279
case somebody needs to a password reset

850
00:36:19,720 --> 00:36:23,029
as part of the login process and we

851
00:36:22,279 --> 00:36:25,069
don't want to ask them for their

852
00:36:23,029 --> 00:36:26,960
password again but we'll write a

853
00:36:25,069 --> 00:36:29,029
separate clean up thread that will clear

854
00:36:26,960 --> 00:36:30,890
down that memory as quickly as possible

855
00:36:29,029 --> 00:36:36,200
and they pointed me there see in the

856
00:36:30,890 --> 00:36:38,660
next policies it was really nice and

857
00:36:36,200 --> 00:36:40,879
refreshing to work with the vendor that

858
00:36:38,660 --> 00:36:44,240
was responsive I wish all vendors were

859
00:36:40,880 --> 00:36:45,470
like that but in fairness to all of the

860
00:36:44,240 --> 00:36:46,819
other vendors we've been we've been

861
00:36:45,470 --> 00:36:48,730
talking to around this Active Directory

862
00:36:46,819 --> 00:36:52,460
research they've all been pretty good

863
00:36:48,730 --> 00:36:54,640
Red Hat being pretty happy to talk to us

864
00:36:52,460 --> 00:36:56,960
and some of the other vendors who've had

865
00:36:54,640 --> 00:36:58,339
somewhat shorter timelines I think

866
00:36:56,960 --> 00:37:04,099
there's a vendor I started talking to

867
00:36:58,339 --> 00:37:06,558
you last week they've been good too the

868
00:37:04,099 --> 00:37:09,260
takeaway should shouldn't be that the

869
00:37:06,559 --> 00:37:12,109
vendors are doing this because they're

870
00:37:09,260 --> 00:37:14,119
lazy because they're incapable they're

871
00:37:12,109 --> 00:37:15,680
doing it because no but nobody ie their

872
00:37:14,119 --> 00:37:18,039
customers is asking for them to be more

873
00:37:15,680 --> 00:37:18,038
secure

874
00:37:19,580 --> 00:37:26,630
say some conclusions a little bit on

875
00:37:25,010 --> 00:37:29,120
what we've learned some next steps

876
00:37:26,630 --> 00:37:31,280
because there will be more work that I'm

877
00:37:29,120 --> 00:37:35,980
publishing energy costs and there's some

878
00:37:31,280 --> 00:37:38,510
Frank's say what have we learned

879
00:37:35,980 --> 00:37:41,660
Active Directory on UNIX is just the

880
00:37:38,510 --> 00:37:43,280
same as Active Directory on Windows fact

881
00:37:41,660 --> 00:37:48,470
it's just the same as Active Directory

882
00:37:43,280 --> 00:37:50,510
or Windows around the area of XP hashes

883
00:37:48,470 --> 00:37:53,140
passwords not well protected trust

884
00:37:50,510 --> 00:37:59,330
relationships are there to be exploited

885
00:37:53,140 --> 00:38:00,920
and quite frankly read the manual so my

886
00:37:59,330 --> 00:38:02,060
next steps so if you want to keep an eye

887
00:38:00,920 --> 00:38:04,940
out for what I'm going to be doing next

888
00:38:02,060 --> 00:38:08,540
with this the vin teller IPC

889
00:38:04,940 --> 00:38:09,890
implementation i I would like to get a

890
00:38:08,540 --> 00:38:11,540
better handle on all of the

891
00:38:09,890 --> 00:38:13,839
functionality that has because it seems

892
00:38:11,540 --> 00:38:16,730
they have quite a lot

893
00:38:13,840 --> 00:38:20,420
I'd love some POCs for some of the SSD

894
00:38:16,730 --> 00:38:22,850
things if I can get them myself I will

895
00:38:20,420 --> 00:38:25,430
and I will be making available hopefully

896
00:38:22,850 --> 00:38:29,120
with my OCS to help the blue team's pick

897
00:38:25,430 --> 00:38:31,910
them on their networks continuing to

898
00:38:29,120 --> 00:38:33,200
work with the vendors I went into this

899
00:38:31,910 --> 00:38:36,470
project thinking it'd be a couple of

900
00:38:33,200 --> 00:38:38,980
weeks worth of work it strikes me that

901
00:38:36,470 --> 00:38:43,339
there's just plenty more to be done

902
00:38:38,980 --> 00:38:45,500
meterpreter Metasploit i wrote some

903
00:38:43,340 --> 00:38:50,600
pretty crude post exploitation modules

904
00:38:45,500 --> 00:38:53,540
to suit my purpose the UNIX part of

905
00:38:50,600 --> 00:38:55,580
meterpreter needs love there are so many

906
00:38:53,540 --> 00:38:57,860
awesome things that you can do with UNIX

907
00:38:55,580 --> 00:38:59,180
that aren't being done because the

908
00:38:57,860 --> 00:39:02,300
functionality doesn't exist

909
00:38:59,180 --> 00:39:04,850
I know UNIX isn't as sexy as Windows and

910
00:39:02,300 --> 00:39:06,770
OS X but if you've if you've got time

911
00:39:04,850 --> 00:39:09,970
you've got interest I'm sure the Metroid

912
00:39:06,770 --> 00:39:13,670
guys would appreciate appreciate

913
00:39:09,970 --> 00:39:16,730
contributions in that regards so that's

914
00:39:13,670 --> 00:39:18,560
just about me done apart from this I

915
00:39:16,730 --> 00:39:20,840
think it's always important to

916
00:39:18,560 --> 00:39:23,630
acknowledge your peers the people have

917
00:39:20,840 --> 00:39:24,470
helped you along the way so in terms of

918
00:39:23,630 --> 00:39:26,750
active help

919
00:39:24,470 --> 00:39:29,299
Cisco's internal security organization

920
00:39:26,750 --> 00:39:30,740
would be wonderful solar designer he's

921
00:39:29,300 --> 00:39:32,870
the guy that writes John the Ripper or

922
00:39:30,740 --> 00:39:34,729
maintains John the Ripper

923
00:39:32,870 --> 00:39:38,330
has been great in terms of helping us

924
00:39:34,730 --> 00:39:40,520
with some of the esoteric flags that are

925
00:39:38,330 --> 00:39:42,799
necessary to get the hashes to crack

926
00:39:40,520 --> 00:39:44,270
I then borrowed ideas this isn't

927
00:39:42,800 --> 00:39:46,190
everybody that's ever worked on Active

928
00:39:44,270 --> 00:39:47,690
Directory but it's yeah it's a good

929
00:39:46,190 --> 00:39:49,490
starting point you should be going on

930
00:39:47,690 --> 00:39:51,380
following these guys reading what they

931
00:39:49,490 --> 00:39:52,939
have to say and hopefully learning from

932
00:39:51,380 --> 00:39:58,280
from the work they're doing

933
00:39:52,940 --> 00:40:01,190
I know special thanks the vendors who as

934
00:39:58,280 --> 00:40:02,750
I say have been awesome I've never had a

935
00:40:01,190 --> 00:40:03,710
situation where vendors come back to me

936
00:40:02,750 --> 00:40:05,780
in a century said we'll give you

937
00:40:03,710 --> 00:40:08,090
internal source code to help you attack

938
00:40:05,780 --> 00:40:13,420
this faster so that's that that's pretty

939
00:40:08,090 --> 00:40:17,170
that's pretty cool and we are down there

940
00:40:13,420 --> 00:40:17,170
so are there any questions

941
00:40:22,600 --> 00:40:27,080
hello one of the most important part of

942
00:40:25,970 --> 00:40:29,629
mimikatz

943
00:40:27,080 --> 00:40:32,060
and getting the hashes from the system

944
00:40:29,630 --> 00:40:35,270
is lateral movement through pass the

945
00:40:32,060 --> 00:40:38,720
hash attacks since what you're saying is

946
00:40:35,270 --> 00:40:41,720
that all implementations use custom

947
00:40:38,720 --> 00:40:44,000
other quotes hashing mechanisms are

948
00:40:41,720 --> 00:40:45,649
those kind of lateral movement attacks

949
00:40:44,000 --> 00:40:47,210
possible at all so that's a great

950
00:40:45,650 --> 00:40:49,250
question so the question was in case you

951
00:40:47,210 --> 00:40:51,140
didn't hear was some over half all the

952
00:40:49,250 --> 00:40:54,500
hashes in a format that you can use for

953
00:40:51,140 --> 00:40:54,799
posture hash right nice that's the bad

954
00:40:54,500 --> 00:40:56,990
news

955
00:40:54,800 --> 00:40:58,370
the thing that might be sad or might be

956
00:40:56,990 --> 00:40:59,810
crappy depending how you look at it you

957
00:40:58,370 --> 00:41:02,480
can't take those hashes and use them for

958
00:40:59,810 --> 00:41:04,820
pasture hash because they're stored in

959
00:41:02,480 --> 00:41:07,430
that custom format so that's probably

960
00:41:04,820 --> 00:41:13,130
the one saving grace but yeah I did

961
00:41:07,430 --> 00:41:14,870
think about I was would it be nice hi I

962
00:41:13,130 --> 00:41:16,750
was wondering if you ever looked into

963
00:41:14,870 --> 00:41:20,480
the swap file system of Linux because

964
00:41:16,750 --> 00:41:22,460
there's also many information within the

965
00:41:20,480 --> 00:41:25,760
swap file system like credentials plain

966
00:41:22,460 --> 00:41:27,260
text etc absolutely great question so

967
00:41:25,760 --> 00:41:29,750
yeah this sort of swath

968
00:41:27,260 --> 00:41:32,240
undoubtedly has more of these secrets I

969
00:41:29,750 --> 00:41:34,250
guess the key piece is probably figuring

970
00:41:32,240 --> 00:41:36,310
out how to identify what's useful versus

971
00:41:34,250 --> 00:41:39,590
not you think about how multi-gigabyte

972
00:41:36,310 --> 00:41:41,750
server swap is going to have quite a lot

973
00:41:39,590 --> 00:41:43,870
of information in it not necessarily a

974
00:41:41,750 --> 00:41:47,180
huge amount of useful information or

975
00:41:43,870 --> 00:41:50,390
food for varying values of

976
00:41:47,180 --> 00:41:52,460
useful you could certainly go looking

977
00:41:50,390 --> 00:41:56,569
for the SSD plain taste values

978
00:41:52,460 --> 00:41:58,579
I think VIN teller you would struggle I

979
00:41:56,569 --> 00:42:01,220
think probably if I if I be entirely

980
00:41:58,579 --> 00:42:04,460
honest the best thing to do will

981
00:42:01,220 --> 00:42:06,319
probably be to figure out how the Intel

982
00:42:04,460 --> 00:42:08,690
and SSD are actually storing the the

983
00:42:06,319 --> 00:42:10,069
data in memory because the best third

984
00:42:08,690 --> 00:42:11,750
the understanding you have of how they

985
00:42:10,069 --> 00:42:22,279
lay it lay their memory out the better

986
00:42:11,750 --> 00:42:25,869
chance you have of retrieving so just a

987
00:42:22,280 --> 00:42:29,390
curiosity on your slide you on the SSD

988
00:42:25,869 --> 00:42:31,819
private circuit there was here be

989
00:42:29,390 --> 00:42:34,790
dragons and then on the security

990
00:42:31,819 --> 00:42:37,250
evaluation there was a missing dot so is

991
00:42:34,790 --> 00:42:40,369
there something on you discord on that

992
00:42:37,250 --> 00:42:42,530
socket or all the missions are

993
00:42:40,369 --> 00:42:45,349
intentional actually the forces are

994
00:42:42,530 --> 00:42:48,319
actually in the gate rape I've already

995
00:42:45,349 --> 00:42:50,559
and one identity have already got access

996
00:42:48,319 --> 00:42:52,940
to that information

997
00:42:50,559 --> 00:42:55,819
the truth be told I haven't finished

998
00:42:52,940 --> 00:42:57,980
this trio of those bugs and indeed

999
00:42:55,819 --> 00:43:02,869
because I only started that in the last

1000
00:42:57,980 --> 00:43:04,730
month or say it to be continued I've not

1001
00:43:02,869 --> 00:43:08,240
found anything yet which is a smoking

1002
00:43:04,730 --> 00:43:10,970
gun but the very fact that the UNIX

1003
00:43:08,240 --> 00:43:12,618
socket is accessible to everyone was a

1004
00:43:10,970 --> 00:43:15,020
was a red flag in my mind when I started

1005
00:43:12,619 --> 00:43:18,109
and I haven't done enough to prove that

1006
00:43:15,020 --> 00:43:19,280
it's not a red flag now but I haven't

1007
00:43:18,109 --> 00:43:22,029
done enough to prove that it is either

1008
00:43:19,280 --> 00:43:22,030
if that makes sense

1009
00:43:22,960 --> 00:43:26,079
thank you

1010
00:43:32,650 --> 00:43:37,350
oh good perfect

1011
00:43:37,770 --> 00:43:41,900
[Applause]

