1
00:00:00,000 --> 00:00:05,430
yes we can go ahead and get started so

2
00:00:02,490 --> 00:00:07,170
so hi I'm Luke polenta I am from the

3
00:00:05,430 --> 00:00:09,090
University of Pennsylvania and I'll be

4
00:00:07,170 --> 00:00:13,860
presenting this work along with my

5
00:00:09,090 --> 00:00:16,289
co-author Nick Sullivan okay hello

6
00:00:13,860 --> 00:00:19,020
everybody thanks for coming on this

7
00:00:16,289 --> 00:00:21,689
lasted black hat so early we're going to

8
00:00:19,020 --> 00:00:23,130
talk today about at this paper that we

9
00:00:21,689 --> 00:00:25,260
publish together

10
00:00:23,130 --> 00:00:29,810
that's about elliptic curves now

11
00:00:25,260 --> 00:00:32,669
elliptic curves are a cryptographic a

12
00:00:29,810 --> 00:00:35,280
cryptographic primitive that is

13
00:00:32,668 --> 00:00:37,290
absolutely fundamental to security and

14
00:00:35,280 --> 00:00:40,550
in the way that we do encryption online

15
00:00:37,290 --> 00:00:42,870
and in our businesses and everywhere

16
00:00:40,550 --> 00:00:44,940
everywhere around the world so as the

17
00:00:42,870 --> 00:00:47,010
title suggests where this is a study of

18
00:00:44,940 --> 00:00:49,289
elliptic curve implementations in the

19
00:00:47,010 --> 00:00:51,960
wild and specifically we're looking at

20
00:00:49,289 --> 00:00:54,239
an algorithm called the elliptic curve

21
00:00:51,960 --> 00:00:55,020
diffie-hellman key exchange and how it's

22
00:00:54,239 --> 00:00:58,500
being used

23
00:00:55,020 --> 00:01:00,510
in the real world and chances are you're

24
00:00:58,500 --> 00:01:01,920
using this algorithm every day to secure

25
00:01:00,510 --> 00:01:04,769
your connections to work machines

26
00:01:01,920 --> 00:01:06,119
browsing the internet almost everything

27
00:01:04,769 --> 00:01:08,010
this is this wasn't the case ten years

28
00:01:06,119 --> 00:01:09,720
ago but within the last five years

29
00:01:08,010 --> 00:01:12,119
elliptic curves have become increasingly

30
00:01:09,720 --> 00:01:16,950
important so lift a curve diffie-hellman

31
00:01:12,119 --> 00:01:19,549
what is this well this is suppose we

32
00:01:16,950 --> 00:01:23,159
have you know our classic pair of

33
00:01:19,549 --> 00:01:25,830
communicate Alice and Bob and an

34
00:01:23,159 --> 00:01:28,259
eavesdropper Eve so we have Alice who

35
00:01:25,830 --> 00:01:29,759
wants to talk to who's a client who

36
00:01:28,259 --> 00:01:32,490
wants to talk to a server Bob over the

37
00:01:29,759 --> 00:01:34,290
public Internet and we also have Eve who

38
00:01:32,490 --> 00:01:36,329
wants to snoop on the messages between

39
00:01:34,290 --> 00:01:37,710
Alice and Bob so to secure their

40
00:01:36,329 --> 00:01:41,789
connections Alice and Bob want to

41
00:01:37,710 --> 00:01:43,829
negotiate a shared key and use that to

42
00:01:41,790 --> 00:01:45,530
encrypt the messages and they can do

43
00:01:43,829 --> 00:01:50,899
this using elliptic curve diffie-hellman

44
00:01:45,530 --> 00:01:50,899
first they decide on what there we go

45
00:01:54,500 --> 00:02:06,830
sorry this accidentally touched this

46
00:01:57,560 --> 00:02:08,990
wire okay there's a sec okay great

47
00:02:06,830 --> 00:02:10,460
I will not touch that wire again first

48
00:02:08,990 --> 00:02:14,240
they decide on a curve to use for key

49
00:02:10,460 --> 00:02:18,080
exchange so Bob chooses a secret key B

50
00:02:14,240 --> 00:02:20,240
and uses it to compute a point on the

51
00:02:18,080 --> 00:02:22,280
curve now a curve is is really what you

52
00:02:20,240 --> 00:02:25,250
traditionally think of as a curve so

53
00:02:22,280 --> 00:02:26,690
it's a it's an equation specifically an

54
00:02:25,250 --> 00:02:30,530
elliptic curve is an equation with x

55
00:02:26,690 --> 00:02:33,859
squared and Y cubed and a couple of

56
00:02:30,530 --> 00:02:35,780
other smaller parameters so you can use

57
00:02:33,860 --> 00:02:37,130
points on these curves and you can kind

58
00:02:35,780 --> 00:02:38,930
of add them together and multiply them

59
00:02:37,130 --> 00:02:43,370
together so this is this is how elliptic

60
00:02:38,930 --> 00:02:46,280
curve cryptography and takes a point on

61
00:02:43,370 --> 00:02:49,040
the curve and multiplies it or adds it

62
00:02:46,280 --> 00:02:51,950
to itself B times and that becomes the

63
00:02:49,040 --> 00:02:53,840
public point so at Bob chooses the

64
00:02:51,950 --> 00:02:56,450
secret key compute some public point P

65
00:02:53,840 --> 00:02:59,900
and then sends that to Alex

66
00:02:56,450 --> 00:03:02,480
Alice sorry Alice sends it to Bob and

67
00:02:59,900 --> 00:03:07,100
Bob does sort of the same thing computes

68
00:03:02,480 --> 00:03:12,500
a this the same point and adds it

69
00:03:07,100 --> 00:03:13,790
multiplies it by its secret value so the

70
00:03:12,500 --> 00:03:15,650
really good thing about elliptic curves

71
00:03:13,790 --> 00:03:19,130
and the fundamental security property

72
00:03:15,650 --> 00:03:21,920
that you have here is that if you take B

73
00:03:19,130 --> 00:03:24,320
times P or a times P you can't get B or

74
00:03:21,920 --> 00:03:27,670
a back so be an A or the secret Keys B

75
00:03:24,320 --> 00:03:31,790
times P a times P are the public keys

76
00:03:27,670 --> 00:03:33,980
now Alice and Bob can then each multiply

77
00:03:31,790 --> 00:03:36,440
this public key by their own secret key

78
00:03:33,980 --> 00:03:37,940
and these values end up being the same

79
00:03:36,440 --> 00:03:41,780
due to the commutative property so you

80
00:03:37,940 --> 00:03:43,720
have a times B P B times a P and these

81
00:03:41,780 --> 00:03:46,840
end up being the same value and the

82
00:03:43,720 --> 00:03:49,010
security relies on what's called the

83
00:03:46,840 --> 00:03:50,690
computational diffie-hellman assumption

84
00:03:49,010 --> 00:03:54,260
which is mathematical assumption that

85
00:03:50,690 --> 00:03:55,609
says that given a times P B times P and

86
00:03:54,260 --> 00:03:57,709
the curve parameters the attacker

87
00:03:55,610 --> 00:04:00,769
shouldn't be able to learn the shared

88
00:03:57,709 --> 00:04:03,560
secret now let's look at some attacks

89
00:04:00,769 --> 00:04:07,740
and defenses against this primitive this

90
00:04:03,560 --> 00:04:09,390
this primitive this protocol first its

91
00:04:07,740 --> 00:04:11,820
vulnerable to what's called a naive

92
00:04:09,390 --> 00:04:13,980
man-in-the-middle attack so if Eve is no

93
00:04:11,820 --> 00:04:15,660
longer just an eavesdropper Eve is

94
00:04:13,980 --> 00:04:19,649
actually sitting in between these

95
00:04:15,660 --> 00:04:22,980
communications Eve then transforms into

96
00:04:19,649 --> 00:04:25,469
the character we called Mallory so let's

97
00:04:22,980 --> 00:04:27,210
promote Eve to Mallory Mallory can

98
00:04:25,470 --> 00:04:30,810
intercept all messages between Alice and

99
00:04:27,210 --> 00:04:33,000
Bob so in order to attack this protocol

100
00:04:30,810 --> 00:04:35,000
she can simply negotiate a separate key

101
00:04:33,000 --> 00:04:37,020
exchange with both Alice and Bob

102
00:04:35,000 --> 00:04:40,200
decrypting and REE encrypting the

103
00:04:37,020 --> 00:04:41,909
traffic and the issue here is that Alice

104
00:04:40,200 --> 00:04:43,890
and Bob have no way of knowing who

105
00:04:41,910 --> 00:04:47,190
exactly that they're talking to because

106
00:04:43,890 --> 00:04:51,300
there's no way to know a priori what B

107
00:04:47,190 --> 00:04:53,040
times P is actually from Bob and a times

108
00:04:51,300 --> 00:04:55,260
B is actually from Alice so you can kind

109
00:04:53,040 --> 00:04:57,780
of swap these things swap these things

110
00:04:55,260 --> 00:04:59,280
together so what is the defense here

111
00:04:57,780 --> 00:05:00,989
well the fix is we can add

112
00:04:59,280 --> 00:05:02,940
authentication to this key exchange so

113
00:05:00,990 --> 00:05:05,130
Alice and Bob can each sign their key

114
00:05:02,940 --> 00:05:07,469
exchange values with certificates or

115
00:05:05,130 --> 00:05:09,840
host keys so since there's a signature

116
00:05:07,470 --> 00:05:11,640
on these values and a known public key

117
00:05:09,840 --> 00:05:14,010
Mallory there in the middle can't

118
00:05:11,640 --> 00:05:16,440
actually manipulate it and change these

119
00:05:14,010 --> 00:05:18,360
values so Tiffany Hellman needs to be

120
00:05:16,440 --> 00:05:21,150
authenticated or else it's it's secure

121
00:05:18,360 --> 00:05:23,940
against Mallory a sort of

122
00:05:21,150 --> 00:05:27,239
man-in-the-middle type of attacker okay

123
00:05:23,940 --> 00:05:30,420
so what they can do at this point is

124
00:05:27,240 --> 00:05:32,700
they can use negotiated this negotiated

125
00:05:30,420 --> 00:05:35,340
share secret to compute a message

126
00:05:32,700 --> 00:05:37,740
authentication code basically a checksum

127
00:05:35,340 --> 00:05:40,169
that's only somebody with the private

128
00:05:37,740 --> 00:05:42,240
with the shared secret will know on the

129
00:05:40,170 --> 00:05:43,470
message transcripts and use that to

130
00:05:42,240 --> 00:05:46,110
ensure that the messages are not

131
00:05:43,470 --> 00:05:48,480
tampered with from that point forward so

132
00:05:46,110 --> 00:05:50,490
now let's look at how Alice and Bob

133
00:05:48,480 --> 00:05:52,110
decide on which elliptic curve to the

134
00:05:50,490 --> 00:05:53,730
curve to use in this in this diagram

135
00:05:52,110 --> 00:05:55,350
there's sort of an assumption that

136
00:05:53,730 --> 00:05:56,970
they're using the same elliptic curve

137
00:05:55,350 --> 00:05:59,790
there are different types of elliptic

138
00:05:56,970 --> 00:06:00,990
curves with different properties and you

139
00:05:59,790 --> 00:06:04,440
can have multiple different elliptic

140
00:06:00,990 --> 00:06:07,290
curves so one example of a protocol that

141
00:06:04,440 --> 00:06:10,469
uses this type of negotiation is TLS

142
00:06:07,290 --> 00:06:13,890
which is the protocol for HTTP secure

143
00:06:10,470 --> 00:06:18,150
communications online for the web so how

144
00:06:13,890 --> 00:06:20,550
it works in TLS is Alice sends a list of

145
00:06:18,150 --> 00:06:22,799
curves that is supported

146
00:06:20,550 --> 00:06:24,900
and Bob then chooses one of the curves

147
00:06:22,800 --> 00:06:27,660
and says okay this is the curve that

148
00:06:24,900 --> 00:06:31,020
we're going to negotiate a handshake

149
00:06:27,660 --> 00:06:33,450
with and so usually Bob will choose the

150
00:06:31,020 --> 00:06:37,049
strongest of these curves and this is

151
00:06:33,450 --> 00:06:39,719
what makes TLS a good protocol in order

152
00:06:37,050 --> 00:06:42,030
to negotiate properly is whoever chooses

153
00:06:39,720 --> 00:06:44,760
the curve to use typically chooses the

154
00:06:42,030 --> 00:06:47,909
strongest one of these so however some

155
00:06:44,760 --> 00:06:51,930
protocols including TLS 1.2 which is the

156
00:06:47,910 --> 00:06:54,030
the previously most well-known version

157
00:06:51,930 --> 00:06:56,880
of TLS right now we're at TLS 1.3 which

158
00:06:54,030 --> 00:06:58,650
just came out but in TLS 1.2 this curve

159
00:06:56,880 --> 00:07:01,140
and negotiation messages are not

160
00:06:58,650 --> 00:07:04,380
actually covered by this message

161
00:07:01,140 --> 00:07:08,630
authentication code so there's a

162
00:07:04,380 --> 00:07:10,920
potential to tamper with these and maybe

163
00:07:08,630 --> 00:07:12,930
maybe figure out how to how to attack

164
00:07:10,920 --> 00:07:16,620
this and this is this is an attack I

165
00:07:12,930 --> 00:07:19,560
presented three years ago at the Chaos

166
00:07:16,620 --> 00:07:22,530
Communication Congress and the idea is

167
00:07:19,560 --> 00:07:25,770
that TLS clients and TLS servers support

168
00:07:22,530 --> 00:07:29,250
a wide variety of elliptic curves and if

169
00:07:25,770 --> 00:07:32,460
the attacker were to sit in the middle

170
00:07:29,250 --> 00:07:34,560
and force both part parties to choose

171
00:07:32,460 --> 00:07:36,680
the weakest of this of these curves and

172
00:07:34,560 --> 00:07:40,140
if this curve is weak enough to actually

173
00:07:36,680 --> 00:07:42,120
attack immediately then you can force a

174
00:07:40,140 --> 00:07:45,450
downgrade attack and actually upgrade

175
00:07:42,120 --> 00:07:46,830
your your attack into a

176
00:07:45,450 --> 00:07:49,920
man-in-the-middle attack that actually

177
00:07:46,830 --> 00:07:51,840
works so this is this is a proposed

178
00:07:49,920 --> 00:07:53,850
attack that that I put together I didn't

179
00:07:51,840 --> 00:07:56,099
find have any practical implementation

180
00:07:53,850 --> 00:07:58,650
of this it was just this is a theory

181
00:07:56,100 --> 00:08:00,690
let's kind of check it out so let's

182
00:07:58,650 --> 00:08:04,830
let's spell out exactly how this would

183
00:08:00,690 --> 00:08:07,530
work so Allison's the three curves one

184
00:08:04,830 --> 00:08:12,090
of which is very weak to the man the

185
00:08:07,530 --> 00:08:14,729
middle Mallory and Mallory intercepts it

186
00:08:12,090 --> 00:08:17,640
and deletes from this negotiation

187
00:08:14,730 --> 00:08:19,200
everything except for the weakest of the

188
00:08:17,640 --> 00:08:21,419
curves and then so when Bob receives

189
00:08:19,200 --> 00:08:23,219
this list he sees nothing wrong with it

190
00:08:21,420 --> 00:08:25,260
since he also supports this weak curve

191
00:08:23,220 --> 00:08:27,090
and then computes a key exchange with it

192
00:08:25,260 --> 00:08:28,980
and then Mallory does the same and

193
00:08:27,090 --> 00:08:32,579
Mallory just forwards the message long

194
00:08:28,980 --> 00:08:33,990
and now before Alice and Bob can compute

195
00:08:32,580 --> 00:08:36,089
a shared secret this curve

196
00:08:33,990 --> 00:08:39,440
was weak enough then Mallory can

197
00:08:36,089 --> 00:08:41,430
actually solve this this diffie-hellman

198
00:08:39,440 --> 00:08:43,380
computational diffie-hellman problem if

199
00:08:41,429 --> 00:08:47,550
it's a weakened weak curve you can go

200
00:08:43,380 --> 00:08:49,110
from a times P and extract a and that

201
00:08:47,550 --> 00:08:52,949
breaks the security of this entire thing

202
00:08:49,110 --> 00:08:55,080
and so when these message authentication

203
00:08:52,950 --> 00:08:57,709
codes come come back that's actually

204
00:08:55,080 --> 00:08:59,520
only protected by the shared secret and

205
00:08:57,709 --> 00:09:02,399
because the shared secret can be

206
00:08:59,520 --> 00:09:04,500
computed by the attacker you get in the

207
00:09:02,399 --> 00:09:12,020
situation where this man-in-the-middle

208
00:09:04,500 --> 00:09:14,430
attack actually works and so from here I

209
00:09:12,020 --> 00:09:16,800
contacted Luke and said let's try to

210
00:09:14,430 --> 00:09:18,569
figure out whether or not this attack is

211
00:09:16,800 --> 00:09:21,240
actually feasible in the wild and what

212
00:09:18,570 --> 00:09:24,870
sort of things that have folks done

213
00:09:21,240 --> 00:09:27,570
incorrectly in order to facilitate this

214
00:09:24,870 --> 00:09:36,750
attack and so with that I'll pass it to

215
00:09:27,570 --> 00:09:38,820
Luke great so so in this work we wanted

216
00:09:36,750 --> 00:09:42,170
to evaluate the practical feasibility of

217
00:09:38,820 --> 00:09:44,550
the curve swap attack in the wild so

218
00:09:42,170 --> 00:09:46,740
remember this requires us to be able to

219
00:09:44,550 --> 00:09:50,399
break EC th for some curve that's

220
00:09:46,740 --> 00:09:52,200
supported by both clients and servers so

221
00:09:50,399 --> 00:09:55,370
we looked at EC th in multiple protocols

222
00:09:52,200 --> 00:09:58,950
so so TLS which is used for web assets

223
00:09:55,370 --> 00:10:00,839
dashboards and portals SSH which you

224
00:09:58,950 --> 00:10:05,040
might use for production access or

225
00:10:00,839 --> 00:10:10,649
developer operations IPSec which is used

226
00:10:05,040 --> 00:10:16,290
for for VPN services and jwe for web

227
00:10:10,649 --> 00:10:18,329
applications so in this work we we

228
00:10:16,290 --> 00:10:20,310
measured elliptic curve usage and host

229
00:10:18,329 --> 00:10:22,439
using internet scanning and we and we

230
00:10:20,310 --> 00:10:24,599
use passive measurement to look at

231
00:10:22,440 --> 00:10:28,010
clients and we also looked at librarian

232
00:10:24,600 --> 00:10:30,180
implementations by examining source code

233
00:10:28,010 --> 00:10:32,100
so if you want to zone out now for the

234
00:10:30,180 --> 00:10:34,649
rest of the talk the the punchline is

235
00:10:32,100 --> 00:10:36,630
that we found a lot of weaknesses in

236
00:10:34,649 --> 00:10:38,370
elliptic curve implementations but we

237
00:10:36,630 --> 00:10:41,820
didn't actually find anybody vulnerable

238
00:10:38,370 --> 00:10:43,290
to a full practical curve swap attack so

239
00:10:41,820 --> 00:10:44,579
this is sort of a negative result which

240
00:10:43,290 --> 00:10:47,010
is actually really good for the security

241
00:10:44,579 --> 00:10:47,680
of the internet so we had this Cerreta

242
00:10:47,010 --> 00:10:49,750
cool attack

243
00:10:47,680 --> 00:10:54,729
tried to find it in the wild and didn't

244
00:10:49,750 --> 00:10:56,500
quite find it but we got close so for

245
00:10:54,730 --> 00:10:59,080
our internet scanning measurements we

246
00:10:56,500 --> 00:11:01,480
use the Z map tool chain so this allowed

247
00:10:59,080 --> 00:11:03,520
us to quickly scan all the publicly

248
00:11:01,480 --> 00:11:08,800
available hosts on the ipv4 internet

249
00:11:03,520 --> 00:11:10,390
from our University Network so first to

250
00:11:08,800 --> 00:11:12,910
give you an idea of what elliptic curve

251
00:11:10,390 --> 00:11:16,780
usage looks like on the internet or at

252
00:11:12,910 --> 00:11:18,550
the time of our study so we first I

253
00:11:16,780 --> 00:11:20,380
guess in the first column we have the

254
00:11:18,550 --> 00:11:22,719
number of of hosts that we were able to

255
00:11:20,380 --> 00:11:25,990
contact for each of these protocols that

256
00:11:22,720 --> 00:11:28,780
our contact at all so for HTTP we were

257
00:11:25,990 --> 00:11:30,640
able to contact 41 million hosts and of

258
00:11:28,780 --> 00:11:37,120
these twenty eight point eight million

259
00:11:30,640 --> 00:11:40,420
supported ECD h at all so to measure the

260
00:11:37,120 --> 00:11:43,780
support for individual curves here we

261
00:11:40,420 --> 00:11:45,579
just as a client we we sent a client

262
00:11:43,780 --> 00:11:47,890
hello offering only a single curve at a

263
00:11:45,580 --> 00:11:51,250
time and and saw which servers would

264
00:11:47,890 --> 00:11:54,790
talk to us with this curve so so you can

265
00:11:51,250 --> 00:11:56,290
see that SCC P 256 R 1 is the most

266
00:11:54,790 --> 00:11:58,540
popular curve across all of these

267
00:11:56,290 --> 00:12:02,530
protocols this is one of the NIST

268
00:11:58,540 --> 00:12:04,780
standardized curves as CCP to do for our

269
00:12:02,530 --> 00:12:07,030
one also has some pretty widespread

270
00:12:04,780 --> 00:12:09,819
support and I key one but not so much in

271
00:12:07,030 --> 00:12:11,829
the other protocols and at the time of

272
00:12:09,820 --> 00:12:15,150
our measurements curve two five five one

273
00:12:11,830 --> 00:12:22,750
nine has a lot of support in SSH and

274
00:12:15,150 --> 00:12:26,590
increasing support and HTTP so so one

275
00:12:22,750 --> 00:12:28,840
interesting thing a side note we found

276
00:12:26,590 --> 00:12:30,730
that when we were doing these scans we

277
00:12:28,840 --> 00:12:32,170
found that eight and a half million HTTP

278
00:12:30,730 --> 00:12:34,840
shows when we sent them a particular

279
00:12:32,170 --> 00:12:38,500
curve they just responded back with one

280
00:12:34,840 --> 00:12:42,220
of these three missed curves regardless

281
00:12:38,500 --> 00:12:44,020
of whatever curve we sent as a client so

282
00:12:42,220 --> 00:12:45,850
we couldn't figure out a way that this

283
00:12:44,020 --> 00:12:47,770
was a real vulnerability but it is just

284
00:12:45,850 --> 00:12:50,920
it's definitely not standards compliant

285
00:12:47,770 --> 00:12:52,360
behavior and we scanned a few of these

286
00:12:50,920 --> 00:12:55,810
hosts in April and found they were all

287
00:12:52,360 --> 00:13:00,210
behind the same CDN which must have it

288
00:12:55,810 --> 00:13:00,209
since patched this behavior

289
00:13:00,840 --> 00:13:06,670
so now now back to the curve swap attack

290
00:13:03,640 --> 00:13:09,699
so if you remember it requires us to be

291
00:13:06,670 --> 00:13:14,229
able to break easy eh for some supported

292
00:13:09,700 --> 00:13:17,320
curve so we look at two attack vectors

293
00:13:14,230 --> 00:13:20,670
for doing this the first is to directly

294
00:13:17,320 --> 00:13:23,350
solve the discrete log on a weak curve

295
00:13:20,670 --> 00:13:26,050
to learn the server is master or the

296
00:13:23,350 --> 00:13:27,820
server's secret key a second approach we

297
00:13:26,050 --> 00:13:30,400
can use is to use an invalid point

298
00:13:27,820 --> 00:13:33,160
attack so I'll explain a bit more what

299
00:13:30,400 --> 00:13:34,990
these are in a bit but here a malicious

300
00:13:33,160 --> 00:13:37,000
client sends a special point to the

301
00:13:34,990 --> 00:13:38,440
server and if the server takes that

302
00:13:37,000 --> 00:13:40,240
point and and does the point

303
00:13:38,440 --> 00:13:41,800
multiplication with it it might leak

304
00:13:40,240 --> 00:13:47,310
some information about its secret key

305
00:13:41,800 --> 00:13:50,589
from the output now for both of these

306
00:13:47,310 --> 00:13:53,020
techniques to be effective we need the

307
00:13:50,590 --> 00:13:55,510
server to also reuse the same private

308
00:13:53,020 --> 00:13:58,510
key for multiple connections or over

309
00:13:55,510 --> 00:14:00,760
some period of time and so so why would

310
00:13:58,510 --> 00:14:03,040
a server do this well it turns out that

311
00:14:00,760 --> 00:14:04,569
computing a new secret key and public

312
00:14:03,040 --> 00:14:07,449
key pair for each new connection that

313
00:14:04,570 --> 00:14:09,520
comes in can be pretty expensive so for

314
00:14:07,450 --> 00:14:12,100
a server that they handles thousands of

315
00:14:09,520 --> 00:14:14,350
requests per second then it might just

316
00:14:12,100 --> 00:14:16,360
cache the same private and public key

317
00:14:14,350 --> 00:14:20,820
and use them for for many connections

318
00:14:16,360 --> 00:14:20,820
this is a pretty common server behavior

319
00:14:21,510 --> 00:14:27,400
so the first thing we want to look at is

320
00:14:23,830 --> 00:14:30,220
if servers reuse keys so to check this

321
00:14:27,400 --> 00:14:33,339
we we scan the ipv4 internet twice in

322
00:14:30,220 --> 00:14:34,839
rapid succession and just check to see

323
00:14:33,339 --> 00:14:41,680
if the server sent back the same key

324
00:14:34,839 --> 00:14:45,100
twice so of the TLS hosts is supported

325
00:14:41,680 --> 00:14:47,650
this really popular in this curve we

326
00:14:45,100 --> 00:14:49,510
found that 22% of them reused keys at

327
00:14:47,650 --> 00:14:53,680
least once when he did when we hit them

328
00:14:49,510 --> 00:14:57,360
twice with the same with these scans and

329
00:14:53,680 --> 00:15:00,130
also interestingly we found that the

330
00:14:57,360 --> 00:15:02,950
640,000 of them reads the same key as

331
00:15:00,130 --> 00:15:04,780
another host within the same scan so so

332
00:15:02,950 --> 00:15:07,750
this could be due to a load balancing

333
00:15:04,780 --> 00:15:10,660
behaviour or maybe there's some other

334
00:15:07,750 --> 00:15:12,680
explanations so it does look like

335
00:15:10,660 --> 00:15:16,339
servers are reusing keys so we have

336
00:15:12,680 --> 00:15:17,660
one piece of the puzzle here so now

337
00:15:16,339 --> 00:15:19,430
let's look at the our first attack

338
00:15:17,660 --> 00:15:22,510
vector which is solving the discrete

339
00:15:19,430 --> 00:15:25,310
logarithm directly on some weak curves

340
00:15:22,510 --> 00:15:27,529
so the discrete log problem is that

341
00:15:25,310 --> 00:15:30,680
given the curve parameters and a point

342
00:15:27,529 --> 00:15:34,640
on the curve B P we want to recompute

343
00:15:30,680 --> 00:15:37,189
the private key B so the best generic

344
00:15:34,640 --> 00:15:38,300
algorithm we have for this which is the

345
00:15:37,190 --> 00:15:41,240
best algorithm we have for elliptic

346
00:15:38,300 --> 00:15:44,029
curves runs in O of square root of n

347
00:15:41,240 --> 00:15:48,140
time with for a curve with endpoints so

348
00:15:44,029 --> 00:15:55,939
for a 256 bit curve this algorithm will

349
00:15:48,140 --> 00:15:57,980
run in about time to the 128 so as we

350
00:15:55,940 --> 00:16:01,010
noted earlier TLS supports a ton of

351
00:15:57,980 --> 00:16:04,670
really weeks elliptic curves in

352
00:16:01,010 --> 00:16:08,959
particular here's one curve SCC p160 r1

353
00:16:04,670 --> 00:16:10,370
which only has 80 bit security now just

354
00:16:08,959 --> 00:16:14,770
for some comparison the Bitcoin network

355
00:16:10,370 --> 00:16:18,770
does to the 80 work about twice a day so

356
00:16:14,770 --> 00:16:20,720
in hunt 128 bit security is really the

357
00:16:18,770 --> 00:16:24,680
the weakest security you want to use for

358
00:16:20,720 --> 00:16:27,730
any for any application so you don't

359
00:16:24,680 --> 00:16:34,099
really want this curve support

360
00:16:27,730 --> 00:16:36,140
encrypting your traffic so out of some

361
00:16:34,100 --> 00:16:38,690
we we sampled some client hellos from

362
00:16:36,140 --> 00:16:41,240
CloudFlare out of 4 million client

363
00:16:38,690 --> 00:16:44,180
hellos we found that over 16 percent of

364
00:16:41,240 --> 00:16:47,720
them were offering to support this

365
00:16:44,180 --> 00:16:50,989
really weak elliptic curve we also

366
00:16:47,720 --> 00:16:52,970
looked at servers and we found that then

367
00:16:50,990 --> 00:16:57,140
almost 1 percent of them supported this

368
00:16:52,970 --> 00:17:01,310
this weak curve and of these over 8,000

369
00:16:57,140 --> 00:17:03,829
also reused keys and when we scanned

370
00:17:01,310 --> 00:17:05,599
again these hosts after 25 hours we

371
00:17:03,829 --> 00:17:06,500
found that only two of them were so

372
00:17:05,599 --> 00:17:08,809
reason keys

373
00:17:06,500 --> 00:17:12,079
so for these hosts if we were able to

374
00:17:08,809 --> 00:17:15,709
solve the discrete log on this on this

375
00:17:12,079 --> 00:17:18,139
160 bit curve or this curve with 80 bit

376
00:17:15,709 --> 00:17:20,209
security and under 25 hours then we

377
00:17:18,140 --> 00:17:23,240
would be able to do the curve swap

378
00:17:20,209 --> 00:17:24,740
downgrade attack however it's still it's

379
00:17:23,240 --> 00:17:25,849
still not quite a practical attack

380
00:17:24,740 --> 00:17:27,500
because

381
00:17:25,849 --> 00:17:32,959
I don't have the power of the Bitcoin

382
00:17:27,500 --> 00:17:34,790
network in my lab so this next attack

383
00:17:32,960 --> 00:17:36,860
vector we look at our invalid point

384
00:17:34,790 --> 00:17:38,899
attacks so the way I'm going to explain

385
00:17:36,860 --> 00:17:40,580
this is that some implementations are

386
00:17:38,900 --> 00:17:42,350
curved blind this is this is my own

387
00:17:40,580 --> 00:17:45,080
terminology it's you won't find it in

388
00:17:42,350 --> 00:17:46,610
the literature but basically it means

389
00:17:45,080 --> 00:17:49,730
that you lack the validation checks

390
00:17:46,610 --> 00:17:51,740
between to differentiate between these

391
00:17:49,730 --> 00:17:53,690
two curves this green curve and this red

392
00:17:51,740 --> 00:18:01,220
curve so those in the audience who are

393
00:17:53,690 --> 00:18:02,990
color blind you can feel the pain now so

394
00:18:01,220 --> 00:18:05,090
the attack works as follows we have a

395
00:18:02,990 --> 00:18:08,600
malicious client Mallory and our server

396
00:18:05,090 --> 00:18:12,669
Bob so Mallory starts a key exchange

397
00:18:08,600 --> 00:18:15,050
with this green curve Bob accepts the

398
00:18:12,670 --> 00:18:18,860
the green curve and computes his key

399
00:18:15,050 --> 00:18:19,909
exchange values on it now instead of

400
00:18:18,860 --> 00:18:22,610
sending a point on the green curve

401
00:18:19,910 --> 00:18:24,830
Valery sends a point P on a red curve

402
00:18:22,610 --> 00:18:29,899
instead where this red curve is designed

403
00:18:24,830 --> 00:18:31,699
to be weak so now although Bob doesn't

404
00:18:29,900 --> 00:18:32,990
support the red curve he can't tell the

405
00:18:31,700 --> 00:18:36,410
difference between the red curve and the

406
00:18:32,990 --> 00:18:38,090
green curve because he's curved blind so

407
00:18:36,410 --> 00:18:44,690
he computes the shared secret on that

408
00:18:38,090 --> 00:18:46,459
curve and said now when he sends a Mac

409
00:18:44,690 --> 00:18:48,920
of the message transcript to Mallory

410
00:18:46,460 --> 00:18:51,800
since he shows in the curve since she's

411
00:18:48,920 --> 00:18:53,390
chosen the curve to be super weak she

412
00:18:51,800 --> 00:18:58,580
can now brute-force over all possible

413
00:18:53,390 --> 00:19:01,940
values of KS and discover what on what

414
00:18:58,580 --> 00:19:04,790
some she can discover what B is on this

415
00:19:01,940 --> 00:19:10,700
weak curve instead so this allows her to

416
00:19:04,790 --> 00:19:12,200
recover a few bits of B and she can

417
00:19:10,700 --> 00:19:15,380
repeat this attack with many different

418
00:19:12,200 --> 00:19:17,330
weak red curves and recover the full

419
00:19:15,380 --> 00:19:22,820
secret value B using the Chinese

420
00:19:17,330 --> 00:19:25,100
remainder theorem so now you might ask

421
00:19:22,820 --> 00:19:26,870
why are would implementations ever be

422
00:19:25,100 --> 00:19:29,330
curve blind

423
00:19:26,870 --> 00:19:31,399
well the countermeasures are actually

424
00:19:29,330 --> 00:19:35,060
built into almost all of the the

425
00:19:31,400 --> 00:19:39,450
standards that that describe elliptic

426
00:19:35,060 --> 00:19:40,740
curve usage so for TLS it says

427
00:19:39,450 --> 00:19:42,510
the server retrieves the clients

428
00:19:40,740 --> 00:19:44,549
ephemerally CDH public key from the

429
00:19:42,510 --> 00:19:46,049
client key exchange message and check

430
00:19:44,549 --> 00:19:48,080
status on the same elliptic curve as a

431
00:19:46,049 --> 00:19:50,820
server CCD H key

432
00:19:48,080 --> 00:19:54,899
there are similar warnings for SSH and

433
00:19:50,820 --> 00:19:56,908
ID v2 we also we found that the jwe the

434
00:19:54,899 --> 00:19:59,039
json web encryption standards just

435
00:19:56,909 --> 00:20:01,289
didn't have this warning anywhere so

436
00:19:59,039 --> 00:20:07,559
we'll see what the impact of this is on

437
00:20:01,289 --> 00:20:09,658
the next slide so we looked at whether

438
00:20:07,559 --> 00:20:13,080
libraries heeded the warnings and the

439
00:20:09,659 --> 00:20:17,399
RFC's and actually did these validation

440
00:20:13,080 --> 00:20:20,340
checks so some instant pass worked by

441
00:20:17,399 --> 00:20:22,590
jäger shrank and so moravsky this showed

442
00:20:20,340 --> 00:20:24,240
that a lot of TLS libraries failed to

443
00:20:22,590 --> 00:20:27,360
include these checks for elliptic curve

444
00:20:24,240 --> 00:20:30,690
diffie-hellman and some of my co-authors

445
00:20:27,360 --> 00:20:32,219
and I showed in a paper that this also

446
00:20:30,690 --> 00:20:35,010
holds for a finite field the fee Hellman

447
00:20:32,220 --> 00:20:39,210
that the validation checks just aren't

448
00:20:35,010 --> 00:20:41,730
really performed by libraries and then

449
00:20:39,210 --> 00:20:43,110
in this work we looked at jwe where the

450
00:20:41,730 --> 00:20:46,679
warning isn't even included in the

451
00:20:43,110 --> 00:20:48,360
standard and we found that of the of six

452
00:20:46,679 --> 00:20:58,230
libraries we looked at the supported

453
00:20:48,360 --> 00:21:00,750
elliptic curve cryptography attack so

454
00:20:58,230 --> 00:21:02,899
now we used internet scanning to see if

455
00:21:00,750 --> 00:21:06,210
hosts in the wild validated public keys

456
00:21:02,899 --> 00:21:07,678
so our scanning methodology was to test

457
00:21:06,210 --> 00:21:10,529
for two different types of curve

458
00:21:07,679 --> 00:21:15,149
blindness so we send these low order

459
00:21:10,529 --> 00:21:17,760
points on on an invalid curve related to

460
00:21:15,149 --> 00:21:19,199
the nist curve and also on the twists of

461
00:21:17,760 --> 00:21:24,269
the curve so you don't really need to

462
00:21:19,200 --> 00:21:26,070
know what that means so the correct

463
00:21:24,269 --> 00:21:27,840
behavior for a host when it receives one

464
00:21:26,070 --> 00:21:32,939
of these invalid points is to shut down

465
00:21:27,840 --> 00:21:35,668
the connection so we found for HTTPS

466
00:21:32,940 --> 00:21:38,340
that almost 200,000 hosts accepted these

467
00:21:35,669 --> 00:21:40,220
invalid points and so they would be

468
00:21:38,340 --> 00:21:45,539
vulnerable to this invalid curve attack

469
00:21:40,220 --> 00:21:49,470
we found that the large percentage of ID

470
00:21:45,539 --> 00:21:52,830
to hosts also did this along with a few

471
00:21:49,470 --> 00:21:56,700
in SSH a 91

472
00:21:52,830 --> 00:21:58,590
so for press cessation I do

473
00:21:56,700 --> 00:22:00,030
so for these hosts we're not a hundred

474
00:21:58,590 --> 00:22:02,550
percent sure that they're vulnerable

475
00:22:00,030 --> 00:22:04,530
they because of how the the protocol

476
00:22:02,550 --> 00:22:07,470
works we weren't able to actually

477
00:22:04,530 --> 00:22:08,700
confirm the attack works but they didn't

478
00:22:07,470 --> 00:22:11,340
shut down the connection immediately

479
00:22:08,700 --> 00:22:12,870
when we sent the invalid point so it's

480
00:22:11,340 --> 00:22:19,830
in a good indication that they might be

481
00:22:12,870 --> 00:22:21,570
vulnerable so for the so here for the

482
00:22:19,830 --> 00:22:24,270
curve swap attack to work we need both

483
00:22:21,570 --> 00:22:26,159
hosts both not validate public keys and

484
00:22:24,270 --> 00:22:28,950
to reuse the same key for multiple

485
00:22:26,160 --> 00:22:31,620
connections and unfortunately we didn't

486
00:22:28,950 --> 00:22:33,660
find any hosts that that actually did

487
00:22:31,620 --> 00:22:35,040
this so the curve swath attack we didn't

488
00:22:33,660 --> 00:22:37,050
find any hosts vulnerable to the curve

489
00:22:35,040 --> 00:22:43,649
swap attack in this way in the real

490
00:22:37,050 --> 00:22:45,419
world so so now you ask you might ask

491
00:22:43,650 --> 00:22:46,440
why these protocols are designed in a

492
00:22:45,420 --> 00:22:48,510
way that makes it so easy for

493
00:22:46,440 --> 00:22:51,390
implementations to make mistakes like

494
00:22:48,510 --> 00:22:54,180
this so so there's some good news here

495
00:22:51,390 --> 00:22:57,240
with with some the I guess with these

496
00:22:54,180 --> 00:22:58,680
newer newly designed curves like curve

497
00:22:57,240 --> 00:23:00,960
two five five one nine and curve four

498
00:22:58,680 --> 00:23:03,690
four eight they're actually designed in

499
00:23:00,960 --> 00:23:08,010
a way to avoid all of these twists and

500
00:23:03,690 --> 00:23:10,770
an invalid curve attacks so so they're

501
00:23:08,010 --> 00:23:13,860
gaining widespread support where curfew

502
00:23:10,770 --> 00:23:16,500
5 509 and curve 4 4 8 were recently

503
00:23:13,860 --> 00:23:20,280
chosen by the IETF for inclusion in all

504
00:23:16,500 --> 00:23:23,700
future protocols they're included in the

505
00:23:20,280 --> 00:23:26,340
TLS 1.3 standard as well so at the time

506
00:23:23,700 --> 00:23:30,000
of our study / - five five one nine was

507
00:23:26,340 --> 00:23:35,639
supported by over 77% of ssh hosts and a

508
00:23:30,000 --> 00:23:41,430
few percent of - of HTTP hosts but but

509
00:23:35,640 --> 00:23:42,930
these numbers are now much higher all

510
00:23:41,430 --> 00:23:43,500
right so now first some takeaways from

511
00:23:42,930 --> 00:23:46,800
the talk

512
00:23:43,500 --> 00:23:48,560
so first standards developers just know

513
00:23:46,800 --> 00:23:52,040
that it's really easy for developers to

514
00:23:48,560 --> 00:23:54,780
omit these validation checks and extra

515
00:23:52,040 --> 00:23:57,540
complexities in the protocol so it's if

516
00:23:54,780 --> 00:23:59,190
it's not required for correctness then

517
00:23:57,540 --> 00:24:02,100
the validation checks might not make it

518
00:23:59,190 --> 00:24:04,590
into the implementation so the best way

519
00:24:02,100 --> 00:24:05,668
to prevent this is to include the test

520
00:24:04,590 --> 00:24:07,379
factors as part

521
00:24:05,669 --> 00:24:09,690
the standards so do be standards

522
00:24:07,379 --> 00:24:13,918
compliant you have to be invulnerable to

523
00:24:09,690 --> 00:24:16,109
these to these attacks a second approach

524
00:24:13,919 --> 00:24:19,049
for four protocols is to only support

525
00:24:16,109 --> 00:24:20,908
secure curves so ideally you just want

526
00:24:19,049 --> 00:24:23,789
to support one secure curve so you can't

527
00:24:20,909 --> 00:24:27,899
do this sort of downgrade attack to the

528
00:24:23,789 --> 00:24:30,839
weakest parameters that you support and

529
00:24:27,899 --> 00:24:34,228
and also protocols should be designed

530
00:24:30,839 --> 00:24:37,109
with proper downgrade protection so so

531
00:24:34,229 --> 00:24:39,719
TLS 1.3 includes an extra signature at

532
00:24:37,109 --> 00:24:41,519
the end of the the entire transcript

533
00:24:39,719 --> 00:24:45,989
that prevents downgrade attacks like the

534
00:24:41,519 --> 00:24:48,389
curve swap attack for software

535
00:24:45,989 --> 00:24:52,349
developers should add cryptographic

536
00:24:48,389 --> 00:24:53,699
validation to your test suite so so

537
00:24:52,349 --> 00:24:58,200
project which reproof makes this really

538
00:24:53,700 --> 00:25:01,049
easy they have a suite or they yeah this

539
00:24:58,200 --> 00:25:01,619
this full suite of test factors against

540
00:25:01,049 --> 00:25:04,109
a whole bunch of different

541
00:25:01,619 --> 00:25:05,968
implementations of cryptographic

542
00:25:04,109 --> 00:25:09,629
primitives that you can easily import

543
00:25:05,969 --> 00:25:11,159
into your project and also you should

544
00:25:09,629 --> 00:25:13,439
really consult a cryptographer for any

545
00:25:11,159 --> 00:25:15,089
use of cryptographic primitives and and

546
00:25:13,440 --> 00:25:17,089
search a little bit more widely than the

547
00:25:15,089 --> 00:25:19,619
exact standard that you're implementing

548
00:25:17,089 --> 00:25:23,759
to figure out how to correctly use these

549
00:25:19,619 --> 00:25:26,728
primitives and finally for security

550
00:25:23,759 --> 00:25:29,309
researchers using open source tools like

551
00:25:26,729 --> 00:25:31,799
zmapp as part of your security analysis

552
00:25:29,309 --> 00:25:32,668
can let you it's an effective way to

553
00:25:31,799 --> 00:25:36,389
black box

554
00:25:32,669 --> 00:25:39,749
Oh too for black yeah - I guess for

555
00:25:36,389 --> 00:25:41,668
black box testing implementations so it

556
00:25:39,749 --> 00:25:45,479
should really be part of your your tool

557
00:25:41,669 --> 00:25:47,509
chain and with that we can take any

558
00:25:45,479 --> 00:25:47,509
questions

559
00:26:01,330 --> 00:26:06,699
all right um great all right yeah if

560
00:26:05,139 --> 00:26:09,758
there are no questions and you can find

561
00:26:06,700 --> 00:26:13,649
us afterwards if you did like to ask us

562
00:26:09,759 --> 00:26:13,649
anything yeah thank you

563
00:26:13,830 --> 00:26:17,750
[Applause]

