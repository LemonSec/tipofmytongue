1
00:00:00,000 --> 00:00:04,290
good morning we're about a minute early

2
00:00:02,429 --> 00:00:06,779
here but we can get started and see who

3
00:00:04,290 --> 00:00:08,580
trickles in my name is Eric Evan chick

4
00:00:06,779 --> 00:00:10,410
today I'll be giving a talk called rust

5
00:00:08,580 --> 00:00:12,929
zone writing trust applications and rust

6
00:00:10,410 --> 00:00:14,969
will be going through sort of how trust

7
00:00:12,929 --> 00:00:16,710
sewn works on arm and how it gets used

8
00:00:14,969 --> 00:00:19,169
in the real world where it breaks down

9
00:00:16,710 --> 00:00:21,000
and then look at sort of a proof of

10
00:00:19,170 --> 00:00:22,949
concept of how we can use the rust

11
00:00:21,000 --> 00:00:26,099
programming language to write trust

12
00:00:22,949 --> 00:00:28,949
applications for trusts in so a little

13
00:00:26,099 --> 00:00:30,390
bit about me I mean my real job is I'm a

14
00:00:28,949 --> 00:00:32,759
principal research consultant at at

15
00:00:30,390 --> 00:00:35,309
Redis partners we do penetration testing

16
00:00:32,759 --> 00:00:38,670
and other security services risk

17
00:00:35,309 --> 00:00:41,519
advisory things like that I'm based up

18
00:00:38,670 --> 00:00:43,170
in Canada in Toronto Toronto area we

19
00:00:41,520 --> 00:00:46,559
have folks in the US and Canada and

20
00:00:43,170 --> 00:00:48,570
we're just sort of all over remote my

21
00:00:46,559 --> 00:00:49,919
boss likes to say we're post geography

22
00:00:48,570 --> 00:00:52,620
so you know we just have folks wherever

23
00:00:49,920 --> 00:00:54,480
and I also build some random open-source

24
00:00:52,620 --> 00:00:57,360
hardware with this company I have Kelton

25
00:00:54,480 --> 00:00:58,819
link layer labs we you know just build

26
00:00:57,360 --> 00:01:02,340
things and put them on the Internet and

27
00:00:58,820 --> 00:01:03,840
some CANbus tools actually a hardware

28
00:01:02,340 --> 00:01:06,720
implant if you saw the hardware implant

29
00:01:03,840 --> 00:01:08,490
talk and some things like that but today

30
00:01:06,720 --> 00:01:12,240
we're talking about not hardware really

31
00:01:08,490 --> 00:01:14,070
we're talking about well arm and little

32
00:01:12,240 --> 00:01:16,110
outline of what we're gonna do we're

33
00:01:14,070 --> 00:01:17,399
gonna cover so we'll start off just by

34
00:01:16,110 --> 00:01:18,750
talking about trust execution

35
00:01:17,400 --> 00:01:21,090
environments in general and what they

36
00:01:18,750 --> 00:01:23,159
are whether you used some examples of

37
00:01:21,090 --> 00:01:25,590
them and then I'll go through trust zone

38
00:01:23,159 --> 00:01:27,840
and you know trust owns a word that gets

39
00:01:25,590 --> 00:01:29,939
thrown around a lot but will show kind

40
00:01:27,840 --> 00:01:32,189
of how it actually works and how it gets

41
00:01:29,939 --> 00:01:33,389
used in the real world then talk about

42
00:01:32,189 --> 00:01:36,479
some of the issues with the code that's

43
00:01:33,390 --> 00:01:38,729
running in these things introduce trust

44
00:01:36,479 --> 00:01:40,470
a little bit click but rust and then

45
00:01:38,729 --> 00:01:42,990
we'll put it all together talk about how

46
00:01:40,470 --> 00:01:45,450
you can you know use them to you know

47
00:01:42,990 --> 00:01:47,610
make a trust application in rust demo a

48
00:01:45,450 --> 00:01:50,250
pretty basic one that we can show sort

49
00:01:47,610 --> 00:01:53,070
of on a slide and take any questions you

50
00:01:50,250 --> 00:01:55,979
folks have so starting with just trusted

51
00:01:53,070 --> 00:01:57,809
execution environments a topic that's

52
00:01:55,979 --> 00:02:00,329
actually made the news quite a bit due

53
00:01:57,810 --> 00:02:02,100
to some of the Intel and AMD problems

54
00:02:00,329 --> 00:02:04,110
with trusted execution environments but

55
00:02:02,100 --> 00:02:06,809
what are they so the general definition

56
00:02:04,110 --> 00:02:08,220
would be an isolated environment within

57
00:02:06,810 --> 00:02:10,800
a processor where you're going to do

58
00:02:08,220 --> 00:02:12,569
some sort of secure operations so this

59
00:02:10,800 --> 00:02:13,240
is a place where you're going to get

60
00:02:12,569 --> 00:02:15,429
some

61
00:02:13,240 --> 00:02:18,550
segmentation of your code and your data

62
00:02:15,430 --> 00:02:21,010
so that you can do things and not be

63
00:02:18,550 --> 00:02:23,590
observed by other parts of the system in

64
00:02:21,010 --> 00:02:25,570
some cases it will also segment hardware

65
00:02:23,590 --> 00:02:28,930
access so you'll be able to access

66
00:02:25,570 --> 00:02:31,510
certain maybe i/o pins pieces of memory

67
00:02:28,930 --> 00:02:34,210
whatever it is that can't be accessed

68
00:02:31,510 --> 00:02:36,790
otherwise unless you're in this trusted

69
00:02:34,210 --> 00:02:39,610
execution world so it allows you to

70
00:02:36,790 --> 00:02:41,700
provide that separation and draw trust

71
00:02:39,610 --> 00:02:44,980
boundaries around your application and

72
00:02:41,700 --> 00:02:46,959
this is done with a combination of some

73
00:02:44,980 --> 00:02:48,190
hardware features that are actually in

74
00:02:46,960 --> 00:02:51,160
the chips that your stuffs running on

75
00:02:48,190 --> 00:02:54,820
and a bunch of software that makes it

76
00:02:51,160 --> 00:02:56,650
all work so when you look at today

77
00:02:54,820 --> 00:02:59,920
what's out there what people are using

78
00:02:56,650 --> 00:03:02,470
some examples on the hardware side AMD

79
00:02:59,920 --> 00:03:05,140
has their PSP platform security

80
00:03:02,470 --> 00:03:07,630
processor this made the news a lot

81
00:03:05,140 --> 00:03:10,329
because it has a lot of issues that have

82
00:03:07,630 --> 00:03:11,920
come up in the last year one interesting

83
00:03:10,330 --> 00:03:14,530
issue with some of the stress and stuff

84
00:03:11,920 --> 00:03:17,019
is when it breaks it's really bad

85
00:03:14,530 --> 00:03:18,760
because all of the high security things

86
00:03:17,020 --> 00:03:21,220
that you really care about are living in

87
00:03:18,760 --> 00:03:24,730
this world and when they fall apart it's

88
00:03:21,220 --> 00:03:27,430
really critical in the case of PSP and

89
00:03:24,730 --> 00:03:29,560
some of the Intel staff it provides very

90
00:03:27,430 --> 00:03:31,150
privileged access to the processor so if

91
00:03:29,560 --> 00:03:33,370
you manage to get code execution inside

92
00:03:31,150 --> 00:03:36,400
of there you're bypassing a lot of the

93
00:03:33,370 --> 00:03:38,620
security features of the chip intel has

94
00:03:36,400 --> 00:03:40,900
their txt trusted execution technology

95
00:03:38,620 --> 00:03:42,820
and also software guard extensions that

96
00:03:40,900 --> 00:03:45,070
they use you might have seen some of

97
00:03:42,820 --> 00:03:46,720
that stuff marketed an arm of course has

98
00:03:45,070 --> 00:03:48,940
trustzone which is one of the more

99
00:03:46,720 --> 00:03:51,790
well-known well more talked about

100
00:03:48,940 --> 00:03:53,740
systems and the reason for that is it's

101
00:03:51,790 --> 00:03:55,959
very common if you have an Android phone

102
00:03:53,740 --> 00:03:57,880
that's recently modern it is running

103
00:03:55,960 --> 00:04:00,130
trustzone and it is running a trust zone

104
00:03:57,880 --> 00:04:02,829
trust --let which is an application and

105
00:04:00,130 --> 00:04:04,420
trust zone every time you log in you

106
00:04:02,830 --> 00:04:05,740
enter your pin code it's going off to

107
00:04:04,420 --> 00:04:08,980
the trusted land doing some verification

108
00:04:05,740 --> 00:04:11,290
coming back on the software side there's

109
00:04:08,980 --> 00:04:13,390
a few different things depending on what

110
00:04:11,290 --> 00:04:15,070
you're using so AMD and Intel have their

111
00:04:13,390 --> 00:04:16,750
own magic software that runs on there

112
00:04:15,070 --> 00:04:19,540
it's all proprietary they won't show it

113
00:04:16,750 --> 00:04:22,419
to you and that's also been a bit of an

114
00:04:19,540 --> 00:04:25,140
issue but on the on the arm side we have

115
00:04:22,419 --> 00:04:27,190
a range of trust operating systems

116
00:04:25,140 --> 00:04:30,240
Tristana k-- can

117
00:04:27,190 --> 00:04:34,540
is one of the ones used by Samsung now

118
00:04:30,240 --> 00:04:37,300
Qualcomm has QC this is used on most of

119
00:04:34,540 --> 00:04:40,090
the phones not all the phones that use

120
00:04:37,300 --> 00:04:41,560
Qualcomm chipsets Google also now it's

121
00:04:40,090 --> 00:04:44,469
not on this slide but Google has their

122
00:04:41,560 --> 00:04:46,870
own open-source trusted Bo s called

123
00:04:44,470 --> 00:04:49,150
trusty and that's used also on some

124
00:04:46,870 --> 00:04:51,820
Qualcomm chipsets it's used in the pixel

125
00:04:49,150 --> 00:04:53,080
three and then you have opti which is

126
00:04:51,820 --> 00:04:56,080
the one we'll talk about the most today

127
00:04:53,080 --> 00:04:58,570
mostly because love this stuff is not

128
00:04:56,080 --> 00:05:00,099
open source it's not its proprietary you

129
00:04:58,570 --> 00:05:02,770
can't they won't show you what's inside

130
00:05:00,100 --> 00:05:04,690
opti is an open-source implementation of

131
00:05:02,770 --> 00:05:07,150
a trusted operating system so you can

132
00:05:04,690 --> 00:05:07,630
you know actually one you can build it

133
00:05:07,150 --> 00:05:09,400
yourself

134
00:05:07,630 --> 00:05:10,930
and two you can talk about it at a

135
00:05:09,400 --> 00:05:12,669
conference cuz you didn't have to sign a

136
00:05:10,930 --> 00:05:15,730
bunch of NDA is to get access to it

137
00:05:12,670 --> 00:05:17,680
unlike TC so that's just the reality of

138
00:05:15,730 --> 00:05:20,650
some of these things while opti isn't

139
00:05:17,680 --> 00:05:22,330
actually that common in practice you

140
00:05:20,650 --> 00:05:24,909
don't see it in too many devices you

141
00:05:22,330 --> 00:05:26,770
don't see it in mobile phones it is

142
00:05:24,910 --> 00:05:28,480
something that you can talk about if you

143
00:05:26,770 --> 00:05:31,240
want access to the source for something

144
00:05:28,480 --> 00:05:34,510
like QC you're definitely getting into a

145
00:05:31,240 --> 00:05:38,050
lot of MDS and qualcomm has a lot more

146
00:05:34,510 --> 00:05:39,880
lawyers than I do so the use cases of

147
00:05:38,050 --> 00:05:41,800
this stuff authentication is when I

148
00:05:39,880 --> 00:05:44,409
talked about Android has the gatekeeper

149
00:05:41,800 --> 00:05:47,560
functionality and this is actually shown

150
00:05:44,410 --> 00:05:49,660
on the side here on the right side so

151
00:05:47,560 --> 00:05:51,640
you have this lock setting service it's

152
00:05:49,660 --> 00:05:54,220
gonna talk through binder which is the

153
00:05:51,640 --> 00:05:57,219
the user land eyepiece inter-process

154
00:05:54,220 --> 00:05:59,410
communications that's used by Android

155
00:05:57,220 --> 00:06:00,610
and it talked to the gatekeeper service

156
00:05:59,410 --> 00:06:02,530
which is a little service sort of

157
00:06:00,610 --> 00:06:04,419
running there that ends up talking to

158
00:06:02,530 --> 00:06:06,340
gatekeeper D there's a lot of layers to

159
00:06:04,419 --> 00:06:08,080
this sandwich it goes down through

160
00:06:06,340 --> 00:06:10,599
gatekeeper D talk to the gatekeeper

161
00:06:08,080 --> 00:06:12,760
hardware abstraction layer which talks

162
00:06:10,600 --> 00:06:15,310
to finally the gatekeeper hardware

163
00:06:12,760 --> 00:06:17,469
attraction module and then that has a

164
00:06:15,310 --> 00:06:18,970
bridge that goes into the trusted

165
00:06:17,470 --> 00:06:21,190
execution environment where there's a

166
00:06:18,970 --> 00:06:24,280
gatekeeper trusted application running

167
00:06:21,190 --> 00:06:26,050
so you enter your PIN number it makes it

168
00:06:24,280 --> 00:06:28,479
through all this stuff eventually gets

169
00:06:26,050 --> 00:06:31,480
sent over to the trusted world where the

170
00:06:28,480 --> 00:06:33,250
valid number is stored and the

171
00:06:31,480 --> 00:06:35,200
comparison happens over there and if

172
00:06:33,250 --> 00:06:37,210
it's correct it will send back your good

173
00:06:35,200 --> 00:06:39,460
this way if someone compromises your

174
00:06:37,210 --> 00:06:40,859
system they can't get that type of data

175
00:06:39,460 --> 00:06:43,818
because it's located

176
00:06:40,860 --> 00:06:45,990
a trusted environment that's one example

177
00:06:43,819 --> 00:06:47,939
financial applications make some use of

178
00:06:45,990 --> 00:06:51,210
this and some systems will expose the

179
00:06:47,939 --> 00:06:54,840
ability to access that one example of

180
00:06:51,210 --> 00:06:58,049
this that gets used is in the Bitcoin

181
00:06:54,840 --> 00:07:00,508
wallets which vary wildly in their

182
00:06:58,050 --> 00:07:01,289
implementations but some of those will

183
00:07:00,509 --> 00:07:03,930
use trustzone

184
00:07:01,289 --> 00:07:05,969
to actually store the key material so

185
00:07:03,930 --> 00:07:08,060
you'll have a Bitcoin wallet that's got

186
00:07:05,969 --> 00:07:11,490
a USB or it's got a screen on it

187
00:07:08,060 --> 00:07:13,860
whatever type it is and it will make

188
00:07:11,490 --> 00:07:15,659
signing requests into the trusted world

189
00:07:13,860 --> 00:07:17,639
where the key material is stored and it

190
00:07:15,659 --> 00:07:21,180
will get out a signed transaction and so

191
00:07:17,639 --> 00:07:23,099
that way that actual you know private

192
00:07:21,180 --> 00:07:24,689
data of your private key for your wallet

193
00:07:23,099 --> 00:07:26,310
is always sitting in this trusted

194
00:07:24,689 --> 00:07:28,469
environment it never leaves the trusted

195
00:07:26,310 --> 00:07:31,199
environment and it's just being used to

196
00:07:28,469 --> 00:07:33,240
do signing operations secure boots

197
00:07:31,199 --> 00:07:35,009
another place this comes in because you

198
00:07:33,240 --> 00:07:36,990
can have this separate world that's

199
00:07:35,009 --> 00:07:39,990
doing validation of things and even if

200
00:07:36,990 --> 00:07:43,740
like your kernel is malicious it can

201
00:07:39,990 --> 00:07:45,599
actually validate that separately and in

202
00:07:43,740 --> 00:07:47,490
some cases do stuff like reset the

203
00:07:45,599 --> 00:07:50,310
system immediately if it doesn't like

204
00:07:47,490 --> 00:07:51,990
what's happening it's also used for DRM

205
00:07:50,310 --> 00:07:55,139
which is an interesting application

206
00:07:51,990 --> 00:07:56,490
Widevine is one of the main applications

207
00:07:55,139 --> 00:07:58,650
for one of the ones you'll see on

208
00:07:56,490 --> 00:08:01,560
android it's a product for android we'll

209
00:07:58,650 --> 00:08:02,878
talk about that in detail a bit later so

210
00:08:01,560 --> 00:08:04,889
the main thing here is you're getting

211
00:08:02,879 --> 00:08:07,860
this extra layer protection from the

212
00:08:04,889 --> 00:08:09,089
host OS and the normal user land so you

213
00:08:07,860 --> 00:08:11,580
have user land you have the kernel space

214
00:08:09,089 --> 00:08:13,680
that's all separate it's talking over a

215
00:08:11,580 --> 00:08:15,839
bridge to this other trusted world and

216
00:08:13,680 --> 00:08:18,000
it is sometimes used to protect the

217
00:08:15,839 --> 00:08:19,919
system from the user which is a nice way

218
00:08:18,000 --> 00:08:22,099
of saying stopping you from doing things

219
00:08:19,919 --> 00:08:25,229
that you might want to do to your device

220
00:08:22,099 --> 00:08:27,029
for example there are mobile carriers

221
00:08:25,229 --> 00:08:28,889
that have applications that run in trust

222
00:08:27,029 --> 00:08:30,900
zone that are used to do SIM card

223
00:08:28,889 --> 00:08:32,760
locking to prevent you from unlocking

224
00:08:30,900 --> 00:08:35,458
the phone and using any any SIM card

225
00:08:32,760 --> 00:08:38,069
with it at least in the u.s. might be

226
00:08:35,458 --> 00:08:39,718
different here but that is one

227
00:08:38,070 --> 00:08:41,579
application where are you as a user

228
00:08:39,719 --> 00:08:44,130
might not like this whole trust zone

229
00:08:41,578 --> 00:08:45,719
thing but let's talk about trust owned

230
00:08:44,130 --> 00:08:49,310
how it works what it actually is in

231
00:08:45,720 --> 00:08:52,589
practice this is sort of the the arm

232
00:08:49,310 --> 00:08:54,089
marketing speak of it the trusted and

233
00:08:52,589 --> 00:08:56,730
non trusted world

234
00:08:54,090 --> 00:08:59,250
and it's the arm trust and execution

235
00:08:56,730 --> 00:09:01,440
environment and has the normal they cult

236
00:08:59,250 --> 00:09:04,980
the normal world and the secure world

237
00:09:01,440 --> 00:09:06,780
which is a bit of a misnomer but the

238
00:09:04,980 --> 00:09:09,180
normal world is going to run typically

239
00:09:06,780 --> 00:09:12,240
you're rich OS so your Android your

240
00:09:09,180 --> 00:09:15,150
Linux York UNIX whatever normal OS your

241
00:09:12,240 --> 00:09:16,710
normal applications run on the secure

242
00:09:15,150 --> 00:09:19,160
world is going to be some limited

243
00:09:16,710 --> 00:09:21,450
operating system like opti in this case

244
00:09:19,160 --> 00:09:23,939
that is only going to be able to do

245
00:09:21,450 --> 00:09:25,710
certain things and we'll also have

246
00:09:23,940 --> 00:09:28,200
trusted applications which are things

247
00:09:25,710 --> 00:09:30,480
like the gatekeeper daemon other

248
00:09:28,200 --> 00:09:32,880
examples on android Widevine things like

249
00:09:30,480 --> 00:09:35,490
that the processor has the ability to

250
00:09:32,880 --> 00:09:38,280
switch between these two worlds and it

251
00:09:35,490 --> 00:09:41,640
can also use this to restrict access to

252
00:09:38,280 --> 00:09:43,910
different peripherals so really a useful

253
00:09:41,640 --> 00:09:46,890
example this is taken from the G node

254
00:09:43,910 --> 00:09:48,300
documentation but this sort of shows how

255
00:09:46,890 --> 00:09:50,490
the flipping works and what actually

256
00:09:48,300 --> 00:09:53,040
happens so you got your normal world on

257
00:09:50,490 --> 00:09:54,930
the left and the big thing you notice

258
00:09:53,040 --> 00:09:57,839
here is that there's a secure

259
00:09:54,930 --> 00:09:59,040
configuration register with the NS bit I

260
00:09:57,840 --> 00:10:02,580
kid you not

261
00:09:59,040 --> 00:10:05,270
NS stands for not secure so when not

262
00:10:02,580 --> 00:10:07,410
secure is one your system isn't secure

263
00:10:05,270 --> 00:10:10,230
you're you're in the normal world and

264
00:10:07,410 --> 00:10:11,640
you're operating you know on the

265
00:10:10,230 --> 00:10:13,560
peripherals as they're configured for

266
00:10:11,640 --> 00:10:15,900
the normal world so in this case we have

267
00:10:13,560 --> 00:10:18,209
our CPU core we have some instruction

268
00:10:15,900 --> 00:10:20,579
cache and data cache and you see red

269
00:10:18,210 --> 00:10:22,200
bands of regions that are enabled in the

270
00:10:20,580 --> 00:10:24,210
normal world we have a certain amount of

271
00:10:22,200 --> 00:10:26,430
RAM that's enabled we have some l2 cache

272
00:10:24,210 --> 00:10:27,900
that's enabled and we have a set of

273
00:10:26,430 --> 00:10:30,089
peripherals that are enabled so we have

274
00:10:27,900 --> 00:10:32,699
Ethernet USB MMC all the ones that

275
00:10:30,090 --> 00:10:34,590
aren't grayed out so we're going to be

276
00:10:32,700 --> 00:10:37,500
living in this world most the time until

277
00:10:34,590 --> 00:10:39,450
the processor decides to unset the not

278
00:10:37,500 --> 00:10:42,180
secure bit which brings you over to

279
00:10:39,450 --> 00:10:44,730
secure land and what ends up happening

280
00:10:42,180 --> 00:10:46,650
here is we still have a CPU that is

281
00:10:44,730 --> 00:10:48,300
still running but we have different

282
00:10:46,650 --> 00:10:49,800
instruction cache and data cache we have

283
00:10:48,300 --> 00:10:52,380
a different Bank of RAM we have a

284
00:10:49,800 --> 00:10:53,699
different Bank of l2 cache and really

285
00:10:52,380 --> 00:10:59,310
critically we have different peripherals

286
00:10:53,700 --> 00:11:01,350
so things like the GPIO pins can only be

287
00:10:59,310 --> 00:11:03,380
controlled from that secure world so

288
00:11:01,350 --> 00:11:06,300
let's say you have I don't know some

289
00:11:03,380 --> 00:11:07,800
industrial robot that's got some

290
00:11:06,300 --> 00:11:09,479
actuator that's really day

291
00:11:07,800 --> 00:11:11,880
Driss and it's controlled by a single

292
00:11:09,480 --> 00:11:13,890
GPIO pin hopefully it's not but it's

293
00:11:11,880 --> 00:11:15,330
controlled by this one pin and you only

294
00:11:13,890 --> 00:11:17,399
want that to be able to be done in

295
00:11:15,330 --> 00:11:19,529
certain conditions you could have it so

296
00:11:17,399 --> 00:11:21,779
it's only possible to set that bit

297
00:11:19,529 --> 00:11:23,670
whenever you're in the secure world also

298
00:11:21,779 --> 00:11:25,529
critically there's a security controller

299
00:11:23,670 --> 00:11:27,420
at the very bottom and that's only

300
00:11:25,529 --> 00:11:28,890
enabled in the secure world typically

301
00:11:27,420 --> 00:11:31,290
those security controllers will have

302
00:11:28,890 --> 00:11:33,060
things like crypto acceleration

303
00:11:31,290 --> 00:11:35,699
functions sometimes they'll have key

304
00:11:33,060 --> 00:11:38,189
storage modern ones all will have key

305
00:11:35,700 --> 00:11:41,870
storage and on-board key generation so

306
00:11:38,190 --> 00:11:44,820
the ability to do things like signing of

307
00:11:41,870 --> 00:11:47,100
arbitrary data will be available to you

308
00:11:44,820 --> 00:11:49,110
only in the secure world so that if

309
00:11:47,100 --> 00:11:51,360
somebody gets root on your Linux system

310
00:11:49,110 --> 00:11:54,420
they still can't actually make requests

311
00:11:51,360 --> 00:11:56,279
to it so this sounds really nice we have

312
00:11:54,420 --> 00:11:58,069
this this nice segmentation we have

313
00:11:56,279 --> 00:12:00,750
these two worlds they're separate but

314
00:11:58,070 --> 00:12:03,300
kind of equal a lot of this will depend

315
00:12:00,750 --> 00:12:05,430
on how you configure the processor and a

316
00:12:03,300 --> 00:12:07,920
really important note is if you screw up

317
00:12:05,430 --> 00:12:10,290
configuring the secure world in the

318
00:12:07,920 --> 00:12:12,540
normal world you can end up on certain

319
00:12:10,290 --> 00:12:14,640
processors just completely negating the

320
00:12:12,540 --> 00:12:16,439
whole point of trust own if you want on

321
00:12:14,640 --> 00:12:17,939
some processors you can actually have

322
00:12:16,440 --> 00:12:19,709
memory that's shared between the two and

323
00:12:17,940 --> 00:12:21,149
you can have as much memory as you want

324
00:12:19,709 --> 00:12:23,609
shared between the two so if you can

325
00:12:21,149 --> 00:12:25,410
figure it wrong you may end up just

326
00:12:23,610 --> 00:12:28,140
totally defeating the purpose of it and

327
00:12:25,410 --> 00:12:29,730
that has come up in some applications

328
00:12:28,140 --> 00:12:31,709
but it's just been configured

329
00:12:29,730 --> 00:12:34,380
incorrectly and it just totally breaks

330
00:12:31,709 --> 00:12:36,060
the whole purpose so on that note what

331
00:12:34,380 --> 00:12:37,680
are some problems that we run into with

332
00:12:36,060 --> 00:12:41,310
these trucks at execution environments

333
00:12:37,680 --> 00:12:43,550
and well the first one is really the

334
00:12:41,310 --> 00:12:46,079
sort of theme for this talk which is

335
00:12:43,550 --> 00:12:48,899
there's a lot of protections that aren't

336
00:12:46,079 --> 00:12:51,750
there so address space layout

337
00:12:48,899 --> 00:12:54,690
randomization is starting to become more

338
00:12:51,750 --> 00:12:56,699
common but is still quite rare there's

339
00:12:54,690 --> 00:12:59,610
also this problem that these limited

340
00:12:56,699 --> 00:13:01,589
os's because they want more memory for

341
00:12:59,610 --> 00:13:04,050
the main system they have a very limited

342
00:13:01,589 --> 00:13:06,420
memory range so there are attacks on

343
00:13:04,050 --> 00:13:08,670
some of these these trust applications

344
00:13:06,420 --> 00:13:09,449
where even if there is layout

345
00:13:08,670 --> 00:13:11,459
randomization

346
00:13:09,449 --> 00:13:13,439
there's so little memory that you can

347
00:13:11,459 --> 00:13:16,109
just try it a whole bunch and eventually

348
00:13:13,440 --> 00:13:18,630
it will land where you want it to that's

349
00:13:16,110 --> 00:13:21,390
happened for a few different we seemed a

350
00:13:18,630 --> 00:13:23,520
few times so there's no stack Canaries

351
00:13:21,390 --> 00:13:26,430
card pages on a lot of these which would

352
00:13:23,520 --> 00:13:28,079
be nice some of the more modern Oasis

353
00:13:26,430 --> 00:13:29,969
are starting to actually add that but

354
00:13:28,080 --> 00:13:33,360
also some people don't compile it with

355
00:13:29,970 --> 00:13:35,340
those flags enabled there the secure

356
00:13:33,360 --> 00:13:37,890
world will actually in most cases have

357
00:13:35,340 --> 00:13:40,260
fewer protections than the normal world

358
00:13:37,890 --> 00:13:43,170
which is weird because this is your you

359
00:13:40,260 --> 00:13:45,630
know secure really lockdown system why

360
00:13:43,170 --> 00:13:47,819
doesn't it have a SLR when your Android

361
00:13:45,630 --> 00:13:49,950
system definitely does why doesn't have

362
00:13:47,820 --> 00:13:50,850
secondary guard pages all those types of

363
00:13:49,950 --> 00:13:53,250
things wouldn't you know we've been

364
00:13:50,850 --> 00:13:55,170
using those for years and in the normal

365
00:13:53,250 --> 00:13:58,260
world but the secure oil just really

366
00:13:55,170 --> 00:13:59,939
hasn't caught up and one of the biggest

367
00:13:58,260 --> 00:14:01,530
things is we don't have high level

368
00:13:59,940 --> 00:14:03,300
language support so there's there's no

369
00:14:01,530 --> 00:14:05,160
java you're not writing this stuff in

370
00:14:03,300 --> 00:14:07,829
you know Python or anything like that

371
00:14:05,160 --> 00:14:12,270
you're writing it all in C or arm

372
00:14:07,830 --> 00:14:17,670
assembly and that brings up all the

373
00:14:12,270 --> 00:14:20,430
usual problems of writing C yeah so

374
00:14:17,670 --> 00:14:22,920
writing good C is really hard maybe

375
00:14:20,430 --> 00:14:24,510
impossible if you've given a certain

376
00:14:22,920 --> 00:14:26,670
number of lines of code you will

377
00:14:24,510 --> 00:14:29,580
probably not be able to write secure C

378
00:14:26,670 --> 00:14:31,020
it's is unfortunate so you have all the

379
00:14:29,580 --> 00:14:33,270
typical stuff that we've been seeing for

380
00:14:31,020 --> 00:14:34,949
years there's the common memory problems

381
00:14:33,270 --> 00:14:37,290
the buffer overflows you have to free

382
00:14:34,950 --> 00:14:39,300
all that sort of sort of stuff you have

383
00:14:37,290 --> 00:14:40,980
the typing issues so there's lots of

384
00:14:39,300 --> 00:14:42,209
places where when you interact with

385
00:14:40,980 --> 00:14:44,460
these secure os's

386
00:14:42,210 --> 00:14:47,130
you're providing void pointers to things

387
00:14:44,460 --> 00:14:50,190
and length values and those are really

388
00:14:47,130 --> 00:14:52,590
easy to mess up the compiler of course

389
00:14:50,190 --> 00:14:55,050
gives you very limited help if you're

390
00:14:52,590 --> 00:14:57,420
smart you'll turn on things like W all

391
00:14:55,050 --> 00:15:00,300
and get warnings errors and things like

392
00:14:57,420 --> 00:15:02,250
that but people don't necessarily do

393
00:15:00,300 --> 00:15:03,810
that and when developers run into these

394
00:15:02,250 --> 00:15:06,630
types of problems and their stuff

395
00:15:03,810 --> 00:15:08,069
doesn't compile it's sometimes if you

396
00:15:06,630 --> 00:15:10,080
don't stop them it's sometimes more

397
00:15:08,070 --> 00:15:13,260
tempting to disable the error than it is

398
00:15:10,080 --> 00:15:15,000
to actually fix it and C will happily

399
00:15:13,260 --> 00:15:17,490
let you disabled whatever errors you

400
00:15:15,000 --> 00:15:19,380
would like and programmers do silly

401
00:15:17,490 --> 00:15:21,960
things this is no surprise to anyone in

402
00:15:19,380 --> 00:15:23,340
security they do their mem copies and

403
00:15:21,960 --> 00:15:24,780
their store copies and all those other

404
00:15:23,340 --> 00:15:30,600
functions that we're not supposed to use

405
00:15:24,780 --> 00:15:32,180
anymore this is a nice poster from one

406
00:15:30,600 --> 00:15:34,520
folks at projects here on Natalie

407
00:15:32,180 --> 00:15:37,910
basically she took this

408
00:15:34,520 --> 00:15:39,709
she fellow Canadian took this campaign

409
00:15:37,910 --> 00:15:42,319
that Canada had a while ago about you

410
00:15:39,709 --> 00:15:44,869
know being safe about different things

411
00:15:42,320 --> 00:15:47,209
and made them about being safe about

412
00:15:44,870 --> 00:15:49,459
calling different functions this one is

413
00:15:47,209 --> 00:15:50,689
all my friends are using STR copy but

414
00:15:49,459 --> 00:15:52,790
I'm not because I understand how

415
00:15:50,690 --> 00:15:54,800
dangerous it is they say I could protect

416
00:15:52,790 --> 00:15:57,800
myself but I know that only avoiding

417
00:15:54,800 --> 00:15:59,420
stare copy is 100% effective and that's

418
00:15:57,800 --> 00:16:00,829
true if you're calling this type of

419
00:15:59,420 --> 00:16:03,110
stuff and devout you have a bunch of

420
00:16:00,830 --> 00:16:04,700
developers eventually someone's probably

421
00:16:03,110 --> 00:16:08,240
going to end up with a buffer overflow

422
00:16:04,700 --> 00:16:11,330
it's it's just the world we live in when

423
00:16:08,240 --> 00:16:12,589
you come to developing see so let's talk

424
00:16:11,330 --> 00:16:15,260
about examples of how people have

425
00:16:12,589 --> 00:16:17,779
screwed it up wide vine is a DRM

426
00:16:15,260 --> 00:16:19,399
application that probably a lot of the

427
00:16:17,779 --> 00:16:20,720
phones in this room have again if you

428
00:16:19,399 --> 00:16:24,800
have an Android device it's likely

429
00:16:20,720 --> 00:16:26,480
running it and it's used so protected

430
00:16:24,800 --> 00:16:28,490
content can be delivered and decrypted

431
00:16:26,480 --> 00:16:29,930
by this application the keys live inside

432
00:16:28,490 --> 00:16:33,350
a trust zone so you can't get the

433
00:16:29,930 --> 00:16:35,420
decryption keys for the content kind of

434
00:16:33,350 --> 00:16:37,670
overview explanation but that's more or

435
00:16:35,420 --> 00:16:39,680
less what it does so there was an

436
00:16:37,670 --> 00:16:41,899
undocumented command actually a whole

437
00:16:39,680 --> 00:16:45,199
set of undocumented diagnostic commands

438
00:16:41,899 --> 00:16:47,029
that Widevine had somebody grabbed the

439
00:16:45,200 --> 00:16:49,940
binary for this which is actually quite

440
00:16:47,029 --> 00:16:51,410
easy typically these are not encrypted

441
00:16:49,940 --> 00:16:54,500
applications and they're actually

442
00:16:51,410 --> 00:16:56,839
available from the file system from the

443
00:16:54,500 --> 00:16:59,480
normal world so you can if you have root

444
00:16:56,839 --> 00:17:01,250
on your phone you can go into the right

445
00:16:59,480 --> 00:17:03,069
block device and just dump it and you'll

446
00:17:01,250 --> 00:17:05,720
end up with all the trusted applications

447
00:17:03,069 --> 00:17:07,730
so they went through this they found

448
00:17:05,720 --> 00:17:11,929
some command dispatcher and found out

449
00:17:07,730 --> 00:17:13,459
that there was a command that ended up

450
00:17:11,929 --> 00:17:14,900
you know it was being used for

451
00:17:13,459 --> 00:17:16,160
Diagnostics when being used anymore but

452
00:17:14,900 --> 00:17:18,230
it ended up having a buffer overflow

453
00:17:16,160 --> 00:17:20,000
inside of it you could provide it with

454
00:17:18,230 --> 00:17:22,730
something way out of range and it would

455
00:17:20,000 --> 00:17:25,520
happily end up smashing a buffer and the

456
00:17:22,730 --> 00:17:28,220
end result was that these folks got code

457
00:17:25,520 --> 00:17:29,780
execution that's the bits please blog

458
00:17:28,220 --> 00:17:31,700
which is tons of great information on

459
00:17:29,780 --> 00:17:33,710
breaking trusts and but they got

460
00:17:31,700 --> 00:17:36,080
arbitrary code execution in the secure

461
00:17:33,710 --> 00:17:38,120
world this is highly problematic because

462
00:17:36,080 --> 00:17:40,790
all those protections against different

463
00:17:38,120 --> 00:17:42,860
types of peripherals in memory they kind

464
00:17:40,790 --> 00:17:44,960
of go away once you have code execution

465
00:17:42,860 --> 00:17:47,540
in that world there are still some

466
00:17:44,960 --> 00:17:47,840
protections that the OS has but you know

467
00:17:47,540 --> 00:17:49,190
you

468
00:17:47,840 --> 00:17:52,639
you kind of have gotten through the

469
00:17:49,190 --> 00:17:54,349
gates so in this case they are able to

470
00:17:52,639 --> 00:17:56,899
run code in there and undermine the

471
00:17:54,349 --> 00:17:58,700
whole purpose of trust zone because of a

472
00:17:56,899 --> 00:18:01,248
DRM application that you probably didn't

473
00:17:58,700 --> 00:18:03,320
want on your phone anyway so that's

474
00:18:01,249 --> 00:18:04,849
that's life there's more info of this on

475
00:18:03,320 --> 00:18:06,529
that bits please blog if you're

476
00:18:04,849 --> 00:18:08,539
interested in the sort of stuff I highly

477
00:18:06,529 --> 00:18:10,609
recommend that blog in general they have

478
00:18:08,539 --> 00:18:13,099
a ton of great examples of breaking

479
00:18:10,609 --> 00:18:15,379
different trusts and stuff another

480
00:18:13,099 --> 00:18:20,418
example that came up another real-world

481
00:18:15,379 --> 00:18:22,309
one was Samsung yes they had this one

482
00:18:20,419 --> 00:18:26,149
time password generation thing that was

483
00:18:22,309 --> 00:18:28,879
part of Samsung's Knox security package

484
00:18:26,149 --> 00:18:33,559
and this was implemented the whole Knox

485
00:18:28,879 --> 00:18:34,939
thing was implemented as a I believe

486
00:18:33,559 --> 00:18:36,529
actually a couple different trusted

487
00:18:34,940 --> 00:18:38,509
applications running in trust zone and

488
00:18:36,529 --> 00:18:41,570
then services on the Android side to

489
00:18:38,509 --> 00:18:43,700
call into them so they had one of these

490
00:18:41,570 --> 00:18:45,468
I generated one-time passwords and what

491
00:18:43,700 --> 00:18:47,690
was very interesting about this one is

492
00:18:45,469 --> 00:18:49,070
the Widevine one to actually pull that

493
00:18:47,690 --> 00:18:51,859
off you would need to have root on the

494
00:18:49,070 --> 00:18:53,960
phone but because Samsung wanted to

495
00:18:51,859 --> 00:18:56,299
provide access for any user to be able

496
00:18:53,960 --> 00:18:59,570
to generate these one-time passwords any

497
00:18:56,299 --> 00:19:01,158
user was able to make this call so now

498
00:18:59,570 --> 00:19:02,809
you go from meeting privileges to

499
00:19:01,159 --> 00:19:05,450
basically just needing to be on the

500
00:19:02,809 --> 00:19:07,549
phone so any application could call over

501
00:19:05,450 --> 00:19:11,059
binder the service and then make the

502
00:19:07,549 --> 00:19:12,950
request so that's much worse and what

503
00:19:11,059 --> 00:19:15,799
ended up happening again another silly

504
00:19:12,950 --> 00:19:18,559
buffer overflow thing he could provide

505
00:19:15,799 --> 00:19:20,779
it a value for the one-time password

506
00:19:18,559 --> 00:19:23,089
that was too long and it would end up

507
00:19:20,779 --> 00:19:24,289
causing a buffer overflow and you can go

508
00:19:23,089 --> 00:19:27,019
from there to getting code execution

509
00:19:24,289 --> 00:19:29,149
interesting so these things happen

510
00:19:27,019 --> 00:19:30,529
there's these are two real-world

511
00:19:29,149 --> 00:19:32,629
examples that are public there's

512
00:19:30,529 --> 00:19:34,099
probably many I know there arm and a few

513
00:19:32,629 --> 00:19:36,080
more that are not and I'm sure there's

514
00:19:34,099 --> 00:19:37,700
many many that I don't know about it's

515
00:19:36,080 --> 00:19:42,109
it's a real problem when you're writing

516
00:19:37,700 --> 00:19:45,440
C on your most secure platform so why do

517
00:19:42,109 --> 00:19:46,820
we want to talk about rust well yeah if

518
00:19:45,440 --> 00:19:48,409
people are screwing up writing this code

519
00:19:46,820 --> 00:19:50,299
maybe we should look at languages that

520
00:19:48,409 --> 00:19:52,099
give us a little bit more protection so

521
00:19:50,299 --> 00:19:56,119
has anyone here written any rust in

522
00:19:52,099 --> 00:19:59,570
their life a few folks it's yeah it's a

523
00:19:56,119 --> 00:20:00,959
bit new spin development since 2010 so

524
00:19:59,570 --> 00:20:03,990
it's new for a programming

525
00:20:00,960 --> 00:20:08,030
which I mean I'm always amazed like how

526
00:20:03,990 --> 00:20:11,400
old C is right like that goes back to

527
00:20:08,030 --> 00:20:14,730
the PDP well pdp-11

528
00:20:11,400 --> 00:20:17,010
before that and i mean the standard that

529
00:20:14,730 --> 00:20:19,710
most people are still using is either 89

530
00:20:17,010 --> 00:20:24,150
or 99 a lot of stuff is still 89 on

531
00:20:19,710 --> 00:20:26,280
embedded systems so 2010 is like you

532
00:20:24,150 --> 00:20:29,010
know yesterday in terms of the age of

533
00:20:26,280 --> 00:20:30,210
language systems languages and one of

534
00:20:29,010 --> 00:20:32,520
the big things about rust as it is a

535
00:20:30,210 --> 00:20:34,710
systems programming language is designed

536
00:20:32,520 --> 00:20:36,870
for doing low-level stuff and this is

537
00:20:34,710 --> 00:20:39,330
quite nice for us because it's going to

538
00:20:36,870 --> 00:20:41,010
not need access to a whole bunch of

539
00:20:39,330 --> 00:20:44,429
things that most programming languages

540
00:20:41,010 --> 00:20:46,740
will want in order to run so for example

541
00:20:44,430 --> 00:20:49,020
reason it works with embedded it does

542
00:20:46,740 --> 00:20:51,060
not need Lib C which is a big limitation

543
00:20:49,020 --> 00:20:53,340
when you're dealing with you know most

544
00:20:51,060 --> 00:20:55,320
programming languages it compiles down

545
00:20:53,340 --> 00:20:56,879
to actual system byte code so we don't

546
00:20:55,320 --> 00:20:59,189
need to run a VM we don't need to run an

547
00:20:56,880 --> 00:21:01,800
interpreter or anything like that it has

548
00:20:59,190 --> 00:21:04,740
no garbage collection or runtime this is

549
00:21:01,800 --> 00:21:06,330
one issue is something like go is you

550
00:21:04,740 --> 00:21:08,310
know go will compile down to a binary

551
00:21:06,330 --> 00:21:10,169
but it still has this runtime and the

552
00:21:08,310 --> 00:21:12,330
runtime depends on a lot of OS features

553
00:21:10,170 --> 00:21:15,150
so you can't really run it without the

554
00:21:12,330 --> 00:21:16,980
operating system and then lastly it's

555
00:21:15,150 --> 00:21:19,980
going to allow raw memory access and

556
00:21:16,980 --> 00:21:22,860
this is something that we want to avoid

557
00:21:19,980 --> 00:21:24,360
as much as possible but we need the

558
00:21:22,860 --> 00:21:26,310
reason being if you're dealing with

559
00:21:24,360 --> 00:21:28,320
these embedded systems these these micro

560
00:21:26,310 --> 00:21:31,260
processors you know you want to set a

561
00:21:28,320 --> 00:21:32,790
GPIO pin to one the way you do it is

562
00:21:31,260 --> 00:21:34,710
there's some memory address that you

563
00:21:32,790 --> 00:21:36,930
write to and you write a bit to the

564
00:21:34,710 --> 00:21:40,200
right bit field and that sets the pin

565
00:21:36,930 --> 00:21:42,090
high that's just how it works so you

566
00:21:40,200 --> 00:21:43,500
can't really abstract that away when

567
00:21:42,090 --> 00:21:45,780
you're dealing with this stuff at a very

568
00:21:43,500 --> 00:21:48,450
low level it's just just not really

569
00:21:45,780 --> 00:21:50,790
possible so you do need access to the

570
00:21:48,450 --> 00:21:55,110
raw memory just to set stuff up and set

571
00:21:50,790 --> 00:21:57,540
values so why is rust maybe good for

572
00:21:55,110 --> 00:22:00,449
this situation well it has a ton of

573
00:21:57,540 --> 00:22:02,970
compile time checks so rust has this

574
00:22:00,450 --> 00:22:06,660
whole model of memory ownership and

575
00:22:02,970 --> 00:22:08,820
borrowing which is I mean you could have

576
00:22:06,660 --> 00:22:10,650
a whole talk on how that works and there

577
00:22:08,820 --> 00:22:13,990
are actual whole talks on how that works

578
00:22:10,650 --> 00:22:17,020
but one way to think of it is that rust

579
00:22:13,990 --> 00:22:19,000
is kind of taking care of watching what

580
00:22:17,020 --> 00:22:20,379
you're doing with memory and making sure

581
00:22:19,000 --> 00:22:22,450
that you're not doing anything that

582
00:22:20,380 --> 00:22:25,059
could result in common errors so

583
00:22:22,450 --> 00:22:27,730
whenever you pass a pointer to something

584
00:22:25,059 --> 00:22:29,860
if it's not marked as mutable it will

585
00:22:27,730 --> 00:22:32,380
not let it be mutated and if it is

586
00:22:29,860 --> 00:22:34,389
marked as mutable after its return you

587
00:22:32,380 --> 00:22:36,850
can't actually access that anymore

588
00:22:34,390 --> 00:22:39,700
unless you've specifically said that you

589
00:22:36,850 --> 00:22:41,830
want to there's there's a bunch of

590
00:22:39,700 --> 00:22:44,530
different implementations that that make

591
00:22:41,830 --> 00:22:46,780
this work but in general it's watching

592
00:22:44,530 --> 00:22:49,780
your memory and it's doing it at compile

593
00:22:46,780 --> 00:22:50,649
time if you write code that has memory

594
00:22:49,780 --> 00:22:53,440
problems

595
00:22:50,650 --> 00:22:56,590
it just won't compile and there's no

596
00:22:53,440 --> 00:22:59,080
like - - disable memory protection flag

597
00:22:56,590 --> 00:23:01,600
that you can enable that will just let

598
00:22:59,080 --> 00:23:03,909
it build it'll fail it'll give you nice

599
00:23:01,600 --> 00:23:05,350
errors for the most part rust has been

600
00:23:03,910 --> 00:23:06,970
working a lot on making their errors

601
00:23:05,350 --> 00:23:09,340
better because they were really bad

602
00:23:06,970 --> 00:23:12,160
originally and it will tell you hey you

603
00:23:09,340 --> 00:23:14,290
know on this line this is not mutable

604
00:23:12,160 --> 00:23:16,330
and it should be or you should make it

605
00:23:14,290 --> 00:23:20,020
you need me it's not mutable because of

606
00:23:16,330 --> 00:23:21,879
what you're doing things like that it is

607
00:23:20,020 --> 00:23:23,470
generally good at finding bugs at

608
00:23:21,880 --> 00:23:26,050
compile time instead of run time and

609
00:23:23,470 --> 00:23:27,940
part of this is the memory stuff just

610
00:23:26,050 --> 00:23:29,710
the general memory protections but

611
00:23:27,940 --> 00:23:33,220
another was the one is things like the

612
00:23:29,710 --> 00:23:35,440
match so you're written C imagine a few

613
00:23:33,220 --> 00:23:37,120
people here have you've probably written

614
00:23:35,440 --> 00:23:39,730
a switch case statement once in your

615
00:23:37,120 --> 00:23:42,100
life and you've probably missed a break

616
00:23:39,730 --> 00:23:44,110
statement once in your life stuff like

617
00:23:42,100 --> 00:23:46,480
that doesn't happen in rust rust has

618
00:23:44,110 --> 00:23:49,169
matched instead of a switch case every

619
00:23:46,480 --> 00:23:52,330
single case has to be in a block that

620
00:23:49,170 --> 00:23:55,540
terminates and you must match every

621
00:23:52,330 --> 00:23:57,129
possible value so you don't have default

622
00:23:55,540 --> 00:23:59,920
well you have a default but you don't

623
00:23:57,130 --> 00:24:01,090
have this generic pass-through where if

624
00:23:59,920 --> 00:24:04,210
it didn't match anything it keeps

625
00:24:01,090 --> 00:24:05,860
executing so silly logic bugs that come

626
00:24:04,210 --> 00:24:08,559
out of those types of errors that get

627
00:24:05,860 --> 00:24:10,330
made all the time just go away because

628
00:24:08,559 --> 00:24:12,220
it's it's harder to make those types of

629
00:24:10,330 --> 00:24:13,600
errors and this is just sort of the some

630
00:24:12,220 --> 00:24:16,360
of the insight that you get when you

631
00:24:13,600 --> 00:24:19,530
start writing a programming language 40

632
00:24:16,360 --> 00:24:22,059
or 50 years after C was developed right

633
00:24:19,530 --> 00:24:23,710
the tools are pretty good and getting

634
00:24:22,059 --> 00:24:26,410
better like I said the error handling

635
00:24:23,710 --> 00:24:27,250
has gotten a lot better there is a tool

636
00:24:26,410 --> 00:24:29,520
called cargo

637
00:24:27,250 --> 00:24:32,050
that you used to set up a package and

638
00:24:29,520 --> 00:24:34,600
install dependencies and build your

639
00:24:32,050 --> 00:24:36,580
project so unlike with C where you got

640
00:24:34,600 --> 00:24:38,530
to do a lot of Hoops to get like a tool

641
00:24:36,580 --> 00:24:40,600
chain set up and you know if you're

642
00:24:38,530 --> 00:24:42,129
relying on some dependency you probably

643
00:24:40,600 --> 00:24:43,990
have to go out to the internet and

644
00:24:42,130 --> 00:24:45,310
download the source for it and put it in

645
00:24:43,990 --> 00:24:48,040
something figure out how to build it

646
00:24:45,310 --> 00:24:51,129
build some library and so on with rust

647
00:24:48,040 --> 00:24:53,290
it's it's kind unfor you there's some

648
00:24:51,130 --> 00:24:55,900
repository of all these packages

649
00:24:53,290 --> 00:24:57,610
it's called crates and you can use the

650
00:24:55,900 --> 00:25:00,490
cargo application to pull down different

651
00:24:57,610 --> 00:25:02,260
crates much like pythons pip or and

652
00:25:00,490 --> 00:25:03,850
things like that of course there are a

653
00:25:02,260 --> 00:25:06,690
lot of security issues with those types

654
00:25:03,850 --> 00:25:09,939
of systems but it is available to you

655
00:25:06,690 --> 00:25:12,730
and it has a really nice C foreign

656
00:25:09,940 --> 00:25:14,590
function interface and this is really

657
00:25:12,730 --> 00:25:16,000
critical for doing any type of work like

658
00:25:14,590 --> 00:25:18,970
this and we'll talk about it in a bit

659
00:25:16,000 --> 00:25:21,760
detail so in general we're going to need

660
00:25:18,970 --> 00:25:24,550
the building to both call C from rust

661
00:25:21,760 --> 00:25:27,550
and and this one's a little harder call

662
00:25:24,550 --> 00:25:31,169
rust from C and the way that we do this

663
00:25:27,550 --> 00:25:33,760
with FFI foreign function interface and

664
00:25:31,170 --> 00:25:35,080
whenever you're writing rust you know we

665
00:25:33,760 --> 00:25:37,480
have all these memory protections in

666
00:25:35,080 --> 00:25:40,449
place there is one way to get around

667
00:25:37,480 --> 00:25:42,130
them and it's called unsafe and it's

668
00:25:40,450 --> 00:25:44,740
actually the same keyword you see in

669
00:25:42,130 --> 00:25:46,540
c-sharp and what it will do is you can

670
00:25:44,740 --> 00:25:48,550
say this code is unsafe it's gonna

671
00:25:46,540 --> 00:25:49,990
access raw memory it's gonna call a

672
00:25:48,550 --> 00:25:52,870
function that accesses raw memory

673
00:25:49,990 --> 00:25:57,160
something like that and you'll use that

674
00:25:52,870 --> 00:25:58,870
keyword so you do need unsafe blocks for

675
00:25:57,160 --> 00:26:01,510
dereferencing raw pointers so if you

676
00:25:58,870 --> 00:26:04,030
want to access raw memory calling an

677
00:26:01,510 --> 00:26:07,420
unsafe function or method which you

678
00:26:04,030 --> 00:26:09,250
could make a rust function as unsafe or

679
00:26:07,420 --> 00:26:10,840
if you're calling a C function it's

680
00:26:09,250 --> 00:26:13,050
assumed to be unsafe because he doesn't

681
00:26:10,840 --> 00:26:15,909
have the safety so I'm safe always

682
00:26:13,050 --> 00:26:18,940
accessing or modifying a static middle

683
00:26:15,910 --> 00:26:20,320
mutable variable which is something rust

684
00:26:18,940 --> 00:26:23,160
really doesn't want you to do is use

685
00:26:20,320 --> 00:26:25,929
these you static variables and lastly

686
00:26:23,160 --> 00:26:27,940
implementing an unsafe trait so the rust

687
00:26:25,930 --> 00:26:30,610
has this trait system that's used to

688
00:26:27,940 --> 00:26:32,980
sort of describe different functions

689
00:26:30,610 --> 00:26:34,750
that the object can do and you can have

690
00:26:32,980 --> 00:26:36,850
one that is completely unsafe and

691
00:26:34,750 --> 00:26:38,260
implement that trait so that's it's just

692
00:26:36,850 --> 00:26:40,219
a language feature to stop you from

693
00:26:38,260 --> 00:26:41,658
having to write unsafe a bunch

694
00:26:40,220 --> 00:26:43,789
but your goal is always gonna be to

695
00:26:41,659 --> 00:26:45,679
limit this unsafe code and in fact if

696
00:26:43,789 --> 00:26:47,870
you compile something in rust and you

697
00:26:45,679 --> 00:26:50,570
have an unsafe block if any statements

698
00:26:47,870 --> 00:26:52,399
in that block are not actually unsafe it

699
00:26:50,570 --> 00:26:54,590
will warn you and it will say like hey

700
00:26:52,399 --> 00:26:57,379
this isn't unsafe I don't know why you

701
00:26:54,590 --> 00:26:59,418
are calling it as unsafe so you can take

702
00:26:57,379 --> 00:27:00,918
it out of your unsafe block so it gives

703
00:26:59,419 --> 00:27:04,419
you a nice picture of what code you're

704
00:27:00,919 --> 00:27:06,169
running is memory safe and memory unsafe

705
00:27:04,419 --> 00:27:08,600
unfortunately again when we're dealing

706
00:27:06,169 --> 00:27:10,549
with these embedded systems and acts we

707
00:27:08,600 --> 00:27:14,029
need access for all memory there's no

708
00:27:10,549 --> 00:27:15,860
way around this today it's just it's how

709
00:27:14,029 --> 00:27:19,580
computers work unfortunately we're stuck

710
00:27:15,860 --> 00:27:22,279
with it in terms of learning rust I can

711
00:27:19,580 --> 00:27:24,049
yeah this is not a whole talk on rust so

712
00:27:22,279 --> 00:27:27,500
what are some resources you might like

713
00:27:24,049 --> 00:27:30,799
the rust book is sort of the Bible I'd

714
00:27:27,500 --> 00:27:34,340
say and it's available online in full

715
00:27:30,799 --> 00:27:35,809
its works you all the way from hello

716
00:27:34,340 --> 00:27:37,879
world through to basically all the

717
00:27:35,809 --> 00:27:39,110
language features probably best for

718
00:27:37,879 --> 00:27:40,969
people who have already done a bit of

719
00:27:39,110 --> 00:27:43,100
programming like it's probably not the

720
00:27:40,970 --> 00:27:45,610
greatest idea to say oh I'm totally new

721
00:27:43,100 --> 00:27:48,580
to programming let's pick up rust but

722
00:27:45,610 --> 00:27:51,320
the books pretty good you give it a try

723
00:27:48,580 --> 00:27:52,908
the paper version this says soon the

724
00:27:51,320 --> 00:27:55,820
paper version is actually now no starch

725
00:27:52,909 --> 00:28:00,169
has it you can buy it as a dead tree is

726
00:27:55,820 --> 00:28:01,850
with the little crab on the cover rust

727
00:28:00,169 --> 00:28:03,860
by example is a really great website

728
00:28:01,850 --> 00:28:05,120
where you can go through and they have

729
00:28:03,860 --> 00:28:06,620
something for basically every language

730
00:28:05,120 --> 00:28:08,239
feature and they'll show you an example

731
00:28:06,620 --> 00:28:10,908
and explain how it works

732
00:28:08,240 --> 00:28:12,769
it also has a run sandbox thing where

733
00:28:10,909 --> 00:28:14,299
you can and should like modify it and

734
00:28:12,769 --> 00:28:16,549
hit play and it will run the code in

735
00:28:14,299 --> 00:28:19,190
your browser so it's nice way to play

736
00:28:16,549 --> 00:28:20,480
around with it I always end up there

737
00:28:19,190 --> 00:28:22,940
when it's like oh yeah how do you

738
00:28:20,480 --> 00:28:25,669
actually use this particular feature

739
00:28:22,940 --> 00:28:27,980
well just rust by example it's got a

740
00:28:25,669 --> 00:28:31,659
page on it and then there's julia

741
00:28:27,980 --> 00:28:34,580
Evans's blog and she has a great blog on

742
00:28:31,659 --> 00:28:36,139
lots of stuff but she did a lot of work

743
00:28:34,580 --> 00:28:38,689
on sort of doing low-level stuff with

744
00:28:36,139 --> 00:28:41,299
rust and a lot of it is illustrated and

745
00:28:38,690 --> 00:28:43,519
quite entertaining actually so I I

746
00:28:41,299 --> 00:28:45,889
generally recommend her blog for all

747
00:28:43,519 --> 00:28:48,259
sorts of topics but it has a lot of rust

748
00:28:45,889 --> 00:28:50,119
specific content as well so if you want

749
00:28:48,259 --> 00:28:53,539
to learn rust that's some of the

750
00:28:50,119 --> 00:28:54,949
resources you can go out and do it so

751
00:28:53,539 --> 00:28:56,389
guess the last part here we talked about

752
00:28:54,950 --> 00:28:58,869
trust and we talked about rust and now

753
00:28:56,389 --> 00:29:01,728
we got to put them all together and

754
00:28:58,869 --> 00:29:03,199
there's sort of a playbook to this that

755
00:29:01,729 --> 00:29:05,029
I came up with there's a few steps so

756
00:29:03,200 --> 00:29:10,129
the first one is we need a trusted OS

757
00:29:05,029 --> 00:29:12,590
and work a bit limited right because if

758
00:29:10,129 --> 00:29:14,449
I if I used QC well first off Qualcomm

759
00:29:12,590 --> 00:29:16,189
is not going to give me access to QC but

760
00:29:14,450 --> 00:29:18,830
even if they did then I'd be stuck up

761
00:29:16,190 --> 00:29:20,809
here with like a redacted slide so we're

762
00:29:18,830 --> 00:29:23,149
gonna use opti it's free it's open

763
00:29:20,809 --> 00:29:26,119
source it's pretty well documented and

764
00:29:23,149 --> 00:29:27,918
it also works with QEMU so I don't have

765
00:29:26,119 --> 00:29:29,899
to have like a BeagleBone black up here

766
00:29:27,919 --> 00:29:32,509
plugged into a projector to make it work

767
00:29:29,899 --> 00:29:33,768
this is nice you can also run it at home

768
00:29:32,509 --> 00:29:36,739
without buying any hardware which is

769
00:29:33,769 --> 00:29:38,599
which is great another option that's a

770
00:29:36,739 --> 00:29:40,070
bit newer the documentation for it was

771
00:29:38,599 --> 00:29:42,830
sketchy at the time but now it's a lot

772
00:29:40,070 --> 00:29:44,779
better is Google's trusty you can go out

773
00:29:42,830 --> 00:29:49,070
and look at that Google provides that

774
00:29:44,779 --> 00:29:50,570
all open source and it's probably going

775
00:29:49,070 --> 00:29:51,889
forward a better thing to look at just

776
00:29:50,570 --> 00:29:56,119
because it's going to be on a lot of

777
00:29:51,889 --> 00:29:58,580
Android phones and opti they have a

778
00:29:56,119 --> 00:29:59,720
website part of Linares sort of so they

779
00:29:58,580 --> 00:30:01,789
they provide all the source and

780
00:29:59,720 --> 00:30:05,210
everything so we have our OS and we can

781
00:30:01,789 --> 00:30:06,679
run our trusted OS and also we end up

782
00:30:05,210 --> 00:30:09,200
with a normal world OS which is just

783
00:30:06,679 --> 00:30:12,379
Linux so the next step here is to

784
00:30:09,200 --> 00:30:14,720
generate rust bindings opti exposes this

785
00:30:12,379 --> 00:30:18,559
pretty big API that lets you do

786
00:30:14,720 --> 00:30:21,529
everything from println to you know H

787
00:30:18,559 --> 00:30:24,289
max and signing and all the crypto

788
00:30:21,529 --> 00:30:27,200
functions so we need bindings to that

789
00:30:24,289 --> 00:30:29,149
and it's all C headers this would be

790
00:30:27,200 --> 00:30:31,340
hugely painful if we had to do it

791
00:30:29,149 --> 00:30:34,309
manually so there is a very magical tool

792
00:30:31,340 --> 00:30:36,499
called bind gen for rust the way that

793
00:30:34,309 --> 00:30:39,739
this thing works you point it at AC

794
00:30:36,499 --> 00:30:42,200
header file and it takes the function

795
00:30:39,739 --> 00:30:45,349
prototypes from C like this T machinate

796
00:30:42,200 --> 00:30:48,109
function the top one is a C normal you

797
00:30:45,349 --> 00:30:51,439
know C function prototype as C types and

798
00:30:48,109 --> 00:30:54,168
it will convert it into a rust function

799
00:30:51,440 --> 00:30:55,849
it looks pretty similar there's a little

800
00:30:54,169 --> 00:30:57,409
bit more verbose you'll notice there's

801
00:30:55,849 --> 00:30:59,539
an extern C block around it that's

802
00:30:57,409 --> 00:31:02,330
telling us that it is external function

803
00:30:59,539 --> 00:31:05,299
that is written in C and we'll also make

804
00:31:02,330 --> 00:31:06,840
the FFI calls work rust does stuff like

805
00:31:05,299 --> 00:31:09,450
mangle function names

806
00:31:06,840 --> 00:31:11,070
and whenever you're doing extern see it

807
00:31:09,450 --> 00:31:13,230
knows not to mangle things because

808
00:31:11,070 --> 00:31:15,629
otherwise he won't be able to find it so

809
00:31:13,230 --> 00:31:17,009
it does this all automatically that

810
00:31:15,629 --> 00:31:18,269
doesn't look that hard but whenever

811
00:31:17,009 --> 00:31:20,100
you're talking about thousands of

812
00:31:18,269 --> 00:31:22,350
functions and enums and type deaths and

813
00:31:20,100 --> 00:31:27,059
all that stuff yeah this tool is really

814
00:31:22,350 --> 00:31:29,759
nice and it works quite quite well I've

815
00:31:27,059 --> 00:31:33,690
had no real issues with it on a variety

816
00:31:29,759 --> 00:31:36,179
of different C libraries so once we have

817
00:31:33,690 --> 00:31:38,340
our bindings and our LS in place we need

818
00:31:36,179 --> 00:31:39,450
to write a rust library and this is sort

819
00:31:38,340 --> 00:31:41,220
of backwards because you figure we'd

820
00:31:39,450 --> 00:31:43,649
ride an application but we're gonna

821
00:31:41,220 --> 00:31:46,169
write a library the reason for this is

822
00:31:43,649 --> 00:31:48,719
the calling convention for opti it's

823
00:31:46,169 --> 00:31:51,960
it's not your normal like we have an elf

824
00:31:48,720 --> 00:31:54,389
and we're gonna call mane instead it

825
00:31:51,960 --> 00:31:56,220
looks for these five functions and it

826
00:31:54,389 --> 00:31:58,820
calls them at specific times so this

827
00:31:56,220 --> 00:32:04,649
rest library will end up getting loaded

828
00:31:58,820 --> 00:32:07,740
into to the Optio s and it'll give it's

829
00:32:04,649 --> 00:32:09,629
actually given a grid and what will end

830
00:32:07,740 --> 00:32:11,519
up happening is whenever you call into

831
00:32:09,629 --> 00:32:16,110
that from the normal world it will make

832
00:32:11,519 --> 00:32:17,909
a request to first the it's the entry

833
00:32:16,110 --> 00:32:20,129
point is the first thing that hits to

834
00:32:17,909 --> 00:32:22,320
actually create the or set up the trust

835
00:32:20,129 --> 00:32:24,509
application and then every time you

836
00:32:22,320 --> 00:32:26,460
access it it's going to open a session

837
00:32:24,509 --> 00:32:27,929
so it'll call the open session entry

838
00:32:26,460 --> 00:32:31,139
point you can allocate stuff there or

839
00:32:27,929 --> 00:32:32,610
whatever then it will invoke however

840
00:32:31,139 --> 00:32:34,559
many commands that would like to and

841
00:32:32,610 --> 00:32:36,748
these are where you would implement your

842
00:32:34,559 --> 00:32:40,019
handlers to actually sign stuff or

843
00:32:36,749 --> 00:32:42,090
validate stuff whatever you want to do

844
00:32:40,019 --> 00:32:44,159
it'll so it'll call the TI invoke

845
00:32:42,090 --> 00:32:45,869
command entry point they call it once

846
00:32:44,159 --> 00:32:47,549
and call it multiple times and it can

847
00:32:45,869 --> 00:32:49,168
close the session can open another

848
00:32:47,549 --> 00:32:50,639
session keep going and whatever it's

849
00:32:49,169 --> 00:32:52,470
completely done with the application it

850
00:32:50,639 --> 00:32:55,229
can destroy it with the destroy entry

851
00:32:52,470 --> 00:32:57,690
point so just five functions we need to

852
00:32:55,230 --> 00:32:59,960
expose those we need to expose them in a

853
00:32:57,690 --> 00:33:02,429
way that they can be seen by opti and

854
00:32:59,960 --> 00:33:04,860
that's that's about it

855
00:33:02,429 --> 00:33:05,999
so there's some magic rapper code that

856
00:33:04,860 --> 00:33:07,979
I've written and all the source for this

857
00:33:05,999 --> 00:33:09,659
is available at this and I'll give you

858
00:33:07,980 --> 00:33:12,929
the github link but there's a bit of

859
00:33:09,659 --> 00:33:15,869
wrapper magic that maps all the up T

860
00:33:12,929 --> 00:33:17,700
stuff to the rest stuff but what you end

861
00:33:15,869 --> 00:33:19,949
up with is the ability to just write a

862
00:33:17,700 --> 00:33:20,730
rust function like this and we'll walk

863
00:33:19,950 --> 00:33:23,910
through this

864
00:33:20,730 --> 00:33:26,460
in a bit of detail so this is the invoke

865
00:33:23,910 --> 00:33:29,160
command entry point for a very simple

866
00:33:26,460 --> 00:33:31,470
example because I wanted to fit on a

867
00:33:29,160 --> 00:33:34,620
slide and this also happens to be the

868
00:33:31,470 --> 00:33:36,950
opti hello world example so it's you

869
00:33:34,620 --> 00:33:40,909
know it actually works with with their

870
00:33:36,950 --> 00:33:43,350
normal world applications kinda nice so

871
00:33:40,910 --> 00:33:45,360
just like and see we got our parameters

872
00:33:43,350 --> 00:33:47,010
here it gets passed a session context

873
00:33:45,360 --> 00:33:48,899
this is one of those cases where we have

874
00:33:47,010 --> 00:33:51,270
a void type because we're dealing with C

875
00:33:48,900 --> 00:33:53,880
but we have a command ID which is gonna

876
00:33:51,270 --> 00:33:55,889
be some number pram types which is gonna

877
00:33:53,880 --> 00:33:57,540
be the types that end up mapped to the

878
00:33:55,890 --> 00:34:00,960
parameter array and then an array of

879
00:33:57,540 --> 00:34:02,250
parameters now this is a very simple

880
00:34:00,960 --> 00:34:04,440
function that just increments and

881
00:34:02,250 --> 00:34:06,930
decrements values but the first

882
00:34:04,440 --> 00:34:08,490
parameter is that's passed has a value

883
00:34:06,930 --> 00:34:12,780
that we want to increment or decrement

884
00:34:08,489 --> 00:34:14,429
so now the the arrow here is telling

885
00:34:12,780 --> 00:34:17,610
ahrefs our return type and that's an OP

886
00:34:14,429 --> 00:34:20,460
t-t result that's a enum that was

887
00:34:17,610 --> 00:34:23,370
actually defined in the API and then

888
00:34:20,460 --> 00:34:26,550
bind Jen made us this this type so we

889
00:34:23,370 --> 00:34:30,120
can just do opt e : : and gets access to

890
00:34:26,550 --> 00:34:31,830
the whole API the next line here is a

891
00:34:30,120 --> 00:34:33,060
rust macro the reason you know it's

892
00:34:31,830 --> 00:34:35,969
arrest macro is because of the

893
00:34:33,060 --> 00:34:38,009
exclamation point and this is a macro

894
00:34:35,969 --> 00:34:40,469
that's going to end up doing a little

895
00:34:38,010 --> 00:34:44,880
bit of massaging and then calling one of

896
00:34:40,469 --> 00:34:47,279
the functions in the API to do printf

897
00:34:44,880 --> 00:34:48,720
basically it was just kind of annoying

898
00:34:47,280 --> 00:34:51,510
to print a string you had to do some

899
00:34:48,719 --> 00:34:53,879
buffer conversion things and I've blend

900
00:34:51,510 --> 00:34:55,200
it to be easy so I wrote a macro one

901
00:34:53,880 --> 00:34:57,390
benefit of rest that I didn't mention

902
00:34:55,199 --> 00:34:59,939
over C is it has a macro system that

903
00:34:57,390 --> 00:35:03,779
won't make you go insane it has a lot of

904
00:34:59,940 --> 00:35:06,870
nice macro features if you've written C

905
00:35:03,780 --> 00:35:09,330
macros and done like do-while zeros and

906
00:35:06,870 --> 00:35:13,049
things like that you probably yeah you'd

907
00:35:09,330 --> 00:35:14,819
like rusts so this is just printing yeah

908
00:35:13,050 --> 00:35:17,040
we're gonna in we're in the invoke

909
00:35:14,820 --> 00:35:18,510
command entry point and then we're doing

910
00:35:17,040 --> 00:35:20,190
a match statement so this is like a

911
00:35:18,510 --> 00:35:23,460
switch case we're matching on the

912
00:35:20,190 --> 00:35:25,620
command ID value and so sort of a

913
00:35:23,460 --> 00:35:28,830
functional programming kind of thing

914
00:35:25,620 --> 00:35:30,450
because we're matching zero this is

915
00:35:28,830 --> 00:35:32,790
where we need to call and unsafe because

916
00:35:30,450 --> 00:35:33,750
we're modifying essentially raw memory

917
00:35:32,790 --> 00:35:36,890
here

918
00:35:33,750 --> 00:35:39,480
and we're taking params zero value a and

919
00:35:36,890 --> 00:35:42,120
incrementing it by one so in this case

920
00:35:39,480 --> 00:35:43,950
command with command value zero is

921
00:35:42,120 --> 00:35:46,650
increment and then it will print

922
00:35:43,950 --> 00:35:48,180
incremented value just so we know then

923
00:35:46,650 --> 00:35:50,160
we have command value 1 which is also

924
00:35:48,180 --> 00:35:51,930
just a different match value and it's

925
00:35:50,160 --> 00:35:55,410
gonna do the same thing except decrement

926
00:35:51,930 --> 00:35:57,569
the value and print decrement dime and

927
00:35:55,410 --> 00:36:01,259
then we have this underscore if you do

928
00:35:57,570 --> 00:36:03,270
not include this underscore match this

929
00:36:01,260 --> 00:36:05,700
will not compile it'll say you did not

930
00:36:03,270 --> 00:36:07,920
match all the possible values and this

931
00:36:05,700 --> 00:36:09,750
is really nice cuz I know I've written a

932
00:36:07,920 --> 00:36:11,580
lot of dumb code and done the things

933
00:36:09,750 --> 00:36:13,410
like oh I don't need to return an error

934
00:36:11,580 --> 00:36:16,620
here I'll go back later and put in the

935
00:36:13,410 --> 00:36:18,600
default case that's fine and this won't

936
00:36:16,620 --> 00:36:19,980
let you do that you have to write the

937
00:36:18,600 --> 00:36:22,259
case to match everything

938
00:36:19,980 --> 00:36:23,820
and in this case opti defines this error

939
00:36:22,260 --> 00:36:25,800
bad parameters which is the perfect

940
00:36:23,820 --> 00:36:27,570
return type for that so if i see

941
00:36:25,800 --> 00:36:29,070
something that's not 1 or 0 i'm just

942
00:36:27,570 --> 00:36:30,900
gonna return error bad parameters

943
00:36:29,070 --> 00:36:35,370
otherwise we finished the match and

944
00:36:30,900 --> 00:36:37,410
returned up t success so again probably

945
00:36:35,370 --> 00:36:42,720
the most complicated demo I can fit on

946
00:36:37,410 --> 00:36:44,339
one slide but it does something and the

947
00:36:42,720 --> 00:36:47,910
last step is to get this whole thing

948
00:36:44,340 --> 00:36:51,120
built and if you dealt with with the joy

949
00:36:47,910 --> 00:36:52,890
of linkers you yeah this is a little bit

950
00:36:51,120 --> 00:36:54,089
of a challenge to get working the first

951
00:36:52,890 --> 00:36:56,069
time and then once it works

952
00:36:54,090 --> 00:36:58,680
you never want to touch it again but

953
00:36:56,070 --> 00:37:01,500
what we end up with is a compiled rust

954
00:36:58,680 --> 00:37:04,770
library and then there's some other

955
00:37:01,500 --> 00:37:07,380
pieces to this so there's a trusted

956
00:37:04,770 --> 00:37:11,160
application header ta header that is

957
00:37:07,380 --> 00:37:15,630
provided well it's built by the opti api

958
00:37:11,160 --> 00:37:17,700
and what that is is it has the Geo ID of

959
00:37:15,630 --> 00:37:20,070
the application some other information

960
00:37:17,700 --> 00:37:22,379
about the application that part is

961
00:37:20,070 --> 00:37:24,690
written in C because it defines some

962
00:37:22,380 --> 00:37:27,500
magic constants and you just let it do

963
00:37:24,690 --> 00:37:31,440
it and gets compiled down to an object

964
00:37:27,500 --> 00:37:34,410
so the other thing is this Lib UT Live

965
00:37:31,440 --> 00:37:36,990
MPA and Lib util this is the actual live

966
00:37:34,410 --> 00:37:39,089
dynamic libraries for we're going to be

967
00:37:36,990 --> 00:37:41,129
calling into and if the linker doesn't

968
00:37:39,090 --> 00:37:43,020
get those it'll say I don't see this

969
00:37:41,130 --> 00:37:45,210
symbol I won't compile so we need to

970
00:37:43,020 --> 00:37:47,670
take all three of those things and toss

971
00:37:45,210 --> 00:37:49,230
them into the linker so once we have

972
00:37:47,670 --> 00:37:51,380
that we have symbols all the symbols

973
00:37:49,230 --> 00:37:53,339
that we need we need a linker script

974
00:37:51,380 --> 00:37:56,430
opti provides one of these that

975
00:37:53,339 --> 00:38:00,058
fortunately works just just works with

976
00:37:56,430 --> 00:38:01,919
it so that part's pretty easy and we

977
00:38:00,059 --> 00:38:04,140
toss that into the linker we end up

978
00:38:01,920 --> 00:38:08,130
getting an elf out just like any other

979
00:38:04,140 --> 00:38:12,990
elf the only little caveat here is my

980
00:38:08,130 --> 00:38:15,210
system is x86 64 most of the trustzone

981
00:38:12,990 --> 00:38:16,740
is going to be armed because all of its

982
00:38:15,210 --> 00:38:19,770
gonna be armed because its arms

983
00:38:16,740 --> 00:38:22,410
copyright so we're doing cross compiling

984
00:38:19,770 --> 00:38:24,390
here rust has a very nice cross

985
00:38:22,410 --> 00:38:26,970
compiling system you can use rust up to

986
00:38:24,390 --> 00:38:29,220
install the various targets you need a

987
00:38:26,970 --> 00:38:31,169
cross cross compiling GCC to build the

988
00:38:29,220 --> 00:38:32,640
header and the libraries you need a

989
00:38:31,170 --> 00:38:34,740
cross compiling linker to do the linking

990
00:38:32,640 --> 00:38:36,720
when we have all that done we end up

991
00:38:34,740 --> 00:38:38,790
with an arm elf for the trusted

992
00:38:36,720 --> 00:38:40,379
application the last step is to call

993
00:38:38,790 --> 00:38:42,779
this little function that's provide a

994
00:38:40,380 --> 00:38:44,730
little script that's provided by opti to

995
00:38:42,780 --> 00:38:46,980
do the signature so it will take a

996
00:38:44,730 --> 00:38:50,369
binary and sign it and that way whenever

997
00:38:46,980 --> 00:38:51,540
we actually try to run it it will check

998
00:38:50,369 --> 00:38:54,900
the signature and make sure it's valid

999
00:38:51,540 --> 00:38:57,900
up T will only run signed code so this

1000
00:38:54,900 --> 00:38:59,339
is a pretty nice protection and what

1001
00:38:57,900 --> 00:39:00,690
that ends up doing is just tossing a

1002
00:38:59,339 --> 00:39:03,210
signature on the thing and it gives us a

1003
00:39:00,690 --> 00:39:04,440
sign to trusted application and finally

1004
00:39:03,210 --> 00:39:08,369
we have something that we can actually

1005
00:39:04,440 --> 00:39:12,059
run and we'll do a little demo now I

1006
00:39:08,369 --> 00:39:15,619
apologize qemu bit of a pain in terms of

1007
00:39:12,059 --> 00:39:17,700
font size oh that's lovely

1008
00:39:15,619 --> 00:39:19,200
internal error we'll just hope that that

1009
00:39:17,700 --> 00:39:21,299
wasn't bad

1010
00:39:19,200 --> 00:39:22,710
they don't pay in terms of font size and

1011
00:39:21,299 --> 00:39:25,319
in terms of lighting I hope this is

1012
00:39:22,710 --> 00:39:28,170
somewhat visible I'm not sure if the

1013
00:39:25,319 --> 00:39:31,790
lights can can go down to wash out less

1014
00:39:28,170 --> 00:39:35,970
but the way this ends up working here

1015
00:39:31,790 --> 00:39:39,420
when you build this it will build you a

1016
00:39:35,970 --> 00:39:41,189
qmu image so it builds you both a build

1017
00:39:39,420 --> 00:39:43,230
root image for linux and it builds you

1018
00:39:41,190 --> 00:39:45,660
the trusted world so we're sitting over

1019
00:39:43,230 --> 00:39:50,130
here at qmu and we're gonna hit C to

1020
00:39:45,660 --> 00:39:52,680
start it lots of junk flies by just as a

1021
00:39:50,130 --> 00:39:54,329
boots top is our normal Linux system

1022
00:39:52,680 --> 00:39:56,520
that was you boot and now the nice

1023
00:39:54,329 --> 00:39:58,020
kernels booting the bottom we're looking

1024
00:39:56,520 --> 00:40:00,299
at the secure world which is just

1025
00:39:58,020 --> 00:40:01,530
printing out some debug messages if you

1026
00:40:00,299 --> 00:40:03,870
were on real Hardware this

1027
00:40:01,530 --> 00:40:06,090
would be set up as probably two serial

1028
00:40:03,870 --> 00:40:07,850
terminals interesting note if you happen

1029
00:40:06,090 --> 00:40:11,100
to be pen testing any of these systems

1030
00:40:07,850 --> 00:40:14,400
sometimes the trusted world's debug

1031
00:40:11,100 --> 00:40:17,850
serial terminal is left enabled and can

1032
00:40:14,400 --> 00:40:19,680
provide all sorts of juicy info yeah so

1033
00:40:17,850 --> 00:40:24,480
we're gonna log in with the super secure

1034
00:40:19,680 --> 00:40:26,730
login of route and no password and now

1035
00:40:24,480 --> 00:40:30,150
we're sitting at your normal like Linux

1036
00:40:26,730 --> 00:40:32,310
like hey this is less slash yeah it's a

1037
00:40:30,150 --> 00:40:36,540
Selina Kista MIT was built by build root

1038
00:40:32,310 --> 00:40:38,940
it's a 32-bit arm system so what opti

1039
00:40:36,540 --> 00:40:43,259
provides as they're examples is a bunch

1040
00:40:38,940 --> 00:40:44,610
of normal world applications so you're

1041
00:40:43,260 --> 00:40:48,030
gonna call a normal world application

1042
00:40:44,610 --> 00:40:50,070
and then it's going to end up doing the

1043
00:40:48,030 --> 00:40:52,380
actual IPC that happens over to the

1044
00:40:50,070 --> 00:40:55,290
trusted world it'll do some stuff send

1045
00:40:52,380 --> 00:40:58,020
back the result their hello world was a

1046
00:40:55,290 --> 00:41:00,060
great example because it was that nice

1047
00:40:58,020 --> 00:41:02,490
simple example so we call hello world

1048
00:41:00,060 --> 00:41:05,220
hurry run hello world what we see happen

1049
00:41:02,490 --> 00:41:06,839
is a value gets incremented really

1050
00:41:05,220 --> 00:41:09,209
simple but what happened there it was

1051
00:41:06,840 --> 00:41:12,090
actually loaded up you can see the the

1052
00:41:09,210 --> 00:41:15,270
grid starting with 8a AF it's real tiny

1053
00:41:12,090 --> 00:41:17,730
but it called it and it was printing the

1054
00:41:15,270 --> 00:41:19,470
rusty a create entry point all the

1055
00:41:17,730 --> 00:41:21,600
things that happened so it create entry

1056
00:41:19,470 --> 00:41:23,850
point it did a open session it didn't

1057
00:41:21,600 --> 00:41:26,520
invoke command hit printed incremented

1058
00:41:23,850 --> 00:41:28,410
value from rust then it closes the

1059
00:41:26,520 --> 00:41:29,730
session closed session entry point and

1060
00:41:28,410 --> 00:41:31,319
then it actually destroys the

1061
00:41:29,730 --> 00:41:33,930
application doesn't keep it open so does

1062
00:41:31,320 --> 00:41:36,240
destroy entry point and and then it's

1063
00:41:33,930 --> 00:41:38,009
done so that's what it ends up looking

1064
00:41:36,240 --> 00:41:39,509
like with both the worlds interacting

1065
00:41:38,010 --> 00:41:41,640
with each other and and how stuff gets

1066
00:41:39,510 --> 00:41:44,190
passed together in practice when you

1067
00:41:41,640 --> 00:41:46,080
called that application that not secure

1068
00:41:44,190 --> 00:41:47,910
bit ended up getting set to zero which

1069
00:41:46,080 --> 00:41:49,830
passed execution over to the secure

1070
00:41:47,910 --> 00:41:51,990
world which invoked the thing got the

1071
00:41:49,830 --> 00:41:53,640
parameter incremented it printed out

1072
00:41:51,990 --> 00:41:55,979
some stuff and then through the purple

1073
00:41:53,640 --> 00:41:58,230
the value back into the secure the

1074
00:41:55,980 --> 00:42:03,840
normal world and the big god switch back

1075
00:41:58,230 --> 00:42:06,570
when that happened so just quick demo to

1076
00:42:03,840 --> 00:42:07,890
show you it actually works but the codes

1077
00:42:06,570 --> 00:42:09,900
all provided if you want to download it

1078
00:42:07,890 --> 00:42:12,359
try it yourself or look at it in more

1079
00:42:09,900 --> 00:42:14,020
detail but a few little conclusions and

1080
00:42:12,360 --> 00:42:17,350
takeaways maybe

1081
00:42:14,020 --> 00:42:19,509
is well this trusted execution

1082
00:42:17,350 --> 00:42:22,330
environment thing it's useful but it's

1083
00:42:19,510 --> 00:42:24,190
not magic you have all the usual

1084
00:42:22,330 --> 00:42:26,200
problems right people can miss configure

1085
00:42:24,190 --> 00:42:28,000
it people can write vulnerable code all

1086
00:42:26,200 --> 00:42:30,040
the normal things that could happen

1087
00:42:28,000 --> 00:42:32,530
anywhere else except there's actually

1088
00:42:30,040 --> 00:42:34,480
some things that are against you right

1089
00:42:32,530 --> 00:42:36,730
you're writing see you have bare-metal

1090
00:42:34,480 --> 00:42:38,350
access to all this stuff like there are

1091
00:42:36,730 --> 00:42:42,130
some reasons that you could it makes it

1092
00:42:38,350 --> 00:42:43,900
even easier to screw up so if you see

1093
00:42:42,130 --> 00:42:45,700
well if you come across these don't

1094
00:42:43,900 --> 00:42:46,990
think that oh well it's it's it's a

1095
00:42:45,700 --> 00:42:49,750
trust execution environment there's

1096
00:42:46,990 --> 00:42:51,370
nothing that can be done it's just it's

1097
00:42:49,750 --> 00:42:54,640
the same as any other application at the

1098
00:42:51,370 --> 00:42:56,290
end of the day rust is a potential

1099
00:42:54,640 --> 00:42:58,509
replacement for C in a lot of these

1100
00:42:56,290 --> 00:43:01,630
applications and what I mean by that is

1101
00:42:58,510 --> 00:43:02,710
it it can do a lot of these things the

1102
00:43:01,630 --> 00:43:05,730
reason being it doesn't have any

1103
00:43:02,710 --> 00:43:08,050
dependencies it needs like mem copy and

1104
00:43:05,730 --> 00:43:10,270
it also has some of these benefits

1105
00:43:08,050 --> 00:43:13,180
things like you know some more sane

1106
00:43:10,270 --> 00:43:15,430
semantics around macros and match things

1107
00:43:13,180 --> 00:43:17,169
like that the memory protection so on

1108
00:43:15,430 --> 00:43:18,640
and so forth so there's some reasons

1109
00:43:17,170 --> 00:43:21,160
that you might want to use it probably

1110
00:43:18,640 --> 00:43:22,960
the biggest disadvantage is that very

1111
00:43:21,160 --> 00:43:25,600
few people in the world right now know

1112
00:43:22,960 --> 00:43:27,910
how to write rest compared to C you're

1113
00:43:25,600 --> 00:43:31,180
unlikely to just find a rust developer

1114
00:43:27,910 --> 00:43:32,859
that is gonna write this stuff I as far

1115
00:43:31,180 --> 00:43:34,600
as I can tell no one else has tried to

1116
00:43:32,860 --> 00:43:36,730
write a trust home application in rust

1117
00:43:34,600 --> 00:43:39,310
so like there's no how many people that

1118
00:43:36,730 --> 00:43:41,200
are gonna do that that that's a problem

1119
00:43:39,310 --> 00:43:43,000
also some of the stuff is gonna be more

1120
00:43:41,200 --> 00:43:45,460
work and more verbose because of the

1121
00:43:43,000 --> 00:43:46,720
memory protection things like that and

1122
00:43:45,460 --> 00:43:48,510
then I guess the last is sort of like a

1123
00:43:46,720 --> 00:43:50,740
question which is should you do this

1124
00:43:48,510 --> 00:43:52,300
which is always a good thing to ask when

1125
00:43:50,740 --> 00:43:54,459
people give talks about who I have this

1126
00:43:52,300 --> 00:43:55,960
nice thing in proof of concept you can

1127
00:43:54,460 --> 00:44:00,430
always be like yeah but is it really a

1128
00:43:55,960 --> 00:44:02,050
good idea and I think maybe not yet the

1129
00:44:00,430 --> 00:44:04,629
ideal thing here would be if somebody

1130
00:44:02,050 --> 00:44:07,720
wrote an operating system for trust zone

1131
00:44:04,630 --> 00:44:10,270
that was sort of more rust focused and

1132
00:44:07,720 --> 00:44:11,649
and had better support for it I'm stuck

1133
00:44:10,270 --> 00:44:13,210
with not having the rest standard

1134
00:44:11,650 --> 00:44:15,880
library for instance because it has a

1135
00:44:13,210 --> 00:44:17,590
lot of dependencies things like that

1136
00:44:15,880 --> 00:44:19,210
but it is something you can start

1137
00:44:17,590 --> 00:44:21,250
looking at if you're if you have places

1138
00:44:19,210 --> 00:44:23,680
anywhere not necessarily just trust zone

1139
00:44:21,250 --> 00:44:25,690
where you're saying well we're using C

1140
00:44:23,680 --> 00:44:27,649
for this because we need two for one or

1141
00:44:25,690 --> 00:44:30,170
two things maybe it's time to

1142
00:44:27,650 --> 00:44:31,220
saying and well you could rust replace

1143
00:44:30,170 --> 00:44:33,260
it and is that a good idea

1144
00:44:31,220 --> 00:44:35,870
and in some cases I think the answer is

1145
00:44:33,260 --> 00:44:37,670
yes but it'll depend anyway that's what

1146
00:44:35,870 --> 00:44:40,009
I have for you today you can send me

1147
00:44:37,670 --> 00:44:43,100
emails or find me on twitter x' all the

1148
00:44:40,010 --> 00:44:45,440
code and slides are on github there and

1149
00:44:43,100 --> 00:44:46,460
i think we have about five minutes if

1150
00:44:45,440 --> 00:44:47,540
you folks would like to ask questions

1151
00:44:46,460 --> 00:44:49,130
but thank you very much for coming out

1152
00:44:47,540 --> 00:44:51,380
thanks to the black hat folks for avenue

1153
00:44:49,130 --> 00:44:52,940
and people who put this on it's always

1154
00:44:51,380 --> 00:44:56,410
fun to jump in front of folks and talk

1155
00:44:52,940 --> 00:44:56,410
about what you're working on so thanks I

1156
00:45:00,550 --> 00:45:14,030
don't know how we're doing questions but

1157
00:45:03,140 --> 00:45:16,220
oh there's a microphone hi all right

1158
00:45:14,030 --> 00:45:20,360
thank you for to talk Thanks it was very

1159
00:45:16,220 --> 00:45:24,200
nice I've a question about like you are

1160
00:45:20,360 --> 00:45:26,600
saying that people they I mean the

1161
00:45:24,200 --> 00:45:29,089
restaurants they would be more secure if

1162
00:45:26,600 --> 00:45:32,000
they go for example to rest right so

1163
00:45:29,090 --> 00:45:33,440
what about for example like a box that

1164
00:45:32,000 --> 00:45:36,350
they are not memory corruptions like

1165
00:45:33,440 --> 00:45:37,940
like a betrayal right like a receipt of

1166
00:45:36,350 --> 00:45:41,569
owner ability where you can basically

1167
00:45:37,940 --> 00:45:44,480
know all the things it could be possible

1168
00:45:41,570 --> 00:45:46,760
in in rats as well oh yeah so it's it's

1169
00:45:44,480 --> 00:45:48,140
not none of this stuff is a fancy right

1170
00:45:46,760 --> 00:45:49,090
like nothing that's gonna solve all your

1171
00:45:48,140 --> 00:45:51,770
problems

1172
00:45:49,090 --> 00:45:53,120
that's any anyone who's selling you a

1173
00:45:51,770 --> 00:45:56,090
security product that tells all your

1174
00:45:53,120 --> 00:45:57,440
problems is lassies only one back I know

1175
00:45:56,090 --> 00:46:00,230
it doesn't matter if you see your ass

1176
00:45:57,440 --> 00:46:00,680
and you are yeah it's gone it's game

1177
00:46:00,230 --> 00:46:01,820
over

1178
00:46:00,680 --> 00:46:04,190
and that's actually a problem with

1179
00:46:01,820 --> 00:46:06,080
trusted execution environments one thing

1180
00:46:04,190 --> 00:46:07,970
about this this talk is if you're

1181
00:46:06,080 --> 00:46:10,850
someone who tests these for a living and

1182
00:46:07,970 --> 00:46:12,859
maybe gives you some ideas but again if

1183
00:46:10,850 --> 00:46:15,650
you run into these all those bug classes

1184
00:46:12,860 --> 00:46:17,900
totally valid the only difference is you

1185
00:46:15,650 --> 00:46:20,990
have some weird IPC mechanism to talk

1186
00:46:17,900 --> 00:46:23,210
between the two worlds right and you

1187
00:46:20,990 --> 00:46:24,680
can't do certain things but look at it

1188
00:46:23,210 --> 00:46:27,380
as another level of you know you got

1189
00:46:24,680 --> 00:46:29,990
user you got root and it's just another

1190
00:46:27,380 --> 00:46:32,390
level of privilege if you wrote a rest

1191
00:46:29,990 --> 00:46:33,890
application that was vulnerable that was

1192
00:46:32,390 --> 00:46:36,500
running as root and that was set UID

1193
00:46:33,890 --> 00:46:38,540
root you'd have the same problem but

1194
00:46:36,500 --> 00:46:40,340
there's certain bug classes that will

1195
00:46:38,540 --> 00:46:41,220
help you prevent against and in certain

1196
00:46:40,340 --> 00:46:43,920
reasons that it wasn't my

1197
00:46:41,220 --> 00:46:46,770
so again none of its no no that's a

1198
00:46:43,920 --> 00:46:48,540
magic magic bullet I I wish there was a

1199
00:46:46,770 --> 00:46:51,060
language that stopped all security

1200
00:46:48,540 --> 00:46:56,550
problems but it's it's unfortunately not

1201
00:46:51,060 --> 00:46:59,040
the case for example rest I think

1202
00:46:56,550 --> 00:47:01,530
pieces of it might start doing that so

1203
00:46:59,040 --> 00:47:04,470
folks that are doing some embedded

1204
00:47:01,530 --> 00:47:06,270
things and sort of higher-level embedded

1205
00:47:04,470 --> 00:47:07,890
so you know you have the really low

1206
00:47:06,270 --> 00:47:10,380
level you're writing code for like an

1207
00:47:07,890 --> 00:47:14,580
8-bit microcontroller and whatever ASM

1208
00:47:10,380 --> 00:47:15,990
it uses like that's des ya know yeah you

1209
00:47:14,580 --> 00:47:17,430
got the stack and you have things where

1210
00:47:15,990 --> 00:47:18,990
you're running a full Linux system and

1211
00:47:17,430 --> 00:47:21,210
you have you don't need to access

1212
00:47:18,990 --> 00:47:24,118
Hardware directly that you can also use

1213
00:47:21,210 --> 00:47:26,160
things like go or Python or whatever

1214
00:47:24,119 --> 00:47:27,720
where you know don't get all the

1215
00:47:26,160 --> 00:47:29,009
benefits but you get a lot of them the

1216
00:47:27,720 --> 00:47:30,810
stuff that sits in the middle where you

1217
00:47:29,010 --> 00:47:32,790
have something that's embedded but needs

1218
00:47:30,810 --> 00:47:34,349
Hardware access is one place where I can

1219
00:47:32,790 --> 00:47:36,210
see people who really care about

1220
00:47:34,349 --> 00:47:39,240
security starting to look towards it and

1221
00:47:36,210 --> 00:47:42,359
also places where you need that type of

1222
00:47:39,240 --> 00:47:44,220
those types of I guess security benefits

1223
00:47:42,359 --> 00:47:45,869
but also real time that's another

1224
00:47:44,220 --> 00:47:47,250
benefit compared to something like go is

1225
00:47:45,869 --> 00:47:49,980
because there's no garbage collection

1226
00:47:47,250 --> 00:47:53,010
you can actually do hard real-time stuff

1227
00:47:49,980 --> 00:47:55,560
and you can't do like other than C and

1228
00:47:53,010 --> 00:47:58,440
assembly doing hard real-time is it's

1229
00:47:55,560 --> 00:48:05,720
not easy so that's yeah another reason

1230
00:47:58,440 --> 00:48:08,010
it might help you out thanks anyone else

1231
00:48:05,720 --> 00:48:09,930
that'll let you go two minutes early for

1232
00:48:08,010 --> 00:48:11,609
lunch I'll be around here if you want to

1233
00:48:09,930 --> 00:48:14,759
ask me a question privately or

1234
00:48:11,609 --> 00:48:15,598
one-on-one but thanks again and have a

1235
00:48:14,760 --> 00:48:17,750
good day enjoy the rest of the

1236
00:48:15,599 --> 00:48:17,750
conference

