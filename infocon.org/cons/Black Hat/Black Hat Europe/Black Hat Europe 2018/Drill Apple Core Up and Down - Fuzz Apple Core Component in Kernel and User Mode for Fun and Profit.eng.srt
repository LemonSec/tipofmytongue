1
00:00:00,060 --> 00:00:05,279
oh good morning everyone good morning

2
00:00:01,800 --> 00:00:08,820
everyone today my topic is really epic

3
00:00:05,279 --> 00:00:12,920
Oh up and down father Paco come in

4
00:00:08,820 --> 00:00:12,920
colonel and user-mode for fun and profit

5
00:00:13,049 --> 00:00:19,500
this is also our topic this is do it

6
00:00:16,379 --> 00:00:22,680
hello everyone good morning this is me

7
00:00:19,500 --> 00:00:27,109
the first night is to talk my Twitter

8
00:00:22,680 --> 00:00:31,109
account and I joined channel macro since

9
00:00:27,109 --> 00:00:35,579
2013 I have some experience in Windows

10
00:00:31,109 --> 00:00:40,230
kernel and I am the author of channel

11
00:00:35,579 --> 00:00:44,309
micro rootkit and book hit clean tour I

12
00:00:40,230 --> 00:00:48,140
also I'm also the major author of

13
00:00:44,309 --> 00:00:53,089
channel macro ransomware decryption tour

14
00:00:48,140 --> 00:00:57,649
now I focus on ours and joy and Mac OS

15
00:00:53,090 --> 00:01:01,379
one bility hunting and exploit ok

16
00:00:57,649 --> 00:01:03,750
I'm Lila I have joined channel micro

17
00:01:01,379 --> 00:01:09,270
since 2015

18
00:01:03,750 --> 00:01:15,090
I was mirroring my class and now as

19
00:01:09,270 --> 00:01:18,470
owner PT and maja hunting and Nam boxing

20
00:01:15,090 --> 00:01:22,680
on iOS and Android exploit detection

21
00:01:18,470 --> 00:01:30,020
this is another also our topic is

22
00:01:22,680 --> 00:01:34,770
moaning Li and he Sampson by some reason

23
00:01:30,020 --> 00:01:37,590
and she's in shock sound Explorer

24
00:01:34,770 --> 00:01:42,420
detection and RS Mac OS Windows and

25
00:01:37,590 --> 00:01:50,060
enjoy the vulnerability today this is

26
00:01:42,420 --> 00:01:53,820
gender our topic about ecstasy user mode

27
00:01:50,060 --> 00:02:00,110
we will talk about our fuzzing strategy

28
00:01:53,820 --> 00:02:03,449
and study one case this is the smartest

29
00:02:00,110 --> 00:02:05,369
axion agenda we will introduce our

30
00:02:03,450 --> 00:02:09,539
fuzzing architecture and then talk about

31
00:02:05,369 --> 00:02:14,129
the root case study now let's talk about

32
00:02:09,538 --> 00:02:17,458
the smuggling ecstasy support

33
00:02:14,129 --> 00:02:20,069
FPC is while the low-level inter-process

34
00:02:17,459 --> 00:02:24,239
communication magnetism the many

35
00:02:20,069 --> 00:02:26,359
security properties to separate the

36
00:02:24,239 --> 00:02:31,170
private each four different components

37
00:02:26,360 --> 00:02:34,829
as we all know common technical

38
00:02:31,170 --> 00:02:37,970
technical to break out our sandbox is to

39
00:02:34,829 --> 00:02:41,489
obtain coach occasion in a higher

40
00:02:37,970 --> 00:02:45,239
privilege or on standby lieutenant and

41
00:02:41,489 --> 00:02:47,280
our son McCoy has fraud so many of these

42
00:02:45,239 --> 00:02:48,870
kinds of system so is in order to

43
00:02:47,280 --> 00:02:52,590
implement different functions for

44
00:02:48,870 --> 00:02:54,900
applications so that is why we take it

45
00:02:52,590 --> 00:02:59,269
easy mechanism and our Falcon target

46
00:02:54,900 --> 00:03:04,680
that PC has his own data types such as

47
00:02:59,269 --> 00:03:08,280
in table and dictionary hiring and all

48
00:03:04,680 --> 00:03:11,159
all of this data will be Sarai's into

49
00:03:08,280 --> 00:03:14,609
equity message i'll say by meta message

50
00:03:11,159 --> 00:03:17,730
function mm format message there are two

51
00:03:14,609 --> 00:03:21,060
kinds of introduced symbol introduced

52
00:03:17,730 --> 00:03:27,238
including symbol and complicated ones

53
00:03:21,060 --> 00:03:31,049
and what is the X PC match the message

54
00:03:27,239 --> 00:03:34,889
looks like in the memory we got a real

55
00:03:31,049 --> 00:03:38,060
massive serve back from this picture we

56
00:03:34,889 --> 00:03:41,669
can see signs the content in the red box

57
00:03:38,060 --> 00:03:45,060
is a match message header the current

58
00:03:41,669 --> 00:03:48,090
box content is counter of the message

59
00:03:45,060 --> 00:03:52,019
body here is the one

60
00:03:48,090 --> 00:03:54,930
next is the message decrypt hers which

61
00:03:52,019 --> 00:04:00,599
contained et cetera object in the FCC

62
00:03:54,930 --> 00:04:02,879
master masters funny the funny foreign

63
00:04:00,599 --> 00:04:06,540
the magic and evasion value in the

64
00:04:02,879 --> 00:04:09,298
yellow box are the specific dictionary

65
00:04:06,540 --> 00:04:15,358
data this information composed on at

66
00:04:09,299 --> 00:04:20,039
specie much mercy when one at specie so

67
00:04:15,359 --> 00:04:24,450
is process requests from other processes

68
00:04:20,039 --> 00:04:26,849
it should deserve teaser eyes this XP

69
00:04:24,450 --> 00:04:29,520
see messaged by met message

70
00:04:26,850 --> 00:04:31,860
magnesium first and then using FCC

71
00:04:29,520 --> 00:04:33,780
manage them to process this ecstasy tell

72
00:04:31,860 --> 00:04:38,400
her

73
00:04:33,780 --> 00:04:42,380
finally compare cars from the FCC so is

74
00:04:38,400 --> 00:04:47,130
we all receive the data they accept and

75
00:04:42,380 --> 00:04:49,820
complete their tasks however we cannot

76
00:04:47,130 --> 00:04:53,670
ensure that the data can be processed

77
00:04:49,820 --> 00:04:57,780
correctly in all these steps actually

78
00:04:53,670 --> 00:05:02,670
many one orbit is related to these three

79
00:04:57,780 --> 00:05:06,979
steps have been difficult and for this

80
00:05:02,670 --> 00:05:10,410
one orbit is the main issue is that the

81
00:05:06,980 --> 00:05:14,840
magnesium we mentioned about cannot pass

82
00:05:10,410 --> 00:05:17,160
and process the muffin method correctly

83
00:05:14,840 --> 00:05:20,330
for example there are many type

84
00:05:17,160 --> 00:05:24,000
confusion entities in ecstasy magnesia

85
00:05:20,330 --> 00:05:26,789
and there are also many other pts caused

86
00:05:24,000 --> 00:05:31,020
by services themselves which cannot

87
00:05:26,790 --> 00:05:33,450
process malformed data therefore the

88
00:05:31,020 --> 00:05:39,950
mango force to trigger potential boxes

89
00:05:33,450 --> 00:05:39,950
to craft those malformed match massives

90
00:05:40,460 --> 00:05:48,570
here contains in the red box our data we

91
00:05:44,190 --> 00:05:55,730
can craft including body count message

92
00:05:48,570 --> 00:06:00,210
descriptors and dictionary data based on

93
00:05:55,730 --> 00:06:03,060
this equation we do have easy but very

94
00:06:00,210 --> 00:06:06,570
efficient thousand to our pervious

95
00:06:03,060 --> 00:06:09,600
strategies are empty easy control you

96
00:06:06,570 --> 00:06:14,130
need to maintain easy to monitor and

97
00:06:09,600 --> 00:06:18,300
easy to reproduce this is architecture

98
00:06:14,130 --> 00:06:21,030
our starting to for ecstasy for the

99
00:06:18,300 --> 00:06:27,570
mutation engine we introduce a concept

100
00:06:21,030 --> 00:06:30,479
of positive random algorithm using this

101
00:06:27,570 --> 00:06:32,909
algorithm we can get a large number of

102
00:06:30,480 --> 00:06:36,630
random numbers which can help us to

103
00:06:32,910 --> 00:06:40,550
compose to the fuzzy image message and

104
00:06:36,630 --> 00:06:45,240
for one seed we can always

105
00:06:40,550 --> 00:06:48,090
get the same side Oh random number

106
00:06:45,240 --> 00:06:52,770
seconds so it can make the crash

107
00:06:48,090 --> 00:06:56,669
reproduce easily with this muffled match

108
00:06:52,770 --> 00:06:59,430
message we use a match message a kilter

109
00:06:56,670 --> 00:07:05,550
to send this message to target

110
00:06:59,430 --> 00:07:08,730
accessories and for each takis service

111
00:07:05,550 --> 00:07:11,910
we can monitor his status and x axis

112
00:07:08,730 --> 00:07:15,530
code if it crashed we can reproduce the

113
00:07:11,910 --> 00:07:18,600
seed and they reproduce the crash

114
00:07:15,530 --> 00:07:21,000
scenarios through the solid random

115
00:07:18,600 --> 00:07:28,440
number seconds which can generate which

116
00:07:21,000 --> 00:07:32,070
are generated by this seed the prasada

117
00:07:28,440 --> 00:07:35,880
number read various random algorithm

118
00:07:32,070 --> 00:07:39,090
will you'll is based on Mason twister

119
00:07:35,880 --> 00:07:43,620
algorithm which had been attainment in

120
00:07:39,090 --> 00:07:46,380
Nampa allenbury then we will repair some

121
00:07:43,620 --> 00:07:49,080
of normal normal when you squeeze with

122
00:07:46,380 --> 00:07:53,490
our first facade your random number in

123
00:07:49,080 --> 00:07:56,010
the message message body for one seed we

124
00:07:53,490 --> 00:08:04,160
limit the amount of the random numbers

125
00:07:56,010 --> 00:08:08,789
generated to fixed range such as 1024 or

126
00:08:04,160 --> 00:08:11,460
2048 because if we do not limit the

127
00:08:08,790 --> 00:08:13,740
amount it will take a long time to

128
00:08:11,460 --> 00:08:20,700
reproduce if the targeted fizzy service

129
00:08:13,740 --> 00:08:23,310
crushed our parting target are the XP

130
00:08:20,700 --> 00:08:27,420
series as we all know F Phyllis are

131
00:08:23,310 --> 00:08:31,770
managed by lambda T so we can use launch

132
00:08:27,420 --> 00:08:36,510
CTL to dump the details of this

133
00:08:31,770 --> 00:08:39,539
expeditious for each active sorry we

134
00:08:36,510 --> 00:08:47,610
utilized connection thoughts in order to

135
00:08:39,539 --> 00:08:50,250
send following match message actually in

136
00:08:47,610 --> 00:08:53,580
order to easily easily control of our

137
00:08:50,250 --> 00:08:57,000
into we robbed the man in the face

138
00:08:53,580 --> 00:08:59,610
a person script including getting the

139
00:08:57,000 --> 00:09:04,110
experience service connection event

140
00:08:59,610 --> 00:09:08,790
handler and message send functions then

141
00:09:04,110 --> 00:09:12,810
we use a person to implement the whole

142
00:09:08,790 --> 00:09:15,540
 processes from from match

143
00:09:12,810 --> 00:09:21,510
message corruption constriction and

144
00:09:15,540 --> 00:09:24,660
sends them to target accessories due to

145
00:09:21,510 --> 00:09:29,600
an explicit service may have many

146
00:09:24,660 --> 00:09:32,990
processes so we crashed so far crash

147
00:09:29,600 --> 00:09:36,930
monitoring the strategy we use T is to

148
00:09:32,990 --> 00:09:40,470
monitor the status or the of the process

149
00:09:36,930 --> 00:09:44,579
cursor for each activity FPC service if

150
00:09:40,470 --> 00:09:48,420
there is any one process exit we will

151
00:09:44,580 --> 00:09:53,130
get its access code and find whether it

152
00:09:48,420 --> 00:09:57,599
is abnormal about the finger in the

153
00:09:53,130 --> 00:10:01,320
right shoes the exit code and is

154
00:09:57,600 --> 00:10:05,490
abnormal extraction for example when you

155
00:10:01,320 --> 00:10:09,540
go to the health code 11 then

156
00:10:05,490 --> 00:10:13,080
congratulations you got an inclusion

157
00:10:09,540 --> 00:10:19,110
band excels and you can try to reproduce

158
00:10:13,080 --> 00:10:21,900
it there are also many methods to

159
00:10:19,110 --> 00:10:26,070
reproduce the crash here we list for

160
00:10:21,900 --> 00:10:29,790
including log car film carton and

161
00:10:26,070 --> 00:10:33,360
signature and seal mission before we use

162
00:10:29,790 --> 00:10:35,790
a seed based on the schedule random

163
00:10:33,360 --> 00:10:38,790
number generator with Mason twister

164
00:10:35,790 --> 00:10:41,130
algorithm to follow the targets so for

165
00:10:38,790 --> 00:10:47,640
each valve in circle we can simply save

166
00:10:41,130 --> 00:10:50,390
the cell disease in the server and no

167
00:10:47,640 --> 00:10:55,650
need to save any middle status and data

168
00:10:50,390 --> 00:11:00,240
after comparison comparison you can find

169
00:10:55,650 --> 00:11:04,560
and reproduce by seed only cost a small

170
00:11:00,240 --> 00:11:07,150
storage and it's be dispersed

171
00:11:04,560 --> 00:11:12,930
what's more is also only

172
00:11:07,150 --> 00:11:12,930
spend a little human effort than Harless

173
00:11:15,540 --> 00:11:26,860
here is so now a pity we had fun using

174
00:11:18,640 --> 00:11:29,920
these tours late 80s so live at CSR is

175
00:11:26,860 --> 00:11:32,830
the so is switch using to process font

176
00:11:29,920 --> 00:11:36,219
information we found that it has notes

177
00:11:32,830 --> 00:11:43,960
boundary check when using the memory

178
00:11:36,220 --> 00:11:48,010
copy in the in the red function this is

179
00:11:43,960 --> 00:11:53,650
the root cause analysis in the place a

180
00:11:48,010 --> 00:11:59,250
with respondent we 50/50 Sri is the copy

181
00:11:53,650 --> 00:12:04,780
size and equal to a Surrey and in the

182
00:11:59,250 --> 00:12:11,110
and in the place P frequencies and a Sri

183
00:12:04,780 --> 00:12:16,770
equal to we six and done punctures the

184
00:12:11,110 --> 00:12:24,580
color in the tents see we found and we

185
00:12:16,770 --> 00:12:27,189
84 is a size value and get from we 213

186
00:12:24,580 --> 00:12:34,360
edge however in the place of D we found

187
00:12:27,190 --> 00:12:37,630
on the we choose 238 equal to a story

188
00:12:34,360 --> 00:12:40,120
and is the message we sent from outside

189
00:12:37,630 --> 00:12:49,750
so we can control the copy side in the

190
00:12:40,120 --> 00:12:53,680
remote so it's kind now next we re let

191
00:12:49,750 --> 00:12:58,630
Chuy to introduce our smart passing X

192
00:12:53,680 --> 00:13:02,680
and you okay hello everyone this is

193
00:12:58,630 --> 00:13:08,110
about how to smart the Cunha part xnu

194
00:13:02,680 --> 00:13:12,729
okay first name is introduce how or what

195
00:13:08,110 --> 00:13:15,280
I will introduce today I will introduce

196
00:13:12,730 --> 00:13:20,050
our to appending accessing you actually

197
00:13:15,280 --> 00:13:20,890
this is a tour of porting Google's this

198
00:13:20,050 --> 00:13:23,829
color

199
00:13:20,890 --> 00:13:26,430
to support Mac OS X on you as you know

200
00:13:23,830 --> 00:13:30,220
this collar is a great tool to fast

201
00:13:26,430 --> 00:13:34,989
Cisco API is right and but it doesn't

202
00:13:30,220 --> 00:13:38,190
support fuzzing Mac OS X nu so actually

203
00:13:34,990 --> 00:13:44,170
I just paused this project to support

204
00:13:38,190 --> 00:13:49,090
axon you and in order to make this tool

205
00:13:44,170 --> 00:13:52,810
or work way and Mac OS we need to modify

206
00:13:49,090 --> 00:13:55,390
the X a new project to add some features

207
00:13:52,810 --> 00:13:59,020
for example the code coverage to make

208
00:13:55,390 --> 00:14:03,189
this tool works well okay finally I will

209
00:13:59,020 --> 00:14:09,910
give you a simple about how to route the

210
00:14:03,190 --> 00:14:13,270
Mac OS in order to make our to a walk we

211
00:14:09,910 --> 00:14:16,360
need to improve two parts the first part

212
00:14:13,270 --> 00:14:20,140
is the father the second part is Xing

213
00:14:16,360 --> 00:14:25,170
you as for the father part I wrote more

214
00:14:20,140 --> 00:14:30,640
than 500 API patents and I prefer to use

215
00:14:25,170 --> 00:14:34,719
VM fusion so I support for infusion in

216
00:14:30,640 --> 00:14:39,310
pending xnu tour and as you know we must

217
00:14:34,720 --> 00:14:44,410
implement Mac OS as cuter to ask you

218
00:14:39,310 --> 00:14:47,050
this Cisco requests the second part

219
00:14:44,410 --> 00:14:50,890
axial in order to as you know this color

220
00:14:47,050 --> 00:14:54,719
is a code coverage driven fuzzing tool

221
00:14:50,890 --> 00:14:58,569
so we must to add code coverage in

222
00:14:54,720 --> 00:15:01,930
existing Excel project and also we need

223
00:14:58,570 --> 00:15:04,420
to enable the default you know address

224
00:15:01,930 --> 00:15:09,400
sanitizer and add the current memory

225
00:15:04,420 --> 00:15:12,790
sanitizer to make it better okay this is

226
00:15:09,400 --> 00:15:17,400
a architecture of our tool and certainly

227
00:15:12,790 --> 00:15:22,480
this is almost the same of sis color and

228
00:15:17,400 --> 00:15:25,150
let me introduce the basic process step

229
00:15:22,480 --> 00:15:29,010
once the web management on the website

230
00:15:25,150 --> 00:15:33,310
will starts the current instance and the

231
00:15:29,010 --> 00:15:36,420
syntax engine in the current instance

232
00:15:33,310 --> 00:15:40,989
will notice the API patterns and the

233
00:15:36,420 --> 00:15:43,900
Koppers DP and then it will pass it will

234
00:15:40,990 --> 00:15:46,930
generate the programs and also pass the

235
00:15:43,900 --> 00:15:51,069
programs to the mutation engine to

236
00:15:46,930 --> 00:15:54,339
mutate the programs then these programs

237
00:15:51,070 --> 00:15:57,190
will be consumed by the Cisco as cuter

238
00:15:54,340 --> 00:16:00,190
the Cisco ask you they will check the

239
00:15:57,190 --> 00:16:03,760
return value to check maybe if there is

240
00:16:00,190 --> 00:16:06,850
something like heap memory unique and it

241
00:16:03,760 --> 00:16:13,870
also will get the code coverage it will

242
00:16:06,850 --> 00:16:16,120
update the cops TP and this almost the

243
00:16:13,870 --> 00:16:19,420
same with Google Scholar part the

244
00:16:16,120 --> 00:16:25,540
modules marked in green is the key

245
00:16:19,420 --> 00:16:29,979
modules or our efforts on this module ok

246
00:16:25,540 --> 00:16:32,980
I will hang up these modules later this

247
00:16:29,980 --> 00:16:37,840
is an example of the API patterns I

248
00:16:32,980 --> 00:16:43,710
wrote about 530 a pair patterns in our

249
00:16:37,840 --> 00:16:46,570
tool in such kind txt fares and another

250
00:16:43,710 --> 00:16:49,300
picture this peak the the right picture

251
00:16:46,570 --> 00:16:54,280
describes the code coverage enabled in

252
00:16:49,300 --> 00:16:57,459
the axial kernel instrument the chispa's

253
00:16:54,280 --> 00:17:03,160
and it has covered his PC stop function

254
00:16:57,460 --> 00:17:06,250
in almost every basic blocks ok so so

255
00:17:03,160 --> 00:17:10,389
this is my efforts I developed the API

256
00:17:06,250 --> 00:17:13,750
patterns and are enabled cannot read

257
00:17:10,390 --> 00:17:15,460
sanitizer as you may know the if you

258
00:17:13,750 --> 00:17:16,210
enable the default cannot address

259
00:17:15,460 --> 00:17:20,890
sanitizer

260
00:17:16,210 --> 00:17:25,890
without any modifications and Easter and

261
00:17:20,890 --> 00:17:30,100
my experiments you can't start the

262
00:17:25,890 --> 00:17:32,530
kernel and I also developed the code

263
00:17:30,100 --> 00:17:35,379
coverage sanitizer and the color memory

264
00:17:32,530 --> 00:17:38,889
sanitizer ok let's see the first part

265
00:17:35,380 --> 00:17:41,380
syntax engine and the corpus we use this

266
00:17:38,890 --> 00:17:45,340
part from 6 color so I didn't modify

267
00:17:41,380 --> 00:17:48,830
anything just a quick glance

268
00:17:45,340 --> 00:17:54,289
firstly you need to write the txt Ferris

269
00:17:48,830 --> 00:17:56,779
the API patterns in txt and called the

270
00:17:54,289 --> 00:17:59,690
says if checked and sis sistent to

271
00:17:56,779 --> 00:18:02,059
generate the code first based on the API

272
00:17:59,690 --> 00:18:05,470
patterns and then the generation engine

273
00:18:02,059 --> 00:18:07,940
will generates the programs also the

274
00:18:05,470 --> 00:18:12,710
notation engine will mutate the programs

275
00:18:07,940 --> 00:18:15,409
then these programs will deliver to the

276
00:18:12,710 --> 00:18:20,090
executor the F cuter will ask use these

277
00:18:15,409 --> 00:18:24,529
requests to fast the underlying kernel

278
00:18:20,090 --> 00:18:29,499
module xnu as for how to write these API

279
00:18:24,529 --> 00:18:29,499
patterns you can refer to these colors

280
00:18:29,980 --> 00:18:36,379
descriptions syntax and also you can

281
00:18:33,320 --> 00:18:41,210
refer to the sample text in the project

282
00:18:36,379 --> 00:18:44,719
in its corner project the second part is

283
00:18:41,210 --> 00:18:47,210
about some titles let's have a look as

284
00:18:44,720 --> 00:18:51,109
Kannamma sanitizers I listed the top

285
00:18:47,210 --> 00:18:52,700
stories integers used in my tour the

286
00:18:51,109 --> 00:18:56,749
first one is the kernel sanitizer

287
00:18:52,700 --> 00:19:00,019
courage this is most important one it is

288
00:18:56,749 --> 00:19:03,980
used to get the function level block

289
00:19:00,019 --> 00:19:06,169
level or H narrow code coverage you can

290
00:19:03,980 --> 00:19:10,519
use the LLVM to instruct mint

291
00:19:06,169 --> 00:19:13,369
instruction and the stop functions into

292
00:19:10,519 --> 00:19:15,889
every basic blocks but there is no

293
00:19:13,369 --> 00:19:18,980
existing call back or the sub functions

294
00:19:15,889 --> 00:19:22,129
in X a new project you must implement

295
00:19:18,980 --> 00:19:23,869
the car back function by yourself the

296
00:19:22,129 --> 00:19:27,799
second one is current address and it has

297
00:19:23,869 --> 00:19:32,899
a it is used to detect ER OB access use

298
00:19:27,799 --> 00:19:35,749
out of three tap of 3 and so on xn you

299
00:19:32,899 --> 00:19:39,799
has a default module you can enable it

300
00:19:35,749 --> 00:19:42,109
but it is not easily to employ it the

301
00:19:39,799 --> 00:19:44,029
second one other last one is kind of

302
00:19:42,109 --> 00:19:47,269
memories and tender there's no current

303
00:19:44,029 --> 00:19:51,320
module in xn you so you must add this

304
00:19:47,269 --> 00:19:55,549
module by yourself this module is used

305
00:19:51,320 --> 00:19:59,239
to detect or initialize the memory

306
00:19:55,549 --> 00:20:02,119
okay the first model is a code coverage

307
00:19:59,239 --> 00:20:06,259
we need to develop a new module to

308
00:20:02,119 --> 00:20:09,799
support this since this picture

309
00:20:06,259 --> 00:20:13,940
as for me I add some fields in the

310
00:20:09,799 --> 00:20:16,399
kernel struck task structure at the end

311
00:20:13,940 --> 00:20:19,730
of the instructor as someone fields such

312
00:20:16,399 --> 00:20:21,860
as cover mode cover size if you know the

313
00:20:19,730 --> 00:20:26,269
Linux okay cover model you may be very

314
00:20:21,860 --> 00:20:28,850
familiar with these fields and I also

315
00:20:26,269 --> 00:20:33,259
implements functions and it has a cover

316
00:20:28,850 --> 00:20:38,019
to its PC okay that sees this picture

317
00:20:33,259 --> 00:20:43,909
after everything done you can get the

318
00:20:38,019 --> 00:20:46,820
kernel this code coverage enabled you

319
00:20:43,909 --> 00:20:50,659
can see this scintillant characters PC

320
00:20:46,820 --> 00:20:56,168
but it's already instrumented in every

321
00:20:50,659 --> 00:20:59,269
block okay the kernel address sanitizer

322
00:20:56,169 --> 00:21:02,419
critically now provides this Colonel

323
00:20:59,269 --> 00:21:04,460
Kissel module and it works well but if

324
00:21:02,419 --> 00:21:07,789
you want to compare it by yourself

325
00:21:04,460 --> 00:21:10,279
and in stuff for me I can't compare it

326
00:21:07,789 --> 00:21:15,649
to successfully without any modification

327
00:21:10,279 --> 00:21:18,499
and next I will introduce all the Kissel

328
00:21:15,649 --> 00:21:21,379
it consists of garbage is shadow memory

329
00:21:18,499 --> 00:21:25,730
and operations it can protect gloves

330
00:21:21,379 --> 00:21:29,539
stack or and the heap memory now let's

331
00:21:25,730 --> 00:21:34,309
see how kisum protects this kind memory

332
00:21:29,539 --> 00:21:38,989
if you call the string L copy in kernel

333
00:21:34,309 --> 00:21:41,720
in xnu it actually will cause a song

334
00:21:38,989 --> 00:21:44,929
string L copy if you enable the K some

335
00:21:41,720 --> 00:21:47,779
feature and it's on string L copy will

336
00:21:44,929 --> 00:21:51,409
internally checks the shadow memory to

337
00:21:47,779 --> 00:21:55,730
check if it is nico if not it will panic

338
00:21:51,409 --> 00:21:58,879
the kernel to notify the users then you

339
00:21:55,730 --> 00:22:02,960
can get something wrong maybe you F or

340
00:21:58,879 --> 00:22:05,928
ability this is a shadow memory when you

341
00:22:02,960 --> 00:22:08,650
call some operation to allocate the

342
00:22:05,929 --> 00:22:11,559
color memory the kill zone will

343
00:22:08,650 --> 00:22:14,920
allocate additional rattles on the left

344
00:22:11,559 --> 00:22:19,570
the red red ozone and the related a

345
00:22:14,920 --> 00:22:24,070
shadow memory and if you that's these

346
00:22:19,570 --> 00:22:25,870
operations at least part of them and the

347
00:22:24,070 --> 00:22:28,780
heap memory operations there's their

348
00:22:25,870 --> 00:22:31,360
memory operation and other memory

349
00:22:28,780 --> 00:22:35,680
operations let's see an example about

350
00:22:31,360 --> 00:22:41,309
how to detect UF by using Kazan when you

351
00:22:35,680 --> 00:22:44,740
allocate of a buffer and kernel memory

352
00:22:41,309 --> 00:22:50,590
this terminated shadow memory is

353
00:22:44,740 --> 00:22:53,890
initialized as value zero and when this

354
00:22:50,590 --> 00:22:57,850
memory is freed the shadow memory value

355
00:22:53,890 --> 00:23:01,090
becomes negative value for some ffff DfE

356
00:22:57,850 --> 00:23:03,909
that's something like that and when use

357
00:23:01,090 --> 00:23:06,639
of the free you you use the freight

358
00:23:03,910 --> 00:23:09,070
buffers you needed the operation like

359
00:23:06,640 --> 00:23:11,050
string copy or memory move or something

360
00:23:09,070 --> 00:23:16,270
like that will internally checks the

361
00:23:11,050 --> 00:23:19,178
shadow memory if it is in legal the FF

362
00:23:16,270 --> 00:23:21,179
is illegal so it will open external to

363
00:23:19,179 --> 00:23:22,330
let you know there's something wrong

364
00:23:21,179 --> 00:23:24,160
okay

365
00:23:22,330 --> 00:23:29,399
the last ones the color memory sentence

366
00:23:24,160 --> 00:23:35,500
this is very simple it is used to detect

367
00:23:29,400 --> 00:23:38,400
initialized memory we just did what we

368
00:23:35,500 --> 00:23:42,820
need to do is to initialize all the

369
00:23:38,400 --> 00:23:46,570
initialized a memory so see a example

370
00:23:42,820 --> 00:23:50,490
the ko-nach can block you need just need

371
00:23:46,570 --> 00:23:54,189
to add the memo set as the end of this

372
00:23:50,490 --> 00:23:59,700
function as for me I'm Emma said all the

373
00:23:54,190 --> 00:24:03,309
new allocated heap memory to 0 to 1 u te

374
00:23:59,700 --> 00:24:09,120
fighter so now see an example this is a

375
00:24:03,309 --> 00:24:12,790
real case of ability and what I did is

376
00:24:09,120 --> 00:24:17,739
besides the km some column memories in

377
00:24:12,790 --> 00:24:21,379
it has I also add a news cisco panic all

378
00:24:17,740 --> 00:24:24,610
report so in my father

379
00:24:21,380 --> 00:24:28,490
user mode applications a father it

380
00:24:24,610 --> 00:24:33,590
attacks the congenial three bites tea

381
00:24:28,490 --> 00:24:36,559
and it will call the call my Cisco panic

382
00:24:33,590 --> 00:24:42,770
report to let me know that my father

383
00:24:36,559 --> 00:24:47,750
know there's a potential hip-hip Nick so

384
00:24:42,770 --> 00:24:51,320
you can see I lost this pinnacle log so

385
00:24:47,750 --> 00:24:54,799
it's very small and you can see that I

386
00:24:51,320 --> 00:24:58,580
use the Cisco ID here so you can get

387
00:24:54,799 --> 00:25:04,100
which cisco has the potential hip memory

388
00:24:58,580 --> 00:25:08,649
leak and this is the power the 3d buffer

389
00:25:04,100 --> 00:25:11,629
fighters okay so the conclusion is that

390
00:25:08,650 --> 00:25:17,000
if you want to make you a faster smart

391
00:25:11,630 --> 00:25:21,289
you need to use syntax and gene to know

392
00:25:17,000 --> 00:25:27,740
the APA patterns and use sanitizers to

393
00:25:21,289 --> 00:25:35,240
help detect some on penalties okay this

394
00:25:27,740 --> 00:25:37,520
is the Mac OS your case months ago I

395
00:25:35,240 --> 00:25:40,730
developed the pending aksinya version

396
00:25:37,520 --> 00:25:43,010
one means the 500 a Pierre patterns and

397
00:25:40,730 --> 00:25:47,179
is a code coverage support in xnu

398
00:25:43,010 --> 00:25:50,710
and then I started I get lots of the

399
00:25:47,179 --> 00:25:54,549
crazy crashes in the Apple xnu

400
00:25:50,710 --> 00:26:02,750
the accurate number the unique crash

401
00:25:54,549 --> 00:26:05,539
lumber is 54 most of them of type lamb

402
00:26:02,750 --> 00:26:07,850
pointer dereference and a self in you

403
00:26:05,539 --> 00:26:11,360
as you know appetizer and they recognize

404
00:26:07,850 --> 00:26:12,500
these kind of arcs as well villages so I

405
00:26:11,360 --> 00:26:17,889
did

406
00:26:12,500 --> 00:26:21,830
so about I still get some very qualified

407
00:26:17,890 --> 00:26:25,130
1p notice likes for four one three and

408
00:26:21,830 --> 00:26:26,000
four to five I combined these two are

409
00:26:25,130 --> 00:26:30,890
one bilities

410
00:26:26,000 --> 00:26:33,919
to route the necklace before 10.14 okay

411
00:26:30,890 --> 00:26:35,270
let's see these two cases the first one

412
00:26:33,919 --> 00:26:40,280
is so for for one story

413
00:26:35,270 --> 00:26:42,260
this case is used to Nick the some

414
00:26:40,280 --> 00:26:45,110
animation as the HIPAA memory for

415
00:26:42,260 --> 00:26:49,340
example it can be used to to Nixa cannot

416
00:26:45,110 --> 00:26:55,070
a PC port object and it is fixed in that

417
00:26:49,340 --> 00:26:58,760
quest 10.5 14.1 and OS 12.1 the second

418
00:26:55,070 --> 00:27:02,510
ability is a ecp type confusion when

419
00:26:58,760 --> 00:27:06,830
bility it is can be used to rights or

420
00:27:02,510 --> 00:27:10,480
free actually cannot address it is fixed

421
00:27:06,830 --> 00:27:13,550
in my class ten point fourteen point one

422
00:27:10,480 --> 00:27:17,990
okay let's see the first one ill achieve

423
00:27:13,550 --> 00:27:23,389
four four one three you can see this

424
00:27:17,990 --> 00:27:29,410
code here and occasion one the p acts

425
00:27:23,390 --> 00:27:36,070
Nance is uni a run a size zero X 300

426
00:27:29,410 --> 00:27:41,000
yeah so in my Pusey I set the oxides to

427
00:27:36,070 --> 00:27:46,040
zero X 200 so so that this instruction

428
00:27:41,000 --> 00:27:52,880
will be skipped and the access will not

429
00:27:46,040 --> 00:28:00,110
be wrong run patron and next the km log

430
00:27:52,880 --> 00:28:04,250
will allocate a kernel buffer copy start

431
00:28:00,110 --> 00:28:08,949
with size a page one page access a page

432
00:28:04,250 --> 00:28:11,390
and then it will copy the acts

433
00:28:08,950 --> 00:28:17,080
information process arguments

434
00:28:11,390 --> 00:28:24,410
information to temp buffer neither the

435
00:28:17,080 --> 00:28:27,080
tempo buffer the the 0 X 200 size temper

436
00:28:24,410 --> 00:28:33,440
power you will be copied back to the

437
00:28:27,080 --> 00:28:38,990
allocated buffer and then Nast finally

438
00:28:33,440 --> 00:28:43,960
the 0 X 200 fighters will be copied back

439
00:28:38,990 --> 00:28:48,410
to the user mode buffer but well dust

440
00:28:43,960 --> 00:28:50,990
kernel data the capital odd

441
00:28:48,410 --> 00:28:55,490
they have points actually points the

442
00:28:50,990 --> 00:28:57,020
very last zero X 200 fighters okay not

443
00:28:55,490 --> 00:29:00,110
see this picture I think this is very

444
00:28:57,020 --> 00:29:03,620
cool this one ability is very simple and

445
00:29:00,110 --> 00:29:07,370
I don't I still don't know why and you

446
00:29:03,620 --> 00:29:13,969
can see this picture this function will

447
00:29:07,370 --> 00:29:17,030
get the process ax information as at

448
00:29:13,970 --> 00:29:21,470
offset zero of the deal allocated page

449
00:29:17,030 --> 00:29:25,840
but it will return the very Nast

450
00:29:21,470 --> 00:29:29,240
zero X 200 biters back to the user mode

451
00:29:25,840 --> 00:29:32,570
in the mode application so it is very

452
00:29:29,240 --> 00:29:37,430
strange I don't know why does see how to

453
00:29:32,570 --> 00:29:42,429
exploit this case it's simple you just

454
00:29:37,430 --> 00:29:46,280
need to use the Mac message with our

455
00:29:42,430 --> 00:29:49,820
ports description this will allocate a

456
00:29:46,280 --> 00:29:52,520
buffer in color mode and a few the IP C

457
00:29:49,820 --> 00:29:55,580
port address in in the buffer then you

458
00:29:52,520 --> 00:29:59,900
can destroy the post memory by calling

459
00:29:55,580 --> 00:30:02,780
mach port destroy then finally you you

460
00:29:59,900 --> 00:30:08,330
can check the vulnerability to dig all

461
00:30:02,780 --> 00:30:12,560
this PC port color addresses you can

462
00:30:08,330 --> 00:30:15,710
catch the address in the user mode so

463
00:30:12,560 --> 00:30:18,010
you can get the you can dig the IP C

464
00:30:15,710 --> 00:30:21,890
port colored address now

465
00:30:18,010 --> 00:30:26,120
okay let's see how Apple fix this one

466
00:30:21,890 --> 00:30:30,800
bility a very single just add just add

467
00:30:26,120 --> 00:30:35,540
calling p0 if after a locate the color

468
00:30:30,800 --> 00:30:39,290
memory the page for the memory okay not

469
00:30:35,540 --> 00:30:43,940
jump to the second availability this is

470
00:30:39,290 --> 00:30:47,540
a probability of type tab confusion this

471
00:30:43,940 --> 00:30:49,060
one bility exists in a in CP module in

472
00:30:47,540 --> 00:30:53,030
xnu

473
00:30:49,060 --> 00:30:56,389
that's first thing that this is a attack

474
00:30:53,030 --> 00:30:59,980
surface one you can call NCP open and

475
00:30:56,390 --> 00:31:03,400
any CP client action api's

476
00:30:59,980 --> 00:31:08,080
to do something and incb open will

477
00:31:03,400 --> 00:31:11,350
return a handle to the colonel NEC PFD

478
00:31:08,080 --> 00:31:14,409
data and then you can use the retainer

479
00:31:11,350 --> 00:31:19,178
handle to an ECB client action to call

480
00:31:14,410 --> 00:31:22,419
sup current actions here okay let's see

481
00:31:19,179 --> 00:31:25,510
the SCP opens it will allocate a colonel

482
00:31:22,419 --> 00:31:29,020
object and you see PFD data the

483
00:31:25,510 --> 00:31:34,690
structures as follows and intervals

484
00:31:29,020 --> 00:31:36,970
stores the buffer in FG data in FP then

485
00:31:34,690 --> 00:31:40,030
it will retain the handle back to the

486
00:31:36,970 --> 00:31:42,910
user mode the you know mode application

487
00:31:40,030 --> 00:31:47,799
can then cause an ECB kind action with

488
00:31:42,910 --> 00:31:51,490
provided a handle at location a it will

489
00:31:47,799 --> 00:31:54,730
cause any CPU fund FD data according to

490
00:31:51,490 --> 00:31:59,610
the user provided the handle to find as

491
00:31:54,730 --> 00:32:03,970
a real kind of object the NEC PFD data

492
00:31:59,610 --> 00:32:07,240
okay let's see how it funds this kind of

493
00:32:03,970 --> 00:32:12,880
object according to the provided handle

494
00:32:07,240 --> 00:32:17,370
it costs the NCV fund FD data internally

495
00:32:12,880 --> 00:32:21,220
it costs LP Duke up use the handle to

496
00:32:17,370 --> 00:32:25,629
find is the kernel object FP then it

497
00:32:21,220 --> 00:32:29,380
will verify if the FP is NC PF d theta

498
00:32:25,630 --> 00:32:34,210
let's see how it verify the just verify

499
00:32:29,380 --> 00:32:38,860
if so type of found object equals with

500
00:32:34,210 --> 00:32:46,630
the type net policy okay if yes it will

501
00:32:38,860 --> 00:32:49,090
return the object as n CP fde data so

502
00:32:46,630 --> 00:32:53,910
let's have a summary here see the normal

503
00:32:49,090 --> 00:32:57,970
process you firstly calls our n CP open

504
00:32:53,910 --> 00:33:02,200
n CB oven will creates the kernel NC PFD

505
00:32:57,970 --> 00:33:05,590
data and stores it in the FP structure

506
00:33:02,200 --> 00:33:09,909
and returns the corresponding handle to

507
00:33:05,590 --> 00:33:12,449
user mode program father and then you

508
00:33:09,909 --> 00:33:13,960
can cause any CP kind action with

509
00:33:12,450 --> 00:33:20,200
returned the hen

510
00:33:13,960 --> 00:33:22,720
- cause cause sub-actions

511
00:33:20,200 --> 00:33:26,169
and this function will find that the ANC

512
00:33:22,720 --> 00:33:29,500
DFT data according to your given a given

513
00:33:26,169 --> 00:33:33,549
handle the algorithm is very simple it

514
00:33:29,500 --> 00:33:36,360
just check if the tap is thetab net

515
00:33:33,549 --> 00:33:40,110
policy if he has the real cause

516
00:33:36,360 --> 00:33:44,979
following sub kind functions

517
00:33:40,110 --> 00:33:48,549
let's see another attack service it's

518
00:33:44,980 --> 00:33:52,059
very very very similar to the first one

519
00:33:48,549 --> 00:33:54,789
just with a different name the NCVS

520
00:33:52,059 --> 00:33:56,950
session of open and the NCVS session

521
00:33:54,789 --> 00:34:00,250
action are very similar to the previous

522
00:33:56,950 --> 00:34:03,460
one the NCP in session open will crease

523
00:34:00,250 --> 00:34:05,529
the colonel object an ECB session and

524
00:34:03,460 --> 00:34:09,010
the returns the handle to the user mode

525
00:34:05,529 --> 00:34:12,359
father and then you can call any CD's

526
00:34:09,010 --> 00:34:15,399
session action to cause the following

527
00:34:12,359 --> 00:34:19,750
actions according to the return handle

528
00:34:15,399 --> 00:34:22,029
so that's similar let's see the NCP

529
00:34:19,750 --> 00:34:25,480
session opener function

530
00:34:22,030 --> 00:34:30,429
it creates the NCP session object in

531
00:34:25,480 --> 00:34:33,969
kernel and store the new allocate can

532
00:34:30,429 --> 00:34:36,700
object to F G theta in FP and then

533
00:34:33,969 --> 00:34:41,348
returns the handle back to the user

534
00:34:36,699 --> 00:34:43,989
mother father let's see incb session

535
00:34:41,349 --> 00:34:48,730
action with a given handle interviewed

536
00:34:43,989 --> 00:34:51,089
gets the or corresponding NCP session

537
00:34:48,730 --> 00:34:55,089
object and you see the session object

538
00:34:51,089 --> 00:34:59,710
let's see how it gets this object by

539
00:34:55,089 --> 00:35:03,460
your handle oh it's almost the same with

540
00:34:59,710 --> 00:35:09,730
previous function of previous one it

541
00:35:03,460 --> 00:35:13,390
also calls FP lookup to get the FPSO

542
00:35:09,730 --> 00:35:17,710
Kuna object by your handle and then it's

543
00:35:13,390 --> 00:35:22,000
verify if the prototype is detailed

544
00:35:17,710 --> 00:35:25,690
policy right if yes it will pass the it

545
00:35:22,000 --> 00:35:26,860
will recognize the fun object as any CP

546
00:35:25,690 --> 00:35:29,800
session

547
00:35:26,860 --> 00:35:32,110
okay so let's see the normal process

548
00:35:29,800 --> 00:35:35,200
you'll cause a nice even session open to

549
00:35:32,110 --> 00:35:37,360
crease the NCBI session object in kernel

550
00:35:35,200 --> 00:35:40,089
and return the handle back to the human

551
00:35:37,360 --> 00:35:43,780
father and then you cause any CP such

552
00:35:40,090 --> 00:35:46,450
action to find the kernel NCBI session

553
00:35:43,780 --> 00:35:50,080
object by the handle return handles

554
00:35:46,450 --> 00:35:53,290
internally it also it checks if the tab

555
00:35:50,080 --> 00:35:58,330
is indeed have that policy if es itical

556
00:35:53,290 --> 00:36:01,810
goes on so let's have a conclusion I

557
00:35:58,330 --> 00:36:06,460
have a summary here what we have done so

558
00:36:01,810 --> 00:36:10,390
far in a text of is one it creates a

559
00:36:06,460 --> 00:36:12,430
kernel object in cpfv data and then it

560
00:36:10,390 --> 00:36:15,279
will return the handle back to your

561
00:36:12,430 --> 00:36:19,410
father you can use the handle to call

562
00:36:15,280 --> 00:36:24,550
NCP client action the NCP

563
00:36:19,410 --> 00:36:28,839
action will check if the hello object

564
00:36:24,550 --> 00:36:33,010
tab is did have that policy if it if yes

565
00:36:28,840 --> 00:36:37,690
it will treat this object as NEC PFD

566
00:36:33,010 --> 00:36:39,640
data yes in attack service to NCP search

567
00:36:37,690 --> 00:36:44,490
session open and NCP's

568
00:36:39,640 --> 00:36:49,120
session action the almost the same

569
00:36:44,490 --> 00:36:52,990
algorithm if your handle points to a

570
00:36:49,120 --> 00:36:55,839
kernel object of type did have that

571
00:36:52,990 --> 00:37:01,270
policy it it will recognize the kind of

572
00:36:55,840 --> 00:37:04,570
object as an ECB session so you've got

573
00:37:01,270 --> 00:37:07,770
this one ability because AC PFD data is

574
00:37:04,570 --> 00:37:13,200
totally different from any CP session

575
00:37:07,770 --> 00:37:13,200
object okay surprise

576
00:37:13,350 --> 00:37:19,180
let's talk about how to exploit this

577
00:37:16,090 --> 00:37:22,840
vulnerability that are two methods the

578
00:37:19,180 --> 00:37:26,919
first one is you can create a CDF D

579
00:37:22,840 --> 00:37:30,450
theta cannot object by Connie NCP open

580
00:37:26,920 --> 00:37:35,060
and then call called the NCP session

581
00:37:30,450 --> 00:37:38,660
action instead of NCP current action

582
00:37:35,060 --> 00:37:41,180
to operate on it the second method is on

583
00:37:38,660 --> 00:37:43,819
opposite you can create a CD session

584
00:37:41,180 --> 00:37:46,850
object and cause in the current action

585
00:37:43,820 --> 00:37:51,860
instead of in series session action to

586
00:37:46,850 --> 00:37:55,460
operate on it so I I use the first one

587
00:37:51,860 --> 00:37:59,380
okay now see how I exploit step 1

588
00:37:55,460 --> 00:38:04,190
call NCP open to create the underlying

589
00:37:59,380 --> 00:38:10,460
CFG data object pay attention to the

590
00:38:04,190 --> 00:38:14,810
structure at offset 20 and 28 is update

591
00:38:10,460 --> 00:38:18,950
list field in the NCP FD data structure

592
00:38:14,810 --> 00:38:23,330
the NCP open function will initialize

593
00:38:18,950 --> 00:38:27,319
this structure and the when you observe

594
00:38:23,330 --> 00:38:30,529
20 is 0 of the initialization and the 28

595
00:38:27,320 --> 00:38:34,610
is actually a color address points to

596
00:38:30,530 --> 00:38:38,210
the update list itself so let's have a

597
00:38:34,610 --> 00:38:40,940
stage of the updates stage status you

598
00:38:38,210 --> 00:38:43,820
call any CP open and it internally will

599
00:38:40,940 --> 00:38:49,270
allocate a kernel object buffer and add

600
00:38:43,820 --> 00:38:54,290
offset 20 and the 28 you get value 0 and

601
00:38:49,270 --> 00:38:57,110
kernel address okay step 2

602
00:38:54,290 --> 00:39:03,560
call in civilization action on this

603
00:38:57,110 --> 00:39:08,030
object you can see at location P yes if

604
00:39:03,560 --> 00:39:13,880
the proc locked is false the session

605
00:39:08,030 --> 00:39:19,760
proc new your ID and the proc PID will

606
00:39:13,880 --> 00:39:23,990
be updated NASA is an easy peel session

607
00:39:19,760 --> 00:39:28,670
structure at offset 20 this value

608
00:39:23,990 --> 00:39:31,970
actually is always 0 and you can

609
00:39:28,670 --> 00:39:36,800
remember the previous picture it is

610
00:39:31,970 --> 00:39:41,480
always 0 here and since it is 0 it is

611
00:39:36,800 --> 00:39:46,490
false the proc new your ID and prop PRD

612
00:39:41,480 --> 00:39:48,730
will be updated the value is Marko

613
00:39:46,490 --> 00:39:52,640
failure uit

614
00:39:48,730 --> 00:39:55,010
so let's have the update here

615
00:39:52,640 --> 00:39:58,190
step two you call anything session

616
00:39:55,010 --> 00:40:01,400
action based on this buffer then you'll

617
00:39:58,190 --> 00:40:07,640
get the part for updated and exists 20

618
00:40:01,400 --> 00:40:12,710
also the 0 and 21 to 28 the 16 fighters

619
00:40:07,640 --> 00:40:18,410
is set to Marco fell UUID which is

620
00:40:12,710 --> 00:40:20,150
controllable by yourself okay step the

621
00:40:18,410 --> 00:40:22,660
Nestor step steps 3

622
00:40:20,150 --> 00:40:27,920
you can call in silicon action with

623
00:40:22,660 --> 00:40:31,069
action number 15 actually a new Civic

624
00:40:27,920 --> 00:40:35,690
and copy kind update in this function

625
00:40:31,070 --> 00:40:39,350
finally it will free address client

626
00:40:35,690 --> 00:40:43,160
updates and current update is the first

627
00:40:39,350 --> 00:40:45,549
element of the update list what does it

628
00:40:43,160 --> 00:40:49,910
mean that is this one

629
00:40:45,550 --> 00:40:54,160
the current update is the first element

630
00:40:49,910 --> 00:41:00,140
here so the free function actually free

631
00:40:54,160 --> 00:41:05,210
kernel address which stores in the

632
00:41:00,140 --> 00:41:09,319
starts of cell 20 so since we can

633
00:41:05,210 --> 00:41:13,730
control this new UI T so we can assess

634
00:41:09,320 --> 00:41:18,500
the macro UUID the 16 petals as a and

635
00:41:13,730 --> 00:41:24,260
here we get the we can use this

636
00:41:18,500 --> 00:41:26,900
vulnerability to free dress for one for

637
00:41:24,260 --> 00:41:30,100
one for one for one for this first about

638
00:41:26,900 --> 00:41:35,240
zero but it doesn't matter because

639
00:41:30,100 --> 00:41:40,299
almost most of the kernel objects are

640
00:41:35,240 --> 00:41:43,819
aligned with 16 so the the first path 0

641
00:41:40,300 --> 00:41:45,910
doesn't met we can control 7 pyatters of

642
00:41:43,820 --> 00:41:51,500
eight is enough

643
00:41:45,910 --> 00:41:55,250
so what we get what we get we get our

644
00:41:51,500 --> 00:41:59,390
own ability and we can free and actually

645
00:41:55,250 --> 00:42:00,880
cannot address we can control 7 biters

646
00:41:59,390 --> 00:42:04,269
of this

647
00:42:00,880 --> 00:42:09,190
the high seven vitals of this cannot

648
00:42:04,269 --> 00:42:13,439
address let's see how Apple fix it it's

649
00:42:09,190 --> 00:42:16,930
single apple just add a sub type check

650
00:42:13,440 --> 00:42:20,259
in an incident session action it acts as

651
00:42:16,930 --> 00:42:23,200
a sub check if the sub tab is still and

652
00:42:20,259 --> 00:42:29,489
in a ECB connection it as the sub check

653
00:42:23,200 --> 00:42:29,489
if the sub tab is too so everything soft

654
00:42:29,609 --> 00:42:36,910
nasty and demo I just introduced to one

655
00:42:34,630 --> 00:42:41,769
bidder is here and as the employees of

656
00:42:36,910 --> 00:42:43,509
this to one bilities as for the route

657
00:42:41,769 --> 00:42:48,249
the thought of the combined the route

658
00:42:43,509 --> 00:42:53,109
you can refer to in Buse macro portal

659
00:42:48,249 --> 00:42:58,029
Pusey you can just replace his to his to

660
00:42:53,109 --> 00:43:01,049
and below is mine and this is a demo one

661
00:42:58,029 --> 00:43:01,049
one minute demo

662
00:43:11,770 --> 00:43:14,610
sorry

663
00:43:25,040 --> 00:43:36,759
okay

664
00:43:27,020 --> 00:43:40,160
start okay this is my POC and firstly

665
00:43:36,760 --> 00:43:48,760
our activities purely private and you

666
00:43:40,160 --> 00:43:52,220
can see this is Mac OS as whisk you know

667
00:43:48,760 --> 00:43:58,390
seventeen point seven point zero and now

668
00:43:52,220 --> 00:44:02,899
the we has a comment use a panic or one

669
00:43:58,390 --> 00:44:07,279
after then we continue actually the POC

670
00:44:02,900 --> 00:44:08,210
I add a lot of the snip snip here it it

671
00:44:07,280 --> 00:44:11,330
is not a must

672
00:44:08,210 --> 00:44:16,369
I just want to want these PLC to run

673
00:44:11,330 --> 00:44:20,680
slowly to check if anything wrong I had

674
00:44:16,369 --> 00:44:20,680
a lot of service snip here

675
00:44:26,060 --> 00:44:37,130
okay you can you can already see a lot

676
00:44:29,570 --> 00:44:40,190
of the kernel address here okay press

677
00:44:37,130 --> 00:44:44,240
any key tool okay already done you can

678
00:44:40,190 --> 00:44:52,840
get root yeah the process now is this

679
00:44:44,240 --> 00:44:52,839
privilege root okay down for my demo

680
00:44:53,410 --> 00:45:02,960
let's continue okay and are almost the

681
00:45:00,170 --> 00:45:08,300
time for my sharing and this is a future

682
00:45:02,960 --> 00:45:11,060
plan of our tour I need to support in

683
00:45:08,300 --> 00:45:13,220
the future I mean as support for the

684
00:45:11,060 --> 00:45:17,540
kind of extends I means I'll control the

685
00:45:13,220 --> 00:45:20,120
driver and our kit I will add coverage

686
00:45:17,540 --> 00:45:23,540
for our kid you may know alkene is a

687
00:45:20,120 --> 00:45:26,120
closed austere binary and I still have

688
00:45:23,540 --> 00:45:29,300
plans to add the code coverage for it

689
00:45:26,120 --> 00:45:33,410
okay you can see this picture it is a

690
00:45:29,300 --> 00:45:36,260
closed hasta aqui the panel is the Apple

691
00:45:33,410 --> 00:45:40,700
FDA would module it is closed source and

692
00:45:36,260 --> 00:45:45,010
I already successfully instrument called

693
00:45:40,700 --> 00:45:51,259
courage stop functions in this binary in

694
00:45:45,010 --> 00:45:51,890
every basic blocks okay so time is

695
00:45:51,260 --> 00:45:56,420
limited

696
00:45:51,890 --> 00:46:01,120
and if you want to know more message

697
00:45:56,420 --> 00:46:05,360
from me for the later build the pinnacle

698
00:46:01,120 --> 00:46:07,460
axial or even our sister projects penny

699
00:46:05,360 --> 00:46:09,520
Cabral the panic and joy and panic are

700
00:46:07,460 --> 00:46:14,210
other things you can follow my teacher

701
00:46:09,520 --> 00:46:16,759
and also you can reply my latest tweet

702
00:46:14,210 --> 00:46:20,470
to ask her questions about my today's

703
00:46:16,760 --> 00:46:24,410
sharing okay okay acknowledgement

704
00:46:20,470 --> 00:46:27,890
certainly I'm just too a job about pot

705
00:46:24,410 --> 00:46:32,230
the Google sees colors so thanks the

706
00:46:27,890 --> 00:46:38,650
great project Cisco and stands in views

707
00:46:32,230 --> 00:46:38,650
exploit tactic okay any questions thanks

708
00:46:41,080 --> 00:46:49,360
okay if you have any questions later you

709
00:46:44,060 --> 00:46:49,360
can contact me whether Twitter

710
00:47:09,440 --> 00:47:16,700
right I would like to know yes about the

711
00:47:13,670 --> 00:47:20,050
time you you spend developing the buzzer

712
00:47:16,700 --> 00:47:23,810
and how much time do you spend to find

713
00:47:20,050 --> 00:47:26,900
that you you so much okay okay thank you

714
00:47:23,810 --> 00:47:29,330
the question is how much time I spend to

715
00:47:26,900 --> 00:47:34,190
develop the pending acts on your tour

716
00:47:29,330 --> 00:47:38,630
and how much time I fund fund the lot of

717
00:47:34,190 --> 00:47:42,320
crashes by running the tour right okay

718
00:47:38,630 --> 00:47:43,970
the first question how much time I used

719
00:47:42,320 --> 00:47:50,360
to give up with the opening acts saying

720
00:47:43,970 --> 00:47:52,910
you totally about maybe two months two

721
00:47:50,360 --> 00:47:56,420
months yes the major efforts

722
00:47:52,910 --> 00:48:01,790
I spent is focus on the acts a new

723
00:47:56,420 --> 00:48:05,300
modification and something on the father

724
00:48:01,790 --> 00:48:10,690
and how much time I found this one

725
00:48:05,300 --> 00:48:14,470
abilities actually I most of them maybe

726
00:48:10,690 --> 00:48:21,680
eighty percent of them are found in

727
00:48:14,470 --> 00:48:24,250
within two weeks and today still I can

728
00:48:21,680 --> 00:48:29,240
receive some one bilities fund by this

729
00:48:24,250 --> 00:48:33,500
tour I sent the email to my iPhone once

730
00:48:29,240 --> 00:48:38,589
it found one village so yesterday I

731
00:48:33,500 --> 00:48:41,780
received a deal in college so it is

732
00:48:38,590 --> 00:48:45,220
automation projects okay

733
00:48:41,780 --> 00:48:46,400
have I answered your question okay okay

734
00:48:45,220 --> 00:48:49,549
thank you

735
00:48:46,400 --> 00:48:54,440
there's no time or so you can ask you

736
00:48:49,550 --> 00:48:56,500
asking my questions on my tit okay thank

737
00:48:54,440 --> 00:48:56,500
you

738
00:48:58,020 --> 00:49:00,869
[Applause]

