1
00:00:00,030 --> 00:00:04,440
hi everyone thank you for coming and

2
00:00:02,639 --> 00:00:06,750
Netanya our talk we're going to talk

3
00:00:04,440 --> 00:00:08,309
about container security and how we can

4
00:00:06,750 --> 00:00:10,500
reduce the attack surface of containers

5
00:00:08,309 --> 00:00:12,690
and go beyond the standard namespace

6
00:00:10,500 --> 00:00:14,700
isolation so this is a joint work

7
00:00:12,690 --> 00:00:18,330
between Accenture lab and Stony Brook

8
00:00:14,700 --> 00:00:20,070
University and these are the people that

9
00:00:18,330 --> 00:00:22,580
contributed to this work there's myself

10
00:00:20,070 --> 00:00:25,198
there's Jay who's present here they

11
00:00:22,580 --> 00:00:26,669
we're all part of Accenture Accenture is

12
00:00:25,199 --> 00:00:28,470
a consulting company but they also do

13
00:00:26,670 --> 00:00:31,830
research so we're part of the tech lab

14
00:00:28,470 --> 00:00:33,960
of Accenture in a past life I used to

15
00:00:31,830 --> 00:00:35,910
work on mobile security I worked on car

16
00:00:33,960 --> 00:00:38,370
security assessment and also cloud and

17
00:00:35,910 --> 00:00:41,129
binary security under DARPA and I our

18
00:00:38,370 --> 00:00:42,839
patented projects and lay used to work

19
00:00:41,129 --> 00:00:46,019
on document classification machine

20
00:00:42,840 --> 00:00:47,879
learning and Nicolas is a is an

21
00:00:46,020 --> 00:00:49,170
assistant professor at Stony Brook

22
00:00:47,879 --> 00:00:50,789
University in the computer science

23
00:00:49,170 --> 00:00:53,100
department working on system security

24
00:00:50,789 --> 00:00:55,410
and in the past life we used to work

25
00:00:53,100 --> 00:00:56,910
together in this you know research

26
00:00:55,410 --> 00:00:59,279
funded programs and I'll let Jay

27
00:00:56,910 --> 00:01:01,949
introduce himself hi everyone my name is

28
00:00:59,280 --> 00:01:05,070
Jay currently I'm working in the

29
00:01:01,949 --> 00:01:08,009
container service reduction project with

30
00:01:05,069 --> 00:01:11,520
Saladin and previously I've worked on

31
00:01:08,010 --> 00:01:17,040
the blockchain security and industrial

32
00:01:11,520 --> 00:01:18,630
control system security so I assume if

33
00:01:17,040 --> 00:01:19,950
you're in the audience you probably want

34
00:01:18,630 --> 00:01:22,350
to know about container and you know

35
00:01:19,950 --> 00:01:23,939
already about it if you don't I have a

36
00:01:22,350 --> 00:01:26,429
container 101 which we'll go over

37
00:01:23,939 --> 00:01:27,479
quickly if you already know I apologize

38
00:01:26,430 --> 00:01:29,490
and if you don't know anything about

39
00:01:27,479 --> 00:01:31,470
vm's I don't have a one-on-one for VMs

40
00:01:29,490 --> 00:01:33,390
but basically the main difference here

41
00:01:31,470 --> 00:01:36,360
between virtual machines and containers

42
00:01:33,390 --> 00:01:38,460
is virtual machines can be thought of as

43
00:01:36,360 --> 00:01:39,900
a completely different system where the

44
00:01:38,460 --> 00:01:41,970
instruction gets translated by a

45
00:01:39,900 --> 00:01:44,460
hypervisor and they have their own

46
00:01:41,970 --> 00:01:46,408
kernel the downside is that they're very

47
00:01:44,460 --> 00:01:48,570
heavyweight they require a lot of

48
00:01:46,409 --> 00:01:50,460
resources on the other end of the

49
00:01:48,570 --> 00:01:53,610
spectrum you have containers they're

50
00:01:50,460 --> 00:01:55,139
more lightweight and docker is the most

51
00:01:53,610 --> 00:01:56,810
famous one but under the hood there's

52
00:01:55,140 --> 00:01:58,560
LXE there's a bunch of other

53
00:01:56,810 --> 00:02:00,659
containerization technology that could

54
00:01:58,560 --> 00:02:02,159
be used the biggest difference here is

55
00:02:00,659 --> 00:02:04,469
that you can have a host that shares the

56
00:02:02,159 --> 00:02:06,090
kernel with multiple containers of

57
00:02:04,469 --> 00:02:07,559
course there's some insulation

58
00:02:06,090 --> 00:02:09,690
properties that are handled by the

59
00:02:07,560 --> 00:02:11,730
kernel and it's done through namespaces

60
00:02:09,690 --> 00:02:14,120
relation memory space resolution and all

61
00:02:11,730 --> 00:02:14,119
these things

62
00:02:14,249 --> 00:02:18,280
why containers right what does it

63
00:02:17,079 --> 00:02:20,049
actually mean and what are the

64
00:02:18,280 --> 00:02:22,359
advantages of using containers so this

65
00:02:20,049 --> 00:02:24,670
is a this is a great picture that I have

66
00:02:22,359 --> 00:02:25,810
not done I took it from the Microsoft

67
00:02:24,670 --> 00:02:28,149
website that's where you can see the

68
00:02:25,810 --> 00:02:30,670
Visual Studio development lifecycle but

69
00:02:28,150 --> 00:02:32,049
I thought it it was very abstract enough

70
00:02:30,670 --> 00:02:34,030
that it got the point across on how

71
00:02:32,049 --> 00:02:35,680
people use containers in CIC the

72
00:02:34,030 --> 00:02:38,650
environment without giving too much

73
00:02:35,680 --> 00:02:40,659
details about it so the way people build

74
00:02:38,650 --> 00:02:42,189
containers and it can vary right they

75
00:02:40,659 --> 00:02:44,168
can be different instantiation of this

76
00:02:42,189 --> 00:02:46,150
workflow but people build their

77
00:02:44,169 --> 00:02:47,829
application they you know whether it's

78
00:02:46,150 --> 00:02:49,989
Java Python however you want to build

79
00:02:47,829 --> 00:02:52,150
your application and then they add

80
00:02:49,989 --> 00:02:53,709
docker to it once they have added docker

81
00:02:52,150 --> 00:02:55,930
support for their application and will

82
00:02:53,709 --> 00:02:57,669
go back on that one after they're on

83
00:02:55,930 --> 00:02:59,980
their application they run their test

84
00:02:57,669 --> 00:03:02,169
Suites and that's where the CI CD you

85
00:02:59,980 --> 00:03:03,849
know loop happens if the application

86
00:03:02,169 --> 00:03:06,129
behave as expected and passes all the

87
00:03:03,849 --> 00:03:07,959
tests in your Jenkins pipeline then it

88
00:03:06,129 --> 00:03:09,340
gets pushed into production or it goes

89
00:03:07,959 --> 00:03:12,010
back to the developer and the developer

90
00:03:09,340 --> 00:03:14,590
has to make changes to this to the code

91
00:03:12,010 --> 00:03:16,000
or the container support but really the

92
00:03:14,590 --> 00:03:19,720
key problem when people are building

93
00:03:16,000 --> 00:03:21,519
containers is in the second step so the

94
00:03:19,720 --> 00:03:23,949
way you add containers you know

95
00:03:21,519 --> 00:03:26,409
container support your application is by

96
00:03:23,949 --> 00:03:28,629
using a base image the base image think

97
00:03:26,409 --> 00:03:31,060
about it as your operating system for

98
00:03:28,629 --> 00:03:33,608
your container once you have this

99
00:03:31,060 --> 00:03:35,709
operating system you can actually build

100
00:03:33,609 --> 00:03:37,540
and deploy your application in it

101
00:03:35,709 --> 00:03:39,370
it's a copy-on-write file system so

102
00:03:37,540 --> 00:03:42,340
every changes that are committed on the

103
00:03:39,370 --> 00:03:44,680
file system will make a layer and then

104
00:03:42,340 --> 00:03:46,209
that becomes your image and then your

105
00:03:44,680 --> 00:03:47,769
image could get pushed to your

106
00:03:46,209 --> 00:03:49,840
enterprise repository and that becomes

107
00:03:47,769 --> 00:03:53,199
your image the problem in this loop is

108
00:03:49,840 --> 00:03:54,280
that sometimes people they build a

109
00:03:53,199 --> 00:03:56,049
container and it has all the

110
00:03:54,280 --> 00:03:58,299
dependencies for specific application

111
00:03:56,049 --> 00:04:00,250
but they overload the container image

112
00:03:58,299 --> 00:04:02,019
they build a lot of other dependencies

113
00:04:00,250 --> 00:04:03,430
so they can just use these images of

114
00:04:02,019 --> 00:04:06,280
drop-in replacement for other

115
00:04:03,430 --> 00:04:10,030
applications and sometimes they rely

116
00:04:06,280 --> 00:04:11,739
straight on public images which we'll

117
00:04:10,030 --> 00:04:14,859
see after have a lot of vulnerabilities

118
00:04:11,739 --> 00:04:16,389
as well so this is really where the key

119
00:04:14,859 --> 00:04:19,780
of the you know the source of the

120
00:04:16,389 --> 00:04:21,699
problem is so now if you think about a

121
00:04:19,779 --> 00:04:23,320
couple right let's let's be even more

122
00:04:21,699 --> 00:04:25,750
abstract you're a couple you live in a

123
00:04:23,320 --> 00:04:26,440
Great Neck mention I don't but if you do

124
00:04:25,750 --> 00:04:28,210
that that's great

125
00:04:26,440 --> 00:04:29,920
but let's say you have all these windows

126
00:04:28,210 --> 00:04:31,450
and you have all these doors that that's

127
00:04:29,920 --> 00:04:33,220
a lot of entry point for a burglar

128
00:04:31,450 --> 00:04:34,870
right somebody can you need an alarm

129
00:04:33,220 --> 00:04:37,510
system you need sensors you need all

130
00:04:34,870 --> 00:04:38,830
these things unfortunately that's the

131
00:04:37,510 --> 00:04:40,719
state of containers and application

132
00:04:38,830 --> 00:04:45,310
today there is a lot of unnecessary

133
00:04:40,720 --> 00:04:47,500
pieces and we want to D block this house

134
00:04:45,310 --> 00:04:49,540
I guess and in that case the containers

135
00:04:47,500 --> 00:04:51,070
and we want to put you in a tiny house

136
00:04:49,540 --> 00:04:52,870
that will suit your need and if you're

137
00:04:51,070 --> 00:04:54,849
probably I need something bigger than

138
00:04:52,870 --> 00:04:56,380
that but let's assume you're happy with

139
00:04:54,850 --> 00:04:59,710
this size house and you have only the

140
00:04:56,380 --> 00:05:01,360
things you need hopefully by reducing

141
00:04:59,710 --> 00:05:03,609
the size of these containers or this

142
00:05:01,360 --> 00:05:05,140
house you'll have less entry point which

143
00:05:03,610 --> 00:05:06,670
means less vulnerabilities and if

144
00:05:05,140 --> 00:05:08,409
there's less code it's just a numbers

145
00:05:06,670 --> 00:05:10,330
game right less code less bugs less

146
00:05:08,410 --> 00:05:14,710
vulnerability ideally that's the

147
00:05:10,330 --> 00:05:16,240
expected outcome so we had a hunch when

148
00:05:14,710 --> 00:05:18,039
we started this research right so we

149
00:05:16,240 --> 00:05:20,050
were using containers for other purposes

150
00:05:18,040 --> 00:05:23,440
right not necessarily doing container

151
00:05:20,050 --> 00:05:26,020
security research and we pulled images

152
00:05:23,440 --> 00:05:28,000
that were six hundred Meg's one gig and

153
00:05:26,020 --> 00:05:29,680
there's no way you need like one gig

154
00:05:28,000 --> 00:05:32,080
from my sequel or any other type of

155
00:05:29,680 --> 00:05:33,820
application right so we decided to look

156
00:05:32,080 --> 00:05:35,320
into how people are actually building

157
00:05:33,820 --> 00:05:37,120
containers and if you remember before

158
00:05:35,320 --> 00:05:40,690
this is the step to when people are

159
00:05:37,120 --> 00:05:42,970
docker to it so when you build a

160
00:05:40,690 --> 00:05:45,130
container image you start from a docker

161
00:05:42,970 --> 00:05:47,620
file on the left-hand side of this

162
00:05:45,130 --> 00:05:50,080
picture you can see the first line from

163
00:05:47,620 --> 00:05:51,520
with which is basically you declare your

164
00:05:50,080 --> 00:05:53,349
base image what is going to be the

165
00:05:51,520 --> 00:05:55,840
foundation on what this container image

166
00:05:53,350 --> 00:05:57,880
is going to rely on and hear you say

167
00:05:55,840 --> 00:06:02,650
that basically you want to bun to 16 to

168
00:05:57,880 --> 00:06:04,930
be your base foundation okay there's no

169
00:06:02,650 --> 00:06:06,580
way you need all bun 2 to run a specific

170
00:06:04,930 --> 00:06:08,290
application right you should be able to

171
00:06:06,580 --> 00:06:09,580
tailor it and trim it down to actually

172
00:06:08,290 --> 00:06:11,980
the pieces that are required for this

173
00:06:09,580 --> 00:06:13,930
application to run and then you declare

174
00:06:11,980 --> 00:06:15,640
a bunch of environment variables

175
00:06:13,930 --> 00:06:18,669
commands that you run into containers

176
00:06:15,640 --> 00:06:20,740
you can see the run up get so all of

177
00:06:18,669 --> 00:06:22,900
this operation until we reach a command

178
00:06:20,740 --> 00:06:25,180
will basically be written on the

179
00:06:22,900 --> 00:06:27,130
committed to the file system and that

180
00:06:25,180 --> 00:06:30,190
will be part of the layer and on the the

181
00:06:27,130 --> 00:06:31,750
upper right corner of this picture these

182
00:06:30,190 --> 00:06:35,590
are basically all the layers that

183
00:06:31,750 --> 00:06:37,960
composes this container image and this

184
00:06:35,590 --> 00:06:40,359
is this is really the problem that's

185
00:06:37,960 --> 00:06:43,930
where the problem starts so

186
00:06:40,360 --> 00:06:46,030
we had a hunch and we decided to to look

187
00:06:43,930 --> 00:06:47,439
into actually you know like everything

188
00:06:46,030 --> 00:06:49,719
when you do research you need to ask

189
00:06:47,439 --> 00:06:51,370
yourself is it a valid question is there

190
00:06:49,719 --> 00:06:52,810
work already done in that space and is

191
00:06:51,370 --> 00:06:56,800
there something we can do right can we

192
00:06:52,810 --> 00:06:58,389
improve on the situation so we have a we

193
00:06:56,800 --> 00:07:00,310
have actually looked and analyzed some

194
00:06:58,389 --> 00:07:02,020
darker epazote so that's not the focus

195
00:07:00,310 --> 00:07:03,879
of this work but we we literally pulled

196
00:07:02,020 --> 00:07:06,520
all the container image across version

197
00:07:03,879 --> 00:07:08,409
since the inception of docker hub and we

198
00:07:06,520 --> 00:07:09,299
decided to pull some statistics out of

199
00:07:08,409 --> 00:07:11,620
it

200
00:07:09,300 --> 00:07:13,300
so on the right hands on the left hand

201
00:07:11,620 --> 00:07:14,770
side you can see all of these packages

202
00:07:13,300 --> 00:07:17,500
so these are the top ten vulnerable

203
00:07:14,770 --> 00:07:19,359
packages some of them have literally

204
00:07:17,500 --> 00:07:24,669
thousands of vulnerability for what it

205
00:07:19,360 --> 00:07:26,770
means is if you have a lazy developer or

206
00:07:24,669 --> 00:07:28,960
not so careful developer that would just

207
00:07:26,770 --> 00:07:29,680
pull some images and run them into

208
00:07:28,960 --> 00:07:31,930
production

209
00:07:29,680 --> 00:07:34,300
you're gonna inherit the cost of

210
00:07:31,930 --> 00:07:37,270
managing fixing or patching or

211
00:07:34,300 --> 00:07:38,620
containing these vulnerabilities on the

212
00:07:37,270 --> 00:07:40,539
right hand side these are the most

213
00:07:38,620 --> 00:07:43,120
vulnerable package that are used

214
00:07:40,539 --> 00:07:44,590
currently it's not as bad a left-hand

215
00:07:43,120 --> 00:07:46,419
side right left hand side or probably

216
00:07:44,590 --> 00:07:48,489
older versions but if you look on the

217
00:07:46,419 --> 00:07:49,930
right-hand side so these are more recent

218
00:07:48,490 --> 00:07:54,669
versions and you can see that they still

219
00:07:49,930 --> 00:07:56,919
have double digits vulnerabilities so we

220
00:07:54,669 --> 00:07:58,599
looked into that you know after that we

221
00:07:56,919 --> 00:08:00,729
this is addressed some some other number

222
00:07:58,599 --> 00:08:03,580
and I'm gonna just display this picture

223
00:08:00,729 --> 00:08:06,639
for for a little bit and let it sink in

224
00:08:03,580 --> 00:08:08,318
for you so these are the top at the time

225
00:08:06,639 --> 00:08:10,210
where we conducted our experiment these

226
00:08:08,319 --> 00:08:12,339
are the top 20 docker images in use by

227
00:08:10,210 --> 00:08:14,229
the on docker hub so this means that

228
00:08:12,339 --> 00:08:16,810
these are actually probably running

229
00:08:14,229 --> 00:08:18,729
somewhere in production and we did

230
00:08:16,810 --> 00:08:20,110
really something very simple right we

231
00:08:18,729 --> 00:08:21,878
automated the pool of these containers

232
00:08:20,110 --> 00:08:24,699
we deploy them into an environment and

233
00:08:21,879 --> 00:08:26,759
then we assess the vulnerabilities using

234
00:08:24,699 --> 00:08:29,500
clear which is an open source scanner

235
00:08:26,759 --> 00:08:31,569
and you can see that some of them have

236
00:08:29,500 --> 00:08:34,690
literally triple digit vulnerabilities

237
00:08:31,569 --> 00:08:36,519
and you know and we'll see after that

238
00:08:34,690 --> 00:08:39,610
the size is pretty big for what it is

239
00:08:36,519 --> 00:08:41,529
but this really means that for us that

240
00:08:39,610 --> 00:08:42,820
there was a need and something we knew

241
00:08:41,529 --> 00:08:45,339
that we could do something in that space

242
00:08:42,820 --> 00:08:47,589
and and really there's a need nobody

243
00:08:45,339 --> 00:08:49,209
should be managing maintaining and

244
00:08:47,589 --> 00:08:50,770
paying for you know these

245
00:08:49,209 --> 00:08:52,930
vulnerabilities when you can just get

246
00:08:50,770 --> 00:08:53,920
rid of them or at least the hope is we

247
00:08:52,930 --> 00:08:56,439
can get rid of Master

248
00:08:53,920 --> 00:09:00,490
them and focus on actually the pieces

249
00:08:56,440 --> 00:09:02,320
that we care about and now I'll hand

250
00:09:00,490 --> 00:09:04,240
over to Jay and he's gonna tell you a

251
00:09:02,320 --> 00:09:10,269
little bit more in details about how we

252
00:09:04,240 --> 00:09:12,850
can address this issue thanks Ali with

253
00:09:10,269 --> 00:09:15,550
all the issue that with all the voting

254
00:09:12,850 --> 00:09:18,790
issue that oscidyne has mentioned as a

255
00:09:15,550 --> 00:09:21,609
security researcher we went to diverse

256
00:09:18,790 --> 00:09:25,990
solution to mitigate the problem so we

257
00:09:21,610 --> 00:09:30,670
tried so we want to deploy this protein

258
00:09:25,990 --> 00:09:33,040
image the concept of container is that

259
00:09:30,670 --> 00:09:37,360
each container should be designed with

260
00:09:33,040 --> 00:09:39,730
single purpose and similar to the for

261
00:09:37,360 --> 00:09:43,329
that philosophy in Unix each container

262
00:09:39,730 --> 00:09:46,089
should only be designed to execute one

263
00:09:43,329 --> 00:09:49,899
task and only do one test that we do

264
00:09:46,089 --> 00:09:52,930
that for example a container with

265
00:09:49,899 --> 00:09:55,089
webserver shouldn't be a database in the

266
00:09:52,930 --> 00:10:02,109
container which they shouldn't be a file

267
00:09:55,089 --> 00:10:04,870
file server however most of the or a lot

268
00:10:02,110 --> 00:10:06,760
of the containers we see today are built

269
00:10:04,870 --> 00:10:08,860
more like a virtual machine maybe

270
00:10:06,760 --> 00:10:11,260
because of the legacy issue how they

271
00:10:08,860 --> 00:10:15,310
convert a virtual machine to a container

272
00:10:11,260 --> 00:10:18,839
now a lot of containers actually contain

273
00:10:15,310 --> 00:10:22,500
a lot of unnecessary package or or

274
00:10:18,839 --> 00:10:25,269
components and when you add these

275
00:10:22,500 --> 00:10:27,910
unnecessary components and packaged into

276
00:10:25,269 --> 00:10:29,860
your container image while they are not

277
00:10:27,910 --> 00:10:32,380
doing doing anything for application

278
00:10:29,860 --> 00:10:35,350
they introduce a lot of vulnerabilities

279
00:10:32,380 --> 00:10:39,420
and thus the texts of the enlarged

280
00:10:35,350 --> 00:10:42,370
attack surface of the container image

281
00:10:39,420 --> 00:10:44,979
with all this problem we we are

282
00:10:42,370 --> 00:10:48,970
proposing a methodology a two-stage

283
00:10:44,980 --> 00:10:51,730
methodology to create a more secure and

284
00:10:48,970 --> 00:10:57,850
lightweight container image in the first

285
00:10:51,730 --> 00:11:00,399
stage we want to profile the normal

286
00:10:57,850 --> 00:11:03,010
workload of a container once we

287
00:11:00,399 --> 00:11:06,310
understand the normal behavior of a

288
00:11:03,010 --> 00:11:07,420
container then we can use the profile to

289
00:11:06,310 --> 00:11:09,939
build another

290
00:11:07,420 --> 00:11:13,860
smaller container image that contains

291
00:11:09,940 --> 00:11:20,290
only to function that this application

292
00:11:13,860 --> 00:11:23,680
really need so I so at the end we will

293
00:11:20,290 --> 00:11:25,410
have a smaller container image with and

294
00:11:23,680 --> 00:11:32,140
hopefully with less molar

295
00:11:25,410 --> 00:11:36,189
vulnerabilities to profile a container

296
00:11:32,140 --> 00:11:38,830
is not too different than profiling UNIX

297
00:11:36,190 --> 00:11:40,990
or Linux application we can do it from

298
00:11:38,830 --> 00:11:45,010
either users base or kernel space

299
00:11:40,990 --> 00:11:48,070
however we prefer to do it in user space

300
00:11:45,010 --> 00:11:52,990
because it is not always possible to

301
00:11:48,070 --> 00:11:56,610
make change to the kernel space one way

302
00:11:52,990 --> 00:12:00,940
we can do it in user space is using the

303
00:11:56,610 --> 00:12:03,610
system code code fan notify to get a

304
00:12:00,940 --> 00:12:06,460
callback for any file system activity

305
00:12:03,610 --> 00:12:10,660
including the file open file close or

306
00:12:06,460 --> 00:12:15,720
file read or file write very simple in

307
00:12:10,660 --> 00:12:21,100
user space and another way we can

308
00:12:15,720 --> 00:12:23,830
profile a container is using the library

309
00:12:21,100 --> 00:12:25,930
interposition so light library

310
00:12:23,830 --> 00:12:31,270
interposition is a very cool technique

311
00:12:25,930 --> 00:12:34,150
that allows us to instrument any

312
00:12:31,270 --> 00:12:36,699
function in any library however before

313
00:12:34,150 --> 00:12:39,130
you can instrument any function you need

314
00:12:36,700 --> 00:12:41,490
the the prerequisites that you need to

315
00:12:39,130 --> 00:12:45,430
know the simple name of the function and

316
00:12:41,490 --> 00:12:47,320
another concern is if you tap in if you

317
00:12:45,430 --> 00:12:49,959
instrument a function a very busy

318
00:12:47,320 --> 00:12:52,780
function or if you instrument too many

319
00:12:49,960 --> 00:12:55,750
functions at the same time it can cause

320
00:12:52,780 --> 00:12:58,810
a lot of overhead and impact the normal

321
00:12:55,750 --> 00:13:03,700
performance the normal behavior of the

322
00:12:58,810 --> 00:13:06,069
original application and in terms of the

323
00:13:03,700 --> 00:13:08,230
networking activities they are also made

324
00:13:06,070 --> 00:13:11,320
multiple options that we can tap into we

325
00:13:08,230 --> 00:13:14,200
can monitor the the the networking

326
00:13:11,320 --> 00:13:16,660
activity of a specific container on the

327
00:13:14,200 --> 00:13:18,610
left on the top left side top left hand

328
00:13:16,660 --> 00:13:21,939
side we can

329
00:13:18,610 --> 00:13:24,399
again use library interposition we can

330
00:13:21,940 --> 00:13:26,740
tap into the function that you like

331
00:13:24,399 --> 00:13:29,800
chili beef library in the container

332
00:13:26,740 --> 00:13:33,339
itself and for networking activity we

333
00:13:29,800 --> 00:13:36,399
can tap into the connect asset or pine

334
00:13:33,339 --> 00:13:38,740
network networking related functions to

335
00:13:36,399 --> 00:13:42,880
see the networking activities we can

336
00:13:38,740 --> 00:13:44,740
also tap into the networking interface

337
00:13:42,880 --> 00:13:47,589
eth0 or eth1

338
00:13:44,740 --> 00:13:49,510
directly inside the container or inside

339
00:13:47,589 --> 00:13:52,540
the container and networking network

340
00:13:49,510 --> 00:13:55,360
name space and we can use act we can

341
00:13:52,540 --> 00:13:58,060
actually round like TC to attack TCP

342
00:13:55,360 --> 00:14:01,029
dump directly in the specific narrow

343
00:13:58,060 --> 00:14:06,130
space and another option is to actually

344
00:14:01,029 --> 00:14:08,170
tap from the host itself in terms of

345
00:14:06,130 --> 00:14:10,600
attacker they usually create a bridge

346
00:14:08,170 --> 00:14:13,660
between the container network namespace

347
00:14:10,600 --> 00:14:16,660
and the host network namespace and we

348
00:14:13,660 --> 00:14:18,490
can tap into that bridge on the host

349
00:14:16,660 --> 00:14:22,630
directory and see all the traffic

350
00:14:18,490 --> 00:14:31,149
between the container and and the hosts

351
00:14:22,630 --> 00:14:34,420
to recap our methodology we want to find

352
00:14:31,149 --> 00:14:36,820
a way to profile a container in user

353
00:14:34,420 --> 00:14:39,689
space we can use either library

354
00:14:36,820 --> 00:14:42,940
interposition or leverage the existing

355
00:14:39,690 --> 00:14:50,560
system called API to get event

356
00:14:42,940 --> 00:14:53,860
notification and there is a limitation

357
00:14:50,560 --> 00:14:56,500
so in our first face that we have

358
00:14:53,860 --> 00:14:59,230
completed today is that we can profile

359
00:14:56,500 --> 00:15:01,839
an application using these techniques

360
00:14:59,230 --> 00:15:04,709
and based on the profile we can build

361
00:15:01,839 --> 00:15:07,779
another people that reduce the image

362
00:15:04,709 --> 00:15:09,760
that can support only the functions

363
00:15:07,779 --> 00:15:12,459
observed during the profiling process

364
00:15:09,760 --> 00:15:15,519
however there is a limitation or a

365
00:15:12,459 --> 00:15:17,589
container is as good as the profiling if

366
00:15:15,519 --> 00:15:21,790
there is anything that we did not

367
00:15:17,589 --> 00:15:23,800
observe during the profiling process the

368
00:15:21,790 --> 00:15:25,959
deposit that reduced container will not

369
00:15:23,800 --> 00:15:28,779
be able to support those function that's

370
00:15:25,959 --> 00:15:31,640
why we we are aiming for them in the

371
00:15:28,779 --> 00:15:36,280
second phase we want to do a

372
00:15:31,640 --> 00:15:39,980
genius monitoring in production and

373
00:15:36,280 --> 00:15:46,640
provide a continuous refinement for the

374
00:15:39,980 --> 00:15:51,400
deposit image as well now I'm going to

375
00:15:46,640 --> 00:15:51,400
do a quick demo to show how our

376
00:15:52,420 --> 00:15:59,959
container D protein technique can help

377
00:15:56,090 --> 00:16:04,690
reduce attack surface of container and

378
00:15:59,960 --> 00:16:04,690
this is a live demo I hope you can work

379
00:16:16,610 --> 00:16:26,550
this looks better so the specific

380
00:16:24,720 --> 00:16:30,470
epicness a specific container

381
00:16:26,550 --> 00:16:30,469
application I'm using today is worpress

382
00:16:39,830 --> 00:16:46,050
so i'm start i'm starting the war press

383
00:16:43,290 --> 00:16:51,120
up a patient normally in trying to load

384
00:16:46,050 --> 00:16:55,079
this load the web web page then there

385
00:16:51,120 --> 00:16:58,560
were is there will be slow here and okay

386
00:16:55,080 --> 00:17:02,280
this is a homepage and i'm going to look

387
00:16:58,560 --> 00:17:06,929
at adam insight and one thing i want to

388
00:17:02,280 --> 00:17:08,550
point out here is the plugin in the

389
00:17:06,930 --> 00:17:11,160
wordpress container now there are

390
00:17:08,550 --> 00:17:13,220
currently three proteins and none of

391
00:17:11,160 --> 00:17:16,770
this protein are actually activated

392
00:17:13,220 --> 00:17:19,620
however we know there are no funner

393
00:17:16,770 --> 00:17:21,599
abilities in this protein and i'm going

394
00:17:19,619 --> 00:17:24,989
to show you that even without this

395
00:17:21,599 --> 00:17:30,090
plug-in activated we can still exploit

396
00:17:24,990 --> 00:17:37,670
this vulnerability so in this terminal

397
00:17:30,090 --> 00:17:42,060
I'm going to run a simple command to

398
00:17:37,670 --> 00:17:44,520
leverage a vulnerability and upload a

399
00:17:42,060 --> 00:17:48,690
script file that allow us to explore the

400
00:17:44,520 --> 00:17:52,160
container file system so now I have

401
00:17:48,690 --> 00:17:52,160
successfully upload a file

402
00:17:53,450 --> 00:18:06,420
next I will try to access this file from

403
00:18:01,050 --> 00:18:09,290
here so this is a script that I just

404
00:18:06,420 --> 00:18:11,940
uploaded and with this script running

405
00:18:09,290 --> 00:18:14,700
basically the attacker can do anything

406
00:18:11,940 --> 00:18:19,650
in the container download edit or delete

407
00:18:14,700 --> 00:18:26,640
any file and any command can also be

408
00:18:19,650 --> 00:18:29,250
wrong here so we see the

409
00:18:26,640 --> 00:18:34,530
the issue here and next I'm going to

410
00:18:29,250 --> 00:18:43,530
show you how our deporting methodology

411
00:18:34,530 --> 00:18:45,750
can help mitigate the issue so I'm going

412
00:18:43,530 --> 00:18:48,690
to run I'm going to start a container

413
00:18:45,750 --> 00:18:53,340
again but with our profiler running in

414
00:18:48,690 --> 00:18:57,450
the background so I start the container

415
00:18:53,340 --> 00:19:01,080
again refresh let me go back to the home

416
00:18:57,450 --> 00:19:04,440
page and why I'm doing now is to

417
00:19:01,080 --> 00:19:09,418
simulate a system that mean and suppose

418
00:19:04,440 --> 00:19:10,860
there are only few few features few

419
00:19:09,419 --> 00:19:18,870
functions that is sittin at the mean

420
00:19:10,860 --> 00:19:24,719
actually need in the admin site so

421
00:19:18,870 --> 00:19:29,280
trying to log in it's a very simple

422
00:19:24,720 --> 00:19:31,350
password and let's assume that all that

423
00:19:29,280 --> 00:19:35,910
mean care is to see if there is any

424
00:19:31,350 --> 00:19:39,270
update in this website and if there is

425
00:19:35,910 --> 00:19:41,340
any post from the guest and let's assume

426
00:19:39,270 --> 00:19:48,240
that all the admin care about this

427
00:19:41,340 --> 00:19:50,970
website and now let's look at what

428
00:19:48,240 --> 00:19:54,360
output not terminate the profiler and

429
00:19:50,970 --> 00:19:59,520
look at exactly what profiler has

430
00:19:54,360 --> 00:20:02,040
created so this is one of the output

431
00:19:59,520 --> 00:20:04,889
file of the profiler in this file it

432
00:20:02,040 --> 00:20:08,250
shows all the files that the container

433
00:20:04,890 --> 00:20:10,710
has touched so it started from the

434
00:20:08,250 --> 00:20:14,160
Packer entry point where the container

435
00:20:10,710 --> 00:20:16,679
start to the point where the WordPress

436
00:20:14,160 --> 00:20:21,110
application actually wrong without the

437
00:20:16,679 --> 00:20:21,110
PHP for PHP file being assessed and

438
00:20:23,130 --> 00:20:33,070
with this profile we can now build

439
00:20:27,280 --> 00:20:37,090
another reduce or deported image that

440
00:20:33,070 --> 00:20:41,320
hopefully contains less vulnerabilities

441
00:20:37,090 --> 00:20:45,010
and with less component in it so I'm

442
00:20:41,320 --> 00:20:48,570
building the image now here we go the

443
00:20:45,010 --> 00:20:52,450
the image build less than a second ago I

444
00:20:48,570 --> 00:20:52,840
actually want to show the size okay here

445
00:20:52,450 --> 00:20:55,990
we go

446
00:20:52,840 --> 00:20:59,139
the size is eighty nine point one

447
00:20:55,990 --> 00:21:01,030
megabyte it's called WordPress our edu

448
00:20:59,140 --> 00:21:03,220
reduced version comparing to the

449
00:21:01,030 --> 00:21:05,950
original WordPress container which is

450
00:21:03,220 --> 00:21:09,610
four hundred and seven megabyte we have

451
00:21:05,950 --> 00:21:13,810
approximately 80% of a size reduction

452
00:21:09,610 --> 00:21:17,979
and now let me try to run this reduced

453
00:21:13,810 --> 00:21:24,870
version to see if the intended function

454
00:21:17,980 --> 00:21:24,870
still work go back to the home page

455
00:21:26,880 --> 00:21:39,130
it'll be slow but loaded successfully

456
00:21:30,750 --> 00:21:42,160
login so the admin page is still there

457
00:21:39,130 --> 00:21:46,180
and let me see if I can still check the

458
00:21:42,160 --> 00:21:49,210
update yes and let me check if I can

459
00:21:46,180 --> 00:21:52,060
still read the post yes but now let me

460
00:21:49,210 --> 00:21:56,170
try to do some abnormal behavior if I

461
00:21:52,060 --> 00:21:59,050
want to activate one of the protein it

462
00:21:56,170 --> 00:22:04,630
is not working because we have remove

463
00:21:59,050 --> 00:22:08,379
the function needed by this by this link

464
00:22:04,630 --> 00:22:11,800
or if we check the users no longer

465
00:22:08,380 --> 00:22:16,900
available and I'm going to show let's

466
00:22:11,800 --> 00:22:19,960
write the same exploit again the result

467
00:22:16,900 --> 00:22:22,540
is 4/4 not found this is because during

468
00:22:19,960 --> 00:22:28,570
our D protein process the vulnerable PHP

469
00:22:22,540 --> 00:22:32,889
file has been removed finally I'm going

470
00:22:28,570 --> 00:22:36,340
to show a cup of a comparison

471
00:22:32,890 --> 00:22:43,120
the vulnerability before and after our

472
00:22:36,340 --> 00:22:45,040
deporting process so there are 180 a non

473
00:22:43,120 --> 00:22:49,090
vulnerabilities in the WordPress

474
00:22:45,040 --> 00:22:53,620
container and after the deporting

475
00:22:49,090 --> 00:22:56,169
process we have zero number of

476
00:22:53,620 --> 00:23:00,010
vulnerability don't be too excited this

477
00:22:56,170 --> 00:23:02,440
is too good to be true and there's no

478
00:23:00,010 --> 00:23:05,200
way we can remove hundred percent of the

479
00:23:02,440 --> 00:23:07,570
vulnerability the reason is that during

480
00:23:05,200 --> 00:23:10,540
our deporting process we also remove

481
00:23:07,570 --> 00:23:13,149
some of the components required by the

482
00:23:10,540 --> 00:23:15,190
vulnerability scanner to identify the

483
00:23:13,150 --> 00:23:17,050
installed package and the

484
00:23:15,190 --> 00:23:19,510
vulnerabilities so that's what happened

485
00:23:17,050 --> 00:23:23,110
not I mean we are not saying that we can

486
00:23:19,510 --> 00:23:26,470
remove 100% of the owner abilities and

487
00:23:23,110 --> 00:23:29,679
with that having impact as a teen to

488
00:23:26,470 --> 00:23:31,030
talk more about the detail okay so a cat

489
00:23:29,680 --> 00:23:33,190
must have died somewhere because our

490
00:23:31,030 --> 00:23:35,290
demo worked so somebody made a sacrifice

491
00:23:33,190 --> 00:23:37,720
that's good thank you

492
00:23:35,290 --> 00:23:39,580
now if you if you guys remember what we

493
00:23:37,720 --> 00:23:43,990
said before about our top 20 docker

494
00:23:39,580 --> 00:23:46,600
images we actually we actually applied

495
00:23:43,990 --> 00:23:48,280
the same method the graph is not as ugly

496
00:23:46,600 --> 00:23:50,649
as it is here as it is on my screen but

497
00:23:48,280 --> 00:23:52,780
you'll have to trust me on that so

498
00:23:50,650 --> 00:23:54,550
basically here we we took the top 20

499
00:23:52,780 --> 00:23:56,710
docker images that we've had before and

500
00:23:54,550 --> 00:23:59,919
we've run them through our the blotting

501
00:23:56,710 --> 00:24:01,150
process and and here are the results so

502
00:23:59,920 --> 00:24:03,960
I'm just going to give you a couple of

503
00:24:01,150 --> 00:24:05,980
highlights so the light blue bar I

504
00:24:03,960 --> 00:24:08,560
notated at the top it's the original

505
00:24:05,980 --> 00:24:11,470
size of the container if you look at the

506
00:24:08,560 --> 00:24:14,290
green bars this is the reduced size this

507
00:24:11,470 --> 00:24:16,120
is after we've processed them and you

508
00:24:14,290 --> 00:24:18,220
can see there's a significant size

509
00:24:16,120 --> 00:24:20,500
difference and then the dark blue bars

510
00:24:18,220 --> 00:24:23,080
are the original vulnerabilities and

511
00:24:20,500 --> 00:24:25,450
then the the red bar which you cannot

512
00:24:23,080 --> 00:24:28,840
see because there's zero or the reduced

513
00:24:25,450 --> 00:24:31,060
vulnerabilities right so I'm I'm not

514
00:24:28,840 --> 00:24:32,290
selling you snake holes right it is it

515
00:24:31,060 --> 00:24:34,210
is not possible to achieve zero

516
00:24:32,290 --> 00:24:36,909
vulnerabilities and now we're going to

517
00:24:34,210 --> 00:24:39,820
expand on to why this is happening but

518
00:24:36,910 --> 00:24:41,440
across the board we've observed an

519
00:24:39,820 --> 00:24:43,600
average size reduction anywhere between

520
00:24:41,440 --> 00:24:46,360
60 and 90 percent depending on the

521
00:24:43,600 --> 00:24:49,030
application and we've observed

522
00:24:46,360 --> 00:24:51,520
by our own tests right about same thing

523
00:24:49,030 --> 00:24:55,899
60 to 80% of vulnerability reduction not

524
00:24:51,520 --> 00:24:57,790
100% but it's still a decent amount now

525
00:24:55,900 --> 00:24:59,950
let me let me explain you why we have

526
00:24:57,790 --> 00:25:01,960
zero vulnerabilities and why if you run

527
00:24:59,950 --> 00:25:03,580
that at home you probably are going to

528
00:25:01,960 --> 00:25:07,990
end up having zero vulnerabilities as

529
00:25:03,580 --> 00:25:10,270
well so you guys are not familiar with

530
00:25:07,990 --> 00:25:13,090
overall definition so it's just a way

531
00:25:10,270 --> 00:25:14,980
some UNIX or Linux distributions are

532
00:25:13,090 --> 00:25:17,169
sharing information about the CVE the

533
00:25:14,980 --> 00:25:19,330
severity the package name and which

534
00:25:17,170 --> 00:25:22,750
version of package or packages are

535
00:25:19,330 --> 00:25:25,360
affected by a certain CD and this is

536
00:25:22,750 --> 00:25:28,840
what you know and this is how vulnerable

537
00:25:25,360 --> 00:25:31,149
T scanners are working most of them they

538
00:25:28,840 --> 00:25:33,100
rely on some information about the Linux

539
00:25:31,150 --> 00:25:34,660
distribution or the package manager that

540
00:25:33,100 --> 00:25:36,969
handles it so if you use Ubuntu or

541
00:25:34,660 --> 00:25:40,990
Debian it's apt if you send to s its yum

542
00:25:36,970 --> 00:25:43,090
and then it tries to cross check and and

543
00:25:40,990 --> 00:25:45,490
you see by cross check it's very it's

544
00:25:43,090 --> 00:25:47,080
very shallow what they're doing they try

545
00:25:45,490 --> 00:25:48,850
to identify what you have installed on

546
00:25:47,080 --> 00:25:51,540
your system with what is actually

547
00:25:48,850 --> 00:25:55,120
presenting this over all definitions and

548
00:25:51,540 --> 00:25:57,550
sometimes it is as shaky as a regular

549
00:25:55,120 --> 00:26:00,040
expression right so they they tokenize

550
00:25:57,550 --> 00:26:01,659
the the entry into the the package

551
00:26:00,040 --> 00:26:03,940
manager list of files that are installed

552
00:26:01,660 --> 00:26:05,710
they extract the package version the

553
00:26:03,940 --> 00:26:08,920
name and then based on that they match

554
00:26:05,710 --> 00:26:11,020
it with a novel definition okay doesn't

555
00:26:08,920 --> 00:26:14,670
take a genius to understand that these

556
00:26:11,020 --> 00:26:16,990
kind of tests are not very accurate

557
00:26:14,670 --> 00:26:18,940
because if you've installed something

558
00:26:16,990 --> 00:26:21,130
outside of your package manager it's not

559
00:26:18,940 --> 00:26:23,020
going to be listed there if you change

560
00:26:21,130 --> 00:26:24,970
the file or if you don't have the same

561
00:26:23,020 --> 00:26:29,530
file that is described in the overall

562
00:26:24,970 --> 00:26:31,900
definition again it's gonna fail so

563
00:26:29,530 --> 00:26:33,550
again this is a I think this is a

564
00:26:31,900 --> 00:26:36,040
research so we can its own but we did

565
00:26:33,550 --> 00:26:38,740
our best effort and we actually tried a

566
00:26:36,040 --> 00:26:40,899
lot of leading security container of

567
00:26:38,740 --> 00:26:43,120
vulnerability solutions not gonna

568
00:26:40,900 --> 00:26:45,400
mention any names but I'm sure you've

569
00:26:43,120 --> 00:26:47,020
used them if you use containers but

570
00:26:45,400 --> 00:26:49,360
really what these tools are creating

571
00:26:47,020 --> 00:26:51,670
today is a false sense of security right

572
00:26:49,360 --> 00:26:54,310
you try you test you assume that your

573
00:26:51,670 --> 00:26:57,730
image is clean or clean enough to be run

574
00:26:54,310 --> 00:26:59,690
in production but the reality is you

575
00:26:57,730 --> 00:27:01,070
cannot really trust these tools

576
00:26:59,690 --> 00:27:03,320
and these are just some of the examples

577
00:27:01,070 --> 00:27:06,129
right if you you know for some reason

578
00:27:03,320 --> 00:27:08,840
they don't work with fedora or Sue's

579
00:27:06,129 --> 00:27:11,090
package manager they just can't detect

580
00:27:08,840 --> 00:27:13,399
some vulnerabilities and I say when I

581
00:27:11,090 --> 00:27:16,100
say must it's really must not all of

582
00:27:13,399 --> 00:27:18,018
them but close enough and if you have

583
00:27:16,100 --> 00:27:19,668
malware into your image right you'd

584
00:27:18,019 --> 00:27:21,649
think they would pull some hash from

585
00:27:19,669 --> 00:27:23,330
virustotal or something to assess them

586
00:27:21,649 --> 00:27:26,809
no they don't they really just rely on

587
00:27:23,330 --> 00:27:28,428
package manager and oval definitions and

588
00:27:26,809 --> 00:27:29,779
now let me tell you how you can be a

589
00:27:28,429 --> 00:27:33,889
talented hacker in the world of

590
00:27:29,779 --> 00:27:37,340
containers just change the file name all

591
00:27:33,889 --> 00:27:40,459
of them do not detect it seriously I'm

592
00:27:37,340 --> 00:27:42,590
not kidding it is that sad but basically

593
00:27:40,460 --> 00:27:44,029
this is the problem right the the way

594
00:27:42,590 --> 00:27:46,490
these container testing tools are

595
00:27:44,029 --> 00:27:49,159
working is very simple and naive and

596
00:27:46,490 --> 00:27:53,409
there's a lot of ways to bypass them I'm

597
00:27:49,159 --> 00:27:55,970
sure the bad guys figure that out too so

598
00:27:53,409 --> 00:27:57,970
we presented you a solution right where

599
00:27:55,970 --> 00:28:01,159
we actually look at the application

600
00:27:57,970 --> 00:28:02,600
running within a container identify the

601
00:28:01,159 --> 00:28:04,730
components that are required for this

602
00:28:02,600 --> 00:28:08,719
application to perform and strip down

603
00:28:04,730 --> 00:28:11,210
the rest right and if you're in a you

604
00:28:08,720 --> 00:28:13,039
know higher functions I guess and you're

605
00:28:11,210 --> 00:28:15,289
close to the corporate overlord you can

606
00:28:13,039 --> 00:28:17,179
see how it is a problem right so our

607
00:28:15,289 --> 00:28:18,620
corporate Overlord we're like there's no

608
00:28:17,179 --> 00:28:20,120
way we cannot change the containers you

609
00:28:18,620 --> 00:28:21,590
cannot change the structure and

610
00:28:20,120 --> 00:28:23,418
everything that is hash based is going

611
00:28:21,590 --> 00:28:27,080
to be an issue so you need to find

612
00:28:23,419 --> 00:28:29,690
something that actually works for us so

613
00:28:27,080 --> 00:28:31,789
what we did is okay instead of removing

614
00:28:29,690 --> 00:28:33,230
everything if you know that all the

615
00:28:31,789 --> 00:28:35,000
things that are required you can just

616
00:28:33,230 --> 00:28:38,059
generate a whitelisting policy and

617
00:28:35,000 --> 00:28:40,279
that's a way it's a cheap way to contain

618
00:28:38,059 --> 00:28:41,990
the vulnerabilities because they cannot

619
00:28:40,279 --> 00:28:45,009
be exploited because you have a policy

620
00:28:41,990 --> 00:28:47,509
that denies access to these functions

621
00:28:45,009 --> 00:28:50,870
and I'm sure you're aware of mandatory

622
00:28:47,509 --> 00:28:52,850
access controls right so the only

623
00:28:50,870 --> 00:28:55,070
problem right is when you do if you guys

624
00:28:52,850 --> 00:28:57,168
have tried to write SELinux policy or

625
00:28:55,070 --> 00:28:58,700
up-armored you can you can see that

626
00:28:57,169 --> 00:29:00,500
there's a lot of issues with the special

627
00:28:58,700 --> 00:29:02,480
files right proc if you want to read

628
00:29:00,500 --> 00:29:05,330
some kernel exposed information in user

629
00:29:02,480 --> 00:29:06,679
space that is an issue how to write

630
00:29:05,330 --> 00:29:08,629
policies you need to be it's a little

631
00:29:06,679 --> 00:29:10,730
bit tricky there's a runtime overhead

632
00:29:08,629 --> 00:29:12,379
the more rules you have and if you write

633
00:29:10,730 --> 00:29:14,000
them naively

634
00:29:12,380 --> 00:29:15,950
I mean if you have a rule that applies

635
00:29:14,000 --> 00:29:17,300
to each files instead of having a rule

636
00:29:15,950 --> 00:29:19,580
that applied to the directory and the

637
00:29:17,300 --> 00:29:21,919
sub components that also generates a lot

638
00:29:19,580 --> 00:29:23,540
of overhead so there's a there's some

639
00:29:21,920 --> 00:29:25,460
tweaks and optimization that you can do

640
00:29:23,540 --> 00:29:27,350
but the bright side is you really have

641
00:29:25,460 --> 00:29:29,480
fine-grained control on the operations

642
00:29:27,350 --> 00:29:31,219
that run within your container you can

643
00:29:29,480 --> 00:29:33,020
you know whitelist file and and we'll

644
00:29:31,220 --> 00:29:35,870
show an example you can grant

645
00:29:33,020 --> 00:29:37,460
capabilities and also your corporate

646
00:29:35,870 --> 00:29:39,020
overlords are happy because the

647
00:29:37,460 --> 00:29:40,340
containers hasn't been touched the

648
00:29:39,020 --> 00:29:41,600
hashes are the same and you've

649
00:29:40,340 --> 00:29:44,290
maintained the integrity of whatever

650
00:29:41,600 --> 00:29:48,889
container image you were working on and

651
00:29:44,290 --> 00:29:50,389
this is just a recap of the the type of

652
00:29:48,890 --> 00:29:52,070
permissions that you could enforce with

653
00:29:50,390 --> 00:29:53,840
Mac and and the interesting one is the

654
00:29:52,070 --> 00:29:55,850
capabilities right you can limit also

655
00:29:53,840 --> 00:29:59,179
the capabilities that you offer to an

656
00:29:55,850 --> 00:30:00,800
application and today we feel really

657
00:29:59,180 --> 00:30:02,720
lucky because we're gonna try again

658
00:30:00,800 --> 00:30:05,680
another live demo and hopefully it

659
00:30:02,720 --> 00:30:05,680
doesn't fail

660
00:30:13,430 --> 00:30:20,000
so I'm going to drown around the very

661
00:30:17,390 --> 00:30:21,650
similar demo again but with the only

662
00:30:20,000 --> 00:30:26,080
difference is that this time we were

663
00:30:21,650 --> 00:30:28,910
used mandatory access control policy to

664
00:30:26,080 --> 00:30:30,949
secure a container instead of actually

665
00:30:28,910 --> 00:30:32,360
remove the component inside the

666
00:30:30,950 --> 00:30:34,550
container we will be around the same

667
00:30:32,360 --> 00:30:36,469
container but instead using the same

668
00:30:34,550 --> 00:30:40,520
power file we will generate a set of

669
00:30:36,470 --> 00:30:43,930
policy to limit the file access

670
00:30:40,520 --> 00:30:43,930
permission inside the container

671
00:31:01,340 --> 00:31:06,720
so I'm against starting the container

672
00:31:04,919 --> 00:31:09,840
with the profiler running in the

673
00:31:06,720 --> 00:31:16,309
background and I'm going to simulate the

674
00:31:09,840 --> 00:31:16,309
normal the normal user activities again

675
00:31:18,080 --> 00:31:38,399
we first look and log in again and I'm

676
00:31:35,730 --> 00:31:39,840
going to perform the same to two

677
00:31:38,399 --> 00:31:45,178
functions that the system that means

678
00:31:39,840 --> 00:31:47,428
suppose only need check the update check

679
00:31:45,179 --> 00:31:52,049
if there's any security update and check

680
00:31:47,429 --> 00:31:54,119
the latest post from the guest and local

681
00:31:52,049 --> 00:31:55,769
that's it suppose these are the only two

682
00:31:54,119 --> 00:32:00,029
function that the system that emitted

683
00:31:55,769 --> 00:32:03,119
mean neat I'm going to terminate the

684
00:32:00,029 --> 00:32:06,840
application and the profiler and show

685
00:32:03,119 --> 00:32:10,529
you exactly how the profile look this

686
00:32:06,840 --> 00:32:14,428
time so again this is one of the profile

687
00:32:10,529 --> 00:32:16,169
that generated based on the file system

688
00:32:14,429 --> 00:32:19,200
activity this time we collect a little

689
00:32:16,169 --> 00:32:22,200
bit more information we also collect the

690
00:32:19,200 --> 00:32:25,440
file permission and also the the type of

691
00:32:22,200 --> 00:32:28,799
access previously we can when we do

692
00:32:25,440 --> 00:32:31,440
protein and a container a file is either

693
00:32:28,799 --> 00:32:33,570
available or not but this time when of

694
00:32:31,440 --> 00:32:35,460
all the files are available but we can

695
00:32:33,570 --> 00:32:38,668
actually provide more granular control

696
00:32:35,460 --> 00:32:41,159
to each specific file we can specify

697
00:32:38,669 --> 00:32:43,649
specify if this file has read access

698
00:32:41,159 --> 00:32:46,769
right as as executable access memory

699
00:32:43,649 --> 00:32:49,168
location or linkable access so which

700
00:32:46,769 --> 00:32:53,249
policy we can create more granular

701
00:32:49,169 --> 00:32:57,690
control to each file and with this

702
00:32:53,249 --> 00:33:01,649
profile we can generate a set of policy

703
00:32:57,690 --> 00:33:04,769
that I will show you next so this is

704
00:33:01,649 --> 00:33:07,109
basically the policy that why list the

705
00:33:04,769 --> 00:33:10,139
files in the WordPress container and

706
00:33:07,109 --> 00:33:12,260
this policy basically will only allow

707
00:33:10,139 --> 00:33:15,629
the

708
00:33:12,260 --> 00:33:25,520
the function that we observed during the

709
00:33:15,630 --> 00:33:28,470
profiling process now let's run the same

710
00:33:25,520 --> 00:33:40,020
container application again with this

711
00:33:28,470 --> 00:33:49,550
policy deployed in the kernel know the

712
00:33:40,020 --> 00:33:54,450
home page and login and let's see if the

713
00:33:49,550 --> 00:33:58,950
intended functions to your work check

714
00:33:54,450 --> 00:34:01,980
the update check the post and let's see

715
00:33:58,950 --> 00:34:05,010
if we can do any user check any user

716
00:34:01,980 --> 00:34:07,260
know the page is not available and this

717
00:34:05,010 --> 00:34:09,630
time we get a slightly different error

718
00:34:07,260 --> 00:34:12,060
message instead of saying for for not

719
00:34:09,630 --> 00:34:14,400
available this time we get a permission

720
00:34:12,060 --> 00:34:18,090
denied because the file is still there

721
00:34:14,400 --> 00:34:20,760
but we simply enforce the policy to deny

722
00:34:18,090 --> 00:34:23,640
the access to this specific file and

723
00:34:20,760 --> 00:34:27,630
similarly if I try to pour the same

724
00:34:23,639 --> 00:34:29,668
attack the same exploit again I'm

725
00:34:27,630 --> 00:34:31,890
successful and we get a different error

726
00:34:29,668 --> 00:34:34,889
message failed to open stream permission

727
00:34:31,889 --> 00:34:38,429
denied again the files are there but our

728
00:34:34,889 --> 00:34:41,210
policies this file simply is not in our

729
00:34:38,429 --> 00:34:41,210
pie list

730
00:34:44,590 --> 00:34:51,320
okay let me get back to you as a team

731
00:34:47,570 --> 00:34:54,020
okay so we've just shown you a demo

732
00:34:51,320 --> 00:34:54,980
right two demos the first one is think

733
00:34:54,020 --> 00:34:57,050
about it you're running an application

734
00:34:54,980 --> 00:34:58,850
and you have dependencies in that case

735
00:34:57,050 --> 00:35:00,230
that was plugins but that could be you

736
00:34:58,850 --> 00:35:02,210
know libraries sitting on your system

737
00:35:00,230 --> 00:35:04,970
shared objects that are completely

738
00:35:02,210 --> 00:35:07,220
unnecessary for your business purpose or

739
00:35:04,970 --> 00:35:08,330
your application purpose yet you're

740
00:35:07,220 --> 00:35:10,100
still exposed to a lot of

741
00:35:08,330 --> 00:35:12,640
vulnerabilities and potential compromise

742
00:35:10,100 --> 00:35:15,410
for something you actually didn't need

743
00:35:12,640 --> 00:35:17,629
and we showed that removing all the

744
00:35:15,410 --> 00:35:19,580
things that are not you know whether its

745
00:35:17,630 --> 00:35:21,200
components whether it's files we removed

746
00:35:19,580 --> 00:35:24,710
all the things that were not used for by

747
00:35:21,200 --> 00:35:26,359
the application you actually reduce the

748
00:35:24,710 --> 00:35:28,610
attack surface we reduce the number of

749
00:35:26,360 --> 00:35:30,980
vulnerabilities and as a you know right

750
00:35:28,610 --> 00:35:33,950
side down side you reduce the size of

751
00:35:30,980 --> 00:35:35,690
your containers but this is really

752
00:35:33,950 --> 00:35:38,120
coarse grain operations right we're

753
00:35:35,690 --> 00:35:42,800
removing binaries by binaries I mean elf

754
00:35:38,120 --> 00:35:45,080
files or Exe if you're using Windows but

755
00:35:42,800 --> 00:35:46,850
what happens when we actually you know

756
00:35:45,080 --> 00:35:48,560
when you actually need to run this

757
00:35:46,850 --> 00:35:50,509
application but the vulnerabilities are

758
00:35:48,560 --> 00:35:52,910
still within the application itself and

759
00:35:50,510 --> 00:35:56,600
let's assume you you know you also don't

760
00:35:52,910 --> 00:35:59,240
get to the source code now so this is

761
00:35:56,600 --> 00:36:01,640
the application layer and you know I put

762
00:35:59,240 --> 00:36:03,859
this little surgeon picture because this

763
00:36:01,640 --> 00:36:05,210
is really like surgery and it's more

764
00:36:03,860 --> 00:36:08,840
fine-grained than working with the

765
00:36:05,210 --> 00:36:10,430
containers themselves and you know if

766
00:36:08,840 --> 00:36:12,350
you think about container I mean if you

767
00:36:10,430 --> 00:36:15,020
think about containers and application

768
00:36:12,350 --> 00:36:18,380
today there's a lot of bloats and I like

769
00:36:15,020 --> 00:36:20,900
to think as them as being a very fat you

770
00:36:18,380 --> 00:36:22,190
know containers applications there's

771
00:36:20,900 --> 00:36:24,170
really a lot of things you don't need

772
00:36:22,190 --> 00:36:26,090
right this application today like I

773
00:36:24,170 --> 00:36:28,340
don't know I think Facebook is 400 mega

774
00:36:26,090 --> 00:36:30,320
on iOS or something that's ridiculous

775
00:36:28,340 --> 00:36:32,180
right you don't need that much for

776
00:36:30,320 --> 00:36:36,050
web-based application that's another

777
00:36:32,180 --> 00:36:38,180
story anyway there's a there's always

778
00:36:36,050 --> 00:36:40,700
gonna be bugs right in application and

779
00:36:38,180 --> 00:36:42,080
and if you look today the leading you

780
00:36:40,700 --> 00:36:44,149
know the leading cause of system

781
00:36:42,080 --> 00:36:46,549
compromises bugs bugs gets exploited

782
00:36:44,150 --> 00:36:49,610
through buffer overflows and Rob gadgets

783
00:36:46,550 --> 00:36:50,990
and all of these good things and of

784
00:36:49,610 --> 00:36:53,060
course there's a lot of initiative in

785
00:36:50,990 --> 00:36:55,450
that space you know patch Tuesdays and

786
00:36:53,060 --> 00:36:57,549
you know updating your system and

787
00:36:55,450 --> 00:36:58,660
and package manager to make sure that

788
00:36:57,549 --> 00:37:02,020
you have the latest and greatest

789
00:36:58,660 --> 00:37:04,000
versions but really it's not enough

790
00:37:02,020 --> 00:37:05,680
because you know the attackers might

791
00:37:04,000 --> 00:37:08,349
find before you patch the application

792
00:37:05,680 --> 00:37:09,879
and of course if you look through

793
00:37:08,349 --> 00:37:11,530
history right through smashing the

794
00:37:09,880 --> 00:37:13,960
stacks return to leave see and Rob

795
00:37:11,530 --> 00:37:15,520
gadgets you know the technology evolved

796
00:37:13,960 --> 00:37:18,130
and there's a lot of mitigation

797
00:37:15,520 --> 00:37:19,930
strategies that are applied and that are

798
00:37:18,130 --> 00:37:21,400
working very well and put you know the

799
00:37:19,930 --> 00:37:22,899
script kiddies at base but there's still

800
00:37:21,400 --> 00:37:27,069
talented people that can exploit the

801
00:37:22,900 --> 00:37:29,710
application and in terms of attacks

802
00:37:27,069 --> 00:37:31,150
right there's a there's application that

803
00:37:29,710 --> 00:37:33,099
simply overwrite a return address and

804
00:37:31,150 --> 00:37:34,569
you can return to leap C and execute you

805
00:37:33,099 --> 00:37:36,299
know we prep the stack and you return to

806
00:37:34,569 --> 00:37:38,950
certain functions that you care about

807
00:37:36,299 --> 00:37:40,900
there slightly and of course in that

808
00:37:38,950 --> 00:37:42,790
case you can you can target functions

809
00:37:40,900 --> 00:37:45,190
that are not used by the application or

810
00:37:42,790 --> 00:37:47,950
even better if you guys are not familiar

811
00:37:45,190 --> 00:37:50,109
with return oriented programming it's

812
00:37:47,950 --> 00:37:51,609
basically a way to leverage the code

813
00:37:50,109 --> 00:37:53,558
that resides within the application

814
00:37:51,609 --> 00:37:56,348
binary so you disassemble your

815
00:37:53,559 --> 00:37:57,970
application you have a bunch of basic

816
00:37:56,349 --> 00:37:59,319
blocks basic blocks are basically

817
00:37:57,970 --> 00:38:01,569
something that finished with a return

818
00:37:59,319 --> 00:38:03,490
instruction that allows you to set the

819
00:38:01,569 --> 00:38:05,859
stack and call up you know call

820
00:38:03,490 --> 00:38:07,180
arbitrary functions and set the stack in

821
00:38:05,859 --> 00:38:09,490
a proper way so that you can pass the

822
00:38:07,180 --> 00:38:11,259
arguments you care about and of course

823
00:38:09,490 --> 00:38:13,390
same thing as before there's a there's

824
00:38:11,260 --> 00:38:15,430
techniques right address space

825
00:38:13,390 --> 00:38:17,020
randomization there's a control flow

826
00:38:15,430 --> 00:38:19,690
integrity the shadow stacks there

827
00:38:17,020 --> 00:38:21,670
there's a lot of techniques right in the

828
00:38:19,690 --> 00:38:23,260
defensive sides there's also a lot of

829
00:38:21,670 --> 00:38:26,829
talented people that can bypass these

830
00:38:23,260 --> 00:38:28,240
techniques so what we think about what

831
00:38:26,829 --> 00:38:30,280
we did before why don't we apply the

832
00:38:28,240 --> 00:38:33,848
same concepts to an application

833
00:38:30,280 --> 00:38:35,589
you know it's sounds intuitive right you

834
00:38:33,849 --> 00:38:37,119
take the application you look at the

835
00:38:35,589 --> 00:38:38,109
functions that are used and you simply

836
00:38:37,119 --> 00:38:40,390
strip them out

837
00:38:38,109 --> 00:38:41,380
I said simply because binary is a little

838
00:38:40,390 --> 00:38:42,848
bit tricky right there's a lot of

839
00:38:41,380 --> 00:38:44,799
offsets and things that you need to care

840
00:38:42,849 --> 00:38:46,390
about if you do it statically but if you

841
00:38:44,799 --> 00:38:48,130
do it at run time think about it you

842
00:38:46,390 --> 00:38:50,020
load a lot of library in the address

843
00:38:48,130 --> 00:38:51,790
space of the process you can null some

844
00:38:50,020 --> 00:38:54,460
you know memory pages that contains the

845
00:38:51,790 --> 00:38:57,460
function you don't care about and you

846
00:38:54,460 --> 00:38:59,589
know if the exploits are actually

847
00:38:57,460 --> 00:39:01,270
leveraging functions that the

848
00:38:59,589 --> 00:39:02,529
application doesn't use then the

849
00:39:01,270 --> 00:39:06,160
application you know the exploit will

850
00:39:02,530 --> 00:39:07,820
break but this is this is all you know

851
00:39:06,160 --> 00:39:10,490
all type of attacks

852
00:39:07,820 --> 00:39:11,960
these days it's more you know all the

853
00:39:10,490 --> 00:39:14,629
hype is wrong return-oriented

854
00:39:11,960 --> 00:39:16,550
programming and gadgets right so this

855
00:39:14,630 --> 00:39:18,500
type of attacks will still succeed even

856
00:39:16,550 --> 00:39:20,050
if you remove the functions that that

857
00:39:18,500 --> 00:39:22,670
are not used by the application and

858
00:39:20,050 --> 00:39:24,530
there was some work that was done

859
00:39:22,670 --> 00:39:26,390
previously to remove these functions so

860
00:39:24,530 --> 00:39:28,430
that's the if you think about their

861
00:39:26,390 --> 00:39:30,410
level of granularity that's you know

862
00:39:28,430 --> 00:39:32,870
lower than what we presented before but

863
00:39:30,410 --> 00:39:34,730
that was cut stripping and cut stripping

864
00:39:32,870 --> 00:39:36,080
says the same thing it basically removed

865
00:39:34,730 --> 00:39:38,600
this function these symbols from the

866
00:39:36,080 --> 00:39:41,180
other space of the process here what

867
00:39:38,600 --> 00:39:42,620
we're doing is we're looking at gadgets

868
00:39:41,180 --> 00:39:44,089
and the way they're built they only

869
00:39:42,620 --> 00:39:46,370
leverage a couple of critical functions

870
00:39:44,090 --> 00:39:48,230
so these functions are still required by

871
00:39:46,370 --> 00:39:50,750
the application to perform so cut

872
00:39:48,230 --> 00:39:52,820
stripping is not going to work so what

873
00:39:50,750 --> 00:39:55,010
we're doing is we enforce something at

874
00:39:52,820 --> 00:39:59,690
the API level API I mean you know

875
00:39:55,010 --> 00:40:01,490
windows 32 API and so this is the case

876
00:39:59,690 --> 00:40:04,100
that this is something that we call API

877
00:40:01,490 --> 00:40:05,779
specialization and the threat model is

878
00:40:04,100 --> 00:40:07,430
we assume that they have full function

879
00:40:05,780 --> 00:40:09,890
reuse they can do everything and our

880
00:40:07,430 --> 00:40:12,140
main goal here it's to really restrict

881
00:40:09,890 --> 00:40:14,810
how the API will interact with the

882
00:40:12,140 --> 00:40:17,330
operating system and you know if you

883
00:40:14,810 --> 00:40:19,790
think about virtual lock or and protect

884
00:40:17,330 --> 00:40:21,560
or malloc if you're using Linux we

885
00:40:19,790 --> 00:40:23,960
really want to enforce how these api's

886
00:40:21,560 --> 00:40:26,120
are used and make sure that an attacker

887
00:40:23,960 --> 00:40:27,320
because the attacker side is using the

888
00:40:26,120 --> 00:40:29,569
same functions but with different

889
00:40:27,320 --> 00:40:31,280
argument right you may you may allocate

890
00:40:29,570 --> 00:40:33,020
a memory page and mark it as readable

891
00:40:31,280 --> 00:40:34,820
but the attacker will use the same

892
00:40:33,020 --> 00:40:36,290
memory page but market has writable and

893
00:40:34,820 --> 00:40:38,090
executable so these are the same

894
00:40:36,290 --> 00:40:39,770
functions so cut stripping doesn't work

895
00:40:38,090 --> 00:40:41,000
you will need to enforce how these

896
00:40:39,770 --> 00:40:42,350
functions are called and the type of

897
00:40:41,000 --> 00:40:46,790
arguments that are passed to these

898
00:40:42,350 --> 00:40:48,350
functions and this is you know very high

899
00:40:46,790 --> 00:40:50,330
level functions if you have a Windows

900
00:40:48,350 --> 00:40:52,040
binary so this work was based on Windows

901
00:40:50,330 --> 00:40:54,500
oh and by the way I'm channeling my

902
00:40:52,040 --> 00:40:57,259
inner mikelis because that was a most of

903
00:40:54,500 --> 00:40:59,300
his contribution in that space so you

904
00:40:57,260 --> 00:41:01,880
have an application Windows application

905
00:40:59,300 --> 00:41:04,460
most of them will map kernel32.dll into

906
00:41:01,880 --> 00:41:06,740
the address space of the process and if

907
00:41:04,460 --> 00:41:10,160
you look at the button on the right side

908
00:41:06,740 --> 00:41:13,520
of this picture we're using only four

909
00:41:10,160 --> 00:41:15,109
functions right but because you're

910
00:41:13,520 --> 00:41:17,330
mapping kernel32 in the address space of

911
00:41:15,110 --> 00:41:19,280
the process you get access of you know

912
00:41:17,330 --> 00:41:21,440
you and an attacker get potentially

913
00:41:19,280 --> 00:41:23,119
access to thousands of functions but you

914
00:41:21,440 --> 00:41:25,190
really need all of that so this is

915
00:41:23,119 --> 00:41:29,690
really the case for API specialization

916
00:41:25,190 --> 00:41:32,270
that we're making here and this is a

917
00:41:29,690 --> 00:41:35,450
simple study right we look at these

918
00:41:32,270 --> 00:41:37,400
windows for it to api's or DLS however

919
00:41:35,450 --> 00:41:40,220
you want to call it and we looked at the

920
00:41:37,400 --> 00:41:41,690
number of functions they have kernel32

921
00:41:40,220 --> 00:41:43,549
of course being the biggest offender

922
00:41:41,690 --> 00:41:45,200
Etta's provides a lot of features and

923
00:41:43,550 --> 00:41:48,500
support for the you know windows

924
00:41:45,200 --> 00:41:50,990
application has 1900 functions and then

925
00:41:48,500 --> 00:41:54,079
we looked at the application and how

926
00:41:50,990 --> 00:41:56,540
many functions were they actually using

927
00:41:54,079 --> 00:41:59,200
within these libraries and you can see

928
00:41:56,540 --> 00:42:04,240
that VLC only needed 38 functions out of

929
00:41:59,200 --> 00:42:07,220
1900 and if you look at a TV API for VLC

930
00:42:04,240 --> 00:42:09,439
they needed only two functions yet

931
00:42:07,220 --> 00:42:12,140
there's 900 functions loaded into the

932
00:42:09,440 --> 00:42:13,220
address space of the process again it

933
00:42:12,140 --> 00:42:15,078
makes no sense right

934
00:42:13,220 --> 00:42:16,220
if intuitively you don't need to

935
00:42:15,079 --> 00:42:19,030
overload yourself with all these

936
00:42:16,220 --> 00:42:23,750
functions when you can strip them down

937
00:42:19,030 --> 00:42:26,210
so what we did is we want to create a

938
00:42:23,750 --> 00:42:29,569
you know specialized version of this API

939
00:42:26,210 --> 00:42:31,400
and then for some policy on it and what

940
00:42:29,569 --> 00:42:33,770
we did is we looked into all these api's

941
00:42:31,400 --> 00:42:36,940
and how they're used across you know rap

942
00:42:33,770 --> 00:42:39,440
chains and exploits and we've identified

943
00:42:36,940 --> 00:42:41,480
52 what we call you know security

944
00:42:39,440 --> 00:42:43,819
critical API functions right such as

945
00:42:41,480 --> 00:42:45,710
virtual so that's the equivalent of an

946
00:42:43,819 --> 00:42:49,029
protect malloc and connectors connect

947
00:42:45,710 --> 00:42:51,770
everywhere and the goal here is we

948
00:42:49,030 --> 00:42:54,470
analyze how the application is going to

949
00:42:51,770 --> 00:42:58,190
do in third you know the arguments for

950
00:42:54,470 --> 00:43:01,209
these functions and ideally and most of

951
00:42:58,190 --> 00:43:03,380
the time actually the malicious

952
00:43:01,210 --> 00:43:04,700
application right the exploits are using

953
00:43:03,380 --> 00:43:06,500
the same functions but in a different

954
00:43:04,700 --> 00:43:09,828
way with different types of argument and

955
00:43:06,500 --> 00:43:11,569
of course you know that's that's the

956
00:43:09,829 --> 00:43:13,160
main intuition behind this work and you

957
00:43:11,569 --> 00:43:17,329
know hopefully that works but spoiler

958
00:43:13,160 --> 00:43:18,890
alert it does that's why I'm here but

959
00:43:17,329 --> 00:43:21,770
the idea is that this approach should be

960
00:43:18,890 --> 00:43:23,868
we want to work on binary we don't want

961
00:43:21,770 --> 00:43:24,740
to do live profiling as we did before we

962
00:43:23,869 --> 00:43:26,810
want to do something completely

963
00:43:24,740 --> 00:43:28,848
statically because if you if you're able

964
00:43:26,810 --> 00:43:31,609
to observe the argument then that's it's

965
00:43:28,849 --> 00:43:33,619
not cheating but it's easier so to speak

966
00:43:31,609 --> 00:43:35,240
it's a best-effort approach so if we

967
00:43:33,619 --> 00:43:37,490
cannot infer the arguments that

968
00:43:35,240 --> 00:43:39,229
for a function we're not going to try to

969
00:43:37,490 --> 00:43:41,060
enforce a policy on it we only enforce

970
00:43:39,230 --> 00:43:43,580
the policies of the arguments were able

971
00:43:41,060 --> 00:43:45,020
to identify statically and then of

972
00:43:43,580 --> 00:43:46,400
course you know like any technique right

973
00:43:45,020 --> 00:43:48,380
now it looks great but maybe tomorrow

974
00:43:46,400 --> 00:43:49,730
someone will find a way to bypass it but

975
00:43:48,380 --> 00:43:51,320
that's you know that's the game and

976
00:43:49,730 --> 00:43:54,230
that's why there's a conference every

977
00:43:51,320 --> 00:43:56,119
year in security and the idea is that

978
00:43:54,230 --> 00:43:59,930
it's it's lightweight enough but it also

979
00:43:56,119 --> 00:44:03,710
can be alongside other applications so

980
00:43:59,930 --> 00:44:06,350
it's a two-phase approach basically we

981
00:44:03,710 --> 00:44:08,540
take the application binary we

982
00:44:06,350 --> 00:44:10,310
disassemble it we extract a control flow

983
00:44:08,540 --> 00:44:12,529
graph which you know enables us to see

984
00:44:10,310 --> 00:44:14,299
all the basic blocks and we identify the

985
00:44:12,530 --> 00:44:16,850
call sites for the 60 to critical

986
00:44:14,300 --> 00:44:18,940
functions that we've identified once we

987
00:44:16,850 --> 00:44:21,470
have that we do backward slicing and

988
00:44:18,940 --> 00:44:23,270
we're able to infer the argument on the

989
00:44:21,470 --> 00:44:24,770
stack that are pushed to this

990
00:44:23,270 --> 00:44:27,110
application and then we generate a

991
00:44:24,770 --> 00:44:28,580
process wide per function policy which

992
00:44:27,110 --> 00:44:31,130
means that we enforce a certain behavior

993
00:44:28,580 --> 00:44:32,690
for specific API calls and then at

994
00:44:31,130 --> 00:44:34,850
runtime it's your you know your

995
00:44:32,690 --> 00:44:36,020
classical library interposition and we

996
00:44:34,850 --> 00:44:38,150
leverage something from microsoft

997
00:44:36,020 --> 00:44:40,490
research so what does it look like in

998
00:44:38,150 --> 00:44:42,020
practice so this is basically the same

999
00:44:40,490 --> 00:44:43,100
as before but in picture in case you

1000
00:44:42,020 --> 00:44:45,470
don't know how to read or you didn't

1001
00:44:43,100 --> 00:44:47,480
like my explanations but basically we

1002
00:44:45,470 --> 00:44:49,129
look at the intersection of the critical

1003
00:44:47,480 --> 00:44:51,350
functions and imported functions by the

1004
00:44:49,130 --> 00:44:53,359
application we identify the call sides

1005
00:44:51,350 --> 00:44:54,830
and this is the argument right this is

1006
00:44:53,359 --> 00:44:56,660
ideal scenario you have all the values

1007
00:44:54,830 --> 00:44:58,730
that are pushed on the stack prior to

1008
00:44:56,660 --> 00:45:01,430
invoking D you know the API calls of

1009
00:44:58,730 --> 00:45:03,440
course many times it is not possible and

1010
00:45:01,430 --> 00:45:06,230
we can't infer a policy for specific

1011
00:45:03,440 --> 00:45:07,670
functions but every time we can infer

1012
00:45:06,230 --> 00:45:09,080
this arguments we're gonna enforce it

1013
00:45:07,670 --> 00:45:10,670
and some of them will be determined at

1014
00:45:09,080 --> 00:45:13,069
runtime and that's fine as long as we

1015
00:45:10,670 --> 00:45:16,460
enforce part of these arguments that are

1016
00:45:13,070 --> 00:45:20,000
called for this API call so the

1017
00:45:16,460 --> 00:45:23,180
prototype we have is Windows based no

1018
00:45:20,000 --> 00:45:25,070
secrets we're using Ida and and the

1019
00:45:23,180 --> 00:45:26,839
enforcement is done with detour so if

1020
00:45:25,070 --> 00:45:29,090
you guys never used it or never heard of

1021
00:45:26,840 --> 00:45:30,830
it it's a I'm not sure it's I don't

1022
00:45:29,090 --> 00:45:33,770
think it's open source but it's free to

1023
00:45:30,830 --> 00:45:35,210
use for academic licenses and basically

1024
00:45:33,770 --> 00:45:37,040
what it does is that every time you

1025
00:45:35,210 --> 00:45:38,510
enter one of the functions you care

1026
00:45:37,040 --> 00:45:39,920
about it inserts a trampoline

1027
00:45:38,510 --> 00:45:41,630
instruction and then it drops to your

1028
00:45:39,920 --> 00:45:43,220
own implementation so that's a very nice

1029
00:45:41,630 --> 00:45:45,619
way of doing library interposition on

1030
00:45:43,220 --> 00:45:49,259
binaries for Windows because there's no

1031
00:45:45,619 --> 00:45:54,150
LD preload on Windows and for

1032
00:45:49,260 --> 00:45:57,690
so these are the results so we we took

1033
00:45:54,150 --> 00:46:00,880
251 shellcodes and 30 rock payloads that

1034
00:45:57,690 --> 00:46:03,370
applied to you know common application

1035
00:46:00,880 --> 00:46:06,010
the we took 10 what we call popular

1036
00:46:03,370 --> 00:46:08,020
end-user programs and that you're going

1037
00:46:06,010 --> 00:46:09,910
to see the names right it's zip VLC

1038
00:46:08,020 --> 00:46:11,860
crawl man and things like that so that

1039
00:46:09,910 --> 00:46:14,020
is it's real work right we can it can

1040
00:46:11,860 --> 00:46:15,490
actually work and the main results as I

1041
00:46:14,020 --> 00:46:16,030
told you so it improves slightly for

1042
00:46:15,490 --> 00:46:18,100
shellcodes

1043
00:46:16,030 --> 00:46:20,050
but shellcodes will use functions that

1044
00:46:18,100 --> 00:46:22,390
are not used by the application right so

1045
00:46:20,050 --> 00:46:24,940
the improvement is is minimal here

1046
00:46:22,390 --> 00:46:26,470
however if you look at ropes ropes chain

1047
00:46:24,940 --> 00:46:28,330
will use only one or two critical

1048
00:46:26,470 --> 00:46:30,910
functions but it will use it very

1049
00:46:28,330 --> 00:46:34,900
differently and it has a very negligible

1050
00:46:30,910 --> 00:46:37,569
overhead and this is just a graph of

1051
00:46:34,900 --> 00:46:40,720
these results so we used chrome edge

1052
00:46:37,570 --> 00:46:42,940
Firefox and a bunch of other application

1053
00:46:40,720 --> 00:46:44,589
so this this is actually working on a on

1054
00:46:42,940 --> 00:46:48,790
a real application that you may download

1055
00:46:44,590 --> 00:46:51,280
today so we call this API specialization

1056
00:46:48,790 --> 00:46:53,470
shredder so that's a that's a best

1057
00:46:51,280 --> 00:46:55,690
effort software reduction attack surface

1058
00:46:53,470 --> 00:46:58,600
reduction tool it goes beyond the simple

1059
00:46:55,690 --> 00:47:00,790
code deep loading to API specialization

1060
00:46:58,600 --> 00:47:01,900
we really believe that it's fine you

1061
00:47:00,790 --> 00:47:04,720
could load you could have multiple

1062
00:47:01,900 --> 00:47:06,760
instances of kernel32.dll memories cheap

1063
00:47:04,720 --> 00:47:08,439
you know we can we can store many

1064
00:47:06,760 --> 00:47:10,660
version of that DLL and load them into

1065
00:47:08,440 --> 00:47:13,270
the address space of the process it

1066
00:47:10,660 --> 00:47:14,770
relies on static analysis and then the

1067
00:47:13,270 --> 00:47:16,630
policies run force at runtime so

1068
00:47:14,770 --> 00:47:18,460
whatever we can infer at you know

1069
00:47:16,630 --> 00:47:21,520
statically we do it and we enforce it

1070
00:47:18,460 --> 00:47:23,110
and of course the major improvement is

1071
00:47:21,520 --> 00:47:27,250
unwrap chains as opposed to you know

1072
00:47:23,110 --> 00:47:31,210
shellcodes so now it's time for me to

1073
00:47:27,250 --> 00:47:32,950
conclude so we show we showed multiple

1074
00:47:31,210 --> 00:47:35,470
approaches to reduce the attack surface

1075
00:47:32,950 --> 00:47:36,970
right we looked first into the coarse

1076
00:47:35,470 --> 00:47:38,950
grain approach for containers and

1077
00:47:36,970 --> 00:47:41,290
container image and really removing all

1078
00:47:38,950 --> 00:47:42,939
the binaries and then we targeted

1079
00:47:41,290 --> 00:47:44,380
something a little bit more fine-grained

1080
00:47:42,940 --> 00:47:45,340
where we look at the application and

1081
00:47:44,380 --> 00:47:49,840
what's left of it

1082
00:47:45,340 --> 00:47:51,550
and the main takeaway here is that you

1083
00:47:49,840 --> 00:47:54,220
know whatever vendors tell you whatever

1084
00:47:51,550 --> 00:47:56,500
solution that you read you know software

1085
00:47:54,220 --> 00:47:58,180
solution or security is really a defense

1086
00:47:56,500 --> 00:47:59,740
in that solution there's nothing that

1087
00:47:58,180 --> 00:48:01,460
fixes everything you know I know some

1088
00:47:59,740 --> 00:48:03,589
people believe appliances will fix

1089
00:48:01,460 --> 00:48:05,750
at the network layer some people that

1090
00:48:03,589 --> 00:48:07,190
sells API solution will tell you just

1091
00:48:05,750 --> 00:48:09,140
protect your ideas and you're all good

1092
00:48:07,190 --> 00:48:12,050
but really security is a defense in that

1093
00:48:09,140 --> 00:48:13,250
solution and really all of you guys

1094
00:48:12,050 --> 00:48:15,440
whatever you're running today your

1095
00:48:13,250 --> 00:48:18,800
attack surface is too big and your

1096
00:48:15,440 --> 00:48:20,210
security team is too small right so and

1097
00:48:18,800 --> 00:48:21,740
if you look at all the techniques right

1098
00:48:20,210 --> 00:48:23,559
incident response and all that the

1099
00:48:21,740 --> 00:48:26,000
biggest problem is reducing the noise

1100
00:48:23,559 --> 00:48:27,440
with this you can literally reduce the

1101
00:48:26,000 --> 00:48:29,660
noise because all the alerts or

1102
00:48:27,440 --> 00:48:31,940
everything you you get is going to be

1103
00:48:29,660 --> 00:48:34,790
targeted to your particular need and the

1104
00:48:31,940 --> 00:48:36,829
functions you're actually using so

1105
00:48:34,790 --> 00:48:38,720
containers are still good right not

1106
00:48:36,829 --> 00:48:40,940
saying containers are bad and that talk

1107
00:48:38,720 --> 00:48:43,098
containers are great for DevOps they're

1108
00:48:40,940 --> 00:48:45,140
great for agility and deployment but

1109
00:48:43,099 --> 00:48:47,750
again the problem is the really the sad

1110
00:48:45,140 --> 00:48:49,670
state of the testing tools today that

1111
00:48:47,750 --> 00:48:52,369
really gives you that false sense of

1112
00:48:49,670 --> 00:48:54,050
security and there's a lot of things you

1113
00:48:52,369 --> 00:48:55,609
could do right and and I know and I'm

1114
00:48:54,050 --> 00:48:58,430
sure in the room people say oh you can

1115
00:48:55,609 --> 00:49:00,380
just use Alpine you know from dockerfile

1116
00:48:58,430 --> 00:49:01,819
yeah great Alpine still has a lot of

1117
00:49:00,380 --> 00:49:03,470
dependencies that you don't need for

1118
00:49:01,819 --> 00:49:05,710
your container and for those of you who

1119
00:49:03,470 --> 00:49:08,209
don't know Alpine is just a lighter

1120
00:49:05,710 --> 00:49:10,700
operating system that contains less

1121
00:49:08,210 --> 00:49:12,650
blood than others that really container

1122
00:49:10,700 --> 00:49:14,390
should be built as a single purpose tool

1123
00:49:12,650 --> 00:49:18,710
and they should only have the things you

1124
00:49:14,390 --> 00:49:20,118
need for your application that's it you

1125
00:49:18,710 --> 00:49:25,240
guys have any questions I think we have

1126
00:49:20,119 --> 00:49:25,240
time no no sorry no we don't have time

1127
00:49:27,680 --> 00:49:35,839
[Applause]

