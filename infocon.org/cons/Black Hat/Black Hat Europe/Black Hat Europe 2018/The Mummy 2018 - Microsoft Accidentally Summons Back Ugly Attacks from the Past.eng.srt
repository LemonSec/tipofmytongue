1
00:00:00,030 --> 00:00:03,929
everybody thanks for coming to my talk

2
00:00:01,829 --> 00:00:07,890
it's super exciting to see people

3
00:00:03,929 --> 00:00:09,690
responding to some hard work and and I

4
00:00:07,890 --> 00:00:13,559
think it's interesting as well right

5
00:00:09,690 --> 00:00:14,489
soon and I want to thank as well a black

6
00:00:13,559 --> 00:00:16,439
it for having me

7
00:00:14,490 --> 00:00:19,880
despite the cute name that I gave the

8
00:00:16,440 --> 00:00:22,289
talk and that's good that it unto it so

9
00:00:19,880 --> 00:00:25,349
my name is van min sure I'm a software

10
00:00:22,289 --> 00:00:28,789
search from Israel for my day job I like

11
00:00:25,350 --> 00:00:31,560
to I like to take on challenges that

12
00:00:28,789 --> 00:00:36,570
involve a lot of reverse engineering be

13
00:00:31,560 --> 00:00:40,649
it OS kernels firmwares your name it and

14
00:00:36,570 --> 00:00:41,760
I grew a special conclusion with

15
00:00:40,649 --> 00:00:45,510
vulnerability has been doing up in

16
00:00:41,760 --> 00:00:47,879
abilities a long time now and I grew an

17
00:00:45,510 --> 00:00:49,589
appreciation for exotic bugs and have

18
00:00:47,879 --> 00:00:51,839
the special privilege today to tell you

19
00:00:49,590 --> 00:00:53,940
about such an exotic bug that have found

20
00:00:51,840 --> 00:00:56,460
recently in the windows fragmentation

21
00:00:53,940 --> 00:00:58,440
mechanism and the reason I think it's

22
00:00:56,460 --> 00:01:00,780
interesting well one reason is it's

23
00:00:58,440 --> 00:01:05,039
quite a simple bug really it's quite

24
00:01:00,780 --> 00:01:07,560
even a stupid mistake and nonetheless it

25
00:01:05,040 --> 00:01:09,420
has a really significant impact on the

26
00:01:07,560 --> 00:01:11,549
security of the system and quite you'll

27
00:01:09,420 --> 00:01:15,170
see it's quite the opposite the

28
00:01:11,549 --> 00:01:17,820
intention of the designers had been and

29
00:01:15,170 --> 00:01:19,140
another reason is well it really is a

30
00:01:17,820 --> 00:01:21,990
simple bug

31
00:01:19,140 --> 00:01:24,689
it has been on the surface of a driver

32
00:01:21,990 --> 00:01:27,149
like tcp/ip sis a lot disappear pieces

33
00:01:24,689 --> 00:01:31,439
and which is something that I'd

34
00:01:27,150 --> 00:01:33,540
considered well picked clean before and

35
00:01:31,439 --> 00:01:36,258
not the best target for reverse

36
00:01:33,540 --> 00:01:40,470
engineering and vulnerability hunting

37
00:01:36,259 --> 00:01:42,780
but well and this bug which really

38
00:01:40,470 --> 00:01:48,000
should have been found using automated

39
00:01:42,780 --> 00:01:52,680
tools in the security design lifecycle

40
00:01:48,000 --> 00:01:55,380
that they have well has existed for the

41
00:01:52,680 --> 00:01:58,290
past five and a half years and this

42
00:01:55,380 --> 00:02:01,320
makes me think that there are such bugs

43
00:01:58,290 --> 00:02:03,930
lurking simple bugs and I encourage you

44
00:02:01,320 --> 00:02:07,710
really to explore such well pillars of

45
00:02:03,930 --> 00:02:10,200
Windows is TCP accusation and you will

46
00:02:07,710 --> 00:02:12,690
find out such bugs and therefore it's

47
00:02:10,199 --> 00:02:15,899
worthwhile to I think we

48
00:02:12,690 --> 00:02:18,480
maybe the fragmentation and such thing

49
00:02:15,900 --> 00:02:21,360
that were the choir erlik's of the path

50
00:02:18,480 --> 00:02:24,060
maybe in attacks and some of them have

51
00:02:21,360 --> 00:02:26,480
been brought back to life now but let's

52
00:02:24,060 --> 00:02:28,590
quickly recap fragmentation and

53
00:02:26,480 --> 00:02:30,630
fragmentation is really when I'm I'm

54
00:02:28,590 --> 00:02:33,330
standing a packet that's too large for

55
00:02:30,630 --> 00:02:35,340
the underlying link layer and in this

56
00:02:33,330 --> 00:02:38,070
situation what happens is any router in

57
00:02:35,340 --> 00:02:39,930
the middle and also myself as they at

58
00:02:38,070 --> 00:02:44,489
the sender we are allowed to split this

59
00:02:39,930 --> 00:02:46,710
packet into small fragments and in this

60
00:02:44,490 --> 00:02:48,000
case so that we can reconstruct it

61
00:02:46,710 --> 00:02:51,420
the other secret we constructed we

62
00:02:48,000 --> 00:02:53,280
assign all the fragments that have the

63
00:02:51,420 --> 00:02:55,559
say that they belong to the same packet

64
00:02:53,280 --> 00:02:58,320
we assign them the same identification

65
00:02:55,560 --> 00:03:01,770
identification is a field on the

66
00:02:58,320 --> 00:03:04,019
fragment we assign the same to the same

67
00:03:01,770 --> 00:03:06,360
IP or we also call it IP ID

68
00:03:04,020 --> 00:03:07,740
we assign the same IP ID to all the

69
00:03:06,360 --> 00:03:10,170
fragments that belong to the same packet

70
00:03:07,740 --> 00:03:12,890
there's also a notion of offsets within

71
00:03:10,170 --> 00:03:15,269
the packet and a flag that tells us

72
00:03:12,890 --> 00:03:16,529
whether or more there are more fragments

73
00:03:15,270 --> 00:03:20,340
coming up or this is the end of the

74
00:03:16,530 --> 00:03:23,310
packet another thing is that the

75
00:03:20,340 --> 00:03:24,930
fragments that are not yet completed to

76
00:03:23,310 --> 00:03:29,700
a full packet are stored in a cache of

77
00:03:24,930 --> 00:03:31,560
the of the reassembling part and the

78
00:03:29,700 --> 00:03:34,709
last fact about fragmentation is that

79
00:03:31,560 --> 00:03:36,750
it's an oddly cursed and we've known

80
00:03:34,709 --> 00:03:39,450
that for a long time actually from at

81
00:03:36,750 --> 00:03:43,050
least 87 and what these guys mean is

82
00:03:39,450 --> 00:03:45,660
that that there's an implicit trust

83
00:03:43,050 --> 00:03:48,330
between the reassembling part and the

84
00:03:45,660 --> 00:03:50,810
sender and that that it that the sender

85
00:03:48,330 --> 00:03:53,310
wouldn't bombard them with fragments

86
00:03:50,810 --> 00:03:55,470
blowing up the resources the caches and

87
00:03:53,310 --> 00:03:57,000
creating a denial of service and this is

88
00:03:55,470 --> 00:03:58,459
not the final denial of service the left

89
00:03:57,000 --> 00:04:03,090
and a lip service to be found in

90
00:03:58,459 --> 00:04:07,550
fragmentation letter there has been for

91
00:04:03,090 --> 00:04:10,860
example we blacked out on the name of

92
00:04:07,550 --> 00:04:13,400
the vulnerability but there have been

93
00:04:10,860 --> 00:04:19,020
vulnerable ities in the implementations

94
00:04:13,400 --> 00:04:22,200
wide widely affecting but widely

95
00:04:19,019 --> 00:04:25,270
affecting vulnerabilities but in the

96
00:04:22,200 --> 00:04:27,310
modern times they're less and less but

97
00:04:25,270 --> 00:04:31,139
I'm gonna burn a reference another

98
00:04:27,310 --> 00:04:35,349
another service vulnerability in

99
00:04:31,139 --> 00:04:36,460
fragmentation itself but I think there's

100
00:04:35,349 --> 00:04:40,990
more there are more interesting things

101
00:04:36,460 --> 00:04:43,930
to to be found with with the

102
00:04:40,990 --> 00:04:46,840
fragmentation one of them is has it has

103
00:04:43,930 --> 00:04:49,780
been found is a as a great way to evade

104
00:04:46,840 --> 00:04:53,109
IDs and the way you do it is you'd send

105
00:04:49,780 --> 00:04:55,568
multiple fragments overlapping fragments

106
00:04:53,110 --> 00:04:58,240
this is one way to do it and the

107
00:04:55,569 --> 00:05:02,139
fragments the IDS wouldn't know which of

108
00:04:58,240 --> 00:05:04,479
the fragments to discard in case unless

109
00:05:02,139 --> 00:05:06,520
it has really adequately implemented the

110
00:05:04,479 --> 00:05:10,990
same exact checks as the the receiver

111
00:05:06,520 --> 00:05:13,240
would and integrate an idea servation

112
00:05:10,990 --> 00:05:14,710
and it's even been implemented as a

113
00:05:13,240 --> 00:05:19,840
router that you send your packets

114
00:05:14,710 --> 00:05:21,609
through to the sender to do it and one

115
00:05:19,840 --> 00:05:23,250
this is one example another example has

116
00:05:21,610 --> 00:05:26,710
been suggested by Kaminsky you know five

117
00:05:23,250 --> 00:05:28,650
where you have where you play with catch

118
00:05:26,710 --> 00:05:31,508
times that are different between the

119
00:05:28,650 --> 00:05:35,349
between the IDs and the actual receiver

120
00:05:31,509 --> 00:05:39,610
or the router again creating an IDs

121
00:05:35,349 --> 00:05:40,900
evasion but I think I'm more interesting

122
00:05:39,610 --> 00:05:44,229
or maybe the more interesting attacks

123
00:05:40,900 --> 00:05:46,568
have been revolving around the fact that

124
00:05:44,229 --> 00:05:49,419
the operating systems at a time have

125
00:05:46,569 --> 00:05:53,259
implemented the algorithm to generate

126
00:05:49,419 --> 00:05:57,310
the IP IDs very naively as in the form

127
00:05:53,259 --> 00:06:02,560
of a global counter actually right up

128
00:05:57,310 --> 00:06:04,900
until modern times 2012 2011 in

129
00:06:02,560 --> 00:06:07,360
different operating systems and hackers

130
00:06:04,900 --> 00:06:09,818
found creative ways created things to do

131
00:06:07,360 --> 00:06:13,620
with it for example to kind to count

132
00:06:09,819 --> 00:06:17,550
hosts behind a nut the other example is

133
00:06:13,620 --> 00:06:20,380
to scan the network really stealthily

134
00:06:17,550 --> 00:06:23,190
without exposing the IP address of the

135
00:06:20,380 --> 00:06:26,020
compromised host throughout the network

136
00:06:23,190 --> 00:06:29,740
but the more interesting even attack has

137
00:06:26,020 --> 00:06:31,630
been suggested by Lipsky in oh three and

138
00:06:29,740 --> 00:06:33,849
he was researching ways to inject

139
00:06:31,630 --> 00:06:39,080
packets into TCP sessions we have to

140
00:06:33,849 --> 00:06:42,319
guess predict the TCP sequence or the

141
00:06:39,080 --> 00:06:44,120
and the destination port that you have

142
00:06:42,319 --> 00:06:46,750
which are hard to guess and you realize

143
00:06:44,120 --> 00:06:50,870
well if there's such a mechanism that

144
00:06:46,750 --> 00:06:52,340
well already has this the first fragment

145
00:06:50,870 --> 00:06:55,639
of the fact of the packet would have

146
00:06:52,340 --> 00:06:57,799
these data valid we don't have to guess

147
00:06:55,639 --> 00:07:03,199
if you only have to guess the IP ID of

148
00:06:57,800 --> 00:07:05,479
the packet and the and definitely when

149
00:07:03,199 --> 00:07:09,020
it's implemented there's a global

150
00:07:05,479 --> 00:07:11,990
counter that it's a cool thing because

151
00:07:09,020 --> 00:07:13,758
you can you can inject data into the

152
00:07:11,990 --> 00:07:16,550
session the downside of this attack is

153
00:07:13,759 --> 00:07:18,199
that you'd create invalid checksum but

154
00:07:16,550 --> 00:07:22,729
we do know that some network gear would

155
00:07:18,199 --> 00:07:25,430
either pass it ignore it pass it as if

156
00:07:22,729 --> 00:07:29,210
it's okay or even fix it for you in some

157
00:07:25,430 --> 00:07:31,909
other cases but a cooler attack even I

158
00:07:29,210 --> 00:07:34,008
think is has been suggested later and

159
00:07:31,909 --> 00:07:38,479
based on this work by Illidan Hertzberg

160
00:07:34,009 --> 00:07:40,370
in 2011 and they found it in a case of a

161
00:07:38,479 --> 00:07:44,330
nut and this also applies to the case of

162
00:07:40,370 --> 00:07:46,279
we have tunneled network then the

163
00:07:44,330 --> 00:07:49,008
network would it would do is it would

164
00:07:46,279 --> 00:07:50,779
choose where to send your packet based

165
00:07:49,009 --> 00:07:55,550
on the data that's in the header that's

166
00:07:50,779 --> 00:07:58,370
the destination port and so they figured

167
00:07:55,550 --> 00:08:00,710
if you inject decide to inject to the

168
00:07:58,370 --> 00:08:02,539
first fragment and not the following

169
00:08:00,710 --> 00:08:05,448
fragments and maybe the following

170
00:08:02,539 --> 00:08:07,250
fragments have data that you're really

171
00:08:05,449 --> 00:08:10,400
interested in then you can effectively

172
00:08:07,250 --> 00:08:13,879
create you can intercept those fragments

173
00:08:10,400 --> 00:08:16,549
that data if you have a house behind the

174
00:08:13,879 --> 00:08:19,729
nut because you'd get the nut to route

175
00:08:16,550 --> 00:08:21,080
the packets to you and they've also

176
00:08:19,729 --> 00:08:23,210
found that this is a really effective

177
00:08:21,080 --> 00:08:27,039
denial of service attack they claim to

178
00:08:23,210 --> 00:08:30,460
have dropped 40% of fragmented network

179
00:08:27,039 --> 00:08:33,919
from the traffic in their network and

180
00:08:30,460 --> 00:08:37,490
yeah so obviously the vendors have

181
00:08:33,919 --> 00:08:41,919
rushed in to close this issue obviously

182
00:08:37,490 --> 00:08:44,870
not only in 2012 and with Windows 8

183
00:08:41,919 --> 00:08:47,420
Windows have moved implementation Linux

184
00:08:44,870 --> 00:08:53,700
around that time as well where they now

185
00:08:47,420 --> 00:08:56,319
create a you'd get an IP ID differently

186
00:08:53,700 --> 00:08:57,820
depending on the IP path and this is

187
00:08:56,320 --> 00:09:00,370
their jargon and we're gonna use it and

188
00:08:57,820 --> 00:09:02,110
buy a cue path I mean and they mean it's

189
00:09:00,370 --> 00:09:07,150
the pair of the source and destination

190
00:09:02,110 --> 00:09:09,610
IP addresses and so effectively what you

191
00:09:07,150 --> 00:09:12,329
have an attacker couldn't get any IP ID

192
00:09:09,610 --> 00:09:15,610
series other than his own conversation

193
00:09:12,330 --> 00:09:18,550
and so everyone was happy and safe as

194
00:09:15,610 --> 00:09:22,780
long as you don't touch the code but

195
00:09:18,550 --> 00:09:23,949
obviously 48.1 a year later and actually

196
00:09:22,780 --> 00:09:26,500
someone from prank stuff told me

197
00:09:23,950 --> 00:09:27,700
informally that oh this is such a

198
00:09:26,500 --> 00:09:29,800
classic bag you don't understand the

199
00:09:27,700 --> 00:09:32,380
details yet but this is a cheap OC bag

200
00:09:29,800 --> 00:09:34,120
we had a refactor and we change you just

201
00:09:32,380 --> 00:09:36,580
change an array to a pointer and then

202
00:09:34,120 --> 00:09:38,890
the size of being fine so I was curious

203
00:09:36,580 --> 00:09:41,380
what's this refactor and I opened up the

204
00:09:38,890 --> 00:09:42,760
disassembly and but seriously I hadn't

205
00:09:41,380 --> 00:09:44,950
found anything different other than the

206
00:09:42,760 --> 00:09:50,319
bug being introduced and another thing

207
00:09:44,950 --> 00:09:53,620
that could be just a compiler change so

208
00:09:50,320 --> 00:09:55,660
anyway let's dive into how the PID is

209
00:09:53,620 --> 00:09:59,590
generated in order to understand the

210
00:09:55,660 --> 00:10:03,790
attacks and the implications in the new

211
00:09:59,590 --> 00:10:06,340
form so it's all about IP path and I

212
00:10:03,790 --> 00:10:09,490
prepare that reminder is the source and

213
00:10:06,340 --> 00:10:12,880
destination IP addresses and you build

214
00:10:09,490 --> 00:10:15,160
the identification field with connecting

215
00:10:12,880 --> 00:10:19,660
the sender gold base and an increment

216
00:10:15,160 --> 00:10:21,219
and the base is simply just random 4

217
00:10:19,660 --> 00:10:23,650
bytes random D word

218
00:10:21,220 --> 00:10:26,170
innocence is books or the hash of the IP

219
00:10:23,650 --> 00:10:28,780
path and you add to that a random number

220
00:10:26,170 --> 00:10:31,449
out of a table of random numbers you

221
00:10:28,780 --> 00:10:35,230
pick a cell by again the hash of the IP

222
00:10:31,450 --> 00:10:37,090
path and so this the second part should

223
00:10:35,230 --> 00:10:39,250
give you that sweet separation between

224
00:10:37,090 --> 00:10:44,740
conversations that you have an IP path

225
00:10:39,250 --> 00:10:46,950
or and W between conversations so this

226
00:10:44,740 --> 00:10:49,150
actually can be looked really good and

227
00:10:46,950 --> 00:10:52,840
until you look at the way it's

228
00:10:49,150 --> 00:10:54,340
initialized so what happens is what

229
00:10:52,840 --> 00:10:56,860
happens is they have to initialize the

230
00:10:54,340 --> 00:10:58,540
random table the way they do it is they

231
00:10:56,860 --> 00:11:02,430
allocate you don't understand really the

232
00:10:58,540 --> 00:11:05,980
graph I'm explaining it they allocate a

233
00:11:02,430 --> 00:11:07,120
the dynamic memory for this table it's

234
00:11:05,980 --> 00:11:09,819
8,000 hex byte

235
00:11:07,120 --> 00:11:11,589
and the second thing they do is now they

236
00:11:09,819 --> 00:11:14,589
need to initialize it and apparently

237
00:11:11,589 --> 00:11:16,199
they have been initializing it wrong

238
00:11:14,589 --> 00:11:20,050
initializing only eight bytes

239
00:11:16,199 --> 00:11:23,430
effectively out of the table and the

240
00:11:20,050 --> 00:11:26,680
rest of it it gets worse for them is is

241
00:11:23,430 --> 00:11:29,199
previously use kernel memory that the

242
00:11:26,680 --> 00:11:32,680
user shouldn't be able to see because it

243
00:11:29,199 --> 00:11:35,559
will help him bypass a SLR ok SLR and

244
00:11:32,680 --> 00:11:39,189
definitely not a random host in the

245
00:11:35,559 --> 00:11:42,009
network unauthenticated or nothing and

246
00:11:39,189 --> 00:11:45,009
it gets better for us so statistically

247
00:11:42,009 --> 00:11:49,209
what happens is because you get multiple

248
00:11:45,009 --> 00:11:52,959
pages a lot of the pages are practically

249
00:11:49,209 --> 00:11:54,790
zero you get many many zeroes and you

250
00:11:52,959 --> 00:11:57,459
have the increment that you get in the

251
00:11:54,790 --> 00:12:00,189
end as a zero and this is great for us

252
00:11:57,459 --> 00:12:01,899
because given enough samples it's true

253
00:12:00,189 --> 00:12:04,120
this for a significant number of samples

254
00:12:01,899 --> 00:12:08,160
you get this true that the

255
00:12:04,120 --> 00:12:10,749
identification exactly equals the base

256
00:12:08,160 --> 00:12:12,069
and let's talk a little bit about this

257
00:12:10,749 --> 00:12:15,429
base now that we know that the

258
00:12:12,069 --> 00:12:20,050
identification is just that for many

259
00:12:15,429 --> 00:12:22,300
samples the base is four random bytes or

260
00:12:20,050 --> 00:12:23,800
a hash of the IP path and let's explore

261
00:12:22,300 --> 00:12:25,779
the hash

262
00:12:23,800 --> 00:12:27,519
well the hash is something that you I

263
00:12:25,779 --> 00:12:29,679
don't expect most of you to know if

264
00:12:27,519 --> 00:12:31,379
you're coming from security because it's

265
00:12:29,679 --> 00:12:33,879
something that well didn't know either

266
00:12:31,379 --> 00:12:36,129
it's a it's something that comes from

267
00:12:33,879 --> 00:12:39,399
performance and it's called a topless

268
00:12:36,129 --> 00:12:41,589
hash and quick history lesson

269
00:12:39,399 --> 00:12:42,639
well they Microsoft has been the reason

270
00:12:41,589 --> 00:12:45,399
it's there is Microsoft has been

271
00:12:42,639 --> 00:12:47,889
implementing similar SS that's a

272
00:12:45,399 --> 00:12:50,399
received site scaling and what they're

273
00:12:47,889 --> 00:12:54,209
doing is what RSS does is they're

274
00:12:50,399 --> 00:12:57,790
distributing the load that it takes to

275
00:12:54,209 --> 00:12:59,800
process packets evenly between

276
00:12:57,790 --> 00:13:02,769
processors and the way they do it is

277
00:12:59,800 --> 00:13:04,990
they hatch some part of the packet with

278
00:13:02,769 --> 00:13:08,259
this hash and then they use that the

279
00:13:04,990 --> 00:13:10,990
hash just sang uniformly a processor but

280
00:13:08,259 --> 00:13:15,970
that doesn't account for why we're doing

281
00:13:10,990 --> 00:13:18,610
it in a in a on the sending side as if

282
00:13:15,970 --> 00:13:20,500
it's received site scaling and be more

283
00:13:18,610 --> 00:13:22,810
importantly is that doesn't

284
00:13:20,500 --> 00:13:25,360
for why they're using it in a security

285
00:13:22,810 --> 00:13:28,209
critical things such as the IPA

286
00:13:25,360 --> 00:13:31,410
degeneration you gotta you gotta ask

287
00:13:28,210 --> 00:13:34,060
Microsoft for that but what I do know is

288
00:13:31,410 --> 00:13:37,930
how it works I'm gonna explain it to you

289
00:13:34,060 --> 00:13:41,800
so you start off with a key and the key

290
00:13:37,930 --> 00:13:45,459
is 40 bytes long initialize again booth

291
00:13:41,800 --> 00:13:49,300
40 bytes long of key and they take now

292
00:13:45,460 --> 00:13:52,150
Windows Windows out of that key windows

293
00:13:49,300 --> 00:13:54,430
of four bytes and with those four bytes

294
00:13:52,150 --> 00:13:56,530
and explaining exactly later but what

295
00:13:54,430 --> 00:14:00,579
you gotta know is using the four byte

296
00:13:56,530 --> 00:14:04,870
windows they create mattresses four by

297
00:14:00,580 --> 00:14:06,490
four matrix that that is something out

298
00:14:04,870 --> 00:14:09,870
of the key I'll explain that something

299
00:14:06,490 --> 00:14:13,200
later and from each window one metrics

300
00:14:09,870 --> 00:14:16,260
when and we use those mattresses against

301
00:14:13,200 --> 00:14:18,970
against the input to create the hash

302
00:14:16,260 --> 00:14:22,750
what we do is we take the input nibble

303
00:14:18,970 --> 00:14:26,230
by nibble and each nibble is a an index

304
00:14:22,750 --> 00:14:28,420
to simply an index if it's skewed then

305
00:14:26,230 --> 00:14:32,790
then we take cell number two if it's F

306
00:14:28,420 --> 00:14:36,729
we take some number after 15th cell and

307
00:14:32,790 --> 00:14:39,089
the final result of the hash is the XOR

308
00:14:36,730 --> 00:14:44,830
of all the values of all the mattresses

309
00:14:39,090 --> 00:14:47,500
as indexed by the input and this gives

310
00:14:44,830 --> 00:14:51,010
us some cool characteristics which I'll

311
00:14:47,500 --> 00:14:55,360
give the bottom line of in a second I'm

312
00:14:51,010 --> 00:14:57,010
explaining the I'm explaining the the

313
00:14:55,360 --> 00:14:59,890
way that the mattresses are built and it

314
00:14:57,010 --> 00:15:03,660
matrix is built with a different number

315
00:14:59,890 --> 00:15:07,060
of different roles a roll of different

316
00:15:03,660 --> 00:15:09,699
amount to the key should have a roll of

317
00:15:07,060 --> 00:15:12,459
0 on the 8th cell that's mark there you

318
00:15:09,700 --> 00:15:15,700
have two elements joined together by X

319
00:15:12,460 --> 00:15:19,060
or for example the cell to its right a

320
00:15:15,700 --> 00:15:22,690
roll to the RO 3 in a roll of 0 sort

321
00:15:19,060 --> 00:15:25,390
together and actually have you seen if

322
00:15:22,690 --> 00:15:28,360
you've seen that the cell number 8 which

323
00:15:25,390 --> 00:15:30,850
is exactly the key part because it's a

324
00:15:28,360 --> 00:15:33,370
roll of 0 to the key part then actually

325
00:15:30,850 --> 00:15:34,209
this phenomena is true for all 2 pairs

326
00:15:33,370 --> 00:15:37,990
all

327
00:15:34,209 --> 00:15:41,800
two cells that have that their indices

328
00:15:37,990 --> 00:15:46,119
are acts or eight of each other so well

329
00:15:41,800 --> 00:15:48,998
and this is this is an example cell a

330
00:15:46,119 --> 00:15:51,730
roll of to slower roll of tubes or zero

331
00:15:48,999 --> 00:15:53,439
gives again the key part exactly it's

332
00:15:51,730 --> 00:15:58,089
true for all the pairs of cells that

333
00:15:53,439 --> 00:15:59,860
have sort of eight of their indices so

334
00:15:58,089 --> 00:16:04,360
together with the fact that this has

335
00:15:59,860 --> 00:16:09,069
been all along just soar arithmetics on

336
00:16:04,360 --> 00:16:11,110
the base side we can see that given two

337
00:16:09,069 --> 00:16:12,998
inputs of the Tash and we're talking

338
00:16:11,110 --> 00:16:16,050
about the hatch and again the inputs for

339
00:16:12,999 --> 00:16:19,660
the Tash is just two IP addresses that's

340
00:16:16,050 --> 00:16:23,679
for example I'm standing from 1000 1 to

341
00:16:19,660 --> 00:16:25,300
1000 to well four identical inputs that

342
00:16:23,679 --> 00:16:26,670
only differ by one nibble and that

343
00:16:25,300 --> 00:16:30,399
nibble is a sort of a to each other

344
00:16:26,670 --> 00:16:32,439
you'd get identical elements up until

345
00:16:30,399 --> 00:16:34,649
one element which is the curve which

346
00:16:32,439 --> 00:16:39,790
would give you that key part again and

347
00:16:34,649 --> 00:16:43,629
if we remind ourselves that the the ID

348
00:16:39,790 --> 00:16:45,819
is that hash source um something and

349
00:16:43,629 --> 00:16:50,199
it's the same something for all IP IDs

350
00:16:45,819 --> 00:16:52,748
then if you if you sort two samples of

351
00:16:50,199 --> 00:16:55,660
the IP side I P IDs where you have the

352
00:16:52,749 --> 00:17:00,279
increment as 0 then you actually get

353
00:16:55,660 --> 00:17:04,658
just out the key part so imagine that

354
00:17:00,279 --> 00:17:06,369
you take two samples X or them there

355
00:17:04,659 --> 00:17:09,789
would be mostly the key parts

356
00:17:06,369 --> 00:17:13,059
statistically and this is great this is

357
00:17:09,789 --> 00:17:14,770
exactly the opposite of what I think

358
00:17:13,059 --> 00:17:16,569
they meant the separation between the

359
00:17:14,770 --> 00:17:19,059
conversation you have now a strong

360
00:17:16,569 --> 00:17:22,240
connection between IDs and and the key

361
00:17:19,059 --> 00:17:25,418
and this gives us attack number 1 which

362
00:17:22,240 --> 00:17:27,909
is key recovery and the way you do it

363
00:17:25,419 --> 00:17:31,390
practically is you generate as many

364
00:17:27,909 --> 00:17:34,270
samples as you can of pairs of IP paths

365
00:17:31,390 --> 00:17:37,450
of IP IDs that belong to IP pets

366
00:17:34,270 --> 00:17:41,320
organized with that sort of 8-1 able

367
00:17:37,450 --> 00:17:43,630
difference with them you're then you

368
00:17:41,320 --> 00:17:46,240
store those pairs the values of the

369
00:17:43,630 --> 00:17:47,430
equities and you'd get key candidates

370
00:17:46,240 --> 00:17:51,240
you can rank those kinky

371
00:17:47,430 --> 00:17:55,740
and get the exact key out and you repeat

372
00:17:51,240 --> 00:17:57,540
it for the rest of the key key parts but

373
00:17:55,740 --> 00:18:01,170
didn't tell you what good is it for to

374
00:17:57,540 --> 00:18:03,270
get that key out but if you look closely

375
00:18:01,170 --> 00:18:07,440
at this real connection that we have

376
00:18:03,270 --> 00:18:09,540
then we know a notification where the

377
00:18:07,440 --> 00:18:12,120
increment of zero exists because it

378
00:18:09,540 --> 00:18:16,020
helped us find the key it was one of

379
00:18:12,120 --> 00:18:18,320
those that were correct with the key we

380
00:18:16,020 --> 00:18:22,160
know the key part and we can now start

381
00:18:18,320 --> 00:18:25,200
predicting IP IDs for different IP paths

382
00:18:22,160 --> 00:18:28,110
so this leads us to attack number two

383
00:18:25,200 --> 00:18:30,360
it's quite complicated I'll explain to

384
00:18:28,110 --> 00:18:33,990
read kernel memory and the recent works

385
00:18:30,360 --> 00:18:36,659
is because you can predict the IP a

386
00:18:33,990 --> 00:18:40,800
comes out and if you can actually get a

387
00:18:36,660 --> 00:18:43,140
sample of the IP ID that comes out now

388
00:18:40,800 --> 00:18:46,980
what happens is the difference has to be

389
00:18:43,140 --> 00:18:48,450
the content of that table not being 0

390
00:18:46,980 --> 00:18:52,920
the content of the table is the

391
00:18:48,450 --> 00:18:59,460
uninitialized kernel memory and you can

392
00:18:52,920 --> 00:19:04,170
now read up to 8,000 hex of of that and

393
00:18:59,460 --> 00:19:09,900
it says memory and let's see a let's see

394
00:19:04,170 --> 00:19:11,580
a demo of it all right and this is sped

395
00:19:09,900 --> 00:19:13,830
up what happens in the demo is we get

396
00:19:11,580 --> 00:19:15,059
many many samples of these are three

397
00:19:13,830 --> 00:19:18,030
candidates and we're ranking them

398
00:19:15,059 --> 00:19:21,059
because we've generated many pairs of IP

399
00:19:18,030 --> 00:19:22,710
paths giving us different okay these we

400
00:19:21,059 --> 00:19:24,840
have found a key that's outstanding in

401
00:19:22,710 --> 00:19:28,559
the ranks and we've just started to get

402
00:19:24,840 --> 00:19:31,980
out some data kernel data and we're

403
00:19:28,559 --> 00:19:36,450
looking them up on the tcp/ip sis memory

404
00:19:31,980 --> 00:19:39,540
we found them but not spot-on with an

405
00:19:36,450 --> 00:19:41,670
offset of two with an offset of 1 there

406
00:19:39,540 --> 00:19:44,460
are some reasons why it happens I'm

407
00:19:41,670 --> 00:19:48,960
pretty sure that it's enough to bypass

408
00:19:44,460 --> 00:19:51,570
SLR and but I think there's statistic

409
00:19:48,960 --> 00:19:58,200
ways to eliminate it just to get it

410
00:19:51,570 --> 00:20:02,550
spot-on but I didn't go as far so going

411
00:19:58,200 --> 00:20:05,560
back to the presentation

412
00:20:02,550 --> 00:20:11,110
so this was attack number two getting

413
00:20:05,560 --> 00:20:13,330
I'm mrs. Colonel memory and but I didn't

414
00:20:11,110 --> 00:20:15,129
this doesn't connect it to the attacks

415
00:20:13,330 --> 00:20:18,100
that I've mentioned previously and the

416
00:20:15,130 --> 00:20:20,530
way does is where you have we've

417
00:20:18,100 --> 00:20:23,020
implicitly just now predicted IP IDs for

418
00:20:20,530 --> 00:20:27,550
IP pets that are not our own and this is

419
00:20:23,020 --> 00:20:28,780
actually practical for for any IP pet

420
00:20:27,550 --> 00:20:31,000
that doesn't have an increment of zero

421
00:20:28,780 --> 00:20:32,520
to it that does have an increment of

422
00:20:31,000 --> 00:20:35,430
zero to it and there are many of them

423
00:20:32,520 --> 00:20:38,650
actually it's a zero-sum game the more

424
00:20:35,430 --> 00:20:41,080
zero increment that you have the more IP

425
00:20:38,650 --> 00:20:43,150
IDs that you can guess and the less zero

426
00:20:41,080 --> 00:20:45,790
increments you have you can predict more

427
00:20:43,150 --> 00:20:47,950
IP IDs accurately but for all those that

428
00:20:45,790 --> 00:20:49,210
have an increment of zero it's a huge

429
00:20:47,950 --> 00:20:51,580
number

430
00:20:49,210 --> 00:20:53,950
if the problem is reduced to assessing

431
00:20:51,580 --> 00:20:55,210
the number of packets on the IP path you

432
00:20:53,950 --> 00:20:59,020
can either guess because there's some

433
00:20:55,210 --> 00:21:03,490
cache time to the reassembling equipment

434
00:20:59,020 --> 00:21:06,940
or with a with a side channel attack

435
00:21:03,490 --> 00:21:09,580
that you might have and so this is the

436
00:21:06,940 --> 00:21:10,540
end this brings up well some of the

437
00:21:09,580 --> 00:21:14,439
attacks that have mentioned previously

438
00:21:10,540 --> 00:21:16,300
definitely the Zalesky attack where you

439
00:21:14,440 --> 00:21:18,310
can inject data and the interception

440
00:21:16,300 --> 00:21:22,180
attack that was suggested by Galaga

441
00:21:18,310 --> 00:21:24,850
Hertzberg and to sum up I have a few

442
00:21:22,180 --> 00:21:26,710
takeaways that I want to share the first

443
00:21:24,850 --> 00:21:29,139
is actually to reiterate every article

444
00:21:26,710 --> 00:21:32,320
that mentioned here mentioned this

445
00:21:29,140 --> 00:21:34,150
research there stating both we do

446
00:21:32,320 --> 00:21:37,300
anything you can to not fragment in your

447
00:21:34,150 --> 00:21:39,280
network and the second one is my own

448
00:21:37,300 --> 00:21:43,600
thoughts that you should never never

449
00:21:39,280 --> 00:21:46,210
refactor working code it's not worth it

450
00:21:43,600 --> 00:21:50,639
and the third piece would be my advice

451
00:21:46,210 --> 00:21:52,960
to you go out on your search such

452
00:21:50,640 --> 00:21:56,020
pillars of Windows things that are

453
00:21:52,960 --> 00:21:59,830
considered picked clean such as tcp/ip

454
00:21:56,020 --> 00:22:01,930
sis and you will find it will find it

455
00:21:59,830 --> 00:22:06,610
before automated tools if this is an

456
00:22:01,930 --> 00:22:08,590
example and thank you yeah that's all I

457
00:22:06,610 --> 00:22:10,030
have if you have a question if you have

458
00:22:08,590 --> 00:22:14,600
questions this is a time where also

459
00:22:10,030 --> 00:22:22,139
easily found in on mail Twitter

460
00:22:14,600 --> 00:22:24,899
that's it Thanks thank you guys all

461
00:22:22,140 --> 00:22:27,690
right this is the same question a really

462
00:22:24,900 --> 00:22:30,450
quick one because we have two minutes if

463
00:22:27,690 --> 00:22:33,510
someone I can't see but if someone's

464
00:22:30,450 --> 00:22:34,950
raising his hand I don't see but maybe

465
00:22:33,510 --> 00:22:40,080
you can see if something's raising his

466
00:22:34,950 --> 00:22:42,450
hand oh there's a guy Thanks

467
00:22:40,080 --> 00:22:44,669
has this been attached and what's the

468
00:22:42,450 --> 00:22:48,300
timeline on that all right it has been

469
00:22:44,670 --> 00:22:51,420
patched on not this not the November

470
00:22:48,300 --> 00:22:54,090
past Tuesday but October 1 so it's quite

471
00:22:51,420 --> 00:22:56,190
recent and I therefore I think it's

472
00:22:54,090 --> 00:22:56,790
worthwhile to experiment with it with

473
00:22:56,190 --> 00:22:58,830
those attacks

474
00:22:56,790 --> 00:23:01,350
I definitely gonna see it in the next

475
00:22:58,830 --> 00:23:05,720
few months on production and networks

476
00:23:01,350 --> 00:23:09,120
and a timeline has been four months

477
00:23:05,720 --> 00:23:12,270
until they have disclosed it and until

478
00:23:09,120 --> 00:23:16,229
they have patched it after my disclosure

479
00:23:12,270 --> 00:23:20,280
and that answer is yeah thanks

480
00:23:16,230 --> 00:23:24,240
all right so I think we have time for

481
00:23:20,280 --> 00:23:29,250
just a quick one if anyone all right you

482
00:23:24,240 --> 00:23:32,359
can catch me in the hallway thank you

483
00:23:29,250 --> 00:23:32,359
[Applause]

