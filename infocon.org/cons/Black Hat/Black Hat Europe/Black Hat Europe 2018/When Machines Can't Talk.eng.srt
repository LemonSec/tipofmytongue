1
00:00:00,030 --> 00:00:05,730
my name is Federico McGee I am a senior

2
00:00:02,970 --> 00:00:08,970
researcher at Trend Micro research and

3
00:00:05,730 --> 00:00:12,719
I'm here today with my former PhD

4
00:00:08,970 --> 00:00:16,830
student Davide cuarta who is now postdoc

5
00:00:12,719 --> 00:00:17,869
researcher at eurocom and we're going to

6
00:00:16,830 --> 00:00:22,259
be talking about

7
00:00:17,869 --> 00:00:24,930
mqtt and co-op which are two prominent

8
00:00:22,260 --> 00:00:27,510
machine-to-machine protocols that work

9
00:00:24,930 --> 00:00:29,580
at the data layer and I'm going to be

10
00:00:27,510 --> 00:00:33,000
showing you some security and privacy

11
00:00:29,580 --> 00:00:39,089
issues and and see how this can be

12
00:00:33,000 --> 00:00:41,460
mitigated in the future this research

13
00:00:39,090 --> 00:00:44,190
has been conducted in collaboration or

14
00:00:41,460 --> 00:00:46,620
with the support of stefano de niro who

15
00:00:44,190 --> 00:00:49,050
is our academic father so we're kind of

16
00:00:46,620 --> 00:00:52,260
academic brothers it's been advisor for

17
00:00:49,050 --> 00:00:54,390
both of us in boolean shepherd who has

18
00:00:52,260 --> 00:00:58,559
been de vidas manager during his

19
00:00:54,390 --> 00:01:02,579
internship at Qualcomm psi all right

20
00:00:58,559 --> 00:01:04,860
let's dig into it you might not know it

21
00:01:02,579 --> 00:01:08,670
but if you're using facebook Messenger

22
00:01:04,860 --> 00:01:11,369
you are using MQTT MQTT is very

23
00:01:08,670 --> 00:01:12,960
efficient for you know distributed

24
00:01:11,369 --> 00:01:15,350
messaging that is being used for

25
00:01:12,960 --> 00:01:18,408
everything it's been invented by IBM for

26
00:01:15,350 --> 00:01:20,729
IBM for home automation and it's now

27
00:01:18,409 --> 00:01:23,460
growing super fast and being in being

28
00:01:20,729 --> 00:01:27,240
adopted everywhere from industry to home

29
00:01:23,460 --> 00:01:28,500
automation and lots of things clearly

30
00:01:27,240 --> 00:01:30,720
Facebook Messenger

31
00:01:28,500 --> 00:01:33,119
isn't the only application that is using

32
00:01:30,720 --> 00:01:35,579
MQTT many application have embraced it

33
00:01:33,119 --> 00:01:37,530
and are using it a lot the reason why

34
00:01:35,579 --> 00:01:39,149
I'm showing this application here which

35
00:01:37,530 --> 00:01:41,640
is a business-to-business

36
00:01:39,150 --> 00:01:44,520
group who air application for a Korean

37
00:01:41,640 --> 00:01:48,750
audience is because I found it during

38
00:01:44,520 --> 00:01:52,860
this research and the reason why I found

39
00:01:48,750 --> 00:01:55,829
it is that I found a leak message which

40
00:01:52,860 --> 00:01:58,110
was directed to some of the of the users

41
00:01:55,829 --> 00:01:59,880
of this application which was talking

42
00:01:58,110 --> 00:02:01,140
about something that you know looks

43
00:01:59,880 --> 00:02:03,420
pretty critical to me

44
00:02:01,140 --> 00:02:06,630
so like a you urgent message of a

45
00:02:03,420 --> 00:02:08,128
maintenance of design and supply of high

46
00:02:06,630 --> 00:02:11,370
pressure vessel so something that you

47
00:02:08,128 --> 00:02:12,560
know caught my attention this is what

48
00:02:11,370 --> 00:02:17,330
happened

49
00:02:12,560 --> 00:02:21,160
when the endpoint used in MQTT messaging

50
00:02:17,330 --> 00:02:25,490
our insecured that an actor can get

51
00:02:21,160 --> 00:02:26,959
access to these kind of messages and it

52
00:02:25,490 --> 00:02:29,510
happens that the users of these

53
00:02:26,959 --> 00:02:31,790
applications are in just friends we're

54
00:02:29,510 --> 00:02:34,940
talking about the weather happen to be

55
00:02:31,790 --> 00:02:36,920
critical industries in these sectors so

56
00:02:34,940 --> 00:02:37,640
a large consumer electronic that I will

57
00:02:36,920 --> 00:02:40,510
not name

58
00:02:37,640 --> 00:02:42,649
I found messages talking about

59
00:02:40,510 --> 00:02:45,440
industries in the Machine marine

60
00:02:42,650 --> 00:02:49,220
industry automotive civil engineering

61
00:02:45,440 --> 00:02:53,120
logistics medical lots of messages on

62
00:02:49,220 --> 00:02:58,640
critical with critical content or highly

63
00:02:53,120 --> 00:03:01,489
sensitive content at least so I hope I

64
00:02:58,640 --> 00:03:03,200
at least got some of your attention I'll

65
00:03:01,489 --> 00:03:05,000
try to get the rest of your attention if

66
00:03:03,200 --> 00:03:10,690
maybe a technical audience about how

67
00:03:05,000 --> 00:03:12,890
let's see how MQTT works MQTT is a

68
00:03:10,690 --> 00:03:16,280
publish/subscribe protocol you have a

69
00:03:12,890 --> 00:03:18,859
broker that talks to clients clients can

70
00:03:16,280 --> 00:03:21,260
subscribe to a certain topic you see

71
00:03:18,860 --> 00:03:24,400
that pass like expression at the ball at

72
00:03:21,260 --> 00:03:27,609
the top is like I want to know about

73
00:03:24,400 --> 00:03:31,370
station one substation three and then

74
00:03:27,610 --> 00:03:33,500
wild card so imagine this in a kind of a

75
00:03:31,370 --> 00:03:35,450
like a no power plant or something like

76
00:03:33,500 --> 00:03:39,079
that you have several station nodes that

77
00:03:35,450 --> 00:03:41,119
communicate to each other clients can

78
00:03:39,079 --> 00:03:43,820
also publish content under a certain

79
00:03:41,120 --> 00:03:46,280
topic for example here the node from

80
00:03:43,820 --> 00:03:49,190
station one substation three reactor

81
00:03:46,280 --> 00:03:51,680
three is publishing sensory data about

82
00:03:49,190 --> 00:03:52,700
the temperature and the payload is 500

83
00:03:51,680 --> 00:03:56,209
whatever that means

84
00:03:52,700 --> 00:03:57,709
okay clearly there might be more clients

85
00:03:56,209 --> 00:03:59,650
lots of clients this is built for

86
00:03:57,709 --> 00:04:02,480
scalability so if you want you can even

87
00:03:59,650 --> 00:04:05,959
have multiple brokers generally the

88
00:04:02,480 --> 00:04:10,280
functionality of the broker is one but

89
00:04:05,959 --> 00:04:12,709
you can mirror it alright so this talk

90
00:04:10,280 --> 00:04:15,200
is also about coop coop is kind of the

91
00:04:12,709 --> 00:04:17,269
rookie I mean the new entry in in the

92
00:04:15,200 --> 00:04:20,750
field of data protocols scope is

93
00:04:17,269 --> 00:04:22,820
different coop is a client-server

94
00:04:20,750 --> 00:04:24,950
mechanism so you have a bunch of client

95
00:04:22,820 --> 00:04:26,000
and a bunch of server in a network of

96
00:04:24,950 --> 00:04:28,849
nodes

97
00:04:26,000 --> 00:04:32,980
they talk pretty much like your browser

98
00:04:28,850 --> 00:04:37,280
talks with talk to a server so you have

99
00:04:32,980 --> 00:04:39,410
your eyes like in HTTP clients can send

100
00:04:37,280 --> 00:04:41,960
content to mess to two servers and

101
00:04:39,410 --> 00:04:44,930
servers can AK or answer back with the

102
00:04:41,960 --> 00:04:47,659
payload so it's a very flexible protocol

103
00:04:44,930 --> 00:04:49,580
it's more like a networking library so

104
00:04:47,660 --> 00:04:53,450
if you look at the network stack what

105
00:04:49,580 --> 00:04:58,130
you have is something like this usually

106
00:04:53,450 --> 00:05:01,280
it sets on UDP for efficiency reasons

107
00:04:58,130 --> 00:05:03,530
this is meant for very low power nodes

108
00:05:01,280 --> 00:05:05,210
with maybe a battery you don't want to

109
00:05:03,530 --> 00:05:06,950
keep the connection open for a long time

110
00:05:05,210 --> 00:05:08,659
so you just send a message and you hope

111
00:05:06,950 --> 00:05:11,930
that it will get delivered but you can

112
00:05:08,660 --> 00:05:14,000
still get some ACK functionality so that

113
00:05:11,930 --> 00:05:18,260
you know at least that your message was

114
00:05:14,000 --> 00:05:22,190
received mqtt is getting more and more

115
00:05:18,260 --> 00:05:24,760
popular and co-op is also gaining a lot

116
00:05:22,190 --> 00:05:27,860
of attention

117
00:05:24,760 --> 00:05:29,960
they are both implemented in most of the

118
00:05:27,860 --> 00:05:32,720
languages that we know this is a example

119
00:05:29,960 --> 00:05:34,580
search on github just to give a you know

120
00:05:32,720 --> 00:05:36,950
glance to - what it is - what it looks

121
00:05:34,580 --> 00:05:39,380
like every language implements MQTT and

122
00:05:36,950 --> 00:05:41,750
the same goes for coop if you go on coop

123
00:05:39,380 --> 00:05:44,750
dot technology I think you will find all

124
00:05:41,750 --> 00:05:49,220
the implementation of coop so very

125
00:05:44,750 --> 00:05:52,940
popular among the applications that

126
00:05:49,220 --> 00:05:54,200
these two protocols are good for the

127
00:05:52,940 --> 00:05:57,860
first one that comes to mind is

128
00:05:54,200 --> 00:06:00,650
telemetry in a controlled environment in

129
00:05:57,860 --> 00:06:02,840
a control system most genetic the

130
00:06:00,650 --> 00:06:04,969
picture I think I can think of we have

131
00:06:02,840 --> 00:06:09,890
control software that received telemetry

132
00:06:04,970 --> 00:06:11,540
data from sensors very easy again this

133
00:06:09,890 --> 00:06:13,370
is an example of a message I found in

134
00:06:11,540 --> 00:06:16,280
the wild I will tell you more about

135
00:06:13,370 --> 00:06:18,650
where these messages are coming from I

136
00:06:16,280 --> 00:06:21,260
want to keep a bit of suspense to see if

137
00:06:18,650 --> 00:06:23,950
this works this is a message coming

138
00:06:21,260 --> 00:06:26,630
allegedly from an industrial pump and

139
00:06:23,950 --> 00:06:30,260
the content of the sensory data include

140
00:06:26,630 --> 00:06:32,240
for example pressure or something that

141
00:06:30,260 --> 00:06:33,950
looks like a chemical analysis of the

142
00:06:32,240 --> 00:06:36,860
content that is flowing through these

143
00:06:33,950 --> 00:06:38,469
pumps I think that's what I was able to

144
00:06:36,860 --> 00:06:41,650
find out

145
00:06:38,470 --> 00:06:44,050
or another example of real message I

146
00:06:41,650 --> 00:06:47,080
found in the wild this is coming from a

147
00:06:44,050 --> 00:06:49,840
CNC machine you can see the position of

148
00:06:47,080 --> 00:06:51,640
exact of each axis being transmitted

149
00:06:49,840 --> 00:06:56,289
periodically to the control software

150
00:06:51,640 --> 00:06:58,960
through mqtt in this case another

151
00:06:56,290 --> 00:07:01,390
example this is a laser cutter allegedly

152
00:06:58,960 --> 00:07:04,870
from Mitsubishi you can see it here at

153
00:07:01,390 --> 00:07:07,599
the bottom which is sending power data

154
00:07:04,870 --> 00:07:12,400
or power sensory data to a control

155
00:07:07,600 --> 00:07:14,890
software you may say okay this is

156
00:07:12,400 --> 00:07:17,020
interesting but it's only a privacy

157
00:07:14,890 --> 00:07:18,640
problem you're showing us that in the

158
00:07:17,020 --> 00:07:20,710
wild there has been leaks of these

159
00:07:18,640 --> 00:07:22,930
messages yes that's true that's

160
00:07:20,710 --> 00:07:26,049
primarily a privacy problem but it's

161
00:07:22,930 --> 00:07:29,260
also a problem where the attacker might

162
00:07:26,050 --> 00:07:31,060
be able to spoof telemetry messages

163
00:07:29,260 --> 00:07:34,180
because telemetry messages are used

164
00:07:31,060 --> 00:07:35,830
ultimately to make a decision the

165
00:07:34,180 --> 00:07:37,840
control software has to know what the

166
00:07:35,830 --> 00:07:40,510
sensors are doing in order to take a

167
00:07:37,840 --> 00:07:42,369
decision so even if an attacker only

168
00:07:40,510 --> 00:07:44,530
have access to the telemetry information

169
00:07:42,370 --> 00:07:46,780
or only you have spoofing capability of

170
00:07:44,530 --> 00:07:49,659
the telemetry data the attacker might

171
00:07:46,780 --> 00:07:53,619
indirectly be able to come to influence

172
00:07:49,660 --> 00:07:57,100
the control system another good

173
00:07:53,620 --> 00:07:59,740
application for co-op and MQTT is device

174
00:07:57,100 --> 00:08:02,560
management so in a again same diagram

175
00:07:59,740 --> 00:08:04,240
you have you have to bootstrap your

176
00:08:02,560 --> 00:08:05,950
nodes you have to set network

177
00:08:04,240 --> 00:08:09,160
credentials you have to set network

178
00:08:05,950 --> 00:08:12,310
details and all sorts of stuff here's an

179
00:08:09,160 --> 00:08:14,970
example of half million nodes I found

180
00:08:12,310 --> 00:08:17,350
but you know simple short and search

181
00:08:14,970 --> 00:08:20,380
leaking this kind of information through

182
00:08:17,350 --> 00:08:23,440
co-op you could find the passwords you

183
00:08:20,380 --> 00:08:24,969
can find the network details of of the

184
00:08:23,440 --> 00:08:26,830
devices and there are something like

185
00:08:24,970 --> 00:08:29,260
half million of these devices out there

186
00:08:26,830 --> 00:08:33,250
so at least I know co-op is being used

187
00:08:29,260 --> 00:08:35,049
for that another type of application is

188
00:08:33,250 --> 00:08:38,500
command queuing just the most obvious

189
00:08:35,049 --> 00:08:40,929
one you want to send actuation comments

190
00:08:38,500 --> 00:08:42,969
to to your system here's an example

191
00:08:40,929 --> 00:08:45,189
command I hope this is coming from a

192
00:08:42,969 --> 00:08:47,589
test system not for a real system

193
00:08:45,190 --> 00:08:50,140
because if it's a real system it's a

194
00:08:47,589 --> 00:08:52,000
metro station in Shenzhen City and the

195
00:08:50,140 --> 00:08:53,380
command is our is about let's all

196
00:08:52,000 --> 00:08:55,240
when the door and the command is

197
00:08:53,380 --> 00:08:59,860
actually executing so I really hope this

198
00:08:55,240 --> 00:09:01,900
is a test system very sensitive

199
00:08:59,860 --> 00:09:05,590
application for these two protocols is

200
00:09:01,900 --> 00:09:10,209
firmer over update capabilities and yes

201
00:09:05,590 --> 00:09:13,390
we found on the open Internet the actual

202
00:09:10,210 --> 00:09:16,090
image of the firmware update in an

203
00:09:13,390 --> 00:09:18,130
unsecured node flowing out for everyone

204
00:09:16,090 --> 00:09:21,880
to see what you see in the second block

205
00:09:18,130 --> 00:09:25,540
is the base64 encoded raw binary image

206
00:09:21,880 --> 00:09:27,700
of the farmer the first line you see the

207
00:09:25,540 --> 00:09:29,469
URL where the node could fetch the

208
00:09:27,700 --> 00:09:31,330
firmware upgrade so it's same

209
00:09:29,470 --> 00:09:33,580
functionality but the second one is

210
00:09:31,330 --> 00:09:35,860
pretty striking to me the last one is

211
00:09:33,580 --> 00:09:38,530
also another example of a firmware is

212
00:09:35,860 --> 00:09:41,800
written in Lua so probably it's for some

213
00:09:38,530 --> 00:09:46,120
network nodes still gives you an idea of

214
00:09:41,800 --> 00:09:48,490
how these protocols could be used I got

215
00:09:46,120 --> 00:09:50,560
evidence that these protocols are also

216
00:09:48,490 --> 00:09:52,330
used in industry applications not only

217
00:09:50,560 --> 00:09:54,430
by talking to two people who work in the

218
00:09:52,330 --> 00:09:58,120
field but also by doing some some some

219
00:09:54,430 --> 00:10:00,219
search in the data that I've analyzed we

220
00:09:58,120 --> 00:10:02,470
found products such as main flux which

221
00:10:00,220 --> 00:10:05,250
is an open source industrial IOT

222
00:10:02,470 --> 00:10:11,200
management framework we found more

223
00:10:05,250 --> 00:10:13,540
bigger ones like cap wear or PTC which

224
00:10:11,200 --> 00:10:16,630
are you know well known industrial UT

225
00:10:13,540 --> 00:10:20,319
frameworks we also found that

226
00:10:16,630 --> 00:10:22,810
mqtt is very good to be used in protocol

227
00:10:20,320 --> 00:10:26,020
translation some sort of as the lingua

228
00:10:22,810 --> 00:10:28,449
franca to go from I don't know Modbus to

229
00:10:26,020 --> 00:10:30,760
profinet or something like that because

230
00:10:28,450 --> 00:10:35,170
it's very generic it just transports

231
00:10:30,760 --> 00:10:37,270
data in a distributed fashion and I

232
00:10:35,170 --> 00:10:39,670
found again by looking at these data

233
00:10:37,270 --> 00:10:42,880
which I haven't tell you yet where it's

234
00:10:39,670 --> 00:10:46,689
coming from I found evidence that these

235
00:10:42,880 --> 00:10:50,140
are the protocols that are used for that

236
00:10:46,690 --> 00:10:51,730
are being transported over MQTT so you

237
00:10:50,140 --> 00:10:54,370
can see that there are pretty propriety

238
00:10:51,730 --> 00:10:57,430
pretty you know very industrial protocol

239
00:10:54,370 --> 00:10:59,430
such as j1939 which is used for like

240
00:10:57,430 --> 00:11:02,279
industry automation and

241
00:10:59,430 --> 00:11:07,229
truck management like in vehicle Network

242
00:11:02,279 --> 00:11:09,660
for big trucks so I hope I convinced you

243
00:11:07,230 --> 00:11:12,899
by this point that these two protocols

244
00:11:09,660 --> 00:11:15,120
are playing a critical role for industry

245
00:11:12,899 --> 00:11:18,810
IOT solutions there are several

246
00:11:15,120 --> 00:11:21,660
solutions which depend on this so you

247
00:11:18,810 --> 00:11:24,420
may say okay fine many protocols are

248
00:11:21,660 --> 00:11:25,649
used in this fit in this in this area

249
00:11:24,420 --> 00:11:28,829
what's the problem what is the problem

250
00:11:25,649 --> 00:11:32,100
with that well the first problem is

251
00:11:28,830 --> 00:11:36,600
where the data I showed you comes from

252
00:11:32,100 --> 00:11:38,880
and how easy it is if there is an

253
00:11:36,600 --> 00:11:41,010
Instagram secured node how easy it is

254
00:11:38,880 --> 00:11:45,270
for an attacker to collect this kind of

255
00:11:41,010 --> 00:11:48,120
data highlighted the hash sign because

256
00:11:45,270 --> 00:11:51,480
it has a very specific semantics in MQTT

257
00:11:48,120 --> 00:11:54,029
it means everything it's a wild-card

258
00:11:51,480 --> 00:11:56,490
topic so if you subscribe to a broker

259
00:11:54,029 --> 00:11:58,920
and you tell the broker I want to listen

260
00:11:56,490 --> 00:12:01,320
to everything the broker will just send

261
00:11:58,920 --> 00:12:04,110
you everything because that that's the

262
00:12:01,320 --> 00:12:05,940
protocol that's by design okay so a

263
00:12:04,110 --> 00:12:09,810
small mistake in the deployment if you

264
00:12:05,940 --> 00:12:11,400
leave a broker open which you know could

265
00:12:09,810 --> 00:12:13,800
happen even for a short period of time

266
00:12:11,400 --> 00:12:16,020
all the communication can be sniffed by

267
00:12:13,800 --> 00:12:17,550
everyone by just subscribing with a

268
00:12:16,020 --> 00:12:20,939
command that is part of the protocol

269
00:12:17,550 --> 00:12:23,550
that's the first big problem I'm not the

270
00:12:20,940 --> 00:12:27,089
first one talking about this last year

271
00:12:23,550 --> 00:12:29,459
at blackhat US and Afghan Lucas

272
00:12:27,089 --> 00:12:32,520
laundering from Lundgren from ioactive

273
00:12:29,459 --> 00:12:34,800
has I liked it a similar problem he went

274
00:12:32,520 --> 00:12:36,930
on the open Internet and mast scan the

275
00:12:34,800 --> 00:12:40,819
entire IP space and he was able to find

276
00:12:36,930 --> 00:12:44,640
something like 90,000 almost 80,000 node

277
00:12:40,820 --> 00:12:47,610
brokers who would just send stuff -

278
00:12:44,640 --> 00:12:51,980
whatever - whichever client would

279
00:12:47,610 --> 00:12:55,260
subscribe to them so I said let's see if

280
00:12:51,980 --> 00:12:57,360
this this research helped raising some

281
00:12:55,260 --> 00:13:00,319
awareness let's see if if detailed

282
00:12:57,360 --> 00:13:02,820
people becoming more more aware I

283
00:13:00,320 --> 00:13:05,070
repeated the experiment for four months

284
00:13:02,820 --> 00:13:07,650
at the beginning of this year you can

285
00:13:05,070 --> 00:13:09,420
see the baseline here 87,000 brokers and

286
00:13:07,650 --> 00:13:11,910
you can see how many unique IPS I was

287
00:13:09,420 --> 00:13:13,949
able to find by just

288
00:13:11,910 --> 00:13:16,199
you know show them searching the entire

289
00:13:13,950 --> 00:13:19,530
entire ap space so this shows how much

290
00:13:16,200 --> 00:13:22,080
new brokers are popping up out there

291
00:13:19,530 --> 00:13:23,370
every day and the situation for coop is

292
00:13:22,080 --> 00:13:26,100
not different it's actually probably

293
00:13:23,370 --> 00:13:28,560
worse more and more of these nodes are

294
00:13:26,100 --> 00:13:30,480
popping up and the thing is that these

295
00:13:28,560 --> 00:13:32,250
protocols haven't been invented for I

296
00:13:30,480 --> 00:13:34,860
mean they're not really meant to be

297
00:13:32,250 --> 00:13:35,870
exposed you know easily like that on the

298
00:13:34,860 --> 00:13:37,650
Internet

299
00:13:35,870 --> 00:13:42,000
they've been invented for home

300
00:13:37,650 --> 00:13:43,980
automation scenario studies MQTT so the

301
00:13:42,000 --> 00:13:46,740
question now is okay how many of these

302
00:13:43,980 --> 00:13:48,000
are really leaking data I don't think

303
00:13:46,740 --> 00:13:49,380
that's the most interesting question I

304
00:13:48,000 --> 00:13:52,530
think the most interesting question is

305
00:13:49,380 --> 00:13:56,750
what kind of data is in there right if

306
00:13:52,530 --> 00:13:56,750
it's only 200 brokers which are actually

307
00:13:57,260 --> 00:14:01,100
sending out very critical data that's a

308
00:14:00,120 --> 00:14:04,170
big problem for me

309
00:14:01,100 --> 00:14:06,420
so I sat down and said let's try to

310
00:14:04,170 --> 00:14:09,660
automatically categorize all of the data

311
00:14:06,420 --> 00:14:12,180
all of the messages that we were able to

312
00:14:09,660 --> 00:14:14,610
see by connecting to these brokers so I

313
00:14:12,180 --> 00:14:17,310
brought a few pattern matching routines

314
00:14:14,610 --> 00:14:19,140
and I try to assign keywords to the data

315
00:14:17,310 --> 00:14:20,729
and that I was able to collect this is

316
00:14:19,140 --> 00:14:23,160
only 10 percent of the data that I

317
00:14:20,730 --> 00:14:24,570
collected which is the amount of data

318
00:14:23,160 --> 00:14:26,819
that I was able to automatically

319
00:14:24,570 --> 00:14:29,040
categorize automatically means I didn't

320
00:14:26,820 --> 00:14:31,770
take a look at the data itself manually

321
00:14:29,040 --> 00:14:33,900
so you can see that these protocols are

322
00:14:31,770 --> 00:14:35,910
being used for even critical for

323
00:14:33,900 --> 00:14:37,829
transforming or transporting critical

324
00:14:35,910 --> 00:14:40,290
information in the in every sector

325
00:14:37,830 --> 00:14:41,250
basically positioning means like

326
00:14:40,290 --> 00:14:42,839
coordinates

327
00:14:41,250 --> 00:14:45,840
I found vehicles with precise

328
00:14:42,840 --> 00:14:48,360
coordinates transportation emergency I

329
00:14:45,840 --> 00:14:50,850
found ambulances broadcasting their

330
00:14:48,360 --> 00:14:52,610
position in front of a hospital industry

331
00:14:50,850 --> 00:14:54,990
control system I found robots

332
00:14:52,610 --> 00:14:58,680
broadcasting the position of their

333
00:14:54,990 --> 00:15:00,360
movements right so by this point you

334
00:14:58,680 --> 00:15:01,920
said okay but this is just a deployment

335
00:15:00,360 --> 00:15:04,140
problem we just have to you know

336
00:15:01,920 --> 00:15:07,110
broadcast your talk to enough people

337
00:15:04,140 --> 00:15:09,120
until we convince them to close up those

338
00:15:07,110 --> 00:15:11,190
deployments and make it you know make

339
00:15:09,120 --> 00:15:13,080
the world brighter I don't think it's

340
00:15:11,190 --> 00:15:16,200
just the problem problem and I will ask

341
00:15:13,080 --> 00:15:20,160
David to explain you why thanks Federico

342
00:15:16,200 --> 00:15:21,840
so he came out actually like I said like

343
00:15:20,160 --> 00:15:24,430
a serendipity moment because we were

344
00:15:21,840 --> 00:15:26,770
working on this at the same moment and

345
00:15:24,430 --> 00:15:31,540
didn't even know and I was actually

346
00:15:26,770 --> 00:15:33,640
looking at the standard so digging in a

347
00:15:31,540 --> 00:15:36,160
standard that we can look at the first

348
00:15:33,640 --> 00:15:40,060
problem which is passing these topic

349
00:15:36,160 --> 00:15:41,860
filters so when a client subscriber he

350
00:15:40,060 --> 00:15:44,050
will ask okay I want to subscribe to

351
00:15:41,860 --> 00:15:47,980
this given topic and the broker will

352
00:15:44,050 --> 00:15:50,920
filter the messages and send them to the

353
00:15:47,980 --> 00:15:53,380
clients that subscribed for example here

354
00:15:50,920 --> 00:15:55,660
somebody subscribed to station one

355
00:15:53,380 --> 00:15:59,320
substation three and another again is

356
00:15:55,660 --> 00:16:01,180
the same example as before and if we

357
00:15:59,320 --> 00:16:03,490
look at the standard the standard goes a

358
00:16:01,180 --> 00:16:05,800
long way into telling you okay these are

359
00:16:03,490 --> 00:16:09,010
like the path separators the wild card

360
00:16:05,800 --> 00:16:12,550
this is everything and well how do we

361
00:16:09,010 --> 00:16:15,880
match it did somebody think okay let's

362
00:16:12,550 --> 00:16:19,810
do a regex well that's how probably

363
00:16:15,880 --> 00:16:23,740
topic filter filters should not be

364
00:16:19,810 --> 00:16:26,790
implemented why because when a client

365
00:16:23,740 --> 00:16:29,260
think of an attacker has access to both

366
00:16:26,790 --> 00:16:32,319
publishing a given topic but also

367
00:16:29,260 --> 00:16:35,080
defining the subscription he can define

368
00:16:32,320 --> 00:16:37,360
the actual reg X that gets matched and

369
00:16:35,080 --> 00:16:39,610
what's the problem here well it's like a

370
00:16:37,360 --> 00:16:42,010
problem known it was for a long time

371
00:16:39,610 --> 00:16:44,260
even in the most top ten vulnerabilities

372
00:16:42,010 --> 00:16:46,860
we can have a regular expression denial

373
00:16:44,260 --> 00:16:52,150
of service in a certain situation

374
00:16:46,860 --> 00:16:55,570
regular expression can get evaluated in

375
00:16:52,150 --> 00:16:58,390
an exponential time so we found this

376
00:16:55,570 --> 00:17:00,970
issue in Mosca which is a very popular

377
00:16:58,390 --> 00:17:03,790
brokers one of the most popular ones and

378
00:17:00,970 --> 00:17:05,980
as a bonus we were even able to crash it

379
00:17:03,790 --> 00:17:07,809
because there was an exception and catch

380
00:17:05,980 --> 00:17:09,790
then you could just feed it an

381
00:17:07,809 --> 00:17:12,609
unterminated regular expression it will

382
00:17:09,790 --> 00:17:16,800
happily crash so let me show you a proof

383
00:17:12,609 --> 00:17:16,800
of concept for this vulnerability

384
00:17:17,050 --> 00:17:26,030
okay so here on the upper left

385
00:17:23,390 --> 00:17:28,700
there's the broker starting and it was

386
00:17:26,030 --> 00:17:32,660
set up with the configuration to store

387
00:17:28,700 --> 00:17:35,260
all the messages in MongoDB and on the

388
00:17:32,660 --> 00:17:38,000
hopper right I'm sorry you can see it

389
00:17:35,260 --> 00:17:40,820
we're just sending like this small

390
00:17:38,000 --> 00:17:43,610
SUBSCRIBE message with just this open

391
00:17:40,820 --> 00:17:47,300
bracket and nothing else and what the

392
00:17:43,610 --> 00:17:50,090
broker had been crushed that's better so

393
00:17:47,300 --> 00:17:54,950
you didn't see the exploit yeah we were

394
00:17:50,090 --> 00:17:56,870
concerned but so let's dig further in

395
00:17:54,950 --> 00:18:00,920
the standard and in implementations

396
00:17:56,870 --> 00:18:04,370
another problem we found is that as much

397
00:18:00,920 --> 00:18:06,440
simple as this protocol is you still

398
00:18:04,370 --> 00:18:08,540
have some eat then complete City when

399
00:18:06,440 --> 00:18:10,550
parsing the packets and I'm referring in

400
00:18:08,540 --> 00:18:12,830
particular to the remaining length field

401
00:18:10,550 --> 00:18:15,080
of the packet it's a field that will

402
00:18:12,830 --> 00:18:17,780
tell you okay I'm sending you like this

403
00:18:15,080 --> 00:18:20,720
fixed amount of data this is your packet

404
00:18:17,780 --> 00:18:22,879
it's a control packet and the rest of

405
00:18:20,720 --> 00:18:25,370
the data that I'm sending you is long I

406
00:18:22,880 --> 00:18:28,240
don't know 256 megabytes it's the most

407
00:18:25,370 --> 00:18:32,389
you should be able to send over mqtt

408
00:18:28,240 --> 00:18:35,450
again the standard is I think pretty

409
00:18:32,390 --> 00:18:39,170
clear and the characteristics that this

410
00:18:35,450 --> 00:18:42,260
field has how to use it they even go as

411
00:18:39,170 --> 00:18:44,300
far as giving some pseudocode in order

412
00:18:42,260 --> 00:18:47,750
for you for a developer to implement the

413
00:18:44,300 --> 00:18:50,360
parsing of this field problem is that

414
00:18:47,750 --> 00:18:51,710
there's not check on the boundaries so

415
00:18:50,360 --> 00:18:57,110
you might end up in a buffer overflow

416
00:18:51,710 --> 00:18:59,300
situation this was in the first version

417
00:18:57,110 --> 00:19:00,439
a public version I think of the standard

418
00:18:59,300 --> 00:19:03,889
the version 3.1

419
00:19:00,440 --> 00:19:06,500
he got fixed in the version 3.1 does one

420
00:19:03,890 --> 00:19:10,370
but still the order of the check was

421
00:19:06,500 --> 00:19:13,280
wrong and it finally got fixed in the

422
00:19:10,370 --> 00:19:15,800
version in an errata for the latest

423
00:19:13,280 --> 00:19:19,310
version so this shouldn't be surprising

424
00:19:15,800 --> 00:19:21,500
I mean it's quite hard to parse natural

425
00:19:19,310 --> 00:19:22,399
language so you don't have a debugger

426
00:19:21,500 --> 00:19:24,650
you don't have anything

427
00:19:22,400 --> 00:19:26,480
mistakes like this can happen but when

428
00:19:24,650 --> 00:19:29,090
we go from the specification to call

429
00:19:26,480 --> 00:19:30,820
well we found this in the world in one

430
00:19:29,090 --> 00:19:33,290
of the most popular

431
00:19:30,820 --> 00:19:35,870
implementations of MQTT for arduino and

432
00:19:33,290 --> 00:19:38,780
you might be thinking okay but Arduino

433
00:19:35,870 --> 00:19:42,679
is just for all beasts you know no we

434
00:19:38,780 --> 00:19:47,379
found that Arduino this library for

435
00:19:42,680 --> 00:19:50,050
Arduino was suggested and you is used by

436
00:19:47,380 --> 00:19:54,950
clients of law Center which is a

437
00:19:50,050 --> 00:19:56,930
multi-platform provider and fortunately

438
00:19:54,950 --> 00:19:59,420
he was patched it was not patched the

439
00:19:56,930 --> 00:20:01,370
super-fast Federico will tell you later

440
00:19:59,420 --> 00:20:03,740
more about this why this kind of

441
00:20:01,370 --> 00:20:07,580
vulnerabilities gets a long time to get

442
00:20:03,740 --> 00:20:08,150
patched and we can go to the next

443
00:20:07,580 --> 00:20:11,870
problem

444
00:20:08,150 --> 00:20:13,340
so again looking at the standard you can

445
00:20:11,870 --> 00:20:16,639
get a feeling that there's something

446
00:20:13,340 --> 00:20:20,300
wrong here it's telling you okay parts

447
00:20:16,640 --> 00:20:22,630
of these messages of strings like the

448
00:20:20,300 --> 00:20:26,270
name of the client or the topic itself

449
00:20:22,630 --> 00:20:28,850
it's just a new tf8 encoded string but

450
00:20:26,270 --> 00:20:31,820
it will leave freedom to the developers

451
00:20:28,850 --> 00:20:33,620
to choose what to do when this data is

452
00:20:31,820 --> 00:20:35,570
not encoded in a good way you'll receive

453
00:20:33,620 --> 00:20:39,050
invalid data what you want to do it's up

454
00:20:35,570 --> 00:20:41,780
to the developer so as long as it's a

455
00:20:39,050 --> 00:20:44,300
valid utf-8 string everything is fine

456
00:20:41,780 --> 00:20:47,690
nobody complains if the broker

457
00:20:44,300 --> 00:20:50,210
developers choose to validate this data

458
00:20:47,690 --> 00:20:54,110
again the broker just will receive this

459
00:20:50,210 --> 00:20:59,000
message one send it to any client still

460
00:20:54,110 --> 00:21:03,080
fine but what happens instead if the

461
00:20:59,000 --> 00:21:05,420
broker doesn't validate and all the

462
00:21:03,080 --> 00:21:08,000
clients instead do well you will get

463
00:21:05,420 --> 00:21:11,180
basically a remote denial of service for

464
00:21:08,000 --> 00:21:12,860
free and it's not as bad as these

465
00:21:11,180 --> 00:21:14,810
because you say okay but the client

466
00:21:12,860 --> 00:21:18,050
might still keep on reconnecting so you

467
00:21:14,810 --> 00:21:20,899
know it's not a huge issue that's a

468
00:21:18,050 --> 00:21:22,960
feature in MQTT that is the retained

469
00:21:20,900 --> 00:21:26,450
flag where you can tell the broker

470
00:21:22,960 --> 00:21:29,300
please do send this message every time

471
00:21:26,450 --> 00:21:31,670
that the new client connects so as long

472
00:21:29,300 --> 00:21:33,620
as this con that keeps on reconnecting

473
00:21:31,670 --> 00:21:37,340
it will get again this broken message

474
00:21:33,620 --> 00:21:40,729
and keeps on disconnecting we were

475
00:21:37,340 --> 00:21:43,668
pretty happy because the NQ titi

476
00:21:40,730 --> 00:21:46,790
methi was very the interaction with them

477
00:21:43,669 --> 00:21:50,030
was really awesome and this was

478
00:21:46,790 --> 00:21:53,059
addressed in note from this standard

479
00:21:50,030 --> 00:21:55,040
committee for the actual for the current

480
00:21:53,059 --> 00:22:00,440
version let's say of the standard 3.1

481
00:21:55,040 --> 00:22:01,879
and it was included in the new version

482
00:22:00,440 --> 00:22:05,770
the fact that zero version of the

483
00:22:01,880 --> 00:22:11,360
standard some some of this was

484
00:22:05,770 --> 00:22:14,299
implemented also there so again from the

485
00:22:11,360 --> 00:22:17,659
spec to the code this issue was fixed in

486
00:22:14,299 --> 00:22:21,049
mosquito is basically the most popular

487
00:22:17,660 --> 00:22:23,720
broker out there but again that we were

488
00:22:21,049 --> 00:22:26,270
like not super happy because looking at

489
00:22:23,720 --> 00:22:29,720
the data that Federico collected were

490
00:22:26,270 --> 00:22:32,240
like okay problem is that most of the

491
00:22:29,720 --> 00:22:35,570
brokers that are out there are still a

492
00:22:32,240 --> 00:22:39,100
vulnerable version and let me show you a

493
00:22:35,570 --> 00:22:39,100
proof of concept also for this

494
00:22:45,720 --> 00:22:54,299
okay on the upper left you can see the

495
00:22:49,470 --> 00:22:56,639
broker and here on down on the right you

496
00:22:54,299 --> 00:23:00,629
can see just the client subscribe to a

497
00:22:56,639 --> 00:23:04,439
topic and I think it will miss the

498
00:23:00,629 --> 00:23:10,259
exploit also that's good it's still it's

499
00:23:04,440 --> 00:23:13,259
patched but yeah so now all the clients

500
00:23:10,259 --> 00:23:15,600
started one implements UTF I did it

501
00:23:13,259 --> 00:23:17,490
validation which is the one on the right

502
00:23:15,600 --> 00:23:22,289
and this one on the left does not

503
00:23:17,490 --> 00:23:26,250
implement utf-8 validation so no you can

504
00:23:22,289 --> 00:23:29,850
see it here we have our attacker start

505
00:23:26,250 --> 00:23:32,730
sending just packets with some invalid

506
00:23:29,850 --> 00:23:34,649
data and as you can see this client was

507
00:23:32,730 --> 00:23:36,210
fine because it didn't implement any

508
00:23:34,649 --> 00:23:39,870
validation and the one on the right

509
00:23:36,210 --> 00:23:42,120
instead crushed if we want to keep this

510
00:23:39,870 --> 00:23:45,209
client down while just studying the

511
00:23:42,120 --> 00:23:47,600
retraining retained flag true will do

512
00:23:45,210 --> 00:23:47,600
its job

513
00:23:53,620 --> 00:24:01,449
rushon so we learned a few lessons from

514
00:23:58,990 --> 00:24:03,309
this but I would let the reco talk you

515
00:24:01,450 --> 00:24:10,540
about this all right thank you that we

516
00:24:03,309 --> 00:24:14,170
do so I hope that I mean this case is

517
00:24:10,540 --> 00:24:16,750
very interesting as a learning case and

518
00:24:14,170 --> 00:24:20,620
it lets me let me spend a few words on

519
00:24:16,750 --> 00:24:25,480
the role of of standards and the role of

520
00:24:20,620 --> 00:24:28,419
standards in in security in particular I

521
00:24:25,480 --> 00:24:30,580
was very happy as as Davide was I was

522
00:24:28,420 --> 00:24:33,910
invited to join the Technical Committee

523
00:24:30,580 --> 00:24:36,070
of MQTT and the invitation was actually

524
00:24:33,910 --> 00:24:39,670
towards you know I Federico can you help

525
00:24:36,070 --> 00:24:41,649
as you know contributing with with your

526
00:24:39,670 --> 00:24:43,720
with your finding and your your thoughts

527
00:24:41,650 --> 00:24:46,600
about making the standard more and more

528
00:24:43,720 --> 00:24:49,210
secure so this is I think a very good

529
00:24:46,600 --> 00:24:51,100
approach from from the standardization

530
00:24:49,210 --> 00:24:53,080
committee we haven't been approached by

531
00:24:51,100 --> 00:24:55,178
a vendor we've been approached by the

532
00:24:53,080 --> 00:24:57,220
standardization committee so the one who

533
00:24:55,179 --> 00:25:00,640
takes care of you know all those patches

534
00:24:57,220 --> 00:25:05,080
in the standards that you have seen as

535
00:25:00,640 --> 00:25:07,030
Davide said it's very likely I mean why

536
00:25:05,080 --> 00:25:08,770
not I mean it's ok it's just a standard

537
00:25:07,030 --> 00:25:12,160
it's a document written in a natural

538
00:25:08,770 --> 00:25:14,110
language it's I think easier to

539
00:25:12,160 --> 00:25:16,809
introduce a vulnerability if you allow

540
00:25:14,110 --> 00:25:19,030
me the the terminology in a natural

541
00:25:16,809 --> 00:25:20,500
language document rather than it he is

542
00:25:19,030 --> 00:25:24,100
in see right

543
00:25:20,500 --> 00:25:26,860
because in see you have well sorry you

544
00:25:24,100 --> 00:25:29,110
have defined behavior and there are some

545
00:25:26,860 --> 00:25:31,860
undefined behavior in see but still it's

546
00:25:29,110 --> 00:25:35,439
more defined than that natural language

547
00:25:31,860 --> 00:25:38,350
processor right so you can execute see

548
00:25:35,440 --> 00:25:40,690
you can do fuzzing you can do static

549
00:25:38,350 --> 00:25:43,209
analysis you can do lots of stuff in a

550
00:25:40,690 --> 00:25:45,990
standard you cannot I mean in a

551
00:25:43,210 --> 00:25:48,970
specification you cannot really so it's

552
00:25:45,990 --> 00:25:53,320
natural that there will be some issues

553
00:25:48,970 --> 00:25:55,960
right so it's fully understandable so

554
00:25:53,320 --> 00:25:59,830
let me dig to let me go through what the

555
00:25:55,960 --> 00:26:02,140
process looks like now so now you find

556
00:25:59,830 --> 00:26:05,230
the vulnerability in a product let's say

557
00:26:02,140 --> 00:26:07,360
we take a router that uses MQTT we take

558
00:26:05,230 --> 00:26:10,210
it apart we look at the software and we

559
00:26:07,360 --> 00:26:12,399
find a vulnerability okay so we go to

560
00:26:10,210 --> 00:26:14,740
the disclosure broker or we go to the

561
00:26:12,400 --> 00:26:16,510
vendor we disclose the details of the

562
00:26:14,740 --> 00:26:18,580
patch we hope that the vendor will

563
00:26:16,510 --> 00:26:20,410
listen to us and we hope that the vendor

564
00:26:18,580 --> 00:26:23,080
will patch and we hope that the users

565
00:26:20,410 --> 00:26:25,210
will apply the patch and we hope that

566
00:26:23,080 --> 00:26:28,270
this process will go over and over and

567
00:26:25,210 --> 00:26:33,820
over so this to me looks very very

568
00:26:28,270 --> 00:26:37,929
difficult already okay but still this is

569
00:26:33,820 --> 00:26:41,830
where we are now there is also the case

570
00:26:37,929 --> 00:26:44,559
where you find a bug in a library or in

571
00:26:41,830 --> 00:26:47,049
a generic implementation that will be

572
00:26:44,559 --> 00:26:51,280
used by products and there you have

573
00:26:47,049 --> 00:26:53,860
bigger impact in the sense that if you

574
00:26:51,280 --> 00:26:56,350
find a bug here not only you have to

575
00:26:53,860 --> 00:26:58,418
make sure that you disclose the

576
00:26:56,350 --> 00:27:01,000
vulnerability that the vendor implements

577
00:26:58,419 --> 00:27:04,120
the patch in the library you also have

578
00:27:01,000 --> 00:27:06,010
to hope that the distributor of the

579
00:27:04,120 --> 00:27:08,320
library if it's not an open-source

580
00:27:06,010 --> 00:27:11,350
library will go and knock out all the

581
00:27:08,320 --> 00:27:13,990
doors of the producer and say hey you

582
00:27:11,350 --> 00:27:18,100
should update now because the library is

583
00:27:13,990 --> 00:27:20,940
as being as being patched right it's

584
00:27:18,100 --> 00:27:23,830
hard it's hard because not all of the

585
00:27:20,940 --> 00:27:27,760
implementations at this level keep track

586
00:27:23,830 --> 00:27:29,250
of the uses of their library so it's not

587
00:27:27,760 --> 00:27:31,780
something that can be done by simply

588
00:27:29,250 --> 00:27:34,919
disclosing a patch to someone right the

589
00:27:31,780 --> 00:27:37,990
disclosure itself is an easy process

590
00:27:34,919 --> 00:27:39,610
okay getting to patching and patching

591
00:27:37,990 --> 00:27:43,230
the libraries and patching the products

592
00:27:39,610 --> 00:27:46,990
that use the library is much much harder

593
00:27:43,230 --> 00:27:49,240
we found the problems that we found in

594
00:27:46,990 --> 00:27:51,010
the standard level by looking at the

595
00:27:49,240 --> 00:27:53,740
standard we say oh that's a critical

596
00:27:51,010 --> 00:27:57,160
point let's look there and buy incident

597
00:27:53,740 --> 00:27:58,720
there was a vulnerability okay we were

598
00:27:57,160 --> 00:28:01,570
lucky because there was a pseudo code

599
00:27:58,720 --> 00:28:03,580
which kind of you know had that line you

600
00:28:01,570 --> 00:28:07,510
know the multiplier was unbounded that's

601
00:28:03,580 --> 00:28:09,370
an interesting case but still it's very

602
00:28:07,510 --> 00:28:12,400
interesting I think as a learning

603
00:28:09,370 --> 00:28:14,500
experience to go through the standards

604
00:28:12,400 --> 00:28:16,360
and then you find what you think is a

605
00:28:14,500 --> 00:28:18,160
critical point and then you go in the

606
00:28:16,360 --> 00:28:21,928
implementation and see if the developers

607
00:28:18,160 --> 00:28:21,929
have make Mis made mistake in there

608
00:28:22,989 --> 00:28:31,519
so far specifications on specification

609
00:28:29,330 --> 00:28:33,649
on new technology have a security

610
00:28:31,519 --> 00:28:37,820
section but they're usually concerned

611
00:28:33,649 --> 00:28:40,728
about Oh make sure that you encrypt this

612
00:28:37,820 --> 00:28:42,200
data make sure that this connection is

613
00:28:40,729 --> 00:28:43,849
not exposed to the Internet

614
00:28:42,200 --> 00:28:45,320
make sure that if you connect it to

615
00:28:43,849 --> 00:28:47,539
something else there's a firewall in

616
00:28:45,320 --> 00:28:49,789
between so they're mostly security

617
00:28:47,539 --> 00:28:51,830
recommendation on the deployment which

618
00:28:49,789 --> 00:28:53,749
still we haven't seen it really in the

619
00:28:51,830 --> 00:28:56,799
while at least according to the previous

620
00:28:53,749 --> 00:29:00,169
part of the presentation I think that

621
00:28:56,799 --> 00:29:01,869
what I will bring to the mqtt Technical

622
00:29:00,169 --> 00:29:05,419
Committee and what I think other

623
00:29:01,869 --> 00:29:08,839
committees should should try to work on

624
00:29:05,419 --> 00:29:10,759
is trying to to read these

625
00:29:08,839 --> 00:29:14,629
specifications with a security mindset

626
00:29:10,759 --> 00:29:17,869
and not only about data confidentiality

627
00:29:14,629 --> 00:29:20,299
or data integrity look for bugs like

628
00:29:17,869 --> 00:29:22,759
this look for parsing routines because

629
00:29:20,299 --> 00:29:24,139
that's where the problems arise we all

630
00:29:22,759 --> 00:29:26,359
know it right if you want to write a

631
00:29:24,139 --> 00:29:27,918
faster you go and fast the you know the

632
00:29:26,359 --> 00:29:29,359
parts in part because that's where

633
00:29:27,919 --> 00:29:32,239
you're going to find most of the bugs

634
00:29:29,359 --> 00:29:35,928
right so can't we can we adopt a similar

635
00:29:32,239 --> 00:29:41,509
approach but for looking at standard

636
00:29:35,929 --> 00:29:43,879
specifications so I'm not surprised this

637
00:29:41,509 --> 00:29:46,909
took five years to go through all the

638
00:29:43,879 --> 00:29:49,158
revisions that finally fixed that

639
00:29:46,909 --> 00:29:52,190
vulnerability I'm not surprised because

640
00:29:49,159 --> 00:29:54,909
I think is natural I want that timeframe

641
00:29:52,190 --> 00:29:54,909
to be shorter

642
00:29:55,390 --> 00:30:02,320
all right so pool co-op I only spoke

643
00:29:58,809 --> 00:30:05,350
about co-op at all so far so let's let's

644
00:30:02,320 --> 00:30:06,939
speak a bit about co-op now I was

645
00:30:05,350 --> 00:30:09,969
actually thinking of removing this part

646
00:30:06,940 --> 00:30:12,790
of the talk but I was contacted two days

647
00:30:09,970 --> 00:30:15,929
ago by someone who wrote an interesting

648
00:30:12,790 --> 00:30:19,540
story and so I decided this has to be in

649
00:30:15,929 --> 00:30:21,970
so co-op as I said is different than ink

650
00:30:19,540 --> 00:30:24,159
mqtt I'm just recapping a little bit its

651
00:30:21,970 --> 00:30:26,500
client-server you have requests and

652
00:30:24,160 --> 00:30:29,140
responses let me turn on the timer again

653
00:30:26,500 --> 00:30:31,929
so I got along it's lost its request

654
00:30:29,140 --> 00:30:36,370
responses and what I really liked about

655
00:30:31,929 --> 00:30:40,690
the RFC of coop is that it's got a very

656
00:30:36,370 --> 00:30:43,510
clear section simple well written on

657
00:30:40,690 --> 00:30:46,960
security I think it's section 11 or 12

658
00:30:43,510 --> 00:30:49,629
and I remember correctly but it's great

659
00:30:46,960 --> 00:30:51,580
how it's written it clearly goes through

660
00:30:49,630 --> 00:30:56,919
all the potential security issues with

661
00:30:51,580 --> 00:30:59,889
coop so shout out to them well very well

662
00:30:56,919 --> 00:31:01,390
written they go through a series of

663
00:30:59,890 --> 00:31:04,299
attacks and I would like to highlight

664
00:31:01,390 --> 00:31:07,179
one attack put attack possibility with

665
00:31:04,299 --> 00:31:09,190
co-op that is a reflection and play

666
00:31:07,179 --> 00:31:11,860
reflection based amplification attacks

667
00:31:09,190 --> 00:31:15,490
so distributed the line of service via

668
00:31:11,860 --> 00:31:18,189
reflection there are three ingredients

669
00:31:15,490 --> 00:31:20,950
which are which are needed for an attack

670
00:31:18,190 --> 00:31:24,010
a reflective attack to happen you need a

671
00:31:20,950 --> 00:31:24,309
protocol that allows spoofing there we

672
00:31:24,010 --> 00:31:29,049
go

673
00:31:24,309 --> 00:31:30,970
UDP you can spoof IPS and the source the

674
00:31:29,049 --> 00:31:33,490
destination will not will not be able to

675
00:31:30,970 --> 00:31:36,059
figure out then you need a request

676
00:31:33,490 --> 00:31:38,200
response based there you go we've got it

677
00:31:36,059 --> 00:31:41,590
you send the packet and you get

678
00:31:38,200 --> 00:31:45,100
something back third we need to be able

679
00:31:41,590 --> 00:31:45,428
to set the size of the content there we

680
00:31:45,100 --> 00:31:49,449
go

681
00:31:45,429 --> 00:31:52,419
co-op allows to send content to a server

682
00:31:49,450 --> 00:31:54,429
and the server will store that content

683
00:31:52,419 --> 00:31:56,559
to be retrieved afterwards by other

684
00:31:54,429 --> 00:31:59,080
clients that's perfect that's pretty

685
00:31:56,559 --> 00:32:02,399
much like memcache you said something

686
00:31:59,080 --> 00:32:06,490
and you retrieve something right so

687
00:32:02,400 --> 00:32:08,860
so I haven't found any any estimates on

688
00:32:06,490 --> 00:32:10,840
how much amplification power we can get

689
00:32:08,860 --> 00:32:13,120
so I sat down and I measure it myself I

690
00:32:10,840 --> 00:32:15,310
hear the Wireshark attached to a you

691
00:32:13,120 --> 00:32:17,620
know test network in a few notes I got

692
00:32:15,310 --> 00:32:22,840
two nodes talking to each other and if

693
00:32:17,620 --> 00:32:25,810
you compare the size of the request only

694
00:32:22,840 --> 00:32:28,750
the payload part is 36 might for a yoga

695
00:32:25,810 --> 00:32:32,679
just randomly random requests and the

696
00:32:28,750 --> 00:32:35,710
response is 85 89 bytes so you see a

697
00:32:32,680 --> 00:32:38,200
good asymmetry here it's not great if

698
00:32:35,710 --> 00:32:40,210
you take as a comparison the very good

699
00:32:38,200 --> 00:32:42,580
paper by Christian Rosso it's called

700
00:32:40,210 --> 00:32:45,750
amplification he'll he goes through all

701
00:32:42,580 --> 00:32:48,580
the UDP protocols and reviews them from

702
00:32:45,750 --> 00:32:52,300
reflective reflection point of view and

703
00:32:48,580 --> 00:32:54,340
he goes and gives bandwidth

704
00:32:52,300 --> 00:32:57,010
amplification factors of all the

705
00:32:54,340 --> 00:32:59,439
protocols so if we look at co-op now is

706
00:32:57,010 --> 00:33:00,910
like the last you know the least

707
00:32:59,440 --> 00:33:03,850
powerful one

708
00:33:00,910 --> 00:33:06,430
so only 2.5 is not a lot powerful still

709
00:33:03,850 --> 00:33:08,620
it's something I wasn't not really

710
00:33:06,430 --> 00:33:11,470
satisfied with this so I read again the

711
00:33:08,620 --> 00:33:14,949
specification sorry the RFC and I found

712
00:33:11,470 --> 00:33:17,500
out that coop supports so-called block

713
00:33:14,950 --> 00:33:20,230
wise transfer so you can set a very

714
00:33:17,500 --> 00:33:23,170
large portion very large portion of data

715
00:33:20,230 --> 00:33:25,450
to a server and then you can say I want

716
00:33:23,170 --> 00:33:28,780
to retrieve it and I want each block

717
00:33:25,450 --> 00:33:31,030
today to be this big you can say how

718
00:33:28,780 --> 00:33:33,879
much you want once you want the content

719
00:33:31,030 --> 00:33:36,160
to be much larger 1 2 content to be and

720
00:33:33,880 --> 00:33:39,640
the second interesting part is the one I

721
00:33:36,160 --> 00:33:42,400
liked it here in orange both sides

722
00:33:39,640 --> 00:33:45,160
client or server have a say so they have

723
00:33:42,400 --> 00:33:47,890
to agree on the size of each block so

724
00:33:45,160 --> 00:33:50,020
there is some arbitration in which the

725
00:33:47,890 --> 00:33:53,710
two parties agree on how large each

726
00:33:50,020 --> 00:33:56,830
block should be so I sat down again and

727
00:33:53,710 --> 00:33:59,500
I run I run again another test this time

728
00:33:56,830 --> 00:34:01,720
I will be the one showing a video that

729
00:33:59,500 --> 00:34:04,170
I'm not sure it will show at all so

730
00:34:01,720 --> 00:34:04,170
let's see

731
00:34:09,879 --> 00:34:20,899
mm resolution doesn't look like a teepee

732
00:34:15,230 --> 00:34:22,580
okay let's trust it okay so I will tell

733
00:34:20,899 --> 00:34:24,830
you what's coming what's what's

734
00:34:22,580 --> 00:34:27,110
happening right there there is a in the

735
00:34:24,830 --> 00:34:30,739
middle here there is an amplifier so the

736
00:34:27,110 --> 00:34:35,149
server itself right I start a standard

737
00:34:30,739 --> 00:34:36,918
server no modification just the first

738
00:34:35,149 --> 00:34:39,770
server I mean the most recommended

739
00:34:36,918 --> 00:34:41,868
server I could find on the other side we

740
00:34:39,770 --> 00:34:44,840
have the attacker which will upload a

741
00:34:41,869 --> 00:34:47,060
large portion of data maybe the portion

742
00:34:44,840 --> 00:34:48,830
of data is already on the server but we

743
00:34:47,060 --> 00:34:51,168
are simply playing the role of an

744
00:34:48,830 --> 00:34:53,389
attacker that is preparing the note the

745
00:34:51,168 --> 00:34:58,419
briefs are preparing the server so

746
00:34:53,389 --> 00:34:58,419
something like 1k of data

747
00:35:04,010 --> 00:35:09,650
okay so we have 1k of data the response

748
00:35:06,940 --> 00:35:12,530
it's very small because it's simply an

749
00:35:09,650 --> 00:35:14,119
AK and setting the data costed the

750
00:35:12,530 --> 00:35:19,690
attacker something loud something like

751
00:35:14,119 --> 00:35:19,690
1k of bandwidth all right

752
00:35:23,930 --> 00:35:31,348
now let's change the let's change a bit

753
00:35:28,589 --> 00:35:33,808
wha the the block-wise sighs now I tell

754
00:35:31,349 --> 00:35:37,160
I tell the attacker I tell the the

755
00:35:33,809 --> 00:35:40,829
server that I am able to retrieve large

756
00:35:37,160 --> 00:35:44,220
portion of data and I spoof the source

757
00:35:40,829 --> 00:35:46,710
of my requests so that the response is

758
00:35:44,220 --> 00:35:49,129
going to be delivered or someone else so

759
00:35:46,710 --> 00:35:49,130
the victim

760
00:35:51,300 --> 00:35:58,100
now the attacker is requesting the is

761
00:35:53,700 --> 00:36:00,410
requesting the data that they have set

762
00:35:58,100 --> 00:36:03,980
whoops

763
00:36:00,410 --> 00:36:03,980
okay simply I get

764
00:36:10,200 --> 00:36:14,669
okay so you see that there is the

765
00:36:12,570 --> 00:36:17,180
request have costed the attacker

766
00:36:14,670 --> 00:36:20,030
something like 57 if we take the entire

767
00:36:17,180 --> 00:36:25,580
the entire packet if we only look at the

768
00:36:20,030 --> 00:36:25,580
the payload itself is only 30 33 bytes

769
00:36:31,619 --> 00:36:39,619
and the response size is something like

770
00:36:33,930 --> 00:36:39,618
80 1048

771
00:36:43,599 --> 00:36:46,199
so

772
00:36:46,710 --> 00:36:56,220
let's go back and do whoops this is very

773
00:36:53,040 --> 00:36:57,870
unpredictable okay let's go back and do

774
00:36:56,220 --> 00:37:00,959
some math this is 32x

775
00:36:57,870 --> 00:37:03,450
so this makes a coop go a little bit

776
00:37:00,960 --> 00:37:08,310
higher in the ranking and positions it

777
00:37:03,450 --> 00:37:11,060
pretty much like DNS or SS VP which is

778
00:37:08,310 --> 00:37:13,529
pretty powerful amplification potential

779
00:37:11,060 --> 00:37:15,540
so the reason why I decided to include

780
00:37:13,530 --> 00:37:17,820
co-op back in the presentation even

781
00:37:15,540 --> 00:37:19,860
though I decided to remove it is that so

782
00:37:17,820 --> 00:37:22,740
far all of this is theoretical is

783
00:37:19,860 --> 00:37:24,990
written in the specification I did some

784
00:37:22,740 --> 00:37:28,049
tests demonstrate the feasibility I was

785
00:37:24,990 --> 00:37:32,310
able to calculate 32 but yesterday was

786
00:37:28,050 --> 00:37:36,360
contacted by Catalan by ZDNet who was

787
00:37:32,310 --> 00:37:41,100
working before reading my paper on some

788
00:37:36,360 --> 00:37:43,620
attacks that happened to have three to

789
00:37:41,100 --> 00:37:44,580
three hundred and twenty gigabits per

790
00:37:43,620 --> 00:37:48,870
second

791
00:37:44,580 --> 00:37:50,970
amplification power so this looks a good

792
00:37:48,870 --> 00:37:53,940
coincidence and I say well these things

793
00:37:50,970 --> 00:37:57,089
is not just happening in theory this is

794
00:37:53,940 --> 00:38:02,280
happening for real so there seemed to be

795
00:37:57,090 --> 00:38:03,870
some attacks going on using coop and the

796
00:38:02,280 --> 00:38:08,010
bandwidth amplification factor happens

797
00:38:03,870 --> 00:38:11,339
to be exactly what we calculated and

798
00:38:08,010 --> 00:38:14,850
remember that about the half-million

799
00:38:11,340 --> 00:38:18,150
node I found by my search searching on

800
00:38:14,850 --> 00:38:20,009
shodhan so we have plenty of nodes that

801
00:38:18,150 --> 00:38:23,730
attackers could use and actually are

802
00:38:20,010 --> 00:38:25,410
using apparently and we have 21% of

803
00:38:23,730 --> 00:38:29,370
autonomous systems on the internet who

804
00:38:25,410 --> 00:38:32,129
are not immune to spoofing nowadays

805
00:38:29,370 --> 00:38:34,200
spoofing is still possible on the open

806
00:38:32,130 --> 00:38:38,210
Internet because some providers are not

807
00:38:34,200 --> 00:38:38,210
taking a proper appropriate measures

808
00:38:40,150 --> 00:38:45,260
so to conclude let's look at the big

809
00:38:42,500 --> 00:38:48,740
picture of the entire talk and let's see

810
00:38:45,260 --> 00:38:50,540
what are the takeaways the title of this

811
00:38:48,740 --> 00:38:54,040
presentation was security and privacy

812
00:38:50,540 --> 00:38:57,380
issues with machine to machine protocols

813
00:38:54,040 --> 00:38:59,630
we've looked at the root causes of these

814
00:38:57,380 --> 00:39:02,510
security and privacy issues we've looked

815
00:38:59,630 --> 00:39:06,109
at the changes in the design and the

816
00:39:02,510 --> 00:39:10,000
role of standards in introducing /

817
00:39:06,109 --> 00:39:12,980
preventing or predicting if you want the

818
00:39:10,000 --> 00:39:14,839
the appearance of vulnerabilities we've

819
00:39:12,980 --> 00:39:16,339
looked at how many implementation

820
00:39:14,839 --> 00:39:18,410
vulnerabilities that are out there in

821
00:39:16,339 --> 00:39:20,859
the paper that I will show you in a few

822
00:39:18,410 --> 00:39:24,578
a few slides there are all the details

823
00:39:20,859 --> 00:39:27,589
and we've seen a huge problem still of

824
00:39:24,579 --> 00:39:31,309
deployment still many many insecure

825
00:39:27,589 --> 00:39:32,140
unsecure brokers are out there and co-op

826
00:39:31,309 --> 00:39:35,210
servers as well

827
00:39:32,140 --> 00:39:37,910
this opens up the possibility for data

828
00:39:35,210 --> 00:39:40,220
validation vulnerabilities protocol

829
00:39:37,910 --> 00:39:43,839
parsing vulnerabilities feature abuse

830
00:39:40,220 --> 00:39:46,250
such as amplification listing all the

831
00:39:43,839 --> 00:39:49,009
you know the privacy sensitive content

832
00:39:46,250 --> 00:39:50,540
flowing in the broker and ultimately if

833
00:39:49,010 --> 00:39:53,869
you really want to abstract and be able

834
00:39:50,540 --> 00:39:55,970
to talk to sea level security officers

835
00:39:53,869 --> 00:39:59,720
in an organization you want to show

836
00:39:55,970 --> 00:40:01,549
these keywords so you can tell that mqtt

837
00:39:59,720 --> 00:40:03,950
and co-op could be used and have all the

838
00:40:01,549 --> 00:40:07,809
potentials and in some cases are

839
00:40:03,950 --> 00:40:10,609
actually are are use now for

840
00:40:07,809 --> 00:40:13,160
recognizance lateral movement industrial

841
00:40:10,609 --> 00:40:15,200
espionage we've seen how much passive

842
00:40:13,160 --> 00:40:17,569
intelligence we can get from from

843
00:40:15,200 --> 00:40:19,759
connecting to open brokers right that's

844
00:40:17,569 --> 00:40:23,000
that's pretty scary to me

845
00:40:19,760 --> 00:40:27,890
remote the OS of a machine targeted

846
00:40:23,000 --> 00:40:29,660
attacks so since the URL is pretty long

847
00:40:27,890 --> 00:40:31,609
I decided that you know since it's

848
00:40:29,660 --> 00:40:33,140
become a pretty common to take to take

849
00:40:31,609 --> 00:40:36,078
pictures of slides while someone is

850
00:40:33,140 --> 00:40:37,460
talking you can just take a take a stick

851
00:40:36,079 --> 00:40:39,740
use the screen shot of this presentation

852
00:40:37,460 --> 00:40:41,869
this slide here and you will get the URL

853
00:40:39,740 --> 00:40:44,839
of the of the paper that has been

854
00:40:41,869 --> 00:40:46,549
published two days ago for some reason

855
00:40:44,839 --> 00:40:49,849
if you can't parse the QR code just go

856
00:40:46,549 --> 00:40:52,680
to the blog of Trend Micro there is one

857
00:40:49,849 --> 00:40:55,680
of the most recent

858
00:40:52,680 --> 00:40:56,310
shares is exactly this paper thank you

859
00:40:55,680 --> 00:40:59,069
very much

860
00:40:56,310 --> 00:41:04,470
and I think we have we have plenty of

861
00:40:59,070 --> 00:41:08,810
time for questions so yeah thank you so

862
00:41:04,470 --> 00:41:16,279
[Applause]

863
00:41:08,810 --> 00:41:18,480
are there any questions yes there's uh I

864
00:41:16,280 --> 00:41:22,130
can I can't really see cuz I have a

865
00:41:18,480 --> 00:41:22,130
light beam yeah one that right there

866
00:41:31,970 --> 00:41:35,020
[Music]

867
00:41:41,000 --> 00:41:46,820
I found so there was a Korean

868
00:41:43,580 --> 00:41:50,720
application yes Asian speaking yeah

869
00:41:46,820 --> 00:41:53,240
that's okay it was a Korean app for a

870
00:41:50,720 --> 00:41:54,980
group we're like in a you know you work

871
00:41:53,240 --> 00:41:56,959
for a company and all of the employees

872
00:41:54,980 --> 00:41:59,120
have this app and they use it to chat

873
00:41:56,960 --> 00:42:01,220
exchange email and do real-time

874
00:41:59,120 --> 00:42:02,990
communication among colleagues right I

875
00:42:01,220 --> 00:42:05,839
didn't know about that application I

876
00:42:02,990 --> 00:42:07,700
found it from the messages I was

877
00:42:05,840 --> 00:42:10,580
observing like I was taking a look at

878
00:42:07,700 --> 00:42:12,609
this no leaking brokers and I saw this

879
00:42:10,580 --> 00:42:15,830
you know message passing by saying Oh

880
00:42:12,610 --> 00:42:17,480
huge in maintenance vessel high pressure

881
00:42:15,830 --> 00:42:19,759
that's what that sound is something

882
00:42:17,480 --> 00:42:21,860
critical so I went back and I tried to

883
00:42:19,760 --> 00:42:23,450
figure out the if there was some

884
00:42:21,860 --> 00:42:26,180
information that would allow me to find

885
00:42:23,450 --> 00:42:27,529
a target right which is a actually an

886
00:42:26,180 --> 00:42:28,790
interesting thing because you know by

887
00:42:27,530 --> 00:42:30,380
looking at the message I was able to

888
00:42:28,790 --> 00:42:32,509
find enough information to find the

889
00:42:30,380 --> 00:42:34,430
target so if I wanted to target the

890
00:42:32,510 --> 00:42:41,960
company who was using this I could do it

891
00:42:34,430 --> 00:42:49,120
if I wanted yes the the the MQ broker

892
00:42:41,960 --> 00:42:49,120
was exposed yes sorry

893
00:42:52,110 --> 00:42:55,300
[Music]

894
00:43:02,210 --> 00:43:07,109
yes there are issues with the

895
00:43:05,030 --> 00:43:09,540
configuration so if you don't configure

896
00:43:07,109 --> 00:43:11,460
the broker which is not secured by

897
00:43:09,540 --> 00:43:13,109
default that's I think one of the big

898
00:43:11,460 --> 00:43:14,130
problems because if you just download

899
00:43:13,109 --> 00:43:16,319
the broker that you know the most

900
00:43:14,130 --> 00:43:18,990
popular broker you install it you power

901
00:43:16,320 --> 00:43:27,320
it up no and at the authentication by

902
00:43:18,990 --> 00:43:31,049
default right if you yeah there's

903
00:43:27,320 --> 00:43:35,040
there's a lot of tutorials out there on

904
00:43:31,050 --> 00:43:38,099
how to secure properly mqtt so it comes

905
00:43:35,040 --> 00:43:40,259
out kind of also as a surprise to find

906
00:43:38,099 --> 00:43:43,890
lots of brokers not properly secured

907
00:43:40,260 --> 00:43:45,420
there's also different ways to secure it

908
00:43:43,890 --> 00:43:47,040
let's say I mean you can have

909
00:43:45,420 --> 00:43:51,210
authentication there's brokers that

910
00:43:47,040 --> 00:43:53,460
implement ACLs so the way to secure it

911
00:43:51,210 --> 00:43:59,339
are out there it's just that people is

912
00:43:53,460 --> 00:44:03,270
not using them yes so you think one nice

913
00:43:59,339 --> 00:44:07,500
example of how to properly secure MQTT

914
00:44:03,270 --> 00:44:09,770
is given by the amazon iot platform i

915
00:44:07,500 --> 00:44:12,270
mean if you look at how they did things

916
00:44:09,770 --> 00:44:16,320
it's perfect

917
00:44:12,270 --> 00:44:19,290
yeah you can't even if you try to deploy

918
00:44:16,320 --> 00:44:21,330
an open broker you cannot it's

919
00:44:19,290 --> 00:44:24,839
impossible because they force every node

920
00:44:21,330 --> 00:44:26,790
to have a certificate both ways so it's

921
00:44:24,839 --> 00:44:28,650
impossible to make an insecure

922
00:44:26,790 --> 00:44:32,240
deployment that's a good example that we

923
00:44:28,650 --> 00:44:32,240
cite in the paper because of that reason

924
00:44:36,900 --> 00:44:41,009
all right we'll be here for a while so

925
00:44:39,420 --> 00:44:41,360
thank you very much for attending thank

926
00:44:41,009 --> 00:44:45,119
you

927
00:44:41,360 --> 00:44:45,119
[Applause]

