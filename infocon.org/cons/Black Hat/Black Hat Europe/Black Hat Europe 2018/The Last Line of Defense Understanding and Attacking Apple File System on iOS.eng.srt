1
00:00:00,709 --> 00:00:07,560
okay Astana hello everyone today I'm

2
00:00:04,560 --> 00:00:10,920
going to talk about the security of a

3
00:00:07,560 --> 00:00:13,290
copper system and the title of my talk

4
00:00:10,920 --> 00:00:15,540
is the last name of this famous

5
00:00:13,290 --> 00:00:19,080
understanding undertaking a profile

6
00:00:15,540 --> 00:00:22,470
system os my name is Shalom

7
00:00:19,080 --> 00:00:24,959
I am from Alibaba our own sacred Idol

8
00:00:22,470 --> 00:00:28,799
before joining Alibaba and how published

9
00:00:24,960 --> 00:00:31,349
several papers on the dig for my Twitter

10
00:00:28,800 --> 00:00:34,469
account name is the Xcel Energy in 1889

11
00:00:31,349 --> 00:00:38,129
the quarter of this talk is the mean

12
00:00:34,469 --> 00:00:40,350
spectrum he's a security expert from Ali

13
00:00:38,129 --> 00:00:42,780
Baba and his Twitter account name is

14
00:00:40,350 --> 00:00:44,809
structuring welcome to follow us on

15
00:00:42,780 --> 00:00:47,640
Twitter

16
00:00:44,809 --> 00:00:49,800
in this talk I will post a first

17
00:00:47,640 --> 00:00:52,710
introduce some background information of

18
00:00:49,800 --> 00:00:57,750
a profile system and show some previous

19
00:00:52,710 --> 00:01:01,109
attacks up that I will show explain how

20
00:00:57,750 --> 00:01:04,619
a profile system has mitigate these

21
00:01:01,109 --> 00:01:07,200
attacks then I will show a new method to

22
00:01:04,619 --> 00:01:11,250
bypass these medications and also

23
00:01:07,200 --> 00:01:13,830
discussed some other past methods first

24
00:01:11,250 --> 00:01:17,670
of all let's have look at the basics of

25
00:01:13,830 --> 00:01:21,030
a profile system a profile system is a

26
00:01:17,670 --> 00:01:26,430
new file system proposed by Apple on Mac

27
00:01:21,030 --> 00:01:29,040
OS 10 points and 13 and ours 10.3 it is

28
00:01:26,430 --> 00:01:34,560
designed to be high performance and high

29
00:01:29,040 --> 00:01:38,820
security it's it's shot a ap FSH shot

30
00:01:34,560 --> 00:01:43,280
for hypothesis fair system the arts are

31
00:01:38,820 --> 00:01:45,839
important the data structures in in ours

32
00:01:43,280 --> 00:01:49,890
file system and a PFS

33
00:01:45,840 --> 00:01:53,369
for in order to manage these file system

34
00:01:49,890 --> 00:01:56,189
and fails the most important one is Mont

35
00:01:53,369 --> 00:01:57,840
as we can see here a Mont structure

36
00:01:56,189 --> 00:02:00,658
represents a mountain partition in the

37
00:01:57,840 --> 00:02:04,890
system and in this structure the field

38
00:02:00,659 --> 00:02:07,429
month flag mode flag represents how the

39
00:02:04,890 --> 00:02:10,410
petition is mounted and the field

40
00:02:07,429 --> 00:02:12,720
monitor points to some private data

41
00:02:10,410 --> 00:02:16,799
structure that are organized

42
00:02:12,720 --> 00:02:19,230
five specific file systems another

43
00:02:16,800 --> 00:02:22,350
important this structure is a way note

44
00:02:19,230 --> 00:02:24,780
we know a structural representative fell

45
00:02:22,350 --> 00:02:27,350
out the directory into a partition in

46
00:02:24,780 --> 00:02:29,670
this structure the way mount field

47
00:02:27,350 --> 00:02:32,040
points to the windows belonging

48
00:02:29,670 --> 00:02:34,200
partitions mount structure and the

49
00:02:32,040 --> 00:02:37,109
weight data points to private theater

50
00:02:34,200 --> 00:02:40,890
organized by a specific specific file

51
00:02:37,110 --> 00:02:43,470
systems and this is a simple graph

52
00:02:40,890 --> 00:02:47,070
showing showing the relationship between

53
00:02:43,470 --> 00:02:52,200
mount and we know just as we have sat at

54
00:02:47,070 --> 00:02:54,959
this we had described there is a

55
00:02:52,200 --> 00:02:58,170
critical partition in ours and a my

56
00:02:54,959 --> 00:03:01,470
class which is called route policy this

57
00:02:58,170 --> 00:03:03,600
partition is mounted on the root root

58
00:03:01,470 --> 00:03:05,850
directory in this partition there are

59
00:03:03,600 --> 00:03:08,310
several important directories holding

60
00:03:05,850 --> 00:03:10,709
important code and a data for the system

61
00:03:08,310 --> 00:03:14,010
to run for example applications the

62
00:03:10,709 --> 00:03:17,550
folder holds hands on a box and send

63
00:03:14,010 --> 00:03:20,670
system applications being holder for

64
00:03:17,550 --> 00:03:22,850
system binaries and so on in most of

65
00:03:20,670 --> 00:03:26,280
time this is the main target for

66
00:03:22,850 --> 00:03:28,200
attacker to control in order to modify

67
00:03:26,280 --> 00:03:35,850
system settings or install malicious

68
00:03:28,200 --> 00:03:39,209
apps so I'll September 17th 2018 I have

69
00:03:35,850 --> 00:03:42,420
published a manual called a profile

70
00:03:39,209 --> 00:03:46,310
system reference which describes data

71
00:03:42,420 --> 00:03:49,200
structures used in EFS this is a perfect

72
00:03:46,310 --> 00:03:52,620
reference for research you can download

73
00:03:49,200 --> 00:03:55,018
it from the link but when this talk was

74
00:03:52,620 --> 00:03:57,540
prepared and submitted the reference

75
00:03:55,019 --> 00:04:00,120
manual has not been published yet our

76
00:03:57,540 --> 00:04:04,590
knowledge we in this talk is required by

77
00:04:00,120 --> 00:04:08,820
rivers from River jardiniere next let's

78
00:04:04,590 --> 00:04:11,700
how look at previous attacks on a TFS as

79
00:04:08,820 --> 00:04:14,700
a half site in most times the root

80
00:04:11,700 --> 00:04:16,099
partition is always attackers mean

81
00:04:14,700 --> 00:04:19,260
target

82
00:04:16,100 --> 00:04:21,870
because it's a host mine a important

83
00:04:19,260 --> 00:04:23,760
code and data but that they fought

84
00:04:21,870 --> 00:04:26,580
through the partition is always read

85
00:04:23,760 --> 00:04:29,180
only in order to modify

86
00:04:26,580 --> 00:04:32,789
all directors in this partition

87
00:04:29,180 --> 00:04:36,780
attackers always how to remount the root

88
00:04:32,789 --> 00:04:38,870
partition to read and write in this in

89
00:04:36,780 --> 00:04:41,669
this attacks basic assumption is that

90
00:04:38,870 --> 00:04:44,759
the attacker already has root privilege

91
00:04:41,669 --> 00:04:48,060
and the capability to arbitrary read and

92
00:04:44,759 --> 00:04:50,639
write memory why we remember a root

93
00:04:48,060 --> 00:04:52,169
polish or partition the kernel performed

94
00:04:50,639 --> 00:04:56,580
sandbox

95
00:04:52,169 --> 00:05:00,508
checks in the function who command check

96
00:04:56,580 --> 00:05:05,580
remand as well house see in this read

97
00:05:00,509 --> 00:05:07,770
figure and in this hook mount tracker

98
00:05:05,580 --> 00:05:10,560
amount function the colonel gets the

99
00:05:07,770 --> 00:05:13,530
month like of the amount hello partition

100
00:05:10,560 --> 00:05:17,389
and checks whether the flag indicates

101
00:05:13,530 --> 00:05:20,099
that this partition it's a root position

102
00:05:17,389 --> 00:05:22,770
if the position is a root position the

103
00:05:20,099 --> 00:05:24,990
colonel gets the partition the root we

104
00:05:22,770 --> 00:05:29,250
node and further evaluate sandbox

105
00:05:24,990 --> 00:05:31,560
policies so in order to bypass this and

106
00:05:29,250 --> 00:05:36,449
the boss check we can clear the root

107
00:05:31,560 --> 00:05:39,240
partitions flag especially the root FS

108
00:05:36,449 --> 00:05:43,650
and read only flags and then remount

109
00:05:39,240 --> 00:05:46,650
perform which the mount with the mount

110
00:05:43,650 --> 00:05:49,679
system call after we can set the root

111
00:05:46,650 --> 00:05:52,500
filesystem flag again in the month month

112
00:05:49,680 --> 00:05:55,710
flag field for this root position and

113
00:05:52,500 --> 00:05:57,870
this master is said to be proposed by ex

114
00:05:55,710 --> 00:06:02,779
rock and has been explained

115
00:05:57,870 --> 00:06:02,779
indeed he'll in Jonathan's he'd be talk

116
00:06:03,050 --> 00:06:09,500
however when there is a bad pass we know

117
00:06:06,659 --> 00:06:12,960
that there will always be a mediation

118
00:06:09,500 --> 00:06:15,960
after hours eleven point three if we use

119
00:06:12,960 --> 00:06:18,479
the previous tech method we will get a

120
00:06:15,960 --> 00:06:21,900
kernel panic panic when we change or

121
00:06:18,479 --> 00:06:25,818
fail this indicates a new mitigation in

122
00:06:21,900 --> 00:06:29,580
hours EP advanced so what happens here

123
00:06:25,819 --> 00:06:32,190
with root privileges on hours let's run

124
00:06:29,580 --> 00:06:34,880
the command want to see how the root

125
00:06:32,190 --> 00:06:37,560
partition is multi we can see that

126
00:06:34,880 --> 00:06:40,200
different from other partitions

127
00:06:37,560 --> 00:06:42,390
there is a strange prefix in the

128
00:06:40,200 --> 00:06:47,969
the device five parts of the root

129
00:06:42,390 --> 00:06:52,469
partition as we can see from what has

130
00:06:47,970 --> 00:06:55,320
seen a show in the ad so what does

131
00:06:52,470 --> 00:06:58,620
prefix mean let's do some experiments on

132
00:06:55,320 --> 00:07:01,740
Mac OS we use a helpful tool called the

133
00:06:58,620 --> 00:07:04,470
TM YouTube which is short for ten

134
00:07:01,740 --> 00:07:07,350
machine utilities in this experiment we

135
00:07:04,470 --> 00:07:09,900
first create a snapshot for the root

136
00:07:07,350 --> 00:07:12,750
partition and then mount the root

137
00:07:09,900 --> 00:07:16,770
partition on the snapshot on to the temp

138
00:07:12,750 --> 00:07:19,320
directory by running the at last we by

139
00:07:16,770 --> 00:07:24,150
running the mod command we can see that

140
00:07:19,320 --> 00:07:27,800
there is also strange prefix in the in

141
00:07:24,150 --> 00:07:31,919
in in this snapshot mount

142
00:07:27,800 --> 00:07:36,210
so now we can know that the ours root

143
00:07:31,920 --> 00:07:40,500
partition it's a snapshot the prefix

144
00:07:36,210 --> 00:07:45,870
represents a snapshot but what is the

145
00:07:40,500 --> 00:07:51,210
snapshot Apple how has explained our

146
00:07:45,870 --> 00:07:53,220
explain it has a stash of is a pond on

147
00:07:51,210 --> 00:07:56,010
in time read-only instance of the

148
00:07:53,220 --> 00:07:58,650
filesystem the operating system uses

149
00:07:56,010 --> 00:08:01,080
step shops to make backups work more

150
00:07:58,650 --> 00:08:05,489
efficiently and offer a way to reward

151
00:08:01,080 --> 00:08:08,039
changes to a given point in time so now

152
00:08:05,490 --> 00:08:12,360
we know that our hours the root function

153
00:08:08,040 --> 00:08:14,850
is only ponding time read-only instance

154
00:08:12,360 --> 00:08:18,570
of the filesystem this is the root cause

155
00:08:14,850 --> 00:08:22,950
that fills the past attacks and a panics

156
00:08:18,570 --> 00:08:25,469
the kernel even if we modify the month

157
00:08:22,950 --> 00:08:28,590
flag of the root partition to be read

158
00:08:25,470 --> 00:08:30,600
and write the root partitions data

159
00:08:28,590 --> 00:08:34,679
structure still represents a read-only

160
00:08:30,600 --> 00:08:37,680
snapshot in this way we we may get a red

161
00:08:34,679 --> 00:08:42,089
ball but we read-only snapshot that is

162
00:08:37,679 --> 00:08:44,910
apparently a conflict so let's further

163
00:08:42,090 --> 00:08:48,240
check what contingent conditions called

164
00:08:44,910 --> 00:08:51,630
the kernel panic let's re-examine the

165
00:08:48,240 --> 00:08:54,279
panic lock we can find a unique

166
00:08:51,630 --> 00:08:57,519
panic stream in this panic log

167
00:08:54,279 --> 00:09:00,730
it says you must have an extend current

168
00:08:57,519 --> 00:09:03,339
elected sites by searching the string in

169
00:09:00,730 --> 00:09:05,040
a pair fast binary we can locate where

170
00:09:03,339 --> 00:09:08,470
the panic really happens

171
00:09:05,040 --> 00:09:12,629
the panic happens in this function

172
00:09:08,470 --> 00:09:16,050
called a lock space for right with hint

173
00:09:12,629 --> 00:09:19,870
this function is called by AP ifs

174
00:09:16,050 --> 00:09:22,680
handler for ferret operation in this

175
00:09:19,870 --> 00:09:26,740
stream we can see a new concept called

176
00:09:22,680 --> 00:09:29,500
extent actually extent is a data

177
00:09:26,740 --> 00:09:34,060
structure representing of felt location

178
00:09:29,500 --> 00:09:37,209
and the site so but reverse engineer we

179
00:09:34,060 --> 00:09:39,569
found that felt tents are organized at

180
00:09:37,209 --> 00:09:43,119
the tea trees and stored in the

181
00:09:39,569 --> 00:09:45,189
multivator field of the partitions model

182
00:09:43,120 --> 00:09:49,870
structure now that we found that a

183
00:09:45,189 --> 00:09:52,990
snapshot month that's not how a while

184
00:09:49,870 --> 00:09:56,379
I'd extend tree in its month data

185
00:09:52,990 --> 00:09:59,680
structure even if we can change them

186
00:09:56,379 --> 00:10:02,410
mount the stems rod amount flag to be

187
00:09:59,680 --> 00:10:05,680
ready and read we can now find the one

188
00:10:02,410 --> 00:10:08,529
at the extent its monitor so this is the

189
00:10:05,680 --> 00:10:13,420
mean region that span external and

190
00:10:08,529 --> 00:10:17,980
causes previous attacks to feel so all

191
00:10:13,420 --> 00:10:19,569
we can do now as a house side when there

192
00:10:17,980 --> 00:10:23,800
is a medication they were always view a

193
00:10:19,569 --> 00:10:27,160
new purpose so when I discovered about

194
00:10:23,800 --> 00:10:30,189
Rose cell results for new purpose come

195
00:10:27,160 --> 00:10:34,329
into my mind which has been listed here

196
00:10:30,189 --> 00:10:37,300
have you explaining them in video the

197
00:10:34,329 --> 00:10:39,489
first salt is that maybe we can make

198
00:10:37,300 --> 00:10:42,790
another rightful month of the route

199
00:10:39,490 --> 00:10:45,699
depression and make changes in the two

200
00:10:42,790 --> 00:10:50,170
wanted files in this new month and then

201
00:10:45,699 --> 00:10:53,250
reboot what what we want is that the

202
00:10:50,170 --> 00:10:57,809
chileans may take effect after reboot

203
00:10:53,250 --> 00:11:00,550
but in fact this attempt fails because

204
00:10:57,809 --> 00:11:03,040
every time after reboot the root

205
00:11:00,550 --> 00:11:06,490
partition will always be reward headed

206
00:11:03,040 --> 00:11:07,709
to the original snapshot and all files

207
00:11:06,490 --> 00:11:13,570
changed

208
00:11:07,710 --> 00:11:17,440
we have made that are discarded then

209
00:11:13,570 --> 00:11:19,420
comes to the second assault maybe we can

210
00:11:17,440 --> 00:11:22,540
make another radical amount of the root

211
00:11:19,420 --> 00:11:28,390
equation replace the original root

212
00:11:22,540 --> 00:11:30,579
winnowed with the new mounted root then

213
00:11:28,390 --> 00:11:34,900
a system may look up for felt from the

214
00:11:30,580 --> 00:11:37,830
this new route but it's a temper also

215
00:11:34,900 --> 00:11:40,990
builds since that the system does not

216
00:11:37,830 --> 00:11:44,080
Traverse from the root root we know that

217
00:11:40,990 --> 00:11:48,340
to look for and we know so this is this

218
00:11:44,080 --> 00:11:52,000
attempt fields and then the third salt

219
00:11:48,340 --> 00:11:54,820
as we know the root cause as a how

220
00:11:52,000 --> 00:11:57,700
explained is that we don't have a valid

221
00:11:54,820 --> 00:12:01,300
extent structure in the monthly field of

222
00:11:57,700 --> 00:12:05,260
the root petitions mount so maybe we can

223
00:12:01,300 --> 00:12:08,280
construct a new month later with Wiley

224
00:12:05,260 --> 00:12:10,420
the extended tree from scratch

225
00:12:08,280 --> 00:12:15,160
representing a red ball root partition

226
00:12:10,420 --> 00:12:21,219
and replace the original moderator with

227
00:12:15,160 --> 00:12:23,680
this newly constructed one also this

228
00:12:21,220 --> 00:12:26,770
September field because that the mounted

229
00:12:23,680 --> 00:12:32,829
her is too complicated we cannot create

230
00:12:26,770 --> 00:12:35,620
from scratch at last a fan of salt come

231
00:12:32,830 --> 00:12:39,430
to comes into my mind instead of

232
00:12:35,620 --> 00:12:42,430
creating mount paper from scratch maybe

233
00:12:39,430 --> 00:12:45,219
we can ask her the system to create a

234
00:12:42,430 --> 00:12:48,040
new monitor for us this is month this

235
00:12:45,220 --> 00:12:51,430
monitor is also added and it replaced

236
00:12:48,040 --> 00:12:54,459
the original root mount monitor with the

237
00:12:51,430 --> 00:12:57,670
new create one now here's another

238
00:12:54,460 --> 00:13:01,510
question how to ask the system to create

239
00:12:57,670 --> 00:13:05,110
a new Valley the monitor for us master

240
00:13:01,510 --> 00:13:07,630
erosion here is that we can make another

241
00:13:05,110 --> 00:13:10,750
red ball mount of the root position and

242
00:13:07,630 --> 00:13:14,110
they retrieved monitor from that new

243
00:13:10,750 --> 00:13:16,960
mount and then we can find a valid

244
00:13:14,110 --> 00:13:19,230
extends from the monitor from this new

245
00:13:16,960 --> 00:13:19,230
mount

246
00:13:19,280 --> 00:13:27,930
here is a figure indicating the

247
00:13:21,660 --> 00:13:32,010
procedure of my menu bypass we can see

248
00:13:27,930 --> 00:13:37,699
that in a rack in a rat figure we mount

249
00:13:32,010 --> 00:13:41,280
the Ruta file the root potassium on to

250
00:13:37,700 --> 00:13:45,660
directory and we retrieve the monitor

251
00:13:41,280 --> 00:13:47,490
from the new mount and I replaced the

252
00:13:45,660 --> 00:13:52,829
original mount monitor with the new

253
00:13:47,490 --> 00:13:56,790
mount and then the system is able to

254
00:13:52,830 --> 00:14:01,980
find well it extends from this new

255
00:13:56,790 --> 00:14:05,219
monitor and this here this is a code for

256
00:14:01,980 --> 00:14:08,940
this new Bevis maybe you can check it

257
00:14:05,220 --> 00:14:12,210
later in this code there are several

258
00:14:08,940 --> 00:14:14,190
details need to be explained first the

259
00:14:12,210 --> 00:14:17,370
fraction there is a function in this

260
00:14:14,190 --> 00:14:20,370
code called cat we know that pass this

261
00:14:17,370 --> 00:14:24,030
code is used this function is used to

262
00:14:20,370 --> 00:14:27,110
get the address of all a note by giving

263
00:14:24,030 --> 00:14:30,750
fail pass this function mainly use the

264
00:14:27,110 --> 00:14:32,580
cake cog headed get it proposed by in

265
00:14:30,750 --> 00:14:36,150
beer and to call the kernel function

266
00:14:32,580 --> 00:14:39,390
name i one thing we should note in this

267
00:14:36,150 --> 00:14:41,579
function is that after name is called we

268
00:14:39,390 --> 00:14:44,000
must call we know the boot kernel

269
00:14:41,580 --> 00:14:48,270
function to adjust the we notes

270
00:14:44,000 --> 00:14:50,550
reference count this is the

271
00:14:48,270 --> 00:14:55,880
implementation of the gate we know that

272
00:14:50,550 --> 00:14:59,250
pass and that the second video in this

273
00:14:55,880 --> 00:15:01,380
in this code is that there are two

274
00:14:59,250 --> 00:15:05,010
functions called reader and read print

275
00:15:01,380 --> 00:15:07,410
these two functions are used to read and

276
00:15:05,010 --> 00:15:10,920
write arbitrary kernel memory there in

277
00:15:07,410 --> 00:15:14,250
their implementation had found in many

278
00:15:10,920 --> 00:15:18,449
other open source rubrics for example as

279
00:15:14,250 --> 00:15:20,370
a how listed here the third video in

280
00:15:18,450 --> 00:15:24,870
this code is that there is a function

281
00:15:20,370 --> 00:15:27,780
called a multi-device monta tab at paths

282
00:15:24,870 --> 00:15:30,510
as read on the right this function is a

283
00:15:27,780 --> 00:15:31,730
wrapper function of the mount system

284
00:15:30,510 --> 00:15:36,720
call

285
00:15:31,730 --> 00:15:39,900
it's special amount of arguments listed

286
00:15:36,720 --> 00:15:42,990
the yin here data and that these

287
00:15:39,900 --> 00:15:48,060
arguments are retrieved by reverse

288
00:15:42,990 --> 00:15:51,900
engineering in a PFS venery so now we

289
00:15:48,060 --> 00:15:54,989
have a rattle rattle root antigen right

290
00:15:51,900 --> 00:15:57,360
no the implementation is not that easy

291
00:15:54,990 --> 00:16:03,750
there are still more check more checks

292
00:15:57,360 --> 00:16:06,960
to risk to bypass so firstly iOS does

293
00:16:03,750 --> 00:16:10,610
not allow device to be mounted a modern

294
00:16:06,960 --> 00:16:15,360
ones my solution to this issue is that

295
00:16:10,610 --> 00:16:20,900
we can clear the mounted on flag of the

296
00:16:15,360 --> 00:16:24,589
root device root device we spec flag

297
00:16:20,900 --> 00:16:28,140
once we clear this flag in in this for a

298
00:16:24,589 --> 00:16:33,029
month once we clear the money down flag

299
00:16:28,140 --> 00:16:37,170
in the spec files we are able to mounted

300
00:16:33,029 --> 00:16:41,450
the device for twice of certain or many

301
00:16:37,170 --> 00:16:45,510
times this is the implementation of this

302
00:16:41,450 --> 00:16:48,300
bypass and secondly there is a boundary

303
00:16:45,510 --> 00:16:52,200
in the mountainous structure pointing to

304
00:16:48,300 --> 00:16:54,630
its belonging mod structure API FS

305
00:16:52,200 --> 00:16:57,410
checks the consistency between the mod

306
00:16:54,630 --> 00:17:01,860
structure under the mount data structure

307
00:16:57,410 --> 00:17:06,920
is so if we have a monitor structure but

308
00:17:01,860 --> 00:17:09,660
it's the the punter in a unit a does not

309
00:17:06,920 --> 00:17:12,120
want who is following mount structure

310
00:17:09,660 --> 00:17:15,120
the path the colonel may panic

311
00:17:12,119 --> 00:17:18,349
so my press my solution to this issue is

312
00:17:15,119 --> 00:17:22,290
that before replacing Reutimann the

313
00:17:18,349 --> 00:17:27,169
monitor we can cite the hunter in this

314
00:17:22,290 --> 00:17:27,170
new monitor to the original route mount

315
00:17:28,199 --> 00:17:38,280
sorry what privilege should we use why

316
00:17:32,730 --> 00:17:41,760
in the remand procedure in a text before

317
00:17:38,280 --> 00:17:43,049
hours Eulerian country route fluid is

318
00:17:41,760 --> 00:17:46,049
enough

319
00:17:43,049 --> 00:17:48,809
but after eleven point three if we use

320
00:17:46,049 --> 00:17:53,249
good plea privilege we will get an arrow

321
00:17:48,809 --> 00:17:58,289
like this like this this arrow is caught

322
00:17:53,249 --> 00:18:00,809
by a sandbox track so in order to bypass

323
00:17:58,289 --> 00:18:05,220
this and the balls check and so this

324
00:18:00,809 --> 00:18:08,908
problem I found a detour in the function

325
00:18:05,220 --> 00:18:12,029
in the kernel function a Mac mount check

326
00:18:08,909 --> 00:18:15,240
mount in this function we can use the

327
00:18:12,029 --> 00:18:19,639
kernel credential to stop the system

328
00:18:15,240 --> 00:18:22,409
from performing further sandbox check

329
00:18:19,639 --> 00:18:25,080
you can see from the code that the

330
00:18:22,409 --> 00:18:27,509
kernel chance whether our process has

331
00:18:25,080 --> 00:18:30,570
the kernel credential if we have the

332
00:18:27,509 --> 00:18:34,769
kernel current issue it will stop the

333
00:18:30,570 --> 00:18:41,418
sandwich track now so this is the

334
00:18:34,769 --> 00:18:45,779
implementation we can set the PU cred

335
00:18:41,419 --> 00:18:51,419
counter in our process 2.0 the kernel

336
00:18:45,779 --> 00:18:54,809
credential but should we keep using the

337
00:18:51,419 --> 00:18:58,139
kernel a credential after a month have

338
00:18:54,809 --> 00:19:01,080
finished if we keep using kernel

339
00:18:58,139 --> 00:19:06,508
credential the kernel will also panic

340
00:19:01,080 --> 00:19:10,529
like this so where this panic happens in

341
00:19:06,509 --> 00:19:12,869
fact if an operation target does not

342
00:19:10,529 --> 00:19:16,039
belong to the kernel but current process

343
00:19:12,869 --> 00:19:19,980
has the kernel kernel credential a

344
00:19:16,039 --> 00:19:22,740
sandbox will give us a panic this

345
00:19:19,980 --> 00:19:25,799
solution is quite easy

346
00:19:22,740 --> 00:19:30,119
we need to restore the credential of our

347
00:19:25,799 --> 00:19:36,600
process to explore to its original after

348
00:19:30,119 --> 00:19:39,779
we have called the mount system call so

349
00:19:36,600 --> 00:19:43,080
finally we can have a successful

350
00:19:39,779 --> 00:19:46,759
jailbreak and Industry will preview we

351
00:19:43,080 --> 00:19:48,809
can install untrusted apps in

352
00:19:46,759 --> 00:19:51,690
applications directory and the create

353
00:19:48,809 --> 00:19:53,960
files in the root directory here is a

354
00:19:51,690 --> 00:19:53,960
demo

355
00:19:54,070 --> 00:20:00,510
alfe our eye you know in ponds free on

356
00:19:57,730 --> 00:20:00,510
the ones you're Greek

357
00:20:16,880 --> 00:20:21,889
no it seems that it's not quite clear

358
00:20:22,250 --> 00:20:31,460
here we have installed the terminal and

359
00:20:26,370 --> 00:20:33,989
the cydia apps in the OS and also we are

360
00:20:31,460 --> 00:20:45,090
creating a new file in the root

361
00:20:33,990 --> 00:20:47,220
partition in the root directory we can

362
00:20:45,090 --> 00:20:53,668
see that over house accrued successfully

363
00:20:47,220 --> 00:20:56,389
created a data file so let's go there

364
00:20:53,669 --> 00:21:00,929
there are two things that we need to

365
00:20:56,389 --> 00:21:03,479
especially note in this slide that the

366
00:21:00,929 --> 00:21:07,440
first one is that our solution it's only

367
00:21:03,480 --> 00:21:10,799
a temporary month that means our master

368
00:21:07,440 --> 00:21:12,840
only modifies such structures in kernel

369
00:21:10,799 --> 00:21:16,500
memory and that's not modified and in

370
00:21:12,840 --> 00:21:18,750
configuration files so after reboot the

371
00:21:16,500 --> 00:21:21,080
root the root publishing will still be

372
00:21:18,750 --> 00:21:23,610
reverted to the original snapshot and

373
00:21:21,080 --> 00:21:26,789
our change through files and a direct

374
00:21:23,610 --> 00:21:29,870
read directories are discarded the

375
00:21:26,789 --> 00:21:32,760
second thing we should note that is that

376
00:21:29,870 --> 00:21:36,539
this method was proposed at a time of

377
00:21:32,760 --> 00:21:40,950
our own country it may not work on our

378
00:21:36,539 --> 00:21:43,408
style following our method as some

379
00:21:40,950 --> 00:21:46,559
others have proposed the other case of

380
00:21:43,409 --> 00:21:51,169
bypass method all these measures Arabic

381
00:21:46,559 --> 00:21:54,960
brilliant and Umang has proposed a

382
00:21:51,169 --> 00:21:57,799
persistent remounting solution which is

383
00:21:54,960 --> 00:22:01,679
built on temporary mounting solution

384
00:21:57,799 --> 00:22:04,470
like our matter his master makes changes

385
00:22:01,679 --> 00:22:07,289
to wanted felt and the directories after

386
00:22:04,470 --> 00:22:10,409
a temporary mount as what are what we

387
00:22:07,289 --> 00:22:14,129
have done and then it renamed the root

388
00:22:10,409 --> 00:22:16,919
partition snapshot with Tammany and a

389
00:22:14,130 --> 00:22:20,669
Chris the new snapshot for root relation

390
00:22:16,919 --> 00:22:23,760
now Italy named the new pad snapshot

391
00:22:20,669 --> 00:22:27,659
with the original snapshot name finally

392
00:22:23,760 --> 00:22:29,379
all fails and the directory changes will

393
00:22:27,659 --> 00:22:34,320
be participant after

394
00:22:29,380 --> 00:22:36,640
buuut Costa has also proposed another

395
00:22:34,320 --> 00:22:40,810
persistently mounting solution in

396
00:22:36,640 --> 00:22:43,450
Electra 11.3 upon one his master the

397
00:22:40,810 --> 00:22:45,700
first makes another rep amount of root

398
00:22:43,450 --> 00:22:48,430
partition as weak as what we have done

399
00:22:45,700 --> 00:22:51,910
here and mmm

400
00:22:48,430 --> 00:22:55,350
other then it renames the original

401
00:22:51,910 --> 00:22:58,810
snapshot to a dummy name then reboots

402
00:22:55,350 --> 00:23:01,360
the system now cannot find the original

403
00:22:58,810 --> 00:23:05,800
stem solid since its name has been

404
00:23:01,360 --> 00:23:07,929
written changed then it would then who

405
00:23:05,800 --> 00:23:13,149
will mount the root partition in the old

406
00:23:07,930 --> 00:23:17,610
way in a regular way as so up that Costa

407
00:23:13,150 --> 00:23:21,040
and the electro can use the method in

408
00:23:17,610 --> 00:23:23,219
before eleven pon3 to remount with the

409
00:23:21,040 --> 00:23:26,830
root collision

410
00:23:23,220 --> 00:23:32,080
so these measures are very brilliant and

411
00:23:26,830 --> 00:23:35,290
were about in conclusion in this talk

412
00:23:32,080 --> 00:23:38,590
how introduced in some basics about her

413
00:23:35,290 --> 00:23:42,460
high profile system and explained past

414
00:23:38,590 --> 00:23:48,429
attacks on remote on remounting root

415
00:23:42,460 --> 00:23:52,150
filesystem and I also shown that how

416
00:23:48,430 --> 00:23:56,710
high profile system has defend against

417
00:23:52,150 --> 00:24:00,040
previous attacks and also proposed a new

418
00:23:56,710 --> 00:24:03,520
bypass method and explained some other

419
00:24:00,040 --> 00:24:04,629
purpose measures mmm that's all format

420
00:24:03,520 --> 00:24:07,720
madhawk thank you

421
00:24:04,630 --> 00:24:12,750
you can you can you can follow me on

422
00:24:07,720 --> 00:24:12,750
twitter and is there any question

423
00:24:22,110 --> 00:24:28,350
the I take it this presumes that you are

424
00:24:26,500 --> 00:24:32,320
already root to do these things

425
00:24:28,350 --> 00:24:35,830
hmm yeah as I have said the assumption

426
00:24:32,320 --> 00:24:39,039
is that we have already how rutilated a

427
00:24:35,830 --> 00:24:52,928
privilege and the ability to arbitrary

428
00:24:39,039 --> 00:24:54,129
write and read kernel memory yeah okay

429
00:24:52,929 --> 00:24:58,809
thank you all guys

430
00:24:54,130 --> 00:24:58,809
[Applause]

