1
00:00:00,030 --> 00:00:07,200
all right so we're gonna start now

2
00:00:04,950 --> 00:00:07,680
hi everyone good morning thank you for

3
00:00:07,200 --> 00:00:09,300
being here

4
00:00:07,680 --> 00:00:11,670
and we're pretty happy to be talking

5
00:00:09,300 --> 00:00:14,730
about a research we did in the past few

6
00:00:11,670 --> 00:00:16,590
months about a ufi rootkit we found in

7
00:00:14,730 --> 00:00:18,150
the wild and what makes this thing very

8
00:00:16,590 --> 00:00:20,220
very interesting is that it was actually

9
00:00:18,150 --> 00:00:22,400
the first one that was found in the

10
00:00:20,220 --> 00:00:24,900
world weary found an infection that was

11
00:00:22,400 --> 00:00:27,689
and then I could I was using this UEFI

12
00:00:24,900 --> 00:00:30,119
rootkit to target their other victims

13
00:00:27,689 --> 00:00:32,278
right so before we dive in I just wanted

14
00:00:30,119 --> 00:00:34,680
to introduce ourselves so my name is

15
00:00:32,279 --> 00:00:36,059
Ryan good time and together with my

16
00:00:34,680 --> 00:00:38,399
colleague Phil aggression

17
00:00:36,059 --> 00:00:40,709
we are both malware researcher we're

18
00:00:38,399 --> 00:00:43,829
both based in Montreal we work as more

19
00:00:40,710 --> 00:00:48,360
researcher for an security firm called

20
00:00:43,829 --> 00:00:50,219
ESET and we do maori research as as a

21
00:00:48,360 --> 00:00:52,260
work right so we do reverse engineering

22
00:00:50,219 --> 00:00:54,930
mostly and we try to piece together our

23
00:00:52,260 --> 00:00:56,910
different campaigns so if you looked at

24
00:00:54,930 --> 00:00:59,820
our title or you saw that we actually

25
00:00:56,910 --> 00:01:02,218
attribute these this UFO rootkit to a

26
00:00:59,820 --> 00:01:04,319
threat actor we called Senate but it

27
00:01:02,219 --> 00:01:06,960
also goes with different names so a

28
00:01:04,319 --> 00:01:09,570
fancy bear a PT 28 strontium C all

29
00:01:06,960 --> 00:01:11,908
aliases for the same group and before we

30
00:01:09,570 --> 00:01:13,679
dive in into the tools these guys are

31
00:01:11,909 --> 00:01:16,619
using I just want to make sure that you

32
00:01:13,680 --> 00:01:18,930
are familiar with this is channel truth

33
00:01:16,619 --> 00:01:21,210
so just let me let me ask you a question

34
00:01:18,930 --> 00:01:25,049
first how many people know of this trial

35
00:01:21,210 --> 00:01:27,869
actor and ok cool so about half people

36
00:01:25,049 --> 00:01:31,200
probably so it's an espionage true so

37
00:01:27,869 --> 00:01:33,900
they don't do cyber crime for really

38
00:01:31,200 --> 00:01:35,400
money they do it to gain information on

39
00:01:33,900 --> 00:01:37,860
the victim system right they've been

40
00:01:35,400 --> 00:01:39,390
active since the early 2000 and they

41
00:01:37,860 --> 00:01:41,070
were very visible in the past few years

42
00:01:39,390 --> 00:01:43,320
because they did some very notorious

43
00:01:41,070 --> 00:01:45,720
hack so I'm just gonna highlight some of

44
00:01:43,320 --> 00:01:47,758
them so maybe you remember the act of

45
00:01:45,720 --> 00:01:51,119
the Democratic National Committee or the

46
00:01:47,759 --> 00:01:52,979
DNC that happened in 2016 it was leading

47
00:01:51,119 --> 00:01:55,530
to the u.s. presidential election and

48
00:01:52,979 --> 00:01:58,140
they compromised a lot of systems and

49
00:01:55,530 --> 00:01:59,880
they were able to leak emails and leak

50
00:01:58,140 --> 00:02:01,829
them online and a lot of people were

51
00:01:59,880 --> 00:02:04,679
seeing the conversation happening inside

52
00:02:01,829 --> 00:02:06,658
again see the other act that happened

53
00:02:04,680 --> 00:02:07,740
recently is the world anti-doping agency

54
00:02:06,659 --> 00:02:10,590
or wada

55
00:02:07,740 --> 00:02:12,450
so these guys are literally behind this

56
00:02:10,590 --> 00:02:13,650
actually were able again to compromise

57
00:02:12,450 --> 00:02:15,689
systems

58
00:02:13,650 --> 00:02:18,450
deal email signal information and they

59
00:02:15,689 --> 00:02:20,578
also leaked it online under hack since

60
00:02:18,450 --> 00:02:22,589
were close to friends here maybe some of

61
00:02:20,579 --> 00:02:24,930
you noticed TV five moment which is a

62
00:02:22,590 --> 00:02:26,879
French broadcaster that air program

63
00:02:24,930 --> 00:02:28,890
throughout the world and this group is

64
00:02:26,879 --> 00:02:30,659
again allegedly behind a hack and they

65
00:02:28,890 --> 00:02:32,899
were able to cut their signal down for a

66
00:02:30,659 --> 00:02:35,569
couple of hours and there's a lot of

67
00:02:32,900 --> 00:02:38,010
other hacks that these guys did and

68
00:02:35,569 --> 00:02:39,629
isolated Lee because at he said we don't

69
00:02:38,010 --> 00:02:41,700
do attribution so what we call the

70
00:02:39,629 --> 00:02:44,310
Senate group is Murli campaigns that

71
00:02:41,700 --> 00:02:46,018
these guys are doing or tools that these

72
00:02:44,310 --> 00:02:49,620
guys are using in their campaigns but

73
00:02:46,019 --> 00:02:51,569
other groups actually try to to

74
00:02:49,620 --> 00:02:53,430
attribute these attacks to a specific

75
00:02:51,569 --> 00:02:55,170
group and there was something very

76
00:02:53,430 --> 00:02:58,829
interesting that happened last July

77
00:02:55,170 --> 00:03:01,170
which is an indictment from the United

78
00:02:58,829 --> 00:03:02,790
States Department of Justice where they

79
00:03:01,170 --> 00:03:04,798
were naming specific people and they

80
00:03:02,790 --> 00:03:08,010
were and this one actually saying that

81
00:03:04,799 --> 00:03:11,879
these guys were behind be DN C AK so

82
00:03:08,010 --> 00:03:13,439
this is of course another hint that

83
00:03:11,879 --> 00:03:15,268
these guys were linked to this and why

84
00:03:13,439 --> 00:03:17,129
it's important for us is because they

85
00:03:15,269 --> 00:03:19,470
are actually naming a lot of the

86
00:03:17,129 --> 00:03:21,060
backdoors that the Senate operators are

87
00:03:19,470 --> 00:03:22,799
using and the backdoors that we are

88
00:03:21,060 --> 00:03:25,889
seeing and that are targeting our

89
00:03:22,799 --> 00:03:27,870
customers right so this is one another

90
00:03:25,889 --> 00:03:29,430
proof that these guys are behind these

91
00:03:27,870 --> 00:03:32,099
hacks and there was another one quite

92
00:03:29,430 --> 00:03:34,709
recently in October this year where

93
00:03:32,099 --> 00:03:36,720
there was also linking this group to the

94
00:03:34,709 --> 00:03:38,699
water hack as well as other hack and

95
00:03:36,720 --> 00:03:40,799
naming people and naming the tools the

96
00:03:38,699 --> 00:03:43,169
backdoor said these guys were using so

97
00:03:40,799 --> 00:03:45,870
as the last step I just want to show you

98
00:03:43,169 --> 00:03:48,060
how they are operating so they usually

99
00:03:45,870 --> 00:03:49,530
use email so this is an example with

100
00:03:48,060 --> 00:03:52,319
phishing email that would send to the

101
00:03:49,530 --> 00:03:54,000
targets you can see here the email says

102
00:03:52,319 --> 00:03:55,500
that your personal data has been found

103
00:03:54,000 --> 00:03:58,169
on Google and then there's a link that

104
00:03:55,500 --> 00:04:00,419
if you click on it you know if you

105
00:03:58,169 --> 00:04:02,549
direct it to the real Google server

106
00:04:00,419 --> 00:04:05,729
you're in fact redirected to a page that

107
00:04:02,549 --> 00:04:07,709
is owned by the Senate group right this

108
00:04:05,729 --> 00:04:09,989
is an example of the type of phishing

109
00:04:07,709 --> 00:04:12,599
page that you would see if the user goes

110
00:04:09,989 --> 00:04:14,430
ahead and enter their credentials it

111
00:04:12,599 --> 00:04:16,019
will then be actual traded to the same

112
00:04:14,430 --> 00:04:18,239
it operators which can then reuse them

113
00:04:16,019 --> 00:04:19,858
of course they're not only using

114
00:04:18,238 --> 00:04:21,779
phishing emails they're also using

115
00:04:19,858 --> 00:04:24,240
emails to try to distribute their

116
00:04:21,779 --> 00:04:25,860
malware so they will have an attachment

117
00:04:24,240 --> 00:04:27,120
another such attachment that will try to

118
00:04:25,860 --> 00:04:30,000
install one of

119
00:04:27,120 --> 00:04:31,620
his tools they use to spy on on their

120
00:04:30,000 --> 00:04:33,270
victims right so that you can think of

121
00:04:31,620 --> 00:04:35,490
backdoors keyloggers

122
00:04:33,270 --> 00:04:37,799
screenshot capture all type of tools

123
00:04:35,490 --> 00:04:39,540
that allow them to know what is going on

124
00:04:37,800 --> 00:04:43,169
on a victim and steal information from

125
00:04:39,540 --> 00:04:46,020
them so this kind of brings us to our

126
00:04:43,169 --> 00:04:47,969
main topic which is the UFO rootkit so

127
00:04:46,020 --> 00:04:50,099
not only are they they have

128
00:04:47,970 --> 00:04:51,630
sophisticated backdoors that are trying

129
00:04:50,100 --> 00:04:53,340
to be persistent but through our

130
00:04:51,630 --> 00:04:55,639
research what we found is that they

131
00:04:53,340 --> 00:04:58,739
actually also have a very sophisticated

132
00:04:55,639 --> 00:05:00,990
ufi rootkit and not only they had this

133
00:04:58,740 --> 00:05:03,720
but they also had the tooling to install

134
00:05:00,990 --> 00:05:05,610
it remotely on a computer so of course

135
00:05:03,720 --> 00:05:08,639
if you have physical access to computer

136
00:05:05,610 --> 00:05:10,260
it's actually quite easier to reflash

137
00:05:08,639 --> 00:05:13,440
the firmware to install these type of

138
00:05:10,260 --> 00:05:15,690
UFO rootkit in that case as we will show

139
00:05:13,440 --> 00:05:18,510
you they actually use a software tool to

140
00:05:15,690 --> 00:05:20,160
patch it framework so this concludes our

141
00:05:18,510 --> 00:05:22,770
introduction so what we're gonna see

142
00:05:20,160 --> 00:05:24,419
today is first what is LoJack so I will

143
00:05:22,770 --> 00:05:26,639
explain why it is important to look at

144
00:05:24,419 --> 00:05:27,750
this anti-theft software and we're going

145
00:05:26,639 --> 00:05:29,250
to take a quick look at the past

146
00:05:27,750 --> 00:05:32,220
research on insecurities and

147
00:05:29,250 --> 00:05:34,770
probabilities that were found in this in

148
00:05:32,220 --> 00:05:37,470
this software and then we'll read I will

149
00:05:34,770 --> 00:05:40,080
begin the meat of the presentation where

150
00:05:37,470 --> 00:05:42,389
how we found this UEFI rootkit also we

151
00:05:40,080 --> 00:05:44,310
will show you the analysis of all the

152
00:05:42,389 --> 00:05:46,440
components how its works and also

153
00:05:44,310 --> 00:05:47,789
finally we will do some remediation so

154
00:05:46,440 --> 00:05:51,360
how you can protect yourself from this

155
00:05:47,789 --> 00:05:53,250
threat so LoJack it's an anti-theft

156
00:05:51,360 --> 00:05:55,680
software it wasn't only for us compute

157
00:05:53,250 --> 00:05:57,870
race maybe a lot of people here know

158
00:05:55,680 --> 00:06:00,030
about this this software it's made by a

159
00:05:57,870 --> 00:06:02,760
company called absolute software and

160
00:06:00,030 --> 00:06:05,070
it's present in a lot of laptops so

161
00:06:02,760 --> 00:06:08,430
there's a good possibility that on your

162
00:06:05,070 --> 00:06:11,010
laptop you have this tool and install in

163
00:06:08,430 --> 00:06:14,010
the on your system and what it does is

164
00:06:11,010 --> 00:06:16,740
that if you laptop is ever stolen or you

165
00:06:14,010 --> 00:06:19,320
lose it it has different services to try

166
00:06:16,740 --> 00:06:21,930
to locate it using Wi-Fi sing or GPS

167
00:06:19,320 --> 00:06:23,849
vacation you can also send different

168
00:06:21,930 --> 00:06:27,479
commands so you can try to lock your

169
00:06:23,849 --> 00:06:31,139
computer you can also try to wipe it

170
00:06:27,479 --> 00:06:33,330
remotely so that a hardware tap will not

171
00:06:31,139 --> 00:06:36,300
result in to a data leak and you can try

172
00:06:33,330 --> 00:06:38,609
to read to locate it through this this

173
00:06:36,300 --> 00:06:40,260
computer through this software and you

174
00:06:38,610 --> 00:06:40,620
need to activate it and it's usually use

175
00:06:40,260 --> 00:06:43,380
Bourg

176
00:06:40,620 --> 00:06:45,270
to make sure that he can track back some

177
00:06:43,380 --> 00:06:46,800
of their laptops should it be stolen

178
00:06:45,270 --> 00:06:48,780
right and there was a lot of past

179
00:06:46,800 --> 00:06:50,550
research on this why because of course

180
00:06:48,780 --> 00:06:52,349
if you have an anti-theft software like

181
00:06:50,550 --> 00:06:54,270
this one you want to make it as

182
00:06:52,350 --> 00:06:56,130
persistent as possible

183
00:06:54,270 --> 00:06:59,190
so how these guys were doing it is that

184
00:06:56,130 --> 00:07:01,710
they had a UEFI module that will put

185
00:06:59,190 --> 00:07:04,380
back the agent if the thief would go

186
00:07:01,710 --> 00:07:06,659
ahead and reinstall windows or replace

187
00:07:04,380 --> 00:07:08,610
the artist let's say so if they do go

188
00:07:06,660 --> 00:07:10,919
ahead and do that well the system is

189
00:07:08,610 --> 00:07:13,440
starting up the UEFI module was able to

190
00:07:10,919 --> 00:07:16,380
still reinstall the agent that could

191
00:07:13,440 --> 00:07:17,969
locate the laptop to the first research

192
00:07:16,380 --> 00:07:20,580
that I want to show you is this one it

193
00:07:17,970 --> 00:07:21,600
was presented at blackhat us in 2009 so

194
00:07:20,580 --> 00:07:23,639
as you can see this is pretty old

195
00:07:21,600 --> 00:07:24,120
research and I want to stress that out

196
00:07:23,639 --> 00:07:26,400
right now

197
00:07:24,120 --> 00:07:28,919
like the vulnerabilities that we will

198
00:07:26,400 --> 00:07:31,830
outline today for this software is

199
00:07:28,919 --> 00:07:33,780
reload runner abilities the newer

200
00:07:31,830 --> 00:07:36,150
version of the software does not have

201
00:07:33,780 --> 00:07:39,500
this insecurities built in but still as

202
00:07:36,150 --> 00:07:42,239
we will see the old version we use to

203
00:07:39,500 --> 00:07:43,740
come from I systems right so in this

204
00:07:42,240 --> 00:07:45,570
research they expose design

205
00:07:43,740 --> 00:07:47,910
vulnerabilities in the agent

206
00:07:45,570 --> 00:07:51,690
insecurities and it also document and

207
00:07:47,910 --> 00:07:53,310
the architecture of the LoJack solution

208
00:07:51,690 --> 00:07:55,650
and I want to show it to you because as

209
00:07:53,310 --> 00:07:57,930
you will see later on the Senate

210
00:07:55,650 --> 00:07:59,849
operators actually make quite a bit the

211
00:07:57,930 --> 00:08:02,520
architecture will see right now so the

212
00:07:59,849 --> 00:08:04,889
first step is of course the bias or the

213
00:08:02,520 --> 00:08:06,900
ufi module so it contains the agent in

214
00:08:04,889 --> 00:08:09,599
its dropper and it will go ahead and

215
00:08:06,900 --> 00:08:12,060
replace a file called Auto Check the THC

216
00:08:09,599 --> 00:08:13,979
that is present on all Windows system

217
00:08:12,060 --> 00:08:16,500
you might know what to check the techs

218
00:08:13,979 --> 00:08:18,900
he is it's basically an integrity check

219
00:08:16,500 --> 00:08:21,030
for our disk so as Windows is booting up

220
00:08:18,900 --> 00:08:22,560
you will see sometimes a percentage on

221
00:08:21,030 --> 00:08:25,049
your boot up screen and this is this

222
00:08:22,560 --> 00:08:27,150
auto type it will check the integrity

223
00:08:25,050 --> 00:08:29,039
but what LoJack is doing is that it will

224
00:08:27,150 --> 00:08:31,020
replace it so that it can actually

225
00:08:29,039 --> 00:08:33,958
install its own agent which is the

226
00:08:31,020 --> 00:08:36,449
second step which is only the the main

227
00:08:33,958 --> 00:08:40,079
idea is to install the small agent as a

228
00:08:36,450 --> 00:08:42,000
service once the service started in step

229
00:08:40,080 --> 00:08:43,919
3 you have the small agent and the role

230
00:08:42,000 --> 00:08:46,589
of the small agent is to make sure that

231
00:08:43,919 --> 00:08:48,750
the full recovery agent is always

232
00:08:46,589 --> 00:08:50,730
running on the system and how it does

233
00:08:48,750 --> 00:08:52,770
this is that if it's not there it has

234
00:08:50,730 --> 00:08:53,690
the ability to connect to a distance

235
00:08:52,770 --> 00:08:56,090
server

236
00:08:53,690 --> 00:08:58,910
some code and then execute it so you can

237
00:08:56,090 --> 00:09:00,640
see right away the vulnerability that

238
00:08:58,910 --> 00:09:04,310
could happen if someone could actually

239
00:09:00,640 --> 00:09:06,740
control how the agent is where the agent

240
00:09:04,310 --> 00:09:10,989
is connecting itself to and how we'll do

241
00:09:06,740 --> 00:09:13,220
it is also very strange in terms of a

242
00:09:10,990 --> 00:09:15,110
legitimate software because how you'll

243
00:09:13,220 --> 00:09:17,330
do it is that it will first pawn a

244
00:09:15,110 --> 00:09:20,450
services process then inject the DLL

245
00:09:17,330 --> 00:09:22,790
inside then from there we'll spawn an

246
00:09:20,450 --> 00:09:26,300
Internet Explorer process inject the DLL

247
00:09:22,790 --> 00:09:29,329
again and we'll use this as a point to

248
00:09:26,300 --> 00:09:30,890
reach out to its distant server which is

249
00:09:29,330 --> 00:09:32,270
not something we see regularly in

250
00:09:30,890 --> 00:09:33,710
editing software in fact this is

251
00:09:32,270 --> 00:09:36,530
something we see all the time in malware

252
00:09:33,710 --> 00:09:38,540
right so this is kind of a strange

253
00:09:36,530 --> 00:09:40,699
behavior for legitimate software and

254
00:09:38,540 --> 00:09:42,410
then the last step which is a fourth one

255
00:09:40,700 --> 00:09:44,000
is a normal operation the record the

256
00:09:42,410 --> 00:09:48,500
recovery agent is running on the system

257
00:09:44,000 --> 00:09:50,960
and you have basically the mean - to

258
00:09:48,500 --> 00:09:53,120
locate and recover and at the laptop so

259
00:09:50,960 --> 00:09:55,640
you might wonder how the small agent is

260
00:09:53,120 --> 00:09:58,160
actually trying or to reach out to the

261
00:09:55,640 --> 00:10:00,140
server how can it know the distance

262
00:09:58,160 --> 00:10:02,930
server domain name or IP address well it

263
00:10:00,140 --> 00:10:05,600
has a configuration file embedded in its

264
00:10:02,930 --> 00:10:07,370
code and this is the part of the small

265
00:10:05,600 --> 00:10:08,900
agent code that contains it and it's

266
00:10:07,370 --> 00:10:10,730
encrypted as you can see we cannot see

267
00:10:08,900 --> 00:10:14,030
anything but the encryption is actually

268
00:10:10,730 --> 00:10:16,220
pretty bad in terms of security because

269
00:10:14,030 --> 00:10:18,319
it's a single by just or key so it's

270
00:10:16,220 --> 00:10:21,710
very easy to decrypt it and you can see

271
00:10:18,320 --> 00:10:23,750
here the domain name which is search

272
00:10:21,710 --> 00:10:25,790
name query comm which is legitimate

273
00:10:23,750 --> 00:10:28,130
absolute software domain name that is

274
00:10:25,790 --> 00:10:33,740
used to send and that the agent will

275
00:10:28,130 --> 00:10:35,540
connect to and try to get will be able

276
00:10:33,740 --> 00:10:36,950
to have commands such as the lock

277
00:10:35,540 --> 00:10:39,530
command that we've seen a bit earlier on

278
00:10:36,950 --> 00:10:41,510
and the four bytes preceding this domain

279
00:10:39,530 --> 00:10:42,980
is actually an IP address so the bad

280
00:10:41,510 --> 00:10:44,720
thing about this one is that there's no

281
00:10:42,980 --> 00:10:47,690
integrity check so the file is not

282
00:10:44,720 --> 00:10:49,910
signed so anyone that has access to your

283
00:10:47,690 --> 00:10:51,800
to your system and is able to override

284
00:10:49,910 --> 00:10:54,260
this configuration file can actually

285
00:10:51,800 --> 00:10:56,240
make the small agent connect to a server

286
00:10:54,260 --> 00:10:57,950
of its choosing right and I'm only

287
00:10:56,240 --> 00:10:59,060
showing this particular vulnerability to

288
00:10:57,950 --> 00:11:00,860
you because it's the only one that

289
00:10:59,060 --> 00:11:04,359
matters in our case because this is how

290
00:11:00,860 --> 00:11:07,610
the Senate operator actually did it so

291
00:11:04,360 --> 00:11:10,160
although these vulnerabilities

292
00:11:07,610 --> 00:11:12,680
quite also we saw the research was in

293
00:11:10,160 --> 00:11:15,880
2009 we didn't see widespread use of

294
00:11:12,680 --> 00:11:19,579
disparate ability in the wild until May

295
00:11:15,880 --> 00:11:21,649
2018 where the cert team from our

296
00:11:19,580 --> 00:11:24,320
networks published this blog post which

297
00:11:21,649 --> 00:11:26,450
was called a title LoJack becomes a

298
00:11:24,320 --> 00:11:28,519
double agent in this in this blog post

299
00:11:26,450 --> 00:11:31,370
what they found is that there were a lot

300
00:11:28,519 --> 00:11:34,190
of small agent modifications in the wild

301
00:11:31,370 --> 00:11:35,930
where the attackers would change the

302
00:11:34,190 --> 00:11:38,420
configuration file to point to a domain

303
00:11:35,930 --> 00:11:40,219
that they own an IP address and what was

304
00:11:38,420 --> 00:11:42,769
very interesting is that these domains

305
00:11:40,220 --> 00:11:46,160
these IPS were already seen before in

306
00:11:42,769 --> 00:11:49,010
fact they were used by some Senate tools

307
00:11:46,160 --> 00:11:51,019
so that's how that's what the first link

308
00:11:49,010 --> 00:11:55,550
was that this small agent might be

309
00:11:51,019 --> 00:11:57,649
related to to to Senate right so we we

310
00:11:55,550 --> 00:12:02,060
saw this and we thought okay so what's

311
00:11:57,649 --> 00:12:03,980
the most likely hypothesis that this

312
00:12:02,060 --> 00:12:05,510
small agent would come in a system and

313
00:12:03,980 --> 00:12:08,990
if we go back to the architecture slide

314
00:12:05,510 --> 00:12:11,240
of course sub-tree is a likely scenario

315
00:12:08,990 --> 00:12:13,310
where we already know that Senate

316
00:12:11,240 --> 00:12:15,320
operators have a lot of backdoors order

317
00:12:13,310 --> 00:12:17,719
disposal so they could only use these

318
00:12:15,320 --> 00:12:19,610
backdoors to just drop a small agent so

319
00:12:17,720 --> 00:12:21,800
of course you don't benefit from all the

320
00:12:19,610 --> 00:12:24,529
persistence mechanism that the or the

321
00:12:21,800 --> 00:12:27,050
total solution of LoJack is giving you

322
00:12:24,529 --> 00:12:28,459
you don't have the ufi module but since

323
00:12:27,050 --> 00:12:30,469
you're only changing a few bytes and

324
00:12:28,459 --> 00:12:32,660
small agent and that it is legitimate

325
00:12:30,470 --> 00:12:34,880
software you're still benefiting from

326
00:12:32,660 --> 00:12:36,980
the fact that a lot of EDS are actually

327
00:12:34,880 --> 00:12:39,050
white listing this the small agent so

328
00:12:36,980 --> 00:12:41,149
it's it's like it's a likely scenario

329
00:12:39,050 --> 00:12:42,199
that they would just rely on the small

330
00:12:41,149 --> 00:12:44,839
agent and that's it

331
00:12:42,200 --> 00:12:47,300
but at that time we just began our

332
00:12:44,839 --> 00:12:50,300
telemetry and try to find out what

333
00:12:47,300 --> 00:12:52,040
exactly we could find and how big this

334
00:12:50,300 --> 00:12:54,979
thing was right so this is a

335
00:12:52,040 --> 00:12:56,630
configuration file and that I showed you

336
00:12:54,980 --> 00:13:00,079
earlier and what we found is that all

337
00:12:56,630 --> 00:13:02,810
these small agent that will link to the

338
00:13:00,079 --> 00:13:05,149
LoJack's campaign were based on the same

339
00:13:02,810 --> 00:13:07,760
small agent so it was all small aged and

340
00:13:05,149 --> 00:13:09,980
compiled in 2008 and all they were doing

341
00:13:07,760 --> 00:13:12,110
was changing configuration file in a

342
00:13:09,980 --> 00:13:14,390
couple of bytes ear and there but in in

343
00:13:12,110 --> 00:13:16,100
totality the vast majority of the

344
00:13:14,390 --> 00:13:18,500
changes was only in the configuration

345
00:13:16,100 --> 00:13:21,050
file but it allowed us to retry and do a

346
00:13:18,500 --> 00:13:23,690
white spray and try to find who

347
00:13:21,050 --> 00:13:25,490
he was targeted and we found some

348
00:13:23,690 --> 00:13:27,320
organizations that were targeted by this

349
00:13:25,490 --> 00:13:29,570
LoJack's campaign so they were mostly in

350
00:13:27,320 --> 00:13:31,730
the Balkans Central and Eastern European

351
00:13:29,570 --> 00:13:33,230
victims and there were only a few

352
00:13:31,730 --> 00:13:35,420
organizations and I want to stress that

353
00:13:33,230 --> 00:13:38,390
out because we know let's send it is

354
00:13:35,420 --> 00:13:40,370
targeting a lot of people a lot of

355
00:13:38,390 --> 00:13:42,500
organizations worldwide but what we

356
00:13:40,370 --> 00:13:44,210
found is that it's only a subset of

357
00:13:42,500 --> 00:13:46,640
these targets that were actually

358
00:13:44,210 --> 00:13:47,680
targeted by the hello.tex campaign it

359
00:13:46,640 --> 00:13:50,330
was mostly military and diplomatic

360
00:13:47,680 --> 00:13:52,520
organizations which is in line with the

361
00:13:50,330 --> 00:13:55,130
target that the Senate group usually

362
00:13:52,520 --> 00:13:57,199
targets and what's interesting is that

363
00:13:55,130 --> 00:14:01,100
in all of these organizations we were

364
00:13:57,200 --> 00:14:04,130
also able to find traces of other Senate

365
00:14:01,100 --> 00:14:07,780
tools which reinforces our thinking that

366
00:14:04,130 --> 00:14:10,670
this tool is really linked to send it so

367
00:14:07,780 --> 00:14:13,579
we're now at the point where we're

368
00:14:10,670 --> 00:14:15,290
wondering okay like is it the end of it

369
00:14:13,580 --> 00:14:18,560
is it only the small agent or we're

370
00:14:15,290 --> 00:14:20,329
actually going to find something better

371
00:14:18,560 --> 00:14:22,939
or something more deeper than that right

372
00:14:20,330 --> 00:14:24,860
so before we dive in it was I want to

373
00:14:22,940 --> 00:14:26,450
show you an interesting blog post which

374
00:14:24,860 --> 00:14:28,490
was published in Virus Bulletin by

375
00:14:26,450 --> 00:14:31,820
cousin ryu the director of great

376
00:14:28,490 --> 00:14:34,310
kaspersky where is saying that it's

377
00:14:31,820 --> 00:14:36,920
wondering where all where are all the a

378
00:14:34,310 --> 00:14:39,219
is an apt and of course a main advanced

379
00:14:36,920 --> 00:14:42,500
and what he says is that there are many

380
00:14:39,220 --> 00:14:45,140
cool research going on in the security

381
00:14:42,500 --> 00:14:47,180
industry and that no nation state actor

382
00:14:45,140 --> 00:14:49,250
has actually used it and one of them is

383
00:14:47,180 --> 00:14:51,709
actually this one which says we have yet

384
00:14:49,250 --> 00:14:53,510
to observe a real-world UEFI malware and

385
00:14:51,710 --> 00:14:55,670
what's funny because we were about to

386
00:14:53,510 --> 00:14:57,710
publish our report and this is

387
00:14:55,670 --> 00:15:00,430
definitely something we knew that would

388
00:14:57,710 --> 00:15:03,020
probably be crossed out pretty soon so

389
00:15:00,430 --> 00:15:05,030
before we look at the different tools

390
00:15:03,020 --> 00:15:07,460
that we found that led us to the ufi

391
00:15:05,030 --> 00:15:09,170
rootkit I just want to show you this

392
00:15:07,460 --> 00:15:10,700
tool so it's called readwrite everything

393
00:15:09,170 --> 00:15:13,250
it's a tool that is available online

394
00:15:10,700 --> 00:15:15,470
that read write everything calm and it's

395
00:15:13,250 --> 00:15:17,540
basically a tool that allows you to read

396
00:15:15,470 --> 00:15:19,400
and write the name is the pretty

397
00:15:17,540 --> 00:15:20,930
convenient it allows you to read and

398
00:15:19,400 --> 00:15:23,329
write a lot of information about your

399
00:15:20,930 --> 00:15:25,939
hard work so you have access to platform

400
00:15:23,330 --> 00:15:29,420
configuration registers and it gives you

401
00:15:25,940 --> 00:15:31,100
a whole lot of information about the the

402
00:15:29,420 --> 00:15:33,829
art where that is that your system is

403
00:15:31,100 --> 00:15:34,640
using and how it does this well it needs

404
00:15:33,830 --> 00:15:36,920
a kernel driver

405
00:15:34,640 --> 00:15:38,449
right and of course when newer version

406
00:15:36,920 --> 00:15:40,189
of Windows all required the kernel

407
00:15:38,450 --> 00:15:42,920
driver to be signed so this is the

408
00:15:40,190 --> 00:15:46,220
legitimate code sign certificate that is

409
00:15:42,920 --> 00:15:50,569
used by the kernel driver and we found

410
00:15:46,220 --> 00:15:52,790
this specific driver in a lot of the

411
00:15:50,570 --> 00:15:55,100
networks that we investigated in length

412
00:15:52,790 --> 00:15:56,270
with the LoJack's campaign and it's

413
00:15:55,100 --> 00:15:58,250
funny because it's not the first time

414
00:15:56,270 --> 00:16:00,949
that this driver is reused for nefarious

415
00:15:58,250 --> 00:16:02,840
purposes but in in in our case it was

416
00:16:00,950 --> 00:16:05,780
really the first hint that they were

417
00:16:02,840 --> 00:16:08,360
really maybe after the odd way sell the

418
00:16:05,780 --> 00:16:10,130
firmware so the first tool that I want

419
00:16:08,360 --> 00:16:13,010
to show you is this one was called info

420
00:16:10,130 --> 00:16:14,840
EFI @hc and it's using the kernel driver

421
00:16:13,010 --> 00:16:17,300
and it was just dumping a lot of

422
00:16:14,840 --> 00:16:19,370
information on a platform logging it in

423
00:16:17,300 --> 00:16:21,920
a log file here I'm only showing a small

424
00:16:19,370 --> 00:16:26,000
excerpt of it but the log file would be

425
00:16:21,920 --> 00:16:28,880
very big compared to that and as you

426
00:16:26,000 --> 00:16:31,070
might know if you are trying to target

427
00:16:28,880 --> 00:16:33,230
the system framework you need to have a

428
00:16:31,070 --> 00:16:35,420
lot of information of detail information

429
00:16:33,230 --> 00:16:37,340
on the platform itself so by running a

430
00:16:35,420 --> 00:16:39,949
tool like this you get information on

431
00:16:37,340 --> 00:16:41,930
the manufacturer of the of the firm of

432
00:16:39,950 --> 00:16:43,520
the motherboard and it can allows you to

433
00:16:41,930 --> 00:16:45,380
see whether there are some known

434
00:16:43,520 --> 00:16:47,780
vulnerabilities and there are some miss

435
00:16:45,380 --> 00:16:49,850
configuration that can then reuse to

436
00:16:47,780 --> 00:16:51,890
actually patch the firmware so if we go

437
00:16:49,850 --> 00:16:53,480
back to the architecture style so we

438
00:16:51,890 --> 00:16:55,400
already know that step 3

439
00:16:53,480 --> 00:16:57,170
could have been where would it what

440
00:16:55,400 --> 00:17:00,050
these guys were doing just using a

441
00:16:57,170 --> 00:17:02,240
regular backdoor to install the small

442
00:17:00,050 --> 00:17:04,459
agent but let's see what is the step

443
00:17:02,240 --> 00:17:07,790
before that it's actually this to check

444
00:17:04,459 --> 00:17:09,890
the THC so the the executable that is

445
00:17:07,790 --> 00:17:13,310
responsible to check integrity and that

446
00:17:09,890 --> 00:17:16,640
was used by logic to replace my logic to

447
00:17:13,310 --> 00:17:18,409
install the the small agent so we went

448
00:17:16,640 --> 00:17:20,570
in and tried to find something similar

449
00:17:18,410 --> 00:17:22,579
something that would tell us that these

450
00:17:20,569 --> 00:17:24,740
guys might be after the the firmware

451
00:17:22,579 --> 00:17:27,349
itself and we found an interesting file

452
00:17:24,740 --> 00:17:30,230
so instead of being caught to check the

453
00:17:27,349 --> 00:17:32,149
THC it was Auto cheap the THC so only

454
00:17:30,230 --> 00:17:35,120
one letter change but the behavior of

455
00:17:32,150 --> 00:17:37,220
the executable was very similar so you

456
00:17:35,120 --> 00:17:39,050
can see here it's installing a service

457
00:17:37,220 --> 00:17:42,200
with this name so this is the same name

458
00:17:39,050 --> 00:17:46,100
that the LoJack solution is using a

459
00:17:42,200 --> 00:17:47,870
service and we'll then point to the the

460
00:17:46,100 --> 00:17:48,230
location of the executable of the small

461
00:17:47,870 --> 00:17:51,110
agent

462
00:17:48,230 --> 00:17:54,110
suitable so from there the behavior of

463
00:17:51,110 --> 00:17:56,299
this touchy the THC and the LoJack

464
00:17:54,110 --> 00:17:57,740
replaced Auto check the ticks is very

465
00:17:56,299 --> 00:17:59,270
similar but there was one difference

466
00:17:57,740 --> 00:18:02,419
that really caught our eyes which is

467
00:17:59,270 --> 00:18:05,000
which you can see here so it's building

468
00:18:02,419 --> 00:18:07,730
a string and this string is actually the

469
00:18:05,000 --> 00:18:09,590
default value of this registry key so

470
00:18:07,730 --> 00:18:11,840
the boot executes one that you see in

471
00:18:09,590 --> 00:18:14,000
the bottom and this is actually the

472
00:18:11,840 --> 00:18:16,100
registry key that all the path to the

473
00:18:14,000 --> 00:18:18,470
auto check the THC so we didn't know

474
00:18:16,100 --> 00:18:20,299
what was the value before that but we

475
00:18:18,470 --> 00:18:22,669
know that this at Uchee the THC is

476
00:18:20,299 --> 00:18:25,400
actually putting it back to its default

477
00:18:22,669 --> 00:18:29,630
value probably an attempt to I'd that it

478
00:18:25,400 --> 00:18:31,309
was ever changed right so that was at

479
00:18:29,630 --> 00:18:33,350
that point we knew that they were at

480
00:18:31,309 --> 00:18:34,730
least trying to get to the framework

481
00:18:33,350 --> 00:18:36,949
because you don't do all of this you

482
00:18:34,730 --> 00:18:38,570
don't go through all this trouble if you

483
00:18:36,950 --> 00:18:40,880
did not have something in mind so we

484
00:18:38,570 --> 00:18:43,909
kept on digging and then we found the

485
00:18:40,880 --> 00:18:46,040
jackpot so this is a tool called every

486
00:18:43,910 --> 00:18:48,559
writer read the THC and it's a tool that

487
00:18:46,040 --> 00:18:52,299
is used to dump the SPI flash memory and

488
00:18:48,559 --> 00:18:55,460
write it to this right it still uses the

489
00:18:52,299 --> 00:18:58,370
readwrite everything driver and uses

490
00:18:55,460 --> 00:19:00,650
this for ioctl code to writes to write

491
00:18:58,370 --> 00:19:02,510
in read memory mapped i/o and also to

492
00:19:00,650 --> 00:19:05,450
read and write a configuration

493
00:19:02,510 --> 00:19:07,580
configuration register so if the the

494
00:19:05,450 --> 00:19:10,850
attacker will use this tool to dump the

495
00:19:07,580 --> 00:19:13,220
firmware of the machine so we of course

496
00:19:10,850 --> 00:19:15,678
reverse engineer that there were a lot

497
00:19:13,220 --> 00:19:17,480
of debug strings actually so it kind of

498
00:19:15,679 --> 00:19:19,910
indicate that this tool was probably

499
00:19:17,480 --> 00:19:21,770
under every development but it also

500
00:19:19,910 --> 00:19:23,450
helps us because as reverse engineers

501
00:19:21,770 --> 00:19:25,639
you have debug strings it makes your

502
00:19:23,450 --> 00:19:28,040
life a lot easier so it consists of

503
00:19:25,640 --> 00:19:30,049
mainly three operations so it will first

504
00:19:28,040 --> 00:19:32,360
log the information of bias control

505
00:19:30,049 --> 00:19:34,309
register and Fredrik will explain you

506
00:19:32,360 --> 00:19:35,479
why is doing this and why it's important

507
00:19:34,309 --> 00:19:37,700
for the attacker to have this

508
00:19:35,480 --> 00:19:40,190
information then it will locate the bias

509
00:19:37,700 --> 00:19:43,040
region base address and will finally

510
00:19:40,190 --> 00:19:44,870
read the ufi for more content and dump

511
00:19:43,040 --> 00:19:47,240
it to a file so it does not have the

512
00:19:44,870 --> 00:19:50,149
capability to actually upload the file

513
00:19:47,240 --> 00:19:51,440
to a malicious server but as senator

514
00:19:50,150 --> 00:19:52,730
operators already have a lot of

515
00:19:51,440 --> 00:19:55,040
different backdoors at their disposal

516
00:19:52,730 --> 00:19:57,770
they could actually just pull the file

517
00:19:55,040 --> 00:20:00,020
out without the need for this tool to

518
00:19:57,770 --> 00:20:01,580
actually being able to communicate with

519
00:20:00,020 --> 00:20:04,160
a C&C server and

520
00:20:01,580 --> 00:20:06,050
just want to show you really quickly how

521
00:20:04,160 --> 00:20:08,720
it reads the year flash memory so this

522
00:20:06,050 --> 00:20:11,480
is very common this is how you basically

523
00:20:08,720 --> 00:20:14,420
interact with the SPI flash memory you

524
00:20:11,480 --> 00:20:16,220
first just initiate the transaction you

525
00:20:14,420 --> 00:20:16,640
will say to the chip that you want to

526
00:20:16,220 --> 00:20:18,710
read it

527
00:20:16,640 --> 00:20:20,510
how much byte you want to read it how

528
00:20:18,710 --> 00:20:22,460
much in the blog that you want to read

529
00:20:20,510 --> 00:20:25,100
and then you will just cycle through the

530
00:20:22,460 --> 00:20:28,160
OL memory map region and be able to

531
00:20:25,100 --> 00:20:30,530
recover all the firmware on the on the

532
00:20:28,160 --> 00:20:33,410
chip and then dump it to disk so this is

533
00:20:30,530 --> 00:20:34,820
how this tool was working so now lyric

534
00:20:33,410 --> 00:20:40,310
will talk to you about the other tool we

535
00:20:34,820 --> 00:20:42,110
found okay so I'm the one of the tools

536
00:20:40,310 --> 00:20:44,720
that we found on some compromised

537
00:20:42,110 --> 00:20:47,419
machine is called re writer binary and

538
00:20:44,720 --> 00:20:50,180
it is very similar to re write your read

539
00:20:47,420 --> 00:20:51,380
as its name suggests so it also contains

540
00:20:50,180 --> 00:20:55,280
a lot of debug strings

541
00:20:51,380 --> 00:20:57,740
it also uses RW everything's driver and

542
00:20:55,280 --> 00:20:59,480
it does basically two things the first

543
00:20:57,740 --> 00:21:02,210
thing it will do is that it will add the

544
00:20:59,480 --> 00:21:05,330
UEFI rootkit to the previously dumped

545
00:21:02,210 --> 00:21:10,670
from work and it will write it back to

546
00:21:05,330 --> 00:21:13,610
the spi flash memory so let's look at

547
00:21:10,670 --> 00:21:15,800
the patching of the UEFI firmware so

548
00:21:13,610 --> 00:21:17,120
before before we dig into this subject

549
00:21:15,800 --> 00:21:18,710
there's just a couple things here

550
00:21:17,120 --> 00:21:20,300
doesn't want to introduce just just to

551
00:21:18,710 --> 00:21:22,640
make sure that we're on the same page

552
00:21:20,300 --> 00:21:25,730
the first thing I want to talk about is

553
00:21:22,640 --> 00:21:29,540
UEFI so UEFI stands for unified

554
00:21:25,730 --> 00:21:31,190
extensible firmware interface and it is

555
00:21:29,540 --> 00:21:33,889
a standardized specification that

556
00:21:31,190 --> 00:21:37,070
defines the software interface that

557
00:21:33,890 --> 00:21:41,420
exists between the operating system and

558
00:21:37,070 --> 00:21:44,240
the firmware so a UEFI compliant system

559
00:21:41,420 --> 00:21:46,940
will provide a set of services to UEFI

560
00:21:44,240 --> 00:21:49,640
applications here read operating system

561
00:21:46,940 --> 00:21:51,890
loader there could be some other UEFI

562
00:21:49,640 --> 00:21:54,740
application but usually it is an

563
00:21:51,890 --> 00:21:57,410
operating system loader so one of these

564
00:21:54,740 --> 00:21:59,090
services are the boot services so these

565
00:21:57,410 --> 00:22:01,750
services are available to the firmware

566
00:21:59,090 --> 00:22:04,459
but once the operating system is loaded

567
00:22:01,750 --> 00:22:06,860
these services are not available anymore

568
00:22:04,460 --> 00:22:09,080
and there are the runtime services which

569
00:22:06,860 --> 00:22:12,260
are some other type services that are

570
00:22:09,080 --> 00:22:15,199
also available to the firmware but when

571
00:22:12,260 --> 00:22:17,059
the operating system is is running these

572
00:22:15,200 --> 00:22:20,149
services are still running so a kernel

573
00:22:17,059 --> 00:22:22,940
driver for instance can make calls into

574
00:22:20,149 --> 00:22:24,678
these services and from a security

575
00:22:22,940 --> 00:22:27,350
standpoint what's interesting with UEFI

576
00:22:24,679 --> 00:22:30,110
is that there's no more Master Boot

577
00:22:27,350 --> 00:22:33,949
Record or volume Boot Record involved so

578
00:22:30,110 --> 00:22:37,850
there's no easy way to hijack the the

579
00:22:33,950 --> 00:22:40,760
boot control flow so okay the second

580
00:22:37,850 --> 00:22:44,090
thing I want to talk about are the

581
00:22:40,760 --> 00:22:46,039
driver execution driver execution

582
00:22:44,090 --> 00:22:48,500
environment drivers so the so-called XE

583
00:22:46,039 --> 00:22:50,960
drivers so the XE drivers are PE cough

584
00:22:48,500 --> 00:22:54,139
images so basically windows executables

585
00:22:50,960 --> 00:22:56,600
and there are kind of the core of UEFI

586
00:22:54,139 --> 00:22:57,889
firmware so they can do many things some

587
00:22:56,600 --> 00:22:59,360
of them will be used if straggly

588
00:22:57,889 --> 00:23:01,969
hardware some of them will be used to

589
00:22:59,360 --> 00:23:03,469
produce the UEFI standard interface so

590
00:23:01,970 --> 00:23:06,100
the boot services and the runtime

591
00:23:03,470 --> 00:23:08,570
services that I just spoke about and

592
00:23:06,100 --> 00:23:11,418
they can also be used by firm or vendor

593
00:23:08,570 --> 00:23:13,370
to extend the firmware by adding by

594
00:23:11,419 --> 00:23:17,269
registering new services the so-called

595
00:23:13,370 --> 00:23:20,029
protocols in the UEFI specification the

596
00:23:17,269 --> 00:23:22,549
XE drivers are loaded during the Dixie

597
00:23:20,029 --> 00:23:24,799
phase of the platform initialization and

598
00:23:22,549 --> 00:23:27,860
they are loaded by the exe dispatcher

599
00:23:24,799 --> 00:23:30,889
that will also refer to as the hexa core

600
00:23:27,860 --> 00:23:33,559
in this presentation the last thing I

601
00:23:30,889 --> 00:23:36,379
want to introduce for now is the UEFI

602
00:23:33,559 --> 00:23:38,418
firmware layout so the UEFI firmware is

603
00:23:36,380 --> 00:23:41,000
located in the bias region of DSP a

604
00:23:38,419 --> 00:23:43,519
flash memory and the bias region

605
00:23:41,000 --> 00:23:47,240
contains multiple volumes let's look at

606
00:23:43,519 --> 00:23:49,549
it in a bit more detail in UEFI - which

607
00:23:47,240 --> 00:23:53,809
is an open source tool for manipulating

608
00:23:49,549 --> 00:23:56,389
UEFI images so here I loaded the typical

609
00:23:53,809 --> 00:23:59,418
content of a spi flash memory dump and

610
00:23:56,389 --> 00:24:01,428
UEFI - and yeah let's look at what we

611
00:23:59,419 --> 00:24:03,590
have so the first thing that we see here

612
00:24:01,429 --> 00:24:05,360
is the descriptor region which contains

613
00:24:03,590 --> 00:24:08,600
metadata about the remaining of the data

614
00:24:05,360 --> 00:24:11,658
and the SPI flash memory then we have

615
00:24:08,600 --> 00:24:13,939
the ME region which contains the Intel

616
00:24:11,659 --> 00:24:16,039
management and join firmware and finally

617
00:24:13,940 --> 00:24:19,070
we have the bias region which is really

618
00:24:16,039 --> 00:24:20,779
what we're interested in today as I

619
00:24:19,070 --> 00:24:23,480
mentioned the bias region contains

620
00:24:20,779 --> 00:24:25,669
multiple volumes so let's look at one

621
00:24:23,480 --> 00:24:27,889
volume in a little bit more details so

622
00:24:25,669 --> 00:24:28,820
here we have a volume which is of type

623
00:24:27,889 --> 00:24:33,199
firmware

624
00:24:28,820 --> 00:24:35,990
file system v2 and so this volume

625
00:24:33,200 --> 00:24:39,230
contains multiple multiple files these

626
00:24:35,990 --> 00:24:40,519
files are identified by by googas that's

627
00:24:39,230 --> 00:24:44,179
what we can see under the name column

628
00:24:40,519 --> 00:24:46,970
and with if we look at what's inside the

629
00:24:44,179 --> 00:24:49,340
file well in a file there are multiple

630
00:24:46,970 --> 00:24:53,090
sections one of these section will be

631
00:24:49,340 --> 00:24:54,439
the actual UEFI executable image but

632
00:24:53,090 --> 00:24:56,330
there are other sections like the Dixie

633
00:24:54,440 --> 00:24:59,210
dependency section which allows to

634
00:24:56,330 --> 00:25:02,090
define dependencies for this specific

635
00:24:59,210 --> 00:25:04,879
UEFI executable and we also see here a

636
00:25:02,090 --> 00:25:06,620
version section as well as a user

637
00:25:04,879 --> 00:25:08,029
interface section so the user interface

638
00:25:06,620 --> 00:25:11,000
section is used to give a human readable

639
00:25:08,029 --> 00:25:12,830
name for for the file instead of the the

640
00:25:11,000 --> 00:25:17,659
gooood and that's what we can see under

641
00:25:12,830 --> 00:25:19,730
the text column here ok so now now that

642
00:25:17,659 --> 00:25:23,389
we have all this in mind let's go back

643
00:25:19,730 --> 00:25:25,639
to re-write your binary and look at at

644
00:25:23,389 --> 00:25:27,860
what it does so re-read your binary will

645
00:25:25,639 --> 00:25:30,709
parse all of the firmware volumes that

646
00:25:27,860 --> 00:25:33,590
it that it finds in the bias region of

647
00:25:30,710 --> 00:25:36,409
the UEFI firmware and it will look for

648
00:25:33,590 --> 00:25:41,090
for specific files it looks for IP for

649
00:25:36,409 --> 00:25:44,240
Dexy NTFS dec c SMI flash and the hexa

650
00:25:41,090 --> 00:25:47,360
core so why does it look for IP foredeck

651
00:25:44,240 --> 00:25:50,419
C and D DX e core well these files are

652
00:25:47,360 --> 00:25:53,779
used to define the firmware volume where

653
00:25:50,419 --> 00:25:56,120
to install the UEFI rootkit so usually

654
00:25:53,779 --> 00:25:57,950
in a you fi firmware all of the taxi

655
00:25:56,120 --> 00:26:02,120
drivers will be in the same firmware

656
00:25:57,950 --> 00:26:03,860
volume so when the tool finds IP Ford XE

657
00:26:02,120 --> 00:26:05,928
it knows that it is currently parsing

658
00:26:03,860 --> 00:26:09,168
the volume will the Dixie drivers on it

659
00:26:05,929 --> 00:26:10,669
so it will keep the this volume as a

660
00:26:09,169 --> 00:26:13,940
candidate for the UEFI will get

661
00:26:10,669 --> 00:26:16,279
installation and in some UEFI firmware

662
00:26:13,940 --> 00:26:19,279
the DEXA core maybe in a different

663
00:26:16,279 --> 00:26:21,710
volume than the taxi drivers so when it

664
00:26:19,279 --> 00:26:24,470
finds the Dixie chord will also keep the

665
00:26:21,710 --> 00:26:26,330
volume where it is located as a

666
00:26:24,470 --> 00:26:28,429
candidate for the you if I root kit

667
00:26:26,330 --> 00:26:30,769
installation and finally it will choose

668
00:26:28,429 --> 00:26:36,620
the volume where there is enough free

669
00:26:30,769 --> 00:26:38,210
space available in it so NTFS sexy NTFS

670
00:26:36,620 --> 00:26:40,760
lexi is the American Megatron

671
00:26:38,210 --> 00:26:42,740
incorporated in TFS driver and the

672
00:26:40,760 --> 00:26:44,539
reason why it looks for it is

673
00:26:42,740 --> 00:26:48,620
as we'll see later during this talk the

674
00:26:44,539 --> 00:26:51,169
UEFI rootkit comes with its own ntfs

675
00:26:48,620 --> 00:26:53,779
driver so to avoid any conflict it just

676
00:26:51,169 --> 00:26:59,720
removes the American megatrend ntfs

677
00:26:53,779 --> 00:27:02,559
driver and finally SMI flash so the tool

678
00:26:59,720 --> 00:27:05,720
the version of the tool that we analyzed

679
00:27:02,559 --> 00:27:07,730
looks for this specific driver it keeps

680
00:27:05,720 --> 00:27:11,720
some metadata in a structure about it

681
00:27:07,730 --> 00:27:14,120
but it never uses uses it in in the tool

682
00:27:11,720 --> 00:27:15,620
so what we believe is that signal

683
00:27:14,120 --> 00:27:18,949
spreader might have been fiddling with

684
00:27:15,620 --> 00:27:21,918
some kind of exploit for this well what

685
00:27:18,950 --> 00:27:25,490
I forget to mention is that this exe

686
00:27:21,919 --> 00:27:26,510
driver is actually vulnerable so yeah

687
00:27:25,490 --> 00:27:27,799
what we believe is that settings'

688
00:27:26,510 --> 00:27:30,350
operator might have been fiddling with

689
00:27:27,799 --> 00:27:32,149
some exploit for this vulnerable Dexy

690
00:27:30,350 --> 00:27:35,120
driver in order to be able to bypass

691
00:27:32,149 --> 00:27:38,600
write protection mechanism to the spi

692
00:27:35,120 --> 00:27:40,789
flash memory so now that it has found

693
00:27:38,600 --> 00:27:43,158
the volume were to install the rootkit

694
00:27:40,789 --> 00:27:45,860
the next thing is to add the rootkit to

695
00:27:43,159 --> 00:27:48,020
the to the volume so what I will do is

696
00:27:45,860 --> 00:27:50,418
that it will create a firmware file

697
00:27:48,020 --> 00:27:53,059
system file header and then it will

698
00:27:50,419 --> 00:27:55,039
happen the rootkit file to it so the

699
00:27:53,059 --> 00:27:57,678
rootkit file is a compressed section

700
00:27:55,039 --> 00:27:59,480
that contains two sections one of these

701
00:27:57,679 --> 00:28:01,520
sections is the actual UEFI be the

702
00:27:59,480 --> 00:28:03,830
curable and the other one is a user

703
00:28:01,520 --> 00:28:05,389
interface section defining the name for

704
00:28:03,830 --> 00:28:09,918
this root case of the rootkit is called

705
00:28:05,390 --> 00:28:16,210
SEC exe and then it will write this file

706
00:28:09,919 --> 00:28:19,490
at the end of the selected volume ok so

707
00:28:16,210 --> 00:28:22,190
now that the UEFI rootkit is inside of

708
00:28:19,490 --> 00:28:24,669
the UEFI firmware the next step is to

709
00:28:22,190 --> 00:28:27,230
write it back to the SPI flash memory

710
00:28:24,669 --> 00:28:30,679
once again there's there are a couple

711
00:28:27,230 --> 00:28:32,630
things that I want to introduce here so

712
00:28:30,679 --> 00:28:35,899
I want to talk about bias write

713
00:28:32,630 --> 00:28:38,720
protection mechanisms so the platform

714
00:28:35,899 --> 00:28:41,029
read here the chipset exposed is write

715
00:28:38,720 --> 00:28:43,279
protection mechanisms that need to be

716
00:28:41,029 --> 00:28:45,470
properly configured by the firmware so

717
00:28:43,279 --> 00:28:46,940
there are no such thing as write

718
00:28:45,470 --> 00:28:49,960
protection mechanism enable by default

719
00:28:46,940 --> 00:28:53,870
it's really the the firmware job to

720
00:28:49,960 --> 00:28:56,570
configure them today will only cover

721
00:28:53,870 --> 00:28:58,279
relevant protection mechanisms to our

722
00:28:56,570 --> 00:28:59,750
search so we'll only cover the

723
00:28:58,279 --> 00:29:05,809
prediction mechanism that are checked

724
00:28:59,750 --> 00:29:07,039
for by re re writer binary when the the

725
00:29:05,809 --> 00:29:11,830
production mechanism we'll talk about

726
00:29:07,039 --> 00:29:14,570
are exposed via D bias control register

727
00:29:11,830 --> 00:29:16,820
so if you want to write to the bias

728
00:29:14,570 --> 00:29:19,039
region of the SPI flash memory the first

729
00:29:16,820 --> 00:29:20,870
thing that you need to do is to set the

730
00:29:19,039 --> 00:29:23,690
bias right enable field of the bias

731
00:29:20,870 --> 00:29:27,918
control register to one and then you can

732
00:29:23,690 --> 00:29:30,350
write to the B to the T bias right I'm

733
00:29:27,919 --> 00:29:32,450
sorry to the bias region without any

734
00:29:30,350 --> 00:29:34,699
problem but of course you don't want any

735
00:29:32,450 --> 00:29:36,200
kernel driver to be able to mess with

736
00:29:34,700 --> 00:29:38,299
the content of the spi flash and

737
00:29:36,200 --> 00:29:40,279
potentially corrupt it so there's a

738
00:29:38,299 --> 00:29:41,720
protection mechanism here which is

739
00:29:40,279 --> 00:29:43,639
another field in the bias control

740
00:29:41,720 --> 00:29:48,740
register and this field is called bias

741
00:29:43,639 --> 00:29:52,279
lock enable and it allows to lock bias

742
00:29:48,740 --> 00:29:54,740
right enable to zero and this field is

743
00:29:52,279 --> 00:29:56,990
readable and right locked once right

744
00:29:54,740 --> 00:29:59,509
lock once means that once the firmware

745
00:29:56,990 --> 00:30:01,220
has set this this bit to one there are

746
00:29:59,509 --> 00:30:04,610
no other way to set it back to zero than

747
00:30:01,220 --> 00:30:06,590
performing a full platform I reset but

748
00:30:04,610 --> 00:30:09,049
there's a problem here the problem is

749
00:30:06,590 --> 00:30:12,649
that the implementation of bias lock

750
00:30:09,049 --> 00:30:17,720
enable is actually vulnerable so how it

751
00:30:12,649 --> 00:30:20,719
works is if if ble is activated and a

752
00:30:17,720 --> 00:30:24,200
kernel driver tries to set bias right

753
00:30:20,720 --> 00:30:26,389
enable to one bias right enable will be

754
00:30:24,200 --> 00:30:29,629
set to one for shorter short amount of

755
00:30:26,389 --> 00:30:33,229
time and then the platform will issue a

756
00:30:29,629 --> 00:30:34,879
system management interrupt and the SMI

757
00:30:33,230 --> 00:30:37,970
handler will set by us right enabled

758
00:30:34,879 --> 00:30:39,980
back to zero let's not hear that the SMI

759
00:30:37,970 --> 00:30:42,529
handler must be implemented by the

760
00:30:39,980 --> 00:30:44,419
firmware otherwise this mechanism is

761
00:30:42,529 --> 00:30:46,909
worthless but that's not the biggest

762
00:30:44,419 --> 00:30:49,309
issue here but maybe you've guessed it

763
00:30:46,909 --> 00:30:52,279
but what happens if we write to the spi

764
00:30:49,309 --> 00:30:54,980
flash memory before the SMI handler sets

765
00:30:52,279 --> 00:30:56,649
by us right enable to zero so there's a

766
00:30:54,980 --> 00:30:58,940
race condition vulnerability here

767
00:30:56,649 --> 00:31:01,100
there's a paper about it which is called

768
00:30:58,940 --> 00:31:03,919
a speed racer and it is trivial to

769
00:31:01,100 --> 00:31:05,779
exploit how you do it is you have one

770
00:31:03,919 --> 00:31:08,539
thread that continuously set by us right

771
00:31:05,779 --> 00:31:10,160
enable to one while another thread tries

772
00:31:08,539 --> 00:31:12,230
to read the data to the

773
00:31:10,160 --> 00:31:14,570
SP a flash memory and according to due

774
00:31:12,230 --> 00:31:17,560
to the Speed Racer vapor it works on

775
00:31:14,570 --> 00:31:19,310
multi-core processors as well as on

776
00:31:17,560 --> 00:31:23,210
single core processors with

777
00:31:19,310 --> 00:31:25,460
hyper-threading enabled so Intel came up

778
00:31:23,210 --> 00:31:27,830
with a fix for for this vulnerability

779
00:31:25,460 --> 00:31:31,430
and what they did is that they added a

780
00:31:27,830 --> 00:31:32,720
field in the bias control register and

781
00:31:31,430 --> 00:31:34,610
it was introducing the platform

782
00:31:32,720 --> 00:31:39,050
controller hub family of Intel chipsets

783
00:31:34,610 --> 00:31:41,840
around 2008 so this field is called SMM

784
00:31:39,050 --> 00:31:43,430
bias write-protect disabled the name is

785
00:31:41,840 --> 00:31:47,120
a bit misleading but if you remove

786
00:31:43,430 --> 00:31:49,640
disable that's actually what it does so

787
00:31:47,120 --> 00:31:52,909
how it works is if this mechanism is

788
00:31:49,640 --> 00:31:55,460
activated it won't be possible to write

789
00:31:52,910 --> 00:31:57,770
to develop to the bias region unless all

790
00:31:55,460 --> 00:32:00,040
of the cores of the processor are

791
00:31:57,770 --> 00:32:03,710
running in system management mode and

792
00:32:00,040 --> 00:32:08,389
once again this this bit must be set by

793
00:32:03,710 --> 00:32:10,460
by the firmware okay so now let's go

794
00:32:08,390 --> 00:32:11,990
back to our ear ITER binary so of course

795
00:32:10,460 --> 00:32:14,780
if I introduce all of these mechanisms

796
00:32:11,990 --> 00:32:17,570
it's because re writer binary checks for

797
00:32:14,780 --> 00:32:20,060
them so it will check if the platform is

798
00:32:17,570 --> 00:32:24,220
properly configured and it implements

799
00:32:20,060 --> 00:32:26,899
the exploit for for the race condition

800
00:32:24,220 --> 00:32:29,540
ok let's look at the writing process

801
00:32:26,900 --> 00:32:32,450
decision tree so the first thing that

802
00:32:29,540 --> 00:32:35,899
our a writer will I write or binary will

803
00:32:32,450 --> 00:32:37,820
little check for is biased right enable

804
00:32:35,900 --> 00:32:39,440
so it will check if it is activated and

805
00:32:37,820 --> 00:32:41,419
if it is activated there's nothing

806
00:32:39,440 --> 00:32:44,150
nothing stopping it from writing to

807
00:32:41,420 --> 00:32:46,610
writing to the SPI flash memory so it

808
00:32:44,150 --> 00:32:51,380
will just write the Trojan Eyes UEFI

809
00:32:46,610 --> 00:32:53,449
image but if it is not set to one then

810
00:32:51,380 --> 00:32:55,610
it will check is bias lock enable

811
00:32:53,450 --> 00:32:57,080
activated and if it is not activated

812
00:32:55,610 --> 00:32:59,750
then it will just flip by us write

813
00:32:57,080 --> 00:33:03,949
enable to 1 and then it will write the

814
00:32:59,750 --> 00:33:07,760
UEFI image and finally it will also

815
00:33:03,950 --> 00:33:09,830
check for SMM bias right product and if

816
00:33:07,760 --> 00:33:11,320
it is not set it will exploit the race

817
00:33:09,830 --> 00:33:15,320
condition that we just spoke about

818
00:33:11,320 --> 00:33:18,560
otherwise it will just fail so we spoke

819
00:33:15,320 --> 00:33:23,110
about the SMI flash the vulnerable exe

820
00:33:18,560 --> 00:33:24,879
driver so yeah

821
00:33:23,110 --> 00:33:26,379
we believe that sudden it's operator

822
00:33:24,880 --> 00:33:28,900
might have been fiddling with an exploit

823
00:33:26,380 --> 00:33:31,240
for for this specific driver to be able

824
00:33:28,900 --> 00:33:32,890
here not to fail if everything is

825
00:33:31,240 --> 00:33:34,990
properly configured but to be able to

826
00:33:32,890 --> 00:33:37,750
write to the SPI flash memory even if

827
00:33:34,990 --> 00:33:40,960
you know everything is the firmware does

828
00:33:37,750 --> 00:33:43,900
the job correctly so this tool only

829
00:33:40,960 --> 00:33:47,860
works on either fairly old system or

830
00:33:43,900 --> 00:33:50,380
misconfigured system so as you can see

831
00:33:47,860 --> 00:33:52,059
here if firm or vendors would have done

832
00:33:50,380 --> 00:33:55,570
their job correctly the tool would have

833
00:33:52,059 --> 00:33:56,918
fail at flashing the malicious Mouse

834
00:33:55,570 --> 00:34:00,070
just firmware and it would have required

835
00:33:56,919 --> 00:34:02,770
way more resources from the attackers

836
00:34:00,070 --> 00:34:06,970
side to be able to deploy their and

837
00:34:02,770 --> 00:34:10,300
their rootkit okay so now let's look

838
00:34:06,970 --> 00:34:12,429
very quickly at how you write to the SPI

839
00:34:10,300 --> 00:34:14,619
flash memory it's kind of the standard

840
00:34:12,429 --> 00:34:17,770
way of doing this so the first thing

841
00:34:14,619 --> 00:34:21,100
that you need to do is to set up the

842
00:34:17,770 --> 00:34:23,830
right operation and then you can write

843
00:34:21,100 --> 00:34:27,100
all you just loop around these operation

844
00:34:23,830 --> 00:34:29,350
and write each data block one after the

845
00:34:27,100 --> 00:34:32,739
other to the SPI flash until you you

846
00:34:29,350 --> 00:34:36,339
have your whole firmware flashing to the

847
00:34:32,739 --> 00:34:38,859
SPI flash memory so here let's take a

848
00:34:36,340 --> 00:34:41,710
step back and look at what we're looking

849
00:34:38,859 --> 00:34:43,929
at so what we have here is a software

850
00:34:41,710 --> 00:34:48,460
implementation to deploy UEFI rootkit

851
00:34:43,929 --> 00:34:51,429
and flash it in to the spi flash memory

852
00:34:48,460 --> 00:34:54,369
remotely post exploitation so that's

853
00:34:51,429 --> 00:34:57,310
really something it's very convenient

854
00:34:54,369 --> 00:34:59,500
for for for the attackers to use that

855
00:34:57,310 --> 00:35:01,779
kind of that kind of tool so they can

856
00:34:59,500 --> 00:35:03,910
just begin to infect the victim the way

857
00:35:01,780 --> 00:35:05,770
they will usually do it for instance by

858
00:35:03,910 --> 00:35:07,569
sending a phishing email and once they

859
00:35:05,770 --> 00:35:10,270
have a foothold on the machine they can

860
00:35:07,570 --> 00:35:10,630
use this tool to deploy their the

861
00:35:10,270 --> 00:35:12,880
rootkit

862
00:35:10,630 --> 00:35:16,480
what do we knew about in the past was

863
00:35:12,880 --> 00:35:18,609
hacking teams UEFI rootkit and as far as

864
00:35:16,480 --> 00:35:21,100
we know it required physical access to

865
00:35:18,609 --> 00:35:23,140
be deployed so once again it's so much

866
00:35:21,100 --> 00:35:27,279
more convenient to be able to do it

867
00:35:23,140 --> 00:35:29,049
remotely it's not here that there's no

868
00:35:27,280 --> 00:35:32,200
proof of hacking teams rootkit being

869
00:35:29,050 --> 00:35:35,109
used in a cyberattack it has never been

870
00:35:32,200 --> 00:35:36,660
found on a victim's machine or at least

871
00:35:35,109 --> 00:35:40,020
it if it has it

872
00:35:36,660 --> 00:35:42,240
been publicly disclosed so what we did

873
00:35:40,020 --> 00:35:44,788
then is that we extracted the UEFI

874
00:35:42,240 --> 00:35:48,270
rootkit from re writer binary and we

875
00:35:44,789 --> 00:35:51,240
looked at ESET UEFI scanner telemetry

876
00:35:48,270 --> 00:35:54,030
and yeah turns out that we found the

877
00:35:51,240 --> 00:35:55,618
rootkit in the SPI flash memory of a of

878
00:35:54,030 --> 00:35:57,920
a system making it the first publicly

879
00:35:55,619 --> 00:36:01,200
known UEFI rootkit to be used in a

880
00:35:57,920 --> 00:36:03,930
cyberattack and at this point yeah we're

881
00:36:01,200 --> 00:36:06,359
pretty confident that would be accepted

882
00:36:03,930 --> 00:36:09,390
the blackhat to share our research with

883
00:36:06,359 --> 00:36:14,930
you guys so yeah here we are

884
00:36:09,390 --> 00:36:18,000
right so if we go back to customs Ray

885
00:36:14,930 --> 00:36:21,390
statement where he said that we have yet

886
00:36:18,000 --> 00:36:24,839
to observe real-world UEFI malware well

887
00:36:21,390 --> 00:36:26,879
we can cross that one out okay

888
00:36:24,839 --> 00:36:29,730
so let's go back to the technical part

889
00:36:26,880 --> 00:36:33,780
of this presentation and look at the

890
00:36:29,730 --> 00:36:36,720
UEFI rootkit itself so the if I rootkit

891
00:36:33,780 --> 00:36:38,940
is a taxi driver that is loaded by the

892
00:36:36,720 --> 00:36:41,640
DEXA dispatcher every time the machine

893
00:36:38,940 --> 00:36:44,549
will boot it's finally means sec dixie

894
00:36:41,640 --> 00:36:48,660
as we've already seen and here i put the

895
00:36:44,549 --> 00:36:51,200
file good for future reference so now

896
00:36:48,660 --> 00:36:54,328
let's look at the UEFI rootkit workflow

897
00:36:51,200 --> 00:36:56,160
so a EFI firmware will go through

898
00:36:54,329 --> 00:36:57,420
multiple phases when it boots so the

899
00:36:56,160 --> 00:36:59,009
first phase it will go to is the

900
00:36:57,420 --> 00:37:01,920
security phase and then we'll go through

901
00:36:59,010 --> 00:37:04,140
the pre fi initialization phase and then

902
00:37:01,920 --> 00:37:06,180
it will go through the driver execution

903
00:37:04,140 --> 00:37:10,950
environment phase and that's when that's

904
00:37:06,180 --> 00:37:12,750
when it it gets interesting for us so

905
00:37:10,950 --> 00:37:15,450
that's that's when the DEXA core is

906
00:37:12,750 --> 00:37:17,970
running and all of the exe drivers will

907
00:37:15,450 --> 00:37:20,578
be loaded so one of these the XE drivers

908
00:37:17,970 --> 00:37:22,439
will be the UEFI rootkit and what it

909
00:37:20,579 --> 00:37:25,289
will do at this point is that it will

910
00:37:22,440 --> 00:37:27,990
create an event attached to the efi even

911
00:37:25,289 --> 00:37:29,730
group ready to boot and it will bind a

912
00:37:27,990 --> 00:37:33,078
notify function which is basically a

913
00:37:29,730 --> 00:37:36,329
callback containing the malicious code

914
00:37:33,079 --> 00:37:38,640
so when the firmware will go to the next

915
00:37:36,329 --> 00:37:40,950
phase the boot device selection phase

916
00:37:38,640 --> 00:37:43,710
the boot manager will run and at some

917
00:37:40,950 --> 00:37:46,980
point it will signal the efi even group

918
00:37:43,710 --> 00:37:50,040
ready to boot event and at this point

919
00:37:46,980 --> 00:37:53,110
the notify function will be called

920
00:37:50,040 --> 00:37:54,490
so none of the Phi function does three

921
00:37:53,110 --> 00:37:57,520
things the first thing it will do is

922
00:37:54,490 --> 00:37:59,950
that it will install in an NTFS driver

923
00:37:57,520 --> 00:38:01,690
then it will use this ntfs driver to

924
00:37:59,950 --> 00:38:04,210
drop out to cheated Xin our PC net

925
00:38:01,690 --> 00:38:06,970
period eggsy and finally it will patch a

926
00:38:04,210 --> 00:38:11,260
value in the Windows registry for

927
00:38:06,970 --> 00:38:14,169
persistent purposes so the ntfs driver

928
00:38:11,260 --> 00:38:16,630
well the ntfs driver is is needed to get

929
00:38:14,170 --> 00:38:19,930
file based access to Windows partition

930
00:38:16,630 --> 00:38:22,450
and said net separator did not write

931
00:38:19,930 --> 00:38:24,399
their own ntfs driver what did it is

932
00:38:22,450 --> 00:38:27,790
that they took hacking teams ntfs driver

933
00:38:24,400 --> 00:38:29,530
from hacking teams leak and they compile

934
00:38:27,790 --> 00:38:34,690
their own version that they bundle with

935
00:38:29,530 --> 00:38:37,120
the UEFI boot kit now here's the code

936
00:38:34,690 --> 00:38:40,150
responsible for dropping the two files

937
00:38:37,120 --> 00:38:43,180
so here we have the code dropping our PC

938
00:38:40,150 --> 00:38:47,050
net Peter digsy and here the code

939
00:38:43,180 --> 00:38:49,810
wrapping up to chi that exit and finally

940
00:38:47,050 --> 00:38:52,300
it will patch if a value in the Windows

941
00:38:49,810 --> 00:38:54,850
registry so how it does that is that it

942
00:38:52,300 --> 00:38:58,330
will open the file backing the htlm

943
00:38:54,850 --> 00:39:00,660
system registry hive and it doesn't have

944
00:38:58,330 --> 00:39:03,370
all the logic to to be able to parse

945
00:39:00,660 --> 00:39:05,259
windows to do structures so what it does

946
00:39:03,370 --> 00:39:07,750
is that it will look for a text I

947
00:39:05,260 --> 00:39:10,030
textual pattern and this textual pattern

948
00:39:07,750 --> 00:39:11,920
is AutoCheck a to check and star and

949
00:39:10,030 --> 00:39:14,530
when it finds it it will change it for

950
00:39:11,920 --> 00:39:16,450
us to check out to chi start and it

951
00:39:14,530 --> 00:39:18,580
happens to be to be modifying the boot

952
00:39:16,450 --> 00:39:23,430
execute key that Ryan spoke about

953
00:39:18,580 --> 00:39:27,130
earlier so what will happen then is that

954
00:39:23,430 --> 00:39:29,080
the operating system will will be loaded

955
00:39:27,130 --> 00:39:31,530
and at some point it will run a to

956
00:39:29,080 --> 00:39:33,460
chittering Z instead of to check that

957
00:39:31,530 --> 00:39:37,270
exit a note achieve will drop our

958
00:39:33,460 --> 00:39:40,600
vicinity and so on but what's

959
00:39:37,270 --> 00:39:41,980
interesting here is that o to cheery

960
00:39:40,600 --> 00:39:44,020
vert back the modification in the

961
00:39:41,980 --> 00:39:48,100
Windows registry so it will change o to

962
00:39:44,020 --> 00:39:51,130
chip back to auto check so that as a end

963
00:39:48,100 --> 00:39:52,750
user for instance if I look in in the

964
00:39:51,130 --> 00:39:56,560
registry Keys I won't see that any

965
00:39:52,750 --> 00:39:59,250
modification happen so that's a pretty

966
00:39:56,560 --> 00:40:01,779
interesting stealth mechanism that is

967
00:39:59,250 --> 00:40:02,789
that is enabled by the fact that the

968
00:40:01,780 --> 00:40:06,479
malware is coming

969
00:40:02,789 --> 00:40:15,749
from the firmware ok so now we have a

970
00:40:06,479 --> 00:40:18,948
little demo for you just get there it's

971
00:40:15,749 --> 00:40:18,948
not a live demo sorry

972
00:40:27,900 --> 00:40:31,350
I'll make it

973
00:40:45,430 --> 00:40:58,700
there it is okay let's really really

974
00:40:52,010 --> 00:41:09,170
used to work with your trackpad I'll

975
00:40:58,700 --> 00:41:10,879
just restart it real quick okay so here

976
00:41:09,170 --> 00:41:14,660
we have a Windows 10 machine this

977
00:41:10,880 --> 00:41:17,000
machine is is clean and it has a clean

978
00:41:14,660 --> 00:41:19,190
firmware so the first thing I'll show

979
00:41:17,000 --> 00:41:21,380
here is just that Oh to cheat that eggs

980
00:41:19,190 --> 00:41:24,650
and RPC not PR not on the file system

981
00:41:21,380 --> 00:41:29,750
just to prove that it is clean so it's

982
00:41:24,650 --> 00:41:33,470
going to sis 1264 and looking for our PC

983
00:41:29,750 --> 00:41:37,430
net P and as we can hopefully see our PC

984
00:41:33,470 --> 00:41:41,259
net P is not it's not there then I'm

985
00:41:37,430 --> 00:41:45,430
going into system 32 showing that to

986
00:41:41,260 --> 00:41:45,430
cheetah diggsy is not there either

987
00:41:45,579 --> 00:41:54,200
okay so the next step then I'll I'll go

988
00:41:48,380 --> 00:41:57,170
into VMware directory to where the UEFI

989
00:41:54,200 --> 00:41:59,899
firmware is located and I'll change the

990
00:41:57,170 --> 00:42:02,030
firmware the clean firmware for and

991
00:41:59,900 --> 00:42:07,190
infected for more with the UEFI rootkit

992
00:42:02,030 --> 00:42:09,859
so just to show that I'll I'm opening it

993
00:42:07,190 --> 00:42:13,359
in UEFI tool and I'm just showing that

994
00:42:09,859 --> 00:42:16,759
second xcd UEFI rootkit is really in the

995
00:42:13,359 --> 00:42:24,109
UEFI firmware as we can see it is right

996
00:42:16,760 --> 00:42:26,359
here and then I'll yeah I'll change the

997
00:42:24,109 --> 00:42:28,640
firmware so this one is the clean

998
00:42:26,359 --> 00:42:33,578
firmware so I'll just rename it and I'll

999
00:42:28,640 --> 00:42:33,578
put the infected for more instead of it

1000
00:42:38,020 --> 00:42:41,530
okay so now I'll just shut down the

1001
00:42:40,570 --> 00:42:45,250
Windows 10

1002
00:42:41,530 --> 00:42:47,470
machine and start it all over again just

1003
00:42:45,250 --> 00:42:49,570
so and so that the machine will boot and

1004
00:42:47,470 --> 00:42:53,500
the UEFI boot kit will be loaded and it

1005
00:42:49,570 --> 00:42:55,660
will do all these and nasty things okay

1006
00:42:53,500 --> 00:42:57,550
but here there's another machine which

1007
00:42:55,660 --> 00:43:00,460
is a Linux machine which is on the same

1008
00:42:57,550 --> 00:43:03,010
network and it act as a gateway for the

1009
00:43:00,460 --> 00:43:07,180
windows 10 machine and also as a DNS

1010
00:43:03,010 --> 00:43:13,330
server and it also has an HTTP server on

1011
00:43:07,180 --> 00:43:18,210
it so I'll go Andy in the Linux machine

1012
00:43:13,330 --> 00:43:18,210
and I'll start a network capture there

1013
00:43:19,080 --> 00:43:28,299
and then I'll just keep it a bit so when

1014
00:43:26,020 --> 00:43:31,540
Windows will be boarded booted we'll see

1015
00:43:28,300 --> 00:43:37,080
that it will make the malware will make

1016
00:43:31,540 --> 00:43:37,080
a query to its commanding control server

1017
00:43:40,380 --> 00:43:49,300
should happen soon okay so yeah there

1018
00:43:45,670 --> 00:43:51,670
was a DNS request was performed for

1019
00:43:49,300 --> 00:43:55,330
remote PF net which is a command control

1020
00:43:51,670 --> 00:43:58,540
server and there was also an HTTP POST

1021
00:43:55,330 --> 00:44:03,369
requests with the wholesaler set to

1022
00:43:58,540 --> 00:44:05,619
remote PX dotnet so just to show that

1023
00:44:03,369 --> 00:44:08,950
everything happen as expected I'll go

1024
00:44:05,619 --> 00:44:11,290
back in the Windows 10 machine and show

1025
00:44:08,950 --> 00:44:13,868
that the files were properly dropped and

1026
00:44:11,290 --> 00:44:21,490
that there's also a process running

1027
00:44:13,869 --> 00:44:27,220
there so I'm going to see Windows 6 12

1028
00:44:21,490 --> 00:44:28,950
64 so I'm looking for RPC net P here so

1029
00:44:27,220 --> 00:44:31,779
as we can see our PC net P is there

1030
00:44:28,950 --> 00:44:34,210
there's a dealer and in executable the

1031
00:44:31,780 --> 00:44:36,640
reason for that is that the executable

1032
00:44:34,210 --> 00:44:38,560
once it's runs it drops itself ID as a

1033
00:44:36,640 --> 00:44:41,589
DLL so that's why there's another file

1034
00:44:38,560 --> 00:44:44,410
there and then yeah as we can see how to

1035
00:44:41,590 --> 00:44:47,350
cheap is is there too

1036
00:44:44,410 --> 00:44:48,850
alongside so to check and finally I'll

1037
00:44:47,350 --> 00:44:53,400
go in this task manager just to show

1038
00:44:48,850 --> 00:44:53,400
that there's a process running there

1039
00:44:55,680 --> 00:45:01,419
and yeah as we can see there's our PC

1040
00:44:58,960 --> 00:45:05,670
net thief running there so yeah that's

1041
00:45:01,420 --> 00:45:05,670
pretty much it for the for the demo

1042
00:45:18,720 --> 00:45:26,009
okay so the last thing that I want to

1043
00:45:22,570 --> 00:45:29,410
talk about today is prevention

1044
00:45:26,010 --> 00:45:31,480
remediation so what can you do to

1045
00:45:29,410 --> 00:45:34,029
prevent such an ad and attack from from

1046
00:45:31,480 --> 00:45:35,410
happening and also if you find out that

1047
00:45:34,030 --> 00:45:36,420
you're compromised with a you if I would

1048
00:45:35,410 --> 00:45:40,720
kit

1049
00:45:36,420 --> 00:45:42,640
what can you do right okay so prevention

1050
00:45:40,720 --> 00:45:44,950
the first thing in probably the most

1051
00:45:42,640 --> 00:45:48,069
important thing is that you should

1052
00:45:44,950 --> 00:45:50,399
really keep your UEFI for more up to

1053
00:45:48,070 --> 00:45:55,030
date so that all of the latest patches

1054
00:45:50,400 --> 00:45:57,190
are available on your system yeah so

1055
00:45:55,030 --> 00:46:01,240
that's probably the most accessible and

1056
00:45:57,190 --> 00:46:03,550
most important thing to do then you

1057
00:46:01,240 --> 00:46:05,350
should enable secure boot but let's not

1058
00:46:03,550 --> 00:46:07,330
hear that secure boot would not have

1059
00:46:05,350 --> 00:46:09,730
protected against this specific attack

1060
00:46:07,330 --> 00:46:11,410
and the reason for that is that secure

1061
00:46:09,730 --> 00:46:14,110
boot takes the content of the SPI flash

1062
00:46:11,410 --> 00:46:16,029
memory as its root of trust so

1063
00:46:14,110 --> 00:46:20,020
everything that is inside the SPI flash

1064
00:46:16,030 --> 00:46:22,420
memory is not subject for for validation

1065
00:46:20,020 --> 00:46:23,950
so what is it you're used for then well

1066
00:46:22,420 --> 00:46:26,200
it will validate what's coming from

1067
00:46:23,950 --> 00:46:28,899
outside of the SPI flash memory namely

1068
00:46:26,200 --> 00:46:31,689
the option roms and most importantly the

1069
00:46:28,900 --> 00:46:34,270
operating system loader so what can we

1070
00:46:31,690 --> 00:46:36,430
do then well what we need is a hardware

1071
00:46:34,270 --> 00:46:40,290
root of trust so we need a root of trust

1072
00:46:36,430 --> 00:46:42,970
that is in a one-time programmable chip

1073
00:46:40,290 --> 00:46:46,590
that is programmed during manufacturing

1074
00:46:42,970 --> 00:46:49,990
time and that cannot be written to ever

1075
00:46:46,590 --> 00:46:51,790
after and such technologies exist an

1076
00:46:49,990 --> 00:46:55,600
example of that would be Intel boot

1077
00:46:51,790 --> 00:47:01,509
guard but also Apple's t2 security chip

1078
00:46:55,600 --> 00:47:03,009
has a or hardware root of trust then you

1079
00:47:01,510 --> 00:47:06,040
kind of need to hope that your firmware

1080
00:47:03,010 --> 00:47:07,950
configures your the security mechanism

1081
00:47:06,040 --> 00:47:12,400
properly there's not much you can do

1082
00:47:07,950 --> 00:47:16,680
well if you updated your UEFI firmware

1083
00:47:12,400 --> 00:47:19,390
there's not much you can do but

1084
00:47:16,680 --> 00:47:21,910
thankfully there are for more security

1085
00:47:19,390 --> 00:47:24,220
assessment tools available out there and

1086
00:47:21,910 --> 00:47:28,180
an example of that would be Intel

1087
00:47:24,220 --> 00:47:31,299
chipset so you can put this tool on on a

1088
00:47:28,180 --> 00:47:33,158
USB stick and run it on your machine and

1089
00:47:31,299 --> 00:47:34,839
this tool will check for all of the

1090
00:47:33,159 --> 00:47:38,349
security mechanism that we spoke about

1091
00:47:34,839 --> 00:47:41,349
today in even more of them and also it

1092
00:47:38,349 --> 00:47:42,939
will check for the this specific UEFI

1093
00:47:41,349 --> 00:47:47,819
rootkit so if you have it and solve

1094
00:47:42,939 --> 00:47:47,819
until chip sack will we'll find it

1095
00:47:48,269 --> 00:47:55,868
and yeah the last thing that I want to

1096
00:47:52,239 --> 00:47:59,529
talk about is remediation it's a pretty

1097
00:47:55,869 --> 00:48:02,619
short part the only thing you can do is

1098
00:47:59,529 --> 00:48:05,619
really reflash your UEFI firmwares we

1099
00:48:02,619 --> 00:48:07,499
kind of need an SPI programmer and to be

1100
00:48:05,619 --> 00:48:10,149
able to you know you need to have a

1101
00:48:07,499 --> 00:48:12,339
clean version of the firmware and write

1102
00:48:10,149 --> 00:48:14,979
it to the SPI flash memory yourself it's

1103
00:48:12,339 --> 00:48:19,630
definitely not something that is easy to

1104
00:48:14,979 --> 00:48:22,979
do for anybody but yeah that is pretty

1105
00:48:19,630 --> 00:48:25,329
much with with you you can do otherwise

1106
00:48:22,979 --> 00:48:27,729
it's not an option for you well you can

1107
00:48:25,329 --> 00:48:30,099
just get rid of your I have computer

1108
00:48:27,729 --> 00:48:33,819
basically and get a new one

1109
00:48:30,099 --> 00:48:41,709
so that's how serious this this attack

1110
00:48:33,819 --> 00:48:44,529
is now in conclusion our research shows

1111
00:48:41,709 --> 00:48:45,819
that UEFI rootkit are not toys for

1112
00:48:44,529 --> 00:48:49,449
researchers to play with that they are

1113
00:48:45,819 --> 00:48:51,279
real-world threats use in actual cyber

1114
00:48:49,449 --> 00:48:52,929
attacks so it might be something that

1115
00:48:51,279 --> 00:48:56,609
you want to keep in mind the next time

1116
00:48:52,929 --> 00:48:58,989
you'll be finding your threat model and

1117
00:48:56,609 --> 00:49:01,598
yeah we won't stress this enough a

1118
00:48:58,989 --> 00:49:03,789
firmware must be built with security in

1119
00:49:01,599 --> 00:49:05,079
mind from the bottom up and things are

1120
00:49:03,789 --> 00:49:07,209
getting better because there are more

1121
00:49:05,079 --> 00:49:08,589
and more security researchers looking

1122
00:49:07,209 --> 00:49:11,709
into this and reporting the issues that

1123
00:49:08,589 --> 00:49:15,369
they find but there are still still work

1124
00:49:11,709 --> 00:49:18,459
to do there and yeah also hopefully this

1125
00:49:15,369 --> 00:49:20,739
talk helps you to know how to prevent

1126
00:49:18,459 --> 00:49:25,209
and mitigate this kind this kind of

1127
00:49:20,739 --> 00:49:27,969
attack so that's pretty much it for us

1128
00:49:25,209 --> 00:49:29,348
so thank you for having us last thing I

1129
00:49:27,969 --> 00:49:31,119
want to mention is that if you're

1130
00:49:29,349 --> 00:49:33,699
interested to know more to have more

1131
00:49:31,119 --> 00:49:35,369
details about our research the white

1132
00:49:33,699 --> 00:49:39,789
paper is available at we live security

1133
00:49:35,369 --> 00:49:42,279
that come and unfortunately we won't

1134
00:49:39,789 --> 00:49:43,599
have time for question here but it's

1135
00:49:42,279 --> 00:49:44,980
still early in the conference

1136
00:49:43,599 --> 00:49:48,390
so we'll be

1137
00:49:44,980 --> 00:49:51,040
for the next two days so only shy just

1138
00:49:48,390 --> 00:49:54,120
come come see us and ask a question if

1139
00:49:51,040 --> 00:49:58,199
you have any so thank you very much

1140
00:49:54,120 --> 00:49:58,199
[Applause]

