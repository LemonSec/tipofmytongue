1
00:00:00,000 --> 00:00:04,230
thank you very much for being here so I

2
00:00:02,550 --> 00:00:06,060
have a habit when I get presentations of

3
00:00:04,230 --> 00:00:07,740
pacing around and so there might be a

4
00:00:06,060 --> 00:00:09,719
chance that I'll leave the microphone

5
00:00:07,740 --> 00:00:11,340
and my voice might become a bit more

6
00:00:09,719 --> 00:00:14,820
distance if that happens just feel free

7
00:00:11,340 --> 00:00:16,948
to call me out on it so I'm here from

8
00:00:14,820 --> 00:00:19,050
Canada I'm a part of a company called

9
00:00:16,949 --> 00:00:20,760
discrete integration where we do mainly

10
00:00:19,050 --> 00:00:22,949
information security information

11
00:00:20,760 --> 00:00:26,220
exploitation and what I'll be talking

12
00:00:22,949 --> 00:00:27,630
about this morning is a stag no graphics

13
00:00:26,220 --> 00:00:30,689
disk encryption which is a roughly

14
00:00:27,630 --> 00:00:31,859
equivalent and functionality to varrock

15
00:00:30,689 --> 00:00:33,660
rips hidden partition function which

16
00:00:31,859 --> 00:00:35,100
some of you may know about already if

17
00:00:33,660 --> 00:00:37,648
not listen to a big deal we'll make sure

18
00:00:35,100 --> 00:00:39,469
that we all get there before I get into

19
00:00:37,649 --> 00:00:41,820
the meat of the presentation so

20
00:00:39,469 --> 00:00:43,320
apologies in advance I think I was

21
00:00:41,820 --> 00:00:45,149
overly ambitious with the material I'd

22
00:00:43,320 --> 00:00:47,910
hoped to cover it this morning so

23
00:00:45,149 --> 00:00:49,260
there's gonna be some slides further

24
00:00:47,910 --> 00:00:52,769
down the weeds that I'm just going to

25
00:00:49,260 --> 00:00:54,960
skip over but by all means I think feel

26
00:00:52,770 --> 00:00:56,640
free to contact me again touch with me

27
00:00:54,960 --> 00:00:58,920
the slides I think should be available

28
00:00:56,640 --> 00:01:01,320
on blockheads website as of this evening

29
00:00:58,920 --> 00:01:02,309
so feel free to peruse and get in touch

30
00:01:01,320 --> 00:01:05,489
with me if there's anything further

31
00:01:02,309 --> 00:01:07,710
you'd like to discuss so without further

32
00:01:05,489 --> 00:01:09,210
adieu so I'll give you a brief this is

33
00:01:07,710 --> 00:01:10,679
an outline of my presentation I'll give

34
00:01:09,210 --> 00:01:13,429
you a brief overview of steganography

35
00:01:10,680 --> 00:01:16,080
its history its modern-day importance

36
00:01:13,430 --> 00:01:18,630
it's often I would think neglected to

37
00:01:16,080 --> 00:01:19,710
its larger cousin Nino cryptography I'll

38
00:01:18,630 --> 00:01:22,140
give you a critical appraisal of

39
00:01:19,710 --> 00:01:23,699
TrueCrypt veracrypt NOS feature and i'll

40
00:01:22,140 --> 00:01:25,770
explain to you how you know despite the

41
00:01:23,700 --> 00:01:27,479
fact that you have I suppose in a

42
00:01:25,770 --> 00:01:28,560
technical sense plausible deniability it

43
00:01:27,479 --> 00:01:31,079
falls short in many practical

44
00:01:28,560 --> 00:01:32,579
applications and so that point we should

45
00:01:31,079 --> 00:01:35,729
all be up to speed we should all have

46
00:01:32,579 --> 00:01:36,929
the lexicon and the concepts in place

47
00:01:35,729 --> 00:01:39,060
that we can digest the rest of the talk

48
00:01:36,930 --> 00:01:40,799
and so once we've analyzed Dirk up a

49
00:01:39,060 --> 00:01:43,140
little bit I'll give you in broad terms

50
00:01:40,799 --> 00:01:44,850
the requirements of steganographic

51
00:01:43,140 --> 00:01:47,159
system should satisfy for it to be

52
00:01:44,850 --> 00:01:48,329
useful in practice and so that in turn

53
00:01:47,159 --> 00:01:50,340
will translate into a number of

54
00:01:48,329 --> 00:01:51,809
technical requirements that we have to

55
00:01:50,340 --> 00:01:54,000
meet if you want to do something like

56
00:01:51,810 --> 00:01:56,549
very cribs hidden partition function in

57
00:01:54,000 --> 00:01:58,530
a more deniable fashion and so what I'll

58
00:01:56,549 --> 00:01:59,969
show you when you do that it basically

59
00:01:58,530 --> 00:02:01,920
partitions the problem into two

60
00:01:59,969 --> 00:02:03,689
orthogonal to roughly independent parts

61
00:02:01,920 --> 00:02:04,140
a little cover the system design one and

62
00:02:03,689 --> 00:02:07,020
system design

63
00:02:04,140 --> 00:02:08,580
- and I'll conclude with a brief

64
00:02:07,020 --> 00:02:09,949
overview of some forensic considerations

65
00:02:08,580 --> 00:02:13,790
if you want to use this kind of system

66
00:02:09,949 --> 00:02:15,920
this so this system is actually it's

67
00:02:13,790 --> 00:02:17,450
written as a proof of concept so just

68
00:02:15,920 --> 00:02:18,738
bear that in mind like all the theory

69
00:02:17,450 --> 00:02:21,349
I'll explain to you has actually been

70
00:02:18,739 --> 00:02:22,819
try it out in practice okay so what a

71
00:02:21,349 --> 00:02:25,670
second ography so most of you probably

72
00:02:22,819 --> 00:02:27,530
know this already also called Steg is

73
00:02:25,670 --> 00:02:30,079
literally covered writing and so what it

74
00:02:27,530 --> 00:02:31,550
boils down to is taking at an aqueous

75
00:02:30,080 --> 00:02:32,840
medium which you call Calvert the cover

76
00:02:31,550 --> 00:02:35,030
is a technical term that'll refer to

77
00:02:32,840 --> 00:02:36,140
again and again and you embed some

78
00:02:35,030 --> 00:02:37,940
secret message in that cover and the

79
00:02:36,140 --> 00:02:38,899
hope is that some adversary looks at

80
00:02:37,940 --> 00:02:40,430
this cover and they won't be able to

81
00:02:38,900 --> 00:02:42,500
detect the presence that see the secret

82
00:02:40,430 --> 00:02:44,510
message in the cover and so like

83
00:02:42,500 --> 00:02:46,190
cryptography steganography dates back

84
00:02:44,510 --> 00:02:47,899
way before computers basically since the

85
00:02:46,190 --> 00:02:51,380
beginning we have when civilization has

86
00:02:47,900 --> 00:02:53,900
records and so like cryptography

87
00:02:51,380 --> 00:02:55,840
basically steganography is now basically

88
00:02:53,900 --> 00:02:59,260
exclusively in the domain of digital

89
00:02:55,840 --> 00:03:03,620
techniques and so I mean some basic

90
00:02:59,260 --> 00:03:06,380
examples of mistake would be for

91
00:03:03,620 --> 00:03:08,360
instance you know who's hiding an entire

92
00:03:06,380 --> 00:03:09,590
paragraph in a microdot by shutting it

93
00:03:08,360 --> 00:03:11,690
down and then recovering it again with a

94
00:03:09,590 --> 00:03:15,400
microscope or some more exotic or you

95
00:03:11,690 --> 00:03:17,660
know colorful example is listed here so

96
00:03:15,400 --> 00:03:18,890
simply for the purpose of contrasting

97
00:03:17,660 --> 00:03:19,850
this against cryptography I'm going to

98
00:03:18,890 --> 00:03:21,589
give a brief overview of the framework

99
00:03:19,850 --> 00:03:23,000
of analyzing crypto systems I'm sure

100
00:03:21,590 --> 00:03:26,120
most of you know this already says this

101
00:03:23,000 --> 00:03:27,920
doubt standard Alan's Bob Eve set up

102
00:03:26,120 --> 00:03:28,880
here so everybody here the important

103
00:03:27,920 --> 00:03:31,760
thing here is everybody knows what

104
00:03:28,880 --> 00:03:33,260
everybody is doing the game is like open

105
00:03:31,760 --> 00:03:35,328
to everybody that what alice is trying

106
00:03:33,260 --> 00:03:36,980
to do Bob is communicate in a fashion

107
00:03:35,329 --> 00:03:38,660
where the communication itself is not

108
00:03:36,980 --> 00:03:41,030
covert with the messages and Eve is

109
00:03:38,660 --> 00:03:42,980
trying to break that message and so

110
00:03:41,030 --> 00:03:44,420
that's the opposing goal and basically

111
00:03:42,980 --> 00:03:47,510
it's a game and whoever's better at the

112
00:03:44,420 --> 00:03:49,548
game wins this game so Alice and Bob

113
00:03:47,510 --> 00:03:51,410
they have some scheme they're up to and

114
00:03:49,549 --> 00:03:54,470
they came across the text book from the

115
00:03:51,410 --> 00:03:56,329
1970s I think documenting how Triple DES

116
00:03:54,470 --> 00:03:58,459
is the latest and best cipher that she

117
00:03:56,329 --> 00:04:00,769
used for everything and unfortunately

118
00:03:58,459 --> 00:04:01,100
nobody counsel them against using Triple

119
00:04:00,769 --> 00:04:03,290
DES

120
00:04:01,100 --> 00:04:04,730
and so they landed in jail because where

121
00:04:03,290 --> 00:04:09,560
they made this scheme was a hostile

122
00:04:04,730 --> 00:04:10,880
jurisdiction so the goals here are now

123
00:04:09,560 --> 00:04:12,560
different this is stagnant steganography

124
00:04:10,880 --> 00:04:13,970
so you have a working here who on

125
00:04:12,560 --> 00:04:16,488
compassionate grounds will forward

126
00:04:13,970 --> 00:04:18,769
messages between Alice and Bob and the

127
00:04:16,488 --> 00:04:19,539
warden here will not forward anything

128
00:04:18,769 --> 00:04:20,860
that relates to

129
00:04:19,540 --> 00:04:22,810
for example staging a prison-break which

130
00:04:20,860 --> 00:04:25,240
is their new goal and so Alice and Bob

131
00:04:22,810 --> 00:04:27,070
want to coordinate the reference but in

132
00:04:25,240 --> 00:04:28,510
a manner that doesn't alert the warden

133
00:04:27,070 --> 00:04:31,090
to what's going on and that's basically

134
00:04:28,510 --> 00:04:33,310
the hardest iconography which is you

135
00:04:31,090 --> 00:04:34,659
have a cover which is innocuous and you

136
00:04:33,310 --> 00:04:35,950
want to embed something the cover not

137
00:04:34,660 --> 00:04:39,280
tipping off the person who is going to

138
00:04:35,950 --> 00:04:43,990
be looking at that cover and that's

139
00:04:39,280 --> 00:04:46,719
basically it and so you replace the Eve

140
00:04:43,990 --> 00:04:49,360
with the warden and the breaking of the

141
00:04:46,720 --> 00:04:50,770
cipher is replaced with detecting

142
00:04:49,360 --> 00:04:52,810
something not necessarily deciphering

143
00:04:50,770 --> 00:04:55,270
the hidden message but detecting the

144
00:04:52,810 --> 00:04:56,170
presence of a hidden message so what are

145
00:04:55,270 --> 00:04:58,599
some topical applications of

146
00:04:56,170 --> 00:05:00,550
steganography so you know in the free

147
00:04:58,600 --> 00:05:02,980
rolls like in Canada United States the

148
00:05:00,550 --> 00:05:04,150
UK we have a lot of we have human rights

149
00:05:02,980 --> 00:05:06,520
basically enshrined in your respective

150
00:05:04,150 --> 00:05:07,750
constitutions so we have like freedom

151
00:05:06,520 --> 00:05:10,210
against unreasonable search and seizure

152
00:05:07,750 --> 00:05:13,110
you know probable cause you know due

153
00:05:10,210 --> 00:05:16,599
process proof beyond reasonable doubts

154
00:05:13,110 --> 00:05:18,310
things like that and so in that kind of

155
00:05:16,600 --> 00:05:19,900
environment you know beyond cryptography

156
00:05:18,310 --> 00:05:21,190
you don't really need very much but for

157
00:05:19,900 --> 00:05:22,390
the rest of the world which is a pretty

158
00:05:21,190 --> 00:05:25,180
hostile place there can be a pretty

159
00:05:22,390 --> 00:05:26,620
hostile place you have to be able to dis

160
00:05:25,180 --> 00:05:28,960
about possession of certain information

161
00:05:26,620 --> 00:05:30,850
and so just having something encrypted

162
00:05:28,960 --> 00:05:33,729
is not good enough there's an XK see the

163
00:05:30,850 --> 00:05:35,860
cartoon some guys whom they know there's

164
00:05:33,730 --> 00:05:37,000
the first frame is to stick figures

165
00:05:35,860 --> 00:05:39,580
lamenting the fact that they're not able

166
00:05:37,000 --> 00:05:45,220
to break you know this is 256 so we take

167
00:05:39,580 --> 00:05:46,719
eons and then the next frame you know

168
00:05:45,220 --> 00:05:48,280
there's a guy with wrench from Home

169
00:05:46,720 --> 00:05:49,780
Depot that cost five bucks and said

170
00:05:48,280 --> 00:05:52,659
Bridget's going to beat him and drug him

171
00:05:49,780 --> 00:05:53,650
until he gives us the passphrase and so

172
00:05:52,660 --> 00:05:54,970
that's basically so if you look at

173
00:05:53,650 --> 00:05:56,650
cryptography has come a really long way

174
00:05:54,970 --> 00:05:58,360
the theory is really good at this point

175
00:05:56,650 --> 00:05:59,679
the implementation if you like a signal

176
00:05:58,360 --> 00:06:02,440
another application like that are really

177
00:05:59,680 --> 00:06:04,270
good and so what's the weakest link is

178
00:06:02,440 --> 00:06:07,180
the human right because humans don't

179
00:06:04,270 --> 00:06:09,549
like being tortured generally so where

180
00:06:07,180 --> 00:06:10,960
does specifically where does this come

181
00:06:09,550 --> 00:06:12,580
up protection of journalists and their

182
00:06:10,960 --> 00:06:15,609
sources so a lot of countries don't have

183
00:06:12,580 --> 00:06:17,380
protections of the press protections of

184
00:06:15,610 --> 00:06:19,200
NGO staff for example if you're let's

185
00:06:17,380 --> 00:06:21,219
say trying to exfiltrate some document a

186
00:06:19,200 --> 00:06:22,570
some documentary evidence of human

187
00:06:21,220 --> 00:06:23,560
rights abuses you can encrypt it but

188
00:06:22,570 --> 00:06:25,840
when you go through a checkpoint you'll

189
00:06:23,560 --> 00:06:28,870
be asked to surrender your passphrase

190
00:06:25,840 --> 00:06:30,080
and they won't do you much good there's

191
00:06:28,870 --> 00:06:31,159
economic considerations so I'm

192
00:06:30,080 --> 00:06:32,060
I can mention in the countries my name

193
00:06:31,159 --> 00:06:33,500
but let's say you go to certain places

194
00:06:32,060 --> 00:06:34,819
in world where there's going to image

195
00:06:33,500 --> 00:06:37,699
your hard drive and Hoover up whatever

196
00:06:34,819 --> 00:06:38,810
IP they can and you know these places

197
00:06:37,699 --> 00:06:40,729
are also places where they're cracking

198
00:06:38,810 --> 00:06:42,740
down VPN so good luck trying to you know

199
00:06:40,729 --> 00:06:44,030
log in to your company server to

200
00:06:42,740 --> 00:06:47,240
download the documents remotely through

201
00:06:44,030 --> 00:06:48,530
a VPN then there's undercover work so

202
00:06:47,240 --> 00:06:49,939
affair for example with an Intelligence

203
00:06:48,530 --> 00:06:51,469
Agency working abroad you don't have to

204
00:06:49,939 --> 00:06:54,289
promote a cover or you're working

205
00:06:51,469 --> 00:06:55,610
domestically as a police force or you

206
00:06:54,289 --> 00:06:58,370
want to infiltrate for example a gang

207
00:06:55,610 --> 00:06:59,419
you might need to you know possess their

208
00:06:58,370 --> 00:07:00,860
an information that you want to be able

209
00:06:59,419 --> 00:07:03,198
to disavow and so that's where

210
00:07:00,860 --> 00:07:04,520
steganography comes in so encryption is

211
00:07:03,199 --> 00:07:05,449
adequate there's no risk of force pastor

212
00:07:04,520 --> 00:07:08,719
disclosure for everything else you

213
00:07:05,449 --> 00:07:10,099
second ography so very briefly you know

214
00:07:08,719 --> 00:07:10,969
the classic example of stag is putting

215
00:07:10,099 --> 00:07:12,259
something into an image you know

216
00:07:10,969 --> 00:07:14,360
replacing blue significant bit of every

217
00:07:12,259 --> 00:07:15,590
pixel with your message you shouldn't do

218
00:07:14,360 --> 00:07:17,569
that that's really insecure as most of

219
00:07:15,590 --> 00:07:19,400
you probably know already there's more

220
00:07:17,569 --> 00:07:20,539
sophisticated ways of doing it 802 at 11

221
00:07:19,400 --> 00:07:22,758
Wireless tag is something that's

222
00:07:20,539 --> 00:07:24,318
interesting it's emerging right now so

223
00:07:22,759 --> 00:07:26,240
basically that's where you know you have

224
00:07:24,319 --> 00:07:27,800
certain wireless frames they contain

225
00:07:26,240 --> 00:07:29,539
beautifully something that is random but

226
00:07:27,800 --> 00:07:30,680
in fact they can be ciphertext and so if

227
00:07:29,539 --> 00:07:33,169
you have another person listening in

228
00:07:30,680 --> 00:07:35,529
promiscuous mode to the air they can

229
00:07:33,169 --> 00:07:37,580
decrypt that random bin the the frame

230
00:07:35,529 --> 00:07:39,710
then you have things like veracrypt

231
00:07:37,580 --> 00:07:41,508
staying FS so that's where basically

232
00:07:39,710 --> 00:07:44,000
secret information is secreted in unused

233
00:07:41,509 --> 00:07:48,860
space many things like spread spectrum

234
00:07:44,000 --> 00:07:50,690
but the important point here is that all

235
00:07:48,860 --> 00:07:53,120
of these require special hardware

236
00:07:50,690 --> 00:07:57,199
special software and so that's gonna be

237
00:07:53,120 --> 00:07:59,389
a problem very briefly some forensic

238
00:07:57,199 --> 00:08:01,029
analysis techniques so if you use a

239
00:07:59,389 --> 00:08:03,379
cover file from Google for example

240
00:08:01,029 --> 00:08:04,490
Google Images it's really bad because

241
00:08:03,379 --> 00:08:06,080
you do side by side comparison it's

242
00:08:04,490 --> 00:08:07,430
really difficult to find that that's

243
00:08:06,080 --> 00:08:09,349
been modified you can do a direct

244
00:08:07,430 --> 00:08:10,190
forensic analysis so let's say your game

245
00:08:09,349 --> 00:08:12,169
is a little bit better and you take a

246
00:08:10,190 --> 00:08:13,370
picture with your SLR and then you had

247
00:08:12,169 --> 00:08:14,719
something using for example of these

248
00:08:13,370 --> 00:08:16,159
open-source tools like OpenStack or

249
00:08:14,719 --> 00:08:17,990
whatever be really careful when you do

250
00:08:16,159 --> 00:08:19,849
that because there's a lot of statistics

251
00:08:17,990 --> 00:08:21,379
and there's like you know of the CCD

252
00:08:19,849 --> 00:08:22,639
detector of like the lines and so forth

253
00:08:21,379 --> 00:08:23,690
and if you unless you really understand

254
00:08:22,639 --> 00:08:24,860
the statistics you're probably gonna

255
00:08:23,690 --> 00:08:27,050
break them in a fashion that's gonna be

256
00:08:24,860 --> 00:08:28,969
detectable by your adversary and the

257
00:08:27,050 --> 00:08:30,349
third one here I dub roughly like you

258
00:08:28,969 --> 00:08:31,669
know side channel attack we're basically

259
00:08:30,349 --> 00:08:33,140
to look for evidence that steg was used

260
00:08:31,669 --> 00:08:36,740
like in swamp is space or something like

261
00:08:33,140 --> 00:08:38,479
that but it's not a direct attack so

262
00:08:36,740 --> 00:08:40,010
this is what I submit to you are the

263
00:08:38,479 --> 00:08:42,020
essential ingredients of stake where I

264
00:08:40,010 --> 00:08:43,120
think existing stag falls short

265
00:08:42,020 --> 00:08:45,279
so you need

266
00:08:43,120 --> 00:08:46,329
forensic resistance which I just

267
00:08:45,279 --> 00:08:48,129
described a minute ago it's fairly

268
00:08:46,329 --> 00:08:50,138
straightforward don't put stuff in swap

269
00:08:48,129 --> 00:08:52,029
for instance and then a plausible

270
00:08:50,139 --> 00:08:53,470
deniability and if you just recall the

271
00:08:52,029 --> 00:08:54,670
place in the world you used stank are

272
00:08:53,470 --> 00:08:55,749
not the places where plausible

273
00:08:54,670 --> 00:08:57,670
deniability has to reach a high

274
00:08:55,749 --> 00:08:59,829
threshold for example where you have you

275
00:08:57,670 --> 00:09:02,709
know guilty beyond a reasonable doubt or

276
00:08:59,829 --> 00:09:03,969
whatever the the metric might be those

277
00:09:02,709 --> 00:09:05,949
are places where if you index the

278
00:09:03,970 --> 00:09:07,329
suspicion against you moves even a

279
00:09:05,949 --> 00:09:09,490
little bit that's grounds in which

280
00:09:07,329 --> 00:09:11,349
they'll do lawful things to you and so

281
00:09:09,490 --> 00:09:12,850
we have to be I think very diligent in

282
00:09:11,350 --> 00:09:14,709
the way we you know conceive of

283
00:09:12,850 --> 00:09:16,360
plausible deniability plausible

284
00:09:14,709 --> 00:09:17,739
deniability means really the index of

285
00:09:16,360 --> 00:09:20,410
suspicion does not move against you even

286
00:09:17,740 --> 00:09:22,959
a little bit once you have those two

287
00:09:20,410 --> 00:09:25,089
ingredients in place I'll submit to you

288
00:09:22,959 --> 00:09:32,050
that that gives you a fairly good stake

289
00:09:25,089 --> 00:09:35,379
system okay so just a brief background

290
00:09:32,050 --> 00:09:37,029
so as I mentioned you know the

291
00:09:35,379 --> 00:09:38,230
functionality that I hope to develop is

292
00:09:37,029 --> 00:09:39,670
roughly chromel in severe crypts and

293
00:09:38,230 --> 00:09:40,959
partition functions so veracrypt has

294
00:09:39,670 --> 00:09:42,128
this origins a true crypt which in turn

295
00:09:40,959 --> 00:09:45,248
has his origins and decryption for the

296
00:09:42,129 --> 00:09:46,389
masses and this guy here to let sorry

297
00:09:45,249 --> 00:09:48,850
I'm not very adapted using this

298
00:09:46,389 --> 00:09:51,100
apparently is Paul Theru he's a very

299
00:09:48,850 --> 00:09:53,079
interesting guy from South Africa he

300
00:09:51,100 --> 00:09:56,259
gifted programmer but also a bit of a

301
00:09:53,079 --> 00:09:57,758
career criminal crime overload if you

302
00:09:56,259 --> 00:09:59,170
have like four hours to burn there's I

303
00:09:57,759 --> 00:10:02,040
think a really interesting buy on him on

304
00:09:59,170 --> 00:10:05,050
medium or like long reads or something

305
00:10:02,040 --> 00:10:06,459
so just to get now very briefly talk

306
00:10:05,050 --> 00:10:07,599
about vanilla disk encryption because

307
00:10:06,459 --> 00:10:10,359
it's sort of the starting point for

308
00:10:07,600 --> 00:10:13,240
everything else so here we have a system

309
00:10:10,360 --> 00:10:14,470
on the right you have just a standard

310
00:10:13,240 --> 00:10:15,759
hard drive you have any encryption layer

311
00:10:14,470 --> 00:10:18,160
and then you have a block device as

312
00:10:15,759 --> 00:10:21,399
given to the OS and so there's basically

313
00:10:18,160 --> 00:10:23,439
a sector sector mapping between this

314
00:10:21,399 --> 00:10:25,120
block device here and this block device

315
00:10:23,439 --> 00:10:27,459
here up to maybe a linear shift that

316
00:10:25,120 --> 00:10:30,309
accounts for some headers on the disk

317
00:10:27,459 --> 00:10:31,839
itself and so basically when the file

318
00:10:30,309 --> 00:10:33,189
it's just the operating system and file

319
00:10:31,839 --> 00:10:34,480
system right something it goes through

320
00:10:33,189 --> 00:10:35,889
the encryption layer gets encrypted that

321
00:10:34,480 --> 00:10:38,170
sector and then gets written out to the

322
00:10:35,889 --> 00:10:40,329
right-hand side and the process happens

323
00:10:38,170 --> 00:10:42,399
in Reverse as well that's the basis so

324
00:10:40,329 --> 00:10:44,529
what is the and so that's when you get

325
00:10:42,399 --> 00:10:45,970
standard disk encryption and so you look

326
00:10:44,529 --> 00:10:48,040
at the header here for example luke's or

327
00:10:45,970 --> 00:10:49,929
i mean the true crypt is going to have

328
00:10:48,040 --> 00:10:51,759
whatever its headers so everybody's

329
00:10:49,929 --> 00:10:52,750
gonna be aware and you can strip out the

330
00:10:51,759 --> 00:10:53,980
headers if you want but generally you're

331
00:10:52,750 --> 00:10:55,360
gonna be aware and your addresses can be

332
00:10:53,980 --> 00:10:57,699
aware that you're using the encryption

333
00:10:55,360 --> 00:10:58,689
so veracrypt offers this additional

334
00:10:57,699 --> 00:11:00,790
functionality it's called the hidden

335
00:10:58,689 --> 00:11:03,399
partition functionality and so what you

336
00:11:00,790 --> 00:11:04,868
do is you need two partitions and the

337
00:11:03,399 --> 00:11:06,100
first partition is just ordinary vanilla

338
00:11:04,869 --> 00:11:08,199
disk encryption the second petition is

339
00:11:06,100 --> 00:11:10,899
sort of the same except you have a lot

340
00:11:08,199 --> 00:11:13,299
of slack space here as that's a dead

341
00:11:10,899 --> 00:11:14,679
space between the file system as given

342
00:11:13,299 --> 00:11:15,759
by this question mark here and so

343
00:11:14,679 --> 00:11:16,720
typically before you install this

344
00:11:15,759 --> 00:11:18,129
encryption the first thing you do is

345
00:11:16,720 --> 00:11:20,470
override everything with random data and

346
00:11:18,129 --> 00:11:23,769
so that random data will still exist

347
00:11:20,470 --> 00:11:25,540
there that this residual random data

348
00:11:23,769 --> 00:11:27,730
from your initialization between the

349
00:11:25,540 --> 00:11:31,299
slack space and so you can that can be

350
00:11:27,730 --> 00:11:33,339
random data or it can be ciphertext to

351
00:11:31,299 --> 00:11:34,929
something secret and that's where

352
00:11:33,339 --> 00:11:36,519
veracrypt arrives is plausible

353
00:11:34,929 --> 00:11:38,319
deniability from is the ambiguity of

354
00:11:36,519 --> 00:11:40,179
this question mark here so if it's

355
00:11:38,319 --> 00:11:42,670
ciphertext to something else then you

356
00:11:40,179 --> 00:11:44,439
can you know apply it the encryption

357
00:11:42,670 --> 00:11:45,670
decryption layer to it and you have

358
00:11:44,439 --> 00:11:47,319
another block device here you're a

359
00:11:45,670 --> 00:11:49,509
secret system writing input entire

360
00:11:47,319 --> 00:11:51,040
operating system on top of that I mean

361
00:11:49,509 --> 00:11:52,660
the details might be a little bit off

362
00:11:51,040 --> 00:11:53,049
but that's the general gist of how it

363
00:11:52,660 --> 00:11:55,238
works

364
00:11:53,049 --> 00:11:56,559
forensics security is really high they

365
00:11:55,239 --> 00:11:58,480
had a couple of issues a while back I

366
00:11:56,559 --> 00:12:00,519
think they fixed up but the question is

367
00:11:58,480 --> 00:12:02,949
this is a plausible deniability so you

368
00:12:00,519 --> 00:12:05,110
have number one two partitions

369
00:12:02,949 --> 00:12:06,459
configured in this way you have trim

370
00:12:05,110 --> 00:12:09,009
that you have disabled because you know

371
00:12:06,459 --> 00:12:11,049
your slack space otherwise is gone

372
00:12:09,009 --> 00:12:12,429
you need to freeze this filesystem here

373
00:12:11,049 --> 00:12:14,049
of the second partition otherwise you

374
00:12:12,429 --> 00:12:16,269
risk overwriting the yellow question

375
00:12:14,049 --> 00:12:18,040
mark data and say put all those things

376
00:12:16,269 --> 00:12:20,049
together on top of having veracrypt

377
00:12:18,040 --> 00:12:21,488
is it plausible and so I think it's

378
00:12:20,049 --> 00:12:23,139
probably plausible in a legal sense like

379
00:12:21,489 --> 00:12:24,279
in a free country is a plausible where

380
00:12:23,139 --> 00:12:26,619
the index is sufficient as to move

381
00:12:24,279 --> 00:12:28,389
against you just a little bit probably

382
00:12:26,619 --> 00:12:30,179
not and so I mean the creek I mean I

383
00:12:28,389 --> 00:12:32,199
don't want to you know disparage

384
00:12:30,179 --> 00:12:34,238
veracrypt at all I mean it's really good

385
00:12:32,199 --> 00:12:36,459
software but the offer on their website

386
00:12:34,239 --> 00:12:37,929
a remedy for this at least superficially

387
00:12:36,459 --> 00:12:39,758
which is you know if you're asked about

388
00:12:37,929 --> 00:12:40,929
this your adversaries gonna ask you why

389
00:12:39,759 --> 00:12:42,369
do you have all these peculiar things on

390
00:12:40,929 --> 00:12:46,149
your computer and you'll say okay well

391
00:12:42,369 --> 00:12:47,499
here's a reason but it's a bit of a it's

392
00:12:46,149 --> 00:12:48,730
it's really unfortunate because you know

393
00:12:47,499 --> 00:12:49,869
they'll be detained somewhere sit down

394
00:12:48,730 --> 00:12:51,309
and you'll give this reason to offer

395
00:12:49,869 --> 00:12:53,230
this reason up and then to look at you

396
00:12:51,309 --> 00:12:56,169
know this page and they'll sort of have

397
00:12:53,230 --> 00:12:57,489
a chuckle and say yeah okay great so

398
00:12:56,169 --> 00:12:59,470
what are the two ingredients we

399
00:12:57,489 --> 00:13:00,579
absolutely need for Stegner stenographic

400
00:12:59,470 --> 00:13:01,779
disk encryption so if we want to

401
00:13:00,579 --> 00:13:03,339
replicate that functionality veracrypt

402
00:13:01,779 --> 00:13:04,480
what do we want to do so

403
00:13:03,339 --> 00:13:05,529
forensic security that's fairly

404
00:13:04,480 --> 00:13:07,640
straightforward I think that's fairly

405
00:13:05,529 --> 00:13:08,750
clear at this point deniability

406
00:13:07,640 --> 00:13:09,740
so the current system for example in a

407
00:13:08,750 --> 00:13:11,060
bludger should appear completely normal

408
00:13:09,740 --> 00:13:13,250
it should be no incriminating software

409
00:13:11,060 --> 00:13:14,810
visible whatsoever so dishy should

410
00:13:13,250 --> 00:13:16,100
appear a bit for a bit as a for install

411
00:13:14,810 --> 00:13:18,500
the default settings the asterisks here

412
00:13:16,100 --> 00:13:20,149
is because encryption I don't think is

413
00:13:18,500 --> 00:13:21,620
defaults but it might as well be you'd

414
00:13:20,149 --> 00:13:25,519
be remiss if he didn't use descriptive

415
00:13:21,620 --> 00:13:28,250
for everything nowadays I think ok so

416
00:13:25,519 --> 00:13:29,690
what is that translated into practice so

417
00:13:28,250 --> 00:13:31,070
it's a fairly tall order we want a

418
00:13:29,690 --> 00:13:33,620
system that looks completely normal from

419
00:13:31,070 --> 00:13:36,410
the outside well we still have slack

420
00:13:33,620 --> 00:13:37,519
space we can play with so disregarding

421
00:13:36,410 --> 00:13:39,079
the issue with trim I'll get back to

422
00:13:37,519 --> 00:13:41,060
that at the end of the presentation but

423
00:13:39,079 --> 00:13:42,469
let's say you have sock space so the

424
00:13:41,060 --> 00:13:44,239
sock space you can you know write

425
00:13:42,470 --> 00:13:46,720
something to it in an encrypted form it

426
00:13:44,240 --> 00:13:49,790
takes on a random sort of appearance

427
00:13:46,720 --> 00:13:52,940
and okay great so what's the problem

428
00:13:49,790 --> 00:13:55,040
with that well you know you have a cover

429
00:13:52,940 --> 00:13:56,450
system now so this you you're embedding

430
00:13:55,040 --> 00:13:57,800
stuff in between the files and recovery

431
00:13:56,450 --> 00:14:00,079
system the slack space the cover system

432
00:13:57,800 --> 00:14:02,540
as you keep using it it will overwrite

433
00:14:00,079 --> 00:14:05,660
the slack space and you're gonna have

434
00:14:02,540 --> 00:14:07,099
data loss the silver lining here is that

435
00:14:05,660 --> 00:14:08,060
most of your data's can remain intact so

436
00:14:07,100 --> 00:14:09,560
if you have like a two terabyte drive

437
00:14:08,060 --> 00:14:11,810
and user cover system like in the normal

438
00:14:09,560 --> 00:14:13,550
fashion gonna have a lot of like cover

439
00:14:11,810 --> 00:14:15,469
it a slack space that's never gonna be

440
00:14:13,550 --> 00:14:18,680
overwritten or at least not for a long

441
00:14:15,470 --> 00:14:20,570
time so basically banks a solution which

442
00:14:18,680 --> 00:14:22,640
is error correction so forward error

443
00:14:20,570 --> 00:14:23,720
correction that is so basically you

444
00:14:22,640 --> 00:14:24,949
start off with a bit of data on the left

445
00:14:23,720 --> 00:14:27,050
in this case I have instantiated the

446
00:14:24,949 --> 00:14:28,310
problem with something like a file it

447
00:14:27,050 --> 00:14:31,910
could be a file system it can be no less

448
00:14:28,310 --> 00:14:33,349
or whatever and you add some redundancy

449
00:14:31,910 --> 00:14:35,839
to it and then you distribute it across

450
00:14:33,350 --> 00:14:37,399
the slack space you let you cover system

451
00:14:35,839 --> 00:14:38,540
run destroy data left right and center

452
00:14:37,399 --> 00:14:39,800
and later point you look at those

453
00:14:38,540 --> 00:14:42,620
original sectors where you bedded your

454
00:14:39,800 --> 00:14:44,120
data and you extracts and you do error

455
00:14:42,620 --> 00:14:46,250
correction and you recover your initial

456
00:14:44,120 --> 00:14:47,959
data okay great there's one more thing

457
00:14:46,250 --> 00:14:49,640
we have to do we have to make absolutely

458
00:14:47,959 --> 00:14:51,170
certain that if we're doing this we

459
00:14:49,640 --> 00:14:53,870
never overwrite anything touched by the

460
00:14:51,170 --> 00:14:55,370
cover system not now not before and the

461
00:14:53,870 --> 00:14:56,420
issue is not only you know not

462
00:14:55,370 --> 00:14:59,779
corrupting the cover system but also

463
00:14:56,420 --> 00:15:01,069
making sure that the deleted files

464
00:14:59,779 --> 00:15:02,329
remain intact because that's really

465
00:15:01,070 --> 00:15:05,089
important for the forensic picture data

466
00:15:02,329 --> 00:15:08,420
if you can do those two things then

467
00:15:05,089 --> 00:15:11,209
here's basically you're on a good path

468
00:15:08,420 --> 00:15:13,069
and so here basically you have problem

469
00:15:11,209 --> 00:15:14,630
solution problem solution the solution

470
00:15:13,070 --> 00:15:16,850
at the end of the day half the solution

471
00:15:14,630 --> 00:15:17,899
this problem is a kernel module the

472
00:15:16,850 --> 00:15:20,510
current module does all this error

473
00:15:17,899 --> 00:15:23,330
correction it does

474
00:15:20,510 --> 00:15:24,560
it does all the you know the making sure

475
00:15:23,330 --> 00:15:26,150
it doesn't overwrite any cover system

476
00:15:24,560 --> 00:15:27,650
stuff that does everything automatically

477
00:15:26,150 --> 00:15:29,329
and what it does is it presents to the

478
00:15:27,650 --> 00:15:30,980
user a really nice easy-to-use block

479
00:15:29,330 --> 00:15:33,050
device it is just right to that block

480
00:15:30,980 --> 00:15:34,310
device that's basically and you can put

481
00:15:33,050 --> 00:15:36,859
a file system and get but no ice on top

482
00:15:34,310 --> 00:15:38,000
of that that's half the problem now we

483
00:15:36,860 --> 00:15:40,520
have this really incriminating kernel

484
00:15:38,000 --> 00:15:42,320
module and so what do you do you can

485
00:15:40,520 --> 00:15:44,090
download it you can keep possess it with

486
00:15:42,320 --> 00:15:46,820
you those are really not ideal solutions

487
00:15:44,090 --> 00:15:47,960
and really hostile environments what if

488
00:15:46,820 --> 00:15:50,480
you can get the kernel module to hide

489
00:15:47,960 --> 00:15:51,800
itself and it sounds like voodoo but

490
00:15:50,480 --> 00:15:53,390
actually I'll show to you that it's

491
00:15:51,800 --> 00:15:55,370
quite possible and hopefully by the end

492
00:15:53,390 --> 00:15:59,390
of persuade to do that in fact it's

493
00:15:55,370 --> 00:16:01,160
quite possible indeed so here's a bird's

494
00:15:59,390 --> 00:16:02,540
eye view of a running system so only one

495
00:16:01,160 --> 00:16:04,490
of these systems runs at once this the

496
00:16:02,540 --> 00:16:05,839
top one is very standard cover assist

497
00:16:04,490 --> 00:16:07,670
it's very standard system with disk

498
00:16:05,840 --> 00:16:09,110
encryption it has to be has to look

499
00:16:07,670 --> 00:16:11,630
exactly like a normal system if it

500
00:16:09,110 --> 00:16:15,410
doesn't that's gonna give your adversary

501
00:16:11,630 --> 00:16:17,210
some reason to question me oh and the

502
00:16:15,410 --> 00:16:18,410
bottom system is your hidden system and

503
00:16:17,210 --> 00:16:21,470
the difference there is you actually

504
00:16:18,410 --> 00:16:23,000
have a layer here the Stag layer here

505
00:16:21,470 --> 00:16:24,800
which does all the error correction does

506
00:16:23,000 --> 00:16:26,270
off the protection of the cover system

507
00:16:24,800 --> 00:16:28,579
data and so forth so if information

508
00:16:26,270 --> 00:16:30,290
comes in from the left it goes through

509
00:16:28,580 --> 00:16:31,580
the file system here I guess written to

510
00:16:30,290 --> 00:16:34,040
this block device and all the spare

511
00:16:31,580 --> 00:16:36,230
correction and/or identification and you

512
00:16:34,040 --> 00:16:37,280
know diffusion is done and the reverse

513
00:16:36,230 --> 00:16:39,110
process happens as well

514
00:16:37,280 --> 00:16:41,360
all the while leaving the green sectors

515
00:16:39,110 --> 00:16:44,960
which are the bits of the cover system

516
00:16:41,360 --> 00:16:46,670
completely intact okay so this is the

517
00:16:44,960 --> 00:16:49,310
part I've to skip over it's interesting

518
00:16:46,670 --> 00:16:50,510
so by all means come talk to me after I

519
00:16:49,310 --> 00:16:53,599
can give you more technical details

520
00:16:50,510 --> 00:16:56,390
about how this works the basic idea is

521
00:16:53,600 --> 00:16:59,920
we have the air correction is

522
00:16:56,390 --> 00:17:03,050
implemented using coding blocks and so

523
00:16:59,920 --> 00:17:04,369
typically what you do is you install the

524
00:17:03,050 --> 00:17:05,659
hidden system first and then on top of

525
00:17:04,369 --> 00:17:07,069
that once you have basically what looks

526
00:17:05,660 --> 00:17:10,250
like random noise you install your cover

527
00:17:07,069 --> 00:17:12,109
system and so you're gonna have on your

528
00:17:10,250 --> 00:17:13,310
disk a sequence of coding blocks and

529
00:17:12,109 --> 00:17:14,719
Checotah block is independent and so

530
00:17:13,310 --> 00:17:16,129
much that you know it uses information

531
00:17:14,720 --> 00:17:19,069
from the block itself to do the error

532
00:17:16,130 --> 00:17:21,319
correction so here you have for example

533
00:17:19,069 --> 00:17:23,449
with some yellow is your data and with

534
00:17:21,319 --> 00:17:25,069
some blue is your redundancy to simplify

535
00:17:23,449 --> 00:17:26,540
the picture a little bit and so if

536
00:17:25,069 --> 00:17:27,649
there's some corruption here you know

537
00:17:26,540 --> 00:17:29,120
the blue stuff and the old stuff come

538
00:17:27,650 --> 00:17:30,330
together and use your air correction

539
00:17:29,120 --> 00:17:33,059
code and you actually recover the

540
00:17:30,330 --> 00:17:35,370
channel data and so basically what you

541
00:17:33,059 --> 00:17:36,418
do is you just you if you install the

542
00:17:35,370 --> 00:17:37,860
hidden system the first thing you do is

543
00:17:36,419 --> 00:17:39,659
establish the cryptographic mapping

544
00:17:37,860 --> 00:17:41,070
under the hidden key and so maybe I

545
00:17:39,659 --> 00:17:43,490
should have actually been a bit more

546
00:17:41,070 --> 00:17:43,490
clear here

547
00:17:45,929 --> 00:17:49,019
these DM crypt layers here are with

548
00:17:47,880 --> 00:17:50,640
respect to different keys you have your

549
00:17:49,019 --> 00:17:52,500
cover key here which corresponds to the

550
00:17:50,640 --> 00:17:54,510
pass phrase that you divulge to anybody

551
00:17:52,500 --> 00:17:57,149
who interrogate Co and down here you

552
00:17:54,510 --> 00:17:59,580
have your hidden key and so this

553
00:17:57,149 --> 00:18:00,870
reinterprets the underlying device from

554
00:17:59,580 --> 00:18:06,678
different cryptographic perspectives

555
00:18:00,870 --> 00:18:09,629
with respect to different keys so okay

556
00:18:06,679 --> 00:18:12,570
so now you have when you install your

557
00:18:09,630 --> 00:18:13,799
hid system you first of all establish

558
00:18:12,570 --> 00:18:15,330
that crypto mapping with respect to the

559
00:18:13,799 --> 00:18:17,399
hidden key you add a whole bunch of

560
00:18:15,330 --> 00:18:18,689
blocks coding blocks initialize to 0 or

561
00:18:17,399 --> 00:18:21,239
whatever the initialization value is

562
00:18:18,690 --> 00:18:23,429
great but the coding blocks are one

563
00:18:21,240 --> 00:18:24,809
after the other on the disk and so if

564
00:18:23,429 --> 00:18:26,669
let's say you have the cover system come

565
00:18:24,809 --> 00:18:27,870
by and overwrites an entire coding block

566
00:18:26,669 --> 00:18:29,309
which is let's say on the order of ten

567
00:18:27,870 --> 00:18:30,600
megabytes quite conceivable there's no

568
00:18:29,309 --> 00:18:32,760
way of recovering from that error if

569
00:18:30,600 --> 00:18:34,199
it's completely over in so the way you

570
00:18:32,760 --> 00:18:35,789
get around that is basically randomize

571
00:18:34,200 --> 00:18:36,690
how the coding blocks are distributed on

572
00:18:35,789 --> 00:18:37,950
the disks instead of having them

573
00:18:36,690 --> 00:18:39,419
sequentially one or the other in a

574
00:18:37,950 --> 00:18:41,370
spatial arrangement that's very neat you

575
00:18:39,419 --> 00:18:42,840
have a random arrangement so the

576
00:18:41,370 --> 00:18:43,918
individual sectors that comprise a given

577
00:18:42,840 --> 00:18:46,649
coding block are distributed randomly

578
00:18:43,919 --> 00:18:48,120
across the disk and so you can show what

579
00:18:46,649 --> 00:18:49,768
that is equivalent to because the

580
00:18:48,120 --> 00:18:52,918
randomization process is statistically

581
00:18:49,769 --> 00:18:54,539
independent from let's say ext4 or riser

582
00:18:52,919 --> 00:18:57,360
vests whatever is running on top on the

583
00:18:54,539 --> 00:18:58,919
cover system because it's independent

584
00:18:57,360 --> 00:18:59,340
that's equivalent to randomizing the

585
00:18:58,919 --> 00:19:01,830
error

586
00:18:59,340 --> 00:19:03,389
so each coding block is going to up to

587
00:19:01,830 --> 00:19:04,830
like a statistical sort of fuzziness

588
00:19:03,389 --> 00:19:07,439
it's going to experience the same amount

589
00:19:04,830 --> 00:19:08,939
of overwrites and as a consequence this

590
00:19:07,440 --> 00:19:10,049
is a couple of consequences means you

591
00:19:08,940 --> 00:19:11,789
can do the error correction really well

592
00:19:10,049 --> 00:19:13,379
it means you can model the system really

593
00:19:11,789 --> 00:19:15,210
well it means the system models

594
00:19:13,380 --> 00:19:16,260
perfectly as a bi-racial channel which

595
00:19:15,210 --> 00:19:17,490
means you know the right error

596
00:19:16,260 --> 00:19:19,559
correction is which in this case is

597
00:19:17,490 --> 00:19:20,880
low-density parity-check which means you

598
00:19:19,559 --> 00:19:22,019
have really really strong theoretical

599
00:19:20,880 --> 00:19:24,720
guarantees that you're going to be able

600
00:19:22,019 --> 00:19:26,610
to recover all of your data and so

601
00:19:24,720 --> 00:19:28,980
that's basically the kernel module and

602
00:19:26,610 --> 00:19:30,449
so how do you get one of the problems of

603
00:19:28,980 --> 00:19:32,340
randomization especially when you're

604
00:19:30,450 --> 00:19:34,440
using for example a magnetic drive is

605
00:19:32,340 --> 00:19:36,629
that you're going to have a lot of

606
00:19:34,440 --> 00:19:39,060
random accesses on your

607
00:19:36,630 --> 00:19:40,440
underlying device which will kill your

608
00:19:39,060 --> 00:19:42,330
performance so one of there's a number

609
00:19:40,440 --> 00:19:43,680
of you know remedies for that one of the

610
00:19:42,330 --> 00:19:45,510
big ones is having a really really large

611
00:19:43,680 --> 00:19:47,130
cache I found in practice that works

612
00:19:45,510 --> 00:19:48,600
really well so most of the operations

613
00:19:47,130 --> 00:19:49,740
done are cached

614
00:19:48,600 --> 00:19:51,350
and eventually there's a synchronization

615
00:19:49,740 --> 00:19:59,670
to the disk when there's some idle time

616
00:19:51,350 --> 00:20:00,959
and the other remedy is to is to so if

617
00:19:59,670 --> 00:20:02,550
you have let's say a number of coding

618
00:20:00,960 --> 00:20:03,720
blocks and they all have let's say

619
00:20:02,550 --> 00:20:05,100
you're loading a bunch you're saving a

620
00:20:03,720 --> 00:20:06,630
bunch to disk you have all these

621
00:20:05,100 --> 00:20:08,129
operations are spread out randomly

622
00:20:06,630 --> 00:20:09,570
across the disk you interleave them so

623
00:20:08,130 --> 00:20:11,400
you have something that looks like an

624
00:20:09,570 --> 00:20:12,889
elevator schedule scheduler that you

625
00:20:11,400 --> 00:20:17,610
guys might be familiar with the linux

626
00:20:12,890 --> 00:20:19,530
and so the consequence there is that you

627
00:20:17,610 --> 00:20:24,510
can ameliorate to a significant extent

628
00:20:19,530 --> 00:20:27,330
like the randomization that's that would

629
00:20:24,510 --> 00:20:29,520
kill performance otherwise so here's a

630
00:20:27,330 --> 00:20:31,620
really high level architecture of the

631
00:20:29,520 --> 00:20:32,460
kernel module I'm not gonna go into too

632
00:20:31,620 --> 00:20:35,429
much detail this is actually a

633
00:20:32,460 --> 00:20:38,130
simplification so it was written in C++

634
00:20:35,430 --> 00:20:40,650
despite the fact that it's in kernel

635
00:20:38,130 --> 00:20:42,390
space for Linux which is not a lot of

636
00:20:40,650 --> 00:20:44,490
fun but it's fairly complex so it was

637
00:20:42,390 --> 00:20:48,480
actually easier to do it than writing it

638
00:20:44,490 --> 00:20:49,560
in plain C so basically you have you

639
00:20:48,480 --> 00:20:50,880
know from the left you have for example

640
00:20:49,560 --> 00:20:52,860
a request that comes in from the hidden

641
00:20:50,880 --> 00:20:54,840
OS it goes to the filesystem it makes

642
00:20:52,860 --> 00:20:57,199
its way to the curl module here which

643
00:20:54,840 --> 00:20:59,669
means it comes in from the left here and

644
00:20:57,200 --> 00:21:01,680
if it can be serviced right away with

645
00:20:59,670 --> 00:21:04,020
what's in memory here the coding blocks

646
00:21:01,680 --> 00:21:05,340
great then you know the request is

647
00:21:04,020 --> 00:21:06,660
turned around the by request has turned

648
00:21:05,340 --> 00:21:09,030
around really quickly and comes it goes

649
00:21:06,660 --> 00:21:10,770
out where I came from on the other hand

650
00:21:09,030 --> 00:21:12,330
if it needs some data that hasn't yet

651
00:21:10,770 --> 00:21:14,010
been decoded or hasn't yet been read

652
00:21:12,330 --> 00:21:16,050
from disk then it gets sent to this

653
00:21:14,010 --> 00:21:17,370
purgatory here the pending blocks and at

654
00:21:16,050 --> 00:21:17,909
some point when there's a slot free in

655
00:21:17,370 --> 00:21:19,739
the cache

656
00:21:17,910 --> 00:21:22,200
it's gonna be read from disk decoded and

657
00:21:19,740 --> 00:21:24,120
then sent back out again roughly the

658
00:21:22,200 --> 00:21:25,650
same for reads and writes I mean back

659
00:21:24,120 --> 00:21:28,679
and for like decoding encoding let's

660
00:21:25,650 --> 00:21:30,180
make the right substitutions so there's

661
00:21:28,680 --> 00:21:31,860
a lot of multi-threaded stuff happening

662
00:21:30,180 --> 00:21:33,450
here and the reason is that like the

663
00:21:31,860 --> 00:21:34,709
encoding and decoding the air correction

664
00:21:33,450 --> 00:21:37,710
hashing and so forth that I'll describe

665
00:21:34,710 --> 00:21:39,000
momentarily is really you can make

666
00:21:37,710 --> 00:21:42,420
things a lot faster by having things

667
00:21:39,000 --> 00:21:44,700
running parallel it also for the iOS are

668
00:21:42,420 --> 00:21:46,680
using for example an nvme drive that

669
00:21:44,700 --> 00:21:47,370
really favours parallelism you might

670
00:21:46,680 --> 00:21:48,870
want the opposite

671
00:21:47,370 --> 00:21:50,250
of having like an elevator scheduler you

672
00:21:48,870 --> 00:21:53,969
want a lot of like you know parallel

673
00:21:50,250 --> 00:21:56,070
reads and writes okay so I'm gonna skip

674
00:21:53,970 --> 00:21:57,840
over this here but Bal means again if

675
00:21:56,070 --> 00:22:00,379
you guys want to talk about this I'd be

676
00:21:57,840 --> 00:22:00,379
happy to

677
00:22:00,680 --> 00:22:05,010
so the of LDPC loaded it's paired check

678
00:22:04,050 --> 00:22:06,720
the Sierra correct encode the

679
00:22:05,010 --> 00:22:09,090
implementation so what I mentioned

680
00:22:06,720 --> 00:22:10,380
before is that sectors that are

681
00:22:09,090 --> 00:22:12,990
overwritten by the cover system are

682
00:22:10,380 --> 00:22:15,510
sacrosanct they cannot be touched by the

683
00:22:12,990 --> 00:22:17,550
hidden system when it's writing data to

684
00:22:15,510 --> 00:22:19,740
the slack space and so the way it's done

685
00:22:17,550 --> 00:22:24,149
is by simply taking each sector and

686
00:22:19,740 --> 00:22:25,740
allocating 32 bytes to a hash and so if

687
00:22:24,150 --> 00:22:27,630
we just concede if what happens the

688
00:22:25,740 --> 00:22:29,610
cover system comes along under the cover

689
00:22:27,630 --> 00:22:32,250
system key it writes something to the

690
00:22:29,610 --> 00:22:33,870
sector and so what that translates into

691
00:22:32,250 --> 00:22:36,059
the underlying block device is something

692
00:22:33,870 --> 00:22:38,040
that looks or a random with respect to

693
00:22:36,059 --> 00:22:39,149
the hidden system when that's decrypted

694
00:22:38,040 --> 00:22:41,010
with respect to the hidden system key

695
00:22:39,150 --> 00:22:42,990
again it looks random and so you have

696
00:22:41,010 --> 00:22:44,790
that random something looks sort of

697
00:22:42,990 --> 00:22:47,010
random the hash and data are not going

698
00:22:44,790 --> 00:22:49,678
to match and so that's how you detect

699
00:22:47,010 --> 00:22:51,360
over writes by the cover system and then

700
00:22:49,679 --> 00:22:53,220
there's some design decisions here which

701
00:22:51,360 --> 00:22:54,659
is when you do error correction you

702
00:22:53,220 --> 00:22:57,600
decide how much redundancy to add and

703
00:22:54,660 --> 00:22:59,370
basically it tells you how robust you

704
00:22:57,600 --> 00:23:01,919
know the air correction code is going to

705
00:22:59,370 --> 00:23:03,270
be against overwrites and so in this

706
00:23:01,920 --> 00:23:05,880
case here I chose something that's

707
00:23:03,270 --> 00:23:07,889
roughly 50/50 so that is to say you can

708
00:23:05,880 --> 00:23:09,570
override about 50% of the drive from the

709
00:23:07,890 --> 00:23:12,090
cover system without actually having any

710
00:23:09,570 --> 00:23:13,559
any loss of data whatsoever from the

711
00:23:12,090 --> 00:23:17,270
hint system conversely the hidden system

712
00:23:13,559 --> 00:23:20,070
caps out at about 50% it's an arbitrary

713
00:23:17,270 --> 00:23:22,820
distribution or allocation and you can

714
00:23:20,070 --> 00:23:27,570
change it fairly easily

715
00:23:22,820 --> 00:23:30,178
so implementation of the cache it's

716
00:23:27,570 --> 00:23:32,610
there's a bit of a nightmare and there

717
00:23:30,179 --> 00:23:34,410
was I think one instance where I was

718
00:23:32,610 --> 00:23:36,120
like on all fours on the living-room

719
00:23:34,410 --> 00:23:37,710
floor with a whole bunch of printouts of

720
00:23:36,120 --> 00:23:39,149
source code like a crazy guy out of a

721
00:23:37,710 --> 00:23:41,880
movie looking for patterns in something

722
00:23:39,150 --> 00:23:43,679
and but you know eventually I was able

723
00:23:41,880 --> 00:23:45,120
to get everything to bugged so the

724
00:23:43,679 --> 00:23:47,700
problem is not only you know is it not

725
00:23:45,120 --> 00:23:49,620
pleasant to write stuff in kernel spaces

726
00:23:47,700 --> 00:23:50,880
before the kernel that is it's also not

727
00:23:49,620 --> 00:23:52,290
pleasant to write really multi throw

728
00:23:50,880 --> 00:23:53,220
things and really asynchronous state

729
00:23:52,290 --> 00:23:55,470
machines and so forth

730
00:23:53,220 --> 00:23:57,320
but I guess the the bottom line here is

731
00:23:55,470 --> 00:23:59,440
that you have all these requirements

732
00:23:57,320 --> 00:24:01,269
high level requirements that stay

733
00:23:59,440 --> 00:24:03,789
rafi demands that you satisfy for

734
00:24:01,269 --> 00:24:05,470
deniability and you just you okay you

735
00:24:03,789 --> 00:24:07,600
satisfy one but then you you know and

736
00:24:05,470 --> 00:24:09,730
you generate any requirements like

737
00:24:07,600 --> 00:24:10,719
derivative requirements until the last

738
00:24:09,730 --> 00:24:12,340
thing you can do the only thing you have

739
00:24:10,720 --> 00:24:14,139
any control over is just eating the

740
00:24:12,340 --> 00:24:15,370
complexity that you're left with so you

741
00:24:14,139 --> 00:24:18,100
have a really complex system that does

742
00:24:15,370 --> 00:24:20,320
all the cashing it does all the you know

743
00:24:18,100 --> 00:24:22,658
the the scheduling is so forth and

744
00:24:20,320 --> 00:24:24,850
that's really sort of an unavoidable

745
00:24:22,659 --> 00:24:27,000
consequence of satisfying those

746
00:24:24,850 --> 00:24:29,529
high-level steganography requirements

747
00:24:27,000 --> 00:24:30,759
okay so you're gonna say okay this is

748
00:24:29,529 --> 00:24:32,200
all great theoretically how does this

749
00:24:30,759 --> 00:24:33,580
translate to in practice what does this

750
00:24:32,200 --> 00:24:35,980
translate to in practice and I'm really

751
00:24:33,580 --> 00:24:36,970
have to say it runs really fast so if

752
00:24:35,980 --> 00:24:40,059
you have anything you need to do in the

753
00:24:36,970 --> 00:24:41,529
field the software is not the fastest I

754
00:24:40,059 --> 00:24:42,970
mean if you guys remember Windows 95 was

755
00:24:41,529 --> 00:24:46,299
sort of clunky especially if it needed a

756
00:24:42,970 --> 00:24:48,580
defrag but it got the job done if you

757
00:24:46,299 --> 00:24:50,408
have a really fast machine with nvme for

758
00:24:48,580 --> 00:24:51,549
example it runs blazingly fast it's

759
00:24:50,409 --> 00:24:53,980
actually gonna be running faster than

760
00:24:51,549 --> 00:24:56,769
normal system like that runs spinning

761
00:24:53,980 --> 00:24:58,029
rust so the bottom line is not only does

762
00:24:56,769 --> 00:25:02,379
this work in theory but it works

763
00:24:58,029 --> 00:25:04,840
perfectly well in practice okay so that

764
00:25:02,379 --> 00:25:06,158
was the first half Remer I said there's

765
00:25:04,840 --> 00:25:07,779
two basic components the first component

766
00:25:06,159 --> 00:25:09,820
was the kernel module that does all of

767
00:25:07,779 --> 00:25:14,679
this tag itself now the kernel module

768
00:25:09,820 --> 00:25:16,539
has to hide itself okay so here's a bit

769
00:25:14,679 --> 00:25:18,279
of a fantasy what if you have a running

770
00:25:16,539 --> 00:25:19,360
system if you have running system you

771
00:25:18,279 --> 00:25:20,620
can just you know secrete the kernel

772
00:25:19,360 --> 00:25:22,269
module away alongside everything else

773
00:25:20,620 --> 00:25:23,559
you want to hide but now it's

774
00:25:22,269 --> 00:25:24,909
chicken-and-egg you have a catch-22 how

775
00:25:23,559 --> 00:25:25,870
do you extract the kernel module if you

776
00:25:24,909 --> 00:25:27,399
need the kernel module the first place

777
00:25:25,870 --> 00:25:29,830
and so that doesn't work so let's back

778
00:25:27,399 --> 00:25:31,719
up for a second we don't have this nice

779
00:25:29,830 --> 00:25:33,759
neat block device that we can just read

780
00:25:31,720 --> 00:25:36,279
and write stuff from what if we work

781
00:25:33,759 --> 00:25:37,960
directly with the slack space another

782
00:25:36,279 --> 00:25:39,789
almost like spaces and constant jeopardy

783
00:25:37,960 --> 00:25:43,000
of being overridden by the cover system

784
00:25:39,789 --> 00:25:44,980
and so pardon me

785
00:25:43,000 --> 00:25:48,100
what can we did well the kernel module

786
00:25:44,980 --> 00:25:50,200
for a few reasons because the coding the

787
00:25:48,100 --> 00:25:52,178
coefficients for the code consume a lot

788
00:25:50,200 --> 00:25:53,830
of space there's a lot of complexity in

789
00:25:52,179 --> 00:25:55,240
the code itself it's a good let's say

790
00:25:53,830 --> 00:25:56,289
it's on the order of megabytes so what

791
00:25:55,240 --> 00:25:58,299
you have to hope is that gonna be able

792
00:25:56,289 --> 00:26:00,070
to find a resource lack space that is

793
00:25:58,299 --> 00:26:02,440
not contiguous region of one megabyte

794
00:26:00,070 --> 00:26:04,960
that's not overwritten

795
00:26:02,440 --> 00:26:07,299
okay maybe maybe you'll have luck doing

796
00:26:04,960 --> 00:26:09,100
that maybe not maybe you can store a

797
00:26:07,299 --> 00:26:12,050
whole bunch of copies right repeatedly

798
00:26:09,100 --> 00:26:13,459
and just keep running them in

799
00:26:12,050 --> 00:26:14,870
you know putting them into the kernel

800
00:26:13,460 --> 00:26:15,950
and hoping keeping your fingers crossed

801
00:26:14,870 --> 00:26:17,090
you probably wouldn't do that you

802
00:26:15,950 --> 00:26:18,320
probably use a checksum or something

803
00:26:17,090 --> 00:26:20,600
it'd be a bit more sophisticated but

804
00:26:18,320 --> 00:26:23,750
it's not a very satisfying solution what

805
00:26:20,600 --> 00:26:24,860
can you do if you roll up your sleeves

806
00:26:23,750 --> 00:26:28,130
do a bit of assembly language

807
00:26:24,860 --> 00:26:29,959
programming and write something that's

808
00:26:28,130 --> 00:26:32,090
one kilobyte you can actually do a lot

809
00:26:29,960 --> 00:26:33,560
and so with one kilobyte you get

810
00:26:32,090 --> 00:26:36,560
actually if you have let's say has two

811
00:26:33,560 --> 00:26:38,300
sectors just back up a little bit you're

812
00:26:36,560 --> 00:26:40,730
probably gonna have a lot of single

813
00:26:38,300 --> 00:26:43,550
sector to sector contiguous regions free

814
00:26:40,730 --> 00:26:48,020
lots and lots that's basic laws of

815
00:26:43,550 --> 00:26:49,639
probability okay so you have two sectors

816
00:26:48,020 --> 00:26:51,050
now you can do a lot of two sectors in

817
00:26:49,640 --> 00:26:52,880
assembly language you can scan through

818
00:26:51,050 --> 00:26:54,379
the entire disk recover a whole bunch of

819
00:26:52,880 --> 00:26:56,480
corrupted data do error correction on

820
00:26:54,380 --> 00:26:58,010
that data put it together into a new

821
00:26:56,480 --> 00:26:59,840
executable and run that executable

822
00:26:58,010 --> 00:27:01,340
that's much larger you have a much

823
00:26:59,840 --> 00:27:02,870
larger executable now it can do the same

824
00:27:01,340 --> 00:27:05,120
thing you repeat rinse repeat

825
00:27:02,870 --> 00:27:07,729
you know until you have a huge

826
00:27:05,120 --> 00:27:09,260
executable whatever you want an entire

827
00:27:07,730 --> 00:27:11,690
running system right and so basically

828
00:27:09,260 --> 00:27:14,510
you just do this iteratively and so the

829
00:27:11,690 --> 00:27:17,230
way the boot system works is like this

830
00:27:14,510 --> 00:27:19,820
basically so you have your cover system

831
00:27:17,230 --> 00:27:23,530
let's say you stopped Kubuntu machine is

832
00:27:19,820 --> 00:27:25,610
gonna be using grub you tell grub break

833
00:27:23,530 --> 00:27:27,680
you know so you break internal use of

834
00:27:25,610 --> 00:27:29,379
space from early use of space you copy

835
00:27:27,680 --> 00:27:31,640
over a couple of sectors and the temp FS

836
00:27:29,380 --> 00:27:33,470
you make the second force executable you

837
00:27:31,640 --> 00:27:36,350
run the sector's then you have your

838
00:27:33,470 --> 00:27:38,780
secondary boot strap sorry so you run

839
00:27:36,350 --> 00:27:40,280
those sectors to the sector's extract a

840
00:27:38,780 --> 00:27:43,670
much larger executable from the

841
00:27:40,280 --> 00:27:46,129
underlying disk puts in tempo fess runs

842
00:27:43,670 --> 00:27:50,420
that executable that executable extracts

843
00:27:46,130 --> 00:27:52,040
three things a new kernel a new and it

844
00:27:50,420 --> 00:27:55,100
Ram FS which contains the steganographic

845
00:27:52,040 --> 00:27:57,200
kernel module and some kernel line

846
00:27:55,100 --> 00:27:58,340
parameters of the replacement system it

847
00:27:57,200 --> 00:28:01,130
does a que exact could lose those things

848
00:27:58,340 --> 00:28:03,919
and doesn't reboot and then voila you're

849
00:28:01,130 --> 00:28:06,020
in a new system entirely because the

850
00:28:03,920 --> 00:28:09,860
unit Ram FS has the sting the graphic

851
00:28:06,020 --> 00:28:11,300
kernel module at this point now you can

852
00:28:09,860 --> 00:28:13,399
load everything it can mount the file

853
00:28:11,300 --> 00:28:16,340
systems and you have that's right sure

854
00:28:13,400 --> 00:28:18,580
to put this in another copy of this you

855
00:28:16,340 --> 00:28:18,580
have

856
00:28:18,800 --> 00:28:25,020
this system here so the first part of

857
00:28:22,620 --> 00:28:27,300
the early use of space that sets up this

858
00:28:25,020 --> 00:28:29,070
crypto mapping sets up the Steg mapping

859
00:28:27,300 --> 00:28:31,379
and massive file system and then you

860
00:28:29,070 --> 00:28:36,210
have your hidden OS and that's how this

861
00:28:31,380 --> 00:28:38,820
sorry that's how that's how the system

862
00:28:36,210 --> 00:28:40,560
gets going from a single entry point

863
00:28:38,820 --> 00:28:41,700
this one kilobyte into this entire

864
00:28:40,560 --> 00:28:42,210
running system that's basically the

865
00:28:41,700 --> 00:28:44,730
process

866
00:28:42,210 --> 00:28:54,540
okay so just I'll describe that in some

867
00:28:44,730 --> 00:28:56,130
detail now how that process works but

868
00:28:54,540 --> 00:28:57,840
I'll just back up a little bit just to

869
00:28:56,130 --> 00:28:59,250
get a little bit more clarity on how you

870
00:28:57,840 --> 00:29:02,510
go about installing this and it sort of

871
00:28:59,250 --> 00:29:04,590
gives us a bit of an understanding of

872
00:29:02,510 --> 00:29:06,600
all the things that are in the air all

873
00:29:04,590 --> 00:29:09,120
the balls at the same time so first

874
00:29:06,600 --> 00:29:10,740
thing you do when you install the hidden

875
00:29:09,120 --> 00:29:11,850
system which is what you do before you'd

876
00:29:10,740 --> 00:29:13,050
install the cover system is you

877
00:29:11,850 --> 00:29:16,020
establish your cryptographic mapping

878
00:29:13,050 --> 00:29:18,090
using for example crypt setup using the

879
00:29:16,020 --> 00:29:19,620
hidden key and so once you have that in

880
00:29:18,090 --> 00:29:21,300
place you initialize the entire disk

881
00:29:19,620 --> 00:29:22,800
with you know coding blocks that are

882
00:29:21,300 --> 00:29:24,000
initialized to 0 or take your pick

883
00:29:22,800 --> 00:29:26,100
because it's gonna be overwritten later

884
00:29:24,000 --> 00:29:28,650
on by the hidden cover the hidden OS

885
00:29:26,100 --> 00:29:29,340
anyway once you've done that still with

886
00:29:28,650 --> 00:29:31,080
this you know

887
00:29:29,340 --> 00:29:32,730
cryptographic mapping in place you

888
00:29:31,080 --> 00:29:34,830
overwrite a certain number of sectors

889
00:29:32,730 --> 00:29:35,940
with a secondary bootstrap and you don't

890
00:29:34,830 --> 00:29:37,139
worry about what you'll write because

891
00:29:35,940 --> 00:29:39,600
there's the heavy duty error correction

892
00:29:37,140 --> 00:29:41,160
of play on the read then on top of that

893
00:29:39,600 --> 00:29:43,980
you overwrite everything to the right

894
00:29:41,160 --> 00:29:46,020
with primary bootstrap and again

895
00:29:43,980 --> 00:29:48,390
everything to the right of the blue here

896
00:29:46,020 --> 00:29:49,379
has error correction of some kind so we

897
00:29:48,390 --> 00:29:51,630
don't have to worry about what you're

898
00:29:49,380 --> 00:29:53,610
overwriting when you've done all that

899
00:29:51,630 --> 00:29:55,920
you take down the cryptographic mapping

900
00:29:53,610 --> 00:29:58,439
and you look at the disk and what do you

901
00:29:55,920 --> 00:29:59,670
see just random noise it's ciphertext or

902
00:29:58,440 --> 00:30:01,170
something else or it's just random noise

903
00:29:59,670 --> 00:30:02,160
according to your cover story which is

904
00:30:01,170 --> 00:30:04,590
you know what you've initialized your

905
00:30:02,160 --> 00:30:06,480
disk to at that point you install your

906
00:30:04,590 --> 00:30:07,830
cover system using the cover key we've

907
00:30:06,480 --> 00:30:09,140
wanted as most of this automatically for

908
00:30:07,830 --> 00:30:11,939
example if that's what you want to use

909
00:30:09,140 --> 00:30:13,620
and that's basically it so if you don't

910
00:30:11,940 --> 00:30:15,510
have any of the keys the underlying

911
00:30:13,620 --> 00:30:17,639
block device here for example dev SDA

912
00:30:15,510 --> 00:30:21,150
will just look like randomness if you

913
00:30:17,640 --> 00:30:23,760
have one of the keys let's say the cover

914
00:30:21,150 --> 00:30:25,110
key everything green will be

915
00:30:23,760 --> 00:30:26,370
intelligible to you that corresponds to

916
00:30:25,110 --> 00:30:28,199
the cover system everything else will

917
00:30:26,370 --> 00:30:30,418
look like random noise if you have both

918
00:30:28,200 --> 00:30:32,489
keys then every

919
00:30:30,419 --> 00:30:33,840
we'll have some semantic meaning to it

920
00:30:32,489 --> 00:30:36,389
right so the blue sectors will

921
00:30:33,840 --> 00:30:38,970
correspond to the primary bits trap the

922
00:30:36,389 --> 00:30:41,479
green to cover the red to the underlying

923
00:30:38,970 --> 00:30:45,480
divided like the hidden system data and

924
00:30:41,480 --> 00:30:47,399
so forth and that's basically that's

925
00:30:45,480 --> 00:30:52,619
basically it and so the booting process

926
00:30:47,399 --> 00:30:56,219
now let's describe let's figure out or

927
00:30:52,619 --> 00:30:57,629
so let's examine how that works so the

928
00:30:56,220 --> 00:30:59,190
very first thing you need to do is you

929
00:30:57,629 --> 00:31:04,080
need to tell Grubb the passive command

930
00:30:59,190 --> 00:31:05,249
line parameter to the kernel let's say

931
00:31:04,080 --> 00:31:06,539
you want to break in there lisa says

932
00:31:05,249 --> 00:31:09,389
break or break it goes pre mount or

933
00:31:06,539 --> 00:31:10,889
something then you punch it internal

934
00:31:09,389 --> 00:31:12,149
user space and then you just use crypt

935
00:31:10,889 --> 00:31:14,399
setup because you know your cover system

936
00:31:12,149 --> 00:31:15,959
has dissin corruption the default one

937
00:31:14,399 --> 00:31:19,619
for Binta is going to be could set up DM

938
00:31:15,960 --> 00:31:21,509
crypt and the primary bootstrap is gonna

939
00:31:19,619 --> 00:31:23,129
be located at some multiple of a power

940
00:31:21,509 --> 00:31:24,989
of 10 just because it's easy for the

941
00:31:23,129 --> 00:31:26,459
human to remember right and so the human

942
00:31:24,989 --> 00:31:29,429
sets up that crypto mapping for two

943
00:31:26,460 --> 00:31:31,379
sectors so for example Def mapper crypts

944
00:31:29,429 --> 00:31:34,950
and copies over those two sectors to

945
00:31:31,379 --> 00:31:36,988
temp FS makes those two sectors

946
00:31:34,950 --> 00:31:39,960
executable and then runs the two sectors

947
00:31:36,989 --> 00:31:41,519
and at that point they're done and so

948
00:31:39,960 --> 00:31:42,899
there's a chance that will fail because

949
00:31:41,519 --> 00:31:44,609
those two sectors well been overwritten

950
00:31:42,899 --> 00:31:46,439
by the cover system that's fine because

951
00:31:44,609 --> 00:31:49,619
interest instead of 10 million try 20

952
00:31:46,440 --> 00:31:51,929
million try 30 million and so forth but

953
00:31:49,619 --> 00:31:53,070
you know in practice I mean you twice is

954
00:31:51,929 --> 00:31:54,720
probably the most you ever gonna have to

955
00:31:53,070 --> 00:31:56,279
do and every now and blue moon you might

956
00:31:54,720 --> 00:31:58,559
have to switch up which sector Z is but

957
00:31:56,279 --> 00:32:00,679
that's easy to do ok so now you have

958
00:31:58,559 --> 00:32:02,639
your primary bootstrap running ok great

959
00:32:00,679 --> 00:32:06,330
what does it did first thing it does is

960
00:32:02,639 --> 00:32:07,889
takes down the cryptographic mapping DM

961
00:32:06,330 --> 00:32:12,389
crypt it reestablishes basically the

962
00:32:07,889 --> 00:32:13,949
same mapping but this time instead of

963
00:32:12,389 --> 00:32:16,289
just the two sectors which the user had

964
00:32:13,950 --> 00:32:18,629
done the entire disk and it does that so

965
00:32:16,289 --> 00:32:21,090
that it can scan the entire disk looking

966
00:32:18,629 --> 00:32:23,428
for shards of a secondary executable and

967
00:32:21,090 --> 00:32:25,049
so when you installed the secondary

968
00:32:23,429 --> 00:32:26,489
bootstrap basically you take a large

969
00:32:25,049 --> 00:32:28,879
executable you chop it up in a whole

970
00:32:26,489 --> 00:32:31,220
bunch of little shards you add

971
00:32:28,880 --> 00:32:33,470
magic number T shard and then you spray

972
00:32:31,220 --> 00:32:34,519
the shards across the slack space and

973
00:32:33,470 --> 00:32:35,720
you repeat a few times so that each

974
00:32:34,519 --> 00:32:37,279
shard is replicated a number of times

975
00:32:35,720 --> 00:32:40,130
you do it sort of pseudo randomly so

976
00:32:37,279 --> 00:32:41,659
that there's no chance that the spatial

977
00:32:40,130 --> 00:32:42,980
distribution of the over I process

978
00:32:41,659 --> 00:32:44,389
corresponds with how you distributed

979
00:32:42,980 --> 00:32:45,860
your shards across the disks they have

980
00:32:44,389 --> 00:32:47,360
higher guarantee that do you have data

981
00:32:45,860 --> 00:32:49,370
integrity and you going to be able to

982
00:32:47,360 --> 00:32:52,459
reconstruct an executable from the

983
00:32:49,370 --> 00:32:53,600
shards so the primary bootstrap scans

984
00:32:52,460 --> 00:32:55,490
the disk looks for all the shards

985
00:32:53,600 --> 00:32:57,230
reassembles the shards Chuck's out the

986
00:32:55,490 --> 00:32:59,779
magic number and then you have your

987
00:32:57,230 --> 00:33:02,210
secondary bootstrap and so then just as

988
00:32:59,779 --> 00:33:03,379
an exec the system call and it runs a

989
00:33:02,210 --> 00:33:05,480
secondary bootstrap so what is the

990
00:33:03,379 --> 00:33:07,699
secondary bootstrap do it's a much

991
00:33:05,480 --> 00:33:09,080
larger program it contains fairly heavy

992
00:33:07,700 --> 00:33:11,899
duty error correction actually emulates

993
00:33:09,080 --> 00:33:14,090
the kernel module in userspace but

994
00:33:11,899 --> 00:33:16,879
unlike the kernel module which presents

995
00:33:14,090 --> 00:33:18,049
the OS only this a block device here of

996
00:33:16,879 --> 00:33:19,789
a certain number of sectors there's some

997
00:33:18,049 --> 00:33:20,929
additional reserved sectors here that

998
00:33:19,789 --> 00:33:23,480
are accessible from the user space

999
00:33:20,929 --> 00:33:27,830
utility or user space library which this

1000
00:33:23,480 --> 00:33:29,840
links to in those sectors you have the

1001
00:33:27,830 --> 00:33:31,668
replacement Colonel you have variants

1002
00:33:29,840 --> 00:33:33,529
kernel parameters it's a special video

1003
00:33:31,669 --> 00:33:36,980
card for example and then you have your

1004
00:33:33,529 --> 00:33:39,200
NIT RAM FS and it contains the usual

1005
00:33:36,980 --> 00:33:41,559
suspects could set up LVM however you

1006
00:33:39,200 --> 00:33:45,289
configured your system and one more

1007
00:33:41,559 --> 00:33:47,389
kernel module here stag del cayo and so

1008
00:33:45,289 --> 00:33:49,158
at that point what it does is it has all

1009
00:33:47,389 --> 00:33:52,399
the necessary ingredients it does Kay

1010
00:33:49,159 --> 00:33:55,639
exec load or key exec whatever

1011
00:33:52,399 --> 00:33:59,090
take your pick some implementation

1012
00:33:55,639 --> 00:34:02,000
details and at that point it reboots

1013
00:33:59,090 --> 00:34:03,918
into the the new system and that's

1014
00:34:02,000 --> 00:34:05,960
basically how it works and so when the

1015
00:34:03,919 --> 00:34:08,270
new system is booting the first thing it

1016
00:34:05,960 --> 00:34:10,280
does as any cryptogram in the system

1017
00:34:08,270 --> 00:34:11,629
with disk encryption does is it sets up

1018
00:34:10,280 --> 00:34:13,639
your cryptographic mappings use encrypt

1019
00:34:11,629 --> 00:34:14,989
setup for example then it does if you

1020
00:34:13,639 --> 00:34:17,419
remember on top of the crypto mapping

1021
00:34:14,989 --> 00:34:19,479
there's a stack mapping it does that by

1022
00:34:17,418 --> 00:34:22,040
using an int mod for example stack Tokyo

1023
00:34:19,480 --> 00:34:23,510
and when you have it up and running

1024
00:34:22,040 --> 00:34:28,040
system what you'll end up with something

1025
00:34:23,510 --> 00:34:31,129
is something that associates an SEF step

1026
00:34:28,040 --> 00:34:33,800
with a slash with devstack for example

1027
00:34:31,129 --> 00:34:35,509
and so just wrapping up I mean the

1028
00:34:33,800 --> 00:34:36,740
primary bootstrap is really small so

1029
00:34:35,510 --> 00:34:39,800
it's not going to be written probably

1030
00:34:36,739 --> 00:34:41,270
the secondary bootstrap is much larger

1031
00:34:39,800 --> 00:34:41,600
but that's okay because it's recovered

1032
00:34:41,270 --> 00:34:45,320
three hour

1033
00:34:41,600 --> 00:34:46,819
correction so final points um it spanned

1034
00:34:45,320 --> 00:34:49,910
a number the developments and a number

1035
00:34:46,820 --> 00:34:51,830
of different environments so you know C

1036
00:34:49,909 --> 00:34:55,699
C++ assembly required a whole bunch of

1037
00:34:51,830 --> 00:34:55,909
different programming approaches pardon

1038
00:34:55,699 --> 00:34:59,109
me

1039
00:34:55,909 --> 00:35:01,100
they're about 30,000 lines in total and

1040
00:34:59,110 --> 00:35:08,360
we've done fairly extensive validation

1041
00:35:01,100 --> 00:35:10,520
for you know integrity of the cover

1042
00:35:08,360 --> 00:35:11,840
system to make sure that you know

1043
00:35:10,520 --> 00:35:14,750
forensically the the hidden system

1044
00:35:11,840 --> 00:35:17,330
doesn't damage the cover system at all

1045
00:35:14,750 --> 00:35:18,770
it doesn't touch it whatsoever test it

1046
00:35:17,330 --> 00:35:22,100
on various combinations of arch and a

1047
00:35:18,770 --> 00:35:24,920
blunt to and so presumably the support

1048
00:35:22,100 --> 00:35:26,900
for any distro take your pick and we

1049
00:35:24,920 --> 00:35:30,170
confirmed that you can run VirtualBox on

1050
00:35:26,900 --> 00:35:34,430
top of hidden system and so you can

1051
00:35:30,170 --> 00:35:36,050
actually put you know in VirtualBox

1052
00:35:34,430 --> 00:35:37,399
input windows so if you want to have if

1053
00:35:36,050 --> 00:35:39,080
you need some windows utility that you

1054
00:35:37,400 --> 00:35:40,160
need to run that's great you just you

1055
00:35:39,080 --> 00:35:43,910
know put it in VirtualBox and you're

1056
00:35:40,160 --> 00:35:47,390
good to go okay so there's a couple of

1057
00:35:43,910 --> 00:35:48,649
issues so if we're gonna be using this

1058
00:35:47,390 --> 00:35:50,080
in the fields there's a couple things

1059
00:35:48,650 --> 00:35:53,510
you need to be aware of the first is

1060
00:35:50,080 --> 00:35:54,590
multi snapshot imaging and the various

1061
00:35:53,510 --> 00:35:56,180
countermeasures you can take to that so

1062
00:35:54,590 --> 00:35:57,860
that's basically where your adversity

1063
00:35:56,180 --> 00:36:00,500
against a hold of your computer images

1064
00:35:57,860 --> 00:36:02,030
the slack space and then images the

1065
00:36:00,500 --> 00:36:03,770
slack space again at a later point and

1066
00:36:02,030 --> 00:36:05,300
somewhere in between Eve use the hidden

1067
00:36:03,770 --> 00:36:08,180
system and the slack space has changed

1068
00:36:05,300 --> 00:36:09,350
reflecting the use any either one of

1069
00:36:08,180 --> 00:36:10,310
those alone is not gonna be terribly

1070
00:36:09,350 --> 00:36:12,380
incriminating but if you look at the

1071
00:36:10,310 --> 00:36:14,180
differential that might be an issue so

1072
00:36:12,380 --> 00:36:15,320
some countermeasures you can see so

1073
00:36:14,180 --> 00:36:17,330
using the hidden system after the first

1074
00:36:15,320 --> 00:36:18,980
imaging you can reinstall the entire

1075
00:36:17,330 --> 00:36:22,190
system if you're allowed to by the cover

1076
00:36:18,980 --> 00:36:25,880
story if it's plausible but there's no

1077
00:36:22,190 --> 00:36:26,990
great way around it so it you get really

1078
00:36:25,880 --> 00:36:29,240
good security as long as you're not

1079
00:36:26,990 --> 00:36:32,180
imaged twice with having using having

1080
00:36:29,240 --> 00:36:37,520
used a hidden system in between okay

1081
00:36:32,180 --> 00:36:41,899
this is more significant issue concerns

1082
00:36:37,520 --> 00:36:43,820
specifically solved state drives and so

1083
00:36:41,900 --> 00:36:44,900
you know with your conventional magnetic

1084
00:36:43,820 --> 00:36:46,910
hard drives what you have is you have a

1085
00:36:44,900 --> 00:36:48,800
fairly static mapping between a logical

1086
00:36:46,910 --> 00:36:50,210
sector and the underlying region of the

1087
00:36:48,800 --> 00:36:53,420
platter on which the sector is actually

1088
00:36:50,210 --> 00:36:54,410
represented with flash the nature of the

1089
00:36:53,420 --> 00:36:55,670
medium demands the

1090
00:36:54,410 --> 00:36:59,299
you know have it constantly evolving

1091
00:36:55,670 --> 00:37:01,160
mapping and so that mapping between the

1092
00:36:59,299 --> 00:37:02,359
logical sector and the actual physical

1093
00:37:01,160 --> 00:37:03,500
medium is maintained by the flash

1094
00:37:02,359 --> 00:37:05,839
translation layer now there's a number

1095
00:37:03,500 --> 00:37:08,750
of other things the FTL does it does

1096
00:37:05,839 --> 00:37:10,609
number of you know record-keeping it

1097
00:37:08,750 --> 00:37:13,460
does some stats for errors low-level

1098
00:37:10,609 --> 00:37:15,259
errors and stuff like that and so it's

1099
00:37:13,460 --> 00:37:16,789
conceivable that if an adversary has

1100
00:37:15,260 --> 00:37:18,799
access to the flash drive they can do

1101
00:37:16,789 --> 00:37:22,430
some analysis on the firmware the data

1102
00:37:18,799 --> 00:37:25,819
that's used by the flash drive to figure

1103
00:37:22,430 --> 00:37:27,529
out what's going on there's a second

1104
00:37:25,819 --> 00:37:29,960
issue which is that what I've described

1105
00:37:27,530 --> 00:37:32,180
so far would be for a system where you

1106
00:37:29,960 --> 00:37:33,710
can put some thing in slack space not

1107
00:37:32,180 --> 00:37:35,960
having overwritten by for example the

1108
00:37:33,710 --> 00:37:38,000
trim command and so the issue is that we

1109
00:37:35,960 --> 00:37:39,530
have like a standard the blue intro

1110
00:37:38,000 --> 00:37:42,619
installation for example I mean it's

1111
00:37:39,530 --> 00:37:45,349
going to have a cron job that runs and

1112
00:37:42,619 --> 00:37:47,450
run trim every week or so right and it's

1113
00:37:45,349 --> 00:37:49,329
going to set up the cryptographic

1114
00:37:47,450 --> 00:37:52,129
mapping where passes through discard

1115
00:37:49,329 --> 00:37:55,900
commands and so this has been an issue

1116
00:37:52,130 --> 00:37:58,369
and so what we're able to find is that

1117
00:37:55,900 --> 00:37:59,990
by defaults at least of one - and I

1118
00:37:58,369 --> 00:38:05,270
checked just before I left for London

1119
00:37:59,990 --> 00:38:07,939
again doesn't mount turn swap on with

1120
00:38:05,270 --> 00:38:10,130
the discard command so you could

1121
00:38:07,940 --> 00:38:11,960
conceivably store something in swap and

1122
00:38:10,130 --> 00:38:16,190
not only conceivably actually we tried

1123
00:38:11,960 --> 00:38:17,630
this out and so if you need to use let's

1124
00:38:16,190 --> 00:38:18,920
say for your cover story or just because

1125
00:38:17,630 --> 00:38:21,200
you like the performance gains if you

1126
00:38:18,920 --> 00:38:23,420
need to use an SSD that's fine put it

1127
00:38:21,200 --> 00:38:25,669
away and swap use the defaults or sorry

1128
00:38:23,420 --> 00:38:28,579
use a common Linux distribution and you

1129
00:38:25,670 --> 00:38:30,260
should be ok the larger your main memory

1130
00:38:28,579 --> 00:38:31,640
typically the larger the default swap

1131
00:38:30,260 --> 00:38:32,839
size is going to be which also means

1132
00:38:31,640 --> 00:38:33,950
you're less likely to use swap in the

1133
00:38:32,839 --> 00:38:35,589
first place that's actually a solution

1134
00:38:33,950 --> 00:38:37,819
that works surprisingly well

1135
00:38:35,589 --> 00:38:39,049
that being said from a friends at

1136
00:38:37,819 --> 00:38:43,430
perspective the best thing you can do is

1137
00:38:39,049 --> 00:38:51,060
use the magnetic drive returning now to

1138
00:38:43,430 --> 00:38:54,450
SSD firmware so

1139
00:38:51,060 --> 00:38:56,820
the analysis of SSD firmware the

1140
00:38:54,450 --> 00:39:01,799
metadata on the the FTL excessive of the

1141
00:38:56,820 --> 00:39:02,910
FTL it might still be an issue there's a

1142
00:39:01,800 --> 00:39:05,910
couple things you can do so if you have

1143
00:39:02,910 --> 00:39:07,799
fairly deep pockets you could overwrite

1144
00:39:05,910 --> 00:39:09,629
you could come up with utility that

1145
00:39:07,800 --> 00:39:10,920
overwrites that data with something that

1146
00:39:09,630 --> 00:39:15,660
covers your tracks that's one option

1147
00:39:10,920 --> 00:39:17,040
another option is to well that's

1148
00:39:15,660 --> 00:39:19,410
basically what you can do the other

1149
00:39:17,040 --> 00:39:21,450
option is that's you can take advantage

1150
00:39:19,410 --> 00:39:25,049
of the fact that usually the FTL is

1151
00:39:21,450 --> 00:39:26,370
fairly vendor specific and you can take

1152
00:39:25,050 --> 00:39:27,870
advantage of the fact that to actually

1153
00:39:26,370 --> 00:39:29,390
do anything without data it probably

1154
00:39:27,870 --> 00:39:31,710
requires some reverse engineering and

1155
00:39:29,390 --> 00:39:33,839
probably requires you know fairly deep

1156
00:39:31,710 --> 00:39:35,130
pockets and time to actually be able to

1157
00:39:33,840 --> 00:39:36,330
come up with some solution that was able

1158
00:39:35,130 --> 00:39:37,590
to detect something so you can use that

1159
00:39:36,330 --> 00:39:41,340
to your advantage if your adversary is

1160
00:39:37,590 --> 00:39:43,320
not that sophisticated okay so what does

1161
00:39:41,340 --> 00:39:45,060
it takeaways here

1162
00:39:43,320 --> 00:39:48,210
steganography software can recursively

1163
00:39:45,060 --> 00:39:49,140
hide itself so what I submit to you is

1164
00:39:48,210 --> 00:39:51,800
that one of the problems the

1165
00:39:49,140 --> 00:39:53,819
steganography right now is that you have

1166
00:39:51,800 --> 00:39:55,830
you know there's the expression that is

1167
00:39:53,820 --> 00:39:57,660
not the crime that does you in but it's

1168
00:39:55,830 --> 00:39:59,610
you know covering up your tracks right

1169
00:39:57,660 --> 00:40:00,810
and so that applies to second ography as

1170
00:39:59,610 --> 00:40:01,860
well you have really good options now

1171
00:40:00,810 --> 00:40:04,200
where you can secrete things away

1172
00:40:01,860 --> 00:40:06,210
securely but if in the field you need to

1173
00:40:04,200 --> 00:40:07,500
access that data and you're in hostile

1174
00:40:06,210 --> 00:40:09,360
environments your options are fairly

1175
00:40:07,500 --> 00:40:10,680
limited and if you carry things around

1176
00:40:09,360 --> 00:40:12,570
with you or if you download things

1177
00:40:10,680 --> 00:40:16,080
through insecure connections you're

1178
00:40:12,570 --> 00:40:18,510
going to give away what you're doing so

1179
00:40:16,080 --> 00:40:20,250
at this point here we have a system that

1180
00:40:18,510 --> 00:40:21,900
allows you to use steganography in the

1181
00:40:20,250 --> 00:40:23,430
fields with having a system that has

1182
00:40:21,900 --> 00:40:27,420
absolutely no strange properties

1183
00:40:23,430 --> 00:40:28,710
whatsoever it defaults Linux system so

1184
00:40:27,420 --> 00:40:30,030
then there's a second here that here

1185
00:40:28,710 --> 00:40:31,230
which I dubbed a Russian adult

1186
00:40:30,030 --> 00:40:32,820
steganography which is let's say you

1187
00:40:31,230 --> 00:40:35,850
need to use an existing stack tool for

1188
00:40:32,820 --> 00:40:38,100
instance you need to use an 802 911

1189
00:40:35,850 --> 00:40:39,360
wireless stick tool and it's

1190
00:40:38,100 --> 00:40:41,220
incriminating and you don't want to just

1191
00:40:39,360 --> 00:40:43,080
carry around that tool in your pocket on

1192
00:40:41,220 --> 00:40:46,649
your computer you can secrete it away

1193
00:40:43,080 --> 00:40:48,060
now in this hidden system and the third

1194
00:40:46,650 --> 00:40:49,470
one here is doesn't really follow from

1195
00:40:48,060 --> 00:40:52,529
where I discussed it's more of an FYI

1196
00:40:49,470 --> 00:40:55,140
which is that open channel SSD is going

1197
00:40:52,530 --> 00:40:59,500
forwards will remove a lot of like the

1198
00:40:55,140 --> 00:41:02,379
firmware layers between the kernel and

1199
00:40:59,500 --> 00:41:04,060
the underlying hardware and so having

1200
00:41:02,380 --> 00:41:07,140
more direct access to that underlying

1201
00:41:04,060 --> 00:41:08,920
hardware is going to be really useful

1202
00:41:07,140 --> 00:41:10,509
going forward I think it's going to open

1203
00:41:08,920 --> 00:41:11,790
up a lot of avenues for new forms of

1204
00:41:10,510 --> 00:41:14,140
steganography

1205
00:41:11,790 --> 00:41:16,180
so the overall conclusion then so

1206
00:41:14,140 --> 00:41:18,819
insight is steganography use may go

1207
00:41:16,180 --> 00:41:21,879
darker and so what does that mean so if

1208
00:41:18,820 --> 00:41:23,260
you're journalists an NGO or you task

1209
00:41:21,880 --> 00:41:25,000
with organizational security like here

1210
00:41:23,260 --> 00:41:27,160
is the law enforcement elegance it might

1211
00:41:25,000 --> 00:41:29,760
affect you in different way so it might

1212
00:41:27,160 --> 00:41:32,830
give you new tools to make your

1213
00:41:29,760 --> 00:41:34,630
operations more secure more robust

1214
00:41:32,830 --> 00:41:36,850
against you know the physical security

1215
00:41:34,630 --> 00:41:38,170
threat on the other hand if you're an

1216
00:41:36,850 --> 00:41:39,759
ISO and you need to make sure that

1217
00:41:38,170 --> 00:41:41,140
people are not exfiltrating sensitive

1218
00:41:39,760 --> 00:41:44,320
information from your organization that

1219
00:41:41,140 --> 00:41:46,960
might be an issue as well so that is

1220
00:41:44,320 --> 00:41:48,580
basically it so I just want to show you

1221
00:41:46,960 --> 00:41:52,330
quickly this presentation is actually

1222
00:41:48,580 --> 00:42:04,200
running on a hidden system so this here

1223
00:41:52,330 --> 00:42:08,259
I'll just show you briefly so thank you

1224
00:42:04,200 --> 00:42:10,089
okay what do we have so there's

1225
00:42:08,260 --> 00:42:13,120
obviously the cover system has the GPT

1226
00:42:10,090 --> 00:42:15,820
table so you know you do an LS blk UCSD

1227
00:42:13,120 --> 00:42:19,830
Asda one SD a to SDA one is for grub

1228
00:42:15,820 --> 00:42:24,190
sorry uh yes correct

1229
00:42:19,830 --> 00:42:25,480
okay now you have a reinterpretation of

1230
00:42:24,190 --> 00:42:27,580
SDA with respect to this cryptographic

1231
00:42:25,480 --> 00:42:29,200
mapping here by crypt and it doesn't

1232
00:42:27,580 --> 00:42:31,900
really show you here but stag here is

1233
00:42:29,200 --> 00:42:33,310
derived from crypt and stag here is just

1234
00:42:31,900 --> 00:42:36,850
another block device I partitioned it

1235
00:42:33,310 --> 00:42:38,290
into a 16 gigabyte swap partition and

1236
00:42:36,850 --> 00:42:39,520
like the balance here is ninety

1237
00:42:38,290 --> 00:42:42,880
gigabytes because this is fairly small

1238
00:42:39,520 --> 00:42:48,930
SSD is my root directory for everything

1239
00:42:42,880 --> 00:42:48,930
else so what can you do let's see

1240
00:42:55,270 --> 00:42:59,119
let's say we were on a run tour because

1241
00:42:57,680 --> 00:43:07,940
we don't necessarily want to have tour

1242
00:42:59,119 --> 00:43:09,650
on our computer so there you have to are

1243
00:43:07,940 --> 00:43:19,819
not gonna bore you with my browsing

1244
00:43:09,650 --> 00:43:22,250
habits okay you might want to have some

1245
00:43:19,819 --> 00:43:23,839
insight for example how much of the

1246
00:43:22,250 --> 00:43:27,589
system is damaged so if you overwrite

1247
00:43:23,839 --> 00:43:29,089
everything on the disk with the cover

1248
00:43:27,589 --> 00:43:30,980
system obviously the hidden system is

1249
00:43:29,089 --> 00:43:31,910
going to be damaged beyond repair but

1250
00:43:30,980 --> 00:43:34,460
the nice thing about error correction

1251
00:43:31,910 --> 00:43:35,990
about information theory is that if you

1252
00:43:34,460 --> 00:43:36,950
do or if you have a good air crashing

1253
00:43:35,990 --> 00:43:38,328
code do you have something like the

1254
00:43:36,950 --> 00:43:40,520
cliff effect which is up to a certain

1255
00:43:38,329 --> 00:43:41,869
point of errors you get or up to a

1256
00:43:40,520 --> 00:43:43,359
certain point a certain amount of like

1257
00:43:41,869 --> 00:43:46,400
channel noise you get like perfect

1258
00:43:43,359 --> 00:43:47,720
recovery of your original data and so

1259
00:43:46,400 --> 00:43:50,000
you might want to know how close you are

1260
00:43:47,720 --> 00:43:51,078
to that cliff like where if you keep

1261
00:43:50,000 --> 00:43:52,520
using the cover system if you keep

1262
00:43:51,079 --> 00:43:54,440
downloading you know movies or whatever

1263
00:43:52,520 --> 00:43:57,470
terabytes you're going to run into

1264
00:43:54,440 --> 00:44:04,339
difficulties so I wrote a utility for

1265
00:43:57,470 --> 00:44:09,470
that so this here is a system health

1266
00:44:04,339 --> 00:44:11,299
utility so what it shows you is the the

1267
00:44:09,470 --> 00:44:12,500
first this here says everything is okay

1268
00:44:11,299 --> 00:44:14,779
don't worry about it you can close the

1269
00:44:12,500 --> 00:44:16,670
window now this here is a hidden system

1270
00:44:14,779 --> 00:44:17,990
data so as I said as you use the cover

1271
00:44:16,670 --> 00:44:19,250
system more and more you overwrite more

1272
00:44:17,990 --> 00:44:21,049
and more of the slack space at some

1273
00:44:19,250 --> 00:44:23,510
point this needle here will go into the

1274
00:44:21,049 --> 00:44:25,099
read and that says okay buddy be careful

1275
00:44:23,510 --> 00:44:26,270
because if you start using that if you

1276
00:44:25,099 --> 00:44:28,130
keep using the covers that's not this

1277
00:44:26,270 --> 00:44:29,779
rate you're gonna irretrievably damaged

1278
00:44:28,130 --> 00:44:32,450
your hidden system data but up to that

1279
00:44:29,779 --> 00:44:34,400
point you're fine then your entry points

1280
00:44:32,450 --> 00:44:35,538
here so as I said you know you to get

1281
00:44:34,400 --> 00:44:36,890
into the system you copy over to

1282
00:44:35,539 --> 00:44:39,230
secretary so you make it like some power

1283
00:44:36,890 --> 00:44:40,700
of 10 or whatever so you have like 10

1284
00:44:39,230 --> 00:44:41,420
million 20 million 30 million here so

1285
00:44:40,700 --> 00:44:42,919
these are the ones that are still

1286
00:44:41,420 --> 00:44:44,150
surviving it doesn't analysis the disk

1287
00:44:42,920 --> 00:44:46,069
and says ok you can use any one of these

1288
00:44:44,150 --> 00:44:47,660
so every now and then you should open up

1289
00:44:46,069 --> 00:44:49,160
this utility and just memorize a few of

1290
00:44:47,660 --> 00:44:52,399
these offsets here so they can boot into

1291
00:44:49,160 --> 00:44:53,058
the system and then you have your

1292
00:44:52,400 --> 00:44:55,250
bootloader

1293
00:44:53,059 --> 00:44:57,520
oh so this is cut off the screen here is

1294
00:44:55,250 --> 00:44:59,510
a bit different from my lab

1295
00:44:57,520 --> 00:45:01,369
that's basically it so you have a

1296
00:44:59,510 --> 00:45:02,690
utility that lets you gain insight into

1297
00:45:01,369 --> 00:45:03,980
the health of the system so you're never

1298
00:45:02,690 --> 00:45:05,720
going to be you know caught by surprise

1299
00:45:03,980 --> 00:45:08,060
that you no use of your cover system has

1300
00:45:05,720 --> 00:45:12,200
somehow got irrevocably damaged your

1301
00:45:08,060 --> 00:45:14,869
date on the hidden system and so with

1302
00:45:12,200 --> 00:45:16,250
that that's my presentation I'd be happy

1303
00:45:14,869 --> 00:45:18,380
to take any questions from you and by

1304
00:45:16,250 --> 00:45:21,589
all means over the next you know day or

1305
00:45:18,380 --> 00:45:22,970
so feel free to find me and I'd be happy

1306
00:45:21,589 --> 00:45:24,080
to talk about any of this especially the

1307
00:45:22,970 --> 00:45:26,629
slides I skipped over which I'm

1308
00:45:24,080 --> 00:45:28,190
fortunate I didn't have time for you can

1309
00:45:26,630 --> 00:45:30,280
also email me at a later point and I'd

1310
00:45:28,190 --> 00:45:32,390
be happy to pick up some correspondence

1311
00:45:30,280 --> 00:45:33,980
with you so that I'll take questions

1312
00:45:32,390 --> 00:45:36,240
from the audience thank you very much

1313
00:45:33,980 --> 00:45:39,320
for your kind attention

1314
00:45:36,240 --> 00:45:39,319
[Applause]

1315
00:45:41,560 --> 00:45:44,880
[Applause]

1316
00:45:51,320 --> 00:45:58,400
hello interesting presentation and my

1317
00:45:54,710 --> 00:46:01,400
question is DM crypt is a integrated in

1318
00:45:58,400 --> 00:46:03,140
standard Linux distributions do you

1319
00:46:01,400 --> 00:46:07,220
think for your technologies this could

1320
00:46:03,140 --> 00:46:09,170
work - oh that's a very good question so

1321
00:46:07,220 --> 00:46:11,120
the question is could you modify for

1322
00:46:09,170 --> 00:46:15,980
example crypt setup so some of this

1323
00:46:11,120 --> 00:46:19,580
early user space stuff is automated if I

1324
00:46:15,980 --> 00:46:21,620
understand correctly yes okay so the

1325
00:46:19,580 --> 00:46:23,090
question is what I described in one of

1326
00:46:21,620 --> 00:46:24,650
the slides is how you get into the

1327
00:46:23,090 --> 00:46:26,540
system in the first place which is you

1328
00:46:24,650 --> 00:46:27,980
it's it's a little bit of a hack it's

1329
00:46:26,540 --> 00:46:29,330
not very it has like 30 seconds of the

1330
00:46:27,980 --> 00:46:31,340
boot process but it's a bit of an

1331
00:46:29,330 --> 00:46:33,740
inconvenience and so the question is

1332
00:46:31,340 --> 00:46:35,090
that breaking it early use of space

1333
00:46:33,740 --> 00:46:37,100
copying over the sectors you know

1334
00:46:35,090 --> 00:46:39,320
running them can that be put into Crypt

1335
00:46:37,100 --> 00:46:42,080
setup the answer is absolutely yes if

1336
00:46:39,320 --> 00:46:43,580
there's will to do that they're arguably

1337
00:46:42,080 --> 00:46:46,910
that would be a very good direction for

1338
00:46:43,580 --> 00:46:48,350
legs to go in that need to put plausible

1339
00:46:46,910 --> 00:46:50,690
deniability into everybody's machine

1340
00:46:48,350 --> 00:46:51,920
that's of course ideal so if there is a

1341
00:46:50,690 --> 00:46:58,330
buy-in for that that'd be absolutely

1342
00:46:51,920 --> 00:46:58,330
fabulous there's one of the back there

1343
00:47:07,660 --> 00:47:17,629
for a long-term viability of the system

1344
00:47:12,319 --> 00:47:20,150
do there exist any tools that one could

1345
00:47:17,630 --> 00:47:23,450
use on the cover system that would like

1346
00:47:20,150 --> 00:47:26,780
to reclaim deleted space if you're

1347
00:47:23,450 --> 00:47:31,970
worried about using up all of the

1348
00:47:26,780 --> 00:47:34,040
entropy in your hidden system yeah

1349
00:47:31,970 --> 00:47:35,779
there's a good question as well in

1350
00:47:34,040 --> 00:47:39,290
principle one should be able to for

1351
00:47:35,780 --> 00:47:41,290
example deleted files do something with

1352
00:47:39,290 --> 00:47:44,270
them as they can reclaim the the space

1353
00:47:41,290 --> 00:47:45,800
from a strictly forensic perspective I

1354
00:47:44,270 --> 00:47:50,450
find that a little bit problematic in

1355
00:47:45,800 --> 00:47:52,730
that if you're using custom tool to to

1356
00:47:50,450 --> 00:47:54,290
do that that might look a bit fishy like

1357
00:47:52,730 --> 00:47:57,920
the the goal from the outset in

1358
00:47:54,290 --> 00:47:59,990
designing the system is removing the

1359
00:47:57,920 --> 00:48:01,790
necessity to do anything strange on the

1360
00:47:59,990 --> 00:48:03,169
cover system whatsoever and so in

1361
00:48:01,790 --> 00:48:04,819
principle yes you could actually recover

1362
00:48:03,170 --> 00:48:09,550
a disk space but the question is does

1363
00:48:04,819 --> 00:48:09,550
that somehow undermined your cover story

1364
00:48:20,310 --> 00:48:25,710
hi thank you for the percentage so how

1365
00:48:22,560 --> 00:48:29,430
is to configure for non-techies for

1366
00:48:25,710 --> 00:48:33,630
journalist or for NGO people this is a

1367
00:48:29,430 --> 00:48:34,890
good question so for the moment the

1368
00:48:33,630 --> 00:48:39,720
configuration of a system is fairly

1369
00:48:34,890 --> 00:48:41,879
technically involved and like even when

1370
00:48:39,720 --> 00:48:43,230
I put together new system I have a check

1371
00:48:41,880 --> 00:48:46,590
list you know like pilots have because

1372
00:48:43,230 --> 00:48:48,110
it's it's a it's a bit of a mess what

1373
00:48:46,590 --> 00:48:50,430
I'll say is this though

1374
00:48:48,110 --> 00:48:52,140
but once the system is installed it's

1375
00:48:50,430 --> 00:48:53,700
very easy to use so it's very user

1376
00:48:52,140 --> 00:48:57,420
friendly the installation is a bit

1377
00:48:53,700 --> 00:48:59,189
difficult to do if you have standard

1378
00:48:57,420 --> 00:49:00,900
hardware you can do what's fairly

1379
00:48:59,190 --> 00:49:02,160
customer NIT which is you know have

1380
00:49:00,900 --> 00:49:03,300
maybe an image or something like that

1381
00:49:02,160 --> 00:49:04,859
I'd have to give them a bit more thought

1382
00:49:03,300 --> 00:49:07,890
to make sure that there's no forensic

1383
00:49:04,860 --> 00:49:11,250
implications there but the gist of it is

1384
00:49:07,890 --> 00:49:12,480
if you have a standard if you have

1385
00:49:11,250 --> 00:49:14,070
standard hardware you should be able to

1386
00:49:12,480 --> 00:49:15,090
automate the process but a lot of it has

1387
00:49:14,070 --> 00:49:18,020
to do with the fact that you know

1388
00:49:15,090 --> 00:49:18,020
hardware might be a bit different

1389
00:49:33,540 --> 00:49:37,890
well I think that's about it thank you

1390
00:49:36,600 --> 00:49:41,509
very much for the talk and I'd be happy

1391
00:49:37,890 --> 00:49:41,509
to talk to you guys mark

1392
00:49:42,270 --> 00:49:46,360
[Applause]

