1
00:00:00,060 --> 00:00:04,290
we're going to be talking about titled

2
00:00:01,800 --> 00:00:06,210
network defender archaeology walking

3
00:00:04,290 --> 00:00:08,490
through some offensive stuff with decom

4
00:00:06,210 --> 00:00:10,830
as well as our research which is

5
00:00:08,490 --> 00:00:12,179
primarily defensive on top of that now

6
00:00:10,830 --> 00:00:15,059
before we get going my name is Justin

7
00:00:12,179 --> 00:00:16,890
Warner I'm on Twitter I go by a handle

8
00:00:15,059 --> 00:00:19,710
six dub I'm a principal security

9
00:00:16,890 --> 00:00:21,029
engineer at a company named gigamon I'm

10
00:00:19,710 --> 00:00:22,800
primarily on our applied threat research

11
00:00:21,029 --> 00:00:24,570
team so I spend my days looking at lots

12
00:00:22,800 --> 00:00:25,350
of network data trying to find bad guys

13
00:00:24,570 --> 00:00:27,420
doing bad things

14
00:00:25,350 --> 00:00:29,420
my background is pretty varied I spent a

15
00:00:27,420 --> 00:00:31,170
couple years in the US military doing

16
00:00:29,420 --> 00:00:33,149
defensive work and counterintelligence

17
00:00:31,170 --> 00:00:34,770
work and then I got bored with that and

18
00:00:33,149 --> 00:00:35,610
decided I wanted to go break into places

19
00:00:34,770 --> 00:00:37,469
for a living

20
00:00:35,610 --> 00:00:38,960
did that for three or four years of the

21
00:00:37,469 --> 00:00:42,059
small consulting company in the u.s.

22
00:00:38,960 --> 00:00:44,129
worked on some public tools PowerShell

23
00:00:42,059 --> 00:00:46,828
empire veil some of the other tools and

24
00:00:44,129 --> 00:00:48,539
then after breaking into places using

25
00:00:46,829 --> 00:00:50,399
the same technique for three and a half

26
00:00:48,539 --> 00:00:51,239
years I decided I wanted to try to stop

27
00:00:50,399 --> 00:00:53,789
it for once

28
00:00:51,239 --> 00:00:56,968
and so pivoted back to the blue side

29
00:00:53,789 --> 00:00:58,920
here I'm speaking with Alex here hi my

30
00:00:56,969 --> 00:01:01,739
name is Alex sir I'm a security engineer

31
00:00:58,920 --> 00:01:03,629
at gigamon with the a PR team background

32
00:01:01,739 --> 00:01:06,030
not quite as exciting as Justin's yet I

33
00:01:03,629 --> 00:01:07,439
was an intern with iceberg and later a

34
00:01:06,030 --> 00:01:08,700
security engineer and I recently

35
00:01:07,439 --> 00:01:14,279
graduated from the University of

36
00:01:08,700 --> 00:01:15,750
Washington so with a lot of these

37
00:01:14,280 --> 00:01:17,909
conference talks here it's really good

38
00:01:15,750 --> 00:01:19,140
to start out most research nowadays is

39
00:01:17,909 --> 00:01:20,729
always built on top of the research of

40
00:01:19,140 --> 00:01:21,960
other people so I like to start out

41
00:01:20,729 --> 00:01:24,030
every conference talk and say thinks

42
00:01:21,960 --> 00:01:25,289
this research was really inspired and

43
00:01:24,030 --> 00:01:26,790
driven by all the people who came out on

44
00:01:25,290 --> 00:01:28,590
the offensive side and pioneered these

45
00:01:26,790 --> 00:01:30,810
techniques and found them so a couple of

46
00:01:28,590 --> 00:01:33,090
folks are down below Casey Matt Phil and

47
00:01:30,810 --> 00:01:34,770
Joe big shout out to these guys our work

48
00:01:33,090 --> 00:01:36,030
builds on top of it highly recommend

49
00:01:34,770 --> 00:01:37,770
following them or checking them out if

50
00:01:36,030 --> 00:01:39,270
you get the chance so we're gonna start

51
00:01:37,770 --> 00:01:42,240
with a little bit of a fun story so why

52
00:01:39,270 --> 00:01:43,679
are we here today so it's the 90s let's

53
00:01:42,240 --> 00:01:46,829
take a step back some people might not

54
00:01:43,680 --> 00:01:48,479
even be born then Alex we have cool

55
00:01:46,829 --> 00:01:51,000
movies like hackers that start to come

56
00:01:48,479 --> 00:01:52,619
out making this scene popular people

57
00:01:51,000 --> 00:01:55,500
start to realize this is a thing we have

58
00:01:52,619 --> 00:01:57,810
really sexy computers these things are

59
00:01:55,500 --> 00:02:00,090
workhorses they never fail never break

60
00:01:57,810 --> 00:02:02,009
really sexy operating systems you got

61
00:02:00,090 --> 00:02:03,630
Windows three one here that's really the

62
00:02:02,009 --> 00:02:05,759
powerhouse and then this operating

63
00:02:03,630 --> 00:02:07,798
system starts to grow and it's built on

64
00:02:05,759 --> 00:02:09,840
top of old technologies but there's old

65
00:02:07,799 --> 00:02:11,700
technology stick along they have to be

66
00:02:09,840 --> 00:02:12,830
there because people built things on

67
00:02:11,700 --> 00:02:15,049
Windows three one and they want them to

68
00:02:12,830 --> 00:02:17,270
work forever one of those technologies

69
00:02:15,050 --> 00:02:19,100
happens to be a system called decom

70
00:02:17,270 --> 00:02:20,480
we're gonna be talking about but then

71
00:02:19,100 --> 00:02:21,920
when you pivot into the modern day with

72
00:02:20,480 --> 00:02:23,929
all these youngsters you got Matt Nelson

73
00:02:21,920 --> 00:02:25,970
running around they're focused on

74
00:02:23,930 --> 00:02:27,410
breaking all these old sub systems so no

75
00:02:25,970 --> 00:02:29,090
longer are they worried about using them

76
00:02:27,410 --> 00:02:31,370
for good things they're looking at them

77
00:02:29,090 --> 00:02:33,170
as a way to get in cyber reason has a

78
00:02:31,370 --> 00:02:34,820
great blog detailing some of this guy

79
00:02:33,170 --> 00:02:37,489
named Bo hops does an awesome research

80
00:02:34,820 --> 00:02:40,100
into this these this technology is now

81
00:02:37,490 --> 00:02:42,020
part of threat models and ways and

82
00:02:40,100 --> 00:02:44,120
document and methods that bad guys such

83
00:02:42,020 --> 00:02:46,190
as many of the Iranian threat groups are

84
00:02:44,120 --> 00:02:48,320
using to get into networks so it all

85
00:02:46,190 --> 00:02:49,970
started with old technology and sexy

86
00:02:48,320 --> 00:02:53,420
operating systems and now we land in

87
00:02:49,970 --> 00:02:54,590
despair in threats so let's what are we

88
00:02:53,420 --> 00:02:56,690
here to talk about we're here to talk

89
00:02:54,590 --> 00:02:59,030
about this so quick video really quick

90
00:02:56,690 --> 00:03:00,859
demo purely using a protocol called

91
00:02:59,030 --> 00:03:02,240
decom in a language called powershell

92
00:03:00,860 --> 00:03:04,430
we're able to pop a calque on our remote

93
00:03:02,240 --> 00:03:06,920
system yay calc it's the best thing to

94
00:03:04,430 --> 00:03:09,440
show and you'll see this is all the

95
00:03:06,920 --> 00:03:11,239
defensive telemetry we get with Zeke and

96
00:03:09,440 --> 00:03:13,040
Suri you'll see it's a whole lot of

97
00:03:11,240 --> 00:03:15,980
mumbo-jumbo nothing even says the word

98
00:03:13,040 --> 00:03:18,079
decom nothing's logged and Suri using

99
00:03:15,980 --> 00:03:20,329
popular open source free rulesets

100
00:03:18,080 --> 00:03:21,709
you don't see any massive alerts blowing

101
00:03:20,330 --> 00:03:24,019
up that a well-known and documented

102
00:03:21,709 --> 00:03:25,250
technique was launched and so that's

103
00:03:24,019 --> 00:03:27,440
what we're here to talk about today how

104
00:03:25,250 --> 00:03:30,190
to how to improve and you'll see this is

105
00:03:27,440 --> 00:03:33,109
another zoomin of that bro or Zeke log

106
00:03:30,190 --> 00:03:34,850
this is just a hot mess so you can

107
00:03:33,110 --> 00:03:38,510
clearly see that it's very hard to

108
00:03:34,850 --> 00:03:40,430
discern what actually happened here so

109
00:03:38,510 --> 00:03:42,320
we're here to talk about the fact that

110
00:03:40,430 --> 00:03:43,730
adversaries are using this technique red

111
00:03:42,320 --> 00:03:44,959
teams are using this technique it's been

112
00:03:43,730 --> 00:03:48,410
around for a couple years

113
00:03:44,959 --> 00:03:49,519
yet nothing rarely addresses it so our

114
00:03:48,410 --> 00:03:50,989
challenge is to rise through the

115
00:03:49,519 --> 00:03:52,489
occasion of understanding this technique

116
00:03:50,989 --> 00:03:54,680
understand the protocol which is a big

117
00:03:52,489 --> 00:03:56,900
enough challenge on its own understand

118
00:03:54,680 --> 00:03:59,720
what makes it malicious and then author

119
00:03:56,900 --> 00:04:00,890
and adapt our tools to allow us to

120
00:03:59,720 --> 00:04:03,800
detect it and we're going to focus

121
00:04:00,890 --> 00:04:06,649
primarily on the network so let's go

122
00:04:03,800 --> 00:04:08,989
ahead and get started this is one of

123
00:04:06,650 --> 00:04:10,489
Justin's favorite slides actually early

124
00:04:08,989 --> 00:04:12,680
on we grabbed a sampling of books on

125
00:04:10,489 --> 00:04:14,269
decon and justin pointed out how a lot

126
00:04:12,680 --> 00:04:15,950
of these books were older than I am so

127
00:04:14,269 --> 00:04:17,030
again just a little bit more perspective

128
00:04:15,950 --> 00:04:20,570
on how long this thing has been around

129
00:04:17,029 --> 00:04:21,738
for but before we can dive into decom we

130
00:04:20,570 --> 00:04:24,260
want to talk a little bit more about

131
00:04:21,738 --> 00:04:25,989
calm or the component object model and

132
00:04:24,260 --> 00:04:28,300
this is a language independent model

133
00:04:25,990 --> 00:04:32,259
allows applications to expose objects

134
00:04:28,300 --> 00:04:33,900
with functionality to a system so what

135
00:04:32,259 --> 00:04:35,830
exactly does that mean it means that

136
00:04:33,900 --> 00:04:38,739
objects can be written in any language

137
00:04:35,830 --> 00:04:40,659
of a programmers choosing and then other

138
00:04:38,740 --> 00:04:42,370
programmers can use that object also in

139
00:04:40,660 --> 00:04:44,319
any language of their choosing to gain

140
00:04:42,370 --> 00:04:46,000
functionality from it this is kind of a

141
00:04:44,319 --> 00:04:47,949
big deal as it allowed things such as

142
00:04:46,000 --> 00:04:50,500
getting away from shared libraries being

143
00:04:47,949 --> 00:04:52,060
imported into projects and it also made

144
00:04:50,500 --> 00:04:54,880
all these objects very first time and

145
00:04:52,060 --> 00:04:56,650
portable which was great these objects

146
00:04:54,880 --> 00:04:58,539
are identified using something called a

147
00:04:56,650 --> 00:05:00,549
class identifier these are globally

148
00:04:58,539 --> 00:05:02,650
unique and so they'll be the same for

149
00:05:00,550 --> 00:05:04,330
the same object across all systems and

150
00:05:02,650 --> 00:05:06,508
what this means is that you can use them

151
00:05:04,330 --> 00:05:09,400
to look up and correlate exactly what

152
00:05:06,509 --> 00:05:10,900
object is being used so for example when

153
00:05:09,400 --> 00:05:13,929
something like Microsoft Word is being

154
00:05:10,900 --> 00:05:16,239
installed it'll install a couple objects

155
00:05:13,930 --> 00:05:19,870
and if any of those objects CLS IDs show

156
00:05:16,240 --> 00:05:21,849
up in logs or over the network you can

157
00:05:19,870 --> 00:05:24,190
immediately go take that ID look it up

158
00:05:21,849 --> 00:05:26,020
and immediately correlate what object

159
00:05:24,190 --> 00:05:28,120
was being used and you can start to get

160
00:05:26,020 --> 00:05:30,159
an idea of what's happening in an

161
00:05:28,120 --> 00:05:31,509
environment and so we say on these

162
00:05:30,159 --> 00:05:33,009
slides that components are typically

163
00:05:31,509 --> 00:05:35,050
registered there are a couple ways to

164
00:05:33,009 --> 00:05:37,300
kind of get around this and use comm

165
00:05:35,050 --> 00:05:39,099
objects' when they're not explicitly

166
00:05:37,300 --> 00:05:40,590
registered but for the purpose of this

167
00:05:39,099 --> 00:05:43,300
we're not going to get too far into that

168
00:05:40,590 --> 00:05:46,270
we also say that components implement

169
00:05:43,300 --> 00:05:49,360
multiple interfaces and these interfaces

170
00:05:46,270 --> 00:05:51,280
are purely for interoperability so these

171
00:05:49,360 --> 00:05:53,349
help to define and expose common

172
00:05:51,280 --> 00:05:55,840
functionality to any component that

173
00:05:53,349 --> 00:05:57,069
decides to implement them and one of

174
00:05:55,840 --> 00:05:58,960
these interfaces of note is the I

175
00:05:57,069 --> 00:06:01,180
dispatch interface and this helps to

176
00:05:58,960 --> 00:06:03,039
provide automation so that means that a

177
00:06:01,180 --> 00:06:05,949
client can interact with an object at

178
00:06:03,039 --> 00:06:07,599
runtime the eye system activator

179
00:06:05,949 --> 00:06:09,789
interface is also pretty cool as that

180
00:06:07,599 --> 00:06:11,259
helps to work with the instantiation of

181
00:06:09,789 --> 00:06:13,539
an object and it can either do this

182
00:06:11,259 --> 00:06:16,569
directly or through an AI class factory

183
00:06:13,539 --> 00:06:18,250
kind of pass through and so in our

184
00:06:16,569 --> 00:06:20,590
bottom image here we show an example

185
00:06:18,250 --> 00:06:23,710
object you can see that it implements

186
00:06:20,590 --> 00:06:25,568
multiple interfaces and that can be any

187
00:06:23,710 --> 00:06:26,979
interface that the programmer chooses

188
00:06:25,569 --> 00:06:28,539
however the one interface that it must

189
00:06:26,979 --> 00:06:29,979
implement which is defined by comm is

190
00:06:28,539 --> 00:06:31,690
the ion milling interface so every

191
00:06:29,979 --> 00:06:34,870
common object must have the I unknown

192
00:06:31,690 --> 00:06:37,040
interface on the side here we have a

193
00:06:34,870 --> 00:06:39,200
breakdown of our MMC

194
00:06:37,040 --> 00:06:42,950
- oh application class this is kind of

195
00:06:39,200 --> 00:06:45,890
used for command-line snap-ins and it's

196
00:06:42,950 --> 00:06:47,390
default on windows in the bottom pane

197
00:06:45,890 --> 00:06:49,430
there you can see that it influenced a

198
00:06:47,390 --> 00:06:53,419
couple interfaces and among them is I

199
00:06:49,430 --> 00:06:55,760
unknown and I dispatch so with comm out

200
00:06:53,420 --> 00:06:58,010
of the way we can talk about decom and

201
00:06:55,760 --> 00:06:59,810
become simply is an extension of comm

202
00:06:58,010 --> 00:07:01,370
that allows objects be exposed and

203
00:06:59,810 --> 00:07:03,970
callable over a network in a distributed

204
00:07:01,370 --> 00:07:06,800
manner hence its name distributed calm

205
00:07:03,970 --> 00:07:09,620
be calm uses RPC as its primary

206
00:07:06,800 --> 00:07:13,100
transport protocol where RPC is the

207
00:07:09,620 --> 00:07:15,680
protocol that allows services or client

208
00:07:13,100 --> 00:07:18,620
access services across the network on a

209
00:07:15,680 --> 00:07:20,930
remote machine and since RPC uses a

210
00:07:18,620 --> 00:07:23,090
client-server model this means that code

211
00:07:20,930 --> 00:07:24,980
is executed on the remote server and so

212
00:07:23,090 --> 00:07:26,989
this is why comm works as a lateral

213
00:07:24,980 --> 00:07:29,690
movement technique without this code

214
00:07:26,990 --> 00:07:31,220
execution on a remote server you're not

215
00:07:29,690 --> 00:07:34,700
going to get very far so this is why

216
00:07:31,220 --> 00:07:39,440
again this is a workable protocol for

217
00:07:34,700 --> 00:07:41,240
lateral movement so within RPC there are

218
00:07:39,440 --> 00:07:43,760
a couple different calls one of these is

219
00:07:41,240 --> 00:07:45,860
bind and this allows a comm interface to

220
00:07:43,760 --> 00:07:48,860
be attached and then you can use the

221
00:07:45,860 --> 00:07:50,330
alter context call to kind of navigate

222
00:07:48,860 --> 00:07:51,530
between these bound interfaces and

223
00:07:50,330 --> 00:07:53,719
interact with the different methods that

224
00:07:51,530 --> 00:07:55,039
that was exposed so those two calls will

225
00:07:53,720 --> 00:07:58,070
come up a little bit later as well

226
00:07:55,040 --> 00:07:59,900
and then after binding messages can then

227
00:07:58,070 --> 00:08:01,969
be passed using very specific structures

228
00:07:59,900 --> 00:08:04,549
so this is how it's going to be seen on

229
00:08:01,970 --> 00:08:06,110
the wire so in the decom request we

230
00:08:04,550 --> 00:08:08,660
start out with a simple RPC header

231
00:08:06,110 --> 00:08:10,730
followed by something called an RPC that

232
00:08:08,660 --> 00:08:12,590
this structure and in this structure

233
00:08:10,730 --> 00:08:15,020
there are a few things such as the comm

234
00:08:12,590 --> 00:08:17,270
version being used any flags or

235
00:08:15,020 --> 00:08:19,849
extensions and something known as a CID

236
00:08:17,270 --> 00:08:21,380
or a causality identifier this allows

237
00:08:19,850 --> 00:08:23,720
calls to kind of be related to each

238
00:08:21,380 --> 00:08:27,290
other and this is finished off by any

239
00:08:23,720 --> 00:08:29,510
method arguments that there may be decon

240
00:08:27,290 --> 00:08:32,390
response looks pretty similar we have

241
00:08:29,510 --> 00:08:35,450
another RPC header but instead this time

242
00:08:32,390 --> 00:08:37,309
we have in our QC that structure this is

243
00:08:35,450 --> 00:08:40,220
pretty simplified and only contains the

244
00:08:37,309 --> 00:08:42,500
flags and extensions and this also ends

245
00:08:40,220 --> 00:08:44,090
with any method return arguments and

246
00:08:42,500 --> 00:08:45,860
we're gonna be getting into a lot more

247
00:08:44,090 --> 00:08:48,520
detail about these method arguments

248
00:08:45,860 --> 00:08:48,520
later on

249
00:08:49,240 --> 00:08:53,389
so now that you got a brief overview we

250
00:08:51,500 --> 00:08:55,930
wanted to give you another overview and

251
00:08:53,389 --> 00:08:58,639
focus more on the offensive side so

252
00:08:55,930 --> 00:09:01,699
starting with calm broadly calm is an

253
00:08:58,639 --> 00:09:03,170
extremely useful functionality that

254
00:09:01,699 --> 00:09:04,790
allows adversaries to accomplish

255
00:09:03,170 --> 00:09:06,769
different techniques or different

256
00:09:04,790 --> 00:09:08,779
tactics across their life cycle it's

257
00:09:06,769 --> 00:09:10,250
beneficial for a number of reasons in

258
00:09:08,779 --> 00:09:11,899
general there's been the whole living

259
00:09:10,250 --> 00:09:13,310
off the land craze everyone's probably

260
00:09:11,899 --> 00:09:15,079
heard about this kind of falls within

261
00:09:13,310 --> 00:09:16,430
that living off the land in the sense

262
00:09:15,079 --> 00:09:17,540
that it is native in the windows

263
00:09:16,430 --> 00:09:18,949
functionality you don't have to bring

264
00:09:17,540 --> 00:09:21,050
anything along to use it therefore

265
00:09:18,949 --> 00:09:22,370
minimizing what you introduce to the

266
00:09:21,050 --> 00:09:25,310
environment which is always a good thing

267
00:09:22,370 --> 00:09:27,440
as a bad guy but even more so this has

268
00:09:25,310 --> 00:09:29,899
beneficial because it's so legacy and so

269
00:09:27,440 --> 00:09:31,699
poorly documented that it's very hard

270
00:09:29,899 --> 00:09:33,440
for people who might stumble on the

271
00:09:31,699 --> 00:09:36,079
during an investigation to understand it

272
00:09:33,440 --> 00:09:37,130
so it increases that cost of how people

273
00:09:36,079 --> 00:09:40,069
having to dive in and do your research

274
00:09:37,130 --> 00:09:41,060
to do defense which is never a good

275
00:09:40,069 --> 00:09:42,860
thing you don't want to be in the middle

276
00:09:41,060 --> 00:09:46,430
of a VES investigation reading MSDN

277
00:09:42,860 --> 00:09:47,779
articles it's a painful process so they

278
00:09:46,430 --> 00:09:50,000
can be used a couple different places as

279
00:09:47,779 --> 00:09:51,769
I mentioned a lot of the endpoint focus

280
00:09:50,000 --> 00:09:53,480
talks and blogs out there such as the

281
00:09:51,769 --> 00:09:55,220
one by Casey and Matt at the bottom of

282
00:09:53,480 --> 00:09:57,529
the slide they focus a lot on the code

283
00:09:55,220 --> 00:09:59,959
execution and persistence components of

284
00:09:57,529 --> 00:10:02,509
comm and so we're gonna let you go read

285
00:09:59,959 --> 00:10:04,489
dot has anyone read that hints yeah cool

286
00:10:02,509 --> 00:10:06,410
all right so a couple people it's a very

287
00:10:04,490 --> 00:10:07,540
great talk I highly recommend it we're

288
00:10:06,410 --> 00:10:11,300
gonna focus on this middle category

289
00:10:07,540 --> 00:10:13,699
which is lateral movement now most of

290
00:10:11,300 --> 00:10:16,430
you might know but you're enterprises

291
00:10:13,699 --> 00:10:19,040
have calm objects that enable lateral

292
00:10:16,430 --> 00:10:22,160
movement all over them so all of these

293
00:10:19,040 --> 00:10:24,170
allow lateral movement pretty much the

294
00:10:22,160 --> 00:10:25,759
entire Microsoft Office package enables

295
00:10:24,170 --> 00:10:27,620
calm objects in the local Windows System

296
00:10:25,759 --> 00:10:28,970
that exposed abilities to run command

297
00:10:27,620 --> 00:10:30,949
lines or load dll's

298
00:10:28,970 --> 00:10:32,839
same thing with the MMC object which is

299
00:10:30,949 --> 00:10:34,990
built into systems so this this is a

300
00:10:32,839 --> 00:10:37,130
problem and it's just about everywhere

301
00:10:34,990 --> 00:10:38,990
so we'll start with the demos and the

302
00:10:37,130 --> 00:10:40,939
demo is to walk through how to find an

303
00:10:38,990 --> 00:10:42,889
abusable object so how our researchers

304
00:10:40,939 --> 00:10:45,019
finding these first I want to show that

305
00:10:42,889 --> 00:10:48,439
on this system in my demo my default

306
00:10:45,019 --> 00:10:49,910
implicit privilege or permission is set

307
00:10:48,439 --> 00:10:51,980
to administrators to allow comm

308
00:10:49,910 --> 00:10:53,990
launching so with that assumption that

309
00:10:51,980 --> 00:10:56,689
administrators implicitly cannot launch

310
00:10:53,990 --> 00:10:58,399
comm we can go in here we can search for

311
00:10:56,689 --> 00:11:01,219
all comm objects using a tool called

312
00:10:58,399 --> 00:11:02,689
Ollie view net for anywhere

313
00:11:01,220 --> 00:11:04,160
launch permission is not set on the

314
00:11:02,689 --> 00:11:05,899
common object what that means is

315
00:11:04,160 --> 00:11:08,269
administrators are allowed to run these

316
00:11:05,899 --> 00:11:11,209
objects implicitly you can see the MMC

317
00:11:08,269 --> 00:11:13,040
application is in fact allowed allows

318
00:11:11,209 --> 00:11:14,869
administrators to run it through the

319
00:11:13,040 --> 00:11:16,550
implicit permission so remotely if I'm

320
00:11:14,870 --> 00:11:18,800
an administrator I can use it that's not

321
00:11:16,550 --> 00:11:20,389
always the case now exploring this

322
00:11:18,800 --> 00:11:21,709
object can be quite simple you can just

323
00:11:20,389 --> 00:11:23,720
load up the object using something like

324
00:11:21,709 --> 00:11:25,670
PowerShell and simply use the help

325
00:11:23,720 --> 00:11:27,079
documentation the best way to understand

326
00:11:25,670 --> 00:11:29,089
a lot of these objects is just reading

327
00:11:27,079 --> 00:11:30,560
the help so I'm using git member here's

328
00:11:29,089 --> 00:11:32,930
a command to essentially lift the help

329
00:11:30,560 --> 00:11:34,189
and I'm exploring the object and listing

330
00:11:32,930 --> 00:11:37,819
the different functions involved in

331
00:11:34,189 --> 00:11:39,439
listing what's in play so with that in

332
00:11:37,819 --> 00:11:41,089
mind let's take the next step let's use

333
00:11:39,439 --> 00:11:42,139
that object that we just explored which

334
00:11:41,089 --> 00:11:44,240
we know can be launched by an

335
00:11:42,139 --> 00:11:46,160
administrator maliciously so in this

336
00:11:44,240 --> 00:11:47,480
demo we essentially are going to do the

337
00:11:46,160 --> 00:11:49,879
first command which is get type from

338
00:11:47,480 --> 00:11:52,639
program ID essentially activating and

339
00:11:49,879 --> 00:11:54,410
loading that object I'm sorry it's it's

340
00:11:52,639 --> 00:11:55,459
Stan shading an object to the object and

341
00:11:54,410 --> 00:11:57,319
we're gonna create instance which

342
00:11:55,459 --> 00:11:59,388
actually activates it that's when the

343
00:11:57,319 --> 00:12:01,160
network protocols begin and then we're

344
00:11:59,389 --> 00:12:02,810
gonna use a function that was exposed by

345
00:12:01,160 --> 00:12:04,969
that object simple function named

346
00:12:02,810 --> 00:12:06,768
execute shell command pre blinding in

347
00:12:04,970 --> 00:12:08,839
the face and we're gonna run a

348
00:12:06,769 --> 00:12:10,250
calculator on the remote host again

349
00:12:08,839 --> 00:12:12,350
calculator could be anything from

350
00:12:10,250 --> 00:12:14,389
PowerShell to any other executable you

351
00:12:12,350 --> 00:12:17,120
want to run any of the law bins and

352
00:12:14,389 --> 00:12:19,490
other things so three lines of code

353
00:12:17,120 --> 00:12:21,230
native windows functionality code

354
00:12:19,490 --> 00:12:22,639
execution requires an administrator like

355
00:12:21,230 --> 00:12:25,279
most of lateral movement techniques a

356
00:12:22,639 --> 00:12:27,529
little bit more of a fun one is Excel so

357
00:12:25,279 --> 00:12:29,629
Excel actually allows you through decom

358
00:12:27,529 --> 00:12:31,459
to load up Excel L plugins which are

359
00:12:29,629 --> 00:12:33,019
essentially a Microsoft Office plugin in

360
00:12:31,459 --> 00:12:34,609
Excel so in this case you're not

361
00:12:33,019 --> 00:12:36,439
spawning any command-line arguments

362
00:12:34,610 --> 00:12:38,029
necessarily like you would be in the

363
00:12:36,439 --> 00:12:40,009
previous case in this case you're gonna

364
00:12:38,029 --> 00:12:42,139
plant the DLL on the remote system using

365
00:12:40,009 --> 00:12:45,559
I don't SMB and then you're gonna have

366
00:12:42,139 --> 00:12:48,889
Excel forcibly load that DLL and the DLL

367
00:12:45,559 --> 00:12:50,240
is just a standard like standard export

368
00:12:48,889 --> 00:12:51,709
standard DLL it can have any

369
00:12:50,240 --> 00:12:53,569
functionality you want doesn't have to

370
00:12:51,709 --> 00:12:55,489
be formatted specifically and when you

371
00:12:53,569 --> 00:12:57,170
load it you can have it do whatever you

372
00:12:55,490 --> 00:12:58,250
want so in this case we pop calcs and

373
00:12:57,170 --> 00:13:00,319
again

374
00:12:58,250 --> 00:13:02,029
the loading the DLL kind of gets around

375
00:13:00,319 --> 00:13:05,029
that command line stuff of having to use

376
00:13:02,029 --> 00:13:07,550
like execute shell command anytime you

377
00:13:05,029 --> 00:13:10,279
can force your defenders this crazy to

378
00:13:07,550 --> 00:13:12,740
post-it notes and printouts to do

379
00:13:10,279 --> 00:13:15,679
protocol re you succeeded as an attacker

380
00:13:12,740 --> 00:13:17,089
so this is after a a month of diving in

381
00:13:15,679 --> 00:13:19,490
on the protocol and trying to write

382
00:13:17,089 --> 00:13:23,120
parsers for it Alex had literally gone

383
00:13:19,490 --> 00:13:25,040
mad and wearing tinfoil hats and post-it

384
00:13:23,120 --> 00:13:27,819
notes on paper it was the best way he

385
00:13:25,040 --> 00:13:30,019
could find to figure a lot of this out

386
00:13:27,819 --> 00:13:32,500
so that we can get into a bit of the

387
00:13:30,019 --> 00:13:34,579
behavioral analysis of decom

388
00:13:32,500 --> 00:13:36,019
so justin kind of walked through a

389
00:13:34,579 --> 00:13:38,209
little bit an example of how to find

390
00:13:36,019 --> 00:13:39,679
abusable objects we're going to talk a

391
00:13:38,209 --> 00:13:42,050
little bit more about what exactly we're

392
00:13:39,679 --> 00:13:44,779
looking for in those he mentioned the

393
00:13:42,050 --> 00:13:47,059
launch permission detail that's nice as

394
00:13:44,779 --> 00:13:49,130
it can kind of allow an attacker to have

395
00:13:47,059 --> 00:13:50,420
a bit more of a broader scope on the

396
00:13:49,130 --> 00:13:52,250
user's they target so instead of

397
00:13:50,420 --> 00:13:53,990
targeting a very specific user who's

398
00:13:52,250 --> 00:13:55,819
allowed to access an object they can

399
00:13:53,990 --> 00:13:58,009
target general administrators with the

400
00:13:55,819 --> 00:13:59,750
lack of launch permission but by far the

401
00:13:58,009 --> 00:14:01,370
most important detail is that the

402
00:13:59,750 --> 00:14:03,769
objects must have functionality to load

403
00:14:01,370 --> 00:14:05,839
or execute code without it again you're

404
00:14:03,769 --> 00:14:07,639
not going to get very far so looking for

405
00:14:05,839 --> 00:14:11,149
those specific functions that allow

406
00:14:07,639 --> 00:14:12,829
either you know DOL execution or you

407
00:14:11,149 --> 00:14:14,329
know straight command line execution

408
00:14:12,829 --> 00:14:16,638
that's what attackers are going to be

409
00:14:14,329 --> 00:14:18,500
looking for and in general there are a

410
00:14:16,639 --> 00:14:20,600
couple different ways for people who are

411
00:14:18,500 --> 00:14:22,389
just curious to be looking for these

412
00:14:20,600 --> 00:14:24,980
there are a few different ways to do it

413
00:14:22,389 --> 00:14:27,050
obviously justin showed off all you view

414
00:14:24,980 --> 00:14:29,000
net that was a great tool for us it's

415
00:14:27,050 --> 00:14:31,219
what a lot of the initial researchers on

416
00:14:29,000 --> 00:14:33,079
decom used to explore this kind of thing

417
00:14:31,220 --> 00:14:34,309
but for an adversary they're not going

418
00:14:33,079 --> 00:14:36,410
to want to go ahead and you know start

419
00:14:34,309 --> 00:14:38,719
dropping that so they can use a couple

420
00:14:36,410 --> 00:14:40,550
different methods one of them is remote

421
00:14:38,720 --> 00:14:43,160
registration so they can remotely query

422
00:14:40,550 --> 00:14:44,628
the registry on a remote system to kind

423
00:14:43,160 --> 00:14:46,279
of start a numerating and understanding

424
00:14:44,629 --> 00:14:48,459
what objects they have on that system

425
00:14:46,279 --> 00:14:51,559
what objects they may want to target

426
00:14:48,459 --> 00:14:54,709
also there's an awesome class in WMI

427
00:14:51,559 --> 00:14:57,230
called win32 decom application this can

428
00:14:54,709 --> 00:15:01,508
be used to help enumerate all of the D

429
00:14:57,230 --> 00:15:01,509
column arguments or objects on a system

430
00:15:02,430 --> 00:15:05,910
so when it comes to D comms network

431
00:15:04,290 --> 00:15:08,069
behavior there are three main phases

432
00:15:05,910 --> 00:15:09,780
there's the activation phase and this is

433
00:15:08,070 --> 00:15:13,380
where an object is instantiated on the

434
00:15:09,780 --> 00:15:15,839
remote host there's a series of optional

435
00:15:13,380 --> 00:15:17,189
type operations this is basically where

436
00:15:15,840 --> 00:15:19,080
the client resolves any function

437
00:15:17,190 --> 00:15:22,350
information understand a little bit more

438
00:15:19,080 --> 00:15:24,450
about how to call these functions and

439
00:15:22,350 --> 00:15:25,980
then there's the execution phase where

440
00:15:24,450 --> 00:15:30,060
they're selected execution or they're

441
00:15:25,980 --> 00:15:31,410
selected function is then executed so

442
00:15:30,060 --> 00:15:34,020
we're gonna go into depth on each of

443
00:15:31,410 --> 00:15:36,990
these phases a bit more we're gonna use

444
00:15:34,020 --> 00:15:39,930
our MMC - oh application object within

445
00:15:36,990 --> 00:15:42,420
powershell as our primary example so

446
00:15:39,930 --> 00:15:44,550
what justin demoed earlier and so when

447
00:15:42,420 --> 00:15:47,040
it comes to the activation phase these

448
00:15:44,550 --> 00:15:49,140
were the network functions that occurred

449
00:15:47,040 --> 00:15:51,390
so first there are these i oxidant

450
00:15:49,140 --> 00:15:54,510
operations and this is where the client

451
00:15:51,390 --> 00:15:56,250
binds to the remote RPC server then

452
00:15:54,510 --> 00:15:57,810
there is a series of authentication and

453
00:15:56,250 --> 00:15:59,820
authorization requests making sure the

454
00:15:57,810 --> 00:16:03,329
client is good to go once that gets the

455
00:15:59,820 --> 00:16:05,610
thumbs up PowerShell in this case since

456
00:16:03,330 --> 00:16:07,830
that's what we're using issues and I

457
00:16:05,610 --> 00:16:10,890
system activator remote get class object

458
00:16:07,830 --> 00:16:13,410
requests and this basically will provide

459
00:16:10,890 --> 00:16:15,930
a handle to a class factory that will

460
00:16:13,410 --> 00:16:18,120
create that will eventually be creating

461
00:16:15,930 --> 00:16:19,739
the object that they requested and so

462
00:16:18,120 --> 00:16:21,660
this occurs within the AI class factory

463
00:16:19,740 --> 00:16:23,100
operations so that's where the at the

464
00:16:21,660 --> 00:16:24,990
object itself is actually fully

465
00:16:23,100 --> 00:16:27,000
instantiated and ready to use and then

466
00:16:24,990 --> 00:16:29,070
another handle is passed back so that

467
00:16:27,000 --> 00:16:32,250
the client can begin to operate with it

468
00:16:29,070 --> 00:16:34,140
and so each step here actually creates a

469
00:16:32,250 --> 00:16:35,730
whole bunch of network chatter back and

470
00:16:34,140 --> 00:16:37,590
forth so these are kind of generic

471
00:16:35,730 --> 00:16:39,560
overview phases but within each of these

472
00:16:37,590 --> 00:16:43,080
you could have anywhere from two to

473
00:16:39,560 --> 00:16:44,819
eight packets back and forth for the RPC

474
00:16:43,080 --> 00:16:46,080
requests and responses so quite a bit of

475
00:16:44,820 --> 00:16:47,970
network chatter involved during this

476
00:16:46,080 --> 00:16:49,890
phase yeah so a lot of this is pretty

477
00:16:47,970 --> 00:16:54,300
loud a lot of this is pretty easy to

478
00:16:49,890 --> 00:16:56,490
take a look at and detect so here's a

479
00:16:54,300 --> 00:16:59,339
screenshot of Wireshark specifically a

480
00:16:56,490 --> 00:17:00,720
remote gate class object the request so

481
00:16:59,340 --> 00:17:02,850
this is what the client is sending to

482
00:17:00,720 --> 00:17:04,160
the server saying hey I want this object

483
00:17:02,850 --> 00:17:06,599
to be instantiated

484
00:17:04,160 --> 00:17:10,380
within the stub data as you can see

485
00:17:06,599 --> 00:17:13,109
specifically at offset hex 0 1 EI we

486
00:17:10,380 --> 00:17:15,510
have a CLS ID so this is the object that

487
00:17:13,109 --> 00:17:16,459
the client is asking the server to

488
00:17:15,510 --> 00:17:19,310
create for them

489
00:17:16,460 --> 00:17:20,900
and so once we kind of ungentle it

490
00:17:19,310 --> 00:17:23,119
there's some interesting formatting for

491
00:17:20,900 --> 00:17:23,660
the clsid so once you piece that back

492
00:17:23,119 --> 00:17:25,669
together

493
00:17:23,660 --> 00:17:28,250
we get down at the bottom there so again

494
00:17:25,670 --> 00:17:29,720
since this is a well-known clsid we can

495
00:17:28,250 --> 00:17:32,330
take it to the web and try and figure

496
00:17:29,720 --> 00:17:33,860
out what was created again for this

497
00:17:32,330 --> 00:17:36,020
example we're using the application

498
00:17:33,860 --> 00:17:37,939
object so of course that's what shows up

499
00:17:36,020 --> 00:17:41,000
and you can see the CLS ID matches

500
00:17:37,940 --> 00:17:42,980
exactly that within the packet so this

501
00:17:41,000 --> 00:17:44,720
is a great option for when you want to

502
00:17:42,980 --> 00:17:46,010
understand kind of what's going on in

503
00:17:44,720 --> 00:17:48,500
your environment you can take these you

504
00:17:46,010 --> 00:17:50,540
can collect these and then start to get

505
00:17:48,500 --> 00:17:52,580
a baseline of what of what objects are

506
00:17:50,540 --> 00:17:58,580
being used and furthermore what objects

507
00:17:52,580 --> 00:18:00,080
may have execution capabilities so now

508
00:17:58,580 --> 00:18:02,240
there's this series of I type info

509
00:18:00,080 --> 00:18:04,699
operations and the I type info is an

510
00:18:02,240 --> 00:18:06,380
interface that allows a client to start

511
00:18:04,700 --> 00:18:08,660
to query and understand how functions

512
00:18:06,380 --> 00:18:10,460
need to be called so since this is

513
00:18:08,660 --> 00:18:13,430
happening at runtime they need to get

514
00:18:10,460 --> 00:18:15,590
things such as they need to understand

515
00:18:13,430 --> 00:18:17,030
how a function needs to be called on the

516
00:18:15,590 --> 00:18:20,030
server and this is provided

517
00:18:17,030 --> 00:18:21,230
automatically through I dispatch so

518
00:18:20,030 --> 00:18:22,879
there's gonna be three functions that

519
00:18:21,230 --> 00:18:24,950
we're going to go through we're gonna go

520
00:18:22,880 --> 00:18:27,170
through get func desk which is for

521
00:18:24,950 --> 00:18:29,420
function resolution purposes we're going

522
00:18:27,170 --> 00:18:32,120
to get names which is for property and

523
00:18:29,420 --> 00:18:34,160
function name resolution as well as get

524
00:18:32,120 --> 00:18:38,330
documentation which of course handles

525
00:18:34,160 --> 00:18:39,980
any help documentation retrieval so

526
00:18:38,330 --> 00:18:41,750
here's a screen shot of what the I type

527
00:18:39,980 --> 00:18:44,630
info operations look like in Wireshark

528
00:18:41,750 --> 00:18:47,000
as you can see it's kind of a mess it's

529
00:18:44,630 --> 00:18:48,290
pretty hard to understand exactly what's

530
00:18:47,000 --> 00:18:49,940
going on here it actually took us a

531
00:18:48,290 --> 00:18:51,770
while to understand what these

532
00:18:49,940 --> 00:18:53,420
operations were we had to kind of tie it

533
00:18:51,770 --> 00:18:56,150
all the way back to at the I type info

534
00:18:53,420 --> 00:18:58,750
interface and it's really only giving

535
00:18:56,150 --> 00:19:00,950
you a high-level so I can see okay

536
00:18:58,750 --> 00:19:03,650
something's happening with I type info I

537
00:19:00,950 --> 00:19:05,810
don't know what and I also it's gonna be

538
00:19:03,650 --> 00:19:07,970
a real pain for me to understand at a

539
00:19:05,810 --> 00:19:08,929
lower level what's going on here so this

540
00:19:07,970 --> 00:19:10,490
is something that we're gonna return to

541
00:19:08,930 --> 00:19:13,040
later when we talk about how we went on

542
00:19:10,490 --> 00:19:14,750
to wire to modify Wireshark to help

543
00:19:13,040 --> 00:19:18,740
improve the parsing capability

544
00:19:14,750 --> 00:19:20,480
specifically for this interface so again

545
00:19:18,740 --> 00:19:23,000
first function that we're going to talk

546
00:19:20,480 --> 00:19:25,430
about is get func test and this is used

547
00:19:23,000 --> 00:19:27,230
to allow a client to query for

548
00:19:25,430 --> 00:19:29,420
information about how to call a specific

549
00:19:27,230 --> 00:19:30,260
function so if some of the returns to

550
00:19:29,420 --> 00:19:32,660
this are

551
00:19:30,260 --> 00:19:35,000
such as how many parameters of function

552
00:19:32,660 --> 00:19:37,730
has what are their types so there are

553
00:19:35,000 --> 00:19:41,390
primitive types as well as any return

554
00:19:37,730 --> 00:19:42,620
types and stuff like that so gives the

555
00:19:41,390 --> 00:19:46,160
client a good understanding of how to

556
00:19:42,620 --> 00:19:48,169
call this function so within the request

557
00:19:46,160 --> 00:19:51,440
we provide what's known as a function

558
00:19:48,170 --> 00:19:52,460
index and this is kind of in the in the

559
00:19:51,440 --> 00:19:54,800
peek apps you'll kind of see this

560
00:19:52,460 --> 00:19:56,390
counter rolling up as the clients like

561
00:19:54,800 --> 00:19:57,680
I'm curious about this function curious

562
00:19:56,390 --> 00:19:59,780
about this function hears about this

563
00:19:57,680 --> 00:20:02,620
function and so on so in this one we're

564
00:19:59,780 --> 00:20:04,940
seeing a function index of hex 21 and

565
00:20:02,620 --> 00:20:06,320
this blue section right here these are

566
00:20:04,940 --> 00:20:07,730
the method arguments that I was talking

567
00:20:06,320 --> 00:20:09,710
about before so pretty much you can

568
00:20:07,730 --> 00:20:13,520
think about anything above that is the

569
00:20:09,710 --> 00:20:16,610
previous decom like the RPC headers as

570
00:20:13,520 --> 00:20:18,980
well as the RPC this structure but that

571
00:20:16,610 --> 00:20:20,300
blue part is the method arguments and

572
00:20:18,980 --> 00:20:21,970
then when we get to the response from

573
00:20:20,300 --> 00:20:24,110
the server for this specific function

574
00:20:21,970 --> 00:20:26,300
again the blue is going to be the method

575
00:20:24,110 --> 00:20:28,399
return arguments for the decom response

576
00:20:26,300 --> 00:20:30,020
we get a couple things we get the full

577
00:20:28,400 --> 00:20:32,390
function description which contains all

578
00:20:30,020 --> 00:20:34,129
the stuff that I described before and a

579
00:20:32,390 --> 00:20:36,110
little bit more and we also get what's

580
00:20:34,130 --> 00:20:38,900
known as a member ID and this member ID

581
00:20:36,110 --> 00:20:40,459
in this case is hex 36 and this is what

582
00:20:38,900 --> 00:20:42,380
we're going to be using in future calls

583
00:20:40,460 --> 00:20:43,580
to identify what function the client is

584
00:20:42,380 --> 00:20:47,750
curious about and what's the query

585
00:20:43,580 --> 00:20:50,330
information for so the next function get

586
00:20:47,750 --> 00:20:52,040
names and people generally prefer to

587
00:20:50,330 --> 00:20:53,780
call functions by name rather than some

588
00:20:52,040 --> 00:20:55,580
kind of you know weird hex number we're

589
00:20:53,780 --> 00:20:57,260
you know whatnot names are always great

590
00:20:55,580 --> 00:20:59,230
for people so that's what this function

591
00:20:57,260 --> 00:21:01,700
helps to do so it'll resolve any

592
00:20:59,230 --> 00:21:04,820
function names and parameter names for a

593
00:21:01,700 --> 00:21:06,890
client so in the request we're gonna

594
00:21:04,820 --> 00:21:09,139
pass in that member ID that we got from

595
00:21:06,890 --> 00:21:10,880
that last function this case hex 36 and

596
00:21:09,140 --> 00:21:13,280
then the response is going to give us

597
00:21:10,880 --> 00:21:16,280
just that so you may be able to make out

598
00:21:13,280 --> 00:21:18,860
in the hex dump on the side some ASCII

599
00:21:16,280 --> 00:21:20,720
strings in there specifically we see

600
00:21:18,860 --> 00:21:22,879
execute shell command which is the

601
00:21:20,720 --> 00:21:24,530
command that we're interested in and we

602
00:21:22,880 --> 00:21:27,020
also see the parameters that that

603
00:21:24,530 --> 00:21:30,530
command takes which are command

604
00:21:27,020 --> 00:21:32,660
directory parameters and window state so

605
00:21:30,530 --> 00:21:35,690
again this can be consumed by a client

606
00:21:32,660 --> 00:21:38,429
and then presented to a user

607
00:21:35,690 --> 00:21:40,710
and then finally we have to get

608
00:21:38,429 --> 00:21:42,150
documentation and this of course is

609
00:21:40,710 --> 00:21:43,980
sometimes users need a little bit of

610
00:21:42,150 --> 00:21:45,840
help understanding what exactly a

611
00:21:43,980 --> 00:21:46,920
function does they want to check and

612
00:21:45,840 --> 00:21:48,270
make sure that this is the right

613
00:21:46,920 --> 00:21:50,760
function that they want to execute this

614
00:21:48,270 --> 00:21:52,260
is you know get all that information so

615
00:21:50,760 --> 00:21:55,110
that's what this function helps to

616
00:21:52,260 --> 00:21:57,030
provide specifically again in the

617
00:21:55,110 --> 00:21:58,530
request we're passing in our hex 36

618
00:21:57,030 --> 00:22:00,750
member ID because that's the function

619
00:21:58,530 --> 00:22:02,790
that we're interested in and we're also

620
00:22:00,750 --> 00:22:04,260
passing in a series of flags and this

621
00:22:02,790 --> 00:22:05,909
will tell the server what kind of help

622
00:22:04,260 --> 00:22:07,980
documentation we're interested in in

623
00:22:05,910 --> 00:22:10,050
this case we're passing in saying that

624
00:22:07,980 --> 00:22:12,870
we want the help file and any docstrings

625
00:22:10,050 --> 00:22:15,750
and again we get a full response from

626
00:22:12,870 --> 00:22:17,820
the server containing full ascii strings

627
00:22:15,750 --> 00:22:20,340
that can then be consumed by a client

628
00:22:17,820 --> 00:22:21,809
presented to a user and this is

629
00:22:20,340 --> 00:22:24,928
typically going to be seen in scripting

630
00:22:21,809 --> 00:22:27,570
languages so things like powershell are

631
00:22:24,929 --> 00:22:32,610
gonna use this and consume it and

632
00:22:27,570 --> 00:22:35,790
present it to a user and now the final

633
00:22:32,610 --> 00:22:37,979
phase is execution and so for execution

634
00:22:35,790 --> 00:22:40,649
we use the I dispatch invoke function

635
00:22:37,980 --> 00:22:43,050
and this will invoke a given function on

636
00:22:40,650 --> 00:22:45,000
the remote server so again in the

637
00:22:43,050 --> 00:22:46,950
request we're passing in our hex 36

638
00:22:45,000 --> 00:22:49,260
member ID as that's the function we want

639
00:22:46,950 --> 00:22:51,450
to execute and we're also passing in any

640
00:22:49,260 --> 00:22:53,820
relevant parameters that this function

641
00:22:51,450 --> 00:22:56,040
takes now remember from get func desk we

642
00:22:53,820 --> 00:22:58,110
now know what parameters the function is

643
00:22:56,040 --> 00:23:00,659
expecting there types and whatnot so we

644
00:22:58,110 --> 00:23:02,669
have a good idea of how to call this you

645
00:23:00,660 --> 00:23:04,370
can see down in the hex dump of the

646
00:23:02,670 --> 00:23:07,800
request you can make out an ASCII string

647
00:23:04,370 --> 00:23:09,209
that's a path to calc PXE so again you

648
00:23:07,800 --> 00:23:11,580
can start to see within the package

649
00:23:09,210 --> 00:23:13,800
exactly where you might be able to pick

650
00:23:11,580 --> 00:23:16,649
out where potential adversaries might be

651
00:23:13,800 --> 00:23:18,360
dropping their commands again calculate

652
00:23:16,650 --> 00:23:20,370
XC probably not that useful for an

653
00:23:18,360 --> 00:23:23,820
adversary so they can use whatever

654
00:23:20,370 --> 00:23:26,909
whatever they want there in terms of the

655
00:23:23,820 --> 00:23:29,340
response it'll provide us any output

656
00:23:26,910 --> 00:23:31,110
that that function has in this case this

657
00:23:29,340 --> 00:23:32,730
function does not provide any output so

658
00:23:31,110 --> 00:23:35,909
that's where that null string is coming

659
00:23:32,730 --> 00:23:37,200
from but we do get provided a standard

660
00:23:35,910 --> 00:23:38,700
constant which will tell us whether or

661
00:23:37,200 --> 00:23:41,400
not function execution was even

662
00:23:38,700 --> 00:23:43,320
successful in this case we get the Sok

663
00:23:41,400 --> 00:23:45,540
constant meaning that we would have

664
00:23:43,320 --> 00:23:48,490
achieved lateral movement had we or I

665
00:23:45,540 --> 00:23:50,710
guess we popped calc exe in this case

666
00:23:48,490 --> 00:23:52,860
so drawing that all together here's kind

667
00:23:50,710 --> 00:23:54,970
of a lot of you know going through

668
00:23:52,860 --> 00:23:56,050
Wireshark screenshots so pulling it all

669
00:23:54,970 --> 00:23:58,900
back together

670
00:23:56,050 --> 00:24:00,909
we know that the member ID relates to a

671
00:23:58,900 --> 00:24:02,140
specific function that the client is

672
00:24:00,910 --> 00:24:04,300
interested in whether or not they're

673
00:24:02,140 --> 00:24:05,530
executing it such as in this case or if

674
00:24:04,300 --> 00:24:07,389
they're querying for specific

675
00:24:05,530 --> 00:24:10,180
information such as in the previous eye

676
00:24:07,390 --> 00:24:13,150
type info operations but that memory ID

677
00:24:10,180 --> 00:24:14,860
came from the get func desk of the eye

678
00:24:13,150 --> 00:24:16,480
type info operation so you can kind of

679
00:24:14,860 --> 00:24:18,370
trace it all the way back and you can

680
00:24:16,480 --> 00:24:20,410
even go further so we know that all of

681
00:24:18,370 --> 00:24:23,290
these operations are relating to a

682
00:24:20,410 --> 00:24:25,750
single function exposed by the object

683
00:24:23,290 --> 00:24:27,580
clsid that we requested in the very

684
00:24:25,750 --> 00:24:29,020
first place so by chaining that all

685
00:24:27,580 --> 00:24:30,939
together we now have a full

686
00:24:29,020 --> 00:24:32,830
understanding of exactly what was

687
00:24:30,940 --> 00:24:34,540
occurring because we can pass back we

688
00:24:32,830 --> 00:24:36,070
can even kind of replicate we can look

689
00:24:34,540 --> 00:24:38,950
at the get names we can understand what

690
00:24:36,070 --> 00:24:40,689
function is being run what parameters

691
00:24:38,950 --> 00:24:42,490
are being passed and relate that all the

692
00:24:40,690 --> 00:24:47,380
way back to an object which is pretty

693
00:24:42,490 --> 00:24:49,450
cool so with this behavioral analysis

694
00:24:47,380 --> 00:24:51,430
complete we can start to define some

695
00:24:49,450 --> 00:24:52,930
criteria for detection and we're gonna

696
00:24:51,430 --> 00:24:55,030
do that with three different criteria

697
00:24:52,930 --> 00:24:56,950
sets we're going to talk about strict

698
00:24:55,030 --> 00:24:58,360
criteria and these are components of an

699
00:24:56,950 --> 00:24:59,860
attack chain that are required to be

700
00:24:58,360 --> 00:25:02,560
present for the attack chain to even

701
00:24:59,860 --> 00:25:04,929
exist in the first place we also have

702
00:25:02,560 --> 00:25:07,030
loose criteria and these are criteria

703
00:25:04,930 --> 00:25:08,380
that are in the adversaries control so

704
00:25:07,030 --> 00:25:10,240
for example we probably don't want to be

705
00:25:08,380 --> 00:25:12,520
looking for the string calc dot exe

706
00:25:10,240 --> 00:25:13,840
right because an adversary could change

707
00:25:12,520 --> 00:25:16,150
that up they can change what they want

708
00:25:13,840 --> 00:25:19,120
to run they can decide they have full

709
00:25:16,150 --> 00:25:20,560
control over these criteria and then

710
00:25:19,120 --> 00:25:22,330
there's also exclusion criteria and

711
00:25:20,560 --> 00:25:24,010
these are things that appear to be part

712
00:25:22,330 --> 00:25:26,080
of a check chain at first but are

713
00:25:24,010 --> 00:25:27,990
actually benign so we want to exclude

714
00:25:26,080 --> 00:25:30,970
exclude these so think kind of about

715
00:25:27,990 --> 00:25:33,760
detection tuning so you want to tune out

716
00:25:30,970 --> 00:25:36,880
kind of the noise to get to the real the

717
00:25:33,760 --> 00:25:38,770
real bad and all of these kind of work

718
00:25:36,880 --> 00:25:40,240
together in boolean operations so you

719
00:25:38,770 --> 00:25:42,190
can see in our diagram how we want to

720
00:25:40,240 --> 00:25:43,750
add together any strict criteria we have

721
00:25:42,190 --> 00:25:45,880
because we want to make sure that those

722
00:25:43,750 --> 00:25:47,980
exist every single time before detection

723
00:25:45,880 --> 00:25:49,630
fires then we want to order together any

724
00:25:47,980 --> 00:25:51,880
loose criteria because these are things

725
00:25:49,630 --> 00:25:53,080
that could change but we want to make

726
00:25:51,880 --> 00:25:55,240
sure that they're still included and

727
00:25:53,080 --> 00:25:56,590
then finally we want to not out any

728
00:25:55,240 --> 00:25:59,710
exclusion criteria because we want to

729
00:25:56,590 --> 00:26:02,800
disregard any of that criteria before we

730
00:25:59,710 --> 00:26:06,050
decide to alert that detection

731
00:26:02,800 --> 00:26:08,360
so we're turning back to decom these are

732
00:26:06,050 --> 00:26:11,030
our criteria analysis so in terms of

733
00:26:08,360 --> 00:26:12,800
strict criteria we know that activation

734
00:26:11,030 --> 00:26:15,020
must be done with a relevant Hewitt or

735
00:26:12,800 --> 00:26:17,330
clsid so that must be present for the

736
00:26:15,020 --> 00:26:18,379
attack chain to exist and that that CL

737
00:26:17,330 --> 00:26:20,510
clsid

738
00:26:18,380 --> 00:26:22,640
must relate to an object with code

739
00:26:20,510 --> 00:26:25,760
execution functionality because again if

740
00:26:22,640 --> 00:26:28,310
it doesn't you're not looking at much

741
00:26:25,760 --> 00:26:30,800
lateral movement in terms of loose

742
00:26:28,310 --> 00:26:32,659
criteria we know that the clsid can vary

743
00:26:30,800 --> 00:26:35,210
so Justin pointed out a couple different

744
00:26:32,660 --> 00:26:37,190
methods of how to obtain lateral

745
00:26:35,210 --> 00:26:39,200
movement and that was through various

746
00:26:37,190 --> 00:26:42,230
different objects so that clsid will

747
00:26:39,200 --> 00:26:43,820
change and there may be I type info

748
00:26:42,230 --> 00:26:46,190
operations depending on how the common

749
00:26:43,820 --> 00:26:47,990
object is explored so in our powershell

750
00:26:46,190 --> 00:26:49,820
example it would actually explore every

751
00:26:47,990 --> 00:26:52,250
single function that an object had to

752
00:26:49,820 --> 00:26:54,230
offer we also tried weaponizing this in

753
00:26:52,250 --> 00:26:56,330
something like python and that only

754
00:26:54,230 --> 00:26:59,390
explored the function that we decide to

755
00:26:56,330 --> 00:27:02,050
execute so it can vary depending on what

756
00:26:59,390 --> 00:27:04,520
language the attacker decides to use

757
00:27:02,050 --> 00:27:06,230
there may also be a series of I dispatch

758
00:27:04,520 --> 00:27:08,300
invoke depending on you know how many

759
00:27:06,230 --> 00:27:10,430
functions they want to run specifically

760
00:27:08,300 --> 00:27:13,340
like their commands and their parameters

761
00:27:10,430 --> 00:27:16,100
are going to change and the objects

762
00:27:13,340 --> 00:27:18,709
instantiation can vary so in our example

763
00:27:16,100 --> 00:27:20,480
I class factory create instance was used

764
00:27:18,710 --> 00:27:21,980
to kind of use a class Factory which the

765
00:27:20,480 --> 00:27:24,560
client then had to build the object off

766
00:27:21,980 --> 00:27:26,780
of but I system activate here also

767
00:27:24,560 --> 00:27:28,970
offers remote create instance which will

768
00:27:26,780 --> 00:27:31,639
actually instantiate the object directly

769
00:27:28,970 --> 00:27:33,080
and so actually in PowerShell as I

770
00:27:31,640 --> 00:27:35,210
mentioned it was using the AI class

771
00:27:33,080 --> 00:27:37,189
factory operation in Python it did it

772
00:27:35,210 --> 00:27:39,680
directly so is going straight to AI

773
00:27:37,190 --> 00:27:41,060
system activator remote create instance

774
00:27:39,680 --> 00:27:43,130
so that's a case where you want to make

775
00:27:41,060 --> 00:27:44,929
sure that you have multiple signatures

776
00:27:43,130 --> 00:27:47,240
that will pick up on both techniques and

777
00:27:44,930 --> 00:27:49,550
this really hammers home the importance

778
00:27:47,240 --> 00:27:50,960
of doing a good behavioral analysis and

779
00:27:49,550 --> 00:27:52,700
testing a wide variety of tools and

780
00:27:50,960 --> 00:27:54,290
techniques because those little details

781
00:27:52,700 --> 00:27:56,450
and artifacts are really what can break

782
00:27:54,290 --> 00:27:58,760
detection logic and detection scenarios

783
00:27:56,450 --> 00:28:01,630
in the real world exactly and then for

784
00:27:58,760 --> 00:28:04,040
exclusions we want to get rid of any

785
00:28:01,630 --> 00:28:05,900
systems that may use D comm for normal

786
00:28:04,040 --> 00:28:09,230
operations obviously we don't want to go

787
00:28:05,900 --> 00:28:11,420
up flagging benign systems that are

788
00:28:09,230 --> 00:28:14,330
known to use decom in their standard

789
00:28:11,420 --> 00:28:14,840
day-to-day use and this is greatly aided

790
00:28:14,330 --> 00:28:17,179
by

791
00:28:14,840 --> 00:28:18,800
data set so being able to look across an

792
00:28:17,180 --> 00:28:20,810
environment and say okay these are the

793
00:28:18,800 --> 00:28:22,669
systems that are using decon now these

794
00:28:20,810 --> 00:28:24,169
are what objects are being used we can

795
00:28:22,670 --> 00:28:26,360
start to funnel those into exclusion

796
00:28:24,170 --> 00:28:28,250
criteria and say when we want to start

797
00:28:26,360 --> 00:28:29,570
detecting bad we're gonna push those off

798
00:28:28,250 --> 00:28:31,520
to the side because we don't want to get

799
00:28:29,570 --> 00:28:38,270
many false positives off those systems

800
00:28:31,520 --> 00:28:39,650
so lots of bits and bytes everyone's

801
00:28:38,270 --> 00:28:41,690
hanging in there so now we're going to

802
00:28:39,650 --> 00:28:43,100
jump into the fun part actually catching

803
00:28:41,690 --> 00:28:44,660
the bad so I mentioned that I was a red

804
00:28:43,100 --> 00:28:46,070
team or like the like to do a lot about

805
00:28:44,660 --> 00:28:49,130
this is this is what gets me excited now

806
00:28:46,070 --> 00:28:51,620
so before we go too deep into specifics

807
00:28:49,130 --> 00:28:53,450
on decon detection or NSM one of the

808
00:28:51,620 --> 00:28:57,469
level sets some more detection concepts

809
00:28:53,450 --> 00:28:59,960
so if ever anyone's ever heard of Dave

810
00:28:57,470 --> 00:29:01,460
Bianco's like pyramid of pain or you

811
00:28:59,960 --> 00:29:03,320
ever read any other recent stuff coming

812
00:29:01,460 --> 00:29:05,510
out with rich Balak or Rob early there's

813
00:29:03,320 --> 00:29:08,629
various definitions over what defines an

814
00:29:05,510 --> 00:29:10,190
indicator or what like how how detection

815
00:29:08,630 --> 00:29:12,050
logic should be authored think in

816
00:29:10,190 --> 00:29:15,110
general the the general acceptance is is

817
00:29:12,050 --> 00:29:17,200
there a wide array of indicators so what

818
00:29:15,110 --> 00:29:19,129
what a lot of people who might not have

819
00:29:17,200 --> 00:29:20,540
deep threat intelligence experience

820
00:29:19,130 --> 00:29:22,070
would call an indicator would be like an

821
00:29:20,540 --> 00:29:23,600
IP address or a domain like purely

822
00:29:22,070 --> 00:29:25,250
atomic indicators and that is an

823
00:29:23,600 --> 00:29:27,620
indicator it's one form of an indicator

824
00:29:25,250 --> 00:29:29,270
but when you start talking like reliable

825
00:29:27,620 --> 00:29:30,919
detection you have to expand that

826
00:29:29,270 --> 00:29:33,889
mindset to understand there's a wide

827
00:29:30,920 --> 00:29:35,630
spectrum of indicators so that the

828
00:29:33,890 --> 00:29:37,340
atomic indicators is one if you have

829
00:29:35,630 --> 00:29:38,870
what I generically call simple

830
00:29:37,340 --> 00:29:41,510
behavioral indicators so these would be

831
00:29:38,870 --> 00:29:44,149
like single singular events and rich

832
00:29:41,510 --> 00:29:45,740
data on top of singular events you're

833
00:29:44,150 --> 00:29:48,470
really looking at a snapshot or point in

834
00:29:45,740 --> 00:29:49,880
time it's behavioral because it means

835
00:29:48,470 --> 00:29:52,130
that something has happened it's event

836
00:29:49,880 --> 00:29:54,560
based not entity based but it's not

837
00:29:52,130 --> 00:29:58,940
quite difficult and this can be done

838
00:29:54,560 --> 00:30:00,710
with things like Zika bro any Simms or

839
00:29:58,940 --> 00:30:02,960
event automation systems can do very

840
00:30:00,710 --> 00:30:04,730
simple matching with queries and that's

841
00:30:02,960 --> 00:30:06,230
where this falls then you have complex

842
00:30:04,730 --> 00:30:08,150
behavioral indicators it's all the rage

843
00:30:06,230 --> 00:30:10,070
nowadays you want fancy machine learning

844
00:30:08,150 --> 00:30:12,320
models it's really just statistics and

845
00:30:10,070 --> 00:30:14,030
you want to strap that on and know and

846
00:30:12,320 --> 00:30:15,350
anomalies are occurring or when

847
00:30:14,030 --> 00:30:17,960
novelties have been introduced to the

848
00:30:15,350 --> 00:30:20,240
network and that starts getting into

849
00:30:17,960 --> 00:30:21,830
multi event scenarios and when you start

850
00:30:20,240 --> 00:30:23,750
looking at multiple events having to

851
00:30:21,830 --> 00:30:26,030
chain those or understand behavior or

852
00:30:23,750 --> 00:30:27,740
cross events that's that's a different

853
00:30:26,030 --> 00:30:30,440
form of indicator altogether and if

854
00:30:27,740 --> 00:30:31,820
for implementation these qualities or

855
00:30:30,440 --> 00:30:34,640
these indicators will have various

856
00:30:31,820 --> 00:30:35,750
qualities as well so in general there's

857
00:30:34,640 --> 00:30:38,480
a very generalized statement which is

858
00:30:35,750 --> 00:30:40,780
dangerous on a stage on camera but I

859
00:30:38,480 --> 00:30:43,250
think in general the average case

860
00:30:40,780 --> 00:30:45,170
complex behavioral indicators are robust

861
00:30:43,250 --> 00:30:48,380
because they're very abstracted so they

862
00:30:45,170 --> 00:30:49,429
look at behaviors across events the

863
00:30:48,380 --> 00:30:51,710
adversary would have to be a lot more

864
00:30:49,429 --> 00:30:54,559
careful across a longer lifecycle to be

865
00:30:51,710 --> 00:30:56,390
able to evade whereas atomic indicators

866
00:30:54,559 --> 00:30:58,280
they can simply just buy a new server

867
00:30:56,390 --> 00:31:00,530
and change their IP or they can buy a

868
00:30:58,280 --> 00:31:02,960
new domain name for twenty nine cents on

869
00:31:00,530 --> 00:31:06,200
Black Friday and Namecheap and just keep

870
00:31:02,960 --> 00:31:07,190
rolling these two to change up now that

871
00:31:06,200 --> 00:31:08,390
does increase the cost of their

872
00:31:07,190 --> 00:31:10,809
operations but they're a little bit

873
00:31:08,390 --> 00:31:12,950
weaker on the other hand fidelity

874
00:31:10,809 --> 00:31:15,350
complex behavioral indicators are so

875
00:31:12,950 --> 00:31:17,210
broad that it captures a wide array of

876
00:31:15,350 --> 00:31:19,189
activity including a lot of potentially

877
00:31:17,210 --> 00:31:21,200
system administrator activity and it's

878
00:31:19,190 --> 00:31:22,820
also not generally not specific to an

879
00:31:21,200 --> 00:31:25,190
adversary a lot of times it's it's

880
00:31:22,820 --> 00:31:27,379
specific to some behavior that an

881
00:31:25,190 --> 00:31:29,630
adversary is using that might be similar

882
00:31:27,380 --> 00:31:31,550
whereas atomic indicators at least for

883
00:31:29,630 --> 00:31:32,420
that small time period it's specific to

884
00:31:31,550 --> 00:31:34,428
that bad guy

885
00:31:32,420 --> 00:31:36,730
generally obviously their shared hosting

886
00:31:34,429 --> 00:31:40,160
environments and many complications here

887
00:31:36,730 --> 00:31:42,530
so one more concept to understand to do

888
00:31:40,160 --> 00:31:45,320
reliable detection specifically with

889
00:31:42,530 --> 00:31:46,820
decom so imagine this dotted line

890
00:31:45,320 --> 00:31:49,070
burning of science II imagine this

891
00:31:46,820 --> 00:31:51,439
dotted line represents an adversaries

892
00:31:49,070 --> 00:31:52,970
technique the attack surface so this is

893
00:31:51,440 --> 00:31:55,850
a two dimensional space which represents

894
00:31:52,970 --> 00:31:57,410
all the possible ways with many infinite

895
00:31:55,850 --> 00:31:58,719
numbers of dots of all the possible ways

896
00:31:57,410 --> 00:32:01,160
that a bad guy could in percent

897
00:31:58,720 --> 00:32:03,290
implement a technique so we have dots

898
00:32:01,160 --> 00:32:05,480
and those dots represent variations of

899
00:32:03,290 --> 00:32:08,540
that technique to be very applied in

900
00:32:05,480 --> 00:32:10,850
this case imagine weaponizing decom

901
00:32:08,540 --> 00:32:12,620
attack and powershell and leveraging

902
00:32:10,850 --> 00:32:13,399
decon lateral movement python to

903
00:32:12,620 --> 00:32:15,020
variations

904
00:32:13,400 --> 00:32:16,490
they're both decon lateral movement

905
00:32:15,020 --> 00:32:18,470
might air attack causing the same thing

906
00:32:16,490 --> 00:32:20,360
but they're different they have

907
00:32:18,470 --> 00:32:22,910
different artifacts and they fill this

908
00:32:20,360 --> 00:32:25,580
attack space our goal as detection

909
00:32:22,910 --> 00:32:28,040
analysts is to form detections of many

910
00:32:25,580 --> 00:32:29,899
types with many different specificities

911
00:32:28,040 --> 00:32:32,149
and broadness levels to fill this space

912
00:32:29,900 --> 00:32:34,280
we want to be able to capture every

913
00:32:32,150 --> 00:32:36,380
technique one detection might cover

914
00:32:34,280 --> 00:32:38,120
multiple techniques very rarely does one

915
00:32:36,380 --> 00:32:39,950
detection cover all techniques so

916
00:32:38,120 --> 00:32:41,479
there's a chance we might need multiple

917
00:32:39,950 --> 00:32:43,760
detection logic here

918
00:32:41,480 --> 00:32:45,140
and then even more fun if your detection

919
00:32:43,760 --> 00:32:47,090
is too broad you start to get false

920
00:32:45,140 --> 00:32:48,890
positives you fall outside the box or

921
00:32:47,090 --> 00:32:50,659
too narrow you get white space and white

922
00:32:48,890 --> 00:32:52,850
spaces false negatives those are bad

923
00:32:50,660 --> 00:32:54,080
things for detection analysts so this is

924
00:32:52,850 --> 00:32:55,879
kind of the science of where we want to

925
00:32:54,080 --> 00:32:59,418
go and we want to use our entire

926
00:32:55,880 --> 00:33:01,250
technology stack to accomplish this for

927
00:32:59,419 --> 00:33:02,690
NSM purposes which is where we live and

928
00:33:01,250 --> 00:33:04,309
breathe every day we're gonna focus on

929
00:33:02,690 --> 00:33:06,110
these ones there are three generic

930
00:33:04,309 --> 00:33:08,870
categories we like to talk about so rule

931
00:33:06,110 --> 00:33:12,559
based IDs let's think of full packet

932
00:33:08,870 --> 00:33:14,360
content snorts or cata classic IDs

933
00:33:12,559 --> 00:33:17,000
that's been around since the 90s these

934
00:33:14,360 --> 00:33:19,040
things look at network traffic injects

935
00:33:17,000 --> 00:33:21,590
and ingest that traffic and then they

936
00:33:19,040 --> 00:33:24,980
based on some boolean logic or signature

937
00:33:21,590 --> 00:33:27,470
they output an alert so input is network

938
00:33:24,980 --> 00:33:29,780
traffic output is an alert not contacts

939
00:33:27,470 --> 00:33:32,780
not packets just the fact that something

940
00:33:29,780 --> 00:33:36,020
happened and generally it's full text in

941
00:33:32,780 --> 00:33:38,600
etc then you have metadata extraction

942
00:33:36,020 --> 00:33:40,100
based IDS's this is bro or Zeke I keep

943
00:33:38,600 --> 00:33:42,290
saying bro Zeke for everyone don't know

944
00:33:40,100 --> 00:33:44,439
bros a metadata IDs that was recently

945
00:33:42,290 --> 00:33:49,520
renamed due to fun conflict in the name

946
00:33:44,440 --> 00:33:50,840
and so this IDs it looks at all the

947
00:33:49,520 --> 00:33:52,668
network data just like the rule based

948
00:33:50,840 --> 00:33:54,260
IDs but instead of just alerting when it

949
00:33:52,669 --> 00:33:56,179
sees something it takes the time to

950
00:33:54,260 --> 00:33:58,090
actually parse out any elements or

951
00:33:56,179 --> 00:34:02,299
fields from within that network data

952
00:33:58,090 --> 00:34:04,129
essentially parsing metadata so elements

953
00:34:02,299 --> 00:34:06,260
or fields it will not give you full

954
00:34:04,130 --> 00:34:08,450
packet content so the idea here is that

955
00:34:06,260 --> 00:34:10,609
you just feed all the events that are

956
00:34:08,449 --> 00:34:13,339
occurring with they're important or

957
00:34:10,609 --> 00:34:14,600
critical data points the this starts to

958
00:34:13,340 --> 00:34:15,859
get a little bit better than rule based

959
00:34:14,600 --> 00:34:17,960
IDs because it allows you to start doing

960
00:34:15,859 --> 00:34:19,250
time-based analysis and full context

961
00:34:17,960 --> 00:34:21,379
eventing so you can see everything

962
00:34:19,250 --> 00:34:24,440
happening versus only bad thing

963
00:34:21,379 --> 00:34:25,940
happening obviously with more data comes

964
00:34:24,440 --> 00:34:27,950
more overhead so you start hitting

965
00:34:25,940 --> 00:34:29,510
storage concerns and how do you stream

966
00:34:27,949 --> 00:34:31,310
this and how do you detect on and all

967
00:34:29,510 --> 00:34:32,389
this other stuff and then it gets even

968
00:34:31,310 --> 00:34:34,270
more complicated when you start

969
00:34:32,389 --> 00:34:36,590
introducing things like full content

970
00:34:34,270 --> 00:34:38,359
fantastic capability every Network

971
00:34:36,590 --> 00:34:39,980
forensics person in the world will will

972
00:34:38,359 --> 00:34:41,719
swear by give me P cap or give me

973
00:34:39,980 --> 00:34:44,750
nothing like it's the only thing that's

974
00:34:41,719 --> 00:34:46,759
worth it this is great it can be

975
00:34:44,750 --> 00:34:48,710
extremely tough to scale ask your

976
00:34:46,760 --> 00:34:50,450
fortune five sort ends of the world how

977
00:34:48,710 --> 00:34:52,010
much throughput they have in their

978
00:34:50,449 --> 00:34:52,730
network on how long they can store that

979
00:34:52,010 --> 00:34:53,600
if

980
00:34:52,730 --> 00:34:54,770
have a lot of money cuz they're a

981
00:34:53,600 --> 00:34:56,719
fortune five or ten maybe they're

982
00:34:54,770 --> 00:34:58,640
willing to shell for it but many time

983
00:34:56,719 --> 00:35:00,500
cases they're not willing to and quite

984
00:34:58,640 --> 00:35:02,180
frankly the way that most people utilize

985
00:35:00,500 --> 00:35:04,220
this in a soccer and a defensive

986
00:35:02,180 --> 00:35:06,710
scenario is they just run a metadata

987
00:35:04,220 --> 00:35:08,089
parser over all the pcap anyway and so

988
00:35:06,710 --> 00:35:10,100
the primary thing they're working with

989
00:35:08,090 --> 00:35:11,930
is metadata similar to Bro or Zeke and

990
00:35:10,100 --> 00:35:14,990
they really only go back to that full

991
00:35:11,930 --> 00:35:16,940
pcap in a limited fashion sometimes it's

992
00:35:14,990 --> 00:35:20,689
even hard to go recall that full pcap

993
00:35:16,940 --> 00:35:22,190
depending on the system so let's start

994
00:35:20,690 --> 00:35:24,050
with Brewers Noir let's look at a

995
00:35:22,190 --> 00:35:26,000
detection scenario for that MMC

996
00:35:24,050 --> 00:35:28,070
application object so here's an example

997
00:35:26,000 --> 00:35:29,540
signature in the white paper were

998
00:35:28,070 --> 00:35:31,550
releasing with this talk we actually

999
00:35:29,540 --> 00:35:33,800
provide a number of these they're fairly

1000
00:35:31,550 --> 00:35:36,050
plug-and-play this is meant to be whack

1001
00:35:33,800 --> 00:35:38,359
Amole kind of you're basically looking

1002
00:35:36,050 --> 00:35:40,520
for the known bad or known common CL IDs

1003
00:35:38,359 --> 00:35:42,920
that attackers use and so in this case

1004
00:35:40,520 --> 00:35:46,270
we're looking for optimum number three

1005
00:35:42,920 --> 00:35:49,280
now Optum number three depends on what

1006
00:35:46,270 --> 00:35:51,380
can be used across our PC so autom

1007
00:35:49,280 --> 00:35:54,380
number three specifically for the MMC

1008
00:35:51,380 --> 00:35:57,710
object represents remote key class

1009
00:35:54,380 --> 00:35:59,000
object the eye system activator in this

1010
00:35:57,710 --> 00:36:00,770
packet we're also looking for the

1011
00:35:59,000 --> 00:36:02,000
characteristic meow I kind of just put

1012
00:36:00,770 --> 00:36:03,710
it in there because I like saying it on

1013
00:36:02,000 --> 00:36:05,300
stage a lot of fun I don't know why this

1014
00:36:03,710 --> 00:36:06,500
thing is in there I'm sure it represents

1015
00:36:05,300 --> 00:36:08,600
something but it's always in the

1016
00:36:06,500 --> 00:36:10,130
activations so it makes a really good

1017
00:36:08,600 --> 00:36:12,618
thing to include to help weed out any

1018
00:36:10,130 --> 00:36:14,660
potential matches and then the last one

1019
00:36:12,619 --> 00:36:16,400
the content is essentially the the hex

1020
00:36:14,660 --> 00:36:19,368
string looking for that clsid we know

1021
00:36:16,400 --> 00:36:20,570
for so take this take all the list of

1022
00:36:19,369 --> 00:36:22,160
all the objects that people are abusing

1023
00:36:20,570 --> 00:36:24,140
and plug and play class IDs and you

1024
00:36:22,160 --> 00:36:26,359
start to get a little bit context when

1025
00:36:24,140 --> 00:36:28,640
these are used we've had this deployed

1026
00:36:26,359 --> 00:36:30,290
these rules deployed in enterprises now

1027
00:36:28,640 --> 00:36:32,240
so we work in a SAS platforms we got

1028
00:36:30,290 --> 00:36:34,040
lots of data to play with and it

1029
00:36:32,240 --> 00:36:36,259
actually is a very confident signature

1030
00:36:34,040 --> 00:36:37,790
very simple not rocket science but with

1031
00:36:36,260 --> 00:36:39,800
the understanding the protocol it gives

1032
00:36:37,790 --> 00:36:42,470
you that context we actually had a true

1033
00:36:39,800 --> 00:36:45,230
positive detection on this recently with

1034
00:36:42,470 --> 00:36:49,339
this exact signature so it's reliable

1035
00:36:45,230 --> 00:36:50,600
it's it's proven it's worth so diving in

1036
00:36:49,340 --> 00:36:53,090
the next one a little bit more about

1037
00:36:50,600 --> 00:36:54,140
Zeke or bro who's used it see your car

1038
00:36:53,090 --> 00:36:56,000
bro all right a little bit more in the

1039
00:36:54,140 --> 00:36:58,279
audience and a sim people great so

1040
00:36:56,000 --> 00:37:00,050
metadata parser it has three key

1041
00:36:58,280 --> 00:37:02,300
components that allow it to do what it

1042
00:37:00,050 --> 00:37:04,760
does first it ingest data on the network

1043
00:37:02,300 --> 00:37:06,070
those full packets then go to the

1044
00:37:04,760 --> 00:37:08,140
eventing engine

1045
00:37:06,070 --> 00:37:10,720
the eventing engine in bro essentially

1046
00:37:08,140 --> 00:37:13,150
leverages a binary protocol

1047
00:37:10,720 --> 00:37:15,459
specification called bin pack these are

1048
00:37:13,150 --> 00:37:17,770
files that define structures of what

1049
00:37:15,460 --> 00:37:20,530
network traffic looks like so it's a

1050
00:37:17,770 --> 00:37:22,780
very high-level way to define a decom

1051
00:37:20,530 --> 00:37:24,790
request packet looks like this a decom

1052
00:37:22,780 --> 00:37:26,860
response packet looks like this

1053
00:37:24,790 --> 00:37:30,250
so the eventing engine uses these bin

1054
00:37:26,860 --> 00:37:33,610
packs to take these protocols and then

1055
00:37:30,250 --> 00:37:35,170
parse them into fields when it parses

1056
00:37:33,610 --> 00:37:37,630
those fields it then generates an

1057
00:37:35,170 --> 00:37:40,120
internal bro event that's internal to

1058
00:37:37,630 --> 00:37:42,640
the engines and then it has a scripting

1059
00:37:40,120 --> 00:37:44,859
subsystem that allows you to attach to

1060
00:37:42,640 --> 00:37:47,620
events so I can say if the decom request

1061
00:37:44,860 --> 00:37:49,300
happened run my script on all of that

1062
00:37:47,620 --> 00:37:51,460
data it's called a bro script or a Zeke

1063
00:37:49,300 --> 00:37:52,960
script and these are handled by these

1064
00:37:51,460 --> 00:37:54,850
event handlers basically consume all

1065
00:37:52,960 --> 00:37:56,230
these events and then do things by

1066
00:37:54,850 --> 00:37:57,880
default what you see the normal

1067
00:37:56,230 --> 00:38:00,340
functionality of bro is a whole bunch of

1068
00:37:57,880 --> 00:38:02,380
built in scripts that just emit logs so

1069
00:38:00,340 --> 00:38:06,580
you're just getting raw log data of all

1070
00:38:02,380 --> 00:38:09,970
the fields that happen so quite honestly

1071
00:38:06,580 --> 00:38:12,520
looking at this when we first ran into

1072
00:38:09,970 --> 00:38:13,959
this attack scenario we are seeing this

1073
00:38:12,520 --> 00:38:15,280
attack in the wild and we're like well

1074
00:38:13,960 --> 00:38:17,200
we obviously need to detect this let's

1075
00:38:15,280 --> 00:38:18,310
see if anything detects it and we ran it

1076
00:38:17,200 --> 00:38:20,259
through a bro we were kind of

1077
00:38:18,310 --> 00:38:21,520
dumbfounded that like nothing stuck out

1078
00:38:20,260 --> 00:38:23,200
same thing with Wireshark same thing

1079
00:38:21,520 --> 00:38:25,270
with snort it blew our minds that this

1080
00:38:23,200 --> 00:38:26,950
was a thing and it wasn't correctly

1081
00:38:25,270 --> 00:38:28,960
parsing it so we dived in we tried to

1082
00:38:26,950 --> 00:38:30,879
identify why why weren't we getting the

1083
00:38:28,960 --> 00:38:32,950
data that we expected from these open

1084
00:38:30,880 --> 00:38:34,180
source tools and why are many people

1085
00:38:32,950 --> 00:38:35,950
running these open source tools and

1086
00:38:34,180 --> 00:38:38,290
probably not doing this individual unit

1087
00:38:35,950 --> 00:38:40,810
testing being robbed of this experience

1088
00:38:38,290 --> 00:38:42,250
and frankly bro and Zeke's an open

1089
00:38:40,810 --> 00:38:43,810
source project and so anyone can

1090
00:38:42,250 --> 00:38:46,990
contribute to and they rely on that they

1091
00:38:43,810 --> 00:38:48,430
like community contribution so when we

1092
00:38:46,990 --> 00:38:51,939
the first object that we saw or the

1093
00:38:48,430 --> 00:38:53,710
first problem we saw was that our PC

1094
00:38:51,940 --> 00:38:55,480
which is the supported protocol by

1095
00:38:53,710 --> 00:38:57,430
default and the current bro version is a

1096
00:38:55,480 --> 00:38:59,080
very high level protocol it's a Swiss

1097
00:38:57,430 --> 00:39:01,149
Army knife there's many things that

1098
00:38:59,080 --> 00:39:02,650
happen over RPC everything from the

1099
00:39:01,150 --> 00:39:04,360
service controller language to the

1100
00:39:02,650 --> 00:39:05,650
remote registry like all of everything

1101
00:39:04,360 --> 00:39:07,980
you do on the Windows command line

1102
00:39:05,650 --> 00:39:10,600
remotely is all mostly over RPC

1103
00:39:07,980 --> 00:39:13,060
including decom and so there are many

1104
00:39:10,600 --> 00:39:15,910
different forms or subsystems

1105
00:39:13,060 --> 00:39:17,799
within this generic protocol and so what

1106
00:39:15,910 --> 00:39:19,250
is currently implemented in the version

1107
00:39:17,800 --> 00:39:21,140
of Zeke is a

1108
00:39:19,250 --> 00:39:23,480
the high-level generic piece it's the

1109
00:39:21,140 --> 00:39:25,160
RPC component so it's the headers and

1110
00:39:23,480 --> 00:39:27,740
the in point and operation that's called

1111
00:39:25,160 --> 00:39:30,109
but nothing specific to that operation

1112
00:39:27,740 --> 00:39:32,810
so a little bit more of an abstracted

1113
00:39:30,109 --> 00:39:34,250
not related example let's say I want to

1114
00:39:32,810 --> 00:39:36,710
do a service controller action across

1115
00:39:34,250 --> 00:39:38,210
the network I do a create service the

1116
00:39:36,710 --> 00:39:39,530
only thing that's logged in Zeke is the

1117
00:39:38,210 --> 00:39:41,720
fact that the create service happened

1118
00:39:39,530 --> 00:39:44,540
not the service name not the return

1119
00:39:41,720 --> 00:39:46,720
value not this other stuff it's its RPC

1120
00:39:44,540 --> 00:39:48,710
it's not the service controller language

1121
00:39:46,720 --> 00:39:51,379
the other piece that was really

1122
00:39:48,710 --> 00:39:54,440
important to understand and was was

1123
00:39:51,380 --> 00:39:55,910
important to Pete pick out was the fact

1124
00:39:54,440 --> 00:39:57,500
that there's entire functionality in

1125
00:39:55,910 --> 00:39:59,420
Zeke that's commented out in the RPC

1126
00:39:57,500 --> 00:40:01,130
parser like it was attempted to be

1127
00:39:59,420 --> 00:40:02,510
implemented but it didn't get all the

1128
00:40:01,130 --> 00:40:04,070
way there I'm sure the developer likes

1129
00:40:02,510 --> 00:40:05,420
this is a difficult language I'm sure he

1130
00:40:04,070 --> 00:40:07,820
struggled and wanted to get this out

1131
00:40:05,420 --> 00:40:10,250
but at the time alter context completely

1132
00:40:07,820 --> 00:40:12,290
commented out which means that if decom

1133
00:40:10,250 --> 00:40:15,140
which it does often jumps between

1134
00:40:12,290 --> 00:40:17,300
interface context every time you makes a

1135
00:40:15,140 --> 00:40:19,129
jump using alter context every log after

1136
00:40:17,300 --> 00:40:21,380
that's actually not just emitted it's

1137
00:40:19,130 --> 00:40:22,640
wrong it's completely wrong it's logging

1138
00:40:21,380 --> 00:40:24,890
the wrong end points to the wrong

1139
00:40:22,640 --> 00:40:27,348
operations because state tracking is

1140
00:40:24,890 --> 00:40:29,359
performed only on the binds not alter

1141
00:40:27,349 --> 00:40:31,550
context so important to know that if

1142
00:40:29,359 --> 00:40:33,500
you're using this right now you might

1143
00:40:31,550 --> 00:40:37,220
not be seeing the accurate logs you want

1144
00:40:33,500 --> 00:40:39,109
to check your version of Z so what we

1145
00:40:37,220 --> 00:40:40,490
try to do for the purpose of proof of

1146
00:40:39,109 --> 00:40:42,290
concept here to show how we could be

1147
00:40:40,490 --> 00:40:43,339
done as we took the easiest road we

1148
00:40:42,290 --> 00:40:45,440
could not necessarily the most

1149
00:40:43,339 --> 00:40:47,480
performant or reliable and we took every

1150
00:40:45,440 --> 00:40:49,250
RPC request and said for every request

1151
00:40:47,480 --> 00:40:52,130
we're gonna pass the stub so we're gonna

1152
00:40:49,250 --> 00:40:55,130
pass the stub along to the requests and

1153
00:40:52,130 --> 00:40:57,200
so now I'm this is not performance I

1154
00:40:55,130 --> 00:40:58,730
this is alpha 3 alpha extra state on

1155
00:40:57,200 --> 00:41:02,118
Sage I'm a researcher not an engineer

1156
00:40:58,730 --> 00:41:04,160
locally and so this basically allows me

1157
00:41:02,119 --> 00:41:06,740
to take scripts and do whatever I want

1158
00:41:04,160 --> 00:41:09,859
with that stub so I can say if this is

1159
00:41:06,740 --> 00:41:11,660
an SVC control operation parse this bury

1160
00:41:09,859 --> 00:41:14,598
this area and the stub and this is the

1161
00:41:11,660 --> 00:41:15,799
new field I want to emit and so we get

1162
00:41:14,599 --> 00:41:17,570
to the point where I can write scripts

1163
00:41:15,800 --> 00:41:19,700
like this which basically say if this is

1164
00:41:17,570 --> 00:41:22,040
a remote gate class object call parse

1165
00:41:19,700 --> 00:41:25,220
these parts of the stub and call that

1166
00:41:22,040 --> 00:41:28,050
the remote class ID so I can start to

1167
00:41:25,220 --> 00:41:30,339
parse out individual field within our PC

1168
00:41:28,050 --> 00:41:32,890
what this allows us to do let's rerun

1169
00:41:30,340 --> 00:41:34,570
this attack real quick we're gonna run

1170
00:41:32,890 --> 00:41:37,120
the MMC application attack what this

1171
00:41:34,570 --> 00:41:39,550
allows us to do is very quickly get in

1172
00:41:37,120 --> 00:41:42,730
and start to see when things have gone

1173
00:41:39,550 --> 00:41:45,580
bad so you can see here I just ran that

1174
00:41:42,730 --> 00:41:47,560
attack and my magic zoom in I got the

1175
00:41:45,580 --> 00:41:49,720
class ID of what went across the network

1176
00:41:47,560 --> 00:41:52,120
this is slightly improved from what I

1177
00:41:49,720 --> 00:41:53,890
had beginning and I also get my sir cata

1178
00:41:52,120 --> 00:41:57,009
alert that it recognized the same class

1179
00:41:53,890 --> 00:41:58,450
ID so it's a little bit better it's not

1180
00:41:57,010 --> 00:42:00,430
perfect but better we can start to get

1181
00:41:58,450 --> 00:42:02,710
telemetry over which decom objects are

1182
00:42:00,430 --> 00:42:04,960
being used in networks so we can get at

1183
00:42:02,710 --> 00:42:07,330
least a basic IDs indication of known

1184
00:42:04,960 --> 00:42:09,220
bad or suspicious and really the goal

1185
00:42:07,330 --> 00:42:11,049
here is to empower detection that's

1186
00:42:09,220 --> 00:42:13,390
specific with sir cotta and Zeke is

1187
00:42:11,050 --> 00:42:15,280
empower detection and power forensics

1188
00:42:13,390 --> 00:42:16,480
and so in this case I can do one of a

1189
00:42:15,280 --> 00:42:18,130
couple things I can just look for all

1190
00:42:16,480 --> 00:42:19,720
the new and bad that's the easy one you

1191
00:42:18,130 --> 00:42:20,650
just cross that off your list I can sit

1192
00:42:19,720 --> 00:42:22,779
down in 20 minutes

1193
00:42:20,650 --> 00:42:24,580
knock that out but then you can start to

1194
00:42:22,780 --> 00:42:26,470
do more fun things like I can start to

1195
00:42:24,580 --> 00:42:28,299
introduce statistical modeling on all of

1196
00:42:26,470 --> 00:42:30,220
the decom data in the network and look

1197
00:42:28,300 --> 00:42:32,380
for abnormalities I can start to do

1198
00:42:30,220 --> 00:42:34,240
anomaly detection I can start to do

1199
00:42:32,380 --> 00:42:35,830
first observes like the first time I

1200
00:42:34,240 --> 00:42:37,990
ever see a decom network up here in the

1201
00:42:35,830 --> 00:42:39,340
network why is it there and then I

1202
00:42:37,990 --> 00:42:40,959
always thought a fun project this is

1203
00:42:39,340 --> 00:42:43,150
sort of a sidebar but I always thought a

1204
00:42:40,960 --> 00:42:45,310
really fun project would be to leverage

1205
00:42:43,150 --> 00:42:48,190
all of this decom eventing data to try

1206
00:42:45,310 --> 00:42:49,690
to statistically represent human

1207
00:42:48,190 --> 00:42:51,490
interaction with be calm versus

1208
00:42:49,690 --> 00:42:53,950
programmatic or machine interaction we

1209
00:42:51,490 --> 00:42:55,779
be calm so like if I'm a PowerShell guy

1210
00:42:53,950 --> 00:42:57,430
and I'm like in PowerShell querying all

1211
00:42:55,780 --> 00:42:59,290
the help Docs and going back and forth

1212
00:42:57,430 --> 00:43:00,640
between functions that's gonna look a

1213
00:42:59,290 --> 00:43:02,950
lot different with the I type info

1214
00:43:00,640 --> 00:43:05,680
operations then if I'm a script that

1215
00:43:02,950 --> 00:43:07,450
simply runs one function so being able

1216
00:43:05,680 --> 00:43:09,129
to pick out like hey human is using V

1217
00:43:07,450 --> 00:43:10,870
converse as a program is might be a

1218
00:43:09,130 --> 00:43:14,680
really interesting problem set to use

1219
00:43:10,870 --> 00:43:16,569
that data for so when it comes to pcap

1220
00:43:14,680 --> 00:43:18,359
analysis Wireshark is to go to tool for

1221
00:43:16,570 --> 00:43:20,680
most people I pretty much use it daily

1222
00:43:18,360 --> 00:43:21,820
it's one of my favourite tools and of

1223
00:43:20,680 --> 00:43:25,180
course it's used extensively in

1224
00:43:21,820 --> 00:43:26,740
forensics and response situations for

1225
00:43:25,180 --> 00:43:29,200
its protocol parsing it has two main

1226
00:43:26,740 --> 00:43:30,729
components that help it along one our

1227
00:43:29,200 --> 00:43:33,189
dissectors and these are built directly

1228
00:43:30,730 --> 00:43:36,070
into the Wireshark binary and kind of it

1229
00:43:33,190 --> 00:43:38,440
early iteratively take data parse it and

1230
00:43:36,070 --> 00:43:39,850
hand it off to other dissectors so that

1231
00:43:38,440 --> 00:43:41,890
they can add more information that

1232
00:43:39,850 --> 00:43:43,180
eventually makes it to the end user

1233
00:43:41,890 --> 00:43:44,950
they're also plugins and these are

1234
00:43:43,180 --> 00:43:46,629
external components to Wireshark written

1235
00:43:44,950 --> 00:43:49,029
in Lua so these can be added in at any

1236
00:43:46,630 --> 00:43:51,730
time and they just generally extend wire

1237
00:43:49,030 --> 00:43:56,590
sharks functionality and these can

1238
00:43:51,730 --> 00:43:57,520
include protocol dissection as well so

1239
00:43:56,590 --> 00:44:00,040
again we're going to return to our

1240
00:43:57,520 --> 00:44:04,120
screenshot of the I type info operations

1241
00:44:00,040 --> 00:44:06,370
again quite a mess very high-level we

1242
00:44:04,120 --> 00:44:07,779
struggled for a couple hours to kind of

1243
00:44:06,370 --> 00:44:09,040
work through and understand what was

1244
00:44:07,780 --> 00:44:11,470
going on here when we first started

1245
00:44:09,040 --> 00:44:12,880
looking at these peak apps so Wireshark

1246
00:44:11,470 --> 00:44:13,600
handle law they're classic decom

1247
00:44:12,880 --> 00:44:16,060
operations

1248
00:44:13,600 --> 00:44:17,529
properly I type info completely

1249
00:44:16,060 --> 00:44:19,240
unemployment 'add and then a couple

1250
00:44:17,530 --> 00:44:21,040
other endpoints and operations lacked

1251
00:44:19,240 --> 00:44:23,740
full dissections so if you recall back

1252
00:44:21,040 --> 00:44:25,420
to the gate class object it parsed out

1253
00:44:23,740 --> 00:44:27,129
its name and stuff but it left the stub

1254
00:44:25,420 --> 00:44:29,380
there so we had to kind of dig through

1255
00:44:27,130 --> 00:44:32,410
and find that class ID within the byte

1256
00:44:29,380 --> 00:44:35,560
stream so to fix this we decided to go

1257
00:44:32,410 --> 00:44:37,509
ahead and add on to be Conner two wire

1258
00:44:35,560 --> 00:44:40,270
sharks existing decom dissector so it

1259
00:44:37,510 --> 00:44:42,850
exists as a dye sector not a plug-in so

1260
00:44:40,270 --> 00:44:45,490
we added a couple things to that and

1261
00:44:42,850 --> 00:44:47,589
then also added our type info that

1262
00:44:45,490 --> 00:44:49,750
sector along with it and so this took a

1263
00:44:47,590 --> 00:44:52,150
lot of protocol reverse engineering and

1264
00:44:49,750 --> 00:44:53,680
of course learning how to actually write

1265
00:44:52,150 --> 00:44:55,840
Wireshark dissectors and this was my

1266
00:44:53,680 --> 00:44:57,430
first time doing this as you saw from

1267
00:44:55,840 --> 00:45:00,300
Justin's slide I started to go a little

1268
00:44:57,430 --> 00:45:03,310
bit crazy in terms of how I was taking

1269
00:45:00,300 --> 00:45:05,260
apart this protocol so here are a couple

1270
00:45:03,310 --> 00:45:06,670
tips for anyone who's interested in

1271
00:45:05,260 --> 00:45:08,140
maybe getting started in protocol

1272
00:45:06,670 --> 00:45:10,330
reverse engineering or want to try and

1273
00:45:08,140 --> 00:45:12,730
contribute back to Wireshark the first

1274
00:45:10,330 --> 00:45:15,640
thing is that the existing tech sectors

1275
00:45:12,730 --> 00:45:17,200
and plugins were incredible for helping

1276
00:45:15,640 --> 00:45:18,700
me understand exactly what should be

1277
00:45:17,200 --> 00:45:21,460
occurring within them so they helped to

1278
00:45:18,700 --> 00:45:23,770
provide a structure as well as show off

1279
00:45:21,460 --> 00:45:25,060
any functions that already existed for

1280
00:45:23,770 --> 00:45:27,280
certain operations so it saved me a

1281
00:45:25,060 --> 00:45:28,840
bunch of time also using official

1282
00:45:27,280 --> 00:45:31,450
documentation specifically for the

1283
00:45:28,840 --> 00:45:33,790
protocols so things like RFC's and in

1284
00:45:31,450 --> 00:45:35,680
this case MSDN articles were incredibly

1285
00:45:33,790 --> 00:45:38,050
helpful as they outline exactly what a

1286
00:45:35,680 --> 00:45:39,879
structure should look like so things

1287
00:45:38,050 --> 00:45:41,980
like properties and their associated

1288
00:45:39,880 --> 00:45:44,350
types so you can begin to pick out where

1289
00:45:41,980 --> 00:45:46,660
things need to be within or what things

1290
00:45:44,350 --> 00:45:49,210
should exist within a series of bytes

1291
00:45:46,660 --> 00:45:52,240
and then by using multiple variations of

1292
00:45:49,210 --> 00:45:55,180
an attack so changing up parameters or I

1293
00:45:52,240 --> 00:45:55,779
even implemented a custom comma or decom

1294
00:45:55,180 --> 00:45:57,310
object so

1295
00:45:55,780 --> 00:45:58,930
that I could change like the number of

1296
00:45:57,310 --> 00:46:00,990
parameters I had the types of the

1297
00:45:58,930 --> 00:46:03,100
parameters you can start to pick out

1298
00:46:00,990 --> 00:46:04,569
known properties so you can say okay

1299
00:46:03,100 --> 00:46:06,520
these are probably the parameters this

1300
00:46:04,570 --> 00:46:08,110
is probably an array showing all the

1301
00:46:06,520 --> 00:46:11,290
parameters here this is the length of

1302
00:46:08,110 --> 00:46:13,810
the array at such-and-such and this is

1303
00:46:11,290 --> 00:46:16,000
the result so now you can see that the I

1304
00:46:13,810 --> 00:46:17,799
type info operations are fully parsed

1305
00:46:16,000 --> 00:46:20,200
and dissected not only can you tell

1306
00:46:17,800 --> 00:46:22,690
exactly what operation is occurring but

1307
00:46:20,200 --> 00:46:24,129
also you get a full breakdown of what's

1308
00:46:22,690 --> 00:46:25,240
occurring within them and this is

1309
00:46:24,130 --> 00:46:27,040
something I'm going to be trying to

1310
00:46:25,240 --> 00:46:30,910
contribute and make a pull request to

1311
00:46:27,040 --> 00:46:32,410
Wireshark when we get back so we're

1312
00:46:30,910 --> 00:46:33,640
network people we obviously sit up on

1313
00:46:32,410 --> 00:46:35,200
the stage a bunch talk to all about the

1314
00:46:33,640 --> 00:46:37,359
network but we'd be silly to not mention

1315
00:46:35,200 --> 00:46:39,790
end point simple fact of the matter is

1316
00:46:37,360 --> 00:46:41,020
is bad guys evade just like they know

1317
00:46:39,790 --> 00:46:42,520
that people are watching they try to

1318
00:46:41,020 --> 00:46:44,590
evade so let's say they're focusing

1319
00:46:42,520 --> 00:46:46,000
purely on evading the network anyone

1320
00:46:44,590 --> 00:46:47,500
who's doing detection on the enterprise

1321
00:46:46,000 --> 00:46:49,180
scale really needs to rely on both your

1322
00:46:47,500 --> 00:46:50,590
network data and your endpoint data and

1323
00:46:49,180 --> 00:46:53,290
your application logs and the whole mix

1324
00:46:50,590 --> 00:46:55,480
of that and so we'd be negligent to not

1325
00:46:53,290 --> 00:46:56,200
talk at least I slide about endpoint do

1326
00:46:55,480 --> 00:46:58,540
you know that there are ways for

1327
00:46:56,200 --> 00:46:59,770
adversaries to evade alter context is an

1328
00:46:58,540 --> 00:47:02,230
obvious one given the current

1329
00:46:59,770 --> 00:47:03,880
implementation packet privacy you can

1330
00:47:02,230 --> 00:47:05,710
actually force the packet contents of

1331
00:47:03,880 --> 00:47:07,570
RPC to be encrypted so we miss all the

1332
00:47:05,710 --> 00:47:10,030
underlying decom stuff well note here

1333
00:47:07,570 --> 00:47:11,650
though that in most networks I'd say

1334
00:47:10,030 --> 00:47:13,180
almost all the ones we monitor like this

1335
00:47:11,650 --> 00:47:14,530
isn't a thing yet it's coming but it's

1336
00:47:13,180 --> 00:47:16,270
not a thing so if you start implementing

1337
00:47:14,530 --> 00:47:17,860
packet privacy as an adversary it's

1338
00:47:16,270 --> 00:47:19,450
actually an indicator like you turning

1339
00:47:17,860 --> 00:47:20,920
on encryption stands out to me because

1340
00:47:19,450 --> 00:47:23,200
it's not normally there it's not the

1341
00:47:20,920 --> 00:47:25,390
default domain setting so command line

1342
00:47:23,200 --> 00:47:27,029
is king for endpoint on this stuff I'll

1343
00:47:25,390 --> 00:47:29,049
note that when any time you launch a

1344
00:47:27,030 --> 00:47:31,240
decom process so let's say we're using

1345
00:47:29,050 --> 00:47:33,670
an outlet comm object it spawns over SVC

1346
00:47:31,240 --> 00:47:34,060
it spawns under the decom Launch SVC

1347
00:47:33,670 --> 00:47:37,240
host

1348
00:47:34,060 --> 00:47:39,100
it is very easy to say which decom mob

1349
00:47:37,240 --> 00:47:41,049
or which processes are spawning under

1350
00:47:39,100 --> 00:47:42,790
this host and which ones should be and

1351
00:47:41,050 --> 00:47:43,990
should not be so like Outlook probably

1352
00:47:42,790 --> 00:47:46,330
shouldn't be spawning random become

1353
00:47:43,990 --> 00:47:48,189
services all the time and then another

1354
00:47:46,330 --> 00:47:49,960
one is a lot of the office applications

1355
00:47:48,190 --> 00:47:52,150
have command line parameters - embedding

1356
00:47:49,960 --> 00:47:53,440
or / automation for their decom objects

1357
00:47:52,150 --> 00:47:55,240
when they start up so it could be a good

1358
00:47:53,440 --> 00:47:57,310
thing to go look for and this is this is

1359
00:47:55,240 --> 00:48:00,100
implemented by the actual underlying

1360
00:47:57,310 --> 00:48:01,810
services themselves so we'll run in

1361
00:48:00,100 --> 00:48:03,970
short on time big takeaways we want you

1362
00:48:01,810 --> 00:48:06,250
to walk away with the detection the

1363
00:48:03,970 --> 00:48:08,049
repeatable and resection process to

1364
00:48:06,250 --> 00:48:08,690
evaluate your tools emulate that

1365
00:48:08,050 --> 00:48:10,579
adversary

1366
00:48:08,690 --> 00:48:12,710
look at those components that are

1367
00:48:10,579 --> 00:48:15,049
involved conducting analysis to identify

1368
00:48:12,710 --> 00:48:17,059
strict and loose components build

1369
00:48:15,049 --> 00:48:19,099
detection criteria around that test it

1370
00:48:17,059 --> 00:48:20,780
out deploy and gain advantage if your

1371
00:48:19,099 --> 00:48:22,039
tools don't allow you to do it better

1372
00:48:20,780 --> 00:48:24,319
the tools that's what they're there for

1373
00:48:22,039 --> 00:48:26,210
in many of the open source cases in the

1374
00:48:24,319 --> 00:48:29,509
non decomp specific take away is kind of

1375
00:48:26,210 --> 00:48:30,920
that raw mission like we're there to

1376
00:48:29,510 --> 00:48:32,450
detect bad guys on the defensive side

1377
00:48:30,920 --> 00:48:34,339
and if you're a red team or a pen tester

1378
00:48:32,450 --> 00:48:36,078
you're there to help us detect bad guys

1379
00:48:34,339 --> 00:48:38,509
so it's it's all a big happy community

1380
00:48:36,079 --> 00:48:39,619
work together understand the threats and

1381
00:48:38,510 --> 00:48:41,329
figure out how to stop them

1382
00:48:39,619 --> 00:48:42,530
understanding is a key component that

1383
00:48:41,329 --> 00:48:43,970
you have to start with you have to

1384
00:48:42,530 --> 00:48:45,829
understand the protocols you have to

1385
00:48:43,970 --> 00:48:47,149
understand the threats so I think we

1386
00:48:45,829 --> 00:48:51,530
have one minute so we might be able to

1387
00:48:47,150 --> 00:48:54,589
get a question and luckily only one

1388
00:48:51,530 --> 00:48:57,520
question yes or you guys are holding

1389
00:48:54,589 --> 00:48:57,520
back appreciate that

1390
00:49:01,600 --> 00:49:03,600
Oh

1391
00:49:06,620 --> 00:49:12,500
[Music]

1392
00:49:16,610 --> 00:49:20,100
that's a great question the question was

1393
00:49:18,870 --> 00:49:22,049
how do you implement this in a cloud

1394
00:49:20,100 --> 00:49:22,920
environment TLDR like you know you have

1395
00:49:22,050 --> 00:49:26,340
to worry about other people's

1396
00:49:22,920 --> 00:49:29,520
environments too so two answers to that

1397
00:49:26,340 --> 00:49:30,990
or one explanation there are network

1398
00:49:29,520 --> 00:49:32,610
monitoring capabilities that are in

1399
00:49:30,990 --> 00:49:34,229
cloud native capabilities but they're

1400
00:49:32,610 --> 00:49:36,150
mostly their flow so you don't get not

1401
00:49:34,230 --> 00:49:37,530
only do you not get RPC level data

1402
00:49:36,150 --> 00:49:39,060
you're not getting Beacom data you're

1403
00:49:37,530 --> 00:49:40,170
not getting any of the bottom neath you

1404
00:49:39,060 --> 00:49:41,730
could look at port numbers you could

1405
00:49:40,170 --> 00:49:43,800
look at flow behaviors most of these

1406
00:49:41,730 --> 00:49:45,660
cloud environments our server lands and

1407
00:49:43,800 --> 00:49:47,490
so like should your servers be even

1408
00:49:45,660 --> 00:49:50,520
exposing this do you see connections to

1409
00:49:47,490 --> 00:49:51,899
them etc that's a very Wild West

1410
00:49:50,520 --> 00:49:53,640
approach in practice I would say that'd

1411
00:49:51,900 --> 00:49:55,440
be very difficult flow data is actually

1412
00:49:53,640 --> 00:49:57,660
very hard to do not reliable detecting

1413
00:49:55,440 --> 00:49:59,850
around there's another approach which is

1414
00:49:57,660 --> 00:50:01,259
many vendors I will not do too much

1415
00:49:59,850 --> 00:50:02,790
vendor pitching many vendors sell

1416
00:50:01,260 --> 00:50:04,830
technology that would get you full pcap

1417
00:50:02,790 --> 00:50:06,870
data on in the cloud environments there

1418
00:50:04,830 --> 00:50:08,490
are pluses and minuses to that in

1419
00:50:06,870 --> 00:50:10,859
throughput and bandwidth and processing

1420
00:50:08,490 --> 00:50:12,660
power and stuff but there is ways there

1421
00:50:10,860 --> 00:50:13,950
are ways to gain full pcap contents

1422
00:50:12,660 --> 00:50:15,420
inside the cloud environments you might

1423
00:50:13,950 --> 00:50:17,730
be something you select on your crown

1424
00:50:15,420 --> 00:50:19,410
jewel servers my honor on a small subset

1425
00:50:17,730 --> 00:50:22,610
but we've seen success with that

1426
00:50:19,410 --> 00:50:25,410
technique and gaining some visibility

1427
00:50:22,610 --> 00:50:26,730
and that is it for me I am up on time

1428
00:50:25,410 --> 00:50:30,629
thank you guys for attending

1429
00:50:26,730 --> 00:50:30,630
[Applause]

