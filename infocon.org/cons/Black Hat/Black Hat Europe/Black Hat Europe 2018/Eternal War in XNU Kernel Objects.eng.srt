1
00:00:00,000 --> 00:00:06,660
hi good afternoon everyone today I will

2
00:00:03,000 --> 00:00:10,410
present a topic about iOS and Mac OS

3
00:00:06,660 --> 00:00:14,460
kernel security the title is internal

4
00:00:10,410 --> 00:00:18,080
war in x and y o connell objects I will

5
00:00:14,460 --> 00:00:21,890
not only discuss the the attack

6
00:00:18,080 --> 00:00:26,848
techniques but also the defense

7
00:00:21,890 --> 00:00:29,180
mechanism as well so let's start our

8
00:00:26,849 --> 00:00:29,180
talk

9
00:00:30,529 --> 00:00:37,860
firstly let me brief introduce myself

10
00:00:33,870 --> 00:00:40,260
and my teammates my name is Min Jung

11
00:00:37,860 --> 00:00:45,030
you can call me spark I'm a security

12
00:00:40,260 --> 00:00:48,329
expert at Alibaba I caught my PhD in the

13
00:00:45,030 --> 00:00:51,629
CEO HK and I'm a member of Blue Lotus

14
00:00:48,329 --> 00:00:55,410
and inside labs I presented my

15
00:00:51,629 --> 00:00:59,280
researches at ice a black head desk on

16
00:00:55,410 --> 00:01:03,328
each ITB is a exception my teammates is

17
00:00:59,280 --> 00:01:06,689
showing they also worked for Alibaba he

18
00:01:03,329 --> 00:01:12,600
is a PhD from Shanghai University and he

19
00:01:06,689 --> 00:01:16,169
published papers on big fall ok let's

20
00:01:12,600 --> 00:01:19,199
start our talk we know that jailbreaking

21
00:01:16,170 --> 00:01:23,400
in general means breaking the device out

22
00:01:19,200 --> 00:01:26,990
of its Jill and Apple devices most

23
00:01:23,400 --> 00:01:31,829
famous chilled devices among the world

24
00:01:26,990 --> 00:01:35,850
iOS Mac OS watch OS and TV iOS operating

25
00:01:31,829 --> 00:01:42,809
systems developed by Apple and using

26
00:01:35,850 --> 00:01:46,320
Apple devices all about systems they

27
00:01:42,810 --> 00:01:49,560
deploy a sim hybrid kernel structure

28
00:01:46,320 --> 00:01:52,439
called axon you unfortunately as

29
00:01:49,560 --> 00:01:54,570
fighting and analyzing techniques

30
00:01:52,439 --> 00:01:59,548
advanced the number of vulnerabilities

31
00:01:54,570 --> 00:02:03,600
in X nu has increased rapidly in recent

32
00:01:59,549 --> 00:02:06,710
years there are cases that the kana

33
00:02:03,600 --> 00:02:10,370
vulnerabilities have been used to

34
00:02:06,710 --> 00:02:13,230
escalate the privilege of attack

35
00:02:10,370 --> 00:02:13,980
attackers and get a full control of the

36
00:02:13,230 --> 00:02:16,519
system

37
00:02:13,980 --> 00:02:20,429
for example jailbreak the device

38
00:02:16,520 --> 00:02:23,819
accordingly ever have developed and

39
00:02:20,430 --> 00:02:26,489
deployed multi security mechanism that

40
00:02:23,819 --> 00:02:33,988
can make the exploitation of the device

41
00:02:26,489 --> 00:02:37,830
harder for instance Apple deployed DEP

42
00:02:33,989 --> 00:02:41,970
as known as theta exclusion prevention

43
00:02:37,830 --> 00:02:46,650
and ksar as known as kernel addressed

44
00:02:41,970 --> 00:02:51,810
base layout randomization for iOS 6 and

45
00:02:46,650 --> 00:02:54,480
Mac OS 10.8 so what is DP it is a system

46
00:02:51,810 --> 00:02:57,239
level memory protection feature which

47
00:02:54,480 --> 00:03:01,200
enables the system to mark relevant

48
00:02:57,239 --> 00:03:04,829
piece of memory as 9x cutable to prevent

49
00:03:01,200 --> 00:03:07,859
code injection attack to brick this

50
00:03:04,829 --> 00:03:11,239
protection code reuse attacks were

51
00:03:07,860 --> 00:03:14,130
proposed for example our peer

52
00:03:11,239 --> 00:03:16,860
return-oriented programming attackers

53
00:03:14,130 --> 00:03:21,299
could find gadgets in the memory and let

54
00:03:16,860 --> 00:03:27,060
the PC jump to them to make this to make

55
00:03:21,299 --> 00:03:29,910
this our . r s is hard to protect ksar

56
00:03:27,060 --> 00:03:34,769
memory protection recognized the

57
00:03:29,910 --> 00:03:37,319
location of virus memory sec segments

58
00:03:34,769 --> 00:03:41,250
for example code code segment and its

59
00:03:37,319 --> 00:03:43,980
date segment to buy back to bypass key

60
00:03:41,250 --> 00:03:47,880
our attackers you really need to

61
00:03:43,980 --> 00:03:51,328
leverage information information linkage

62
00:03:47,880 --> 00:03:53,940
box or corrupt some kernel objects to

63
00:03:51,329 --> 00:04:01,590
obtain the addresses of gadgets in the

64
00:03:53,940 --> 00:04:03,989
memory in previous by using memory

65
00:04:01,590 --> 00:04:07,200
corruption box it is possible to

66
00:04:03,989 --> 00:04:10,910
disclose the information of adjacent

67
00:04:07,200 --> 00:04:14,730
objects in the zoom of this in esteem

68
00:04:10,910 --> 00:04:17,130
object size in the previous version of x

69
00:04:14,730 --> 00:04:20,399
and you the free list that contains all

70
00:04:17,130 --> 00:04:25,950
the friedkin objects inside a zone

71
00:04:20,399 --> 00:04:29,159
uses the LIFO last year first out policy

72
00:04:25,950 --> 00:04:32,190
hence the layout of Cana objects in the

73
00:04:29,160 --> 00:04:35,460
same size zone is predictable to make

74
00:04:32,190 --> 00:04:38,850
the adjacent objects hard to predict

75
00:04:35,460 --> 00:04:43,590
ever deployed mitigation called freely

76
00:04:38,850 --> 00:04:46,190
stir randomization in iOS 9.2 and Mac OS

77
00:04:43,590 --> 00:04:49,679
10 point 11 point 2

78
00:04:46,190 --> 00:04:52,860
well Colonel object is freed the X and

79
00:04:49,680 --> 00:04:55,500
you will read only choose the first or

80
00:04:52,860 --> 00:04:58,320
last position of the free list to store

81
00:04:55,500 --> 00:05:01,190
the freed element in this case it is

82
00:04:58,320 --> 00:05:06,920
hard for attackers to corrupt the

83
00:05:01,190 --> 00:05:06,920
connect in a zoom in a predictable way I

84
00:05:08,690 --> 00:05:15,240
like the free operations in user space

85
00:05:11,900 --> 00:05:18,030
for example the free function that only

86
00:05:15,240 --> 00:05:22,230
need one parameter which is the address

87
00:05:18,030 --> 00:05:25,440
of the buffer to be freed thrilling

88
00:05:22,230 --> 00:05:29,460
freely in a buffer in cosby's require

89
00:05:25,440 --> 00:05:32,700
Eric requires an extra parameter which

90
00:05:29,460 --> 00:05:36,299
is the size of the buffer this is

91
00:05:32,700 --> 00:05:38,880
because the free buffering needs to be

92
00:05:36,300 --> 00:05:45,740
returned to the zoom wins it was

93
00:05:38,880 --> 00:05:48,390
allocated for example a keylock 256 song

94
00:05:45,740 --> 00:05:50,760
attacker can use a buffer of low

95
00:05:48,390 --> 00:05:55,500
vulnerability to change the size value

96
00:05:50,760 --> 00:06:01,200
of vmf copy object to a random for

97
00:05:55,500 --> 00:06:04,950
example 512 soon the Eric he can invoke

98
00:06:01,200 --> 00:06:08,190
Mac Mac message to free this object of

99
00:06:04,950 --> 00:06:10,380
that the attacker can allocate a new can

100
00:06:08,190 --> 00:06:14,190
objects through Mac message with the

101
00:06:10,380 --> 00:06:16,830
change size into the original zone by

102
00:06:14,190 --> 00:06:20,280
using this random free attack attackers

103
00:06:16,830 --> 00:06:22,620
can safely manipulate adjacent objects

104
00:06:20,280 --> 00:06:26,099
without triggering memory creep

105
00:06:22,620 --> 00:06:30,330
corruption parks for multi time to

106
00:06:26,100 --> 00:06:33,480
mitigate this attack ever added a new

107
00:06:30,330 --> 00:06:38,820
zone metadata region structure for each

108
00:06:33,480 --> 00:06:41,370
zooming iOS and Mac OS 10 point 11

109
00:06:38,820 --> 00:06:44,909
this structural records allocation and

110
00:06:41,370 --> 00:06:49,200
free status for each for each object in

111
00:06:44,910 --> 00:06:53,280
eurozone and gas panic between and get

112
00:06:49,200 --> 00:06:57,090
panic when it detects the in in

113
00:06:53,280 --> 00:06:59,820
conference in constants in constancy

114
00:06:57,090 --> 00:07:04,400
between the extra size of an object and

115
00:06:59,820 --> 00:07:04,400
the size used the ins of free function

116
00:07:07,250 --> 00:07:13,880
the main goal for the attackers to

117
00:07:10,350 --> 00:07:17,460
obtain multi is to obtain motive

118
00:07:13,880 --> 00:07:21,480
primitives to read write kernel memory

119
00:07:17,460 --> 00:07:23,729
and execute arbitrary code even in case

120
00:07:21,480 --> 00:07:27,420
that all mitigations are deployed in a

121
00:07:23,730 --> 00:07:31,830
system but ever deployed too many

122
00:07:27,420 --> 00:07:33,780
medications to crop the older color

123
00:07:31,830 --> 00:07:37,800
object is very hard

124
00:07:33,780 --> 00:07:40,340
therefore attackers try to find a new

125
00:07:37,800 --> 00:07:46,800
color object which can be easily

126
00:07:40,340 --> 00:07:50,429
compromised so this new target is is the

127
00:07:46,800 --> 00:07:53,040
mark port so what is Mac thought a Mac

128
00:07:50,430 --> 00:07:58,290
products in you is a kernel controlled

129
00:07:53,040 --> 00:08:01,020
communication channel it provides it

130
00:07:58,290 --> 00:08:04,710
provides basic operations to pass

131
00:08:01,020 --> 00:08:09,710
messages between stress and it can be

132
00:08:04,710 --> 00:08:13,200
used to represent resources services

133
00:08:09,710 --> 00:08:18,419
let's provide objects dialog says to

134
00:08:13,200 --> 00:08:21,360
these obstructions in user space macros

135
00:08:18,420 --> 00:08:28,470
are integer numbers like handlers for

136
00:08:21,360 --> 00:08:31,440
IPC protocol objects in the kernel a

137
00:08:28,470 --> 00:08:35,400
mock pod is represented by a pointer to

138
00:08:31,440 --> 00:08:39,000
an IPC pore structure there are 40 types

139
00:08:35,400 --> 00:08:42,809
of IPC paul objects in X in you and i/o

140
00:08:39,000 --> 00:08:45,780
bytes field defines the type of it io

141
00:08:42,809 --> 00:08:48,959
references field counts the reference

142
00:08:45,780 --> 00:08:52,620
number of the object locking related the

143
00:08:48,960 --> 00:08:56,390
data is stored in the IO lock data field

144
00:08:52,620 --> 00:08:59,910
Simar field is a pointer that points to

145
00:08:56,390 --> 00:09:03,210
point two receivers IPC space for

146
00:08:59,910 --> 00:09:05,069
example IPC space Colonel IP key object

147
00:09:03,210 --> 00:09:07,710
the field points to a con or data

148
00:09:05,070 --> 00:09:15,390
structure according to the kernel object

149
00:09:07,710 --> 00:09:18,320
type as we mentioned before the main

150
00:09:15,390 --> 00:09:21,540
goal for the attacker is to obtain

151
00:09:18,320 --> 00:09:23,640
multiple primitives to read write kernel

152
00:09:21,540 --> 00:09:26,449
memory and try to execute the kernel

153
00:09:23,640 --> 00:09:29,040
code even in case that multiple

154
00:09:26,450 --> 00:09:32,430
mitigations are deployed in the system

155
00:09:29,040 --> 00:09:35,900
so attackers leverage especially no

156
00:09:32,430 --> 00:09:39,660
object which is IP support to obtain

157
00:09:35,900 --> 00:09:42,540
multiple primitives by issuing system

158
00:09:39,660 --> 00:09:44,939
calls in user mode since the proposed

159
00:09:42,540 --> 00:09:48,060
the method is mainly based on the IP

160
00:09:44,940 --> 00:09:51,470
support cannot object we call it Mac pod

161
00:09:48,060 --> 00:09:54,300
oriented programming as known as pupae

162
00:09:51,470 --> 00:09:57,209
note that puget technique was not

163
00:09:54,300 --> 00:10:00,510
created by us we saw it in many public

164
00:09:57,209 --> 00:10:06,390
exploits and then summarizes koduri user

165
00:10:00,510 --> 00:10:11,550
text for systematically study most of

166
00:10:06,390 --> 00:10:15,089
you peep parameter of primitives mig

167
00:10:11,550 --> 00:10:16,849
messages luckily xnu is open sourced so

168
00:10:15,089 --> 00:10:19,620
we can download the source code and

169
00:10:16,850 --> 00:10:28,470
analyze the usage and the behavior of

170
00:10:19,620 --> 00:10:32,010
each system call to exploit the

171
00:10:28,470 --> 00:10:34,650
connoisseur pupae primitives we need to

172
00:10:32,010 --> 00:10:37,350
figure out some addresses and offsets in

173
00:10:34,650 --> 00:10:39,360
the first place so you can use either or

174
00:10:37,350 --> 00:10:48,089
cheat hall to analyze the color cache

175
00:10:39,360 --> 00:10:49,080
and help us to get the offsets after

176
00:10:48,089 --> 00:10:52,890
analyzing the

177
00:10:49,080 --> 00:10:55,830
xnu source code and the kernel cash we

178
00:10:52,890 --> 00:10:58,260
divided the pub primitives into four

179
00:10:55,830 --> 00:11:01,170
categories the first category is

180
00:10:58,260 --> 00:11:03,839
general-purpose primitives we know that

181
00:11:01,170 --> 00:11:05,589
mark subsystem reacts and you cannot is

182
00:11:03,839 --> 00:11:09,700
a server that serves

183
00:11:05,590 --> 00:11:12,550
the virus spots this server receives

184
00:11:09,700 --> 00:11:15,190
incoming mock messages and process them

185
00:11:12,550 --> 00:11:18,160
by performing the required operations to

186
00:11:15,190 --> 00:11:21,700
multiple resources such as processors

187
00:11:18,160 --> 00:11:26,560
tasks and stress consequently by using

188
00:11:21,700 --> 00:11:29,020
Marc system calls according to the

189
00:11:26,560 --> 00:11:31,810
designers original intention attacker

190
00:11:29,020 --> 00:11:34,750
can still achieve general and useful

191
00:11:31,810 --> 00:11:37,750
primitives without hijacking the control

192
00:11:34,750 --> 00:11:40,900
flow that we summarized this type of

193
00:11:37,750 --> 00:11:47,320
mark system cottage as general-purpose

194
00:11:40,900 --> 00:11:50,620
primitive for example mark represents

195
00:11:47,320 --> 00:11:54,850
the over overall computer system as a

196
00:11:50,620 --> 00:11:57,910
host object through hosts the related

197
00:11:54,850 --> 00:12:01,390
system caused a user's based app can

198
00:11:57,910 --> 00:12:05,740
retrieve information or set primitives

199
00:12:01,390 --> 00:12:08,220
or set properties for hosts mover

200
00:12:05,740 --> 00:12:12,100
wizards in the right to host the pre

201
00:12:08,220 --> 00:12:14,770
privileged pot and related system code

202
00:12:12,100 --> 00:12:18,340
for example hosts the process set

203
00:12:14,770 --> 00:12:21,819
privileged attacker can King sin rights

204
00:12:18,340 --> 00:12:25,510
to the two other powerful pots for

205
00:12:21,820 --> 00:12:27,940
example the process set pot these pots

206
00:12:25,510 --> 00:12:32,610
are very powerful that can be used to

207
00:12:27,940 --> 00:12:32,610
exploit and control the whole system

208
00:12:36,060 --> 00:12:40,989
besides

209
00:12:37,300 --> 00:12:44,680
xnu provides a powerful set of routines

210
00:12:40,990 --> 00:12:48,250
mach vm related system caused to user

211
00:12:44,680 --> 00:12:54,870
space app for manipulating trust memory

212
00:12:48,250 --> 00:12:58,810
spaces giving approach giving

213
00:12:54,870 --> 00:13:02,530
appropriate privileges when process can

214
00:12:58,810 --> 00:13:06,520
perform operating on another processors

215
00:13:02,530 --> 00:13:09,370
memory space identically to its own note

216
00:13:06,520 --> 00:13:11,890
that Marc Marc VM religious it's called

217
00:13:09,370 --> 00:13:15,370
require the target processes

218
00:13:11,890 --> 00:13:17,980
task pod as an argument in general or

219
00:13:15,370 --> 00:13:19,000
process only have the privilege to get

220
00:13:17,980 --> 00:13:22,780
its own

221
00:13:19,000 --> 00:13:25,210
tasks and memory space however with an

222
00:13:22,780 --> 00:13:27,640
information link vulnerability or an

223
00:13:25,210 --> 00:13:30,880
arbitrary cannot memory read primitive

224
00:13:27,640 --> 00:13:34,420
the attacker could retrieve other tasks

225
00:13:30,880 --> 00:13:39,280
map pointers and craft fig tasks to

226
00:13:34,420 --> 00:13:43,530
manage other processors memory space yes

227
00:13:39,280 --> 00:13:43,530
especially for the kernel memory space

228
00:13:46,680 --> 00:13:53,290
this is another type of primitive

229
00:13:49,860 --> 00:13:56,050
clearing primitives it has a character

230
00:13:53,290 --> 00:13:58,510
and characteristic that the return value

231
00:13:56,050 --> 00:14:01,229
of the system call could be used to link

232
00:13:58,510 --> 00:14:04,510
kernel information for example

233
00:14:01,230 --> 00:14:07,920
speculatin executed kanakas the code

234
00:14:04,510 --> 00:14:11,170
pattern of clear in primitive mode model

235
00:14:07,920 --> 00:14:14,920
includes decision-making States and the

236
00:14:11,170 --> 00:14:18,189
return value assist assignments for

237
00:14:14,920 --> 00:14:20,610
example mark pod key object is a system

238
00:14:18,190 --> 00:14:23,860
call that retrieves the type of

239
00:14:20,610 --> 00:14:26,500
addresses of kana object it has some

240
00:14:23,860 --> 00:14:30,640
logic partners to calculate some type of

241
00:14:26,500 --> 00:14:33,070
IPC pod object which help attackers to

242
00:14:30,640 --> 00:14:37,150
figure out the address of the objects in

243
00:14:33,070 --> 00:14:40,960
the kernel for example post penguin

244
00:14:37,150 --> 00:14:46,120
Teddy geo brick used it to brick ksara

245
00:14:40,960 --> 00:14:48,310
in iOS 6 and 8 and whoever removed the

246
00:14:46,120 --> 00:14:55,050
address clearing hoodie in the released

247
00:14:48,310 --> 00:14:59,140
version some global context for example

248
00:14:55,050 --> 00:15:01,719
Mac system clock initialized the during

249
00:14:59,140 --> 00:15:03,370
the system voting and stored in a fixed

250
00:15:01,720 --> 00:15:06,339
place in kernel memory

251
00:15:03,370 --> 00:15:09,190
in addition clock sleep trap is a system

252
00:15:06,339 --> 00:15:10,990
call expecting his first argument to be

253
00:15:09,190 --> 00:15:13,960
as in the right to the global system

254
00:15:10,990 --> 00:15:16,770
clock and it will return cannot success

255
00:15:13,960 --> 00:15:19,390
if the pond name is correct

256
00:15:16,770 --> 00:15:22,420
therefore if the attacker can manipulate

257
00:15:19,390 --> 00:15:25,240
an IPC cone object and change is key

258
00:15:22,420 --> 00:15:29,370
object field a side channel attack could

259
00:15:25,240 --> 00:15:29,370
be launched the two brick keys are

260
00:15:33,759 --> 00:15:40,699
Cyril memory inter inter operation

261
00:15:37,399 --> 00:15:43,220
primitives and type confuse attack we

262
00:15:40,699 --> 00:15:45,589
can leverage some system cost to copy

263
00:15:43,220 --> 00:15:50,439
sensitive data between Kronos B's and

264
00:15:45,589 --> 00:15:53,509
the euro space specific is parallelism

265
00:15:50,439 --> 00:15:56,238
memory in her operation primitives are

266
00:15:53,509 --> 00:15:59,989
not used for the original intention of

267
00:15:56,239 --> 00:16:02,989
the design of the design for for example

268
00:15:59,989 --> 00:16:05,769
PID for task is a such a system call

269
00:16:02,989 --> 00:16:12,970
which returns the PID number

270
00:16:05,769 --> 00:16:12,970
corresponding to a particular mark task

271
00:16:14,170 --> 00:16:20,209
the function first calls the port name

272
00:16:17,689 --> 00:16:23,839
to task to get a marked hazard object

273
00:16:20,209 --> 00:16:27,199
then invokes get yes the task info to

274
00:16:23,839 --> 00:16:30,319
get the BST info of the mach task after

275
00:16:27,199 --> 00:16:33,049
getting BST info the function calls prog

276
00:16:30,319 --> 00:16:35,569
Piatti to get PID number of the map task

277
00:16:33,049 --> 00:16:38,509
and a used copy outage who transmitted

278
00:16:35,569 --> 00:16:40,790
the PID number to use user space however

279
00:16:38,509 --> 00:16:43,610
the function doesn't check the validator

280
00:16:40,790 --> 00:16:46,910
of the task and it directly returns the

281
00:16:43,610 --> 00:16:50,089
value of task BST in for PID to the Euro

282
00:16:46,910 --> 00:16:58,939
space after calling the PID for task of

283
00:16:50,089 --> 00:17:02,480
system call another example is limited

284
00:16:58,939 --> 00:17:05,869
kernel memory read and write just like

285
00:17:02,480 --> 00:17:09,260
Donnellan thoughts just like dangling

286
00:17:05,869 --> 00:17:13,520
pointer a pot before referring to a

287
00:17:09,260 --> 00:17:17,949
freed IPC pole object is called a

288
00:17:13,520 --> 00:17:23,329
toggling pod system calls like Mark said

289
00:17:17,949 --> 00:17:26,299
I'll get mach port card on god some

290
00:17:23,329 --> 00:17:30,830
api's they can be used to read and write

291
00:17:26,299 --> 00:17:34,250
the memo field of the IPC pod object by

292
00:17:30,830 --> 00:17:37,639
default IP contact field in the IP C pod

293
00:17:34,250 --> 00:17:40,899
object is used to associate a user space

294
00:17:37,639 --> 00:17:44,439
pointer with a pod

295
00:17:40,899 --> 00:17:46,658
however by using this API

296
00:17:44,440 --> 00:17:53,500
- a tunneling pod the attacker can

297
00:17:46,659 --> 00:18:00,760
retrieve instead instead 60 64 bytes

298
00:17:53,500 --> 00:18:03,519
value in the Colossus the last primitive

299
00:18:00,760 --> 00:18:06,760
is arbitrary code exclusion primitive

300
00:18:03,519 --> 00:18:10,510
this type of primitive can be used to

301
00:18:06,760 --> 00:18:13,059
execute kernel code for example a rope

302
00:18:10,510 --> 00:18:18,059
chain or kernel function in arbitrary

303
00:18:13,059 --> 00:18:23,350
addresses for example clock get

304
00:18:18,059 --> 00:18:25,600
attributes is a system call to get is a

305
00:18:23,350 --> 00:18:29,139
system call to get attributes of a

306
00:18:25,600 --> 00:18:31,570
target clock object however an attacker

307
00:18:29,139 --> 00:18:35,320
can change the global function pointers

308
00:18:31,570 --> 00:18:38,320
or just the fig object to hijack the

309
00:18:35,320 --> 00:18:41,500
control flow to achieve arbitrary code

310
00:18:38,320 --> 00:18:45,580
execution this technique would use the

311
00:18:41,500 --> 00:18:51,760
in the precursors apt attack in iOS 9.3

312
00:18:45,580 --> 00:18:55,120
point 3 besides our kid is an

313
00:18:51,760 --> 00:18:58,440
object-oriented device driver framework

314
00:18:55,120 --> 00:19:03,668
in X in you that you D is a subset of

315
00:18:58,440 --> 00:19:07,649
C++ as its language therefore is object

316
00:19:03,669 --> 00:19:12,070
contains of virtual table as Noah as

317
00:19:07,649 --> 00:19:15,399
variable structure in user space in user

318
00:19:12,070 --> 00:19:18,490
space abs can communicate with I ok the

319
00:19:15,399 --> 00:19:21,330
user client which IP support cannot

320
00:19:18,490 --> 00:19:24,010
object with our kid connection type

321
00:19:21,330 --> 00:19:26,590
consequently if the attacker has the

322
00:19:24,010 --> 00:19:29,470
kernel right primitives he can change

323
00:19:26,590 --> 00:19:31,928
the via table entry of al-qaeda you

324
00:19:29,470 --> 00:19:34,750
declined to hijack the control flow

325
00:19:31,929 --> 00:19:37,000
through the address of a rope edit to

326
00:19:34,750 --> 00:19:40,409
achieve arbitrary kernel called

327
00:19:37,000 --> 00:19:40,409
excursion primitive

328
00:19:48,140 --> 00:19:58,020
okay let's take a look at a real pupae

329
00:19:52,620 --> 00:20:01,469
exploit in the world yahoo exploit this

330
00:19:58,020 --> 00:20:07,289
exploit UD is a hip buffer flow to

331
00:20:01,470 --> 00:20:10,440
achieve a job Rick in OS 10 the one the

332
00:20:07,289 --> 00:20:13,890
cool the vulnerable code exists seeing

333
00:20:10,440 --> 00:20:17,700
the mock water extract attribute recipe

334
00:20:13,890 --> 00:20:19,980
trap this function first the cop is four

335
00:20:17,700 --> 00:20:25,230
bytes from the euro space pointer which

336
00:20:19,980 --> 00:20:28,740
is really precise to the SD to the SD

337
00:20:25,230 --> 00:20:31,380
value of that it called key log SD to

338
00:20:28,740 --> 00:20:34,620
allocate a hip buffer with SD size

339
00:20:31,380 --> 00:20:37,919
however the function is in code copying

340
00:20:34,620 --> 00:20:40,520
to copy recipe size size the data from

341
00:20:37,919 --> 00:20:43,860
the user space to the kernel hit buffer

342
00:20:40,520 --> 00:20:47,129
note that recipe size is a us-based

343
00:20:43,860 --> 00:20:50,039
pointer which could be a very large

344
00:20:47,130 --> 00:20:53,450
number but the buffer could be very

345
00:20:50,039 --> 00:20:55,860
small because it's only as the size

346
00:20:53,450 --> 00:21:04,830
consequently it will cause a buffer

347
00:20:55,860 --> 00:21:08,100
overflow by using this vulnerability it

348
00:21:04,830 --> 00:21:11,908
is easy for us to overflow pointers of

349
00:21:08,100 --> 00:21:18,928
IPC post object inside an arrow mark

350
00:21:11,909 --> 00:21:21,900
message the exploit overflow those

351
00:21:18,929 --> 00:21:25,409
pointers and modify where IPC object

352
00:21:21,900 --> 00:21:29,700
pointer to point to a fig IPC object in

353
00:21:25,409 --> 00:21:32,610
user mode the exploit creates a fig task

354
00:21:29,700 --> 00:21:36,120
in user mode for the fig port as well as

355
00:21:32,610 --> 00:21:38,908
Earth after that the exploit chain

356
00:21:36,120 --> 00:21:41,729
called clock sleep trap system code who

357
00:21:38,909 --> 00:21:48,929
brought forth the address of global

358
00:21:41,730 --> 00:21:52,770
system call and brick the key is our new

359
00:21:48,929 --> 00:21:58,180
additionally the exploit says I hope ice

360
00:21:52,770 --> 00:22:01,210
of the fig IPC object to i2 i qo t

361
00:21:58,180 --> 00:22:03,910
and craft a fake task for the fake port

362
00:22:01,210 --> 00:22:08,080
by setting the value at the fake task

363
00:22:03,910 --> 00:22:15,880
plus yes each task offset attacker could

364
00:22:08,080 --> 00:22:18,040
read arbitrary 20 32 bytes color

365
00:22:15,880 --> 00:22:28,480
memories through PID for tasks without

366
00:22:18,040 --> 00:22:31,090
using any rope gadget the after

367
00:22:28,480 --> 00:22:33,520
disassembling the cannot catch we can

368
00:22:31,090 --> 00:22:35,860
find that the function doesn't check the

369
00:22:33,520 --> 00:22:38,770
validity of the task and the trust the

370
00:22:35,860 --> 00:22:44,439
returns the value under specified offset

371
00:22:38,770 --> 00:22:46,720
to the euro space finally the attacker

372
00:22:44,440 --> 00:22:51,340
attempts the chronology object and

373
00:22:46,720 --> 00:22:54,490
cannot ask and they get take a school or

374
00:22:51,340 --> 00:23:01,689
task for through Colonel conspirator

375
00:22:54,490 --> 00:23:04,150
system call after getting the cannot

376
00:23:01,690 --> 00:23:06,370
have bought the Kim it over because

377
00:23:04,150 --> 00:23:09,970
Colonel because the attacker can use

378
00:23:06,370 --> 00:23:12,639
mach vm system code to do Africana

379
00:23:09,970 --> 00:23:21,910
memory read and write through the cannot

380
00:23:12,640 --> 00:23:26,020
has fought to prevent the attacker from

381
00:23:21,910 --> 00:23:28,240
abusing the cannot ask iOS 11 added a

382
00:23:26,020 --> 00:23:32,470
new mitigation that only the kernel

383
00:23:28,240 --> 00:23:35,500
carries resolved the colors task pod so

384
00:23:32,470 --> 00:23:43,000
we cannot use the kernel task can spell

385
00:23:35,500 --> 00:23:46,420
report trick RS 11 however I'm beer

386
00:23:43,000 --> 00:23:49,390
proposed mitigation bypass in a sink

387
00:23:46,420 --> 00:23:52,870
week exploit that the attacker can copy

388
00:23:49,390 --> 00:23:57,070
reference pointer of Knaus VM to the fig

389
00:23:52,870 --> 00:24:01,030
task now the fig pot has a simcha no

390
00:23:57,070 --> 00:24:03,460
address as the cannot has pot is enough

391
00:24:01,030 --> 00:24:06,370
for the attacker to do arbitrary Connery

392
00:24:03,460 --> 00:24:08,730
than writes remark VM related system

393
00:24:06,370 --> 00:24:08,729
calls

394
00:24:11,820 --> 00:24:18,220
so note that most of exploit techniques

395
00:24:15,700 --> 00:24:21,030
we discussed in this presentation can

396
00:24:18,220 --> 00:24:24,400
still be used in the latest acts and you

397
00:24:21,030 --> 00:24:28,960
however lots of companies for example

398
00:24:24,400 --> 00:24:32,140
our company Alibaba / / Mac books as

399
00:24:28,960 --> 00:24:36,220
well computers to their employees there

400
00:24:32,140 --> 00:24:39,130
are some problems firstly Mac OS is not

401
00:24:36,220 --> 00:24:42,940
not forced up grid forced to upgrade

402
00:24:39,130 --> 00:24:45,070
like iOS secondly there are less

403
00:24:42,940 --> 00:24:49,360
Hardware piece the protections on

404
00:24:45,070 --> 00:24:53,280
netbooks certainly Mac OS has less

405
00:24:49,360 --> 00:24:55,959
security sandbox rules than RS

406
00:24:53,280 --> 00:24:58,450
consequently it is hard for the work

407
00:24:55,960 --> 00:25:01,060
computers to defend against apt and

408
00:24:58,450 --> 00:25:13,960
these computers need a more secure

409
00:25:01,060 --> 00:25:16,840
system to mitigate the ABT and the pupae

410
00:25:13,960 --> 00:25:20,800
attack we proposed a framework called X

411
00:25:16,840 --> 00:25:26,320
and you cannot object protector as no as

412
00:25:20,800 --> 00:25:28,960
a kewpie the basic idea is to lead to

413
00:25:26,320 --> 00:25:31,060
load econo extension to the system the

414
00:25:28,960 --> 00:25:34,060
kernel extension implements in life

415
00:25:31,060 --> 00:25:37,990
working for specific system calls and

416
00:25:34,060 --> 00:25:41,020
deploy integrity check for IPC protocol

417
00:25:37,990 --> 00:25:51,100
objects in addition it could bring new

418
00:25:41,020 --> 00:25:54,670
mitigations to old Mac OS systems the

419
00:25:51,100 --> 00:25:58,889
integrity check the integrity check for

420
00:25:54,670 --> 00:26:02,590
the IPC pod is implemented through the

421
00:25:58,890 --> 00:26:05,710
exam examiner functions therefore our

422
00:26:02,590 --> 00:26:09,639
system need to find reliable code points

423
00:26:05,710 --> 00:26:13,690
that the examiners could be excute chaos

424
00:26:09,640 --> 00:26:16,210
the kernel subsystem exports a key ayah

425
00:26:13,690 --> 00:26:18,880
that allows third-party developers to

426
00:26:16,210 --> 00:26:21,430
authorize actions within the kernel

427
00:26:18,880 --> 00:26:23,980
however the operation set is very

428
00:26:21,430 --> 00:26:28,690
limited make functions

429
00:26:23,980 --> 00:26:33,429
is the operation set is very limited we

430
00:26:28,690 --> 00:26:36,730
can't use it to do a lot of things on

431
00:26:33,429 --> 00:26:40,540
the other hand neck framework is private

432
00:26:36,730 --> 00:26:43,000
and can only be used by Apple in

433
00:26:40,540 --> 00:26:45,730
addition the rules are hard-coded in the

434
00:26:43,000 --> 00:26:48,100
code of the axon you Colonel if we want

435
00:26:45,730 --> 00:26:48,700
to use meth we need to recompile the

436
00:26:48,100 --> 00:26:54,730
kernel

437
00:26:48,700 --> 00:26:57,100
so finally we truth in life hooking here

438
00:26:54,730 --> 00:27:01,630
is the architecture of in life hooking

439
00:26:57,100 --> 00:27:04,480
based on the examiners xqp replace the

440
00:27:01,630 --> 00:27:07,990
original code entry of the target system

441
00:27:04,480 --> 00:27:11,620
call into a trampoline the traveling

442
00:27:07,990 --> 00:27:14,620
terms to the exam or studying the xqp

443
00:27:11,620 --> 00:27:17,439
cano extension that the examiner

444
00:27:14,620 --> 00:27:25,270
verifies the integrity of the target

445
00:27:17,440 --> 00:27:27,700
cannot object there are four examiner's

446
00:27:25,270 --> 00:27:30,970
are deployed in our framework

447
00:27:27,700 --> 00:27:35,169
the first one is cannot object address

448
00:27:30,970 --> 00:27:38,380
checker we know that IPC broad object is

449
00:27:35,169 --> 00:27:42,520
a con object which means it could not be

450
00:27:38,380 --> 00:27:46,150
in the user space address so we check

451
00:27:42,520 --> 00:27:50,910
that the address of Konoe of the con

452
00:27:46,150 --> 00:27:55,350
object in some specific system cause

453
00:27:50,910 --> 00:27:58,299
it's just like SM ap for all the devices

454
00:27:55,350 --> 00:28:03,520
the second chakra is object type

455
00:27:58,299 --> 00:28:06,429
examiner's for example in this case in

456
00:28:03,520 --> 00:28:10,980
the CAD PST it has the info function the

457
00:28:06,429 --> 00:28:14,669
event should appear real real PSD tasks

458
00:28:10,980 --> 00:28:18,669
infrastructure with a very D ID number

459
00:28:14,669 --> 00:28:22,090
if the examiner finds the PID is the

460
00:28:18,669 --> 00:28:24,179
invalidate it will cause a warning or

461
00:28:22,090 --> 00:28:32,620
panic according to the user

462
00:28:24,179 --> 00:28:34,840
configuration the clocks is sleep trap

463
00:28:32,620 --> 00:28:37,719
is a system code that can be used to

464
00:28:34,840 --> 00:28:41,820
guess the address of global clock

465
00:28:37,720 --> 00:28:46,390
object through brute force attack but

466
00:28:41,820 --> 00:28:48,909
when when the attacker to do the brute

467
00:28:46,390 --> 00:28:53,170
force attack he needed to get a lot of

468
00:28:48,910 --> 00:28:55,240
error returns in order to get the

469
00:28:53,170 --> 00:28:59,590
address of the clock

470
00:28:55,240 --> 00:29:02,860
object therefore we implement clearing

471
00:28:59,590 --> 00:29:05,709
examiner's which count the error returns

472
00:29:02,860 --> 00:29:08,139
in a window time and is in warning the

473
00:29:05,710 --> 00:29:16,920
user or panic of the system according to

474
00:29:08,140 --> 00:29:21,820
the configuration the last examiners is

475
00:29:16,920 --> 00:29:25,020
cannot ask for examiner cannot ask is

476
00:29:21,820 --> 00:29:27,939
examiner the first the brains the task

477
00:29:25,020 --> 00:29:30,129
conversion Evo mitigation to order a

478
00:29:27,940 --> 00:29:34,710
macro air systems that can only the

479
00:29:30,130 --> 00:29:34,710
kernel can resolve the connote task pod

480
00:29:36,660 --> 00:29:45,450
after that it will check the tasks VM

481
00:29:40,620 --> 00:29:48,340
object if the color process do not

482
00:29:45,450 --> 00:29:51,580
belong to the kernel and the target errs

483
00:29:48,340 --> 00:29:54,389
IP teapot object has the same map

484
00:29:51,580 --> 00:29:59,020
structure with the kernel which means

485
00:29:54,390 --> 00:30:01,480
which means it has a same speed memory

486
00:29:59,020 --> 00:30:04,420
with the kernel the examiner will

487
00:30:01,480 --> 00:30:08,110
trigger an error return or panic because

488
00:30:04,420 --> 00:30:11,620
only the kernel can modify its kernel

489
00:30:08,110 --> 00:30:15,659
space the users based application should

490
00:30:11,620 --> 00:30:15,659
not have any permission to do that

491
00:30:22,750 --> 00:30:30,440
for evaluation we selected for Colonel

492
00:30:26,450 --> 00:30:34,510
vulnerabilities and available exploit to

493
00:30:30,440 --> 00:30:38,690
evaluate the effectiveness of our system

494
00:30:34,510 --> 00:30:41,930
we firstly ensure that exploits work on

495
00:30:38,690 --> 00:30:45,830
the corresponding systems and as only

496
00:30:41,930 --> 00:30:48,740
deploys a xqp framework and around the

497
00:30:45,830 --> 00:30:55,000
exploits again to check whether our

498
00:30:48,740 --> 00:30:58,250
system detects and blocks the attack as

499
00:30:55,000 --> 00:31:03,110
we mentioned as we showed in the

500
00:30:58,250 --> 00:31:06,980
pictures the experimental result shows

501
00:31:03,110 --> 00:31:10,189
that xqp provides deterministic

502
00:31:06,980 --> 00:31:15,470
protection for everyone or BT and block

503
00:31:10,190 --> 00:31:19,880
each attempt to exploit the system for

504
00:31:15,470 --> 00:31:24,100
example the Yalu exploit the AU's PID

505
00:31:19,880 --> 00:31:28,790
for task 2 to do the kernel memory

506
00:31:24,100 --> 00:31:32,899
africana memory read first they use pod

507
00:31:28,790 --> 00:31:36,260
name to task to get a big task but our

508
00:31:32,900 --> 00:31:39,680
examiner's find this task is not in the

509
00:31:36,260 --> 00:31:43,960
Kalos is not in the crosspiece it was

510
00:31:39,680 --> 00:31:48,590
created in the user space so it will

511
00:31:43,960 --> 00:31:52,480
show a warning to the user but after

512
00:31:48,590 --> 00:31:55,790
that it used a ID for task to get

513
00:31:52,480 --> 00:32:00,380
address in an arbitrary cano address but

514
00:31:55,790 --> 00:32:05,899
the PID is is invalid it's it's a very

515
00:32:00,380 --> 00:32:10,730
big number but the actual PID we're not

516
00:32:05,900 --> 00:32:15,980
as big as this number so our examiner's

517
00:32:10,730 --> 00:32:19,490
will check the melody ID number and get

518
00:32:15,980 --> 00:32:25,660
and warning the user that and the

519
00:32:19,490 --> 00:32:25,660
examiners find a real pupae attack

520
00:32:26,530 --> 00:32:33,260
unfortunately our framework cannot

521
00:32:29,660 --> 00:32:36,770
mitigate all kinds of pukey primitives

522
00:32:33,260 --> 00:32:40,740
for firstly for the clearing primitive

523
00:32:36,770 --> 00:32:43,710
which uses error return values to gain

524
00:32:40,740 --> 00:32:48,230
an extra source of information which is

525
00:32:43,710 --> 00:32:48,230
very similar to the side channel attack

526
00:32:48,350 --> 00:32:53,879
for the side channel attack it is an

527
00:32:51,179 --> 00:32:56,809
attack based on information gained from

528
00:32:53,880 --> 00:33:00,440
the implementation of a computer system

529
00:32:56,809 --> 00:33:04,289
rather than the weakness in the

530
00:33:00,440 --> 00:33:09,470
implemented algorithm itself so it's

531
00:33:04,289 --> 00:33:09,470
very hard to protect such attack

532
00:33:11,450 --> 00:33:19,110
secondly we didn't implement any

533
00:33:14,510 --> 00:33:21,510
protections for Africa execution the

534
00:33:19,110 --> 00:33:24,479
reason is without hardware support

535
00:33:21,510 --> 00:33:26,600
software piece to see if I am limitation

536
00:33:24,480 --> 00:33:30,270
can be very expensive

537
00:33:26,600 --> 00:33:33,510
in addition modern kernel could be

538
00:33:30,270 --> 00:33:35,879
patched by pure data which means kernel

539
00:33:33,510 --> 00:33:39,240
memory read and write primitives are

540
00:33:35,880 --> 00:33:43,559
enough for the attackers to accomplish

541
00:33:39,240 --> 00:33:45,809
the in last but not least though we may

542
00:33:43,559 --> 00:33:50,389
miss some potential vulnerabilities that

543
00:33:45,809 --> 00:33:54,870
can bypass a kewpie protection as

544
00:33:50,390 --> 00:33:58,320
imperfect as an imperfect perfect

545
00:33:54,870 --> 00:34:01,168
solution our system suppose extensible

546
00:33:58,320 --> 00:34:08,129
Examiners to prevent a new threads in

547
00:34:01,169 --> 00:34:11,599
the first place so here is a conclusion

548
00:34:08,129 --> 00:34:14,310
of my talk firstly we discussed the

549
00:34:11,599 --> 00:34:17,730
mitigation techniques in the x and y

550
00:34:14,310 --> 00:34:20,580
o'connell which is the kernel of iOS and

551
00:34:17,730 --> 00:34:23,609
Mac OS and how these mitigations make

552
00:34:20,580 --> 00:34:27,659
the traditional exploit techniques in

553
00:34:23,609 --> 00:34:30,750
effective the only summarize a new kind

554
00:34:27,659 --> 00:34:34,409
of attack called pukey that leverage

555
00:34:30,750 --> 00:34:39,589
multiple IP c-pod cannot objects to

556
00:34:34,409 --> 00:34:44,070
bypass these mitigations before besides

557
00:34:39,589 --> 00:34:48,190
in this talk we not only discuss

558
00:34:44,070 --> 00:34:52,000
attack techniques also we propose a

559
00:34:48,190 --> 00:34:55,330
defense mechanism called xqp to protect

560
00:34:52,000 --> 00:35:01,270
the integrity of the color object yet in

561
00:34:55,330 --> 00:35:04,680
you so if you have last last but not

562
00:35:01,270 --> 00:35:07,509
least if you have any questions you can

563
00:35:04,680 --> 00:35:11,910
you can follow me are we brand twitter

564
00:35:07,510 --> 00:35:17,410
and ask me questions so here is some

565
00:35:11,910 --> 00:35:21,129
materials for this talk it's very useful

566
00:35:17,410 --> 00:35:37,230
and that's all for my talk thank you for

567
00:35:21,130 --> 00:35:42,190
listening then our quest questions so

568
00:35:37,230 --> 00:35:47,160
have you played about with fuse first in

569
00:35:42,190 --> 00:35:50,020
userspace well an implementing you know

570
00:35:47,160 --> 00:35:53,710
similar solar system on the fuse because

571
00:35:50,020 --> 00:35:56,410
I can see that the similarity is here

572
00:35:53,710 --> 00:36:03,670
and I can see where they would be

573
00:35:56,410 --> 00:36:07,990
exploited similarly similarly to you

574
00:36:03,670 --> 00:36:10,240
know fuse feels you yummy memory feels

575
00:36:07,990 --> 00:36:13,270
all file system in userspace

576
00:36:10,240 --> 00:36:17,529
a file system that's yes yeah it's

577
00:36:13,270 --> 00:36:19,660
basically an implementation of the yet

578
00:36:17,530 --> 00:36:22,600
the system call interface if you like

579
00:36:19,660 --> 00:36:25,330
but it yes but our system only protects

580
00:36:22,600 --> 00:36:27,640
the portal related objects collaborative

581
00:36:25,330 --> 00:36:37,150
you can still do copying and copy out

582
00:36:27,640 --> 00:36:40,299
via via fuse you can I'm not sure all

583
00:36:37,150 --> 00:36:42,930
about that you can talk talk with me

584
00:36:40,300 --> 00:36:42,930
later after

585
00:36:58,410 --> 00:37:03,170
okay oh thank you

