1
00:00:00,179 --> 00:00:03,210
good afternoon everyone welcome to the

2
00:00:02,550 --> 00:00:05,670
next Jacque

3
00:00:03,210 --> 00:00:08,580
my name is Ashokan and I'm going to be

4
00:00:05,670 --> 00:00:10,349
giving this talk along with my colleague

5
00:00:08,580 --> 00:00:13,469
and gun we're gonna be co-presenting

6
00:00:10,349 --> 00:00:16,619
this talk we are both from the from Alta

7
00:00:13,469 --> 00:00:18,840
University in in Finland so the talk is

8
00:00:16,619 --> 00:00:21,840
about deniability in messaging protocols

9
00:00:18,840 --> 00:00:26,009
and how that is sir commentable using

10
00:00:21,840 --> 00:00:28,490
attestation and the the attack that we

11
00:00:26,010 --> 00:00:31,710
are going to describe is the result of

12
00:00:28,490 --> 00:00:33,899
convergence of two major trends the

13
00:00:31,710 --> 00:00:36,239
first one is that hardware-based

14
00:00:33,899 --> 00:00:39,450
so-called trusted execution environments

15
00:00:36,239 --> 00:00:42,540
are pervasively deployed the second one

16
00:00:39,450 --> 00:00:44,280
is that the popularity of deniable

17
00:00:42,540 --> 00:00:47,280
communication in the demand for deniable

18
00:00:44,280 --> 00:00:50,160
communication in messaging protocols or

19
00:00:47,280 --> 00:00:53,730
messaging apps has recent dramatic aliy

20
00:00:50,160 --> 00:00:57,000
so what I'm going to do is to explain

21
00:00:53,730 --> 00:00:59,250
these two trends first what are tes and

22
00:00:57,000 --> 00:01:00,510
what do I mean by remote attestation and

23
00:00:59,250 --> 00:01:02,250
then we will talk about what is

24
00:01:00,510 --> 00:01:04,110
deniability what does it mean to have

25
00:01:02,250 --> 00:01:06,479
been a broken messaging protocols and

26
00:01:04,110 --> 00:01:09,390
then Laughlin will take over tell you

27
00:01:06,479 --> 00:01:12,210
about how is deniability achieved in

28
00:01:09,390 --> 00:01:15,630
today's messaging protocols and then

29
00:01:12,210 --> 00:01:18,750
show you how the widespread deployment

30
00:01:15,630 --> 00:01:21,649
of attestation can break the nobility

31
00:01:18,750 --> 00:01:23,820
guarantees in messaging protocols

32
00:01:21,650 --> 00:01:25,500
unfortunately we can't do a demo because

33
00:01:23,820 --> 00:01:27,508
we had a presentation issues but we'll

34
00:01:25,500 --> 00:01:30,420
show you a video if you want to see your

35
00:01:27,509 --> 00:01:33,619
live demo go talk to Laughlin after the

36
00:01:30,420 --> 00:01:35,729
talk we can do the demo on his machine

37
00:01:33,619 --> 00:01:37,619
then we will talk a little bit about

38
00:01:35,729 --> 00:01:42,179
countermeasures and enclose with their

39
00:01:37,619 --> 00:01:43,680
big picture so let me start with trusted

40
00:01:42,180 --> 00:01:44,360
execution environments and remote

41
00:01:43,680 --> 00:01:47,460
attestation

42
00:01:44,360 --> 00:01:51,149
so what do I mean by this Hardware

43
00:01:47,460 --> 00:01:54,389
security mechanisms in in commodity

44
00:01:51,149 --> 00:01:56,850
devices have been now gradually becoming

45
00:01:54,390 --> 00:01:59,579
more and more pervasive what I mean by

46
00:01:56,850 --> 00:02:02,339
this are hardware support for three

47
00:01:59,579 --> 00:02:03,689
kinds of security functionality the

48
00:02:02,340 --> 00:02:05,969
first one is something that I would call

49
00:02:03,689 --> 00:02:09,419
isolated execution environment so

50
00:02:05,969 --> 00:02:12,170
imagine that you have a phone with say

51
00:02:09,419 --> 00:02:14,089
Android or iOS running on it and yet

52
00:02:12,170 --> 00:02:15,799
some applications all of this is

53
00:02:14,090 --> 00:02:17,270
software with a big footprint right so

54
00:02:15,800 --> 00:02:20,180
this is what we call some other software

55
00:02:17,270 --> 00:02:23,209
if there is hardware support to be able

56
00:02:20,180 --> 00:02:24,890
to run small pieces of so-called trusted

57
00:02:23,209 --> 00:02:27,650
software on the same device on the same

58
00:02:24,890 --> 00:02:29,839
processor in such a way that there is

59
00:02:27,650 --> 00:02:31,900
strong isolation between these two that

60
00:02:29,840 --> 00:02:34,069
the trusted software cannot be

61
00:02:31,900 --> 00:02:35,569
manipulated by or interfered with by

62
00:02:34,069 --> 00:02:37,130
this other software including the

63
00:02:35,569 --> 00:02:40,130
operating system that is called

64
00:02:37,130 --> 00:02:42,670
isolation isolated execution and there

65
00:02:40,130 --> 00:02:44,930
are hardware devices that support

66
00:02:42,670 --> 00:02:49,309
isolated execution environments and that

67
00:02:44,930 --> 00:02:51,590
are widely deployed the second security

68
00:02:49,310 --> 00:02:53,000
property that hardware can support is no

69
00:02:51,590 --> 00:02:54,799
it's not it's nice to be able to run

70
00:02:53,000 --> 00:02:56,269
some software that's isolated from

71
00:02:54,799 --> 00:02:58,459
everything all the other software on

72
00:02:56,269 --> 00:03:00,470
your on your device but to be able to do

73
00:02:58,459 --> 00:03:02,750
something useful imagine that you want

74
00:03:00,470 --> 00:03:05,450
to do online banking this trusted

75
00:03:02,750 --> 00:03:07,760
software has to have some information

76
00:03:05,450 --> 00:03:10,429
like cryptographic keys that can be

77
00:03:07,760 --> 00:03:12,649
stored persistently right so this is

78
00:03:10,430 --> 00:03:14,239
called protector storage and sometimes

79
00:03:12,650 --> 00:03:15,769
it's called sealing so the trusted

80
00:03:14,239 --> 00:03:18,799
software is able to take something like

81
00:03:15,769 --> 00:03:20,630
a cryptographic key seal it and store it

82
00:03:18,799 --> 00:03:23,060
in such a way that even though the other

83
00:03:20,630 --> 00:03:24,290
software has access to that the other

84
00:03:23,060 --> 00:03:26,840
software won't be able to manipulate

85
00:03:24,290 --> 00:03:28,760
that or extract this information without

86
00:03:26,840 --> 00:03:31,190
being detected by the trusted software

87
00:03:28,760 --> 00:03:32,570
so that's the second property the third

88
00:03:31,190 --> 00:03:35,239
property is that suppose you have a

89
00:03:32,570 --> 00:03:38,000
device that that has isolated execution

90
00:03:35,239 --> 00:03:40,250
that has protected storage imagine that

91
00:03:38,000 --> 00:03:43,450
if this device is now able to convince a

92
00:03:40,250 --> 00:03:46,720
third party that it has these properties

93
00:03:43,450 --> 00:03:49,040
then the third party may be able to use

94
00:03:46,720 --> 00:03:51,170
simpler protocols right so imagine that

95
00:03:49,040 --> 00:03:53,120
you want to do online banking and you

96
00:03:51,170 --> 00:03:55,518
have a device that supports this kind of

97
00:03:53,120 --> 00:03:57,079
the ability to run some software in an

98
00:03:55,519 --> 00:03:59,690
isolated fashion the ability to protect

99
00:03:57,079 --> 00:04:01,519
secret keys and now your device can

100
00:03:59,690 --> 00:04:04,340
convince your bank that it has this

101
00:04:01,519 --> 00:04:06,890
functionality then maybe your bank would

102
00:04:04,340 --> 00:04:09,350
allow great access to your your bank

103
00:04:06,890 --> 00:04:12,290
account from such a device than from a

104
00:04:09,350 --> 00:04:15,290
purely software implementation so the

105
00:04:12,290 --> 00:04:16,909
the this kind of support in in commodity

106
00:04:15,290 --> 00:04:21,010
devices have been around for a while

107
00:04:16,910 --> 00:04:24,010
starting with say IBM crypto cards that

108
00:04:21,010 --> 00:04:25,960
almost 30 years old that were used in in

109
00:04:24,010 --> 00:04:28,539
the banking sector or trusted platform

110
00:04:25,960 --> 00:04:30,849
module which were about 20 25 years old

111
00:04:28,540 --> 00:04:33,940
that have been sort of reasonably widely

112
00:04:30,850 --> 00:04:36,220
deployed on on PC type platforms but

113
00:04:33,940 --> 00:04:40,740
what's interesting in the last 15 years

114
00:04:36,220 --> 00:04:46,180
or so is that in common hardware such as

115
00:04:40,740 --> 00:04:48,310
smartphones tablets PCs cloud platforms

116
00:04:46,180 --> 00:04:49,660
this kind of support for trusted

117
00:04:48,310 --> 00:04:51,970
execution environments have been widely

118
00:04:49,660 --> 00:04:54,100
deployed so if you have a smartphone in

119
00:04:51,970 --> 00:04:57,010
your pocket today you probably it's

120
00:04:54,100 --> 00:04:59,830
probably made by using your arm based

121
00:04:57,010 --> 00:05:02,200
core and the arm has a technology called

122
00:04:59,830 --> 00:05:05,800
trustzone that provides this kind of

123
00:05:02,200 --> 00:05:07,270
tragedy educational environment and such

124
00:05:05,800 --> 00:05:08,830
rush of execution environments in

125
00:05:07,270 --> 00:05:12,340
smartphones and tablets have been around

126
00:05:08,830 --> 00:05:14,830
for almost 15 years Intel recently

127
00:05:12,340 --> 00:05:16,539
announced technology called software got

128
00:05:14,830 --> 00:05:19,900
extensions that provide similar

129
00:05:16,540 --> 00:05:22,170
functionality for x86 platform so the

130
00:05:19,900 --> 00:05:26,200
fact that these are widely deployed

131
00:05:22,170 --> 00:05:29,410
allow developers and system builders to

132
00:05:26,200 --> 00:05:31,659
design interesting new protocols which

133
00:05:29,410 --> 00:05:33,880
can provide the kind of security that

134
00:05:31,660 --> 00:05:38,050
was in previous is possible if you were

135
00:05:33,880 --> 00:05:39,700
using only software only mechanisms so

136
00:05:38,050 --> 00:05:41,470
this is why structural execution

137
00:05:39,700 --> 00:05:45,000
environments are interesting and like I

138
00:05:41,470 --> 00:05:47,230
said it has been widely available so

139
00:05:45,000 --> 00:05:49,690
what is remote attestation so I

140
00:05:47,230 --> 00:05:50,770
mentioned briefly earlier that if your

141
00:05:49,690 --> 00:05:52,840
device as a trusted execution

142
00:05:50,770 --> 00:05:56,409
environment and if you can convince a

143
00:05:52,840 --> 00:05:58,659
third-party remote verifier of this

144
00:05:56,410 --> 00:06:00,040
functionality then they'll be able to do

145
00:05:58,660 --> 00:06:02,710
more interesting things than they could

146
00:06:00,040 --> 00:06:04,810
do before so remote attestation is

147
00:06:02,710 --> 00:06:08,590
essentially a verifier being able to

148
00:06:04,810 --> 00:06:10,000
assert the current state such as whether

149
00:06:08,590 --> 00:06:11,530
there is a trusted execution environment

150
00:06:10,000 --> 00:06:12,910
not what kind of application is running

151
00:06:11,530 --> 00:06:15,369
in the treasured execution environment

152
00:06:12,910 --> 00:06:18,760
and possibly also the behavior of this

153
00:06:15,370 --> 00:06:20,650
this trusted software on the proven

154
00:06:18,760 --> 00:06:22,330
device and there are essentially two

155
00:06:20,650 --> 00:06:25,030
parts in a remote attestation process

156
00:06:22,330 --> 00:06:26,830
the first one is that on this proved a

157
00:06:25,030 --> 00:06:28,900
device where there is such a structured

158
00:06:26,830 --> 00:06:31,359
execution environment you should be able

159
00:06:28,900 --> 00:06:32,530
to characterize this current state right

160
00:06:31,360 --> 00:06:34,720
so this is called the measurement

161
00:06:32,530 --> 00:06:36,789
process so somehow you measure

162
00:06:34,720 --> 00:06:39,070
current state and the second part is you

163
00:06:36,790 --> 00:06:40,570
that the evidence that you gather from

164
00:06:39,070 --> 00:06:43,510
this measurement process has to be

165
00:06:40,570 --> 00:06:46,120
securely conveyed to the verifier and

166
00:06:43,510 --> 00:06:47,770
this is the attestation protocol and you

167
00:06:46,120 --> 00:06:49,780
can imagine the kind of properties that

168
00:06:47,770 --> 00:06:51,219
are needed for an attestation protocol

169
00:06:49,780 --> 00:06:54,159
so first of all you need ourth

170
00:06:51,220 --> 00:06:56,470
anticipate the evidence that's gathered

171
00:06:54,160 --> 00:06:59,170
from the device and sent to the verifier

172
00:06:56,470 --> 00:07:01,030
should be secure even in the presence of

173
00:06:59,170 --> 00:07:03,430
an adversary who is controlling the

174
00:07:01,030 --> 00:07:04,929
communication channel and that suggests

175
00:07:03,430 --> 00:07:06,790
that you need to be able to have some

176
00:07:04,930 --> 00:07:08,050
way of signing this evidence is this

177
00:07:06,790 --> 00:07:10,090
measurement that you collected on the

178
00:07:08,050 --> 00:07:11,850
device and that immediately suggests

179
00:07:10,090 --> 00:07:15,070
that there should be some kind of

180
00:07:11,850 --> 00:07:16,540
certified HEA that is available to the

181
00:07:15,070 --> 00:07:18,670
trash of execution environment and

182
00:07:16,540 --> 00:07:20,350
that's certified by some some party

183
00:07:18,670 --> 00:07:21,910
that's trusted by the verifier right it

184
00:07:20,350 --> 00:07:24,910
may be the manufacturer of the device oh

185
00:07:21,910 --> 00:07:27,880
it may be some third party furthermore

186
00:07:24,910 --> 00:07:30,490
in order to use this piece securely that

187
00:07:27,880 --> 00:07:32,110
he should be available to some kind of

188
00:07:30,490 --> 00:07:33,520
trusted computing based on the device

189
00:07:32,110 --> 00:07:36,580
this is sometimes called the root of

190
00:07:33,520 --> 00:07:38,950
trust and and the root of trust you know

191
00:07:36,580 --> 00:07:41,830
the rest of the trust is built from

192
00:07:38,950 --> 00:07:43,990
having trust in thee in the trusted

193
00:07:41,830 --> 00:07:46,210
computing base in the first place the

194
00:07:43,990 --> 00:07:50,260
second property that might be needed for

195
00:07:46,210 --> 00:07:53,169
a attestation protocol is a verifier

196
00:07:50,260 --> 00:07:55,630
might want to know not only that the

197
00:07:53,169 --> 00:07:56,950
prover device has trusted execution

198
00:07:55,630 --> 00:07:59,080
environment that matches certain

199
00:07:56,950 --> 00:08:01,270
properties but also that it is their

200
00:07:59,080 --> 00:08:03,219
property holes right now and not some

201
00:08:01,270 --> 00:08:05,169
time in the past this is not always

202
00:08:03,220 --> 00:08:06,790
necessary as you will see in in our

203
00:08:05,169 --> 00:08:08,620
attack that's not an essential protocol

204
00:08:06,790 --> 00:08:11,050
but whenever you need this kind of

205
00:08:08,620 --> 00:08:14,020
timeliness guarantee essentially you do

206
00:08:11,050 --> 00:08:15,610
this by having a nonce included in in

207
00:08:14,020 --> 00:08:18,070
the challenge that the verify sends to

208
00:08:15,610 --> 00:08:19,810
the prover and having the prover include

209
00:08:18,070 --> 00:08:23,440
the challenge in the response at this

210
00:08:19,810 --> 00:08:25,900
end back so an illustration protocol

211
00:08:23,440 --> 00:08:28,330
works in the following way so the very

212
00:08:25,900 --> 00:08:31,120
phone has some idea of what are

213
00:08:28,330 --> 00:08:33,598
acceptable configurations for for a

214
00:08:31,120 --> 00:08:36,219
given prover device right so this is

215
00:08:33,599 --> 00:08:39,219
prior knowledge for the verifier the

216
00:08:36,219 --> 00:08:41,710
prover device like we said has a has a

217
00:08:39,219 --> 00:08:44,860
key that can be used for attestation

218
00:08:41,710 --> 00:08:47,870
the key is certified by somebody who the

219
00:08:44,860 --> 00:08:50,120
verifier trusts and that key is away

220
00:08:47,870 --> 00:08:52,070
able to this route of trust that's going

221
00:08:50,120 --> 00:08:53,510
to do this measurement of whatever

222
00:08:52,070 --> 00:08:56,450
property that you want to prove to the

223
00:08:53,510 --> 00:08:58,850
to the verifies so at some point when

224
00:08:56,450 --> 00:09:01,010
maybe during device boot or and during a

225
00:08:58,850 --> 00:09:02,810
process launch this measurement process

226
00:09:01,010 --> 00:09:04,310
happens so the root of trust will

227
00:09:02,810 --> 00:09:06,500
measure whatever the information that

228
00:09:04,310 --> 00:09:08,239
you want to prove to the verify at some

229
00:09:06,500 --> 00:09:10,160
later point the verifier won't know if

230
00:09:08,240 --> 00:09:12,589
the prover device is in an acceptable

231
00:09:10,160 --> 00:09:14,449
state the verify might send a challenge

232
00:09:12,589 --> 00:09:17,240
the prover would then take this

233
00:09:14,450 --> 00:09:19,279
challenge combine that with the

234
00:09:17,240 --> 00:09:21,260
measurement sign that using this

235
00:09:19,279 --> 00:09:23,029
attestation key and send this

236
00:09:21,260 --> 00:09:25,430
information along with the certificate

237
00:09:23,029 --> 00:09:26,900
but this attestation key so verify would

238
00:09:25,430 --> 00:09:29,089
wreck the signature check the

239
00:09:26,900 --> 00:09:31,640
certificate but on top of that he has to

240
00:09:29,089 --> 00:09:33,770
also check that the measurement that was

241
00:09:31,640 --> 00:09:36,380
sent securely by the prover is an

242
00:09:33,770 --> 00:09:39,500
acceptable measurement so typical

243
00:09:36,380 --> 00:09:41,720
attestation protocols work like this so

244
00:09:39,500 --> 00:09:43,610
the notion of attestation was introduced

245
00:09:41,720 --> 00:09:45,490
by trusted computing group in the

246
00:09:43,610 --> 00:09:49,550
context of trusted platform modules

247
00:09:45,490 --> 00:09:51,920
about two decades ago and and like I

248
00:09:49,550 --> 00:09:54,979
said at the beginning what is more

249
00:09:51,920 --> 00:09:57,380
interesting is that trusted execution

250
00:09:54,980 --> 00:09:59,779
environments supporting remote

251
00:09:57,380 --> 00:10:03,620
attestation is are now widely available

252
00:09:59,779 --> 00:10:07,820
in smartphones in PC platforms in in

253
00:10:03,620 --> 00:10:09,440
server grade platforms and so on and and

254
00:10:07,820 --> 00:10:11,360
the fact that they are available is is

255
00:10:09,440 --> 00:10:14,089
good in some sense because you can have

256
00:10:11,360 --> 00:10:15,940
for example secure banking and all kinds

257
00:10:14,089 --> 00:10:18,770
of interesting protocols that provide

258
00:10:15,940 --> 00:10:20,450
better security than before what we are

259
00:10:18,770 --> 00:10:24,529
going to show here is that how it might

260
00:10:20,450 --> 00:10:26,410
be used in a negative way I talked about

261
00:10:24,529 --> 00:10:29,240
measurement or gathering this evidence

262
00:10:26,410 --> 00:10:31,400
typically the measurement is you want to

263
00:10:29,240 --> 00:10:33,290
prove to verify that you are running

264
00:10:31,400 --> 00:10:35,089
your process that was started from a

265
00:10:33,290 --> 00:10:37,490
specific application and the measurement

266
00:10:35,089 --> 00:10:39,350
is then called a binary measurement of

267
00:10:37,490 --> 00:10:42,490
binary attestation and essentially it's

268
00:10:39,350 --> 00:10:44,839
taking a cryptographic hash of the

269
00:10:42,490 --> 00:10:47,180
binary code from which you started the

270
00:10:44,839 --> 00:10:48,410
process but the notion of a distribution

271
00:10:47,180 --> 00:10:51,109
is generally doesn't have to be just

272
00:10:48,410 --> 00:10:54,079
binary attestation it can be of any kind

273
00:10:51,110 --> 00:10:55,190
of property and and one other thing that

274
00:10:54,080 --> 00:10:57,440
I want to mention is that this

275
00:10:55,190 --> 00:10:58,550
distribution can also be chained so for

276
00:10:57,440 --> 00:11:01,240
example if you are testing an

277
00:10:58,550 --> 00:11:05,170
application you will take

278
00:11:01,240 --> 00:11:06,190
a hash of that application code from

279
00:11:05,170 --> 00:11:09,120
which you're going to start the process

280
00:11:06,190 --> 00:11:11,860
but you can add other things for example

281
00:11:09,120 --> 00:11:14,290
the application might make some

282
00:11:11,860 --> 00:11:16,450
statement about some property write some

283
00:11:14,290 --> 00:11:18,760
data that it produced as running as a

284
00:11:16,450 --> 00:11:20,350
result of running some computation so in

285
00:11:18,760 --> 00:11:21,970
addition to the the measurement of code

286
00:11:20,350 --> 00:11:25,480
itself you can include this additional

287
00:11:21,970 --> 00:11:27,670
data and that amounts to saying the

288
00:11:25,480 --> 00:11:29,529
verifier being convinced that not only

289
00:11:27,670 --> 00:11:30,990
is the prove it or is running a certain

290
00:11:29,529 --> 00:11:33,399
application but also the application

291
00:11:30,990 --> 00:11:35,140
uttered some statement as a result of

292
00:11:33,399 --> 00:11:36,700
some computation and there are different

293
00:11:35,140 --> 00:11:38,080
ways of doing this kind of additional

294
00:11:36,700 --> 00:11:40,000
information to the attestation and

295
00:11:38,080 --> 00:11:42,730
you'll see later how how this can be

296
00:11:40,000 --> 00:11:44,050
used so this is what I want to say about

297
00:11:42,730 --> 00:11:45,580
attestation and if you want to sort of

298
00:11:44,050 --> 00:11:48,819
take one thing away from this brief

299
00:11:45,580 --> 00:11:50,920
introduction that is the following if

300
00:11:48,820 --> 00:11:53,110
there is a way for at rational execution

301
00:11:50,920 --> 00:11:55,290
and run to locally verify some property

302
00:11:53,110 --> 00:11:57,750
such as the signature of an application

303
00:11:55,290 --> 00:11:59,800
attestation allows a way for this

304
00:11:57,750 --> 00:12:02,440
distrusted execution environment to

305
00:11:59,800 --> 00:12:04,510
securely convey convey this property to

306
00:12:02,440 --> 00:12:06,820
a remote verify so anything that can be

307
00:12:04,510 --> 00:12:09,700
locally verified now you can use that to

308
00:12:06,820 --> 00:12:11,470
convince a remote party so that's about

309
00:12:09,700 --> 00:12:13,770
attestation now let me tell you about

310
00:12:11,470 --> 00:12:16,959
this deniability and messaging protocols

311
00:12:13,770 --> 00:12:18,699
so if you think about any messaging

312
00:12:16,959 --> 00:12:21,010
protocol like if you're using signal or

313
00:12:18,700 --> 00:12:23,110
whatsapp or whatever the the natural

314
00:12:21,010 --> 00:12:25,450
security requirement that you would want

315
00:12:23,110 --> 00:12:27,670
to have is the ability to authenticate

316
00:12:25,450 --> 00:12:30,180
the source of the message that you

317
00:12:27,670 --> 00:12:32,770
receive right so if you know if I'm

318
00:12:30,180 --> 00:12:34,599
communicating the Clough LAN using

319
00:12:32,770 --> 00:12:37,420
whatsapp he sends me a message I want to

320
00:12:34,600 --> 00:12:39,130
know that it was really sent by laughlin

321
00:12:37,420 --> 00:12:42,339
and not somebody who broke into our

322
00:12:39,130 --> 00:12:45,640
communication right deniable messaging

323
00:12:42,339 --> 00:12:47,050
protocols do provide authenticity but

324
00:12:45,640 --> 00:12:49,750
they have this additional property that

325
00:12:47,050 --> 00:12:51,910
even though I can verify that a message

326
00:12:49,750 --> 00:12:54,160
came from laughlin I'm not able to

327
00:12:51,910 --> 00:12:56,589
convince any of you that Laughlin send

328
00:12:54,160 --> 00:12:58,779
this message so I want authenticity but

329
00:12:56,589 --> 00:13:00,579
he wants that I shouldn't be able to

330
00:12:58,779 --> 00:13:07,870
convince anybody else that he sent me a

331
00:13:00,579 --> 00:13:09,640
message so the what you want is to any

332
00:13:07,870 --> 00:13:12,190
third party to be able to not

333
00:13:09,640 --> 00:13:14,500
differentiate between a message that the

334
00:13:12,190 --> 00:13:14,980
actual sender sent and a message that

335
00:13:14,500 --> 00:13:17,470
somebody

336
00:13:14,980 --> 00:13:21,779
brigaded and typically deniability is

337
00:13:17,470 --> 00:13:25,240
provided by ensuring that there is a

338
00:13:21,779 --> 00:13:27,610
Center authentication but after the fact

339
00:13:25,240 --> 00:13:29,320
anybody can produce a transcript that

340
00:13:27,610 --> 00:13:32,260
looks like the genuine transcript and

341
00:13:29,320 --> 00:13:33,699
then and third-party verify I won't be

342
00:13:32,260 --> 00:13:35,649
able to tell the difference between a

343
00:13:33,699 --> 00:13:37,329
genuine transcript and a fabricated

344
00:13:35,649 --> 00:13:41,370
transcript and Laughlin will later show

345
00:13:37,329 --> 00:13:43,329
you how this is done so signal whatsapp

346
00:13:41,370 --> 00:13:45,820
pidgin and many of these modern

347
00:13:43,329 --> 00:13:48,099
messaging protocols do support

348
00:13:45,820 --> 00:13:49,779
deniability in this sense using

349
00:13:48,100 --> 00:13:51,750
cryptographic mechanisms right so this

350
00:13:49,779 --> 00:13:54,790
is sort of widely available these days

351
00:13:51,750 --> 00:13:57,070
so what's the what what is it that you

352
00:13:54,790 --> 00:13:59,349
can achieve if you have if you are using

353
00:13:57,070 --> 00:14:01,420
a cryptographic cryptographically

354
00:13:59,350 --> 00:14:02,709
deniable protocol right so you can

355
00:14:01,420 --> 00:14:04,899
imagine why you would want to do that

356
00:14:02,709 --> 00:14:09,339
right if you are a whistleblower who

357
00:14:04,899 --> 00:14:10,990
wants to talk to a watchdog or a

358
00:14:09,339 --> 00:14:12,579
journalist and you want to tell them

359
00:14:10,990 --> 00:14:14,709
about something that might land you in

360
00:14:12,579 --> 00:14:16,750
trouble you might want to use a protocol

361
00:14:14,709 --> 00:14:17,949
that is that provides authenticity so

362
00:14:16,750 --> 00:14:20,139
that the journalists can verify that

363
00:14:17,949 --> 00:14:21,969
it's you really who is saying this but

364
00:14:20,139 --> 00:14:26,050
they won't be able to out you or frame

365
00:14:21,970 --> 00:14:28,510
you in in any way right so suppose Alice

366
00:14:26,050 --> 00:14:31,300
is such a person who wants the ability

367
00:14:28,510 --> 00:14:32,860
and she's talking to Bob and she is

368
00:14:31,300 --> 00:14:35,260
using a cryptographically deniable

369
00:14:32,860 --> 00:14:36,130
protocol right and alice might say

370
00:14:35,260 --> 00:14:39,639
things that are potentially

371
00:14:36,130 --> 00:14:41,439
incriminating to her and and might

372
00:14:39,639 --> 00:14:43,870
believe that because the protocol is

373
00:14:41,440 --> 00:14:45,699
deniable bob won't be able to take that

374
00:14:43,870 --> 00:14:49,350
message and send it to some external

375
00:14:45,699 --> 00:14:52,449
verifier you know like publishing it in

376
00:14:49,350 --> 00:14:54,940
you know wikileaks dump or publishing it

377
00:14:52,449 --> 00:14:57,069
in a newspaper and an external verifier

378
00:14:54,940 --> 00:14:59,949
which which could be anybody wouldn't be

379
00:14:57,069 --> 00:15:03,339
able to trust this this transcript that

380
00:14:59,949 --> 00:15:05,380
bob produced because anybody could have

381
00:15:03,339 --> 00:15:07,360
produced that but this is not

382
00:15:05,380 --> 00:15:09,579
necessarily always the case right so the

383
00:15:07,360 --> 00:15:11,800
idea if i of course wants to know where

384
00:15:09,579 --> 00:15:15,430
the alice really said what Bob claims

385
00:15:11,800 --> 00:15:18,670
alice said but even if you are using a

386
00:15:15,430 --> 00:15:22,449
cryptographic deniable protocol if the

387
00:15:18,670 --> 00:15:24,640
verifier trusts the reporter which in

388
00:15:22,449 --> 00:15:26,589
this case is Bob then it wouldn't matter

389
00:15:24,640 --> 00:15:28,110
whether Bob could have fabricated or not

390
00:15:26,589 --> 00:15:30,690
right so if

391
00:15:28,110 --> 00:15:32,220
if I trust Lachlan and Laughlin tells me

392
00:15:30,690 --> 00:15:33,990
that Alice said something to him

393
00:15:32,220 --> 00:15:36,420
then I might believe that regardless of

394
00:15:33,990 --> 00:15:41,330
whether they use the user if that would

395
00:15:36,420 --> 00:15:44,459
enable protocol or not so the the use of

396
00:15:41,330 --> 00:15:47,460
cryptographic dynamic graphical deniable

397
00:15:44,460 --> 00:15:49,770
protocol is relevant only when the

398
00:15:47,460 --> 00:15:51,150
informant who is producing taking this

399
00:15:49,770 --> 00:15:53,939
transcript and trying to convince um

400
00:15:51,150 --> 00:15:56,370
verifier is somehow inherently and not

401
00:15:53,940 --> 00:15:57,930
trustworthy so there are lots of

402
00:15:56,370 --> 00:16:00,180
trustworthy informants right so if

403
00:15:57,930 --> 00:16:02,459
you're a witness under oath people might

404
00:16:00,180 --> 00:16:04,079
believe what you say because you are a

405
00:16:02,460 --> 00:16:06,510
witness under oath and there are other

406
00:16:04,080 --> 00:16:08,730
ramifications if you lie so even if

407
00:16:06,510 --> 00:16:11,040
somebody was using a deniable protocol

408
00:16:08,730 --> 00:16:13,260
to talk to you if you under oath claimed

409
00:16:11,040 --> 00:16:15,270
what they said that you are reporting

410
00:16:13,260 --> 00:16:18,170
but they said verifies might believe

411
00:16:15,270 --> 00:16:20,310
that journalists might be such

412
00:16:18,170 --> 00:16:21,900
trustworthy reporters as well but not

413
00:16:20,310 --> 00:16:23,250
everyone is such a trustworthy reporter

414
00:16:21,900 --> 00:16:25,770
for example there could be a

415
00:16:23,250 --> 00:16:27,750
nation-state adversary who takes email

416
00:16:25,770 --> 00:16:32,760
dumps from in a breaking into somebody's

417
00:16:27,750 --> 00:16:34,940
device and publishes them right so there

418
00:16:32,760 --> 00:16:36,900
is no reason to suspect that this this

419
00:16:34,940 --> 00:16:39,000
nation-state adversary wouldn't have

420
00:16:36,900 --> 00:16:41,459
fabricated the evidence so this is the

421
00:16:39,000 --> 00:16:45,780
kind of setting where deniable protocols

422
00:16:41,460 --> 00:16:47,190
are useful because the the party that's

423
00:16:45,780 --> 00:16:49,860
taking the transcript of your

424
00:16:47,190 --> 00:16:51,930
conversation with them is essentially

425
00:16:49,860 --> 00:16:56,370
inherently untrustworthy from the point

426
00:16:51,930 --> 00:16:58,260
of view of a verify and this is as you

427
00:16:56,370 --> 00:17:00,990
have probably seen from news reports and

428
00:16:58,260 --> 00:17:02,310
so on the the context for this is

429
00:17:00,990 --> 00:17:06,449
increasingly common right there have

430
00:17:02,310 --> 00:17:10,139
been all kinds of email data dumps or

431
00:17:06,449 --> 00:17:11,459
other kinds of data dumps that have that

432
00:17:10,140 --> 00:17:13,709
have been in the news in the past two or

433
00:17:11,459 --> 00:17:15,839
three years some of them successfully

434
00:17:13,709 --> 00:17:18,680
some of them unsuccessfully but all of

435
00:17:15,839 --> 00:17:21,720
them have this kind of setup where you

436
00:17:18,680 --> 00:17:24,180
or somebody was having a conversation

437
00:17:21,720 --> 00:17:26,220
with somebody else in the belief that is

438
00:17:24,180 --> 00:17:30,810
a private conversation but then it

439
00:17:26,220 --> 00:17:34,140
became public and and and the reason why

440
00:17:30,810 --> 00:17:35,790
this is questionable is if the person

441
00:17:34,140 --> 00:17:40,210
who is making this information available

442
00:17:35,790 --> 00:17:44,559
can fabricate the evidence then

443
00:17:40,210 --> 00:17:44,559
your conversation is essentially denial

444
00:17:45,010 --> 00:17:51,080
so even if you use a cryptographically

445
00:17:47,330 --> 00:17:53,539
Nabal protocol the messages that you

446
00:17:51,080 --> 00:17:55,699
send in themselves might contain some

447
00:17:53,539 --> 00:17:57,890
some evidence that reveal the proof of

448
00:17:55,700 --> 00:18:00,260
origin so a good example is what

449
00:17:57,890 --> 00:18:03,020
happened during the u.s elections in the

450
00:18:00,260 --> 00:18:06,470
last US elections so somebody broke into

451
00:18:03,020 --> 00:18:08,750
the the campaign chair of hillary

452
00:18:06,470 --> 00:18:10,610
clinton and and reveal the whole bunch

453
00:18:08,750 --> 00:18:12,590
of emails that he received from a bunch

454
00:18:10,610 --> 00:18:14,270
of people right so initially the

455
00:18:12,590 --> 00:18:16,459
reaction of the sender's was to claim

456
00:18:14,270 --> 00:18:19,490
that they didn't actually send this this

457
00:18:16,460 --> 00:18:21,080
purported email that came from them but

458
00:18:19,490 --> 00:18:23,090
WikiLeaks who publish this dump

459
00:18:21,080 --> 00:18:25,428
shortly afterwards shortly after these

460
00:18:23,090 --> 00:18:27,620
denials they published the dekum

461
00:18:25,429 --> 00:18:30,559
signatures on those emails and that

462
00:18:27,620 --> 00:18:31,969
essentially served as proof that those

463
00:18:30,559 --> 00:18:33,590
people who claimed that they didn't send

464
00:18:31,970 --> 00:18:35,210
the mail actually did send the mail

465
00:18:33,590 --> 00:18:38,149
because there was authentication from

466
00:18:35,210 --> 00:18:41,090
the source of the certifying the source

467
00:18:38,149 --> 00:18:43,520
of the origin of those mails so if you

468
00:18:41,090 --> 00:18:47,059
really want deniability in this kind of

469
00:18:43,520 --> 00:18:49,010
setting you must use cryptographically

470
00:18:47,059 --> 00:18:51,740
deniable protocols and this is what we

471
00:18:49,010 --> 00:18:55,820
have seen in the aftermath of the last

472
00:18:51,740 --> 00:18:58,789
US elections so you saw that the rate of

473
00:18:55,820 --> 00:19:02,299
usage of protocols like signal jumped up

474
00:18:58,789 --> 00:19:04,730
like 400% because people saw that using

475
00:19:02,299 --> 00:19:07,789
email or using mechanisms like that is

476
00:19:04,730 --> 00:19:09,289
not inherently deniable so now I'll hand

477
00:19:07,789 --> 00:19:15,919
over to Lachlan who would tell you how

478
00:19:09,289 --> 00:19:20,809
deniable protocols work in practice but

479
00:19:15,919 --> 00:19:24,049
so the traditional way of setting up a

480
00:19:20,809 --> 00:19:25,970
secure channel provides a kind of

481
00:19:24,049 --> 00:19:28,490
deniability in itself so what you

482
00:19:25,970 --> 00:19:32,419
normally do is you do some kind of

483
00:19:28,490 --> 00:19:37,640
security establishment and then after

484
00:19:32,419 --> 00:19:39,710
that you use symmetric crypto and one of

485
00:19:37,640 --> 00:19:42,740
the features of this kind of symmetric

486
00:19:39,710 --> 00:19:44,990
authentication is that you use this kind

487
00:19:42,740 --> 00:19:47,720
of shared symmetric key so in this case

488
00:19:44,990 --> 00:19:50,299
chaos now

489
00:19:47,720 --> 00:19:52,990
whoever is able to generate those tags

490
00:19:50,299 --> 00:19:55,519
or whoever can verify those tags sorry

491
00:19:52,990 --> 00:19:57,740
they are also able to generate them so

492
00:19:55,519 --> 00:20:00,379
if you can verify the authenticity of a

493
00:19:57,740 --> 00:20:03,250
message that also gives you the ability

494
00:20:00,379 --> 00:20:07,178
to forge messages from that sender and

495
00:20:03,250 --> 00:20:08,809
this is what makes this type of protocol

496
00:20:07,179 --> 00:20:13,129
somewhat deniable

497
00:20:08,809 --> 00:20:15,799
because if Alice sends Bob a message

498
00:20:13,129 --> 00:20:19,519
using a protocol that's built like this

499
00:20:15,799 --> 00:20:21,980
then the result is that if Bob tries to

500
00:20:19,519 --> 00:20:24,470
till some verifier so let us call the

501
00:20:21,980 --> 00:20:25,629
verify of Valerie Bob tells Valerie that

502
00:20:24,470 --> 00:20:27,919
Alice said something

503
00:20:25,629 --> 00:20:30,139
Valerie can't tell whether Bob is

504
00:20:27,919 --> 00:20:32,629
telling the truth or whether Bob just

505
00:20:30,139 --> 00:20:37,309
forged the message using his known

506
00:20:32,629 --> 00:20:41,509
information so some concrete examples of

507
00:20:37,309 --> 00:20:45,168
this now protocols have been designed

508
00:20:41,509 --> 00:20:47,509
that have deniability as a specific goal

509
00:20:45,169 --> 00:20:50,120
so the OTR protocol the off-the-record

510
00:20:47,509 --> 00:20:54,470
protocol is perhaps the earliest example

511
00:20:50,120 --> 00:20:57,289
of this so this takes the same kind of

512
00:20:54,470 --> 00:20:59,179
structure where you do an asymmetric key

513
00:20:57,289 --> 00:21:02,600
establishment and then you use symmetric

514
00:20:59,179 --> 00:21:05,259
crypto to authenticate individual

515
00:21:02,600 --> 00:21:09,949
messages but now once you've verified

516
00:21:05,259 --> 00:21:12,470
the authentication tag on a message you

517
00:21:09,950 --> 00:21:14,570
release this Mac key so you release this

518
00:21:12,470 --> 00:21:16,450
previous key that was used for

519
00:21:14,570 --> 00:21:20,418
verification

520
00:21:16,450 --> 00:21:22,370
the result is that once this key has

521
00:21:20,419 --> 00:21:25,070
been released anyone who's looking at

522
00:21:22,370 --> 00:21:27,620
these messages going over the wire they

523
00:21:25,070 --> 00:21:30,230
can now forge authentication tags that

524
00:21:27,620 --> 00:21:33,918
look like they came from the sender so

525
00:21:30,230 --> 00:21:35,600
this makes this kind of protocol what

526
00:21:33,919 --> 00:21:38,059
makes this particular protocol more

527
00:21:35,600 --> 00:21:43,490
deniable than if you use something like

528
00:21:38,059 --> 00:21:46,779
safe TLS and the result is it's easy to

529
00:21:43,490 --> 00:21:48,900
make transcripts that look realistic

530
00:21:46,779 --> 00:21:51,000
so this

531
00:21:48,900 --> 00:21:53,309
protocol was around for quite a while

532
00:21:51,000 --> 00:21:57,270
but in the last few years the signal

533
00:21:53,309 --> 00:22:00,139
protocol has become more popular one of

534
00:21:57,270 --> 00:22:02,730
the reasons for that is that it works

535
00:22:00,140 --> 00:22:04,650
asynchronously and so you don't need to

536
00:22:02,730 --> 00:22:08,159
have two people online to have a

537
00:22:04,650 --> 00:22:11,279
conversation but a nice feature of this

538
00:22:08,159 --> 00:22:14,570
is that it is inherently significantly

539
00:22:11,279 --> 00:22:17,659
more deniable than protocols like OTR so

540
00:22:14,570 --> 00:22:20,820
when you set up a signal conversation

541
00:22:17,659 --> 00:22:22,950
you set up a few you take a few

542
00:22:20,820 --> 00:22:25,918
different keys and you do some key

543
00:22:22,950 --> 00:22:28,470
exchanges to produce the session key so

544
00:22:25,919 --> 00:22:31,140
you have a long-term identity key so

545
00:22:28,470 --> 00:22:33,870
Ellis has their own big a but you also

546
00:22:31,140 --> 00:22:36,770
generate for each conversation and a

547
00:22:33,870 --> 00:22:39,809
femural key in this case a little a and

548
00:22:36,770 --> 00:22:42,570
this is useful for fort secrecy so that

549
00:22:39,809 --> 00:22:44,309
you can throw this away and then someone

550
00:22:42,570 --> 00:22:48,240
who compromises your long term key can't

551
00:22:44,309 --> 00:22:50,520
read all your old messages but what

552
00:22:48,240 --> 00:22:53,909
signal does a bit differently is they do

553
00:22:50,520 --> 00:22:56,010
this tripartite key exchange so rather

554
00:22:53,909 --> 00:22:59,490
than do just a simple diffie-hellman key

555
00:22:56,010 --> 00:23:01,850
exchange Ellis does the diffie-hellman

556
00:22:59,490 --> 00:23:05,610
key exchange using her long term key and

557
00:23:01,850 --> 00:23:09,779
bob's short term key and between the

558
00:23:05,610 --> 00:23:14,580
short term keys and so on but the result

559
00:23:09,779 --> 00:23:17,010
is that you now need to have the private

560
00:23:14,580 --> 00:23:21,059
keys that you can use for all three of

561
00:23:17,010 --> 00:23:24,809
these diffie-hellman exchanges here so

562
00:23:21,059 --> 00:23:28,230
you need to know the private key a big a

563
00:23:24,809 --> 00:23:31,500
or little B you also need to know either

564
00:23:28,230 --> 00:23:36,120
little a or Big B and you need to know

565
00:23:31,500 --> 00:23:38,640
one of the little a or little B so from

566
00:23:36,120 --> 00:23:43,379
Alice's perspective looking at this

567
00:23:38,640 --> 00:23:46,320
second line here so Alice knows that she

568
00:23:43,380 --> 00:23:50,370
generated little a she knows that she

569
00:23:46,320 --> 00:23:54,000
kept little a secret so whoever she's

570
00:23:50,370 --> 00:23:57,299
talking to whoever else knows this

571
00:23:54,000 --> 00:24:00,990
session key K must know Big B and

572
00:23:57,299 --> 00:24:02,279
therefore must be Bob so this is where

573
00:24:00,990 --> 00:24:06,599
signal gets its

574
00:24:02,279 --> 00:24:09,269
or vindication from but now let's look

575
00:24:06,599 --> 00:24:11,939
at the deniability because this kid

576
00:24:09,269 --> 00:24:13,919
strange has some helpful properties and

577
00:24:11,940 --> 00:24:16,469
in particular anyone can forge the key

578
00:24:13,919 --> 00:24:18,899
exchange so anyone can produce a

579
00:24:16,469 --> 00:24:20,580
completely legitimate looking transcript

580
00:24:18,899 --> 00:24:23,820
that claims to be from any two people

581
00:24:20,580 --> 00:24:25,228
without knowing any of their private

582
00:24:23,820 --> 00:24:28,049
keys or without getting hold of any of

583
00:24:25,229 --> 00:24:30,840
their private keys and it does this

584
00:24:28,049 --> 00:24:33,799
without compromising authentication so

585
00:24:30,840 --> 00:24:37,109
how do we do this so first we pick some

586
00:24:33,799 --> 00:24:39,809
private ephemeral keys little a little B

587
00:24:37,109 --> 00:24:41,039
and this is fine this doesn't need any

588
00:24:39,809 --> 00:24:42,418
special knowledge because all you need

589
00:24:41,039 --> 00:24:47,549
to do is basically generate a random

590
00:24:42,419 --> 00:24:50,580
number now you go to a key server so in

591
00:24:47,549 --> 00:24:53,369
this game because it's signal they have

592
00:24:50,580 --> 00:24:55,019
their own server infrastructure set up

593
00:24:53,369 --> 00:24:58,080
so that you can look up someone's for a

594
00:24:55,019 --> 00:25:01,919
number and get a public key i mean

595
00:24:58,080 --> 00:25:04,468
return and various other things so this

596
00:25:01,919 --> 00:25:08,059
is all either public information or

597
00:25:04,469 --> 00:25:11,609
something you can generate yourself but

598
00:25:08,059 --> 00:25:14,759
notice that because you know little a

599
00:25:11,609 --> 00:25:16,468
and little B you know both of them the

600
00:25:14,759 --> 00:25:19,499
situation is different from the case

601
00:25:16,469 --> 00:25:22,109
where there is a legitimate conversation

602
00:25:19,499 --> 00:25:24,330
between Alice and Bob and the result is

603
00:25:22,109 --> 00:25:26,668
that you can now compute all three of

604
00:25:24,330 --> 00:25:30,059
these diffie-hellman components because

605
00:25:26,669 --> 00:25:32,460
knowing both little a and little B is

606
00:25:30,059 --> 00:25:34,710
enough to compute each of those secrets

607
00:25:32,460 --> 00:25:36,479
you can now generate the secret key K

608
00:25:34,710 --> 00:25:41,070
and that lets you generate a whole

609
00:25:36,479 --> 00:25:45,299
signal transcript that looks like it's

610
00:25:41,070 --> 00:25:48,539
really between Alice and Bob but you can

611
00:25:45,299 --> 00:25:50,460
just make it yourself so the result is

612
00:25:48,539 --> 00:25:52,859
that looking at a transcript like this

613
00:25:50,460 --> 00:25:54,239
of a signal section even if you know you

614
00:25:52,859 --> 00:25:55,859
know I'll know all of the keys and you

615
00:25:54,239 --> 00:25:58,619
can verify that everything makes sense

616
00:25:55,859 --> 00:26:01,228
it gives you no information on whether

617
00:25:58,619 --> 00:26:04,109
or not it's someone really said

618
00:26:01,229 --> 00:26:07,619
something and so this takes us back to

619
00:26:04,109 --> 00:26:09,749
this idea that the easier it is to forge

620
00:26:07,619 --> 00:26:12,779
realistic-looking transcripts the more

621
00:26:09,749 --> 00:26:14,680
deniable it is because there's nothing

622
00:26:12,779 --> 00:26:21,160
here to tie Allison

623
00:26:14,680 --> 00:26:22,650
but to a conversation so now let's move

624
00:26:21,160 --> 00:26:27,430
forward to the attack

625
00:26:22,650 --> 00:26:29,110
so our model here is that Alice and Bob

626
00:26:27,430 --> 00:26:31,420
are having some conversation with each

627
00:26:29,110 --> 00:26:35,530
other and they're using a deniable

628
00:26:31,420 --> 00:26:39,430
messaging protocol now the problem is

629
00:26:35,530 --> 00:26:42,820
bob has some enemies and they have the

630
00:26:39,430 --> 00:26:45,250
ability to hack into his device and what

631
00:26:42,820 --> 00:26:46,870
they do is they hack into his device and

632
00:26:45,250 --> 00:26:47,710
either user to here on the device or

633
00:26:46,870 --> 00:26:52,479
steal his key

634
00:26:47,710 --> 00:26:54,510
and they run the messaging program P so

635
00:26:52,480 --> 00:26:57,160
at this point nothing has changed except

636
00:26:54,510 --> 00:26:58,690
Bob's messaging client so it's signal

637
00:26:57,160 --> 00:27:02,550
client in this case but it could be

638
00:26:58,690 --> 00:27:07,030
anything but that runs inside this tae

639
00:27:02,550 --> 00:27:08,950
now once this is done we have that

640
00:27:07,030 --> 00:27:10,960
messaging client we modify it a bit so

641
00:27:08,950 --> 00:27:14,200
that it produces a nice transcript of

642
00:27:10,960 --> 00:27:18,790
what was said who said it basically a

643
00:27:14,200 --> 00:27:20,320
nice recorder of evidence but now this

644
00:27:18,790 --> 00:27:22,060
is where the remote attestation comes in

645
00:27:20,320 --> 00:27:25,060
because we can produce an attestation

646
00:27:22,060 --> 00:27:28,899
that says this transcript that we've

647
00:27:25,060 --> 00:27:32,169
produced this came from a te running

648
00:27:28,900 --> 00:27:34,840
program P and program P we can publish

649
00:27:32,170 --> 00:27:36,670
the source code and it's implementing a

650
00:27:34,840 --> 00:27:39,669
signal client and so you can trust this

651
00:27:36,670 --> 00:27:41,650
because if you trust this messaging

652
00:27:39,670 --> 00:27:44,410
protocol then this means you should

653
00:27:41,650 --> 00:27:47,200
trust the results and that means that

654
00:27:44,410 --> 00:27:49,180
Alice really did send whatever was in

655
00:27:47,200 --> 00:27:55,510
the transcript that has been put into

656
00:27:49,180 --> 00:27:58,630
the attestation so the kind of trick

657
00:27:55,510 --> 00:28:01,480
here that happens is that the TE lets

658
00:27:58,630 --> 00:28:06,040
you show how a piece of data in this

659
00:28:01,480 --> 00:28:07,480
case a key was used so the traditional

660
00:28:06,040 --> 00:28:10,210
kind of view is that symmetric

661
00:28:07,480 --> 00:28:13,210
authentication means that anyone who is

662
00:28:10,210 --> 00:28:15,160
able to verify an authentication token

663
00:28:13,210 --> 00:28:17,710
you can verify than a message is

664
00:28:15,160 --> 00:28:23,100
legitimate that gives them the ability

665
00:28:17,710 --> 00:28:26,480
to forge additional messages but

666
00:28:23,100 --> 00:28:29,370
if you use a te to do your verification

667
00:28:26,480 --> 00:28:36,929
then only this program P that's running

668
00:28:29,370 --> 00:28:38,399
in the TE is able to use that key so up

669
00:28:36,929 --> 00:28:39,210
to this point that's there isn't an

670
00:28:38,399 --> 00:28:41,549
enormous change

671
00:28:39,210 --> 00:28:43,620
but when remote attestation comes in you

672
00:28:41,549 --> 00:28:46,860
can now prove to someone else that a

673
00:28:43,620 --> 00:28:49,949
verification operation was performed by

674
00:28:46,860 --> 00:28:52,860
this program P using the key and that

675
00:28:49,950 --> 00:28:54,840
the key has been kept secret so now even

676
00:28:52,860 --> 00:28:59,428
though having the key gives you the

677
00:28:54,840 --> 00:29:00,750
ability to forge a transcript you can

678
00:28:59,429 --> 00:29:02,549
prove that you've not forged anything

679
00:29:00,750 --> 00:29:04,620
you can prove that you're telling the

680
00:29:02,549 --> 00:29:11,039
truth and the result is that this

681
00:29:04,620 --> 00:29:13,590
authentication becomes transferable so

682
00:29:11,039 --> 00:29:15,600
how we did this in practice we use

683
00:29:13,590 --> 00:29:18,178
signal in our particular case because

684
00:29:15,600 --> 00:29:20,490
it's popular the protocol is used in a

685
00:29:18,179 --> 00:29:22,679
lot of places the software architecture

686
00:29:20,490 --> 00:29:25,950
is kind of nice to work with but any

687
00:29:22,679 --> 00:29:27,149
protocol will do except for some exotic

688
00:29:25,950 --> 00:29:31,500
ones didn't talk about a little bit

689
00:29:27,149 --> 00:29:34,049
later so we took this unofficial signal

690
00:29:31,500 --> 00:29:35,909
CLI client which contains the you know

691
00:29:34,049 --> 00:29:38,279
all the normal stuff so it contains some

692
00:29:35,909 --> 00:29:42,450
UI code some network code and then a

693
00:29:38,279 --> 00:29:45,299
cryptographic state machine we then used

694
00:29:42,450 --> 00:29:47,990
an STX Enclave which is a type of TE

695
00:29:45,299 --> 00:29:52,980
that's in Intel processors since

696
00:29:47,990 --> 00:29:55,309
skylabers I think around 2015 and we

697
00:29:52,980 --> 00:29:59,460
take the signal cryptographic library

698
00:29:55,309 --> 00:30:02,009
implement it inside this TE and add some

699
00:29:59,460 --> 00:30:06,120
extra code that can do generation of the

700
00:30:02,009 --> 00:30:09,000
transcript and does the attestation so

701
00:30:06,120 --> 00:30:12,570
we now connect this to the modified

702
00:30:09,000 --> 00:30:13,980
signal CLI client so that instead of

703
00:30:12,570 --> 00:30:17,100
using its own cryptographic state

704
00:30:13,980 --> 00:30:21,929
machine it makes this external call and

705
00:30:17,100 --> 00:30:27,178
talks to an SD X Enclave and the result

706
00:30:21,929 --> 00:30:28,320
is this attested transcript so it's the

707
00:30:27,179 --> 00:30:29,820
kind of things that you would expect in

708
00:30:28,320 --> 00:30:33,539
a transcript it says well what's the

709
00:30:29,820 --> 00:30:35,970
identity key of the participants what

710
00:30:33,539 --> 00:30:37,169
did they say and then when you get to

711
00:30:35,970 --> 00:30:41,070
the end of the transcript

712
00:30:37,169 --> 00:30:42,659
there's this remote attestation and now

713
00:30:41,070 --> 00:30:44,689
someone who looks at this transcript and

714
00:30:42,659 --> 00:30:50,130
who can verify the remote attestation

715
00:30:44,690 --> 00:30:52,710
can men say well I know that this is a

716
00:30:50,130 --> 00:30:56,190
signal client I know that it said well

717
00:30:52,710 --> 00:30:59,700
this came from Ellis as identified by

718
00:30:56,190 --> 00:31:01,470
her identity key and that it said this

719
00:30:59,700 --> 00:31:03,710
kind of something incriminating or I did

720
00:31:01,470 --> 00:31:07,940
something embarrassing or whatever

721
00:31:03,710 --> 00:31:11,880
so now Ellis is no longer able to deny

722
00:31:07,940 --> 00:31:13,789
what she said so whoever broke into

723
00:31:11,880 --> 00:31:17,070
Bob's device can take this attestation

724
00:31:13,789 --> 00:31:19,309
publish it on Wikileaks and anyone

725
00:31:17,070 --> 00:31:21,270
looking at it can be sure that it is

726
00:31:19,309 --> 00:31:23,580
something that would kind of

727
00:31:21,270 --> 00:31:28,250
legitimately stolen rather than

728
00:31:23,580 --> 00:31:31,049
something that was just made up so

729
00:31:28,250 --> 00:31:37,529
here's our demo we've had some technical

730
00:31:31,049 --> 00:31:39,740
issues so we've got a video here so

731
00:31:37,529 --> 00:31:39,740
let's

732
00:31:47,930 --> 00:31:51,070
the start

733
00:32:03,580 --> 00:32:09,730
that so Bob runs his attack and in this

734
00:32:08,320 --> 00:32:11,409
case we've got just a normal signal

735
00:32:09,730 --> 00:32:15,820
client running on an Android phone

736
00:32:11,410 --> 00:32:19,750
and so he has his conversation with

737
00:32:15,820 --> 00:32:21,760
Alice now Alice sends whatever messages

738
00:32:19,750 --> 00:32:23,170
she wants to send she can't tell the

739
00:32:21,760 --> 00:32:24,730
difference she doesn't know that Bob is

740
00:32:23,170 --> 00:32:27,340
using this special client because she's

741
00:32:24,730 --> 00:32:29,620
just using the normal signal protocol so

742
00:32:27,340 --> 00:32:35,320
she says whatever embarrassing thing she

743
00:32:29,620 --> 00:32:36,699
doesn't want to get out and Bob again

744
00:32:35,320 --> 00:32:38,139
he's got a signal client it's a bit

745
00:32:36,700 --> 00:32:41,700
modified but it's still a signal client

746
00:32:38,140 --> 00:32:45,220
and he sees these messages coming in now

747
00:32:41,700 --> 00:32:49,360
at the end of their conversation Bob

748
00:32:45,220 --> 00:32:51,220
will produce a transcript and this

749
00:32:49,360 --> 00:32:55,959
transcript includes a remote attestation

750
00:32:51,220 --> 00:32:59,530
and so it includes these messages that

751
00:32:55,960 --> 00:33:01,240
the verifier can then look at so from

752
00:32:59,530 --> 00:33:02,470
the verifiers perspective they load up

753
00:33:01,240 --> 00:33:08,170
this transcript they put it into the

754
00:33:02,470 --> 00:33:11,860
program and they can now see that alice

755
00:33:08,170 --> 00:33:15,070
has apparently sent this message say hi

756
00:33:11,860 --> 00:33:18,820
Bob I did something embarrassing it

757
00:33:15,070 --> 00:33:21,429
shows her identity key but now because

758
00:33:18,820 --> 00:33:23,649
of the attestation we can see that this

759
00:33:21,430 --> 00:33:26,500
particular program so that had this

760
00:33:23,650 --> 00:33:28,870
particular hash of its code which is

761
00:33:26,500 --> 00:33:34,750
what the EMR in clave represents in the

762
00:33:28,870 --> 00:33:37,300
Intel system that this particular piece

763
00:33:34,750 --> 00:33:39,250
of code produced this transcript you can

764
00:33:37,300 --> 00:33:41,710
look at this code make sure it is really

765
00:33:39,250 --> 00:33:44,470
an implementation of the signal protocol

766
00:33:41,710 --> 00:33:47,920
and you can now be sure that these

767
00:33:44,470 --> 00:33:50,220
messages really were authenticated so

768
00:33:47,920 --> 00:33:53,830
the result is you publish this

769
00:33:50,220 --> 00:33:57,370
transcript file on Wikileaks and now

770
00:33:53,830 --> 00:34:00,129
anyone who trusts set te and anyone who

771
00:33:57,370 --> 00:34:04,120
trusts the program on there or the

772
00:34:00,130 --> 00:34:06,220
program source code can verify that

773
00:34:04,120 --> 00:34:10,230
transcript and will be convinced that

774
00:34:06,220 --> 00:34:10,230
alice really did send these messages

775
00:34:10,268 --> 00:34:16,489
so now that we've done that I'd like to

776
00:34:14,179 --> 00:34:19,869
move on to some countermeasures for this

777
00:34:16,489 --> 00:34:22,189
because while this will work with

778
00:34:19,869 --> 00:34:24,470
essentially any current messaging

779
00:34:22,190 --> 00:34:25,970
protocol there are nonetheless some

780
00:34:24,469 --> 00:34:30,018
things that we can do to mitigate the

781
00:34:25,969 --> 00:34:33,230
problem so if I'm going to talk about a

782
00:34:30,018 --> 00:34:38,359
class of protocols that is somewhat more

783
00:34:33,230 --> 00:34:40,369
resistant to this but also there is

784
00:34:38,359 --> 00:34:42,199
another way that involves actually

785
00:34:40,369 --> 00:34:44,659
inserting remote attestation into the

786
00:34:42,199 --> 00:34:45,980
messaging protocol itself essentially to

787
00:34:44,659 --> 00:34:50,839
show that you're not carrying out the

788
00:34:45,980 --> 00:34:53,210
attack finally it's also possible to

789
00:34:50,839 --> 00:34:55,788
reduce the ability of someone to do this

790
00:34:53,210 --> 00:34:59,240
attack by essentially putting a human in

791
00:34:55,789 --> 00:35:00,920
the loop and making authentication

792
00:34:59,240 --> 00:35:05,479
depend on something that isn't a

793
00:35:00,920 --> 00:35:08,869
testable so first I want to talk about

794
00:35:05,480 --> 00:35:12,500
online deniable protocols so the

795
00:35:08,869 --> 00:35:14,450
deniability as I spoke about before it

796
00:35:12,500 --> 00:35:17,420
fails when you have a verify that's

797
00:35:14,450 --> 00:35:20,299
interactive so what we said before is

798
00:35:17,420 --> 00:35:24,160
that Alice sends Bob a message and then

799
00:35:20,299 --> 00:35:28,549
Bob can't prove anything after the fact

800
00:35:24,160 --> 00:35:31,490
but what if this verifier Valerie is now

801
00:35:28,549 --> 00:35:33,619
talking to Bob at the same time so the

802
00:35:31,490 --> 00:35:36,558
the verifier is now actually involved in

803
00:35:33,619 --> 00:35:39,319
the messaging protocol itself so what we

804
00:35:36,559 --> 00:35:43,039
can kind of do is imagine instead Bob

805
00:35:39,319 --> 00:35:45,410
let's the verifier take it take his

806
00:35:43,039 --> 00:35:49,640
place so now instead of talking to Bob

807
00:35:45,410 --> 00:35:52,368
Alice talks to Valerie but there's a

808
00:35:49,640 --> 00:35:54,109
problem which is that when you do this

809
00:35:52,369 --> 00:35:55,400
because the protocol is off indicated

810
00:35:54,109 --> 00:35:57,940
Alice knows she's talking to Valerie

811
00:35:55,400 --> 00:36:02,539
Alice knows she isn't talking to Bob

812
00:35:57,940 --> 00:36:05,539
so what the verifier does is ask Bob

813
00:36:02,539 --> 00:36:07,069
well I I'm talking to Alice but I don't

814
00:36:05,539 --> 00:36:09,980
I don't want her to know that she is me

815
00:36:07,069 --> 00:36:13,788
so can you just do something for me with

816
00:36:09,980 --> 00:36:19,569
your identity key to authenticate me to

817
00:36:13,789 --> 00:36:19,569
Alice so Bob now does this and

818
00:36:19,980 --> 00:36:24,390
Ellis can I'm sorry and this purifier

819
00:36:22,950 --> 00:36:27,240
can now be convinced that Alice has

820
00:36:24,390 --> 00:36:31,770
really said something so what online

821
00:36:27,240 --> 00:36:35,009
deniable protocols do is they make

822
00:36:31,770 --> 00:36:41,400
forgery a little bit more easy because

823
00:36:35,010 --> 00:36:44,370
now instead of the identity key just

824
00:36:41,400 --> 00:36:47,100
allowing you to set up a conversation it

825
00:36:44,370 --> 00:36:49,680
also will allow you to man in the middle

826
00:36:47,100 --> 00:36:53,370
of conversation so in the normal case

827
00:36:49,680 --> 00:36:55,440
this is fine because if you have your

828
00:36:53,370 --> 00:36:56,730
identity key you keep it secret so if

829
00:36:55,440 --> 00:37:00,210
you're in the person who can man in the

830
00:36:56,730 --> 00:37:04,620
middle you with you and well why would I

831
00:37:00,210 --> 00:37:09,810
attack myself but with this kind of

832
00:37:04,620 --> 00:37:13,279
protocol now if Bob tries to help this

833
00:37:09,810 --> 00:37:16,230
verifier to verify messages from Helles

834
00:37:13,280 --> 00:37:19,380
that verifier doesn't know if bob is

835
00:37:16,230 --> 00:37:21,210
actually using his identity key to help

836
00:37:19,380 --> 00:37:23,730
forge messages or to try to forge

837
00:37:21,210 --> 00:37:27,420
messages from house and so we're back in

838
00:37:23,730 --> 00:37:28,920
this original situation where Bob can

839
00:37:27,420 --> 00:37:32,340
forge messages that look like they're

840
00:37:28,920 --> 00:37:38,220
from Ellis the verifier has to depend on

841
00:37:32,340 --> 00:37:40,910
whether she trusts Bob so we're back to

842
00:37:38,220 --> 00:37:44,759
the normal kind of deniability situation

843
00:37:40,910 --> 00:37:48,930
so the upcoming OTR fee for protocol

844
00:37:44,760 --> 00:37:52,350
which isn't ours is going to be online

845
00:37:48,930 --> 00:37:54,180
deniable and this is kind of a big thing

846
00:37:52,350 --> 00:37:55,950
for this particular protocol and they

847
00:37:54,180 --> 00:37:59,399
were nice enough to acknowledge this

848
00:37:55,950 --> 00:38:01,020
attack as being important justification

849
00:37:59,400 --> 00:38:03,990
for using this type of online deniable

850
00:38:01,020 --> 00:38:06,750
protocol now there are however

851
00:38:03,990 --> 00:38:08,640
limitations to this mitigation because

852
00:38:06,750 --> 00:38:11,940
the attack is still possible if this

853
00:38:08,640 --> 00:38:14,609
identity key is created inside a ta like

854
00:38:11,940 --> 00:38:17,970
an STX enclave and the reason for this

855
00:38:14,610 --> 00:38:21,060
is that like before if a key is inside

856
00:38:17,970 --> 00:38:23,160
the TE e and you use attestation then

857
00:38:21,060 --> 00:38:26,520
that lets you prove that you haven't

858
00:38:23,160 --> 00:38:29,100
used it to forge things so as long as

859
00:38:26,520 --> 00:38:32,009
that identity key is the only thing that

860
00:38:29,100 --> 00:38:35,240
allows messages to be forged

861
00:38:32,010 --> 00:38:37,910
if you protect it inside the te e then

862
00:38:35,240 --> 00:38:40,500
it's still possible to do this attack

863
00:38:37,910 --> 00:38:42,990
but the result is that if you switch to

864
00:38:40,500 --> 00:38:46,170
an online deniable protocol if you

865
00:38:42,990 --> 00:38:49,080
install a messaging app and create your

866
00:38:46,170 --> 00:38:51,930
identity keys then someone who later on

867
00:38:49,080 --> 00:38:56,190
attacks you by compromising your mobile

868
00:38:51,930 --> 00:39:00,330
phone so they can no longer do this type

869
00:38:56,190 --> 00:39:03,150
of attack using attestation so this is

870
00:39:00,330 --> 00:39:05,400
helpful in a really common case though

871
00:39:03,150 --> 00:39:08,100
where it isn't useful is if the attacker

872
00:39:05,400 --> 00:39:10,050
is either able to compromise your device

873
00:39:08,100 --> 00:39:14,069
before you've installed the messaging

874
00:39:10,050 --> 00:39:19,110
app or if Bob himself is the attacker

875
00:39:14,070 --> 00:39:20,990
and wants to do this kind of thing so to

876
00:39:19,110 --> 00:39:23,640
protect against those kinds of attacks

877
00:39:20,990 --> 00:39:25,830
we need to use something different and

878
00:39:23,640 --> 00:39:28,440
in fact we need to incorporate remote

879
00:39:25,830 --> 00:39:31,860
attestation into the messaging protocol

880
00:39:28,440 --> 00:39:36,170
itself and the basic idea is that we use

881
00:39:31,860 --> 00:39:40,470
attestation to ensure or to assure Alice

882
00:39:36,170 --> 00:39:44,640
that Bob he has a teehee but that he

883
00:39:40,470 --> 00:39:46,319
isn't using it in a malicious way so one

884
00:39:44,640 --> 00:39:49,980
thing that he can do for example is to

885
00:39:46,320 --> 00:39:51,540
try to show that a private key it's not

886
00:39:49,980 --> 00:39:54,180
stored in a te it's stored somewhere

887
00:39:51,540 --> 00:39:57,509
outside where the operating system can

888
00:39:54,180 --> 00:40:01,319
do whatever it wants with it and the

889
00:39:57,510 --> 00:40:03,690
result is that the user Bob or whoever

890
00:40:01,320 --> 00:40:05,400
is compromised Bob's device they can

891
00:40:03,690 --> 00:40:07,070
definitely Forge messages so they've

892
00:40:05,400 --> 00:40:11,250
proven that it's possible to produce

893
00:40:07,070 --> 00:40:13,200
forgeries of your messages and so you

894
00:40:11,250 --> 00:40:17,340
can be certain that an attestation

895
00:40:13,200 --> 00:40:20,100
attack won't be convincing so the

896
00:40:17,340 --> 00:40:22,260
downside of this is that it requires you

897
00:40:20,100 --> 00:40:24,150
don't protect your keys using a te and

898
00:40:22,260 --> 00:40:27,060
this is bad because you know everyone

899
00:40:24,150 --> 00:40:29,820
wants to try to protect their keys so an

900
00:40:27,060 --> 00:40:31,860
alternative is to try to implement the

901
00:40:29,820 --> 00:40:34,710
entire protocol inside one of these

902
00:40:31,860 --> 00:40:37,470
trusted execution environments and just

903
00:40:34,710 --> 00:40:39,660
don't do the attack and you include in

904
00:40:37,470 --> 00:40:42,870
the protocol an attestation that says

905
00:40:39,660 --> 00:40:44,609
you're not carrying out this attack so

906
00:40:42,870 --> 00:40:45,720
this lets you keep everything safe

907
00:40:44,610 --> 00:40:47,400
inside the TE

908
00:40:45,720 --> 00:40:50,970
and it reduces the ability of other

909
00:40:47,400 --> 00:40:53,670
software on your machine to decrypt

910
00:40:50,970 --> 00:40:56,129
messages for example but it has the

911
00:40:53,670 --> 00:40:57,599
downside that as a countermeasure it's

912
00:40:56,130 --> 00:41:00,330
less effective because you're attesting

913
00:40:57,599 --> 00:41:03,330
this huge piece of code and whoever is

914
00:41:00,330 --> 00:41:06,330
receiving it so Ellis receiving this

915
00:41:03,330 --> 00:41:07,890
attestation from Bob she needs to look

916
00:41:06,330 --> 00:41:09,690
at this huge program implementing a

917
00:41:07,890 --> 00:41:11,730
whole messaging client and be convinced

918
00:41:09,690 --> 00:41:12,920
that Bob isn't doing anything

919
00:41:11,730 --> 00:41:17,460
underhanded

920
00:41:12,920 --> 00:41:18,930
and as a result there is a trade-off in

921
00:41:17,460 --> 00:41:21,510
that the countermeasure it can be more

922
00:41:18,930 --> 00:41:24,419
effective if you're willing to sacrifice

923
00:41:21,510 --> 00:41:28,320
the ability to use your trusted

924
00:41:24,420 --> 00:41:30,690
execution environment for good so the

925
00:41:28,320 --> 00:41:32,550
final countermeasure that I'll talk

926
00:41:30,690 --> 00:41:34,830
about which are described is putting a

927
00:41:32,550 --> 00:41:37,260
human in the loop it depends on the fact

928
00:41:34,830 --> 00:41:39,299
that attestation can only convince

929
00:41:37,260 --> 00:41:42,210
someone else of what is actually

930
00:41:39,300 --> 00:41:45,390
verifiable on the machine so if you have

931
00:41:42,210 --> 00:41:47,580
some kind of user input for example that

932
00:41:45,390 --> 00:41:49,920
isn't a testable because the hardware

933
00:41:47,580 --> 00:41:51,660
doesn't have any proof of what the human

934
00:41:49,920 --> 00:41:55,710
who is pressing the buttons is actually

935
00:41:51,660 --> 00:41:57,839
doing so what you can do is instead of

936
00:41:55,710 --> 00:42:01,260
having a long-term identity key that you

937
00:41:57,839 --> 00:42:04,650
use with everyone you set up some kind

938
00:42:01,260 --> 00:42:07,040
of bilateral set of identity keys that's

939
00:42:04,650 --> 00:42:09,599
different for everyone you talk to and

940
00:42:07,040 --> 00:42:11,009
the users have to verify fingerprints

941
00:42:09,599 --> 00:42:13,920
manually which they have to do anyway

942
00:42:11,010 --> 00:42:17,760
if you want to be kind of really secure

943
00:42:13,920 --> 00:42:19,349
and so when you carry out the attack you

944
00:42:17,760 --> 00:42:21,900
still get an attestation you still get

945
00:42:19,349 --> 00:42:24,780
proof that some messages came from

946
00:42:21,900 --> 00:42:27,140
someone with a certain identity key but

947
00:42:24,780 --> 00:42:31,160
what you don't get is proof that a

948
00:42:27,140 --> 00:42:33,779
particular person actually owns that key

949
00:42:31,160 --> 00:42:35,399
and this conveniently is also compatible

950
00:42:33,780 --> 00:42:39,480
with current your eyes so this is

951
00:42:35,400 --> 00:42:42,869
signals UI for comparing identity keys

952
00:42:39,480 --> 00:42:45,420
so you pull up this window on your

953
00:42:42,869 --> 00:42:48,420
signal client the person you're talking

954
00:42:45,420 --> 00:42:52,800
to also pulls this up the number should

955
00:42:48,420 --> 00:42:55,859
be the same and it's just a big opaque

956
00:42:52,800 --> 00:42:57,660
blob and so if you no longer use a long

957
00:42:55,859 --> 00:43:00,000
term identity key that's the same for

958
00:42:57,660 --> 00:43:00,990
everyone it doesn't matter because it's

959
00:43:00,000 --> 00:43:02,910
is an opaque blob and you'll get a

960
00:43:00,990 --> 00:43:04,890
different kind of opaque blob but it's

961
00:43:02,910 --> 00:43:10,859
still an opaque blob that will be the

962
00:43:04,890 --> 00:43:14,700
same on both of your phones so just a

963
00:43:10,860 --> 00:43:16,530
brief summary of these so online

964
00:43:14,700 --> 00:43:18,089
deniable protocols they're highly

965
00:43:16,530 --> 00:43:22,350
deployable consists of software change

966
00:43:18,090 --> 00:43:23,790
and they're effective in at least some

967
00:43:22,350 --> 00:43:25,170
cases and they're effective in the case

968
00:43:23,790 --> 00:43:27,240
where you're worried about someone

969
00:43:25,170 --> 00:43:30,420
coming in and compromising your device

970
00:43:27,240 --> 00:43:32,910
and publishing your messages online so

971
00:43:30,420 --> 00:43:36,870
that's that's good and that's important

972
00:43:32,910 --> 00:43:39,899
to a lot of people but it's limited in

973
00:43:36,870 --> 00:43:42,950
that if an attacker takes hold of the

974
00:43:39,900 --> 00:43:46,560
device before the app is installed then

975
00:43:42,950 --> 00:43:50,129
it doesn't help there now you can put

976
00:43:46,560 --> 00:43:51,779
remote attestation in and that works

977
00:43:50,130 --> 00:43:53,940
very well in that it provides a very

978
00:43:51,780 --> 00:43:56,070
strong countermeasure but it's difficult

979
00:43:53,940 --> 00:43:58,680
to ploy boot because remote attestation

980
00:43:56,070 --> 00:44:00,780
is difficult to use in end-user devices

981
00:43:58,680 --> 00:44:02,009
because there are so many different

982
00:44:00,780 --> 00:44:03,810
devices out there that you have to

983
00:44:02,010 --> 00:44:06,300
establish trust in and so many software

984
00:44:03,810 --> 00:44:08,190
versions that are involved that it's

985
00:44:06,300 --> 00:44:12,480
perhaps not realistic to expect that

986
00:44:08,190 --> 00:44:13,770
messaging clients switch to this so the

987
00:44:12,480 --> 00:44:15,060
last countermeasure that I talked about

988
00:44:13,770 --> 00:44:17,820
where we essentially make an

989
00:44:15,060 --> 00:44:21,330
authentication not verifiable completely

990
00:44:17,820 --> 00:44:23,670
on the machine it's quite effective and

991
00:44:21,330 --> 00:44:25,140
it doesn't require complicated changes

992
00:44:23,670 --> 00:44:27,240
but it's very easy to get it wrong

993
00:44:25,140 --> 00:44:30,240
because for example if you have an

994
00:44:27,240 --> 00:44:31,919
authenticated key server lookup so for

995
00:44:30,240 --> 00:44:35,689
example you have a TLS connection where

996
00:44:31,920 --> 00:44:37,650
you send a message to the signal server

997
00:44:35,690 --> 00:44:40,440
containing a phone number and it comes

998
00:44:37,650 --> 00:44:42,810
back with a public key well now you have

999
00:44:40,440 --> 00:44:46,470
an authenticated linkage from this

1000
00:44:42,810 --> 00:44:49,740
public key to a phone number and they've

1001
00:44:46,470 --> 00:44:52,350
lost their deniability because now

1002
00:44:49,740 --> 00:44:56,399
there's this link phone number

1003
00:44:52,350 --> 00:44:58,950
public key the public key message so as

1004
00:44:56,400 --> 00:45:01,560
a result we recommend switching to these

1005
00:44:58,950 --> 00:45:08,160
online deniable protocols that are

1006
00:45:01,560 --> 00:45:09,110
starting to become available so the big

1007
00:45:08,160 --> 00:45:11,710
picture

1008
00:45:09,110 --> 00:45:14,930
first it's not just messaging protocols

1009
00:45:11,710 --> 00:45:15,710
anything that's machine verifiable will

1010
00:45:14,930 --> 00:45:18,290
be at risk

1011
00:45:15,710 --> 00:45:20,120
so one path positive user this is that

1012
00:45:18,290 --> 00:45:22,490
you can get a proof of anything that

1013
00:45:20,120 --> 00:45:25,580
comes from a TLS server and this might

1014
00:45:22,490 --> 00:45:28,250
let you prove for example that a website

1015
00:45:25,580 --> 00:45:29,779
has been distributing malware that's

1016
00:45:28,250 --> 00:45:32,120
been that's targeted towards a specific

1017
00:45:29,780 --> 00:45:36,890
person or that's coming intermittently

1018
00:45:32,120 --> 00:45:39,049
through an ad network but another kind

1019
00:45:36,890 --> 00:45:40,910
of negative use is that in any kind of

1020
00:45:39,050 --> 00:45:43,460
into in verifiable voting system that

1021
00:45:40,910 --> 00:45:45,230
doesn't involve some out-of-band things

1022
00:45:43,460 --> 00:45:47,720
like numbers on a paper card or

1023
00:45:45,230 --> 00:45:51,740
something like that you could then use

1024
00:45:47,720 --> 00:45:53,299
attestation to prove that your vote was

1025
00:45:51,740 --> 00:45:57,520
to a particular candidate and that would

1026
00:45:53,300 --> 00:45:57,520
allow things like votes selling and such

1027
00:45:57,850 --> 00:46:02,299
so if you want to leave you with three

1028
00:46:00,410 --> 00:46:03,500
thoughts the first one is that I hope

1029
00:46:02,300 --> 00:46:05,540
you have convinced you that deniability

1030
00:46:03,500 --> 00:46:07,370
is important this is evidenced by how

1031
00:46:05,540 --> 00:46:09,290
popular protocol slack signals have

1032
00:46:07,370 --> 00:46:11,720
become but the more important things

1033
00:46:09,290 --> 00:46:15,860
that the fact that attestation is now

1034
00:46:11,720 --> 00:46:17,750
widely available doesn't give you the

1035
00:46:15,860 --> 00:46:20,060
same guarantees that enable protocols

1036
00:46:17,750 --> 00:46:21,620
you thought would have given you right

1037
00:46:20,060 --> 00:46:23,720
so this is important for in two respects

1038
00:46:21,620 --> 00:46:26,390
if you're a developer and you were using

1039
00:46:23,720 --> 00:46:28,279
a deniability mechanism now you should

1040
00:46:26,390 --> 00:46:30,350
realize that the assumptions that your

1041
00:46:28,280 --> 00:46:32,360
your protocol or your system was based

1042
00:46:30,350 --> 00:46:34,310
on have changed because attestation is

1043
00:46:32,360 --> 00:46:36,410
widely available but more importantly if

1044
00:46:34,310 --> 00:46:37,970
you are a user who relied on deniability

1045
00:46:36,410 --> 00:46:39,830
if you are a visual blower or if you're

1046
00:46:37,970 --> 00:46:42,730
a dissident or somebody like that and

1047
00:46:39,830 --> 00:46:45,830
you were using a protocol like signal or

1048
00:46:42,730 --> 00:46:47,810
ot R or something like that you should

1049
00:46:45,830 --> 00:46:50,270
be aware that the level of deniability

1050
00:46:47,810 --> 00:46:50,960
that you thought you had is not the same

1051
00:46:50,270 --> 00:46:52,670
anymore

1052
00:46:50,960 --> 00:46:54,230
not because cryptographic nobility is

1053
00:46:52,670 --> 00:46:56,900
broken we haven't broken signal we

1054
00:46:54,230 --> 00:46:59,380
haven't broken OTR right but the

1055
00:46:56,900 --> 00:47:02,270
underlying assumptions have changed and

1056
00:46:59,380 --> 00:47:04,160
and the silver lining is that there are

1057
00:47:02,270 --> 00:47:06,200
protocols that can reduce this window of

1058
00:47:04,160 --> 00:47:09,109
attack such as the forthcoming OTR

1059
00:47:06,200 --> 00:47:11,299
before so with that thank you very much

1060
00:47:09,110 --> 00:47:13,660
and I hope we can still take a couple of

1061
00:47:11,300 --> 00:47:13,660
questions

1062
00:47:15,550 --> 00:47:21,750
[Applause]

1063
00:47:22,950 --> 00:47:26,850
this question over there

1064
00:47:33,280 --> 00:47:38,050
just a general question if I were to be

1065
00:47:35,770 --> 00:47:41,530
chatting over a web RTC for example is

1066
00:47:38,050 --> 00:47:46,630
it deniable or not is very bad is it

1067
00:47:41,530 --> 00:47:49,599
enable web RPC I'm not I'm not familiar

1068
00:47:46,630 --> 00:47:53,170
with how that particular protocol works

1069
00:47:49,599 --> 00:47:55,090
but it does it provide some kind of

1070
00:47:53,170 --> 00:47:57,900
authentication cryptographically for

1071
00:47:55,090 --> 00:48:00,940
example because if that's the case then

1072
00:47:57,900 --> 00:48:03,099
then the attack will work from what I

1073
00:48:00,940 --> 00:48:07,450
understand about web RTC the

1074
00:48:03,099 --> 00:48:09,880
authentication is done by authentication

1075
00:48:07,450 --> 00:48:12,430
provider that you choose for example it

1076
00:48:09,880 --> 00:48:14,560
would be if you choose to have Facebook

1077
00:48:12,430 --> 00:48:16,690
authenticate you for your browser or

1078
00:48:14,560 --> 00:48:19,210
Google or Mozilla or any one of those

1079
00:48:16,690 --> 00:48:21,550
identity providers authenticate you then

1080
00:48:19,210 --> 00:48:23,859
they would help you establish the

1081
00:48:21,550 --> 00:48:25,990
communication by passing the keys from

1082
00:48:23,859 --> 00:48:28,720
you to them you to the other person and

1083
00:48:25,990 --> 00:48:30,310
the other person to you and and then you

1084
00:48:28,720 --> 00:48:32,290
have a secure channel established

1085
00:48:30,310 --> 00:48:34,029
between two browsers and then you have

1086
00:48:32,290 --> 00:48:37,900
the communication going so that's how

1087
00:48:34,030 --> 00:48:41,530
web RTC works in principle yeah

1088
00:48:37,900 --> 00:48:43,540
okay so I'll tentatively say that yes

1089
00:48:41,530 --> 00:48:46,780
that would work because what you can

1090
00:48:43,540 --> 00:48:49,119
then do is so I'm say talking to

1091
00:48:46,780 --> 00:48:53,710
Facebook and you have Google as your

1092
00:48:49,119 --> 00:49:00,670
identity provider so I use the attack on

1093
00:48:53,710 --> 00:49:02,619
my connection to Facebook and this whole

1094
00:49:00,670 --> 00:49:05,230
process I get an attestation to the fact

1095
00:49:02,619 --> 00:49:07,720
that these keys are now shared with you

1096
00:49:05,230 --> 00:49:09,730
and then when I carry out the normal

1097
00:49:07,720 --> 00:49:15,069
thing I use the same attack and that

1098
00:49:09,730 --> 00:49:17,680
shows that this message or this call

1099
00:49:15,070 --> 00:49:20,740
came from this particular channel and

1100
00:49:17,680 --> 00:49:23,910
because of that first attestation on the

1101
00:49:20,740 --> 00:49:27,598
key exchange using these trusted parties

1102
00:49:23,910 --> 00:49:31,089
that then will link that back to the

1103
00:49:27,599 --> 00:49:32,560
real world identity so I guess another

1104
00:49:31,089 --> 00:49:35,170
way of putting is that is that I don't

1105
00:49:32,560 --> 00:49:37,270
know if about you see itself provides

1106
00:49:35,170 --> 00:49:40,330
deniability but if it does this attack

1107
00:49:37,270 --> 00:49:43,150
would be applicable because it shows one

1108
00:49:40,330 --> 00:49:45,980
party's behavior as being correct by

1109
00:49:43,150 --> 00:49:49,400
using attestation from that device

1110
00:49:45,980 --> 00:49:51,200
yeah I mean perhaps the kind of most

1111
00:49:49,400 --> 00:49:53,240
straightforward way to put it is that if

1112
00:49:51,200 --> 00:49:57,109
you have a protocol or if you have a

1113
00:49:53,240 --> 00:49:59,149
system where the on your screen you can

1114
00:49:57,109 --> 00:50:02,630
come up with a person's name or

1115
00:49:59,150 --> 00:50:04,160
long-term identity key that you don't

1116
00:50:02,630 --> 00:50:05,750
have to kind of be involved with as a

1117
00:50:04,160 --> 00:50:07,910
user it just comes up on the screen and

1118
00:50:05,750 --> 00:50:09,710
if you can trust that we're out of time

1119
00:50:07,910 --> 00:50:13,839
thank you very much but we'll be here so

1120
00:50:09,710 --> 00:50:13,839
please come and ask questions thank you

1121
00:50:13,860 --> 00:50:17,989
[Applause]

