1
00:00:01,180 --> 00:00:14,730
[Music]

2
00:00:16,079 --> 00:00:18,800
hello everyone

3
00:00:18,800 --> 00:00:22,160
i'm renter and i'm very glad

4
00:00:22,160 --> 00:00:25,119
to share my research with you at the

5
00:00:25,119 --> 00:00:25,920
blackhead

6
00:00:25,920 --> 00:00:30,480
europe conference my talk today

7
00:00:30,480 --> 00:00:33,520
is discovery 20 years old

8
00:00:33,520 --> 00:00:37,840
vulnerabilities in modern windows kernel

9
00:00:37,840 --> 00:00:41,280
as the title shows this

10
00:00:41,280 --> 00:00:44,320
presentation will talk about

11
00:00:44,320 --> 00:00:47,920
an old and rare known

12
00:00:47,920 --> 00:00:52,000
component in windows kernel

13
00:00:52,000 --> 00:00:55,360
it's named user mode print

14
00:00:55,360 --> 00:00:57,860
driver unpd

15
00:00:57,860 --> 00:01:00,239
[Music]

16
00:01:00,239 --> 00:01:03,280
actually i have got more

17
00:01:03,280 --> 00:01:06,960
than a thousand of box from the umpd

18
00:01:06,960 --> 00:01:09,439
callback

19
00:01:11,360 --> 00:01:14,960
but microsoft just merged

20
00:01:14,960 --> 00:01:18,479
nine cases of

21
00:01:18,479 --> 00:01:24,158
them in fact this box

22
00:01:24,400 --> 00:01:26,960
affects all the versions of windows

23
00:01:26,960 --> 00:01:27,680
system

24
00:01:27,680 --> 00:01:32,880
from windows 7 to windows 10.

25
00:01:36,560 --> 00:01:40,079
it is still very few people

26
00:01:40,079 --> 00:01:43,360
have paid attention to the security

27
00:01:43,360 --> 00:01:46,880
issue about the user mode about the user

28
00:01:46,880 --> 00:01:49,040
mode printed driver

29
00:01:49,040 --> 00:01:52,079
so i want to discuss

30
00:01:52,079 --> 00:01:55,840
the details about the umpd

31
00:01:55,840 --> 00:01:59,840
callback with you

32
00:02:03,920 --> 00:02:07,280
okay i will give a brief introduction

33
00:02:07,280 --> 00:02:09,199
about myself

34
00:02:09,199 --> 00:02:13,120
i am a researcher of singular security

35
00:02:13,120 --> 00:02:14,640
lab

36
00:02:14,640 --> 00:02:17,840
um past years

37
00:02:17,840 --> 00:02:21,599
i mainly focus on a windows kernel

38
00:02:21,599 --> 00:02:26,239
but hunting and exploitation

39
00:02:26,239 --> 00:02:29,599
and i have also found

40
00:02:29,599 --> 00:02:34,400
some bugs about visualization

41
00:02:34,400 --> 00:02:37,760
in vmware workstation and the microsoft

42
00:02:37,760 --> 00:02:40,319
hyper-v

43
00:02:41,280 --> 00:02:45,760
and in the past i have

44
00:02:45,760 --> 00:02:49,040
spoken in summer security conference

45
00:02:49,040 --> 00:02:52,560
such as hitp 44 count

46
00:02:52,560 --> 00:02:55,680
and zero knights

47
00:02:57,360 --> 00:03:02,840
the agenda today includes three parts

48
00:03:02,840 --> 00:03:08,239
first i will introduce

49
00:03:08,239 --> 00:03:11,440
the print driver model in

50
00:03:11,440 --> 00:03:14,959
windows system the second

51
00:03:14,959 --> 00:03:19,200
i will introduce the umpd callback

52
00:03:19,200 --> 00:03:23,120
and displaying why the user work printer

53
00:03:23,120 --> 00:03:24,239
driver

54
00:03:24,239 --> 00:03:29,200
could lead to a good attack service

55
00:03:29,200 --> 00:03:32,959
the third part i will disclose

56
00:03:32,959 --> 00:03:36,720
two box found by myself

57
00:03:36,720 --> 00:03:41,359
which never discussed by others before

58
00:03:44,840 --> 00:03:46,319
okay

59
00:03:46,319 --> 00:03:49,519
let's have a quick view of the printer

60
00:03:49,519 --> 00:03:51,920
driver

61
00:03:53,599 --> 00:03:57,200
from the windows 1000 systems

62
00:03:57,200 --> 00:04:00,480
to now all the windows

63
00:04:00,480 --> 00:04:04,159
printer drivers consist consist

64
00:04:04,159 --> 00:04:09,200
of many two components

65
00:04:09,280 --> 00:04:13,120
the printer graphic dll

66
00:04:13,120 --> 00:04:16,959
and a printer interface the air

67
00:04:16,959 --> 00:04:20,238
a printer interface dll

68
00:04:20,238 --> 00:04:25,040
usually provides a user interface

69
00:04:25,040 --> 00:04:28,880
to the driver and

70
00:04:28,880 --> 00:04:32,560
provide an interface the spoiler

71
00:04:32,560 --> 00:04:35,600
could call to notify the driver

72
00:04:35,600 --> 00:04:40,080
about the print system events

73
00:04:41,199 --> 00:04:45,520
the printer graphic model usually

74
00:04:45,520 --> 00:04:48,720
essences assist

75
00:04:48,720 --> 00:04:52,880
gdi kernel in rendering a print job

76
00:04:52,880 --> 00:04:56,880
and send the rendered data screen

77
00:04:56,880 --> 00:05:00,080
to the print exposure

78
00:05:02,400 --> 00:05:05,520
this picture shows how

79
00:05:05,520 --> 00:05:08,960
the printer graphic model working

80
00:05:08,960 --> 00:05:13,919
with the gdi rendering engine in kernel

81
00:05:18,960 --> 00:05:22,240
a printer graphic dlr should

82
00:05:22,240 --> 00:05:25,360
implement the graphic device driver

83
00:05:25,360 --> 00:05:26,160
interface

84
00:05:26,160 --> 00:05:29,600
to ensure that its graphic device

85
00:05:29,600 --> 00:05:33,199
produce the bad lead the very neat

86
00:05:33,199 --> 00:05:35,919
graphic output

87
00:05:35,919 --> 00:05:39,280
the graphics driver interface function

88
00:05:39,280 --> 00:05:43,759
is named with a prefix drv

89
00:05:43,759 --> 00:05:46,560
some of the driver interface functions

90
00:05:46,560 --> 00:05:47,120
live

91
00:05:47,120 --> 00:05:50,560
load as you see

92
00:05:50,560 --> 00:05:54,720
if you start a print job

93
00:05:54,720 --> 00:05:59,360
the xu will execute the drv start doc

94
00:05:59,360 --> 00:06:02,000
diary start page they are restart

95
00:06:02,000 --> 00:06:03,360
binding

96
00:06:03,360 --> 00:06:05,600
functions in the user mode printer

97
00:06:05,600 --> 00:06:06,720
driver

98
00:06:06,720 --> 00:06:10,000
and when the kernel draw in

99
00:06:10,000 --> 00:06:13,280
the graphics the graphic

100
00:06:13,280 --> 00:06:16,960
emits the drv big

101
00:06:16,960 --> 00:06:19,680
the refill path function should be

102
00:06:19,680 --> 00:06:21,840
called

103
00:06:25,280 --> 00:06:28,800
when a user print a document

104
00:06:28,800 --> 00:06:31,919
and start a rendering and start

105
00:06:31,919 --> 00:06:35,199
rendering a print job

106
00:06:35,199 --> 00:06:38,080
the interaction between gdi render

107
00:06:38,080 --> 00:06:38,800
engine

108
00:06:38,800 --> 00:06:41,600
and their printer graphics framework as

109
00:06:41,600 --> 00:06:44,080
follows

110
00:06:44,240 --> 00:06:47,280
as follows as shown

111
00:06:47,280 --> 00:06:51,199
we can see that the gdi kernel called

112
00:06:51,199 --> 00:06:55,280
drv enable surface function

113
00:06:55,280 --> 00:06:59,198
in print graphics driver

114
00:07:01,520 --> 00:07:04,960
attack the umpd callback

115
00:07:04,960 --> 00:07:08,319
the second part of this talk i will

116
00:07:08,319 --> 00:07:09,120
introduce

117
00:07:09,120 --> 00:07:12,080
the working mechanism of user mode

118
00:07:12,080 --> 00:07:14,840
printer driver

119
00:07:14,840 --> 00:07:17,840
index

120
00:07:18,319 --> 00:07:22,080
what is umpd it means

121
00:07:22,080 --> 00:07:26,000
user mode print driver

122
00:07:26,000 --> 00:07:30,240
as the partners design a windows system

123
00:07:30,240 --> 00:07:33,280
bring the driver models

124
00:07:33,280 --> 00:07:37,520
a load unloaded into the kernel

125
00:07:37,520 --> 00:07:41,759
but started with windows vista

126
00:07:41,759 --> 00:07:46,560
microsoft made a big change

127
00:07:47,759 --> 00:07:51,440
the printer drivers would run

128
00:07:51,440 --> 00:07:54,639
in user mode instead of running

129
00:07:54,639 --> 00:07:58,800
as a part as part of the current

130
00:07:58,800 --> 00:08:02,080
this change was made as a

131
00:08:02,080 --> 00:08:05,120
security enhancement and

132
00:08:05,120 --> 00:08:08,720
the security benefit is quite

133
00:08:08,720 --> 00:08:12,960
screwed is quite clear once move

134
00:08:12,960 --> 00:08:15,919
once moved the print driver into user

135
00:08:15,919 --> 00:08:17,039
mode

136
00:08:17,039 --> 00:08:20,160
the box in printer driver have

137
00:08:20,160 --> 00:08:27,280
a much reduced security impact

138
00:08:27,280 --> 00:08:30,800
in fact it's

139
00:08:30,800 --> 00:08:34,159
it surely reduced

140
00:08:34,159 --> 00:08:37,519
the balance in the

141
00:08:37,519 --> 00:08:41,839
printer driver but

142
00:08:43,279 --> 00:08:45,839
it has

143
00:08:47,519 --> 00:08:50,880
create a new attack surface to make

144
00:08:50,880 --> 00:08:53,519
the kernel driver to make the graphic

145
00:08:53,519 --> 00:08:54,720
corner

146
00:08:54,720 --> 00:08:58,240
more dangerous because

147
00:08:58,240 --> 00:09:02,480
the kernel callback should

148
00:09:02,480 --> 00:09:05,519
usually shoot the callback to the

149
00:09:05,519 --> 00:09:09,839
user mode printer graphic driver

150
00:09:11,279 --> 00:09:15,120
a user mode printer driver should export

151
00:09:15,120 --> 00:09:18,959
the driver interface functions

152
00:09:20,800 --> 00:09:26,319
these functions nand with the drv prefix

153
00:09:26,880 --> 00:09:29,680
they will be called by the kernel guy

154
00:09:29,680 --> 00:09:30,560
engine

155
00:09:30,560 --> 00:09:33,279
the callback from graphics kernel to

156
00:09:33,279 --> 00:09:35,040
user mode

157
00:09:35,040 --> 00:09:38,240
print driver could

158
00:09:38,240 --> 00:09:42,240
lead to a big attack surface

159
00:09:43,440 --> 00:09:46,160
as you know

160
00:09:46,959 --> 00:09:50,560
the user mode the kernel attacks

161
00:09:50,560 --> 00:09:53,760
through the user mode callbacks

162
00:09:53,760 --> 00:09:58,160
it's very good it's a very good

163
00:09:58,160 --> 00:10:00,959
presentation

164
00:10:01,760 --> 00:10:05,440
the use mode callback is first discussed

165
00:10:05,440 --> 00:10:09,680
in public nine years ago

166
00:10:11,680 --> 00:10:16,320
we just we just revealed

167
00:10:16,320 --> 00:10:19,279
mixing uk user mode callback whenever it

168
00:10:19,279 --> 00:10:21,519
is

169
00:10:22,320 --> 00:10:25,760
a classic user mode callback path

170
00:10:25,760 --> 00:10:29,760
is shown as nice

171
00:10:30,959 --> 00:10:34,000
when you create

172
00:10:34,000 --> 00:10:37,200
a user object

173
00:10:37,440 --> 00:10:40,320
in user space

174
00:10:40,800 --> 00:10:44,839
and income

175
00:10:44,839 --> 00:10:49,519
and when you trigger some functions

176
00:10:49,519 --> 00:10:52,240
to call or use motor callback to use a

177
00:10:52,240 --> 00:10:53,360
space

178
00:10:53,360 --> 00:10:56,800
and the v another attacker

179
00:10:56,800 --> 00:11:01,279
the attacker could could hook

180
00:11:01,279 --> 00:11:05,839
in the user space to modify the object

181
00:11:05,839 --> 00:11:10,079
and when you return to the kernel

182
00:11:10,079 --> 00:11:14,959
the kernel code reuse the object

183
00:11:14,959 --> 00:11:18,800
it could it could

184
00:11:18,800 --> 00:11:23,599
make many security

185
00:11:26,839 --> 00:11:29,839
issues

186
00:11:32,000 --> 00:11:36,079
through the user mode call back

187
00:11:36,079 --> 00:11:39,360
vulnerabilities it's not

188
00:11:39,360 --> 00:11:43,200
is has has

189
00:11:43,200 --> 00:11:46,240
been discussed many years

190
00:11:46,240 --> 00:11:49,920
but few people ever noticed

191
00:11:49,920 --> 00:11:54,079
that the umpd callback assumptions

192
00:11:54,079 --> 00:11:57,760
as shown in the left the unpd dre

193
00:11:57,760 --> 00:12:01,600
prefix functions let's look

194
00:12:01,600 --> 00:12:04,480
how the umpd driver functions triggered

195
00:12:04,480 --> 00:12:07,440
a user mode callback

196
00:12:07,440 --> 00:12:11,279
all the umpd dirv functions in vc2k

197
00:12:11,279 --> 00:12:14,959
we are called the umpd opt up

198
00:12:14,959 --> 00:12:18,399
and the umpd object stock called

199
00:12:18,399 --> 00:12:22,079
ppp user callback finance

200
00:12:22,079 --> 00:12:25,200
the ppp user mod callback function

201
00:12:25,200 --> 00:12:28,880
returned to the client print stack

202
00:12:28,880 --> 00:12:31,839
in user space

203
00:12:34,399 --> 00:12:38,079
the code of umpd of json function

204
00:12:38,079 --> 00:12:42,800
pass the parameters directly to client

205
00:12:42,800 --> 00:12:46,000
printer start function but if command

206
00:12:46,000 --> 00:12:50,639
process is a 32-bit

207
00:12:50,839 --> 00:12:52,240
process

208
00:12:52,240 --> 00:12:56,079
ump the the ump of estack

209
00:12:56,079 --> 00:12:59,519
will send a local procedural message

210
00:12:59,519 --> 00:13:02,800
to a proxy port created by the printer

211
00:13:02,800 --> 00:13:03,440
driver

212
00:13:03,440 --> 00:13:07,680
host the print drive host process

213
00:13:07,680 --> 00:13:13,040
the splw64

214
00:13:13,440 --> 00:13:16,639
this process is the print is the print

215
00:13:16,639 --> 00:13:18,240
driver host

216
00:13:18,240 --> 00:13:22,079
it is created for the 32-bit

217
00:13:22,079 --> 00:13:27,120
process using the print driver

218
00:13:27,200 --> 00:13:30,240
the communication between

219
00:13:30,240 --> 00:13:33,440
print client and the print driver host

220
00:13:33,440 --> 00:13:39,440
could also make a big attack service too

221
00:13:39,440 --> 00:13:44,880
it is another story about mercer sandbox

222
00:13:46,839 --> 00:13:48,560
escape

223
00:13:48,560 --> 00:13:52,240
let's come back about the umpd callback

224
00:13:52,240 --> 00:13:55,920
and you see in this page the call stack

225
00:13:55,920 --> 00:13:59,040
a the typical user mode printer driver

226
00:13:59,040 --> 00:14:00,560
callbacks

227
00:14:00,560 --> 00:14:03,680
callback expect callback caustic

228
00:14:03,680 --> 00:14:06,319
like this

229
00:14:07,839 --> 00:14:11,399
it is difficult for others to notice

230
00:14:11,399 --> 00:14:15,040
misspelling flaws why

231
00:14:15,040 --> 00:14:18,800
i think sweet sweet three ingredients

232
00:14:18,800 --> 00:14:22,639
first the umpd div functions

233
00:14:22,639 --> 00:14:25,519
are not referenced directly in the

234
00:14:25,519 --> 00:14:26,320
current mode

235
00:14:26,320 --> 00:14:29,519
in the kernel's code so

236
00:14:29,519 --> 00:14:33,040
it is not easy to find in it

237
00:14:33,040 --> 00:14:36,560
the second reason the umpd

238
00:14:36,560 --> 00:14:40,160
driver functions not use xxx

239
00:14:40,160 --> 00:14:43,360
or ddg as as the name

240
00:14:43,360 --> 00:14:48,240
and the prefix and function then

241
00:14:50,000 --> 00:14:54,399
the provisions the previous the previous

242
00:14:54,399 --> 00:14:58,079
researchers told us the xxx functions

243
00:14:58,079 --> 00:15:01,199
will trigger use mode callback

244
00:15:01,199 --> 00:15:05,199
maybe we just not consider

245
00:15:05,199 --> 00:15:08,240
the other situations could

246
00:15:08,240 --> 00:15:13,839
also trigger user mode callback

247
00:15:13,920 --> 00:15:17,440
the third reason the third reason

248
00:15:17,440 --> 00:15:21,279
we need to meet certain conditions

249
00:15:21,279 --> 00:15:24,560
for triggering the umpd driver functions

250
00:15:24,560 --> 00:15:28,240
if this slave is not a umpd state

251
00:15:28,240 --> 00:15:31,440
or if our code

252
00:15:31,759 --> 00:15:36,320
haven't implement the specific

253
00:15:36,320 --> 00:15:39,440
variable interface function the graphic

254
00:15:39,440 --> 00:15:41,120
kernel will not

255
00:15:41,120 --> 00:15:45,440
execute the umpd drive function

256
00:15:46,639 --> 00:15:51,920
so how to trigger a umpd callback

257
00:15:51,920 --> 00:15:54,880
shall we shall we implement a print

258
00:15:54,880 --> 00:15:55,519
driver

259
00:15:55,519 --> 00:15:58,560
myself for ourselves and if we just

260
00:15:58,560 --> 00:16:02,399
eat in system no

261
00:16:02,399 --> 00:16:06,320
we could just use the virtual printer

262
00:16:06,320 --> 00:16:09,680
created by the system such as

263
00:16:09,680 --> 00:16:14,639
fax xps document writer

264
00:16:14,639 --> 00:16:17,600
and onenote

265
00:16:19,440 --> 00:16:22,480
case body in this part

266
00:16:22,480 --> 00:16:27,519
i will discuss two parts found by myself

267
00:16:30,720 --> 00:16:37,839
the cve202087

268
00:16:38,399 --> 00:16:42,000
in fact microsoft merged nine cases

269
00:16:42,000 --> 00:16:46,880
i reported i reported last year

270
00:16:46,880 --> 00:16:50,560
one of them is the gi

271
00:16:50,560 --> 00:16:53,759
exp text out the

272
00:16:53,759 --> 00:16:58,560
locked function user3

273
00:16:58,959 --> 00:17:02,319
the root cause shows

274
00:17:02,480 --> 00:17:05,919
here the specific floor axis

275
00:17:05,919 --> 00:17:09,439
within the gre exp takes out.locked

276
00:17:09,439 --> 00:17:10,959
function

277
00:17:10,959 --> 00:17:15,119
the issue results from the lack of

278
00:17:15,119 --> 00:17:18,480
check from the surface object in printer

279
00:17:18,480 --> 00:17:20,319
device context

280
00:17:20,319 --> 00:17:23,919
when the gi ext takes out that locked

281
00:17:23,919 --> 00:17:27,439
function called the unpdiv text out

282
00:17:27,439 --> 00:17:28,400
function

283
00:17:28,400 --> 00:17:33,600
as you know triggered a umpd callback

284
00:17:33,600 --> 00:17:36,720
it will trigger a umpd callback to the

285
00:17:36,720 --> 00:17:40,640
drb text out function in the user mode

286
00:17:40,640 --> 00:17:43,039
printed barrier

287
00:17:43,039 --> 00:17:46,240
and if and we can destroy

288
00:17:46,240 --> 00:17:49,520
the surface object in user space

289
00:17:49,520 --> 00:17:53,440
so we can so we call a usb3

290
00:17:53,440 --> 00:17:57,280
when returned to a kernel code

291
00:17:58,840 --> 00:18:01,360
first we create

292
00:18:01,360 --> 00:18:05,200
a printer device context after that

293
00:18:05,200 --> 00:18:08,720
start dot therefore the printer

294
00:18:08,720 --> 00:18:12,840
device context creates its

295
00:18:12,840 --> 00:18:15,360
surface

296
00:18:15,360 --> 00:18:18,320
then the text out function will trigger

297
00:18:18,320 --> 00:18:20,799
a unpd callback

298
00:18:20,799 --> 00:18:24,960
to drb text out

299
00:18:25,039 --> 00:18:28,720
now we just need hook the army takes out

300
00:18:28,720 --> 00:18:29,520
function

301
00:18:29,520 --> 00:18:33,520
in nxt w driver

302
00:18:33,840 --> 00:18:37,440
when we call undertalk function

303
00:18:37,440 --> 00:18:41,679
in our in our redefined

304
00:18:41,679 --> 00:18:46,080
dre text out function the surface

305
00:18:46,080 --> 00:18:49,200
selected with device context

306
00:18:49,200 --> 00:18:52,240
will be destroyed

307
00:18:53,919 --> 00:18:57,470
now and now the esi register

308
00:18:57,470 --> 00:18:58,720
[Music]

309
00:18:58,720 --> 00:19:02,160
point to a free poor

310
00:19:02,160 --> 00:19:05,280
memory the crash stack

311
00:19:05,280 --> 00:19:11,360
shows up here

312
00:19:11,360 --> 00:19:14,799
let's look at another case a little

313
00:19:14,799 --> 00:19:18,480
more complicated in this case

314
00:19:18,480 --> 00:19:21,679
we should modify the data

315
00:19:21,679 --> 00:19:26,720
returned by the ordinary umpt functions

316
00:19:26,720 --> 00:19:30,000
first we initialized a useable printer

317
00:19:30,000 --> 00:19:32,799
driver instance

318
00:19:32,799 --> 00:19:36,400
and we start the dock to create

319
00:19:36,400 --> 00:19:41,039
a surface with with device content

320
00:19:42,240 --> 00:19:45,360
then the next we call np

321
00:19:45,360 --> 00:19:49,919
gdi doing ntgdi2 binding function

322
00:19:49,919 --> 00:19:54,400
in a kernel code the gre 2 binding

323
00:19:54,400 --> 00:19:55,120
function

324
00:19:55,120 --> 00:19:58,559
will check the return value and the

325
00:19:58,559 --> 00:20:02,640
point x and the point f structure

326
00:20:02,640 --> 00:20:06,240
so we should modify the x field

327
00:20:06,240 --> 00:20:09,840
of point a structure

328
00:20:09,840 --> 00:20:13,840
and the return true in our hooked

329
00:20:13,840 --> 00:20:17,600
direct band function

330
00:20:19,120 --> 00:20:22,240
if we end up

331
00:20:22,240 --> 00:20:27,120
in in our driv next band function

332
00:20:27,120 --> 00:20:30,880
the surface object associated

333
00:20:30,880 --> 00:20:34,000
with the printed device context

334
00:20:34,000 --> 00:20:36,880
should be free

335
00:20:37,039 --> 00:20:41,520
it will lead to a user free

336
00:20:45,919 --> 00:20:49,200
conclusion i think

337
00:20:49,200 --> 00:20:52,720
i can share my takeaways from

338
00:20:52,720 --> 00:20:55,360
the research

339
00:20:55,760 --> 00:21:00,400
i think the people may not

340
00:21:00,400 --> 00:21:04,080
really understand what they used

341
00:21:04,080 --> 00:21:10,080
every day such as the print driver

342
00:21:11,120 --> 00:21:14,960
second maybe

343
00:21:14,960 --> 00:21:18,000
in some ancient components in

344
00:21:18,000 --> 00:21:21,280
modern system you could

345
00:21:21,280 --> 00:21:24,559
discovery some normal and unique

346
00:21:24,559 --> 00:21:27,520
vulnerabilities

347
00:21:28,159 --> 00:21:31,600
as you see we can find a new

348
00:21:31,600 --> 00:21:34,799
attack surface in

349
00:21:34,799 --> 00:21:38,000
some old code

350
00:21:39,679 --> 00:21:43,760
at last at least again this umpd

351
00:21:43,760 --> 00:21:46,430
callback is not over yet

352
00:21:46,430 --> 00:21:49,039
[Music]

353
00:21:49,039 --> 00:21:52,720
for example this call stack

354
00:21:52,720 --> 00:21:56,080
shows an out of bound

355
00:21:56,080 --> 00:21:59,600
memory write in color

356
00:21:59,600 --> 00:22:02,640
after we have modified

357
00:22:02,640 --> 00:22:05,679
a padded object in our

358
00:22:05,679 --> 00:22:13,840
redefined unpd driver function

359
00:22:15,600 --> 00:22:18,320
this part is packed already in april

360
00:22:18,320 --> 00:22:19,520
this year

361
00:22:19,520 --> 00:22:22,880
but i'm not sure which cv number is

362
00:22:22,880 --> 00:22:23,760
assigned

363
00:22:23,760 --> 00:22:27,039
for it

364
00:22:27,039 --> 00:22:31,600
the last case it is sphere 0d

365
00:22:31,600 --> 00:22:35,440
it's a non-point reference in min c2k

366
00:22:35,440 --> 00:22:36,640
color

367
00:22:36,640 --> 00:22:40,720
the exclave object is this is destroyed

368
00:22:40,720 --> 00:22:44,720
already in my redefined

369
00:22:44,720 --> 00:22:48,080
umd driver function

370
00:22:48,080 --> 00:22:50,320
yes

371
00:22:53,600 --> 00:22:56,559
when when the umpd callback returned to

372
00:22:56,559 --> 00:22:57,520
the corner

373
00:22:57,520 --> 00:23:02,879
the kernel reused the xclip object

374
00:23:03,840 --> 00:23:07,679
but in the latest windows 10

375
00:23:07,679 --> 00:23:11,520
the vc2k via zero the

376
00:23:11,520 --> 00:23:14,640
reserve and the free the memory

377
00:23:14,640 --> 00:23:18,880
from the gdi object when a ddr object

378
00:23:18,880 --> 00:23:22,320
is destroyed the memory the freedom

379
00:23:22,320 --> 00:23:23,440
memory

380
00:23:23,440 --> 00:23:26,400
will be zero

381
00:23:28,000 --> 00:23:32,480
so it's just a non-pointed reference

382
00:23:32,480 --> 00:23:36,799
now thank you everybody

383
00:23:36,799 --> 00:23:41,120
thank you for your attention

