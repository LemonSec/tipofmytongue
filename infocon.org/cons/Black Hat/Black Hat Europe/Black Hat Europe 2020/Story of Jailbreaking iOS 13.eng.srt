1
00:00:01,180 --> 00:00:13,759
[Music]

2
00:00:13,759 --> 00:00:15,440
hello everyone hope you all had a happy

3
00:00:15,440 --> 00:00:16,560
halloween this year

4
00:00:16,560 --> 00:00:18,320
today i'm going to introduce my journey

5
00:00:18,320 --> 00:00:20,240
as a security risker and this gotta be

6
00:00:20,240 --> 00:00:21,760
my lowest poverty cover so

7
00:00:21,760 --> 00:00:23,680
for the better quality i wrote down

8
00:00:23,680 --> 00:00:25,519
entire script and use google synthesizer

9
00:00:25,519 --> 00:00:27,439
voice to conduct the speech

10
00:00:27,439 --> 00:00:31,840
alright here we go

11
00:00:31,840 --> 00:00:34,079
i'm a jailbreak enthusiast since i was a

12
00:00:34,079 --> 00:00:36,399
kid the night i was waiting for evasion

13
00:00:36,399 --> 00:00:38,800
developers release ios 6 jailbreak was

14
00:00:38,800 --> 00:00:40,079
unforgettable

15
00:00:40,079 --> 00:00:42,160
that's when i was a middle school kid

16
00:00:42,160 --> 00:00:44,079
i've got no other words to describe

17
00:00:44,079 --> 00:00:47,520
it it was just absolutely amazing

18
00:00:47,520 --> 00:00:50,000
their talker 2013 hack in the box reveal

19
00:00:50,000 --> 00:00:52,480
the secrets behind the jailbreaking

20
00:00:52,480 --> 00:00:54,399
the topic was fascinating and the amount

21
00:00:54,399 --> 00:00:55,760
of work that has been done is

22
00:00:55,760 --> 00:00:57,199
unbelievable

23
00:00:57,199 --> 00:00:59,520
however i couldn't really comprehend all

24
00:00:59,520 --> 00:01:01,440
that things mentioned in the slide

25
00:01:01,440 --> 00:01:03,440
as well as many other things described

26
00:01:03,440 --> 00:01:06,080
in the famous ios hackers handbook

27
00:01:06,080 --> 00:01:08,080
it's some sort of black magic nobody

28
00:01:08,080 --> 00:01:09,119
understands

29
00:01:09,119 --> 00:01:12,880
and that is what intrigues me a lot

30
00:01:12,880 --> 00:01:15,119
talking about my background i'm from

31
00:01:15,119 --> 00:01:17,600
china in my tiny little city

32
00:01:17,600 --> 00:01:20,159
and people around me back then it's

33
00:01:20,159 --> 00:01:22,000
extremely rare to see someone who has

34
00:01:22,000 --> 00:01:23,600
good understanding at computer and

35
00:01:23,600 --> 00:01:24,720
english

36
00:01:24,720 --> 00:01:26,400
and there were controversies all over

37
00:01:26,400 --> 00:01:27,840
the country about whether the new

38
00:01:27,840 --> 00:01:29,680
generation should be allowed to access

39
00:01:29,680 --> 00:01:30,960
the internet

40
00:01:30,960 --> 00:01:33,280
i was merely a teenage back then or even

41
00:01:33,280 --> 00:01:34,000
younger

42
00:01:34,000 --> 00:01:36,000
the society doesn't take our words for

43
00:01:36,000 --> 00:01:38,320
real i really believe many of you out

44
00:01:38,320 --> 00:01:41,680
there can relate to what i'm saying

45
00:01:41,680 --> 00:01:43,439
so the computer device was almost

46
00:01:43,439 --> 00:01:45,840
considered as a new type of drug

47
00:01:45,840 --> 00:01:47,439
and parents would send their kids to

48
00:01:47,439 --> 00:01:49,040
boarding school to keep them away from

49
00:01:49,040 --> 00:01:50,399
the internet

50
00:01:50,399 --> 00:01:52,000
and the school apparently cannot

51
00:01:52,000 --> 00:01:53,439
possibly teach what they do not

52
00:01:53,439 --> 00:01:54,000
understand

53
00:01:54,000 --> 00:01:57,040
and believe i went to boarding school

54
00:01:57,040 --> 00:01:58,799
from the first grade all the way until

55
00:01:58,799 --> 00:02:00,880
the end of my school life

56
00:02:00,880 --> 00:02:03,200
towards the end of the primary school i

57
00:02:03,200 --> 00:02:05,360
began to question the meaning of school

58
00:02:05,360 --> 00:02:07,439
cause for so many years i had been doing

59
00:02:07,439 --> 00:02:09,440
everything everybody told me and it just

60
00:02:09,440 --> 00:02:11,038
doesn't feel right

61
00:02:11,038 --> 00:02:12,800
i get blamed and punished when i want to

62
00:02:12,800 --> 00:02:14,319
spend more time with myself

63
00:02:14,319 --> 00:02:16,319
study my interest so it took me several

64
00:02:16,319 --> 00:02:18,319
years persuading my parents to let me

65
00:02:18,319 --> 00:02:19,200
out

66
00:02:19,200 --> 00:02:20,800
and that was the toughest thing i ever

67
00:02:20,800 --> 00:02:22,400
done in my life

68
00:02:22,400 --> 00:02:24,400
i was literally fighting for my own time

69
00:02:24,400 --> 00:02:25,920
and freedom to learn what i want to

70
00:02:25,920 --> 00:02:27,040
learn

71
00:02:27,040 --> 00:02:29,599
however don't take me wrong though i'm

72
00:02:29,599 --> 00:02:31,680
not saying school is useless

73
00:02:31,680 --> 00:02:33,680
my experience with school has taught me

74
00:02:33,680 --> 00:02:35,519
some important life lessons that i will

75
00:02:35,519 --> 00:02:36,959
never forget

76
00:02:36,959 --> 00:02:38,560
they are quite simple but it's

77
00:02:38,560 --> 00:02:40,400
impossible to truly understand them if

78
00:02:40,400 --> 00:02:41,760
you haven't been in that kind of

79
00:02:41,760 --> 00:02:43,680
situations before

80
00:02:43,680 --> 00:02:45,760
i appreciate my time and freedom more

81
00:02:45,760 --> 00:02:48,879
than ever after dropout

82
00:02:48,879 --> 00:02:51,200
i was so excited when first time i had a

83
00:02:51,200 --> 00:02:53,200
chance to come to america by myself

84
00:02:53,200 --> 00:02:55,040
attending a conference

85
00:02:55,040 --> 00:02:58,319
the 2015 jailbreak con in san francisco

86
00:02:58,319 --> 00:03:00,480
i was the youngest attendee there and

87
00:03:00,480 --> 00:03:02,400
the person who drives me there

88
00:03:02,400 --> 00:03:04,239
he is the first american one ever met

89
00:03:04,239 --> 00:03:06,080
whose name is alfred

90
00:03:06,080 --> 00:03:07,920
he was so worried about me since i

91
00:03:07,920 --> 00:03:10,319
barely understand any english

92
00:03:10,319 --> 00:03:12,159
so he found a female staff who is

93
00:03:12,159 --> 00:03:14,800
working on-site and asked for some help

94
00:03:14,800 --> 00:03:17,280
i believe her name was britta so britta

95
00:03:17,280 --> 00:03:18,000
introduced me

96
00:03:18,000 --> 00:03:19,840
to another attendee who was the only

97
00:03:19,840 --> 00:03:22,640
person beside me speaking chinese

98
00:03:22,640 --> 00:03:25,040
his name was larry and later he becomes

99
00:03:25,040 --> 00:03:26,640
a very good friend to me

100
00:03:26,640 --> 00:03:29,440
so is alfred it was so exciting to see

101
00:03:29,440 --> 00:03:32,319
the man behind the mysterious absidia

102
00:03:32,319 --> 00:03:34,959
and along with many other jailbreakers i

103
00:03:34,959 --> 00:03:36,879
appreciate they uploaded the video on

104
00:03:36,879 --> 00:03:37,760
youtube

105
00:03:37,760 --> 00:03:40,159
it's so reminiscent of the past many

106
00:03:40,159 --> 00:03:41,680
people have brought me interest in

107
00:03:41,680 --> 00:03:43,040
learning jailbreak

108
00:03:43,040 --> 00:03:46,000
and i am deeply grateful for that after

109
00:03:46,000 --> 00:03:46,480
that

110
00:03:46,480 --> 00:03:48,640
i traveled back and forth multiple times

111
00:03:48,640 --> 00:03:50,400
to america by myself

112
00:03:50,400 --> 00:03:52,400
didn't do much fun things but visiting

113
00:03:52,400 --> 00:03:54,159
libraries and make a space

114
00:03:54,159 --> 00:03:55,920
that is something i really love about

115
00:03:55,920 --> 00:03:58,480
america whether is public library or

116
00:03:58,480 --> 00:04:00,560
university or college library

117
00:04:00,560 --> 00:04:02,480
everyone has free access and it's not

118
00:04:02,480 --> 00:04:03,680
crowded at all

119
00:04:03,680 --> 00:04:05,360
and then makerspace is usually a

120
00:04:05,360 --> 00:04:06,799
non-profit business

121
00:04:06,799 --> 00:04:08,640
where people share tools in a rented

122
00:04:08,640 --> 00:04:10,879
place it gives you really positive

123
00:04:10,879 --> 00:04:12,319
feeling about learning

124
00:04:12,319 --> 00:04:13,920
and focusing on something you're

125
00:04:13,920 --> 00:04:16,079
interested i really think they are gifts

126
00:04:16,079 --> 00:04:18,478
for people who living in america

127
00:04:18,478 --> 00:04:21,358
so please don't take them for granted

128
00:04:21,358 --> 00:04:22,079
all right

129
00:04:22,079 --> 00:04:24,240
now let's get to the technical topic

130
00:04:24,240 --> 00:04:26,320
i'll share the detail of how i jailbreak

131
00:04:26,320 --> 00:04:28,320
since ios 12.

132
00:04:28,320 --> 00:04:31,840
here is the outline of the talk

133
00:04:34,560 --> 00:04:37,440
we will first review what is ios sandbox

134
00:04:37,440 --> 00:04:39,199
and evaluate its weaknesses

135
00:04:39,199 --> 00:04:41,120
what benefits can an attacker get out of

136
00:04:41,120 --> 00:04:43,440
it and i made a couple of diagrams to

137
00:04:43,440 --> 00:04:45,280
visualize the strength or intensity of

138
00:04:45,280 --> 00:04:47,680
the current ios sandbox

139
00:04:47,680 --> 00:04:49,440
and then compare it to the past few

140
00:04:49,440 --> 00:04:51,840
years summarize the improvement apple

141
00:04:51,840 --> 00:04:54,400
has been made

142
00:04:54,400 --> 00:04:56,639
so sandbox is a general term rather than

143
00:04:56,639 --> 00:04:59,280
a specific security mechanism

144
00:04:59,280 --> 00:05:01,520
and almost all modern operating systems

145
00:05:01,520 --> 00:05:04,320
now have some kind of sandbox design

146
00:05:04,320 --> 00:05:07,440
ios or ipad os as a system mainly

147
00:05:07,440 --> 00:05:09,280
running on the mobile device

148
00:05:09,280 --> 00:05:10,880
is in favor of very stringent

149
00:05:10,880 --> 00:05:12,720
restrictions

150
00:05:12,720 --> 00:05:14,479
sandboxing gives a higher level of

151
00:05:14,479 --> 00:05:17,199
access control for a different process

152
00:05:17,199 --> 00:05:19,600
it's similar to the privacy panel in ios

153
00:05:19,600 --> 00:05:22,160
settings but way more powerful than that

154
00:05:22,160 --> 00:05:24,240
and it lets apple neutralize many kinds

155
00:05:24,240 --> 00:05:26,000
of vulnerabilities in a very short

156
00:05:26,000 --> 00:05:27,600
period of time

157
00:05:27,600 --> 00:05:30,720
with almost no overhead added

158
00:05:30,720 --> 00:05:32,720
it's definitely one of the revolutionary

159
00:05:32,720 --> 00:05:34,479
designs in the evolution of computer

160
00:05:34,479 --> 00:05:37,039
security

161
00:05:37,039 --> 00:05:39,759
ios has its own sandbox design the

162
00:05:39,759 --> 00:05:41,840
restrictions placed on a process depend

163
00:05:41,840 --> 00:05:43,280
on four conditions

164
00:05:43,280 --> 00:05:45,520
by default we cannot alter any of the

165
00:05:45,520 --> 00:05:47,919
listed four conditions on a regular ios

166
00:05:47,919 --> 00:05:49,120
device

167
00:05:49,120 --> 00:05:50,800
but it's good to know them as later we

168
00:05:50,800 --> 00:05:52,960
will talk about escalation

169
00:05:52,960 --> 00:05:54,479
i'm gonna go through each of them

170
00:05:54,479 --> 00:05:57,120
quickly so the first one

171
00:05:57,120 --> 00:05:59,840
all files on ios must have a code

172
00:05:59,840 --> 00:06:01,199
signature to run

173
00:06:01,199 --> 00:06:03,520
there is no exception trust cache is a

174
00:06:03,520 --> 00:06:05,600
list of hash stored in the ios kernel

175
00:06:05,600 --> 00:06:06,880
binary

176
00:06:06,880 --> 00:06:09,280
so it's static all the system files have

177
00:06:09,280 --> 00:06:10,639
been signed this way

178
00:06:10,639 --> 00:06:12,560
and the different versions of the ios

179
00:06:12,560 --> 00:06:14,319
shipped it differently

180
00:06:14,319 --> 00:06:16,400
so you can not swap execution files

181
00:06:16,400 --> 00:06:18,400
across different versions of ios because

182
00:06:18,400 --> 00:06:21,840
they wouldn't be able to run

183
00:06:21,919 --> 00:06:25,199
but on mac os they can so the attacker

184
00:06:25,199 --> 00:06:27,120
can just copy and paste an old apple

185
00:06:27,120 --> 00:06:28,960
signed file with the vulnerability that

186
00:06:28,960 --> 00:06:30,720
allowing the attacker to take over the

187
00:06:30,720 --> 00:06:32,080
execution

188
00:06:32,080 --> 00:06:33,919
then all of a sudden malicious

189
00:06:33,919 --> 00:06:35,840
activities can be disguised in an apple

190
00:06:35,840 --> 00:06:36,240
sign

191
00:06:36,240 --> 00:06:39,280
process which usually displayed as green

192
00:06:39,280 --> 00:06:41,039
meaning trusted in the antivirus

193
00:06:41,039 --> 00:06:42,639
software

194
00:06:42,639 --> 00:06:44,639
one of the anti-virus software i have

195
00:06:44,639 --> 00:06:46,479
used that report some very useful

196
00:06:46,479 --> 00:06:48,240
information was developed by an apple

197
00:06:48,240 --> 00:06:50,080
hacker patrick wardle

198
00:06:50,080 --> 00:06:52,319
it scans and verifies all process code

199
00:06:52,319 --> 00:06:53,199
signature

200
00:06:53,199 --> 00:06:55,599
which is a very effective method since

201
00:06:55,599 --> 00:06:57,280
code signature is fundamentally

202
00:06:57,280 --> 00:06:59,759
protected by cryptographic algorithms

203
00:06:59,759 --> 00:07:01,919
bad guys are extremely unlikely to be

204
00:07:01,919 --> 00:07:03,440
able to crack it

205
00:07:03,440 --> 00:07:05,440
this app displays app store apps as the

206
00:07:05,440 --> 00:07:06,800
black secured lock

207
00:07:06,800 --> 00:07:08,400
and the trick i mentioned earlier could

208
00:07:08,400 --> 00:07:10,240
give us the green lock like other system

209
00:07:10,240 --> 00:07:11,599
processors

210
00:07:11,599 --> 00:07:12,960
the attacker could blend into the

211
00:07:12,960 --> 00:07:14,639
surroundings perfectly to survive

212
00:07:14,639 --> 00:07:17,599
security inspection

213
00:07:17,599 --> 00:07:19,680
then signed by apple basically means all

214
00:07:19,680 --> 00:07:21,039
the app store apps

215
00:07:21,039 --> 00:07:23,039
although you cannot directly interfere

216
00:07:23,039 --> 00:07:24,560
with the signing process

217
00:07:24,560 --> 00:07:26,639
it still remains exploitable as someone

218
00:07:26,639 --> 00:07:28,240
could leave a back door in their app and

219
00:07:28,240 --> 00:07:30,160
later execute malicious code through the

220
00:07:30,160 --> 00:07:31,199
app

221
00:07:31,199 --> 00:07:33,280
charlie miller one of the authors of the

222
00:07:33,280 --> 00:07:35,039
ios hackers handbook

223
00:07:35,039 --> 00:07:38,319
did it back in 2011. despite that the

224
00:07:38,319 --> 00:07:40,479
ios doesn't allow you to run unsigned

225
00:07:40,479 --> 00:07:41,599
code

226
00:07:41,599 --> 00:07:44,479
whether it's files or memory so far

227
00:07:44,479 --> 00:07:46,319
arbitrary code execution still

228
00:07:46,319 --> 00:07:48,560
achievable through complicated rop or

229
00:07:48,560 --> 00:07:50,160
job programming

230
00:07:50,160 --> 00:07:52,319
the pointer authentication technology

231
00:07:52,319 --> 00:07:53,919
didn't stop it completely

232
00:07:53,919 --> 00:07:56,080
it just made it harder the last

233
00:07:56,080 --> 00:07:57,120
situation

234
00:07:57,120 --> 00:07:59,759
signed by third-party developers is only

235
00:07:59,759 --> 00:08:01,599
allowed to possess certain entitlements

236
00:08:01,599 --> 00:08:04,960
that won't break the sandbox

237
00:08:05,280 --> 00:08:07,759
the next one is the path of execution

238
00:08:07,759 --> 00:08:10,080
all third-party applications on ios

239
00:08:10,080 --> 00:08:11,360
are automatically placed in a

240
00:08:11,360 --> 00:08:13,280
containerized environment because of the

241
00:08:13,280 --> 00:08:15,440
path they have been running on

242
00:08:15,440 --> 00:08:17,520
they have limited access to all kinds of

243
00:08:17,520 --> 00:08:19,759
resources such as files

244
00:08:19,759 --> 00:08:23,039
services kernel apis use functions like

245
00:08:23,039 --> 00:08:24,400
fork or execute

246
00:08:24,400 --> 00:08:26,160
and we refer to this as the default

247
00:08:26,160 --> 00:08:27,840
application sandbox

248
00:08:27,840 --> 00:08:29,440
this is the thing we want to break out

249
00:08:29,440 --> 00:08:30,879
of it

250
00:08:30,879 --> 00:08:33,120
everyone is familiar with this one the

251
00:08:33,120 --> 00:08:34,799
unix user id

252
00:08:34,799 --> 00:08:36,958
cause ios as well as mac os is a

253
00:08:36,958 --> 00:08:38,719
unix-like system

254
00:08:38,719 --> 00:08:40,799
but something interesting is that ios

255
00:08:40,799 --> 00:08:42,880
has so many other privilege separation

256
00:08:42,880 --> 00:08:44,159
designs

257
00:08:44,159 --> 00:08:46,160
obtaining the top privilege that usually

258
00:08:46,160 --> 00:08:48,720
is the root on ios doesn't really mean

259
00:08:48,720 --> 00:08:50,399
you can do all kinds of things since

260
00:08:50,399 --> 00:08:52,399
there are other restrictions

261
00:08:52,399 --> 00:08:54,080
so it's the least useful one you are

262
00:08:54,080 --> 00:08:56,160
looking for

263
00:08:56,160 --> 00:08:57,920
all right the last one is the

264
00:08:57,920 --> 00:09:00,240
entitlements and the seatbelt profiles

265
00:09:00,240 --> 00:09:02,000
this is the real deal when it comes to

266
00:09:02,000 --> 00:09:03,360
sandbox escape

267
00:09:03,360 --> 00:09:05,440
they represent the actual access rights

268
00:09:05,440 --> 00:09:07,279
and are capable of restraining all kinds

269
00:09:07,279 --> 00:09:08,880
of activities

270
00:09:08,880 --> 00:09:10,640
further refined down to the level of

271
00:09:10,640 --> 00:09:13,519
each individual process

272
00:09:13,519 --> 00:09:15,600
all processes except a few at least have

273
00:09:15,600 --> 00:09:16,959
some entitlements

274
00:09:16,959 --> 00:09:19,839
whereas for the seat belt profiles only

275
00:09:19,839 --> 00:09:21,760
a small portion is using it

276
00:09:21,760 --> 00:09:23,279
and they are often the critical ones

277
00:09:23,279 --> 00:09:25,440
that are directly accessible from safari

278
00:09:25,440 --> 00:09:27,200
or app sandbox

279
00:09:27,200 --> 00:09:28,800
this happens because they are actually

280
00:09:28,800 --> 00:09:30,560
two different things for the

281
00:09:30,560 --> 00:09:31,519
entitlements

282
00:09:31,519 --> 00:09:34,320
as its name a lot of time they were used

283
00:09:34,320 --> 00:09:36,560
for giving rights to access something

284
00:09:36,560 --> 00:09:38,800
without the appropriate entitlements you

285
00:09:38,800 --> 00:09:40,480
can still establish connections to

286
00:09:40,480 --> 00:09:42,399
service or kernel apis

287
00:09:42,399 --> 00:09:44,640
but at the end of the day the connection

288
00:09:44,640 --> 00:09:45,920
will be rejected

289
00:09:45,920 --> 00:09:47,839
how far you can go before that happens

290
00:09:47,839 --> 00:09:49,600
is going to depend on when they decide

291
00:09:49,600 --> 00:09:51,600
to check your entitlements

292
00:09:51,600 --> 00:09:53,440
this is the essential difference between

293
00:09:53,440 --> 00:09:55,279
entitlements and seat belt profiles

294
00:09:55,279 --> 00:09:57,040
cause seat belt profiles are born to

295
00:09:57,040 --> 00:10:00,560
prevent the connection from happening

296
00:10:00,959 --> 00:10:03,600
now let's mention colonel a little bit

297
00:10:03,600 --> 00:10:04,240
kernel

298
00:10:04,240 --> 00:10:06,640
as its name is the core of the operating

299
00:10:06,640 --> 00:10:07,519
system

300
00:10:07,519 --> 00:10:09,279
although it sounds like it has a lot of

301
00:10:09,279 --> 00:10:10,959
power and indeed

302
00:10:10,959 --> 00:10:13,920
it does nowadays the kernel is kind of

303
00:10:13,920 --> 00:10:15,440
fallen off its throne

304
00:10:15,440 --> 00:10:17,200
separate chip and hardware protection

305
00:10:17,200 --> 00:10:18,720
attracts more eyes and the next

306
00:10:18,720 --> 00:10:20,480
promising hardware protection is the

307
00:10:20,480 --> 00:10:22,560
memory tagging extension

308
00:10:22,560 --> 00:10:24,959
i am all excited to see it the term

309
00:10:24,959 --> 00:10:27,600
attack ios kernel has a wide meaning

310
00:10:27,600 --> 00:10:29,279
but i only refer to obtain the

311
00:10:29,279 --> 00:10:30,959
capability of reading and writing

312
00:10:30,959 --> 00:10:33,519
virtual memory in kernel space

313
00:10:33,519 --> 00:10:35,120
certainly that is not the end of the

314
00:10:35,120 --> 00:10:36,880
hacking after that

315
00:10:36,880 --> 00:10:38,800
you still have pointer authentication

316
00:10:38,800 --> 00:10:41,200
and page protection layer to bypass

317
00:10:41,200 --> 00:10:42,880
and these are backed up by the hardware

318
00:10:42,880 --> 00:10:44,399
protection

319
00:10:44,399 --> 00:10:46,640
if you want to learn more about them you

320
00:10:46,640 --> 00:10:48,560
should study the presentation apple did

321
00:10:48,560 --> 00:10:50,240
in black hat last year

322
00:10:50,240 --> 00:10:52,399
the name is behind the scenes of ios and

323
00:10:52,399 --> 00:10:54,000
mac security

324
00:10:54,000 --> 00:10:56,480
also i had to mention a very impressive

325
00:10:56,480 --> 00:10:59,279
researcher whose name is brandon azard

326
00:10:59,279 --> 00:11:01,279
he published many related works when he

327
00:11:01,279 --> 00:11:04,000
was working at google project zero

328
00:11:04,000 --> 00:11:06,160
all good stuffs even if you don't have

329
00:11:06,160 --> 00:11:08,160
the motivation to hack them now

330
00:11:08,160 --> 00:11:10,000
still worth spending time to read them

331
00:11:10,000 --> 00:11:11,680
because security technologies are

332
00:11:11,680 --> 00:11:13,360
advancing fast

333
00:11:13,360 --> 00:11:15,200
we might start seeing them used in other

334
00:11:15,200 --> 00:11:18,399
devices in the future

335
00:11:18,640 --> 00:11:22,399
back to ios kernel 99 of the time

336
00:11:22,399 --> 00:11:24,079
you have to get to the kernel in order

337
00:11:24,079 --> 00:11:25,760
to disable some of the most prominent

338
00:11:25,760 --> 00:11:27,760
security mechanisms

339
00:11:27,760 --> 00:11:30,000
and one of them is code signing it

340
00:11:30,000 --> 00:11:32,560
controls the freedom to run any binaries

341
00:11:32,560 --> 00:11:34,160
and this is the least thing you can do

342
00:11:34,160 --> 00:11:35,600
in order to be called a rootless

343
00:11:35,600 --> 00:11:38,160
jailbreak

344
00:11:38,399 --> 00:11:41,839
but why is 99 instead of 100 percent

345
00:11:41,839 --> 00:11:43,760
because there are always special cases

346
00:11:43,760 --> 00:11:45,680
in the past and the present

347
00:11:45,680 --> 00:11:47,920
like the checkra 1n project relies on a

348
00:11:47,920 --> 00:11:49,200
bootrum exploit

349
00:11:49,200 --> 00:11:50,880
it's rare and now with the new

350
00:11:50,880 --> 00:11:53,680
mitigation introduced in ios 14.

351
00:11:53,680 --> 00:11:55,839
even future we develop another bootrum

352
00:11:55,839 --> 00:11:58,399
exploit use it to jailbreak is no longer

353
00:11:58,399 --> 00:12:01,680
an easy task anymore

354
00:12:01,680 --> 00:12:04,240
overlapping segment attack against dyld

355
00:12:04,240 --> 00:12:06,639
to achieve untethered jailbreak

356
00:12:06,639 --> 00:12:09,519
first appearance in ios 6 jailbreak tool

357
00:12:09,519 --> 00:12:11,360
then similar approach shown on every

358
00:12:11,360 --> 00:12:12,880
public jailbreaks

359
00:12:12,880 --> 00:12:15,680
until after pengu9 apple seems finally

360
00:12:15,680 --> 00:12:18,959
eradicated this issue

361
00:12:19,120 --> 00:12:21,200
and we had to mention brandon azad again

362
00:12:21,200 --> 00:12:23,279
because of his impressive work

363
00:12:23,279 --> 00:12:25,120
i'm pretty much amazed when i'm reading

364
00:12:25,120 --> 00:12:27,760
his open source project blanket

365
00:12:27,760 --> 00:12:29,920
he bypassed code signing without first

366
00:12:29,920 --> 00:12:31,680
getting colonel read and write

367
00:12:31,680 --> 00:12:33,519
yet many of the techniques he used are

368
00:12:33,519 --> 00:12:35,760
now patched as the aftermath

369
00:12:35,760 --> 00:12:39,519
so for now i'd say it's extinct

370
00:12:39,519 --> 00:12:41,440
now our only option is to find and

371
00:12:41,440 --> 00:12:43,519
exploit kernel vulnerabilities

372
00:12:43,519 --> 00:12:45,680
this has become the common approach

373
00:12:45,680 --> 00:12:47,200
especially when you're targeting the

374
00:12:47,200 --> 00:12:48,399
latest device

375
00:12:48,399 --> 00:12:50,560
many recent jailbreaks include all my

376
00:12:50,560 --> 00:12:52,480
jailbreaks are in this category

377
00:12:52,480 --> 00:12:54,160
now let's talk about how to get to the

378
00:12:54,160 --> 00:12:56,480
kernel there are two common ways to do

379
00:12:56,480 --> 00:12:58,720
so

380
00:12:59,120 --> 00:13:01,040
i made two diagrams for easier

381
00:13:01,040 --> 00:13:02,160
understanding

382
00:13:02,160 --> 00:13:04,560
both of them are still being seen today

383
00:13:04,560 --> 00:13:06,320
but you probably have seen more of the

384
00:13:06,320 --> 00:13:07,279
first one

385
00:13:07,279 --> 00:13:08,639
which attacking kernel through

386
00:13:08,639 --> 00:13:10,560
interfaces that are directly accessible

387
00:13:10,560 --> 00:13:12,560
from within the sandbox

388
00:13:12,560 --> 00:13:14,560
these interfaces usually have a long

389
00:13:14,560 --> 00:13:16,959
history suggesting that many others may

390
00:13:16,959 --> 00:13:18,720
have studied it in the past

391
00:13:18,720 --> 00:13:20,880
that makes it hard to find your own zero

392
00:13:20,880 --> 00:13:23,120
day but it's not an impossible task

393
00:13:23,120 --> 00:13:23,839
though

394
00:13:23,839 --> 00:13:25,519
since apple keeps adding more new

395
00:13:25,519 --> 00:13:26,959
syscalls every year

396
00:13:26,959 --> 00:13:29,600
and syscalls aren't like iokit apis most

397
00:13:29,600 --> 00:13:30,320
of them

398
00:13:30,320 --> 00:13:32,639
if not all of them don't require the

399
00:13:32,639 --> 00:13:34,880
caller to have certain entitlements

400
00:13:34,880 --> 00:13:36,800
vulnerability of this type are valuable

401
00:13:36,800 --> 00:13:38,639
because often time they can be exploited

402
00:13:38,639 --> 00:13:40,959
from the safari sandbox

403
00:13:40,959 --> 00:13:43,839
combine with webkit rce you can build a

404
00:13:43,839 --> 00:13:45,600
remote attacking chain and attending

405
00:13:45,600 --> 00:13:46,959
hacking events

406
00:13:46,959 --> 00:13:49,279
while the second one it has a lot lesser

407
00:13:49,279 --> 00:13:51,199
value and does not sounds as cool as the

408
00:13:51,199 --> 00:13:52,560
first one

409
00:13:52,560 --> 00:13:54,880
in this case you split one goal into

410
00:13:54,880 --> 00:13:56,240
multiple goals

411
00:13:56,240 --> 00:13:58,320
escalate privilege in new zealand and

412
00:13:58,320 --> 00:14:00,240
attack kernel components that usually

413
00:14:00,240 --> 00:14:02,240
cannot be directly accessed

414
00:14:02,240 --> 00:14:04,480
to be frank all my jailbreaks are in

415
00:14:04,480 --> 00:14:05,440
this scope

416
00:14:05,440 --> 00:14:08,000
soon after i'll explain why i do prefer

417
00:14:08,000 --> 00:14:10,000
finding bugs in this category

418
00:14:10,000 --> 00:14:12,160
now back to the first type the more

419
00:14:12,160 --> 00:14:13,120
valuable one

420
00:14:13,120 --> 00:14:15,040
did i mention that most of the cases you

421
00:14:15,040 --> 00:14:16,639
heard of are probably belong to this

422
00:14:16,639 --> 00:14:17,920
category

423
00:14:17,920 --> 00:14:21,760
that is right here is a list of them

424
00:14:21,760 --> 00:14:23,680
many are used in public jailbreaks and

425
00:14:23,680 --> 00:14:25,519
have been thoroughly analyzed

426
00:14:25,519 --> 00:14:27,760
the write-ups are all public you can

427
00:14:27,760 --> 00:14:29,279
search for them on google

428
00:14:29,279 --> 00:14:31,600
google project xero is really fulfilling

429
00:14:31,600 --> 00:14:32,560
their duty

430
00:14:32,560 --> 00:14:35,040
which is making zero day harder you can

431
00:14:35,040 --> 00:14:36,399
get a long list of high risk

432
00:14:36,399 --> 00:14:38,320
vulnerabilities discovered by google

433
00:14:38,320 --> 00:14:40,399
project xero members

434
00:14:40,399 --> 00:14:42,720
congratulation for them they not only

435
00:14:42,720 --> 00:14:44,000
working hard to discover

436
00:14:44,000 --> 00:14:46,079
new zero days but also very good at

437
00:14:46,079 --> 00:14:48,560
collecting and analyzing samples

438
00:14:48,560 --> 00:14:49,680
they have done a number of

439
00:14:49,680 --> 00:14:51,839
investigations of zero-day exploits

440
00:14:51,839 --> 00:14:54,000
being used in active attacks

441
00:14:54,000 --> 00:14:56,000
and all are published in their blog

442
00:14:56,000 --> 00:14:59,199
which is wonderful frankly speaking

443
00:14:59,199 --> 00:15:01,760
the ios security community has grown so

444
00:15:01,760 --> 00:15:03,519
much compared to seven or eight years

445
00:15:03,519 --> 00:15:04,639
ago

446
00:15:04,639 --> 00:15:06,320
we have got a lot more security

447
00:15:06,320 --> 00:15:09,279
researchers actively studying ios

448
00:15:09,279 --> 00:15:11,600
and every once a while we see a new

449
00:15:11,600 --> 00:15:13,760
research article made public by someone

450
00:15:13,760 --> 00:15:15,360
or some company

451
00:15:15,360 --> 00:15:17,760
just like many other things in life when

452
00:15:17,760 --> 00:15:19,920
you have more players join the game

453
00:15:19,920 --> 00:15:21,920
the competition inevitably will be more

454
00:15:21,920 --> 00:15:24,800
intense than ever

455
00:15:24,880 --> 00:15:26,560
here is a list of different types of

456
00:15:26,560 --> 00:15:28,639
people or entities who may be interested

457
00:15:28,639 --> 00:15:30,160
in such a bug

458
00:15:30,160 --> 00:15:32,320
you see you got other researchers who

459
00:15:32,320 --> 00:15:33,759
are sponsored by the company or

460
00:15:33,759 --> 00:15:35,680
individuals planning to participate in

461
00:15:35,680 --> 00:15:37,199
hacking events

462
00:15:37,199 --> 00:15:39,279
it's getting popular more companies

463
00:15:39,279 --> 00:15:41,920
willing to organize such events nowadays

464
00:15:41,920 --> 00:15:45,040
besides the well-known pwn to own then

465
00:15:45,040 --> 00:15:46,720
there are cyber arms dealers who are

466
00:15:46,720 --> 00:15:48,399
making fully functional offensive

467
00:15:48,399 --> 00:15:49,680
products

468
00:15:49,680 --> 00:15:51,680
private acquisition companies from

469
00:15:51,680 --> 00:15:52,959
europe and israel

470
00:15:52,959 --> 00:15:55,440
well they may sound shady but they are

471
00:15:55,440 --> 00:15:57,839
actually the best case you may encounter

472
00:15:57,839 --> 00:15:59,680
cause they don't do free giveaway that

473
00:15:59,680 --> 00:16:02,399
often after all and down to earth

474
00:16:02,399 --> 00:16:04,240
what does independent researcher care

475
00:16:04,240 --> 00:16:06,720
about the most

476
00:16:06,720 --> 00:16:09,279
it may not just represent ios but also

477
00:16:09,279 --> 00:16:11,360
other bug hunting fields

478
00:16:11,360 --> 00:16:13,519
at the end of the day after you got

479
00:16:13,519 --> 00:16:15,279
yourself some cves

480
00:16:15,279 --> 00:16:17,759
if you decide to go full time these are

481
00:16:17,759 --> 00:16:20,800
what you care about the most

482
00:16:20,800 --> 00:16:23,759
ios does contain many bugs but only a

483
00:16:23,759 --> 00:16:25,600
handful of them are exploitable

484
00:16:25,600 --> 00:16:27,519
the rest of them a researcher might able

485
00:16:27,519 --> 00:16:29,440
to get a cve and credit on apple's

486
00:16:29,440 --> 00:16:30,639
website

487
00:16:30,639 --> 00:16:32,560
but almost certain that apple or other

488
00:16:32,560 --> 00:16:34,560
bug bounty programs will not award the

489
00:16:34,560 --> 00:16:36,320
researcher for them because practically

490
00:16:36,320 --> 00:16:38,160
these bugs are not posing a real threat

491
00:16:38,160 --> 00:16:39,600
to the user

492
00:16:39,600 --> 00:16:41,600
i think many researchers often stuck in

493
00:16:41,600 --> 00:16:43,839
here keep finding more bugs that are

494
00:16:43,839 --> 00:16:45,600
considered not exploitable

495
00:16:45,600 --> 00:16:47,839
speaking from my experience they got

496
00:16:47,839 --> 00:16:49,199
distracted by them

497
00:16:49,199 --> 00:16:51,120
one of my talks goals is to give these

498
00:16:51,120 --> 00:16:52,959
people some inspiration to find their

499
00:16:52,959 --> 00:16:55,680
first exploitable ios bug

500
00:16:55,680 --> 00:16:58,399
soon later i'll evaluate ios attacking

501
00:16:58,399 --> 00:17:01,680
surfaces in terms of exploitability

502
00:17:01,680 --> 00:17:03,600
and i want to explain the terminology

503
00:17:03,600 --> 00:17:04,720
for newcomers

504
00:17:04,720 --> 00:17:07,119
what is bug collision it's simple it

505
00:17:07,119 --> 00:17:08,959
means your bug has been discovered by

506
00:17:08,959 --> 00:17:10,079
someone else

507
00:17:10,079 --> 00:17:12,079
and he decided to report it or publish

508
00:17:12,079 --> 00:17:13,679
it earlier than you

509
00:17:13,679 --> 00:17:15,599
this means much less return for your

510
00:17:15,599 --> 00:17:18,160
research in terms of profit and credit

511
00:17:18,160 --> 00:17:19,839
and that is if the research is still

512
00:17:19,839 --> 00:17:22,079
worth some value

513
00:17:22,079 --> 00:17:24,160
now if you look back at the second type

514
00:17:24,160 --> 00:17:26,559
of the bug it doesn't look that mediocre

515
00:17:26,559 --> 00:17:27,439
anymore

516
00:17:27,439 --> 00:17:29,919
isn't it after all it meets all your

517
00:17:29,919 --> 00:17:30,720
needs

518
00:17:30,720 --> 00:17:32,640
i have personally experienced a bug

519
00:17:32,640 --> 00:17:34,160
collision a few times

520
00:17:34,160 --> 00:17:36,400
but never with bugs in this category

521
00:17:36,400 --> 00:17:38,240
it's almost surprising how long they

522
00:17:38,240 --> 00:17:39,120
lasted

523
00:17:39,120 --> 00:17:41,280
all right and that is why i prefer to

524
00:17:41,280 --> 00:17:42,640
find such bugs

525
00:17:42,640 --> 00:17:45,120
and next i'll be focusing on analyzing

526
00:17:45,120 --> 00:17:47,039
this category

527
00:17:47,039 --> 00:17:49,360
so in this category we are first looking

528
00:17:49,360 --> 00:17:51,919
for useless bugs instead of kernel ones

529
00:17:51,919 --> 00:17:53,600
we need something that provides us the

530
00:17:53,600 --> 00:17:56,000
extra privilege and they must be useful

531
00:17:56,000 --> 00:17:58,799
to open up more kernel attack surface

532
00:17:58,799 --> 00:18:01,200
back to the entitlements thing another

533
00:18:01,200 --> 00:18:03,039
side of the story is that ios

534
00:18:03,039 --> 00:18:06,400
is not perfect in reality it still has a

535
00:18:06,400 --> 00:18:08,160
number of system processors that lack

536
00:18:08,160 --> 00:18:10,720
the necessary restrictions in place

537
00:18:10,720 --> 00:18:14,480
you can even see bad use internally

538
00:18:14,480 --> 00:18:16,240
that is our ticket to get out of the app

539
00:18:16,240 --> 00:18:18,880
sandbox imperfections are opportunities

540
00:18:18,880 --> 00:18:21,919
in the bug hunting world

541
00:18:21,919 --> 00:18:24,000
after sorted things out among the

542
00:18:24,000 --> 00:18:25,440
combination of all the different

543
00:18:25,440 --> 00:18:26,559
entitlements

544
00:18:26,559 --> 00:18:28,400
these four particular ones are standing

545
00:18:28,400 --> 00:18:30,640
out a demon could have all of them or

546
00:18:30,640 --> 00:18:31,600
none of them

547
00:18:31,600 --> 00:18:33,840
we need to build a good filter it is

548
00:18:33,840 --> 00:18:35,280
worth noting that the attacker can

549
00:18:35,280 --> 00:18:37,200
perform limited malicious operations

550
00:18:37,200 --> 00:18:39,440
without compromising the kernel

551
00:18:39,440 --> 00:18:42,880
like such have access to the file system

552
00:18:42,880 --> 00:18:44,559
outside of the sandbox means the

553
00:18:44,559 --> 00:18:46,080
attacker could read data across

554
00:18:46,080 --> 00:18:48,000
different applications

555
00:18:48,000 --> 00:18:50,000
if you can call functions like fork and

556
00:18:50,000 --> 00:18:52,240
execute to run other binaries

557
00:18:52,240 --> 00:18:54,240
that opens up another attack surface in

558
00:18:54,240 --> 00:18:56,240
the userland there are binaries that

559
00:18:56,240 --> 00:18:58,080
allow you to take over them by running

560
00:18:58,080 --> 00:18:59,120
them

561
00:18:59,120 --> 00:19:01,039
and the last two like its name the

562
00:19:01,039 --> 00:19:03,280
permission to access them

563
00:19:03,280 --> 00:19:06,160
then i gotta mention that unfortunately

564
00:19:06,160 --> 00:19:08,160
everyone listed here is not as free as

565
00:19:08,160 --> 00:19:09,120
it sounds

566
00:19:09,120 --> 00:19:13,120
here is another layer of limitations

567
00:19:13,120 --> 00:19:15,120
the root file system where almost all

568
00:19:15,120 --> 00:19:16,640
the system files at

569
00:19:16,640 --> 00:19:18,799
doesn't allow anyone to write any files

570
00:19:18,799 --> 00:19:21,039
even you are not in the sandbox

571
00:19:21,039 --> 00:19:23,280
it's another layer of security and

572
00:19:23,280 --> 00:19:25,120
technically on ios

573
00:19:25,120 --> 00:19:26,799
you need to have read and write access

574
00:19:26,799 --> 00:19:28,640
to the kernel memory in order to patch

575
00:19:28,640 --> 00:19:29,520
it

576
00:19:29,520 --> 00:19:31,919
and for user and mac services and io kit

577
00:19:31,919 --> 00:19:32,880
apis

578
00:19:32,880 --> 00:19:34,559
it's not rare to see they checking for

579
00:19:34,559 --> 00:19:36,160
special entitlements

580
00:19:36,160 --> 00:19:38,400
if you don't have it we can almost say

581
00:19:38,400 --> 00:19:42,240
we don't have access to those services

582
00:19:42,240 --> 00:19:43,919
if you break down all the daemons and

583
00:19:43,919 --> 00:19:45,840
classify them by comparing access to

584
00:19:45,840 --> 00:19:48,640
useln service and kernel apis

585
00:19:48,640 --> 00:19:51,200
the map will look a bit like this well

586
00:19:51,200 --> 00:19:53,200
the two light green colors representing

587
00:19:53,200 --> 00:19:55,039
daemons that have free access to all

588
00:19:55,039 --> 00:19:56,799
kernel apis

589
00:19:56,799 --> 00:19:59,280
which include all the i o kit drivers

590
00:19:59,280 --> 00:20:01,120
they are the ideal trampolines to reach

591
00:20:01,120 --> 00:20:02,080
the kernel

592
00:20:02,080 --> 00:20:03,760
and then the dark green is the daemon

593
00:20:03,760 --> 00:20:05,679
that only has unrestricted access to

594
00:20:05,679 --> 00:20:07,520
uzland services

595
00:20:07,520 --> 00:20:09,600
it has more contact surface with the two

596
00:20:09,600 --> 00:20:10,960
light green colours

597
00:20:10,960 --> 00:20:12,799
most of these light green demons we

598
00:20:12,799 --> 00:20:15,360
cannot reach them within the sandbox

599
00:20:15,360 --> 00:20:17,120
and that is when the dark green comes in

600
00:20:17,120 --> 00:20:19,600
handy black and grey demons are not that

601
00:20:19,600 --> 00:20:20,480
attractive

602
00:20:20,480 --> 00:20:22,080
especially when we haven't finished

603
00:20:22,080 --> 00:20:25,760
picking all the low-hanging fruits yet

604
00:20:25,760 --> 00:20:28,000
so those greens are our targets i

605
00:20:28,000 --> 00:20:29,039
connected a and b

606
00:20:29,039 --> 00:20:30,320
together because they are only

607
00:20:30,320 --> 00:20:32,240
conceptually distinct

608
00:20:32,240 --> 00:20:34,720
statistically speaking except for those

609
00:20:34,720 --> 00:20:37,039
demons that used seat belt profiles

610
00:20:37,039 --> 00:20:38,880
all daemons that have free access to

611
00:20:38,880 --> 00:20:41,120
kernel apis also have free access to

612
00:20:41,120 --> 00:20:43,039
useln services

613
00:20:43,039 --> 00:20:44,799
so what about the ones that used seat

614
00:20:44,799 --> 00:20:47,520
belt profiles i basically just rule out

615
00:20:47,520 --> 00:20:49,200
everything that has used them

616
00:20:49,200 --> 00:20:51,200
they are relatively more secure

617
00:20:51,200 --> 00:20:52,559
especially with those who have

618
00:20:52,559 --> 00:20:54,880
personalized seat belt profiles

619
00:20:54,880 --> 00:20:56,799
all right now we have only two

620
00:20:56,799 --> 00:20:58,559
interesting categories left

621
00:20:58,559 --> 00:21:01,440
a b and c we gonna give them new colors

622
00:21:01,440 --> 00:21:02,000
that indicate

623
00:21:02,000 --> 00:21:06,320
the level of security risk okay

624
00:21:06,320 --> 00:21:09,200
all right so for the unsandboxed ones

625
00:21:09,200 --> 00:21:10,240
baby blue

626
00:21:10,240 --> 00:21:12,159
and if they are directly accessible from

627
00:21:12,159 --> 00:21:13,840
within the app sandbox

628
00:21:13,840 --> 00:21:16,080
then we mark those as red because once

629
00:21:16,080 --> 00:21:17,840
we take over one of these

630
00:21:17,840 --> 00:21:20,159
we are free of the sandbox it's that

631
00:21:20,159 --> 00:21:22,320
simple

632
00:21:22,320 --> 00:21:25,039
moreover for the semis we use light

633
00:21:25,039 --> 00:21:25,679
ginger

634
00:21:25,679 --> 00:21:27,280
and pink if they are accessible from

635
00:21:27,280 --> 00:21:28,960
within the app sandbox

636
00:21:28,960 --> 00:21:31,200
they are dangerous as well we can use

637
00:21:31,200 --> 00:21:33,280
them as a bridge to attack more a and b

638
00:21:33,280 --> 00:21:36,400
targets all right now it's time to see

639
00:21:36,400 --> 00:21:38,480
some statistical data which intuitively

640
00:21:38,480 --> 00:21:40,159
reflects the continuous strengthening of

641
00:21:40,159 --> 00:21:41,679
the sandbox

642
00:21:41,679 --> 00:21:43,679
i have collected such data from three

643
00:21:43,679 --> 00:21:46,960
different major versions

644
00:21:47,200 --> 00:21:51,039
so the first one is ios 12.4.1

645
00:21:51,039 --> 00:21:53,600
you can see the red area almost has a

646
00:21:53,600 --> 00:21:54,960
size of walnut

647
00:21:54,960 --> 00:21:57,280
again soon as we take over one of them

648
00:21:57,280 --> 00:21:58,960
in the red area

649
00:21:58,960 --> 00:22:01,840
we are out of sandbox completely and

650
00:22:01,840 --> 00:22:03,440
then it's just a matter of time until

651
00:22:03,440 --> 00:22:06,960
you find good bug in the kernel

652
00:22:08,240 --> 00:22:09,919
let's put on another one and compare

653
00:22:09,919 --> 00:22:12,240
them both

654
00:22:12,240 --> 00:22:13,919
the total number of the service is

655
00:22:13,919 --> 00:22:15,840
increasing as apple adding more features

656
00:22:15,840 --> 00:22:17,280
to the system

657
00:22:17,280 --> 00:22:20,320
ios 13 had some minor improvement but

658
00:22:20,320 --> 00:22:21,600
nothing significant

659
00:22:21,600 --> 00:22:23,520
the red area still has the size of a

660
00:22:23,520 --> 00:22:24,960
walnut well

661
00:22:24,960 --> 00:22:26,400
if you compare it to the first

662
00:22:26,400 --> 00:22:28,559
generation of ios which released 12

663
00:22:28,559 --> 00:22:29,919
years ago

664
00:22:29,919 --> 00:22:32,159
at that time the entire circle was

665
00:22:32,159 --> 00:22:33,440
filled up with red

666
00:22:33,440 --> 00:22:36,960
then yes ios 13 is much more secure

667
00:22:36,960 --> 00:22:38,640
but the fact is that none of these red

668
00:22:38,640 --> 00:22:40,559
colors should be exist

669
00:22:40,559 --> 00:22:42,159
and they are the typical examples of

670
00:22:42,159 --> 00:22:45,200
lacking restrictions

671
00:22:45,520 --> 00:22:47,919
and the fact that ios 13 has one less

672
00:22:47,919 --> 00:22:49,840
high risk targets was also because of

673
00:22:49,840 --> 00:22:51,760
external information

674
00:22:51,760 --> 00:22:53,919
i have another sandbox escaping bug that

675
00:22:53,919 --> 00:22:56,640
was reported during the ios 12.

676
00:22:56,640 --> 00:23:00,400
apple eventually fixed it in ios 13.2

677
00:23:00,400 --> 00:23:02,559
however they have sandboxed it when ios

678
00:23:02,559 --> 00:23:04,320
13 came out

679
00:23:04,320 --> 00:23:06,320
that is why i stated that the sandboxing

680
00:23:06,320 --> 00:23:08,480
is a powerful mitigation

681
00:23:08,480 --> 00:23:10,000
they don't need to understand the

682
00:23:10,000 --> 00:23:12,000
details of how a vulnerability works

683
00:23:12,000 --> 00:23:13,600
before patching it

684
00:23:13,600 --> 00:23:15,919
despite that is a temporary patch it

685
00:23:15,919 --> 00:23:18,159
worked it cannot be used as a bridge to

686
00:23:18,159 --> 00:23:20,159
attack kernel anymore

687
00:23:20,159 --> 00:23:22,320
i had to find another sandbox escaping

688
00:23:22,320 --> 00:23:23,679
bug to replace it

689
00:23:23,679 --> 00:23:26,080
that didn't take too long i'll explain

690
00:23:26,080 --> 00:23:28,080
it after

691
00:23:28,080 --> 00:23:30,559
to add more sense this is a conceptual

692
00:23:30,559 --> 00:23:32,960
diagram shows how a user invulnerability

693
00:23:32,960 --> 00:23:36,320
leads to kernel attack before ios 14.

694
00:23:36,320 --> 00:23:38,320
you don't even care about the dark green

695
00:23:38,320 --> 00:23:42,720
targets let alone the black and grays

696
00:23:42,960 --> 00:23:44,880
because apple didn't fix the overall

697
00:23:44,880 --> 00:23:46,159
sandbox problem

698
00:23:46,159 --> 00:23:48,080
i was able to quickly locate another

699
00:23:48,080 --> 00:23:50,080
sandbox escaping bug with the target

700
00:23:50,080 --> 00:23:51,600
filter i built

701
00:23:51,600 --> 00:23:54,880
and continue jailbreak the latest ios 13

702
00:23:54,880 --> 00:23:56,880
and something even more ironic is that

703
00:23:56,880 --> 00:23:58,960
apple has also failed to fix the kernel

704
00:23:58,960 --> 00:23:59,919
bug

705
00:23:59,919 --> 00:24:01,440
i want to say something after

706
00:24:01,440 --> 00:24:03,120
experiencing through this

707
00:24:03,120 --> 00:24:05,440
apple is a slow responder and they have

708
00:24:05,440 --> 00:24:07,520
failed to fix bugs in one go

709
00:24:07,520 --> 00:24:09,039
lack the ability to thoroughly

710
00:24:09,039 --> 00:24:10,720
investigate the issue and hence other

711
00:24:10,720 --> 00:24:12,480
place may still expose to the same

712
00:24:12,480 --> 00:24:13,679
weakness

713
00:24:13,679 --> 00:24:16,400
apple also lets bug regressions happen i

714
00:24:16,400 --> 00:24:18,400
have no idea how that happened

715
00:24:18,400 --> 00:24:20,799
that is outright internal threat apple

716
00:24:20,799 --> 00:24:22,320
is a big corporation

717
00:24:22,320 --> 00:24:24,320
the internal management must be super

718
00:24:24,320 --> 00:24:26,960
complicated

719
00:24:26,960 --> 00:24:29,200
nevertheless maybe apple is not the best

720
00:24:29,200 --> 00:24:30,799
active defensive player

721
00:24:30,799 --> 00:24:32,960
but still an excellent company i

722
00:24:32,960 --> 00:24:34,240
appreciate apple

723
00:24:34,240 --> 00:24:36,080
there are just so many companies and not

724
00:24:36,080 --> 00:24:37,520
even caring about security

725
00:24:37,520 --> 00:24:39,279
vulnerabilities

726
00:24:39,279 --> 00:24:43,120
i love apple we love apple

727
00:24:43,279 --> 00:24:46,000
ios 14 has made notable advancements in

728
00:24:46,000 --> 00:24:48,320
the security of the sandbox

729
00:24:48,320 --> 00:24:50,480
apple has completely eliminated the red

730
00:24:50,480 --> 00:24:52,640
area and significantly reduced the size

731
00:24:52,640 --> 00:24:54,320
of pink area

732
00:24:54,320 --> 00:24:56,880
by introducing a new entitlement for the

733
00:24:56,880 --> 00:24:57,760
first time

734
00:24:57,760 --> 00:24:59,840
the amount of baby blue and ginger color

735
00:24:59,840 --> 00:25:03,360
starts to appear inconsistent

736
00:25:03,919 --> 00:25:06,000
however that did not end the career of

737
00:25:06,000 --> 00:25:08,559
the sandbox escaping bugs yet

738
00:25:08,559 --> 00:25:10,559
this is a new diagram shows possible

739
00:25:10,559 --> 00:25:12,480
routes to reach colonel through sandbox

740
00:25:12,480 --> 00:25:16,400
escaping bug on ios 14.

741
00:25:17,039 --> 00:25:19,279
as long as baby blue's still there

742
00:25:19,279 --> 00:25:20,799
sandbox escaping isn't

743
00:25:20,799 --> 00:25:23,600
ended but for sure to do it on ios 14 is

744
00:25:23,600 --> 00:25:25,200
more complicated

745
00:25:25,200 --> 00:25:27,200
now you need to put two or more useless

746
00:25:27,200 --> 00:25:28,400
bugs together

747
00:25:28,400 --> 00:25:30,480
i know it's feasible because i already

748
00:25:30,480 --> 00:25:34,080
done it on ios 14.

749
00:25:34,240 --> 00:25:36,400
in the optimum case apple needs to

750
00:25:36,400 --> 00:25:38,000
eliminate all colors

751
00:25:38,000 --> 00:25:40,400
however consider debugging capability

752
00:25:40,400 --> 00:25:42,480
maybe a few have to be excluded

753
00:25:42,480 --> 00:25:45,679
and you should see something like this

754
00:25:45,679 --> 00:25:48,880
well now let's get back to ios 13.

755
00:25:48,880 --> 00:25:51,039
since that's the topic of this talk i

756
00:25:51,039 --> 00:25:52,720
want to show you some negligence in the

757
00:25:52,720 --> 00:25:54,640
ios sandbox

758
00:25:54,640 --> 00:25:57,600
some of them been fixed on ios 14 but

759
00:25:57,600 --> 00:25:59,360
definitely not all of them

760
00:25:59,360 --> 00:26:01,440
there are a variety of seemly sandbox

761
00:26:01,440 --> 00:26:03,120
related entitlements being used to

762
00:26:03,120 --> 00:26:04,720
restrict demons

763
00:26:04,720 --> 00:26:06,400
i'm sure you have seen them if you have

764
00:26:06,400 --> 00:26:10,240
tried reverse engineering on ios

765
00:26:10,240 --> 00:26:12,720
among all these options only a few have

766
00:26:12,720 --> 00:26:14,720
the actual effect on blocking access to

767
00:26:14,720 --> 00:26:18,880
kernel apis and useln services

768
00:26:20,640 --> 00:26:22,880
the a blocks access to other apps data

769
00:26:22,880 --> 00:26:24,559
in the file system

770
00:26:24,559 --> 00:26:26,400
but it will not interfere with access to

771
00:26:26,400 --> 00:26:28,000
the kernel and other userland mac

772
00:26:28,000 --> 00:26:29,360
services

773
00:26:29,360 --> 00:26:31,120
these targets are good for using as a

774
00:26:31,120 --> 00:26:32,720
bridge and then the b

775
00:26:32,720 --> 00:26:34,799
is almost as if it's not there and the

776
00:26:34,799 --> 00:26:36,480
rest of the green options

777
00:26:36,480 --> 00:26:39,200
they don't work alone ironically you can

778
00:26:39,200 --> 00:26:42,960
see a lot of misuse cases like this one

779
00:26:42,960 --> 00:26:44,480
i believe what apple wants is to

780
00:26:44,480 --> 00:26:46,559
restrict its access only to a useless

781
00:26:46,559 --> 00:26:48,880
service that has been highlighted

782
00:26:48,880 --> 00:26:51,679
but in fact this demon has no sandbox at

783
00:26:51,679 --> 00:26:52,240
all

784
00:26:52,240 --> 00:26:54,320
it's almost like a bluff it's so

785
00:26:54,320 --> 00:26:56,080
misleading to have that entitlement

786
00:26:56,080 --> 00:26:59,840
because it contains the word security

787
00:27:00,159 --> 00:27:02,240
next part i'll talk about how did i

788
00:27:02,240 --> 00:27:04,159
build my target filter which leads to

789
00:27:04,159 --> 00:27:06,720
discovery of many useless bugs

790
00:27:06,720 --> 00:27:09,039
so among all the light green targets

791
00:27:09,039 --> 00:27:11,919
there was 55 of them on ios 13.

792
00:27:11,919 --> 00:27:13,679
i have applied other conditions for a

793
00:27:13,679 --> 00:27:15,679
better result and they were super

794
00:27:15,679 --> 00:27:16,559
effective

795
00:27:16,559 --> 00:27:18,159
and i thought it's interesting to share

796
00:27:18,159 --> 00:27:21,679
with you guys what i was thinking

797
00:27:21,679 --> 00:27:23,600
so the first type of demons i would get

798
00:27:23,600 --> 00:27:26,000
rid of is those who running as root

799
00:27:26,000 --> 00:27:28,880
in the scenario of sandbox escaping root

800
00:27:28,880 --> 00:27:30,720
is quite worthless but reminds apple

801
00:27:30,720 --> 00:27:33,440
engineers to raise security awareness

802
00:27:33,440 --> 00:27:35,279
and attracts other researchers to come

803
00:27:35,279 --> 00:27:36,880
over and finding bugs

804
00:27:36,880 --> 00:27:38,720
then the second type of demons i don't

805
00:27:38,720 --> 00:27:41,679
like is those who used nsx pc

806
00:27:41,679 --> 00:27:45,360
instead of c style xpc library using nsx

807
00:27:45,360 --> 00:27:47,760
pc implies a fair amount of objective c

808
00:27:47,760 --> 00:27:48,080
code

809
00:27:48,080 --> 00:27:51,279
was used if not all of it not using nsx

810
00:27:51,279 --> 00:27:53,679
pc doesn't mean there is no objective c

811
00:27:53,679 --> 00:27:55,440
code but it is telling us that more or

812
00:27:55,440 --> 00:27:57,919
less c code also been used

813
00:27:57,919 --> 00:28:00,000
and if you have studied enough cases on

814
00:28:00,000 --> 00:28:01,039
ios

815
00:28:01,039 --> 00:28:03,120
you will notice that most dangerous

816
00:28:03,120 --> 00:28:04,640
problems stick with the programming

817
00:28:04,640 --> 00:28:06,559
language c in its variant c

818
00:28:06,559 --> 00:28:09,360
plus the same explanation goes to the

819
00:28:09,360 --> 00:28:11,200
question of why i skipped programs that

820
00:28:11,200 --> 00:28:14,240
are written by swift

821
00:28:14,559 --> 00:28:16,559
after rule out the demons that met those

822
00:28:16,559 --> 00:28:18,960
conditions i got only three ideal

823
00:28:18,960 --> 00:28:20,080
targets left

824
00:28:20,080 --> 00:28:22,399
and by the time i found out this the

825
00:28:22,399 --> 00:28:24,720
authentication broker agent and symptoms

826
00:28:24,720 --> 00:28:24,960
d

827
00:28:24,960 --> 00:28:28,240
was also used on mac os it was rather an

828
00:28:28,240 --> 00:28:30,320
easy task to discover and exploit this

829
00:28:30,320 --> 00:28:32,000
bug since we have the unparalleled

830
00:28:32,000 --> 00:28:34,799
debugging capability on mac os

831
00:28:34,799 --> 00:28:36,880
and then apple removed it from mac os

832
00:28:36,880 --> 00:28:39,440
after version 10.15

833
00:28:39,440 --> 00:28:41,760
i was in that perfect time gap since

834
00:28:41,760 --> 00:28:44,080
reverse engineering frameworks on ios

835
00:28:44,080 --> 00:28:46,720
is a big nuisance this bug probably

836
00:28:46,720 --> 00:28:48,399
gonna last really long if i didn't

837
00:28:48,399 --> 00:28:50,959
report it

838
00:28:51,360 --> 00:28:53,039
so this is where the vulnerability

839
00:28:53,039 --> 00:28:55,679
located at long story short

840
00:28:55,679 --> 00:28:58,320
objective c runtime is problematic and

841
00:28:58,320 --> 00:29:00,159
this issue is sort of like the classic

842
00:29:00,159 --> 00:29:01,679
format string problem in c

843
00:29:01,679 --> 00:29:04,880
and c plus sometime the user can control

844
00:29:04,880 --> 00:29:06,640
the selector string that will later used

845
00:29:06,640 --> 00:29:10,559
for executing a objective c method

846
00:29:11,120 --> 00:29:13,440
in most cases the attacker could pass

847
00:29:13,440 --> 00:29:14,399
the string

848
00:29:14,399 --> 00:29:16,640
dialic that will deallocate whatever

849
00:29:16,640 --> 00:29:18,320
object has been called on

850
00:29:18,320 --> 00:29:20,720
which constitutes a use after free

851
00:29:20,720 --> 00:29:21,440
however

852
00:29:21,440 --> 00:29:23,600
that is not the case here because the

853
00:29:23,600 --> 00:29:25,520
next function will inevitably crash the

854
00:29:25,520 --> 00:29:26,480
process

855
00:29:26,480 --> 00:29:28,240
and there was no time for us to spray

856
00:29:28,240 --> 00:29:30,960
data over the memory that gets released

857
00:29:30,960 --> 00:29:32,880
especially when the symptoms d doesn't

858
00:29:32,880 --> 00:29:34,880
support asynchronous execution through

859
00:29:34,880 --> 00:29:37,600
xpc

860
00:29:37,760 --> 00:29:39,919
so we gotta find other ways to exploit

861
00:29:39,919 --> 00:29:41,760
it i discovered a specific

862
00:29:41,760 --> 00:29:44,080
objective c method that we can control

863
00:29:44,080 --> 00:29:45,520
the return value

864
00:29:45,520 --> 00:29:47,520
thus capable of turning it into a very

865
00:29:47,520 --> 00:29:48,960
reliable exploit

866
00:29:48,960 --> 00:29:51,360
the detail is boring let's speed up

867
00:29:51,360 --> 00:29:52,240
little bit

868
00:29:52,240 --> 00:29:54,480
if you want to study more about it you

869
00:29:54,480 --> 00:29:56,080
should read my write-up that has been

870
00:29:56,080 --> 00:29:58,000
published on zetsop's website or my

871
00:29:58,000 --> 00:30:01,279
white paper for this talk

872
00:30:05,200 --> 00:30:06,880
and that was how this vulnerability

873
00:30:06,880 --> 00:30:09,120
being exploited and takeaway is the

874
00:30:09,120 --> 00:30:11,039
keyword perform selector and bunch of

875
00:30:11,039 --> 00:30:12,640
similar stuff

876
00:30:12,640 --> 00:30:14,880
since the secret is now been revealed

877
00:30:14,880 --> 00:30:18,880
i'm gonna dropping zero days too

878
00:30:20,240 --> 00:30:23,279
the first one was good before ios 13.

879
00:30:23,279 --> 00:30:27,840
now is being sandboxed make it worthless

880
00:30:27,840 --> 00:30:29,520
the second one is possible to be

881
00:30:29,520 --> 00:30:30,880
triggered from the file

882
00:30:30,880 --> 00:30:32,720
the file is located under one of the

883
00:30:32,720 --> 00:30:34,159
system frameworks

884
00:30:34,159 --> 00:30:36,240
since the root file system on ios

885
00:30:36,240 --> 00:30:38,080
remains red only before you reach the

886
00:30:38,080 --> 00:30:39,120
kernel

887
00:30:39,120 --> 00:30:41,520
this one cannot be used for jailbreak

888
00:30:41,520 --> 00:30:42,240
all right

889
00:30:42,240 --> 00:30:43,679
that was the end of the useland

890
00:30:43,679 --> 00:30:46,080
exploitation after we break out of the

891
00:30:46,080 --> 00:30:47,120
sandbox

892
00:30:47,120 --> 00:30:48,720
we will then attacking the weak part of

893
00:30:48,720 --> 00:30:51,039
the kernel

894
00:30:51,039 --> 00:30:53,279
the apple video encoder is a graphics i

895
00:30:53,279 --> 00:30:55,360
o kit driver that runs in kernel space

896
00:30:55,360 --> 00:30:57,519
and exists only on ios and just like

897
00:30:57,519 --> 00:31:00,399
many other ios exclusive drivers

898
00:31:00,399 --> 00:31:02,159
it's not open source and most of the

899
00:31:02,159 --> 00:31:04,159
symbols have been removed

900
00:31:04,159 --> 00:31:06,000
and it cannot be accessed from the app

901
00:31:06,000 --> 00:31:07,760
sandbox

902
00:31:07,760 --> 00:31:10,960
also back in 2017 the same driver has

903
00:31:10,960 --> 00:31:13,039
been exploited badly and apple did gave

904
00:31:13,039 --> 00:31:17,679
it a complete makeover after ios 14.

905
00:31:17,679 --> 00:31:19,440
here is the external methods of this

906
00:31:19,440 --> 00:31:22,159
driver we mainly use method at index 7

907
00:31:22,159 --> 00:31:23,840
to encode a client buff

908
00:31:23,840 --> 00:31:25,919
it basically means to load many io

909
00:31:25,919 --> 00:31:27,919
surfaces object through ids provided

910
00:31:27,919 --> 00:31:29,440
from the user end

911
00:31:29,440 --> 00:31:31,519
and then calling method at index 6 to

912
00:31:31,519 --> 00:31:33,760
trigger multiple security flaws located

913
00:31:33,760 --> 00:31:37,279
inside the highlighted function

914
00:31:37,440 --> 00:31:39,279
and then this map shows the relationship

915
00:31:39,279 --> 00:31:47,039
between involved objects and structures

916
00:31:47,039 --> 00:31:48,720
then i put all the structures together

917
00:31:48,720 --> 00:31:50,320
and formed another map that clearly

918
00:31:50,320 --> 00:31:53,840
shows the connections between them

919
00:31:54,640 --> 00:31:56,960
unfortunately apple didn't patch it well

920
00:31:56,960 --> 00:31:58,720
back in 2017

921
00:31:58,720 --> 00:32:00,640
and this phenomenon is also seen in

922
00:32:00,640 --> 00:32:01,760
other drivers

923
00:32:01,760 --> 00:32:03,679
apple has not paid enough attention to

924
00:32:03,679 --> 00:32:05,840
drivers that require sandbox escape to

925
00:32:05,840 --> 00:32:07,039
access

926
00:32:07,039 --> 00:32:08,960
the detail of this exploit has made

927
00:32:08,960 --> 00:32:11,600
public you can find them online

928
00:32:11,600 --> 00:32:15,840
all right now let's look at the next one

929
00:32:16,080 --> 00:32:18,000
this is my second time exploiting the

930
00:32:18,000 --> 00:32:19,519
same graphics driver

931
00:32:19,519 --> 00:32:22,159
this time is way more complex let's take

932
00:32:22,159 --> 00:32:28,640
a look at the workflow

933
00:32:28,640 --> 00:32:30,399
you will notice that i will mention this

934
00:32:30,399 --> 00:32:32,320
variable here multiple times throughout

935
00:32:32,320 --> 00:32:35,120
the explanation

936
00:32:36,960 --> 00:32:38,799
this variable which i call it mapping

937
00:32:38,799 --> 00:32:40,799
from user is kernel variable contains

938
00:32:40,799 --> 00:32:42,480
the address of a memory mapping across

939
00:32:42,480 --> 00:32:44,320
userpandan kernel

940
00:32:44,320 --> 00:32:46,000
both sides can read and write this

941
00:32:46,000 --> 00:32:47,679
memory simultaneously

942
00:32:47,679 --> 00:32:49,360
which brings up the racecondition

943
00:32:49,360 --> 00:32:51,840
problem by taking the advantage of the

944
00:32:51,840 --> 00:32:53,360
memory race condition

945
00:32:53,360 --> 00:32:54,880
we can build some gadgets that will

946
00:32:54,880 --> 00:32:57,840
handy later

947
00:32:58,960 --> 00:33:02,399
and these are the three gadgets

948
00:33:04,080 --> 00:33:05,840
now we can proceed to achieve the key

949
00:33:05,840 --> 00:33:08,080
step which is to leak the memory mapping

950
00:33:08,080 --> 00:33:10,320
address but in kernel space

951
00:33:10,320 --> 00:33:12,480
i initially thought it was impossible

952
00:33:12,480 --> 00:33:14,000
but somehow i did it

953
00:33:14,000 --> 00:33:16,320
and it was really magical since we can

954
00:33:16,320 --> 00:33:18,720
allocate and leak kernel 40 bytes memory

955
00:33:18,720 --> 00:33:20,480
through one of the gadgets

956
00:33:20,480 --> 00:33:23,760
we can try something like this

957
00:33:23,760 --> 00:33:27,679
we keep leaking more memory addresses

958
00:33:27,679 --> 00:33:30,720
then collect two of them

959
00:33:30,720 --> 00:33:33,279
and then allocate a new one now release

960
00:33:33,279 --> 00:33:34,320
all of them

961
00:33:34,320 --> 00:33:36,880
since an os data instance is also 40

962
00:33:36,880 --> 00:33:39,039
bytes long it's possible that it fell

963
00:33:39,039 --> 00:33:41,679
into one of the blocks we just released

964
00:33:41,679 --> 00:33:43,440
the difficult part is how do we know if

965
00:33:43,440 --> 00:33:45,919
that happens and which address exactly

966
00:33:45,919 --> 00:33:48,159
cause if we guessed it wrong the panic

967
00:33:48,159 --> 00:33:50,159
will happen

968
00:33:50,159 --> 00:33:51,840
we can predict if that will happen by

969
00:33:51,840 --> 00:33:53,679
using following strategies

970
00:33:53,679 --> 00:33:55,519
by the end we will have 10 addresses

971
00:33:55,519 --> 00:33:57,919
saved i discovered two simple patterns

972
00:33:57,919 --> 00:34:01,760
that is giving out information we want

973
00:34:02,320 --> 00:34:07,840
this is the first pattern

974
00:34:08,239 --> 00:34:11,678
and there is the second pattern

975
00:34:14,399 --> 00:34:16,000
these two patterns will tell us the

976
00:34:16,000 --> 00:34:21,520
exact address of an os data instance

977
00:34:21,520 --> 00:34:23,679
so now we have an os data instance with

978
00:34:23,679 --> 00:34:25,679
a known kernel address

979
00:34:25,679 --> 00:34:27,520
next step is to overwrite the data

980
00:34:27,520 --> 00:34:31,199
pointer from the help of another gadget

981
00:34:32,399 --> 00:34:34,239
then we can read the following structure

982
00:34:34,239 --> 00:34:36,560
through the os data instance

983
00:34:36,560 --> 00:34:38,320
this structure contains the target

984
00:34:38,320 --> 00:34:40,000
variable however

985
00:34:40,000 --> 00:34:42,239
very unfortunate the one we leaked is

986
00:34:42,239 --> 00:34:44,638
empty

987
00:34:45,040 --> 00:34:47,280
it's so tired and unnecessary to explain

988
00:34:47,280 --> 00:34:48,560
the logic here

989
00:34:48,560 --> 00:34:50,320
since i have every steps written in the

990
00:34:50,320 --> 00:34:52,800
white paper so let's skip some steps and

991
00:34:52,800 --> 00:34:55,839
just get to the point

992
00:34:56,000 --> 00:34:58,240
basically after we leaked the variable

993
00:34:58,240 --> 00:34:59,520
mapping from user

994
00:34:59,520 --> 00:35:01,359
we now have the power to read and write

995
00:35:01,359 --> 00:35:03,440
any kernel memory data

996
00:35:03,440 --> 00:35:06,720
but it's not perfect yet

997
00:35:06,720 --> 00:35:09,440
it has side effects for this reason i

998
00:35:09,440 --> 00:35:11,119
have to locate another primitive for

999
00:35:11,119 --> 00:35:12,240
reading memory

1000
00:35:12,240 --> 00:35:16,000
it's a lot reverse engineering work

1001
00:35:16,000 --> 00:35:18,720
at the end i found it a new memory red

1002
00:35:18,720 --> 00:35:20,400
primitive that is not based on race

1003
00:35:20,400 --> 00:35:21,680
condition

1004
00:35:21,680 --> 00:35:24,000
then we read out our task structure

1005
00:35:24,000 --> 00:35:26,480
insert a fake task for pid0 port using

1006
00:35:26,480 --> 00:35:28,880
the temporary memory write primitive

1007
00:35:28,880 --> 00:35:32,000
that is it we are done

1008
00:35:32,000 --> 00:35:35,200
then i reported to apple during ios 13.

1009
00:35:35,200 --> 00:35:37,119
apple fixed it by destroying the read

1010
00:35:37,119 --> 00:35:39,440
and write primitive i was using

1011
00:35:39,440 --> 00:35:41,920
well they didn't fix it thoroughly i

1012
00:35:41,920 --> 00:35:43,359
guess part of the reason is that they

1013
00:35:43,359 --> 00:35:47,520
were reprogramming the driver on ios 14.

1014
00:35:47,520 --> 00:35:50,079
besides that apple also fixed a critical

1015
00:35:50,079 --> 00:35:52,240
part of building a fake task for pid0

1016
00:35:52,240 --> 00:35:53,280
port

1017
00:35:53,280 --> 00:35:54,960
which means now you have to develop

1018
00:35:54,960 --> 00:35:56,800
custom kernel read and write primitive

1019
00:35:56,800 --> 00:36:00,800
before injecting tfp0

1020
00:36:01,520 --> 00:36:04,000
next this diagram shows that part of the

1021
00:36:04,000 --> 00:36:07,280
workflow has been patched on 13.6

1022
00:36:07,280 --> 00:36:09,119
then the diagram on the right shows the

1023
00:36:09,119 --> 00:36:11,200
new steps to achieve custom kernel read

1024
00:36:11,200 --> 00:36:13,839
and write

1025
00:36:13,920 --> 00:36:16,000
it's actually kinda silly it's the same

1026
00:36:16,000 --> 00:36:18,560
function that apple has tried to patch

1027
00:36:18,560 --> 00:36:20,560
still giving us the power to read memory

1028
00:36:20,560 --> 00:36:24,320
and empty any one byte long memory

1029
00:36:24,320 --> 00:36:25,839
i have mentioned this from the very

1030
00:36:25,839 --> 00:36:27,599
beginning that all client biff's forming

1031
00:36:27,599 --> 00:36:29,359
a double linked list

1032
00:36:29,359 --> 00:36:31,359
so i leverage the writing gadget to set

1033
00:36:31,359 --> 00:36:33,119
two lower bits of the linking pointer to

1034
00:36:33,119 --> 00:36:34,240
zero

1035
00:36:34,240 --> 00:36:36,079
it then points back to a memory that we

1036
00:36:36,079 --> 00:36:39,520
have complete control over

1037
00:36:39,599 --> 00:36:41,200
it turns out to be completely

1038
00:36:41,200 --> 00:36:43,599
exploitable we can set up a fake client

1039
00:36:43,599 --> 00:36:44,320
boof

1040
00:36:44,320 --> 00:36:46,000
and looking for new ways to read and

1041
00:36:46,000 --> 00:36:48,560
write kernel memory

1042
00:36:48,560 --> 00:36:51,839
without rely on tfp 0 we can reuse the

1043
00:36:51,839 --> 00:36:53,520
previously mentioned stable read

1044
00:36:53,520 --> 00:36:54,400
primitive

1045
00:36:54,400 --> 00:36:56,079
and it didn't take too long for me to

1046
00:36:56,079 --> 00:36:58,560
find another memory right primitive

1047
00:36:58,560 --> 00:37:01,119
because client buff is a huge structure

1048
00:37:01,119 --> 00:37:04,160
lots of code was used

1049
00:37:04,160 --> 00:37:06,839
so this is the new memory right

1050
00:37:06,839 --> 00:37:08,800
primitive

1051
00:37:08,800 --> 00:37:11,760
we can then build tfp0 again and then

1052
00:37:11,760 --> 00:37:15,119
it's all the same after that

1053
00:37:16,320 --> 00:37:18,160
so pretty much that's the end if you

1054
00:37:18,160 --> 00:37:19,599
have anything i want to say just contact

1055
00:37:19,599 --> 00:37:23,839
me through the email

