1
00:00:01,180 --> 00:00:14,730
[Music]

2
00:00:17,760 --> 00:00:19,279
thank you for coming

3
00:00:19,279 --> 00:00:21,920
today i'm going to present a new code

4
00:00:21,920 --> 00:00:23,199
injection technique

5
00:00:23,199 --> 00:00:26,880
by abusing binance translation dashboard

6
00:00:26,880 --> 00:00:29,359
my name is kona kagawa and i am a

7
00:00:29,359 --> 00:00:30,560
security researcher

8
00:00:30,560 --> 00:00:33,920
at the ffri security my main research

9
00:00:33,920 --> 00:00:35,920
interests are barrambit research and

10
00:00:35,920 --> 00:00:37,440
rebus engineering

11
00:00:37,440 --> 00:00:40,239
is of course speaker hiromit oshiba is a

12
00:00:40,239 --> 00:00:41,520
research director

13
00:00:41,520 --> 00:00:44,879
at the ffri security his main research

14
00:00:44,879 --> 00:00:45,520
in just

15
00:00:45,520 --> 00:00:48,320
bambiti research representations and

16
00:00:48,320 --> 00:00:51,440
maria analysis

17
00:00:51,680 --> 00:00:54,480
it's outline of this talk first i

18
00:00:54,480 --> 00:00:55,120
introduced

19
00:00:55,120 --> 00:00:59,039
windows 101 then i talk about binocular

20
00:00:59,039 --> 00:01:00,480
ascension cache file

21
00:01:00,480 --> 00:01:03,440
and its reverse engineering result then

22
00:01:03,440 --> 00:01:05,280
i talk about new code injection

23
00:01:05,280 --> 00:01:06,080
technique

24
00:01:06,080 --> 00:01:09,119
and its use cases then i conclude this

25
00:01:09,119 --> 00:01:09,680
talk

26
00:01:09,680 --> 00:01:12,560
and show some github links to plc code

27
00:01:12,560 --> 00:01:14,880
and source

28
00:01:14,880 --> 00:01:17,920
so let's get into it arm processors have

29
00:01:17,920 --> 00:01:19,759
been used for laptops

30
00:01:19,759 --> 00:01:21,920
not limited to smartphone due to its

31
00:01:21,920 --> 00:01:23,920
energy efficient feature

32
00:01:23,920 --> 00:01:26,479
for example microsoft launched service

33
00:01:26,479 --> 00:01:27,280
products last

34
00:01:27,280 --> 00:01:30,880
year which runs windows 10 on earn

35
00:01:30,880 --> 00:01:33,360
as a vendor package also launched a

36
00:01:33,360 --> 00:01:34,240
similar product

37
00:01:34,240 --> 00:01:37,520
called hp mdx2 which runs also windows

38
00:01:37,520 --> 00:01:39,439
10 owner

39
00:01:39,439 --> 00:01:41,920
recently apple also announced the mac

40
00:01:41,920 --> 00:01:45,119
transition to ambience apocalypse

41
00:01:45,119 --> 00:01:47,840
so ambitious laptops will be becoming

42
00:01:47,840 --> 00:01:50,079
very popular

43
00:01:50,079 --> 00:01:52,640
however there is a value to the

44
00:01:52,640 --> 00:01:54,720
transition from intel to earn

45
00:01:54,720 --> 00:01:57,520
for many users since these two

46
00:01:57,520 --> 00:02:00,159
architectures are entirely different

47
00:02:00,159 --> 00:02:03,360
we can't use existing software for enter

48
00:02:03,360 --> 00:02:06,479
on our best laptops but

49
00:02:06,479 --> 00:02:10,000
don't worry microsoft and apple provided

50
00:02:10,000 --> 00:02:11,120
the solutions

51
00:02:11,120 --> 00:02:14,000
for such a problem microsoft announced

52
00:02:14,000 --> 00:02:16,160
x86 animation feature

53
00:02:16,160 --> 00:02:19,200
for windows 10 run this enables

54
00:02:19,200 --> 00:02:22,400
execution of x86 application

55
00:02:22,400 --> 00:02:24,879
on ambient laptops by jitbar and

56
00:02:24,879 --> 00:02:26,480
translation

57
00:02:26,480 --> 00:02:28,319
apple also announced a similar binary

58
00:02:28,319 --> 00:02:30,080
translation technology

59
00:02:30,080 --> 00:02:33,440
called rosette 2 which runs both at

60
00:02:33,440 --> 00:02:37,120
install time and land

61
00:02:37,120 --> 00:02:39,440
but you must think that hey by a

62
00:02:39,440 --> 00:02:42,080
translation for every application launch

63
00:02:42,080 --> 00:02:45,360
it seems to be very slow but

64
00:02:45,360 --> 00:02:48,400
again don't worry when you look at

65
00:02:48,400 --> 00:02:51,360
microsoft documentation you can find a

66
00:02:51,360 --> 00:02:53,840
service caching this translated browser

67
00:02:53,840 --> 00:02:56,319
call to reduce the overhead of

68
00:02:56,319 --> 00:02:58,640
instruction translation

69
00:02:58,640 --> 00:03:01,120
this translated blocks of code are

70
00:03:01,120 --> 00:03:03,120
cached as a file

71
00:03:03,120 --> 00:03:07,200
this file is called fca cache1

72
00:03:07,200 --> 00:03:09,680
it reduces much object to binary

73
00:03:09,680 --> 00:03:11,440
translation overhead

74
00:03:11,440 --> 00:03:14,400
so when the translation result is in xc

75
00:03:14,400 --> 00:03:15,599
cache file

76
00:03:15,599 --> 00:03:19,040
jitbiner translation is not performed

77
00:03:19,040 --> 00:03:21,120
so discussion mechanisms improve the

78
00:03:21,120 --> 00:03:22,159
performance of

79
00:03:22,159 --> 00:03:25,679
x86 emulation

80
00:03:25,840 --> 00:03:28,000
how does the mission work before

81
00:03:28,000 --> 00:03:28,879
explaining

82
00:03:28,879 --> 00:03:31,280
i introduced three major components of

83
00:03:31,280 --> 00:03:33,599
x86 emission

84
00:03:33,599 --> 00:03:37,200
xtj is america dll loaded by wow 64

85
00:03:37,200 --> 00:03:38,319
radio

86
00:03:38,319 --> 00:03:40,560
xtag is a comparator that creates or

87
00:03:40,560 --> 00:03:41,360
modifies

88
00:03:41,360 --> 00:03:44,319
xc cache files xc cache service is a

89
00:03:44,319 --> 00:03:45,519
service program that

90
00:03:45,519 --> 00:03:48,480
manages exec cache files it also creates

91
00:03:48,480 --> 00:03:49,360
or modifies

92
00:03:49,360 --> 00:03:53,040
xc cache files by running extract

93
00:03:53,040 --> 00:03:54,959
from now on i show some reverse

94
00:03:54,959 --> 00:03:57,519
engineering results results of x86

95
00:03:57,519 --> 00:03:58,400
emission

96
00:03:58,400 --> 00:04:01,840
and xc cash flow some results rely on

97
00:04:01,840 --> 00:04:05,040
sirens research chamber

98
00:04:05,040 --> 00:04:08,080
here i show a flow of execution of

99
00:04:08,080 --> 00:04:12,080
x86 emission using xc cache file

100
00:04:12,080 --> 00:04:15,120
when the x86 application runs

101
00:04:15,120 --> 00:04:18,238
xcg dll is loaded to the memory

102
00:04:18,238 --> 00:04:20,880
and it do not write the xck service to

103
00:04:20,880 --> 00:04:22,960
lpg

104
00:04:22,960 --> 00:04:26,000
then this execute service searches a

105
00:04:26,000 --> 00:04:27,120
cache file

106
00:04:27,120 --> 00:04:29,600
for the application from this cache file

107
00:04:29,600 --> 00:04:31,600
directory

108
00:04:31,600 --> 00:04:34,000
if it finds cache file for the

109
00:04:34,000 --> 00:04:35,680
application

110
00:04:35,680 --> 00:04:38,800
then this xt cache file is mapped to the

111
00:04:38,800 --> 00:04:39,600
memory

112
00:04:39,600 --> 00:04:43,600
with read and execute protection

113
00:04:43,600 --> 00:04:46,080
then threats of this process transfers

114
00:04:46,080 --> 00:04:47,040
the control

115
00:04:47,040 --> 00:04:50,639
to the cash flow if needed it's a threat

116
00:04:50,639 --> 00:04:52,720
encounters a code work that is not in

117
00:04:52,720 --> 00:04:54,240
the cash bar

118
00:04:54,240 --> 00:04:57,199
it translates some code blocks

119
00:04:57,199 --> 00:04:58,320
dynamically

120
00:04:58,320 --> 00:05:00,960
and writes a content to the heap region

121
00:05:00,960 --> 00:05:01,360
then

122
00:05:01,360 --> 00:05:05,039
transfers the control to the heap region

123
00:05:05,039 --> 00:05:08,080
where xcache files we can find excel

124
00:05:08,080 --> 00:05:10,400
cache wise in the system root xc cache

125
00:05:10,400 --> 00:05:11,680
directory

126
00:05:11,680 --> 00:05:14,320
as you can see there are 0x cache wise

127
00:05:14,320 --> 00:05:16,800
in this directory

128
00:05:16,800 --> 00:05:19,919
like this by level setting who

129
00:05:19,919 --> 00:05:22,000
permission is granted only to

130
00:05:22,000 --> 00:05:25,600
xca cache service however with adobe

131
00:05:25,600 --> 00:05:26,960
equivalent privilege

132
00:05:26,960 --> 00:05:28,880
we can change the directory's permission

133
00:05:28,880 --> 00:05:30,160
to other owner

134
00:05:30,160 --> 00:05:31,919
so after changing the objective's

135
00:05:31,919 --> 00:05:34,639
permission we can read and write exec

136
00:05:34,639 --> 00:05:38,080
cache files in this directory

137
00:05:38,080 --> 00:05:40,720
you might notice the distinct creative

138
00:05:40,720 --> 00:05:41,199
name of

139
00:05:41,199 --> 00:05:44,639
xc cache file its name is roughly

140
00:05:44,639 --> 00:05:45,440
composed of

141
00:05:45,440 --> 00:05:49,120
rubrics name of executable

142
00:05:49,120 --> 00:05:52,880
hash value by file content hashbrush

143
00:05:52,880 --> 00:05:56,400
and the number of updates i'll explain

144
00:05:56,400 --> 00:05:57,680
the update feature of

145
00:05:57,680 --> 00:06:01,440
xc cache file later but extract

146
00:06:01,440 --> 00:06:04,400
updates on xc cache file to add newly

147
00:06:04,400 --> 00:06:05,280
translated

148
00:06:05,280 --> 00:06:08,800
blogs of code how does

149
00:06:08,800 --> 00:06:10,800
execute service search exceed cache

150
00:06:10,800 --> 00:06:11,840
files

151
00:06:11,840 --> 00:06:15,280
to do this xt cache makes

152
00:06:15,280 --> 00:06:18,560
the strength for searching it first

153
00:06:18,560 --> 00:06:21,680
calculates a hash value by file content

154
00:06:21,680 --> 00:06:24,960
and file paths then combine these

155
00:06:24,960 --> 00:06:25,919
results

156
00:06:25,919 --> 00:06:28,960
with the name of executable

157
00:06:28,960 --> 00:06:31,520
the number of updates is specified as a

158
00:06:31,520 --> 00:06:32,880
variable

159
00:06:32,880 --> 00:06:36,400
by using this string execute service

160
00:06:36,400 --> 00:06:39,759
such as a cash flash for the application

161
00:06:39,759 --> 00:06:43,280
if it finds much more cash files it uses

162
00:06:43,280 --> 00:06:44,080
a

163
00:06:44,080 --> 00:06:46,840
cash flow whose number of updates is

164
00:06:46,840 --> 00:06:48,880
largest

165
00:06:48,880 --> 00:06:51,120
cache files whose number of updates is

166
00:06:51,120 --> 00:06:51,919
smaller

167
00:06:51,919 --> 00:06:55,120
are not used and these files are removed

168
00:06:55,120 --> 00:06:57,599
later

169
00:06:57,599 --> 00:07:00,840
next let's dig into the structure of

170
00:07:00,840 --> 00:07:02,160
xcache1

171
00:07:02,160 --> 00:07:04,000
here i show the schematic picture of

172
00:07:04,000 --> 00:07:06,160
exit cache bar

173
00:07:06,160 --> 00:07:08,479
header for the asset to the following

174
00:07:08,479 --> 00:07:10,400
blocks

175
00:07:10,400 --> 00:07:12,720
their shikes tab contains code for

176
00:07:12,720 --> 00:07:13,919
breaching btx

177
00:07:13,919 --> 00:07:16,720
cache and exeget and the address lookup

178
00:07:16,720 --> 00:07:18,000
operation function

179
00:07:18,000 --> 00:07:21,599
and so on after this

180
00:07:21,599 --> 00:07:24,960
there is translated um code these two

181
00:07:24,960 --> 00:07:25,520
blocks

182
00:07:25,520 --> 00:07:28,639
are repeated for the number of updates

183
00:07:28,639 --> 00:07:32,240
after these blocks there's other spheres

184
00:07:32,240 --> 00:07:35,039
our spheres contain the relation between

185
00:07:35,039 --> 00:07:36,080
the rba of

186
00:07:36,080 --> 00:07:39,120
x86 application and the offset of

187
00:07:39,120 --> 00:07:40,080
translated

188
00:07:40,080 --> 00:07:44,160
arm code finally the snd pass name of

189
00:07:44,160 --> 00:07:45,280
x86

190
00:07:45,280 --> 00:07:47,840
application

191
00:07:48,879 --> 00:07:51,919
here i show the reverse entering result

192
00:07:51,919 --> 00:07:54,720
of exec cache variant

193
00:07:54,720 --> 00:07:58,039
it contains magic number which is always

194
00:07:58,039 --> 00:08:01,199
xth and file version

195
00:08:01,199 --> 00:08:05,039
and this cache file is updated or not

196
00:08:05,039 --> 00:08:07,919
and also to the following blocks and the

197
00:08:07,919 --> 00:08:09,199
module name of

198
00:08:09,199 --> 00:08:12,960
x86 application i don't explain all of

199
00:08:12,960 --> 00:08:13,919
these members

200
00:08:13,919 --> 00:08:16,879
of this structure here so for more

201
00:08:16,879 --> 00:08:17,680
details

202
00:08:17,680 --> 00:08:21,919
see the appendix of this material

203
00:08:22,479 --> 00:08:25,280
here i show some example of translated

204
00:08:25,280 --> 00:08:27,039
arm code

205
00:08:27,039 --> 00:08:29,440
you can see that translated arm code

206
00:08:29,440 --> 00:08:30,319
exists

207
00:08:30,319 --> 00:08:33,919
without any observation and encryption

208
00:08:33,919 --> 00:08:36,640
so when you disassemble this xc cache

209
00:08:36,640 --> 00:08:37,440
file

210
00:08:37,440 --> 00:08:40,719
you can get an assembly translated on

211
00:08:40,719 --> 00:08:41,760
assembly

212
00:08:41,760 --> 00:08:44,718
like yes

213
00:08:45,200 --> 00:08:47,680
next let's examine this translated arm

214
00:08:47,680 --> 00:08:48,959
code

215
00:08:48,959 --> 00:08:51,920
dimension on general purpose register

216
00:08:51,920 --> 00:08:53,519
have special meanings

217
00:08:53,519 --> 00:08:56,080
and each ram register corresponds to

218
00:08:56,080 --> 00:08:58,720
each x86 register

219
00:08:58,720 --> 00:09:00,880
this table shows such a relationship

220
00:09:00,880 --> 00:09:02,560
between these two action

221
00:09:02,560 --> 00:09:05,760
architectures by using this table

222
00:09:05,760 --> 00:09:08,560
we can we can understand this translated

223
00:09:08,560 --> 00:09:10,160
arm code

224
00:09:10,160 --> 00:09:13,440
for example w29 register

225
00:09:13,440 --> 00:09:17,680
correspond to ebp and w28 register

226
00:09:17,680 --> 00:09:21,040
correspond to esp register

227
00:09:21,040 --> 00:09:24,880
so the meaning of this instruction is

228
00:09:24,880 --> 00:09:28,080
the store as a value of ebb to the stack

229
00:09:28,080 --> 00:09:28,880
top

230
00:09:28,880 --> 00:09:31,760
and the stock top is decremented by 4

231
00:09:31,760 --> 00:09:32,640
bytes

232
00:09:32,640 --> 00:09:35,200
which is equivalent to push abb

233
00:09:35,200 --> 00:09:36,320
instruction

234
00:09:36,320 --> 00:09:40,720
of x86 x86

235
00:09:40,720 --> 00:09:43,360
i determine this table while reverse

236
00:09:43,360 --> 00:09:45,920
entering the context switching operation

237
00:09:45,920 --> 00:09:49,200
of xtg as you can see

238
00:09:49,200 --> 00:09:52,240
idea register correspond to w20

239
00:09:52,240 --> 00:09:55,440
and the esl register correspond to w19

240
00:09:55,440 --> 00:09:58,240
and so on

241
00:09:59,360 --> 00:10:01,519
next let me explain the update feature

242
00:10:01,519 --> 00:10:03,360
of

243
00:10:03,360 --> 00:10:06,160
as xcache1 said extract update xc cache

244
00:10:06,160 --> 00:10:09,279
file to add newly translated code

245
00:10:09,279 --> 00:10:11,920
in the process the previous translation

246
00:10:11,920 --> 00:10:14,720
result is copied to the new cache file

247
00:10:14,720 --> 00:10:16,839
to reduce the amount of binding

248
00:10:16,839 --> 00:10:18,079
translation

249
00:10:18,079 --> 00:10:20,800
but small part is applied to the

250
00:10:20,800 --> 00:10:22,800
previous translation result

251
00:10:22,800 --> 00:10:25,839
before copying so i'd

252
00:10:25,839 --> 00:10:28,800
expect i don't explain the purpose of

253
00:10:28,800 --> 00:10:30,240
these small parties

254
00:10:30,240 --> 00:10:32,640
so for more details see the appendix of

255
00:10:32,640 --> 00:10:35,120
this material

256
00:10:35,120 --> 00:10:37,920
here so here i show the schematic

257
00:10:37,920 --> 00:10:40,560
picture of xc cashback update

258
00:10:40,560 --> 00:10:44,079
before update the plck start

259
00:10:44,079 --> 00:10:48,240
and translate the code in xc cache file

260
00:10:48,240 --> 00:10:50,640
after updating these two blocks are

261
00:10:50,640 --> 00:10:51,760
copied

262
00:10:51,760 --> 00:10:54,480
to the new cache file with small patches

263
00:10:54,480 --> 00:10:55,040
and

264
00:10:55,040 --> 00:10:57,360
extract as a newly translated code to

265
00:10:57,360 --> 00:10:59,839
the end of previous translation result

266
00:10:59,839 --> 00:11:02,399
like this

267
00:11:02,880 --> 00:11:05,519
but this update process can be prevented

268
00:11:05,519 --> 00:11:08,160
by modifying cashflow header

269
00:11:08,160 --> 00:11:11,440
extract uses pointer to extract link

270
00:11:11,440 --> 00:11:12,800
reset member

271
00:11:12,800 --> 00:11:15,760
for getting the position to be passed so

272
00:11:15,760 --> 00:11:18,160
assigning an invite value to this member

273
00:11:18,160 --> 00:11:21,519
crashes extract and prevent the update

274
00:11:21,519 --> 00:11:23,760
of exec cash file

275
00:11:23,760 --> 00:11:26,399
i know that this change does not affect

276
00:11:26,399 --> 00:11:28,959
the cash flow loading and execution of

277
00:11:28,959 --> 00:11:32,720
x86 application by xclg8

278
00:11:32,720 --> 00:11:35,040
so although embarked value is assigned

279
00:11:35,040 --> 00:11:36,640
to this member

280
00:11:36,640 --> 00:11:41,040
exeget can load this xc cash bar

281
00:11:41,279 --> 00:11:43,519
here let's quickly recap about the xc

282
00:11:43,519 --> 00:11:44,959
cache file

283
00:11:44,959 --> 00:11:48,320
it contains translated arm code without

284
00:11:48,320 --> 00:11:49,839
any observation

285
00:11:49,839 --> 00:11:53,040
and encryption during animation this

286
00:11:53,040 --> 00:11:55,040
cache file is directly mapped to the

287
00:11:55,040 --> 00:11:55,680
memory

288
00:11:55,680 --> 00:11:58,880
with read and execute protection it is

289
00:11:58,880 --> 00:12:01,440
also updated down after emulation

290
00:12:01,440 --> 00:12:03,839
but this update process can be prevented

291
00:12:03,839 --> 00:12:06,480
by motor and cash flow header

292
00:12:06,480 --> 00:12:10,560
also specific cache file header member

293
00:12:10,560 --> 00:12:11,920
is modified

294
00:12:11,920 --> 00:12:15,839
exegete can load this cache file

295
00:12:15,920 --> 00:12:19,040
here let's reconsider the law

296
00:12:19,040 --> 00:12:22,839
translated code exists in excel cache

297
00:12:22,839 --> 00:12:24,480
file if we

298
00:12:24,480 --> 00:12:27,600
modify a code in the xc cache file what

299
00:12:27,600 --> 00:12:30,040
will happen

300
00:12:30,040 --> 00:12:33,120
unfortunately xc cache service

301
00:12:33,120 --> 00:12:35,920
does not check the integrity of xd cache

302
00:12:35,920 --> 00:12:36,399
bar

303
00:12:36,399 --> 00:12:39,920
before loading so if we

304
00:12:39,920 --> 00:12:42,880
modify code in the xc cache file and the

305
00:12:42,880 --> 00:12:43,600
application

306
00:12:43,600 --> 00:12:46,800
runs this modified cache bar

307
00:12:46,800 --> 00:12:49,040
is mapped to the memory with read and

308
00:12:49,040 --> 00:12:50,959
execute protection

309
00:12:50,959 --> 00:12:54,079
and through user animation process

310
00:12:54,079 --> 00:12:56,880
we can execute called in the modified

311
00:12:56,880 --> 00:12:59,360
cache file

312
00:12:59,360 --> 00:13:01,600
and to make methods rules there are no

313
00:13:01,600 --> 00:13:03,680
limitations for the embeddable content

314
00:13:03,680 --> 00:13:05,279
of xc cache1

315
00:13:05,279 --> 00:13:08,399
such as size or encoding so we can embed

316
00:13:08,399 --> 00:13:10,320
shellcode index cache file

317
00:13:10,320 --> 00:13:13,680
online to animation

318
00:13:13,839 --> 00:13:15,920
we are calling this code injection

319
00:13:15,920 --> 00:13:17,040
technique

320
00:13:17,040 --> 00:13:20,720
as xd cache hijacking i know that there

321
00:13:20,720 --> 00:13:23,200
are some limitations to collaborate bis

322
00:13:23,200 --> 00:13:26,000
for shelby

323
00:13:26,240 --> 00:13:29,839
some native appears of dls in system32

324
00:13:29,839 --> 00:13:34,160
are not global such as gdi or weasel

325
00:13:34,160 --> 00:13:37,760
however fbi's or wow 64 layers

326
00:13:37,760 --> 00:13:41,120
are of course global

327
00:13:41,680 --> 00:13:45,199
next let let me explain the features

328
00:13:45,199 --> 00:13:48,160
of the exec cache hijacking there are

329
00:13:48,160 --> 00:13:50,880
three features of execution again

330
00:13:50,880 --> 00:13:53,519
decoding detecting difficulty root cause

331
00:13:53,519 --> 00:13:54,560
analysis

332
00:13:54,560 --> 00:13:58,079
and persistence first this technique is

333
00:13:58,079 --> 00:13:59,600
difficult to detect

334
00:13:59,600 --> 00:14:02,079
because access it to the tag process are

335
00:14:02,079 --> 00:14:03,199
not needed

336
00:14:03,199 --> 00:14:05,600
such as authorization of tagged process

337
00:14:05,600 --> 00:14:07,279
handle

338
00:14:07,279 --> 00:14:10,160
moreover code injection is performed

339
00:14:10,160 --> 00:14:10,720
without

340
00:14:10,720 --> 00:14:14,800
any suspicious api calls so the way we

341
00:14:14,800 --> 00:14:16,880
modify call in the xc cache file and

342
00:14:16,880 --> 00:14:19,040
application lens

343
00:14:19,040 --> 00:14:20,800
modified cache file is mapped to the

344
00:14:20,800 --> 00:14:23,279
memory and the code in the modified

345
00:14:23,279 --> 00:14:24,240
cache file

346
00:14:24,240 --> 00:14:27,760
is executed automatically and this

347
00:14:27,760 --> 00:14:29,920
technique is difficult to analyze its

348
00:14:29,920 --> 00:14:31,120
root cause

349
00:14:31,120 --> 00:14:33,920
so we cannot determine the root cause by

350
00:14:33,920 --> 00:14:34,480
simply

351
00:14:34,480 --> 00:14:38,160
examining the x86 application

352
00:14:38,160 --> 00:14:41,120
here let's consider the simple example

353
00:14:41,120 --> 00:14:42,639
let's consider the

354
00:14:42,639 --> 00:14:45,760
x86 mouse shows let's consider the case

355
00:14:45,760 --> 00:14:46,240
that

356
00:14:46,240 --> 00:14:49,839
x86 mile so the master's activities

357
00:14:49,839 --> 00:14:52,480
and these activities are saved as a log

358
00:14:52,480 --> 00:14:53,680
file

359
00:14:53,680 --> 00:14:56,000
our ancient response team analyzes the

360
00:14:56,000 --> 00:14:57,040
log and

361
00:14:57,040 --> 00:15:00,240
finds the second executable so the

362
00:15:00,240 --> 00:15:02,880
suspicious activities

363
00:15:02,880 --> 00:15:06,560
however he can't find any indicators of

364
00:15:06,560 --> 00:15:09,279
these by simply inspecting this

365
00:15:09,279 --> 00:15:10,480
executable

366
00:15:10,480 --> 00:15:13,199
without examining the exec cashback he

367
00:15:13,199 --> 00:15:16,000
cannot find its root cause

368
00:15:16,000 --> 00:15:18,480
therefore as an effective account

369
00:15:18,480 --> 00:15:20,880
measured to executive gain

370
00:15:20,880 --> 00:15:23,040
monitoring cash flow activities is

371
00:15:23,040 --> 00:15:25,519
essential

372
00:15:25,519 --> 00:15:28,560
and this technique is processed

373
00:15:28,560 --> 00:15:31,519
as exit cache bar so even afterwards

374
00:15:31,519 --> 00:15:32,399
listed

375
00:15:32,399 --> 00:15:36,320
same code is injected to the tag process

376
00:15:36,320 --> 00:15:39,360
as i said updates of exit cache file can

377
00:15:39,360 --> 00:15:40,160
be prevented

378
00:15:40,160 --> 00:15:43,120
by multiplying cash flow header so we

379
00:15:43,120 --> 00:15:44,959
can achieve persistence

380
00:15:44,959 --> 00:15:48,959
by preventing cash flow update

381
00:15:49,360 --> 00:15:52,399
when does not use this technique to

382
00:15:52,399 --> 00:15:53,040
discuss

383
00:15:53,040 --> 00:15:55,279
this let's see the positions in my

384
00:15:55,279 --> 00:15:58,320
dialogue matrix of this technique

385
00:15:58,320 --> 00:16:01,279
this technique can be used to achieve

386
00:16:01,279 --> 00:16:02,720
three tactics

387
00:16:02,720 --> 00:16:05,759
persistence defense evasion credential

388
00:16:05,759 --> 00:16:07,519
access

389
00:16:07,519 --> 00:16:10,079
first this technique can be used as a

390
00:16:10,079 --> 00:16:11,519
processes method

391
00:16:11,519 --> 00:16:13,600
so we can hide martial cell code in the

392
00:16:13,600 --> 00:16:16,639
xc cache file

393
00:16:16,639 --> 00:16:18,959
next this technique can be used to mask

394
00:16:18,959 --> 00:16:20,079
martial's code

395
00:16:20,079 --> 00:16:22,000
so we can learn master's code as a

396
00:16:22,000 --> 00:16:23,440
regiment process

397
00:16:23,440 --> 00:16:28,720
to bypass a broker or antivirus products

398
00:16:29,040 --> 00:16:31,199
and this technique can be used as a

399
00:16:31,199 --> 00:16:32,959
credential access method

400
00:16:32,959 --> 00:16:36,000
so we can inject api hooking code in xc

401
00:16:36,000 --> 00:16:38,079
cache files of dlls

402
00:16:38,079 --> 00:16:41,519
that are used in the browser through

403
00:16:41,519 --> 00:16:43,040
this code injection

404
00:16:43,040 --> 00:16:45,680
we can save credentials or multiply web

405
00:16:45,680 --> 00:16:46,959
pages

406
00:16:46,959 --> 00:16:50,560
i mean this technique can be used

407
00:16:50,560 --> 00:16:54,079
as a part of mitv attack

408
00:16:54,079 --> 00:16:56,800
but you may think that hey exec cache

409
00:16:56,800 --> 00:16:59,120
hijacking seems to be similar to other

410
00:16:59,120 --> 00:17:01,759
commission called injection techniques

411
00:17:01,759 --> 00:17:04,959
what makes subjecting so special

412
00:17:04,959 --> 00:17:08,000
why is it so interesting romans will

413
00:17:08,000 --> 00:17:09,839
answer this question

414
00:17:09,839 --> 00:17:13,280
now i'll hand it over to humans

415
00:17:13,280 --> 00:17:17,359
thank you ok as he explained

416
00:17:17,359 --> 00:17:21,280
it's a new code injection technique

417
00:17:21,280 --> 00:17:24,559
it targets a new proton and it

418
00:17:24,559 --> 00:17:27,599
has three features organized in

419
00:17:27,599 --> 00:17:31,360
might attack good but

420
00:17:31,360 --> 00:17:37,199
that's all so technique was privileged

421
00:17:37,679 --> 00:17:41,600
yes we think so that

422
00:17:44,559 --> 00:17:47,679
please remind that it is realized by

423
00:17:47,679 --> 00:17:48,400
modifying

424
00:17:48,400 --> 00:17:51,840
casual translation result

425
00:17:51,840 --> 00:17:56,960
of course said m64 instructions

426
00:17:56,960 --> 00:18:00,000
not x86 although

427
00:18:00,000 --> 00:18:05,039
we are targeting x86 processes

428
00:18:05,200 --> 00:18:07,360
in just a word we can change the

429
00:18:07,360 --> 00:18:10,720
behavior of x86 processes

430
00:18:10,720 --> 00:18:14,320
without any modification to x86

431
00:18:14,320 --> 00:18:18,640
instructions funny

432
00:18:18,640 --> 00:18:21,840
what's happening x86

433
00:18:21,840 --> 00:18:25,520
instructions are loaded on memory but

434
00:18:25,520 --> 00:18:30,880
the cpu can not execute them directly

435
00:18:30,880 --> 00:18:34,720
and x86 instructions only reference

436
00:18:34,720 --> 00:18:38,520
it when translating them into

437
00:18:38,520 --> 00:18:41,520
m64

438
00:18:41,520 --> 00:18:44,320
and they are not referenced if already

439
00:18:44,320 --> 00:18:46,160
cache exists

440
00:18:46,160 --> 00:18:50,799
so the instructions in the cache

441
00:18:50,799 --> 00:18:54,160
will be executed even if the behavior of

442
00:18:54,160 --> 00:18:54,960
the cache

443
00:18:54,960 --> 00:19:00,400
and the original code actually different

444
00:19:03,760 --> 00:19:06,960
so this technique has

445
00:19:06,960 --> 00:19:10,160
a side effect uh

446
00:19:10,160 --> 00:19:13,200
as a result execution all payrolls

447
00:19:13,200 --> 00:19:16,799
is invisible to x86 layer

448
00:19:16,799 --> 00:19:20,480
and this caused by two things

449
00:19:20,480 --> 00:19:23,919
first there are no changes for x86

450
00:19:23,919 --> 00:19:25,760
instructions on memory

451
00:19:25,760 --> 00:19:28,880
as we already explained

452
00:19:28,880 --> 00:19:32,160
second the execution state

453
00:19:32,160 --> 00:19:38,080
on m64 layer is invisible to x86 layer

454
00:19:38,080 --> 00:19:41,360
so even if you following the execution

455
00:19:41,360 --> 00:19:44,880
as the broadcast step by step

456
00:19:44,880 --> 00:19:48,000
you can see just only execution of

457
00:19:48,000 --> 00:19:53,280
unmodified x86 instructions

458
00:19:53,280 --> 00:19:56,720
so the execution of the payload

459
00:19:56,720 --> 00:20:00,000
is invisible we call that

460
00:20:00,000 --> 00:20:03,200
invisible execution

461
00:20:03,679 --> 00:20:08,720
here's an example to illustrate this

462
00:20:09,840 --> 00:20:15,120
this is a program actually do nothing

463
00:20:17,120 --> 00:20:22,320
it has only jump code

464
00:20:23,840 --> 00:20:27,678
and destination is

465
00:20:29,039 --> 00:20:32,640
instructions with no meaning but it will

466
00:20:32,640 --> 00:20:33,520
show

467
00:20:33,520 --> 00:20:39,280
readers in console checking the cache

468
00:20:39,520 --> 00:20:42,640
interesting but is it

469
00:20:42,640 --> 00:20:46,240
useful ok let's talk about

470
00:20:46,240 --> 00:20:49,840
use cases

471
00:20:50,880 --> 00:20:55,200
one of them is api works

472
00:20:55,200 --> 00:20:57,760
it is very useful technique for

473
00:20:57,760 --> 00:20:58,720
inspection

474
00:20:58,720 --> 00:21:02,720
changing behaviors and so on but

475
00:21:02,720 --> 00:21:05,919
it is easy to detect because it is

476
00:21:05,919 --> 00:21:07,120
impressive

477
00:21:07,120 --> 00:21:11,200
it always gives some choices

478
00:21:11,200 --> 00:21:14,480
for example called is commonly used

479
00:21:14,480 --> 00:21:15,440
technique

480
00:21:15,440 --> 00:21:18,400
it rewrites instructions at the

481
00:21:18,400 --> 00:21:20,320
beginning of the function

482
00:21:20,320 --> 00:21:24,240
and so we can detect this

483
00:21:24,240 --> 00:21:27,200
and check the instructions at the

484
00:21:27,200 --> 00:21:31,840
beginning of the function

485
00:21:31,840 --> 00:21:35,520
but we can avoid the detection like this

486
00:21:35,520 --> 00:21:39,840
or tracing with our method

487
00:21:39,840 --> 00:21:45,280
invisible execution

488
00:21:45,280 --> 00:21:49,520
chpd allows a good hook point

489
00:21:49,520 --> 00:21:52,640
to do this there are

490
00:21:52,640 --> 00:21:55,960
bridge dlls between x86 and

491
00:21:55,960 --> 00:22:00,400
m64 they're using x86 processors on

492
00:22:00,400 --> 00:22:02,640
windows 01

493
00:22:02,640 --> 00:22:06,000
they exist for some deals we're going to

494
00:22:06,000 --> 00:22:06,880
use

495
00:22:06,880 --> 00:22:10,720
like canon 32 and etc

496
00:22:10,720 --> 00:22:14,080
most of the point is

497
00:22:14,080 --> 00:22:18,158
called bosch hp dls

498
00:22:20,320 --> 00:22:24,159
and this is most important

499
00:22:24,159 --> 00:22:28,000
did they has they have x86

500
00:22:28,000 --> 00:22:31,520
tab calls for each api of course

501
00:22:31,520 --> 00:22:37,200
cache generated for these these apis

502
00:22:37,200 --> 00:22:40,799
so we can apply the technique

503
00:22:40,799 --> 00:22:44,559
to these dlls and use for

504
00:22:44,559 --> 00:22:47,200
hook point

505
00:22:47,840 --> 00:22:51,440
conclusion we provided

506
00:22:51,440 --> 00:22:53,840
technical details about new code

507
00:22:53,840 --> 00:22:55,919
injection technique for windows 10

508
00:22:55,919 --> 00:23:00,720
on it exploits the caching xts8

509
00:23:00,720 --> 00:23:04,480
and it has three features

510
00:23:04,799 --> 00:23:09,440
organized in might attack

511
00:23:09,440 --> 00:23:13,840
and it has a unique side effect

512
00:23:13,840 --> 00:23:17,840
because it exploits this target

513
00:23:18,159 --> 00:23:22,000
what have to do based on this for

514
00:23:22,000 --> 00:23:23,280
developers

515
00:23:23,280 --> 00:23:27,200
or similar system you may have to do

516
00:23:27,200 --> 00:23:30,000
similar to

517
00:23:30,240 --> 00:23:34,960
execute and it will be

518
00:23:34,960 --> 00:23:38,320
interesting target for takers

519
00:23:38,320 --> 00:23:42,799
so please ensure the integrity of

520
00:23:42,799 --> 00:23:46,720
the cash this technique requires

521
00:23:46,720 --> 00:23:47,440
privilege

522
00:23:47,440 --> 00:23:51,760
but still was facing

523
00:23:51,760 --> 00:23:56,400
for everyone be aware of the threat

524
00:23:56,400 --> 00:23:59,840
it will be difficult to find uh

525
00:23:59,840 --> 00:24:02,880
using this technique on first i

526
00:24:02,880 --> 00:24:06,240
think so

527
00:24:06,240 --> 00:24:09,279
please be our

528
00:24:11,360 --> 00:24:14,880
plc code and summarize tools about what

529
00:24:14,880 --> 00:24:18,640
here one more thing

530
00:24:18,640 --> 00:24:23,120
we can use the cash for another purpose

531
00:24:23,120 --> 00:24:26,720
the cash generated for

532
00:24:26,720 --> 00:24:30,080
only the pass actually went through

533
00:24:30,080 --> 00:24:33,679
so we can find out the path actor is

534
00:24:33,679 --> 00:24:38,640
executed from the existence of the cache

535
00:24:39,679 --> 00:24:42,720
there are two use cases first

536
00:24:42,720 --> 00:24:45,360
dynamic but non-invasive coverage

537
00:24:45,360 --> 00:24:46,720
measurement

538
00:24:46,720 --> 00:24:49,919
it may be good for fuzzing

539
00:24:49,919 --> 00:24:52,400
second

540
00:24:53,279 --> 00:24:57,360
it can be useful for analysis during

541
00:24:57,360 --> 00:25:01,440
instant response for example

542
00:25:01,440 --> 00:25:05,760
if you want to know about

543
00:25:06,480 --> 00:25:09,679
which command did rod executed in your

544
00:25:09,679 --> 00:25:13,039
environment without communication logs

545
00:25:13,039 --> 00:25:16,559
it can help you therefore this will

546
00:25:16,559 --> 00:25:19,760
also be available

547
00:25:19,760 --> 00:25:24,000
thank you for listening

