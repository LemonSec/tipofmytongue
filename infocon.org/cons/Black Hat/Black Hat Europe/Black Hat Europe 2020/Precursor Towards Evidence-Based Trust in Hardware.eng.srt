1
00:00:01,180 --> 00:00:12,799
[Music]

2
00:00:12,799 --> 00:00:14,960
welcome back to black hat europe

3
00:00:14,960 --> 00:00:16,560
our program will commence shortly with

4
00:00:16,560 --> 00:00:18,080
some opening remarks from jeff

5
00:00:18,080 --> 00:00:20,400
moss followed by our keynote speaker

6
00:00:20,400 --> 00:00:22,160
andrew wang

7
00:00:22,160 --> 00:00:24,160
black hat would not be possible without

8
00:00:24,160 --> 00:00:25,840
the support of so many people

9
00:00:25,840 --> 00:00:27,680
especially this year as we've all been

10
00:00:27,680 --> 00:00:29,679
impacted by the global pandemic

11
00:00:29,679 --> 00:00:31,760
and have had to rethink our entire event

12
00:00:31,760 --> 00:00:33,920
in a virtual format

13
00:00:33,920 --> 00:00:35,680
i would like to thank our sustaining

14
00:00:35,680 --> 00:00:37,840
partners our global sponsors

15
00:00:37,840 --> 00:00:39,760
and all of our black cat europe sponsors

16
00:00:39,760 --> 00:00:41,760
for their ongoing support

17
00:00:41,760 --> 00:00:43,360
i encourage you to connect with them in

18
00:00:43,360 --> 00:00:45,120
the business hall and explore the many

19
00:00:45,120 --> 00:00:47,440
free resources they have provided

20
00:00:47,440 --> 00:00:49,280
i encourage you to attend their sessions

21
00:00:49,280 --> 00:00:52,079
which are open to all attendees

22
00:00:52,079 --> 00:00:54,239
to our black hat review boards for our

23
00:00:54,239 --> 00:00:57,199
trainings briefings and arsenal programs

24
00:00:57,199 --> 00:00:59,359
we thank you for your tireless effort in

25
00:00:59,359 --> 00:01:01,680
building this program

26
00:01:01,680 --> 00:01:03,440
thank you to all of our speakers for

27
00:01:03,440 --> 00:01:05,119
their eagerness to embrace

28
00:01:05,119 --> 00:01:08,560
this online format some housekeeping

29
00:01:08,560 --> 00:01:10,240
before we begin

30
00:01:10,240 --> 00:01:12,479
be sure to download your copy of cyber

31
00:01:12,479 --> 00:01:14,720
threats in turbulent times a report we

32
00:01:14,720 --> 00:01:16,640
just published from the annual black hat

33
00:01:16,640 --> 00:01:18,240
attendee survey

34
00:01:18,240 --> 00:01:20,320
the survey and report were developed by

35
00:01:20,320 --> 00:01:21,920
our colleagues at dark reading

36
00:01:21,920 --> 00:01:23,520
and is available for download in the

37
00:01:23,520 --> 00:01:26,240
dark reading booth in the business hall

38
00:01:26,240 --> 00:01:28,320
if you would like more market research i

39
00:01:28,320 --> 00:01:29,920
invite you to visit omnia

40
00:01:29,920 --> 00:01:31,680
our newly rebranded research and

41
00:01:31,680 --> 00:01:33,040
consulting business

42
00:01:33,040 --> 00:01:34,799
who are now available in the business

43
00:01:34,799 --> 00:01:36,799
hall

44
00:01:36,799 --> 00:01:38,640
as we kick off today's program i would

45
00:01:38,640 --> 00:01:40,000
like to thank all of you

46
00:01:40,000 --> 00:01:42,240
for attending black hat this year and to

47
00:01:42,240 --> 00:01:43,520
remind you that the same

48
00:01:43,520 --> 00:01:45,200
content will be available to you on

49
00:01:45,200 --> 00:01:47,360
demand for 30 days in the virtual event

50
00:01:47,360 --> 00:01:48,560
platform

51
00:01:48,560 --> 00:01:51,040
we encourage you to come back and visit

52
00:01:51,040 --> 00:01:53,680
the content at your own pace

53
00:01:53,680 --> 00:01:56,079
it's now my pleasure to welcome back the

54
00:01:56,079 --> 00:01:57,439
dark tangent

55
00:01:57,439 --> 00:02:00,320
jeff moss

56
00:02:00,560 --> 00:02:02,719
welcome back and it's only been a few

57
00:02:02,719 --> 00:02:03,600
minutes for me

58
00:02:03,600 --> 00:02:05,439
but a full day for you it's time to kick

59
00:02:05,439 --> 00:02:08,318
off day two of black hat europe 2020

60
00:02:08,318 --> 00:02:11,360
virtual event and with day 2 we have a

61
00:02:11,360 --> 00:02:12,160
keynote

62
00:02:12,160 --> 00:02:14,879
andrew bunny huang a prolific hardware

63
00:02:14,879 --> 00:02:16,000
hacker best known

64
00:02:16,000 --> 00:02:19,200
for his xbox security hack

65
00:02:19,200 --> 00:02:21,280
and for me it was a very pivotal moment

66
00:02:21,280 --> 00:02:22,400
because

67
00:02:22,400 --> 00:02:25,360
when when bunny broke the xbox at the

68
00:02:25,360 --> 00:02:26,000
time

69
00:02:26,000 --> 00:02:30,480
that was seen as undoable impossible

70
00:02:30,480 --> 00:02:32,480
but the moment he did it it opened up a

71
00:02:32,480 --> 00:02:33,920
world of possibilities

72
00:02:33,920 --> 00:02:35,360
it showed that researchers could

73
00:02:35,360 --> 00:02:37,680
approach some of these black box systems

74
00:02:37,680 --> 00:02:40,239
and really understand them and that was

75
00:02:40,239 --> 00:02:41,440
what was so inspiring

76
00:02:41,440 --> 00:02:43,120
and kicked off a whole nother generation

77
00:02:43,120 --> 00:02:45,120
of hardware hackers

78
00:02:45,120 --> 00:02:46,640
now since then bunny's been really busy

79
00:02:46,640 --> 00:02:48,000
doing a lot of things he's been involved

80
00:02:48,000 --> 00:02:49,280
not only in security but he's been

81
00:02:49,280 --> 00:02:50,080
involved

82
00:02:50,080 --> 00:02:52,959
in the open hardware space he's been

83
00:02:52,959 --> 00:02:54,800
open source software space he's been

84
00:02:54,800 --> 00:02:57,920
giving talks all around the world and

85
00:02:57,920 --> 00:02:59,360
one of the things i find most inspiring

86
00:02:59,360 --> 00:03:01,599
about bunny is not only his involvement

87
00:03:01,599 --> 00:03:02,720
in open source

88
00:03:02,720 --> 00:03:05,040
and creating hands-on products like say

89
00:03:05,040 --> 00:03:05,840
the the

90
00:03:05,840 --> 00:03:07,599
chibitronics which is uh a

91
00:03:07,599 --> 00:03:09,120
peel-and-stick electronic

92
00:03:09,120 --> 00:03:12,319
sort of crafting application or the

93
00:03:12,319 --> 00:03:12,879
chumby

94
00:03:12,879 --> 00:03:15,840
which is an app plane alarm clock he got

95
00:03:15,840 --> 00:03:16,800
into things that were

96
00:03:16,800 --> 00:03:20,159
also very accessible for the

97
00:03:20,159 --> 00:03:22,720
end user like a do-it-yourself laptop

98
00:03:22,720 --> 00:03:23,760
remember when you could

99
00:03:23,760 --> 00:03:26,319
sort of buy and build your own radio or

100
00:03:26,319 --> 00:03:27,760
buy and build components

101
00:03:27,760 --> 00:03:29,760
sort of to build your own car change the

102
00:03:29,760 --> 00:03:31,360
way you want to make it

103
00:03:31,360 --> 00:03:33,599
when we got to electronics it was really

104
00:03:33,599 --> 00:03:34,959
one size fits all

105
00:03:34,959 --> 00:03:36,319
you get what they're selling and you

106
00:03:36,319 --> 00:03:38,159
don't get to change it and bunny has

107
00:03:38,159 --> 00:03:39,519
been really trying to change that

108
00:03:39,519 --> 00:03:40,400
mindset

109
00:03:40,400 --> 00:03:42,560
by making it your hardware where you can

110
00:03:42,560 --> 00:03:43,760
make the changes

111
00:03:43,760 --> 00:03:45,840
and it's do it yourself right and that

112
00:03:45,840 --> 00:03:47,360
inspires a new way of thinking more

113
00:03:47,360 --> 00:03:51,280
more creativity now bunny got his degree

114
00:03:51,280 --> 00:03:53,280
from mit in 2002

115
00:03:53,280 --> 00:03:55,200
he currently lives in singapore where he

116
00:03:55,200 --> 00:03:56,879
runs a private product company

117
00:03:56,879 --> 00:03:59,760
called kasagi and he actively mentors

118
00:03:59,760 --> 00:04:01,519
students and startups

119
00:04:01,519 --> 00:04:03,920
so you can see he's very active in

120
00:04:03,920 --> 00:04:05,200
sharing his knowledge and if you look at

121
00:04:05,200 --> 00:04:06,159
the history

122
00:04:06,159 --> 00:04:09,200
pretty prolific in all areas of

123
00:04:09,200 --> 00:04:10,400
production and i find that very

124
00:04:10,400 --> 00:04:12,080
inspiring

125
00:04:12,080 --> 00:04:14,080
he gave this great series on youtube

126
00:04:14,080 --> 00:04:16,079
which was called getting it made stories

127
00:04:16,079 --> 00:04:17,358
from shenzhen

128
00:04:17,358 --> 00:04:19,440
maybe seven years ago when it came out

129
00:04:19,440 --> 00:04:20,880
and it lifted the curtain

130
00:04:20,880 --> 00:04:22,479
and you can peek behind and see how

131
00:04:22,479 --> 00:04:23,919
hardware is being made

132
00:04:23,919 --> 00:04:25,840
what it took to sort of make the sausage

133
00:04:25,840 --> 00:04:27,759
in china and to me it was really

134
00:04:27,759 --> 00:04:29,680
revelatory because

135
00:04:29,680 --> 00:04:31,040
you kind of know how things are done in

136
00:04:31,040 --> 00:04:32,479
the states but once you see how it's

137
00:04:32,479 --> 00:04:33,040
done

138
00:04:33,040 --> 00:04:35,280
sort of at the street level bunny going

139
00:04:35,280 --> 00:04:37,040
door to door figuring it out

140
00:04:37,040 --> 00:04:39,520
that was really cool again making the

141
00:04:39,520 --> 00:04:42,160
technology very approachable now in

142
00:04:42,160 --> 00:04:42,880
bunny's

143
00:04:42,880 --> 00:04:44,800
keynote today he's going to be talking

144
00:04:44,800 --> 00:04:46,639
about another subject harkening back to

145
00:04:46,639 --> 00:04:47,919
sort of his origin

146
00:04:47,919 --> 00:04:51,759
right towards evidence-based trust

147
00:04:51,759 --> 00:04:54,880
in hardware because you're finding

148
00:04:54,880 --> 00:04:56,400
whether it's an automobile or a

149
00:04:56,400 --> 00:04:58,240
satellite we're trusting this hardware

150
00:04:58,240 --> 00:04:59,520
more and more

151
00:04:59,520 --> 00:05:01,759
and i think we need more and more eyes

152
00:05:01,759 --> 00:05:03,600
on that hardware to understand what's

153
00:05:03,600 --> 00:05:04,560
really going on

154
00:05:04,560 --> 00:05:07,280
so really looking forward to what bunny

155
00:05:07,280 --> 00:05:08,720
has to say

156
00:05:08,720 --> 00:05:12,080
over to you bunny hello everyone and uh

157
00:05:12,080 --> 00:05:13,280
thanks for tuning in

158
00:05:13,280 --> 00:05:15,919
uh it's my pleasure and honor to be uh

159
00:05:15,919 --> 00:05:17,280
here talking to you at

160
00:05:17,280 --> 00:05:20,320
black hat europe 2020 if not virtually

161
00:05:20,320 --> 00:05:21,919
and i'd like to take the opportunity

162
00:05:21,919 --> 00:05:23,600
today to talk to you a bit about

163
00:05:23,600 --> 00:05:26,400
evidence-based trust for hardware and

164
00:05:26,400 --> 00:05:28,080
particularly in a context of a project

165
00:05:28,080 --> 00:05:29,520
i've been working on for the past couple

166
00:05:29,520 --> 00:05:30,320
years

167
00:05:30,320 --> 00:05:33,680
called precursor so um let's talk a bit

168
00:05:33,680 --> 00:05:34,080
about

169
00:05:34,080 --> 00:05:36,320
trust in a broader sense first with the

170
00:05:36,320 --> 00:05:38,479
question of do you trust your phone

171
00:05:38,479 --> 00:05:40,560
and if you do why or if you don't why

172
00:05:40,560 --> 00:05:41,520
not

173
00:05:41,520 --> 00:05:43,600
um when we think about trust in the

174
00:05:43,600 --> 00:05:45,360
context of our gadgets

175
00:05:45,360 --> 00:05:47,759
and software we have this bias that we

176
00:05:47,759 --> 00:05:48,560
think that maybe

177
00:05:48,560 --> 00:05:51,280
open is more trustable and why do we

178
00:05:51,280 --> 00:05:52,000
have that bias

179
00:05:52,000 --> 00:05:54,000
is it because open source means we can

180
00:05:54,000 --> 00:05:55,280
read the source actually

181
00:05:55,280 --> 00:05:57,440
or that we can compile our programs from

182
00:05:57,440 --> 00:05:58,800
source and we do that every single time

183
00:05:58,800 --> 00:06:00,400
we want to update our browser

184
00:06:00,400 --> 00:06:01,680
the answer is no we don't have enough

185
00:06:01,680 --> 00:06:03,520
time in the day to do all that the

186
00:06:03,520 --> 00:06:04,400
reason why

187
00:06:04,400 --> 00:06:06,000
there is sort of a bias towards feeling

188
00:06:06,000 --> 00:06:08,000
that more open is more trustable is that

189
00:06:08,000 --> 00:06:10,080
we have evidence-based tools

190
00:06:10,080 --> 00:06:11,919
to transfer trust in software things

191
00:06:11,919 --> 00:06:13,280
like hashing uh

192
00:06:13,280 --> 00:06:16,560
signing in uh merkle trees

193
00:06:16,560 --> 00:06:18,240
so just very quickly you know hashing

194
00:06:18,240 --> 00:06:20,560
allows us to take a really huge file

195
00:06:20,560 --> 00:06:22,800
and summarize it into a short sequence

196
00:06:22,800 --> 00:06:24,160
of symbols and if

197
00:06:24,160 --> 00:06:25,680
even a tiny change happens in that file

198
00:06:25,680 --> 00:06:27,280
there's a very big change in the output

199
00:06:27,280 --> 00:06:28,080
sequence

200
00:06:28,080 --> 00:06:29,600
and then signing allows us to go ahead

201
00:06:29,600 --> 00:06:30,960
and take that sequence of symbols and

202
00:06:30,960 --> 00:06:32,400
make it hard to tamper with

203
00:06:32,400 --> 00:06:34,560
this means if someone hands you a file

204
00:06:34,560 --> 00:06:36,479
you can very easily verify that it has

205
00:06:36,479 --> 00:06:37,759
been tampered with and that it's

206
00:06:37,759 --> 00:06:39,199
actually the thing that the

207
00:06:39,199 --> 00:06:42,160
the person meant to send to you so in

208
00:06:42,160 --> 00:06:43,039
software

209
00:06:43,039 --> 00:06:44,720
we can transfer trust and it means that

210
00:06:44,720 --> 00:06:46,560
the place of check is near the place of

211
00:06:46,560 --> 00:06:47,199
use

212
00:06:47,199 --> 00:06:48,560
if we were to sort of look at the

213
00:06:48,560 --> 00:06:50,400
overall um

214
00:06:50,400 --> 00:06:53,280
flow for doing software um this here it

215
00:06:53,280 --> 00:06:54,240
sort of represents

216
00:06:54,240 --> 00:06:56,560
the life cycle of software development

217
00:06:56,560 --> 00:06:58,319
if we start with developers you can see

218
00:06:58,319 --> 00:06:59,919
these guys down here they'll commit

219
00:06:59,919 --> 00:07:02,319
their code to some managed repository

220
00:07:02,319 --> 00:07:03,759
like git which has a you know

221
00:07:03,759 --> 00:07:05,759
in in the case of yet like a merkle tree

222
00:07:05,759 --> 00:07:07,039
structure to make sure people haven't

223
00:07:07,039 --> 00:07:08,240
tampered with commits

224
00:07:08,240 --> 00:07:10,000
it's then sent to a build computer and

225
00:07:10,000 --> 00:07:11,440
then someone who's trusted goes ahead

226
00:07:11,440 --> 00:07:12,639
and signs the binary

227
00:07:12,639 --> 00:07:14,000
and that binder can be distributed

228
00:07:14,000 --> 00:07:16,160
widely to end users who then verify

229
00:07:16,160 --> 00:07:17,919
at the end of the day and the point is

230
00:07:17,919 --> 00:07:20,080
is that if even if we have adversaries

231
00:07:20,080 --> 00:07:20,800
who can

232
00:07:20,800 --> 00:07:23,120
go ahead and tamper with for example the

233
00:07:23,120 --> 00:07:24,000
cdn

234
00:07:24,000 --> 00:07:25,520
or maybe able to tamper with the build

235
00:07:25,520 --> 00:07:27,520
computers we have the ability to go

236
00:07:27,520 --> 00:07:28,720
ahead and lock them out

237
00:07:28,720 --> 00:07:32,400
with these types of techniques

238
00:07:32,400 --> 00:07:34,560
furthermore we have the ability with

239
00:07:34,560 --> 00:07:36,160
open source to go ahead and audit the

240
00:07:36,160 --> 00:07:38,319
code to go ahead and say okay do we have

241
00:07:38,319 --> 00:07:39,280
any

242
00:07:39,280 --> 00:07:40,800
tampers or modifications or do we have

243
00:07:40,800 --> 00:07:42,319
reproducible builds and has anything

244
00:07:42,319 --> 00:07:43,440
changed since the last time we've

245
00:07:43,440 --> 00:07:44,160
checked

246
00:07:44,160 --> 00:07:45,440
so at the end of the day we have these

247
00:07:45,440 --> 00:07:47,199
tools to transfer trust and

248
00:07:47,199 --> 00:07:49,039
and create the feeling that we we have

249
00:07:49,039 --> 00:07:50,400
more trust in our

250
00:07:50,400 --> 00:07:52,800
um in our software and in the in the

251
00:07:52,800 --> 00:07:55,120
infrastructure that we're using

252
00:07:55,120 --> 00:07:56,560
now when talking about trust and

253
00:07:56,560 --> 00:07:58,160
hardware uh you know

254
00:07:58,160 --> 00:07:59,759
what do we have in terms of evidence

255
00:07:59,759 --> 00:08:01,919
there and it turns out that for hardware

256
00:08:01,919 --> 00:08:03,440
it's actually a time of check time of

257
00:08:03,440 --> 00:08:05,360
use a talk to problem all the way down

258
00:08:05,360 --> 00:08:06,639
the supply chain

259
00:08:06,639 --> 00:08:08,479
so you know to sort of frame that let's

260
00:08:08,479 --> 00:08:09,759
talk about

261
00:08:09,759 --> 00:08:11,919
an exact actual example let's say you

262
00:08:11,919 --> 00:08:13,120
the user and

263
00:08:13,120 --> 00:08:14,080
what kinds of problems you might

264
00:08:14,080 --> 00:08:15,919
encounter in a in the hardware supply

265
00:08:15,919 --> 00:08:16,319
chain

266
00:08:16,319 --> 00:08:18,319
there's always the possibility of evil

267
00:08:18,319 --> 00:08:19,840
maids but we're not going to go ahead

268
00:08:19,840 --> 00:08:21,360
and spend a lot of time on that

269
00:08:21,360 --> 00:08:22,400
we're actually going to talk a little

270
00:08:22,400 --> 00:08:24,720
bit more about just everyday things like

271
00:08:24,720 --> 00:08:27,199
buying stuff from a distributor that

272
00:08:27,199 --> 00:08:29,280
comes via courier if you go to amazon or

273
00:08:29,280 --> 00:08:30,319
something and you buy

274
00:08:30,319 --> 00:08:31,680
from a warehouse and it gets delivered

275
00:08:31,680 --> 00:08:33,919
to you it goes to a courier and we

276
00:08:33,919 --> 00:08:35,760
actually have document evidence that you

277
00:08:35,760 --> 00:08:36,320
know some

278
00:08:36,320 --> 00:08:38,399
agencies some government agencies and

279
00:08:38,399 --> 00:08:40,479
are able to redirect packages and

280
00:08:40,479 --> 00:08:42,320
put implants inside of hardware unroute

281
00:08:42,320 --> 00:08:45,519
from the distrib distributor to you

282
00:08:45,519 --> 00:08:47,200
even if you aren't a government agency

283
00:08:47,200 --> 00:08:48,880
there are simple hacks that users can

284
00:08:48,880 --> 00:08:50,240
use to go ahead and get

285
00:08:50,240 --> 00:08:52,800
malicious awares into the supply chain

286
00:08:52,800 --> 00:08:54,480
so for example uh you know

287
00:08:54,480 --> 00:08:56,640
other customers can go ahead and just

288
00:08:56,640 --> 00:08:58,160
buy stuff in the geographic region of

289
00:08:58,160 --> 00:08:59,279
the distributor

290
00:08:59,279 --> 00:09:00,720
uh go ahead and load malware into

291
00:09:00,720 --> 00:09:02,640
devices and then go ahead and submit

292
00:09:02,640 --> 00:09:04,080
them as returns back to the warehouse

293
00:09:04,080 --> 00:09:05,360
oftentimes the warehouse doesn't

294
00:09:05,360 --> 00:09:06,399
actually check the

295
00:09:06,399 --> 00:09:08,080
the the returns very carefully and

296
00:09:08,080 --> 00:09:09,440
they're happy to redistribute them to

297
00:09:09,440 --> 00:09:10,959
end customers at the end of the day

298
00:09:10,959 --> 00:09:12,240
which means that you can now get

299
00:09:12,240 --> 00:09:14,320
implants into the supply chain

300
00:09:14,320 --> 00:09:17,040
um now you know people say well what

301
00:09:17,040 --> 00:09:18,560
about tamper evidence stickers and what

302
00:09:18,560 --> 00:09:19,760
about you know sort of temporary

303
00:09:19,760 --> 00:09:21,279
packaging it turns out these things are

304
00:09:21,279 --> 00:09:23,040
bypassable there's some good talks that

305
00:09:23,040 --> 00:09:23,360
have

306
00:09:23,360 --> 00:09:25,040
they have touched upon that and if you

307
00:09:25,040 --> 00:09:26,800
know the right people you can just buy

308
00:09:26,800 --> 00:09:28,320
tamper evidence stickers that are a

309
00:09:28,320 --> 00:09:30,560
reasonable facsimile of the ones that

310
00:09:30,560 --> 00:09:33,440
are shipped with the product so that's

311
00:09:33,440 --> 00:09:35,200
sort of at the local local level

312
00:09:35,200 --> 00:09:36,720
but then we also have sort of the bigger

313
00:09:36,720 --> 00:09:38,240
problem that you know the supply chain

314
00:09:38,240 --> 00:09:38,640
goes

315
00:09:38,640 --> 00:09:40,399
you know transnational goes overseas you

316
00:09:40,399 --> 00:09:42,000
have customs officers who

317
00:09:42,000 --> 00:09:43,680
by default have the ability to open

318
00:09:43,680 --> 00:09:45,279
packages and look at them we have

319
00:09:45,279 --> 00:09:47,040
factories that are in places we don't

320
00:09:47,040 --> 00:09:48,480
know and if you just cut to the chase

321
00:09:48,480 --> 00:09:49,920
and go all the way back to sort of the

322
00:09:49,920 --> 00:09:51,279
chip design side

323
00:09:51,279 --> 00:09:53,040
the product design side all the

324
00:09:53,040 --> 00:09:54,720
distributors and packaging intermediate

325
00:09:54,720 --> 00:09:56,399
middlemen it's a huge attack surface and

326
00:09:56,399 --> 00:09:57,760
every single touch point

327
00:09:57,760 --> 00:09:59,279
is an opportunity for someone to go

328
00:09:59,279 --> 00:10:01,200
ahead and inject something into the

329
00:10:01,200 --> 00:10:02,720
supply chain

330
00:10:02,720 --> 00:10:04,240
and so the question is can open source

331
00:10:04,240 --> 00:10:05,680
save us can we use essentially the same

332
00:10:05,680 --> 00:10:07,040
techniques we use in software to go

333
00:10:07,040 --> 00:10:08,720
ahead and secure the supply chain

334
00:10:08,720 --> 00:10:10,560
if you go ahead and you lay in well you

335
00:10:10,560 --> 00:10:12,079
know the position of developers

336
00:10:12,079 --> 00:10:13,279
on the supply chain they're here on the

337
00:10:13,279 --> 00:10:14,800
left-hand side they drop into this big

338
00:10:14,800 --> 00:10:16,079
supply chain

339
00:10:16,079 --> 00:10:18,000
um you know we can have continuous

340
00:10:18,000 --> 00:10:19,519
integration checks we have an open

341
00:10:19,519 --> 00:10:21,519
design kit we can have open pcb designs

342
00:10:21,519 --> 00:10:22,480
but the problem is

343
00:10:22,480 --> 00:10:25,760
in between the developers and uh you

344
00:10:25,760 --> 00:10:27,279
there's a huge amount of

345
00:10:27,279 --> 00:10:28,640
middlemen that the package will go

346
00:10:28,640 --> 00:10:30,399
through at the end of the day there's

347
00:10:30,399 --> 00:10:31,360
been a lot of talk

348
00:10:31,360 --> 00:10:33,200
uh about things like trusted fabs and

349
00:10:33,200 --> 00:10:34,880
sort of bringing factories into

350
00:10:34,880 --> 00:10:36,000
sovereign territory

351
00:10:36,000 --> 00:10:37,600
and i would argue that's actually only a

352
00:10:37,600 --> 00:10:39,040
marginal improvement because you still

353
00:10:39,040 --> 00:10:40,240
have the problem of

354
00:10:40,240 --> 00:10:41,440
you know sort of the distributor of the

355
00:10:41,440 --> 00:10:43,519
courier and returns you have individual

356
00:10:43,519 --> 00:10:45,040
citizens who can enter sovereign

357
00:10:45,040 --> 00:10:46,000
territories order

358
00:10:46,000 --> 00:10:48,560
things in the in a territory of interest

359
00:10:48,560 --> 00:10:49,200
buy them

360
00:10:49,200 --> 00:10:50,399
implant them return them to the

361
00:10:50,399 --> 00:10:52,000
distributors and they may end up in the

362
00:10:52,000 --> 00:10:53,519
computers and hands of targets of

363
00:10:53,519 --> 00:10:55,279
interest

364
00:10:55,279 --> 00:10:56,959
so the big problem at the end of the day

365
00:10:56,959 --> 00:10:58,320
is that you just can't

366
00:10:58,320 --> 00:10:59,839
hash hardware you don't have a

367
00:10:59,839 --> 00:11:02,320
convenient easy to use method to confirm

368
00:11:02,320 --> 00:11:03,760
the correctness of hardware before you

369
00:11:03,760 --> 00:11:04,320
use it

370
00:11:04,320 --> 00:11:06,720
so hardware is in fact just one big talk

371
00:11:06,720 --> 00:11:08,160
to problem all the way down the supply

372
00:11:08,160 --> 00:11:09,600
chain

373
00:11:09,600 --> 00:11:11,519
now people will say but bunny you once

374
00:11:11,519 --> 00:11:12,959
said there's always a bigger microscope

375
00:11:12,959 --> 00:11:14,560
you can always like look inside hardware

376
00:11:14,560 --> 00:11:15,680
and find the secrets there's no such

377
00:11:15,680 --> 00:11:17,200
thing as hiding secrets harder and this

378
00:11:17,200 --> 00:11:18,000
is true

379
00:11:18,000 --> 00:11:19,120
there are even techniques like

380
00:11:19,120 --> 00:11:21,040
tychographic x-ray imaging

381
00:11:21,040 --> 00:11:23,040
which are non-destructive allow 3d

382
00:11:23,040 --> 00:11:24,720
imaging of very complex chips

383
00:11:24,720 --> 00:11:26,079
and they're very good for reverse

384
00:11:26,079 --> 00:11:28,160
engineering and design verification

385
00:11:28,160 --> 00:11:29,920
the problem with this is that it's

386
00:11:29,920 --> 00:11:31,839
literally a building size light source

387
00:11:31,839 --> 00:11:33,600
for this microscope so if you this this

388
00:11:33,600 --> 00:11:34,959
here is a picture of the swiss light

389
00:11:34,959 --> 00:11:36,720
source where the research was done

390
00:11:36,720 --> 00:11:38,800
and this donut shaped building here off

391
00:11:38,800 --> 00:11:39,920
to the side

392
00:11:39,920 --> 00:11:42,000
is literally the light bulb that's used

393
00:11:42,000 --> 00:11:43,440
for this type of imaging so you're not

394
00:11:43,440 --> 00:11:44,800
going to go ahead and park when these up

395
00:11:44,800 --> 00:11:45,839
against your house

396
00:11:45,839 --> 00:11:47,440
anytime soon which means you have to go

397
00:11:47,440 --> 00:11:49,120
ahead and send a sample up for

398
00:11:49,120 --> 00:11:50,639
verification have it come back at which

399
00:11:50,639 --> 00:11:52,079
point it's going through some hands

400
00:11:52,079 --> 00:11:54,240
and you don't really have a true uh

401
00:11:54,240 --> 00:11:56,320
place of check near the place of use

402
00:11:56,320 --> 00:11:57,839
the second problem is that of course

403
00:11:57,839 --> 00:11:59,680
verifying a sample is not the same as

404
00:11:59,680 --> 00:12:00,320
verifying

405
00:12:00,320 --> 00:12:01,680
the chip that you're going to use so the

406
00:12:01,680 --> 00:12:03,120
proposals to go ahead and do sample

407
00:12:03,120 --> 00:12:04,320
verification

408
00:12:04,320 --> 00:12:05,920
also fail because you know you wouldn't

409
00:12:05,920 --> 00:12:08,000
say let's go ahead and download one copy

410
00:12:08,000 --> 00:12:09,680
of the browser confirm the hash and then

411
00:12:09,680 --> 00:12:10,000
never

412
00:12:10,000 --> 00:12:11,600
confirm the hash again after we download

413
00:12:11,600 --> 00:12:12,959
it that would be ridiculous because you

414
00:12:12,959 --> 00:12:14,480
would you would immediately introduce a

415
00:12:14,480 --> 00:12:15,360
bunch of

416
00:12:15,360 --> 00:12:17,600
talk to problems in in the situation and

417
00:12:17,600 --> 00:12:19,440
so you know sample checking also doesn't

418
00:12:19,440 --> 00:12:20,959
work as well

419
00:12:20,959 --> 00:12:22,560
so to sort of summarize the situation

420
00:12:22,560 --> 00:12:23,920
you don't have to take it from me you

421
00:12:23,920 --> 00:12:25,200
know there's actually a set of slides

422
00:12:25,200 --> 00:12:26,639
that were taken out of an nsa

423
00:12:26,639 --> 00:12:28,000
presentation where you know they said

424
00:12:28,000 --> 00:12:29,920
literally who knew in 1984 that you know

425
00:12:29,920 --> 00:12:31,040
we would have big brother

426
00:12:31,040 --> 00:12:32,720
you know walking around our pockets and

427
00:12:32,720 --> 00:12:34,639
that these are such good targets for uh

428
00:12:34,639 --> 00:12:37,440
sort of putting implants in and uh you

429
00:12:37,440 --> 00:12:38,800
know this has been a problem that's

430
00:12:38,800 --> 00:12:40,160
weighed heavily on my mind for a while

431
00:12:40,160 --> 00:12:41,600
you know can we build

432
00:12:41,600 --> 00:12:43,839
hardware that is easier to verify can we

433
00:12:43,839 --> 00:12:44,800
you know are we sort of

434
00:12:44,800 --> 00:12:46,480
are we sort of defenseless and we don't

435
00:12:46,480 --> 00:12:48,079
have any ability to sort of fight this

436
00:12:48,079 --> 00:12:50,000
or can we go ahead and push back against

437
00:12:50,000 --> 00:12:50,720
these

438
00:12:50,720 --> 00:12:51,760
either you know sort of hints or

439
00:12:51,760 --> 00:12:54,320
well-documented attacks that exist in

440
00:12:54,320 --> 00:12:56,160
the supply chain

441
00:12:56,160 --> 00:12:59,279
um so uh i've kind of boiled this down

442
00:12:59,279 --> 00:13:00,639
into three principles

443
00:13:00,639 --> 00:13:03,040
uh that i that i have for evidence-based

444
00:13:03,040 --> 00:13:04,240
trust and hardware

445
00:13:04,240 --> 00:13:06,560
uh first is that complexity is the enemy

446
00:13:06,560 --> 00:13:07,839
of verification

447
00:13:07,839 --> 00:13:09,279
second is that you need to verify entire

448
00:13:09,279 --> 00:13:11,120
systems and not just components

449
00:13:11,120 --> 00:13:12,959
and third is that we need to empower end

450
00:13:12,959 --> 00:13:14,320
users to verify

451
00:13:14,320 --> 00:13:17,600
and seal their hardware so uh

452
00:13:17,600 --> 00:13:20,560
on the top of complexity the problem is

453
00:13:20,560 --> 00:13:21,360
that absent

454
00:13:21,360 --> 00:13:24,000
a robust hashing style function you know

455
00:13:24,000 --> 00:13:26,320
verification falls back to bit by bit or

456
00:13:26,320 --> 00:13:28,079
literally atom by atom

457
00:13:28,079 --> 00:13:30,399
if you take a look at the smartphone for

458
00:13:30,399 --> 00:13:31,920
example you know first of all

459
00:13:31,920 --> 00:13:33,760
they're held together with adhesives so

460
00:13:33,760 --> 00:13:34,880
the moment you open them up it's

461
00:13:34,880 --> 00:13:36,320
actually very hard to get them back

462
00:13:36,320 --> 00:13:37,519
together again so the verification

463
00:13:37,519 --> 00:13:39,440
process itself is slightly destructive

464
00:13:39,440 --> 00:13:40,480
of the device

465
00:13:40,480 --> 00:13:42,000
and then once you have the device apart

466
00:13:42,000 --> 00:13:43,680
there's so many parts to look at so many

467
00:13:43,680 --> 00:13:45,600
chips so many attack surfaces

468
00:13:45,600 --> 00:13:47,360
it would take you quite a long time to

469
00:13:47,360 --> 00:13:49,760
verify that it's all correctly built

470
00:13:49,760 --> 00:13:52,079
um there's a question actually you know

471
00:13:52,079 --> 00:13:53,440
that was raised like can we

472
00:13:53,440 --> 00:13:55,279
actually have our kick and eat it too

473
00:13:55,279 --> 00:13:57,199
can we just fire all that complexity and

474
00:13:57,199 --> 00:13:58,880
sort of monitor and see if the phone's

475
00:13:58,880 --> 00:14:00,160
doing the right thing and not have to

476
00:14:00,160 --> 00:14:01,199
verify it

477
00:14:01,199 --> 00:14:03,199
there's a paper i actually wrote in a

478
00:14:03,199 --> 00:14:04,959
research project with ed snowden to

479
00:14:04,959 --> 00:14:07,279
try and answer this question it's about

480
00:14:07,279 --> 00:14:08,880
the introspection engine and what we did

481
00:14:08,880 --> 00:14:10,399
is we took an iphone 6

482
00:14:10,399 --> 00:14:12,800
and we we found the radio points on the

483
00:14:12,800 --> 00:14:14,160
inside that were used to configure the

484
00:14:14,160 --> 00:14:15,440
radios and monitor and sort of

485
00:14:15,440 --> 00:14:16,880
internally monitor the status of the

486
00:14:16,880 --> 00:14:17,519
radios

487
00:14:17,519 --> 00:14:19,680
and we we instrumented them and brought

488
00:14:19,680 --> 00:14:20,959
them out to a little device that you

489
00:14:20,959 --> 00:14:22,240
could put on the back of your phone so

490
00:14:22,240 --> 00:14:23,519
you can monitor

491
00:14:23,519 --> 00:14:25,440
sort of the the status of your radios

492
00:14:25,440 --> 00:14:27,040
out of band of the operating system you

493
00:14:27,040 --> 00:14:28,240
didn't have to trust anything

494
00:14:28,240 --> 00:14:29,600
other than what was going across those

495
00:14:29,600 --> 00:14:31,760
signals um

496
00:14:31,760 --> 00:14:33,360
and so this is what the ui looks like

497
00:14:33,360 --> 00:14:34,560
you know the on the front side of the

498
00:14:34,560 --> 00:14:35,600
phone and the back side is a little

499
00:14:35,600 --> 00:14:36,800
screen you can sort of see where the

500
00:14:36,800 --> 00:14:38,320
blips are of like you know cell phone

501
00:14:38,320 --> 00:14:40,639
gps wi-fi and bluetooth going off

502
00:14:40,639 --> 00:14:42,480
the problem is is that when we put the

503
00:14:42,480 --> 00:14:44,560
phone into airplane mode and we thought

504
00:14:44,560 --> 00:14:45,760
great you know we shouldn't see any

505
00:14:45,760 --> 00:14:47,199
activity we'd see blips every now and

506
00:14:47,199 --> 00:14:48,800
then on the cell phone and the wi-fi and

507
00:14:48,800 --> 00:14:49,519
the gps

508
00:14:49,519 --> 00:14:51,279
very randomly and we're like oh wow did

509
00:14:51,279 --> 00:14:53,519
we find like malware is it

510
00:14:53,519 --> 00:14:54,959
what's going on and we did a little more

511
00:14:54,959 --> 00:14:56,720
looking around it turns out around the

512
00:14:56,720 --> 00:14:57,440
time that we

513
00:14:57,440 --> 00:14:59,680
were doing this research uh for example

514
00:14:59,680 --> 00:15:01,680
apple had actually changed its policy

515
00:15:01,680 --> 00:15:02,079
that

516
00:15:02,079 --> 00:15:05,600
you know after mac os uh 8.2 or ios

517
00:15:05,600 --> 00:15:08,639
8.2 um the airplane mode doesn't turn

518
00:15:08,639 --> 00:15:10,399
off gps anymore right so

519
00:15:10,399 --> 00:15:12,800
they don't guarantee that gps is off and

520
00:15:12,800 --> 00:15:14,399
you know there's a lot of hypotheses for

521
00:15:14,399 --> 00:15:15,920
why vendors may want to do this like for

522
00:15:15,920 --> 00:15:17,279
example maybe they want to help build up

523
00:15:17,279 --> 00:15:18,800
their mapping capabilities so even

524
00:15:18,800 --> 00:15:19,440
though they're in

525
00:15:19,440 --> 00:15:21,199
airplane mode they'll still sort of do a

526
00:15:21,199 --> 00:15:23,199
quick scan while we aren't looking

527
00:15:23,199 --> 00:15:24,560
there's arguments like the amount of

528
00:15:24,560 --> 00:15:25,920
radiation that's emitted is not harmful

529
00:15:25,920 --> 00:15:27,360
therefore they can do this but

530
00:15:27,360 --> 00:15:29,120
at the end of the day we have like this

531
00:15:29,120 --> 00:15:31,360
confounding signal of actual

532
00:15:31,360 --> 00:15:34,160
sanction vendor behavior confusing with

533
00:15:34,160 --> 00:15:34,880
possible

534
00:15:34,880 --> 00:15:36,639
malware and at the end of the day for us

535
00:15:36,639 --> 00:15:38,079
to create a filter that is

536
00:15:38,079 --> 00:15:40,320
capable of sort of teasing this out we

537
00:15:40,320 --> 00:15:42,000
would need a lot more visibility into a

538
00:15:42,000 --> 00:15:43,839
lot of close source documentation

539
00:15:43,839 --> 00:15:47,360
and so this level of systemic complexity

540
00:15:47,360 --> 00:15:49,519
does not allow us to make a simple clean

541
00:15:49,519 --> 00:15:51,360
firewall that we can say we have a high

542
00:15:51,360 --> 00:15:54,160
level of trust behind

543
00:15:54,160 --> 00:15:56,160
um so you know let's think a little bit

544
00:15:56,160 --> 00:15:57,440
more in the simplicity direction how

545
00:15:57,440 --> 00:15:58,639
simple can we get how easy

546
00:15:58,639 --> 00:16:00,160
can we verify well you know sort of the

547
00:16:00,160 --> 00:16:01,680
simplest microprocessor i can think of

548
00:16:01,680 --> 00:16:03,120
the most verifiable one

549
00:16:03,120 --> 00:16:05,360
is the monster 6502 it's done by a

550
00:16:05,360 --> 00:16:06,560
friend of mine wendell oscar

551
00:16:06,560 --> 00:16:09,120
i love the project and he basically took

552
00:16:09,120 --> 00:16:11,040
a 6502 microprocessor was an 8-bit

553
00:16:11,040 --> 00:16:12,880
microprocessor from the 70s

554
00:16:12,880 --> 00:16:14,880
i think and uh and he built it out of

555
00:16:14,880 --> 00:16:16,320
discrete transistors on a board that's

556
00:16:16,320 --> 00:16:17,600
about this big

557
00:16:17,600 --> 00:16:19,360
um it's easy to verify you just look at

558
00:16:19,360 --> 00:16:20,880
it actually has leds that light up and

559
00:16:20,880 --> 00:16:22,320
show you what you know computation is

560
00:16:22,320 --> 00:16:22,959
going

561
00:16:22,959 --> 00:16:24,880
uh but the problem is only runs at 50

562
00:16:24,880 --> 00:16:26,160
kilohertz clock rate you're not going to

563
00:16:26,160 --> 00:16:27,759
do a lot of modern crypto on this

564
00:16:27,759 --> 00:16:28,800
particular device

565
00:16:28,800 --> 00:16:30,320
so let's say let's let's not go to that

566
00:16:30,320 --> 00:16:31,839
extreme let's bring it up into sort of

567
00:16:31,839 --> 00:16:33,600
say a piece of integrated silicon at a

568
00:16:33,600 --> 00:16:34,399
fab note

569
00:16:34,399 --> 00:16:36,399
that you can inspect with visible light

570
00:16:36,399 --> 00:16:38,240
you know a visible light being 380

571
00:16:38,240 --> 00:16:40,639
nanometer for a blue photon so 500

572
00:16:40,639 --> 00:16:43,360
nanometer uh gate width the problem is

573
00:16:43,360 --> 00:16:45,120
is at that node we were only running

574
00:16:45,120 --> 00:16:46,720
around 100 megahertz clock rate

575
00:16:46,720 --> 00:16:48,639
um those are very high power consumption

576
00:16:48,639 --> 00:16:50,240
for the chips and also

577
00:16:50,240 --> 00:16:51,519
they didn't have a lot of ram that's

578
00:16:51,519 --> 00:16:52,560
actually the big problem you only have

579
00:16:52,560 --> 00:16:54,399
about 2.8 kilobytes per square

580
00:16:54,399 --> 00:16:55,519
millimeter silicon

581
00:16:55,519 --> 00:16:57,120
and you become ram-bound very quickly

582
00:16:57,120 --> 00:16:59,199
even if you have the compute capability

583
00:16:59,199 --> 00:17:01,680
uh in 100 megahertz so at the end of the

584
00:17:01,680 --> 00:17:03,519
day when we think about

585
00:17:03,519 --> 00:17:05,679
verifiable hardware there's a trade-off

586
00:17:05,679 --> 00:17:07,359
we have to think about in terms of ease

587
00:17:07,359 --> 00:17:09,359
of verification

588
00:17:09,359 --> 00:17:11,520
versus features and usability so in this

589
00:17:11,520 --> 00:17:13,199
diagram here on the left

590
00:17:13,199 --> 00:17:16,000
i have the air air pods and on the on

591
00:17:16,000 --> 00:17:18,319
the right i have a conventional headset

592
00:17:18,319 --> 00:17:21,119
both of these devices do ostensibly the

593
00:17:21,119 --> 00:17:22,880
same thing they allow you to talk

594
00:17:22,880 --> 00:17:25,760
they allow you to listen uh to voice but

595
00:17:25,760 --> 00:17:27,679
the one on the left has about you know

596
00:17:27,679 --> 00:17:28,079
seven

597
00:17:28,079 --> 00:17:30,640
orders of manage to more complexity than

598
00:17:30,640 --> 00:17:32,320
the one on the right-hand side

599
00:17:32,320 --> 00:17:34,160
right so the one on the right-hand side

600
00:17:34,160 --> 00:17:35,760
the simple headphone that you put on

601
00:17:35,760 --> 00:17:37,679
uh i can verify by just sort of with

602
00:17:37,679 --> 00:17:39,440
maxwell's equations look at the sort of

603
00:17:39,440 --> 00:17:40,960
the magnet on the inside and the coil

604
00:17:40,960 --> 00:17:42,559
wire and the one transistor that's used

605
00:17:42,559 --> 00:17:44,400
to magnify you know the audio i can look

606
00:17:44,400 --> 00:17:44,799
at

607
00:17:44,799 --> 00:17:46,320
and confirm that there's no implants

608
00:17:46,320 --> 00:17:48,240
it's working correctly the one on the

609
00:17:48,240 --> 00:17:48,720
left

610
00:17:48,720 --> 00:17:51,039
i i couldn't even begin to start

611
00:17:51,039 --> 00:17:52,400
verifying it of course without the

612
00:17:52,400 --> 00:17:53,280
source code

613
00:17:53,280 --> 00:17:55,360
and furthermore um even if you could

614
00:17:55,360 --> 00:17:56,640
start to verify you probably end up

615
00:17:56,640 --> 00:17:58,080
destroying the product and the process

616
00:17:58,080 --> 00:17:59,280
taking it apart to look at all the

617
00:17:59,280 --> 00:18:00,160
pieces

618
00:18:00,160 --> 00:18:02,000
but the main trade-off you have between

619
00:18:02,000 --> 00:18:04,160
the two is whether you have a cord

620
00:18:04,160 --> 00:18:05,760
or not right so they both are

621
00:18:05,760 --> 00:18:07,200
functionally identical but you have you

622
00:18:07,200 --> 00:18:08,240
can make the choice of what's the

623
00:18:08,240 --> 00:18:10,320
convenience of having these really cool

624
00:18:10,320 --> 00:18:12,320
things that fit in your ear versus a

625
00:18:12,320 --> 00:18:13,440
thing with a little cord hanging out the

626
00:18:13,440 --> 00:18:14,480
side and the orders of magnitude

627
00:18:14,480 --> 00:18:15,760
complexity and the difficulty of

628
00:18:15,760 --> 00:18:18,400
verifying them

629
00:18:18,400 --> 00:18:20,400
so that's a sort of a bit about sort of

630
00:18:20,400 --> 00:18:21,919
the complexity problem

631
00:18:21,919 --> 00:18:23,520
when it comes to evidence-based trust

632
00:18:23,520 --> 00:18:25,679
and hardware let's talk a bit about the

633
00:18:25,679 --> 00:18:27,280
the reason why i say we should verify

634
00:18:27,280 --> 00:18:28,480
our entire systems and not just

635
00:18:28,480 --> 00:18:29,600
components

636
00:18:29,600 --> 00:18:31,679
so if you actually look at a smartphone

637
00:18:31,679 --> 00:18:33,360
and on the left is a very

638
00:18:33,360 --> 00:18:34,720
you know abstract diagram of a

639
00:18:34,720 --> 00:18:36,400
smartphone you have

640
00:18:36,400 --> 00:18:38,160
you know sort of a cpu and we already

641
00:18:38,160 --> 00:18:39,679
have on the inside of them secure

642
00:18:39,679 --> 00:18:40,880
enclaves people are building

643
00:18:40,880 --> 00:18:43,120
secure chips at this point in time to go

644
00:18:43,120 --> 00:18:45,120
ahead and hold your private keys which

645
00:18:45,120 --> 00:18:47,120
should in theory be uh you know a level

646
00:18:47,120 --> 00:18:48,720
up in terms of security

647
00:18:48,720 --> 00:18:50,880
the problem with just having single

648
00:18:50,880 --> 00:18:52,080
trustable chips

649
00:18:52,080 --> 00:18:54,400
is what i call the secure i o problem

650
00:18:54,400 --> 00:18:55,440
the chip itself

651
00:18:55,440 --> 00:18:57,600
may have the keys to decrypt your data

652
00:18:57,600 --> 00:18:58,720
but you still have to

653
00:18:58,720 --> 00:19:01,039
type data somewhere and you have to view

654
00:19:01,039 --> 00:19:02,640
data somehow right

655
00:19:02,640 --> 00:19:04,799
and so if you go ahead and type your

656
00:19:04,799 --> 00:19:06,400
plain text in on the keyboard it's going

657
00:19:06,400 --> 00:19:07,919
through an untrusted cpu

658
00:19:07,919 --> 00:19:09,679
to route its way to secure enclave and

659
00:19:09,679 --> 00:19:11,440
likeways the the documents that come

660
00:19:11,440 --> 00:19:13,280
out of the secure enclave are rendered

661
00:19:13,280 --> 00:19:14,880
onto your screen uh which

662
00:19:14,880 --> 00:19:17,440
may or may not be trusted um and this is

663
00:19:17,440 --> 00:19:18,799
uh really sort of highlighted by the

664
00:19:18,799 --> 00:19:20,240
fact that you know android users may be

665
00:19:20,240 --> 00:19:21,520
familiar with the screen if you

666
00:19:21,520 --> 00:19:24,080
install a new uh sort of keyboard input

667
00:19:24,080 --> 00:19:25,280
method it'll actually have a little

668
00:19:25,280 --> 00:19:26,559
thing that pops up and says this

669
00:19:26,559 --> 00:19:28,480
input method may be able to collect all

670
00:19:28,480 --> 00:19:30,080
the text you type including personal

671
00:19:30,080 --> 00:19:31,360
data like passwords and credit card

672
00:19:31,360 --> 00:19:32,880
numbers are you okay

673
00:19:32,880 --> 00:19:34,960
and pretty much you just click ok

674
00:19:34,960 --> 00:19:36,559
because you want that input method it's

675
00:19:36,559 --> 00:19:37,919
important for you

676
00:19:37,919 --> 00:19:39,039
even though you don't get a chance to

677
00:19:39,039 --> 00:19:40,880
verify and what does that do to all that

678
00:19:40,880 --> 00:19:42,720
security inside the enclave one you sort

679
00:19:42,720 --> 00:19:43,280
of just

680
00:19:43,280 --> 00:19:45,520
handed that really important attack

681
00:19:45,520 --> 00:19:46,799
surface directly over to

682
00:19:46,799 --> 00:19:49,360
a potential adversary and so this is why

683
00:19:49,360 --> 00:19:50,799
i say it's important to verify the

684
00:19:50,799 --> 00:19:52,480
entire system from your fingertips to

685
00:19:52,480 --> 00:19:53,360
your eyes

686
00:19:53,360 --> 00:19:55,039
as opposed to just looking at a single

687
00:19:55,039 --> 00:19:56,559
chip

688
00:19:56,559 --> 00:19:58,320
and finally i think it's important to

689
00:19:58,320 --> 00:20:00,240
make sure that the end users themselves

690
00:20:00,240 --> 00:20:01,919
are empowered to verify and seal the

691
00:20:01,919 --> 00:20:03,600
hardware this is all about minimizing

692
00:20:03,600 --> 00:20:04,400
the gap

693
00:20:04,400 --> 00:20:06,000
between the time of check to the time of

694
00:20:06,000 --> 00:20:08,640
use and when i say verify i mean to

695
00:20:08,640 --> 00:20:10,400
empower verification at multiple levels

696
00:20:10,400 --> 00:20:12,000
not just sort of at the software level

697
00:20:12,000 --> 00:20:13,280
or the cpu level

698
00:20:13,280 --> 00:20:15,120
but you know sort of the design level

699
00:20:15,120 --> 00:20:16,880
the gate level you know the circuit

700
00:20:16,880 --> 00:20:18,799
board level so all these documentation

701
00:20:18,799 --> 00:20:20,799
need to be available so that users can

702
00:20:20,799 --> 00:20:22,159
make a choice and have

703
00:20:22,159 --> 00:20:23,280
and gather evidence about the

704
00:20:23,280 --> 00:20:25,280
trustability of hardware but also you

705
00:20:25,280 --> 00:20:26,320
know there's a sort of

706
00:20:26,320 --> 00:20:28,320
subtle problem uh in the in the

707
00:20:28,320 --> 00:20:29,840
provisioning and sealing of chips if

708
00:20:29,840 --> 00:20:30,960
people people have done embedded

709
00:20:30,960 --> 00:20:32,880
development or have had to burn e-fused

710
00:20:32,880 --> 00:20:34,720
keys into chips so often find that

711
00:20:34,720 --> 00:20:36,080
even though they have full open source

712
00:20:36,080 --> 00:20:37,520
stacks to generate you know the

713
00:20:37,520 --> 00:20:38,799
cryptographic material

714
00:20:38,799 --> 00:20:40,480
the final fuse burning process goes

715
00:20:40,480 --> 00:20:42,400
through a proprietary third-party tool

716
00:20:42,400 --> 00:20:43,360
or library

717
00:20:43,360 --> 00:20:45,280
and it it turns out it's not necessarily

718
00:20:45,280 --> 00:20:46,799
malfeasance that does this it turns out

719
00:20:46,799 --> 00:20:48,240
that the actual e-fuses themselves are

720
00:20:48,240 --> 00:20:49,919
slightly unreliable and there's a lot of

721
00:20:49,919 --> 00:20:51,360
magic that goes into making them more

722
00:20:51,360 --> 00:20:52,240
reliable and

723
00:20:52,240 --> 00:20:53,679
the fabs and the vendors are unwilling

724
00:20:53,679 --> 00:20:55,600
to admit they're unreliable they hide

725
00:20:55,600 --> 00:20:56,720
them behind these libraries they don't

726
00:20:56,720 --> 00:20:58,240
want to share their secret sauce and

727
00:20:58,240 --> 00:20:59,520
technique to make them reliable

728
00:20:59,520 --> 00:21:00,960
but at the end of the day it's it's sort

729
00:21:00,960 --> 00:21:02,960
of ironic that you can put this whole

730
00:21:02,960 --> 00:21:04,080
stack together

731
00:21:04,080 --> 00:21:06,000
and then at the final moment where you

732
00:21:06,000 --> 00:21:07,360
burn the keys and you're once again

733
00:21:07,360 --> 00:21:09,120
handing your keys back to an untrusted

734
00:21:09,120 --> 00:21:11,280
unknown third-party library so the

735
00:21:11,280 --> 00:21:13,280
vision is to try and create a full

736
00:21:13,280 --> 00:21:16,320
chain of custody of trustability from

737
00:21:16,320 --> 00:21:17,120
the point of

738
00:21:17,120 --> 00:21:18,640
generation of your cryptographic monitor

739
00:21:18,640 --> 00:21:21,039
to the point of sealing it

740
00:21:21,039 --> 00:21:23,520
i also think sealing um should be

741
00:21:23,520 --> 00:21:24,400
physical as well

742
00:21:24,400 --> 00:21:25,679
it can be physical but i think it should

743
00:21:25,679 --> 00:21:27,200
be physical it really depends upon your

744
00:21:27,200 --> 00:21:28,000
threat model

745
00:21:28,000 --> 00:21:29,520
if you really think someone might take

746
00:21:29,520 --> 00:21:31,039
your device and look at it then you need

747
00:21:31,039 --> 00:21:32,720
to worry about physical sealing

748
00:21:32,720 --> 00:21:34,880
the large number of users uh you

749
00:21:34,880 --> 00:21:36,000
probably don't have to worry about evil

750
00:21:36,000 --> 00:21:37,760
made attacks like i said before people

751
00:21:37,760 --> 00:21:39,440
if by the time someone's sending an

752
00:21:39,440 --> 00:21:40,960
agent to your house to go ahead and take

753
00:21:40,960 --> 00:21:42,159
your stuff

754
00:21:42,159 --> 00:21:43,600
you've got bigger problems going on

755
00:21:43,600 --> 00:21:45,280
probably um in your in

756
00:21:45,280 --> 00:21:48,880
in your life uh so this is the

757
00:21:48,880 --> 00:21:51,360
uh the the three principles that i've

758
00:21:51,360 --> 00:21:52,799
outlined for evidence-based trust and

759
00:21:52,799 --> 00:21:53,600
hardware

760
00:21:53,600 --> 00:21:55,039
you know sort of keeping things simple

761
00:21:55,039 --> 00:21:57,039
look at whole systems and making sure

762
00:21:57,039 --> 00:21:58,640
that we've empowered and used to verify

763
00:21:58,640 --> 00:21:59,919
but the question is like

764
00:21:59,919 --> 00:22:01,360
how do we turn these principles into

765
00:22:01,360 --> 00:22:02,960
actual practice

766
00:22:02,960 --> 00:22:04,480
and so this is where i'm going to talk

767
00:22:04,480 --> 00:22:06,880
to you a bit about uh precursor itself

768
00:22:06,880 --> 00:22:08,799
um this is the project that i've been

769
00:22:08,799 --> 00:22:10,240
working on for past couple years where

770
00:22:10,240 --> 00:22:11,600
i'm trying to do a case study i'm trying

771
00:22:11,600 --> 00:22:12,799
to embody

772
00:22:12,799 --> 00:22:14,799
these principles into an actual piece of

773
00:22:14,799 --> 00:22:16,080
hardware that facilitates

774
00:22:16,080 --> 00:22:18,559
evidence-based trust the device is

775
00:22:18,559 --> 00:22:20,320
simple in construction it's open in

776
00:22:20,320 --> 00:22:21,120
design

777
00:22:21,120 --> 00:22:22,559
and hopefully sufficient and function to

778
00:22:22,559 --> 00:22:25,120
do some key applications

779
00:22:25,120 --> 00:22:27,360
so just to be clear precursor itself as

780
00:22:27,360 --> 00:22:28,880
its name implies is a development

781
00:22:28,880 --> 00:22:30,640
platform it's not an end product it's

782
00:22:30,640 --> 00:22:32,000
all about sort of the evidence-based

783
00:22:32,000 --> 00:22:33,360
trust and hardware

784
00:22:33,360 --> 00:22:35,120
the potential applications you may be

785
00:22:35,120 --> 00:22:36,960
able to run on are things like secure

786
00:22:36,960 --> 00:22:38,159
text messaging

787
00:22:38,159 --> 00:22:40,080
voice chat um we've made sure it has

788
00:22:40,080 --> 00:22:42,559
some ability to multilingual capability

789
00:22:42,559 --> 00:22:44,000
uh password management 2fa

790
00:22:44,000 --> 00:22:45,520
authentication tokens are perfect for

791
00:22:45,520 --> 00:22:47,520
crypto wallets these types of things

792
00:22:47,520 --> 00:22:49,760
but because of that sort of simplicity

793
00:22:49,760 --> 00:22:51,919
requirement to make it verifiable

794
00:22:51,919 --> 00:22:53,200
it's not going to be suitable for things

795
00:22:53,200 --> 00:22:55,840
like web browsing games or photos and

796
00:22:55,840 --> 00:22:56,320
videos

797
00:22:56,320 --> 00:22:59,280
these types of things so precursor

798
00:22:59,280 --> 00:23:00,240
itself

799
00:23:00,240 --> 00:23:02,799
is made to be verified so this is sort

800
00:23:02,799 --> 00:23:03,760
of a spread

801
00:23:03,760 --> 00:23:05,840
of all of the components that go into

802
00:23:05,840 --> 00:23:07,840
precursor we use screws now

803
00:23:07,840 --> 00:23:10,000
adhesives deliberately to make it easier

804
00:23:10,000 --> 00:23:11,200
for you to take it apart and put it back

805
00:23:11,200 --> 00:23:12,159
together again

806
00:23:12,159 --> 00:23:13,840
and there's not actually a whole lot of

807
00:23:13,840 --> 00:23:15,039
parts when you sort of look at the

808
00:23:15,039 --> 00:23:15,840
spread

809
00:23:15,840 --> 00:23:17,520
all out so let's let's i'm going to dig

810
00:23:17,520 --> 00:23:18,720
into a few of the more interesting

811
00:23:18,720 --> 00:23:19,760
features

812
00:23:19,760 --> 00:23:22,960
and talk about them so

813
00:23:22,960 --> 00:23:24,799
uh we have a physical keyboard and the

814
00:23:24,799 --> 00:23:26,320
reason and the physical keyboards

815
00:23:26,320 --> 00:23:27,039
themselves

816
00:23:27,039 --> 00:23:30,080
are you know are very easy to inspect um

817
00:23:30,080 --> 00:23:32,159
there's no silicon chips on the inside

818
00:23:32,159 --> 00:23:33,280
and we handle

819
00:23:33,280 --> 00:23:35,360
uh sort of the the multilingual

820
00:23:35,360 --> 00:23:36,640
capability by using an

821
00:23:36,640 --> 00:23:39,039
overlay you can go ahead and put on top

822
00:23:39,039 --> 00:23:40,720
of the keyboard switcher rig

823
00:23:40,720 --> 00:23:42,320
and you can see the overlay over here

824
00:23:42,320 --> 00:23:43,840
and you know for example if you don't

825
00:23:43,840 --> 00:23:45,600
type on a qwerty keyboard but you use a

826
00:23:45,600 --> 00:23:47,279
zerty or use quartz

827
00:23:47,279 --> 00:23:49,760
we will provide overlays you just go

828
00:23:49,760 --> 00:23:50,880
ahead and physically put

829
00:23:50,880 --> 00:23:52,640
over the keyboard layout so you have

830
00:23:52,640 --> 00:23:55,360
your familiar keyboard

831
00:23:55,360 --> 00:23:58,480
that you like to use the good news about

832
00:23:58,480 --> 00:23:59,600
this is that when you use a physical

833
00:23:59,600 --> 00:24:01,600
keyboard the verification difficulty is

834
00:24:01,600 --> 00:24:02,320
trivial

835
00:24:02,320 --> 00:24:05,120
so here is the actual keyboard uh

836
00:24:05,120 --> 00:24:06,720
surface itself and you can just hold it

837
00:24:06,720 --> 00:24:07,679
up to the light

838
00:24:07,679 --> 00:24:09,520
you can see the switches you can see the

839
00:24:09,520 --> 00:24:11,039
connector and that's it the wires you're

840
00:24:11,039 --> 00:24:11,440
done

841
00:24:11,440 --> 00:24:14,400
right we actually designed the keyboard

842
00:24:14,400 --> 00:24:16,960
pcb itself out of a clear material semi

843
00:24:16,960 --> 00:24:19,039
clear material so it's easier to do this

844
00:24:19,039 --> 00:24:20,400
on the other hand if we were to use a

845
00:24:20,400 --> 00:24:21,600
touch keyboard

846
00:24:21,600 --> 00:24:22,960
the verification level is actually

847
00:24:22,960 --> 00:24:25,760
surprisingly hard because touch surfaces

848
00:24:25,760 --> 00:24:27,279
require a touch controller and these

849
00:24:27,279 --> 00:24:29,200
touch controllers are not just

850
00:24:29,200 --> 00:24:30,799
simple pieces of hardware they actually

851
00:24:30,799 --> 00:24:32,320
have firmware on the inside so if you

852
00:24:32,320 --> 00:24:33,520
look at the data sheet

853
00:24:33,520 --> 00:24:35,520
of one of these touch controllers we can

854
00:24:35,520 --> 00:24:37,039
see that you know we're at

855
00:24:37,039 --> 00:24:38,799
you know firmware version 1.x or

856
00:24:38,799 --> 00:24:40,159
whatever it is and we don't even have

857
00:24:40,159 --> 00:24:41,520
the ability to view it

858
00:24:41,520 --> 00:24:43,440
they have memories on the inside they're

859
00:24:43,440 --> 00:24:44,880
capable of capturing you know touch

860
00:24:44,880 --> 00:24:46,159
gestures or whatever it is and they

861
00:24:46,159 --> 00:24:47,039
could be used as

862
00:24:47,039 --> 00:24:48,640
exfiltration mechanisms at the end of

863
00:24:48,640 --> 00:24:50,559
the day

864
00:24:50,559 --> 00:24:52,880
um we also tried to pay attention to the

865
00:24:52,880 --> 00:24:55,039
lcd make sure the lcd itself

866
00:24:55,039 --> 00:24:58,240
is verifiable we've chosen a high dpi

867
00:24:58,240 --> 00:25:00,720
black and white screen it's 200 dpi and

868
00:25:00,720 --> 00:25:02,000
uh 330

869
00:25:02,000 --> 00:25:05,039
336 by 536 pixels resolution

870
00:25:05,039 --> 00:25:06,480
you can see on the right hand side sort

871
00:25:06,480 --> 00:25:08,480
of uh an idea of what the what the

872
00:25:08,480 --> 00:25:10,159
what the image looks like on it and the

873
00:25:10,159 --> 00:25:11,520
resolution we can get

874
00:25:11,520 --> 00:25:13,120
and the reason why we picked this is

875
00:25:13,120 --> 00:25:15,200
that actually all of the electronics

876
00:25:15,200 --> 00:25:16,640
used to drive the pixels

877
00:25:16,640 --> 00:25:18,400
are actually built using transistors on

878
00:25:18,400 --> 00:25:19,679
the glass itself

879
00:25:19,679 --> 00:25:21,919
and those transistors are quite large

880
00:25:21,919 --> 00:25:23,520
the image on the right hand side was

881
00:25:23,520 --> 00:25:24,159
taken with

882
00:25:24,159 --> 00:25:26,720
a sort of a common microscope you might

883
00:25:26,720 --> 00:25:28,000
find in a high school level

884
00:25:28,000 --> 00:25:30,000
science lab or something like this a 50x

885
00:25:30,000 --> 00:25:31,440
zoom optical zoom

886
00:25:31,440 --> 00:25:33,279
and people who are a little bit

887
00:25:33,279 --> 00:25:34,720
experienced in in sort of chips and

888
00:25:34,720 --> 00:25:36,320
circuit design will recognize

889
00:25:36,320 --> 00:25:39,120
these as individual logic gates that are

890
00:25:39,120 --> 00:25:40,320
that are implemented using these

891
00:25:40,320 --> 00:25:41,679
transistors and these are the address

892
00:25:41,679 --> 00:25:42,960
decoders that eventually

893
00:25:42,960 --> 00:25:45,600
drive the pixel array so it's actually

894
00:25:45,600 --> 00:25:46,000
you know

895
00:25:46,000 --> 00:25:48,960
possible to verify this display

896
00:25:48,960 --> 00:25:50,240
non-destructively

897
00:25:50,240 --> 00:25:53,360
using just common uh microscopes

898
00:25:53,360 --> 00:25:55,039
compare this to for example the

899
00:25:55,039 --> 00:25:56,960
situation with a color lcd

900
00:25:56,960 --> 00:26:00,080
any sort of more complicated level lcd

901
00:26:00,080 --> 00:26:02,240
they do have transistors on silicon to

902
00:26:02,240 --> 00:26:03,600
handle some pixel flipping

903
00:26:03,600 --> 00:26:05,919
but they require a local frame buffer to

904
00:26:05,919 --> 00:26:07,360
go ahead and render

905
00:26:07,360 --> 00:26:09,200
images onto the screen and so they have

906
00:26:09,200 --> 00:26:10,640
actually a piece of silicon

907
00:26:10,640 --> 00:26:13,120
this little thin gray bar you see here i

908
00:26:13,120 --> 00:26:14,240
pointed out here it's actually a very

909
00:26:14,240 --> 00:26:15,600
long thin piece of silicon that's put in

910
00:26:15,600 --> 00:26:16,400
the bottom

911
00:26:16,400 --> 00:26:18,559
that contains a frame buffer a command

912
00:26:18,559 --> 00:26:20,400
interface and all types of other things

913
00:26:20,400 --> 00:26:22,000
can be used to go ahead and selectively

914
00:26:22,000 --> 00:26:22,559
maybe

915
00:26:22,559 --> 00:26:24,240
capture pixels and read them out through

916
00:26:24,240 --> 00:26:25,840
an alternate route that you weren't

917
00:26:25,840 --> 00:26:27,679
expecting

918
00:26:27,679 --> 00:26:30,080
um so beyond sort of the input and

919
00:26:30,080 --> 00:26:31,520
output surfaces

920
00:26:31,520 --> 00:26:34,559
we've designed our device

921
00:26:34,559 --> 00:26:36,320
along attack surfaces so we thought

922
00:26:36,320 --> 00:26:38,480
about the whole circuit design

923
00:26:38,480 --> 00:26:40,640
in terms of how to delineate the attack

924
00:26:40,640 --> 00:26:41,600
surfaces

925
00:26:41,600 --> 00:26:43,279
and make it easier to verify so this is

926
00:26:43,279 --> 00:26:45,600
a block diagram of of the circuit board

927
00:26:45,600 --> 00:26:47,760
itself and we have actually divided into

928
00:26:47,760 --> 00:26:50,000
an untrusted domain and a trusted domain

929
00:26:50,000 --> 00:26:51,279
the untrusted domain is orange and the

930
00:26:51,279 --> 00:26:52,000
trusted domain

931
00:26:52,000 --> 00:26:54,960
is in is in tan um and interested domain

932
00:26:54,960 --> 00:26:56,480
has things that you expect for example

933
00:26:56,480 --> 00:26:58,159
you know we have to have a pipe to the

934
00:26:58,159 --> 00:26:59,279
internet the wi-fi

935
00:26:59,279 --> 00:27:01,360
we don't trust the wi-fi chip you know

936
00:27:01,360 --> 00:27:02,799
has blobs on the inside

937
00:27:02,799 --> 00:27:04,640
just like we don't trust the cable modem

938
00:27:04,640 --> 00:27:06,480
or the core routers of the network

939
00:27:06,480 --> 00:27:09,120
uh we have things like the charger and

940
00:27:09,120 --> 00:27:09,919
uh we

941
00:27:09,919 --> 00:27:11,520
and so a little bit of memory on the

942
00:27:11,520 --> 00:27:13,120
inside to go ahead and boot the

943
00:27:13,120 --> 00:27:14,960
the controller of this domain and the

944
00:27:14,960 --> 00:27:16,240
controller itself is a

945
00:27:16,240 --> 00:27:17,919
is a design that of our own creation

946
00:27:17,919 --> 00:27:20,240
inside of an fpga that

947
00:27:20,240 --> 00:27:22,080
acts as a bit of a firewall to go ahead

948
00:27:22,080 --> 00:27:23,679
and funnel all that information

949
00:27:23,679 --> 00:27:26,080
into a single bus called the com bus

950
00:27:26,080 --> 00:27:28,159
which then goes into the trusted domain

951
00:27:28,159 --> 00:27:29,760
and the idea is by putting all that into

952
00:27:29,760 --> 00:27:31,679
a single bus with a uniform

953
00:27:31,679 --> 00:27:34,320
specification we can we can reason about

954
00:27:34,320 --> 00:27:35,840
the packets they're going across it we

955
00:27:35,840 --> 00:27:36,720
can check for

956
00:27:36,720 --> 00:27:39,200
well-formedness of the packets and so

957
00:27:39,200 --> 00:27:40,480
forth and we and i also

958
00:27:40,480 --> 00:27:43,200
sort of drew this diagram to think about

959
00:27:43,200 --> 00:27:44,320
also sort of

960
00:27:44,320 --> 00:27:46,559
potential side-channel attacks other

961
00:27:46,559 --> 00:27:48,000
ways for data to come in and out of the

962
00:27:48,000 --> 00:27:49,360
trusted domain which here on the right

963
00:27:49,360 --> 00:27:50,080
hand side

964
00:27:50,080 --> 00:27:51,600
which as you know contains the keyboard

965
00:27:51,600 --> 00:27:54,000
the lcd the fpga the memory all the

966
00:27:54,000 --> 00:27:55,600
things you expect to have inside of a

967
00:27:55,600 --> 00:27:57,520
trusted domain

968
00:27:57,520 --> 00:27:59,279
uh and the cool thing is now i can just

969
00:27:59,279 --> 00:28:00,559
you know kind of point to the circuit

970
00:28:00,559 --> 00:28:01,840
board and say well here are the attack

971
00:28:01,840 --> 00:28:03,360
surface like here are the things

972
00:28:03,360 --> 00:28:05,679
you should probably worry about um when

973
00:28:05,679 --> 00:28:07,200
reasoning about the trustability of the

974
00:28:07,200 --> 00:28:07,840
system

975
00:28:07,840 --> 00:28:09,279
right you know we have a we have a debug

976
00:28:09,279 --> 00:28:10,960
connector here uh so that should be

977
00:28:10,960 --> 00:28:12,640
obviously glued shut or removed if you

978
00:28:12,640 --> 00:28:14,159
if you're worried about that

979
00:28:14,159 --> 00:28:16,320
here's the audio chip there's a keyboard

980
00:28:16,320 --> 00:28:17,919
attack surface usb and power

981
00:28:17,919 --> 00:28:20,399
gpio and the communication bus to our

982
00:28:20,399 --> 00:28:22,799
sort of firewall ic up here to the north

983
00:28:22,799 --> 00:28:24,320
um and at the end of the day once you

984
00:28:24,320 --> 00:28:26,159
sort of inspect all these and confirm

985
00:28:26,159 --> 00:28:27,520
that they're sealed or

986
00:28:27,520 --> 00:28:28,640
have the integrity that you're looking

987
00:28:28,640 --> 00:28:30,640
for to your satisfaction we provide the

988
00:28:30,640 --> 00:28:32,480
ability to put a single sort of metal

989
00:28:32,480 --> 00:28:34,559
shield over the entire trusted domain

990
00:28:34,559 --> 00:28:35,919
and you can go ahead and dab a little

991
00:28:35,919 --> 00:28:37,360
glue into the holes to make sure it

992
00:28:37,360 --> 00:28:38,720
can't come off very easily

993
00:28:38,720 --> 00:28:39,919
at the end of the day so now you've gone

994
00:28:39,919 --> 00:28:42,000
ahead at the point of use checked your

995
00:28:42,000 --> 00:28:43,520
hardware confirmed it's okay and then

996
00:28:43,520 --> 00:28:44,720
sealed it in a way that makes it

997
00:28:44,720 --> 00:28:45,440
difficult

998
00:28:45,440 --> 00:28:48,720
more difficult to tamper with so that's

999
00:28:48,720 --> 00:28:50,000
sort of talking about the input and

1000
00:28:50,000 --> 00:28:50,480
output

1001
00:28:50,480 --> 00:28:53,039
and sort of the large architectural

1002
00:28:53,039 --> 00:28:54,960
features of it but the hardest problem

1003
00:28:54,960 --> 00:28:56,480
of course is how do we get

1004
00:28:56,480 --> 00:28:58,080
evidence-based trust in our

1005
00:28:58,080 --> 00:29:01,120
cpu uh or as i often call it the soc the

1006
00:29:01,120 --> 00:29:02,480
system on chip because it's not just a

1007
00:29:02,480 --> 00:29:03,840
cpu it's a whole bunch of components

1008
00:29:03,840 --> 00:29:05,120
they're on the chip

1009
00:29:05,120 --> 00:29:07,200
now silicon itself is something that we

1010
00:29:07,200 --> 00:29:08,559
can go ahead and look at but the

1011
00:29:08,559 --> 00:29:10,240
inspection is typically destructive

1012
00:29:10,240 --> 00:29:12,720
and hard it's difficult to check and use

1013
00:29:12,720 --> 00:29:14,480
the chip at the same time so we can

1014
00:29:14,480 --> 00:29:15,919
have these wonderful diagrams like i

1015
00:29:15,919 --> 00:29:17,120
have here on the right hand side which

1016
00:29:17,120 --> 00:29:18,960
is sort of a cut through of a chip

1017
00:29:18,960 --> 00:29:20,640
but you'll notice they cut through the

1018
00:29:20,640 --> 00:29:22,240
chip you're not going to use that chip

1019
00:29:22,240 --> 00:29:23,520
even though you know everything about

1020
00:29:23,520 --> 00:29:24,559
everything inside the chip and

1021
00:29:24,559 --> 00:29:26,159
unfortunately a lot of the

1022
00:29:26,159 --> 00:29:28,320
desktop class microscopes like scanning

1023
00:29:28,320 --> 00:29:30,000
electron microscopes and whatnot will

1024
00:29:30,000 --> 00:29:31,679
have to do a destructive

1025
00:29:31,679 --> 00:29:34,240
process in order to vision in order to

1026
00:29:34,240 --> 00:29:35,840
sort of image all of the

1027
00:29:35,840 --> 00:29:38,880
intermediate layers of a chip our

1028
00:29:38,880 --> 00:29:40,720
solution to the problem in precursor is

1029
00:29:40,720 --> 00:29:42,480
to use an fpga field

1030
00:29:42,480 --> 00:29:44,640
programmable gate array uh for people

1031
00:29:44,640 --> 00:29:45,760
who aren't familiar with these it's

1032
00:29:45,760 --> 00:29:47,840
basically a large array of logic and

1033
00:29:47,840 --> 00:29:48,640
wires

1034
00:29:48,640 --> 00:29:50,240
they're user configured to implement

1035
00:29:50,240 --> 00:29:52,080
hardware designs this is this is a view

1036
00:29:52,080 --> 00:29:54,159
of sort of a design tool

1037
00:29:54,159 --> 00:29:56,559
view of the fpga we have a huge array of

1038
00:29:56,559 --> 00:29:58,240
logic and wires you can see the actual

1039
00:29:58,240 --> 00:29:59,600
devices themselves and we can sort of

1040
00:29:59,600 --> 00:30:00,159
see

1041
00:30:00,159 --> 00:30:01,600
how they're wired together and what the

1042
00:30:01,600 --> 00:30:03,840
logical mapping of all those

1043
00:30:03,840 --> 00:30:07,200
those devices are and the key idea is

1044
00:30:07,200 --> 00:30:08,000
that the fpga

1045
00:30:08,000 --> 00:30:10,080
allows you to compile your own cpu

1046
00:30:10,080 --> 00:30:11,760
thereby narrowing that timer check the

1047
00:30:11,760 --> 00:30:12,960
time of use gaap

1048
00:30:12,960 --> 00:30:15,039
so by giving people source code which in

1049
00:30:15,039 --> 00:30:16,640
this case is in python allowing them to

1050
00:30:16,640 --> 00:30:18,080
compile it down into sort of an

1051
00:30:18,080 --> 00:30:19,919
intermediate verilog format that's then

1052
00:30:19,919 --> 00:30:21,679
turned into a bit stream that is loaded

1053
00:30:21,679 --> 00:30:23,760
to into the fpga hardware itself

1054
00:30:23,760 --> 00:30:26,320
we and we allow things like signatures

1055
00:30:26,320 --> 00:30:27,679
uh so other people can do the

1056
00:30:27,679 --> 00:30:29,039
compilation for us and all i have to do

1057
00:30:29,039 --> 00:30:30,559
is confirm that the bitstream

1058
00:30:30,559 --> 00:30:32,880
matches the uh bit stream that someone

1059
00:30:32,880 --> 00:30:34,559
else has and put the effort in to check

1060
00:30:34,559 --> 00:30:36,399
and verify

1061
00:30:36,399 --> 00:30:38,559
another really cool thing that we have

1062
00:30:38,559 --> 00:30:40,080
with an fpga is we have

1063
00:30:40,080 --> 00:30:42,640
a technique they call sort of a slr for

1064
00:30:42,640 --> 00:30:44,240
hardware so aslr is

1065
00:30:44,240 --> 00:30:46,399
address space layout randomization i'm

1066
00:30:46,399 --> 00:30:48,240
pretty sure everyone in the blackout

1067
00:30:48,240 --> 00:30:49,440
audience is familiar with this

1068
00:30:49,440 --> 00:30:50,640
it's you know when you go ahead and you

1069
00:30:50,640 --> 00:30:53,279
change the location of various uh

1070
00:30:53,279 --> 00:30:54,960
object files at least time to make sure

1071
00:30:54,960 --> 00:30:56,320
that when you have a stack smash you

1072
00:30:56,320 --> 00:30:58,559
don't have a very easy time of locating

1073
00:30:58,559 --> 00:31:00,399
you know gadgets and whatnot for your

1074
00:31:00,399 --> 00:31:02,320
attacks you can do something similar

1075
00:31:02,320 --> 00:31:03,760
like this with an fpga and hardware

1076
00:31:03,760 --> 00:31:04,000
since

1077
00:31:04,000 --> 00:31:07,120
you have a big array of logic that is

1078
00:31:07,120 --> 00:31:08,399
essentially randomly mapped to your

1079
00:31:08,399 --> 00:31:09,120
design

1080
00:31:09,120 --> 00:31:10,720
you can recompile your design with some

1081
00:31:10,720 --> 00:31:12,559
random seeds to go ahead and change that

1082
00:31:12,559 --> 00:31:13,919
mapping so that way

1083
00:31:13,919 --> 00:31:15,919
no one can go ahead and sort of prefab a

1084
00:31:15,919 --> 00:31:17,600
chip with a couple

1085
00:31:17,600 --> 00:31:20,480
logic cells with implants on the inside

1086
00:31:20,480 --> 00:31:22,559
to pull bits out because you don't know

1087
00:31:22,559 --> 00:31:23,919
where your program cutter is going to

1088
00:31:23,919 --> 00:31:24,880
end up you don't know where the

1089
00:31:24,880 --> 00:31:26,480
instruction decoder is going to end up

1090
00:31:26,480 --> 00:31:28,240
when you can go ahead and recompile the

1091
00:31:28,240 --> 00:31:30,960
the chip for a new piece of hardware

1092
00:31:30,960 --> 00:31:32,320
and what what that means at the end of

1093
00:31:32,320 --> 00:31:34,320
the day is that um

1094
00:31:34,320 --> 00:31:36,159
you know you you can't just backdoor an

1095
00:31:36,159 --> 00:31:37,360
fpga

1096
00:31:37,360 --> 00:31:40,399
by uh putting a little bit of uh logic

1097
00:31:40,399 --> 00:31:41,919
inside every single one of these logic

1098
00:31:41,919 --> 00:31:43,519
gates because it would just blow up the

1099
00:31:43,519 --> 00:31:45,120
area of the fpga become a much

1100
00:31:45,120 --> 00:31:47,039
larger chip and of itself the sort of

1101
00:31:47,039 --> 00:31:48,480
thing you don't need a high-end

1102
00:31:48,480 --> 00:31:50,159
microscope to reveal you can just see it

1103
00:31:50,159 --> 00:31:51,679
in a regular x-ray scan you'd see that

1104
00:31:51,679 --> 00:31:52,960
the chip itself is much larger you'd

1105
00:31:52,960 --> 00:31:53,519
expect

1106
00:31:53,519 --> 00:31:55,039
you'd say wait someone maybe has gone

1107
00:31:55,039 --> 00:31:57,120
and backdoored all the logic gates

1108
00:31:57,120 --> 00:31:58,960
instead you're reduced to now trying to

1109
00:31:58,960 --> 00:32:00,880
either train a sample or some other kind

1110
00:32:00,880 --> 00:32:02,399
of thing but it's not as effective

1111
00:32:02,399 --> 00:32:04,000
it's it's an interesting mitigation that

1112
00:32:04,000 --> 00:32:06,399
we get with fpgas

1113
00:32:06,399 --> 00:32:08,640
and then finally there's a question of

1114
00:32:08,640 --> 00:32:10,159
you know what is in that bitstream that

1115
00:32:10,159 --> 00:32:11,600
comes out of the compiler do we know

1116
00:32:11,600 --> 00:32:12,799
what's on the inside

1117
00:32:12,799 --> 00:32:14,399
there are some projects that are ongoing

1118
00:32:14,399 --> 00:32:15,840
right now uh for example

1119
00:32:15,840 --> 00:32:18,240
uh prj x-ray you can see the github repo

1120
00:32:18,240 --> 00:32:19,760
for on the lower right hand side

1121
00:32:19,760 --> 00:32:21,039
where they're going ahead and they're

1122
00:32:21,039 --> 00:32:22,559
actually fuzzing the bit stream

1123
00:32:22,559 --> 00:32:23,600
generators to

1124
00:32:23,600 --> 00:32:25,360
to discover the meaning of every single

1125
00:32:25,360 --> 00:32:26,880
bit in that bit stream so now we can

1126
00:32:26,880 --> 00:32:29,679
actually say what does this bit do does

1127
00:32:29,679 --> 00:32:31,279
is this bit actually doing what we think

1128
00:32:31,279 --> 00:32:33,039
it should do and if something changes in

1129
00:32:33,039 --> 00:32:34,159
a bit stream that you've never seen

1130
00:32:34,159 --> 00:32:35,200
change before

1131
00:32:35,200 --> 00:32:36,640
is that legitimate or is that something

1132
00:32:36,640 --> 00:32:38,480
we should worry about so we have the

1133
00:32:38,480 --> 00:32:40,159
ability to sort of partially mitigate

1134
00:32:40,159 --> 00:32:42,159
tainted tool chains and also the ability

1135
00:32:42,159 --> 00:32:44,080
to introspect into the bit streams and

1136
00:32:44,080 --> 00:32:45,360
confirm that they're doing something

1137
00:32:45,360 --> 00:32:48,880
correct so the big picture about fpgas

1138
00:32:48,880 --> 00:32:50,960
is that fpgas allow us to move the point

1139
00:32:50,960 --> 00:32:52,000
of check

1140
00:32:52,000 --> 00:32:53,919
closer to the end user and the vision

1141
00:32:53,919 --> 00:32:55,440
we're not there yet but the vision that

1142
00:32:55,440 --> 00:32:56,640
i would like us to get to is that we

1143
00:32:56,640 --> 00:32:58,159
just have a one-click tool

1144
00:32:58,159 --> 00:32:59,760
that allows users to sort of compile and

1145
00:32:59,760 --> 00:33:02,080
verify their fpga bitstream and that

1146
00:33:02,080 --> 00:33:03,519
really means that we're bringing

1147
00:33:03,519 --> 00:33:04,799
ourselves to the point where the point

1148
00:33:04,799 --> 00:33:05,679
of check

1149
00:33:05,679 --> 00:33:08,799
is exactly equal to the point of use

1150
00:33:08,799 --> 00:33:11,200
so let's take a quick poke inside the

1151
00:33:11,200 --> 00:33:12,159
fpga

1152
00:33:12,159 --> 00:33:13,760
and see what's inside of it so so this

1153
00:33:13,760 --> 00:33:15,679
here is a bit of a big

1154
00:33:15,679 --> 00:33:18,880
diagram that i've drawn up um but it can

1155
00:33:18,880 --> 00:33:20,640
it shows you all the sort of things that

1156
00:33:20,640 --> 00:33:22,559
are inside of our current proposed

1157
00:33:22,559 --> 00:33:26,000
soc for a precursor and it changes all

1158
00:33:26,000 --> 00:33:27,200
the time because it's an fpg we're

1159
00:33:27,200 --> 00:33:28,480
allowed to update or allowed to change

1160
00:33:28,480 --> 00:33:30,240
it which is actually kind of cool

1161
00:33:30,240 --> 00:33:31,760
i'm not going to go through all the

1162
00:33:31,760 --> 00:33:33,120
individual sub blocks but i'll talk

1163
00:33:33,120 --> 00:33:34,240
through a couple that i think they're

1164
00:33:34,240 --> 00:33:35,360
probably most interesting

1165
00:33:35,360 --> 00:33:37,919
to to the people watching this first of

1166
00:33:37,919 --> 00:33:39,600
all the core complex this is where the

1167
00:33:39,600 --> 00:33:42,000
cpu is located we use a single core

1168
00:33:42,000 --> 00:33:45,440
wrist fire cpu we're using the rv32 imac

1169
00:33:45,440 --> 00:33:48,799
instruction subset with an mmu and this

1170
00:33:48,799 --> 00:33:50,320
is actually a little bit unusual to have

1171
00:33:50,320 --> 00:33:52,080
meu in a small embedded device

1172
00:33:52,080 --> 00:33:54,320
is normal for phones and servers but we

1173
00:33:54,320 --> 00:33:56,159
insisted on having mmu in our hardware

1174
00:33:56,159 --> 00:33:57,600
configuration because you know we we

1175
00:33:57,600 --> 00:33:59,120
know how to do memory protection

1176
00:33:59,120 --> 00:34:00,320
why don't we use it in our embedded

1177
00:34:00,320 --> 00:34:01,919
devices even though we don't need it for

1178
00:34:01,919 --> 00:34:03,679
paging and virtual memory it's great for

1179
00:34:03,679 --> 00:34:04,960
memory protection

1180
00:34:04,960 --> 00:34:07,279
and we're using an implementation of the

1181
00:34:07,279 --> 00:34:08,320
cpu called uh

1182
00:34:08,320 --> 00:34:11,359
vex risk 5. the vectress 5

1183
00:34:11,359 --> 00:34:13,280
actually itself of course is open source

1184
00:34:13,280 --> 00:34:14,639
there's a github repo for it it was

1185
00:34:14,639 --> 00:34:16,399
actually developed in vex switzerland

1186
00:34:16,399 --> 00:34:19,760
by a guy named charles papano and and uh

1187
00:34:19,760 --> 00:34:20,560
and the uh

1188
00:34:20,560 --> 00:34:23,119
it's written in um spinal hdl scala and

1189
00:34:23,119 --> 00:34:24,399
it's cool you can actually

1190
00:34:24,399 --> 00:34:26,399
you know go to the source and look at

1191
00:34:26,399 --> 00:34:29,040
all the op codes that have been defined

1192
00:34:29,040 --> 00:34:30,960
uh in this particular cpu implementation

1193
00:34:30,960 --> 00:34:32,239
so the question of you know are there

1194
00:34:32,239 --> 00:34:33,839
hidden opcodes there's no longer an

1195
00:34:33,839 --> 00:34:35,359
exercise of fuzzing and throwing all

1196
00:34:35,359 --> 00:34:36,639
kind of opcodes and

1197
00:34:36,639 --> 00:34:37,918
seeing how the cpu behaves you can

1198
00:34:37,918 --> 00:34:39,679
actually look at the source and

1199
00:34:39,679 --> 00:34:43,280
understand what's going on on the inside

1200
00:34:43,280 --> 00:34:46,320
another significant thing that i really

1201
00:34:46,320 --> 00:34:48,560
enjoyed about having this open source

1202
00:34:48,560 --> 00:34:50,480
approach to the cpu is that

1203
00:34:50,480 --> 00:34:53,839
we can patch it right so just a couple

1204
00:34:53,839 --> 00:34:54,719
weeks ago

1205
00:34:54,719 --> 00:34:57,520
the maintainer um had sent me uh charles

1206
00:34:57,520 --> 00:35:00,000
had sent me an email saying oh i found a

1207
00:35:00,000 --> 00:35:02,880
problem there's a csr plug and privilege

1208
00:35:02,880 --> 00:35:05,200
crossing issue that will allow you know

1209
00:35:05,200 --> 00:35:06,320
sort of privileged escalation and

1210
00:35:06,320 --> 00:35:07,520
certain operations

1211
00:35:07,520 --> 00:35:09,119
uh you know on a closed source cpu

1212
00:35:09,119 --> 00:35:10,400
there's fab and silicon this would be

1213
00:35:10,400 --> 00:35:11,680
like a named exploit it'd be like when

1214
00:35:11,680 --> 00:35:13,599
the zombie load or specter level types

1215
00:35:13,599 --> 00:35:15,280
of things you have a logo on a website

1216
00:35:15,280 --> 00:35:16,720
and you know you know be giving black

1217
00:35:16,720 --> 00:35:18,880
hat talks about it whatever it is

1218
00:35:18,880 --> 00:35:20,480
you know on an open source cpu just to

1219
00:35:20,480 --> 00:35:21,920
commit in a patch at the end of the day

1220
00:35:21,920 --> 00:35:23,280
we just found a problem we patched it's

1221
00:35:23,280 --> 00:35:24,640
not a big deal we can go ahead and push

1222
00:35:24,640 --> 00:35:26,640
and update out and this is this is a

1223
00:35:26,640 --> 00:35:28,640
really powerful sort of aspect that i

1224
00:35:28,640 --> 00:35:30,320
look forward to working with and as we

1225
00:35:30,320 --> 00:35:31,440
sort of validate

1226
00:35:31,440 --> 00:35:32,880
precursor with the community we find

1227
00:35:32,880 --> 00:35:34,320
more issues we can go ahead and repair

1228
00:35:34,320 --> 00:35:36,240
our cpus and not have and not be stuck

1229
00:35:36,240 --> 00:35:36,720
with

1230
00:35:36,720 --> 00:35:39,119
sort of unsavory uh decisions which

1231
00:35:39,119 --> 00:35:40,320
brings us to

1232
00:35:40,320 --> 00:35:43,599
issues like spectre so spectre is a

1233
00:35:43,599 --> 00:35:46,320
is a side channel attack against uh cpus

1234
00:35:46,320 --> 00:35:47,440
and it takes advantage of the fact that

1235
00:35:47,440 --> 00:35:47,839
there

1236
00:35:47,839 --> 00:35:50,480
is micro architectural state that can

1237
00:35:50,480 --> 00:35:52,160
leak information about the

1238
00:35:52,160 --> 00:35:54,240
execution status of the cpu based upon a

1239
00:35:54,240 --> 00:35:55,680
timing side channel

1240
00:35:55,680 --> 00:35:57,680
right and so sort of the status quo

1241
00:35:57,680 --> 00:35:59,599
right now is in order to mitigate that

1242
00:35:59,599 --> 00:36:01,440
we have to disable those optimizations

1243
00:36:01,440 --> 00:36:02,880
we don't use them anymore

1244
00:36:02,880 --> 00:36:04,720
uh or we we find a way around them

1245
00:36:04,720 --> 00:36:06,160
because because we don't want to have

1246
00:36:06,160 --> 00:36:06,560
that

1247
00:36:06,560 --> 00:36:08,560
timing side channel well the cool thing

1248
00:36:08,560 --> 00:36:10,880
is that when we have like the ability to

1249
00:36:10,880 --> 00:36:11,200
do

1250
00:36:11,200 --> 00:36:13,040
micro architectural analysis on the on

1251
00:36:13,040 --> 00:36:14,240
the source code

1252
00:36:14,240 --> 00:36:16,079
we may actually be able to do those

1253
00:36:16,079 --> 00:36:17,839
optimizations the compiler maybe will

1254
00:36:17,839 --> 00:36:19,200
reason through

1255
00:36:19,200 --> 00:36:21,040
the code pass maybe reason through the

1256
00:36:21,040 --> 00:36:22,960
optimizations and guarantee there are no

1257
00:36:22,960 --> 00:36:24,800
timing slide channels that are that are

1258
00:36:24,800 --> 00:36:26,640
of issue but we can still have the

1259
00:36:26,640 --> 00:36:28,240
optimizations in areas

1260
00:36:28,240 --> 00:36:30,320
uh which are not timing critical so i

1261
00:36:30,320 --> 00:36:31,599
think that's a potential thing that we

1262
00:36:31,599 --> 00:36:32,960
might be able to look forward to

1263
00:36:32,960 --> 00:36:36,079
with this more open approach to

1264
00:36:36,079 --> 00:36:39,359
soc and cpu design i'd like to give a

1265
00:36:39,359 --> 00:36:40,240
quick shout out

1266
00:36:40,240 --> 00:36:43,440
actually to lidex lidex is a powerful

1267
00:36:43,440 --> 00:36:45,200
system-on-chip integration framework and

1268
00:36:45,200 --> 00:36:46,720
this is what we're using to sort of put

1269
00:36:46,720 --> 00:36:48,560
together the whole chip itself

1270
00:36:48,560 --> 00:36:50,240
um so in addition to all these

1271
00:36:50,240 --> 00:36:51,760
components we have to have a way to glue

1272
00:36:51,760 --> 00:36:52,800
them together

1273
00:36:52,800 --> 00:36:55,040
it's developed by in france uh by a

1274
00:36:55,040 --> 00:36:56,800
fellow named floren uh camarek

1275
00:36:56,800 --> 00:36:58,480
and you can see his github repo over

1276
00:36:58,480 --> 00:37:00,960
here as i mentioned before i alluded to

1277
00:37:00,960 --> 00:37:03,040
the the actual soc is written in python

1278
00:37:03,040 --> 00:37:04,320
it doesn't mean that we're executing

1279
00:37:04,320 --> 00:37:05,040
python

1280
00:37:05,040 --> 00:37:07,760
to emulate it we actually use python 2

1281
00:37:07,760 --> 00:37:08,880
sort of describe

1282
00:37:08,880 --> 00:37:10,320
an intermediate language called verilog

1283
00:37:10,320 --> 00:37:12,720
that we then compile into a bitstream

1284
00:37:12,720 --> 00:37:15,040
that is then loaded onto the chip it's

1285
00:37:15,040 --> 00:37:16,400
really cool in that

1286
00:37:16,400 --> 00:37:18,400
you know none of these decisions i made

1287
00:37:18,400 --> 00:37:19,680
are actually locked in

1288
00:37:19,680 --> 00:37:21,680
if you get the device and you say oh i

1289
00:37:21,680 --> 00:37:22,720
don't want to use

1290
00:37:22,720 --> 00:37:24,560
this particular risk five query there's

1291
00:37:24,560 --> 00:37:25,599
a there's several risk five

1292
00:37:25,599 --> 00:37:27,359
implementations you can pick from

1293
00:37:27,359 --> 00:37:29,680
uh you can use par pc you can use lm32

1294
00:37:29,680 --> 00:37:31,440
or 1k and it's all changeable by just

1295
00:37:31,440 --> 00:37:33,440
changing out a couple strings

1296
00:37:33,440 --> 00:37:35,599
in the in the description of the soc and

1297
00:37:35,599 --> 00:37:36,640
recompile of course you have to deal

1298
00:37:36,640 --> 00:37:37,760
with the software problem

1299
00:37:37,760 --> 00:37:39,119
but you can go ahead and change out the

1300
00:37:39,119 --> 00:37:40,640
hardware quite easily which is actually

1301
00:37:40,640 --> 00:37:41,280
a bit

1302
00:37:41,280 --> 00:37:44,800
inverse from the usual situation

1303
00:37:44,960 --> 00:37:46,640
and finally i kind of want to point out

1304
00:37:46,640 --> 00:37:48,400
the cryptography complex that's another

1305
00:37:48,400 --> 00:37:50,160
thing that might be of interest we've

1306
00:37:50,160 --> 00:37:52,079
gone ahead and built in accelerators for

1307
00:37:52,079 --> 00:37:55,040
common protocols things like aes

1308
00:37:55,040 --> 00:37:58,240
sha 512 shot two curve25519 operations

1309
00:37:58,240 --> 00:37:59,359
those all have

1310
00:37:59,359 --> 00:38:01,520
dedicated hardware accelerators and this

1311
00:38:01,520 --> 00:38:04,160
helps compensate for the relative speed

1312
00:38:04,160 --> 00:38:05,599
of the cpu which is only at 100

1313
00:38:05,599 --> 00:38:07,359
megahertz right now these are running in

1314
00:38:07,359 --> 00:38:11,359
in fpga we also feature a key storage

1315
00:38:11,359 --> 00:38:12,400
rom and the reason why

1316
00:38:12,400 --> 00:38:14,240
it's a specific individual block is we

1317
00:38:14,240 --> 00:38:16,160
do a trick where we hard locate it

1318
00:38:16,160 --> 00:38:17,920
inside the bit stream itself and because

1319
00:38:17,920 --> 00:38:18,240
you

1320
00:38:18,240 --> 00:38:19,680
have the ability to introspect in the

1321
00:38:19,680 --> 00:38:21,599
bitstream it means that

1322
00:38:21,599 --> 00:38:23,920
when we generate new keys we can edit

1323
00:38:23,920 --> 00:38:25,760
the bitstream of the fpga itself

1324
00:38:25,760 --> 00:38:28,720
reload the fpga and have that inside of

1325
00:38:28,720 --> 00:38:30,240
our device without having using any

1326
00:38:30,240 --> 00:38:32,000
third-party tools without any using any

1327
00:38:32,000 --> 00:38:33,920
sort of these burning utilities to go

1328
00:38:33,920 --> 00:38:35,920
ahead and get the the bit stream

1329
00:38:35,920 --> 00:38:37,599
into the end user provision device and

1330
00:38:37,599 --> 00:38:39,119
that was a that's a very important

1331
00:38:39,119 --> 00:38:40,560
priority for the project

1332
00:38:40,560 --> 00:38:42,160
we also have a random number generator

1333
00:38:42,160 --> 00:38:43,680
we have one actually internal to the

1334
00:38:43,680 --> 00:38:44,880
fpga we also

1335
00:38:44,880 --> 00:38:47,520
pair it up with one external to device

1336
00:38:47,520 --> 00:38:49,040
we use this complementary approach

1337
00:38:49,040 --> 00:38:49,520
because

1338
00:38:49,520 --> 00:38:52,720
uh devices the internal ring oscillator

1339
00:38:52,720 --> 00:38:54,320
is a little harder to verify you can go

1340
00:38:54,320 --> 00:38:55,760
ahead and bypass it and bring it to a

1341
00:38:55,760 --> 00:38:56,320
pin

1342
00:38:56,320 --> 00:38:57,760
and then say okay i'm done verifying

1343
00:38:57,760 --> 00:38:59,680
let's let's plug it back into the device

1344
00:38:59,680 --> 00:39:00,720
but you never know if

1345
00:39:00,720 --> 00:39:02,320
actually it's been plugged in or not or

1346
00:39:02,320 --> 00:39:03,520
have been swapped out with something

1347
00:39:03,520 --> 00:39:05,040
that's more deterministic

1348
00:39:05,040 --> 00:39:07,119
um but the good news is that this ring

1349
00:39:07,119 --> 00:39:08,640
oscillator inside the chip

1350
00:39:08,640 --> 00:39:10,560
is a bit harder to tamper with right you

1351
00:39:10,560 --> 00:39:12,240
have to actually get past the epoxy or

1352
00:39:12,240 --> 00:39:12,880
chip and

1353
00:39:12,880 --> 00:39:15,440
attack the silicon itself we also offer

1354
00:39:15,440 --> 00:39:16,400
an external

1355
00:39:16,400 --> 00:39:18,320
uh random number generator that's built

1356
00:39:18,320 --> 00:39:19,599
a little avalanche generator on the

1357
00:39:19,599 --> 00:39:21,040
outside which actually trivially verify

1358
00:39:21,040 --> 00:39:21,839
you can put an

1359
00:39:21,839 --> 00:39:23,839
oscilloscope on it and verify that the

1360
00:39:23,839 --> 00:39:26,000
avalanche diode is doing its thing

1361
00:39:26,000 --> 00:39:28,160
but the problem is is also easier to ver

1362
00:39:28,160 --> 00:39:30,079
uh easier to tamper with because if you

1363
00:39:30,079 --> 00:39:31,520
can get a hold of the hardware

1364
00:39:31,520 --> 00:39:33,280
or maybe expose the user to high levels

1365
00:39:33,280 --> 00:39:35,040
of radiation while they're using it

1366
00:39:35,040 --> 00:39:36,880
uh you can go ahead and maybe disturb

1367
00:39:36,880 --> 00:39:38,800
the operation of the of the device more

1368
00:39:38,800 --> 00:39:39,920
easily the on-chip one so

1369
00:39:39,920 --> 00:39:42,000
we provide both to give some defense and

1370
00:39:42,000 --> 00:39:44,720
depth against different attack scenarios

1371
00:39:44,720 --> 00:39:47,119
and finally we have some tie-downs for

1372
00:39:47,119 --> 00:39:48,880
internal debug buses so it's always

1373
00:39:48,880 --> 00:39:50,160
important to sort of

1374
00:39:50,160 --> 00:39:51,920
take a look at all of the pieces of

1375
00:39:51,920 --> 00:39:53,440
hardware

1376
00:39:53,440 --> 00:39:55,119
that may be laying around that you're

1377
00:39:55,119 --> 00:39:57,359
not using that could leak information

1378
00:39:57,359 --> 00:39:59,440
so we did a quick audit and we tie down

1379
00:39:59,440 --> 00:40:01,280
the blocks that we think

1380
00:40:01,280 --> 00:40:02,480
are going to cause us a problem at the

1381
00:40:02,480 --> 00:40:04,560
end of the day so that's

1382
00:40:04,560 --> 00:40:05,760
that's sort of the nickel tour of

1383
00:40:05,760 --> 00:40:08,079
precursor it's all about sort of

1384
00:40:08,079 --> 00:40:11,040
enabling evidence-based trust and we

1385
00:40:11,040 --> 00:40:12,640
embody the three principles i talked

1386
00:40:12,640 --> 00:40:14,400
about sort of complexity as the enemy of

1387
00:40:14,400 --> 00:40:15,599
verification

1388
00:40:15,599 --> 00:40:17,920
uh we and we so we may build a device

1389
00:40:17,920 --> 00:40:19,520
that hopefully is adequately simple that

1390
00:40:19,520 --> 00:40:21,119
we can verify it

1391
00:40:21,119 --> 00:40:23,359
we want you to verify entire systems and

1392
00:40:23,359 --> 00:40:24,960
not just components

1393
00:40:24,960 --> 00:40:27,599
um and so you know the the precursor

1394
00:40:27,599 --> 00:40:29,359
device itself as you can see is end to

1395
00:40:29,359 --> 00:40:29,920
end

1396
00:40:29,920 --> 00:40:31,359
from your fingertips to your eyes in

1397
00:40:31,359 --> 00:40:33,119
terms of uh maintaining

1398
00:40:33,119 --> 00:40:35,119
custody of your secure information and

1399
00:40:35,119 --> 00:40:36,319
and getting it to

1400
00:40:36,319 --> 00:40:38,880
the human user itself and finally we

1401
00:40:38,880 --> 00:40:39,440
empower

1402
00:40:39,440 --> 00:40:41,359
end users to verify and seal their

1403
00:40:41,359 --> 00:40:43,119
hardware by making open source

1404
00:40:43,119 --> 00:40:44,880
by providing tooling by providing

1405
00:40:44,880 --> 00:40:47,200
documentation at the end of the day

1406
00:40:47,200 --> 00:40:50,240
so the whole concept you know backing

1407
00:40:50,240 --> 00:40:52,000
out into the big picture again

1408
00:40:52,000 --> 00:40:54,240
is that you know precursor allows us to

1409
00:40:54,240 --> 00:40:56,000
close that hardware time of check the

1410
00:40:56,000 --> 00:40:57,680
time of use gap so we have

1411
00:40:57,680 --> 00:40:59,760
you know again the scenario where we we

1412
00:40:59,760 --> 00:41:02,000
may have this whole supply chain

1413
00:41:02,000 --> 00:41:04,640
a lot of actors that are maybe acting

1414
00:41:04,640 --> 00:41:06,160
with or against their interest

1415
00:41:06,160 --> 00:41:08,560
but the idea is that now we enable you

1416
00:41:08,560 --> 00:41:09,680
at the time of use

1417
00:41:09,680 --> 00:41:11,280
right to go ahead and take apart the

1418
00:41:11,280 --> 00:41:13,119
device and look at it and the idea

1419
00:41:13,119 --> 00:41:14,640
part of the idea of making it so open

1420
00:41:14,640 --> 00:41:16,319
and most simple more simple is that even

1421
00:41:16,319 --> 00:41:17,440
if you don't have

1422
00:41:17,440 --> 00:41:19,680
the individual technical know-how to

1423
00:41:19,680 --> 00:41:21,599
inspect the circuit traces or to look at

1424
00:41:21,599 --> 00:41:23,520
an fpga and know what's going on

1425
00:41:23,520 --> 00:41:25,359
it's the idea is to have it within one

1426
00:41:25,359 --> 00:41:26,640
or two degrees of separation

1427
00:41:26,640 --> 00:41:28,079
in your personal social network of

1428
00:41:28,079 --> 00:41:29,520
someone you can consult that you trust

1429
00:41:29,520 --> 00:41:30,800
to get an opinion on this

1430
00:41:30,800 --> 00:41:32,800
which is different from going to for

1431
00:41:32,800 --> 00:41:34,800
example a third party certification

1432
00:41:34,800 --> 00:41:36,400
agency who you know nothing about it's

1433
00:41:36,400 --> 00:41:37,760
just you know a government agency or

1434
00:41:37,760 --> 00:41:39,119
whatever it is that we'll go ahead and

1435
00:41:39,119 --> 00:41:40,960
say sure trust us this thing is secure

1436
00:41:40,960 --> 00:41:42,400
we don't know what their values are

1437
00:41:42,400 --> 00:41:43,599
what their agenda is at the end of the

1438
00:41:43,599 --> 00:41:45,839
day the idea is that you pick

1439
00:41:45,839 --> 00:41:47,599
the authorities that you want the people

1440
00:41:47,599 --> 00:41:48,880
you want to trust to go ahead and do the

1441
00:41:48,880 --> 00:41:50,480
analysis and ideally we make it open

1442
00:41:50,480 --> 00:41:51,599
enough that within a couple of degrees

1443
00:41:51,599 --> 00:41:52,960
of separation in your network

1444
00:41:52,960 --> 00:41:55,760
you can go ahead and sort of create your

1445
00:41:55,760 --> 00:41:56,480
own

1446
00:41:56,480 --> 00:41:58,960
evidence-based trust case for the piece

1447
00:41:58,960 --> 00:42:01,280
of hardware that you're going to use

1448
00:42:01,280 --> 00:42:03,680
so uh here is the current status of

1449
00:42:03,680 --> 00:42:05,440
precursor itself i've talked a bit about

1450
00:42:05,440 --> 00:42:06,000
you know

1451
00:42:06,000 --> 00:42:07,839
what it is but you know here's here's

1452
00:42:07,839 --> 00:42:09,839
where we are today uh right now we have

1453
00:42:09,839 --> 00:42:10,800
hardware

1454
00:42:10,800 --> 00:42:12,880
um we're at a crowdfunding stage

1455
00:42:12,880 --> 00:42:14,880
actually right now uh so it's near final

1456
00:42:14,880 --> 00:42:16,359
and if you go to

1457
00:42:16,359 --> 00:42:18,880
precursor.dev it'll direct you to our

1458
00:42:18,880 --> 00:42:20,240
crowdfunding site you can check out all

1459
00:42:20,240 --> 00:42:22,160
the details about what it is and what

1460
00:42:22,160 --> 00:42:23,839
not there

1461
00:42:23,839 --> 00:42:26,000
the software itself is running in os

1462
00:42:26,000 --> 00:42:28,640
called zeus it's by sean zob's cross

1463
00:42:28,640 --> 00:42:30,560
and he's got it booting we've got

1464
00:42:30,560 --> 00:42:32,079
messages passing we've got memory

1465
00:42:32,079 --> 00:42:33,280
protection going

1466
00:42:33,280 --> 00:42:35,040
uh we're just starting to explore so the

1467
00:42:35,040 --> 00:42:36,800
ux and application side of thing we're

1468
00:42:36,800 --> 00:42:37,920
looking for developers so if you're

1469
00:42:37,920 --> 00:42:38,800
interested

1470
00:42:38,800 --> 00:42:40,720
go ahead and check out the the campaign

1471
00:42:40,720 --> 00:42:42,880
and also you can look at our github

1472
00:42:42,880 --> 00:42:44,880
repo and look at the zeus core

1473
00:42:44,880 --> 00:42:46,720
repository it has that we have an actual

1474
00:42:46,720 --> 00:42:48,240
emulator that runs

1475
00:42:48,240 --> 00:42:51,040
uh on a technology called renode where

1476
00:42:51,040 --> 00:42:51,680
you don't have to

1477
00:42:51,680 --> 00:42:53,119
own the hardware itself to go and start

1478
00:42:53,119 --> 00:42:54,240
writing code for it you can actually

1479
00:42:54,240 --> 00:42:55,040
start in an

1480
00:42:55,040 --> 00:42:57,520
emulated environment and start uh poking

1481
00:42:57,520 --> 00:42:58,720
around and seeing what you can do with

1482
00:42:58,720 --> 00:42:59,359
it

1483
00:42:59,359 --> 00:43:01,200
uh and finally i i want to give a shout

1484
00:43:01,200 --> 00:43:02,960
out to nlnet for funding

1485
00:43:02,960 --> 00:43:06,160
we got a grant uh through ngi zero uh

1486
00:43:06,160 --> 00:43:07,520
for privacy and trust enhancing

1487
00:43:07,520 --> 00:43:08,800
technologies uh

1488
00:43:08,800 --> 00:43:10,960
without sort of their sponsorship we

1489
00:43:10,960 --> 00:43:12,480
would have had to sort of go

1490
00:43:12,480 --> 00:43:14,160
to crowdfunding a lot sooner and we

1491
00:43:14,160 --> 00:43:15,359
wouldn't have been able to be as

1492
00:43:15,359 --> 00:43:16,319
thorough or as

1493
00:43:16,319 --> 00:43:17,280
put as much effort into the

1494
00:43:17,280 --> 00:43:18,720
documentation because we'd be worrying

1495
00:43:18,720 --> 00:43:19,359
about

1496
00:43:19,359 --> 00:43:20,720
you know sort of covering tooling costs

1497
00:43:20,720 --> 00:43:23,280
and stuff all the time and so a really

1498
00:43:23,280 --> 00:43:24,480
big thanks to them for making this

1499
00:43:24,480 --> 00:43:26,640
possible allow us to do this research

1500
00:43:26,640 --> 00:43:28,000
and to share with the community as a

1501
00:43:28,000 --> 00:43:29,680
whole and with that

1502
00:43:29,680 --> 00:43:31,760
um i'd like to turn over to the q a

1503
00:43:31,760 --> 00:43:33,200
thank you everyone for your attention

1504
00:43:33,200 --> 00:43:35,480
and look forward to seeing you guys

1505
00:43:35,480 --> 00:43:38,480
online

