1
00:00:01,180 --> 00:00:14,719
[Music]

2
00:00:15,759 --> 00:00:16,640
hey everybody

3
00:00:16,640 --> 00:00:18,560
my name is baz and i'm a product manager

4
00:00:18,560 --> 00:00:19,680
here at github

5
00:00:19,680 --> 00:00:21,439
with me today is my colleague kevin

6
00:00:21,439 --> 00:00:23,119
buckhouse who is one of the security

7
00:00:23,119 --> 00:00:23,840
researchers

8
00:00:23,840 --> 00:00:25,920
in the github security lab and together

9
00:00:25,920 --> 00:00:27,840
we'd like to tell you about some of the

10
00:00:27,840 --> 00:00:29,039
work we've been doing

11
00:00:29,039 --> 00:00:31,519
in collaboration with our partners in

12
00:00:31,519 --> 00:00:35,040
the open source security foundation

13
00:00:35,040 --> 00:00:37,120
normally i start my conference talks by

14
00:00:37,120 --> 00:00:39,280
saying please interrupt me

15
00:00:39,280 --> 00:00:41,440
but by now you probably know that these

16
00:00:41,440 --> 00:00:42,879
talks are pre-recorded

17
00:00:42,879 --> 00:00:44,239
so it's probably best if you don't try

18
00:00:44,239 --> 00:00:46,000
and interrupt you'll end up shouting at

19
00:00:46,000 --> 00:00:48,320
your screen and it's going to be awkward

20
00:00:48,320 --> 00:00:50,800
but please do send us your questions and

21
00:00:50,800 --> 00:00:52,320
remarks on twitter

22
00:00:52,320 --> 00:00:54,559
our handles are on this title slide

23
00:00:54,559 --> 00:00:56,480
together with the appropriate hashtag

24
00:00:56,480 --> 00:00:58,559
and of course there's the live q a

25
00:00:58,559 --> 00:01:00,800
session afterwards

26
00:01:00,800 --> 00:01:04,159
let's dive in we all know that testing

27
00:01:04,159 --> 00:01:05,438
security tools

28
00:01:05,438 --> 00:01:08,799
is hard that's true for static analysis

29
00:01:08,799 --> 00:01:10,880
tools for dynamic analysis for web

30
00:01:10,880 --> 00:01:12,640
scanning for fuzzing

31
00:01:12,640 --> 00:01:14,479
and about a year ago we asked ourselves

32
00:01:14,479 --> 00:01:16,720
the question is it possible

33
00:01:16,720 --> 00:01:19,600
to use historical cves to benchmark

34
00:01:19,600 --> 00:01:21,119
security tools

35
00:01:21,119 --> 00:01:23,759
it turns out you can and in this talk

36
00:01:23,759 --> 00:01:24,560
we'll explain

37
00:01:24,560 --> 00:01:26,799
how we did it but let's start at the

38
00:01:26,799 --> 00:01:28,000
beginning and

39
00:01:28,000 --> 00:01:30,560
let's look at how most of us benchmark

40
00:01:30,560 --> 00:01:31,680
security tools

41
00:01:31,680 --> 00:01:33,840
right now now kev is a full-time

42
00:01:33,840 --> 00:01:35,280
security researcher

43
00:01:35,280 --> 00:01:37,119
and he's got a lot of experience in this

44
00:01:37,119 --> 00:01:38,640
area so kev

45
00:01:38,640 --> 00:01:42,079
take it away thanks beth

46
00:01:42,079 --> 00:01:43,600
traditionally the way to judge the

47
00:01:43,600 --> 00:01:44,880
quality of a tool for finding

48
00:01:44,880 --> 00:01:45,840
vulnerabilities

49
00:01:45,840 --> 00:01:48,720
is to run it on a synthetic test suite

50
00:01:48,720 --> 00:01:49,759
i'm going to show you a couple of

51
00:01:49,759 --> 00:01:51,600
examples of synthetic test suites

52
00:01:51,600 --> 00:01:53,840
to give you a bit more context on what

53
00:01:53,840 --> 00:01:56,960
their limitations are

54
00:01:57,439 --> 00:01:59,280
so my own main experience with working

55
00:01:59,280 --> 00:02:01,520
on a synthetic test suite is with the

56
00:02:01,520 --> 00:02:03,280
juliet test suite for c and c

57
00:02:03,280 --> 00:02:07,360
plus plus juliet is part of nist's sam8

58
00:02:07,360 --> 00:02:08,800
project

59
00:02:08,800 --> 00:02:12,560
and nist is part of the us department of

60
00:02:12,560 --> 00:02:14,080
homeland security the

61
00:02:14,080 --> 00:02:16,640
purpose of the summit project is to

62
00:02:16,640 --> 00:02:18,720
improve software assurance by developing

63
00:02:18,720 --> 00:02:19,920
methods to enable

64
00:02:19,920 --> 00:02:23,360
software tool evaluations

65
00:02:23,360 --> 00:02:26,000
so naturally as a government-endorsed

66
00:02:26,000 --> 00:02:26,720
test suite

67
00:02:26,720 --> 00:02:30,239
sam8 carries a lot of weight

68
00:02:30,560 --> 00:02:32,720
and if you're a security tool vendor

69
00:02:32,720 --> 00:02:35,120
then there's a high probability that

70
00:02:35,120 --> 00:02:36,000
your potential

71
00:02:36,000 --> 00:02:37,519
customers are going to want to know how

72
00:02:37,519 --> 00:02:39,760
good your summate test score is

73
00:02:39,760 --> 00:02:42,319
so back in 2016 bass and i were both

74
00:02:42,319 --> 00:02:44,239
working for semel that was before semol

75
00:02:44,239 --> 00:02:46,319
was acquired by github

76
00:02:46,319 --> 00:02:48,800
and at that time we were really starting

77
00:02:48,800 --> 00:02:50,720
to focus on the security market

78
00:02:50,720 --> 00:02:52,480
and so it became quite important for us

79
00:02:52,480 --> 00:02:54,160
to make sure that we had a good

80
00:02:54,160 --> 00:02:58,000
sam8 test score i was

81
00:02:58,000 --> 00:03:00,000
a member of the cnc plus plus analysis

82
00:03:00,000 --> 00:03:01,599
team at the time

83
00:03:01,599 --> 00:03:04,800
and so i helped to

84
00:03:04,800 --> 00:03:06,480
work on the juliet test suite to make

85
00:03:06,480 --> 00:03:07,920
sure that we were getting a good score

86
00:03:07,920 --> 00:03:10,080
on it

87
00:03:10,080 --> 00:03:11,760
this is an example of one of the tests

88
00:03:11,760 --> 00:03:14,400
that i worked on this is a test that

89
00:03:14,400 --> 00:03:17,040
is intended to determine whether your

90
00:03:17,040 --> 00:03:18,879
tool is able to detect

91
00:03:18,879 --> 00:03:22,159
integer overflows so what this test does

92
00:03:22,159 --> 00:03:25,040
is it uses f scanf to read a number from

93
00:03:25,040 --> 00:03:26,319
standard in

94
00:03:26,319 --> 00:03:28,480
and then down here there's a

95
00:03:28,480 --> 00:03:29,840
multiplication where they're squaring

96
00:03:29,840 --> 00:03:30,879
the number

97
00:03:30,879 --> 00:03:33,599
and that squaring operation might have

98
00:03:33,599 --> 00:03:35,680
an integer overflow

99
00:03:35,680 --> 00:03:38,879
so you pass this test if you tag line

100
00:03:38,879 --> 00:03:42,640
38 as being a potential vulnerability

101
00:03:42,640 --> 00:03:46,159
now here's another example again

102
00:03:46,159 --> 00:03:47,760
it's testing whether you can detect

103
00:03:47,760 --> 00:03:49,599
integer overflow and you can see it's

104
00:03:49,599 --> 00:03:51,200
very similar to the previous test

105
00:03:51,200 --> 00:03:53,360
um the difference here is that it's

106
00:03:53,360 --> 00:03:54,400
using f

107
00:03:54,400 --> 00:03:56,799
gets to read from standard in rather

108
00:03:56,799 --> 00:03:58,159
than f scanf

109
00:03:58,159 --> 00:03:59,920
uh the data flow's a little bit

110
00:03:59,920 --> 00:04:01,920
different and

111
00:04:01,920 --> 00:04:05,120
they're um doubling the number rather

112
00:04:05,120 --> 00:04:06,000
than squaring it

113
00:04:06,000 --> 00:04:09,920
on line 45 so

114
00:04:09,920 --> 00:04:12,080
i wrote a test i wrote a query that was

115
00:04:12,080 --> 00:04:13,920
able to detect this pattern and in fact

116
00:04:13,920 --> 00:04:15,519
that query was really good bang for the

117
00:04:15,519 --> 00:04:16,720
buck because

118
00:04:16,720 --> 00:04:19,040
what they've done is they've actually

119
00:04:19,040 --> 00:04:20,880
written those scripts that generates

120
00:04:20,880 --> 00:04:22,240
thousands

121
00:04:22,240 --> 00:04:24,160
of these tests so they've got a few

122
00:04:24,160 --> 00:04:25,759
different ways of

123
00:04:25,759 --> 00:04:28,160
reading from standard in a few different

124
00:04:28,160 --> 00:04:28,960
forms of

125
00:04:28,960 --> 00:04:31,520
data flow and a few different operations

126
00:04:31,520 --> 00:04:33,120
that might have an industry overflow in

127
00:04:33,120 --> 00:04:34,400
them and they've generated the cross

128
00:04:34,400 --> 00:04:35,520
product of those

129
00:04:35,520 --> 00:04:38,160
and so with a single query i was able to

130
00:04:38,160 --> 00:04:39,919
improve our test score by

131
00:04:39,919 --> 00:04:43,040
a few thousand the problem with this

132
00:04:43,040 --> 00:04:44,639
test is it's not a very realistic

133
00:04:44,639 --> 00:04:45,840
vulnerability

134
00:04:45,840 --> 00:04:49,520
because if you look on line 46

135
00:04:49,520 --> 00:04:51,280
all that all that's happening with that

136
00:04:51,280 --> 00:04:52,800
number that might overflow is it's

137
00:04:52,800 --> 00:04:55,360
getting printed out

138
00:04:55,360 --> 00:04:58,880
and so nothing bad really happens

139
00:04:58,880 --> 00:05:00,880
and so if you show this result to a

140
00:05:00,880 --> 00:05:02,479
developer

141
00:05:02,479 --> 00:05:03,680
they're probably not going to be very

142
00:05:03,680 --> 00:05:05,840
interested because this is not a real

143
00:05:05,840 --> 00:05:07,360
vulnerability

144
00:05:07,360 --> 00:05:09,440
and so in fact that query that i wrote

145
00:05:09,440 --> 00:05:10,720
we've rated it

146
00:05:10,720 --> 00:05:13,360
a low precision query and we don't

147
00:05:13,360 --> 00:05:14,639
display that query

148
00:05:14,639 --> 00:05:16,479
those query results to developers by

149
00:05:16,479 --> 00:05:17,919
default because in practice it's just

150
00:05:17,919 --> 00:05:20,479
too noisy on real code

151
00:05:20,479 --> 00:05:22,639
things that might overflow very common

152
00:05:22,639 --> 00:05:24,160
in c code and most of the time they're

153
00:05:24,160 --> 00:05:25,120
not a problem

154
00:05:25,120 --> 00:05:27,120
and so if you just display all of them

155
00:05:27,120 --> 00:05:28,560
then it's just noise from the

156
00:05:28,560 --> 00:05:29,759
developer's point of view

157
00:05:29,759 --> 00:05:33,039
and it's not useful to them

158
00:05:33,039 --> 00:05:34,960
so let's move on to the second example

159
00:05:34,960 --> 00:05:36,160
of a test suite

160
00:05:36,160 --> 00:05:38,800
and this is something called owasp juice

161
00:05:38,800 --> 00:05:39,840
shop

162
00:05:39,840 --> 00:05:43,680
and this is actually a really well made

163
00:05:43,680 --> 00:05:46,720
piece of code it's um tagline is the

164
00:05:46,720 --> 00:05:47,520
most modern

165
00:05:47,520 --> 00:05:49,520
and sophisticated insecure web

166
00:05:49,520 --> 00:05:50,960
application

167
00:05:50,960 --> 00:05:52,080
and so what they've done is they've made

168
00:05:52,080 --> 00:05:54,160
a very detailed model of

169
00:05:54,160 --> 00:05:57,280
um an e-commerce website

170
00:05:57,280 --> 00:05:59,680
with vulnerabilities deliberately

171
00:05:59,680 --> 00:06:00,800
inserted

172
00:06:00,800 --> 00:06:02,639
now something important to point out

173
00:06:02,639 --> 00:06:04,800
here is that juice shop is not primarily

174
00:06:04,800 --> 00:06:06,800
intended as a test suite it's intended

175
00:06:06,800 --> 00:06:08,319
as a teaching tool

176
00:06:08,319 --> 00:06:11,600
the idea is that people can study how it

177
00:06:11,600 --> 00:06:12,240
works

178
00:06:12,240 --> 00:06:13,600
and learn about the different kinds of

179
00:06:13,600 --> 00:06:14,960
vulnerabilities that you need to watch

180
00:06:14,960 --> 00:06:16,000
out for

181
00:06:16,000 --> 00:06:18,560
if you're going to develop an e-commerce

182
00:06:18,560 --> 00:06:21,280
application of your own

183
00:06:21,280 --> 00:06:24,880
let me just show you juice shop

184
00:06:24,880 --> 00:06:27,520
so you can see here it's uh it's like an

185
00:06:27,520 --> 00:06:28,800
e-commerce website

186
00:06:28,800 --> 00:06:32,720
that sells different types of juice

187
00:06:33,199 --> 00:06:35,360
let me show you an example of the kinds

188
00:06:35,360 --> 00:06:36,800
of vulnerabilities that they've inserted

189
00:06:36,800 --> 00:06:38,000
so if i go

190
00:06:38,000 --> 00:06:41,280
to the login box here there's an sql

191
00:06:41,280 --> 00:06:48,720
injection attack

192
00:06:48,720 --> 00:06:50,960
um and so what's happened now is that

193
00:06:50,960 --> 00:06:52,000
i've

194
00:06:52,000 --> 00:06:54,319
used that sql injection to be able to

195
00:06:54,319 --> 00:06:56,160
log in as the admin user

196
00:06:56,160 --> 00:06:59,440
on the website and you can see that uh

197
00:06:59,440 --> 00:07:01,680
the application has detected that i've

198
00:07:01,680 --> 00:07:03,520
done that and is congratulating me for

199
00:07:03,520 --> 00:07:05,520
having solved one of the challenges in

200
00:07:05,520 --> 00:07:08,000
juice shop

201
00:07:08,639 --> 00:07:11,360
let me show you the code where that sql

202
00:07:11,360 --> 00:07:13,360
injection vulnerability is

203
00:07:13,360 --> 00:07:16,960
that's here so you can see here that

204
00:07:16,960 --> 00:07:17,680
they're building

205
00:07:17,680 --> 00:07:20,240
an sql query and that's where the sql

206
00:07:20,240 --> 00:07:21,199
injection

207
00:07:21,199 --> 00:07:24,080
vulnerability is so even though juice

208
00:07:24,080 --> 00:07:25,199
shop is not

209
00:07:25,199 --> 00:07:27,120
specifically designed as a test suite

210
00:07:27,120 --> 00:07:28,720
it's certainly useful

211
00:07:28,720 --> 00:07:31,840
for um

212
00:07:32,080 --> 00:07:34,080
detecting whether or not your security

213
00:07:34,080 --> 00:07:35,919
tool can find these kinds of

214
00:07:35,919 --> 00:07:37,759
vulnerabilities so you can run your your

215
00:07:37,759 --> 00:07:39,360
tool and the code and see if it can find

216
00:07:39,360 --> 00:07:44,879
this line of code

217
00:07:44,879 --> 00:07:46,400
the problem is that even something

218
00:07:46,400 --> 00:07:48,639
that's as well designed as juice shop

219
00:07:48,639 --> 00:07:52,160
is still skewed if you

220
00:07:52,160 --> 00:07:54,879
see some dodgy code in induce shop then

221
00:07:54,879 --> 00:07:55,280
there's

222
00:07:55,280 --> 00:07:57,120
high chance that it's a planted

223
00:07:57,120 --> 00:07:59,039
vulnerability so it's a different

224
00:07:59,039 --> 00:08:00,960
situation than if you are looking at a

225
00:08:00,960 --> 00:08:03,280
genuine e-commerce application

226
00:08:03,280 --> 00:08:05,840
if you saw dodgy code in a genuine

227
00:08:05,840 --> 00:08:07,199
e-commerce application

228
00:08:07,199 --> 00:08:08,879
it might be a vulnerability but it might

229
00:08:08,879 --> 00:08:10,160
not i mean there's a good chance the

230
00:08:10,160 --> 00:08:11,599
developer does in fact know what they're

231
00:08:11,599 --> 00:08:12,400
doing

232
00:08:12,400 --> 00:08:14,960
and if you look a bit closer for example

233
00:08:14,960 --> 00:08:17,039
you look up the cool stack you may well

234
00:08:17,039 --> 00:08:18,800
find that they've got some sanitization

235
00:08:18,800 --> 00:08:20,319
code in there to make sure that there

236
00:08:20,319 --> 00:08:22,080
isn't an sql injection

237
00:08:22,080 --> 00:08:24,000
possibility in in the code that you're

238
00:08:24,000 --> 00:08:27,520
looking at

239
00:08:27,520 --> 00:08:31,440
so my opinion is that

240
00:08:31,440 --> 00:08:33,839
synthetic test suites create false

241
00:08:33,839 --> 00:08:34,958
incentives

242
00:08:34,958 --> 00:08:36,479
the problem with all of them even

243
00:08:36,479 --> 00:08:39,039
something as high quality as due shop

244
00:08:39,039 --> 00:08:41,519
is that they encourage tools to tag

245
00:08:41,519 --> 00:08:43,599
everything that looks a bit dodgy

246
00:08:43,599 --> 00:08:45,040
and the problem that that creates is

247
00:08:45,040 --> 00:08:46,800
that when you then run that tool

248
00:08:46,800 --> 00:08:49,920
on real code they tend to produce a lot

249
00:08:49,920 --> 00:08:52,880
of false positives

250
00:08:52,880 --> 00:08:55,120
and developers really don't like false

251
00:08:55,120 --> 00:08:57,279
positives if your

252
00:08:57,279 --> 00:09:00,080
uh vulnerability scanning tool is too

253
00:09:00,080 --> 00:09:00,720
noisy

254
00:09:00,720 --> 00:09:01,839
then they're just going to start

255
00:09:01,839 --> 00:09:04,080
ignoring it which defeats the point of

256
00:09:04,080 --> 00:09:06,720
having the tool in the first place so

257
00:09:06,720 --> 00:09:08,080
i'm going to hand back to bass now

258
00:09:08,080 --> 00:09:10,399
and he's going to talk about what we've

259
00:09:10,399 --> 00:09:11,279
done to

260
00:09:11,279 --> 00:09:14,480
try and improve this situation thanks

261
00:09:14,480 --> 00:09:16,959
thanks kev that was absolutely great so

262
00:09:16,959 --> 00:09:19,040
as kev pointed out with this example

263
00:09:19,040 --> 00:09:21,120
benchmark code bases contain synthetic

264
00:09:21,120 --> 00:09:22,160
vulnerabilities that are very different

265
00:09:22,160 --> 00:09:23,440
from real vulnerabilities

266
00:09:23,440 --> 00:09:27,440
and as a result the security tools

267
00:09:27,440 --> 00:09:29,200
produce lots of false positives and

268
00:09:29,200 --> 00:09:31,120
false negatives

269
00:09:31,120 --> 00:09:32,959
due to the way these vulnerabilities are

270
00:09:32,959 --> 00:09:34,480
planted

271
00:09:34,480 --> 00:09:36,080
one other problem that we actually see

272
00:09:36,080 --> 00:09:38,000
with synthetic benchmarks is that those

273
00:09:38,000 --> 00:09:38,800
code bases

274
00:09:38,800 --> 00:09:40,560
have very few dependencies they don't

275
00:09:40,560 --> 00:09:41,839
really test

276
00:09:41,839 --> 00:09:45,200
for the complex interplay between

277
00:09:45,200 --> 00:09:47,839
the source code itself and dependencies

278
00:09:47,839 --> 00:09:49,680
like web frameworks or

279
00:09:49,680 --> 00:09:52,160
database frameworks sql frameworks and

280
00:09:52,160 --> 00:09:53,040
that's interesting

281
00:09:53,040 --> 00:09:54,880
because lots of vulnerabilities lots of

282
00:09:54,880 --> 00:09:56,160
cves

283
00:09:56,160 --> 00:09:59,360
actually are caused by that complex

284
00:09:59,360 --> 00:10:00,080
interplay

285
00:10:00,080 --> 00:10:02,240
so a security tool that works well on a

286
00:10:02,240 --> 00:10:03,760
synthetic benchmark

287
00:10:03,760 --> 00:10:06,240
might not do well at all in real life

288
00:10:06,240 --> 00:10:08,640
because it's missing those results

289
00:10:08,640 --> 00:10:12,160
last but not least synthetic code bases

290
00:10:12,160 --> 00:10:15,279
rarely come with patches

291
00:10:15,279 --> 00:10:17,680
and we need those patches in order to

292
00:10:17,680 --> 00:10:18,640
determine

293
00:10:18,640 --> 00:10:22,480
whether a security tool is able

294
00:10:22,480 --> 00:10:26,000
to recognize a fix if it can't recognize

295
00:10:26,000 --> 00:10:26,800
a fix

296
00:10:26,800 --> 00:10:28,320
that means it will flag up a false

297
00:10:28,320 --> 00:10:30,560
positive it will continue to flag up a

298
00:10:30,560 --> 00:10:32,880
code base is vulnerable even after

299
00:10:32,880 --> 00:10:35,040
it has been patched and if you work on a

300
00:10:35,040 --> 00:10:36,560
security team or if you're a developer

301
00:10:36,560 --> 00:10:38,160
working with security tools

302
00:10:38,160 --> 00:10:40,640
you know how frustrating it is when

303
00:10:40,640 --> 00:10:42,000
security tools

304
00:10:42,000 --> 00:10:45,200
flag up hundreds or even thousands of

305
00:10:45,200 --> 00:10:48,079
false positives

306
00:10:48,399 --> 00:10:51,440
so conclusion synthetic vulnerabilities

307
00:10:51,440 --> 00:10:52,560
are not the same

308
00:10:52,560 --> 00:10:55,200
as real vulnerabilities so why have we

309
00:10:55,200 --> 00:10:56,480
been using those synthetic

310
00:10:56,480 --> 00:10:58,720
vulnerabilities for all those years

311
00:10:58,720 --> 00:11:01,360
well the simple answer is using real

312
00:11:01,360 --> 00:11:02,480
data

313
00:11:02,480 --> 00:11:05,200
used to be infeasible and i'm not saying

314
00:11:05,200 --> 00:11:06,160
it's easy now

315
00:11:06,160 --> 00:11:09,360
but it's become a little bit easier

316
00:11:09,360 --> 00:11:12,800
because we have more data

317
00:11:12,800 --> 00:11:15,120
the first reason for having more data is

318
00:11:15,120 --> 00:11:17,680
there's simply more open source code

319
00:11:17,680 --> 00:11:19,360
and more vulnerabilities in open source

320
00:11:19,360 --> 00:11:21,120
code in the early 2000s

321
00:11:21,120 --> 00:11:23,519
a lot of cves were related to

322
00:11:23,519 --> 00:11:25,680
closed-sourced application

323
00:11:25,680 --> 00:11:27,920
applications and that means that these

324
00:11:27,920 --> 00:11:29,600
cves were not very useful for

325
00:11:29,600 --> 00:11:31,040
benchmarking tools with because the

326
00:11:31,040 --> 00:11:33,600
tools often need the source code

327
00:11:33,600 --> 00:11:36,959
it's also a lot easier these days

328
00:11:36,959 --> 00:11:39,519
for small open source projects to

329
00:11:39,519 --> 00:11:41,040
request a cve

330
00:11:41,040 --> 00:11:43,120
for their vulnerabilities previously

331
00:11:43,120 --> 00:11:44,880
only large projects like apache could do

332
00:11:44,880 --> 00:11:45,279
that

333
00:11:45,279 --> 00:11:47,200
but smaller projects can do that too now

334
00:11:47,200 --> 00:11:50,639
that means we have more cvs to play with

335
00:11:50,639 --> 00:11:52,399
and last but not least there are now

336
00:11:52,399 --> 00:11:54,240
bounty programs that means there are

337
00:11:54,240 --> 00:11:54,800
more people

338
00:11:54,800 --> 00:11:56,480
interested in hunting for

339
00:11:56,480 --> 00:11:58,320
vulnerabilities in open source code

340
00:11:58,320 --> 00:12:00,320
therefore we have more vulnerabilities

341
00:12:00,320 --> 00:12:01,600
thank you very much to google and

342
00:12:01,600 --> 00:12:02,320
hackerone

343
00:12:02,320 --> 00:12:05,120
and companies like them who who provide

344
00:12:05,120 --> 00:12:06,480
those bounty programs

345
00:12:06,480 --> 00:12:09,200
for open source code so we have more

346
00:12:09,200 --> 00:12:09,680
data

347
00:12:09,680 --> 00:12:12,720
we also have more compute power and why

348
00:12:12,720 --> 00:12:15,120
is that interesting well running a

349
00:12:15,120 --> 00:12:17,200
security tool takes time

350
00:12:17,200 --> 00:12:19,360
and running it on one code base is

351
00:12:19,360 --> 00:12:20,880
sometimes already hard enough

352
00:12:20,880 --> 00:12:23,279
now imagine having to run it on hundreds

353
00:12:23,279 --> 00:12:24,160
of code bases

354
00:12:24,160 --> 00:12:26,320
because there are hundreds of cves to

355
00:12:26,320 --> 00:12:27,680
test against

356
00:12:27,680 --> 00:12:30,320
well luckily that problem is

357
00:12:30,320 --> 00:12:32,000
embarrassingly parallel

358
00:12:32,000 --> 00:12:34,079
which means that we can just run it in

359
00:12:34,079 --> 00:12:35,440
the cloud in

360
00:12:35,440 --> 00:12:39,360
parallel on large numbers of machines

361
00:12:39,360 --> 00:12:40,959
last but not least we have more

362
00:12:40,959 --> 00:12:42,959
community power the security community

363
00:12:42,959 --> 00:12:43,760
has grown

364
00:12:43,760 --> 00:12:46,639
massively in the last couple of years

365
00:12:46,639 --> 00:12:47,120
and

366
00:12:47,120 --> 00:12:48,959
it's a it's very hard for people to

367
00:12:48,959 --> 00:12:51,120
collaborate on a single vulnerable

368
00:12:51,120 --> 00:12:53,360
synthetic code base but it's a lot

369
00:12:53,360 --> 00:12:55,120
easier for all of us

370
00:12:55,120 --> 00:12:58,959
to contribute metadata on different cves

371
00:12:58,959 --> 00:13:00,959
so let's have a look at the data for

372
00:13:00,959 --> 00:13:02,480
cves

373
00:13:02,480 --> 00:13:04,399
i mean i could fill a whole blackhead

374
00:13:04,399 --> 00:13:05,680
talk with just

375
00:13:05,680 --> 00:13:07,519
patterns and cve data but let's not do

376
00:13:07,519 --> 00:13:09,600
that let's have a look at the of the

377
00:13:09,600 --> 00:13:10,480
overall picture

378
00:13:10,480 --> 00:13:15,440
since 1999 we have assigned about 145

379
00:13:15,440 --> 00:13:19,519
000 cves and in the last three years

380
00:13:19,519 --> 00:13:22,480
there's been on average 40 cves per day

381
00:13:22,480 --> 00:13:24,000
but in 2020 so far

382
00:13:24,000 --> 00:13:27,360
it's gone up to 53 cvs per day

383
00:13:27,360 --> 00:13:30,480
so we're in for a record this year

384
00:13:30,480 --> 00:13:34,079
so we have lots of data to use for our

385
00:13:34,079 --> 00:13:37,120
cve benchmark initiative

386
00:13:37,120 --> 00:13:40,880
and here are the details

387
00:13:40,880 --> 00:13:44,720
our current benchmark contains over 200

388
00:13:44,720 --> 00:13:48,480
javascript and typescript cvs in

389
00:13:48,480 --> 00:13:52,240
open source projects and it consists of

390
00:13:52,240 --> 00:13:54,240
sort of three components for every

391
00:13:54,240 --> 00:13:55,519
single one of those cvs

392
00:13:55,519 --> 00:13:58,480
we have source code both vulnerable and

393
00:13:58,480 --> 00:14:00,160
batch code

394
00:14:00,160 --> 00:14:03,279
for each of those cvs we have metadata

395
00:14:03,279 --> 00:14:05,600
most importantly the fix commit and the

396
00:14:05,600 --> 00:14:07,120
exact code locations where we would

397
00:14:07,120 --> 00:14:08,880
expect a tool to flag up

398
00:14:08,880 --> 00:14:12,000
an alert or a vulnerability and

399
00:14:12,000 --> 00:14:15,440
three we have tooling or a cli to feed

400
00:14:15,440 --> 00:14:17,199
those cves

401
00:14:17,199 --> 00:14:19,120
to the security tools and then generate

402
00:14:19,120 --> 00:14:20,560
a report on

403
00:14:20,560 --> 00:14:24,240
how well these tools did

404
00:14:24,240 --> 00:14:26,560
and the benchmark is really interested

405
00:14:26,560 --> 00:14:27,839
in two

406
00:14:27,839 --> 00:14:30,959
two measurements two aspects one is

407
00:14:30,959 --> 00:14:33,519
how good are these tools at actually

408
00:14:33,519 --> 00:14:35,519
detecting the vulnerability

409
00:14:35,519 --> 00:14:37,600
in the vulnerable code that we call the

410
00:14:37,600 --> 00:14:38,959
sensitivity

411
00:14:38,959 --> 00:14:42,000
so we want tools to have a low false

412
00:14:42,000 --> 00:14:45,839
negative rate and secondly we care

413
00:14:45,839 --> 00:14:48,959
about the number of patches

414
00:14:48,959 --> 00:14:51,440
the security tools recognized because if

415
00:14:51,440 --> 00:14:52,959
they don't recognize the patch that

416
00:14:52,959 --> 00:14:55,040
results in a false positive

417
00:14:55,040 --> 00:14:56,959
and we want a tool to have a low false

418
00:14:56,959 --> 00:14:58,480
positive rate we call that the

419
00:14:58,480 --> 00:15:00,770
specificity

420
00:15:00,770 --> 00:15:02,079
[Music]

421
00:15:02,079 --> 00:15:04,800
and here's the outline of of the process

422
00:15:04,800 --> 00:15:06,399
for every cde

423
00:15:06,399 --> 00:15:09,600
and for every tool we feed

424
00:15:09,600 --> 00:15:13,360
both the vulnerable and the patched code

425
00:15:13,360 --> 00:15:16,639
to the tool and then we check does this

426
00:15:16,639 --> 00:15:17,680
tool indeed

427
00:15:17,680 --> 00:15:20,399
flag up the cve or is it a false

428
00:15:20,399 --> 00:15:21,279
negative

429
00:15:21,279 --> 00:15:23,519
and does it recognize the patch or does

430
00:15:23,519 --> 00:15:26,079
it produce a false positive

431
00:15:26,079 --> 00:15:28,639
and then we add the score for that cve

432
00:15:28,639 --> 00:15:30,639
to the scorecard

433
00:15:30,639 --> 00:15:32,800
for the tool and this all runs on your

434
00:15:32,800 --> 00:15:34,399
machine today i'll give you a demo

435
00:15:34,399 --> 00:15:37,040
in a moment and the cv benchmarking

436
00:15:37,040 --> 00:15:37,600
tooling

437
00:15:37,600 --> 00:15:39,519
takes care of all of the all of the

438
00:15:39,519 --> 00:15:41,120
plumbing connects it all together it

439
00:15:41,120 --> 00:15:42,639
cleans the git repository runs

440
00:15:42,639 --> 00:15:45,199
tools it decides whether a tool

441
00:15:45,199 --> 00:15:46,240
recognized

442
00:15:46,240 --> 00:15:50,800
the cve and it generates a report

443
00:15:51,199 --> 00:15:53,120
but i just glossed over how do we

444
00:15:53,120 --> 00:15:54,560
actually know

445
00:15:54,560 --> 00:15:57,680
that a tool detected a cve and how do we

446
00:15:57,680 --> 00:15:59,759
know it recognized a patch

447
00:15:59,759 --> 00:16:01,920
well first of all we scan the vulnerable

448
00:16:01,920 --> 00:16:03,839
code base as i just explained

449
00:16:03,839 --> 00:16:06,880
and then we look at the metadata for the

450
00:16:06,880 --> 00:16:07,680
cve

451
00:16:07,680 --> 00:16:10,959
in the benchmark data set because we've

452
00:16:10,959 --> 00:16:13,839
specified for each cve which code

453
00:16:13,839 --> 00:16:14,720
locations

454
00:16:14,720 --> 00:16:17,680
we care about where do we expect a tool

455
00:16:17,680 --> 00:16:18,639
to flag up

456
00:16:18,639 --> 00:16:21,920
an alert if a tool does not flag up an

457
00:16:21,920 --> 00:16:23,440
alert in any of these locations

458
00:16:23,440 --> 00:16:25,759
we call that a false negative this tool

459
00:16:25,759 --> 00:16:26,800
did not

460
00:16:26,800 --> 00:16:30,160
detect the cve if the tool did indeed

461
00:16:30,160 --> 00:16:32,639
flag up the cve then we look at very

462
00:16:32,639 --> 00:16:33,440
carefully

463
00:16:33,440 --> 00:16:35,920
which rule was responsible for

464
00:16:35,920 --> 00:16:37,120
generating that alert

465
00:16:37,120 --> 00:16:39,279
because we need that in step number two

466
00:16:39,279 --> 00:16:40,560
where we check

467
00:16:40,560 --> 00:16:43,839
the patched code base we know from step

468
00:16:43,839 --> 00:16:45,759
one which rule generated the interesting

469
00:16:45,759 --> 00:16:46,399
alert

470
00:16:46,399 --> 00:16:48,639
on the patched code base when we run the

471
00:16:48,639 --> 00:16:50,720
security tool again we expect that

472
00:16:50,720 --> 00:16:51,759
particular rule

473
00:16:51,759 --> 00:16:55,519
to report fewer alerts if it reports

474
00:16:55,519 --> 00:16:57,279
just the same number of alerts that

475
00:16:57,279 --> 00:16:58,720
means that

476
00:16:58,720 --> 00:17:00,320
it is actually reporting a false

477
00:17:00,320 --> 00:17:02,560
positive after all the vulnerability has

478
00:17:02,560 --> 00:17:04,000
been fixed so we should see

479
00:17:04,000 --> 00:17:06,880
fewer alerts

480
00:17:07,359 --> 00:17:08,880
let me show you how that works in

481
00:17:08,880 --> 00:17:10,720
practice in action

482
00:17:10,720 --> 00:17:12,640
so i'm going to start with a c with a

483
00:17:12,640 --> 00:17:16,079
cli very briefly

484
00:17:16,839 --> 00:17:19,439
um

485
00:17:19,439 --> 00:17:22,640
here um i am about to start the cli

486
00:17:22,640 --> 00:17:25,439
um on eslint that means i'm going to ask

487
00:17:25,439 --> 00:17:26,400
eslint

488
00:17:26,400 --> 00:17:29,200
to analyze a bunch of cves that analyze

489
00:17:29,200 --> 00:17:31,120
a bunch of code bases for cvs

490
00:17:31,120 --> 00:17:33,760
in fact i've asked it to analyze code

491
00:17:33,760 --> 00:17:34,320
bases

492
00:17:34,320 --> 00:17:37,679
analyze cves related to the miter cwe

493
00:17:37,679 --> 00:17:38,559
top 25

494
00:17:38,559 --> 00:17:41,039
so we've determined which cves are of

495
00:17:41,039 --> 00:17:42,000
interest

496
00:17:42,000 --> 00:17:47,840
and are now running eslint against that

497
00:17:48,240 --> 00:17:51,520
and the output of the cd benchmark tool

498
00:17:51,520 --> 00:17:54,720
is a bunch of json files so you can just

499
00:17:54,720 --> 00:17:57,520
manually inspect those and manually

500
00:17:57,520 --> 00:17:58,640
analyze those

501
00:17:58,640 --> 00:18:02,240
if you if you like let me stop that here

502
00:18:02,240 --> 00:18:03,600
because i've actually got those results

503
00:18:03,600 --> 00:18:04,480
ready already

504
00:18:04,480 --> 00:18:08,240
um let's have a look at one of the ways

505
00:18:08,240 --> 00:18:11,200
in which the cve a benchmark framework

506
00:18:11,200 --> 00:18:14,000
outputs its results

507
00:18:14,000 --> 00:18:15,919
one of them is on the cli nice and

508
00:18:15,919 --> 00:18:17,120
simple in

509
00:18:17,120 --> 00:18:19,520
an ascii formatted table so if you're

510
00:18:19,520 --> 00:18:20,799
working on a cli and you want to have a

511
00:18:20,799 --> 00:18:22,160
quick look at what the results are you

512
00:18:22,160 --> 00:18:23,200
can do that right there

513
00:18:23,200 --> 00:18:25,840
but more importantly there is also a web

514
00:18:25,840 --> 00:18:26,640
interface

515
00:18:26,640 --> 00:18:29,360
that presents all of the results for

516
00:18:29,360 --> 00:18:31,280
every cve for every tool

517
00:18:31,280 --> 00:18:33,760
organized by cwb so you see the

518
00:18:33,760 --> 00:18:35,440
different tools that i've benchmarked

519
00:18:35,440 --> 00:18:37,600
for this particular

520
00:18:37,600 --> 00:18:40,799
occasion as columns i've left the

521
00:18:40,799 --> 00:18:42,320
tool names off because i'm not actually

522
00:18:42,320 --> 00:18:43,600
interested in giving you advice on which

523
00:18:43,600 --> 00:18:45,360
tools are good and which tools are bad

524
00:18:45,360 --> 00:18:47,120
i'm just interested in showing you the

525
00:18:47,120 --> 00:18:49,679
benchmark framework here

526
00:18:49,679 --> 00:18:53,200
and what you see here is at the top a

527
00:18:53,200 --> 00:18:54,320
summary

528
00:18:54,320 --> 00:18:57,440
in green um the green indicates that a

529
00:18:57,440 --> 00:18:58,240
tool has

530
00:18:58,240 --> 00:19:01,440
found in this case 16 of

531
00:19:01,440 --> 00:19:03,440
the cves it's found both the

532
00:19:03,440 --> 00:19:05,520
vulnerability and has recognized the

533
00:19:05,520 --> 00:19:06,320
patch

534
00:19:06,320 --> 00:19:09,679
the orange bar indicates that for 48

535
00:19:09,679 --> 00:19:10,960
it did indeed recognize the

536
00:19:10,960 --> 00:19:12,720
vulnerability but not the patch

537
00:19:12,720 --> 00:19:14,400
and red of course tells you that i

538
00:19:14,400 --> 00:19:16,720
didn't recognize anything at all

539
00:19:16,720 --> 00:19:18,400
and these are relative percentages

540
00:19:18,400 --> 00:19:19,760
relative to

541
00:19:19,760 --> 00:19:24,160
the cves that were detectable so we're

542
00:19:24,160 --> 00:19:26,000
looking at cves that were detected by at

543
00:19:26,000 --> 00:19:26,640
least

544
00:19:26,640 --> 00:19:29,600
one of the tools in the benchmark

545
00:19:29,600 --> 00:19:30,799
exercise

546
00:19:30,799 --> 00:19:33,919
and i can of course look at which

547
00:19:33,919 --> 00:19:37,200
tools actually recognized which cves

548
00:19:37,200 --> 00:19:39,440
so for example i can drill down into

549
00:19:39,440 --> 00:19:41,200
cwe20

550
00:19:41,200 --> 00:19:44,880
and click on this cve over here

551
00:19:44,880 --> 00:19:48,559
and i can see the source code i can see

552
00:19:48,559 --> 00:19:49,760
that

553
00:19:49,760 --> 00:19:52,799
there's a vulnerability right over there

554
00:19:52,799 --> 00:19:54,559
it's an incomplete sanitization that

555
00:19:54,559 --> 00:19:56,160
doesn't quite protect against all

556
00:19:56,160 --> 00:19:57,919
cross-site scripting attacks

557
00:19:57,919 --> 00:20:00,400
i can see which of the tools have found

558
00:20:00,400 --> 00:20:01,760
a vulnerability

559
00:20:01,760 --> 00:20:05,840
and or not and which of the tools

560
00:20:05,840 --> 00:20:06,640
recognized

561
00:20:06,640 --> 00:20:10,159
the batch i can drill down into the

562
00:20:10,159 --> 00:20:11,039
tools

563
00:20:11,039 --> 00:20:13,280
for example this tool over here i know

564
00:20:13,280 --> 00:20:14,960
detected the cve

565
00:20:14,960 --> 00:20:18,000
but did not recognize the batch i can

566
00:20:18,000 --> 00:20:19,760
look at the benchmark data set

567
00:20:19,760 --> 00:20:23,760
sort of that power system um here we see

568
00:20:23,760 --> 00:20:27,200
the the data for one particular cv

569
00:20:27,200 --> 00:20:30,159
so there's many of these specifications

570
00:20:30,159 --> 00:20:31,200
in the data set

571
00:20:31,200 --> 00:20:33,039
and it describes exactly where we would

572
00:20:33,039 --> 00:20:35,360
expect an alert to be found

573
00:20:35,360 --> 00:20:37,600
with a few external references to

574
00:20:37,600 --> 00:20:38,400
information

575
00:20:38,400 --> 00:20:41,600
you might be interested in so that's

576
00:20:41,600 --> 00:20:44,559
just scratching the surface of what this

577
00:20:44,559 --> 00:20:46,720
tool can do there's many more

578
00:20:46,720 --> 00:20:49,440
different ways of looking at this data

579
00:20:49,440 --> 00:20:50,159
and i do

580
00:20:50,159 --> 00:20:52,159
indeed encourage you to give this a spin

581
00:20:52,159 --> 00:20:53,520
because

582
00:20:53,520 --> 00:20:55,440
it's open source you can you can use it

583
00:20:55,440 --> 00:20:57,039
straight away today

584
00:20:57,039 --> 00:20:58,640
one of the reasons why we open source

585
00:20:58,640 --> 00:21:00,240
this is

586
00:21:00,240 --> 00:21:02,320
you're probably not surprised because we

587
00:21:02,320 --> 00:21:03,280
need your help

588
00:21:03,280 --> 00:21:06,400
to make it even better to make it even

589
00:21:06,400 --> 00:21:08,080
better by improving your data set for

590
00:21:08,080 --> 00:21:10,400
example by adding new cves

591
00:21:10,400 --> 00:21:11,600
at the moment we're looking for

592
00:21:11,600 --> 00:21:13,600
typescript and javascript cvs and open

593
00:21:13,600 --> 00:21:15,280
source code with other languages coming

594
00:21:15,280 --> 00:21:16,320
soon

595
00:21:16,320 --> 00:21:18,000
or you can have a look at our existing

596
00:21:18,000 --> 00:21:21,600
data and see whether it needs improving

597
00:21:21,600 --> 00:21:23,919
alternatively you could add support for

598
00:21:23,919 --> 00:21:24,720
your own

599
00:21:24,720 --> 00:21:27,200
security tools if you are benchmarking a

600
00:21:27,200 --> 00:21:28,480
particular tool at the moment if you're

601
00:21:28,480 --> 00:21:29,919
interested in evaluating a particular

602
00:21:29,919 --> 00:21:31,600
tool that we don't support yet

603
00:21:31,600 --> 00:21:35,120
please do add it to create a driver for

604
00:21:35,120 --> 00:21:36,159
such a tool

605
00:21:36,159 --> 00:21:38,000
is a very simple process there's plenty

606
00:21:38,000 --> 00:21:39,200
of documentation

607
00:21:39,200 --> 00:21:41,360
plenty of examples as well of course and

608
00:21:41,360 --> 00:21:43,200
typically takes only 200 lines of code

609
00:21:43,200 --> 00:21:44,240
so it's really not

610
00:21:44,240 --> 00:21:47,360
that complicated

611
00:21:47,440 --> 00:21:49,200
and like i said it's open source and

612
00:21:49,200 --> 00:21:50,720
here you have um

613
00:21:50,720 --> 00:21:53,760
in one slide all of the um the github

614
00:21:53,760 --> 00:21:54,720
repositories

615
00:21:54,720 --> 00:21:57,760
that you need to to to take us out for a

616
00:21:57,760 --> 00:21:58,720
spin

617
00:21:58,720 --> 00:22:01,679
the metadata and tooling all of the

618
00:22:01,679 --> 00:22:02,400
vulnerable

619
00:22:02,400 --> 00:22:04,640
and practice code bases and we have a

620
00:22:04,640 --> 00:22:08,000
few ideas of what we want to do next

621
00:22:08,000 --> 00:22:11,280
we want to regularly

622
00:22:11,280 --> 00:22:14,240
update and publish the results of all of

623
00:22:14,240 --> 00:22:17,520
the tools that we currently support

624
00:22:17,520 --> 00:22:20,799
we would love to also make it easier

625
00:22:20,799 --> 00:22:24,240
for people to run the benchmark

626
00:22:24,240 --> 00:22:27,600
against or on on cloud infrastructure

627
00:22:27,600 --> 00:22:28,880
uh of course we would like to support

628
00:22:28,880 --> 00:22:30,720
other languages and we're working

629
00:22:30,720 --> 00:22:32,720
very hard on that and suggestions are

630
00:22:32,720 --> 00:22:33,760
very welcome

631
00:22:33,760 --> 00:22:36,240
um and in general your suggestions are

632
00:22:36,240 --> 00:22:37,280
more than welcome

633
00:22:37,280 --> 00:22:40,400
so please ping me on twitter or ask a

634
00:22:40,400 --> 00:22:42,000
question make a suggestion

635
00:22:42,000 --> 00:22:46,880
during the live q a in a moment

636
00:22:47,520 --> 00:22:50,159
last but not least thank you very much

637
00:22:50,159 --> 00:22:50,559
for

638
00:22:50,559 --> 00:22:53,520
for being here today at blackhat europe

639
00:22:53,520 --> 00:22:54,640
on screen

640
00:22:54,640 --> 00:22:57,360
virtually and i would also like to thank

641
00:22:57,360 --> 00:22:58,480
all of the people

642
00:22:58,480 --> 00:23:01,360
who helped us with this it wouldn't have

643
00:23:01,360 --> 00:23:02,320
been possible

644
00:23:02,320 --> 00:23:04,159
without the contributions from all of

645
00:23:04,159 --> 00:23:06,480
our partners in the open ssf

646
00:23:06,480 --> 00:23:09,520
security tooling working group in

647
00:23:09,520 --> 00:23:10,880
particular simon

648
00:23:10,880 --> 00:23:14,080
nico dave kostya abhishek

649
00:23:14,080 --> 00:23:16,400
and marcel thank you so much for your

650
00:23:16,400 --> 00:23:17,440
contributions

651
00:23:17,440 --> 00:23:18,640
and i would also like to thank our

652
00:23:18,640 --> 00:23:20,640
colleagues at github in particular

653
00:23:20,640 --> 00:23:23,039
as ben and eric he did most of the work

654
00:23:23,039 --> 00:23:24,960
on the engineering side of this

655
00:23:24,960 --> 00:23:28,799
but also arthur rasmus chris and many

656
00:23:28,799 --> 00:23:32,000
many others so

657
00:23:32,000 --> 00:23:34,400
i really hope that you'll um you'll take

658
00:23:34,400 --> 00:23:37,280
a look at the cv benchmark

659
00:23:37,280 --> 00:23:40,240
framework give it a go let us know what

660
00:23:40,240 --> 00:23:40,960
you think

661
00:23:40,960 --> 00:23:43,360
open a pull request open an issue ping

662
00:23:43,360 --> 00:23:44,320
me on twitter

663
00:23:44,320 --> 00:23:47,039
ask in the q a you know where to find us

664
00:23:47,039 --> 00:23:48,000
thank you very much

665
00:23:48,000 --> 00:23:51,840
and have a great day

