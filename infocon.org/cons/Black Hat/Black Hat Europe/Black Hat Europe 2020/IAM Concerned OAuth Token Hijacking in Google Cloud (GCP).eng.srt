1
00:00:01,180 --> 00:00:14,730
[Music]

2
00:00:15,759 --> 00:00:17,600
hello everyone

3
00:00:17,600 --> 00:00:20,800
i'll be speaking today about oauth token

4
00:00:20,800 --> 00:00:24,240
hijacking in google cloud

5
00:00:24,240 --> 00:00:26,640
my name is janko wong i'm currently a

6
00:00:26,640 --> 00:00:29,119
security researcher at netscope

7
00:00:29,119 --> 00:00:32,159
and i've spent my career in a variety of

8
00:00:32,159 --> 00:00:33,920
security areas

9
00:00:33,920 --> 00:00:36,960
at startups in engineering and product

10
00:00:36,960 --> 00:00:38,320
roles

11
00:00:38,320 --> 00:00:42,879
covering some of these areas and topics

12
00:00:42,960 --> 00:00:45,760
so in this talk i'll be covering how

13
00:00:45,760 --> 00:00:48,160
session tokens on a gcp admins client

14
00:00:48,160 --> 00:00:49,360
environment

15
00:00:49,360 --> 00:00:51,360
can be hijacked to gain access to that

16
00:00:51,360 --> 00:00:53,039
users gcp environments

17
00:00:53,039 --> 00:00:55,120
we'll also cover other risk areas like

18
00:00:55,120 --> 00:00:57,199
compute instances and service accounts

19
00:00:57,199 --> 00:00:59,039
that are both attack opportunities as

20
00:00:59,039 --> 00:01:00,000
well as concerns

21
00:01:00,000 --> 00:01:03,440
from the defensive side and certainly

22
00:01:03,440 --> 00:01:05,600
we'll end up trying to determine what

23
00:01:05,600 --> 00:01:09,040
defensive measures work or don't work

24
00:01:09,040 --> 00:01:11,280
from a practical perspective across

25
00:01:11,280 --> 00:01:12,159
prevention

26
00:01:12,159 --> 00:01:15,840
detection and remediation

27
00:01:15,840 --> 00:01:20,880
so why do we care well essentially

28
00:01:20,880 --> 00:01:24,240
hijacking of session tokens in gcp

29
00:01:24,240 --> 00:01:26,320
just provides additional attack vectors

30
00:01:26,320 --> 00:01:27,920
for persistence

31
00:01:27,920 --> 00:01:30,079
as well as evasion oauth is used

32
00:01:30,079 --> 00:01:32,320
everywhere

33
00:01:32,320 --> 00:01:35,439
in gcp authentication both user accounts

34
00:01:35,439 --> 00:01:38,840
service accounts browsers and sdk

35
00:01:38,840 --> 00:01:40,000
sessions

36
00:01:40,000 --> 00:01:44,079
externally for client access such as cli

37
00:01:44,079 --> 00:01:47,600
as well as internal to gcp

38
00:01:47,600 --> 00:01:51,600
environment with compute instances

39
00:01:51,600 --> 00:01:53,759
particularly it's problematic because

40
00:01:53,759 --> 00:01:54,960
they're cached and that

41
00:01:54,960 --> 00:01:58,560
allows an attacker access

42
00:01:58,560 --> 00:02:01,920
to essentially

43
00:02:01,920 --> 00:02:04,399
existing authenticated sessions to

44
00:02:04,399 --> 00:02:06,840
environments without actually having to

45
00:02:06,840 --> 00:02:08,000
authenticate

46
00:02:08,000 --> 00:02:10,720
from a defensive viewpoint some of the

47
00:02:10,720 --> 00:02:12,400
stricter authenticated

48
00:02:12,400 --> 00:02:14,560
authentication controls such as mfa

49
00:02:14,560 --> 00:02:15,760
don't help which could be

50
00:02:15,760 --> 00:02:18,319
counter-intuitive

51
00:02:18,319 --> 00:02:20,400
the options for prevention detection

52
00:02:20,400 --> 00:02:21,360
remediation

53
00:02:21,360 --> 00:02:24,480
can be limiting confusing

54
00:02:24,480 --> 00:02:28,160
too numerous in some sense some areas

55
00:02:28,160 --> 00:02:30,400
and they also differ between what you

56
00:02:30,400 --> 00:02:31,920
might expect based on

57
00:02:31,920 --> 00:02:35,040
permanent credentials they differ with

58
00:02:35,040 --> 00:02:35,599
temporary

59
00:02:35,599 --> 00:02:37,840
session tokens and all of this can lead

60
00:02:37,840 --> 00:02:40,560
to confusion

61
00:02:40,560 --> 00:02:43,760
and it may mean operations playbooks

62
00:02:43,760 --> 00:02:48,000
and scripts are out of date or have gaps

63
00:02:48,879 --> 00:02:52,319
so really quickly let's touch on oauth

64
00:02:52,319 --> 00:02:55,760
many of us are are exposed to oauth as

65
00:02:55,760 --> 00:02:58,959
internet users you might be granting

66
00:02:58,959 --> 00:03:02,080
access to google drive access or

67
00:03:02,080 --> 00:03:03,280
requests

68
00:03:03,280 --> 00:03:06,239
you might be approving payments such as

69
00:03:06,239 --> 00:03:07,920
paypal

70
00:03:07,920 --> 00:03:11,760
to third-party apps from our perspective

71
00:03:11,760 --> 00:03:13,760
because google's chosen it there are

72
00:03:13,760 --> 00:03:14,800
oauth flows

73
00:03:14,800 --> 00:03:16,800
everywhere underneath the hood we don't

74
00:03:16,800 --> 00:03:18,800
see it all the time but we do see

75
00:03:18,800 --> 00:03:20,879
some of it the first time you use a cli

76
00:03:20,879 --> 00:03:22,560
with a configured account

77
00:03:22,560 --> 00:03:25,360
it may prompt you to pop open a browser

78
00:03:25,360 --> 00:03:26,799
and approve a certain set

79
00:03:26,799 --> 00:03:30,080
of privileges

80
00:03:30,080 --> 00:03:31,920
and you have to type in a code and so on

81
00:03:31,920 --> 00:03:33,280
and so forth and then

82
00:03:33,280 --> 00:03:37,200
your cli will work so the first step is

83
00:03:37,200 --> 00:03:39,120
whatever's requesting access in this

84
00:03:39,120 --> 00:03:40,319
case it's the cli

85
00:03:40,319 --> 00:03:43,360
requests a token which really means an

86
00:03:43,360 --> 00:03:44,799
access session token and a

87
00:03:44,799 --> 00:03:46,799
refresh token we'll cover how those are

88
00:03:46,799 --> 00:03:48,480
used later

89
00:03:48,480 --> 00:03:51,760
but the access token sometimes called a

90
00:03:51,760 --> 00:03:52,640
bearer token

91
00:03:52,640 --> 00:03:55,920
is passed in the http header

92
00:03:55,920 --> 00:03:59,040
for an actual rest api call after an

93
00:03:59,040 --> 00:04:00,319
hour it expires

94
00:04:00,319 --> 00:04:02,319
at least that's its default timeout and

95
00:04:02,319 --> 00:04:04,400
then the refresh tokens used to

96
00:04:04,400 --> 00:04:07,920
uh uh receive or create a new

97
00:04:07,920 --> 00:04:10,560
uh fresh access token that can be used

98
00:04:10,560 --> 00:04:12,239
most of this is just done underneath the

99
00:04:12,239 --> 00:04:12,959
hood

100
00:04:12,959 --> 00:04:16,079
by say the gcloud cli

101
00:04:16,079 --> 00:04:18,560
and you don't see that as a user except

102
00:04:18,560 --> 00:04:20,000
for the very initial

103
00:04:20,000 --> 00:04:23,840
approval and authentication step

104
00:04:23,840 --> 00:04:26,320
we're going to now look at an attack

105
00:04:26,320 --> 00:04:28,080
scenario which is

106
00:04:28,080 --> 00:04:29,759
what i describe as bulk copying of

107
00:04:29,759 --> 00:04:31,520
credentials and

108
00:04:31,520 --> 00:04:34,000
using them quickly and easily within the

109
00:04:34,000 --> 00:04:35,759
cli

110
00:04:35,759 --> 00:04:37,680
this does assume that we have

111
00:04:37,680 --> 00:04:39,520
compromised an endpoint in this case a

112
00:04:39,520 --> 00:04:40,160
gcp

113
00:04:40,160 --> 00:04:43,840
admin user

114
00:04:44,080 --> 00:04:48,000
that i'll posit is feasible enough

115
00:04:48,000 --> 00:04:50,880
that it's an okay starting point we can

116
00:04:50,880 --> 00:04:52,639
find gcp users

117
00:04:52,639 --> 00:04:55,040
easily on the internet we can find

118
00:04:55,040 --> 00:04:57,360
companies that host in gcp

119
00:04:57,360 --> 00:05:01,039
we can deliver various payload say

120
00:05:01,039 --> 00:05:04,400
wrapped up in open source utilities

121
00:05:04,400 --> 00:05:06,320
so if you will let's use this as a

122
00:05:06,320 --> 00:05:08,080
starting point um

123
00:05:08,080 --> 00:05:10,000
since i won't be focusing on the actual

124
00:05:10,000 --> 00:05:11,600
compromise but more

125
00:05:11,600 --> 00:05:13,680
what happens once you have access to

126
00:05:13,680 --> 00:05:16,160
that client machine

127
00:05:16,160 --> 00:05:18,240
well what we'll show is that it's

128
00:05:18,240 --> 00:05:20,080
straightforward to access any

129
00:05:20,080 --> 00:05:23,120
cached accounts and gcp environments

130
00:05:23,120 --> 00:05:26,560
it's also easy to copy those credentials

131
00:05:26,560 --> 00:05:30,080
in bulk to off board to a

132
00:05:30,080 --> 00:05:32,400
another host that's controlled by the

133
00:05:32,400 --> 00:05:33,360
attacker

134
00:05:33,360 --> 00:05:37,280
and then access those same accounts

135
00:05:37,280 --> 00:05:39,919
so let's go through that i have a screen

136
00:05:39,919 --> 00:05:40,800
with

137
00:05:40,800 --> 00:05:43,840
two sort of split windows two host

138
00:05:43,840 --> 00:05:44,400
sessions

139
00:05:44,400 --> 00:05:47,520
one on the left is uh the target host or

140
00:05:47,520 --> 00:05:50,400
the victim's host where the gcp admin

141
00:05:50,400 --> 00:05:53,039
does work with the cli the right host is

142
00:05:53,039 --> 00:05:54,400
controlled by the attacker different

143
00:05:54,400 --> 00:05:56,720
hosts that we'll use

144
00:05:56,720 --> 00:05:59,840
later so as we go through this

145
00:05:59,840 --> 00:06:02,960
um first thing you'll note is i'm

146
00:06:02,960 --> 00:06:04,720
checking with gcloud

147
00:06:04,720 --> 00:06:06,880
off list what configured accounts there

148
00:06:06,880 --> 00:06:08,080
are there's two accounts

149
00:06:08,080 --> 00:06:10,080
production account as well as a dev

150
00:06:10,080 --> 00:06:12,000
account so just a quick note

151
00:06:12,000 --> 00:06:14,880
on the session this is a recorded

152
00:06:14,880 --> 00:06:15,520
session

153
00:06:15,520 --> 00:06:17,680
but these were live environments

154
00:06:17,680 --> 00:06:18,960
configured with

155
00:06:18,960 --> 00:06:21,360
reasonable security policies in this

156
00:06:21,360 --> 00:06:23,280
case mfa was

157
00:06:23,280 --> 00:06:25,120
on both and hardware mfa on the

158
00:06:25,120 --> 00:06:28,000
production environment

159
00:06:28,479 --> 00:06:31,199
uh also any output has been scrubbed for

160
00:06:31,199 --> 00:06:31,840
pii

161
00:06:31,840 --> 00:06:33,840
so there's just remapped account ids

162
00:06:33,840 --> 00:06:37,119
names tokens etc

163
00:06:37,600 --> 00:06:39,680
so i'm going to switch accounts to that

164
00:06:39,680 --> 00:06:41,199
admin prod

165
00:06:41,199 --> 00:06:43,440
account okay you can see that in the

166
00:06:43,440 --> 00:06:45,440
output of gcloud auth list

167
00:06:45,440 --> 00:06:48,319
that the asterisk shows what's active

168
00:06:48,319 --> 00:06:50,080
and now i'm going to take a look at what

169
00:06:50,080 --> 00:06:51,280
i can access

170
00:06:51,280 --> 00:06:53,199
remember i'm on the victims machine i've

171
00:06:53,199 --> 00:06:54,720
compromised it i have

172
00:06:54,720 --> 00:06:57,280
at least their user privileges and yes

173
00:06:57,280 --> 00:06:59,120
it makes sense that i could execute

174
00:06:59,120 --> 00:07:00,720
gcloud commands

175
00:07:00,720 --> 00:07:02,319
i can see the project one of the

176
00:07:02,319 --> 00:07:04,560
projects here

177
00:07:04,560 --> 00:07:08,960
i can also list the buckets

178
00:07:08,960 --> 00:07:12,400
within that project and then list

179
00:07:12,400 --> 00:07:15,840
items in that bucket okay so that was

180
00:07:15,840 --> 00:07:17,599
really easy

181
00:07:17,599 --> 00:07:21,520
let's continue on to our next step

182
00:07:21,520 --> 00:07:24,880
that was step one of just reusing

183
00:07:24,880 --> 00:07:26,880
the credential cache on the victim's

184
00:07:26,880 --> 00:07:29,199
machine but now what i want to do

185
00:07:29,199 --> 00:07:33,039
is i want to go to the credential cache

186
00:07:33,039 --> 00:07:35,280
and copy it to a different machine on

187
00:07:35,280 --> 00:07:36,479
the right side my

188
00:07:36,479 --> 00:07:38,800
attacker machine in the home directory

189
00:07:38,800 --> 00:07:39,599
and dot config

190
00:07:39,599 --> 00:07:42,400
gcloud is the credential clash cache

191
00:07:42,400 --> 00:07:43,360
excuse me

192
00:07:43,360 --> 00:07:46,639
we'll cover the details of those files

193
00:07:46,639 --> 00:07:47,280
later

194
00:07:47,280 --> 00:07:48,960
i'm just going to tarball it up and then

195
00:07:48,960 --> 00:07:50,560
scp it

196
00:07:50,560 --> 00:07:55,759
over then on the right side continue on

197
00:07:56,840 --> 00:07:59,919
and i'm going to

198
00:07:59,919 --> 00:08:02,879
find that tarball i'm going to cd here

199
00:08:02,879 --> 00:08:04,560
in the bottom right

200
00:08:04,560 --> 00:08:08,479
to my own.config all right

201
00:08:08,479 --> 00:08:11,759
notice as well that i did check

202
00:08:11,759 --> 00:08:12,960
that there were no nothing

203
00:08:12,960 --> 00:08:15,039
pre-configured gcloud auth list returned

204
00:08:15,039 --> 00:08:16,240
nothing

205
00:08:16,240 --> 00:08:19,599
now i'm going to untar that credential

206
00:08:19,599 --> 00:08:22,560
cache in my own.config directory

207
00:08:22,560 --> 00:08:24,960
and now i check again with gcloud auth

208
00:08:24,960 --> 00:08:25,759
list

209
00:08:25,759 --> 00:08:27,840
and suddenly my configuration is changed

210
00:08:27,840 --> 00:08:29,840
to match what's in that tarball which is

211
00:08:29,840 --> 00:08:30,400
the two

212
00:08:30,400 --> 00:08:33,360
accounts prod end up and that was pretty

213
00:08:33,360 --> 00:08:34,240
easy

214
00:08:34,240 --> 00:08:36,719
let's see if they actually work so i'm

215
00:08:36,719 --> 00:08:38,080
going to switch accounts

216
00:08:38,080 --> 00:08:40,159
let's pick that production account and

217
00:08:40,159 --> 00:08:42,080
i'm going to use gsutil which uses the

218
00:08:42,080 --> 00:08:43,360
same credential cache

219
00:08:43,360 --> 00:08:46,720
as gcloud to list uh the sensitive

220
00:08:46,720 --> 00:08:47,600
bucket

221
00:08:47,600 --> 00:08:50,320
and boom i get results right away so

222
00:08:50,320 --> 00:08:52,080
that was easy

223
00:08:52,080 --> 00:08:55,200
the point here is that there's no

224
00:08:55,200 --> 00:08:56,160
encryption

225
00:08:56,160 --> 00:08:59,360
there's no signing there's no tying of

226
00:08:59,360 --> 00:09:01,120
the credential cache to a particular

227
00:09:01,120 --> 00:09:02,160
host

228
00:09:02,160 --> 00:09:03,920
i was able to move it off board and

229
00:09:03,920 --> 00:09:06,000
reuse it just

230
00:09:06,000 --> 00:09:09,839
as easily as on the victim's host

231
00:09:12,080 --> 00:09:14,399
now a variation of that attack is to

232
00:09:14,399 --> 00:09:16,399
actually peel back the layers

233
00:09:16,399 --> 00:09:18,640
of the credential cache and extract

234
00:09:18,640 --> 00:09:22,000
oauth tokens

235
00:09:22,000 --> 00:09:24,560
and so we'll use some sql like commands

236
00:09:24,560 --> 00:09:25,360
we'll then

237
00:09:25,360 --> 00:09:28,399
perform the oauth flow by and request a

238
00:09:28,399 --> 00:09:30,399
new access token

239
00:09:30,399 --> 00:09:33,600
which will be good for an hour then

240
00:09:33,600 --> 00:09:33,920
we'll

241
00:09:33,920 --> 00:09:36,000
make api calls so let's see what that

242
00:09:36,000 --> 00:09:37,600
flow looks like

243
00:09:37,600 --> 00:09:39,200
so i'm going to move back to the victims

244
00:09:39,200 --> 00:09:41,440
machine

245
00:09:41,440 --> 00:09:44,800
and bear with me i'm going to

246
00:09:44,800 --> 00:09:48,720
list the contents of the dot config

247
00:09:48,720 --> 00:09:50,240
gcloud directory where the credential

248
00:09:50,240 --> 00:09:51,600
cache is and i see

249
00:09:51,600 --> 00:09:53,519
a bunch of files and directories of

250
00:09:53,519 --> 00:09:55,279
which the db files

251
00:09:55,279 --> 00:09:59,760
are sqlite files database files

252
00:09:59,920 --> 00:10:02,079
i'm going to actually use the sql lite

253
00:10:02,079 --> 00:10:03,200
command line

254
00:10:03,200 --> 00:10:05,120
to access one of the database files the

255
00:10:05,120 --> 00:10:07,279
access tokens database file

256
00:10:07,279 --> 00:10:09,680
has one table in it and as its name

257
00:10:09,680 --> 00:10:11,839
implies it has access tokens and i can

258
00:10:11,839 --> 00:10:13,040
extract

259
00:10:13,040 --> 00:10:16,079
the access token for the admin user in

260
00:10:16,079 --> 00:10:19,839
the prod environment

261
00:10:20,160 --> 00:10:23,760
i'm going to now look at sorry give me

262
00:10:23,760 --> 00:10:24,959
one moment to

263
00:10:24,959 --> 00:10:28,480
back up i'm going to

264
00:10:28,480 --> 00:10:30,560
look at the other sqlite database file

265
00:10:30,560 --> 00:10:32,399
the db

266
00:10:32,399 --> 00:10:34,480
and here i have more information i'm

267
00:10:34,480 --> 00:10:35,600
also going to query

268
00:10:35,600 --> 00:10:37,040
for the admin user in the product

269
00:10:37,040 --> 00:10:39,120
environment i get a bunch of

270
00:10:39,120 --> 00:10:41,680
json including a client id and secret

271
00:10:41,680 --> 00:10:42,399
which is

272
00:10:42,399 --> 00:10:45,760
oauth information that's needed to

273
00:10:45,760 --> 00:10:48,000
perform the oauth flow which is what

274
00:10:48,000 --> 00:10:49,680
we're going to do in this scenario

275
00:10:49,680 --> 00:10:51,680
i have the refresh token also needed and

276
00:10:51,680 --> 00:10:53,120
i also have the access token

277
00:10:53,120 --> 00:10:55,440
so this is actually much more complete

278
00:10:55,440 --> 00:10:56,160
information

279
00:10:56,160 --> 00:10:58,719
and useful

280
00:10:59,519 --> 00:11:02,880
so i'm going to just make sure i parse

281
00:11:02,880 --> 00:11:03,279
out

282
00:11:03,279 --> 00:11:06,480
the refresh token here at the bottom

283
00:11:06,480 --> 00:11:09,600
i'm then going to use that in a rest api

284
00:11:09,600 --> 00:11:13,360
call to get a new fresh access token

285
00:11:13,360 --> 00:11:15,600
let me pause this i know there's a lot

286
00:11:15,600 --> 00:11:16,880
here so i'm going to point out in the

287
00:11:16,880 --> 00:11:18,720
middle

288
00:11:18,720 --> 00:11:21,440
my curl command is right here where my

289
00:11:21,440 --> 00:11:22,399
cursor is

290
00:11:22,399 --> 00:11:24,399
i pass in the refresh token and what i

291
00:11:24,399 --> 00:11:26,000
get at the bottom

292
00:11:26,000 --> 00:11:29,200
is some json that includes a new newly

293
00:11:29,200 --> 00:11:30,560
generated access token

294
00:11:30,560 --> 00:11:33,120
that expires in one hour and my scopes

295
00:11:33,120 --> 00:11:34,079
are are

296
00:11:34,079 --> 00:11:36,320
part of the request and they're also

297
00:11:36,320 --> 00:11:37,200
returned

298
00:11:37,200 --> 00:11:40,560
as with my results

299
00:11:40,560 --> 00:11:42,880
okay now that i have an access token i

300
00:11:42,880 --> 00:11:43,839
can now execute

301
00:11:43,839 --> 00:11:46,720
api call so i'll do a bucket call and

302
00:11:46,720 --> 00:11:48,160
we'll pause in a moment to

303
00:11:48,160 --> 00:11:50,800
take a look at that call the point here

304
00:11:50,800 --> 00:11:51,839
is

305
00:11:51,839 --> 00:11:54,079
all these commands are curl commands

306
00:11:54,079 --> 00:11:56,240
pretty straightforward

307
00:11:56,240 --> 00:11:59,519
way to do simple rest api calls here is

308
00:11:59,519 --> 00:12:02,079
the curl command i'm passing in the new

309
00:12:02,079 --> 00:12:03,279
access token

310
00:12:03,279 --> 00:12:06,560
as a header i'm hitting an end point

311
00:12:06,560 --> 00:12:08,800
and listing the contents of the bucket

312
00:12:08,800 --> 00:12:10,160
called sensitive bucket which is the

313
00:12:10,160 --> 00:12:10,880
same bucket

314
00:12:10,880 --> 00:12:13,120
we accessed in the first scenario and

315
00:12:13,120 --> 00:12:14,800
you can see from the output

316
00:12:14,800 --> 00:12:17,839
that i can i'm getting credit cards as a

317
00:12:17,839 --> 00:12:19,200
subdirectory

318
00:12:19,200 --> 00:12:22,839
and i can see all the same

319
00:12:22,839 --> 00:12:26,240
information that i'd seen

320
00:12:26,240 --> 00:12:30,000
with the gcloud cli

321
00:12:30,480 --> 00:12:34,320
so that's how easy it is to actually

322
00:12:34,320 --> 00:12:36,399
peel back the layers we can query those

323
00:12:36,399 --> 00:12:38,560
sqlite database cache files extract

324
00:12:38,560 --> 00:12:39,680
tokens

325
00:12:39,680 --> 00:12:42,180
the refresh token is the most important

326
00:12:42,180 --> 00:12:43,279
[Music]

327
00:12:43,279 --> 00:12:45,680
i can generate new access tokens and go

328
00:12:45,680 --> 00:12:46,880
from there

329
00:12:46,880 --> 00:12:48,480
it's more general functionally similar

330
00:12:48,480 --> 00:12:50,160
to the cli but it's more general because

331
00:12:50,160 --> 00:12:50,880
i can use

332
00:12:50,880 --> 00:12:54,079
a custom api code to do what i need to

333
00:12:54,079 --> 00:12:56,239
do

334
00:12:56,560 --> 00:12:58,560
there are other tech opportunities as

335
00:12:58,560 --> 00:12:59,680
well as concerns

336
00:12:59,680 --> 00:13:02,240
so we need to be aware of service

337
00:13:02,240 --> 00:13:03,200
accounts

338
00:13:03,200 --> 00:13:04,880
service accounts can be configured in

339
00:13:04,880 --> 00:13:06,399
the gcloud cli

340
00:13:06,399 --> 00:13:09,760
just like user accounts sometimes

341
00:13:09,760 --> 00:13:12,639
administrators want to perform tasks as

342
00:13:12,639 --> 00:13:14,399
service accounts

343
00:13:14,399 --> 00:13:17,600
they would download an api key file

344
00:13:17,600 --> 00:13:19,200
with actual credentials and then they

345
00:13:19,200 --> 00:13:21,360
would configure the cli

346
00:13:21,360 --> 00:13:23,200
with that account information normally

347
00:13:23,200 --> 00:13:24,399
attacker would

348
00:13:24,399 --> 00:13:26,160
first look for the key file since it has

349
00:13:26,160 --> 00:13:28,000
the permanent credential in it

350
00:13:28,000 --> 00:13:30,480
but there are reasons why they would

351
00:13:30,480 --> 00:13:31,760
still go after

352
00:13:31,760 --> 00:13:35,600
the credential cache the sqlite database

353
00:13:35,600 --> 00:13:38,880
one it's another attack vector but two

354
00:13:38,880 --> 00:13:41,920
some of the remediation steps

355
00:13:41,920 --> 00:13:45,360
with session tokens are more difficult

356
00:13:45,360 --> 00:13:49,120
or more confusing than with permanent

357
00:13:49,120 --> 00:13:52,320
accounts service accounts or keys

358
00:13:52,320 --> 00:13:55,920
meaning if you use that session token

359
00:13:55,920 --> 00:13:57,600
it can be more difficult to defend

360
00:13:57,600 --> 00:13:59,040
against

361
00:13:59,040 --> 00:14:01,040
it does have potentially an expiration

362
00:14:01,040 --> 00:14:03,120
time if it's been set

363
00:14:03,120 --> 00:14:05,680
but at a minimum it's one hour and that

364
00:14:05,680 --> 00:14:07,680
is plenty of time to do damage or

365
00:14:07,680 --> 00:14:12,000
install back doors so service accounts

366
00:14:12,000 --> 00:14:14,839
have to have to be kept in mind even

367
00:14:14,839 --> 00:14:16,160
though

368
00:14:16,160 --> 00:14:18,639
people think about oauth tokens as very

369
00:14:18,639 --> 00:14:20,079
much an interactive kind of

370
00:14:20,079 --> 00:14:20,959
authentication

371
00:14:20,959 --> 00:14:24,720
flow compute instances use service

372
00:14:24,720 --> 00:14:25,839
accounts there's default service

373
00:14:25,839 --> 00:14:27,199
accounts and you can

374
00:14:27,199 --> 00:14:30,959
use your own there's no credential cash

375
00:14:30,959 --> 00:14:33,199
per se but there's a metadata service

376
00:14:33,199 --> 00:14:35,199
that returns

377
00:14:35,199 --> 00:14:38,160
the current access token and that's

378
00:14:38,160 --> 00:14:39,279
often the target

379
00:14:39,279 --> 00:14:41,760
for once a compute instance is

380
00:14:41,760 --> 00:14:44,160
compromised that's the target

381
00:14:44,160 --> 00:14:45,760
in order to get a credential to move

382
00:14:45,760 --> 00:14:47,600
laterally within the environment so that

383
00:14:47,600 --> 00:14:49,120
has to be thought about

384
00:14:49,120 --> 00:14:52,240
it's an opportunity to attack and it's a

385
00:14:52,240 --> 00:14:56,079
an area of concern to defend against

386
00:14:57,040 --> 00:14:59,040
the commands to do that one to query

387
00:14:59,040 --> 00:15:00,160
this

388
00:15:00,160 --> 00:15:02,079
actual metadata service is pretty

389
00:15:02,079 --> 00:15:04,079
straightforward it can be done with a

390
00:15:04,079 --> 00:15:05,279
curl command

391
00:15:05,279 --> 00:15:07,760
on the run run on the actual compute

392
00:15:07,760 --> 00:15:09,360
instance and you can see that the access

393
00:15:09,360 --> 00:15:10,839
token highlighted in

394
00:15:10,839 --> 00:15:14,399
blue is returned and then you can do a

395
00:15:14,399 --> 00:15:15,680
real api call

396
00:15:15,680 --> 00:15:18,000
with that access token and you are now

397
00:15:18,000 --> 00:15:20,160
executing a command as

398
00:15:20,160 --> 00:15:21,920
the service account that the compute

399
00:15:21,920 --> 00:15:23,360
instance runs under

400
00:15:23,360 --> 00:15:25,680
and this one i just ran a bucket listing

401
00:15:25,680 --> 00:15:27,600
again a different environment

402
00:15:27,600 --> 00:15:31,519
but i get actual files back

403
00:15:31,519 --> 00:15:35,040
so speaking of compute instances

404
00:15:35,040 --> 00:15:36,639
we started the tax scenarios with

405
00:15:36,639 --> 00:15:38,839
external client environments external to

406
00:15:38,839 --> 00:15:40,160
gcp

407
00:15:40,160 --> 00:15:42,000
certainly compute instances that have

408
00:15:42,000 --> 00:15:43,600
google cloud installed

409
00:15:43,600 --> 00:15:46,240
have the same issues that we've talked

410
00:15:46,240 --> 00:15:48,079
about so everything applies

411
00:15:48,079 --> 00:15:51,680
so additional attack opportunities are

412
00:15:51,680 --> 00:15:54,240
compute instances where the cli is

413
00:15:54,240 --> 00:15:55,120
installed

414
00:15:55,120 --> 00:15:57,600
the thing that may not be on the radar

415
00:15:57,600 --> 00:15:58,240
for

416
00:15:58,240 --> 00:16:01,360
many is gcp managed compute instances

417
00:16:01,360 --> 00:16:02,160
that have

418
00:16:02,160 --> 00:16:04,959
sdk installed very specifically cloud

419
00:16:04,959 --> 00:16:05,839
shell environments

420
00:16:05,839 --> 00:16:08,720
part of its value is it's pre-installed

421
00:16:08,720 --> 00:16:10,160
you don't have to worry about it manage

422
00:16:10,160 --> 00:16:10,560
it

423
00:16:10,560 --> 00:16:12,720
and part of the opportunity is it

424
00:16:12,720 --> 00:16:15,120
inherits any potential issues

425
00:16:15,120 --> 00:16:18,480
such as session token hijacking

426
00:16:18,480 --> 00:16:20,639
juan berner wrote a good article about

427
00:16:20,639 --> 00:16:23,199
persistent gcp backdoors

428
00:16:23,199 --> 00:16:26,079
i encourage you to read it and he talks

429
00:16:26,079 --> 00:16:27,600
about

430
00:16:27,600 --> 00:16:29,680
hijacking the credential cache through a

431
00:16:29,680 --> 00:16:30,959
persistent backdoor

432
00:16:30,959 --> 00:16:35,359
on google cloud shell environments

433
00:16:35,680 --> 00:16:39,120
so let's talk about prevention

434
00:16:39,120 --> 00:16:42,240
number one you do want to set an

435
00:16:42,240 --> 00:16:43,680
expiration time

436
00:16:43,680 --> 00:16:47,759
for google cloud sdk sessions which

437
00:16:47,759 --> 00:16:50,880
um really means cli and api sessions

438
00:16:50,880 --> 00:16:53,279
by default there is no expiration and

439
00:16:53,279 --> 00:16:54,720
that

440
00:16:54,720 --> 00:16:56,320
was the case with environments in the

441
00:16:56,320 --> 00:16:58,880
tax scenario they were for months

442
00:16:58,880 --> 00:17:02,320
um cashed accounts were

443
00:17:02,320 --> 00:17:05,839
accessible from that victim

444
00:17:05,839 --> 00:17:08,559
environment you can set the expiration

445
00:17:08,559 --> 00:17:09,839
time we'll go through that

446
00:17:09,839 --> 00:17:13,199
you should also see if you can

447
00:17:13,199 --> 00:17:17,520
implement ip allow allow or whitelist

448
00:17:17,520 --> 00:17:21,039
and if you have expiration time set mfa

449
00:17:21,039 --> 00:17:24,400
increases the security

450
00:17:24,400 --> 00:17:27,679
of the reauthentication step

451
00:17:27,679 --> 00:17:32,320
and when you go through ip allow lists

452
00:17:32,320 --> 00:17:34,080
don't forget to think about compute

453
00:17:34,080 --> 00:17:35,760
instances as well as enforcement

454
00:17:35,760 --> 00:17:37,919
so let's talk about these in more detail

455
00:17:37,919 --> 00:17:39,120
so

456
00:17:39,120 --> 00:17:40,799
the cloud session duration is set on the

457
00:17:40,799 --> 00:17:42,799
g suite admin side and i want to raise

458
00:17:42,799 --> 00:17:44,320
that as a bit of a flag

459
00:17:44,320 --> 00:17:46,799
yellow flag that it's a different

460
00:17:46,799 --> 00:17:48,640
product different set of apis than

461
00:17:48,640 --> 00:17:52,559
the gcp suite it's in the identity side

462
00:17:52,559 --> 00:17:55,840
by default it's set to never expire

463
00:17:55,840 --> 00:17:57,840
expire but you can set the session

464
00:17:57,840 --> 00:17:58,880
duration to

465
00:17:58,880 --> 00:18:02,400
one hour up to 24 hours

466
00:18:03,120 --> 00:18:06,160
once the session expires

467
00:18:06,160 --> 00:18:07,840
you can specify the re-authentication

468
00:18:07,840 --> 00:18:11,120
method hardware security key or password

469
00:18:11,120 --> 00:18:13,840
if you happen to have an authentication

470
00:18:13,840 --> 00:18:14,320
method

471
00:18:14,320 --> 00:18:16,720
that uses software-based mfa then you'll

472
00:18:16,720 --> 00:18:18,000
have to choose password

473
00:18:18,000 --> 00:18:21,280
um so it's a little bit less secure

474
00:18:21,280 --> 00:18:23,840
but in general you want to set these um

475
00:18:23,840 --> 00:18:26,000
there's no reason not to the default

476
00:18:26,000 --> 00:18:29,840
is not that secure

477
00:18:29,919 --> 00:18:33,600
how do we set up ip allow lists

478
00:18:33,600 --> 00:18:36,000
create an access level with ips or site

479
00:18:36,000 --> 00:18:37,200
ranges

480
00:18:37,200 --> 00:18:40,320
in the access content context manager in

481
00:18:40,320 --> 00:18:41,360
gcp

482
00:18:41,360 --> 00:18:44,799
console or the api

483
00:18:44,799 --> 00:18:47,520
create a vpc service control so that we

484
00:18:47,520 --> 00:18:49,760
can set up a boundary that references

485
00:18:49,760 --> 00:18:52,880
that same access level

486
00:18:52,880 --> 00:18:55,039
and then apply it to the right vpc and

487
00:18:55,039 --> 00:18:56,799
the next time someone tries to execute

488
00:18:56,799 --> 00:18:58,400
an api call

489
00:18:58,400 --> 00:19:02,160
against resources within that boundary

490
00:19:02,160 --> 00:19:05,200
they'll get a 403 error so that works as

491
00:19:05,200 --> 00:19:07,280
you'd expect

492
00:19:07,280 --> 00:19:10,480
but there's more involvement if you have

493
00:19:10,480 --> 00:19:12,080
vm instances you have to worry about

494
00:19:12,080 --> 00:19:14,559
those ip addresses if they're executing

495
00:19:14,559 --> 00:19:17,919
uh api calls remember they have

496
00:19:17,919 --> 00:19:20,480
potential compromise of oauth tokens or

497
00:19:20,480 --> 00:19:21,440
session tokens

498
00:19:21,440 --> 00:19:25,200
you know on vm instances so ipl allows

499
00:19:25,200 --> 00:19:27,679
have to

500
00:19:27,679 --> 00:19:30,400
include the ips of those vms so if you

501
00:19:30,400 --> 00:19:32,080
have a small number of vms a small

502
00:19:32,080 --> 00:19:32,799
environment

503
00:19:32,799 --> 00:19:36,000
that has static ips

504
00:19:36,000 --> 00:19:39,520
you can probably hard code the ips and

505
00:19:39,520 --> 00:19:40,640
maintain your ip

506
00:19:40,640 --> 00:19:42,960
less it's more problematic if you have a

507
00:19:42,960 --> 00:19:43,760
larger number

508
00:19:43,760 --> 00:19:46,720
of vms more dynamic environment with a

509
00:19:46,720 --> 00:19:47,919
lot of ip

510
00:19:47,919 --> 00:19:52,320
dynamic ips in that case you may have to

511
00:19:52,320 --> 00:19:55,120
figure out how to automatically maintain

512
00:19:55,120 --> 00:19:57,280
the ipl allow lists

513
00:19:57,280 --> 00:19:59,280
by hooking into the startup or

514
00:19:59,280 --> 00:20:02,960
provisioning process of vms

515
00:20:02,960 --> 00:20:06,240
that is overhead that is work but could

516
00:20:06,240 --> 00:20:07,440
very well

517
00:20:07,440 --> 00:20:10,960
be worth it to gain the benefit of

518
00:20:10,960 --> 00:20:14,080
the ip white listening there's been some

519
00:20:14,080 --> 00:20:17,440
related work for aws not gcp by the

520
00:20:17,440 --> 00:20:19,200
netflix security team

521
00:20:19,200 --> 00:20:21,520
and i encourage people to read that for

522
00:20:21,520 --> 00:20:22,480
good ideas

523
00:20:22,480 --> 00:20:25,039
for approaching they could be applied to

524
00:20:25,039 --> 00:20:27,520
gcp

525
00:20:29,280 --> 00:20:31,760
ipl allow lists do have to be enforced

526
00:20:31,760 --> 00:20:32,480
and checked

527
00:20:32,480 --> 00:20:35,120
so through the cli or api you could roll

528
00:20:35,120 --> 00:20:36,559
your own checks

529
00:20:36,559 --> 00:20:38,400
essentially to make sure that the

530
00:20:38,400 --> 00:20:40,320
definitions of the access levels have

531
00:20:40,320 --> 00:20:41,919
the right cider ranges and aren't

532
00:20:41,919 --> 00:20:43,919
drifting

533
00:20:43,919 --> 00:20:47,200
that they are included in the right

534
00:20:47,200 --> 00:20:50,960
vpc service control definition

535
00:20:50,960 --> 00:20:52,960
and that ultimately that service control

536
00:20:52,960 --> 00:20:54,799
is also applied to the right resources

537
00:20:54,799 --> 00:20:57,600
or vpc

538
00:20:57,919 --> 00:21:02,240
mfa highly encouraged

539
00:21:02,240 --> 00:21:05,440
to use that if you can manage it it's on

540
00:21:05,440 --> 00:21:06,080
the g suite

541
00:21:06,080 --> 00:21:09,360
admin side so again note there and it

542
00:21:09,360 --> 00:21:10,320
governs

543
00:21:10,320 --> 00:21:12,799
or will govern the re-authentication

544
00:21:12,799 --> 00:21:14,640
step so it only

545
00:21:14,640 --> 00:21:17,600
applies if you have session duration

546
00:21:17,600 --> 00:21:18,400
timeouts

547
00:21:18,400 --> 00:21:21,440
set my tech scenarios that was not set

548
00:21:21,440 --> 00:21:23,360
which is why we never encountered mfa

549
00:21:23,360 --> 00:21:26,559
but once you set it mfa will apply to

550
00:21:26,559 --> 00:21:27,840
the reauthentication

551
00:21:27,840 --> 00:21:30,640
once something times out now let's talk

552
00:21:30,640 --> 00:21:31,280
about

553
00:21:31,280 --> 00:21:34,320
detection behavioral detection

554
00:21:34,320 --> 00:21:37,679
is difficult and compromised credentials

555
00:21:37,679 --> 00:21:40,480
is essentially a behavioral problem try

556
00:21:40,480 --> 00:21:41,679
to distinguish

557
00:21:41,679 --> 00:21:44,880
activity from the

558
00:21:44,880 --> 00:21:46,400
you know the actor who has the

559
00:21:46,400 --> 00:21:48,240
compromise credential versus

560
00:21:48,240 --> 00:21:52,400
the valid user who got compromised

561
00:21:52,640 --> 00:21:55,280
and having a general solution there is

562
00:21:55,280 --> 00:21:55,840
is

563
00:21:55,840 --> 00:21:57,919
difficult which is why a lot of the ml

564
00:21:57,919 --> 00:21:59,760
approaches have very specific use cases

565
00:21:59,760 --> 00:22:01,440
so instead i'm going to suggest maybe

566
00:22:01,440 --> 00:22:02,880
one or two

567
00:22:02,880 --> 00:22:06,559
simpler and hopefully more achievable

568
00:22:06,559 --> 00:22:09,679
ways to improve detection one is really

569
00:22:09,679 --> 00:22:10,720
work hard to use

570
00:22:10,720 --> 00:22:13,440
ip allow lists in the prevention stage

571
00:22:13,440 --> 00:22:14,559
if you do

572
00:22:14,559 --> 00:22:17,200
then you could set up detections against

573
00:22:17,200 --> 00:22:19,280
failures

574
00:22:19,280 --> 00:22:22,000
in authentication from ips that aren't

575
00:22:22,000 --> 00:22:23,760
in that list so any failures due to the

576
00:22:23,760 --> 00:22:24,400
ipl

577
00:22:24,400 --> 00:22:27,679
allow list

578
00:22:27,679 --> 00:22:30,559
could be good indicators of credential

579
00:22:30,559 --> 00:22:32,240
compromise

580
00:22:32,240 --> 00:22:34,000
there is a chance of course of false

581
00:22:34,000 --> 00:22:37,120
positives it depends on your user base

582
00:22:37,120 --> 00:22:38,640
and your ability to maintain the ipl

583
00:22:38,640 --> 00:22:40,559
list so

584
00:22:40,559 --> 00:22:44,000
if you can shrink your allowed ips to a

585
00:22:44,000 --> 00:22:45,200
smaller range

586
00:22:45,200 --> 00:22:48,159
that might include requiring vpn access

587
00:22:48,159 --> 00:22:49,360
or proxy access

588
00:22:49,360 --> 00:22:52,080
to access your gcp environments then

589
00:22:52,080 --> 00:22:52,960
that ipl

590
00:22:52,960 --> 00:22:56,320
list might be a smaller set of static

591
00:22:56,320 --> 00:23:00,240
ranges and it may make

592
00:23:00,240 --> 00:23:03,840
detection against that list

593
00:23:03,840 --> 00:23:06,320
reliable with lower false positives you

594
00:23:06,320 --> 00:23:08,000
may need to train users but

595
00:23:08,000 --> 00:23:10,159
it's although it comes with overhead

596
00:23:10,159 --> 00:23:11,600
it's definitely worth

597
00:23:11,600 --> 00:23:14,559
considering on the right is what you

598
00:23:14,559 --> 00:23:15,919
would expect but you will get

599
00:23:15,919 --> 00:23:19,440
clear error messages in stackdriver

600
00:23:19,440 --> 00:23:21,679
from failed failures against the ipl

601
00:23:21,679 --> 00:23:23,120
alice

602
00:23:23,120 --> 00:23:26,320
another step that i think is worth

603
00:23:26,320 --> 00:23:27,200
entertaining

604
00:23:27,200 --> 00:23:30,000
is to populate fake accounts or

605
00:23:30,000 --> 00:23:31,120
breadcrumbs

606
00:23:31,120 --> 00:23:34,080
in the credential cache essentially

607
00:23:34,080 --> 00:23:36,159
provide an easy way to configure fake

608
00:23:36,159 --> 00:23:37,280
accounts

609
00:23:37,280 --> 00:23:39,280
attacker most likely will cycle through

610
00:23:39,280 --> 00:23:40,720
all accounts

611
00:23:40,720 --> 00:23:42,320
should should they compromise the

612
00:23:42,320 --> 00:23:45,440
machine and look at this vector

613
00:23:45,440 --> 00:23:47,520
and in trying every account they'll try

614
00:23:47,520 --> 00:23:49,200
the fake account

615
00:23:49,200 --> 00:23:52,240
and that has a much better chance of low

616
00:23:52,240 --> 00:23:55,039
false positives

617
00:23:55,039 --> 00:23:57,600
and those could be easily detected and

618
00:23:57,600 --> 00:23:59,919
alerted upon

619
00:23:59,919 --> 00:24:03,039
and there is some provisioning

620
00:24:03,039 --> 00:24:06,480
maintenance overhead but

621
00:24:06,480 --> 00:24:08,640
since a sqlite database let's turn that

622
00:24:08,640 --> 00:24:10,320
into an advantage it'd be easy to have a

623
00:24:10,320 --> 00:24:12,559
simple script you could have a

624
00:24:12,559 --> 00:24:16,320
three-line shell script that inserts a

625
00:24:16,320 --> 00:24:19,440
fake credential into every um

626
00:24:19,440 --> 00:24:22,880
credential cache it just has to be run

627
00:24:22,880 --> 00:24:23,919
once

628
00:24:23,919 --> 00:24:26,480
uh train your users not to use it or or

629
00:24:26,480 --> 00:24:27,440
delete it

630
00:24:27,440 --> 00:24:31,200
um and it'll survive upgrades of the

631
00:24:31,200 --> 00:24:35,200
g-cloud sdk so consider that as a

632
00:24:35,200 --> 00:24:37,760
higher fidelity detection on compromise

633
00:24:37,760 --> 00:24:39,840
credentials

634
00:24:39,840 --> 00:24:41,440
let's spend some time on remediation

635
00:24:41,440 --> 00:24:44,000
options since this is both complicated

636
00:24:44,000 --> 00:24:45,200
and confusing

637
00:24:45,200 --> 00:24:46,799
there are a multitude of options that

638
00:24:46,799 --> 00:24:48,640
we'll go through but what i want to

639
00:24:48,640 --> 00:24:50,000
point out up front

640
00:24:50,000 --> 00:24:52,240
is there are two dimensions to worry

641
00:24:52,240 --> 00:24:54,240
about user accounts are different in

642
00:24:54,240 --> 00:24:55,520
behavior in the service accounts

643
00:24:55,520 --> 00:24:57,039
remember remediation viewpoint so we

644
00:24:57,039 --> 00:24:58,480
have to look at them separately

645
00:24:58,480 --> 00:25:00,400
we also have two steps to worry about

646
00:25:00,400 --> 00:25:01,679
locking out an account

647
00:25:01,679 --> 00:25:04,000
that is locking out an attacker from

648
00:25:04,000 --> 00:25:06,080
future access to an account is one step

649
00:25:06,080 --> 00:25:07,520
but also revoking their

650
00:25:07,520 --> 00:25:10,559
current access their current sessions is

651
00:25:10,559 --> 00:25:13,279
very important

652
00:25:13,760 --> 00:25:16,159
so let's go through this matrix um here

653
00:25:16,159 --> 00:25:17,120
are the three basic

654
00:25:17,120 --> 00:25:20,240
steps that most people are aware of for

655
00:25:20,240 --> 00:25:21,360
dealing with

656
00:25:21,360 --> 00:25:23,840
account uh locking out account access

657
00:25:23,840 --> 00:25:26,000
for user accounts

658
00:25:26,000 --> 00:25:28,799
in g suite admin i'm highlighting that

659
00:25:28,799 --> 00:25:30,080
user account

660
00:25:30,080 --> 00:25:33,679
management is in the g suite side

661
00:25:33,679 --> 00:25:35,200
you can find those options and they're

662
00:25:35,200 --> 00:25:37,520
also available in the apis for g suite

663
00:25:37,520 --> 00:25:38,160
admin

664
00:25:38,160 --> 00:25:39,919
[Music]

665
00:25:39,919 --> 00:25:43,760
and so the bottom line is they all work

666
00:25:43,760 --> 00:25:46,400
let's suggest that the lowest impact

667
00:25:46,400 --> 00:25:47,760
which is reset password

668
00:25:47,760 --> 00:25:50,240
is our suggested remediation option

669
00:25:50,240 --> 00:25:53,120
nothing wrong with that

670
00:25:53,440 --> 00:25:56,640
how about for service accounts well

671
00:25:56,640 --> 00:25:59,679
similarly there are three options

672
00:25:59,679 --> 00:26:01,679
they're found in the ui under iem

673
00:26:01,679 --> 00:26:04,159
service accounts in the gcp console

674
00:26:04,159 --> 00:26:06,640
so remember service accounts are managed

675
00:26:06,640 --> 00:26:08,320
in gcp

676
00:26:08,320 --> 00:26:10,960
user accounts in g suite you can disable

677
00:26:10,960 --> 00:26:12,400
service count delete that

678
00:26:12,400 --> 00:26:15,600
actual key and of course delete

679
00:26:15,600 --> 00:26:18,799
the service count itself they all work

680
00:26:18,799 --> 00:26:21,520
but we'll favor the least impactful one

681
00:26:21,520 --> 00:26:23,520
which is deletion of api keys

682
00:26:23,520 --> 00:26:25,600
both of these are pretty standard let's

683
00:26:25,600 --> 00:26:27,520
say in terms of practices

684
00:26:27,520 --> 00:26:31,360
they work and there shouldn't be any

685
00:26:31,360 --> 00:26:34,480
confusion where it does get confusing is

686
00:26:34,480 --> 00:26:36,840
how to remote current sessions

687
00:26:36,840 --> 00:26:40,320
potentially the same lockout procedures

688
00:26:40,320 --> 00:26:42,240
may revoke sessions and we need to test

689
00:26:42,240 --> 00:26:44,400
that but there are also session specific

690
00:26:44,400 --> 00:26:45,600
functionality

691
00:26:45,600 --> 00:26:48,159
that i listed first reset sign-in cookie

692
00:26:48,159 --> 00:26:49,520
cli apis

693
00:26:49,520 --> 00:26:53,200
that need to be investigated so

694
00:26:53,200 --> 00:26:56,000
thankfully i tested you may be aware of

695
00:26:56,000 --> 00:26:56,480
this

696
00:26:56,480 --> 00:26:59,120
but let's see if we can learn from my

697
00:26:59,120 --> 00:27:01,679
trials and tribulations

698
00:27:01,679 --> 00:27:04,840
reset sign-in cookies exist in g suite

699
00:27:04,840 --> 00:27:07,520
admin does this work

700
00:27:07,520 --> 00:27:10,400
unfortunately no it does work for web

701
00:27:10,400 --> 00:27:11,760
browser sessions

702
00:27:11,760 --> 00:27:14,400
it does not work for sdk sessions so it

703
00:27:14,400 --> 00:27:15,919
doesn't help our cli

704
00:27:15,919 --> 00:27:20,320
vector what there is a cli command

705
00:27:20,320 --> 00:27:23,039
auth revoke where you pass in an account

706
00:27:23,039 --> 00:27:24,159
name

707
00:27:24,159 --> 00:27:25,919
as well as an api where you pass in the

708
00:27:25,919 --> 00:27:27,360
token

709
00:27:27,360 --> 00:27:31,840
they do work but not quite

710
00:27:31,840 --> 00:27:35,840
uh fully and they're not viable why

711
00:27:35,840 --> 00:27:38,480
what this cli command does underneath is

712
00:27:38,480 --> 00:27:40,000
it looks up the account in the local

713
00:27:40,000 --> 00:27:41,919
credential cache the cli

714
00:27:41,919 --> 00:27:43,120
same one we've been talking about it

715
00:27:43,120 --> 00:27:45,360
finds the oauth session token

716
00:27:45,360 --> 00:27:48,080
it calls api which then revokes the

717
00:27:48,080 --> 00:27:49,039
session token

718
00:27:49,039 --> 00:27:53,039
as well as the refresh token however

719
00:27:53,039 --> 00:27:55,120
those session tokens only exist on the

720
00:27:55,120 --> 00:27:56,720
client machine which is the victim

721
00:27:56,720 --> 00:28:00,159
or compromise machine and because it's

722
00:28:00,159 --> 00:28:01,600
compromised we can't trust it

723
00:28:01,600 --> 00:28:03,520
and further an attacker can easily

724
00:28:03,520 --> 00:28:05,039
manipulate that

725
00:28:05,039 --> 00:28:08,240
and delete that token entry preventing

726
00:28:08,240 --> 00:28:09,120
remediation

727
00:28:09,120 --> 00:28:12,240
using this path the ap sorry the api

728
00:28:12,240 --> 00:28:12,880
call

729
00:28:12,880 --> 00:28:15,279
suffers from the same issue that token

730
00:28:15,279 --> 00:28:18,159
that is required for the api call

731
00:28:18,159 --> 00:28:20,399
is only in existence on the client

732
00:28:20,399 --> 00:28:21,520
machine

733
00:28:21,520 --> 00:28:24,399
it's not logged it obviously exists on

734
00:28:24,399 --> 00:28:26,559
the gcp

735
00:28:26,559 --> 00:28:28,799
backend side but it's not exposed to

736
00:28:28,799 --> 00:28:29,600
users

737
00:28:29,600 --> 00:28:32,799
through any api so it can be manipulated

738
00:28:32,799 --> 00:28:34,399
it's on a compromised machine it doesn't

739
00:28:34,399 --> 00:28:35,919
help us so why do these even

740
00:28:35,919 --> 00:28:37,760
exist and why did i mention them well i

741
00:28:37,760 --> 00:28:39,840
mentioned because they exist but

742
00:28:39,840 --> 00:28:42,320
they're really self-serve steps for

743
00:28:42,320 --> 00:28:44,399
users to clean up their own

744
00:28:44,399 --> 00:28:47,279
credential cache

745
00:28:47,520 --> 00:28:51,919
so what about our lockout account

746
00:28:51,919 --> 00:28:55,120
steps resetting a password does not

747
00:28:55,120 --> 00:28:56,320
revoke sessions

748
00:28:56,320 --> 00:28:59,760
so doesn't help us

749
00:28:59,760 --> 00:29:01,919
suspending and deleting a user account

750
00:29:01,919 --> 00:29:03,360
does

751
00:29:03,360 --> 00:29:06,720
invalidate sessions but it's only

752
00:29:06,720 --> 00:29:09,919
during the suspension time if you

753
00:29:09,919 --> 00:29:11,679
re-enable the user account

754
00:29:11,679 --> 00:29:14,799
those session tokens start to work again

755
00:29:14,799 --> 00:29:17,679
until they they expire which is not the

756
00:29:17,679 --> 00:29:19,200
default

757
00:29:19,200 --> 00:29:20,960
deleting user account does work the

758
00:29:20,960 --> 00:29:22,480
sessions are

759
00:29:22,480 --> 00:29:25,279
revoked forever permanently it's just

760
00:29:25,279 --> 00:29:26,640
high impact

761
00:29:26,640 --> 00:29:29,919
so these last two we could make work

762
00:29:29,919 --> 00:29:33,679
possibly but there's a better

763
00:29:33,679 --> 00:29:37,039
almost ideal solution which is in the g

764
00:29:37,039 --> 00:29:39,120
suite admin side

765
00:29:39,120 --> 00:29:41,440
there is a listing for each user of the

766
00:29:41,440 --> 00:29:42,640
connected oauth

767
00:29:42,640 --> 00:29:44,559
applications it just means it's a list

768
00:29:44,559 --> 00:29:46,320
of applications the user has approved

769
00:29:46,320 --> 00:29:49,360
authenticated and approved including the

770
00:29:49,360 --> 00:29:51,520
google cloud sdk

771
00:29:51,520 --> 00:29:53,919
we've all seen this when you grant

772
00:29:53,919 --> 00:29:54,640
access

773
00:29:54,640 --> 00:29:57,919
you know to google docs and suite

774
00:29:57,919 --> 00:30:00,960
this is the version for g suite admin

775
00:30:00,960 --> 00:30:03,120
when i delete this it immediately

776
00:30:03,120 --> 00:30:04,399
revokes

777
00:30:04,399 --> 00:30:07,279
all sessions and this is not a permanent

778
00:30:07,279 --> 00:30:08,399
um

779
00:30:08,399 --> 00:30:11,440
action with with uh permanent

780
00:30:11,440 --> 00:30:14,000
ramifications it just means the next

781
00:30:14,000 --> 00:30:16,159
time that the user needs to use the

782
00:30:16,159 --> 00:30:18,960
sdk say the cli they'll be prompted to

783
00:30:18,960 --> 00:30:21,279
re-authenticate and then the application

784
00:30:21,279 --> 00:30:24,000
will list will be listed here once again

785
00:30:24,000 --> 00:30:25,200
so bottom line is

786
00:30:25,200 --> 00:30:27,440
this works this is the recommended

787
00:30:27,440 --> 00:30:28,720
remediation step

788
00:30:28,720 --> 00:30:31,120
but caveat is it lives in the g suite

789
00:30:31,120 --> 00:30:32,960
admin side and this is a bit confusing

790
00:30:32,960 --> 00:30:33,919
if you're not

791
00:30:33,919 --> 00:30:37,360
familiar with oauth so

792
00:30:37,360 --> 00:30:40,320
that's the recommended step how about

793
00:30:40,320 --> 00:30:43,120
service accounts

794
00:30:47,279 --> 00:30:50,480
well let's jump right into it

795
00:30:50,480 --> 00:30:52,880
you think it's similar to user accounts

796
00:30:52,880 --> 00:30:54,399
so it is in some

797
00:30:54,399 --> 00:30:57,120
respects the cli and the api call do not

798
00:30:57,120 --> 00:30:57,679
work

799
00:30:57,679 --> 00:31:00,640
they provide more explicit errors some

800
00:31:00,640 --> 00:31:03,039
of those errors are misleading

801
00:31:03,039 --> 00:31:06,559
filed bugs and they are now

802
00:31:06,559 --> 00:31:08,880
partially corrected but the bottom line

803
00:31:08,880 --> 00:31:09,760
is

804
00:31:09,760 --> 00:31:11,600
they were not made to work for service

805
00:31:11,600 --> 00:31:13,360
accounts and that's usually the error

806
00:31:13,360 --> 00:31:14,240
you get

807
00:31:14,240 --> 00:31:16,320
and no matter what they don't revoke

808
00:31:16,320 --> 00:31:17,600
current sessions so they

809
00:31:17,600 --> 00:31:19,760
they're not useful and they require

810
00:31:19,760 --> 00:31:21,440
access to the compromised client machine

811
00:31:21,440 --> 00:31:22,480
which can't be trusted

812
00:31:22,480 --> 00:31:26,080
and swells can be spoofed by

813
00:31:26,080 --> 00:31:29,840
manipulated by the attacker how about

814
00:31:29,840 --> 00:31:32,880
the lockout steps for service accounts

815
00:31:32,880 --> 00:31:35,440
deleting api key does not affect current

816
00:31:35,440 --> 00:31:36,399
sessions

817
00:31:36,399 --> 00:31:38,720
disliking disabling and deleting the

818
00:31:38,720 --> 00:31:40,559
service account does work but once again

819
00:31:40,559 --> 00:31:42,159
we run into this

820
00:31:42,159 --> 00:31:44,000
temporary nature so once the service

821
00:31:44,000 --> 00:31:45,840
account is re-enabled

822
00:31:45,840 --> 00:31:48,080
the tokens were so how do we make this

823
00:31:48,080 --> 00:31:48,880
work and

824
00:31:48,880 --> 00:31:50,080
we're going to try to make this work

825
00:31:50,080 --> 00:31:52,080
because there's no

826
00:31:52,080 --> 00:31:54,399
similar delete connected app

827
00:31:54,399 --> 00:31:58,000
functionality for service accounts

828
00:31:58,000 --> 00:32:00,240
you can make this work by by ensuring

829
00:32:00,240 --> 00:32:02,159
you have a cloud session duration which

830
00:32:02,159 --> 00:32:03,760
is a timeout on sessions

831
00:32:03,760 --> 00:32:06,000
and you could suspend for a time period

832
00:32:06,000 --> 00:32:07,120
greater than that

833
00:32:07,120 --> 00:32:09,360
timeout so let's say it's set to one

834
00:32:09,360 --> 00:32:10,720
hour to time out

835
00:32:10,720 --> 00:32:12,480
you suspend a service account you wait

836
00:32:12,480 --> 00:32:14,000
an hour when you re-enable

837
00:32:14,000 --> 00:32:16,559
it any current sessions will have been

838
00:32:16,559 --> 00:32:18,559
timed out and invalidated

839
00:32:18,559 --> 00:32:20,240
and of course during the suspension you

840
00:32:20,240 --> 00:32:22,399
change uh

841
00:32:22,399 --> 00:32:26,480
api keys sound confusing that's because

842
00:32:26,480 --> 00:32:28,000
it is

843
00:32:28,000 --> 00:32:29,679
how about deleting service gun it works

844
00:32:29,679 --> 00:32:31,200
just like deleting a user account

845
00:32:31,200 --> 00:32:33,840
it just has high impact so the bottom

846
00:32:33,840 --> 00:32:36,399
line is

847
00:32:38,399 --> 00:32:42,480
the best option it depends on you

848
00:32:42,480 --> 00:32:45,440
can you recover from a disabled service

849
00:32:45,440 --> 00:32:47,600
account versus a deleted service account

850
00:32:47,600 --> 00:32:49,679
reliably and quickly which one gives you

851
00:32:49,679 --> 00:32:50,880
the fastest path

852
00:32:50,880 --> 00:32:54,480
to availability knowing that service

853
00:32:54,480 --> 00:32:56,320
accounts may be widely used by

854
00:32:56,320 --> 00:32:58,159
compute instances not necessarily right

855
00:32:58,159 --> 00:33:00,480
answer at a minimum you have to disable

856
00:33:00,480 --> 00:33:02,159
the service account for at least an hour

857
00:33:02,159 --> 00:33:03,919
or whatever your cloud session duration

858
00:33:03,919 --> 00:33:04,399
is

859
00:33:04,399 --> 00:33:05,919
if you set to eight hours you'd have to

860
00:33:05,919 --> 00:33:07,600
be down for eight hours

861
00:33:07,600 --> 00:33:09,200
it could potentially be recovered

862
00:33:09,200 --> 00:33:10,720
quicker with the deletion of service

863
00:33:10,720 --> 00:33:11,440
account but

864
00:33:11,440 --> 00:33:14,799
only if you're good at provisioning and

865
00:33:14,799 --> 00:33:17,840
keep up-to-date track of permissions and

866
00:33:17,840 --> 00:33:18,720
roles and

867
00:33:18,720 --> 00:33:21,360
everything else

868
00:33:23,039 --> 00:33:25,840
so in conclusion

869
00:33:26,320 --> 00:33:28,080
we've gone through sort of five

870
00:33:28,080 --> 00:33:29,840
different tax scenarios

871
00:33:29,840 --> 00:33:31,679
external clients where the sdks

872
00:33:31,679 --> 00:33:33,440
installed both user accounts and service

873
00:33:33,440 --> 00:33:35,519
accounts

874
00:33:35,519 --> 00:33:37,440
internal environments like compute

875
00:33:37,440 --> 00:33:40,880
engines where the sdk is installed

876
00:33:40,880 --> 00:33:43,760
but also the cloud shell environments

877
00:33:43,760 --> 00:33:45,120
which are managed by

878
00:33:45,120 --> 00:33:48,799
google itself but also have cloud sdk

879
00:33:48,799 --> 00:33:52,240
and within compute engines outside

880
00:33:52,240 --> 00:33:53,919
of an sdk installed there's a more

881
00:33:53,919 --> 00:33:56,080
general problem where service account

882
00:33:56,080 --> 00:33:57,760
access tokens

883
00:33:57,760 --> 00:33:59,440
are available through the metadata

884
00:33:59,440 --> 00:34:01,760
service so these are all

885
00:34:01,760 --> 00:34:04,480
opportunities in different vectors to

886
00:34:04,480 --> 00:34:05,039
attack

887
00:34:05,039 --> 00:34:07,279
and they're also different areas that

888
00:34:07,279 --> 00:34:08,800
need to be considered and

889
00:34:08,800 --> 00:34:12,079
defended against the defensive measures

890
00:34:12,079 --> 00:34:13,440
in all cases

891
00:34:13,440 --> 00:34:15,280
tend to revolve around this and so this

892
00:34:15,280 --> 00:34:16,639
is a consolidated

893
00:34:16,639 --> 00:34:20,879
summary definitely set session time out

894
00:34:20,879 --> 00:34:24,639
implement iplo lists use mfa so that

895
00:34:24,639 --> 00:34:27,280
after a timeout you have a higher level

896
00:34:27,280 --> 00:34:28,800
of authentication

897
00:34:28,800 --> 00:34:32,560
controls in place detect

898
00:34:32,560 --> 00:34:34,960
failed authorizations due to your ip

899
00:34:34,960 --> 00:34:36,079
white listing

900
00:34:36,079 --> 00:34:40,239
as well as try to be proactive and

901
00:34:40,239 --> 00:34:43,040
install fake accounts or breadcrumbs in

902
00:34:43,040 --> 00:34:43,520
every

903
00:34:43,520 --> 00:34:46,879
cli install by just manipulating the

904
00:34:46,879 --> 00:34:48,960
credential cache directly

905
00:34:48,960 --> 00:34:51,918
and for remediation sort through all the

906
00:34:51,918 --> 00:34:54,480
multitude of options

907
00:34:54,480 --> 00:34:56,239
and focus on the ones that work

908
00:34:56,239 --> 00:34:58,560
especially for the current

909
00:34:58,560 --> 00:35:01,920
session access delete connected

910
00:35:01,920 --> 00:35:04,240
applications in g suite is key

911
00:35:04,240 --> 00:35:06,079
and then determine whether disabling or

912
00:35:06,079 --> 00:35:09,359
deleting service accounts

913
00:35:09,440 --> 00:35:12,960
is more reliable or quicker for you

914
00:35:12,960 --> 00:35:15,760
and in terms of takeaways hijacking

915
00:35:15,760 --> 00:35:18,720
authentication is not new

916
00:35:18,720 --> 00:35:21,839
but cloud sessions is relatively new

917
00:35:21,839 --> 00:35:24,000
and it's also easy to do and just

918
00:35:24,000 --> 00:35:26,480
because they're temporary doesn't mean

919
00:35:26,480 --> 00:35:29,440
they're secure you have to do the work

920
00:35:29,440 --> 00:35:31,200
to actually defend against that

921
00:35:31,200 --> 00:35:33,680
unfortunately cloud vendors have done a

922
00:35:33,680 --> 00:35:34,720
poor job

923
00:35:34,720 --> 00:35:38,320
in tracking temporary tokens or allowing

924
00:35:38,320 --> 00:35:40,560
clean replication of these temporary

925
00:35:40,560 --> 00:35:42,160
credentials

926
00:35:42,160 --> 00:35:43,440
and they really need to provide better

927
00:35:43,440 --> 00:35:45,839
support for prevention detection

928
00:35:45,839 --> 00:35:47,839
from a defensive viewpoint though there

929
00:35:47,839 --> 00:35:49,200
are concrete things we can do

930
00:35:49,200 --> 00:35:51,599
session timeouts ipo a lot less things

931
00:35:51,599 --> 00:35:53,280
that we just discussed on the previous

932
00:35:53,280 --> 00:35:54,400
slide

933
00:35:54,400 --> 00:35:57,119
but focus on low false positive kinds of

934
00:35:57,119 --> 00:35:58,960
failures for detection

935
00:35:58,960 --> 00:36:00,720
and test test tests on the remediation

936
00:36:00,720 --> 00:36:02,320
side where there's often

937
00:36:02,320 --> 00:36:06,160
many options and if you can be organized

938
00:36:06,160 --> 00:36:08,480
within change management procedures it

939
00:36:08,480 --> 00:36:10,000
will certainly help

940
00:36:10,000 --> 00:36:13,599
a great deal in the remediation area

941
00:36:13,599 --> 00:36:14,240
because you can

942
00:36:14,240 --> 00:36:17,520
at the worst case delete and recreate

943
00:36:17,520 --> 00:36:21,200
resources to deal with current access

944
00:36:21,200 --> 00:36:23,520
and just be very aware that within

945
00:36:23,520 --> 00:36:24,560
google

946
00:36:24,560 --> 00:36:27,839
g suite versus gcp

947
00:36:27,839 --> 00:36:29,520
they split responsibility for various

948
00:36:29,520 --> 00:36:32,000
security functions

949
00:36:32,000 --> 00:36:33,760
that are very important when you're in

950
00:36:33,760 --> 00:36:35,280
the middle of an incident and

951
00:36:35,280 --> 00:36:37,359
that access and roles and

952
00:36:37,359 --> 00:36:38,320
responsibilities

953
00:36:38,320 --> 00:36:41,440
need to be sorted out clearly

954
00:36:41,440 --> 00:36:45,359
prior to any incident thank you

955
00:36:45,359 --> 00:36:48,760
and now i think we have some time for

956
00:36:48,760 --> 00:36:51,760
questions

